00000                 | 
00000                 | #line 1 "D:/Programowanie/P2-Retromachine-Basic/basic024.p2asm"
00000                 | con
00000                 | 	_clkfreq = 337000000
00000                 | 	_clkmode = 21844219
00000                 | 	HEAPSIZE = 192000
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	ver = 24
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getivar = 17
00000                 | 	fun_getuvar = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1023
00000                 | 	maxstack = 512
00000                 | 	maxfor = 128
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 337000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $14d50fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 A8 A6 80 FF 
00420 007 00 F0 65 FD | 	hubset	##21844216
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a A8 A6 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##21844219
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 1B 0B 8A FF 
00440 00f 14 80 6C FC | 	wrlong	##337000000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 0C 5B A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 1F 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 1F 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 32 65 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 31 63 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 32 63 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 64 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 62 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 31 63 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 32 65 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec 34 24 03 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed 20 22 03 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 3C 12 06 00 | 	long	@objmem
007d0 0f3             | ptr__Audio093b_8_sc_spin2_dat__
007d0 0f3 00 11 03 00 | 	long	@_Audio093b_8_sc_spin2_dat_
007d4 0f4             | ptr___system__dat__
007d4 0f4 00 15 03 00 | 	long	@__system__dat_
007d8 0f5             | ptr__dat__
007d8 0f5 3C 8E 02 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 40 1C 03 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 74 AF 02 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 04 08 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 24 D7 02 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa DC D4 02 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb B4 E6 02 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc 1C 08 07 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' 
00804                 | ' 
00804                 | ' '----------------------------------- this is the end of the main loop ------------------------------------------------------------------
00804                 | ' 
00804                 | ' sub housekeeper
00804                 | _housekeeper
00804                 | ' 
00804                 | ' do
00804                 | LR__0001
00804                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
00804     45 E4 05 F1 | 	add	objptr, #69
00808                 | LR__0002
00808     F2 12 02 FB | 	rdlong	arg01, objptr
0080c     01 12 0E F2 | 	cmp	arg01, #1 wz
00810     F4 FF 9F 5D |  if_ne	jmp	#LR__0002
00814     7A 00 00 FF 
00818     03 E5 05 F1 | 	add	objptr, ##62723
0081c     F2 12 02 FB | 	rdlong	arg01, objptr
00820     01 12 06 F1 | 	add	arg01, #1
00824     F2 12 62 FC | 	wrlong	arg01, objptr
00828     7A 00 00 FF 
0082c     48 E5 85 F1 | 	sub	objptr, ##62792
00830     80 00 B0 FD | 	call	#_gethdi
00834     05 12 06 F6 | 	mov	arg01, #5
00838     30 88 B1 FD | 	call	#__system___waitms
0083c     7A 00 00 FF 
00840     48 E5 05 F1 | 	add	objptr, ##62792
00844     F2 12 02 FB | 	rdlong	arg01, objptr
00848     01 12 06 F1 | 	add	arg01, #1
0084c     F2 12 62 FC | 	wrlong	arg01, objptr
00850     7A 00 00 FF 
00854     48 E5 85 F1 | 	sub	objptr, ##62792
00858     58 00 B0 FD | 	call	#_gethdi
0085c     05 12 06 F6 | 	mov	arg01, #5
00860     08 88 B1 FD | 	call	#__system___waitms
00864     7A 00 00 FF 
00868     48 E5 05 F1 | 	add	objptr, ##62792
0086c     F2 12 02 FB | 	rdlong	arg01, objptr
00870     01 12 06 F1 | 	add	arg01, #1
00874     F2 12 62 FC | 	wrlong	arg01, objptr
00878     7A 00 00 FF 
0087c     48 E5 85 F1 | 	sub	objptr, ##62792
00880     30 00 B0 FD | 	call	#_gethdi
00884     05 12 06 F6 | 	mov	arg01, #5
00888     E0 87 B1 FD | 	call	#__system___waitms
0088c     7A 00 00 FF 
00890     48 E5 05 F1 | 	add	objptr, ##62792
00894     F2 12 02 FB | 	rdlong	arg01, objptr
00898     01 12 06 F1 | 	add	arg01, #1
0089c     F2 12 62 FC | 	wrlong	arg01, objptr
008a0     7A 00 00 FF 
008a4     48 E5 85 F1 | 	sub	objptr, ##62792
008a8     08 00 B0 FD | 	call	#_gethdi
008ac     54 FF 9F FD | 	jmp	#LR__0001
008b0                 | _housekeeper_ret
008b0     2D 00 64 FD | 	ret
008b4                 | 
008b4                 | ' 
008b4                 | ' 
008b4                 | ' sub gethdi
008b4                 | _gethdi
008b4     03 4A 05 F6 | 	mov	COUNT_, #3
008b8     A8 00 A0 FD | 	call	#pushregs_
008bc                 | '   x := mouse_xacc
008bc     14 00 00 FF 
008c0     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
008c4     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
008c8                 | '   y := mouse_yacc
008c8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008cc     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
008d0     7A 00 00 FF 
008d4     C0 E4 05 F1 | 	add	objptr, ##62656
008d8     F2 14 62 FC | 	wrlong	arg02, objptr
008dc     04 E4 05 F1 | 	add	objptr, #4
008e0     F2 12 62 FC | 	wrlong	arg01, objptr
008e4                 | '   x := 0
008e4                 | '   y := mouse_zacc
008e4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008e8     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
008ec     08 E4 05 F1 | 	add	objptr, #8
008f0     F2 FA 61 FC | 	wrlong	result1, objptr
008f4                 | '   return mouse_bstate&7
008f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008f8     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
008fc     14 00 00 FF 
00900     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
00904     07 FA 05 F5 | 	and	result1, #7
00908     04 E4 85 F1 | 	sub	objptr, #4
0090c     F2 FA 61 FC | 	wrlong	result1, objptr
00910     7A 00 00 FF 
00914     C8 E4 85 F1 | 	sub	objptr, ##62664
00918     00 1E 06 F6 | 	mov	local01, #0
0091c                 | ' 
0091c                 | '   mousex,mousey=kbm.mouse_xy()
0091c                 | '   dummy,mousew=kbm.mouse_scroll()
0091c                 | '   mousek=kbm.mouse_buttons()
0091c                 | '   
0091c                 | '   i=0:
0091c                 | '   for j=0 to 6
0091c     00 20 06 F6 | 	mov	local02, #0
00920                 | LR__0010
00920                 | '     if kbm.hidpad_id(j)>0 then
00920     10 13 02 F6 | 	mov	arg01, local02
00924     EC 7D B1 FD | 	call	#_usbnew_spin2_hidpad_id
00928     01 FA 55 F2 | 	cmps	result1, #1 wc
0092c     8C 00 90 CD |  if_b	jmp	#LR__0011
00930     10 13 02 F6 | 	mov	arg01, local02
00934     00 14 06 F6 | 	mov	arg02, #0
00938     3C 7E B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0093c     FD 22 02 F6 | 	mov	local03, result1
00940     10 13 02 F6 | 	mov	arg01, local02
00944     01 14 06 F6 | 	mov	arg02, #1
00948     2C 7E B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0094c     60 00 00 FF 
00950     00 22 06 F1 | 	add	local03, ##49152
00954     0F 22 46 F0 | 	shr	local03, #15
00958     01 14 06 F6 | 	mov	arg02, #1
0095c     11 15 02 F1 | 	add	arg02, local03
00960     60 00 00 FF 
00964     00 FA 05 F1 | 	add	result1, ##49152
00968     0F FA 45 F0 | 	shr	result1, #15
0096c     01 12 06 F6 | 	mov	arg01, #1
00970     FD 12 02 F1 | 	add	arg01, result1
00974     0F 23 02 F6 | 	mov	local03, local01
00978     02 22 66 F0 | 	shl	local03, #2
0097c     7A 00 00 FF 
00980     D0 E4 05 F1 | 	add	objptr, ##62672
00984     F2 22 02 F1 | 	add	local03, objptr
00988     02 12 66 F0 | 	shl	arg01, #2
0098c     09 15 02 F1 | 	add	arg02, arg01
00990     11 15 62 FC | 	wrlong	arg02, local03
00994     0F 23 02 F6 | 	mov	local03, local01
00998     02 22 66 F0 | 	shl	local03, #2
0099c     1C E4 05 F1 | 	add	objptr, #28
009a0     F2 22 02 F1 | 	add	local03, objptr
009a4     10 13 02 F6 | 	mov	arg01, local02
009a8     7A 00 00 FF 
009ac     EC E4 85 F1 | 	sub	objptr, ##62700
009b0     90 7D B1 FD | 	call	#_usbnew_spin2_hidpad_buttons
009b4     11 FB 61 FC | 	wrlong	result1, local03
009b8     01 1E 06 F1 | 	add	local01, #1
009bc                 | LR__0011
009bc     01 20 06 F1 | 	add	local02, #1
009c0     07 20 16 F2 | 	cmp	local02, #7 wc
009c4     58 FF 9F CD |  if_b	jmp	#LR__0010
009c8     97 22 48 FB | 	callpa	#(@LR__0013-@LR__0012)>>2,fcache_load_ptr_
009cc                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
009cc                 | LR__0012
009cc     07 1E 16 F2 | 	cmp	local01, #7 wc
009d0     3C 00 90 3D |  if_ae	jmp	#LR__0014
009d4     0F 23 02 F6 | 	mov	local03, local01
009d8     02 22 66 F0 | 	shl	local03, #2
009dc     7A 00 00 FF 
009e0     D0 E4 05 F1 | 	add	objptr, ##62672
009e4     F2 22 02 F1 | 	add	local03, objptr
009e8     11 01 68 FC | 	wrlong	#0, local03
009ec     0F 23 02 F6 | 	mov	local03, local01
009f0     02 22 66 F0 | 	shl	local03, #2
009f4     1C E4 05 F1 | 	add	objptr, #28
009f8     F2 22 02 F1 | 	add	local03, objptr
009fc     11 01 68 FC | 	wrlong	#0, local03
00a00     01 1E 06 F1 | 	add	local01, #1
00a04     7A 00 00 FF 
00a08     EC E4 85 F1 | 	sub	objptr, ##62700
00a0c     BC FF 9F FD | 	jmp	#LR__0012
00a10                 | LR__0013
00a10                 | LR__0014
00a10     A7 F0 03 F6 | 	mov	ptra, fp
00a14     B2 00 A0 FD | 	call	#popregs_
00a18                 | _gethdi_ret
00a18     2D 00 64 FD | 	ret
00a1c                 | 
00a1c                 | ' 
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' '----------------------------------- The line interpreter/tokenizer --------------------------------------------------------------------
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' 
00a1c                 | ' sub interpret
00a1c                 | _interpret
00a1c     22 4A 05 F6 | 	mov	COUNT_, #34
00a20     A8 00 A0 FD | 	call	#pushregs_
00a24     01 00 00 FF 
00a28     4C F0 07 F1 | 	add	ptra, ##588
00a2c     56 00 00 FF 
00a30     F0 E4 05 F1 | 	add	objptr, ##44272
00a34     F2 1E 02 FB | 	rdlong	local01, objptr
00a38     04 E4 05 F1 | 	add	objptr, #4
00a3c     F2 1E 62 FC | 	wrlong	local01, objptr
00a40     04 E4 05 F1 | 	add	objptr, #4
00a44     FF FF FF FF 
00a48     F2 FE 6B FC | 	wrlong	##-1, objptr
00a4c     24 00 00 FF 
00a50     6C E4 05 F1 | 	add	objptr, ##18540
00a54     F2 00 68 FC | 	wrlong	#0, objptr
00a58     11 00 00 FF 
00a5c     14 E4 85 F1 | 	sub	objptr, ##8724
00a60     F2 00 68 FC | 	wrlong	#0, objptr
00a64     69 00 00 FF 
00a68     50 E5 85 F1 | 	sub	objptr, ##54096
00a6c     00 20 06 F6 | 	mov	local02, #0
00a70                 | LR__0020
00a70                 | ' 
00a70                 | ' ' ---------------------------------------------------  Pass 1: Split the line to parts, detect and concatenate strings
00a70                 | ' 
00a70                 | ' fullline$=line$: cont=-1  : linenum=0 : lineptr=0 : err=0
00a70                 | ' 
00a70                 | ' 108 for i=0 to 125: separators(i)=0 :next i
00a70     00 22 06 F6 | 	mov	local03, #0
00a74     20 4E 05 F1 | 	add	fp, #32
00a78     97 0E 48 FB | 	callpa	#(@LR__0022-@LR__0021)>>2,fcache_load_ptr_
00a7c                 | LR__0021
00a7c     11 25 02 F6 | 	mov	local04, local03
00a80     02 24 66 F0 | 	shl	local04, #2
00a84     A7 24 02 F1 | 	add	local04, fp
00a88     12 01 68 FC | 	wrlong	#0, local04
00a8c     01 22 06 F1 | 	add	local03, #1
00a90     7E 22 56 F2 | 	cmps	local03, #126 wc
00a94     E4 FF 9F CD |  if_b	jmp	#LR__0021
00a98                 | LR__0022
00a98     20 4E 85 F1 | 	sub	fp, #32
00a9c                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
00a9c     00 22 06 F6 | 	mov	local03, #0
00aa0     54 00 00 FF 
00aa4     E0 E4 05 F1 | 	add	objptr, ##43232
00aa8     97 20 48 FB | 	callpa	#(@LR__0024-@LR__0023)>>2,fcache_load_ptr_
00aac                 | LR__0023
00aac     11 1F 02 F6 | 	mov	local01, local03
00ab0     03 1E 66 F0 | 	shl	local01, #3
00ab4     F2 1E 02 F1 | 	add	local01, objptr
00ab8     41 01 00 FF 
00abc     16 17 06 F6 | 	mov	arg03, ##@LR__4277
00ac0     0F 17 62 FC | 	wrlong	arg03, local01
00ac4     11 1F 02 F6 | 	mov	local01, local03
00ac8     03 1E 66 F0 | 	shl	local01, #3
00acc     F2 26 02 F6 | 	mov	local05, objptr
00ad0     F2 1E 02 F1 | 	add	local01, objptr
00ad4     00 28 06 F6 | 	mov	local06, #0
00ad8     04 1E 06 F1 | 	add	local01, #4
00adc     0F 01 68 FC | 	wrlong	#0, local01
00ae0     01 22 06 F1 | 	add	local03, #1
00ae4     7E 22 56 F2 | 	cmps	local03, #126 wc
00ae8     C0 FF 9F CD |  if_b	jmp	#LR__0023
00aec                 | LR__0024
00aec     02 00 00 FF 
00af0     10 E4 05 F1 | 	add	objptr, ##1040
00af4     F2 12 02 FB | 	rdlong	arg01, objptr
00af8     56 00 00 FF 
00afc     F0 E4 85 F1 | 	sub	objptr, ##44272
00b00     B8 A6 B1 FD | 	call	#__system__RTrim_S
00b04     FD 12 02 F6 | 	mov	arg01, result1
00b08     F0 A5 B1 FD | 	call	#__system__LTrim_S
00b0c     56 00 00 FF 
00b10     F0 E4 05 F1 | 	add	objptr, ##44272
00b14     F2 FA 61 FC | 	wrlong	result1, objptr
00b18     41 01 00 FF 
00b1c     17 1F 06 F6 | 	mov	local01, ##@LR__4278
00b20     24 00 00 FF 
00b24     94 E4 05 F1 | 	add	objptr, ##18580
00b28     F2 1E 62 FC | 	wrlong	local01, objptr
00b2c     24 00 00 FF 
00b30     94 E4 85 F1 | 	sub	objptr, ##18580
00b34     F2 12 02 FB | 	rdlong	arg01, objptr
00b38     56 00 00 FF 
00b3c     F0 E4 85 F1 | 	sub	objptr, ##44272
00b40     09 2B 02 F6 | 	mov	local07, arg01
00b44     97 06 48 FB | 	callpa	#(@LR__0026-@LR__0025)>>2,fcache_load_ptr_
00b48                 | LR__0025
00b48     15 FB C9 FA | 	rdbyte	result1, local07 wz
00b4c     01 2A 06 51 |  if_ne	add	local07, #1
00b50     F4 FF 9F 5D |  if_ne	jmp	#LR__0025
00b54                 | LR__0026
00b54     09 2B 8A F1 | 	sub	local07, arg01 wz
00b58     7A 00 00 FF 
00b5c     88 E5 05 F1 | 	add	objptr, ##62856
00b60     F2 2A 62 FC | 	wrlong	local07, objptr
00b64                 | ' if l=0 then goto 101
00b64     7A 00 00 FF 
00b68     88 E5 85 F1 | 	sub	objptr, ##62856
00b6c     D4 26 90 AD |  if_e	jmp	#LR__0148
00b70     7A 00 00 FF 
00b74     8C E5 05 F1 | 	add	objptr, ##62860
00b78     F2 00 68 FC | 	wrlong	#0, objptr
00b7c                 | ' ' before we split the line, we have to find colons that are inside a string,,,,
00b7c                 | ' for i=1 to len(line$)
00b7c     01 22 06 F6 | 	mov	local03, #1
00b80     24 00 00 FF 
00b84     9C E4 85 F1 | 	sub	objptr, ##18588
00b88     F2 12 02 FB | 	rdlong	arg01, objptr
00b8c     56 00 00 FF 
00b90     F0 E4 85 F1 | 	sub	objptr, ##44272
00b94     09 2B 02 F6 | 	mov	local07, arg01
00b98     97 06 48 FB | 	callpa	#(@LR__0028-@LR__0027)>>2,fcache_load_ptr_
00b9c                 | LR__0027
00b9c     15 FB C9 FA | 	rdbyte	result1, local07 wz
00ba0     01 2A 06 51 |  if_ne	add	local07, #1
00ba4     F4 FF 9F 5D |  if_ne	jmp	#LR__0027
00ba8                 | LR__0028
00ba8     09 2B 82 F1 | 	sub	local07, arg01
00bac     15 2D 02 F6 | 	mov	local08, local07
00bb0     01 2C 06 F1 | 	add	local08, #1
00bb4                 | LR__0029
00bb4     16 23 52 F2 | 	cmps	local03, local08 wc
00bb8     00 01 90 3D |  if_ae	jmp	#LR__0032
00bbc                 | ' 
00bbc                 | '   if mid$(line$,i,1)="""" andalso d=0 then 
00bbc     56 00 00 FF 
00bc0     F0 E4 05 F1 | 	add	objptr, ##44272
00bc4     F2 12 02 FB | 	rdlong	arg01, objptr
00bc8     56 00 00 FF 
00bcc     F0 E4 85 F1 | 	sub	objptr, ##44272
00bd0     11 15 02 F6 | 	mov	arg02, local03
00bd4     01 16 06 F6 | 	mov	arg03, #1
00bd8     C4 A2 B1 FD | 	call	#__system__Mid_S
00bdc     FD 12 02 F6 | 	mov	arg01, result1
00be0     41 01 00 FF 
00be4     18 15 06 F6 | 	mov	arg02, ##@LR__4279
00be8     B4 81 B1 FD | 	call	#__system___string_cmp
00bec     00 FA 0D F2 | 	cmp	result1, #0 wz
00bf0     2C 00 90 5D |  if_ne	jmp	#LR__0030
00bf4     7A 00 00 FF 
00bf8     8C E5 05 F1 | 	add	objptr, ##62860
00bfc     F2 24 0A FB | 	rdlong	local04, objptr wz
00c00     7A 00 00 FF 
00c04     8C E5 85 F1 | 	sub	objptr, ##62860
00c08     7A 00 00 AF 
00c0c     8C E5 05 A1 |  if_e	add	objptr, ##62860
00c10     F2 02 68 AC |  if_e	wrlong	#1, objptr
00c14     7A 00 00 AF 
00c18     8C E5 85 A1 |  if_e	sub	objptr, ##62860
00c1c     60 00 90 AD |  if_e	jmp	#LR__0031
00c20                 | LR__0030
00c20     56 00 00 FF 
00c24     F0 E4 05 F1 | 	add	objptr, ##44272
00c28     F2 12 02 FB | 	rdlong	arg01, objptr
00c2c     56 00 00 FF 
00c30     F0 E4 85 F1 | 	sub	objptr, ##44272
00c34     11 15 02 F6 | 	mov	arg02, local03
00c38     01 16 06 F6 | 	mov	arg03, #1
00c3c     60 A2 B1 FD | 	call	#__system__Mid_S
00c40     FD 12 02 F6 | 	mov	arg01, result1
00c44     41 01 00 FF 
00c48     1A 15 06 F6 | 	mov	arg02, ##@LR__4280
00c4c     50 81 B1 FD | 	call	#__system___string_cmp
00c50     00 FA 0D F2 | 	cmp	result1, #0 wz
00c54     7A 00 00 AF 
00c58     8C E5 05 A1 |  if_e	add	objptr, ##62860
00c5c     F2 24 02 AB |  if_e	rdlong	local04, objptr
00c60     7A 00 00 AF 
00c64     8C E5 85 A1 |  if_e	sub	objptr, ##62860
00c68     01 24 0E A2 |  if_e	cmp	local04, #1 wz
00c6c     7A 00 00 AF 
00c70     8C E5 05 A1 |  if_e	add	objptr, ##62860
00c74     F2 00 68 AC |  if_e	wrlong	#0, objptr
00c78     7A 00 00 AF 
00c7c     8C E5 85 A1 |  if_e	sub	objptr, ##62860
00c80                 | LR__0031
00c80     11 1F 02 F6 | 	mov	local01, local03
00c84     03 1E 66 F0 | 	shl	local01, #3
00c88     54 00 00 FF 
00c8c     E0 E4 05 F1 | 	add	objptr, ##43232
00c90     F2 26 02 F6 | 	mov	local05, objptr
00c94     F2 1E 02 F1 | 	add	local01, objptr
00c98     26 00 00 FF 
00c9c     AC E4 05 F1 | 	add	objptr, ##19628
00ca0     F2 28 02 FB | 	rdlong	local06, objptr
00ca4     7A 00 00 FF 
00ca8     8C E5 85 F1 | 	sub	objptr, ##62860
00cac     04 1E 06 F1 | 	add	local01, #4
00cb0     0F 29 62 FC | 	wrlong	local06, local01
00cb4     01 22 06 F1 | 	add	local03, #1
00cb8     F8 FE 9F FD | 	jmp	#LR__0029
00cbc                 | LR__0032
00cbc     01 22 06 F6 | 	mov	local03, #1
00cc0                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop
00cc0                 | LR__0033
00cc0     56 00 00 FF 
00cc4     F0 E4 05 F1 | 	add	objptr, ##44272
00cc8     F2 12 02 FB | 	rdlong	arg01, objptr
00ccc     56 00 00 FF 
00cd0     F0 E4 85 F1 | 	sub	objptr, ##44272
00cd4     11 15 02 F6 | 	mov	arg02, local03
00cd8     01 16 06 F6 | 	mov	arg03, #1
00cdc     C0 A1 B1 FD | 	call	#__system__Mid_S
00ce0     FD 12 02 F6 | 	mov	arg01, result1
00ce4     41 01 00 FF 
00ce8     1C 2F 06 F6 | 	mov	local09, ##@LR__4281
00cec     17 15 02 F6 | 	mov	arg02, local09
00cf0     AC 80 B1 FD | 	call	#__system___string_cmp
00cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
00cf8     34 00 90 5D |  if_ne	jmp	#LR__0034
00cfc     11 27 02 F6 | 	mov	local05, local03
00d00     03 26 66 F0 | 	shl	local05, #3
00d04     54 00 00 FF 
00d08     E0 E4 05 F1 | 	add	objptr, ##43232
00d0c     F2 28 02 F6 | 	mov	local06, objptr
00d10     F2 26 02 F1 | 	add	local05, objptr
00d14     04 26 06 F1 | 	add	local05, #4
00d18     13 31 02 FB | 	rdlong	local10, local05
00d1c     04 26 86 F1 | 	sub	local05, #4
00d20     18 33 0A F6 | 	mov	local11, local10 wz
00d24     54 00 00 FF 
00d28     E0 E4 85 F1 | 	sub	objptr, ##43232
00d2c     24 00 90 AD |  if_e	jmp	#LR__0035
00d30                 | LR__0034
00d30     7A 00 00 FF 
00d34     88 E5 05 F1 | 	add	objptr, ##62856
00d38     F2 34 02 FB | 	rdlong	local12, objptr
00d3c     7A 00 00 FF 
00d40     88 E5 85 F1 | 	sub	objptr, ##62856
00d44     1A 37 02 F6 | 	mov	local13, local12
00d48     1B 23 52 F2 | 	cmps	local03, local13 wc
00d4c     01 22 06 C1 |  if_b	add	local03, #1
00d50     6C FF 9F CD |  if_b	jmp	#LR__0033
00d54                 | LR__0035
00d54                 | ' 
00d54                 | ' 'let d=instr(1,line$,":"): if d>0 andalso d<len(line$) andalso lparts(d).token=0  then let rest$=trim$(right$(line$,len(line$)-d)):line$=trim$(left$(line$,d-1)) else rest$=""  
00d54                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 
00d54     7A 00 00 FF 
00d58     88 E5 05 F1 | 	add	objptr, ##62856
00d5c     F2 1E 02 FB | 	rdlong	local01, objptr
00d60     7A 00 00 FF 
00d64     88 E5 85 F1 | 	sub	objptr, ##62856
00d68     0F 23 52 F2 | 	cmps	local03, local01 wc
00d6c     A4 00 90 3D |  if_ae	jmp	#LR__0038
00d70     56 00 00 FF 
00d74     F0 E4 05 F1 | 	add	objptr, ##44272
00d78     F2 28 02 FB | 	rdlong	local06, objptr
00d7c     56 00 00 FF 
00d80     F0 E4 85 F1 | 	sub	objptr, ##44272
00d84     14 13 02 F6 | 	mov	arg01, local06
00d88     09 2B 02 F6 | 	mov	local07, arg01
00d8c     97 06 48 FB | 	callpa	#(@LR__0037-@LR__0036)>>2,fcache_load_ptr_
00d90                 | LR__0036
00d90     15 FB C9 FA | 	rdbyte	result1, local07 wz
00d94     01 2A 06 51 |  if_ne	add	local07, #1
00d98     F4 FF 9F 5D |  if_ne	jmp	#LR__0036
00d9c                 | LR__0037
00d9c     09 2B 82 F1 | 	sub	local07, arg01
00da0     15 15 02 F6 | 	mov	arg02, local07
00da4     11 15 82 F1 | 	sub	arg02, local03
00da8     14 13 02 F6 | 	mov	arg01, local06
00dac     60 A0 B1 FD | 	call	#__system__Right_S
00db0     FD 12 02 F6 | 	mov	arg01, result1
00db4     04 A4 B1 FD | 	call	#__system__RTrim_S
00db8     FD 12 02 F6 | 	mov	arg01, result1
00dbc     3C A3 B1 FD | 	call	#__system__LTrim_S
00dc0     7A 00 00 FF 
00dc4     90 E5 05 F1 | 	add	objptr, ##62864
00dc8     F2 FA 61 FC | 	wrlong	result1, objptr
00dcc     24 00 00 FF 
00dd0     A0 E4 85 F1 | 	sub	objptr, ##18592
00dd4     F2 12 02 FB | 	rdlong	arg01, objptr
00dd8     56 00 00 FF 
00ddc     F0 E4 85 F1 | 	sub	objptr, ##44272
00de0     01 22 86 F1 | 	sub	local03, #1
00de4     11 15 02 F6 | 	mov	arg02, local03
00de8     9C 9F B1 FD | 	call	#__system__Left_S
00dec     FD 12 02 F6 | 	mov	arg01, result1
00df0     C8 A3 B1 FD | 	call	#__system__RTrim_S
00df4     FD 12 02 F6 | 	mov	arg01, result1
00df8     00 A3 B1 FD | 	call	#__system__LTrim_S
00dfc     56 00 00 FF 
00e00     F0 E4 05 F1 | 	add	objptr, ##44272
00e04     F2 FA 61 FC | 	wrlong	result1, objptr
00e08     56 00 00 FF 
00e0c     F0 E4 85 F1 | 	sub	objptr, ##44272
00e10     1C 00 90 FD | 	jmp	#LR__0039
00e14                 | LR__0038
00e14     41 01 00 FF 
00e18     1E 1F 06 F6 | 	mov	local01, ##@LR__4282
00e1c     7A 00 00 FF 
00e20     90 E5 05 F1 | 	add	objptr, ##62864
00e24     F2 1E 62 FC | 	wrlong	local01, objptr
00e28     7A 00 00 FF 
00e2c     90 E5 85 F1 | 	sub	objptr, ##62864
00e30                 | LR__0039
00e30                 | ' 'print "line$=";line$
00e30                 | ' 'print "rest$=";rest$
00e30                 | ' 
00e30                 | ' 
00e30                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not last part
00e30     56 00 00 FF 
00e34     F8 E4 05 F1 | 	add	objptr, ##44280
00e38     F2 1E 02 FB | 	rdlong	local01, objptr
00e3c     56 00 00 FF 
00e40     F8 E4 85 F1 | 	sub	objptr, ##44280
00e44     FF FF 7F FF 
00e48     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00e4c     3C 00 90 5D |  if_ne	jmp	#LR__0040
00e50     7A 00 00 FF 
00e54     90 E5 05 F1 | 	add	objptr, ##62864
00e58     F2 12 02 FB | 	rdlong	arg01, objptr
00e5c     7A 00 00 FF 
00e60     90 E5 85 F1 | 	sub	objptr, ##62864
00e64     41 01 00 FF 
00e68     1F 15 06 F6 | 	mov	arg02, ##@LR__4283
00e6c     30 7F B1 FD | 	call	#__system___string_cmp
00e70     00 FA 0D F2 | 	cmp	result1, #0 wz
00e74     56 00 00 5F 
00e78     F8 E4 05 51 |  if_ne	add	objptr, ##44280
00e7c     F2 00 68 5C |  if_ne	wrlong	#0, objptr
00e80     56 00 00 5F 
00e84     F8 E4 85 51 |  if_ne	sub	objptr, ##44280
00e88     08 01 90 5D |  if_ne	jmp	#LR__0044
00e8c                 | LR__0040
00e8c                 | ' if cont=-1 andalso rest$="" then cont=3 : goto 107		' this is the first AND last part
00e8c     56 00 00 FF 
00e90     F8 E4 05 F1 | 	add	objptr, ##44280
00e94     F2 1E 02 FB | 	rdlong	local01, objptr
00e98     56 00 00 FF 
00e9c     F8 E4 85 F1 | 	sub	objptr, ##44280
00ea0     FF FF 7F FF 
00ea4     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00ea8     3C 00 90 5D |  if_ne	jmp	#LR__0041
00eac     7A 00 00 FF 
00eb0     90 E5 05 F1 | 	add	objptr, ##62864
00eb4     F2 12 02 FB | 	rdlong	arg01, objptr
00eb8     7A 00 00 FF 
00ebc     90 E5 85 F1 | 	sub	objptr, ##62864
00ec0     41 01 00 FF 
00ec4     20 15 06 F6 | 	mov	arg02, ##@LR__4284
00ec8     D4 7E B1 FD | 	call	#__system___string_cmp
00ecc     00 FA 0D F2 | 	cmp	result1, #0 wz
00ed0     56 00 00 AF 
00ed4     F8 E4 05 A1 |  if_e	add	objptr, ##44280
00ed8     F2 06 68 AC |  if_e	wrlong	#3, objptr
00edc     56 00 00 AF 
00ee0     F8 E4 85 A1 |  if_e	sub	objptr, ##44280
00ee4     AC 00 90 AD |  if_e	jmp	#LR__0044
00ee8                 | LR__0041
00ee8                 | ' if cont=4 andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
00ee8     56 00 00 FF 
00eec     F8 E4 05 F1 | 	add	objptr, ##44280
00ef0     F2 1E 02 FB | 	rdlong	local01, objptr
00ef4     56 00 00 FF 
00ef8     F8 E4 85 F1 | 	sub	objptr, ##44280
00efc     04 1E 0E F2 | 	cmp	local01, #4 wz
00f00     3C 00 90 5D |  if_ne	jmp	#LR__0042
00f04     7A 00 00 FF 
00f08     90 E5 05 F1 | 	add	objptr, ##62864
00f0c     F2 12 02 FB | 	rdlong	arg01, objptr
00f10     7A 00 00 FF 
00f14     90 E5 85 F1 | 	sub	objptr, ##62864
00f18     41 01 00 FF 
00f1c     21 15 06 F6 | 	mov	arg02, ##@LR__4285
00f20     7C 7E B1 FD | 	call	#__system___string_cmp
00f24     00 FA 0D F2 | 	cmp	result1, #0 wz
00f28     56 00 00 5F 
00f2c     F8 E4 05 51 |  if_ne	add	objptr, ##44280
00f30     F2 02 68 5C |  if_ne	wrlong	#1, objptr
00f34     56 00 00 5F 
00f38     F8 E4 85 51 |  if_ne	sub	objptr, ##44280
00f3c     54 00 90 5D |  if_ne	jmp	#LR__0044
00f40                 | LR__0042
00f40                 | ' if cont=4 andalso rest$="" then cont=2 :goto 107		' this is the last, and not the first, part
00f40     56 00 00 FF 
00f44     F8 E4 05 F1 | 	add	objptr, ##44280
00f48     F2 1E 02 FB | 	rdlong	local01, objptr
00f4c     56 00 00 FF 
00f50     F8 E4 85 F1 | 	sub	objptr, ##44280
00f54     04 1E 0E F2 | 	cmp	local01, #4 wz
00f58     38 00 90 5D |  if_ne	jmp	#LR__0043
00f5c     7A 00 00 FF 
00f60     90 E5 05 F1 | 	add	objptr, ##62864
00f64     F2 12 02 FB | 	rdlong	arg01, objptr
00f68     7A 00 00 FF 
00f6c     90 E5 85 F1 | 	sub	objptr, ##62864
00f70     41 01 00 FF 
00f74     22 15 06 F6 | 	mov	arg02, ##@LR__4286
00f78     24 7E B1 FD | 	call	#__system___string_cmp
00f7c     00 FA 0D F2 | 	cmp	result1, #0 wz
00f80     56 00 00 AF 
00f84     F8 E4 05 A1 |  if_e	add	objptr, ##44280
00f88     F2 04 68 AC |  if_e	wrlong	#2, objptr
00f8c     56 00 00 AF 
00f90     F8 E4 85 A1 |  if_e	sub	objptr, ##44280
00f94                 | LR__0043
00f94                 | LR__0044
00f94     20 4E 05 F1 | 	add	fp, #32
00f98     A7 00 68 FC | 	wrlong	#0, fp
00f9c     20 4E 85 F1 | 	sub	fp, #32
00fa0     00 22 06 F6 | 	mov	local03, #0
00fa4     01 38 06 F6 | 	mov	local14, #1
00fa8                 | ' 
00fa8                 | ' ' 1b: find separators
00fa8                 | ' 
00fa8                 | ' 107
00fa8                 | ' separators(0)=0
00fa8                 | ' i=0: j=1 : do: i+=1 : let c$=mid$(line$,i,1) 
00fa8                 | LR__0045
00fa8     01 22 06 F1 | 	add	local03, #1
00fac     56 00 00 FF 
00fb0     F0 E4 05 F1 | 	add	objptr, ##44272
00fb4     F2 12 02 FB | 	rdlong	arg01, objptr
00fb8     56 00 00 FF 
00fbc     F0 E4 85 F1 | 	sub	objptr, ##44272
00fc0     11 15 02 F6 | 	mov	arg02, local03
00fc4     01 16 06 F6 | 	mov	arg03, #1
00fc8     D4 9E B1 FD | 	call	#__system__Mid_S
00fcc     7A 00 00 FF 
00fd0     94 E5 05 F1 | 	add	objptr, ##62868
00fd4     F2 FA 61 FC | 	wrlong	result1, objptr
00fd8                 | ' if isseparator(c$) then separators(j)=i: j+=1 
00fd8     FD 12 02 F6 | 	mov	arg01, result1
00fdc     7A 00 00 FF 
00fe0     94 E5 85 F1 | 	sub	objptr, ##62868
00fe4     68 25 B0 FD | 	call	#_isseparator
00fe8     00 FA 0D F2 | 	cmp	result1, #0 wz
00fec     1C 00 90 AD |  if_e	jmp	#LR__0046
00ff0     1C 25 02 F6 | 	mov	local04, local14
00ff4     02 24 66 F0 | 	shl	local04, #2
00ff8     20 4E 05 F1 | 	add	fp, #32
00ffc     A7 24 02 F1 | 	add	local04, fp
01000     12 23 62 FC | 	wrlong	local03, local04
01004     01 38 06 F1 | 	add	local14, #1
01008     20 4E 85 F1 | 	sub	fp, #32
0100c                 | LR__0046
0100c     7A 00 00 FF 
01010     88 E5 05 F1 | 	add	objptr, ##62856
01014     F2 1E 02 FB | 	rdlong	local01, objptr
01018     7A 00 00 FF 
0101c     88 E5 85 F1 | 	sub	objptr, ##62856
01020     0F 23 5A F2 | 	cmps	local03, local01 wcz
01024     80 FF 9F ED |  if_be	jmp	#LR__0045
01028     1C 25 02 F6 | 	mov	local04, local14
0102c     02 24 66 F0 | 	shl	local04, #2
01030     20 4E 05 F1 | 	add	fp, #32
01034     A7 24 02 F1 | 	add	local04, fp
01038     12 23 62 FC | 	wrlong	local03, local04
0103c     00 3A 06 F6 | 	mov	local15, #0
01040                 | ' for i=0 to j-1 
01040     00 22 06 F6 | 	mov	local03, #0
01044     1C 3D 02 F6 | 	mov	local16, local14
01048     20 4E 85 F1 | 	sub	fp, #32
0104c                 | LR__0047
0104c     1E 23 52 F2 | 	cmps	local03, local16 wc
01050     88 01 90 3D |  if_ae	jmp	#LR__0051
01054     11 25 02 F6 | 	mov	local04, local03
01058     02 24 66 F0 | 	shl	local04, #2
0105c     20 4E 05 F1 | 	add	fp, #32
01060     A7 24 02 F1 | 	add	local04, fp
01064     12 27 02 FB | 	rdlong	local05, local04
01068     7A 00 00 FF 
0106c     9C E5 05 F1 | 	add	objptr, ##62876
01070     F2 26 62 FC | 	wrlong	local05, objptr
01074     11 25 02 F6 | 	mov	local04, local03
01078     01 24 06 F1 | 	add	local04, #1
0107c     02 24 66 F0 | 	shl	local04, #2
01080     A7 2E 02 F6 | 	mov	local09, fp
01084     A7 24 02 F1 | 	add	local04, fp
01088     12 27 02 FB | 	rdlong	local05, local04
0108c     04 E4 05 F1 | 	add	objptr, #4
01090     F2 26 62 FC | 	wrlong	local05, objptr
01094                 | '   if p1>0 then let p$=mid$(line$,p1,1):  if   p$<>"" then lparts(k).part$=p$ : k+=1 
01094     04 E4 85 F1 | 	sub	objptr, #4
01098     F2 1E 02 FB | 	rdlong	local01, objptr
0109c     7A 00 00 FF 
010a0     9C E5 85 F1 | 	sub	objptr, ##62876
010a4     01 1E 56 F2 | 	cmps	local01, #1 wc
010a8     20 4E 85 F1 | 	sub	fp, #32
010ac     84 00 90 CD |  if_b	jmp	#LR__0049
010b0     56 00 00 FF 
010b4     F0 E4 05 F1 | 	add	objptr, ##44272
010b8     F2 12 02 FB | 	rdlong	arg01, objptr
010bc     24 00 00 FF 
010c0     AC E4 05 F1 | 	add	objptr, ##18604
010c4     F2 14 02 FB | 	rdlong	arg02, objptr
010c8     7A 00 00 FF 
010cc     9C E5 85 F1 | 	sub	objptr, ##62876
010d0     01 16 06 F6 | 	mov	arg03, #1
010d4     C8 9D B1 FD | 	call	#__system__Mid_S
010d8     7A 00 00 FF 
010dc     A4 E5 05 F1 | 	add	objptr, ##62884
010e0     F2 FA 61 FC | 	wrlong	result1, objptr
010e4     7A 00 00 FF 
010e8     A4 E5 85 F1 | 	sub	objptr, ##62884
010ec     FD 12 02 F6 | 	mov	arg01, result1
010f0     41 01 00 FF 
010f4     23 15 06 F6 | 	mov	arg02, ##@LR__4287
010f8     A4 7C B1 FD | 	call	#__system___string_cmp
010fc     00 FA 0D F2 | 	cmp	result1, #0 wz
01100     30 00 90 AD |  if_e	jmp	#LR__0048
01104     1D 2F 02 F6 | 	mov	local09, local15
01108     03 2E 66 F0 | 	shl	local09, #3
0110c     54 00 00 FF 
01110     E0 E4 05 F1 | 	add	objptr, ##43232
01114     F2 2E 02 F1 | 	add	local09, objptr
01118     26 00 00 FF 
0111c     C4 E4 05 F1 | 	add	objptr, ##19652
01120     F2 28 02 FB | 	rdlong	local06, objptr
01124     7A 00 00 FF 
01128     A4 E5 85 F1 | 	sub	objptr, ##62884
0112c     17 29 62 FC | 	wrlong	local06, local09
01130     01 3A 06 F1 | 	add	local15, #1
01134                 | LR__0048
01134                 | LR__0049
01134     56 00 00 FF 
01138     F0 E4 05 F1 | 	add	objptr, ##44272
0113c     F2 12 02 FB | 	rdlong	arg01, objptr
01140     24 00 00 FF 
01144     AC E4 05 F1 | 	add	objptr, ##18604
01148     F2 14 02 FB | 	rdlong	arg02, objptr
0114c     01 14 06 F1 | 	add	arg02, #1
01150     04 E4 05 F1 | 	add	objptr, #4
01154     F2 16 02 FB | 	rdlong	arg03, objptr
01158     04 E4 85 F1 | 	sub	objptr, #4
0115c     F2 30 02 FB | 	rdlong	local10, objptr
01160     7A 00 00 FF 
01164     9C E5 85 F1 | 	sub	objptr, ##62876
01168     18 33 02 F6 | 	mov	local11, local10
0116c     19 17 82 F1 | 	sub	arg03, local11
01170     01 16 86 F1 | 	sub	arg03, #1
01174     28 9D B1 FD | 	call	#__system__Mid_S
01178     7A 00 00 FF 
0117c     A4 E5 05 F1 | 	add	objptr, ##62884
01180     F2 FA 61 FC | 	wrlong	result1, objptr
01184     7A 00 00 FF 
01188     A4 E5 85 F1 | 	sub	objptr, ##62884
0118c     FD 12 02 F6 | 	mov	arg01, result1
01190     41 01 00 FF 
01194     24 15 06 F6 | 	mov	arg02, ##@LR__4288
01198     04 7C B1 FD | 	call	#__system___string_cmp
0119c     00 FA 0D F2 | 	cmp	result1, #0 wz
011a0     30 00 90 AD |  if_e	jmp	#LR__0050
011a4     1D 2F 02 F6 | 	mov	local09, local15
011a8     03 2E 66 F0 | 	shl	local09, #3
011ac     54 00 00 FF 
011b0     E0 E4 05 F1 | 	add	objptr, ##43232
011b4     F2 2E 02 F1 | 	add	local09, objptr
011b8     26 00 00 FF 
011bc     C4 E4 05 F1 | 	add	objptr, ##19652
011c0     F2 28 02 FB | 	rdlong	local06, objptr
011c4     7A 00 00 FF 
011c8     A4 E5 85 F1 | 	sub	objptr, ##62884
011cc     17 29 62 FC | 	wrlong	local06, local09
011d0     01 3A 06 F1 | 	add	local15, #1
011d4                 | LR__0050
011d4     01 22 06 F1 | 	add	local03, #1
011d8     70 FE 9F FD | 	jmp	#LR__0047
011dc                 | LR__0051
011dc     00 22 06 F6 | 	mov	local03, #0
011e0                 | ' 
011e0                 | ' ' 1d : find strings
011e0                 | ' 
011e0                 | ' i=0
011e0                 | ' do
011e0                 | LR__0052
011e0                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
011e0     11 27 02 F6 | 	mov	local05, local03
011e4     03 26 66 F0 | 	shl	local05, #3
011e8     54 00 00 FF 
011ec     E0 E4 05 F1 | 	add	objptr, ##43232
011f0     F2 26 02 F1 | 	add	local05, objptr
011f4     13 13 02 FB | 	rdlong	arg01, local05
011f8     41 01 00 FF 
011fc     25 15 06 F6 | 	mov	arg02, ##@LR__4289
01200     54 00 00 FF 
01204     E0 E4 85 F1 | 	sub	objptr, ##43232
01208     94 7B B1 FD | 	call	#__system___string_cmp
0120c     00 FA 0D F2 | 	cmp	result1, #0 wz
01210     01 22 06 51 |  if_ne	add	local03, #1
01214     50 01 90 5D |  if_ne	jmp	#LR__0057
01218     11 3F 02 F6 | 	mov	local17, local03
0121c                 | LR__0053
0121c     11 2F 02 F6 | 	mov	local09, local03
01220     01 2E 06 F1 | 	add	local09, #1
01224     03 2E 66 F0 | 	shl	local09, #3
01228     54 00 00 FF 
0122c     E0 E4 05 F1 | 	add	objptr, ##43232
01230     F2 2E 02 F1 | 	add	local09, objptr
01234     17 31 02 FB | 	rdlong	local10, local09
01238     26 00 00 FF 
0123c     C4 E4 05 F1 | 	add	objptr, ##19652
01240     F2 30 62 FC | 	wrlong	local10, objptr
01244     1F 2F 02 F6 | 	mov	local09, local17
01248     03 2E 66 F0 | 	shl	local09, #3
0124c     26 00 00 FF 
01250     C4 E4 85 F1 | 	sub	objptr, ##19652
01254     F2 2E 02 F1 | 	add	local09, objptr
01258     1F 37 02 F6 | 	mov	local13, local17
0125c     03 36 66 F0 | 	shl	local13, #3
01260     F2 36 02 F1 | 	add	local13, objptr
01264     1B 13 02 FB | 	rdlong	arg01, local13
01268     54 00 00 FF 
0126c     E0 E4 85 F1 | 	sub	objptr, ##43232
01270     18 33 02 F6 | 	mov	local11, local10
01274     19 15 02 F6 | 	mov	arg02, local11
01278     58 7B B1 FD | 	call	#__system___string_concat
0127c     17 FB 61 FC | 	wrlong	result1, local09
01280     11 39 02 F6 | 	mov	local14, local03
01284     01 38 06 F1 | 	add	local14, #1
01288     1D 41 02 F6 | 	mov	local18, local15
0128c     01 40 06 F1 | 	add	local18, #1
01290     97 3C 48 FB | 	callpa	#(@LR__0055-@LR__0054)>>2,fcache_load_ptr_
01294                 | LR__0054
01294     20 39 52 F2 | 	cmps	local14, local18 wc
01298     70 00 90 3D |  if_ae	jmp	#LR__0056
0129c     1C 27 02 F6 | 	mov	local05, local14
012a0     01 26 06 F1 | 	add	local05, #1
012a4     03 26 66 F0 | 	shl	local05, #3
012a8     54 00 00 FF 
012ac     E0 E4 05 F1 | 	add	objptr, ##43232
012b0     F2 26 02 F1 | 	add	local05, objptr
012b4     13 1F 02 FB | 	rdlong	local01, local05
012b8     1C 29 02 F6 | 	mov	local06, local14
012bc     01 28 06 F1 | 	add	local06, #1
012c0     03 28 66 F0 | 	shl	local06, #3
012c4     F2 28 02 F1 | 	add	local06, objptr
012c8     04 28 06 F1 | 	add	local06, #4
012cc     14 25 02 FB | 	rdlong	local04, local06
012d0     1C 29 02 F6 | 	mov	local06, local14
012d4     03 28 66 F0 | 	shl	local06, #3
012d8     F2 32 02 F6 | 	mov	local11, objptr
012dc     F2 28 02 F1 | 	add	local06, objptr
012e0     14 1F 62 FC | 	wrlong	local01, local06
012e4     1C 31 02 F6 | 	mov	local10, local14
012e8     18 35 02 F6 | 	mov	local12, local10
012ec     03 34 66 F0 | 	shl	local12, #3
012f0     F2 34 02 F1 | 	add	local12, objptr
012f4     04 34 06 F1 | 	add	local12, #4
012f8     1A 25 62 FC | 	wrlong	local04, local12
012fc     01 38 06 F1 | 	add	local14, #1
01300     54 00 00 FF 
01304     E0 E4 85 F1 | 	sub	objptr, ##43232
01308     88 FF 9F FD | 	jmp	#LR__0054
0130c                 | LR__0055
0130c                 | LR__0056
0130c     01 3A 86 F1 | 	sub	local15, #1
01310     7A 00 00 FF 
01314     A4 E5 05 F1 | 	add	objptr, ##62884
01318     F2 12 02 FB | 	rdlong	arg01, objptr
0131c     7A 00 00 FF 
01320     A4 E5 85 F1 | 	sub	objptr, ##62884
01324     41 01 00 FF 
01328     27 15 06 F6 | 	mov	arg02, ##@LR__4290
0132c     70 7A B1 FD | 	call	#__system___string_cmp
01330     00 FA 0D F2 | 	cmp	result1, #0 wz
01334     1D 23 52 52 |  if_ne	cmps	local03, local15 wc
01338     E0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0053
0133c                 | '   if p$<>"""" then k+=1:i+=1
0133c     7A 00 00 FF 
01340     A4 E5 05 F1 | 	add	objptr, ##62884
01344     F2 12 02 FB | 	rdlong	arg01, objptr
01348     7A 00 00 FF 
0134c     A4 E5 85 F1 | 	sub	objptr, ##62884
01350     41 01 00 FF 
01354     29 15 06 F6 | 	mov	arg02, ##@LR__4291
01358     44 7A B1 FD | 	call	#__system___string_cmp
0135c     00 FA 0D F2 | 	cmp	result1, #0 wz
01360     01 3A 06 51 |  if_ne	add	local15, #1
01364     01 22 06 51 |  if_ne	add	local03, #1
01368                 | LR__0057
01368     1D 23 52 F2 | 	cmps	local03, local15 wc
0136c     70 FE 9F CD |  if_b	jmp	#LR__0052
01370     00 22 06 F6 | 	mov	local03, #0
01374                 | ' 
01374                 | ' ' 1e : concatenate strings if "" detected between
01374                 | '  
01374                 | ' i=0 : do
01374                 | LR__0058
01374                 | '  if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
01374     11 27 02 F6 | 	mov	local05, local03
01378     03 26 66 F0 | 	shl	local05, #3
0137c     54 00 00 FF 
01380     E0 E4 05 F1 | 	add	objptr, ##43232
01384     F2 26 02 F1 | 	add	local05, objptr
01388     13 13 02 FB | 	rdlong	arg01, local05
0138c     01 14 06 F6 | 	mov	arg02, #1
01390     54 00 00 FF 
01394     E0 E4 85 F1 | 	sub	objptr, ##43232
01398     74 9A B1 FD | 	call	#__system__Right_S
0139c     FD 12 02 F6 | 	mov	arg01, result1
013a0     41 01 00 FF 
013a4     2B 15 06 F6 | 	mov	arg02, ##@LR__4292
013a8     F4 79 B1 FD | 	call	#__system___string_cmp
013ac     00 FA 0D F2 | 	cmp	result1, #0 wz
013b0     78 01 90 5D |  if_ne	jmp	#LR__0064
013b4     11 29 02 F6 | 	mov	local06, local03
013b8     01 28 06 F1 | 	add	local06, #1
013bc     03 28 66 F0 | 	shl	local06, #3
013c0     54 00 00 FF 
013c4     E0 E4 05 F1 | 	add	objptr, ##43232
013c8     F2 32 02 F6 | 	mov	local11, objptr
013cc     F2 28 02 F1 | 	add	local06, objptr
013d0     14 13 02 FB | 	rdlong	arg01, local06
013d4     01 14 06 F6 | 	mov	arg02, #1
013d8     54 00 00 FF 
013dc     E0 E4 85 F1 | 	sub	objptr, ##43232
013e0     A4 99 B1 FD | 	call	#__system__Left_S
013e4     FD 12 02 F6 | 	mov	arg01, result1
013e8     41 01 00 FF 
013ec     2D 15 06 F6 | 	mov	arg02, ##@LR__4293
013f0     AC 79 B1 FD | 	call	#__system___string_cmp
013f4     00 FA 0D F2 | 	cmp	result1, #0 wz
013f8     30 01 90 5D |  if_ne	jmp	#LR__0064
013fc     11 2F 02 F6 | 	mov	local09, local03
01400     03 2E 66 F0 | 	shl	local09, #3
01404     54 00 00 FF 
01408     E0 E4 05 F1 | 	add	objptr, ##43232
0140c     F2 2E 02 F1 | 	add	local09, objptr
01410     11 37 02 F6 | 	mov	local13, local03
01414     03 36 66 F0 | 	shl	local13, #3
01418     F2 36 02 F1 | 	add	local13, objptr
0141c     1B 29 02 FB | 	rdlong	local06, local13
01420     11 35 02 F6 | 	mov	local12, local03
01424     01 34 06 F1 | 	add	local12, #1
01428     03 34 66 F0 | 	shl	local12, #3
0142c     F2 34 02 F1 | 	add	local12, objptr
01430     1A 33 02 FB | 	rdlong	local11, local12
01434     11 43 02 F6 | 	mov	local19, local03
01438     01 42 06 F1 | 	add	local19, #1
0143c     21 45 02 F6 | 	mov	local20, local19
01440     03 44 66 F0 | 	shl	local20, #3
01444     F2 46 02 F6 | 	mov	local21, objptr
01448     F2 44 02 F1 | 	add	local20, objptr
0144c     22 13 02 FB | 	rdlong	arg01, local20
01450     54 00 00 FF 
01454     E0 E4 85 F1 | 	sub	objptr, ##43232
01458     09 2B 02 F6 | 	mov	local07, arg01
0145c     97 06 48 FB | 	callpa	#(@LR__0060-@LR__0059)>>2,fcache_load_ptr_
01460                 | LR__0059
01460     15 FB C9 FA | 	rdbyte	result1, local07 wz
01464     01 2A 06 51 |  if_ne	add	local07, #1
01468     F4 FF 9F 5D |  if_ne	jmp	#LR__0059
0146c                 | LR__0060
0146c     09 2B 82 F1 | 	sub	local07, arg01
01470     15 31 02 F6 | 	mov	local10, local07
01474     01 30 86 F1 | 	sub	local10, #1
01478     19 13 02 F6 | 	mov	arg01, local11
0147c     18 15 02 F6 | 	mov	arg02, local10
01480     8C 99 B1 FD | 	call	#__system__Right_S
01484     FD 32 02 F6 | 	mov	local11, result1
01488     14 13 02 F6 | 	mov	arg01, local06
0148c     19 15 02 F6 | 	mov	arg02, local11
01490     40 79 B1 FD | 	call	#__system___string_concat
01494     17 FB 61 FC | 	wrlong	result1, local09
01498                 | '    for j=i+1 to k: lparts(j)=lparts(j+1): next j  
01498     11 39 02 F6 | 	mov	local14, local03
0149c     01 38 06 F1 | 	add	local14, #1
014a0     1D 49 02 F6 | 	mov	local22, local15
014a4     01 48 06 F1 | 	add	local22, #1
014a8     97 3C 48 FB | 	callpa	#(@LR__0062-@LR__0061)>>2,fcache_load_ptr_
014ac                 | LR__0061
014ac     24 39 52 F2 | 	cmps	local14, local22 wc
014b0     70 00 90 3D |  if_ae	jmp	#LR__0063
014b4     1C 27 02 F6 | 	mov	local05, local14
014b8     01 26 06 F1 | 	add	local05, #1
014bc     03 26 66 F0 | 	shl	local05, #3
014c0     54 00 00 FF 
014c4     E0 E4 05 F1 | 	add	objptr, ##43232
014c8     F2 26 02 F1 | 	add	local05, objptr
014cc     13 1F 02 FB | 	rdlong	local01, local05
014d0     1C 29 02 F6 | 	mov	local06, local14
014d4     01 28 06 F1 | 	add	local06, #1
014d8     03 28 66 F0 | 	shl	local06, #3
014dc     F2 28 02 F1 | 	add	local06, objptr
014e0     04 28 06 F1 | 	add	local06, #4
014e4     14 25 02 FB | 	rdlong	local04, local06
014e8     1C 29 02 F6 | 	mov	local06, local14
014ec     03 28 66 F0 | 	shl	local06, #3
014f0     F2 32 02 F6 | 	mov	local11, objptr
014f4     F2 28 02 F1 | 	add	local06, objptr
014f8     14 1F 62 FC | 	wrlong	local01, local06
014fc     1C 31 02 F6 | 	mov	local10, local14
01500     18 35 02 F6 | 	mov	local12, local10
01504     03 34 66 F0 | 	shl	local12, #3
01508     F2 34 02 F1 | 	add	local12, objptr
0150c     04 34 06 F1 | 	add	local12, #4
01510     1A 25 62 FC | 	wrlong	local04, local12
01514     01 38 06 F1 | 	add	local14, #1
01518     54 00 00 FF 
0151c     E0 E4 85 F1 | 	sub	objptr, ##43232
01520     88 FF 9F FD | 	jmp	#LR__0061
01524                 | LR__0062
01524                 | LR__0063
01524     01 22 86 F1 | 	sub	local03, #1
01528     01 3A 86 F1 | 	sub	local15, #1
0152c                 | LR__0064
0152c     01 22 06 F1 | 	add	local03, #1
01530     1D 23 52 F2 | 	cmps	local03, local15 wc
01534     3C FE 9F CD |  if_b	jmp	#LR__0058
01538     00 22 06 F6 | 	mov	local03, #0
0153c                 | '  
0153c                 | ' ' 1e2: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
0153c                 | '  
0153c                 | ' i=0 : do
0153c                 | LR__0065
0153c     11 2F 02 F6 | 	mov	local09, local03
01540     03 2E 66 F0 | 	shl	local09, #3
01544     54 00 00 FF 
01548     E0 E4 05 F1 | 	add	objptr, ##43232
0154c     F2 2E 02 F1 | 	add	local09, objptr
01550     17 29 02 FB | 	rdlong	local06, local09
01554     26 00 00 FF 
01558     CC E4 05 F1 | 	add	objptr, ##19660
0155c     F2 28 62 FC | 	wrlong	local06, objptr
01560     11 2F 02 F6 | 	mov	local09, local03
01564     01 2E 06 F1 | 	add	local09, #1
01568     03 2E 66 F0 | 	shl	local09, #3
0156c     26 00 00 FF 
01570     CC E4 85 F1 | 	sub	objptr, ##19660
01574     F2 2E 02 F1 | 	add	local09, objptr
01578     17 29 02 FB | 	rdlong	local06, local09
0157c     26 00 00 FF 
01580     D0 E4 05 F1 | 	add	objptr, ##19664
01584     F2 28 62 FC | 	wrlong	local06, objptr
01588                 | '   if ((s1$=">" orelse s1$=">" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
01588     04 E4 85 F1 | 	sub	objptr, #4
0158c     F2 12 02 FB | 	rdlong	arg01, objptr
01590     7A 00 00 FF 
01594     AC E5 85 F1 | 	sub	objptr, ##62892
01598     41 01 00 FF 
0159c     2F 15 06 F6 | 	mov	arg02, ##@LR__4294
015a0     FC 77 B1 FD | 	call	#__system___string_cmp
015a4     00 FA 0D F2 | 	cmp	result1, #0 wz
015a8     04 01 90 AD |  if_e	jmp	#LR__0066
015ac     7A 00 00 FF 
015b0     AC E5 05 F1 | 	add	objptr, ##62892
015b4     F2 12 02 FB | 	rdlong	arg01, objptr
015b8     7A 00 00 FF 
015bc     AC E5 85 F1 | 	sub	objptr, ##62892
015c0     41 01 00 FF 
015c4     31 15 06 F6 | 	mov	arg02, ##@LR__4295
015c8     D4 77 B1 FD | 	call	#__system___string_cmp
015cc     FD 24 0A F6 | 	mov	local04, result1 wz
015d0     DC 00 90 AD |  if_e	jmp	#LR__0066
015d4     7A 00 00 FF 
015d8     AC E5 05 F1 | 	add	objptr, ##62892
015dc     F2 12 02 FB | 	rdlong	arg01, objptr
015e0     7A 00 00 FF 
015e4     AC E5 85 F1 | 	sub	objptr, ##62892
015e8     41 01 00 FF 
015ec     33 15 06 F6 | 	mov	arg02, ##@LR__4296
015f0     AC 77 B1 FD | 	call	#__system___string_cmp
015f4     00 FA 0D F2 | 	cmp	result1, #0 wz
015f8     B4 00 90 AD |  if_e	jmp	#LR__0066
015fc     7A 00 00 FF 
01600     AC E5 05 F1 | 	add	objptr, ##62892
01604     F2 12 02 FB | 	rdlong	arg01, objptr
01608     7A 00 00 FF 
0160c     AC E5 85 F1 | 	sub	objptr, ##62892
01610     41 01 00 FF 
01614     35 33 06 F6 | 	mov	local11, ##@LR__4297
01618     19 15 02 F6 | 	mov	arg02, local11
0161c     80 77 B1 FD | 	call	#__system___string_cmp
01620     00 FA 0D F2 | 	cmp	result1, #0 wz
01624     88 00 90 AD |  if_e	jmp	#LR__0066
01628     7A 00 00 FF 
0162c     AC E5 05 F1 | 	add	objptr, ##62892
01630     F2 12 02 FB | 	rdlong	arg01, objptr
01634     7A 00 00 FF 
01638     AC E5 85 F1 | 	sub	objptr, ##62892
0163c     41 01 00 FF 
01640     37 31 06 F6 | 	mov	local10, ##@LR__4298
01644     18 33 02 F6 | 	mov	local11, local10
01648     19 15 02 F6 | 	mov	arg02, local11
0164c     50 77 B1 FD | 	call	#__system___string_cmp
01650     00 FA 0D F2 | 	cmp	result1, #0 wz
01654     58 00 90 AD |  if_e	jmp	#LR__0066
01658     7A 00 00 FF 
0165c     AC E5 05 F1 | 	add	objptr, ##62892
01660     F2 12 02 FB | 	rdlong	arg01, objptr
01664     7A 00 00 FF 
01668     AC E5 85 F1 | 	sub	objptr, ##62892
0166c     41 01 00 FF 
01670     39 31 06 F6 | 	mov	local10, ##@LR__4299
01674     18 15 02 F6 | 	mov	arg02, local10
01678     24 77 B1 FD | 	call	#__system___string_cmp
0167c     FD 32 0A F6 | 	mov	local11, result1 wz
01680     2C 00 90 AD |  if_e	jmp	#LR__0066
01684     7A 00 00 FF 
01688     AC E5 05 F1 | 	add	objptr, ##62892
0168c     F2 12 02 FB | 	rdlong	arg01, objptr
01690     7A 00 00 FF 
01694     AC E5 85 F1 | 	sub	objptr, ##62892
01698     41 01 00 FF 
0169c     3B 37 06 F6 | 	mov	local13, ##@LR__4300
016a0     1B 15 02 F6 | 	mov	arg02, local13
016a4     F8 76 B1 FD | 	call	#__system___string_cmp
016a8     FD 30 0A F6 | 	mov	local10, result1 wz
016ac     30 00 90 5D |  if_ne	jmp	#LR__0067
016b0                 | LR__0066
016b0     7A 00 00 FF 
016b4     B0 E5 05 F1 | 	add	objptr, ##62896
016b8     F2 12 02 FB | 	rdlong	arg01, objptr
016bc     7A 00 00 FF 
016c0     B0 E5 85 F1 | 	sub	objptr, ##62896
016c4     41 01 00 FF 
016c8     3D 4B 06 F6 | 	mov	local23, ##@LR__4301
016cc     25 35 02 F6 | 	mov	local12, local23
016d0     1A 15 02 F6 | 	mov	arg02, local12
016d4     C8 76 B1 FD | 	call	#__system___string_cmp
016d8     FD 36 0A F6 | 	mov	local13, result1 wz
016dc     18 01 90 AD |  if_e	jmp	#LR__0070
016e0                 | LR__0067
016e0     7A 00 00 FF 
016e4     AC E5 05 F1 | 	add	objptr, ##62892
016e8     F2 12 02 FB | 	rdlong	arg01, objptr
016ec     7A 00 00 FF 
016f0     AC E5 85 F1 | 	sub	objptr, ##62892
016f4     41 01 00 FF 
016f8     3F 4B 06 F6 | 	mov	local23, ##@LR__4302
016fc     25 15 02 F6 | 	mov	arg02, local23
01700     9C 76 B1 FD | 	call	#__system___string_cmp
01704     FD 34 0A F6 | 	mov	local12, result1 wz
01708     30 00 90 5D |  if_ne	jmp	#LR__0068
0170c     7A 00 00 FF 
01710     B0 E5 05 F1 | 	add	objptr, ##62896
01714     F2 12 02 FB | 	rdlong	arg01, objptr
01718     7A 00 00 FF 
0171c     B0 E5 85 F1 | 	sub	objptr, ##62896
01720     41 01 00 FF 
01724     41 45 06 F6 | 	mov	local20, ##@LR__4303
01728     22 43 02 F6 | 	mov	local19, local20
0172c     21 15 02 F6 | 	mov	arg02, local19
01730     6C 76 B1 FD | 	call	#__system___string_cmp
01734     FD 4A 0A F6 | 	mov	local23, result1 wz
01738     BC 00 90 AD |  if_e	jmp	#LR__0070
0173c                 | LR__0068
0173c     7A 00 00 FF 
01740     AC E5 05 F1 | 	add	objptr, ##62892
01744     F2 12 02 FB | 	rdlong	arg01, objptr
01748     7A 00 00 FF 
0174c     AC E5 85 F1 | 	sub	objptr, ##62892
01750     41 01 00 FF 
01754     43 45 06 F6 | 	mov	local20, ##@LR__4304
01758     22 15 02 F6 | 	mov	arg02, local20
0175c     40 76 B1 FD | 	call	#__system___string_cmp
01760     FD 42 0A F6 | 	mov	local19, result1 wz
01764     30 00 90 5D |  if_ne	jmp	#LR__0069
01768     7A 00 00 FF 
0176c     B0 E5 05 F1 | 	add	objptr, ##62896
01770     F2 12 02 FB | 	rdlong	arg01, objptr
01774     7A 00 00 FF 
01778     B0 E5 85 F1 | 	sub	objptr, ##62896
0177c     41 01 00 FF 
01780     45 4D 06 F6 | 	mov	local24, ##@LR__4305
01784     26 47 02 F6 | 	mov	local21, local24
01788     23 15 02 F6 | 	mov	arg02, local21
0178c     10 76 B1 FD | 	call	#__system___string_cmp
01790     FD 44 0A F6 | 	mov	local20, result1 wz
01794     60 00 90 AD |  if_e	jmp	#LR__0070
01798                 | LR__0069
01798     7A 00 00 FF 
0179c     AC E5 05 F1 | 	add	objptr, ##62892
017a0     F2 12 02 FB | 	rdlong	arg01, objptr
017a4     7A 00 00 FF 
017a8     AC E5 85 F1 | 	sub	objptr, ##62892
017ac     41 01 00 FF 
017b0     47 4F 06 F6 | 	mov	local25, ##@LR__4306
017b4     27 4D 02 F6 | 	mov	local24, local25
017b8     26 15 02 F6 | 	mov	arg02, local24
017bc     E0 75 B1 FD | 	call	#__system___string_cmp
017c0     FD 46 0A F6 | 	mov	local21, result1 wz
017c4     10 01 90 5D |  if_ne	jmp	#LR__0074
017c8     7A 00 00 FF 
017cc     B0 E5 05 F1 | 	add	objptr, ##62896
017d0     F2 12 02 FB | 	rdlong	arg01, objptr
017d4     7A 00 00 FF 
017d8     B0 E5 85 F1 | 	sub	objptr, ##62896
017dc     41 01 00 FF 
017e0     49 51 06 F6 | 	mov	local26, ##@LR__4307
017e4     28 4F 02 F6 | 	mov	local25, local26
017e8     27 15 02 F6 | 	mov	arg02, local25
017ec     B0 75 B1 FD | 	call	#__system___string_cmp
017f0     FD 4C 0A F6 | 	mov	local24, result1 wz
017f4     E0 00 90 5D |  if_ne	jmp	#LR__0074
017f8                 | LR__0070
017f8     11 2F 02 F6 | 	mov	local09, local03
017fc     03 2E 66 F0 | 	shl	local09, #3
01800     54 00 00 FF 
01804     E0 E4 05 F1 | 	add	objptr, ##43232
01808     F2 2E 02 F1 | 	add	local09, objptr
0180c     26 00 00 FF 
01810     CC E4 05 F1 | 	add	objptr, ##19660
01814     F2 12 02 FB | 	rdlong	arg01, objptr
01818     04 E4 05 F1 | 	add	objptr, #4
0181c     F2 30 02 FB | 	rdlong	local10, objptr
01820     7A 00 00 FF 
01824     B0 E5 85 F1 | 	sub	objptr, ##62896
01828     18 33 02 F6 | 	mov	local11, local10
0182c     19 15 02 F6 | 	mov	arg02, local11
01830     A0 75 B1 FD | 	call	#__system___string_concat
01834     17 FB 61 FC | 	wrlong	result1, local09
01838                 | '     lparts(i).part$=s1$+s2$
01838                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
01838     11 39 02 F6 | 	mov	local14, local03
0183c     01 38 06 F1 | 	add	local14, #1
01840     1D 53 02 F6 | 	mov	local27, local15
01844     01 52 06 F1 | 	add	local27, #1
01848     97 42 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
0184c                 | LR__0071
0184c     29 39 52 F2 | 	cmps	local14, local27 wc
01850     7C 00 90 3D |  if_ae	jmp	#LR__0073
01854     1C 27 02 F6 | 	mov	local05, local14
01858     01 26 06 F1 | 	add	local05, #1
0185c     03 26 66 F0 | 	shl	local05, #3
01860     54 00 00 FF 
01864     E0 E4 05 F1 | 	add	objptr, ##43232
01868     F2 26 02 F1 | 	add	local05, objptr
0186c     13 1F 02 FB | 	rdlong	local01, local05
01870     1C 29 02 F6 | 	mov	local06, local14
01874     01 28 06 F1 | 	add	local06, #1
01878     03 28 66 F0 | 	shl	local06, #3
0187c     F2 28 02 F1 | 	add	local06, objptr
01880     04 28 06 F1 | 	add	local06, #4
01884     14 25 02 FB | 	rdlong	local04, local06
01888     1C 29 02 F6 | 	mov	local06, local14
0188c     03 28 66 F0 | 	shl	local06, #3
01890     F2 32 02 F6 | 	mov	local11, objptr
01894     F2 28 02 F1 | 	add	local06, objptr
01898     14 1F 62 FC | 	wrlong	local01, local06
0189c     1C 31 02 F6 | 	mov	local10, local14
018a0     18 37 02 F6 | 	mov	local13, local10
018a4     1B 35 02 F6 | 	mov	local12, local13
018a8     03 34 66 F0 | 	shl	local12, #3
018ac     F2 4A 02 F6 | 	mov	local23, objptr
018b0     F2 34 02 F1 | 	add	local12, objptr
018b4     04 34 06 F1 | 	add	local12, #4
018b8     1A 25 62 FC | 	wrlong	local04, local12
018bc     04 34 86 F1 | 	sub	local12, #4
018c0     01 38 06 F1 | 	add	local14, #1
018c4     54 00 00 FF 
018c8     E0 E4 85 F1 | 	sub	objptr, ##43232
018cc     7C FF 9F FD | 	jmp	#LR__0071
018d0                 | LR__0072
018d0                 | LR__0073
018d0     01 22 86 F1 | 	sub	local03, #1
018d4     01 3A 86 F1 | 	sub	local15, #1
018d8                 | LR__0074
018d8     01 22 06 F1 | 	add	local03, #1
018dc     1D 23 52 F2 | 	cmps	local03, local15 wc
018e0     58 FC 9F CD |  if_b	jmp	#LR__0065
018e4                 | '  
018e4                 | ' ' 1f : now remove parts that are spaces
018e4                 | ' 
018e4                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
018e4     00 22 06 F6 | 	mov	local03, #0
018e8     1D 55 02 F6 | 	mov	local28, local15
018ec     01 54 06 F1 | 	add	local28, #1
018f0                 | LR__0075
018f0     2A 23 52 F2 | 	cmps	local03, local28 wc
018f4     50 00 90 3D |  if_ae	jmp	#LR__0076
018f8     11 2F 02 F6 | 	mov	local09, local03
018fc     03 2E 66 F0 | 	shl	local09, #3
01900     54 00 00 FF 
01904     E0 E4 05 F1 | 	add	objptr, ##43232
01908     F2 2E 02 F1 | 	add	local09, objptr
0190c     11 33 02 F6 | 	mov	local11, local03
01910     19 31 02 F6 | 	mov	local10, local11
01914     18 37 02 F6 | 	mov	local13, local10
01918     03 36 66 F0 | 	shl	local13, #3
0191c     F2 34 02 F6 | 	mov	local12, objptr
01920     F2 36 02 F1 | 	add	local13, objptr
01924     1B 13 02 FB | 	rdlong	arg01, local13
01928     54 00 00 FF 
0192c     E0 E4 85 F1 | 	sub	objptr, ##43232
01930     88 98 B1 FD | 	call	#__system__RTrim_S
01934     FD 12 02 F6 | 	mov	arg01, result1
01938     C0 97 B1 FD | 	call	#__system__LTrim_S
0193c     17 FB 61 FC | 	wrlong	result1, local09
01940     01 22 06 F1 | 	add	local03, #1
01944     A8 FF 9F FD | 	jmp	#LR__0075
01948                 | LR__0076
01948     00 22 06 F6 | 	mov	local03, #0
0194c     97 8A 48 FB | 	callpa	#(@LR__0083-@LR__0077)>>2,fcache_load_ptr_
01950                 | ' 
01950                 | ' i=0
01950                 | ' do 
01950                 | LR__0077
01950                 | '   if len(lparts(i).part$)=0 then 
01950     11 2F 02 F6 | 	mov	local09, local03
01954     17 27 02 F6 | 	mov	local05, local09
01958     03 26 66 F0 | 	shl	local05, #3
0195c     54 00 00 FF 
01960     E0 E4 05 F1 | 	add	objptr, ##43232
01964     F2 26 02 F1 | 	add	local05, objptr
01968     13 13 02 FB | 	rdlong	arg01, local05
0196c     54 00 00 FF 
01970     E0 E4 85 F1 | 	sub	objptr, ##43232
01974     09 2B 02 F6 | 	mov	local07, arg01
01978                 | LR__0078
01978     15 FB C9 FA | 	rdbyte	result1, local07 wz
0197c     01 2A 06 51 |  if_ne	add	local07, #1
01980     F4 FF 9F 5D |  if_ne	jmp	#LR__0078
01984     09 2B 8A F1 | 	sub	local07, arg01 wz
01988     C4 00 90 5D |  if_ne	jmp	#LR__0082
0198c                 | '     if i=k-1 then k-=1  :  exit
0198c     1D 1F 02 F6 | 	mov	local01, local15
01990     01 1E 86 F1 | 	sub	local01, #1
01994     0F 23 0A F2 | 	cmp	local03, local01 wz
01998     01 3A 86 A1 |  if_e	sub	local15, #1
0199c     C4 00 90 AD |  if_e	jmp	#LR__0084
019a0                 | '     if i<k-1 then 
019a0     1D 1F 02 F6 | 	mov	local01, local15
019a4     01 1E 86 F1 | 	sub	local01, #1
019a8     0F 23 52 F2 | 	cmps	local03, local01 wc
019ac     A0 00 90 3D |  if_ae	jmp	#LR__0081
019b0                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
019b0     11 39 02 F6 | 	mov	local14, local03
019b4     1D 57 02 F6 | 	mov	local29, local15
019b8     01 56 86 F1 | 	sub	local29, #1
019bc                 | LR__0079
019bc     2B 39 52 F2 | 	cmps	local14, local29 wc
019c0     80 00 90 3D |  if_ae	jmp	#LR__0080
019c4     1C 27 02 F6 | 	mov	local05, local14
019c8     01 26 06 F1 | 	add	local05, #1
019cc     03 26 66 F0 | 	shl	local05, #3
019d0     54 00 00 FF 
019d4     E0 E4 05 F1 | 	add	objptr, ##43232
019d8     F2 26 02 F1 | 	add	local05, objptr
019dc     13 1F 02 FB | 	rdlong	local01, local05
019e0     1C 29 02 F6 | 	mov	local06, local14
019e4     01 28 06 F1 | 	add	local06, #1
019e8     03 28 66 F0 | 	shl	local06, #3
019ec     F2 28 02 F1 | 	add	local06, objptr
019f0     04 28 06 F1 | 	add	local06, #4
019f4     14 25 02 FB | 	rdlong	local04, local06
019f8     1C 2F 02 F6 | 	mov	local09, local14
019fc     17 29 02 F6 | 	mov	local06, local09
01a00     03 28 66 F0 | 	shl	local06, #3
01a04     F2 32 02 F6 | 	mov	local11, objptr
01a08     F2 28 02 F1 | 	add	local06, objptr
01a0c     14 1F 62 FC | 	wrlong	local01, local06
01a10     1C 31 02 F6 | 	mov	local10, local14
01a14     18 37 02 F6 | 	mov	local13, local10
01a18     1B 35 02 F6 | 	mov	local12, local13
01a1c     03 34 66 F0 | 	shl	local12, #3
01a20     F2 4A 02 F6 | 	mov	local23, objptr
01a24     F2 34 02 F1 | 	add	local12, objptr
01a28     04 34 06 F1 | 	add	local12, #4
01a2c     1A 25 62 FC | 	wrlong	local04, local12
01a30     04 34 86 F1 | 	sub	local12, #4
01a34     01 38 06 F1 | 	add	local14, #1
01a38     54 00 00 FF 
01a3c     E0 E4 85 F1 | 	sub	objptr, ##43232
01a40     78 FF 9F FD | 	jmp	#LR__0079
01a44                 | LR__0080
01a44     01 3A 86 F1 | 	sub	local15, #1
01a48                 | '       if i>0 then i-=1 
01a48     01 22 56 F2 | 	cmps	local03, #1 wc
01a4c     01 22 86 31 |  if_ae	sub	local03, #1
01a50                 | LR__0081
01a50                 | LR__0082
01a50     01 22 06 F1 | 	add	local03, #1
01a54     1D 1F 02 F6 | 	mov	local01, local15
01a58     01 1E 86 F1 | 	sub	local01, #1
01a5c     0F 23 5A F2 | 	cmps	local03, local01 wcz
01a60     EC FE 9F ED |  if_be	jmp	#LR__0077
01a64                 | LR__0083
01a64                 | LR__0084
01a64                 | ' 
01a64                 | ' ' 1g: lowercase all that is not a string
01a64                 | ' 
01a64                 | ' for j=0 to k-1
01a64     00 38 06 F6 | 	mov	local14, #0
01a68     1D 59 02 F6 | 	mov	local30, local15
01a6c                 | LR__0085
01a6c     2C 39 52 F2 | 	cmps	local14, local30 wc
01a70     C0 00 90 3D |  if_ae	jmp	#LR__0088
01a74                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
01a74     1C 27 02 F6 | 	mov	local05, local14
01a78     03 26 66 F0 | 	shl	local05, #3
01a7c     54 00 00 FF 
01a80     E0 E4 05 F1 | 	add	objptr, ##43232
01a84     F2 26 02 F1 | 	add	local05, objptr
01a88     13 13 02 FB | 	rdlong	arg01, local05
01a8c     01 14 06 F6 | 	mov	arg02, #1
01a90     54 00 00 FF 
01a94     E0 E4 85 F1 | 	sub	objptr, ##43232
01a98     EC 92 B1 FD | 	call	#__system__Left_S
01a9c     FD 12 02 F6 | 	mov	arg01, result1
01aa0     41 01 00 FF 
01aa4     4B 15 06 F6 | 	mov	arg02, ##@LR__4308
01aa8     F4 72 B1 FD | 	call	#__system___string_cmp
01aac     00 FA 0D F2 | 	cmp	result1, #0 wz
01ab0     40 00 90 5D |  if_ne	jmp	#LR__0086
01ab4     1C 29 02 F6 | 	mov	local06, local14
01ab8     03 28 66 F0 | 	shl	local06, #3
01abc     54 00 00 FF 
01ac0     E0 E4 05 F1 | 	add	objptr, ##43232
01ac4     F2 28 02 F1 | 	add	local06, objptr
01ac8     14 13 02 FB | 	rdlong	arg01, local06
01acc     01 14 06 F6 | 	mov	arg02, #1
01ad0     54 00 00 FF 
01ad4     E0 E4 85 F1 | 	sub	objptr, ##43232
01ad8     34 93 B1 FD | 	call	#__system__Right_S
01adc     FD 12 02 F6 | 	mov	arg01, result1
01ae0     41 01 00 FF 
01ae4     4D 15 06 F6 | 	mov	arg02, ##@LR__4309
01ae8     B4 72 B1 FD | 	call	#__system___string_cmp
01aec     00 FA 0D F2 | 	cmp	result1, #0 wz
01af0     38 00 90 AD |  if_e	jmp	#LR__0087
01af4                 | LR__0086
01af4     1C 2F 02 F6 | 	mov	local09, local14
01af8     03 2E 66 F0 | 	shl	local09, #3
01afc     54 00 00 FF 
01b00     E0 E4 05 F1 | 	add	objptr, ##43232
01b04     F2 2E 02 F1 | 	add	local09, objptr
01b08     1C 37 02 F6 | 	mov	local13, local14
01b0c     03 36 66 F0 | 	shl	local13, #3
01b10     F2 34 02 F6 | 	mov	local12, objptr
01b14     F2 36 02 F1 | 	add	local13, objptr
01b18     1B 13 02 FB | 	rdlong	arg01, local13
01b1c     54 00 00 FF 
01b20     E0 E4 85 F1 | 	sub	objptr, ##43232
01b24     14 95 B1 FD | 	call	#__system__LCase_S
01b28     17 FB 61 FC | 	wrlong	result1, local09
01b2c                 | LR__0087
01b2c     01 38 06 F1 | 	add	local14, #1
01b30     38 FF 9F FD | 	jmp	#LR__0085
01b34                 | LR__0088
01b34                 | ' 
01b34                 | ' '                                                         for i=0 to k-1 : print lparts(i).part$,: next i : print
01b34                 | ' 
01b34                 | ' for i=0 to k: lparts(i).token=-1: next i
01b34     00 22 06 F6 | 	mov	local03, #0
01b38     1D 5B 02 F6 | 	mov	local31, local15
01b3c     01 5A 06 F1 | 	add	local31, #1
01b40     97 1C 48 FB | 	callpa	#(@LR__0090-@LR__0089)>>2,fcache_load_ptr_
01b44                 | LR__0089
01b44     2D 23 52 F2 | 	cmps	local03, local31 wc
01b48     30 00 90 3D |  if_ae	jmp	#LR__0091
01b4c     11 2F 02 F6 | 	mov	local09, local03
01b50     03 2E 66 F0 | 	shl	local09, #3
01b54     54 00 00 FF 
01b58     E0 E4 05 F1 | 	add	objptr, ##43232
01b5c     F2 2E 02 F1 | 	add	local09, objptr
01b60     04 2E 06 F1 | 	add	local09, #4
01b64     FF FF FF FF 
01b68     17 FF 6B FC | 	wrlong	##-1, local09
01b6c     01 22 06 F1 | 	add	local03, #1
01b70     54 00 00 FF 
01b74     E0 E4 85 F1 | 	sub	objptr, ##43232
01b78     C8 FF 9F FD | 	jmp	#LR__0089
01b7c                 | LR__0090
01b7c                 | LR__0091
01b7c                 | ' 
01b7c                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
01b7c                 | ' 
01b7c                 | ' if len(lparts(0).part$)=0 then goto 101				' empty line, nothing to do
01b7c     54 00 00 FF 
01b80     E0 E4 05 F1 | 	add	objptr, ##43232
01b84     F2 12 02 FB | 	rdlong	arg01, objptr
01b88     54 00 00 FF 
01b8c     E0 E4 85 F1 | 	sub	objptr, ##43232
01b90     09 2B 02 F6 | 	mov	local07, arg01
01b94     97 06 48 FB | 	callpa	#(@LR__0093-@LR__0092)>>2,fcache_load_ptr_
01b98                 | LR__0092
01b98     15 FB C9 FA | 	rdbyte	result1, local07 wz
01b9c     01 2A 06 51 |  if_ne	add	local07, #1
01ba0     F4 FF 9F 5D |  if_ne	jmp	#LR__0092
01ba4                 | LR__0093
01ba4     09 2B 8A F1 | 	sub	local07, arg01 wz
01ba8     98 16 90 AD |  if_e	jmp	#LR__0148
01bac                 | ' 
01bac                 | ' 
01bac                 | ' if isdec(lparts(0).part$) then let addptr=1 else let addptr=0
01bac     54 00 00 FF 
01bb0     E0 E4 05 F1 | 	add	objptr, ##43232
01bb4     F2 12 02 FB | 	rdlong	arg01, objptr
01bb8     54 00 00 FF 
01bbc     E0 E4 85 F1 | 	sub	objptr, ##43232
01bc0     B0 2E B0 FD | 	call	#_isdec
01bc4     00 FA 0D F2 | 	cmp	result1, #0 wz
01bc8     7A 00 00 5F 
01bcc     B4 E5 05 51 |  if_ne	add	objptr, ##62900
01bd0     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01bd4     7A 00 00 FF 
01bd8     B4 E5 E5 F3 | 	sumnz	objptr, ##62900
01bdc     F2 00 68 AC |  if_e	wrlong	#0, objptr
01be0     7A 00 00 AF 
01be4     B4 E5 85 A1 |  if_e	sub	objptr, ##62900
01be8     7A 00 00 FF 
01bec     B4 E5 05 F1 | 	add	objptr, ##62900
01bf0     F2 26 02 FB | 	rdlong	local05, objptr
01bf4     03 26 66 F0 | 	shl	local05, #3
01bf8     26 00 00 FF 
01bfc     D4 E4 85 F1 | 	sub	objptr, ##19668
01c00     F2 26 02 F1 | 	add	local05, objptr
01c04     13 33 02 FB | 	rdlong	local11, local05
01c08     26 00 00 FF 
01c0c     D8 E4 05 F1 | 	add	objptr, ##19672
01c10     F2 32 62 FC | 	wrlong	local11, objptr
01c14     04 E4 85 F1 | 	sub	objptr, #4
01c18     F2 32 02 FB | 	rdlong	local11, objptr
01c1c     03 32 66 F0 | 	shl	local11, #3
01c20     26 00 00 FF 
01c24     D4 E4 85 F1 | 	sub	objptr, ##19668
01c28     F2 30 02 F6 | 	mov	local10, objptr
01c2c     F2 32 02 F1 | 	add	local11, objptr
01c30     19 15 02 FB | 	rdlong	arg02, local11
01c34     41 01 00 FF 
01c38     4F 17 06 F6 | 	mov	arg03, ##@LR__4310
01c3c     01 12 06 F6 | 	mov	arg01, #1
01c40     54 00 00 FF 
01c44     E0 E4 85 F1 | 	sub	objptr, ##43232
01c48     28 96 B1 FD | 	call	#__system__Instr
01c4c     7A 00 00 FF 
01c50     BC E5 05 F1 | 	add	objptr, ##62908
01c54     F2 FA 61 FC | 	wrlong	result1, objptr
01c58                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 
01c58     FD 1E 02 F6 | 	mov	local01, result1
01c5c     7A 00 00 FF 
01c60     BC E5 85 F1 | 	sub	objptr, ##62908
01c64     01 1E 56 F2 | 	cmps	local01, #1 wc
01c68     DC 01 90 CD |  if_b	jmp	#LR__0100
01c6c     7A 00 00 FF 
01c70     B4 E5 05 F1 | 	add	objptr, ##62900
01c74     F2 30 02 FB | 	rdlong	local10, objptr
01c78     03 30 66 F0 | 	shl	local10, #3
01c7c     26 00 00 FF 
01c80     D4 E4 85 F1 | 	sub	objptr, ##19668
01c84     F2 36 02 F6 | 	mov	local13, objptr
01c88     F2 30 02 F1 | 	add	local10, objptr
01c8c     18 13 02 FB | 	rdlong	arg01, local10
01c90     54 00 00 FF 
01c94     E0 E4 85 F1 | 	sub	objptr, ##43232
01c98     09 2B 02 F6 | 	mov	local07, arg01
01c9c     97 06 48 FB | 	callpa	#(@LR__0095-@LR__0094)>>2,fcache_load_ptr_
01ca0                 | LR__0094
01ca0     15 FB C9 FA | 	rdbyte	result1, local07 wz
01ca4     01 2A 06 51 |  if_ne	add	local07, #1
01ca8     F4 FF 9F 5D |  if_ne	jmp	#LR__0094
01cac                 | LR__0095
01cac     09 2B 82 F1 | 	sub	local07, arg01
01cb0     15 2F 02 F6 | 	mov	local09, local07
01cb4     7A 00 00 FF 
01cb8     BC E5 05 F1 | 	add	objptr, ##62908
01cbc     F2 26 02 FB | 	rdlong	local05, objptr
01cc0     7A 00 00 FF 
01cc4     BC E5 85 F1 | 	sub	objptr, ##62908
01cc8     17 27 52 F2 | 	cmps	local05, local09 wc
01ccc     78 01 90 3D |  if_ae	jmp	#LR__0100
01cd0     01 3A 06 F1 | 	add	local15, #1
01cd4                 | '   k+=1
01cd4                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
01cd4     1D 23 02 F6 | 	mov	local03, local15
01cd8     7A 00 00 FF 
01cdc     B4 E5 05 F1 | 	add	objptr, ##62900
01ce0     F2 5C 02 FB | 	rdlong	local32, objptr
01ce4     01 5C 06 F1 | 	add	local32, #1
01ce8     26 00 00 FF 
01cec     D4 E4 85 F1 | 	sub	objptr, ##19668
01cf0     97 2E 48 FB | 	callpa	#(@LR__0097-@LR__0096)>>2,fcache_load_ptr_
01cf4                 | LR__0096
01cf4     11 29 02 F6 | 	mov	local06, local03
01cf8     01 28 86 F1 | 	sub	local06, #1
01cfc     03 28 66 F0 | 	shl	local06, #3
01d00     F2 28 02 F1 | 	add	local06, objptr
01d04     14 25 02 FB | 	rdlong	local04, local06
01d08     11 33 02 F6 | 	mov	local11, local03
01d0c     01 32 86 F1 | 	sub	local11, #1
01d10     03 32 66 F0 | 	shl	local11, #3
01d14     F2 32 02 F1 | 	add	local11, objptr
01d18     04 32 06 F1 | 	add	local11, #4
01d1c     19 2F 02 FB | 	rdlong	local09, local11
01d20     11 33 02 F6 | 	mov	local11, local03
01d24     03 32 66 F0 | 	shl	local11, #3
01d28     F2 32 02 F1 | 	add	local11, objptr
01d2c     19 25 62 FC | 	wrlong	local04, local11
01d30     11 4B 02 F6 | 	mov	local23, local03
01d34     03 4A 66 F0 | 	shl	local23, #3
01d38     F2 4A 02 F1 | 	add	local23, objptr
01d3c     04 4A 06 F1 | 	add	local23, #4
01d40     25 2F 62 FC | 	wrlong	local09, local23
01d44     01 22 86 F1 | 	sub	local03, #1
01d48     2E 23 52 F2 | 	cmps	local03, local32 wc
01d4c     A4 FF 9F 3D |  if_ae	jmp	#LR__0096
01d50                 | LR__0097
01d50     26 00 00 FF 
01d54     D4 E4 05 F1 | 	add	objptr, ##19668
01d58     F2 4A 02 FB | 	rdlong	local23, objptr
01d5c     25 27 02 F6 | 	mov	local05, local23
01d60     01 26 06 F1 | 	add	local05, #1
01d64     03 26 66 F0 | 	shl	local05, #3
01d68     26 00 00 FF 
01d6c     D4 E4 85 F1 | 	sub	objptr, ##19668
01d70     F2 26 02 F1 | 	add	local05, objptr
01d74     03 4A 66 F0 | 	shl	local23, #3
01d78     F2 4A 02 F1 | 	add	local23, objptr
01d7c     25 33 02 FB | 	rdlong	local11, local23
01d80     26 00 00 FF 
01d84     D4 E4 05 F1 | 	add	objptr, ##19668
01d88     F2 44 02 FB | 	rdlong	local20, objptr
01d8c     22 47 02 F6 | 	mov	local21, local20
01d90     03 46 66 F0 | 	shl	local21, #3
01d94     26 00 00 FF 
01d98     D4 E4 85 F1 | 	sub	objptr, ##19668
01d9c     F2 4C 02 F6 | 	mov	local24, objptr
01da0     F2 46 02 F1 | 	add	local21, objptr
01da4     23 13 02 FB | 	rdlong	arg01, local21
01da8     54 00 00 FF 
01dac     E0 E4 85 F1 | 	sub	objptr, ##43232
01db0     09 2B 02 F6 | 	mov	local07, arg01
01db4     97 06 48 FB | 	callpa	#(@LR__0099-@LR__0098)>>2,fcache_load_ptr_
01db8                 | LR__0098
01db8     15 FB C9 FA | 	rdbyte	result1, local07 wz
01dbc     01 2A 06 51 |  if_ne	add	local07, #1
01dc0     F4 FF 9F 5D |  if_ne	jmp	#LR__0098
01dc4                 | LR__0099
01dc4     09 2B 82 F1 | 	sub	local07, arg01
01dc8     15 15 02 F6 | 	mov	arg02, local07
01dcc     7A 00 00 FF 
01dd0     BC E5 05 F1 | 	add	objptr, ##62908
01dd4     F2 4A 02 FB | 	rdlong	local23, objptr
01dd8     7A 00 00 FF 
01ddc     BC E5 85 F1 | 	sub	objptr, ##62908
01de0     25 15 82 F1 | 	sub	arg02, local23
01de4     19 13 02 F6 | 	mov	arg01, local11
01de8     24 90 B1 FD | 	call	#__system__Right_S
01dec     13 FB 61 FC | 	wrlong	result1, local05
01df0     7A 00 00 FF 
01df4     B4 E5 05 F1 | 	add	objptr, ##62900
01df8     F2 34 02 FB | 	rdlong	local12, objptr
01dfc     1A 27 02 F6 | 	mov	local05, local12
01e00     03 26 66 F0 | 	shl	local05, #3
01e04     26 00 00 FF 
01e08     D4 E4 85 F1 | 	sub	objptr, ##19668
01e0c     F2 26 02 F1 | 	add	local05, objptr
01e10     1A 4B 02 F6 | 	mov	local23, local12
01e14     03 4A 66 F0 | 	shl	local23, #3
01e18     F2 42 02 F6 | 	mov	local19, objptr
01e1c     F2 4A 02 F1 | 	add	local23, objptr
01e20     25 13 02 FB | 	rdlong	arg01, local23
01e24     26 00 00 FF 
01e28     DC E4 05 F1 | 	add	objptr, ##19676
01e2c     F2 36 02 FB | 	rdlong	local13, objptr
01e30     7A 00 00 FF 
01e34     BC E5 85 F1 | 	sub	objptr, ##62908
01e38     1B 31 02 F6 | 	mov	local10, local13
01e3c     18 15 02 F6 | 	mov	arg02, local10
01e40     44 8F B1 FD | 	call	#__system__Left_S
01e44     13 FB 61 FC | 	wrlong	result1, local05
01e48                 | LR__0100
01e48                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then
01e48     7A 00 00 FF 
01e4c     B4 E5 05 F1 | 	add	objptr, ##62900
01e50     F2 28 02 FB | 	rdlong	local06, objptr
01e54     03 28 66 F0 | 	shl	local06, #3
01e58     26 00 00 FF 
01e5c     D4 E4 85 F1 | 	sub	objptr, ##19668
01e60     F2 28 02 F1 | 	add	local06, objptr
01e64     14 13 02 FB | 	rdlong	arg01, local06
01e68     01 14 06 F6 | 	mov	arg02, #1
01e6c     54 00 00 FF 
01e70     E0 E4 85 F1 | 	sub	objptr, ##43232
01e74     10 8F B1 FD | 	call	#__system__Left_S
01e78     FD 12 02 F6 | 	mov	arg01, result1
01e7c     41 01 00 FF 
01e80     51 15 06 F6 | 	mov	arg02, ##@LR__4311
01e84     18 6F B1 FD | 	call	#__system___string_cmp
01e88     00 FA 0D F2 | 	cmp	result1, #0 wz
01e8c     9C 01 90 5D |  if_ne	jmp	#LR__0107
01e90     7A 00 00 FF 
01e94     B4 E5 05 F1 | 	add	objptr, ##62900
01e98     F2 32 02 FB | 	rdlong	local11, objptr
01e9c     03 32 66 F0 | 	shl	local11, #3
01ea0     26 00 00 FF 
01ea4     D4 E4 85 F1 | 	sub	objptr, ##19668
01ea8     F2 30 02 F6 | 	mov	local10, objptr
01eac     F2 32 02 F1 | 	add	local11, objptr
01eb0     19 13 02 FB | 	rdlong	arg01, local11
01eb4     54 00 00 FF 
01eb8     E0 E4 85 F1 | 	sub	objptr, ##43232
01ebc     09 2B 02 F6 | 	mov	local07, arg01
01ec0     97 06 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01ec4                 | LR__0101
01ec4     15 FB C9 FA | 	rdbyte	result1, local07 wz
01ec8     01 2A 06 51 |  if_ne	add	local07, #1
01ecc     F4 FF 9F 5D |  if_ne	jmp	#LR__0101
01ed0                 | LR__0102
01ed0     09 2B 82 F1 | 	sub	local07, arg01
01ed4     02 2A 56 F2 | 	cmps	local07, #2 wc
01ed8     50 01 90 CD |  if_b	jmp	#LR__0107
01edc     01 3A 06 F1 | 	add	local15, #1
01ee0                 | '   k+=1
01ee0                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
01ee0     1D 23 02 F6 | 	mov	local03, local15
01ee4     7A 00 00 FF 
01ee8     B4 E5 05 F1 | 	add	objptr, ##62900
01eec     F2 5E 02 FB | 	rdlong	local33, objptr
01ef0     01 5E 06 F1 | 	add	local33, #1
01ef4     26 00 00 FF 
01ef8     D4 E4 85 F1 | 	sub	objptr, ##19668
01efc     97 2E 48 FB | 	callpa	#(@LR__0104-@LR__0103)>>2,fcache_load_ptr_
01f00                 | LR__0103
01f00     11 29 02 F6 | 	mov	local06, local03
01f04     01 28 86 F1 | 	sub	local06, #1
01f08     03 28 66 F0 | 	shl	local06, #3
01f0c     F2 28 02 F1 | 	add	local06, objptr
01f10     14 25 02 FB | 	rdlong	local04, local06
01f14     11 33 02 F6 | 	mov	local11, local03
01f18     01 32 86 F1 | 	sub	local11, #1
01f1c     03 32 66 F0 | 	shl	local11, #3
01f20     F2 32 02 F1 | 	add	local11, objptr
01f24     04 32 06 F1 | 	add	local11, #4
01f28     19 2F 02 FB | 	rdlong	local09, local11
01f2c     11 33 02 F6 | 	mov	local11, local03
01f30     03 32 66 F0 | 	shl	local11, #3
01f34     F2 32 02 F1 | 	add	local11, objptr
01f38     19 25 62 FC | 	wrlong	local04, local11
01f3c     11 4B 02 F6 | 	mov	local23, local03
01f40     03 4A 66 F0 | 	shl	local23, #3
01f44     F2 4A 02 F1 | 	add	local23, objptr
01f48     04 4A 06 F1 | 	add	local23, #4
01f4c     25 2F 62 FC | 	wrlong	local09, local23
01f50     01 22 86 F1 | 	sub	local03, #1
01f54     2F 23 52 F2 | 	cmps	local03, local33 wc
01f58     A4 FF 9F 3D |  if_ae	jmp	#LR__0103
01f5c                 | LR__0104
01f5c     26 00 00 FF 
01f60     D4 E4 05 F1 | 	add	objptr, ##19668
01f64     F2 4A 02 FB | 	rdlong	local23, objptr
01f68     25 27 02 F6 | 	mov	local05, local23
01f6c     01 26 06 F1 | 	add	local05, #1
01f70     03 26 66 F0 | 	shl	local05, #3
01f74     26 00 00 FF 
01f78     D4 E4 85 F1 | 	sub	objptr, ##19668
01f7c     F2 26 02 F1 | 	add	local05, objptr
01f80     03 4A 66 F0 | 	shl	local23, #3
01f84     F2 4A 02 F1 | 	add	local23, objptr
01f88     25 33 02 FB | 	rdlong	local11, local23
01f8c     26 00 00 FF 
01f90     D4 E4 05 F1 | 	add	objptr, ##19668
01f94     F2 42 02 FB | 	rdlong	local19, objptr
01f98     21 4B 02 F6 | 	mov	local23, local19
01f9c     25 45 02 F6 | 	mov	local20, local23
01fa0     22 47 02 F6 | 	mov	local21, local20
01fa4     03 46 66 F0 | 	shl	local21, #3
01fa8     26 00 00 FF 
01fac     D4 E4 85 F1 | 	sub	objptr, ##19668
01fb0     F2 4C 02 F6 | 	mov	local24, objptr
01fb4     F2 46 02 F1 | 	add	local21, objptr
01fb8     23 13 02 FB | 	rdlong	arg01, local21
01fbc     54 00 00 FF 
01fc0     E0 E4 85 F1 | 	sub	objptr, ##43232
01fc4     09 2B 02 F6 | 	mov	local07, arg01
01fc8     97 06 48 FB | 	callpa	#(@LR__0106-@LR__0105)>>2,fcache_load_ptr_
01fcc                 | LR__0105
01fcc     15 FB C9 FA | 	rdbyte	result1, local07 wz
01fd0     01 2A 06 51 |  if_ne	add	local07, #1
01fd4     F4 FF 9F 5D |  if_ne	jmp	#LR__0105
01fd8                 | LR__0106
01fd8     09 2B 82 F1 | 	sub	local07, arg01
01fdc     15 35 02 F6 | 	mov	local12, local07
01fe0     1A 37 02 F6 | 	mov	local13, local12
01fe4     01 36 86 F1 | 	sub	local13, #1
01fe8     1B 31 02 F6 | 	mov	local10, local13
01fec     19 13 02 F6 | 	mov	arg01, local11
01ff0     18 15 02 F6 | 	mov	arg02, local10
01ff4     18 8E B1 FD | 	call	#__system__Right_S
01ff8     13 FB 61 FC | 	wrlong	result1, local05
01ffc     7A 00 00 FF 
02000     B4 E5 05 F1 | 	add	objptr, ##62900
02004     F2 26 02 FB | 	rdlong	local05, objptr
02008     03 26 66 F0 | 	shl	local05, #3
0200c     26 00 00 FF 
02010     D4 E4 85 F1 | 	sub	objptr, ##19668
02014     F2 26 02 F1 | 	add	local05, objptr
02018     41 01 00 FF 
0201c     53 33 06 F6 | 	mov	local11, ##@LR__4312
02020     13 33 62 FC | 	wrlong	local11, local05
02024     54 00 00 FF 
02028     E0 E4 85 F1 | 	sub	objptr, ##43232
0202c                 | LR__0107
0202c     7A 00 00 FF 
02030     B4 E5 05 F1 | 	add	objptr, ##62900
02034     F2 26 02 FB | 	rdlong	local05, objptr
02038     03 26 66 F0 | 	shl	local05, #3
0203c     26 00 00 FF 
02040     D4 E4 85 F1 | 	sub	objptr, ##19668
02044     F2 26 02 F1 | 	add	local05, objptr
02048     13 33 02 FB | 	rdlong	local11, local05
0204c     26 00 00 FF 
02050     D8 E4 05 F1 | 	add	objptr, ##19672
02054     F2 32 62 FC | 	wrlong	local11, objptr
02058                 | ' 
02058                 | ' ' process the case when simple load or save is called without ""
02058                 | ' 
02058                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") andalso lparts(addptr+1).token=token_name then 
02058     7A 00 00 FF 
0205c     B8 E5 85 F1 | 	sub	objptr, ##62904
02060     41 01 00 FF 
02064     55 15 06 F6 | 	mov	arg02, ##@LR__4313
02068     19 13 02 F6 | 	mov	arg01, local11
0206c     30 6D B1 FD | 	call	#__system___string_cmp
02070     00 FA 0D F2 | 	cmp	result1, #0 wz
02074     50 00 90 AD |  if_e	jmp	#LR__0108
02078     7A 00 00 FF 
0207c     B8 E5 05 F1 | 	add	objptr, ##62904
02080     F2 12 02 FB | 	rdlong	arg01, objptr
02084     7A 00 00 FF 
02088     B8 E5 85 F1 | 	sub	objptr, ##62904
0208c     41 01 00 FF 
02090     5B 15 06 F6 | 	mov	arg02, ##@LR__4314
02094     08 6D B1 FD | 	call	#__system___string_cmp
02098     00 FA 0D F2 | 	cmp	result1, #0 wz
0209c     28 00 90 AD |  if_e	jmp	#LR__0108
020a0     7A 00 00 FF 
020a4     B8 E5 05 F1 | 	add	objptr, ##62904
020a8     F2 12 02 FB | 	rdlong	arg01, objptr
020ac     7A 00 00 FF 
020b0     B8 E5 85 F1 | 	sub	objptr, ##62904
020b4     41 01 00 FF 
020b8     62 15 06 F6 | 	mov	arg02, ##@LR__4315
020bc     E0 6C B1 FD | 	call	#__system___string_cmp
020c0     00 FA 0D F2 | 	cmp	result1, #0 wz
020c4     94 01 90 5D |  if_ne	jmp	#LR__0111
020c8                 | LR__0108
020c8     7A 00 00 FF 
020cc     B4 E5 05 F1 | 	add	objptr, ##62900
020d0     F2 32 02 FB | 	rdlong	local11, objptr
020d4     01 32 06 F1 | 	add	local11, #1
020d8     19 31 02 F6 | 	mov	local10, local11
020dc     03 30 66 F0 | 	shl	local10, #3
020e0     26 00 00 FF 
020e4     D4 E4 85 F1 | 	sub	objptr, ##19668
020e8     F2 36 02 F6 | 	mov	local13, objptr
020ec     F2 30 02 F1 | 	add	local10, objptr
020f0     04 30 06 F1 | 	add	local10, #4
020f4     18 4B 02 FB | 	rdlong	local23, local10
020f8     04 30 86 F1 | 	sub	local10, #4
020fc     25 35 02 F6 | 	mov	local12, local23
02100     01 00 00 FF 
02104     04 34 0E F2 | 	cmp	local12, ##516 wz
02108     54 00 00 FF 
0210c     E0 E4 85 F1 | 	sub	objptr, ##43232
02110     48 01 90 5D |  if_ne	jmp	#LR__0111
02114                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(addptr+1).token=token_decimal
02114     7A 00 00 FF 
02118     B4 E5 05 F1 | 	add	objptr, ##62900
0211c     F2 28 02 FB | 	rdlong	local06, objptr
02120     01 28 06 F1 | 	add	local06, #1
02124     03 28 66 F0 | 	shl	local06, #3
02128     26 00 00 FF 
0212c     D4 E4 85 F1 | 	sub	objptr, ##19668
02130     F2 28 02 F1 | 	add	local06, objptr
02134     14 13 02 FB | 	rdlong	arg01, local06
02138     41 01 00 FF 
0213c     68 15 06 F6 | 	mov	arg02, ##@LR__4316
02140     54 00 00 FF 
02144     E0 E4 85 F1 | 	sub	objptr, ##43232
02148     54 6C B1 FD | 	call	#__system___string_cmp
0214c     00 FA 0D F2 | 	cmp	result1, #0 wz
02150     60 00 90 5D |  if_ne	jmp	#LR__0109
02154     7A 00 00 FF 
02158     B4 E5 05 F1 | 	add	objptr, ##62900
0215c     F2 26 02 FB | 	rdlong	local05, objptr
02160     01 26 06 F1 | 	add	local05, #1
02164     03 26 66 F0 | 	shl	local05, #3
02168     26 00 00 FF 
0216c     D4 E4 85 F1 | 	sub	objptr, ##19668
02170     F2 26 02 F1 | 	add	local05, objptr
02174     41 01 00 FF 
02178     6B 33 06 F6 | 	mov	local11, ##@LR__4317
0217c     13 33 62 FC | 	wrlong	local11, local05
02180     26 00 00 FF 
02184     D4 E4 05 F1 | 	add	objptr, ##19668
02188     F2 26 02 FB | 	rdlong	local05, objptr
0218c     01 26 06 F1 | 	add	local05, #1
02190     03 26 66 F0 | 	shl	local05, #3
02194     26 00 00 FF 
02198     D4 E4 85 F1 | 	sub	objptr, ##19668
0219c     F2 26 02 F1 | 	add	local05, objptr
021a0     04 26 06 F1 | 	add	local05, #4
021a4     01 00 80 FF 
021a8     13 01 68 FC | 	wrlong	##512, local05
021ac     54 00 00 FF 
021b0     E0 E4 85 F1 | 	sub	objptr, ##43232
021b4                 | LR__0109
021b4                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(addptr+1).token=token_decimal
021b4     7A 00 00 FF 
021b8     B4 E5 05 F1 | 	add	objptr, ##62900
021bc     F2 28 02 FB | 	rdlong	local06, objptr
021c0     01 28 06 F1 | 	add	local06, #1
021c4     03 28 66 F0 | 	shl	local06, #3
021c8     26 00 00 FF 
021cc     D4 E4 85 F1 | 	sub	objptr, ##19668
021d0     F2 32 02 F6 | 	mov	local11, objptr
021d4     F2 28 02 F1 | 	add	local06, objptr
021d8     14 13 02 FB | 	rdlong	arg01, local06
021dc     41 01 00 FF 
021e0     6D 15 06 F6 | 	mov	arg02, ##@LR__4318
021e4     54 00 00 FF 
021e8     E0 E4 85 F1 | 	sub	objptr, ##43232
021ec     B0 6B B1 FD | 	call	#__system___string_cmp
021f0     00 FA 0D F2 | 	cmp	result1, #0 wz
021f4     64 00 90 5D |  if_ne	jmp	#LR__0110
021f8     7A 00 00 FF 
021fc     B4 E5 05 F1 | 	add	objptr, ##62900
02200     F2 26 02 FB | 	rdlong	local05, objptr
02204     01 26 06 F1 | 	add	local05, #1
02208     03 26 66 F0 | 	shl	local05, #3
0220c     26 00 00 FF 
02210     D4 E4 85 F1 | 	sub	objptr, ##19668
02214     F2 26 02 F1 | 	add	local05, objptr
02218     41 01 00 FF 
0221c     71 33 06 F6 | 	mov	local11, ##@LR__4319
02220     13 33 62 FC | 	wrlong	local11, local05
02224     26 00 00 FF 
02228     D4 E4 05 F1 | 	add	objptr, ##19668
0222c     F2 26 02 FB | 	rdlong	local05, objptr
02230     01 26 06 F1 | 	add	local05, #1
02234     03 26 66 F0 | 	shl	local05, #3
02238     26 00 00 FF 
0223c     D4 E4 85 F1 | 	sub	objptr, ##19668
02240     F2 26 02 F1 | 	add	local05, objptr
02244     09 32 C6 F9 | 	decod	local11, #9
02248     04 26 06 F1 | 	add	local05, #4
0224c     01 00 80 FF 
02250     13 01 68 FC | 	wrlong	##512, local05
02254     54 00 00 FF 
02258     E0 E4 85 F1 | 	sub	objptr, ##43232
0225c                 | LR__0110
0225c                 | LR__0111
0225c                 | ' if (lp$="mode" orelse lp$="m.") then 
0225c     7A 00 00 FF 
02260     B8 E5 05 F1 | 	add	objptr, ##62904
02264     F2 12 02 FB | 	rdlong	arg01, objptr
02268     7A 00 00 FF 
0226c     B8 E5 85 F1 | 	sub	objptr, ##62904
02270     41 01 00 FF 
02274     73 15 06 F6 | 	mov	arg02, ##@LR__4320
02278     24 6B B1 FD | 	call	#__system___string_cmp
0227c     00 FA 0D F2 | 	cmp	result1, #0 wz
02280     28 00 90 AD |  if_e	jmp	#LR__0112
02284     7A 00 00 FF 
02288     B8 E5 05 F1 | 	add	objptr, ##62904
0228c     F2 12 02 FB | 	rdlong	arg01, objptr
02290     7A 00 00 FF 
02294     B8 E5 85 F1 | 	sub	objptr, ##62904
02298     41 01 00 FF 
0229c     78 15 06 F6 | 	mov	arg02, ##@LR__4321
022a0     FC 6A B1 FD | 	call	#__system___string_cmp
022a4     00 FA 0D F2 | 	cmp	result1, #0 wz
022a8     48 02 90 5D |  if_ne	jmp	#LR__0118
022ac                 | LR__0112
022ac                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"  
022ac     7A 00 00 FF 
022b0     B4 E5 05 F1 | 	add	objptr, ##62900
022b4     F2 28 02 FB | 	rdlong	local06, objptr
022b8     01 28 06 F1 | 	add	local06, #1
022bc     03 28 66 F0 | 	shl	local06, #3
022c0     26 00 00 FF 
022c4     D4 E4 85 F1 | 	sub	objptr, ##19668
022c8     F2 28 02 F1 | 	add	local06, objptr
022cc     14 13 02 FB | 	rdlong	arg01, local06
022d0     41 01 00 FF 
022d4     7B 15 06 F6 | 	mov	arg02, ##@LR__4322
022d8     54 00 00 FF 
022dc     E0 E4 85 F1 | 	sub	objptr, ##43232
022e0     BC 6A B1 FD | 	call	#__system___string_cmp
022e4     00 FA 0D F2 | 	cmp	result1, #0 wz
022e8     34 00 90 5D |  if_ne	jmp	#LR__0113
022ec     7A 00 00 FF 
022f0     B4 E5 05 F1 | 	add	objptr, ##62900
022f4     F2 26 02 FB | 	rdlong	local05, objptr
022f8     01 26 06 F1 | 	add	local05, #1
022fc     03 26 66 F0 | 	shl	local05, #3
02300     26 00 00 FF 
02304     D4 E4 85 F1 | 	sub	objptr, ##19668
02308     F2 26 02 F1 | 	add	local05, objptr
0230c     41 01 00 FF 
02310     81 33 06 F6 | 	mov	local11, ##@LR__4323
02314     13 33 62 FC | 	wrlong	local11, local05
02318     54 00 00 FF 
0231c     E0 E4 85 F1 | 	sub	objptr, ##43232
02320                 | LR__0113
02320                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02320     7A 00 00 FF 
02324     B4 E5 05 F1 | 	add	objptr, ##62900
02328     F2 28 02 FB | 	rdlong	local06, objptr
0232c     01 28 06 F1 | 	add	local06, #1
02330     03 28 66 F0 | 	shl	local06, #3
02334     26 00 00 FF 
02338     D4 E4 85 F1 | 	sub	objptr, ##19668
0233c     F2 28 02 F1 | 	add	local06, objptr
02340     14 13 02 FB | 	rdlong	arg01, local06
02344     41 01 00 FF 
02348     83 15 06 F6 | 	mov	arg02, ##@LR__4324
0234c     54 00 00 FF 
02350     E0 E4 85 F1 | 	sub	objptr, ##43232
02354     48 6A B1 FD | 	call	#__system___string_cmp
02358     00 FA 0D F2 | 	cmp	result1, #0 wz
0235c     34 00 90 5D |  if_ne	jmp	#LR__0114
02360     7A 00 00 FF 
02364     B4 E5 05 F1 | 	add	objptr, ##62900
02368     F2 26 02 FB | 	rdlong	local05, objptr
0236c     01 26 06 F1 | 	add	local05, #1
02370     03 26 66 F0 | 	shl	local05, #3
02374     26 00 00 FF 
02378     D4 E4 85 F1 | 	sub	objptr, ##19668
0237c     F2 26 02 F1 | 	add	local05, objptr
02380     41 01 00 FF 
02384     8C 33 06 F6 | 	mov	local11, ##@LR__4325
02388     13 33 62 FC | 	wrlong	local11, local05
0238c     54 00 00 FF 
02390     E0 E4 85 F1 | 	sub	objptr, ##43232
02394                 | LR__0114
02394                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02394     7A 00 00 FF 
02398     B4 E5 05 F1 | 	add	objptr, ##62900
0239c     F2 28 02 FB | 	rdlong	local06, objptr
023a0     01 28 06 F1 | 	add	local06, #1
023a4     03 28 66 F0 | 	shl	local06, #3
023a8     26 00 00 FF 
023ac     D4 E4 85 F1 | 	sub	objptr, ##19668
023b0     F2 28 02 F1 | 	add	local06, objptr
023b4     14 13 02 FB | 	rdlong	arg01, local06
023b8     41 01 00 FF 
023bc     8E 15 06 F6 | 	mov	arg02, ##@LR__4326
023c0     54 00 00 FF 
023c4     E0 E4 85 F1 | 	sub	objptr, ##43232
023c8     D4 69 B1 FD | 	call	#__system___string_cmp
023cc     00 FA 0D F2 | 	cmp	result1, #0 wz
023d0     34 00 90 5D |  if_ne	jmp	#LR__0115
023d4     7A 00 00 FF 
023d8     B4 E5 05 F1 | 	add	objptr, ##62900
023dc     F2 26 02 FB | 	rdlong	local05, objptr
023e0     01 26 06 F1 | 	add	local05, #1
023e4     03 26 66 F0 | 	shl	local05, #3
023e8     26 00 00 FF 
023ec     D4 E4 85 F1 | 	sub	objptr, ##19668
023f0     F2 26 02 F1 | 	add	local05, objptr
023f4     41 01 00 FF 
023f8     97 33 06 F6 | 	mov	local11, ##@LR__4327
023fc     13 33 62 FC | 	wrlong	local11, local05
02400     54 00 00 FF 
02404     E0 E4 85 F1 | 	sub	objptr, ##43232
02408                 | LR__0115
02408                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02408     7A 00 00 FF 
0240c     B4 E5 05 F1 | 	add	objptr, ##62900
02410     F2 28 02 FB | 	rdlong	local06, objptr
02414     01 28 06 F1 | 	add	local06, #1
02418     03 28 66 F0 | 	shl	local06, #3
0241c     26 00 00 FF 
02420     D4 E4 85 F1 | 	sub	objptr, ##19668
02424     F2 28 02 F1 | 	add	local06, objptr
02428     14 13 02 FB | 	rdlong	arg01, local06
0242c     41 01 00 FF 
02430     99 15 06 F6 | 	mov	arg02, ##@LR__4328
02434     54 00 00 FF 
02438     E0 E4 85 F1 | 	sub	objptr, ##43232
0243c     60 69 B1 FD | 	call	#__system___string_cmp
02440     00 FA 0D F2 | 	cmp	result1, #0 wz
02444     34 00 90 5D |  if_ne	jmp	#LR__0116
02448     7A 00 00 FF 
0244c     B4 E5 05 F1 | 	add	objptr, ##62900
02450     F2 26 02 FB | 	rdlong	local05, objptr
02454     01 26 06 F1 | 	add	local05, #1
02458     03 26 66 F0 | 	shl	local05, #3
0245c     26 00 00 FF 
02460     D4 E4 85 F1 | 	sub	objptr, ##19668
02464     F2 26 02 F1 | 	add	local05, objptr
02468     41 01 00 FF 
0246c     A2 33 06 F6 | 	mov	local11, ##@LR__4329
02470     13 33 62 FC | 	wrlong	local11, local05
02474     54 00 00 FF 
02478     E0 E4 85 F1 | 	sub	objptr, ##43232
0247c                 | LR__0116
0247c                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
0247c     7A 00 00 FF 
02480     B4 E5 05 F1 | 	add	objptr, ##62900
02484     F2 28 02 FB | 	rdlong	local06, objptr
02488     01 28 06 F1 | 	add	local06, #1
0248c     03 28 66 F0 | 	shl	local06, #3
02490     26 00 00 FF 
02494     D4 E4 85 F1 | 	sub	objptr, ##19668
02498     F2 32 02 F6 | 	mov	local11, objptr
0249c     F2 28 02 F1 | 	add	local06, objptr
024a0     14 13 02 FB | 	rdlong	arg01, local06
024a4     41 01 00 FF 
024a8     A4 15 06 F6 | 	mov	arg02, ##@LR__4330
024ac     54 00 00 FF 
024b0     E0 E4 85 F1 | 	sub	objptr, ##43232
024b4     E8 68 B1 FD | 	call	#__system___string_cmp
024b8     00 FA 0D F2 | 	cmp	result1, #0 wz
024bc     34 00 90 5D |  if_ne	jmp	#LR__0117
024c0     7A 00 00 FF 
024c4     B4 E5 05 F1 | 	add	objptr, ##62900
024c8     F2 26 02 FB | 	rdlong	local05, objptr
024cc     01 26 06 F1 | 	add	local05, #1
024d0     03 26 66 F0 | 	shl	local05, #3
024d4     26 00 00 FF 
024d8     D4 E4 85 F1 | 	sub	objptr, ##19668
024dc     F2 26 02 F1 | 	add	local05, objptr
024e0     41 01 00 FF 
024e4     A7 33 06 F6 | 	mov	local11, ##@LR__4331
024e8     13 33 62 FC | 	wrlong	local11, local05
024ec     54 00 00 FF 
024f0     E0 E4 85 F1 | 	sub	objptr, ##43232
024f4                 | LR__0117
024f4                 | LR__0118
024f4                 | ' 
024f4                 | ' 
024f4                 | ' 
024f4                 | ' 
024f4                 | ' 
024f4                 | ' 
024f4                 | ' ' 2a find part types 
024f4                 | ' 
024f4                 | ' for i=0 to k-1
024f4     00 22 06 F6 | 	mov	local03, #0
024f8     1D 61 02 F6 | 	mov	local34, local15
024fc                 | LR__0119
024fc     30 23 52 F2 | 	cmps	local03, local34 wc
02500     74 05 90 3D |  if_ae	jmp	#LR__0128
02504     11 2F 02 F6 | 	mov	local09, local03
02508     03 2E 66 F0 | 	shl	local09, #3
0250c     54 00 00 FF 
02510     E0 E4 05 F1 | 	add	objptr, ##43232
02514     F2 2E 02 F1 | 	add	local09, objptr
02518     11 35 02 F6 | 	mov	local12, local03
0251c     03 34 66 F0 | 	shl	local12, #3
02520     F2 4A 02 F6 | 	mov	local23, objptr
02524     F2 34 02 F1 | 	add	local12, objptr
02528     1A 13 02 FB | 	rdlong	arg01, local12
0252c     54 00 00 FF 
02530     E0 E4 85 F1 | 	sub	objptr, ##43232
02534     18 10 B0 FD | 	call	#_isseparator
02538     FD FA E1 F8 | 	getbyte	result1, result1, #0
0253c     04 2E 06 F1 | 	add	local09, #4
02540     17 FB 61 FC | 	wrlong	result1, local09
02544                 | ' lparts(i).token=isseparator(lparts(i).part$): if lparts(i).token>0 then goto 102
02544     11 2F 02 F6 | 	mov	local09, local03
02548     03 2E 66 F0 | 	shl	local09, #3
0254c     54 00 00 FF 
02550     E0 E4 05 F1 | 	add	objptr, ##43232
02554     F2 2E 02 F1 | 	add	local09, objptr
02558     04 2E 06 F1 | 	add	local09, #4
0255c     17 33 02 FB | 	rdlong	local11, local09
02560     01 32 56 F2 | 	cmps	local11, #1 wc
02564     54 00 00 FF 
02568     E0 E4 85 F1 | 	sub	objptr, ##43232
0256c     00 05 90 3D |  if_ae	jmp	#LR__0127
02570     11 2F 02 F6 | 	mov	local09, local03
02574     03 2E 66 F0 | 	shl	local09, #3
02578     54 00 00 FF 
0257c     E0 E4 05 F1 | 	add	objptr, ##43232
02580     F2 2E 02 F1 | 	add	local09, objptr
02584     11 35 02 F6 | 	mov	local12, local03
02588     03 34 66 F0 | 	shl	local12, #3
0258c     F2 4A 02 F6 | 	mov	local23, objptr
02590     F2 34 02 F1 | 	add	local12, objptr
02594     1A 13 02 FB | 	rdlong	arg01, local12
02598     54 00 00 FF 
0259c     E0 E4 85 F1 | 	sub	objptr, ##43232
025a0     CC 0C B0 FD | 	call	#_isoperator
025a4     FD FA E1 F8 | 	getbyte	result1, result1, #0
025a8     04 2E 06 F1 | 	add	local09, #4
025ac     17 FB 61 FC | 	wrlong	result1, local09
025b0                 | ' lparts(i).token=isoperator(lparts(i).part$): if lparts(i).token>0 then goto 102
025b0     11 2F 02 F6 | 	mov	local09, local03
025b4     03 2E 66 F0 | 	shl	local09, #3
025b8     54 00 00 FF 
025bc     E0 E4 05 F1 | 	add	objptr, ##43232
025c0     F2 2E 02 F1 | 	add	local09, objptr
025c4     04 2E 06 F1 | 	add	local09, #4
025c8     17 33 02 FB | 	rdlong	local11, local09
025cc     01 32 56 F2 | 	cmps	local11, #1 wc
025d0     54 00 00 FF 
025d4     E0 E4 85 F1 | 	sub	objptr, ##43232
025d8     94 04 90 3D |  if_ae	jmp	#LR__0127
025dc     11 2F 02 F6 | 	mov	local09, local03
025e0     03 2E 66 F0 | 	shl	local09, #3
025e4     54 00 00 FF 
025e8     E0 E4 05 F1 | 	add	objptr, ##43232
025ec     F2 2E 02 F1 | 	add	local09, objptr
025f0     11 35 02 F6 | 	mov	local12, local03
025f4     03 34 66 F0 | 	shl	local12, #3
025f8     F2 4A 02 F6 | 	mov	local23, objptr
025fc     F2 34 02 F1 | 	add	local12, objptr
02600     1A 13 02 FB | 	rdlong	arg01, local12
02604     54 00 00 FF 
02608     E0 E4 85 F1 | 	sub	objptr, ##43232
0260c                 | ' 
0260c                 | ' select case s
0260c     42 01 00 FF 
02610     5D 14 06 F6 | 	mov	arg02, ##@LR__4384
02614     88 67 B1 FD | 	call	#__system___string_cmp
02618     00 FA 0D F2 | 	cmp	result1, #0 wz
0261c     1B FA 05 A6 |  if_e	mov	result1, #27
02620     00 FA 05 56 |  if_ne	mov	result1, #0
02624     FD FA E1 F8 | 	getbyte	result1, result1, #0
02628     04 2E 06 F1 | 	add	local09, #4
0262c     17 FB 61 FC | 	wrlong	result1, local09
02630                 | ' lparts(i).token=isassign(lparts(i).part$) : if lparts(i).token>0 then goto 102
02630     11 2F 02 F6 | 	mov	local09, local03
02634     03 2E 66 F0 | 	shl	local09, #3
02638     54 00 00 FF 
0263c     E0 E4 05 F1 | 	add	objptr, ##43232
02640     F2 2E 02 F1 | 	add	local09, objptr
02644     04 2E 06 F1 | 	add	local09, #4
02648     17 33 02 FB | 	rdlong	local11, local09
0264c     01 32 56 F2 | 	cmps	local11, #1 wc
02650     54 00 00 FF 
02654     E0 E4 85 F1 | 	sub	objptr, ##43232
02658     14 04 90 3D |  if_ae	jmp	#LR__0127
0265c     11 2F 02 F6 | 	mov	local09, local03
02660     03 2E 66 F0 | 	shl	local09, #3
02664     54 00 00 FF 
02668     E0 E4 05 F1 | 	add	objptr, ##43232
0266c     F2 2E 02 F1 | 	add	local09, objptr
02670     11 35 02 F6 | 	mov	local12, local03
02674     03 34 66 F0 | 	shl	local12, #3
02678     F2 4A 02 F6 | 	mov	local23, objptr
0267c     F2 34 02 F1 | 	add	local12, objptr
02680     1A 13 02 FB | 	rdlong	arg01, local12
02684     54 00 00 FF 
02688     E0 E4 85 F1 | 	sub	objptr, ##43232
0268c     C0 10 B0 FD | 	call	#_iscommand
02690     FD FA E1 F8 | 	getbyte	result1, result1, #0
02694     04 2E 06 F1 | 	add	local09, #4
02698     17 FB 61 FC | 	wrlong	result1, local09
0269c                 | ' lparts(i).token=iscommand(lparts(i).part$): if lparts(i).token>0 then goto 102
0269c     11 2F 02 F6 | 	mov	local09, local03
026a0     03 2E 66 F0 | 	shl	local09, #3
026a4     54 00 00 FF 
026a8     E0 E4 05 F1 | 	add	objptr, ##43232
026ac     F2 2E 02 F1 | 	add	local09, objptr
026b0     04 2E 06 F1 | 	add	local09, #4
026b4     17 33 02 FB | 	rdlong	local11, local09
026b8     01 32 56 F2 | 	cmps	local11, #1 wc
026bc     54 00 00 FF 
026c0     E0 E4 85 F1 | 	sub	objptr, ##43232
026c4     A8 03 90 3D |  if_ae	jmp	#LR__0127
026c8     11 2F 02 F6 | 	mov	local09, local03
026cc     03 2E 66 F0 | 	shl	local09, #3
026d0     54 00 00 FF 
026d4     E0 E4 05 F1 | 	add	objptr, ##43232
026d8     F2 2E 02 F1 | 	add	local09, objptr
026dc     11 31 02 F6 | 	mov	local10, local03
026e0     18 37 02 F6 | 	mov	local13, local10
026e4     1B 35 02 F6 | 	mov	local12, local13
026e8     03 34 66 F0 | 	shl	local12, #3
026ec     F2 4A 02 F6 | 	mov	local23, objptr
026f0     F2 34 02 F1 | 	add	local12, objptr
026f4     1A 13 02 FB | 	rdlong	arg01, local12
026f8     54 00 00 FF 
026fc     E0 E4 85 F1 | 	sub	objptr, ##43232
02700     2C 1A B0 FD | 	call	#_isfunction
02704     FD FA E1 F8 | 	getbyte	result1, result1, #0
02708     04 2E 06 F1 | 	add	local09, #4
0270c     17 FB 61 FC | 	wrlong	result1, local09
02710                 | ' lparts(i).token=isfunction(lparts(i).part$): if lparts(i).token>0 then goto 102
02710     11 2F 02 F6 | 	mov	local09, local03
02714     03 2E 66 F0 | 	shl	local09, #3
02718     54 00 00 FF 
0271c     E0 E4 05 F1 | 	add	objptr, ##43232
02720     F2 2E 02 F1 | 	add	local09, objptr
02724     04 2E 06 F1 | 	add	local09, #4
02728     17 33 02 FB | 	rdlong	local11, local09
0272c     01 32 56 F2 | 	cmps	local11, #1 wc
02730     54 00 00 FF 
02734     E0 E4 85 F1 | 	sub	objptr, ##43232
02738     34 03 90 3D |  if_ae	jmp	#LR__0127
0273c     11 27 02 F6 | 	mov	local05, local03
02740     03 26 66 F0 | 	shl	local05, #3
02744     54 00 00 FF 
02748     E0 E4 05 F1 | 	add	objptr, ##43232
0274c     F2 26 02 F1 | 	add	local05, objptr
02750     13 13 02 FB | 	rdlong	arg01, local05
02754     54 00 00 FF 
02758     E0 E4 85 F1 | 	sub	objptr, ##43232
0275c     E4 1E B0 FD | 	call	#_isnum
02760     FD 1E 02 F6 | 	mov	local01, result1
02764     7A 00 00 FF 
02768     C0 E5 05 F1 | 	add	objptr, ##62912
0276c     F2 1E 62 FC | 	wrlong	local01, objptr
02770     11 27 02 F6 | 	mov	local05, local03
02774     03 26 66 F0 | 	shl	local05, #3
02778     26 00 00 FF 
0277c     E0 E4 85 F1 | 	sub	objptr, ##19680
02780     F2 26 02 F1 | 	add	local05, objptr
02784     13 13 02 FB | 	rdlong	arg01, local05
02788     54 00 00 FF 
0278c     E0 E4 85 F1 | 	sub	objptr, ##43232
02790     88 21 B0 FD | 	call	#_isint
02794     FD 1E 02 F6 | 	mov	local01, result1
02798     7A 00 00 FF 
0279c     C4 E5 05 F1 | 	add	objptr, ##62916
027a0     F2 1E 62 FC | 	wrlong	local01, objptr
027a4     11 27 02 F6 | 	mov	local05, local03
027a8     03 26 66 F0 | 	shl	local05, #3
027ac     26 00 00 FF 
027b0     E4 E4 85 F1 | 	sub	objptr, ##19684
027b4     F2 28 02 F6 | 	mov	local06, objptr
027b8     F2 26 02 F1 | 	add	local05, objptr
027bc     13 13 02 FB | 	rdlong	arg01, local05
027c0     54 00 00 FF 
027c4     E0 E4 85 F1 | 	sub	objptr, ##43232
027c8     A8 22 B0 FD | 	call	#_isdec
027cc     7A 00 00 FF 
027d0     C8 E5 05 F1 | 	add	objptr, ##62920
027d4     F2 FA 61 FC | 	wrlong	result1, objptr
027d8                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal : goto 102 					' pure decimal for line num
027d8     08 E4 85 F1 | 	sub	objptr, #8
027dc     F2 1E 0A FB | 	rdlong	local01, objptr wz
027e0     7A 00 00 FF 
027e4     C0 E5 85 F1 | 	sub	objptr, ##62912
027e8     60 00 90 AD |  if_e	jmp	#LR__0120
027ec     7A 00 00 FF 
027f0     C4 E5 05 F1 | 	add	objptr, ##62916
027f4     F2 2E 0A FB | 	rdlong	local09, objptr wz
027f8     7A 00 00 FF 
027fc     C4 E5 85 F1 | 	sub	objptr, ##62916
02800     48 00 90 AD |  if_e	jmp	#LR__0120
02804     7A 00 00 FF 
02808     C8 E5 05 F1 | 	add	objptr, ##62920
0280c     F2 32 0A FB | 	rdlong	local11, objptr wz
02810     7A 00 00 FF 
02814     C8 E5 85 F1 | 	sub	objptr, ##62920
02818     30 00 90 AD |  if_e	jmp	#LR__0120
0281c     11 25 02 F6 | 	mov	local04, local03
02820     12 2F 02 F6 | 	mov	local09, local04
02824     03 2E 66 F0 | 	shl	local09, #3
02828     54 00 00 FF 
0282c     E0 E4 05 F1 | 	add	objptr, ##43232
02830     F2 2E 02 F1 | 	add	local09, objptr
02834     04 2E 06 F1 | 	add	local09, #4
02838     01 00 80 FF 
0283c     17 01 68 FC | 	wrlong	##512, local09
02840     54 00 00 FF 
02844     E0 E4 85 F1 | 	sub	objptr, ##43232
02848     24 02 90 FD | 	jmp	#LR__0127
0284c                 | LR__0120
0284c                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer : goto 102 				' integer
0284c     7A 00 00 FF 
02850     C0 E5 05 F1 | 	add	objptr, ##62912
02854     F2 1E 0A FB | 	rdlong	local01, objptr wz
02858     7A 00 00 FF 
0285c     C0 E5 85 F1 | 	sub	objptr, ##62912
02860     64 00 90 AD |  if_e	jmp	#LR__0121
02864     7A 00 00 FF 
02868     C4 E5 05 F1 | 	add	objptr, ##62916
0286c     F2 2E 0A FB | 	rdlong	local09, objptr wz
02870     7A 00 00 FF 
02874     C4 E5 85 F1 | 	sub	objptr, ##62916
02878     7A 00 00 5F 
0287c     C8 E5 05 51 |  if_ne	add	objptr, ##62920
02880     F2 32 02 5B |  if_ne	rdlong	local11, objptr
02884     7A 00 00 5F 
02888     C8 E5 85 51 |  if_ne	sub	objptr, ##62920
0288c     19 29 22 56 |  if_ne	not	local06, local11
02890     00 28 0E 52 |  if_ne	cmp	local06, #0 wz
02894     30 00 90 AD |  if_e	jmp	#LR__0121
02898     11 25 02 F6 | 	mov	local04, local03
0289c     12 2F 02 F6 | 	mov	local09, local04
028a0     03 2E 66 F0 | 	shl	local09, #3
028a4     54 00 00 FF 
028a8     E0 E4 05 F1 | 	add	objptr, ##43232
028ac     F2 2E 02 F1 | 	add	local09, objptr
028b0     04 2E 06 F1 | 	add	local09, #4
028b4     01 00 80 FF 
028b8     17 03 68 FC | 	wrlong	##513, local09
028bc     54 00 00 FF 
028c0     E0 E4 85 F1 | 	sub	objptr, ##43232
028c4     A8 01 90 FD | 	jmp	#LR__0127
028c8                 | LR__0121
028c8                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float :goto 102 				' float
028c8     7A 00 00 FF 
028cc     C0 E5 05 F1 | 	add	objptr, ##62912
028d0     F2 1E 0A FB | 	rdlong	local01, objptr wz
028d4     7A 00 00 FF 
028d8     C0 E5 85 F1 | 	sub	objptr, ##62912
028dc     7A 00 00 5F 
028e0     C4 E5 05 51 |  if_ne	add	objptr, ##62916
028e4     F2 2E 02 5B |  if_ne	rdlong	local09, objptr
028e8     7A 00 00 5F 
028ec     C4 E5 85 51 |  if_ne	sub	objptr, ##62916
028f0     17 2F 22 56 |  if_ne	not	local09, local09
028f4     00 2E 0E 52 |  if_ne	cmp	local09, #0 wz
028f8     7A 00 00 5F 
028fc     C8 E5 05 51 |  if_ne	add	objptr, ##62920
02900     F2 32 02 5B |  if_ne	rdlong	local11, objptr
02904     7A 00 00 5F 
02908     C8 E5 85 51 |  if_ne	sub	objptr, ##62920
0290c     19 29 22 56 |  if_ne	not	local06, local11
02910     00 28 0E 52 |  if_ne	cmp	local06, #0 wz
02914     30 00 90 AD |  if_e	jmp	#LR__0122
02918     11 25 02 F6 | 	mov	local04, local03
0291c     12 2F 02 F6 | 	mov	local09, local04
02920     03 2E 66 F0 | 	shl	local09, #3
02924     54 00 00 FF 
02928     E0 E4 05 F1 | 	add	objptr, ##43232
0292c     F2 2E 02 F1 | 	add	local09, objptr
02930     04 2E 06 F1 | 	add	local09, #4
02934     01 00 80 FF 
02938     17 05 68 FC | 	wrlong	##514, local09
0293c     54 00 00 FF 
02940     E0 E4 85 F1 | 	sub	objptr, ##43232
02944     28 01 90 FD | 	jmp	#LR__0127
02948                 | LR__0122
02948                 | ' 
02948                 | ' if isstring(lparts(i).part$) then 
02948     11 27 02 F6 | 	mov	local05, local03
0294c     03 26 66 F0 | 	shl	local05, #3
02950     54 00 00 FF 
02954     E0 E4 05 F1 | 	add	objptr, ##43232
02958     F2 26 02 F1 | 	add	local05, objptr
0295c     13 13 02 FB | 	rdlong	arg01, local05
02960     54 00 00 FF 
02964     E0 E4 85 F1 | 	sub	objptr, ##43232
02968     C8 21 B0 FD | 	call	#_isstring
0296c     00 FA 0D F2 | 	cmp	result1, #0 wz
02970     A0 00 90 AD |  if_e	jmp	#LR__0125
02974     11 2F 02 F6 | 	mov	local09, local03
02978     03 2E 66 F0 | 	shl	local09, #3
0297c     54 00 00 FF 
02980     E0 E4 05 F1 | 	add	objptr, ##43232
02984     F2 2E 02 F1 | 	add	local09, objptr
02988     04 2E 06 F1 | 	add	local09, #4
0298c     01 00 80 FF 
02990     17 07 68 FC | 	wrlong	##515, local09
02994     11 25 02 F6 | 	mov	local04, local03
02998     12 2F 02 F6 | 	mov	local09, local04
0299c     03 2E 66 F0 | 	shl	local09, #3
029a0     F2 2E 02 F1 | 	add	local09, objptr
029a4     11 37 02 F6 | 	mov	local13, local03
029a8     03 36 66 F0 | 	shl	local13, #3
029ac     F2 36 02 F1 | 	add	local13, objptr
029b0     1B 29 02 FB | 	rdlong	local06, local13
029b4     02 32 06 F6 | 	mov	local11, #2
029b8     11 4B 02 F6 | 	mov	local23, local03
029bc     25 43 02 F6 | 	mov	local19, local23
029c0     21 45 02 F6 | 	mov	local20, local19
029c4     03 44 66 F0 | 	shl	local20, #3
029c8     F2 46 02 F6 | 	mov	local21, objptr
029cc     F2 44 02 F1 | 	add	local20, objptr
029d0     22 13 02 FB | 	rdlong	arg01, local20
029d4     54 00 00 FF 
029d8     E0 E4 85 F1 | 	sub	objptr, ##43232
029dc     09 2B 02 F6 | 	mov	local07, arg01
029e0     97 06 48 FB | 	callpa	#(@LR__0124-@LR__0123)>>2,fcache_load_ptr_
029e4                 | LR__0123
029e4     15 FB C9 FA | 	rdbyte	result1, local07 wz
029e8     01 2A 06 51 |  if_ne	add	local07, #1
029ec     F4 FF 9F 5D |  if_ne	jmp	#LR__0123
029f0                 | LR__0124
029f0     09 2B 82 F1 | 	sub	local07, arg01
029f4     15 35 02 F6 | 	mov	local12, local07
029f8     1A 17 02 F6 | 	mov	arg03, local12
029fc     02 16 86 F1 | 	sub	arg03, #2
02a00     14 13 02 F6 | 	mov	arg01, local06
02a04     19 15 02 F6 | 	mov	arg02, local11
02a08     94 84 B1 FD | 	call	#__system__Mid_S
02a0c     17 FB 61 FC | 	wrlong	result1, local09
02a10     5C 00 90 FD | 	jmp	#LR__0127
02a14                 | LR__0125
02a14                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
02a14     11 25 02 F6 | 	mov	local04, local03
02a18     12 27 02 F6 | 	mov	local05, local04
02a1c     03 26 66 F0 | 	shl	local05, #3
02a20     54 00 00 FF 
02a24     E0 E4 05 F1 | 	add	objptr, ##43232
02a28     F2 26 02 F1 | 	add	local05, objptr
02a2c     13 13 02 FB | 	rdlong	arg01, local05
02a30     54 00 00 FF 
02a34     E0 E4 85 F1 | 	sub	objptr, ##43232
02a38     94 19 B0 FD | 	call	#_isname
02a3c     00 FA 0D F2 | 	cmp	result1, #0 wz
02a40     2C 00 90 AD |  if_e	jmp	#LR__0126
02a44     11 25 02 F6 | 	mov	local04, local03
02a48     12 2F 02 F6 | 	mov	local09, local04
02a4c     03 2E 66 F0 | 	shl	local09, #3
02a50     54 00 00 FF 
02a54     E0 E4 05 F1 | 	add	objptr, ##43232
02a58     F2 2E 02 F1 | 	add	local09, objptr
02a5c     04 2E 06 F1 | 	add	local09, #4
02a60     01 00 80 FF 
02a64     17 09 68 FC | 	wrlong	##516, local09
02a68     54 00 00 FF 
02a6c     E0 E4 85 F1 | 	sub	objptr, ##43232
02a70                 | LR__0126
02a70                 | LR__0127
02a70     01 22 06 F1 | 	add	local03, #1
02a74     84 FA 9F FD | 	jmp	#LR__0119
02a78                 | LR__0128
02a78     1D 2F 02 F6 | 	mov	local09, local15
02a7c     03 2E 66 F0 | 	shl	local09, #3
02a80     54 00 00 FF 
02a84     E0 E4 05 F1 | 	add	objptr, ##43232
02a88     F2 2E 02 F1 | 	add	local09, objptr
02a8c     04 2E 06 F1 | 	add	local09, #4
02a90     17 FD 6B FC | 	wrlong	#510, local09
02a94     1D 2F 02 F6 | 	mov	local09, local15
02a98     03 2E 66 F0 | 	shl	local09, #3
02a9c     F2 26 02 F6 | 	mov	local05, objptr
02aa0     F2 2E 02 F1 | 	add	local09, objptr
02aa4     41 01 00 FF 
02aa8     A9 29 06 F6 | 	mov	local06, ##@LR__4332
02aac     17 29 62 FC | 	wrlong	local06, local09
02ab0     10 00 00 FF 
02ab4     54 E4 05 F1 | 	add	objptr, ##8276
02ab8     F2 3A 62 FC | 	wrlong	local15, objptr
02abc                 | ' 
02abc                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
02abc                 | ' 
02abc                 | '  '                                      					 	for i=0 to k: print lparts(i).token,lparts(i).part$ : next i
02abc                 | '  
02abc                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="lo." orelse lp$="s." orelse lp$="br.") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
02abc     16 00 00 FF 
02ac0     84 E4 05 F1 | 	add	objptr, ##11396
02ac4     F2 12 02 FB | 	rdlong	arg01, objptr
02ac8     7A 00 00 FF 
02acc     B8 E5 85 F1 | 	sub	objptr, ##62904
02ad0     41 01 00 FF 
02ad4     AA 2F 06 F6 | 	mov	local09, ##@LR__4333
02ad8     17 15 02 F6 | 	mov	arg02, local09
02adc     C0 62 B1 FD | 	call	#__system___string_cmp
02ae0     00 FA 0D F2 | 	cmp	result1, #0 wz
02ae4     EC 00 90 AD |  if_e	jmp	#LR__0129
02ae8     7A 00 00 FF 
02aec     B8 E5 05 F1 | 	add	objptr, ##62904
02af0     F2 12 02 FB | 	rdlong	arg01, objptr
02af4     7A 00 00 FF 
02af8     B8 E5 85 F1 | 	sub	objptr, ##62904
02afc     41 01 00 FF 
02b00     AF 27 06 F6 | 	mov	local05, ##@LR__4334
02b04     13 2F 02 F6 | 	mov	local09, local05
02b08     17 15 02 F6 | 	mov	arg02, local09
02b0c     90 62 B1 FD | 	call	#__system___string_cmp
02b10     00 FA 0D F2 | 	cmp	result1, #0 wz
02b14     BC 00 90 AD |  if_e	jmp	#LR__0129
02b18     7A 00 00 FF 
02b1c     B8 E5 05 F1 | 	add	objptr, ##62904
02b20     F2 12 02 FB | 	rdlong	arg01, objptr
02b24     7A 00 00 FF 
02b28     B8 E5 85 F1 | 	sub	objptr, ##62904
02b2c     41 01 00 FF 
02b30     B4 29 06 F6 | 	mov	local06, ##@LR__4335
02b34     14 27 02 F6 | 	mov	local05, local06
02b38     13 15 02 F6 | 	mov	arg02, local05
02b3c     60 62 B1 FD | 	call	#__system___string_cmp
02b40     FD 2E 0A F6 | 	mov	local09, result1 wz
02b44     8C 00 90 AD |  if_e	jmp	#LR__0129
02b48     7A 00 00 FF 
02b4c     B8 E5 05 F1 | 	add	objptr, ##62904
02b50     F2 12 02 FB | 	rdlong	arg01, objptr
02b54     7A 00 00 FF 
02b58     B8 E5 85 F1 | 	sub	objptr, ##62904
02b5c     41 01 00 FF 
02b60     B9 33 06 F6 | 	mov	local11, ##@LR__4336
02b64     19 29 02 F6 | 	mov	local06, local11
02b68     14 15 02 F6 | 	mov	arg02, local06
02b6c     30 62 B1 FD | 	call	#__system___string_cmp
02b70     FD 26 0A F6 | 	mov	local05, result1 wz
02b74     5C 00 90 AD |  if_e	jmp	#LR__0129
02b78     7A 00 00 FF 
02b7c     B8 E5 05 F1 | 	add	objptr, ##62904
02b80     F2 12 02 FB | 	rdlong	arg01, objptr
02b84     7A 00 00 FF 
02b88     B8 E5 85 F1 | 	sub	objptr, ##62904
02b8c     41 01 00 FF 
02b90     BD 33 06 F6 | 	mov	local11, ##@LR__4337
02b94     19 15 02 F6 | 	mov	arg02, local11
02b98     04 62 B1 FD | 	call	#__system___string_cmp
02b9c     FD 28 0A F6 | 	mov	local06, result1 wz
02ba0     30 00 90 AD |  if_e	jmp	#LR__0129
02ba4     7A 00 00 FF 
02ba8     B8 E5 05 F1 | 	add	objptr, ##62904
02bac     F2 12 02 FB | 	rdlong	arg01, objptr
02bb0     7A 00 00 FF 
02bb4     B8 E5 85 F1 | 	sub	objptr, ##62904
02bb8     41 01 00 FF 
02bbc     C0 37 06 F6 | 	mov	local13, ##@LR__4338
02bc0     1B 31 02 F6 | 	mov	local10, local13
02bc4     18 15 02 F6 | 	mov	arg02, local10
02bc8     D4 61 B1 FD | 	call	#__system___string_cmp
02bcc     FD 32 0A F6 | 	mov	local11, result1 wz
02bd0     9C 00 90 5D |  if_ne	jmp	#LR__0130
02bd4                 | LR__0129
02bd4     7A 00 00 FF 
02bd8     B4 E5 05 F1 | 	add	objptr, ##62900
02bdc     F2 36 02 FB | 	rdlong	local13, objptr
02be0     1B 31 02 F6 | 	mov	local10, local13
02be4     01 30 06 F1 | 	add	local10, #1
02be8     18 35 02 F6 | 	mov	local12, local10
02bec     1A 4B 02 F6 | 	mov	local23, local12
02bf0     03 4A 66 F0 | 	shl	local23, #3
02bf4     26 00 00 FF 
02bf8     D4 E4 85 F1 | 	sub	objptr, ##19668
02bfc     F2 42 02 F6 | 	mov	local19, objptr
02c00     F2 4A 02 F1 | 	add	local23, objptr
02c04     04 4A 06 F1 | 	add	local23, #4
02c08     25 47 02 FB | 	rdlong	local21, local23
02c0c     04 4A 86 F1 | 	sub	local23, #4
02c10     23 45 02 F6 | 	mov	local20, local21
02c14     01 00 00 FF 
02c18     04 44 0E F2 | 	cmp	local20, ##516 wz
02c1c     54 00 00 FF 
02c20     E0 E4 85 F1 | 	sub	objptr, ##43232
02c24     48 00 90 5D |  if_ne	jmp	#LR__0130
02c28     7A 00 00 FF 
02c2c     B4 E5 05 F1 | 	add	objptr, ##62900
02c30     F2 2E 02 FB | 	rdlong	local09, objptr
02c34     01 2E 06 F1 | 	add	local09, #1
02c38     17 27 02 F6 | 	mov	local05, local09
02c3c     03 26 66 F0 | 	shl	local05, #3
02c40     26 00 00 FF 
02c44     D4 E4 85 F1 | 	sub	objptr, ##19668
02c48     F2 28 02 F6 | 	mov	local06, objptr
02c4c     F2 26 02 F1 | 	add	local05, objptr
02c50     01 00 00 FF 
02c54     03 32 06 F6 | 	mov	local11, ##515
02c58     04 26 06 F1 | 	add	local05, #4
02c5c     01 00 80 FF 
02c60     13 07 68 FC | 	wrlong	##515, local05
02c64     04 26 86 F1 | 	sub	local05, #4
02c68     54 00 00 FF 
02c6c     E0 E4 85 F1 | 	sub	objptr, ##43232
02c70                 | LR__0130
02c70                 | ' 
02c70                 | ' ' abbreviated command has to be at the position addptr
02c70                 | ' 
02c70                 | ' 
02c70                 | ' 
02c70                 | ' '2b determine a type of the line
02c70                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
02c70     54 00 00 FF 
02c74     E0 E4 05 F1 | 	add	objptr, ##43232
02c78     F2 12 02 FB | 	rdlong	arg01, objptr
02c7c     54 00 00 FF 
02c80     E0 E4 85 F1 | 	sub	objptr, ##43232
02c84     EC 1D B0 FD | 	call	#_isdec
02c88     00 FA 0D F2 | 	cmp	result1, #0 wz
02c8c     30 00 90 AD |  if_e	jmp	#LR__0131
02c90     54 00 00 FF 
02c94     E0 E4 05 F1 | 	add	objptr, ##43232
02c98     F2 12 02 FB | 	rdlong	arg01, objptr
02c9c     54 00 00 FF 
02ca0     E0 E4 85 F1 | 	sub	objptr, ##43232
02ca4     00 14 06 F6 | 	mov	arg02, #0
02ca8     30 92 B1 FD | 	call	#__system____builtin_atoi
02cac     7A 00 00 FF 
02cb0     64 E5 05 F1 | 	add	objptr, ##62820
02cb4     F2 FA 61 FC | 	wrlong	result1, objptr
02cb8     7A 00 00 FF 
02cbc     64 E5 85 F1 | 	sub	objptr, ##62820
02cc0                 | LR__0131
02cc0                 | ' 
02cc0                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104
02cc0     7A 00 00 FF 
02cc4     64 E5 05 F1 | 	add	objptr, ##62820
02cc8     F2 1E 02 FB | 	rdlong	local01, objptr
02ccc     7A 00 00 FF 
02cd0     64 E5 85 F1 | 	sub	objptr, ##62820
02cd4     01 1E 16 F2 | 	cmp	local01, #1 wc
02cd8     3C 00 90 CD |  if_b	jmp	#LR__0132
02cdc     01 3A 0E F2 | 	cmp	local15, #1 wz
02ce0     56 00 00 AF 
02ce4     F8 E4 05 A1 |  if_e	add	objptr, ##44280
02ce8     F2 26 02 AB |  if_e	rdlong	local05, objptr
02cec     56 00 00 AF 
02cf0     F8 E4 85 A1 |  if_e	sub	objptr, ##44280
02cf4     03 26 0E A2 |  if_e	cmp	local05, #3 wz
02cf8     1C 00 90 5D |  if_ne	jmp	#LR__0132
02cfc     7A 00 00 FF 
02d00     64 E5 05 F1 | 	add	objptr, ##62820
02d04     F2 12 02 FB | 	rdlong	arg01, objptr
02d08     7A 00 00 FF 
02d0c     64 E5 85 F1 | 	sub	objptr, ##62820
02d10     84 1E B0 FD | 	call	#_deleteline
02d14     4C 05 90 FD | 	jmp	#LR__0149
02d18                 | LR__0132
02d18                 | ' 
02d18                 | ' if linenum>0  andalso (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  
02d18     7A 00 00 FF 
02d1c     64 E5 05 F1 | 	add	objptr, ##62820
02d20     F2 1E 02 FB | 	rdlong	local01, objptr
02d24     7A 00 00 FF 
02d28     64 E5 85 F1 | 	sub	objptr, ##62820
02d2c     01 1E 16 F2 | 	cmp	local01, #1 wc
02d30     EC 00 90 CD |  if_b	jmp	#LR__0135
02d34     56 00 00 FF 
02d38     F8 E4 05 F1 | 	add	objptr, ##44280
02d3c     F2 26 02 FB | 	rdlong	local05, objptr
02d40     56 00 00 FF 
02d44     F8 E4 85 F1 | 	sub	objptr, ##44280
02d48     13 2F 0A F6 | 	mov	local09, local05 wz
02d4c     20 00 90 AD |  if_e	jmp	#LR__0133
02d50     56 00 00 FF 
02d54     F8 E4 05 F1 | 	add	objptr, ##44280
02d58     F2 32 02 FB | 	rdlong	local11, objptr
02d5c     56 00 00 FF 
02d60     F8 E4 85 F1 | 	sub	objptr, ##44280
02d64     19 29 02 F6 | 	mov	local06, local11
02d68     03 28 0E F2 | 	cmp	local06, #3 wz
02d6c     B0 00 90 5D |  if_ne	jmp	#LR__0135
02d70                 | LR__0133
02d70     54 00 00 FF 
02d74     F4 E4 05 F1 | 	add	objptr, ##43252
02d78     F2 36 02 FB | 	rdlong	local13, objptr
02d7c     54 00 00 FF 
02d80     F4 E4 85 F1 | 	sub	objptr, ##43252
02d84     1B 31 02 F6 | 	mov	local10, local13
02d88     1B 30 0E F2 | 	cmp	local10, #27 wz
02d8c     90 00 90 AD |  if_e	jmp	#LR__0135
02d90     7A 00 00 FF 
02d94     64 E5 05 F1 | 	add	objptr, ##62820
02d98     F2 12 02 FB | 	rdlong	arg01, objptr
02d9c     24 00 00 FF 
02da0     6C E4 85 F1 | 	sub	objptr, ##18540
02da4     F2 16 02 FB | 	rdlong	arg03, objptr
02da8     56 00 00 FF 
02dac     F8 E4 85 F1 | 	sub	objptr, ##44280
02db0     00 14 06 F6 | 	mov	arg02, #0
02db4     28 31 B0 FD | 	call	#_compile
02db8     FD 20 0A F6 | 	mov	local02, result1 wz
02dbc                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02dbc                 | '   if err<>0 then printerror(err): goto 104
02dbc     0C 00 90 AD |  if_e	jmp	#LR__0134
02dc0     10 13 02 F6 | 	mov	arg01, local02
02dc4     8C 2A B1 FD | 	call	#_printerror
02dc8     98 04 90 FD | 	jmp	#LR__0149
02dcc                 | LR__0134
02dcc                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
02dcc     7A 00 00 FF 
02dd0     90 E5 05 F1 | 	add	objptr, ##62864
02dd4     F2 12 02 FB | 	rdlong	arg01, objptr
02dd8     7A 00 00 FF 
02ddc     90 E5 85 F1 | 	sub	objptr, ##62864
02de0     41 01 00 FF 
02de4     C4 15 06 F6 | 	mov	arg02, ##@LR__4339
02de8     B4 5F B1 FD | 	call	#__system___string_cmp
02dec     00 FA 0D F2 | 	cmp	result1, #0 wz
02df0     70 04 90 AD |  if_e	jmp	#LR__0149
02df4     7A 00 00 FF 
02df8     90 E5 05 F1 | 	add	objptr, ##62864
02dfc     F2 1E 02 FB | 	rdlong	local01, objptr
02e00     24 00 00 FF 
02e04     A0 E4 85 F1 | 	sub	objptr, ##18592
02e08     F2 1E 62 FC | 	wrlong	local01, objptr
02e0c     08 E4 05 F1 | 	add	objptr, #8
02e10     F2 08 68 FC | 	wrlong	#4, objptr
02e14     56 00 00 FF 
02e18     F8 E4 85 F1 | 	sub	objptr, ##44280
02e1c     50 DC 9F FD | 	jmp	#LR__0020
02e20                 | LR__0135
02e20                 | '       							
02e20                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 
02e20     7A 00 00 FF 
02e24     64 E5 05 F1 | 	add	objptr, ##62820
02e28     F2 1E 02 FB | 	rdlong	local01, objptr
02e2c     7A 00 00 FF 
02e30     64 E5 85 F1 | 	sub	objptr, ##62820
02e34     01 1E 16 F2 | 	cmp	local01, #1 wc
02e38     EC 00 90 CD |  if_b	jmp	#LR__0138
02e3c     56 00 00 FF 
02e40     F8 E4 05 F1 | 	add	objptr, ##44280
02e44     F2 26 02 FB | 	rdlong	local05, objptr
02e48     56 00 00 FF 
02e4c     F8 E4 85 F1 | 	sub	objptr, ##44280
02e50     01 26 0E F2 | 	cmp	local05, #1 wz
02e54     20 00 90 AD |  if_e	jmp	#LR__0136
02e58     56 00 00 FF 
02e5c     F8 E4 05 F1 | 	add	objptr, ##44280
02e60     F2 32 02 FB | 	rdlong	local11, objptr
02e64     56 00 00 FF 
02e68     F8 E4 85 F1 | 	sub	objptr, ##44280
02e6c     19 29 02 F6 | 	mov	local06, local11
02e70     02 28 0E F2 | 	cmp	local06, #2 wz
02e74     B0 00 90 5D |  if_ne	jmp	#LR__0138
02e78                 | LR__0136
02e78     54 00 00 FF 
02e7c     EC E4 05 F1 | 	add	objptr, ##43244
02e80     F2 36 02 FB | 	rdlong	local13, objptr
02e84     54 00 00 FF 
02e88     EC E4 85 F1 | 	sub	objptr, ##43244
02e8c     1B 31 02 F6 | 	mov	local10, local13
02e90     1B 30 0E F2 | 	cmp	local10, #27 wz
02e94     90 00 90 AD |  if_e	jmp	#LR__0138
02e98     7A 00 00 FF 
02e9c     64 E5 05 F1 | 	add	objptr, ##62820
02ea0     F2 12 02 FB | 	rdlong	arg01, objptr
02ea4     24 00 00 FF 
02ea8     6C E4 85 F1 | 	sub	objptr, ##18540
02eac     F2 16 02 FB | 	rdlong	arg03, objptr
02eb0     56 00 00 FF 
02eb4     F8 E4 85 F1 | 	sub	objptr, ##44280
02eb8     00 14 06 F6 | 	mov	arg02, #0
02ebc     20 30 B0 FD | 	call	#_compile
02ec0     FD 20 0A F6 | 	mov	local02, result1 wz
02ec4                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02ec4                 | '   if err<>0 then printerror(err): goto 104
02ec4     0C 00 90 AD |  if_e	jmp	#LR__0137
02ec8     10 13 02 F6 | 	mov	arg01, local02
02ecc     84 29 B1 FD | 	call	#_printerror
02ed0     90 03 90 FD | 	jmp	#LR__0149
02ed4                 | LR__0137
02ed4                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
02ed4     7A 00 00 FF 
02ed8     90 E5 05 F1 | 	add	objptr, ##62864
02edc     F2 12 02 FB | 	rdlong	arg01, objptr
02ee0     7A 00 00 FF 
02ee4     90 E5 85 F1 | 	sub	objptr, ##62864
02ee8     41 01 00 FF 
02eec     C5 15 06 F6 | 	mov	arg02, ##@LR__4340
02ef0     AC 5E B1 FD | 	call	#__system___string_cmp
02ef4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ef8     68 03 90 AD |  if_e	jmp	#LR__0149
02efc     7A 00 00 FF 
02f00     90 E5 05 F1 | 	add	objptr, ##62864
02f04     F2 1E 02 FB | 	rdlong	local01, objptr
02f08     24 00 00 FF 
02f0c     A0 E4 85 F1 | 	sub	objptr, ##18592
02f10     F2 1E 62 FC | 	wrlong	local01, objptr
02f14     08 E4 05 F1 | 	add	objptr, #8
02f18     F2 08 68 FC | 	wrlong	#4, objptr
02f1c     56 00 00 FF 
02f20     F8 E4 85 F1 | 	sub	objptr, ##44280
02f24     48 DB 9F FD | 	jmp	#LR__0020
02f28                 | LR__0138
02f28                 | ' 							 
02f28                 | ' if linenum>0 andalso (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  
02f28     7A 00 00 FF 
02f2c     64 E5 05 F1 | 	add	objptr, ##62820
02f30     F2 1E 02 FB | 	rdlong	local01, objptr
02f34     7A 00 00 FF 
02f38     64 E5 85 F1 | 	sub	objptr, ##62820
02f3c     01 1E 16 F2 | 	cmp	local01, #1 wc
02f40     D4 00 90 CD |  if_b	jmp	#LR__0140
02f44     56 00 00 FF 
02f48     F8 E4 05 F1 | 	add	objptr, ##44280
02f4c     F2 26 0A FB | 	rdlong	local05, objptr wz
02f50     56 00 00 FF 
02f54     F8 E4 85 F1 | 	sub	objptr, ##44280
02f58     20 00 90 AD |  if_e	jmp	#LR__0139
02f5c     56 00 00 FF 
02f60     F8 E4 05 F1 | 	add	objptr, ##44280
02f64     F2 32 02 FB | 	rdlong	local11, objptr
02f68     56 00 00 FF 
02f6c     F8 E4 85 F1 | 	sub	objptr, ##44280
02f70     19 29 02 F6 | 	mov	local06, local11
02f74     03 28 0E F2 | 	cmp	local06, #3 wz
02f78     9C 00 90 5D |  if_ne	jmp	#LR__0140
02f7c                 | LR__0139
02f7c     54 00 00 FF 
02f80     F4 E4 05 F1 | 	add	objptr, ##43252
02f84     F2 36 02 FB | 	rdlong	local13, objptr
02f88     54 00 00 FF 
02f8c     F4 E4 85 F1 | 	sub	objptr, ##43252
02f90     1B 31 02 F6 | 	mov	local10, local13
02f94     1B 30 0E F2 | 	cmp	local10, #27 wz
02f98     7C 00 90 5D |  if_ne	jmp	#LR__0140
02f9c     7A 00 00 FF 
02fa0     64 E5 05 F1 | 	add	objptr, ##62820
02fa4     F2 12 02 FB | 	rdlong	arg01, objptr
02fa8     24 00 00 FF 
02fac     6C E4 85 F1 | 	sub	objptr, ##18540
02fb0     F2 16 02 FB | 	rdlong	arg03, objptr
02fb4     56 00 00 FF 
02fb8     F8 E4 85 F1 | 	sub	objptr, ##44280
02fbc     00 14 06 F6 | 	mov	arg02, #0
02fc0     EC 2F B0 FD | 	call	#_compile_assign
02fc4                 | '   compile_assign(linenum,0,cont)': print "called compile_assign with cont=";cont, "line$=";line$
02fc4                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
02fc4     7A 00 00 FF 
02fc8     90 E5 05 F1 | 	add	objptr, ##62864
02fcc     F2 12 02 FB | 	rdlong	arg01, objptr
02fd0     7A 00 00 FF 
02fd4     90 E5 85 F1 | 	sub	objptr, ##62864
02fd8     41 01 00 FF 
02fdc     C6 15 06 F6 | 	mov	arg02, ##@LR__4341
02fe0     BC 5D B1 FD | 	call	#__system___string_cmp
02fe4     00 FA 0D F2 | 	cmp	result1, #0 wz
02fe8     78 02 90 AD |  if_e	jmp	#LR__0149
02fec     7A 00 00 FF 
02ff0     90 E5 05 F1 | 	add	objptr, ##62864
02ff4     F2 1E 02 FB | 	rdlong	local01, objptr
02ff8     24 00 00 FF 
02ffc     A0 E4 85 F1 | 	sub	objptr, ##18592
03000     F2 1E 62 FC | 	wrlong	local01, objptr
03004     08 E4 05 F1 | 	add	objptr, #8
03008     F2 08 68 FC | 	wrlong	#4, objptr
0300c     56 00 00 FF 
03010     F8 E4 85 F1 | 	sub	objptr, ##44280
03014     58 DA 9F FD | 	jmp	#LR__0020
03018                 | LR__0140
03018                 | '     							 
03018                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 
03018     7A 00 00 FF 
0301c     64 E5 05 F1 | 	add	objptr, ##62820
03020     F2 1E 02 FB | 	rdlong	local01, objptr
03024     7A 00 00 FF 
03028     64 E5 85 F1 | 	sub	objptr, ##62820
0302c     01 1E 16 F2 | 	cmp	local01, #1 wc
03030     CC 00 90 CD |  if_b	jmp	#LR__0141
03034     56 00 00 FF 
03038     F8 E4 05 F1 | 	add	objptr, ##44280
0303c     F2 26 02 FB | 	rdlong	local05, objptr
03040     56 00 00 FF 
03044     F8 E4 85 F1 | 	sub	objptr, ##44280
03048     01 26 0E F2 | 	cmp	local05, #1 wz
0304c     56 00 00 5F 
03050     F8 E4 05 51 |  if_ne	add	objptr, ##44280
03054     F2 32 02 5B |  if_ne	rdlong	local11, objptr
03058     56 00 00 5F 
0305c     F8 E4 85 51 |  if_ne	sub	objptr, ##44280
03060     02 32 0E 52 |  if_ne	cmp	local11, #2 wz
03064     54 00 00 AF 
03068     EC E4 05 A1 |  if_e	add	objptr, ##43244
0306c     F2 36 02 AB |  if_e	rdlong	local13, objptr
03070     54 00 00 AF 
03074     EC E4 85 A1 |  if_e	sub	objptr, ##43244
03078     1B 31 02 A6 |  if_e	mov	local10, local13
0307c     1B 30 0E A2 |  if_e	cmp	local10, #27 wz
03080     7C 00 90 5D |  if_ne	jmp	#LR__0141
03084     7A 00 00 FF 
03088     64 E5 05 F1 | 	add	objptr, ##62820
0308c     F2 12 02 FB | 	rdlong	arg01, objptr
03090     24 00 00 FF 
03094     6C E4 85 F1 | 	sub	objptr, ##18540
03098     F2 16 02 FB | 	rdlong	arg03, objptr
0309c     56 00 00 FF 
030a0     F8 E4 85 F1 | 	sub	objptr, ##44280
030a4     00 14 06 F6 | 	mov	arg02, #0
030a8     04 2F B0 FD | 	call	#_compile_assign
030ac                 | '   compile_assign(linenum,0,cont) ': print "called compile_assign with cont=";cont, "line$=";line$
030ac                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								'<-- TODO: add a line to a program
030ac     7A 00 00 FF 
030b0     90 E5 05 F1 | 	add	objptr, ##62864
030b4     F2 12 02 FB | 	rdlong	arg01, objptr
030b8     7A 00 00 FF 
030bc     90 E5 85 F1 | 	sub	objptr, ##62864
030c0     41 01 00 FF 
030c4     C7 15 06 F6 | 	mov	arg02, ##@LR__4342
030c8     D4 5C B1 FD | 	call	#__system___string_cmp
030cc     00 FA 0D F2 | 	cmp	result1, #0 wz
030d0     90 01 90 AD |  if_e	jmp	#LR__0149
030d4     7A 00 00 FF 
030d8     90 E5 05 F1 | 	add	objptr, ##62864
030dc     F2 1E 02 FB | 	rdlong	local01, objptr
030e0     24 00 00 FF 
030e4     A0 E4 85 F1 | 	sub	objptr, ##18592
030e8     F2 1E 62 FC | 	wrlong	local01, objptr
030ec     08 E4 05 F1 | 	add	objptr, #8
030f0     F2 08 68 FC | 	wrlong	#4, objptr
030f4     56 00 00 FF 
030f8     F8 E4 85 F1 | 	sub	objptr, ##44280
030fc     70 D9 9F FD | 	jmp	#LR__0020
03100                 | LR__0141
03100                 | ' 
03100                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_eq then compile_assign(0) : goto 103    					' assign a variable
03100     54 00 00 FF 
03104     E4 E4 05 F1 | 	add	objptr, ##43236
03108     F2 1E 02 FB | 	rdlong	local01, objptr
0310c     54 00 00 FF 
03110     E4 E4 85 F1 | 	sub	objptr, ##43236
03114     01 00 00 FF 
03118     04 1E 0E F2 | 	cmp	local01, ##516 wz
0311c     54 00 00 AF 
03120     EC E4 05 A1 |  if_e	add	objptr, ##43244
03124     F2 2E 02 AB |  if_e	rdlong	local09, objptr
03128     54 00 00 AF 
0312c     EC E4 85 A1 |  if_e	sub	objptr, ##43244
03130     1B 2E 0E A2 |  if_e	cmp	local09, #27 wz
03134     14 00 90 5D |  if_ne	jmp	#LR__0142
03138     00 12 06 F6 | 	mov	arg01, #0
0313c     00 14 06 F6 | 	mov	arg02, #0
03140     00 16 06 F6 | 	mov	arg03, #0
03144     68 2E B0 FD | 	call	#_compile_assign
03148     90 00 90 FD | 	jmp	#LR__0144
0314c                 | LR__0142
0314c                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_rpar then print " User functions and arrays not yet implemented" : goto 101
0314c     54 00 00 FF 
03150     E4 E4 05 F1 | 	add	objptr, ##43236
03154     F2 1E 02 FB | 	rdlong	local01, objptr
03158     54 00 00 FF 
0315c     E4 E4 85 F1 | 	sub	objptr, ##43236
03160     01 00 00 FF 
03164     04 1E 0E F2 | 	cmp	local01, ##516 wz
03168     54 00 00 AF 
0316c     EC E4 05 A1 |  if_e	add	objptr, ##43244
03170     F2 2E 02 AB |  if_e	rdlong	local09, objptr
03174     54 00 00 AF 
03178     EC E4 85 A1 |  if_e	sub	objptr, ##43244
0317c     14 2E 0E A2 |  if_e	cmp	local09, #20 wz
03180     44 00 90 5D |  if_ne	jmp	#LR__0143
03184     00 12 06 F6 | 	mov	arg01, #0
03188     F0 B4 B1 FD | 	call	#__system___getiolock_0423
0318c     FD 12 02 F6 | 	mov	arg01, result1
03190     E4 5B B1 FD | 	call	#__system___lockmem
03194     41 01 00 FF 
03198     C8 15 06 F6 | 	mov	arg02, ##@LR__4343
0319c     00 12 06 F6 | 	mov	arg01, #0
031a0     00 16 06 F6 | 	mov	arg03, #0
031a4     C4 68 B1 FD | 	call	#__system___basic_print_string
031a8     00 12 06 F6 | 	mov	arg01, #0
031ac     0A 14 06 F6 | 	mov	arg02, #10
031b0     00 16 06 F6 | 	mov	arg03, #0
031b4     5C 68 B1 FD | 	call	#__system___basic_print_char
031b8     00 12 06 F6 | 	mov	arg01, #0
031bc     BC B4 B1 FD | 	call	#__system___getiolock_0423
031c0     FD 00 68 FC | 	wrlong	#0, result1
031c4     7C 00 90 FD | 	jmp	#LR__0148
031c8                 | LR__0143
031c8     00 12 06 F6 | 	mov	arg01, #0
031cc     00 14 06 F6 | 	mov	arg02, #0
031d0     00 16 06 F6 | 	mov	arg03, #0
031d4     08 2D B0 FD | 	call	#_compile
031d8     FD 20 02 F6 | 	mov	local02, result1
031dc                 | LR__0144
031dc                 | ' 
031dc                 | ' ' if we are here, this is not a program line to add, so try to execute this
031dc                 | ' 
031dc                 | ' err=compile(0) : '' execute(0) ' print "  this is a command to execute"  ''' param=line to compile
031dc                 | ' 103  'for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, : next i
031dc                 | ' if err=0 then execute_line() else printerror(err)
031dc     00 20 0E F2 | 	cmp	local02, #0 wz
031e0     0C 00 90 5D |  if_ne	jmp	#LR__0145
031e4     00 12 06 F6 | 	mov	arg01, #0
031e8     F4 65 B0 FD | 	call	#_execute_line
031ec     08 00 90 FD | 	jmp	#LR__0146
031f0                 | LR__0145
031f0     10 13 02 F6 | 	mov	arg01, local02
031f4     5C 26 B1 FD | 	call	#_printerror
031f8                 | LR__0146
031f8                 | ' if rest$<>"" then line$=rest$:  goto 108 
031f8     7A 00 00 FF 
031fc     90 E5 05 F1 | 	add	objptr, ##62864
03200     F2 12 02 FB | 	rdlong	arg01, objptr
03204     7A 00 00 FF 
03208     90 E5 85 F1 | 	sub	objptr, ##62864
0320c     41 01 00 FF 
03210     F7 15 06 F6 | 	mov	arg02, ##@LR__4344
03214     88 5B B1 FD | 	call	#__system___string_cmp
03218     00 FA 0D F2 | 	cmp	result1, #0 wz
0321c     24 00 90 AD |  if_e	jmp	#LR__0147
03220     7A 00 00 FF 
03224     90 E5 05 F1 | 	add	objptr, ##62864
03228     F2 1E 02 FB | 	rdlong	local01, objptr
0322c     24 00 00 FF 
03230     A0 E4 85 F1 | 	sub	objptr, ##18592
03234     F2 1E 62 FC | 	wrlong	local01, objptr
03238     56 00 00 FF 
0323c     F0 E4 85 F1 | 	sub	objptr, ##44272
03240     2C D8 9F FD | 	jmp	#LR__0020
03244                 | LR__0147
03244                 | LR__0148
03244     41 01 00 FF 
03248     F8 13 06 F6 | 	mov	arg01, ##@LR__4345
0324c                 | ' 
0324c                 | ' write(text)
0324c     00 4B B1 FD | 	call	#_hg010b_spin2_write
03250                 | ' crlf
03250     5C 4C B1 FD | 	call	#_hg010b_spin2_crlf
03254     41 01 00 FF 
03258     F9 13 06 F6 | 	mov	arg01, ##@LR__4346
0325c                 | ' 
0325c                 | ' write(text)
0325c     F0 4A B1 FD | 	call	#_hg010b_spin2_write
03260                 | ' crlf
03260     4C 4C B1 FD | 	call	#_hg010b_spin2_crlf
03264                 | LR__0149
03264     A7 F0 03 F6 | 	mov	ptra, fp
03268     B2 00 A0 FD | 	call	#popregs_
0326c                 | _interpret_ret
0326c     2D 00 64 FD | 	ret
03270                 | 
03270                 | ' 
03270                 | ' 
03270                 | ' '------------------------------ Helper functions for the tokenizer -------------------------------------------
03270                 | ' 
03270                 | ' function isoperator(s as string) as ubyte
03270                 | _isoperator
03270     01 4A 05 F6 | 	mov	COUNT_, #1
03274     A8 00 A0 FD | 	call	#pushregs_
03278                 | ' 
03278                 | ' select case s
03278     09 1F 02 F6 | 	mov	local01, arg01
0327c     41 01 00 FF 
03280     FF 15 06 F6 | 	mov	arg02, ##@LR__4347
03284     0F 13 02 F6 | 	mov	arg01, local01
03288     14 5B B1 FD | 	call	#__system___string_cmp
0328c     00 FA 0D F2 | 	cmp	result1, #0 wz
03290     FC 01 90 AD |  if_e	jmp	#LR__0150
03294     42 01 00 FF 
03298     01 14 06 F6 | 	mov	arg02, ##@LR__4348
0329c     0F 13 02 F6 | 	mov	arg01, local01
032a0     FC 5A B1 FD | 	call	#__system___string_cmp
032a4     00 FA 0D F2 | 	cmp	result1, #0 wz
032a8     EC 01 90 AD |  if_e	jmp	#LR__0151
032ac     42 01 00 FF 
032b0     03 14 06 F6 | 	mov	arg02, ##@LR__4349
032b4     0F 13 02 F6 | 	mov	arg01, local01
032b8     E4 5A B1 FD | 	call	#__system___string_cmp
032bc     00 FA 0D F2 | 	cmp	result1, #0 wz
032c0     DC 01 90 AD |  if_e	jmp	#LR__0152
032c4     42 01 00 FF 
032c8     06 14 06 F6 | 	mov	arg02, ##@LR__4350
032cc     0F 13 02 F6 | 	mov	arg01, local01
032d0     CC 5A B1 FD | 	call	#__system___string_cmp
032d4     00 FA 0D F2 | 	cmp	result1, #0 wz
032d8     CC 01 90 AD |  if_e	jmp	#LR__0153
032dc     42 01 00 FF 
032e0     0A 14 06 F6 | 	mov	arg02, ##@LR__4351
032e4     0F 13 02 F6 | 	mov	arg01, local01
032e8     B4 5A B1 FD | 	call	#__system___string_cmp
032ec     00 FA 0D F2 | 	cmp	result1, #0 wz
032f0     BC 01 90 AD |  if_e	jmp	#LR__0154
032f4     42 01 00 FF 
032f8     0C 14 06 F6 | 	mov	arg02, ##@LR__4352
032fc     0F 13 02 F6 | 	mov	arg01, local01
03300     9C 5A B1 FD | 	call	#__system___string_cmp
03304     00 FA 0D F2 | 	cmp	result1, #0 wz
03308     AC 01 90 AD |  if_e	jmp	#LR__0155
0330c     42 01 00 FF 
03310     0E 14 06 F6 | 	mov	arg02, ##@LR__4353
03314     0F 13 02 F6 | 	mov	arg01, local01
03318     84 5A B1 FD | 	call	#__system___string_cmp
0331c     00 FA 0D F2 | 	cmp	result1, #0 wz
03320     9C 01 90 AD |  if_e	jmp	#LR__0156
03324     42 01 00 FF 
03328     12 14 06 F6 | 	mov	arg02, ##@LR__4354
0332c     0F 13 02 F6 | 	mov	arg01, local01
03330     6C 5A B1 FD | 	call	#__system___string_cmp
03334     00 FA 0D F2 | 	cmp	result1, #0 wz
03338     8C 01 90 AD |  if_e	jmp	#LR__0157
0333c     42 01 00 FF 
03340     16 14 06 F6 | 	mov	arg02, ##@LR__4355
03344     0F 13 02 F6 | 	mov	arg01, local01
03348     54 5A B1 FD | 	call	#__system___string_cmp
0334c     00 FA 0D F2 | 	cmp	result1, #0 wz
03350     7C 01 90 AD |  if_e	jmp	#LR__0158
03354     42 01 00 FF 
03358     1A 14 06 F6 | 	mov	arg02, ##@LR__4356
0335c     0F 13 02 F6 | 	mov	arg01, local01
03360     3C 5A B1 FD | 	call	#__system___string_cmp
03364     00 FA 0D F2 | 	cmp	result1, #0 wz
03368     6C 01 90 AD |  if_e	jmp	#LR__0159
0336c     42 01 00 FF 
03370     1E 14 06 F6 | 	mov	arg02, ##@LR__4357
03374     0F 13 02 F6 | 	mov	arg01, local01
03378     24 5A B1 FD | 	call	#__system___string_cmp
0337c     00 FA 0D F2 | 	cmp	result1, #0 wz
03380     5C 01 90 AD |  if_e	jmp	#LR__0160
03384     42 01 00 FF 
03388     22 14 06 F6 | 	mov	arg02, ##@LR__4358
0338c     0F 13 02 F6 | 	mov	arg01, local01
03390     0C 5A B1 FD | 	call	#__system___string_cmp
03394     00 FA 0D F2 | 	cmp	result1, #0 wz
03398     4C 01 90 AD |  if_e	jmp	#LR__0161
0339c     42 01 00 FF 
033a0     24 14 06 F6 | 	mov	arg02, ##@LR__4359
033a4     0F 13 02 F6 | 	mov	arg01, local01
033a8     F4 59 B1 FD | 	call	#__system___string_cmp
033ac     00 FA 0D F2 | 	cmp	result1, #0 wz
033b0     3C 01 90 AD |  if_e	jmp	#LR__0162
033b4     42 01 00 FF 
033b8     28 14 06 F6 | 	mov	arg02, ##@LR__4360
033bc     0F 13 02 F6 | 	mov	arg01, local01
033c0     DC 59 B1 FD | 	call	#__system___string_cmp
033c4     00 FA 0D F2 | 	cmp	result1, #0 wz
033c8     2C 01 90 AD |  if_e	jmp	#LR__0163
033cc     42 01 00 FF 
033d0     2A 14 06 F6 | 	mov	arg02, ##@LR__4361
033d4     0F 13 02 F6 | 	mov	arg01, local01
033d8     C4 59 B1 FD | 	call	#__system___string_cmp
033dc     00 FA 0D F2 | 	cmp	result1, #0 wz
033e0     1C 01 90 AD |  if_e	jmp	#LR__0164
033e4     42 01 00 FF 
033e8     2C 14 06 F6 | 	mov	arg02, ##@LR__4362
033ec     0F 13 02 F6 | 	mov	arg01, local01
033f0     AC 59 B1 FD | 	call	#__system___string_cmp
033f4     00 FA 0D F2 | 	cmp	result1, #0 wz
033f8     0C 01 90 AD |  if_e	jmp	#LR__0165
033fc     42 01 00 FF 
03400     2F 14 06 F6 | 	mov	arg02, ##@LR__4363
03404     0F 13 02 F6 | 	mov	arg01, local01
03408     94 59 B1 FD | 	call	#__system___string_cmp
0340c     00 FA 0D F2 | 	cmp	result1, #0 wz
03410     FC 00 90 AD |  if_e	jmp	#LR__0166
03414     42 01 00 FF 
03418     32 14 06 F6 | 	mov	arg02, ##@LR__4364
0341c     0F 13 02 F6 | 	mov	arg01, local01
03420     7C 59 B1 FD | 	call	#__system___string_cmp
03424     00 FA 0D F2 | 	cmp	result1, #0 wz
03428     EC 00 90 AD |  if_e	jmp	#LR__0167
0342c     42 01 00 FF 
03430     34 14 06 F6 | 	mov	arg02, ##@LR__4365
03434     0F 13 02 F6 | 	mov	arg01, local01
03438     64 59 B1 FD | 	call	#__system___string_cmp
0343c     00 FA 0D F2 | 	cmp	result1, #0 wz
03440     DC 00 90 AD |  if_e	jmp	#LR__0168
03444     42 01 00 FF 
03448     36 14 06 F6 | 	mov	arg02, ##@LR__4366
0344c     0F 13 02 F6 | 	mov	arg01, local01
03450     4C 59 B1 FD | 	call	#__system___string_cmp
03454     00 FA 0D F2 | 	cmp	result1, #0 wz
03458     CC 00 90 AD |  if_e	jmp	#LR__0169
0345c     42 01 00 FF 
03460     39 14 06 F6 | 	mov	arg02, ##@LR__4367
03464     0F 13 02 F6 | 	mov	arg01, local01
03468     34 59 B1 FD | 	call	#__system___string_cmp
0346c     00 FA 0D F2 | 	cmp	result1, #0 wz
03470     BC 00 90 AD |  if_e	jmp	#LR__0170
03474     42 01 00 FF 
03478     3C 14 06 F6 | 	mov	arg02, ##@LR__4368
0347c     0F 13 02 F6 | 	mov	arg01, local01
03480     1C 59 B1 FD | 	call	#__system___string_cmp
03484     00 FA 0D F2 | 	cmp	result1, #0 wz
03488     AC 00 90 AD |  if_e	jmp	#LR__0171
0348c     B0 00 90 FD | 	jmp	#LR__0172
03490                 | LR__0150
03490     01 FA 05 F6 | 	mov	result1, #1
03494     AC 00 90 FD | 	jmp	#LR__0173
03498                 | LR__0151
03498     02 FA 05 F6 | 	mov	result1, #2
0349c     A4 00 90 FD | 	jmp	#LR__0173
034a0                 | LR__0152
034a0     03 FA 05 F6 | 	mov	result1, #3
034a4     9C 00 90 FD | 	jmp	#LR__0173
034a8                 | LR__0153
034a8     04 FA 05 F6 | 	mov	result1, #4
034ac     94 00 90 FD | 	jmp	#LR__0173
034b0                 | LR__0154
034b0     05 FA 05 F6 | 	mov	result1, #5
034b4     8C 00 90 FD | 	jmp	#LR__0173
034b8                 | LR__0155
034b8     06 FA 05 F6 | 	mov	result1, #6
034bc     84 00 90 FD | 	jmp	#LR__0173
034c0                 | LR__0156
034c0     07 FA 05 F6 | 	mov	result1, #7
034c4     7C 00 90 FD | 	jmp	#LR__0173
034c8                 | LR__0157
034c8     08 FA 05 F6 | 	mov	result1, #8
034cc     74 00 90 FD | 	jmp	#LR__0173
034d0                 | LR__0158
034d0     09 FA 05 F6 | 	mov	result1, #9
034d4     6C 00 90 FD | 	jmp	#LR__0173
034d8                 | LR__0159
034d8     0A FA 05 F6 | 	mov	result1, #10
034dc     64 00 90 FD | 	jmp	#LR__0173
034e0                 | LR__0160
034e0     0B FA 05 F6 | 	mov	result1, #11
034e4     5C 00 90 FD | 	jmp	#LR__0173
034e8                 | LR__0161
034e8     0C FA 05 F6 | 	mov	result1, #12
034ec     54 00 90 FD | 	jmp	#LR__0173
034f0                 | LR__0162
034f0     0D FA 05 F6 | 	mov	result1, #13
034f4     4C 00 90 FD | 	jmp	#LR__0173
034f8                 | LR__0163
034f8     0E FA 05 F6 | 	mov	result1, #14
034fc     44 00 90 FD | 	jmp	#LR__0173
03500                 | LR__0164
03500     1B FA 05 F6 | 	mov	result1, #27
03504     3C 00 90 FD | 	jmp	#LR__0173
03508                 | LR__0165
03508     27 FA 05 F6 | 	mov	result1, #39
0350c     34 00 90 FD | 	jmp	#LR__0173
03510                 | LR__0166
03510     26 FA 05 F6 | 	mov	result1, #38
03514     2C 00 90 FD | 	jmp	#LR__0173
03518                 | LR__0167
03518     10 FA 05 F6 | 	mov	result1, #16
0351c     24 00 90 FD | 	jmp	#LR__0173
03520                 | LR__0168
03520     0F FA 05 F6 | 	mov	result1, #15
03524     1C 00 90 FD | 	jmp	#LR__0173
03528                 | LR__0169
03528     2A FA 05 F6 | 	mov	result1, #42
0352c     14 00 90 FD | 	jmp	#LR__0173
03530                 | LR__0170
03530     28 FA 05 F6 | 	mov	result1, #40
03534     0C 00 90 FD | 	jmp	#LR__0173
03538                 | LR__0171
03538     29 FA 05 F6 | 	mov	result1, #41
0353c     04 00 90 FD | 	jmp	#LR__0173
03540                 | LR__0172
03540     00 FA 05 F6 | 	mov	result1, #0
03544                 | LR__0173
03544     A7 F0 03 F6 | 	mov	ptra, fp
03548     B2 00 A0 FD | 	call	#popregs_
0354c                 | _isoperator_ret
0354c     2D 00 64 FD | 	ret
03550                 | 
03550                 | ' 
03550                 | ' function isseparator(s as string) as ubyte
03550                 | _isseparator
03550     01 4A 05 F6 | 	mov	COUNT_, #1
03554     A8 00 A0 FD | 	call	#pushregs_
03558                 | ' 
03558                 | ' select case s
03558     09 1F 02 F6 | 	mov	local01, arg01
0355c     42 01 00 FF 
03560     3F 14 06 F6 | 	mov	arg02, ##@LR__4369
03564     0F 13 02 F6 | 	mov	arg01, local01
03568     34 58 B1 FD | 	call	#__system___string_cmp
0356c     00 FA 0D F2 | 	cmp	result1, #0 wz
03570     54 01 90 AD |  if_e	jmp	#LR__0180
03574     42 01 00 FF 
03578     41 14 06 F6 | 	mov	arg02, ##@LR__4370
0357c     0F 13 02 F6 | 	mov	arg01, local01
03580     1C 58 B1 FD | 	call	#__system___string_cmp
03584     00 FA 0D F2 | 	cmp	result1, #0 wz
03588     44 01 90 AD |  if_e	jmp	#LR__0181
0358c     42 01 00 FF 
03590     43 14 06 F6 | 	mov	arg02, ##@LR__4371
03594     0F 13 02 F6 | 	mov	arg01, local01
03598     04 58 B1 FD | 	call	#__system___string_cmp
0359c     00 FA 0D F2 | 	cmp	result1, #0 wz
035a0     34 01 90 AD |  if_e	jmp	#LR__0182
035a4     42 01 00 FF 
035a8     45 14 06 F6 | 	mov	arg02, ##@LR__4372
035ac     0F 13 02 F6 | 	mov	arg01, local01
035b0     EC 57 B1 FD | 	call	#__system___string_cmp
035b4     00 FA 0D F2 | 	cmp	result1, #0 wz
035b8     24 01 90 AD |  if_e	jmp	#LR__0183
035bc     42 01 00 FF 
035c0     47 14 06 F6 | 	mov	arg02, ##@LR__4373
035c4     0F 13 02 F6 | 	mov	arg01, local01
035c8     D4 57 B1 FD | 	call	#__system___string_cmp
035cc     00 FA 0D F2 | 	cmp	result1, #0 wz
035d0     14 01 90 AD |  if_e	jmp	#LR__0184
035d4     42 01 00 FF 
035d8     49 14 06 F6 | 	mov	arg02, ##@LR__4374
035dc     0F 13 02 F6 | 	mov	arg01, local01
035e0     BC 57 B1 FD | 	call	#__system___string_cmp
035e4     00 FA 0D F2 | 	cmp	result1, #0 wz
035e8     04 01 90 AD |  if_e	jmp	#LR__0185
035ec     42 01 00 FF 
035f0     4B 14 06 F6 | 	mov	arg02, ##@LR__4375
035f4     0F 13 02 F6 | 	mov	arg01, local01
035f8     A4 57 B1 FD | 	call	#__system___string_cmp
035fc     00 FA 0D F2 | 	cmp	result1, #0 wz
03600     F4 00 90 AD |  if_e	jmp	#LR__0186
03604     42 01 00 FF 
03608     4D 14 06 F6 | 	mov	arg02, ##@LR__4376
0360c     0F 13 02 F6 | 	mov	arg01, local01
03610     8C 57 B1 FD | 	call	#__system___string_cmp
03614     00 FA 0D F2 | 	cmp	result1, #0 wz
03618     E4 00 90 AD |  if_e	jmp	#LR__0187
0361c     42 01 00 FF 
03620     4F 14 06 F6 | 	mov	arg02, ##@LR__4377
03624     0F 13 02 F6 | 	mov	arg01, local01
03628     74 57 B1 FD | 	call	#__system___string_cmp
0362c     00 FA 0D F2 | 	cmp	result1, #0 wz
03630     D4 00 90 AD |  if_e	jmp	#LR__0188
03634     42 01 00 FF 
03638     51 14 06 F6 | 	mov	arg02, ##@LR__4378
0363c     0F 13 02 F6 | 	mov	arg01, local01
03640     5C 57 B1 FD | 	call	#__system___string_cmp
03644     00 FA 0D F2 | 	cmp	result1, #0 wz
03648     C4 00 90 AD |  if_e	jmp	#LR__0189
0364c     42 01 00 FF 
03650     53 14 06 F6 | 	mov	arg02, ##@LR__4379
03654     0F 13 02 F6 | 	mov	arg01, local01
03658     44 57 B1 FD | 	call	#__system___string_cmp
0365c     00 FA 0D F2 | 	cmp	result1, #0 wz
03660     B4 00 90 AD |  if_e	jmp	#LR__0190
03664     42 01 00 FF 
03668     55 14 06 F6 | 	mov	arg02, ##@LR__4380
0366c     0F 13 02 F6 | 	mov	arg01, local01
03670     2C 57 B1 FD | 	call	#__system___string_cmp
03674     00 FA 0D F2 | 	cmp	result1, #0 wz
03678     A4 00 90 AD |  if_e	jmp	#LR__0191
0367c     42 01 00 FF 
03680     57 14 06 F6 | 	mov	arg02, ##@LR__4381
03684     0F 13 02 F6 | 	mov	arg01, local01
03688     14 57 B1 FD | 	call	#__system___string_cmp
0368c     00 FA 0D F2 | 	cmp	result1, #0 wz
03690     94 00 90 AD |  if_e	jmp	#LR__0192
03694     42 01 00 FF 
03698     59 14 06 F6 | 	mov	arg02, ##@LR__4382
0369c     0F 13 02 F6 | 	mov	arg01, local01
036a0     FC 56 B1 FD | 	call	#__system___string_cmp
036a4     00 FA 0D F2 | 	cmp	result1, #0 wz
036a8     84 00 90 AD |  if_e	jmp	#LR__0193
036ac     42 01 00 FF 
036b0     5B 14 06 F6 | 	mov	arg02, ##@LR__4383
036b4     0F 13 02 F6 | 	mov	arg01, local01
036b8     E4 56 B1 FD | 	call	#__system___string_cmp
036bc     00 FA 0D F2 | 	cmp	result1, #0 wz
036c0     74 00 90 AD |  if_e	jmp	#LR__0194
036c4     78 00 90 FD | 	jmp	#LR__0195
036c8                 | LR__0180
036c8     01 FA 05 F6 | 	mov	result1, #1
036cc     74 00 90 FD | 	jmp	#LR__0196
036d0                 | LR__0181
036d0     02 FA 05 F6 | 	mov	result1, #2
036d4     6C 00 90 FD | 	jmp	#LR__0196
036d8                 | LR__0182
036d8     1B FA 05 F6 | 	mov	result1, #27
036dc     64 00 90 FD | 	jmp	#LR__0196
036e0                 | LR__0183
036e0     11 FA 05 F6 | 	mov	result1, #17
036e4     5C 00 90 FD | 	jmp	#LR__0196
036e8                 | LR__0184
036e8     05 FA 05 F6 | 	mov	result1, #5
036ec     54 00 90 FD | 	jmp	#LR__0196
036f0                 | LR__0185
036f0     06 FA 05 F6 | 	mov	result1, #6
036f4     4C 00 90 FD | 	jmp	#LR__0196
036f8                 | LR__0186
036f8     12 FA 05 F6 | 	mov	result1, #18
036fc     44 00 90 FD | 	jmp	#LR__0196
03700                 | LR__0187
03700     13 FA 05 F6 | 	mov	result1, #19
03704     3C 00 90 FD | 	jmp	#LR__0196
03708                 | LR__0188
03708     0C FA 05 F6 | 	mov	result1, #12
0370c     34 00 90 FD | 	jmp	#LR__0196
03710                 | LR__0189
03710     14 FA 05 F6 | 	mov	result1, #20
03714     2C 00 90 FD | 	jmp	#LR__0196
03718                 | LR__0190
03718     15 FA 05 F6 | 	mov	result1, #21
0371c     24 00 90 FD | 	jmp	#LR__0196
03720                 | LR__0191
03720     16 FA 05 F6 | 	mov	result1, #22
03724     1C 00 90 FD | 	jmp	#LR__0196
03728                 | LR__0192
03728     FF FB 05 F6 | 	mov	result1, #511
0372c     14 00 90 FD | 	jmp	#LR__0196
03730                 | LR__0193
03730     0F FA 05 F6 | 	mov	result1, #15
03734     0C 00 90 FD | 	jmp	#LR__0196
03738                 | LR__0194
03738     10 FA 05 F6 | 	mov	result1, #16
0373c     04 00 90 FD | 	jmp	#LR__0196
03740                 | LR__0195
03740     00 FA 05 F6 | 	mov	result1, #0
03744                 | LR__0196
03744     A7 F0 03 F6 | 	mov	ptra, fp
03748     B2 00 A0 FD | 	call	#popregs_
0374c                 | _isseparator_ret
0374c     2D 00 64 FD | 	ret
03750                 | 
03750                 | ' 
03750                 | ' 
03750                 | ' function iscommand(s as string) as ubyte
03750                 | _iscommand
03750     01 4A 05 F6 | 	mov	COUNT_, #1
03754     A8 00 A0 FD | 	call	#pushregs_
03758                 | ' 
03758                 | ' select case s
03758     09 1F 02 F6 | 	mov	local01, arg01
0375c     42 01 00 FF 
03760     5F 14 06 F6 | 	mov	arg02, ##@LR__4385
03764     0F 13 02 F6 | 	mov	arg01, local01
03768     34 56 B1 FD | 	call	#__system___string_cmp
0376c     00 FA 0D F2 | 	cmp	result1, #0 wz
03770     3C 07 90 AD |  if_e	jmp	#LR__0200
03774     42 01 00 FF 
03778     64 14 06 F6 | 	mov	arg02, ##@LR__4386
0377c     0F 13 02 F6 | 	mov	arg01, local01
03780     1C 56 B1 FD | 	call	#__system___string_cmp
03784     00 FA 0D F2 | 	cmp	result1, #0 wz
03788     2C 07 90 AD |  if_e	jmp	#LR__0201
0378c     42 01 00 FF 
03790     67 14 06 F6 | 	mov	arg02, ##@LR__4387
03794     0F 13 02 F6 | 	mov	arg01, local01
03798     04 56 B1 FD | 	call	#__system___string_cmp
0379c     00 FA 0D F2 | 	cmp	result1, #0 wz
037a0     1C 07 90 AD |  if_e	jmp	#LR__0202
037a4     42 01 00 FF 
037a8     6B 14 06 F6 | 	mov	arg02, ##@LR__4388
037ac     0F 13 02 F6 | 	mov	arg01, local01
037b0     EC 55 B1 FD | 	call	#__system___string_cmp
037b4     00 FA 0D F2 | 	cmp	result1, #0 wz
037b8     0C 07 90 AD |  if_e	jmp	#LR__0203
037bc     42 01 00 FF 
037c0     70 14 06 F6 | 	mov	arg02, ##@LR__4389
037c4     0F 13 02 F6 | 	mov	arg01, local01
037c8     D4 55 B1 FD | 	call	#__system___string_cmp
037cc     00 FA 0D F2 | 	cmp	result1, #0 wz
037d0     FC 06 90 AD |  if_e	jmp	#LR__0204
037d4     42 01 00 FF 
037d8     74 14 06 F6 | 	mov	arg02, ##@LR__4390
037dc     0F 13 02 F6 | 	mov	arg01, local01
037e0     BC 55 B1 FD | 	call	#__system___string_cmp
037e4     00 FA 0D F2 | 	cmp	result1, #0 wz
037e8     EC 06 90 AD |  if_e	jmp	#LR__0205
037ec     42 01 00 FF 
037f0     7B 14 06 F6 | 	mov	arg02, ##@LR__4391
037f4     0F 13 02 F6 | 	mov	arg01, local01
037f8     A4 55 B1 FD | 	call	#__system___string_cmp
037fc     00 FA 0D F2 | 	cmp	result1, #0 wz
03800     DC 06 90 AD |  if_e	jmp	#LR__0206
03804     42 01 00 FF 
03808     7F 14 06 F6 | 	mov	arg02, ##@LR__4392
0380c     0F 13 02 F6 | 	mov	arg01, local01
03810     8C 55 B1 FD | 	call	#__system___string_cmp
03814     00 FA 0D F2 | 	cmp	result1, #0 wz
03818     CC 06 90 AD |  if_e	jmp	#LR__0207
0381c     42 01 00 FF 
03820     85 14 06 F6 | 	mov	arg02, ##@LR__4393
03824     0F 13 02 F6 | 	mov	arg01, local01
03828     74 55 B1 FD | 	call	#__system___string_cmp
0382c     00 FA 0D F2 | 	cmp	result1, #0 wz
03830     BC 06 90 AD |  if_e	jmp	#LR__0208
03834     42 01 00 FF 
03838     89 14 06 F6 | 	mov	arg02, ##@LR__4394
0383c     0F 13 02 F6 | 	mov	arg01, local01
03840     5C 55 B1 FD | 	call	#__system___string_cmp
03844     00 FA 0D F2 | 	cmp	result1, #0 wz
03848     AC 06 90 AD |  if_e	jmp	#LR__0209
0384c     42 01 00 FF 
03850     8F 14 06 F6 | 	mov	arg02, ##@LR__4395
03854     0F 13 02 F6 | 	mov	arg01, local01
03858     44 55 B1 FD | 	call	#__system___string_cmp
0385c     00 FA 0D F2 | 	cmp	result1, #0 wz
03860     9C 06 90 AD |  if_e	jmp	#LR__0210
03864     42 01 00 FF 
03868     92 14 06 F6 | 	mov	arg02, ##@LR__4396
0386c     0F 13 02 F6 | 	mov	arg01, local01
03870     2C 55 B1 FD | 	call	#__system___string_cmp
03874     00 FA 0D F2 | 	cmp	result1, #0 wz
03878     8C 06 90 AD |  if_e	jmp	#LR__0211
0387c     42 01 00 FF 
03880     98 14 06 F6 | 	mov	arg02, ##@LR__4397
03884     0F 13 02 F6 | 	mov	arg01, local01
03888     14 55 B1 FD | 	call	#__system___string_cmp
0388c     00 FA 0D F2 | 	cmp	result1, #0 wz
03890     7C 06 90 AD |  if_e	jmp	#LR__0212
03894     42 01 00 FF 
03898     9C 14 06 F6 | 	mov	arg02, ##@LR__4398
0389c     0F 13 02 F6 | 	mov	arg01, local01
038a0     FC 54 B1 FD | 	call	#__system___string_cmp
038a4     00 FA 0D F2 | 	cmp	result1, #0 wz
038a8     6C 06 90 AD |  if_e	jmp	#LR__0213
038ac     42 01 00 FF 
038b0     A3 14 06 F6 | 	mov	arg02, ##@LR__4399
038b4     0F 13 02 F6 | 	mov	arg01, local01
038b8     E4 54 B1 FD | 	call	#__system___string_cmp
038bc     00 FA 0D F2 | 	cmp	result1, #0 wz
038c0     5C 06 90 AD |  if_e	jmp	#LR__0214
038c4     42 01 00 FF 
038c8     AA 14 06 F6 | 	mov	arg02, ##@LR__4400
038cc     0F 13 02 F6 | 	mov	arg01, local01
038d0     CC 54 B1 FD | 	call	#__system___string_cmp
038d4     00 FA 0D F2 | 	cmp	result1, #0 wz
038d8     4C 06 90 AD |  if_e	jmp	#LR__0215
038dc     42 01 00 FF 
038e0     B1 14 06 F6 | 	mov	arg02, ##@LR__4401
038e4     0F 13 02 F6 | 	mov	arg01, local01
038e8     B4 54 B1 FD | 	call	#__system___string_cmp
038ec     00 FA 0D F2 | 	cmp	result1, #0 wz
038f0     3C 06 90 AD |  if_e	jmp	#LR__0216
038f4     42 01 00 FF 
038f8     BB 14 06 F6 | 	mov	arg02, ##@LR__4402
038fc     0F 13 02 F6 | 	mov	arg01, local01
03900     9C 54 B1 FD | 	call	#__system___string_cmp
03904     00 FA 0D F2 | 	cmp	result1, #0 wz
03908     2C 06 90 AD |  if_e	jmp	#LR__0217
0390c     42 01 00 FF 
03910     BF 14 06 F6 | 	mov	arg02, ##@LR__4403
03914     0F 13 02 F6 | 	mov	arg01, local01
03918     84 54 B1 FD | 	call	#__system___string_cmp
0391c     00 FA 0D F2 | 	cmp	result1, #0 wz
03920     1C 06 90 AD |  if_e	jmp	#LR__0218
03924     42 01 00 FF 
03928     C3 14 06 F6 | 	mov	arg02, ##@LR__4404
0392c     0F 13 02 F6 | 	mov	arg01, local01
03930     6C 54 B1 FD | 	call	#__system___string_cmp
03934     00 FA 0D F2 | 	cmp	result1, #0 wz
03938     0C 06 90 AD |  if_e	jmp	#LR__0219
0393c     42 01 00 FF 
03940     C7 14 06 F6 | 	mov	arg02, ##@LR__4405
03944     0F 13 02 F6 | 	mov	arg01, local01
03948     54 54 B1 FD | 	call	#__system___string_cmp
0394c     00 FA 0D F2 | 	cmp	result1, #0 wz
03950     FC 05 90 AD |  if_e	jmp	#LR__0220
03954     42 01 00 FF 
03958     CB 14 06 F6 | 	mov	arg02, ##@LR__4406
0395c     0F 13 02 F6 | 	mov	arg01, local01
03960     3C 54 B1 FD | 	call	#__system___string_cmp
03964     00 FA 0D F2 | 	cmp	result1, #0 wz
03968     EC 05 90 AD |  if_e	jmp	#LR__0221
0396c     42 01 00 FF 
03970     D0 14 06 F6 | 	mov	arg02, ##@LR__4407
03974     0F 13 02 F6 | 	mov	arg01, local01
03978     24 54 B1 FD | 	call	#__system___string_cmp
0397c     00 FA 0D F2 | 	cmp	result1, #0 wz
03980     DC 05 90 AD |  if_e	jmp	#LR__0222
03984     42 01 00 FF 
03988     D4 14 06 F6 | 	mov	arg02, ##@LR__4408
0398c     0F 13 02 F6 | 	mov	arg01, local01
03990     0C 54 B1 FD | 	call	#__system___string_cmp
03994     00 FA 0D F2 | 	cmp	result1, #0 wz
03998     CC 05 90 AD |  if_e	jmp	#LR__0223
0399c     42 01 00 FF 
039a0     D9 14 06 F6 | 	mov	arg02, ##@LR__4409
039a4     0F 13 02 F6 | 	mov	arg01, local01
039a8     F4 53 B1 FD | 	call	#__system___string_cmp
039ac     00 FA 0D F2 | 	cmp	result1, #0 wz
039b0     BC 05 90 AD |  if_e	jmp	#LR__0224
039b4     42 01 00 FF 
039b8     E1 14 06 F6 | 	mov	arg02, ##@LR__4410
039bc     0F 13 02 F6 | 	mov	arg01, local01
039c0     DC 53 B1 FD | 	call	#__system___string_cmp
039c4     00 FA 0D F2 | 	cmp	result1, #0 wz
039c8     AC 05 90 AD |  if_e	jmp	#LR__0225
039cc     42 01 00 FF 
039d0     E5 14 06 F6 | 	mov	arg02, ##@LR__4411
039d4     0F 13 02 F6 | 	mov	arg01, local01
039d8     C4 53 B1 FD | 	call	#__system___string_cmp
039dc     00 FA 0D F2 | 	cmp	result1, #0 wz
039e0     9C 05 90 AD |  if_e	jmp	#LR__0226
039e4     42 01 00 FF 
039e8     EA 14 06 F6 | 	mov	arg02, ##@LR__4412
039ec     0F 13 02 F6 | 	mov	arg01, local01
039f0     AC 53 B1 FD | 	call	#__system___string_cmp
039f4     00 FA 0D F2 | 	cmp	result1, #0 wz
039f8     8C 05 90 AD |  if_e	jmp	#LR__0227
039fc     42 01 00 FF 
03a00     EE 14 06 F6 | 	mov	arg02, ##@LR__4413
03a04     0F 13 02 F6 | 	mov	arg01, local01
03a08     94 53 B1 FD | 	call	#__system___string_cmp
03a0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a10     7C 05 90 AD |  if_e	jmp	#LR__0228
03a14     42 01 00 FF 
03a18     F3 14 06 F6 | 	mov	arg02, ##@LR__4414
03a1c     0F 13 02 F6 | 	mov	arg01, local01
03a20     7C 53 B1 FD | 	call	#__system___string_cmp
03a24     00 FA 0D F2 | 	cmp	result1, #0 wz
03a28     6C 05 90 AD |  if_e	jmp	#LR__0229
03a2c     42 01 00 FF 
03a30     F7 14 06 F6 | 	mov	arg02, ##@LR__4415
03a34     0F 13 02 F6 | 	mov	arg01, local01
03a38     64 53 B1 FD | 	call	#__system___string_cmp
03a3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a40     5C 05 90 AD |  if_e	jmp	#LR__0230
03a44     42 01 00 FF 
03a48     FA 14 06 F6 | 	mov	arg02, ##@LR__4416
03a4c     0F 13 02 F6 | 	mov	arg01, local01
03a50     4C 53 B1 FD | 	call	#__system___string_cmp
03a54     00 FA 0D F2 | 	cmp	result1, #0 wz
03a58     4C 05 90 AD |  if_e	jmp	#LR__0231
03a5c     42 01 00 FF 
03a60     00 15 06 F6 | 	mov	arg02, ##@LR__4417
03a64     0F 13 02 F6 | 	mov	arg01, local01
03a68     34 53 B1 FD | 	call	#__system___string_cmp
03a6c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a70     3C 05 90 AD |  if_e	jmp	#LR__0232
03a74     42 01 00 FF 
03a78     04 15 06 F6 | 	mov	arg02, ##@LR__4418
03a7c     0F 13 02 F6 | 	mov	arg01, local01
03a80     1C 53 B1 FD | 	call	#__system___string_cmp
03a84     00 FA 0D F2 | 	cmp	result1, #0 wz
03a88     2C 05 90 AD |  if_e	jmp	#LR__0233
03a8c     42 01 00 FF 
03a90     09 15 06 F6 | 	mov	arg02, ##@LR__4419
03a94     0F 13 02 F6 | 	mov	arg01, local01
03a98     04 53 B1 FD | 	call	#__system___string_cmp
03a9c     00 FA 0D F2 | 	cmp	result1, #0 wz
03aa0     1C 05 90 AD |  if_e	jmp	#LR__0234
03aa4     42 01 00 FF 
03aa8     0C 15 06 F6 | 	mov	arg02, ##@LR__4420
03aac     0F 13 02 F6 | 	mov	arg01, local01
03ab0     EC 52 B1 FD | 	call	#__system___string_cmp
03ab4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ab8     0C 05 90 AD |  if_e	jmp	#LR__0235
03abc     42 01 00 FF 
03ac0     0F 15 06 F6 | 	mov	arg02, ##@LR__4421
03ac4     0F 13 02 F6 | 	mov	arg01, local01
03ac8     D4 52 B1 FD | 	call	#__system___string_cmp
03acc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ad0     FC 04 90 AD |  if_e	jmp	#LR__0236
03ad4     42 01 00 FF 
03ad8     13 15 06 F6 | 	mov	arg02, ##@LR__4422
03adc     0F 13 02 F6 | 	mov	arg01, local01
03ae0     BC 52 B1 FD | 	call	#__system___string_cmp
03ae4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ae8     EC 04 90 AD |  if_e	jmp	#LR__0237
03aec     42 01 00 FF 
03af0     16 15 06 F6 | 	mov	arg02, ##@LR__4423
03af4     0F 13 02 F6 | 	mov	arg01, local01
03af8     A4 52 B1 FD | 	call	#__system___string_cmp
03afc     00 FA 0D F2 | 	cmp	result1, #0 wz
03b00     DC 04 90 AD |  if_e	jmp	#LR__0238
03b04     42 01 00 FF 
03b08     1A 15 06 F6 | 	mov	arg02, ##@LR__4424
03b0c     0F 13 02 F6 | 	mov	arg01, local01
03b10     8C 52 B1 FD | 	call	#__system___string_cmp
03b14     00 FA 0D F2 | 	cmp	result1, #0 wz
03b18     CC 04 90 AD |  if_e	jmp	#LR__0239
03b1c     42 01 00 FF 
03b20     1F 15 06 F6 | 	mov	arg02, ##@LR__4425
03b24     0F 13 02 F6 | 	mov	arg01, local01
03b28     74 52 B1 FD | 	call	#__system___string_cmp
03b2c     00 FA 0D F2 | 	cmp	result1, #0 wz
03b30     BC 04 90 AD |  if_e	jmp	#LR__0240
03b34     42 01 00 FF 
03b38     22 15 06 F6 | 	mov	arg02, ##@LR__4426
03b3c     0F 13 02 F6 | 	mov	arg01, local01
03b40     5C 52 B1 FD | 	call	#__system___string_cmp
03b44     00 FA 0D F2 | 	cmp	result1, #0 wz
03b48     AC 04 90 AD |  if_e	jmp	#LR__0241
03b4c     42 01 00 FF 
03b50     27 15 06 F6 | 	mov	arg02, ##@LR__4427
03b54     0F 13 02 F6 | 	mov	arg01, local01
03b58     44 52 B1 FD | 	call	#__system___string_cmp
03b5c     00 FA 0D F2 | 	cmp	result1, #0 wz
03b60     9C 04 90 AD |  if_e	jmp	#LR__0242
03b64     42 01 00 FF 
03b68     2B 15 06 F6 | 	mov	arg02, ##@LR__4428
03b6c     0F 13 02 F6 | 	mov	arg01, local01
03b70     2C 52 B1 FD | 	call	#__system___string_cmp
03b74     00 FA 0D F2 | 	cmp	result1, #0 wz
03b78     8C 04 90 AD |  if_e	jmp	#LR__0243
03b7c     42 01 00 FF 
03b80     30 15 06 F6 | 	mov	arg02, ##@LR__4429
03b84     0F 13 02 F6 | 	mov	arg01, local01
03b88     14 52 B1 FD | 	call	#__system___string_cmp
03b8c     00 FA 0D F2 | 	cmp	result1, #0 wz
03b90     7C 04 90 AD |  if_e	jmp	#LR__0244
03b94     42 01 00 FF 
03b98     33 15 06 F6 | 	mov	arg02, ##@LR__4430
03b9c     0F 13 02 F6 | 	mov	arg01, local01
03ba0     FC 51 B1 FD | 	call	#__system___string_cmp
03ba4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ba8     6C 04 90 AD |  if_e	jmp	#LR__0245
03bac     42 01 00 FF 
03bb0     39 15 06 F6 | 	mov	arg02, ##@LR__4431
03bb4     0F 13 02 F6 | 	mov	arg01, local01
03bb8     E4 51 B1 FD | 	call	#__system___string_cmp
03bbc     00 FA 0D F2 | 	cmp	result1, #0 wz
03bc0     5C 04 90 AD |  if_e	jmp	#LR__0246
03bc4     42 01 00 FF 
03bc8     3D 15 06 F6 | 	mov	arg02, ##@LR__4432
03bcc     0F 13 02 F6 | 	mov	arg01, local01
03bd0     CC 51 B1 FD | 	call	#__system___string_cmp
03bd4     00 FA 0D F2 | 	cmp	result1, #0 wz
03bd8     4C 04 90 AD |  if_e	jmp	#LR__0247
03bdc     42 01 00 FF 
03be0     42 15 06 F6 | 	mov	arg02, ##@LR__4433
03be4     0F 13 02 F6 | 	mov	arg01, local01
03be8     B4 51 B1 FD | 	call	#__system___string_cmp
03bec     00 FA 0D F2 | 	cmp	result1, #0 wz
03bf0     3C 04 90 AD |  if_e	jmp	#LR__0248
03bf4     42 01 00 FF 
03bf8     45 15 06 F6 | 	mov	arg02, ##@LR__4434
03bfc     0F 13 02 F6 | 	mov	arg01, local01
03c00     9C 51 B1 FD | 	call	#__system___string_cmp
03c04     00 FA 0D F2 | 	cmp	result1, #0 wz
03c08     2C 04 90 AD |  if_e	jmp	#LR__0249
03c0c     42 01 00 FF 
03c10     4B 15 06 F6 | 	mov	arg02, ##@LR__4435
03c14     0F 13 02 F6 | 	mov	arg01, local01
03c18     84 51 B1 FD | 	call	#__system___string_cmp
03c1c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c20     1C 04 90 AD |  if_e	jmp	#LR__0250
03c24     42 01 00 FF 
03c28     4E 15 06 F6 | 	mov	arg02, ##@LR__4436
03c2c     0F 13 02 F6 | 	mov	arg01, local01
03c30     6C 51 B1 FD | 	call	#__system___string_cmp
03c34     00 FA 0D F2 | 	cmp	result1, #0 wz
03c38     0C 04 90 AD |  if_e	jmp	#LR__0251
03c3c     42 01 00 FF 
03c40     57 15 06 F6 | 	mov	arg02, ##@LR__4437
03c44     0F 13 02 F6 | 	mov	arg01, local01
03c48     54 51 B1 FD | 	call	#__system___string_cmp
03c4c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c50     FC 03 90 AD |  if_e	jmp	#LR__0252
03c54     42 01 00 FF 
03c58     5D 15 06 F6 | 	mov	arg02, ##@LR__4438
03c5c     0F 13 02 F6 | 	mov	arg01, local01
03c60     3C 51 B1 FD | 	call	#__system___string_cmp
03c64     00 FA 0D F2 | 	cmp	result1, #0 wz
03c68     EC 03 90 AD |  if_e	jmp	#LR__0253
03c6c     42 01 00 FF 
03c70     63 15 06 F6 | 	mov	arg02, ##@LR__4439
03c74     0F 13 02 F6 | 	mov	arg01, local01
03c78     24 51 B1 FD | 	call	#__system___string_cmp
03c7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c80     DC 03 90 AD |  if_e	jmp	#LR__0254
03c84     42 01 00 FF 
03c88     6C 15 06 F6 | 	mov	arg02, ##@LR__4440
03c8c     0F 13 02 F6 | 	mov	arg01, local01
03c90     0C 51 B1 FD | 	call	#__system___string_cmp
03c94     00 FA 0D F2 | 	cmp	result1, #0 wz
03c98     CC 03 90 AD |  if_e	jmp	#LR__0255
03c9c     42 01 00 FF 
03ca0     76 15 06 F6 | 	mov	arg02, ##@LR__4441
03ca4     0F 13 02 F6 | 	mov	arg01, local01
03ca8     F4 50 B1 FD | 	call	#__system___string_cmp
03cac     00 FA 0D F2 | 	cmp	result1, #0 wz
03cb0     BC 03 90 AD |  if_e	jmp	#LR__0256
03cb4     42 01 00 FF 
03cb8     7F 15 06 F6 | 	mov	arg02, ##@LR__4442
03cbc     0F 13 02 F6 | 	mov	arg01, local01
03cc0     DC 50 B1 FD | 	call	#__system___string_cmp
03cc4     00 FA 0D F2 | 	cmp	result1, #0 wz
03cc8     AC 03 90 AD |  if_e	jmp	#LR__0257
03ccc     42 01 00 FF 
03cd0     84 15 06 F6 | 	mov	arg02, ##@LR__4443
03cd4     0F 13 02 F6 | 	mov	arg01, local01
03cd8     C4 50 B1 FD | 	call	#__system___string_cmp
03cdc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ce0     9C 03 90 AD |  if_e	jmp	#LR__0258
03ce4     42 01 00 FF 
03ce8     89 15 06 F6 | 	mov	arg02, ##@LR__4444
03cec     0F 13 02 F6 | 	mov	arg01, local01
03cf0     AC 50 B1 FD | 	call	#__system___string_cmp
03cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
03cf8     8C 03 90 AD |  if_e	jmp	#LR__0259
03cfc     42 01 00 FF 
03d00     8D 15 06 F6 | 	mov	arg02, ##@LR__4445
03d04     0F 13 02 F6 | 	mov	arg01, local01
03d08     94 50 B1 FD | 	call	#__system___string_cmp
03d0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d10     7C 03 90 AD |  if_e	jmp	#LR__0260
03d14     42 01 00 FF 
03d18     96 15 06 F6 | 	mov	arg02, ##@LR__4446
03d1c     0F 13 02 F6 | 	mov	arg01, local01
03d20     7C 50 B1 FD | 	call	#__system___string_cmp
03d24     00 FA 0D F2 | 	cmp	result1, #0 wz
03d28     6C 03 90 AD |  if_e	jmp	#LR__0261
03d2c     42 01 00 FF 
03d30     9B 15 06 F6 | 	mov	arg02, ##@LR__4447
03d34     0F 13 02 F6 | 	mov	arg01, local01
03d38     64 50 B1 FD | 	call	#__system___string_cmp
03d3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d40     5C 03 90 AD |  if_e	jmp	#LR__0262
03d44     42 01 00 FF 
03d48     A1 15 06 F6 | 	mov	arg02, ##@LR__4448
03d4c     0F 13 02 F6 | 	mov	arg01, local01
03d50     4C 50 B1 FD | 	call	#__system___string_cmp
03d54     00 FA 0D F2 | 	cmp	result1, #0 wz
03d58     4C 03 90 AD |  if_e	jmp	#LR__0263
03d5c     42 01 00 FF 
03d60     A3 15 06 F6 | 	mov	arg02, ##@LR__4449
03d64     0F 13 02 F6 | 	mov	arg01, local01
03d68     34 50 B1 FD | 	call	#__system___string_cmp
03d6c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d70     3C 03 90 AD |  if_e	jmp	#LR__0264
03d74     42 01 00 FF 
03d78     A7 15 06 F6 | 	mov	arg02, ##@LR__4450
03d7c     0F 13 02 F6 | 	mov	arg01, local01
03d80     1C 50 B1 FD | 	call	#__system___string_cmp
03d84     00 FA 0D F2 | 	cmp	result1, #0 wz
03d88     2C 03 90 AD |  if_e	jmp	#LR__0265
03d8c     42 01 00 FF 
03d90     AB 15 06 F6 | 	mov	arg02, ##@LR__4451
03d94     0F 13 02 F6 | 	mov	arg01, local01
03d98     04 50 B1 FD | 	call	#__system___string_cmp
03d9c     00 FA 0D F2 | 	cmp	result1, #0 wz
03da0     1C 03 90 AD |  if_e	jmp	#LR__0266
03da4     42 01 00 FF 
03da8     B0 15 06 F6 | 	mov	arg02, ##@LR__4452
03dac     0F 13 02 F6 | 	mov	arg01, local01
03db0     EC 4F B1 FD | 	call	#__system___string_cmp
03db4     00 FA 0D F2 | 	cmp	result1, #0 wz
03db8     0C 03 90 AD |  if_e	jmp	#LR__0267
03dbc     42 01 00 FF 
03dc0     B3 15 06 F6 | 	mov	arg02, ##@LR__4453
03dc4     0F 13 02 F6 | 	mov	arg01, local01
03dc8     D4 4F B1 FD | 	call	#__system___string_cmp
03dcc     00 FA 0D F2 | 	cmp	result1, #0 wz
03dd0     FC 02 90 AD |  if_e	jmp	#LR__0268
03dd4     42 01 00 FF 
03dd8     BA 15 06 F6 | 	mov	arg02, ##@LR__4454
03ddc     0F 13 02 F6 | 	mov	arg01, local01
03de0     BC 4F B1 FD | 	call	#__system___string_cmp
03de4     00 FA 0D F2 | 	cmp	result1, #0 wz
03de8     EC 02 90 AD |  if_e	jmp	#LR__0269
03dec     42 01 00 FF 
03df0     BE 15 06 F6 | 	mov	arg02, ##@LR__4455
03df4     0F 13 02 F6 | 	mov	arg01, local01
03df8     A4 4F B1 FD | 	call	#__system___string_cmp
03dfc     00 FA 0D F2 | 	cmp	result1, #0 wz
03e00     DC 02 90 AD |  if_e	jmp	#LR__0270
03e04     42 01 00 FF 
03e08     C3 15 06 F6 | 	mov	arg02, ##@LR__4456
03e0c     0F 13 02 F6 | 	mov	arg01, local01
03e10     8C 4F B1 FD | 	call	#__system___string_cmp
03e14     00 FA 0D F2 | 	cmp	result1, #0 wz
03e18     CC 02 90 AD |  if_e	jmp	#LR__0271
03e1c     42 01 00 FF 
03e20     CA 15 06 F6 | 	mov	arg02, ##@LR__4457
03e24     0F 13 02 F6 | 	mov	arg01, local01
03e28     74 4F B1 FD | 	call	#__system___string_cmp
03e2c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e30     BC 02 90 AD |  if_e	jmp	#LR__0272
03e34     42 01 00 FF 
03e38     D4 15 06 F6 | 	mov	arg02, ##@LR__4458
03e3c     0F 13 02 F6 | 	mov	arg01, local01
03e40     5C 4F B1 FD | 	call	#__system___string_cmp
03e44     00 FA 0D F2 | 	cmp	result1, #0 wz
03e48     AC 02 90 AD |  if_e	jmp	#LR__0273
03e4c     42 01 00 FF 
03e50     D8 15 06 F6 | 	mov	arg02, ##@LR__4459
03e54     0F 13 02 F6 | 	mov	arg01, local01
03e58     44 4F B1 FD | 	call	#__system___string_cmp
03e5c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e60     9C 02 90 AD |  if_e	jmp	#LR__0274
03e64     42 01 00 FF 
03e68     E0 15 06 F6 | 	mov	arg02, ##@LR__4460
03e6c     0F 13 02 F6 | 	mov	arg01, local01
03e70     2C 4F B1 FD | 	call	#__system___string_cmp
03e74     00 FA 0D F2 | 	cmp	result1, #0 wz
03e78     8C 02 90 AD |  if_e	jmp	#LR__0275
03e7c     42 01 00 FF 
03e80     E4 15 06 F6 | 	mov	arg02, ##@LR__4461
03e84     0F 13 02 F6 | 	mov	arg01, local01
03e88     14 4F B1 FD | 	call	#__system___string_cmp
03e8c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e90     7C 02 90 AD |  if_e	jmp	#LR__0276
03e94     42 01 00 FF 
03e98     EA 15 06 F6 | 	mov	arg02, ##@LR__4462
03e9c     0F 13 02 F6 | 	mov	arg01, local01
03ea0     FC 4E B1 FD | 	call	#__system___string_cmp
03ea4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ea8     6C 02 90 AD |  if_e	jmp	#LR__0277
03eac     70 02 90 FD | 	jmp	#LR__0278
03eb0                 | LR__0200
03eb0     5C FA 05 F6 | 	mov	result1, #92
03eb4     6C 02 90 FD | 	jmp	#LR__0279
03eb8                 | LR__0201
03eb8     5C FA 05 F6 | 	mov	result1, #92
03ebc     64 02 90 FD | 	jmp	#LR__0279
03ec0                 | LR__0202
03ec0     47 FA 05 F6 | 	mov	result1, #71
03ec4     5C 02 90 FD | 	jmp	#LR__0279
03ec8                 | LR__0203
03ec8     59 FA 05 F6 | 	mov	result1, #89
03ecc     54 02 90 FD | 	jmp	#LR__0279
03ed0                 | LR__0204
03ed0     59 FA 05 F6 | 	mov	result1, #89
03ed4     4C 02 90 FD | 	jmp	#LR__0279
03ed8                 | LR__0205
03ed8     45 FA 05 F6 | 	mov	result1, #69
03edc     44 02 90 FD | 	jmp	#LR__0279
03ee0                 | LR__0206
03ee0     45 FA 05 F6 | 	mov	result1, #69
03ee4     3C 02 90 FD | 	jmp	#LR__0279
03ee8                 | LR__0207
03ee8     69 FA 05 F6 | 	mov	result1, #105
03eec     34 02 90 FD | 	jmp	#LR__0279
03ef0                 | LR__0208
03ef0     40 FA 05 F6 | 	mov	result1, #64
03ef4     2C 02 90 FD | 	jmp	#LR__0279
03ef8                 | LR__0209
03ef8     49 FA 05 F6 | 	mov	result1, #73
03efc     24 02 90 FD | 	jmp	#LR__0279
03f00                 | LR__0210
03f00     49 FA 05 F6 | 	mov	result1, #73
03f04     1C 02 90 FD | 	jmp	#LR__0279
03f08                 | LR__0211
03f08     50 FA 05 F6 | 	mov	result1, #80
03f0c     14 02 90 FD | 	jmp	#LR__0279
03f10                 | LR__0212
03f10     50 FA 05 F6 | 	mov	result1, #80
03f14     0C 02 90 FD | 	jmp	#LR__0279
03f18                 | LR__0213
03f18     68 FA 05 F6 | 	mov	result1, #104
03f1c     04 02 90 FD | 	jmp	#LR__0279
03f20                 | LR__0214
03f20     73 FA 05 F6 | 	mov	result1, #115
03f24     FC 01 90 FD | 	jmp	#LR__0279
03f28                 | LR__0215
03f28     74 FA 05 F6 | 	mov	result1, #116
03f2c     F4 01 90 FD | 	jmp	#LR__0279
03f30                 | LR__0216
03f30     6C FA 05 F6 | 	mov	result1, #108
03f34     EC 01 90 FD | 	jmp	#LR__0279
03f38                 | LR__0217
03f38     6C FA 05 F6 | 	mov	result1, #108
03f3c     E4 01 90 FD | 	jmp	#LR__0279
03f40                 | LR__0218
03f40     89 FA 05 F6 | 	mov	result1, #137
03f44     DC 01 90 FD | 	jmp	#LR__0279
03f48                 | LR__0219
03f48     72 FA 05 F6 | 	mov	result1, #114
03f4c     D4 01 90 FD | 	jmp	#LR__0279
03f50                 | LR__0220
03f50     5D FA 05 F6 | 	mov	result1, #93
03f54     CC 01 90 FD | 	jmp	#LR__0279
03f58                 | LR__0221
03f58     43 FA 05 F6 | 	mov	result1, #67
03f5c     C4 01 90 FD | 	jmp	#LR__0279
03f60                 | LR__0222
03f60     43 FA 05 F6 | 	mov	result1, #67
03f64     BC 01 90 FD | 	jmp	#LR__0279
03f68                 | LR__0223
03f68     5A FA 05 F6 | 	mov	result1, #90
03f6c     B4 01 90 FD | 	jmp	#LR__0279
03f70                 | LR__0224
03f70     46 FA 05 F6 | 	mov	result1, #70
03f74     AC 01 90 FD | 	jmp	#LR__0279
03f78                 | LR__0225
03f78     46 FA 05 F6 | 	mov	result1, #70
03f7c     A4 01 90 FD | 	jmp	#LR__0279
03f80                 | LR__0226
03f80     71 FA 05 F6 | 	mov	result1, #113
03f84     9C 01 90 FD | 	jmp	#LR__0279
03f88                 | LR__0227
03f88     71 FA 05 F6 | 	mov	result1, #113
03f8c     94 01 90 FD | 	jmp	#LR__0279
03f90                 | LR__0228
03f90     60 FA 05 F6 | 	mov	result1, #96
03f94     8C 01 90 FD | 	jmp	#LR__0279
03f98                 | LR__0229
03f98     4A FA 05 F6 | 	mov	result1, #74
03f9c     84 01 90 FD | 	jmp	#LR__0279
03fa0                 | LR__0230
03fa0     4A FA 05 F6 | 	mov	result1, #74
03fa4     7C 01 90 FD | 	jmp	#LR__0279
03fa8                 | LR__0231
03fa8     48 FA 05 F6 | 	mov	result1, #72
03fac     74 01 90 FD | 	jmp	#LR__0279
03fb0                 | LR__0232
03fb0     48 FA 05 F6 | 	mov	result1, #72
03fb4     6C 01 90 FD | 	jmp	#LR__0279
03fb8                 | LR__0233
03fb8     4E FA 05 F6 | 	mov	result1, #78
03fbc     64 01 90 FD | 	jmp	#LR__0279
03fc0                 | LR__0234
03fc0     4E FA 05 F6 | 	mov	result1, #78
03fc4     5C 01 90 FD | 	jmp	#LR__0279
03fc8                 | LR__0235
03fc8     58 FA 05 F6 | 	mov	result1, #88
03fcc     54 01 90 FD | 	jmp	#LR__0279
03fd0                 | LR__0236
03fd0     5F FA 05 F6 | 	mov	result1, #95
03fd4     4C 01 90 FD | 	jmp	#LR__0279
03fd8                 | LR__0237
03fd8     5F FA 05 F6 | 	mov	result1, #95
03fdc     44 01 90 FD | 	jmp	#LR__0279
03fe0                 | LR__0238
03fe0     8A FA 05 F6 | 	mov	result1, #138
03fe4     3C 01 90 FD | 	jmp	#LR__0279
03fe8                 | LR__0239
03fe8     4C FA 05 F6 | 	mov	result1, #76
03fec     34 01 90 FD | 	jmp	#LR__0279
03ff0                 | LR__0240
03ff0     4C FA 05 F6 | 	mov	result1, #76
03ff4     2C 01 90 FD | 	jmp	#LR__0279
03ff8                 | LR__0241
03ff8     52 FA 05 F6 | 	mov	result1, #82
03ffc     24 01 90 FD | 	jmp	#LR__0279
04000                 | LR__0242
04000     52 FA 05 F6 | 	mov	result1, #82
04004     1C 01 90 FD | 	jmp	#LR__0279
04008                 | LR__0243
04008     61 FA 05 F6 | 	mov	result1, #97
0400c     14 01 90 FD | 	jmp	#LR__0279
04010                 | LR__0244
04010     61 FA 05 F6 | 	mov	result1, #97
04014     0C 01 90 FD | 	jmp	#LR__0279
04018                 | LR__0245
04018     63 FA 05 F6 | 	mov	result1, #99
0401c     04 01 90 FD | 	jmp	#LR__0279
04020                 | LR__0246
04020     41 FA 05 F6 | 	mov	result1, #65
04024     FC 00 90 FD | 	jmp	#LR__0279
04028                 | LR__0247
04028     4B FA 05 F6 | 	mov	result1, #75
0402c     F4 00 90 FD | 	jmp	#LR__0279
04030                 | LR__0248
04030     4B FA 05 F6 | 	mov	result1, #75
04034     EC 00 90 FD | 	jmp	#LR__0279
04038                 | LR__0249
04038     5E FA 05 F6 | 	mov	result1, #94
0403c     E4 00 90 FD | 	jmp	#LR__0279
04040                 | LR__0250
04040     5E FA 05 F6 | 	mov	result1, #94
04044     DC 00 90 FD | 	jmp	#LR__0279
04048                 | LR__0251
04048     7C FA 05 F6 | 	mov	result1, #124
0404c     D4 00 90 FD | 	jmp	#LR__0279
04050                 | LR__0252
04050     7E FA 05 F6 | 	mov	result1, #126
04054     CC 00 90 FD | 	jmp	#LR__0279
04058                 | LR__0253
04058     7D FA 05 F6 | 	mov	result1, #125
0405c     C4 00 90 FD | 	jmp	#LR__0279
04060                 | LR__0254
04060     7F FA 05 F6 | 	mov	result1, #127
04064     BC 00 90 FD | 	jmp	#LR__0279
04068                 | LR__0255
04068     80 FA 05 F6 | 	mov	result1, #128
0406c     B4 00 90 FD | 	jmp	#LR__0279
04070                 | LR__0256
04070     55 FA 05 F6 | 	mov	result1, #85
04074     AC 00 90 FD | 	jmp	#LR__0279
04078                 | LR__0257
04078     75 FA 05 F6 | 	mov	result1, #117
0407c     A4 00 90 FD | 	jmp	#LR__0279
04080                 | LR__0258
04080     42 FA 05 F6 | 	mov	result1, #66
04084     9C 00 90 FD | 	jmp	#LR__0279
04088                 | LR__0259
04088     42 FA 05 F6 | 	mov	result1, #66
0408c     94 00 90 FD | 	jmp	#LR__0279
04090                 | LR__0260
04090     81 FA 05 F6 | 	mov	result1, #129
04094     8C 00 90 FD | 	jmp	#LR__0279
04098                 | LR__0261
04098     81 FA 05 F6 | 	mov	result1, #129
0409c     84 00 90 FD | 	jmp	#LR__0279
040a0                 | LR__0262
040a0     44 FA 05 F6 | 	mov	result1, #68
040a4     7C 00 90 FD | 	jmp	#LR__0279
040a8                 | LR__0263
040a8     44 FA 05 F6 | 	mov	result1, #68
040ac     74 00 90 FD | 	jmp	#LR__0279
040b0                 | LR__0264
040b0     88 FA 05 F6 | 	mov	result1, #136
040b4     6C 00 90 FD | 	jmp	#LR__0279
040b8                 | LR__0265
040b8     4D FA 05 F6 | 	mov	result1, #77
040bc     64 00 90 FD | 	jmp	#LR__0279
040c0                 | LR__0266
040c0     51 FA 05 F6 | 	mov	result1, #81
040c4     5C 00 90 FD | 	jmp	#LR__0279
040c8                 | LR__0267
040c8     51 FA 05 F6 | 	mov	result1, #81
040cc     54 00 90 FD | 	jmp	#LR__0279
040d0                 | LR__0268
040d0     6D FA 05 F6 | 	mov	result1, #109
040d4     4C 00 90 FD | 	jmp	#LR__0279
040d8                 | LR__0269
040d8     6D FA 05 F6 | 	mov	result1, #109
040dc     44 00 90 FD | 	jmp	#LR__0279
040e0                 | LR__0270
040e0     5B FA 05 F6 | 	mov	result1, #91
040e4     3C 00 90 FD | 	jmp	#LR__0279
040e8                 | LR__0271
040e8     56 FA 05 F6 | 	mov	result1, #86
040ec     34 00 90 FD | 	jmp	#LR__0279
040f0                 | LR__0272
040f0     70 FA 05 F6 | 	mov	result1, #112
040f4     2C 00 90 FD | 	jmp	#LR__0279
040f8                 | LR__0273
040f8     70 FA 05 F6 | 	mov	result1, #112
040fc     24 00 90 FD | 	jmp	#LR__0279
04100                 | LR__0274
04100     57 FA 05 F6 | 	mov	result1, #87
04104     1C 00 90 FD | 	jmp	#LR__0279
04108                 | LR__0275
04108     57 FA 05 F6 | 	mov	result1, #87
0410c     14 00 90 FD | 	jmp	#LR__0279
04110                 | LR__0276
04110     77 FA 05 F6 | 	mov	result1, #119
04114     0C 00 90 FD | 	jmp	#LR__0279
04118                 | LR__0277
04118     78 FA 05 F6 | 	mov	result1, #120
0411c     04 00 90 FD | 	jmp	#LR__0279
04120                 | LR__0278
04120     00 FA 05 F6 | 	mov	result1, #0
04124                 | LR__0279
04124     A7 F0 03 F6 | 	mov	ptra, fp
04128     B2 00 A0 FD | 	call	#popregs_
0412c                 | _iscommand_ret
0412c     2D 00 64 FD | 	ret
04130                 | 
04130                 | ' 
04130                 | ' function isfunction(s as string) as ubyte
04130                 | _isfunction
04130     01 4A 05 F6 | 	mov	COUNT_, #1
04134     A8 00 A0 FD | 	call	#pushregs_
04138                 | ' 
04138                 | ' select case s
04138     09 1F 02 F6 | 	mov	local01, arg01
0413c     42 01 00 FF 
04140     F0 15 06 F6 | 	mov	arg02, ##@LR__4463
04144     0F 13 02 F6 | 	mov	arg01, local01
04148     54 4C B1 FD | 	call	#__system___string_cmp
0414c     00 FA 0D F2 | 	cmp	result1, #0 wz
04150     CC 01 90 AD |  if_e	jmp	#LR__0280
04154     42 01 00 FF 
04158     F5 15 06 F6 | 	mov	arg02, ##@LR__4464
0415c     0F 13 02 F6 | 	mov	arg01, local01
04160     3C 4C B1 FD | 	call	#__system___string_cmp
04164     00 FA 0D F2 | 	cmp	result1, #0 wz
04168     BC 01 90 AD |  if_e	jmp	#LR__0281
0416c     42 01 00 FF 
04170     FA 15 06 F6 | 	mov	arg02, ##@LR__4465
04174     0F 13 02 F6 | 	mov	arg01, local01
04178     24 4C B1 FD | 	call	#__system___string_cmp
0417c     00 FA 0D F2 | 	cmp	result1, #0 wz
04180     AC 01 90 AD |  if_e	jmp	#LR__0282
04184     42 01 00 FF 
04188     FE 15 06 F6 | 	mov	arg02, ##@LR__4466
0418c     0F 13 02 F6 | 	mov	arg01, local01
04190     0C 4C B1 FD | 	call	#__system___string_cmp
04194     00 FA 0D F2 | 	cmp	result1, #0 wz
04198     9C 01 90 AD |  if_e	jmp	#LR__0283
0419c     43 01 00 FF 
041a0     02 14 06 F6 | 	mov	arg02, ##@LR__4467
041a4     0F 13 02 F6 | 	mov	arg01, local01
041a8     F4 4B B1 FD | 	call	#__system___string_cmp
041ac     00 FA 0D F2 | 	cmp	result1, #0 wz
041b0     8C 01 90 AD |  if_e	jmp	#LR__0284
041b4     43 01 00 FF 
041b8     0B 14 06 F6 | 	mov	arg02, ##@LR__4468
041bc     0F 13 02 F6 | 	mov	arg01, local01
041c0     DC 4B B1 FD | 	call	#__system___string_cmp
041c4     00 FA 0D F2 | 	cmp	result1, #0 wz
041c8     7C 01 90 AD |  if_e	jmp	#LR__0285
041cc     43 01 00 FF 
041d0     0F 14 06 F6 | 	mov	arg02, ##@LR__4469
041d4     0F 13 02 F6 | 	mov	arg01, local01
041d8     C4 4B B1 FD | 	call	#__system___string_cmp
041dc     00 FA 0D F2 | 	cmp	result1, #0 wz
041e0     6C 01 90 AD |  if_e	jmp	#LR__0286
041e4     43 01 00 FF 
041e8     17 14 06 F6 | 	mov	arg02, ##@LR__4470
041ec     0F 13 02 F6 | 	mov	arg01, local01
041f0     AC 4B B1 FD | 	call	#__system___string_cmp
041f4     00 FA 0D F2 | 	cmp	result1, #0 wz
041f8     5C 01 90 AD |  if_e	jmp	#LR__0287
041fc     43 01 00 FF 
04200     1E 14 06 F6 | 	mov	arg02, ##@LR__4471
04204     0F 13 02 F6 | 	mov	arg01, local01
04208     94 4B B1 FD | 	call	#__system___string_cmp
0420c     00 FA 0D F2 | 	cmp	result1, #0 wz
04210     4C 01 90 AD |  if_e	jmp	#LR__0288
04214     43 01 00 FF 
04218     25 14 06 F6 | 	mov	arg02, ##@LR__4472
0421c     0F 13 02 F6 | 	mov	arg01, local01
04220     7C 4B B1 FD | 	call	#__system___string_cmp
04224     00 FA 0D F2 | 	cmp	result1, #0 wz
04228     3C 01 90 AD |  if_e	jmp	#LR__0289
0422c     43 01 00 FF 
04230     2C 14 06 F6 | 	mov	arg02, ##@LR__4473
04234     0F 13 02 F6 | 	mov	arg01, local01
04238     64 4B B1 FD | 	call	#__system___string_cmp
0423c     00 FA 0D F2 | 	cmp	result1, #0 wz
04240     2C 01 90 AD |  if_e	jmp	#LR__0290
04244     43 01 00 FF 
04248     33 14 06 F6 | 	mov	arg02, ##@LR__4474
0424c     0F 13 02 F6 | 	mov	arg01, local01
04250     4C 4B B1 FD | 	call	#__system___string_cmp
04254     00 FA 0D F2 | 	cmp	result1, #0 wz
04258     1C 01 90 AD |  if_e	jmp	#LR__0291
0425c     43 01 00 FF 
04260     3B 14 06 F6 | 	mov	arg02, ##@LR__4475
04264     0F 13 02 F6 | 	mov	arg01, local01
04268     34 4B B1 FD | 	call	#__system___string_cmp
0426c     00 FA 0D F2 | 	cmp	result1, #0 wz
04270     0C 01 90 AD |  if_e	jmp	#LR__0292
04274     43 01 00 FF 
04278     41 14 06 F6 | 	mov	arg02, ##@LR__4476
0427c     0F 13 02 F6 | 	mov	arg01, local01
04280     1C 4B B1 FD | 	call	#__system___string_cmp
04284     00 FA 0D F2 | 	cmp	result1, #0 wz
04288     FC 00 90 AD |  if_e	jmp	#LR__0293
0428c     43 01 00 FF 
04290     47 14 06 F6 | 	mov	arg02, ##@LR__4477
04294     0F 13 02 F6 | 	mov	arg01, local01
04298     04 4B B1 FD | 	call	#__system___string_cmp
0429c     00 FA 0D F2 | 	cmp	result1, #0 wz
042a0     EC 00 90 AD |  if_e	jmp	#LR__0294
042a4     43 01 00 FF 
042a8     4B 14 06 F6 | 	mov	arg02, ##@LR__4478
042ac     0F 13 02 F6 | 	mov	arg01, local01
042b0     EC 4A B1 FD | 	call	#__system___string_cmp
042b4     00 FA 0D F2 | 	cmp	result1, #0 wz
042b8     DC 00 90 AD |  if_e	jmp	#LR__0295
042bc     43 01 00 FF 
042c0     4F 14 06 F6 | 	mov	arg02, ##@LR__4479
042c4     0F 13 02 F6 | 	mov	arg01, local01
042c8     D4 4A B1 FD | 	call	#__system___string_cmp
042cc     00 FA 0D F2 | 	cmp	result1, #0 wz
042d0     CC 00 90 AD |  if_e	jmp	#LR__0296
042d4     43 01 00 FF 
042d8     53 14 06 F6 | 	mov	arg02, ##@LR__4480
042dc     0F 13 02 F6 | 	mov	arg01, local01
042e0     BC 4A B1 FD | 	call	#__system___string_cmp
042e4     00 FA 0D F2 | 	cmp	result1, #0 wz
042e8     BC 00 90 AD |  if_e	jmp	#LR__0297
042ec     43 01 00 FF 
042f0     59 14 06 F6 | 	mov	arg02, ##@LR__4481
042f4     0F 13 02 F6 | 	mov	arg01, local01
042f8     A4 4A B1 FD | 	call	#__system___string_cmp
042fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04300     AC 00 90 AD |  if_e	jmp	#LR__0298
04304     43 01 00 FF 
04308     5F 14 06 F6 | 	mov	arg02, ##@LR__4482
0430c     0F 13 02 F6 | 	mov	arg01, local01
04310     8C 4A B1 FD | 	call	#__system___string_cmp
04314     00 FA 0D F2 | 	cmp	result1, #0 wz
04318     9C 00 90 AD |  if_e	jmp	#LR__0299
0431c     A0 00 90 FD | 	jmp	#LR__0300
04320                 | LR__0280
04320     85 FA 05 F6 | 	mov	result1, #133
04324     9C 00 90 FD | 	jmp	#LR__0301
04328                 | LR__0281
04328     84 FA 05 F6 | 	mov	result1, #132
0432c     94 00 90 FD | 	jmp	#LR__0301
04330                 | LR__0282
04330     86 FA 05 F6 | 	mov	result1, #134
04334     8C 00 90 FD | 	jmp	#LR__0301
04338                 | LR__0283
04338     82 FA 05 F6 | 	mov	result1, #130
0433c     84 00 90 FD | 	jmp	#LR__0301
04340                 | LR__0284
04340     6F FA 05 F6 | 	mov	result1, #111
04344     7C 00 90 FD | 	jmp	#LR__0301
04348                 | LR__0285
04348     6F FA 05 F6 | 	mov	result1, #111
0434c     74 00 90 FD | 	jmp	#LR__0301
04350                 | LR__0286
04350     62 FA 05 F6 | 	mov	result1, #98
04354     6C 00 90 FD | 	jmp	#LR__0301
04358                 | LR__0287
04358     66 FA 05 F6 | 	mov	result1, #102
0435c     64 00 90 FD | 	jmp	#LR__0301
04360                 | LR__0288
04360     67 FA 05 F6 | 	mov	result1, #103
04364     5C 00 90 FD | 	jmp	#LR__0301
04368                 | LR__0289
04368     64 FA 05 F6 | 	mov	result1, #100
0436c     54 00 90 FD | 	jmp	#LR__0301
04370                 | LR__0290
04370     65 FA 05 F6 | 	mov	result1, #101
04374     4C 00 90 FD | 	jmp	#LR__0301
04378                 | LR__0291
04378     7B FA 05 F6 | 	mov	result1, #123
0437c     44 00 90 FD | 	jmp	#LR__0301
04380                 | LR__0292
04380     76 FA 05 F6 | 	mov	result1, #118
04384     3C 00 90 FD | 	jmp	#LR__0301
04388                 | LR__0293
04388     7A FA 05 F6 | 	mov	result1, #122
0438c     34 00 90 FD | 	jmp	#LR__0301
04390                 | LR__0294
04390     54 FA 05 F6 | 	mov	result1, #84
04394     2C 00 90 FD | 	jmp	#LR__0301
04398                 | LR__0295
04398     6B FA 05 F6 | 	mov	result1, #107
0439c     24 00 90 FD | 	jmp	#LR__0301
043a0                 | LR__0296
043a0     87 FA 05 F6 | 	mov	result1, #135
043a4     1C 00 90 FD | 	jmp	#LR__0301
043a8                 | LR__0297
043a8     6A FA 05 F6 | 	mov	result1, #106
043ac     14 00 90 FD | 	jmp	#LR__0301
043b0                 | LR__0298
043b0     6E FA 05 F6 | 	mov	result1, #110
043b4     0C 00 90 FD | 	jmp	#LR__0301
043b8                 | LR__0299
043b8     83 FA 05 F6 | 	mov	result1, #131
043bc     04 00 90 FD | 	jmp	#LR__0301
043c0                 | LR__0300
043c0     00 FA 05 F6 | 	mov	result1, #0
043c4                 | LR__0301
043c4     A7 F0 03 F6 | 	mov	ptra, fp
043c8     B2 00 A0 FD | 	call	#popregs_
043cc                 | _isfunction_ret
043cc     2D 00 64 FD | 	ret
043d0                 | 
043d0                 | ' 
043d0                 | ' function isname(s as string) as boolean
043d0                 | _isname
043d0     0D 4A 05 F6 | 	mov	COUNT_, #13
043d4     A8 00 A0 FD | 	call	#pushregs_
043d8     09 1F 02 F6 | 	mov	local01, arg01
043dc     09 21 02 F6 | 	mov	local02, arg01
043e0     97 06 48 FB | 	callpa	#(@LR__0311-@LR__0310)>>2,fcache_load_ptr_
043e4                 | LR__0310
043e4     10 FB C9 FA | 	rdbyte	result1, local02 wz
043e8     01 20 06 51 |  if_ne	add	local02, #1
043ec     F4 FF 9F 5D |  if_ne	jmp	#LR__0310
043f0                 | LR__0311
043f0     09 21 82 F1 | 	sub	local02, arg01
043f4     10 FB 01 F6 | 	mov	result1, local02
043f8     FD 22 0A F6 | 	mov	local03, result1 wz
043fc     00 FA 05 A6 |  if_e	mov	result1, #0
04400     34 02 90 AD |  if_e	jmp	#LR__0323
04404     0F 13 02 F6 | 	mov	arg01, local01
04408     01 14 06 F6 | 	mov	arg02, #1
0440c     01 16 06 F6 | 	mov	arg03, #1
04410     8C 6A B1 FD | 	call	#__system__Mid_S
04414     FD 24 02 F6 | 	mov	local04, result1
04418                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
04418     43 01 00 FF 
0441c     63 14 06 F6 | 	mov	arg02, ##@LR__4483
04420     12 13 02 F6 | 	mov	arg01, local04
04424     78 49 B1 FD | 	call	#__system___string_cmp
04428     00 FA 55 F2 | 	cmps	result1, #0 wc
0442c     18 00 90 CD |  if_b	jmp	#LR__0312
04430     43 01 00 FF 
04434     65 14 06 F6 | 	mov	arg02, ##@LR__4484
04438     12 13 02 F6 | 	mov	arg01, local04
0443c     60 49 B1 FD | 	call	#__system___string_cmp
04440     01 FA 55 F2 | 	cmps	result1, #1 wc
04444     1C 00 90 CD |  if_b	jmp	#LR__0313
04448                 | LR__0312
04448     43 01 00 FF 
0444c     67 14 06 F6 | 	mov	arg02, ##@LR__4485
04450     12 13 02 F6 | 	mov	arg01, local04
04454     48 49 B1 FD | 	call	#__system___string_cmp
04458     00 FA 0D F2 | 	cmp	result1, #0 wz
0445c     00 FA 05 56 |  if_ne	mov	result1, #0
04460     D4 01 90 5D |  if_ne	jmp	#LR__0323
04464                 | LR__0313
04464                 | ' if l>2 then 
04464     03 22 56 F2 | 	cmps	local03, #3 wc
04468     C8 01 90 CD |  if_b	jmp	#LR__0322
0446c                 | '   for i=2 to l
0446c     02 26 06 F6 | 	mov	local05, #2
04470     11 29 02 F6 | 	mov	local06, local03
04474     01 28 06 F1 | 	add	local06, #1
04478                 | LR__0314
04478     14 27 52 F2 | 	cmps	local05, local06 wc
0447c     B4 01 90 3D |  if_ae	jmp	#LR__0321
04480     0F 13 02 F6 | 	mov	arg01, local01
04484     13 15 02 F6 | 	mov	arg02, local05
04488     01 16 06 F6 | 	mov	arg03, #1
0448c     10 6A B1 FD | 	call	#__system__Mid_S
04490     FD 24 02 F6 | 	mov	local04, result1
04494                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false
04494     11 27 52 F2 | 	cmps	local05, local03 wc
04498     9C 00 90 3D |  if_ae	jmp	#LR__0317
0449c     43 01 00 FF 
044a0     69 14 06 F6 | 	mov	arg02, ##@LR__4486
044a4     12 13 02 F6 | 	mov	arg01, local04
044a8     F4 48 B1 FD | 	call	#__system___string_cmp
044ac     00 FA 55 F2 | 	cmps	result1, #0 wc
044b0     18 00 90 CD |  if_b	jmp	#LR__0315
044b4     43 01 00 FF 
044b8     6B 14 06 F6 | 	mov	arg02, ##@LR__4487
044bc     12 13 02 F6 | 	mov	arg01, local04
044c0     DC 48 B1 FD | 	call	#__system___string_cmp
044c4     01 FA 55 F2 | 	cmps	result1, #1 wc
044c8     6C 00 90 CD |  if_b	jmp	#LR__0317
044cc                 | LR__0315
044cc     43 01 00 FF 
044d0     6D 14 06 F6 | 	mov	arg02, ##@LR__4488
044d4     12 13 02 F6 | 	mov	arg01, local04
044d8     C4 48 B1 FD | 	call	#__system___string_cmp
044dc     00 FA 55 F2 | 	cmps	result1, #0 wc
044e0     18 00 90 CD |  if_b	jmp	#LR__0316
044e4     43 01 00 FF 
044e8     6F 14 06 F6 | 	mov	arg02, ##@LR__4489
044ec     12 13 02 F6 | 	mov	arg01, local04
044f0     AC 48 B1 FD | 	call	#__system___string_cmp
044f4     01 FA 55 F2 | 	cmps	result1, #1 wc
044f8     3C 00 90 CD |  if_b	jmp	#LR__0317
044fc                 | LR__0316
044fc     43 01 00 FF 
04500     71 2A 06 F6 | 	mov	local07, ##@LR__4490
04504     12 13 02 F6 | 	mov	arg01, local04
04508     15 15 02 F6 | 	mov	arg02, local07
0450c     90 48 B1 FD | 	call	#__system___string_cmp
04510     00 FA 0D F2 | 	cmp	result1, #0 wz
04514     20 00 90 AD |  if_e	jmp	#LR__0317
04518     43 01 00 FF 
0451c     73 2C 06 F6 | 	mov	local08, ##@LR__4491
04520     12 13 02 F6 | 	mov	arg01, local04
04524     16 15 02 F6 | 	mov	arg02, local08
04528     74 48 B1 FD | 	call	#__system___string_cmp
0452c     FD 2E 0A F6 | 	mov	local09, result1 wz
04530     00 FA 05 56 |  if_ne	mov	result1, #0
04534     00 01 90 5D |  if_ne	jmp	#LR__0323
04538                 | LR__0317
04538                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
04538     11 27 0A F2 | 	cmp	local05, local03 wz
0453c     EC 00 90 5D |  if_ne	jmp	#LR__0320
04540     43 01 00 FF 
04544     75 30 06 F6 | 	mov	local10, ##@LR__4492
04548     12 13 02 F6 | 	mov	arg01, local04
0454c     18 15 02 F6 | 	mov	arg02, local10
04550     4C 48 B1 FD | 	call	#__system___string_cmp
04554     FD 32 02 F6 | 	mov	local11, result1
04558     00 32 56 F2 | 	cmps	local11, #0 wc
0455c     1C 00 90 CD |  if_b	jmp	#LR__0318
04560     43 01 00 FF 
04564     77 14 06 F6 | 	mov	arg02, ##@LR__4493
04568     12 13 02 F6 | 	mov	arg01, local04
0456c     30 48 B1 FD | 	call	#__system___string_cmp
04570     FD 30 02 F6 | 	mov	local10, result1
04574     01 30 56 F2 | 	cmps	local10, #1 wc
04578     B0 00 90 CD |  if_b	jmp	#LR__0320
0457c                 | LR__0318
0457c     43 01 00 FF 
04580     79 14 06 F6 | 	mov	arg02, ##@LR__4494
04584     12 13 02 F6 | 	mov	arg01, local04
04588     14 48 B1 FD | 	call	#__system___string_cmp
0458c     00 FA 55 F2 | 	cmps	result1, #0 wc
04590     1C 00 90 CD |  if_b	jmp	#LR__0319
04594     43 01 00 FF 
04598     7B 2E 06 F6 | 	mov	local09, ##@LR__4495
0459c     12 13 02 F6 | 	mov	arg01, local04
045a0     17 15 02 F6 | 	mov	arg02, local09
045a4     F8 47 B1 FD | 	call	#__system___string_cmp
045a8     01 FA 55 F2 | 	cmps	result1, #1 wc
045ac     7C 00 90 CD |  if_b	jmp	#LR__0320
045b0                 | LR__0319
045b0     43 01 00 FF 
045b4     7D 2E 06 F6 | 	mov	local09, ##@LR__4496
045b8     12 13 02 F6 | 	mov	arg01, local04
045bc     17 15 02 F6 | 	mov	arg02, local09
045c0     DC 47 B1 FD | 	call	#__system___string_cmp
045c4     00 FA 4D F2 | 	cmps	result1, #0 wz
045c8     60 00 90 AD |  if_e	jmp	#LR__0320
045cc     43 01 00 FF 
045d0     7F 2C 06 F6 | 	mov	local08, ##@LR__4497
045d4     12 13 02 F6 | 	mov	arg01, local04
045d8     16 15 02 F6 | 	mov	arg02, local08
045dc     C0 47 B1 FD | 	call	#__system___string_cmp
045e0     FD 2E 0A F6 | 	mov	local09, result1 wz
045e4     44 00 90 AD |  if_e	jmp	#LR__0320
045e8     43 01 00 FF 
045ec     81 34 06 F6 | 	mov	local12, ##@LR__4498
045f0     1A 2D 02 F6 | 	mov	local08, local12
045f4     12 13 02 F6 | 	mov	arg01, local04
045f8     16 15 02 F6 | 	mov	arg02, local08
045fc     A0 47 B1 FD | 	call	#__system___string_cmp
04600     FD 2A 0A F6 | 	mov	local07, result1 wz
04604     24 00 90 AD |  if_e	jmp	#LR__0320
04608     43 01 00 FF 
0460c     83 36 06 F6 | 	mov	local13, ##@LR__4499
04610     1B 35 02 F6 | 	mov	local12, local13
04614     12 13 02 F6 | 	mov	arg01, local04
04618     1A 15 02 F6 | 	mov	arg02, local12
0461c     80 47 B1 FD | 	call	#__system___string_cmp
04620     FD 2C 0A F6 | 	mov	local08, result1 wz
04624     00 FA 05 56 |  if_ne	mov	result1, #0
04628     0C 00 90 5D |  if_ne	jmp	#LR__0323
0462c                 | LR__0320
0462c     01 26 06 F1 | 	add	local05, #1
04630     44 FE 9F FD | 	jmp	#LR__0314
04634                 | LR__0321
04634                 | LR__0322
04634                 | ' return true
04634     01 FA 65 F6 | 	neg	result1, #1
04638                 | LR__0323
04638     A7 F0 03 F6 | 	mov	ptra, fp
0463c     B2 00 A0 FD | 	call	#popregs_
04640                 | _isname_ret
04640     2D 00 64 FD | 	ret
04644                 | 
04644                 | ' 
04644                 | ' function isnum(s as string) as boolean
04644                 | _isnum
04644     0D 4A 05 F6 | 	mov	COUNT_, #13
04648     A8 00 A0 FD | 	call	#pushregs_
0464c     09 1F 02 F6 | 	mov	local01, arg01
04650     00 20 06 F6 | 	mov	local02, #0
04654     00 22 06 F6 | 	mov	local03, #0
04658     0F 13 02 F6 | 	mov	arg01, local01
0465c     09 25 02 F6 | 	mov	local04, arg01
04660     97 06 48 FB | 	callpa	#(@LR__0331-@LR__0330)>>2,fcache_load_ptr_
04664                 | LR__0330
04664     12 FB C9 FA | 	rdbyte	result1, local04 wz
04668     01 24 06 51 |  if_ne	add	local04, #1
0466c     F4 FF 9F 5D |  if_ne	jmp	#LR__0330
04670                 | LR__0331
04670     09 25 82 F1 | 	sub	local04, arg01
04674     12 FB 01 F6 | 	mov	result1, local04
04678     FD 26 0A F6 | 	mov	local05, result1 wz
0467c     00 FA 05 A6 |  if_e	mov	result1, #0
04680     8C 02 90 AD |  if_e	jmp	#LR__0342
04684     0F 13 02 F6 | 	mov	arg01, local01
04688     01 14 06 F6 | 	mov	arg02, #1
0468c     01 16 06 F6 | 	mov	arg03, #1
04690     0C 68 B1 FD | 	call	#__system__Mid_S
04694     FD 28 02 F6 | 	mov	local06, result1
04698                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
04698     43 01 00 FF 
0469c     85 14 06 F6 | 	mov	arg02, ##@LR__4500
046a0     14 13 02 F6 | 	mov	arg01, local06
046a4     F8 46 B1 FD | 	call	#__system___string_cmp
046a8     00 FA 55 F2 | 	cmps	result1, #0 wc
046ac     18 00 90 CD |  if_b	jmp	#LR__0332
046b0     43 01 00 FF 
046b4     87 14 06 F6 | 	mov	arg02, ##@LR__4501
046b8     14 13 02 F6 | 	mov	arg01, local06
046bc     E0 46 B1 FD | 	call	#__system___string_cmp
046c0     01 FA 55 F2 | 	cmps	result1, #1 wc
046c4     78 00 90 CD |  if_b	jmp	#LR__0333
046c8                 | LR__0332
046c8     43 01 00 FF 
046cc     89 14 06 F6 | 	mov	arg02, ##@LR__4502
046d0     14 13 02 F6 | 	mov	arg01, local06
046d4     C8 46 B1 FD | 	call	#__system___string_cmp
046d8     00 FA 0D F2 | 	cmp	result1, #0 wz
046dc     60 00 90 AD |  if_e	jmp	#LR__0333
046e0     43 01 00 FF 
046e4     8B 2A 06 F6 | 	mov	local07, ##@LR__4503
046e8     14 13 02 F6 | 	mov	arg01, local06
046ec     15 15 02 F6 | 	mov	arg02, local07
046f0     AC 46 B1 FD | 	call	#__system___string_cmp
046f4     00 FA 0D F2 | 	cmp	result1, #0 wz
046f8     44 00 90 AD |  if_e	jmp	#LR__0333
046fc     43 01 00 FF 
04700     8D 2C 06 F6 | 	mov	local08, ##@LR__4504
04704     16 2B 02 F6 | 	mov	local07, local08
04708     14 13 02 F6 | 	mov	arg01, local06
0470c     15 15 02 F6 | 	mov	arg02, local07
04710     8C 46 B1 FD | 	call	#__system___string_cmp
04714     00 FA 4D F2 | 	cmps	result1, #0 wz
04718     24 00 90 AD |  if_e	jmp	#LR__0333
0471c     43 01 00 FF 
04720     8F 2E 06 F6 | 	mov	local09, ##@LR__4505
04724     17 2D 02 F6 | 	mov	local08, local09
04728     14 13 02 F6 | 	mov	arg01, local06
0472c     16 15 02 F6 | 	mov	arg02, local08
04730     6C 46 B1 FD | 	call	#__system___string_cmp
04734     FD 2A 0A F6 | 	mov	local07, result1 wz
04738     00 FA 05 56 |  if_ne	mov	result1, #0
0473c     D0 01 90 5D |  if_ne	jmp	#LR__0342
04740                 | LR__0333
04740                 | ' if m$="." then ds=1
04740     43 01 00 FF 
04744     91 14 06 F6 | 	mov	arg02, ##@LR__4506
04748     14 13 02 F6 | 	mov	arg01, local06
0474c     50 46 B1 FD | 	call	#__system___string_cmp
04750     00 FA 0D F2 | 	cmp	result1, #0 wz
04754     01 20 06 A6 |  if_e	mov	local02, #1
04758                 | ' if l>1 then 
04758     02 26 56 F2 | 	cmps	local05, #2 wc
0475c     AC 01 90 CD |  if_b	jmp	#LR__0341
04760                 | '   for i=2 to l
04760     02 30 06 F6 | 	mov	local10, #2
04764     13 33 02 F6 | 	mov	local11, local05
04768     01 32 06 F1 | 	add	local11, #1
0476c                 | LR__0334
0476c     19 31 52 F2 | 	cmps	local10, local11 wc
04770     98 01 90 3D |  if_ae	jmp	#LR__0340
04774     0F 13 02 F6 | 	mov	arg01, local01
04778     18 15 02 F6 | 	mov	arg02, local10
0477c     01 16 06 F6 | 	mov	arg03, #1
04780     1C 67 B1 FD | 	call	#__system__Mid_S
04784     FD 28 02 F6 | 	mov	local06, result1
04788                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." andalso m$<>"E" andalso m$<>"e" andalso m$<>"-" then return false
04788     43 01 00 FF 
0478c     93 14 06 F6 | 	mov	arg02, ##@LR__4507
04790     14 13 02 F6 | 	mov	arg01, local06
04794     08 46 B1 FD | 	call	#__system___string_cmp
04798     00 FA 55 F2 | 	cmps	result1, #0 wc
0479c     18 00 90 CD |  if_b	jmp	#LR__0335
047a0     43 01 00 FF 
047a4     95 14 06 F6 | 	mov	arg02, ##@LR__4508
047a8     14 13 02 F6 | 	mov	arg01, local06
047ac     F0 45 B1 FD | 	call	#__system___string_cmp
047b0     01 FA 55 F2 | 	cmps	result1, #1 wc
047b4     98 00 90 CD |  if_b	jmp	#LR__0336
047b8                 | LR__0335
047b8     43 01 00 FF 
047bc     97 14 06 F6 | 	mov	arg02, ##@LR__4509
047c0     14 13 02 F6 | 	mov	arg01, local06
047c4     D8 45 B1 FD | 	call	#__system___string_cmp
047c8     00 FA 0D F2 | 	cmp	result1, #0 wz
047cc     80 00 90 AD |  if_e	jmp	#LR__0336
047d0     43 01 00 FF 
047d4     99 2A 06 F6 | 	mov	local07, ##@LR__4510
047d8     14 13 02 F6 | 	mov	arg01, local06
047dc     15 15 02 F6 | 	mov	arg02, local07
047e0     BC 45 B1 FD | 	call	#__system___string_cmp
047e4     00 FA 4D F2 | 	cmps	result1, #0 wz
047e8     64 00 90 AD |  if_e	jmp	#LR__0336
047ec     43 01 00 FF 
047f0     9B 2C 06 F6 | 	mov	local08, ##@LR__4511
047f4     16 2B 02 F6 | 	mov	local07, local08
047f8     14 13 02 F6 | 	mov	arg01, local06
047fc     15 15 02 F6 | 	mov	arg02, local07
04800     9C 45 B1 FD | 	call	#__system___string_cmp
04804     FD 34 0A F6 | 	mov	local12, result1 wz
04808     44 00 90 AD |  if_e	jmp	#LR__0336
0480c     43 01 00 FF 
04810     9D 2E 06 F6 | 	mov	local09, ##@LR__4512
04814     17 2D 02 F6 | 	mov	local08, local09
04818     14 13 02 F6 | 	mov	arg01, local06
0481c     16 15 02 F6 | 	mov	arg02, local08
04820     7C 45 B1 FD | 	call	#__system___string_cmp
04824     FD 2A 0A F6 | 	mov	local07, result1 wz
04828     24 00 90 AD |  if_e	jmp	#LR__0336
0482c     43 01 00 FF 
04830     9F 36 06 F6 | 	mov	local13, ##@LR__4513
04834     1B 2F 02 F6 | 	mov	local09, local13
04838     14 13 02 F6 | 	mov	arg01, local06
0483c     17 15 02 F6 | 	mov	arg02, local09
04840     5C 45 B1 FD | 	call	#__system___string_cmp
04844     FD 2C 0A F6 | 	mov	local08, result1 wz
04848     00 FA 05 56 |  if_ne	mov	result1, #0
0484c     C0 00 90 5D |  if_ne	jmp	#LR__0342
04850                 | LR__0336
04850                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
04850     43 01 00 FF 
04854     A1 14 06 F6 | 	mov	arg02, ##@LR__4514
04858     14 13 02 F6 | 	mov	arg01, local06
0485c     40 45 B1 FD | 	call	#__system___string_cmp
04860     00 FA 0D F2 | 	cmp	result1, #0 wz
04864     38 00 90 5D |  if_ne	jmp	#LR__0337
04868     18 15 02 F6 | 	mov	arg02, local10
0486c     01 14 86 F1 | 	sub	arg02, #1
04870     0F 13 02 F6 | 	mov	arg01, local01
04874     01 16 06 F6 | 	mov	arg03, #1
04878     24 66 B1 FD | 	call	#__system__Mid_S
0487c     FD 12 02 F6 | 	mov	arg01, result1
04880     B8 67 B1 FD | 	call	#__system__LCase_S
04884     FD 12 02 F6 | 	mov	arg01, result1
04888     43 01 00 FF 
0488c     A3 14 06 F6 | 	mov	arg02, ##@LR__4515
04890     0C 45 B1 FD | 	call	#__system___string_cmp
04894     00 FA 0D F2 | 	cmp	result1, #0 wz
04898     00 FA 05 56 |  if_ne	mov	result1, #0
0489c     70 00 90 5D |  if_ne	jmp	#LR__0342
048a0                 | LR__0337
048a0                 | '     if m$="." then ds+=1: if ds>1 then return false
048a0     43 01 00 FF 
048a4     A5 14 06 F6 | 	mov	arg02, ##@LR__4516
048a8     14 13 02 F6 | 	mov	arg01, local06
048ac     F0 44 B1 FD | 	call	#__system___string_cmp
048b0     00 FA 0D F2 | 	cmp	result1, #0 wz
048b4     01 20 06 A1 |  if_e	add	local02, #1
048b8     02 20 56 A2 |  if_e	cmps	local02, #2 wc
048bc     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
048c0     4C 00 90 2D |  if_nc_and_z	jmp	#LR__0342
048c4                 | '     if m$="E" orelse m$="e" then es+=1: if es>1 then return false
048c4     43 01 00 FF 
048c8     A7 14 06 F6 | 	mov	arg02, ##@LR__4517
048cc     14 13 02 F6 | 	mov	arg01, local06
048d0     CC 44 B1 FD | 	call	#__system___string_cmp
048d4     00 FA 4D F2 | 	cmps	result1, #0 wz
048d8     18 00 90 AD |  if_e	jmp	#LR__0338
048dc     43 01 00 FF 
048e0     A9 14 06 F6 | 	mov	arg02, ##@LR__4518
048e4     14 13 02 F6 | 	mov	arg01, local06
048e8     B4 44 B1 FD | 	call	#__system___string_cmp
048ec     00 FA 4D F2 | 	cmps	result1, #0 wz
048f0     10 00 90 5D |  if_ne	jmp	#LR__0339
048f4                 | LR__0338
048f4     01 22 06 F1 | 	add	local03, #1
048f8     02 22 56 F2 | 	cmps	local03, #2 wc
048fc     00 FA 05 36 |  if_ae	mov	result1, #0
04900     0C 00 90 3D |  if_ae	jmp	#LR__0342
04904                 | LR__0339
04904     01 30 06 F1 | 	add	local10, #1
04908     60 FE 9F FD | 	jmp	#LR__0334
0490c                 | LR__0340
0490c                 | LR__0341
0490c                 | ' return true
0490c     01 FA 65 F6 | 	neg	result1, #1
04910                 | LR__0342
04910     A7 F0 03 F6 | 	mov	ptra, fp
04914     B2 00 A0 FD | 	call	#popregs_
04918                 | _isnum_ret
04918     2D 00 64 FD | 	ret
0491c                 | 
0491c                 | '   
0491c                 | ' function isint(s as string) as boolean
0491c                 | _isint
0491c     05 4A 05 F6 | 	mov	COUNT_, #5
04920     A8 00 A0 FD | 	call	#pushregs_
04924     09 1F 02 F6 | 	mov	local01, arg01
04928     09 21 02 F6 | 	mov	local02, arg01
0492c     97 06 48 FB | 	callpa	#(@LR__0351-@LR__0350)>>2,fcache_load_ptr_
04930                 | LR__0350
04930     10 FB C9 FA | 	rdbyte	result1, local02 wz
04934     01 20 06 51 |  if_ne	add	local02, #1
04938     F4 FF 9F 5D |  if_ne	jmp	#LR__0350
0493c                 | LR__0351
0493c     09 21 82 F1 | 	sub	local02, arg01
04940     10 FB 01 F6 | 	mov	result1, local02
04944     FD 20 0A F6 | 	mov	local02, result1 wz
04948     00 FA 05 A6 |  if_e	mov	result1, #0
0494c     18 01 90 AD |  if_e	jmp	#LR__0359
04950     0F 13 02 F6 | 	mov	arg01, local01
04954     01 14 06 F6 | 	mov	arg02, #1
04958     01 16 06 F6 | 	mov	arg03, #1
0495c     40 65 B1 FD | 	call	#__system__Mid_S
04960     FD 22 02 F6 | 	mov	local03, result1
04964                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
04964     43 01 00 FF 
04968     AB 14 06 F6 | 	mov	arg02, ##@LR__4519
0496c     11 13 02 F6 | 	mov	arg01, local03
04970     2C 44 B1 FD | 	call	#__system___string_cmp
04974     00 FA 55 F2 | 	cmps	result1, #0 wc
04978     18 00 90 CD |  if_b	jmp	#LR__0352
0497c     43 01 00 FF 
04980     AD 14 06 F6 | 	mov	arg02, ##@LR__4520
04984     11 13 02 F6 | 	mov	arg01, local03
04988     14 44 B1 FD | 	call	#__system___string_cmp
0498c     01 FA 55 F2 | 	cmps	result1, #1 wc
04990     4C 00 90 CD |  if_b	jmp	#LR__0353
04994                 | LR__0352
04994     43 01 00 FF 
04998     AF 14 06 F6 | 	mov	arg02, ##@LR__4521
0499c     11 13 02 F6 | 	mov	arg01, local03
049a0     FC 43 B1 FD | 	call	#__system___string_cmp
049a4     00 FA 0D F2 | 	cmp	result1, #0 wz
049a8     34 00 90 AD |  if_e	jmp	#LR__0353
049ac     43 01 00 FF 
049b0     B1 14 06 F6 | 	mov	arg02, ##@LR__4522
049b4     11 13 02 F6 | 	mov	arg01, local03
049b8     E4 43 B1 FD | 	call	#__system___string_cmp
049bc     00 FA 0D F2 | 	cmp	result1, #0 wz
049c0     1C 00 90 AD |  if_e	jmp	#LR__0353
049c4     43 01 00 FF 
049c8     B3 14 06 F6 | 	mov	arg02, ##@LR__4523
049cc     11 13 02 F6 | 	mov	arg01, local03
049d0     CC 43 B1 FD | 	call	#__system___string_cmp
049d4     00 FA 0D F2 | 	cmp	result1, #0 wz
049d8     00 FA 05 56 |  if_ne	mov	result1, #0
049dc     88 00 90 5D |  if_ne	jmp	#LR__0359
049e0                 | LR__0353
049e0                 | ' 
049e0                 | ' if l>1 then 
049e0     02 20 56 F2 | 	cmps	local02, #2 wc
049e4     7C 00 90 CD |  if_b	jmp	#LR__0358
049e8                 | '   for i=2 to l
049e8     02 24 06 F6 | 	mov	local04, #2
049ec     10 27 02 F6 | 	mov	local05, local02
049f0     01 26 06 F1 | 	add	local05, #1
049f4                 | LR__0354
049f4     13 25 52 F2 | 	cmps	local04, local05 wc
049f8     68 00 90 3D |  if_ae	jmp	#LR__0357
049fc     0F 13 02 F6 | 	mov	arg01, local01
04a00     12 15 02 F6 | 	mov	arg02, local04
04a04     01 16 06 F6 | 	mov	arg03, #1
04a08     94 64 B1 FD | 	call	#__system__Mid_S
04a0c     FD 22 02 F6 | 	mov	local03, result1
04a10                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
04a10     43 01 00 FF 
04a14     B5 14 06 F6 | 	mov	arg02, ##@LR__4524
04a18     11 13 02 F6 | 	mov	arg01, local03
04a1c     80 43 B1 FD | 	call	#__system___string_cmp
04a20     00 FA 55 F2 | 	cmps	result1, #0 wc
04a24     18 00 90 CD |  if_b	jmp	#LR__0355
04a28     43 01 00 FF 
04a2c     B7 14 06 F6 | 	mov	arg02, ##@LR__4525
04a30     11 13 02 F6 | 	mov	arg01, local03
04a34     68 43 B1 FD | 	call	#__system___string_cmp
04a38     01 FA 55 F2 | 	cmps	result1, #1 wc
04a3c     1C 00 90 CD |  if_b	jmp	#LR__0356
04a40                 | LR__0355
04a40     43 01 00 FF 
04a44     B9 14 06 F6 | 	mov	arg02, ##@LR__4526
04a48     11 13 02 F6 | 	mov	arg01, local03
04a4c     50 43 B1 FD | 	call	#__system___string_cmp
04a50     00 FA 0D F2 | 	cmp	result1, #0 wz
04a54     00 FA 05 56 |  if_ne	mov	result1, #0
04a58     0C 00 90 5D |  if_ne	jmp	#LR__0359
04a5c                 | LR__0356
04a5c     01 24 06 F1 | 	add	local04, #1
04a60     90 FF 9F FD | 	jmp	#LR__0354
04a64                 | LR__0357
04a64                 | LR__0358
04a64                 | ' return true
04a64     01 FA 65 F6 | 	neg	result1, #1
04a68                 | LR__0359
04a68     A7 F0 03 F6 | 	mov	ptra, fp
04a6c     B2 00 A0 FD | 	call	#popregs_
04a70                 | _isint_ret
04a70     2D 00 64 FD | 	ret
04a74                 | 
04a74                 | ' 
04a74                 | ' function isdec(s as string) as boolean
04a74                 | _isdec
04a74     05 4A 05 F6 | 	mov	COUNT_, #5
04a78     A8 00 A0 FD | 	call	#pushregs_
04a7c     09 1F 02 F6 | 	mov	local01, arg01
04a80     09 21 02 F6 | 	mov	local02, arg01
04a84     97 06 48 FB | 	callpa	#(@LR__0361-@LR__0360)>>2,fcache_load_ptr_
04a88                 | LR__0360
04a88     10 FB C9 FA | 	rdbyte	result1, local02 wz
04a8c     01 20 06 51 |  if_ne	add	local02, #1
04a90     F4 FF 9F 5D |  if_ne	jmp	#LR__0360
04a94                 | LR__0361
04a94     09 21 82 F1 | 	sub	local02, arg01
04a98     10 FB 01 F6 | 	mov	result1, local02
04a9c     FD 20 0A F6 | 	mov	local02, result1 wz
04aa0     00 FA 05 A6 |  if_e	mov	result1, #0
04aa4     80 00 90 AD |  if_e	jmp	#LR__0366
04aa8                 | ' for i=1 to l
04aa8     01 22 06 F6 | 	mov	local03, #1
04aac     10 25 02 F6 | 	mov	local04, local02
04ab0     01 24 06 F1 | 	add	local04, #1
04ab4                 | LR__0362
04ab4     12 23 52 F2 | 	cmps	local03, local04 wc
04ab8     68 00 90 3D |  if_ae	jmp	#LR__0365
04abc     0F 13 02 F6 | 	mov	arg01, local01
04ac0     11 15 02 F6 | 	mov	arg02, local03
04ac4     01 16 06 F6 | 	mov	arg03, #1
04ac8     D4 63 B1 FD | 	call	#__system__Mid_S
04acc     FD 26 02 F6 | 	mov	local05, result1
04ad0                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
04ad0     43 01 00 FF 
04ad4     BB 14 06 F6 | 	mov	arg02, ##@LR__4527
04ad8     13 13 02 F6 | 	mov	arg01, local05
04adc     C0 42 B1 FD | 	call	#__system___string_cmp
04ae0     00 FA 55 F2 | 	cmps	result1, #0 wc
04ae4     18 00 90 CD |  if_b	jmp	#LR__0363
04ae8     43 01 00 FF 
04aec     BD 14 06 F6 | 	mov	arg02, ##@LR__4528
04af0     13 13 02 F6 | 	mov	arg01, local05
04af4     A8 42 B1 FD | 	call	#__system___string_cmp
04af8     01 FA 55 F2 | 	cmps	result1, #1 wc
04afc     1C 00 90 CD |  if_b	jmp	#LR__0364
04b00                 | LR__0363
04b00     43 01 00 FF 
04b04     BF 14 06 F6 | 	mov	arg02, ##@LR__4529
04b08     13 13 02 F6 | 	mov	arg01, local05
04b0c     90 42 B1 FD | 	call	#__system___string_cmp
04b10     00 FA 0D F2 | 	cmp	result1, #0 wz
04b14     00 FA 05 56 |  if_ne	mov	result1, #0
04b18     0C 00 90 5D |  if_ne	jmp	#LR__0366
04b1c                 | LR__0364
04b1c     01 22 06 F1 | 	add	local03, #1
04b20     90 FF 9F FD | 	jmp	#LR__0362
04b24                 | LR__0365
04b24                 | ' return true
04b24     01 FA 65 F6 | 	neg	result1, #1
04b28                 | LR__0366
04b28     A7 F0 03 F6 | 	mov	ptra, fp
04b2c     B2 00 A0 FD | 	call	#popregs_
04b30                 | _isdec_ret
04b30     2D 00 64 FD | 	ret
04b34                 | 
04b34                 | ' 
04b34                 | ' function isstring(s as string) as boolean
04b34                 | _isstring
04b34     01 4A 05 F6 | 	mov	COUNT_, #1
04b38     A8 00 A0 FD | 	call	#pushregs_
04b3c                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
04b3c     09 1F 02 F6 | 	mov	local01, arg01
04b40     01 14 06 F6 | 	mov	arg02, #1
04b44     40 62 B1 FD | 	call	#__system__Left_S
04b48     FD 12 02 F6 | 	mov	arg01, result1
04b4c     43 01 00 FF 
04b50     C1 14 06 F6 | 	mov	arg02, ##@LR__4530
04b54     48 42 B1 FD | 	call	#__system___string_cmp
04b58     00 FA 4D F2 | 	cmps	result1, #0 wz
04b5c     28 00 90 5D |  if_ne	jmp	#LR__0370
04b60     0F 13 02 F6 | 	mov	arg01, local01
04b64     01 14 06 F6 | 	mov	arg02, #1
04b68     A4 62 B1 FD | 	call	#__system__Right_S
04b6c     FD 12 02 F6 | 	mov	arg01, result1
04b70     43 01 00 FF 
04b74     C3 14 06 F6 | 	mov	arg02, ##@LR__4531
04b78     24 42 B1 FD | 	call	#__system___string_cmp
04b7c     00 FA 4D F2 | 	cmps	result1, #0 wz
04b80     01 FA 65 A6 |  if_e	neg	result1, #1
04b84     04 00 90 AD |  if_e	jmp	#LR__0371
04b88                 | LR__0370
04b88     00 FA 05 F6 | 	mov	result1, #0
04b8c                 | LR__0371
04b8c     A7 F0 03 F6 | 	mov	ptra, fp
04b90     B2 00 A0 FD | 	call	#popregs_
04b94                 | _isstring_ret
04b94     2D 00 64 FD | 	ret
04b98                 | 
04b98                 | ' 
04b98                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
04b98                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
04b98                 | ' 
04b98                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
04b98                 | ' '----------------------Reverse Polish notation precompiler -----------------------------------------------------------------------------
04b98                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
04b98                 | ' 
04b98                 | ' '----- delete a line from a program
04b98                 | ' 
04b98                 | ' function deleteline(aline as ulong) as integer
04b98                 | _deleteline
04b98     03 4A 05 F6 | 	mov	COUNT_, #3
04b9c     A8 00 A0 FD | 	call	#pushregs_
04ba0     2C F0 07 F1 | 	add	ptra, #44
04ba4     04 4E 05 F1 | 	add	fp, #4
04ba8     A7 12 62 FC | 	wrlong	arg01, fp
04bac     69 00 00 FF 
04bb0     58 E5 05 F1 | 	add	objptr, ##54104
04bb4     F2 1E 02 FB | 	rdlong	local01, objptr
04bb8     0C 4E 05 F1 | 	add	fp, #12
04bbc     A7 1E 62 FC | 	wrlong	local01, fp
04bc0     10 4E 85 F1 | 	sub	fp, #16
04bc4                 | ' 
04bc4                 | ' 
04bc4                 | ' searchptr=programstart
04bc4                 | ' 
04bc4                 | ' do
04bc4     5E 00 00 FF 
04bc8     98 E4 85 F1 | 	sub	objptr, ##48280
04bcc                 | LR__0380
04bcc     14 4E 05 F1 | 	add	fp, #20
04bd0     A7 12 02 F6 | 	mov	arg01, fp
04bd4     04 4E 85 F1 | 	sub	fp, #4
04bd8     A7 14 02 FB | 	rdlong	arg02, fp
04bdc     10 4E 85 F1 | 	sub	fp, #16
04be0     18 16 06 F6 | 	mov	arg03, #24
04be4     A0 36 B1 FD | 	call	#_psram_spin2_read1
04be8     10 4E 05 F1 | 	add	fp, #16
04bec     A7 1E 02 FB | 	rdlong	local01, fp
04bf0     08 4E 85 F1 | 	sub	fp, #8
04bf4     A7 1E 62 FC | 	wrlong	local01, fp
04bf8     20 4E 05 F1 | 	add	fp, #32
04bfc     A7 1E 02 FB | 	rdlong	local01, fp
04c00     18 4E 85 F1 | 	sub	fp, #24
04c04     A7 1E 62 FC | 	wrlong	local01, fp
04c08     04 4E 05 F1 | 	add	fp, #4
04c0c     A7 1E 02 FB | 	rdlong	local01, fp
04c10     10 4E 85 F1 | 	sub	fp, #16
04c14     A7 16 02 FB | 	rdlong	arg03, fp
04c18     04 4E 85 F1 | 	sub	fp, #4
04c1c     0B 1F 12 F2 | 	cmp	local01, arg03 wc
04c20     28 4E 05 C1 |  if_b	add	fp, #40
04c24     A7 20 02 CB |  if_b	rdlong	local02, fp
04c28     28 4E 85 C1 |  if_b	sub	fp, #40
04c2c     FF FF 3F CF 
04c30     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
04c34     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0380
04c38     0B 00 00 FF 
04c3c     C0 E4 85 F1 | 	sub	objptr, ##5824
04c40                 | ' 
04c40                 | ' 
04c40                 | ' if header(0)<>aline then return -1
04c40     14 4E 05 F1 | 	add	fp, #20
04c44     A7 1E 02 FB | 	rdlong	local01, fp
04c48     10 4E 85 F1 | 	sub	fp, #16
04c4c     A7 22 02 FB | 	rdlong	local03, fp
04c50     04 4E 85 F1 | 	sub	fp, #4
04c54     11 1F 0A F2 | 	cmp	local01, local03 wz
04c58     01 FA 65 56 |  if_ne	neg	result1, #1
04c5c     4C 03 90 5D |  if_ne	jmp	#LR__0386
04c60     08 4E 05 F1 | 	add	fp, #8
04c64     A7 12 02 FB | 	rdlong	arg01, fp
04c68     08 4E 85 F1 | 	sub	fp, #8
04c6c     01 14 66 F6 | 	neg	arg02, #1
04c70     01 16 06 F6 | 	mov	arg03, #1
04c74     00 18 06 F6 | 	mov	arg04, #0
04c78     0B 00 00 FF 
04c7c     C0 E4 05 F1 | 	add	objptr, ##5824
04c80                 | '     return fill(addr, pattern, count, listPtr, 4)
04c80     04 1A 06 F6 | 	mov	arg05, #4
04c84     38 37 B1 FD | 	call	#_psram_spin2_fill
04c88     0B 00 00 FF 
04c8c     C0 E4 85 F1 | 	sub	objptr, ##5824
04c90                 | ' 
04c90                 | ' pslpoke(lineptr2,$FFFF_FFFF) ' flag the deleted line
04c90                 | ' 
04c90                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is one and only line in the program
04c90     28 4E 05 F1 | 	add	fp, #40
04c94     A7 1E 02 FB | 	rdlong	local01, fp
04c98     28 4E 85 F1 | 	sub	fp, #40
04c9c     FF FF 3F FF 
04ca0     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
04ca4     24 4E 05 A1 |  if_e	add	fp, #36
04ca8     A7 22 02 AB |  if_e	rdlong	local03, fp
04cac     24 4E 85 A1 |  if_e	sub	fp, #36
04cb0     FF FF 7F AF 
04cb4     FF 23 0E A2 |  if_e	cmp	local03, ##-1 wz
04cb8     90 00 90 5D |  if_ne	jmp	#LR__0381
04cbc     69 00 00 FF 
04cc0     58 E5 05 F1 | 	add	objptr, ##54104
04cc4     F2 00 68 FC | 	wrlong	#0, objptr
04cc8     07 00 00 FF 
04ccc     28 E4 85 F1 | 	sub	objptr, ##3624
04cd0     F2 00 68 FC | 	wrlong	#0, objptr
04cd4     07 00 00 FF 
04cd8     2C E4 05 F1 | 	add	objptr, ##3628
04cdc     F2 00 68 FC | 	wrlong	#0, objptr
04ce0     04 E4 05 F1 | 	add	objptr, #4
04ce4     FF FF FF FF 
04ce8     F2 FE 6B FC | 	wrlong	##-1, objptr
04cec     00 12 06 F6 | 	mov	arg01, #0
04cf0     10 E4 85 F1 | 	sub	objptr, #16
04cf4     F2 00 68 FC | 	wrlong	#0, objptr
04cf8     01 14 66 F6 | 	neg	arg02, #1
04cfc     01 16 06 F6 | 	mov	arg03, #1
04d00     00 18 06 F6 | 	mov	arg04, #0
04d04     5E 00 00 FF 
04d08     90 E4 85 F1 | 	sub	objptr, ##48272
04d0c                 | '     return fill(addr, pattern, count, listPtr, 4)
04d0c     04 1A 06 F6 | 	mov	arg05, #4
04d10     AC 36 B1 FD | 	call	#_psram_spin2_fill
04d14     10 12 06 F6 | 	mov	arg01, #16
04d18     01 14 66 F6 | 	neg	arg02, #1
04d1c     01 16 06 F6 | 	mov	arg03, #1
04d20     00 18 06 F6 | 	mov	arg04, #0
04d24                 | '     return fill(addr, pattern, count, listPtr, 4)
04d24     04 1A 06 F6 | 	mov	arg05, #4
04d28     94 36 B1 FD | 	call	#_psram_spin2_fill
04d2c     14 12 06 F6 | 	mov	arg01, #20
04d30     1E 14 CE F9 | 	bmask	arg02, #30
04d34     01 16 06 F6 | 	mov	arg03, #1
04d38     00 18 06 F6 | 	mov	arg04, #0
04d3c                 | '     return fill(addr, pattern, count, listPtr, 4)
04d3c     04 1A 06 F6 | 	mov	arg05, #4
04d40     7C 36 B1 FD | 	call	#_psram_spin2_fill
04d44     0B 00 00 FF 
04d48     C0 E4 85 F1 | 	sub	objptr, ##5824
04d4c                 | LR__0381
04d4c                 | ' 
04d4c                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' this is the last, and not first, line of the program
04d4c     28 4E 05 F1 | 	add	fp, #40
04d50     A7 1E 02 FB | 	rdlong	local01, fp
04d54     28 4E 85 F1 | 	sub	fp, #40
04d58     FF FF 3F FF 
04d5c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
04d60     88 00 90 5D |  if_ne	jmp	#LR__0382
04d64     24 4E 05 F1 | 	add	fp, #36
04d68     A7 22 02 FB | 	rdlong	local03, fp
04d6c     24 4E 85 F1 | 	sub	fp, #36
04d70     FF FF 7F FF 
04d74     FF 23 0E F2 | 	cmp	local03, ##-1 wz
04d78     70 00 90 AD |  if_e	jmp	#LR__0382
04d7c     24 4E 05 F1 | 	add	fp, #36
04d80     A7 12 02 FB | 	rdlong	arg01, fp
04d84     24 4E 85 F1 | 	sub	fp, #36
04d88     14 12 06 F1 | 	add	arg01, #20
04d8c     1E 14 CE F9 | 	bmask	arg02, #30
04d90     01 16 06 F6 | 	mov	arg03, #1
04d94     00 18 06 F6 | 	mov	arg04, #0
04d98     0B 00 00 FF 
04d9c     C0 E4 05 F1 | 	add	objptr, ##5824
04da0                 | '     return fill(addr, pattern, count, listPtr, 4)
04da0     04 1A 06 F6 | 	mov	arg05, #4
04da4     18 36 B1 FD | 	call	#_psram_spin2_fill
04da8     24 4E 05 F1 | 	add	fp, #36
04dac     A7 1E 02 FB | 	rdlong	local01, fp
04db0     5E 00 00 FF 
04db4     A0 E4 05 F1 | 	add	objptr, ##48288
04db8     F2 1E 62 FC | 	wrlong	local01, objptr
04dbc     69 00 00 FF 
04dc0     60 E5 85 F1 | 	sub	objptr, ##54112
04dc4     A7 12 02 FB | 	rdlong	arg01, fp
04dc8     24 4E 85 F1 | 	sub	fp, #36
04dcc     40 0C B1 FD | 	call	#_pslpeek
04dd0     69 00 00 FF 
04dd4     5C E5 05 F1 | 	add	objptr, ##54108
04dd8     F2 FA 61 FC | 	wrlong	result1, objptr
04ddc     69 00 00 FF 
04de0     5C E5 85 F1 | 	sub	objptr, ##54108
04de4                 | '   pslpoke(header(4)+20,$7FFF_FFFF) ' unlink the previous line
04de4                 | '   lastlineptr=header(4)            ' keep last line pointer to avoid searching while sequentially adding a new line
04de4                 | '   lastline=pslpeek(header(4))
04de4                 | '   return 0
04de4     00 FA 05 F6 | 	mov	result1, #0
04de8     C0 01 90 FD | 	jmp	#LR__0386
04dec                 | LR__0382
04dec                 | ' 
04dec                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is the first line, but not the last
04dec     28 4E 05 F1 | 	add	fp, #40
04df0     A7 1E 02 FB | 	rdlong	local01, fp
04df4     28 4E 85 F1 | 	sub	fp, #40
04df8     FF FF 3F FF 
04dfc     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
04e00     6C 00 90 AD |  if_e	jmp	#LR__0383
04e04     24 4E 05 F1 | 	add	fp, #36
04e08     A7 22 02 FB | 	rdlong	local03, fp
04e0c     24 4E 85 F1 | 	sub	fp, #36
04e10     FF FF 7F FF 
04e14     FF 23 0E F2 | 	cmp	local03, ##-1 wz
04e18     54 00 90 5D |  if_ne	jmp	#LR__0383
04e1c     28 4E 05 F1 | 	add	fp, #40
04e20     A7 12 02 FB | 	rdlong	arg01, fp
04e24     28 4E 85 F1 | 	sub	fp, #40
04e28     10 12 06 F1 | 	add	arg01, #16
04e2c     01 14 66 F6 | 	neg	arg02, #1
04e30     01 16 06 F6 | 	mov	arg03, #1
04e34     00 18 06 F6 | 	mov	arg04, #0
04e38     0B 00 00 FF 
04e3c     C0 E4 05 F1 | 	add	objptr, ##5824
04e40                 | '     return fill(addr, pattern, count, listPtr, 4)
04e40     04 1A 06 F6 | 	mov	arg05, #4
04e44     78 35 B1 FD | 	call	#_psram_spin2_fill
04e48     28 4E 05 F1 | 	add	fp, #40
04e4c     A7 1E 02 FB | 	rdlong	local01, fp
04e50     28 4E 85 F1 | 	sub	fp, #40
04e54     5E 00 00 FF 
04e58     98 E4 05 F1 | 	add	objptr, ##48280
04e5c     F2 1E 62 FC | 	wrlong	local01, objptr
04e60     69 00 00 FF 
04e64     58 E5 85 F1 | 	sub	objptr, ##54104
04e68                 | ' '   print "deleted first line"
04e68                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
04e68                 | '   programstart=header(5) ' adjust the program start to point on the first new line
04e68                 | '   return 0
04e68     00 FA 05 F6 | 	mov	result1, #0
04e6c     3C 01 90 FD | 	jmp	#LR__0386
04e70                 | LR__0383
04e70                 | ' 
04e70                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' the line is not first and not last
04e70     28 4E 05 F1 | 	add	fp, #40
04e74     A7 1E 02 FB | 	rdlong	local01, fp
04e78     28 4E 85 F1 | 	sub	fp, #40
04e7c     FF FF 3F FF 
04e80     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
04e84     24 4E 05 51 |  if_ne	add	fp, #36
04e88     A7 22 02 5B |  if_ne	rdlong	local03, fp
04e8c     24 4E 85 51 |  if_ne	sub	fp, #36
04e90     FF FF 7F 5F 
04e94     FF 23 0E 52 |  if_ne	cmp	local03, ##-1 wz
04e98     68 00 90 AD |  if_e	jmp	#LR__0384
04e9c     28 4E 05 F1 | 	add	fp, #40
04ea0     A7 12 02 FB | 	rdlong	arg01, fp
04ea4     10 12 06 F1 | 	add	arg01, #16
04ea8     04 4E 85 F1 | 	sub	fp, #4
04eac     A7 14 02 FB | 	rdlong	arg02, fp
04eb0     24 4E 85 F1 | 	sub	fp, #36
04eb4     01 16 06 F6 | 	mov	arg03, #1
04eb8     00 18 06 F6 | 	mov	arg04, #0
04ebc     0B 00 00 FF 
04ec0     C0 E4 05 F1 | 	add	objptr, ##5824
04ec4                 | '     return fill(addr, pattern, count, listPtr, 4)
04ec4     04 1A 06 F6 | 	mov	arg05, #4
04ec8     F4 34 B1 FD | 	call	#_psram_spin2_fill
04ecc     24 4E 05 F1 | 	add	fp, #36
04ed0     A7 12 02 FB | 	rdlong	arg01, fp
04ed4     14 12 06 F1 | 	add	arg01, #20
04ed8     04 4E 05 F1 | 	add	fp, #4
04edc     A7 14 02 FB | 	rdlong	arg02, fp
04ee0     28 4E 85 F1 | 	sub	fp, #40
04ee4     01 16 06 F6 | 	mov	arg03, #1
04ee8     00 18 06 F6 | 	mov	arg04, #0
04eec                 | '     return fill(addr, pattern, count, listPtr, 4)
04eec     04 1A 06 F6 | 	mov	arg05, #4
04ef0     CC 34 B1 FD | 	call	#_psram_spin2_fill
04ef4     0B 00 00 FF 
04ef8     C0 E4 85 F1 | 	sub	objptr, ##5824
04efc                 | '    pslpoke(header(5)+16,header(4))  
04efc                 | '    pslpoke(header(4)+20, header(5))
04efc                 | '    return 0
04efc     00 FA 05 F6 | 	mov	result1, #0
04f00     A8 00 90 FD | 	jmp	#LR__0386
04f04                 | LR__0384
04f04     10 4E 05 F1 | 	add	fp, #16
04f08     A7 1E 02 FB | 	rdlong	local01, fp
04f0c     08 4E 85 F1 | 	sub	fp, #8
04f10     A7 1E 62 FC | 	wrlong	local01, fp
04f14     69 00 00 FF 
04f18     58 E5 05 F1 | 	add	objptr, ##54104
04f1c     F2 1E 02 FB | 	rdlong	local01, objptr
04f20     08 4E 05 F1 | 	add	fp, #8
04f24     A7 1E 62 FC | 	wrlong	local01, fp
04f28     10 4E 85 F1 | 	sub	fp, #16
04f2c                 | ' 
04f2c                 | ' 
04f2c                 | ' 
04f2c                 | ' ' now find if the deleted line was a target for goto and replace fast_goto with find_goto
04f2c                 | ' 
04f2c                 | ' lineptr2=searchptr
04f2c                 | ' searchptr=programstart
04f2c                 | ' 
04f2c                 | ' do
04f2c     5E 00 00 FF 
04f30     98 E4 85 F1 | 	sub	objptr, ##48280
04f34                 | LR__0385
04f34     14 4E 05 F1 | 	add	fp, #20
04f38     A7 12 02 F6 | 	mov	arg01, fp
04f3c     04 4E 85 F1 | 	sub	fp, #4
04f40     A7 14 02 FB | 	rdlong	arg02, fp
04f44     10 4E 85 F1 | 	sub	fp, #16
04f48     18 16 06 F6 | 	mov	arg03, #24
04f4c     38 33 B1 FD | 	call	#_psram_spin2_read1
04f50     10 4E 05 F1 | 	add	fp, #16
04f54     A7 1E 02 FB | 	rdlong	local01, fp
04f58     08 4E 85 F1 | 	sub	fp, #8
04f5c     A7 1E 62 FC | 	wrlong	local01, fp
04f60     20 4E 05 F1 | 	add	fp, #32
04f64     A7 1E 02 FB | 	rdlong	local01, fp
04f68     18 4E 85 F1 | 	sub	fp, #24
04f6c     A7 1E 62 FC | 	wrlong	local01, fp
04f70     04 4E 05 F1 | 	add	fp, #4
04f74     A7 1E 02 FB | 	rdlong	local01, fp
04f78     10 4E 85 F1 | 	sub	fp, #16
04f7c     A7 22 02 FB | 	rdlong	local03, fp
04f80     04 4E 85 F1 | 	sub	fp, #4
04f84     11 1F 12 F2 | 	cmp	local01, local03 wc
04f88     28 4E 05 C1 |  if_b	add	fp, #40
04f8c     A7 20 02 CB |  if_b	rdlong	local02, fp
04f90     28 4E 85 C1 |  if_b	sub	fp, #40
04f94     FF FF 3F CF 
04f98     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
04f9c     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0385
04fa0     0B 00 00 FF 
04fa4     C0 E4 85 F1 | 	sub	objptr, ##5824
04fa8     00 FA 05 F6 | 	mov	result1, #0
04fac                 | LR__0386
04fac     A7 F0 03 F6 | 	mov	ptra, fp
04fb0     B2 00 A0 FD | 	call	#popregs_
04fb4                 | _deleteline_ret
04fb4     2D 00 64 FD | 	ret
04fb8                 | 
04fb8                 | ' 
04fb8                 | ' sub save_line
04fb8                 | _save_line
04fb8     03 4A 05 F6 | 	mov	COUNT_, #3
04fbc     A8 00 A0 FD | 	call	#pushregs_
04fc0     69 00 00 FF 
04fc4     50 E5 05 F1 | 	add	objptr, ##54096
04fc8     F2 16 02 FB | 	rdlong	arg03, objptr
04fcc     01 16 06 F1 | 	add	arg03, #1
04fd0     05 00 00 FF 
04fd4     18 E4 85 F1 | 	sub	objptr, ##2584
04fd8     F2 14 02 FB | 	rdlong	arg02, objptr
04fdc     0B 15 02 FD | 	qmul	arg02, arg03
04fe0     0E 00 00 FF 
04fe4     44 E4 85 F1 | 	sub	objptr, ##7236
04fe8     F2 12 02 FB | 	rdlong	arg01, objptr
04fec     56 00 00 FF 
04ff0     F4 E4 85 F1 | 	sub	objptr, ##44276
04ff4     09 1F 02 F6 | 	mov	local01, arg01
04ff8     18 20 62 FD | 	getqx	local02
04ffc     97 06 48 FB | 	callpa	#(@LR__0391-@LR__0390)>>2,fcache_load_ptr_
05000                 | LR__0390
05000     0F FB C9 FA | 	rdbyte	result1, local01 wz
05004     01 1E 06 51 |  if_ne	add	local01, #1
05008     F4 FF 9F 5D |  if_ne	jmp	#LR__0390
0500c                 | LR__0391
0500c     09 1F 82 F1 | 	sub	local01, arg01
05010     03 1E CE F7 | 	test	local01, #3 wz
05014     02 1E 46 50 |  if_ne	shr	local01, #2
05018     01 1E 06 51 |  if_ne	add	local01, #1
0501c     02 1E 66 50 |  if_ne	shl	local01, #2
05020     10 23 02 F6 | 	mov	local03, local02
05024     0F 23 02 F1 | 	add	local03, local01
05028     62 00 00 FF 
0502c     30 E5 05 F1 | 	add	objptr, ##50480
05030     F2 16 02 FB | 	rdlong	arg03, objptr
05034     10 17 02 F1 | 	add	arg03, local02
05038     04 00 00 FF 
0503c     28 E4 05 F1 | 	add	objptr, ##2088
05040     F2 16 62 FC | 	wrlong	arg03, objptr
05044     04 E4 05 F1 | 	add	objptr, #4
05048     F2 1E 62 FC | 	wrlong	local01, objptr
0504c     0C E4 85 F1 | 	sub	objptr, #12
05050     F2 12 02 F6 | 	mov	arg01, objptr
05054     04 00 00 FF 
05058     20 E4 85 F1 | 	sub	objptr, ##2080
0505c     F2 14 02 FB | 	rdlong	arg02, objptr
05060     10 17 02 F6 | 	mov	arg03, local02
05064     57 00 00 FF 
05068     70 E4 85 F1 | 	sub	objptr, ##44656
0506c     B4 32 B1 FD | 	call	#_psram_spin2_write
05070     4B 00 00 FF 
05074     34 E4 05 F1 | 	add	objptr, ##38452
05078     F2 12 02 FB | 	rdlong	arg01, objptr
0507c     0C 00 00 FF 
05080     3C E4 05 F1 | 	add	objptr, ##6204
05084     F2 14 02 FB | 	rdlong	arg02, objptr
05088     10 15 02 F1 | 	add	arg02, local02
0508c     0F 17 02 F6 | 	mov	arg03, local01
05090     57 00 00 FF 
05094     70 E4 85 F1 | 	sub	objptr, ##44656
05098     88 32 B1 FD | 	call	#_psram_spin2_write
0509c     57 00 00 FF 
050a0     70 E4 05 F1 | 	add	objptr, ##44656
050a4     F2 1E 02 FB | 	rdlong	local01, objptr
050a8     11 1F 02 F1 | 	add	local01, local03
050ac     F2 1E 62 FC | 	wrlong	local01, objptr
050b0     62 00 00 FF 
050b4     30 E5 85 F1 | 	sub	objptr, ##50480
050b8     A7 F0 03 F6 | 	mov	ptra, fp
050bc     B2 00 A0 FD | 	call	#popregs_
050c0                 | _save_line_ret
050c0     2D 00 64 FD | 	ret
050c4                 | 
050c4                 | ' 
050c4                 | ' 
050c4                 | ' function insertline(aline as ulong) as integer
050c4                 | _insertline
050c4     02 4A 05 F6 | 	mov	COUNT_, #2
050c8     A8 00 A0 FD | 	call	#pushregs_
050cc     28 F0 07 F1 | 	add	ptra, #40
050d0     04 4E 05 F1 | 	add	fp, #4
050d4     A7 12 62 FC | 	wrlong	arg01, fp
050d8     69 00 00 FF 
050dc     58 E5 05 F1 | 	add	objptr, ##54104
050e0     F2 1E 02 FB | 	rdlong	local01, objptr
050e4     04 4E 05 F1 | 	add	fp, #4
050e8     A7 1E 62 FC | 	wrlong	local01, fp
050ec     08 4E 85 F1 | 	sub	fp, #8
050f0                 | ' 
050f0                 | ' do
050f0     5E 00 00 FF 
050f4     98 E4 85 F1 | 	sub	objptr, ##48280
050f8                 | LR__0400
050f8     10 4E 05 F1 | 	add	fp, #16
050fc     A7 12 02 F6 | 	mov	arg01, fp
05100     08 4E 85 F1 | 	sub	fp, #8
05104     A7 14 02 FB | 	rdlong	arg02, fp
05108     08 4E 85 F1 | 	sub	fp, #8
0510c     18 16 06 F6 | 	mov	arg03, #24
05110     74 31 B1 FD | 	call	#_psram_spin2_read1
05114     08 4E 05 F1 | 	add	fp, #8
05118     A7 1E 02 FB | 	rdlong	local01, fp
0511c     04 4E 05 F1 | 	add	fp, #4
05120     A7 1E 62 FC | 	wrlong	local01, fp
05124     18 4E 05 F1 | 	add	fp, #24
05128     A7 1E 02 FB | 	rdlong	local01, fp
0512c     1C 4E 85 F1 | 	sub	fp, #28
05130     A7 1E 62 FC | 	wrlong	local01, fp
05134     08 4E 05 F1 | 	add	fp, #8
05138     A7 1E 02 FB | 	rdlong	local01, fp
0513c     0C 4E 85 F1 | 	sub	fp, #12
05140     A7 16 02 FB | 	rdlong	arg03, fp
05144     04 4E 85 F1 | 	sub	fp, #4
05148     0B 1F 12 F2 | 	cmp	local01, arg03 wc
0514c     24 4E 05 C1 |  if_b	add	fp, #36
05150     A7 20 02 CB |  if_b	rdlong	local02, fp
05154     24 4E 85 C1 |  if_b	sub	fp, #36
05158     FF FF 3F CF 
0515c     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
05160     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0400
05164     0B 00 00 FF 
05168     C0 E4 85 F1 | 	sub	objptr, ##5824
0516c                 | ' 
0516c                 | ' if header(0)=aline then return -1 ' delete it first
0516c     10 4E 05 F1 | 	add	fp, #16
05170     A7 1E 02 FB | 	rdlong	local01, fp
05174     0C 4E 85 F1 | 	sub	fp, #12
05178     A7 20 02 FB | 	rdlong	local02, fp
0517c     04 4E 85 F1 | 	sub	fp, #4
05180     10 1F 0A F2 | 	cmp	local01, local02 wz
05184     01 FA 65 A6 |  if_e	neg	result1, #1
05188     74 01 90 AD |  if_e	jmp	#LR__0403
0518c                 | ' if header(0)<aline then return -2 ' end of program reached
0518c     10 4E 05 F1 | 	add	fp, #16
05190     A7 1E 02 FB | 	rdlong	local01, fp
05194     0C 4E 85 F1 | 	sub	fp, #12
05198     A7 16 02 FB | 	rdlong	arg03, fp
0519c     04 4E 85 F1 | 	sub	fp, #4
051a0     0B 1F 12 F2 | 	cmp	local01, arg03 wc
051a4     02 FA 65 C6 |  if_b	neg	result1, #2
051a8     54 01 90 CD |  if_b	jmp	#LR__0403
051ac                 | ' 
051ac                 | ' if  header(4)=$FFFF_FFFF then ' this is one first line in the program so the inserted line will be new first
051ac     20 4E 05 F1 | 	add	fp, #32
051b0     A7 1E 02 FB | 	rdlong	local01, fp
051b4     20 4E 85 F1 | 	sub	fp, #32
051b8     FF FF 7F FF 
051bc     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
051c0     84 00 90 5D |  if_ne	jmp	#LR__0401
051c4     62 00 00 FF 
051c8     30 E5 05 F1 | 	add	objptr, ##50480
051cc     F2 1E 02 FB | 	rdlong	local01, objptr
051d0     07 00 00 FF 
051d4     28 E4 05 F1 | 	add	objptr, ##3624
051d8     F2 1E 62 FC | 	wrlong	local01, objptr
051dc     0C 4E 05 F1 | 	add	fp, #12
051e0     A7 12 02 FB | 	rdlong	arg01, fp
051e4     0C 4E 85 F1 | 	sub	fp, #12
051e8     10 12 06 F1 | 	add	arg01, #16
051ec     07 00 00 FF 
051f0     28 E4 85 F1 | 	sub	objptr, ##3624
051f4     F2 14 02 FB | 	rdlong	arg02, objptr
051f8     01 16 06 F6 | 	mov	arg03, #1
051fc     00 18 06 F6 | 	mov	arg04, #0
05200     57 00 00 FF 
05204     70 E4 85 F1 | 	sub	objptr, ##44656
05208                 | '     return fill(addr, pattern, count, listPtr, 4)
05208     04 1A 06 F6 | 	mov	arg05, #4
0520c     B0 31 B1 FD | 	call	#_psram_spin2_fill
05210     5B 00 00 FF 
05214     A0 E4 05 F1 | 	add	objptr, ##46752
05218     FF FF FF FF 
0521c     F2 FE 6B FC | 	wrlong	##-1, objptr
05220     0C 4E 05 F1 | 	add	fp, #12
05224     A7 1E 02 FB | 	rdlong	local01, fp
05228     0C 4E 85 F1 | 	sub	fp, #12
0522c     04 E4 05 F1 | 	add	objptr, #4
05230     F2 1E 62 FC | 	wrlong	local01, objptr
05234     66 00 00 FF 
05238     64 E5 85 F1 | 	sub	objptr, ##52580
0523c     78 FD BF FD | 	call	#_save_line
05240                 | '   programstart=programptr
05240                 | '   pslpoke(lineptr2+16,programptr)
05240                 | '   ucompiledline(4)=$FFFF_FFFF
05240                 | '   ucompiledline(5)=lineptr2
05240                 | '   save_line
05240                 | '   return 0
05240     00 FA 05 F6 | 	mov	result1, #0
05244     B8 00 90 FD | 	jmp	#LR__0403
05248                 | LR__0401
05248                 | ' 
05248                 | ' if header(4)<>$FFFF_FFFF then ' this is not first line of the program. It doesn't matter if it is last as we will insert it before
05248     20 4E 05 F1 | 	add	fp, #32
0524c     A7 1E 02 FB | 	rdlong	local01, fp
05250     20 4E 85 F1 | 	sub	fp, #32
05254     FF FF 7F FF 
05258     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
0525c     9C 00 90 AD |  if_e	jmp	#LR__0402
05260     20 4E 05 F1 | 	add	fp, #32
05264     A7 1E 02 FB | 	rdlong	local01, fp
05268     66 00 00 FF 
0526c     60 E5 05 F1 | 	add	objptr, ##52576
05270     F2 1E 62 FC | 	wrlong	local01, objptr
05274     14 4E 85 F1 | 	sub	fp, #20
05278     A7 1E 02 FB | 	rdlong	local01, fp
0527c     04 E4 05 F1 | 	add	objptr, #4
05280     F2 1E 62 FC | 	wrlong	local01, objptr
05284     A7 12 02 FB | 	rdlong	arg01, fp
05288     0C 4E 85 F1 | 	sub	fp, #12
0528c     10 12 06 F1 | 	add	arg01, #16
05290     04 00 00 FF 
05294     34 E4 85 F1 | 	sub	objptr, ##2100
05298     F2 14 02 FB | 	rdlong	arg02, objptr
0529c     01 16 06 F6 | 	mov	arg03, #1
052a0     00 18 06 F6 | 	mov	arg04, #0
052a4     57 00 00 FF 
052a8     70 E4 85 F1 | 	sub	objptr, ##44656
052ac                 | '     return fill(addr, pattern, count, listPtr, 4)
052ac     04 1A 06 F6 | 	mov	arg05, #4
052b0     0C 31 B1 FD | 	call	#_psram_spin2_fill
052b4     20 4E 05 F1 | 	add	fp, #32
052b8     A7 12 02 FB | 	rdlong	arg01, fp
052bc     20 4E 85 F1 | 	sub	fp, #32
052c0     14 12 06 F1 | 	add	arg01, #20
052c4     57 00 00 FF 
052c8     70 E4 05 F1 | 	add	objptr, ##44656
052cc     F2 14 02 FB | 	rdlong	arg02, objptr
052d0     01 16 06 F6 | 	mov	arg03, #1
052d4     00 18 06 F6 | 	mov	arg04, #0
052d8     57 00 00 FF 
052dc     70 E4 85 F1 | 	sub	objptr, ##44656
052e0                 | '     return fill(addr, pattern, count, listPtr, 4)
052e0     04 1A 06 F6 | 	mov	arg05, #4
052e4     D8 30 B1 FD | 	call	#_psram_spin2_fill
052e8     0B 00 00 FF 
052ec     C0 E4 85 F1 | 	sub	objptr, ##5824
052f0     C4 FC BF FD | 	call	#_save_line
052f4                 | '   ucompiledline(4)=header(4)
052f4                 | '   ucompiledline(5)=lineptr2
052f4                 | '   pslpoke(lineptr2+16,programptr)
052f4                 | '   pslpoke(header(4)+20,programptr)
052f4                 | '   save_line
052f4                 | '   return 0
052f4     00 FA 05 F6 | 	mov	result1, #0
052f8     04 00 90 FD | 	jmp	#LR__0403
052fc                 | LR__0402
052fc     00 FA 05 F6 | 	mov	result1, #0
05300                 | LR__0403
05300     A7 F0 03 F6 | 	mov	ptra, fp
05304     B2 00 A0 FD | 	call	#popregs_
05308                 | _insertline_ret
05308     2D 00 64 FD | 	ret
0530c                 | 
0530c                 | ' 
0530c                 | ' sub add_line_at_end(aline) 
0530c                 | _add_line_at_end
0530c     69 00 00 FF 
05310     5C E5 05 F1 | 	add	objptr, ##54108
05314     F2 12 62 FC | 	wrlong	arg01, objptr
05318     04 E4 05 F1 | 	add	objptr, #4
0531c     F2 14 02 FB | 	rdlong	arg02, objptr
05320     03 00 00 FF 
05324     00 E4 85 F1 | 	sub	objptr, ##1536
05328     F2 14 62 FC | 	wrlong	arg02, objptr
0532c     03 00 00 FF 
05330     00 E4 05 F1 | 	add	objptr, ##1536
05334     F2 12 02 FB | 	rdlong	arg01, objptr
05338     14 12 06 F1 | 	add	arg01, #20
0533c     07 00 00 FF 
05340     30 E4 85 F1 | 	sub	objptr, ##3632
05344     F2 14 02 FB | 	rdlong	arg02, objptr
05348     01 16 06 F6 | 	mov	arg03, #1
0534c     00 18 06 F6 | 	mov	arg04, #0
05350     57 00 00 FF 
05354     70 E4 85 F1 | 	sub	objptr, ##44656
05358                 | '     return fill(addr, pattern, count, listPtr, 4)
05358     04 1A 06 F6 | 	mov	arg05, #4
0535c     60 30 B1 FD | 	call	#_psram_spin2_fill
05360     57 00 00 FF 
05364     70 E4 05 F1 | 	add	objptr, ##44656
05368     F2 14 02 FB | 	rdlong	arg02, objptr
0536c     07 00 00 FF 
05370     30 E4 05 F1 | 	add	objptr, ##3632
05374     F2 14 62 FC | 	wrlong	arg02, objptr
05378     02 00 00 FF 
0537c     FC E5 85 F1 | 	sub	objptr, ##1532
05380     FF FF BF FF 
05384     F2 FE 6B FC | 	wrlong	##2147483647, objptr
05388                 | ' 
05388                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
05388                 | ' if programptr=0 then ucompiledline(4)=$FFFFFFFF ' that is the first line
05388     04 00 00 FF 
0538c     34 E4 85 F1 | 	sub	objptr, ##2100
05390     F2 14 0A FB | 	rdlong	arg02, objptr wz
05394     62 00 00 FF 
05398     30 E5 85 F1 | 	sub	objptr, ##50480
0539c     66 00 00 AF 
053a0     60 E5 05 A1 |  if_e	add	objptr, ##52576
053a4     FF FF FF AF 
053a8     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
053ac     66 00 00 AF 
053b0     60 E5 85 A1 |  if_e	sub	objptr, ##52576
053b4     00 FC BF FD | 	call	#_save_line
053b8     62 00 00 FF 
053bc     30 E5 05 F1 | 	add	objptr, ##50480
053c0     F2 12 02 FB | 	rdlong	arg01, objptr
053c4     01 14 66 F6 | 	neg	arg02, #1
053c8     01 16 06 F6 | 	mov	arg03, #1
053cc     00 18 06 F6 | 	mov	arg04, #0
053d0     57 00 00 FF 
053d4     70 E4 85 F1 | 	sub	objptr, ##44656
053d8                 | '     return fill(addr, pattern, count, listPtr, 4)
053d8     04 1A 06 F6 | 	mov	arg05, #4
053dc     E0 2F B1 FD | 	call	#_psram_spin2_fill
053e0     0B 00 00 FF 
053e4     C0 E4 85 F1 | 	sub	objptr, ##5824
053e8                 | _add_line_at_end_ret
053e8     2D 00 64 FD | 	ret
053ec                 | 
053ec                 | ' 
053ec                 | ' function compile_immediate(linetype as ulong) as integer
053ec                 | _compile_immediate
053ec     09 4A 05 F6 | 	mov	COUNT_, #9
053f0     A8 00 A0 FD | 	call	#pushregs_
053f4                 | _compile_immediate_enter
053f4     09 25 0A F6 | 	mov	local04, arg01 wz
053f8     00 26 06 F6 | 	mov	local05, #0
053fc     00 28 06 F6 | 	mov	local06, #0
05400                 | ' 
05400                 | ' ' linetype=cont+1, linetype=0 immediate
05400                 | ' '  : 1: this is the first part of the line that will continue
05400                 | ' ' 2 - this is the continuation of the line
05400                 | ' ' 3 - this is the last continued line
05400                 | ' ' 4 - this is the one and only part
05400                 | ' 
05400                 | ' err=0
05400                 | ' cmd=0
05400                 | ' if linetype=0 then cmd=lparts(0).token : ct=1 : lineptr=0 
05400     2C 00 90 5D |  if_ne	jmp	#LR__0410
05404     54 00 00 FF 
05408     E4 E4 05 F1 | 	add	objptr, ##43236
0540c     F2 28 02 FB | 	rdlong	local06, objptr
05410     02 00 00 FF 
05414     34 E4 05 F1 | 	add	objptr, ##1076
05418     F2 02 68 FC | 	wrlong	#1, objptr
0541c     13 00 00 FF 
05420     38 E4 05 F1 | 	add	objptr, ##9784
05424     F2 00 68 FC | 	wrlong	#0, objptr
05428     69 00 00 FF 
0542c     50 E5 85 F1 | 	sub	objptr, ##54096
05430                 | LR__0410
05430                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 ' don't set lineptr
05430     02 24 0E F2 | 	cmp	local04, #2 wz
05434     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
05438     54 00 00 AF 
0543c     E4 E4 05 A1 |  if_e	add	objptr, ##43236
05440     F2 28 02 AB |  if_e	rdlong	local06, objptr
05444     02 00 00 AF 
05448     34 E4 05 A1 |  if_e	add	objptr, ##1076
0544c     F2 02 68 AC |  if_e	wrlong	#1, objptr
05450     56 00 00 AF 
05454     18 E5 85 A1 |  if_e	sub	objptr, ##44312
05458                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
05458     04 24 0E F2 | 	cmp	local04, #4 wz
0545c     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
05460     2C 00 90 5D |  if_ne	jmp	#LR__0411
05464     54 00 00 FF 
05468     EC E4 05 F1 | 	add	objptr, ##43244
0546c     F2 28 02 FB | 	rdlong	local06, objptr
05470     02 00 00 FF 
05474     2C E4 05 F1 | 	add	objptr, ##1068
05478     F2 04 68 FC | 	wrlong	#2, objptr
0547c     13 00 00 FF 
05480     38 E4 05 F1 | 	add	objptr, ##9784
05484     F2 04 68 FC | 	wrlong	#2, objptr
05488     69 00 00 FF 
0548c     50 E5 85 F1 | 	sub	objptr, ##54096
05490                 | LR__0411
05490                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 ' continued after if/else
05490     05 24 0E F2 | 	cmp	local04, #5 wz
05494     40 00 90 5D |  if_ne	jmp	#LR__0412
05498     56 00 00 FF 
0549c     18 E5 05 F1 | 	add	objptr, ##44312
054a0     F2 2A 02 FB | 	rdlong	local07, objptr
054a4     15 29 02 F6 | 	mov	local06, local07
054a8     03 28 66 F0 | 	shl	local06, #3
054ac     02 00 00 FF 
054b0     38 E4 85 F1 | 	sub	objptr, ##1080
054b4     F2 28 02 F1 | 	add	local06, objptr
054b8     04 28 06 F1 | 	add	local06, #4
054bc     14 29 02 FB | 	rdlong	local06, local06
054c0     01 2A 06 F1 | 	add	local07, #1
054c4     02 00 00 FF 
054c8     38 E4 05 F1 | 	add	objptr, ##1080
054cc     F2 2A 62 FC | 	wrlong	local07, objptr
054d0     56 00 00 FF 
054d4     18 E5 85 F1 | 	sub	objptr, ##44312
054d8                 | LR__0412
054d8     00 2C 06 F6 | 	mov	local08, #0
054dc                 | ' vars=0
054dc                 | ' 'print  "In compile_immediate cmd=:", cmd
054dc                 | ' 451 select case cmd
054dc     40 28 0E F2 | 	cmp	local06, #64 wz
054e0     41 28 0E 52 |  if_ne	cmp	local06, #65 wz
054e4     C8 03 90 AD |  if_e	jmp	#LR__0461
054e8     4C 28 0E F2 | 	cmp	local06, #76 wz
054ec     98 01 90 AD |  if_e	jmp	#LR__0413
054f0     73 28 0E F2 | 	cmp	local06, #115 wz
054f4     9C 01 90 AD |  if_e	jmp	#LR__0414
054f8     74 28 0E F2 | 	cmp	local06, #116 wz
054fc     A0 01 90 AD |  if_e	jmp	#LR__0415
05500     75 28 0E F2 | 	cmp	local06, #117 wz
05504     A4 01 90 AD |  if_e	jmp	#LR__0416
05508     4D 28 0E F2 | 	cmp	local06, #77 wz
0550c     A0 03 90 AD |  if_e	jmp	#LR__0461
05510     42 28 0E F2 | 	cmp	local06, #66 wz
05514     A0 01 90 AD |  if_e	jmp	#LR__0417
05518     43 28 0E F2 | 	cmp	local06, #67 wz
0551c     A4 01 90 AD |  if_e	jmp	#LR__0418
05520     45 28 0E F2 | 	cmp	local06, #69 wz
05524     A8 01 90 AD |  if_e	jmp	#LR__0419
05528     46 28 0E F2 | 	cmp	local06, #70 wz
0552c     AC 01 90 AD |  if_e	jmp	#LR__0420
05530     47 28 0E F2 | 	cmp	local06, #71 wz
05534     B0 01 90 AD |  if_e	jmp	#LR__0421
05538     48 28 0E F2 | 	cmp	local06, #72 wz
0553c     B4 01 90 AD |  if_e	jmp	#LR__0422
05540     49 28 0E F2 | 	cmp	local06, #73 wz
05544     B8 01 90 AD |  if_e	jmp	#LR__0423
05548     44 28 0E F2 | 	cmp	local06, #68 wz
0554c     BC 01 90 AD |  if_e	jmp	#LR__0424
05550     4E 28 0E F2 | 	cmp	local06, #78 wz
05554     C0 01 90 AD |  if_e	jmp	#LR__0425
05558     50 28 0E F2 | 	cmp	local06, #80 wz
0555c     D4 01 90 AD |  if_e	jmp	#LR__0427
05560     51 28 0E F2 | 	cmp	local06, #81 wz
05564     D8 01 90 AD |  if_e	jmp	#LR__0428
05568     52 28 0E F2 | 	cmp	local06, #82 wz
0556c     DC 01 90 AD |  if_e	jmp	#LR__0429
05570     59 28 0E F2 | 	cmp	local06, #89 wz
05574     E0 01 90 AD |  if_e	jmp	#LR__0430
05578     55 28 0E F2 | 	cmp	local06, #85 wz
0557c     E4 01 90 AD |  if_e	jmp	#LR__0431
05580     56 28 0E F2 | 	cmp	local06, #86 wz
05584     E8 01 90 AD |  if_e	jmp	#LR__0432
05588     57 28 0E F2 | 	cmp	local06, #87 wz
0558c     70 28 0E 52 |  if_ne	cmp	local06, #112 wz
05590     1C 03 90 AD |  if_e	jmp	#LR__0461
05594     58 28 0E F2 | 	cmp	local06, #88 wz
05598     E0 01 90 AD |  if_e	jmp	#LR__0433
0559c     4A 28 0E F2 | 	cmp	local06, #74 wz
055a0     E0 01 90 AD |  if_e	jmp	#LR__0434
055a4     4B 28 0E F2 | 	cmp	local06, #75 wz
055a8     E0 01 90 AD |  if_e	jmp	#LR__0435
055ac     89 28 0E F2 | 	cmp	local06, #137 wz
055b0     88 28 0E 52 |  if_ne	cmp	local06, #136 wz
055b4     F8 02 90 AD |  if_e	jmp	#LR__0461
055b8     8A 28 0E F2 | 	cmp	local06, #138 wz
055bc     D4 01 90 AD |  if_e	jmp	#LR__0436
055c0     5A 28 0E F2 | 	cmp	local06, #90 wz
055c4     D8 01 90 AD |  if_e	jmp	#LR__0437
055c8     5C 28 0E F2 | 	cmp	local06, #92 wz
055cc     D8 01 90 AD |  if_e	jmp	#LR__0438
055d0     5D 28 0E F2 | 	cmp	local06, #93 wz
055d4     D8 02 90 AD |  if_e	jmp	#LR__0461
055d8     5E 28 0E F2 | 	cmp	local06, #94 wz
055dc     D4 01 90 AD |  if_e	jmp	#LR__0439
055e0     5F 28 0E F2 | 	cmp	local06, #95 wz
055e4     D8 01 90 AD |  if_e	jmp	#LR__0440
055e8     60 28 0E F2 | 	cmp	local06, #96 wz
055ec     DC 01 90 AD |  if_e	jmp	#LR__0441
055f0     61 28 0E F2 | 	cmp	local06, #97 wz
055f4     E0 01 90 AD |  if_e	jmp	#LR__0442
055f8     63 28 0E F2 | 	cmp	local06, #99 wz
055fc     E4 01 90 AD |  if_e	jmp	#LR__0443
05600     68 28 0E F2 | 	cmp	local06, #104 wz
05604     E8 01 90 AD |  if_e	jmp	#LR__0444
05608     69 28 0E F2 | 	cmp	local06, #105 wz
0560c     EC 01 90 AD |  if_e	jmp	#LR__0445
05610     6D 28 0E F2 | 	cmp	local06, #109 wz
05614     F0 01 90 AD |  if_e	jmp	#LR__0446
05618     6C 28 0E F2 | 	cmp	local06, #108 wz
0561c     F4 01 90 AD |  if_e	jmp	#LR__0447
05620     71 28 0E F2 | 	cmp	local06, #113 wz
05624     F8 01 90 AD |  if_e	jmp	#LR__0448
05628     79 28 0E F2 | 	cmp	local06, #121 wz
0562c     FC 01 90 AD |  if_e	jmp	#LR__0449
05630     77 28 0E F2 | 	cmp	local06, #119 wz
05634     00 02 90 AD |  if_e	jmp	#LR__0450
05638     78 28 0E F2 | 	cmp	local06, #120 wz
0563c     04 02 90 AD |  if_e	jmp	#LR__0451
05640     7C 28 0E F2 | 	cmp	local06, #124 wz
05644     08 02 90 AD |  if_e	jmp	#LR__0452
05648     7D 28 0E F2 | 	cmp	local06, #125 wz
0564c     0C 02 90 AD |  if_e	jmp	#LR__0453
05650     7E 28 0E F2 | 	cmp	local06, #126 wz
05654     10 02 90 AD |  if_e	jmp	#LR__0454
05658     7F 28 0E F2 | 	cmp	local06, #127 wz
0565c     14 02 90 AD |  if_e	jmp	#LR__0455
05660     80 28 0E F2 | 	cmp	local06, #128 wz
05664     18 02 90 AD |  if_e	jmp	#LR__0456
05668     72 28 0E F2 | 	cmp	local06, #114 wz
0566c     1C 02 90 AD |  if_e	jmp	#LR__0457
05670     81 28 0E F2 | 	cmp	local06, #129 wz
05674     1C 02 90 AD |  if_e	jmp	#LR__0458
05678     01 00 00 FF 
0567c     04 28 0E F2 | 	cmp	local06, ##516 wz
05680     1C 02 90 AD |  if_e	jmp	#LR__0459
05684     20 02 90 FD | 	jmp	#LR__0460
05688                 | LR__0413
05688     3C 0F B0 FD | 	call	#_compile_fun_varp
0568c     FD 2C 02 F6 | 	mov	local08, result1
05690     1C 02 90 FD | 	jmp	#LR__0461
05694                 | LR__0414
05694     30 0F B0 FD | 	call	#_compile_fun_varp
05698     FD 2C 02 F6 | 	mov	local08, result1
0569c     10 02 90 FD | 	jmp	#LR__0461
056a0                 | LR__0415
056a0     24 0F B0 FD | 	call	#_compile_fun_varp
056a4     FD 2C 02 F6 | 	mov	local08, result1
056a8     04 02 90 FD | 	jmp	#LR__0461
056ac                 | LR__0416
056ac     18 0F B0 FD | 	call	#_compile_fun_varp
056b0     FD 2C 02 F6 | 	mov	local08, result1
056b4     F8 01 90 FD | 	jmp	#LR__0461
056b8                 | LR__0417
056b8     2C 0B B0 FD | 	call	#_compile_fun_2p
056bc     FD 26 02 F6 | 	mov	local05, result1
056c0     EC 01 90 FD | 	jmp	#LR__0461
056c4                 | LR__0418
056c4     20 0B B0 FD | 	call	#_compile_fun_2p
056c8     FD 26 02 F6 | 	mov	local05, result1
056cc     E0 01 90 FD | 	jmp	#LR__0461
056d0                 | LR__0419
056d0     88 0B B0 FD | 	call	#_compile_fun_3p
056d4     FD 26 02 F6 | 	mov	local05, result1
056d8     D4 01 90 FD | 	jmp	#LR__0461
056dc                 | LR__0420
056dc     7C 0B B0 FD | 	call	#_compile_fun_3p
056e0     FD 26 02 F6 | 	mov	local05, result1
056e4     C8 01 90 FD | 	jmp	#LR__0461
056e8                 | LR__0421
056e8     3C 0C B0 FD | 	call	#_compile_fun_4p
056ec     FD 26 02 F6 | 	mov	local05, result1
056f0     BC 01 90 FD | 	jmp	#LR__0461
056f4                 | LR__0422
056f4     30 0C B0 FD | 	call	#_compile_fun_4p
056f8     FD 26 02 F6 | 	mov	local05, result1
056fc     B0 01 90 FD | 	jmp	#LR__0461
05700                 | LR__0423
05700     30 2D B0 FD | 	call	#_expr
05704                 | ' expr()
05704                 | ' return 0
05704     00 26 06 F6 | 	mov	local05, #0
05708     A4 01 90 FD | 	jmp	#LR__0461
0570c                 | LR__0424
0570c     64 0F B0 FD | 	call	#_compile_print
05710     FD 26 02 F6 | 	mov	local05, result1
05714     54 02 90 FD | 	jmp	#LR__0462
05718                 | LR__0425
05718     01 24 16 F2 | 	cmp	local04, #1 wc
0571c     08 00 90 CD |  if_b	jmp	#LR__0426
05720     B0 29 B0 FD | 	call	#_compile_goto
05724     44 02 90 FD | 	jmp	#LR__0462
05728                 | LR__0426
05728     19 12 06 F6 | 	mov	arg01, #25
0572c     24 01 B1 FD | 	call	#_printerror
05730     38 02 90 FD | 	jmp	#LR__0462
05734                 | LR__0427
05734     FC 2C B0 FD | 	call	#_expr
05738                 | ' expr()
05738                 | ' return 0
05738     00 26 06 F6 | 	mov	local05, #0
0573c     70 01 90 FD | 	jmp	#LR__0461
05740                 | LR__0428
05740     F0 2C B0 FD | 	call	#_expr
05744                 | ' expr()
05744                 | ' return 0
05744     00 26 06 F6 | 	mov	local05, #0
05748     64 01 90 FD | 	jmp	#LR__0461
0574c                 | LR__0429
0574c     E4 2C B0 FD | 	call	#_expr
05750                 | ' expr()
05750                 | ' return 0
05750     00 26 06 F6 | 	mov	local05, #0
05754     58 01 90 FD | 	jmp	#LR__0461
05758                 | LR__0430
05758     D8 2C B0 FD | 	call	#_expr
0575c                 | ' expr()
0575c                 | ' return 0
0575c     00 26 06 F6 | 	mov	local05, #0
05760     4C 01 90 FD | 	jmp	#LR__0461
05764                 | LR__0431
05764     80 0A B0 FD | 	call	#_compile_fun_2p
05768     FD 26 02 F6 | 	mov	local05, result1
0576c     40 01 90 FD | 	jmp	#LR__0461
05770                 | LR__0432
05770     C0 2C B0 FD | 	call	#_expr
05774                 | ' expr()
05774                 | ' return 0
05774     00 26 06 F6 | 	mov	local05, #0
05778     34 01 90 FD | 	jmp	#LR__0461
0577c                 | LR__0433
0577c     CC 15 B0 FD | 	call	#_compile_if
05780     E8 01 90 FD | 	jmp	#LR__0462
05784                 | LR__0434
05784     74 1F B0 FD | 	call	#_compile_for
05788     E0 01 90 FD | 	jmp	#LR__0462
0578c                 | LR__0435
0578c     94 27 B0 FD | 	call	#_compile_next
05790     D8 01 90 FD | 	jmp	#LR__0462
05794                 | LR__0436
05794     9C 2C B0 FD | 	call	#_expr
05798                 | ' expr()
05798                 | ' return 0
05798     00 26 06 F6 | 	mov	local05, #0
0579c     10 01 90 FD | 	jmp	#LR__0461
057a0                 | LR__0437
057a0     E8 16 B0 FD | 	call	#_compile_else
057a4     C4 01 90 FD | 	jmp	#LR__0462
057a8                 | LR__0438
057a8     3C 0A B0 FD | 	call	#_compile_fun_2p
057ac     FD 26 02 F6 | 	mov	local05, result1
057b0     FC 00 90 FD | 	jmp	#LR__0461
057b4                 | LR__0439
057b4     7C 2C B0 FD | 	call	#_expr
057b8                 | ' expr()
057b8                 | ' return 0
057b8     00 26 06 F6 | 	mov	local05, #0
057bc     F0 00 90 FD | 	jmp	#LR__0461
057c0                 | LR__0440
057c0     70 2C B0 FD | 	call	#_expr
057c4                 | ' expr()
057c4                 | ' return 0
057c4     00 26 06 F6 | 	mov	local05, #0
057c8     E4 00 90 FD | 	jmp	#LR__0461
057cc                 | LR__0441
057cc     64 2C B0 FD | 	call	#_expr
057d0                 | ' expr()
057d0                 | ' return 0
057d0     00 26 06 F6 | 	mov	local05, #0
057d4     D8 00 90 FD | 	jmp	#LR__0461
057d8                 | LR__0442
057d8     58 2C B0 FD | 	call	#_expr
057dc                 | ' expr()
057dc                 | ' return 0
057dc     00 26 06 F6 | 	mov	local05, #0
057e0     CC 00 90 FD | 	jmp	#LR__0461
057e4                 | LR__0443
057e4     4C 2C B0 FD | 	call	#_expr
057e8                 | ' expr()
057e8                 | ' return 0
057e8     00 26 06 F6 | 	mov	local05, #0
057ec     C0 00 90 FD | 	jmp	#LR__0461
057f0                 | LR__0444
057f0     40 2C B0 FD | 	call	#_expr
057f4                 | ' expr()
057f4                 | ' return 0
057f4     00 26 06 F6 | 	mov	local05, #0
057f8     B4 00 90 FD | 	jmp	#LR__0461
057fc                 | LR__0445
057fc     34 2C B0 FD | 	call	#_expr
05800                 | ' expr()
05800                 | ' return 0
05800     00 26 06 F6 | 	mov	local05, #0
05804     A8 00 90 FD | 	jmp	#LR__0461
05808                 | LR__0446
05808     50 0A B0 FD | 	call	#_compile_fun_3p
0580c     FD 26 02 F6 | 	mov	local05, result1
05810     9C 00 90 FD | 	jmp	#LR__0461
05814                 | LR__0447
05814     34 0C B0 FD | 	call	#_compile_fun_5p
05818     FD 26 02 F6 | 	mov	local05, result1
0581c     90 00 90 FD | 	jmp	#LR__0461
05820                 | LR__0448
05820     04 0B B0 FD | 	call	#_compile_fun_4p
05824     FD 26 02 F6 | 	mov	local05, result1
05828     84 00 90 FD | 	jmp	#LR__0461
0582c                 | LR__0449
0582c     B8 09 B0 FD | 	call	#_compile_fun_2p
05830     FD 26 02 F6 | 	mov	local05, result1
05834     78 00 90 FD | 	jmp	#LR__0461
05838                 | LR__0450
05838     AC 09 B0 FD | 	call	#_compile_fun_2p
0583c     FD 26 02 F6 | 	mov	local05, result1
05840     6C 00 90 FD | 	jmp	#LR__0461
05844                 | LR__0451
05844     A0 09 B0 FD | 	call	#_compile_fun_2p
05848     FD 26 02 F6 | 	mov	local05, result1
0584c     60 00 90 FD | 	jmp	#LR__0461
05850                 | LR__0452
05850     E0 2B B0 FD | 	call	#_expr
05854                 | ' expr()
05854                 | ' return 0
05854     00 26 06 F6 | 	mov	local05, #0
05858     54 00 90 FD | 	jmp	#LR__0461
0585c                 | LR__0453
0585c     D4 2B B0 FD | 	call	#_expr
05860                 | ' expr()
05860                 | ' return 0
05860     00 26 06 F6 | 	mov	local05, #0
05864     48 00 90 FD | 	jmp	#LR__0461
05868                 | LR__0454
05868     C8 2B B0 FD | 	call	#_expr
0586c                 | ' expr()
0586c                 | ' return 0
0586c     00 26 06 F6 | 	mov	local05, #0
05870     3C 00 90 FD | 	jmp	#LR__0461
05874                 | LR__0455
05874     B0 0A B0 FD | 	call	#_compile_fun_4p
05878     FD 26 02 F6 | 	mov	local05, result1
0587c     30 00 90 FD | 	jmp	#LR__0461
05880                 | LR__0456
05880     B0 2B B0 FD | 	call	#_expr
05884                 | ' expr()
05884                 | ' return 0
05884     00 26 06 F6 | 	mov	local05, #0
05888     24 00 90 FD | 	jmp	#LR__0461
0588c                 | LR__0457
0588c     24 17 B0 FD | 	call	#_compile_dim
05890     D8 00 90 FD | 	jmp	#LR__0462
05894                 | LR__0458
05894     50 09 B0 FD | 	call	#_compile_fun_2p
05898     FD 26 02 F6 | 	mov	local05, result1
0589c     10 00 90 FD | 	jmp	#LR__0461
058a0                 | LR__0459
058a0     20 01 B0 FD | 	call	#_compile_array_assign
058a4     C4 00 90 FD | 	jmp	#LR__0462
058a8                 | LR__0460
058a8     80 08 B0 FD | 	call	#_compile_unknown
058ac     BC 00 90 FD | 	jmp	#LR__0462
058b0                 | LR__0461
058b0     14 23 02 F6 | 	mov	local03, local06
058b4     16 1F 02 F6 | 	mov	local01, local08
058b8     0F 2B 02 F6 | 	mov	local07, local01
058bc     10 2F 02 F6 | 	mov	local09, local02
058c0     11 1F 02 F6 | 	mov	local01, local03
058c4     69 00 00 FF 
058c8     50 E5 05 F1 | 	add	objptr, ##54096
058cc     F2 2C 02 FB | 	rdlong	local08, objptr
058d0     16 29 02 F6 | 	mov	local06, local08
058d4     01 28 66 F0 | 	shl	local06, #1
058d8     16 29 02 F1 | 	add	local06, local08
058dc     02 28 66 F0 | 	shl	local06, #2
058e0     03 00 00 FF 
058e4     00 E4 85 F1 | 	sub	objptr, ##1536
058e8     F2 28 02 F1 | 	add	local06, objptr
058ec     14 2B 62 FC | 	wrlong	local07, local06
058f0     03 00 00 FF 
058f4     00 E4 05 F1 | 	add	objptr, ##1536
058f8     F2 2C 02 FB | 	rdlong	local08, objptr
058fc     16 2B 02 F6 | 	mov	local07, local08
05900     01 2A 66 F0 | 	shl	local07, #1
05904     16 2B 02 F1 | 	add	local07, local08
05908     02 2A 66 F0 | 	shl	local07, #2
0590c     03 00 00 FF 
05910     00 E4 85 F1 | 	sub	objptr, ##1536
05914     F2 2A 02 F1 | 	add	local07, objptr
05918     04 2A 06 F1 | 	add	local07, #4
0591c     15 2F 62 FC | 	wrlong	local09, local07
05920     03 00 00 FF 
05924     00 E4 05 F1 | 	add	objptr, ##1536
05928     F2 2E 02 FB | 	rdlong	local09, objptr
0592c     17 2D 02 F6 | 	mov	local08, local09
05930     01 2C 66 F0 | 	shl	local08, #1
05934     17 2D 02 F1 | 	add	local08, local09
05938     02 2C 66 F0 | 	shl	local08, #2
0593c     03 00 00 FF 
05940     00 E4 85 F1 | 	sub	objptr, ##1536
05944     F2 2C 02 F1 | 	add	local08, objptr
05948     08 2C 06 F1 | 	add	local08, #8
0594c     16 1F 62 FC | 	wrlong	local01, local08
05950     03 00 00 FF 
05954     00 E4 05 F1 | 	add	objptr, ##1536
05958     F2 2A 02 FB | 	rdlong	local07, objptr
0595c     01 2A 06 F1 | 	add	local07, #1
05960     F2 2A 62 FC | 	wrlong	local07, objptr
05964     69 00 00 FF 
05968     50 E5 85 F1 | 	sub	objptr, ##54096
0596c                 | LR__0462
0596c                 | ' 
0596c                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
0596c                 | ' 450 if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end ' end token if the last part or imm
0596c     00 24 0E F2 | 	cmp	local04, #0 wz
05970     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
05974     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
05978     38 00 90 5D |  if_ne	jmp	#LR__0463
0597c     69 00 00 FF 
05980     50 E5 05 F1 | 	add	objptr, ##54096
05984     F2 2E 02 FB | 	rdlong	local09, objptr
05988     17 1F 02 F6 | 	mov	local01, local09
0598c     01 1E 66 F0 | 	shl	local01, #1
05990     17 1F 02 F1 | 	add	local01, local09
05994     02 1E 66 F0 | 	shl	local01, #2
05998     03 00 00 FF 
0599c     00 E4 85 F1 | 	sub	objptr, ##1536
059a0     F2 1E 02 F1 | 	add	local01, objptr
059a4     08 1E 06 F1 | 	add	local01, #8
059a8     0F FD 6B FC | 	wrlong	#510, local01
059ac     66 00 00 FF 
059b0     50 E5 85 F1 | 	sub	objptr, ##52560
059b4                 | LR__0463
059b4                 | ' 
059b4                 | ' ' print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
059b4                 | ' return err
059b4     13 FB 01 F6 | 	mov	result1, local05
059b8     A7 F0 03 F6 | 	mov	ptra, fp
059bc     B2 00 A0 FD | 	call	#popregs_
059c0                 | _compile_immediate_ret
059c0     2D 00 64 FD | 	ret
059c4                 | 
059c4                 | ' 
059c4                 | ' sub compile_array_assign
059c4                 | _compile_array_assign
059c4     0A 4A 05 F6 | 	mov	COUNT_, #10
059c8     A8 00 A0 FD | 	call	#pushregs_
059cc     00 24 06 F6 | 	mov	local04, #0
059d0     56 00 00 FF 
059d4     18 E5 05 F1 | 	add	objptr, ##44312
059d8     F2 26 02 FB | 	rdlong	local05, objptr
059dc     13 FB 01 F6 | 	mov	result1, local05
059e0     01 FA 85 F1 | 	sub	result1, #1
059e4     03 FA 65 F0 | 	shl	result1, #3
059e8     02 00 00 FF 
059ec     38 E4 85 F1 | 	sub	objptr, ##1080
059f0     F2 FA 01 F1 | 	add	result1, objptr
059f4     FD 28 02 FB | 	rdlong	local06, result1
059f8                 | ' numpar=0
059f8                 | ' 'print "In array_assign, lparts(ct).token=",lparts(ct).token,lparts(ct).part$
059f8                 | ' ' todo here: recognize params and t1.result.twowords=numpar
059f8                 | ' varname$=lparts(ct-1).part$' : print "In array_assign, varname$=";varname$
059f8                 | ' if lparts(ct).token=token_lpar then
059f8     03 26 66 F0 | 	shl	local05, #3
059fc     F2 26 02 F1 | 	add	local05, objptr
05a00     04 26 06 F1 | 	add	local05, #4
05a04     13 27 02 FB | 	rdlong	local05, local05
05a08     15 26 0E F2 | 	cmp	local05, #21 wz
05a0c     54 00 00 FF 
05a10     E0 E4 85 F1 | 	sub	objptr, ##43232
05a14     D4 01 90 5D |  if_ne	jmp	#LR__0474
05a18     56 00 00 FF 
05a1c     18 E5 05 F1 | 	add	objptr, ##44312
05a20     F2 2A 02 FB | 	rdlong	local07, objptr
05a24     01 2A 06 F1 | 	add	local07, #1
05a28     F2 2A 62 FC | 	wrlong	local07, objptr
05a2c     56 00 00 FF 
05a30     18 E5 85 F1 | 	sub	objptr, ##44312
05a34                 | '   ct+=1 											' omit this lpar, this is for expr list
05a34                 | '   do
05a34                 | LR__0470
05a34     FC 29 B0 FD | 	call	#_expr
05a38     56 00 00 FF 
05a3c     18 E5 05 F1 | 	add	objptr, ##44312
05a40     F2 26 02 FB | 	rdlong	local05, objptr
05a44     01 26 06 F1 | 	add	local05, #1
05a48     F2 26 62 FC | 	wrlong	local05, objptr
05a4c     01 24 06 F1 | 	add	local04, #1
05a50     01 26 86 F1 | 	sub	local05, #1
05a54     03 26 66 F0 | 	shl	local05, #3
05a58     02 00 00 FF 
05a5c     38 E4 85 F1 | 	sub	objptr, ##1080
05a60     F2 26 02 F1 | 	add	local05, objptr
05a64     04 26 06 F1 | 	add	local05, #4
05a68     13 2B 02 FB | 	rdlong	local07, local05
05a6c     14 2A 0E F2 | 	cmp	local07, #20 wz
05a70     54 00 00 FF 
05a74     E0 E4 85 F1 | 	sub	objptr, ##43232
05a78     34 00 90 AD |  if_e	jmp	#LR__0471
05a7c     56 00 00 FF 
05a80     18 E5 05 F1 | 	add	objptr, ##44312
05a84     F2 2A 02 FB | 	rdlong	local07, objptr
05a88     03 2A 66 F0 | 	shl	local07, #3
05a8c     02 00 00 FF 
05a90     38 E4 85 F1 | 	sub	objptr, ##1080
05a94     F2 2A 02 F1 | 	add	local07, objptr
05a98     04 2A 06 F1 | 	add	local07, #4
05a9c     15 2B 02 FB | 	rdlong	local07, local07
05aa0     FE 2B 0E F2 | 	cmp	local07, #510 wz
05aa4     54 00 00 FF 
05aa8     E0 E4 85 F1 | 	sub	objptr, ##43232
05aac     84 FF 9F 5D |  if_ne	jmp	#LR__0470
05ab0                 | LR__0471
05ab0     56 00 00 FF 
05ab4     18 E5 05 F1 | 	add	objptr, ##44312
05ab8     F2 2A 02 FB | 	rdlong	local07, objptr
05abc     01 2A 06 F1 | 	add	local07, #1
05ac0     F2 2A 62 FC | 	wrlong	local07, objptr
05ac4     56 00 00 FF 
05ac8     18 E5 85 F1 | 	sub	objptr, ##44312
05acc     64 29 B0 FD | 	call	#_expr
05ad0     01 2C 66 F6 | 	neg	local08, #1
05ad4     00 2E 06 F6 | 	mov	local09, #0
05ad8                 | ' '   print "in array_assign, rpar found, numpar=",numpar
05ad8                 | '  'if lparts(ct).token=token_end then print "in getfun, end found, numpar=",numpar
05ad8                 | ' 'if lparts(ct).token<>token_eq then print "in array_assign,= expected" else print "in array_assign,= found"
05ad8                 | ' ct+=1 : expr()
05ad8                 | ' ' now find the vae
05ad8                 | ' 
05ad8                 | ' j=-1 : i=0 : do : 
05ad8                 | LR__0472
05ad8                 | '   if variables(i).name=varname$ then j=i: exit loop
05ad8     17 27 02 F6 | 	mov	local05, local09
05adc     04 26 66 F0 | 	shl	local05, #4
05ae0     34 00 00 FF 
05ae4     DC E4 05 F1 | 	add	objptr, ##26844
05ae8     F2 26 02 F1 | 	add	local05, objptr
05aec     13 13 02 FB | 	rdlong	arg01, local05
05af0     14 15 02 F6 | 	mov	arg02, local06
05af4     34 00 00 FF 
05af8     DC E4 85 F1 | 	sub	objptr, ##26844
05afc     A0 32 B1 FD | 	call	#__system___string_cmp
05b00     00 FA 0D F2 | 	cmp	result1, #0 wz
05b04     17 2D 02 A6 |  if_e	mov	local08, local09
05b08     20 00 90 AD |  if_e	jmp	#LR__0473
05b0c     01 2E 06 F1 | 	add	local09, #1
05b10     54 00 00 FF 
05b14     DC E4 05 F1 | 	add	objptr, ##43228
05b18     F2 2A 02 FB | 	rdlong	local07, objptr
05b1c     54 00 00 FF 
05b20     DC E4 85 F1 | 	sub	objptr, ##43228
05b24     15 2F 5A F2 | 	cmps	local09, local07 wcz
05b28     AC FF 9F ED |  if_be	jmp	#LR__0472
05b2c                 | LR__0473
05b2c     16 1F 02 F6 | 	mov	local01, local08
05b30     12 21 02 F6 | 	mov	local02, local04
05b34     17 22 06 F6 | 	mov	local03, #23
05b38     0F 2B 02 F6 | 	mov	local07, local01
05b3c     10 31 02 F6 | 	mov	local10, local02
05b40     11 2D 02 F6 | 	mov	local08, local03
05b44     69 00 00 FF 
05b48     50 E5 05 F1 | 	add	objptr, ##54096
05b4c     F2 1E 02 FB | 	rdlong	local01, objptr
05b50     0F 2F 02 F6 | 	mov	local09, local01
05b54     01 2E 66 F0 | 	shl	local09, #1
05b58     0F 2F 02 F1 | 	add	local09, local01
05b5c     02 2E 66 F0 | 	shl	local09, #2
05b60     03 00 00 FF 
05b64     00 E4 85 F1 | 	sub	objptr, ##1536
05b68     F2 2E 02 F1 | 	add	local09, objptr
05b6c     17 2B 62 FC | 	wrlong	local07, local09
05b70     03 00 00 FF 
05b74     00 E4 05 F1 | 	add	objptr, ##1536
05b78     F2 1E 02 FB | 	rdlong	local01, objptr
05b7c     0F 2F 02 F6 | 	mov	local09, local01
05b80     01 2E 66 F0 | 	shl	local09, #1
05b84     0F 2F 02 F1 | 	add	local09, local01
05b88     02 2E 66 F0 | 	shl	local09, #2
05b8c     03 00 00 FF 
05b90     00 E4 85 F1 | 	sub	objptr, ##1536
05b94     F2 2E 02 F1 | 	add	local09, objptr
05b98     04 2E 06 F1 | 	add	local09, #4
05b9c     17 31 62 FC | 	wrlong	local10, local09
05ba0     03 00 00 FF 
05ba4     00 E4 05 F1 | 	add	objptr, ##1536
05ba8     F2 30 02 FB | 	rdlong	local10, objptr
05bac     18 1F 02 F6 | 	mov	local01, local10
05bb0     01 1E 66 F0 | 	shl	local01, #1
05bb4     18 1F 02 F1 | 	add	local01, local10
05bb8     02 1E 66 F0 | 	shl	local01, #2
05bbc     03 00 00 FF 
05bc0     00 E4 85 F1 | 	sub	objptr, ##1536
05bc4     F2 1E 02 F1 | 	add	local01, objptr
05bc8     08 1E 06 F1 | 	add	local01, #8
05bcc     0F 2D 62 FC | 	wrlong	local08, local01
05bd0     03 00 00 FF 
05bd4     00 E4 05 F1 | 	add	objptr, ##1536
05bd8     F2 2A 02 FB | 	rdlong	local07, objptr
05bdc     01 2A 06 F1 | 	add	local07, #1
05be0     F2 2A 62 FC | 	wrlong	local07, objptr
05be4     69 00 00 FF 
05be8     50 E5 85 F1 | 	sub	objptr, ##54096
05bec                 | LR__0474
05bec     A7 F0 03 F6 | 	mov	ptra, fp
05bf0     B2 00 A0 FD | 	call	#popregs_
05bf4                 | _compile_array_assign_ret
05bf4     2D 00 64 FD | 	ret
05bf8                 | 
05bf8                 | ' 
05bf8                 | ' 
05bf8                 | ' sub compile_immediate_assign(linetype as ulong)
05bf8                 | _compile_immediate_assign
05bf8     09 4A 05 F6 | 	mov	COUNT_, #9
05bfc     A8 00 A0 FD | 	call	#pushregs_
05c00     09 25 0A F6 | 	mov	local04, arg01 wz
05c04     FF 22 06 F6 | 	mov	local03, #255
05c08     01 26 66 F6 | 	neg	local05, #1
05c0c                 | ' 
05c0c                 | ' t1.result_type=result_error : t1.result.uresult=0
05c0c                 | ' i=-1: j=-1
05c0c                 | ' 
05c0c                 | ' if linetype=0 then varname2$=lparts(0).part$: ct=2 : lineptr=0 
05c0c     2C 00 90 5D |  if_ne	jmp	#LR__0480
05c10     54 00 00 FF 
05c14     E0 E4 05 F1 | 	add	objptr, ##43232
05c18     F2 28 02 FB | 	rdlong	local06, objptr
05c1c     02 00 00 FF 
05c20     38 E4 05 F1 | 	add	objptr, ##1080
05c24     F2 04 68 FC | 	wrlong	#2, objptr
05c28     13 00 00 FF 
05c2c     38 E4 05 F1 | 	add	objptr, ##9784
05c30     F2 00 68 FC | 	wrlong	#0, objptr
05c34     69 00 00 FF 
05c38     50 E5 85 F1 | 	sub	objptr, ##54096
05c3c                 | LR__0480
05c3c                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
05c3c     02 24 0E F2 | 	cmp	local04, #2 wz
05c40     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
05c44     54 00 00 AF 
05c48     E0 E4 05 A1 |  if_e	add	objptr, ##43232
05c4c     F2 28 02 AB |  if_e	rdlong	local06, objptr
05c50     02 00 00 AF 
05c54     38 E4 05 A1 |  if_e	add	objptr, ##1080
05c58     F2 04 68 AC |  if_e	wrlong	#2, objptr
05c5c     56 00 00 AF 
05c60     18 E5 85 A1 |  if_e	sub	objptr, ##44312
05c64                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
05c64     04 24 0E F2 | 	cmp	local04, #4 wz
05c68     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
05c6c     2C 00 90 5D |  if_ne	jmp	#LR__0481
05c70     54 00 00 FF 
05c74     E8 E4 05 F1 | 	add	objptr, ##43240
05c78     F2 28 02 FB | 	rdlong	local06, objptr
05c7c     02 00 00 FF 
05c80     30 E4 05 F1 | 	add	objptr, ##1072
05c84     F2 06 68 FC | 	wrlong	#3, objptr
05c88     13 00 00 FF 
05c8c     38 E4 05 F1 | 	add	objptr, ##9784
05c90     F2 04 68 FC | 	wrlong	#2, objptr
05c94     69 00 00 FF 
05c98     50 E5 85 F1 | 	sub	objptr, ##54096
05c9c                 | LR__0481
05c9c                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
05c9c     05 24 0E F2 | 	cmp	local04, #5 wz
05ca0     3C 00 90 5D |  if_ne	jmp	#LR__0482
05ca4     56 00 00 FF 
05ca8     18 E5 05 F1 | 	add	objptr, ##44312
05cac     F2 FA 01 FB | 	rdlong	result1, objptr
05cb0     FD 28 02 F6 | 	mov	local06, result1
05cb4     03 28 66 F0 | 	shl	local06, #3
05cb8     02 00 00 FF 
05cbc     38 E4 85 F1 | 	sub	objptr, ##1080
05cc0     F2 28 02 F1 | 	add	local06, objptr
05cc4     14 29 02 FB | 	rdlong	local06, local06
05cc8     02 FA 05 F1 | 	add	result1, #2
05ccc     02 00 00 FF 
05cd0     38 E4 05 F1 | 	add	objptr, ##1080
05cd4     F2 FA 61 FC | 	wrlong	result1, objptr
05cd8     56 00 00 FF 
05cdc     18 E5 85 F1 | 	sub	objptr, ##44312
05ce0                 | LR__0482
05ce0     14 13 02 F6 | 	mov	arg01, local06
05ce4     01 14 06 F6 | 	mov	arg02, #1
05ce8     24 51 B1 FD | 	call	#__system__Right_S
05cec     44 27 B0 FD | 	call	#_expr
05cf0                 | '  
05cf0                 | ' 'print "Called compile immediate assign with linetype",linetype, "varname=",varname2$, "lineptr=", lineptr
05cf0                 | ' 
05cf0                 | ' suffix2$=right$(varname2$,1)
05cf0                 | ' expr()
05cf0                 | ' 
05cf0                 | ' 
05cf0                 | ' if varnum>0 then
05cf0     54 00 00 FF 
05cf4     DC E4 05 F1 | 	add	objptr, ##43228
05cf8     F2 2A 02 FB | 	rdlong	local07, objptr
05cfc     54 00 00 FF 
05d00     DC E4 85 F1 | 	sub	objptr, ##43228
05d04     01 2A 56 F2 | 	cmps	local07, #1 wc
05d08     58 00 90 CD |  if_b	jmp	#LR__0485
05d0c                 | '   for i=0 to varnum-1
05d0c     00 2C 06 F6 | 	mov	local08, #0
05d10     54 00 00 FF 
05d14     DC E4 05 F1 | 	add	objptr, ##43228
05d18     F2 2E 02 FB | 	rdlong	local09, objptr
05d1c     54 00 00 FF 
05d20     DC E4 85 F1 | 	sub	objptr, ##43228
05d24                 | LR__0483
05d24     17 2D 52 F2 | 	cmps	local08, local09 wc
05d28     38 00 90 3D |  if_ae	jmp	#LR__0484
05d2c                 | '     if variables(i).name=varname2$ then j=i : exit
05d2c     16 2B 02 F6 | 	mov	local07, local08
05d30     04 2A 66 F0 | 	shl	local07, #4
05d34     34 00 00 FF 
05d38     DC E4 05 F1 | 	add	objptr, ##26844
05d3c     F2 2A 02 F1 | 	add	local07, objptr
05d40     15 13 02 FB | 	rdlong	arg01, local07
05d44     14 15 02 F6 | 	mov	arg02, local06
05d48     34 00 00 FF 
05d4c     DC E4 85 F1 | 	sub	objptr, ##26844
05d50     4C 30 B1 FD | 	call	#__system___string_cmp
05d54     00 FA 0D F2 | 	cmp	result1, #0 wz
05d58     16 27 02 A6 |  if_e	mov	local05, local08
05d5c     01 2C 06 51 |  if_ne	add	local08, #1
05d60     C0 FF 9F 5D |  if_ne	jmp	#LR__0483
05d64                 | LR__0484
05d64                 | LR__0485
05d64                 | ' if  j=-1 andalso varnum<maxvars then   
05d64     FF FF 7F FF 
05d68     FF 27 0E F2 | 	cmp	local05, ##-1 wz
05d6c     60 00 90 5D |  if_ne	jmp	#LR__0486
05d70     54 00 00 FF 
05d74     DC E4 05 F1 | 	add	objptr, ##43228
05d78     F2 2A 02 FB | 	rdlong	local07, objptr
05d7c     54 00 00 FF 
05d80     DC E4 85 F1 | 	sub	objptr, ##43228
05d84     01 00 00 FF 
05d88     FF 2B 56 F2 | 	cmps	local07, ##1023 wc
05d8c     40 00 90 3D |  if_ae	jmp	#LR__0486
05d90     54 00 00 FF 
05d94     DC E4 05 F1 | 	add	objptr, ##43228
05d98     F2 2E 02 FB | 	rdlong	local09, objptr
05d9c     04 2E 66 F0 | 	shl	local09, #4
05da0     20 00 00 FF 
05da4     00 E4 85 F1 | 	sub	objptr, ##16384
05da8     F2 2E 02 F1 | 	add	local09, objptr
05dac     17 29 62 FC | 	wrlong	local06, local09
05db0     20 00 00 FF 
05db4     00 E4 05 F1 | 	add	objptr, ##16384
05db8     F2 2A 02 FB | 	rdlong	local07, objptr
05dbc     15 27 02 F6 | 	mov	local05, local07
05dc0     01 2A 06 F1 | 	add	local07, #1
05dc4     F2 2A 62 FC | 	wrlong	local07, objptr
05dc8     54 00 00 FF 
05dcc     DC E4 85 F1 | 	sub	objptr, ##43228
05dd0                 | LR__0486
05dd0     13 1F 02 F6 | 	mov	local01, local05
05dd4     17 22 06 F6 | 	mov	local03, #23
05dd8     0F 2B 02 F6 | 	mov	local07, local01
05ddc     10 2F 02 F6 | 	mov	local09, local02
05de0     11 1F 02 F6 | 	mov	local01, local03
05de4     69 00 00 FF 
05de8     50 E5 05 F1 | 	add	objptr, ##54096
05dec     F2 2C 02 FB | 	rdlong	local08, objptr
05df0     16 29 02 F6 | 	mov	local06, local08
05df4     01 28 66 F0 | 	shl	local06, #1
05df8     16 29 02 F1 | 	add	local06, local08
05dfc     02 28 66 F0 | 	shl	local06, #2
05e00     03 00 00 FF 
05e04     00 E4 85 F1 | 	sub	objptr, ##1536
05e08     F2 28 02 F1 | 	add	local06, objptr
05e0c     14 2B 62 FC | 	wrlong	local07, local06
05e10     03 00 00 FF 
05e14     00 E4 05 F1 | 	add	objptr, ##1536
05e18     F2 2C 02 FB | 	rdlong	local08, objptr
05e1c     16 2B 02 F6 | 	mov	local07, local08
05e20     01 2A 66 F0 | 	shl	local07, #1
05e24     16 2B 02 F1 | 	add	local07, local08
05e28     02 2A 66 F0 | 	shl	local07, #2
05e2c     03 00 00 FF 
05e30     00 E4 85 F1 | 	sub	objptr, ##1536
05e34     F2 2A 02 F1 | 	add	local07, objptr
05e38     04 2A 06 F1 | 	add	local07, #4
05e3c     15 2F 62 FC | 	wrlong	local09, local07
05e40     03 00 00 FF 
05e44     00 E4 05 F1 | 	add	objptr, ##1536
05e48     F2 2E 02 FB | 	rdlong	local09, objptr
05e4c     17 2D 02 F6 | 	mov	local08, local09
05e50     01 2C 66 F0 | 	shl	local08, #1
05e54     17 2D 02 F1 | 	add	local08, local09
05e58     02 2C 66 F0 | 	shl	local08, #2
05e5c     03 00 00 FF 
05e60     00 E4 85 F1 | 	sub	objptr, ##1536
05e64     F2 2C 02 F1 | 	add	local08, objptr
05e68     08 2C 06 F1 | 	add	local08, #8
05e6c     16 1F 62 FC | 	wrlong	local01, local08
05e70     03 00 00 FF 
05e74     00 E4 05 F1 | 	add	objptr, ##1536
05e78     F2 2A 02 FB | 	rdlong	local07, objptr
05e7c     01 2A 06 F1 | 	add	local07, #1
05e80     F2 2A 62 FC | 	wrlong	local07, objptr
05e84     69 00 00 FF 
05e88     50 E5 85 F1 | 	sub	objptr, ##54096
05e8c                 | ' t1.result.uresult=j: t1.result_type=fun_assign  
05e8c                 | ' 
05e8c                 | ' 
05e8c                 | ' 
05e8c                 | ' 
05e8c                 | ' 
05e8c                 | ' 
05e8c                 | ' compiledline(lineptr)=t1:  lineptr+=1 
05e8c                 | '  if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
05e8c     00 24 0E F2 | 	cmp	local04, #0 wz
05e90     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
05e94     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
05e98     38 00 90 5D |  if_ne	jmp	#LR__0487
05e9c     69 00 00 FF 
05ea0     50 E5 05 F1 | 	add	objptr, ##54096
05ea4     F2 1E 02 FB | 	rdlong	local01, objptr
05ea8     0F 2F 02 F6 | 	mov	local09, local01
05eac     01 2E 66 F0 | 	shl	local09, #1
05eb0     0F 2F 02 F1 | 	add	local09, local01
05eb4     02 2E 66 F0 | 	shl	local09, #2
05eb8     03 00 00 FF 
05ebc     00 E4 85 F1 | 	sub	objptr, ##1536
05ec0     F2 2E 02 F1 | 	add	local09, objptr
05ec4     08 2E 06 F1 | 	add	local09, #8
05ec8     17 FD 6B FC | 	wrlong	#510, local09
05ecc     66 00 00 FF 
05ed0     50 E5 85 F1 | 	sub	objptr, ##52560
05ed4                 | LR__0487
05ed4     A7 F0 03 F6 | 	mov	ptra, fp
05ed8     B2 00 A0 FD | 	call	#popregs_
05edc                 | _compile_immediate_assign_ret
05edc     2D 00 64 FD | 	ret
05ee0                 | 
05ee0                 | ' 
05ee0                 | ' ' ------------------ compile the line that is calling a command 
05ee0                 | ' 
05ee0                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)
05ee0                 | _compile
05ee0     04 4A 05 F6 | 	mov	COUNT_, #4
05ee4     A8 00 A0 FD | 	call	#pushregs_
05ee8     09 1F 0A F6 | 	mov	local01, arg01 wz
05eec     0A 21 02 F6 | 	mov	local02, arg02
05ef0     0B 23 02 F6 | 	mov	local03, arg03
05ef4                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
05ef4                 | ' ' num_minor bit 31: the line is goto target. If deleted, a proper record(s) has to be added to goto list
05ef4                 | '  
05ef4                 | ' '  print "called compile with line= "; alinemajor;" and cont= "; cont 
05ef4                 | ' if alinemajor=0 then err=compile_immediate(0) : return err  
05ef4     0C 00 90 5D |  if_ne	jmp	#LR__0490
05ef8     00 12 06 F6 | 	mov	arg01, #0
05efc     EC F4 BF FD | 	call	#_compile_immediate
05f00     A0 00 90 FD | 	jmp	#LR__0497
05f04                 | LR__0490
05f04     66 00 00 FF 
05f08     50 E5 05 F1 | 	add	objptr, ##52560
05f0c     F2 1E 62 FC | 	wrlong	local01, objptr
05f10     04 E4 05 F1 | 	add	objptr, #4
05f14     F2 20 62 FC | 	wrlong	local02, objptr
05f18     66 00 00 FF 
05f1c     54 E5 85 F1 | 	sub	objptr, ##52564
05f20     11 13 02 F6 | 	mov	arg01, local03
05f24     01 12 06 F1 | 	add	arg01, #1
05f28     C0 F4 BF FD | 	call	#_compile_immediate
05f2c     FD 24 0A F6 | 	mov	local04, result1 wz
05f30                 | ' 
05f30                 | ' ucompiledline(0)=alinemajor
05f30                 | ' ucompiledline(1)=alineminor
05f30                 | ' 
05f30                 | ' 
05f30                 | ' ' cont: 0: this is the first part of the line that will continue
05f30                 | ' ' 1 - this is the continuation of the line
05f30                 | ' ' 2 - this is the last continued line
05f30                 | ' ' 3 - this is the ome and only part
05f30                 | ' 
05f30                 | ' 
05f30                 | ' err=compile_immediate(cont+1) 
05f30                 | ' if err=0 then
05f30     6C 00 90 5D |  if_ne	jmp	#LR__0496
05f34                 | '   if cont=3 orelse cont=2 then 
05f34     03 22 0E F2 | 	cmp	local03, #3 wz
05f38     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
05f3c     60 00 90 5D |  if_ne	jmp	#LR__0495
05f40                 | '     if alinemajor >lastline then 
05f40     69 00 00 FF 
05f44     5C E5 05 F1 | 	add	objptr, ##54108
05f48     F2 16 02 FB | 	rdlong	arg03, objptr
05f4c     69 00 00 FF 
05f50     5C E5 85 F1 | 	sub	objptr, ##54108
05f54     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
05f58     0C 00 90 ED |  if_be	jmp	#LR__0491
05f5c     0F 13 02 F6 | 	mov	arg01, local01
05f60     A8 F3 BF FD | 	call	#_add_line_at_end
05f64     38 00 90 FD | 	jmp	#LR__0494
05f68                 | LR__0491
05f68     0F 13 02 F6 | 	mov	arg01, local01
05f6c     28 EC BF FD | 	call	#_deleteline
05f70                 | '       deleteline(alinemajor)  
05f70                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor) ' yes I know that's not optimal    
05f70     69 00 00 FF 
05f74     5C E5 05 F1 | 	add	objptr, ##54108
05f78     F2 16 02 FB | 	rdlong	arg03, objptr
05f7c     69 00 00 FF 
05f80     5C E5 85 F1 | 	sub	objptr, ##54108
05f84     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
05f88     0C 00 90 ED |  if_be	jmp	#LR__0492
05f8c     0F 13 02 F6 | 	mov	arg01, local01
05f90     78 F3 BF FD | 	call	#_add_line_at_end
05f94     08 00 90 FD | 	jmp	#LR__0493
05f98                 | LR__0492
05f98     0F 13 02 F6 | 	mov	arg01, local01
05f9c     24 F1 BF FD | 	call	#_insertline
05fa0                 | LR__0493
05fa0                 | LR__0494
05fa0                 | LR__0495
05fa0                 | LR__0496
05fa0                 | ' return err
05fa0     12 FB 01 F6 | 	mov	result1, local04
05fa4                 | LR__0497
05fa4     A7 F0 03 F6 | 	mov	ptra, fp
05fa8     B2 00 A0 FD | 	call	#popregs_
05fac                 | _compile_ret
05fac     2D 00 64 FD | 	ret
05fb0                 | 
05fb0                 | ' 
05fb0                 | ' ' ------------------ compile the line that is assigning to a variable
05fb0                 | ' 
05fb0                 | ' sub compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  
05fb0                 | _compile_assign
05fb0     03 4A 05 F6 | 	mov	COUNT_, #3
05fb4     A8 00 A0 FD | 	call	#pushregs_
05fb8     09 1F 0A F6 | 	mov	local01, arg01 wz
05fbc     0A 21 02 F6 | 	mov	local02, arg02
05fc0     0B 23 02 F6 | 	mov	local03, arg03
05fc4                 | ' 
05fc4                 | ' '  print "called compile_assign  with line= "; alinemajor;" and cont= "; cont 
05fc4                 | ' if alinemajor=0 then compile_immediate_assign(0) : return  
05fc4     0C 00 90 5D |  if_ne	jmp	#LR__0500
05fc8     00 12 06 F6 | 	mov	arg01, #0
05fcc     28 FC BF FD | 	call	#_compile_immediate_assign
05fd0     94 00 90 FD | 	jmp	#LR__0506
05fd4                 | LR__0500
05fd4     66 00 00 FF 
05fd8     50 E5 05 F1 | 	add	objptr, ##52560
05fdc     F2 1E 62 FC | 	wrlong	local01, objptr
05fe0     04 E4 05 F1 | 	add	objptr, #4
05fe4     F2 20 62 FC | 	wrlong	local02, objptr
05fe8     66 00 00 FF 
05fec     54 E5 85 F1 | 	sub	objptr, ##52564
05ff0     11 13 02 F6 | 	mov	arg01, local03
05ff4     01 12 06 F1 | 	add	arg01, #1
05ff8     FC FB BF FD | 	call	#_compile_immediate_assign
05ffc                 | ' 
05ffc                 | ' ucompiledline(0)=alinemajor
05ffc                 | ' ucompiledline(1)=alineminor
05ffc                 | ' 
05ffc                 | ' compile_immediate_assign(cont+1) 
05ffc                 | ' 
05ffc                 | ' if cont=3 orelse cont=2 then 
05ffc     03 22 0E F2 | 	cmp	local03, #3 wz
06000     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
06004     60 00 90 5D |  if_ne	jmp	#LR__0505
06008                 | '   if alinemajor >lastline then 
06008     69 00 00 FF 
0600c     5C E5 05 F1 | 	add	objptr, ##54108
06010     F2 16 02 FB | 	rdlong	arg03, objptr
06014     69 00 00 FF 
06018     5C E5 85 F1 | 	sub	objptr, ##54108
0601c     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
06020     0C 00 90 ED |  if_be	jmp	#LR__0501
06024     0F 13 02 F6 | 	mov	arg01, local01
06028     E0 F2 BF FD | 	call	#_add_line_at_end
0602c     38 00 90 FD | 	jmp	#LR__0504
06030                 | LR__0501
06030     0F 13 02 F6 | 	mov	arg01, local01
06034     60 EB BF FD | 	call	#_deleteline
06038                 | '     deleteline(alinemajor)  
06038                 | '     if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
06038     69 00 00 FF 
0603c     5C E5 05 F1 | 	add	objptr, ##54108
06040     F2 16 02 FB | 	rdlong	arg03, objptr
06044     69 00 00 FF 
06048     5C E5 85 F1 | 	sub	objptr, ##54108
0604c     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
06050     0C 00 90 ED |  if_be	jmp	#LR__0502
06054     0F 13 02 F6 | 	mov	arg01, local01
06058     B0 F2 BF FD | 	call	#_add_line_at_end
0605c     08 00 90 FD | 	jmp	#LR__0503
06060                 | LR__0502
06060     0F 13 02 F6 | 	mov	arg01, local01
06064     5C F0 BF FD | 	call	#_insertline
06068                 | LR__0503
06068                 | LR__0504
06068                 | LR__0505
06068                 | LR__0506
06068     A7 F0 03 F6 | 	mov	ptra, fp
0606c     B2 00 A0 FD | 	call	#popregs_
06070                 | _compile_assign_ret
06070     2D 00 64 FD | 	ret
06074                 | 
06074                 | ' 
06074                 | ' sub compile_error(errno)
06074                 | _compile_error
06074     FF 04 06 F6 | 	mov	_var03, #255
06078     01 07 02 F6 | 	mov	_var04, _var02
0607c     02 09 02 F6 | 	mov	_var05, _var03
06080     69 00 00 FF 
06084     50 E5 05 F1 | 	add	objptr, ##54096
06088     F2 0A 02 FB | 	rdlong	_var06, objptr
0608c     05 0D 02 F6 | 	mov	_var07, _var06
06090     01 0C 66 F0 | 	shl	_var07, #1
06094     05 0D 02 F1 | 	add	_var07, _var06
06098     02 0C 66 F0 | 	shl	_var07, #2
0609c     03 00 00 FF 
060a0     00 E4 85 F1 | 	sub	objptr, ##1536
060a4     F2 0C 02 F1 | 	add	_var07, objptr
060a8     06 13 62 FC | 	wrlong	arg01, _var07
060ac     03 00 00 FF 
060b0     00 E4 05 F1 | 	add	objptr, ##1536
060b4     F2 0C 02 FB | 	rdlong	_var07, objptr
060b8     06 0B 02 F6 | 	mov	_var06, _var07
060bc     01 0A 66 F0 | 	shl	_var06, #1
060c0     06 0B 02 F1 | 	add	_var06, _var07
060c4     02 0A 66 F0 | 	shl	_var06, #2
060c8     03 00 00 FF 
060cc     00 E4 85 F1 | 	sub	objptr, ##1536
060d0     F2 0A 02 F1 | 	add	_var06, objptr
060d4     04 0A 06 F1 | 	add	_var06, #4
060d8     05 07 62 FC | 	wrlong	_var04, _var06
060dc     03 00 00 FF 
060e0     00 E4 05 F1 | 	add	objptr, ##1536
060e4     F2 0C 02 FB | 	rdlong	_var07, objptr
060e8     06 0B 02 F6 | 	mov	_var06, _var07
060ec     01 0A 66 F0 | 	shl	_var06, #1
060f0     06 0B 02 F1 | 	add	_var06, _var07
060f4     02 0A 66 F0 | 	shl	_var06, #2
060f8     03 00 00 FF 
060fc     00 E4 85 F1 | 	sub	objptr, ##1536
06100     F2 0A 02 F1 | 	add	_var06, objptr
06104     08 0A 06 F1 | 	add	_var06, #8
06108     05 09 62 FC | 	wrlong	_var05, _var06
0610c     03 00 00 FF 
06110     00 E4 05 F1 | 	add	objptr, ##1536
06114     F2 12 02 FB | 	rdlong	arg01, objptr
06118     01 12 06 F1 | 	add	arg01, #1
0611c     F2 12 62 FC | 	wrlong	arg01, objptr
06120     69 00 00 FF 
06124     50 E5 85 F1 | 	sub	objptr, ##54096
06128                 | _compile_error_ret
06128     2D 00 64 FD | 	ret
0612c                 | 
0612c                 | ' 
0612c                 | ' sub compile_unknown() 
0612c                 | _compile_unknown
0612c     FF 04 06 F6 | 	mov	_var03, #255
06130     17 00 06 F6 | 	mov	_var01, #23
06134     01 07 02 F6 | 	mov	_var04, _var02
06138     02 01 02 F6 | 	mov	_var01, _var03
0613c     69 00 00 FF 
06140     50 E5 05 F1 | 	add	objptr, ##54096
06144     F2 08 02 FB | 	rdlong	_var05, objptr
06148     04 0B 02 F6 | 	mov	_var06, _var05
0614c     01 0A 66 F0 | 	shl	_var06, #1
06150     04 0B 02 F1 | 	add	_var06, _var05
06154     02 0A 66 F0 | 	shl	_var06, #2
06158     03 00 00 FF 
0615c     00 E4 85 F1 | 	sub	objptr, ##1536
06160     F2 0A 02 F1 | 	add	_var06, objptr
06164     05 2F 68 FC | 	wrlong	#23, _var06
06168     03 00 00 FF 
0616c     00 E4 05 F1 | 	add	objptr, ##1536
06170     F2 0A 02 FB | 	rdlong	_var06, objptr
06174     05 09 02 F6 | 	mov	_var05, _var06
06178     01 08 66 F0 | 	shl	_var05, #1
0617c     05 09 02 F1 | 	add	_var05, _var06
06180     02 08 66 F0 | 	shl	_var05, #2
06184     03 00 00 FF 
06188     00 E4 85 F1 | 	sub	objptr, ##1536
0618c     F2 08 02 F1 | 	add	_var05, objptr
06190     04 08 06 F1 | 	add	_var05, #4
06194     04 07 62 FC | 	wrlong	_var04, _var05
06198     03 00 00 FF 
0619c     00 E4 05 F1 | 	add	objptr, ##1536
061a0     F2 0A 02 FB | 	rdlong	_var06, objptr
061a4     05 09 02 F6 | 	mov	_var05, _var06
061a8     01 08 66 F0 | 	shl	_var05, #1
061ac     05 09 02 F1 | 	add	_var05, _var06
061b0     02 08 66 F0 | 	shl	_var05, #2
061b4     03 00 00 FF 
061b8     00 E4 85 F1 | 	sub	objptr, ##1536
061bc     F2 08 02 F1 | 	add	_var05, objptr
061c0     08 08 06 F1 | 	add	_var05, #8
061c4     04 01 62 FC | 	wrlong	_var01, _var05
061c8     03 00 00 FF 
061cc     00 E4 05 F1 | 	add	objptr, ##1536
061d0     F2 0A 02 FB | 	rdlong	_var06, objptr
061d4     01 0A 06 F1 | 	add	_var06, #1
061d8     F2 0A 62 FC | 	wrlong	_var06, objptr
061dc     69 00 00 FF 
061e0     50 E5 85 F1 | 	sub	objptr, ##54096
061e4                 | _compile_unknown_ret
061e4     2D 00 64 FD | 	ret
061e8                 | 
061e8                 | ' 
061e8                 | ' function compile_fun_2p() as ulong
061e8                 | _compile_fun_2p
061e8     01 4A 05 F6 | 	mov	COUNT_, #1
061ec     A8 00 A0 FD | 	call	#pushregs_
061f0     40 22 B0 FD | 	call	#_expr
061f4                 | ' 
061f4                 | ' expr()
061f4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
061f4     56 00 00 FF 
061f8     18 E5 05 F1 | 	add	objptr, ##44312
061fc     F2 1E 02 FB | 	rdlong	local01, objptr
06200     03 1E 66 F0 | 	shl	local01, #3
06204     02 00 00 FF 
06208     38 E4 85 F1 | 	sub	objptr, ##1080
0620c     F2 1E 02 F1 | 	add	local01, objptr
06210     04 1E 06 F1 | 	add	local01, #4
06214     0F 1F 02 FB | 	rdlong	local01, local01
06218     11 1E 0E F2 | 	cmp	local01, #17 wz
0621c     54 00 00 FF 
06220     E0 E4 85 F1 | 	sub	objptr, ##43232
06224     15 FA 05 56 |  if_ne	mov	result1, #21
06228     24 00 90 5D |  if_ne	jmp	#LR__0510
0622c     56 00 00 FF 
06230     18 E5 05 F1 | 	add	objptr, ##44312
06234     F2 1E 02 FB | 	rdlong	local01, objptr
06238     01 1E 06 F1 | 	add	local01, #1
0623c     F2 1E 62 FC | 	wrlong	local01, objptr
06240     56 00 00 FF 
06244     18 E5 85 F1 | 	sub	objptr, ##44312
06248     E8 21 B0 FD | 	call	#_expr
0624c     00 FA 05 F6 | 	mov	result1, #0
06250                 | LR__0510
06250     A7 F0 03 F6 | 	mov	ptra, fp
06254     B2 00 A0 FD | 	call	#popregs_
06258                 | _compile_fun_2p_ret
06258     2D 00 64 FD | 	ret
0625c                 | 
0625c                 | ' 
0625c                 | ' function compile_fun_3p() as ulong
0625c                 | _compile_fun_3p
0625c     01 4A 05 F6 | 	mov	COUNT_, #1
06260     A8 00 A0 FD | 	call	#pushregs_
06264     CC 21 B0 FD | 	call	#_expr
06268                 | ' 
06268                 | ' expr()
06268                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06268     56 00 00 FF 
0626c     18 E5 05 F1 | 	add	objptr, ##44312
06270     F2 1E 02 FB | 	rdlong	local01, objptr
06274     03 1E 66 F0 | 	shl	local01, #3
06278     02 00 00 FF 
0627c     38 E4 85 F1 | 	sub	objptr, ##1080
06280     F2 1E 02 F1 | 	add	local01, objptr
06284     04 1E 06 F1 | 	add	local01, #4
06288     0F 1F 02 FB | 	rdlong	local01, local01
0628c     11 1E 0E F2 | 	cmp	local01, #17 wz
06290     54 00 00 FF 
06294     E0 E4 85 F1 | 	sub	objptr, ##43232
06298     15 FA 05 56 |  if_ne	mov	result1, #21
0629c     7C 00 90 5D |  if_ne	jmp	#LR__0520
062a0     56 00 00 FF 
062a4     18 E5 05 F1 | 	add	objptr, ##44312
062a8     F2 1E 02 FB | 	rdlong	local01, objptr
062ac     01 1E 06 F1 | 	add	local01, #1
062b0     F2 1E 62 FC | 	wrlong	local01, objptr
062b4     56 00 00 FF 
062b8     18 E5 85 F1 | 	sub	objptr, ##44312
062bc     74 21 B0 FD | 	call	#_expr
062c0                 | ' expr()
062c0                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
062c0     56 00 00 FF 
062c4     18 E5 05 F1 | 	add	objptr, ##44312
062c8     F2 1E 02 FB | 	rdlong	local01, objptr
062cc     03 1E 66 F0 | 	shl	local01, #3
062d0     02 00 00 FF 
062d4     38 E4 85 F1 | 	sub	objptr, ##1080
062d8     F2 1E 02 F1 | 	add	local01, objptr
062dc     04 1E 06 F1 | 	add	local01, #4
062e0     0F 1F 02 FB | 	rdlong	local01, local01
062e4     11 1E 0E F2 | 	cmp	local01, #17 wz
062e8     54 00 00 FF 
062ec     E0 E4 85 F1 | 	sub	objptr, ##43232
062f0     15 FA 05 56 |  if_ne	mov	result1, #21
062f4     24 00 90 5D |  if_ne	jmp	#LR__0520
062f8     56 00 00 FF 
062fc     18 E5 05 F1 | 	add	objptr, ##44312
06300     F2 1E 02 FB | 	rdlong	local01, objptr
06304     01 1E 06 F1 | 	add	local01, #1
06308     F2 1E 62 FC | 	wrlong	local01, objptr
0630c     56 00 00 FF 
06310     18 E5 85 F1 | 	sub	objptr, ##44312
06314     1C 21 B0 FD | 	call	#_expr
06318     00 FA 05 F6 | 	mov	result1, #0
0631c                 | LR__0520
0631c     A7 F0 03 F6 | 	mov	ptra, fp
06320     B2 00 A0 FD | 	call	#popregs_
06324                 | _compile_fun_3p_ret
06324     2D 00 64 FD | 	ret
06328                 | 
06328                 | ' 
06328                 | ' function compile_fun_4p() as ulong
06328                 | _compile_fun_4p
06328     01 4A 05 F6 | 	mov	COUNT_, #1
0632c     A8 00 A0 FD | 	call	#pushregs_
06330     00 21 B0 FD | 	call	#_expr
06334                 | ' 
06334                 | ' expr()
06334                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06334     56 00 00 FF 
06338     18 E5 05 F1 | 	add	objptr, ##44312
0633c     F2 1E 02 FB | 	rdlong	local01, objptr
06340     03 1E 66 F0 | 	shl	local01, #3
06344     02 00 00 FF 
06348     38 E4 85 F1 | 	sub	objptr, ##1080
0634c     F2 1E 02 F1 | 	add	local01, objptr
06350     04 1E 06 F1 | 	add	local01, #4
06354     0F 1F 02 FB | 	rdlong	local01, local01
06358     11 1E 0E F2 | 	cmp	local01, #17 wz
0635c     54 00 00 FF 
06360     E0 E4 85 F1 | 	sub	objptr, ##43232
06364     15 FA 05 56 |  if_ne	mov	result1, #21
06368     D4 00 90 5D |  if_ne	jmp	#LR__0530
0636c     56 00 00 FF 
06370     18 E5 05 F1 | 	add	objptr, ##44312
06374     F2 1E 02 FB | 	rdlong	local01, objptr
06378     01 1E 06 F1 | 	add	local01, #1
0637c     F2 1E 62 FC | 	wrlong	local01, objptr
06380     56 00 00 FF 
06384     18 E5 85 F1 | 	sub	objptr, ##44312
06388     A8 20 B0 FD | 	call	#_expr
0638c                 | ' expr()
0638c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
0638c     56 00 00 FF 
06390     18 E5 05 F1 | 	add	objptr, ##44312
06394     F2 1E 02 FB | 	rdlong	local01, objptr
06398     03 1E 66 F0 | 	shl	local01, #3
0639c     02 00 00 FF 
063a0     38 E4 85 F1 | 	sub	objptr, ##1080
063a4     F2 1E 02 F1 | 	add	local01, objptr
063a8     04 1E 06 F1 | 	add	local01, #4
063ac     0F 1F 02 FB | 	rdlong	local01, local01
063b0     11 1E 0E F2 | 	cmp	local01, #17 wz
063b4     54 00 00 FF 
063b8     E0 E4 85 F1 | 	sub	objptr, ##43232
063bc     15 FA 05 56 |  if_ne	mov	result1, #21
063c0     7C 00 90 5D |  if_ne	jmp	#LR__0530
063c4     56 00 00 FF 
063c8     18 E5 05 F1 | 	add	objptr, ##44312
063cc     F2 1E 02 FB | 	rdlong	local01, objptr
063d0     01 1E 06 F1 | 	add	local01, #1
063d4     F2 1E 62 FC | 	wrlong	local01, objptr
063d8     56 00 00 FF 
063dc     18 E5 85 F1 | 	sub	objptr, ##44312
063e0     50 20 B0 FD | 	call	#_expr
063e4                 | ' expr()
063e4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
063e4     56 00 00 FF 
063e8     18 E5 05 F1 | 	add	objptr, ##44312
063ec     F2 1E 02 FB | 	rdlong	local01, objptr
063f0     03 1E 66 F0 | 	shl	local01, #3
063f4     02 00 00 FF 
063f8     38 E4 85 F1 | 	sub	objptr, ##1080
063fc     F2 1E 02 F1 | 	add	local01, objptr
06400     04 1E 06 F1 | 	add	local01, #4
06404     0F 1F 02 FB | 	rdlong	local01, local01
06408     11 1E 0E F2 | 	cmp	local01, #17 wz
0640c     54 00 00 FF 
06410     E0 E4 85 F1 | 	sub	objptr, ##43232
06414     15 FA 05 56 |  if_ne	mov	result1, #21
06418     24 00 90 5D |  if_ne	jmp	#LR__0530
0641c     56 00 00 FF 
06420     18 E5 05 F1 | 	add	objptr, ##44312
06424     F2 1E 02 FB | 	rdlong	local01, objptr
06428     01 1E 06 F1 | 	add	local01, #1
0642c     F2 1E 62 FC | 	wrlong	local01, objptr
06430     56 00 00 FF 
06434     18 E5 85 F1 | 	sub	objptr, ##44312
06438     F8 1F B0 FD | 	call	#_expr
0643c     00 FA 05 F6 | 	mov	result1, #0
06440                 | LR__0530
06440     A7 F0 03 F6 | 	mov	ptra, fp
06444     B2 00 A0 FD | 	call	#popregs_
06448                 | _compile_fun_4p_ret
06448     2D 00 64 FD | 	ret
0644c                 | 
0644c                 | ' 
0644c                 | ' 
0644c                 | ' function compile_fun_5p() as ulong
0644c                 | _compile_fun_5p
0644c     01 4A 05 F6 | 	mov	COUNT_, #1
06450     A8 00 A0 FD | 	call	#pushregs_
06454     DC 1F B0 FD | 	call	#_expr
06458                 | ' 
06458                 | ' expr()
06458                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06458     56 00 00 FF 
0645c     18 E5 05 F1 | 	add	objptr, ##44312
06460     F2 1E 02 FB | 	rdlong	local01, objptr
06464     03 1E 66 F0 | 	shl	local01, #3
06468     02 00 00 FF 
0646c     38 E4 85 F1 | 	sub	objptr, ##1080
06470     F2 1E 02 F1 | 	add	local01, objptr
06474     04 1E 06 F1 | 	add	local01, #4
06478     0F 1F 02 FB | 	rdlong	local01, local01
0647c     11 1E 0E F2 | 	cmp	local01, #17 wz
06480     54 00 00 FF 
06484     E0 E4 85 F1 | 	sub	objptr, ##43232
06488     15 FA 05 56 |  if_ne	mov	result1, #21
0648c     2C 01 90 5D |  if_ne	jmp	#LR__0540
06490     56 00 00 FF 
06494     18 E5 05 F1 | 	add	objptr, ##44312
06498     F2 1E 02 FB | 	rdlong	local01, objptr
0649c     01 1E 06 F1 | 	add	local01, #1
064a0     F2 1E 62 FC | 	wrlong	local01, objptr
064a4     56 00 00 FF 
064a8     18 E5 85 F1 | 	sub	objptr, ##44312
064ac     84 1F B0 FD | 	call	#_expr
064b0                 | ' expr()
064b0                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
064b0     56 00 00 FF 
064b4     18 E5 05 F1 | 	add	objptr, ##44312
064b8     F2 1E 02 FB | 	rdlong	local01, objptr
064bc     03 1E 66 F0 | 	shl	local01, #3
064c0     02 00 00 FF 
064c4     38 E4 85 F1 | 	sub	objptr, ##1080
064c8     F2 1E 02 F1 | 	add	local01, objptr
064cc     04 1E 06 F1 | 	add	local01, #4
064d0     0F 1F 02 FB | 	rdlong	local01, local01
064d4     11 1E 0E F2 | 	cmp	local01, #17 wz
064d8     54 00 00 FF 
064dc     E0 E4 85 F1 | 	sub	objptr, ##43232
064e0     15 FA 05 56 |  if_ne	mov	result1, #21
064e4     D4 00 90 5D |  if_ne	jmp	#LR__0540
064e8     56 00 00 FF 
064ec     18 E5 05 F1 | 	add	objptr, ##44312
064f0     F2 1E 02 FB | 	rdlong	local01, objptr
064f4     01 1E 06 F1 | 	add	local01, #1
064f8     F2 1E 62 FC | 	wrlong	local01, objptr
064fc     56 00 00 FF 
06500     18 E5 85 F1 | 	sub	objptr, ##44312
06504     2C 1F B0 FD | 	call	#_expr
06508                 | ' expr()
06508                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06508     56 00 00 FF 
0650c     18 E5 05 F1 | 	add	objptr, ##44312
06510     F2 1E 02 FB | 	rdlong	local01, objptr
06514     03 1E 66 F0 | 	shl	local01, #3
06518     02 00 00 FF 
0651c     38 E4 85 F1 | 	sub	objptr, ##1080
06520     F2 1E 02 F1 | 	add	local01, objptr
06524     04 1E 06 F1 | 	add	local01, #4
06528     0F 1F 02 FB | 	rdlong	local01, local01
0652c     11 1E 0E F2 | 	cmp	local01, #17 wz
06530     54 00 00 FF 
06534     E0 E4 85 F1 | 	sub	objptr, ##43232
06538     15 FA 05 56 |  if_ne	mov	result1, #21
0653c     7C 00 90 5D |  if_ne	jmp	#LR__0540
06540     56 00 00 FF 
06544     18 E5 05 F1 | 	add	objptr, ##44312
06548     F2 1E 02 FB | 	rdlong	local01, objptr
0654c     01 1E 06 F1 | 	add	local01, #1
06550     F2 1E 62 FC | 	wrlong	local01, objptr
06554     56 00 00 FF 
06558     18 E5 85 F1 | 	sub	objptr, ##44312
0655c     D4 1E B0 FD | 	call	#_expr
06560                 | ' expr()
06560                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06560     56 00 00 FF 
06564     18 E5 05 F1 | 	add	objptr, ##44312
06568     F2 1E 02 FB | 	rdlong	local01, objptr
0656c     03 1E 66 F0 | 	shl	local01, #3
06570     02 00 00 FF 
06574     38 E4 85 F1 | 	sub	objptr, ##1080
06578     F2 1E 02 F1 | 	add	local01, objptr
0657c     04 1E 06 F1 | 	add	local01, #4
06580     0F 1F 02 FB | 	rdlong	local01, local01
06584     11 1E 0E F2 | 	cmp	local01, #17 wz
06588     54 00 00 FF 
0658c     E0 E4 85 F1 | 	sub	objptr, ##43232
06590     15 FA 05 56 |  if_ne	mov	result1, #21
06594     24 00 90 5D |  if_ne	jmp	#LR__0540
06598     56 00 00 FF 
0659c     18 E5 05 F1 | 	add	objptr, ##44312
065a0     F2 1E 02 FB | 	rdlong	local01, objptr
065a4     01 1E 06 F1 | 	add	local01, #1
065a8     F2 1E 62 FC | 	wrlong	local01, objptr
065ac     56 00 00 FF 
065b0     18 E5 85 F1 | 	sub	objptr, ##44312
065b4     7C 1E B0 FD | 	call	#_expr
065b8     00 FA 05 F6 | 	mov	result1, #0
065bc                 | LR__0540
065bc     A7 F0 03 F6 | 	mov	ptra, fp
065c0     B2 00 A0 FD | 	call	#popregs_
065c4                 | _compile_fun_5p_ret
065c4     2D 00 64 FD | 	ret
065c8                 | 
065c8                 | ' 
065c8                 | ' function compile_fun_varp() as ulong 
065c8                 | _compile_fun_varp
065c8     02 4A 05 F6 | 	mov	COUNT_, #2
065cc     A8 00 A0 FD | 	call	#pushregs_
065d0     00 1E 06 F6 | 	mov	local01, #0
065d4                 | ' i=0
065d4                 | ' if lparts(ct).token<>token_end then
065d4     56 00 00 FF 
065d8     18 E5 05 F1 | 	add	objptr, ##44312
065dc     F2 20 02 FB | 	rdlong	local02, objptr
065e0     03 20 66 F0 | 	shl	local02, #3
065e4     02 00 00 FF 
065e8     38 E4 85 F1 | 	sub	objptr, ##1080
065ec     F2 20 02 F1 | 	add	local02, objptr
065f0     04 20 06 F1 | 	add	local02, #4
065f4     10 21 02 FB | 	rdlong	local02, local02
065f8     FE 21 0E F2 | 	cmp	local02, #510 wz
065fc     54 00 00 FF 
06600     E0 E4 85 F1 | 	sub	objptr, ##43232
06604     5C 00 90 AD |  if_e	jmp	#LR__0552
06608                 | '   do
06608                 | LR__0550
06608     28 1E B0 FD | 	call	#_expr
0660c     01 1E 06 F1 | 	add	local01, #1
06610                 | '   expr()
06610                 | '    i+=1
06610                 | '    if lparts(ct).token<> token_comma then exit loop else ct+=1
06610     56 00 00 FF 
06614     18 E5 05 F1 | 	add	objptr, ##44312
06618     F2 20 02 FB | 	rdlong	local02, objptr
0661c     03 20 66 F0 | 	shl	local02, #3
06620     02 00 00 FF 
06624     38 E4 85 F1 | 	sub	objptr, ##1080
06628     F2 20 02 F1 | 	add	local02, objptr
0662c     04 20 06 F1 | 	add	local02, #4
06630     10 21 02 FB | 	rdlong	local02, local02
06634     11 20 0E F2 | 	cmp	local02, #17 wz
06638     54 00 00 FF 
0663c     E0 E4 85 F1 | 	sub	objptr, ##43232
06640     20 00 90 5D |  if_ne	jmp	#LR__0551
06644     56 00 00 FF 
06648     18 E5 05 F1 | 	add	objptr, ##44312
0664c     F2 20 02 FB | 	rdlong	local02, objptr
06650     01 20 06 F1 | 	add	local02, #1
06654     F2 20 62 FC | 	wrlong	local02, objptr
06658     56 00 00 FF 
0665c     18 E5 85 F1 | 	sub	objptr, ##44312
06660     A4 FF 9F FD | 	jmp	#LR__0550
06664                 | LR__0551
06664                 | LR__0552
06664                 | ' return i
06664     0F FB 01 F6 | 	mov	result1, local01
06668     A7 F0 03 F6 | 	mov	ptra, fp
0666c     B2 00 A0 FD | 	call	#popregs_
06670                 | _compile_fun_varp_ret
06670     2D 00 64 FD | 	ret
06674                 | 
06674                 | ' 
06674                 | ' 
06674                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
06674                 | _compile_print
06674     0B 4A 05 F6 | 	mov	COUNT_, #11
06678     A8 00 A0 FD | 	call	#pushregs_
0667c     00 1E 06 F6 | 	mov	local01, #0
06680     1D 22 06 F6 | 	mov	local03, #29
06684                 | ' t1.result.uresult=0 : t1.result_type=result_uint
06684                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
06684     56 00 00 FF 
06688     18 E5 05 F1 | 	add	objptr, ##44312
0668c     F2 24 02 FB | 	rdlong	local04, objptr
06690     03 24 66 F0 | 	shl	local04, #3
06694     02 00 00 FF 
06698     38 E4 85 F1 | 	sub	objptr, ##1080
0669c     F2 24 02 F1 | 	add	local04, objptr
066a0     04 24 06 F1 | 	add	local04, #4
066a4     12 25 02 FB | 	rdlong	local04, local04
066a8     FE 25 0E F2 | 	cmp	local04, #510 wz
066ac     54 00 00 FF 
066b0     E0 E4 85 F1 | 	sub	objptr, ##43232
066b4     68 01 90 5D |  if_ne	jmp	#LR__0560
066b8     20 22 06 F6 | 	mov	local03, #32
066bc     0F 27 02 F6 | 	mov	local05, local01
066c0     10 29 02 F6 | 	mov	local06, local02
066c4     11 2B 02 F6 | 	mov	local07, local03
066c8     69 00 00 FF 
066cc     50 E5 05 F1 | 	add	objptr, ##54096
066d0     F2 2C 02 FB | 	rdlong	local08, objptr
066d4     16 2F 02 F6 | 	mov	local09, local08
066d8     01 2E 66 F0 | 	shl	local09, #1
066dc     16 2F 02 F1 | 	add	local09, local08
066e0     02 2E 66 F0 | 	shl	local09, #2
066e4     03 00 00 FF 
066e8     00 E4 85 F1 | 	sub	objptr, ##1536
066ec     F2 2E 02 F1 | 	add	local09, objptr
066f0     17 27 62 FC | 	wrlong	local05, local09
066f4     03 00 00 FF 
066f8     00 E4 05 F1 | 	add	objptr, ##1536
066fc     F2 26 02 FB | 	rdlong	local05, objptr
06700     13 31 02 F6 | 	mov	local10, local05
06704     01 30 66 F0 | 	shl	local10, #1
06708     13 31 02 F1 | 	add	local10, local05
0670c     02 30 66 F0 | 	shl	local10, #2
06710     03 00 00 FF 
06714     00 E4 85 F1 | 	sub	objptr, ##1536
06718     F2 30 02 F1 | 	add	local10, objptr
0671c     04 30 06 F1 | 	add	local10, #4
06720     18 29 62 FC | 	wrlong	local06, local10
06724     03 00 00 FF 
06728     00 E4 05 F1 | 	add	objptr, ##1536
0672c     F2 26 02 FB | 	rdlong	local05, objptr
06730     13 33 02 F6 | 	mov	local11, local05
06734     01 32 66 F0 | 	shl	local11, #1
06738     13 33 02 F1 | 	add	local11, local05
0673c     02 32 66 F0 | 	shl	local11, #2
06740     03 00 00 FF 
06744     00 E4 85 F1 | 	sub	objptr, ##1536
06748     F2 32 02 F1 | 	add	local11, objptr
0674c     08 32 06 F1 | 	add	local11, #8
06750     19 2B 62 FC | 	wrlong	local07, local11
06754     03 00 00 FF 
06758     00 E4 05 F1 | 	add	objptr, ##1536
0675c     F2 26 02 FB | 	rdlong	local05, objptr
06760     01 26 06 F1 | 	add	local05, #1
06764     F2 26 62 FC | 	wrlong	local05, objptr
06768     44 22 06 F6 | 	mov	local03, #68
0676c     0F 27 02 F6 | 	mov	local05, local01
06770     10 29 02 F6 | 	mov	local06, local02
06774     11 2B 02 F6 | 	mov	local07, local03
06778     F2 2C 02 FB | 	rdlong	local08, objptr
0677c     16 2F 02 F6 | 	mov	local09, local08
06780     01 2E 66 F0 | 	shl	local09, #1
06784     16 2F 02 F1 | 	add	local09, local08
06788     02 2E 66 F0 | 	shl	local09, #2
0678c     03 00 00 FF 
06790     00 E4 85 F1 | 	sub	objptr, ##1536
06794     F2 2E 02 F1 | 	add	local09, objptr
06798     17 27 62 FC | 	wrlong	local05, local09
0679c     03 00 00 FF 
067a0     00 E4 05 F1 | 	add	objptr, ##1536
067a4     F2 32 02 FB | 	rdlong	local11, objptr
067a8     19 31 02 F6 | 	mov	local10, local11
067ac     01 30 66 F0 | 	shl	local10, #1
067b0     19 31 02 F1 | 	add	local10, local11
067b4     02 30 66 F0 | 	shl	local10, #2
067b8     03 00 00 FF 
067bc     00 E4 85 F1 | 	sub	objptr, ##1536
067c0     F2 30 02 F1 | 	add	local10, objptr
067c4     04 30 06 F1 | 	add	local10, #4
067c8     18 29 62 FC | 	wrlong	local06, local10
067cc     03 00 00 FF 
067d0     00 E4 05 F1 | 	add	objptr, ##1536
067d4     F2 30 02 FB | 	rdlong	local10, objptr
067d8     18 33 02 F6 | 	mov	local11, local10
067dc     01 32 66 F0 | 	shl	local11, #1
067e0     18 33 02 F1 | 	add	local11, local10
067e4     02 32 66 F0 | 	shl	local11, #2
067e8     03 00 00 FF 
067ec     00 E4 85 F1 | 	sub	objptr, ##1536
067f0     F2 32 02 F1 | 	add	local11, objptr
067f4     08 32 06 F1 | 	add	local11, #8
067f8     19 2B 62 FC | 	wrlong	local07, local11
067fc     03 00 00 FF 
06800     00 E4 05 F1 | 	add	objptr, ##1536
06804     F2 26 02 FB | 	rdlong	local05, objptr
06808     01 26 06 F1 | 	add	local05, #1
0680c     F2 26 62 FC | 	wrlong	local05, objptr
06810     69 00 00 FF 
06814     50 E5 85 F1 | 	sub	objptr, ##54096
06818     00 FA 05 F6 | 	mov	result1, #0
0681c     20 05 90 FD | 	jmp	#LR__0567
06820                 | LR__0560
06820                 | ' do
06820                 | LR__0561
06820     10 1C B0 FD | 	call	#_expr
06824                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
06824                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
06824     56 00 00 FF 
06828     18 E5 05 F1 | 	add	objptr, ##44312
0682c     F2 24 02 FB | 	rdlong	local04, objptr
06830     03 24 66 F0 | 	shl	local04, #3
06834     02 00 00 FF 
06838     38 E4 85 F1 | 	sub	objptr, ##1080
0683c     F2 24 02 F1 | 	add	local04, objptr
06840     04 24 06 F1 | 	add	local04, #4
06844     12 2D 02 FB | 	rdlong	local08, local04
06848     11 2C 0E F2 | 	cmp	local08, #17 wz
0684c     54 00 00 FF 
06850     E0 E4 85 F1 | 	sub	objptr, ##43232
06854     60 01 90 5D |  if_ne	jmp	#LR__0562
06858     21 22 06 F6 | 	mov	local03, #33
0685c     0F 27 02 F6 | 	mov	local05, local01
06860     10 29 02 F6 | 	mov	local06, local02
06864     11 2B 02 F6 | 	mov	local07, local03
06868     69 00 00 FF 
0686c     50 E5 05 F1 | 	add	objptr, ##54096
06870     F2 2C 02 FB | 	rdlong	local08, objptr
06874     16 2F 02 F6 | 	mov	local09, local08
06878     01 2E 66 F0 | 	shl	local09, #1
0687c     16 2F 02 F1 | 	add	local09, local08
06880     02 2E 66 F0 | 	shl	local09, #2
06884     03 00 00 FF 
06888     00 E4 85 F1 | 	sub	objptr, ##1536
0688c     F2 2E 02 F1 | 	add	local09, objptr
06890     17 27 62 FC | 	wrlong	local05, local09
06894     03 00 00 FF 
06898     00 E4 05 F1 | 	add	objptr, ##1536
0689c     F2 32 02 FB | 	rdlong	local11, objptr
068a0     19 31 02 F6 | 	mov	local10, local11
068a4     01 30 66 F0 | 	shl	local10, #1
068a8     19 31 02 F1 | 	add	local10, local11
068ac     02 30 66 F0 | 	shl	local10, #2
068b0     03 00 00 FF 
068b4     00 E4 85 F1 | 	sub	objptr, ##1536
068b8     F2 30 02 F1 | 	add	local10, objptr
068bc     04 30 06 F1 | 	add	local10, #4
068c0     18 29 62 FC | 	wrlong	local06, local10
068c4     03 00 00 FF 
068c8     00 E4 05 F1 | 	add	objptr, ##1536
068cc     F2 26 02 FB | 	rdlong	local05, objptr
068d0     13 33 02 F6 | 	mov	local11, local05
068d4     01 32 66 F0 | 	shl	local11, #1
068d8     13 33 02 F1 | 	add	local11, local05
068dc     02 32 66 F0 | 	shl	local11, #2
068e0     03 00 00 FF 
068e4     00 E4 85 F1 | 	sub	objptr, ##1536
068e8     F2 32 02 F1 | 	add	local11, objptr
068ec     08 32 06 F1 | 	add	local11, #8
068f0     19 2B 62 FC | 	wrlong	local07, local11
068f4     03 00 00 FF 
068f8     00 E4 05 F1 | 	add	objptr, ##1536
068fc     F2 26 02 FB | 	rdlong	local05, objptr
06900     01 26 06 F1 | 	add	local05, #1
06904     F2 26 62 FC | 	wrlong	local05, objptr
06908     44 22 06 F6 | 	mov	local03, #68
0690c     0F 27 02 F6 | 	mov	local05, local01
06910     10 29 02 F6 | 	mov	local06, local02
06914     11 2B 02 F6 | 	mov	local07, local03
06918     F2 2C 02 FB | 	rdlong	local08, objptr
0691c     16 2F 02 F6 | 	mov	local09, local08
06920     01 2E 66 F0 | 	shl	local09, #1
06924     16 2F 02 F1 | 	add	local09, local08
06928     02 2E 66 F0 | 	shl	local09, #2
0692c     03 00 00 FF 
06930     00 E4 85 F1 | 	sub	objptr, ##1536
06934     F2 2E 02 F1 | 	add	local09, objptr
06938     17 27 62 FC | 	wrlong	local05, local09
0693c     03 00 00 FF 
06940     00 E4 05 F1 | 	add	objptr, ##1536
06944     F2 32 02 FB | 	rdlong	local11, objptr
06948     19 31 02 F6 | 	mov	local10, local11
0694c     01 30 66 F0 | 	shl	local10, #1
06950     19 31 02 F1 | 	add	local10, local11
06954     02 30 66 F0 | 	shl	local10, #2
06958     03 00 00 FF 
0695c     00 E4 85 F1 | 	sub	objptr, ##1536
06960     F2 30 02 F1 | 	add	local10, objptr
06964     04 30 06 F1 | 	add	local10, #4
06968     18 29 62 FC | 	wrlong	local06, local10
0696c     03 00 00 FF 
06970     00 E4 05 F1 | 	add	objptr, ##1536
06974     F2 30 02 FB | 	rdlong	local10, objptr
06978     18 33 02 F6 | 	mov	local11, local10
0697c     01 32 66 F0 | 	shl	local11, #1
06980     18 33 02 F1 | 	add	local11, local10
06984     02 32 66 F0 | 	shl	local11, #2
06988     03 00 00 FF 
0698c     00 E4 85 F1 | 	sub	objptr, ##1536
06990     F2 32 02 F1 | 	add	local11, objptr
06994     08 32 06 F1 | 	add	local11, #8
06998     19 2B 62 FC | 	wrlong	local07, local11
0699c     03 00 00 FF 
069a0     00 E4 05 F1 | 	add	objptr, ##1536
069a4     F2 26 02 FB | 	rdlong	local05, objptr
069a8     01 26 06 F1 | 	add	local05, #1
069ac     F2 26 62 FC | 	wrlong	local05, objptr
069b0     69 00 00 FF 
069b4     50 E5 85 F1 | 	sub	objptr, ##54096
069b8                 | LR__0562
069b8                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
069b8     56 00 00 FF 
069bc     18 E5 05 F1 | 	add	objptr, ##44312
069c0     F2 24 02 FB | 	rdlong	local04, objptr
069c4     03 24 66 F0 | 	shl	local04, #3
069c8     02 00 00 FF 
069cc     38 E4 85 F1 | 	sub	objptr, ##1080
069d0     F2 24 02 F1 | 	add	local04, objptr
069d4     04 24 06 F1 | 	add	local04, #4
069d8     12 2D 02 FB | 	rdlong	local08, local04
069dc     12 2C 0E F2 | 	cmp	local08, #18 wz
069e0     54 00 00 FF 
069e4     E0 E4 85 F1 | 	sub	objptr, ##43232
069e8     60 01 90 5D |  if_ne	jmp	#LR__0563
069ec     22 22 06 F6 | 	mov	local03, #34
069f0     0F 27 02 F6 | 	mov	local05, local01
069f4     10 29 02 F6 | 	mov	local06, local02
069f8     11 2B 02 F6 | 	mov	local07, local03
069fc     69 00 00 FF 
06a00     50 E5 05 F1 | 	add	objptr, ##54096
06a04     F2 2C 02 FB | 	rdlong	local08, objptr
06a08     16 2F 02 F6 | 	mov	local09, local08
06a0c     01 2E 66 F0 | 	shl	local09, #1
06a10     16 2F 02 F1 | 	add	local09, local08
06a14     02 2E 66 F0 | 	shl	local09, #2
06a18     03 00 00 FF 
06a1c     00 E4 85 F1 | 	sub	objptr, ##1536
06a20     F2 2E 02 F1 | 	add	local09, objptr
06a24     17 27 62 FC | 	wrlong	local05, local09
06a28     03 00 00 FF 
06a2c     00 E4 05 F1 | 	add	objptr, ##1536
06a30     F2 32 02 FB | 	rdlong	local11, objptr
06a34     19 31 02 F6 | 	mov	local10, local11
06a38     01 30 66 F0 | 	shl	local10, #1
06a3c     19 31 02 F1 | 	add	local10, local11
06a40     02 30 66 F0 | 	shl	local10, #2
06a44     03 00 00 FF 
06a48     00 E4 85 F1 | 	sub	objptr, ##1536
06a4c     F2 30 02 F1 | 	add	local10, objptr
06a50     04 30 06 F1 | 	add	local10, #4
06a54     18 29 62 FC | 	wrlong	local06, local10
06a58     03 00 00 FF 
06a5c     00 E4 05 F1 | 	add	objptr, ##1536
06a60     F2 26 02 FB | 	rdlong	local05, objptr
06a64     13 33 02 F6 | 	mov	local11, local05
06a68     01 32 66 F0 | 	shl	local11, #1
06a6c     13 33 02 F1 | 	add	local11, local05
06a70     02 32 66 F0 | 	shl	local11, #2
06a74     03 00 00 FF 
06a78     00 E4 85 F1 | 	sub	objptr, ##1536
06a7c     F2 32 02 F1 | 	add	local11, objptr
06a80     08 32 06 F1 | 	add	local11, #8
06a84     19 2B 62 FC | 	wrlong	local07, local11
06a88     03 00 00 FF 
06a8c     00 E4 05 F1 | 	add	objptr, ##1536
06a90     F2 26 02 FB | 	rdlong	local05, objptr
06a94     01 26 06 F1 | 	add	local05, #1
06a98     F2 26 62 FC | 	wrlong	local05, objptr
06a9c     44 22 06 F6 | 	mov	local03, #68
06aa0     0F 27 02 F6 | 	mov	local05, local01
06aa4     10 29 02 F6 | 	mov	local06, local02
06aa8     11 2B 02 F6 | 	mov	local07, local03
06aac     F2 2C 02 FB | 	rdlong	local08, objptr
06ab0     16 2F 02 F6 | 	mov	local09, local08
06ab4     01 2E 66 F0 | 	shl	local09, #1
06ab8     16 2F 02 F1 | 	add	local09, local08
06abc     02 2E 66 F0 | 	shl	local09, #2
06ac0     03 00 00 FF 
06ac4     00 E4 85 F1 | 	sub	objptr, ##1536
06ac8     F2 2E 02 F1 | 	add	local09, objptr
06acc     17 27 62 FC | 	wrlong	local05, local09
06ad0     03 00 00 FF 
06ad4     00 E4 05 F1 | 	add	objptr, ##1536
06ad8     F2 32 02 FB | 	rdlong	local11, objptr
06adc     19 31 02 F6 | 	mov	local10, local11
06ae0     01 30 66 F0 | 	shl	local10, #1
06ae4     19 31 02 F1 | 	add	local10, local11
06ae8     02 30 66 F0 | 	shl	local10, #2
06aec     03 00 00 FF 
06af0     00 E4 85 F1 | 	sub	objptr, ##1536
06af4     F2 30 02 F1 | 	add	local10, objptr
06af8     04 30 06 F1 | 	add	local10, #4
06afc     18 29 62 FC | 	wrlong	local06, local10
06b00     03 00 00 FF 
06b04     00 E4 05 F1 | 	add	objptr, ##1536
06b08     F2 30 02 FB | 	rdlong	local10, objptr
06b0c     18 33 02 F6 | 	mov	local11, local10
06b10     01 32 66 F0 | 	shl	local11, #1
06b14     18 33 02 F1 | 	add	local11, local10
06b18     02 32 66 F0 | 	shl	local11, #2
06b1c     03 00 00 FF 
06b20     00 E4 85 F1 | 	sub	objptr, ##1536
06b24     F2 32 02 F1 | 	add	local11, objptr
06b28     08 32 06 F1 | 	add	local11, #8
06b2c     19 2B 62 FC | 	wrlong	local07, local11
06b30     03 00 00 FF 
06b34     00 E4 05 F1 | 	add	objptr, ##1536
06b38     F2 26 02 FB | 	rdlong	local05, objptr
06b3c     01 26 06 F1 | 	add	local05, #1
06b40     F2 26 62 FC | 	wrlong	local05, objptr
06b44     69 00 00 FF 
06b48     50 E5 85 F1 | 	sub	objptr, ##54096
06b4c                 | LR__0563
06b4c                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
06b4c     56 00 00 FF 
06b50     18 E5 05 F1 | 	add	objptr, ##44312
06b54     F2 24 02 FB | 	rdlong	local04, objptr
06b58     03 24 66 F0 | 	shl	local04, #3
06b5c     02 00 00 FF 
06b60     38 E4 85 F1 | 	sub	objptr, ##1080
06b64     F2 24 02 F1 | 	add	local04, objptr
06b68     04 24 06 F1 | 	add	local04, #4
06b6c     12 2D 02 FB | 	rdlong	local08, local04
06b70     FE 2D 0E F2 | 	cmp	local08, #510 wz
06b74     54 00 00 FF 
06b78     E0 E4 85 F1 | 	sub	objptr, ##43232
06b7c     B8 00 90 5D |  if_ne	jmp	#LR__0564
06b80     44 22 06 F6 | 	mov	local03, #68
06b84     0F 27 02 F6 | 	mov	local05, local01
06b88     10 29 02 F6 | 	mov	local06, local02
06b8c     11 2B 02 F6 | 	mov	local07, local03
06b90     69 00 00 FF 
06b94     50 E5 05 F1 | 	add	objptr, ##54096
06b98     F2 2C 02 FB | 	rdlong	local08, objptr
06b9c     16 2F 02 F6 | 	mov	local09, local08
06ba0     01 2E 66 F0 | 	shl	local09, #1
06ba4     16 2F 02 F1 | 	add	local09, local08
06ba8     02 2E 66 F0 | 	shl	local09, #2
06bac     03 00 00 FF 
06bb0     00 E4 85 F1 | 	sub	objptr, ##1536
06bb4     F2 2E 02 F1 | 	add	local09, objptr
06bb8     17 27 62 FC | 	wrlong	local05, local09
06bbc     03 00 00 FF 
06bc0     00 E4 05 F1 | 	add	objptr, ##1536
06bc4     F2 32 02 FB | 	rdlong	local11, objptr
06bc8     19 31 02 F6 | 	mov	local10, local11
06bcc     01 30 66 F0 | 	shl	local10, #1
06bd0     19 31 02 F1 | 	add	local10, local11
06bd4     02 30 66 F0 | 	shl	local10, #2
06bd8     03 00 00 FF 
06bdc     00 E4 85 F1 | 	sub	objptr, ##1536
06be0     F2 30 02 F1 | 	add	local10, objptr
06be4     04 30 06 F1 | 	add	local10, #4
06be8     18 29 62 FC | 	wrlong	local06, local10
06bec     03 00 00 FF 
06bf0     00 E4 05 F1 | 	add	objptr, ##1536
06bf4     F2 30 02 FB | 	rdlong	local10, objptr
06bf8     18 33 02 F6 | 	mov	local11, local10
06bfc     01 32 66 F0 | 	shl	local11, #1
06c00     18 33 02 F1 | 	add	local11, local10
06c04     02 32 66 F0 | 	shl	local11, #2
06c08     03 00 00 FF 
06c0c     00 E4 85 F1 | 	sub	objptr, ##1536
06c10     F2 32 02 F1 | 	add	local11, objptr
06c14     08 32 06 F1 | 	add	local11, #8
06c18     19 2B 62 FC | 	wrlong	local07, local11
06c1c     03 00 00 FF 
06c20     00 E4 05 F1 | 	add	objptr, ##1536
06c24     F2 26 02 FB | 	rdlong	local05, objptr
06c28     01 26 06 F1 | 	add	local05, #1
06c2c     F2 26 62 FC | 	wrlong	local05, objptr
06c30     69 00 00 FF 
06c34     50 E5 85 F1 | 	sub	objptr, ##54096
06c38                 | LR__0564
06c38                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then  return 22
06c38     56 00 00 FF 
06c3c     18 E5 05 F1 | 	add	objptr, ##44312
06c40     F2 24 02 FB | 	rdlong	local04, objptr
06c44     03 24 66 F0 | 	shl	local04, #3
06c48     02 00 00 FF 
06c4c     38 E4 85 F1 | 	sub	objptr, ##1080
06c50     F2 24 02 F1 | 	add	local04, objptr
06c54     04 24 06 F1 | 	add	local04, #4
06c58     12 2D 02 FB | 	rdlong	local08, local04
06c5c     11 2C 0E F2 | 	cmp	local08, #17 wz
06c60     54 00 00 FF 
06c64     E0 E4 85 F1 | 	sub	objptr, ##43232
06c68     6C 00 90 AD |  if_e	jmp	#LR__0565
06c6c     56 00 00 FF 
06c70     18 E5 05 F1 | 	add	objptr, ##44312
06c74     F2 2C 02 FB | 	rdlong	local08, objptr
06c78     03 2C 66 F0 | 	shl	local08, #3
06c7c     02 00 00 FF 
06c80     38 E4 85 F1 | 	sub	objptr, ##1080
06c84     F2 2C 02 F1 | 	add	local08, objptr
06c88     04 2C 06 F1 | 	add	local08, #4
06c8c     16 2D 02 FB | 	rdlong	local08, local08
06c90     12 2C 0E F2 | 	cmp	local08, #18 wz
06c94     54 00 00 FF 
06c98     E0 E4 85 F1 | 	sub	objptr, ##43232
06c9c     38 00 90 AD |  if_e	jmp	#LR__0565
06ca0     56 00 00 FF 
06ca4     18 E5 05 F1 | 	add	objptr, ##44312
06ca8     F2 32 02 FB | 	rdlong	local11, objptr
06cac     03 32 66 F0 | 	shl	local11, #3
06cb0     02 00 00 FF 
06cb4     38 E4 85 F1 | 	sub	objptr, ##1080
06cb8     F2 32 02 F1 | 	add	local11, objptr
06cbc     04 32 06 F1 | 	add	local11, #4
06cc0     19 33 02 FB | 	rdlong	local11, local11
06cc4     FE 33 0E F2 | 	cmp	local11, #510 wz
06cc8     54 00 00 FF 
06ccc     E0 E4 85 F1 | 	sub	objptr, ##43232
06cd0     16 FA 05 56 |  if_ne	mov	result1, #22
06cd4     68 00 90 5D |  if_ne	jmp	#LR__0567
06cd8                 | LR__0565
06cd8     56 00 00 FF 
06cdc     18 E5 05 F1 | 	add	objptr, ##44312
06ce0     F2 24 02 FB | 	rdlong	local04, objptr
06ce4     01 24 06 F1 | 	add	local04, #1
06ce8     F2 24 62 FC | 	wrlong	local04, objptr
06cec     03 24 66 F0 | 	shl	local04, #3
06cf0     02 00 00 FF 
06cf4     38 E4 85 F1 | 	sub	objptr, ##1080
06cf8     F2 24 02 F1 | 	add	local04, objptr
06cfc     04 24 06 F1 | 	add	local04, #4
06d00     12 2D 02 FB | 	rdlong	local08, local04
06d04     FE 2D 0E F2 | 	cmp	local08, #510 wz
06d08     54 00 00 FF 
06d0c     E0 E4 85 F1 | 	sub	objptr, ##43232
06d10     28 00 90 AD |  if_e	jmp	#LR__0566
06d14     56 00 00 FF 
06d18     18 E5 05 F1 | 	add	objptr, ##44312
06d1c     F2 32 02 FB | 	rdlong	local11, objptr
06d20     0E 00 00 FF 
06d24     1C E4 05 F1 | 	add	objptr, ##7196
06d28     F2 30 02 FB | 	rdlong	local10, objptr
06d2c     64 00 00 FF 
06d30     34 E5 85 F1 | 	sub	objptr, ##51508
06d34     18 33 52 F2 | 	cmps	local11, local10 wc
06d38     E4 FA 9F CD |  if_b	jmp	#LR__0561
06d3c                 | LR__0566
06d3c                 | ' return 0
06d3c     00 FA 05 F6 | 	mov	result1, #0
06d40                 | LR__0567
06d40     A7 F0 03 F6 | 	mov	ptra, fp
06d44     B2 00 A0 FD | 	call	#popregs_
06d48                 | _compile_print_ret
06d48     2D 00 64 FD | 	ret
06d4c                 | 
06d4c                 | ' 
06d4c                 | ' function compile_if() as ulong  
06d4c                 | _compile_if
06d4c     05 4A 05 F6 | 	mov	COUNT_, #5
06d50     A8 00 A0 FD | 	call	#pushregs_
06d54                 | _compile_if_enter
06d54     DC 16 B0 FD | 	call	#_expr
06d58                 | ' expr()
06d58                 | ' return 0
06d58     56 00 00 FF 
06d5c     18 E5 05 F1 | 	add	objptr, ##44312
06d60     F2 FA 01 FB | 	rdlong	result1, objptr
06d64     01 FA 05 F1 | 	add	result1, #1
06d68     F2 FA 61 FC | 	wrlong	result1, objptr
06d6c     58 22 06 F6 | 	mov	local03, #88
06d70     0F 25 02 F6 | 	mov	local04, local01
06d74     10 27 02 F6 | 	mov	local05, local02
06d78     11 1F 02 F6 | 	mov	local01, local03
06d7c     13 00 00 FF 
06d80     38 E4 05 F1 | 	add	objptr, ##9784
06d84     F2 12 02 FB | 	rdlong	arg01, objptr
06d88     09 FB 01 F6 | 	mov	result1, arg01
06d8c     01 FA 65 F0 | 	shl	result1, #1
06d90     09 FB 01 F1 | 	add	result1, arg01
06d94     02 FA 65 F0 | 	shl	result1, #2
06d98     03 00 00 FF 
06d9c     00 E4 85 F1 | 	sub	objptr, ##1536
06da0     F2 FA 01 F1 | 	add	result1, objptr
06da4     FD 24 62 FC | 	wrlong	local04, result1
06da8     03 00 00 FF 
06dac     00 E4 05 F1 | 	add	objptr, ##1536
06db0     F2 12 02 FB | 	rdlong	arg01, objptr
06db4     09 25 02 F6 | 	mov	local04, arg01
06db8     01 24 66 F0 | 	shl	local04, #1
06dbc     09 25 02 F1 | 	add	local04, arg01
06dc0     02 24 66 F0 | 	shl	local04, #2
06dc4     03 00 00 FF 
06dc8     00 E4 85 F1 | 	sub	objptr, ##1536
06dcc     F2 24 02 F1 | 	add	local04, objptr
06dd0     04 24 06 F1 | 	add	local04, #4
06dd4     12 27 62 FC | 	wrlong	local05, local04
06dd8     03 00 00 FF 
06ddc     00 E4 05 F1 | 	add	objptr, ##1536
06de0     F2 24 02 FB | 	rdlong	local04, objptr
06de4     12 27 02 F6 | 	mov	local05, local04
06de8     01 26 66 F0 | 	shl	local05, #1
06dec     12 27 02 F1 | 	add	local05, local04
06df0     02 26 66 F0 | 	shl	local05, #2
06df4     03 00 00 FF 
06df8     00 E4 85 F1 | 	sub	objptr, ##1536
06dfc     F2 26 02 F1 | 	add	local05, objptr
06e00     08 26 06 F1 | 	add	local05, #8
06e04     13 1F 62 FC | 	wrlong	local01, local05
06e08     03 00 00 FF 
06e0c     00 E4 05 F1 | 	add	objptr, ##1536
06e10     F2 24 02 FB | 	rdlong	local04, objptr
06e14     01 24 06 F1 | 	add	local04, #1
06e18     F2 24 62 FC | 	wrlong	local04, objptr
06e1c                 | ' 
06e1c                 | ' 'print "In compile_if"
06e1c                 | ' compile_fun_1p()
06e1c                 | ' cmd=lparts(ct).token : ct+=1
06e1c                 | ' 'print cmd ' : if cmd<> token_then then print "Expected then" else print "Found then"
06e1c                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
06e1c                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
06e1c     13 00 00 FF 
06e20     38 E4 85 F1 | 	sub	objptr, ##9784
06e24     F2 26 02 FB | 	rdlong	local05, objptr
06e28     01 26 06 F1 | 	add	local05, #1
06e2c     03 26 66 F0 | 	shl	local05, #3
06e30     02 00 00 FF 
06e34     38 E4 85 F1 | 	sub	objptr, ##1080
06e38     F2 26 02 F1 | 	add	local05, objptr
06e3c     13 13 02 FB | 	rdlong	arg01, local05
06e40     54 00 00 FF 
06e44     E0 E4 85 F1 | 	sub	objptr, ##43232
06e48                 | ' 
06e48                 | ' select case s
06e48     42 01 00 FF 
06e4c     5D 14 06 F6 | 	mov	arg02, ##@LR__4384
06e50     4C 1F B1 FD | 	call	#__system___string_cmp
06e54     00 FA 0D F2 | 	cmp	result1, #0 wz
06e58     1B FA 05 A6 |  if_e	mov	result1, #27
06e5c     00 FA 05 56 |  if_ne	mov	result1, #0
06e60     00 FA 0D F2 | 	cmp	result1, #0 wz
06e64     0C 00 90 AD |  if_e	jmp	#LR__0570
06e68     05 12 06 F6 | 	mov	arg01, #5
06e6c     88 ED BF FD | 	call	#_compile_immediate_assign
06e70     08 00 90 FD | 	jmp	#LR__0571
06e74                 | LR__0570
06e74     05 12 06 F6 | 	mov	arg01, #5
06e78     70 E5 BF FD | 	call	#_compile_immediate
06e7c                 | LR__0571
06e7c                 | ' 
06e7c                 | ' 
06e7c                 | ' return 0
06e7c     00 FA 05 F6 | 	mov	result1, #0
06e80     A7 F0 03 F6 | 	mov	ptra, fp
06e84     B2 00 A0 FD | 	call	#popregs_
06e88                 | _compile_if_ret
06e88     2D 00 64 FD | 	ret
06e8c                 | 
06e8c                 | ' 
06e8c                 | ' function compile_else() as ulong  
06e8c                 | _compile_else
06e8c     05 4A 05 F6 | 	mov	COUNT_, #5
06e90     A8 00 A0 FD | 	call	#pushregs_
06e94                 | _compile_else_enter
06e94     5A 22 06 F6 | 	mov	local03, #90
06e98     0F 25 02 F6 | 	mov	local04, local01
06e9c     10 27 02 F6 | 	mov	local05, local02
06ea0     11 1F 02 F6 | 	mov	local01, local03
06ea4     69 00 00 FF 
06ea8     50 E5 05 F1 | 	add	objptr, ##54096
06eac     F2 12 02 FB | 	rdlong	arg01, objptr
06eb0     09 FB 01 F6 | 	mov	result1, arg01
06eb4     01 FA 65 F0 | 	shl	result1, #1
06eb8     09 FB 01 F1 | 	add	result1, arg01
06ebc     02 FA 65 F0 | 	shl	result1, #2
06ec0     03 00 00 FF 
06ec4     00 E4 85 F1 | 	sub	objptr, ##1536
06ec8     F2 FA 01 F1 | 	add	result1, objptr
06ecc     FD 24 62 FC | 	wrlong	local04, result1
06ed0     03 00 00 FF 
06ed4     00 E4 05 F1 | 	add	objptr, ##1536
06ed8     F2 FA 01 FB | 	rdlong	result1, objptr
06edc     FD 24 02 F6 | 	mov	local04, result1
06ee0     01 24 66 F0 | 	shl	local04, #1
06ee4     FD 24 02 F1 | 	add	local04, result1
06ee8     02 24 66 F0 | 	shl	local04, #2
06eec     03 00 00 FF 
06ef0     00 E4 85 F1 | 	sub	objptr, ##1536
06ef4     F2 24 02 F1 | 	add	local04, objptr
06ef8     04 24 06 F1 | 	add	local04, #4
06efc     12 27 62 FC | 	wrlong	local05, local04
06f00     03 00 00 FF 
06f04     00 E4 05 F1 | 	add	objptr, ##1536
06f08     F2 24 02 FB | 	rdlong	local04, objptr
06f0c     12 27 02 F6 | 	mov	local05, local04
06f10     01 26 66 F0 | 	shl	local05, #1
06f14     12 27 02 F1 | 	add	local05, local04
06f18     02 26 66 F0 | 	shl	local05, #2
06f1c     03 00 00 FF 
06f20     00 E4 85 F1 | 	sub	objptr, ##1536
06f24     F2 26 02 F1 | 	add	local05, objptr
06f28     08 26 06 F1 | 	add	local05, #8
06f2c     13 1F 62 FC | 	wrlong	local01, local05
06f30     03 00 00 FF 
06f34     00 E4 05 F1 | 	add	objptr, ##1536
06f38     F2 24 02 FB | 	rdlong	local04, objptr
06f3c     01 24 06 F1 | 	add	local04, #1
06f40     F2 24 62 FC | 	wrlong	local04, objptr
06f44                 | ' 
06f44                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
06f44                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
06f44     13 00 00 FF 
06f48     38 E4 85 F1 | 	sub	objptr, ##9784
06f4c     F2 26 02 FB | 	rdlong	local05, objptr
06f50     01 26 06 F1 | 	add	local05, #1
06f54     03 26 66 F0 | 	shl	local05, #3
06f58     02 00 00 FF 
06f5c     38 E4 85 F1 | 	sub	objptr, ##1080
06f60     F2 26 02 F1 | 	add	local05, objptr
06f64     13 13 02 FB | 	rdlong	arg01, local05
06f68     54 00 00 FF 
06f6c     E0 E4 85 F1 | 	sub	objptr, ##43232
06f70                 | ' 
06f70                 | ' select case s
06f70     42 01 00 FF 
06f74     5D 14 06 F6 | 	mov	arg02, ##@LR__4384
06f78     24 1E B1 FD | 	call	#__system___string_cmp
06f7c     00 FA 0D F2 | 	cmp	result1, #0 wz
06f80     1B FA 05 A6 |  if_e	mov	result1, #27
06f84     00 FA 05 56 |  if_ne	mov	result1, #0
06f88     00 FA 0D F2 | 	cmp	result1, #0 wz
06f8c     0C 00 90 AD |  if_e	jmp	#LR__0580
06f90     05 12 06 F6 | 	mov	arg01, #5
06f94     60 EC BF FD | 	call	#_compile_immediate_assign
06f98     08 00 90 FD | 	jmp	#LR__0581
06f9c                 | LR__0580
06f9c     05 12 06 F6 | 	mov	arg01, #5
06fa0     48 E4 BF FD | 	call	#_compile_immediate
06fa4                 | LR__0581
06fa4                 | ' 
06fa4                 | ' 
06fa4                 | ' return 0
06fa4     00 FA 05 F6 | 	mov	result1, #0
06fa8     A7 F0 03 F6 | 	mov	ptra, fp
06fac     B2 00 A0 FD | 	call	#popregs_
06fb0                 | _compile_else_ret
06fb0     2D 00 64 FD | 	ret
06fb4                 | 
06fb4                 | ' 
06fb4                 | ' 
06fb4                 | ' function compile_dim() as ulong  
06fb4                 | _compile_dim
06fb4     11 4A 05 F6 | 	mov	COUNT_, #17
06fb8     A8 00 A0 FD | 	call	#pushregs_
06fbc     01 1E 06 F6 | 	mov	local01, #1
06fc0     01 20 06 F6 | 	mov	local02, #1
06fc4     01 22 06 F6 | 	mov	local03, #1
06fc8                 | ' 
06fc8                 | ' dims(0)=1: dims(1)=1: dims(2)=1
06fc8                 | ' 
06fc8                 | ' if isname(lparts(ct).part$) then 
06fc8     56 00 00 FF 
06fcc     18 E5 05 F1 | 	add	objptr, ##44312
06fd0     F2 18 02 FB | 	rdlong	arg04, objptr
06fd4     03 18 66 F0 | 	shl	arg04, #3
06fd8     02 00 00 FF 
06fdc     38 E4 85 F1 | 	sub	objptr, ##1080
06fe0     F2 18 02 F1 | 	add	arg04, objptr
06fe4     0C 13 02 FB | 	rdlong	arg01, arg04
06fe8     54 00 00 FF 
06fec     E0 E4 85 F1 | 	sub	objptr, ##43232
06ff0     DC D3 BF FD | 	call	#_isname
06ff4     00 FA 0D F2 | 	cmp	result1, #0 wz
06ff8     AC 05 90 AD |  if_e	jmp	#LR__0614
06ffc     56 00 00 FF 
07000     18 E5 05 F1 | 	add	objptr, ##44312
07004     F2 24 02 FB | 	rdlong	local04, objptr
07008     03 24 66 F0 | 	shl	local04, #3
0700c     02 00 00 FF 
07010     38 E4 85 F1 | 	sub	objptr, ##1080
07014     F2 24 02 F1 | 	add	local04, objptr
07018     12 27 02 FB | 	rdlong	local05, local04
0701c     01 28 66 F6 | 	neg	local06, #1
07020                 | '   varname2$=lparts(ct).part$ 
07020                 | '   j=-1
07020                 | '   if varnum>0 then
07020     04 E4 85 F1 | 	sub	objptr, #4
07024     F2 2A 02 FB | 	rdlong	local07, objptr
07028     54 00 00 FF 
0702c     DC E4 85 F1 | 	sub	objptr, ##43228
07030     01 2A 56 F2 | 	cmps	local07, #1 wc
07034     58 00 90 CD |  if_b	jmp	#LR__0592
07038                 | '  '   print "in dim, varnum=";varnum
07038                 | '     for i=0 to varnum-1
07038     00 2C 06 F6 | 	mov	local08, #0
0703c     54 00 00 FF 
07040     DC E4 05 F1 | 	add	objptr, ##43228
07044     F2 2E 02 FB | 	rdlong	local09, objptr
07048     54 00 00 FF 
0704c     DC E4 85 F1 | 	sub	objptr, ##43228
07050                 | LR__0590
07050     17 2D 52 F2 | 	cmps	local08, local09 wc
07054     38 00 90 3D |  if_ae	jmp	#LR__0591
07058                 | '       if variables(i).name=varname2$ then j=i : exit
07058     16 25 02 F6 | 	mov	local04, local08
0705c     04 24 66 F0 | 	shl	local04, #4
07060     34 00 00 FF 
07064     DC E4 05 F1 | 	add	objptr, ##26844
07068     F2 24 02 F1 | 	add	local04, objptr
0706c     12 13 02 FB | 	rdlong	arg01, local04
07070     13 15 02 F6 | 	mov	arg02, local05
07074     34 00 00 FF 
07078     DC E4 85 F1 | 	sub	objptr, ##26844
0707c     20 1D B1 FD | 	call	#__system___string_cmp
07080     00 FA 0D F2 | 	cmp	result1, #0 wz
07084     16 29 02 A6 |  if_e	mov	local06, local08
07088     01 2C 06 51 |  if_ne	add	local08, #1
0708c     C0 FF 9F 5D |  if_ne	jmp	#LR__0590
07090                 | LR__0591
07090                 | LR__0592
07090                 | ' '  if j<>-1 then printerror (42) : return 42
07090                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
07090     FF FF 7F FF 
07094     FF 29 0E F2 | 	cmp	local06, ##-1 wz
07098     54 00 00 AF 
0709c     DC E4 05 A1 |  if_e	add	objptr, ##43228
070a0     F2 28 02 AB |  if_e	rdlong	local06, objptr
070a4     54 00 00 AF 
070a8     DC E4 85 A1 |  if_e	sub	objptr, ##43228
070ac     78 00 90 AD |  if_e	jmp	#LR__0593
070b0     00 12 06 F6 | 	mov	arg01, #0
070b4     C4 75 B1 FD | 	call	#__system___getiolock_0423
070b8     FD 12 02 F6 | 	mov	arg01, result1
070bc     B8 1C B1 FD | 	call	#__system___lockmem
070c0     43 01 00 FF 
070c4     C5 14 06 F6 | 	mov	arg02, ##@LR__4532
070c8     00 12 06 F6 | 	mov	arg01, #0
070cc     00 16 06 F6 | 	mov	arg03, #0
070d0     98 29 B1 FD | 	call	#__system___basic_print_string
070d4     7A 00 00 FF 
070d8     64 E5 05 F1 | 	add	objptr, ##62820
070dc     F2 14 02 FB | 	rdlong	arg02, objptr
070e0     7A 00 00 FF 
070e4     64 E5 85 F1 | 	sub	objptr, ##62820
070e8     00 12 06 F6 | 	mov	arg01, #0
070ec     00 16 06 F6 | 	mov	arg03, #0
070f0     0A 18 06 F6 | 	mov	arg04, #10
070f4     F8 29 B1 FD | 	call	#__system___basic_print_unsigned
070f8     43 01 00 FF 
070fc     D3 14 06 F6 | 	mov	arg02, ##@LR__4533
07100     00 12 06 F6 | 	mov	arg01, #0
07104     00 16 06 F6 | 	mov	arg03, #0
07108     60 29 B1 FD | 	call	#__system___basic_print_string
0710c     00 12 06 F6 | 	mov	arg01, #0
07110     0A 14 06 F6 | 	mov	arg02, #10
07114     00 16 06 F6 | 	mov	arg03, #0
07118     F8 28 B1 FD | 	call	#__system___basic_print_char
0711c     00 12 06 F6 | 	mov	arg01, #0
07120     58 75 B1 FD | 	call	#__system___getiolock_0423
07124     FD 00 68 FC | 	wrlong	#0, result1
07128                 | LR__0593
07128                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then printerror(43) : return 43
07128     56 00 00 FF 
0712c     18 E5 05 F1 | 	add	objptr, ##44312
07130     F2 18 02 FB | 	rdlong	arg04, objptr
07134     01 18 06 F1 | 	add	arg04, #1
07138     03 18 66 F0 | 	shl	arg04, #3
0713c     02 00 00 FF 
07140     38 E4 85 F1 | 	sub	objptr, ##1080
07144     F2 18 02 F1 | 	add	arg04, objptr
07148     0C 13 02 FB | 	rdlong	arg01, arg04
0714c     43 01 00 FF 
07150     F4 14 06 F6 | 	mov	arg02, ##@LR__4534
07154     54 00 00 FF 
07158     E0 E4 85 F1 | 	sub	objptr, ##43232
0715c     40 1C B1 FD | 	call	#__system___string_cmp
07160     00 FA 0D F2 | 	cmp	result1, #0 wz
07164     50 00 90 AD |  if_e	jmp	#LR__0594
07168     56 00 00 FF 
0716c     18 E5 05 F1 | 	add	objptr, ##44312
07170     F2 2E 02 FB | 	rdlong	local09, objptr
07174     01 2E 06 F1 | 	add	local09, #1
07178     03 2E 66 F0 | 	shl	local09, #3
0717c     02 00 00 FF 
07180     38 E4 85 F1 | 	sub	objptr, ##1080
07184     F2 2E 02 F1 | 	add	local09, objptr
07188     17 13 02 FB | 	rdlong	arg01, local09
0718c     43 01 00 FF 
07190     F6 14 06 F6 | 	mov	arg02, ##@LR__4535
07194     54 00 00 FF 
07198     E0 E4 85 F1 | 	sub	objptr, ##43232
0719c     00 1C B1 FD | 	call	#__system___string_cmp
071a0     00 FA 0D F2 | 	cmp	result1, #0 wz
071a4     10 00 90 AD |  if_e	jmp	#LR__0594
071a8     2B 12 06 F6 | 	mov	arg01, #43
071ac     A4 E6 B0 FD | 	call	#_printerror
071b0     2B FA 05 F6 | 	mov	result1, #43
071b4     38 05 90 FD | 	jmp	#LR__0616
071b8                 | LR__0594
071b8                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350
071b8     56 00 00 FF 
071bc     18 E5 05 F1 | 	add	objptr, ##44312
071c0     F2 14 02 FB | 	rdlong	arg02, objptr
071c4     01 14 06 F1 | 	add	arg02, #1
071c8     03 14 66 F0 | 	shl	arg02, #3
071cc     02 00 00 FF 
071d0     38 E4 85 F1 | 	sub	objptr, ##1080
071d4     F2 14 02 F1 | 	add	arg02, objptr
071d8     0A 13 02 FB | 	rdlong	arg01, arg02
071dc     43 01 00 FF 
071e0     F9 14 06 F6 | 	mov	arg02, ##@LR__4536
071e4     54 00 00 FF 
071e8     E0 E4 85 F1 | 	sub	objptr, ##43232
071ec     B0 1B B1 FD | 	call	#__system___string_cmp
071f0     00 FA 0D F2 | 	cmp	result1, #0 wz
071f4     56 00 00 AF 
071f8     18 E5 05 A1 |  if_e	add	objptr, ##44312
071fc     F2 30 02 AB |  if_e	rdlong	local10, objptr
07200     56 00 00 AF 
07204     18 E5 85 A1 |  if_e	sub	objptr, ##44312
07208     01 30 06 A1 |  if_e	add	local10, #1
0720c     7C 01 90 AD |  if_e	jmp	#LR__0600
07210     56 00 00 FF 
07214     18 E5 05 F1 | 	add	objptr, ##44312
07218     F2 30 02 FB | 	rdlong	local10, objptr
0721c     56 00 00 FF 
07220     18 E5 85 F1 | 	sub	objptr, ##44312
07224     02 30 06 F1 | 	add	local10, #2
07228     00 32 06 F6 | 	mov	local11, #0
0722c                 | '   l=ct+2 : m=0 : do
0722c                 | LR__0595
0722c                 | '    ' print "in dim, lparts: ";lparts(l).part$, isdec(lparts(l).part$)
0722c                 | '     if isdec(lparts(l).part$) then 
0722c     18 25 02 F6 | 	mov	local04, local10
07230     03 24 66 F0 | 	shl	local04, #3
07234     54 00 00 FF 
07238     E0 E4 05 F1 | 	add	objptr, ##43232
0723c     F2 24 02 F1 | 	add	local04, objptr
07240     12 13 02 FB | 	rdlong	arg01, local04
07244     54 00 00 FF 
07248     E0 E4 85 F1 | 	sub	objptr, ##43232
0724c     24 D8 BF FD | 	call	#_isdec
07250     00 FA 0D F2 | 	cmp	result1, #0 wz
07254     44 00 90 AD |  if_e	jmp	#LR__0596
07258     19 35 02 F6 | 	mov	local12, local11
0725c     0F 35 06 F1 | 	add	local12, #local01
07260     18 2F 02 F6 | 	mov	local09, local10
07264     03 2E 66 F0 | 	shl	local09, #3
07268     54 00 00 FF 
0726c     E0 E4 05 F1 | 	add	objptr, ##43232
07270     F2 2E 02 F1 | 	add	local09, objptr
07274     17 13 02 FB | 	rdlong	arg01, local09
07278     00 14 06 F6 | 	mov	arg02, #0
0727c     54 00 00 FF 
07280     E0 E4 85 F1 | 	sub	objptr, ##43232
07284     54 4C B1 FD | 	call	#__system____builtin_atoi
07288     FD 36 02 F6 | 	mov	local13, result1
0728c                 | 	'.live	local13
0728c                 | 	'.live	local12
0728c     00 34 8E F9 | 	altd	local12, #0
07290     1B 35 02 F6 | 	mov	local12, local13
07294     01 32 06 F1 | 	add	local11, #1
07298     10 00 90 FD | 	jmp	#LR__0597
0729c                 | LR__0596
0729c     11 12 06 F6 | 	mov	arg01, #17
072a0     B0 E5 B0 FD | 	call	#_printerror
072a4                 | '       printerror (17)  : return(17)
072a4     11 FA 05 F6 | 	mov	result1, #17
072a8     44 04 90 FD | 	jmp	#LR__0616
072ac                 | LR__0597
072ac                 | '     if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then printerror (44)  : return(44)
072ac     18 25 02 F6 | 	mov	local04, local10
072b0     01 24 06 F1 | 	add	local04, #1
072b4     03 24 66 F0 | 	shl	local04, #3
072b8     54 00 00 FF 
072bc     E0 E4 05 F1 | 	add	objptr, ##43232
072c0     F2 24 02 F1 | 	add	local04, objptr
072c4     12 13 02 FB | 	rdlong	arg01, local04
072c8     43 01 00 FF 
072cc     FC 14 06 F6 | 	mov	arg02, ##@LR__4537
072d0     54 00 00 FF 
072d4     E0 E4 85 F1 | 	sub	objptr, ##43232
072d8     C4 1A B1 FD | 	call	#__system___string_cmp
072dc     00 FA 0D F2 | 	cmp	result1, #0 wz
072e0     48 00 90 AD |  if_e	jmp	#LR__0598
072e4     18 37 02 F6 | 	mov	local13, local10
072e8     01 36 06 F1 | 	add	local13, #1
072ec     03 36 66 F0 | 	shl	local13, #3
072f0     54 00 00 FF 
072f4     E0 E4 05 F1 | 	add	objptr, ##43232
072f8     F2 36 02 F1 | 	add	local13, objptr
072fc     1B 13 02 FB | 	rdlong	arg01, local13
07300     43 01 00 FF 
07304     FE 14 06 F6 | 	mov	arg02, ##@LR__4538
07308     54 00 00 FF 
0730c     E0 E4 85 F1 | 	sub	objptr, ##43232
07310     8C 1A B1 FD | 	call	#__system___string_cmp
07314     00 FA 0D F2 | 	cmp	result1, #0 wz
07318     10 00 90 AD |  if_e	jmp	#LR__0598
0731c     2C 12 06 F6 | 	mov	arg01, #44
07320     30 E5 B0 FD | 	call	#_printerror
07324     2C FA 05 F6 | 	mov	result1, #44
07328     C4 03 90 FD | 	jmp	#LR__0616
0732c                 | LR__0598
0732c     02 30 06 F1 | 	add	local10, #2
07330     18 25 02 F6 | 	mov	local04, local10
07334     01 24 86 F1 | 	sub	local04, #1
07338     03 24 66 F0 | 	shl	local04, #3
0733c     54 00 00 FF 
07340     E0 E4 05 F1 | 	add	objptr, ##43232
07344     F2 24 02 F1 | 	add	local04, objptr
07348     12 13 02 FB | 	rdlong	arg01, local04
0734c     43 01 00 FF 
07350     00 15 06 F6 | 	mov	arg02, ##@LR__4539
07354     54 00 00 FF 
07358     E0 E4 85 F1 | 	sub	objptr, ##43232
0735c     40 1A B1 FD | 	call	#__system___string_cmp
07360     00 FA 0D F2 | 	cmp	result1, #0 wz
07364     03 32 56 52 |  if_ne	cmps	local11, #3 wc
07368     C0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0595
0736c                 | '   if m>3 then printerror(45): return(45)
0736c     04 32 56 F2 | 	cmps	local11, #4 wc
07370     10 00 90 CD |  if_b	jmp	#LR__0599
07374     2D 12 06 F6 | 	mov	arg01, #45
07378     D8 E4 B0 FD | 	call	#_printerror
0737c     2D FA 05 F6 | 	mov	result1, #45
07380     6C 03 90 FD | 	jmp	#LR__0616
07384                 | LR__0599
07384     00 39 06 F6 | 	mov	local14, #256
07388     0C 3A 06 F6 | 	mov	local15, #12
0738c                 | LR__0600
0738c                 | '  ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' print lparts(l-1).part$,lparts(l).part$, lparts(l+1).part$
0738c                 | '   arraytype=array_no_type : esize=12
0738c                 | ' 1350 
0738c                 | '   if lparts(l).part$="as" then
0738c     18 25 02 F6 | 	mov	local04, local10
07390     03 24 66 F0 | 	shl	local04, #3
07394     54 00 00 FF 
07398     E0 E4 05 F1 | 	add	objptr, ##43232
0739c     F2 24 02 F1 | 	add	local04, objptr
073a0     12 13 02 FB | 	rdlong	arg01, local04
073a4     43 01 00 FF 
073a8     02 15 06 F6 | 	mov	arg02, ##@LR__4540
073ac     54 00 00 FF 
073b0     E0 E4 85 F1 | 	sub	objptr, ##43232
073b4     E8 19 B1 FD | 	call	#__system___string_cmp
073b8     00 FA 0D F2 | 	cmp	result1, #0 wz
073bc     F8 01 90 5D |  if_ne	jmp	#LR__0615
073c0                 | '     select case lparts(l+1).part$
073c0     18 35 02 F6 | 	mov	local12, local10
073c4     01 34 06 F1 | 	add	local12, #1
073c8     03 34 66 F0 | 	shl	local12, #3
073cc     54 00 00 FF 
073d0     E0 E4 05 F1 | 	add	objptr, ##43232
073d4     F2 34 02 F1 | 	add	local12, objptr
073d8     1A 3D 02 FB | 	rdlong	local16, local12
073dc     43 01 00 FF 
073e0     05 15 06 F6 | 	mov	arg02, ##@LR__4541
073e4     1E 13 02 F6 | 	mov	arg01, local16
073e8     54 00 00 FF 
073ec     E0 E4 85 F1 | 	sub	objptr, ##43232
073f0     AC 19 B1 FD | 	call	#__system___string_cmp
073f4     00 FA 0D F2 | 	cmp	result1, #0 wz
073f8     0C 01 90 AD |  if_e	jmp	#LR__0601
073fc     43 01 00 FF 
07400     0A 15 06 F6 | 	mov	arg02, ##@LR__4542
07404     1E 13 02 F6 | 	mov	arg01, local16
07408     94 19 B1 FD | 	call	#__system___string_cmp
0740c     00 FA 0D F2 | 	cmp	result1, #0 wz
07410     00 01 90 AD |  if_e	jmp	#LR__0602
07414     43 01 00 FF 
07418     10 15 06 F6 | 	mov	arg02, ##@LR__4543
0741c     1E 13 02 F6 | 	mov	arg01, local16
07420     7C 19 B1 FD | 	call	#__system___string_cmp
07424     00 FA 0D F2 | 	cmp	result1, #0 wz
07428     F4 00 90 AD |  if_e	jmp	#LR__0603
0742c     43 01 00 FF 
07430     16 15 06 F6 | 	mov	arg02, ##@LR__4544
07434     1E 13 02 F6 | 	mov	arg01, local16
07438     64 19 B1 FD | 	call	#__system___string_cmp
0743c     00 FA 0D F2 | 	cmp	result1, #0 wz
07440     E8 00 90 AD |  if_e	jmp	#LR__0604
07444     43 01 00 FF 
07448     1D 15 06 F6 | 	mov	arg02, ##@LR__4545
0744c     1E 13 02 F6 | 	mov	arg01, local16
07450     4C 19 B1 FD | 	call	#__system___string_cmp
07454     00 FA 0D F2 | 	cmp	result1, #0 wz
07458     DC 00 90 AD |  if_e	jmp	#LR__0605
0745c     43 01 00 FF 
07460     22 15 06 F6 | 	mov	arg02, ##@LR__4546
07464     1E 13 02 F6 | 	mov	arg01, local16
07468     34 19 B1 FD | 	call	#__system___string_cmp
0746c     00 FA 0D F2 | 	cmp	result1, #0 wz
07470     D0 00 90 AD |  if_e	jmp	#LR__0606
07474     43 01 00 FF 
07478     2A 15 06 F6 | 	mov	arg02, ##@LR__4547
0747c     1E 13 02 F6 | 	mov	arg01, local16
07480     1C 19 B1 FD | 	call	#__system___string_cmp
07484     00 FA 0D F2 | 	cmp	result1, #0 wz
07488     C4 00 90 AD |  if_e	jmp	#LR__0607
0748c     43 01 00 FF 
07490     30 15 06 F6 | 	mov	arg02, ##@LR__4548
07494     1E 13 02 F6 | 	mov	arg01, local16
07498     04 19 B1 FD | 	call	#__system___string_cmp
0749c     00 FA 0D F2 | 	cmp	result1, #0 wz
074a0     B8 00 90 AD |  if_e	jmp	#LR__0608
074a4     43 01 00 FF 
074a8     36 15 06 F6 | 	mov	arg02, ##@LR__4549
074ac     1E 13 02 F6 | 	mov	arg01, local16
074b0     EC 18 B1 FD | 	call	#__system___string_cmp
074b4     00 FA 0D F2 | 	cmp	result1, #0 wz
074b8     AC 00 90 AD |  if_e	jmp	#LR__0609
074bc     43 01 00 FF 
074c0     3D 15 06 F6 | 	mov	arg02, ##@LR__4550
074c4     1E 13 02 F6 | 	mov	arg01, local16
074c8     D4 18 B1 FD | 	call	#__system___string_cmp
074cc     00 FA 0D F2 | 	cmp	result1, #0 wz
074d0     A0 00 90 AD |  if_e	jmp	#LR__0610
074d4     43 01 00 FF 
074d8     44 15 06 F6 | 	mov	arg02, ##@LR__4551
074dc     1E 13 02 F6 | 	mov	arg01, local16
074e0     BC 18 B1 FD | 	call	#__system___string_cmp
074e4     00 FA 0D F2 | 	cmp	result1, #0 wz
074e8     94 00 90 AD |  if_e	jmp	#LR__0611
074ec     43 01 00 FF 
074f0     4B 15 06 F6 | 	mov	arg02, ##@LR__4552
074f4     1E 13 02 F6 | 	mov	arg01, local16
074f8     A4 18 B1 FD | 	call	#__system___string_cmp
074fc     00 FA 0D F2 | 	cmp	result1, #0 wz
07500     88 00 90 AD |  if_e	jmp	#LR__0612
07504     90 00 90 FD | 	jmp	#LR__0613
07508                 | LR__0601
07508     01 39 06 F6 | 	mov	local14, #257
0750c     01 3A 06 F6 | 	mov	local15, #1
07510     A4 00 90 FD | 	jmp	#LR__0615
07514                 | LR__0602
07514     02 39 06 F6 | 	mov	local14, #258
07518     01 3A 06 F6 | 	mov	local15, #1
0751c     98 00 90 FD | 	jmp	#LR__0615
07520                 | LR__0603
07520     03 39 06 F6 | 	mov	local14, #259
07524     02 3A 06 F6 | 	mov	local15, #2
07528     8C 00 90 FD | 	jmp	#LR__0615
0752c                 | LR__0604
0752c     04 39 06 F6 | 	mov	local14, #260
07530     02 3A 06 F6 | 	mov	local15, #2
07534     80 00 90 FD | 	jmp	#LR__0615
07538                 | LR__0605
07538     05 39 06 F6 | 	mov	local14, #261
0753c     04 3A 06 F6 | 	mov	local15, #4
07540     74 00 90 FD | 	jmp	#LR__0615
07544                 | LR__0606
07544     05 39 06 F6 | 	mov	local14, #261
07548     04 3A 06 F6 | 	mov	local15, #4
0754c     68 00 90 FD | 	jmp	#LR__0615
07550                 | LR__0607
07550     06 39 06 F6 | 	mov	local14, #262
07554     04 3A 06 F6 | 	mov	local15, #4
07558     5C 00 90 FD | 	jmp	#LR__0615
0755c                 | LR__0608
0755c     07 39 06 F6 | 	mov	local14, #263
07560     08 3A 06 F6 | 	mov	local15, #8
07564     50 00 90 FD | 	jmp	#LR__0615
07568                 | LR__0609
07568     08 39 06 F6 | 	mov	local14, #264
0756c     08 3A 06 F6 | 	mov	local15, #8
07570     44 00 90 FD | 	jmp	#LR__0615
07574                 | LR__0610
07574     09 39 06 F6 | 	mov	local14, #265
07578     04 3A 06 F6 | 	mov	local15, #4
0757c     38 00 90 FD | 	jmp	#LR__0615
07580                 | LR__0611
07580     0A 39 06 F6 | 	mov	local14, #266
07584     08 3A 06 F6 | 	mov	local15, #8
07588     2C 00 90 FD | 	jmp	#LR__0615
0758c                 | LR__0612
0758c     0B 39 06 F6 | 	mov	local14, #267
07590     04 3A 06 F6 | 	mov	local15, #4
07594     20 00 90 FD | 	jmp	#LR__0615
07598                 | LR__0613
07598     2F 12 06 F6 | 	mov	arg01, #47
0759c     B4 E2 B0 FD | 	call	#_printerror
075a0     2F FA 05 F6 | 	mov	result1, #47
075a4     48 01 90 FD | 	jmp	#LR__0616
075a8                 | LR__0614
075a8     2E 12 06 F6 | 	mov	arg01, #46
075ac     A4 E2 B0 FD | 	call	#_printerror
075b0                 | '   printerror(46): return 46
075b0     2E FA 05 F6 | 	mov	result1, #46
075b4     38 01 90 FD | 	jmp	#LR__0616
075b8                 | LR__0615
075b8     0F 3B 02 FD | 	qmul	local15, local01
075bc     18 2A 62 FD | 	getqx	local07
075c0     10 2B 02 FD | 	qmul	local07, local02
075c4     18 3C 62 FD | 	getqx	local16
075c8     11 3D 02 FD | 	qmul	local16, local03
075cc     7A 00 00 FF 
075d0     4C E5 05 F1 | 	add	objptr, ##62796
075d4     F2 3E 02 FB | 	rdlong	local17, objptr
075d8     1C 15 02 F6 | 	mov	arg02, local14
075dc     01 16 06 F6 | 	mov	arg03, #1
075e0     00 18 06 F6 | 	mov	arg04, #0
075e4                 | '     return fill(addr, pattern, count, listPtr, 4)
075e4     04 1A 06 F6 | 	mov	arg05, #4
075e8     18 3C 62 FD | 	getqx	local16
075ec     1E 3F 82 F1 | 	sub	local17, local16
075f0     10 3E 86 F1 | 	sub	local17, #16
075f4     F2 3E 62 FC | 	wrlong	local17, objptr
075f8     1F 13 02 F6 | 	mov	arg01, local17
075fc     6F 00 00 FF 
07600     8C E4 85 F1 | 	sub	objptr, ##56972
07604     B8 0D B1 FD | 	call	#_psram_spin2_fill
07608     1F 13 02 F6 | 	mov	arg01, local17
0760c     02 12 06 F1 | 	add	arg01, #2
07610     1D 15 02 F6 | 	mov	arg02, local15
07614     01 16 06 F6 | 	mov	arg03, #1
07618     00 18 06 F6 | 	mov	arg04, #0
0761c                 | '     return fill(addr, pattern, count, listPtr, 1)
0761c     01 1A 06 F6 | 	mov	arg05, #1
07620     9C 0D B1 FD | 	call	#_psram_spin2_fill
07624     1F 13 02 F6 | 	mov	arg01, local17
07628     04 12 06 F1 | 	add	arg01, #4
0762c     0F 15 02 F6 | 	mov	arg02, local01
07630     01 16 06 F6 | 	mov	arg03, #1
07634     00 18 06 F6 | 	mov	arg04, #0
07638                 | '     return fill(addr, pattern, count, listPtr, 4)
07638     04 1A 06 F6 | 	mov	arg05, #4
0763c     80 0D B1 FD | 	call	#_psram_spin2_fill
07640     1F 13 02 F6 | 	mov	arg01, local17
07644     08 12 06 F1 | 	add	arg01, #8
07648     10 15 02 F6 | 	mov	arg02, local02
0764c     01 16 06 F6 | 	mov	arg03, #1
07650     00 18 06 F6 | 	mov	arg04, #0
07654                 | '     return fill(addr, pattern, count, listPtr, 4)
07654     04 1A 06 F6 | 	mov	arg05, #4
07658     64 0D B1 FD | 	call	#_psram_spin2_fill
0765c     1F 13 02 F6 | 	mov	arg01, local17
07660     0C 12 06 F1 | 	add	arg01, #12
07664     11 15 02 F6 | 	mov	arg02, local03
07668     01 16 06 F6 | 	mov	arg03, #1
0766c     00 18 06 F6 | 	mov	arg04, #0
07670                 | '     return fill(addr, pattern, count, listPtr, 4)
07670     04 1A 06 F6 | 	mov	arg05, #4
07674     48 0D B1 FD | 	call	#_psram_spin2_fill
07678     14 35 02 F6 | 	mov	local12, local06
0767c     04 34 66 F0 | 	shl	local12, #4
07680     29 00 00 FF 
07684     1C E4 05 F1 | 	add	objptr, ##21020
07688     F2 34 02 F1 | 	add	local12, objptr
0768c     1A 27 62 FC | 	wrlong	local05, local12
07690     14 35 02 F6 | 	mov	local12, local06
07694     04 34 66 F0 | 	shl	local12, #4
07698     F2 34 02 F1 | 	add	local12, objptr
0769c     04 34 06 F1 | 	add	local12, #4
076a0     1A 3F 62 FC | 	wrlong	local17, local12
076a4     14 35 02 F6 | 	mov	local12, local06
076a8     04 34 66 F0 | 	shl	local12, #4
076ac     F2 34 02 F1 | 	add	local12, objptr
076b0     0C 34 06 F1 | 	add	local12, #12
076b4     1A 39 62 FC | 	wrlong	local14, local12
076b8                 | ' 'print dims(0),dims(1),dims(2),arraytype
076b8                 | ' 
076b8                 | ' arraysize=esize*dims(0)*dims(1)*dims(2)
076b8                 | ' arrayptr=memtop-arraysize-16
076b8                 | ' memtop=arrayptr
076b8                 | ' 
076b8                 | ' pslpoke arrayptr,arraytype
076b8                 | ' pspoke arrayptr+2,esize
076b8                 | ' pslpoke arrayptr+4,dims(0)
076b8                 | ' pslpoke arrayptr+8,dims(1)
076b8                 | ' pslpoke arrayptr+12,dims(2)
076b8                 | ' 
076b8                 | ' variables(j).name=varname2$
076b8                 | ' variables(j).value.uresult=arrayptr
076b8                 | ' variables(j).vartype=arraytype
076b8                 | ' if j=varnum then varnum+=1
076b8     20 00 00 FF 
076bc     00 E4 05 F1 | 	add	objptr, ##16384
076c0     F2 2A 02 FB | 	rdlong	local07, objptr
076c4     54 00 00 FF 
076c8     DC E4 85 F1 | 	sub	objptr, ##43228
076cc     15 29 0A F2 | 	cmp	local06, local07 wz
076d0     54 00 00 AF 
076d4     DC E4 05 A1 |  if_e	add	objptr, ##43228
076d8     F2 2A 02 AB |  if_e	rdlong	local07, objptr
076dc     01 2A 06 A1 |  if_e	add	local07, #1
076e0     F2 2A 62 AC |  if_e	wrlong	local07, objptr
076e4     54 00 00 AF 
076e8     DC E4 85 A1 |  if_e	sub	objptr, ##43228
076ec                 | ' 
076ec                 | ' return 0
076ec     00 FA 05 F6 | 	mov	result1, #0
076f0                 | LR__0616
076f0     A7 F0 03 F6 | 	mov	ptra, fp
076f4     B2 00 A0 FD | 	call	#popregs_
076f8                 | _compile_dim_ret
076f8     2D 00 64 FD | 	ret
076fc                 | 
076fc                 | ' 
076fc                 | ' 
076fc                 | ' function compile_for() as ulong  
076fc                 | _compile_for
076fc     07 4A 05 F6 | 	mov	COUNT_, #7
07700     A8 00 A0 FD | 	call	#pushregs_
07704                 | ' 
07704                 | ' 
07704                 | ' 
07704                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_error(32) : return 32
07704     56 00 00 FF 
07708     18 E5 05 F1 | 	add	objptr, ##44312
0770c     F2 14 02 FB | 	rdlong	arg02, objptr
07710     01 14 06 F1 | 	add	arg02, #1
07714     03 14 66 F0 | 	shl	arg02, #3
07718     02 00 00 FF 
0771c     38 E4 85 F1 | 	sub	objptr, ##1080
07720     F2 14 02 F1 | 	add	arg02, objptr
07724     0A 13 02 FB | 	rdlong	arg01, arg02
07728     54 00 00 FF 
0772c     E0 E4 85 F1 | 	sub	objptr, ##43232
07730                 | ' 
07730                 | ' select case s
07730     42 01 00 FF 
07734     5D 14 06 F6 | 	mov	arg02, ##@LR__4384
07738     64 16 B1 FD | 	call	#__system___string_cmp
0773c     00 FA 0D F2 | 	cmp	result1, #0 wz
07740     1B FA 05 A6 |  if_e	mov	result1, #27
07744     00 FA 05 56 |  if_ne	mov	result1, #0
07748     00 FA 0D F2 | 	cmp	result1, #0 wz
0774c     0C 00 90 AD |  if_e	jmp	#LR__0620
07750     05 12 06 F6 | 	mov	arg01, #5
07754     A0 E4 BF FD | 	call	#_compile_immediate_assign
07758     10 00 90 FD | 	jmp	#LR__0621
0775c                 | LR__0620
0775c     20 12 06 F6 | 	mov	arg01, #32
07760     10 E9 BF FD | 	call	#_compile_error
07764     20 FA 05 F6 | 	mov	result1, #32
07768     E8 02 90 FD | 	jmp	#LR__0627
0776c                 | LR__0621
0776c     69 00 00 FF 
07770     50 E5 05 F1 | 	add	objptr, ##54096
07774     F2 12 02 FB | 	rdlong	arg01, objptr
07778     09 25 02 F6 | 	mov	local04, arg01
0777c     01 24 86 F1 | 	sub	local04, #1
07780     12 15 02 F6 | 	mov	arg02, local04
07784     01 14 66 F0 | 	shl	arg02, #1
07788     12 15 02 F1 | 	add	arg02, local04
0778c     02 14 66 F0 | 	shl	arg02, #2
07790     03 00 00 FF 
07794     00 E4 85 F1 | 	sub	objptr, ##1536
07798     F2 14 02 F1 | 	add	arg02, objptr
0779c     0A 1F 02 FB | 	rdlong	local01, arg02
077a0     04 14 06 F1 | 	add	arg02, #4
077a4     0A 27 02 FB | 	rdlong	local05, arg02
077a8     01 12 86 F1 | 	sub	arg01, #1
077ac     09 29 02 F6 | 	mov	local06, arg01
077b0     01 28 66 F0 | 	shl	local06, #1
077b4     09 29 02 F1 | 	add	local06, arg01
077b8     02 28 66 F0 | 	shl	local06, #2
077bc     F2 28 02 F1 | 	add	local06, objptr
077c0     08 28 06 F1 | 	add	local06, #8
077c4     14 13 02 FB | 	rdlong	arg01, local06
077c8     13 21 02 F6 | 	mov	local02, local05
077cc     09 23 02 F6 | 	mov	local03, arg01
077d0                 | ' '' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
077d0                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then compile_error(34) : return 34
077d0     17 22 0E F2 | 	cmp	local03, #23 wz
077d4     66 00 00 FF 
077d8     50 E5 85 F1 | 	sub	objptr, ##52560
077dc     10 00 90 AD |  if_e	jmp	#LR__0622
077e0     22 12 06 F6 | 	mov	arg01, #34
077e4     8C E8 BF FD | 	call	#_compile_error
077e8     22 FA 05 F6 | 	mov	result1, #34
077ec     64 02 90 FD | 	jmp	#LR__0627
077f0                 | LR__0622
077f0     0F 2B 02 F6 | 	mov	local07, local01
077f4                 | ' varnum=t1.result.uresult
077f4                 | ' if lparts(ct).part$<>"to" then  compile_error(33) : return 33
077f4     56 00 00 FF 
077f8     18 E5 05 F1 | 	add	objptr, ##44312
077fc     F2 24 02 FB | 	rdlong	local04, objptr
07800     03 24 66 F0 | 	shl	local04, #3
07804     02 00 00 FF 
07808     38 E4 85 F1 | 	sub	objptr, ##1080
0780c     F2 24 02 F1 | 	add	local04, objptr
07810     12 13 02 FB | 	rdlong	arg01, local04
07814     43 01 00 FF 
07818     52 15 06 F6 | 	mov	arg02, ##@LR__4553
0781c     54 00 00 FF 
07820     E0 E4 85 F1 | 	sub	objptr, ##43232
07824     78 15 B1 FD | 	call	#__system___string_cmp
07828     00 FA 0D F2 | 	cmp	result1, #0 wz
0782c     10 00 90 AD |  if_e	jmp	#LR__0623
07830     21 12 06 F6 | 	mov	arg01, #33
07834     3C E8 BF FD | 	call	#_compile_error
07838     21 FA 05 F6 | 	mov	result1, #33
0783c     14 02 90 FD | 	jmp	#LR__0627
07840                 | LR__0623
07840     56 00 00 FF 
07844     18 E5 05 F1 | 	add	objptr, ##44312
07848     F2 24 02 FB | 	rdlong	local04, objptr
0784c     01 24 06 F1 | 	add	local04, #1
07850     F2 24 62 FC | 	wrlong	local04, objptr
07854     56 00 00 FF 
07858     18 E5 85 F1 | 	sub	objptr, ##44312
0785c     D4 0B B0 FD | 	call	#_expr
07860                 | ' ct+=1
07860                 | ' expr()  ' there is "to" value pushed on the stack
07860                 | ' if lparts(ct).part$="step" orelse lparts(ct).part$="st."then 
07860     56 00 00 FF 
07864     18 E5 05 F1 | 	add	objptr, ##44312
07868     F2 24 02 FB | 	rdlong	local04, objptr
0786c     03 24 66 F0 | 	shl	local04, #3
07870     02 00 00 FF 
07874     38 E4 85 F1 | 	sub	objptr, ##1080
07878     F2 24 02 F1 | 	add	local04, objptr
0787c     12 13 02 FB | 	rdlong	arg01, local04
07880     43 01 00 FF 
07884     55 15 06 F6 | 	mov	arg02, ##@LR__4554
07888     54 00 00 FF 
0788c     E0 E4 85 F1 | 	sub	objptr, ##43232
07890     0C 15 B1 FD | 	call	#__system___string_cmp
07894     00 FA 0D F2 | 	cmp	result1, #0 wz
07898     3C 00 90 AD |  if_e	jmp	#LR__0624
0789c     56 00 00 FF 
078a0     18 E5 05 F1 | 	add	objptr, ##44312
078a4     F2 28 02 FB | 	rdlong	local06, objptr
078a8     03 28 66 F0 | 	shl	local06, #3
078ac     02 00 00 FF 
078b0     38 E4 85 F1 | 	sub	objptr, ##1080
078b4     F2 28 02 F1 | 	add	local06, objptr
078b8     14 13 02 FB | 	rdlong	arg01, local06
078bc     43 01 00 FF 
078c0     5A 15 06 F6 | 	mov	arg02, ##@LR__4555
078c4     54 00 00 FF 
078c8     E0 E4 85 F1 | 	sub	objptr, ##43232
078cc     D0 14 B1 FD | 	call	#__system___string_cmp
078d0     00 FA 0D F2 | 	cmp	result1, #0 wz
078d4     24 00 90 5D |  if_ne	jmp	#LR__0625
078d8                 | LR__0624
078d8     56 00 00 FF 
078dc     18 E5 05 F1 | 	add	objptr, ##44312
078e0     F2 28 02 FB | 	rdlong	local06, objptr
078e4     01 28 06 F1 | 	add	local06, #1
078e8     F2 28 62 FC | 	wrlong	local06, objptr
078ec     56 00 00 FF 
078f0     18 E5 85 F1 | 	sub	objptr, ##44312
078f4     3C 0B B0 FD | 	call	#_expr
078f8     78 00 90 FD | 	jmp	#LR__0626
078fc                 | LR__0625
078fc     69 00 00 FF 
07900     50 E5 05 F1 | 	add	objptr, ##54096
07904     F2 28 02 FB | 	rdlong	local06, objptr
07908     14 27 02 F6 | 	mov	local05, local06
0790c     01 26 66 F0 | 	shl	local05, #1
07910     14 27 02 F1 | 	add	local05, local06
07914     02 26 66 F0 | 	shl	local05, #2
07918     03 00 00 FF 
0791c     00 E4 85 F1 | 	sub	objptr, ##1536
07920     F2 26 02 F1 | 	add	local05, objptr
07924     08 26 06 F1 | 	add	local05, #8
07928     13 39 68 FC | 	wrlong	#28, local05
0792c     03 00 00 FF 
07930     00 E4 05 F1 | 	add	objptr, ##1536
07934     F2 28 02 FB | 	rdlong	local06, objptr
07938     14 27 02 F6 | 	mov	local05, local06
0793c     01 26 66 F0 | 	shl	local05, #1
07940     14 27 02 F1 | 	add	local05, local06
07944     02 26 66 F0 | 	shl	local05, #2
07948     03 00 00 FF 
0794c     00 E4 85 F1 | 	sub	objptr, ##1536
07950     F2 26 02 F1 | 	add	local05, objptr
07954     13 03 68 FC | 	wrlong	#1, local05
07958     03 00 00 FF 
0795c     00 E4 05 F1 | 	add	objptr, ##1536
07960     F2 28 02 FB | 	rdlong	local06, objptr
07964     01 28 06 F1 | 	add	local06, #1
07968     F2 28 62 FC | 	wrlong	local06, objptr
0796c     69 00 00 FF 
07970     50 E5 85 F1 | 	sub	objptr, ##54096
07974                 | LR__0626
07974     69 00 00 FF 
07978     50 E5 05 F1 | 	add	objptr, ##54096
0797c     F2 28 02 FB | 	rdlong	local06, objptr
07980     14 27 02 F6 | 	mov	local05, local06
07984     01 26 66 F0 | 	shl	local05, #1
07988     14 27 02 F1 | 	add	local05, local06
0798c     02 26 66 F0 | 	shl	local05, #2
07990     03 00 00 FF 
07994     00 E4 85 F1 | 	sub	objptr, ##1536
07998     F2 26 02 F1 | 	add	local05, objptr
0799c     08 26 06 F1 | 	add	local05, #8
079a0     13 39 68 FC | 	wrlong	#28, local05
079a4     03 00 00 FF 
079a8     00 E4 05 F1 | 	add	objptr, ##1536
079ac     F2 28 02 FB | 	rdlong	local06, objptr
079b0     14 27 02 F6 | 	mov	local05, local06
079b4     01 26 66 F0 | 	shl	local05, #1
079b8     14 27 02 F1 | 	add	local05, local06
079bc     02 26 66 F0 | 	shl	local05, #2
079c0     03 00 00 FF 
079c4     00 E4 85 F1 | 	sub	objptr, ##1536
079c8     F2 26 02 F1 | 	add	local05, objptr
079cc     13 2B 62 FC | 	wrlong	local07, local05
079d0     03 00 00 FF 
079d4     00 E4 05 F1 | 	add	objptr, ##1536
079d8     F2 2A 02 FB | 	rdlong	local07, objptr
079dc     01 2A 06 F1 | 	add	local07, #1
079e0     F2 2A 62 FC | 	wrlong	local07, objptr
079e4     15 29 02 F6 | 	mov	local06, local07
079e8     01 28 66 F0 | 	shl	local06, #1
079ec     15 29 02 F1 | 	add	local06, local07
079f0     02 28 66 F0 | 	shl	local06, #2
079f4     03 00 00 FF 
079f8     00 E4 85 F1 | 	sub	objptr, ##1536
079fc     F2 28 02 F1 | 	add	local06, objptr
07a00     08 28 06 F1 | 	add	local06, #8
07a04     14 95 68 FC | 	wrlong	#74, local06
07a08     03 00 00 FF 
07a0c     00 E4 05 F1 | 	add	objptr, ##1536
07a10     F2 2A 02 FB | 	rdlong	local07, objptr
07a14     15 29 02 F6 | 	mov	local06, local07
07a18     01 28 66 F0 | 	shl	local06, #1
07a1c     15 29 02 F1 | 	add	local06, local07
07a20     02 28 66 F0 | 	shl	local06, #2
07a24     03 00 00 FF 
07a28     00 E4 85 F1 | 	sub	objptr, ##1536
07a2c     F2 28 02 F1 | 	add	local06, objptr
07a30     14 01 68 FC | 	wrlong	#0, local06
07a34     03 00 00 FF 
07a38     00 E4 05 F1 | 	add	objptr, ##1536
07a3c     F2 2A 02 FB | 	rdlong	local07, objptr
07a40     01 2A 06 F1 | 	add	local07, #1
07a44     F2 2A 62 FC | 	wrlong	local07, objptr
07a48     69 00 00 FF 
07a4c     50 E5 85 F1 | 	sub	objptr, ##54096
07a50                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
07a50                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
07a50                 | ' 
07a50                 | ' 
07a50                 | ' return 0
07a50     00 FA 05 F6 | 	mov	result1, #0
07a54                 | LR__0627
07a54     A7 F0 03 F6 | 	mov	ptra, fp
07a58     B2 00 A0 FD | 	call	#popregs_
07a5c                 | _compile_for_ret
07a5c     2D 00 64 FD | 	ret
07a60                 | 
07a60                 | ' 
07a60                 | ' 
07a60                 | ' sub do_for()
07a60                 | _do_for
07a60     05 4A 05 F6 | 	mov	COUNT_, #5
07a64     A8 00 A0 FD | 	call	#pushregs_
07a68     79 00 00 FF 
07a6c     AC E4 05 F1 | 	add	objptr, ##62124
07a70     F2 24 02 FB | 	rdlong	local04, objptr
07a74     01 24 06 F1 | 	add	local04, #1
07a78     F2 24 62 FC | 	wrlong	local04, objptr
07a7c     79 00 00 FF 
07a80     AC E4 85 F1 | 	sub	objptr, ##62124
07a84     5C 1E B0 FD | 	call	#_pop
07a88     FD 1E 02 F6 | 	mov	local01, result1
07a8c     FE 20 02 F6 | 	mov	local02, result2
07a90     FF 22 02 F6 | 	mov	local03, result3
07a94     79 00 00 FF 
07a98     AC E4 05 F1 | 	add	objptr, ##62124
07a9c     F2 24 02 FB | 	rdlong	local04, objptr
07aa0     12 27 02 F6 | 	mov	local05, local04
07aa4     02 26 66 F0 | 	shl	local05, #2
07aa8     12 27 02 F1 | 	add	local05, local04
07aac     02 26 66 F0 | 	shl	local05, #2
07ab0     07 00 00 FF 
07ab4     40 E5 85 F1 | 	sub	objptr, ##3904
07ab8     F2 26 02 F1 | 	add	local05, objptr
07abc     08 26 06 F1 | 	add	local05, #8
07ac0     13 1F 62 FC | 	wrlong	local01, local05
07ac4     71 00 00 FF 
07ac8     6C E5 85 F1 | 	sub	objptr, ##58220
07acc     14 1E B0 FD | 	call	#_pop
07ad0     FD 1E 02 F6 | 	mov	local01, result1
07ad4     FE 20 02 F6 | 	mov	local02, result2
07ad8     FF 22 02 F6 | 	mov	local03, result3
07adc     79 00 00 FF 
07ae0     AC E4 05 F1 | 	add	objptr, ##62124
07ae4     F2 24 02 FB | 	rdlong	local04, objptr
07ae8     12 27 02 F6 | 	mov	local05, local04
07aec     02 26 66 F0 | 	shl	local05, #2
07af0     12 27 02 F1 | 	add	local05, local04
07af4     02 26 66 F0 | 	shl	local05, #2
07af8     07 00 00 FF 
07afc     40 E5 85 F1 | 	sub	objptr, ##3904
07b00     F2 26 02 F1 | 	add	local05, objptr
07b04     0C 26 06 F1 | 	add	local05, #12
07b08     13 1F 62 FC | 	wrlong	local01, local05
07b0c     71 00 00 FF 
07b10     6C E5 85 F1 | 	sub	objptr, ##58220
07b14     CC 1D B0 FD | 	call	#_pop
07b18     FD 1E 02 F6 | 	mov	local01, result1
07b1c     FE 20 02 F6 | 	mov	local02, result2
07b20     FF 22 02 F6 | 	mov	local03, result3
07b24     79 00 00 FF 
07b28     AC E4 05 F1 | 	add	objptr, ##62124
07b2c     F2 24 02 FB | 	rdlong	local04, objptr
07b30     12 27 02 F6 | 	mov	local05, local04
07b34     02 26 66 F0 | 	shl	local05, #2
07b38     12 27 02 F1 | 	add	local05, local04
07b3c     02 26 66 F0 | 	shl	local05, #2
07b40     07 00 00 FF 
07b44     40 E5 85 F1 | 	sub	objptr, ##3904
07b48     F2 26 02 F1 | 	add	local05, objptr
07b4c     10 26 06 F1 | 	add	local05, #16
07b50     13 1F 62 FC | 	wrlong	local01, local05
07b54                 | ' fortop+=1
07b54                 | ' 'i=-1: do: i+=1 : loop until fortable(i).varnum= -1 orelse i>= maxfor
07b54                 | ' 'if i> maxfor then printerror(36) : return
07b54                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
07b54                 | ' t1=pop() : fortable(fortop).stepval=t1.result.iresult
07b54                 | ' t1=pop() : fortable(fortop).endval=t1.result.iresult
07b54                 | ' if compiledline(lineptr_e).result_type=token_end then
07b54     08 00 00 FF 
07b58     18 E4 85 F1 | 	sub	objptr, ##4120
07b5c     F2 1E 02 FB | 	rdlong	local01, objptr
07b60     0F 27 02 F6 | 	mov	local05, local01
07b64     01 26 66 F0 | 	shl	local05, #1
07b68     0F 27 02 F1 | 	add	local05, local01
07b6c     02 26 66 F0 | 	shl	local05, #2
07b70     03 00 00 FF 
07b74     04 E4 85 F1 | 	sub	objptr, ##1540
07b78     F2 26 02 F1 | 	add	local05, objptr
07b7c     08 26 06 F1 | 	add	local05, #8
07b80     13 27 02 FB | 	rdlong	local05, local05
07b84     FE 27 0E F2 | 	cmp	local05, #510 wz
07b88     66 00 00 FF 
07b8c     50 E5 85 F1 | 	sub	objptr, ##52560
07b90     70 00 90 5D |  if_ne	jmp	#LR__0630
07b94     79 00 00 FF 
07b98     AC E4 05 F1 | 	add	objptr, ##62124
07b9c     F2 1E 02 FB | 	rdlong	local01, objptr
07ba0     0F 27 02 F6 | 	mov	local05, local01
07ba4     02 26 66 F0 | 	shl	local05, #2
07ba8     0F 27 02 F1 | 	add	local05, local01
07bac     02 26 66 F0 | 	shl	local05, #2
07bb0     07 00 00 FF 
07bb4     40 E5 85 F1 | 	sub	objptr, ##3904
07bb8     F2 26 02 F1 | 	add	local05, objptr
07bbc     07 00 00 FF 
07bc0     18 E5 05 F1 | 	add	objptr, ##3864
07bc4     F2 1E 02 FB | 	rdlong	local01, objptr
07bc8     13 1F 62 FC | 	wrlong	local01, local05
07bcc     28 E4 05 F1 | 	add	objptr, #40
07bd0     F2 1E 02 FB | 	rdlong	local01, objptr
07bd4     0F 27 02 F6 | 	mov	local05, local01
07bd8     02 26 66 F0 | 	shl	local05, #2
07bdc     0F 27 02 F1 | 	add	local05, local01
07be0     02 26 66 F0 | 	shl	local05, #2
07be4     07 00 00 FF 
07be8     40 E5 85 F1 | 	sub	objptr, ##3904
07bec     F2 26 02 F1 | 	add	local05, objptr
07bf0     04 26 06 F1 | 	add	local05, #4
07bf4     13 01 68 FC | 	wrlong	#0, local05
07bf8     71 00 00 FF 
07bfc     6C E5 85 F1 | 	sub	objptr, ##58220
07c00     7C 00 90 FD | 	jmp	#LR__0631
07c04                 | LR__0630
07c04     79 00 00 FF 
07c08     AC E4 05 F1 | 	add	objptr, ##62124
07c0c     F2 1E 02 FB | 	rdlong	local01, objptr
07c10     0F 27 02 F6 | 	mov	local05, local01
07c14     02 26 66 F0 | 	shl	local05, #2
07c18     0F 27 02 F1 | 	add	local05, local01
07c1c     02 26 66 F0 | 	shl	local05, #2
07c20     07 00 00 FF 
07c24     40 E5 85 F1 | 	sub	objptr, ##3904
07c28     F2 26 02 F1 | 	add	local05, objptr
07c2c     07 00 00 FF 
07c30     20 E5 05 F1 | 	add	objptr, ##3872
07c34     F2 1E 02 FB | 	rdlong	local01, objptr
07c38     13 1F 62 FC | 	wrlong	local01, local05
07c3c     20 E4 05 F1 | 	add	objptr, #32
07c40     F2 1E 02 FB | 	rdlong	local01, objptr
07c44     0F 27 02 F6 | 	mov	local05, local01
07c48     02 26 66 F0 | 	shl	local05, #2
07c4c     0F 27 02 F1 | 	add	local05, local01
07c50     02 26 66 F0 | 	shl	local05, #2
07c54     07 00 00 FF 
07c58     40 E5 85 F1 | 	sub	objptr, ##3904
07c5c     F2 26 02 F1 | 	add	local05, objptr
07c60     08 00 00 FF 
07c64     18 E4 85 F1 | 	sub	objptr, ##4120
07c68     F2 1E 02 FB | 	rdlong	local01, objptr
07c6c     69 00 00 FF 
07c70     54 E5 85 F1 | 	sub	objptr, ##54100
07c74     01 1E 06 F1 | 	add	local01, #1
07c78     04 26 06 F1 | 	add	local05, #4
07c7c     13 1F 62 FC | 	wrlong	local01, local05
07c80                 | LR__0631
07c80     A7 F0 03 F6 | 	mov	ptra, fp
07c84     B2 00 A0 FD | 	call	#popregs_
07c88                 | _do_for_ret
07c88     2D 00 64 FD | 	ret
07c8c                 | 
07c8c                 | ' 
07c8c                 | ' ' now do_next todo
07c8c                 | ' 
07c8c                 | ' sub do_next()
07c8c                 | _do_next
07c8c     04 4A 05 F6 | 	mov	COUNT_, #4
07c90     A8 00 A0 FD | 	call	#pushregs_
07c94     4C 1C B0 FD | 	call	#_pop
07c98     FD 1E 02 F6 | 	mov	local01, result1
07c9c     FE 20 02 F6 | 	mov	local02, result2
07ca0     FF 22 02 F6 | 	mov	local03, result3
07ca4                 | ' 
07ca4                 | ' t1=pop() :varnum=t1.result.uresult
07ca4                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
07ca4     79 00 00 FF 
07ca8     AC E4 05 F1 | 	add	objptr, ##62124
07cac     F2 12 02 FB | 	rdlong	arg01, objptr
07cb0     09 25 02 F6 | 	mov	local04, arg01
07cb4     02 24 66 F0 | 	shl	local04, #2
07cb8     09 25 02 F1 | 	add	local04, arg01
07cbc     02 24 66 F0 | 	shl	local04, #2
07cc0     07 00 00 FF 
07cc4     40 E5 85 F1 | 	sub	objptr, ##3904
07cc8     F2 24 02 F1 | 	add	local04, objptr
07ccc     08 24 06 F1 | 	add	local04, #8
07cd0     12 25 02 FB | 	rdlong	local04, local04
07cd4     0F 25 0A F2 | 	cmp	local04, local01 wz
07cd8     71 00 00 FF 
07cdc     6C E5 85 F1 | 	sub	objptr, ##58220
07ce0     0C 00 90 AD |  if_e	jmp	#LR__0640
07ce4     25 12 06 F6 | 	mov	arg01, #37
07ce8     68 DB B0 FD | 	call	#_printerror
07cec     28 02 90 FD | 	jmp	#LR__0644
07cf0                 | LR__0640
07cf0     79 00 00 FF 
07cf4     AC E4 05 F1 | 	add	objptr, ##62124
07cf8     F2 12 02 FB | 	rdlong	arg01, objptr
07cfc     09 25 02 F6 | 	mov	local04, arg01
07d00     02 24 66 F0 | 	shl	local04, #2
07d04     09 25 02 F1 | 	add	local04, arg01
07d08     02 24 66 F0 | 	shl	local04, #2
07d0c     07 00 00 FF 
07d10     40 E5 85 F1 | 	sub	objptr, ##3904
07d14     F2 24 02 F1 | 	add	local04, objptr
07d18     0C 24 06 F1 | 	add	local04, #12
07d1c     12 25 02 FB | 	rdlong	local04, local04
07d20     0F 13 02 F6 | 	mov	arg01, local01
07d24     04 12 66 F0 | 	shl	arg01, #4
07d28     3D 00 00 FF 
07d2c     90 E4 85 F1 | 	sub	objptr, ##31376
07d30     F2 12 02 F1 | 	add	arg01, objptr
07d34     0F FF 01 F6 | 	mov	result3, local01
07d38     04 FE 65 F0 | 	shl	result3, #4
07d3c     F2 FE 01 F1 | 	add	result3, objptr
07d40     04 FE 05 F1 | 	add	result3, #4
07d44     FF FE 01 FB | 	rdlong	result3, result3
07d48     12 FF 01 F1 | 	add	result3, local04
07d4c     04 12 06 F1 | 	add	arg01, #4
07d50     09 FF 61 FC | 	wrlong	result3, arg01
07d54                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
07d54                 | ' if fortable(fortop).stepval>=0 then
07d54     44 00 00 FF 
07d58     D0 E5 05 F1 | 	add	objptr, ##35280
07d5c     F2 12 02 FB | 	rdlong	arg01, objptr
07d60     09 25 02 F6 | 	mov	local04, arg01
07d64     02 24 66 F0 | 	shl	local04, #2
07d68     09 25 02 F1 | 	add	local04, arg01
07d6c     02 24 66 F0 | 	shl	local04, #2
07d70     07 00 00 FF 
07d74     40 E5 85 F1 | 	sub	objptr, ##3904
07d78     F2 24 02 F1 | 	add	local04, objptr
07d7c     0C 24 06 F1 | 	add	local04, #12
07d80     12 25 02 FB | 	rdlong	local04, local04
07d84     00 24 56 F2 | 	cmps	local04, #0 wc
07d88     71 00 00 FF 
07d8c     6C E5 85 F1 | 	sub	objptr, ##58220
07d90     78 00 90 CD |  if_b	jmp	#LR__0641
07d94                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
07d94     04 1E 66 F0 | 	shl	local01, #4
07d98     34 00 00 FF 
07d9c     DC E4 05 F1 | 	add	objptr, ##26844
07da0     F2 1E 02 F1 | 	add	local01, objptr
07da4     44 00 00 FF 
07da8     D0 E5 05 F1 | 	add	objptr, ##35280
07dac     F2 24 02 FB | 	rdlong	local04, objptr
07db0     12 13 02 F6 | 	mov	arg01, local04
07db4     02 12 66 F0 | 	shl	arg01, #2
07db8     12 13 02 F1 | 	add	arg01, local04
07dbc     02 12 66 F0 | 	shl	arg01, #2
07dc0     07 00 00 FF 
07dc4     40 E5 85 F1 | 	sub	objptr, ##3904
07dc8     F2 12 02 F1 | 	add	arg01, objptr
07dcc     04 1E 06 F1 | 	add	local01, #4
07dd0     0F 25 02 FB | 	rdlong	local04, local01
07dd4     10 12 06 F1 | 	add	arg01, #16
07dd8     09 13 02 FB | 	rdlong	arg01, arg01
07ddc     09 25 5A F2 | 	cmps	local04, arg01 wcz
07de0     71 00 00 FF 
07de4     6C E5 85 F1 | 	sub	objptr, ##58220
07de8     9C 00 90 ED |  if_be	jmp	#LR__0643
07dec     79 00 00 FF 
07df0     AC E4 05 F1 | 	add	objptr, ##62124
07df4     F2 24 02 FB | 	rdlong	local04, objptr
07df8     01 24 86 F1 | 	sub	local04, #1
07dfc     F2 24 62 FC | 	wrlong	local04, objptr
07e00     79 00 00 FF 
07e04     AC E4 85 F1 | 	sub	objptr, ##62124
07e08     0C 01 90 FD | 	jmp	#LR__0644
07e0c                 | LR__0641
07e0c                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
07e0c     0F 13 02 F6 | 	mov	arg01, local01
07e10     04 12 66 F0 | 	shl	arg01, #4
07e14     34 00 00 FF 
07e18     DC E4 05 F1 | 	add	objptr, ##26844
07e1c     F2 12 02 F1 | 	add	arg01, objptr
07e20     44 00 00 FF 
07e24     D0 E5 05 F1 | 	add	objptr, ##35280
07e28     F2 24 02 FB | 	rdlong	local04, objptr
07e2c     12 1F 02 F6 | 	mov	local01, local04
07e30     02 1E 66 F0 | 	shl	local01, #2
07e34     12 1F 02 F1 | 	add	local01, local04
07e38     02 1E 66 F0 | 	shl	local01, #2
07e3c     07 00 00 FF 
07e40     40 E5 85 F1 | 	sub	objptr, ##3904
07e44     F2 1E 02 F1 | 	add	local01, objptr
07e48     04 12 06 F1 | 	add	arg01, #4
07e4c     09 13 02 FB | 	rdlong	arg01, arg01
07e50     10 1E 06 F1 | 	add	local01, #16
07e54     0F 1F 02 FB | 	rdlong	local01, local01
07e58     0F 13 52 F2 | 	cmps	arg01, local01 wc
07e5c     71 00 00 FF 
07e60     6C E5 85 F1 | 	sub	objptr, ##58220
07e64     20 00 90 3D |  if_ae	jmp	#LR__0642
07e68     79 00 00 FF 
07e6c     AC E4 05 F1 | 	add	objptr, ##62124
07e70     F2 24 02 FB | 	rdlong	local04, objptr
07e74     01 24 86 F1 | 	sub	local04, #1
07e78     F2 24 62 FC | 	wrlong	local04, objptr
07e7c     79 00 00 FF 
07e80     AC E4 85 F1 | 	sub	objptr, ##62124
07e84     90 00 90 FD | 	jmp	#LR__0644
07e88                 | LR__0642
07e88                 | LR__0643
07e88     79 00 00 FF 
07e8c     AC E4 05 F1 | 	add	objptr, ##62124
07e90     F2 1E 02 FB | 	rdlong	local01, objptr
07e94     0F 25 02 F6 | 	mov	local04, local01
07e98     02 24 66 F0 | 	shl	local04, #2
07e9c     0F 25 02 F1 | 	add	local04, local01
07ea0     02 24 66 F0 | 	shl	local04, #2
07ea4     07 00 00 FF 
07ea8     40 E5 85 F1 | 	sub	objptr, ##3904
07eac     F2 24 02 F1 | 	add	local04, objptr
07eb0     12 25 02 FB | 	rdlong	local04, local04
07eb4     07 00 00 FF 
07eb8     18 E5 05 F1 | 	add	objptr, ##3864
07ebc     F2 24 62 FC | 	wrlong	local04, objptr
07ec0     28 E4 05 F1 | 	add	objptr, #40
07ec4     F2 1E 02 FB | 	rdlong	local01, objptr
07ec8     0F 25 02 F6 | 	mov	local04, local01
07ecc     02 24 66 F0 | 	shl	local04, #2
07ed0     0F 25 02 F1 | 	add	local04, local01
07ed4     02 24 66 F0 | 	shl	local04, #2
07ed8     07 00 00 FF 
07edc     40 E5 85 F1 | 	sub	objptr, ##3904
07ee0     F2 24 02 F1 | 	add	local04, objptr
07ee4     04 24 06 F1 | 	add	local04, #4
07ee8     12 25 02 FB | 	rdlong	local04, local04
07eec     07 00 00 FF 
07ef0     1C E5 05 F1 | 	add	objptr, ##3868
07ef4     F2 24 62 FC | 	wrlong	local04, objptr
07ef8     0F 00 00 FF 
07efc     38 E5 85 F1 | 	sub	objptr, ##7992
07f00     F2 24 02 FB | 	rdlong	local04, objptr
07f04     01 24 86 F1 | 	sub	local04, #1
07f08     04 E4 05 F1 | 	add	objptr, #4
07f0c     F2 24 62 FC | 	wrlong	local04, objptr
07f10     69 00 00 FF 
07f14     54 E5 85 F1 | 	sub	objptr, ##54100
07f18                 | LR__0644
07f18     A7 F0 03 F6 | 	mov	ptra, fp
07f1c     B2 00 A0 FD | 	call	#popregs_
07f20                 | _do_next_ret
07f20     2D 00 64 FD | 	ret
07f24                 | 
07f24                 | ' 
07f24                 | ' 
07f24                 | ' function compile_next() as ulong
07f24                 | _compile_next
07f24     04 4A 05 F6 | 	mov	COUNT_, #4
07f28     A8 00 A0 FD | 	call	#pushregs_
07f2c     56 00 00 FF 
07f30     18 E5 05 F1 | 	add	objptr, ##44312
07f34     F2 12 02 FB | 	rdlong	arg01, objptr
07f38     03 12 66 F0 | 	shl	arg01, #3
07f3c     02 00 00 FF 
07f40     38 E4 85 F1 | 	sub	objptr, ##1080
07f44     F2 12 02 F1 | 	add	arg01, objptr
07f48     09 1F 02 FB | 	rdlong	local01, arg01
07f4c                 | ' 
07f4c                 | ' varname$=lparts(ct).part$ 
07f4c                 | ' 'suffix$=right$(varname$,1)
07f4c                 | ' 'if varname$="" orelse suffix$="$" orelse suffix$="!" orelse suffix$="#" then  compile_error(34) : printerror(34) : return 34
07f4c                 | ' if varnum=0 then compile_error(35)  : return 35
07f4c     04 E4 85 F1 | 	sub	objptr, #4
07f50     F2 14 0A FB | 	rdlong	arg02, objptr wz
07f54     54 00 00 FF 
07f58     DC E4 85 F1 | 	sub	objptr, ##43228
07f5c     10 00 90 5D |  if_ne	jmp	#LR__0650
07f60     23 12 06 F6 | 	mov	arg01, #35
07f64     0C E1 BF FD | 	call	#_compile_error
07f68     23 FA 05 F6 | 	mov	result1, #35
07f6c     58 01 90 FD | 	jmp	#LR__0654
07f70                 | LR__0650
07f70     01 20 66 F6 | 	neg	local02, #1
07f74                 | ' j=-1
07f74                 | ' for i=0 to varnum-1
07f74     00 22 06 F6 | 	mov	local03, #0
07f78     54 00 00 FF 
07f7c     DC E4 05 F1 | 	add	objptr, ##43228
07f80     F2 24 02 FB | 	rdlong	local04, objptr
07f84     54 00 00 FF 
07f88     DC E4 85 F1 | 	sub	objptr, ##43228
07f8c                 | LR__0651
07f8c     12 23 12 F2 | 	cmp	local03, local04 wc
07f90     38 00 90 3D |  if_ae	jmp	#LR__0652
07f94                 | '   if variables(i).name=varname$ then j=i : exit
07f94     11 15 02 F6 | 	mov	arg02, local03
07f98     04 14 66 F0 | 	shl	arg02, #4
07f9c     34 00 00 FF 
07fa0     DC E4 05 F1 | 	add	objptr, ##26844
07fa4     F2 14 02 F1 | 	add	arg02, objptr
07fa8     0A 13 02 FB | 	rdlong	arg01, arg02
07fac     0F 15 02 F6 | 	mov	arg02, local01
07fb0     34 00 00 FF 
07fb4     DC E4 85 F1 | 	sub	objptr, ##26844
07fb8     E4 0D B1 FD | 	call	#__system___string_cmp
07fbc     00 FA 0D F2 | 	cmp	result1, #0 wz
07fc0     11 21 02 A6 |  if_e	mov	local02, local03
07fc4     01 22 06 51 |  if_ne	add	local03, #1
07fc8     C0 FF 9F 5D |  if_ne	jmp	#LR__0651
07fcc                 | LR__0652
07fcc                 | ' if j=-1 then compile_error(35) : return 35
07fcc     FF FF 7F FF 
07fd0     FF 21 0E F2 | 	cmp	local02, ##-1 wz
07fd4     10 00 90 5D |  if_ne	jmp	#LR__0653
07fd8     23 12 06 F6 | 	mov	arg01, #35
07fdc     94 E0 BF FD | 	call	#_compile_error
07fe0     23 FA 05 F6 | 	mov	result1, #35
07fe4     E0 00 90 FD | 	jmp	#LR__0654
07fe8                 | LR__0653
07fe8     69 00 00 FF 
07fec     50 E5 05 F1 | 	add	objptr, ##54096
07ff0     F2 24 02 FB | 	rdlong	local04, objptr
07ff4     12 23 02 F6 | 	mov	local03, local04
07ff8     01 22 66 F0 | 	shl	local03, #1
07ffc     12 23 02 F1 | 	add	local03, local04
08000     02 22 66 F0 | 	shl	local03, #2
08004     03 00 00 FF 
08008     00 E4 85 F1 | 	sub	objptr, ##1536
0800c     F2 22 02 F1 | 	add	local03, objptr
08010     08 22 06 F1 | 	add	local03, #8
08014     11 39 68 FC | 	wrlong	#28, local03
08018     03 00 00 FF 
0801c     00 E4 05 F1 | 	add	objptr, ##1536
08020     F2 24 02 FB | 	rdlong	local04, objptr
08024     12 23 02 F6 | 	mov	local03, local04
08028     01 22 66 F0 | 	shl	local03, #1
0802c     12 23 02 F1 | 	add	local03, local04
08030     02 22 66 F0 | 	shl	local03, #2
08034     03 00 00 FF 
08038     00 E4 85 F1 | 	sub	objptr, ##1536
0803c     F2 22 02 F1 | 	add	local03, objptr
08040     11 21 62 FC | 	wrlong	local02, local03
08044     03 00 00 FF 
08048     00 E4 05 F1 | 	add	objptr, ##1536
0804c     F2 24 02 FB | 	rdlong	local04, objptr
08050     01 24 06 F1 | 	add	local04, #1
08054     F2 24 62 FC | 	wrlong	local04, objptr
08058     12 23 02 F6 | 	mov	local03, local04
0805c     01 22 66 F0 | 	shl	local03, #1
08060     12 23 02 F1 | 	add	local03, local04
08064     02 22 66 F0 | 	shl	local03, #2
08068     03 00 00 FF 
0806c     00 E4 85 F1 | 	sub	objptr, ##1536
08070     F2 22 02 F1 | 	add	local03, objptr
08074     08 22 06 F1 | 	add	local03, #8
08078     11 97 68 FC | 	wrlong	#75, local03
0807c     03 00 00 FF 
08080     00 E4 05 F1 | 	add	objptr, ##1536
08084     F2 24 02 FB | 	rdlong	local04, objptr
08088     12 23 02 F6 | 	mov	local03, local04
0808c     01 22 66 F0 | 	shl	local03, #1
08090     12 23 02 F1 | 	add	local03, local04
08094     02 22 66 F0 | 	shl	local03, #2
08098     03 00 00 FF 
0809c     00 E4 85 F1 | 	sub	objptr, ##1536
080a0     F2 22 02 F1 | 	add	local03, objptr
080a4     11 01 68 FC | 	wrlong	#0, local03
080a8     03 00 00 FF 
080ac     00 E4 05 F1 | 	add	objptr, ##1536
080b0     F2 24 02 FB | 	rdlong	local04, objptr
080b4     01 24 06 F1 | 	add	local04, #1
080b8     F2 24 62 FC | 	wrlong	local04, objptr
080bc     69 00 00 FF 
080c0     50 E5 85 F1 | 	sub	objptr, ##54096
080c4                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
080c4                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
080c4                 | ' return 0
080c4     00 FA 05 F6 | 	mov	result1, #0
080c8                 | LR__0654
080c8     A7 F0 03 F6 | 	mov	ptra, fp
080cc     B2 00 A0 FD | 	call	#popregs_
080d0                 | _compile_next_ret
080d0     2D 00 64 FD | 	ret
080d4                 | 
080d4                 | ' 
080d4                 | ' 
080d4                 | ' ' next: we  have to find the variable in the table, compile pushvar, then next
080d4                 | ' ' do_for: push its own pointer, varnum, step, end on the for stack. var init is already compiled before
080d4                 | ' ' do_next: find the entry with the varnum. Add step to varnum. Compare to the end. If step>0, check >, else check <. If not end, goto forptr (how?) 
080d4                 | ' 
080d4                 | ' 
080d4                 | ' function compile_goto( ) as ulong
080d4                 | _compile_goto
080d4     03 4A 05 F6 | 	mov	COUNT_, #3
080d8     A8 00 A0 FD | 	call	#pushregs_
080dc     28 F0 07 F1 | 	add	ptra, #40
080e0                 | ' 
080e0                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 
080e0     56 00 00 FF 
080e4     18 E5 05 F1 | 	add	objptr, ##44312
080e8     F2 16 02 FB | 	rdlong	arg03, objptr
080ec     03 16 66 F0 | 	shl	arg03, #3
080f0     02 00 00 FF 
080f4     38 E4 85 F1 | 	sub	objptr, ##1080
080f8     F2 16 02 F1 | 	add	arg03, objptr
080fc     04 16 06 F1 | 	add	arg03, #4
08100     0B 17 02 FB | 	rdlong	arg03, arg03
08104     01 00 00 FF 
08108     00 16 0E F2 | 	cmp	arg03, ##512 wz
0810c     54 00 00 FF 
08110     E0 E4 85 F1 | 	sub	objptr, ##43232
08114     CC 02 90 5D |  if_ne	jmp	#LR__0665
08118     56 00 00 FF 
0811c     18 E5 05 F1 | 	add	objptr, ##44312
08120     F2 16 02 FB | 	rdlong	arg03, objptr
08124     01 16 06 F1 | 	add	arg03, #1
08128     03 16 66 F0 | 	shl	arg03, #3
0812c     02 00 00 FF 
08130     38 E4 85 F1 | 	sub	objptr, ##1080
08134     F2 16 02 F1 | 	add	arg03, objptr
08138     04 16 06 F1 | 	add	arg03, #4
0813c     0B 17 02 FB | 	rdlong	arg03, arg03
08140     FE 17 0E F2 | 	cmp	arg03, #510 wz
08144     54 00 00 FF 
08148     E0 E4 85 F1 | 	sub	objptr, ##43232
0814c     94 02 90 5D |  if_ne	jmp	#LR__0665
08150     56 00 00 FF 
08154     18 E5 05 F1 | 	add	objptr, ##44312
08158     F2 16 02 FB | 	rdlong	arg03, objptr
0815c     03 16 66 F0 | 	shl	arg03, #3
08160     02 00 00 FF 
08164     38 E4 85 F1 | 	sub	objptr, ##1080
08168     F2 16 02 F1 | 	add	arg03, objptr
0816c     0B 13 02 FB | 	rdlong	arg01, arg03
08170     00 14 06 F6 | 	mov	arg02, #0
08174     54 00 00 FF 
08178     E0 E4 85 F1 | 	sub	objptr, ##43232
0817c     5C 3D B1 FD | 	call	#__system____builtin_atoi
08180     04 4E 05 F1 | 	add	fp, #4
08184     A7 FA 61 FC | 	wrlong	result1, fp
08188     69 00 00 FF 
0818c     50 E5 05 F1 | 	add	objptr, ##54096
08190     F2 1E 02 FB | 	rdlong	local01, objptr
08194     0F 21 02 F6 | 	mov	local02, local01
08198     01 20 66 F0 | 	shl	local02, #1
0819c     0F 21 02 F1 | 	add	local02, local01
081a0     02 20 66 F0 | 	shl	local02, #2
081a4     03 00 00 FF 
081a8     00 E4 85 F1 | 	sub	objptr, ##1536
081ac     F2 20 02 F1 | 	add	local02, objptr
081b0     08 20 06 F1 | 	add	local02, #8
081b4     10 9D 68 FC | 	wrlong	#78, local02
081b8     03 00 00 FF 
081bc     08 E4 05 F1 | 	add	objptr, ##1544
081c0     F2 22 02 FB | 	rdlong	local03, objptr
081c4     69 00 00 FF 
081c8     58 E5 85 F1 | 	sub	objptr, ##54104
081cc     04 4E 05 F1 | 	add	fp, #4
081d0     A7 22 62 FC | 	wrlong	local03, fp
081d4     08 4E 85 F1 | 	sub	fp, #8
081d8                 | ' 
081d8                 | '   gotoline=val%(lparts(ct).part$) 
081d8                 | '   compiledline(lineptr).result_type=token_fast_goto
081d8                 | ' ' now find a pointer to goto
081d8                 | '   gotoptr=programstart
081d8                 | '   do
081d8                 | LR__0660
081d8     10 4E 05 F1 | 	add	fp, #16
081dc     A7 12 02 F6 | 	mov	arg01, fp
081e0     08 4E 85 F1 | 	sub	fp, #8
081e4     A7 14 02 FB | 	rdlong	arg02, fp
081e8     08 4E 85 F1 | 	sub	fp, #8
081ec     18 16 06 F6 | 	mov	arg03, #24
081f0     0B 00 00 FF 
081f4     C0 E4 05 F1 | 	add	objptr, ##5824
081f8     8C 00 B1 FD | 	call	#_psram_spin2_read1
081fc     0B 00 00 FF 
08200     C0 E4 85 F1 | 	sub	objptr, ##5824
08204                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
08204                 | '     if gotoheader(0)<>$FFFFFFFF then
08204     10 4E 05 F1 | 	add	fp, #16
08208     A7 22 02 FB | 	rdlong	local03, fp
0820c     10 4E 85 F1 | 	sub	fp, #16
08210     FF FF 7F FF 
08214     FF 23 0E F2 | 	cmp	local03, ##-1 wz
08218     24 00 90 AD |  if_e	jmp	#LR__0661
0821c     08 4E 05 F1 | 	add	fp, #8
08220     A7 22 02 FB | 	rdlong	local03, fp
08224     04 4E 05 F1 | 	add	fp, #4
08228     A7 22 62 FC | 	wrlong	local03, fp
0822c     18 4E 05 F1 | 	add	fp, #24
08230     A7 22 02 FB | 	rdlong	local03, fp
08234     1C 4E 85 F1 | 	sub	fp, #28
08238     A7 22 62 FC | 	wrlong	local03, fp
0823c     08 4E 85 F1 | 	sub	fp, #8
08240                 | LR__0661
08240     24 4E 05 F1 | 	add	fp, #36
08244     A7 22 02 FB | 	rdlong	local03, fp
08248     24 4E 85 F1 | 	sub	fp, #36
0824c     FF FF 3F FF 
08250     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
08254     10 4E 05 51 |  if_ne	add	fp, #16
08258     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0825c     10 4E 85 51 |  if_ne	sub	fp, #16
08260     FF FF 7F 5F 
08264     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
08268     1C 00 90 AD |  if_e	jmp	#LR__0662
0826c     10 4E 05 F1 | 	add	fp, #16
08270     A7 22 02 FB | 	rdlong	local03, fp
08274     0C 4E 85 F1 | 	sub	fp, #12
08278     A7 20 02 FB | 	rdlong	local02, fp
0827c     04 4E 85 F1 | 	sub	fp, #4
08280     10 23 0A F2 | 	cmp	local03, local02 wz
08284     50 FF 9F 5D |  if_ne	jmp	#LR__0660
08288                 | LR__0662
08288                 | '   if gotoheader(0)=gotoline then
08288     10 4E 05 F1 | 	add	fp, #16
0828c     A7 22 02 FB | 	rdlong	local03, fp
08290     0C 4E 85 F1 | 	sub	fp, #12
08294     A7 1E 02 FB | 	rdlong	local01, fp
08298     04 4E 85 F1 | 	sub	fp, #4
0829c     0F 23 0A F2 | 	cmp	local03, local01 wz
082a0     7C 00 90 5D |  if_ne	jmp	#LR__0663
082a4     69 00 00 FF 
082a8     50 E5 05 F1 | 	add	objptr, ##54096
082ac     F2 1E 02 FB | 	rdlong	local01, objptr
082b0     0F 21 02 F6 | 	mov	local02, local01
082b4     01 20 66 F0 | 	shl	local02, #1
082b8     0F 21 02 F1 | 	add	local02, local01
082bc     02 20 66 F0 | 	shl	local02, #2
082c0     03 00 00 FF 
082c4     00 E4 85 F1 | 	sub	objptr, ##1536
082c8     F2 20 02 F1 | 	add	local02, objptr
082cc     0C 4E 05 F1 | 	add	fp, #12
082d0     A7 22 02 FB | 	rdlong	local03, fp
082d4     10 23 62 FC | 	wrlong	local03, local02
082d8     03 00 00 FF 
082dc     00 E4 05 F1 | 	add	objptr, ##1536
082e0     F2 1E 02 FB | 	rdlong	local01, objptr
082e4     0F 21 02 F6 | 	mov	local02, local01
082e8     01 20 66 F0 | 	shl	local02, #1
082ec     0F 21 02 F1 | 	add	local02, local01
082f0     02 20 66 F0 | 	shl	local02, #2
082f4     03 00 00 FF 
082f8     00 E4 85 F1 | 	sub	objptr, ##1536
082fc     F2 20 02 F1 | 	add	local02, objptr
08300     08 4E 85 F1 | 	sub	fp, #8
08304     A7 22 02 FB | 	rdlong	local03, fp
08308     04 4E 85 F1 | 	sub	fp, #4
0830c     04 20 06 F1 | 	add	local02, #4
08310     10 23 62 FC | 	wrlong	local03, local02
08314     66 00 00 FF 
08318     50 E5 85 F1 | 	sub	objptr, ##52560
0831c     A4 00 90 FD | 	jmp	#LR__0664
08320                 | LR__0663
08320     69 00 00 FF 
08324     50 E5 05 F1 | 	add	objptr, ##54096
08328     F2 1E 02 FB | 	rdlong	local01, objptr
0832c     0F 21 02 F6 | 	mov	local02, local01
08330     01 20 66 F0 | 	shl	local02, #1
08334     0F 21 02 F1 | 	add	local02, local01
08338     02 20 66 F0 | 	shl	local02, #2
0833c     03 00 00 FF 
08340     00 E4 85 F1 | 	sub	objptr, ##1536
08344     F2 20 02 F1 | 	add	local02, objptr
08348     00 00 C0 FF 
0834c     10 01 68 FC | 	wrlong	##-2147483648, local02
08350     03 00 00 FF 
08354     00 E4 05 F1 | 	add	objptr, ##1536
08358     F2 1E 02 FB | 	rdlong	local01, objptr
0835c     0F 21 02 F6 | 	mov	local02, local01
08360     01 20 66 F0 | 	shl	local02, #1
08364     0F 21 02 F1 | 	add	local02, local01
08368     02 20 66 F0 | 	shl	local02, #2
0836c     03 00 00 FF 
08370     00 E4 85 F1 | 	sub	objptr, ##1536
08374     F2 20 02 F1 | 	add	local02, objptr
08378     04 4E 05 F1 | 	add	fp, #4
0837c     A7 22 02 FB | 	rdlong	local03, fp
08380     04 4E 85 F1 | 	sub	fp, #4
08384     04 20 06 F1 | 	add	local02, #4
08388     10 23 62 FC | 	wrlong	local03, local02
0838c     03 00 00 FF 
08390     00 E4 05 F1 | 	add	objptr, ##1536
08394     F2 1E 02 FB | 	rdlong	local01, objptr
08398     0F 21 02 F6 | 	mov	local02, local01
0839c     01 20 66 F0 | 	shl	local02, #1
083a0     0F 21 02 F1 | 	add	local02, local01
083a4     02 20 66 F0 | 	shl	local02, #2
083a8     03 00 00 FF 
083ac     00 E4 85 F1 | 	sub	objptr, ##1536
083b0     F2 20 02 F1 | 	add	local02, objptr
083b4     08 20 06 F1 | 	add	local02, #8
083b8     10 A7 68 FC | 	wrlong	#83, local02
083bc     66 00 00 FF 
083c0     50 E5 85 F1 | 	sub	objptr, ##52560
083c4                 | LR__0664
083c4     69 00 00 FF 
083c8     50 E5 05 F1 | 	add	objptr, ##54096
083cc     F2 22 02 FB | 	rdlong	local03, objptr
083d0     01 22 06 F1 | 	add	local03, #1
083d4     F2 22 62 FC | 	wrlong	local03, objptr
083d8     69 00 00 FF 
083dc     50 E5 85 F1 | 	sub	objptr, ##54096
083e0     40 00 90 FD | 	jmp	#LR__0666
083e4                 | LR__0665
083e4                 | '    print "We have a slow goto, todo  "
083e4     00 12 06 F6 | 	mov	arg01, #0
083e8     90 62 B1 FD | 	call	#__system___getiolock_0423
083ec     FD 12 02 F6 | 	mov	arg01, result1
083f0     84 09 B1 FD | 	call	#__system___lockmem
083f4     43 01 00 FF 
083f8     5E 15 06 F6 | 	mov	arg02, ##@LR__4556
083fc     00 12 06 F6 | 	mov	arg01, #0
08400     00 16 06 F6 | 	mov	arg03, #0
08404     64 16 B1 FD | 	call	#__system___basic_print_string
08408     00 12 06 F6 | 	mov	arg01, #0
0840c     0A 14 06 F6 | 	mov	arg02, #10
08410     00 16 06 F6 | 	mov	arg03, #0
08414     FC 15 B1 FD | 	call	#__system___basic_print_char
08418     00 12 06 F6 | 	mov	arg01, #0
0841c     5C 62 B1 FD | 	call	#__system___getiolock_0423
08420     FD 00 68 FC | 	wrlong	#0, result1
08424                 | LR__0666
08424                 | ' ' if not, there is a slow goto. Call converttoint to get an int value from expression, then do_slow_goto
08424                 | ' ' Do_slow_goto searches a line pointer list to find the linenum and pointer, then do the goto  
08424                 | ' return 0
08424     00 FA 05 F6 | 	mov	result1, #0
08428     A7 F0 03 F6 | 	mov	ptra, fp
0842c     B2 00 A0 FD | 	call	#popregs_
08430                 | _compile_goto_ret
08430     2D 00 64 FD | 	ret
08434                 | 
08434                 | ' 
08434                 | ' 
08434                 | ' 
08434                 | ' 
08434                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08434                 | ' '------------------------------ End of the precompiler  --------------------------------------------------------------------------------
08434                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08434                 | ' 
08434                 | ' 
08434                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08434                 | ' '---------------------------- Compile time expression decoder/evaluator ----------------------------------------------------------------
08434                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08434                 | ' 
08434                 | ' 
08434                 | ' function expr() as integer 
08434                 | _expr
08434     07 4A 05 F6 | 	mov	COUNT_, #7
08438     A8 00 A0 FD | 	call	#pushregs_
0843c                 | _expr_enter
0843c     56 00 00 FF 
08440     18 E5 05 F1 | 	add	objptr, ##44312
08444     F2 24 02 FB | 	rdlong	local04, objptr
08448     03 24 66 F0 | 	shl	local04, #3
0844c     02 00 00 FF 
08450     38 E4 85 F1 | 	sub	objptr, ##1080
08454     F2 24 02 F1 | 	add	local04, objptr
08458     04 24 06 F1 | 	add	local04, #4
0845c     12 27 02 FB | 	rdlong	local05, local04
08460                 | ' 
08460                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
08460     FE 27 0E F2 | 	cmp	local05, #510 wz
08464     54 00 00 FF 
08468     E0 E4 85 F1 | 	sub	objptr, ##43232
0846c     C4 00 90 5D |  if_ne	jmp	#LR__0670
08470     1D 1E 06 F6 | 	mov	local01, #29
08474     FF 22 06 F6 | 	mov	local03, #255
08478     0F 29 02 F6 | 	mov	local06, local01
0847c     10 2B 02 F6 | 	mov	local07, local02
08480     11 1F 02 F6 | 	mov	local01, local03
08484     69 00 00 FF 
08488     50 E5 05 F1 | 	add	objptr, ##54096
0848c     F2 26 02 FB | 	rdlong	local05, objptr
08490     13 25 02 F6 | 	mov	local04, local05
08494     01 24 66 F0 | 	shl	local04, #1
08498     13 25 02 F1 | 	add	local04, local05
0849c     02 24 66 F0 | 	shl	local04, #2
084a0     03 00 00 FF 
084a4     00 E4 85 F1 | 	sub	objptr, ##1536
084a8     F2 24 02 F1 | 	add	local04, objptr
084ac     12 29 62 FC | 	wrlong	local06, local04
084b0     03 00 00 FF 
084b4     00 E4 05 F1 | 	add	objptr, ##1536
084b8     F2 28 02 FB | 	rdlong	local06, objptr
084bc     14 27 02 F6 | 	mov	local05, local06
084c0     01 26 66 F0 | 	shl	local05, #1
084c4     14 27 02 F1 | 	add	local05, local06
084c8     02 26 66 F0 | 	shl	local05, #2
084cc     03 00 00 FF 
084d0     00 E4 85 F1 | 	sub	objptr, ##1536
084d4     F2 26 02 F1 | 	add	local05, objptr
084d8     04 26 06 F1 | 	add	local05, #4
084dc     13 2B 62 FC | 	wrlong	local07, local05
084e0     03 00 00 FF 
084e4     00 E4 05 F1 | 	add	objptr, ##1536
084e8     F2 2A 02 FB | 	rdlong	local07, objptr
084ec     15 29 02 F6 | 	mov	local06, local07
084f0     01 28 66 F0 | 	shl	local06, #1
084f4     15 29 02 F1 | 	add	local06, local07
084f8     02 28 66 F0 | 	shl	local06, #2
084fc     03 00 00 FF 
08500     00 E4 85 F1 | 	sub	objptr, ##1536
08504     F2 28 02 F1 | 	add	local06, objptr
08508     08 28 06 F1 | 	add	local06, #8
0850c     14 1F 62 FC | 	wrlong	local01, local06
08510     03 00 00 FF 
08514     00 E4 05 F1 | 	add	objptr, ##1536
08518     F2 28 02 FB | 	rdlong	local06, objptr
0851c     01 28 06 F1 | 	add	local06, #1
08520     F2 28 62 FC | 	wrlong	local06, objptr
08524     69 00 00 FF 
08528     50 E5 85 F1 | 	sub	objptr, ##54096
0852c     1D FA 05 F6 | 	mov	result1, #29
08530     54 01 90 FD | 	jmp	#LR__0673
08534                 | LR__0670
08534     00 1E 06 F6 | 	mov	local01, #0
08538     58 01 B0 FD | 	call	#_addsub
0853c     56 00 00 FF 
08540     18 E5 05 F1 | 	add	objptr, ##44312
08544     F2 24 02 FB | 	rdlong	local04, objptr
08548     03 24 66 F0 | 	shl	local04, #3
0854c     02 00 00 FF 
08550     38 E4 85 F1 | 	sub	objptr, ##1080
08554     F2 24 02 F1 | 	add	local04, objptr
08558     04 24 06 F1 | 	add	local04, #4
0855c     12 27 02 FB | 	rdlong	local05, local04
08560                 | ' t3.result.uresult=0
08560                 | ' rt=addsub()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
08560                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
08560                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
08560     54 00 00 FF 
08564     E0 E4 85 F1 | 	sub	objptr, ##43232
08568                 | LR__0671
08568     1B 26 0E F2 | 	cmp	local05, #27 wz
0856c     0F 26 0E 52 |  if_ne	cmp	local05, #15 wz
08570     10 26 0E 52 |  if_ne	cmp	local05, #16 wz
08574     27 26 0E 52 |  if_ne	cmp	local05, #39 wz
08578     26 26 0E 52 |  if_ne	cmp	local05, #38 wz
0857c     2A 26 0E 52 |  if_ne	cmp	local05, #42 wz
08580     00 01 90 5D |  if_ne	jmp	#LR__0672
08584     56 00 00 FF 
08588     18 E5 05 F1 | 	add	objptr, ##44312
0858c     F2 28 02 FB | 	rdlong	local06, objptr
08590     01 28 06 F1 | 	add	local06, #1
08594     F2 28 62 FC | 	wrlong	local06, objptr
08598     56 00 00 FF 
0859c     18 E5 85 F1 | 	sub	objptr, ##44312
085a0     F0 00 B0 FD | 	call	#_addsub
085a4     13 23 02 F6 | 	mov	local03, local05
085a8     0F 29 02 F6 | 	mov	local06, local01
085ac     10 2B 02 F6 | 	mov	local07, local02
085b0     11 27 02 F6 | 	mov	local05, local03
085b4     69 00 00 FF 
085b8     50 E5 05 F1 | 	add	objptr, ##54096
085bc     F2 24 02 FB | 	rdlong	local04, objptr
085c0     12 FB 01 F6 | 	mov	result1, local04
085c4     01 FA 65 F0 | 	shl	result1, #1
085c8     12 FB 01 F1 | 	add	result1, local04
085cc     02 FA 65 F0 | 	shl	result1, #2
085d0     03 00 00 FF 
085d4     00 E4 85 F1 | 	sub	objptr, ##1536
085d8     F2 FA 01 F1 | 	add	result1, objptr
085dc     FD 28 62 FC | 	wrlong	local06, result1
085e0     03 00 00 FF 
085e4     00 E4 05 F1 | 	add	objptr, ##1536
085e8     F2 28 02 FB | 	rdlong	local06, objptr
085ec     14 25 02 F6 | 	mov	local04, local06
085f0     01 24 66 F0 | 	shl	local04, #1
085f4     14 25 02 F1 | 	add	local04, local06
085f8     02 24 66 F0 | 	shl	local04, #2
085fc     03 00 00 FF 
08600     00 E4 85 F1 | 	sub	objptr, ##1536
08604     F2 24 02 F1 | 	add	local04, objptr
08608     04 24 06 F1 | 	add	local04, #4
0860c     12 2B 62 FC | 	wrlong	local07, local04
08610     03 00 00 FF 
08614     00 E4 05 F1 | 	add	objptr, ##1536
08618     F2 2A 02 FB | 	rdlong	local07, objptr
0861c     15 29 02 F6 | 	mov	local06, local07
08620     01 28 66 F0 | 	shl	local06, #1
08624     15 29 02 F1 | 	add	local06, local07
08628     02 28 66 F0 | 	shl	local06, #2
0862c     03 00 00 FF 
08630     00 E4 85 F1 | 	sub	objptr, ##1536
08634     F2 28 02 F1 | 	add	local06, objptr
08638     08 28 06 F1 | 	add	local06, #8
0863c     14 27 62 FC | 	wrlong	local05, local06
08640     03 00 00 FF 
08644     00 E4 05 F1 | 	add	objptr, ##1536
08648     F2 28 02 FB | 	rdlong	local06, objptr
0864c     01 28 06 F1 | 	add	local06, #1
08650     F2 28 62 FC | 	wrlong	local06, objptr
08654     13 00 00 FF 
08658     38 E4 85 F1 | 	sub	objptr, ##9784
0865c     F2 24 02 FB | 	rdlong	local04, objptr
08660     03 24 66 F0 | 	shl	local04, #3
08664     02 00 00 FF 
08668     38 E4 85 F1 | 	sub	objptr, ##1080
0866c     F2 24 02 F1 | 	add	local04, objptr
08670     04 24 06 F1 | 	add	local04, #4
08674     12 27 02 FB | 	rdlong	local05, local04
08678     54 00 00 FF 
0867c     E0 E4 85 F1 | 	sub	objptr, ##43232
08680     E4 FE 9F FD | 	jmp	#LR__0671
08684                 | LR__0672
08684                 | ' return 0  
08684     00 FA 05 F6 | 	mov	result1, #0
08688                 | LR__0673
08688     A7 F0 03 F6 | 	mov	ptra, fp
0868c     B2 00 A0 FD | 	call	#popregs_
08690                 | _expr_ret
08690     2D 00 64 FD | 	ret
08694                 | 
08694                 | ' 
08694                 | ' 
08694                 | ' '' todo: use propre ops. At getvar and getconst level we know the rt. If both are ints, do int op. If one are float, compile converttofloat, do float op. If both strings, call string op. If string ant int combined, compile err
08694                 | ' 
08694                 | ' function addsub() as integer 
08694                 | _addsub
08694     07 4A 05 F6 | 	mov	COUNT_, #7
08698     A8 00 A0 FD | 	call	#pushregs_
0869c                 | _addsub_enter
0869c     00 1E 06 F6 | 	mov	local01, #0
086a0     50 01 B0 FD | 	call	#_muldiv
086a4     56 00 00 FF 
086a8     18 E5 05 F1 | 	add	objptr, ##44312
086ac     F2 24 02 FB | 	rdlong	local04, objptr
086b0     03 24 66 F0 | 	shl	local04, #3
086b4     02 00 00 FF 
086b8     38 E4 85 F1 | 	sub	objptr, ##1080
086bc     F2 24 02 F1 | 	add	local04, objptr
086c0     04 24 06 F1 | 	add	local04, #4
086c4     12 27 02 FB | 	rdlong	local05, local04
086c8                 | ' t3.result.uresult=0
086c8                 | ' muldiv()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
086c8                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
086c8                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
086c8     54 00 00 FF 
086cc     E0 E4 85 F1 | 	sub	objptr, ##43232
086d0                 | LR__0680
086d0     01 26 0E F2 | 	cmp	local05, #1 wz
086d4     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
086d8     07 26 0E 52 |  if_ne	cmp	local05, #7 wz
086dc     03 26 0E 52 |  if_ne	cmp	local05, #3 wz
086e0     00 01 90 5D |  if_ne	jmp	#LR__0681
086e4     56 00 00 FF 
086e8     18 E5 05 F1 | 	add	objptr, ##44312
086ec     F2 24 02 FB | 	rdlong	local04, objptr
086f0     01 24 06 F1 | 	add	local04, #1
086f4     F2 24 62 FC | 	wrlong	local04, objptr
086f8     56 00 00 FF 
086fc     18 E5 85 F1 | 	sub	objptr, ##44312
08700     F0 00 B0 FD | 	call	#_muldiv
08704     13 23 02 F6 | 	mov	local03, local05
08708     0F 29 02 F6 | 	mov	local06, local01
0870c     10 2B 02 F6 | 	mov	local07, local02
08710     11 27 02 F6 | 	mov	local05, local03
08714     69 00 00 FF 
08718     50 E5 05 F1 | 	add	objptr, ##54096
0871c     F2 24 02 FB | 	rdlong	local04, objptr
08720     12 FB 01 F6 | 	mov	result1, local04
08724     01 FA 65 F0 | 	shl	result1, #1
08728     12 FB 01 F1 | 	add	result1, local04
0872c     02 FA 65 F0 | 	shl	result1, #2
08730     03 00 00 FF 
08734     00 E4 85 F1 | 	sub	objptr, ##1536
08738     F2 FA 01 F1 | 	add	result1, objptr
0873c     FD 28 62 FC | 	wrlong	local06, result1
08740     03 00 00 FF 
08744     00 E4 05 F1 | 	add	objptr, ##1536
08748     F2 28 02 FB | 	rdlong	local06, objptr
0874c     14 25 02 F6 | 	mov	local04, local06
08750     01 24 66 F0 | 	shl	local04, #1
08754     14 25 02 F1 | 	add	local04, local06
08758     02 24 66 F0 | 	shl	local04, #2
0875c     03 00 00 FF 
08760     00 E4 85 F1 | 	sub	objptr, ##1536
08764     F2 24 02 F1 | 	add	local04, objptr
08768     04 24 06 F1 | 	add	local04, #4
0876c     12 2B 62 FC | 	wrlong	local07, local04
08770     03 00 00 FF 
08774     00 E4 05 F1 | 	add	objptr, ##1536
08778     F2 2A 02 FB | 	rdlong	local07, objptr
0877c     15 29 02 F6 | 	mov	local06, local07
08780     01 28 66 F0 | 	shl	local06, #1
08784     15 29 02 F1 | 	add	local06, local07
08788     02 28 66 F0 | 	shl	local06, #2
0878c     03 00 00 FF 
08790     00 E4 85 F1 | 	sub	objptr, ##1536
08794     F2 28 02 F1 | 	add	local06, objptr
08798     08 28 06 F1 | 	add	local06, #8
0879c     14 27 62 FC | 	wrlong	local05, local06
087a0     03 00 00 FF 
087a4     00 E4 05 F1 | 	add	objptr, ##1536
087a8     F2 28 02 FB | 	rdlong	local06, objptr
087ac     01 28 06 F1 | 	add	local06, #1
087b0     F2 28 62 FC | 	wrlong	local06, objptr
087b4     13 00 00 FF 
087b8     38 E4 85 F1 | 	sub	objptr, ##9784
087bc     F2 24 02 FB | 	rdlong	local04, objptr
087c0     03 24 66 F0 | 	shl	local04, #3
087c4     02 00 00 FF 
087c8     38 E4 85 F1 | 	sub	objptr, ##1080
087cc     F2 24 02 F1 | 	add	local04, objptr
087d0     04 24 06 F1 | 	add	local04, #4
087d4     12 27 02 FB | 	rdlong	local05, local04
087d8     54 00 00 FF 
087dc     E0 E4 85 F1 | 	sub	objptr, ##43232
087e0     EC FE 9F FD | 	jmp	#LR__0680
087e4                 | LR__0681
087e4                 | '   return 0
087e4     00 FA 05 F6 | 	mov	result1, #0
087e8     A7 F0 03 F6 | 	mov	ptra, fp
087ec     B2 00 A0 FD | 	call	#popregs_
087f0                 | _addsub_ret
087f0     2D 00 64 FD | 	ret
087f4                 | 
087f4                 | ' 
087f4                 | ' sub muldiv()
087f4                 | _muldiv
087f4     08 4A 05 F6 | 	mov	COUNT_, #8
087f8     A8 00 A0 FD | 	call	#pushregs_
087fc                 | _muldiv_enter
087fc     00 1E 06 F6 | 	mov	local01, #0
08800     58 01 B0 FD | 	call	#_getvalue
08804     56 00 00 FF 
08808     18 E5 05 F1 | 	add	objptr, ##44312
0880c     F2 24 02 FB | 	rdlong	local04, objptr
08810     03 24 66 F0 | 	shl	local04, #3
08814     02 00 00 FF 
08818     38 E4 85 F1 | 	sub	objptr, ##1080
0881c     F2 24 02 F1 | 	add	local04, objptr
08820     04 24 06 F1 | 	add	local04, #4
08824     12 27 02 FB | 	rdlong	local05, local04
08828                 | ' t3.result.uresult=0
08828                 | ' getvalue()    
08828                 | ' op = lparts(ct).token
08828                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
08828     54 00 00 FF 
0882c     E0 E4 85 F1 | 	sub	objptr, ##43232
08830                 | LR__0690
08830     05 26 0E F2 | 	cmp	local05, #5 wz
08834     08 26 0E 52 |  if_ne	cmp	local05, #8 wz
08838     06 26 0E 52 |  if_ne	cmp	local05, #6 wz
0883c     09 26 0E 52 |  if_ne	cmp	local05, #9 wz
08840     0A 26 0E 52 |  if_ne	cmp	local05, #10 wz
08844     0B 26 0E 52 |  if_ne	cmp	local05, #11 wz
08848     0C 26 0E 52 |  if_ne	cmp	local05, #12 wz
0884c     00 01 90 5D |  if_ne	jmp	#LR__0691
08850     56 00 00 FF 
08854     18 E5 05 F1 | 	add	objptr, ##44312
08858     F2 24 02 FB | 	rdlong	local04, objptr
0885c     01 24 06 F1 | 	add	local04, #1
08860     F2 24 62 FC | 	wrlong	local04, objptr
08864     56 00 00 FF 
08868     18 E5 85 F1 | 	sub	objptr, ##44312
0886c     EC 00 B0 FD | 	call	#_getvalue
08870     13 23 02 F6 | 	mov	local03, local05
08874     0F 29 02 F6 | 	mov	local06, local01
08878     10 2B 02 F6 | 	mov	local07, local02
0887c     11 27 02 F6 | 	mov	local05, local03
08880     69 00 00 FF 
08884     50 E5 05 F1 | 	add	objptr, ##54096
08888     F2 24 02 FB | 	rdlong	local04, objptr
0888c     12 2D 02 F6 | 	mov	local08, local04
08890     01 2C 66 F0 | 	shl	local08, #1
08894     12 2D 02 F1 | 	add	local08, local04
08898     02 2C 66 F0 | 	shl	local08, #2
0889c     03 00 00 FF 
088a0     00 E4 85 F1 | 	sub	objptr, ##1536
088a4     F2 2C 02 F1 | 	add	local08, objptr
088a8     16 29 62 FC | 	wrlong	local06, local08
088ac     03 00 00 FF 
088b0     00 E4 05 F1 | 	add	objptr, ##1536
088b4     F2 2C 02 FB | 	rdlong	local08, objptr
088b8     16 29 02 F6 | 	mov	local06, local08
088bc     01 28 66 F0 | 	shl	local06, #1
088c0     16 29 02 F1 | 	add	local06, local08
088c4     02 28 66 F0 | 	shl	local06, #2
088c8     03 00 00 FF 
088cc     00 E4 85 F1 | 	sub	objptr, ##1536
088d0     F2 28 02 F1 | 	add	local06, objptr
088d4     04 28 06 F1 | 	add	local06, #4
088d8     14 2B 62 FC | 	wrlong	local07, local06
088dc     03 00 00 FF 
088e0     00 E4 05 F1 | 	add	objptr, ##1536
088e4     F2 2C 02 FB | 	rdlong	local08, objptr
088e8     16 2B 02 F6 | 	mov	local07, local08
088ec     01 2A 66 F0 | 	shl	local07, #1
088f0     16 2B 02 F1 | 	add	local07, local08
088f4     02 2A 66 F0 | 	shl	local07, #2
088f8     03 00 00 FF 
088fc     00 E4 85 F1 | 	sub	objptr, ##1536
08900     F2 2A 02 F1 | 	add	local07, objptr
08904     08 2A 06 F1 | 	add	local07, #8
08908     15 27 62 FC | 	wrlong	local05, local07
0890c     03 00 00 FF 
08910     00 E4 05 F1 | 	add	objptr, ##1536
08914     F2 28 02 FB | 	rdlong	local06, objptr
08918     01 28 06 F1 | 	add	local06, #1
0891c     F2 28 62 FC | 	wrlong	local06, objptr
08920     13 00 00 FF 
08924     38 E4 85 F1 | 	sub	objptr, ##9784
08928     F2 24 02 FB | 	rdlong	local04, objptr
0892c     03 24 66 F0 | 	shl	local04, #3
08930     02 00 00 FF 
08934     38 E4 85 F1 | 	sub	objptr, ##1080
08938     F2 24 02 F1 | 	add	local04, objptr
0893c     04 24 06 F1 | 	add	local04, #4
08940     12 27 02 FB | 	rdlong	local05, local04
08944     54 00 00 FF 
08948     E0 E4 85 F1 | 	sub	objptr, ##43232
0894c     E0 FE 9F FD | 	jmp	#LR__0690
08950                 | LR__0691
08950     A7 F0 03 F6 | 	mov	ptra, fp
08954     B2 00 A0 FD | 	call	#popregs_
08958                 | _muldiv_ret
08958     2D 00 64 FD | 	ret
0895c                 | 
0895c                 | ' 
0895c                 | ' sub getvalue() 
0895c                 | _getvalue
0895c     0B 4A 05 F6 | 	mov	COUNT_, #11
08960     A8 00 A0 FD | 	call	#pushregs_
08964                 | _getvalue_enter
08964     01 24 06 F6 | 	mov	local04, #1
08968     00 1E 06 F6 | 	mov	local01, #0
0896c     1D 22 06 F6 | 	mov	local03, #29
08970     56 00 00 FF 
08974     18 E5 05 F1 | 	add	objptr, ##44312
08978     F2 16 02 FB | 	rdlong	arg03, objptr
0897c     03 16 66 F0 | 	shl	arg03, #3
08980     02 00 00 FF 
08984     38 E4 85 F1 | 	sub	objptr, ##1080
08988     F2 16 02 F1 | 	add	arg03, objptr
0898c     04 16 06 F1 | 	add	arg03, #4
08990     0B 27 02 FB | 	rdlong	local05, arg03
08994                 | ' m=1
08994                 | ' t1.result.uresult=0: t1.result_type=result_uint
08994                 | ' op=lparts(ct).token
08994                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token
08994     02 26 0E F2 | 	cmp	local05, #2 wz
08998     54 00 00 FF 
0899c     E0 E4 85 F1 | 	sub	objptr, ##43232
089a0     38 00 90 5D |  if_ne	jmp	#LR__0700
089a4     01 24 66 F6 | 	neg	local04, #1
089a8     56 00 00 FF 
089ac     18 E5 05 F1 | 	add	objptr, ##44312
089b0     F2 26 02 FB | 	rdlong	local05, objptr
089b4     01 26 06 F1 | 	add	local05, #1
089b8     F2 26 62 FC | 	wrlong	local05, objptr
089bc     03 26 66 F0 | 	shl	local05, #3
089c0     02 00 00 FF 
089c4     38 E4 85 F1 | 	sub	objptr, ##1080
089c8     F2 26 02 F1 | 	add	local05, objptr
089cc     04 26 06 F1 | 	add	local05, #4
089d0     13 27 02 FB | 	rdlong	local05, local05
089d4     54 00 00 FF 
089d8     E0 E4 85 F1 | 	sub	objptr, ##43232
089dc                 | LR__0700
089dc                 | ' select case op
089dc     01 00 00 FF 
089e0     00 26 0E F2 | 	cmp	local05, ##512 wz
089e4     3C 00 90 AD |  if_e	jmp	#LR__0701
089e8     01 00 00 FF 
089ec     01 26 0E F2 | 	cmp	local05, ##513 wz
089f0     88 01 90 AD |  if_e	jmp	#LR__0704
089f4     01 00 00 FF 
089f8     02 26 0E F2 | 	cmp	local05, ##514 wz
089fc     84 02 90 AD |  if_e	jmp	#LR__0705
08a00     01 00 00 FF 
08a04     03 26 0E F2 | 	cmp	local05, ##515 wz
08a08     E8 03 90 AD |  if_e	jmp	#LR__0708
08a0c     01 00 00 FF 
08a10     04 26 0E F2 | 	cmp	local05, ##516 wz
08a14     E0 05 90 AD |  if_e	jmp	#LR__0713
08a18     15 26 0E F2 | 	cmp	local05, #21 wz
08a1c     00 06 90 AD |  if_e	jmp	#LR__0714
08a20     70 06 90 FD | 	jmp	#LR__0715
08a24                 | LR__0701
08a24                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
08a24     01 24 0E F2 | 	cmp	local04, #1 wz
08a28     3C 00 90 5D |  if_ne	jmp	#LR__0702
08a2c     56 00 00 FF 
08a30     18 E5 05 F1 | 	add	objptr, ##44312
08a34     F2 26 02 FB | 	rdlong	local05, objptr
08a38     03 26 66 F0 | 	shl	local05, #3
08a3c     02 00 00 FF 
08a40     38 E4 85 F1 | 	sub	objptr, ##1080
08a44     F2 26 02 F1 | 	add	local05, objptr
08a48     13 13 02 FB | 	rdlong	arg01, local05
08a4c     00 14 06 F6 | 	mov	arg02, #0
08a50     54 00 00 FF 
08a54     E0 E4 85 F1 | 	sub	objptr, ##43232
08a58     80 34 B1 FD | 	call	#__system____builtin_atoi
08a5c     FD 24 02 FD | 	qmul	local04, result1
08a60     18 1E 62 FD | 	getqx	local01
08a64     1C 22 06 F6 | 	mov	local03, #28
08a68                 | LR__0702
08a68                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
08a68     FF FF 7F FF 
08a6c     FF 25 0E F2 | 	cmp	local04, ##-1 wz
08a70     3C 00 90 5D |  if_ne	jmp	#LR__0703
08a74     56 00 00 FF 
08a78     18 E5 05 F1 | 	add	objptr, ##44312
08a7c     F2 26 02 FB | 	rdlong	local05, objptr
08a80     03 26 66 F0 | 	shl	local05, #3
08a84     02 00 00 FF 
08a88     38 E4 85 F1 | 	sub	objptr, ##1080
08a8c     F2 26 02 F1 | 	add	local05, objptr
08a90     13 13 02 FB | 	rdlong	arg01, local05
08a94     00 14 06 F6 | 	mov	arg02, #0
08a98     54 00 00 FF 
08a9c     E0 E4 85 F1 | 	sub	objptr, ##43232
08aa0     38 34 B1 FD | 	call	#__system____builtin_atoi
08aa4     FD 24 02 FD | 	qmul	local04, result1
08aa8     18 1E 62 FD | 	getqx	local01
08aac     1C 22 06 F6 | 	mov	local03, #28
08ab0                 | LR__0703
08ab0     0F 29 02 F6 | 	mov	local06, local01
08ab4     10 2B 02 F6 | 	mov	local07, local02
08ab8     11 27 02 F6 | 	mov	local05, local03
08abc     69 00 00 FF 
08ac0     50 E5 05 F1 | 	add	objptr, ##54096
08ac4     F2 1E 02 FB | 	rdlong	local01, objptr
08ac8     0F 25 02 F6 | 	mov	local04, local01
08acc     01 24 66 F0 | 	shl	local04, #1
08ad0     0F 25 02 F1 | 	add	local04, local01
08ad4     02 24 66 F0 | 	shl	local04, #2
08ad8     03 00 00 FF 
08adc     00 E4 85 F1 | 	sub	objptr, ##1536
08ae0     F2 24 02 F1 | 	add	local04, objptr
08ae4     12 29 62 FC | 	wrlong	local06, local04
08ae8     03 00 00 FF 
08aec     00 E4 05 F1 | 	add	objptr, ##1536
08af0     F2 28 02 FB | 	rdlong	local06, objptr
08af4     14 1F 02 F6 | 	mov	local01, local06
08af8     01 1E 66 F0 | 	shl	local01, #1
08afc     14 1F 02 F1 | 	add	local01, local06
08b00     02 1E 66 F0 | 	shl	local01, #2
08b04     03 00 00 FF 
08b08     00 E4 85 F1 | 	sub	objptr, ##1536
08b0c     F2 1E 02 F1 | 	add	local01, objptr
08b10     04 1E 06 F1 | 	add	local01, #4
08b14     0F 2B 62 FC | 	wrlong	local07, local01
08b18     03 00 00 FF 
08b1c     00 E4 05 F1 | 	add	objptr, ##1536
08b20     F2 2A 02 FB | 	rdlong	local07, objptr
08b24     15 29 02 F6 | 	mov	local06, local07
08b28     01 28 66 F0 | 	shl	local06, #1
08b2c     15 29 02 F1 | 	add	local06, local07
08b30     02 28 66 F0 | 	shl	local06, #2
08b34     03 00 00 FF 
08b38     00 E4 85 F1 | 	sub	objptr, ##1536
08b3c     F2 28 02 F1 | 	add	local06, objptr
08b40     08 28 06 F1 | 	add	local06, #8
08b44     14 27 62 FC | 	wrlong	local05, local06
08b48     03 00 00 FF 
08b4c     00 E4 05 F1 | 	add	objptr, ##1536
08b50     F2 28 02 FB | 	rdlong	local06, objptr
08b54     01 28 06 F1 | 	add	local06, #1
08b58     F2 28 62 FC | 	wrlong	local06, objptr
08b5c     13 00 00 FF 
08b60     38 E4 85 F1 | 	sub	objptr, ##9784
08b64     F2 28 02 FB | 	rdlong	local06, objptr
08b68     01 28 06 F1 | 	add	local06, #1
08b6c     F2 28 62 FC | 	wrlong	local06, objptr
08b70     56 00 00 FF 
08b74     18 E5 85 F1 | 	sub	objptr, ##44312
08b78     3C 05 90 FD | 	jmp	#LR__0716
08b7c                 | LR__0704
08b7c     56 00 00 FF 
08b80     18 E5 05 F1 | 	add	objptr, ##44312
08b84     F2 28 02 FB | 	rdlong	local06, objptr
08b88     03 28 66 F0 | 	shl	local06, #3
08b8c     02 00 00 FF 
08b90     38 E4 85 F1 | 	sub	objptr, ##1080
08b94     F2 28 02 F1 | 	add	local06, objptr
08b98     14 13 02 FB | 	rdlong	arg01, local06
08b9c     00 14 06 F6 | 	mov	arg02, #0
08ba0     54 00 00 FF 
08ba4     E0 E4 85 F1 | 	sub	objptr, ##43232
08ba8     30 33 B1 FD | 	call	#__system____builtin_atoi
08bac     FD 24 02 FD | 	qmul	local04, result1
08bb0     69 00 00 FF 
08bb4     50 E5 05 F1 | 	add	objptr, ##54096
08bb8     F2 28 02 FB | 	rdlong	local06, objptr
08bbc     14 2D 02 F6 | 	mov	local08, local06
08bc0     01 2C 66 F0 | 	shl	local08, #1
08bc4     14 2D 02 F1 | 	add	local08, local06
08bc8     02 2C 66 F0 | 	shl	local08, #2
08bcc     03 00 00 FF 
08bd0     00 E4 85 F1 | 	sub	objptr, ##1536
08bd4     F2 2C 02 F1 | 	add	local08, objptr
08bd8     03 00 00 FF 
08bdc     00 E4 05 F1 | 	add	objptr, ##1536
08be0     18 1E 62 FD | 	getqx	local01
08be4     1C 22 06 F6 | 	mov	local03, #28
08be8     0F 29 02 F6 | 	mov	local06, local01
08bec     10 2B 02 F6 | 	mov	local07, local02
08bf0     16 29 62 FC | 	wrlong	local06, local08
08bf4     11 2D 02 F6 | 	mov	local08, local03
08bf8     F2 28 02 FB | 	rdlong	local06, objptr
08bfc     14 27 02 F6 | 	mov	local05, local06
08c00     01 26 66 F0 | 	shl	local05, #1
08c04     14 27 02 F1 | 	add	local05, local06
08c08     02 26 66 F0 | 	shl	local05, #2
08c0c     03 00 00 FF 
08c10     00 E4 85 F1 | 	sub	objptr, ##1536
08c14     F2 26 02 F1 | 	add	local05, objptr
08c18     04 26 06 F1 | 	add	local05, #4
08c1c     13 2B 62 FC | 	wrlong	local07, local05
08c20     03 00 00 FF 
08c24     00 E4 05 F1 | 	add	objptr, ##1536
08c28     F2 2A 02 FB | 	rdlong	local07, objptr
08c2c     15 29 02 F6 | 	mov	local06, local07
08c30     01 28 66 F0 | 	shl	local06, #1
08c34     15 29 02 F1 | 	add	local06, local07
08c38     02 28 66 F0 | 	shl	local06, #2
08c3c     03 00 00 FF 
08c40     00 E4 85 F1 | 	sub	objptr, ##1536
08c44     F2 28 02 F1 | 	add	local06, objptr
08c48     08 28 06 F1 | 	add	local06, #8
08c4c     14 2D 62 FC | 	wrlong	local08, local06
08c50     03 00 00 FF 
08c54     00 E4 05 F1 | 	add	objptr, ##1536
08c58     F2 28 02 FB | 	rdlong	local06, objptr
08c5c     01 28 06 F1 | 	add	local06, #1
08c60     F2 28 62 FC | 	wrlong	local06, objptr
08c64     13 00 00 FF 
08c68     38 E4 85 F1 | 	sub	objptr, ##9784
08c6c     F2 28 02 FB | 	rdlong	local06, objptr
08c70     01 28 06 F1 | 	add	local06, #1
08c74     F2 28 62 FC | 	wrlong	local06, objptr
08c78     56 00 00 FF 
08c7c     18 E5 85 F1 | 	sub	objptr, ##44312
08c80     34 04 90 FD | 	jmp	#LR__0716
08c84                 | LR__0705
08c84                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
08c84     01 24 0E F2 | 	cmp	local04, #1 wz
08c88     48 00 90 5D |  if_ne	jmp	#LR__0706
08c8c     00 C0 1F FF 
08c90     00 28 06 F6 | 	mov	local06, ##1065353216
08c94     56 00 00 FF 
08c98     18 E5 05 F1 | 	add	objptr, ##44312
08c9c     F2 2C 02 FB | 	rdlong	local08, objptr
08ca0     03 2C 66 F0 | 	shl	local08, #3
08ca4     02 00 00 FF 
08ca8     38 E4 85 F1 | 	sub	objptr, ##1080
08cac     F2 2C 02 F1 | 	add	local08, objptr
08cb0     16 13 02 FB | 	rdlong	arg01, local08
08cb4     54 00 00 FF 
08cb8     E0 E4 85 F1 | 	sub	objptr, ##43232
08cbc     8C 33 B1 FD | 	call	#__system____builtin_atof
08cc0     FD 14 02 F6 | 	mov	arg02, result1
08cc4     14 13 02 F6 | 	mov	arg01, local06
08cc8     98 2B B1 FD | 	call	#__system___float_mul
08ccc     FD 1E 02 F6 | 	mov	local01, result1
08cd0     1E 22 06 F6 | 	mov	local03, #30
08cd4                 | LR__0706
08cd4                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
08cd4     FF FF 7F FF 
08cd8     FF 25 0E F2 | 	cmp	local04, ##-1 wz
08cdc     48 00 90 5D |  if_ne	jmp	#LR__0707
08ce0     00 C0 5F FF 
08ce4     00 28 06 F6 | 	mov	local06, ##-1082130432
08ce8     56 00 00 FF 
08cec     18 E5 05 F1 | 	add	objptr, ##44312
08cf0     F2 2C 02 FB | 	rdlong	local08, objptr
08cf4     03 2C 66 F0 | 	shl	local08, #3
08cf8     02 00 00 FF 
08cfc     38 E4 85 F1 | 	sub	objptr, ##1080
08d00     F2 2C 02 F1 | 	add	local08, objptr
08d04     16 13 02 FB | 	rdlong	arg01, local08
08d08     54 00 00 FF 
08d0c     E0 E4 85 F1 | 	sub	objptr, ##43232
08d10     38 33 B1 FD | 	call	#__system____builtin_atof
08d14     FD 14 02 F6 | 	mov	arg02, result1
08d18     14 13 02 F6 | 	mov	arg01, local06
08d1c     44 2B B1 FD | 	call	#__system___float_mul
08d20     FD 1E 02 F6 | 	mov	local01, result1
08d24     1E 22 06 F6 | 	mov	local03, #30
08d28                 | LR__0707
08d28     0F 29 02 F6 | 	mov	local06, local01
08d2c     10 2B 02 F6 | 	mov	local07, local02
08d30     11 27 02 F6 | 	mov	local05, local03
08d34     69 00 00 FF 
08d38     50 E5 05 F1 | 	add	objptr, ##54096
08d3c     F2 1E 02 FB | 	rdlong	local01, objptr
08d40     0F 2D 02 F6 | 	mov	local08, local01
08d44     01 2C 66 F0 | 	shl	local08, #1
08d48     0F 2D 02 F1 | 	add	local08, local01
08d4c     02 2C 66 F0 | 	shl	local08, #2
08d50     03 00 00 FF 
08d54     00 E4 85 F1 | 	sub	objptr, ##1536
08d58     F2 2C 02 F1 | 	add	local08, objptr
08d5c     16 29 62 FC | 	wrlong	local06, local08
08d60     03 00 00 FF 
08d64     00 E4 05 F1 | 	add	objptr, ##1536
08d68     F2 2C 02 FB | 	rdlong	local08, objptr
08d6c     16 29 02 F6 | 	mov	local06, local08
08d70     01 28 66 F0 | 	shl	local06, #1
08d74     16 29 02 F1 | 	add	local06, local08
08d78     02 28 66 F0 | 	shl	local06, #2
08d7c     03 00 00 FF 
08d80     00 E4 85 F1 | 	sub	objptr, ##1536
08d84     F2 28 02 F1 | 	add	local06, objptr
08d88     04 28 06 F1 | 	add	local06, #4
08d8c     14 2B 62 FC | 	wrlong	local07, local06
08d90     03 00 00 FF 
08d94     00 E4 05 F1 | 	add	objptr, ##1536
08d98     F2 2C 02 FB | 	rdlong	local08, objptr
08d9c     16 2B 02 F6 | 	mov	local07, local08
08da0     01 2A 66 F0 | 	shl	local07, #1
08da4     16 2B 02 F1 | 	add	local07, local08
08da8     02 2A 66 F0 | 	shl	local07, #2
08dac     03 00 00 FF 
08db0     00 E4 85 F1 | 	sub	objptr, ##1536
08db4     F2 2A 02 F1 | 	add	local07, objptr
08db8     08 2A 06 F1 | 	add	local07, #8
08dbc     15 27 62 FC | 	wrlong	local05, local07
08dc0     03 00 00 FF 
08dc4     00 E4 05 F1 | 	add	objptr, ##1536
08dc8     F2 28 02 FB | 	rdlong	local06, objptr
08dcc     01 28 06 F1 | 	add	local06, #1
08dd0     F2 28 62 FC | 	wrlong	local06, objptr
08dd4     13 00 00 FF 
08dd8     38 E4 85 F1 | 	sub	objptr, ##9784
08ddc     F2 28 02 FB | 	rdlong	local06, objptr
08de0     01 28 06 F1 | 	add	local06, #1
08de4     F2 28 62 FC | 	wrlong	local06, objptr
08de8     56 00 00 FF 
08dec     18 E5 85 F1 | 	sub	objptr, ##44312
08df0     C4 02 90 FD | 	jmp	#LR__0716
08df4                 | LR__0708
08df4     1F 22 06 F6 | 	mov	local03, #31
08df8     56 00 00 FF 
08dfc     18 E5 05 F1 | 	add	objptr, ##44312
08e00     F2 16 02 FB | 	rdlong	arg03, objptr
08e04     03 16 66 F0 | 	shl	arg03, #3
08e08     02 00 00 FF 
08e0c     38 E4 85 F1 | 	sub	objptr, ##1080
08e10     F2 16 02 F1 | 	add	arg03, objptr
08e14     0B 13 02 FB | 	rdlong	arg01, arg03
08e18     54 00 00 FF 
08e1c     E0 E4 85 F1 | 	sub	objptr, ##43232
08e20     09 2F 02 F6 | 	mov	local09, arg01
08e24     97 06 48 FB | 	callpa	#(@LR__0710-@LR__0709)>>2,fcache_load_ptr_
08e28                 | LR__0709
08e28     17 FB C9 FA | 	rdbyte	result1, local09 wz
08e2c     01 2E 06 51 |  if_ne	add	local09, #1
08e30     F4 FF 9F 5D |  if_ne	jmp	#LR__0709
08e34                 | LR__0710
08e34     09 2F 82 F1 | 	sub	local09, arg01
08e38     17 FB 01 F6 | 	mov	result1, local09
08e3c     7A 00 00 FF 
08e40     88 E5 05 F1 | 	add	objptr, ##62856
08e44     F2 FA 61 FC | 	wrlong	result1, objptr
08e48     3C E4 85 F1 | 	sub	objptr, #60
08e4c     F2 12 02 FB | 	rdlong	arg01, objptr
08e50     FD 12 82 F1 | 	sub	arg01, result1
08e54     04 12 86 F1 | 	sub	arg01, #4
08e58     03 12 26 F5 | 	andn	arg01, #3
08e5c     F2 12 62 FC | 	wrlong	arg01, objptr
08e60     3C E4 05 F1 | 	add	objptr, #60
08e64     F2 14 02 FB | 	rdlong	arg02, objptr
08e68     01 16 06 F6 | 	mov	arg03, #1
08e6c     00 18 06 F6 | 	mov	arg04, #0
08e70     6F 00 00 FF 
08e74     C8 E4 85 F1 | 	sub	objptr, ##57032
08e78                 | '     return fill(addr, pattern, count, listPtr, 4)
08e78     04 1A 06 F6 | 	mov	arg05, #4
08e7c     40 F5 B0 FD | 	call	#_psram_spin2_fill
08e80                 | '     pslpoke memtop,l
08e80                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
08e80     01 30 06 F6 | 	mov	local10, #1
08e84     6F 00 00 FF 
08e88     C8 E4 05 F1 | 	add	objptr, ##57032
08e8c     F2 32 02 FB | 	rdlong	local11, objptr
08e90     7A 00 00 FF 
08e94     88 E5 85 F1 | 	sub	objptr, ##62856
08e98     01 32 06 F1 | 	add	local11, #1
08e9c                 | LR__0711
08e9c     19 31 52 F2 | 	cmps	local10, local11 wc
08ea0     78 00 90 3D |  if_ae	jmp	#LR__0712
08ea4     7A 00 00 FF 
08ea8     4C E5 05 F1 | 	add	objptr, ##62796
08eac     F2 2A 02 FB | 	rdlong	local07, objptr
08eb0     03 2A 06 F1 | 	add	local07, #3
08eb4     18 2B 02 F1 | 	add	local07, local10
08eb8     24 00 00 FF 
08ebc     34 E4 85 F1 | 	sub	objptr, ##18484
08ec0     F2 2C 02 FB | 	rdlong	local08, objptr
08ec4     03 2C 66 F0 | 	shl	local08, #3
08ec8     02 00 00 FF 
08ecc     38 E4 85 F1 | 	sub	objptr, ##1080
08ed0     F2 2C 02 F1 | 	add	local08, objptr
08ed4     16 13 02 FB | 	rdlong	arg01, local08
08ed8     18 15 02 F6 | 	mov	arg02, local10
08edc     01 16 06 F6 | 	mov	arg03, #1
08ee0     54 00 00 FF 
08ee4     E0 E4 85 F1 | 	sub	objptr, ##43232
08ee8     B4 1F B1 FD | 	call	#__system__Mid_S
08eec     FD 14 C2 FA | 	rdbyte	arg02, result1
08ef0     15 13 02 F6 | 	mov	arg01, local07
08ef4     01 16 06 F6 | 	mov	arg03, #1
08ef8     00 18 06 F6 | 	mov	arg04, #0
08efc     0B 00 00 FF 
08f00     C0 E4 05 F1 | 	add	objptr, ##5824
08f04                 | '     return fill(addr, pattern, count, listPtr, 1)
08f04     01 1A 06 F6 | 	mov	arg05, #1
08f08     B4 F4 B0 FD | 	call	#_psram_spin2_fill
08f0c     0B 00 00 FF 
08f10     C0 E4 85 F1 | 	sub	objptr, ##5824
08f14     01 30 06 F1 | 	add	local10, #1
08f18     80 FF 9F FD | 	jmp	#LR__0711
08f1c                 | LR__0712
08f1c     7A 00 00 FF 
08f20     4C E5 05 F1 | 	add	objptr, ##62796
08f24     F2 1E 02 FB | 	rdlong	local01, objptr
08f28     2B 22 06 F6 | 	mov	local03, #43
08f2c     0F 29 02 F6 | 	mov	local06, local01
08f30     10 2B 02 F6 | 	mov	local07, local02
08f34     11 33 02 F6 | 	mov	local11, local03
08f38     10 00 00 FF 
08f3c     FC E5 85 F1 | 	sub	objptr, ##8700
08f40     F2 30 02 FB | 	rdlong	local10, objptr
08f44     18 2D 02 F6 | 	mov	local08, local10
08f48     01 2C 66 F0 | 	shl	local08, #1
08f4c     18 2D 02 F1 | 	add	local08, local10
08f50     02 2C 66 F0 | 	shl	local08, #2
08f54     03 00 00 FF 
08f58     00 E4 85 F1 | 	sub	objptr, ##1536
08f5c     F2 2C 02 F1 | 	add	local08, objptr
08f60     16 29 62 FC | 	wrlong	local06, local08
08f64     03 00 00 FF 
08f68     00 E4 05 F1 | 	add	objptr, ##1536
08f6c     F2 30 02 FB | 	rdlong	local10, objptr
08f70     18 2D 02 F6 | 	mov	local08, local10
08f74     01 2C 66 F0 | 	shl	local08, #1
08f78     18 2D 02 F1 | 	add	local08, local10
08f7c     02 2C 66 F0 | 	shl	local08, #2
08f80     03 00 00 FF 
08f84     00 E4 85 F1 | 	sub	objptr, ##1536
08f88     F2 2C 02 F1 | 	add	local08, objptr
08f8c     04 2C 06 F1 | 	add	local08, #4
08f90     16 2B 62 FC | 	wrlong	local07, local08
08f94     03 00 00 FF 
08f98     00 E4 05 F1 | 	add	objptr, ##1536
08f9c     F2 30 02 FB | 	rdlong	local10, objptr
08fa0     18 2D 02 F6 | 	mov	local08, local10
08fa4     01 2C 66 F0 | 	shl	local08, #1
08fa8     18 2D 02 F1 | 	add	local08, local10
08fac     02 2C 66 F0 | 	shl	local08, #2
08fb0     03 00 00 FF 
08fb4     00 E4 85 F1 | 	sub	objptr, ##1536
08fb8     F2 2C 02 F1 | 	add	local08, objptr
08fbc     08 2C 06 F1 | 	add	local08, #8
08fc0     16 33 62 FC | 	wrlong	local11, local08
08fc4     03 00 00 FF 
08fc8     00 E4 05 F1 | 	add	objptr, ##1536
08fcc     F2 28 02 FB | 	rdlong	local06, objptr
08fd0     01 28 06 F1 | 	add	local06, #1
08fd4     F2 28 62 FC | 	wrlong	local06, objptr
08fd8     13 00 00 FF 
08fdc     38 E4 85 F1 | 	sub	objptr, ##9784
08fe0     F2 28 02 FB | 	rdlong	local06, objptr
08fe4     01 28 06 F1 | 	add	local06, #1
08fe8     F2 28 62 FC | 	wrlong	local06, objptr
08fec     56 00 00 FF 
08ff0     18 E5 85 F1 | 	sub	objptr, ##44312
08ff4     C0 00 90 FD | 	jmp	#LR__0716
08ff8                 | LR__0713
08ff8     12 13 02 F6 | 	mov	arg01, local04
08ffc     B8 03 B0 FD | 	call	#_getvar
09000     56 00 00 FF 
09004     18 E5 05 F1 | 	add	objptr, ##44312
09008     F2 28 02 FB | 	rdlong	local06, objptr
0900c     01 28 06 F1 | 	add	local06, #1
09010     F2 28 62 FC | 	wrlong	local06, objptr
09014     56 00 00 FF 
09018     18 E5 85 F1 | 	sub	objptr, ##44312
0901c     98 00 90 FD | 	jmp	#LR__0716
09020                 | LR__0714
09020     56 00 00 FF 
09024     18 E5 05 F1 | 	add	objptr, ##44312
09028     F2 28 02 FB | 	rdlong	local06, objptr
0902c     01 28 06 F1 | 	add	local06, #1
09030     F2 28 62 FC | 	wrlong	local06, objptr
09034     56 00 00 FF 
09038     18 E5 85 F1 | 	sub	objptr, ##44312
0903c     F4 F3 BF FD | 	call	#_expr
09040                 | '     ct+=1
09040                 | '     expr() 
09040                 | '     if lparts(ct).token=token_rpar then ct+=1
09040     56 00 00 FF 
09044     18 E5 05 F1 | 	add	objptr, ##44312
09048     F2 32 02 FB | 	rdlong	local11, objptr
0904c     03 32 66 F0 | 	shl	local11, #3
09050     02 00 00 FF 
09054     38 E4 85 F1 | 	sub	objptr, ##1080
09058     F2 32 02 F1 | 	add	local11, objptr
0905c     04 32 06 F1 | 	add	local11, #4
09060     19 33 02 FB | 	rdlong	local11, local11
09064     14 32 0E F2 | 	cmp	local11, #20 wz
09068     54 00 00 FF 
0906c     E0 E4 85 F1 | 	sub	objptr, ##43232
09070     44 00 90 5D |  if_ne	jmp	#LR__0716
09074     56 00 00 FF 
09078     18 E5 05 F1 | 	add	objptr, ##44312
0907c     F2 28 02 FB | 	rdlong	local06, objptr
09080     01 28 06 F1 | 	add	local06, #1
09084     F2 28 62 FC | 	wrlong	local06, objptr
09088     56 00 00 FF 
0908c     18 E5 85 F1 | 	sub	objptr, ##44312
09090     24 00 90 FD | 	jmp	#LR__0716
09094                 | LR__0715
09094     12 13 02 F6 | 	mov	arg01, local04
09098     28 00 B0 FD | 	call	#_getfun
0909c     56 00 00 FF 
090a0     18 E5 05 F1 | 	add	objptr, ##44312
090a4     F2 28 02 FB | 	rdlong	local06, objptr
090a8     01 28 06 F1 | 	add	local06, #1
090ac     F2 28 62 FC | 	wrlong	local06, objptr
090b0     56 00 00 FF 
090b4     18 E5 85 F1 | 	sub	objptr, ##44312
090b8                 | LR__0716
090b8     A7 F0 03 F6 | 	mov	ptra, fp
090bc     B2 00 A0 FD | 	call	#popregs_
090c0                 | _getvalue_ret
090c0     2D 00 64 FD | 	ret
090c4                 | 
090c4                 | ' 
090c4                 | ' sub getfun(m as integer) ' todo - functions return type, todo" fun can have expr list after it
090c4                 | _getfun
090c4     0A 4A 05 F6 | 	mov	COUNT_, #10
090c8     A8 00 A0 FD | 	call	#pushregs_
090cc                 | _getfun_enter
090cc     09 25 02 F6 | 	mov	local04, arg01
090d0     56 00 00 FF 
090d4     18 E5 05 F1 | 	add	objptr, ##44312
090d8     F2 26 02 FB | 	rdlong	local05, objptr
090dc     13 29 02 F6 | 	mov	local06, local05
090e0     00 2A 06 F6 | 	mov	local07, #0
090e4                 | '  ' if lparts(ct+1).token=token_lpar then oldct=ct: ct+=1: expr()
090e4                 | ' oldct=ct
090e4                 | ' numpar=0
090e4                 | '   
090e4                 | ' if lparts(ct+1).token=token_lpar then
090e4     01 26 06 F1 | 	add	local05, #1
090e8     03 26 66 F0 | 	shl	local05, #3
090ec     02 00 00 FF 
090f0     38 E4 85 F1 | 	sub	objptr, ##1080
090f4     F2 26 02 F1 | 	add	local05, objptr
090f8     04 26 06 F1 | 	add	local05, #4
090fc     13 27 02 FB | 	rdlong	local05, local05
09100     15 26 0E F2 | 	cmp	local05, #21 wz
09104     54 00 00 FF 
09108     E0 E4 85 F1 | 	sub	objptr, ##43232
0910c     08 01 90 5D |  if_ne	jmp	#LR__0724
09110     56 00 00 FF 
09114     18 E5 05 F1 | 	add	objptr, ##44312
09118     F2 2C 02 FB | 	rdlong	local08, objptr
0911c     01 2C 06 F1 | 	add	local08, #1
09120     F2 2C 62 FC | 	wrlong	local08, objptr
09124     56 00 00 FF 
09128     18 E5 85 F1 | 	sub	objptr, ##44312
0912c                 | '   ct+=1 											' omit this lpar, this is for expr list
0912c                 | '   do
0912c                 | LR__0720
0912c     56 00 00 FF 
09130     18 E5 05 F1 | 	add	objptr, ##44312
09134     F2 26 02 FB | 	rdlong	local05, objptr
09138     01 26 06 F1 | 	add	local05, #1
0913c     F2 26 62 FC | 	wrlong	local05, objptr
09140                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
09140                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
09140     03 26 66 F0 | 	shl	local05, #3
09144     02 00 00 FF 
09148     38 E4 85 F1 | 	sub	objptr, ##1080
0914c     F2 26 02 F1 | 	add	local05, objptr
09150     04 26 06 F1 | 	add	local05, #4
09154     13 2D 02 FB | 	rdlong	local08, local05
09158     15 2C 0E F2 | 	cmp	local08, #21 wz
0915c     54 00 00 FF 
09160     E0 E4 85 F1 | 	sub	objptr, ##43232
09164     40 00 90 5D |  if_ne	jmp	#LR__0721
09168     56 00 00 FF 
0916c     18 E5 05 F1 | 	add	objptr, ##44312
09170     F2 2C 02 FB | 	rdlong	local08, objptr
09174     01 2C 06 F1 | 	add	local08, #1
09178     F2 2C 62 FC | 	wrlong	local08, objptr
0917c     56 00 00 FF 
09180     18 E5 85 F1 | 	sub	objptr, ##44312
09184     AC F2 BF FD | 	call	#_expr
09188     56 00 00 FF 
0918c     18 E5 05 F1 | 	add	objptr, ##44312
09190     F2 2C 02 FB | 	rdlong	local08, objptr
09194     01 2C 06 F1 | 	add	local08, #1
09198     F2 2C 62 FC | 	wrlong	local08, objptr
0919c     56 00 00 FF 
091a0     18 E5 85 F1 | 	sub	objptr, ##44312
091a4     04 00 90 FD | 	jmp	#LR__0722
091a8                 | LR__0721
091a8     88 F2 BF FD | 	call	#_expr
091ac                 | LR__0722
091ac     01 2A 06 F1 | 	add	local07, #1
091b0     56 00 00 FF 
091b4     18 E5 05 F1 | 	add	objptr, ##44312
091b8     F2 26 02 FB | 	rdlong	local05, objptr
091bc     03 26 66 F0 | 	shl	local05, #3
091c0     02 00 00 FF 
091c4     38 E4 85 F1 | 	sub	objptr, ##1080
091c8     F2 26 02 F1 | 	add	local05, objptr
091cc     04 26 06 F1 | 	add	local05, #4
091d0     13 2D 02 FB | 	rdlong	local08, local05
091d4     14 2C 0E F2 | 	cmp	local08, #20 wz
091d8     54 00 00 FF 
091dc     E0 E4 85 F1 | 	sub	objptr, ##43232
091e0     34 00 90 AD |  if_e	jmp	#LR__0723
091e4     56 00 00 FF 
091e8     18 E5 05 F1 | 	add	objptr, ##44312
091ec     F2 2C 02 FB | 	rdlong	local08, objptr
091f0     03 2C 66 F0 | 	shl	local08, #3
091f4     02 00 00 FF 
091f8     38 E4 85 F1 | 	sub	objptr, ##1080
091fc     F2 2C 02 F1 | 	add	local08, objptr
09200     04 2C 06 F1 | 	add	local08, #4
09204     16 2D 02 FB | 	rdlong	local08, local08
09208     FE 2D 0E F2 | 	cmp	local08, #510 wz
0920c     54 00 00 FF 
09210     E0 E4 85 F1 | 	sub	objptr, ##43232
09214     14 FF 9F 5D |  if_ne	jmp	#LR__0720
09218                 | LR__0723
09218                 | LR__0724
09218     15 1F 02 F6 | 	mov	local01, local07
0921c     03 28 66 F0 | 	shl	local06, #3
09220     54 00 00 FF 
09224     E0 E4 05 F1 | 	add	objptr, ##43232
09228     F2 28 02 F1 | 	add	local06, objptr
0922c     04 28 06 F1 | 	add	local06, #4
09230     14 23 02 FB | 	rdlong	local03, local06
09234     0F 2D 02 F6 | 	mov	local08, local01
09238     10 2B 02 F6 | 	mov	local07, local02
0923c     11 29 02 F6 | 	mov	local06, local03
09240     15 00 00 FF 
09244     70 E4 05 F1 | 	add	objptr, ##10864
09248     F2 26 02 FB | 	rdlong	local05, objptr
0924c     13 13 02 F6 | 	mov	arg01, local05
09250     01 12 66 F0 | 	shl	arg01, #1
09254     13 13 02 F1 | 	add	arg01, local05
09258     02 12 66 F0 | 	shl	arg01, #2
0925c     03 00 00 FF 
09260     00 E4 85 F1 | 	sub	objptr, ##1536
09264     F2 12 02 F1 | 	add	arg01, objptr
09268     09 2D 62 FC | 	wrlong	local08, arg01
0926c     03 00 00 FF 
09270     00 E4 05 F1 | 	add	objptr, ##1536
09274     F2 2C 02 FB | 	rdlong	local08, objptr
09278     16 2F 02 F6 | 	mov	local09, local08
0927c     01 2E 66 F0 | 	shl	local09, #1
09280     16 2F 02 F1 | 	add	local09, local08
09284     02 2E 66 F0 | 	shl	local09, #2
09288     03 00 00 FF 
0928c     00 E4 85 F1 | 	sub	objptr, ##1536
09290     F2 2E 02 F1 | 	add	local09, objptr
09294     04 2E 06 F1 | 	add	local09, #4
09298     17 2B 62 FC | 	wrlong	local07, local09
0929c     03 00 00 FF 
092a0     00 E4 05 F1 | 	add	objptr, ##1536
092a4     F2 2C 02 FB | 	rdlong	local08, objptr
092a8     16 31 02 F6 | 	mov	local10, local08
092ac     01 30 66 F0 | 	shl	local10, #1
092b0     16 31 02 F1 | 	add	local10, local08
092b4     02 30 66 F0 | 	shl	local10, #2
092b8     03 00 00 FF 
092bc     00 E4 85 F1 | 	sub	objptr, ##1536
092c0     F2 30 02 F1 | 	add	local10, objptr
092c4     08 30 06 F1 | 	add	local10, #8
092c8     18 29 62 FC | 	wrlong	local06, local10
092cc     03 00 00 FF 
092d0     00 E4 05 F1 | 	add	objptr, ##1536
092d4     F2 2C 02 FB | 	rdlong	local08, objptr
092d8     01 2C 06 F1 | 	add	local08, #1
092dc     F2 2C 62 FC | 	wrlong	local08, objptr
092e0     69 00 00 FF 
092e4     50 E5 85 F1 | 	sub	objptr, ##54096
092e8                 | ' 
092e8                 | ' t2.result.uresult=numpar
092e8                 | ' 
092e8                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
092e8                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
092e8                 | ' 
092e8                 | '   
092e8                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
092e8     FF FF 7F FF 
092ec     FF 25 0E F2 | 	cmp	local04, ##-1 wz
092f0     B8 00 90 5D |  if_ne	jmp	#LR__0725
092f4     15 22 06 F6 | 	mov	local03, #21
092f8     0F 2D 02 F6 | 	mov	local08, local01
092fc     10 2B 02 F6 | 	mov	local07, local02
09300     11 29 02 F6 | 	mov	local06, local03
09304     69 00 00 FF 
09308     50 E5 05 F1 | 	add	objptr, ##54096
0930c     F2 26 02 FB | 	rdlong	local05, objptr
09310     13 13 02 F6 | 	mov	arg01, local05
09314     01 12 66 F0 | 	shl	arg01, #1
09318     13 13 02 F1 | 	add	arg01, local05
0931c     02 12 66 F0 | 	shl	arg01, #2
09320     03 00 00 FF 
09324     00 E4 85 F1 | 	sub	objptr, ##1536
09328     F2 12 02 F1 | 	add	arg01, objptr
0932c     09 2D 62 FC | 	wrlong	local08, arg01
09330     03 00 00 FF 
09334     00 E4 05 F1 | 	add	objptr, ##1536
09338     F2 30 02 FB | 	rdlong	local10, objptr
0933c     18 2F 02 F6 | 	mov	local09, local10
09340     01 2E 66 F0 | 	shl	local09, #1
09344     18 2F 02 F1 | 	add	local09, local10
09348     02 2E 66 F0 | 	shl	local09, #2
0934c     03 00 00 FF 
09350     00 E4 85 F1 | 	sub	objptr, ##1536
09354     F2 2E 02 F1 | 	add	local09, objptr
09358     04 2E 06 F1 | 	add	local09, #4
0935c     17 2B 62 FC | 	wrlong	local07, local09
09360     03 00 00 FF 
09364     00 E4 05 F1 | 	add	objptr, ##1536
09368     F2 2E 02 FB | 	rdlong	local09, objptr
0936c     17 31 02 F6 | 	mov	local10, local09
09370     01 30 66 F0 | 	shl	local10, #1
09374     17 31 02 F1 | 	add	local10, local09
09378     02 30 66 F0 | 	shl	local10, #2
0937c     03 00 00 FF 
09380     00 E4 85 F1 | 	sub	objptr, ##1536
09384     F2 30 02 F1 | 	add	local10, objptr
09388     08 30 06 F1 | 	add	local10, #8
0938c     18 29 62 FC | 	wrlong	local06, local10
09390     03 00 00 FF 
09394     00 E4 05 F1 | 	add	objptr, ##1536
09398     F2 2C 02 FB | 	rdlong	local08, objptr
0939c     01 2C 06 F1 | 	add	local08, #1
093a0     F2 2C 62 FC | 	wrlong	local08, objptr
093a4     69 00 00 FF 
093a8     50 E5 85 F1 | 	sub	objptr, ##54096
093ac                 | LR__0725
093ac     A7 F0 03 F6 | 	mov	ptra, fp
093b0     B2 00 A0 FD | 	call	#popregs_
093b4                 | _getfun_ret
093b4     2D 00 64 FD | 	ret
093b8                 | 
093b8                 | '   
093b8                 | '   
093b8                 | ' sub getvar(m as integer) 
093b8                 | _getvar
093b8     0A 4A 05 F6 | 	mov	COUNT_, #10
093bc     A8 00 A0 FD | 	call	#pushregs_
093c0                 | _getvar_enter
093c0     09 25 02 F6 | 	mov	local04, arg01
093c4     56 00 00 FF 
093c8     18 E5 05 F1 | 	add	objptr, ##44312
093cc     F2 14 02 FB | 	rdlong	arg02, objptr
093d0     03 14 66 F0 | 	shl	arg02, #3
093d4     02 00 00 FF 
093d8     38 E4 85 F1 | 	sub	objptr, ##1080
093dc     F2 14 02 F1 | 	add	arg02, objptr
093e0     0A 27 02 FB | 	rdlong	local05, arg02
093e4     13 13 02 F6 | 	mov	arg01, local05
093e8     01 14 06 F6 | 	mov	arg02, #1
093ec     54 00 00 FF 
093f0     E0 E4 85 F1 | 	sub	objptr, ##43232
093f4     18 1A B1 FD | 	call	#__system__Right_S
093f8     FD 28 02 F6 | 	mov	local06, result1
093fc     01 2A 66 F6 | 	neg	local07, #1
09400                 | ' 
09400                 | ' varname$=lparts(ct).part$
09400                 | ' suffix$=right$(varname$,1)
09400                 | ' j=-1
09400                 | ' 
09400                 | ' for i=0 to varnum-1
09400     00 2C 06 F6 | 	mov	local08, #0
09404     54 00 00 FF 
09408     DC E4 05 F1 | 	add	objptr, ##43228
0940c     F2 2E 02 FB | 	rdlong	local09, objptr
09410     54 00 00 FF 
09414     DC E4 85 F1 | 	sub	objptr, ##43228
09418                 | LR__0730
09418     17 2D 52 F2 | 	cmps	local08, local09 wc
0941c     38 00 90 3D |  if_ae	jmp	#LR__0731
09420                 | '   if variables(i).name=varname$ then j=i : exit
09420     16 15 02 F6 | 	mov	arg02, local08
09424     04 14 66 F0 | 	shl	arg02, #4
09428     34 00 00 FF 
0942c     DC E4 05 F1 | 	add	objptr, ##26844
09430     F2 14 02 F1 | 	add	arg02, objptr
09434     0A 13 02 FB | 	rdlong	arg01, arg02
09438     13 15 02 F6 | 	mov	arg02, local05
0943c     34 00 00 FF 
09440     DC E4 85 F1 | 	sub	objptr, ##26844
09444     58 F9 B0 FD | 	call	#__system___string_cmp
09448     00 FA 0D F2 | 	cmp	result1, #0 wz
0944c     16 2B 02 A6 |  if_e	mov	local07, local08
09450     01 2C 06 51 |  if_ne	add	local08, #1
09454     C0 FF 9F 5D |  if_ne	jmp	#LR__0730
09458                 | LR__0731
09458                 | ' if  j=-1 andalso varnum<maxvars then   
09458     FF FF 7F FF 
0945c     FF 2B 0E F2 | 	cmp	local07, ##-1 wz
09460     A8 00 90 5D |  if_ne	jmp	#LR__0732
09464     54 00 00 FF 
09468     DC E4 05 F1 | 	add	objptr, ##43228
0946c     F2 2E 02 FB | 	rdlong	local09, objptr
09470     54 00 00 FF 
09474     DC E4 85 F1 | 	sub	objptr, ##43228
09478     01 00 00 FF 
0947c     FF 2F 56 F2 | 	cmps	local09, ##1023 wc
09480     88 00 90 3D |  if_ae	jmp	#LR__0732
09484     54 00 00 FF 
09488     DC E4 05 F1 | 	add	objptr, ##43228
0948c     F2 2E 02 FB | 	rdlong	local09, objptr
09490     04 2E 66 F0 | 	shl	local09, #4
09494     20 00 00 FF 
09498     00 E4 85 F1 | 	sub	objptr, ##16384
0949c     F2 2E 02 F1 | 	add	local09, objptr
094a0     17 27 62 FC | 	wrlong	local05, local09
094a4     20 00 00 FF 
094a8     00 E4 05 F1 | 	add	objptr, ##16384
094ac     F2 2E 02 FB | 	rdlong	local09, objptr
094b0     04 2E 66 F0 | 	shl	local09, #4
094b4     20 00 00 FF 
094b8     00 E4 85 F1 | 	sub	objptr, ##16384
094bc     F2 2E 02 F1 | 	add	local09, objptr
094c0     04 2E 06 F1 | 	add	local09, #4
094c4     17 01 68 FC | 	wrlong	#0, local09
094c8     20 00 00 FF 
094cc     00 E4 05 F1 | 	add	objptr, ##16384
094d0     F2 2E 02 FB | 	rdlong	local09, objptr
094d4     04 2E 66 F0 | 	shl	local09, #4
094d8     20 00 00 FF 
094dc     00 E4 85 F1 | 	sub	objptr, ##16384
094e0     F2 2E 02 F1 | 	add	local09, objptr
094e4     0C 2E 06 F1 | 	add	local09, #12
094e8     17 39 68 FC | 	wrlong	#28, local09
094ec     20 00 00 FF 
094f0     00 E4 05 F1 | 	add	objptr, ##16384
094f4     F2 2E 02 FB | 	rdlong	local09, objptr
094f8     17 2B 02 F6 | 	mov	local07, local09
094fc     01 2E 06 F1 | 	add	local09, #1
09500     F2 2E 62 FC | 	wrlong	local09, objptr
09504     54 00 00 FF 
09508     DC E4 85 F1 | 	sub	objptr, ##43228
0950c                 | LR__0732
0950c     00 2E 06 F6 | 	mov	local09, #0
09510                 | ' numpar=0
09510                 | ' ' check if it is an array
09510                 | ' 
09510                 | ' if lparts(ct+1).token=token_lpar then
09510     56 00 00 FF 
09514     18 E5 05 F1 | 	add	objptr, ##44312
09518     F2 2C 02 FB | 	rdlong	local08, objptr
0951c     01 2C 06 F1 | 	add	local08, #1
09520     03 2C 66 F0 | 	shl	local08, #3
09524     02 00 00 FF 
09528     38 E4 85 F1 | 	sub	objptr, ##1080
0952c     F2 2C 02 F1 | 	add	local08, objptr
09530     04 2C 06 F1 | 	add	local08, #4
09534     16 2D 02 FB | 	rdlong	local08, local08
09538     15 2C 0E F2 | 	cmp	local08, #21 wz
0953c     54 00 00 FF 
09540     E0 E4 85 F1 | 	sub	objptr, ##43232
09544     08 01 90 5D |  if_ne	jmp	#LR__0737
09548     56 00 00 FF 
0954c     18 E5 05 F1 | 	add	objptr, ##44312
09550     F2 30 02 FB | 	rdlong	local10, objptr
09554     01 30 06 F1 | 	add	local10, #1
09558     F2 30 62 FC | 	wrlong	local10, objptr
0955c     56 00 00 FF 
09560     18 E5 85 F1 | 	sub	objptr, ##44312
09564                 | '   ct+=1 											' omit this lpar, this is for expr list
09564                 | '   do
09564                 | LR__0733
09564     56 00 00 FF 
09568     18 E5 05 F1 | 	add	objptr, ##44312
0956c     F2 2C 02 FB | 	rdlong	local08, objptr
09570     01 2C 06 F1 | 	add	local08, #1
09574     F2 2C 62 FC | 	wrlong	local08, objptr
09578                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
09578                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
09578     03 2C 66 F0 | 	shl	local08, #3
0957c     02 00 00 FF 
09580     38 E4 85 F1 | 	sub	objptr, ##1080
09584     F2 2C 02 F1 | 	add	local08, objptr
09588     04 2C 06 F1 | 	add	local08, #4
0958c     16 31 02 FB | 	rdlong	local10, local08
09590     15 30 0E F2 | 	cmp	local10, #21 wz
09594     54 00 00 FF 
09598     E0 E4 85 F1 | 	sub	objptr, ##43232
0959c     40 00 90 5D |  if_ne	jmp	#LR__0734
095a0     56 00 00 FF 
095a4     18 E5 05 F1 | 	add	objptr, ##44312
095a8     F2 30 02 FB | 	rdlong	local10, objptr
095ac     01 30 06 F1 | 	add	local10, #1
095b0     F2 30 62 FC | 	wrlong	local10, objptr
095b4     56 00 00 FF 
095b8     18 E5 85 F1 | 	sub	objptr, ##44312
095bc     74 EE BF FD | 	call	#_expr
095c0     56 00 00 FF 
095c4     18 E5 05 F1 | 	add	objptr, ##44312
095c8     F2 30 02 FB | 	rdlong	local10, objptr
095cc     01 30 06 F1 | 	add	local10, #1
095d0     F2 30 62 FC | 	wrlong	local10, objptr
095d4     56 00 00 FF 
095d8     18 E5 85 F1 | 	sub	objptr, ##44312
095dc     04 00 90 FD | 	jmp	#LR__0735
095e0                 | LR__0734
095e0     50 EE BF FD | 	call	#_expr
095e4                 | LR__0735
095e4     01 2E 06 F1 | 	add	local09, #1
095e8     56 00 00 FF 
095ec     18 E5 05 F1 | 	add	objptr, ##44312
095f0     F2 2C 02 FB | 	rdlong	local08, objptr
095f4     03 2C 66 F0 | 	shl	local08, #3
095f8     02 00 00 FF 
095fc     38 E4 85 F1 | 	sub	objptr, ##1080
09600     F2 2C 02 F1 | 	add	local08, objptr
09604     04 2C 06 F1 | 	add	local08, #4
09608     16 31 02 FB | 	rdlong	local10, local08
0960c     14 30 0E F2 | 	cmp	local10, #20 wz
09610     54 00 00 FF 
09614     E0 E4 85 F1 | 	sub	objptr, ##43232
09618     34 00 90 AD |  if_e	jmp	#LR__0736
0961c     56 00 00 FF 
09620     18 E5 05 F1 | 	add	objptr, ##44312
09624     F2 30 02 FB | 	rdlong	local10, objptr
09628     03 30 66 F0 | 	shl	local10, #3
0962c     02 00 00 FF 
09630     38 E4 85 F1 | 	sub	objptr, ##1080
09634     F2 30 02 F1 | 	add	local10, objptr
09638     04 30 06 F1 | 	add	local10, #4
0963c     18 31 02 FB | 	rdlong	local10, local10
09640     FE 31 0E F2 | 	cmp	local10, #510 wz
09644     54 00 00 FF 
09648     E0 E4 85 F1 | 	sub	objptr, ##43232
0964c     14 FF 9F 5D |  if_ne	jmp	#LR__0733
09650                 | LR__0736
09650                 | LR__0737
09650     17 21 02 F6 | 	mov	local02, local09
09654     11 22 06 F6 | 	mov	local03, #17
09658     15 1F 02 F6 | 	mov	local01, local07
0965c     0F 31 02 F6 | 	mov	local10, local01
09660     10 2F 02 F6 | 	mov	local09, local02
09664     11 2D 02 F6 | 	mov	local08, local03
09668     69 00 00 FF 
0966c     50 E5 05 F1 | 	add	objptr, ##54096
09670     F2 2A 02 FB | 	rdlong	local07, objptr
09674     15 29 02 F6 | 	mov	local06, local07
09678     01 28 66 F0 | 	shl	local06, #1
0967c     15 29 02 F1 | 	add	local06, local07
09680     02 28 66 F0 | 	shl	local06, #2
09684     03 00 00 FF 
09688     00 E4 85 F1 | 	sub	objptr, ##1536
0968c     F2 28 02 F1 | 	add	local06, objptr
09690     14 31 62 FC | 	wrlong	local10, local06
09694     03 00 00 FF 
09698     00 E4 05 F1 | 	add	objptr, ##1536
0969c     F2 30 02 FB | 	rdlong	local10, objptr
096a0     18 27 02 F6 | 	mov	local05, local10
096a4     01 26 66 F0 | 	shl	local05, #1
096a8     18 27 02 F1 | 	add	local05, local10
096ac     02 26 66 F0 | 	shl	local05, #2
096b0     03 00 00 FF 
096b4     00 E4 85 F1 | 	sub	objptr, ##1536
096b8     F2 26 02 F1 | 	add	local05, objptr
096bc     04 26 06 F1 | 	add	local05, #4
096c0     13 2F 62 FC | 	wrlong	local09, local05
096c4     03 00 00 FF 
096c8     00 E4 05 F1 | 	add	objptr, ##1536
096cc     F2 30 02 FB | 	rdlong	local10, objptr
096d0     18 FB 01 F6 | 	mov	result1, local10
096d4     01 FA 65 F0 | 	shl	result1, #1
096d8     18 FB 01 F1 | 	add	result1, local10
096dc     02 FA 65 F0 | 	shl	result1, #2
096e0     03 00 00 FF 
096e4     00 E4 85 F1 | 	sub	objptr, ##1536
096e8     F2 FA 01 F1 | 	add	result1, objptr
096ec     08 FA 05 F1 | 	add	result1, #8
096f0     FD 2C 62 FC | 	wrlong	local08, result1
096f4     03 00 00 FF 
096f8     00 E4 05 F1 | 	add	objptr, ##1536
096fc     F2 30 02 FB | 	rdlong	local10, objptr
09700     01 30 06 F1 | 	add	local10, #1
09704     F2 30 62 FC | 	wrlong	local10, objptr
09708     69 00 00 FF 
0970c     50 E5 85 F1 | 	sub	objptr, ##54096
09710                 | ' 
09710                 | ' t2.result.twowords(1)=numpar
09710                 | ' 
09710                 | ' 
09710                 | ' 
09710                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
09710                 | ' 
09710                 | ' 
09710                 | '  
09710                 | ' 
09710                 | ' 701 
09710                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
09710                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
09710     FF FF 7F FF 
09714     FF 25 0E F2 | 	cmp	local04, ##-1 wz
09718     B8 00 90 5D |  if_ne	jmp	#LR__0738
0971c     15 22 06 F6 | 	mov	local03, #21
09720     0F 31 02 F6 | 	mov	local10, local01
09724     10 2F 02 F6 | 	mov	local09, local02
09728     11 2D 02 F6 | 	mov	local08, local03
0972c     69 00 00 FF 
09730     50 E5 05 F1 | 	add	objptr, ##54096
09734     F2 2A 02 FB | 	rdlong	local07, objptr
09738     15 29 02 F6 | 	mov	local06, local07
0973c     01 28 66 F0 | 	shl	local06, #1
09740     15 29 02 F1 | 	add	local06, local07
09744     02 28 66 F0 | 	shl	local06, #2
09748     03 00 00 FF 
0974c     00 E4 85 F1 | 	sub	objptr, ##1536
09750     F2 28 02 F1 | 	add	local06, objptr
09754     14 31 62 FC | 	wrlong	local10, local06
09758     03 00 00 FF 
0975c     00 E4 05 F1 | 	add	objptr, ##1536
09760     F2 1E 02 FB | 	rdlong	local01, objptr
09764     0F 27 02 F6 | 	mov	local05, local01
09768     01 26 66 F0 | 	shl	local05, #1
0976c     0F 27 02 F1 | 	add	local05, local01
09770     02 26 66 F0 | 	shl	local05, #2
09774     03 00 00 FF 
09778     00 E4 85 F1 | 	sub	objptr, ##1536
0977c     F2 26 02 F1 | 	add	local05, objptr
09780     04 26 06 F1 | 	add	local05, #4
09784     13 2F 62 FC | 	wrlong	local09, local05
09788     03 00 00 FF 
0978c     00 E4 05 F1 | 	add	objptr, ##1536
09790     F2 1E 02 FB | 	rdlong	local01, objptr
09794     0F FB 01 F6 | 	mov	result1, local01
09798     01 FA 65 F0 | 	shl	result1, #1
0979c     0F FB 01 F1 | 	add	result1, local01
097a0     02 FA 65 F0 | 	shl	result1, #2
097a4     03 00 00 FF 
097a8     00 E4 85 F1 | 	sub	objptr, ##1536
097ac     F2 FA 01 F1 | 	add	result1, objptr
097b0     08 FA 05 F1 | 	add	result1, #8
097b4     FD 2C 62 FC | 	wrlong	local08, result1
097b8     03 00 00 FF 
097bc     00 E4 05 F1 | 	add	objptr, ##1536
097c0     F2 30 02 FB | 	rdlong	local10, objptr
097c4     01 30 06 F1 | 	add	local10, #1
097c8     F2 30 62 FC | 	wrlong	local10, objptr
097cc     69 00 00 FF 
097d0     50 E5 85 F1 | 	sub	objptr, ##54096
097d4                 | LR__0738
097d4     A7 F0 03 F6 | 	mov	ptra, fp
097d8     B2 00 A0 FD | 	call	#popregs_
097dc                 | _getvar_ret
097dc     2D 00 64 FD | 	ret
097e0                 | 
097e0                 | ' 
097e0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
097e0                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
097e0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
097e0                 | ' 
097e0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
097e0                 | ' '--------------------------------------------- Runtime functions ------------------------------------------------------------------------ 
097e0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
097e0                 | ' 
097e0                 | ' function execute_line (astart=0 as integer) as integer
097e0                 | _execute_line
097e0     04 4A 05 F6 | 	mov	COUNT_, #4
097e4     A8 00 A0 FD | 	call	#pushregs_
097e8     79 00 00 FF 
097ec     88 E4 05 F1 | 	add	objptr, ##62088
097f0     F2 00 68 FC | 	wrlong	#0, objptr
097f4                 | ' runptr2=0
097f4                 | ' for lineptr_e=astart to lineptr-1
097f4     0F 00 00 FF 
097f8     34 E5 85 F1 | 	sub	objptr, ##7988
097fc     F2 12 62 FC | 	wrlong	arg01, objptr
09800     04 E4 85 F1 | 	sub	objptr, #4
09804     F2 1E 02 FB | 	rdlong	local01, objptr
09808     69 00 00 FF 
0980c     50 E5 85 F1 | 	sub	objptr, ##54096
09810                 | LR__0740
09810     69 00 00 FF 
09814     54 E5 05 F1 | 	add	objptr, ##54100
09818     F2 FA 01 FB | 	rdlong	result1, objptr
0981c     69 00 00 FF 
09820     54 E5 85 F1 | 	sub	objptr, ##54100
09824     0F FB 51 F2 | 	cmps	result1, local01 wc
09828     98 00 90 3D |  if_ae	jmp	#LR__0741
0982c     69 00 00 FF 
09830     54 E5 05 F1 | 	add	objptr, ##54100
09834     F2 FA 01 FB | 	rdlong	result1, objptr
09838     FD 20 02 F6 | 	mov	local02, result1
0983c     01 20 66 F0 | 	shl	local02, #1
09840     FD 20 02 F1 | 	add	local02, result1
09844     02 20 66 F0 | 	shl	local02, #2
09848     03 00 00 FF 
0984c     04 E4 85 F1 | 	sub	objptr, ##1540
09850     F2 20 02 F1 | 	add	local02, objptr
09854     08 20 06 F1 | 	add	local02, #8
09858     10 21 02 FB | 	rdlong	local02, local02
0985c     10 21 E2 F8 | 	getbyte	local02, local02, #0
09860     02 20 66 F0 | 	shl	local02, #2
09864     04 00 00 FF 
09868     1C E4 85 F1 | 	sub	objptr, ##2076
0986c     F2 20 02 F1 | 	add	local02, objptr
09870     10 21 02 FB | 	rdlong	local02, local02
09874     10 23 02 F6 | 	mov	local03, local02
09878     13 20 46 F7 | 	zerox	local02, #19
0987c     14 22 46 F0 | 	shr	local03, #20
09880     02 22 66 F0 | 	shl	local03, #2
09884     ED 22 02 F1 | 	add	local03, __methods__
09888     11 23 02 FB | 	rdlong	local03, local03
0988c     62 00 00 FF 
09890     34 E5 85 F1 | 	sub	objptr, ##50484
09894     F2 24 02 F6 | 	mov	local04, objptr
09898     10 E5 01 F6 | 	mov	objptr, local02
0989c     2D 22 62 FD | 	call	local03
098a0     12 E5 01 F6 | 	mov	objptr, local04
098a4     69 00 00 FF 
098a8     54 E5 05 F1 | 	add	objptr, ##54100
098ac     F2 24 02 FB | 	rdlong	local04, objptr
098b0     01 24 06 F1 | 	add	local04, #1
098b4     F2 24 62 FC | 	wrlong	local04, objptr
098b8     69 00 00 FF 
098bc     54 E5 85 F1 | 	sub	objptr, ##54100
098c0     4C FF 9F FD | 	jmp	#LR__0740
098c4                 | LR__0741
098c4                 | ' return runptr2
098c4     79 00 00 FF 
098c8     88 E4 05 F1 | 	add	objptr, ##62088
098cc     F2 FA 01 FB | 	rdlong	result1, objptr
098d0     79 00 00 FF 
098d4     88 E4 85 F1 | 	sub	objptr, ##62088
098d8     A7 F0 03 F6 | 	mov	ptra, fp
098dc     B2 00 A0 FD | 	call	#popregs_
098e0                 | _execute_line_ret
098e0     2D 00 64 FD | 	ret
098e4                 | 
098e4                 | ' 
098e4                 | ' 
098e4                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
098e4                 | ' 
098e4                 | ' function pop() as expr_result
098e4                 | _pop
098e4                 | ' 
098e4                 | ' if stackpointer=0 then
098e4     62 00 00 FF 
098e8     2C E5 05 F1 | 	add	objptr, ##50476
098ec     F2 FA 09 FB | 	rdlong	result1, objptr wz
098f0     62 00 00 FF 
098f4     2C E5 85 F1 | 	sub	objptr, ##50476
098f8     FF 04 06 A6 |  if_e	mov	_var03, #255
098fc     18 00 06 A6 |  if_e	mov	_var01, #24
09900     68 00 90 AD |  if_e	jmp	#LR__0750
09904     62 00 00 FF 
09908     2C E5 05 F1 | 	add	objptr, ##50476
0990c     F2 FA 01 FB | 	rdlong	result1, objptr
09910     01 FA 85 F1 | 	sub	result1, #1
09914     F2 FA 61 FC | 	wrlong	result1, objptr
09918     FD FE 01 F6 | 	mov	result3, result1
0991c     01 FE 65 F0 | 	shl	result3, #1
09920     FD FE 01 F1 | 	add	result3, result1
09924     02 FE 65 F0 | 	shl	result3, #2
09928     0C 00 00 FF 
0992c     0C E4 85 F1 | 	sub	objptr, ##6156
09930     F2 FE 01 F1 | 	add	result3, objptr
09934     FF 00 02 FB | 	rdlong	_var01, result3
09938     04 FE 05 F1 | 	add	result3, #4
0993c     FF FE 01 FB | 	rdlong	result3, result3
09940     FD FC 01 F6 | 	mov	result2, result1
09944     01 FC 65 F0 | 	shl	result2, #1
09948     FD FC 01 F1 | 	add	result2, result1
0994c     02 FC 65 F0 | 	shl	result2, #2
09950     F2 FC 01 F1 | 	add	result2, objptr
09954     08 FC 05 F1 | 	add	result2, #8
09958     FE FA 01 FB | 	rdlong	result1, result2
0995c     FF 02 02 F6 | 	mov	_var02, result3
09960     FD 04 02 F6 | 	mov	_var03, result1
09964     56 00 00 FF 
09968     20 E5 85 F1 | 	sub	objptr, ##44320
0996c                 | LR__0750
0996c                 | ' return t1
0996c     01 FD 01 F6 | 	mov	result2, _var02
09970     02 FF 01 F6 | 	mov	result3, _var03
09974     00 FB 01 F6 | 	mov	result1, _var01
09978                 | _pop_ret
09978     2D 00 64 FD | 	ret
0997c                 | 
0997c                 | ' 
0997c                 | ' sub push(t1 as expr_result )
0997c                 | _push
0997c                 | ' 
0997c                 | ' 'print "In push: "; t1.result_type
0997c                 | ' 'print "In push: "; t1.result.uresult
0997c                 | ' 
0997c                 | ' if stackpointer<maxstack then 
0997c     62 00 00 FF 
09980     2C E5 05 F1 | 	add	objptr, ##50476
09984     F2 00 02 FB | 	rdlong	_var01, objptr
09988     62 00 00 FF 
0998c     2C E5 85 F1 | 	sub	objptr, ##50476
09990     01 00 00 FF 
09994     00 00 56 F2 | 	cmps	_var01, ##512 wc
09998     BC 00 90 3D |  if_ae	jmp	#LR__0760
0999c     09 01 02 FB | 	rdlong	_var01, arg01
099a0     04 12 06 F1 | 	add	arg01, #4
099a4     09 03 02 FB | 	rdlong	_var02, arg01
099a8     04 12 06 F1 | 	add	arg01, #4
099ac     09 13 02 FB | 	rdlong	arg01, arg01
099b0     62 00 00 FF 
099b4     2C E5 05 F1 | 	add	objptr, ##50476
099b8     F2 04 02 FB | 	rdlong	_var03, objptr
099bc     02 07 02 F6 | 	mov	_var04, _var03
099c0     01 06 66 F0 | 	shl	_var04, #1
099c4     02 07 02 F1 | 	add	_var04, _var03
099c8     02 06 66 F0 | 	shl	_var04, #2
099cc     0C 00 00 FF 
099d0     0C E4 85 F1 | 	sub	objptr, ##6156
099d4     F2 06 02 F1 | 	add	_var04, objptr
099d8     03 01 62 FC | 	wrlong	_var01, _var04
099dc     0C 00 00 FF 
099e0     0C E4 05 F1 | 	add	objptr, ##6156
099e4     F2 06 02 FB | 	rdlong	_var04, objptr
099e8     03 05 02 F6 | 	mov	_var03, _var04
099ec     01 04 66 F0 | 	shl	_var03, #1
099f0     03 05 02 F1 | 	add	_var03, _var04
099f4     02 04 66 F0 | 	shl	_var03, #2
099f8     0C 00 00 FF 
099fc     0C E4 85 F1 | 	sub	objptr, ##6156
09a00     F2 04 02 F1 | 	add	_var03, objptr
09a04     04 04 06 F1 | 	add	_var03, #4
09a08     02 03 62 FC | 	wrlong	_var02, _var03
09a0c     0C 00 00 FF 
09a10     0C E4 05 F1 | 	add	objptr, ##6156
09a14     F2 06 02 FB | 	rdlong	_var04, objptr
09a18     03 05 02 F6 | 	mov	_var03, _var04
09a1c     01 04 66 F0 | 	shl	_var03, #1
09a20     03 05 02 F1 | 	add	_var03, _var04
09a24     02 04 66 F0 | 	shl	_var03, #2
09a28     0C 00 00 FF 
09a2c     0C E4 85 F1 | 	sub	objptr, ##6156
09a30     F2 04 02 F1 | 	add	_var03, objptr
09a34     08 04 06 F1 | 	add	_var03, #8
09a38     02 13 62 FC | 	wrlong	arg01, _var03
09a3c     0C 00 00 FF 
09a40     0C E4 05 F1 | 	add	objptr, ##6156
09a44     F2 00 02 FB | 	rdlong	_var01, objptr
09a48     01 00 06 F1 | 	add	_var01, #1
09a4c     F2 00 62 FC | 	wrlong	_var01, objptr
09a50     62 00 00 FF 
09a54     2C E5 85 F1 | 	sub	objptr, ##50476
09a58                 | LR__0760
09a58                 | _push_ret
09a58     2D 00 64 FD | 	ret
09a5c                 | 
09a5c                 | ' 
09a5c                 | ' ' ------------------ push a variable on the stack as an independent operation called by execute_line 
09a5c                 | ' 
09a5c                 | ' sub do_push
09a5c                 | _do_push
09a5c                 | ' if stackpointer<maxstack then 
09a5c     62 00 00 FF 
09a60     2C E5 05 F1 | 	add	objptr, ##50476
09a64     F2 00 02 FB | 	rdlong	_var01, objptr
09a68     62 00 00 FF 
09a6c     2C E5 85 F1 | 	sub	objptr, ##50476
09a70     01 00 00 FF 
09a74     00 00 56 F2 | 	cmps	_var01, ##512 wc
09a78     F8 00 90 3D |  if_ae	jmp	#LR__0770
09a7c     69 00 00 FF 
09a80     54 E5 05 F1 | 	add	objptr, ##54100
09a84     F2 02 02 FB | 	rdlong	_var02, objptr
09a88     01 05 02 F6 | 	mov	_var03, _var02
09a8c     01 04 66 F0 | 	shl	_var03, #1
09a90     01 05 02 F1 | 	add	_var03, _var02
09a94     02 04 66 F0 | 	shl	_var03, #2
09a98     03 00 00 FF 
09a9c     04 E4 85 F1 | 	sub	objptr, ##1540
09aa0     F2 04 02 F1 | 	add	_var03, objptr
09aa4     02 01 02 FB | 	rdlong	_var01, _var03
09aa8     04 04 06 F1 | 	add	_var03, #4
09aac     02 07 02 FB | 	rdlong	_var04, _var03
09ab0     01 05 02 F6 | 	mov	_var03, _var02
09ab4     01 04 66 F0 | 	shl	_var03, #1
09ab8     01 05 02 F1 | 	add	_var03, _var02
09abc     02 04 66 F0 | 	shl	_var03, #2
09ac0     F2 04 02 F1 | 	add	_var03, objptr
09ac4     08 04 06 F1 | 	add	_var03, #8
09ac8     02 03 02 FB | 	rdlong	_var02, _var03
09acc     04 00 00 FF 
09ad0     24 E4 85 F1 | 	sub	objptr, ##2084
09ad4     F2 04 02 FB | 	rdlong	_var03, objptr
09ad8     02 09 02 F6 | 	mov	_var05, _var03
09adc     01 08 66 F0 | 	shl	_var05, #1
09ae0     02 09 02 F1 | 	add	_var05, _var03
09ae4     02 08 66 F0 | 	shl	_var05, #2
09ae8     0C 00 00 FF 
09aec     0C E4 85 F1 | 	sub	objptr, ##6156
09af0     F2 08 02 F1 | 	add	_var05, objptr
09af4     04 01 62 FC | 	wrlong	_var01, _var05
09af8     0C 00 00 FF 
09afc     0C E4 05 F1 | 	add	objptr, ##6156
09b00     F2 08 02 FB | 	rdlong	_var05, objptr
09b04     04 05 02 F6 | 	mov	_var03, _var05
09b08     01 04 66 F0 | 	shl	_var03, #1
09b0c     04 05 02 F1 | 	add	_var03, _var05
09b10     02 04 66 F0 | 	shl	_var03, #2
09b14     0C 00 00 FF 
09b18     0C E4 85 F1 | 	sub	objptr, ##6156
09b1c     F2 04 02 F1 | 	add	_var03, objptr
09b20     04 04 06 F1 | 	add	_var03, #4
09b24     02 07 62 FC | 	wrlong	_var04, _var03
09b28     0C 00 00 FF 
09b2c     0C E4 05 F1 | 	add	objptr, ##6156
09b30     F2 08 02 FB | 	rdlong	_var05, objptr
09b34     04 07 02 F6 | 	mov	_var04, _var05
09b38     01 06 66 F0 | 	shl	_var04, #1
09b3c     04 07 02 F1 | 	add	_var04, _var05
09b40     02 06 66 F0 | 	shl	_var04, #2
09b44     0C 00 00 FF 
09b48     0C E4 85 F1 | 	sub	objptr, ##6156
09b4c     F2 06 02 F1 | 	add	_var04, objptr
09b50     08 06 06 F1 | 	add	_var04, #8
09b54     03 03 62 FC | 	wrlong	_var02, _var04
09b58     0C 00 00 FF 
09b5c     0C E4 05 F1 | 	add	objptr, ##6156
09b60     F2 00 02 FB | 	rdlong	_var01, objptr
09b64     01 00 06 F1 | 	add	_var01, #1
09b68     F2 00 62 FC | 	wrlong	_var01, objptr
09b6c     62 00 00 FF 
09b70     2C E5 85 F1 | 	sub	objptr, ##50476
09b74                 | LR__0770
09b74                 | _do_push_ret
09b74     2D 00 64 FD | 	ret
09b78                 | 
09b78                 | ' 
09b78                 | '   
09b78                 | ' sub csave_block(address as ulong)
09b78                 | _csave_block
09b78     09 01 02 F6 | 	mov	_var01, arg01
09b7c                 | ' 
09b7c                 | ' ' let it be 1k blocks=256 longs=8 kbits=32 k samples
09b7c                 | ' ' we enter it at the state of playing 1 kHz header tone
09b7c                 | ' 
09b7c                 | ' for i=0 to 63 step 2
09b7c     00 02 06 F6 | 	mov	_var02, #0
09b80                 | LR__0780
09b80                 | '   do: loop until lpeek(base+32*7)>32768
09b80     56 00 00 FF 
09b84     E4 E4 05 F1 | 	add	objptr, ##44260
09b88     97 0C 48 FB | 	callpa	#(@LR__0782-@LR__0781)>>2,fcache_load_ptr_
09b8c                 | LR__0781
09b8c     F2 12 02 FB | 	rdlong	arg01, objptr
09b90     E0 12 06 F1 | 	add	arg01, #224
09b94     09 FB 01 FB | 	rdlong	result1, arg01
09b98     40 00 00 FF 
09b9c     01 FA 55 F2 | 	cmps	result1, ##32769 wc
09ba0     E8 FF 9F CD |  if_b	jmp	#LR__0781
09ba4                 | LR__0782
09ba4     00 13 02 F6 | 	mov	arg01, _var01
09ba8     01 05 02 F6 | 	mov	_var03, _var02
09bac     02 04 66 F0 | 	shl	_var03, #2
09bb0     02 13 02 F1 | 	add	arg01, _var03
09bb4     09 07 02 FB | 	rdlong	_var04, arg01
09bb8     24 00 00 FF 
09bbc     C4 E4 05 F1 | 	add	objptr, ##18628
09bc0     F2 06 62 FC | 	wrlong	_var04, objptr
09bc4     7A 00 00 FF 
09bc8     A8 E5 85 F1 | 	sub	objptr, ##62888
09bcc                 | '   q=lpeek(address+4*i)
09bcc                 | '      for bit=0 to 31
09bcc     00 08 06 F6 | 	mov	_var05, #0
09bd0     97 84 48 FB | 	callpa	#(@LR__0787-@LR__0783)>>2,fcache_load_ptr_
09bd4                 | LR__0783
09bd4                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
09bd4     7A 00 00 FF 
09bd8     A8 E5 05 F1 | 	add	objptr, ##62888
09bdc     F2 06 02 FB | 	rdlong	_var04, objptr
09be0     7A 00 00 FF 
09be4     A8 E5 85 F1 | 	sub	objptr, ##62888
09be8     04 05 C2 F9 | 	decod	_var03, _var05
09bec     02 07 CA F7 | 	test	_var04, _var03 wz
09bf0     60 00 90 AD |  if_e	jmp	#LR__0784
09bf4     04 05 02 F6 | 	mov	_var03, _var05
09bf8     02 04 66 F0 | 	shl	_var03, #2
09bfc     76 00 00 FF 
09c00     80 E5 05 F1 | 	add	objptr, ##60800
09c04     F2 04 02 F1 | 	add	_var03, objptr
09c08     02 FF 48 FC | 	wrbyte	#127, _var03
09c0c     04 05 02 F6 | 	mov	_var03, _var05
09c10     02 04 66 F0 | 	shl	_var03, #2
09c14     01 04 06 F1 | 	add	_var03, #1
09c18     F2 04 02 F1 | 	add	_var03, objptr
09c1c     02 01 49 FC | 	wrbyte	#128, _var03
09c20     04 05 02 F6 | 	mov	_var03, _var05
09c24     02 04 66 F0 | 	shl	_var03, #2
09c28     02 04 06 F1 | 	add	_var03, #2
09c2c     F2 04 02 F1 | 	add	_var03, objptr
09c30     02 FF 48 FC | 	wrbyte	#127, _var03
09c34     04 05 02 F6 | 	mov	_var03, _var05
09c38     02 04 66 F0 | 	shl	_var03, #2
09c3c     03 04 06 F1 | 	add	_var03, #3
09c40     F2 04 02 F1 | 	add	_var03, objptr
09c44     02 01 49 FC | 	wrbyte	#128, _var03
09c48     76 00 00 FF 
09c4c     80 E5 85 F1 | 	sub	objptr, ##60800
09c50     5C 00 90 FD | 	jmp	#LR__0785
09c54                 | LR__0784
09c54     04 05 02 F6 | 	mov	_var03, _var05
09c58     02 04 66 F0 | 	shl	_var03, #2
09c5c     76 00 00 FF 
09c60     80 E5 05 F1 | 	add	objptr, ##60800
09c64     F2 04 02 F1 | 	add	_var03, objptr
09c68     02 01 49 FC | 	wrbyte	#128, _var03
09c6c     04 05 02 F6 | 	mov	_var03, _var05
09c70     02 04 66 F0 | 	shl	_var03, #2
09c74     01 04 06 F1 | 	add	_var03, #1
09c78     F2 04 02 F1 | 	add	_var03, objptr
09c7c     02 01 49 FC | 	wrbyte	#128, _var03
09c80     04 05 02 F6 | 	mov	_var03, _var05
09c84     02 04 66 F0 | 	shl	_var03, #2
09c88     02 04 06 F1 | 	add	_var03, #2
09c8c     F2 04 02 F1 | 	add	_var03, objptr
09c90     02 FF 48 FC | 	wrbyte	#127, _var03
09c94     04 05 02 F6 | 	mov	_var03, _var05
09c98     02 04 66 F0 | 	shl	_var03, #2
09c9c     03 04 06 F1 | 	add	_var03, #3
09ca0     F2 04 02 F1 | 	add	_var03, objptr
09ca4     02 FF 48 FC | 	wrbyte	#127, _var03
09ca8     76 00 00 FF 
09cac     80 E5 85 F1 | 	sub	objptr, ##60800
09cb0                 | LR__0785
09cb0     01 08 06 F1 | 	add	_var05, #1
09cb4     20 08 56 F2 | 	cmps	_var05, #32 wc
09cb8     18 FF 9F CD |  if_b	jmp	#LR__0783
09cbc                 | '   do: loop until lpeek(base+32*7)<32768
09cbc     56 00 00 FF 
09cc0     E4 E4 05 F1 | 	add	objptr, ##44260
09cc4                 | LR__0786
09cc4     F2 12 02 FB | 	rdlong	arg01, objptr
09cc8     E0 12 06 F1 | 	add	arg01, #224
09ccc     09 FB 01 FB | 	rdlong	result1, arg01
09cd0     40 00 00 FF 
09cd4     00 FA 55 F2 | 	cmps	result1, ##32768 wc
09cd8     E8 FF 9F 3D |  if_ae	jmp	#LR__0786
09cdc                 | LR__0787
09cdc     00 13 02 F6 | 	mov	arg01, _var01
09ce0     04 12 06 F1 | 	add	arg01, #4
09ce4     01 05 02 F6 | 	mov	_var03, _var02
09ce8     02 04 66 F0 | 	shl	_var03, #2
09cec     02 13 02 F1 | 	add	arg01, _var03
09cf0     09 07 02 FB | 	rdlong	_var04, arg01
09cf4     24 00 00 FF 
09cf8     C4 E4 05 F1 | 	add	objptr, ##18628
09cfc     F2 06 62 FC | 	wrlong	_var04, objptr
09d00     7A 00 00 FF 
09d04     A8 E5 85 F1 | 	sub	objptr, ##62888
09d08                 | '   q=lpeek(address+4+4*i)
09d08                 | '      for bit=0 to 31
09d08     00 08 06 F6 | 	mov	_var05, #0
09d0c     97 94 48 FB | 	callpa	#(@LR__0791-@LR__0788)>>2,fcache_load_ptr_
09d10                 | LR__0788
09d10                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
09d10     7A 00 00 FF 
09d14     A8 E5 05 F1 | 	add	objptr, ##62888
09d18     F2 06 02 FB | 	rdlong	_var04, objptr
09d1c     7A 00 00 FF 
09d20     A8 E5 85 F1 | 	sub	objptr, ##62888
09d24     04 05 C2 F9 | 	decod	_var03, _var05
09d28     02 07 CA F7 | 	test	_var04, _var03 wz
09d2c     80 00 90 AD |  if_e	jmp	#LR__0789
09d30     04 0B 02 F6 | 	mov	_var06, _var05
09d34     02 0A 66 F0 | 	shl	_var06, #2
09d38     80 04 06 F6 | 	mov	_var03, #128
09d3c     05 05 02 F1 | 	add	_var03, _var06
09d40     76 00 00 FF 
09d44     80 E5 05 F1 | 	add	objptr, ##60800
09d48     F2 04 02 F1 | 	add	_var03, objptr
09d4c     02 FF 48 FC | 	wrbyte	#127, _var03
09d50     04 0B 02 F6 | 	mov	_var06, _var05
09d54     02 0A 66 F0 | 	shl	_var06, #2
09d58     80 04 06 F6 | 	mov	_var03, #128
09d5c     05 05 02 F1 | 	add	_var03, _var06
09d60     01 04 06 F1 | 	add	_var03, #1
09d64     F2 04 02 F1 | 	add	_var03, objptr
09d68     02 01 49 FC | 	wrbyte	#128, _var03
09d6c     04 0B 02 F6 | 	mov	_var06, _var05
09d70     02 0A 66 F0 | 	shl	_var06, #2
09d74     80 04 06 F6 | 	mov	_var03, #128
09d78     05 05 02 F1 | 	add	_var03, _var06
09d7c     02 04 06 F1 | 	add	_var03, #2
09d80     F2 04 02 F1 | 	add	_var03, objptr
09d84     02 FF 48 FC | 	wrbyte	#127, _var03
09d88     04 0B 02 F6 | 	mov	_var06, _var05
09d8c     02 0A 66 F0 | 	shl	_var06, #2
09d90     80 04 06 F6 | 	mov	_var03, #128
09d94     05 05 02 F1 | 	add	_var03, _var06
09d98     03 04 06 F1 | 	add	_var03, #3
09d9c     F2 04 02 F1 | 	add	_var03, objptr
09da0     02 01 49 FC | 	wrbyte	#128, _var03
09da4     76 00 00 FF 
09da8     80 E5 85 F1 | 	sub	objptr, ##60800
09dac     7C 00 90 FD | 	jmp	#LR__0790
09db0                 | LR__0789
09db0     04 0B 02 F6 | 	mov	_var06, _var05
09db4     02 0A 66 F0 | 	shl	_var06, #2
09db8     80 04 06 F6 | 	mov	_var03, #128
09dbc     05 05 02 F1 | 	add	_var03, _var06
09dc0     76 00 00 FF 
09dc4     80 E5 05 F1 | 	add	objptr, ##60800
09dc8     F2 04 02 F1 | 	add	_var03, objptr
09dcc     02 01 49 FC | 	wrbyte	#128, _var03
09dd0     04 0B 02 F6 | 	mov	_var06, _var05
09dd4     02 0A 66 F0 | 	shl	_var06, #2
09dd8     80 04 06 F6 | 	mov	_var03, #128
09ddc     05 05 02 F1 | 	add	_var03, _var06
09de0     01 04 06 F1 | 	add	_var03, #1
09de4     F2 04 02 F1 | 	add	_var03, objptr
09de8     02 01 49 FC | 	wrbyte	#128, _var03
09dec     04 0B 02 F6 | 	mov	_var06, _var05
09df0     02 0A 66 F0 | 	shl	_var06, #2
09df4     80 04 06 F6 | 	mov	_var03, #128
09df8     05 05 02 F1 | 	add	_var03, _var06
09dfc     02 04 06 F1 | 	add	_var03, #2
09e00     F2 04 02 F1 | 	add	_var03, objptr
09e04     02 FF 48 FC | 	wrbyte	#127, _var03
09e08     04 0B 02 F6 | 	mov	_var06, _var05
09e0c     02 0A 66 F0 | 	shl	_var06, #2
09e10     80 04 06 F6 | 	mov	_var03, #128
09e14     05 05 02 F1 | 	add	_var03, _var06
09e18     03 04 06 F1 | 	add	_var03, #3
09e1c     F2 04 02 F1 | 	add	_var03, objptr
09e20     02 FF 48 FC | 	wrbyte	#127, _var03
09e24     76 00 00 FF 
09e28     80 E5 85 F1 | 	sub	objptr, ##60800
09e2c                 | LR__0790
09e2c     01 08 06 F1 | 	add	_var05, #1
09e30     20 08 56 F2 | 	cmps	_var05, #32 wc
09e34     D8 FE 9F CD |  if_b	jmp	#LR__0788
09e38                 | LR__0791
09e38     02 02 06 F1 | 	add	_var02, #2
09e3c     40 02 56 F2 | 	cmps	_var02, #64 wc
09e40     3C FD 9F CD |  if_b	jmp	#LR__0780
09e44                 | ' do: loop until lpeek(base+32*7)>32768
09e44     56 00 00 FF 
09e48     E4 E4 05 F1 | 	add	objptr, ##44260
09e4c     97 84 48 FB | 	callpa	#(@LR__0800-@LR__0792)>>2,fcache_load_ptr_
09e50                 | LR__0792
09e50     F2 12 02 FB | 	rdlong	arg01, objptr
09e54     E0 12 06 F1 | 	add	arg01, #224
09e58     09 FB 01 FB | 	rdlong	result1, arg01
09e5c     40 00 00 FF 
09e60     01 FA 55 F2 | 	cmps	result1, ##32769 wc
09e64     E8 FF 9F CD |  if_b	jmp	#LR__0792
09e68     56 00 00 FF 
09e6c     E4 E4 85 F1 | 	sub	objptr, ##44260
09e70                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
09e70     00 02 06 F6 | 	mov	_var02, #0
09e74                 | LR__0793
09e74     01 07 52 F6 | 	abs	_var04, _var02 wc
09e78     07 06 06 F5 | 	and	_var04, #7
09e7c     03 07 82 F6 | 	negc	_var04, _var04
09e80     04 06 56 F2 | 	cmps	_var04, #4 wc
09e84     20 00 90 3D |  if_ae	jmp	#LR__0794
09e88     01 0B 02 F6 | 	mov	_var06, _var02
09e8c     76 00 00 FF 
09e90     80 E5 05 F1 | 	add	objptr, ##60800
09e94     F2 0A 02 F1 | 	add	_var06, objptr
09e98     05 FF 48 FC | 	wrbyte	#127, _var06
09e9c     76 00 00 FF 
09ea0     80 E5 85 F1 | 	sub	objptr, ##60800
09ea4     1C 00 90 FD | 	jmp	#LR__0795
09ea8                 | LR__0794
09ea8     01 0B 02 F6 | 	mov	_var06, _var02
09eac     76 00 00 FF 
09eb0     80 E5 05 F1 | 	add	objptr, ##60800
09eb4     F2 0A 02 F1 | 	add	_var06, objptr
09eb8     05 01 49 FC | 	wrbyte	#128, _var06
09ebc     76 00 00 FF 
09ec0     80 E5 85 F1 | 	sub	objptr, ##60800
09ec4                 | LR__0795
09ec4     01 02 06 F1 | 	add	_var02, #1
09ec8     80 02 56 F2 | 	cmps	_var02, #128 wc
09ecc     A4 FF 9F CD |  if_b	jmp	#LR__0793
09ed0                 | ' 
09ed0                 | ' do: loop until lpeek(base+32*7)<32768
09ed0     56 00 00 FF 
09ed4     E4 E4 05 F1 | 	add	objptr, ##44260
09ed8                 | LR__0796
09ed8     F2 12 02 FB | 	rdlong	arg01, objptr
09edc     E0 12 06 F1 | 	add	arg01, #224
09ee0     09 FB 01 FB | 	rdlong	result1, arg01
09ee4     40 00 00 FF 
09ee8     00 FA 55 F2 | 	cmps	result1, ##32768 wc
09eec     E8 FF 9F 3D |  if_ae	jmp	#LR__0796
09ef0     56 00 00 FF 
09ef4     E4 E4 85 F1 | 	sub	objptr, ##44260
09ef8                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
09ef8     80 02 06 F6 | 	mov	_var02, #128
09efc                 | LR__0797
09efc     01 07 52 F6 | 	abs	_var04, _var02 wc
09f00     07 06 06 F5 | 	and	_var04, #7
09f04     03 07 82 F6 | 	negc	_var04, _var04
09f08     04 06 56 F2 | 	cmps	_var04, #4 wc
09f0c     20 00 90 3D |  if_ae	jmp	#LR__0798
09f10     01 0B 02 F6 | 	mov	_var06, _var02
09f14     76 00 00 FF 
09f18     80 E5 05 F1 | 	add	objptr, ##60800
09f1c     F2 0A 02 F1 | 	add	_var06, objptr
09f20     05 FF 48 FC | 	wrbyte	#127, _var06
09f24     76 00 00 FF 
09f28     80 E5 85 F1 | 	sub	objptr, ##60800
09f2c     1C 00 90 FD | 	jmp	#LR__0799
09f30                 | LR__0798
09f30     01 0B 02 F6 | 	mov	_var06, _var02
09f34     76 00 00 FF 
09f38     80 E5 05 F1 | 	add	objptr, ##60800
09f3c     F2 0A 02 F1 | 	add	_var06, objptr
09f40     05 01 49 FC | 	wrbyte	#128, _var06
09f44     76 00 00 FF 
09f48     80 E5 85 F1 | 	sub	objptr, ##60800
09f4c                 | LR__0799
09f4c     01 02 06 F1 | 	add	_var02, #1
09f50     00 03 16 F2 | 	cmp	_var02, #256 wc
09f54     A4 FF 9F CD |  if_b	jmp	#LR__0797
09f58                 | LR__0800
09f58                 | _csave_block_ret
09f58     2D 00 64 FD | 	ret
09f5c                 | 
09f5c                 | ' 
09f5c                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
09f5c                 | _csave_addtoblock
09f5c     04 4A 05 F6 | 	mov	COUNT_, #4
09f60     A8 00 A0 FD | 	call	#pushregs_
09f64     09 1F 02 F6 | 	mov	local01, arg01
09f68                 | ' 
09f68                 | ' 
09f68                 | ' if force=0 then
09f68     07 14 4E F7 | 	zerox	arg02, #7 wz
09f6c     78 00 90 5D |  if_ne	jmp	#LR__0810
09f70     79 00 00 FF 
09f74     80 E4 05 F1 | 	add	objptr, ##62080
09f78     F2 14 02 FB | 	rdlong	arg02, objptr
09f7c     02 00 00 FF 
09f80     00 E4 85 F1 | 	sub	objptr, ##1024
09f84     F2 14 02 F1 | 	add	arg02, objptr
09f88     0A 1F 42 FC | 	wrbyte	local01, arg02
09f8c     02 00 00 FF 
09f90     00 E4 05 F1 | 	add	objptr, ##1024
09f94     F2 1E 02 FB | 	rdlong	local01, objptr
09f98     01 1E 06 F1 | 	add	local01, #1
09f9c     F2 1E 62 FC | 	wrlong	local01, objptr
09fa0                 | '   block(blockptr)=d
09fa0                 | '   blockptr+=1
09fa0                 | '   if blockptr>=255 then
09fa0     79 00 00 FF 
09fa4     80 E4 85 F1 | 	sub	objptr, ##62080
09fa8     FF 1E 16 F2 | 	cmp	local01, #255 wc
09fac     E4 00 90 CD |  if_b	jmp	#LR__0814
09fb0     77 00 00 FF 
09fb4     80 E4 05 F1 | 	add	objptr, ##61056
09fb8     F2 12 02 F6 | 	mov	arg01, objptr
09fbc     77 00 00 FF 
09fc0     80 E4 85 F1 | 	sub	objptr, ##61056
09fc4     B0 FB BF FD | 	call	#_csave_block
09fc8     79 00 00 FF 
09fcc     80 E4 05 F1 | 	add	objptr, ##62080
09fd0     F2 00 68 FC | 	wrlong	#0, objptr
09fd4     79 00 00 FF 
09fd8     80 E4 85 F1 | 	sub	objptr, ##62080
09fdc     2C 13 06 F6 | 	mov	arg01, #300
09fe0     88 F0 B0 FD | 	call	#__system___waitms
09fe4     AC 00 90 FD | 	jmp	#LR__0814
09fe8                 | LR__0810
09fe8     79 00 00 FF 
09fec     80 E4 05 F1 | 	add	objptr, ##62080
09ff0     F2 20 02 FB | 	rdlong	local02, objptr
09ff4     02 00 00 FF 
09ff8     00 E4 85 F1 | 	sub	objptr, ##1024
09ffc     F2 20 02 F1 | 	add	local02, objptr
0a000     10 1F 42 FC | 	wrbyte	local01, local02
0a004                 | '   block(blockptr)=d
0a004                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
0a004     02 00 00 FF 
0a008     00 E4 05 F1 | 	add	objptr, ##1024
0a00c     F2 22 02 FB | 	rdlong	local03, objptr
0a010     79 00 00 FF 
0a014     80 E4 85 F1 | 	sub	objptr, ##62080
0a018     FF 22 16 F2 | 	cmp	local03, #255 wc
0a01c     40 00 90 3D |  if_ae	jmp	#LR__0813
0a020     79 00 00 FF 
0a024     80 E4 05 F1 | 	add	objptr, ##62080
0a028     F2 24 02 FB | 	rdlong	local04, objptr
0a02c     79 00 00 FF 
0a030     80 E4 85 F1 | 	sub	objptr, ##62080
0a034                 | LR__0811
0a034     00 25 56 F2 | 	cmps	local04, #256 wc
0a038     24 00 90 3D |  if_ae	jmp	#LR__0812
0a03c     12 21 02 F6 | 	mov	local02, local04
0a040     77 00 00 FF 
0a044     80 E4 05 F1 | 	add	objptr, ##61056
0a048     F2 20 02 F1 | 	add	local02, objptr
0a04c     10 01 48 FC | 	wrbyte	#0, local02
0a050     01 24 06 F1 | 	add	local04, #1
0a054     77 00 00 FF 
0a058     80 E4 85 F1 | 	sub	objptr, ##61056
0a05c     D4 FF 9F FD | 	jmp	#LR__0811
0a060                 | LR__0812
0a060                 | LR__0813
0a060     77 00 00 FF 
0a064     80 E4 05 F1 | 	add	objptr, ##61056
0a068     F2 12 02 F6 | 	mov	arg01, objptr
0a06c     77 00 00 FF 
0a070     80 E4 85 F1 | 	sub	objptr, ##61056
0a074     00 FB BF FD | 	call	#_csave_block
0a078     79 00 00 FF 
0a07c     80 E4 05 F1 | 	add	objptr, ##62080
0a080     F2 00 68 FC | 	wrlong	#0, objptr
0a084     79 00 00 FF 
0a088     80 E4 85 F1 | 	sub	objptr, ##62080
0a08c     2C 13 06 F6 | 	mov	arg01, #300
0a090     D8 EF B0 FD | 	call	#__system___waitms
0a094                 | LR__0814
0a094     A7 F0 03 F6 | 	mov	ptra, fp
0a098     B2 00 A0 FD | 	call	#popregs_
0a09c                 | _csave_addtoblock_ret
0a09c     2D 00 64 FD | 	ret
0a0a0                 | 
0a0a0                 | ' 
0a0a0                 | ' sub test_csave
0a0a0                 | _test_csave
0a0a0     04 4A 05 F6 | 	mov	COUNT_, #4
0a0a4     A8 00 A0 FD | 	call	#pushregs_
0a0a8     C0 F0 07 F1 | 	add	ptra, #192
0a0ac                 | ' 'dim fileheader,savestart, saveptr as ulong
0a0ac                 | ' 
0a0ac                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0a0ac     69 00 00 FF 
0a0b0     58 E5 05 F1 | 	add	objptr, ##54104
0a0b4     F2 12 02 FB | 	rdlong	arg01, objptr
0a0b8     69 00 00 FF 
0a0bc     58 E5 85 F1 | 	sub	objptr, ##54104
0a0c0     4C B9 B0 FD | 	call	#_pslpeek
0a0c4     FF FF 7F FF 
0a0c8     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0a0cc     0C 00 90 5D |  if_ne	jmp	#LR__0820
0a0d0     1B 12 06 F6 | 	mov	arg01, #27
0a0d4     7C B7 B0 FD | 	call	#_printerror
0a0d8     0C 03 90 FD | 	jmp	#LR__0832
0a0dc                 | LR__0820
0a0dc     04 F8 BF FD | 	call	#_pop
0a0e0     FF 1E 02 F6 | 	mov	local01, result3
0a0e4     90 4E 05 F1 | 	add	fp, #144
0a0e8     A7 FA 61 FC | 	wrlong	result1, fp
0a0ec     04 4E 05 F1 | 	add	fp, #4
0a0f0     A7 FC 61 FC | 	wrlong	result2, fp
0a0f4     04 4E 05 F1 | 	add	fp, #4
0a0f8     A7 1E 62 FC | 	wrlong	local01, fp
0a0fc                 | ' t1=pop()
0a0fc                 | ' if t1.result_type<>result_string then name$="noname.bas" else name$=t1.result.sresult
0a0fc     98 4E 85 F1 | 	sub	fp, #152
0a100     1F 1E 0E F2 | 	cmp	local01, #31 wz
0a104     43 01 00 5F 
0a108     7A 1F 06 56 |  if_ne	mov	local01, ##@LR__4557
0a10c     8C 4E 05 51 |  if_ne	add	fp, #140
0a110     A7 1E 62 5C |  if_ne	wrlong	local01, fp
0a114     8C 4E 85 51 |  if_ne	sub	fp, #140
0a118     90 4E 05 A1 |  if_e	add	fp, #144
0a11c     A7 1E 02 AB |  if_e	rdlong	local01, fp
0a120     04 4E 85 A1 |  if_e	sub	fp, #4
0a124     A7 1E 62 AC |  if_e	wrlong	local01, fp
0a128     8C 4E 85 A1 |  if_e	sub	fp, #140
0a12c                 | ' 
0a12c                 | ' ' prepare 1 kHz header wave
0a12c                 | ' 
0a12c                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0a12c     A7 00 68 FC | 	wrlong	#0, fp
0a130     97 34 48 FB | 	callpa	#(@LR__0824-@LR__0821)>>2,fcache_load_ptr_
0a134                 | LR__0821
0a134     A7 1E 02 FB | 	rdlong	local01, fp
0a138     0F 1F 52 F6 | 	abs	local01, local01 wc
0a13c     07 1E 06 F5 | 	and	local01, #7
0a140     0F 1F 82 F6 | 	negc	local01, local01
0a144     04 1E 56 F2 | 	cmps	local01, #4 wc
0a148     20 00 90 3D |  if_ae	jmp	#LR__0822
0a14c     A7 1E 02 FB | 	rdlong	local01, fp
0a150     76 00 00 FF 
0a154     80 E5 05 F1 | 	add	objptr, ##60800
0a158     F2 1E 02 F1 | 	add	local01, objptr
0a15c     0F FF 48 FC | 	wrbyte	#127, local01
0a160     76 00 00 FF 
0a164     80 E5 85 F1 | 	sub	objptr, ##60800
0a168     1C 00 90 FD | 	jmp	#LR__0823
0a16c                 | LR__0822
0a16c     A7 1E 02 FB | 	rdlong	local01, fp
0a170     76 00 00 FF 
0a174     80 E5 05 F1 | 	add	objptr, ##60800
0a178     F2 1E 02 F1 | 	add	local01, objptr
0a17c     0F 01 49 FC | 	wrbyte	#128, local01
0a180     76 00 00 FF 
0a184     80 E5 85 F1 | 	sub	objptr, ##60800
0a188                 | LR__0823
0a188     A7 1E 02 FB | 	rdlong	local01, fp
0a18c     01 1E 06 F1 | 	add	local01, #1
0a190     A7 1E 62 FC | 	wrlong	local01, fp
0a194     00 1F 56 F2 | 	cmps	local01, #256 wc
0a198     98 FF 9F CD |  if_b	jmp	#LR__0821
0a19c                 | LR__0824
0a19c     76 00 00 FF 
0a1a0     80 E5 05 F1 | 	add	objptr, ##60800
0a1a4     F2 14 02 F6 | 	mov	arg02, objptr
0a1a8     07 12 06 F6 | 	mov	arg01, #7
0a1ac     0F 00 00 FF 
0a1b0     40 17 06 F6 | 	mov	arg03, ##8000
0a1b4     0E 18 C6 F9 | 	decod	arg04, #14
0a1b8     00 1B 06 F6 | 	mov	arg05, #256
0a1bc     00 1C 06 F6 | 	mov	arg06, #0
0a1c0     6B 00 00 FF 
0a1c4     C0 E4 85 F1 | 	sub	objptr, ##54976
0a1c8     10 E8 B0 FD | 	call	#_Audio093b_8_sc_spin2_play8
0a1cc     0B 00 00 FF 
0a1d0     C0 E4 85 F1 | 	sub	objptr, ##5824
0a1d4     05 00 00 FF 
0a1d8     B8 13 06 F6 | 	mov	arg01, ##3000
0a1dc     8C EE B0 FD | 	call	#__system___waitms
0a1e0     79 00 00 FF 
0a1e4     80 E4 05 F1 | 	add	objptr, ##62080
0a1e8     F2 00 68 FC | 	wrlong	#0, objptr
0a1ec     79 00 00 FF 
0a1f0     80 E4 85 F1 | 	sub	objptr, ##62080
0a1f4     72 12 06 F6 | 	mov	arg01, #114
0a1f8     00 14 06 F6 | 	mov	arg02, #0
0a1fc     5C FD BF FD | 	call	#_csave_addtoblock
0a200     62 12 06 F6 | 	mov	arg01, #98
0a204     00 14 06 F6 | 	mov	arg02, #0
0a208     50 FD BF FD | 	call	#_csave_addtoblock
0a20c     61 12 06 F6 | 	mov	arg01, #97
0a210     00 14 06 F6 | 	mov	arg02, #0
0a214     44 FD BF FD | 	call	#_csave_addtoblock
0a218     0D 12 06 F6 | 	mov	arg01, #13
0a21c     00 14 06 F6 | 	mov	arg02, #0
0a220     38 FD BF FD | 	call	#_csave_addtoblock
0a224                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
0a224                 | ' waitms 3000 
0a224                 | ' 
0a224                 | ' blockptr=0
0a224                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
0a224                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
0a224     A7 02 68 FC | 	wrlong	#1, fp
0a228     8C 4E 05 F1 | 	add	fp, #140
0a22c     A7 12 02 FB | 	rdlong	arg01, fp
0a230     8C 4E 85 F1 | 	sub	fp, #140
0a234     09 21 02 F6 | 	mov	local02, arg01
0a238     97 06 48 FB | 	callpa	#(@LR__0826-@LR__0825)>>2,fcache_load_ptr_
0a23c                 | LR__0825
0a23c     10 FB C9 FA | 	rdbyte	result1, local02 wz
0a240     01 20 06 51 |  if_ne	add	local02, #1
0a244     F4 FF 9F 5D |  if_ne	jmp	#LR__0825
0a248                 | LR__0826
0a248     09 21 82 F1 | 	sub	local02, arg01
0a24c     10 23 02 F6 | 	mov	local03, local02
0a250     01 22 06 F1 | 	add	local03, #1
0a254                 | LR__0827
0a254     A7 1E 02 FB | 	rdlong	local01, fp
0a258     11 1F 52 F2 | 	cmps	local01, local03 wc
0a25c     34 00 90 3D |  if_ae	jmp	#LR__0828
0a260     8C 4E 05 F1 | 	add	fp, #140
0a264     A7 12 02 FB | 	rdlong	arg01, fp
0a268     8C 4E 85 F1 | 	sub	fp, #140
0a26c     A7 14 02 FB | 	rdlong	arg02, fp
0a270     01 16 06 F6 | 	mov	arg03, #1
0a274     28 0C B1 FD | 	call	#__system__Mid_S
0a278     FD 12 C2 FA | 	rdbyte	arg01, result1
0a27c     00 14 06 F6 | 	mov	arg02, #0
0a280     D8 FC BF FD | 	call	#_csave_addtoblock
0a284     A7 1E 02 FB | 	rdlong	local01, fp
0a288     01 1E 06 F1 | 	add	local01, #1
0a28c     A7 1E 62 FC | 	wrlong	local01, fp
0a290     C0 FF 9F FD | 	jmp	#LR__0827
0a294                 | LR__0828
0a294     00 12 06 F6 | 	mov	arg01, #0
0a298     00 14 06 F6 | 	mov	arg02, #0
0a29c     BC FC BF FD | 	call	#_csave_addtoblock
0a2a0     72 12 06 F6 | 	mov	arg01, #114
0a2a4     00 14 06 F6 | 	mov	arg02, #0
0a2a8     B0 FC BF FD | 	call	#_csave_addtoblock
0a2ac     62 12 06 F6 | 	mov	arg01, #98
0a2b0     00 14 06 F6 | 	mov	arg02, #0
0a2b4     A4 FC BF FD | 	call	#_csave_addtoblock
0a2b8     73 12 06 F6 | 	mov	arg01, #115
0a2bc     00 14 06 F6 | 	mov	arg02, #0
0a2c0     98 FC BF FD | 	call	#_csave_addtoblock
0a2c4     0D 12 06 F6 | 	mov	arg01, #13
0a2c8     00 14 06 F6 | 	mov	arg02, #0
0a2cc     8C FC BF FD | 	call	#_csave_addtoblock
0a2d0     69 00 00 FF 
0a2d4     58 E5 05 F1 | 	add	objptr, ##54104
0a2d8     F2 1E 02 FB | 	rdlong	local01, objptr
0a2dc     69 00 00 FF 
0a2e0     58 E5 85 F1 | 	sub	objptr, ##54104
0a2e4     9C 4E 05 F1 | 	add	fp, #156
0a2e8     A7 1E 62 FC | 	wrlong	local01, fp
0a2ec     9C 4E 85 F1 | 	sub	fp, #156
0a2f0                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
0a2f0                 | ' 
0a2f0                 | ' saveptr=programstart
0a2f0                 | ' do
0a2f0                 | LR__0829
0a2f0     A0 4E 05 F1 | 	add	fp, #160
0a2f4     A7 12 02 F6 | 	mov	arg01, fp
0a2f8     04 4E 85 F1 | 	sub	fp, #4
0a2fc     A7 14 02 FB | 	rdlong	arg02, fp
0a300     9C 4E 85 F1 | 	sub	fp, #156
0a304     18 16 06 F6 | 	mov	arg03, #24
0a308     0B 00 00 FF 
0a30c     C0 E4 05 F1 | 	add	objptr, ##5824
0a310     74 DF B0 FD | 	call	#_psram_spin2_read1
0a314     0C 4E 05 F1 | 	add	fp, #12
0a318     A7 12 02 F6 | 	mov	arg01, fp
0a31c     9C 4E 05 F1 | 	add	fp, #156
0a320     A7 14 02 FB | 	rdlong	arg02, fp
0a324     04 4E 05 F1 | 	add	fp, #4
0a328     A7 16 02 FB | 	rdlong	arg03, fp
0a32c     AC 4E 85 F1 | 	sub	fp, #172
0a330     54 DF B0 FD | 	call	#_psram_spin2_read1
0a334     0B 00 00 FF 
0a338     C0 E4 85 F1 | 	sub	objptr, ##5824
0a33c     AC 4E 05 F1 | 	add	fp, #172
0a340     A7 12 02 FB | 	rdlong	arg01, fp
0a344     AC 4E 85 F1 | 	sub	fp, #172
0a348     00 14 06 F6 | 	mov	arg02, #0
0a34c     0C FC BF FD | 	call	#_csave_addtoblock
0a350                 | '   psram.read1(varptr(header(0)),saveptr,24)
0a350                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
0a350                 | '   csave_addtoblock(header(3),0) ' that's always <255
0a350                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)    :next i
0a350     A7 00 68 FC | 	wrlong	#0, fp
0a354     AC 4E 05 F1 | 	add	fp, #172
0a358     A7 24 02 FB | 	rdlong	local04, fp
0a35c     AC 4E 85 F1 | 	sub	fp, #172
0a360                 | LR__0830
0a360     A7 1E 02 FB | 	rdlong	local01, fp
0a364     12 1F 52 F2 | 	cmps	local01, local04 wc
0a368     2C 00 90 3D |  if_ae	jmp	#LR__0831
0a36c     A7 22 02 FB | 	rdlong	local03, fp
0a370     0C 4E 05 F1 | 	add	fp, #12
0a374     A7 22 02 F1 | 	add	local03, fp
0a378     11 13 C2 FA | 	rdbyte	arg01, local03
0a37c     00 14 06 F6 | 	mov	arg02, #0
0a380     0C 4E 85 F1 | 	sub	fp, #12
0a384     D4 FB BF FD | 	call	#_csave_addtoblock
0a388     A7 22 02 FB | 	rdlong	local03, fp
0a38c     01 22 06 F1 | 	add	local03, #1
0a390     A7 22 62 FC | 	wrlong	local03, fp
0a394     C8 FF 9F FD | 	jmp	#LR__0830
0a398                 | LR__0831
0a398     B4 4E 05 F1 | 	add	fp, #180
0a39c     A7 1E 02 FB | 	rdlong	local01, fp
0a3a0     18 4E 85 F1 | 	sub	fp, #24
0a3a4     A7 1E 62 FC | 	wrlong	local01, fp
0a3a8     18 4E 05 F1 | 	add	fp, #24
0a3ac     A7 1E 02 FB | 	rdlong	local01, fp
0a3b0     B4 4E 85 F1 | 	sub	fp, #180
0a3b4     FF FF 3F FF 
0a3b8     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0a3bc     30 FF 9F 5D |  if_ne	jmp	#LR__0829
0a3c0     00 12 06 F6 | 	mov	arg01, #0
0a3c4     01 14 06 F6 | 	mov	arg02, #1
0a3c8     90 FB BF FD | 	call	#_csave_addtoblock
0a3cc     56 00 00 FF 
0a3d0     E4 E4 05 F1 | 	add	objptr, ##44260
0a3d4     F2 12 02 FB | 	rdlong	arg01, objptr
0a3d8     56 00 00 FF 
0a3dc     E4 E4 85 F1 | 	sub	objptr, ##44260
0a3e0     F4 12 06 F1 | 	add	arg01, #244
0a3e4     09 01 58 FC | 	wrword	#0, arg01
0a3e8                 | LR__0832
0a3e8     A7 F0 03 F6 | 	mov	ptra, fp
0a3ec     B2 00 A0 FD | 	call	#popregs_
0a3f0                 | _test_csave_ret
0a3f0     2D 00 64 FD | 	ret
0a3f4                 | 
0a3f4                 | ' 
0a3f4                 | ' ' ----------------- Save the program
0a3f4                 | ' 
0a3f4                 | ' sub do_save                           ''' <------------------------ TODO vartables has to be saved too! Or maybe o
0a3f4                 | _do_save
0a3f4     02 4A 05 F6 | 	mov	COUNT_, #2
0a3f8     A8 00 A0 FD | 	call	#pushregs_
0a3fc     01 00 00 FF 
0a400     BC F0 07 F1 | 	add	ptra, ##700
0a404     01 00 00 FF 
0a408     10 4E 05 F1 | 	add	fp, ##528
0a40c     B1 B0 86 FF 
0a410     A7 E4 68 FC | 	wrlong	##224486002, fp
0a414     01 00 00 FF 
0a418     10 4E 85 F1 | 	sub	fp, ##528
0a41c     C4 F4 BF FD | 	call	#_pop
0a420     FF 16 02 F6 | 	mov	arg03, result3
0a424     A7 FA 61 FC | 	wrlong	result1, fp
0a428     04 4E 05 F1 | 	add	fp, #4
0a42c     A7 FC 61 FC | 	wrlong	result2, fp
0a430     04 4E 05 F1 | 	add	fp, #4
0a434     A7 16 62 FC | 	wrlong	arg03, fp
0a438     08 4E 85 F1 | 	sub	fp, #8
0a43c                 | ' 
0a43c                 | ' fileheader=$0D616272' rba+ver'
0a43c                 | ' 
0a43c                 | ' t1=pop() 
0a43c                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0a43c     69 00 00 FF 
0a440     58 E5 05 F1 | 	add	objptr, ##54104
0a444     F2 12 02 FB | 	rdlong	arg01, objptr
0a448     69 00 00 FF 
0a44c     58 E5 85 F1 | 	sub	objptr, ##54104
0a450     BC B5 B0 FD | 	call	#_pslpeek
0a454     FF FF 7F FF 
0a458     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0a45c     0C 00 90 5D |  if_ne	jmp	#LR__0840
0a460     1B 12 06 F6 | 	mov	arg01, #27
0a464     EC B3 B0 FD | 	call	#_printerror
0a468     68 02 90 FD | 	jmp	#LR__0846
0a46c                 | LR__0840
0a46c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0a46c     08 4E 05 F1 | 	add	fp, #8
0a470     A7 16 02 FB | 	rdlong	arg03, fp
0a474     08 4E 85 F1 | 	sub	fp, #8
0a478     2B 16 0E F2 | 	cmp	arg03, #43 wz
0a47c     18 00 90 5D |  if_ne	jmp	#LR__0841
0a480     A7 12 02 FB | 	rdlong	arg01, fp
0a484     98 25 B0 FD | 	call	#_convertstring
0a488     A7 FA 61 FC | 	wrlong	result1, fp
0a48c     08 4E 05 F1 | 	add	fp, #8
0a490     A7 3E 68 FC | 	wrlong	#31, fp
0a494     08 4E 85 F1 | 	sub	fp, #8
0a498                 | LR__0841
0a498                 | ' if t1.result_type=result_string then
0a498     08 4E 05 F1 | 	add	fp, #8
0a49c     A7 1E 02 FB | 	rdlong	local01, fp
0a4a0     08 4E 85 F1 | 	sub	fp, #8
0a4a4     1F 1E 0E F2 | 	cmp	local01, #31 wz
0a4a8     28 02 90 5D |  if_ne	jmp	#LR__0845
0a4ac                 | '   if t1.result.sresult="" then t1.result.sresult="noname.bas"
0a4ac     A7 12 02 FB | 	rdlong	arg01, fp
0a4b0     43 01 00 FF 
0a4b4     85 15 06 F6 | 	mov	arg02, ##@LR__4558
0a4b8     E4 E8 B0 FD | 	call	#__system___string_cmp
0a4bc     00 FA 0D F2 | 	cmp	result1, #0 wz
0a4c0     43 01 00 AF 
0a4c4     86 1F 06 A6 |  if_e	mov	local01, ##@LR__4559
0a4c8     A7 1E 62 AC |  if_e	wrlong	local01, fp
0a4cc                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
0a4cc     09 12 06 F6 | 	mov	arg01, #9
0a4d0     D8 37 B1 FD | 	call	#__system__close
0a4d4     09 1E 06 F6 | 	mov	local01, #9
0a4d8     71 00 00 FF 
0a4dc     68 E5 05 F1 | 	add	objptr, ##58216
0a4e0     F2 12 02 FB | 	rdlong	arg01, objptr
0a4e4     71 00 00 FF 
0a4e8     68 E5 85 F1 | 	sub	objptr, ##58216
0a4ec     43 01 00 FF 
0a4f0     91 15 06 F6 | 	mov	arg02, ##@LR__4560
0a4f4     DC E8 B0 FD | 	call	#__system___string_concat
0a4f8     FD 12 02 F6 | 	mov	arg01, result1
0a4fc     A7 14 02 FB | 	rdlong	arg02, fp
0a500     D0 E8 B0 FD | 	call	#__system___string_concat
0a504     FD 14 02 F6 | 	mov	arg02, result1
0a508     0F 13 02 F6 | 	mov	arg01, local01
0a50c     0D 16 06 F6 | 	mov	arg03, #13
0a510     68 F4 B0 FD | 	call	#__system___basic_open_string
0a514     01 00 00 FF 
0a518     0C 4E 05 F1 | 	add	fp, ##524
0a51c     A7 0A 68 FC | 	wrlong	#5, fp
0a520     69 00 00 FF 
0a524     58 E5 05 F1 | 	add	objptr, ##54104
0a528     F2 1E 02 FB | 	rdlong	local01, objptr
0a52c     69 00 00 FF 
0a530     58 E5 85 F1 | 	sub	objptr, ##54104
0a534     0C 4E 05 F1 | 	add	fp, #12
0a538     A7 1E 62 FC | 	wrlong	local01, fp
0a53c     01 00 00 FF 
0a540     18 4E 85 F1 | 	sub	fp, ##536
0a544                 | ' '  put #9,1,fileheader,1
0a544                 | '   i=5
0a544                 | '   saveptr=programstart
0a544                 | '   do
0a544                 | LR__0842
0a544     01 00 00 FF 
0a548     1C 4E 05 F1 | 	add	fp, ##540
0a54c     A7 12 02 F6 | 	mov	arg01, fp
0a550     04 4E 85 F1 | 	sub	fp, #4
0a554     A7 14 02 FB | 	rdlong	arg02, fp
0a558     01 00 00 FF 
0a55c     18 4E 85 F1 | 	sub	fp, ##536
0a560     18 16 06 F6 | 	mov	arg03, #24
0a564     0B 00 00 FF 
0a568     C0 E4 05 F1 | 	add	objptr, ##5824
0a56c     18 DD B0 FD | 	call	#_psram_spin2_read1
0a570     01 00 00 FF 
0a574     34 4E 05 F1 | 	add	fp, ##564
0a578     A7 12 02 F6 | 	mov	arg01, fp
0a57c     10 4E 85 F1 | 	sub	fp, #16
0a580     A7 14 02 FB | 	rdlong	arg02, fp
0a584     04 4E 05 F1 | 	add	fp, #4
0a588     A7 16 02 FB | 	rdlong	arg03, fp
0a58c     01 00 00 FF 
0a590     28 4E 85 F1 | 	sub	fp, ##552
0a594     F0 DC B0 FD | 	call	#_psram_spin2_read1
0a598     0B 00 00 FF 
0a59c     C0 E4 85 F1 | 	sub	objptr, ##5824
0a5a0     43 01 00 FF 
0a5a4     93 1F 06 F6 | 	mov	local01, ##@LR__4561
0a5a8     01 00 00 FF 
0a5ac     B4 4E 05 F1 | 	add	fp, ##692
0a5b0     A7 1E 62 FC | 	wrlong	local01, fp
0a5b4                 | '     psram.read1(varptr(header(0)),saveptr,24)
0a5b4                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
0a5b4                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
0a5b4     A8 4E 85 F1 | 	sub	fp, #168
0a5b8     A7 02 68 FC | 	wrlong	#1, fp
0a5bc     1C 4E 05 F1 | 	add	fp, #28
0a5c0     A7 20 02 FB | 	rdlong	local02, fp
0a5c4     01 00 00 FF 
0a5c8     28 4E 85 F1 | 	sub	fp, ##552
0a5cc     01 20 06 F1 | 	add	local02, #1
0a5d0                 | LR__0843
0a5d0     01 00 00 FF 
0a5d4     0C 4E 05 F1 | 	add	fp, ##524
0a5d8     A7 1E 02 FB | 	rdlong	local01, fp
0a5dc     01 00 00 FF 
0a5e0     0C 4E 85 F1 | 	sub	fp, ##524
0a5e4     10 1F 52 F2 | 	cmps	local01, local02 wc
0a5e8     64 00 90 3D |  if_ae	jmp	#LR__0844
0a5ec     01 00 00 FF 
0a5f0     B4 4E 05 F1 | 	add	fp, ##692
0a5f4     A7 1E 02 FB | 	rdlong	local01, fp
0a5f8     A8 4E 85 F1 | 	sub	fp, #168
0a5fc     A7 16 02 FB | 	rdlong	arg03, fp
0a600     01 16 86 F1 | 	sub	arg03, #1
0a604     28 4E 05 F1 | 	add	fp, #40
0a608     A7 16 02 F1 | 	add	arg03, fp
0a60c     0B 13 C2 FA | 	rdbyte	arg01, arg03
0a610     01 00 00 FF 
0a614     34 4E 85 F1 | 	sub	fp, ##564
0a618     30 09 B1 FD | 	call	#__system__Chr_S
0a61c     FD 14 02 F6 | 	mov	arg02, result1
0a620     0F 13 02 F6 | 	mov	arg01, local01
0a624     AC E7 B0 FD | 	call	#__system___string_concat
0a628     01 00 00 FF 
0a62c     B4 4E 05 F1 | 	add	fp, ##692
0a630     A7 FA 61 FC | 	wrlong	result1, fp
0a634     A8 4E 85 F1 | 	sub	fp, #168
0a638     A7 1E 02 FB | 	rdlong	local01, fp
0a63c     01 1E 06 F1 | 	add	local01, #1
0a640     A7 1E 62 FC | 	wrlong	local01, fp
0a644     01 00 00 FF 
0a648     0C 4E 85 F1 | 	sub	fp, ##524
0a64c     80 FF 9F FD | 	jmp	#LR__0843
0a650                 | LR__0844
0a650                 | '  '   put #9,i,header(3),1 : i+=4
0a650                 | '  '   put #9,i,linebuf(0),header(3) : i+=header(3)
0a650                 | '      print #9, saveline$
0a650     09 12 06 F6 | 	mov	arg01, #9
0a654     24 40 B1 FD | 	call	#__system___getiolock_0423
0a658     FD 12 02 F6 | 	mov	arg01, result1
0a65c     18 E7 B0 FD | 	call	#__system___lockmem
0a660     01 00 00 FF 
0a664     B4 4E 05 F1 | 	add	fp, ##692
0a668     A7 14 02 FB | 	rdlong	arg02, fp
0a66c     01 00 00 FF 
0a670     B4 4E 85 F1 | 	sub	fp, ##692
0a674     09 12 06 F6 | 	mov	arg01, #9
0a678     00 16 06 F6 | 	mov	arg03, #0
0a67c     EC F3 B0 FD | 	call	#__system___basic_print_string
0a680     09 12 06 F6 | 	mov	arg01, #9
0a684     0A 14 06 F6 | 	mov	arg02, #10
0a688     00 16 06 F6 | 	mov	arg03, #0
0a68c     84 F3 B0 FD | 	call	#__system___basic_print_char
0a690     09 12 06 F6 | 	mov	arg01, #9
0a694     E4 3F B1 FD | 	call	#__system___getiolock_0423
0a698     FD 00 68 FC | 	wrlong	#0, result1
0a69c     01 00 00 FF 
0a6a0     30 4E 05 F1 | 	add	fp, ##560
0a6a4     A7 1E 02 FB | 	rdlong	local01, fp
0a6a8     18 4E 85 F1 | 	sub	fp, #24
0a6ac     A7 1E 62 FC | 	wrlong	local01, fp
0a6b0     18 4E 05 F1 | 	add	fp, #24
0a6b4     A7 1E 02 FB | 	rdlong	local01, fp
0a6b8     01 00 00 FF 
0a6bc     30 4E 85 F1 | 	sub	fp, ##560
0a6c0     FF FF 3F FF 
0a6c4     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0a6c8     78 FE 9F 5D |  if_ne	jmp	#LR__0842
0a6cc                 | '   close #9  
0a6cc     09 12 06 F6 | 	mov	arg01, #9
0a6d0     D8 35 B1 FD | 	call	#__system__close
0a6d4                 | LR__0845
0a6d4                 | LR__0846
0a6d4     A7 F0 03 F6 | 	mov	ptra, fp
0a6d8     B2 00 A0 FD | 	call	#popregs_
0a6dc                 | _do_save_ret
0a6dc     2D 00 64 FD | 	ret
0a6e0                 | 
0a6e0                 | ' 
0a6e0                 | ' '----------------- Load the program
0a6e0                 | ' 'lo todo: errors while loading
0a6e0                 | ' sub do_load
0a6e0                 | _do_load
0a6e0     01 4A 05 F6 | 	mov	COUNT_, #1
0a6e4     A8 00 A0 FD | 	call	#pushregs_
0a6e8     A4 F0 07 F1 | 	add	ptra, #164
0a6ec     A0 4E 05 F1 | 	add	fp, #160
0a6f0     A7 12 02 F6 | 	mov	arg01, fp
0a6f4     80 4E 85 F1 | 	sub	fp, #128
0a6f8     A7 14 02 F6 | 	mov	arg02, fp
0a6fc     20 4E 85 F1 | 	sub	fp, #32
0a700     09 15 62 FC | 	wrlong	arg02, arg01
0a704     DC F1 BF FD | 	call	#_pop
0a708     FF 1A 02 F6 | 	mov	arg05, result3
0a70c     A7 FA 61 FC | 	wrlong	result1, fp
0a710     04 4E 05 F1 | 	add	fp, #4
0a714     A7 FC 61 FC | 	wrlong	result2, fp
0a718     04 4E 05 F1 | 	add	fp, #4
0a71c     A7 1A 62 FC | 	wrlong	arg05, fp
0a720                 | ' 
0a720                 | ' lpoke varptr(line2$),varptr(line2)
0a720                 | ' t1=pop() 
0a720                 | ' 'print "popped "; t1.result.uresult, t1.result_type
0a720                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
0a720     08 4E 85 F1 | 	sub	fp, #8
0a724     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0a728     18 00 90 5D |  if_ne	jmp	#LR__0850
0a72c     A7 12 02 FB | 	rdlong	arg01, fp
0a730     EC 22 B0 FD | 	call	#_convertstring
0a734     A7 FA 61 FC | 	wrlong	result1, fp
0a738     08 4E 05 F1 | 	add	fp, #8
0a73c     A7 3E 68 FC | 	wrlong	#31, fp
0a740     08 4E 85 F1 | 	sub	fp, #8
0a744                 | LR__0850
0a744                 | ' if t1.result_type=result_string then
0a744     08 4E 05 F1 | 	add	fp, #8
0a748     A7 1E 02 FB | 	rdlong	local01, fp
0a74c     08 4E 85 F1 | 	sub	fp, #8
0a750     1F 1E 0E F2 | 	cmp	local01, #31 wz
0a754     40 03 90 5D |  if_ne	jmp	#LR__0857
0a758     2C 1D B0 FD | 	call	#_do_new
0a75c                 | '   do_new
0a75c                 | '   if t1.result.sresult="" then t1.result.sresult="noname.bas" 
0a75c     A7 12 02 FB | 	rdlong	arg01, fp
0a760     43 01 00 FF 
0a764     94 15 06 F6 | 	mov	arg02, ##@LR__4562
0a768     34 E6 B0 FD | 	call	#__system___string_cmp
0a76c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a770     43 01 00 AF 
0a774     95 1F 06 A6 |  if_e	mov	local01, ##@LR__4563
0a778     A7 1E 62 AC |  if_e	wrlong	local01, fp
0a77c                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
0a77c     09 12 06 F6 | 	mov	arg01, #9
0a780     28 35 B1 FD | 	call	#__system__close
0a784     09 1E 06 F6 | 	mov	local01, #9
0a788     71 00 00 FF 
0a78c     68 E5 05 F1 | 	add	objptr, ##58216
0a790     F2 12 02 FB | 	rdlong	arg01, objptr
0a794     71 00 00 FF 
0a798     68 E5 85 F1 | 	sub	objptr, ##58216
0a79c     43 01 00 FF 
0a7a0     A0 15 06 F6 | 	mov	arg02, ##@LR__4564
0a7a4     2C E6 B0 FD | 	call	#__system___string_concat
0a7a8     FD 12 02 F6 | 	mov	arg01, result1
0a7ac     A7 14 02 FB | 	rdlong	arg02, fp
0a7b0     20 E6 B0 FD | 	call	#__system___string_concat
0a7b4     FD 14 02 F6 | 	mov	arg02, result1
0a7b8     0F 13 02 F6 | 	mov	arg01, local01
0a7bc     00 16 06 F6 | 	mov	arg03, #0
0a7c0     B8 F1 B0 FD | 	call	#__system___basic_open_string
0a7c4     20 E8 05 F1 | 	add	ptr___system__dat__, #32
0a7c8     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0a7cc     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
0a7d0     10 4E 05 F1 | 	add	fp, #16
0a7d4     A7 FA 61 FC | 	wrlong	result1, fp
0a7d8                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0a7d8     10 4E 85 F1 | 	sub	fp, #16
0a7dc     9C 00 90 AD |  if_e	jmp	#LR__0851
0a7e0     00 12 06 F6 | 	mov	arg01, #0
0a7e4     94 3E B1 FD | 	call	#__system___getiolock_0423
0a7e8     FD 12 02 F6 | 	mov	arg01, result1
0a7ec     88 E5 B0 FD | 	call	#__system___lockmem
0a7f0     43 01 00 FF 
0a7f4     A2 15 06 F6 | 	mov	arg02, ##@LR__4565
0a7f8     00 12 06 F6 | 	mov	arg01, #0
0a7fc     00 16 06 F6 | 	mov	arg03, #0
0a800     68 F2 B0 FD | 	call	#__system___basic_print_string
0a804     10 4E 05 F1 | 	add	fp, #16
0a808     A7 14 02 FB | 	rdlong	arg02, fp
0a80c     10 4E 85 F1 | 	sub	fp, #16
0a810     00 12 06 F6 | 	mov	arg01, #0
0a814     00 16 06 F6 | 	mov	arg03, #0
0a818     0A 18 06 F6 | 	mov	arg04, #10
0a81c     90 F2 B0 FD | 	call	#__system___basic_print_integer
0a820     43 01 00 FF 
0a824     B0 15 06 F6 | 	mov	arg02, ##@LR__4566
0a828     00 12 06 F6 | 	mov	arg01, #0
0a82c     00 16 06 F6 | 	mov	arg03, #0
0a830     38 F2 B0 FD | 	call	#__system___basic_print_string
0a834     10 4E 05 F1 | 	add	fp, #16
0a838     A7 12 02 FB | 	rdlong	arg01, fp
0a83c     10 4E 85 F1 | 	sub	fp, #16
0a840     34 0B B1 FD | 	call	#__system___strerror
0a844     FD 14 02 F6 | 	mov	arg02, result1
0a848     00 12 06 F6 | 	mov	arg01, #0
0a84c     00 16 06 F6 | 	mov	arg03, #0
0a850     18 F2 B0 FD | 	call	#__system___basic_print_string
0a854     00 12 06 F6 | 	mov	arg01, #0
0a858     0A 14 06 F6 | 	mov	arg02, #10
0a85c     00 16 06 F6 | 	mov	arg03, #0
0a860     B0 F1 B0 FD | 	call	#__system___basic_print_char
0a864     00 12 06 F6 | 	mov	arg01, #0
0a868     10 3E B1 FD | 	call	#__system___getiolock_0423
0a86c     FD 00 68 FC | 	wrlong	#0, result1
0a870     09 12 06 F6 | 	mov	arg01, #9
0a874     34 34 B1 FD | 	call	#__system__close
0a878     24 02 90 FD | 	jmp	#LR__0859
0a87c                 | LR__0851
0a87c     0C 4E 05 F1 | 	add	fp, #12
0a880     A7 0A 68 FC | 	wrlong	#5, fp
0a884                 | '   i=5
0a884                 | '   get #9,1,header,1
0a884     0C 4E 05 F1 | 	add	fp, #12
0a888     A7 16 02 F6 | 	mov	arg03, fp
0a88c     18 4E 85 F1 | 	sub	fp, #24
0a890     09 12 06 F6 | 	mov	arg01, #9
0a894     01 14 06 F6 | 	mov	arg02, #1
0a898     01 18 06 F6 | 	mov	arg04, #1
0a89c     04 1A 06 F6 | 	mov	arg05, #4
0a8a0     D8 F2 B0 FD | 	call	#__system___basic_get
0a8a4                 | '   
0a8a4                 | '   if header<>$0D616272 then 
0a8a4     18 4E 05 F1 | 	add	fp, #24
0a8a8     A7 1E 02 FB | 	rdlong	local01, fp
0a8ac     18 4E 85 F1 | 	sub	fp, #24
0a8b0     B1 B0 06 FF 
0a8b4     72 1E 0E F2 | 	cmp	local01, ##224486002 wz
0a8b8     F0 00 90 AD |  if_e	jmp	#LR__0854
0a8bc                 | '     close #9: open currentdir$+"/"+t1.result.sresult for input as #9
0a8bc     09 12 06 F6 | 	mov	arg01, #9
0a8c0     E8 33 B1 FD | 	call	#__system__close
0a8c4     09 1E 06 F6 | 	mov	local01, #9
0a8c8     71 00 00 FF 
0a8cc     68 E5 05 F1 | 	add	objptr, ##58216
0a8d0     F2 12 02 FB | 	rdlong	arg01, objptr
0a8d4     71 00 00 FF 
0a8d8     68 E5 85 F1 | 	sub	objptr, ##58216
0a8dc     43 01 00 FF 
0a8e0     B3 15 06 F6 | 	mov	arg02, ##@LR__4567
0a8e4     EC E4 B0 FD | 	call	#__system___string_concat
0a8e8     FD 12 02 F6 | 	mov	arg01, result1
0a8ec     A7 14 02 FB | 	rdlong	arg02, fp
0a8f0     E0 E4 B0 FD | 	call	#__system___string_concat
0a8f4     FD 14 02 F6 | 	mov	arg02, result1
0a8f8     0F 13 02 F6 | 	mov	arg01, local01
0a8fc     00 16 06 F6 | 	mov	arg03, #0
0a900     78 F0 B0 FD | 	call	#__system___basic_open_string
0a904                 | '     do
0a904                 | LR__0852
0a904     09 12 06 F6 | 	mov	arg01, #9
0a908     78 E6 B0 FD | 	call	#__system___basic_read_line
0a90c     56 00 00 FF 
0a910     F0 E4 05 F1 | 	add	objptr, ##44272
0a914     F2 FA 61 FC | 	wrlong	result1, objptr
0a918                 | '       if left$(line$,1) >="0" andalso left$(line$,1)<="9" then interpret
0a918     56 00 00 FF 
0a91c     F0 E4 85 F1 | 	sub	objptr, ##44272
0a920     FD 12 02 F6 | 	mov	arg01, result1
0a924     01 14 06 F6 | 	mov	arg02, #1
0a928     5C 04 B1 FD | 	call	#__system__Left_S
0a92c     FD 12 02 F6 | 	mov	arg01, result1
0a930     43 01 00 FF 
0a934     B5 15 06 F6 | 	mov	arg02, ##@LR__4568
0a938     64 E4 B0 FD | 	call	#__system___string_cmp
0a93c     00 FA 55 F2 | 	cmps	result1, #0 wc
0a940     34 00 90 CD |  if_b	jmp	#LR__0853
0a944     56 00 00 FF 
0a948     F0 E4 05 F1 | 	add	objptr, ##44272
0a94c     F2 12 02 FB | 	rdlong	arg01, objptr
0a950     56 00 00 FF 
0a954     F0 E4 85 F1 | 	sub	objptr, ##44272
0a958     01 14 06 F6 | 	mov	arg02, #1
0a95c     28 04 B1 FD | 	call	#__system__Left_S
0a960     FD 12 02 F6 | 	mov	arg01, result1
0a964     43 01 00 FF 
0a968     B7 15 06 F6 | 	mov	arg02, ##@LR__4569
0a96c     30 E4 B0 FD | 	call	#__system___string_cmp
0a970     01 FA 55 F2 | 	cmps	result1, #1 wc
0a974     A4 60 BF CD |  if_b	call	#_interpret
0a978                 | LR__0853
0a978     56 00 00 FF 
0a97c     F0 E4 05 F1 | 	add	objptr, ##44272
0a980     F2 12 02 FB | 	rdlong	arg01, objptr
0a984     56 00 00 FF 
0a988     F0 E4 85 F1 | 	sub	objptr, ##44272
0a98c     43 01 00 FF 
0a990     B9 15 06 F6 | 	mov	arg02, ##@LR__4570
0a994     08 E4 B0 FD | 	call	#__system___string_cmp
0a998     00 FA 0D F2 | 	cmp	result1, #0 wz
0a99c     64 FF 9F 5D |  if_ne	jmp	#LR__0852
0a9a0                 | '     close #9
0a9a0     09 12 06 F6 | 	mov	arg01, #9
0a9a4     04 33 B1 FD | 	call	#__system__close
0a9a8     F4 00 90 FD | 	jmp	#LR__0858
0a9ac                 | LR__0854
0a9ac                 | '   'printerror(26) : close #9 : return
0a9ac                 | '     do
0a9ac                 | LR__0855
0a9ac                 | '       get #9,i,linelength,1,amount : i+=4 : line2(linelength)=0
0a9ac     0C 4E 05 F1 | 	add	fp, #12
0a9b0     A7 14 02 FB | 	rdlong	arg02, fp
0a9b4     10 4E 05 F1 | 	add	fp, #16
0a9b8     A7 16 02 F6 | 	mov	arg03, fp
0a9bc     1C 4E 85 F1 | 	sub	fp, #28
0a9c0     09 12 06 F6 | 	mov	arg01, #9
0a9c4     01 18 06 F6 | 	mov	arg04, #1
0a9c8     04 1A 06 F6 | 	mov	arg05, #4
0a9cc     AC F1 B0 FD | 	call	#__system___basic_get
0a9d0     14 4E 05 F1 | 	add	fp, #20
0a9d4     A7 FA 61 FC | 	wrlong	result1, fp
0a9d8     08 4E 85 F1 | 	sub	fp, #8
0a9dc     A7 1E 02 FB | 	rdlong	local01, fp
0a9e0     04 1E 06 F1 | 	add	local01, #4
0a9e4     A7 1E 62 FC | 	wrlong	local01, fp
0a9e8     10 4E 05 F1 | 	add	fp, #16
0a9ec     A7 1E 02 FB | 	rdlong	local01, fp
0a9f0     04 4E 05 F1 | 	add	fp, #4
0a9f4     A7 1E 02 F1 | 	add	local01, fp
0a9f8     0F 01 48 FC | 	wrbyte	#0, local01
0a9fc                 | '       if amount=1 then  
0a9fc     0C 4E 85 F1 | 	sub	fp, #12
0aa00     A7 1E 02 FB | 	rdlong	local01, fp
0aa04     14 4E 85 F1 | 	sub	fp, #20
0aa08     01 1E 0E F2 | 	cmp	local01, #1 wz
0aa0c     68 00 90 5D |  if_ne	jmp	#LR__0856
0aa10                 | '         get #9,i,line2(0),linelength : i+=linelength
0aa10     0C 4E 05 F1 | 	add	fp, #12
0aa14     A7 14 02 FB | 	rdlong	arg02, fp
0aa18     14 4E 05 F1 | 	add	fp, #20
0aa1c     A7 16 02 F6 | 	mov	arg03, fp
0aa20     04 4E 85 F1 | 	sub	fp, #4
0aa24     A7 18 02 FB | 	rdlong	arg04, fp
0aa28     1C 4E 85 F1 | 	sub	fp, #28
0aa2c     09 12 06 F6 | 	mov	arg01, #9
0aa30     01 1A 06 F6 | 	mov	arg05, #1
0aa34     44 F1 B0 FD | 	call	#__system___basic_get
0aa38     0C 4E 05 F1 | 	add	fp, #12
0aa3c     A7 1E 02 FB | 	rdlong	local01, fp
0aa40     10 4E 05 F1 | 	add	fp, #16
0aa44     A7 1A 02 FB | 	rdlong	arg05, fp
0aa48     0D 1F 02 F1 | 	add	local01, arg05
0aa4c     10 4E 85 F1 | 	sub	fp, #16
0aa50     A7 1E 62 FC | 	wrlong	local01, fp
0aa54     94 4E 05 F1 | 	add	fp, #148
0aa58     A7 1E 02 FB | 	rdlong	local01, fp
0aa5c     A0 4E 85 F1 | 	sub	fp, #160
0aa60     56 00 00 FF 
0aa64     F0 E4 05 F1 | 	add	objptr, ##44272
0aa68     F2 1E 62 FC | 	wrlong	local01, objptr
0aa6c     56 00 00 FF 
0aa70     F0 E4 85 F1 | 	sub	objptr, ##44272
0aa74     A4 5F BF FD | 	call	#_interpret
0aa78                 | LR__0856
0aa78     14 4E 05 F1 | 	add	fp, #20
0aa7c     A7 1E 02 FB | 	rdlong	local01, fp
0aa80     14 4E 85 F1 | 	sub	fp, #20
0aa84     01 1E 56 F2 | 	cmps	local01, #1 wc
0aa88     20 FF 9F 3D |  if_ae	jmp	#LR__0855
0aa8c                 | '     close #9 
0aa8c     09 12 06 F6 | 	mov	arg01, #9
0aa90     18 32 B1 FD | 	call	#__system__close
0aa94     08 00 90 FD | 	jmp	#LR__0858
0aa98                 | LR__0857
0aa98     1E 12 06 F6 | 	mov	arg01, #30
0aa9c     B4 AD B0 FD | 	call	#_printerror
0aaa0                 | LR__0858
0aaa0                 | LR__0859
0aaa0     A7 F0 03 F6 | 	mov	ptra, fp
0aaa4     B2 00 A0 FD | 	call	#popregs_
0aaa8                 | _do_load_ret
0aaa8     2D 00 64 FD | 	ret
0aaac                 | 
0aaac                 | ' 
0aaac                 | ' '----------------- Run the program 
0aaac                 | ' 
0aaac                 | ' '' line header: linenum major, linenum minor, list start, list length, prev ptr, next ptr
0aaac                 | ' 
0aaac                 | ' sub do_run
0aaac                 | _do_run
0aaac     01 4A 05 F6 | 	mov	COUNT_, #1
0aab0     A8 00 A0 FD | 	call	#pushregs_
0aab4     69 00 00 FF 
0aab8     58 E5 05 F1 | 	add	objptr, ##54104
0aabc     F2 1C 02 FB | 	rdlong	arg06, objptr
0aac0     0F 00 00 FF 
0aac4     2C E5 05 F1 | 	add	objptr, ##7980
0aac8     F2 1C 62 FC | 	wrlong	arg06, objptr
0aacc     04 E4 05 F1 | 	add	objptr, #4
0aad0     F2 00 68 FC | 	wrlong	#0, objptr
0aad4     04 E4 05 F1 | 	add	objptr, #4
0aad8     FF FF FF FF 
0aadc     F2 FE 6B FC | 	wrlong	##-1, objptr
0aae0                 | ' if inrun>0 then 
0aae0     04 E4 05 F1 | 	add	objptr, #4
0aae4     F2 1C 02 FB | 	rdlong	arg06, objptr
0aae8     79 00 00 FF 
0aaec     90 E4 85 F1 | 	sub	objptr, ##62096
0aaf0     01 1C 16 F2 | 	cmp	arg06, #1 wc
0aaf4     30 00 90 CD |  if_b	jmp	#LR__0860
0aaf8     79 00 00 FF 
0aafc     94 E4 05 F1 | 	add	objptr, ##62100
0ab00     F2 12 02 F6 | 	mov	arg01, objptr
0ab04     10 E4 85 F1 | 	sub	objptr, #16
0ab08     F2 14 02 FB | 	rdlong	arg02, objptr
0ab0c     18 16 06 F6 | 	mov	arg03, #24
0ab10     6D 00 00 FF 
0ab14     C4 E5 85 F1 | 	sub	objptr, ##56260
0ab18     6C D7 B0 FD | 	call	#_psram_spin2_read1
0ab1c     0B 00 00 FF 
0ab20     C0 E4 85 F1 | 	sub	objptr, ##5824
0ab24                 | '   psram.read1(varptr(runheader),runptr,24)  
0ab24                 | '   return
0ab24     9C 02 90 FD | 	jmp	#LR__0866
0ab28                 | LR__0860
0ab28     79 00 00 FF 
0ab2c     90 E4 05 F1 | 	add	objptr, ##62096
0ab30     F2 02 68 FC | 	wrlong	#1, objptr
0ab34     04 E4 05 F1 | 	add	objptr, #4
0ab38     F2 12 02 F6 | 	mov	arg01, objptr
0ab3c     10 E4 85 F1 | 	sub	objptr, #16
0ab40     F2 14 02 FB | 	rdlong	arg02, objptr
0ab44     18 16 06 F6 | 	mov	arg03, #24
0ab48     6D 00 00 FF 
0ab4c     C4 E5 85 F1 | 	sub	objptr, ##56260
0ab50     34 D7 B0 FD | 	call	#_psram_spin2_read1
0ab54                 | ' inrun=1
0ab54                 | ' psram.read1(varptr(runheader),runptr,24) 
0ab54                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
0ab54     6D 00 00 FF 
0ab58     D4 E5 05 F1 | 	add	objptr, ##56276
0ab5c     F2 1E 02 FB | 	rdlong	local01, objptr
0ab60     79 00 00 FF 
0ab64     94 E4 85 F1 | 	sub	objptr, ##62100
0ab68     FF FF 7F FF 
0ab6c     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
0ab70     79 00 00 AF 
0ab74     90 E4 05 A1 |  if_e	add	objptr, ##62096
0ab78     F2 00 68 AC |  if_e	wrlong	#0, objptr
0ab7c     79 00 00 AF 
0ab80     90 E4 85 A1 |  if_e	sub	objptr, ##62096
0ab84     3C 02 90 AD |  if_e	jmp	#LR__0866
0ab88                 | ' do 
0ab88                 | LR__0861
0ab88                 | '   if runptr<>oldrunptr then
0ab88     79 00 00 FF 
0ab8c     84 E4 05 F1 | 	add	objptr, ##62084
0ab90     F2 1E 02 FB | 	rdlong	local01, objptr
0ab94     08 E4 05 F1 | 	add	objptr, #8
0ab98     F2 1C 02 FB | 	rdlong	arg06, objptr
0ab9c     79 00 00 FF 
0aba0     8C E4 85 F1 | 	sub	objptr, ##62092
0aba4     0E 1F 0A F2 | 	cmp	local01, arg06 wz
0aba8     CC 00 90 AD |  if_e	jmp	#LR__0862
0abac     79 00 00 FF 
0abb0     94 E4 05 F1 | 	add	objptr, ##62100
0abb4     F2 12 02 F6 | 	mov	arg01, objptr
0abb8     10 E4 85 F1 | 	sub	objptr, #16
0abbc     F2 14 02 FB | 	rdlong	arg02, objptr
0abc0     18 16 06 F6 | 	mov	arg03, #24
0abc4     6D 00 00 FF 
0abc8     C4 E5 85 F1 | 	sub	objptr, ##56260
0abcc     B8 D6 B0 FD | 	call	#_psram_spin2_read1
0abd0     5B 00 00 FF 
0abd4     90 E4 05 F1 | 	add	objptr, ##46736
0abd8     F2 12 02 F6 | 	mov	arg01, objptr
0abdc     12 00 00 FF 
0abe0     34 E5 05 F1 | 	add	objptr, ##9524
0abe4     F2 14 02 FB | 	rdlong	arg02, objptr
0abe8     14 00 00 FF 
0abec     4C E5 85 F1 | 	sub	objptr, ##10572
0abf0     F2 1E 02 FB | 	rdlong	local01, objptr
0abf4     01 1E 66 F0 | 	shl	local01, #1
0abf8     0F 15 02 F1 | 	add	arg02, local01
0abfc     14 00 00 FF 
0ac00     64 E5 05 F1 | 	add	objptr, ##10596
0ac04     F2 16 02 FB | 	rdlong	arg03, objptr
0ac08     18 E4 85 F1 | 	sub	objptr, #24
0ac0c     F2 1E 02 FB | 	rdlong	local01, objptr
0ac10     0F 17 82 F1 | 	sub	arg03, local01
0ac14     6D 00 00 FF 
0ac18     C4 E5 85 F1 | 	sub	objptr, ##56260
0ac1c     68 D6 B0 FD | 	call	#_psram_spin2_read1
0ac20     6D 00 00 FF 
0ac24     DC E5 05 F1 | 	add	objptr, ##56284
0ac28     F2 1E 02 FB | 	rdlong	local01, objptr
0ac2c     18 E4 85 F1 | 	sub	objptr, #24
0ac30     F2 1C 02 FB | 	rdlong	arg06, objptr
0ac34     0E 1F 82 F1 | 	sub	local01, arg06
0ac38     14 00 00 FF 
0ac3c     4C E5 85 F1 | 	sub	objptr, ##10572
0ac40     F2 1C 02 FB | 	rdlong	arg06, objptr
0ac44     0E 1F 12 FD | 	qdiv	local01, arg06
0ac48     05 00 00 FF 
0ac4c     18 E4 05 F1 | 	add	objptr, ##2584
0ac50     18 1E 62 FD | 	getqx	local01
0ac54     03 1E 86 F1 | 	sub	local01, #3
0ac58     F2 1E 62 FC | 	wrlong	local01, objptr
0ac5c     0F 00 00 FF 
0ac60     34 E5 05 F1 | 	add	objptr, ##7988
0ac64     F2 1E 02 FB | 	rdlong	local01, objptr
0ac68     08 E4 05 F1 | 	add	objptr, #8
0ac6c     F2 1E 62 FC | 	wrlong	local01, objptr
0ac70     79 00 00 FF 
0ac74     8C E4 85 F1 | 	sub	objptr, ##62092
0ac78                 | LR__0862
0ac78     79 00 00 FF 
0ac7c     A8 E4 05 F1 | 	add	objptr, ##62120
0ac80     F2 1E 02 FB | 	rdlong	local01, objptr
0ac84     24 E4 85 F1 | 	sub	objptr, #36
0ac88     F2 1E 62 FC | 	wrlong	local01, objptr
0ac8c     04 E4 05 F1 | 	add	objptr, #4
0ac90     F2 12 02 FB | 	rdlong	arg01, objptr
0ac94     79 00 00 FF 
0ac98     88 E4 85 F1 | 	sub	objptr, ##62088
0ac9c     40 EB BF FD | 	call	#_execute_line
0aca0     79 00 00 FF 
0aca4     88 E4 05 F1 | 	add	objptr, ##62088
0aca8     F2 FA 61 FC | 	wrlong	result1, objptr
0acac     04 E4 85 F1 | 	sub	objptr, #4
0acb0     F2 1E 02 FB | 	rdlong	local01, objptr
0acb4     79 00 00 FF 
0acb8     84 E4 85 F1 | 	sub	objptr, ##62084
0acbc     FF FF 3F FF 
0acc0     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0acc4     0C 00 90 AD |  if_e	jmp	#LR__0863
0acc8     4C D9 B0 FD | 	call	#_usbnew_spin2_get_key
0accc     06 FB 0D F2 | 	cmp	result1, #262 wz
0acd0     B4 FE 9F 5D |  if_ne	jmp	#LR__0861
0acd4                 | LR__0863
0acd4                 | ' if runheader(5)<>$7FFF_FFFF then 
0acd4     79 00 00 FF 
0acd8     A8 E4 05 F1 | 	add	objptr, ##62120
0acdc     F2 1E 02 FB | 	rdlong	local01, objptr
0ace0     79 00 00 FF 
0ace4     A8 E4 85 F1 | 	sub	objptr, ##62120
0ace8     FF FF 3F FF 
0acec     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0acf0     BC 00 90 AD |  if_e	jmp	#LR__0865
0acf4                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,16384,spl_len)  
0acf4     79 00 00 FF 
0acf8     B4 E4 05 F1 | 	add	objptr, ##62132
0acfc     F2 1E 02 FB | 	rdlong	local01, objptr
0ad00     79 00 00 FF 
0ad04     B4 E4 85 F1 | 	sub	objptr, ##62132
0ad08     01 1E 0E F2 | 	cmp	local01, #1 wz
0ad0c     3C 00 90 5D |  if_ne	jmp	#LR__0864
0ad10     7A 00 00 FF 
0ad14     58 E5 05 F1 | 	add	objptr, ##62808
0ad18     F2 14 02 FB | 	rdlong	arg02, objptr
0ad1c     04 E4 85 F1 | 	sub	objptr, #4
0ad20     F2 1A 02 FB | 	rdlong	arg05, objptr
0ad24     07 12 06 F6 | 	mov	arg01, #7
0ad28     56 00 00 FF 
0ad2c     44 16 06 F6 | 	mov	arg03, ##44100
0ad30     0E 18 C6 F9 | 	decod	arg04, #14
0ad34     01 1C 66 F6 | 	neg	arg06, #1
0ad38     6F 00 00 FF 
0ad3c     94 E4 85 F1 | 	sub	objptr, ##56980
0ad40     FC DB B0 FD | 	call	#_Audio093b_8_sc_spin2_play
0ad44     0B 00 00 FF 
0ad48     C0 E4 85 F1 | 	sub	objptr, ##5824
0ad4c                 | LR__0864
0ad4c                 | '   print "Stopped at line ";runheader(0)
0ad4c     00 12 06 F6 | 	mov	arg01, #0
0ad50     28 39 B1 FD | 	call	#__system___getiolock_0423
0ad54     FD 12 02 F6 | 	mov	arg01, result1
0ad58     1C E0 B0 FD | 	call	#__system___lockmem
0ad5c     43 01 00 FF 
0ad60     BA 15 06 F6 | 	mov	arg02, ##@LR__4571
0ad64     00 12 06 F6 | 	mov	arg01, #0
0ad68     00 16 06 F6 | 	mov	arg03, #0
0ad6c     FC EC B0 FD | 	call	#__system___basic_print_string
0ad70     79 00 00 FF 
0ad74     94 E4 05 F1 | 	add	objptr, ##62100
0ad78     F2 14 02 FB | 	rdlong	arg02, objptr
0ad7c     79 00 00 FF 
0ad80     94 E4 85 F1 | 	sub	objptr, ##62100
0ad84     00 12 06 F6 | 	mov	arg01, #0
0ad88     00 16 06 F6 | 	mov	arg03, #0
0ad8c     0A 18 06 F6 | 	mov	arg04, #10
0ad90     5C ED B0 FD | 	call	#__system___basic_print_unsigned
0ad94     00 12 06 F6 | 	mov	arg01, #0
0ad98     0A 14 06 F6 | 	mov	arg02, #10
0ad9c     00 16 06 F6 | 	mov	arg03, #0
0ada0     70 EC B0 FD | 	call	#__system___basic_print_char
0ada4     00 12 06 F6 | 	mov	arg01, #0
0ada8     D0 38 B1 FD | 	call	#__system___getiolock_0423
0adac     FD 00 68 FC | 	wrlong	#0, result1
0adb0                 | LR__0865
0adb0     79 00 00 FF 
0adb4     90 E4 05 F1 | 	add	objptr, ##62096
0adb8     F2 00 68 FC | 	wrlong	#0, objptr
0adbc     79 00 00 FF 
0adc0     90 E4 85 F1 | 	sub	objptr, ##62096
0adc4                 | LR__0866
0adc4     A7 F0 03 F6 | 	mov	ptra, fp
0adc8     B2 00 A0 FD | 	call	#popregs_
0adcc                 | _do_run_ret
0adcc     2D 00 64 FD | 	ret
0add0                 | 
0add0                 | ' 
0add0                 | ' sub do_defenv
0add0                 | _do_defenv
0add0     05 4A 05 F6 | 	mov	COUNT_, #5
0add4     A8 00 A0 FD | 	call	#pushregs_
0add8     84 F0 07 F1 | 	add	ptra, #132
0addc     69 00 00 FF 
0ade0     54 E5 05 F1 | 	add	objptr, ##54100
0ade4     F2 1A 02 FB | 	rdlong	arg05, objptr
0ade8     0D 19 02 F6 | 	mov	arg04, arg05
0adec     01 18 66 F0 | 	shl	arg04, #1
0adf0     0D 19 02 F1 | 	add	arg04, arg05
0adf4     02 18 66 F0 | 	shl	arg04, #2
0adf8     03 00 00 FF 
0adfc     04 E4 85 F1 | 	sub	objptr, ##1540
0ae00     F2 18 02 F1 | 	add	arg04, objptr
0ae04     0C 1B 02 FB | 	rdlong	arg05, arg04
0ae08     A7 1A 62 FC | 	wrlong	arg05, fp
0ae0c                 | ' 
0ae0c                 | ' numpar=compiledline(lineptr_e).result.uresult
0ae0c                 | ' 
0ae0c                 | ' 
0ae0c                 | ' ' defenv channel, string - tries to load from /media/h a h2 file from PC-Softsynth
0ae0c                 | ' ' defenv channel, l1,r1,l2,r2,l3,r3,l4,r4 - defines ADSR in Yamaha DX  style, except these are linear values
0ae0c                 | ' ' Every 5 ms added 
0ae0c                 | ' ' defsnd channel, a,d,s,r - defines ADSR as in SID 
0ae0c                 | ' 
0ae0c                 | ' 
0ae0c                 | ' if numpar<2 then return
0ae0c     02 1A 56 F2 | 	cmps	arg05, #2 wc
0ae10     66 00 00 FF 
0ae14     50 E5 85 F1 | 	sub	objptr, ##52560
0ae18     40 0A 90 CD |  if_b	jmp	#LR__0897
0ae1c                 | ' 
0ae1c                 | '  
0ae1c                 | ' if numpar=2 then
0ae1c     A7 1A 02 FB | 	rdlong	arg05, fp
0ae20     02 1A 0E F2 | 	cmp	arg05, #2 wz
0ae24     AC 04 90 5D |  if_ne	jmp	#LR__0880
0ae28     B8 EA BF FD | 	call	#_pop
0ae2c     FF 1A 02 F6 | 	mov	arg05, result3
0ae30     28 4E 05 F1 | 	add	fp, #40
0ae34     A7 FA 61 FC | 	wrlong	result1, fp
0ae38     04 4E 05 F1 | 	add	fp, #4
0ae3c     A7 FC 61 FC | 	wrlong	result2, fp
0ae40     04 4E 05 F1 | 	add	fp, #4
0ae44     A7 1A 62 FC | 	wrlong	arg05, fp
0ae48                 | '   t1=pop()
0ae48                 | '   if t1.result_type=result_string2 then 
0ae48     30 4E 85 F1 | 	sub	fp, #48
0ae4c     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0ae50     20 00 90 5D |  if_ne	jmp	#LR__0870
0ae54     28 4E 05 F1 | 	add	fp, #40
0ae58     A7 12 02 FB | 	rdlong	arg01, fp
0ae5c     28 4E 85 F1 | 	sub	fp, #40
0ae60     BC 1B B0 FD | 	call	#_convertstring
0ae64     34 4E 05 F1 | 	add	fp, #52
0ae68     A7 FA 61 FC | 	wrlong	result1, fp
0ae6c     34 4E 85 F1 | 	sub	fp, #52
0ae70     40 00 90 FD | 	jmp	#LR__0873
0ae74                 | LR__0870
0ae74     30 4E 05 F1 | 	add	fp, #48
0ae78     A7 1A 02 FB | 	rdlong	arg05, fp
0ae7c     30 4E 85 F1 | 	sub	fp, #48
0ae80     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0ae84     18 00 90 5D |  if_ne	jmp	#LR__0871
0ae88     28 4E 05 F1 | 	add	fp, #40
0ae8c     A7 1A 02 FB | 	rdlong	arg05, fp
0ae90     0C 4E 05 F1 | 	add	fp, #12
0ae94     A7 1A 62 FC | 	wrlong	arg05, fp
0ae98     34 4E 85 F1 | 	sub	fp, #52
0ae9c     14 00 90 FD | 	jmp	#LR__0872
0aea0                 | LR__0871
0aea0     43 01 00 FF 
0aea4     CB 1B 06 F6 | 	mov	arg05, ##@LR__4572
0aea8     34 4E 05 F1 | 	add	fp, #52
0aeac     A7 1A 62 FC | 	wrlong	arg05, fp
0aeb0     34 4E 85 F1 | 	sub	fp, #52
0aeb4                 | LR__0872
0aeb4                 | LR__0873
0aeb4                 | ' 
0aeb4                 | '     
0aeb4                 | '   if s<>"" then 
0aeb4     34 4E 05 F1 | 	add	fp, #52
0aeb8     A7 12 02 FB | 	rdlong	arg01, fp
0aebc     34 4E 85 F1 | 	sub	fp, #52
0aec0     43 01 00 FF 
0aec4     CC 15 06 F6 | 	mov	arg02, ##@LR__4573
0aec8     D4 DE B0 FD | 	call	#__system___string_cmp
0aecc     00 FA 0D F2 | 	cmp	result1, #0 wz
0aed0     9C 02 90 AD |  if_e	jmp	#LR__0878
0aed4     0C EA BF FD | 	call	#_pop
0aed8     FF 1A 02 F6 | 	mov	arg05, result3
0aedc     28 4E 05 F1 | 	add	fp, #40
0aee0     A7 FA 61 FC | 	wrlong	result1, fp
0aee4     04 4E 05 F1 | 	add	fp, #4
0aee8     A7 FC 61 FC | 	wrlong	result2, fp
0aeec     04 4E 05 F1 | 	add	fp, #4
0aef0     A7 1A 62 FC | 	wrlong	arg05, fp
0aef4     08 4E 85 F1 | 	sub	fp, #8
0aef8     A7 12 02 F6 | 	mov	arg01, fp
0aefc     28 4E 85 F1 | 	sub	fp, #40
0af00     50 5F B0 FD | 	call	#_converttoint
0af04     10 4E 05 F1 | 	add	fp, #16
0af08     A7 FA 61 FC | 	wrlong	result1, fp
0af0c     10 4E 85 F1 | 	sub	fp, #16
0af10                 | '     t1=pop()
0af10                 | '     channel=converttoint(t1) 
0af10                 | '     close #9 : open "/sd/media/h/"+s for input as #9
0af10     09 12 06 F6 | 	mov	arg01, #9
0af14     94 2D B1 FD | 	call	#__system__close
0af18     09 1E 06 F6 | 	mov	local01, #9
0af1c     43 01 00 FF 
0af20     CD 13 06 F6 | 	mov	arg01, ##@LR__4574
0af24     34 4E 05 F1 | 	add	fp, #52
0af28     A7 14 02 FB | 	rdlong	arg02, fp
0af2c     34 4E 85 F1 | 	sub	fp, #52
0af30     A0 DE B0 FD | 	call	#__system___string_concat
0af34     FD 14 02 F6 | 	mov	arg02, result1
0af38     0F 13 02 F6 | 	mov	arg01, local01
0af3c     00 16 06 F6 | 	mov	arg03, #0
0af40     38 EA B0 FD | 	call	#__system___basic_open_string
0af44     20 E8 05 F1 | 	add	ptr___system__dat__, #32
0af48     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0af4c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
0af50     7A 00 00 FF 
0af54     D4 E5 05 F1 | 	add	objptr, ##62932
0af58     F2 FA 61 FC | 	wrlong	result1, objptr
0af5c                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0af5c     7A 00 00 FF 
0af60     D4 E5 85 F1 | 	sub	objptr, ##62932
0af64     B0 00 90 AD |  if_e	jmp	#LR__0874
0af68     00 12 06 F6 | 	mov	arg01, #0
0af6c     0C 37 B1 FD | 	call	#__system___getiolock_0423
0af70     FD 12 02 F6 | 	mov	arg01, result1
0af74     00 DE B0 FD | 	call	#__system___lockmem
0af78     43 01 00 FF 
0af7c     DA 15 06 F6 | 	mov	arg02, ##@LR__4575
0af80     00 12 06 F6 | 	mov	arg01, #0
0af84     00 16 06 F6 | 	mov	arg03, #0
0af88     E0 EA B0 FD | 	call	#__system___basic_print_string
0af8c     7A 00 00 FF 
0af90     D4 E5 05 F1 | 	add	objptr, ##62932
0af94     F2 14 02 FB | 	rdlong	arg02, objptr
0af98     7A 00 00 FF 
0af9c     D4 E5 85 F1 | 	sub	objptr, ##62932
0afa0     00 12 06 F6 | 	mov	arg01, #0
0afa4     00 16 06 F6 | 	mov	arg03, #0
0afa8     0A 18 06 F6 | 	mov	arg04, #10
0afac     00 EB B0 FD | 	call	#__system___basic_print_integer
0afb0     43 01 00 FF 
0afb4     E8 15 06 F6 | 	mov	arg02, ##@LR__4576
0afb8     00 12 06 F6 | 	mov	arg01, #0
0afbc     00 16 06 F6 | 	mov	arg03, #0
0afc0     A8 EA B0 FD | 	call	#__system___basic_print_string
0afc4     00 1E 06 F6 | 	mov	local01, #0
0afc8     7A 00 00 FF 
0afcc     D4 E5 05 F1 | 	add	objptr, ##62932
0afd0     F2 12 02 FB | 	rdlong	arg01, objptr
0afd4     7A 00 00 FF 
0afd8     D4 E5 85 F1 | 	sub	objptr, ##62932
0afdc     98 03 B1 FD | 	call	#__system___strerror
0afe0     FD 14 02 F6 | 	mov	arg02, result1
0afe4     0F 13 02 F6 | 	mov	arg01, local01
0afe8     00 16 06 F6 | 	mov	arg03, #0
0afec     7C EA B0 FD | 	call	#__system___basic_print_string
0aff0     00 12 06 F6 | 	mov	arg01, #0
0aff4     0A 14 06 F6 | 	mov	arg02, #10
0aff8     00 16 06 F6 | 	mov	arg03, #0
0affc     14 EA B0 FD | 	call	#__system___basic_print_char
0b000     00 12 06 F6 | 	mov	arg01, #0
0b004     74 36 B1 FD | 	call	#__system___getiolock_0423
0b008     FD 00 68 FC | 	wrlong	#0, result1
0b00c     09 12 06 F6 | 	mov	arg01, #9
0b010     98 2C B1 FD | 	call	#__system__close
0b014     44 08 90 FD | 	jmp	#LR__0897
0b018                 | LR__0874
0b018                 | '     get #9,17,envbuf8(channel,0),256
0b018     10 4E 05 F1 | 	add	fp, #16
0b01c     A7 1A 02 FB | 	rdlong	arg05, fp
0b020     10 4E 85 F1 | 	sub	fp, #16
0b024     0D 17 02 F6 | 	mov	arg03, arg05
0b028     09 16 66 F0 | 	shl	arg03, #9
0b02c     0D 17 02 F1 | 	add	arg03, arg05
0b030     2C 00 00 FF 
0b034     CC E4 05 F1 | 	add	objptr, ##22732
0b038     F2 16 02 F1 | 	add	arg03, objptr
0b03c     09 12 06 F6 | 	mov	arg01, #9
0b040     11 14 06 F6 | 	mov	arg02, #17
0b044     00 19 06 F6 | 	mov	arg04, #256
0b048     01 1A 06 F6 | 	mov	arg05, #1
0b04c     2C 00 00 FF 
0b050     CC E4 85 F1 | 	sub	objptr, ##22732
0b054     24 EB B0 FD | 	call	#__system___basic_get
0b058                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0b058     04 4E 05 F1 | 	add	fp, #4
0b05c     A7 FE 69 FC | 	wrlong	#255, fp
0b060     04 4E 85 F1 | 	sub	fp, #4
0b064     2C 00 00 FF 
0b068     CC E4 05 F1 | 	add	objptr, ##22732
0b06c     97 34 48 FB | 	callpa	#(@LR__0876-@LR__0875)>>2,fcache_load_ptr_
0b070                 | LR__0875
0b070     10 4E 05 F1 | 	add	fp, #16
0b074     A7 1A 02 FB | 	rdlong	arg05, fp
0b078     0D 19 02 F6 | 	mov	arg04, arg05
0b07c     08 18 66 F0 | 	shl	arg04, #8
0b080     0D 19 02 F1 | 	add	arg04, arg05
0b084     01 18 66 F0 | 	shl	arg04, #1
0b088     F2 18 02 F1 | 	add	arg04, objptr
0b08c     0C 4E 85 F1 | 	sub	fp, #12
0b090     A7 16 02 FB | 	rdlong	arg03, fp
0b094     0B 15 02 F6 | 	mov	arg02, arg03
0b098     01 14 66 F0 | 	shl	arg02, #1
0b09c     0C 15 02 F1 | 	add	arg02, arg04
0b0a0     0D 19 02 F6 | 	mov	arg04, arg05
0b0a4     09 18 66 F0 | 	shl	arg04, #9
0b0a8     0D 19 02 F1 | 	add	arg04, arg05
0b0ac     F2 18 02 F1 | 	add	arg04, objptr
0b0b0     0C 17 02 F1 | 	add	arg03, arg04
0b0b4     0B 1B C2 FA | 	rdbyte	arg05, arg03
0b0b8     00 1B 06 FA | 	mul	arg05, #256
0b0bc     0A 1B 52 FC | 	wrword	arg05, arg02
0b0c0     A7 1A 02 FB | 	rdlong	arg05, fp
0b0c4     01 1A 86 F1 | 	sub	arg05, #1
0b0c8     A7 1A 62 FC | 	wrlong	arg05, fp
0b0cc     04 4E 85 F1 | 	sub	fp, #4
0b0d0     00 1A 56 F2 | 	cmps	arg05, #0 wc
0b0d4     98 FF 9F 3D |  if_ae	jmp	#LR__0875
0b0d8                 | LR__0876
0b0d8     2C 00 00 FF 
0b0dc     CC E4 85 F1 | 	sub	objptr, ##22732
0b0e0                 | '     close #9
0b0e0     09 12 06 F6 | 	mov	arg01, #9
0b0e4     C4 2B B1 FD | 	call	#__system__close
0b0e8                 | '                                                                       for i=0 to 255: v.putpixel(i,288-envbuf(channel,i)/400,40) : next i
0b0e8     04 4E 05 F1 | 	add	fp, #4
0b0ec     A7 00 68 FC | 	wrlong	#0, fp
0b0f0                 | LR__0877
0b0f0     A7 1E 02 FB | 	rdlong	local01, fp
0b0f4     0F 13 02 F6 | 	mov	arg01, local01
0b0f8     0C 4E 05 F1 | 	add	fp, #12
0b0fc     A7 1A 02 FB | 	rdlong	arg05, fp
0b100     0D 19 02 F6 | 	mov	arg04, arg05
0b104     08 18 66 F0 | 	shl	arg04, #8
0b108     0D 19 02 F1 | 	add	arg04, arg05
0b10c     01 18 66 F0 | 	shl	arg04, #1
0b110     2C 00 00 FF 
0b114     CC E4 05 F1 | 	add	objptr, ##22732
0b118     F2 18 02 F1 | 	add	arg04, objptr
0b11c     01 1E 66 F0 | 	shl	local01, #1
0b120     0C 1F 02 F1 | 	add	local01, arg04
0b124     0F 1F E2 FA | 	rdword	local01, local01
0b128     0F 1F 52 F6 | 	abs	local01, local01 wc
0b12c     90 1F 16 FD | 	qdiv	local01, #400
0b130     10 4E 85 F1 | 	sub	fp, #16
0b134     2C 00 00 FF 
0b138     CC E4 85 F1 | 	sub	objptr, ##22732
0b13c     20 15 06 F6 | 	mov	arg02, #288
0b140     28 16 06 F6 | 	mov	arg03, #40
0b144     18 1E 62 FD | 	getqx	local01
0b148     0F 15 A2 F3 | 	sumnc	arg02, local01
0b14c     D8 BC B0 FD | 	call	#_hg010b_spin2_putpixel
0b150     04 4E 05 F1 | 	add	fp, #4
0b154     A7 1E 02 FB | 	rdlong	local01, fp
0b158     01 1E 06 F1 | 	add	local01, #1
0b15c     A7 1E 62 FC | 	wrlong	local01, fp
0b160     00 1F 56 F2 | 	cmps	local01, #256 wc
0b164     88 FF 9F CD |  if_b	jmp	#LR__0877
0b168     04 4E 85 F1 | 	sub	fp, #4
0b16c                 | '     return
0b16c     EC 06 90 FD | 	jmp	#LR__0897
0b170                 | LR__0878
0b170     28 4E 05 F1 | 	add	fp, #40
0b174     A7 12 02 F6 | 	mov	arg01, fp
0b178     28 4E 85 F1 | 	sub	fp, #40
0b17c     D4 5C B0 FD | 	call	#_converttoint
0b180     FD 1E 02 F6 | 	mov	local01, result1
0b184     0C 4E 05 F1 | 	add	fp, #12
0b188     A7 1E 62 FC | 	wrlong	local01, fp
0b18c     0C 4E 85 F1 | 	sub	fp, #12
0b190                 | '   
0b190                 | '   par=converttoint(t1)  : print par
0b190     00 12 06 F6 | 	mov	arg01, #0
0b194     E4 34 B1 FD | 	call	#__system___getiolock_0423
0b198     FD 12 02 F6 | 	mov	arg01, result1
0b19c     D8 DB B0 FD | 	call	#__system___lockmem
0b1a0     0C 4E 05 F1 | 	add	fp, #12
0b1a4     A7 14 02 FB | 	rdlong	arg02, fp
0b1a8     0C 4E 85 F1 | 	sub	fp, #12
0b1ac     00 12 06 F6 | 	mov	arg01, #0
0b1b0     00 16 06 F6 | 	mov	arg03, #0
0b1b4     0A 18 06 F6 | 	mov	arg04, #10
0b1b8     F4 E8 B0 FD | 	call	#__system___basic_print_integer
0b1bc     00 12 06 F6 | 	mov	arg01, #0
0b1c0     0A 14 06 F6 | 	mov	arg02, #10
0b1c4     00 16 06 F6 | 	mov	arg03, #0
0b1c8     48 E8 B0 FD | 	call	#__system___basic_print_char
0b1cc     00 12 06 F6 | 	mov	arg01, #0
0b1d0     A8 34 B1 FD | 	call	#__system___getiolock_0423
0b1d4     FD 00 68 FC | 	wrlong	#0, result1
0b1d8     08 E7 BF FD | 	call	#_pop
0b1dc     FF 1E 02 F6 | 	mov	local01, result3
0b1e0     28 4E 05 F1 | 	add	fp, #40
0b1e4     A7 FA 61 FC | 	wrlong	result1, fp
0b1e8     04 4E 05 F1 | 	add	fp, #4
0b1ec     A7 FC 61 FC | 	wrlong	result2, fp
0b1f0     04 4E 05 F1 | 	add	fp, #4
0b1f4     A7 1E 62 FC | 	wrlong	local01, fp
0b1f8     08 4E 85 F1 | 	sub	fp, #8
0b1fc     A7 12 02 F6 | 	mov	arg01, fp
0b200     28 4E 85 F1 | 	sub	fp, #40
0b204     4C 5C B0 FD | 	call	#_converttoint
0b208     10 4E 05 F1 | 	add	fp, #16
0b20c     A7 FA 61 FC | 	wrlong	result1, fp
0b210                 | '   t1=pop()
0b210                 | '   channel=converttoint(t1)  
0b210                 | '   if par=0 then for i=0 to 1023: samplebuf(channel,i)=round(32600*sin(1.0/512*3.14159265359*i)) : next i
0b210     04 4E 85 F1 | 	sub	fp, #4
0b214     A7 1E 0A FB | 	rdlong	local01, fp wz
0b218     0C 4E 85 F1 | 	sub	fp, #12
0b21c     3C 06 90 5D |  if_ne	jmp	#LR__0897
0b220     04 4E 05 F1 | 	add	fp, #4
0b224     A7 00 68 FC | 	wrlong	#0, fp
0b228     04 4E 85 F1 | 	sub	fp, #4
0b22c                 | LR__0879
0b22c     10 4E 05 F1 | 	add	fp, #16
0b230     A7 1E 02 FB | 	rdlong	local01, fp
0b234     0B 1E 66 F0 | 	shl	local01, #11
0b238     0C 00 00 FF 
0b23c     CC E4 05 F1 | 	add	objptr, ##6348
0b240     F2 1E 02 F1 | 	add	local01, objptr
0b244     0C 4E 85 F1 | 	sub	fp, #12
0b248     A7 12 02 FB | 	rdlong	arg01, fp
0b24c     09 21 02 F6 | 	mov	local02, arg01
0b250     01 20 66 F0 | 	shl	local02, #1
0b254     0F 21 02 F1 | 	add	local02, local01
0b258     04 4E 85 F1 | 	sub	fp, #4
0b25c     0C 00 00 FF 
0b260     CC E4 85 F1 | 	sub	objptr, ##6348
0b264     09 13 52 F6 | 	abs	arg01, arg01 wc
0b268     1F 22 C6 C9 |  if_b	decod	local03, #31
0b26c     00 22 06 36 |  if_ae	mov	local03, #0
0b270     EC 01 B1 FD | 	call	#__system___float_fromuns
0b274     11 FB 61 F5 | 	xor	result1, local03
0b278     FD 14 02 F6 | 	mov	arg02, result1
0b27c     87 E4 1D FF 
0b280     DB 13 06 F6 | 	mov	arg01, ##1003032539
0b284     DC 05 B1 FD | 	call	#__system___float_mul
0b288     FD 12 02 F6 | 	mov	arg01, result1
0b28c     10 0F B1 FD | 	call	#__system____builtin_sinf
0b290     FD 14 02 F6 | 	mov	arg02, result1
0b294     58 7F 23 FF 
0b298     00 12 06 F6 | 	mov	arg01, ##1191096320
0b29c     C4 05 B1 FD | 	call	#__system___float_mul
0b2a0     FD 12 02 F6 | 	mov	arg01, result1
0b2a4     01 14 06 F6 | 	mov	arg02, #1
0b2a8     80 0A B1 FD | 	call	#__system___float_tointeger
0b2ac     10 FB 51 FC | 	wrword	result1, local02
0b2b0     04 4E 05 F1 | 	add	fp, #4
0b2b4     A7 20 02 FB | 	rdlong	local02, fp
0b2b8     01 20 06 F1 | 	add	local02, #1
0b2bc     A7 20 62 FC | 	wrlong	local02, fp
0b2c0     04 4E 85 F1 | 	sub	fp, #4
0b2c4     02 00 00 FF 
0b2c8     00 20 56 F2 | 	cmps	local02, ##1024 wc
0b2cc     5C FF 9F CD |  if_b	jmp	#LR__0879
0b2d0                 | '                                                                            '  for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0b2d0                 | '   return
0b2d0     88 05 90 FD | 	jmp	#LR__0897
0b2d4                 | LR__0880
0b2d4                 | ' for i=0 to 15 : harm(i)=0: next i  
0b2d4     04 4E 05 F1 | 	add	fp, #4
0b2d8     A7 00 68 FC | 	wrlong	#0, fp
0b2dc     97 16 48 FB | 	callpa	#(@LR__0882-@LR__0881)>>2,fcache_load_ptr_
0b2e0                 | LR__0881
0b2e0     A7 1E 02 FB | 	rdlong	local01, fp
0b2e4     02 1E 66 F0 | 	shl	local01, #2
0b2e8     34 4E 05 F1 | 	add	fp, #52
0b2ec     A7 1E 02 F1 | 	add	local01, fp
0b2f0     0F 01 68 FC | 	wrlong	#0, local01
0b2f4     34 4E 85 F1 | 	sub	fp, #52
0b2f8     A7 1E 02 FB | 	rdlong	local01, fp
0b2fc     01 1E 06 F1 | 	add	local01, #1
0b300     A7 1E 62 FC | 	wrlong	local01, fp
0b304     10 1E 56 F2 | 	cmps	local01, #16 wc
0b308     D4 FF 9F CD |  if_b	jmp	#LR__0881
0b30c                 | LR__0882
0b30c     04 4E 85 F1 | 	sub	fp, #4
0b310                 | ' for i=numpar to 2 step -1 
0b310     A7 1E 02 FB | 	rdlong	local01, fp
0b314     04 4E 05 F1 | 	add	fp, #4
0b318     A7 1E 62 FC | 	wrlong	local01, fp
0b31c     04 4E 85 F1 | 	sub	fp, #4
0b320                 | LR__0883
0b320     C0 E5 BF FD | 	call	#_pop
0b324     28 4E 05 F1 | 	add	fp, #40
0b328     A7 FA 61 FC | 	wrlong	result1, fp
0b32c     04 4E 05 F1 | 	add	fp, #4
0b330     A7 FC 61 FC | 	wrlong	result2, fp
0b334     04 4E 05 F1 | 	add	fp, #4
0b338     A7 FE 61 FC | 	wrlong	result3, fp
0b33c     2C 4E 85 F1 | 	sub	fp, #44
0b340     A7 1E 02 FB | 	rdlong	local01, fp
0b344     02 1E 86 F1 | 	sub	local01, #2
0b348     02 1E 66 F0 | 	shl	local01, #2
0b34c     34 4E 05 F1 | 	add	fp, #52
0b350     A7 1E 02 F1 | 	add	local01, fp
0b354     10 4E 85 F1 | 	sub	fp, #16
0b358     A7 12 02 F6 | 	mov	arg01, fp
0b35c     28 4E 85 F1 | 	sub	fp, #40
0b360     9C 5B B0 FD | 	call	#_converttofloat
0b364     0F FB 61 FC | 	wrlong	result1, local01
0b368     04 4E 05 F1 | 	add	fp, #4
0b36c     A7 1E 02 FB | 	rdlong	local01, fp
0b370     01 1E 86 F1 | 	sub	local01, #1
0b374     A7 1E 62 FC | 	wrlong	local01, fp
0b378     04 4E 85 F1 | 	sub	fp, #4
0b37c     02 1E 56 F2 | 	cmps	local01, #2 wc
0b380     9C FF 9F 3D |  if_ae	jmp	#LR__0883
0b384     5C E5 BF FD | 	call	#_pop
0b388     FF 1E 02 F6 | 	mov	local01, result3
0b38c     28 4E 05 F1 | 	add	fp, #40
0b390     A7 FA 61 FC | 	wrlong	result1, fp
0b394     04 4E 05 F1 | 	add	fp, #4
0b398     A7 FC 61 FC | 	wrlong	result2, fp
0b39c     04 4E 05 F1 | 	add	fp, #4
0b3a0     A7 1E 62 FC | 	wrlong	local01, fp
0b3a4     08 4E 85 F1 | 	sub	fp, #8
0b3a8     A7 12 02 F6 | 	mov	arg01, fp
0b3ac     28 4E 85 F1 | 	sub	fp, #40
0b3b0     A0 5A B0 FD | 	call	#_converttoint
0b3b4     FD 1E 02 F6 | 	mov	local01, result1
0b3b8     10 4E 05 F1 | 	add	fp, #16
0b3bc     A7 1E 62 FC | 	wrlong	local01, fp
0b3c0     10 4E 85 F1 | 	sub	fp, #16
0b3c4                 | ' t1=pop()
0b3c4                 | ' channel=converttoint(t1) : print channel
0b3c4     00 12 06 F6 | 	mov	arg01, #0
0b3c8     B0 32 B1 FD | 	call	#__system___getiolock_0423
0b3cc     FD 12 02 F6 | 	mov	arg01, result1
0b3d0     A4 D9 B0 FD | 	call	#__system___lockmem
0b3d4     10 4E 05 F1 | 	add	fp, #16
0b3d8     A7 14 02 FB | 	rdlong	arg02, fp
0b3dc     10 4E 85 F1 | 	sub	fp, #16
0b3e0     00 12 06 F6 | 	mov	arg01, #0
0b3e4     00 16 06 F6 | 	mov	arg03, #0
0b3e8     0A 18 06 F6 | 	mov	arg04, #10
0b3ec     C0 E6 B0 FD | 	call	#__system___basic_print_integer
0b3f0     00 12 06 F6 | 	mov	arg01, #0
0b3f4     0A 14 06 F6 | 	mov	arg02, #10
0b3f8     00 16 06 F6 | 	mov	arg03, #0
0b3fc     14 E6 B0 FD | 	call	#__system___basic_print_char
0b400     00 12 06 F6 | 	mov	arg01, #0
0b404     74 32 B1 FD | 	call	#__system___getiolock_0423
0b408     FD 00 68 FC | 	wrlong	#0, result1
0b40c                 | ' for j=0 to 1023: samplebuf(channel, i) =0 : next j
0b40c     08 4E 05 F1 | 	add	fp, #8
0b410     02 00 80 FF 
0b414     A7 00 68 FC | 	wrlong	##1024, fp
0b418     08 4E 85 F1 | 	sub	fp, #8
0b41c     0C 00 00 FF 
0b420     CC E4 05 F1 | 	add	objptr, ##6348
0b424     97 18 48 FB | 	callpa	#(@LR__0886-@LR__0884)>>2,fcache_load_ptr_
0b428                 | LR__0884
0b428     02 00 00 FF 
0b42c     00 14 DC FC | 	rep	@LR__0887, ##1024
0b430                 | LR__0885
0b430     10 4E 05 F1 | 	add	fp, #16
0b434     A7 20 02 FB | 	rdlong	local02, fp
0b438     0B 20 66 F0 | 	shl	local02, #11
0b43c     F2 20 02 F1 | 	add	local02, objptr
0b440     0C 4E 85 F1 | 	sub	fp, #12
0b444     A7 1E 02 FB | 	rdlong	local01, fp
0b448     04 4E 85 F1 | 	sub	fp, #4
0b44c     01 1E 66 F0 | 	shl	local01, #1
0b450     10 1F 02 F1 | 	add	local01, local02
0b454     0F 01 58 FC | 	wrword	#0, local01
0b458                 | LR__0886
0b458                 | LR__0887
0b458     0C 00 00 FF 
0b45c     CC E4 85 F1 | 	sub	objptr, ##6348
0b460     1C 4E 05 F1 | 	add	fp, #28
0b464     A7 00 68 FC | 	wrlong	#0, fp
0b468                 | ' max=0
0b468                 | ' if harm(0)<0 then
0b468     1C 4E 05 F1 | 	add	fp, #28
0b46c     A7 12 02 FB | 	rdlong	arg01, fp
0b470     38 4E 85 F1 | 	sub	fp, #56
0b474     00 14 06 F6 | 	mov	arg02, #0
0b478     01 16 06 F6 | 	mov	arg03, #1
0b47c     18 08 B1 FD | 	call	#__system___float_cmp
0b480     00 FA 55 F2 | 	cmps	result1, #0 wc
0b484     04 01 90 3D |  if_ae	jmp	#LR__0890
0b488     38 4E 05 F1 | 	add	fp, #56
0b48c     A7 FA 01 FB | 	rdlong	result1, fp
0b490     1F FA 05 F4 | 	bitl	result1, #31
0b494     24 4E 85 F1 | 	sub	fp, #36
0b498     A7 FA 61 FC | 	wrlong	result1, fp
0b49c     28 4E 05 F1 | 	add	fp, #40
0b4a0     A7 FA 01 FB | 	rdlong	result1, fp
0b4a4     1F FA 05 F4 | 	bitl	result1, #31
0b4a8     24 4E 85 F1 | 	sub	fp, #36
0b4ac     A7 FA 61 FC | 	wrlong	result1, fp
0b4b0     20 4E 05 F1 | 	add	fp, #32
0b4b4     00 C0 9F FF 
0b4b8     A7 00 68 FC | 	wrlong	##1065353216, fp
0b4bc     24 4E 85 F1 | 	sub	fp, #36
0b4c0     A7 1E 02 FB | 	rdlong	local01, fp
0b4c4     28 4E 05 F1 | 	add	fp, #40
0b4c8     A7 1E 62 FC | 	wrlong	local01, fp
0b4cc     24 4E 85 F1 | 	sub	fp, #36
0b4d0     A7 1E 02 FB | 	rdlong	local01, fp
0b4d4     28 4E 05 F1 | 	add	fp, #40
0b4d8     A7 1E 62 FC | 	wrlong	local01, fp
0b4dc                 | '   harm(0)=1
0b4dc                 | '   harm(1)=even
0b4dc                 | '   harm(2)=odd
0b4dc                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0b4dc     3C 4E 85 F1 | 	sub	fp, #60
0b4e0     A7 06 68 FC | 	wrlong	#3, fp
0b4e4                 | LR__0888
0b4e4     A7 1A 02 FB | 	rdlong	arg05, fp
0b4e8     0D 25 02 F6 | 	mov	local04, arg05
0b4ec     02 24 66 F0 | 	shl	local04, #2
0b4f0     34 4E 05 F1 | 	add	fp, #52
0b4f4     A7 24 02 F1 | 	add	local04, fp
0b4f8     02 1A 86 F1 | 	sub	arg05, #2
0b4fc     02 1A 66 F0 | 	shl	arg05, #2
0b500     A7 1A 02 F1 | 	add	arg05, fp
0b504     0D 13 02 FB | 	rdlong	arg01, arg05
0b508     24 4E 85 F1 | 	sub	fp, #36
0b50c     A7 14 02 FB | 	rdlong	arg02, fp
0b510     14 4E 85 F1 | 	sub	fp, #20
0b514     4C 03 B1 FD | 	call	#__system___float_mul
0b518     12 FB 61 FC | 	wrlong	result1, local04
0b51c     04 4E 05 F1 | 	add	fp, #4
0b520     A7 26 02 FB | 	rdlong	local05, fp
0b524     02 26 06 F1 | 	add	local05, #2
0b528     A7 26 62 FC | 	wrlong	local05, fp
0b52c     10 26 56 F2 | 	cmps	local05, #16 wc
0b530     B0 FF 9F CD |  if_b	jmp	#LR__0888
0b534                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0b534     A7 08 68 FC | 	wrlong	#4, fp
0b538                 | LR__0889
0b538     A7 26 02 FB | 	rdlong	local05, fp
0b53c     13 25 02 F6 | 	mov	local04, local05
0b540     02 24 66 F0 | 	shl	local04, #2
0b544     34 4E 05 F1 | 	add	fp, #52
0b548     A7 24 02 F1 | 	add	local04, fp
0b54c     02 26 86 F1 | 	sub	local05, #2
0b550     02 26 66 F0 | 	shl	local05, #2
0b554     A7 26 02 F1 | 	add	local05, fp
0b558     13 13 02 FB | 	rdlong	arg01, local05
0b55c     20 4E 85 F1 | 	sub	fp, #32
0b560     A7 14 02 FB | 	rdlong	arg02, fp
0b564     18 4E 85 F1 | 	sub	fp, #24
0b568     F8 02 B1 FD | 	call	#__system___float_mul
0b56c     12 FB 61 FC | 	wrlong	result1, local04
0b570     04 4E 05 F1 | 	add	fp, #4
0b574     A7 26 02 FB | 	rdlong	local05, fp
0b578     02 26 06 F1 | 	add	local05, #2
0b57c     A7 26 62 FC | 	wrlong	local05, fp
0b580     0F 26 56 F2 | 	cmps	local05, #15 wc
0b584     B0 FF 9F CD |  if_b	jmp	#LR__0889
0b588     04 4E 85 F1 | 	sub	fp, #4
0b58c                 | LR__0890
0b58c                 | ' if harm(0)>=0 then ' synthesize with harmonics
0b58c     38 4E 05 F1 | 	add	fp, #56
0b590     A7 12 02 FB | 	rdlong	arg01, fp
0b594     38 4E 85 F1 | 	sub	fp, #56
0b598     00 14 06 F6 | 	mov	arg02, #0
0b59c     01 16 66 F6 | 	neg	arg03, #1
0b5a0     F4 06 B1 FD | 	call	#__system___float_cmp
0b5a4     00 FA 55 F2 | 	cmps	result1, #0 wc
0b5a8     B0 02 90 CD |  if_b	jmp	#LR__0896
0b5ac                 | '   for i=0 to 1023
0b5ac     04 4E 05 F1 | 	add	fp, #4
0b5b0     A7 00 68 FC | 	wrlong	#0, fp
0b5b4     04 4E 85 F1 | 	sub	fp, #4
0b5b8                 | LR__0891
0b5b8     20 4E 05 F1 | 	add	fp, #32
0b5bc     A7 00 68 FC | 	wrlong	#0, fp
0b5c0                 | '     spl=0
0b5c0                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
0b5c0     18 4E 85 F1 | 	sub	fp, #24
0b5c4     A7 00 68 FC | 	wrlong	#0, fp
0b5c8                 | LR__0892
0b5c8     A7 24 02 FB | 	rdlong	local04, fp
0b5cc     02 24 66 F0 | 	shl	local04, #2
0b5d0     30 4E 05 F1 | 	add	fp, #48
0b5d4     A7 24 02 F1 | 	add	local04, fp
0b5d8     12 27 02 FB | 	rdlong	local05, local04
0b5dc     87 E4 1D FF 
0b5e0     DB 25 06 F6 | 	mov	local04, ##1003032539
0b5e4     34 4E 85 F1 | 	sub	fp, #52
0b5e8     A7 12 02 FB | 	rdlong	arg01, fp
0b5ec     04 4E 85 F1 | 	sub	fp, #4
0b5f0     09 13 52 F6 | 	abs	arg01, arg01 wc
0b5f4     1F 22 C6 C9 |  if_b	decod	local03, #31
0b5f8     00 22 06 36 |  if_ae	mov	local03, #0
0b5fc     60 FE B0 FD | 	call	#__system___float_fromuns
0b600     11 FB 61 F5 | 	xor	result1, local03
0b604     FD 14 02 F6 | 	mov	arg02, result1
0b608     12 13 02 F6 | 	mov	arg01, local04
0b60c     54 02 B1 FD | 	call	#__system___float_mul
0b610     FD 24 02 F6 | 	mov	local04, result1
0b614     08 4E 05 F1 | 	add	fp, #8
0b618     A7 12 02 FB | 	rdlong	arg01, fp
0b61c     08 4E 85 F1 | 	sub	fp, #8
0b620     01 12 06 F1 | 	add	arg01, #1
0b624     09 13 52 F6 | 	abs	arg01, arg01 wc
0b628     1F 22 C6 C9 |  if_b	decod	local03, #31
0b62c     00 22 06 36 |  if_ae	mov	local03, #0
0b630     2C FE B0 FD | 	call	#__system___float_fromuns
0b634     11 FB 61 F5 | 	xor	result1, local03
0b638     FD 14 02 F6 | 	mov	arg02, result1
0b63c     12 13 02 F6 | 	mov	arg01, local04
0b640     20 02 B1 FD | 	call	#__system___float_mul
0b644     FD 12 02 F6 | 	mov	arg01, result1
0b648     54 0B B1 FD | 	call	#__system____builtin_sinf
0b64c     FD 14 02 F6 | 	mov	arg02, result1
0b650     13 13 02 F6 | 	mov	arg01, local05
0b654     0C 02 B1 FD | 	call	#__system___float_mul
0b658     FD 14 02 F6 | 	mov	arg02, result1
0b65c     20 4E 05 F1 | 	add	fp, #32
0b660     A7 12 02 FB | 	rdlong	arg01, fp
0b664     20 4E 85 F1 | 	sub	fp, #32
0b668     28 FE B0 FD | 	call	#__system___float_add
0b66c     20 4E 05 F1 | 	add	fp, #32
0b670     A7 FA 61 FC | 	wrlong	result1, fp
0b674     18 4E 85 F1 | 	sub	fp, #24
0b678     A7 16 02 FB | 	rdlong	arg03, fp
0b67c     01 16 06 F1 | 	add	arg03, #1
0b680     A7 16 62 FC | 	wrlong	arg03, fp
0b684     10 16 56 F2 | 	cmps	arg03, #16 wc
0b688     3C FF 9F CD |  if_b	jmp	#LR__0892
0b68c                 | '     if abs(spl)>max then max=abs(spl)  ': print max 
0b68c     18 4E 05 F1 | 	add	fp, #24
0b690     A7 12 02 FB | 	rdlong	arg01, fp
0b694     1F 12 06 F4 | 	bitl	arg01, #31
0b698     04 4E 85 F1 | 	sub	fp, #4
0b69c     A7 14 02 FB | 	rdlong	arg02, fp
0b6a0     1C 4E 85 F1 | 	sub	fp, #28
0b6a4     01 16 66 F6 | 	neg	arg03, #1
0b6a8     EC 05 B1 FD | 	call	#__system___float_cmp
0b6ac     01 FA 55 F2 | 	cmps	result1, #1 wc
0b6b0     18 00 90 CD |  if_b	jmp	#LR__0893
0b6b4     20 4E 05 F1 | 	add	fp, #32
0b6b8     A7 FA 01 FB | 	rdlong	result1, fp
0b6bc     1F FA 05 F4 | 	bitl	result1, #31
0b6c0     04 4E 85 F1 | 	sub	fp, #4
0b6c4     A7 FA 61 FC | 	wrlong	result1, fp
0b6c8     1C 4E 85 F1 | 	sub	fp, #28
0b6cc                 | LR__0893
0b6cc     04 4E 05 F1 | 	add	fp, #4
0b6d0     A7 26 02 FB | 	rdlong	local05, fp
0b6d4     01 26 06 F1 | 	add	local05, #1
0b6d8     A7 26 62 FC | 	wrlong	local05, fp
0b6dc     04 4E 85 F1 | 	sub	fp, #4
0b6e0     02 00 00 FF 
0b6e4     00 26 56 F2 | 	cmps	local05, ##1024 wc
0b6e8     CC FE 9F CD |  if_b	jmp	#LR__0891
0b6ec                 | '   for i=0 to 1023
0b6ec     04 4E 05 F1 | 	add	fp, #4
0b6f0     A7 00 68 FC | 	wrlong	#0, fp
0b6f4     04 4E 85 F1 | 	sub	fp, #4
0b6f8                 | LR__0894
0b6f8     20 4E 05 F1 | 	add	fp, #32
0b6fc     A7 00 68 FC | 	wrlong	#0, fp
0b700                 | '     spl=0
0b700                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j ':' print spl
0b700     18 4E 85 F1 | 	sub	fp, #24
0b704     A7 00 68 FC | 	wrlong	#0, fp
0b708                 | LR__0895
0b708     A7 26 02 FB | 	rdlong	local05, fp
0b70c     02 26 66 F0 | 	shl	local05, #2
0b710     30 4E 05 F1 | 	add	fp, #48
0b714     A7 26 02 F1 | 	add	local05, fp
0b718     13 27 02 FB | 	rdlong	local05, local05
0b71c     1C 4E 85 F1 | 	sub	fp, #28
0b720     A7 14 02 FB | 	rdlong	arg02, fp
0b724     1C 4E 85 F1 | 	sub	fp, #28
0b728     58 7F 23 FF 
0b72c     00 12 06 F6 | 	mov	arg01, ##1191096320
0b730     34 03 B1 FD | 	call	#__system___float_div
0b734     FD 14 02 F6 | 	mov	arg02, result1
0b738     13 13 02 F6 | 	mov	arg01, local05
0b73c     24 01 B1 FD | 	call	#__system___float_mul
0b740     FD 26 02 F6 | 	mov	local05, result1
0b744     87 E4 1D FF 
0b748     DB 25 06 F6 | 	mov	local04, ##1003032539
0b74c     04 4E 05 F1 | 	add	fp, #4
0b750     A7 12 02 FB | 	rdlong	arg01, fp
0b754     04 4E 85 F1 | 	sub	fp, #4
0b758     09 13 52 F6 | 	abs	arg01, arg01 wc
0b75c     1F 22 C6 C9 |  if_b	decod	local03, #31
0b760     00 22 06 36 |  if_ae	mov	local03, #0
0b764     F8 FC B0 FD | 	call	#__system___float_fromuns
0b768     11 FB 61 F5 | 	xor	result1, local03
0b76c     FD 14 02 F6 | 	mov	arg02, result1
0b770     12 13 02 F6 | 	mov	arg01, local04
0b774     EC 00 B1 FD | 	call	#__system___float_mul
0b778     FD 24 02 F6 | 	mov	local04, result1
0b77c     08 4E 05 F1 | 	add	fp, #8
0b780     A7 12 02 FB | 	rdlong	arg01, fp
0b784     08 4E 85 F1 | 	sub	fp, #8
0b788     01 12 06 F1 | 	add	arg01, #1
0b78c     09 13 52 F6 | 	abs	arg01, arg01 wc
0b790     1F 22 C6 C9 |  if_b	decod	local03, #31
0b794     00 22 06 36 |  if_ae	mov	local03, #0
0b798     C4 FC B0 FD | 	call	#__system___float_fromuns
0b79c     11 FB 61 F5 | 	xor	result1, local03
0b7a0     FD 14 02 F6 | 	mov	arg02, result1
0b7a4     12 13 02 F6 | 	mov	arg01, local04
0b7a8     B8 00 B1 FD | 	call	#__system___float_mul
0b7ac     FD 12 02 F6 | 	mov	arg01, result1
0b7b0     EC 09 B1 FD | 	call	#__system____builtin_sinf
0b7b4     FD 14 02 F6 | 	mov	arg02, result1
0b7b8     13 13 02 F6 | 	mov	arg01, local05
0b7bc     A4 00 B1 FD | 	call	#__system___float_mul
0b7c0     FD 14 02 F6 | 	mov	arg02, result1
0b7c4     20 4E 05 F1 | 	add	fp, #32
0b7c8     A7 12 02 FB | 	rdlong	arg01, fp
0b7cc     20 4E 85 F1 | 	sub	fp, #32
0b7d0     C0 FC B0 FD | 	call	#__system___float_add
0b7d4     20 4E 05 F1 | 	add	fp, #32
0b7d8     A7 FA 61 FC | 	wrlong	result1, fp
0b7dc     18 4E 85 F1 | 	sub	fp, #24
0b7e0     A7 26 02 FB | 	rdlong	local05, fp
0b7e4     01 26 06 F1 | 	add	local05, #1
0b7e8     A7 26 62 FC | 	wrlong	local05, fp
0b7ec     10 26 56 F2 | 	cmps	local05, #16 wc
0b7f0     14 FF 9F CD |  if_b	jmp	#LR__0895
0b7f4     08 4E 05 F1 | 	add	fp, #8
0b7f8     A7 26 02 FB | 	rdlong	local05, fp
0b7fc     0B 26 66 F0 | 	shl	local05, #11
0b800     0C 00 00 FF 
0b804     CC E4 05 F1 | 	add	objptr, ##6348
0b808     F2 26 02 F1 | 	add	local05, objptr
0b80c     0C 4E 85 F1 | 	sub	fp, #12
0b810     A7 20 02 FB | 	rdlong	local02, fp
0b814     01 20 66 F0 | 	shl	local02, #1
0b818     13 21 02 F1 | 	add	local02, local05
0b81c     1C 4E 05 F1 | 	add	fp, #28
0b820     A7 12 02 FB | 	rdlong	arg01, fp
0b824     20 4E 85 F1 | 	sub	fp, #32
0b828     0C 00 00 FF 
0b82c     CC E4 85 F1 | 	sub	objptr, ##6348
0b830     01 14 06 F6 | 	mov	arg02, #1
0b834     F4 04 B1 FD | 	call	#__system___float_tointeger
0b838     10 FB 51 FC | 	wrword	result1, local02
0b83c     04 4E 05 F1 | 	add	fp, #4
0b840     A7 26 02 FB | 	rdlong	local05, fp
0b844     01 26 06 F1 | 	add	local05, #1
0b848     A7 26 62 FC | 	wrlong	local05, fp
0b84c     04 4E 85 F1 | 	sub	fp, #4
0b850     02 00 00 FF 
0b854     00 26 56 F2 | 	cmps	local05, ##1024 wc
0b858     9C FE 9F CD |  if_b	jmp	#LR__0894
0b85c                 | LR__0896
0b85c                 | LR__0897
0b85c     A7 F0 03 F6 | 	mov	ptra, fp
0b860     B2 00 A0 FD | 	call	#popregs_
0b864                 | _do_defenv_ret
0b864     2D 00 64 FD | 	ret
0b868                 | 
0b868                 | ' 
0b868                 | ' sub do_defsnd
0b868                 | _do_defsnd
0b868     05 4A 05 F6 | 	mov	COUNT_, #5
0b86c     A8 00 A0 FD | 	call	#pushregs_
0b870     84 F0 07 F1 | 	add	ptra, #132
0b874     69 00 00 FF 
0b878     54 E5 05 F1 | 	add	objptr, ##54100
0b87c     F2 1A 02 FB | 	rdlong	arg05, objptr
0b880     0D 19 02 F6 | 	mov	arg04, arg05
0b884     01 18 66 F0 | 	shl	arg04, #1
0b888     0D 19 02 F1 | 	add	arg04, arg05
0b88c     02 18 66 F0 | 	shl	arg04, #2
0b890     03 00 00 FF 
0b894     04 E4 85 F1 | 	sub	objptr, ##1540
0b898     F2 18 02 F1 | 	add	arg04, objptr
0b89c     0C 1B 02 FB | 	rdlong	arg05, arg04
0b8a0     A7 1A 62 FC | 	wrlong	arg05, fp
0b8a4                 | ' 
0b8a4                 | ' numpar=compiledline(lineptr_e).result.uresult
0b8a4                 | ' 
0b8a4                 | ' 
0b8a4                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
0b8a4                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
0b8a4                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
0b8a4                 | ' ' defsnd channel, oneint - defines waveshape as in SID and 0=sinewave
0b8a4                 | ' 
0b8a4                 | ' if numpar<2 then return
0b8a4     02 1A 56 F2 | 	cmps	arg05, #2 wc
0b8a8     66 00 00 FF 
0b8ac     50 E5 85 F1 | 	sub	objptr, ##52560
0b8b0     2C 09 90 CD |  if_b	jmp	#LR__0924
0b8b4                 | ' 
0b8b4                 | '  
0b8b4                 | ' if numpar=2 then
0b8b4     A7 1A 02 FB | 	rdlong	arg05, fp
0b8b8     02 1A 0E F2 | 	cmp	arg05, #2 wz
0b8bc     98 03 90 5D |  if_ne	jmp	#LR__0907
0b8c0     20 E0 BF FD | 	call	#_pop
0b8c4     FF 1A 02 F6 | 	mov	arg05, result3
0b8c8     28 4E 05 F1 | 	add	fp, #40
0b8cc     A7 FA 61 FC | 	wrlong	result1, fp
0b8d0     04 4E 05 F1 | 	add	fp, #4
0b8d4     A7 FC 61 FC | 	wrlong	result2, fp
0b8d8     04 4E 05 F1 | 	add	fp, #4
0b8dc     A7 1A 62 FC | 	wrlong	arg05, fp
0b8e0                 | '   t1=pop()
0b8e0                 | '   if t1.result_type=result_string2 then 
0b8e0     30 4E 85 F1 | 	sub	fp, #48
0b8e4     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0b8e8     20 00 90 5D |  if_ne	jmp	#LR__0900
0b8ec     28 4E 05 F1 | 	add	fp, #40
0b8f0     A7 12 02 FB | 	rdlong	arg01, fp
0b8f4     28 4E 85 F1 | 	sub	fp, #40
0b8f8     24 11 B0 FD | 	call	#_convertstring
0b8fc     34 4E 05 F1 | 	add	fp, #52
0b900     A7 FA 61 FC | 	wrlong	result1, fp
0b904     34 4E 85 F1 | 	sub	fp, #52
0b908     40 00 90 FD | 	jmp	#LR__0903
0b90c                 | LR__0900
0b90c     30 4E 05 F1 | 	add	fp, #48
0b910     A7 1A 02 FB | 	rdlong	arg05, fp
0b914     30 4E 85 F1 | 	sub	fp, #48
0b918     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0b91c     18 00 90 5D |  if_ne	jmp	#LR__0901
0b920     28 4E 05 F1 | 	add	fp, #40
0b924     A7 1A 02 FB | 	rdlong	arg05, fp
0b928     0C 4E 05 F1 | 	add	fp, #12
0b92c     A7 1A 62 FC | 	wrlong	arg05, fp
0b930     34 4E 85 F1 | 	sub	fp, #52
0b934     14 00 90 FD | 	jmp	#LR__0902
0b938                 | LR__0901
0b938     43 01 00 FF 
0b93c     EB 1B 06 F6 | 	mov	arg05, ##@LR__4577
0b940     34 4E 05 F1 | 	add	fp, #52
0b944     A7 1A 62 FC | 	wrlong	arg05, fp
0b948     34 4E 85 F1 | 	sub	fp, #52
0b94c                 | LR__0902
0b94c                 | LR__0903
0b94c                 | ' 
0b94c                 | '     
0b94c                 | '   if s<>"" then 
0b94c     34 4E 05 F1 | 	add	fp, #52
0b950     A7 12 02 FB | 	rdlong	arg01, fp
0b954     34 4E 85 F1 | 	sub	fp, #52
0b958     43 01 00 FF 
0b95c     EC 15 06 F6 | 	mov	arg02, ##@LR__4578
0b960     3C D4 B0 FD | 	call	#__system___string_cmp
0b964     00 FA 0D F2 | 	cmp	result1, #0 wz
0b968     88 01 90 AD |  if_e	jmp	#LR__0905
0b96c     74 DF BF FD | 	call	#_pop
0b970     FF 1A 02 F6 | 	mov	arg05, result3
0b974     28 4E 05 F1 | 	add	fp, #40
0b978     A7 FA 61 FC | 	wrlong	result1, fp
0b97c     04 4E 05 F1 | 	add	fp, #4
0b980     A7 FC 61 FC | 	wrlong	result2, fp
0b984     04 4E 05 F1 | 	add	fp, #4
0b988     A7 1A 62 FC | 	wrlong	arg05, fp
0b98c     08 4E 85 F1 | 	sub	fp, #8
0b990     A7 12 02 F6 | 	mov	arg01, fp
0b994     28 4E 85 F1 | 	sub	fp, #40
0b998     B8 54 B0 FD | 	call	#_converttoint
0b99c     10 4E 05 F1 | 	add	fp, #16
0b9a0     A7 FA 61 FC | 	wrlong	result1, fp
0b9a4     10 4E 85 F1 | 	sub	fp, #16
0b9a8                 | '     t1=pop()
0b9a8                 | '     channel=converttoint(t1) 
0b9a8                 | '     close #9 : open "/sd/media/s/"+s for input as #9
0b9a8     09 12 06 F6 | 	mov	arg01, #9
0b9ac     FC 22 B1 FD | 	call	#__system__close
0b9b0     09 1E 06 F6 | 	mov	local01, #9
0b9b4     43 01 00 FF 
0b9b8     ED 13 06 F6 | 	mov	arg01, ##@LR__4579
0b9bc     34 4E 05 F1 | 	add	fp, #52
0b9c0     A7 14 02 FB | 	rdlong	arg02, fp
0b9c4     34 4E 85 F1 | 	sub	fp, #52
0b9c8     08 D4 B0 FD | 	call	#__system___string_concat
0b9cc     FD 14 02 F6 | 	mov	arg02, result1
0b9d0     0F 13 02 F6 | 	mov	arg01, local01
0b9d4     00 16 06 F6 | 	mov	arg03, #0
0b9d8     A0 DF B0 FD | 	call	#__system___basic_open_string
0b9dc     20 E8 05 F1 | 	add	ptr___system__dat__, #32
0b9e0     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0b9e4     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
0b9e8     7A 00 00 FF 
0b9ec     D4 E5 05 F1 | 	add	objptr, ##62932
0b9f0     F2 FA 61 FC | 	wrlong	result1, objptr
0b9f4                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0b9f4     7A 00 00 FF 
0b9f8     D4 E5 85 F1 | 	sub	objptr, ##62932
0b9fc     B0 00 90 AD |  if_e	jmp	#LR__0904
0ba00     00 12 06 F6 | 	mov	arg01, #0
0ba04     74 2C B1 FD | 	call	#__system___getiolock_0423
0ba08     FD 12 02 F6 | 	mov	arg01, result1
0ba0c     68 D3 B0 FD | 	call	#__system___lockmem
0ba10     43 01 00 FF 
0ba14     FA 15 06 F6 | 	mov	arg02, ##@LR__4580
0ba18     00 12 06 F6 | 	mov	arg01, #0
0ba1c     00 16 06 F6 | 	mov	arg03, #0
0ba20     48 E0 B0 FD | 	call	#__system___basic_print_string
0ba24     7A 00 00 FF 
0ba28     D4 E5 05 F1 | 	add	objptr, ##62932
0ba2c     F2 14 02 FB | 	rdlong	arg02, objptr
0ba30     7A 00 00 FF 
0ba34     D4 E5 85 F1 | 	sub	objptr, ##62932
0ba38     00 12 06 F6 | 	mov	arg01, #0
0ba3c     00 16 06 F6 | 	mov	arg03, #0
0ba40     0A 18 06 F6 | 	mov	arg04, #10
0ba44     68 E0 B0 FD | 	call	#__system___basic_print_integer
0ba48     44 01 00 FF 
0ba4c     08 14 06 F6 | 	mov	arg02, ##@LR__4581
0ba50     00 12 06 F6 | 	mov	arg01, #0
0ba54     00 16 06 F6 | 	mov	arg03, #0
0ba58     10 E0 B0 FD | 	call	#__system___basic_print_string
0ba5c     00 1E 06 F6 | 	mov	local01, #0
0ba60     7A 00 00 FF 
0ba64     D4 E5 05 F1 | 	add	objptr, ##62932
0ba68     F2 12 02 FB | 	rdlong	arg01, objptr
0ba6c     7A 00 00 FF 
0ba70     D4 E5 85 F1 | 	sub	objptr, ##62932
0ba74     00 F9 B0 FD | 	call	#__system___strerror
0ba78     FD 14 02 F6 | 	mov	arg02, result1
0ba7c     0F 13 02 F6 | 	mov	arg01, local01
0ba80     00 16 06 F6 | 	mov	arg03, #0
0ba84     E4 DF B0 FD | 	call	#__system___basic_print_string
0ba88     00 12 06 F6 | 	mov	arg01, #0
0ba8c     0A 14 06 F6 | 	mov	arg02, #10
0ba90     00 16 06 F6 | 	mov	arg03, #0
0ba94     7C DF B0 FD | 	call	#__system___basic_print_char
0ba98     00 12 06 F6 | 	mov	arg01, #0
0ba9c     DC 2B B1 FD | 	call	#__system___getiolock_0423
0baa0     FD 00 68 FC | 	wrlong	#0, result1
0baa4     09 12 06 F6 | 	mov	arg01, #9
0baa8     00 22 B1 FD | 	call	#__system__close
0baac     30 07 90 FD | 	jmp	#LR__0924
0bab0                 | LR__0904
0bab0                 | '     get #9,17,samplebuf(channel,0),1024
0bab0     10 4E 05 F1 | 	add	fp, #16
0bab4     A7 16 02 FB | 	rdlong	arg03, fp
0bab8     10 4E 85 F1 | 	sub	fp, #16
0babc     0B 16 66 F0 | 	shl	arg03, #11
0bac0     0C 00 00 FF 
0bac4     CC E4 05 F1 | 	add	objptr, ##6348
0bac8     F2 16 02 F1 | 	add	arg03, objptr
0bacc     09 12 06 F6 | 	mov	arg01, #9
0bad0     11 14 06 F6 | 	mov	arg02, #17
0bad4     0A 18 C6 F9 | 	decod	arg04, #10
0bad8     02 1A 06 F6 | 	mov	arg05, #2
0badc     0C 00 00 FF 
0bae0     CC E4 85 F1 | 	sub	objptr, ##6348
0bae4     94 E0 B0 FD | 	call	#__system___basic_get
0bae8                 | '     close #9
0bae8     09 12 06 F6 | 	mov	arg01, #9
0baec     BC 21 B1 FD | 	call	#__system__close
0baf0                 | '                                                                       '  for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0baf0                 | '     return
0baf0     EC 06 90 FD | 	jmp	#LR__0924
0baf4                 | LR__0905
0baf4     28 4E 05 F1 | 	add	fp, #40
0baf8     A7 12 02 F6 | 	mov	arg01, fp
0bafc     28 4E 85 F1 | 	sub	fp, #40
0bb00     50 53 B0 FD | 	call	#_converttoint
0bb04     FD 1E 02 F6 | 	mov	local01, result1
0bb08     0C 4E 05 F1 | 	add	fp, #12
0bb0c     A7 1E 62 FC | 	wrlong	local01, fp
0bb10     0C 4E 85 F1 | 	sub	fp, #12
0bb14                 | '   
0bb14                 | '   par=converttoint(t1)  : print par
0bb14     00 12 06 F6 | 	mov	arg01, #0
0bb18     60 2B B1 FD | 	call	#__system___getiolock_0423
0bb1c     FD 12 02 F6 | 	mov	arg01, result1
0bb20     54 D2 B0 FD | 	call	#__system___lockmem
0bb24     0C 4E 05 F1 | 	add	fp, #12
0bb28     A7 14 02 FB | 	rdlong	arg02, fp
0bb2c     0C 4E 85 F1 | 	sub	fp, #12
0bb30     00 12 06 F6 | 	mov	arg01, #0
0bb34     00 16 06 F6 | 	mov	arg03, #0
0bb38     0A 18 06 F6 | 	mov	arg04, #10
0bb3c     70 DF B0 FD | 	call	#__system___basic_print_integer
0bb40     00 12 06 F6 | 	mov	arg01, #0
0bb44     0A 14 06 F6 | 	mov	arg02, #10
0bb48     00 16 06 F6 | 	mov	arg03, #0
0bb4c     C4 DE B0 FD | 	call	#__system___basic_print_char
0bb50     00 12 06 F6 | 	mov	arg01, #0
0bb54     24 2B B1 FD | 	call	#__system___getiolock_0423
0bb58     FD 00 68 FC | 	wrlong	#0, result1
0bb5c     84 DD BF FD | 	call	#_pop
0bb60     FF 1E 02 F6 | 	mov	local01, result3
0bb64     28 4E 05 F1 | 	add	fp, #40
0bb68     A7 FA 61 FC | 	wrlong	result1, fp
0bb6c     04 4E 05 F1 | 	add	fp, #4
0bb70     A7 FC 61 FC | 	wrlong	result2, fp
0bb74     04 4E 05 F1 | 	add	fp, #4
0bb78     A7 1E 62 FC | 	wrlong	local01, fp
0bb7c     08 4E 85 F1 | 	sub	fp, #8
0bb80     A7 12 02 F6 | 	mov	arg01, fp
0bb84     28 4E 85 F1 | 	sub	fp, #40
0bb88     C8 52 B0 FD | 	call	#_converttoint
0bb8c     10 4E 05 F1 | 	add	fp, #16
0bb90     A7 FA 61 FC | 	wrlong	result1, fp
0bb94                 | '   t1=pop()
0bb94                 | '   channel=converttoint(t1)  
0bb94                 | '   if par=0 then for i=0 to 1023: samplebuf(channel,i)=round(32600*sin(1.0/512*3.14159265359*i)) : next i
0bb94     04 4E 85 F1 | 	sub	fp, #4
0bb98     A7 1E 0A FB | 	rdlong	local01, fp wz
0bb9c     0C 4E 85 F1 | 	sub	fp, #12
0bba0     3C 06 90 5D |  if_ne	jmp	#LR__0924
0bba4     04 4E 05 F1 | 	add	fp, #4
0bba8     A7 00 68 FC | 	wrlong	#0, fp
0bbac     04 4E 85 F1 | 	sub	fp, #4
0bbb0                 | LR__0906
0bbb0     10 4E 05 F1 | 	add	fp, #16
0bbb4     A7 1E 02 FB | 	rdlong	local01, fp
0bbb8     0B 1E 66 F0 | 	shl	local01, #11
0bbbc     0C 00 00 FF 
0bbc0     CC E4 05 F1 | 	add	objptr, ##6348
0bbc4     F2 1E 02 F1 | 	add	local01, objptr
0bbc8     0C 4E 85 F1 | 	sub	fp, #12
0bbcc     A7 12 02 FB | 	rdlong	arg01, fp
0bbd0     09 21 02 F6 | 	mov	local02, arg01
0bbd4     01 20 66 F0 | 	shl	local02, #1
0bbd8     0F 21 02 F1 | 	add	local02, local01
0bbdc     04 4E 85 F1 | 	sub	fp, #4
0bbe0     0C 00 00 FF 
0bbe4     CC E4 85 F1 | 	sub	objptr, ##6348
0bbe8     09 13 52 F6 | 	abs	arg01, arg01 wc
0bbec     1F 22 C6 C9 |  if_b	decod	local03, #31
0bbf0     00 22 06 36 |  if_ae	mov	local03, #0
0bbf4     68 F8 B0 FD | 	call	#__system___float_fromuns
0bbf8     11 FB 61 F5 | 	xor	result1, local03
0bbfc     FD 14 02 F6 | 	mov	arg02, result1
0bc00     87 E4 1D FF 
0bc04     DB 13 06 F6 | 	mov	arg01, ##1003032539
0bc08     58 FC B0 FD | 	call	#__system___float_mul
0bc0c     FD 12 02 F6 | 	mov	arg01, result1
0bc10     8C 05 B1 FD | 	call	#__system____builtin_sinf
0bc14     FD 14 02 F6 | 	mov	arg02, result1
0bc18     58 7F 23 FF 
0bc1c     00 12 06 F6 | 	mov	arg01, ##1191096320
0bc20     40 FC B0 FD | 	call	#__system___float_mul
0bc24     FD 12 02 F6 | 	mov	arg01, result1
0bc28     01 14 06 F6 | 	mov	arg02, #1
0bc2c     FC 00 B1 FD | 	call	#__system___float_tointeger
0bc30     10 FB 51 FC | 	wrword	result1, local02
0bc34     04 4E 05 F1 | 	add	fp, #4
0bc38     A7 20 02 FB | 	rdlong	local02, fp
0bc3c     01 20 06 F1 | 	add	local02, #1
0bc40     A7 20 62 FC | 	wrlong	local02, fp
0bc44     04 4E 85 F1 | 	sub	fp, #4
0bc48     02 00 00 FF 
0bc4c     00 20 56 F2 | 	cmps	local02, ##1024 wc
0bc50     5C FF 9F CD |  if_b	jmp	#LR__0906
0bc54                 | '                                                                            '  for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0bc54                 | '   return
0bc54     88 05 90 FD | 	jmp	#LR__0924
0bc58                 | LR__0907
0bc58                 | ' for i=0 to 15 : harm(i)=0: next i  
0bc58     04 4E 05 F1 | 	add	fp, #4
0bc5c     A7 00 68 FC | 	wrlong	#0, fp
0bc60     97 16 48 FB | 	callpa	#(@LR__0909-@LR__0908)>>2,fcache_load_ptr_
0bc64                 | LR__0908
0bc64     A7 1E 02 FB | 	rdlong	local01, fp
0bc68     02 1E 66 F0 | 	shl	local01, #2
0bc6c     34 4E 05 F1 | 	add	fp, #52
0bc70     A7 1E 02 F1 | 	add	local01, fp
0bc74     0F 01 68 FC | 	wrlong	#0, local01
0bc78     34 4E 85 F1 | 	sub	fp, #52
0bc7c     A7 1E 02 FB | 	rdlong	local01, fp
0bc80     01 1E 06 F1 | 	add	local01, #1
0bc84     A7 1E 62 FC | 	wrlong	local01, fp
0bc88     10 1E 56 F2 | 	cmps	local01, #16 wc
0bc8c     D4 FF 9F CD |  if_b	jmp	#LR__0908
0bc90                 | LR__0909
0bc90     04 4E 85 F1 | 	sub	fp, #4
0bc94                 | ' for i=numpar to 2 step -1 
0bc94     A7 1E 02 FB | 	rdlong	local01, fp
0bc98     04 4E 05 F1 | 	add	fp, #4
0bc9c     A7 1E 62 FC | 	wrlong	local01, fp
0bca0     04 4E 85 F1 | 	sub	fp, #4
0bca4                 | LR__0910
0bca4     3C DC BF FD | 	call	#_pop
0bca8     28 4E 05 F1 | 	add	fp, #40
0bcac     A7 FA 61 FC | 	wrlong	result1, fp
0bcb0     04 4E 05 F1 | 	add	fp, #4
0bcb4     A7 FC 61 FC | 	wrlong	result2, fp
0bcb8     04 4E 05 F1 | 	add	fp, #4
0bcbc     A7 FE 61 FC | 	wrlong	result3, fp
0bcc0     2C 4E 85 F1 | 	sub	fp, #44
0bcc4     A7 1E 02 FB | 	rdlong	local01, fp
0bcc8     02 1E 86 F1 | 	sub	local01, #2
0bccc     02 1E 66 F0 | 	shl	local01, #2
0bcd0     34 4E 05 F1 | 	add	fp, #52
0bcd4     A7 1E 02 F1 | 	add	local01, fp
0bcd8     10 4E 85 F1 | 	sub	fp, #16
0bcdc     A7 12 02 F6 | 	mov	arg01, fp
0bce0     28 4E 85 F1 | 	sub	fp, #40
0bce4     18 52 B0 FD | 	call	#_converttofloat
0bce8     0F FB 61 FC | 	wrlong	result1, local01
0bcec     04 4E 05 F1 | 	add	fp, #4
0bcf0     A7 1E 02 FB | 	rdlong	local01, fp
0bcf4     01 1E 86 F1 | 	sub	local01, #1
0bcf8     A7 1E 62 FC | 	wrlong	local01, fp
0bcfc     04 4E 85 F1 | 	sub	fp, #4
0bd00     02 1E 56 F2 | 	cmps	local01, #2 wc
0bd04     9C FF 9F 3D |  if_ae	jmp	#LR__0910
0bd08     D8 DB BF FD | 	call	#_pop
0bd0c     FF 1E 02 F6 | 	mov	local01, result3
0bd10     28 4E 05 F1 | 	add	fp, #40
0bd14     A7 FA 61 FC | 	wrlong	result1, fp
0bd18     04 4E 05 F1 | 	add	fp, #4
0bd1c     A7 FC 61 FC | 	wrlong	result2, fp
0bd20     04 4E 05 F1 | 	add	fp, #4
0bd24     A7 1E 62 FC | 	wrlong	local01, fp
0bd28     08 4E 85 F1 | 	sub	fp, #8
0bd2c     A7 12 02 F6 | 	mov	arg01, fp
0bd30     28 4E 85 F1 | 	sub	fp, #40
0bd34     1C 51 B0 FD | 	call	#_converttoint
0bd38     FD 1E 02 F6 | 	mov	local01, result1
0bd3c     10 4E 05 F1 | 	add	fp, #16
0bd40     A7 1E 62 FC | 	wrlong	local01, fp
0bd44     10 4E 85 F1 | 	sub	fp, #16
0bd48                 | ' t1=pop()
0bd48                 | ' channel=converttoint(t1) : print channel
0bd48     00 12 06 F6 | 	mov	arg01, #0
0bd4c     2C 29 B1 FD | 	call	#__system___getiolock_0423
0bd50     FD 12 02 F6 | 	mov	arg01, result1
0bd54     20 D0 B0 FD | 	call	#__system___lockmem
0bd58     10 4E 05 F1 | 	add	fp, #16
0bd5c     A7 14 02 FB | 	rdlong	arg02, fp
0bd60     10 4E 85 F1 | 	sub	fp, #16
0bd64     00 12 06 F6 | 	mov	arg01, #0
0bd68     00 16 06 F6 | 	mov	arg03, #0
0bd6c     0A 18 06 F6 | 	mov	arg04, #10
0bd70     3C DD B0 FD | 	call	#__system___basic_print_integer
0bd74     00 12 06 F6 | 	mov	arg01, #0
0bd78     0A 14 06 F6 | 	mov	arg02, #10
0bd7c     00 16 06 F6 | 	mov	arg03, #0
0bd80     90 DC B0 FD | 	call	#__system___basic_print_char
0bd84     00 12 06 F6 | 	mov	arg01, #0
0bd88     F0 28 B1 FD | 	call	#__system___getiolock_0423
0bd8c     FD 00 68 FC | 	wrlong	#0, result1
0bd90                 | ' for j=0 to 1023: samplebuf(channel, i) =0 : next j
0bd90     08 4E 05 F1 | 	add	fp, #8
0bd94     02 00 80 FF 
0bd98     A7 00 68 FC | 	wrlong	##1024, fp
0bd9c     08 4E 85 F1 | 	sub	fp, #8
0bda0     0C 00 00 FF 
0bda4     CC E4 05 F1 | 	add	objptr, ##6348
0bda8     97 18 48 FB | 	callpa	#(@LR__0913-@LR__0911)>>2,fcache_load_ptr_
0bdac                 | LR__0911
0bdac     02 00 00 FF 
0bdb0     00 14 DC FC | 	rep	@LR__0914, ##1024
0bdb4                 | LR__0912
0bdb4     10 4E 05 F1 | 	add	fp, #16
0bdb8     A7 20 02 FB | 	rdlong	local02, fp
0bdbc     0B 20 66 F0 | 	shl	local02, #11
0bdc0     F2 20 02 F1 | 	add	local02, objptr
0bdc4     0C 4E 85 F1 | 	sub	fp, #12
0bdc8     A7 1E 02 FB | 	rdlong	local01, fp
0bdcc     04 4E 85 F1 | 	sub	fp, #4
0bdd0     01 1E 66 F0 | 	shl	local01, #1
0bdd4     10 1F 02 F1 | 	add	local01, local02
0bdd8     0F 01 58 FC | 	wrword	#0, local01
0bddc                 | LR__0913
0bddc                 | LR__0914
0bddc     0C 00 00 FF 
0bde0     CC E4 85 F1 | 	sub	objptr, ##6348
0bde4     1C 4E 05 F1 | 	add	fp, #28
0bde8     A7 00 68 FC | 	wrlong	#0, fp
0bdec                 | ' max=0
0bdec                 | ' if harm(0)<0 then
0bdec     1C 4E 05 F1 | 	add	fp, #28
0bdf0     A7 12 02 FB | 	rdlong	arg01, fp
0bdf4     38 4E 85 F1 | 	sub	fp, #56
0bdf8     00 14 06 F6 | 	mov	arg02, #0
0bdfc     01 16 06 F6 | 	mov	arg03, #1
0be00     94 FE B0 FD | 	call	#__system___float_cmp
0be04     00 FA 55 F2 | 	cmps	result1, #0 wc
0be08     04 01 90 3D |  if_ae	jmp	#LR__0917
0be0c     38 4E 05 F1 | 	add	fp, #56
0be10     A7 FA 01 FB | 	rdlong	result1, fp
0be14     1F FA 05 F4 | 	bitl	result1, #31
0be18     24 4E 85 F1 | 	sub	fp, #36
0be1c     A7 FA 61 FC | 	wrlong	result1, fp
0be20     28 4E 05 F1 | 	add	fp, #40
0be24     A7 FA 01 FB | 	rdlong	result1, fp
0be28     1F FA 05 F4 | 	bitl	result1, #31
0be2c     24 4E 85 F1 | 	sub	fp, #36
0be30     A7 FA 61 FC | 	wrlong	result1, fp
0be34     20 4E 05 F1 | 	add	fp, #32
0be38     00 C0 9F FF 
0be3c     A7 00 68 FC | 	wrlong	##1065353216, fp
0be40     24 4E 85 F1 | 	sub	fp, #36
0be44     A7 1E 02 FB | 	rdlong	local01, fp
0be48     28 4E 05 F1 | 	add	fp, #40
0be4c     A7 1E 62 FC | 	wrlong	local01, fp
0be50     24 4E 85 F1 | 	sub	fp, #36
0be54     A7 1E 02 FB | 	rdlong	local01, fp
0be58     28 4E 05 F1 | 	add	fp, #40
0be5c     A7 1E 62 FC | 	wrlong	local01, fp
0be60                 | '   harm(0)=1
0be60                 | '   harm(1)=even
0be60                 | '   harm(2)=odd
0be60                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0be60     3C 4E 85 F1 | 	sub	fp, #60
0be64     A7 06 68 FC | 	wrlong	#3, fp
0be68                 | LR__0915
0be68     A7 1A 02 FB | 	rdlong	arg05, fp
0be6c     0D 25 02 F6 | 	mov	local04, arg05
0be70     02 24 66 F0 | 	shl	local04, #2
0be74     34 4E 05 F1 | 	add	fp, #52
0be78     A7 24 02 F1 | 	add	local04, fp
0be7c     02 1A 86 F1 | 	sub	arg05, #2
0be80     02 1A 66 F0 | 	shl	arg05, #2
0be84     A7 1A 02 F1 | 	add	arg05, fp
0be88     0D 13 02 FB | 	rdlong	arg01, arg05
0be8c     24 4E 85 F1 | 	sub	fp, #36
0be90     A7 14 02 FB | 	rdlong	arg02, fp
0be94     14 4E 85 F1 | 	sub	fp, #20
0be98     C8 F9 B0 FD | 	call	#__system___float_mul
0be9c     12 FB 61 FC | 	wrlong	result1, local04
0bea0     04 4E 05 F1 | 	add	fp, #4
0bea4     A7 26 02 FB | 	rdlong	local05, fp
0bea8     02 26 06 F1 | 	add	local05, #2
0beac     A7 26 62 FC | 	wrlong	local05, fp
0beb0     10 26 56 F2 | 	cmps	local05, #16 wc
0beb4     B0 FF 9F CD |  if_b	jmp	#LR__0915
0beb8                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0beb8     A7 08 68 FC | 	wrlong	#4, fp
0bebc                 | LR__0916
0bebc     A7 26 02 FB | 	rdlong	local05, fp
0bec0     13 25 02 F6 | 	mov	local04, local05
0bec4     02 24 66 F0 | 	shl	local04, #2
0bec8     34 4E 05 F1 | 	add	fp, #52
0becc     A7 24 02 F1 | 	add	local04, fp
0bed0     02 26 86 F1 | 	sub	local05, #2
0bed4     02 26 66 F0 | 	shl	local05, #2
0bed8     A7 26 02 F1 | 	add	local05, fp
0bedc     13 13 02 FB | 	rdlong	arg01, local05
0bee0     20 4E 85 F1 | 	sub	fp, #32
0bee4     A7 14 02 FB | 	rdlong	arg02, fp
0bee8     18 4E 85 F1 | 	sub	fp, #24
0beec     74 F9 B0 FD | 	call	#__system___float_mul
0bef0     12 FB 61 FC | 	wrlong	result1, local04
0bef4     04 4E 05 F1 | 	add	fp, #4
0bef8     A7 26 02 FB | 	rdlong	local05, fp
0befc     02 26 06 F1 | 	add	local05, #2
0bf00     A7 26 62 FC | 	wrlong	local05, fp
0bf04     0F 26 56 F2 | 	cmps	local05, #15 wc
0bf08     B0 FF 9F CD |  if_b	jmp	#LR__0916
0bf0c     04 4E 85 F1 | 	sub	fp, #4
0bf10                 | LR__0917
0bf10                 | ' if harm(0)>=0 then ' synthesize with harmonics
0bf10     38 4E 05 F1 | 	add	fp, #56
0bf14     A7 12 02 FB | 	rdlong	arg01, fp
0bf18     38 4E 85 F1 | 	sub	fp, #56
0bf1c     00 14 06 F6 | 	mov	arg02, #0
0bf20     01 16 66 F6 | 	neg	arg03, #1
0bf24     70 FD B0 FD | 	call	#__system___float_cmp
0bf28     00 FA 55 F2 | 	cmps	result1, #0 wc
0bf2c     B0 02 90 CD |  if_b	jmp	#LR__0923
0bf30                 | '   for i=0 to 1023
0bf30     04 4E 05 F1 | 	add	fp, #4
0bf34     A7 00 68 FC | 	wrlong	#0, fp
0bf38     04 4E 85 F1 | 	sub	fp, #4
0bf3c                 | LR__0918
0bf3c     20 4E 05 F1 | 	add	fp, #32
0bf40     A7 00 68 FC | 	wrlong	#0, fp
0bf44                 | '     spl=0
0bf44                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
0bf44     18 4E 85 F1 | 	sub	fp, #24
0bf48     A7 00 68 FC | 	wrlong	#0, fp
0bf4c                 | LR__0919
0bf4c     A7 24 02 FB | 	rdlong	local04, fp
0bf50     02 24 66 F0 | 	shl	local04, #2
0bf54     30 4E 05 F1 | 	add	fp, #48
0bf58     A7 24 02 F1 | 	add	local04, fp
0bf5c     12 27 02 FB | 	rdlong	local05, local04
0bf60     87 E4 1D FF 
0bf64     DB 25 06 F6 | 	mov	local04, ##1003032539
0bf68     34 4E 85 F1 | 	sub	fp, #52
0bf6c     A7 12 02 FB | 	rdlong	arg01, fp
0bf70     04 4E 85 F1 | 	sub	fp, #4
0bf74     09 13 52 F6 | 	abs	arg01, arg01 wc
0bf78     1F 22 C6 C9 |  if_b	decod	local03, #31
0bf7c     00 22 06 36 |  if_ae	mov	local03, #0
0bf80     DC F4 B0 FD | 	call	#__system___float_fromuns
0bf84     11 FB 61 F5 | 	xor	result1, local03
0bf88     FD 14 02 F6 | 	mov	arg02, result1
0bf8c     12 13 02 F6 | 	mov	arg01, local04
0bf90     D0 F8 B0 FD | 	call	#__system___float_mul
0bf94     FD 24 02 F6 | 	mov	local04, result1
0bf98     08 4E 05 F1 | 	add	fp, #8
0bf9c     A7 12 02 FB | 	rdlong	arg01, fp
0bfa0     08 4E 85 F1 | 	sub	fp, #8
0bfa4     01 12 06 F1 | 	add	arg01, #1
0bfa8     09 13 52 F6 | 	abs	arg01, arg01 wc
0bfac     1F 22 C6 C9 |  if_b	decod	local03, #31
0bfb0     00 22 06 36 |  if_ae	mov	local03, #0
0bfb4     A8 F4 B0 FD | 	call	#__system___float_fromuns
0bfb8     11 FB 61 F5 | 	xor	result1, local03
0bfbc     FD 14 02 F6 | 	mov	arg02, result1
0bfc0     12 13 02 F6 | 	mov	arg01, local04
0bfc4     9C F8 B0 FD | 	call	#__system___float_mul
0bfc8     FD 12 02 F6 | 	mov	arg01, result1
0bfcc     D0 01 B1 FD | 	call	#__system____builtin_sinf
0bfd0     FD 14 02 F6 | 	mov	arg02, result1
0bfd4     13 13 02 F6 | 	mov	arg01, local05
0bfd8     88 F8 B0 FD | 	call	#__system___float_mul
0bfdc     FD 14 02 F6 | 	mov	arg02, result1
0bfe0     20 4E 05 F1 | 	add	fp, #32
0bfe4     A7 12 02 FB | 	rdlong	arg01, fp
0bfe8     20 4E 85 F1 | 	sub	fp, #32
0bfec     A4 F4 B0 FD | 	call	#__system___float_add
0bff0     20 4E 05 F1 | 	add	fp, #32
0bff4     A7 FA 61 FC | 	wrlong	result1, fp
0bff8     18 4E 85 F1 | 	sub	fp, #24
0bffc     A7 16 02 FB | 	rdlong	arg03, fp
0c000     01 16 06 F1 | 	add	arg03, #1
0c004     A7 16 62 FC | 	wrlong	arg03, fp
0c008     10 16 56 F2 | 	cmps	arg03, #16 wc
0c00c     3C FF 9F CD |  if_b	jmp	#LR__0919
0c010                 | '     if abs(spl)>max then max=abs(spl)  ': print max 
0c010     18 4E 05 F1 | 	add	fp, #24
0c014     A7 12 02 FB | 	rdlong	arg01, fp
0c018     1F 12 06 F4 | 	bitl	arg01, #31
0c01c     04 4E 85 F1 | 	sub	fp, #4
0c020     A7 14 02 FB | 	rdlong	arg02, fp
0c024     1C 4E 85 F1 | 	sub	fp, #28
0c028     01 16 66 F6 | 	neg	arg03, #1
0c02c     68 FC B0 FD | 	call	#__system___float_cmp
0c030     01 FA 55 F2 | 	cmps	result1, #1 wc
0c034     18 00 90 CD |  if_b	jmp	#LR__0920
0c038     20 4E 05 F1 | 	add	fp, #32
0c03c     A7 FA 01 FB | 	rdlong	result1, fp
0c040     1F FA 05 F4 | 	bitl	result1, #31
0c044     04 4E 85 F1 | 	sub	fp, #4
0c048     A7 FA 61 FC | 	wrlong	result1, fp
0c04c     1C 4E 85 F1 | 	sub	fp, #28
0c050                 | LR__0920
0c050     04 4E 05 F1 | 	add	fp, #4
0c054     A7 26 02 FB | 	rdlong	local05, fp
0c058     01 26 06 F1 | 	add	local05, #1
0c05c     A7 26 62 FC | 	wrlong	local05, fp
0c060     04 4E 85 F1 | 	sub	fp, #4
0c064     02 00 00 FF 
0c068     00 26 56 F2 | 	cmps	local05, ##1024 wc
0c06c     CC FE 9F CD |  if_b	jmp	#LR__0918
0c070                 | '   for i=0 to 1023
0c070     04 4E 05 F1 | 	add	fp, #4
0c074     A7 00 68 FC | 	wrlong	#0, fp
0c078     04 4E 85 F1 | 	sub	fp, #4
0c07c                 | LR__0921
0c07c     20 4E 05 F1 | 	add	fp, #32
0c080     A7 00 68 FC | 	wrlong	#0, fp
0c084                 | '     spl=0
0c084                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j ':' print spl
0c084     18 4E 85 F1 | 	sub	fp, #24
0c088     A7 00 68 FC | 	wrlong	#0, fp
0c08c                 | LR__0922
0c08c     A7 26 02 FB | 	rdlong	local05, fp
0c090     02 26 66 F0 | 	shl	local05, #2
0c094     30 4E 05 F1 | 	add	fp, #48
0c098     A7 26 02 F1 | 	add	local05, fp
0c09c     13 27 02 FB | 	rdlong	local05, local05
0c0a0     1C 4E 85 F1 | 	sub	fp, #28
0c0a4     A7 14 02 FB | 	rdlong	arg02, fp
0c0a8     1C 4E 85 F1 | 	sub	fp, #28
0c0ac     58 7F 23 FF 
0c0b0     00 12 06 F6 | 	mov	arg01, ##1191096320
0c0b4     B0 F9 B0 FD | 	call	#__system___float_div
0c0b8     FD 14 02 F6 | 	mov	arg02, result1
0c0bc     13 13 02 F6 | 	mov	arg01, local05
0c0c0     A0 F7 B0 FD | 	call	#__system___float_mul
0c0c4     FD 26 02 F6 | 	mov	local05, result1
0c0c8     87 E4 1D FF 
0c0cc     DB 25 06 F6 | 	mov	local04, ##1003032539
0c0d0     04 4E 05 F1 | 	add	fp, #4
0c0d4     A7 12 02 FB | 	rdlong	arg01, fp
0c0d8     04 4E 85 F1 | 	sub	fp, #4
0c0dc     09 13 52 F6 | 	abs	arg01, arg01 wc
0c0e0     1F 22 C6 C9 |  if_b	decod	local03, #31
0c0e4     00 22 06 36 |  if_ae	mov	local03, #0
0c0e8     74 F3 B0 FD | 	call	#__system___float_fromuns
0c0ec     11 FB 61 F5 | 	xor	result1, local03
0c0f0     FD 14 02 F6 | 	mov	arg02, result1
0c0f4     12 13 02 F6 | 	mov	arg01, local04
0c0f8     68 F7 B0 FD | 	call	#__system___float_mul
0c0fc     FD 24 02 F6 | 	mov	local04, result1
0c100     08 4E 05 F1 | 	add	fp, #8
0c104     A7 12 02 FB | 	rdlong	arg01, fp
0c108     08 4E 85 F1 | 	sub	fp, #8
0c10c     01 12 06 F1 | 	add	arg01, #1
0c110     09 13 52 F6 | 	abs	arg01, arg01 wc
0c114     1F 22 C6 C9 |  if_b	decod	local03, #31
0c118     00 22 06 36 |  if_ae	mov	local03, #0
0c11c     40 F3 B0 FD | 	call	#__system___float_fromuns
0c120     11 FB 61 F5 | 	xor	result1, local03
0c124     FD 14 02 F6 | 	mov	arg02, result1
0c128     12 13 02 F6 | 	mov	arg01, local04
0c12c     34 F7 B0 FD | 	call	#__system___float_mul
0c130     FD 12 02 F6 | 	mov	arg01, result1
0c134     68 00 B1 FD | 	call	#__system____builtin_sinf
0c138     FD 14 02 F6 | 	mov	arg02, result1
0c13c     13 13 02 F6 | 	mov	arg01, local05
0c140     20 F7 B0 FD | 	call	#__system___float_mul
0c144     FD 14 02 F6 | 	mov	arg02, result1
0c148     20 4E 05 F1 | 	add	fp, #32
0c14c     A7 12 02 FB | 	rdlong	arg01, fp
0c150     20 4E 85 F1 | 	sub	fp, #32
0c154     3C F3 B0 FD | 	call	#__system___float_add
0c158     20 4E 05 F1 | 	add	fp, #32
0c15c     A7 FA 61 FC | 	wrlong	result1, fp
0c160     18 4E 85 F1 | 	sub	fp, #24
0c164     A7 26 02 FB | 	rdlong	local05, fp
0c168     01 26 06 F1 | 	add	local05, #1
0c16c     A7 26 62 FC | 	wrlong	local05, fp
0c170     10 26 56 F2 | 	cmps	local05, #16 wc
0c174     14 FF 9F CD |  if_b	jmp	#LR__0922
0c178     08 4E 05 F1 | 	add	fp, #8
0c17c     A7 26 02 FB | 	rdlong	local05, fp
0c180     0B 26 66 F0 | 	shl	local05, #11
0c184     0C 00 00 FF 
0c188     CC E4 05 F1 | 	add	objptr, ##6348
0c18c     F2 26 02 F1 | 	add	local05, objptr
0c190     0C 4E 85 F1 | 	sub	fp, #12
0c194     A7 20 02 FB | 	rdlong	local02, fp
0c198     01 20 66 F0 | 	shl	local02, #1
0c19c     13 21 02 F1 | 	add	local02, local05
0c1a0     1C 4E 05 F1 | 	add	fp, #28
0c1a4     A7 12 02 FB | 	rdlong	arg01, fp
0c1a8     20 4E 85 F1 | 	sub	fp, #32
0c1ac     0C 00 00 FF 
0c1b0     CC E4 85 F1 | 	sub	objptr, ##6348
0c1b4     01 14 06 F6 | 	mov	arg02, #1
0c1b8     70 FB B0 FD | 	call	#__system___float_tointeger
0c1bc     10 FB 51 FC | 	wrword	result1, local02
0c1c0     04 4E 05 F1 | 	add	fp, #4
0c1c4     A7 26 02 FB | 	rdlong	local05, fp
0c1c8     01 26 06 F1 | 	add	local05, #1
0c1cc     A7 26 62 FC | 	wrlong	local05, fp
0c1d0     04 4E 85 F1 | 	sub	fp, #4
0c1d4     02 00 00 FF 
0c1d8     00 26 56 F2 | 	cmps	local05, ##1024 wc
0c1dc     9C FE 9F CD |  if_b	jmp	#LR__0921
0c1e0                 | LR__0923
0c1e0                 | LR__0924
0c1e0     A7 F0 03 F6 | 	mov	ptra, fp
0c1e4     B2 00 A0 FD | 	call	#popregs_
0c1e8                 | _do_defsnd_ret
0c1e8     2D 00 64 FD | 	ret
0c1ec                 | 
0c1ec                 | ' 
0c1ec                 | ' ' ---------------  List the program. 
0c1ec                 | ' 
0c1ec                 | ' sub do_list
0c1ec                 | _do_list
0c1ec     02 4A 05 F6 | 	mov	COUNT_, #2
0c1f0     A8 00 A0 FD | 	call	#pushregs_
0c1f4     B8 F0 07 F1 | 	add	ptra, #184
0c1f8     04 4E 05 F1 | 	add	fp, #4
0c1fc     A7 00 68 FC | 	wrlong	#0, fp
0c200     04 4E 05 F1 | 	add	fp, #4
0c204     FF FF BF FF 
0c208     A7 FE 6B FC | 	wrlong	##2147483647, fp
0c20c     08 4E 85 F1 | 	sub	fp, #8
0c210     69 00 00 FF 
0c214     54 E5 05 F1 | 	add	objptr, ##54100
0c218     F2 1E 02 FB | 	rdlong	local01, objptr
0c21c     0F 17 02 F6 | 	mov	arg03, local01
0c220     01 16 66 F0 | 	shl	arg03, #1
0c224     0F 17 02 F1 | 	add	arg03, local01
0c228     02 16 66 F0 | 	shl	arg03, #2
0c22c     03 00 00 FF 
0c230     04 E4 85 F1 | 	sub	objptr, ##1540
0c234     F2 16 02 F1 | 	add	arg03, objptr
0c238     0B 17 02 FB | 	rdlong	arg03, arg03
0c23c     A7 16 62 FC | 	wrlong	arg03, fp
0c240                 | ' 
0c240                 | ' startline=0 : endline=$7FFFFFFF
0c240                 | ' numpar=compiledline(lineptr_e).result.uresult
0c240                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
0c240     01 16 0E F2 | 	cmp	arg03, #1 wz
0c244     66 00 00 FF 
0c248     50 E5 85 F1 | 	sub	objptr, ##52560
0c24c     3C 00 90 5D |  if_ne	jmp	#LR__0930
0c250     90 D6 BF FD | 	call	#_pop
0c254     FF 1E 02 F6 | 	mov	local01, result3
0c258     0C 4E 05 F1 | 	add	fp, #12
0c25c     A7 FA 61 FC | 	wrlong	result1, fp
0c260     04 4E 05 F1 | 	add	fp, #4
0c264     A7 FC 61 FC | 	wrlong	result2, fp
0c268     04 4E 05 F1 | 	add	fp, #4
0c26c     A7 1E 62 FC | 	wrlong	local01, fp
0c270     08 4E 85 F1 | 	sub	fp, #8
0c274     A7 12 02 F6 | 	mov	arg01, fp
0c278     0C 4E 85 F1 | 	sub	fp, #12
0c27c     D4 4B B0 FD | 	call	#_converttoint
0c280     04 4E 05 F1 | 	add	fp, #4
0c284     A7 FA 61 FC | 	wrlong	result1, fp
0c288     04 4E 85 F1 | 	sub	fp, #4
0c28c                 | LR__0930
0c28c                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
0c28c     A7 16 02 FB | 	rdlong	arg03, fp
0c290     02 16 0E F2 | 	cmp	arg03, #2 wz
0c294     7C 00 90 5D |  if_ne	jmp	#LR__0931
0c298     48 D6 BF FD | 	call	#_pop
0c29c     FF 1E 02 F6 | 	mov	local01, result3
0c2a0     0C 4E 05 F1 | 	add	fp, #12
0c2a4     A7 FA 61 FC | 	wrlong	result1, fp
0c2a8     04 4E 05 F1 | 	add	fp, #4
0c2ac     A7 FC 61 FC | 	wrlong	result2, fp
0c2b0     04 4E 05 F1 | 	add	fp, #4
0c2b4     A7 1E 62 FC | 	wrlong	local01, fp
0c2b8     08 4E 85 F1 | 	sub	fp, #8
0c2bc     A7 12 02 F6 | 	mov	arg01, fp
0c2c0     0C 4E 85 F1 | 	sub	fp, #12
0c2c4     8C 4B B0 FD | 	call	#_converttoint
0c2c8     FD 1E 02 F6 | 	mov	local01, result1
0c2cc     08 4E 05 F1 | 	add	fp, #8
0c2d0     A7 1E 62 FC | 	wrlong	local01, fp
0c2d4     08 4E 85 F1 | 	sub	fp, #8
0c2d8     08 D6 BF FD | 	call	#_pop
0c2dc     FF 1E 02 F6 | 	mov	local01, result3
0c2e0     0C 4E 05 F1 | 	add	fp, #12
0c2e4     A7 FA 61 FC | 	wrlong	result1, fp
0c2e8     04 4E 05 F1 | 	add	fp, #4
0c2ec     A7 FC 61 FC | 	wrlong	result2, fp
0c2f0     04 4E 05 F1 | 	add	fp, #4
0c2f4     A7 1E 62 FC | 	wrlong	local01, fp
0c2f8     08 4E 85 F1 | 	sub	fp, #8
0c2fc     A7 12 02 F6 | 	mov	arg01, fp
0c300     0C 4E 85 F1 | 	sub	fp, #12
0c304     4C 4B B0 FD | 	call	#_converttoint
0c308     04 4E 05 F1 | 	add	fp, #4
0c30c     A7 FA 61 FC | 	wrlong	result1, fp
0c310     04 4E 85 F1 | 	sub	fp, #4
0c314                 | LR__0931
0c314                 | ' 
0c314                 | ' 
0c314                 | ' print
0c314     00 12 06 F6 | 	mov	arg01, #0
0c318     60 23 B1 FD | 	call	#__system___getiolock_0423
0c31c     FD 12 02 F6 | 	mov	arg01, result1
0c320     54 CA B0 FD | 	call	#__system___lockmem
0c324     00 12 06 F6 | 	mov	arg01, #0
0c328     0A 14 06 F6 | 	mov	arg02, #10
0c32c     00 16 06 F6 | 	mov	arg03, #0
0c330     E0 D6 B0 FD | 	call	#__system___basic_print_char
0c334     00 12 06 F6 | 	mov	arg01, #0
0c338     40 23 B1 FD | 	call	#__system___getiolock_0423
0c33c     FD 00 68 FC | 	wrlong	#0, result1
0c340     69 00 00 FF 
0c344     58 E5 05 F1 | 	add	objptr, ##54104
0c348     F2 20 02 FB | 	rdlong	local02, objptr
0c34c     11 00 00 FF 
0c350     74 E4 05 F1 | 	add	objptr, ##8820
0c354     F2 20 62 FC | 	wrlong	local02, objptr
0c358     7A 00 00 FF 
0c35c     CC E5 85 F1 | 	sub	objptr, ##62924
0c360                 | ' do 
0c360                 | LR__0932
0c360     20 4E 05 F1 | 	add	fp, #32
0c364     A7 12 02 F6 | 	mov	arg01, fp
0c368     20 4E 85 F1 | 	sub	fp, #32
0c36c     7A 00 00 FF 
0c370     CC E5 05 F1 | 	add	objptr, ##62924
0c374     F2 14 02 FB | 	rdlong	arg02, objptr
0c378     18 16 06 F6 | 	mov	arg03, #24
0c37c     6F 00 00 FF 
0c380     0C E5 85 F1 | 	sub	objptr, ##57100
0c384     00 BF B0 FD | 	call	#_psram_spin2_read1
0c388     0B 00 00 FF 
0c38c     C0 E4 85 F1 | 	sub	objptr, ##5824
0c390                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart
0c390                 | '   if header(0)<> $FFFFFFFF then
0c390     20 4E 05 F1 | 	add	fp, #32
0c394     A7 20 02 FB | 	rdlong	local02, fp
0c398     20 4E 85 F1 | 	sub	fp, #32
0c39c     FF FF 7F FF 
0c3a0     FF 21 0E F2 | 	cmp	local02, ##-1 wz
0c3a4     A8 00 90 AD |  if_e	jmp	#LR__0934
0c3a8     38 4E 05 F1 | 	add	fp, #56
0c3ac     3F 16 06 F6 | 	mov	arg03, #63
0c3b0     28 16 62 FD | 	setq	arg03
0c3b4     A7 00 68 FC | 	wrlong	#0, fp
0c3b8     A7 12 02 F6 | 	mov	arg01, fp
0c3bc     10 4E 85 F1 | 	sub	fp, #16
0c3c0     A7 14 02 FB | 	rdlong	arg02, fp
0c3c4     04 4E 05 F1 | 	add	fp, #4
0c3c8     A7 16 02 FB | 	rdlong	arg03, fp
0c3cc     2C 4E 85 F1 | 	sub	fp, #44
0c3d0     0B 00 00 FF 
0c3d4     C0 E4 05 F1 | 	add	objptr, ##5824
0c3d8     AC BE B0 FD | 	call	#_psram_spin2_read1
0c3dc     0B 00 00 FF 
0c3e0     C0 E4 85 F1 | 	sub	objptr, ##5824
0c3e4                 | '     longfill(linebuf,0,64)
0c3e4                 | '     psram.read1(varptr(linebuf),header(2),header(3))
0c3e4                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
0c3e4     20 4E 05 F1 | 	add	fp, #32
0c3e8     A7 20 02 FB | 	rdlong	local02, fp
0c3ec     1C 4E 85 F1 | 	sub	fp, #28
0c3f0     A7 1E 02 FB | 	rdlong	local01, fp
0c3f4     04 4E 85 F1 | 	sub	fp, #4
0c3f8     0F 21 52 F2 | 	cmps	local02, local01 wc
0c3fc     30 00 90 CD |  if_b	jmp	#LR__0933
0c400     20 4E 05 F1 | 	add	fp, #32
0c404     A7 20 02 FB | 	rdlong	local02, fp
0c408     18 4E 85 F1 | 	sub	fp, #24
0c40c     A7 16 02 FB | 	rdlong	arg03, fp
0c410     08 4E 85 F1 | 	sub	fp, #8
0c414     0B 21 5A F2 | 	cmps	local02, arg03 wcz
0c418     14 00 90 1D |  if_a	jmp	#LR__0933
0c41c     38 4E 05 F1 | 	add	fp, #56
0c420     A7 12 02 F6 | 	mov	arg01, fp
0c424     38 4E 85 F1 | 	sub	fp, #56
0c428                 | ' 
0c428                 | ' write(text)
0c428     24 B9 B0 FD | 	call	#_hg010b_spin2_write
0c42c                 | ' crlf
0c42c     80 BA B0 FD | 	call	#_hg010b_spin2_crlf
0c430                 | LR__0933
0c430     34 4E 05 F1 | 	add	fp, #52
0c434     A7 20 02 FB | 	rdlong	local02, fp
0c438     34 4E 85 F1 | 	sub	fp, #52
0c43c     7A 00 00 FF 
0c440     CC E5 05 F1 | 	add	objptr, ##62924
0c444     F2 20 62 FC | 	wrlong	local02, objptr
0c448     7A 00 00 FF 
0c44c     CC E5 85 F1 | 	sub	objptr, ##62924
0c450                 | LR__0934
0c450     34 4E 05 F1 | 	add	fp, #52
0c454     A7 20 02 FB | 	rdlong	local02, fp
0c458     34 4E 85 F1 | 	sub	fp, #52
0c45c     FF FF 3F FF 
0c460     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0c464     20 4E 05 51 |  if_ne	add	fp, #32
0c468     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0c46c     20 4E 85 51 |  if_ne	sub	fp, #32
0c470     FF FF 7F 5F 
0c474     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0c478     E4 FE 9F 5D |  if_ne	jmp	#LR__0932
0c47c     A7 F0 03 F6 | 	mov	ptra, fp
0c480     B2 00 A0 FD | 	call	#popregs_
0c484                 | _do_list_ret
0c484     2D 00 64 FD | 	ret
0c488                 | 
0c488                 | ' 
0c488                 | ' '---------------- Clear the program
0c488                 | ' 
0c488                 | ' sub do_new
0c488                 | _do_new
0c488     03 4A 05 F6 | 	mov	COUNT_, #3
0c48c     A8 00 A0 FD | 	call	#pushregs_
0c490     00 12 06 F6 | 	mov	arg01, #0
0c494     01 14 66 F6 | 	neg	arg02, #1
0c498     01 16 06 F6 | 	mov	arg03, #1
0c49c     00 18 06 F6 | 	mov	arg04, #0
0c4a0     0B 00 00 FF 
0c4a4     C0 E4 05 F1 | 	add	objptr, ##5824
0c4a8                 | '     return fill(addr, pattern, count, listPtr, 4)
0c4a8     04 1A 06 F6 | 	mov	arg05, #4
0c4ac     10 BF B0 FD | 	call	#_psram_spin2_fill
0c4b0     49 00 00 FF 
0c4b4     1C E4 05 F1 | 	add	objptr, ##37404
0c4b8     F2 00 68 FC | 	wrlong	#0, objptr
0c4bc     15 00 00 FF 
0c4c0     7C E4 05 F1 | 	add	objptr, ##10876
0c4c4     F2 00 68 FC | 	wrlong	#0, objptr
0c4c8     0F 00 00 FF 
0c4cc     2C E5 05 F1 | 	add	objptr, ##7980
0c4d0     F2 00 68 FC | 	wrlong	#0, objptr
0c4d4     04 E4 05 F1 | 	add	objptr, #4
0c4d8     F2 00 68 FC | 	wrlong	#0, objptr
0c4dc     16 00 00 FF 
0c4e0     5C E5 85 F1 | 	sub	objptr, ##11612
0c4e4     F2 00 68 FC | 	wrlong	#0, objptr
0c4e8     07 00 00 FF 
0c4ec     24 E4 05 F1 | 	add	objptr, ##3620
0c4f0     F2 00 68 FC | 	wrlong	#0, objptr
0c4f4     07 00 00 FF 
0c4f8     20 E4 85 F1 | 	sub	objptr, ##3616
0c4fc     F2 00 68 FC | 	wrlong	#0, objptr
0c500     0F 00 00 FF 
0c504     34 E4 05 F1 | 	add	objptr, ##7732
0c508     F2 00 68 FC | 	wrlong	#0, objptr
0c50c     08 00 00 FF 
0c510     08 E4 85 F1 | 	sub	objptr, ##4104
0c514     F2 00 68 FC | 	wrlong	#0, objptr
0c518     04 E4 05 F1 | 	add	objptr, #4
0c51c     FF FF FF FF 
0c520     F2 FE 6B FC | 	wrlong	##-1, objptr
0c524     0F 00 00 FF 
0c528     4C E5 05 F1 | 	add	objptr, ##8012
0c52c     F2 00 68 FC | 	wrlong	#0, objptr
0c530                 | ' 
0c530                 | ' pslpoke(0,$FFFFFFFF)
0c530                 | ' varnum=0
0c530                 | ' programstart=0 :runptr=0 : runptr2=0
0c530                 | ' stackpointer=0
0c530                 | ' lineptr=0 
0c530                 | ' programptr=0 : stringptr=0
0c530                 | ' lastline=0 : lastlineptr=-1 :fortop=0
0c530                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
0c530     00 1E 06 F6 | 	mov	local01, #0
0c534     07 00 00 FF 
0c538     40 E5 85 F1 | 	sub	objptr, ##3904
0c53c     97 16 48 FB | 	callpa	#(@LR__0941-@LR__0940)>>2,fcache_load_ptr_
0c540                 | LR__0940
0c540     0F 21 02 F6 | 	mov	local02, local01
0c544     02 20 66 F0 | 	shl	local02, #2
0c548     0F 21 02 F1 | 	add	local02, local01
0c54c     02 20 66 F0 | 	shl	local02, #2
0c550     F2 20 02 F1 | 	add	local02, objptr
0c554     08 20 06 F1 | 	add	local02, #8
0c558     FF FF FF FF 
0c55c     10 FF 6B FC | 	wrlong	##-1, local02
0c560     01 1E 06 F1 | 	add	local01, #1
0c564     81 1E 56 F2 | 	cmps	local01, #129 wc
0c568     D4 FF 9F CD |  if_b	jmp	#LR__0940
0c56c                 | LR__0941
0c56c     71 00 00 FF 
0c570     6C E5 85 F1 | 	sub	objptr, ##58220
0c574                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i))
0c574     00 1E 06 F6 | 	mov	local01, #0
0c578                 | LR__0942
0c578     0F 21 02 F6 | 	mov	local02, local01
0c57c     02 20 66 F0 | 	shl	local02, #2
0c580     7A 00 00 FF 
0c584     08 E5 05 F1 | 	add	objptr, ##62728
0c588     F2 20 02 F1 | 	add	local02, objptr
0c58c     10 21 0A FB | 	rdlong	local02, local02 wz
0c590     7A 00 00 FF 
0c594     08 E5 85 F1 | 	sub	objptr, ##62728
0c598     34 00 90 AD |  if_e	jmp	#LR__0943
0c59c     0F 13 02 F6 | 	mov	arg01, local01
0c5a0     00 14 06 F6 | 	mov	arg02, #0
0c5a4     00 16 06 F6 | 	mov	arg03, #0
0c5a8     30 A8 B0 FD | 	call	#_hg010b_spin2_setspritesize
0c5ac     0F 21 02 F6 | 	mov	local02, local01
0c5b0     02 20 66 F0 | 	shl	local02, #2
0c5b4     7A 00 00 FF 
0c5b8     08 E5 05 F1 | 	add	objptr, ##62728
0c5bc     F2 20 02 F1 | 	add	local02, objptr
0c5c0     10 13 02 FB | 	rdlong	arg01, local02
0c5c4     7A 00 00 FF 
0c5c8     08 E5 85 F1 | 	sub	objptr, ##62728
0c5cc     9C 06 B1 FD | 	call	#__system___gc_free
0c5d0                 | LR__0943
0c5d0     7A 00 00 FF 
0c5d4     5C E5 05 F1 | 	add	objptr, ##62812
0c5d8     00 C0 9F FF 
0c5dc     F2 00 68 FC | 	wrlong	##1065353216, objptr
0c5e0     04 E4 05 F1 | 	add	objptr, #4
0c5e4     00 C0 9F FF 
0c5e8     F2 00 68 FC | 	wrlong	##1065353216, objptr
0c5ec     7A 00 00 FF 
0c5f0     60 E5 85 F1 | 	sub	objptr, ##62816
0c5f4     F2 22 02 FB | 	rdlong	local03, objptr
0c5f8     7A 00 00 FF 
0c5fc     4C E5 05 F1 | 	add	objptr, ##62796
0c600     F2 22 62 FC | 	wrlong	local03, objptr
0c604     7A 00 00 FF 
0c608     4C E5 85 F1 | 	sub	objptr, ##62796
0c60c     11 12 06 F6 | 	mov	arg01, #17
0c610     08 14 06 F6 | 	mov	arg02, #8
0c614     10 16 06 F6 | 	mov	arg03, #16
0c618     C0 A7 B0 FD | 	call	#_hg010b_spin2_setspritesize
0c61c     10 12 06 F6 | 	mov	arg01, #16
0c620     20 14 06 F6 | 	mov	arg02, #32
0c624     20 16 06 F6 | 	mov	arg03, #32
0c628     B0 A7 B0 FD | 	call	#_hg010b_spin2_setspritesize
0c62c     01 1E 06 F1 | 	add	local01, #1
0c630     10 1E 56 F2 | 	cmps	local01, #16 wc
0c634     40 FF 9F CD |  if_b	jmp	#LR__0942
0c638     A7 F0 03 F6 | 	mov	ptra, fp
0c63c     B2 00 A0 FD | 	call	#popregs_
0c640                 | _do_new_ret
0c640     2D 00 64 FD | 	ret
0c644                 | 
0c644                 | ' 
0c644                 | ' '----------------------- goto
0c644                 | ' sub do_fast_goto
0c644                 | _do_fast_goto
0c644     02 4A 05 F6 | 	mov	COUNT_, #2
0c648     A8 00 A0 FD | 	call	#pushregs_
0c64c                 | _do_fast_goto_enter
0c64c     69 00 00 FF 
0c650     54 E5 05 F1 | 	add	objptr, ##54100
0c654     F2 12 02 FB | 	rdlong	arg01, objptr
0c658     09 1F 02 F6 | 	mov	local01, arg01
0c65c     01 1E 66 F0 | 	shl	local01, #1
0c660     09 1F 02 F1 | 	add	local01, arg01
0c664     02 1E 66 F0 | 	shl	local01, #2
0c668     03 00 00 FF 
0c66c     04 E4 85 F1 | 	sub	objptr, ##1540
0c670     F2 1E 02 F1 | 	add	local01, objptr
0c674     0F 21 02 FB | 	rdlong	local02, local01
0c678     10 13 02 F6 | 	mov	arg01, local02
0c67c     66 00 00 FF 
0c680     50 E5 85 F1 | 	sub	objptr, ##52560
0c684     88 93 B0 FD | 	call	#_pslpeek
0c688     FD 12 02 F6 | 	mov	arg01, result1
0c68c                 | ' 
0c68c                 | ' testptr=compiledline(lineptr_e).result.uresult
0c68c                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
0c68c                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
0c68c     69 00 00 FF 
0c690     54 E5 05 F1 | 	add	objptr, ##54100
0c694     F2 FA 01 FB | 	rdlong	result1, objptr
0c698     FD 1E 02 F6 | 	mov	local01, result1
0c69c     01 1E 66 F0 | 	shl	local01, #1
0c6a0     FD 1E 02 F1 | 	add	local01, result1
0c6a4     02 1E 66 F0 | 	shl	local01, #2
0c6a8     03 00 00 FF 
0c6ac     04 E4 85 F1 | 	sub	objptr, ##1540
0c6b0     F2 1E 02 F1 | 	add	local01, objptr
0c6b4     04 1E 06 F1 | 	add	local01, #4
0c6b8     0F 1F 02 FB | 	rdlong	local01, local01
0c6bc     0F 13 0A F2 | 	cmp	arg01, local01 wz
0c6c0     66 00 00 FF 
0c6c4     50 E5 85 F1 | 	sub	objptr, ##52560
0c6c8     58 00 90 5D |  if_ne	jmp	#LR__0950
0c6cc     79 00 00 FF 
0c6d0     84 E4 05 F1 | 	add	objptr, ##62084
0c6d4     F2 20 62 FC | 	wrlong	local02, objptr
0c6d8     0F 00 00 FF 
0c6dc     34 E5 85 F1 | 	sub	objptr, ##7988
0c6e0     F2 20 02 FB | 	rdlong	local02, objptr
0c6e4     01 20 86 F1 | 	sub	local02, #1
0c6e8     04 E4 05 F1 | 	add	objptr, #4
0c6ec     F2 20 62 FC | 	wrlong	local02, objptr
0c6f0                 | '   runptr=testptr
0c6f0                 | '   lineptr_e=lineptr-1
0c6f0                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
0c6f0     0F 00 00 FF 
0c6f4     54 E5 05 F1 | 	add	objptr, ##8020
0c6f8     F2 20 02 FB | 	rdlong	local02, objptr
0c6fc     79 00 00 FF 
0c700     A8 E4 85 F1 | 	sub	objptr, ##62120
0c704     FF FF 3F FF 
0c708     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0c70c     79 00 00 AF 
0c710     A8 E4 05 A1 |  if_e	add	objptr, ##62120
0c714     F2 00 68 AC |  if_e	wrlong	#0, objptr
0c718     79 00 00 AF 
0c71c     A8 E4 85 A1 |  if_e	sub	objptr, ##62120
0c720     04 00 90 FD | 	jmp	#LR__0951
0c724                 | LR__0950
0c724     0C 00 B0 FD | 	call	#_do_find_goto
0c728                 | LR__0951
0c728     A7 F0 03 F6 | 	mov	ptra, fp
0c72c     B2 00 A0 FD | 	call	#popregs_
0c730                 | _do_fast_goto_ret
0c730     2D 00 64 FD | 	ret
0c734                 | 
0c734                 | ' 
0c734                 | ' 
0c734                 | ' 
0c734                 | ' 
0c734                 | ' sub do_find_goto
0c734                 | _do_find_goto
0c734     03 4A 05 F6 | 	mov	COUNT_, #3
0c738     A8 00 A0 FD | 	call	#pushregs_
0c73c     24 F0 07 F1 | 	add	ptra, #36
0c740                 | _do_find_goto_enter
0c740     69 00 00 FF 
0c744     54 E5 05 F1 | 	add	objptr, ##54100
0c748     F2 1E 02 FB | 	rdlong	local01, objptr
0c74c     0F 21 02 F6 | 	mov	local02, local01
0c750     01 20 66 F0 | 	shl	local02, #1
0c754     0F 21 02 F1 | 	add	local02, local01
0c758     02 20 66 F0 | 	shl	local02, #2
0c75c     03 00 00 FF 
0c760     04 E4 85 F1 | 	sub	objptr, ##1540
0c764     F2 20 02 F1 | 	add	local02, objptr
0c768     04 20 06 F1 | 	add	local02, #4
0c76c     10 21 02 FB | 	rdlong	local02, local02
0c770     A7 20 62 FC | 	wrlong	local02, fp
0c774     03 00 00 FF 
0c778     08 E4 05 F1 | 	add	objptr, ##1544
0c77c     F2 22 02 FB | 	rdlong	local03, objptr
0c780     69 00 00 FF 
0c784     58 E5 85 F1 | 	sub	objptr, ##54104
0c788     04 4E 05 F1 | 	add	fp, #4
0c78c     A7 22 62 FC | 	wrlong	local03, fp
0c790     04 4E 85 F1 | 	sub	fp, #4
0c794                 | ' 
0c794                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
0c794                 | '  ' print "find goto"                                                                     'print gotoline 
0c794                 | ' gotoptr=programstart
0c794                 | ' do
0c794                 | LR__0960
0c794     0C 4E 05 F1 | 	add	fp, #12
0c798     A7 12 02 F6 | 	mov	arg01, fp
0c79c     08 4E 85 F1 | 	sub	fp, #8
0c7a0     A7 14 02 FB | 	rdlong	arg02, fp
0c7a4     04 4E 85 F1 | 	sub	fp, #4
0c7a8     18 16 06 F6 | 	mov	arg03, #24
0c7ac     0B 00 00 FF 
0c7b0     C0 E4 05 F1 | 	add	objptr, ##5824
0c7b4     D0 BA B0 FD | 	call	#_psram_spin2_read1
0c7b8     0B 00 00 FF 
0c7bc     C0 E4 85 F1 | 	sub	objptr, ##5824
0c7c0                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
0c7c0                 | '   if gotoheader(0)<>$FFFFFFFF then
0c7c0     0C 4E 05 F1 | 	add	fp, #12
0c7c4     A7 22 02 FB | 	rdlong	local03, fp
0c7c8     0C 4E 85 F1 | 	sub	fp, #12
0c7cc     FF FF 7F FF 
0c7d0     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0c7d4     24 00 90 AD |  if_e	jmp	#LR__0961
0c7d8     04 4E 05 F1 | 	add	fp, #4
0c7dc     A7 22 02 FB | 	rdlong	local03, fp
0c7e0     04 4E 05 F1 | 	add	fp, #4
0c7e4     A7 22 62 FC | 	wrlong	local03, fp
0c7e8     18 4E 05 F1 | 	add	fp, #24
0c7ec     A7 22 02 FB | 	rdlong	local03, fp
0c7f0     1C 4E 85 F1 | 	sub	fp, #28
0c7f4     A7 22 62 FC | 	wrlong	local03, fp
0c7f8     04 4E 85 F1 | 	sub	fp, #4
0c7fc                 | LR__0961
0c7fc     20 4E 05 F1 | 	add	fp, #32
0c800     A7 22 02 FB | 	rdlong	local03, fp
0c804     20 4E 85 F1 | 	sub	fp, #32
0c808     FF FF 3F FF 
0c80c     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0c810     0C 4E 05 51 |  if_ne	add	fp, #12
0c814     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0c818     0C 4E 85 51 |  if_ne	sub	fp, #12
0c81c     FF FF 7F 5F 
0c820     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0c824     18 00 90 AD |  if_e	jmp	#LR__0962
0c828     0C 4E 05 F1 | 	add	fp, #12
0c82c     A7 22 02 FB | 	rdlong	local03, fp
0c830     0C 4E 85 F1 | 	sub	fp, #12
0c834     A7 20 02 FB | 	rdlong	local02, fp
0c838     10 23 0A F2 | 	cmp	local03, local02 wz
0c83c     54 FF 9F 5D |  if_ne	jmp	#LR__0960
0c840                 | LR__0962
0c840                 | ' 
0c840                 | ' if gotoheader(0)=gotoline then
0c840     0C 4E 05 F1 | 	add	fp, #12
0c844     A7 22 02 FB | 	rdlong	local03, fp
0c848     0C 4E 85 F1 | 	sub	fp, #12
0c84c     A7 1E 02 FB | 	rdlong	local01, fp
0c850     0F 23 0A F2 | 	cmp	local03, local01 wz
0c854     D8 00 90 5D |  if_ne	jmp	#LR__0963
0c858     69 00 00 FF 
0c85c     54 E5 05 F1 | 	add	objptr, ##54100
0c860     F2 1E 02 FB | 	rdlong	local01, objptr
0c864     0F 21 02 F6 | 	mov	local02, local01
0c868     01 20 66 F0 | 	shl	local02, #1
0c86c     0F 21 02 F1 | 	add	local02, local01
0c870     02 20 66 F0 | 	shl	local02, #2
0c874     03 00 00 FF 
0c878     04 E4 85 F1 | 	sub	objptr, ##1540
0c87c     F2 20 02 F1 | 	add	local02, objptr
0c880     08 4E 05 F1 | 	add	fp, #8
0c884     A7 22 02 FB | 	rdlong	local03, fp
0c888     10 23 62 FC | 	wrlong	local03, local02
0c88c     03 00 00 FF 
0c890     04 E4 05 F1 | 	add	objptr, ##1540
0c894     F2 1E 02 FB | 	rdlong	local01, objptr
0c898     0F 21 02 F6 | 	mov	local02, local01
0c89c     01 20 66 F0 | 	shl	local02, #1
0c8a0     0F 21 02 F1 | 	add	local02, local01
0c8a4     02 20 66 F0 | 	shl	local02, #2
0c8a8     03 00 00 FF 
0c8ac     04 E4 85 F1 | 	sub	objptr, ##1540
0c8b0     F2 20 02 F1 | 	add	local02, objptr
0c8b4     08 20 06 F1 | 	add	local02, #8
0c8b8     10 9D 68 FC | 	wrlong	#78, local02
0c8bc     03 00 00 FF 
0c8c0     04 E4 05 F1 | 	add	objptr, ##1540
0c8c4     F2 20 02 FB | 	rdlong	local02, objptr
0c8c8     10 13 02 F6 | 	mov	arg01, local02
0c8cc     01 12 66 F0 | 	shl	arg01, #1
0c8d0     10 13 02 F1 | 	add	arg01, local02
0c8d4     02 12 66 F0 | 	shl	arg01, #2
0c8d8     03 00 00 FF 
0c8dc     04 E4 85 F1 | 	sub	objptr, ##1540
0c8e0     F2 12 02 F1 | 	add	arg01, objptr
0c8e4     12 00 00 FF 
0c8e8     3C E5 05 F1 | 	add	objptr, ##9532
0c8ec     F2 14 02 FB | 	rdlong	arg02, objptr
0c8f0     02 22 06 F6 | 	mov	local03, #2
0c8f4     10 23 02 F1 | 	add	local03, local02
0c8f8     14 00 00 FF 
0c8fc     54 E5 85 F1 | 	sub	objptr, ##10580
0c900     F2 16 02 FB | 	rdlong	arg03, objptr
0c904     0B 23 02 FD | 	qmul	local03, arg03
0c908     08 4E 85 F1 | 	sub	fp, #8
0c90c     59 00 00 FF 
0c910     78 E4 85 F1 | 	sub	objptr, ##45688
0c914     18 22 62 FD | 	getqx	local03
0c918     11 15 02 F1 | 	add	arg02, local03
0c91c     04 BA B0 FD | 	call	#_psram_spin2_write
0c920     0B 00 00 FF 
0c924     C0 E4 85 F1 | 	sub	objptr, ##5824
0c928     18 FD BF FD | 	call	#_do_fast_goto
0c92c     08 00 90 FD | 	jmp	#LR__0964
0c930                 | LR__0963
0c930     26 12 06 F6 | 	mov	arg01, #38
0c934     1C 8F B0 FD | 	call	#_printerror
0c938                 | LR__0964
0c938     A7 F0 03 F6 | 	mov	ptra, fp
0c93c     B2 00 A0 FD | 	call	#popregs_
0c940                 | _do_find_goto_ret
0c940     2D 00 64 FD | 	ret
0c944                 | 
0c944                 | ' 
0c944                 | ' sub do_slow_goto
0c944                 | _do_slow_goto
0c944                 | _do_slow_goto_ret
0c944     2D 00 64 FD | 	ret
0c948                 | 
0c948                 | ' 
0c948                 | ' '----------------------- Error processing
0c948                 | ' 
0c948                 | ' sub do_error
0c948                 | _do_error
0c948     01 4A 05 F6 | 	mov	COUNT_, #1
0c94c     A8 00 A0 FD | 	call	#pushregs_
0c950     69 00 00 FF 
0c954     54 E5 05 F1 | 	add	objptr, ##54100
0c958     F2 18 02 FB | 	rdlong	arg04, objptr
0c95c     0C 17 02 F6 | 	mov	arg03, arg04
0c960     01 16 66 F0 | 	shl	arg03, #1
0c964     0C 17 02 F1 | 	add	arg03, arg04
0c968     02 16 66 F0 | 	shl	arg03, #2
0c96c     03 00 00 FF 
0c970     04 E4 85 F1 | 	sub	objptr, ##1540
0c974     F2 16 02 F1 | 	add	arg03, objptr
0c978     0B 1F 02 FB | 	rdlong	local01, arg03
0c97c                 | ' r=compiledline(lineptr_e).result.uresult
0c97c                 | ' print "Error ";r;": ";errors$(r)
0c97c     00 12 06 F6 | 	mov	arg01, #0
0c980     66 00 00 FF 
0c984     50 E5 85 F1 | 	sub	objptr, ##52560
0c988     F0 1C B1 FD | 	call	#__system___getiolock_0423
0c98c     FD 12 02 F6 | 	mov	arg01, result1
0c990     E4 C3 B0 FD | 	call	#__system___lockmem
0c994     44 01 00 FF 
0c998     0B 14 06 F6 | 	mov	arg02, ##@LR__4582
0c99c     00 12 06 F6 | 	mov	arg01, #0
0c9a0     00 16 06 F6 | 	mov	arg03, #0
0c9a4     C4 D0 B0 FD | 	call	#__system___basic_print_string
0c9a8     00 12 06 F6 | 	mov	arg01, #0
0c9ac     0F 15 02 F6 | 	mov	arg02, local01
0c9b0     00 16 06 F6 | 	mov	arg03, #0
0c9b4     0A 18 06 F6 | 	mov	arg04, #10
0c9b8     34 D1 B0 FD | 	call	#__system___basic_print_unsigned
0c9bc     44 01 00 FF 
0c9c0     12 14 06 F6 | 	mov	arg02, ##@LR__4583
0c9c4     00 12 06 F6 | 	mov	arg01, #0
0c9c8     00 16 06 F6 | 	mov	arg03, #0
0c9cc     9C D0 B0 FD | 	call	#__system___basic_print_string
0c9d0     02 1E 66 F0 | 	shl	local01, #2
0c9d4     64 00 00 FF 
0c9d8     50 E5 05 F1 | 	add	objptr, ##51536
0c9dc     F2 1E 02 F1 | 	add	local01, objptr
0c9e0     0F 15 02 FB | 	rdlong	arg02, local01
0c9e4     00 12 06 F6 | 	mov	arg01, #0
0c9e8     00 16 06 F6 | 	mov	arg03, #0
0c9ec     64 00 00 FF 
0c9f0     50 E5 85 F1 | 	sub	objptr, ##51536
0c9f4     74 D0 B0 FD | 	call	#__system___basic_print_string
0c9f8     00 12 06 F6 | 	mov	arg01, #0
0c9fc     0A 14 06 F6 | 	mov	arg02, #10
0ca00     00 16 06 F6 | 	mov	arg03, #0
0ca04     0C D0 B0 FD | 	call	#__system___basic_print_char
0ca08     00 12 06 F6 | 	mov	arg01, #0
0ca0c     6C 1C B1 FD | 	call	#__system___getiolock_0423
0ca10     FD 00 68 FC | 	wrlong	#0, result1
0ca14     A7 F0 03 F6 | 	mov	ptra, fp
0ca18     B2 00 A0 FD | 	call	#popregs_
0ca1c                 | _do_error_ret
0ca1c     2D 00 64 FD | 	ret
0ca20                 | 
0ca20                 | ' 
0ca20                 | ' 
0ca20                 | ' '------------------ Assigning to a variable  
0ca20                 | ' 
0ca20                 | ' function  convertstring(psaddr as ulong) as string
0ca20                 | _convertstring
0ca20     04 4A 05 F6 | 	mov	COUNT_, #4
0ca24     A8 00 A0 FD | 	call	#pushregs_
0ca28     09 1F 02 F6 | 	mov	local01, arg01
0ca2c     E0 8F B0 FD | 	call	#_pslpeek
0ca30     FD 20 02 F6 | 	mov	local02, result1
0ca34     44 01 00 FF 
0ca38     15 22 06 F6 | 	mov	local03, ##@LR__4584
0ca3c                 | ' 'print "in convertstring: psaddr=";psaddr
0ca3c                 | ' l=pslpeek(psaddr)
0ca3c                 | ' 'print "in convertstring: len=";l
0ca3c                 | ' s="" 
0ca3c                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0ca3c     01 24 06 F6 | 	mov	local04, #1
0ca40     01 20 06 F1 | 	add	local02, #1
0ca44                 | LR__0970
0ca44     10 25 52 F2 | 	cmps	local04, local02 wc
0ca48     30 00 90 3D |  if_ae	jmp	#LR__0971
0ca4c     0F 13 02 F6 | 	mov	arg01, local01
0ca50     03 12 06 F1 | 	add	arg01, #3
0ca54     12 13 02 F1 | 	add	arg01, local04
0ca58     5C 8F B0 FD | 	call	#_pspeek
0ca5c     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0ca60     E8 E4 B0 FD | 	call	#__system__Chr_S
0ca64     FD 14 02 F6 | 	mov	arg02, result1
0ca68     11 13 02 F6 | 	mov	arg01, local03
0ca6c     64 C3 B0 FD | 	call	#__system___string_concat
0ca70     FD 22 02 F6 | 	mov	local03, result1
0ca74     01 24 06 F1 | 	add	local04, #1
0ca78     C8 FF 9F FD | 	jmp	#LR__0970
0ca7c                 | LR__0971
0ca7c                 | ' 'print "in convertstring: str=";s
0ca7c                 | ' return s
0ca7c     11 FB 01 F6 | 	mov	result1, local03
0ca80     A7 F0 03 F6 | 	mov	ptra, fp
0ca84     B2 00 A0 FD | 	call	#popregs_
0ca88                 | _convertstring_ret
0ca88     2D 00 64 FD | 	ret
0ca8c                 | 
0ca8c                 | ' 
0ca8c                 | ' sub do_assign
0ca8c                 | _do_assign
0ca8c     05 4A 05 F6 | 	mov	COUNT_, #5
0ca90     A8 00 A0 FD | 	call	#pushregs_
0ca94     44 F0 07 F1 | 	add	ptra, #68
0ca98     69 00 00 FF 
0ca9c     54 E5 05 F1 | 	add	objptr, ##54100
0caa0     F2 16 02 FB | 	rdlong	arg03, objptr
0caa4     0B 15 02 F6 | 	mov	arg02, arg03
0caa8     01 14 66 F0 | 	shl	arg02, #1
0caac     0B 15 02 F1 | 	add	arg02, arg03
0cab0     02 14 66 F0 | 	shl	arg02, #2
0cab4     03 00 00 FF 
0cab8     04 E4 85 F1 | 	sub	objptr, ##1540
0cabc     F2 14 02 F1 | 	add	arg02, objptr
0cac0     0A 15 02 FB | 	rdlong	arg02, arg02
0cac4     18 4E 05 F1 | 	add	fp, #24
0cac8     A7 14 62 FC | 	wrlong	arg02, fp
0cacc                 | ' 
0cacc                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
0cacc                 | ' 
0cacc                 | ' if variables(varnum).vartype<array_no_type then 
0cacc     18 4E 85 F1 | 	sub	fp, #24
0cad0     04 14 66 F0 | 	shl	arg02, #4
0cad4     32 00 00 FF 
0cad8     74 E4 85 F1 | 	sub	objptr, ##25716
0cadc     F2 14 02 F1 | 	add	arg02, objptr
0cae0     0C 14 06 F1 | 	add	arg02, #12
0cae4     0A 17 02 FB | 	rdlong	arg03, arg02
0cae8     00 17 16 F2 | 	cmp	arg03, #256 wc
0caec     34 00 00 FF 
0caf0     DC E4 85 F1 | 	sub	objptr, ##26844
0caf4     18 01 90 3D |  if_ae	jmp	#LR__0980
0caf8     E8 CD BF FD | 	call	#_pop
0cafc     A7 FA 61 FC | 	wrlong	result1, fp
0cb00     04 4E 05 F1 | 	add	fp, #4
0cb04     A7 FC 61 FC | 	wrlong	result2, fp
0cb08     04 4E 05 F1 | 	add	fp, #4
0cb0c     A7 FE 61 FC | 	wrlong	result3, fp
0cb10     08 4E 85 F1 | 	sub	fp, #8
0cb14     A7 16 02 FB | 	rdlong	arg03, fp
0cb18     04 4E 05 F1 | 	add	fp, #4
0cb1c     A7 14 02 FB | 	rdlong	arg02, fp
0cb20     14 4E 05 F1 | 	add	fp, #20
0cb24     A7 12 02 FB | 	rdlong	arg01, fp
0cb28     04 12 66 F0 | 	shl	arg01, #4
0cb2c     34 00 00 FF 
0cb30     DC E4 05 F1 | 	add	objptr, ##26844
0cb34     F2 12 02 F1 | 	add	arg01, objptr
0cb38     04 12 06 F1 | 	add	arg01, #4
0cb3c     09 17 62 FC | 	wrlong	arg03, arg01
0cb40     A7 16 02 FB | 	rdlong	arg03, fp
0cb44     04 16 66 F0 | 	shl	arg03, #4
0cb48     F2 16 02 F1 | 	add	arg03, objptr
0cb4c     08 16 06 F1 | 	add	arg03, #8
0cb50     0B 15 62 FC | 	wrlong	arg02, arg03
0cb54     A7 16 02 FB | 	rdlong	arg03, fp
0cb58     04 16 66 F0 | 	shl	arg03, #4
0cb5c     F2 16 02 F1 | 	add	arg03, objptr
0cb60     10 4E 85 F1 | 	sub	fp, #16
0cb64     A7 14 02 FB | 	rdlong	arg02, fp
0cb68     0C 16 06 F1 | 	add	arg03, #12
0cb6c     0B 15 62 FC | 	wrlong	arg02, arg03
0cb70                 | '   t1=pop() 
0cb70                 | ' 'print "In do_assign value to assign=";t1.result.uresult, "type to assign=";t1.result_type  
0cb70                 | '    variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
0cb70                 | '   if variables(varnum).vartype<>result_string2 then return
0cb70     10 4E 05 F1 | 	add	fp, #16
0cb74     A7 16 02 FB | 	rdlong	arg03, fp
0cb78     18 4E 85 F1 | 	sub	fp, #24
0cb7c     04 16 66 F0 | 	shl	arg03, #4
0cb80     F2 16 02 F1 | 	add	arg03, objptr
0cb84     0C 16 06 F1 | 	add	arg03, #12
0cb88     0B 17 02 FB | 	rdlong	arg03, arg03
0cb8c     2B 16 0E F2 | 	cmp	arg03, #43 wz
0cb90     34 00 00 FF 
0cb94     DC E4 85 F1 | 	sub	objptr, ##26844
0cb98     30 06 90 5D |  if_ne	jmp	#LR__1003
0cb9c     18 4E 05 F1 | 	add	fp, #24
0cba0     A7 16 02 FB | 	rdlong	arg03, fp
0cba4     0B 1F 02 F6 | 	mov	local01, arg03
0cba8     04 1E 66 F0 | 	shl	local01, #4
0cbac     34 00 00 FF 
0cbb0     DC E4 05 F1 | 	add	objptr, ##26844
0cbb4     F2 1E 02 F1 | 	add	local01, objptr
0cbb8     18 4E 85 F1 | 	sub	fp, #24
0cbbc     04 16 66 F0 | 	shl	arg03, #4
0cbc0     F2 16 02 F1 | 	add	arg03, objptr
0cbc4     04 16 06 F1 | 	add	arg03, #4
0cbc8     0B 13 02 FB | 	rdlong	arg01, arg03
0cbcc     34 00 00 FF 
0cbd0     DC E4 85 F1 | 	sub	objptr, ##26844
0cbd4     48 FE BF FD | 	call	#_convertstring
0cbd8     04 1E 06 F1 | 	add	local01, #4
0cbdc     0F FB 61 FC | 	wrlong	result1, local01
0cbe0     18 4E 05 F1 | 	add	fp, #24
0cbe4     A7 1E 02 FB | 	rdlong	local01, fp
0cbe8     18 4E 85 F1 | 	sub	fp, #24
0cbec     04 1E 66 F0 | 	shl	local01, #4
0cbf0     34 00 00 FF 
0cbf4     DC E4 05 F1 | 	add	objptr, ##26844
0cbf8     F2 1E 02 F1 | 	add	local01, objptr
0cbfc     0C 1E 06 F1 | 	add	local01, #12
0cc00     0F 3F 68 FC | 	wrlong	#31, local01
0cc04                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
0cc04                 | '   variables(varnum).vartype=result_string
0cc04                 | '   return
0cc04     34 00 00 FF 
0cc08     DC E4 85 F1 | 	sub	objptr, ##26844
0cc0c     BC 05 90 FD | 	jmp	#LR__1003
0cc10                 | LR__0980
0cc10                 | '  
0cc10                 | ' for i=0 to 2 : arrid(i)=0 : next i
0cc10     1C 4E 05 F1 | 	add	fp, #28
0cc14     A7 00 68 FC | 	wrlong	#0, fp
0cc18     97 16 48 FB | 	callpa	#(@LR__0982-@LR__0981)>>2,fcache_load_ptr_
0cc1c                 | LR__0981
0cc1c     A7 1E 02 FB | 	rdlong	local01, fp
0cc20     02 1E 66 F0 | 	shl	local01, #2
0cc24     18 4E 05 F1 | 	add	fp, #24
0cc28     A7 1E 02 F1 | 	add	local01, fp
0cc2c     0F 01 68 FC | 	wrlong	#0, local01
0cc30     18 4E 85 F1 | 	sub	fp, #24
0cc34     A7 1E 02 FB | 	rdlong	local01, fp
0cc38     01 1E 06 F1 | 	add	local01, #1
0cc3c     A7 1E 62 FC | 	wrlong	local01, fp
0cc40     03 1E 16 F2 | 	cmp	local01, #3 wc
0cc44     D4 FF 9F CD |  if_b	jmp	#LR__0981
0cc48                 | LR__0982
0cc48     69 00 00 FF 
0cc4c     54 E5 05 F1 | 	add	objptr, ##54100
0cc50     F2 16 02 FB | 	rdlong	arg03, objptr
0cc54     0B 1F 02 F6 | 	mov	local01, arg03
0cc58     01 1E 66 F0 | 	shl	local01, #1
0cc5c     0B 1F 02 F1 | 	add	local01, arg03
0cc60     02 1E 66 F0 | 	shl	local01, #2
0cc64     03 00 00 FF 
0cc68     04 E4 85 F1 | 	sub	objptr, ##1540
0cc6c     F2 1E 02 F1 | 	add	local01, objptr
0cc70     04 1E 06 F1 | 	add	local01, #4
0cc74     0F 21 02 FB | 	rdlong	local02, local01
0cc78     04 4E 05 F1 | 	add	fp, #4
0cc7c     A7 20 62 FC | 	wrlong	local02, fp
0cc80     20 4E 85 F1 | 	sub	fp, #32
0cc84     66 00 00 FF 
0cc88     50 E5 85 F1 | 	sub	objptr, ##52560
0cc8c     54 CC BF FD | 	call	#_pop
0cc90     A7 FA 61 FC | 	wrlong	result1, fp
0cc94     04 4E 05 F1 | 	add	fp, #4
0cc98     A7 FC 61 FC | 	wrlong	result2, fp
0cc9c     04 4E 05 F1 | 	add	fp, #4
0cca0     A7 FE 61 FC | 	wrlong	result3, fp
0cca4                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
0cca4                 | ' t1=pop() ' var value
0cca4                 | ' if numpar>0 then
0cca4     18 4E 05 F1 | 	add	fp, #24
0cca8     A7 22 02 FB | 	rdlong	local03, fp
0ccac     20 4E 85 F1 | 	sub	fp, #32
0ccb0     01 22 16 F2 | 	cmp	local03, #1 wc
0ccb4     78 00 90 CD |  if_b	jmp	#LR__0985
0ccb8                 | '   for i=numpar to 1 step -1
0ccb8     20 4E 05 F1 | 	add	fp, #32
0ccbc     A7 24 0A FB | 	rdlong	local04, fp wz
0ccc0     04 4E 85 F1 | 	sub	fp, #4
0ccc4     A7 24 62 FC | 	wrlong	local04, fp
0ccc8     1C 4E 85 F1 | 	sub	fp, #28
0cccc     60 00 90 AD |  if_e	jmp	#LR__0984
0ccd0                 | LR__0983
0ccd0     10 CC BF FD | 	call	#_pop
0ccd4     0C 4E 05 F1 | 	add	fp, #12
0ccd8     A7 FA 61 FC | 	wrlong	result1, fp
0ccdc     04 4E 05 F1 | 	add	fp, #4
0cce0     A7 FC 61 FC | 	wrlong	result2, fp
0cce4     04 4E 05 F1 | 	add	fp, #4
0cce8     A7 FE 61 FC | 	wrlong	result3, fp
0ccec     08 4E 05 F1 | 	add	fp, #8
0ccf0     A7 22 02 FB | 	rdlong	local03, fp
0ccf4     01 22 86 F1 | 	sub	local03, #1
0ccf8     02 22 66 F0 | 	shl	local03, #2
0ccfc     18 4E 05 F1 | 	add	fp, #24
0cd00     A7 22 02 F1 | 	add	local03, fp
0cd04     28 4E 85 F1 | 	sub	fp, #40
0cd08     A7 12 02 F6 | 	mov	arg01, fp
0cd0c     0C 4E 85 F1 | 	sub	fp, #12
0cd10     40 41 B0 FD | 	call	#_converttoint
0cd14     11 FB 61 FC | 	wrlong	result1, local03
0cd18     1C 4E 05 F1 | 	add	fp, #28
0cd1c     A7 24 02 FB | 	rdlong	local04, fp
0cd20     01 24 8E F1 | 	sub	local04, #1 wz
0cd24     A7 24 62 FC | 	wrlong	local04, fp
0cd28     1C 4E 85 F1 | 	sub	fp, #28
0cd2c     A0 FF 9F 5D |  if_ne	jmp	#LR__0983
0cd30                 | LR__0984
0cd30                 | LR__0985
0cd30     18 4E 05 F1 | 	add	fp, #24
0cd34     A7 1E 02 FB | 	rdlong	local01, fp
0cd38     04 1E 66 F0 | 	shl	local01, #4
0cd3c     34 00 00 FF 
0cd40     DC E4 05 F1 | 	add	objptr, ##26844
0cd44     F2 1E 02 F1 | 	add	local01, objptr
0cd48     04 1E 06 F1 | 	add	local01, #4
0cd4c     0F 13 02 FB | 	rdlong	arg01, local01
0cd50     0C 4E 05 F1 | 	add	fp, #12
0cd54     A7 12 62 FC | 	wrlong	arg01, fp
0cd58     24 4E 85 F1 | 	sub	fp, #36
0cd5c     34 00 00 FF 
0cd60     DC E4 85 F1 | 	sub	objptr, ##26844
0cd64     A8 8C B0 FD | 	call	#_pslpeek
0cd68     FD 24 32 F9 | 	getword	local04, result1, #0
0cd6c     28 4E 05 F1 | 	add	fp, #40
0cd70     A7 24 62 FC | 	wrlong	local04, fp
0cd74     04 4E 85 F1 | 	sub	fp, #4
0cd78     A7 12 02 FB | 	rdlong	arg01, fp
0cd7c     24 4E 85 F1 | 	sub	fp, #36
0cd80     02 12 06 F1 | 	add	arg01, #2
0cd84     30 8C B0 FD | 	call	#_pspeek
0cd88     FD FA E1 F8 | 	getbyte	result1, result1, #0
0cd8c     2C 4E 05 F1 | 	add	fp, #44
0cd90     A7 FA 61 FC | 	wrlong	result1, fp
0cd94                 | ' esize=pspeek(arrptr+2)
0cd94                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
0cd94     08 4E 85 F1 | 	sub	fp, #8
0cd98     A7 12 02 FB | 	rdlong	arg01, fp
0cd9c     24 4E 85 F1 | 	sub	fp, #36
0cda0     04 12 06 F1 | 	add	arg01, #4
0cda4     68 8C B0 FD | 	call	#_pslpeek
0cda8     FD 24 02 F6 | 	mov	local04, result1
0cdac     34 4E 05 F1 | 	add	fp, #52
0cdb0     A7 1E 02 FB | 	rdlong	local01, fp
0cdb4     34 4E 85 F1 | 	sub	fp, #52
0cdb8     12 1F 12 F2 | 	cmp	local01, local04 wc
0cdbc     54 00 90 3D |  if_ae	jmp	#LR__0986
0cdc0     24 4E 05 F1 | 	add	fp, #36
0cdc4     A7 12 02 FB | 	rdlong	arg01, fp
0cdc8     24 4E 85 F1 | 	sub	fp, #36
0cdcc     08 12 06 F1 | 	add	arg01, #8
0cdd0     3C 8C B0 FD | 	call	#_pslpeek
0cdd4     FD 1E 02 F6 | 	mov	local01, result1
0cdd8     38 4E 05 F1 | 	add	fp, #56
0cddc     A7 24 02 FB | 	rdlong	local04, fp
0cde0     38 4E 85 F1 | 	sub	fp, #56
0cde4     0F 25 12 F2 | 	cmp	local04, local01 wc
0cde8     28 00 90 3D |  if_ae	jmp	#LR__0986
0cdec     24 4E 05 F1 | 	add	fp, #36
0cdf0     A7 12 02 FB | 	rdlong	arg01, fp
0cdf4     24 4E 85 F1 | 	sub	fp, #36
0cdf8     0C 12 06 F1 | 	add	arg01, #12
0cdfc     10 8C B0 FD | 	call	#_pslpeek
0ce00     3C 4E 05 F1 | 	add	fp, #60
0ce04     A7 24 02 FB | 	rdlong	local04, fp
0ce08     3C 4E 85 F1 | 	sub	fp, #60
0ce0c     FD 24 12 F2 | 	cmp	local04, result1 wc
0ce10     0C 00 90 CD |  if_b	jmp	#LR__0987
0ce14                 | LR__0986
0ce14     31 12 06 F6 | 	mov	arg01, #49
0ce18     38 8A B0 FD | 	call	#_printerror
0ce1c     AC 03 90 FD | 	jmp	#LR__1003
0ce20                 | LR__0987
0ce20     24 4E 05 F1 | 	add	fp, #36
0ce24     A7 12 02 FB | 	rdlong	arg01, fp
0ce28     09 25 02 F6 | 	mov	local04, arg01
0ce2c     10 24 06 F1 | 	add	local04, #16
0ce30     24 4E 85 F1 | 	sub	fp, #36
0ce34     04 12 06 F1 | 	add	arg01, #4
0ce38     D4 8B B0 FD | 	call	#_pslpeek
0ce3c     FD 1E 02 F6 | 	mov	local01, result1
0ce40     38 4E 05 F1 | 	add	fp, #56
0ce44     A7 20 02 FB | 	rdlong	local02, fp
0ce48     10 1F 02 FD | 	qmul	local01, local02
0ce4c     04 4E 85 F1 | 	sub	fp, #4
0ce50     A7 22 02 FB | 	rdlong	local03, fp
0ce54     10 4E 85 F1 | 	sub	fp, #16
0ce58     A7 12 02 FB | 	rdlong	arg01, fp
0ce5c     24 4E 85 F1 | 	sub	fp, #36
0ce60     08 12 06 F1 | 	add	arg01, #8
0ce64     18 20 62 FD | 	getqx	local02
0ce68     10 23 02 F1 | 	add	local03, local02
0ce6c     A0 8B B0 FD | 	call	#_pslpeek
0ce70     FD 20 02 F6 | 	mov	local02, result1
0ce74     24 4E 05 F1 | 	add	fp, #36
0ce78     A7 12 02 FB | 	rdlong	arg01, fp
0ce7c     24 4E 85 F1 | 	sub	fp, #36
0ce80     04 12 06 F1 | 	add	arg01, #4
0ce84     88 8B B0 FD | 	call	#_pslpeek
0ce88     FD 20 02 FD | 	qmul	local02, result1
0ce8c     3C 4E 05 F1 | 	add	fp, #60
0ce90     A7 20 02 FB | 	rdlong	local02, fp
0ce94     18 1E 62 FD | 	getqx	local01
0ce98     10 1F 02 FD | 	qmul	local01, local02
0ce9c     10 4E 85 F1 | 	sub	fp, #16
0cea0     A7 20 02 FB | 	rdlong	local02, fp
0cea4     18 1E 62 FD | 	getqx	local01
0cea8     0F 23 02 F1 | 	add	local03, local01
0ceac     11 21 02 FD | 	qmul	local02, local03
0ceb0     04 4E 05 F1 | 	add	fp, #4
0ceb4                 | ' 
0ceb4                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
0ceb4                 | ' select case arrtype
0ceb4     18 22 62 FD | 	getqx	local03
0ceb8     11 25 02 F1 | 	add	local04, local03
0cebc     A7 24 62 FC | 	wrlong	local04, fp
0cec0     08 4E 85 F1 | 	sub	fp, #8
0cec4     A7 26 02 FB | 	rdlong	local05, fp
0cec8     28 4E 85 F1 | 	sub	fp, #40
0cecc     00 27 86 F1 | 	sub	local05, #256
0ced0     0C 26 26 F3 | 	fle	local05, #12
0ced4     30 26 62 FD | 	jmprel	local05
0ced8                 | LR__0988
0ced8     30 00 90 FD | 	jmp	#LR__0989
0cedc     58 00 90 FD | 	jmp	#LR__0990
0cee0     88 00 90 FD | 	jmp	#LR__0991
0cee4     B8 00 90 FD | 	jmp	#LR__0992
0cee8     10 01 90 FD | 	jmp	#LR__0993
0ceec     68 01 90 FD | 	jmp	#LR__0994
0cef0     98 01 90 FD | 	jmp	#LR__0995
0cef4     C8 01 90 FD | 	jmp	#LR__0996
0cef8     F8 01 90 FD | 	jmp	#LR__0997
0cefc     28 02 90 FD | 	jmp	#LR__0998
0cf00     58 02 90 FD | 	jmp	#LR__0999
0cf04     88 02 90 FD | 	jmp	#LR__1000
0cf08     B8 02 90 FD | 	jmp	#LR__1001
0cf0c                 | LR__0989
0cf0c     A7 12 02 F6 | 	mov	arg01, fp
0cf10     30 4E 05 F1 | 	add	fp, #48
0cf14     A7 14 02 FB | 	rdlong	arg02, fp
0cf18     30 4E 85 F1 | 	sub	fp, #48
0cf1c     0C 16 06 F6 | 	mov	arg03, #12
0cf20     0B 00 00 FF 
0cf24     C0 E4 05 F1 | 	add	objptr, ##5824
0cf28     F8 B3 B0 FD | 	call	#_psram_spin2_write
0cf2c     0B 00 00 FF 
0cf30     C0 E4 85 F1 | 	sub	objptr, ##5824
0cf34     94 02 90 FD | 	jmp	#LR__1002
0cf38                 | LR__0990
0cf38     30 4E 05 F1 | 	add	fp, #48
0cf3c     A7 12 02 FB | 	rdlong	arg01, fp
0cf40     30 4E 85 F1 | 	sub	fp, #48
0cf44     A7 14 02 FB | 	rdlong	arg02, fp
0cf48     01 16 06 F6 | 	mov	arg03, #1
0cf4c     00 18 06 F6 | 	mov	arg04, #0
0cf50     0B 00 00 FF 
0cf54     C0 E4 05 F1 | 	add	objptr, ##5824
0cf58                 | '     return fill(addr, pattern, count, listPtr, 1)
0cf58     01 1A 06 F6 | 	mov	arg05, #1
0cf5c     60 B4 B0 FD | 	call	#_psram_spin2_fill
0cf60     0B 00 00 FF 
0cf64     C0 E4 85 F1 | 	sub	objptr, ##5824
0cf68     60 02 90 FD | 	jmp	#LR__1002
0cf6c                 | LR__0991
0cf6c     30 4E 05 F1 | 	add	fp, #48
0cf70     A7 12 02 FB | 	rdlong	arg01, fp
0cf74     30 4E 85 F1 | 	sub	fp, #48
0cf78     A7 14 02 FB | 	rdlong	arg02, fp
0cf7c     01 16 06 F6 | 	mov	arg03, #1
0cf80     00 18 06 F6 | 	mov	arg04, #0
0cf84     0B 00 00 FF 
0cf88     C0 E4 05 F1 | 	add	objptr, ##5824
0cf8c                 | '     return fill(addr, pattern, count, listPtr, 1)
0cf8c     01 1A 06 F6 | 	mov	arg05, #1
0cf90     2C B4 B0 FD | 	call	#_psram_spin2_fill
0cf94     0B 00 00 FF 
0cf98     C0 E4 85 F1 | 	sub	objptr, ##5824
0cf9c     2C 02 90 FD | 	jmp	#LR__1002
0cfa0                 | LR__0992
0cfa0     30 4E 05 F1 | 	add	fp, #48
0cfa4     A7 12 02 FB | 	rdlong	arg01, fp
0cfa8     30 4E 85 F1 | 	sub	fp, #48
0cfac     A7 14 02 FB | 	rdlong	arg02, fp
0cfb0     01 16 06 F6 | 	mov	arg03, #1
0cfb4     00 18 06 F6 | 	mov	arg04, #0
0cfb8     0B 00 00 FF 
0cfbc     C0 E4 05 F1 | 	add	objptr, ##5824
0cfc0                 | '     return fill(addr, pattern, count, listPtr, 1)
0cfc0     01 1A 06 F6 | 	mov	arg05, #1
0cfc4     F8 B3 B0 FD | 	call	#_psram_spin2_fill
0cfc8     30 4E 05 F1 | 	add	fp, #48
0cfcc     A7 12 02 FB | 	rdlong	arg01, fp
0cfd0     30 4E 85 F1 | 	sub	fp, #48
0cfd4     01 12 06 F1 | 	add	arg01, #1
0cfd8     A7 14 02 FB | 	rdlong	arg02, fp
0cfdc     08 14 46 F0 | 	shr	arg02, #8
0cfe0     01 16 06 F6 | 	mov	arg03, #1
0cfe4     00 18 06 F6 | 	mov	arg04, #0
0cfe8                 | '     return fill(addr, pattern, count, listPtr, 1)
0cfe8     01 1A 06 F6 | 	mov	arg05, #1
0cfec     D0 B3 B0 FD | 	call	#_psram_spin2_fill
0cff0     0B 00 00 FF 
0cff4     C0 E4 85 F1 | 	sub	objptr, ##5824
0cff8     D0 01 90 FD | 	jmp	#LR__1002
0cffc                 | LR__0993
0cffc     30 4E 05 F1 | 	add	fp, #48
0d000     A7 12 02 FB | 	rdlong	arg01, fp
0d004     30 4E 85 F1 | 	sub	fp, #48
0d008     A7 14 02 FB | 	rdlong	arg02, fp
0d00c     01 16 06 F6 | 	mov	arg03, #1
0d010     00 18 06 F6 | 	mov	arg04, #0
0d014     0B 00 00 FF 
0d018     C0 E4 05 F1 | 	add	objptr, ##5824
0d01c                 | '     return fill(addr, pattern, count, listPtr, 1)
0d01c     01 1A 06 F6 | 	mov	arg05, #1
0d020     9C B3 B0 FD | 	call	#_psram_spin2_fill
0d024     30 4E 05 F1 | 	add	fp, #48
0d028     A7 12 02 FB | 	rdlong	arg01, fp
0d02c     30 4E 85 F1 | 	sub	fp, #48
0d030     01 12 06 F1 | 	add	arg01, #1
0d034     A7 14 02 FB | 	rdlong	arg02, fp
0d038     08 14 46 F0 | 	shr	arg02, #8
0d03c     01 16 06 F6 | 	mov	arg03, #1
0d040     00 18 06 F6 | 	mov	arg04, #0
0d044                 | '     return fill(addr, pattern, count, listPtr, 1)
0d044     01 1A 06 F6 | 	mov	arg05, #1
0d048     74 B3 B0 FD | 	call	#_psram_spin2_fill
0d04c     0B 00 00 FF 
0d050     C0 E4 85 F1 | 	sub	objptr, ##5824
0d054     74 01 90 FD | 	jmp	#LR__1002
0d058                 | LR__0994
0d058     30 4E 05 F1 | 	add	fp, #48
0d05c     A7 12 02 FB | 	rdlong	arg01, fp
0d060     30 4E 85 F1 | 	sub	fp, #48
0d064     A7 14 02 FB | 	rdlong	arg02, fp
0d068     01 16 06 F6 | 	mov	arg03, #1
0d06c     00 18 06 F6 | 	mov	arg04, #0
0d070     0B 00 00 FF 
0d074     C0 E4 05 F1 | 	add	objptr, ##5824
0d078                 | '     return fill(addr, pattern, count, listPtr, 4)
0d078     04 1A 06 F6 | 	mov	arg05, #4
0d07c     40 B3 B0 FD | 	call	#_psram_spin2_fill
0d080     0B 00 00 FF 
0d084     C0 E4 85 F1 | 	sub	objptr, ##5824
0d088     40 01 90 FD | 	jmp	#LR__1002
0d08c                 | LR__0995
0d08c     30 4E 05 F1 | 	add	fp, #48
0d090     A7 12 02 FB | 	rdlong	arg01, fp
0d094     30 4E 85 F1 | 	sub	fp, #48
0d098     A7 14 02 FB | 	rdlong	arg02, fp
0d09c     01 16 06 F6 | 	mov	arg03, #1
0d0a0     00 18 06 F6 | 	mov	arg04, #0
0d0a4     0B 00 00 FF 
0d0a8     C0 E4 05 F1 | 	add	objptr, ##5824
0d0ac                 | '     return fill(addr, pattern, count, listPtr, 4)
0d0ac     04 1A 06 F6 | 	mov	arg05, #4
0d0b0     0C B3 B0 FD | 	call	#_psram_spin2_fill
0d0b4     0B 00 00 FF 
0d0b8     C0 E4 85 F1 | 	sub	objptr, ##5824
0d0bc     0C 01 90 FD | 	jmp	#LR__1002
0d0c0                 | LR__0996
0d0c0     30 4E 05 F1 | 	add	fp, #48
0d0c4     A7 12 02 FB | 	rdlong	arg01, fp
0d0c8     30 4E 85 F1 | 	sub	fp, #48
0d0cc     A7 14 02 FB | 	rdlong	arg02, fp
0d0d0     01 16 06 F6 | 	mov	arg03, #1
0d0d4     00 18 06 F6 | 	mov	arg04, #0
0d0d8     0B 00 00 FF 
0d0dc     C0 E4 05 F1 | 	add	objptr, ##5824
0d0e0                 | '     return fill(addr, pattern, count, listPtr, 4)
0d0e0     04 1A 06 F6 | 	mov	arg05, #4
0d0e4     D8 B2 B0 FD | 	call	#_psram_spin2_fill
0d0e8     0B 00 00 FF 
0d0ec     C0 E4 85 F1 | 	sub	objptr, ##5824
0d0f0     D8 00 90 FD | 	jmp	#LR__1002
0d0f4                 | LR__0997
0d0f4     30 4E 05 F1 | 	add	fp, #48
0d0f8     A7 12 02 FB | 	rdlong	arg01, fp
0d0fc     30 4E 85 F1 | 	sub	fp, #48
0d100     A7 14 02 FB | 	rdlong	arg02, fp
0d104     01 16 06 F6 | 	mov	arg03, #1
0d108     00 18 06 F6 | 	mov	arg04, #0
0d10c     0B 00 00 FF 
0d110     C0 E4 05 F1 | 	add	objptr, ##5824
0d114                 | '     return fill(addr, pattern, count, listPtr, 4)
0d114     04 1A 06 F6 | 	mov	arg05, #4
0d118     A4 B2 B0 FD | 	call	#_psram_spin2_fill
0d11c     0B 00 00 FF 
0d120     C0 E4 85 F1 | 	sub	objptr, ##5824
0d124     A4 00 90 FD | 	jmp	#LR__1002
0d128                 | LR__0998
0d128     30 4E 05 F1 | 	add	fp, #48
0d12c     A7 12 02 FB | 	rdlong	arg01, fp
0d130     30 4E 85 F1 | 	sub	fp, #48
0d134     A7 14 02 FB | 	rdlong	arg02, fp
0d138     01 16 06 F6 | 	mov	arg03, #1
0d13c     00 18 06 F6 | 	mov	arg04, #0
0d140     0B 00 00 FF 
0d144     C0 E4 05 F1 | 	add	objptr, ##5824
0d148                 | '     return fill(addr, pattern, count, listPtr, 4)
0d148     04 1A 06 F6 | 	mov	arg05, #4
0d14c     70 B2 B0 FD | 	call	#_psram_spin2_fill
0d150     0B 00 00 FF 
0d154     C0 E4 85 F1 | 	sub	objptr, ##5824
0d158     70 00 90 FD | 	jmp	#LR__1002
0d15c                 | LR__0999
0d15c     30 4E 05 F1 | 	add	fp, #48
0d160     A7 12 02 FB | 	rdlong	arg01, fp
0d164     30 4E 85 F1 | 	sub	fp, #48
0d168     A7 14 02 FB | 	rdlong	arg02, fp
0d16c     01 16 06 F6 | 	mov	arg03, #1
0d170     00 18 06 F6 | 	mov	arg04, #0
0d174     0B 00 00 FF 
0d178     C0 E4 05 F1 | 	add	objptr, ##5824
0d17c                 | '     return fill(addr, pattern, count, listPtr, 4)
0d17c     04 1A 06 F6 | 	mov	arg05, #4
0d180     3C B2 B0 FD | 	call	#_psram_spin2_fill
0d184     0B 00 00 FF 
0d188     C0 E4 85 F1 | 	sub	objptr, ##5824
0d18c     3C 00 90 FD | 	jmp	#LR__1002
0d190                 | LR__1000
0d190     30 4E 05 F1 | 	add	fp, #48
0d194     A7 12 02 FB | 	rdlong	arg01, fp
0d198     30 4E 85 F1 | 	sub	fp, #48
0d19c     A7 14 02 FB | 	rdlong	arg02, fp
0d1a0     01 16 06 F6 | 	mov	arg03, #1
0d1a4     00 18 06 F6 | 	mov	arg04, #0
0d1a8     0B 00 00 FF 
0d1ac     C0 E4 05 F1 | 	add	objptr, ##5824
0d1b0                 | '     return fill(addr, pattern, count, listPtr, 4)
0d1b0     04 1A 06 F6 | 	mov	arg05, #4
0d1b4     08 B2 B0 FD | 	call	#_psram_spin2_fill
0d1b8     0B 00 00 FF 
0d1bc     C0 E4 85 F1 | 	sub	objptr, ##5824
0d1c0     08 00 90 FD | 	jmp	#LR__1002
0d1c4                 | LR__1001
0d1c4     2F 12 06 F6 | 	mov	arg01, #47
0d1c8     88 86 B0 FD | 	call	#_printerror
0d1cc                 | LR__1002
0d1cc                 | LR__1003
0d1cc     A7 F0 03 F6 | 	mov	ptra, fp
0d1d0     B2 00 A0 FD | 	call	#popregs_
0d1d4                 | _do_assign_ret
0d1d4     2D 00 64 FD | 	ret
0d1d8                 | 
0d1d8                 | ' 
0d1d8                 | ' 
0d1d8                 | ' ' --------------------- Read a variable and push to the stack
0d1d8                 | ' 
0d1d8                 | ' ' getvar : fun_getvar, var#, numpar. Var, if array, has array type and a pointer
0d1d8                 | ' 
0d1d8                 | ' sub do_getvar
0d1d8                 | _do_getvar
0d1d8     04 4A 05 F6 | 	mov	COUNT_, #4
0d1dc     A8 00 A0 FD | 	call	#pushregs_
0d1e0     3C F0 07 F1 | 	add	ptra, #60
0d1e4                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
0d1e4                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
0d1e4     69 00 00 FF 
0d1e8     54 E5 05 F1 | 	add	objptr, ##54100
0d1ec     F2 1E 02 FB | 	rdlong	local01, objptr
0d1f0     0F 17 02 F6 | 	mov	arg03, local01
0d1f4     01 16 66 F0 | 	shl	arg03, #1
0d1f8     0F 17 02 F1 | 	add	arg03, local01
0d1fc     02 16 66 F0 | 	shl	arg03, #2
0d200     03 00 00 FF 
0d204     04 E4 85 F1 | 	sub	objptr, ##1540
0d208     F2 16 02 F1 | 	add	arg03, objptr
0d20c     04 16 06 F1 | 	add	arg03, #4
0d210     0B 17 0A FB | 	rdlong	arg03, arg03 wz
0d214     66 00 00 FF 
0d218     50 E5 85 F1 | 	sub	objptr, ##52560
0d21c     C4 00 90 5D |  if_ne	jmp	#LR__1011
0d220     69 00 00 FF 
0d224     54 E5 05 F1 | 	add	objptr, ##54100
0d228     F2 1E 02 FB | 	rdlong	local01, objptr
0d22c     0F 13 02 F6 | 	mov	arg01, local01
0d230     01 12 66 F0 | 	shl	arg01, #1
0d234     0F 13 02 F1 | 	add	arg01, local01
0d238     02 12 66 F0 | 	shl	arg01, #2
0d23c     03 00 00 FF 
0d240     04 E4 85 F1 | 	sub	objptr, ##1540
0d244     F2 12 02 F1 | 	add	arg01, objptr
0d248     09 1F 02 FB | 	rdlong	local01, arg01
0d24c     04 1E 66 F0 | 	shl	local01, #4
0d250     32 00 00 FF 
0d254     74 E4 85 F1 | 	sub	objptr, ##25716
0d258     F2 1E 02 F1 | 	add	local01, objptr
0d25c     04 1E 06 F1 | 	add	local01, #4
0d260     0F 13 02 FB | 	rdlong	arg01, local01
0d264     04 1E 06 F1 | 	add	local01, #4
0d268     0F 1F 02 FB | 	rdlong	local01, local01
0d26c     A7 12 62 FC | 	wrlong	arg01, fp
0d270     04 4E 05 F1 | 	add	fp, #4
0d274     A7 1E 62 FC | 	wrlong	local01, fp
0d278     35 00 00 FF 
0d27c     78 E4 05 F1 | 	add	objptr, ##27256
0d280     F2 1E 02 FB | 	rdlong	local01, objptr
0d284     0F 13 02 F6 | 	mov	arg01, local01
0d288     01 12 66 F0 | 	shl	arg01, #1
0d28c     0F 13 02 F1 | 	add	arg01, local01
0d290     02 12 66 F0 | 	shl	arg01, #2
0d294     03 00 00 FF 
0d298     04 E4 85 F1 | 	sub	objptr, ##1540
0d29c     F2 12 02 F1 | 	add	arg01, objptr
0d2a0     09 1F 02 FB | 	rdlong	local01, arg01
0d2a4     04 1E 66 F0 | 	shl	local01, #4
0d2a8     32 00 00 FF 
0d2ac     74 E4 85 F1 | 	sub	objptr, ##25716
0d2b0     F2 1E 02 F1 | 	add	local01, objptr
0d2b4     0C 1E 06 F1 | 	add	local01, #12
0d2b8     0F 1F 02 FB | 	rdlong	local01, local01
0d2bc     04 4E 05 F1 | 	add	fp, #4
0d2c0     A7 1E 62 FC | 	wrlong	local01, fp
0d2c4                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
0d2c4                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
0d2c4                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
0d2c4     08 4E 85 F1 | 	sub	fp, #8
0d2c8     00 1F 16 F2 | 	cmp	local01, #256 wc
0d2cc     34 00 00 FF 
0d2d0     DC E4 85 F1 | 	sub	objptr, ##26844
0d2d4     0C 00 90 3D |  if_ae	jmp	#LR__1010
0d2d8     A7 12 02 F6 | 	mov	arg01, fp
0d2dc     9C C6 BF FD | 	call	#_push
0d2e0     A0 04 90 FD | 	jmp	#LR__1032
0d2e4                 | LR__1010
0d2e4                 | LR__1011
0d2e4     69 00 00 FF 
0d2e8     54 E5 05 F1 | 	add	objptr, ##54100
0d2ec     F2 16 02 FB | 	rdlong	arg03, objptr
0d2f0     0B 15 02 F6 | 	mov	arg02, arg03
0d2f4     01 14 66 F0 | 	shl	arg02, #1
0d2f8     0B 15 02 F1 | 	add	arg02, arg03
0d2fc     02 14 66 F0 | 	shl	arg02, #2
0d300     03 00 00 FF 
0d304     04 E4 85 F1 | 	sub	objptr, ##1540
0d308     F2 14 02 F1 | 	add	arg02, objptr
0d30c     0A 17 02 FB | 	rdlong	arg03, arg02
0d310     04 16 66 F0 | 	shl	arg03, #4
0d314     32 00 00 FF 
0d318     74 E4 85 F1 | 	sub	objptr, ##25716
0d31c     F2 16 02 F1 | 	add	arg03, objptr
0d320     04 16 06 F1 | 	add	arg03, #4
0d324     0B 13 02 FB | 	rdlong	arg01, arg03
0d328     0C 4E 05 F1 | 	add	fp, #12
0d32c     A7 12 62 FC | 	wrlong	arg01, fp
0d330     0C 4E 85 F1 | 	sub	fp, #12
0d334     34 00 00 FF 
0d338     DC E4 85 F1 | 	sub	objptr, ##26844
0d33c     D0 86 B0 FD | 	call	#_pslpeek
0d340     FD FA 31 F9 | 	getword	result1, result1, #0
0d344     10 4E 05 F1 | 	add	fp, #16
0d348     A7 FA 61 FC | 	wrlong	result1, fp
0d34c     69 00 00 FF 
0d350     54 E5 05 F1 | 	add	objptr, ##54100
0d354     F2 16 02 FB | 	rdlong	arg03, objptr
0d358     0B 15 02 F6 | 	mov	arg02, arg03
0d35c     01 14 66 F0 | 	shl	arg02, #1
0d360     0B 15 02 F1 | 	add	arg02, arg03
0d364     02 14 66 F0 | 	shl	arg02, #2
0d368     03 00 00 FF 
0d36c     04 E4 85 F1 | 	sub	objptr, ##1540
0d370     F2 14 02 F1 | 	add	arg02, objptr
0d374     04 14 06 F1 | 	add	arg02, #4
0d378     0A 17 02 FB | 	rdlong	arg03, arg02
0d37c     04 4E 05 F1 | 	add	fp, #4
0d380     A7 16 62 FC | 	wrlong	arg03, fp
0d384     08 4E 85 F1 | 	sub	fp, #8
0d388     A7 12 02 FB | 	rdlong	arg01, fp
0d38c     0C 4E 85 F1 | 	sub	fp, #12
0d390     02 12 06 F1 | 	add	arg01, #2
0d394     66 00 00 FF 
0d398     50 E5 85 F1 | 	sub	objptr, ##52560
0d39c     18 86 B0 FD | 	call	#_pspeek
0d3a0     FD FA E1 F8 | 	getbyte	result1, result1, #0
0d3a4     18 4E 05 F1 | 	add	fp, #24
0d3a8     A7 FA 61 FC | 	wrlong	result1, fp
0d3ac     0C 4E 85 F1 | 	sub	fp, #12
0d3b0     A7 12 02 FB | 	rdlong	arg01, fp
0d3b4     0C 4E 85 F1 | 	sub	fp, #12
0d3b8     04 12 06 F1 | 	add	arg01, #4
0d3bc     50 86 B0 FD | 	call	#_pslpeek
0d3c0     1C 4E 05 F1 | 	add	fp, #28
0d3c4     A7 FA 61 FC | 	wrlong	result1, fp
0d3c8     10 4E 85 F1 | 	sub	fp, #16
0d3cc     A7 12 02 FB | 	rdlong	arg01, fp
0d3d0     0C 4E 85 F1 | 	sub	fp, #12
0d3d4     08 12 06 F1 | 	add	arg01, #8
0d3d8     34 86 B0 FD | 	call	#_pslpeek
0d3dc     20 4E 05 F1 | 	add	fp, #32
0d3e0     A7 FA 61 FC | 	wrlong	result1, fp
0d3e4     14 4E 85 F1 | 	sub	fp, #20
0d3e8     A7 12 02 FB | 	rdlong	arg01, fp
0d3ec     0C 4E 85 F1 | 	sub	fp, #12
0d3f0     0C 12 06 F1 | 	add	arg01, #12
0d3f4     18 86 B0 FD | 	call	#_pslpeek
0d3f8     24 4E 05 F1 | 	add	fp, #36
0d3fc     A7 FA 61 FC | 	wrlong	result1, fp
0d400                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
0d400                 | ' esize=pspeek(arrptr+2)
0d400                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
0d400                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
0d400                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
0d400                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
0d400     10 4E 85 F1 | 	sub	fp, #16
0d404     A7 16 02 FB | 	rdlong	arg03, fp
0d408     14 4E 85 F1 | 	sub	fp, #20
0d40c     03 16 16 F2 | 	cmp	arg03, #3 wc
0d410     38 00 90 CD |  if_b	jmp	#LR__1012
0d414     CC C4 BF FD | 	call	#_pop
0d418     FF 16 02 F6 | 	mov	arg03, result3
0d41c     A7 FA 61 FC | 	wrlong	result1, fp
0d420     04 4E 05 F1 | 	add	fp, #4
0d424     A7 FC 61 FC | 	wrlong	result2, fp
0d428     04 4E 05 F1 | 	add	fp, #4
0d42c     A7 16 62 FC | 	wrlong	arg03, fp
0d430     08 4E 85 F1 | 	sub	fp, #8
0d434     A7 12 02 F6 | 	mov	arg01, fp
0d438     18 3A B0 FD | 	call	#_converttoint
0d43c     30 4E 05 F1 | 	add	fp, #48
0d440     A7 FA 61 FC | 	wrlong	result1, fp
0d444     30 4E 85 F1 | 	sub	fp, #48
0d448     0C 00 90 FD | 	jmp	#LR__1013
0d44c                 | LR__1012
0d44c     30 4E 05 F1 | 	add	fp, #48
0d450     A7 00 68 FC | 	wrlong	#0, fp
0d454     30 4E 85 F1 | 	sub	fp, #48
0d458                 | LR__1013
0d458                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
0d458     14 4E 05 F1 | 	add	fp, #20
0d45c     A7 16 02 FB | 	rdlong	arg03, fp
0d460     14 4E 85 F1 | 	sub	fp, #20
0d464     02 16 16 F2 | 	cmp	arg03, #2 wc
0d468     38 00 90 CD |  if_b	jmp	#LR__1014
0d46c     74 C4 BF FD | 	call	#_pop
0d470     FF 16 02 F6 | 	mov	arg03, result3
0d474     A7 FA 61 FC | 	wrlong	result1, fp
0d478     04 4E 05 F1 | 	add	fp, #4
0d47c     A7 FC 61 FC | 	wrlong	result2, fp
0d480     04 4E 05 F1 | 	add	fp, #4
0d484     A7 16 62 FC | 	wrlong	arg03, fp
0d488     08 4E 85 F1 | 	sub	fp, #8
0d48c     A7 12 02 F6 | 	mov	arg01, fp
0d490     C0 39 B0 FD | 	call	#_converttoint
0d494     2C 4E 05 F1 | 	add	fp, #44
0d498     A7 FA 61 FC | 	wrlong	result1, fp
0d49c     2C 4E 85 F1 | 	sub	fp, #44
0d4a0     0C 00 90 FD | 	jmp	#LR__1015
0d4a4                 | LR__1014
0d4a4     2C 4E 05 F1 | 	add	fp, #44
0d4a8     A7 00 68 FC | 	wrlong	#0, fp
0d4ac     2C 4E 85 F1 | 	sub	fp, #44
0d4b0                 | LR__1015
0d4b0                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
0d4b0     14 4E 05 F1 | 	add	fp, #20
0d4b4     A7 16 02 FB | 	rdlong	arg03, fp
0d4b8     14 4E 85 F1 | 	sub	fp, #20
0d4bc     01 16 16 F2 | 	cmp	arg03, #1 wc
0d4c0     38 00 90 CD |  if_b	jmp	#LR__1016
0d4c4     1C C4 BF FD | 	call	#_pop
0d4c8     FF 16 02 F6 | 	mov	arg03, result3
0d4cc     A7 FA 61 FC | 	wrlong	result1, fp
0d4d0     04 4E 05 F1 | 	add	fp, #4
0d4d4     A7 FC 61 FC | 	wrlong	result2, fp
0d4d8     04 4E 05 F1 | 	add	fp, #4
0d4dc     A7 16 62 FC | 	wrlong	arg03, fp
0d4e0     08 4E 85 F1 | 	sub	fp, #8
0d4e4     A7 12 02 F6 | 	mov	arg01, fp
0d4e8     68 39 B0 FD | 	call	#_converttoint
0d4ec     28 4E 05 F1 | 	add	fp, #40
0d4f0     A7 FA 61 FC | 	wrlong	result1, fp
0d4f4     28 4E 85 F1 | 	sub	fp, #40
0d4f8     0C 00 90 FD | 	jmp	#LR__1017
0d4fc                 | LR__1016
0d4fc     28 4E 05 F1 | 	add	fp, #40
0d500     A7 00 68 FC | 	wrlong	#0, fp
0d504     28 4E 85 F1 | 	sub	fp, #40
0d508                 | LR__1017
0d508     0C 4E 05 F1 | 	add	fp, #12
0d50c     A7 20 02 FB | 	rdlong	local02, fp
0d510     1C 4E 05 F1 | 	add	fp, #28
0d514     A7 22 02 FB | 	rdlong	local03, fp
0d518     04 4E 05 F1 | 	add	fp, #4
0d51c     A7 FC 01 FB | 	rdlong	result2, fp
0d520     10 4E 85 F1 | 	sub	fp, #16
0d524     A7 FE 01 FB | 	rdlong	result3, fp
0d528     FF FC 01 FD | 	qmul	result2, result3
0d52c     10 20 06 F1 | 	add	local02, #16
0d530     14 4E 05 F1 | 	add	fp, #20
0d534     A7 FC 01 FB | 	rdlong	result2, fp
0d538     18 FA 61 FD | 	getqx	result1
0d53c     FF FC 01 FD | 	qmul	result2, result3
0d540     FD 22 02 F1 | 	add	local03, result1
0d544     10 4E 85 F1 | 	sub	fp, #16
0d548     A7 FE 01 FB | 	rdlong	result3, fp
0d54c     18 FC 61 FD | 	getqx	result2
0d550     FF FC 01 FD | 	qmul	result2, result3
0d554     08 4E 85 F1 | 	sub	fp, #8
0d558     A7 FE 01 FB | 	rdlong	result3, fp
0d55c     18 FC 61 FD | 	getqx	result2
0d560     FE 22 02 F1 | 	add	local03, result2
0d564     FF 22 02 FD | 	qmul	local03, result3
0d568     1C 4E 05 F1 | 	add	fp, #28
0d56c                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
0d56c                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize ': print "arrptr=",arrptr,"varidx=",varidx,"memtop=",memtop,"bufptr=",v.buf_ptr
0d56c                 | ' 
0d56c                 | ' select case vartype
0d56c     18 FC 61 FD | 	getqx	result2
0d570     FE 20 02 F1 | 	add	local02, result2
0d574     A7 20 62 FC | 	wrlong	local02, fp
0d578     24 4E 85 F1 | 	sub	fp, #36
0d57c     A7 24 02 FB | 	rdlong	local04, fp
0d580     10 4E 85 F1 | 	sub	fp, #16
0d584     00 25 86 F1 | 	sub	local04, #256
0d588     0C 24 26 F3 | 	fle	local04, #12
0d58c     30 24 62 FD | 	jmprel	local04
0d590                 | LR__1018
0d590     30 00 90 FD | 	jmp	#LR__1019
0d594     58 00 90 FD | 	jmp	#LR__1020
0d598     8C 00 90 FD | 	jmp	#LR__1021
0d59c     AC 00 90 FD | 	jmp	#LR__1022
0d5a0     E8 00 90 FD | 	jmp	#LR__1023
0d5a4     08 01 90 FD | 	jmp	#LR__1024
0d5a8     24 01 90 FD | 	jmp	#LR__1025
0d5ac     40 01 90 FD | 	jmp	#LR__1026
0d5b0     50 01 90 FD | 	jmp	#LR__1027
0d5b4     60 01 90 FD | 	jmp	#LR__1028
0d5b8     7C 01 90 FD | 	jmp	#LR__1029
0d5bc     8C 01 90 FD | 	jmp	#LR__1030
0d5c0     B8 01 90 FD | 	jmp	#LR__1031
0d5c4                 | LR__1019
0d5c4     A7 12 02 F6 | 	mov	arg01, fp
0d5c8     34 4E 05 F1 | 	add	fp, #52
0d5cc     A7 14 02 FB | 	rdlong	arg02, fp
0d5d0     34 4E 85 F1 | 	sub	fp, #52
0d5d4     0C 16 06 F6 | 	mov	arg03, #12
0d5d8     0B 00 00 FF 
0d5dc     C0 E4 05 F1 | 	add	objptr, ##5824
0d5e0     A4 AC B0 FD | 	call	#_psram_spin2_read1
0d5e4     0B 00 00 FF 
0d5e8     C0 E4 85 F1 | 	sub	objptr, ##5824
0d5ec     8C 01 90 FD | 	jmp	#LR__1031
0d5f0                 | LR__1020
0d5f0     08 4E 05 F1 | 	add	fp, #8
0d5f4     A7 38 68 FC | 	wrlong	#28, fp
0d5f8     2C 4E 05 F1 | 	add	fp, #44
0d5fc     A7 12 02 FB | 	rdlong	arg01, fp
0d600     34 4E 85 F1 | 	sub	fp, #52
0d604     B0 83 B0 FD | 	call	#_pspeek
0d608     FD FA E1 F8 | 	getbyte	result1, result1, #0
0d60c     A7 FA 61 FC | 	wrlong	result1, fp
0d610     80 FA 15 F2 | 	cmp	result1, #128 wc
0d614     00 1F 66 36 |  if_ae	neg	local01, #256
0d618     A7 22 02 3B |  if_ae	rdlong	local03, fp
0d61c     11 1F 42 35 |  if_ae	or	local01, local03
0d620     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0d624     54 01 90 FD | 	jmp	#LR__1031
0d628                 | LR__1021
0d628     08 4E 05 F1 | 	add	fp, #8
0d62c     A7 3A 68 FC | 	wrlong	#29, fp
0d630     2C 4E 05 F1 | 	add	fp, #44
0d634     A7 12 02 FB | 	rdlong	arg01, fp
0d638     34 4E 85 F1 | 	sub	fp, #52
0d63c     78 83 B0 FD | 	call	#_pspeek
0d640     FD FA E1 F8 | 	getbyte	result1, result1, #0
0d644     A7 FA 61 FC | 	wrlong	result1, fp
0d648     30 01 90 FD | 	jmp	#LR__1031
0d64c                 | LR__1022
0d64c     08 4E 05 F1 | 	add	fp, #8
0d650     A7 38 68 FC | 	wrlong	#28, fp
0d654     2C 4E 05 F1 | 	add	fp, #44
0d658     A7 12 02 FB | 	rdlong	arg01, fp
0d65c     34 4E 85 F1 | 	sub	fp, #52
0d660     AC 83 B0 FD | 	call	#_pslpeek
0d664     FD FA 31 F9 | 	getword	result1, result1, #0
0d668     A7 FA 61 FC | 	wrlong	result1, fp
0d66c     40 00 00 FF 
0d670     00 FA 15 F2 | 	cmp	result1, ##32768 wc
0d674     FF 7F 00 3F 
0d678     00 1F 06 36 |  if_ae	mov	local01, ##16776960
0d67c     A7 22 02 3B |  if_ae	rdlong	local03, fp
0d680     11 1F 42 35 |  if_ae	or	local01, local03
0d684     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0d688     F0 00 90 FD | 	jmp	#LR__1031
0d68c                 | LR__1023
0d68c     08 4E 05 F1 | 	add	fp, #8
0d690     A7 3A 68 FC | 	wrlong	#29, fp
0d694     2C 4E 05 F1 | 	add	fp, #44
0d698     A7 12 02 FB | 	rdlong	arg01, fp
0d69c     34 4E 85 F1 | 	sub	fp, #52
0d6a0     6C 83 B0 FD | 	call	#_pslpeek
0d6a4     FD FA 31 F9 | 	getword	result1, result1, #0
0d6a8     A7 FA 61 FC | 	wrlong	result1, fp
0d6ac     CC 00 90 FD | 	jmp	#LR__1031
0d6b0                 | LR__1024
0d6b0     08 4E 05 F1 | 	add	fp, #8
0d6b4     A7 38 68 FC | 	wrlong	#28, fp
0d6b8     2C 4E 05 F1 | 	add	fp, #44
0d6bc     A7 12 02 FB | 	rdlong	arg01, fp
0d6c0     34 4E 85 F1 | 	sub	fp, #52
0d6c4     48 83 B0 FD | 	call	#_pslpeek
0d6c8     A7 FA 61 FC | 	wrlong	result1, fp
0d6cc     AC 00 90 FD | 	jmp	#LR__1031
0d6d0                 | LR__1025
0d6d0     08 4E 05 F1 | 	add	fp, #8
0d6d4     A7 3A 68 FC | 	wrlong	#29, fp
0d6d8     2C 4E 05 F1 | 	add	fp, #44
0d6dc     A7 12 02 FB | 	rdlong	arg01, fp
0d6e0     34 4E 85 F1 | 	sub	fp, #52
0d6e4     28 83 B0 FD | 	call	#_pslpeek
0d6e8     A7 FA 61 FC | 	wrlong	result1, fp
0d6ec     8C 00 90 FD | 	jmp	#LR__1031
0d6f0                 | LR__1026
0d6f0     08 4E 05 F1 | 	add	fp, #8
0d6f4     A7 FE 69 FC | 	wrlong	#255, fp
0d6f8     08 4E 85 F1 | 	sub	fp, #8
0d6fc     A7 60 68 FC | 	wrlong	#48, fp
0d700     78 00 90 FD | 	jmp	#LR__1031
0d704                 | LR__1027
0d704     08 4E 05 F1 | 	add	fp, #8
0d708     A7 FE 69 FC | 	wrlong	#255, fp
0d70c     08 4E 85 F1 | 	sub	fp, #8
0d710     A7 60 68 FC | 	wrlong	#48, fp
0d714     64 00 90 FD | 	jmp	#LR__1031
0d718                 | LR__1028
0d718     08 4E 05 F1 | 	add	fp, #8
0d71c     A7 3C 68 FC | 	wrlong	#30, fp
0d720     2C 4E 05 F1 | 	add	fp, #44
0d724     A7 12 02 FB | 	rdlong	arg01, fp
0d728     34 4E 85 F1 | 	sub	fp, #52
0d72c     E0 82 B0 FD | 	call	#_pslpeek
0d730     A7 FA 61 FC | 	wrlong	result1, fp
0d734     44 00 90 FD | 	jmp	#LR__1031
0d738                 | LR__1029
0d738     08 4E 05 F1 | 	add	fp, #8
0d73c     A7 FE 69 FC | 	wrlong	#255, fp
0d740     08 4E 85 F1 | 	sub	fp, #8
0d744     A7 60 68 FC | 	wrlong	#48, fp
0d748     30 00 90 FD | 	jmp	#LR__1031
0d74c                 | LR__1030
0d74c     08 4E 05 F1 | 	add	fp, #8
0d750     A7 3E 68 FC | 	wrlong	#31, fp
0d754     2C 4E 05 F1 | 	add	fp, #44
0d758     A7 12 02 FB | 	rdlong	arg01, fp
0d75c     34 4E 85 F1 | 	sub	fp, #52
0d760     AC 82 B0 FD | 	call	#_pslpeek
0d764     A7 FA 61 FC | 	wrlong	result1, fp
0d768     00 04 00 FF 
0d76c     00 FA 15 F2 | 	cmp	result1, ##524288 wc
0d770     08 4E 05 31 |  if_ae	add	fp, #8
0d774     A7 56 68 3C |  if_ae	wrlong	#43, fp
0d778     08 4E 85 31 |  if_ae	sub	fp, #8
0d77c                 | LR__1031
0d77c     A7 12 02 F6 | 	mov	arg01, fp
0d780     F8 C1 BF FD | 	call	#_push
0d784                 | LR__1032
0d784     A7 F0 03 F6 | 	mov	ptra, fp
0d788     B2 00 A0 FD | 	call	#popregs_
0d78c                 | _do_getvar_ret
0d78c     2D 00 64 FD | 	ret
0d790                 | 
0d790                 | ' 
0d790                 | ' '------------------------ Operators 
0d790                 | ' 
0d790                 | ' sub do_plus 
0d790                 | _do_plus
0d790     05 4A 05 F6 | 	mov	COUNT_, #5
0d794     A8 00 A0 FD | 	call	#pushregs_
0d798     18 F0 07 F1 | 	add	ptra, #24
0d79c     44 C1 BF FD | 	call	#_pop
0d7a0     FD 1E 02 F6 | 	mov	local01, result1
0d7a4     FE 20 02 F6 | 	mov	local02, result2
0d7a8     FF 22 02 F6 | 	mov	local03, result3
0d7ac     0C 4E 05 F1 | 	add	fp, #12
0d7b0     A7 1E 62 FC | 	wrlong	local01, fp
0d7b4     04 4E 05 F1 | 	add	fp, #4
0d7b8     A7 20 62 FC | 	wrlong	local02, fp
0d7bc     04 4E 05 F1 | 	add	fp, #4
0d7c0     A7 22 62 FC | 	wrlong	local03, fp
0d7c4     14 4E 85 F1 | 	sub	fp, #20
0d7c8     18 C1 BF FD | 	call	#_pop
0d7cc     FF 22 02 F6 | 	mov	local03, result3
0d7d0     A7 FA 61 FC | 	wrlong	result1, fp
0d7d4     04 4E 05 F1 | 	add	fp, #4
0d7d8     A7 FC 61 FC | 	wrlong	result2, fp
0d7dc     04 4E 05 F1 | 	add	fp, #4
0d7e0     A7 22 62 FC | 	wrlong	local03, fp
0d7e4                 | ' 
0d7e4                 | ' t2=pop()
0d7e4                 | ' t1=pop()
0d7e4                 | ' 
0d7e4                 | ' 
0d7e4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
0d7e4     08 4E 85 F1 | 	sub	fp, #8
0d7e8     1D 22 0E F2 | 	cmp	local03, #29 wz
0d7ec     14 4E 05 A1 |  if_e	add	fp, #20
0d7f0     A7 24 02 AB |  if_e	rdlong	local04, fp
0d7f4     14 4E 85 A1 |  if_e	sub	fp, #20
0d7f8     12 23 02 A6 |  if_e	mov	local03, local04
0d7fc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d800     1C 00 90 5D |  if_ne	jmp	#LR__1040
0d804     A7 1E 02 FB | 	rdlong	local01, fp
0d808     0C 4E 05 F1 | 	add	fp, #12
0d80c     A7 20 02 FB | 	rdlong	local02, fp
0d810     0C 4E 85 F1 | 	sub	fp, #12
0d814     10 1F 02 F1 | 	add	local01, local02
0d818     A7 1E 62 FC | 	wrlong	local01, fp
0d81c     48 04 90 FD | 	jmp	#LR__1055
0d820                 | LR__1040
0d820                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
0d820     08 4E 05 F1 | 	add	fp, #8
0d824     A7 1E 02 FB | 	rdlong	local01, fp
0d828     08 4E 85 F1 | 	sub	fp, #8
0d82c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d830     14 4E 05 A1 |  if_e	add	fp, #20
0d834     A7 24 02 AB |  if_e	rdlong	local04, fp
0d838     14 4E 85 A1 |  if_e	sub	fp, #20
0d83c     12 23 02 A6 |  if_e	mov	local03, local04
0d840     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d844     28 00 90 5D |  if_ne	jmp	#LR__1041
0d848     A7 1E 02 FB | 	rdlong	local01, fp
0d84c     0C 4E 05 F1 | 	add	fp, #12
0d850     A7 20 02 FB | 	rdlong	local02, fp
0d854     0C 4E 85 F1 | 	sub	fp, #12
0d858     10 1F 02 F1 | 	add	local01, local02
0d85c     A7 1E 62 FC | 	wrlong	local01, fp
0d860     08 4E 05 F1 | 	add	fp, #8
0d864     A7 38 68 FC | 	wrlong	#28, fp
0d868     08 4E 85 F1 | 	sub	fp, #8
0d86c     F8 03 90 FD | 	jmp	#LR__1055
0d870                 | LR__1041
0d870                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0d870     08 4E 05 F1 | 	add	fp, #8
0d874     A7 1E 02 FB | 	rdlong	local01, fp
0d878     08 4E 85 F1 | 	sub	fp, #8
0d87c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d880     14 4E 05 A1 |  if_e	add	fp, #20
0d884     A7 24 02 AB |  if_e	rdlong	local04, fp
0d888     14 4E 85 A1 |  if_e	sub	fp, #20
0d88c     12 23 02 A6 |  if_e	mov	local03, local04
0d890     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d894     30 00 90 5D |  if_ne	jmp	#LR__1042
0d898     A7 12 02 FB | 	rdlong	arg01, fp
0d89c     C0 DB B0 FD | 	call	#__system___float_fromuns
0d8a0     FD 12 02 F6 | 	mov	arg01, result1
0d8a4     0C 4E 05 F1 | 	add	fp, #12
0d8a8     A7 14 02 FB | 	rdlong	arg02, fp
0d8ac     0C 4E 85 F1 | 	sub	fp, #12
0d8b0     E0 DB B0 FD | 	call	#__system___float_add
0d8b4     A7 FA 61 FC | 	wrlong	result1, fp
0d8b8     08 4E 05 F1 | 	add	fp, #8
0d8bc     A7 3C 68 FC | 	wrlong	#30, fp
0d8c0     08 4E 85 F1 | 	sub	fp, #8
0d8c4     A0 03 90 FD | 	jmp	#LR__1055
0d8c8                 | LR__1042
0d8c8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
0d8c8     08 4E 05 F1 | 	add	fp, #8
0d8cc     A7 1E 02 FB | 	rdlong	local01, fp
0d8d0     08 4E 85 F1 | 	sub	fp, #8
0d8d4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d8d8     14 4E 05 A1 |  if_e	add	fp, #20
0d8dc     A7 24 02 AB |  if_e	rdlong	local04, fp
0d8e0     14 4E 85 A1 |  if_e	sub	fp, #20
0d8e4     12 23 02 A6 |  if_e	mov	local03, local04
0d8e8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d8ec     1C 00 90 5D |  if_ne	jmp	#LR__1043
0d8f0     A7 1E 02 FB | 	rdlong	local01, fp
0d8f4     0C 4E 05 F1 | 	add	fp, #12
0d8f8     A7 20 02 FB | 	rdlong	local02, fp
0d8fc     0C 4E 85 F1 | 	sub	fp, #12
0d900     10 1F 02 F1 | 	add	local01, local02
0d904     A7 1E 62 FC | 	wrlong	local01, fp
0d908     5C 03 90 FD | 	jmp	#LR__1055
0d90c                 | LR__1043
0d90c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
0d90c     08 4E 05 F1 | 	add	fp, #8
0d910     A7 1E 02 FB | 	rdlong	local01, fp
0d914     08 4E 85 F1 | 	sub	fp, #8
0d918     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d91c     14 4E 05 A1 |  if_e	add	fp, #20
0d920     A7 24 02 AB |  if_e	rdlong	local04, fp
0d924     14 4E 85 A1 |  if_e	sub	fp, #20
0d928     12 23 02 A6 |  if_e	mov	local03, local04
0d92c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d930     1C 00 90 5D |  if_ne	jmp	#LR__1044
0d934     A7 1E 02 FB | 	rdlong	local01, fp
0d938     0C 4E 05 F1 | 	add	fp, #12
0d93c     A7 20 02 FB | 	rdlong	local02, fp
0d940     0C 4E 85 F1 | 	sub	fp, #12
0d944     10 1F 02 F1 | 	add	local01, local02
0d948     A7 1E 62 FC | 	wrlong	local01, fp
0d94c     18 03 90 FD | 	jmp	#LR__1055
0d950                 | LR__1044
0d950                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0d950     08 4E 05 F1 | 	add	fp, #8
0d954     A7 1E 02 FB | 	rdlong	local01, fp
0d958     08 4E 85 F1 | 	sub	fp, #8
0d95c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d960     14 4E 05 A1 |  if_e	add	fp, #20
0d964     A7 24 02 AB |  if_e	rdlong	local04, fp
0d968     14 4E 85 A1 |  if_e	sub	fp, #20
0d96c     12 23 02 A6 |  if_e	mov	local03, local04
0d970     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d974     40 00 90 5D |  if_ne	jmp	#LR__1045
0d978     A7 12 02 FB | 	rdlong	arg01, fp
0d97c     09 13 52 F6 | 	abs	arg01, arg01 wc
0d980     1F 26 C6 C9 |  if_b	decod	local05, #31
0d984     00 26 06 36 |  if_ae	mov	local05, #0
0d988     D4 DA B0 FD | 	call	#__system___float_fromuns
0d98c     13 FB 61 F5 | 	xor	result1, local05
0d990     FD 12 02 F6 | 	mov	arg01, result1
0d994     0C 4E 05 F1 | 	add	fp, #12
0d998     A7 14 02 FB | 	rdlong	arg02, fp
0d99c     0C 4E 85 F1 | 	sub	fp, #12
0d9a0     F0 DA B0 FD | 	call	#__system___float_add
0d9a4     A7 FA 61 FC | 	wrlong	result1, fp
0d9a8     08 4E 05 F1 | 	add	fp, #8
0d9ac     A7 3C 68 FC | 	wrlong	#30, fp
0d9b0     08 4E 85 F1 | 	sub	fp, #8
0d9b4     B0 02 90 FD | 	jmp	#LR__1055
0d9b8                 | LR__1045
0d9b8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
0d9b8     08 4E 05 F1 | 	add	fp, #8
0d9bc     A7 1E 02 FB | 	rdlong	local01, fp
0d9c0     08 4E 85 F1 | 	sub	fp, #8
0d9c4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d9c8     14 4E 05 A1 |  if_e	add	fp, #20
0d9cc     A7 24 02 AB |  if_e	rdlong	local04, fp
0d9d0     14 4E 85 A1 |  if_e	sub	fp, #20
0d9d4     12 23 02 A6 |  if_e	mov	local03, local04
0d9d8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d9dc     28 00 90 5D |  if_ne	jmp	#LR__1046
0d9e0     A7 1E 02 FB | 	rdlong	local01, fp
0d9e4     0C 4E 05 F1 | 	add	fp, #12
0d9e8     A7 12 02 FB | 	rdlong	arg01, fp
0d9ec     0C 4E 85 F1 | 	sub	fp, #12
0d9f0     6C DA B0 FD | 	call	#__system___float_fromuns
0d9f4     FD 14 02 F6 | 	mov	arg02, result1
0d9f8     0F 13 02 F6 | 	mov	arg01, local01
0d9fc     94 DA B0 FD | 	call	#__system___float_add
0da00     A7 FA 61 FC | 	wrlong	result1, fp
0da04     60 02 90 FD | 	jmp	#LR__1055
0da08                 | LR__1046
0da08                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
0da08     08 4E 05 F1 | 	add	fp, #8
0da0c     A7 1E 02 FB | 	rdlong	local01, fp
0da10     08 4E 85 F1 | 	sub	fp, #8
0da14     1E 1E 0E F2 | 	cmp	local01, #30 wz
0da18     14 4E 05 A1 |  if_e	add	fp, #20
0da1c     A7 24 02 AB |  if_e	rdlong	local04, fp
0da20     14 4E 85 A1 |  if_e	sub	fp, #20
0da24     12 23 02 A6 |  if_e	mov	local03, local04
0da28     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0da2c     38 00 90 5D |  if_ne	jmp	#LR__1047
0da30     A7 1E 02 FB | 	rdlong	local01, fp
0da34     0C 4E 05 F1 | 	add	fp, #12
0da38     A7 12 02 FB | 	rdlong	arg01, fp
0da3c     0C 4E 85 F1 | 	sub	fp, #12
0da40     09 13 52 F6 | 	abs	arg01, arg01 wc
0da44     1F 26 C6 C9 |  if_b	decod	local05, #31
0da48     00 26 06 36 |  if_ae	mov	local05, #0
0da4c     10 DA B0 FD | 	call	#__system___float_fromuns
0da50     13 FB 61 F5 | 	xor	result1, local05
0da54     FD 14 02 F6 | 	mov	arg02, result1
0da58     0F 13 02 F6 | 	mov	arg01, local01
0da5c     34 DA B0 FD | 	call	#__system___float_add
0da60     A7 FA 61 FC | 	wrlong	result1, fp
0da64     00 02 90 FD | 	jmp	#LR__1055
0da68                 | LR__1047
0da68                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
0da68     08 4E 05 F1 | 	add	fp, #8
0da6c     A7 1E 02 FB | 	rdlong	local01, fp
0da70     08 4E 85 F1 | 	sub	fp, #8
0da74     1E 1E 0E F2 | 	cmp	local01, #30 wz
0da78     14 4E 05 A1 |  if_e	add	fp, #20
0da7c     A7 24 02 AB |  if_e	rdlong	local04, fp
0da80     14 4E 85 A1 |  if_e	sub	fp, #20
0da84     1E 24 0E A2 |  if_e	cmp	local04, #30 wz
0da88     1C 00 90 5D |  if_ne	jmp	#LR__1048
0da8c     A7 12 02 FB | 	rdlong	arg01, fp
0da90     0C 4E 05 F1 | 	add	fp, #12
0da94     A7 14 02 FB | 	rdlong	arg02, fp
0da98     0C 4E 85 F1 | 	sub	fp, #12
0da9c     F4 D9 B0 FD | 	call	#__system___float_add
0daa0     A7 FA 61 FC | 	wrlong	result1, fp
0daa4     C0 01 90 FD | 	jmp	#LR__1055
0daa8                 | LR__1048
0daa8                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0daa8     08 4E 05 F1 | 	add	fp, #8
0daac     A7 1E 02 FB | 	rdlong	local01, fp
0dab0     08 4E 85 F1 | 	sub	fp, #8
0dab4     1F 1E 0E F2 | 	cmp	local01, #31 wz
0dab8     24 00 90 5D |  if_ne	jmp	#LR__1049
0dabc     14 4E 05 F1 | 	add	fp, #20
0dac0     A7 22 02 FB | 	rdlong	local03, fp
0dac4     14 4E 85 F1 | 	sub	fp, #20
0dac8     1F 22 0E F2 | 	cmp	local03, #31 wz
0dacc     A7 04 68 5C |  if_ne	wrlong	#2, fp
0dad0     08 4E 05 51 |  if_ne	add	fp, #8
0dad4     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0dad8     08 4E 85 51 |  if_ne	sub	fp, #8
0dadc     88 01 90 5D |  if_ne	jmp	#LR__1055
0dae0                 | LR__1049
0dae0                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0dae0     14 4E 05 F1 | 	add	fp, #20
0dae4     A7 1E 02 FB | 	rdlong	local01, fp
0dae8     14 4E 85 F1 | 	sub	fp, #20
0daec     1F 1E 0E F2 | 	cmp	local01, #31 wz
0daf0     24 00 90 5D |  if_ne	jmp	#LR__1050
0daf4     08 4E 05 F1 | 	add	fp, #8
0daf8     A7 22 02 FB | 	rdlong	local03, fp
0dafc     08 4E 85 F1 | 	sub	fp, #8
0db00     1F 22 0E F2 | 	cmp	local03, #31 wz
0db04     A7 04 68 5C |  if_ne	wrlong	#2, fp
0db08     08 4E 05 51 |  if_ne	add	fp, #8
0db0c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0db10     08 4E 85 51 |  if_ne	sub	fp, #8
0db14     50 01 90 5D |  if_ne	jmp	#LR__1055
0db18                 | LR__1050
0db18                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
0db18     08 4E 05 F1 | 	add	fp, #8
0db1c     A7 1E 02 FB | 	rdlong	local01, fp
0db20     08 4E 85 F1 | 	sub	fp, #8
0db24     1F 1E 0E F2 | 	cmp	local01, #31 wz
0db28     14 4E 05 A1 |  if_e	add	fp, #20
0db2c     A7 22 02 AB |  if_e	rdlong	local03, fp
0db30     14 4E 85 A1 |  if_e	sub	fp, #20
0db34     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0db38     1C 00 90 5D |  if_ne	jmp	#LR__1051
0db3c     A7 12 02 FB | 	rdlong	arg01, fp
0db40     0C 4E 05 F1 | 	add	fp, #12
0db44     A7 14 02 FB | 	rdlong	arg02, fp
0db48     0C 4E 85 F1 | 	sub	fp, #12
0db4c     84 B2 B0 FD | 	call	#__system___string_concat
0db50     A7 FA 61 FC | 	wrlong	result1, fp
0db54     10 01 90 FD | 	jmp	#LR__1055
0db58                 | LR__1051
0db58                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
0db58     08 4E 05 F1 | 	add	fp, #8
0db5c     A7 1E 02 FB | 	rdlong	local01, fp
0db60     08 4E 85 F1 | 	sub	fp, #8
0db64     2B 1E 0E F2 | 	cmp	local01, #43 wz
0db68     14 4E 05 A1 |  if_e	add	fp, #20
0db6c     A7 22 02 AB |  if_e	rdlong	local03, fp
0db70     14 4E 85 A1 |  if_e	sub	fp, #20
0db74     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0db78     30 00 90 5D |  if_ne	jmp	#LR__1052
0db7c     A7 12 02 FB | 	rdlong	arg01, fp
0db80     9C EE BF FD | 	call	#_convertstring
0db84     FD 12 02 F6 | 	mov	arg01, result1
0db88     0C 4E 05 F1 | 	add	fp, #12
0db8c     A7 14 02 FB | 	rdlong	arg02, fp
0db90     0C 4E 85 F1 | 	sub	fp, #12
0db94     3C B2 B0 FD | 	call	#__system___string_concat
0db98     A7 FA 61 FC | 	wrlong	result1, fp
0db9c     08 4E 05 F1 | 	add	fp, #8
0dba0     A7 3E 68 FC | 	wrlong	#31, fp
0dba4     08 4E 85 F1 | 	sub	fp, #8
0dba8     BC 00 90 FD | 	jmp	#LR__1055
0dbac                 | LR__1052
0dbac                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
0dbac     08 4E 05 F1 | 	add	fp, #8
0dbb0     A7 1E 02 FB | 	rdlong	local01, fp
0dbb4     08 4E 85 F1 | 	sub	fp, #8
0dbb8     1F 1E 0E F2 | 	cmp	local01, #31 wz
0dbbc     14 4E 05 A1 |  if_e	add	fp, #20
0dbc0     A7 22 02 AB |  if_e	rdlong	local03, fp
0dbc4     14 4E 85 A1 |  if_e	sub	fp, #20
0dbc8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0dbcc     28 00 90 5D |  if_ne	jmp	#LR__1053
0dbd0     A7 1E 02 FB | 	rdlong	local01, fp
0dbd4     0C 4E 05 F1 | 	add	fp, #12
0dbd8     A7 12 02 FB | 	rdlong	arg01, fp
0dbdc     0C 4E 85 F1 | 	sub	fp, #12
0dbe0     3C EE BF FD | 	call	#_convertstring
0dbe4     FD 14 02 F6 | 	mov	arg02, result1
0dbe8     0F 13 02 F6 | 	mov	arg01, local01
0dbec     E4 B1 B0 FD | 	call	#__system___string_concat
0dbf0     A7 FA 61 FC | 	wrlong	result1, fp
0dbf4     70 00 90 FD | 	jmp	#LR__1055
0dbf8                 | LR__1053
0dbf8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
0dbf8     08 4E 05 F1 | 	add	fp, #8
0dbfc     A7 1E 02 FB | 	rdlong	local01, fp
0dc00     08 4E 85 F1 | 	sub	fp, #8
0dc04     2B 1E 0E F2 | 	cmp	local01, #43 wz
0dc08     14 4E 05 A1 |  if_e	add	fp, #20
0dc0c     A7 22 02 AB |  if_e	rdlong	local03, fp
0dc10     14 4E 85 A1 |  if_e	sub	fp, #20
0dc14     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0dc18     3C 00 90 5D |  if_ne	jmp	#LR__1054
0dc1c     A7 12 02 FB | 	rdlong	arg01, fp
0dc20     FC ED BF FD | 	call	#_convertstring
0dc24     FD 1E 02 F6 | 	mov	local01, result1
0dc28     0C 4E 05 F1 | 	add	fp, #12
0dc2c     A7 12 02 FB | 	rdlong	arg01, fp
0dc30     0C 4E 85 F1 | 	sub	fp, #12
0dc34     E8 ED BF FD | 	call	#_convertstring
0dc38     FD 14 02 F6 | 	mov	arg02, result1
0dc3c     0F 13 02 F6 | 	mov	arg01, local01
0dc40     90 B1 B0 FD | 	call	#__system___string_concat
0dc44     A7 FA 61 FC | 	wrlong	result1, fp
0dc48     08 4E 05 F1 | 	add	fp, #8
0dc4c     A7 3E 68 FC | 	wrlong	#31, fp
0dc50     08 4E 85 F1 | 	sub	fp, #8
0dc54     10 00 90 FD | 	jmp	#LR__1055
0dc58                 | LR__1054
0dc58     A7 08 68 FC | 	wrlong	#4, fp
0dc5c     08 4E 05 F1 | 	add	fp, #8
0dc60     A7 FE 69 FC | 	wrlong	#255, fp
0dc64     08 4E 85 F1 | 	sub	fp, #8
0dc68                 | LR__1055
0dc68     A7 12 02 F6 | 	mov	arg01, fp
0dc6c     0C BD BF FD | 	call	#_push
0dc70     A7 F0 03 F6 | 	mov	ptra, fp
0dc74     B2 00 A0 FD | 	call	#popregs_
0dc78                 | _do_plus_ret
0dc78     2D 00 64 FD | 	ret
0dc7c                 | 
0dc7c                 | ' 
0dc7c                 | ' sub do_minus
0dc7c                 | _do_minus
0dc7c     05 4A 05 F6 | 	mov	COUNT_, #5
0dc80     A8 00 A0 FD | 	call	#pushregs_
0dc84     18 F0 07 F1 | 	add	ptra, #24
0dc88     58 BC BF FD | 	call	#_pop
0dc8c     FD 1E 02 F6 | 	mov	local01, result1
0dc90     FE 20 02 F6 | 	mov	local02, result2
0dc94     FF 22 02 F6 | 	mov	local03, result3
0dc98     0C 4E 05 F1 | 	add	fp, #12
0dc9c     A7 1E 62 FC | 	wrlong	local01, fp
0dca0     04 4E 05 F1 | 	add	fp, #4
0dca4     A7 20 62 FC | 	wrlong	local02, fp
0dca8     04 4E 05 F1 | 	add	fp, #4
0dcac     A7 22 62 FC | 	wrlong	local03, fp
0dcb0     14 4E 85 F1 | 	sub	fp, #20
0dcb4     2C BC BF FD | 	call	#_pop
0dcb8     FF 22 02 F6 | 	mov	local03, result3
0dcbc     A7 FA 61 FC | 	wrlong	result1, fp
0dcc0     04 4E 05 F1 | 	add	fp, #4
0dcc4     A7 FC 61 FC | 	wrlong	result2, fp
0dcc8     04 4E 05 F1 | 	add	fp, #4
0dccc     A7 22 62 FC | 	wrlong	local03, fp
0dcd0                 | ' 
0dcd0                 | ' t2=pop()
0dcd0                 | ' t1=pop()
0dcd0                 | ' 
0dcd0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
0dcd0     08 4E 85 F1 | 	sub	fp, #8
0dcd4     1D 22 0E F2 | 	cmp	local03, #29 wz
0dcd8     14 4E 05 A1 |  if_e	add	fp, #20
0dcdc     A7 24 02 AB |  if_e	rdlong	local04, fp
0dce0     14 4E 85 A1 |  if_e	sub	fp, #20
0dce4     12 23 02 A6 |  if_e	mov	local03, local04
0dce8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0dcec     5C 00 90 5D |  if_ne	jmp	#LR__1061
0dcf0                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
0dcf0     0C 4E 05 F1 | 	add	fp, #12
0dcf4     A7 1E 02 FB | 	rdlong	local01, fp
0dcf8     0C 4E 85 F1 | 	sub	fp, #12
0dcfc     A7 22 02 FB | 	rdlong	local03, fp
0dd00     11 1F 12 F2 | 	cmp	local01, local03 wc
0dd04     1C 00 90 3D |  if_ae	jmp	#LR__1060
0dd08     A7 1E 02 FB | 	rdlong	local01, fp
0dd0c     0C 4E 05 F1 | 	add	fp, #12
0dd10     A7 20 02 FB | 	rdlong	local02, fp
0dd14     0C 4E 85 F1 | 	sub	fp, #12
0dd18     10 1F 82 F1 | 	sub	local01, local02
0dd1c     A7 1E 62 FC | 	wrlong	local01, fp
0dd20     F4 02 90 FD | 	jmp	#LR__1070
0dd24                 | LR__1060
0dd24     A7 1E 02 FB | 	rdlong	local01, fp
0dd28     0C 4E 05 F1 | 	add	fp, #12
0dd2c     A7 20 02 FB | 	rdlong	local02, fp
0dd30     0C 4E 85 F1 | 	sub	fp, #12
0dd34     10 1F 82 F1 | 	sub	local01, local02
0dd38     A7 1E 62 FC | 	wrlong	local01, fp
0dd3c     08 4E 05 F1 | 	add	fp, #8
0dd40     A7 38 68 FC | 	wrlong	#28, fp
0dd44     08 4E 85 F1 | 	sub	fp, #8
0dd48     CC 02 90 FD | 	jmp	#LR__1070
0dd4c                 | LR__1061
0dd4c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
0dd4c     08 4E 05 F1 | 	add	fp, #8
0dd50     A7 1E 02 FB | 	rdlong	local01, fp
0dd54     08 4E 85 F1 | 	sub	fp, #8
0dd58     1D 1E 0E F2 | 	cmp	local01, #29 wz
0dd5c     14 4E 05 A1 |  if_e	add	fp, #20
0dd60     A7 24 02 AB |  if_e	rdlong	local04, fp
0dd64     14 4E 85 A1 |  if_e	sub	fp, #20
0dd68     12 23 02 A6 |  if_e	mov	local03, local04
0dd6c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0dd70     28 00 90 5D |  if_ne	jmp	#LR__1062
0dd74     A7 1E 02 FB | 	rdlong	local01, fp
0dd78     0C 4E 05 F1 | 	add	fp, #12
0dd7c     A7 20 02 FB | 	rdlong	local02, fp
0dd80     0C 4E 85 F1 | 	sub	fp, #12
0dd84     10 1F 82 F1 | 	sub	local01, local02
0dd88     A7 1E 62 FC | 	wrlong	local01, fp
0dd8c     08 4E 05 F1 | 	add	fp, #8
0dd90     A7 38 68 FC | 	wrlong	#28, fp
0dd94     08 4E 85 F1 | 	sub	fp, #8
0dd98     7C 02 90 FD | 	jmp	#LR__1070
0dd9c                 | LR__1062
0dd9c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0dd9c     08 4E 05 F1 | 	add	fp, #8
0dda0     A7 1E 02 FB | 	rdlong	local01, fp
0dda4     08 4E 85 F1 | 	sub	fp, #8
0dda8     1D 1E 0E F2 | 	cmp	local01, #29 wz
0ddac     14 4E 05 A1 |  if_e	add	fp, #20
0ddb0     A7 24 02 AB |  if_e	rdlong	local04, fp
0ddb4     14 4E 85 A1 |  if_e	sub	fp, #20
0ddb8     12 23 02 A6 |  if_e	mov	local03, local04
0ddbc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0ddc0     34 00 90 5D |  if_ne	jmp	#LR__1063
0ddc4     A7 12 02 FB | 	rdlong	arg01, fp
0ddc8     94 D6 B0 FD | 	call	#__system___float_fromuns
0ddcc     FD 12 02 F6 | 	mov	arg01, result1
0ddd0     0C 4E 05 F1 | 	add	fp, #12
0ddd4     A7 14 02 FB | 	rdlong	arg02, fp
0ddd8     0C 4E 85 F1 | 	sub	fp, #12
0dddc     1F 14 E6 F4 | 	bitnot	arg02, #31
0dde0     B0 D6 B0 FD | 	call	#__system___float_add
0dde4     A7 FA 61 FC | 	wrlong	result1, fp
0dde8     08 4E 05 F1 | 	add	fp, #8
0ddec     A7 3C 68 FC | 	wrlong	#30, fp
0ddf0     08 4E 85 F1 | 	sub	fp, #8
0ddf4     20 02 90 FD | 	jmp	#LR__1070
0ddf8                 | LR__1063
0ddf8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
0ddf8     08 4E 05 F1 | 	add	fp, #8
0ddfc     A7 1E 02 FB | 	rdlong	local01, fp
0de00     08 4E 85 F1 | 	sub	fp, #8
0de04     1C 1E 0E F2 | 	cmp	local01, #28 wz
0de08     14 4E 05 A1 |  if_e	add	fp, #20
0de0c     A7 24 02 AB |  if_e	rdlong	local04, fp
0de10     14 4E 85 A1 |  if_e	sub	fp, #20
0de14     12 23 02 A6 |  if_e	mov	local03, local04
0de18     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0de1c     1C 00 90 5D |  if_ne	jmp	#LR__1064
0de20     A7 1E 02 FB | 	rdlong	local01, fp
0de24     0C 4E 05 F1 | 	add	fp, #12
0de28     A7 20 02 FB | 	rdlong	local02, fp
0de2c     0C 4E 85 F1 | 	sub	fp, #12
0de30     10 1F 82 F1 | 	sub	local01, local02
0de34     A7 1E 62 FC | 	wrlong	local01, fp
0de38     DC 01 90 FD | 	jmp	#LR__1070
0de3c                 | LR__1064
0de3c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
0de3c     08 4E 05 F1 | 	add	fp, #8
0de40     A7 1E 02 FB | 	rdlong	local01, fp
0de44     08 4E 85 F1 | 	sub	fp, #8
0de48     1C 1E 0E F2 | 	cmp	local01, #28 wz
0de4c     14 4E 05 A1 |  if_e	add	fp, #20
0de50     A7 24 02 AB |  if_e	rdlong	local04, fp
0de54     14 4E 85 A1 |  if_e	sub	fp, #20
0de58     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0de5c     1C 00 90 5D |  if_ne	jmp	#LR__1065
0de60     A7 1E 02 FB | 	rdlong	local01, fp
0de64     0C 4E 05 F1 | 	add	fp, #12
0de68     A7 20 02 FB | 	rdlong	local02, fp
0de6c     0C 4E 85 F1 | 	sub	fp, #12
0de70     10 1F 82 F1 | 	sub	local01, local02
0de74     A7 1E 62 FC | 	wrlong	local01, fp
0de78     9C 01 90 FD | 	jmp	#LR__1070
0de7c                 | LR__1065
0de7c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0de7c     08 4E 05 F1 | 	add	fp, #8
0de80     A7 1E 02 FB | 	rdlong	local01, fp
0de84     08 4E 85 F1 | 	sub	fp, #8
0de88     1C 1E 0E F2 | 	cmp	local01, #28 wz
0de8c     14 4E 05 A1 |  if_e	add	fp, #20
0de90     A7 22 02 AB |  if_e	rdlong	local03, fp
0de94     14 4E 85 A1 |  if_e	sub	fp, #20
0de98     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0de9c     44 00 90 5D |  if_ne	jmp	#LR__1066
0dea0     A7 12 02 FB | 	rdlong	arg01, fp
0dea4     09 13 52 F6 | 	abs	arg01, arg01 wc
0dea8     1F 26 C6 C9 |  if_b	decod	local05, #31
0deac     00 26 06 36 |  if_ae	mov	local05, #0
0deb0     AC D5 B0 FD | 	call	#__system___float_fromuns
0deb4     13 FB 61 F5 | 	xor	result1, local05
0deb8     FD 12 02 F6 | 	mov	arg01, result1
0debc     0C 4E 05 F1 | 	add	fp, #12
0dec0     A7 14 02 FB | 	rdlong	arg02, fp
0dec4     0C 4E 85 F1 | 	sub	fp, #12
0dec8     1F 14 E6 F4 | 	bitnot	arg02, #31
0decc     C4 D5 B0 FD | 	call	#__system___float_add
0ded0     A7 FA 61 FC | 	wrlong	result1, fp
0ded4     08 4E 05 F1 | 	add	fp, #8
0ded8     A7 3C 68 FC | 	wrlong	#30, fp
0dedc     08 4E 85 F1 | 	sub	fp, #8
0dee0     34 01 90 FD | 	jmp	#LR__1070
0dee4                 | LR__1066
0dee4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
0dee4     08 4E 05 F1 | 	add	fp, #8
0dee8     A7 1E 02 FB | 	rdlong	local01, fp
0deec     08 4E 85 F1 | 	sub	fp, #8
0def0     1E 1E 0E F2 | 	cmp	local01, #30 wz
0def4     14 4E 05 A1 |  if_e	add	fp, #20
0def8     A7 22 02 AB |  if_e	rdlong	local03, fp
0defc     14 4E 85 A1 |  if_e	sub	fp, #20
0df00     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0df04     2C 00 90 5D |  if_ne	jmp	#LR__1067
0df08     A7 1E 02 FB | 	rdlong	local01, fp
0df0c     0C 4E 05 F1 | 	add	fp, #12
0df10     A7 12 02 FB | 	rdlong	arg01, fp
0df14     0C 4E 85 F1 | 	sub	fp, #12
0df18     44 D5 B0 FD | 	call	#__system___float_fromuns
0df1c     FD 14 02 F6 | 	mov	arg02, result1
0df20     0F 13 02 F6 | 	mov	arg01, local01
0df24     1F 14 E6 F4 | 	bitnot	arg02, #31
0df28     68 D5 B0 FD | 	call	#__system___float_add
0df2c     A7 FA 61 FC | 	wrlong	result1, fp
0df30     E4 00 90 FD | 	jmp	#LR__1070
0df34                 | LR__1067
0df34                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
0df34     08 4E 05 F1 | 	add	fp, #8
0df38     A7 1E 02 FB | 	rdlong	local01, fp
0df3c     08 4E 85 F1 | 	sub	fp, #8
0df40     1E 1E 0E F2 | 	cmp	local01, #30 wz
0df44     14 4E 05 A1 |  if_e	add	fp, #20
0df48     A7 22 02 AB |  if_e	rdlong	local03, fp
0df4c     14 4E 85 A1 |  if_e	sub	fp, #20
0df50     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0df54     3C 00 90 5D |  if_ne	jmp	#LR__1068
0df58     A7 1E 02 FB | 	rdlong	local01, fp
0df5c     0C 4E 05 F1 | 	add	fp, #12
0df60     A7 12 02 FB | 	rdlong	arg01, fp
0df64     0C 4E 85 F1 | 	sub	fp, #12
0df68     09 13 52 F6 | 	abs	arg01, arg01 wc
0df6c     1F 26 C6 C9 |  if_b	decod	local05, #31
0df70     00 26 06 36 |  if_ae	mov	local05, #0
0df74     E8 D4 B0 FD | 	call	#__system___float_fromuns
0df78     13 FB 61 F5 | 	xor	result1, local05
0df7c     FD 14 02 F6 | 	mov	arg02, result1
0df80     0F 13 02 F6 | 	mov	arg01, local01
0df84     1F 14 E6 F4 | 	bitnot	arg02, #31
0df88     08 D5 B0 FD | 	call	#__system___float_add
0df8c     A7 FA 61 FC | 	wrlong	result1, fp
0df90     84 00 90 FD | 	jmp	#LR__1070
0df94                 | LR__1068
0df94                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
0df94     08 4E 05 F1 | 	add	fp, #8
0df98     A7 1E 02 FB | 	rdlong	local01, fp
0df9c     08 4E 85 F1 | 	sub	fp, #8
0dfa0     1E 1E 0E F2 | 	cmp	local01, #30 wz
0dfa4     14 4E 05 A1 |  if_e	add	fp, #20
0dfa8     A7 22 02 AB |  if_e	rdlong	local03, fp
0dfac     14 4E 85 A1 |  if_e	sub	fp, #20
0dfb0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0dfb4     20 00 90 5D |  if_ne	jmp	#LR__1069
0dfb8     A7 12 02 FB | 	rdlong	arg01, fp
0dfbc     0C 4E 05 F1 | 	add	fp, #12
0dfc0     A7 14 02 FB | 	rdlong	arg02, fp
0dfc4     0C 4E 85 F1 | 	sub	fp, #12
0dfc8     1F 14 E6 F4 | 	bitnot	arg02, #31
0dfcc     C4 D4 B0 FD | 	call	#__system___float_add
0dfd0     A7 FA 61 FC | 	wrlong	result1, fp
0dfd4     40 00 90 FD | 	jmp	#LR__1070
0dfd8                 | LR__1069
0dfd8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
0dfd8     08 4E 05 F1 | 	add	fp, #8
0dfdc     A7 1E 02 FB | 	rdlong	local01, fp
0dfe0     08 4E 85 F1 | 	sub	fp, #8
0dfe4     1F 1E 0E F2 | 	cmp	local01, #31 wz
0dfe8     14 4E 05 51 |  if_ne	add	fp, #20
0dfec     A7 22 02 5B |  if_ne	rdlong	local03, fp
0dff0     14 4E 85 51 |  if_ne	sub	fp, #20
0dff4     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
0dff8     A7 06 68 AC |  if_e	wrlong	#3, fp
0dffc     08 4E 05 A1 |  if_e	add	fp, #8
0e000     A7 FE 69 AC |  if_e	wrlong	#255, fp
0e004     08 4E 85 A1 |  if_e	sub	fp, #8
0e008     A7 0A 68 5C |  if_ne	wrlong	#5, fp
0e00c     08 4E 05 51 |  if_ne	add	fp, #8
0e010     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0e014     08 4E 85 51 |  if_ne	sub	fp, #8
0e018                 | LR__1070
0e018     A7 12 02 F6 | 	mov	arg01, fp
0e01c     5C B9 BF FD | 	call	#_push
0e020     A7 F0 03 F6 | 	mov	ptra, fp
0e024     B2 00 A0 FD | 	call	#popregs_
0e028                 | _do_minus_ret
0e028     2D 00 64 FD | 	ret
0e02c                 | 
0e02c                 | ' 
0e02c                 | ' sub do_and 
0e02c                 | _do_and
0e02c     03 4A 05 F6 | 	mov	COUNT_, #3
0e030     A8 00 A0 FD | 	call	#pushregs_
0e034     18 F0 07 F1 | 	add	ptra, #24
0e038     A8 B8 BF FD | 	call	#_pop
0e03c     FD 12 02 F6 | 	mov	arg01, result1
0e040     FE 1E 02 F6 | 	mov	local01, result2
0e044     FF 20 02 F6 | 	mov	local02, result3
0e048     0C 4E 05 F1 | 	add	fp, #12
0e04c     A7 12 62 FC | 	wrlong	arg01, fp
0e050     04 4E 05 F1 | 	add	fp, #4
0e054     A7 1E 62 FC | 	wrlong	local01, fp
0e058     04 4E 05 F1 | 	add	fp, #4
0e05c     A7 20 62 FC | 	wrlong	local02, fp
0e060     14 4E 85 F1 | 	sub	fp, #20
0e064     7C B8 BF FD | 	call	#_pop
0e068     FF 22 02 F6 | 	mov	local03, result3
0e06c     A7 FA 61 FC | 	wrlong	result1, fp
0e070     04 4E 05 F1 | 	add	fp, #4
0e074     A7 FC 61 FC | 	wrlong	result2, fp
0e078     04 4E 05 F1 | 	add	fp, #4
0e07c     A7 22 62 FC | 	wrlong	local03, fp
0e080                 | ' 
0e080                 | ' t2=pop()
0e080                 | ' t1=pop()
0e080                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0e080     08 4E 85 F1 | 	sub	fp, #8
0e084     1C 22 0E F2 | 	cmp	local03, #28 wz
0e088     A7 22 02 AB |  if_e	rdlong	local03, fp
0e08c     A7 22 62 AC |  if_e	wrlong	local03, fp
0e090     08 4E 05 A1 |  if_e	add	fp, #8
0e094     A7 3A 68 AC |  if_e	wrlong	#29, fp
0e098     08 4E 85 A1 |  if_e	sub	fp, #8
0e09c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0e09c     14 4E 05 F1 | 	add	fp, #20
0e0a0     A7 22 02 FB | 	rdlong	local03, fp
0e0a4     14 4E 85 F1 | 	sub	fp, #20
0e0a8     1C 22 0E F2 | 	cmp	local03, #28 wz
0e0ac     18 00 90 5D |  if_ne	jmp	#LR__1080
0e0b0     0C 4E 05 F1 | 	add	fp, #12
0e0b4     A7 22 02 FB | 	rdlong	local03, fp
0e0b8     A7 22 62 FC | 	wrlong	local03, fp
0e0bc     08 4E 05 F1 | 	add	fp, #8
0e0c0     A7 3A 68 FC | 	wrlong	#29, fp
0e0c4     14 4E 85 F1 | 	sub	fp, #20
0e0c8                 | LR__1080
0e0c8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
0e0c8     08 4E 05 F1 | 	add	fp, #8
0e0cc     A7 22 02 FB | 	rdlong	local03, fp
0e0d0     08 4E 85 F1 | 	sub	fp, #8
0e0d4     1F 22 0E F2 | 	cmp	local03, #31 wz
0e0d8     14 4E 05 51 |  if_ne	add	fp, #20
0e0dc     A7 20 02 5B |  if_ne	rdlong	local02, fp
0e0e0     14 4E 85 51 |  if_ne	sub	fp, #20
0e0e4     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0e0e8     08 4E 05 51 |  if_ne	add	fp, #8
0e0ec     A7 22 02 5B |  if_ne	rdlong	local03, fp
0e0f0     08 4E 85 51 |  if_ne	sub	fp, #8
0e0f4     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0e0f8     14 4E 05 51 |  if_ne	add	fp, #20
0e0fc     14 4E 85 51 |  if_ne	sub	fp, #20
0e100     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0e104     A7 0C 68 AC |  if_e	wrlong	#6, fp
0e108     08 4E 05 A1 |  if_e	add	fp, #8
0e10c     A7 FE 69 AC |  if_e	wrlong	#255, fp
0e110     08 4E 85 A1 |  if_e	sub	fp, #8
0e114     18 00 90 AD |  if_e	jmp	#LR__1081
0e118     A7 22 02 FB | 	rdlong	local03, fp
0e11c     0C 4E 05 F1 | 	add	fp, #12
0e120     A7 1E 02 FB | 	rdlong	local01, fp
0e124     0C 4E 85 F1 | 	sub	fp, #12
0e128     0F 23 02 F5 | 	and	local03, local01
0e12c     A7 22 62 FC | 	wrlong	local03, fp
0e130                 | LR__1081
0e130     A7 12 02 F6 | 	mov	arg01, fp
0e134     44 B8 BF FD | 	call	#_push
0e138     A7 F0 03 F6 | 	mov	ptra, fp
0e13c     B2 00 A0 FD | 	call	#popregs_
0e140                 | _do_and_ret
0e140     2D 00 64 FD | 	ret
0e144                 | 
0e144                 | ' 
0e144                 | ' sub do_or 
0e144                 | _do_or
0e144     03 4A 05 F6 | 	mov	COUNT_, #3
0e148     A8 00 A0 FD | 	call	#pushregs_
0e14c     18 F0 07 F1 | 	add	ptra, #24
0e150     90 B7 BF FD | 	call	#_pop
0e154     FD 12 02 F6 | 	mov	arg01, result1
0e158     FE 1E 02 F6 | 	mov	local01, result2
0e15c     FF 20 02 F6 | 	mov	local02, result3
0e160     0C 4E 05 F1 | 	add	fp, #12
0e164     A7 12 62 FC | 	wrlong	arg01, fp
0e168     04 4E 05 F1 | 	add	fp, #4
0e16c     A7 1E 62 FC | 	wrlong	local01, fp
0e170     04 4E 05 F1 | 	add	fp, #4
0e174     A7 20 62 FC | 	wrlong	local02, fp
0e178     14 4E 85 F1 | 	sub	fp, #20
0e17c     64 B7 BF FD | 	call	#_pop
0e180     FF 22 02 F6 | 	mov	local03, result3
0e184     A7 FA 61 FC | 	wrlong	result1, fp
0e188     04 4E 05 F1 | 	add	fp, #4
0e18c     A7 FC 61 FC | 	wrlong	result2, fp
0e190     04 4E 05 F1 | 	add	fp, #4
0e194     A7 22 62 FC | 	wrlong	local03, fp
0e198                 | ' 
0e198                 | ' t2=pop()
0e198                 | ' t1=pop()
0e198                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0e198     08 4E 85 F1 | 	sub	fp, #8
0e19c     1C 22 0E F2 | 	cmp	local03, #28 wz
0e1a0     A7 22 02 AB |  if_e	rdlong	local03, fp
0e1a4     A7 22 62 AC |  if_e	wrlong	local03, fp
0e1a8     08 4E 05 A1 |  if_e	add	fp, #8
0e1ac     A7 3A 68 AC |  if_e	wrlong	#29, fp
0e1b0     08 4E 85 A1 |  if_e	sub	fp, #8
0e1b4                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0e1b4     14 4E 05 F1 | 	add	fp, #20
0e1b8     A7 22 02 FB | 	rdlong	local03, fp
0e1bc     14 4E 85 F1 | 	sub	fp, #20
0e1c0     1C 22 0E F2 | 	cmp	local03, #28 wz
0e1c4     18 00 90 5D |  if_ne	jmp	#LR__1090
0e1c8     0C 4E 05 F1 | 	add	fp, #12
0e1cc     A7 22 02 FB | 	rdlong	local03, fp
0e1d0     A7 22 62 FC | 	wrlong	local03, fp
0e1d4     08 4E 05 F1 | 	add	fp, #8
0e1d8     A7 3A 68 FC | 	wrlong	#29, fp
0e1dc     14 4E 85 F1 | 	sub	fp, #20
0e1e0                 | LR__1090
0e1e0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
0e1e0     08 4E 05 F1 | 	add	fp, #8
0e1e4     A7 22 02 FB | 	rdlong	local03, fp
0e1e8     08 4E 85 F1 | 	sub	fp, #8
0e1ec     1F 22 0E F2 | 	cmp	local03, #31 wz
0e1f0     14 4E 05 51 |  if_ne	add	fp, #20
0e1f4     A7 20 02 5B |  if_ne	rdlong	local02, fp
0e1f8     14 4E 85 51 |  if_ne	sub	fp, #20
0e1fc     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0e200     08 4E 05 51 |  if_ne	add	fp, #8
0e204     A7 22 02 5B |  if_ne	rdlong	local03, fp
0e208     08 4E 85 51 |  if_ne	sub	fp, #8
0e20c     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0e210     14 4E 05 51 |  if_ne	add	fp, #20
0e214     14 4E 85 51 |  if_ne	sub	fp, #20
0e218     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0e21c     A7 0C 68 AC |  if_e	wrlong	#6, fp
0e220     08 4E 05 A1 |  if_e	add	fp, #8
0e224     A7 FE 69 AC |  if_e	wrlong	#255, fp
0e228     08 4E 85 A1 |  if_e	sub	fp, #8
0e22c     18 00 90 AD |  if_e	jmp	#LR__1091
0e230     A7 22 02 FB | 	rdlong	local03, fp
0e234     0C 4E 05 F1 | 	add	fp, #12
0e238     A7 1E 02 FB | 	rdlong	local01, fp
0e23c     0C 4E 85 F1 | 	sub	fp, #12
0e240     0F 23 42 F5 | 	or	local03, local01
0e244     A7 22 62 FC | 	wrlong	local03, fp
0e248                 | LR__1091
0e248     A7 12 02 F6 | 	mov	arg01, fp
0e24c     2C B7 BF FD | 	call	#_push
0e250     A7 F0 03 F6 | 	mov	ptra, fp
0e254     B2 00 A0 FD | 	call	#popregs_
0e258                 | _do_or_ret
0e258     2D 00 64 FD | 	ret
0e25c                 | 
0e25c                 | ' 
0e25c                 | ' sub do_mul
0e25c                 | _do_mul
0e25c     05 4A 05 F6 | 	mov	COUNT_, #5
0e260     A8 00 A0 FD | 	call	#pushregs_
0e264     18 F0 07 F1 | 	add	ptra, #24
0e268     78 B6 BF FD | 	call	#_pop
0e26c     FD 1E 02 F6 | 	mov	local01, result1
0e270     FE 20 02 F6 | 	mov	local02, result2
0e274     FF 22 02 F6 | 	mov	local03, result3
0e278     0C 4E 05 F1 | 	add	fp, #12
0e27c     A7 1E 62 FC | 	wrlong	local01, fp
0e280     04 4E 05 F1 | 	add	fp, #4
0e284     A7 20 62 FC | 	wrlong	local02, fp
0e288     04 4E 05 F1 | 	add	fp, #4
0e28c     A7 22 62 FC | 	wrlong	local03, fp
0e290     14 4E 85 F1 | 	sub	fp, #20
0e294     4C B6 BF FD | 	call	#_pop
0e298     FF 22 02 F6 | 	mov	local03, result3
0e29c     A7 FA 61 FC | 	wrlong	result1, fp
0e2a0     04 4E 05 F1 | 	add	fp, #4
0e2a4     A7 FC 61 FC | 	wrlong	result2, fp
0e2a8     04 4E 05 F1 | 	add	fp, #4
0e2ac     A7 22 62 FC | 	wrlong	local03, fp
0e2b0                 | ' 
0e2b0                 | ' t2=pop()
0e2b0                 | ' t1=pop()
0e2b0                 | ' 
0e2b0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
0e2b0     08 4E 85 F1 | 	sub	fp, #8
0e2b4     1D 22 0E F2 | 	cmp	local03, #29 wz
0e2b8     14 4E 05 A1 |  if_e	add	fp, #20
0e2bc     A7 24 02 AB |  if_e	rdlong	local04, fp
0e2c0     14 4E 85 A1 |  if_e	sub	fp, #20
0e2c4     12 23 02 A6 |  if_e	mov	local03, local04
0e2c8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e2cc     20 00 90 5D |  if_ne	jmp	#LR__1100
0e2d0     A7 20 02 FB | 	rdlong	local02, fp
0e2d4     0C 4E 05 F1 | 	add	fp, #12
0e2d8     A7 22 02 FB | 	rdlong	local03, fp
0e2dc     11 21 02 FD | 	qmul	local02, local03
0e2e0     0C 4E 85 F1 | 	sub	fp, #12
0e2e4     18 1E 62 FD | 	getqx	local01
0e2e8     A7 1E 62 FC | 	wrlong	local01, fp
0e2ec     C4 02 90 FD | 	jmp	#LR__1109
0e2f0                 | LR__1100
0e2f0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
0e2f0     08 4E 05 F1 | 	add	fp, #8
0e2f4     A7 1E 02 FB | 	rdlong	local01, fp
0e2f8     08 4E 85 F1 | 	sub	fp, #8
0e2fc     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e300     14 4E 05 A1 |  if_e	add	fp, #20
0e304     A7 24 02 AB |  if_e	rdlong	local04, fp
0e308     14 4E 85 A1 |  if_e	sub	fp, #20
0e30c     12 23 02 A6 |  if_e	mov	local03, local04
0e310     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0e314     2C 00 90 5D |  if_ne	jmp	#LR__1101
0e318     A7 20 02 FB | 	rdlong	local02, fp
0e31c     0C 4E 05 F1 | 	add	fp, #12
0e320     A7 22 02 FB | 	rdlong	local03, fp
0e324     11 21 02 FD | 	qmul	local02, local03
0e328     0C 4E 85 F1 | 	sub	fp, #12
0e32c     18 1E 62 FD | 	getqx	local01
0e330     A7 1E 62 FC | 	wrlong	local01, fp
0e334     08 4E 05 F1 | 	add	fp, #8
0e338     A7 38 68 FC | 	wrlong	#28, fp
0e33c     08 4E 85 F1 | 	sub	fp, #8
0e340     70 02 90 FD | 	jmp	#LR__1109
0e344                 | LR__1101
0e344                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
0e344     08 4E 05 F1 | 	add	fp, #8
0e348     A7 1E 02 FB | 	rdlong	local01, fp
0e34c     08 4E 85 F1 | 	sub	fp, #8
0e350     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e354     14 4E 05 A1 |  if_e	add	fp, #20
0e358     A7 24 02 AB |  if_e	rdlong	local04, fp
0e35c     14 4E 85 A1 |  if_e	sub	fp, #20
0e360     12 23 02 A6 |  if_e	mov	local03, local04
0e364     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e368     30 00 90 5D |  if_ne	jmp	#LR__1102
0e36c     A7 12 02 FB | 	rdlong	arg01, fp
0e370     EC D0 B0 FD | 	call	#__system___float_fromuns
0e374     FD 12 02 F6 | 	mov	arg01, result1
0e378     0C 4E 05 F1 | 	add	fp, #12
0e37c     A7 14 02 FB | 	rdlong	arg02, fp
0e380     0C 4E 85 F1 | 	sub	fp, #12
0e384     DC D4 B0 FD | 	call	#__system___float_mul
0e388     A7 FA 61 FC | 	wrlong	result1, fp
0e38c     08 4E 05 F1 | 	add	fp, #8
0e390     A7 3C 68 FC | 	wrlong	#30, fp
0e394     08 4E 85 F1 | 	sub	fp, #8
0e398     18 02 90 FD | 	jmp	#LR__1109
0e39c                 | LR__1102
0e39c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
0e39c     08 4E 05 F1 | 	add	fp, #8
0e3a0     A7 1E 02 FB | 	rdlong	local01, fp
0e3a4     08 4E 85 F1 | 	sub	fp, #8
0e3a8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e3ac     14 4E 05 A1 |  if_e	add	fp, #20
0e3b0     A7 24 02 AB |  if_e	rdlong	local04, fp
0e3b4     14 4E 85 A1 |  if_e	sub	fp, #20
0e3b8     12 23 02 A6 |  if_e	mov	local03, local04
0e3bc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e3c0     20 00 90 5D |  if_ne	jmp	#LR__1103
0e3c4     A7 20 02 FB | 	rdlong	local02, fp
0e3c8     0C 4E 05 F1 | 	add	fp, #12
0e3cc     A7 22 02 FB | 	rdlong	local03, fp
0e3d0     11 21 02 FD | 	qmul	local02, local03
0e3d4     0C 4E 85 F1 | 	sub	fp, #12
0e3d8     18 1E 62 FD | 	getqx	local01
0e3dc     A7 1E 62 FC | 	wrlong	local01, fp
0e3e0     D0 01 90 FD | 	jmp	#LR__1109
0e3e4                 | LR__1103
0e3e4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
0e3e4     08 4E 05 F1 | 	add	fp, #8
0e3e8     A7 1E 02 FB | 	rdlong	local01, fp
0e3ec     08 4E 85 F1 | 	sub	fp, #8
0e3f0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e3f4     14 4E 05 A1 |  if_e	add	fp, #20
0e3f8     A7 24 02 AB |  if_e	rdlong	local04, fp
0e3fc     14 4E 85 A1 |  if_e	sub	fp, #20
0e400     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0e404     20 00 90 5D |  if_ne	jmp	#LR__1104
0e408     A7 20 02 FB | 	rdlong	local02, fp
0e40c     0C 4E 05 F1 | 	add	fp, #12
0e410     A7 22 02 FB | 	rdlong	local03, fp
0e414     11 21 02 FD | 	qmul	local02, local03
0e418     0C 4E 85 F1 | 	sub	fp, #12
0e41c     18 1E 62 FD | 	getqx	local01
0e420     A7 1E 62 FC | 	wrlong	local01, fp
0e424     8C 01 90 FD | 	jmp	#LR__1109
0e428                 | LR__1104
0e428                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
0e428     08 4E 05 F1 | 	add	fp, #8
0e42c     A7 1E 02 FB | 	rdlong	local01, fp
0e430     08 4E 85 F1 | 	sub	fp, #8
0e434     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e438     14 4E 05 A1 |  if_e	add	fp, #20
0e43c     A7 22 02 AB |  if_e	rdlong	local03, fp
0e440     14 4E 85 A1 |  if_e	sub	fp, #20
0e444     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e448     40 00 90 5D |  if_ne	jmp	#LR__1105
0e44c     A7 12 02 FB | 	rdlong	arg01, fp
0e450     09 13 52 F6 | 	abs	arg01, arg01 wc
0e454     1F 26 C6 C9 |  if_b	decod	local05, #31
0e458     00 26 06 36 |  if_ae	mov	local05, #0
0e45c     00 D0 B0 FD | 	call	#__system___float_fromuns
0e460     13 FB 61 F5 | 	xor	result1, local05
0e464     FD 12 02 F6 | 	mov	arg01, result1
0e468     0C 4E 05 F1 | 	add	fp, #12
0e46c     A7 14 02 FB | 	rdlong	arg02, fp
0e470     0C 4E 85 F1 | 	sub	fp, #12
0e474     EC D3 B0 FD | 	call	#__system___float_mul
0e478     A7 FA 61 FC | 	wrlong	result1, fp
0e47c     08 4E 05 F1 | 	add	fp, #8
0e480     A7 3C 68 FC | 	wrlong	#30, fp
0e484     08 4E 85 F1 | 	sub	fp, #8
0e488     28 01 90 FD | 	jmp	#LR__1109
0e48c                 | LR__1105
0e48c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
0e48c     08 4E 05 F1 | 	add	fp, #8
0e490     A7 1E 02 FB | 	rdlong	local01, fp
0e494     08 4E 85 F1 | 	sub	fp, #8
0e498     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e49c     14 4E 05 A1 |  if_e	add	fp, #20
0e4a0     A7 22 02 AB |  if_e	rdlong	local03, fp
0e4a4     14 4E 85 A1 |  if_e	sub	fp, #20
0e4a8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e4ac     28 00 90 5D |  if_ne	jmp	#LR__1106
0e4b0     A7 1E 02 FB | 	rdlong	local01, fp
0e4b4     0C 4E 05 F1 | 	add	fp, #12
0e4b8     A7 12 02 FB | 	rdlong	arg01, fp
0e4bc     0C 4E 85 F1 | 	sub	fp, #12
0e4c0     9C CF B0 FD | 	call	#__system___float_fromuns
0e4c4     FD 14 02 F6 | 	mov	arg02, result1
0e4c8     0F 13 02 F6 | 	mov	arg01, local01
0e4cc     94 D3 B0 FD | 	call	#__system___float_mul
0e4d0     A7 FA 61 FC | 	wrlong	result1, fp
0e4d4     DC 00 90 FD | 	jmp	#LR__1109
0e4d8                 | LR__1106
0e4d8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
0e4d8     08 4E 05 F1 | 	add	fp, #8
0e4dc     A7 1E 02 FB | 	rdlong	local01, fp
0e4e0     08 4E 85 F1 | 	sub	fp, #8
0e4e4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e4e8     14 4E 05 A1 |  if_e	add	fp, #20
0e4ec     A7 22 02 AB |  if_e	rdlong	local03, fp
0e4f0     14 4E 85 A1 |  if_e	sub	fp, #20
0e4f4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0e4f8     38 00 90 5D |  if_ne	jmp	#LR__1107
0e4fc     A7 1E 02 FB | 	rdlong	local01, fp
0e500     0C 4E 05 F1 | 	add	fp, #12
0e504     A7 12 02 FB | 	rdlong	arg01, fp
0e508     0C 4E 85 F1 | 	sub	fp, #12
0e50c     09 13 52 F6 | 	abs	arg01, arg01 wc
0e510     1F 26 C6 C9 |  if_b	decod	local05, #31
0e514     00 26 06 36 |  if_ae	mov	local05, #0
0e518     44 CF B0 FD | 	call	#__system___float_fromuns
0e51c     13 FB 61 F5 | 	xor	result1, local05
0e520     FD 14 02 F6 | 	mov	arg02, result1
0e524     0F 13 02 F6 | 	mov	arg01, local01
0e528     38 D3 B0 FD | 	call	#__system___float_mul
0e52c     A7 FA 61 FC | 	wrlong	result1, fp
0e530     80 00 90 FD | 	jmp	#LR__1109
0e534                 | LR__1107
0e534                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
0e534     08 4E 05 F1 | 	add	fp, #8
0e538     A7 1E 02 FB | 	rdlong	local01, fp
0e53c     08 4E 85 F1 | 	sub	fp, #8
0e540     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e544     14 4E 05 A1 |  if_e	add	fp, #20
0e548     A7 22 02 AB |  if_e	rdlong	local03, fp
0e54c     14 4E 85 A1 |  if_e	sub	fp, #20
0e550     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e554     1C 00 90 5D |  if_ne	jmp	#LR__1108
0e558     A7 12 02 FB | 	rdlong	arg01, fp
0e55c     0C 4E 05 F1 | 	add	fp, #12
0e560     A7 14 02 FB | 	rdlong	arg02, fp
0e564     0C 4E 85 F1 | 	sub	fp, #12
0e568     F8 D2 B0 FD | 	call	#__system___float_mul
0e56c     A7 FA 61 FC | 	wrlong	result1, fp
0e570     40 00 90 FD | 	jmp	#LR__1109
0e574                 | LR__1108
0e574                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
0e574     08 4E 05 F1 | 	add	fp, #8
0e578     A7 1E 02 FB | 	rdlong	local01, fp
0e57c     08 4E 85 F1 | 	sub	fp, #8
0e580     1F 1E 0E F2 | 	cmp	local01, #31 wz
0e584     14 4E 05 51 |  if_ne	add	fp, #20
0e588     A7 22 02 5B |  if_ne	rdlong	local03, fp
0e58c     14 4E 85 51 |  if_ne	sub	fp, #20
0e590     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
0e594     A7 10 68 AC |  if_e	wrlong	#8, fp
0e598     08 4E 05 A1 |  if_e	add	fp, #8
0e59c     A7 FE 69 AC |  if_e	wrlong	#255, fp
0e5a0     08 4E 85 A1 |  if_e	sub	fp, #8
0e5a4     A7 12 68 5C |  if_ne	wrlong	#9, fp
0e5a8     08 4E 05 51 |  if_ne	add	fp, #8
0e5ac     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0e5b0     08 4E 85 51 |  if_ne	sub	fp, #8
0e5b4                 | LR__1109
0e5b4     A7 12 02 F6 | 	mov	arg01, fp
0e5b8     C0 B3 BF FD | 	call	#_push
0e5bc     A7 F0 03 F6 | 	mov	ptra, fp
0e5c0     B2 00 A0 FD | 	call	#popregs_
0e5c4                 | _do_mul_ret
0e5c4     2D 00 64 FD | 	ret
0e5c8                 | 
0e5c8                 | ' 
0e5c8                 | ' sub do_div 
0e5c8                 | _do_div
0e5c8     01 4A 05 F6 | 	mov	COUNT_, #1
0e5cc     A8 00 A0 FD | 	call	#pushregs_
0e5d0     18 F0 07 F1 | 	add	ptra, #24
0e5d4     0C B3 BF FD | 	call	#_pop
0e5d8     FD 64 02 F6 | 	mov	muldivb_, result1
0e5dc     FE 62 02 F6 | 	mov	muldiva_, result2
0e5e0     FF 1E 02 F6 | 	mov	local01, result3
0e5e4     0C 4E 05 F1 | 	add	fp, #12
0e5e8     A7 64 62 FC | 	wrlong	muldivb_, fp
0e5ec     04 4E 05 F1 | 	add	fp, #4
0e5f0     A7 62 62 FC | 	wrlong	muldiva_, fp
0e5f4     04 4E 05 F1 | 	add	fp, #4
0e5f8     A7 1E 62 FC | 	wrlong	local01, fp
0e5fc     14 4E 85 F1 | 	sub	fp, #20
0e600     E0 B2 BF FD | 	call	#_pop
0e604     A7 FA 61 FC | 	wrlong	result1, fp
0e608     04 4E 05 F1 | 	add	fp, #4
0e60c     A7 FC 61 FC | 	wrlong	result2, fp
0e610     04 4E 05 F1 | 	add	fp, #4
0e614     A7 FE 61 FC | 	wrlong	result3, fp
0e618                 | ' 
0e618                 | ' t2=pop()
0e618                 | ' t1=pop()
0e618                 | ' 
0e618                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
0e618     08 4E 85 F1 | 	sub	fp, #8
0e61c     1F FE 0D F2 | 	cmp	result3, #31 wz
0e620     14 4E 05 51 |  if_ne	add	fp, #20
0e624     A7 12 02 5B |  if_ne	rdlong	arg01, fp
0e628     14 4E 85 51 |  if_ne	sub	fp, #20
0e62c     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
0e630     A7 14 68 AC |  if_e	wrlong	#10, fp
0e634     08 4E 05 A1 |  if_e	add	fp, #8
0e638     A7 FE 69 AC |  if_e	wrlong	#255, fp
0e63c     08 4E 85 A1 |  if_e	sub	fp, #8
0e640     90 01 90 AD |  if_e	jmp	#LR__1116
0e644                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
0e644     08 4E 05 F1 | 	add	fp, #8
0e648     A7 64 02 FB | 	rdlong	muldivb_, fp
0e64c     08 4E 85 F1 | 	sub	fp, #8
0e650     1E 64 0E F2 | 	cmp	muldivb_, #30 wz
0e654     1C 00 90 5D |  if_ne	jmp	#LR__1110
0e658     08 4E 05 F1 | 	add	fp, #8
0e65c     A7 38 68 FC | 	wrlong	#28, fp
0e660     08 4E 85 F1 | 	sub	fp, #8
0e664     A7 12 02 FB | 	rdlong	arg01, fp
0e668     00 14 06 F6 | 	mov	arg02, #0
0e66c     BC D6 B0 FD | 	call	#__system___float_tointeger
0e670     A7 FA 61 FC | 	wrlong	result1, fp
0e674                 | LR__1110
0e674                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
0e674     14 4E 05 F1 | 	add	fp, #20
0e678     A7 64 02 FB | 	rdlong	muldivb_, fp
0e67c     14 4E 85 F1 | 	sub	fp, #20
0e680     1E 64 0E F2 | 	cmp	muldivb_, #30 wz
0e684     28 00 90 5D |  if_ne	jmp	#LR__1111
0e688     14 4E 05 F1 | 	add	fp, #20
0e68c     A7 38 68 FC | 	wrlong	#28, fp
0e690     08 4E 85 F1 | 	sub	fp, #8
0e694     A7 12 02 FB | 	rdlong	arg01, fp
0e698     0C 4E 85 F1 | 	sub	fp, #12
0e69c     00 14 06 F6 | 	mov	arg02, #0
0e6a0     88 D6 B0 FD | 	call	#__system___float_tointeger
0e6a4     0C 4E 05 F1 | 	add	fp, #12
0e6a8     A7 FA 61 FC | 	wrlong	result1, fp
0e6ac     0C 4E 85 F1 | 	sub	fp, #12
0e6b0                 | LR__1111
0e6b0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
0e6b0     08 4E 05 F1 | 	add	fp, #8
0e6b4     A7 64 02 FB | 	rdlong	muldivb_, fp
0e6b8     08 4E 85 F1 | 	sub	fp, #8
0e6bc     1D 64 0E F2 | 	cmp	muldivb_, #29 wz
0e6c0     14 4E 05 A1 |  if_e	add	fp, #20
0e6c4     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e6c8     14 4E 85 A1 |  if_e	sub	fp, #20
0e6cc     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0e6d0     20 00 90 5D |  if_ne	jmp	#LR__1112
0e6d4     0C 4E 05 F1 | 	add	fp, #12
0e6d8     A7 1E 02 FB | 	rdlong	local01, fp
0e6dc     0C 4E 85 F1 | 	sub	fp, #12
0e6e0     A7 64 02 FB | 	rdlong	muldivb_, fp
0e6e4     0F 65 12 FD | 	qdiv	muldivb_, local01
0e6e8     18 1E 62 FD | 	getqx	local01
0e6ec     A7 1E 62 FC | 	wrlong	local01, fp
0e6f0     E0 00 90 FD | 	jmp	#LR__1116
0e6f4                 | LR__1112
0e6f4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
0e6f4     08 4E 05 F1 | 	add	fp, #8
0e6f8     A7 64 02 FB | 	rdlong	muldivb_, fp
0e6fc     08 4E 85 F1 | 	sub	fp, #8
0e700     1D 64 0E F2 | 	cmp	muldivb_, #29 wz
0e704     14 4E 05 A1 |  if_e	add	fp, #20
0e708     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e70c     14 4E 85 A1 |  if_e	sub	fp, #20
0e710     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0e714     2C 00 90 5D |  if_ne	jmp	#LR__1113
0e718     0C 4E 05 F1 | 	add	fp, #12
0e71c     A7 1E 02 FB | 	rdlong	local01, fp
0e720     0C 4E 85 F1 | 	sub	fp, #12
0e724     A7 64 02 FB | 	rdlong	muldivb_, fp
0e728     0F 65 12 FD | 	qdiv	muldivb_, local01
0e72c     18 1E 62 FD | 	getqx	local01
0e730     A7 1E 62 FC | 	wrlong	local01, fp
0e734     08 4E 05 F1 | 	add	fp, #8
0e738     A7 38 68 FC | 	wrlong	#28, fp
0e73c     08 4E 85 F1 | 	sub	fp, #8
0e740     90 00 90 FD | 	jmp	#LR__1116
0e744                 | LR__1113
0e744                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
0e744     08 4E 05 F1 | 	add	fp, #8
0e748     A7 64 02 FB | 	rdlong	muldivb_, fp
0e74c     08 4E 85 F1 | 	sub	fp, #8
0e750     1C 64 0E F2 | 	cmp	muldivb_, #28 wz
0e754     14 4E 05 A1 |  if_e	add	fp, #20
0e758     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e75c     14 4E 85 A1 |  if_e	sub	fp, #20
0e760     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0e764     1C 00 90 5D |  if_ne	jmp	#LR__1114
0e768     A7 62 02 FB | 	rdlong	muldiva_, fp
0e76c     0C 4E 05 F1 | 	add	fp, #12
0e770     A7 64 02 FB | 	rdlong	muldivb_, fp
0e774     0C 4E 85 F1 | 	sub	fp, #12
0e778     BA 00 A0 FD | 	call	#divide_
0e77c     A7 64 62 FC | 	wrlong	muldivb_, fp
0e780     50 00 90 FD | 	jmp	#LR__1116
0e784                 | LR__1114
0e784                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
0e784     08 4E 05 F1 | 	add	fp, #8
0e788     A7 64 02 FB | 	rdlong	muldivb_, fp
0e78c     08 4E 85 F1 | 	sub	fp, #8
0e790     1C 64 0E F2 | 	cmp	muldivb_, #28 wz
0e794     14 4E 05 A1 |  if_e	add	fp, #20
0e798     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e79c     14 4E 85 A1 |  if_e	sub	fp, #20
0e7a0     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0e7a4     1C 00 90 5D |  if_ne	jmp	#LR__1115
0e7a8     A7 62 02 FB | 	rdlong	muldiva_, fp
0e7ac     0C 4E 05 F1 | 	add	fp, #12
0e7b0     A7 64 02 FB | 	rdlong	muldivb_, fp
0e7b4     0C 4E 85 F1 | 	sub	fp, #12
0e7b8     BA 00 A0 FD | 	call	#divide_
0e7bc     A7 64 62 FC | 	wrlong	muldivb_, fp
0e7c0     10 00 90 FD | 	jmp	#LR__1116
0e7c4                 | LR__1115
0e7c4     A7 16 68 FC | 	wrlong	#11, fp
0e7c8     08 4E 05 F1 | 	add	fp, #8
0e7cc     A7 FE 69 FC | 	wrlong	#255, fp
0e7d0     08 4E 85 F1 | 	sub	fp, #8
0e7d4                 | LR__1116
0e7d4     A7 12 02 F6 | 	mov	arg01, fp
0e7d8     A0 B1 BF FD | 	call	#_push
0e7dc     A7 F0 03 F6 | 	mov	ptra, fp
0e7e0     B2 00 A0 FD | 	call	#popregs_
0e7e4                 | _do_div_ret
0e7e4     2D 00 64 FD | 	ret
0e7e8                 | 
0e7e8                 | ' 
0e7e8                 | ' sub do_fdiv 
0e7e8                 | _do_fdiv
0e7e8     02 4A 05 F6 | 	mov	COUNT_, #2
0e7ec     A8 00 A0 FD | 	call	#pushregs_
0e7f0     18 F0 07 F1 | 	add	ptra, #24
0e7f4     EC B0 BF FD | 	call	#_pop
0e7f8     FD 14 02 F6 | 	mov	arg02, result1
0e7fc     FE 12 02 F6 | 	mov	arg01, result2
0e800     FF 1E 02 F6 | 	mov	local01, result3
0e804     0C 4E 05 F1 | 	add	fp, #12
0e808     A7 14 62 FC | 	wrlong	arg02, fp
0e80c     04 4E 05 F1 | 	add	fp, #4
0e810     A7 12 62 FC | 	wrlong	arg01, fp
0e814     04 4E 05 F1 | 	add	fp, #4
0e818     A7 1E 62 FC | 	wrlong	local01, fp
0e81c     14 4E 85 F1 | 	sub	fp, #20
0e820     C0 B0 BF FD | 	call	#_pop
0e824     A7 FA 61 FC | 	wrlong	result1, fp
0e828     04 4E 05 F1 | 	add	fp, #4
0e82c     A7 FC 61 FC | 	wrlong	result2, fp
0e830     04 4E 05 F1 | 	add	fp, #4
0e834     A7 FE 61 FC | 	wrlong	result3, fp
0e838                 | ' 
0e838                 | ' t2=pop()
0e838                 | ' t1=pop()
0e838                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
0e838     08 4E 85 F1 | 	sub	fp, #8
0e83c     1F FE 0D F2 | 	cmp	result3, #31 wz
0e840     14 4E 05 51 |  if_ne	add	fp, #20
0e844     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e848     14 4E 85 51 |  if_ne	sub	fp, #20
0e84c     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
0e850     A7 14 68 AC |  if_e	wrlong	#10, fp
0e854     08 4E 05 A1 |  if_e	add	fp, #8
0e858     A7 FE 69 AC |  if_e	wrlong	#255, fp
0e85c     08 4E 85 A1 |  if_e	sub	fp, #8
0e860     38 01 90 AD |  if_e	jmp	#LR__1125
0e864                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
0e864     08 4E 05 F1 | 	add	fp, #8
0e868     A7 14 02 FB | 	rdlong	arg02, fp
0e86c     08 4E 85 F1 | 	sub	fp, #8
0e870     1C 14 0E F2 | 	cmp	arg02, #28 wz
0e874     28 00 90 5D |  if_ne	jmp	#LR__1120
0e878     08 4E 05 F1 | 	add	fp, #8
0e87c     A7 3C 68 FC | 	wrlong	#30, fp
0e880     08 4E 85 F1 | 	sub	fp, #8
0e884     A7 12 02 FB | 	rdlong	arg01, fp
0e888     09 13 52 F6 | 	abs	arg01, arg01 wc
0e88c     1F 20 C6 C9 |  if_b	decod	local02, #31
0e890     00 20 06 36 |  if_ae	mov	local02, #0
0e894     C8 CB B0 FD | 	call	#__system___float_fromuns
0e898     10 FB 61 F5 | 	xor	result1, local02
0e89c     A7 FA 61 FC | 	wrlong	result1, fp
0e8a0                 | LR__1120
0e8a0                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
0e8a0     08 4E 05 F1 | 	add	fp, #8
0e8a4     A7 14 02 FB | 	rdlong	arg02, fp
0e8a8     08 4E 85 F1 | 	sub	fp, #8
0e8ac     1D 14 0E F2 | 	cmp	arg02, #29 wz
0e8b0     18 00 90 5D |  if_ne	jmp	#LR__1121
0e8b4     08 4E 05 F1 | 	add	fp, #8
0e8b8     A7 3C 68 FC | 	wrlong	#30, fp
0e8bc     08 4E 85 F1 | 	sub	fp, #8
0e8c0     A7 12 02 FB | 	rdlong	arg01, fp
0e8c4     98 CB B0 FD | 	call	#__system___float_fromuns
0e8c8     A7 FA 61 FC | 	wrlong	result1, fp
0e8cc                 | LR__1121
0e8cc                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
0e8cc     14 4E 05 F1 | 	add	fp, #20
0e8d0     A7 14 02 FB | 	rdlong	arg02, fp
0e8d4     14 4E 85 F1 | 	sub	fp, #20
0e8d8     1C 14 0E F2 | 	cmp	arg02, #28 wz
0e8dc     34 00 90 5D |  if_ne	jmp	#LR__1122
0e8e0     14 4E 05 F1 | 	add	fp, #20
0e8e4     A7 3C 68 FC | 	wrlong	#30, fp
0e8e8     08 4E 85 F1 | 	sub	fp, #8
0e8ec     A7 12 02 FB | 	rdlong	arg01, fp
0e8f0     0C 4E 85 F1 | 	sub	fp, #12
0e8f4     09 13 52 F6 | 	abs	arg01, arg01 wc
0e8f8     1F 20 C6 C9 |  if_b	decod	local02, #31
0e8fc     00 20 06 36 |  if_ae	mov	local02, #0
0e900     5C CB B0 FD | 	call	#__system___float_fromuns
0e904     10 FB 61 F5 | 	xor	result1, local02
0e908     0C 4E 05 F1 | 	add	fp, #12
0e90c     A7 FA 61 FC | 	wrlong	result1, fp
0e910     0C 4E 85 F1 | 	sub	fp, #12
0e914                 | LR__1122
0e914                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
0e914     14 4E 05 F1 | 	add	fp, #20
0e918     A7 14 02 FB | 	rdlong	arg02, fp
0e91c     14 4E 85 F1 | 	sub	fp, #20
0e920     1D 14 0E F2 | 	cmp	arg02, #29 wz
0e924     24 00 90 5D |  if_ne	jmp	#LR__1123
0e928     14 4E 05 F1 | 	add	fp, #20
0e92c     A7 3C 68 FC | 	wrlong	#30, fp
0e930     08 4E 85 F1 | 	sub	fp, #8
0e934     A7 12 02 FB | 	rdlong	arg01, fp
0e938     0C 4E 85 F1 | 	sub	fp, #12
0e93c     20 CB B0 FD | 	call	#__system___float_fromuns
0e940     0C 4E 05 F1 | 	add	fp, #12
0e944     A7 FA 61 FC | 	wrlong	result1, fp
0e948     0C 4E 85 F1 | 	sub	fp, #12
0e94c                 | LR__1123
0e94c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
0e94c     08 4E 05 F1 | 	add	fp, #8
0e950     A7 14 02 FB | 	rdlong	arg02, fp
0e954     08 4E 85 F1 | 	sub	fp, #8
0e958     1E 14 0E F2 | 	cmp	arg02, #30 wz
0e95c     14 4E 05 A1 |  if_e	add	fp, #20
0e960     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e964     14 4E 85 A1 |  if_e	sub	fp, #20
0e968     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
0e96c     1C 00 90 5D |  if_ne	jmp	#LR__1124
0e970     A7 12 02 FB | 	rdlong	arg01, fp
0e974     0C 4E 05 F1 | 	add	fp, #12
0e978     A7 14 02 FB | 	rdlong	arg02, fp
0e97c     0C 4E 85 F1 | 	sub	fp, #12
0e980     E4 D0 B0 FD | 	call	#__system___float_div
0e984     A7 FA 61 FC | 	wrlong	result1, fp
0e988     10 00 90 FD | 	jmp	#LR__1125
0e98c                 | LR__1124
0e98c     A7 16 68 FC | 	wrlong	#11, fp
0e990     08 4E 05 F1 | 	add	fp, #8
0e994     A7 FE 69 FC | 	wrlong	#255, fp
0e998     08 4E 85 F1 | 	sub	fp, #8
0e99c                 | LR__1125
0e99c     A7 12 02 F6 | 	mov	arg01, fp
0e9a0     D8 AF BF FD | 	call	#_push
0e9a4     A7 F0 03 F6 | 	mov	ptra, fp
0e9a8     B2 00 A0 FD | 	call	#popregs_
0e9ac                 | _do_fdiv_ret
0e9ac     2D 00 64 FD | 	ret
0e9b0                 | 
0e9b0                 | ' 
0e9b0                 | ' 
0e9b0                 | ' sub do_mod 
0e9b0                 | _do_mod
0e9b0     01 4A 05 F6 | 	mov	COUNT_, #1
0e9b4     A8 00 A0 FD | 	call	#pushregs_
0e9b8     18 F0 07 F1 | 	add	ptra, #24
0e9bc     24 AF BF FD | 	call	#_pop
0e9c0     FD 64 02 F6 | 	mov	muldivb_, result1
0e9c4     FE 62 02 F6 | 	mov	muldiva_, result2
0e9c8     FF 1E 02 F6 | 	mov	local01, result3
0e9cc     0C 4E 05 F1 | 	add	fp, #12
0e9d0     A7 64 62 FC | 	wrlong	muldivb_, fp
0e9d4     04 4E 05 F1 | 	add	fp, #4
0e9d8     A7 62 62 FC | 	wrlong	muldiva_, fp
0e9dc     04 4E 05 F1 | 	add	fp, #4
0e9e0     A7 1E 62 FC | 	wrlong	local01, fp
0e9e4     14 4E 85 F1 | 	sub	fp, #20
0e9e8     F8 AE BF FD | 	call	#_pop
0e9ec     A7 FA 61 FC | 	wrlong	result1, fp
0e9f0     04 4E 05 F1 | 	add	fp, #4
0e9f4     A7 FC 61 FC | 	wrlong	result2, fp
0e9f8     04 4E 05 F1 | 	add	fp, #4
0e9fc     A7 FE 61 FC | 	wrlong	result3, fp
0ea00                 | ' 
0ea00                 | ' t2=pop()
0ea00                 | ' t1=pop()
0ea00                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
0ea00     08 4E 85 F1 | 	sub	fp, #8
0ea04     1F FE 0D F2 | 	cmp	result3, #31 wz
0ea08     14 4E 05 51 |  if_ne	add	fp, #20
0ea0c     A7 12 02 5B |  if_ne	rdlong	arg01, fp
0ea10     14 4E 85 51 |  if_ne	sub	fp, #20
0ea14     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
0ea18     A7 14 68 AC |  if_e	wrlong	#10, fp
0ea1c     08 4E 05 A1 |  if_e	add	fp, #8
0ea20     A7 FE 69 AC |  if_e	wrlong	#255, fp
0ea24     08 4E 85 A1 |  if_e	sub	fp, #8
0ea28     90 01 90 AD |  if_e	jmp	#LR__1136
0ea2c                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
0ea2c     08 4E 05 F1 | 	add	fp, #8
0ea30     A7 64 02 FB | 	rdlong	muldivb_, fp
0ea34     08 4E 85 F1 | 	sub	fp, #8
0ea38     1E 64 0E F2 | 	cmp	muldivb_, #30 wz
0ea3c     1C 00 90 5D |  if_ne	jmp	#LR__1130
0ea40     08 4E 05 F1 | 	add	fp, #8
0ea44     A7 38 68 FC | 	wrlong	#28, fp
0ea48     08 4E 85 F1 | 	sub	fp, #8
0ea4c     A7 12 02 FB | 	rdlong	arg01, fp
0ea50     00 14 06 F6 | 	mov	arg02, #0
0ea54     D4 D2 B0 FD | 	call	#__system___float_tointeger
0ea58     A7 FA 61 FC | 	wrlong	result1, fp
0ea5c                 | LR__1130
0ea5c                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
0ea5c     14 4E 05 F1 | 	add	fp, #20
0ea60     A7 64 02 FB | 	rdlong	muldivb_, fp
0ea64     14 4E 85 F1 | 	sub	fp, #20
0ea68     1E 64 0E F2 | 	cmp	muldivb_, #30 wz
0ea6c     28 00 90 5D |  if_ne	jmp	#LR__1131
0ea70     14 4E 05 F1 | 	add	fp, #20
0ea74     A7 38 68 FC | 	wrlong	#28, fp
0ea78     08 4E 85 F1 | 	sub	fp, #8
0ea7c     A7 12 02 FB | 	rdlong	arg01, fp
0ea80     0C 4E 85 F1 | 	sub	fp, #12
0ea84     00 14 06 F6 | 	mov	arg02, #0
0ea88     A0 D2 B0 FD | 	call	#__system___float_tointeger
0ea8c     0C 4E 05 F1 | 	add	fp, #12
0ea90     A7 FA 61 FC | 	wrlong	result1, fp
0ea94     0C 4E 85 F1 | 	sub	fp, #12
0ea98                 | LR__1131
0ea98                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
0ea98     08 4E 05 F1 | 	add	fp, #8
0ea9c     A7 64 02 FB | 	rdlong	muldivb_, fp
0eaa0     08 4E 85 F1 | 	sub	fp, #8
0eaa4     1D 64 0E F2 | 	cmp	muldivb_, #29 wz
0eaa8     14 4E 05 A1 |  if_e	add	fp, #20
0eaac     A7 1E 02 AB |  if_e	rdlong	local01, fp
0eab0     14 4E 85 A1 |  if_e	sub	fp, #20
0eab4     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0eab8     20 00 90 5D |  if_ne	jmp	#LR__1132
0eabc     0C 4E 05 F1 | 	add	fp, #12
0eac0     A7 1E 02 FB | 	rdlong	local01, fp
0eac4     0C 4E 85 F1 | 	sub	fp, #12
0eac8     A7 64 02 FB | 	rdlong	muldivb_, fp
0eacc     0F 65 12 FD | 	qdiv	muldivb_, local01
0ead0     19 1E 62 FD | 	getqy	local01
0ead4     A7 1E 62 FC | 	wrlong	local01, fp
0ead8     E0 00 90 FD | 	jmp	#LR__1136
0eadc                 | LR__1132
0eadc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
0eadc     08 4E 05 F1 | 	add	fp, #8
0eae0     A7 64 02 FB | 	rdlong	muldivb_, fp
0eae4     08 4E 85 F1 | 	sub	fp, #8
0eae8     1D 64 0E F2 | 	cmp	muldivb_, #29 wz
0eaec     14 4E 05 A1 |  if_e	add	fp, #20
0eaf0     A7 1E 02 AB |  if_e	rdlong	local01, fp
0eaf4     14 4E 85 A1 |  if_e	sub	fp, #20
0eaf8     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0eafc     2C 00 90 5D |  if_ne	jmp	#LR__1133
0eb00     0C 4E 05 F1 | 	add	fp, #12
0eb04     A7 1E 02 FB | 	rdlong	local01, fp
0eb08     0C 4E 85 F1 | 	sub	fp, #12
0eb0c     A7 64 02 FB | 	rdlong	muldivb_, fp
0eb10     0F 65 12 FD | 	qdiv	muldivb_, local01
0eb14     19 1E 62 FD | 	getqy	local01
0eb18     A7 1E 62 FC | 	wrlong	local01, fp
0eb1c     08 4E 05 F1 | 	add	fp, #8
0eb20     A7 38 68 FC | 	wrlong	#28, fp
0eb24     08 4E 85 F1 | 	sub	fp, #8
0eb28     90 00 90 FD | 	jmp	#LR__1136
0eb2c                 | LR__1133
0eb2c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
0eb2c     08 4E 05 F1 | 	add	fp, #8
0eb30     A7 64 02 FB | 	rdlong	muldivb_, fp
0eb34     08 4E 85 F1 | 	sub	fp, #8
0eb38     1C 64 0E F2 | 	cmp	muldivb_, #28 wz
0eb3c     14 4E 05 A1 |  if_e	add	fp, #20
0eb40     A7 1E 02 AB |  if_e	rdlong	local01, fp
0eb44     14 4E 85 A1 |  if_e	sub	fp, #20
0eb48     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0eb4c     1C 00 90 5D |  if_ne	jmp	#LR__1134
0eb50     A7 62 02 FB | 	rdlong	muldiva_, fp
0eb54     0C 4E 05 F1 | 	add	fp, #12
0eb58     A7 64 02 FB | 	rdlong	muldivb_, fp
0eb5c     0C 4E 85 F1 | 	sub	fp, #12
0eb60     BA 00 A0 FD | 	call	#divide_
0eb64     A7 62 62 FC | 	wrlong	muldiva_, fp
0eb68     50 00 90 FD | 	jmp	#LR__1136
0eb6c                 | LR__1134
0eb6c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
0eb6c     08 4E 05 F1 | 	add	fp, #8
0eb70     A7 64 02 FB | 	rdlong	muldivb_, fp
0eb74     08 4E 85 F1 | 	sub	fp, #8
0eb78     1C 64 0E F2 | 	cmp	muldivb_, #28 wz
0eb7c     14 4E 05 A1 |  if_e	add	fp, #20
0eb80     A7 1E 02 AB |  if_e	rdlong	local01, fp
0eb84     14 4E 85 A1 |  if_e	sub	fp, #20
0eb88     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0eb8c     1C 00 90 5D |  if_ne	jmp	#LR__1135
0eb90     A7 62 02 FB | 	rdlong	muldiva_, fp
0eb94     0C 4E 05 F1 | 	add	fp, #12
0eb98     A7 64 02 FB | 	rdlong	muldivb_, fp
0eb9c     0C 4E 85 F1 | 	sub	fp, #12
0eba0     BA 00 A0 FD | 	call	#divide_
0eba4     A7 62 62 FC | 	wrlong	muldiva_, fp
0eba8     10 00 90 FD | 	jmp	#LR__1136
0ebac                 | LR__1135
0ebac     A7 16 68 FC | 	wrlong	#11, fp
0ebb0     08 4E 05 F1 | 	add	fp, #8
0ebb4     A7 FE 69 FC | 	wrlong	#255, fp
0ebb8     08 4E 85 F1 | 	sub	fp, #8
0ebbc                 | LR__1136
0ebbc     A7 12 02 F6 | 	mov	arg01, fp
0ebc0     B8 AD BF FD | 	call	#_push
0ebc4     A7 F0 03 F6 | 	mov	ptra, fp
0ebc8     B2 00 A0 FD | 	call	#popregs_
0ebcc                 | _do_mod_ret
0ebcc     2D 00 64 FD | 	ret
0ebd0                 | 
0ebd0                 | ' 
0ebd0                 | ' sub do_shl 
0ebd0                 | _do_shl
0ebd0     03 4A 05 F6 | 	mov	COUNT_, #3
0ebd4     A8 00 A0 FD | 	call	#pushregs_
0ebd8     18 F0 07 F1 | 	add	ptra, #24
0ebdc     04 AD BF FD | 	call	#_pop
0ebe0     FD 12 02 F6 | 	mov	arg01, result1
0ebe4     FE 1E 02 F6 | 	mov	local01, result2
0ebe8     FF 20 02 F6 | 	mov	local02, result3
0ebec     0C 4E 05 F1 | 	add	fp, #12
0ebf0     A7 12 62 FC | 	wrlong	arg01, fp
0ebf4     04 4E 05 F1 | 	add	fp, #4
0ebf8     A7 1E 62 FC | 	wrlong	local01, fp
0ebfc     04 4E 05 F1 | 	add	fp, #4
0ec00     A7 20 62 FC | 	wrlong	local02, fp
0ec04     14 4E 85 F1 | 	sub	fp, #20
0ec08     D8 AC BF FD | 	call	#_pop
0ec0c     FF 22 02 F6 | 	mov	local03, result3
0ec10     A7 FA 61 FC | 	wrlong	result1, fp
0ec14     04 4E 05 F1 | 	add	fp, #4
0ec18     A7 FC 61 FC | 	wrlong	result2, fp
0ec1c     04 4E 05 F1 | 	add	fp, #4
0ec20     A7 22 62 FC | 	wrlong	local03, fp
0ec24                 | ' 
0ec24                 | ' t2=pop()
0ec24                 | ' t1=pop()
0ec24                 | ' 
0ec24                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0ec24     08 4E 85 F1 | 	sub	fp, #8
0ec28     1C 22 0E F2 | 	cmp	local03, #28 wz
0ec2c     A7 22 02 AB |  if_e	rdlong	local03, fp
0ec30     A7 22 62 AC |  if_e	wrlong	local03, fp
0ec34     08 4E 05 A1 |  if_e	add	fp, #8
0ec38     A7 3A 68 AC |  if_e	wrlong	#29, fp
0ec3c     08 4E 85 A1 |  if_e	sub	fp, #8
0ec40                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0ec40     14 4E 05 F1 | 	add	fp, #20
0ec44     A7 22 02 FB | 	rdlong	local03, fp
0ec48     14 4E 85 F1 | 	sub	fp, #20
0ec4c     1C 22 0E F2 | 	cmp	local03, #28 wz
0ec50     18 00 90 5D |  if_ne	jmp	#LR__1140
0ec54     0C 4E 05 F1 | 	add	fp, #12
0ec58     A7 22 02 FB | 	rdlong	local03, fp
0ec5c     A7 22 62 FC | 	wrlong	local03, fp
0ec60     08 4E 05 F1 | 	add	fp, #8
0ec64     A7 3A 68 FC | 	wrlong	#29, fp
0ec68     14 4E 85 F1 | 	sub	fp, #20
0ec6c                 | LR__1140
0ec6c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
0ec6c     08 4E 05 F1 | 	add	fp, #8
0ec70     A7 22 02 FB | 	rdlong	local03, fp
0ec74     08 4E 85 F1 | 	sub	fp, #8
0ec78     1F 22 0E F2 | 	cmp	local03, #31 wz
0ec7c     14 4E 05 51 |  if_ne	add	fp, #20
0ec80     A7 20 02 5B |  if_ne	rdlong	local02, fp
0ec84     14 4E 85 51 |  if_ne	sub	fp, #20
0ec88     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0ec8c     08 4E 05 51 |  if_ne	add	fp, #8
0ec90     A7 22 02 5B |  if_ne	rdlong	local03, fp
0ec94     08 4E 85 51 |  if_ne	sub	fp, #8
0ec98     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0ec9c     14 4E 05 51 |  if_ne	add	fp, #20
0eca0     14 4E 85 51 |  if_ne	sub	fp, #20
0eca4     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0eca8     A7 0C 68 AC |  if_e	wrlong	#6, fp
0ecac     08 4E 05 A1 |  if_e	add	fp, #8
0ecb0     A7 FE 69 AC |  if_e	wrlong	#255, fp
0ecb4     08 4E 85 A1 |  if_e	sub	fp, #8
0ecb8     18 00 90 AD |  if_e	jmp	#LR__1141
0ecbc     A7 22 02 FB | 	rdlong	local03, fp
0ecc0     0C 4E 05 F1 | 	add	fp, #12
0ecc4     A7 1E 02 FB | 	rdlong	local01, fp
0ecc8     0C 4E 85 F1 | 	sub	fp, #12
0eccc     0F 23 62 F0 | 	shl	local03, local01
0ecd0     A7 22 62 FC | 	wrlong	local03, fp
0ecd4                 | LR__1141
0ecd4     A7 12 02 F6 | 	mov	arg01, fp
0ecd8     A0 AC BF FD | 	call	#_push
0ecdc     A7 F0 03 F6 | 	mov	ptra, fp
0ece0     B2 00 A0 FD | 	call	#popregs_
0ece4                 | _do_shl_ret
0ece4     2D 00 64 FD | 	ret
0ece8                 | 
0ece8                 | ' 
0ece8                 | ' sub do_shr 
0ece8                 | _do_shr
0ece8     03 4A 05 F6 | 	mov	COUNT_, #3
0ecec     A8 00 A0 FD | 	call	#pushregs_
0ecf0     18 F0 07 F1 | 	add	ptra, #24
0ecf4     EC AB BF FD | 	call	#_pop
0ecf8     FD 12 02 F6 | 	mov	arg01, result1
0ecfc     FE 1E 02 F6 | 	mov	local01, result2
0ed00     FF 20 02 F6 | 	mov	local02, result3
0ed04     0C 4E 05 F1 | 	add	fp, #12
0ed08     A7 12 62 FC | 	wrlong	arg01, fp
0ed0c     04 4E 05 F1 | 	add	fp, #4
0ed10     A7 1E 62 FC | 	wrlong	local01, fp
0ed14     04 4E 05 F1 | 	add	fp, #4
0ed18     A7 20 62 FC | 	wrlong	local02, fp
0ed1c     14 4E 85 F1 | 	sub	fp, #20
0ed20     C0 AB BF FD | 	call	#_pop
0ed24     FF 22 02 F6 | 	mov	local03, result3
0ed28     A7 FA 61 FC | 	wrlong	result1, fp
0ed2c     04 4E 05 F1 | 	add	fp, #4
0ed30     A7 FC 61 FC | 	wrlong	result2, fp
0ed34     04 4E 05 F1 | 	add	fp, #4
0ed38     A7 22 62 FC | 	wrlong	local03, fp
0ed3c                 | ' t2=pop()
0ed3c                 | ' t1=pop()
0ed3c                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0ed3c     08 4E 85 F1 | 	sub	fp, #8
0ed40     1C 22 0E F2 | 	cmp	local03, #28 wz
0ed44     A7 22 02 AB |  if_e	rdlong	local03, fp
0ed48     A7 22 62 AC |  if_e	wrlong	local03, fp
0ed4c     08 4E 05 A1 |  if_e	add	fp, #8
0ed50     A7 3A 68 AC |  if_e	wrlong	#29, fp
0ed54     08 4E 85 A1 |  if_e	sub	fp, #8
0ed58                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0ed58     14 4E 05 F1 | 	add	fp, #20
0ed5c     A7 22 02 FB | 	rdlong	local03, fp
0ed60     14 4E 85 F1 | 	sub	fp, #20
0ed64     1C 22 0E F2 | 	cmp	local03, #28 wz
0ed68     18 00 90 5D |  if_ne	jmp	#LR__1150
0ed6c     0C 4E 05 F1 | 	add	fp, #12
0ed70     A7 22 02 FB | 	rdlong	local03, fp
0ed74     A7 22 62 FC | 	wrlong	local03, fp
0ed78     08 4E 05 F1 | 	add	fp, #8
0ed7c     A7 3A 68 FC | 	wrlong	#29, fp
0ed80     14 4E 85 F1 | 	sub	fp, #20
0ed84                 | LR__1150
0ed84                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
0ed84     08 4E 05 F1 | 	add	fp, #8
0ed88     A7 22 02 FB | 	rdlong	local03, fp
0ed8c     08 4E 85 F1 | 	sub	fp, #8
0ed90     1F 22 0E F2 | 	cmp	local03, #31 wz
0ed94     14 4E 05 51 |  if_ne	add	fp, #20
0ed98     A7 20 02 5B |  if_ne	rdlong	local02, fp
0ed9c     14 4E 85 51 |  if_ne	sub	fp, #20
0eda0     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0eda4     08 4E 05 51 |  if_ne	add	fp, #8
0eda8     A7 22 02 5B |  if_ne	rdlong	local03, fp
0edac     08 4E 85 51 |  if_ne	sub	fp, #8
0edb0     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0edb4     14 4E 05 51 |  if_ne	add	fp, #20
0edb8     14 4E 85 51 |  if_ne	sub	fp, #20
0edbc     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0edc0     A7 0C 68 AC |  if_e	wrlong	#6, fp
0edc4     08 4E 05 A1 |  if_e	add	fp, #8
0edc8     A7 FE 69 AC |  if_e	wrlong	#255, fp
0edcc     08 4E 85 A1 |  if_e	sub	fp, #8
0edd0     18 00 90 AD |  if_e	jmp	#LR__1151
0edd4     A7 22 02 FB | 	rdlong	local03, fp
0edd8     0C 4E 05 F1 | 	add	fp, #12
0eddc     A7 1E 02 FB | 	rdlong	local01, fp
0ede0     0C 4E 85 F1 | 	sub	fp, #12
0ede4     0F 23 42 F0 | 	shr	local03, local01
0ede8     A7 22 62 FC | 	wrlong	local03, fp
0edec                 | LR__1151
0edec     A7 12 02 F6 | 	mov	arg01, fp
0edf0     88 AB BF FD | 	call	#_push
0edf4     A7 F0 03 F6 | 	mov	ptra, fp
0edf8     B2 00 A0 FD | 	call	#popregs_
0edfc                 | _do_shr_ret
0edfc     2D 00 64 FD | 	ret
0ee00                 | 
0ee00                 | ' 
0ee00                 | ' sub do_power 
0ee00                 | _do_power
0ee00     02 4A 05 F6 | 	mov	COUNT_, #2
0ee04     A8 00 A0 FD | 	call	#pushregs_
0ee08     18 F0 07 F1 | 	add	ptra, #24
0ee0c     D4 AA BF FD | 	call	#_pop
0ee10     FD 14 02 F6 | 	mov	arg02, result1
0ee14     FE 12 02 F6 | 	mov	arg01, result2
0ee18     FF 1E 02 F6 | 	mov	local01, result3
0ee1c     0C 4E 05 F1 | 	add	fp, #12
0ee20     A7 14 62 FC | 	wrlong	arg02, fp
0ee24     04 4E 05 F1 | 	add	fp, #4
0ee28     A7 12 62 FC | 	wrlong	arg01, fp
0ee2c     04 4E 05 F1 | 	add	fp, #4
0ee30     A7 1E 62 FC | 	wrlong	local01, fp
0ee34     14 4E 85 F1 | 	sub	fp, #20
0ee38     A8 AA BF FD | 	call	#_pop
0ee3c     A7 FA 61 FC | 	wrlong	result1, fp
0ee40     04 4E 05 F1 | 	add	fp, #4
0ee44     A7 FC 61 FC | 	wrlong	result2, fp
0ee48     04 4E 05 F1 | 	add	fp, #4
0ee4c     A7 FE 61 FC | 	wrlong	result3, fp
0ee50                 | ' t2=pop()
0ee50                 | ' t1=pop()
0ee50                 | ' 
0ee50                 | ' 
0ee50                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
0ee50     08 4E 85 F1 | 	sub	fp, #8
0ee54     1F FE 0D F2 | 	cmp	result3, #31 wz
0ee58     14 4E 05 51 |  if_ne	add	fp, #20
0ee5c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0ee60     14 4E 85 51 |  if_ne	sub	fp, #20
0ee64     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
0ee68     A7 18 68 AC |  if_e	wrlong	#12, fp
0ee6c     08 4E 05 A1 |  if_e	add	fp, #8
0ee70     A7 FE 69 AC |  if_e	wrlong	#255, fp
0ee74     08 4E 85 A1 |  if_e	sub	fp, #8
0ee78     38 01 90 AD |  if_e	jmp	#LR__1165
0ee7c                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
0ee7c     08 4E 05 F1 | 	add	fp, #8
0ee80     A7 14 02 FB | 	rdlong	arg02, fp
0ee84     08 4E 85 F1 | 	sub	fp, #8
0ee88     1C 14 0E F2 | 	cmp	arg02, #28 wz
0ee8c     28 00 90 5D |  if_ne	jmp	#LR__1160
0ee90     08 4E 05 F1 | 	add	fp, #8
0ee94     A7 3C 68 FC | 	wrlong	#30, fp
0ee98     08 4E 85 F1 | 	sub	fp, #8
0ee9c     A7 12 02 FB | 	rdlong	arg01, fp
0eea0     09 13 52 F6 | 	abs	arg01, arg01 wc
0eea4     1F 20 C6 C9 |  if_b	decod	local02, #31
0eea8     00 20 06 36 |  if_ae	mov	local02, #0
0eeac     B0 C5 B0 FD | 	call	#__system___float_fromuns
0eeb0     10 FB 61 F5 | 	xor	result1, local02
0eeb4     A7 FA 61 FC | 	wrlong	result1, fp
0eeb8                 | LR__1160
0eeb8                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
0eeb8     08 4E 05 F1 | 	add	fp, #8
0eebc     A7 14 02 FB | 	rdlong	arg02, fp
0eec0     08 4E 85 F1 | 	sub	fp, #8
0eec4     1D 14 0E F2 | 	cmp	arg02, #29 wz
0eec8     18 00 90 5D |  if_ne	jmp	#LR__1161
0eecc     08 4E 05 F1 | 	add	fp, #8
0eed0     A7 3C 68 FC | 	wrlong	#30, fp
0eed4     08 4E 85 F1 | 	sub	fp, #8
0eed8     A7 12 02 FB | 	rdlong	arg01, fp
0eedc     80 C5 B0 FD | 	call	#__system___float_fromuns
0eee0     A7 FA 61 FC | 	wrlong	result1, fp
0eee4                 | LR__1161
0eee4                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
0eee4     14 4E 05 F1 | 	add	fp, #20
0eee8     A7 14 02 FB | 	rdlong	arg02, fp
0eeec     14 4E 85 F1 | 	sub	fp, #20
0eef0     1C 14 0E F2 | 	cmp	arg02, #28 wz
0eef4     34 00 90 5D |  if_ne	jmp	#LR__1162
0eef8     14 4E 05 F1 | 	add	fp, #20
0eefc     A7 3C 68 FC | 	wrlong	#30, fp
0ef00     08 4E 85 F1 | 	sub	fp, #8
0ef04     A7 12 02 FB | 	rdlong	arg01, fp
0ef08     0C 4E 85 F1 | 	sub	fp, #12
0ef0c     09 13 52 F6 | 	abs	arg01, arg01 wc
0ef10     1F 20 C6 C9 |  if_b	decod	local02, #31
0ef14     00 20 06 36 |  if_ae	mov	local02, #0
0ef18     44 C5 B0 FD | 	call	#__system___float_fromuns
0ef1c     10 FB 61 F5 | 	xor	result1, local02
0ef20     0C 4E 05 F1 | 	add	fp, #12
0ef24     A7 FA 61 FC | 	wrlong	result1, fp
0ef28     0C 4E 85 F1 | 	sub	fp, #12
0ef2c                 | LR__1162
0ef2c                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
0ef2c     14 4E 05 F1 | 	add	fp, #20
0ef30     A7 14 02 FB | 	rdlong	arg02, fp
0ef34     14 4E 85 F1 | 	sub	fp, #20
0ef38     1D 14 0E F2 | 	cmp	arg02, #29 wz
0ef3c     24 00 90 5D |  if_ne	jmp	#LR__1163
0ef40     14 4E 05 F1 | 	add	fp, #20
0ef44     A7 3C 68 FC | 	wrlong	#30, fp
0ef48     08 4E 85 F1 | 	sub	fp, #8
0ef4c     A7 12 02 FB | 	rdlong	arg01, fp
0ef50     0C 4E 85 F1 | 	sub	fp, #12
0ef54     08 C5 B0 FD | 	call	#__system___float_fromuns
0ef58     0C 4E 05 F1 | 	add	fp, #12
0ef5c     A7 FA 61 FC | 	wrlong	result1, fp
0ef60     0C 4E 85 F1 | 	sub	fp, #12
0ef64                 | LR__1163
0ef64                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
0ef64     08 4E 05 F1 | 	add	fp, #8
0ef68     A7 14 02 FB | 	rdlong	arg02, fp
0ef6c     08 4E 85 F1 | 	sub	fp, #8
0ef70     1E 14 0E F2 | 	cmp	arg02, #30 wz
0ef74     14 4E 05 A1 |  if_e	add	fp, #20
0ef78     A7 1E 02 AB |  if_e	rdlong	local01, fp
0ef7c     14 4E 85 A1 |  if_e	sub	fp, #20
0ef80     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
0ef84     1C 00 90 5D |  if_ne	jmp	#LR__1164
0ef88     A7 12 02 FB | 	rdlong	arg01, fp
0ef8c     0C 4E 05 F1 | 	add	fp, #12
0ef90     A7 14 02 FB | 	rdlong	arg02, fp
0ef94     0C 4E 85 F1 | 	sub	fp, #12
0ef98     AC D7 B0 FD | 	call	#__system____builtin_powf
0ef9c     A7 FA 61 FC | 	wrlong	result1, fp
0efa0     10 00 90 FD | 	jmp	#LR__1165
0efa4                 | LR__1164
0efa4     A7 1A 68 FC | 	wrlong	#13, fp
0efa8     08 4E 05 F1 | 	add	fp, #8
0efac     A7 FE 69 FC | 	wrlong	#255, fp
0efb0     08 4E 85 F1 | 	sub	fp, #8
0efb4                 | LR__1165
0efb4     A7 12 02 F6 | 	mov	arg01, fp
0efb8     C0 A9 BF FD | 	call	#_push
0efbc     A7 F0 03 F6 | 	mov	ptra, fp
0efc0     B2 00 A0 FD | 	call	#popregs_
0efc4                 | _do_power_ret
0efc4     2D 00 64 FD | 	ret
0efc8                 | 
0efc8                 | ' 
0efc8                 | ' 
0efc8                 | ' sub do_eq
0efc8                 | _do_eq
0efc8     05 4A 05 F6 | 	mov	COUNT_, #5
0efcc     A8 00 A0 FD | 	call	#pushregs_
0efd0     18 F0 07 F1 | 	add	ptra, #24
0efd4     0C A9 BF FD | 	call	#_pop
0efd8     FD 1E 02 F6 | 	mov	local01, result1
0efdc     FE 20 02 F6 | 	mov	local02, result2
0efe0     FF 22 02 F6 | 	mov	local03, result3
0efe4     0C 4E 05 F1 | 	add	fp, #12
0efe8     A7 1E 62 FC | 	wrlong	local01, fp
0efec     04 4E 05 F1 | 	add	fp, #4
0eff0     A7 20 62 FC | 	wrlong	local02, fp
0eff4     04 4E 05 F1 | 	add	fp, #4
0eff8     A7 22 62 FC | 	wrlong	local03, fp
0effc     14 4E 85 F1 | 	sub	fp, #20
0f000     E0 A8 BF FD | 	call	#_pop
0f004     FF 22 02 F6 | 	mov	local03, result3
0f008     A7 FA 61 FC | 	wrlong	result1, fp
0f00c     04 4E 05 F1 | 	add	fp, #4
0f010     A7 FC 61 FC | 	wrlong	result2, fp
0f014     04 4E 05 F1 | 	add	fp, #4
0f018     A7 22 62 FC | 	wrlong	local03, fp
0f01c                 | ' t2=pop()
0f01c                 | ' t1=pop()
0f01c                 | ' 
0f01c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
0f01c     08 4E 85 F1 | 	sub	fp, #8
0f020     1F 22 0E F2 | 	cmp	local03, #31 wz
0f024     14 4E 05 A1 |  if_e	add	fp, #20
0f028     A7 24 02 AB |  if_e	rdlong	local04, fp
0f02c     14 4E 85 A1 |  if_e	sub	fp, #20
0f030     12 23 02 A6 |  if_e	mov	local03, local04
0f034     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0f038     28 00 90 5D |  if_ne	jmp	#LR__1170
0f03c     00 1E 06 F6 | 	mov	local01, #0
0f040     A7 12 02 FB | 	rdlong	arg01, fp
0f044     0C 4E 05 F1 | 	add	fp, #12
0f048     A7 14 02 FB | 	rdlong	arg02, fp
0f04c     0C 4E 85 F1 | 	sub	fp, #12
0f050     4C 9D B0 FD | 	call	#__system___string_cmp
0f054     00 FA 0D F2 | 	cmp	result1, #0 wz
0f058     00 1E 26 A6 |  if_e	not	local01, #0
0f05c     A7 1E 62 FC | 	wrlong	local01, fp
0f060     1C 04 90 FD | 	jmp	#LR__1183
0f064                 | LR__1170
0f064                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
0f064     08 4E 05 F1 | 	add	fp, #8
0f068     A7 1E 02 FB | 	rdlong	local01, fp
0f06c     08 4E 85 F1 | 	sub	fp, #8
0f070     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f074     14 4E 05 A1 |  if_e	add	fp, #20
0f078     A7 24 02 AB |  if_e	rdlong	local04, fp
0f07c     14 4E 85 A1 |  if_e	sub	fp, #20
0f080     12 23 02 A6 |  if_e	mov	local03, local04
0f084     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f088     2C 00 90 5D |  if_ne	jmp	#LR__1171
0f08c     00 1E 06 F6 | 	mov	local01, #0
0f090     A7 12 02 FB | 	rdlong	arg01, fp
0f094     0C 4E 05 F1 | 	add	fp, #12
0f098     A7 14 02 FB | 	rdlong	arg02, fp
0f09c     0C 4E 85 F1 | 	sub	fp, #12
0f0a0     01 16 06 F6 | 	mov	arg03, #1
0f0a4     F0 CB B0 FD | 	call	#__system___float_cmp
0f0a8     00 FA 0D F2 | 	cmp	result1, #0 wz
0f0ac     00 1E 26 A6 |  if_e	not	local01, #0
0f0b0     A7 1E 62 FC | 	wrlong	local01, fp
0f0b4     C8 03 90 FD | 	jmp	#LR__1183
0f0b8                 | LR__1171
0f0b8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
0f0b8     08 4E 05 F1 | 	add	fp, #8
0f0bc     A7 1E 02 FB | 	rdlong	local01, fp
0f0c0     08 4E 85 F1 | 	sub	fp, #8
0f0c4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f0c8     14 4E 05 A1 |  if_e	add	fp, #20
0f0cc     A7 24 02 AB |  if_e	rdlong	local04, fp
0f0d0     14 4E 85 A1 |  if_e	sub	fp, #20
0f0d4     12 23 02 A6 |  if_e	mov	local03, local04
0f0d8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f0dc     48 00 90 5D |  if_ne	jmp	#LR__1172
0f0e0     00 1E 06 F6 | 	mov	local01, #0
0f0e4     A7 20 02 FB | 	rdlong	local02, fp
0f0e8     0C 4E 05 F1 | 	add	fp, #12
0f0ec     A7 12 02 FB | 	rdlong	arg01, fp
0f0f0     0C 4E 85 F1 | 	sub	fp, #12
0f0f4     09 13 52 F6 | 	abs	arg01, arg01 wc
0f0f8     1F 26 C6 C9 |  if_b	decod	local05, #31
0f0fc     00 26 06 36 |  if_ae	mov	local05, #0
0f100     5C C3 B0 FD | 	call	#__system___float_fromuns
0f104     13 FB 61 F5 | 	xor	result1, local05
0f108     FD 14 02 F6 | 	mov	arg02, result1
0f10c     10 13 02 F6 | 	mov	arg01, local02
0f110     01 16 06 F6 | 	mov	arg03, #1
0f114     80 CB B0 FD | 	call	#__system___float_cmp
0f118     00 FA 0D F2 | 	cmp	result1, #0 wz
0f11c     00 1E 26 A6 |  if_e	not	local01, #0
0f120     A7 1E 62 FC | 	wrlong	local01, fp
0f124     58 03 90 FD | 	jmp	#LR__1183
0f128                 | LR__1172
0f128                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
0f128     08 4E 05 F1 | 	add	fp, #8
0f12c     A7 1E 02 FB | 	rdlong	local01, fp
0f130     08 4E 85 F1 | 	sub	fp, #8
0f134     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f138     14 4E 05 A1 |  if_e	add	fp, #20
0f13c     A7 24 02 AB |  if_e	rdlong	local04, fp
0f140     14 4E 85 A1 |  if_e	sub	fp, #20
0f144     12 23 02 A6 |  if_e	mov	local03, local04
0f148     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f14c     38 00 90 5D |  if_ne	jmp	#LR__1173
0f150     00 1E 06 F6 | 	mov	local01, #0
0f154     A7 20 02 FB | 	rdlong	local02, fp
0f158     0C 4E 05 F1 | 	add	fp, #12
0f15c     A7 12 02 FB | 	rdlong	arg01, fp
0f160     0C 4E 85 F1 | 	sub	fp, #12
0f164     F8 C2 B0 FD | 	call	#__system___float_fromuns
0f168     FD 14 02 F6 | 	mov	arg02, result1
0f16c     10 13 02 F6 | 	mov	arg01, local02
0f170     01 16 06 F6 | 	mov	arg03, #1
0f174     20 CB B0 FD | 	call	#__system___float_cmp
0f178     00 FA 0D F2 | 	cmp	result1, #0 wz
0f17c     00 1E 26 A6 |  if_e	not	local01, #0
0f180     A7 1E 62 FC | 	wrlong	local01, fp
0f184     F8 02 90 FD | 	jmp	#LR__1183
0f188                 | LR__1173
0f188                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
0f188     08 4E 05 F1 | 	add	fp, #8
0f18c     A7 1E 02 FB | 	rdlong	local01, fp
0f190     08 4E 85 F1 | 	sub	fp, #8
0f194     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f198     14 4E 05 A1 |  if_e	add	fp, #20
0f19c     A7 24 02 AB |  if_e	rdlong	local04, fp
0f1a0     14 4E 85 A1 |  if_e	sub	fp, #20
0f1a4     12 23 02 A6 |  if_e	mov	local03, local04
0f1a8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f1ac     44 00 90 5D |  if_ne	jmp	#LR__1174
0f1b0     00 1E 06 F6 | 	mov	local01, #0
0f1b4     A7 12 02 FB | 	rdlong	arg01, fp
0f1b8     09 13 52 F6 | 	abs	arg01, arg01 wc
0f1bc     1F 26 C6 C9 |  if_b	decod	local05, #31
0f1c0     00 26 06 36 |  if_ae	mov	local05, #0
0f1c4     98 C2 B0 FD | 	call	#__system___float_fromuns
0f1c8     13 FB 61 F5 | 	xor	result1, local05
0f1cc     FD 12 02 F6 | 	mov	arg01, result1
0f1d0     0C 4E 05 F1 | 	add	fp, #12
0f1d4     A7 14 02 FB | 	rdlong	arg02, fp
0f1d8     0C 4E 85 F1 | 	sub	fp, #12
0f1dc     01 16 06 F6 | 	mov	arg03, #1
0f1e0     B4 CA B0 FD | 	call	#__system___float_cmp
0f1e4     00 FA 0D F2 | 	cmp	result1, #0 wz
0f1e8     00 1E 26 A6 |  if_e	not	local01, #0
0f1ec     A7 1E 62 FC | 	wrlong	local01, fp
0f1f0     8C 02 90 FD | 	jmp	#LR__1183
0f1f4                 | LR__1174
0f1f4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
0f1f4     08 4E 05 F1 | 	add	fp, #8
0f1f8     A7 1E 02 FB | 	rdlong	local01, fp
0f1fc     08 4E 85 F1 | 	sub	fp, #8
0f200     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f204     14 4E 05 A1 |  if_e	add	fp, #20
0f208     A7 24 02 AB |  if_e	rdlong	local04, fp
0f20c     14 4E 85 A1 |  if_e	sub	fp, #20
0f210     12 23 02 A6 |  if_e	mov	local03, local04
0f214     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f218     24 00 90 5D |  if_ne	jmp	#LR__1175
0f21c     00 1E 06 F6 | 	mov	local01, #0
0f220     A7 20 02 FB | 	rdlong	local02, fp
0f224     0C 4E 05 F1 | 	add	fp, #12
0f228     A7 22 02 FB | 	rdlong	local03, fp
0f22c     0C 4E 85 F1 | 	sub	fp, #12
0f230     11 21 0A F2 | 	cmp	local02, local03 wz
0f234     01 1E 66 A6 |  if_e	neg	local01, #1
0f238     A7 1E 62 FC | 	wrlong	local01, fp
0f23c     40 02 90 FD | 	jmp	#LR__1183
0f240                 | LR__1175
0f240                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
0f240     08 4E 05 F1 | 	add	fp, #8
0f244     A7 1E 02 FB | 	rdlong	local01, fp
0f248     08 4E 85 F1 | 	sub	fp, #8
0f24c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f250     14 4E 05 A1 |  if_e	add	fp, #20
0f254     A7 24 02 AB |  if_e	rdlong	local04, fp
0f258     14 4E 85 A1 |  if_e	sub	fp, #20
0f25c     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0f260     24 00 90 5D |  if_ne	jmp	#LR__1176
0f264     00 1E 06 F6 | 	mov	local01, #0
0f268     A7 20 02 FB | 	rdlong	local02, fp
0f26c     0C 4E 05 F1 | 	add	fp, #12
0f270     A7 22 02 FB | 	rdlong	local03, fp
0f274     0C 4E 85 F1 | 	sub	fp, #12
0f278     11 21 0A F2 | 	cmp	local02, local03 wz
0f27c     01 1E 66 A6 |  if_e	neg	local01, #1
0f280     A7 1E 62 FC | 	wrlong	local01, fp
0f284     F8 01 90 FD | 	jmp	#LR__1183
0f288                 | LR__1176
0f288                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
0f288     08 4E 05 F1 | 	add	fp, #8
0f28c     A7 1E 02 FB | 	rdlong	local01, fp
0f290     08 4E 85 F1 | 	sub	fp, #8
0f294     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f298     14 4E 05 A1 |  if_e	add	fp, #20
0f29c     A7 22 02 AB |  if_e	rdlong	local03, fp
0f2a0     14 4E 85 A1 |  if_e	sub	fp, #20
0f2a4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f2a8     34 00 90 5D |  if_ne	jmp	#LR__1177
0f2ac     00 1E 06 F6 | 	mov	local01, #0
0f2b0     A7 12 02 FB | 	rdlong	arg01, fp
0f2b4     A8 C1 B0 FD | 	call	#__system___float_fromuns
0f2b8     FD 12 02 F6 | 	mov	arg01, result1
0f2bc     0C 4E 05 F1 | 	add	fp, #12
0f2c0     A7 14 02 FB | 	rdlong	arg02, fp
0f2c4     0C 4E 85 F1 | 	sub	fp, #12
0f2c8     01 16 06 F6 | 	mov	arg03, #1
0f2cc     C8 C9 B0 FD | 	call	#__system___float_cmp
0f2d0     00 FA 0D F2 | 	cmp	result1, #0 wz
0f2d4     00 1E 26 A6 |  if_e	not	local01, #0
0f2d8     A7 1E 62 FC | 	wrlong	local01, fp
0f2dc     A0 01 90 FD | 	jmp	#LR__1183
0f2e0                 | LR__1177
0f2e0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
0f2e0     08 4E 05 F1 | 	add	fp, #8
0f2e4     A7 1E 02 FB | 	rdlong	local01, fp
0f2e8     08 4E 85 F1 | 	sub	fp, #8
0f2ec     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f2f0     14 4E 05 A1 |  if_e	add	fp, #20
0f2f4     A7 22 02 AB |  if_e	rdlong	local03, fp
0f2f8     14 4E 85 A1 |  if_e	sub	fp, #20
0f2fc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f300     24 00 90 5D |  if_ne	jmp	#LR__1178
0f304     00 1E 06 F6 | 	mov	local01, #0
0f308     A7 20 02 FB | 	rdlong	local02, fp
0f30c     0C 4E 05 F1 | 	add	fp, #12
0f310     A7 22 02 FB | 	rdlong	local03, fp
0f314     0C 4E 85 F1 | 	sub	fp, #12
0f318     11 21 0A F2 | 	cmp	local02, local03 wz
0f31c     01 1E 66 A6 |  if_e	neg	local01, #1
0f320     A7 1E 62 FC | 	wrlong	local01, fp
0f324     58 01 90 FD | 	jmp	#LR__1183
0f328                 | LR__1178
0f328                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
0f328     08 4E 05 F1 | 	add	fp, #8
0f32c     A7 1E 02 FB | 	rdlong	local01, fp
0f330     08 4E 85 F1 | 	sub	fp, #8
0f334     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f338     14 4E 05 A1 |  if_e	add	fp, #20
0f33c     A7 22 02 AB |  if_e	rdlong	local03, fp
0f340     14 4E 85 A1 |  if_e	sub	fp, #20
0f344     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f348     24 00 90 5D |  if_ne	jmp	#LR__1179
0f34c     00 1E 06 F6 | 	mov	local01, #0
0f350     A7 20 02 FB | 	rdlong	local02, fp
0f354     0C 4E 05 F1 | 	add	fp, #12
0f358     A7 22 02 FB | 	rdlong	local03, fp
0f35c     0C 4E 85 F1 | 	sub	fp, #12
0f360     11 21 0A F2 | 	cmp	local02, local03 wz
0f364     01 1E 66 A6 |  if_e	neg	local01, #1
0f368     A7 1E 62 FC | 	wrlong	local01, fp
0f36c     10 01 90 FD | 	jmp	#LR__1183
0f370                 | LR__1179
0f370                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
0f370     08 4E 05 F1 | 	add	fp, #8
0f374     A7 1E 02 FB | 	rdlong	local01, fp
0f378     08 4E 85 F1 | 	sub	fp, #8
0f37c     2B 1E 0E F2 | 	cmp	local01, #43 wz
0f380     14 4E 05 A1 |  if_e	add	fp, #20
0f384     A7 22 02 AB |  if_e	rdlong	local03, fp
0f388     14 4E 85 A1 |  if_e	sub	fp, #20
0f38c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0f390     30 00 90 5D |  if_ne	jmp	#LR__1180
0f394     00 1E 06 F6 | 	mov	local01, #0
0f398     A7 12 02 FB | 	rdlong	arg01, fp
0f39c     80 D6 BF FD | 	call	#_convertstring
0f3a0     FD 12 02 F6 | 	mov	arg01, result1
0f3a4     0C 4E 05 F1 | 	add	fp, #12
0f3a8     A7 14 02 FB | 	rdlong	arg02, fp
0f3ac     0C 4E 85 F1 | 	sub	fp, #12
0f3b0     EC 99 B0 FD | 	call	#__system___string_cmp
0f3b4     00 FA 0D F2 | 	cmp	result1, #0 wz
0f3b8     00 1E 26 A6 |  if_e	not	local01, #0
0f3bc     A7 1E 62 FC | 	wrlong	local01, fp
0f3c0     BC 00 90 FD | 	jmp	#LR__1183
0f3c4                 | LR__1180
0f3c4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
0f3c4     08 4E 05 F1 | 	add	fp, #8
0f3c8     A7 1E 02 FB | 	rdlong	local01, fp
0f3cc     08 4E 85 F1 | 	sub	fp, #8
0f3d0     1F 1E 0E F2 | 	cmp	local01, #31 wz
0f3d4     14 4E 05 A1 |  if_e	add	fp, #20
0f3d8     A7 22 02 AB |  if_e	rdlong	local03, fp
0f3dc     14 4E 85 A1 |  if_e	sub	fp, #20
0f3e0     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0f3e4     34 00 90 5D |  if_ne	jmp	#LR__1181
0f3e8     00 1E 06 F6 | 	mov	local01, #0
0f3ec     A7 20 02 FB | 	rdlong	local02, fp
0f3f0     0C 4E 05 F1 | 	add	fp, #12
0f3f4     A7 12 02 FB | 	rdlong	arg01, fp
0f3f8     0C 4E 85 F1 | 	sub	fp, #12
0f3fc     20 D6 BF FD | 	call	#_convertstring
0f400     FD 14 02 F6 | 	mov	arg02, result1
0f404     10 13 02 F6 | 	mov	arg01, local02
0f408     94 99 B0 FD | 	call	#__system___string_cmp
0f40c     00 FA 0D F2 | 	cmp	result1, #0 wz
0f410     00 1E 26 A6 |  if_e	not	local01, #0
0f414     A7 1E 62 FC | 	wrlong	local01, fp
0f418     64 00 90 FD | 	jmp	#LR__1183
0f41c                 | LR__1181
0f41c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
0f41c     08 4E 05 F1 | 	add	fp, #8
0f420     A7 1E 02 FB | 	rdlong	local01, fp
0f424     08 4E 85 F1 | 	sub	fp, #8
0f428     2B 1E 0E F2 | 	cmp	local01, #43 wz
0f42c     14 4E 05 A1 |  if_e	add	fp, #20
0f430     A7 22 02 AB |  if_e	rdlong	local03, fp
0f434     14 4E 85 A1 |  if_e	sub	fp, #20
0f438     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0f43c     3C 00 90 5D |  if_ne	jmp	#LR__1182
0f440     00 1E 06 F6 | 	mov	local01, #0
0f444     A7 12 02 FB | 	rdlong	arg01, fp
0f448     D4 D5 BF FD | 	call	#_convertstring
0f44c     FD 20 02 F6 | 	mov	local02, result1
0f450     0C 4E 05 F1 | 	add	fp, #12
0f454     A7 12 02 FB | 	rdlong	arg01, fp
0f458     0C 4E 85 F1 | 	sub	fp, #12
0f45c     C0 D5 BF FD | 	call	#_convertstring
0f460     FD 14 02 F6 | 	mov	arg02, result1
0f464     10 13 02 F6 | 	mov	arg01, local02
0f468     34 99 B0 FD | 	call	#__system___string_cmp
0f46c     00 FA 0D F2 | 	cmp	result1, #0 wz
0f470     00 1E 26 A6 |  if_e	not	local01, #0
0f474     A7 1E 62 FC | 	wrlong	local01, fp
0f478     04 00 90 FD | 	jmp	#LR__1183
0f47c                 | LR__1182
0f47c     A7 00 68 FC | 	wrlong	#0, fp
0f480                 | LR__1183
0f480     08 4E 05 F1 | 	add	fp, #8
0f484     A7 38 68 FC | 	wrlong	#28, fp
0f488     08 4E 85 F1 | 	sub	fp, #8
0f48c     A7 12 02 F6 | 	mov	arg01, fp
0f490     E8 A4 BF FD | 	call	#_push
0f494     A7 F0 03 F6 | 	mov	ptra, fp
0f498     B2 00 A0 FD | 	call	#popregs_
0f49c                 | _do_eq_ret
0f49c     2D 00 64 FD | 	ret
0f4a0                 | 
0f4a0                 | ' 
0f4a0                 | ' sub do_gt
0f4a0                 | _do_gt
0f4a0     05 4A 05 F6 | 	mov	COUNT_, #5
0f4a4     A8 00 A0 FD | 	call	#pushregs_
0f4a8     18 F0 07 F1 | 	add	ptra, #24
0f4ac     34 A4 BF FD | 	call	#_pop
0f4b0     FD 1E 02 F6 | 	mov	local01, result1
0f4b4     FE 20 02 F6 | 	mov	local02, result2
0f4b8     FF 22 02 F6 | 	mov	local03, result3
0f4bc     0C 4E 05 F1 | 	add	fp, #12
0f4c0     A7 1E 62 FC | 	wrlong	local01, fp
0f4c4     04 4E 05 F1 | 	add	fp, #4
0f4c8     A7 20 62 FC | 	wrlong	local02, fp
0f4cc     04 4E 05 F1 | 	add	fp, #4
0f4d0     A7 22 62 FC | 	wrlong	local03, fp
0f4d4     14 4E 85 F1 | 	sub	fp, #20
0f4d8     08 A4 BF FD | 	call	#_pop
0f4dc     FF 22 02 F6 | 	mov	local03, result3
0f4e0     A7 FA 61 FC | 	wrlong	result1, fp
0f4e4     04 4E 05 F1 | 	add	fp, #4
0f4e8     A7 FC 61 FC | 	wrlong	result2, fp
0f4ec     04 4E 05 F1 | 	add	fp, #4
0f4f0     A7 22 62 FC | 	wrlong	local03, fp
0f4f4                 | ' t2=pop()
0f4f4                 | ' t1=pop()
0f4f4                 | ' 
0f4f4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
0f4f4     08 4E 85 F1 | 	sub	fp, #8
0f4f8     1F 22 0E F2 | 	cmp	local03, #31 wz
0f4fc     14 4E 05 A1 |  if_e	add	fp, #20
0f500     A7 24 02 AB |  if_e	rdlong	local04, fp
0f504     14 4E 85 A1 |  if_e	sub	fp, #20
0f508     12 23 02 A6 |  if_e	mov	local03, local04
0f50c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0f510     28 00 90 5D |  if_ne	jmp	#LR__1190
0f514     00 1E 06 F6 | 	mov	local01, #0
0f518     A7 12 02 FB | 	rdlong	arg01, fp
0f51c     0C 4E 05 F1 | 	add	fp, #12
0f520     A7 14 02 FB | 	rdlong	arg02, fp
0f524     0C 4E 85 F1 | 	sub	fp, #12
0f528     74 98 B0 FD | 	call	#__system___string_cmp
0f52c     01 FA 55 F2 | 	cmps	result1, #1 wc
0f530     00 1E 26 36 |  if_ae	not	local01, #0
0f534     A7 1E 62 FC | 	wrlong	local01, fp
0f538     1C 04 90 FD | 	jmp	#LR__1203
0f53c                 | LR__1190
0f53c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
0f53c     08 4E 05 F1 | 	add	fp, #8
0f540     A7 1E 02 FB | 	rdlong	local01, fp
0f544     08 4E 85 F1 | 	sub	fp, #8
0f548     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f54c     14 4E 05 A1 |  if_e	add	fp, #20
0f550     A7 24 02 AB |  if_e	rdlong	local04, fp
0f554     14 4E 85 A1 |  if_e	sub	fp, #20
0f558     12 23 02 A6 |  if_e	mov	local03, local04
0f55c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f560     2C 00 90 5D |  if_ne	jmp	#LR__1191
0f564     00 1E 06 F6 | 	mov	local01, #0
0f568     A7 12 02 FB | 	rdlong	arg01, fp
0f56c     0C 4E 05 F1 | 	add	fp, #12
0f570     A7 14 02 FB | 	rdlong	arg02, fp
0f574     0C 4E 85 F1 | 	sub	fp, #12
0f578     01 16 66 F6 | 	neg	arg03, #1
0f57c     18 C7 B0 FD | 	call	#__system___float_cmp
0f580     01 FA 55 F2 | 	cmps	result1, #1 wc
0f584     00 1E 26 36 |  if_ae	not	local01, #0
0f588     A7 1E 62 FC | 	wrlong	local01, fp
0f58c     C8 03 90 FD | 	jmp	#LR__1203
0f590                 | LR__1191
0f590                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
0f590     08 4E 05 F1 | 	add	fp, #8
0f594     A7 1E 02 FB | 	rdlong	local01, fp
0f598     08 4E 85 F1 | 	sub	fp, #8
0f59c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f5a0     14 4E 05 A1 |  if_e	add	fp, #20
0f5a4     A7 24 02 AB |  if_e	rdlong	local04, fp
0f5a8     14 4E 85 A1 |  if_e	sub	fp, #20
0f5ac     12 23 02 A6 |  if_e	mov	local03, local04
0f5b0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f5b4     48 00 90 5D |  if_ne	jmp	#LR__1192
0f5b8     00 1E 06 F6 | 	mov	local01, #0
0f5bc     A7 20 02 FB | 	rdlong	local02, fp
0f5c0     0C 4E 05 F1 | 	add	fp, #12
0f5c4     A7 12 02 FB | 	rdlong	arg01, fp
0f5c8     0C 4E 85 F1 | 	sub	fp, #12
0f5cc     09 13 52 F6 | 	abs	arg01, arg01 wc
0f5d0     1F 26 C6 C9 |  if_b	decod	local05, #31
0f5d4     00 26 06 36 |  if_ae	mov	local05, #0
0f5d8     84 BE B0 FD | 	call	#__system___float_fromuns
0f5dc     13 FB 61 F5 | 	xor	result1, local05
0f5e0     FD 14 02 F6 | 	mov	arg02, result1
0f5e4     10 13 02 F6 | 	mov	arg01, local02
0f5e8     01 16 66 F6 | 	neg	arg03, #1
0f5ec     A8 C6 B0 FD | 	call	#__system___float_cmp
0f5f0     01 FA 55 F2 | 	cmps	result1, #1 wc
0f5f4     00 1E 26 36 |  if_ae	not	local01, #0
0f5f8     A7 1E 62 FC | 	wrlong	local01, fp
0f5fc     58 03 90 FD | 	jmp	#LR__1203
0f600                 | LR__1192
0f600                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
0f600     08 4E 05 F1 | 	add	fp, #8
0f604     A7 1E 02 FB | 	rdlong	local01, fp
0f608     08 4E 85 F1 | 	sub	fp, #8
0f60c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f610     14 4E 05 A1 |  if_e	add	fp, #20
0f614     A7 24 02 AB |  if_e	rdlong	local04, fp
0f618     14 4E 85 A1 |  if_e	sub	fp, #20
0f61c     12 23 02 A6 |  if_e	mov	local03, local04
0f620     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f624     38 00 90 5D |  if_ne	jmp	#LR__1193
0f628     00 1E 06 F6 | 	mov	local01, #0
0f62c     A7 20 02 FB | 	rdlong	local02, fp
0f630     0C 4E 05 F1 | 	add	fp, #12
0f634     A7 12 02 FB | 	rdlong	arg01, fp
0f638     0C 4E 85 F1 | 	sub	fp, #12
0f63c     20 BE B0 FD | 	call	#__system___float_fromuns
0f640     FD 14 02 F6 | 	mov	arg02, result1
0f644     10 13 02 F6 | 	mov	arg01, local02
0f648     01 16 66 F6 | 	neg	arg03, #1
0f64c     48 C6 B0 FD | 	call	#__system___float_cmp
0f650     01 FA 55 F2 | 	cmps	result1, #1 wc
0f654     00 1E 26 36 |  if_ae	not	local01, #0
0f658     A7 1E 62 FC | 	wrlong	local01, fp
0f65c     F8 02 90 FD | 	jmp	#LR__1203
0f660                 | LR__1193
0f660                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
0f660     08 4E 05 F1 | 	add	fp, #8
0f664     A7 1E 02 FB | 	rdlong	local01, fp
0f668     08 4E 85 F1 | 	sub	fp, #8
0f66c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f670     14 4E 05 A1 |  if_e	add	fp, #20
0f674     A7 24 02 AB |  if_e	rdlong	local04, fp
0f678     14 4E 85 A1 |  if_e	sub	fp, #20
0f67c     12 23 02 A6 |  if_e	mov	local03, local04
0f680     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f684     44 00 90 5D |  if_ne	jmp	#LR__1194
0f688     00 1E 06 F6 | 	mov	local01, #0
0f68c     A7 12 02 FB | 	rdlong	arg01, fp
0f690     09 13 52 F6 | 	abs	arg01, arg01 wc
0f694     1F 26 C6 C9 |  if_b	decod	local05, #31
0f698     00 26 06 36 |  if_ae	mov	local05, #0
0f69c     C0 BD B0 FD | 	call	#__system___float_fromuns
0f6a0     13 FB 61 F5 | 	xor	result1, local05
0f6a4     FD 12 02 F6 | 	mov	arg01, result1
0f6a8     0C 4E 05 F1 | 	add	fp, #12
0f6ac     A7 14 02 FB | 	rdlong	arg02, fp
0f6b0     0C 4E 85 F1 | 	sub	fp, #12
0f6b4     01 16 66 F6 | 	neg	arg03, #1
0f6b8     DC C5 B0 FD | 	call	#__system___float_cmp
0f6bc     01 FA 55 F2 | 	cmps	result1, #1 wc
0f6c0     00 1E 26 36 |  if_ae	not	local01, #0
0f6c4     A7 1E 62 FC | 	wrlong	local01, fp
0f6c8     8C 02 90 FD | 	jmp	#LR__1203
0f6cc                 | LR__1194
0f6cc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
0f6cc     08 4E 05 F1 | 	add	fp, #8
0f6d0     A7 1E 02 FB | 	rdlong	local01, fp
0f6d4     08 4E 85 F1 | 	sub	fp, #8
0f6d8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f6dc     14 4E 05 A1 |  if_e	add	fp, #20
0f6e0     A7 24 02 AB |  if_e	rdlong	local04, fp
0f6e4     14 4E 85 A1 |  if_e	sub	fp, #20
0f6e8     12 23 02 A6 |  if_e	mov	local03, local04
0f6ec     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f6f0     24 00 90 5D |  if_ne	jmp	#LR__1195
0f6f4     00 1E 06 F6 | 	mov	local01, #0
0f6f8     A7 20 02 FB | 	rdlong	local02, fp
0f6fc     0C 4E 05 F1 | 	add	fp, #12
0f700     A7 22 02 FB | 	rdlong	local03, fp
0f704     0C 4E 85 F1 | 	sub	fp, #12
0f708     11 21 5A F2 | 	cmps	local02, local03 wcz
0f70c     01 1E 66 16 |  if_a	neg	local01, #1
0f710     A7 1E 62 FC | 	wrlong	local01, fp
0f714     40 02 90 FD | 	jmp	#LR__1203
0f718                 | LR__1195
0f718                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
0f718     08 4E 05 F1 | 	add	fp, #8
0f71c     A7 1E 02 FB | 	rdlong	local01, fp
0f720     08 4E 85 F1 | 	sub	fp, #8
0f724     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f728     14 4E 05 A1 |  if_e	add	fp, #20
0f72c     A7 24 02 AB |  if_e	rdlong	local04, fp
0f730     14 4E 85 A1 |  if_e	sub	fp, #20
0f734     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0f738     24 00 90 5D |  if_ne	jmp	#LR__1196
0f73c     00 1E 06 F6 | 	mov	local01, #0
0f740     A7 20 02 FB | 	rdlong	local02, fp
0f744     0C 4E 05 F1 | 	add	fp, #12
0f748     A7 22 02 FB | 	rdlong	local03, fp
0f74c     0C 4E 85 F1 | 	sub	fp, #12
0f750     11 21 5A F2 | 	cmps	local02, local03 wcz
0f754     01 1E 66 16 |  if_a	neg	local01, #1
0f758     A7 1E 62 FC | 	wrlong	local01, fp
0f75c     F8 01 90 FD | 	jmp	#LR__1203
0f760                 | LR__1196
0f760                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
0f760     08 4E 05 F1 | 	add	fp, #8
0f764     A7 1E 02 FB | 	rdlong	local01, fp
0f768     08 4E 85 F1 | 	sub	fp, #8
0f76c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f770     14 4E 05 A1 |  if_e	add	fp, #20
0f774     A7 22 02 AB |  if_e	rdlong	local03, fp
0f778     14 4E 85 A1 |  if_e	sub	fp, #20
0f77c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f780     34 00 90 5D |  if_ne	jmp	#LR__1197
0f784     00 1E 06 F6 | 	mov	local01, #0
0f788     A7 12 02 FB | 	rdlong	arg01, fp
0f78c     D0 BC B0 FD | 	call	#__system___float_fromuns
0f790     FD 12 02 F6 | 	mov	arg01, result1
0f794     0C 4E 05 F1 | 	add	fp, #12
0f798     A7 14 02 FB | 	rdlong	arg02, fp
0f79c     0C 4E 85 F1 | 	sub	fp, #12
0f7a0     01 16 66 F6 | 	neg	arg03, #1
0f7a4     F0 C4 B0 FD | 	call	#__system___float_cmp
0f7a8     01 FA 55 F2 | 	cmps	result1, #1 wc
0f7ac     00 1E 26 36 |  if_ae	not	local01, #0
0f7b0     A7 1E 62 FC | 	wrlong	local01, fp
0f7b4     A0 01 90 FD | 	jmp	#LR__1203
0f7b8                 | LR__1197
0f7b8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
0f7b8     08 4E 05 F1 | 	add	fp, #8
0f7bc     A7 1E 02 FB | 	rdlong	local01, fp
0f7c0     08 4E 85 F1 | 	sub	fp, #8
0f7c4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f7c8     14 4E 05 A1 |  if_e	add	fp, #20
0f7cc     A7 22 02 AB |  if_e	rdlong	local03, fp
0f7d0     14 4E 85 A1 |  if_e	sub	fp, #20
0f7d4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f7d8     24 00 90 5D |  if_ne	jmp	#LR__1198
0f7dc     00 1E 06 F6 | 	mov	local01, #0
0f7e0     A7 20 02 FB | 	rdlong	local02, fp
0f7e4     0C 4E 05 F1 | 	add	fp, #12
0f7e8     A7 22 02 FB | 	rdlong	local03, fp
0f7ec     0C 4E 85 F1 | 	sub	fp, #12
0f7f0     11 21 5A F2 | 	cmps	local02, local03 wcz
0f7f4     01 1E 66 16 |  if_a	neg	local01, #1
0f7f8     A7 1E 62 FC | 	wrlong	local01, fp
0f7fc     58 01 90 FD | 	jmp	#LR__1203
0f800                 | LR__1198
0f800                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
0f800     08 4E 05 F1 | 	add	fp, #8
0f804     A7 1E 02 FB | 	rdlong	local01, fp
0f808     08 4E 85 F1 | 	sub	fp, #8
0f80c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f810     14 4E 05 A1 |  if_e	add	fp, #20
0f814     A7 22 02 AB |  if_e	rdlong	local03, fp
0f818     14 4E 85 A1 |  if_e	sub	fp, #20
0f81c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f820     24 00 90 5D |  if_ne	jmp	#LR__1199
0f824     00 1E 06 F6 | 	mov	local01, #0
0f828     A7 20 02 FB | 	rdlong	local02, fp
0f82c     0C 4E 05 F1 | 	add	fp, #12
0f830     A7 22 02 FB | 	rdlong	local03, fp
0f834     0C 4E 85 F1 | 	sub	fp, #12
0f838     11 21 1A F2 | 	cmp	local02, local03 wcz
0f83c     01 1E 66 16 |  if_a	neg	local01, #1
0f840     A7 1E 62 FC | 	wrlong	local01, fp
0f844     10 01 90 FD | 	jmp	#LR__1203
0f848                 | LR__1199
0f848                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
0f848     08 4E 05 F1 | 	add	fp, #8
0f84c     A7 1E 02 FB | 	rdlong	local01, fp
0f850     08 4E 85 F1 | 	sub	fp, #8
0f854     2B 1E 0E F2 | 	cmp	local01, #43 wz
0f858     14 4E 05 A1 |  if_e	add	fp, #20
0f85c     A7 22 02 AB |  if_e	rdlong	local03, fp
0f860     14 4E 85 A1 |  if_e	sub	fp, #20
0f864     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0f868     30 00 90 5D |  if_ne	jmp	#LR__1200
0f86c     00 1E 06 F6 | 	mov	local01, #0
0f870     A7 12 02 FB | 	rdlong	arg01, fp
0f874     A8 D1 BF FD | 	call	#_convertstring
0f878     FD 12 02 F6 | 	mov	arg01, result1
0f87c     0C 4E 05 F1 | 	add	fp, #12
0f880     A7 14 02 FB | 	rdlong	arg02, fp
0f884     0C 4E 85 F1 | 	sub	fp, #12
0f888     14 95 B0 FD | 	call	#__system___string_cmp
0f88c     01 FA 55 F2 | 	cmps	result1, #1 wc
0f890     00 1E 26 36 |  if_ae	not	local01, #0
0f894     A7 1E 62 FC | 	wrlong	local01, fp
0f898     BC 00 90 FD | 	jmp	#LR__1203
0f89c                 | LR__1200
0f89c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
0f89c     08 4E 05 F1 | 	add	fp, #8
0f8a0     A7 1E 02 FB | 	rdlong	local01, fp
0f8a4     08 4E 85 F1 | 	sub	fp, #8
0f8a8     1F 1E 0E F2 | 	cmp	local01, #31 wz
0f8ac     14 4E 05 A1 |  if_e	add	fp, #20
0f8b0     A7 22 02 AB |  if_e	rdlong	local03, fp
0f8b4     14 4E 85 A1 |  if_e	sub	fp, #20
0f8b8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0f8bc     34 00 90 5D |  if_ne	jmp	#LR__1201
0f8c0     00 1E 06 F6 | 	mov	local01, #0
0f8c4     A7 20 02 FB | 	rdlong	local02, fp
0f8c8     0C 4E 05 F1 | 	add	fp, #12
0f8cc     A7 12 02 FB | 	rdlong	arg01, fp
0f8d0     0C 4E 85 F1 | 	sub	fp, #12
0f8d4     48 D1 BF FD | 	call	#_convertstring
0f8d8     FD 14 02 F6 | 	mov	arg02, result1
0f8dc     10 13 02 F6 | 	mov	arg01, local02
0f8e0     BC 94 B0 FD | 	call	#__system___string_cmp
0f8e4     01 FA 55 F2 | 	cmps	result1, #1 wc
0f8e8     00 1E 26 36 |  if_ae	not	local01, #0
0f8ec     A7 1E 62 FC | 	wrlong	local01, fp
0f8f0     64 00 90 FD | 	jmp	#LR__1203
0f8f4                 | LR__1201
0f8f4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
0f8f4     08 4E 05 F1 | 	add	fp, #8
0f8f8     A7 1E 02 FB | 	rdlong	local01, fp
0f8fc     08 4E 85 F1 | 	sub	fp, #8
0f900     2B 1E 0E F2 | 	cmp	local01, #43 wz
0f904     14 4E 05 A1 |  if_e	add	fp, #20
0f908     A7 22 02 AB |  if_e	rdlong	local03, fp
0f90c     14 4E 85 A1 |  if_e	sub	fp, #20
0f910     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0f914     3C 00 90 5D |  if_ne	jmp	#LR__1202
0f918     00 1E 06 F6 | 	mov	local01, #0
0f91c     A7 12 02 FB | 	rdlong	arg01, fp
0f920     FC D0 BF FD | 	call	#_convertstring
0f924     FD 20 02 F6 | 	mov	local02, result1
0f928     0C 4E 05 F1 | 	add	fp, #12
0f92c     A7 12 02 FB | 	rdlong	arg01, fp
0f930     0C 4E 85 F1 | 	sub	fp, #12
0f934     E8 D0 BF FD | 	call	#_convertstring
0f938     FD 14 02 F6 | 	mov	arg02, result1
0f93c     10 13 02 F6 | 	mov	arg01, local02
0f940     5C 94 B0 FD | 	call	#__system___string_cmp
0f944     01 FA 55 F2 | 	cmps	result1, #1 wc
0f948     00 1E 26 36 |  if_ae	not	local01, #0
0f94c     A7 1E 62 FC | 	wrlong	local01, fp
0f950     04 00 90 FD | 	jmp	#LR__1203
0f954                 | LR__1202
0f954     A7 00 68 FC | 	wrlong	#0, fp
0f958                 | LR__1203
0f958     08 4E 05 F1 | 	add	fp, #8
0f95c     A7 38 68 FC | 	wrlong	#28, fp
0f960     08 4E 85 F1 | 	sub	fp, #8
0f964     A7 12 02 F6 | 	mov	arg01, fp
0f968     10 A0 BF FD | 	call	#_push
0f96c     A7 F0 03 F6 | 	mov	ptra, fp
0f970     B2 00 A0 FD | 	call	#popregs_
0f974                 | _do_gt_ret
0f974     2D 00 64 FD | 	ret
0f978                 | 
0f978                 | ' 
0f978                 | ' sub do_lt
0f978                 | _do_lt
0f978     05 4A 05 F6 | 	mov	COUNT_, #5
0f97c     A8 00 A0 FD | 	call	#pushregs_
0f980     18 F0 07 F1 | 	add	ptra, #24
0f984     5C 9F BF FD | 	call	#_pop
0f988     FD 1E 02 F6 | 	mov	local01, result1
0f98c     FE 20 02 F6 | 	mov	local02, result2
0f990     FF 22 02 F6 | 	mov	local03, result3
0f994     0C 4E 05 F1 | 	add	fp, #12
0f998     A7 1E 62 FC | 	wrlong	local01, fp
0f99c     04 4E 05 F1 | 	add	fp, #4
0f9a0     A7 20 62 FC | 	wrlong	local02, fp
0f9a4     04 4E 05 F1 | 	add	fp, #4
0f9a8     A7 22 62 FC | 	wrlong	local03, fp
0f9ac     14 4E 85 F1 | 	sub	fp, #20
0f9b0     30 9F BF FD | 	call	#_pop
0f9b4     FF 22 02 F6 | 	mov	local03, result3
0f9b8     A7 FA 61 FC | 	wrlong	result1, fp
0f9bc     04 4E 05 F1 | 	add	fp, #4
0f9c0     A7 FC 61 FC | 	wrlong	result2, fp
0f9c4     04 4E 05 F1 | 	add	fp, #4
0f9c8     A7 22 62 FC | 	wrlong	local03, fp
0f9cc                 | ' t2=pop()
0f9cc                 | ' t1=pop()
0f9cc                 | ' 
0f9cc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
0f9cc     08 4E 85 F1 | 	sub	fp, #8
0f9d0     1F 22 0E F2 | 	cmp	local03, #31 wz
0f9d4     14 4E 05 A1 |  if_e	add	fp, #20
0f9d8     A7 24 02 AB |  if_e	rdlong	local04, fp
0f9dc     14 4E 85 A1 |  if_e	sub	fp, #20
0f9e0     12 23 02 A6 |  if_e	mov	local03, local04
0f9e4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0f9e8     28 00 90 5D |  if_ne	jmp	#LR__1210
0f9ec     00 1E 06 F6 | 	mov	local01, #0
0f9f0     A7 12 02 FB | 	rdlong	arg01, fp
0f9f4     0C 4E 05 F1 | 	add	fp, #12
0f9f8     A7 14 02 FB | 	rdlong	arg02, fp
0f9fc     0C 4E 85 F1 | 	sub	fp, #12
0fa00     9C 93 B0 FD | 	call	#__system___string_cmp
0fa04     00 FA 55 F2 | 	cmps	result1, #0 wc
0fa08     00 1E 26 C6 |  if_b	not	local01, #0
0fa0c     A7 1E 62 FC | 	wrlong	local01, fp
0fa10     0C 04 90 FD | 	jmp	#LR__1223
0fa14                 | LR__1210
0fa14                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
0fa14     08 4E 05 F1 | 	add	fp, #8
0fa18     A7 1E 02 FB | 	rdlong	local01, fp
0fa1c     08 4E 85 F1 | 	sub	fp, #8
0fa20     1E 1E 0E F2 | 	cmp	local01, #30 wz
0fa24     14 4E 05 A1 |  if_e	add	fp, #20
0fa28     A7 24 02 AB |  if_e	rdlong	local04, fp
0fa2c     14 4E 85 A1 |  if_e	sub	fp, #20
0fa30     12 23 02 A6 |  if_e	mov	local03, local04
0fa34     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0fa38     2C 00 90 5D |  if_ne	jmp	#LR__1211
0fa3c     00 1E 06 F6 | 	mov	local01, #0
0fa40     A7 12 02 FB | 	rdlong	arg01, fp
0fa44     0C 4E 05 F1 | 	add	fp, #12
0fa48     A7 14 02 FB | 	rdlong	arg02, fp
0fa4c     0C 4E 85 F1 | 	sub	fp, #12
0fa50     01 16 06 F6 | 	mov	arg03, #1
0fa54     40 C2 B0 FD | 	call	#__system___float_cmp
0fa58     00 FA 55 F2 | 	cmps	result1, #0 wc
0fa5c     00 1E 26 C6 |  if_b	not	local01, #0
0fa60     A7 1E 62 FC | 	wrlong	local01, fp
0fa64     B8 03 90 FD | 	jmp	#LR__1223
0fa68                 | LR__1211
0fa68                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
0fa68     08 4E 05 F1 | 	add	fp, #8
0fa6c     A7 1E 02 FB | 	rdlong	local01, fp
0fa70     08 4E 85 F1 | 	sub	fp, #8
0fa74     1E 1E 0E F2 | 	cmp	local01, #30 wz
0fa78     14 4E 05 A1 |  if_e	add	fp, #20
0fa7c     A7 24 02 AB |  if_e	rdlong	local04, fp
0fa80     14 4E 85 A1 |  if_e	sub	fp, #20
0fa84     12 23 02 A6 |  if_e	mov	local03, local04
0fa88     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0fa8c     48 00 90 5D |  if_ne	jmp	#LR__1212
0fa90     00 1E 06 F6 | 	mov	local01, #0
0fa94     A7 20 02 FB | 	rdlong	local02, fp
0fa98     0C 4E 05 F1 | 	add	fp, #12
0fa9c     A7 12 02 FB | 	rdlong	arg01, fp
0faa0     0C 4E 85 F1 | 	sub	fp, #12
0faa4     09 13 52 F6 | 	abs	arg01, arg01 wc
0faa8     1F 26 C6 C9 |  if_b	decod	local05, #31
0faac     00 26 06 36 |  if_ae	mov	local05, #0
0fab0     AC B9 B0 FD | 	call	#__system___float_fromuns
0fab4     13 FB 61 F5 | 	xor	result1, local05
0fab8     FD 14 02 F6 | 	mov	arg02, result1
0fabc     10 13 02 F6 | 	mov	arg01, local02
0fac0     01 16 06 F6 | 	mov	arg03, #1
0fac4     D0 C1 B0 FD | 	call	#__system___float_cmp
0fac8     00 FA 55 F2 | 	cmps	result1, #0 wc
0facc     00 1E 26 C6 |  if_b	not	local01, #0
0fad0     A7 1E 62 FC | 	wrlong	local01, fp
0fad4     48 03 90 FD | 	jmp	#LR__1223
0fad8                 | LR__1212
0fad8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
0fad8     08 4E 05 F1 | 	add	fp, #8
0fadc     A7 1E 02 FB | 	rdlong	local01, fp
0fae0     08 4E 85 F1 | 	sub	fp, #8
0fae4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0fae8     14 4E 05 A1 |  if_e	add	fp, #20
0faec     A7 24 02 AB |  if_e	rdlong	local04, fp
0faf0     14 4E 85 A1 |  if_e	sub	fp, #20
0faf4     12 23 02 A6 |  if_e	mov	local03, local04
0faf8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0fafc     38 00 90 5D |  if_ne	jmp	#LR__1213
0fb00     00 1E 06 F6 | 	mov	local01, #0
0fb04     A7 20 02 FB | 	rdlong	local02, fp
0fb08     0C 4E 05 F1 | 	add	fp, #12
0fb0c     A7 12 02 FB | 	rdlong	arg01, fp
0fb10     0C 4E 85 F1 | 	sub	fp, #12
0fb14     48 B9 B0 FD | 	call	#__system___float_fromuns
0fb18     FD 14 02 F6 | 	mov	arg02, result1
0fb1c     10 13 02 F6 | 	mov	arg01, local02
0fb20     01 16 06 F6 | 	mov	arg03, #1
0fb24     70 C1 B0 FD | 	call	#__system___float_cmp
0fb28     00 FA 55 F2 | 	cmps	result1, #0 wc
0fb2c     00 1E 26 C6 |  if_b	not	local01, #0
0fb30     A7 1E 62 FC | 	wrlong	local01, fp
0fb34     E8 02 90 FD | 	jmp	#LR__1223
0fb38                 | LR__1213
0fb38                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
0fb38     08 4E 05 F1 | 	add	fp, #8
0fb3c     A7 1E 02 FB | 	rdlong	local01, fp
0fb40     08 4E 85 F1 | 	sub	fp, #8
0fb44     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fb48     14 4E 05 A1 |  if_e	add	fp, #20
0fb4c     A7 24 02 AB |  if_e	rdlong	local04, fp
0fb50     14 4E 85 A1 |  if_e	sub	fp, #20
0fb54     12 23 02 A6 |  if_e	mov	local03, local04
0fb58     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0fb5c     44 00 90 5D |  if_ne	jmp	#LR__1214
0fb60     00 1E 06 F6 | 	mov	local01, #0
0fb64     A7 12 02 FB | 	rdlong	arg01, fp
0fb68     09 13 52 F6 | 	abs	arg01, arg01 wc
0fb6c     1F 26 C6 C9 |  if_b	decod	local05, #31
0fb70     00 26 06 36 |  if_ae	mov	local05, #0
0fb74     E8 B8 B0 FD | 	call	#__system___float_fromuns
0fb78     13 FB 61 F5 | 	xor	result1, local05
0fb7c     FD 12 02 F6 | 	mov	arg01, result1
0fb80     0C 4E 05 F1 | 	add	fp, #12
0fb84     A7 14 02 FB | 	rdlong	arg02, fp
0fb88     0C 4E 85 F1 | 	sub	fp, #12
0fb8c     01 16 06 F6 | 	mov	arg03, #1
0fb90     04 C1 B0 FD | 	call	#__system___float_cmp
0fb94     00 FA 55 F2 | 	cmps	result1, #0 wc
0fb98     00 1E 26 C6 |  if_b	not	local01, #0
0fb9c     A7 1E 62 FC | 	wrlong	local01, fp
0fba0     7C 02 90 FD | 	jmp	#LR__1223
0fba4                 | LR__1214
0fba4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
0fba4     08 4E 05 F1 | 	add	fp, #8
0fba8     A7 1E 02 FB | 	rdlong	local01, fp
0fbac     08 4E 85 F1 | 	sub	fp, #8
0fbb0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fbb4     14 4E 05 A1 |  if_e	add	fp, #20
0fbb8     A7 24 02 AB |  if_e	rdlong	local04, fp
0fbbc     14 4E 85 A1 |  if_e	sub	fp, #20
0fbc0     12 23 02 A6 |  if_e	mov	local03, local04
0fbc4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0fbc8     20 00 90 5D |  if_ne	jmp	#LR__1215
0fbcc     A7 20 02 FB | 	rdlong	local02, fp
0fbd0     0C 4E 05 F1 | 	add	fp, #12
0fbd4     A7 22 02 FB | 	rdlong	local03, fp
0fbd8     0C 4E 85 F1 | 	sub	fp, #12
0fbdc     11 21 52 F2 | 	cmps	local02, local03 wc
0fbe0     0F 1F A2 F1 | 	subx	local01, local01
0fbe4     A7 1E 62 FC | 	wrlong	local01, fp
0fbe8     34 02 90 FD | 	jmp	#LR__1223
0fbec                 | LR__1215
0fbec                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
0fbec     08 4E 05 F1 | 	add	fp, #8
0fbf0     A7 1E 02 FB | 	rdlong	local01, fp
0fbf4     08 4E 85 F1 | 	sub	fp, #8
0fbf8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fbfc     14 4E 05 A1 |  if_e	add	fp, #20
0fc00     A7 24 02 AB |  if_e	rdlong	local04, fp
0fc04     14 4E 85 A1 |  if_e	sub	fp, #20
0fc08     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0fc0c     20 00 90 5D |  if_ne	jmp	#LR__1216
0fc10     A7 20 02 FB | 	rdlong	local02, fp
0fc14     0C 4E 05 F1 | 	add	fp, #12
0fc18     A7 22 02 FB | 	rdlong	local03, fp
0fc1c     0C 4E 85 F1 | 	sub	fp, #12
0fc20     11 21 52 F2 | 	cmps	local02, local03 wc
0fc24     0F 1F A2 F1 | 	subx	local01, local01
0fc28     A7 1E 62 FC | 	wrlong	local01, fp
0fc2c     F0 01 90 FD | 	jmp	#LR__1223
0fc30                 | LR__1216
0fc30                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
0fc30     08 4E 05 F1 | 	add	fp, #8
0fc34     A7 1E 02 FB | 	rdlong	local01, fp
0fc38     08 4E 85 F1 | 	sub	fp, #8
0fc3c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0fc40     14 4E 05 A1 |  if_e	add	fp, #20
0fc44     A7 22 02 AB |  if_e	rdlong	local03, fp
0fc48     14 4E 85 A1 |  if_e	sub	fp, #20
0fc4c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0fc50     34 00 90 5D |  if_ne	jmp	#LR__1217
0fc54     00 1E 06 F6 | 	mov	local01, #0
0fc58     A7 12 02 FB | 	rdlong	arg01, fp
0fc5c     00 B8 B0 FD | 	call	#__system___float_fromuns
0fc60     FD 12 02 F6 | 	mov	arg01, result1
0fc64     0C 4E 05 F1 | 	add	fp, #12
0fc68     A7 14 02 FB | 	rdlong	arg02, fp
0fc6c     0C 4E 85 F1 | 	sub	fp, #12
0fc70     01 16 06 F6 | 	mov	arg03, #1
0fc74     20 C0 B0 FD | 	call	#__system___float_cmp
0fc78     00 FA 55 F2 | 	cmps	result1, #0 wc
0fc7c     00 1E 26 C6 |  if_b	not	local01, #0
0fc80     A7 1E 62 FC | 	wrlong	local01, fp
0fc84     98 01 90 FD | 	jmp	#LR__1223
0fc88                 | LR__1217
0fc88                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
0fc88     08 4E 05 F1 | 	add	fp, #8
0fc8c     A7 1E 02 FB | 	rdlong	local01, fp
0fc90     08 4E 85 F1 | 	sub	fp, #8
0fc94     1D 1E 0E F2 | 	cmp	local01, #29 wz
0fc98     14 4E 05 A1 |  if_e	add	fp, #20
0fc9c     A7 22 02 AB |  if_e	rdlong	local03, fp
0fca0     14 4E 85 A1 |  if_e	sub	fp, #20
0fca4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0fca8     20 00 90 5D |  if_ne	jmp	#LR__1218
0fcac     A7 20 02 FB | 	rdlong	local02, fp
0fcb0     0C 4E 05 F1 | 	add	fp, #12
0fcb4     A7 22 02 FB | 	rdlong	local03, fp
0fcb8     0C 4E 85 F1 | 	sub	fp, #12
0fcbc     11 21 52 F2 | 	cmps	local02, local03 wc
0fcc0     0F 1F A2 F1 | 	subx	local01, local01
0fcc4     A7 1E 62 FC | 	wrlong	local01, fp
0fcc8     54 01 90 FD | 	jmp	#LR__1223
0fccc                 | LR__1218
0fccc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
0fccc     08 4E 05 F1 | 	add	fp, #8
0fcd0     A7 1E 02 FB | 	rdlong	local01, fp
0fcd4     08 4E 85 F1 | 	sub	fp, #8
0fcd8     1D 1E 0E F2 | 	cmp	local01, #29 wz
0fcdc     14 4E 05 A1 |  if_e	add	fp, #20
0fce0     A7 22 02 AB |  if_e	rdlong	local03, fp
0fce4     14 4E 85 A1 |  if_e	sub	fp, #20
0fce8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0fcec     20 00 90 5D |  if_ne	jmp	#LR__1219
0fcf0     A7 20 02 FB | 	rdlong	local02, fp
0fcf4     0C 4E 05 F1 | 	add	fp, #12
0fcf8     A7 22 02 FB | 	rdlong	local03, fp
0fcfc     0C 4E 85 F1 | 	sub	fp, #12
0fd00     11 21 12 F2 | 	cmp	local02, local03 wc
0fd04     0F 1F A2 F1 | 	subx	local01, local01
0fd08     A7 1E 62 FC | 	wrlong	local01, fp
0fd0c     10 01 90 FD | 	jmp	#LR__1223
0fd10                 | LR__1219
0fd10                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
0fd10     08 4E 05 F1 | 	add	fp, #8
0fd14     A7 1E 02 FB | 	rdlong	local01, fp
0fd18     08 4E 85 F1 | 	sub	fp, #8
0fd1c     2B 1E 0E F2 | 	cmp	local01, #43 wz
0fd20     14 4E 05 A1 |  if_e	add	fp, #20
0fd24     A7 22 02 AB |  if_e	rdlong	local03, fp
0fd28     14 4E 85 A1 |  if_e	sub	fp, #20
0fd2c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0fd30     30 00 90 5D |  if_ne	jmp	#LR__1220
0fd34     00 1E 06 F6 | 	mov	local01, #0
0fd38     A7 12 02 FB | 	rdlong	arg01, fp
0fd3c     E0 CC BF FD | 	call	#_convertstring
0fd40     FD 12 02 F6 | 	mov	arg01, result1
0fd44     0C 4E 05 F1 | 	add	fp, #12
0fd48     A7 14 02 FB | 	rdlong	arg02, fp
0fd4c     0C 4E 85 F1 | 	sub	fp, #12
0fd50     4C 90 B0 FD | 	call	#__system___string_cmp
0fd54     00 FA 55 F2 | 	cmps	result1, #0 wc
0fd58     00 1E 26 C6 |  if_b	not	local01, #0
0fd5c     A7 1E 62 FC | 	wrlong	local01, fp
0fd60     BC 00 90 FD | 	jmp	#LR__1223
0fd64                 | LR__1220
0fd64                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
0fd64     08 4E 05 F1 | 	add	fp, #8
0fd68     A7 1E 02 FB | 	rdlong	local01, fp
0fd6c     08 4E 85 F1 | 	sub	fp, #8
0fd70     1F 1E 0E F2 | 	cmp	local01, #31 wz
0fd74     14 4E 05 A1 |  if_e	add	fp, #20
0fd78     A7 22 02 AB |  if_e	rdlong	local03, fp
0fd7c     14 4E 85 A1 |  if_e	sub	fp, #20
0fd80     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0fd84     34 00 90 5D |  if_ne	jmp	#LR__1221
0fd88     00 1E 06 F6 | 	mov	local01, #0
0fd8c     A7 20 02 FB | 	rdlong	local02, fp
0fd90     0C 4E 05 F1 | 	add	fp, #12
0fd94     A7 12 02 FB | 	rdlong	arg01, fp
0fd98     0C 4E 85 F1 | 	sub	fp, #12
0fd9c     80 CC BF FD | 	call	#_convertstring
0fda0     FD 14 02 F6 | 	mov	arg02, result1
0fda4     10 13 02 F6 | 	mov	arg01, local02
0fda8     F4 8F B0 FD | 	call	#__system___string_cmp
0fdac     00 FA 55 F2 | 	cmps	result1, #0 wc
0fdb0     00 1E 26 C6 |  if_b	not	local01, #0
0fdb4     A7 1E 62 FC | 	wrlong	local01, fp
0fdb8     64 00 90 FD | 	jmp	#LR__1223
0fdbc                 | LR__1221
0fdbc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
0fdbc     08 4E 05 F1 | 	add	fp, #8
0fdc0     A7 1E 02 FB | 	rdlong	local01, fp
0fdc4     08 4E 85 F1 | 	sub	fp, #8
0fdc8     2B 1E 0E F2 | 	cmp	local01, #43 wz
0fdcc     14 4E 05 A1 |  if_e	add	fp, #20
0fdd0     A7 22 02 AB |  if_e	rdlong	local03, fp
0fdd4     14 4E 85 A1 |  if_e	sub	fp, #20
0fdd8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0fddc     3C 00 90 5D |  if_ne	jmp	#LR__1222
0fde0     00 1E 06 F6 | 	mov	local01, #0
0fde4     A7 12 02 FB | 	rdlong	arg01, fp
0fde8     34 CC BF FD | 	call	#_convertstring
0fdec     FD 20 02 F6 | 	mov	local02, result1
0fdf0     0C 4E 05 F1 | 	add	fp, #12
0fdf4     A7 12 02 FB | 	rdlong	arg01, fp
0fdf8     0C 4E 85 F1 | 	sub	fp, #12
0fdfc     20 CC BF FD | 	call	#_convertstring
0fe00     FD 14 02 F6 | 	mov	arg02, result1
0fe04     10 13 02 F6 | 	mov	arg01, local02
0fe08     94 8F B0 FD | 	call	#__system___string_cmp
0fe0c     00 FA 55 F2 | 	cmps	result1, #0 wc
0fe10     00 1E 26 C6 |  if_b	not	local01, #0
0fe14     A7 1E 62 FC | 	wrlong	local01, fp
0fe18     04 00 90 FD | 	jmp	#LR__1223
0fe1c                 | LR__1222
0fe1c     A7 00 68 FC | 	wrlong	#0, fp
0fe20                 | LR__1223
0fe20     08 4E 05 F1 | 	add	fp, #8
0fe24     A7 38 68 FC | 	wrlong	#28, fp
0fe28     08 4E 85 F1 | 	sub	fp, #8
0fe2c     A7 12 02 F6 | 	mov	arg01, fp
0fe30     48 9B BF FD | 	call	#_push
0fe34     A7 F0 03 F6 | 	mov	ptra, fp
0fe38     B2 00 A0 FD | 	call	#popregs_
0fe3c                 | _do_lt_ret
0fe3c     2D 00 64 FD | 	ret
0fe40                 | 
0fe40                 | ' 
0fe40                 | ' sub do_ge
0fe40                 | _do_ge
0fe40     05 4A 05 F6 | 	mov	COUNT_, #5
0fe44     A8 00 A0 FD | 	call	#pushregs_
0fe48     18 F0 07 F1 | 	add	ptra, #24
0fe4c     94 9A BF FD | 	call	#_pop
0fe50     FD 1E 02 F6 | 	mov	local01, result1
0fe54     FE 20 02 F6 | 	mov	local02, result2
0fe58     FF 22 02 F6 | 	mov	local03, result3
0fe5c     0C 4E 05 F1 | 	add	fp, #12
0fe60     A7 1E 62 FC | 	wrlong	local01, fp
0fe64     04 4E 05 F1 | 	add	fp, #4
0fe68     A7 20 62 FC | 	wrlong	local02, fp
0fe6c     04 4E 05 F1 | 	add	fp, #4
0fe70     A7 22 62 FC | 	wrlong	local03, fp
0fe74     14 4E 85 F1 | 	sub	fp, #20
0fe78     68 9A BF FD | 	call	#_pop
0fe7c     FF 22 02 F6 | 	mov	local03, result3
0fe80     A7 FA 61 FC | 	wrlong	result1, fp
0fe84     04 4E 05 F1 | 	add	fp, #4
0fe88     A7 FC 61 FC | 	wrlong	result2, fp
0fe8c     04 4E 05 F1 | 	add	fp, #4
0fe90     A7 22 62 FC | 	wrlong	local03, fp
0fe94                 | ' t2=pop()
0fe94                 | ' t1=pop()
0fe94                 | ' 
0fe94                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
0fe94     08 4E 85 F1 | 	sub	fp, #8
0fe98     1F 22 0E F2 | 	cmp	local03, #31 wz
0fe9c     14 4E 05 A1 |  if_e	add	fp, #20
0fea0     A7 24 02 AB |  if_e	rdlong	local04, fp
0fea4     14 4E 85 A1 |  if_e	sub	fp, #20
0fea8     12 23 02 A6 |  if_e	mov	local03, local04
0feac     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0feb0     28 00 90 5D |  if_ne	jmp	#LR__1230
0feb4     00 1E 06 F6 | 	mov	local01, #0
0feb8     A7 12 02 FB | 	rdlong	arg01, fp
0febc     0C 4E 05 F1 | 	add	fp, #12
0fec0     A7 14 02 FB | 	rdlong	arg02, fp
0fec4     0C 4E 85 F1 | 	sub	fp, #12
0fec8     D4 8E B0 FD | 	call	#__system___string_cmp
0fecc     00 FA 55 F2 | 	cmps	result1, #0 wc
0fed0     00 1E 26 36 |  if_ae	not	local01, #0
0fed4     A7 1E 62 FC | 	wrlong	local01, fp
0fed8     1C 04 90 FD | 	jmp	#LR__1243
0fedc                 | LR__1230
0fedc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
0fedc     08 4E 05 F1 | 	add	fp, #8
0fee0     A7 1E 02 FB | 	rdlong	local01, fp
0fee4     08 4E 85 F1 | 	sub	fp, #8
0fee8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0feec     14 4E 05 A1 |  if_e	add	fp, #20
0fef0     A7 24 02 AB |  if_e	rdlong	local04, fp
0fef4     14 4E 85 A1 |  if_e	sub	fp, #20
0fef8     12 23 02 A6 |  if_e	mov	local03, local04
0fefc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0ff00     2C 00 90 5D |  if_ne	jmp	#LR__1231
0ff04     00 1E 06 F6 | 	mov	local01, #0
0ff08     A7 12 02 FB | 	rdlong	arg01, fp
0ff0c     0C 4E 05 F1 | 	add	fp, #12
0ff10     A7 14 02 FB | 	rdlong	arg02, fp
0ff14     0C 4E 85 F1 | 	sub	fp, #12
0ff18     01 16 66 F6 | 	neg	arg03, #1
0ff1c     78 BD B0 FD | 	call	#__system___float_cmp
0ff20     00 FA 55 F2 | 	cmps	result1, #0 wc
0ff24     00 1E 26 36 |  if_ae	not	local01, #0
0ff28     A7 1E 62 FC | 	wrlong	local01, fp
0ff2c     C8 03 90 FD | 	jmp	#LR__1243
0ff30                 | LR__1231
0ff30                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
0ff30     08 4E 05 F1 | 	add	fp, #8
0ff34     A7 1E 02 FB | 	rdlong	local01, fp
0ff38     08 4E 85 F1 | 	sub	fp, #8
0ff3c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0ff40     14 4E 05 A1 |  if_e	add	fp, #20
0ff44     A7 24 02 AB |  if_e	rdlong	local04, fp
0ff48     14 4E 85 A1 |  if_e	sub	fp, #20
0ff4c     12 23 02 A6 |  if_e	mov	local03, local04
0ff50     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0ff54     48 00 90 5D |  if_ne	jmp	#LR__1232
0ff58     00 1E 06 F6 | 	mov	local01, #0
0ff5c     A7 20 02 FB | 	rdlong	local02, fp
0ff60     0C 4E 05 F1 | 	add	fp, #12
0ff64     A7 12 02 FB | 	rdlong	arg01, fp
0ff68     0C 4E 85 F1 | 	sub	fp, #12
0ff6c     09 13 52 F6 | 	abs	arg01, arg01 wc
0ff70     1F 26 C6 C9 |  if_b	decod	local05, #31
0ff74     00 26 06 36 |  if_ae	mov	local05, #0
0ff78     E4 B4 B0 FD | 	call	#__system___float_fromuns
0ff7c     13 FB 61 F5 | 	xor	result1, local05
0ff80     FD 14 02 F6 | 	mov	arg02, result1
0ff84     10 13 02 F6 | 	mov	arg01, local02
0ff88     01 16 66 F6 | 	neg	arg03, #1
0ff8c     08 BD B0 FD | 	call	#__system___float_cmp
0ff90     00 FA 55 F2 | 	cmps	result1, #0 wc
0ff94     00 1E 26 36 |  if_ae	not	local01, #0
0ff98     A7 1E 62 FC | 	wrlong	local01, fp
0ff9c     58 03 90 FD | 	jmp	#LR__1243
0ffa0                 | LR__1232
0ffa0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
0ffa0     08 4E 05 F1 | 	add	fp, #8
0ffa4     A7 1E 02 FB | 	rdlong	local01, fp
0ffa8     08 4E 85 F1 | 	sub	fp, #8
0ffac     1E 1E 0E F2 | 	cmp	local01, #30 wz
0ffb0     14 4E 05 A1 |  if_e	add	fp, #20
0ffb4     A7 24 02 AB |  if_e	rdlong	local04, fp
0ffb8     14 4E 85 A1 |  if_e	sub	fp, #20
0ffbc     12 23 02 A6 |  if_e	mov	local03, local04
0ffc0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0ffc4     38 00 90 5D |  if_ne	jmp	#LR__1233
0ffc8     00 1E 06 F6 | 	mov	local01, #0
0ffcc     A7 20 02 FB | 	rdlong	local02, fp
0ffd0     0C 4E 05 F1 | 	add	fp, #12
0ffd4     A7 12 02 FB | 	rdlong	arg01, fp
0ffd8     0C 4E 85 F1 | 	sub	fp, #12
0ffdc     80 B4 B0 FD | 	call	#__system___float_fromuns
0ffe0     FD 14 02 F6 | 	mov	arg02, result1
0ffe4     10 13 02 F6 | 	mov	arg01, local02
0ffe8     01 16 66 F6 | 	neg	arg03, #1
0ffec     A8 BC B0 FD | 	call	#__system___float_cmp
0fff0     00 FA 55 F2 | 	cmps	result1, #0 wc
0fff4     00 1E 26 36 |  if_ae	not	local01, #0
0fff8     A7 1E 62 FC | 	wrlong	local01, fp
0fffc     F8 02 90 FD | 	jmp	#LR__1243
10000                 | LR__1233
10000                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
10000     08 4E 05 F1 | 	add	fp, #8
10004     A7 1E 02 FB | 	rdlong	local01, fp
10008     08 4E 85 F1 | 	sub	fp, #8
1000c     1C 1E 0E F2 | 	cmp	local01, #28 wz
10010     14 4E 05 A1 |  if_e	add	fp, #20
10014     A7 24 02 AB |  if_e	rdlong	local04, fp
10018     14 4E 85 A1 |  if_e	sub	fp, #20
1001c     12 23 02 A6 |  if_e	mov	local03, local04
10020     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10024     44 00 90 5D |  if_ne	jmp	#LR__1234
10028     00 1E 06 F6 | 	mov	local01, #0
1002c     A7 12 02 FB | 	rdlong	arg01, fp
10030     09 13 52 F6 | 	abs	arg01, arg01 wc
10034     1F 26 C6 C9 |  if_b	decod	local05, #31
10038     00 26 06 36 |  if_ae	mov	local05, #0
1003c     20 B4 B0 FD | 	call	#__system___float_fromuns
10040     13 FB 61 F5 | 	xor	result1, local05
10044     FD 12 02 F6 | 	mov	arg01, result1
10048     0C 4E 05 F1 | 	add	fp, #12
1004c     A7 14 02 FB | 	rdlong	arg02, fp
10050     0C 4E 85 F1 | 	sub	fp, #12
10054     01 16 66 F6 | 	neg	arg03, #1
10058     3C BC B0 FD | 	call	#__system___float_cmp
1005c     00 FA 55 F2 | 	cmps	result1, #0 wc
10060     00 1E 26 36 |  if_ae	not	local01, #0
10064     A7 1E 62 FC | 	wrlong	local01, fp
10068     8C 02 90 FD | 	jmp	#LR__1243
1006c                 | LR__1234
1006c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
1006c     08 4E 05 F1 | 	add	fp, #8
10070     A7 1E 02 FB | 	rdlong	local01, fp
10074     08 4E 85 F1 | 	sub	fp, #8
10078     1C 1E 0E F2 | 	cmp	local01, #28 wz
1007c     14 4E 05 A1 |  if_e	add	fp, #20
10080     A7 24 02 AB |  if_e	rdlong	local04, fp
10084     14 4E 85 A1 |  if_e	sub	fp, #20
10088     12 23 02 A6 |  if_e	mov	local03, local04
1008c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10090     24 00 90 5D |  if_ne	jmp	#LR__1235
10094     00 1E 06 F6 | 	mov	local01, #0
10098     A7 20 02 FB | 	rdlong	local02, fp
1009c     0C 4E 05 F1 | 	add	fp, #12
100a0     A7 22 02 FB | 	rdlong	local03, fp
100a4     0C 4E 85 F1 | 	sub	fp, #12
100a8     11 21 52 F2 | 	cmps	local02, local03 wc
100ac     01 1E 66 36 |  if_ae	neg	local01, #1
100b0     A7 1E 62 FC | 	wrlong	local01, fp
100b4     40 02 90 FD | 	jmp	#LR__1243
100b8                 | LR__1235
100b8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
100b8     08 4E 05 F1 | 	add	fp, #8
100bc     A7 1E 02 FB | 	rdlong	local01, fp
100c0     08 4E 85 F1 | 	sub	fp, #8
100c4     1C 1E 0E F2 | 	cmp	local01, #28 wz
100c8     14 4E 05 A1 |  if_e	add	fp, #20
100cc     A7 24 02 AB |  if_e	rdlong	local04, fp
100d0     14 4E 85 A1 |  if_e	sub	fp, #20
100d4     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
100d8     24 00 90 5D |  if_ne	jmp	#LR__1236
100dc     00 1E 06 F6 | 	mov	local01, #0
100e0     A7 20 02 FB | 	rdlong	local02, fp
100e4     0C 4E 05 F1 | 	add	fp, #12
100e8     A7 22 02 FB | 	rdlong	local03, fp
100ec     0C 4E 85 F1 | 	sub	fp, #12
100f0     11 21 52 F2 | 	cmps	local02, local03 wc
100f4     01 1E 66 36 |  if_ae	neg	local01, #1
100f8     A7 1E 62 FC | 	wrlong	local01, fp
100fc     F8 01 90 FD | 	jmp	#LR__1243
10100                 | LR__1236
10100                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
10100     08 4E 05 F1 | 	add	fp, #8
10104     A7 1E 02 FB | 	rdlong	local01, fp
10108     08 4E 85 F1 | 	sub	fp, #8
1010c     1D 1E 0E F2 | 	cmp	local01, #29 wz
10110     14 4E 05 A1 |  if_e	add	fp, #20
10114     A7 22 02 AB |  if_e	rdlong	local03, fp
10118     14 4E 85 A1 |  if_e	sub	fp, #20
1011c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10120     34 00 90 5D |  if_ne	jmp	#LR__1237
10124     00 1E 06 F6 | 	mov	local01, #0
10128     A7 12 02 FB | 	rdlong	arg01, fp
1012c     30 B3 B0 FD | 	call	#__system___float_fromuns
10130     FD 12 02 F6 | 	mov	arg01, result1
10134     0C 4E 05 F1 | 	add	fp, #12
10138     A7 14 02 FB | 	rdlong	arg02, fp
1013c     0C 4E 85 F1 | 	sub	fp, #12
10140     01 16 66 F6 | 	neg	arg03, #1
10144     50 BB B0 FD | 	call	#__system___float_cmp
10148     00 FA 55 F2 | 	cmps	result1, #0 wc
1014c     00 1E 26 36 |  if_ae	not	local01, #0
10150     A7 1E 62 FC | 	wrlong	local01, fp
10154     A0 01 90 FD | 	jmp	#LR__1243
10158                 | LR__1237
10158                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
10158     08 4E 05 F1 | 	add	fp, #8
1015c     A7 1E 02 FB | 	rdlong	local01, fp
10160     08 4E 85 F1 | 	sub	fp, #8
10164     1D 1E 0E F2 | 	cmp	local01, #29 wz
10168     14 4E 05 A1 |  if_e	add	fp, #20
1016c     A7 22 02 AB |  if_e	rdlong	local03, fp
10170     14 4E 85 A1 |  if_e	sub	fp, #20
10174     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10178     24 00 90 5D |  if_ne	jmp	#LR__1238
1017c     00 1E 06 F6 | 	mov	local01, #0
10180     A7 20 02 FB | 	rdlong	local02, fp
10184     0C 4E 05 F1 | 	add	fp, #12
10188     A7 22 02 FB | 	rdlong	local03, fp
1018c     0C 4E 85 F1 | 	sub	fp, #12
10190     11 21 52 F2 | 	cmps	local02, local03 wc
10194     01 1E 66 36 |  if_ae	neg	local01, #1
10198     A7 1E 62 FC | 	wrlong	local01, fp
1019c     58 01 90 FD | 	jmp	#LR__1243
101a0                 | LR__1238
101a0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
101a0     08 4E 05 F1 | 	add	fp, #8
101a4     A7 1E 02 FB | 	rdlong	local01, fp
101a8     08 4E 85 F1 | 	sub	fp, #8
101ac     1D 1E 0E F2 | 	cmp	local01, #29 wz
101b0     14 4E 05 A1 |  if_e	add	fp, #20
101b4     A7 22 02 AB |  if_e	rdlong	local03, fp
101b8     14 4E 85 A1 |  if_e	sub	fp, #20
101bc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
101c0     24 00 90 5D |  if_ne	jmp	#LR__1239
101c4     00 1E 06 F6 | 	mov	local01, #0
101c8     A7 20 02 FB | 	rdlong	local02, fp
101cc     0C 4E 05 F1 | 	add	fp, #12
101d0     A7 22 02 FB | 	rdlong	local03, fp
101d4     0C 4E 85 F1 | 	sub	fp, #12
101d8     11 21 12 F2 | 	cmp	local02, local03 wc
101dc     01 1E 66 36 |  if_ae	neg	local01, #1
101e0     A7 1E 62 FC | 	wrlong	local01, fp
101e4     10 01 90 FD | 	jmp	#LR__1243
101e8                 | LR__1239
101e8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
101e8     08 4E 05 F1 | 	add	fp, #8
101ec     A7 1E 02 FB | 	rdlong	local01, fp
101f0     08 4E 85 F1 | 	sub	fp, #8
101f4     2B 1E 0E F2 | 	cmp	local01, #43 wz
101f8     14 4E 05 A1 |  if_e	add	fp, #20
101fc     A7 22 02 AB |  if_e	rdlong	local03, fp
10200     14 4E 85 A1 |  if_e	sub	fp, #20
10204     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
10208     30 00 90 5D |  if_ne	jmp	#LR__1240
1020c     00 1E 06 F6 | 	mov	local01, #0
10210     A7 12 02 FB | 	rdlong	arg01, fp
10214     08 C8 BF FD | 	call	#_convertstring
10218     FD 12 02 F6 | 	mov	arg01, result1
1021c     0C 4E 05 F1 | 	add	fp, #12
10220     A7 14 02 FB | 	rdlong	arg02, fp
10224     0C 4E 85 F1 | 	sub	fp, #12
10228     74 8B B0 FD | 	call	#__system___string_cmp
1022c     00 FA 55 F2 | 	cmps	result1, #0 wc
10230     00 1E 26 36 |  if_ae	not	local01, #0
10234     A7 1E 62 FC | 	wrlong	local01, fp
10238     BC 00 90 FD | 	jmp	#LR__1243
1023c                 | LR__1240
1023c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
1023c     08 4E 05 F1 | 	add	fp, #8
10240     A7 1E 02 FB | 	rdlong	local01, fp
10244     08 4E 85 F1 | 	sub	fp, #8
10248     1F 1E 0E F2 | 	cmp	local01, #31 wz
1024c     14 4E 05 A1 |  if_e	add	fp, #20
10250     A7 22 02 AB |  if_e	rdlong	local03, fp
10254     14 4E 85 A1 |  if_e	sub	fp, #20
10258     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1025c     34 00 90 5D |  if_ne	jmp	#LR__1241
10260     00 1E 06 F6 | 	mov	local01, #0
10264     A7 20 02 FB | 	rdlong	local02, fp
10268     0C 4E 05 F1 | 	add	fp, #12
1026c     A7 12 02 FB | 	rdlong	arg01, fp
10270     0C 4E 85 F1 | 	sub	fp, #12
10274     A8 C7 BF FD | 	call	#_convertstring
10278     FD 14 02 F6 | 	mov	arg02, result1
1027c     10 13 02 F6 | 	mov	arg01, local02
10280     1C 8B B0 FD | 	call	#__system___string_cmp
10284     00 FA 55 F2 | 	cmps	result1, #0 wc
10288     00 1E 26 36 |  if_ae	not	local01, #0
1028c     A7 1E 62 FC | 	wrlong	local01, fp
10290     64 00 90 FD | 	jmp	#LR__1243
10294                 | LR__1241
10294                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
10294     08 4E 05 F1 | 	add	fp, #8
10298     A7 1E 02 FB | 	rdlong	local01, fp
1029c     08 4E 85 F1 | 	sub	fp, #8
102a0     2B 1E 0E F2 | 	cmp	local01, #43 wz
102a4     14 4E 05 A1 |  if_e	add	fp, #20
102a8     A7 22 02 AB |  if_e	rdlong	local03, fp
102ac     14 4E 85 A1 |  if_e	sub	fp, #20
102b0     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
102b4     3C 00 90 5D |  if_ne	jmp	#LR__1242
102b8     00 1E 06 F6 | 	mov	local01, #0
102bc     A7 12 02 FB | 	rdlong	arg01, fp
102c0     5C C7 BF FD | 	call	#_convertstring
102c4     FD 20 02 F6 | 	mov	local02, result1
102c8     0C 4E 05 F1 | 	add	fp, #12
102cc     A7 12 02 FB | 	rdlong	arg01, fp
102d0     0C 4E 85 F1 | 	sub	fp, #12
102d4     48 C7 BF FD | 	call	#_convertstring
102d8     FD 14 02 F6 | 	mov	arg02, result1
102dc     10 13 02 F6 | 	mov	arg01, local02
102e0     BC 8A B0 FD | 	call	#__system___string_cmp
102e4     00 FA 55 F2 | 	cmps	result1, #0 wc
102e8     00 1E 26 36 |  if_ae	not	local01, #0
102ec     A7 1E 62 FC | 	wrlong	local01, fp
102f0     04 00 90 FD | 	jmp	#LR__1243
102f4                 | LR__1242
102f4     A7 00 68 FC | 	wrlong	#0, fp
102f8                 | LR__1243
102f8     08 4E 05 F1 | 	add	fp, #8
102fc     A7 38 68 FC | 	wrlong	#28, fp
10300     08 4E 85 F1 | 	sub	fp, #8
10304     A7 12 02 F6 | 	mov	arg01, fp
10308     70 96 BF FD | 	call	#_push
1030c     A7 F0 03 F6 | 	mov	ptra, fp
10310     B2 00 A0 FD | 	call	#popregs_
10314                 | _do_ge_ret
10314     2D 00 64 FD | 	ret
10318                 | 
10318                 | ' 
10318                 | ' sub do_le
10318                 | _do_le
10318     05 4A 05 F6 | 	mov	COUNT_, #5
1031c     A8 00 A0 FD | 	call	#pushregs_
10320     18 F0 07 F1 | 	add	ptra, #24
10324     BC 95 BF FD | 	call	#_pop
10328     FD 1E 02 F6 | 	mov	local01, result1
1032c     FE 20 02 F6 | 	mov	local02, result2
10330     FF 22 02 F6 | 	mov	local03, result3
10334     0C 4E 05 F1 | 	add	fp, #12
10338     A7 1E 62 FC | 	wrlong	local01, fp
1033c     04 4E 05 F1 | 	add	fp, #4
10340     A7 20 62 FC | 	wrlong	local02, fp
10344     04 4E 05 F1 | 	add	fp, #4
10348     A7 22 62 FC | 	wrlong	local03, fp
1034c     14 4E 85 F1 | 	sub	fp, #20
10350     90 95 BF FD | 	call	#_pop
10354     FF 22 02 F6 | 	mov	local03, result3
10358     A7 FA 61 FC | 	wrlong	result1, fp
1035c     04 4E 05 F1 | 	add	fp, #4
10360     A7 FC 61 FC | 	wrlong	result2, fp
10364     04 4E 05 F1 | 	add	fp, #4
10368     A7 22 62 FC | 	wrlong	local03, fp
1036c                 | ' t2=pop()
1036c                 | ' t1=pop()
1036c                 | ' 
1036c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
1036c     08 4E 85 F1 | 	sub	fp, #8
10370     1F 22 0E F2 | 	cmp	local03, #31 wz
10374     14 4E 05 A1 |  if_e	add	fp, #20
10378     A7 24 02 AB |  if_e	rdlong	local04, fp
1037c     14 4E 85 A1 |  if_e	sub	fp, #20
10380     12 23 02 A6 |  if_e	mov	local03, local04
10384     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
10388     28 00 90 5D |  if_ne	jmp	#LR__1250
1038c     00 1E 06 F6 | 	mov	local01, #0
10390     A7 12 02 FB | 	rdlong	arg01, fp
10394     0C 4E 05 F1 | 	add	fp, #12
10398     A7 14 02 FB | 	rdlong	arg02, fp
1039c     0C 4E 85 F1 | 	sub	fp, #12
103a0     FC 89 B0 FD | 	call	#__system___string_cmp
103a4     01 FA 55 F2 | 	cmps	result1, #1 wc
103a8     00 1E 26 C6 |  if_b	not	local01, #0
103ac     A7 1E 62 FC | 	wrlong	local01, fp
103b0     1C 04 90 FD | 	jmp	#LR__1263
103b4                 | LR__1250
103b4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
103b4     08 4E 05 F1 | 	add	fp, #8
103b8     A7 1E 02 FB | 	rdlong	local01, fp
103bc     08 4E 85 F1 | 	sub	fp, #8
103c0     1E 1E 0E F2 | 	cmp	local01, #30 wz
103c4     14 4E 05 A1 |  if_e	add	fp, #20
103c8     A7 24 02 AB |  if_e	rdlong	local04, fp
103cc     14 4E 85 A1 |  if_e	sub	fp, #20
103d0     12 23 02 A6 |  if_e	mov	local03, local04
103d4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
103d8     2C 00 90 5D |  if_ne	jmp	#LR__1251
103dc     00 1E 06 F6 | 	mov	local01, #0
103e0     A7 12 02 FB | 	rdlong	arg01, fp
103e4     0C 4E 05 F1 | 	add	fp, #12
103e8     A7 14 02 FB | 	rdlong	arg02, fp
103ec     0C 4E 85 F1 | 	sub	fp, #12
103f0     01 16 06 F6 | 	mov	arg03, #1
103f4     A0 B8 B0 FD | 	call	#__system___float_cmp
103f8     01 FA 55 F2 | 	cmps	result1, #1 wc
103fc     00 1E 26 C6 |  if_b	not	local01, #0
10400     A7 1E 62 FC | 	wrlong	local01, fp
10404     C8 03 90 FD | 	jmp	#LR__1263
10408                 | LR__1251
10408                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
10408     08 4E 05 F1 | 	add	fp, #8
1040c     A7 1E 02 FB | 	rdlong	local01, fp
10410     08 4E 85 F1 | 	sub	fp, #8
10414     1E 1E 0E F2 | 	cmp	local01, #30 wz
10418     14 4E 05 A1 |  if_e	add	fp, #20
1041c     A7 24 02 AB |  if_e	rdlong	local04, fp
10420     14 4E 85 A1 |  if_e	sub	fp, #20
10424     12 23 02 A6 |  if_e	mov	local03, local04
10428     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1042c     48 00 90 5D |  if_ne	jmp	#LR__1252
10430     00 1E 06 F6 | 	mov	local01, #0
10434     A7 20 02 FB | 	rdlong	local02, fp
10438     0C 4E 05 F1 | 	add	fp, #12
1043c     A7 12 02 FB | 	rdlong	arg01, fp
10440     0C 4E 85 F1 | 	sub	fp, #12
10444     09 13 52 F6 | 	abs	arg01, arg01 wc
10448     1F 26 C6 C9 |  if_b	decod	local05, #31
1044c     00 26 06 36 |  if_ae	mov	local05, #0
10450     0C B0 B0 FD | 	call	#__system___float_fromuns
10454     13 FB 61 F5 | 	xor	result1, local05
10458     FD 14 02 F6 | 	mov	arg02, result1
1045c     10 13 02 F6 | 	mov	arg01, local02
10460     01 16 06 F6 | 	mov	arg03, #1
10464     30 B8 B0 FD | 	call	#__system___float_cmp
10468     01 FA 55 F2 | 	cmps	result1, #1 wc
1046c     00 1E 26 C6 |  if_b	not	local01, #0
10470     A7 1E 62 FC | 	wrlong	local01, fp
10474     58 03 90 FD | 	jmp	#LR__1263
10478                 | LR__1252
10478                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
10478     08 4E 05 F1 | 	add	fp, #8
1047c     A7 1E 02 FB | 	rdlong	local01, fp
10480     08 4E 85 F1 | 	sub	fp, #8
10484     1E 1E 0E F2 | 	cmp	local01, #30 wz
10488     14 4E 05 A1 |  if_e	add	fp, #20
1048c     A7 24 02 AB |  if_e	rdlong	local04, fp
10490     14 4E 85 A1 |  if_e	sub	fp, #20
10494     12 23 02 A6 |  if_e	mov	local03, local04
10498     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1049c     38 00 90 5D |  if_ne	jmp	#LR__1253
104a0     00 1E 06 F6 | 	mov	local01, #0
104a4     A7 20 02 FB | 	rdlong	local02, fp
104a8     0C 4E 05 F1 | 	add	fp, #12
104ac     A7 12 02 FB | 	rdlong	arg01, fp
104b0     0C 4E 85 F1 | 	sub	fp, #12
104b4     A8 AF B0 FD | 	call	#__system___float_fromuns
104b8     FD 14 02 F6 | 	mov	arg02, result1
104bc     10 13 02 F6 | 	mov	arg01, local02
104c0     01 16 06 F6 | 	mov	arg03, #1
104c4     D0 B7 B0 FD | 	call	#__system___float_cmp
104c8     01 FA 55 F2 | 	cmps	result1, #1 wc
104cc     00 1E 26 C6 |  if_b	not	local01, #0
104d0     A7 1E 62 FC | 	wrlong	local01, fp
104d4     F8 02 90 FD | 	jmp	#LR__1263
104d8                 | LR__1253
104d8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
104d8     08 4E 05 F1 | 	add	fp, #8
104dc     A7 1E 02 FB | 	rdlong	local01, fp
104e0     08 4E 85 F1 | 	sub	fp, #8
104e4     1C 1E 0E F2 | 	cmp	local01, #28 wz
104e8     14 4E 05 A1 |  if_e	add	fp, #20
104ec     A7 24 02 AB |  if_e	rdlong	local04, fp
104f0     14 4E 85 A1 |  if_e	sub	fp, #20
104f4     12 23 02 A6 |  if_e	mov	local03, local04
104f8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
104fc     44 00 90 5D |  if_ne	jmp	#LR__1254
10500     00 1E 06 F6 | 	mov	local01, #0
10504     A7 12 02 FB | 	rdlong	arg01, fp
10508     09 13 52 F6 | 	abs	arg01, arg01 wc
1050c     1F 26 C6 C9 |  if_b	decod	local05, #31
10510     00 26 06 36 |  if_ae	mov	local05, #0
10514     48 AF B0 FD | 	call	#__system___float_fromuns
10518     13 FB 61 F5 | 	xor	result1, local05
1051c     FD 12 02 F6 | 	mov	arg01, result1
10520     0C 4E 05 F1 | 	add	fp, #12
10524     A7 14 02 FB | 	rdlong	arg02, fp
10528     0C 4E 85 F1 | 	sub	fp, #12
1052c     01 16 06 F6 | 	mov	arg03, #1
10530     64 B7 B0 FD | 	call	#__system___float_cmp
10534     01 FA 55 F2 | 	cmps	result1, #1 wc
10538     00 1E 26 C6 |  if_b	not	local01, #0
1053c     A7 1E 62 FC | 	wrlong	local01, fp
10540     8C 02 90 FD | 	jmp	#LR__1263
10544                 | LR__1254
10544                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
10544     08 4E 05 F1 | 	add	fp, #8
10548     A7 1E 02 FB | 	rdlong	local01, fp
1054c     08 4E 85 F1 | 	sub	fp, #8
10550     1C 1E 0E F2 | 	cmp	local01, #28 wz
10554     14 4E 05 A1 |  if_e	add	fp, #20
10558     A7 24 02 AB |  if_e	rdlong	local04, fp
1055c     14 4E 85 A1 |  if_e	sub	fp, #20
10560     12 23 02 A6 |  if_e	mov	local03, local04
10564     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10568     24 00 90 5D |  if_ne	jmp	#LR__1255
1056c     00 1E 06 F6 | 	mov	local01, #0
10570     A7 20 02 FB | 	rdlong	local02, fp
10574     0C 4E 05 F1 | 	add	fp, #12
10578     A7 22 02 FB | 	rdlong	local03, fp
1057c     0C 4E 85 F1 | 	sub	fp, #12
10580     11 21 5A F2 | 	cmps	local02, local03 wcz
10584     01 1E 66 E6 |  if_be	neg	local01, #1
10588     A7 1E 62 FC | 	wrlong	local01, fp
1058c     40 02 90 FD | 	jmp	#LR__1263
10590                 | LR__1255
10590                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
10590     08 4E 05 F1 | 	add	fp, #8
10594     A7 1E 02 FB | 	rdlong	local01, fp
10598     08 4E 85 F1 | 	sub	fp, #8
1059c     1C 1E 0E F2 | 	cmp	local01, #28 wz
105a0     14 4E 05 A1 |  if_e	add	fp, #20
105a4     A7 24 02 AB |  if_e	rdlong	local04, fp
105a8     14 4E 85 A1 |  if_e	sub	fp, #20
105ac     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
105b0     24 00 90 5D |  if_ne	jmp	#LR__1256
105b4     00 1E 06 F6 | 	mov	local01, #0
105b8     A7 20 02 FB | 	rdlong	local02, fp
105bc     0C 4E 05 F1 | 	add	fp, #12
105c0     A7 22 02 FB | 	rdlong	local03, fp
105c4     0C 4E 85 F1 | 	sub	fp, #12
105c8     11 21 5A F2 | 	cmps	local02, local03 wcz
105cc     01 1E 66 E6 |  if_be	neg	local01, #1
105d0     A7 1E 62 FC | 	wrlong	local01, fp
105d4     F8 01 90 FD | 	jmp	#LR__1263
105d8                 | LR__1256
105d8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
105d8     08 4E 05 F1 | 	add	fp, #8
105dc     A7 1E 02 FB | 	rdlong	local01, fp
105e0     08 4E 85 F1 | 	sub	fp, #8
105e4     1D 1E 0E F2 | 	cmp	local01, #29 wz
105e8     14 4E 05 A1 |  if_e	add	fp, #20
105ec     A7 22 02 AB |  if_e	rdlong	local03, fp
105f0     14 4E 85 A1 |  if_e	sub	fp, #20
105f4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
105f8     34 00 90 5D |  if_ne	jmp	#LR__1257
105fc     00 1E 06 F6 | 	mov	local01, #0
10600     A7 12 02 FB | 	rdlong	arg01, fp
10604     58 AE B0 FD | 	call	#__system___float_fromuns
10608     FD 12 02 F6 | 	mov	arg01, result1
1060c     0C 4E 05 F1 | 	add	fp, #12
10610     A7 14 02 FB | 	rdlong	arg02, fp
10614     0C 4E 85 F1 | 	sub	fp, #12
10618     01 16 06 F6 | 	mov	arg03, #1
1061c     78 B6 B0 FD | 	call	#__system___float_cmp
10620     01 FA 55 F2 | 	cmps	result1, #1 wc
10624     00 1E 26 C6 |  if_b	not	local01, #0
10628     A7 1E 62 FC | 	wrlong	local01, fp
1062c     A0 01 90 FD | 	jmp	#LR__1263
10630                 | LR__1257
10630                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
10630     08 4E 05 F1 | 	add	fp, #8
10634     A7 1E 02 FB | 	rdlong	local01, fp
10638     08 4E 85 F1 | 	sub	fp, #8
1063c     1D 1E 0E F2 | 	cmp	local01, #29 wz
10640     14 4E 05 A1 |  if_e	add	fp, #20
10644     A7 22 02 AB |  if_e	rdlong	local03, fp
10648     14 4E 85 A1 |  if_e	sub	fp, #20
1064c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10650     24 00 90 5D |  if_ne	jmp	#LR__1258
10654     00 1E 06 F6 | 	mov	local01, #0
10658     A7 20 02 FB | 	rdlong	local02, fp
1065c     0C 4E 05 F1 | 	add	fp, #12
10660     A7 22 02 FB | 	rdlong	local03, fp
10664     0C 4E 85 F1 | 	sub	fp, #12
10668     11 21 5A F2 | 	cmps	local02, local03 wcz
1066c     01 1E 66 E6 |  if_be	neg	local01, #1
10670     A7 1E 62 FC | 	wrlong	local01, fp
10674     58 01 90 FD | 	jmp	#LR__1263
10678                 | LR__1258
10678                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
10678     08 4E 05 F1 | 	add	fp, #8
1067c     A7 1E 02 FB | 	rdlong	local01, fp
10680     08 4E 85 F1 | 	sub	fp, #8
10684     1D 1E 0E F2 | 	cmp	local01, #29 wz
10688     14 4E 05 A1 |  if_e	add	fp, #20
1068c     A7 22 02 AB |  if_e	rdlong	local03, fp
10690     14 4E 85 A1 |  if_e	sub	fp, #20
10694     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10698     24 00 90 5D |  if_ne	jmp	#LR__1259
1069c     00 1E 06 F6 | 	mov	local01, #0
106a0     A7 20 02 FB | 	rdlong	local02, fp
106a4     0C 4E 05 F1 | 	add	fp, #12
106a8     A7 22 02 FB | 	rdlong	local03, fp
106ac     0C 4E 85 F1 | 	sub	fp, #12
106b0     11 21 1A F2 | 	cmp	local02, local03 wcz
106b4     01 1E 66 E6 |  if_be	neg	local01, #1
106b8     A7 1E 62 FC | 	wrlong	local01, fp
106bc     10 01 90 FD | 	jmp	#LR__1263
106c0                 | LR__1259
106c0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
106c0     08 4E 05 F1 | 	add	fp, #8
106c4     A7 1E 02 FB | 	rdlong	local01, fp
106c8     08 4E 85 F1 | 	sub	fp, #8
106cc     2B 1E 0E F2 | 	cmp	local01, #43 wz
106d0     14 4E 05 A1 |  if_e	add	fp, #20
106d4     A7 22 02 AB |  if_e	rdlong	local03, fp
106d8     14 4E 85 A1 |  if_e	sub	fp, #20
106dc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
106e0     30 00 90 5D |  if_ne	jmp	#LR__1260
106e4     00 1E 06 F6 | 	mov	local01, #0
106e8     A7 12 02 FB | 	rdlong	arg01, fp
106ec     30 C3 BF FD | 	call	#_convertstring
106f0     FD 12 02 F6 | 	mov	arg01, result1
106f4     0C 4E 05 F1 | 	add	fp, #12
106f8     A7 14 02 FB | 	rdlong	arg02, fp
106fc     0C 4E 85 F1 | 	sub	fp, #12
10700     9C 86 B0 FD | 	call	#__system___string_cmp
10704     01 FA 55 F2 | 	cmps	result1, #1 wc
10708     00 1E 26 C6 |  if_b	not	local01, #0
1070c     A7 1E 62 FC | 	wrlong	local01, fp
10710     BC 00 90 FD | 	jmp	#LR__1263
10714                 | LR__1260
10714                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
10714     08 4E 05 F1 | 	add	fp, #8
10718     A7 1E 02 FB | 	rdlong	local01, fp
1071c     08 4E 85 F1 | 	sub	fp, #8
10720     1F 1E 0E F2 | 	cmp	local01, #31 wz
10724     14 4E 05 A1 |  if_e	add	fp, #20
10728     A7 22 02 AB |  if_e	rdlong	local03, fp
1072c     14 4E 85 A1 |  if_e	sub	fp, #20
10730     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
10734     34 00 90 5D |  if_ne	jmp	#LR__1261
10738     00 1E 06 F6 | 	mov	local01, #0
1073c     A7 20 02 FB | 	rdlong	local02, fp
10740     0C 4E 05 F1 | 	add	fp, #12
10744     A7 12 02 FB | 	rdlong	arg01, fp
10748     0C 4E 85 F1 | 	sub	fp, #12
1074c     D0 C2 BF FD | 	call	#_convertstring
10750     FD 14 02 F6 | 	mov	arg02, result1
10754     10 13 02 F6 | 	mov	arg01, local02
10758     44 86 B0 FD | 	call	#__system___string_cmp
1075c     01 FA 55 F2 | 	cmps	result1, #1 wc
10760     00 1E 26 C6 |  if_b	not	local01, #0
10764     A7 1E 62 FC | 	wrlong	local01, fp
10768     64 00 90 FD | 	jmp	#LR__1263
1076c                 | LR__1261
1076c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
1076c     08 4E 05 F1 | 	add	fp, #8
10770     A7 1E 02 FB | 	rdlong	local01, fp
10774     08 4E 85 F1 | 	sub	fp, #8
10778     2B 1E 0E F2 | 	cmp	local01, #43 wz
1077c     14 4E 05 A1 |  if_e	add	fp, #20
10780     A7 22 02 AB |  if_e	rdlong	local03, fp
10784     14 4E 85 A1 |  if_e	sub	fp, #20
10788     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1078c     3C 00 90 5D |  if_ne	jmp	#LR__1262
10790     00 1E 06 F6 | 	mov	local01, #0
10794     A7 12 02 FB | 	rdlong	arg01, fp
10798     84 C2 BF FD | 	call	#_convertstring
1079c     FD 20 02 F6 | 	mov	local02, result1
107a0     0C 4E 05 F1 | 	add	fp, #12
107a4     A7 12 02 FB | 	rdlong	arg01, fp
107a8     0C 4E 85 F1 | 	sub	fp, #12
107ac     70 C2 BF FD | 	call	#_convertstring
107b0     FD 14 02 F6 | 	mov	arg02, result1
107b4     10 13 02 F6 | 	mov	arg01, local02
107b8     E4 85 B0 FD | 	call	#__system___string_cmp
107bc     01 FA 55 F2 | 	cmps	result1, #1 wc
107c0     00 1E 26 C6 |  if_b	not	local01, #0
107c4     A7 1E 62 FC | 	wrlong	local01, fp
107c8     04 00 90 FD | 	jmp	#LR__1263
107cc                 | LR__1262
107cc     A7 00 68 FC | 	wrlong	#0, fp
107d0                 | LR__1263
107d0     08 4E 05 F1 | 	add	fp, #8
107d4     A7 38 68 FC | 	wrlong	#28, fp
107d8     08 4E 85 F1 | 	sub	fp, #8
107dc     A7 12 02 F6 | 	mov	arg01, fp
107e0     98 91 BF FD | 	call	#_push
107e4     A7 F0 03 F6 | 	mov	ptra, fp
107e8     B2 00 A0 FD | 	call	#popregs_
107ec                 | _do_le_ret
107ec     2D 00 64 FD | 	ret
107f0                 | 
107f0                 | ' 
107f0                 | ' 
107f0                 | ' sub do_ne
107f0                 | _do_ne
107f0     05 4A 05 F6 | 	mov	COUNT_, #5
107f4     A8 00 A0 FD | 	call	#pushregs_
107f8     18 F0 07 F1 | 	add	ptra, #24
107fc     E4 90 BF FD | 	call	#_pop
10800     FD 1E 02 F6 | 	mov	local01, result1
10804     FE 20 02 F6 | 	mov	local02, result2
10808     FF 22 02 F6 | 	mov	local03, result3
1080c     0C 4E 05 F1 | 	add	fp, #12
10810     A7 1E 62 FC | 	wrlong	local01, fp
10814     04 4E 05 F1 | 	add	fp, #4
10818     A7 20 62 FC | 	wrlong	local02, fp
1081c     04 4E 05 F1 | 	add	fp, #4
10820     A7 22 62 FC | 	wrlong	local03, fp
10824     14 4E 85 F1 | 	sub	fp, #20
10828     B8 90 BF FD | 	call	#_pop
1082c     FF 22 02 F6 | 	mov	local03, result3
10830     A7 FA 61 FC | 	wrlong	result1, fp
10834     04 4E 05 F1 | 	add	fp, #4
10838     A7 FC 61 FC | 	wrlong	result2, fp
1083c     04 4E 05 F1 | 	add	fp, #4
10840     A7 22 62 FC | 	wrlong	local03, fp
10844                 | ' t2=pop()
10844                 | ' t1=pop()
10844                 | ' 
10844                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
10844     08 4E 85 F1 | 	sub	fp, #8
10848     1F 22 0E F2 | 	cmp	local03, #31 wz
1084c     14 4E 05 A1 |  if_e	add	fp, #20
10850     A7 24 02 AB |  if_e	rdlong	local04, fp
10854     14 4E 85 A1 |  if_e	sub	fp, #20
10858     12 23 02 A6 |  if_e	mov	local03, local04
1085c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
10860     28 00 90 5D |  if_ne	jmp	#LR__1270
10864     00 1E 06 F6 | 	mov	local01, #0
10868     A7 12 02 FB | 	rdlong	arg01, fp
1086c     0C 4E 05 F1 | 	add	fp, #12
10870     A7 14 02 FB | 	rdlong	arg02, fp
10874     0C 4E 85 F1 | 	sub	fp, #12
10878     24 85 B0 FD | 	call	#__system___string_cmp
1087c     00 FA 0D F2 | 	cmp	result1, #0 wz
10880     00 1E 26 56 |  if_ne	not	local01, #0
10884     A7 1E 62 FC | 	wrlong	local01, fp
10888     1C 04 90 FD | 	jmp	#LR__1283
1088c                 | LR__1270
1088c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
1088c     08 4E 05 F1 | 	add	fp, #8
10890     A7 1E 02 FB | 	rdlong	local01, fp
10894     08 4E 85 F1 | 	sub	fp, #8
10898     1E 1E 0E F2 | 	cmp	local01, #30 wz
1089c     14 4E 05 A1 |  if_e	add	fp, #20
108a0     A7 24 02 AB |  if_e	rdlong	local04, fp
108a4     14 4E 85 A1 |  if_e	sub	fp, #20
108a8     12 23 02 A6 |  if_e	mov	local03, local04
108ac     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
108b0     2C 00 90 5D |  if_ne	jmp	#LR__1271
108b4     00 1E 06 F6 | 	mov	local01, #0
108b8     A7 12 02 FB | 	rdlong	arg01, fp
108bc     0C 4E 05 F1 | 	add	fp, #12
108c0     A7 14 02 FB | 	rdlong	arg02, fp
108c4     0C 4E 85 F1 | 	sub	fp, #12
108c8     01 16 06 F6 | 	mov	arg03, #1
108cc     C8 B3 B0 FD | 	call	#__system___float_cmp
108d0     00 FA 0D F2 | 	cmp	result1, #0 wz
108d4     00 1E 26 56 |  if_ne	not	local01, #0
108d8     A7 1E 62 FC | 	wrlong	local01, fp
108dc     C8 03 90 FD | 	jmp	#LR__1283
108e0                 | LR__1271
108e0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
108e0     08 4E 05 F1 | 	add	fp, #8
108e4     A7 1E 02 FB | 	rdlong	local01, fp
108e8     08 4E 85 F1 | 	sub	fp, #8
108ec     1E 1E 0E F2 | 	cmp	local01, #30 wz
108f0     14 4E 05 A1 |  if_e	add	fp, #20
108f4     A7 24 02 AB |  if_e	rdlong	local04, fp
108f8     14 4E 85 A1 |  if_e	sub	fp, #20
108fc     12 23 02 A6 |  if_e	mov	local03, local04
10900     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10904     48 00 90 5D |  if_ne	jmp	#LR__1272
10908     00 1E 06 F6 | 	mov	local01, #0
1090c     A7 20 02 FB | 	rdlong	local02, fp
10910     0C 4E 05 F1 | 	add	fp, #12
10914     A7 12 02 FB | 	rdlong	arg01, fp
10918     0C 4E 85 F1 | 	sub	fp, #12
1091c     09 13 52 F6 | 	abs	arg01, arg01 wc
10920     1F 26 C6 C9 |  if_b	decod	local05, #31
10924     00 26 06 36 |  if_ae	mov	local05, #0
10928     34 AB B0 FD | 	call	#__system___float_fromuns
1092c     13 FB 61 F5 | 	xor	result1, local05
10930     FD 14 02 F6 | 	mov	arg02, result1
10934     10 13 02 F6 | 	mov	arg01, local02
10938     01 16 06 F6 | 	mov	arg03, #1
1093c     58 B3 B0 FD | 	call	#__system___float_cmp
10940     00 FA 0D F2 | 	cmp	result1, #0 wz
10944     00 1E 26 56 |  if_ne	not	local01, #0
10948     A7 1E 62 FC | 	wrlong	local01, fp
1094c     58 03 90 FD | 	jmp	#LR__1283
10950                 | LR__1272
10950                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
10950     08 4E 05 F1 | 	add	fp, #8
10954     A7 1E 02 FB | 	rdlong	local01, fp
10958     08 4E 85 F1 | 	sub	fp, #8
1095c     1E 1E 0E F2 | 	cmp	local01, #30 wz
10960     14 4E 05 A1 |  if_e	add	fp, #20
10964     A7 24 02 AB |  if_e	rdlong	local04, fp
10968     14 4E 85 A1 |  if_e	sub	fp, #20
1096c     12 23 02 A6 |  if_e	mov	local03, local04
10970     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10974     38 00 90 5D |  if_ne	jmp	#LR__1273
10978     00 1E 06 F6 | 	mov	local01, #0
1097c     A7 20 02 FB | 	rdlong	local02, fp
10980     0C 4E 05 F1 | 	add	fp, #12
10984     A7 12 02 FB | 	rdlong	arg01, fp
10988     0C 4E 85 F1 | 	sub	fp, #12
1098c     D0 AA B0 FD | 	call	#__system___float_fromuns
10990     FD 14 02 F6 | 	mov	arg02, result1
10994     10 13 02 F6 | 	mov	arg01, local02
10998     01 16 06 F6 | 	mov	arg03, #1
1099c     F8 B2 B0 FD | 	call	#__system___float_cmp
109a0     00 FA 0D F2 | 	cmp	result1, #0 wz
109a4     00 1E 26 56 |  if_ne	not	local01, #0
109a8     A7 1E 62 FC | 	wrlong	local01, fp
109ac     F8 02 90 FD | 	jmp	#LR__1283
109b0                 | LR__1273
109b0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
109b0     08 4E 05 F1 | 	add	fp, #8
109b4     A7 1E 02 FB | 	rdlong	local01, fp
109b8     08 4E 85 F1 | 	sub	fp, #8
109bc     1C 1E 0E F2 | 	cmp	local01, #28 wz
109c0     14 4E 05 A1 |  if_e	add	fp, #20
109c4     A7 24 02 AB |  if_e	rdlong	local04, fp
109c8     14 4E 85 A1 |  if_e	sub	fp, #20
109cc     12 23 02 A6 |  if_e	mov	local03, local04
109d0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
109d4     44 00 90 5D |  if_ne	jmp	#LR__1274
109d8     00 1E 06 F6 | 	mov	local01, #0
109dc     A7 12 02 FB | 	rdlong	arg01, fp
109e0     09 13 52 F6 | 	abs	arg01, arg01 wc
109e4     1F 26 C6 C9 |  if_b	decod	local05, #31
109e8     00 26 06 36 |  if_ae	mov	local05, #0
109ec     70 AA B0 FD | 	call	#__system___float_fromuns
109f0     13 FB 61 F5 | 	xor	result1, local05
109f4     FD 12 02 F6 | 	mov	arg01, result1
109f8     0C 4E 05 F1 | 	add	fp, #12
109fc     A7 14 02 FB | 	rdlong	arg02, fp
10a00     0C 4E 85 F1 | 	sub	fp, #12
10a04     01 16 06 F6 | 	mov	arg03, #1
10a08     8C B2 B0 FD | 	call	#__system___float_cmp
10a0c     00 FA 0D F2 | 	cmp	result1, #0 wz
10a10     00 1E 26 56 |  if_ne	not	local01, #0
10a14     A7 1E 62 FC | 	wrlong	local01, fp
10a18     8C 02 90 FD | 	jmp	#LR__1283
10a1c                 | LR__1274
10a1c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
10a1c     08 4E 05 F1 | 	add	fp, #8
10a20     A7 1E 02 FB | 	rdlong	local01, fp
10a24     08 4E 85 F1 | 	sub	fp, #8
10a28     1C 1E 0E F2 | 	cmp	local01, #28 wz
10a2c     14 4E 05 A1 |  if_e	add	fp, #20
10a30     A7 24 02 AB |  if_e	rdlong	local04, fp
10a34     14 4E 85 A1 |  if_e	sub	fp, #20
10a38     12 23 02 A6 |  if_e	mov	local03, local04
10a3c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10a40     24 00 90 5D |  if_ne	jmp	#LR__1275
10a44     00 1E 06 F6 | 	mov	local01, #0
10a48     A7 20 02 FB | 	rdlong	local02, fp
10a4c     0C 4E 05 F1 | 	add	fp, #12
10a50     A7 22 02 FB | 	rdlong	local03, fp
10a54     0C 4E 85 F1 | 	sub	fp, #12
10a58     11 21 0A F2 | 	cmp	local02, local03 wz
10a5c     01 1E 66 56 |  if_ne	neg	local01, #1
10a60     A7 1E 62 FC | 	wrlong	local01, fp
10a64     40 02 90 FD | 	jmp	#LR__1283
10a68                 | LR__1275
10a68                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
10a68     08 4E 05 F1 | 	add	fp, #8
10a6c     A7 1E 02 FB | 	rdlong	local01, fp
10a70     08 4E 85 F1 | 	sub	fp, #8
10a74     1C 1E 0E F2 | 	cmp	local01, #28 wz
10a78     14 4E 05 A1 |  if_e	add	fp, #20
10a7c     A7 24 02 AB |  if_e	rdlong	local04, fp
10a80     14 4E 85 A1 |  if_e	sub	fp, #20
10a84     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
10a88     24 00 90 5D |  if_ne	jmp	#LR__1276
10a8c     00 1E 06 F6 | 	mov	local01, #0
10a90     A7 20 02 FB | 	rdlong	local02, fp
10a94     0C 4E 05 F1 | 	add	fp, #12
10a98     A7 22 02 FB | 	rdlong	local03, fp
10a9c     0C 4E 85 F1 | 	sub	fp, #12
10aa0     11 21 0A F2 | 	cmp	local02, local03 wz
10aa4     01 1E 66 56 |  if_ne	neg	local01, #1
10aa8     A7 1E 62 FC | 	wrlong	local01, fp
10aac     F8 01 90 FD | 	jmp	#LR__1283
10ab0                 | LR__1276
10ab0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
10ab0     08 4E 05 F1 | 	add	fp, #8
10ab4     A7 1E 02 FB | 	rdlong	local01, fp
10ab8     08 4E 85 F1 | 	sub	fp, #8
10abc     1D 1E 0E F2 | 	cmp	local01, #29 wz
10ac0     14 4E 05 A1 |  if_e	add	fp, #20
10ac4     A7 22 02 AB |  if_e	rdlong	local03, fp
10ac8     14 4E 85 A1 |  if_e	sub	fp, #20
10acc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10ad0     34 00 90 5D |  if_ne	jmp	#LR__1277
10ad4     00 1E 06 F6 | 	mov	local01, #0
10ad8     A7 12 02 FB | 	rdlong	arg01, fp
10adc     80 A9 B0 FD | 	call	#__system___float_fromuns
10ae0     FD 12 02 F6 | 	mov	arg01, result1
10ae4     0C 4E 05 F1 | 	add	fp, #12
10ae8     A7 14 02 FB | 	rdlong	arg02, fp
10aec     0C 4E 85 F1 | 	sub	fp, #12
10af0     01 16 06 F6 | 	mov	arg03, #1
10af4     A0 B1 B0 FD | 	call	#__system___float_cmp
10af8     00 FA 0D F2 | 	cmp	result1, #0 wz
10afc     00 1E 26 56 |  if_ne	not	local01, #0
10b00     A7 1E 62 FC | 	wrlong	local01, fp
10b04     A0 01 90 FD | 	jmp	#LR__1283
10b08                 | LR__1277
10b08                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
10b08     08 4E 05 F1 | 	add	fp, #8
10b0c     A7 1E 02 FB | 	rdlong	local01, fp
10b10     08 4E 85 F1 | 	sub	fp, #8
10b14     1D 1E 0E F2 | 	cmp	local01, #29 wz
10b18     14 4E 05 A1 |  if_e	add	fp, #20
10b1c     A7 22 02 AB |  if_e	rdlong	local03, fp
10b20     14 4E 85 A1 |  if_e	sub	fp, #20
10b24     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10b28     24 00 90 5D |  if_ne	jmp	#LR__1278
10b2c     00 1E 06 F6 | 	mov	local01, #0
10b30     A7 20 02 FB | 	rdlong	local02, fp
10b34     0C 4E 05 F1 | 	add	fp, #12
10b38     A7 22 02 FB | 	rdlong	local03, fp
10b3c     0C 4E 85 F1 | 	sub	fp, #12
10b40     11 21 0A F2 | 	cmp	local02, local03 wz
10b44     01 1E 66 56 |  if_ne	neg	local01, #1
10b48     A7 1E 62 FC | 	wrlong	local01, fp
10b4c     58 01 90 FD | 	jmp	#LR__1283
10b50                 | LR__1278
10b50                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
10b50     08 4E 05 F1 | 	add	fp, #8
10b54     A7 1E 02 FB | 	rdlong	local01, fp
10b58     08 4E 85 F1 | 	sub	fp, #8
10b5c     1D 1E 0E F2 | 	cmp	local01, #29 wz
10b60     14 4E 05 A1 |  if_e	add	fp, #20
10b64     A7 22 02 AB |  if_e	rdlong	local03, fp
10b68     14 4E 85 A1 |  if_e	sub	fp, #20
10b6c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10b70     24 00 90 5D |  if_ne	jmp	#LR__1279
10b74     00 1E 06 F6 | 	mov	local01, #0
10b78     A7 20 02 FB | 	rdlong	local02, fp
10b7c     0C 4E 05 F1 | 	add	fp, #12
10b80     A7 22 02 FB | 	rdlong	local03, fp
10b84     0C 4E 85 F1 | 	sub	fp, #12
10b88     11 21 0A F2 | 	cmp	local02, local03 wz
10b8c     01 1E 66 56 |  if_ne	neg	local01, #1
10b90     A7 1E 62 FC | 	wrlong	local01, fp
10b94     10 01 90 FD | 	jmp	#LR__1283
10b98                 | LR__1279
10b98                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
10b98     08 4E 05 F1 | 	add	fp, #8
10b9c     A7 1E 02 FB | 	rdlong	local01, fp
10ba0     08 4E 85 F1 | 	sub	fp, #8
10ba4     2B 1E 0E F2 | 	cmp	local01, #43 wz
10ba8     14 4E 05 A1 |  if_e	add	fp, #20
10bac     A7 22 02 AB |  if_e	rdlong	local03, fp
10bb0     14 4E 85 A1 |  if_e	sub	fp, #20
10bb4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
10bb8     30 00 90 5D |  if_ne	jmp	#LR__1280
10bbc     00 1E 06 F6 | 	mov	local01, #0
10bc0     A7 12 02 FB | 	rdlong	arg01, fp
10bc4     58 BE BF FD | 	call	#_convertstring
10bc8     FD 12 02 F6 | 	mov	arg01, result1
10bcc     0C 4E 05 F1 | 	add	fp, #12
10bd0     A7 14 02 FB | 	rdlong	arg02, fp
10bd4     0C 4E 85 F1 | 	sub	fp, #12
10bd8     C4 81 B0 FD | 	call	#__system___string_cmp
10bdc     00 FA 0D F2 | 	cmp	result1, #0 wz
10be0     00 1E 26 56 |  if_ne	not	local01, #0
10be4     A7 1E 62 FC | 	wrlong	local01, fp
10be8     BC 00 90 FD | 	jmp	#LR__1283
10bec                 | LR__1280
10bec                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
10bec     08 4E 05 F1 | 	add	fp, #8
10bf0     A7 1E 02 FB | 	rdlong	local01, fp
10bf4     08 4E 85 F1 | 	sub	fp, #8
10bf8     1F 1E 0E F2 | 	cmp	local01, #31 wz
10bfc     14 4E 05 A1 |  if_e	add	fp, #20
10c00     A7 22 02 AB |  if_e	rdlong	local03, fp
10c04     14 4E 85 A1 |  if_e	sub	fp, #20
10c08     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
10c0c     34 00 90 5D |  if_ne	jmp	#LR__1281
10c10     00 1E 06 F6 | 	mov	local01, #0
10c14     A7 20 02 FB | 	rdlong	local02, fp
10c18     0C 4E 05 F1 | 	add	fp, #12
10c1c     A7 12 02 FB | 	rdlong	arg01, fp
10c20     0C 4E 85 F1 | 	sub	fp, #12
10c24     F8 BD BF FD | 	call	#_convertstring
10c28     FD 14 02 F6 | 	mov	arg02, result1
10c2c     10 13 02 F6 | 	mov	arg01, local02
10c30     6C 81 B0 FD | 	call	#__system___string_cmp
10c34     00 FA 0D F2 | 	cmp	result1, #0 wz
10c38     00 1E 26 56 |  if_ne	not	local01, #0
10c3c     A7 1E 62 FC | 	wrlong	local01, fp
10c40     64 00 90 FD | 	jmp	#LR__1283
10c44                 | LR__1281
10c44                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
10c44     08 4E 05 F1 | 	add	fp, #8
10c48     A7 1E 02 FB | 	rdlong	local01, fp
10c4c     08 4E 85 F1 | 	sub	fp, #8
10c50     2B 1E 0E F2 | 	cmp	local01, #43 wz
10c54     14 4E 05 A1 |  if_e	add	fp, #20
10c58     A7 22 02 AB |  if_e	rdlong	local03, fp
10c5c     14 4E 85 A1 |  if_e	sub	fp, #20
10c60     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
10c64     3C 00 90 5D |  if_ne	jmp	#LR__1282
10c68     00 1E 06 F6 | 	mov	local01, #0
10c6c     A7 12 02 FB | 	rdlong	arg01, fp
10c70     AC BD BF FD | 	call	#_convertstring
10c74     FD 20 02 F6 | 	mov	local02, result1
10c78     0C 4E 05 F1 | 	add	fp, #12
10c7c     A7 12 02 FB | 	rdlong	arg01, fp
10c80     0C 4E 85 F1 | 	sub	fp, #12
10c84     98 BD BF FD | 	call	#_convertstring
10c88     FD 14 02 F6 | 	mov	arg02, result1
10c8c     10 13 02 F6 | 	mov	arg01, local02
10c90     0C 81 B0 FD | 	call	#__system___string_cmp
10c94     00 FA 0D F2 | 	cmp	result1, #0 wz
10c98     00 1E 26 56 |  if_ne	not	local01, #0
10c9c     A7 1E 62 FC | 	wrlong	local01, fp
10ca0     04 00 90 FD | 	jmp	#LR__1283
10ca4                 | LR__1282
10ca4     A7 00 68 FC | 	wrlong	#0, fp
10ca8                 | LR__1283
10ca8     08 4E 05 F1 | 	add	fp, #8
10cac     A7 38 68 FC | 	wrlong	#28, fp
10cb0     08 4E 85 F1 | 	sub	fp, #8
10cb4     A7 12 02 F6 | 	mov	arg01, fp
10cb8     C0 8C BF FD | 	call	#_push
10cbc     A7 F0 03 F6 | 	mov	ptra, fp
10cc0     B2 00 A0 FD | 	call	#popregs_
10cc4                 | _do_ne_ret
10cc4     2D 00 64 FD | 	ret
10cc8                 | 
10cc8                 | ' 
10cc8                 | ' 
10cc8                 | ' 
10cc8                 | ' ' -------------------   convert a variable on the top of stack to integer
10cc8                 | ' 
10cc8                 | ' sub do_converttoint
10cc8                 | _do_converttoint
10cc8     02 4A 05 F6 | 	mov	COUNT_, #2
10ccc     A8 00 A0 FD | 	call	#pushregs_
10cd0     18 F0 07 F1 | 	add	ptra, #24
10cd4     0C 8C BF FD | 	call	#_pop
10cd8     FE 1E 02 F6 | 	mov	local01, result2
10cdc     FF 20 02 F6 | 	mov	local02, result3
10ce0     A7 FA 61 FC | 	wrlong	result1, fp
10ce4     04 4E 05 F1 | 	add	fp, #4
10ce8     A7 1E 62 FC | 	wrlong	local01, fp
10cec     04 4E 05 F1 | 	add	fp, #4
10cf0     A7 20 62 FC | 	wrlong	local02, fp
10cf4                 | ' t1=pop() 
10cf4                 | ' select case t1.result_type
10cf4     08 4E 85 F1 | 	sub	fp, #8
10cf8     1C 20 0E F2 | 	cmp	local02, #28 wz
10cfc     2C 00 90 AD |  if_e	jmp	#LR__1290
10d00     1D 20 0E F2 | 	cmp	local02, #29 wz
10d04     40 00 90 AD |  if_e	jmp	#LR__1291
10d08     1E 20 0E F2 | 	cmp	local02, #30 wz
10d0c     54 00 90 AD |  if_e	jmp	#LR__1292
10d10     1F 20 0E F2 | 	cmp	local02, #31 wz
10d14     70 00 90 AD |  if_e	jmp	#LR__1293
10d18     2B 20 0E F2 | 	cmp	local02, #43 wz
10d1c     94 00 90 AD |  if_e	jmp	#LR__1294
10d20     FF 20 0E F2 | 	cmp	local02, #255 wz
10d24     C0 00 90 AD |  if_e	jmp	#LR__1295
10d28     DC 00 90 FD | 	jmp	#LR__1296
10d2c                 | LR__1290
10d2c     A7 20 02 FB | 	rdlong	local02, fp
10d30     0C 4E 05 F1 | 	add	fp, #12
10d34     A7 20 62 FC | 	wrlong	local02, fp
10d38     04 4E 05 F1 | 	add	fp, #4
10d3c     A7 38 68 FC | 	wrlong	#28, fp
10d40     10 4E 85 F1 | 	sub	fp, #16
10d44     D4 00 90 FD | 	jmp	#LR__1297
10d48                 | LR__1291
10d48     A7 20 02 FB | 	rdlong	local02, fp
10d4c     0C 4E 05 F1 | 	add	fp, #12
10d50     A7 20 62 FC | 	wrlong	local02, fp
10d54     04 4E 05 F1 | 	add	fp, #4
10d58     A7 38 68 FC | 	wrlong	#28, fp
10d5c     10 4E 85 F1 | 	sub	fp, #16
10d60     B8 00 90 FD | 	jmp	#LR__1297
10d64                 | LR__1292
10d64     A7 12 02 FB | 	rdlong	arg01, fp
10d68     01 14 06 F6 | 	mov	arg02, #1
10d6c     BC AF B0 FD | 	call	#__system___float_tointeger
10d70     0C 4E 05 F1 | 	add	fp, #12
10d74     A7 FA 61 FC | 	wrlong	result1, fp
10d78     04 4E 05 F1 | 	add	fp, #4
10d7c     A7 38 68 FC | 	wrlong	#28, fp
10d80     10 4E 85 F1 | 	sub	fp, #16
10d84     94 00 90 FD | 	jmp	#LR__1297
10d88                 | LR__1293
10d88     A7 12 02 FB | 	rdlong	arg01, fp
10d8c     BC B2 B0 FD | 	call	#__system____builtin_atof
10d90     FD 12 02 F6 | 	mov	arg01, result1
10d94     00 14 06 F6 | 	mov	arg02, #0
10d98     90 AF B0 FD | 	call	#__system___float_tointeger
10d9c     0C 4E 05 F1 | 	add	fp, #12
10da0     A7 FA 61 FC | 	wrlong	result1, fp
10da4     04 4E 05 F1 | 	add	fp, #4
10da8     A7 38 68 FC | 	wrlong	#28, fp
10dac     10 4E 85 F1 | 	sub	fp, #16
10db0     68 00 90 FD | 	jmp	#LR__1297
10db4                 | LR__1294
10db4     A7 12 02 FB | 	rdlong	arg01, fp
10db8     64 BC BF FD | 	call	#_convertstring
10dbc     FD 12 02 F6 | 	mov	arg01, result1
10dc0     88 B2 B0 FD | 	call	#__system____builtin_atof
10dc4     FD 12 02 F6 | 	mov	arg01, result1
10dc8     00 14 06 F6 | 	mov	arg02, #0
10dcc     5C AF B0 FD | 	call	#__system___float_tointeger
10dd0     0C 4E 05 F1 | 	add	fp, #12
10dd4     A7 FA 61 FC | 	wrlong	result1, fp
10dd8     04 4E 05 F1 | 	add	fp, #4
10ddc     A7 38 68 FC | 	wrlong	#28, fp
10de0     10 4E 85 F1 | 	sub	fp, #16
10de4     34 00 90 FD | 	jmp	#LR__1297
10de8                 | LR__1295
10de8     0C 4E 05 F1 | 	add	fp, #12
10dec     A7 00 68 FC | 	wrlong	#0, fp
10df0     0C 4E 85 F1 | 	sub	fp, #12
10df4     A7 20 02 FB | 	rdlong	local02, fp
10df8     10 4E 05 F1 | 	add	fp, #16
10dfc     A7 20 62 FC | 	wrlong	local02, fp
10e00     10 4E 85 F1 | 	sub	fp, #16
10e04     14 00 90 FD | 	jmp	#LR__1297
10e08                 | LR__1296
10e08     0C 4E 05 F1 | 	add	fp, #12
10e0c     A7 00 68 FC | 	wrlong	#0, fp
10e10     04 4E 05 F1 | 	add	fp, #4
10e14     A7 02 68 FC | 	wrlong	#1, fp
10e18     10 4E 85 F1 | 	sub	fp, #16
10e1c                 | LR__1297
10e1c     0C 4E 05 F1 | 	add	fp, #12
10e20     A7 20 02 FB | 	rdlong	local02, fp
10e24     0C 4E 85 F1 | 	sub	fp, #12
10e28     A7 20 62 FC | 	wrlong	local02, fp
10e2c     10 4E 05 F1 | 	add	fp, #16
10e30     A7 20 02 FB | 	rdlong	local02, fp
10e34     08 4E 85 F1 | 	sub	fp, #8
10e38     A7 20 62 FC | 	wrlong	local02, fp
10e3c     08 4E 85 F1 | 	sub	fp, #8
10e40     A7 12 02 F6 | 	mov	arg01, fp
10e44     34 8B BF FD | 	call	#_push
10e48     A7 F0 03 F6 | 	mov	ptra, fp
10e4c     B2 00 A0 FD | 	call	#popregs_
10e50                 | _do_converttoint_ret
10e50     2D 00 64 FD | 	ret
10e54                 | 
10e54                 | ' 
10e54                 | ' function converttoint (t1 as expr_result) as integer
10e54                 | _converttoint
10e54     02 4A 05 F6 | 	mov	COUNT_, #2
10e58     A8 00 A0 FD | 	call	#pushregs_
10e5c     09 1F 02 F6 | 	mov	local01, arg01
10e60                 | ' 
10e60                 | ' select case t1.result_type
10e60     08 1E 06 F1 | 	add	local01, #8
10e64     0F 21 02 FB | 	rdlong	local02, local01
10e68     08 1E 86 F1 | 	sub	local01, #8
10e6c     1C 20 0E F2 | 	cmp	local02, #28 wz
10e70     24 00 90 AD |  if_e	jmp	#LR__1300
10e74     1D 20 0E F2 | 	cmp	local02, #29 wz
10e78     24 00 90 AD |  if_e	jmp	#LR__1301
10e7c     1E 20 0E F2 | 	cmp	local02, #30 wz
10e80     24 00 90 AD |  if_e	jmp	#LR__1302
10e84     1F 20 0E F2 | 	cmp	local02, #31 wz
10e88     2C 00 90 AD |  if_e	jmp	#LR__1303
10e8c     2B 20 0E F2 | 	cmp	local02, #43 wz
10e90     3C 00 90 AD |  if_e	jmp	#LR__1304
10e94     58 00 90 FD | 	jmp	#LR__1305
10e98                 | LR__1300
10e98     0F FB 01 FB | 	rdlong	result1, local01
10e9c     54 00 90 FD | 	jmp	#LR__1306
10ea0                 | LR__1301
10ea0     0F FB 01 FB | 	rdlong	result1, local01
10ea4     4C 00 90 FD | 	jmp	#LR__1306
10ea8                 | LR__1302
10ea8     0F 13 02 FB | 	rdlong	arg01, local01
10eac     01 14 06 F6 | 	mov	arg02, #1
10eb0     78 AE B0 FD | 	call	#__system___float_tointeger
10eb4     3C 00 90 FD | 	jmp	#LR__1306
10eb8                 | LR__1303
10eb8     0F 13 02 FB | 	rdlong	arg01, local01
10ebc     8C B1 B0 FD | 	call	#__system____builtin_atof
10ec0     FD 12 02 F6 | 	mov	arg01, result1
10ec4     00 14 06 F6 | 	mov	arg02, #0
10ec8     60 AE B0 FD | 	call	#__system___float_tointeger
10ecc     24 00 90 FD | 	jmp	#LR__1306
10ed0                 | LR__1304
10ed0     0F 13 02 FB | 	rdlong	arg01, local01
10ed4     48 BB BF FD | 	call	#_convertstring
10ed8     FD 12 02 F6 | 	mov	arg01, result1
10edc     6C B1 B0 FD | 	call	#__system____builtin_atof
10ee0     FD 12 02 F6 | 	mov	arg01, result1
10ee4     00 14 06 F6 | 	mov	arg02, #0
10ee8     40 AE B0 FD | 	call	#__system___float_tointeger
10eec     04 00 90 FD | 	jmp	#LR__1306
10ef0                 | LR__1305
10ef0     00 FA 05 F6 | 	mov	result1, #0
10ef4                 | LR__1306
10ef4     A7 F0 03 F6 | 	mov	ptra, fp
10ef8     B2 00 A0 FD | 	call	#popregs_
10efc                 | _converttoint_ret
10efc     2D 00 64 FD | 	ret
10f00                 | 
10f00                 | ' 
10f00                 | ' function converttofloat (t1 as expr_result) as single
10f00                 | _converttofloat
10f00     03 4A 05 F6 | 	mov	COUNT_, #3
10f04     A8 00 A0 FD | 	call	#pushregs_
10f08     09 1F 02 F6 | 	mov	local01, arg01
10f0c                 | ' 
10f0c                 | ' select case t1.result_type
10f0c     08 1E 06 F1 | 	add	local01, #8
10f10     0F 21 02 FB | 	rdlong	local02, local01
10f14     08 1E 86 F1 | 	sub	local01, #8
10f18     1C 20 0E F2 | 	cmp	local02, #28 wz
10f1c     24 00 90 AD |  if_e	jmp	#LR__1310
10f20     1D 20 0E F2 | 	cmp	local02, #29 wz
10f24     38 00 90 AD |  if_e	jmp	#LR__1311
10f28     1E 20 0E F2 | 	cmp	local02, #30 wz
10f2c     3C 00 90 AD |  if_e	jmp	#LR__1312
10f30     1F 20 0E F2 | 	cmp	local02, #31 wz
10f34     3C 00 90 AD |  if_e	jmp	#LR__1313
10f38     2B 20 0E F2 | 	cmp	local02, #43 wz
10f3c     40 00 90 AD |  if_e	jmp	#LR__1314
10f40     50 00 90 FD | 	jmp	#LR__1315
10f44                 | LR__1310
10f44     0F 13 02 FB | 	rdlong	arg01, local01
10f48     09 13 52 F6 | 	abs	arg01, arg01 wc
10f4c     1F 22 C6 C9 |  if_b	decod	local03, #31
10f50     00 22 06 36 |  if_ae	mov	local03, #0
10f54     08 A5 B0 FD | 	call	#__system___float_fromuns
10f58     11 FB 61 F5 | 	xor	result1, local03
10f5c     38 00 90 FD | 	jmp	#LR__1316
10f60                 | LR__1311
10f60     0F 13 02 FB | 	rdlong	arg01, local01
10f64     F8 A4 B0 FD | 	call	#__system___float_fromuns
10f68     2C 00 90 FD | 	jmp	#LR__1316
10f6c                 | LR__1312
10f6c     0F FB 01 FB | 	rdlong	result1, local01
10f70     24 00 90 FD | 	jmp	#LR__1316
10f74                 | LR__1313
10f74     0F 13 02 FB | 	rdlong	arg01, local01
10f78     D0 B0 B0 FD | 	call	#__system____builtin_atof
10f7c     18 00 90 FD | 	jmp	#LR__1316
10f80                 | LR__1314
10f80     0F 13 02 FB | 	rdlong	arg01, local01
10f84     98 BA BF FD | 	call	#_convertstring
10f88     FD 12 02 F6 | 	mov	arg01, result1
10f8c     BC B0 B0 FD | 	call	#__system____builtin_atof
10f90     04 00 90 FD | 	jmp	#LR__1316
10f94                 | LR__1315
10f94     00 FA 05 F6 | 	mov	result1, #0
10f98                 | LR__1316
10f98     A7 F0 03 F6 | 	mov	ptra, fp
10f9c     B2 00 A0 FD | 	call	#popregs_
10fa0                 | _converttofloat_ret
10fa0     2D 00 64 FD | 	ret
10fa4                 | 
10fa4                 | ' 
10fa4                 | ' sub do_rnd
10fa4                 | _do_rnd
10fa4     01 4A 05 F6 | 	mov	COUNT_, #1
10fa8     A8 00 A0 FD | 	call	#pushregs_
10fac     10 F0 07 F1 | 	add	ptra, #16
10fb0     69 00 00 FF 
10fb4     54 E5 05 F1 | 	add	objptr, ##54100
10fb8     F2 1E 02 FB | 	rdlong	local01, objptr
10fbc     0F 17 02 F6 | 	mov	arg03, local01
10fc0     01 16 66 F0 | 	shl	arg03, #1
10fc4     0F 17 02 F1 | 	add	arg03, local01
10fc8     02 16 66 F0 | 	shl	arg03, #2
10fcc     03 00 00 FF 
10fd0     04 E4 85 F1 | 	sub	objptr, ##1540
10fd4     F2 16 02 F1 | 	add	arg03, objptr
10fd8     0B 17 02 FB | 	rdlong	arg03, arg03
10fdc     0C 4E 05 F1 | 	add	fp, #12
10fe0     A7 16 62 FC | 	wrlong	arg03, fp
10fe4                 | ' 
10fe4                 | ' numpar=compiledline(lineptr_e).result.uresult
10fe4                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
10fe4     0C 4E 85 F1 | 	sub	fp, #12
10fe8     02 16 16 F2 | 	cmp	arg03, #2 wc
10fec     66 00 00 FF 
10ff0     50 E5 85 F1 | 	sub	objptr, ##52560
10ff4     3C 00 90 CD |  if_b	jmp	#LR__1320
10ff8     00 12 06 F6 | 	mov	arg01, #0
10ffc     7C D6 B0 FD | 	call	#__system___getiolock_0423
11000     FD 12 02 F6 | 	mov	arg01, result1
11004     70 7D B0 FD | 	call	#__system___lockmem
11008     44 01 00 FF 
1100c     16 14 06 F6 | 	mov	arg02, ##@LR__4585
11010     00 12 06 F6 | 	mov	arg01, #0
11014     00 16 06 F6 | 	mov	arg03, #0
11018     50 8A B0 FD | 	call	#__system___basic_print_string
1101c     00 12 06 F6 | 	mov	arg01, #0
11020     58 D6 B0 FD | 	call	#__system___getiolock_0423
11024     FD 00 68 FC | 	wrlong	#0, result1
11028     27 12 06 F6 | 	mov	arg01, #39
1102c     24 48 B0 FD | 	call	#_printerror
11030     2C 01 90 FD | 	jmp	#LR__1327
11034                 | LR__1320
11034                 | ' if numpar=0 then
11034     0C 4E 05 F1 | 	add	fp, #12
11038     A7 FE 09 FB | 	rdlong	result3, fp wz
1103c     0C 4E 85 F1 | 	sub	fp, #12
11040     20 00 90 5D |  if_ne	jmp	#LR__1321
11044     08 4E 05 F1 | 	add	fp, #8
11048     A7 3A 68 FC | 	wrlong	#29, fp
1104c     08 4E 85 F1 | 	sub	fp, #8
11050     1B FA 61 FD | 	getrnd	result1
11054     A7 FA 61 FC | 	wrlong	result1, fp
11058     A7 12 02 F6 | 	mov	arg01, fp
1105c     1C 89 BF FD | 	call	#_push
11060     FC 00 90 FD | 	jmp	#LR__1326
11064                 | LR__1321
11064     7C 88 BF FD | 	call	#_pop
11068     A7 FA 61 FC | 	wrlong	result1, fp
1106c     04 4E 05 F1 | 	add	fp, #4
11070     A7 FC 61 FC | 	wrlong	result2, fp
11074     04 4E 05 F1 | 	add	fp, #4
11078     A7 FE 61 FC | 	wrlong	result3, fp
1107c                 | '   t1=pop()
1107c                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
1107c     08 4E 85 F1 | 	sub	fp, #8
11080     1C FE 0D F2 | 	cmp	result3, #28 wz
11084     08 4E 05 51 |  if_ne	add	fp, #8
11088     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1108c     08 4E 85 51 |  if_ne	sub	fp, #8
11090     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
11094     2C 00 90 5D |  if_ne	jmp	#LR__1322
11098     1B FA 61 FD | 	getrnd	result1
1109c     A7 1E 02 FB | 	rdlong	local01, fp
110a0     0F FB 11 FD | 	qdiv	result1, local01
110a4     A7 12 02 F6 | 	mov	arg01, fp
110a8     19 1E 62 FD | 	getqy	local01
110ac     A7 1E 62 FC | 	wrlong	local01, fp
110b0     08 4E 05 F1 | 	add	fp, #8
110b4     A7 3A 68 FC | 	wrlong	#29, fp
110b8     08 4E 85 F1 | 	sub	fp, #8
110bc     BC 88 BF FD | 	call	#_push
110c0     9C 00 90 FD | 	jmp	#LR__1325
110c4                 | LR__1322
110c4     08 4E 05 F1 | 	add	fp, #8
110c8     A7 1E 02 FB | 	rdlong	local01, fp
110cc     08 4E 85 F1 | 	sub	fp, #8
110d0     1E 1E 0E F2 | 	cmp	local01, #30 wz
110d4     48 00 90 5D |  if_ne	jmp	#LR__1323
110d8     A7 12 02 FB | 	rdlong	arg01, fp
110dc     00 C0 24 FF 
110e0     00 14 06 F6 | 	mov	arg02, ##1233125376
110e4     80 A9 B0 FD | 	call	#__system___float_div
110e8     FD 1E 02 F6 | 	mov	local01, result1
110ec     1B 12 62 FD | 	getrnd	arg01
110f0     74 13 06 F4 | 	bitl	arg01, #372
110f4     68 A3 B0 FD | 	call	#__system___float_fromuns
110f8     FD 14 02 F6 | 	mov	arg02, result1
110fc     0F 13 02 F6 | 	mov	arg01, local01
11100     60 A7 B0 FD | 	call	#__system___float_mul
11104     A7 FA 61 FC | 	wrlong	result1, fp
11108     08 4E 05 F1 | 	add	fp, #8
1110c     A7 3C 68 FC | 	wrlong	#30, fp
11110     08 4E 85 F1 | 	sub	fp, #8
11114     A7 12 02 F6 | 	mov	arg01, fp
11118     60 88 BF FD | 	call	#_push
1111c     40 00 90 FD | 	jmp	#LR__1324
11120                 | LR__1323
11120                 | '     print "rnd: "; : printerror(40) 
11120     00 12 06 F6 | 	mov	arg01, #0
11124     54 D5 B0 FD | 	call	#__system___getiolock_0423
11128     FD 12 02 F6 | 	mov	arg01, result1
1112c     48 7C B0 FD | 	call	#__system___lockmem
11130     44 01 00 FF 
11134     1C 14 06 F6 | 	mov	arg02, ##@LR__4586
11138     00 12 06 F6 | 	mov	arg01, #0
1113c     00 16 06 F6 | 	mov	arg03, #0
11140     28 89 B0 FD | 	call	#__system___basic_print_string
11144     00 12 06 F6 | 	mov	arg01, #0
11148     30 D5 B0 FD | 	call	#__system___getiolock_0423
1114c     FD 00 68 FC | 	wrlong	#0, result1
11150     28 12 06 F6 | 	mov	arg01, #40
11154     FC 46 B0 FD | 	call	#_printerror
11158     A7 12 02 F6 | 	mov	arg01, fp
1115c     1C 88 BF FD | 	call	#_push
11160                 | LR__1324
11160                 | LR__1325
11160                 | LR__1326
11160                 | LR__1327
11160     A7 F0 03 F6 | 	mov	ptra, fp
11164     B2 00 A0 FD | 	call	#popregs_
11168                 | _do_rnd_ret
11168     2D 00 64 FD | 	ret
1116c                 | 
1116c                 | ' 
1116c                 | ' sub do_sin
1116c                 | _do_sin
1116c     01 4A 05 F6 | 	mov	COUNT_, #1
11170     A8 00 A0 FD | 	call	#pushregs_
11174     10 F0 07 F1 | 	add	ptra, #16
11178     69 00 00 FF 
1117c     54 E5 05 F1 | 	add	objptr, ##54100
11180     F2 1E 02 FB | 	rdlong	local01, objptr
11184     0F 17 02 F6 | 	mov	arg03, local01
11188     01 16 66 F0 | 	shl	arg03, #1
1118c     0F 17 02 F1 | 	add	arg03, local01
11190     02 16 66 F0 | 	shl	arg03, #2
11194     03 00 00 FF 
11198     04 E4 85 F1 | 	sub	objptr, ##1540
1119c     F2 16 02 F1 | 	add	arg03, objptr
111a0     0B 17 02 FB | 	rdlong	arg03, arg03
111a4     0C 4E 05 F1 | 	add	fp, #12
111a8     A7 16 62 FC | 	wrlong	arg03, fp
111ac                 | ' 
111ac                 | ' numpar=compiledline(lineptr_e).result.uresult
111ac                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
111ac     0C 4E 85 F1 | 	sub	fp, #12
111b0     02 16 16 F2 | 	cmp	arg03, #2 wc
111b4     66 00 00 FF 
111b8     50 E5 85 F1 | 	sub	objptr, ##52560
111bc     0C 4E 05 C1 |  if_b	add	fp, #12
111c0     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
111c4     0C 4E 85 C1 |  if_b	sub	fp, #12
111c8     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1330
111cc     00 12 06 F6 | 	mov	arg01, #0
111d0     A8 D4 B0 FD | 	call	#__system___getiolock_0423
111d4     FD 12 02 F6 | 	mov	arg01, result1
111d8     9C 7B B0 FD | 	call	#__system___lockmem
111dc     44 01 00 FF 
111e0     22 14 06 F6 | 	mov	arg02, ##@LR__4587
111e4     00 12 06 F6 | 	mov	arg01, #0
111e8     00 16 06 F6 | 	mov	arg03, #0
111ec     7C 88 B0 FD | 	call	#__system___basic_print_string
111f0     00 12 06 F6 | 	mov	arg01, #0
111f4     84 D4 B0 FD | 	call	#__system___getiolock_0423
111f8     FD 00 68 FC | 	wrlong	#0, result1
111fc     27 12 06 F6 | 	mov	arg01, #39
11200     50 46 B0 FD | 	call	#_printerror
11204     64 00 90 FD | 	jmp	#LR__1331
11208                 | LR__1330
11208     D8 86 BF FD | 	call	#_pop
1120c     A7 FA 61 FC | 	wrlong	result1, fp
11210     04 4E 05 F1 | 	add	fp, #4
11214     A7 FC 61 FC | 	wrlong	result2, fp
11218     04 4E 05 F1 | 	add	fp, #4
1121c     A7 FE 61 FC | 	wrlong	result3, fp
11220     08 4E 85 F1 | 	sub	fp, #8
11224     7A 00 00 FF 
11228     5C E5 05 F1 | 	add	objptr, ##62812
1122c     F2 1E 02 FB | 	rdlong	local01, objptr
11230     7A 00 00 FF 
11234     5C E5 85 F1 | 	sub	objptr, ##62812
11238     A7 12 02 F6 | 	mov	arg01, fp
1123c     C0 FC BF FD | 	call	#_converttofloat
11240     FD 14 02 F6 | 	mov	arg02, result1
11244     0F 13 02 F6 | 	mov	arg01, local01
11248     18 A6 B0 FD | 	call	#__system___float_mul
1124c     FD 12 02 F6 | 	mov	arg01, result1
11250     4C AF B0 FD | 	call	#__system____builtin_sinf
11254     A7 FA 61 FC | 	wrlong	result1, fp
11258     08 4E 05 F1 | 	add	fp, #8
1125c     A7 3C 68 FC | 	wrlong	#30, fp
11260     08 4E 85 F1 | 	sub	fp, #8
11264     A7 12 02 F6 | 	mov	arg01, fp
11268     10 87 BF FD | 	call	#_push
1126c                 | LR__1331
1126c     A7 F0 03 F6 | 	mov	ptra, fp
11270     B2 00 A0 FD | 	call	#popregs_
11274                 | _do_sin_ret
11274     2D 00 64 FD | 	ret
11278                 | 
11278                 | ' 
11278                 | ' sub do_cos
11278                 | _do_cos
11278     01 4A 05 F6 | 	mov	COUNT_, #1
1127c     A8 00 A0 FD | 	call	#pushregs_
11280     10 F0 07 F1 | 	add	ptra, #16
11284     69 00 00 FF 
11288     54 E5 05 F1 | 	add	objptr, ##54100
1128c     F2 1E 02 FB | 	rdlong	local01, objptr
11290     0F 17 02 F6 | 	mov	arg03, local01
11294     01 16 66 F0 | 	shl	arg03, #1
11298     0F 17 02 F1 | 	add	arg03, local01
1129c     02 16 66 F0 | 	shl	arg03, #2
112a0     03 00 00 FF 
112a4     04 E4 85 F1 | 	sub	objptr, ##1540
112a8     F2 16 02 F1 | 	add	arg03, objptr
112ac     0B 17 02 FB | 	rdlong	arg03, arg03
112b0     0C 4E 05 F1 | 	add	fp, #12
112b4     A7 16 62 FC | 	wrlong	arg03, fp
112b8                 | ' 
112b8                 | ' numpar=compiledline(lineptr_e).result.uresult
112b8                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
112b8     0C 4E 85 F1 | 	sub	fp, #12
112bc     02 16 16 F2 | 	cmp	arg03, #2 wc
112c0     66 00 00 FF 
112c4     50 E5 85 F1 | 	sub	objptr, ##52560
112c8     0C 4E 05 C1 |  if_b	add	fp, #12
112cc     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
112d0     0C 4E 85 C1 |  if_b	sub	fp, #12
112d4     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1340
112d8     00 12 06 F6 | 	mov	arg01, #0
112dc     9C D3 B0 FD | 	call	#__system___getiolock_0423
112e0     FD 12 02 F6 | 	mov	arg01, result1
112e4     90 7A B0 FD | 	call	#__system___lockmem
112e8     44 01 00 FF 
112ec     28 14 06 F6 | 	mov	arg02, ##@LR__4588
112f0     00 12 06 F6 | 	mov	arg01, #0
112f4     00 16 06 F6 | 	mov	arg03, #0
112f8     70 87 B0 FD | 	call	#__system___basic_print_string
112fc     00 12 06 F6 | 	mov	arg01, #0
11300     78 D3 B0 FD | 	call	#__system___getiolock_0423
11304     FD 00 68 FC | 	wrlong	#0, result1
11308     27 12 06 F6 | 	mov	arg01, #39
1130c     44 45 B0 FD | 	call	#_printerror
11310     78 00 90 FD | 	jmp	#LR__1341
11314                 | LR__1340
11314     CC 85 BF FD | 	call	#_pop
11318     A7 FA 61 FC | 	wrlong	result1, fp
1131c     04 4E 05 F1 | 	add	fp, #4
11320     A7 FC 61 FC | 	wrlong	result2, fp
11324     04 4E 05 F1 | 	add	fp, #4
11328     A7 FE 61 FC | 	wrlong	result3, fp
1132c     08 4E 85 F1 | 	sub	fp, #8
11330     7A 00 00 FF 
11334     5C E5 05 F1 | 	add	objptr, ##62812
11338     F2 1E 02 FB | 	rdlong	local01, objptr
1133c     7A 00 00 FF 
11340     5C E5 85 F1 | 	sub	objptr, ##62812
11344     A7 12 02 F6 | 	mov	arg01, fp
11348     B4 FB BF FD | 	call	#_converttofloat
1134c     FD 14 02 F6 | 	mov	arg02, result1
11350     0F 13 02 F6 | 	mov	arg01, local01
11354     0C A5 B0 FD | 	call	#__system___float_mul
11358     FD 14 02 F6 | 	mov	arg02, result1
1135c     87 E4 1F FF 
11360     DB 13 06 F6 | 	mov	arg01, ##1070141403
11364     1F 14 E6 F4 | 	bitnot	arg02, #31
11368     28 A1 B0 FD | 	call	#__system___float_add
1136c     FD 12 02 F6 | 	mov	arg01, result1
11370     2C AE B0 FD | 	call	#__system____builtin_sinf
11374     A7 FA 61 FC | 	wrlong	result1, fp
11378     08 4E 05 F1 | 	add	fp, #8
1137c     A7 3C 68 FC | 	wrlong	#30, fp
11380     08 4E 85 F1 | 	sub	fp, #8
11384     A7 12 02 F6 | 	mov	arg01, fp
11388     F0 85 BF FD | 	call	#_push
1138c                 | LR__1341
1138c     A7 F0 03 F6 | 	mov	ptra, fp
11390     B2 00 A0 FD | 	call	#popregs_
11394                 | _do_cos_ret
11394     2D 00 64 FD | 	ret
11398                 | 
11398                 | ' 
11398                 | ' sub do_tan
11398                 | _do_tan
11398     01 4A 05 F6 | 	mov	COUNT_, #1
1139c     A8 00 A0 FD | 	call	#pushregs_
113a0     10 F0 07 F1 | 	add	ptra, #16
113a4     69 00 00 FF 
113a8     54 E5 05 F1 | 	add	objptr, ##54100
113ac     F2 1E 02 FB | 	rdlong	local01, objptr
113b0     0F 17 02 F6 | 	mov	arg03, local01
113b4     01 16 66 F0 | 	shl	arg03, #1
113b8     0F 17 02 F1 | 	add	arg03, local01
113bc     02 16 66 F0 | 	shl	arg03, #2
113c0     03 00 00 FF 
113c4     04 E4 85 F1 | 	sub	objptr, ##1540
113c8     F2 16 02 F1 | 	add	arg03, objptr
113cc     0B 17 02 FB | 	rdlong	arg03, arg03
113d0     0C 4E 05 F1 | 	add	fp, #12
113d4     A7 16 62 FC | 	wrlong	arg03, fp
113d8                 | ' 
113d8                 | ' numpar=compiledline(lineptr_e).result.uresult
113d8                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
113d8     0C 4E 85 F1 | 	sub	fp, #12
113dc     02 16 16 F2 | 	cmp	arg03, #2 wc
113e0     66 00 00 FF 
113e4     50 E5 85 F1 | 	sub	objptr, ##52560
113e8     0C 4E 05 C1 |  if_b	add	fp, #12
113ec     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
113f0     0C 4E 85 C1 |  if_b	sub	fp, #12
113f4     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1350
113f8     00 12 06 F6 | 	mov	arg01, #0
113fc     7C D2 B0 FD | 	call	#__system___getiolock_0423
11400     FD 12 02 F6 | 	mov	arg01, result1
11404     70 79 B0 FD | 	call	#__system___lockmem
11408     44 01 00 FF 
1140c     2E 14 06 F6 | 	mov	arg02, ##@LR__4589
11410     00 12 06 F6 | 	mov	arg01, #0
11414     00 16 06 F6 | 	mov	arg03, #0
11418     50 86 B0 FD | 	call	#__system___basic_print_string
1141c     00 12 06 F6 | 	mov	arg01, #0
11420     58 D2 B0 FD | 	call	#__system___getiolock_0423
11424     FD 00 68 FC | 	wrlong	#0, result1
11428     27 12 06 F6 | 	mov	arg01, #39
1142c     24 44 B0 FD | 	call	#_printerror
11430     64 00 90 FD | 	jmp	#LR__1351
11434                 | LR__1350
11434     AC 84 BF FD | 	call	#_pop
11438     A7 FA 61 FC | 	wrlong	result1, fp
1143c     04 4E 05 F1 | 	add	fp, #4
11440     A7 FC 61 FC | 	wrlong	result2, fp
11444     04 4E 05 F1 | 	add	fp, #4
11448     A7 FE 61 FC | 	wrlong	result3, fp
1144c     08 4E 85 F1 | 	sub	fp, #8
11450     7A 00 00 FF 
11454     5C E5 05 F1 | 	add	objptr, ##62812
11458     F2 1E 02 FB | 	rdlong	local01, objptr
1145c     7A 00 00 FF 
11460     5C E5 85 F1 | 	sub	objptr, ##62812
11464     A7 12 02 F6 | 	mov	arg01, fp
11468     94 FA BF FD | 	call	#_converttofloat
1146c     FD 14 02 F6 | 	mov	arg02, result1
11470     0F 13 02 F6 | 	mov	arg01, local01
11474     EC A3 B0 FD | 	call	#__system___float_mul
11478     FD 12 02 F6 | 	mov	arg01, result1
1147c     6C AE B0 FD | 	call	#__system____builtin_tanf
11480     A7 FA 61 FC | 	wrlong	result1, fp
11484     08 4E 05 F1 | 	add	fp, #8
11488     A7 3C 68 FC | 	wrlong	#30, fp
1148c     08 4E 85 F1 | 	sub	fp, #8
11490     A7 12 02 F6 | 	mov	arg01, fp
11494     E4 84 BF FD | 	call	#_push
11498                 | LR__1351
11498     A7 F0 03 F6 | 	mov	ptra, fp
1149c     B2 00 A0 FD | 	call	#popregs_
114a0                 | _do_tan_ret
114a0     2D 00 64 FD | 	ret
114a4                 | 
114a4                 | ' 
114a4                 | ' sub do_asin
114a4                 | _do_asin
114a4     01 4A 05 F6 | 	mov	COUNT_, #1
114a8     A8 00 A0 FD | 	call	#pushregs_
114ac     10 F0 07 F1 | 	add	ptra, #16
114b0     69 00 00 FF 
114b4     54 E5 05 F1 | 	add	objptr, ##54100
114b8     F2 1E 02 FB | 	rdlong	local01, objptr
114bc     0F 17 02 F6 | 	mov	arg03, local01
114c0     01 16 66 F0 | 	shl	arg03, #1
114c4     0F 17 02 F1 | 	add	arg03, local01
114c8     02 16 66 F0 | 	shl	arg03, #2
114cc     03 00 00 FF 
114d0     04 E4 85 F1 | 	sub	objptr, ##1540
114d4     F2 16 02 F1 | 	add	arg03, objptr
114d8     0B 17 02 FB | 	rdlong	arg03, arg03
114dc     0C 4E 05 F1 | 	add	fp, #12
114e0     A7 16 62 FC | 	wrlong	arg03, fp
114e4                 | ' 
114e4                 | ' numpar=compiledline(lineptr_e).result.uresult
114e4                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
114e4     0C 4E 85 F1 | 	sub	fp, #12
114e8     02 16 16 F2 | 	cmp	arg03, #2 wc
114ec     66 00 00 FF 
114f0     50 E5 85 F1 | 	sub	objptr, ##52560
114f4     0C 4E 05 C1 |  if_b	add	fp, #12
114f8     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
114fc     0C 4E 85 C1 |  if_b	sub	fp, #12
11500     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1360
11504     00 12 06 F6 | 	mov	arg01, #0
11508     70 D1 B0 FD | 	call	#__system___getiolock_0423
1150c     FD 12 02 F6 | 	mov	arg01, result1
11510     64 78 B0 FD | 	call	#__system___lockmem
11514     44 01 00 FF 
11518     34 14 06 F6 | 	mov	arg02, ##@LR__4590
1151c     00 12 06 F6 | 	mov	arg01, #0
11520     00 16 06 F6 | 	mov	arg03, #0
11524     44 85 B0 FD | 	call	#__system___basic_print_string
11528     00 12 06 F6 | 	mov	arg01, #0
1152c     4C D1 B0 FD | 	call	#__system___getiolock_0423
11530     FD 00 68 FC | 	wrlong	#0, result1
11534     27 12 06 F6 | 	mov	arg01, #39
11538     18 43 B0 FD | 	call	#_printerror
1153c     64 00 90 FD | 	jmp	#LR__1361
11540                 | LR__1360
11540     A0 83 BF FD | 	call	#_pop
11544     FF 1E 02 F6 | 	mov	local01, result3
11548     A7 FA 61 FC | 	wrlong	result1, fp
1154c     04 4E 05 F1 | 	add	fp, #4
11550     A7 FC 61 FC | 	wrlong	result2, fp
11554     04 4E 05 F1 | 	add	fp, #4
11558     A7 1E 62 FC | 	wrlong	local01, fp
1155c     08 4E 85 F1 | 	sub	fp, #8
11560     A7 12 02 F6 | 	mov	arg01, fp
11564     98 F9 BF FD | 	call	#_converttofloat
11568     FD 12 02 F6 | 	mov	arg01, result1
1156c     C4 AD B0 FD | 	call	#__system____builtin_asinf
11570     FD 12 02 F6 | 	mov	arg01, result1
11574     7A 00 00 FF 
11578     60 E5 05 F1 | 	add	objptr, ##62816
1157c     F2 14 02 FB | 	rdlong	arg02, objptr
11580     7A 00 00 FF 
11584     60 E5 85 F1 | 	sub	objptr, ##62816
11588     D8 A2 B0 FD | 	call	#__system___float_mul
1158c     A7 FA 61 FC | 	wrlong	result1, fp
11590     08 4E 05 F1 | 	add	fp, #8
11594     A7 3C 68 FC | 	wrlong	#30, fp
11598     08 4E 85 F1 | 	sub	fp, #8
1159c     A7 12 02 F6 | 	mov	arg01, fp
115a0     D8 83 BF FD | 	call	#_push
115a4                 | LR__1361
115a4     A7 F0 03 F6 | 	mov	ptra, fp
115a8     B2 00 A0 FD | 	call	#popregs_
115ac                 | _do_asin_ret
115ac     2D 00 64 FD | 	ret
115b0                 | 
115b0                 | ' 
115b0                 | ' sub do_acos
115b0                 | _do_acos
115b0     01 4A 05 F6 | 	mov	COUNT_, #1
115b4     A8 00 A0 FD | 	call	#pushregs_
115b8     10 F0 07 F1 | 	add	ptra, #16
115bc     69 00 00 FF 
115c0     54 E5 05 F1 | 	add	objptr, ##54100
115c4     F2 1E 02 FB | 	rdlong	local01, objptr
115c8     0F 17 02 F6 | 	mov	arg03, local01
115cc     01 16 66 F0 | 	shl	arg03, #1
115d0     0F 17 02 F1 | 	add	arg03, local01
115d4     02 16 66 F0 | 	shl	arg03, #2
115d8     03 00 00 FF 
115dc     04 E4 85 F1 | 	sub	objptr, ##1540
115e0     F2 16 02 F1 | 	add	arg03, objptr
115e4     0B 17 02 FB | 	rdlong	arg03, arg03
115e8     0C 4E 05 F1 | 	add	fp, #12
115ec     A7 16 62 FC | 	wrlong	arg03, fp
115f0                 | ' 
115f0                 | ' numpar=compiledline(lineptr_e).result.uresult
115f0                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
115f0     0C 4E 85 F1 | 	sub	fp, #12
115f4     02 16 16 F2 | 	cmp	arg03, #2 wc
115f8     66 00 00 FF 
115fc     50 E5 85 F1 | 	sub	objptr, ##52560
11600     0C 4E 05 C1 |  if_b	add	fp, #12
11604     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
11608     0C 4E 85 C1 |  if_b	sub	fp, #12
1160c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1370
11610     00 12 06 F6 | 	mov	arg01, #0
11614     64 D0 B0 FD | 	call	#__system___getiolock_0423
11618     FD 12 02 F6 | 	mov	arg01, result1
1161c     58 77 B0 FD | 	call	#__system___lockmem
11620     44 01 00 FF 
11624     3B 14 06 F6 | 	mov	arg02, ##@LR__4591
11628     00 12 06 F6 | 	mov	arg01, #0
1162c     00 16 06 F6 | 	mov	arg03, #0
11630     38 84 B0 FD | 	call	#__system___basic_print_string
11634     00 12 06 F6 | 	mov	arg01, #0
11638     40 D0 B0 FD | 	call	#__system___getiolock_0423
1163c     FD 00 68 FC | 	wrlong	#0, result1
11640     27 12 06 F6 | 	mov	arg01, #39
11644     0C 42 B0 FD | 	call	#_printerror
11648     64 00 90 FD | 	jmp	#LR__1371
1164c                 | LR__1370
1164c     94 82 BF FD | 	call	#_pop
11650     FF 1E 02 F6 | 	mov	local01, result3
11654     A7 FA 61 FC | 	wrlong	result1, fp
11658     04 4E 05 F1 | 	add	fp, #4
1165c     A7 FC 61 FC | 	wrlong	result2, fp
11660     04 4E 05 F1 | 	add	fp, #4
11664     A7 1E 62 FC | 	wrlong	local01, fp
11668     08 4E 85 F1 | 	sub	fp, #8
1166c     A7 12 02 F6 | 	mov	arg01, fp
11670     8C F8 BF FD | 	call	#_converttofloat
11674     FD 12 02 F6 | 	mov	arg01, result1
11678     04 AD B0 FD | 	call	#__system____builtin_acosf
1167c     FD 12 02 F6 | 	mov	arg01, result1
11680     7A 00 00 FF 
11684     60 E5 05 F1 | 	add	objptr, ##62816
11688     F2 14 02 FB | 	rdlong	arg02, objptr
1168c     7A 00 00 FF 
11690     60 E5 85 F1 | 	sub	objptr, ##62816
11694     CC A1 B0 FD | 	call	#__system___float_mul
11698     A7 FA 61 FC | 	wrlong	result1, fp
1169c     08 4E 05 F1 | 	add	fp, #8
116a0     A7 3C 68 FC | 	wrlong	#30, fp
116a4     08 4E 85 F1 | 	sub	fp, #8
116a8     A7 12 02 F6 | 	mov	arg01, fp
116ac     CC 82 BF FD | 	call	#_push
116b0                 | LR__1371
116b0     A7 F0 03 F6 | 	mov	ptra, fp
116b4     B2 00 A0 FD | 	call	#popregs_
116b8                 | _do_acos_ret
116b8     2D 00 64 FD | 	ret
116bc                 | 
116bc                 | ' 
116bc                 | ' sub do_atn
116bc                 | _do_atn
116bc     01 4A 05 F6 | 	mov	COUNT_, #1
116c0     A8 00 A0 FD | 	call	#pushregs_
116c4     10 F0 07 F1 | 	add	ptra, #16
116c8     69 00 00 FF 
116cc     54 E5 05 F1 | 	add	objptr, ##54100
116d0     F2 1E 02 FB | 	rdlong	local01, objptr
116d4     0F 17 02 F6 | 	mov	arg03, local01
116d8     01 16 66 F0 | 	shl	arg03, #1
116dc     0F 17 02 F1 | 	add	arg03, local01
116e0     02 16 66 F0 | 	shl	arg03, #2
116e4     03 00 00 FF 
116e8     04 E4 85 F1 | 	sub	objptr, ##1540
116ec     F2 16 02 F1 | 	add	arg03, objptr
116f0     0B 17 02 FB | 	rdlong	arg03, arg03
116f4     0C 4E 05 F1 | 	add	fp, #12
116f8     A7 16 62 FC | 	wrlong	arg03, fp
116fc                 | ' 
116fc                 | ' numpar=compiledline(lineptr_e).result.uresult
116fc                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
116fc     0C 4E 85 F1 | 	sub	fp, #12
11700     02 16 16 F2 | 	cmp	arg03, #2 wc
11704     66 00 00 FF 
11708     50 E5 85 F1 | 	sub	objptr, ##52560
1170c     0C 4E 05 C1 |  if_b	add	fp, #12
11710     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
11714     0C 4E 85 C1 |  if_b	sub	fp, #12
11718     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1380
1171c     00 12 06 F6 | 	mov	arg01, #0
11720     58 CF B0 FD | 	call	#__system___getiolock_0423
11724     FD 12 02 F6 | 	mov	arg01, result1
11728     4C 76 B0 FD | 	call	#__system___lockmem
1172c     44 01 00 FF 
11730     42 14 06 F6 | 	mov	arg02, ##@LR__4592
11734     00 12 06 F6 | 	mov	arg01, #0
11738     00 16 06 F6 | 	mov	arg03, #0
1173c     2C 83 B0 FD | 	call	#__system___basic_print_string
11740     00 12 06 F6 | 	mov	arg01, #0
11744     34 CF B0 FD | 	call	#__system___getiolock_0423
11748     FD 00 68 FC | 	wrlong	#0, result1
1174c     27 12 06 F6 | 	mov	arg01, #39
11750     00 41 B0 FD | 	call	#_printerror
11754     6C 00 90 FD | 	jmp	#LR__1381
11758                 | LR__1380
11758     88 81 BF FD | 	call	#_pop
1175c     FF 1E 02 F6 | 	mov	local01, result3
11760     A7 FA 61 FC | 	wrlong	result1, fp
11764     04 4E 05 F1 | 	add	fp, #4
11768     A7 FC 61 FC | 	wrlong	result2, fp
1176c     04 4E 05 F1 | 	add	fp, #4
11770     A7 1E 62 FC | 	wrlong	local01, fp
11774     08 4E 85 F1 | 	sub	fp, #8
11778     A7 12 02 F6 | 	mov	arg01, fp
1177c     80 F7 BF FD | 	call	#_converttofloat
11780     FD 12 02 F6 | 	mov	arg01, result1
11784     00 C0 1F FF 
11788     00 14 06 F6 | 	mov	arg02, ##1065353216
1178c     3C AC B0 FD | 	call	#__system____builtin_atan2f
11790     FD 12 02 F6 | 	mov	arg01, result1
11794     7A 00 00 FF 
11798     60 E5 05 F1 | 	add	objptr, ##62816
1179c     F2 14 02 FB | 	rdlong	arg02, objptr
117a0     7A 00 00 FF 
117a4     60 E5 85 F1 | 	sub	objptr, ##62816
117a8     B8 A0 B0 FD | 	call	#__system___float_mul
117ac     A7 FA 61 FC | 	wrlong	result1, fp
117b0     08 4E 05 F1 | 	add	fp, #8
117b4     A7 3C 68 FC | 	wrlong	#30, fp
117b8     08 4E 85 F1 | 	sub	fp, #8
117bc     A7 12 02 F6 | 	mov	arg01, fp
117c0     B8 81 BF FD | 	call	#_push
117c4                 | LR__1381
117c4     A7 F0 03 F6 | 	mov	ptra, fp
117c8     B2 00 A0 FD | 	call	#popregs_
117cc                 | _do_atn_ret
117cc     2D 00 64 FD | 	ret
117d0                 | 
117d0                 | ' 
117d0                 | ' sub do_sqr
117d0                 | _do_sqr
117d0     01 4A 05 F6 | 	mov	COUNT_, #1
117d4     A8 00 A0 FD | 	call	#pushregs_
117d8     10 F0 07 F1 | 	add	ptra, #16
117dc     69 00 00 FF 
117e0     54 E5 05 F1 | 	add	objptr, ##54100
117e4     F2 1E 02 FB | 	rdlong	local01, objptr
117e8     0F 17 02 F6 | 	mov	arg03, local01
117ec     01 16 66 F0 | 	shl	arg03, #1
117f0     0F 17 02 F1 | 	add	arg03, local01
117f4     02 16 66 F0 | 	shl	arg03, #2
117f8     03 00 00 FF 
117fc     04 E4 85 F1 | 	sub	objptr, ##1540
11800     F2 16 02 F1 | 	add	arg03, objptr
11804     0B 17 02 FB | 	rdlong	arg03, arg03
11808     0C 4E 05 F1 | 	add	fp, #12
1180c     A7 16 62 FC | 	wrlong	arg03, fp
11810                 | ' 
11810                 | ' numpar=compiledline(lineptr_e).result.uresult
11810                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
11810     0C 4E 85 F1 | 	sub	fp, #12
11814     02 16 16 F2 | 	cmp	arg03, #2 wc
11818     66 00 00 FF 
1181c     50 E5 85 F1 | 	sub	objptr, ##52560
11820     0C 4E 05 C1 |  if_b	add	fp, #12
11824     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
11828     0C 4E 85 C1 |  if_b	sub	fp, #12
1182c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1390
11830     00 12 06 F6 | 	mov	arg01, #0
11834     44 CE B0 FD | 	call	#__system___getiolock_0423
11838     FD 12 02 F6 | 	mov	arg01, result1
1183c     38 75 B0 FD | 	call	#__system___lockmem
11840     44 01 00 FF 
11844     48 14 06 F6 | 	mov	arg02, ##@LR__4593
11848     00 12 06 F6 | 	mov	arg01, #0
1184c     00 16 06 F6 | 	mov	arg03, #0
11850     18 82 B0 FD | 	call	#__system___basic_print_string
11854     00 12 06 F6 | 	mov	arg01, #0
11858     20 CE B0 FD | 	call	#__system___getiolock_0423
1185c     FD 00 68 FC | 	wrlong	#0, result1
11860     27 12 06 F6 | 	mov	arg01, #39
11864     EC 3F B0 FD | 	call	#_printerror
11868     48 00 90 FD | 	jmp	#LR__1391
1186c                 | LR__1390
1186c     74 80 BF FD | 	call	#_pop
11870     FF 1E 02 F6 | 	mov	local01, result3
11874     A7 FA 61 FC | 	wrlong	result1, fp
11878     04 4E 05 F1 | 	add	fp, #4
1187c     A7 FC 61 FC | 	wrlong	result2, fp
11880     04 4E 05 F1 | 	add	fp, #4
11884     A7 1E 62 FC | 	wrlong	local01, fp
11888     08 4E 85 F1 | 	sub	fp, #8
1188c     A7 12 02 F6 | 	mov	arg01, fp
11890     6C F6 BF FD | 	call	#_converttofloat
11894     FD 12 02 F6 | 	mov	arg01, result1
11898     F0 9E B0 FD | 	call	#__system___float_sqrt
1189c     A7 FA 61 FC | 	wrlong	result1, fp
118a0     08 4E 05 F1 | 	add	fp, #8
118a4     A7 3C 68 FC | 	wrlong	#30, fp
118a8     08 4E 85 F1 | 	sub	fp, #8
118ac     A7 12 02 F6 | 	mov	arg01, fp
118b0     C8 80 BF FD | 	call	#_push
118b4                 | LR__1391
118b4     A7 F0 03 F6 | 	mov	ptra, fp
118b8     B2 00 A0 FD | 	call	#popregs_
118bc                 | _do_sqr_ret
118bc     2D 00 64 FD | 	ret
118c0                 | 
118c0                 | ' 
118c0                 | ' sub do_stick
118c0                 | _do_stick
118c0     01 4A 05 F6 | 	mov	COUNT_, #1
118c4     A8 00 A0 FD | 	call	#pushregs_
118c8     10 F0 07 F1 | 	add	ptra, #16
118cc     69 00 00 FF 
118d0     54 E5 05 F1 | 	add	objptr, ##54100
118d4     F2 1E 02 FB | 	rdlong	local01, objptr
118d8     0F 17 02 F6 | 	mov	arg03, local01
118dc     01 16 66 F0 | 	shl	arg03, #1
118e0     0F 17 02 F1 | 	add	arg03, local01
118e4     02 16 66 F0 | 	shl	arg03, #2
118e8     03 00 00 FF 
118ec     04 E4 85 F1 | 	sub	objptr, ##1540
118f0     F2 16 02 F1 | 	add	arg03, objptr
118f4     0B 17 02 FB | 	rdlong	arg03, arg03
118f8     0C 4E 05 F1 | 	add	fp, #12
118fc     A7 16 62 FC | 	wrlong	arg03, fp
11900                 | ' 
11900                 | ' numpar=compiledline(lineptr_e).result.uresult
11900                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
11900     0C 4E 85 F1 | 	sub	fp, #12
11904     02 16 16 F2 | 	cmp	arg03, #2 wc
11908     66 00 00 FF 
1190c     50 E5 85 F1 | 	sub	objptr, ##52560
11910     3C 00 90 CD |  if_b	jmp	#LR__1400
11914     00 12 06 F6 | 	mov	arg01, #0
11918     60 CD B0 FD | 	call	#__system___getiolock_0423
1191c     FD 12 02 F6 | 	mov	arg01, result1
11920     54 74 B0 FD | 	call	#__system___lockmem
11924     44 01 00 FF 
11928     4E 14 06 F6 | 	mov	arg02, ##@LR__4594
1192c     00 12 06 F6 | 	mov	arg01, #0
11930     00 16 06 F6 | 	mov	arg03, #0
11934     34 81 B0 FD | 	call	#__system___basic_print_string
11938     00 12 06 F6 | 	mov	arg01, #0
1193c     3C CD B0 FD | 	call	#__system___getiolock_0423
11940     FD 00 68 FC | 	wrlong	#0, result1
11944     27 12 06 F6 | 	mov	arg01, #39
11948     08 3F B0 FD | 	call	#_printerror
1194c     E8 00 90 FD | 	jmp	#LR__1404
11950                 | LR__1400
11950                 | ' 
11950                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
11950     0C 4E 05 F1 | 	add	fp, #12
11954     A7 FE 09 FB | 	rdlong	result3, fp wz
11958     0C 4E 85 F1 | 	sub	fp, #12
1195c     30 00 90 5D |  if_ne	jmp	#LR__1401
11960     7A 00 00 FF 
11964     D0 E4 05 F1 | 	add	objptr, ##62672
11968     F2 1E 02 FB | 	rdlong	local01, objptr
1196c     7A 00 00 FF 
11970     D0 E4 85 F1 | 	sub	objptr, ##62672
11974     A7 1E 62 FC | 	wrlong	local01, fp
11978     08 4E 05 F1 | 	add	fp, #8
1197c     A7 3A 68 FC | 	wrlong	#29, fp
11980     08 4E 85 F1 | 	sub	fp, #8
11984     A7 12 02 F6 | 	mov	arg01, fp
11988     F0 7F BF FD | 	call	#_push
1198c     A8 00 90 FD | 	jmp	#LR__1404
11990                 | LR__1401
11990     50 7F BF FD | 	call	#_pop
11994     A7 FA 61 FC | 	wrlong	result1, fp
11998     04 4E 05 F1 | 	add	fp, #4
1199c     A7 FC 61 FC | 	wrlong	result2, fp
119a0     04 4E 05 F1 | 	add	fp, #4
119a4     A7 FE 61 FC | 	wrlong	result3, fp
119a8                 | ' 
119a8                 | ' t1=pop()
119a8                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
119a8     08 4E 85 F1 | 	sub	fp, #8
119ac     1C FE 0D F2 | 	cmp	result3, #28 wz
119b0     08 4E 05 51 |  if_ne	add	fp, #8
119b4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
119b8     08 4E 85 51 |  if_ne	sub	fp, #8
119bc     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
119c0     6C 00 90 5D |  if_ne	jmp	#LR__1403
119c4     A7 1E 02 FB | 	rdlong	local01, fp
119c8     7A 00 00 FF 
119cc     A8 E5 05 F1 | 	add	objptr, ##62888
119d0     F2 1E 62 FC | 	wrlong	local01, objptr
119d4                 | '   q=t1.result.uresult
119d4                 | '   if q<7 then 
119d4     7A 00 00 FF 
119d8     A8 E5 85 F1 | 	sub	objptr, ##62888
119dc     07 1E 56 F2 | 	cmps	local01, #7 wc
119e0     40 00 90 3D |  if_ae	jmp	#LR__1402
119e4     7A 00 00 FF 
119e8     A8 E5 05 F1 | 	add	objptr, ##62888
119ec     F2 1E 02 FB | 	rdlong	local01, objptr
119f0     02 1E 66 F0 | 	shl	local01, #2
119f4     D8 E4 85 F1 | 	sub	objptr, #216
119f8     F2 1E 02 F1 | 	add	local01, objptr
119fc     0F 1F 02 FB | 	rdlong	local01, local01
11a00     A7 1E 62 FC | 	wrlong	local01, fp
11a04     08 4E 05 F1 | 	add	fp, #8
11a08     A7 3A 68 FC | 	wrlong	#29, fp
11a0c     08 4E 85 F1 | 	sub	fp, #8
11a10     A7 12 02 F6 | 	mov	arg01, fp
11a14     7A 00 00 FF 
11a18     D0 E4 85 F1 | 	sub	objptr, ##62672
11a1c     5C 7F BF FD | 	call	#_push
11a20                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
11a20     14 00 90 FD | 	jmp	#LR__1404
11a24                 | LR__1402
11a24     29 12 06 F6 | 	mov	arg01, #41
11a28     28 3E B0 FD | 	call	#_printerror
11a2c                 | '      printerror(41) : return
11a2c     08 00 90 FD | 	jmp	#LR__1404
11a30                 | LR__1403
11a30     29 12 06 F6 | 	mov	arg01, #41
11a34     1C 3E B0 FD | 	call	#_printerror
11a38                 | LR__1404
11a38     A7 F0 03 F6 | 	mov	ptra, fp
11a3c     B2 00 A0 FD | 	call	#popregs_
11a40                 | _do_stick_ret
11a40     2D 00 64 FD | 	ret
11a44                 | 
11a44                 | ' 
11a44                 | ' sub do_strig
11a44                 | _do_strig
11a44     01 4A 05 F6 | 	mov	COUNT_, #1
11a48     A8 00 A0 FD | 	call	#pushregs_
11a4c     10 F0 07 F1 | 	add	ptra, #16
11a50     69 00 00 FF 
11a54     54 E5 05 F1 | 	add	objptr, ##54100
11a58     F2 1E 02 FB | 	rdlong	local01, objptr
11a5c     0F 17 02 F6 | 	mov	arg03, local01
11a60     01 16 66 F0 | 	shl	arg03, #1
11a64     0F 17 02 F1 | 	add	arg03, local01
11a68     02 16 66 F0 | 	shl	arg03, #2
11a6c     03 00 00 FF 
11a70     04 E4 85 F1 | 	sub	objptr, ##1540
11a74     F2 16 02 F1 | 	add	arg03, objptr
11a78     0B 17 02 FB | 	rdlong	arg03, arg03
11a7c     0C 4E 05 F1 | 	add	fp, #12
11a80     A7 16 62 FC | 	wrlong	arg03, fp
11a84                 | ' 
11a84                 | ' numpar=compiledline(lineptr_e).result.uresult
11a84                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
11a84     0C 4E 85 F1 | 	sub	fp, #12
11a88     02 16 16 F2 | 	cmp	arg03, #2 wc
11a8c     66 00 00 FF 
11a90     50 E5 85 F1 | 	sub	objptr, ##52560
11a94     3C 00 90 CD |  if_b	jmp	#LR__1410
11a98     00 12 06 F6 | 	mov	arg01, #0
11a9c     DC CB B0 FD | 	call	#__system___getiolock_0423
11aa0     FD 12 02 F6 | 	mov	arg01, result1
11aa4     D0 72 B0 FD | 	call	#__system___lockmem
11aa8     44 01 00 FF 
11aac     56 14 06 F6 | 	mov	arg02, ##@LR__4595
11ab0     00 12 06 F6 | 	mov	arg01, #0
11ab4     00 16 06 F6 | 	mov	arg03, #0
11ab8     B0 7F B0 FD | 	call	#__system___basic_print_string
11abc     00 12 06 F6 | 	mov	arg01, #0
11ac0     B8 CB B0 FD | 	call	#__system___getiolock_0423
11ac4     FD 00 68 FC | 	wrlong	#0, result1
11ac8     27 12 06 F6 | 	mov	arg01, #39
11acc     84 3D B0 FD | 	call	#_printerror
11ad0     E8 00 90 FD | 	jmp	#LR__1414
11ad4                 | LR__1410
11ad4                 | ' 
11ad4                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
11ad4     0C 4E 05 F1 | 	add	fp, #12
11ad8     A7 FE 09 FB | 	rdlong	result3, fp wz
11adc     0C 4E 85 F1 | 	sub	fp, #12
11ae0     30 00 90 5D |  if_ne	jmp	#LR__1411
11ae4     7A 00 00 FF 
11ae8     EC E4 05 F1 | 	add	objptr, ##62700
11aec     F2 1E 02 FB | 	rdlong	local01, objptr
11af0     7A 00 00 FF 
11af4     EC E4 85 F1 | 	sub	objptr, ##62700
11af8     A7 1E 62 FC | 	wrlong	local01, fp
11afc     08 4E 05 F1 | 	add	fp, #8
11b00     A7 3A 68 FC | 	wrlong	#29, fp
11b04     08 4E 85 F1 | 	sub	fp, #8
11b08     A7 12 02 F6 | 	mov	arg01, fp
11b0c     6C 7E BF FD | 	call	#_push
11b10     A8 00 90 FD | 	jmp	#LR__1414
11b14                 | LR__1411
11b14     CC 7D BF FD | 	call	#_pop
11b18     A7 FA 61 FC | 	wrlong	result1, fp
11b1c     04 4E 05 F1 | 	add	fp, #4
11b20     A7 FC 61 FC | 	wrlong	result2, fp
11b24     04 4E 05 F1 | 	add	fp, #4
11b28     A7 FE 61 FC | 	wrlong	result3, fp
11b2c                 | ' 
11b2c                 | ' t1=pop()
11b2c                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
11b2c     08 4E 85 F1 | 	sub	fp, #8
11b30     1C FE 0D F2 | 	cmp	result3, #28 wz
11b34     08 4E 05 51 |  if_ne	add	fp, #8
11b38     A7 1E 02 5B |  if_ne	rdlong	local01, fp
11b3c     08 4E 85 51 |  if_ne	sub	fp, #8
11b40     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
11b44     6C 00 90 5D |  if_ne	jmp	#LR__1413
11b48     A7 1E 02 FB | 	rdlong	local01, fp
11b4c     7A 00 00 FF 
11b50     A8 E5 05 F1 | 	add	objptr, ##62888
11b54     F2 1E 62 FC | 	wrlong	local01, objptr
11b58                 | '   q=t1.result.uresult
11b58                 | '   if q<7 then 
11b58     7A 00 00 FF 
11b5c     A8 E5 85 F1 | 	sub	objptr, ##62888
11b60     07 1E 56 F2 | 	cmps	local01, #7 wc
11b64     40 00 90 3D |  if_ae	jmp	#LR__1412
11b68     7A 00 00 FF 
11b6c     A8 E5 05 F1 | 	add	objptr, ##62888
11b70     F2 1E 02 FB | 	rdlong	local01, objptr
11b74     02 1E 66 F0 | 	shl	local01, #2
11b78     BC E4 85 F1 | 	sub	objptr, #188
11b7c     F2 1E 02 F1 | 	add	local01, objptr
11b80     0F 1F 02 FB | 	rdlong	local01, local01
11b84     A7 1E 62 FC | 	wrlong	local01, fp
11b88     08 4E 05 F1 | 	add	fp, #8
11b8c     A7 3A 68 FC | 	wrlong	#29, fp
11b90     08 4E 85 F1 | 	sub	fp, #8
11b94     A7 12 02 F6 | 	mov	arg01, fp
11b98     7A 00 00 FF 
11b9c     EC E4 85 F1 | 	sub	objptr, ##62700
11ba0     D8 7D BF FD | 	call	#_push
11ba4                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
11ba4     14 00 90 FD | 	jmp	#LR__1414
11ba8                 | LR__1412
11ba8     29 12 06 F6 | 	mov	arg01, #41
11bac     A4 3C B0 FD | 	call	#_printerror
11bb0                 | '      printerror(41) : return
11bb0     08 00 90 FD | 	jmp	#LR__1414
11bb4                 | LR__1413
11bb4     29 12 06 F6 | 	mov	arg01, #41
11bb8     98 3C B0 FD | 	call	#_printerror
11bbc                 | LR__1414
11bbc     A7 F0 03 F6 | 	mov	ptra, fp
11bc0     B2 00 A0 FD | 	call	#popregs_
11bc4                 | _do_strig_ret
11bc4     2D 00 64 FD | 	ret
11bc8                 | 
11bc8                 | ' 
11bc8                 | ' sub do_getpixel
11bc8                 | _do_getpixel
11bc8     00 4A 05 F6 | 	mov	COUNT_, #0
11bcc     A8 00 A0 FD | 	call	#pushregs_
11bd0     24 F0 07 F1 | 	add	ptra, #36
11bd4     69 00 00 FF 
11bd8     54 E5 05 F1 | 	add	objptr, ##54100
11bdc     F2 16 02 FB | 	rdlong	arg03, objptr
11be0     0B 15 02 F6 | 	mov	arg02, arg03
11be4     01 14 66 F0 | 	shl	arg02, #1
11be8     0B 15 02 F1 | 	add	arg02, arg03
11bec     02 14 66 F0 | 	shl	arg02, #2
11bf0     03 00 00 FF 
11bf4     04 E4 85 F1 | 	sub	objptr, ##1540
11bf8     F2 14 02 F1 | 	add	arg02, objptr
11bfc     0A 17 02 FB | 	rdlong	arg03, arg02
11c00     18 4E 05 F1 | 	add	fp, #24
11c04     A7 16 62 FC | 	wrlong	arg03, fp
11c08                 | ' 
11c08                 | ' numpar=compiledline(lineptr_e).result.uresult
11c08                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
11c08     18 4E 85 F1 | 	sub	fp, #24
11c0c     02 16 0E F2 | 	cmp	arg03, #2 wz
11c10     66 00 00 FF 
11c14     50 E5 85 F1 | 	sub	objptr, ##52560
11c18     3C 00 90 AD |  if_e	jmp	#LR__1420
11c1c     00 12 06 F6 | 	mov	arg01, #0
11c20     58 CA B0 FD | 	call	#__system___getiolock_0423
11c24     FD 12 02 F6 | 	mov	arg01, result1
11c28     4C 71 B0 FD | 	call	#__system___lockmem
11c2c     44 01 00 FF 
11c30     5E 14 06 F6 | 	mov	arg02, ##@LR__4596
11c34     00 12 06 F6 | 	mov	arg01, #0
11c38     00 16 06 F6 | 	mov	arg03, #0
11c3c     2C 7E B0 FD | 	call	#__system___basic_print_string
11c40     00 12 06 F6 | 	mov	arg01, #0
11c44     34 CA B0 FD | 	call	#__system___getiolock_0423
11c48     FD 00 68 FC | 	wrlong	#0, result1
11c4c     27 12 06 F6 | 	mov	arg01, #39
11c50     00 3C B0 FD | 	call	#_printerror
11c54     B4 00 90 FD | 	jmp	#LR__1421
11c58                 | LR__1420
11c58     88 7C BF FD | 	call	#_pop
11c5c     FD 16 02 F6 | 	mov	arg03, result1
11c60     FE 14 02 F6 | 	mov	arg02, result2
11c64     FF 12 02 F6 | 	mov	arg01, result3
11c68     0C 4E 05 F1 | 	add	fp, #12
11c6c     A7 16 62 FC | 	wrlong	arg03, fp
11c70     04 4E 05 F1 | 	add	fp, #4
11c74     A7 14 62 FC | 	wrlong	arg02, fp
11c78     04 4E 05 F1 | 	add	fp, #4
11c7c     A7 12 62 FC | 	wrlong	arg01, fp
11c80     14 4E 85 F1 | 	sub	fp, #20
11c84     5C 7C BF FD | 	call	#_pop
11c88     FF 16 02 F6 | 	mov	arg03, result3
11c8c     A7 FA 61 FC | 	wrlong	result1, fp
11c90     04 4E 05 F1 | 	add	fp, #4
11c94     A7 FC 61 FC | 	wrlong	result2, fp
11c98     04 4E 05 F1 | 	add	fp, #4
11c9c     A7 16 62 FC | 	wrlong	arg03, fp
11ca0     08 4E 85 F1 | 	sub	fp, #8
11ca4     A7 12 02 F6 | 	mov	arg01, fp
11ca8     A8 F1 BF FD | 	call	#_converttoint
11cac     1C 4E 05 F1 | 	add	fp, #28
11cb0     A7 FA 61 FC | 	wrlong	result1, fp
11cb4     10 4E 85 F1 | 	sub	fp, #16
11cb8     A7 12 02 F6 | 	mov	arg01, fp
11cbc     0C 4E 85 F1 | 	sub	fp, #12
11cc0     90 F1 BF FD | 	call	#_converttoint
11cc4     FD 16 02 F6 | 	mov	arg03, result1
11cc8     20 4E 05 F1 | 	add	fp, #32
11ccc     A7 16 62 FC | 	wrlong	arg03, fp
11cd0     F2 12 02 FB | 	rdlong	arg01, objptr
11cd4     04 4E 85 F1 | 	sub	fp, #4
11cd8     A7 FE 01 FB | 	rdlong	result3, fp
11cdc     FF 12 02 F1 | 	add	arg01, result3
11ce0     1C 4E 85 F1 | 	sub	fp, #28
11ce4     0A 16 66 F0 | 	shl	arg03, #10
11ce8     0B 13 02 F1 | 	add	arg01, arg03
11cec     C8 3C B0 FD | 	call	#_pspeek
11cf0     FD FA E1 F8 | 	getbyte	result1, result1, #0
11cf4     A7 FA 61 FC | 	wrlong	result1, fp
11cf8     08 4E 05 F1 | 	add	fp, #8
11cfc     A7 3A 68 FC | 	wrlong	#29, fp
11d00     08 4E 85 F1 | 	sub	fp, #8
11d04     A7 12 02 F6 | 	mov	arg01, fp
11d08     70 7C BF FD | 	call	#_push
11d0c                 | LR__1421
11d0c     A7 F0 03 F6 | 	mov	ptra, fp
11d10     B2 00 A0 FD | 	call	#popregs_
11d14                 | _do_getpixel_ret
11d14     2D 00 64 FD | 	ret
11d18                 | 
11d18                 | ' 
11d18                 | ' 
11d18                 | ' 
11d18                 | ' sub do_defsprite
11d18                 | _do_defsprite
11d18     07 4A 05 F6 | 	mov	COUNT_, #7
11d1c     A8 00 A0 FD | 	call	#pushregs_
11d20     5C F0 07 F1 | 	add	ptra, #92
11d24     BC 7B BF FD | 	call	#_pop
11d28     FD 16 02 F6 | 	mov	arg03, result1
11d2c     FE 14 02 F6 | 	mov	arg02, result2
11d30     FF 12 02 F6 | 	mov	arg01, result3
11d34     30 4E 05 F1 | 	add	fp, #48
11d38     A7 16 62 FC | 	wrlong	arg03, fp
11d3c     04 4E 05 F1 | 	add	fp, #4
11d40     A7 14 62 FC | 	wrlong	arg02, fp
11d44     04 4E 05 F1 | 	add	fp, #4
11d48     A7 12 62 FC | 	wrlong	arg01, fp
11d4c     38 4E 85 F1 | 	sub	fp, #56
11d50     90 7B BF FD | 	call	#_pop
11d54     FD 16 02 F6 | 	mov	arg03, result1
11d58     FE 14 02 F6 | 	mov	arg02, result2
11d5c     FF 12 02 F6 | 	mov	arg01, result3
11d60     24 4E 05 F1 | 	add	fp, #36
11d64     A7 16 62 FC | 	wrlong	arg03, fp
11d68     04 4E 05 F1 | 	add	fp, #4
11d6c     A7 14 62 FC | 	wrlong	arg02, fp
11d70     04 4E 05 F1 | 	add	fp, #4
11d74     A7 12 62 FC | 	wrlong	arg01, fp
11d78     2C 4E 85 F1 | 	sub	fp, #44
11d7c     64 7B BF FD | 	call	#_pop
11d80     FD 16 02 F6 | 	mov	arg03, result1
11d84     FE 14 02 F6 | 	mov	arg02, result2
11d88     FF 12 02 F6 | 	mov	arg01, result3
11d8c     18 4E 05 F1 | 	add	fp, #24
11d90     A7 16 62 FC | 	wrlong	arg03, fp
11d94     04 4E 05 F1 | 	add	fp, #4
11d98     A7 14 62 FC | 	wrlong	arg02, fp
11d9c     04 4E 05 F1 | 	add	fp, #4
11da0     A7 12 62 FC | 	wrlong	arg01, fp
11da4     20 4E 85 F1 | 	sub	fp, #32
11da8     38 7B BF FD | 	call	#_pop
11dac     FD 16 02 F6 | 	mov	arg03, result1
11db0     FE 14 02 F6 | 	mov	arg02, result2
11db4     FF 12 02 F6 | 	mov	arg01, result3
11db8     0C 4E 05 F1 | 	add	fp, #12
11dbc     A7 16 62 FC | 	wrlong	arg03, fp
11dc0     04 4E 05 F1 | 	add	fp, #4
11dc4     A7 14 62 FC | 	wrlong	arg02, fp
11dc8     04 4E 05 F1 | 	add	fp, #4
11dcc     A7 12 62 FC | 	wrlong	arg01, fp
11dd0     14 4E 85 F1 | 	sub	fp, #20
11dd4     0C 7B BF FD | 	call	#_pop
11dd8     FF 16 02 F6 | 	mov	arg03, result3
11ddc     A7 FA 61 FC | 	wrlong	result1, fp
11de0     04 4E 05 F1 | 	add	fp, #4
11de4     A7 FC 61 FC | 	wrlong	result2, fp
11de8     04 4E 05 F1 | 	add	fp, #4
11dec     A7 16 62 FC | 	wrlong	arg03, fp
11df0     08 4E 85 F1 | 	sub	fp, #8
11df4     A7 12 02 F6 | 	mov	arg01, fp
11df8     58 F0 BF FD | 	call	#_converttoint
11dfc     3C 4E 05 F1 | 	add	fp, #60
11e00     A7 FA 61 FC | 	wrlong	result1, fp
11e04     30 4E 85 F1 | 	sub	fp, #48
11e08     A7 12 02 F6 | 	mov	arg01, fp
11e0c     0C 4E 85 F1 | 	sub	fp, #12
11e10     40 F0 BF FD | 	call	#_converttoint
11e14     40 4E 05 F1 | 	add	fp, #64
11e18     A7 FA 61 FC | 	wrlong	result1, fp
11e1c     28 4E 85 F1 | 	sub	fp, #40
11e20     A7 12 02 F6 | 	mov	arg01, fp
11e24     18 4E 85 F1 | 	sub	fp, #24
11e28     28 F0 BF FD | 	call	#_converttoint
11e2c     44 4E 05 F1 | 	add	fp, #68
11e30     A7 FA 61 FC | 	wrlong	result1, fp
11e34     20 4E 85 F1 | 	sub	fp, #32
11e38     A7 12 02 F6 | 	mov	arg01, fp
11e3c     24 4E 85 F1 | 	sub	fp, #36
11e40     10 F0 BF FD | 	call	#_converttoint
11e44     48 4E 05 F1 | 	add	fp, #72
11e48     A7 FA 61 FC | 	wrlong	result1, fp
11e4c     18 4E 85 F1 | 	sub	fp, #24
11e50     A7 12 02 F6 | 	mov	arg01, fp
11e54     30 4E 85 F1 | 	sub	fp, #48
11e58     F8 EF BF FD | 	call	#_converttoint
11e5c     4C 4E 05 F1 | 	add	fp, #76
11e60     A7 FA 61 FC | 	wrlong	result1, fp
11e64                 | ' 
11e64                 | ' t5=pop()
11e64                 | ' t4=pop()
11e64                 | ' t3=pop()
11e64                 | ' t2=pop()
11e64                 | ' t1=pop()
11e64                 | ' 
11e64                 | ' ' do convert, defsprite is not a racing command
11e64                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5)
11e64                 | '  
11e64                 | ' ' todo: check parameters for linits
11e64                 | ' if sprite(a1)<> nil then delete(sprite(a1))
11e64     10 4E 85 F1 | 	sub	fp, #16
11e68     A7 16 02 FB | 	rdlong	arg03, fp
11e6c     3C 4E 85 F1 | 	sub	fp, #60
11e70     02 16 66 F0 | 	shl	arg03, #2
11e74     7A 00 00 FF 
11e78     08 E5 05 F1 | 	add	objptr, ##62728
11e7c     F2 16 02 F1 | 	add	arg03, objptr
11e80     0B 17 0A FB | 	rdlong	arg03, arg03 wz
11e84     7A 00 00 FF 
11e88     08 E5 85 F1 | 	sub	objptr, ##62728
11e8c     2C 00 90 AD |  if_e	jmp	#LR__1430
11e90     3C 4E 05 F1 | 	add	fp, #60
11e94     A7 16 02 FB | 	rdlong	arg03, fp
11e98     3C 4E 85 F1 | 	sub	fp, #60
11e9c     02 16 66 F0 | 	shl	arg03, #2
11ea0     7A 00 00 FF 
11ea4     08 E5 05 F1 | 	add	objptr, ##62728
11ea8     F2 16 02 F1 | 	add	arg03, objptr
11eac     0B 13 02 FB | 	rdlong	arg01, arg03
11eb0     7A 00 00 FF 
11eb4     08 E5 85 F1 | 	sub	objptr, ##62728
11eb8     B0 AD B0 FD | 	call	#__system___gc_free
11ebc                 | LR__1430
11ebc     3C 4E 05 F1 | 	add	fp, #60
11ec0     A7 1E 02 FB | 	rdlong	local01, fp
11ec4     0C 4E 05 F1 | 	add	fp, #12
11ec8     A7 16 02 FB | 	rdlong	arg03, fp
11ecc     04 4E 05 F1 | 	add	fp, #4
11ed0     A7 14 02 FB | 	rdlong	arg02, fp
11ed4     0A 17 02 FD | 	qmul	arg03, arg02
11ed8     02 1E 66 F0 | 	shl	local01, #2
11edc     7A 00 00 FF 
11ee0     08 E5 05 F1 | 	add	objptr, ##62728
11ee4     F2 1E 02 F1 | 	add	local01, objptr
11ee8     4C 4E 85 F1 | 	sub	fp, #76
11eec     7A 00 00 FF 
11ef0     08 E5 85 F1 | 	sub	objptr, ##62728
11ef4     18 12 62 FD | 	getqx	arg01
11ef8     34 AC B0 FD | 	call	#__system___gc_alloc_managed
11efc     0F FB 61 FC | 	wrlong	result1, local01
11f00                 | ' for y=a3 to a3+a5-1
11f00     44 4E 05 F1 | 	add	fp, #68
11f04     A7 20 02 FB | 	rdlong	local02, fp
11f08     0C 4E 05 F1 | 	add	fp, #12
11f0c     A7 20 62 FC | 	wrlong	local02, fp
11f10     0C 4E 85 F1 | 	sub	fp, #12
11f14     A7 22 02 FB | 	rdlong	local03, fp
11f18     08 4E 05 F1 | 	add	fp, #8
11f1c     A7 24 02 FB | 	rdlong	local04, fp
11f20     4C 4E 85 F1 | 	sub	fp, #76
11f24     12 23 02 F1 | 	add	local03, local04
11f28                 | LR__1431
11f28     50 4E 05 F1 | 	add	fp, #80
11f2c     A7 20 02 FB | 	rdlong	local02, fp
11f30     50 4E 85 F1 | 	sub	fp, #80
11f34     11 21 52 F2 | 	cmps	local02, local03 wc
11f38     10 01 90 3D |  if_ae	jmp	#LR__1434
11f3c                 | '   for x=a2 to a4+a2-1
11f3c     40 4E 05 F1 | 	add	fp, #64
11f40     A7 1E 02 FB | 	rdlong	local01, fp
11f44     7A 00 00 FF 
11f48     7C E5 05 F1 | 	add	objptr, ##62844
11f4c     F2 1E 62 FC | 	wrlong	local01, objptr
11f50     7A 00 00 FF 
11f54     7C E5 85 F1 | 	sub	objptr, ##62844
11f58     08 4E 05 F1 | 	add	fp, #8
11f5c     A7 26 02 FB | 	rdlong	local05, fp
11f60     08 4E 85 F1 | 	sub	fp, #8
11f64     A7 28 02 FB | 	rdlong	local06, fp
11f68     40 4E 85 F1 | 	sub	fp, #64
11f6c     14 27 02 F1 | 	add	local05, local06
11f70                 | LR__1432
11f70     7A 00 00 FF 
11f74     7C E5 05 F1 | 	add	objptr, ##62844
11f78     F2 1E 02 FB | 	rdlong	local01, objptr
11f7c     7A 00 00 FF 
11f80     7C E5 85 F1 | 	sub	objptr, ##62844
11f84     13 1F 52 F2 | 	cmps	local01, local05 wc
11f88     A8 00 90 3D |  if_ae	jmp	#LR__1433
11f8c     3C 4E 05 F1 | 	add	fp, #60
11f90     A7 28 02 FB | 	rdlong	local06, fp
11f94     04 4E 05 F1 | 	add	fp, #4
11f98     A7 24 02 FB | 	rdlong	local04, fp
11f9c     10 4E 05 F1 | 	add	fp, #16
11fa0     A7 20 02 FB | 	rdlong	local02, fp
11fa4     10 1F 02 F6 | 	mov	local01, local02
11fa8     0C 4E 85 F1 | 	sub	fp, #12
11fac     A7 16 02 FB | 	rdlong	arg03, fp
11fb0     0B 1F 82 F1 | 	sub	local01, arg03
11fb4     04 4E 05 F1 | 	add	fp, #4
11fb8     A7 16 02 FB | 	rdlong	arg03, fp
11fbc     0B 1F 02 FD | 	qmul	local01, arg03
11fc0     02 28 66 F0 | 	shl	local06, #2
11fc4     7A 00 00 FF 
11fc8     08 E5 05 F1 | 	add	objptr, ##62728
11fcc     F2 28 02 F1 | 	add	local06, objptr
11fd0     14 29 02 FB | 	rdlong	local06, local06
11fd4     74 E4 05 F1 | 	add	objptr, #116
11fd8     F2 1E 02 FB | 	rdlong	local01, objptr
11fdc     7A 00 00 FF 
11fe0     7C E5 85 F1 | 	sub	objptr, ##62844
11fe4     0F 2B 02 F6 | 	mov	local07, local01
11fe8     12 2B 82 F1 | 	sub	local07, local04
11fec     F2 12 02 FB | 	rdlong	arg01, objptr
11ff0     0F 13 02 F1 | 	add	arg01, local01
11ff4     48 4E 85 F1 | 	sub	fp, #72
11ff8     0A 20 66 F0 | 	shl	local02, #10
11ffc     10 13 02 F1 | 	add	arg01, local02
12000     18 24 62 FD | 	getqx	local04
12004     12 2B 02 F1 | 	add	local07, local04
12008     14 2B 02 F1 | 	add	local07, local06
1200c     A8 39 B0 FD | 	call	#_pspeek
12010     15 FB 41 FC | 	wrbyte	result1, local07
12014     7A 00 00 FF 
12018     7C E5 05 F1 | 	add	objptr, ##62844
1201c     F2 2A 02 FB | 	rdlong	local07, objptr
12020     01 2A 06 F1 | 	add	local07, #1
12024     F2 2A 62 FC | 	wrlong	local07, objptr
12028     7A 00 00 FF 
1202c     7C E5 85 F1 | 	sub	objptr, ##62844
12030     3C FF 9F FD | 	jmp	#LR__1432
12034                 | LR__1433
12034     50 4E 05 F1 | 	add	fp, #80
12038     A7 2A 02 FB | 	rdlong	local07, fp
1203c     01 2A 06 F1 | 	add	local07, #1
12040     A7 2A 62 FC | 	wrlong	local07, fp
12044     50 4E 85 F1 | 	sub	fp, #80
12048     DC FE 9F FD | 	jmp	#LR__1431
1204c                 | LR__1434
1204c     3C 4E 05 F1 | 	add	fp, #60
12050     A7 2A 02 FB | 	rdlong	local07, fp
12054     15 13 02 F6 | 	mov	arg01, local07
12058     3C 4E 85 F1 | 	sub	fp, #60
1205c     02 2A 66 F0 | 	shl	local07, #2
12060     7A 00 00 FF 
12064     08 E5 05 F1 | 	add	objptr, ##62728
12068     F2 2A 02 F1 | 	add	local07, objptr
1206c     15 15 02 FB | 	rdlong	arg02, local07
12070     7A 00 00 FF 
12074     08 E5 85 F1 | 	sub	objptr, ##62728
12078     EC 4C B0 FD | 	call	#_hg010b_spin2_setspriteptr
1207c     3C 4E 05 F1 | 	add	fp, #60
12080     A7 12 02 FB | 	rdlong	arg01, fp
12084     0C 4E 05 F1 | 	add	fp, #12
12088     A7 14 02 FB | 	rdlong	arg02, fp
1208c     04 4E 05 F1 | 	add	fp, #4
12090     A7 16 02 FB | 	rdlong	arg03, fp
12094     4C 4E 85 F1 | 	sub	fp, #76
12098     40 4D B0 FD | 	call	#_hg010b_spin2_setspritesize
1209c     A7 F0 03 F6 | 	mov	ptra, fp
120a0     B2 00 A0 FD | 	call	#popregs_
120a4                 | _do_defsprite_ret
120a4     2D 00 64 FD | 	ret
120a8                 | 
120a8                 | ' 
120a8                 | ' sub do_sprite
120a8                 | _do_sprite
120a8     00 4A 05 F6 | 	mov	COUNT_, #0
120ac     A8 00 A0 FD | 	call	#pushregs_
120b0     30 F0 07 F1 | 	add	ptra, #48
120b4     2C 78 BF FD | 	call	#_pop
120b8     FD 16 02 F6 | 	mov	arg03, result1
120bc     FE 14 02 F6 | 	mov	arg02, result2
120c0     FF 12 02 F6 | 	mov	arg01, result3
120c4     18 4E 05 F1 | 	add	fp, #24
120c8     A7 16 62 FC | 	wrlong	arg03, fp
120cc     04 4E 05 F1 | 	add	fp, #4
120d0     A7 14 62 FC | 	wrlong	arg02, fp
120d4     04 4E 05 F1 | 	add	fp, #4
120d8     A7 12 62 FC | 	wrlong	arg01, fp
120dc     20 4E 85 F1 | 	sub	fp, #32
120e0     00 78 BF FD | 	call	#_pop
120e4     FD 16 02 F6 | 	mov	arg03, result1
120e8     FE 14 02 F6 | 	mov	arg02, result2
120ec     FF 12 02 F6 | 	mov	arg01, result3
120f0     0C 4E 05 F1 | 	add	fp, #12
120f4     A7 16 62 FC | 	wrlong	arg03, fp
120f8     04 4E 05 F1 | 	add	fp, #4
120fc     A7 14 62 FC | 	wrlong	arg02, fp
12100     04 4E 05 F1 | 	add	fp, #4
12104     A7 12 62 FC | 	wrlong	arg01, fp
12108     14 4E 85 F1 | 	sub	fp, #20
1210c     D4 77 BF FD | 	call	#_pop
12110     FF 16 02 F6 | 	mov	arg03, result3
12114     A7 FA 61 FC | 	wrlong	result1, fp
12118     04 4E 05 F1 | 	add	fp, #4
1211c     A7 FC 61 FC | 	wrlong	result2, fp
12120     04 4E 05 F1 | 	add	fp, #4
12124     A7 16 62 FC | 	wrlong	arg03, fp
12128     08 4E 85 F1 | 	sub	fp, #8
1212c     A7 12 02 F6 | 	mov	arg01, fp
12130     20 ED BF FD | 	call	#_converttoint
12134     24 4E 05 F1 | 	add	fp, #36
12138     A7 FA 61 FC | 	wrlong	result1, fp
1213c     18 4E 85 F1 | 	sub	fp, #24
12140     A7 12 02 F6 | 	mov	arg01, fp
12144     0C 4E 85 F1 | 	sub	fp, #12
12148     08 ED BF FD | 	call	#_converttoint
1214c     28 4E 05 F1 | 	add	fp, #40
12150     A7 FA 61 FC | 	wrlong	result1, fp
12154     10 4E 85 F1 | 	sub	fp, #16
12158     A7 12 02 F6 | 	mov	arg01, fp
1215c     18 4E 85 F1 | 	sub	fp, #24
12160     F0 EC BF FD | 	call	#_converttoint
12164     2C 4E 05 F1 | 	add	fp, #44
12168     A7 FA 61 FC | 	wrlong	result1, fp
1216c     08 4E 85 F1 | 	sub	fp, #8
12170     A7 12 02 FB | 	rdlong	arg01, fp
12174     04 4E 05 F1 | 	add	fp, #4
12178     A7 14 02 FB | 	rdlong	arg02, fp
1217c     FD 16 02 F6 | 	mov	arg03, result1
12180     28 4E 85 F1 | 	sub	fp, #40
12184     08 4C B0 FD | 	call	#_hg010b_spin2_setspritepos
12188     A7 F0 03 F6 | 	mov	ptra, fp
1218c     B2 00 A0 FD | 	call	#popregs_
12190                 | _do_sprite_ret
12190     2D 00 64 FD | 	ret
12194                 | 
12194                 | ' 
12194                 | ' sub do_mousex
12194                 | _do_mousex
12194     00 4A 05 F6 | 	mov	COUNT_, #0
12198     A8 00 A0 FD | 	call	#pushregs_
1219c     0C F0 07 F1 | 	add	ptra, #12
121a0     08 4E 05 F1 | 	add	fp, #8
121a4     A7 3A 68 FC | 	wrlong	#29, fp
121a8     08 4E 85 F1 | 	sub	fp, #8
121ac     7A 00 00 FF 
121b0     C0 E4 05 F1 | 	add	objptr, ##62656
121b4     F2 12 02 FB | 	rdlong	arg01, objptr
121b8     7A 00 00 FF 
121bc     C0 E4 85 F1 | 	sub	objptr, ##62656
121c0     A7 12 62 FC | 	wrlong	arg01, fp
121c4     A7 12 02 F6 | 	mov	arg01, fp
121c8     B0 77 BF FD | 	call	#_push
121cc     A7 F0 03 F6 | 	mov	ptra, fp
121d0     B2 00 A0 FD | 	call	#popregs_
121d4                 | _do_mousex_ret
121d4     2D 00 64 FD | 	ret
121d8                 | 
121d8                 | ' 
121d8                 | ' sub do_mousey
121d8                 | _do_mousey
121d8     00 4A 05 F6 | 	mov	COUNT_, #0
121dc     A8 00 A0 FD | 	call	#pushregs_
121e0     0C F0 07 F1 | 	add	ptra, #12
121e4     08 4E 05 F1 | 	add	fp, #8
121e8     A7 3A 68 FC | 	wrlong	#29, fp
121ec     08 4E 85 F1 | 	sub	fp, #8
121f0     7A 00 00 FF 
121f4     C4 E4 05 F1 | 	add	objptr, ##62660
121f8     F2 12 02 FB | 	rdlong	arg01, objptr
121fc     7A 00 00 FF 
12200     C4 E4 85 F1 | 	sub	objptr, ##62660
12204     A7 12 62 FC | 	wrlong	arg01, fp
12208     A7 12 02 F6 | 	mov	arg01, fp
1220c     6C 77 BF FD | 	call	#_push
12210     A7 F0 03 F6 | 	mov	ptra, fp
12214     B2 00 A0 FD | 	call	#popregs_
12218                 | _do_mousey_ret
12218     2D 00 64 FD | 	ret
1221c                 | 
1221c                 | ' 
1221c                 | ' sub do_mousew
1221c                 | _do_mousew
1221c     00 4A 05 F6 | 	mov	COUNT_, #0
12220     A8 00 A0 FD | 	call	#pushregs_
12224     0C F0 07 F1 | 	add	ptra, #12
12228     08 4E 05 F1 | 	add	fp, #8
1222c     A7 38 68 FC | 	wrlong	#28, fp
12230     08 4E 85 F1 | 	sub	fp, #8
12234     7A 00 00 FF 
12238     CC E4 05 F1 | 	add	objptr, ##62668
1223c     F2 12 02 FB | 	rdlong	arg01, objptr
12240     7A 00 00 FF 
12244     CC E4 85 F1 | 	sub	objptr, ##62668
12248     A7 12 62 FC | 	wrlong	arg01, fp
1224c     A7 12 02 F6 | 	mov	arg01, fp
12250     28 77 BF FD | 	call	#_push
12254     A7 F0 03 F6 | 	mov	ptra, fp
12258     B2 00 A0 FD | 	call	#popregs_
1225c                 | _do_mousew_ret
1225c     2D 00 64 FD | 	ret
12260                 | 
12260                 | ' 
12260                 | ' sub do_mousek
12260                 | _do_mousek
12260     00 4A 05 F6 | 	mov	COUNT_, #0
12264     A8 00 A0 FD | 	call	#pushregs_
12268     0C F0 07 F1 | 	add	ptra, #12
1226c     08 4E 05 F1 | 	add	fp, #8
12270     A7 3A 68 FC | 	wrlong	#29, fp
12274     08 4E 85 F1 | 	sub	fp, #8
12278     7A 00 00 FF 
1227c     C8 E4 05 F1 | 	add	objptr, ##62664
12280     F2 12 02 FB | 	rdlong	arg01, objptr
12284     7A 00 00 FF 
12288     C8 E4 85 F1 | 	sub	objptr, ##62664
1228c     A7 12 62 FC | 	wrlong	arg01, fp
12290     A7 12 02 F6 | 	mov	arg01, fp
12294     E4 76 BF FD | 	call	#_push
12298     A7 F0 03 F6 | 	mov	ptra, fp
1229c     B2 00 A0 FD | 	call	#popregs_
122a0                 | _do_mousek_ret
122a0     2D 00 64 FD | 	ret
122a4                 | 
122a4                 | ' 
122a4                 | ' 
122a4                 | ' sub do_rdpin
122a4                 | _do_rdpin
122a4     00 4A 05 F6 | 	mov	COUNT_, #0
122a8     A8 00 A0 FD | 	call	#pushregs_
122ac     0C F0 07 F1 | 	add	ptra, #12
122b0     30 76 BF FD | 	call	#_pop
122b4     A7 FA 61 FC | 	wrlong	result1, fp
122b8     04 4E 05 F1 | 	add	fp, #4
122bc     A7 FC 61 FC | 	wrlong	result2, fp
122c0     04 4E 05 F1 | 	add	fp, #4
122c4     A7 FE 61 FC | 	wrlong	result3, fp
122c8     08 4E 85 F1 | 	sub	fp, #8
122cc     A7 12 02 F6 | 	mov	arg01, fp
122d0     80 EB BF FD | 	call	#_converttoint
122d4     FD FA 89 FA | 	rdpin	result1, result1
122d8     7A 00 00 FF 
122dc     D4 E5 05 F1 | 	add	objptr, ##62932
122e0     F2 FA 61 FC | 	wrlong	result1, objptr
122e4     7A 00 00 FF 
122e8     D4 E5 85 F1 | 	sub	objptr, ##62932
122ec     08 4E 05 F1 | 	add	fp, #8
122f0     A7 3A 68 FC | 	wrlong	#29, fp
122f4     08 4E 85 F1 | 	sub	fp, #8
122f8     A7 08 68 FC | 	wrlong	#4, fp
122fc     A7 12 02 F6 | 	mov	arg01, fp
12300     78 76 BF FD | 	call	#_push
12304     A7 F0 03 F6 | 	mov	ptra, fp
12308     B2 00 A0 FD | 	call	#popregs_
1230c                 | _do_rdpin_ret
1230c     2D 00 64 FD | 	ret
12310                 | 
12310                 | ' 
12310                 | ' sub do_rqpin
12310                 | _do_rqpin
12310     00 4A 05 F6 | 	mov	COUNT_, #0
12314     A8 00 A0 FD | 	call	#pushregs_
12318     0C F0 07 F1 | 	add	ptra, #12
1231c     C4 75 BF FD | 	call	#_pop
12320     A7 FA 61 FC | 	wrlong	result1, fp
12324     04 4E 05 F1 | 	add	fp, #4
12328     A7 FC 61 FC | 	wrlong	result2, fp
1232c     04 4E 05 F1 | 	add	fp, #4
12330     A7 FE 61 FC | 	wrlong	result3, fp
12334     08 4E 85 F1 | 	sub	fp, #8
12338     A7 12 02 F6 | 	mov	arg01, fp
1233c     14 EB BF FD | 	call	#_converttoint
12340     FD 12 02 F6 | 	mov	arg01, result1
12344     00 FA 05 F6 | 	mov	result1, #0
12348     09 FB 81 FA | 	rqpin	result1, arg01
1234c     7A 00 00 FF 
12350     D4 E5 05 F1 | 	add	objptr, ##62932
12354     F2 FA 61 FC | 	wrlong	result1, objptr
12358     7A 00 00 FF 
1235c     D4 E5 85 F1 | 	sub	objptr, ##62932
12360     08 4E 05 F1 | 	add	fp, #8
12364     A7 3A 68 FC | 	wrlong	#29, fp
12368     08 4E 85 F1 | 	sub	fp, #8
1236c     A7 08 68 FC | 	wrlong	#4, fp
12370     A7 12 02 F6 | 	mov	arg01, fp
12374     04 76 BF FD | 	call	#_push
12378     A7 F0 03 F6 | 	mov	ptra, fp
1237c     B2 00 A0 FD | 	call	#popregs_
12380                 | _do_rqpin_ret
12380     2D 00 64 FD | 	ret
12384                 | 
12384                 | ' 
12384                 | ' sub do_pinread
12384                 | _do_pinread
12384     00 4A 05 F6 | 	mov	COUNT_, #0
12388     A8 00 A0 FD | 	call	#pushregs_
1238c     0C F0 07 F1 | 	add	ptra, #12
12390     50 75 BF FD | 	call	#_pop
12394     A7 FA 61 FC | 	wrlong	result1, fp
12398     04 4E 05 F1 | 	add	fp, #4
1239c     A7 FC 61 FC | 	wrlong	result2, fp
123a0     04 4E 05 F1 | 	add	fp, #4
123a4     A7 FE 61 FC | 	wrlong	result3, fp
123a8     08 4E 85 F1 | 	sub	fp, #8
123ac     A7 12 02 F6 | 	mov	arg01, fp
123b0     A0 EA BF FD | 	call	#_converttoint
123b4     FD 12 02 F6 | 	mov	arg01, result1
123b8     20 12 CE F7 | 	test	arg01, #32 wz
123bc     FF FB 01 56 |  if_ne	mov	result1, inb
123c0     FE FB 01 A6 |  if_e	mov	result1, ina
123c4     09 FB 41 F0 | 	shr	result1, arg01
123c8     06 12 46 F0 | 	shr	arg01, #6
123cc     09 FB 41 F7 | 	zerox	result1, arg01
123d0     7A 00 00 FF 
123d4     D4 E5 05 F1 | 	add	objptr, ##62932
123d8     F2 FA 61 FC | 	wrlong	result1, objptr
123dc     7A 00 00 FF 
123e0     D4 E5 85 F1 | 	sub	objptr, ##62932
123e4     08 4E 05 F1 | 	add	fp, #8
123e8     A7 3A 68 FC | 	wrlong	#29, fp
123ec     08 4E 85 F1 | 	sub	fp, #8
123f0     A7 08 68 FC | 	wrlong	#4, fp
123f4     A7 12 02 F6 | 	mov	arg01, fp
123f8     80 75 BF FD | 	call	#_push
123fc     A7 F0 03 F6 | 	mov	ptra, fp
12400     B2 00 A0 FD | 	call	#popregs_
12404                 | _do_pinread_ret
12404     2D 00 64 FD | 	ret
12408                 | 
12408                 | ' 
12408                 | ' sub do_gettime
12408                 | _do_gettime
12408     02 4A 05 F6 | 	mov	COUNT_, #2
1240c     A8 00 A0 FD | 	call	#pushregs_
12410     14 F0 07 F1 | 	add	ptra, #20
12414                 | ' 
12414                 | ' const asm 
12414     1A 1E 72 FD | 	getct	local01 wc
12418     1A 20 62 FD | 	getct	local02
1241c                 | ' 
1241c                 | ' return hi1, lo1
1241c     10 FD 01 F6 | 	mov	result2, local02
12420     A7 1E 62 FC | 	wrlong	local01, fp
12424     04 4E 05 F1 | 	add	fp, #4
12428     A7 FC 61 FC | 	wrlong	result2, fp
1242c     0C 4E 05 F1 | 	add	fp, #12
12430     A7 3A 68 FC | 	wrlong	#29, fp
12434     0C 4E 85 F1 | 	sub	fp, #12
12438     A7 12 02 FB | 	rdlong	arg01, fp
1243c     04 4E 05 F1 | 	add	fp, #4
12440     A7 12 62 FC | 	wrlong	arg01, fp
12444     08 4E 85 F1 | 	sub	fp, #8
12448     A7 12 02 FB | 	rdlong	arg01, fp
1244c     0C 4E 05 F1 | 	add	fp, #12
12450     A7 12 62 FC | 	wrlong	arg01, fp
12454     04 4E 85 F1 | 	sub	fp, #4
12458     A7 12 02 F6 | 	mov	arg01, fp
1245c     08 4E 85 F1 | 	sub	fp, #8
12460     18 75 BF FD | 	call	#_push
12464     A7 F0 03 F6 | 	mov	ptra, fp
12468     B2 00 A0 FD | 	call	#popregs_
1246c                 | _do_gettime_ret
1246c     2D 00 64 FD | 	ret
12470                 | 
12470                 | '    
12470                 | ' 
12470                 | ' '' ----------------------------- Graphics related runtime procedures --------------------------------------
12470                 | ' 
12470                 | ' '' ----------------------------- Clear the screen
12470                 | ' 
12470                 | ' sub do_cls
12470                 | _do_cls
12470     56 00 00 FF 
12474     10 E5 05 F1 | 	add	objptr, ##44304
12478     F2 12 02 FB | 	rdlong	arg01, objptr
1247c     04 E4 85 F1 | 	sub	objptr, #4
12480     F2 14 02 FB | 	rdlong	arg02, objptr
12484     56 00 00 FF 
12488     0C E5 85 F1 | 	sub	objptr, ##44300
1248c     04 56 B0 FD | 	call	#_hg010b_spin2_cls
12490     56 00 00 FF 
12494     10 E5 05 F1 | 	add	objptr, ##44304
12498     F2 14 02 FB | 	rdlong	arg02, objptr
1249c     14 E4 85 F1 | 	sub	objptr, #20
124a0     F2 14 62 FC | 	wrlong	arg02, objptr
124a4     56 00 00 FF 
124a8     FC E4 85 F1 | 	sub	objptr, ##44284
124ac                 | ' cls(ink,paper): plot_color=ink: print
124ac     00 12 06 F6 | 	mov	arg01, #0
124b0     C8 C1 B0 FD | 	call	#__system___getiolock_0423
124b4     FD 12 02 F6 | 	mov	arg01, result1
124b8     BC 68 B0 FD | 	call	#__system___lockmem
124bc     00 12 06 F6 | 	mov	arg01, #0
124c0     0A 14 06 F6 | 	mov	arg02, #10
124c4     00 16 06 F6 | 	mov	arg03, #0
124c8     48 75 B0 FD | 	call	#__system___basic_print_char
124cc     00 12 06 F6 | 	mov	arg01, #0
124d0     A8 C1 B0 FD | 	call	#__system___getiolock_0423
124d4     FD 00 68 FC | 	wrlong	#0, result1
124d8                 | _do_cls_ret
124d8     2D 00 64 FD | 	ret
124dc                 | 
124dc                 | ' 
124dc                 | ' '' ----------------------------- Set a color # from the palette to plot/draw
124dc                 | ' 
124dc                 | ' sub do_color
124dc                 | _do_color
124dc     03 4A 05 F6 | 	mov	COUNT_, #3
124e0     A8 00 A0 FD | 	call	#pushregs_
124e4     FC 73 BF FD | 	call	#_pop
124e8     FD 1E 02 F6 | 	mov	local01, result1
124ec     FE 20 02 F6 | 	mov	local02, result2
124f0     FF 22 02 F6 | 	mov	local03, result3
124f4     56 00 00 FF 
124f8     FC E4 05 F1 | 	add	objptr, ##44284
124fc     F2 1E 62 FC | 	wrlong	local01, objptr
12500     56 00 00 FF 
12504     FC E4 85 F1 | 	sub	objptr, ##44284
12508     A7 F0 03 F6 | 	mov	ptra, fp
1250c     B2 00 A0 FD | 	call	#popregs_
12510                 | _do_color_ret
12510     2D 00 64 FD | 	ret
12514                 | 
12514                 | ' 
12514                 | ' ' ----------------------------- Plot a point, set starting point to draw a line
12514                 | ' 
12514                 | ' sub do_plot
12514                 | _do_plot
12514     00 4A 05 F6 | 	mov	COUNT_, #0
12518     A8 00 A0 FD | 	call	#pushregs_
1251c     20 F0 07 F1 | 	add	ptra, #32
12520     C0 73 BF FD | 	call	#_pop
12524     FD 16 02 F6 | 	mov	arg03, result1
12528     FE 14 02 F6 | 	mov	arg02, result2
1252c     FF 12 02 F6 | 	mov	arg01, result3
12530     0C 4E 05 F1 | 	add	fp, #12
12534     A7 16 62 FC | 	wrlong	arg03, fp
12538     04 4E 05 F1 | 	add	fp, #4
1253c     A7 14 62 FC | 	wrlong	arg02, fp
12540     04 4E 05 F1 | 	add	fp, #4
12544     A7 12 62 FC | 	wrlong	arg01, fp
12548     14 4E 85 F1 | 	sub	fp, #20
1254c     94 73 BF FD | 	call	#_pop
12550     FF 16 02 F6 | 	mov	arg03, result3
12554     A7 FA 61 FC | 	wrlong	result1, fp
12558     04 4E 05 F1 | 	add	fp, #4
1255c     A7 FC 61 FC | 	wrlong	result2, fp
12560     04 4E 05 F1 | 	add	fp, #4
12564     A7 16 62 FC | 	wrlong	arg03, fp
12568     08 4E 85 F1 | 	sub	fp, #8
1256c     A7 12 02 F6 | 	mov	arg01, fp
12570     E0 E8 BF FD | 	call	#_converttoint
12574     18 4E 05 F1 | 	add	fp, #24
12578     A7 FA 61 FC | 	wrlong	result1, fp
1257c     0C 4E 85 F1 | 	sub	fp, #12
12580     A7 12 02 F6 | 	mov	arg01, fp
12584     0C 4E 85 F1 | 	sub	fp, #12
12588     C8 E8 BF FD | 	call	#_converttoint
1258c     1C 4E 05 F1 | 	add	fp, #28
12590     A7 FA 61 FC | 	wrlong	result1, fp
12594     04 4E 85 F1 | 	sub	fp, #4
12598     A7 16 02 FB | 	rdlong	arg03, fp
1259c     56 00 00 FF 
125a0     00 E5 05 F1 | 	add	objptr, ##44288
125a4     F2 16 62 FC | 	wrlong	arg03, objptr
125a8     04 4E 05 F1 | 	add	fp, #4
125ac     A7 14 02 FB | 	rdlong	arg02, fp
125b0     1C 4E 85 F1 | 	sub	fp, #28
125b4     04 E4 05 F1 | 	add	objptr, #4
125b8     F2 14 62 FC | 	wrlong	arg02, objptr
125bc     04 E4 85 F1 | 	sub	objptr, #4
125c0     F2 12 02 FB | 	rdlong	arg01, objptr
125c4     04 E4 85 F1 | 	sub	objptr, #4
125c8     F2 16 02 FB | 	rdlong	arg03, objptr
125cc     56 00 00 FF 
125d0     FC E4 85 F1 | 	sub	objptr, ##44284
125d4     50 48 B0 FD | 	call	#_hg010b_spin2_putpixel
125d8     A7 F0 03 F6 | 	mov	ptra, fp
125dc     B2 00 A0 FD | 	call	#popregs_
125e0                 | _do_plot_ret
125e0     2D 00 64 FD | 	ret
125e4                 | 
125e4                 | ' 
125e4                 | ' ' --------------------------- Draw a line to point set by plot or previous draw, set a new starting point
125e4                 | ' 
125e4                 | ' sub do_draw
125e4                 | _do_draw
125e4     00 4A 05 F6 | 	mov	COUNT_, #0
125e8     A8 00 A0 FD | 	call	#pushregs_
125ec     20 F0 07 F1 | 	add	ptra, #32
125f0     F0 72 BF FD | 	call	#_pop
125f4     FD 1A 02 F6 | 	mov	arg05, result1
125f8     FE 18 02 F6 | 	mov	arg04, result2
125fc     FF 16 02 F6 | 	mov	arg03, result3
12600     0C 4E 05 F1 | 	add	fp, #12
12604     A7 1A 62 FC | 	wrlong	arg05, fp
12608     04 4E 05 F1 | 	add	fp, #4
1260c     A7 18 62 FC | 	wrlong	arg04, fp
12610     04 4E 05 F1 | 	add	fp, #4
12614     A7 16 62 FC | 	wrlong	arg03, fp
12618     14 4E 85 F1 | 	sub	fp, #20
1261c     C4 72 BF FD | 	call	#_pop
12620     FF 1A 02 F6 | 	mov	arg05, result3
12624     A7 FA 61 FC | 	wrlong	result1, fp
12628     04 4E 05 F1 | 	add	fp, #4
1262c     A7 FC 61 FC | 	wrlong	result2, fp
12630     04 4E 05 F1 | 	add	fp, #4
12634     A7 1A 62 FC | 	wrlong	arg05, fp
12638     08 4E 85 F1 | 	sub	fp, #8
1263c     A7 12 02 F6 | 	mov	arg01, fp
12640     10 E8 BF FD | 	call	#_converttoint
12644     18 4E 05 F1 | 	add	fp, #24
12648     A7 FA 61 FC | 	wrlong	result1, fp
1264c     0C 4E 85 F1 | 	sub	fp, #12
12650     A7 12 02 F6 | 	mov	arg01, fp
12654     0C 4E 85 F1 | 	sub	fp, #12
12658     F8 E7 BF FD | 	call	#_converttoint
1265c     1C 4E 05 F1 | 	add	fp, #28
12660     A7 FA 61 FC | 	wrlong	result1, fp
12664     56 00 00 FF 
12668     00 E5 05 F1 | 	add	objptr, ##44288
1266c     F2 12 02 FB | 	rdlong	arg01, objptr
12670     04 E4 05 F1 | 	add	objptr, #4
12674     F2 14 02 FB | 	rdlong	arg02, objptr
12678     04 4E 85 F1 | 	sub	fp, #4
1267c     A7 16 02 FB | 	rdlong	arg03, fp
12680     FD 18 02 F6 | 	mov	arg04, result1
12684     18 4E 85 F1 | 	sub	fp, #24
12688     08 E4 85 F1 | 	sub	objptr, #8
1268c     F2 1A 02 FB | 	rdlong	arg05, objptr
12690     56 00 00 FF 
12694     FC E4 85 F1 | 	sub	objptr, ##44284
12698     3C 4A B0 FD | 	call	#_hg010b_spin2_draw
1269c     18 4E 05 F1 | 	add	fp, #24
126a0     A7 1A 02 FB | 	rdlong	arg05, fp
126a4     56 00 00 FF 
126a8     00 E5 05 F1 | 	add	objptr, ##44288
126ac     F2 1A 62 FC | 	wrlong	arg05, objptr
126b0     04 4E 05 F1 | 	add	fp, #4
126b4     A7 1A 02 FB | 	rdlong	arg05, fp
126b8     1C 4E 85 F1 | 	sub	fp, #28
126bc     04 E4 05 F1 | 	add	objptr, #4
126c0     F2 1A 62 FC | 	wrlong	arg05, objptr
126c4     56 00 00 FF 
126c8     04 E5 85 F1 | 	sub	objptr, ##44292
126cc     A7 F0 03 F6 | 	mov	ptra, fp
126d0     B2 00 A0 FD | 	call	#popregs_
126d4                 | _do_draw_ret
126d4     2D 00 64 FD | 	ret
126d8                 | 
126d8                 | ' 
126d8                 | ' ' -------------------------- Draw a filled circle at x,y and radius r
126d8                 | ' 
126d8                 | ' sub do_fcircle
126d8                 | _do_fcircle
126d8     02 4A 05 F6 | 	mov	COUNT_, #2
126dc     A8 00 A0 FD | 	call	#pushregs_
126e0     24 F0 07 F1 | 	add	ptra, #36
126e4     FC 71 BF FD | 	call	#_pop
126e8     FD 18 02 F6 | 	mov	arg04, result1
126ec     FE 16 02 F6 | 	mov	arg03, result2
126f0     FF 14 02 F6 | 	mov	arg02, result3
126f4     18 4E 05 F1 | 	add	fp, #24
126f8     A7 18 62 FC | 	wrlong	arg04, fp
126fc     04 4E 05 F1 | 	add	fp, #4
12700     A7 16 62 FC | 	wrlong	arg03, fp
12704     04 4E 05 F1 | 	add	fp, #4
12708     A7 14 62 FC | 	wrlong	arg02, fp
1270c     20 4E 85 F1 | 	sub	fp, #32
12710     D0 71 BF FD | 	call	#_pop
12714     FD 18 02 F6 | 	mov	arg04, result1
12718     FE 16 02 F6 | 	mov	arg03, result2
1271c     FF 1E 02 F6 | 	mov	local01, result3
12720     0C 4E 05 F1 | 	add	fp, #12
12724     A7 18 62 FC | 	wrlong	arg04, fp
12728     04 4E 05 F1 | 	add	fp, #4
1272c     A7 16 62 FC | 	wrlong	arg03, fp
12730     04 4E 05 F1 | 	add	fp, #4
12734     A7 1E 62 FC | 	wrlong	local01, fp
12738     14 4E 85 F1 | 	sub	fp, #20
1273c     A4 71 BF FD | 	call	#_pop
12740     A7 FA 61 FC | 	wrlong	result1, fp
12744     04 4E 05 F1 | 	add	fp, #4
12748     A7 FC 61 FC | 	wrlong	result2, fp
1274c     04 4E 05 F1 | 	add	fp, #4
12750     A7 FE 61 FC | 	wrlong	result3, fp
12754                 | ' 
12754                 | ' t3=pop()
12754                 | ' t2=pop()
12754                 | ' t1=pop()
12754                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
12754     FF 18 02 F6 | 	mov	arg04, result3
12758     08 4E 85 F1 | 	sub	fp, #8
1275c     1C 18 0E F2 | 	cmp	arg04, #28 wz
12760     08 4E 05 51 |  if_ne	add	fp, #8
12764     A7 1E 02 5B |  if_ne	rdlong	local01, fp
12768     08 4E 85 51 |  if_ne	sub	fp, #8
1276c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
12770     7C 00 90 5D |  if_ne	jmp	#LR__1440
12774     14 4E 05 F1 | 	add	fp, #20
12778     A7 1E 02 FB | 	rdlong	local01, fp
1277c     14 4E 85 F1 | 	sub	fp, #20
12780     1C 1E 0E F2 | 	cmp	local01, #28 wz
12784     14 4E 05 51 |  if_ne	add	fp, #20
12788     A7 18 02 5B |  if_ne	rdlong	arg04, fp
1278c     14 4E 85 51 |  if_ne	sub	fp, #20
12790     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
12794     58 00 90 5D |  if_ne	jmp	#LR__1440
12798     20 4E 05 F1 | 	add	fp, #32
1279c     A7 1E 02 FB | 	rdlong	local01, fp
127a0     20 4E 85 F1 | 	sub	fp, #32
127a4     1C 1E 0E F2 | 	cmp	local01, #28 wz
127a8     20 4E 05 51 |  if_ne	add	fp, #32
127ac     A7 18 02 5B |  if_ne	rdlong	arg04, fp
127b0     20 4E 85 51 |  if_ne	sub	fp, #32
127b4     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
127b8     34 00 90 5D |  if_ne	jmp	#LR__1440
127bc     A7 12 02 FB | 	rdlong	arg01, fp
127c0     0C 4E 05 F1 | 	add	fp, #12
127c4     A7 14 02 FB | 	rdlong	arg02, fp
127c8     0C 4E 05 F1 | 	add	fp, #12
127cc     A7 16 02 FB | 	rdlong	arg03, fp
127d0     18 4E 85 F1 | 	sub	fp, #24
127d4     56 00 00 FF 
127d8     FC E4 05 F1 | 	add	objptr, ##44284
127dc     F2 18 02 FB | 	rdlong	arg04, objptr
127e0     56 00 00 FF 
127e4     FC E4 85 F1 | 	sub	objptr, ##44284
127e8     70 4D B0 FD | 	call	#_hg010b_spin2_fcircle
127ec                 | '    v.fcircle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
127ec     54 00 90 FD | 	jmp	#LR__1441
127f0                 | LR__1440
127f0     A7 12 02 F6 | 	mov	arg01, fp
127f4     5C E6 BF FD | 	call	#_converttoint
127f8     FD 1E 02 F6 | 	mov	local01, result1
127fc     0C 4E 05 F1 | 	add	fp, #12
12800     A7 12 02 F6 | 	mov	arg01, fp
12804     0C 4E 85 F1 | 	sub	fp, #12
12808     48 E6 BF FD | 	call	#_converttoint
1280c     FD 20 02 F6 | 	mov	local02, result1
12810     18 4E 05 F1 | 	add	fp, #24
12814     A7 12 02 F6 | 	mov	arg01, fp
12818     18 4E 85 F1 | 	sub	fp, #24
1281c     34 E6 BF FD | 	call	#_converttoint
12820     FD 16 02 F6 | 	mov	arg03, result1
12824     56 00 00 FF 
12828     FC E4 05 F1 | 	add	objptr, ##44284
1282c     F2 18 02 FB | 	rdlong	arg04, objptr
12830     56 00 00 FF 
12834     FC E4 85 F1 | 	sub	objptr, ##44284
12838     0F 13 02 F6 | 	mov	arg01, local01
1283c     10 15 02 F6 | 	mov	arg02, local02
12840     18 4D B0 FD | 	call	#_hg010b_spin2_fcircle
12844                 | LR__1441
12844     A7 F0 03 F6 | 	mov	ptra, fp
12848     B2 00 A0 FD | 	call	#popregs_
1284c                 | _do_fcircle_ret
1284c     2D 00 64 FD | 	ret
12850                 | 
12850                 | ' 
12850                 | ' ' -------------------------- Draw an empty circle at x,y and radius r
12850                 | ' 
12850                 | ' sub do_circle
12850                 | _do_circle
12850     02 4A 05 F6 | 	mov	COUNT_, #2
12854     A8 00 A0 FD | 	call	#pushregs_
12858     24 F0 07 F1 | 	add	ptra, #36
1285c     84 70 BF FD | 	call	#_pop
12860     FD 18 02 F6 | 	mov	arg04, result1
12864     FE 16 02 F6 | 	mov	arg03, result2
12868     FF 14 02 F6 | 	mov	arg02, result3
1286c     18 4E 05 F1 | 	add	fp, #24
12870     A7 18 62 FC | 	wrlong	arg04, fp
12874     04 4E 05 F1 | 	add	fp, #4
12878     A7 16 62 FC | 	wrlong	arg03, fp
1287c     04 4E 05 F1 | 	add	fp, #4
12880     A7 14 62 FC | 	wrlong	arg02, fp
12884     20 4E 85 F1 | 	sub	fp, #32
12888     58 70 BF FD | 	call	#_pop
1288c     FD 18 02 F6 | 	mov	arg04, result1
12890     FE 16 02 F6 | 	mov	arg03, result2
12894     FF 1E 02 F6 | 	mov	local01, result3
12898     0C 4E 05 F1 | 	add	fp, #12
1289c     A7 18 62 FC | 	wrlong	arg04, fp
128a0     04 4E 05 F1 | 	add	fp, #4
128a4     A7 16 62 FC | 	wrlong	arg03, fp
128a8     04 4E 05 F1 | 	add	fp, #4
128ac     A7 1E 62 FC | 	wrlong	local01, fp
128b0     14 4E 85 F1 | 	sub	fp, #20
128b4     2C 70 BF FD | 	call	#_pop
128b8     A7 FA 61 FC | 	wrlong	result1, fp
128bc     04 4E 05 F1 | 	add	fp, #4
128c0     A7 FC 61 FC | 	wrlong	result2, fp
128c4     04 4E 05 F1 | 	add	fp, #4
128c8     A7 FE 61 FC | 	wrlong	result3, fp
128cc                 | ' 
128cc                 | ' t3=pop()
128cc                 | ' t2=pop()
128cc                 | ' t1=pop()
128cc                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
128cc     FF 18 02 F6 | 	mov	arg04, result3
128d0     08 4E 85 F1 | 	sub	fp, #8
128d4     1C 18 0E F2 | 	cmp	arg04, #28 wz
128d8     08 4E 05 51 |  if_ne	add	fp, #8
128dc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
128e0     08 4E 85 51 |  if_ne	sub	fp, #8
128e4     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
128e8     7C 00 90 5D |  if_ne	jmp	#LR__1450
128ec     14 4E 05 F1 | 	add	fp, #20
128f0     A7 1E 02 FB | 	rdlong	local01, fp
128f4     14 4E 85 F1 | 	sub	fp, #20
128f8     1C 1E 0E F2 | 	cmp	local01, #28 wz
128fc     14 4E 05 51 |  if_ne	add	fp, #20
12900     A7 18 02 5B |  if_ne	rdlong	arg04, fp
12904     14 4E 85 51 |  if_ne	sub	fp, #20
12908     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
1290c     58 00 90 5D |  if_ne	jmp	#LR__1450
12910     20 4E 05 F1 | 	add	fp, #32
12914     A7 1E 02 FB | 	rdlong	local01, fp
12918     20 4E 85 F1 | 	sub	fp, #32
1291c     1C 1E 0E F2 | 	cmp	local01, #28 wz
12920     20 4E 05 51 |  if_ne	add	fp, #32
12924     A7 18 02 5B |  if_ne	rdlong	arg04, fp
12928     20 4E 85 51 |  if_ne	sub	fp, #32
1292c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
12930     34 00 90 5D |  if_ne	jmp	#LR__1450
12934     A7 12 02 FB | 	rdlong	arg01, fp
12938     0C 4E 05 F1 | 	add	fp, #12
1293c     A7 14 02 FB | 	rdlong	arg02, fp
12940     0C 4E 05 F1 | 	add	fp, #12
12944     A7 16 02 FB | 	rdlong	arg03, fp
12948     18 4E 85 F1 | 	sub	fp, #24
1294c     56 00 00 FF 
12950     FC E4 05 F1 | 	add	objptr, ##44284
12954     F2 18 02 FB | 	rdlong	arg04, objptr
12958     56 00 00 FF 
1295c     FC E4 85 F1 | 	sub	objptr, ##44284
12960     04 4D B0 FD | 	call	#_hg010b_spin2_circle
12964                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
12964     54 00 90 FD | 	jmp	#LR__1451
12968                 | LR__1450
12968     A7 12 02 F6 | 	mov	arg01, fp
1296c     E4 E4 BF FD | 	call	#_converttoint
12970     FD 1E 02 F6 | 	mov	local01, result1
12974     0C 4E 05 F1 | 	add	fp, #12
12978     A7 12 02 F6 | 	mov	arg01, fp
1297c     0C 4E 85 F1 | 	sub	fp, #12
12980     D0 E4 BF FD | 	call	#_converttoint
12984     FD 20 02 F6 | 	mov	local02, result1
12988     18 4E 05 F1 | 	add	fp, #24
1298c     A7 12 02 F6 | 	mov	arg01, fp
12990     18 4E 85 F1 | 	sub	fp, #24
12994     BC E4 BF FD | 	call	#_converttoint
12998     FD 16 02 F6 | 	mov	arg03, result1
1299c     56 00 00 FF 
129a0     FC E4 05 F1 | 	add	objptr, ##44284
129a4     F2 18 02 FB | 	rdlong	arg04, objptr
129a8     56 00 00 FF 
129ac     FC E4 85 F1 | 	sub	objptr, ##44284
129b0     0F 13 02 F6 | 	mov	arg01, local01
129b4     10 15 02 F6 | 	mov	arg02, local02
129b8     AC 4C B0 FD | 	call	#_hg010b_spin2_circle
129bc                 | LR__1451
129bc     A7 F0 03 F6 | 	mov	ptra, fp
129c0     B2 00 A0 FD | 	call	#popregs_
129c4                 | _do_circle_ret
129c4     2D 00 64 FD | 	ret
129c8                 | 
129c8                 | ' 
129c8                 | ' ' -------------------------- Draw a rectangle
129c8                 | ' 
129c8                 | ' sub do_box
129c8                 | _do_box
129c8     03 4A 05 F6 | 	mov	COUNT_, #3
129cc     A8 00 A0 FD | 	call	#pushregs_
129d0     30 F0 07 F1 | 	add	ptra, #48
129d4     0C 6F BF FD | 	call	#_pop
129d8     FD 1A 02 F6 | 	mov	arg05, result1
129dc     FE 18 02 F6 | 	mov	arg04, result2
129e0     FF 16 02 F6 | 	mov	arg03, result3
129e4     24 4E 05 F1 | 	add	fp, #36
129e8     A7 1A 62 FC | 	wrlong	arg05, fp
129ec     04 4E 05 F1 | 	add	fp, #4
129f0     A7 18 62 FC | 	wrlong	arg04, fp
129f4     04 4E 05 F1 | 	add	fp, #4
129f8     A7 16 62 FC | 	wrlong	arg03, fp
129fc     2C 4E 85 F1 | 	sub	fp, #44
12a00     E0 6E BF FD | 	call	#_pop
12a04     FD 1A 02 F6 | 	mov	arg05, result1
12a08     FE 18 02 F6 | 	mov	arg04, result2
12a0c     FF 16 02 F6 | 	mov	arg03, result3
12a10     18 4E 05 F1 | 	add	fp, #24
12a14     A7 1A 62 FC | 	wrlong	arg05, fp
12a18     04 4E 05 F1 | 	add	fp, #4
12a1c     A7 18 62 FC | 	wrlong	arg04, fp
12a20     04 4E 05 F1 | 	add	fp, #4
12a24     A7 16 62 FC | 	wrlong	arg03, fp
12a28     20 4E 85 F1 | 	sub	fp, #32
12a2c     B4 6E BF FD | 	call	#_pop
12a30     FD 1A 02 F6 | 	mov	arg05, result1
12a34     FE 18 02 F6 | 	mov	arg04, result2
12a38     FF 1E 02 F6 | 	mov	local01, result3
12a3c     0C 4E 05 F1 | 	add	fp, #12
12a40     A7 1A 62 FC | 	wrlong	arg05, fp
12a44     04 4E 05 F1 | 	add	fp, #4
12a48     A7 18 62 FC | 	wrlong	arg04, fp
12a4c     04 4E 05 F1 | 	add	fp, #4
12a50     A7 1E 62 FC | 	wrlong	local01, fp
12a54     14 4E 85 F1 | 	sub	fp, #20
12a58     88 6E BF FD | 	call	#_pop
12a5c     A7 FA 61 FC | 	wrlong	result1, fp
12a60     04 4E 05 F1 | 	add	fp, #4
12a64     A7 FC 61 FC | 	wrlong	result2, fp
12a68     04 4E 05 F1 | 	add	fp, #4
12a6c     A7 FE 61 FC | 	wrlong	result3, fp
12a70                 | ' 
12a70                 | ' t4=pop()
12a70                 | ' t3=pop()
12a70                 | ' t2=pop()
12a70                 | ' t1=pop()
12a70                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
12a70     FF 1A 02 F6 | 	mov	arg05, result3
12a74     08 4E 85 F1 | 	sub	fp, #8
12a78     1C 1A 0E F2 | 	cmp	arg05, #28 wz
12a7c     08 4E 05 51 |  if_ne	add	fp, #8
12a80     A7 1E 02 5B |  if_ne	rdlong	local01, fp
12a84     08 4E 85 51 |  if_ne	sub	fp, #8
12a88     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
12a8c     A8 00 90 5D |  if_ne	jmp	#LR__1460
12a90     14 4E 05 F1 | 	add	fp, #20
12a94     A7 1E 02 FB | 	rdlong	local01, fp
12a98     14 4E 85 F1 | 	sub	fp, #20
12a9c     1C 1E 0E F2 | 	cmp	local01, #28 wz
12aa0     14 4E 05 51 |  if_ne	add	fp, #20
12aa4     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
12aa8     14 4E 85 51 |  if_ne	sub	fp, #20
12aac     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
12ab0     84 00 90 5D |  if_ne	jmp	#LR__1460
12ab4     20 4E 05 F1 | 	add	fp, #32
12ab8     A7 1E 02 FB | 	rdlong	local01, fp
12abc     20 4E 85 F1 | 	sub	fp, #32
12ac0     1C 1E 0E F2 | 	cmp	local01, #28 wz
12ac4     20 4E 05 51 |  if_ne	add	fp, #32
12ac8     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
12acc     20 4E 85 51 |  if_ne	sub	fp, #32
12ad0     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
12ad4     60 00 90 5D |  if_ne	jmp	#LR__1460
12ad8     2C 4E 05 F1 | 	add	fp, #44
12adc     A7 1E 02 FB | 	rdlong	local01, fp
12ae0     2C 4E 85 F1 | 	sub	fp, #44
12ae4     1C 1E 0E F2 | 	cmp	local01, #28 wz
12ae8     2C 4E 05 51 |  if_ne	add	fp, #44
12aec     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
12af0     2C 4E 85 51 |  if_ne	sub	fp, #44
12af4     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
12af8     3C 00 90 5D |  if_ne	jmp	#LR__1460
12afc     A7 12 02 FB | 	rdlong	arg01, fp
12b00     0C 4E 05 F1 | 	add	fp, #12
12b04     A7 14 02 FB | 	rdlong	arg02, fp
12b08     0C 4E 05 F1 | 	add	fp, #12
12b0c     A7 16 02 FB | 	rdlong	arg03, fp
12b10     0C 4E 05 F1 | 	add	fp, #12
12b14     A7 18 02 FB | 	rdlong	arg04, fp
12b18     24 4E 85 F1 | 	sub	fp, #36
12b1c     56 00 00 FF 
12b20     FC E4 05 F1 | 	add	objptr, ##44284
12b24     F2 1A 02 FB | 	rdlong	arg05, objptr
12b28     56 00 00 FF 
12b2c     FC E4 85 F1 | 	sub	objptr, ##44284
12b30     00 4D B0 FD | 	call	#_hg010b_spin2_box
12b34                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
12b34     6C 00 90 FD | 	jmp	#LR__1461
12b38                 | LR__1460
12b38     A7 12 02 F6 | 	mov	arg01, fp
12b3c     14 E3 BF FD | 	call	#_converttoint
12b40     FD 20 02 F6 | 	mov	local02, result1
12b44     0C 4E 05 F1 | 	add	fp, #12
12b48     A7 12 02 F6 | 	mov	arg01, fp
12b4c     0C 4E 85 F1 | 	sub	fp, #12
12b50     00 E3 BF FD | 	call	#_converttoint
12b54     FD 22 02 F6 | 	mov	local03, result1
12b58     18 4E 05 F1 | 	add	fp, #24
12b5c     A7 12 02 F6 | 	mov	arg01, fp
12b60     18 4E 85 F1 | 	sub	fp, #24
12b64     EC E2 BF FD | 	call	#_converttoint
12b68     FD 1E 02 F6 | 	mov	local01, result1
12b6c     24 4E 05 F1 | 	add	fp, #36
12b70     A7 12 02 F6 | 	mov	arg01, fp
12b74     24 4E 85 F1 | 	sub	fp, #36
12b78     D8 E2 BF FD | 	call	#_converttoint
12b7c     FD 18 02 F6 | 	mov	arg04, result1
12b80     56 00 00 FF 
12b84     FC E4 05 F1 | 	add	objptr, ##44284
12b88     F2 1A 02 FB | 	rdlong	arg05, objptr
12b8c     56 00 00 FF 
12b90     FC E4 85 F1 | 	sub	objptr, ##44284
12b94     10 13 02 F6 | 	mov	arg01, local02
12b98     11 15 02 F6 | 	mov	arg02, local03
12b9c     0F 17 02 F6 | 	mov	arg03, local01
12ba0     90 4C B0 FD | 	call	#_hg010b_spin2_box
12ba4                 | LR__1461
12ba4     A7 F0 03 F6 | 	mov	ptra, fp
12ba8     B2 00 A0 FD | 	call	#popregs_
12bac                 | _do_box_ret
12bac     2D 00 64 FD | 	ret
12bb0                 | 
12bb0                 | ' 
12bb0                 | ' sub do_fill
12bb0                 | _do_fill
12bb0     03 4A 05 F6 | 	mov	COUNT_, #3
12bb4     A8 00 A0 FD | 	call	#pushregs_
12bb8     30 F0 07 F1 | 	add	ptra, #48
12bbc     24 6D BF FD | 	call	#_pop
12bc0     FD 18 02 F6 | 	mov	arg04, result1
12bc4     FE 16 02 F6 | 	mov	arg03, result2
12bc8     FF 14 02 F6 | 	mov	arg02, result3
12bcc     24 4E 05 F1 | 	add	fp, #36
12bd0     A7 18 62 FC | 	wrlong	arg04, fp
12bd4     04 4E 05 F1 | 	add	fp, #4
12bd8     A7 16 62 FC | 	wrlong	arg03, fp
12bdc     04 4E 05 F1 | 	add	fp, #4
12be0     A7 14 62 FC | 	wrlong	arg02, fp
12be4     2C 4E 85 F1 | 	sub	fp, #44
12be8     F8 6C BF FD | 	call	#_pop
12bec     FD 18 02 F6 | 	mov	arg04, result1
12bf0     FE 16 02 F6 | 	mov	arg03, result2
12bf4     FF 14 02 F6 | 	mov	arg02, result3
12bf8     18 4E 05 F1 | 	add	fp, #24
12bfc     A7 18 62 FC | 	wrlong	arg04, fp
12c00     04 4E 05 F1 | 	add	fp, #4
12c04     A7 16 62 FC | 	wrlong	arg03, fp
12c08     04 4E 05 F1 | 	add	fp, #4
12c0c     A7 14 62 FC | 	wrlong	arg02, fp
12c10     20 4E 85 F1 | 	sub	fp, #32
12c14     CC 6C BF FD | 	call	#_pop
12c18     FD 18 02 F6 | 	mov	arg04, result1
12c1c     FE 16 02 F6 | 	mov	arg03, result2
12c20     FF 1E 02 F6 | 	mov	local01, result3
12c24     0C 4E 05 F1 | 	add	fp, #12
12c28     A7 18 62 FC | 	wrlong	arg04, fp
12c2c     04 4E 05 F1 | 	add	fp, #4
12c30     A7 16 62 FC | 	wrlong	arg03, fp
12c34     04 4E 05 F1 | 	add	fp, #4
12c38     A7 1E 62 FC | 	wrlong	local01, fp
12c3c     14 4E 85 F1 | 	sub	fp, #20
12c40     A0 6C BF FD | 	call	#_pop
12c44     A7 FA 61 FC | 	wrlong	result1, fp
12c48     04 4E 05 F1 | 	add	fp, #4
12c4c     A7 FC 61 FC | 	wrlong	result2, fp
12c50     04 4E 05 F1 | 	add	fp, #4
12c54     A7 FE 61 FC | 	wrlong	result3, fp
12c58                 | ' 
12c58                 | ' t4=pop()
12c58                 | ' t3=pop()
12c58                 | ' t2=pop()
12c58                 | ' t1=pop()
12c58                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
12c58     FF 18 02 F6 | 	mov	arg04, result3
12c5c     08 4E 85 F1 | 	sub	fp, #8
12c60     1C 18 0E F2 | 	cmp	arg04, #28 wz
12c64     08 4E 05 51 |  if_ne	add	fp, #8
12c68     A7 1E 02 5B |  if_ne	rdlong	local01, fp
12c6c     08 4E 85 51 |  if_ne	sub	fp, #8
12c70     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
12c74     94 00 90 5D |  if_ne	jmp	#LR__1470
12c78     14 4E 05 F1 | 	add	fp, #20
12c7c     A7 1E 02 FB | 	rdlong	local01, fp
12c80     14 4E 85 F1 | 	sub	fp, #20
12c84     1C 1E 0E F2 | 	cmp	local01, #28 wz
12c88     14 4E 05 51 |  if_ne	add	fp, #20
12c8c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
12c90     14 4E 85 51 |  if_ne	sub	fp, #20
12c94     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
12c98     70 00 90 5D |  if_ne	jmp	#LR__1470
12c9c     20 4E 05 F1 | 	add	fp, #32
12ca0     A7 1E 02 FB | 	rdlong	local01, fp
12ca4     20 4E 85 F1 | 	sub	fp, #32
12ca8     1C 1E 0E F2 | 	cmp	local01, #28 wz
12cac     20 4E 05 51 |  if_ne	add	fp, #32
12cb0     A7 18 02 5B |  if_ne	rdlong	arg04, fp
12cb4     20 4E 85 51 |  if_ne	sub	fp, #32
12cb8     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
12cbc     4C 00 90 5D |  if_ne	jmp	#LR__1470
12cc0     2C 4E 05 F1 | 	add	fp, #44
12cc4     A7 1E 02 FB | 	rdlong	local01, fp
12cc8     2C 4E 85 F1 | 	sub	fp, #44
12ccc     1C 1E 0E F2 | 	cmp	local01, #28 wz
12cd0     2C 4E 05 51 |  if_ne	add	fp, #44
12cd4     A7 18 02 5B |  if_ne	rdlong	arg04, fp
12cd8     2C 4E 85 51 |  if_ne	sub	fp, #44
12cdc     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
12ce0     28 00 90 5D |  if_ne	jmp	#LR__1470
12ce4     A7 12 02 FB | 	rdlong	arg01, fp
12ce8     0C 4E 05 F1 | 	add	fp, #12
12cec     A7 14 02 FB | 	rdlong	arg02, fp
12cf0     0C 4E 05 F1 | 	add	fp, #12
12cf4     A7 16 02 FB | 	rdlong	arg03, fp
12cf8     0C 4E 05 F1 | 	add	fp, #12
12cfc     A7 18 02 FB | 	rdlong	arg04, fp
12d00     24 4E 85 F1 | 	sub	fp, #36
12d04     C0 45 B0 FD | 	call	#_hg010b_spin2_fill
12d08                 | '    v.fill(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult) : return
12d08     58 00 90 FD | 	jmp	#LR__1471
12d0c                 | LR__1470
12d0c     A7 12 02 F6 | 	mov	arg01, fp
12d10     40 E1 BF FD | 	call	#_converttoint
12d14     FD 20 02 F6 | 	mov	local02, result1
12d18     0C 4E 05 F1 | 	add	fp, #12
12d1c     A7 12 02 F6 | 	mov	arg01, fp
12d20     0C 4E 85 F1 | 	sub	fp, #12
12d24     2C E1 BF FD | 	call	#_converttoint
12d28     FD 22 02 F6 | 	mov	local03, result1
12d2c     18 4E 05 F1 | 	add	fp, #24
12d30     A7 12 02 F6 | 	mov	arg01, fp
12d34     18 4E 85 F1 | 	sub	fp, #24
12d38     18 E1 BF FD | 	call	#_converttoint
12d3c     FD 1E 02 F6 | 	mov	local01, result1
12d40     24 4E 05 F1 | 	add	fp, #36
12d44     A7 12 02 F6 | 	mov	arg01, fp
12d48     24 4E 85 F1 | 	sub	fp, #36
12d4c     04 E1 BF FD | 	call	#_converttoint
12d50     FD 18 02 F6 | 	mov	arg04, result1
12d54     10 13 02 F6 | 	mov	arg01, local02
12d58     11 15 02 F6 | 	mov	arg02, local03
12d5c     0F 17 02 F6 | 	mov	arg03, local01
12d60     64 45 B0 FD | 	call	#_hg010b_spin2_fill
12d64                 | LR__1471
12d64     A7 F0 03 F6 | 	mov	ptra, fp
12d68     B2 00 A0 FD | 	call	#popregs_
12d6c                 | _do_fill_ret
12d6c     2D 00 64 FD | 	ret
12d70                 | 
12d70                 | ' 
12d70                 | ' ' -------------------------- Draw a frane
12d70                 | ' 
12d70                 | ' sub do_frame
12d70                 | _do_frame
12d70     03 4A 05 F6 | 	mov	COUNT_, #3
12d74     A8 00 A0 FD | 	call	#pushregs_
12d78     30 F0 07 F1 | 	add	ptra, #48
12d7c     64 6B BF FD | 	call	#_pop
12d80     FD 1A 02 F6 | 	mov	arg05, result1
12d84     FE 18 02 F6 | 	mov	arg04, result2
12d88     FF 16 02 F6 | 	mov	arg03, result3
12d8c     24 4E 05 F1 | 	add	fp, #36
12d90     A7 1A 62 FC | 	wrlong	arg05, fp
12d94     04 4E 05 F1 | 	add	fp, #4
12d98     A7 18 62 FC | 	wrlong	arg04, fp
12d9c     04 4E 05 F1 | 	add	fp, #4
12da0     A7 16 62 FC | 	wrlong	arg03, fp
12da4     2C 4E 85 F1 | 	sub	fp, #44
12da8     38 6B BF FD | 	call	#_pop
12dac     FD 1A 02 F6 | 	mov	arg05, result1
12db0     FE 18 02 F6 | 	mov	arg04, result2
12db4     FF 16 02 F6 | 	mov	arg03, result3
12db8     18 4E 05 F1 | 	add	fp, #24
12dbc     A7 1A 62 FC | 	wrlong	arg05, fp
12dc0     04 4E 05 F1 | 	add	fp, #4
12dc4     A7 18 62 FC | 	wrlong	arg04, fp
12dc8     04 4E 05 F1 | 	add	fp, #4
12dcc     A7 16 62 FC | 	wrlong	arg03, fp
12dd0     20 4E 85 F1 | 	sub	fp, #32
12dd4     0C 6B BF FD | 	call	#_pop
12dd8     FD 1A 02 F6 | 	mov	arg05, result1
12ddc     FE 18 02 F6 | 	mov	arg04, result2
12de0     FF 1E 02 F6 | 	mov	local01, result3
12de4     0C 4E 05 F1 | 	add	fp, #12
12de8     A7 1A 62 FC | 	wrlong	arg05, fp
12dec     04 4E 05 F1 | 	add	fp, #4
12df0     A7 18 62 FC | 	wrlong	arg04, fp
12df4     04 4E 05 F1 | 	add	fp, #4
12df8     A7 1E 62 FC | 	wrlong	local01, fp
12dfc     14 4E 85 F1 | 	sub	fp, #20
12e00     E0 6A BF FD | 	call	#_pop
12e04     A7 FA 61 FC | 	wrlong	result1, fp
12e08     04 4E 05 F1 | 	add	fp, #4
12e0c     A7 FC 61 FC | 	wrlong	result2, fp
12e10     04 4E 05 F1 | 	add	fp, #4
12e14     A7 FE 61 FC | 	wrlong	result3, fp
12e18                 | ' 
12e18                 | ' t4=pop()
12e18                 | ' t3=pop()
12e18                 | ' t2=pop()
12e18                 | ' t1=pop()
12e18                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
12e18     FF 1A 02 F6 | 	mov	arg05, result3
12e1c     08 4E 85 F1 | 	sub	fp, #8
12e20     1C 1A 0E F2 | 	cmp	arg05, #28 wz
12e24     08 4E 05 51 |  if_ne	add	fp, #8
12e28     A7 1E 02 5B |  if_ne	rdlong	local01, fp
12e2c     08 4E 85 51 |  if_ne	sub	fp, #8
12e30     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
12e34     A8 00 90 5D |  if_ne	jmp	#LR__1480
12e38     14 4E 05 F1 | 	add	fp, #20
12e3c     A7 1E 02 FB | 	rdlong	local01, fp
12e40     14 4E 85 F1 | 	sub	fp, #20
12e44     1C 1E 0E F2 | 	cmp	local01, #28 wz
12e48     14 4E 05 51 |  if_ne	add	fp, #20
12e4c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
12e50     14 4E 85 51 |  if_ne	sub	fp, #20
12e54     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
12e58     84 00 90 5D |  if_ne	jmp	#LR__1480
12e5c     20 4E 05 F1 | 	add	fp, #32
12e60     A7 1E 02 FB | 	rdlong	local01, fp
12e64     20 4E 85 F1 | 	sub	fp, #32
12e68     1C 1E 0E F2 | 	cmp	local01, #28 wz
12e6c     20 4E 05 51 |  if_ne	add	fp, #32
12e70     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
12e74     20 4E 85 51 |  if_ne	sub	fp, #32
12e78     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
12e7c     60 00 90 5D |  if_ne	jmp	#LR__1480
12e80     2C 4E 05 F1 | 	add	fp, #44
12e84     A7 1E 02 FB | 	rdlong	local01, fp
12e88     2C 4E 85 F1 | 	sub	fp, #44
12e8c     1C 1E 0E F2 | 	cmp	local01, #28 wz
12e90     2C 4E 05 51 |  if_ne	add	fp, #44
12e94     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
12e98     2C 4E 85 51 |  if_ne	sub	fp, #44
12e9c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
12ea0     3C 00 90 5D |  if_ne	jmp	#LR__1480
12ea4     A7 12 02 FB | 	rdlong	arg01, fp
12ea8     0C 4E 05 F1 | 	add	fp, #12
12eac     A7 14 02 FB | 	rdlong	arg02, fp
12eb0     0C 4E 05 F1 | 	add	fp, #12
12eb4     A7 16 02 FB | 	rdlong	arg03, fp
12eb8     0C 4E 05 F1 | 	add	fp, #12
12ebc     A7 18 02 FB | 	rdlong	arg04, fp
12ec0     24 4E 85 F1 | 	sub	fp, #36
12ec4     56 00 00 FF 
12ec8     FC E4 05 F1 | 	add	objptr, ##44284
12ecc     F2 1A 02 FB | 	rdlong	arg05, objptr
12ed0     56 00 00 FF 
12ed4     FC E4 85 F1 | 	sub	objptr, ##44284
12ed8     D8 48 B0 FD | 	call	#_hg010b_spin2_frame
12edc                 | '    v.frame(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
12edc     6C 00 90 FD | 	jmp	#LR__1481
12ee0                 | LR__1480
12ee0     A7 12 02 F6 | 	mov	arg01, fp
12ee4     6C DF BF FD | 	call	#_converttoint
12ee8     FD 20 02 F6 | 	mov	local02, result1
12eec     0C 4E 05 F1 | 	add	fp, #12
12ef0     A7 12 02 F6 | 	mov	arg01, fp
12ef4     0C 4E 85 F1 | 	sub	fp, #12
12ef8     58 DF BF FD | 	call	#_converttoint
12efc     FD 22 02 F6 | 	mov	local03, result1
12f00     18 4E 05 F1 | 	add	fp, #24
12f04     A7 12 02 F6 | 	mov	arg01, fp
12f08     18 4E 85 F1 | 	sub	fp, #24
12f0c     44 DF BF FD | 	call	#_converttoint
12f10     FD 1E 02 F6 | 	mov	local01, result1
12f14     24 4E 05 F1 | 	add	fp, #36
12f18     A7 12 02 F6 | 	mov	arg01, fp
12f1c     24 4E 85 F1 | 	sub	fp, #36
12f20     30 DF BF FD | 	call	#_converttoint
12f24     FD 18 02 F6 | 	mov	arg04, result1
12f28     56 00 00 FF 
12f2c     FC E4 05 F1 | 	add	objptr, ##44284
12f30     F2 1A 02 FB | 	rdlong	arg05, objptr
12f34     56 00 00 FF 
12f38     FC E4 85 F1 | 	sub	objptr, ##44284
12f3c     10 13 02 F6 | 	mov	arg01, local02
12f40     11 15 02 F6 | 	mov	arg02, local03
12f44     0F 17 02 F6 | 	mov	arg03, local01
12f48     68 48 B0 FD | 	call	#_hg010b_spin2_frame
12f4c                 | LR__1481
12f4c     A7 F0 03 F6 | 	mov	ptra, fp
12f50     B2 00 A0 FD | 	call	#popregs_
12f54                 | _do_frame_ret
12f54     2D 00 64 FD | 	ret
12f58                 | 
12f58                 | ' 
12f58                 | ' '' ----------------------------- Text related runtime procedures --------------------------------------
12f58                 | ' 
12f58                 | ' ' ------------------------- Print to the screem
12f58                 | ' 
12f58                 | ' sub do_print  
12f58                 | _do_print
12f58     0A 4A 05 F6 | 	mov	COUNT_, #10
12f5c     A8 00 A0 FD | 	call	#pushregs_
12f60     00 24 06 F6 | 	mov	local04, #0
12f64     7C 69 BF FD | 	call	#_pop
12f68     FD 26 02 F6 | 	mov	local05, result1
12f6c     FE 28 02 F6 | 	mov	local06, result2
12f70     FF 2A 02 F6 | 	mov	local07, result3
12f74     13 1F 02 F6 | 	mov	local01, local05
12f78     14 21 02 F6 | 	mov	local02, local06
12f7c     15 23 02 F6 | 	mov	local03, local07
12f80                 | '  
12f80                 | ' r=0
12f80                 | ' t1=pop() 
12f80                 | ' 'print t1.result_type,t1.result.uresult
12f80                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
12f80     2B 22 0E F2 | 	cmp	local03, #43 wz
12f84     14 00 90 5D |  if_ne	jmp	#LR__1490
12f88     0F 13 02 F6 | 	mov	arg01, local01
12f8c     90 9A BF FD | 	call	#_convertstring
12f90     FD 26 02 F6 | 	mov	local05, result1
12f94     13 1F 02 F6 | 	mov	local01, local05
12f98     1F 22 06 F6 | 	mov	local03, #31
12f9c                 | LR__1490
12f9c                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
12f9c     21 22 0E F2 | 	cmp	local03, #33 wz
12fa0     22 22 0E 52 |  if_ne	cmp	local03, #34 wz
12fa4     20 00 90 5D |  if_ne	jmp	#LR__1491
12fa8     11 25 02 F6 | 	mov	local04, local03
12fac     34 69 BF FD | 	call	#_pop
12fb0     FD 26 02 F6 | 	mov	local05, result1
12fb4     FE 28 02 F6 | 	mov	local06, result2
12fb8     FF 2A 02 F6 | 	mov	local07, result3
12fbc     13 1F 02 F6 | 	mov	local01, local05
12fc0     14 21 02 F6 | 	mov	local02, local06
12fc4     15 23 02 F6 | 	mov	local03, local07
12fc8                 | LR__1491
12fc8                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
12fc8     20 22 0E F2 | 	cmp	local03, #32 wz
12fcc     11 25 02 A6 |  if_e	mov	local04, local03
12fd0                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
12fd0     FF 22 0E F2 | 	cmp	local03, #255 wz
12fd4     0C 00 90 5D |  if_ne	jmp	#LR__1492
12fd8     0F 13 02 F6 | 	mov	arg01, local01
12fdc     74 28 B0 FD | 	call	#_printerror
12fe0     30 04 90 FD | 	jmp	#LR__1509
12fe4                 | LR__1492
12fe4                 | ' 
12fe4                 | ' if r=print_mod_comma  then
12fe4     21 24 0E F2 | 	cmp	local04, #33 wz
12fe8     AC 01 90 5D |  if_ne	jmp	#LR__1497
12fec                 | '   if t1.result_type=result_int then print t1.result.iresult,
12fec     1C 22 0E F2 | 	cmp	local03, #28 wz
12ff0     64 00 90 5D |  if_ne	jmp	#LR__1493
12ff4     00 12 06 F6 | 	mov	arg01, #0
12ff8     80 B6 B0 FD | 	call	#__system___getiolock_0423
12ffc     FD 12 02 F6 | 	mov	arg01, result1
13000     74 5D B0 FD | 	call	#__system___lockmem
13004     00 28 06 F6 | 	mov	local06, #0
13008     00 12 06 F6 | 	mov	arg01, #0
1300c     0F 15 02 F6 | 	mov	arg02, local01
13010     00 16 06 F6 | 	mov	arg03, #0
13014     0A 18 06 F6 | 	mov	arg04, #10
13018     94 6A B0 FD | 	call	#__system___basic_print_integer
1301c     FD 2A 02 F6 | 	mov	local07, result1
13020     14 27 02 F6 | 	mov	local05, local06
13024     15 27 02 F1 | 	add	local05, local07
13028     00 2C 06 F6 | 	mov	local08, #0
1302c     00 12 06 F6 | 	mov	arg01, #0
13030     09 14 06 F6 | 	mov	arg02, #9
13034     00 16 06 F6 | 	mov	arg03, #0
13038     D8 69 B0 FD | 	call	#__system___basic_print_char
1303c     FD 2E 02 F6 | 	mov	local09, result1
13040     FD 26 02 F1 | 	add	local05, result1
13044     00 12 06 F6 | 	mov	arg01, #0
13048     30 B6 B0 FD | 	call	#__system___getiolock_0423
1304c     FD 00 68 FC | 	wrlong	#0, result1
13050     00 FA 05 F6 | 	mov	result1, #0
13054     00 30 06 F6 | 	mov	local10, #0
13058                 | LR__1493
13058                 | '   if t1.result_type=result_uint then print t1.result.uresult,
13058     1D 22 0E F2 | 	cmp	local03, #29 wz
1305c     64 00 90 5D |  if_ne	jmp	#LR__1494
13060     00 12 06 F6 | 	mov	arg01, #0
13064     14 B6 B0 FD | 	call	#__system___getiolock_0423
13068     FD 12 02 F6 | 	mov	arg01, result1
1306c     08 5D B0 FD | 	call	#__system___lockmem
13070     00 28 06 F6 | 	mov	local06, #0
13074     00 12 06 F6 | 	mov	arg01, #0
13078     0F 15 02 F6 | 	mov	arg02, local01
1307c     00 16 06 F6 | 	mov	arg03, #0
13080     0A 18 06 F6 | 	mov	arg04, #10
13084     68 6A B0 FD | 	call	#__system___basic_print_unsigned
13088     FD 2A 02 F6 | 	mov	local07, result1
1308c     14 27 02 F6 | 	mov	local05, local06
13090     15 27 02 F1 | 	add	local05, local07
13094     00 2C 06 F6 | 	mov	local08, #0
13098     00 12 06 F6 | 	mov	arg01, #0
1309c     09 14 06 F6 | 	mov	arg02, #9
130a0     00 16 06 F6 | 	mov	arg03, #0
130a4     6C 69 B0 FD | 	call	#__system___basic_print_char
130a8     FD 2E 02 F6 | 	mov	local09, result1
130ac     FD 26 02 F1 | 	add	local05, result1
130b0     00 12 06 F6 | 	mov	arg01, #0
130b4     C4 B5 B0 FD | 	call	#__system___getiolock_0423
130b8     FD 00 68 FC | 	wrlong	#0, result1
130bc     00 FA 05 F6 | 	mov	result1, #0
130c0     00 30 06 F6 | 	mov	local10, #0
130c4                 | LR__1494
130c4                 | '   if t1.result_type=result_float then print t1.result.fresult,
130c4     1E 22 0E F2 | 	cmp	local03, #30 wz
130c8     64 00 90 5D |  if_ne	jmp	#LR__1495
130cc     00 12 06 F6 | 	mov	arg01, #0
130d0     A8 B5 B0 FD | 	call	#__system___getiolock_0423
130d4     FD 12 02 F6 | 	mov	arg01, result1
130d8     9C 5C B0 FD | 	call	#__system___lockmem
130dc     00 28 06 F6 | 	mov	local06, #0
130e0     00 12 06 F6 | 	mov	arg01, #0
130e4     0F 15 02 F6 | 	mov	arg02, local01
130e8     00 16 06 F6 | 	mov	arg03, #0
130ec     23 18 06 F6 | 	mov	arg04, #35
130f0     88 8D B0 FD | 	call	#__system___basic_print_float
130f4     FD 2A 02 F6 | 	mov	local07, result1
130f8     14 27 02 F6 | 	mov	local05, local06
130fc     15 27 02 F1 | 	add	local05, local07
13100     00 2C 06 F6 | 	mov	local08, #0
13104     00 12 06 F6 | 	mov	arg01, #0
13108     09 14 06 F6 | 	mov	arg02, #9
1310c     00 16 06 F6 | 	mov	arg03, #0
13110     00 69 B0 FD | 	call	#__system___basic_print_char
13114     FD 2E 02 F6 | 	mov	local09, result1
13118     FD 26 02 F1 | 	add	local05, result1
1311c     00 12 06 F6 | 	mov	arg01, #0
13120     58 B5 B0 FD | 	call	#__system___getiolock_0423
13124     FD 00 68 FC | 	wrlong	#0, result1
13128     00 FA 05 F6 | 	mov	result1, #0
1312c     00 30 06 F6 | 	mov	local10, #0
13130                 | LR__1495
13130                 | '   if t1.result_type=result_string then print t1.result.sresult,
13130     1F 22 0E F2 | 	cmp	local03, #31 wz
13134     60 00 90 5D |  if_ne	jmp	#LR__1496
13138     00 12 06 F6 | 	mov	arg01, #0
1313c     3C B5 B0 FD | 	call	#__system___getiolock_0423
13140     FD 12 02 F6 | 	mov	arg01, result1
13144     30 5C B0 FD | 	call	#__system___lockmem
13148     00 28 06 F6 | 	mov	local06, #0
1314c     00 12 06 F6 | 	mov	arg01, #0
13150     0F 15 02 F6 | 	mov	arg02, local01
13154     00 16 06 F6 | 	mov	arg03, #0
13158     10 69 B0 FD | 	call	#__system___basic_print_string
1315c     FD 2A 02 F6 | 	mov	local07, result1
13160     14 27 02 F6 | 	mov	local05, local06
13164     15 27 02 F1 | 	add	local05, local07
13168     00 2C 06 F6 | 	mov	local08, #0
1316c     00 12 06 F6 | 	mov	arg01, #0
13170     09 14 06 F6 | 	mov	arg02, #9
13174     00 16 06 F6 | 	mov	arg03, #0
13178     98 68 B0 FD | 	call	#__system___basic_print_char
1317c     FD 2E 02 F6 | 	mov	local09, result1
13180     FD 26 02 F1 | 	add	local05, result1
13184     00 12 06 F6 | 	mov	arg01, #0
13188     F0 B4 B0 FD | 	call	#__system___getiolock_0423
1318c     FD 00 68 FC | 	wrlong	#0, result1
13190     00 FA 05 F6 | 	mov	result1, #0
13194     00 30 06 F6 | 	mov	local10, #0
13198                 | LR__1496
13198                 | LR__1497
13198                 | ' if r=print_mod_semicolon then 
13198     22 24 0E F2 | 	cmp	local04, #34 wz
1319c     1C 01 90 5D |  if_ne	jmp	#LR__1502
131a0                 | '   if t1.result_type=result_int then print t1.result.iresult;
131a0     1C 22 0E F2 | 	cmp	local03, #28 wz
131a4     50 00 90 5D |  if_ne	jmp	#LR__1498
131a8     00 12 06 F6 | 	mov	arg01, #0
131ac     CC B4 B0 FD | 	call	#__system___getiolock_0423
131b0     FD 12 02 F6 | 	mov	arg01, result1
131b4     C0 5B B0 FD | 	call	#__system___lockmem
131b8     00 28 06 F6 | 	mov	local06, #0
131bc     00 30 06 F6 | 	mov	local10, #0
131c0     0A 2C 06 F6 | 	mov	local08, #10
131c4     00 12 06 F6 | 	mov	arg01, #0
131c8     0F 15 02 F6 | 	mov	arg02, local01
131cc     00 16 06 F6 | 	mov	arg03, #0
131d0     0A 18 06 F6 | 	mov	arg04, #10
131d4     D8 68 B0 FD | 	call	#__system___basic_print_integer
131d8     FD 2A 02 F6 | 	mov	local07, result1
131dc     14 27 02 F6 | 	mov	local05, local06
131e0     15 27 02 F1 | 	add	local05, local07
131e4     00 12 06 F6 | 	mov	arg01, #0
131e8     90 B4 B0 FD | 	call	#__system___getiolock_0423
131ec     FD 00 68 FC | 	wrlong	#0, result1
131f0     00 FA 05 F6 | 	mov	result1, #0
131f4     00 2E 06 F6 | 	mov	local09, #0
131f8                 | LR__1498
131f8                 | '   if t1.result_type=result_uint then print t1.result.uresult;
131f8     1D 22 0E F2 | 	cmp	local03, #29 wz
131fc     50 00 90 5D |  if_ne	jmp	#LR__1499
13200     00 12 06 F6 | 	mov	arg01, #0
13204     74 B4 B0 FD | 	call	#__system___getiolock_0423
13208     FD 12 02 F6 | 	mov	arg01, result1
1320c     68 5B B0 FD | 	call	#__system___lockmem
13210     00 28 06 F6 | 	mov	local06, #0
13214     00 30 06 F6 | 	mov	local10, #0
13218     0A 2C 06 F6 | 	mov	local08, #10
1321c     00 12 06 F6 | 	mov	arg01, #0
13220     0F 15 02 F6 | 	mov	arg02, local01
13224     00 16 06 F6 | 	mov	arg03, #0
13228     0A 18 06 F6 | 	mov	arg04, #10
1322c     C0 68 B0 FD | 	call	#__system___basic_print_unsigned
13230     FD 2A 02 F6 | 	mov	local07, result1
13234     14 27 02 F6 | 	mov	local05, local06
13238     15 27 02 F1 | 	add	local05, local07
1323c     00 12 06 F6 | 	mov	arg01, #0
13240     38 B4 B0 FD | 	call	#__system___getiolock_0423
13244     FD 00 68 FC | 	wrlong	#0, result1
13248     00 FA 05 F6 | 	mov	result1, #0
1324c     00 2E 06 F6 | 	mov	local09, #0
13250                 | LR__1499
13250                 | '   if t1.result_type=result_float then print t1.result.fresult;
13250     1E 22 0E F2 | 	cmp	local03, #30 wz
13254     30 00 90 5D |  if_ne	jmp	#LR__1500
13258     00 12 06 F6 | 	mov	arg01, #0
1325c     1C B4 B0 FD | 	call	#__system___getiolock_0423
13260     FD 12 02 F6 | 	mov	arg01, result1
13264     10 5B B0 FD | 	call	#__system___lockmem
13268     00 12 06 F6 | 	mov	arg01, #0
1326c     0F 15 02 F6 | 	mov	arg02, local01
13270     00 16 06 F6 | 	mov	arg03, #0
13274     23 18 06 F6 | 	mov	arg04, #35
13278     00 8C B0 FD | 	call	#__system___basic_print_float
1327c     00 12 06 F6 | 	mov	arg01, #0
13280     F8 B3 B0 FD | 	call	#__system___getiolock_0423
13284     FD 00 68 FC | 	wrlong	#0, result1
13288                 | LR__1500
13288                 | '   if t1.result_type=result_string then print t1.result.sresult;
13288     1F 22 0E F2 | 	cmp	local03, #31 wz
1328c     2C 00 90 5D |  if_ne	jmp	#LR__1501
13290     00 12 06 F6 | 	mov	arg01, #0
13294     E4 B3 B0 FD | 	call	#__system___getiolock_0423
13298     FD 12 02 F6 | 	mov	arg01, result1
1329c     D8 5A B0 FD | 	call	#__system___lockmem
132a0     00 12 06 F6 | 	mov	arg01, #0
132a4     0F 15 02 F6 | 	mov	arg02, local01
132a8     00 16 06 F6 | 	mov	arg03, #0
132ac     BC 67 B0 FD | 	call	#__system___basic_print_string
132b0     00 12 06 F6 | 	mov	arg01, #0
132b4     C4 B3 B0 FD | 	call	#__system___getiolock_0423
132b8     FD 00 68 FC | 	wrlong	#0, result1
132bc                 | LR__1501
132bc                 | LR__1502
132bc                 | ' if r=0 then 
132bc     00 24 0E F2 | 	cmp	local04, #0 wz
132c0     1C 01 90 5D |  if_ne	jmp	#LR__1507
132c4                 | '   if t1.result_type=result_int then print t1.result.iresult
132c4     1C 22 0E F2 | 	cmp	local03, #28 wz
132c8     40 00 90 5D |  if_ne	jmp	#LR__1503
132cc     00 12 06 F6 | 	mov	arg01, #0
132d0     A8 B3 B0 FD | 	call	#__system___getiolock_0423
132d4     FD 12 02 F6 | 	mov	arg01, result1
132d8     9C 5A B0 FD | 	call	#__system___lockmem
132dc     00 12 06 F6 | 	mov	arg01, #0
132e0     0F 15 02 F6 | 	mov	arg02, local01
132e4     00 16 06 F6 | 	mov	arg03, #0
132e8     0A 18 06 F6 | 	mov	arg04, #10
132ec     C0 67 B0 FD | 	call	#__system___basic_print_integer
132f0     00 12 06 F6 | 	mov	arg01, #0
132f4     0A 14 06 F6 | 	mov	arg02, #10
132f8     00 16 06 F6 | 	mov	arg03, #0
132fc     14 67 B0 FD | 	call	#__system___basic_print_char
13300     00 12 06 F6 | 	mov	arg01, #0
13304     74 B3 B0 FD | 	call	#__system___getiolock_0423
13308     FD 00 68 FC | 	wrlong	#0, result1
1330c                 | LR__1503
1330c                 | '   if t1.result_type=result_uint then print t1.result.uresult
1330c     1D 22 0E F2 | 	cmp	local03, #29 wz
13310     40 00 90 5D |  if_ne	jmp	#LR__1504
13314     00 12 06 F6 | 	mov	arg01, #0
13318     60 B3 B0 FD | 	call	#__system___getiolock_0423
1331c     FD 12 02 F6 | 	mov	arg01, result1
13320     54 5A B0 FD | 	call	#__system___lockmem
13324     00 12 06 F6 | 	mov	arg01, #0
13328     0F 15 02 F6 | 	mov	arg02, local01
1332c     00 16 06 F6 | 	mov	arg03, #0
13330     0A 18 06 F6 | 	mov	arg04, #10
13334     B8 67 B0 FD | 	call	#__system___basic_print_unsigned
13338     00 12 06 F6 | 	mov	arg01, #0
1333c     0A 14 06 F6 | 	mov	arg02, #10
13340     00 16 06 F6 | 	mov	arg03, #0
13344     CC 66 B0 FD | 	call	#__system___basic_print_char
13348     00 12 06 F6 | 	mov	arg01, #0
1334c     2C B3 B0 FD | 	call	#__system___getiolock_0423
13350     FD 00 68 FC | 	wrlong	#0, result1
13354                 | LR__1504
13354                 | '   if t1.result_type=result_float then print t1.result.fresult
13354     1E 22 0E F2 | 	cmp	local03, #30 wz
13358     40 00 90 5D |  if_ne	jmp	#LR__1505
1335c     00 12 06 F6 | 	mov	arg01, #0
13360     18 B3 B0 FD | 	call	#__system___getiolock_0423
13364     FD 12 02 F6 | 	mov	arg01, result1
13368     0C 5A B0 FD | 	call	#__system___lockmem
1336c     00 12 06 F6 | 	mov	arg01, #0
13370     0F 15 02 F6 | 	mov	arg02, local01
13374     00 16 06 F6 | 	mov	arg03, #0
13378     23 18 06 F6 | 	mov	arg04, #35
1337c     FC 8A B0 FD | 	call	#__system___basic_print_float
13380     00 12 06 F6 | 	mov	arg01, #0
13384     0A 14 06 F6 | 	mov	arg02, #10
13388     00 16 06 F6 | 	mov	arg03, #0
1338c     84 66 B0 FD | 	call	#__system___basic_print_char
13390     00 12 06 F6 | 	mov	arg01, #0
13394     E4 B2 B0 FD | 	call	#__system___getiolock_0423
13398     FD 00 68 FC | 	wrlong	#0, result1
1339c                 | LR__1505
1339c                 | '   if t1.result_type=result_string then print t1.result.sresult
1339c     1F 22 0E F2 | 	cmp	local03, #31 wz
133a0     3C 00 90 5D |  if_ne	jmp	#LR__1506
133a4     00 12 06 F6 | 	mov	arg01, #0
133a8     D0 B2 B0 FD | 	call	#__system___getiolock_0423
133ac     FD 12 02 F6 | 	mov	arg01, result1
133b0     C4 59 B0 FD | 	call	#__system___lockmem
133b4     00 12 06 F6 | 	mov	arg01, #0
133b8     0F 15 02 F6 | 	mov	arg02, local01
133bc     00 16 06 F6 | 	mov	arg03, #0
133c0     A8 66 B0 FD | 	call	#__system___basic_print_string
133c4     00 12 06 F6 | 	mov	arg01, #0
133c8     0A 14 06 F6 | 	mov	arg02, #10
133cc     00 16 06 F6 | 	mov	arg03, #0
133d0     40 66 B0 FD | 	call	#__system___basic_print_char
133d4     00 12 06 F6 | 	mov	arg01, #0
133d8     A0 B2 B0 FD | 	call	#__system___getiolock_0423
133dc     FD 00 68 FC | 	wrlong	#0, result1
133e0                 | LR__1506
133e0                 | LR__1507
133e0                 | ' if r=print_mod_empty then print
133e0     20 24 0E F2 | 	cmp	local04, #32 wz
133e4     2C 00 90 5D |  if_ne	jmp	#LR__1508
133e8     00 12 06 F6 | 	mov	arg01, #0
133ec     8C B2 B0 FD | 	call	#__system___getiolock_0423
133f0     FD 12 02 F6 | 	mov	arg01, result1
133f4     80 59 B0 FD | 	call	#__system___lockmem
133f8     00 12 06 F6 | 	mov	arg01, #0
133fc     0A 14 06 F6 | 	mov	arg02, #10
13400     00 16 06 F6 | 	mov	arg03, #0
13404     0C 66 B0 FD | 	call	#__system___basic_print_char
13408     00 12 06 F6 | 	mov	arg01, #0
1340c     6C B2 B0 FD | 	call	#__system___getiolock_0423
13410     FD 00 68 FC | 	wrlong	#0, result1
13414                 | LR__1508
13414                 | LR__1509
13414     A7 F0 03 F6 | 	mov	ptra, fp
13418     B2 00 A0 FD | 	call	#popregs_
1341c                 | _do_print_ret
1341c     2D 00 64 FD | 	ret
13420                 | 
13420                 | ' 
13420                 | ' 
13420                 | ' sub do_paper
13420                 | _do_paper
13420     03 4A 05 F6 | 	mov	COUNT_, #3
13424     A8 00 A0 FD | 	call	#pushregs_
13428     B8 64 BF FD | 	call	#_pop
1342c     FD 1E 02 F6 | 	mov	local01, result1
13430     FE 20 02 F6 | 	mov	local02, result2
13434     FF 22 02 F6 | 	mov	local03, result3
13438                 | ' t1=pop() 
13438                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
13438     1E 22 0E F2 | 	cmp	local03, #30 wz
1343c     10 00 90 5D |  if_ne	jmp	#LR__1510
13440     0F 13 02 F6 | 	mov	arg01, local01
13444     00 14 06 F6 | 	mov	arg02, #0
13448     E0 88 B0 FD | 	call	#__system___float_tointeger
1344c     FD 1E 02 F6 | 	mov	local01, result1
13450                 | LR__1510
13450                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
13450     1F 22 0E F2 | 	cmp	local03, #31 wz
13454     18 00 90 5D |  if_ne	jmp	#LR__1511
13458     0F 13 02 F6 | 	mov	arg01, local01
1345c     EC 8B B0 FD | 	call	#__system____builtin_atof
13460     FD 12 02 F6 | 	mov	arg01, result1
13464     00 14 06 F6 | 	mov	arg02, #0
13468     C0 88 B0 FD | 	call	#__system___float_tointeger
1346c     FD 1E 02 F6 | 	mov	local01, result1
13470                 | LR__1511
13470     56 00 00 FF 
13474     0C E5 05 F1 | 	add	objptr, ##44300
13478     F2 1E 62 FC | 	wrlong	local01, objptr
1347c     04 E4 05 F1 | 	add	objptr, #4
13480     F2 12 02 FB | 	rdlong	arg01, objptr
13484                 | ' 
13484                 | ' write_color:=ff
13484     56 00 00 FF 
13488     D3 E4 85 F1 | 	sub	objptr, ##44243
1348c     F2 12 62 FC | 	wrlong	arg01, objptr
13490                 | ' write_background:=bb
13490     04 E4 05 F1 | 	add	objptr, #4
13494     F2 1E 62 FC | 	wrlong	local01, objptr
13498     41 E4 85 F1 | 	sub	objptr, #65
1349c     A7 F0 03 F6 | 	mov	ptra, fp
134a0     B2 00 A0 FD | 	call	#popregs_
134a4                 | _do_paper_ret
134a4     2D 00 64 FD | 	ret
134a8                 | 
134a8                 | ' 
134a8                 | ' sub do_ink
134a8                 | _do_ink
134a8     03 4A 05 F6 | 	mov	COUNT_, #3
134ac     A8 00 A0 FD | 	call	#pushregs_
134b0     30 64 BF FD | 	call	#_pop
134b4     FD 1E 02 F6 | 	mov	local01, result1
134b8     FE 20 02 F6 | 	mov	local02, result2
134bc     FF 22 02 F6 | 	mov	local03, result3
134c0                 | ' t1=pop() 
134c0                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
134c0     1E 22 0E F2 | 	cmp	local03, #30 wz
134c4     10 00 90 5D |  if_ne	jmp	#LR__1520
134c8     0F 13 02 F6 | 	mov	arg01, local01
134cc     00 14 06 F6 | 	mov	arg02, #0
134d0     58 88 B0 FD | 	call	#__system___float_tointeger
134d4     FD 1E 02 F6 | 	mov	local01, result1
134d8                 | LR__1520
134d8                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
134d8     1F 22 0E F2 | 	cmp	local03, #31 wz
134dc     18 00 90 5D |  if_ne	jmp	#LR__1521
134e0     0F 13 02 F6 | 	mov	arg01, local01
134e4     64 8B B0 FD | 	call	#__system____builtin_atof
134e8     FD 12 02 F6 | 	mov	arg01, result1
134ec     00 14 06 F6 | 	mov	arg02, #0
134f0     38 88 B0 FD | 	call	#__system___float_tointeger
134f4     FD 1E 02 F6 | 	mov	local01, result1
134f8                 | LR__1521
134f8     56 00 00 FF 
134fc     10 E5 05 F1 | 	add	objptr, ##44304
13500     F2 1E 62 FC | 	wrlong	local01, objptr
13504     04 E4 85 F1 | 	sub	objptr, #4
13508     F2 14 02 FB | 	rdlong	arg02, objptr
1350c                 | ' 
1350c                 | ' write_color:=ff
1350c     56 00 00 FF 
13510     CF E4 85 F1 | 	sub	objptr, ##44239
13514     F2 1E 62 FC | 	wrlong	local01, objptr
13518                 | ' write_background:=bb
13518     04 E4 05 F1 | 	add	objptr, #4
1351c     F2 14 62 FC | 	wrlong	arg02, objptr
13520     56 00 00 FF 
13524     CF E4 05 F1 | 	add	objptr, ##44239
13528     F2 12 02 FB | 	rdlong	arg01, objptr
1352c     56 00 00 FF 
13530     10 E5 85 F1 | 	sub	objptr, ##44304
13534     14 35 B0 FD | 	call	#_hg010b_spin2_setcursorcolor
13538     A7 F0 03 F6 | 	mov	ptra, fp
1353c     B2 00 A0 FD | 	call	#popregs_
13540                 | _do_ink_ret
13540     2D 00 64 FD | 	ret
13544                 | 
13544                 | ' 
13544                 | ' 
13544                 | ' sub do_font
13544                 | _do_font
13544     03 4A 05 F6 | 	mov	COUNT_, #3
13548     A8 00 A0 FD | 	call	#pushregs_
1354c     94 63 BF FD | 	call	#_pop
13550     FD 1E 02 F6 | 	mov	local01, result1
13554     FE 20 02 F6 | 	mov	local02, result2
13558     FF 22 02 F6 | 	mov	local03, result3
1355c                 | ' t1=pop() 
1355c                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
1355c     1E 22 0E F2 | 	cmp	local03, #30 wz
13560     10 00 90 5D |  if_ne	jmp	#LR__1530
13564     0F 13 02 F6 | 	mov	arg01, local01
13568     00 14 06 F6 | 	mov	arg02, #0
1356c     BC 87 B0 FD | 	call	#__system___float_tointeger
13570     FD 1E 02 F6 | 	mov	local01, result1
13574                 | LR__1530
13574                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
13574     1F 22 0E F2 | 	cmp	local03, #31 wz
13578     18 00 90 5D |  if_ne	jmp	#LR__1531
1357c     0F 13 02 F6 | 	mov	arg01, local01
13580     C8 8A B0 FD | 	call	#__system____builtin_atof
13584     FD 12 02 F6 | 	mov	arg01, result1
13588     00 14 06 F6 | 	mov	arg02, #0
1358c     9C 87 B0 FD | 	call	#__system___float_tointeger
13590     FD 1E 02 F6 | 	mov	local01, result1
13594                 | LR__1531
13594     56 00 00 FF 
13598     14 E5 05 F1 | 	add	objptr, ##44308
1359c     F2 1E 62 FC | 	wrlong	local01, objptr
135a0     56 00 00 FF 
135a4     14 E5 85 F1 | 	sub	objptr, ##44308
135a8     02 1E 66 F0 | 	shl	local01, #2
135ac     0F 13 02 F6 | 	mov	arg01, local01
135b0     F8 43 B0 FD | 	call	#_hg010b_spin2_setfontfamily
135b4     A7 F0 03 F6 | 	mov	ptra, fp
135b8     B2 00 A0 FD | 	call	#popregs_
135bc                 | _do_font_ret
135bc     2D 00 64 FD | 	ret
135c0                 | 
135c0                 | ' 
135c0                 | ' sub do_mode
135c0                 | _do_mode
135c0     04 4A 05 F6 | 	mov	COUNT_, #4
135c4     A8 00 A0 FD | 	call	#pushregs_
135c8     18 63 BF FD | 	call	#_pop
135cc     FD 1E 02 F6 | 	mov	local01, result1
135d0     FE 20 02 F6 | 	mov	local02, result2
135d4     FF 22 02 F6 | 	mov	local03, result3
135d8                 | ' t1=pop() 
135d8                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
135d8     1E 22 0E F2 | 	cmp	local03, #30 wz
135dc     10 00 90 5D |  if_ne	jmp	#LR__1540
135e0     0F 13 02 F6 | 	mov	arg01, local01
135e4     00 14 06 F6 | 	mov	arg02, #0
135e8     40 87 B0 FD | 	call	#__system___float_tointeger
135ec     FD 1E 02 F6 | 	mov	local01, result1
135f0                 | LR__1540
135f0                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
135f0     1F 22 0E F2 | 	cmp	local03, #31 wz
135f4     18 00 90 5D |  if_ne	jmp	#LR__1541
135f8     0F 13 02 F6 | 	mov	arg01, local01
135fc     4C 8A B0 FD | 	call	#__system____builtin_atof
13600     FD 12 02 F6 | 	mov	arg01, result1
13604     00 14 06 F6 | 	mov	arg02, #0
13608     20 87 B0 FD | 	call	#__system___float_tointeger
1360c     FD 1E 02 F6 | 	mov	local01, result1
13610                 | LR__1541
13610                 | ' select case t1.result.iresult
13610     0F 25 02 F6 | 	mov	local04, local01
13614     05 24 26 F3 | 	fle	local04, #5
13618     30 24 62 FD | 	jmprel	local04
1361c                 | LR__1542
1361c     14 00 90 FD | 	jmp	#LR__1543
13620     A8 00 90 FD | 	jmp	#LR__1544
13624     10 01 90 FD | 	jmp	#LR__1545
13628     78 01 90 FD | 	jmp	#LR__1546
1362c     E0 01 90 FD | 	jmp	#LR__1547
13630     70 02 90 FD | 	jmp	#LR__1548
13634                 | LR__1543
13634     56 00 00 FF 
13638     14 E5 05 F1 | 	add	objptr, ##44308
1363c     F2 02 68 FC | 	wrlong	#1, objptr
13640     04 E4 85 F1 | 	sub	objptr, #4
13644     F2 34 69 FC | 	wrlong	#154, objptr
13648     22 00 00 FF 
1364c     A4 E5 05 F1 | 	add	objptr, ##17828
13650     F2 02 68 FC | 	wrlong	#1, objptr
13654     22 00 00 FF 
13658     A8 E5 85 F1 | 	sub	objptr, ##17832
1365c     F2 26 69 FC | 	wrlong	#147, objptr
13660     56 00 00 FF 
13664     0C E5 85 F1 | 	sub	objptr, ##44300
13668     04 12 06 F6 | 	mov	arg01, #4
1366c     3C 43 B0 FD | 	call	#_hg010b_spin2_setfontfamily
13670     56 00 00 FF 
13674     10 E5 05 F1 | 	add	objptr, ##44304
13678     F2 12 02 FB | 	rdlong	arg01, objptr
1367c     04 E4 85 F1 | 	sub	objptr, #4
13680     F2 14 02 FB | 	rdlong	arg02, objptr
13684                 | ' 
13684                 | ' write_color:=ff
13684     56 00 00 FF 
13688     CF E4 85 F1 | 	sub	objptr, ##44239
1368c     F2 12 62 FC | 	wrlong	arg01, objptr
13690                 | ' write_background:=bb
13690     04 E4 05 F1 | 	add	objptr, #4
13694     F2 14 62 FC | 	wrlong	arg02, objptr
13698     01 00 00 FF 
1369c     00 EA 05 F1 | 	add	ptr__dat__, ##512
136a0     7A 00 00 FF 
136a4     17 E5 05 F1 | 	add	objptr, ##62743
136a8     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
136ac     04 E4 85 F1 | 	sub	objptr, #4
136b0     03 00 80 FF 
136b4     F2 28 69 FC | 	wrlong	##1684, objptr
136b8     7A 00 00 FF 
136bc     54 E5 85 F1 | 	sub	objptr, ##62804
136c0     01 00 00 FF 
136c4     00 EA 85 F1 | 	sub	ptr__dat__, ##512
136c8     D8 01 90 FD | 	jmp	#LR__1548
136cc                 | LR__1544
136cc     56 00 00 FF 
136d0     14 E5 05 F1 | 	add	objptr, ##44308
136d4     F2 00 68 FC | 	wrlong	#0, objptr
136d8     04 E4 85 F1 | 	sub	objptr, #4
136dc     F2 2E 68 FC | 	wrlong	#23, objptr
136e0     22 00 00 FF 
136e4     A4 E5 05 F1 | 	add	objptr, ##17828
136e8     F2 00 68 FC | 	wrlong	#0, objptr
136ec     22 00 00 FF 
136f0     A8 E5 85 F1 | 	sub	objptr, ##17832
136f4     F2 00 68 FC | 	wrlong	#0, objptr
136f8     56 00 00 FF 
136fc     0C E5 85 F1 | 	sub	objptr, ##44300
13700     00 12 06 F6 | 	mov	arg01, #0
13704     A4 42 B0 FD | 	call	#_hg010b_spin2_setfontfamily
13708     56 00 00 FF 
1370c     10 E5 05 F1 | 	add	objptr, ##44304
13710     F2 12 02 FB | 	rdlong	arg01, objptr
13714     04 E4 85 F1 | 	sub	objptr, #4
13718     F2 14 02 FB | 	rdlong	arg02, objptr
1371c                 | ' 
1371c                 | ' write_color:=ff
1371c     56 00 00 FF 
13720     CF E4 85 F1 | 	sub	objptr, ##44239
13724     F2 12 62 FC | 	wrlong	arg01, objptr
13728                 | ' write_background:=bb
13728     04 E4 05 F1 | 	add	objptr, #4
1372c     F2 14 62 FC | 	wrlong	arg02, objptr
13730     41 E4 85 F1 | 	sub	objptr, #65
13734     6C 01 90 FD | 	jmp	#LR__1548
13738                 | LR__1545
13738     56 00 00 FF 
1373c     14 E5 05 F1 | 	add	objptr, ##44308
13740     F2 00 68 FC | 	wrlong	#0, objptr
13744     04 E4 85 F1 | 	sub	objptr, #4
13748     F2 6A 69 FC | 	wrlong	#181, objptr
1374c     22 00 00 FF 
13750     A4 E5 05 F1 | 	add	objptr, ##17828
13754     F2 00 68 FC | 	wrlong	#0, objptr
13758     22 00 00 FF 
1375c     A8 E5 85 F1 | 	sub	objptr, ##17832
13760     F2 00 68 FC | 	wrlong	#0, objptr
13764     56 00 00 FF 
13768     0C E5 85 F1 | 	sub	objptr, ##44300
1376c     00 12 06 F6 | 	mov	arg01, #0
13770     38 42 B0 FD | 	call	#_hg010b_spin2_setfontfamily
13774     56 00 00 FF 
13778     10 E5 05 F1 | 	add	objptr, ##44304
1377c     F2 12 02 FB | 	rdlong	arg01, objptr
13780     04 E4 85 F1 | 	sub	objptr, #4
13784     F2 14 02 FB | 	rdlong	arg02, objptr
13788                 | ' 
13788                 | ' write_color:=ff
13788     56 00 00 FF 
1378c     CF E4 85 F1 | 	sub	objptr, ##44239
13790     F2 12 62 FC | 	wrlong	arg01, objptr
13794                 | ' write_background:=bb
13794     04 E4 05 F1 | 	add	objptr, #4
13798     F2 14 62 FC | 	wrlong	arg02, objptr
1379c     41 E4 85 F1 | 	sub	objptr, #65
137a0     00 01 90 FD | 	jmp	#LR__1548
137a4                 | LR__1546
137a4     56 00 00 FF 
137a8     14 E5 05 F1 | 	add	objptr, ##44308
137ac     F2 00 68 FC | 	wrlong	#0, objptr
137b0     04 E4 85 F1 | 	sub	objptr, #4
137b4     F2 1E 68 FC | 	wrlong	#15, objptr
137b8     22 00 00 FF 
137bc     A4 E5 05 F1 | 	add	objptr, ##17828
137c0     F2 00 68 FC | 	wrlong	#0, objptr
137c4     22 00 00 FF 
137c8     A8 E5 85 F1 | 	sub	objptr, ##17832
137cc     F2 00 68 FC | 	wrlong	#0, objptr
137d0     56 00 00 FF 
137d4     0C E5 85 F1 | 	sub	objptr, ##44300
137d8     00 12 06 F6 | 	mov	arg01, #0
137dc     CC 41 B0 FD | 	call	#_hg010b_spin2_setfontfamily
137e0     56 00 00 FF 
137e4     10 E5 05 F1 | 	add	objptr, ##44304
137e8     F2 12 02 FB | 	rdlong	arg01, objptr
137ec     04 E4 85 F1 | 	sub	objptr, #4
137f0     F2 14 02 FB | 	rdlong	arg02, objptr
137f4                 | ' 
137f4                 | ' write_color:=ff
137f4     56 00 00 FF 
137f8     CF E4 85 F1 | 	sub	objptr, ##44239
137fc     F2 12 62 FC | 	wrlong	arg01, objptr
13800                 | ' write_background:=bb
13800     04 E4 05 F1 | 	add	objptr, #4
13804     F2 14 62 FC | 	wrlong	arg02, objptr
13808     41 E4 85 F1 | 	sub	objptr, #65
1380c     94 00 90 FD | 	jmp	#LR__1548
13810                 | LR__1547
13810     56 00 00 FF 
13814     14 E5 05 F1 | 	add	objptr, ##44308
13818     F2 02 68 FC | 	wrlong	#1, objptr
1381c     04 E4 85 F1 | 	sub	objptr, #4
13820     F2 02 68 FC | 	wrlong	#1, objptr
13824     22 00 00 FF 
13828     A4 E5 05 F1 | 	add	objptr, ##17828
1382c     F2 02 68 FC | 	wrlong	#1, objptr
13830     22 00 00 FF 
13834     A8 E5 85 F1 | 	sub	objptr, ##17832
13838     F2 1C 68 FC | 	wrlong	#14, objptr
1383c     56 00 00 FF 
13840     0C E5 85 F1 | 	sub	objptr, ##44300
13844     04 12 06 F6 | 	mov	arg01, #4
13848     60 41 B0 FD | 	call	#_hg010b_spin2_setfontfamily
1384c     56 00 00 FF 
13850     10 E5 05 F1 | 	add	objptr, ##44304
13854     F2 12 02 FB | 	rdlong	arg01, objptr
13858     04 E4 85 F1 | 	sub	objptr, #4
1385c     F2 14 02 FB | 	rdlong	arg02, objptr
13860                 | ' 
13860                 | ' write_color:=ff
13860     56 00 00 FF 
13864     CF E4 85 F1 | 	sub	objptr, ##44239
13868     F2 12 62 FC | 	wrlong	arg01, objptr
1386c                 | ' write_background:=bb
1386c     04 E4 05 F1 | 	add	objptr, #4
13870     F2 14 62 FC | 	wrlong	arg02, objptr
13874     07 00 00 FF 
13878     72 EB 05 F1 | 	add	ptr__dat__, ##3954
1387c     7A 00 00 FF 
13880     17 E5 05 F1 | 	add	objptr, ##62743
13884     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
13888     04 E4 85 F1 | 	sub	objptr, #4
1388c     03 00 80 FF 
13890     F2 28 69 FC | 	wrlong	##1684, objptr
13894     7A 00 00 FF 
13898     54 E5 85 F1 | 	sub	objptr, ##62804
1389c     07 00 00 FF 
138a0     72 EB 85 F1 | 	sub	ptr__dat__, ##3954
138a4                 | LR__1548
138a4     7A 00 00 FF 
138a8     50 E5 05 F1 | 	add	objptr, ##62800
138ac     F2 1E 62 FC | 	wrlong	local01, objptr
138b0     24 00 00 FF 
138b4     40 E4 85 F1 | 	sub	objptr, ##18496
138b8     F2 12 02 FB | 	rdlong	arg01, objptr
138bc     04 E4 85 F1 | 	sub	objptr, #4
138c0     F2 14 02 FB | 	rdlong	arg02, objptr
138c4     56 00 00 FF 
138c8     0C E5 85 F1 | 	sub	objptr, ##44300
138cc     C4 41 B0 FD | 	call	#_hg010b_spin2_cls
138d0     44 01 00 FF 
138d4     69 12 06 F6 | 	mov	arg01, ##@LR__4597
138d8                 | ' 
138d8                 | ' write(text)
138d8     74 44 B0 FD | 	call	#_hg010b_spin2_write
138dc                 | ' crlf
138dc     D0 45 B0 FD | 	call	#_hg010b_spin2_crlf
138e0     10 00 00 FF 
138e4     10 EB 05 F1 | 	add	ptr__dat__, ##8464
138e8     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
138ec     10 00 00 FF 
138f0     10 EB 85 F1 | 	sub	ptr__dat__, ##8464
138f4                 | ' 
138f4                 | ' write(text)
138f4     58 44 B0 FD | 	call	#_hg010b_spin2_write
138f8                 | ' crlf
138f8     B4 45 B0 FD | 	call	#_hg010b_spin2_crlf
138fc     79 00 00 FF 
13900     B0 E4 05 F1 | 	add	objptr, ##62128
13904     F2 12 02 FB | 	rdlong	arg01, objptr
13908     79 00 00 FF 
1390c     B0 E4 85 F1 | 	sub	objptr, ##62128
13910                 | ' 
13910                 | ' write(text)
13910     3C 44 B0 FD | 	call	#_hg010b_spin2_write
13914                 | ' crlf
13914     98 45 B0 FD | 	call	#_hg010b_spin2_crlf
13918     A7 F0 03 F6 | 	mov	ptra, fp
1391c     B2 00 A0 FD | 	call	#popregs_
13920                 | _do_mode_ret
13920     2D 00 64 FD | 	ret
13924                 | 
13924                 | ' 
13924                 | ' 
13924                 | ' 
13924                 | ' sub do_pinwrite
13924                 | _do_pinwrite
13924     01 4A 05 F6 | 	mov	COUNT_, #1
13928     A8 00 A0 FD | 	call	#pushregs_
1392c     18 F0 07 F1 | 	add	ptra, #24
13930     B0 5F BF FD | 	call	#_pop
13934     FD 14 02 F6 | 	mov	arg02, result1
13938     FE 12 02 F6 | 	mov	arg01, result2
1393c     FF 1E 02 F6 | 	mov	local01, result3
13940     A7 14 62 FC | 	wrlong	arg02, fp
13944     04 4E 05 F1 | 	add	fp, #4
13948     A7 12 62 FC | 	wrlong	arg01, fp
1394c     04 4E 05 F1 | 	add	fp, #4
13950     A7 1E 62 FC | 	wrlong	local01, fp
13954     08 4E 85 F1 | 	sub	fp, #8
13958     88 5F BF FD | 	call	#_pop
1395c     FF 1E 02 F6 | 	mov	local01, result3
13960     0C 4E 05 F1 | 	add	fp, #12
13964     A7 FA 61 FC | 	wrlong	result1, fp
13968     04 4E 05 F1 | 	add	fp, #4
1396c     A7 FC 61 FC | 	wrlong	result2, fp
13970     04 4E 05 F1 | 	add	fp, #4
13974     A7 1E 62 FC | 	wrlong	local01, fp
13978     08 4E 85 F1 | 	sub	fp, #8
1397c     A7 12 02 F6 | 	mov	arg01, fp
13980     0C 4E 85 F1 | 	sub	fp, #12
13984     CC D4 BF FD | 	call	#_converttoint
13988     FD 1E 02 F6 | 	mov	local01, result1
1398c     A7 12 02 F6 | 	mov	arg01, fp
13990     C0 D4 BF FD | 	call	#_converttoint
13994     FD 14 02 F6 | 	mov	arg02, result1
13998     0F 13 02 F6 | 	mov	arg01, local01
1399c     8C 55 B0 FD | 	call	#__system___pinwrite
139a0     A7 F0 03 F6 | 	mov	ptra, fp
139a4     B2 00 A0 FD | 	call	#popregs_
139a8                 | _do_pinwrite_ret
139a8     2D 00 64 FD | 	ret
139ac                 | 
139ac                 | ' 
139ac                 | ' sub do_pinfloat
139ac                 | _do_pinfloat
139ac     00 4A 05 F6 | 	mov	COUNT_, #0
139b0     A8 00 A0 FD | 	call	#pushregs_
139b4     0C F0 07 F1 | 	add	ptra, #12
139b8     28 5F BF FD | 	call	#_pop
139bc     A7 FA 61 FC | 	wrlong	result1, fp
139c0     04 4E 05 F1 | 	add	fp, #4
139c4     A7 FC 61 FC | 	wrlong	result2, fp
139c8     04 4E 05 F1 | 	add	fp, #4
139cc     A7 FE 61 FC | 	wrlong	result3, fp
139d0     08 4E 85 F1 | 	sub	fp, #8
139d4     A7 12 02 F6 | 	mov	arg01, fp
139d8     78 D4 BF FD | 	call	#_converttoint
139dc     50 FA 61 FD | 	fltl	result1
139e0     A7 F0 03 F6 | 	mov	ptra, fp
139e4     B2 00 A0 FD | 	call	#popregs_
139e8                 | _do_pinfloat_ret
139e8     2D 00 64 FD | 	ret
139ec                 | 
139ec                 | ' 
139ec                 | ' sub do_pinlo
139ec                 | _do_pinlo
139ec     00 4A 05 F6 | 	mov	COUNT_, #0
139f0     A8 00 A0 FD | 	call	#pushregs_
139f4     0C F0 07 F1 | 	add	ptra, #12
139f8     E8 5E BF FD | 	call	#_pop
139fc     A7 FA 61 FC | 	wrlong	result1, fp
13a00     04 4E 05 F1 | 	add	fp, #4
13a04     A7 FC 61 FC | 	wrlong	result2, fp
13a08     04 4E 05 F1 | 	add	fp, #4
13a0c     A7 FE 61 FC | 	wrlong	result3, fp
13a10     08 4E 85 F1 | 	sub	fp, #8
13a14     A7 12 02 F6 | 	mov	arg01, fp
13a18     38 D4 BF FD | 	call	#_converttoint
13a1c     58 FA 61 FD | 	drvl	result1
13a20     A7 F0 03 F6 | 	mov	ptra, fp
13a24     B2 00 A0 FD | 	call	#popregs_
13a28                 | _do_pinlo_ret
13a28     2D 00 64 FD | 	ret
13a2c                 | 
13a2c                 | ' 
13a2c                 | ' sub do_pinhi
13a2c                 | _do_pinhi
13a2c     00 4A 05 F6 | 	mov	COUNT_, #0
13a30     A8 00 A0 FD | 	call	#pushregs_
13a34     0C F0 07 F1 | 	add	ptra, #12
13a38     A8 5E BF FD | 	call	#_pop
13a3c     A7 FA 61 FC | 	wrlong	result1, fp
13a40     04 4E 05 F1 | 	add	fp, #4
13a44     A7 FC 61 FC | 	wrlong	result2, fp
13a48     04 4E 05 F1 | 	add	fp, #4
13a4c     A7 FE 61 FC | 	wrlong	result3, fp
13a50     08 4E 85 F1 | 	sub	fp, #8
13a54     A7 12 02 F6 | 	mov	arg01, fp
13a58     F8 D3 BF FD | 	call	#_converttoint
13a5c     59 FA 61 FD | 	drvh	result1
13a60     A7 F0 03 F6 | 	mov	ptra, fp
13a64     B2 00 A0 FD | 	call	#popregs_
13a68                 | _do_pinhi_ret
13a68     2D 00 64 FD | 	ret
13a6c                 | 
13a6c                 | ' 
13a6c                 | ' sub do_pintoggle
13a6c                 | _do_pintoggle
13a6c     00 4A 05 F6 | 	mov	COUNT_, #0
13a70     A8 00 A0 FD | 	call	#pushregs_
13a74     0C F0 07 F1 | 	add	ptra, #12
13a78     68 5E BF FD | 	call	#_pop
13a7c     A7 FA 61 FC | 	wrlong	result1, fp
13a80     04 4E 05 F1 | 	add	fp, #4
13a84     A7 FC 61 FC | 	wrlong	result2, fp
13a88     04 4E 05 F1 | 	add	fp, #4
13a8c     A7 FE 61 FC | 	wrlong	result3, fp
13a90     08 4E 85 F1 | 	sub	fp, #8
13a94     A7 12 02 F6 | 	mov	arg01, fp
13a98     B8 D3 BF FD | 	call	#_converttoint
13a9c     5F FA 61 FD | 	drvnot	result1
13aa0     A7 F0 03 F6 | 	mov	ptra, fp
13aa4     B2 00 A0 FD | 	call	#popregs_
13aa8                 | _do_pintoggle_ret
13aa8     2D 00 64 FD | 	ret
13aac                 | 
13aac                 | ' 
13aac                 | ' 
13aac                 | ' sub do_pinstart
13aac                 | _do_pinstart
13aac     03 4A 05 F6 | 	mov	COUNT_, #3
13ab0     A8 00 A0 FD | 	call	#pushregs_
13ab4     30 F0 07 F1 | 	add	ptra, #48
13ab8     28 5E BF FD | 	call	#_pop
13abc     FD 16 02 F6 | 	mov	arg03, result1
13ac0     FE 14 02 F6 | 	mov	arg02, result2
13ac4     FF 18 02 F6 | 	mov	arg04, result3
13ac8     A7 16 62 FC | 	wrlong	arg03, fp
13acc     04 4E 05 F1 | 	add	fp, #4
13ad0     A7 14 62 FC | 	wrlong	arg02, fp
13ad4     04 4E 05 F1 | 	add	fp, #4
13ad8     A7 18 62 FC | 	wrlong	arg04, fp
13adc     08 4E 85 F1 | 	sub	fp, #8
13ae0     00 5E BF FD | 	call	#_pop
13ae4     FD 16 02 F6 | 	mov	arg03, result1
13ae8     FE 14 02 F6 | 	mov	arg02, result2
13aec     FF 18 02 F6 | 	mov	arg04, result3
13af0     0C 4E 05 F1 | 	add	fp, #12
13af4     A7 16 62 FC | 	wrlong	arg03, fp
13af8     04 4E 05 F1 | 	add	fp, #4
13afc     A7 14 62 FC | 	wrlong	arg02, fp
13b00     04 4E 05 F1 | 	add	fp, #4
13b04     A7 18 62 FC | 	wrlong	arg04, fp
13b08     14 4E 85 F1 | 	sub	fp, #20
13b0c     D4 5D BF FD | 	call	#_pop
13b10     FD 16 02 F6 | 	mov	arg03, result1
13b14     FE 14 02 F6 | 	mov	arg02, result2
13b18     FF 18 02 F6 | 	mov	arg04, result3
13b1c     18 4E 05 F1 | 	add	fp, #24
13b20     A7 16 62 FC | 	wrlong	arg03, fp
13b24     04 4E 05 F1 | 	add	fp, #4
13b28     A7 14 62 FC | 	wrlong	arg02, fp
13b2c     04 4E 05 F1 | 	add	fp, #4
13b30     A7 18 62 FC | 	wrlong	arg04, fp
13b34     20 4E 85 F1 | 	sub	fp, #32
13b38     A8 5D BF FD | 	call	#_pop
13b3c     FF 16 02 F6 | 	mov	arg03, result3
13b40     24 4E 05 F1 | 	add	fp, #36
13b44     A7 FA 61 FC | 	wrlong	result1, fp
13b48     04 4E 05 F1 | 	add	fp, #4
13b4c     A7 FC 61 FC | 	wrlong	result2, fp
13b50     04 4E 05 F1 | 	add	fp, #4
13b54     A7 16 62 FC | 	wrlong	arg03, fp
13b58     08 4E 85 F1 | 	sub	fp, #8
13b5c     A7 12 02 F6 | 	mov	arg01, fp
13b60     24 4E 85 F1 | 	sub	fp, #36
13b64     EC D2 BF FD | 	call	#_converttoint
13b68     FD 1E 02 F6 | 	mov	local01, result1
13b6c     18 4E 05 F1 | 	add	fp, #24
13b70     A7 12 02 F6 | 	mov	arg01, fp
13b74     18 4E 85 F1 | 	sub	fp, #24
13b78     D8 D2 BF FD | 	call	#_converttoint
13b7c     FD 20 02 F6 | 	mov	local02, result1
13b80     0C 4E 05 F1 | 	add	fp, #12
13b84     A7 12 02 F6 | 	mov	arg01, fp
13b88     0C 4E 85 F1 | 	sub	fp, #12
13b8c     C4 D2 BF FD | 	call	#_converttoint
13b90     FD 22 02 F6 | 	mov	local03, result1
13b94     A7 12 02 F6 | 	mov	arg01, fp
13b98     B8 D2 BF FD | 	call	#_converttoint
13b9c     40 1E 62 FD | 	dirl	local01
13ba0     0F 21 02 FC | 	wrpin	local02, local01
13ba4     0F 23 12 FC | 	wxpin	local03, local01
13ba8     0F FB 21 FC | 	wypin	result1, local01
13bac     41 1E 62 FD | 	dirh	local01
13bb0     A7 F0 03 F6 | 	mov	ptra, fp
13bb4     B2 00 A0 FD | 	call	#popregs_
13bb8                 | _do_pinstart_ret
13bb8     2D 00 64 FD | 	ret
13bbc                 | 
13bbc                 | ' 
13bbc                 | ' 
13bbc                 | ' sub do_wrpin
13bbc                 | _do_wrpin
13bbc     01 4A 05 F6 | 	mov	COUNT_, #1
13bc0     A8 00 A0 FD | 	call	#pushregs_
13bc4     18 F0 07 F1 | 	add	ptra, #24
13bc8     18 5D BF FD | 	call	#_pop
13bcc     FD 14 02 F6 | 	mov	arg02, result1
13bd0     FE 12 02 F6 | 	mov	arg01, result2
13bd4     FF 1E 02 F6 | 	mov	local01, result3
13bd8     A7 14 62 FC | 	wrlong	arg02, fp
13bdc     04 4E 05 F1 | 	add	fp, #4
13be0     A7 12 62 FC | 	wrlong	arg01, fp
13be4     04 4E 05 F1 | 	add	fp, #4
13be8     A7 1E 62 FC | 	wrlong	local01, fp
13bec     08 4E 85 F1 | 	sub	fp, #8
13bf0     F0 5C BF FD | 	call	#_pop
13bf4     FF 1E 02 F6 | 	mov	local01, result3
13bf8     0C 4E 05 F1 | 	add	fp, #12
13bfc     A7 FA 61 FC | 	wrlong	result1, fp
13c00     04 4E 05 F1 | 	add	fp, #4
13c04     A7 FC 61 FC | 	wrlong	result2, fp
13c08     04 4E 05 F1 | 	add	fp, #4
13c0c     A7 1E 62 FC | 	wrlong	local01, fp
13c10     08 4E 85 F1 | 	sub	fp, #8
13c14     A7 12 02 F6 | 	mov	arg01, fp
13c18     0C 4E 85 F1 | 	sub	fp, #12
13c1c     34 D2 BF FD | 	call	#_converttoint
13c20     FD 1E 02 F6 | 	mov	local01, result1
13c24     A7 12 02 F6 | 	mov	arg01, fp
13c28     28 D2 BF FD | 	call	#_converttoint
13c2c     0F FB 01 FC | 	wrpin	result1, local01
13c30     A7 F0 03 F6 | 	mov	ptra, fp
13c34     B2 00 A0 FD | 	call	#popregs_
13c38                 | _do_wrpin_ret
13c38     2D 00 64 FD | 	ret
13c3c                 | 
13c3c                 | ' 
13c3c                 | ' sub do_wxpin
13c3c                 | _do_wxpin
13c3c     01 4A 05 F6 | 	mov	COUNT_, #1
13c40     A8 00 A0 FD | 	call	#pushregs_
13c44     18 F0 07 F1 | 	add	ptra, #24
13c48     98 5C BF FD | 	call	#_pop
13c4c     FD 14 02 F6 | 	mov	arg02, result1
13c50     FE 12 02 F6 | 	mov	arg01, result2
13c54     FF 1E 02 F6 | 	mov	local01, result3
13c58     A7 14 62 FC | 	wrlong	arg02, fp
13c5c     04 4E 05 F1 | 	add	fp, #4
13c60     A7 12 62 FC | 	wrlong	arg01, fp
13c64     04 4E 05 F1 | 	add	fp, #4
13c68     A7 1E 62 FC | 	wrlong	local01, fp
13c6c     08 4E 85 F1 | 	sub	fp, #8
13c70     70 5C BF FD | 	call	#_pop
13c74     FF 1E 02 F6 | 	mov	local01, result3
13c78     0C 4E 05 F1 | 	add	fp, #12
13c7c     A7 FA 61 FC | 	wrlong	result1, fp
13c80     04 4E 05 F1 | 	add	fp, #4
13c84     A7 FC 61 FC | 	wrlong	result2, fp
13c88     04 4E 05 F1 | 	add	fp, #4
13c8c     A7 1E 62 FC | 	wrlong	local01, fp
13c90     08 4E 85 F1 | 	sub	fp, #8
13c94     A7 12 02 F6 | 	mov	arg01, fp
13c98     0C 4E 85 F1 | 	sub	fp, #12
13c9c     B4 D1 BF FD | 	call	#_converttoint
13ca0     FD 1E 02 F6 | 	mov	local01, result1
13ca4     A7 12 02 F6 | 	mov	arg01, fp
13ca8     A8 D1 BF FD | 	call	#_converttoint
13cac     0F FB 11 FC | 	wxpin	result1, local01
13cb0     A7 F0 03 F6 | 	mov	ptra, fp
13cb4     B2 00 A0 FD | 	call	#popregs_
13cb8                 | _do_wxpin_ret
13cb8     2D 00 64 FD | 	ret
13cbc                 | 
13cbc                 | ' 
13cbc                 | ' sub do_wypin
13cbc                 | _do_wypin
13cbc     01 4A 05 F6 | 	mov	COUNT_, #1
13cc0     A8 00 A0 FD | 	call	#pushregs_
13cc4     18 F0 07 F1 | 	add	ptra, #24
13cc8     18 5C BF FD | 	call	#_pop
13ccc     FD 14 02 F6 | 	mov	arg02, result1
13cd0     FE 12 02 F6 | 	mov	arg01, result2
13cd4     FF 1E 02 F6 | 	mov	local01, result3
13cd8     A7 14 62 FC | 	wrlong	arg02, fp
13cdc     04 4E 05 F1 | 	add	fp, #4
13ce0     A7 12 62 FC | 	wrlong	arg01, fp
13ce4     04 4E 05 F1 | 	add	fp, #4
13ce8     A7 1E 62 FC | 	wrlong	local01, fp
13cec     08 4E 85 F1 | 	sub	fp, #8
13cf0     F0 5B BF FD | 	call	#_pop
13cf4     FF 1E 02 F6 | 	mov	local01, result3
13cf8     0C 4E 05 F1 | 	add	fp, #12
13cfc     A7 FA 61 FC | 	wrlong	result1, fp
13d00     04 4E 05 F1 | 	add	fp, #4
13d04     A7 FC 61 FC | 	wrlong	result2, fp
13d08     04 4E 05 F1 | 	add	fp, #4
13d0c     A7 1E 62 FC | 	wrlong	local01, fp
13d10     08 4E 85 F1 | 	sub	fp, #8
13d14     A7 12 02 F6 | 	mov	arg01, fp
13d18     0C 4E 85 F1 | 	sub	fp, #12
13d1c     34 D1 BF FD | 	call	#_converttoint
13d20     FD 1E 02 F6 | 	mov	local01, result1
13d24     A7 12 02 F6 | 	mov	arg01, fp
13d28     28 D1 BF FD | 	call	#_converttoint
13d2c     0F FB 21 FC | 	wypin	result1, local01
13d30     A7 F0 03 F6 | 	mov	ptra, fp
13d34     B2 00 A0 FD | 	call	#popregs_
13d38                 | _do_wypin_ret
13d38     2D 00 64 FD | 	ret
13d3c                 | 
13d3c                 | ' 
13d3c                 | ' sub do_position
13d3c                 | _do_position
13d3c     01 4A 05 F6 | 	mov	COUNT_, #1
13d40     A8 00 A0 FD | 	call	#pushregs_
13d44     18 F0 07 F1 | 	add	ptra, #24
13d48     98 5B BF FD | 	call	#_pop
13d4c     FD 14 02 F6 | 	mov	arg02, result1
13d50     FE 12 02 F6 | 	mov	arg01, result2
13d54     FF 1E 02 F6 | 	mov	local01, result3
13d58     A7 14 62 FC | 	wrlong	arg02, fp
13d5c     04 4E 05 F1 | 	add	fp, #4
13d60     A7 12 62 FC | 	wrlong	arg01, fp
13d64     04 4E 05 F1 | 	add	fp, #4
13d68     A7 1E 62 FC | 	wrlong	local01, fp
13d6c     08 4E 85 F1 | 	sub	fp, #8
13d70     70 5B BF FD | 	call	#_pop
13d74     FF 1E 02 F6 | 	mov	local01, result3
13d78     0C 4E 05 F1 | 	add	fp, #12
13d7c     A7 FA 61 FC | 	wrlong	result1, fp
13d80     04 4E 05 F1 | 	add	fp, #4
13d84     A7 FC 61 FC | 	wrlong	result2, fp
13d88     04 4E 05 F1 | 	add	fp, #4
13d8c     A7 1E 62 FC | 	wrlong	local01, fp
13d90     08 4E 85 F1 | 	sub	fp, #8
13d94     A7 12 02 F6 | 	mov	arg01, fp
13d98     0C 4E 85 F1 | 	sub	fp, #12
13d9c     B4 D0 BF FD | 	call	#_converttoint
13da0     FD 1E 02 F6 | 	mov	local01, result1
13da4     A7 12 02 F6 | 	mov	arg01, fp
13da8     A8 D0 BF FD | 	call	#_converttoint
13dac     FD 14 02 F6 | 	mov	arg02, result1
13db0     0F 13 02 F6 | 	mov	arg01, local01
13db4     34 3C B0 FD | 	call	#_hg010b_spin2_setcursorpos
13db8     A7 F0 03 F6 | 	mov	ptra, fp
13dbc     B2 00 A0 FD | 	call	#popregs_
13dc0                 | _do_position_ret
13dc0     2D 00 64 FD | 	ret
13dc4                 | 
13dc4                 | ' 
13dc4                 | ' sub do_waitms
13dc4                 | _do_waitms
13dc4     01 4A 05 F6 | 	mov	COUNT_, #1
13dc8     A8 00 A0 FD | 	call	#pushregs_
13dcc     18 F0 07 F1 | 	add	ptra, #24
13dd0     10 5B BF FD | 	call	#_pop
13dd4     A7 FA 61 FC | 	wrlong	result1, fp
13dd8     04 4E 05 F1 | 	add	fp, #4
13ddc     A7 FC 61 FC | 	wrlong	result2, fp
13de0     04 4E 05 F1 | 	add	fp, #4
13de4     A7 FE 61 FC | 	wrlong	result3, fp
13de8                 | ' 
13de8                 | ' t1=pop() 'value
13de8                 | ' 
13de8                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then t=t1.result.iresult else t=converttoint(t1)
13de8     08 4E 85 F1 | 	sub	fp, #8
13dec     1C FE 0D F2 | 	cmp	result3, #28 wz
13df0     08 4E 05 51 |  if_ne	add	fp, #8
13df4     A7 12 02 5B |  if_ne	rdlong	arg01, fp
13df8     08 4E 85 51 |  if_ne	sub	fp, #8
13dfc     1D 12 0E 52 |  if_ne	cmp	arg01, #29 wz
13e00     A7 12 02 AB |  if_e	rdlong	arg01, fp
13e04     0C 4E 05 A1 |  if_e	add	fp, #12
13e08     A7 12 62 AC |  if_e	wrlong	arg01, fp
13e0c     0C 4E 85 A1 |  if_e	sub	fp, #12
13e10     14 00 90 AD |  if_e	jmp	#LR__1550
13e14     A7 12 02 F6 | 	mov	arg01, fp
13e18     38 D0 BF FD | 	call	#_converttoint
13e1c     0C 4E 05 F1 | 	add	fp, #12
13e20     A7 FA 61 FC | 	wrlong	result1, fp
13e24     0C 4E 85 F1 | 	sub	fp, #12
13e28                 | LR__1550
13e28                 | ' if t<0 then return
13e28     0C 4E 05 F1 | 	add	fp, #12
13e2c     A7 12 02 FB | 	rdlong	arg01, fp
13e30     0C 4E 85 F1 | 	sub	fp, #12
13e34     00 12 56 F2 | 	cmps	arg01, #0 wc
13e38     B8 00 90 CD |  if_b	jmp	#LR__1555
13e3c                 | ' if t < 5000 then 
13e3c     0C 4E 05 F1 | 	add	fp, #12
13e40     A7 12 02 FB | 	rdlong	arg01, fp
13e44     0C 4E 85 F1 | 	sub	fp, #12
13e48     09 00 00 FF 
13e4c     88 13 56 F2 | 	cmps	arg01, ##5000 wc
13e50     14 00 90 3D |  if_ae	jmp	#LR__1551
13e54     0C 4E 05 F1 | 	add	fp, #12
13e58     A7 12 02 FB | 	rdlong	arg01, fp
13e5c     0C 4E 85 F1 | 	sub	fp, #12
13e60     08 52 B0 FD | 	call	#__system___waitms
13e64     8C 00 90 FD | 	jmp	#LR__1554
13e68                 | LR__1551
13e68     10 4E 05 F1 | 	add	fp, #16
13e6c     A7 02 68 FC | 	wrlong	#1, fp
13e70     04 4E 85 F1 | 	sub	fp, #4
13e74     A7 12 02 FB | 	rdlong	arg01, fp
13e78     09 13 52 F6 | 	abs	arg01, arg01 wc
13e7c     09 00 00 FF 
13e80     88 13 16 FD | 	qdiv	arg01, ##5000
13e84                 | '   for i=1 to t/5000
13e84     0C 4E 85 F1 | 	sub	fp, #12
13e88     18 1E 62 FD | 	getqx	local01
13e8c     0F 1F 82 F6 | 	negc	local01, local01
13e90     01 1E 06 F1 | 	add	local01, #1
13e94                 | LR__1552
13e94     10 4E 05 F1 | 	add	fp, #16
13e98     A7 12 02 FB | 	rdlong	arg01, fp
13e9c     10 4E 85 F1 | 	sub	fp, #16
13ea0     0F 13 52 F2 | 	cmps	arg01, local01 wc
13ea4     28 00 90 3D |  if_ae	jmp	#LR__1553
13ea8     0C 4E 05 F1 | 	add	fp, #12
13eac     A7 12 02 FB | 	rdlong	arg01, fp
13eb0     0C 4E 85 F1 | 	sub	fp, #12
13eb4     B4 51 B0 FD | 	call	#__system___waitms
13eb8     10 4E 05 F1 | 	add	fp, #16
13ebc     A7 12 02 FB | 	rdlong	arg01, fp
13ec0     01 12 06 F1 | 	add	arg01, #1
13ec4     A7 12 62 FC | 	wrlong	arg01, fp
13ec8     10 4E 85 F1 | 	sub	fp, #16
13ecc     C4 FF 9F FD | 	jmp	#LR__1552
13ed0                 | LR__1553
13ed0     0C 4E 05 F1 | 	add	fp, #12
13ed4     A7 1E 02 FB | 	rdlong	local01, fp
13ed8     0F 1F 52 F6 | 	abs	local01, local01 wc
13edc     09 00 00 FF 
13ee0     88 1F 16 FD | 	qdiv	local01, ##5000
13ee4     0C 4E 85 F1 | 	sub	fp, #12
13ee8     19 1E 62 FD | 	getqy	local01
13eec     0F 13 82 F6 | 	negc	arg01, local01
13ef0     78 51 B0 FD | 	call	#__system___waitms
13ef4                 | LR__1554
13ef4                 | LR__1555
13ef4     A7 F0 03 F6 | 	mov	ptra, fp
13ef8     B2 00 A0 FD | 	call	#popregs_
13efc                 | _do_waitms_ret
13efc     2D 00 64 FD | 	ret
13f00                 | 
13f00                 | ' 
13f00                 | ' sub do_waitvbl
13f00                 | _do_waitvbl
13f00     01 12 06 F6 | 	mov	arg01, #1
13f04     1C 3B B0 FD | 	call	#_hg010b_spin2_waitvbl
13f08                 | _do_waitvbl_ret
13f08     2D 00 64 FD | 	ret
13f0c                 | 
13f0c                 | ' 
13f0c                 | ' sub do_waitclock
13f0c                 | _do_waitclock
13f0c     7A 00 00 FF 
13f10     48 E5 05 F1 | 	add	objptr, ##62792
13f14     F2 00 02 FB | 	rdlong	_var01, objptr
13f18                 | ' c=hkcnt
13f18                 | ' do: loop until hkcnt<>c
13f18                 | LR__1560
13f18     F2 02 02 FB | 	rdlong	_var02, objptr
13f1c     00 03 0A F2 | 	cmp	_var02, _var01 wz
13f20     F4 FF 9F AD |  if_e	jmp	#LR__1560
13f24     7A 00 00 FF 
13f28     48 E5 85 F1 | 	sub	objptr, ##62792
13f2c                 | _do_waitclock_ret
13f2c     2D 00 64 FD | 	ret
13f30                 | 
13f30                 | ' 
13f30                 | ' sub do_dir
13f30                 | _do_dir
13f30     03 4A 05 F6 | 	mov	COUNT_, #3
13f34     A8 00 A0 FD | 	call	#pushregs_
13f38     44 01 00 FF 
13f3c     6A 12 06 F6 | 	mov	arg01, ##@LR__4598
13f40     C0 54 B0 FD | 	call	#__system___chdir
13f44                 | ' chdir("/sd/bas")       ' set working directory
13f44                 | ' print "Working directory: "; currentdir$ 
13f44     00 12 06 F6 | 	mov	arg01, #0
13f48     30 A7 B0 FD | 	call	#__system___getiolock_0423
13f4c     FD 12 02 F6 | 	mov	arg01, result1
13f50     24 4E B0 FD | 	call	#__system___lockmem
13f54     44 01 00 FF 
13f58     72 14 06 F6 | 	mov	arg02, ##@LR__4599
13f5c     00 12 06 F6 | 	mov	arg01, #0
13f60     00 16 06 F6 | 	mov	arg03, #0
13f64     04 5B B0 FD | 	call	#__system___basic_print_string
13f68     71 00 00 FF 
13f6c     68 E5 05 F1 | 	add	objptr, ##58216
13f70     F2 14 02 FB | 	rdlong	arg02, objptr
13f74     71 00 00 FF 
13f78     68 E5 85 F1 | 	sub	objptr, ##58216
13f7c     00 12 06 F6 | 	mov	arg01, #0
13f80     00 16 06 F6 | 	mov	arg03, #0
13f84     E4 5A B0 FD | 	call	#__system___basic_print_string
13f88     00 12 06 F6 | 	mov	arg01, #0
13f8c     0A 14 06 F6 | 	mov	arg02, #10
13f90     00 16 06 F6 | 	mov	arg03, #0
13f94     7C 5A B0 FD | 	call	#__system___basic_print_char
13f98     00 12 06 F6 | 	mov	arg01, #0
13f9c     DC A6 B0 FD | 	call	#__system___getiolock_0423
13fa0     FD 00 68 FC | 	wrlong	#0, result1
13fa4     44 01 00 FF 
13fa8     86 12 06 F6 | 	mov	arg01, ##@LR__4600
13fac     10 14 06 F6 | 	mov	arg02, #16
13fb0     00 A8 B0 FD | 	call	#__system___basic_dir
13fb4     FD 1E 02 F6 | 	mov	local01, result1
13fb8                 | ' 
13fb8                 | ' filename=dir$("*", fbDirectory)
13fb8                 | ' while filename <> "" and filename <> nil
13fb8                 | LR__1570
13fb8     00 20 06 F6 | 	mov	local02, #0
13fbc     44 01 00 FF 
13fc0     88 14 06 F6 | 	mov	arg02, ##@LR__4601
13fc4     0F 13 02 F6 | 	mov	arg01, local01
13fc8     D4 4D B0 FD | 	call	#__system___string_cmp
13fcc     00 FA 0D F2 | 	cmp	result1, #0 wz
13fd0     00 20 26 56 |  if_ne	not	local02, #0
13fd4     00 22 06 F6 | 	mov	local03, #0
13fd8     0F 13 02 F6 | 	mov	arg01, local01
13fdc     00 14 06 F6 | 	mov	arg02, #0
13fe0     BC 4D B0 FD | 	call	#__system___string_cmp
13fe4     00 FA 0D F2 | 	cmp	result1, #0 wz
13fe8     00 22 26 56 |  if_ne	not	local03, #0
13fec     11 21 CA F7 | 	test	local02, local03 wz
13ff0     64 00 90 AD |  if_e	jmp	#LR__1571
13ff4                 | '   print "[dir] ";filename
13ff4     00 12 06 F6 | 	mov	arg01, #0
13ff8     80 A6 B0 FD | 	call	#__system___getiolock_0423
13ffc     FD 12 02 F6 | 	mov	arg01, result1
14000     74 4D B0 FD | 	call	#__system___lockmem
14004     44 01 00 FF 
14008     89 14 06 F6 | 	mov	arg02, ##@LR__4602
1400c     00 12 06 F6 | 	mov	arg01, #0
14010     00 16 06 F6 | 	mov	arg03, #0
14014     54 5A B0 FD | 	call	#__system___basic_print_string
14018     00 12 06 F6 | 	mov	arg01, #0
1401c     0F 15 02 F6 | 	mov	arg02, local01
14020     00 16 06 F6 | 	mov	arg03, #0
14024     44 5A B0 FD | 	call	#__system___basic_print_string
14028     00 12 06 F6 | 	mov	arg01, #0
1402c     0A 14 06 F6 | 	mov	arg02, #10
14030     00 16 06 F6 | 	mov	arg03, #0
14034     DC 59 B0 FD | 	call	#__system___basic_print_char
14038     00 12 06 F6 | 	mov	arg01, #0
1403c     3C A6 B0 FD | 	call	#__system___getiolock_0423
14040     FD 00 68 FC | 	wrlong	#0, result1
14044     00 12 06 F6 | 	mov	arg01, #0
14048     00 14 06 F6 | 	mov	arg02, #0
1404c     64 A7 B0 FD | 	call	#__system___basic_dir
14050     FD 1E 02 F6 | 	mov	local01, result1
14054     60 FF 9F FD | 	jmp	#LR__1570
14058                 | LR__1571
14058     44 01 00 FF 
1405c     90 12 06 F6 | 	mov	arg01, ##@LR__4603
14060     21 14 06 F6 | 	mov	arg02, #33
14064     4C A7 B0 FD | 	call	#__system___basic_dir
14068     FD 1E 02 F6 | 	mov	local01, result1
1406c                 | ' 
1406c                 | ' filename = dir$("*", fbNormal )  ' start scan for all files and directories
1406c                 | ' do while filename <> "" and filename <> nil
1406c                 | LR__1572
1406c     00 20 06 F6 | 	mov	local02, #0
14070     44 01 00 FF 
14074     92 14 06 F6 | 	mov	arg02, ##@LR__4604
14078     0F 13 02 F6 | 	mov	arg01, local01
1407c     20 4D B0 FD | 	call	#__system___string_cmp
14080     00 FA 0D F2 | 	cmp	result1, #0 wz
14084     00 20 26 56 |  if_ne	not	local02, #0
14088     00 22 06 F6 | 	mov	local03, #0
1408c     0F 13 02 F6 | 	mov	arg01, local01
14090     00 14 06 F6 | 	mov	arg02, #0
14094     08 4D B0 FD | 	call	#__system___string_cmp
14098     00 FA 0D F2 | 	cmp	result1, #0 wz
1409c     00 22 26 56 |  if_ne	not	local03, #0
140a0     11 21 CA F7 | 	test	local02, local03 wz
140a4     4C 01 90 AD |  if_e	jmp	#LR__1576
140a8                 | '   print filename
140a8     00 12 06 F6 | 	mov	arg01, #0
140ac     CC A5 B0 FD | 	call	#__system___getiolock_0423
140b0     FD 12 02 F6 | 	mov	arg01, result1
140b4     C0 4C B0 FD | 	call	#__system___lockmem
140b8     00 12 06 F6 | 	mov	arg01, #0
140bc     0F 15 02 F6 | 	mov	arg02, local01
140c0     00 16 06 F6 | 	mov	arg03, #0
140c4     A4 59 B0 FD | 	call	#__system___basic_print_string
140c8     00 12 06 F6 | 	mov	arg01, #0
140cc     0A 14 06 F6 | 	mov	arg02, #10
140d0     00 16 06 F6 | 	mov	arg03, #0
140d4     3C 59 B0 FD | 	call	#__system___basic_print_char
140d8     00 12 06 F6 | 	mov	arg01, #0
140dc     9C A5 B0 FD | 	call	#__system___getiolock_0423
140e0     FD 00 68 FC | 	wrlong	#0, result1
140e4     00 12 06 F6 | 	mov	arg01, #0
140e8     00 14 06 F6 | 	mov	arg02, #0
140ec     C4 A6 B0 FD | 	call	#__system___basic_dir
140f0     FD 1E 02 F6 | 	mov	local01, result1
140f4                 | '   filename = dir$()      ' continue scan
140f4                 | '     if v.getcursory()=34 then    'bug, after first break, cursory is always 35
140f4                 | ' return cursor_y
140f4     3A E4 05 F1 | 	add	objptr, #58
140f8     F2 FA C1 FA | 	rdbyte	result1, objptr
140fc     3A E4 85 F1 | 	sub	objptr, #58
14100     22 FA 0D F2 | 	cmp	result1, #34 wz
14104     64 FF 9F 5D |  if_ne	jmp	#LR__1572
14108                 | '     print "-----more, press any key";
14108     00 12 06 F6 | 	mov	arg01, #0
1410c     6C A5 B0 FD | 	call	#__system___getiolock_0423
14110     FD 12 02 F6 | 	mov	arg01, result1
14114     60 4C B0 FD | 	call	#__system___lockmem
14118     44 01 00 FF 
1411c     93 14 06 F6 | 	mov	arg02, ##@LR__4605
14120     00 12 06 F6 | 	mov	arg01, #0
14124     00 16 06 F6 | 	mov	arg03, #0
14128     40 59 B0 FD | 	call	#__system___basic_print_string
1412c     00 12 06 F6 | 	mov	arg01, #0
14130     48 A5 B0 FD | 	call	#__system___getiolock_0423
14134     FD 00 68 FC | 	wrlong	#0, result1
14138                 | '     do 
14138                 | LR__1573
14138     DC 44 B0 FD | 	call	#_usbnew_spin2_get_key
1413c     00 FA 0D F2 | 	cmp	result1, #0 wz
14140     F4 FF 9F 5D |  if_ne	jmp	#LR__1573
14144                 | '     do
14144                 | LR__1574
14144     D0 44 B0 FD | 	call	#_usbnew_spin2_get_key
14148     00 FA 0D F2 | 	cmp	result1, #0 wz
1414c     F4 FF 9F AD |  if_e	jmp	#LR__1574
14150                 | '       if keyclick=1 then paula.play(7,keyclick_spl,44100,16384,spl_len) 
14150     79 00 00 FF 
14154     B4 E4 05 F1 | 	add	objptr, ##62132
14158     F2 20 02 FB | 	rdlong	local02, objptr
1415c     79 00 00 FF 
14160     B4 E4 85 F1 | 	sub	objptr, ##62132
14164     01 20 0E F2 | 	cmp	local02, #1 wz
14168     3C 00 90 5D |  if_ne	jmp	#LR__1575
1416c     7A 00 00 FF 
14170     58 E5 05 F1 | 	add	objptr, ##62808
14174     F2 14 02 FB | 	rdlong	arg02, objptr
14178     04 E4 85 F1 | 	sub	objptr, #4
1417c     F2 1A 02 FB | 	rdlong	arg05, objptr
14180     07 12 06 F6 | 	mov	arg01, #7
14184     56 00 00 FF 
14188     44 16 06 F6 | 	mov	arg03, ##44100
1418c     0E 18 C6 F9 | 	decod	arg04, #14
14190     01 1C 66 F6 | 	neg	arg06, #1
14194     6F 00 00 FF 
14198     94 E4 85 F1 | 	sub	objptr, ##56980
1419c     A0 47 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
141a0     0B 00 00 FF 
141a4     C0 E4 85 F1 | 	sub	objptr, ##5824
141a8                 | LR__1575
141a8     00 12 06 F6 | 	mov	arg01, #0
141ac     23 14 06 F6 | 	mov	arg02, #35
141b0     38 38 B0 FD | 	call	#_hg010b_spin2_setcursorpos
141b4                 | '     position 0,35: print "                             ";: position 4,35  
141b4     00 12 06 F6 | 	mov	arg01, #0
141b8     C0 A4 B0 FD | 	call	#__system___getiolock_0423
141bc     FD 12 02 F6 | 	mov	arg01, result1
141c0     B4 4B B0 FD | 	call	#__system___lockmem
141c4     44 01 00 FF 
141c8     AC 14 06 F6 | 	mov	arg02, ##@LR__4606
141cc     00 12 06 F6 | 	mov	arg01, #0
141d0     00 16 06 F6 | 	mov	arg03, #0
141d4     94 58 B0 FD | 	call	#__system___basic_print_string
141d8     00 12 06 F6 | 	mov	arg01, #0
141dc     9C A4 B0 FD | 	call	#__system___getiolock_0423
141e0     FD 00 68 FC | 	wrlong	#0, result1
141e4     04 12 06 F6 | 	mov	arg01, #4
141e8     23 14 06 F6 | 	mov	arg02, #35
141ec     FC 37 B0 FD | 	call	#_hg010b_spin2_setcursorpos
141f0     78 FE 9F FD | 	jmp	#LR__1572
141f4                 | LR__1576
141f4     A7 F0 03 F6 | 	mov	ptra, fp
141f8     B2 00 A0 FD | 	call	#popregs_
141fc                 | _do_dir_ret
141fc     2D 00 64 FD | 	ret
14200                 | 
14200                 | ' 
14200                 | ' sub do_if
14200                 | _do_if
14200     05 4A 05 F6 | 	mov	COUNT_, #5
14204     A8 00 A0 FD | 	call	#pushregs_
14208     D8 56 BF FD | 	call	#_pop
1420c     FD 1E 0A F6 | 	mov	local01, result1 wz
14210     FE 20 02 F6 | 	mov	local02, result2
14214     FF 22 02 F6 | 	mov	local03, result3
14218                 | ' t1=pop()
14218                 | ' ' if uresult=0, jump over else
14218                 | ' if t1.result.uresult = 0 then 
14218     BC 00 90 5D |  if_ne	jmp	#LR__1582
1421c                 | '   for i=lineptr_e to lineptr-1
1421c     69 00 00 FF 
14220     54 E5 05 F1 | 	add	objptr, ##54100
14224     F2 24 02 FB | 	rdlong	local04, objptr
14228     04 E4 85 F1 | 	sub	objptr, #4
1422c     F2 26 02 FB | 	rdlong	local05, objptr
14230     69 00 00 FF 
14234     50 E5 85 F1 | 	sub	objptr, ##54096
14238                 | LR__1580
14238     13 25 52 F2 | 	cmps	local04, local05 wc
1423c     78 00 90 3D |  if_ae	jmp	#LR__1581
14240     12 FF 01 F6 | 	mov	result3, local04
14244     01 FE 65 F0 | 	shl	result3, #1
14248     12 FF 01 F1 | 	add	result3, local04
1424c     02 FE 65 F0 | 	shl	result3, #2
14250     66 00 00 FF 
14254     50 E5 05 F1 | 	add	objptr, ##52560
14258     F2 FE 01 F1 | 	add	result3, objptr
1425c     FF 1E 02 FB | 	rdlong	local01, result3
14260     04 FE 05 F1 | 	add	result3, #4
14264     FF FC 01 FB | 	rdlong	result2, result3
14268     12 FF 01 F6 | 	mov	result3, local04
1426c     01 FE 65 F0 | 	shl	result3, #1
14270     12 FF 01 F1 | 	add	result3, local04
14274     02 FE 65 F0 | 	shl	result3, #2
14278     F2 FE 01 F1 | 	add	result3, objptr
1427c     08 FE 05 F1 | 	add	result3, #8
14280     FF FE 01 FB | 	rdlong	result3, result3
14284     FE 20 02 F6 | 	mov	local02, result2
14288     FF 22 02 F6 | 	mov	local03, result3
1428c                 | '     t1=compiledline(i)
1428c                 | '     if t1.result_type=token_else then lineptr_e=i : return
1428c     5A 22 0E F2 | 	cmp	local03, #90 wz
14290     66 00 00 FF 
14294     50 E5 85 F1 | 	sub	objptr, ##52560
14298     69 00 00 AF 
1429c     54 E5 05 A1 |  if_e	add	objptr, ##54100
142a0     F2 24 62 AC |  if_e	wrlong	local04, objptr
142a4     69 00 00 AF 
142a8     54 E5 85 A1 |  if_e	sub	objptr, ##54100
142ac     28 00 90 AD |  if_e	jmp	#LR__1583
142b0     01 24 06 F1 | 	add	local04, #1
142b4     80 FF 9F FD | 	jmp	#LR__1580
142b8                 | LR__1581
142b8     69 00 00 FF 
142bc     50 E5 05 F1 | 	add	objptr, ##54096
142c0     F2 26 02 FB | 	rdlong	local05, objptr
142c4     01 26 86 F1 | 	sub	local05, #1
142c8     04 E4 05 F1 | 	add	objptr, #4
142cc     F2 26 62 FC | 	wrlong	local05, objptr
142d0     69 00 00 FF 
142d4     54 E5 85 F1 | 	sub	objptr, ##54100
142d8                 | LR__1582
142d8                 | LR__1583
142d8     A7 F0 03 F6 | 	mov	ptra, fp
142dc     B2 00 A0 FD | 	call	#popregs_
142e0                 | _do_if_ret
142e0     2D 00 64 FD | 	ret
142e4                 | 
142e4                 | ' 
142e4                 | ' sub do_else
142e4                 | _do_else
142e4     69 00 00 FF 
142e8     50 E5 05 F1 | 	add	objptr, ##54096
142ec     F2 00 02 FB | 	rdlong	_var01, objptr
142f0     01 00 86 F1 | 	sub	_var01, #1
142f4     04 E4 05 F1 | 	add	objptr, #4
142f8     F2 00 62 FC | 	wrlong	_var01, objptr
142fc     69 00 00 FF 
14300     54 E5 85 F1 | 	sub	objptr, ##54100
14304                 | _do_else_ret
14304     2D 00 64 FD | 	ret
14308                 | 
14308                 | ' 
14308                 | ' sub do_rad
14308                 | _do_rad
14308     7A 00 00 FF 
1430c     5C E5 05 F1 | 	add	objptr, ##62812
14310     00 C0 9F FF 
14314     F2 00 68 FC | 	wrlong	##1065353216, objptr
14318     04 E4 05 F1 | 	add	objptr, #4
1431c     00 C0 9F FF 
14320     F2 00 68 FC | 	wrlong	##1065353216, objptr
14324     7A 00 00 FF 
14328     60 E5 85 F1 | 	sub	objptr, ##62816
1432c                 | _do_rad_ret
1432c     2D 00 64 FD | 	ret
14330                 | 
14330                 | ' 
14330                 | ' sub do_deg
14330                 | _do_deg
14330     7A 00 00 FF 
14334     5C E5 05 F1 | 	add	objptr, ##62812
14338     7D 47 9E FF 
1433c     F2 6A 68 FC | 	wrlong	##1016003125, objptr
14340     04 E4 05 F1 | 	add	objptr, #4
14344     97 32 A1 FF 
14348     F2 C2 69 FC | 	wrlong	##1113927393, objptr
1434c     7A 00 00 FF 
14350     60 E5 85 F1 | 	sub	objptr, ##62816
14354                 | _do_deg_ret
14354     2D 00 64 FD | 	ret
14358                 | 
14358                 | ' 
14358                 | ' sub do_int
14358                 | _do_int
14358     00 4A 05 F6 | 	mov	COUNT_, #0
1435c     A8 00 A0 FD | 	call	#pushregs_
14360     0C F0 07 F1 | 	add	ptra, #12
14364     7C 55 BF FD | 	call	#_pop
14368     A7 FA 61 FC | 	wrlong	result1, fp
1436c     04 4E 05 F1 | 	add	fp, #4
14370     A7 FC 61 FC | 	wrlong	result2, fp
14374     04 4E 05 F1 | 	add	fp, #4
14378     A7 FE 61 FC | 	wrlong	result3, fp
1437c     08 4E 85 F1 | 	sub	fp, #8
14380     A7 12 02 F6 | 	mov	arg01, fp
14384     CC CA BF FD | 	call	#_converttoint
14388     A7 FA 61 FC | 	wrlong	result1, fp
1438c     08 4E 05 F1 | 	add	fp, #8
14390     A7 38 68 FC | 	wrlong	#28, fp
14394     08 4E 85 F1 | 	sub	fp, #8
14398     A7 12 02 F6 | 	mov	arg01, fp
1439c     DC 55 BF FD | 	call	#_push
143a0     A7 F0 03 F6 | 	mov	ptra, fp
143a4     B2 00 A0 FD | 	call	#popregs_
143a8                 | _do_int_ret
143a8     2D 00 64 FD | 	ret
143ac                 | 
143ac                 | ' 
143ac                 | ' sub do_nothing
143ac                 | _do_nothing
143ac                 | _do_nothing_ret
143ac     2D 00 64 FD | 	ret
143b0                 | 
143b0                 | ' 
143b0                 | ' sub do_brun
143b0                 | _do_brun
143b0     08 4A 05 F6 | 	mov	COUNT_, #8
143b4     A8 00 A0 FD | 	call	#pushregs_
143b8     28 55 BF FD | 	call	#_pop
143bc     FE 1A 02 F6 | 	mov	arg05, result2
143c0     FF 18 02 F6 | 	mov	arg04, result3
143c4     FD 1E 02 F6 | 	mov	local01, result1
143c8     0D 21 02 F6 | 	mov	local02, arg05
143cc     0C 23 02 F6 | 	mov	local03, arg04
143d0                 | ' 
143d0                 | ' t1=pop() 
143d0                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
143d0     2B 22 0E F2 | 	cmp	local03, #43 wz
143d4     10 00 90 5D |  if_ne	jmp	#LR__1590
143d8     0F 13 02 F6 | 	mov	arg01, local01
143dc     40 86 BF FD | 	call	#_convertstring
143e0     FD 1E 02 F6 | 	mov	local01, result1
143e4     1F 22 06 F6 | 	mov	local03, #31
143e8                 | LR__1590
143e8                 | ' if t1.result_type=result_string then
143e8     1F 22 0E F2 | 	cmp	local03, #31 wz
143ec     EC 01 90 5D |  if_ne	jmp	#LR__1594
143f0     0F 25 02 F6 | 	mov	local04, local01
143f4                 | '   filename=t1.result.sresult
143f4                 | '   if left$(filename,1)="/" then 
143f4     12 13 02 F6 | 	mov	arg01, local04
143f8     01 14 06 F6 | 	mov	arg02, #1
143fc     88 69 B0 FD | 	call	#__system__Left_S
14400     FD 12 02 F6 | 	mov	arg01, result1
14404     44 01 00 FF 
14408     CA 14 06 F6 | 	mov	arg02, ##@LR__4607
1440c     90 49 B0 FD | 	call	#__system___string_cmp
14410     00 FA 0D F2 | 	cmp	result1, #0 wz
14414     12 27 02 A6 |  if_e	mov	local05, local04
14418     14 00 90 AD |  if_e	jmp	#LR__1591
1441c     44 01 00 FF 
14420     CC 12 06 F6 | 	mov	arg01, ##@LR__4608
14424     12 15 02 F6 | 	mov	arg02, local04
14428     A8 49 B0 FD | 	call	#__system___string_concat
1442c     FD 26 02 F6 | 	mov	local05, result1
14430                 | LR__1591
14430                 | ' '  if mid$(filename,2,1)=":" then fullfilename=right$(filename,len(filename-3)) ' todo for future: strip c:/
14430                 | '   open fullfilename for input as #9
14430     09 12 06 F6 | 	mov	arg01, #9
14434     13 15 02 F6 | 	mov	arg02, local05
14438     00 16 06 F6 | 	mov	arg03, #0
1443c     3C 55 B0 FD | 	call	#__system___basic_open_string
14440     20 E8 05 F1 | 	add	ptr___system__dat__, #32
14444     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
14448     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1444c     FD 28 0A F6 | 	mov	local06, result1 wz
14450                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
14450     8C 00 90 AD |  if_e	jmp	#LR__1592
14454     00 12 06 F6 | 	mov	arg01, #0
14458     20 A2 B0 FD | 	call	#__system___getiolock_0423
1445c     FD 12 02 F6 | 	mov	arg01, result1
14460     14 49 B0 FD | 	call	#__system___lockmem
14464     44 01 00 FF 
14468     D5 14 06 F6 | 	mov	arg02, ##@LR__4609
1446c     00 12 06 F6 | 	mov	arg01, #0
14470     00 16 06 F6 | 	mov	arg03, #0
14474     F4 55 B0 FD | 	call	#__system___basic_print_string
14478     00 12 06 F6 | 	mov	arg01, #0
1447c     14 15 02 F6 | 	mov	arg02, local06
14480     00 16 06 F6 | 	mov	arg03, #0
14484     0A 18 06 F6 | 	mov	arg04, #10
14488     24 56 B0 FD | 	call	#__system___basic_print_integer
1448c     44 01 00 FF 
14490     E3 14 06 F6 | 	mov	arg02, ##@LR__4610
14494     00 12 06 F6 | 	mov	arg01, #0
14498     00 16 06 F6 | 	mov	arg03, #0
1449c     CC 55 B0 FD | 	call	#__system___basic_print_string
144a0     14 13 02 F6 | 	mov	arg01, local06
144a4     D0 6E B0 FD | 	call	#__system___strerror
144a8     FD 14 02 F6 | 	mov	arg02, result1
144ac     00 12 06 F6 | 	mov	arg01, #0
144b0     00 16 06 F6 | 	mov	arg03, #0
144b4     B4 55 B0 FD | 	call	#__system___basic_print_string
144b8     00 12 06 F6 | 	mov	arg01, #0
144bc     0A 14 06 F6 | 	mov	arg02, #10
144c0     00 16 06 F6 | 	mov	arg03, #0
144c4     4C 55 B0 FD | 	call	#__system___basic_print_char
144c8     00 12 06 F6 | 	mov	arg01, #0
144cc     AC A1 B0 FD | 	call	#__system___getiolock_0423
144d0     FD 00 68 FC | 	wrlong	#0, result1
144d4     09 12 06 F6 | 	mov	arg01, #9
144d8     D0 97 B0 FD | 	call	#__system__close
144dc     FC 00 90 FD | 	jmp	#LR__1595
144e0                 | LR__1592
144e0     01 2A 06 F6 | 	mov	local07, #1
144e4     00 2C 06 F6 | 	mov	local08, #0
144e8                 | '   do
144e8                 | LR__1593
144e8                 | '     get #9,pos,block(0),1024,r : pos+=r	
144e8     77 00 00 FF 
144ec     80 E4 05 F1 | 	add	objptr, ##61056
144f0     F2 16 02 F6 | 	mov	arg03, objptr
144f4     77 00 00 FF 
144f8     80 E4 85 F1 | 	sub	objptr, ##61056
144fc     09 12 06 F6 | 	mov	arg01, #9
14500     15 15 02 F6 | 	mov	arg02, local07
14504     0A 18 C6 F9 | 	decod	arg04, #10
14508     01 1A 06 F6 | 	mov	arg05, #1
1450c     6C 56 B0 FD | 	call	#__system___basic_get
14510     FD 28 02 F6 | 	mov	local06, result1
14514     FD 2A 02 F1 | 	add	local07, result1
14518     77 00 00 FF 
1451c     80 E4 05 F1 | 	add	objptr, ##61056
14520     F2 12 02 F6 | 	mov	arg01, objptr
14524     16 15 02 F6 | 	mov	arg02, local08
14528     0A 16 C6 F9 | 	decod	arg03, #10
1452c     6B 00 00 FF 
14530     C0 E5 85 F1 | 	sub	objptr, ##55232
14534     EC 3D B0 FD | 	call	#_psram_spin2_write
14538     0B 00 00 FF 
1453c     C0 E4 85 F1 | 	sub	objptr, ##5824
14540     14 2D 02 F1 | 	add	local08, local06
14544     02 00 00 FF 
14548     00 28 0E F2 | 	cmp	local06, ##1024 wz
1454c     E0 03 00 AF 
14550     00 2C 56 A2 |  if_e	cmps	local08, ##507904 wc
14554     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1593
14558     56 00 00 FF 
1455c     D0 E4 05 F1 | 	add	objptr, ##44240
14560     F2 12 02 FB | 	rdlong	arg01, objptr
14564     03 12 62 FD | 	cogstop	arg01
14568     04 E4 05 F1 | 	add	objptr, #4
1456c     F2 12 02 FB | 	rdlong	arg01, objptr
14570     03 12 62 FD | 	cogstop	arg01
14574     04 E4 05 F1 | 	add	objptr, #4
14578     F2 12 02 FB | 	rdlong	arg01, objptr
1457c     03 12 62 FD | 	cogstop	arg01
14580     22 00 00 FF 
14584     E0 E5 05 F1 | 	add	objptr, ##17888
14588     F2 12 02 FB | 	rdlong	arg01, objptr
1458c     03 12 62 FD | 	cogstop	arg01
14590     10 00 00 FF 
14594     9C EA 05 F1 | 	add	ptr__dat__, ##8348
14598     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1459c     10 00 00 FF 
145a0     9C EA 85 F1 | 	sub	ptr__dat__, ##8348
145a4     22 00 00 FF 
145a8     D8 E5 85 F1 | 	sub	objptr, ##17880
145ac     1E 2C 06 F6 | 	mov	local08, #30
145b0     28 E4 61 FD | 	setq	objptr
145b4     0A 2D F2 FC | 	coginit	local08, arg02 wc
145b8     01 2C 66 C6 |  if_b	neg	local08, #1
145bc     24 00 00 FF 
145c0     FC E4 05 F1 | 	add	objptr, ##18684
145c4     F2 2C 62 FC | 	wrlong	local08, objptr
145c8     7A 00 00 FF 
145cc     DC E5 85 F1 | 	sub	objptr, ##62940
145d0     00 12 06 F6 | 	mov	arg01, #0
145d4     01 12 62 FD | 	cogid	arg01
145d8     03 12 62 FD | 	cogstop	arg01
145dc                 | LR__1594
145dc                 | LR__1595
145dc     A7 F0 03 F6 | 	mov	ptra, fp
145e0     B2 00 A0 FD | 	call	#popregs_
145e4                 | _do_brun_ret
145e4     2D 00 64 FD | 	ret
145e8                 | 
145e8                 | ' 
145e8                 | ' 
145e8                 | ' sub do_mouse
145e8                 | _do_mouse
145e8     F8 52 BF FD | 	call	#_pop
145ec     00 FA 4D F2 | 	cmps	result1, #0 wz
145f0                 | ' 
145f0                 | ' t1=pop()
145f0                 | ' 
145f0                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
145f0     14 00 90 5D |  if_ne	jmp	#LR__1600
145f4     10 12 06 F6 | 	mov	arg01, #16
145f8     00 14 06 F6 | 	mov	arg02, #0
145fc     00 16 06 F6 | 	mov	arg03, #0
14600     D8 27 B0 FD | 	call	#_hg010b_spin2_setspritesize
14604     10 00 90 FD | 	jmp	#LR__1601
14608                 | LR__1600
14608     10 12 06 F6 | 	mov	arg01, #16
1460c     20 14 06 F6 | 	mov	arg02, #32
14610     20 16 06 F6 | 	mov	arg03, #32
14614     C4 27 B0 FD | 	call	#_hg010b_spin2_setspritesize
14618                 | LR__1601
14618                 | _do_mouse_ret
14618     2D 00 64 FD | 	ret
1461c                 | 
1461c                 | ' 
1461c                 | ' sub do_cursor
1461c                 | _do_cursor
1461c     C4 52 BF FD | 	call	#_pop
14620     00 FA 4D F2 | 	cmps	result1, #0 wz
14624                 | ' 
14624                 | ' t1=pop()
14624                 | ' 
14624                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
14624     14 00 90 5D |  if_ne	jmp	#LR__1610
14628     11 12 06 F6 | 	mov	arg01, #17
1462c     00 14 06 F6 | 	mov	arg02, #0
14630     00 16 06 F6 | 	mov	arg03, #0
14634     A4 27 B0 FD | 	call	#_hg010b_spin2_setspritesize
14638     10 00 90 FD | 	jmp	#LR__1611
1463c                 | LR__1610
1463c     11 12 06 F6 | 	mov	arg01, #17
14640     08 14 06 F6 | 	mov	arg02, #8
14644     10 16 06 F6 | 	mov	arg03, #16
14648     90 27 B0 FD | 	call	#_hg010b_spin2_setspritesize
1464c                 | LR__1611
1464c                 | _do_cursor_ret
1464c     2D 00 64 FD | 	ret
14650                 | 
14650                 | ' 
14650                 | ' 
14650                 | ' sub do_click
14650                 | _do_click
14650     90 52 BF FD | 	call	#_pop
14654     00 FA 4D F2 | 	cmps	result1, #0 wz
14658                 | ' 
14658                 | ' t1=pop()
14658                 | ' 
14658                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
14658     79 00 00 AF 
1465c     B4 E4 05 A1 |  if_e	add	objptr, ##62132
14660     F2 00 68 AC |  if_e	wrlong	#0, objptr
14664     79 00 00 FF 
14668     B4 E4 C5 F3 | 	sumz	objptr, ##62132
1466c     F2 02 68 5C |  if_ne	wrlong	#1, objptr
14670     79 00 00 5F 
14674     B4 E4 85 51 |  if_ne	sub	objptr, ##62132
14678                 | _do_click_ret
14678     2D 00 64 FD | 	ret
1467c                 | 
1467c                 | ' 
1467c                 | ' 
1467c                 | ' sub do_beep
1467c                 | _do_beep
1467c     02 4A 05 F6 | 	mov	COUNT_, #2
14680     A8 00 A0 FD | 	call	#pushregs_
14684     20 F0 07 F1 | 	add	ptra, #32
14688     58 52 BF FD | 	call	#_pop
1468c     FD 1E 02 F6 | 	mov	local01, result1
14690     FE 1C 02 F6 | 	mov	arg06, result2
14694     FF 20 02 F6 | 	mov	local02, result3
14698     0C 4E 05 F1 | 	add	fp, #12
1469c     A7 1E 62 FC | 	wrlong	local01, fp
146a0     04 4E 05 F1 | 	add	fp, #4
146a4     A7 1C 62 FC | 	wrlong	arg06, fp
146a8     04 4E 05 F1 | 	add	fp, #4
146ac     A7 20 62 FC | 	wrlong	local02, fp
146b0     14 4E 85 F1 | 	sub	fp, #20
146b4     2C 52 BF FD | 	call	#_pop
146b8     A7 FA 61 FC | 	wrlong	result1, fp
146bc     04 4E 05 F1 | 	add	fp, #4
146c0     A7 FC 61 FC | 	wrlong	result2, fp
146c4     04 4E 05 F1 | 	add	fp, #4
146c8     A7 FE 61 FC | 	wrlong	result3, fp
146cc                 | ' 
146cc                 | ' 
146cc                 | ' 
146cc                 | ' t2=pop()
146cc                 | ' t1=pop()
146cc                 | ' 
146cc                 | ' 
146cc                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
146cc     08 4E 85 F1 | 	sub	fp, #8
146d0     1C FE 0D F2 | 	cmp	result3, #28 wz
146d4     08 4E 05 51 |  if_ne	add	fp, #8
146d8     A7 20 02 5B |  if_ne	rdlong	local02, fp
146dc     08 4E 85 51 |  if_ne	sub	fp, #8
146e0     1D 20 0E 52 |  if_ne	cmp	local02, #29 wz
146e4     A7 1E 02 AB |  if_e	rdlong	local01, fp
146e8     18 4E 05 A1 |  if_e	add	fp, #24
146ec     A7 1E 62 AC |  if_e	wrlong	local01, fp
146f0     18 4E 85 A1 |  if_e	sub	fp, #24
146f4     14 00 90 AD |  if_e	jmp	#LR__1620
146f8     A7 12 02 F6 | 	mov	arg01, fp
146fc     54 C7 BF FD | 	call	#_converttoint
14700     18 4E 05 F1 | 	add	fp, #24
14704     A7 FA 61 FC | 	wrlong	result1, fp
14708     18 4E 85 F1 | 	sub	fp, #24
1470c                 | LR__1620
1470c     1C 4E 05 F1 | 	add	fp, #28
14710     A7 FE 48 FC | 	wrbyte	#127, fp
14714     01 4E 05 F1 | 	add	fp, #1
14718     A7 00 49 FC | 	wrbyte	#128, fp
1471c     01 4E 85 F1 | 	sub	fp, #1
14720     A7 14 02 F6 | 	mov	arg02, fp
14724     04 4E 85 F1 | 	sub	fp, #4
14728     A7 16 02 FB | 	rdlong	arg03, fp
1472c     18 4E 85 F1 | 	sub	fp, #24
14730     01 16 66 F0 | 	shl	arg03, #1
14734     07 12 06 F6 | 	mov	arg01, #7
14738     0E 18 C6 F9 | 	decod	arg04, #14
1473c     02 1A 06 F6 | 	mov	arg05, #2
14740     00 1C 06 F6 | 	mov	arg06, #0
14744     0B 00 00 FF 
14748     C0 E4 05 F1 | 	add	objptr, ##5824
1474c     8C 42 B0 FD | 	call	#_Audio093b_8_sc_spin2_play8
14750     0B 00 00 FF 
14754     C0 E4 85 F1 | 	sub	objptr, ##5824
14758     0C 4E 05 F1 | 	add	fp, #12
1475c     A7 12 02 F6 | 	mov	arg01, fp
14760     0C 4E 85 F1 | 	sub	fp, #12
14764     14 52 BF FD | 	call	#_push
14768     58 F6 BF FD | 	call	#_do_waitms
1476c     07 12 06 F6 | 	mov	arg01, #7
14770     0B 00 00 FF 
14774     C0 E4 05 F1 | 	add	objptr, ##5824
14778     14 43 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
1477c     0B 00 00 FF 
14780     C0 E4 85 F1 | 	sub	objptr, ##5824
14784     A7 F0 03 F6 | 	mov	ptra, fp
14788     B2 00 A0 FD | 	call	#popregs_
1478c                 | _do_beep_ret
1478c     2D 00 64 FD | 	ret
14790                 | 
14790                 | ' 
14790                 | ' sub do_no_command
14790                 | _do_no_command
14790     17 12 06 F6 | 	mov	arg01, #23
14794     BC 10 B0 FD | 	call	#_printerror
14798                 | _do_no_command_ret
14798     2D 00 64 FD | 	ret
1479c                 | 
1479c                 | ' 
1479c                 | ' sub do_negative
1479c                 | _do_negative
1479c     02 4A 05 F6 | 	mov	COUNT_, #2
147a0     A8 00 A0 FD | 	call	#pushregs_
147a4     0C F0 07 F1 | 	add	ptra, #12
147a8     38 51 BF FD | 	call	#_pop
147ac     FF 1E 02 F6 | 	mov	local01, result3
147b0     A7 FA 61 FC | 	wrlong	result1, fp
147b4     04 4E 05 F1 | 	add	fp, #4
147b8     A7 FC 61 FC | 	wrlong	result2, fp
147bc     04 4E 05 F1 | 	add	fp, #4
147c0     A7 1E 62 FC | 	wrlong	local01, fp
147c4                 | ' t1=pop()
147c4                 | ' if t1.result_type=result_int then 
147c4     08 4E 85 F1 | 	sub	fp, #8
147c8     1C 1E 0E F2 | 	cmp	local01, #28 wz
147cc     A7 20 02 AB |  if_e	rdlong	local02, fp
147d0     10 1F 62 A6 |  if_e	neg	local01, local02
147d4     A7 1E 62 AC |  if_e	wrlong	local01, fp
147d8     5C 00 90 AD |  if_e	jmp	#LR__1632
147dc     08 4E 05 F1 | 	add	fp, #8
147e0     A7 1E 02 FB | 	rdlong	local01, fp
147e4     08 4E 85 F1 | 	sub	fp, #8
147e8     1D 1E 0E F2 | 	cmp	local01, #29 wz
147ec     1C 00 90 5D |  if_ne	jmp	#LR__1630
147f0     A7 20 02 FB | 	rdlong	local02, fp
147f4     10 1F 62 F6 | 	neg	local01, local02
147f8     A7 1E 62 FC | 	wrlong	local01, fp
147fc     08 4E 05 F1 | 	add	fp, #8
14800     A7 38 68 FC | 	wrlong	#28, fp
14804     08 4E 85 F1 | 	sub	fp, #8
14808     2C 00 90 FD | 	jmp	#LR__1631
1480c                 | LR__1630
1480c     08 4E 05 F1 | 	add	fp, #8
14810     A7 1E 02 FB | 	rdlong	local01, fp
14814     08 4E 85 F1 | 	sub	fp, #8
14818     1E 1E 0E F2 | 	cmp	local01, #30 wz
1481c     A7 FA 01 AB |  if_e	rdlong	result1, fp
14820     1F FA E5 A4 |  if_e	bitnot	result1, #31
14824     A7 FA 61 AC |  if_e	wrlong	result1, fp
14828     08 4E 05 51 |  if_ne	add	fp, #8
1482c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
14830     08 4E 85 51 |  if_ne	sub	fp, #8
14834     A7 50 68 5C |  if_ne	wrlong	#40, fp
14838                 | LR__1631
14838                 | LR__1632
14838     A7 12 02 F6 | 	mov	arg01, fp
1483c     3C 51 BF FD | 	call	#_push
14840     A7 F0 03 F6 | 	mov	ptra, fp
14844     B2 00 A0 FD | 	call	#popregs_
14848                 | _do_negative_ret
14848     2D 00 64 FD | 	ret
1484c                 | 
1484c                 | ' 
1484c                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
1484c                 | ' 
1484c                 | ' ''----------------------------------------------------------------------------------------------------
1484c                 | ' ''------------------ Initialization procedures -------------------------------------------------------
1484c                 | ' ''----------------------------------------------------------------------------------------------------
1484c                 | ' 
1484c                 | ' ''--------------------------- Command function pointers
1484c                 | ' 
1484c                 | ' sub init_commands
1484c                 | _init_commands
1484c                 | ' 
1484c                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
1484c     00 00 06 F6 | 	mov	_var01, #0
14850     97 16 48 FB | 	callpa	#(@LR__1641-@LR__1640)>>2,fcache_load_ptr_
14854                 | LR__1640
14854     00 FB 01 F6 | 	mov	result1, _var01
14858     02 FA 65 F0 | 	shl	result1, #2
1485c     62 00 00 FF 
14860     34 E5 05 F1 | 	add	objptr, ##50484
14864     F2 FA 01 F1 | 	add	result1, objptr
14868     62 00 00 FF 
1486c     34 E5 85 F1 | 	sub	objptr, ##50484
14870     FD E4 61 FC | 	wrlong	objptr, result1
14874     01 00 06 F1 | 	add	_var01, #1
14878     00 01 56 F2 | 	cmps	_var01, #256 wc
1487c     D4 FF 9F CD |  if_b	jmp	#LR__1640
14880                 | LR__1641
14880     F2 FA 01 F6 | 	mov	result1, objptr
14884     14 FA 25 F4 | 	bith	result1, #20
14888     62 00 00 FF 
1488c     38 E5 05 F1 | 	add	objptr, ##50488
14890     F2 FA 61 FC | 	wrlong	result1, objptr
14894     62 00 00 FF 
14898     38 E5 85 F1 | 	sub	objptr, ##50488
1489c     F2 FA 01 F6 | 	mov	result1, objptr
148a0     15 FA 25 F4 | 	bith	result1, #21
148a4     62 00 00 FF 
148a8     3C E5 05 F1 | 	add	objptr, ##50492
148ac     F2 FA 61 FC | 	wrlong	result1, objptr
148b0     62 00 00 FF 
148b4     3C E5 85 F1 | 	sub	objptr, ##50492
148b8     F2 FA 01 F6 | 	mov	result1, objptr
148bc     34 FA 25 F4 | 	bith	result1, #52
148c0     62 00 00 FF 
148c4     40 E5 05 F1 | 	add	objptr, ##50496
148c8     F2 FA 61 FC | 	wrlong	result1, objptr
148cc     62 00 00 FF 
148d0     40 E5 85 F1 | 	sub	objptr, ##50496
148d4     F2 FA 01 F6 | 	mov	result1, objptr
148d8     16 FA 25 F4 | 	bith	result1, #22
148dc     62 00 00 FF 
148e0     48 E5 05 F1 | 	add	objptr, ##50504
148e4     F2 FA 61 FC | 	wrlong	result1, objptr
148e8     62 00 00 FF 
148ec     48 E5 85 F1 | 	sub	objptr, ##50504
148f0     F2 FA 01 F6 | 	mov	result1, objptr
148f4     00 28 00 FF 
148f8     00 FA 45 F5 | 	or	result1, ##5242880
148fc     62 00 00 FF 
14900     4C E5 05 F1 | 	add	objptr, ##50508
14904     F2 FA 61 FC | 	wrlong	result1, objptr
14908     62 00 00 FF 
1490c     4C E5 85 F1 | 	sub	objptr, ##50508
14910     F2 FA 01 F6 | 	mov	result1, objptr
14914     35 FA 25 F4 | 	bith	result1, #53
14918     62 00 00 FF 
1491c     50 E5 05 F1 | 	add	objptr, ##50512
14920     F2 FA 61 FC | 	wrlong	result1, objptr
14924     62 00 00 FF 
14928     50 E5 85 F1 | 	sub	objptr, ##50512
1492c     F2 FA 01 F6 | 	mov	result1, objptr
14930     54 FA 25 F4 | 	bith	result1, #84
14934     62 00 00 FF 
14938     54 E5 05 F1 | 	add	objptr, ##50516
1493c     F2 FA 61 FC | 	wrlong	result1, objptr
14940     62 00 00 FF 
14944     54 E5 85 F1 | 	sub	objptr, ##50516
14948     F2 FA 01 F6 | 	mov	result1, objptr
1494c     17 FA 25 F4 | 	bith	result1, #23
14950     62 00 00 FF 
14954     58 E5 05 F1 | 	add	objptr, ##50520
14958     F2 FA 61 FC | 	wrlong	result1, objptr
1495c     62 00 00 FF 
14960     58 E5 85 F1 | 	sub	objptr, ##50520
14964     F2 FA 01 F6 | 	mov	result1, objptr
14968     00 48 00 FF 
1496c     00 FA 45 F5 | 	or	result1, ##9437184
14970     62 00 00 FF 
14974     5C E5 05 F1 | 	add	objptr, ##50524
14978     F2 FA 61 FC | 	wrlong	result1, objptr
1497c     62 00 00 FF 
14980     5C E5 85 F1 | 	sub	objptr, ##50524
14984     F2 FA 01 F6 | 	mov	result1, objptr
14988     00 50 00 FF 
1498c     00 FA 45 F5 | 	or	result1, ##10485760
14990     62 00 00 FF 
14994     60 E5 05 F1 | 	add	objptr, ##50528
14998     F2 FA 61 FC | 	wrlong	result1, objptr
1499c     62 00 00 FF 
149a0     60 E5 85 F1 | 	sub	objptr, ##50528
149a4     F2 FA 01 F6 | 	mov	result1, objptr
149a8     00 58 00 FF 
149ac     00 FA 45 F5 | 	or	result1, ##11534336
149b0     62 00 00 FF 
149b4     64 E5 05 F1 | 	add	objptr, ##50532
149b8     F2 FA 61 FC | 	wrlong	result1, objptr
149bc     62 00 00 FF 
149c0     64 E5 85 F1 | 	sub	objptr, ##50532
149c4     F2 FA 01 F6 | 	mov	result1, objptr
149c8     36 FA 25 F4 | 	bith	result1, #54
149cc     62 00 00 FF 
149d0     78 E5 05 F1 | 	add	objptr, ##50552
149d4     F2 FA 61 FC | 	wrlong	result1, objptr
149d8     62 00 00 FF 
149dc     78 E5 85 F1 | 	sub	objptr, ##50552
149e0     F2 FA 01 F6 | 	mov	result1, objptr
149e4     00 68 00 FF 
149e8     00 FA 45 F5 | 	or	result1, ##13631488
149ec     62 00 00 FF 
149f0     A8 E5 05 F1 | 	add	objptr, ##50600
149f4     F2 FA 61 FC | 	wrlong	result1, objptr
149f8     62 00 00 FF 
149fc     A8 E5 85 F1 | 	sub	objptr, ##50600
14a00     F2 FA 01 F6 | 	mov	result1, objptr
14a04     00 68 00 FF 
14a08     00 FA 45 F5 | 	or	result1, ##13631488
14a0c     62 00 00 FF 
14a10     A4 E5 05 F1 | 	add	objptr, ##50596
14a14     F2 FA 61 FC | 	wrlong	result1, objptr
14a18     62 00 00 FF 
14a1c     A4 E5 85 F1 | 	sub	objptr, ##50596
14a20     F2 FA 01 F6 | 	mov	result1, objptr
14a24     00 68 00 FF 
14a28     00 FA 45 F5 | 	or	result1, ##13631488
14a2c     62 00 00 FF 
14a30     AC E5 05 F1 | 	add	objptr, ##50604
14a34     F2 FA 61 FC | 	wrlong	result1, objptr
14a38     62 00 00 FF 
14a3c     AC E5 85 F1 | 	sub	objptr, ##50604
14a40     F2 FA 01 F6 | 	mov	result1, objptr
14a44     00 68 00 FF 
14a48     00 FA 45 F5 | 	or	result1, ##13631488
14a4c     62 00 00 FF 
14a50     B0 E5 05 F1 | 	add	objptr, ##50608
14a54     F2 FA 61 FC | 	wrlong	result1, objptr
14a58     62 00 00 FF 
14a5c     B0 E5 85 F1 | 	sub	objptr, ##50608
14a60     F2 FA 01 F6 | 	mov	result1, objptr
14a64     00 68 00 FF 
14a68     00 FA 45 F5 | 	or	result1, ##13631488
14a6c     62 00 00 FF 
14a70     E0 E5 05 F1 | 	add	objptr, ##50656
14a74     F2 FA 61 FC | 	wrlong	result1, objptr
14a78     62 00 00 FF 
14a7c     E0 E5 85 F1 | 	sub	objptr, ##50656
14a80     F2 FA 01 F6 | 	mov	result1, objptr
14a84     55 FA 25 F4 | 	bith	result1, #85
14a88     62 00 00 FF 
14a8c     90 E5 05 F1 | 	add	objptr, ##50576
14a90     F2 FA 61 FC | 	wrlong	result1, objptr
14a94     62 00 00 FF 
14a98     90 E5 85 F1 | 	sub	objptr, ##50576
14a9c     F2 FA 01 F6 | 	mov	result1, objptr
14aa0     00 68 00 FF 
14aa4     00 FA 45 F5 | 	or	result1, ##13631488
14aa8     62 00 00 FF 
14aac     B4 E5 05 F1 | 	add	objptr, ##50612
14ab0     F2 FA 61 FC | 	wrlong	result1, objptr
14ab4     62 00 00 FF 
14ab8     B4 E5 85 F1 | 	sub	objptr, ##50612
14abc     F2 FA 01 F6 | 	mov	result1, objptr
14ac0     00 68 00 FF 
14ac4     00 FA 45 F5 | 	or	result1, ##13631488
14ac8     62 00 00 FF 
14acc     B8 E5 05 F1 | 	add	objptr, ##50616
14ad0     F2 FA 61 FC | 	wrlong	result1, objptr
14ad4     62 00 00 FF 
14ad8     B8 E5 85 F1 | 	sub	objptr, ##50616
14adc     F2 FA 01 F6 | 	mov	result1, objptr
14ae0     00 68 00 FF 
14ae4     00 FA 45 F5 | 	or	result1, ##13631488
14ae8     62 00 00 FF 
14aec     BC E5 05 F1 | 	add	objptr, ##50620
14af0     F2 FA 61 FC | 	wrlong	result1, objptr
14af4     62 00 00 FF 
14af8     BC E5 85 F1 | 	sub	objptr, ##50620
14afc     F2 FA 01 F6 | 	mov	result1, objptr
14b00     74 FA 25 F4 | 	bith	result1, #116
14b04     63 00 00 FF 
14b08     34 E4 05 F1 | 	add	objptr, ##50740
14b0c     F2 FA 61 FC | 	wrlong	result1, objptr
14b10     63 00 00 FF 
14b14     34 E4 85 F1 | 	sub	objptr, ##50740
14b18     F2 FA 01 F6 | 	mov	result1, objptr
14b1c     18 FA 25 F4 | 	bith	result1, #24
14b20     63 00 00 FF 
14b24     38 E4 05 F1 | 	add	objptr, ##50744
14b28     F2 FA 61 FC | 	wrlong	result1, objptr
14b2c     63 00 00 FF 
14b30     38 E4 85 F1 | 	sub	objptr, ##50744
14b34     F2 FA 01 F6 | 	mov	result1, objptr
14b38     00 88 00 FF 
14b3c     00 FA 45 F5 | 	or	result1, ##17825792
14b40     63 00 00 FF 
14b44     3C E4 05 F1 | 	add	objptr, ##50748
14b48     F2 FA 61 FC | 	wrlong	result1, objptr
14b4c     63 00 00 FF 
14b50     3C E4 85 F1 | 	sub	objptr, ##50748
14b54     F2 FA 01 F6 | 	mov	result1, objptr
14b58     00 90 00 FF 
14b5c     00 FA 45 F5 | 	or	result1, ##18874368
14b60     63 00 00 FF 
14b64     40 E4 05 F1 | 	add	objptr, ##50752
14b68     F2 FA 61 FC | 	wrlong	result1, objptr
14b6c     63 00 00 FF 
14b70     40 E4 85 F1 | 	sub	objptr, ##50752
14b74     F2 FA 01 F6 | 	mov	result1, objptr
14b78     00 98 00 FF 
14b7c     00 FA 45 F5 | 	or	result1, ##19922944
14b80     63 00 00 FF 
14b84     44 E4 05 F1 | 	add	objptr, ##50756
14b88     F2 FA 61 FC | 	wrlong	result1, objptr
14b8c     63 00 00 FF 
14b90     44 E4 85 F1 | 	sub	objptr, ##50756
14b94     F2 FA 01 F6 | 	mov	result1, objptr
14b98     00 A0 00 FF 
14b9c     00 FA 45 F5 | 	or	result1, ##20971520
14ba0     63 00 00 FF 
14ba4     48 E4 05 F1 | 	add	objptr, ##50760
14ba8     F2 FA 61 FC | 	wrlong	result1, objptr
14bac     63 00 00 FF 
14bb0     48 E4 85 F1 | 	sub	objptr, ##50760
14bb4     F2 FA 01 F6 | 	mov	result1, objptr
14bb8     00 A8 00 FF 
14bbc     00 FA 45 F5 | 	or	result1, ##22020096
14bc0     63 00 00 FF 
14bc4     4C E4 05 F1 | 	add	objptr, ##50764
14bc8     F2 FA 61 FC | 	wrlong	result1, objptr
14bcc     63 00 00 FF 
14bd0     4C E4 85 F1 | 	sub	objptr, ##50764
14bd4     F2 FA 01 F6 | 	mov	result1, objptr
14bd8     00 B0 00 FF 
14bdc     00 FA 45 F5 | 	or	result1, ##23068672
14be0     63 00 00 FF 
14be4     50 E4 05 F1 | 	add	objptr, ##50768
14be8     F2 FA 61 FC | 	wrlong	result1, objptr
14bec     63 00 00 FF 
14bf0     50 E4 85 F1 | 	sub	objptr, ##50768
14bf4     F2 FA 01 F6 | 	mov	result1, objptr
14bf8     00 B8 00 FF 
14bfc     00 FA 45 F5 | 	or	result1, ##24117248
14c00     63 00 00 FF 
14c04     54 E4 05 F1 | 	add	objptr, ##50772
14c08     F2 FA 61 FC | 	wrlong	result1, objptr
14c0c     63 00 00 FF 
14c10     54 E4 85 F1 | 	sub	objptr, ##50772
14c14     F2 FA 01 F6 | 	mov	result1, objptr
14c18     37 FA 25 F4 | 	bith	result1, #55
14c1c     63 00 00 FF 
14c20     58 E4 05 F1 | 	add	objptr, ##50776
14c24     F2 FA 61 FC | 	wrlong	result1, objptr
14c28     63 00 00 FF 
14c2c     58 E4 85 F1 | 	sub	objptr, ##50776
14c30     F2 FA 01 F6 | 	mov	result1, objptr
14c34     00 C8 00 FF 
14c38     00 FA 45 F5 | 	or	result1, ##26214400
14c3c     63 00 00 FF 
14c40     5C E4 05 F1 | 	add	objptr, ##50780
14c44     F2 FA 61 FC | 	wrlong	result1, objptr
14c48     63 00 00 FF 
14c4c     5C E4 85 F1 | 	sub	objptr, ##50780
14c50     F2 FA 01 F6 | 	mov	result1, objptr
14c54     00 D0 00 FF 
14c58     00 FA 45 F5 | 	or	result1, ##27262976
14c5c     63 00 00 FF 
14c60     60 E4 05 F1 | 	add	objptr, ##50784
14c64     F2 FA 61 FC | 	wrlong	result1, objptr
14c68     63 00 00 FF 
14c6c     60 E4 85 F1 | 	sub	objptr, ##50784
14c70     F2 FA 01 F6 | 	mov	result1, objptr
14c74     00 D8 00 FF 
14c78     00 FA 45 F5 | 	or	result1, ##28311552
14c7c     63 00 00 FF 
14c80     64 E4 05 F1 | 	add	objptr, ##50788
14c84     F2 FA 61 FC | 	wrlong	result1, objptr
14c88     63 00 00 FF 
14c8c     64 E4 85 F1 | 	sub	objptr, ##50788
14c90     F2 FA 01 F6 | 	mov	result1, objptr
14c94     56 FA 25 F4 | 	bith	result1, #86
14c98     63 00 00 FF 
14c9c     68 E4 05 F1 | 	add	objptr, ##50792
14ca0     F2 FA 61 FC | 	wrlong	result1, objptr
14ca4     63 00 00 FF 
14ca8     68 E4 85 F1 | 	sub	objptr, ##50792
14cac     F2 FA 01 F6 | 	mov	result1, objptr
14cb0     00 E8 00 FF 
14cb4     00 FA 45 F5 | 	or	result1, ##30408704
14cb8     64 00 00 FF 
14cbc     30 E5 05 F1 | 	add	objptr, ##51504
14cc0     F2 FA 61 FC | 	wrlong	result1, objptr
14cc4     64 00 00 FF 
14cc8     30 E5 85 F1 | 	sub	objptr, ##51504
14ccc     F2 FA 01 F6 | 	mov	result1, objptr
14cd0     75 FA 25 F4 | 	bith	result1, #117
14cd4     63 00 00 FF 
14cd8     6C E4 05 F1 | 	add	objptr, ##50796
14cdc     F2 FA 61 FC | 	wrlong	result1, objptr
14ce0     63 00 00 FF 
14ce4     6C E4 85 F1 | 	sub	objptr, ##50796
14ce8     F2 FA 01 F6 | 	mov	result1, objptr
14cec     94 FA 25 F4 | 	bith	result1, #148
14cf0     63 00 00 FF 
14cf4     80 E4 05 F1 | 	add	objptr, ##50816
14cf8     F2 FA 61 FC | 	wrlong	result1, objptr
14cfc     63 00 00 FF 
14d00     80 E4 85 F1 | 	sub	objptr, ##50816
14d04     F2 FA 01 F6 | 	mov	result1, objptr
14d08     19 FA 25 F4 | 	bith	result1, #25
14d0c     63 00 00 FF 
14d10     70 E4 05 F1 | 	add	objptr, ##50800
14d14     F2 FA 61 FC | 	wrlong	result1, objptr
14d18     63 00 00 FF 
14d1c     70 E4 85 F1 | 	sub	objptr, ##50800
14d20     F2 FA 01 F6 | 	mov	result1, objptr
14d24     00 08 01 FF 
14d28     00 FA 45 F5 | 	or	result1, ##34603008
14d2c     62 00 00 FF 
14d30     8C E5 05 F1 | 	add	objptr, ##50572
14d34     F2 FA 61 FC | 	wrlong	result1, objptr
14d38     62 00 00 FF 
14d3c     8C E5 85 F1 | 	sub	objptr, ##50572
14d40     F2 FA 01 F6 | 	mov	result1, objptr
14d44     00 10 01 FF 
14d48     00 FA 45 F5 | 	or	result1, ##35651584
14d4c     63 00 00 FF 
14d50     74 E4 05 F1 | 	add	objptr, ##50804
14d54     F2 FA 61 FC | 	wrlong	result1, objptr
14d58     63 00 00 FF 
14d5c     74 E4 85 F1 | 	sub	objptr, ##50804
14d60     F2 FA 01 F6 | 	mov	result1, objptr
14d64     00 18 01 FF 
14d68     00 FA 45 F5 | 	or	result1, ##36700160
14d6c     63 00 00 FF 
14d70     78 E4 05 F1 | 	add	objptr, ##50808
14d74     F2 FA 61 FC | 	wrlong	result1, objptr
14d78     63 00 00 FF 
14d7c     78 E4 85 F1 | 	sub	objptr, ##50808
14d80     F2 FA 01 F6 | 	mov	result1, objptr
14d84     00 20 01 FF 
14d88     00 FA 45 F5 | 	or	result1, ##37748736
14d8c     63 00 00 FF 
14d90     7C E4 05 F1 | 	add	objptr, ##50812
14d94     F2 FA 61 FC | 	wrlong	result1, objptr
14d98     63 00 00 FF 
14d9c     7C E4 85 F1 | 	sub	objptr, ##50812
14da0     F2 FA 01 F6 | 	mov	result1, objptr
14da4     00 28 01 FF 
14da8     00 FA 45 F5 | 	or	result1, ##38797312
14dac     63 00 00 FF 
14db0     88 E4 05 F1 | 	add	objptr, ##50824
14db4     F2 FA 61 FC | 	wrlong	result1, objptr
14db8     63 00 00 FF 
14dbc     88 E4 85 F1 | 	sub	objptr, ##50824
14dc0     F2 FA 01 F6 | 	mov	result1, objptr
14dc4     00 30 01 FF 
14dc8     00 FA 45 F5 | 	or	result1, ##39845888
14dcc     63 00 00 FF 
14dd0     8C E4 05 F1 | 	add	objptr, ##50828
14dd4     F2 FA 61 FC | 	wrlong	result1, objptr
14dd8     63 00 00 FF 
14ddc     8C E4 85 F1 | 	sub	objptr, ##50828
14de0     F2 FA 01 F6 | 	mov	result1, objptr
14de4     00 38 01 FF 
14de8     00 FA 45 F5 | 	or	result1, ##40894464
14dec     63 00 00 FF 
14df0     90 E4 05 F1 | 	add	objptr, ##50832
14df4     F2 FA 61 FC | 	wrlong	result1, objptr
14df8     63 00 00 FF 
14dfc     90 E4 85 F1 | 	sub	objptr, ##50832
14e00     F2 FA 01 F6 | 	mov	result1, objptr
14e04     00 40 01 FF 
14e08     00 FA 45 F5 | 	or	result1, ##41943040
14e0c     63 00 00 FF 
14e10     94 E4 05 F1 | 	add	objptr, ##50836
14e14     F2 FA 61 FC | 	wrlong	result1, objptr
14e18     63 00 00 FF 
14e1c     94 E4 85 F1 | 	sub	objptr, ##50836
14e20     F2 FA 01 F6 | 	mov	result1, objptr
14e24     00 48 01 FF 
14e28     00 FA 45 F5 | 	or	result1, ##42991616
14e2c     63 00 00 FF 
14e30     9C E4 05 F1 | 	add	objptr, ##50844
14e34     F2 FA 61 FC | 	wrlong	result1, objptr
14e38     63 00 00 FF 
14e3c     9C E4 85 F1 | 	sub	objptr, ##50844
14e40     F2 FA 01 F6 | 	mov	result1, objptr
14e44     00 50 01 FF 
14e48     00 FA 45 F5 | 	or	result1, ##44040192
14e4c     63 00 00 FF 
14e50     A0 E4 05 F1 | 	add	objptr, ##50848
14e54     F2 FA 61 FC | 	wrlong	result1, objptr
14e58     63 00 00 FF 
14e5c     A0 E4 85 F1 | 	sub	objptr, ##50848
14e60     F2 FA 01 F6 | 	mov	result1, objptr
14e64     00 58 01 FF 
14e68     00 FA 45 F5 | 	or	result1, ##45088768
14e6c     62 00 00 FF 
14e70     A0 E5 05 F1 | 	add	objptr, ##50592
14e74     F2 FA 61 FC | 	wrlong	result1, objptr
14e78     62 00 00 FF 
14e7c     A0 E5 85 F1 | 	sub	objptr, ##50592
14e80     F2 FA 01 F6 | 	mov	result1, objptr
14e84     00 60 01 FF 
14e88     00 FA 45 F5 | 	or	result1, ##46137344
14e8c     62 00 00 FF 
14e90     D0 E5 05 F1 | 	add	objptr, ##50640
14e94     F2 FA 61 FC | 	wrlong	result1, objptr
14e98     62 00 00 FF 
14e9c     D0 E5 85 F1 | 	sub	objptr, ##50640
14ea0     F2 FA 01 F6 | 	mov	result1, objptr
14ea4     00 68 01 FF 
14ea8     00 FA 45 F5 | 	or	result1, ##47185920
14eac     62 00 00 FF 
14eb0     CC E5 05 F1 | 	add	objptr, ##50636
14eb4     F2 FA 61 FC | 	wrlong	result1, objptr
14eb8     62 00 00 FF 
14ebc     CC E5 85 F1 | 	sub	objptr, ##50636
14ec0     F2 FA 01 F6 | 	mov	result1, objptr
14ec4     00 70 01 FF 
14ec8     00 FA 45 F5 | 	or	result1, ##48234496
14ecc     62 00 00 FF 
14ed0     70 E5 05 F1 | 	add	objptr, ##50544
14ed4     F2 FA 61 FC | 	wrlong	result1, objptr
14ed8     62 00 00 FF 
14edc     70 E5 85 F1 | 	sub	objptr, ##50544
14ee0     F2 FA 01 F6 | 	mov	result1, objptr
14ee4     00 78 01 FF 
14ee8     00 FA 45 F5 | 	or	result1, ##49283072
14eec     62 00 00 FF 
14ef0     74 E5 05 F1 | 	add	objptr, ##50548
14ef4     F2 FA 61 FC | 	wrlong	result1, objptr
14ef8     62 00 00 FF 
14efc     74 E5 85 F1 | 	sub	objptr, ##50548
14f00     F2 FA 01 F6 | 	mov	result1, objptr
14f04     38 FA 25 F4 | 	bith	result1, #56
14f08     62 00 00 FF 
14f0c     DC E5 05 F1 | 	add	objptr, ##50652
14f10     F2 FA 61 FC | 	wrlong	result1, objptr
14f14     62 00 00 FF 
14f18     DC E5 85 F1 | 	sub	objptr, ##50652
14f1c     F2 FA 01 F6 | 	mov	result1, objptr
14f20     00 88 01 FF 
14f24     00 FA 45 F5 | 	or	result1, ##51380224
14f28     63 00 00 FF 
14f2c     84 E4 05 F1 | 	add	objptr, ##50820
14f30     F2 FA 61 FC | 	wrlong	result1, objptr
14f34     63 00 00 FF 
14f38     84 E4 85 F1 | 	sub	objptr, ##50820
14f3c     F2 FA 01 F6 | 	mov	result1, objptr
14f40     00 90 01 FF 
14f44     00 FA 45 F5 | 	or	result1, ##52428800
14f48     63 00 00 FF 
14f4c     98 E4 05 F1 | 	add	objptr, ##50840
14f50     F2 FA 61 FC | 	wrlong	result1, objptr
14f54     63 00 00 FF 
14f58     98 E4 85 F1 | 	sub	objptr, ##50840
14f5c     F2 FA 01 F6 | 	mov	result1, objptr
14f60     00 98 01 FF 
14f64     00 FA 45 F5 | 	or	result1, ##53477376
14f68     63 00 00 FF 
14f6c     A4 E4 05 F1 | 	add	objptr, ##50852
14f70     F2 FA 61 FC | 	wrlong	result1, objptr
14f74     63 00 00 FF 
14f78     A4 E4 85 F1 | 	sub	objptr, ##50852
14f7c     F2 FA 01 F6 | 	mov	result1, objptr
14f80     00 A0 01 FF 
14f84     00 FA 45 F5 | 	or	result1, ##54525952
14f88     63 00 00 FF 
14f8c     A8 E4 05 F1 | 	add	objptr, ##50856
14f90     F2 FA 61 FC | 	wrlong	result1, objptr
14f94     63 00 00 FF 
14f98     A8 E4 85 F1 | 	sub	objptr, ##50856
14f9c     F2 FA 01 F6 | 	mov	result1, objptr
14fa0     00 A8 01 FF 
14fa4     00 FA 45 F5 | 	or	result1, ##55574528
14fa8     63 00 00 FF 
14fac     AC E4 05 F1 | 	add	objptr, ##50860
14fb0     F2 FA 61 FC | 	wrlong	result1, objptr
14fb4     63 00 00 FF 
14fb8     AC E4 85 F1 | 	sub	objptr, ##50860
14fbc     F2 FA 01 F6 | 	mov	result1, objptr
14fc0     00 B0 01 FF 
14fc4     00 FA 45 F5 | 	or	result1, ##56623104
14fc8     63 00 00 FF 
14fcc     B0 E4 05 F1 | 	add	objptr, ##50864
14fd0     F2 FA 61 FC | 	wrlong	result1, objptr
14fd4     63 00 00 FF 
14fd8     B0 E4 85 F1 | 	sub	objptr, ##50864
14fdc     F2 FA 01 F6 | 	mov	result1, objptr
14fe0     00 B8 01 FF 
14fe4     00 FA 45 F5 | 	or	result1, ##57671680
14fe8     63 00 00 FF 
14fec     B4 E4 05 F1 | 	add	objptr, ##50868
14ff0     F2 FA 61 FC | 	wrlong	result1, objptr
14ff4     63 00 00 FF 
14ff8     B4 E4 85 F1 | 	sub	objptr, ##50868
14ffc     F2 FA 01 F6 | 	mov	result1, objptr
15000     57 FA 25 F4 | 	bith	result1, #87
15004     63 00 00 FF 
15008     B8 E4 05 F1 | 	add	objptr, ##50872
1500c     F2 FA 61 FC | 	wrlong	result1, objptr
15010     63 00 00 FF 
15014     B8 E4 85 F1 | 	sub	objptr, ##50872
15018     F2 FA 01 F6 | 	mov	result1, objptr
1501c     94 FA 25 F4 | 	bith	result1, #148
15020     63 00 00 FF 
15024     80 E4 05 F1 | 	add	objptr, ##50816
15028     F2 FA 61 FC | 	wrlong	result1, objptr
1502c     63 00 00 FF 
15030     80 E4 85 F1 | 	sub	objptr, ##50816
15034     F2 FA 01 F6 | 	mov	result1, objptr
15038     00 C8 01 FF 
1503c     00 FA 45 F5 | 	or	result1, ##59768832
15040     63 00 00 FF 
15044     C0 E4 05 F1 | 	add	objptr, ##50880
15048     F2 FA 61 FC | 	wrlong	result1, objptr
1504c     63 00 00 FF 
15050     C0 E4 85 F1 | 	sub	objptr, ##50880
15054     F2 FA 01 F6 | 	mov	result1, objptr
15058     00 D0 01 FF 
1505c     00 FA 45 F5 | 	or	result1, ##60817408
15060     63 00 00 FF 
15064     BC E4 05 F1 | 	add	objptr, ##50876
15068     F2 FA 61 FC | 	wrlong	result1, objptr
1506c     63 00 00 FF 
15070     BC E4 85 F1 | 	sub	objptr, ##50876
15074     F2 FA 01 F6 | 	mov	result1, objptr
15078     00 D8 01 FF 
1507c     00 FA 45 F5 | 	or	result1, ##61865984
15080     63 00 00 FF 
15084     D4 E4 05 F1 | 	add	objptr, ##50900
15088     F2 FA 61 FC | 	wrlong	result1, objptr
1508c     63 00 00 FF 
15090     D4 E4 85 F1 | 	sub	objptr, ##50900
15094     F2 FA 01 F6 | 	mov	result1, objptr
15098     76 FA 25 F4 | 	bith	result1, #118
1509c     63 00 00 FF 
150a0     D8 E4 05 F1 | 	add	objptr, ##50904
150a4     F2 FA 61 FC | 	wrlong	result1, objptr
150a8     63 00 00 FF 
150ac     D8 E4 85 F1 | 	sub	objptr, ##50904
150b0     F2 FA 01 F6 | 	mov	result1, objptr
150b4     00 E8 01 FF 
150b8     00 FA 45 F5 | 	or	result1, ##63963136
150bc     63 00 00 FF 
150c0     C4 E4 05 F1 | 	add	objptr, ##50884
150c4     F2 FA 61 FC | 	wrlong	result1, objptr
150c8     63 00 00 FF 
150cc     C4 E4 85 F1 | 	sub	objptr, ##50884
150d0     F2 FA 01 F6 | 	mov	result1, objptr
150d4     95 FA 25 F4 | 	bith	result1, #149
150d8     63 00 00 FF 
150dc     C8 E4 05 F1 | 	add	objptr, ##50888
150e0     F2 FA 61 FC | 	wrlong	result1, objptr
150e4     63 00 00 FF 
150e8     C8 E4 85 F1 | 	sub	objptr, ##50888
150ec     F2 FA 01 F6 | 	mov	result1, objptr
150f0     B4 FA 25 F4 | 	bith	result1, #180
150f4     63 00 00 FF 
150f8     CC E4 05 F1 | 	add	objptr, ##50892
150fc     F2 FA 61 FC | 	wrlong	result1, objptr
15100     63 00 00 FF 
15104     CC E4 85 F1 | 	sub	objptr, ##50892
15108     F2 FA 01 F6 | 	mov	result1, objptr
1510c     1A FA 25 F4 | 	bith	result1, #26
15110     63 00 00 FF 
15114     D0 E4 05 F1 | 	add	objptr, ##50896
15118     F2 FA 61 FC | 	wrlong	result1, objptr
1511c     63 00 00 FF 
15120     D0 E4 85 F1 | 	sub	objptr, ##50896
15124     F2 FA 01 F6 | 	mov	result1, objptr
15128     00 08 02 FF 
1512c     00 FA 45 F5 | 	or	result1, ##68157440
15130     63 00 00 FF 
15134     E0 E4 05 F1 | 	add	objptr, ##50912
15138     F2 FA 61 FC | 	wrlong	result1, objptr
1513c     63 00 00 FF 
15140     E0 E4 85 F1 | 	sub	objptr, ##50912
15144     F2 FA 01 F6 | 	mov	result1, objptr
15148     00 10 02 FF 
1514c     00 FA 45 F5 | 	or	result1, ##69206016
15150     63 00 00 FF 
15154     DC E4 05 F1 | 	add	objptr, ##50908
15158     F2 FA 61 FC | 	wrlong	result1, objptr
1515c     63 00 00 FF 
15160     DC E4 85 F1 | 	sub	objptr, ##50908
15164     F2 FA 01 F6 | 	mov	result1, objptr
15168     00 18 02 FF 
1516c     00 FA 45 F5 | 	or	result1, ##70254592
15170     63 00 00 FF 
15174     EC E4 05 F1 | 	add	objptr, ##50924
15178     F2 FA 61 FC | 	wrlong	result1, objptr
1517c     63 00 00 FF 
15180     EC E4 85 F1 | 	sub	objptr, ##50924
15184     F2 FA 01 F6 | 	mov	result1, objptr
15188     00 20 02 FF 
1518c     00 FA 45 F5 | 	or	result1, ##71303168
15190     63 00 00 FF 
15194     E8 E4 05 F1 | 	add	objptr, ##50920
15198     F2 FA 61 FC | 	wrlong	result1, objptr
1519c     63 00 00 FF 
151a0     E8 E4 85 F1 | 	sub	objptr, ##50920
151a4     F2 FA 01 F6 | 	mov	result1, objptr
151a8     00 28 02 FF 
151ac     00 FA 45 F5 | 	or	result1, ##72351744
151b0     63 00 00 FF 
151b4     E4 E4 05 F1 | 	add	objptr, ##50916
151b8     F2 FA 61 FC | 	wrlong	result1, objptr
151bc     63 00 00 FF 
151c0     E4 E4 85 F1 | 	sub	objptr, ##50916
151c4     F2 FA 01 F6 | 	mov	result1, objptr
151c8     00 30 02 FF 
151cc     00 FA 45 F5 | 	or	result1, ##73400320
151d0     63 00 00 FF 
151d4     F0 E4 05 F1 | 	add	objptr, ##50928
151d8     F2 FA 61 FC | 	wrlong	result1, objptr
151dc     63 00 00 FF 
151e0     F0 E4 85 F1 | 	sub	objptr, ##50928
151e4     F2 FA 01 F6 | 	mov	result1, objptr
151e8     00 38 02 FF 
151ec     00 FA 45 F5 | 	or	result1, ##74448896
151f0     63 00 00 FF 
151f4     F4 E4 05 F1 | 	add	objptr, ##50932
151f8     F2 FA 61 FC | 	wrlong	result1, objptr
151fc     63 00 00 FF 
15200     F4 E4 85 F1 | 	sub	objptr, ##50932
15204     F2 FA 01 F6 | 	mov	result1, objptr
15208     00 40 02 FF 
1520c     00 FA 45 F5 | 	or	result1, ##75497472
15210     62 00 00 FF 
15214     88 E5 05 F1 | 	add	objptr, ##50568
15218     F2 FA 61 FC | 	wrlong	result1, objptr
1521c     62 00 00 FF 
15220     88 E5 85 F1 | 	sub	objptr, ##50568
15224     F2 FA 01 F6 | 	mov	result1, objptr
15228     00 48 02 FF 
1522c     00 FA 45 F5 | 	or	result1, ##76546048
15230     63 00 00 FF 
15234     0C E5 05 F1 | 	add	objptr, ##50956
15238     F2 FA 61 FC | 	wrlong	result1, objptr
1523c     63 00 00 FF 
15240     0C E5 85 F1 | 	sub	objptr, ##50956
15244     F2 FA 01 F6 | 	mov	result1, objptr
15248     00 50 02 FF 
1524c     00 FA 45 F5 | 	or	result1, ##77594624
15250     63 00 00 FF 
15254     1C E5 05 F1 | 	add	objptr, ##50972
15258     F2 FA 61 FC | 	wrlong	result1, objptr
1525c     63 00 00 FF 
15260     1C E5 85 F1 | 	sub	objptr, ##50972
15264     F2 FA 01 F6 | 	mov	result1, objptr
15268     00 58 02 FF 
1526c     00 FA 45 F5 | 	or	result1, ##78643200
15270     63 00 00 FF 
15274     20 E5 05 F1 | 	add	objptr, ##50976
15278     F2 FA 61 FC | 	wrlong	result1, objptr
1527c     63 00 00 FF 
15280     20 E5 85 F1 | 	sub	objptr, ##50976
15284     F2 FA 01 F6 | 	mov	result1, objptr
15288     00 60 02 FF 
1528c     00 FA 45 F5 | 	or	result1, ##79691776
15290     63 00 00 FF 
15294     18 E5 05 F1 | 	add	objptr, ##50968
15298     F2 FA 61 FC | 	wrlong	result1, objptr
1529c     63 00 00 FF 
152a0     18 E5 85 F1 | 	sub	objptr, ##50968
152a4     F2 FA 01 F6 | 	mov	result1, objptr
152a8     00 68 02 FF 
152ac     00 FA 45 F5 | 	or	result1, ##80740352
152b0     63 00 00 FF 
152b4     10 E5 05 F1 | 	add	objptr, ##50960
152b8     F2 FA 61 FC | 	wrlong	result1, objptr
152bc     63 00 00 FF 
152c0     10 E5 85 F1 | 	sub	objptr, ##50960
152c4     F2 FA 01 F6 | 	mov	result1, objptr
152c8     00 70 02 FF 
152cc     00 FA 45 F5 | 	or	result1, ##81788928
152d0     63 00 00 FF 
152d4     14 E5 05 F1 | 	add	objptr, ##50964
152d8     F2 FA 61 FC | 	wrlong	result1, objptr
152dc     63 00 00 FF 
152e0     14 E5 85 F1 | 	sub	objptr, ##50964
152e4     F2 FA 01 F6 | 	mov	result1, objptr
152e8     00 78 02 FF 
152ec     00 FA 45 F5 | 	or	result1, ##82837504
152f0     63 00 00 FF 
152f4     24 E5 05 F1 | 	add	objptr, ##50980
152f8     F2 FA 61 FC | 	wrlong	result1, objptr
152fc     63 00 00 FF 
15300     24 E5 85 F1 | 	sub	objptr, ##50980
15304     F2 FA 01 F6 | 	mov	result1, objptr
15308     00 80 02 FF 
1530c     00 FA 45 F5 | 	or	result1, ##83886080
15310     63 00 00 FF 
15314     28 E5 05 F1 | 	add	objptr, ##50984
15318     F2 FA 61 FC | 	wrlong	result1, objptr
1531c     63 00 00 FF 
15320     28 E5 85 F1 | 	sub	objptr, ##50984
15324     F2 FA 01 F6 | 	mov	result1, objptr
15328     00 88 02 FF 
1532c     00 FA 45 F5 | 	or	result1, ##84934656
15330     63 00 00 FF 
15334     2C E5 05 F1 | 	add	objptr, ##50988
15338     F2 FA 61 FC | 	wrlong	result1, objptr
1533c     63 00 00 FF 
15340     2C E5 85 F1 | 	sub	objptr, ##50988
15344     F2 FA 01 F6 | 	mov	result1, objptr
15348     00 90 02 FF 
1534c     00 FA 45 F5 | 	or	result1, ##85983232
15350     63 00 00 FF 
15354     30 E5 05 F1 | 	add	objptr, ##50992
15358     F2 FA 61 FC | 	wrlong	result1, objptr
1535c     63 00 00 FF 
15360     30 E5 85 F1 | 	sub	objptr, ##50992
15364     F2 FA 01 F6 | 	mov	result1, objptr
15368     00 98 02 FF 
1536c     00 FA 45 F5 | 	or	result1, ##87031808
15370     63 00 00 FF 
15374     34 E5 05 F1 | 	add	objptr, ##50996
15378     F2 FA 61 FC | 	wrlong	result1, objptr
1537c     63 00 00 FF 
15380     34 E5 85 F1 | 	sub	objptr, ##50996
15384     F2 FA 01 F6 | 	mov	result1, objptr
15388     00 A0 02 FF 
1538c     00 FA 45 F5 | 	or	result1, ##88080384
15390     63 00 00 FF 
15394     38 E5 05 F1 | 	add	objptr, ##51000
15398     F2 FA 61 FC | 	wrlong	result1, objptr
1539c     63 00 00 FF 
153a0     38 E5 85 F1 | 	sub	objptr, ##51000
153a4     F2 FA 01 F6 | 	mov	result1, objptr
153a8     00 A8 02 FF 
153ac     00 FA 45 F5 | 	or	result1, ##89128960
153b0     63 00 00 FF 
153b4     3C E5 05 F1 | 	add	objptr, ##51004
153b8     F2 FA 61 FC | 	wrlong	result1, objptr
153bc     63 00 00 FF 
153c0     3C E5 85 F1 | 	sub	objptr, ##51004
153c4     F2 FA 01 F6 | 	mov	result1, objptr
153c8     00 B0 02 FF 
153cc     00 FA 45 F5 | 	or	result1, ##90177536
153d0     63 00 00 FF 
153d4     40 E5 05 F1 | 	add	objptr, ##51008
153d8     F2 FA 61 FC | 	wrlong	result1, objptr
153dc     63 00 00 FF 
153e0     40 E5 85 F1 | 	sub	objptr, ##51008
153e4     F2 FA 01 F6 | 	mov	result1, objptr
153e8     00 B8 02 FF 
153ec     00 FA 45 F5 | 	or	result1, ##91226112
153f0     63 00 00 FF 
153f4     4C E5 05 F1 | 	add	objptr, ##51020
153f8     F2 FA 61 FC | 	wrlong	result1, objptr
153fc     63 00 00 FF 
15400     4C E5 85 F1 | 	sub	objptr, ##51020
15404     F2 FA 01 F6 | 	mov	result1, objptr
15408     00 C0 02 FF 
1540c     00 FA 45 F5 | 	or	result1, ##92274688
15410     63 00 00 FF 
15414     44 E5 05 F1 | 	add	objptr, ##51012
15418     F2 FA 61 FC | 	wrlong	result1, objptr
1541c     63 00 00 FF 
15420     44 E5 85 F1 | 	sub	objptr, ##51012
15424     F2 FA 01 F6 | 	mov	result1, objptr
15428     00 C8 02 FF 
1542c     00 FA 45 F5 | 	or	result1, ##93323264
15430     63 00 00 FF 
15434     48 E5 05 F1 | 	add	objptr, ##51016
15438     F2 FA 61 FC | 	wrlong	result1, objptr
1543c     63 00 00 FF 
15440     48 E5 85 F1 | 	sub	objptr, ##51016
15444     F2 FA 01 F6 | 	mov	result1, objptr
15448     00 D0 02 FF 
1544c     00 FA 45 F5 | 	or	result1, ##94371840
15450     63 00 00 FF 
15454     50 E5 05 F1 | 	add	objptr, ##51024
15458     F2 FA 61 FC | 	wrlong	result1, objptr
1545c     63 00 00 FF 
15460     50 E5 85 F1 | 	sub	objptr, ##51024
15464     F2 FA 01 F6 | 	mov	result1, objptr
15468     00 D8 02 FF 
1546c     00 FA 45 F5 | 	or	result1, ##95420416
15470     63 00 00 FF 
15474     F8 E4 05 F1 | 	add	objptr, ##50936
15478     F2 FA 61 FC | 	wrlong	result1, objptr
1547c     63 00 00 FF 
15480     F8 E4 85 F1 | 	sub	objptr, ##50936
15484     F2 FA 01 F6 | 	mov	result1, objptr
15488     00 E0 02 FF 
1548c     00 FA 45 F5 | 	or	result1, ##96468992
15490     63 00 00 FF 
15494     00 E5 05 F1 | 	add	objptr, ##50944
15498     F2 FA 61 FC | 	wrlong	result1, objptr
1549c     63 00 00 FF 
154a0     00 E5 85 F1 | 	sub	objptr, ##50944
154a4     F2 FA 01 F6 | 	mov	result1, objptr
154a8     00 E8 02 FF 
154ac     00 FA 45 F5 | 	or	result1, ##97517568
154b0     63 00 00 FF 
154b4     04 E5 05 F1 | 	add	objptr, ##50948
154b8     F2 FA 61 FC | 	wrlong	result1, objptr
154bc     63 00 00 FF 
154c0     04 E5 85 F1 | 	sub	objptr, ##50948
154c4     F2 FA 01 F6 | 	mov	result1, objptr
154c8     00 F0 02 FF 
154cc     00 FA 45 F5 | 	or	result1, ##98566144
154d0     63 00 00 FF 
154d4     54 E5 05 F1 | 	add	objptr, ##51028
154d8     F2 FA 61 FC | 	wrlong	result1, objptr
154dc     63 00 00 FF 
154e0     54 E5 85 F1 | 	sub	objptr, ##51028
154e4     F2 FA 01 F6 | 	mov	result1, objptr
154e8     00 F8 02 FF 
154ec     00 FA 45 F5 | 	or	result1, ##99614720
154f0     63 00 00 FF 
154f4     58 E5 05 F1 | 	add	objptr, ##51032
154f8     F2 FA 61 FC | 	wrlong	result1, objptr
154fc     63 00 00 FF 
15500     58 E5 85 F1 | 	sub	objptr, ##51032
15504     F2 FA 01 F6 | 	mov	result1, objptr
15508     39 FA 25 F4 | 	bith	result1, #57
1550c     63 00 00 FF 
15510     5C E5 05 F1 | 	add	objptr, ##51036
15514     F2 FA 61 FC | 	wrlong	result1, objptr
15518     63 00 00 FF 
1551c     5C E5 85 F1 | 	sub	objptr, ##51036
15520                 | _init_commands_ret
15520     2D 00 64 FD | 	ret
15524                 | 
15524                 | ' 
15524                 | ' ''--------------------------------Error strings -------------------------------------
15524                 | ' 
15524                 | ' sub init_error_strings
15524                 | _init_error_strings
15524     44 01 00 FF 
15528     E6 00 06 F6 | 	mov	_var01, ##@LR__4611
1552c     64 00 00 FF 
15530     50 E5 05 F1 | 	add	objptr, ##51536
15534     F2 00 62 FC | 	wrlong	_var01, objptr
15538     44 01 00 FF 
1553c     E7 00 06 F6 | 	mov	_var01, ##@LR__4612
15540     04 E4 05 F1 | 	add	objptr, #4
15544     F2 00 62 FC | 	wrlong	_var01, objptr
15548     44 01 00 FF 
1554c     0C 01 06 F6 | 	mov	_var01, ##@LR__4613
15550     04 E4 05 F1 | 	add	objptr, #4
15554     F2 00 62 FC | 	wrlong	_var01, objptr
15558     44 01 00 FF 
1555c     2D 01 06 F6 | 	mov	_var01, ##@LR__4614
15560     04 E4 05 F1 | 	add	objptr, #4
15564     F2 00 62 FC | 	wrlong	_var01, objptr
15568     44 01 00 FF 
1556c     47 01 06 F6 | 	mov	_var01, ##@LR__4615
15570     04 E4 05 F1 | 	add	objptr, #4
15574     F2 00 62 FC | 	wrlong	_var01, objptr
15578     44 01 00 FF 
1557c     63 01 06 F6 | 	mov	_var01, ##@LR__4616
15580     04 E4 05 F1 | 	add	objptr, #4
15584     F2 00 62 FC | 	wrlong	_var01, objptr
15588     44 01 00 FF 
1558c     85 01 06 F6 | 	mov	_var01, ##@LR__4617
15590     04 E4 05 F1 | 	add	objptr, #4
15594     F2 00 62 FC | 	wrlong	_var01, objptr
15598     44 01 00 FF 
1559c     B3 01 06 F6 | 	mov	_var01, ##@LR__4618
155a0     04 E4 05 F1 | 	add	objptr, #4
155a4     F2 00 62 FC | 	wrlong	_var01, objptr
155a8     44 01 00 FF 
155ac     DE 01 06 F6 | 	mov	_var01, ##@LR__4619
155b0     04 E4 05 F1 | 	add	objptr, #4
155b4     F2 00 62 FC | 	wrlong	_var01, objptr
155b8     44 01 00 FF 
155bc     F7 01 06 F6 | 	mov	_var01, ##@LR__4620
155c0     04 E4 05 F1 | 	add	objptr, #4
155c4     F2 00 62 FC | 	wrlong	_var01, objptr
155c8     45 01 00 FF 
155cc     18 00 06 F6 | 	mov	_var01, ##@LR__4621
155d0     04 E4 05 F1 | 	add	objptr, #4
155d4     F2 00 62 FC | 	wrlong	_var01, objptr
155d8     45 01 00 FF 
155dc     2F 00 06 F6 | 	mov	_var01, ##@LR__4622
155e0     04 E4 05 F1 | 	add	objptr, #4
155e4     F2 00 62 FC | 	wrlong	_var01, objptr
155e8     45 01 00 FF 
155ec     4D 00 06 F6 | 	mov	_var01, ##@LR__4623
155f0     04 E4 05 F1 | 	add	objptr, #4
155f4     F2 00 62 FC | 	wrlong	_var01, objptr
155f8     45 01 00 FF 
155fc     71 00 06 F6 | 	mov	_var01, ##@LR__4624
15600     04 E4 05 F1 | 	add	objptr, #4
15604     F2 00 62 FC | 	wrlong	_var01, objptr
15608     45 01 00 FF 
1560c     98 00 06 F6 | 	mov	_var01, ##@LR__4625
15610     04 E4 05 F1 | 	add	objptr, #4
15614     F2 00 62 FC | 	wrlong	_var01, objptr
15618     45 01 00 FF 
1561c     B4 00 06 F6 | 	mov	_var01, ##@LR__4626
15620     04 E4 05 F1 | 	add	objptr, #4
15624     F2 00 62 FC | 	wrlong	_var01, objptr
15628     45 01 00 FF 
1562c     C5 00 06 F6 | 	mov	_var01, ##@LR__4627
15630     04 E4 05 F1 | 	add	objptr, #4
15634     F2 00 62 FC | 	wrlong	_var01, objptr
15638     45 01 00 FF 
1563c     D5 00 06 F6 | 	mov	_var01, ##@LR__4628
15640     04 E4 05 F1 | 	add	objptr, #4
15644     F2 00 62 FC | 	wrlong	_var01, objptr
15648     45 01 00 FF 
1564c     F0 00 06 F6 | 	mov	_var01, ##@LR__4629
15650     04 E4 05 F1 | 	add	objptr, #4
15654     F2 00 62 FC | 	wrlong	_var01, objptr
15658     45 01 00 FF 
1565c     02 01 06 F6 | 	mov	_var01, ##@LR__4630
15660     04 E4 05 F1 | 	add	objptr, #4
15664     F2 00 62 FC | 	wrlong	_var01, objptr
15668     45 01 00 FF 
1566c     1A 01 06 F6 | 	mov	_var01, ##@LR__4631
15670     04 E4 05 F1 | 	add	objptr, #4
15674     F2 00 62 FC | 	wrlong	_var01, objptr
15678     45 01 00 FF 
1567c     2E 01 06 F6 | 	mov	_var01, ##@LR__4632
15680     04 E4 05 F1 | 	add	objptr, #4
15684     F2 00 62 FC | 	wrlong	_var01, objptr
15688     45 01 00 FF 
1568c     3E 01 06 F6 | 	mov	_var01, ##@LR__4633
15690     04 E4 05 F1 | 	add	objptr, #4
15694     F2 00 62 FC | 	wrlong	_var01, objptr
15698     45 01 00 FF 
1569c     5B 01 06 F6 | 	mov	_var01, ##@LR__4634
156a0     04 E4 05 F1 | 	add	objptr, #4
156a4     F2 00 62 FC | 	wrlong	_var01, objptr
156a8     45 01 00 FF 
156ac     6C 01 06 F6 | 	mov	_var01, ##@LR__4635
156b0     04 E4 05 F1 | 	add	objptr, #4
156b4     F2 00 62 FC | 	wrlong	_var01, objptr
156b8     45 01 00 FF 
156bc     7D 01 06 F6 | 	mov	_var01, ##@LR__4636
156c0     04 E4 05 F1 | 	add	objptr, #4
156c4     F2 00 62 FC | 	wrlong	_var01, objptr
156c8     45 01 00 FF 
156cc     A8 01 06 F6 | 	mov	_var01, ##@LR__4637
156d0     04 E4 05 F1 | 	add	objptr, #4
156d4     F2 00 62 FC | 	wrlong	_var01, objptr
156d8     45 01 00 FF 
156dc     C4 01 06 F6 | 	mov	_var01, ##@LR__4638
156e0     04 E4 05 F1 | 	add	objptr, #4
156e4     F2 00 62 FC | 	wrlong	_var01, objptr
156e8     45 01 00 FF 
156ec     DA 01 06 F6 | 	mov	_var01, ##@LR__4639
156f0     04 E4 05 F1 | 	add	objptr, #4
156f4     F2 00 62 FC | 	wrlong	_var01, objptr
156f8     45 01 00 FF 
156fc     E7 01 06 F6 | 	mov	_var01, ##@LR__4640
15700     04 E4 05 F1 | 	add	objptr, #4
15704     F2 00 62 FC | 	wrlong	_var01, objptr
15708     45 01 00 FF 
1570c     F9 01 06 F6 | 	mov	_var01, ##@LR__4641
15710     04 E4 05 F1 | 	add	objptr, #4
15714     F2 00 62 FC | 	wrlong	_var01, objptr
15718     46 01 00 FF 
1571c     0A 00 06 F6 | 	mov	_var01, ##@LR__4642
15720     04 E4 05 F1 | 	add	objptr, #4
15724     F2 00 62 FC | 	wrlong	_var01, objptr
15728     46 01 00 FF 
1572c     26 00 06 F6 | 	mov	_var01, ##@LR__4643
15730     04 E4 05 F1 | 	add	objptr, #4
15734     F2 00 62 FC | 	wrlong	_var01, objptr
15738     46 01 00 FF 
1573c     37 00 06 F6 | 	mov	_var01, ##@LR__4644
15740     04 E4 05 F1 | 	add	objptr, #4
15744     F2 00 62 FC | 	wrlong	_var01, objptr
15748     46 01 00 FF 
1574c     46 00 06 F6 | 	mov	_var01, ##@LR__4645
15750     04 E4 05 F1 | 	add	objptr, #4
15754     F2 00 62 FC | 	wrlong	_var01, objptr
15758     46 01 00 FF 
1575c     61 00 06 F6 | 	mov	_var01, ##@LR__4646
15760     04 E4 05 F1 | 	add	objptr, #4
15764     F2 00 62 FC | 	wrlong	_var01, objptr
15768     46 01 00 FF 
1576c     95 00 06 F6 | 	mov	_var01, ##@LR__4647
15770     04 E4 05 F1 | 	add	objptr, #4
15774     F2 00 62 FC | 	wrlong	_var01, objptr
15778     46 01 00 FF 
1577c     AE 00 06 F6 | 	mov	_var01, ##@LR__4648
15780     04 E4 05 F1 | 	add	objptr, #4
15784     F2 00 62 FC | 	wrlong	_var01, objptr
15788     46 01 00 FF 
1578c     CA 00 06 F6 | 	mov	_var01, ##@LR__4649
15790     04 E4 05 F1 | 	add	objptr, #4
15794     F2 00 62 FC | 	wrlong	_var01, objptr
15798     46 01 00 FF 
1579c     E8 00 06 F6 | 	mov	_var01, ##@LR__4650
157a0     04 E4 05 F1 | 	add	objptr, #4
157a4     F2 00 62 FC | 	wrlong	_var01, objptr
157a8     46 01 00 FF 
157ac     01 01 06 F6 | 	mov	_var01, ##@LR__4651
157b0     04 E4 05 F1 | 	add	objptr, #4
157b4     F2 00 62 FC | 	wrlong	_var01, objptr
157b8     46 01 00 FF 
157bc     20 01 06 F6 | 	mov	_var01, ##@LR__4652
157c0     04 E4 05 F1 | 	add	objptr, #4
157c4     F2 00 62 FC | 	wrlong	_var01, objptr
157c8     46 01 00 FF 
157cc     2F 01 06 F6 | 	mov	_var01, ##@LR__4653
157d0     04 E4 05 F1 | 	add	objptr, #4
157d4     F2 00 62 FC | 	wrlong	_var01, objptr
157d8     46 01 00 FF 
157dc     5D 01 06 F6 | 	mov	_var01, ##@LR__4654
157e0     04 E4 05 F1 | 	add	objptr, #4
157e4     F2 00 62 FC | 	wrlong	_var01, objptr
157e8     46 01 00 FF 
157ec     6B 01 06 F6 | 	mov	_var01, ##@LR__4655
157f0     04 E4 05 F1 | 	add	objptr, #4
157f4     F2 00 62 FC | 	wrlong	_var01, objptr
157f8     46 01 00 FF 
157fc     80 01 06 F6 | 	mov	_var01, ##@LR__4656
15800     04 E4 05 F1 | 	add	objptr, #4
15804     F2 00 62 FC | 	wrlong	_var01, objptr
15808     46 01 00 FF 
1580c     A4 01 06 F6 | 	mov	_var01, ##@LR__4657
15810     04 E4 05 F1 | 	add	objptr, #4
15814     F2 00 62 FC | 	wrlong	_var01, objptr
15818     46 01 00 FF 
1581c     BB 01 06 F6 | 	mov	_var01, ##@LR__4658
15820     04 E4 05 F1 | 	add	objptr, #4
15824     F2 00 62 FC | 	wrlong	_var01, objptr
15828     46 01 00 FF 
1582c     CE 01 06 F6 | 	mov	_var01, ##@LR__4659
15830     04 E4 05 F1 | 	add	objptr, #4
15834     F2 00 62 FC | 	wrlong	_var01, objptr
15838     46 01 00 FF 
1583c     E5 01 06 F6 | 	mov	_var01, ##@LR__4660
15840     04 E4 05 F1 | 	add	objptr, #4
15844     F2 00 62 FC | 	wrlong	_var01, objptr
15848     65 00 00 FF 
1584c     14 E4 85 F1 | 	sub	objptr, ##51732
15850                 | _init_error_strings_ret
15850     2D 00 64 FD | 	ret
15854                 | 
15854                 | '         
15854                 | ' sub printerror(err as integer)
15854                 | _printerror
15854     01 4A 05 F6 | 	mov	COUNT_, #1
15858     A8 00 A0 FD | 	call	#pushregs_
1585c     09 1F 02 F6 | 	mov	local01, arg01
15860     46 01 00 FF 
15864     FE 13 06 F6 | 	mov	arg01, ##@LR__4661
15868     E4 24 B0 FD | 	call	#_hg010b_spin2_write
1586c     0F 13 02 F6 | 	mov	arg01, local01
15870     DC 26 B0 FD | 	call	#_hg010b_spin2_inttostr
15874     FD 12 02 F6 | 	mov	arg01, result1
15878     D4 24 B0 FD | 	call	#_hg010b_spin2_write
1587c     47 01 00 FF 
15880     05 12 06 F6 | 	mov	arg01, ##@LR__4662
15884     C8 24 B0 FD | 	call	#_hg010b_spin2_write
15888     02 1E 66 F0 | 	shl	local01, #2
1588c     64 00 00 FF 
15890     50 E5 05 F1 | 	add	objptr, ##51536
15894     F2 1E 02 F1 | 	add	local01, objptr
15898     0F 13 02 FB | 	rdlong	arg01, local01
1589c     64 00 00 FF 
158a0     50 E5 85 F1 | 	sub	objptr, ##51536
158a4                 | ' 
158a4                 | ' write(text)
158a4     A8 24 B0 FD | 	call	#_hg010b_spin2_write
158a8                 | ' crlf
158a8     04 26 B0 FD | 	call	#_hg010b_spin2_crlf
158ac     A7 F0 03 F6 | 	mov	ptra, fp
158b0     B2 00 A0 FD | 	call	#popregs_
158b4                 | _printerror_ret
158b4     2D 00 64 FD | 	ret
158b8                 | 
158b8                 | ' 
158b8                 | ' '' ------------------------------- Hardware start/stop/initialization 
158b8                 | ' 
158b8                 | ' sub startpsram
158b8                 | _startpsram
158b8     00 12 06 F6 | 	mov	arg01, #0
158bc     0A 14 C6 F9 | 	decod	arg02, #10
158c0     0B 16 06 F6 | 	mov	arg03, #11
158c4     07 18 06 F6 | 	mov	arg04, #7
158c8     0B 00 00 FF 
158cc     C0 E4 05 F1 | 	add	objptr, ##5824
158d0     88 27 B0 FD | 	call	#_psram_spin2_startx
158d4     4B 00 00 FF 
158d8     1C E4 05 F1 | 	add	objptr, ##38428
158dc     F2 FA 61 FC | 	wrlong	result1, objptr
158e0                 | '     return $7FF00 + cog*12
158e0     0C E4 05 F1 | 	add	objptr, #12
158e4     FF 03 80 FF 
158e8     F2 00 6A FC | 	wrlong	##524032, objptr
158ec     56 00 00 FF 
158f0     E8 E4 85 F1 | 	sub	objptr, ##44264
158f4                 | _startpsram_ret
158f4     2D 00 64 FD | 	ret
158f8                 | 
158f8                 | ' 
158f8                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
158f8                 | _startvideo
158f8     01 4A 05 F6 | 	mov	COUNT_, #1
158fc     A8 00 A0 FD | 	call	#pushregs_
15900     56 00 00 FF 
15904     E8 E4 05 F1 | 	add	objptr, ##44264
15908     F2 18 02 FB | 	rdlong	arg04, objptr
1590c     56 00 00 FF 
15910     E8 E4 85 F1 | 	sub	objptr, ##44264
15914     0A 13 02 F6 | 	mov	arg01, arg02
15918     0C 15 02 F6 | 	mov	arg02, arg04
1591c     50 0F B0 FD | 	call	#_hg010b_spin2_start
15920     56 00 00 FF 
15924     D4 E4 05 F1 | 	add	objptr, ##44244
15928     F2 FA 61 FC | 	wrlong	result1, objptr
1592c                 | ' 
1592c                 | ' videocog=v.start(pin,mbox)
1592c                 | ' 
1592c                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
1592c     00 1E 06 F6 | 	mov	local01, #0
15930     4B 00 00 FF 
15934     14 E4 85 F1 | 	sub	objptr, ##38420
15938                 | LR__1650
15938     0F 13 02 F6 | 	mov	arg01, local01
1593c     00 28 00 FF 
15940     00 14 06 F6 | 	mov	arg02, ##5242880
15944     6C 2B B0 FD | 	call	#_psram_spin2_setQos
15948     01 1E 06 F1 | 	add	local01, #1
1594c     08 1E 56 F2 | 	cmps	local01, #8 wc
15950     E4 FF 9F CD |  if_b	jmp	#LR__1650
15954     4B 00 00 FF 
15958     14 E4 05 F1 | 	add	objptr, ##38420
1595c     F2 12 02 FB | 	rdlong	arg01, objptr
15960     7A 00 02 FF 
15964     00 14 06 F6 | 	mov	arg02, ##67171328
15968     4B 00 00 FF 
1596c     14 E4 85 F1 | 	sub	objptr, ##38420
15970     40 2B B0 FD | 	call	#_psram_spin2_setQos
15974     0B 00 00 FF 
15978     C0 E4 85 F1 | 	sub	objptr, ##5824
1597c                 | ' psram.setQoS(videocog, $0400f400) 
1597c                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
1597c     F2 14 02 F6 | 	mov	arg02, objptr
15980     00 08 03 FF 
15984     00 14 46 F5 | 	or	arg02, ##101711872
15988     00 16 06 F6 | 	mov	arg03, #0
1598c     00 18 06 F6 | 	mov	arg04, #0
15990     00 12 06 F6 | 	mov	arg01, #0
15994     88 3E B0 FD | 	call	#__system___basic_open
15998                 | ' return videocog
15998     56 00 00 FF 
1599c     D4 E4 05 F1 | 	add	objptr, ##44244
159a0     F2 FA 01 FB | 	rdlong	result1, objptr
159a4     56 00 00 FF 
159a8     D4 E4 85 F1 | 	sub	objptr, ##44244
159ac     A7 F0 03 F6 | 	mov	ptra, fp
159b0     B2 00 A0 FD | 	call	#popregs_
159b4                 | _startvideo_ret
159b4     2D 00 64 FD | 	ret
159b8                 | 
159b8                 | ' 
159b8                 | ' function pspeek(adr as ulong) as ubyte
159b8                 | _pspeek
159b8     00 4A 05 F6 | 	mov	COUNT_, #0
159bc     A8 00 A0 FD | 	call	#pushregs_
159c0     0C F0 07 F1 | 	add	ptra, #12
159c4     04 4E 05 F1 | 	add	fp, #4
159c8     A7 12 62 FC | 	wrlong	arg01, fp
159cc     04 4E 05 F1 | 	add	fp, #4
159d0     A7 12 02 F6 | 	mov	arg01, fp
159d4     04 4E 85 F1 | 	sub	fp, #4
159d8     A7 14 02 FB | 	rdlong	arg02, fp
159dc     04 4E 85 F1 | 	sub	fp, #4
159e0     01 16 06 F6 | 	mov	arg03, #1
159e4     0B 00 00 FF 
159e8     C0 E4 05 F1 | 	add	objptr, ##5824
159ec     98 28 B0 FD | 	call	#_psram_spin2_read1
159f0     0B 00 00 FF 
159f4     C0 E4 85 F1 | 	sub	objptr, ##5824
159f8                 | ' psram.read1(varptr(res),adr,1)
159f8                 | ' return res
159f8     08 4E 05 F1 | 	add	fp, #8
159fc     A7 FA C1 FA | 	rdbyte	result1, fp
15a00     08 4E 85 F1 | 	sub	fp, #8
15a04     A7 F0 03 F6 | 	mov	ptra, fp
15a08     B2 00 A0 FD | 	call	#popregs_
15a0c                 | _pspeek_ret
15a0c     2D 00 64 FD | 	ret
15a10                 | 
15a10                 | ' 
15a10                 | ' function pslpeek(adr as ulong) as ulong
15a10                 | _pslpeek
15a10     00 4A 05 F6 | 	mov	COUNT_, #0
15a14     A8 00 A0 FD | 	call	#pushregs_
15a18     0C F0 07 F1 | 	add	ptra, #12
15a1c     04 4E 05 F1 | 	add	fp, #4
15a20     A7 12 62 FC | 	wrlong	arg01, fp
15a24     04 4E 05 F1 | 	add	fp, #4
15a28     A7 12 02 F6 | 	mov	arg01, fp
15a2c     04 4E 85 F1 | 	sub	fp, #4
15a30     A7 14 02 FB | 	rdlong	arg02, fp
15a34     04 4E 85 F1 | 	sub	fp, #4
15a38     04 16 06 F6 | 	mov	arg03, #4
15a3c     0B 00 00 FF 
15a40     C0 E4 05 F1 | 	add	objptr, ##5824
15a44     40 28 B0 FD | 	call	#_psram_spin2_read1
15a48     0B 00 00 FF 
15a4c     C0 E4 85 F1 | 	sub	objptr, ##5824
15a50                 | ' psram.read1(varptr(res),adr,4)
15a50                 | ' return res
15a50     08 4E 05 F1 | 	add	fp, #8
15a54     A7 FA 01 FB | 	rdlong	result1, fp
15a58     08 4E 85 F1 | 	sub	fp, #8
15a5c     A7 F0 03 F6 | 	mov	ptra, fp
15a60     B2 00 A0 FD | 	call	#popregs_
15a64                 | _pslpeek_ret
15a64     2D 00 64 FD | 	ret
15a68                 | 
15a68                 | ' 
15a68                 | ' '' ------------------------------- USB keyboard scan to char translator
15a68                 | ' 
15a68                 | ' function scantochar(key)
15a68                 | _scantochar
15a68                 | ' 
15a68                 | ' select case (key shr 8) and 255
15a68     09 01 02 F6 | 	mov	_var01, arg01
15a6c     08 00 C6 F0 | 	sar	_var01, #8
15a70     FF 00 0E F5 | 	and	_var01, #255 wz
15a74     24 00 90 AD |  if_e	jmp	#LR__1660
15a78     02 00 0E F2 | 	cmp	_var01, #2 wz
15a7c     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
15a80     30 00 90 AD |  if_e	jmp	#LR__1661
15a84     40 00 0E F2 | 	cmp	_var01, #64 wz
15a88     44 00 90 AD |  if_e	jmp	#LR__1662
15a8c     42 00 0E F2 | 	cmp	_var01, #66 wz
15a90     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
15a94     70 00 90 5D |  if_ne	jmp	#LR__1664
15a98     50 00 90 FD | 	jmp	#LR__1663
15a9c                 | LR__1660
15a9c     09 FB 01 F6 | 	mov	result1, arg01
15aa0     7F FA 05 F5 | 	and	result1, #127
15aa4     02 FA 65 F0 | 	shl	result1, #2
15aa8     F5 FA 01 F1 | 	add	result1, ptr__dat__
15aac     FD FA C1 FA | 	rdbyte	result1, result1
15ab0     54 00 90 FD | 	jmp	#_scantochar_ret
15ab4                 | LR__1661
15ab4     09 FB 01 F6 | 	mov	result1, arg01
15ab8     7F FA 05 F5 | 	and	result1, #127
15abc     02 FA 65 F0 | 	shl	result1, #2
15ac0     01 FA 05 F1 | 	add	result1, #1
15ac4     F5 FA 01 F1 | 	add	result1, ptr__dat__
15ac8     FD FA C1 FA | 	rdbyte	result1, result1
15acc     38 00 90 FD | 	jmp	#_scantochar_ret
15ad0                 | LR__1662
15ad0     09 FB 01 F6 | 	mov	result1, arg01
15ad4     7F FA 05 F5 | 	and	result1, #127
15ad8     02 FA 65 F0 | 	shl	result1, #2
15adc     02 FA 05 F1 | 	add	result1, #2
15ae0     F5 FA 01 F1 | 	add	result1, ptr__dat__
15ae4     FD FA C1 FA | 	rdbyte	result1, result1
15ae8     1C 00 90 FD | 	jmp	#_scantochar_ret
15aec                 | LR__1663
15aec     09 FB 01 F6 | 	mov	result1, arg01
15af0     7F FA 05 F5 | 	and	result1, #127
15af4     02 FA 65 F0 | 	shl	result1, #2
15af8     03 FA 05 F1 | 	add	result1, #3
15afc     F5 FA 01 F1 | 	add	result1, ptr__dat__
15b00     FD FA C1 FA | 	rdbyte	result1, result1
15b04     00 00 90 FD | 	jmp	#_scantochar_ret
15b08                 | LR__1664
15b08                 | _scantochar_ret
15b08     2D 00 64 FD | 	ret
15b0c                 | 
15b0c                 | _program
15b0c     0B 4A 05 F6 | 	mov	COUNT_, #11
15b10     A8 00 A0 FD | 	call	#pushregs_
15b14     A0 FD BF FD | 	call	#_startpsram
15b18     40 12 06 F6 | 	mov	arg01, #64
15b1c     00 14 06 F6 | 	mov	arg02, #0
15b20     00 16 06 F6 | 	mov	arg03, #0
15b24     D0 FD BF FD | 	call	#_startvideo
15b28     00 12 06 F6 | 	mov	arg01, #0
15b2c     00 14 06 F6 | 	mov	arg02, #0
15b30     00 16 06 F6 | 	mov	arg03, #0
15b34     0B 00 00 FF 
15b38     C0 E4 05 F1 | 	add	objptr, ##5824
15b3c     88 2C B0 FD | 	call	#_Audio093b_8_sc_spin2_start
15b40     FE 1C 02 F6 | 	mov	arg06, result2
15b44     4B 00 00 FF 
15b48     10 E4 05 F1 | 	add	objptr, ##38416
15b4c     F2 FA 61 FC | 	wrlong	result1, objptr
15b50     14 E4 05 F1 | 	add	objptr, #20
15b54     F2 1C 62 FC | 	wrlong	arg06, objptr
15b58     56 00 00 FF 
15b5c     E4 E4 85 F1 | 	sub	objptr, ##44260
15b60     32 12 06 F6 | 	mov	arg01, #50
15b64     04 35 B0 FD | 	call	#__system___waitms
15b68     56 00 00 FF 
15b6c     E4 E4 05 F1 | 	add	objptr, ##44260
15b70     F2 12 02 FB | 	rdlong	arg01, objptr
15b74     56 00 00 FF 
15b78     E4 E4 85 F1 | 	sub	objptr, ##44260
15b7c     14 12 06 F1 | 	add	arg01, #20
15b80     20 00 80 FF 
15b84     09 01 58 FC | 	wrword	##16384, arg01
15b88     30 2A B0 FD | 	call	#_usbnew_spin2_start
15b8c     56 00 00 FF 
15b90     D8 E4 05 F1 | 	add	objptr, ##44248
15b94     F2 FA 61 FC | 	wrlong	result1, objptr
15b98                 | '   mouse_limits[0] := xlim
15b98     0F 00 00 FF 
15b9c     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
15ba0     01 00 80 FF 
15ba4     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
15ba8                 | '   mouse_limits[1] := ylim
15ba8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
15bac     01 00 80 FF 
15bb0     FB 7E 68 FC | 	wrlong	##575, ptr__usbnew_spin2_dat__
15bb4     55 00 00 FF 
15bb8     CB E5 85 F1 | 	sub	objptr, ##43979
15bbc     F2 12 02 F6 | 	mov	arg01, objptr
15bc0     0D E5 85 F1 | 	sub	objptr, #269
15bc4     C4 12 06 F1 | 	add	arg01, #196
15bc8                 | '   mouse_outptr := ptr
15bc8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
15bcc     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
15bd0     0F 00 00 FF 
15bd4     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
15bd8     0E 00 00 FF 
15bdc     9A EA 05 F1 | 	add	ptr__dat__, ##7322
15be0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
15be4     0E 00 00 FF 
15be8     9A EA 85 F1 | 	sub	ptr__dat__, ##7322
15bec     10 12 06 F6 | 	mov	arg01, #16
15bf0     74 11 B0 FD | 	call	#_hg010b_spin2_setspriteptr
15bf4     10 12 06 F6 | 	mov	arg01, #16
15bf8     20 14 06 F6 | 	mov	arg02, #32
15bfc     20 16 06 F6 | 	mov	arg03, #32
15c00     D8 11 B0 FD | 	call	#_hg010b_spin2_setspritesize
15c04     09 12 C6 F9 | 	decod	arg01, #9
15c08     20 15 06 F6 | 	mov	arg02, #288
15c0c     68 2A B0 FD | 	call	#_usbnew_spin2_mouse_move
15c10     F2 1C 02 F6 | 	mov	arg06, objptr
15c14     79 00 00 FF 
15c18     BC E4 05 F1 | 	add	objptr, ##62140
15c1c     F2 1A 02 F6 | 	mov	arg05, objptr
15c20     0D 1D 62 FC | 	wrlong	arg06, arg05
15c24     04 1A 06 F1 | 	add	arg05, #4
15c28     0D F1 61 FC | 	wrlong	ptr__housekeeper_, arg05
15c2c     EF 14 02 F6 | 	mov	arg02, entryptr__
15c30     F2 1E 02 F6 | 	mov	local01, objptr
15c34     1E FA 05 F6 | 	mov	result1, #30
15c38     28 1E 62 FD | 	setq	local01
15c3c     0A FB F1 FC | 	coginit	result1, arg02 wc
15c40     01 FA 65 C6 |  if_b	neg	result1, #1
15c44     04 E4 85 F1 | 	sub	objptr, #4
15c48     F2 FA 61 FC | 	wrlong	result1, objptr
15c4c     01 00 00 FF 
15c50     90 E4 05 F1 | 	add	objptr, ##656
15c54     F2 00 68 FC | 	wrlong	#0, objptr
15c58     24 00 00 FF 
15c5c     40 E4 85 F1 | 	sub	objptr, ##18496
15c60     F2 04 68 FC | 	wrlong	#2, objptr
15c64     04 E4 05 F1 | 	add	objptr, #4
15c68     F2 26 69 FC | 	wrlong	#147, objptr
15c6c     04 E4 05 F1 | 	add	objptr, #4
15c70     F2 34 69 FC | 	wrlong	#154, objptr
15c74     04 E4 05 F1 | 	add	objptr, #4
15c78     F2 08 68 FC | 	wrlong	#4, objptr
15c7c     04 E4 85 F1 | 	sub	objptr, #4
15c80     F2 1C 02 FB | 	rdlong	arg06, objptr
15c84     14 E4 85 F1 | 	sub	objptr, #20
15c88     F2 1C 62 FC | 	wrlong	arg06, objptr
15c8c     04 E4 05 F1 | 	add	objptr, #4
15c90     F2 00 68 FC | 	wrlong	#0, objptr
15c94     04 E4 05 F1 | 	add	objptr, #4
15c98     F2 00 68 FC | 	wrlong	#0, objptr
15c9c     22 00 00 FF 
15ca0     B0 E5 05 F1 | 	add	objptr, ##17840
15ca4     F2 02 68 FC | 	wrlong	#1, objptr
15ca8     01 00 00 FF 
15cac     9C E4 05 F1 | 	add	objptr, ##668
15cb0     F2 00 68 FC | 	wrlong	#0, objptr
15cb4     01 00 00 FF 
15cb8     00 EA 05 F1 | 	add	ptr__dat__, ##512
15cbc     08 E4 05 F1 | 	add	objptr, #8
15cc0     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
15cc4     04 E4 85 F1 | 	sub	objptr, #4
15cc8     03 00 80 FF 
15ccc     F2 28 69 FC | 	wrlong	##1684, objptr
15cd0     16 00 00 FF 
15cd4     1C E4 85 F1 | 	sub	objptr, ##11292
15cd8     F2 18 68 FC | 	wrlong	#12, objptr
15cdc     64 00 00 FF 
15ce0     38 E5 85 F1 | 	sub	objptr, ##51512
15ce4     01 00 00 FF 
15ce8     00 EA 85 F1 | 	sub	ptr__dat__, ##512
15cec     5C EB BF FD | 	call	#_init_commands
15cf0     30 F8 BF FD | 	call	#_init_error_strings
15cf4     90 67 BF FD | 	call	#_do_new
15cf8     56 00 00 FF 
15cfc     10 E5 05 F1 | 	add	objptr, ##44304
15d00     F2 12 02 FB | 	rdlong	arg01, objptr
15d04     04 E4 85 F1 | 	sub	objptr, #4
15d08     F2 14 02 FB | 	rdlong	arg02, objptr
15d0c     56 00 00 FF 
15d10     0C E5 85 F1 | 	sub	objptr, ##44300
15d14     7C 1D B0 FD | 	call	#_hg010b_spin2_cls
15d18     56 00 00 FF 
15d1c     14 E5 05 F1 | 	add	objptr, ##44308
15d20     F2 12 02 FB | 	rdlong	arg01, objptr
15d24     56 00 00 FF 
15d28     14 E5 85 F1 | 	sub	objptr, ##44308
15d2c     7C 1C B0 FD | 	call	#_hg010b_spin2_setfontfamily
15d30                 | ' 
15d30                 | ' leading_spaces:=amount
15d30     01 00 00 FF 
15d34     B2 E4 05 F1 | 	add	objptr, ##690
15d38     F2 04 68 FC | 	wrlong	#2, objptr
15d3c     01 00 00 FF 
15d40     B2 E4 85 F1 | 	sub	objptr, ##690
15d44     47 01 00 FF 
15d48     08 20 06 F6 | 	mov	local02, ##@LR__4663
15d4c     3D 12 06 F6 | 	mov	arg01, #61
15d50     3C 14 06 F6 | 	mov	arg02, #60
15d54     3B 16 06 F6 | 	mov	arg03, #59
15d58     3A 18 06 F6 | 	mov	arg04, #58
15d5c     B4 79 B0 FD | 	call	#__system___vfs_open_sdcardx
15d60     FD 14 02 F6 | 	mov	arg02, result1
15d64     10 13 02 F6 | 	mov	arg01, local02
15d68     D8 33 B0 FD | 	call	#__system___mount
15d6c     47 01 00 FF 
15d70     0C 12 06 F6 | 	mov	arg01, ##@LR__4664
15d74     8C 36 B0 FD | 	call	#__system___chdir
15d78     47 01 00 FF 
15d7c     14 20 06 F6 | 	mov	local02, ##@LR__4665
15d80     71 00 00 FF 
15d84     68 E5 05 F1 | 	add	objptr, ##58216
15d88     F2 20 62 FC | 	wrlong	local02, objptr
15d8c     1B 00 00 FF 
15d90     60 E4 85 F1 | 	sub	objptr, ##13920
15d94     F2 12 02 FB | 	rdlong	arg01, objptr
15d98     56 00 00 FF 
15d9c     08 E5 85 F1 | 	sub	objptr, ##44296
15da0     01 12 66 F0 | 	shl	arg01, #1
15da4     01 14 06 F6 | 	mov	arg02, #1
15da8     40 1C B0 FD | 	call	#_hg010b_spin2_setcursorpos
15dac                 | ' 
15dac                 | ' init_commands
15dac                 | ' init_error_strings
15dac                 | ' do_new
15dac                 | ' 
15dac                 | ' 
15dac                 | ' cls(ink, paper)
15dac                 | ' v.setfontfamily(font) 				' use ST Mono font
15dac                 | ' v.setleadingspaces(2)
15dac                 | ' mount "/sd", _vfs_open_sdcard()
15dac                 | ' chdir "/sd/bas"
15dac                 | ' 
15dac                 | ' currentdir$="/sd/bas"
15dac                 | ' 
15dac                 | ' position 2*editor_spaces,1 : print ver$
15dac     00 12 06 F6 | 	mov	arg01, #0
15db0     C8 88 B0 FD | 	call	#__system___getiolock_0423
15db4     FD 12 02 F6 | 	mov	arg01, result1
15db8     BC 2F B0 FD | 	call	#__system___lockmem
15dbc     10 00 00 FF 
15dc0     10 EB 05 F1 | 	add	ptr__dat__, ##8464
15dc4     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
15dc8     10 00 00 FF 
15dcc     10 EB 85 F1 | 	sub	ptr__dat__, ##8464
15dd0     00 12 06 F6 | 	mov	arg01, #0
15dd4     00 16 06 F6 | 	mov	arg03, #0
15dd8     90 3C B0 FD | 	call	#__system___basic_print_string
15ddc     00 12 06 F6 | 	mov	arg01, #0
15de0     0A 14 06 F6 | 	mov	arg02, #10
15de4     00 16 06 F6 | 	mov	arg03, #0
15de8     28 3C B0 FD | 	call	#__system___basic_print_char
15dec     00 12 06 F6 | 	mov	arg01, #0
15df0     88 88 B0 FD | 	call	#__system___getiolock_0423
15df4     FD 00 68 FC | 	wrlong	#0, result1
15df8     F2 12 02 FB | 	rdlong	arg01, objptr
15dfc     00 14 06 F6 | 	mov	arg02, #0
15e00     0A 16 06 F6 | 	mov	arg03, #10
15e04     78 51 B0 FD | 	call	#__system__Number_S
15e08     FD 12 02 F6 | 	mov	arg01, result1
15e0c     47 01 00 FF 
15e10     1C 14 06 F6 | 	mov	arg02, ##@LR__4666
15e14     BC 2F B0 FD | 	call	#__system___string_concat
15e18     FD 20 02 F6 | 	mov	local02, result1
15e1c     79 00 00 FF 
15e20     B0 E4 05 F1 | 	add	objptr, ##62128
15e24     F2 20 62 FC | 	wrlong	local02, objptr
15e28     79 00 00 FF 
15e2c     B0 E4 85 F1 | 	sub	objptr, ##62128
15e30                 | ' free$=decuns$(v.buf_ptr)+" BASIC bytes free" : print free$
15e30     00 12 06 F6 | 	mov	arg01, #0
15e34     44 88 B0 FD | 	call	#__system___getiolock_0423
15e38     FD 12 02 F6 | 	mov	arg01, result1
15e3c     38 2F B0 FD | 	call	#__system___lockmem
15e40     79 00 00 FF 
15e44     B0 E4 05 F1 | 	add	objptr, ##62128
15e48     F2 14 02 FB | 	rdlong	arg02, objptr
15e4c     79 00 00 FF 
15e50     B0 E4 85 F1 | 	sub	objptr, ##62128
15e54     00 12 06 F6 | 	mov	arg01, #0
15e58     00 16 06 F6 | 	mov	arg03, #0
15e5c     0C 3C B0 FD | 	call	#__system___basic_print_string
15e60     00 12 06 F6 | 	mov	arg01, #0
15e64     0A 14 06 F6 | 	mov	arg02, #10
15e68     00 16 06 F6 | 	mov	arg03, #0
15e6c     A4 3B B0 FD | 	call	#__system___basic_print_char
15e70     00 12 06 F6 | 	mov	arg01, #0
15e74     04 88 B0 FD | 	call	#__system___getiolock_0423
15e78     FD 00 68 FC | 	wrlong	#0, result1
15e7c     56 00 00 FF 
15e80     08 E5 05 F1 | 	add	objptr, ##44296
15e84     F2 12 02 FB | 	rdlong	arg01, objptr
15e88     56 00 00 FF 
15e8c     08 E5 85 F1 | 	sub	objptr, ##44296
15e90     01 12 66 F0 | 	shl	arg01, #1
15e94     04 14 06 F6 | 	mov	arg02, #4
15e98     50 1B B0 FD | 	call	#_hg010b_spin2_setcursorpos
15e9c                 | ' position 2*editor_spaces,4 : print "Ready"
15e9c     00 12 06 F6 | 	mov	arg01, #0
15ea0     D8 87 B0 FD | 	call	#__system___getiolock_0423
15ea4     FD 12 02 F6 | 	mov	arg01, result1
15ea8     CC 2E B0 FD | 	call	#__system___lockmem
15eac     47 01 00 FF 
15eb0     2E 14 06 F6 | 	mov	arg02, ##@LR__4667
15eb4     00 12 06 F6 | 	mov	arg01, #0
15eb8     00 16 06 F6 | 	mov	arg03, #0
15ebc     AC 3B B0 FD | 	call	#__system___basic_print_string
15ec0     FD 22 02 F6 | 	mov	local03, result1
15ec4     00 12 06 F6 | 	mov	arg01, #0
15ec8     0A 14 06 F6 | 	mov	arg02, #10
15ecc     00 16 06 F6 | 	mov	arg03, #0
15ed0     40 3B B0 FD | 	call	#__system___basic_print_char
15ed4     01 24 06 F6 | 	mov	local04, #1
15ed8     00 12 06 F6 | 	mov	arg01, #0
15edc     9C 87 B0 FD | 	call	#__system___getiolock_0423
15ee0     FD 00 68 FC | 	wrlong	#0, result1
15ee4     00 26 06 F6 | 	mov	local05, #0
15ee8     00 14 06 F6 | 	mov	arg02, #0
15eec     01 14 D6 F7 | 	test	arg02, #1 wc
15ef0     5A 4C 64 FD | 	drvc	#38
15ef4     01 14 D6 F7 | 	test	arg02, #1 wc
15ef8     5A 4E 64 FD | 	drvc	#39
15efc                 | ' 'hubset( %1_000001__00_0001_1010__1111_1011)
15efc                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
15efc                 | ' 
15efc                 | ' '-------------------------------------------------------------------------------------------------------- 
15efc                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
15efc                 | ' '--------------------------------------------------------------------------------------------------------
15efc                 | ' 
15efc                 | ' do
15efc                 | LR__1670
15efc     01 12 06 F6 | 	mov	arg01, #1
15f00     20 1B B0 FD | 	call	#_hg010b_spin2_waitvbl
15f04     10 27 B0 FD | 	call	#_usbnew_spin2_get_key
15f08     64 00 00 FF 
15f0c     48 E5 05 F1 | 	add	objptr, ##51528
15f10     F2 FA 61 FC | 	wrlong	result1, objptr
15f14                 | '   return hkbd_led_rep
15f14     13 00 00 FF 
15f18     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
15f1c     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
15f20     13 00 00 FF 
15f24     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
15f28     16 00 00 FF 
15f2c     20 E4 05 F1 | 	add	objptr, ##11296
15f30     F2 FA 61 FC | 	wrlong	result1, objptr
15f34                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,16384,0,1758): waitms(10): paula.stop(7)
15f34     16 00 00 FF 
15f38     20 E4 85 F1 | 	sub	objptr, ##11296
15f3c     F2 20 02 FB | 	rdlong	local02, objptr
15f40     64 00 00 FF 
15f44     48 E5 85 F1 | 	sub	objptr, ##51528
15f48     01 20 16 F2 | 	cmp	local02, #1 wc
15f4c     BC 00 90 CD |  if_b	jmp	#LR__1671
15f50     64 00 00 FF 
15f54     48 E5 05 F1 | 	add	objptr, ##51528
15f58     F2 24 02 FB | 	rdlong	local04, objptr
15f5c     64 00 00 FF 
15f60     48 E5 85 F1 | 	sub	objptr, ##51528
15f64     12 23 02 F6 | 	mov	local03, local04
15f68     04 22 16 F2 | 	cmp	local03, #4 wc
15f6c     9C 00 90 3D |  if_ae	jmp	#LR__1671
15f70     79 00 00 FF 
15f74     B4 E4 05 F1 | 	add	objptr, ##62132
15f78     F2 1E 02 FB | 	rdlong	local01, objptr
15f7c     79 00 00 FF 
15f80     B4 E4 85 F1 | 	sub	objptr, ##62132
15f84     0F 27 02 F6 | 	mov	local05, local01
15f88     01 26 0E F2 | 	cmp	local05, #1 wz
15f8c     7C 00 90 5D |  if_ne	jmp	#LR__1671
15f90     04 00 00 FF 
15f94     94 EA 05 F1 | 	add	ptr__dat__, ##2196
15f98     F5 14 02 F6 | 	mov	arg02, ptr__dat__
15f9c     04 00 00 FF 
15fa0     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
15fa4     56 00 00 FF 
15fa8     44 22 06 F6 | 	mov	local03, ##44100
15fac     0E 24 C6 F9 | 	decod	local04, #14
15fb0     00 26 06 F6 | 	mov	local05, #0
15fb4     03 00 00 FF 
15fb8     DE 1E 06 F6 | 	mov	local01, ##1758
15fbc     07 12 06 F6 | 	mov	arg01, #7
15fc0     56 00 00 FF 
15fc4     44 16 06 F6 | 	mov	arg03, ##44100
15fc8     0E 18 C6 F9 | 	decod	arg04, #14
15fcc     00 1A 06 F6 | 	mov	arg05, #0
15fd0     03 00 00 FF 
15fd4     DE 1C 06 F6 | 	mov	arg06, ##1758
15fd8     0B 00 00 FF 
15fdc     C0 E4 05 F1 | 	add	objptr, ##5824
15fe0     5C 29 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
15fe4     0B 00 00 FF 
15fe8     C0 E4 85 F1 | 	sub	objptr, ##5824
15fec     0A 12 06 F6 | 	mov	arg01, #10
15ff0     78 30 B0 FD | 	call	#__system___waitms
15ff4     07 12 06 F6 | 	mov	arg01, #7
15ff8     0B 00 00 FF 
15ffc     C0 E4 05 F1 | 	add	objptr, ##5824
16000     8C 2A B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
16004     0B 00 00 FF 
16008     C0 E4 85 F1 | 	sub	objptr, ##5824
1600c                 | LR__1671
1600c                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then let key2=key : let rpt=1 : let key3=key2
1600c     64 00 00 FF 
16010     48 E5 05 F1 | 	add	objptr, ##51528
16014     F2 20 02 FB | 	rdlong	local02, objptr
16018     64 00 00 FF 
1601c     48 E5 85 F1 | 	sub	objptr, ##51528
16020     04 20 16 F2 | 	cmp	local02, #4 wc
16024     80 00 90 CD |  if_b	jmp	#LR__1672
16028     64 00 00 FF 
1602c     48 E5 05 F1 | 	add	objptr, ##51528
16030     F2 24 02 FB | 	rdlong	local04, objptr
16034     64 00 00 FF 
16038     48 E5 85 F1 | 	sub	objptr, ##51528
1603c     12 23 02 F6 | 	mov	local03, local04
16040     00 00 40 FF 
16044     00 22 16 F2 | 	cmp	local03, ##-2147483648 wc
16048     64 00 00 CF 
1604c     48 E5 05 C1 |  if_b	add	objptr, ##51528
16050     F2 1E 02 CB |  if_b	rdlong	local01, objptr
16054     64 00 00 CF 
16058     48 E5 85 C1 |  if_b	sub	objptr, ##51528
1605c     0F 27 E2 C8 |  if_b	getbyte	local05, local01, #0
16060     E0 26 16 C2 |  if_b	cmp	local05, #224 wc
16064     40 00 90 3D |  if_ae	jmp	#LR__1672
16068     64 00 00 FF 
1606c     48 E5 05 F1 | 	add	objptr, ##51528
16070     F2 20 02 FB | 	rdlong	local02, objptr
16074     04 E4 05 F1 | 	add	objptr, #4
16078     F2 20 62 FC | 	wrlong	local02, objptr
1607c     16 00 00 FF 
16080     20 E4 05 F1 | 	add	objptr, ##11296
16084     F2 02 68 FC | 	wrlong	#1, objptr
16088     16 00 00 FF 
1608c     20 E4 85 F1 | 	sub	objptr, ##11296
16090     F2 20 02 FB | 	rdlong	local02, objptr
16094     16 00 00 FF 
16098     24 E4 05 F1 | 	add	objptr, ##11300
1609c     F2 20 62 FC | 	wrlong	local02, objptr
160a0     7A 00 00 FF 
160a4     70 E5 85 F1 | 	sub	objptr, ##62832
160a8                 | LR__1672
160a8                 | ' if key>$80000000 then let rptcnt=0 : let rpt=0
160a8     64 00 00 FF 
160ac     48 E5 05 F1 | 	add	objptr, ##51528
160b0     F2 20 02 FB | 	rdlong	local02, objptr
160b4     64 00 00 FF 
160b8     48 E5 85 F1 | 	sub	objptr, ##51528
160bc     00 00 40 FF 
160c0     01 20 16 F2 | 	cmp	local02, ##-2147483647 wc
160c4     7A 00 00 3F 
160c8     74 E5 05 31 |  if_ae	add	objptr, ##62836
160cc     F2 00 68 3C |  if_ae	wrlong	#0, objptr
160d0     08 E4 85 31 |  if_ae	sub	objptr, #8
160d4     F2 00 68 3C |  if_ae	wrlong	#0, objptr
160d8     7A 00 00 3F 
160dc     6C E5 85 31 |  if_ae	sub	objptr, ##62828
160e0                 | ' if key=0 andalso rpt=1 then rptcnt+=1
160e0     64 00 00 FF 
160e4     48 E5 05 F1 | 	add	objptr, ##51528
160e8     F2 20 0A FB | 	rdlong	local02, objptr wz
160ec     64 00 00 FF 
160f0     48 E5 85 F1 | 	sub	objptr, ##51528
160f4     7A 00 00 AF 
160f8     6C E5 05 A1 |  if_e	add	objptr, ##62828
160fc     F2 24 02 AB |  if_e	rdlong	local04, objptr
16100     7A 00 00 AF 
16104     6C E5 85 A1 |  if_e	sub	objptr, ##62828
16108     12 23 02 A6 |  if_e	mov	local03, local04
1610c     01 22 0E A2 |  if_e	cmp	local03, #1 wz
16110     7A 00 00 AF 
16114     74 E5 05 A1 |  if_e	add	objptr, ##62836
16118     F2 20 02 AB |  if_e	rdlong	local02, objptr
1611c     01 20 06 A1 |  if_e	add	local02, #1
16120     F2 20 62 AC |  if_e	wrlong	local02, objptr
16124     7A 00 00 AF 
16128     74 E5 85 A1 |  if_e	sub	objptr, ##62836
1612c                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
1612c     64 00 00 FF 
16130     48 E5 05 F1 | 	add	objptr, ##51528
16134     F2 20 02 FB | 	rdlong	local02, objptr
16138     64 00 00 FF 
1613c     48 E5 85 F1 | 	sub	objptr, ##51528
16140     00 00 40 FF 
16144     00 20 16 F2 | 	cmp	local02, ##-2147483648 wc
16148     44 00 90 3D |  if_ae	jmp	#LR__1674
1614c     7A 00 00 FF 
16150     74 E5 05 F1 | 	add	objptr, ##62836
16154     F2 20 02 FB | 	rdlong	local02, objptr
16158     7A 00 00 FF 
1615c     74 E5 85 F1 | 	sub	objptr, ##62836
16160     19 20 0E F2 | 	cmp	local02, #25 wz
16164     28 00 90 5D |  if_ne	jmp	#LR__1673
16168     64 00 00 FF 
1616c     4C E5 05 F1 | 	add	objptr, ##51532
16170     F2 20 02 FB | 	rdlong	local02, objptr
16174     16 00 00 FF 
16178     24 E4 05 F1 | 	add	objptr, ##11300
1617c     F2 20 62 FC | 	wrlong	local02, objptr
16180     04 E4 05 F1 | 	add	objptr, #4
16184     F2 2A 68 FC | 	wrlong	#21, objptr
16188     7A 00 00 FF 
1618c     74 E5 85 F1 | 	sub	objptr, ##62836
16190                 | LR__1673
16190                 | LR__1674
16190                 | ' 
16190                 | ' 
16190                 | ' if key3<>0 then
16190     7A 00 00 FF 
16194     70 E5 05 F1 | 	add	objptr, ##62832
16198     F2 28 0A FB | 	rdlong	local06, objptr wz
1619c     7A 00 00 FF 
161a0     70 E5 85 F1 | 	sub	objptr, ##62832
161a4     54 FD 9F AD |  if_e	jmp	#LR__1670
161a8                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,16384,spl_len) 
161a8     79 00 00 FF 
161ac     B4 E4 05 F1 | 	add	objptr, ##62132
161b0     F2 20 02 FB | 	rdlong	local02, objptr
161b4     79 00 00 FF 
161b8     B4 E4 85 F1 | 	sub	objptr, ##62132
161bc     01 20 0E F2 | 	cmp	local02, #1 wz
161c0     50 00 90 5D |  if_ne	jmp	#LR__1675
161c4     7A 00 00 FF 
161c8     58 E5 05 F1 | 	add	objptr, ##62808
161cc     F2 14 02 FB | 	rdlong	arg02, objptr
161d0     56 00 00 FF 
161d4     44 22 06 F6 | 	mov	local03, ##44100
161d8     0E 24 C6 F9 | 	decod	local04, #14
161dc     04 E4 85 F1 | 	sub	objptr, #4
161e0     F2 26 02 FB | 	rdlong	local05, objptr
161e4     01 1E 66 F6 | 	neg	local01, #1
161e8     07 12 06 F6 | 	mov	arg01, #7
161ec     56 00 00 FF 
161f0     44 16 06 F6 | 	mov	arg03, ##44100
161f4     0E 18 C6 F9 | 	decod	arg04, #14
161f8     13 1B 02 F6 | 	mov	arg05, local05
161fc     01 1C 66 F6 | 	neg	arg06, #1
16200     6F 00 00 FF 
16204     94 E4 85 F1 | 	sub	objptr, ##56980
16208     34 27 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
1620c     0B 00 00 FF 
16210     C0 E4 85 F1 | 	sub	objptr, ##5824
16214                 | LR__1675
16214     7A 00 00 FF 
16218     70 E5 05 F1 | 	add	objptr, ##62832
1621c     F2 12 02 FB | 	rdlong	arg01, objptr
16220     7A 00 00 FF 
16224     70 E5 85 F1 | 	sub	objptr, ##62832
16228     3C F8 BF FD | 	call	#_scantochar
1622c     7A 00 00 FF 
16230     78 E5 05 F1 | 	add	objptr, ##62840
16234     F2 FA 61 FC | 	wrlong	result1, objptr
16238                 | '   if leds and 2 = 2 then 
16238     10 E4 85 F1 | 	sub	objptr, #16
1623c     F2 20 0A FB | 	rdlong	local02, objptr wz
16240     7A 00 00 FF 
16244     68 E5 85 F1 | 	sub	objptr, ##62824
16248     68 01 90 AD |  if_e	jmp	#LR__1683
1624c                 | '     if key4>96 andalso key4<123 then
1624c     7A 00 00 FF 
16250     78 E5 05 F1 | 	add	objptr, ##62840
16254     F2 20 02 FB | 	rdlong	local02, objptr
16258     7A 00 00 FF 
1625c     78 E5 85 F1 | 	sub	objptr, ##62840
16260     61 20 56 F2 | 	cmps	local02, #97 wc
16264     40 00 90 CD |  if_b	jmp	#LR__1676
16268     7A 00 00 FF 
1626c     78 E5 05 F1 | 	add	objptr, ##62840
16270     F2 24 02 FB | 	rdlong	local04, objptr
16274     7A 00 00 FF 
16278     78 E5 85 F1 | 	sub	objptr, ##62840
1627c     12 23 02 F6 | 	mov	local03, local04
16280     7B 22 56 F2 | 	cmps	local03, #123 wc
16284     20 00 90 3D |  if_ae	jmp	#LR__1676
16288     7A 00 00 FF 
1628c     78 E5 05 F1 | 	add	objptr, ##62840
16290     F2 20 02 FB | 	rdlong	local02, objptr
16294     20 20 86 F1 | 	sub	local02, #32
16298     F2 20 62 FC | 	wrlong	local02, objptr
1629c     7A 00 00 FF 
162a0     78 E5 85 F1 | 	sub	objptr, ##62840
162a4     0C 01 90 FD | 	jmp	#LR__1682
162a8                 | LR__1676
162a8     7A 00 00 FF 
162ac     78 E5 05 F1 | 	add	objptr, ##62840
162b0     F2 20 02 FB | 	rdlong	local02, objptr
162b4     7A 00 00 FF 
162b8     78 E5 85 F1 | 	sub	objptr, ##62840
162bc     41 20 56 F2 | 	cmps	local02, #65 wc
162c0     40 00 90 CD |  if_b	jmp	#LR__1677
162c4     7A 00 00 FF 
162c8     78 E5 05 F1 | 	add	objptr, ##62840
162cc     F2 24 02 FB | 	rdlong	local04, objptr
162d0     7A 00 00 FF 
162d4     78 E5 85 F1 | 	sub	objptr, ##62840
162d8     12 23 02 F6 | 	mov	local03, local04
162dc     5B 22 56 F2 | 	cmps	local03, #91 wc
162e0     20 00 90 3D |  if_ae	jmp	#LR__1677
162e4     7A 00 00 FF 
162e8     78 E5 05 F1 | 	add	objptr, ##62840
162ec     F2 20 02 FB | 	rdlong	local02, objptr
162f0     20 20 06 F1 | 	add	local02, #32
162f4     F2 20 62 FC | 	wrlong	local02, objptr
162f8     7A 00 00 FF 
162fc     78 E5 85 F1 | 	sub	objptr, ##62840
16300     B0 00 90 FD | 	jmp	#LR__1681
16304                 | LR__1677
16304     7A 00 00 FF 
16308     78 E5 05 F1 | 	add	objptr, ##62840
1630c     F2 20 02 FB | 	rdlong	local02, objptr
16310     7A 00 00 FF 
16314     78 E5 85 F1 | 	sub	objptr, ##62840
16318     17 20 56 F2 | 	cmps	local02, #23 wc
1631c     40 00 90 CD |  if_b	jmp	#LR__1678
16320     7A 00 00 FF 
16324     78 E5 05 F1 | 	add	objptr, ##62840
16328     F2 24 02 FB | 	rdlong	local04, objptr
1632c     7A 00 00 FF 
16330     78 E5 85 F1 | 	sub	objptr, ##62840
16334     12 23 02 F6 | 	mov	local03, local04
16338     20 22 56 F2 | 	cmps	local03, #32 wc
1633c     20 00 90 3D |  if_ae	jmp	#LR__1678
16340     7A 00 00 FF 
16344     78 E5 05 F1 | 	add	objptr, ##62840
16348     F2 20 02 FB | 	rdlong	local02, objptr
1634c     09 20 86 F1 | 	sub	local02, #9
16350     F2 20 62 FC | 	wrlong	local02, objptr
16354     7A 00 00 FF 
16358     78 E5 85 F1 | 	sub	objptr, ##62840
1635c     54 00 90 FD | 	jmp	#LR__1680
16360                 | LR__1678
16360     7A 00 00 FF 
16364     78 E5 05 F1 | 	add	objptr, ##62840
16368     F2 20 02 FB | 	rdlong	local02, objptr
1636c     7A 00 00 FF 
16370     78 E5 85 F1 | 	sub	objptr, ##62840
16374     0E 20 56 F2 | 	cmps	local02, #14 wc
16378     38 00 90 CD |  if_b	jmp	#LR__1679
1637c     7A 00 00 FF 
16380     78 E5 05 F1 | 	add	objptr, ##62840
16384     F2 24 02 FB | 	rdlong	local04, objptr
16388     7A 00 00 FF 
1638c     78 E5 85 F1 | 	sub	objptr, ##62840
16390     12 23 02 F6 | 	mov	local03, local04
16394     17 22 56 F2 | 	cmps	local03, #23 wc
16398     7A 00 00 CF 
1639c     78 E5 05 C1 |  if_b	add	objptr, ##62840
163a0     F2 20 02 CB |  if_b	rdlong	local02, objptr
163a4     27 20 06 C1 |  if_b	add	local02, #39
163a8     F2 20 62 CC |  if_b	wrlong	local02, objptr
163ac     7A 00 00 CF 
163b0     78 E5 85 C1 |  if_b	sub	objptr, ##62840
163b4                 | LR__1679
163b4                 | LR__1680
163b4                 | LR__1681
163b4                 | LR__1682
163b4                 | LR__1683
163b4                 | '  
163b4                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then line$+=chr$(key4): v.putchar(key4)
163b4     7A 00 00 FF 
163b8     78 E5 05 F1 | 	add	objptr, ##62840
163bc     F2 20 02 FB | 	rdlong	local02, objptr
163c0     7A 00 00 FF 
163c4     78 E5 85 F1 | 	sub	objptr, ##62840
163c8     01 20 56 F2 | 	cmps	local02, #1 wc
163cc     90 00 90 CD |  if_b	jmp	#LR__1684
163d0     7A 00 00 FF 
163d4     78 E5 05 F1 | 	add	objptr, ##62840
163d8     F2 24 02 FB | 	rdlong	local04, objptr
163dc     7A 00 00 FF 
163e0     78 E5 85 F1 | 	sub	objptr, ##62840
163e4     12 23 02 F6 | 	mov	local03, local04
163e8     7F 22 56 F2 | 	cmps	local03, #127 wc
163ec     38 E4 05 C1 |  if_b	add	objptr, #56
163f0     F2 1E E2 CA |  if_b	rdword	local01, objptr
163f4     38 E4 85 C1 |  if_b	sub	objptr, #56
163f8     0F 27 32 C9 |  if_b	getword	local05, local01, #0
163fc     FE 26 16 C2 |  if_b	cmp	local05, #254 wc
16400     5C 00 90 3D |  if_ae	jmp	#LR__1684
16404     7A 00 00 FF 
16408     78 E5 05 F1 | 	add	objptr, ##62840
1640c     F2 12 02 FB | 	rdlong	arg01, objptr
16410     7A 00 00 FF 
16414     78 E5 85 F1 | 	sub	objptr, ##62840
16418     30 4B B0 FD | 	call	#__system__Chr_S
1641c     FD 2A 02 F6 | 	mov	local07, result1
16420     56 00 00 FF 
16424     F0 E4 05 F1 | 	add	objptr, ##44272
16428     F2 12 02 FB | 	rdlong	arg01, objptr
1642c     56 00 00 FF 
16430     F0 E4 85 F1 | 	sub	objptr, ##44272
16434     15 15 02 F6 | 	mov	arg02, local07
16438     98 29 B0 FD | 	call	#__system___string_concat
1643c     56 00 00 FF 
16440     F0 E4 05 F1 | 	add	objptr, ##44272
16444     F2 FA 61 FC | 	wrlong	result1, objptr
16448     24 00 00 FF 
1644c     88 E4 05 F1 | 	add	objptr, ##18568
16450     F2 12 02 FB | 	rdlong	arg01, objptr
16454     7A 00 00 FF 
16458     78 E5 85 F1 | 	sub	objptr, ##62840
1645c     D4 16 B0 FD | 	call	#_hg010b_spin2_putchar
16460                 | LR__1684
16460                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(7) 'end of line reached
16460     7A 00 00 FF 
16464     78 E5 05 F1 | 	add	objptr, ##62840
16468     F2 20 02 FB | 	rdlong	local02, objptr
1646c     7A 00 00 FF 
16470     78 E5 85 F1 | 	sub	objptr, ##62840
16474     01 20 56 F2 | 	cmps	local02, #1 wc
16478     D0 00 90 CD |  if_b	jmp	#LR__1685
1647c     7A 00 00 FF 
16480     78 E5 05 F1 | 	add	objptr, ##62840
16484     F2 24 02 FB | 	rdlong	local04, objptr
16488     7A 00 00 FF 
1648c     78 E5 85 F1 | 	sub	objptr, ##62840
16490     12 23 02 F6 | 	mov	local03, local04
16494     7F 22 56 F2 | 	cmps	local03, #127 wc
16498     B0 00 90 3D |  if_ae	jmp	#LR__1685
1649c     38 E4 05 F1 | 	add	objptr, #56
164a0     F2 1E E2 FA | 	rdword	local01, objptr
164a4     38 E4 85 F1 | 	sub	objptr, #56
164a8     0F 27 32 F9 | 	getword	local05, local01, #0
164ac     FE 26 0E F2 | 	cmp	local05, #254 wz
164b0     79 00 00 AF 
164b4     B4 E4 05 A1 |  if_e	add	objptr, ##62132
164b8     F2 2C 02 AB |  if_e	rdlong	local08, objptr
164bc     79 00 00 AF 
164c0     B4 E4 85 A1 |  if_e	sub	objptr, ##62132
164c4     16 2F 02 A6 |  if_e	mov	local09, local08
164c8     01 2E 0E A2 |  if_e	cmp	local09, #1 wz
164cc     7C 00 90 5D |  if_ne	jmp	#LR__1685
164d0     04 00 00 FF 
164d4     94 EA 05 F1 | 	add	ptr__dat__, ##2196
164d8     F5 14 02 F6 | 	mov	arg02, ptr__dat__
164dc     04 00 00 FF 
164e0     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
164e4     56 00 00 FF 
164e8     44 22 06 F6 | 	mov	local03, ##44100
164ec     0E 24 C6 F9 | 	decod	local04, #14
164f0     00 26 06 F6 | 	mov	local05, #0
164f4     03 00 00 FF 
164f8     DE 1E 06 F6 | 	mov	local01, ##1758
164fc     07 12 06 F6 | 	mov	arg01, #7
16500     56 00 00 FF 
16504     44 16 06 F6 | 	mov	arg03, ##44100
16508     0E 18 C6 F9 | 	decod	arg04, #14
1650c     00 1A 06 F6 | 	mov	arg05, #0
16510     03 00 00 FF 
16514     DE 1C 06 F6 | 	mov	arg06, ##1758
16518     0B 00 00 FF 
1651c     C0 E4 05 F1 | 	add	objptr, ##5824
16520     1C 24 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
16524     0B 00 00 FF 
16528     C0 E4 85 F1 | 	sub	objptr, ##5824
1652c     2C 13 06 F6 | 	mov	arg01, #300
16530     38 2B B0 FD | 	call	#__system___waitms
16534     07 12 06 F6 | 	mov	arg01, #7
16538     0B 00 00 FF 
1653c     C0 E4 05 F1 | 	add	objptr, ##5824
16540     4C 25 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
16544     0B 00 00 FF 
16548     C0 E4 85 F1 | 	sub	objptr, ##5824
1654c                 | LR__1685
1654c                 | '  
1654c                 | '   'tab
1654c                 | '   if (key3 and 255) = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)
1654c     7A 00 00 FF 
16550     70 E5 05 F1 | 	add	objptr, ##62832
16554     F2 20 02 FB | 	rdlong	local02, objptr
16558     7A 00 00 FF 
1655c     70 E5 85 F1 | 	sub	objptr, ##62832
16560     10 21 E2 F8 | 	getbyte	local02, local02, #0
16564     2B 20 0E F2 | 	cmp	local02, #43 wz
16568     B4 00 90 5D |  if_ne	jmp	#LR__1686
1656c     38 E4 05 F1 | 	add	objptr, #56
16570     F2 24 E2 FA | 	rdword	local04, objptr
16574     38 E4 85 F1 | 	sub	objptr, #56
16578     12 23 32 F9 | 	getword	local03, local04, #0
1657c     F0 22 16 F2 | 	cmp	local03, #240 wc
16580     9C 00 90 CD |  if_b	jmp	#LR__1686
16584     79 00 00 FF 
16588     B4 E4 05 F1 | 	add	objptr, ##62132
1658c     F2 1E 02 FB | 	rdlong	local01, objptr
16590     79 00 00 FF 
16594     B4 E4 85 F1 | 	sub	objptr, ##62132
16598     0F 27 02 F6 | 	mov	local05, local01
1659c     01 26 0E F2 | 	cmp	local05, #1 wz
165a0     7C 00 90 5D |  if_ne	jmp	#LR__1686
165a4     04 00 00 FF 
165a8     94 EA 05 F1 | 	add	ptr__dat__, ##2196
165ac     F5 14 02 F6 | 	mov	arg02, ptr__dat__
165b0     04 00 00 FF 
165b4     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
165b8     56 00 00 FF 
165bc     44 22 06 F6 | 	mov	local03, ##44100
165c0     0E 24 C6 F9 | 	decod	local04, #14
165c4     00 26 06 F6 | 	mov	local05, #0
165c8     03 00 00 FF 
165cc     DE 1E 06 F6 | 	mov	local01, ##1758
165d0     00 12 06 F6 | 	mov	arg01, #0
165d4     56 00 00 FF 
165d8     44 16 06 F6 | 	mov	arg03, ##44100
165dc     0E 18 C6 F9 | 	decod	arg04, #14
165e0     00 1A 06 F6 | 	mov	arg05, #0
165e4     03 00 00 FF 
165e8     DE 1C 06 F6 | 	mov	arg06, ##1758
165ec     0B 00 00 FF 
165f0     C0 E4 05 F1 | 	add	objptr, ##5824
165f4     48 23 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
165f8     0B 00 00 FF 
165fc     C0 E4 85 F1 | 	sub	objptr, ##5824
16600     2C 13 06 F6 | 	mov	arg01, #300
16604     64 2A B0 FD | 	call	#__system___waitms
16608     00 12 06 F6 | 	mov	arg01, #0
1660c     0B 00 00 FF 
16610     C0 E4 05 F1 | 	add	objptr, ##5824
16614     78 24 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
16618     0B 00 00 FF 
1661c     C0 E4 85 F1 | 	sub	objptr, ##5824
16620                 | LR__1686
16620                 | '   if (key3 and 255) = 43 andalso v.cursor_x<240 then let x=(v.cursor_x mod 16)/2: for i=x to 7: line$+=" " :  v.write (" ") : next i  
16620     7A 00 00 FF 
16624     70 E5 05 F1 | 	add	objptr, ##62832
16628     F2 20 02 FB | 	rdlong	local02, objptr
1662c     7A 00 00 FF 
16630     70 E5 85 F1 | 	sub	objptr, ##62832
16634     10 21 E2 F8 | 	getbyte	local02, local02, #0
16638     2B 20 0E F2 | 	cmp	local02, #43 wz
1663c     AC 00 90 5D |  if_ne	jmp	#LR__1689
16640     38 E4 05 F1 | 	add	objptr, #56
16644     F2 24 E2 FA | 	rdword	local04, objptr
16648     38 E4 85 F1 | 	sub	objptr, #56
1664c     12 23 32 F9 | 	getword	local03, local04, #0
16650     F0 22 16 F2 | 	cmp	local03, #240 wc
16654     94 00 90 3D |  if_ae	jmp	#LR__1689
16658     38 E4 05 F1 | 	add	objptr, #56
1665c     F2 20 E2 FA | 	rdword	local02, objptr
16660     10 23 52 F6 | 	abs	local03, local02 wc
16664     11 23 42 F8 | 	getnib	local03, local03, #0
16668     11 23 82 F6 | 	negc	local03, local03
1666c     11 25 52 F6 | 	abs	local04, local03 wc
16670     01 24 46 F0 | 	shr	local04, #1
16674     12 25 82 F6 | 	negc	local04, local04
16678     7A 00 00 FF 
1667c     44 E5 05 F1 | 	add	objptr, ##62788
16680     F2 24 62 FC | 	wrlong	local04, objptr
16684     12 31 02 F6 | 	mov	local10, local04
16688     7A 00 00 FF 
1668c     7C E5 85 F1 | 	sub	objptr, ##62844
16690                 | LR__1687
16690     08 30 56 F2 | 	cmps	local10, #8 wc
16694     54 00 90 3D |  if_ae	jmp	#LR__1688
16698     56 00 00 FF 
1669c     F0 E4 05 F1 | 	add	objptr, ##44272
166a0     F2 12 02 FB | 	rdlong	arg01, objptr
166a4     56 00 00 FF 
166a8     F0 E4 85 F1 | 	sub	objptr, ##44272
166ac     47 01 00 FF 
166b0     34 24 06 F6 | 	mov	local04, ##@LR__4668
166b4     12 15 02 F6 | 	mov	arg02, local04
166b8     18 27 B0 FD | 	call	#__system___string_concat
166bc     56 00 00 FF 
166c0     F0 E4 05 F1 | 	add	objptr, ##44272
166c4     F2 FA 61 FC | 	wrlong	result1, objptr
166c8     56 00 00 FF 
166cc     F0 E4 85 F1 | 	sub	objptr, ##44272
166d0     47 01 00 FF 
166d4     36 12 06 F6 | 	mov	arg01, ##@LR__4669
166d8     74 16 B0 FD | 	call	#_hg010b_spin2_write
166dc     18 23 02 F6 | 	mov	local03, local10
166e0     01 22 06 F1 | 	add	local03, #1
166e4     11 31 02 F6 | 	mov	local10, local03
166e8     A4 FF 9F FD | 	jmp	#LR__1687
166ec                 | LR__1688
166ec                 | LR__1689
166ec                 | '  
166ec                 | '   'backspace
166ec                 | '   if (key3 and 255) = 42 then 
166ec     7A 00 00 FF 
166f0     70 E5 05 F1 | 	add	objptr, ##62832
166f4     F2 20 02 FB | 	rdlong	local02, objptr
166f8     7A 00 00 FF 
166fc     70 E5 85 F1 | 	sub	objptr, ##62832
16700     10 21 E2 F8 | 	getbyte	local02, local02, #0
16704     2A 20 0E F2 | 	cmp	local02, #42 wz
16708     D4 00 90 5D |  if_ne	jmp	#LR__1694
1670c                 | '       if v.cursor_x>4 then 
1670c     38 E4 05 F1 | 	add	objptr, #56
16710     F2 20 E2 FA | 	rdword	local02, objptr
16714     38 E4 85 F1 | 	sub	objptr, #56
16718     05 20 16 F2 | 	cmp	local02, #5 wc
1671c     9C 00 90 CD |  if_b	jmp	#LR__1692
16720     56 00 00 FF 
16724     F0 E4 05 F1 | 	add	objptr, ##44272
16728     F2 26 02 FB | 	rdlong	local05, objptr
1672c     56 00 00 FF 
16730     F0 E4 85 F1 | 	sub	objptr, ##44272
16734     13 13 02 F6 | 	mov	arg01, local05
16738     09 33 02 F6 | 	mov	local11, arg01
1673c     97 06 48 FB | 	callpa	#(@LR__1691-@LR__1690)>>2,fcache_load_ptr_
16740                 | LR__1690
16740     19 FB C9 FA | 	rdbyte	result1, local11 wz
16744     01 32 06 51 |  if_ne	add	local11, #1
16748     F4 FF 9F 5D |  if_ne	jmp	#LR__1690
1674c                 | LR__1691
1674c     09 33 82 F1 | 	sub	local11, arg01
16750     19 15 02 F6 | 	mov	arg02, local11
16754     01 14 86 F1 | 	sub	arg02, #1
16758     13 13 02 F6 | 	mov	arg01, local05
1675c     28 46 B0 FD | 	call	#__system__Left_S
16760     56 00 00 FF 
16764     F0 E4 05 F1 | 	add	objptr, ##44272
16768     F2 FA 61 FC | 	wrlong	result1, objptr
1676c     56 00 00 FF 
16770     B8 E4 85 F1 | 	sub	objptr, ##44216
16774     F2 12 E2 FA | 	rdword	arg01, objptr
16778     02 12 86 F1 | 	sub	arg01, #2
1677c     02 E4 05 F1 | 	add	objptr, #2
16780     F2 14 C2 FA | 	rdbyte	arg02, objptr
16784     3A E4 85 F1 | 	sub	objptr, #58
16788     60 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1678c     20 12 06 F6 | 	mov	arg01, #32
16790     A0 13 B0 FD | 	call	#_hg010b_spin2_putchar
16794     38 E4 05 F1 | 	add	objptr, #56
16798     F2 12 E2 FA | 	rdword	arg01, objptr
1679c     02 12 86 F1 | 	sub	arg01, #2
167a0     02 E4 05 F1 | 	add	objptr, #2
167a4     F2 24 C2 FA | 	rdbyte	local04, objptr
167a8     3A E4 85 F1 | 	sub	objptr, #58
167ac     12 23 E2 F8 | 	getbyte	local03, local04, #0
167b0     11 15 02 F6 | 	mov	arg02, local03
167b4     34 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
167b8     24 00 90 FD | 	jmp	#LR__1693
167bc                 | LR__1692
167bc     47 01 00 FF 
167c0     38 20 06 F6 | 	mov	local02, ##@LR__4670
167c4     56 00 00 FF 
167c8     F0 E4 05 F1 | 	add	objptr, ##44272
167cc     F2 20 62 FC | 	wrlong	local02, objptr
167d0     56 00 00 FF 
167d4     B8 E4 85 F1 | 	sub	objptr, ##44216
167d8     F2 08 58 FC | 	wrword	#4, objptr
167dc     38 E4 85 F1 | 	sub	objptr, #56
167e0                 | LR__1693
167e0                 | LR__1694
167e0                 | '    
167e0                 | '  ' To do: arrows and DEL; use textscreen array to implement fullscreen editing
167e0                 | '  
167e0                 | '   if key4=key_enter then 
167e0     7A 00 00 FF 
167e4     78 E5 05 F1 | 	add	objptr, ##62840
167e8     F2 28 02 FB | 	rdlong	local06, objptr
167ec     7A 00 00 FF 
167f0     78 E5 85 F1 | 	sub	objptr, ##62840
167f4     8D 28 0E F2 | 	cmp	local06, #141 wz
167f8     50 00 90 5D |  if_ne	jmp	#LR__1695
167fc     B0 16 B0 FD | 	call	#_hg010b_spin2_crlf
16800     18 A2 BE FD | 	call	#_interpret
16804     47 01 00 FF 
16808     39 20 06 F6 | 	mov	local02, ##@LR__4671
1680c     56 00 00 FF 
16810     F0 E4 05 F1 | 	add	objptr, ##44272
16814     F2 20 62 FC | 	wrlong	local02, objptr
16818     1A FA 61 FD | 	getct	result1
1681c     24 00 00 FF 
16820     90 E4 05 F1 | 	add	objptr, ##18576
16824     F2 24 02 FB | 	rdlong	local04, objptr
16828     12 23 02 F6 | 	mov	local03, local04
1682c     11 FB 81 F1 | 	sub	result1, local03
16830     F2 FA 61 FC | 	wrlong	result1, objptr
16834     14 E4 85 F1 | 	sub	objptr, #20
16838     F2 00 68 FC | 	wrlong	#0, objptr
1683c     08 E4 05 F1 | 	add	objptr, #8
16840     F2 00 68 FC | 	wrlong	#0, objptr
16844     7A 00 00 FF 
16848     74 E5 85 F1 | 	sub	objptr, ##62836
1684c                 | LR__1695
1684c     7A 00 00 FF 
16850     70 E5 05 F1 | 	add	objptr, ##62832
16854     F2 00 68 FC | 	wrlong	#0, objptr
16858     7A 00 00 FF 
1685c     70 E5 85 F1 | 	sub	objptr, ##62832
16860     98 F6 9F FD | 	jmp	#LR__1670
16864     A7 F0 03 F6 | 	mov	ptra, fp
16868     B2 00 A0 FD | 	call	#popregs_
1686c                 | _program_ret
1686c     2D 00 64 FD | 	ret
16870                 | 
16870                 | ' '' this is not a main program.
16870                 | ' 
16870                 | ' '****************************************************************************************************************
16870                 | ' '                                                                                                             	*
16870                 | ' 'Start the driver with graphics mode 'mode' at pins 'base'                            		rev 20220320 	*
16870                 | ' '                                                                                                            	*
16870                 | ' ' mode - mode #, see below											*
16870                 | ' ' base - HDMI base pin												*
16870                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
16870                 | ' '														*
16870                 | ' '' mode number: :  %p_tn_bb_cc_vv_hh										*
16870                 | ' '' set bit #15 for custom timings														*
16870                 | ' '' p - 1 - psram, 0 - hub											*
16870                 | ' '' t - 1 - graphics, 0 - text											*
16870                 | ' '' n - 1 - 60 Hz,  0 - 50 Hz 											*
16870                 | ' '' hh - h.zoom, vv-v.zoom, cc-color depth if graphic, unused in text,						*
16870                 | ' '' bb - borders, 00-wide, 01 medium, 10 no border, 11 no border, extended resolution (1024x576/896x496)		*
16870                 | ' '														*
16870                 | ' '****************************************************************************************************************
16870                 | ' 
16870                 | ' pub start(base,mb):result |i
16870                 | _hg010b_spin2_start
16870                 | ' 
16870                 | ' '--------------------------- initialize pointers and variables
16870                 | ' 
16870                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
16870     30 E4 05 F1 | 	add	objptr, #48
16874     F2 FA 01 F6 | 	mov	result1, objptr
16878     28 E4 85 F1 | 	sub	objptr, #40
1687c     F2 FA 61 FC | 	wrlong	result1, objptr
16880                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
16880                 | ' hdmibase:=base							' HDMI base pin, 8*n
16880     18 E4 05 F1 | 	add	objptr, #24
16884     F2 12 62 FC | 	wrlong	arg01, objptr
16888                 | ' mailbox_ptr:=mb		
16888     04 E4 05 F1 | 	add	objptr, #4
1688c     F2 14 62 FC | 	wrlong	arg02, objptr
16890                 | ' mailbox0:=mb				' PSRAM mailbox pointer
16890     C1 E5 05 F1 | 	add	objptr, #449
16894     F2 14 62 FC | 	wrlong	arg02, objptr
16898                 | ' sprite_ptr:=@spr1ptr
16898     D8 E4 85 F1 | 	sub	objptr, #216
1689c     F2 FA 01 F6 | 	mov	result1, objptr
168a0     E5 E4 85 F1 | 	sub	objptr, #229
168a4     F2 FA 61 FC | 	wrlong	result1, objptr
168a8                 | ' 
168a8                 | ' 		'
168a8                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
168a8     E5 E4 05 F1 | 	add	objptr, #229
168ac     F2 FA 01 FB | 	rdlong	result1, objptr
168b0     D0 FA 05 F1 | 	add	result1, #208
168b4     FD 10 58 FC | 	wrword	#8, result1
168b8                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
168b8     F2 16 02 FB | 	rdlong	arg03, objptr
168bc     D2 16 06 F1 | 	add	arg03, #210
168c0     0B 21 58 FC | 	wrword	#16, arg03
168c4                 | ' leading_spaces:=0				'
168c4     A5 E5 05 F1 | 	add	objptr, #421
168c8     F2 00 68 FC | 	wrlong	#0, objptr
168cc                 | ' 
168cc                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
168cc     99 E4 85 F1 | 	sub	objptr, #153
168d0     00 00 A0 FF 
168d4     F2 0E 68 FC | 	wrlong	##1073741831, objptr
168d8                 | ' emptydl[1]:=0
168d8     04 E4 05 F1 | 	add	objptr, #4
168dc     F2 00 68 FC | 	wrlong	#0, objptr
168e0                 | ' 
168e0                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
168e0                 | ' 
168e0                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
168e0     28 E5 85 F1 | 	sub	objptr, #296
168e4     F2 02 68 FC | 	wrlong	#1, objptr
168e8                 | ' if s_debug<>0
168e8                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
168e8     20 00 80 FF 
168ec     F2 00 68 FC | 	wrlong	##16384, objptr
168f0     F5 E4 85 F1 | 	sub	objptr, #245
168f4                 | ' setmode()							' set the mode, see below
168f4     A4 01 B0 FD | 	call	#_hg010b_spin2_setmode
168f8                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
168f8     45 E4 05 F1 | 	add	objptr, #69
168fc     F2 FA 01 F6 | 	mov	result1, objptr
16900     35 E4 85 F1 | 	sub	objptr, #53
16904     F2 FA 61 FC | 	wrlong	result1, objptr
16908                 | ' cursor_ptr:=@cursor_x						
16908     28 E4 05 F1 | 	add	objptr, #40
1690c     F2 16 02 F6 | 	mov	arg03, objptr
16910     2C E4 85 F1 | 	sub	objptr, #44
16914     F2 16 62 FC | 	wrlong	arg03, objptr
16918                 | ' fontnum:=0  							' start with a PC type font 
16918     55 E4 05 F1 | 	add	objptr, #85
1691c     F2 00 68 FC | 	wrlong	#0, objptr
16920                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
16920     1C E4 05 F1 | 	add	objptr, #28
16924     F2 12 02 F6 | 	mov	arg01, objptr
16928     7D E4 85 F1 | 	sub	objptr, #125
1692c     10 00 00 FF 
16930     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
16934     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
16938     10 00 00 FF 
1693c     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
16940     10 16 06 F6 | 	mov	arg03, #16
16944     50 23 B0 FD | 	call	#__system____builtin_memmove
16948                 | ' leading_spaces:=0
16948     01 00 00 FF 
1694c     B2 E4 05 F1 | 	add	objptr, ##690
16950     F2 00 68 FC | 	wrlong	#0, objptr
16954     01 00 00 FF 
16958     B2 E4 85 F1 | 	sub	objptr, ##690
1695c                 | ' '---------------------------- initialize a cursor (MSDOS type)
1695c                 | ' 
1695c                 | ' initcursor(154)
1695c     9A 12 06 F6 | 	mov	arg01, #154
16960     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
16964                 | ' 
16964                 | ' '---------------------------- start the cog
16964                 | ' 
16964                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
16964     10 00 00 FF 
16968     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
1696c     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
16970     10 00 00 FF 
16974     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
16978     10 E4 05 F1 | 	add	objptr, #16
1697c     10 FA 05 F6 | 	mov	result1, #16
16980     28 E4 61 FD | 	setq	objptr
16984     0A FB F1 FC | 	coginit	result1, arg02 wc
16988     01 FA 65 C6 |  if_b	neg	result1, #1
1698c     1C E4 05 F1 | 	add	objptr, #28
16990     F2 FA 61 FC | 	wrlong	result1, objptr
16994     2C E4 85 F1 | 	sub	objptr, #44
16998                 | ' waitms(40)							' wait for stabilize
16998     28 12 06 F6 | 	mov	arg01, #40
1699c     CC 26 B0 FD | 	call	#__system___waitms
169a0                 | ' return cog							' return the driver's cog #
169a0     2C E4 05 F1 | 	add	objptr, #44
169a4     F2 FA 01 FB | 	rdlong	result1, objptr
169a8     2C E4 85 F1 | 	sub	objptr, #44
169ac                 | _hg010b_spin2_start_ret
169ac     2D 00 64 FD | 	ret
169b0                 | 
169b0                 | ' 
169b0                 | ' 
169b0                 | ' '**************************************************************************************************************** 
169b0                 | ' '                                                                                                             	*
169b0                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
169b0                 | ' '  Mode number - see start() above or bits below								*
169b0                 | ' '                                                                                                             	*
169b0                 | ' '****************************************************************************************************************
169b0                 | ' 
169b0                 | ' '---------------------------- initialize a cursor (MSDOS type)
169b0                 | ' pub initcursor(color) |i
169b0                 | _hg010b_spin2_initcursor
169b0     03 4A 05 F6 | 	mov	COUNT_, #3
169b4     A8 00 A0 FD | 	call	#pushregs_
169b8     09 1F 02 F6 | 	mov	local01, arg01
169bc                 | ' 
169bc                 | ' cursor_x:=0							' place the cursor at 0:0
169bc     38 E4 05 F1 | 	add	objptr, #56
169c0     F2 00 58 FC | 	wrword	#0, objptr
169c4                 | ' cursor_y:=0
169c4     02 E4 05 F1 | 	add	objptr, #2
169c8     F2 00 48 FC | 	wrbyte	#0, objptr
169cc                 | ' repeat i from 0 to 111
169cc     00 20 06 F6 | 	mov	local02, #0
169d0     F8 E5 05 F1 | 	add	objptr, #504
169d4     97 1A 48 FB | 	callpa	#(@LR__1702-@LR__1700)>>2,fcache_load_ptr_
169d8                 | LR__1700
169d8                 | '   cursor[i]:=0
169d8     10 23 02 F6 | 	mov	local03, local02
169dc     F2 22 02 F1 | 	add	local03, objptr
169e0     11 01 48 FC | 	wrbyte	#0, local03
169e4     01 20 06 F1 | 	add	local02, #1
169e8     70 20 56 F2 | 	cmps	local02, #112 wc
169ec     E8 FF 9F CD |  if_b	jmp	#LR__1700
169f0                 | ' repeat i from 112 to 127
169f0     70 20 06 F6 | 	mov	local02, #112
169f4                 | LR__1701
169f4                 | '   cursor[i]:=color  
169f4     10 23 02 F6 | 	mov	local03, local02
169f8     F2 22 02 F1 | 	add	local03, objptr
169fc     11 1F 42 FC | 	wrbyte	local01, local03
16a00     01 20 06 F1 | 	add	local02, #1
16a04     80 20 16 F2 | 	cmp	local02, #128 wc
16a08     E8 FF 9F CD |  if_b	jmp	#LR__1701
16a0c                 | LR__1702
16a0c                 | ' 'repeat i from 0 to 127
16a0c                 | ' '  if ((i/8)//2)
16a0c                 | ' '    cursor[i]:=15
16a0c                 | ' '  else
16a0c                 | ' '    cursor[i]:=0
16a0c                 | ' '  if i>=120    
16a0c                 | ' '    cursor[i]:=40
16a0c                 | ' setspriteptr(17,@cursor)
16a0c     F2 14 02 F6 | 	mov	arg02, objptr
16a10     01 00 00 FF 
16a14     32 E4 85 F1 | 	sub	objptr, ##562
16a18     11 12 06 F6 | 	mov	arg01, #17
16a1c     48 03 B0 FD | 	call	#_hg010b_spin2_setspriteptr
16a20                 | ' setspritesize(17,8,16)
16a20     11 12 06 F6 | 	mov	arg01, #17
16a24     08 14 06 F6 | 	mov	arg02, #8
16a28     10 16 06 F6 | 	mov	arg03, #16
16a2c     AC 03 B0 FD | 	call	#_hg010b_spin2_setspritesize
16a30                 | ' setspritepos(17,0,0)
16a30     11 12 06 F6 | 	mov	arg01, #17
16a34     00 14 06 F6 | 	mov	arg02, #0
16a38     00 16 06 F6 | 	mov	arg03, #0
16a3c     50 03 B0 FD | 	call	#_hg010b_spin2_setspritepos
16a40     A7 F0 03 F6 | 	mov	ptra, fp
16a44     B2 00 A0 FD | 	call	#popregs_
16a48                 | _hg010b_spin2_initcursor_ret
16a48     2D 00 64 FD | 	ret
16a4c                 | 
16a4c                 | ' 
16a4c                 | '  
16a4c                 | ' pub setcursorcolor(color) |i
16a4c                 | _hg010b_spin2_setcursorcolor
16a4c                 | ' 
16a4c                 | ' 
16a4c                 | ' repeat i from 0 to 111
16a4c     00 00 06 F6 | 	mov	_var01, #0
16a50     01 00 00 FF 
16a54     32 E4 05 F1 | 	add	objptr, ##562
16a58     97 1A 48 FB | 	callpa	#(@LR__1712-@LR__1710)>>2,fcache_load_ptr_
16a5c                 | LR__1710
16a5c                 | '   cursor[i]:=0
16a5c     00 03 02 F6 | 	mov	_var02, _var01
16a60     F2 02 02 F1 | 	add	_var02, objptr
16a64     01 01 48 FC | 	wrbyte	#0, _var02
16a68     01 00 06 F1 | 	add	_var01, #1
16a6c     70 00 56 F2 | 	cmps	_var01, #112 wc
16a70     E8 FF 9F CD |  if_b	jmp	#LR__1710
16a74                 | ' repeat i from 112 to 127
16a74     70 00 06 F6 | 	mov	_var01, #112
16a78                 | LR__1711
16a78                 | '   cursor[i]:=color  
16a78     00 03 02 F6 | 	mov	_var02, _var01
16a7c     F2 02 02 F1 | 	add	_var02, objptr
16a80     01 13 42 FC | 	wrbyte	arg01, _var02
16a84     01 00 06 F1 | 	add	_var01, #1
16a88     80 00 16 F2 | 	cmp	_var01, #128 wc
16a8c     E8 FF 9F CD |  if_b	jmp	#LR__1711
16a90                 | LR__1712
16a90     01 00 00 FF 
16a94     32 E4 85 F1 | 	sub	objptr, ##562
16a98                 | _hg010b_spin2_setcursorcolor_ret
16a98     2D 00 64 FD | 	ret
16a9c                 | 
16a9c                 | '  
16a9c                 | ' 
16a9c                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
16a9c                 | _hg010b_spin2_setmode
16a9c     02 4A 05 F6 | 	mov	COUNT_, #2
16aa0     A8 00 A0 FD | 	call	#pushregs_
16aa4                 | ' 
16aa4                 | ' 
16aa4                 | ' dl_ptr:=@emptydl[0]
16aa4     01 00 00 FF 
16aa8     19 E4 05 F1 | 	add	objptr, ##537
16aac     F2 64 02 F6 | 	mov	muldivb_, objptr
16ab0     FD E5 85 F1 | 	sub	objptr, #509
16ab4     F2 64 62 FC | 	wrlong	muldivb_, objptr
16ab8                 | ' 
16ab8                 | ' if cog>0 
16ab8     10 E4 05 F1 | 	add	objptr, #16
16abc     F2 64 02 FB | 	rdlong	muldivb_, objptr
16ac0     2C E4 85 F1 | 	sub	objptr, #44
16ac4     01 64 56 F2 | 	cmps	muldivb_, #1 wc
16ac8                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
16ac8     01 12 06 36 |  if_ae	mov	arg01, #1
16acc     54 0F B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
16ad0                 | ' xres:=1024
16ad0     01 00 00 FF 
16ad4     22 E4 05 F1 | 	add	objptr, ##546
16ad8     02 00 80 FF 
16adc     F2 00 68 FC | 	wrlong	##1024, objptr
16ae0                 | ' yres:=576  
16ae0     04 E4 05 F1 | 	add	objptr, #4
16ae4     01 00 80 FF 
16ae8     F2 80 68 FC | 	wrlong	##576, objptr
16aec                 | ' ppl:=(timings[3])
16aec     10 00 00 FF 
16af0     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
16af4     F7 64 02 FB | 	rdlong	muldivb_, ptr__hg010b_spin2_dat__
16af8     51 E5 85 F1 | 	sub	objptr, #337
16afc     F2 64 62 FC | 	wrlong	muldivb_, objptr
16b00                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
16b00     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
16b04     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
16b08     01 1E 66 F0 | 	shl	local01, #1
16b0c     80 E4 85 F1 | 	sub	objptr, #128
16b10     F2 1E 62 FC | 	wrlong	local01, objptr
16b14                 | ' cpl1:=cpl '' todo remove
16b14     04 E4 05 F1 | 	add	objptr, #4
16b18     F2 1E 62 FC | 	wrlong	local01, objptr
16b1c                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
16b1c     02 00 00 FF 
16b20     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
16b24     41 E4 85 F1 | 	sub	objptr, #65
16b28     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
16b2c                 | ' repeat i from 0 to 3
16b2c     00 20 06 F6 | 	mov	local02, #0
16b30     02 00 00 FF 
16b34     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
16b38     08 E4 05 F1 | 	add	objptr, #8
16b3c     97 20 48 FB | 	callpa	#(@LR__1721-@LR__1720)>>2,fcache_load_ptr_
16b40                 | LR__1720
16b40                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
16b40     10 1F 02 F6 | 	mov	local01, local02
16b44     02 1E 66 F0 | 	shl	local01, #2
16b48     F7 1E 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
16b4c     F2 64 02 FB | 	rdlong	muldivb_, objptr
16b50     11 64 66 F0 | 	shl	muldivb_, #17
16b54     0F 1F 02 FB | 	rdlong	local01, local01
16b58     32 1F 02 F1 | 	add	local01, muldivb_
16b5c     80 40 38 FF 
16b60     00 1E 06 F1 | 	add	local01, ##1887502336
16b64     10 65 02 F6 | 	mov	muldivb_, local02
16b68     02 64 66 F0 | 	shl	muldivb_, #2
16b6c     F7 64 02 F1 | 	add	muldivb_, ptr__hg010b_spin2_dat__
16b70     32 1F 62 FC | 	wrlong	local01, muldivb_
16b74     01 20 06 F1 | 	add	local02, #1
16b78     04 20 56 F2 | 	cmps	local02, #4 wc
16b7c     C0 FF 9F CD |  if_b	jmp	#LR__1720
16b80                 | LR__1721
16b80     20 E4 85 F1 | 	sub	objptr, #32
16b84                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
16b84     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
16b88     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
16b8c     14 1E 66 FC | 	wrlong	local01, #20
16b90                 | ' hubset(timings[10])
16b90     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
16b94     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
16b98     10 00 00 FF 
16b9c     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
16ba0     00 12 62 FD | 	hubset	arg01
16ba4                 | ' waitms(1)                                                   	' wait for stabilization
16ba4     01 12 06 F6 | 	mov	arg01, #1
16ba8     C0 24 B0 FD | 	call	#__system___waitms
16bac     10 00 00 FF 
16bb0     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
16bb4     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
16bb8     5D E4 05 F1 | 	add	objptr, #93
16bbc     F2 20 62 FC | 	wrlong	local02, objptr
16bc0     10 1F 52 F6 | 	abs	local01, local02 wc
16bc4     04 1E 46 F0 | 	shr	local01, #4
16bc8     0F 1F 82 F6 | 	negc	local01, local01
16bcc     9C E4 05 F1 | 	add	objptr, #156
16bd0     F2 1E 62 FC | 	wrlong	local01, objptr
16bd4     A4 E4 85 F1 | 	sub	objptr, #164
16bd8     F2 20 02 FB | 	rdlong	local02, objptr
16bdc     08 E4 05 F1 | 	add	objptr, #8
16be0     F2 1E 02 FB | 	rdlong	local01, objptr
16be4     0F 21 02 FD | 	qmul	local02, local01
16be8                 | ' lines:=timings[11]
16be8                 | ' t_lines:=lines/16
16be8                 | ' buflen:=cpl*lines						' framebuffer length in longs
16be8     29 E4 85 F1 | 	sub	objptr, #41
16bec                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
16bec     19 1E C6 F9 | 	decod	local01, #25
16bf0                 | ' mode_ptr:=@timings						' set pointers to timings
16bf0     2C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #44
16bf4                 | ' graphmode:=1024+512+192+48							' det global variable
16bf4                 | ' makedl(graphmode)							' make a DL for the mode
16bf4     03 00 00 FF 
16bf8     F0 12 06 F6 | 	mov	arg01, ##1776
16bfc     18 20 62 FD | 	getqx	local02
16c00     F2 20 62 FC | 	wrlong	local02, objptr
16c04     34 E4 85 F1 | 	sub	objptr, #52
16c08     02 20 66 F0 | 	shl	local02, #2
16c0c     10 1F 82 F1 | 	sub	local01, local02
16c10     F2 1E 62 FC | 	wrlong	local01, objptr
16c14     14 E4 05 F1 | 	add	objptr, #20
16c18     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
16c1c     79 E4 05 F1 | 	add	objptr, #121
16c20     03 00 80 FF 
16c24     F2 E0 69 FC | 	wrlong	##1776, objptr
16c28     8D E4 85 F1 | 	sub	objptr, #141
16c2c     10 00 00 FF 
16c30     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
16c34     AC 00 B0 FD | 	call	#_hg010b_spin2_makedl
16c38                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
16c38     F2 1E 02 FB | 	rdlong	local01, objptr
16c3c     D9 E4 05 F1 | 	add	objptr, #217
16c40     F2 1E 62 FC | 	wrlong	local01, objptr
16c44                 | ' s_font_ptr:=font_ptr
16c44     D5 E4 85 F1 | 	sub	objptr, #213
16c48     F2 1E 02 FB | 	rdlong	local01, objptr
16c4c     D9 E4 05 F1 | 	add	objptr, #217
16c50     F2 1E 62 FC | 	wrlong	local01, objptr
16c54                 | ' s_lines:=lines
16c54     80 E4 85 F1 | 	sub	objptr, #128
16c58     F2 1E 02 FB | 	rdlong	local01, objptr
16c5c     84 E4 05 F1 | 	add	objptr, #132
16c60     F2 1E 62 FC | 	wrlong	local01, objptr
16c64                 | ' s_buflen:=buflen
16c64     AD E4 85 F1 | 	sub	objptr, #173
16c68     F2 1E 02 FB | 	rdlong	local01, objptr
16c6c     B5 E4 05 F1 | 	add	objptr, #181
16c70     F2 1E 62 FC | 	wrlong	local01, objptr
16c74                 | ' s_cpl:=cpl
16c74     94 E4 85 F1 | 	sub	objptr, #148
16c78     F2 1E 02 FB | 	rdlong	local01, objptr
16c7c     90 E4 05 F1 | 	add	objptr, #144
16c80     F2 1E 62 FC | 	wrlong	local01, objptr
16c84                 | ' s_cpl1:=cpl
16c84     90 E4 85 F1 | 	sub	objptr, #144
16c88     F2 1E 02 FB | 	rdlong	local01, objptr
16c8c     98 E4 05 F1 | 	add	objptr, #152
16c90     F2 1E 62 FC | 	wrlong	local01, objptr
16c94                 | ' st_lines:=t_lines
16c94     0C E4 05 F1 | 	add	objptr, #12
16c98     F2 1E 02 FB | 	rdlong	local01, objptr
16c9c     04 E4 05 F1 | 	add	objptr, #4
16ca0     F2 1E 62 FC | 	wrlong	local01, objptr
16ca4                 | ' ppl:=ppl/xzoom  
16ca4     28 E4 85 F1 | 	sub	objptr, #40
16ca8     F2 62 02 FB | 	rdlong	muldiva_, objptr
16cac     2C E4 05 F1 | 	add	objptr, #44
16cb0     F2 64 02 FB | 	rdlong	muldivb_, objptr
16cb4     01 E5 85 F1 | 	sub	objptr, #257
16cb8     BA 00 A0 FD | 	call	#divide_
16cbc     D5 E4 05 F1 | 	add	objptr, #213
16cc0     F2 64 62 FC | 	wrlong	muldivb_, objptr
16cc4                 | ' s_ppl:=ppl
16cc4     1C E4 05 F1 | 	add	objptr, #28
16cc8     F2 64 62 FC | 	wrlong	muldivb_, objptr
16ccc     F1 E4 85 F1 | 	sub	objptr, #241
16cd0                 | ' waitms(20)							' wait 
16cd0     14 12 06 F6 | 	mov	arg01, #20
16cd4     94 23 B0 FD | 	call	#__system___waitms
16cd8     A7 F0 03 F6 | 	mov	ptra, fp
16cdc     B2 00 A0 FD | 	call	#popregs_
16ce0                 | _hg010b_spin2_setmode_ret
16ce0     2D 00 64 FD | 	ret
16ce4                 | 
16ce4                 | ' 
16ce4                 | ' 
16ce4                 | ' '****************************************************************************************************************
16ce4                 | ' '                                                                                                             	*
16ce4                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
16ce4                 | ' '                                                                                                             	*
16ce4                 | ' '****************************************************************************************************************
16ce4                 | ' 
16ce4                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
16ce4                 | _hg010b_spin2_makedl
16ce4                 | ' 
16ce4                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
16ce4                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
16ce4                 | ' repeat i from 0 to 11                                                           ' clear DL
16ce4     00 00 06 F6 | 	mov	_var01, #0
16ce8     E9 E5 05 F1 | 	add	objptr, #489
16cec     97 0E 48 FB | 	callpa	#(@LR__1731-@LR__1730)>>2,fcache_load_ptr_
16cf0                 | LR__1730
16cf0                 | '   displaylist[i]:=0 
16cf0     00 03 02 F6 | 	mov	_var02, _var01
16cf4     02 02 66 F0 | 	shl	_var02, #2
16cf8     F2 02 02 F1 | 	add	_var02, objptr
16cfc     01 01 68 FC | 	wrlong	#0, _var02
16d00     01 00 06 F1 | 	add	_var01, #1
16d04     0C 00 56 F2 | 	cmps	_var01, #12 wc
16d08     E4 FF 9F CD |  if_b	jmp	#LR__1730
16d0c                 | LR__1731
16d0c                 | '                         ' 
16d0c                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
16d0c     8C E5 85 F1 | 	sub	objptr, #396
16d10     F2 02 02 FB | 	rdlong	_var02, objptr
16d14     14 02 66 F0 | 	shl	_var02, #20
16d18     01 02 06 F1 | 	add	_var02, #1
16d1c     04 E4 85 F1 | 	sub	objptr, #4
16d20     F2 00 02 FB | 	rdlong	_var01, objptr
16d24     02 00 66 F0 | 	shl	_var01, #2
16d28     04 00 66 F0 | 	shl	_var01, #4
16d2c     00 03 02 F1 | 	add	_var02, _var01
16d30     90 E5 05 F1 | 	add	objptr, #400
16d34     F2 02 62 FC | 	wrlong	_var02, objptr
16d38     E9 E5 85 F1 | 	sub	objptr, #489
16d3c                 | ' displaylist[1]:=buf_ptr<<4+%10  
16d3c     F2 02 02 FB | 	rdlong	_var02, objptr
16d40     04 02 66 F0 | 	shl	_var02, #4
16d44     02 02 06 F1 | 	add	_var02, #2
16d48     ED E5 05 F1 | 	add	objptr, #493
16d4c     F2 02 62 FC | 	wrlong	_var02, objptr
16d50                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
16d50     04 E4 85 F1 | 	sub	objptr, #4
16d54     F2 02 02 F6 | 	mov	_var02, objptr
16d58     CD E5 85 F1 | 	sub	objptr, #461
16d5c     F2 02 62 FC | 	wrlong	_var02, objptr
16d60     1C E4 85 F1 | 	sub	objptr, #28
16d64                 | _hg010b_spin2_makedl_ret
16d64     2D 00 64 FD | 	ret
16d68                 | 
16d68                 | ' 
16d68                 | ' 
16d68                 | ' '****************************************************************************************************************
16d68                 | ' '                                                                        					*
16d68                 | ' '  Graphic primitives                                                    					*
16d68                 | ' '                                                                        					*
16d68                 | ' '****************************************************************************************************************
16d68                 | ' 
16d68                 | ' pub setspriteptr(num,ptr)
16d68                 | _hg010b_spin2_setspriteptr
16d68                 | ' long[@spr1ptr+12*num]:=ptr
16d68     0D E5 05 F1 | 	add	objptr, #269
16d6c     F2 00 02 F6 | 	mov	_var01, objptr
16d70     09 03 02 F6 | 	mov	_var02, arg01
16d74     01 02 66 F0 | 	shl	_var02, #1
16d78     09 03 02 F1 | 	add	_var02, arg01
16d7c     02 02 66 F0 | 	shl	_var02, #2
16d80     01 01 02 F1 | 	add	_var01, _var02
16d84     00 15 62 FC | 	wrlong	arg02, _var01
16d88     0D E5 85 F1 | 	sub	objptr, #269
16d8c                 | _hg010b_spin2_setspriteptr_ret
16d8c     2D 00 64 FD | 	ret
16d90                 | 
16d90                 | ' 
16d90                 | ' pub setspritepos(num,x,y)
16d90                 | _hg010b_spin2_setspritepos
16d90                 | ' word[@spr1ptr+12*num+4]:=x
16d90     0D E5 05 F1 | 	add	objptr, #269
16d94     F2 00 02 F6 | 	mov	_var01, objptr
16d98     09 03 02 F6 | 	mov	_var02, arg01
16d9c     01 02 66 F0 | 	shl	_var02, #1
16da0     09 03 02 F1 | 	add	_var02, arg01
16da4     02 02 66 F0 | 	shl	_var02, #2
16da8     01 01 02 F1 | 	add	_var01, _var02
16dac     04 00 06 F1 | 	add	_var01, #4
16db0     00 15 52 FC | 	wrword	arg02, _var01
16db4                 | ' word[@spr1ptr+12*num+6]:=y
16db4     F2 00 02 F6 | 	mov	_var01, objptr
16db8     09 03 02 F6 | 	mov	_var02, arg01
16dbc     01 02 66 F0 | 	shl	_var02, #1
16dc0     09 03 02 F1 | 	add	_var02, arg01
16dc4     02 02 66 F0 | 	shl	_var02, #2
16dc8     01 01 02 F1 | 	add	_var01, _var02
16dcc     06 00 06 F1 | 	add	_var01, #6
16dd0     00 17 52 FC | 	wrword	arg03, _var01
16dd4     0D E5 85 F1 | 	sub	objptr, #269
16dd8                 | _hg010b_spin2_setspritepos_ret
16dd8     2D 00 64 FD | 	ret
16ddc                 | 
16ddc                 | ' 
16ddc                 | ' pub setspritesize(num,w,h)
16ddc                 | _hg010b_spin2_setspritesize
16ddc                 | ' word[@spr1ptr+12*num+8]:=w
16ddc     0D E5 05 F1 | 	add	objptr, #269
16de0     F2 00 02 F6 | 	mov	_var01, objptr
16de4     09 03 02 F6 | 	mov	_var02, arg01
16de8     01 02 66 F0 | 	shl	_var02, #1
16dec     09 03 02 F1 | 	add	_var02, arg01
16df0     02 02 66 F0 | 	shl	_var02, #2
16df4     01 01 02 F1 | 	add	_var01, _var02
16df8     08 00 06 F1 | 	add	_var01, #8
16dfc     00 15 52 FC | 	wrword	arg02, _var01
16e00                 | ' word[@spr1ptr+12*num+10]:=h
16e00     F2 00 02 F6 | 	mov	_var01, objptr
16e04     09 03 02 F6 | 	mov	_var02, arg01
16e08     01 02 66 F0 | 	shl	_var02, #1
16e0c     09 03 02 F1 | 	add	_var02, arg01
16e10     02 02 66 F0 | 	shl	_var02, #2
16e14     01 01 02 F1 | 	add	_var01, _var02
16e18     0A 00 06 F1 | 	add	_var01, #10
16e1c     00 17 52 FC | 	wrword	arg03, _var01
16e20     0D E5 85 F1 | 	sub	objptr, #269
16e24                 | _hg010b_spin2_setspritesize_ret
16e24     2D 00 64 FD | 	ret
16e28                 | 
16e28                 | ' 
16e28                 | ' 
16e28                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
16e28                 | ' 
16e28                 | ' 
16e28                 | ' pub putpixel(x,y,c)
16e28                 | _hg010b_spin2_putpixel
16e28     04 4A 05 F6 | 	mov	COUNT_, #4
16e2c     A8 00 A0 FD | 	call	#pushregs_
16e30     09 1F 02 F6 | 	mov	local01, arg01
16e34                 | ' 
16e34                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
16e34     00 20 06 F6 | 	mov	local02, #0
16e38     00 1E 56 F2 | 	cmps	local01, #0 wc
16e3c     01 20 66 36 |  if_ae	neg	local02, #1
16e40     E5 E4 05 F1 | 	add	objptr, #229
16e44     F2 1A 02 FB | 	rdlong	arg05, objptr
16e48     02 1A 66 F0 | 	shl	arg05, #2
16e4c     0D 1F 52 F2 | 	cmps	local01, arg05 wc
16e50     11 23 A2 F1 | 	subx	local03, local03
16e54     11 21 02 F5 | 	and	local02, local03
16e58     00 22 06 F6 | 	mov	local03, #0
16e5c     00 14 56 F2 | 	cmps	arg02, #0 wc
16e60     01 22 66 36 |  if_ae	neg	local03, #1
16e64     11 21 02 F5 | 	and	local02, local03
16e68     04 E4 85 F1 | 	sub	objptr, #4
16e6c     F2 22 02 FB | 	rdlong	local03, objptr
16e70     E1 E4 85 F1 | 	sub	objptr, #225
16e74     11 15 52 F2 | 	cmps	arg02, local03 wc
16e78     12 25 A2 F1 | 	subx	local04, local04
16e7c     12 21 CA F7 | 	test	local02, local04 wz
16e80     48 00 90 AD |  if_e	jmp	#LR__1740
16e84     D9 E4 05 F1 | 	add	objptr, #217
16e88     F2 12 02 FB | 	rdlong	arg01, objptr
16e8c     14 E4 05 F1 | 	add	objptr, #20
16e90     F2 24 02 FB | 	rdlong	local04, objptr
16e94     02 24 66 F0 | 	shl	local04, #2
16e98     0A 25 02 FD | 	qmul	local04, arg02
16e9c                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
16e9c     0B 15 02 F6 | 	mov	arg02, arg03
16ea0     01 16 06 F6 | 	mov	arg03, #1
16ea4     00 18 06 F6 | 	mov	arg04, #0
16ea8     01 1A 06 F6 | 	mov	arg05, #1
16eac     0A 00 00 FF 
16eb0     D3 E5 05 F1 | 	add	objptr, ##5587
16eb4     18 24 62 FD | 	getqx	local04
16eb8     0F 25 02 F1 | 	add	local04, local01
16ebc     12 13 02 F1 | 	add	arg01, local04
16ec0     FC 14 B0 FD | 	call	#_psram_spin2_fill
16ec4     0B 00 00 FF 
16ec8     C0 E4 85 F1 | 	sub	objptr, ##5824
16ecc                 | LR__1740
16ecc     A7 F0 03 F6 | 	mov	ptra, fp
16ed0     B2 00 A0 FD | 	call	#popregs_
16ed4                 | _hg010b_spin2_putpixel_ret
16ed4     2D 00 64 FD | 	ret
16ed8                 | 
16ed8                 | ' 
16ed8                 | ' pub putpixel2(x,y,c)
16ed8                 | _hg010b_spin2_putpixel2
16ed8     02 4A 05 F6 | 	mov	COUNT_, #2
16edc     A8 00 A0 FD | 	call	#pushregs_
16ee0     D9 E4 05 F1 | 	add	objptr, #217
16ee4     F2 1E 02 FB | 	rdlong	local01, objptr
16ee8     14 E4 05 F1 | 	add	objptr, #20
16eec     F2 1A 02 FB | 	rdlong	arg05, objptr
16ef0     02 1A 66 F0 | 	shl	arg05, #2
16ef4     0A 1B 02 FD | 	qmul	arg05, arg02
16ef8                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
16ef8     0B 15 02 F6 | 	mov	arg02, arg03
16efc     01 16 06 F6 | 	mov	arg03, #1
16f00     00 18 06 F6 | 	mov	arg04, #0
16f04     01 1A 06 F6 | 	mov	arg05, #1
16f08     0A 00 00 FF 
16f0c     D3 E5 05 F1 | 	add	objptr, ##5587
16f10     18 20 62 FD | 	getqx	local02
16f14     09 21 02 F1 | 	add	local02, arg01
16f18     10 1F 02 F1 | 	add	local01, local02
16f1c     0F 13 02 F6 | 	mov	arg01, local01
16f20     9C 14 B0 FD | 	call	#_psram_spin2_fill
16f24     0B 00 00 FF 
16f28     C0 E4 85 F1 | 	sub	objptr, ##5824
16f2c     A7 F0 03 F6 | 	mov	ptra, fp
16f30     B2 00 A0 FD | 	call	#popregs_
16f34                 | _hg010b_spin2_putpixel2_ret
16f34     2D 00 64 FD | 	ret
16f38                 | 
16f38                 | ' 
16f38                 | ' pub getpixel2(x,y): c 
16f38                 | _hg010b_spin2_getpixel2
16f38     02 4A 05 F6 | 	mov	COUNT_, #2
16f3c     A8 00 A0 FD | 	call	#pushregs_
16f40     0C F0 07 F1 | 	add	ptra, #12
16f44     04 4E 05 F1 | 	add	fp, #4
16f48     A7 12 62 FC | 	wrlong	arg01, fp
16f4c     04 4E 05 F1 | 	add	fp, #4
16f50     A7 14 62 FC | 	wrlong	arg02, fp
16f54     08 4E 85 F1 | 	sub	fp, #8
16f58     A7 00 68 FC | 	wrlong	#0, fp
16f5c     A7 12 02 F6 | 	mov	arg01, fp
16f60     D9 E4 05 F1 | 	add	objptr, #217
16f64     F2 14 02 FB | 	rdlong	arg02, objptr
16f68     14 E4 05 F1 | 	add	objptr, #20
16f6c     F2 16 02 FB | 	rdlong	arg03, objptr
16f70     02 16 66 F0 | 	shl	arg03, #2
16f74     08 4E 05 F1 | 	add	fp, #8
16f78     A7 FA 01 FB | 	rdlong	result1, fp
16f7c     FD 16 02 FD | 	qmul	arg03, result1
16f80                 | ' 
16f80                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
16f80     04 4E 85 F1 | 	sub	fp, #4
16f84     A7 1E 02 FB | 	rdlong	local01, fp
16f88     04 4E 85 F1 | 	sub	fp, #4
16f8c     01 16 06 F6 | 	mov	arg03, #1
16f90     0A 00 00 FF 
16f94     D3 E5 05 F1 | 	add	objptr, ##5587
16f98     18 20 62 FD | 	getqx	local02
16f9c     0F 21 02 F1 | 	add	local02, local01
16fa0     10 15 02 F1 | 	add	arg02, local02
16fa4     E0 12 B0 FD | 	call	#_psram_spin2_read1
16fa8     0B 00 00 FF 
16fac     C0 E4 85 F1 | 	sub	objptr, ##5824
16fb0                 | ' return c
16fb0     A7 FA 01 FB | 	rdlong	result1, fp
16fb4     A7 F0 03 F6 | 	mov	ptra, fp
16fb8     B2 00 A0 FD | 	call	#popregs_
16fbc                 | _hg010b_spin2_getpixel2_ret
16fbc     2D 00 64 FD | 	ret
16fc0                 | 
16fc0                 | '   
16fc0                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
16fc0                 | ' 
16fc0                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
16fc0                 | _hg010b_spin2_fastline
16fc0     02 4A 05 F6 | 	mov	COUNT_, #2
16fc4     A8 00 A0 FD | 	call	#pushregs_
16fc8     09 1F 02 F6 | 	mov	local01, arg01
16fcc     0A 21 02 F6 | 	mov	local02, arg02
16fd0                 | ' 
16fd0                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
16fd0     00 16 56 F2 | 	cmps	arg03, #0 wc
16fd4     F4 00 90 CD |  if_b	jmp	#LR__1750
16fd8     01 00 00 FF 
16fdc     26 E4 05 F1 | 	add	objptr, ##550
16fe0     F2 1A 02 FB | 	rdlong	arg05, objptr
16fe4     01 00 00 FF 
16fe8     26 E4 85 F1 | 	sub	objptr, ##550
16fec     0D 17 52 F2 | 	cmps	arg03, arg05 wc
16ff0     D8 00 90 3D |  if_ae	jmp	#LR__1750
16ff4     00 1E 56 F2 | 	cmps	local01, #0 wc
16ff8     00 20 56 C2 |  if_b	cmps	local02, #0 wc
16ffc     CC 00 90 CD |  if_b	jmp	#LR__1750
17000     01 00 00 FF 
17004     22 E4 05 F1 | 	add	objptr, ##546
17008     F2 1A 02 FB | 	rdlong	arg05, objptr
1700c     01 00 00 FF 
17010     22 E4 85 F1 | 	sub	objptr, ##546
17014     0D 1F 5A F2 | 	cmps	local01, arg05 wcz
17018     01 00 00 1F 
1701c     22 E4 05 11 |  if_a	add	objptr, ##546
17020     F2 12 02 1B |  if_a	rdlong	arg01, objptr
17024     01 00 00 1F 
17028     22 E4 85 11 |  if_a	sub	objptr, ##546
1702c     09 21 5A 12 |  if_a	cmps	local02, arg01 wcz
17030                 | '   return
17030     98 00 90 1D |  if_a	jmp	#LR__1750
17034     10 1F 5A F2 | 	cmps	local01, local02 wcz
17038     0F 1B 02 16 |  if_a	mov	arg05, local01
1703c     10 1F 02 16 |  if_a	mov	local01, local02
17040     0D 21 02 16 |  if_a	mov	local02, arg05
17044     00 1E 56 F2 | 	cmps	local01, #0 wc
17048     00 1E 06 C6 |  if_b	mov	local01, #0
1704c     01 00 00 FF 
17050     22 E4 05 F1 | 	add	objptr, ##546
17054     F2 1A 02 FB | 	rdlong	arg05, objptr
17058     01 00 00 FF 
1705c     22 E4 85 F1 | 	sub	objptr, ##546
17060     0D 21 52 F2 | 	cmps	local02, arg05 wc
17064     01 00 00 3F 
17068     22 E4 05 31 |  if_ae	add	objptr, ##546
1706c     F2 20 02 3B |  if_ae	rdlong	local02, objptr
17070     01 00 00 3F 
17074     22 E4 85 31 |  if_ae	sub	objptr, ##546
17078     D9 E4 05 F1 | 	add	objptr, #217
1707c     F2 12 02 FB | 	rdlong	arg01, objptr
17080     14 E4 05 F1 | 	add	objptr, #20
17084     F2 1A 02 FB | 	rdlong	arg05, objptr
17088     02 1A 66 F0 | 	shl	arg05, #2
1708c     0B 1B 02 FD | 	qmul	arg05, arg03
17090                 | ' if x1>x2
17090                 | '   x1,x2:=x2,x1
17090                 | ' if x1<0 
17090                 | '   x1:=0
17090                 | ' if x2>=xres
17090                 | '   x2:=xres-1  
17090     01 20 86 31 |  if_ae	sub	local02, #1
17094                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
17094     01 16 06 F6 | 	mov	arg03, #1
17098     10 17 02 F1 | 	add	arg03, local02
1709c     0F 17 82 F1 | 	sub	arg03, local01
170a0     0C 15 02 F6 | 	mov	arg02, arg04
170a4     00 18 06 F6 | 	mov	arg04, #0
170a8     01 1A 06 F6 | 	mov	arg05, #1
170ac     0A 00 00 FF 
170b0     D3 E5 05 F1 | 	add	objptr, ##5587
170b4     18 20 62 FD | 	getqx	local02
170b8     0F 21 02 F1 | 	add	local02, local01
170bc     10 13 02 F1 | 	add	arg01, local02
170c0     FC 12 B0 FD | 	call	#_psram_spin2_fill
170c4     0B 00 00 FF 
170c8     C0 E4 85 F1 | 	sub	objptr, ##5824
170cc                 | LR__1750
170cc     A7 F0 03 F6 | 	mov	ptra, fp
170d0     B2 00 A0 FD | 	call	#popregs_
170d4                 | _hg010b_spin2_fastline_ret
170d4     2D 00 64 FD | 	ret
170d8                 | 
170d8                 | ' 
170d8                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
170d8                 | _hg010b_spin2_draw
170d8     0E 4A 05 F6 | 	mov	COUNT_, #14
170dc     A8 00 A0 FD | 	call	#pushregs_
170e0     09 1F 02 F6 | 	mov	local01, arg01
170e4     0A 21 02 F6 | 	mov	local02, arg02
170e8     0B 23 02 F6 | 	mov	local03, arg03
170ec     0C 25 02 F6 | 	mov	local04, arg04
170f0     0D 27 02 F6 | 	mov	local05, arg05
170f4                 | ' 
170f4                 | ' if (y1==y2)
170f4     12 21 0A F2 | 	cmp	local02, local04 wz
170f8     18 00 90 5D |  if_ne	jmp	#LR__1760
170fc                 | '   fastline(x1,x2,y1,c)
170fc     0F 13 02 F6 | 	mov	arg01, local01
17100     11 15 02 F6 | 	mov	arg02, local03
17104     10 17 02 F6 | 	mov	arg03, local02
17108     13 19 02 F6 | 	mov	arg04, local05
1710c     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
17110     F8 00 90 FD | 	jmp	#LR__1766
17114                 | LR__1760
17114                 | ' else  
17114                 | '   x:=x1
17114     0F 29 02 F6 | 	mov	local06, local01
17118                 | '   y:=y1
17118     10 2B 02 F6 | 	mov	local07, local02
1711c                 | ' 
1711c                 | '   if (x1<x2) 
1711c     11 1F 52 F2 | 	cmps	local01, local03 wc
17120                 | '     xi:=1
17120     01 2C 06 C6 |  if_b	mov	local08, #1
17124                 | '     dx:=x2-x1
17124     11 2F 02 C6 |  if_b	mov	local09, local03
17128     0F 2F 82 C1 |  if_b	sub	local09, local01
1712c                 | '   else
1712c                 | '     xi:=-1
1712c     01 2C 66 36 |  if_ae	neg	local08, #1
17130                 | '     dx:=x1-x2
17130     11 1F 82 31 |  if_ae	sub	local01, local03
17134     0F 2F 02 36 |  if_ae	mov	local09, local01
17138                 | '   
17138                 | '   if (y1<y2) 
17138     12 21 52 F2 | 	cmps	local02, local04 wc
1713c                 | '     yi:=1
1713c     01 30 06 C6 |  if_b	mov	local10, #1
17140                 | '     dy:=y2-y1
17140     12 33 02 C6 |  if_b	mov	local11, local04
17144     10 33 82 C1 |  if_b	sub	local11, local02
17148                 | '   else
17148                 | '     yi:=-1
17148     01 30 66 36 |  if_ae	neg	local10, #1
1714c                 | '     dy:=y1-y2
1714c     12 21 82 31 |  if_ae	sub	local02, local04
17150     10 33 02 36 |  if_ae	mov	local11, local02
17154                 | ' 
17154                 | '   putpixel(x,y,c)
17154     13 17 02 F6 | 	mov	arg03, local05
17158     14 13 02 F6 | 	mov	arg01, local06
1715c     15 15 02 F6 | 	mov	arg02, local07
17160     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
17164                 | ' 
17164                 | '   if (dx>dy)
17164     19 2F 5A F2 | 	cmps	local09, local11 wcz
17168     50 00 90 ED |  if_be	jmp	#LR__1762
1716c                 | '     ai:=(dy-dx)*2
1716c     19 35 02 F6 | 	mov	local12, local11
17170     17 35 82 F1 | 	sub	local12, local09
17174     01 34 66 F0 | 	shl	local12, #1
17178                 | '     bi:=dy*2
17178     01 32 66 F0 | 	shl	local11, #1
1717c     19 37 02 F6 | 	mov	local13, local11
17180                 | '     d:= bi-dx
17180     1B 39 02 F6 | 	mov	local14, local13
17184     17 39 82 F1 | 	sub	local14, local09
17188                 | '     repeat while (x<>x2) 
17188                 | LR__1761
17188     11 29 0A F2 | 	cmp	local06, local03 wz
1718c     7C 00 90 AD |  if_e	jmp	#LR__1765
17190                 | '       if (d>=0) 
17190     00 38 56 F2 | 	cmps	local14, #0 wc
17194                 | '         x+=xi
17194     16 29 02 31 |  if_ae	add	local06, local08
17198                 | '         y+=yi
17198     18 2B 02 31 |  if_ae	add	local07, local10
1719c                 | '         d+=ai
1719c     1A 39 02 31 |  if_ae	add	local14, local12
171a0                 | '       else
171a0                 | '         d+=bi
171a0     1B 39 02 C1 |  if_b	add	local14, local13
171a4                 | '         x+=xi
171a4     16 29 02 C1 |  if_b	add	local06, local08
171a8                 | '       putpixel(x,y,c)
171a8     14 13 02 F6 | 	mov	arg01, local06
171ac     15 15 02 F6 | 	mov	arg02, local07
171b0     13 17 02 F6 | 	mov	arg03, local05
171b4     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
171b8     CC FF 9F FD | 	jmp	#LR__1761
171bc                 | LR__1762
171bc                 | '   else
171bc                 | '     ai:=(dx-dy)*2
171bc     17 35 02 F6 | 	mov	local12, local09
171c0     19 35 82 F1 | 	sub	local12, local11
171c4     01 34 66 F0 | 	shl	local12, #1
171c8                 | '     bi:=dx*2
171c8     01 2E 66 F0 | 	shl	local09, #1
171cc     17 37 02 F6 | 	mov	local13, local09
171d0                 | '     d:=bi-dy
171d0     1B 39 02 F6 | 	mov	local14, local13
171d4     19 39 82 F1 | 	sub	local14, local11
171d8                 | '     repeat while (y<>y2)
171d8                 | LR__1763
171d8     12 2B 0A F2 | 	cmp	local07, local04 wz
171dc     2C 00 90 AD |  if_e	jmp	#LR__1764
171e0                 | '       if (d>=0)
171e0     00 38 56 F2 | 	cmps	local14, #0 wc
171e4                 | '         x+=xi
171e4     16 29 02 31 |  if_ae	add	local06, local08
171e8                 | '         y+=yi
171e8     18 2B 02 31 |  if_ae	add	local07, local10
171ec                 | '         d+=ai
171ec     1A 39 02 31 |  if_ae	add	local14, local12
171f0                 | '       else
171f0                 | '         d+=bi
171f0     1B 39 02 C1 |  if_b	add	local14, local13
171f4                 | '         y+=yi
171f4     18 2B 02 C1 |  if_b	add	local07, local10
171f8                 | '       putpixel(x, y,c)
171f8     14 13 02 F6 | 	mov	arg01, local06
171fc     15 15 02 F6 | 	mov	arg02, local07
17200     13 17 02 F6 | 	mov	arg03, local05
17204     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
17208     CC FF 9F FD | 	jmp	#LR__1763
1720c                 | LR__1764
1720c                 | LR__1765
1720c                 | LR__1766
1720c     A7 F0 03 F6 | 	mov	ptra, fp
17210     B2 00 A0 FD | 	call	#popregs_
17214                 | _hg010b_spin2_draw_ret
17214     2D 00 64 FD | 	ret
17218                 | 
17218                 | '  
17218                 | ' pub fillpush(val) 
17218                 | _hg010b_spin2_fillpush
17218                 | ' fillstack[fillptr]:=val
17218     0B 00 00 FF 
1721c     B6 E4 05 F1 | 	add	objptr, ##5814
17220     F2 00 02 FB | 	rdlong	_var01, objptr
17224     02 00 66 F0 | 	shl	_var01, #2
17228     0A 00 00 FF 
1722c     00 E4 85 F1 | 	sub	objptr, ##5120
17230     F2 00 02 F1 | 	add	_var01, objptr
17234     00 13 62 FC | 	wrlong	arg01, _var01
17238                 | ' fillptr+=1   
17238     0A 00 00 FF 
1723c     00 E4 05 F1 | 	add	objptr, ##5120
17240     F2 00 02 FB | 	rdlong	_var01, objptr
17244     01 00 06 F1 | 	add	_var01, #1
17248     F2 00 62 FC | 	wrlong	_var01, objptr
1724c     0B 00 00 FF 
17250     B6 E4 85 F1 | 	sub	objptr, ##5814
17254                 | _hg010b_spin2_fillpush_ret
17254     2D 00 64 FD | 	ret
17258                 | 
17258                 | ' 
17258                 | '     
17258                 | ' pub fillpop() : val
17258                 | _hg010b_spin2_fillpop
17258                 | ' 
17258                 | ' fillptr-=1
17258     0B 00 00 FF 
1725c     B6 E4 05 F1 | 	add	objptr, ##5814
17260     F2 FA 01 FB | 	rdlong	result1, objptr
17264     01 FA 85 F1 | 	sub	result1, #1
17268     F2 FA 61 FC | 	wrlong	result1, objptr
1726c                 | ' if fillptr<0
1726c     0B 00 00 FF 
17270     B6 E4 85 F1 | 	sub	objptr, ##5814
17274     00 FA 55 F2 | 	cmps	result1, #0 wc
17278                 | '   fillptr:=0
17278     0B 00 00 CF 
1727c     B6 E4 05 C1 |  if_b	add	objptr, ##5814
17280     F2 00 68 CC |  if_b	wrlong	#0, objptr
17284     0B 00 00 CF 
17288     B6 E4 85 C1 |  if_b	sub	objptr, ##5814
1728c                 | '   val:=-12345
1728c     E7 FF 7F CF 
17290     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
17294     28 00 90 CD |  if_b	jmp	#LR__1770
17298                 | ' else 
17298                 | '   val:=fillstack[fillptr]
17298     0B 00 00 FF 
1729c     B6 E4 05 F1 | 	add	objptr, ##5814
172a0     F2 00 02 FB | 	rdlong	_var01, objptr
172a4     02 00 66 F0 | 	shl	_var01, #2
172a8     0A 00 00 FF 
172ac     00 E4 85 F1 | 	sub	objptr, ##5120
172b0     F2 00 02 F1 | 	add	_var01, objptr
172b4     00 01 02 FB | 	rdlong	_var01, _var01
172b8     01 00 00 FF 
172bc     B6 E4 85 F1 | 	sub	objptr, ##694
172c0                 | LR__1770
172c0                 | ' return val
172c0     00 FB 01 F6 | 	mov	result1, _var01
172c4                 | _hg010b_spin2_fillpop_ret
172c4     2D 00 64 FD | 	ret
172c8                 | 
172c8                 | ' 
172c8                 | '       
172c8                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
172c8                 | _hg010b_spin2_fill
172c8     0B 4A 05 F6 | 	mov	COUNT_, #11
172cc     A8 00 A0 FD | 	call	#pushregs_
172d0                 | ' 
172d0                 | ' newcolor:=newcolor & 255
172d0     0B 1F E2 F8 | 	getbyte	local01, arg03, #0
172d4                 | ' oldcolor:=oldcolor & 255
172d4     0C 21 E2 F8 | 	getbyte	local02, arg04, #0
172d8                 | ' 
172d8                 | ' if (oldcolor == newcolor) 
172d8     0F 21 0A F2 | 	cmp	local02, local01 wz
172dc                 | '   return
172dc     70 02 90 AD |  if_e	jmp	#LR__1789
172e0                 | ' 
172e0                 | ' fillptr:=0
172e0     0B 00 00 FF 
172e4     B6 E4 05 F1 | 	add	objptr, ##5814
172e8     F2 00 68 FC | 	wrlong	#0, objptr
172ec                 | ' fillmax:=0
172ec     04 E4 05 F1 | 	add	objptr, #4
172f0     F2 00 68 FC | 	wrlong	#0, objptr
172f4     0B 00 00 FF 
172f8     BA E4 85 F1 | 	sub	objptr, ##5818
172fc                 | ' fillpush(x)
172fc     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
17300                 | ' fillpush(y)
17300     0A 13 02 F6 | 	mov	arg01, arg02
17304     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
17308                 | ' y:=fillpop()
17308     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
1730c     FD 22 02 F6 | 	mov	local03, result1
17310                 | ' x:=fillpop()
17310     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
17314     FD 24 02 F6 | 	mov	local04, result1
17318                 | ' 'pinhigh(38)
17318                 | ' repeat while (x>-1)       
17318                 | LR__1780
17318     00 24 56 F2 | 	cmps	local04, #0 wc
1731c     30 02 90 CD |  if_b	jmp	#LR__1788
17320                 | '  ' pintoggle(39)
17320                 | '   x1 := x
17320     12 27 02 F6 | 	mov	local05, local04
17324                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
17324                 | LR__1781
17324     00 28 06 F6 | 	mov	local06, #0
17328     00 2A 06 F6 | 	mov	local07, #0
1732c     00 26 56 F2 | 	cmps	local05, #0 wc
17330     01 2A 66 36 |  if_ae	neg	local07, #1
17334     00 2A 0E F2 | 	cmp	local07, #0 wz
17338     00 28 26 56 |  if_ne	not	local06, #0
1733c     00 2C 06 F6 | 	mov	local08, #0
17340     00 2E 06 F6 | 	mov	local09, #0
17344     11 15 02 F6 | 	mov	arg02, local03
17348     13 13 02 F6 | 	mov	arg01, local05
1734c     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
17350     10 FB 09 F2 | 	cmp	result1, local02 wz
17354     00 2E 26 A6 |  if_e	not	local09, #0
17358     00 2E 0E F2 | 	cmp	local09, #0 wz
1735c     00 2C 26 56 |  if_ne	not	local08, #0
17360     16 29 CA F7 | 	test	local06, local08 wz
17364                 | '     x1--
17364     01 26 86 51 |  if_ne	sub	local05, #1
17368     B8 FF 9F 5D |  if_ne	jmp	#LR__1781
1736c                 | '   x1++
1736c     01 26 06 F1 | 	add	local05, #1
17370                 | '   spanabove := 0
17370     00 30 06 F6 | 	mov	local10, #0
17374                 | '   spanbelow := 0
17374     00 32 06 F6 | 	mov	local11, #0
17378                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
17378                 | LR__1782
17378     00 28 06 F6 | 	mov	local06, #0
1737c     02 00 00 FF 
17380     00 26 56 F2 | 	cmps	local05, ##1024 wc
17384     00 28 26 C6 |  if_b	not	local06, #0
17388     00 2C 06 F6 | 	mov	local08, #0
1738c     00 2E 06 F6 | 	mov	local09, #0
17390     11 15 02 F6 | 	mov	arg02, local03
17394     13 13 02 F6 | 	mov	arg01, local05
17398     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
1739c     10 FB 09 F2 | 	cmp	result1, local02 wz
173a0     00 2E 26 A6 |  if_e	not	local09, #0
173a4     00 2E 0E F2 | 	cmp	local09, #0 wz
173a8     00 2C 26 56 |  if_ne	not	local08, #0
173ac     16 29 CA F7 | 	test	local06, local08 wz
173b0     88 01 90 AD |  if_e	jmp	#LR__1787
173b4                 | '     putpixel2 (x1,y, newcolor & 255)
173b4     0F 17 E2 F8 | 	getbyte	arg03, local01, #0
173b8     13 13 02 F6 | 	mov	arg01, local05
173bc     11 15 02 F6 | 	mov	arg02, local03
173c0     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
173c4                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
173c4     00 28 06 F6 | 	mov	local06, #0
173c8     00 2A 06 F6 | 	mov	local07, #0
173cc     00 30 0E F2 | 	cmp	local10, #0 wz
173d0     01 22 56 A2 |  if_e	cmps	local03, #1 wc
173d4     01 2A 66 26 |  if_nc_and_z	neg	local07, #1
173d8     00 2A 0E F2 | 	cmp	local07, #0 wz
173dc     00 28 26 56 |  if_ne	not	local06, #0
173e0     00 2C 06 F6 | 	mov	local08, #0
173e4     00 2E 06 F6 | 	mov	local09, #0
173e8     11 15 02 F6 | 	mov	arg02, local03
173ec     01 14 86 F1 | 	sub	arg02, #1
173f0     13 13 02 F6 | 	mov	arg01, local05
173f4     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
173f8     10 FB 09 F2 | 	cmp	result1, local02 wz
173fc     00 2E 26 A6 |  if_e	not	local09, #0
17400     00 2E 0E F2 | 	cmp	local09, #0 wz
17404     00 2C 26 56 |  if_ne	not	local08, #0
17408     16 29 CA F7 | 	test	local06, local08 wz
1740c     1C 00 90 AD |  if_e	jmp	#LR__1783
17410                 | '       fillpush(x1)
17410     13 13 02 F6 | 	mov	arg01, local05
17414     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
17418                 | '       fillpush(y-1)
17418     11 13 02 F6 | 	mov	arg01, local03
1741c     01 12 86 F1 | 	sub	arg01, #1
17420     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
17424                 | '       spanabove := 1 
17424     01 30 06 F6 | 	mov	local10, #1
17428     4C 00 90 FD | 	jmp	#LR__1784
1742c                 | LR__1783
1742c                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
1742c     00 28 06 F6 | 	mov	local06, #0
17430     00 2A 06 F6 | 	mov	local07, #0
17434     00 30 0E F2 | 	cmp	local10, #0 wz
17438     01 22 56 52 |  if_ne	cmps	local03, #1 wc
1743c     01 2A 66 16 |  if_a	neg	local07, #1
17440     00 2A 0E F2 | 	cmp	local07, #0 wz
17444     00 28 26 56 |  if_ne	not	local06, #0
17448     00 2C 06 F6 | 	mov	local08, #0
1744c     00 2E 06 F6 | 	mov	local09, #0
17450     11 15 02 F6 | 	mov	arg02, local03
17454     01 14 86 F1 | 	sub	arg02, #1
17458     13 13 02 F6 | 	mov	arg01, local05
1745c     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
17460     10 FB 09 F2 | 	cmp	result1, local02 wz
17464     00 2E 26 56 |  if_ne	not	local09, #0
17468     00 2E 0E F2 | 	cmp	local09, #0 wz
1746c     00 2C 26 56 |  if_ne	not	local08, #0
17470     16 29 CA F7 | 	test	local06, local08 wz
17474                 | '       spanabove := 0 
17474     00 30 06 56 |  if_ne	mov	local10, #0
17478                 | LR__1784
17478                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
17478     00 28 06 F6 | 	mov	local06, #0
1747c     00 2A 06 F6 | 	mov	local07, #0
17480     00 32 0E F2 | 	cmp	local11, #0 wz
17484     01 00 00 AF 
17488     3F 22 56 A2 |  if_e	cmps	local03, ##575 wc
1748c     01 2A 66 86 |  if_c_and_z	neg	local07, #1
17490     00 2A 0E F2 | 	cmp	local07, #0 wz
17494     00 28 26 56 |  if_ne	not	local06, #0
17498     00 2C 06 F6 | 	mov	local08, #0
1749c     00 2E 06 F6 | 	mov	local09, #0
174a0     11 15 02 F6 | 	mov	arg02, local03
174a4     01 14 06 F1 | 	add	arg02, #1
174a8     13 13 02 F6 | 	mov	arg01, local05
174ac     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
174b0     10 FB 09 F2 | 	cmp	result1, local02 wz
174b4     00 2E 26 A6 |  if_e	not	local09, #0
174b8     00 2E 0E F2 | 	cmp	local09, #0 wz
174bc     00 2C 26 56 |  if_ne	not	local08, #0
174c0     16 29 CA F7 | 	test	local06, local08 wz
174c4     1C 00 90 AD |  if_e	jmp	#LR__1785
174c8                 | '       fillpush(x1)
174c8     13 13 02 F6 | 	mov	arg01, local05
174cc     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
174d0                 | '       fillpush(y + 1)
174d0     11 13 02 F6 | 	mov	arg01, local03
174d4     01 12 06 F1 | 	add	arg01, #1
174d8     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
174dc                 | '       spanBelow := 1
174dc     01 32 06 F6 | 	mov	local11, #1
174e0     50 00 90 FD | 	jmp	#LR__1786
174e4                 | LR__1785
174e4                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
174e4     00 28 06 F6 | 	mov	local06, #0
174e8     00 2A 06 F6 | 	mov	local07, #0
174ec     00 32 0E F2 | 	cmp	local11, #0 wz
174f0     01 00 00 5F 
174f4     3F 22 56 52 |  if_ne	cmps	local03, ##575 wc
174f8     01 2A 66 46 |  if_c_and_nz	neg	local07, #1
174fc     00 2A 0E F2 | 	cmp	local07, #0 wz
17500     00 28 26 56 |  if_ne	not	local06, #0
17504     00 2C 06 F6 | 	mov	local08, #0
17508     00 2E 06 F6 | 	mov	local09, #0
1750c     11 15 02 F6 | 	mov	arg02, local03
17510     01 14 06 F1 | 	add	arg02, #1
17514     13 13 02 F6 | 	mov	arg01, local05
17518     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
1751c     10 FB 09 F2 | 	cmp	result1, local02 wz
17520     00 2E 26 56 |  if_ne	not	local09, #0
17524     00 2E 0E F2 | 	cmp	local09, #0 wz
17528     00 2C 26 56 |  if_ne	not	local08, #0
1752c     16 29 CA F7 | 	test	local06, local08 wz
17530                 | '       spanbelow := 0
17530     00 32 06 56 |  if_ne	mov	local11, #0
17534                 | LR__1786
17534                 | '     x1++
17534     01 26 06 F1 | 	add	local05, #1
17538     3C FE 9F FD | 	jmp	#LR__1782
1753c                 | LR__1787
1753c                 | '   y:=fillpop()
1753c     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
17540     FD 22 02 F6 | 	mov	local03, result1
17544                 | '   x:=fillpop()
17544     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
17548     FD 24 02 F6 | 	mov	local04, result1
1754c     C8 FD 9F FD | 	jmp	#LR__1780
17550                 | LR__1788
17550                 | LR__1789
17550     A7 F0 03 F6 | 	mov	ptra, fp
17554     B2 00 A0 FD | 	call	#popregs_
17558                 | _hg010b_spin2_fill_ret
17558     2D 00 64 FD | 	ret
1755c                 | 
1755c                 | ' 'pinlow(38)    
1755c                 | ' 
1755c                 | ' '-- A filled circle -----------------------------------------------------
1755c                 | ' 
1755c                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
1755c                 | _hg010b_spin2_fcircle
1755c     08 4A 05 F6 | 	mov	COUNT_, #8
17560     A8 00 A0 FD | 	call	#pushregs_
17564     0B 1F 02 F6 | 	mov	local01, arg03
17568     FF FF 7F FF 
1756c     FE 1F 06 FD | 	qmul	local01, ##-2
17570     09 21 02 F6 | 	mov	local02, arg01
17574     0A 23 02 F6 | 	mov	local03, arg02
17578     0C 25 02 F6 | 	mov	local04, arg04
1757c                 | ' 
1757c                 | ' d:=5-4*r
1757c     0F 19 02 F6 | 	mov	arg04, local01
17580     02 18 66 F0 | 	shl	arg04, #2
17584     05 26 06 F6 | 	mov	local05, #5
17588     0C 27 82 F1 | 	sub	local05, arg04
1758c                 | ' x:=0
1758c     00 28 06 F6 | 	mov	local06, #0
17590                 | ' y:=r
17590                 | ' da:=(-2*r+5)*4
17590                 | ' db:=3*4
17590     0C 2A 06 F6 | 	mov	local07, #12
17594                 | ' repeat while (x<=y) 
17594     18 2C 62 FD | 	getqx	local08
17598     05 2C 06 F1 | 	add	local08, #5
1759c     02 2C 66 F0 | 	shl	local08, #2
175a0                 | LR__1790
175a0     0F 29 5A F2 | 	cmps	local06, local01 wcz
175a4     B4 00 90 1D |  if_a	jmp	#LR__1792
175a8                 | '   fastline(x0-x,x0+x,y0-y,c)
175a8     10 13 02 F6 | 	mov	arg01, local02
175ac     14 13 82 F1 | 	sub	arg01, local06
175b0     10 15 02 F6 | 	mov	arg02, local02
175b4     14 15 02 F1 | 	add	arg02, local06
175b8     11 17 02 F6 | 	mov	arg03, local03
175bc     0F 17 82 F1 | 	sub	arg03, local01
175c0     12 19 02 F6 | 	mov	arg04, local04
175c4     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
175c8                 | '   fastline(x0-x,x0+x,y0+y,c)
175c8     10 13 02 F6 | 	mov	arg01, local02
175cc     14 13 82 F1 | 	sub	arg01, local06
175d0     10 15 02 F6 | 	mov	arg02, local02
175d4     14 15 02 F1 | 	add	arg02, local06
175d8     11 17 02 F6 | 	mov	arg03, local03
175dc     0F 17 02 F1 | 	add	arg03, local01
175e0     12 19 02 F6 | 	mov	arg04, local04
175e4     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
175e8                 | '   fastline(x0-y,x0+y,y0-x,c)
175e8     10 13 02 F6 | 	mov	arg01, local02
175ec     0F 13 82 F1 | 	sub	arg01, local01
175f0     10 15 02 F6 | 	mov	arg02, local02
175f4     0F 15 02 F1 | 	add	arg02, local01
175f8     11 17 02 F6 | 	mov	arg03, local03
175fc     14 17 82 F1 | 	sub	arg03, local06
17600     12 19 02 F6 | 	mov	arg04, local04
17604     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
17608                 | '   fastline(x0-y,x0+y,y0+x,c)
17608     10 13 02 F6 | 	mov	arg01, local02
1760c     0F 13 82 F1 | 	sub	arg01, local01
17610     10 15 02 F6 | 	mov	arg02, local02
17614     0F 15 02 F1 | 	add	arg02, local01
17618     11 17 02 F6 | 	mov	arg03, local03
1761c     14 17 02 F1 | 	add	arg03, local06
17620     12 19 02 F6 | 	mov	arg04, local04
17624     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
17628                 | '   if d>0 
17628     01 26 56 F2 | 	cmps	local05, #1 wc
1762c     18 00 90 CD |  if_b	jmp	#LR__1791
17630                 | '     d+=da
17630     16 27 02 F1 | 	add	local05, local08
17634                 | '     y-=1
17634     01 1E 86 F1 | 	sub	local01, #1
17638                 | '     x+=1
17638     01 28 06 F1 | 	add	local06, #1
1763c                 | '     da+=4*4
1763c     10 2C 06 F1 | 	add	local08, #16
17640                 | '     db+=2*4
17640     08 2A 06 F1 | 	add	local07, #8
17644     58 FF 9F FD | 	jmp	#LR__1790
17648                 | LR__1791
17648                 | '   else
17648                 | '     d+=db
17648     15 27 02 F1 | 	add	local05, local07
1764c                 | '     x+=1
1764c     01 28 06 F1 | 	add	local06, #1
17650                 | '     da+=2*4
17650     08 2C 06 F1 | 	add	local08, #8
17654                 | '     db+=2*4
17654     08 2A 06 F1 | 	add	local07, #8
17658     44 FF 9F FD | 	jmp	#LR__1790
1765c                 | LR__1792
1765c     A7 F0 03 F6 | 	mov	ptra, fp
17660     B2 00 A0 FD | 	call	#popregs_
17664                 | _hg010b_spin2_fcircle_ret
17664     2D 00 64 FD | 	ret
17668                 | 
17668                 | '  
17668                 | ' '-- A circle ------------------------------------------------------------ 
17668                 | '  
17668                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
17668                 | _hg010b_spin2_circle
17668     08 4A 05 F6 | 	mov	COUNT_, #8
1766c     A8 00 A0 FD | 	call	#pushregs_
17670     0B 1F 02 F6 | 	mov	local01, arg03
17674     FF FF 7F FF 
17678     FE 1F 06 FD | 	qmul	local01, ##-2
1767c     09 21 02 F6 | 	mov	local02, arg01
17680     0A 23 02 F6 | 	mov	local03, arg02
17684     0C 25 02 F6 | 	mov	local04, arg04
17688                 | ' 
17688                 | '  
17688                 | ' d:=5-4*r
17688     0F 19 02 F6 | 	mov	arg04, local01
1768c     02 18 66 F0 | 	shl	arg04, #2
17690     05 26 06 F6 | 	mov	local05, #5
17694     0C 27 82 F1 | 	sub	local05, arg04
17698                 | ' x:=0
17698     00 28 06 F6 | 	mov	local06, #0
1769c                 | ' y:=r
1769c                 | ' da:=(-2*r+5)*4
1769c                 | ' db:=3*4
1769c     0C 2A 06 F6 | 	mov	local07, #12
176a0                 | ' repeat while (x<=y) 
176a0     18 2C 62 FD | 	getqx	local08
176a4     05 2C 06 F1 | 	add	local08, #5
176a8     02 2C 66 F0 | 	shl	local08, #2
176ac                 | LR__1800
176ac     0F 29 5A F2 | 	cmps	local06, local01 wcz
176b0     F4 00 90 1D |  if_a	jmp	#LR__1802
176b4                 | '   putpixel(x0-x,y0-y,c)
176b4     10 13 02 F6 | 	mov	arg01, local02
176b8     14 13 82 F1 | 	sub	arg01, local06
176bc     11 15 02 F6 | 	mov	arg02, local03
176c0     0F 15 82 F1 | 	sub	arg02, local01
176c4     12 17 02 F6 | 	mov	arg03, local04
176c8     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
176cc                 | '   putpixel(x0-x,y0+y,c)
176cc     10 13 02 F6 | 	mov	arg01, local02
176d0     14 13 82 F1 | 	sub	arg01, local06
176d4     11 15 02 F6 | 	mov	arg02, local03
176d8     0F 15 02 F1 | 	add	arg02, local01
176dc     12 17 02 F6 | 	mov	arg03, local04
176e0     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
176e4                 | '   putpixel(x0+x,y0-y,c)
176e4     10 13 02 F6 | 	mov	arg01, local02
176e8     14 13 02 F1 | 	add	arg01, local06
176ec     11 15 02 F6 | 	mov	arg02, local03
176f0     0F 15 82 F1 | 	sub	arg02, local01
176f4     12 17 02 F6 | 	mov	arg03, local04
176f8     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
176fc                 | '   putpixel(x0+x,y0+y,c)
176fc     10 13 02 F6 | 	mov	arg01, local02
17700     14 13 02 F1 | 	add	arg01, local06
17704     11 15 02 F6 | 	mov	arg02, local03
17708     0F 15 02 F1 | 	add	arg02, local01
1770c     12 17 02 F6 | 	mov	arg03, local04
17710     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
17714                 | '   putpixel(x0-y,y0-x,c)
17714     10 13 02 F6 | 	mov	arg01, local02
17718     0F 13 82 F1 | 	sub	arg01, local01
1771c     11 15 02 F6 | 	mov	arg02, local03
17720     14 15 82 F1 | 	sub	arg02, local06
17724     12 17 02 F6 | 	mov	arg03, local04
17728     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1772c                 | '   putpixel(x0-y,y0+x,c)
1772c     10 13 02 F6 | 	mov	arg01, local02
17730     0F 13 82 F1 | 	sub	arg01, local01
17734     11 15 02 F6 | 	mov	arg02, local03
17738     14 15 02 F1 | 	add	arg02, local06
1773c     12 17 02 F6 | 	mov	arg03, local04
17740     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
17744                 | '   putpixel(x0+y,y0-x,c)
17744     10 13 02 F6 | 	mov	arg01, local02
17748     0F 13 02 F1 | 	add	arg01, local01
1774c     11 15 02 F6 | 	mov	arg02, local03
17750     14 15 82 F1 | 	sub	arg02, local06
17754     12 17 02 F6 | 	mov	arg03, local04
17758     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1775c                 | '   putpixel(x0+y,y0+x,c)
1775c     10 13 02 F6 | 	mov	arg01, local02
17760     0F 13 02 F1 | 	add	arg01, local01
17764     11 15 02 F6 | 	mov	arg02, local03
17768     14 15 02 F1 | 	add	arg02, local06
1776c     12 17 02 F6 | 	mov	arg03, local04
17770     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
17774                 | '   if d>0 
17774     01 26 56 F2 | 	cmps	local05, #1 wc
17778     18 00 90 CD |  if_b	jmp	#LR__1801
1777c                 | '     d+=da
1777c     16 27 02 F1 | 	add	local05, local08
17780                 | '     y-=1
17780     01 1E 86 F1 | 	sub	local01, #1
17784                 | '     x+=1
17784     01 28 06 F1 | 	add	local06, #1
17788                 | '     da+=4*4
17788     10 2C 06 F1 | 	add	local08, #16
1778c                 | '     db+=2*4
1778c     08 2A 06 F1 | 	add	local07, #8
17790     18 FF 9F FD | 	jmp	#LR__1800
17794                 | LR__1801
17794                 | '   else
17794                 | '     d+=db
17794     15 27 02 F1 | 	add	local05, local07
17798                 | '     x+=1
17798     01 28 06 F1 | 	add	local06, #1
1779c                 | '     da+=2*4
1779c     08 2C 06 F1 | 	add	local08, #8
177a0                 | '     db+=2*4
177a0     08 2A 06 F1 | 	add	local07, #8
177a4     04 FF 9F FD | 	jmp	#LR__1800
177a8                 | LR__1802
177a8     A7 F0 03 F6 | 	mov	ptra, fp
177ac     B2 00 A0 FD | 	call	#popregs_
177b0                 | _hg010b_spin2_circle_ret
177b0     2D 00 64 FD | 	ret
177b4                 | 
177b4                 | '     
177b4                 | ' '-- A frame (an empty rectangle) ---------------------------------------
177b4                 | ' 
177b4                 | ' pub frame(x1,y1,x2,y2,c)
177b4                 | _hg010b_spin2_frame
177b4     05 4A 05 F6 | 	mov	COUNT_, #5
177b8     A8 00 A0 FD | 	call	#pushregs_
177bc     09 1F 02 F6 | 	mov	local01, arg01
177c0     0A 21 02 F6 | 	mov	local02, arg02
177c4     0B 23 02 F6 | 	mov	local03, arg03
177c8     0C 25 02 F6 | 	mov	local04, arg04
177cc     0D 27 02 F6 | 	mov	local05, arg05
177d0                 | ' 
177d0                 | ' fastline(x1,x2,y1,c)
177d0     0F 13 02 F6 | 	mov	arg01, local01
177d4     11 15 02 F6 | 	mov	arg02, local03
177d8     10 17 02 F6 | 	mov	arg03, local02
177dc     13 19 02 F6 | 	mov	arg04, local05
177e0     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
177e4                 | ' fastline(x1,x2,y2,c)
177e4     0F 13 02 F6 | 	mov	arg01, local01
177e8     11 15 02 F6 | 	mov	arg02, local03
177ec     12 17 02 F6 | 	mov	arg03, local04
177f0     13 19 02 F6 | 	mov	arg04, local05
177f4     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
177f8                 | ' line(x1,y1,x1,y2,c)
177f8     0F 13 02 F6 | 	mov	arg01, local01
177fc     10 15 02 F6 | 	mov	arg02, local02
17800     0F 17 02 F6 | 	mov	arg03, local01
17804     12 19 02 F6 | 	mov	arg04, local04
17808     13 1B 02 F6 | 	mov	arg05, local05
1780c                 | ' draw(x1,y1,x2,y2,c)
1780c     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
17810                 | ' line(x2,y1,x2,y2,c)
17810     11 13 02 F6 | 	mov	arg01, local03
17814     10 15 02 F6 | 	mov	arg02, local02
17818     11 17 02 F6 | 	mov	arg03, local03
1781c     12 19 02 F6 | 	mov	arg04, local04
17820     13 1B 02 F6 | 	mov	arg05, local05
17824                 | ' draw(x1,y1,x2,y2,c)
17824     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
17828     A7 F0 03 F6 | 	mov	ptra, fp
1782c     B2 00 A0 FD | 	call	#popregs_
17830                 | _hg010b_spin2_frame_ret
17830     2D 00 64 FD | 	ret
17834                 | 
17834                 | ' 
17834                 | ' '-- A box (a filled rectangle) ----------------------------------------
17834                 | ' 
17834                 | ' pub box(x1,y1,x2,y2,c) |yy
17834                 | _hg010b_spin2_box
17834     06 4A 05 F6 | 	mov	COUNT_, #6
17838     A8 00 A0 FD | 	call	#pushregs_
1783c     09 1F 02 F6 | 	mov	local01, arg01
17840     0A 21 02 F6 | 	mov	local02, arg02
17844     0B 23 02 F6 | 	mov	local03, arg03
17848     0C 25 02 F6 | 	mov	local04, arg04
1784c     0D 27 02 F6 | 	mov	local05, arg05
17850                 | ' 
17850                 | ' repeat yy from y1 to y2
17850     10 25 52 F2 | 	cmps	local04, local02 wc
17854     01 28 86 F6 | 	negc	local06, #1
17858     14 25 02 F1 | 	add	local04, local06
1785c                 | LR__1810
1785c                 | '   fastline(x1,x2,yy,c)
1785c     0F 13 02 F6 | 	mov	arg01, local01
17860     11 15 02 F6 | 	mov	arg02, local03
17864     13 19 02 F6 | 	mov	arg04, local05
17868     10 17 02 F6 | 	mov	arg03, local02
1786c     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
17870     14 21 02 F1 | 	add	local02, local06
17874     12 21 0A F2 | 	cmp	local02, local04 wz
17878     E0 FF 9F 5D |  if_ne	jmp	#LR__1810
1787c     A7 F0 03 F6 | 	mov	ptra, fp
17880     B2 00 A0 FD | 	call	#popregs_
17884                 | _hg010b_spin2_box_ret
17884     2D 00 64 FD | 	ret
17888                 | 
17888                 | '       
17888                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
17888                 | _hg010b_spin2_putcharxycgf
17888                 | ' 
17888                 | '  
17888                 | ' repeat yy from 0 to 15
17888     00 00 06 F6 | 	mov	_var01, #0
1788c     97 8C 48 FB | 	callpa	#(@LR__1822-@LR__1820)>>2,fcache_load_ptr_
17890                 | LR__1820
17890                 | ' 
17890                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
17890     91 E4 05 F1 | 	add	objptr, #145
17894     F2 02 02 FB | 	rdlong	_var02, objptr
17898     0A 02 66 F0 | 	shl	_var02, #10
1789c     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
178a0     01 05 02 F1 | 	add	_var03, _var02
178a4     0B 03 02 F6 | 	mov	_var02, arg03
178a8     04 02 66 F0 | 	shl	_var02, #4
178ac     01 05 02 F1 | 	add	_var03, _var02
178b0     00 05 02 F1 | 	add	_var03, _var01
178b4     02 05 C2 FA | 	rdbyte	_var03, _var03
178b8                 | '   asm
178b8     00 04 0E F4 | 	testb	_var03, #0 wz
178bc     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
178c0     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
178c4     01 04 0E F4 | 	testb	_var03, #1 wz
178c8     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
178cc     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
178d0     02 04 0E F4 | 	testb	_var03, #2 wz
178d4     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
178d8     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
178dc     03 04 0E F4 | 	testb	_var03, #3 wz
178e0     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
178e4     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
178e8     04 04 0E F4 | 	testb	_var03, #4 wz
178ec     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
178f0     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
178f4     05 04 0E F4 | 	testb	_var03, #5 wz
178f8     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
178fc     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
17900     06 04 0E F4 | 	testb	_var03, #6 wz
17904     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
17908     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
1790c     07 04 0E F4 | 	testb	_var03, #7 wz
17910     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
17914     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
17918                 | '   
17918                 | '   ccc[0]:=c1
17918     99 E5 05 F1 | 	add	objptr, #409
1791c     F2 06 62 FC | 	wrlong	_var04, objptr
17920                 | '   ccc[1]:=c2 
17920     04 E4 05 F1 | 	add	objptr, #4
17924     F2 08 62 FC | 	wrlong	_var05, objptr
17928                 | '   long[mailbox0][2]:=8
17928     49 E4 85 F1 | 	sub	objptr, #73
1792c     F2 04 02 FB | 	rdlong	_var03, objptr
17930     08 04 06 F1 | 	add	_var03, #8
17934     02 11 68 FC | 	wrlong	#8, _var03
17938                 | '   long[mailbox0][1]:=@ccc
17938     45 E4 05 F1 | 	add	objptr, #69
1793c     F2 04 02 F6 | 	mov	_var03, objptr
17940     45 E4 85 F1 | 	sub	objptr, #69
17944     F2 02 02 FB | 	rdlong	_var02, objptr
17948     04 02 06 F1 | 	add	_var02, #4
1794c     01 05 62 FC | 	wrlong	_var03, _var02
17950                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
17950     0C E5 85 F1 | 	sub	objptr, #268
17954     F2 04 02 FB | 	rdlong	_var03, objptr
17958     0A 03 02 F6 | 	mov	_var02, arg02
1795c     00 03 02 F1 | 	add	_var02, _var01
17960     0A 02 66 F0 | 	shl	_var02, #10
17964     09 0B 02 F6 | 	mov	_var06, arg01
17968     02 0A 66 F0 | 	shl	_var06, #2
1796c     05 03 02 F1 | 	add	_var02, _var06
17970     01 05 02 F1 | 	add	_var03, _var02
17974     00 00 78 FF 
17978     00 04 06 F1 | 	add	_var03, ##-268435456
1797c     0C E5 05 F1 | 	add	objptr, #268
17980     F2 0A 02 FB | 	rdlong	_var06, objptr
17984     05 05 62 FC | 	wrlong	_var03, _var06
17988                 | '   repeat
17988                 | LR__1821
17988     F2 04 02 FB | 	rdlong	_var03, objptr
1798c     02 03 02 FB | 	rdlong	_var02, _var03
17990     00 02 56 F2 | 	cmps	_var02, #0 wc
17994     F0 FF 9F CD |  if_b	jmp	#LR__1821
17998     E5 E5 85 F1 | 	sub	objptr, #485
1799c     01 00 06 F1 | 	add	_var01, #1
179a0     10 00 56 F2 | 	cmps	_var01, #16 wc
179a4     E8 FE 9F CD |  if_b	jmp	#LR__1820
179a8                 | LR__1822
179a8                 | _hg010b_spin2_putcharxycgf_ret
179a8     2D 00 64 FD | 	ret
179ac                 | 
179ac                 | ' 
179ac                 | ' 
179ac                 | ' '**********************************************************************r***
179ac                 | ' '                                                                        *
179ac                 | ' ' Font related functions                                                 *
179ac                 | ' '                                                                        *
179ac                 | ' '*************************************************************************
179ac                 | ' 
179ac                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
179ac                 | ' 
179ac                 | ' pub setfontfamily(afontnum)
179ac                 | _hg010b_spin2_setfontfamily
179ac                 | ' 
179ac                 | ' font_family:=afontnum
179ac     91 E4 05 F1 | 	add	objptr, #145
179b0     F2 12 62 FC | 	wrlong	arg01, objptr
179b4     91 E4 85 F1 | 	sub	objptr, #145
179b8                 | ' 'if afontnum==8
179b8                 | ' '  font_ptr:=@amiga_font
179b8                 | ' 
179b8                 | ' if afontnum==4
179b8     04 12 0E F2 | 	cmp	arg01, #4 wz
179bc                 | '   font_ptr:=@st_font
179bc     08 00 00 AF 
179c0     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
179c4     04 E4 05 A1 |  if_e	add	objptr, #4
179c8     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
179cc     04 E4 85 A1 |  if_e	sub	objptr, #4
179d0     08 00 00 AF 
179d4     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
179d8                 | ' if afontnum==0
179d8     00 12 0E F2 | 	cmp	arg01, #0 wz
179dc                 | '   font_ptr:=@vga_font
179dc     04 E4 05 A1 |  if_e	add	objptr, #4
179e0     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
179e4     04 E4 85 A1 |  if_e	sub	objptr, #4
179e8                 | _hg010b_spin2_setfontfamily_ret
179e8     2D 00 64 FD | 	ret
179ec                 | 
179ec                 | ' 
179ec                 | ' '*************************************************************************
179ec                 | ' '                                                                        *
179ec                 | ' '  Cursor functions                                                      *
179ec                 | ' '                                                                        *
179ec                 | ' '*************************************************************************
179ec                 | ' 
179ec                 | ' 
179ec                 | ' pub setcursorpos(x,y)
179ec                 | _hg010b_spin2_setcursorpos
179ec                 | ' 
179ec                 | ' ''---------- Set the (x,y) position of cursor
179ec                 | ' 
179ec                 | ' cursor_x:=x
179ec     38 E4 05 F1 | 	add	objptr, #56
179f0     F2 12 52 FC | 	wrword	arg01, objptr
179f4                 | ' cursor_y:=y
179f4     02 E4 05 F1 | 	add	objptr, #2
179f8     F2 14 42 FC | 	wrbyte	arg02, objptr
179fc                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
179fc     02 E4 85 F1 | 	sub	objptr, #2
17a00     F2 14 E2 FA | 	rdword	arg02, objptr
17a04     02 14 66 F0 | 	shl	arg02, #2
17a08     02 E4 05 F1 | 	add	objptr, #2
17a0c     F2 16 C2 FA | 	rdbyte	arg03, objptr
17a10     3A E4 85 F1 | 	sub	objptr, #58
17a14     04 16 66 F0 | 	shl	arg03, #4
17a18     11 12 06 F6 | 	mov	arg01, #17
17a1c     70 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
17a20                 | _hg010b_spin2_setcursorpos_ret
17a20     2D 00 64 FD | 	ret
17a24                 | 
17a24                 | ' 
17a24                 | ' '*************************************************************************
17a24                 | ' '                                                                        *
17a24                 | ' '  VBlank functions                                                      *
17a24                 | ' '                                                                        *
17a24                 | ' '*************************************************************************
17a24                 | ' 
17a24                 | ' pub waitvbl(amount) | i
17a24                 | _hg010b_spin2_waitvbl
17a24     03 4A 05 F6 | 	mov	COUNT_, #3
17a28     A8 00 A0 FD | 	call	#pushregs_
17a2c     09 1F 02 F6 | 	mov	local01, arg01
17a30                 | ' 
17a30                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
17a30                 | ' 
17a30                 | ' repeat i from 1 to amount
17a30     01 20 06 F6 | 	mov	local02, #1
17a34     01 1E 56 F2 | 	cmps	local01, #1 wc
17a38     01 22 86 F6 | 	negc	local03, #1
17a3c     11 1F 02 F1 | 	add	local01, local03
17a40                 | LR__1830
17a40                 | '   repeat until vblank==0
17a40                 | LR__1831
17a40     45 E4 05 F1 | 	add	objptr, #69
17a44     F2 12 0A FB | 	rdlong	arg01, objptr wz
17a48     45 E4 85 F1 | 	sub	objptr, #69
17a4c     0C 00 90 AD |  if_e	jmp	#LR__1832
17a50                 | '     waitus(100)
17a50     64 12 06 F6 | 	mov	arg01, #100
17a54     80 16 B0 FD | 	call	#__system___waitus
17a58     E4 FF 9F FD | 	jmp	#LR__1831
17a5c                 | LR__1832
17a5c                 | '   repeat until vblank==1
17a5c                 | LR__1833
17a5c     45 E4 05 F1 | 	add	objptr, #69
17a60     F2 12 02 FB | 	rdlong	arg01, objptr
17a64     45 E4 85 F1 | 	sub	objptr, #69
17a68     01 12 0E F2 | 	cmp	arg01, #1 wz
17a6c     0C 00 90 AD |  if_e	jmp	#LR__1834
17a70                 | '     waitus(100)
17a70     64 12 06 F6 | 	mov	arg01, #100
17a74     60 16 B0 FD | 	call	#__system___waitus
17a78     E0 FF 9F FD | 	jmp	#LR__1833
17a7c                 | LR__1834
17a7c     11 21 02 F1 | 	add	local02, local03
17a80     0F 21 0A F2 | 	cmp	local02, local01 wz
17a84     B8 FF 9F 5D |  if_ne	jmp	#LR__1830
17a88     A7 F0 03 F6 | 	mov	ptra, fp
17a8c     B2 00 A0 FD | 	call	#popregs_
17a90                 | _hg010b_spin2_waitvbl_ret
17a90     2D 00 64 FD | 	ret
17a94                 | 
17a94                 | ' 
17a94                 | ' 
17a94                 | ' pub cls(fc,bc)   :c,i
17a94                 | _hg010b_spin2_cls
17a94     02 4A 05 F6 | 	mov	COUNT_, #2
17a98     A8 00 A0 FD | 	call	#pushregs_
17a9c     09 1F 02 F6 | 	mov	local01, arg01
17aa0     0A 21 02 F6 | 	mov	local02, arg02
17aa4                 | ' 
17aa4                 | ' c:=bc
17aa4                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
17aa4     D9 E4 05 F1 | 	add	objptr, #217
17aa8     F2 12 02 FB | 	rdlong	arg01, objptr
17aac     A5 E4 85 F1 | 	sub	objptr, #165
17ab0     F2 16 02 FB | 	rdlong	arg03, objptr
17ab4     02 16 66 F0 | 	shl	arg03, #2
17ab8     10 15 02 F6 | 	mov	arg02, local02
17abc     00 18 06 F6 | 	mov	arg04, #0
17ac0     01 1A 06 F6 | 	mov	arg05, #1
17ac4     0B 00 00 FF 
17ac8     8C E4 05 F1 | 	add	objptr, ##5772
17acc     F0 08 B0 FD | 	call	#_psram_spin2_fill
17ad0                 | ' setwritecolors(fc,bc)
17ad0                 | ' 
17ad0                 | ' write_color:=ff
17ad0     0B 00 00 FF 
17ad4     83 E4 85 F1 | 	sub	objptr, ##5763
17ad8     F2 1E 62 FC | 	wrlong	local01, objptr
17adc                 | ' write_background:=bb
17adc     04 E4 05 F1 | 	add	objptr, #4
17ae0     F2 20 62 FC | 	wrlong	local02, objptr
17ae4                 | ' cursor_x:=0
17ae4     09 E4 85 F1 | 	sub	objptr, #9
17ae8     F2 00 58 FC | 	wrword	#0, objptr
17aec                 | ' cursor_y:=0
17aec     02 E4 05 F1 | 	add	objptr, #2
17af0     F2 00 48 FC | 	wrbyte	#0, objptr
17af4                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
17af4     02 E4 85 F1 | 	sub	objptr, #2
17af8     F2 14 E2 FA | 	rdword	arg02, objptr
17afc     02 14 66 F0 | 	shl	arg02, #2
17b00     02 E4 05 F1 | 	add	objptr, #2
17b04     F2 16 C2 FA | 	rdbyte	arg03, objptr
17b08     3A E4 85 F1 | 	sub	objptr, #58
17b0c     04 16 66 F0 | 	shl	arg03, #4
17b10     11 12 06 F6 | 	mov	arg01, #17
17b14     78 F2 BF FD | 	call	#_hg010b_spin2_setspritepos
17b18                 | ' setcursorcolor(fc)
17b18     0F 13 02 F6 | 	mov	arg01, local01
17b1c     2C EF BF FD | 	call	#_hg010b_spin2_setcursorcolor
17b20     10 FB 01 F6 | 	mov	result1, local02
17b24     00 FC 05 F6 | 	mov	result2, #0
17b28     A7 F0 03 F6 | 	mov	ptra, fp
17b2c     B2 00 A0 FD | 	call	#popregs_
17b30                 | _hg010b_spin2_cls_ret
17b30     2D 00 64 FD | 	ret
17b34                 | 
17b34                 | ' 
17b34                 | ' ''---------- Output a char at the cursor position, move the cursor 
17b34                 | ' 
17b34                 | ' pub putchar(achar) | c,x,y,l,newcpl
17b34                 | _hg010b_spin2_putchar
17b34     01 4A 05 F6 | 	mov	COUNT_, #1
17b38     A8 00 A0 FD | 	call	#pushregs_
17b3c     09 1F 02 F6 | 	mov	local01, arg01
17b40                 | ' 
17b40                 | ' if achar==10
17b40     0A 1E 0E F2 | 	cmp	local01, #10 wz
17b44                 | '   crlf()
17b44     68 03 B0 AD |  if_e	call	#_hg010b_spin2_crlf
17b48                 | ' if achar==9
17b48     09 1E 0E F2 | 	cmp	local01, #9 wz
17b4c     18 00 90 5D |  if_ne	jmp	#LR__1840
17b50                 | '   cursor_x:=(cursor_x& %11110000)+16
17b50     38 E4 05 F1 | 	add	objptr, #56
17b54     F2 16 E2 FA | 	rdword	arg03, objptr
17b58     F0 16 06 F5 | 	and	arg03, #240
17b5c     10 16 06 F1 | 	add	arg03, #16
17b60     F2 16 52 FC | 	wrword	arg03, objptr
17b64     38 E4 85 F1 | 	sub	objptr, #56
17b68                 | LR__1840
17b68                 | '   
17b68                 | ' if (achar<>9) && (achar<>10) 
17b68     09 1E 0E F2 | 	cmp	local01, #9 wz
17b6c     0A 1E 0E 52 |  if_ne	cmp	local01, #10 wz
17b70     44 00 90 AD |  if_e	jmp	#LR__1841
17b74                 | '   putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
17b74     38 E4 05 F1 | 	add	objptr, #56
17b78     F2 12 E2 FA | 	rdword	arg01, objptr
17b7c     02 E4 05 F1 | 	add	objptr, #2
17b80     F2 14 C2 FA | 	rdbyte	arg02, objptr
17b84     04 14 66 F0 | 	shl	arg02, #4
17b88     03 E4 05 F1 | 	add	objptr, #3
17b8c     F2 18 02 FB | 	rdlong	arg04, objptr
17b90     04 E4 05 F1 | 	add	objptr, #4
17b94     F2 1A 02 FB | 	rdlong	arg05, objptr
17b98     41 E4 85 F1 | 	sub	objptr, #65
17b9c     0F 17 02 F6 | 	mov	arg03, local01
17ba0     E4 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
17ba4                 | '   cursor_x+=2
17ba4     38 E4 05 F1 | 	add	objptr, #56
17ba8     F2 1E E2 FA | 	rdword	local01, objptr
17bac     02 1E 06 F1 | 	add	local01, #2
17bb0     F2 1E 52 FC | 	wrword	local01, objptr
17bb4     38 E4 85 F1 | 	sub	objptr, #56
17bb8                 | LR__1841
17bb8                 | ' 
17bb8                 | ' if cursor_x>=256
17bb8     38 E4 05 F1 | 	add	objptr, #56
17bbc     F2 1E E2 FA | 	rdword	local01, objptr
17bc0     38 E4 85 F1 | 	sub	objptr, #56
17bc4     00 1F 56 F2 | 	cmps	local01, #256 wc
17bc8     64 00 90 CD |  if_b	jmp	#LR__1843
17bcc                 | '   cursor_x:=0
17bcc     38 E4 05 F1 | 	add	objptr, #56
17bd0     F2 00 58 FC | 	wrword	#0, objptr
17bd4                 | '   cursor_y+=1
17bd4     02 E4 05 F1 | 	add	objptr, #2
17bd8     F2 1E C2 FA | 	rdbyte	local01, objptr
17bdc     01 1E 06 F1 | 	add	local01, #1
17be0     F2 1E 42 FC | 	wrbyte	local01, objptr
17be4                 | '   if cursor_y>st_lines-1
17be4     C3 E4 05 F1 | 	add	objptr, #195
17be8     F2 1E 02 FB | 	rdlong	local01, objptr
17bec     01 1E 86 F1 | 	sub	local01, #1
17bf0     C3 E4 85 F1 | 	sub	objptr, #195
17bf4     F2 16 C2 FA | 	rdbyte	arg03, objptr
17bf8     3A E4 85 F1 | 	sub	objptr, #58
17bfc     0F 17 5A F2 | 	cmps	arg03, local01 wcz
17c00     2C 00 90 ED |  if_be	jmp	#LR__1842
17c04                 | '     scrollup()
17c04     00 12 06 F6 | 	mov	arg01, #0
17c08     01 00 00 FF 
17c0c     40 14 06 F6 | 	mov	arg02, ##576
17c10     10 16 06 F6 | 	mov	arg03, #16
17c14     9C 01 B0 FD | 	call	#_hg010b_spin2_scrollup
17c18                 | '     cursor_y:=st_lines-1
17c18     FD E4 05 F1 | 	add	objptr, #253
17c1c     F2 1E 02 FB | 	rdlong	local01, objptr
17c20     01 1E 86 F1 | 	sub	local01, #1
17c24     C3 E4 85 F1 | 	sub	objptr, #195
17c28     F2 1E 42 FC | 	wrbyte	local01, objptr
17c2c     3A E4 85 F1 | 	sub	objptr, #58
17c30                 | LR__1842
17c30                 | LR__1843
17c30                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
17c30     38 E4 05 F1 | 	add	objptr, #56
17c34     F2 14 E2 FA | 	rdword	arg02, objptr
17c38     02 14 66 F0 | 	shl	arg02, #2
17c3c     02 E4 05 F1 | 	add	objptr, #2
17c40     F2 16 C2 FA | 	rdbyte	arg03, objptr
17c44     3A E4 85 F1 | 	sub	objptr, #58
17c48     04 16 66 F0 | 	shl	arg03, #4
17c4c     11 12 06 F6 | 	mov	arg01, #17
17c50     3C F1 BF FD | 	call	#_hg010b_spin2_setspritepos
17c54     A7 F0 03 F6 | 	mov	ptra, fp
17c58     B2 00 A0 FD | 	call	#popregs_
17c5c                 | _hg010b_spin2_putchar_ret
17c5c     2D 00 64 FD | 	ret
17c60                 | 
17c60                 | '     
17c60                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
17c60                 | ' 
17c60                 | ' pub putchar2(achar) | c,x,y,l,newcpl
17c60                 | _hg010b_spin2_putchar2
17c60     01 4A 05 F6 | 	mov	COUNT_, #1
17c64     A8 00 A0 FD | 	call	#pushregs_
17c68                 | ' 
17c68                 | ' putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
17c68     38 E4 05 F1 | 	add	objptr, #56
17c6c     F2 1E E2 FA | 	rdword	local01, objptr
17c70     02 E4 05 F1 | 	add	objptr, #2
17c74     F2 14 C2 FA | 	rdbyte	arg02, objptr
17c78     04 14 66 F0 | 	shl	arg02, #4
17c7c     09 17 02 F6 | 	mov	arg03, arg01
17c80     03 E4 05 F1 | 	add	objptr, #3
17c84     F2 18 02 FB | 	rdlong	arg04, objptr
17c88     04 E4 05 F1 | 	add	objptr, #4
17c8c     F2 1A 02 FB | 	rdlong	arg05, objptr
17c90     41 E4 85 F1 | 	sub	objptr, #65
17c94     0F 13 02 F6 | 	mov	arg01, local01
17c98     EC FB BF FD | 	call	#_hg010b_spin2_putcharxycgf
17c9c                 | ' cursor_x+=2
17c9c     38 E4 05 F1 | 	add	objptr, #56
17ca0     F2 1E E2 FA | 	rdword	local01, objptr
17ca4     02 1E 06 F1 | 	add	local01, #2
17ca8     F2 1E 52 FC | 	wrword	local01, objptr
17cac                 | ' if cursor_x>=256
17cac     F2 1E E2 FA | 	rdword	local01, objptr
17cb0     38 E4 85 F1 | 	sub	objptr, #56
17cb4     00 1F 56 F2 | 	cmps	local01, #256 wc
17cb8     64 00 90 CD |  if_b	jmp	#LR__1851
17cbc                 | '   cursor_x:=0
17cbc     38 E4 05 F1 | 	add	objptr, #56
17cc0     F2 00 58 FC | 	wrword	#0, objptr
17cc4                 | '   cursor_y+=1
17cc4     02 E4 05 F1 | 	add	objptr, #2
17cc8     F2 1E C2 FA | 	rdbyte	local01, objptr
17ccc     01 1E 06 F1 | 	add	local01, #1
17cd0     F2 1E 42 FC | 	wrbyte	local01, objptr
17cd4                 | '   if cursor_y>st_lines-1
17cd4     C3 E4 05 F1 | 	add	objptr, #195
17cd8     F2 1E 02 FB | 	rdlong	local01, objptr
17cdc     01 1E 86 F1 | 	sub	local01, #1
17ce0     C3 E4 85 F1 | 	sub	objptr, #195
17ce4     F2 1A C2 FA | 	rdbyte	arg05, objptr
17ce8     3A E4 85 F1 | 	sub	objptr, #58
17cec     0F 1B 5A F2 | 	cmps	arg05, local01 wcz
17cf0     2C 00 90 ED |  if_be	jmp	#LR__1850
17cf4                 | '     scrollup()
17cf4     00 12 06 F6 | 	mov	arg01, #0
17cf8     01 00 00 FF 
17cfc     40 14 06 F6 | 	mov	arg02, ##576
17d00     10 16 06 F6 | 	mov	arg03, #16
17d04     AC 00 B0 FD | 	call	#_hg010b_spin2_scrollup
17d08                 | '     cursor_y:=st_lines-1
17d08     FD E4 05 F1 | 	add	objptr, #253
17d0c     F2 1E 02 FB | 	rdlong	local01, objptr
17d10     01 1E 86 F1 | 	sub	local01, #1
17d14     C3 E4 85 F1 | 	sub	objptr, #195
17d18     F2 1E 42 FC | 	wrbyte	local01, objptr
17d1c     3A E4 85 F1 | 	sub	objptr, #58
17d20                 | LR__1850
17d20                 | LR__1851
17d20                 | ' setspritepos(17,4*cursor_x,16*cursor_y ) 
17d20     38 E4 05 F1 | 	add	objptr, #56
17d24     F2 14 E2 FA | 	rdword	arg02, objptr
17d28     02 14 66 F0 | 	shl	arg02, #2
17d2c     02 E4 05 F1 | 	add	objptr, #2
17d30     F2 16 C2 FA | 	rdbyte	arg03, objptr
17d34     3A E4 85 F1 | 	sub	objptr, #58
17d38     04 16 66 F0 | 	shl	arg03, #4
17d3c     11 12 06 F6 | 	mov	arg01, #17
17d40     4C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
17d44     A7 F0 03 F6 | 	mov	ptra, fp
17d48     B2 00 A0 FD | 	call	#popregs_
17d4c                 | _hg010b_spin2_putchar2_ret
17d4c     2D 00 64 FD | 	ret
17d50                 | 
17d50                 | ' ''--------- Output a string at the cursor position, move the cursor  
17d50                 | ' 
17d50                 | ' pub write(text) | iii,c,ncx,ncy
17d50                 | _hg010b_spin2_write
17d50     04 4A 05 F6 | 	mov	COUNT_, #4
17d54     A8 00 A0 FD | 	call	#pushregs_
17d58     09 1F 02 F6 | 	mov	local01, arg01
17d5c                 | ' 
17d5c                 | ' repeat iii from 0 to strsize(text)-1
17d5c     00 20 06 F6 | 	mov	local02, #0
17d60     0F 13 02 F6 | 	mov	arg01, local01
17d64     09 23 02 F6 | 	mov	local03, arg01
17d68     97 06 48 FB | 	callpa	#(@LR__1861-@LR__1860)>>2,fcache_load_ptr_
17d6c                 | LR__1860
17d6c     11 FB C9 FA | 	rdbyte	result1, local03 wz
17d70     01 22 06 51 |  if_ne	add	local03, #1
17d74     F4 FF 9F 5D |  if_ne	jmp	#LR__1860
17d78                 | LR__1861
17d78     09 23 82 F1 | 	sub	local03, arg01
17d7c     01 22 86 F1 | 	sub	local03, #1
17d80     00 22 56 F2 | 	cmps	local03, #0 wc
17d84     01 24 86 F6 | 	negc	local04, #1
17d88     12 23 02 F1 | 	add	local03, local04
17d8c                 | LR__1862
17d8c                 | '   putchar2(byte[text+iii])
17d8c     0F 13 02 F6 | 	mov	arg01, local01
17d90     10 13 02 F1 | 	add	arg01, local02
17d94     09 13 C2 FA | 	rdbyte	arg01, arg01
17d98     C4 FE BF FD | 	call	#_hg010b_spin2_putchar2
17d9c     12 21 02 F1 | 	add	local02, local04
17da0     11 21 0A F2 | 	cmp	local02, local03 wz
17da4     E4 FF 9F 5D |  if_ne	jmp	#LR__1862
17da8     A7 F0 03 F6 | 	mov	ptra, fp
17dac     B2 00 A0 FD | 	call	#popregs_
17db0                 | _hg010b_spin2_write_ret
17db0     2D 00 64 FD | 	ret
17db4                 | 
17db4                 | ' 
17db4                 | ' ''-----------  Scroll the screen one line up
17db4                 | ' 
17db4                 | ' pub scrollup(start=0, end=576 , amount=16) | i
17db4                 | _hg010b_spin2_scrollup
17db4     01 4A 05 F6 | 	mov	COUNT_, #1
17db8     A8 00 A0 FD | 	call	#pushregs_
17dbc                 | ' 	
17dbc                 | ' repeat i from 0 to 559 
17dbc     00 1E 06 F6 | 	mov	local01, #0
17dc0                 | LR__1870
17dc0     F5 E4 05 F1 | 	add	objptr, #245
17dc4     F2 18 02 FB | 	rdlong	arg04, objptr
17dc8     1C E4 85 F1 | 	sub	objptr, #28
17dcc     F2 14 02 FB | 	rdlong	arg02, objptr
17dd0     0F 13 02 F6 | 	mov	arg01, local01
17dd4     10 12 06 F1 | 	add	arg01, #16
17dd8     02 12 66 F0 | 	shl	arg01, #2
17ddc     14 E4 05 F1 | 	add	objptr, #20
17de0     F2 16 02 FB | 	rdlong	arg03, objptr
17de4     0B 13 02 FD | 	qmul	arg01, arg03
17de8                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
17de8     F6 03 00 FF 
17dec     00 12 06 F6 | 	mov	arg01, ##519168
17df0     0C 13 82 F1 | 	sub	arg01, arg04
17df4     02 16 66 F0 | 	shl	arg03, #2
17df8     0A 00 00 FF 
17dfc     D3 E5 05 F1 | 	add	objptr, ##5587
17e00     18 18 62 FD | 	getqx	arg04
17e04     0C 15 02 F1 | 	add	arg02, arg04
17e08     7C 04 B0 FD | 	call	#_psram_spin2_read1
17e0c     0A 00 00 FF 
17e10     CB E5 85 F1 | 	sub	objptr, ##5579
17e14     F2 18 02 FB | 	rdlong	arg04, objptr
17e18     1C E4 85 F1 | 	sub	objptr, #28
17e1c     F2 14 02 FB | 	rdlong	arg02, objptr
17e20     0F 13 02 F6 | 	mov	arg01, local01
17e24     02 12 66 F0 | 	shl	arg01, #2
17e28     14 E4 05 F1 | 	add	objptr, #20
17e2c     F2 16 02 FB | 	rdlong	arg03, objptr
17e30     0B 13 02 FD | 	qmul	arg01, arg03
17e34                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
17e34     F6 03 00 FF 
17e38     00 12 06 F6 | 	mov	arg01, ##519168
17e3c     0C 13 82 F1 | 	sub	arg01, arg04
17e40     02 16 66 F0 | 	shl	arg03, #2
17e44     0A 00 00 FF 
17e48     D3 E5 05 F1 | 	add	objptr, ##5587
17e4c     18 18 62 FD | 	getqx	arg04
17e50     0C 15 02 F1 | 	add	arg02, arg04
17e54     CC 04 B0 FD | 	call	#_psram_spin2_write
17e58     0B 00 00 FF 
17e5c     C0 E4 85 F1 | 	sub	objptr, ##5824
17e60     01 1E 06 F1 | 	add	local01, #1
17e64     01 00 00 FF 
17e68     30 1E 56 F2 | 	cmps	local01, ##560 wc
17e6c     50 FF 9F CD |  if_b	jmp	#LR__1870
17e70                 | ' 
17e70                 | ' repeat i from 560 to 575
17e70     01 00 00 FF 
17e74     30 1E 06 F6 | 	mov	local01, ##560
17e78                 | LR__1871
17e78                 | '    fastline(0,1023,i,write_background)   
17e78     41 E4 05 F1 | 	add	objptr, #65
17e7c     F2 18 02 FB | 	rdlong	arg04, objptr
17e80     41 E4 85 F1 | 	sub	objptr, #65
17e84     00 12 06 F6 | 	mov	arg01, #0
17e88     09 14 CE F9 | 	bmask	arg02, #9
17e8c     0F 17 02 F6 | 	mov	arg03, local01
17e90     2C F1 BF FD | 	call	#_hg010b_spin2_fastline
17e94     01 1E 06 F1 | 	add	local01, #1
17e98     01 00 00 FF 
17e9c     40 1E 16 F2 | 	cmp	local01, ##576 wc
17ea0     D4 FF 9F CD |  if_b	jmp	#LR__1871
17ea4     A7 F0 03 F6 | 	mov	ptra, fp
17ea8     B2 00 A0 FD | 	call	#popregs_
17eac                 | _hg010b_spin2_scrollup_ret
17eac     2D 00 64 FD | 	ret
17eb0                 | 
17eb0                 | ' 
17eb0                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
17eb0                 | ' 
17eb0                 | ' pub crlf()
17eb0                 | _hg010b_spin2_crlf
17eb0                 | ' 
17eb0                 | ' cursor_x:=leading_spaces*2
17eb0     01 00 00 FF 
17eb4     B2 E4 05 F1 | 	add	objptr, ##690
17eb8     F2 16 02 FB | 	rdlong	arg03, objptr
17ebc     01 16 66 F0 | 	shl	arg03, #1
17ec0     01 00 00 FF 
17ec4     7A E4 85 F1 | 	sub	objptr, ##634
17ec8     F2 16 52 FC | 	wrword	arg03, objptr
17ecc                 | ' cursor_y+=1
17ecc     02 E4 05 F1 | 	add	objptr, #2
17ed0     F2 16 C2 FA | 	rdbyte	arg03, objptr
17ed4     01 16 06 F1 | 	add	arg03, #1
17ed8     F2 16 42 FC | 	wrbyte	arg03, objptr
17edc                 | ' if cursor_y>st_lines-1
17edc     C3 E4 05 F1 | 	add	objptr, #195
17ee0     F2 16 02 FB | 	rdlong	arg03, objptr
17ee4     01 16 86 F1 | 	sub	arg03, #1
17ee8     C3 E4 85 F1 | 	sub	objptr, #195
17eec     F2 14 C2 FA | 	rdbyte	arg02, objptr
17ef0     3A E4 85 F1 | 	sub	objptr, #58
17ef4     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
17ef8     2C 00 90 ED |  if_be	jmp	#LR__1880
17efc                 | '   scrollup()
17efc     00 12 06 F6 | 	mov	arg01, #0
17f00     01 00 00 FF 
17f04     40 14 06 F6 | 	mov	arg02, ##576
17f08     10 16 06 F6 | 	mov	arg03, #16
17f0c     A4 FE BF FD | 	call	#_hg010b_spin2_scrollup
17f10                 | '   cursor_y:=st_lines-1
17f10     FD E4 05 F1 | 	add	objptr, #253
17f14     F2 16 02 FB | 	rdlong	arg03, objptr
17f18     01 16 86 F1 | 	sub	arg03, #1
17f1c     C3 E4 85 F1 | 	sub	objptr, #195
17f20     F2 16 42 FC | 	wrbyte	arg03, objptr
17f24     3A E4 85 F1 | 	sub	objptr, #58
17f28                 | LR__1880
17f28                 | ' setspritepos(17,4*cursor_x,16*cursor_y )  
17f28     38 E4 05 F1 | 	add	objptr, #56
17f2c     F2 14 E2 FA | 	rdword	arg02, objptr
17f30     02 14 66 F0 | 	shl	arg02, #2
17f34     02 E4 05 F1 | 	add	objptr, #2
17f38     F2 16 C2 FA | 	rdbyte	arg03, objptr
17f3c     3A E4 85 F1 | 	sub	objptr, #58
17f40     04 16 66 F0 | 	shl	arg03, #4
17f44     11 12 06 F6 | 	mov	arg01, #17
17f48     44 EE BF FD | 	call	#_hg010b_spin2_setspritepos
17f4c                 | _hg010b_spin2_crlf_ret
17f4c     2D 00 64 FD | 	ret
17f50                 | 
17f50                 | ' 
17f50                 | ' 
17f50                 | ' '*************************************************************************
17f50                 | ' '                                                                        *
17f50                 | ' '  Conversions                                                           *
17f50                 | ' '                                                                        *
17f50                 | ' '*************************************************************************
17f50                 | ' 
17f50                 | ' ''---------- Convert a integer to dec string, return a pointer
17f50                 | ' 
17f50                 | ' pub inttostr(i):result |q,pos,k,j
17f50                 | _hg010b_spin2_inttostr
17f50     03 4A 05 F6 | 	mov	COUNT_, #3
17f54     A8 00 A0 FD | 	call	#pushregs_
17f58     09 1F 0A F6 | 	mov	local01, arg01 wz
17f5c                 | ' 
17f5c                 | ' j:=i
17f5c                 | ' pos:=10
17f5c     0A 20 06 F6 | 	mov	local02, #10
17f60                 | ' k:=0
17f60     00 22 06 F6 | 	mov	local03, #0
17f64                 | ' 
17f64                 | ' if (j==0)
17f64     18 00 90 5D |  if_ne	jmp	#LR__1890
17f68                 | '   n_string[0]:=48
17f68     49 E4 05 F1 | 	add	objptr, #73
17f6c     F2 60 48 FC | 	wrbyte	#48, objptr
17f70                 | '   n_string[1]:=0
17f70     01 E4 05 F1 | 	add	objptr, #1
17f74     F2 00 48 FC | 	wrbyte	#0, objptr
17f78     4A E4 85 F1 | 	sub	objptr, #74
17f7c     C4 00 90 FD | 	jmp	#LR__1897
17f80                 | LR__1890
17f80                 | ' 
17f80                 | ' else
17f80                 | '   if (j<0)
17f80     0F 1F 52 F6 | 	abs	local01, local01 wc
17f84                 | '     j:=0-j
17f84                 | '     k:=45
17f84     2D 22 06 C6 |  if_b	mov	local03, #45
17f88                 | ' 
17f88                 | '   n_string[11]:=0
17f88     54 E4 05 F1 | 	add	objptr, #84
17f8c     F2 00 48 FC | 	wrbyte	#0, objptr
17f90     54 E4 85 F1 | 	sub	objptr, #84
17f94     97 24 48 FB | 	callpa	#(@LR__1892-@LR__1891)>>2,fcache_load_ptr_
17f98                 | '   repeat while (pos>-1)
17f98                 | LR__1891
17f98     00 20 56 F2 | 	cmps	local02, #0 wc
17f9c     40 00 90 CD |  if_b	jmp	#LR__1893
17fa0     0F FB 51 F6 | 	abs	result1, local01 wc
17fa4     0A FA 15 FD | 	qdiv	result1, #10
17fa8                 | '     q:=j//10
17fa8     19 FA 61 FD | 	getqy	result1
17fac     FD FA 81 F6 | 	negc	result1, result1
17fb0     0F 1F 52 F6 | 	abs	local01, local01 wc
17fb4     0A 1E 16 FD | 	qdiv	local01, #10
17fb8                 | '     q:=48+q
17fb8     30 FA 05 F1 | 	add	result1, #48
17fbc                 | '     n_string[pos]:=q
17fbc     10 1F 02 F6 | 	mov	local01, local02
17fc0     49 E4 05 F1 | 	add	objptr, #73
17fc4     F2 1E 02 F1 | 	add	local01, objptr
17fc8     0F FB 41 FC | 	wrbyte	result1, local01
17fcc                 | '     j:=j/10
17fcc     49 E4 85 F1 | 	sub	objptr, #73
17fd0                 | '     pos-=1
17fd0     01 20 86 F1 | 	sub	local02, #1
17fd4     18 1E 62 FD | 	getqx	local01
17fd8     0F 1F 82 F6 | 	negc	local01, local01
17fdc     B8 FF 9F FD | 	jmp	#LR__1891
17fe0                 | LR__1892
17fe0                 | LR__1893
17fe0                 | '   repeat while n_string[0]==48
17fe0                 | LR__1894
17fe0     49 E4 05 F1 | 	add	objptr, #73
17fe4     F2 16 C2 FA | 	rdbyte	arg03, objptr
17fe8     49 E4 85 F1 | 	sub	objptr, #73
17fec     30 16 0E F2 | 	cmp	arg03, #48 wz
17ff0     20 00 90 5D |  if_ne	jmp	#LR__1895
17ff4                 | '     bytemove(@n_string,@n_string+1,12)
17ff4     49 E4 05 F1 | 	add	objptr, #73
17ff8     F2 12 02 F6 | 	mov	arg01, objptr
17ffc     F2 14 02 F6 | 	mov	arg02, objptr
18000     49 E4 85 F1 | 	sub	objptr, #73
18004     01 14 06 F1 | 	add	arg02, #1
18008     0C 16 06 F6 | 	mov	arg03, #12
1800c     88 0C B0 FD | 	call	#__system____builtin_memmove
18010     CC FF 9F FD | 	jmp	#LR__1894
18014                 | LR__1895
18014                 | ' 
18014                 | '   if k==45
18014     2D 22 0E F2 | 	cmp	local03, #45 wz
18018     28 00 90 5D |  if_ne	jmp	#LR__1896
1801c                 | '      bytemove(@n_string+1,@n_string,12)
1801c     49 E4 05 F1 | 	add	objptr, #73
18020     F2 12 02 F6 | 	mov	arg01, objptr
18024     01 12 06 F1 | 	add	arg01, #1
18028     F2 14 02 F6 | 	mov	arg02, objptr
1802c     49 E4 85 F1 | 	sub	objptr, #73
18030     0C 16 06 F6 | 	mov	arg03, #12
18034     60 0C B0 FD | 	call	#__system____builtin_memmove
18038                 | '      n_string[0]:=k
18038     49 E4 05 F1 | 	add	objptr, #73
1803c     F2 22 42 FC | 	wrbyte	local03, objptr
18040     49 E4 85 F1 | 	sub	objptr, #73
18044                 | LR__1896
18044                 | LR__1897
18044                 | ' 
18044                 | ' q:=@n_string
18044     49 E4 05 F1 | 	add	objptr, #73
18048     F2 FA 01 F6 | 	mov	result1, objptr
1804c     49 E4 85 F1 | 	sub	objptr, #73
18050                 | ' return q
18050     A7 F0 03 F6 | 	mov	ptra, fp
18054     B2 00 A0 FD | 	call	#popregs_
18058                 | _hg010b_spin2_inttostr_ret
18058     2D 00 64 FD | 	ret
1805c                 | 
1805c                 | ' 
1805c                 | ' '..............................................................................
1805c                 | ' 
1805c                 | ' {{
1805c                 | ' }}
1805c                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
1805c                 | _psram_spin2_startx
1805c     04 4A 05 F6 | 	mov	COUNT_, #4
18060     A8 00 A0 FD | 	call	#pushregs_
18064     09 1F 02 F6 | 	mov	local01, arg01
18068     0B 21 02 F6 | 	mov	local02, arg03
1806c     0C 23 02 F6 | 	mov	local03, arg04
18070                 | '     stop() ' restart driver if required
18070     54 01 B0 FD | 	call	#_psram_spin2_stop
18074     00 1E 0E F2 | 	cmp	local01, #0 wz
18078     14 1E 06 AB |  if_e	rdlong	local01, #20
1807c     0F 15 52 F6 | 	abs	arg02, local01 wc
18080     A1 07 00 FF 
18084     40 14 16 FD | 	qdiv	arg02, ##1000000
18088                 | ' 
18088                 | '     ' use current frequency if none specified
18088                 | ' 
18088                 | '     if freq == 0 
18088                 | '         freq := clkfreq 
18088                 | ' 
18088                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
18088                 | ' 
18088                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
18088                 | '     if burst < 0
18088                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
18088     18 14 62 FD | 	getqx	arg02
1808c     0A 19 82 F6 | 	negc	arg04, arg02
18090     03 18 66 F0 | 	shl	arg04, #3
18094     84 18 86 F1 | 	sub	arg04, #132
18098     04 18 46 F0 | 	shr	arg04, #4
1809c     04 18 66 F0 | 	shl	arg04, #4
180a0     00 18 56 F2 | 	cmps	arg04, #0 wc
180a4     0E FA 65 C6 |  if_b	neg	result1, #14
180a8     10 01 90 CD |  if_b	jmp	#LR__1903
180ac                 | ' 
180ac                 | '     ' compute the input delay
180ac                 | ' 
180ac                 | '     if delay <= 0
180ac     01 20 56 F2 | 	cmps	local02, #1 wc
180b0     10 00 90 3D |  if_ae	jmp	#LR__1900
180b4                 | '         delay := lookupDelay(freq)
180b4     0F 13 02 F6 | 	mov	arg01, local01
180b8     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
180bc     FD 20 02 F6 | 	mov	local02, result1
180c0     04 00 90 FD | 	jmp	#LR__1901
180c4                 | LR__1900
180c4                 | '     else
180c4                 | '         delay <#= $f ' limit to 15
180c4     0F 20 66 F3 | 	fles	local02, #15
180c8                 | LR__1901
180c8                 | ' 
180c8                 | '     ' create our lock
180c8                 | ' 
180c8                 | '     driverlock := LOCKNEW()  
180c8     00 FA 05 F6 | 	mov	result1, #0
180cc     04 FA 61 FD | 	locknew	result1
180d0     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
180d4     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
180d8                 | '     if driverlock == -1
180d8     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
180dc     FF FF 7F FF 
180e0     FF FB 0D F2 | 	cmp	result1, ##-1 wz
180e4                 | '         return ERR_NO_LOCK
180e4     1A FA 65 A6 |  if_e	neg	result1, #26
180e8     D0 00 90 AD |  if_e	jmp	#LR__1903
180ec                 | ' 
180ec                 | '     ' patch in the proper data and HUB addresses to the startup structure
180ec                 | ' 
180ec                 | '     long[@startupData][0]:=clkfreq
180ec     14 1E 06 FB | 	rdlong	local01, #20
180f0     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
180f4     FA 1E 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
180f8                 | ' '    long[@startupData][1]:=$1000_0000
180f8                 | '     long[@startupData][5]:=@deviceData
180f8     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
180fc     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
18100     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
18104     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
18108     14 14 06 F1 | 	add	arg02, #20
1810c     0A 1F 62 FC | 	wrlong	local01, arg02
18110                 | '     long[@startupData][6]:=@qosData
18110     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
18114     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
18118     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1811c     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
18120     18 14 06 F1 | 	add	arg02, #24
18124     0A 1F 62 FC | 	wrlong	local01, arg02
18128                 | '     long[@startupData][7]:=$7FF00
18128     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1812c     1C 1E 06 F1 | 	add	local01, #28
18130     FF 03 80 FF 
18134     0F 01 6A FC | 	wrlong	##524032, local01
18138                 | ' 
18138                 | '     ' setup some default bank and QoS parameter values
18138                 | ' 
18138                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
18138     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1813c     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
18140     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
18144     10 18 66 F0 | 	shl	arg04, #16
18148     0C 20 66 F0 | 	shl	local02, #12
1814c     10 19 42 F5 | 	or	arg04, local02
18150     18 18 46 F5 | 	or	arg04, #24
18154     0C 15 02 F6 | 	mov	arg02, arg04
18158     02 16 06 F6 | 	mov	arg03, #2
1815c     A0 00 A0 FD | 	call	#\builtin_longfill_
18160                 | '     longfill(@qosData, $FFFF0000, 8)
18160     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
18164     07 16 06 F6 | 	mov	arg03, #7
18168     28 16 62 FD | 	setq	arg03
1816c     80 FF FF FF 
18170     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
18174                 | ' 
18174                 | '     ' get the address of the PSRAM memory driver so we can start it
18174                 | ' 
18174                 | '     driverAddr:= driver.getDriverAddr()
18174                 | '     return @driver_start
18174     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
18178     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
1817c     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
18180                 | ' 
18180                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
18180                 | ' 
18180                 | '     if desiredcog < 0
18180     00 22 56 F2 | 	cmps	local03, #0 wc
18184                 | '         desiredcog := NEWCOG
18184     10 22 06 C6 |  if_b	mov	local03, #16
18188                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
18188     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1818c     11 25 02 F6 | 	mov	local04, local03
18190     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
18194     0A 25 F2 FC | 	coginit	local04, arg02 wc
18198     01 24 66 C6 |  if_b	neg	local04, #1
1819c     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
181a0     FA 24 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
181a4                 | '     repeat until long[@startupData] == 0 
181a4     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
181a8                 | LR__1902
181a8     FA 24 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
181ac     F8 FF 9F 5D |  if_ne	jmp	#LR__1902
181b0                 | ' 
181b0                 | '     return drivercog
181b0     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
181b4     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
181b8     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
181bc                 | LR__1903
181bc     A7 F0 03 F6 | 	mov	ptra, fp
181c0     B2 00 A0 FD | 	call	#popregs_
181c4                 | _psram_spin2_startx_ret
181c4     2D 00 64 FD | 	ret
181c8                 | 
181c8                 | ' 
181c8                 | ' '..............................................................................
181c8                 | ' 
181c8                 | ' {{
181c8                 | ' }}
181c8                 | ' PUB stop() : i
181c8                 | _psram_spin2_stop
181c8     00 00 06 F6 | 	mov	_var01, #0
181cc                 | '     if drivercog <> -1
181cc     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
181d0     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
181d4     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
181d8     FF FF 7F FF 
181dc     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
181e0     70 00 90 AD |  if_e	jmp	#LR__1913
181e4                 | '         cogstop(drivercog) ' a rather brutal stop
181e4     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
181e8     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
181ec     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
181f0     03 12 62 FD | 	cogstop	arg01
181f4     97 26 48 FB | 	callpa	#(@LR__1912-@LR__1910)>>2,fcache_load_ptr_
181f8                 | '         repeat i from 0 to 7
181f8                 | LR__1910
181f8                 | '             if long[$7FF00][i*3] < 0
181f8     00 FB 01 F6 | 	mov	result1, _var01
181fc     01 FA 65 F0 | 	shl	result1, #1
18200     00 FB 01 F1 | 	add	result1, _var01
18204     02 FA 65 F0 | 	shl	result1, #2
18208     FF 03 00 FF 
1820c     00 FB 05 F1 | 	add	result1, ##524032
18210     FD FA 01 FB | 	rdlong	result1, result1
18214     00 FA 55 F2 | 	cmps	result1, #0 wc
18218     1C 00 90 3D |  if_ae	jmp	#LR__1911
1821c                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
1821c     00 FB 01 F6 | 	mov	result1, _var01
18220     01 FA 65 F0 | 	shl	result1, #1
18224     00 FB 01 F1 | 	add	result1, _var01
18228     02 FA 65 F0 | 	shl	result1, #2
1822c     FF 03 00 FF 
18230     00 FB 05 F1 | 	add	result1, ##524032
18234     FD 20 68 FC | 	wrlong	#16, result1
18238                 | LR__1911
18238     01 00 06 F1 | 	add	_var01, #1
1823c     08 00 56 F2 | 	cmps	_var01, #8 wc
18240     B4 FF 9F CD |  if_b	jmp	#LR__1910
18244                 | LR__1912
18244                 | '         drivercog := -1
18244     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
18248     FF FF FF FF 
1824c     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
18250     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
18254                 | LR__1913
18254                 | '     if driverlock <> -1
18254     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
18258     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
1825c     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
18260     FF FF 7F FF 
18264     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
18268                 | '         LOCKRET(driverlock)
18268     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
1826c     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
18270     05 12 62 5D |  if_ne	lockret	arg01
18274                 | '         driverlock := -1
18274     FF FF FF 5F 
18278     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
1827c     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
18280     00 FB 01 F6 | 	mov	result1, _var01
18284                 | _psram_spin2_stop_ret
18284     2D 00 64 FD | 	ret
18288                 | 
18288                 | ' 
18288                 | ' '..............................................................................
18288                 | ' 
18288                 | ' {{
18288                 | ' }}
18288                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
18288                 | _psram_spin2_read1
18288                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
18288                 | '     if drivercog == -1 ' driver must be running
18288     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1828c     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
18290     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
18294     FF FF 7F FF 
18298     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1829c                 | '         return ERR_INACTIVE
1829c     0F FA 65 A6 |  if_e	neg	result1, #15
182a0     7C 00 90 AD |  if_e	jmp	#LR__1921
182a4                 | '     if count == 0 ' don't even bother reading
182a4     00 16 0E F2 | 	cmp	arg03, #0 wz
182a8                 | '         return 0
182a8     00 FA 05 A6 |  if_e	mov	result1, #0
182ac     70 00 90 AD |  if_e	jmp	#LR__1921
182b0                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
182b0     00 FA 05 F6 | 	mov	result1, #0
182b4     01 FA 61 FD | 	cogid	result1
182b8     FD 00 02 F6 | 	mov	_var01, result1
182bc     01 00 66 F0 | 	shl	_var01, #1
182c0     FD 00 02 F1 | 	add	_var01, result1
182c4     02 00 66 F0 | 	shl	_var01, #2
182c8     FF 03 00 FF 
182cc     00 03 06 F6 | 	mov	_var02, ##524032
182d0     00 03 02 F1 | 	add	_var02, _var01
182d4                 | '     if long[mailbox] < 0
182d4     01 01 02 FB | 	rdlong	_var01, _var02
182d8     00 00 56 F2 | 	cmps	_var01, #0 wc
182dc                 | '         return ERR_MAILBOX_BUSY
182dc     1C FA 65 C6 |  if_b	neg	result1, #28
182e0     3C 00 90 CD |  if_b	jmp	#LR__1921
182e4                 | '     long[mailbox][2] := count
182e4     08 02 06 F1 | 	add	_var02, #8
182e8     01 17 62 FC | 	wrlong	arg03, _var02
182ec                 | '     long[mailbox][1] := dstHubAddr
182ec     04 02 86 F1 | 	sub	_var02, #4
182f0     01 13 62 FC | 	wrlong	arg01, _var02
182f4     04 02 86 F1 | 	sub	_var02, #4
182f8                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
182f8     0A 05 02 F6 | 	mov	_var03, arg02
182fc     D9 04 06 F4 | 	bitl	_var03, #217
18300     00 00 58 FF 
18304     00 00 06 F6 | 	mov	_var01, ##-1342177280
18308     02 01 02 F1 | 	add	_var01, _var03
1830c     01 01 62 FC | 	wrlong	_var01, _var02
18310                 | '     repeat
18310                 | LR__1920
18310                 | '         result := long[mailbox]    
18310     01 05 02 FB | 	rdlong	_var03, _var02
18314     00 04 56 F2 | 	cmps	_var03, #0 wc
18318     F4 FF 9F CD |  if_b	jmp	#LR__1920
1831c                 | '     while result < 0   
1831c                 | '     return -result                       'return success or error
1831c     02 FB 61 F6 | 	neg	result1, _var03
18320                 | LR__1921
18320                 | _psram_spin2_read1_ret
18320     2D 00 64 FD | 	ret
18324                 | 
18324                 | ' 
18324                 | ' '..............................................................................
18324                 | ' 
18324                 | ' {{
18324                 | ' }}
18324                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
18324                 | _psram_spin2_write
18324                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
18324                 | '     if drivercog == -1 ' driver must be running
18324     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
18328     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1832c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
18330     FF FF 7F FF 
18334     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
18338                 | '         return ERR_INACTIVE
18338     0F FA 65 A6 |  if_e	neg	result1, #15
1833c     7C 00 90 AD |  if_e	jmp	#LR__1931
18340                 | '     if count == 0 ' don't even bother writing
18340     00 16 0E F2 | 	cmp	arg03, #0 wz
18344                 | '         return 0
18344     00 FA 05 A6 |  if_e	mov	result1, #0
18348     70 00 90 AD |  if_e	jmp	#LR__1931
1834c                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1834c     00 FA 05 F6 | 	mov	result1, #0
18350     01 FA 61 FD | 	cogid	result1
18354     FD 00 02 F6 | 	mov	_var01, result1
18358     01 00 66 F0 | 	shl	_var01, #1
1835c     FD 00 02 F1 | 	add	_var01, result1
18360     02 00 66 F0 | 	shl	_var01, #2
18364     FF 03 00 FF 
18368     00 03 06 F6 | 	mov	_var02, ##524032
1836c     00 03 02 F1 | 	add	_var02, _var01
18370                 | '     if long[mailbox] < 0
18370     01 01 02 FB | 	rdlong	_var01, _var02
18374     00 00 56 F2 | 	cmps	_var01, #0 wc
18378                 | '         return ERR_MAILBOX_BUSY
18378     1C FA 65 C6 |  if_b	neg	result1, #28
1837c     3C 00 90 CD |  if_b	jmp	#LR__1931
18380                 | '     long[mailbox][2] := count
18380     08 02 06 F1 | 	add	_var02, #8
18384     01 17 62 FC | 	wrlong	arg03, _var02
18388                 | '     long[mailbox][1] := srcHubAddr
18388     04 02 86 F1 | 	sub	_var02, #4
1838c     01 13 62 FC | 	wrlong	arg01, _var02
18390     04 02 86 F1 | 	sub	_var02, #4
18394                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
18394     0A 05 02 F6 | 	mov	_var03, arg02
18398     D9 04 06 F4 | 	bitl	_var03, #217
1839c     00 00 78 FF 
183a0     00 00 06 F6 | 	mov	_var01, ##-268435456
183a4     02 01 02 F1 | 	add	_var01, _var03
183a8     01 01 62 FC | 	wrlong	_var01, _var02
183ac                 | '     repeat
183ac                 | LR__1930
183ac                 | '         result := long[mailbox]    
183ac     01 05 02 FB | 	rdlong	_var03, _var02
183b0     00 04 56 F2 | 	cmps	_var03, #0 wc
183b4     F4 FF 9F CD |  if_b	jmp	#LR__1930
183b8                 | '     while result < 0   
183b8                 | '     return -result                       'return success or error
183b8     02 FB 61 F6 | 	neg	result1, _var03
183bc                 | LR__1931
183bc                 | _psram_spin2_write_ret
183bc     2D 00 64 FD | 	ret
183c0                 | 
183c0                 | ' 
183c0                 | ' ' generalized fill
183c0                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
183c0                 | _psram_spin2_fill
183c0     09 01 02 F6 | 	mov	_var01, arg01
183c4     0A 03 02 F6 | 	mov	_var02, arg02
183c8     0B 05 02 F6 | 	mov	_var03, arg03
183cc     0D 07 02 F6 | 	mov	_var04, arg05
183d0                 | '     case datasize 
183d0     01 06 86 F1 | 	sub	_var04, #1
183d4     04 06 26 F3 | 	fle	_var04, #4
183d8     30 06 62 FD | 	jmprel	_var04
183dc                 | LR__1940
183dc     10 00 90 FD | 	jmp	#LR__1941
183e0     18 00 90 FD | 	jmp	#LR__1942
183e4     2C 00 90 FD | 	jmp	#LR__1944
183e8     1C 00 90 FD | 	jmp	#LR__1943
183ec     24 00 90 FD | 	jmp	#LR__1944
183f0                 | LR__1941
183f0                 | '         1: req := driver.R_WRITEBYTE
183f0     00 00 60 FF 
183f4     00 08 06 F6 | 	mov	_var05, ##-1073741824
183f8     20 00 90 FD | 	jmp	#LR__1945
183fc                 | LR__1942
183fc                 | '         2: req := driver.R_WRITEWORD
183fc     00 00 68 FF 
18400     00 08 06 F6 | 	mov	_var05, ##-805306368
18404     14 00 90 FD | 	jmp	#LR__1945
18408                 | LR__1943
18408                 | '         4: req := driver.R_WRITELONG
18408     00 00 70 FF 
1840c     00 08 06 F6 | 	mov	_var05, ##-536870912
18410     08 00 90 FD | 	jmp	#LR__1945
18414                 | LR__1944
18414                 | '         other : return ERR_INVALID
18414     06 FA 65 F6 | 	neg	result1, #6
18418     94 00 90 FD | 	jmp	#LR__1947
1841c                 | LR__1945
1841c                 | '     if count == 0   ' nothing to do
1841c     00 04 0E F2 | 	cmp	_var03, #0 wz
18420                 | '         return 0
18420     00 FA 05 A6 |  if_e	mov	result1, #0
18424     88 00 90 AD |  if_e	jmp	#LR__1947
18428                 | '     if drivercog == -1
18428     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1842c     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
18430     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
18434     FF FF 7F FF 
18438     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
1843c                 | '         return ERR_INACTIVE
1843c     0F FA 65 A6 |  if_e	neg	result1, #15
18440     6C 00 90 AD |  if_e	jmp	#LR__1947
18444                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
18444     00 FA 05 F6 | 	mov	result1, #0
18448     01 FA 61 FD | 	cogid	result1
1844c     FD 06 02 F6 | 	mov	_var04, result1
18450     01 06 66 F0 | 	shl	_var04, #1
18454     FD 06 02 F1 | 	add	_var04, result1
18458     02 06 66 F0 | 	shl	_var04, #2
1845c     FF 03 00 FF 
18460     00 0B 06 F6 | 	mov	_var06, ##524032
18464     03 0B 02 F1 | 	add	_var06, _var04
18468                 | '     if long[mailbox] < 0
18468     05 07 02 FB | 	rdlong	_var04, _var06
1846c     00 06 56 F2 | 	cmps	_var04, #0 wc
18470                 | '         return ERR_MAILBOX_BUSY
18470     1C FA 65 C6 |  if_b	neg	result1, #28
18474     38 00 90 CD |  if_b	jmp	#LR__1947
18478                 | '     long[mailbox][2] := count
18478     08 0A 06 F1 | 	add	_var06, #8
1847c     05 05 62 FC | 	wrlong	_var03, _var06
18480                 | '     long[mailbox][1] := pattern
18480     04 0A 86 F1 | 	sub	_var06, #4
18484     05 03 62 FC | 	wrlong	_var02, _var06
18488     04 0A 86 F1 | 	sub	_var06, #4
1848c                 | '     long[mailbox] := req + (addr & $fffffff)
1848c     04 0D 02 F6 | 	mov	_var07, _var05
18490     00 0F 02 F6 | 	mov	_var08, _var01
18494     7C 0E 06 F4 | 	bitl	_var08, #124
18498     07 0D 02 F1 | 	add	_var07, _var08
1849c     05 0D 62 FC | 	wrlong	_var07, _var06
184a0                 | '     repeat
184a0                 | LR__1946
184a0                 | '         r := long[mailbox]
184a0     05 0F 02 FB | 	rdlong	_var08, _var06
184a4     00 0E 56 F2 | 	cmps	_var08, #0 wc
184a8     F4 FF 9F CD |  if_b	jmp	#LR__1946
184ac                 | '     while r < 0
184ac                 | '     return -r                  ' return 0 for success or negated error code
184ac     07 FB 61 F6 | 	neg	result1, _var08
184b0                 | LR__1947
184b0                 | _psram_spin2_fill_ret
184b0     2D 00 64 FD | 	ret
184b4                 | 
184b4                 | ' 
184b4                 | ' '..............................................................................
184b4                 | ' 
184b4                 | ' {{
184b4                 | ' }}
184b4                 | ' PUB setQos(cog, qos) : result | mailbox
184b4                 | _psram_spin2_setQos
184b4     09 01 02 F6 | 	mov	_var01, arg01
184b8                 | '     if drivercog == -1 ' driver must be running
184b8     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
184bc     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
184c0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
184c4     FF FF 7F FF 
184c8     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
184cc                 | '         return ERR_INACTIVE
184cc     0F FA 65 A6 |  if_e	neg	result1, #15
184d0     9C 00 90 AD |  if_e	jmp	#LR__1954
184d4                 | '     if cog < 0 or cog > 7 ' enforce cog id range
184d4     00 00 56 F2 | 	cmps	_var01, #0 wc
184d8     08 00 90 CD |  if_b	jmp	#LR__1950
184dc     08 00 56 F2 | 	cmps	_var01, #8 wc
184e0     08 00 90 CD |  if_b	jmp	#LR__1951
184e4                 | LR__1950
184e4                 | '         return ERR_INVALID
184e4     06 FA 65 F6 | 	neg	result1, #6
184e8     84 00 90 FD | 	jmp	#LR__1954
184ec                 | LR__1951
184ec                 | '     long[@qosData][cog] := qos & !$1ff
184ec     FF 15 26 F5 | 	andn	arg02, #511
184f0     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
184f4     02 00 66 F0 | 	shl	_var01, #2
184f8     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
184fc     00 15 62 FC | 	wrlong	arg02, _var01
18500                 | '     mailbox := $7FF00 + drivercog*12
18500     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
18504     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
18508     02 07 02 F6 | 	mov	_var04, _var03
1850c     01 06 66 F0 | 	shl	_var04, #1
18510     02 07 02 F1 | 	add	_var04, _var03
18514     02 06 66 F0 | 	shl	_var04, #2
18518     FF 03 00 FF 
1851c     00 09 06 F6 | 	mov	_var05, ##524032
18520     03 09 02 F1 | 	add	_var05, _var04
18524                 | '     repeat until LOCKTRY(driverlock)
18524     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
18528                 | LR__1952
18528     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1852c     06 12 72 FD | 	locktry	arg01 wc
18530     F4 FF 9F 3D |  if_ae	jmp	#LR__1952
18534     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
18538                 | '     long[mailbox] := driver.R_CONFIG + cogid()
18538     00 06 06 F6 | 	mov	_var04, #0
1853c     01 06 62 FD | 	cogid	_var04
18540     00 00 78 FF 
18544     00 02 06 F6 | 	mov	_var02, ##-268435456
18548     03 03 02 F1 | 	add	_var02, _var04
1854c     04 03 62 FC | 	wrlong	_var02, _var05
18550                 | '     repeat while long[mailbox] < 0
18550                 | LR__1953
18550     04 03 02 FB | 	rdlong	_var02, _var05
18554     00 02 56 F2 | 	cmps	_var02, #0 wc
18558     F4 FF 9F CD |  if_b	jmp	#LR__1953
1855c                 | '     LOCKREL(driverlock)
1855c     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
18560     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
18564     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
18568     07 12 72 FD | 	lockrel	arg01 wc
1856c     00 FA 05 F6 | 	mov	result1, #0
18570                 | LR__1954
18570                 | _psram_spin2_setQos_ret
18570     2D 00 64 FD | 	ret
18574                 | 
18574                 | ' 
18574                 | ' '..............................................................................
18574                 | ' 
18574                 | ' {{
18574                 | ' }}
18574                 | ' PRI lookupDelay(freq) : delay | profile
18574                 | _psram_spin2_lookupDelay
18574                 | '     profile := @delayTable
18574     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
18578     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
1857c                 | '     delay := long[profile][0]
1857c     00 03 02 FB | 	rdlong	_var02, _var01
18580                 | '     repeat while long[profile][1] 
18580     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
18584     97 16 48 FB | 	callpa	#(@LR__1961-@LR__1960)>>2,fcache_load_ptr_
18588                 | LR__1960
18588     04 00 06 F1 | 	add	_var01, #4
1858c     00 FB 09 FB | 	rdlong	result1, _var01 wz
18590     04 00 86 F1 | 	sub	_var01, #4
18594     1C 00 90 AD |  if_e	jmp	#LR__1962
18598                 | '         if freq +< long[profile][1] 
18598     04 00 06 F1 | 	add	_var01, #4
1859c     00 FB 01 FB | 	rdlong	result1, _var01
185a0     04 00 86 F1 | 	sub	_var01, #4
185a4     FD 12 12 F2 | 	cmp	arg01, result1 wc
185a8                 | '             quit
185a8                 | '         profile += 4
185a8     04 00 06 31 |  if_ae	add	_var01, #4
185ac                 | '         delay++
185ac     01 02 06 31 |  if_ae	add	_var02, #1
185b0     D4 FF 9F 3D |  if_ae	jmp	#LR__1960
185b4                 | LR__1961
185b4                 | LR__1962
185b4     01 FB 01 F6 | 	mov	result1, _var02
185b8                 | _psram_spin2_lookupDelay_ret
185b8     2D 00 64 FD | 	ret
185bc                 | 
185bc                 | ' 
185bc                 | ' PUB start() : r
185bc                 | _usbnew_spin2_start
185bc     00 00 06 F6 | 	mov	_var01, #0
185c0                 | '   ifnot driver_cog
185c0     15 00 00 FF 
185c4     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
185c8     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
185cc     15 00 00 FF 
185d0     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
185d4     38 00 90 5D |  if_ne	jmp	#LR__1970
185d8                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
185d8     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
185dc     10 00 06 F6 | 	mov	_var01, #16
185e0     00 16 06 F6 | 	mov	arg03, #0
185e4     28 16 62 FD | 	setq	arg03
185e8     0A 01 F2 FC | 	coginit	_var01, arg02 wc
185ec     01 00 66 C6 |  if_b	neg	_var01, #1
185f0                 | '     if r >= 0
185f0     00 00 56 F2 | 	cmps	_var01, #0 wc
185f4                 | '       driver_cog := r+1
185f4     00 03 02 36 |  if_ae	mov	_var02, _var01
185f8     01 02 06 31 |  if_ae	add	_var02, #1
185fc     15 00 00 3F 
18600     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
18604     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
18608     15 00 00 3F 
1860c     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
18610                 | LR__1970
18610     00 FB 01 F6 | 	mov	result1, _var01
18614                 | _usbnew_spin2_start_ret
18614     2D 00 64 FD | 	ret
18618                 | 
18618                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
18618                 | ' 
18618                 | ' '' Return key event from buffer if there is one
18618                 | ' PUB get_key() : r | tail
18618                 | _usbnew_spin2_get_key
18618                 | '   tail := keyq_tail
18618     0F 00 00 FF 
1861c     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
18620     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
18624                 | '   if keyq_head == tail
18624     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
18628     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
1862c     0F 00 00 FF 
18630     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
18634     00 03 0A F2 | 	cmp	_var02, _var01 wz
18638                 | '     return 0 ' No event
18638     00 FA 05 A6 |  if_e	mov	result1, #0
1863c     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
18640                 | '   r := keyq_data[tail]
18640     00 03 02 F6 | 	mov	_var02, _var01
18644     02 02 66 F0 | 	shl	_var02, #2
18648     0F 00 00 FF 
1864c     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
18650     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
18654     01 FB 01 FB | 	rdlong	result1, _var02
18658                 | '   if ++tail == KEYQUEUE_SIZE
18658     01 00 06 F1 | 	add	_var01, #1
1865c     80 00 0E F2 | 	cmp	_var01, #128 wz
18660                 | '     tail := 0
18660     00 00 06 A6 |  if_e	mov	_var01, #0
18664                 | '   keyq_tail := tail
18664     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
18668     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
1866c     0F 00 00 FF 
18670     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
18674                 | _usbnew_spin2_get_key_ret
18674     2D 00 64 FD | 	ret
18678                 | 
18678                 | ' 
18678                 | ' '' Emulate mouse movement
18678                 | ' PUB mouse_move(x,y)
18678                 | _usbnew_spin2_mouse_move
18678     02 4A 05 F6 | 	mov	COUNT_, #2
1867c     A8 00 A0 FD | 	call	#pushregs_
18680     09 1F 02 F6 | 	mov	local01, arg01
18684     0A 21 02 F6 | 	mov	local02, arg02
18688                 | '   mouse_lock := 1
18688     14 00 00 FF 
1868c     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
18690     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
18694     14 00 00 FF 
18698     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
1869c                 | '   waitus(2) ' hope driver is now done
1869c     02 12 06 F6 | 	mov	arg01, #2
186a0     34 0A B0 FD | 	call	#__system___waitus
186a4                 | '   mouse_xacc := x
186a4     14 00 00 FF 
186a8     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
186ac     FB 1E 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
186b0                 | '   mouse_yacc := y
186b0     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
186b4     FB 20 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
186b8                 | '   if mouse_outptr
186b8     04 00 00 FF 
186bc     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
186c0     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
186c4     0F 00 00 FF 
186c8     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
186cc     24 00 90 AD |  if_e	jmp	#LR__1980
186d0                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
186d0     10 20 66 F0 | 	shl	local02, #16
186d4     0F 1F 32 F9 | 	getword	local01, local01, #0
186d8     0F 21 42 F5 | 	or	local02, local01
186dc     0F 00 00 FF 
186e0     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
186e4     FB 1E 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
186e8     0F 00 00 FF 
186ec     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
186f0     0F 21 62 FC | 	wrlong	local02, local01
186f4                 | LR__1980
186f4                 | '   mouse_lock := 0
186f4     14 00 00 FF 
186f8     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
186fc     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
18700     14 00 00 FF 
18704     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
18708     A7 F0 03 F6 | 	mov	ptra, fp
1870c     B2 00 A0 FD | 	call	#popregs_
18710                 | _usbnew_spin2_mouse_move_ret
18710     2D 00 64 FD | 	ret
18714                 | 
18714                 | '     '' Set HAVE_HIDPAD to enable.
18714                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
18714                 | ' 
18714                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
18714                 | ' PUB hidpad_id(dev) : r
18714                 | _usbnew_spin2_hidpad_id
18714                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
18714     13 00 00 FF 
18718     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1871c     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
18720     09 01 02 F6 | 	mov	_var01, arg01
18724     03 00 66 F0 | 	shl	_var01, #3
18728     09 01 82 F1 | 	sub	_var01, arg01
1872c     02 00 66 F0 | 	shl	_var01, #2
18730     00 FB 01 F1 | 	add	result1, _var01
18734     FD FA 01 FB | 	rdlong	result1, result1
18738     13 00 00 FF 
1873c     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
18740                 | _usbnew_spin2_hidpad_id_ret
18740     2D 00 64 FD | 	ret
18744                 | 
18744                 | ' 
18744                 | ' '' Get all button states for a device
18744                 | ' PUB hidpad_buttons(dev) : r 
18744                 | _usbnew_spin2_hidpad_buttons
18744                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
18744     13 00 00 FF 
18748     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1874c     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
18750     09 01 02 F6 | 	mov	_var01, arg01
18754     03 00 66 F0 | 	shl	_var01, #3
18758     09 01 82 F1 | 	sub	_var01, arg01
1875c     02 00 66 F0 | 	shl	_var01, #2
18760     00 FB 01 F1 | 	add	result1, _var01
18764     14 FA 05 F1 | 	add	result1, #20
18768     FD FA 01 FB | 	rdlong	result1, result1
1876c     13 00 00 FF 
18770     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
18774                 | _usbnew_spin2_hidpad_buttons_ret
18774     2D 00 64 FD | 	ret
18778                 | 
18778                 | ' 
18778                 | ' '' Get state of an axis (normalized between -32768 and 32767)
18778                 | ' PUB hidpad_axis(dev,axnum) : r
18778                 | _usbnew_spin2_hidpad_axis
18778                 | '   if axnum +>= 6
18778     06 14 16 F2 | 	cmp	arg02, #6 wc
1877c                 | '     return 0
1877c     00 FA 05 36 |  if_ae	mov	result1, #0
18780     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
18784                 | '   else 
18784                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
18784     13 00 00 FF 
18788     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1878c     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
18790     09 01 02 F6 | 	mov	_var01, arg01
18794     03 00 66 F0 | 	shl	_var01, #3
18798     09 01 82 F1 | 	sub	_var01, arg01
1879c     02 00 66 F0 | 	shl	_var01, #2
187a0     00 FB 01 F1 | 	add	result1, _var01
187a4     04 00 06 F6 | 	mov	_var01, #4
187a8     0A 01 02 F1 | 	add	_var01, arg02
187ac     01 00 66 F0 | 	shl	_var01, #1
187b0     FD 00 02 F1 | 	add	_var01, result1
187b4     00 FB E1 FA | 	rdword	result1, _var01
187b8     0F FA 65 F7 | 	signx	result1, #15
187bc     13 00 00 FF 
187c0     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
187c4                 | _usbnew_spin2_hidpad_axis_ret
187c4     2D 00 64 FD | 	ret
187c8                 | 
187c8                 | ' 
187c8                 | ' 
187c8                 | ' '--------------------------------------------------------------
187c8                 | ' '---------- Init the variables, start the cog. ----------------
187c8                 | ' '--------------------------------------------------------------
187c8                 | ' 
187c8                 | ' pub start(mbox,scope,cache) :cog,base | iii
187c8                 | _Audio093b_8_sc_spin2_start
187c8     04 4A 05 F6 | 	mov	COUNT_, #4
187cc     A8 00 A0 FD | 	call	#pushregs_
187d0     09 1F 02 F6 | 	mov	local01, arg01
187d4                 | ' 
187d4                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
187d4                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
187d4                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
187d4                 | ' 
187d4                 | ' mailboxaddr:=mbox 
187d4     F2 1E 62 FC | 	wrlong	local01, objptr
187d8                 | ' scope_ptr:=scope
187d8     04 E4 05 F1 | 	add	objptr, #4
187dc     F2 14 62 FC | 	wrlong	arg02, objptr
187e0                 | ' cache_ptr:=cache
187e0     04 E4 05 F1 | 	add	objptr, #4
187e4     F2 16 62 FC | 	wrlong	arg03, objptr
187e8                 | ' base:=@channel1[0]
187e8     04 E4 05 F1 | 	add	objptr, #4
187ec     F2 20 02 F6 | 	mov	local02, objptr
187f0                 | ' 
187f0                 | ' repeat iii from 0 to 7
187f0     00 22 06 F6 | 	mov	local03, #0
187f4     01 00 00 FF 
187f8     F8 E7 05 F1 | 	add	ptr__Audio093b_8_sc_spin2_dat__, ##1016
187fc     0C E4 85 F1 | 	sub	objptr, #12
18800     97 80 48 FB | 	callpa	#(@LR__1991-@LR__1990)>>2,fcache_load_ptr_
18804                 | LR__1990
18804                 | '   long[base+64*iii]:=0
18804     10 1F 02 F6 | 	mov	local01, local02
18808     11 FD 01 F6 | 	mov	result2, local03
1880c     06 FC 65 F0 | 	shl	result2, #6
18810     FE 1E 02 F1 | 	add	local01, result2
18814     0F 01 68 FC | 	wrlong	#0, local01
18818                 | '   long[base+64*iii+4]:=0
18818     10 1F 02 F6 | 	mov	local01, local02
1881c     11 FD 01 F6 | 	mov	result2, local03
18820     06 FC 65 F0 | 	shl	result2, #6
18824     FE 1E 02 F1 | 	add	local01, result2
18828     04 1E 06 F1 | 	add	local01, #4
1882c     0F 01 68 FC | 	wrlong	#0, local01
18830                 | '   long[base+64*iii+12]:=0
18830     10 25 02 F6 | 	mov	local04, local02
18834     11 1F 02 F6 | 	mov	local01, local03
18838     06 1E 66 F0 | 	shl	local01, #6
1883c     0F 25 02 F1 | 	add	local04, local01
18840     0C 24 06 F1 | 	add	local04, #12
18844     12 01 68 FC | 	wrlong	#0, local04
18848                 | '   long[base+64*iii+16]:=2 
18848     10 25 02 F6 | 	mov	local04, local02
1884c     11 1F 02 F6 | 	mov	local01, local03
18850     06 1E 66 F0 | 	shl	local01, #6
18854     0F 25 02 F1 | 	add	local04, local01
18858     10 24 06 F1 | 	add	local04, #16
1885c     12 05 68 FC | 	wrlong	#2, local04
18860                 | '   word[base+64*iii+20]:=0
18860     10 25 02 F6 | 	mov	local04, local02
18864     11 1F 02 F6 | 	mov	local01, local03
18868     06 1E 66 F0 | 	shl	local01, #6
1886c     0F 25 02 F1 | 	add	local04, local01
18870     14 24 06 F1 | 	add	local04, #20
18874     12 01 58 FC | 	wrword	#0, local04
18878                 | '   word[base+64*iii+22]:=8192
18878     10 25 02 F6 | 	mov	local04, local02
1887c     11 1F 02 F6 | 	mov	local01, local03
18880     06 1E 66 F0 | 	shl	local01, #6
18884     0F 25 02 F1 | 	add	local04, local01
18888     16 24 06 F1 | 	add	local04, #22
1888c     10 00 80 FF 
18890     12 01 58 FC | 	wrword	##8192, local04
18894                 | '   word[base+64*iii+24]:=4000+2*iii
18894     11 25 02 F6 | 	mov	local04, local03
18898     01 24 66 F0 | 	shl	local04, #1
1889c     07 00 00 FF 
188a0     A0 1F 06 F6 | 	mov	local01, ##4000
188a4     12 1F 02 F1 | 	add	local01, local04
188a8     10 25 02 F6 | 	mov	local04, local02
188ac     11 FD 01 F6 | 	mov	result2, local03
188b0     06 FC 65 F0 | 	shl	result2, #6
188b4     FE 24 02 F1 | 	add	local04, result2
188b8     18 24 06 F1 | 	add	local04, #24
188bc     12 1F 52 FC | 	wrword	local01, local04
188c0                 | '   word[base+64*iii+26]:=2
188c0     10 25 02 F6 | 	mov	local04, local02
188c4     11 1F 02 F6 | 	mov	local01, local03
188c8     06 1E 66 F0 | 	shl	local01, #6
188cc     0F 25 02 F1 | 	add	local04, local01
188d0     1A 24 06 F1 | 	add	local04, #26
188d4     12 05 58 FC | 	wrword	#2, local04
188d8                 | '   long [base+64*iii+8]:=@null | $C0000000
188d8     F3 1E 02 F6 | 	mov	local01, ptr__Audio093b_8_sc_spin2_dat__
188dc     3E 1E 26 F4 | 	bith	local01, #62
188e0     10 25 02 F6 | 	mov	local04, local02
188e4     11 17 02 F6 | 	mov	arg03, local03
188e8     06 16 66 F0 | 	shl	arg03, #6
188ec     0B 25 02 F1 | 	add	local04, arg03
188f0     08 24 06 F1 | 	add	local04, #8
188f4     12 1F 62 FC | 	wrlong	local01, local04
188f8     01 22 06 F1 | 	add	local03, #1
188fc     08 22 56 F2 | 	cmps	local03, #8 wc
18900     00 FF 9F CD |  if_b	jmp	#LR__1990
18904                 | LR__1991
18904     01 00 00 FF 
18908     F8 E7 85 F1 | 	sub	ptr__Audio093b_8_sc_spin2_dat__, ##1016
1890c                 | '   
1890c                 | ' cog:=coginit(16,@audio,@mailboxaddr)
1890c     F3 14 02 F6 | 	mov	arg02, ptr__Audio093b_8_sc_spin2_dat__
18910     F2 16 02 F6 | 	mov	arg03, objptr
18914     10 24 06 F6 | 	mov	local04, #16
18918     28 16 62 FD | 	setq	arg03
1891c     0A 25 F2 FC | 	coginit	local04, arg02 wc
18920     01 24 66 C6 |  if_b	neg	local04, #1
18924                 | ' waitms(100)
18924     64 12 06 F6 | 	mov	arg01, #100
18928     40 07 B0 FD | 	call	#__system___waitms
1892c                 | ' return cog,base
1892c     10 FD 01 F6 | 	mov	result2, local02
18930     12 FB 01 F6 | 	mov	result1, local04
18934     A7 F0 03 F6 | 	mov	ptra, fp
18938     B2 00 A0 FD | 	call	#popregs_
1893c                 | _Audio093b_8_sc_spin2_start_ret
1893c     2D 00 64 FD | 	ret
18940                 | 
18940                 | ' 
18940                 | ' ' a simple play procedure to not poke everything. 
18940                 | ' 
18940                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
18940                 | _Audio093b_8_sc_spin2_play
18940     0C E4 05 F1 | 	add	objptr, #12
18944     F2 00 02 F6 | 	mov	_var01, objptr
18948     06 12 66 F0 | 	shl	arg01, #6
1894c     09 01 02 F1 | 	add	_var01, arg01
18950     00 00 60 FF 
18954     00 14 06 F1 | 	add	arg02, ##-1073741824
18958     00 13 02 F6 | 	mov	arg01, _var01
1895c     08 12 06 F1 | 	add	arg01, #8
18960     09 15 62 FC | 	wrlong	arg02, arg01
18964     00 15 02 F6 | 	mov	arg02, _var01
18968     0C 14 06 F1 | 	add	arg02, #12
1896c     0A 1B 62 FC | 	wrlong	arg05, arg02
18970     00 1C 56 F2 | 	cmps	arg06, #0 wc
18974     00 15 02 36 |  if_ae	mov	arg02, _var01
18978     10 14 06 31 |  if_ae	add	arg02, #16
1897c     0A 1D 62 3C |  if_ae	wrlong	arg06, arg02
18980     02 1A 06 C1 |  if_b	add	arg05, #2
18984     00 13 02 C6 |  if_b	mov	arg01, _var01
18988     10 12 06 C1 |  if_b	add	arg01, #16
1898c     09 1B 62 CC |  if_b	wrlong	arg05, arg01
18990     0B 15 52 F6 | 	abs	arg02, arg03 wc
18994     0F 1B 80 FF 
18998     0A 3F 1A FD | 	qdiv	##3546911, arg02
1899c                 | ' 
1899c                 | ' base2:=@channel1[0]+64*channel
1899c                 | ' long[base2+8]:=sample+$C0000000 
1899c                 | ' long[base2+12]:= len
1899c                 | ' if loop >=0 
1899c                 | '   long[base2+16]:= loop
1899c     0C E4 85 F1 | 	sub	objptr, #12
189a0                 | ' else
189a0                 | '   long[base2+16]:= len+2
189a0                 | ' word[base2+20]:=vol
189a0     00 15 02 F6 | 	mov	arg02, _var01
189a4     14 14 06 F1 | 	add	arg02, #20
189a8     0A 19 52 FC | 	wrword	arg04, arg02
189ac                 | ' word[base2+24]:= 3546911/splfreq 
189ac     00 13 02 F6 | 	mov	arg01, _var01
189b0     18 12 06 F1 | 	add	arg01, #24
189b4                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
189b4                 | ' long[base2+28]:=$40000000
189b4     18 14 62 FD | 	getqx	arg02
189b8     0A 15 82 F6 | 	negc	arg02, arg02
189bc     09 15 52 FC | 	wrword	arg02, arg01
189c0     00 15 02 F6 | 	mov	arg02, _var01
189c4     1A 14 06 F1 | 	add	arg02, #26
189c8     0A 01 5A FC | 	wrword	#256, arg02
189cc     1C 00 06 F1 | 	add	_var01, #28
189d0     00 00 A0 FF 
189d4     00 01 68 FC | 	wrlong	##1073741824, _var01
189d8                 | _Audio093b_8_sc_spin2_play_ret
189d8     2D 00 64 FD | 	ret
189dc                 | 
189dc                 | ' until (i >>8) >=len
189dc                 | ' 
189dc                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
189dc                 | _Audio093b_8_sc_spin2_play8
189dc                 | ' 
189dc                 | ' base2:=@channel1[0]+64*channel
189dc     0C E4 05 F1 | 	add	objptr, #12
189e0     F2 00 02 F6 | 	mov	_var01, objptr
189e4     06 12 66 F0 | 	shl	arg01, #6
189e8     09 01 02 F1 | 	add	_var01, arg01
189ec                 | ' long[base2]:=0
189ec     00 01 68 FC | 	wrlong	#0, _var01
189f0                 | ' long[base2+8]:=sample+$40000000 
189f0     00 00 20 FF 
189f4     00 14 06 F1 | 	add	arg02, ##1073741824
189f8     00 13 02 F6 | 	mov	arg01, _var01
189fc     08 12 06 F1 | 	add	arg01, #8
18a00     09 15 62 FC | 	wrlong	arg02, arg01
18a04                 | ' if loop>=0
18a04     00 1C 56 F2 | 	cmps	arg06, #0 wc
18a08     0C E4 85 F1 | 	sub	objptr, #12
18a0c     1C 00 90 CD |  if_b	jmp	#LR__2000
18a10                 | '   long[base2+12]:=loop
18a10     00 15 02 F6 | 	mov	arg02, _var01
18a14     0C 14 06 F1 | 	add	arg02, #12
18a18     0A 1D 62 FC | 	wrlong	arg06, arg02
18a1c                 | '   long[base2+16]:= len
18a1c     00 1D 02 F6 | 	mov	arg06, _var01
18a20     10 1C 06 F1 | 	add	arg06, #16
18a24     0E 1B 62 FC | 	wrlong	arg05, arg06
18a28     1C 00 90 FD | 	jmp	#LR__2001
18a2c                 | LR__2000
18a2c                 | ' else
18a2c                 | '   long[base2+12]:= len
18a2c     00 1D 02 F6 | 	mov	arg06, _var01
18a30     0C 1C 06 F1 | 	add	arg06, #12
18a34     0E 1B 62 FC | 	wrlong	arg05, arg06
18a38                 | '   long[base2+16]:= len+1
18a38     01 1A 06 F1 | 	add	arg05, #1
18a3c     00 13 02 F6 | 	mov	arg01, _var01
18a40     10 12 06 F1 | 	add	arg01, #16
18a44     09 1B 62 FC | 	wrlong	arg05, arg01
18a48                 | LR__2001
18a48     0B 17 52 F6 | 	abs	arg03, arg03 wc
18a4c     0F 1B 80 FF 
18a50     0B 3F 1A FD | 	qdiv	##3546911, arg03
18a54                 | ' word[base2+20]:=vol
18a54     00 17 02 F6 | 	mov	arg03, _var01
18a58     14 16 06 F1 | 	add	arg03, #20
18a5c     0B 19 52 FC | 	wrword	arg04, arg03
18a60                 | ' word[base2+24]:= 3546911/splfreq 
18a60     00 13 02 F6 | 	mov	arg01, _var01
18a64     18 12 06 F1 | 	add	arg01, #24
18a68                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
18a68                 | ' long[base2+28]:=$40000000
18a68     18 18 62 FD | 	getqx	arg04
18a6c     0C 19 82 F6 | 	negc	arg04, arg04
18a70     09 19 52 FC | 	wrword	arg04, arg01
18a74     00 19 02 F6 | 	mov	arg04, _var01
18a78     1A 18 06 F1 | 	add	arg04, #26
18a7c     0C 01 5A FC | 	wrword	#256, arg04
18a80     1C 00 06 F1 | 	add	_var01, #28
18a84     00 00 A0 FF 
18a88     00 01 68 FC | 	wrlong	##1073741824, _var01
18a8c                 | _Audio093b_8_sc_spin2_play8_ret
18a8c     2D 00 64 FD | 	ret
18a90                 | 
18a90                 | ' 
18a90                 | '     
18a90                 | ' pub stop(channel) 'silence it
18a90                 | _Audio093b_8_sc_spin2_stop
18a90                 | ' 
18a90                 | ' word[@channel1[0]+64*channel+20]:=0
18a90     0C E4 05 F1 | 	add	objptr, #12
18a94     F2 00 02 F6 | 	mov	_var01, objptr
18a98     06 12 66 F0 | 	shl	arg01, #6
18a9c     09 01 02 F1 | 	add	_var01, arg01
18aa0     14 00 06 F1 | 	add	_var01, #20
18aa4     00 01 58 FC | 	wrword	#0, _var01
18aa8     0C E4 85 F1 | 	sub	objptr, #12
18aac                 | _Audio093b_8_sc_spin2_stop_ret
18aac     2D 00 64 FD | 	ret
18ab0                 | hubexit
18ab0     81 00 80 FD | 	jmp	#cogexit
18ab4                 | 
18ab4                 | __system___setbaud
18ab4     14 62 06 FB | 	rdlong	muldiva_, #20
18ab8     09 65 02 F6 | 	mov	muldivb_, arg01
18abc     BA 00 A0 FD | 	call	#divide_
18ac0     97 06 48 FB | 	callpa	#(@LR__2011-@LR__2010)>>2,fcache_load_ptr_
18ac4                 | LR__2010
18ac4     3E FA 9D FA | 	rdpin	result1, #62 wc
18ac8     FE FC A1 F1 | 	subx	result2, result2
18acc     F4 FF 9F CD |  if_b	jmp	#LR__2010
18ad0                 | LR__2011
18ad0     40 7C 64 FD | 	dirl	#62
18ad4     40 7E 64 FD | 	dirl	#63
18ad8     F4 64 62 FC | 	wrlong	muldivb_, ptr___system__dat__
18adc     10 64 66 F0 | 	shl	muldivb_, #16
18ae0     07 14 06 F6 | 	mov	arg02, #7
18ae4     32 15 02 F1 | 	add	arg02, muldivb_
18ae8     3E F8 0C FC | 	wrpin	#124, #62
18aec     3E 14 16 FC | 	wxpin	arg02, #62
18af0     3F 7C 0C FC | 	wrpin	#62, #63
18af4     14 14 06 F1 | 	add	arg02, #20
18af8     3F 14 16 FC | 	wxpin	arg02, #63
18afc     41 7C 64 FD | 	dirh	#62
18b00     41 7E 64 FD | 	dirh	#63
18b04                 | __system___setbaud_ret
18b04     2D 00 64 FD | 	ret
18b08                 | 
18b08                 | __system___txraw
18b08     01 4A 05 F6 | 	mov	COUNT_, #1
18b0c     A8 00 A0 FD | 	call	#pushregs_
18b10     09 1F 02 F6 | 	mov	local01, arg01
18b14     97 06 48 FB | 	callpa	#(@LR__2021-@LR__2020)>>2,fcache_load_ptr_
18b18                 | LR__2020
18b18     3E FA 9D FA | 	rdpin	result1, #62 wc
18b1c     FE FC A1 F1 | 	subx	result2, result2
18b20     F4 FF 9F CD |  if_b	jmp	#LR__2020
18b24                 | LR__2021
18b24     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
18b28     C2 01 00 AF 
18b2c     00 12 06 A6 |  if_e	mov	arg01, ##230400
18b30     80 FF BF AD |  if_e	call	#__system___setbaud
18b34     58 7C 64 FD | 	drvl	#62
18b38     3E 1E 26 FC | 	wypin	local01, #62
18b3c     01 FA 05 F6 | 	mov	result1, #1
18b40     A7 F0 03 F6 | 	mov	ptra, fp
18b44     B2 00 A0 FD | 	call	#popregs_
18b48                 | __system___txraw_ret
18b48     2D 00 64 FD | 	ret
18b4c                 | 
18b4c                 | __system___rxraw
18b4c     0D 4A 05 F6 | 	mov	COUNT_, #13
18b50     A8 00 A0 FD | 	call	#pushregs_
18b54     09 1F 02 F6 | 	mov	local01, arg01
18b58     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
18b5c     C2 01 00 AF 
18b60     00 12 06 A6 |  if_e	mov	arg01, ##230400
18b64     4C FF BF AD |  if_e	call	#__system___setbaud
18b68     00 1E 0E F2 | 	cmp	local01, #0 wz
18b6c     20 00 90 AD |  if_e	jmp	#LR__2030
18b70     14 22 06 FB | 	rdlong	local03, #20
18b74     0A 22 46 F0 | 	shr	local03, #10
18b78     11 1F 02 FD | 	qmul	local01, local03
18b7c     1A FA 61 FD | 	getct	result1
18b80     18 24 62 FD | 	getqx	local04
18b84     12 FB 01 F1 | 	add	result1, local04
18b88     FD 26 02 F6 | 	mov	local05, result1
18b8c     04 00 90 FD | 	jmp	#LR__2031
18b90                 | LR__2030
18b90     00 26 06 F6 | 	mov	local05, #0
18b94                 | LR__2031
18b94     01 28 66 F6 | 	neg	local06, #1
18b98     3F 2A 06 F6 | 	mov	local07, #63
18b9c     00 2C 06 F6 | 	mov	local08, #0
18ba0     04 E8 05 F1 | 	add	ptr___system__dat__, #4
18ba4     F4 2E 02 FB | 	rdlong	local09, ptr___system__dat__
18ba8     04 E8 85 F1 | 	sub	ptr___system__dat__, #4
18bac                 | LR__2032
18bac     08 2E 16 F4 | 	testb	local09, #8 wc
18bb0     09 2E 76 F4 | 	testbn	local09, #9 andc
18bb4     0A 2E 46 F0 | 	shr	local09, #10
18bb8     01 2C 06 C6 |  if_b	mov	local08, #1
18bbc     40 7E 6C 3D |  if_ae	testp	#63 wz
18bc0     01 2C 06 26 |  if_nc_and_z	mov	local08, #1
18bc4     3F 2E 8E 2A |  if_nc_and_z	rdpin	local09, #63
18bc8     04 2E 46 20 |  if_nc_and_z	shr	local09, #4
18bcc                 | LR__2033
18bcc     00 20 06 F6 | 	mov	local02, #0
18bd0     00 2C 0E F2 | 	cmp	local08, #0 wz
18bd4     01 20 66 56 |  if_ne	neg	local02, #1
18bd8     00 30 06 F6 | 	mov	local10, #0
18bdc     00 22 06 F6 | 	mov	local03, #0
18be0     00 1E 0E F2 | 	cmp	local01, #0 wz
18be4     01 22 66 56 |  if_ne	neg	local03, #1
18be8     00 24 06 F6 | 	mov	local04, #0
18bec     00 32 06 F6 | 	mov	local11, #0
18bf0     1A FA 61 FD | 	getct	result1
18bf4     FD 34 02 F6 | 	mov	local12, result1
18bf8     1A 37 02 F6 | 	mov	local13, local12
18bfc     13 37 82 F1 | 	sub	local13, local05
18c00     00 36 56 F2 | 	cmps	local13, #0 wc
18c04     00 32 26 C6 |  if_b	not	local11, #0
18c08     00 32 0E F2 | 	cmp	local11, #0 wz
18c0c     00 24 26 56 |  if_ne	not	local04, #0
18c10     12 23 CA F7 | 	test	local03, local04 wz
18c14     00 30 26 56 |  if_ne	not	local10, #0
18c18     18 21 4A F5 | 	or	local02, local10 wz
18c1c     8C FF 9F AD |  if_e	jmp	#LR__2032
18c20     00 2C 0E F2 | 	cmp	local08, #0 wz
18c24     17 29 02 56 |  if_ne	mov	local06, local09
18c28     14 29 E2 58 |  if_ne	getbyte	local06, local06, #0
18c2c     04 E8 05 F1 | 	add	ptr___system__dat__, #4
18c30     F4 2E 62 FC | 	wrlong	local09, ptr___system__dat__
18c34     04 E8 85 F1 | 	sub	ptr___system__dat__, #4
18c38     14 FB 01 F6 | 	mov	result1, local06
18c3c     A7 F0 03 F6 | 	mov	ptra, fp
18c40     B2 00 A0 FD | 	call	#popregs_
18c44                 | __system___rxraw_ret
18c44     2D 00 64 FD | 	ret
18c48                 | 
18c48                 | __system___getus
18c48     1A FC 71 FD | 	getct	result2 wc
18c4c     1A 00 62 FD | 	getct	_var01
18c50     10 E8 05 F1 | 	add	ptr___system__dat__, #16
18c54     F4 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
18c58     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
18c5c     20 00 90 5D |  if_ne	jmp	#LR__2040
18c60     14 02 06 FB | 	rdlong	_var02, #20
18c64     A1 07 00 FF 
18c68     40 02 16 FD | 	qdiv	_var02, ##1000000
18c6c     10 E8 05 F1 | 	add	ptr___system__dat__, #16
18c70     18 FA 61 FD | 	getqx	result1
18c74     FD 02 02 F6 | 	mov	_var02, result1
18c78     F4 FA 61 FC | 	wrlong	result1, ptr___system__dat__
18c7c     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
18c80                 | LR__2040
18c80     01 FD 11 FD | 	qdiv	result2, _var02
18c84     19 FC 61 FD | 	getqy	result2
18c88     28 FC 61 FD | 	setq	result2
18c8c     01 01 12 FD | 	qdiv	_var01, _var02
18c90     18 FA 61 FD | 	getqx	result1
18c94                 | __system___getus_ret
18c94     2D 00 64 FD | 	ret
18c98                 | 
18c98                 | __system____builtin_memmove
18c98     09 01 02 F6 | 	mov	_var01, arg01
18c9c     0A 13 52 F2 | 	cmps	arg01, arg02 wc
18ca0     10 00 90 CD |  if_b	jmp	#LR__2050
18ca4     0A 03 02 F6 | 	mov	_var02, arg02
18ca8     0B 03 02 F1 | 	add	_var02, arg03
18cac     01 13 52 F2 | 	cmps	arg01, _var02 wc
18cb0     48 00 90 CD |  if_b	jmp	#LR__2056
18cb4                 | LR__2050
18cb4     0B 05 02 F6 | 	mov	_var03, arg03
18cb8     02 04 4E F0 | 	shr	_var03, #2 wz
18cbc     18 00 90 AD |  if_e	jmp	#LR__2055
18cc0     97 0A 48 FB | 	callpa	#(@LR__2053-@LR__2051)>>2,fcache_load_ptr_
18cc4                 | LR__2051
18cc4     02 09 D8 FC | 	rep	@LR__2054, _var03
18cc8                 | LR__2052
18cc8     0A 05 02 FB | 	rdlong	_var03, arg02
18ccc     09 05 62 FC | 	wrlong	_var03, arg01
18cd0     04 12 06 F1 | 	add	arg01, #4
18cd4     04 14 06 F1 | 	add	arg02, #4
18cd8                 | LR__2053
18cd8                 | LR__2054
18cd8                 | LR__2055
18cd8     02 16 CE F7 | 	test	arg03, #2 wz
18cdc     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
18ce0     09 03 52 5C |  if_ne	wrword	_var02, arg01
18ce4     02 12 06 51 |  if_ne	add	arg01, #2
18ce8     02 14 06 51 |  if_ne	add	arg02, #2
18cec     01 16 CE F7 | 	test	arg03, #1 wz
18cf0     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
18cf4     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
18cf8     28 00 90 FD | 	jmp	#LR__2062
18cfc                 | LR__2056
18cfc     0B 13 02 F1 | 	add	arg01, arg03
18d00     0B 15 02 F1 | 	add	arg02, arg03
18d04     0B 07 0A F6 | 	mov	_var04, arg03 wz
18d08     18 00 90 AD |  if_e	jmp	#LR__2061
18d0c     97 0A 48 FB | 	callpa	#(@LR__2059-@LR__2057)>>2,fcache_load_ptr_
18d10                 | LR__2057
18d10     03 09 D8 FC | 	rep	@LR__2060, _var04
18d14                 | LR__2058
18d14     01 12 86 F1 | 	sub	arg01, #1
18d18     01 14 86 F1 | 	sub	arg02, #1
18d1c     0A 03 C2 FA | 	rdbyte	_var02, arg02
18d20     09 03 42 FC | 	wrbyte	_var02, arg01
18d24                 | LR__2059
18d24                 | LR__2060
18d24                 | LR__2061
18d24                 | LR__2062
18d24     00 FB 01 F6 | 	mov	result1, _var01
18d28                 | __system____builtin_memmove_ret
18d28     2D 00 64 FD | 	ret
18d2c                 | 
18d2c                 | __system____builtin_strcpy
18d2c     09 01 02 F6 | 	mov	_var01, arg01
18d30     97 0A 48 FB | 	callpa	#(@LR__2071-@LR__2070)>>2,fcache_load_ptr_
18d34                 | LR__2070
18d34     0A FB C9 FA | 	rdbyte	result1, arg02 wz
18d38     09 FB 41 FC | 	wrbyte	result1, arg01
18d3c     01 14 06 F1 | 	add	arg02, #1
18d40     01 12 06 F1 | 	add	arg01, #1
18d44     EC FF 9F 5D |  if_ne	jmp	#LR__2070
18d48                 | LR__2071
18d48     00 FB 01 F6 | 	mov	result1, _var01
18d4c                 | __system____builtin_strcpy_ret
18d4c     2D 00 64 FD | 	ret
18d50                 | 
18d50                 | __system____topofstack
18d50     00 4A 05 F6 | 	mov	COUNT_, #0
18d54     A8 00 A0 FD | 	call	#pushregs_
18d58     08 F0 07 F1 | 	add	ptra, #8
18d5c     04 4E 05 F1 | 	add	fp, #4
18d60     A7 12 62 FC | 	wrlong	arg01, fp
18d64     A7 FA 01 F6 | 	mov	result1, fp
18d68     04 4E 85 F1 | 	sub	fp, #4
18d6c     A7 F0 03 F6 | 	mov	ptra, fp
18d70     B2 00 A0 FD | 	call	#popregs_
18d74                 | __system____topofstack_ret
18d74     2D 00 64 FD | 	ret
18d78                 | 
18d78                 | __system___lockmem
18d78     00 FA 05 F6 | 	mov	result1, #0
18d7c     01 FA 61 FD | 	cogid	result1
18d80     00 FB 05 F1 | 	add	result1, #256
18d84                 | LR__2080
18d84     09 01 0A FB | 	rdlong	_var01, arg01 wz
18d88     09 FB 61 AC |  if_e	wrlong	result1, arg01
18d8c     09 01 02 AB |  if_e	rdlong	_var01, arg01
18d90     09 01 02 AB |  if_e	rdlong	_var01, arg01
18d94     FD 00 0A F2 | 	cmp	_var01, result1 wz
18d98     E8 FF 9F 5D |  if_ne	jmp	#LR__2080
18d9c                 | __system___lockmem_ret
18d9c     2D 00 64 FD | 	ret
18da0                 | 
18da0                 | __system___string_cmp
18da0     97 14 48 FB | 	callpa	#(@LR__2091-@LR__2090)>>2,fcache_load_ptr_
18da4                 | LR__2090
18da4     09 01 C2 FA | 	rdbyte	_var01, arg01
18da8     0A 03 C2 FA | 	rdbyte	_var02, arg02
18dac     00 05 02 F6 | 	mov	_var03, _var01
18db0     01 05 8A F1 | 	sub	_var03, _var02 wz
18db4     01 12 06 F1 | 	add	arg01, #1
18db8     01 14 06 F1 | 	add	arg02, #1
18dbc     0C 00 90 5D |  if_ne	jmp	#LR__2092
18dc0     00 00 0E F2 | 	cmp	_var01, #0 wz
18dc4     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
18dc8     D8 FF 9F 5D |  if_ne	jmp	#LR__2090
18dcc                 | LR__2091
18dcc                 | LR__2092
18dcc     02 FB 01 F6 | 	mov	result1, _var03
18dd0                 | __system___string_cmp_ret
18dd0     2D 00 64 FD | 	ret
18dd4                 | 
18dd4                 | __system___string_concat
18dd4     05 4A 05 F6 | 	mov	COUNT_, #5
18dd8     A8 00 A0 FD | 	call	#pushregs_
18ddc     09 1F 02 F6 | 	mov	local01, arg01
18de0     0A 21 02 F6 | 	mov	local02, arg02
18de4     0F 13 02 F6 | 	mov	arg01, local01
18de8     09 23 02 F6 | 	mov	local03, arg01
18dec     97 06 48 FB | 	callpa	#(@LR__2101-@LR__2100)>>2,fcache_load_ptr_
18df0                 | LR__2100
18df0     11 FB C9 FA | 	rdbyte	result1, local03 wz
18df4     01 22 06 51 |  if_ne	add	local03, #1
18df8     F4 FF 9F 5D |  if_ne	jmp	#LR__2100
18dfc                 | LR__2101
18dfc     09 23 82 F1 | 	sub	local03, arg01
18e00     11 25 02 F6 | 	mov	local04, local03
18e04     10 13 02 F6 | 	mov	arg01, local02
18e08     09 23 02 F6 | 	mov	local03, arg01
18e0c     97 06 48 FB | 	callpa	#(@LR__2103-@LR__2102)>>2,fcache_load_ptr_
18e10                 | LR__2102
18e10     11 FB C9 FA | 	rdbyte	result1, local03 wz
18e14     01 22 06 51 |  if_ne	add	local03, #1
18e18     F4 FF 9F 5D |  if_ne	jmp	#LR__2102
18e1c                 | LR__2103
18e1c     09 23 82 F1 | 	sub	local03, arg01
18e20     12 13 02 F6 | 	mov	arg01, local04
18e24     11 13 02 F1 | 	add	arg01, local03
18e28     01 12 06 F1 | 	add	arg01, #1
18e2c     00 3D B0 FD | 	call	#__system___gc_alloc_managed
18e30     FD 26 0A F6 | 	mov	local05, result1 wz
18e34     28 00 90 AD |  if_e	jmp	#LR__2104
18e38     13 13 02 F6 | 	mov	arg01, local05
18e3c     0F 15 02 F6 | 	mov	arg02, local01
18e40     12 17 02 F6 | 	mov	arg03, local04
18e44     50 FE BF FD | 	call	#__system____builtin_memmove
18e48     13 13 02 F6 | 	mov	arg01, local05
18e4c     12 13 02 F1 | 	add	arg01, local04
18e50     01 22 06 F1 | 	add	local03, #1
18e54     10 15 02 F6 | 	mov	arg02, local02
18e58     11 17 02 F6 | 	mov	arg03, local03
18e5c     38 FE BF FD | 	call	#__system____builtin_memmove
18e60                 | LR__2104
18e60     13 FB 01 F6 | 	mov	result1, local05
18e64     A7 F0 03 F6 | 	mov	ptra, fp
18e68     B2 00 A0 FD | 	call	#popregs_
18e6c                 | __system___string_concat_ret
18e6c     2D 00 64 FD | 	ret
18e70                 | 
18e70                 | __system___tx
18e70     02 4A 05 F6 | 	mov	COUNT_, #2
18e74     A8 00 A0 FD | 	call	#pushregs_
18e78     09 1F 02 F6 | 	mov	local01, arg01
18e7c     0A 1E 0E F2 | 	cmp	local01, #10 wz
18e80     18 00 90 5D |  if_ne	jmp	#LR__2110
18e84     08 E8 05 F1 | 	add	ptr___system__dat__, #8
18e88     F4 20 02 FB | 	rdlong	local02, ptr___system__dat__
18e8c     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
18e90     02 20 CE F7 | 	test	local02, #2 wz
18e94     0D 12 06 56 |  if_ne	mov	arg01, #13
18e98     6C FC BF 5D |  if_ne	call	#__system___txraw
18e9c                 | LR__2110
18e9c     0F 13 02 F6 | 	mov	arg01, local01
18ea0     64 FC BF FD | 	call	#__system___txraw
18ea4     A7 F0 03 F6 | 	mov	ptra, fp
18ea8     B2 00 A0 FD | 	call	#popregs_
18eac                 | __system___tx_ret
18eac     2D 00 64 FD | 	ret
18eb0                 | 
18eb0                 | __system___rx
18eb0     01 4A 05 F6 | 	mov	COUNT_, #1
18eb4     A8 00 A0 FD | 	call	#pushregs_
18eb8                 | LR__2120
18eb8     00 12 06 F6 | 	mov	arg01, #0
18ebc     8C FC BF FD | 	call	#__system___rxraw
18ec0     FD 1E 02 F6 | 	mov	local01, result1
18ec4     FF FF 7F FF 
18ec8     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
18ecc     E8 FF 9F AD |  if_e	jmp	#LR__2120
18ed0     0D 1E 0E F2 | 	cmp	local01, #13 wz
18ed4     14 00 90 5D |  if_ne	jmp	#LR__2121
18ed8     08 E8 05 F1 | 	add	ptr___system__dat__, #8
18edc     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
18ee0     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
18ee4     02 FA CD F7 | 	test	result1, #2 wz
18ee8     0A 1E 06 56 |  if_ne	mov	local01, #10
18eec                 | LR__2121
18eec     08 E8 05 F1 | 	add	ptr___system__dat__, #8
18ef0     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
18ef4     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
18ef8     01 12 CE F7 | 	test	arg01, #1 wz
18efc     1C 00 90 AD |  if_e	jmp	#LR__2124
18f00     7F 1E 0E F2 | 	cmp	local01, #127 wz
18f04     0C 00 90 5D |  if_ne	jmp	#LR__2122
18f08     08 12 06 F6 | 	mov	arg01, #8
18f0c     60 FF BF FD | 	call	#__system___tx
18f10     08 00 90 FD | 	jmp	#LR__2123
18f14                 | LR__2122
18f14     0F 13 02 F6 | 	mov	arg01, local01
18f18     54 FF BF FD | 	call	#__system___tx
18f1c                 | LR__2123
18f1c                 | LR__2124
18f1c     0F FB 01 F6 | 	mov	result1, local01
18f20     A7 F0 03 F6 | 	mov	ptra, fp
18f24     B2 00 A0 FD | 	call	#popregs_
18f28                 | __system___rx_ret
18f28     2D 00 64 FD | 	ret
18f2c                 | 
18f2c                 | __system___pinwrite
18f2c     09 01 02 F6 | 	mov	_var01, arg01
18f30     1F 00 06 F5 | 	and	_var01, #31
18f34     20 12 CE F7 | 	test	arg01, #32 wz
18f38     06 12 46 F0 | 	shr	arg01, #6
18f3c     09 13 CA F9 | 	bmask	arg01, arg01
18f40     00 13 62 F0 | 	shl	arg01, _var01
18f44     00 15 62 F0 | 	shl	arg02, _var01
18f48     1C 00 90 AD |  if_e	jmp	#LR__2130
18f4c     09 F7 43 F5 | 	or	dirb, arg01
18f50     FD 01 02 F6 | 	mov	_var01, outb
18f54     09 01 22 F5 | 	andn	_var01, arg01
18f58     09 15 02 F5 | 	and	arg02, arg01
18f5c     0A 01 42 F5 | 	or	_var01, arg02
18f60     00 FB 03 F6 | 	mov	outb, _var01
18f64     18 00 90 FD | 	jmp	#LR__2131
18f68                 | LR__2130
18f68     09 F5 43 F5 | 	or	dira, arg01
18f6c     FC 01 02 F6 | 	mov	_var01, outa
18f70     09 01 22 F5 | 	andn	_var01, arg01
18f74     09 15 02 F5 | 	and	arg02, arg01
18f78     0A 01 42 F5 | 	or	_var01, arg02
18f7c     00 F9 03 F6 | 	mov	outa, _var01
18f80                 | LR__2131
18f80                 | __system___pinwrite_ret
18f80     2D 00 64 FD | 	ret
18f84                 | 
18f84                 | __system___basic_read_line
18f84     06 4A 05 F6 | 	mov	COUNT_, #6
18f88     A8 00 A0 FD | 	call	#pushregs_
18f8c     09 1F 02 F6 | 	mov	local01, arg01
18f90     00 20 06 F6 | 	mov	local02, #0
18f94     18 22 06 F6 | 	mov	local03, #24
18f98     00 24 06 F6 | 	mov	local04, #0
18f9c     18 12 06 F6 | 	mov	arg01, #24
18fa0     8C 3B B0 FD | 	call	#__system___gc_alloc_managed
18fa4     FD 26 0A F6 | 	mov	local05, result1 wz
18fa8     13 FB 01 A6 |  if_e	mov	result1, local05
18fac     B0 00 90 AD |  if_e	jmp	#LR__2143
18fb0                 | LR__2140
18fb0     0F 13 02 F6 | 	mov	arg01, local01
18fb4     78 0B B0 FD | 	call	#__system___basic_get_char
18fb8     FD 28 02 F6 | 	mov	local06, result1
18fbc     01 28 56 F2 | 	cmps	local06, #1 wc
18fc0     8C 00 90 CD |  if_b	jmp	#LR__2142
18fc4     0A 28 0E F2 | 	cmp	local06, #10 wz
18fc8     10 00 90 5D |  if_ne	jmp	#LR__2141
18fcc     00 24 0E F2 | 	cmp	local04, #0 wz
18fd0     01 20 56 52 |  if_ne	cmps	local02, #1 wc
18fd4     01 20 86 11 |  if_a	sub	local02, #1
18fd8     74 00 90 FD | 	jmp	#LR__2142
18fdc                 | LR__2141
18fdc     0D 28 0E F2 | 	cmp	local06, #13 wz
18fe0     01 24 06 A6 |  if_e	mov	local04, #1
18fe4     00 24 06 56 |  if_ne	mov	local04, #0
18fe8     08 28 0E F2 | 	cmp	local06, #8 wz
18fec     7F 28 0E 52 |  if_ne	cmp	local06, #127 wz
18ff0     01 20 56 A2 |  if_e	cmps	local02, #1 wc
18ff4     01 20 86 21 |  if_nc_and_z	sub	local02, #1
18ff8     B4 FF 9F AD |  if_e	jmp	#LR__2140
18ffc     13 17 02 F6 | 	mov	arg03, local05
19000     10 17 02 F1 | 	add	arg03, local02
19004     0B 29 42 FC | 	wrbyte	local06, arg03
19008     01 20 06 F1 | 	add	local02, #1
1900c     11 21 0A F2 | 	cmp	local02, local03 wz
19010     9C FF 9F 5D |  if_ne	jmp	#LR__2140
19014     11 13 02 F6 | 	mov	arg01, local03
19018     20 12 06 F1 | 	add	arg01, #32
1901c     10 3B B0 FD | 	call	#__system___gc_alloc_managed
19020     FD 28 0A F6 | 	mov	local06, result1 wz
19024     14 FB 01 A6 |  if_e	mov	result1, local06
19028     34 00 90 AD |  if_e	jmp	#LR__2143
1902c     14 13 02 F6 | 	mov	arg01, local06
19030     13 15 02 F6 | 	mov	arg02, local05
19034     11 17 02 F6 | 	mov	arg03, local03
19038     5C FC BF FD | 	call	#__system____builtin_memmove
1903c     20 22 06 F1 | 	add	local03, #32
19040     13 13 02 F6 | 	mov	arg01, local05
19044     24 3C B0 FD | 	call	#__system___gc_free
19048     14 27 02 F6 | 	mov	local05, local06
1904c     60 FF 9F FD | 	jmp	#LR__2140
19050                 | LR__2142
19050     13 29 02 F6 | 	mov	local06, local05
19054     10 29 02 F1 | 	add	local06, local02
19058     14 01 48 FC | 	wrbyte	#0, local06
1905c     13 FB 01 F6 | 	mov	result1, local05
19060                 | LR__2143
19060     A7 F0 03 F6 | 	mov	ptra, fp
19064     B2 00 A0 FD | 	call	#popregs_
19068                 | __system___basic_read_line_ret
19068     2D 00 64 FD | 	ret
1906c                 | 
1906c                 | __system___waitms
1906c     09 01 02 F6 | 	mov	_var01, arg01
19070     1A 02 62 FD | 	getct	_var02
19074     14 04 06 FB | 	rdlong	_var03, #20
19078     97 14 48 FB | 	callpa	#(@LR__2151-@LR__2150)>>2,fcache_load_ptr_
1907c                 | LR__2150
1907c     01 00 00 FF 
19080     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
19084     1C 00 90 CD |  if_b	jmp	#LR__2152
19088     02 03 02 F1 | 	add	_var02, _var03
1908c     01 13 02 F6 | 	mov	arg01, _var02
19090     00 12 66 FA | 	addct1	arg01, #0
19094     24 22 60 FD | 	waitct1
19098     01 00 00 FF 
1909c     E8 01 86 F1 | 	sub	_var01, ##1000
190a0     D8 FF 9F FD | 	jmp	#LR__2150
190a4                 | LR__2151
190a4                 | LR__2152
190a4     01 00 56 F2 | 	cmps	_var01, #1 wc
190a8     28 00 90 CD |  if_b	jmp	#LR__2153
190ac     02 01 02 FD | 	qmul	_var01, _var03
190b0     01 00 00 FF 
190b4     E8 17 06 F6 | 	mov	arg03, ##1000
190b8     19 FA 61 FD | 	getqy	result1
190bc     18 12 62 FD | 	getqx	arg01
190c0     28 FA 61 FD | 	setq	result1
190c4     0B 13 12 FD | 	qdiv	arg01, arg03
190c8     18 12 62 FD | 	getqx	arg01
190cc     01 13 62 FA | 	addct1	arg01, _var02
190d0     24 22 60 FD | 	waitct1
190d4                 | LR__2153
190d4                 | __system___waitms_ret
190d4     2D 00 64 FD | 	ret
190d8                 | 
190d8                 | __system___waitus
190d8     09 01 02 F6 | 	mov	_var01, arg01
190dc     1A 02 62 FD | 	getct	_var02
190e0     14 04 06 FB | 	rdlong	_var03, #20
190e4     97 14 48 FB | 	callpa	#(@LR__2161-@LR__2160)>>2,fcache_load_ptr_
190e8                 | LR__2160
190e8     A1 07 00 FF 
190ec     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
190f0     1C 00 90 CD |  if_b	jmp	#LR__2162
190f4     02 03 02 F1 | 	add	_var02, _var03
190f8     01 13 02 F6 | 	mov	arg01, _var02
190fc     00 12 66 FA | 	addct1	arg01, #0
19100     24 22 60 FD | 	waitct1
19104     A1 07 00 FF 
19108     40 00 86 F1 | 	sub	_var01, ##1000000
1910c     D8 FF 9F FD | 	jmp	#LR__2160
19110                 | LR__2161
19110                 | LR__2162
19110     01 00 56 F2 | 	cmps	_var01, #1 wc
19114     28 00 90 CD |  if_b	jmp	#LR__2163
19118     02 01 02 FD | 	qmul	_var01, _var03
1911c     A1 07 00 FF 
19120     40 16 06 F6 | 	mov	arg03, ##1000000
19124     19 FA 61 FD | 	getqy	result1
19128     18 12 62 FD | 	getqx	arg01
1912c     28 FA 61 FD | 	setq	result1
19130     0B 13 12 FD | 	qdiv	arg01, arg03
19134     18 FA 61 FD | 	getqx	result1
19138     FD 02 62 FA | 	addct1	_var02, result1
1913c     24 22 60 FD | 	waitct1
19140                 | LR__2163
19140                 | __system___waitus_ret
19140     2D 00 64 FD | 	ret
19144                 | 
19144                 | __system___mount
19144     0B 4A 05 F6 | 	mov	COUNT_, #11
19148     A8 00 A0 FD | 	call	#pushregs_
1914c     09 1F 02 F6 | 	mov	local01, arg01
19150     0A 21 0A F6 | 	mov	local02, arg02 wz
19154     01 22 66 F6 | 	neg	local03, #1
19158     01 FA 65 A6 |  if_e	neg	result1, #1
1915c     98 02 90 AD |  if_e	jmp	#LR__2185
19160     0F FB C1 FA | 	rdbyte	result1, local01
19164     2F FA 0D F2 | 	cmp	result1, #47 wz
19168     28 00 90 5D |  if_ne	jmp	#LR__2172
1916c     0F 13 02 F6 | 	mov	arg01, local01
19170     09 25 02 F6 | 	mov	local04, arg01
19174     97 06 48 FB | 	callpa	#(@LR__2171-@LR__2170)>>2,fcache_load_ptr_
19178                 | LR__2170
19178     12 FB C9 FA | 	rdbyte	result1, local04 wz
1917c     01 24 06 51 |  if_ne	add	local04, #1
19180     F4 FF 9F 5D |  if_ne	jmp	#LR__2170
19184                 | LR__2171
19184     09 25 82 F1 | 	sub	local04, arg01
19188     12 FB 01 F6 | 	mov	result1, local04
1918c     10 FA 55 F2 | 	cmps	result1, #16 wc
19190     14 00 90 CD |  if_b	jmp	#LR__2173
19194                 | LR__2172
19194     20 E8 05 F1 | 	add	ptr___system__dat__, #32
19198     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
1919c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
191a0     01 FA 65 F6 | 	neg	result1, #1
191a4     50 02 90 FD | 	jmp	#LR__2185
191a8                 | LR__2173
191a8     00 26 06 F6 | 	mov	local05, #0
191ac                 | LR__2174
191ac     04 26 56 F2 | 	cmps	local05, #4 wc
191b0     B0 00 90 3D |  if_ae	jmp	#LR__2179
191b4     13 13 02 F6 | 	mov	arg01, local05
191b8     02 12 66 F0 | 	shl	arg01, #2
191bc     64 E8 05 F1 | 	add	ptr___system__dat__, #100
191c0     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
191c4     09 FB 09 FB | 	rdlong	result1, arg01 wz
191c8     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
191cc     00 22 56 A2 |  if_e	cmps	local03, #0 wc
191d0     13 23 02 86 |  if_c_and_z	mov	local03, local05
191d4     84 00 90 8D |  if_c_and_z	jmp	#LR__2178
191d8     13 13 02 F6 | 	mov	arg01, local05
191dc     02 12 66 F0 | 	shl	arg01, #2
191e0     64 E8 05 F1 | 	add	ptr___system__dat__, #100
191e4     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
191e8     09 13 02 FB | 	rdlong	arg01, arg01
191ec     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
191f0     09 25 02 F6 | 	mov	local04, arg01
191f4     97 06 48 FB | 	callpa	#(@LR__2176-@LR__2175)>>2,fcache_load_ptr_
191f8                 | LR__2175
191f8     12 FB C9 FA | 	rdbyte	result1, local04 wz
191fc     01 24 06 51 |  if_ne	add	local04, #1
19200     F4 FF 9F 5D |  if_ne	jmp	#LR__2175
19204                 | LR__2176
19204     09 25 82 F1 | 	sub	local04, arg01
19208     12 29 02 F6 | 	mov	local06, local04
1920c     14 13 02 F6 | 	mov	arg01, local06
19210     0F 13 02 F1 | 	add	arg01, local01
19214     09 FB C1 FA | 	rdbyte	result1, arg01
19218     2F FA 0D F2 | 	cmp	result1, #47 wz
1921c     14 2B 02 56 |  if_ne	mov	local07, local06
19220     0F 2B 02 51 |  if_ne	add	local07, local01
19224     15 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
19228     30 00 90 5D |  if_ne	jmp	#LR__2177
1922c     13 17 02 F6 | 	mov	arg03, local05
19230     02 16 66 F0 | 	shl	arg03, #2
19234     64 E8 05 F1 | 	add	ptr___system__dat__, #100
19238     F4 16 02 F1 | 	add	arg03, ptr___system__dat__
1923c     0B 15 02 FB | 	rdlong	arg02, arg03
19240     0F 13 02 F6 | 	mov	arg01, local01
19244     14 17 02 F6 | 	mov	arg03, local06
19248     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
1924c     24 4D B0 FD | 	call	#__system__strncmp
19250     00 FA 0D F2 | 	cmp	result1, #0 wz
19254     13 23 02 A6 |  if_e	mov	local03, local05
19258     08 00 90 AD |  if_e	jmp	#LR__2179
1925c                 | LR__2177
1925c                 | LR__2178
1925c     01 26 06 F1 | 	add	local05, #1
19260     48 FF 9F FD | 	jmp	#LR__2174
19264                 | LR__2179
19264     FF FF 7F FF 
19268     FF 23 0E F2 | 	cmp	local03, ##-1 wz
1926c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
19270     F4 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
19274     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
19278     01 FA 65 A6 |  if_e	neg	result1, #1
1927c     78 01 90 AD |  if_e	jmp	#LR__2185
19280     11 27 02 F6 | 	mov	local05, local03
19284     13 2B 02 F6 | 	mov	local07, local05
19288     02 2A 66 F0 | 	shl	local07, #2
1928c     74 E8 05 F1 | 	add	ptr___system__dat__, #116
19290     F4 2A 02 F1 | 	add	local07, ptr___system__dat__
19294     15 29 0A FB | 	rdlong	local06, local07 wz
19298     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
1929c     58 00 90 AD |  if_e	jmp	#LR__2180
192a0     4C 28 06 F1 | 	add	local06, #76
192a4     14 2B 0A FB | 	rdlong	local07, local06 wz
192a8     4C 28 86 F1 | 	sub	local06, #76
192ac     48 00 90 AD |  if_e	jmp	#LR__2180
192b0     4C 28 06 F1 | 	add	local06, #76
192b4     14 2B 02 FB | 	rdlong	local07, local06
192b8     15 23 02 F6 | 	mov	local03, local07
192bc     13 2A 46 F7 | 	zerox	local07, #19
192c0     14 22 46 F0 | 	shr	local03, #20
192c4     02 22 66 F0 | 	shl	local03, #2
192c8     ED 22 02 F1 | 	add	local03, __methods__
192cc     11 23 02 FB | 	rdlong	local03, local03
192d0     13 29 02 F6 | 	mov	local06, local05
192d4     02 28 66 F0 | 	shl	local06, #2
192d8     64 E8 05 F1 | 	add	ptr___system__dat__, #100
192dc     F4 28 02 F1 | 	add	local06, ptr___system__dat__
192e0     14 13 02 FB | 	rdlong	arg01, local06
192e4     F2 28 02 F6 | 	mov	local06, objptr
192e8     15 E5 01 F6 | 	mov	objptr, local07
192ec     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
192f0     2D 22 62 FD | 	call	local03
192f4     14 E5 01 F6 | 	mov	objptr, local06
192f8                 | LR__2180
192f8     13 2D 02 F6 | 	mov	local08, local05
192fc     02 2C 66 F0 | 	shl	local08, #2
19300     74 E8 05 F1 | 	add	ptr___system__dat__, #116
19304     F4 2C 02 F1 | 	add	local08, ptr___system__dat__
19308     16 21 62 FC | 	wrlong	local02, local08
1930c     00 20 0E F2 | 	cmp	local02, #0 wz
19310     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
19314     18 00 90 5D |  if_ne	jmp	#LR__2181
19318     02 26 66 F0 | 	shl	local05, #2
1931c     64 E8 05 F1 | 	add	ptr___system__dat__, #100
19320     F4 26 02 F1 | 	add	local05, ptr___system__dat__
19324     13 01 68 FC | 	wrlong	#0, local05
19328     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
1932c     C4 00 90 FD | 	jmp	#LR__2184
19330                 | LR__2181
19330     13 2F 02 F6 | 	mov	local09, local05
19334     04 2E 66 F0 | 	shl	local09, #4
19338     24 E8 05 F1 | 	add	ptr___system__dat__, #36
1933c     F4 2E 02 F1 | 	add	local09, ptr___system__dat__
19340     17 13 02 F6 | 	mov	arg01, local09
19344     0F 15 02 F6 | 	mov	arg02, local01
19348     10 16 06 F6 | 	mov	arg03, #16
1934c     24 E8 85 F1 | 	sub	ptr___system__dat__, #36
19350     74 4B B0 FD | 	call	#__system__strncpy
19354     48 20 06 F1 | 	add	local02, #72
19358     10 2D 0A FB | 	rdlong	local08, local02 wz
1935c     48 20 86 F1 | 	sub	local02, #72
19360     7C 00 90 AD |  if_e	jmp	#LR__2183
19364     48 20 06 F1 | 	add	local02, #72
19368     10 2D 02 FB | 	rdlong	local08, local02
1936c     16 31 02 F6 | 	mov	local10, local08
19370     13 2C 46 F7 | 	zerox	local08, #19
19374     14 30 46 F0 | 	shr	local10, #20
19378     02 30 66 F0 | 	shl	local10, #2
1937c     ED 30 02 F1 | 	add	local10, __methods__
19380     18 31 02 FB | 	rdlong	local10, local10
19384     17 13 02 F6 | 	mov	arg01, local09
19388     F2 32 02 F6 | 	mov	local11, objptr
1938c     16 E5 01 F6 | 	mov	objptr, local08
19390     2D 30 62 FD | 	call	local10
19394     19 E5 01 F6 | 	mov	objptr, local11
19398     FD 12 0A F6 | 	mov	arg01, result1 wz
1939c     40 00 90 AD |  if_e	jmp	#LR__2182
193a0     13 2D 02 F6 | 	mov	local08, local05
193a4     02 2C 66 F0 | 	shl	local08, #2
193a8     74 E8 05 F1 | 	add	ptr___system__dat__, #116
193ac     F4 2C 02 F1 | 	add	local08, ptr___system__dat__
193b0     16 01 68 FC | 	wrlong	#0, local08
193b4     02 26 66 F0 | 	shl	local05, #2
193b8     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
193bc     F4 26 02 F1 | 	add	local05, ptr___system__dat__
193c0     13 01 68 FC | 	wrlong	#0, local05
193c4     09 13 6A F6 | 	neg	arg01, arg01 wz
193c8     44 E8 85 F1 | 	sub	ptr___system__dat__, #68
193cc     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
193d0     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
193d4     01 FA 65 56 |  if_ne	neg	result1, #1
193d8     00 FA 05 A6 |  if_e	mov	result1, #0
193dc     18 00 90 FD | 	jmp	#LR__2185
193e0                 | LR__2182
193e0                 | LR__2183
193e0     02 26 66 F0 | 	shl	local05, #2
193e4     64 E8 05 F1 | 	add	ptr___system__dat__, #100
193e8     F4 26 02 F1 | 	add	local05, ptr___system__dat__
193ec     13 2F 62 FC | 	wrlong	local09, local05
193f0     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
193f4                 | LR__2184
193f4     00 FA 05 F6 | 	mov	result1, #0
193f8                 | LR__2185
193f8     A7 F0 03 F6 | 	mov	ptra, fp
193fc     B2 00 A0 FD | 	call	#popregs_
19400                 | __system___mount_ret
19400     2D 00 64 FD | 	ret
19404                 | 
19404                 | __system___chdir
19404     00 4A 05 F6 | 	mov	COUNT_, #0
19408     A8 00 A0 FD | 	call	#pushregs_
1940c     40 F0 07 F1 | 	add	ptra, #64
19410     04 4E 05 F1 | 	add	fp, #4
19414     A7 12 62 FC | 	wrlong	arg01, fp
19418     04 4E 05 F1 | 	add	fp, #4
1941c     A7 14 02 F6 | 	mov	arg02, fp
19420     08 4E 85 F1 | 	sub	fp, #8
19424     80 47 B0 FD | 	call	#__system__stat
19428     3C 4E 05 F1 | 	add	fp, #60
1942c     A7 FA 61 FC | 	wrlong	result1, fp
19430     3C 4E 85 F1 | 	sub	fp, #60
19434     00 FA 0D F2 | 	cmp	result1, #0 wz
19438     3C 4E 05 51 |  if_ne	add	fp, #60
1943c     A7 FA 01 5B |  if_ne	rdlong	result1, fp
19440     3C 4E 85 51 |  if_ne	sub	fp, #60
19444     BC 00 90 5D |  if_ne	jmp	#LR__2192
19448     10 4E 05 F1 | 	add	fp, #16
1944c     A7 12 02 FB | 	rdlong	arg01, fp
19450     10 4E 85 F1 | 	sub	fp, #16
19454     78 00 00 FF 
19458     00 12 06 F5 | 	and	arg01, ##61440
1945c     08 00 00 FF 
19460     00 12 0E F2 | 	cmp	arg01, ##4096 wz
19464     20 E8 05 51 |  if_ne	add	ptr___system__dat__, #32
19468     F4 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
1946c     20 E8 85 51 |  if_ne	sub	ptr___system__dat__, #32
19470     01 FA 65 56 |  if_ne	neg	result1, #1
19474     8C 00 90 5D |  if_ne	jmp	#LR__2192
19478     04 4E 05 F1 | 	add	fp, #4
1947c     A7 16 02 FB | 	rdlong	arg03, fp
19480     04 4E 85 F1 | 	sub	fp, #4
19484     0B 17 C2 FA | 	rdbyte	arg03, arg03
19488     2F 16 0E F2 | 	cmp	arg03, #47 wz
1948c     24 00 90 5D |  if_ne	jmp	#LR__2190
19490     84 E8 05 F1 | 	add	ptr___system__dat__, #132
19494     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
19498     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
1949c     04 4E 05 F1 | 	add	fp, #4
194a0     A7 14 02 FB | 	rdlong	arg02, fp
194a4     04 4E 85 F1 | 	sub	fp, #4
194a8     00 17 06 F6 | 	mov	arg03, #256
194ac     18 4A B0 FD | 	call	#__system__strncpy
194b0     4C 00 90 FD | 	jmp	#LR__2191
194b4                 | LR__2190
194b4     84 E9 05 F1 | 	add	ptr___system__dat__, #388
194b8     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
194bc     38 4E 05 F1 | 	add	fp, #56
194c0     A7 12 62 FC | 	wrlong	arg01, fp
194c4     38 4E 85 F1 | 	sub	fp, #56
194c8     00 E9 85 F1 | 	sub	ptr___system__dat__, #256
194cc     F4 14 02 F6 | 	mov	arg02, ptr___system__dat__
194d0     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
194d4     00 17 06 F6 | 	mov	arg03, #256
194d8     EC 49 B0 FD | 	call	#__system__strncpy
194dc     38 4E 05 F1 | 	add	fp, #56
194e0     A7 12 02 FB | 	rdlong	arg01, fp
194e4     34 4E 85 F1 | 	sub	fp, #52
194e8     A7 14 02 FB | 	rdlong	arg02, fp
194ec     04 4E 85 F1 | 	sub	fp, #4
194f0     84 E8 05 F1 | 	add	ptr___system__dat__, #132
194f4     F4 16 02 F6 | 	mov	arg03, ptr___system__dat__
194f8     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
194fc     10 00 B0 FD | 	call	#__system____getvfsforfile
19500                 | LR__2191
19500     00 FA 05 F6 | 	mov	result1, #0
19504                 | LR__2192
19504     A7 F0 03 F6 | 	mov	ptra, fp
19508     B2 00 A0 FD | 	call	#popregs_
1950c                 | __system___chdir_ret
1950c     2D 00 64 FD | 	ret
19510                 | 
19510                 | __system____getvfsforfile
19510     0E 4A 05 F6 | 	mov	COUNT_, #14
19514     A8 00 A0 FD | 	call	#pushregs_
19518     09 1F 02 F6 | 	mov	local01, arg01
1951c     0A 21 02 F6 | 	mov	local02, arg02
19520     0B 23 02 F6 | 	mov	local03, arg03
19524     97 10 48 FB | 	callpa	#(@LR__2201-@LR__2200)>>2,fcache_load_ptr_
19528                 | LR__2200
19528     10 FB C1 FA | 	rdbyte	result1, local02
1952c     2F FA 0D F2 | 	cmp	result1, #47 wz
19530     01 20 06 A1 |  if_e	add	local02, #1
19534     10 25 C2 AA |  if_e	rdbyte	local04, local02
19538     01 20 86 A1 |  if_e	sub	local02, #1
1953c     2F 24 0E A2 |  if_e	cmp	local04, #47 wz
19540     01 20 06 A1 |  if_e	add	local02, #1
19544     E0 FF 9F AD |  if_e	jmp	#LR__2200
19548                 | LR__2201
19548     10 25 C2 FA | 	rdbyte	local04, local02
1954c     2F 24 0E F2 | 	cmp	local04, #47 wz
19550     14 00 90 5D |  if_ne	jmp	#LR__2202
19554     0F 13 02 F6 | 	mov	arg01, local01
19558     10 15 02 F6 | 	mov	arg02, local02
1955c     00 17 06 F6 | 	mov	arg03, #256
19560     64 49 B0 FD | 	call	#__system__strncpy
19564     7C 00 90 FD | 	jmp	#LR__2204
19568                 | LR__2202
19568     84 E8 05 F1 | 	add	ptr___system__dat__, #132
1956c     F4 14 02 F6 | 	mov	arg02, ptr___system__dat__
19570     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
19574     0F 13 02 F6 | 	mov	arg01, local01
19578     00 17 06 F6 | 	mov	arg03, #256
1957c     48 49 B0 FD | 	call	#__system__strncpy
19580     10 25 CA FA | 	rdbyte	local04, local02 wz
19584     5C 00 90 AD |  if_e	jmp	#LR__2203
19588     10 25 C2 FA | 	rdbyte	local04, local02
1958c     2E 24 0E F2 | 	cmp	local04, #46 wz
19590     01 20 06 A1 |  if_e	add	local02, #1
19594     10 27 C2 AA |  if_e	rdbyte	local05, local02
19598     01 20 86 A1 |  if_e	sub	local02, #1
1959c     13 29 02 A6 |  if_e	mov	local06, local05
195a0     07 28 4E A7 |  if_e	zerox	local06, #7 wz
195a4     3C 00 90 AD |  if_e	jmp	#LR__2203
195a8     0F 27 C2 FA | 	rdbyte	local05, local01
195ac     2F 26 0E F2 | 	cmp	local05, #47 wz
195b0     01 1E 06 A1 |  if_e	add	local01, #1
195b4     0F 25 C2 AA |  if_e	rdbyte	local04, local01
195b8     01 1E 86 A1 |  if_e	sub	local01, #1
195bc     00 24 4E A2 |  if_e	cmps	local04, #0 wz
195c0     41 01 00 5F 
195c4     84 14 06 56 |  if_ne	mov	arg02, ##@LR__4250
195c8     0F 13 02 56 |  if_ne	mov	arg01, local01
195cc     00 17 06 56 |  if_ne	mov	arg03, #256
195d0     40 49 B0 5D |  if_ne	call	#__system__strncat
195d4     0F 13 02 F6 | 	mov	arg01, local01
195d8     10 15 02 F6 | 	mov	arg02, local02
195dc     00 17 06 F6 | 	mov	arg03, #256
195e0     30 49 B0 FD | 	call	#__system__strncat
195e4                 | LR__2203
195e4                 | LR__2204
195e4     0F 13 02 F6 | 	mov	arg01, local01
195e8     E8 4A B0 FD | 	call	#__system___normalizeName
195ec     0F 25 CA FA | 	rdbyte	local04, local01 wz
195f0     1C 00 90 AD |  if_e	jmp	#LR__2205
195f4     0F 25 C2 FA | 	rdbyte	local04, local01
195f8     2F 24 0E F2 | 	cmp	local04, #47 wz
195fc     01 1E 06 A1 |  if_e	add	local01, #1
19600     0F 29 C2 AA |  if_e	rdbyte	local06, local01
19604     01 1E 86 A1 |  if_e	sub	local01, #1
19608     00 28 4E A2 |  if_e	cmps	local06, #0 wz
1960c     18 00 90 5D |  if_ne	jmp	#LR__2206
19610                 | LR__2205
19610     01 00 00 FF 
19614     84 E8 05 F1 | 	add	ptr___system__dat__, ##644
19618     F4 FA 01 F6 | 	mov	result1, ptr___system__dat__
1961c     01 00 00 FF 
19620     84 E8 85 F1 | 	sub	ptr___system__dat__, ##644
19624     EC 01 90 FD | 	jmp	#LR__2220
19628                 | LR__2206
19628     00 2A 06 F6 | 	mov	local07, #0
1962c                 | LR__2207
1962c     04 2A 56 F2 | 	cmps	local07, #4 wc
19630     CC 01 90 3D |  if_ae	jmp	#LR__2219
19634     15 29 02 F6 | 	mov	local06, local07
19638     02 28 66 F0 | 	shl	local06, #2
1963c     64 E8 05 F1 | 	add	ptr___system__dat__, #100
19640     F4 28 02 F1 | 	add	local06, ptr___system__dat__
19644     14 29 0A FB | 	rdlong	local06, local06 wz
19648     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
1964c     A8 01 90 AD |  if_e	jmp	#LR__2218
19650     15 25 02 F6 | 	mov	local04, local07
19654     02 24 66 F0 | 	shl	local04, #2
19658     64 E8 05 F1 | 	add	ptr___system__dat__, #100
1965c     F4 24 02 F1 | 	add	local04, ptr___system__dat__
19660     12 13 02 FB | 	rdlong	arg01, local04
19664     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
19668     09 2D 02 F6 | 	mov	local08, arg01
1966c     97 06 48 FB | 	callpa	#(@LR__2209-@LR__2208)>>2,fcache_load_ptr_
19670                 | LR__2208
19670     16 FB C9 FA | 	rdbyte	result1, local08 wz
19674     01 2C 06 51 |  if_ne	add	local08, #1
19678     F4 FF 9F 5D |  if_ne	jmp	#LR__2208
1967c                 | LR__2209
1967c     09 2D 82 F1 | 	sub	local08, arg01
19680     16 2F 02 F6 | 	mov	local09, local08
19684     17 25 02 F6 | 	mov	local04, local09
19688     0F 25 02 F1 | 	add	local04, local01
1968c     12 29 C2 FA | 	rdbyte	local06, local04
19690     2F 28 0E F2 | 	cmp	local06, #47 wz
19694     17 31 02 56 |  if_ne	mov	local10, local09
19698     0F 31 02 51 |  if_ne	add	local10, local01
1969c     18 27 CA 5A |  if_ne	rdbyte	local05, local10 wz
196a0     54 01 90 5D |  if_ne	jmp	#LR__2217
196a4     15 17 02 F6 | 	mov	arg03, local07
196a8     02 16 66 F0 | 	shl	arg03, #2
196ac     64 E8 05 F1 | 	add	ptr___system__dat__, #100
196b0     F4 16 02 F1 | 	add	arg03, ptr___system__dat__
196b4     0B 15 02 FB | 	rdlong	arg02, arg03
196b8     17 17 02 F6 | 	mov	arg03, local09
196bc     0F 13 02 F6 | 	mov	arg01, local01
196c0     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
196c4     AC 48 B0 FD | 	call	#__system__strncmp
196c8     00 FA 4D F2 | 	cmps	result1, #0 wz
196cc     28 01 90 5D |  if_ne	jmp	#LR__2217
196d0     15 33 02 F6 | 	mov	local11, local07
196d4     02 32 66 F0 | 	shl	local11, #2
196d8     74 E8 05 F1 | 	add	ptr___system__dat__, #116
196dc     F4 32 02 F1 | 	add	local11, ptr___system__dat__
196e0     19 35 02 FB | 	rdlong	local12, local11
196e4     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
196e8     97 22 48 FB | 	callpa	#(@LR__2211-@LR__2210)>>2,fcache_load_ptr_
196ec                 | LR__2210
196ec     17 29 02 F6 | 	mov	local06, local09
196f0     01 28 06 F1 | 	add	local06, #1
196f4     0F 29 02 F1 | 	add	local06, local01
196f8     14 33 C2 FA | 	rdbyte	local11, local06
196fc     2E 32 0E F2 | 	cmp	local11, #46 wz
19700     2C 00 90 5D |  if_ne	jmp	#LR__2212
19704     17 33 02 F6 | 	mov	local11, local09
19708     02 32 06 F1 | 	add	local11, #2
1970c     0F 33 02 F1 | 	add	local11, local01
19710     19 31 C2 FA | 	rdbyte	local10, local11
19714     2F 30 0E F2 | 	cmp	local10, #47 wz
19718     17 37 02 56 |  if_ne	mov	local13, local09
1971c     02 36 06 51 |  if_ne	add	local13, #2
19720     0F 37 02 51 |  if_ne	add	local13, local01
19724     1B 39 CA 5A |  if_ne	rdbyte	local14, local13 wz
19728     01 2E 06 A1 |  if_e	add	local09, #1
1972c     BC FF 9F AD |  if_e	jmp	#LR__2210
19730                 | LR__2211
19730                 | LR__2212
19730     00 22 0E F2 | 	cmp	local03, #0 wz
19734     11 13 02 56 |  if_ne	mov	arg01, local03
19738     0F 15 02 56 |  if_ne	mov	arg02, local01
1973c     00 17 06 56 |  if_ne	mov	arg03, #256
19740     84 47 B0 5D |  if_ne	call	#__system__strncpy
19744     0F 15 02 F6 | 	mov	arg02, local01
19748     17 15 02 F1 | 	add	arg02, local09
1974c     01 14 06 F1 | 	add	arg02, #1
19750     0F 13 02 F6 | 	mov	arg01, local01
19754     D4 F5 BF FD | 	call	#__system____builtin_strcpy
19758     0F 13 02 F6 | 	mov	arg01, local01
1975c     09 2D 02 F6 | 	mov	local08, arg01
19760     97 06 48 FB | 	callpa	#(@LR__2214-@LR__2213)>>2,fcache_load_ptr_
19764                 | LR__2213
19764     16 FB C9 FA | 	rdbyte	result1, local08 wz
19768     01 2C 06 51 |  if_ne	add	local08, #1
1976c     F4 FF 9F 5D |  if_ne	jmp	#LR__2213
19770                 | LR__2214
19770     09 2D 82 F1 | 	sub	local08, arg01
19774     16 2F 02 F6 | 	mov	local09, local08
19778                 | LR__2215
19778     01 2E 56 F2 | 	cmps	local09, #1 wc
1977c     70 00 90 CD |  if_b	jmp	#LR__2216
19780     17 25 02 F6 | 	mov	local04, local09
19784     0F 25 02 F1 | 	add	local04, local01
19788     12 33 C2 FA | 	rdbyte	local11, local04
1978c     2F 32 0E F2 | 	cmp	local11, #47 wz
19790     17 33 02 A6 |  if_e	mov	local11, local09
19794     0F 33 02 A1 |  if_e	add	local11, local01
19798     19 01 48 AC |  if_e	wrbyte	#0, local11
1979c     01 2E 86 A1 |  if_e	sub	local09, #1
197a0     D4 FF 9F AD |  if_e	jmp	#LR__2215
197a4     17 25 02 F6 | 	mov	local04, local09
197a8     0F 25 02 F1 | 	add	local04, local01
197ac     12 33 C2 FA | 	rdbyte	local11, local04
197b0     2E 32 0E F2 | 	cmp	local11, #46 wz
197b4     38 00 90 5D |  if_ne	jmp	#LR__2216
197b8     02 2E 56 F2 | 	cmps	local09, #2 wc
197bc     30 00 90 CD |  if_b	jmp	#LR__2216
197c0     17 39 02 F6 | 	mov	local14, local09
197c4     01 38 86 F1 | 	sub	local14, #1
197c8     0F 39 02 F1 | 	add	local14, local01
197cc     1C 27 C2 FA | 	rdbyte	local05, local14
197d0     2F 26 0E F2 | 	cmp	local05, #47 wz
197d4     18 00 90 5D |  if_ne	jmp	#LR__2216
197d8     17 25 02 F6 | 	mov	local04, local09
197dc     01 24 86 F1 | 	sub	local04, #1
197e0     0F 25 02 F1 | 	add	local04, local01
197e4     12 01 48 FC | 	wrbyte	#0, local04
197e8     02 2E 86 F1 | 	sub	local09, #2
197ec     88 FF 9F FD | 	jmp	#LR__2215
197f0                 | LR__2216
197f0     1A FB 01 F6 | 	mov	result1, local12
197f4     1C 00 90 FD | 	jmp	#LR__2220
197f8                 | LR__2217
197f8                 | LR__2218
197f8     01 2A 06 F1 | 	add	local07, #1
197fc     2C FE 9F FD | 	jmp	#LR__2207
19800                 | LR__2219
19800     03 00 00 FF 
19804     38 E9 05 F1 | 	add	ptr___system__dat__, ##1848
19808     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1980c     03 00 00 FF 
19810     38 E9 85 F1 | 	sub	ptr___system__dat__, ##1848
19814                 | LR__2220
19814     A7 F0 03 F6 | 	mov	ptra, fp
19818     B2 00 A0 FD | 	call	#popregs_
1981c                 | __system____getvfsforfile_ret
1981c     2D 00 64 FD | 	ret
19820                 | 
19820                 | __system___basic_open
19820     05 4A 05 F6 | 	mov	COUNT_, #5
19824     A8 00 A0 FD | 	call	#pushregs_
19828     0A 1F 02 F6 | 	mov	local01, arg02
1982c     0B 21 02 F6 | 	mov	local02, arg03
19830     0C 23 02 F6 | 	mov	local03, arg04
19834     00 24 06 F6 | 	mov	local04, #0
19838     64 46 B0 FD | 	call	#__system____getftab
1983c     FD 26 0A F6 | 	mov	local05, result1 wz
19840     18 00 90 5D |  if_ne	jmp	#LR__2230
19844     EE 12 02 F6 | 	mov	arg01, abortchain
19848     0C 14 06 F6 | 	mov	arg02, #12
1984c     01 16 06 F6 | 	mov	arg03, #1
19850     DA 00 A0 FD | 	call	#__longjmp
19854     01 FA 65 F6 | 	neg	result1, #1
19858     14 01 90 FD | 	jmp	#LR__2239
1985c                 | LR__2230
1985c     08 26 06 F1 | 	add	local05, #8
19860     13 FB 09 FB | 	rdlong	result1, local05 wz
19864     08 26 86 F1 | 	sub	local05, #8
19868     13 13 02 56 |  if_ne	mov	arg01, local05
1986c     C0 3D B0 5D |  if_ne	call	#__system___closeraw
19870     00 1E 0E F2 | 	cmp	local01, #0 wz
19874     00 20 0E A2 |  if_e	cmp	local02, #0 wz
19878     00 22 0E A2 |  if_e	cmp	local03, #0 wz
1987c     3C 00 90 AD |  if_e	jmp	#LR__2232
19880     0C 12 06 F6 | 	mov	arg01, #12
19884     A8 32 B0 FD | 	call	#__system___gc_alloc_managed
19888     FD 24 0A F6 | 	mov	local04, result1 wz
1988c     18 00 90 5D |  if_ne	jmp	#LR__2231
19890     EE 12 02 F6 | 	mov	arg01, abortchain
19894     07 14 06 F6 | 	mov	arg02, #7
19898     01 16 06 F6 | 	mov	arg03, #1
1989c     DA 00 A0 FD | 	call	#__longjmp
198a0     01 FA 65 F6 | 	neg	result1, #1
198a4     C8 00 90 FD | 	jmp	#LR__2239
198a8                 | LR__2231
198a8     12 01 68 FC | 	wrlong	#0, local04
198ac     04 24 06 F1 | 	add	local04, #4
198b0     12 01 68 FC | 	wrlong	#0, local04
198b4     04 24 86 F1 | 	sub	local04, #4
198b8     13 25 62 FC | 	wrlong	local04, local05
198bc                 | LR__2232
198bc     00 1E 0E F2 | 	cmp	local01, #0 wz
198c0     20 00 90 AD |  if_e	jmp	#LR__2233
198c4     12 1F 62 FC | 	wrlong	local01, local04
198c8     12 FB 01 F6 | 	mov	result1, local04
198cc     00 10 03 FF 
198d0     00 FA 45 F5 | 	or	result1, ##102760448
198d4     1C 26 06 F1 | 	add	local05, #28
198d8     13 FB 61 FC | 	wrlong	result1, local05
198dc     1C 26 86 F1 | 	sub	local05, #28
198e0     0C 00 90 FD | 	jmp	#LR__2234
198e4                 | LR__2233
198e4     1C 26 06 F1 | 	add	local05, #28
198e8     13 01 68 FC | 	wrlong	#0, local05
198ec     1C 26 86 F1 | 	sub	local05, #28
198f0                 | LR__2234
198f0     00 20 0E F2 | 	cmp	local02, #0 wz
198f4     28 00 90 AD |  if_e	jmp	#LR__2235
198f8     04 24 06 F1 | 	add	local04, #4
198fc     12 21 62 FC | 	wrlong	local02, local04
19900     04 24 86 F1 | 	sub	local04, #4
19904     12 FB 01 F6 | 	mov	result1, local04
19908     00 18 03 FF 
1990c     00 FA 45 F5 | 	or	result1, ##103809024
19910     20 26 06 F1 | 	add	local05, #32
19914     13 FB 61 FC | 	wrlong	result1, local05
19918     20 26 86 F1 | 	sub	local05, #32
1991c     0C 00 90 FD | 	jmp	#LR__2236
19920                 | LR__2235
19920     20 26 06 F1 | 	add	local05, #32
19924     13 01 68 FC | 	wrlong	#0, local05
19928     20 26 86 F1 | 	sub	local05, #32
1992c                 | LR__2236
1992c     00 22 0E F2 | 	cmp	local03, #0 wz
19930     24 00 90 AD |  if_e	jmp	#LR__2237
19934     08 24 06 F1 | 	add	local04, #8
19938     12 23 62 FC | 	wrlong	local03, local04
1993c     08 24 86 F1 | 	sub	local04, #8
19940     00 20 03 FF 
19944     00 24 46 F5 | 	or	local04, ##104857600
19948     24 26 06 F1 | 	add	local05, #36
1994c     13 25 62 FC | 	wrlong	local04, local05
19950     24 26 86 F1 | 	sub	local05, #36
19954     0C 00 90 FD | 	jmp	#LR__2238
19958                 | LR__2237
19958     24 26 06 F1 | 	add	local05, #36
1995c     13 01 68 FC | 	wrlong	#0, local05
19960     24 26 86 F1 | 	sub	local05, #36
19964                 | LR__2238
19964     08 26 06 F1 | 	add	local05, #8
19968     13 0F 68 FC | 	wrlong	#7, local05
1996c     00 FA 05 F6 | 	mov	result1, #0
19970                 | LR__2239
19970     A7 F0 03 F6 | 	mov	ptra, fp
19974     B2 00 A0 FD | 	call	#popregs_
19978                 | __system___basic_open_ret
19978     2D 00 64 FD | 	ret
1997c                 | 
1997c                 | __system___basic_open_string
1997c     04 4A 05 F6 | 	mov	COUNT_, #4
19980     A8 00 A0 FD | 	call	#pushregs_
19984     0A 1F 02 F6 | 	mov	local01, arg02
19988     0B 21 02 F6 | 	mov	local02, arg03
1998c     10 45 B0 FD | 	call	#__system____getftab
19990     FD 22 0A F6 | 	mov	local03, result1 wz
19994     18 00 90 5D |  if_ne	jmp	#LR__2240
19998     EE 12 02 F6 | 	mov	arg01, abortchain
1999c     0C 14 06 F6 | 	mov	arg02, #12
199a0     01 16 06 F6 | 	mov	arg03, #1
199a4     DA 00 A0 FD | 	call	#__longjmp
199a8     01 FA 65 F6 | 	neg	result1, #1
199ac     58 00 90 FD | 	jmp	#LR__2242
199b0                 | LR__2240
199b0     08 22 06 F1 | 	add	local03, #8
199b4     11 19 0A FB | 	rdlong	arg04, local03 wz
199b8     08 22 86 F1 | 	sub	local03, #8
199bc     11 13 02 56 |  if_ne	mov	arg01, local03
199c0     6C 3C B0 5D |  if_ne	call	#__system___closeraw
199c4     0F 15 02 F6 | 	mov	arg02, local01
199c8     10 17 02 F6 | 	mov	arg03, local02
199cc     11 13 02 F6 | 	mov	arg01, local03
199d0     B6 19 06 F6 | 	mov	arg04, #438
199d4     54 39 B0 FD | 	call	#__system___openraw
199d8     FD 24 02 F6 | 	mov	local04, result1
199dc     00 24 56 F2 | 	cmps	local04, #0 wc
199e0     20 00 90 3D |  if_ae	jmp	#LR__2241
199e4     20 E8 05 F1 | 	add	ptr___system__dat__, #32
199e8     F4 14 02 FB | 	rdlong	arg02, ptr___system__dat__
199ec     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
199f0     EE 12 02 F6 | 	mov	arg01, abortchain
199f4     01 16 06 F6 | 	mov	arg03, #1
199f8     DA 00 A0 FD | 	call	#__longjmp
199fc     01 FA 65 F6 | 	neg	result1, #1
19a00     04 00 90 FD | 	jmp	#LR__2242
19a04                 | LR__2241
19a04     12 FB 01 F6 | 	mov	result1, local04
19a08                 | LR__2242
19a08     A7 F0 03 F6 | 	mov	ptra, fp
19a0c     B2 00 A0 FD | 	call	#popregs_
19a10                 | __system___basic_open_string_ret
19a10     2D 00 64 FD | 	ret
19a14                 | 
19a14                 | __system___basic_print_char
19a14     03 4A 05 F6 | 	mov	COUNT_, #3
19a18     A8 00 A0 FD | 	call	#pushregs_
19a1c     0A 1F 02 F6 | 	mov	local01, arg02
19a20     D0 4B B0 FD | 	call	#__system___gettxfunc
19a24     FD 20 0A F6 | 	mov	local02, result1 wz
19a28     00 FA 05 A6 |  if_e	mov	result1, #0
19a2c     30 00 90 AD |  if_e	jmp	#LR__2250
19a30     10 23 02 F6 | 	mov	local03, local02
19a34     13 20 46 F7 | 	zerox	local02, #19
19a38     14 22 46 F0 | 	shr	local03, #20
19a3c     02 22 66 F0 | 	shl	local03, #2
19a40     ED 22 02 F1 | 	add	local03, __methods__
19a44     11 23 02 FB | 	rdlong	local03, local03
19a48     0F 13 02 F6 | 	mov	arg01, local01
19a4c     F2 1E 02 F6 | 	mov	local01, objptr
19a50     10 E5 01 F6 | 	mov	objptr, local02
19a54     2D 22 62 FD | 	call	local03
19a58     0F E5 01 F6 | 	mov	objptr, local01
19a5c     01 FA 05 F6 | 	mov	result1, #1
19a60                 | LR__2250
19a60     A7 F0 03 F6 | 	mov	ptra, fp
19a64     B2 00 A0 FD | 	call	#popregs_
19a68                 | __system___basic_print_char_ret
19a68     2D 00 64 FD | 	ret
19a6c                 | 
19a6c                 | __system___basic_print_string
19a6c     03 4A 05 F6 | 	mov	COUNT_, #3
19a70     A8 00 A0 FD | 	call	#pushregs_
19a74     0A 1F 02 F6 | 	mov	local01, arg02
19a78     0B 21 02 F6 | 	mov	local02, arg03
19a7c     74 4B B0 FD | 	call	#__system___gettxfunc
19a80     FD 22 0A F6 | 	mov	local03, result1 wz
19a84     00 FA 05 A6 |  if_e	mov	result1, #0
19a88     18 00 90 AD |  if_e	jmp	#LR__2260
19a8c     00 1E 0E F2 | 	cmp	local01, #0 wz
19a90     00 FA 05 A6 |  if_e	mov	result1, #0
19a94     11 13 02 56 |  if_ne	mov	arg01, local03
19a98     10 15 02 56 |  if_ne	mov	arg02, local02
19a9c     0F 17 02 56 |  if_ne	mov	arg03, local01
19aa0     9C 01 B0 5D |  if_ne	call	#__system___fmtstr
19aa4                 | LR__2260
19aa4     A7 F0 03 F6 | 	mov	ptra, fp
19aa8     B2 00 A0 FD | 	call	#popregs_
19aac                 | __system___basic_print_string_ret
19aac     2D 00 64 FD | 	ret
19ab0                 | 
19ab0                 | __system___basic_print_integer
19ab0     04 4A 05 F6 | 	mov	COUNT_, #4
19ab4     A8 00 A0 FD | 	call	#pushregs_
19ab8     0A 1F 02 F6 | 	mov	local01, arg02
19abc     0B 21 02 F6 | 	mov	local02, arg03
19ac0     0C 23 02 F6 | 	mov	local03, arg04
19ac4     2C 4B B0 FD | 	call	#__system___gettxfunc
19ac8     FD 24 0A F6 | 	mov	local04, result1 wz
19acc     00 FA 05 A6 |  if_e	mov	result1, #0
19ad0     12 13 02 56 |  if_ne	mov	arg01, local04
19ad4     10 15 02 56 |  if_ne	mov	arg02, local02
19ad8     0F 17 02 56 |  if_ne	mov	arg03, local01
19adc     11 19 02 56 |  if_ne	mov	arg04, local03
19ae0     48 02 B0 5D |  if_ne	call	#__system___fmtnum
19ae4     A7 F0 03 F6 | 	mov	ptra, fp
19ae8     B2 00 A0 FD | 	call	#popregs_
19aec                 | __system___basic_print_integer_ret
19aec     2D 00 64 FD | 	ret
19af0                 | 
19af0                 | __system___basic_print_unsigned
19af0     03 4A 05 F6 | 	mov	COUNT_, #3
19af4     A8 00 A0 FD | 	call	#pushregs_
19af8     0A 1F 02 F6 | 	mov	local01, arg02
19afc     0B 21 02 F6 | 	mov	local02, arg03
19b00     0C 23 02 F6 | 	mov	local03, arg04
19b04     EC 4A B0 FD | 	call	#__system___gettxfunc
19b08     FD 12 0A F6 | 	mov	arg01, result1 wz
19b0c     00 FA 05 A6 |  if_e	mov	result1, #0
19b10     3A 20 26 54 |  if_ne	bith	local02, #58
19b14     10 15 02 56 |  if_ne	mov	arg02, local02
19b18     0F 17 02 56 |  if_ne	mov	arg03, local01
19b1c     11 19 02 56 |  if_ne	mov	arg04, local03
19b20     08 02 B0 5D |  if_ne	call	#__system___fmtnum
19b24     A7 F0 03 F6 | 	mov	ptra, fp
19b28     B2 00 A0 FD | 	call	#popregs_
19b2c                 | __system___basic_print_unsigned_ret
19b2c     2D 00 64 FD | 	ret
19b30                 | 
19b30                 | __system___basic_get_char
19b30     03 4A 05 F6 | 	mov	COUNT_, #3
19b34     A8 00 A0 FD | 	call	#pushregs_
19b38     FC 4A B0 FD | 	call	#__system___getrxfunc
19b3c     FD 1E 0A F6 | 	mov	local01, result1 wz
19b40     01 FA 65 A6 |  if_e	neg	result1, #1
19b44     28 00 90 AD |  if_e	jmp	#LR__2270
19b48     0F 21 02 F6 | 	mov	local02, local01
19b4c     13 1E 46 F7 | 	zerox	local01, #19
19b50     14 20 46 F0 | 	shr	local02, #20
19b54     02 20 66 F0 | 	shl	local02, #2
19b58     ED 20 02 F1 | 	add	local02, __methods__
19b5c     10 21 02 FB | 	rdlong	local02, local02
19b60     F2 22 02 F6 | 	mov	local03, objptr
19b64     0F E5 01 F6 | 	mov	objptr, local01
19b68     2D 20 62 FD | 	call	local02
19b6c     11 E5 01 F6 | 	mov	objptr, local03
19b70                 | LR__2270
19b70     A7 F0 03 F6 | 	mov	ptra, fp
19b74     B2 00 A0 FD | 	call	#popregs_
19b78                 | __system___basic_get_char_ret
19b78     2D 00 64 FD | 	ret
19b7c                 | 
19b7c                 | __system___basic_get
19b7c     04 4A 05 F6 | 	mov	COUNT_, #4
19b80     A8 00 A0 FD | 	call	#pushregs_
19b84     0D 1F 02 F6 | 	mov	local01, arg05
19b88     0F 19 02 FD | 	qmul	arg04, local01
19b8c     09 21 02 F6 | 	mov	local02, arg01
19b90     0B 23 02 F6 | 	mov	local03, arg03
19b94     00 14 0E F2 | 	cmp	arg02, #0 wz
19b98     01 14 86 51 |  if_ne	sub	arg02, #1
19b9c     10 13 02 56 |  if_ne	mov	arg01, local02
19ba0     00 16 06 56 |  if_ne	mov	arg03, #0
19ba4     18 24 62 FD | 	getqx	local04
19ba8     3C 41 B0 5D |  if_ne	call	#__system__lseek
19bac     11 15 02 F6 | 	mov	arg02, local03
19bb0     12 17 02 F6 | 	mov	arg03, local04
19bb4     10 13 02 F6 | 	mov	arg01, local02
19bb8     B4 40 B0 FD | 	call	#__system__read
19bbc     FD 24 02 F6 | 	mov	local04, result1
19bc0     01 24 56 F2 | 	cmps	local04, #1 wc
19bc4     10 00 90 CD |  if_b	jmp	#LR__2280
19bc8     12 63 02 F6 | 	mov	muldiva_, local04
19bcc     0F 65 02 F6 | 	mov	muldivb_, local01
19bd0     BA 00 A0 FD | 	call	#divide_
19bd4     32 25 02 F6 | 	mov	local04, muldivb_
19bd8                 | LR__2280
19bd8     12 FB 01 F6 | 	mov	result1, local04
19bdc     A7 F0 03 F6 | 	mov	ptra, fp
19be0     B2 00 A0 FD | 	call	#popregs_
19be4                 | __system___basic_get_ret
19be4     2D 00 64 FD | 	ret
19be8                 | 
19be8                 | __system___fmtchar
19be8     00 4A 05 F6 | 	mov	COUNT_, #0
19bec     A8 00 A0 FD | 	call	#pushregs_
19bf0     10 F0 07 F1 | 	add	ptra, #16
19bf4     04 4E 05 F1 | 	add	fp, #4
19bf8     A7 12 62 FC | 	wrlong	arg01, fp
19bfc     04 4E 05 F1 | 	add	fp, #4
19c00     A7 14 62 FC | 	wrlong	arg02, fp
19c04     04 4E 05 F1 | 	add	fp, #4
19c08     A7 16 62 FC | 	wrlong	arg03, fp
19c0c     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
19c10     A7 16 62 FC | 	wrlong	arg03, fp
19c14     08 4E 85 F1 | 	sub	fp, #8
19c18     A7 12 02 FB | 	rdlong	arg01, fp
19c1c     04 4E 05 F1 | 	add	fp, #4
19c20     A7 14 02 FB | 	rdlong	arg02, fp
19c24     04 4E 05 F1 | 	add	fp, #4
19c28     A7 16 02 F6 | 	mov	arg03, fp
19c2c     0C 4E 85 F1 | 	sub	fp, #12
19c30     0C 00 B0 FD | 	call	#__system___fmtstr
19c34     A7 F0 03 F6 | 	mov	ptra, fp
19c38     B2 00 A0 FD | 	call	#popregs_
19c3c                 | __system___fmtchar_ret
19c3c     2D 00 64 FD | 	ret
19c40                 | 
19c40                 | __system___fmtstr
19c40     09 4A 05 F6 | 	mov	COUNT_, #9
19c44     A8 00 A0 FD | 	call	#pushregs_
19c48     09 1F 02 F6 | 	mov	local01, arg01
19c4c     0A 21 02 F6 | 	mov	local02, arg02
19c50     0B 23 02 F6 | 	mov	local03, arg03
19c54     10 19 E2 F8 | 	getbyte	arg04, local02, #0
19c58     11 13 02 F6 | 	mov	arg01, local03
19c5c     09 25 02 F6 | 	mov	local04, arg01
19c60     97 06 48 FB | 	callpa	#(@LR__2291-@LR__2290)>>2,fcache_load_ptr_
19c64                 | LR__2290
19c64     12 FB C9 FA | 	rdbyte	result1, local04 wz
19c68     01 24 06 51 |  if_ne	add	local04, #1
19c6c     F4 FF 9F 5D |  if_ne	jmp	#LR__2290
19c70                 | LR__2291
19c70     09 25 82 F1 | 	sub	local04, arg01
19c74     00 18 0E F2 | 	cmp	arg04, #0 wz
19c78     0C 25 7A 53 |  if_ne	fles	local04, arg04 wcz
19c7c     10 15 02 F6 | 	mov	arg02, local02
19c80     12 17 02 F6 | 	mov	arg03, local04
19c84     0F 13 02 F6 | 	mov	arg01, local01
19c88     02 18 06 F6 | 	mov	arg04, #2
19c8c     04 46 B0 FD | 	call	#__system___fmtpad
19c90     FD 26 02 F6 | 	mov	local05, result1
19c94     00 26 56 F2 | 	cmps	local05, #0 wc
19c98     13 FB 01 C6 |  if_b	mov	result1, local05
19c9c     80 00 90 CD |  if_b	jmp	#LR__2294
19ca0     01 24 56 F2 | 	cmps	local04, #1 wc
19ca4     50 00 90 CD |  if_b	jmp	#LR__2293
19ca8     12 29 02 F6 | 	mov	local06, local04
19cac                 | LR__2292
19cac     0F 2B 02 F6 | 	mov	local07, local01
19cb0     0F 2D 02 F6 | 	mov	local08, local01
19cb4     13 2A 46 F7 | 	zerox	local07, #19
19cb8     14 2C 46 F0 | 	shr	local08, #20
19cbc     02 2C 66 F0 | 	shl	local08, #2
19cc0     ED 2C 02 F1 | 	add	local08, __methods__
19cc4     16 2D 02 FB | 	rdlong	local08, local08
19cc8     11 13 C2 FA | 	rdbyte	arg01, local03
19ccc     F2 2E 02 F6 | 	mov	local09, objptr
19cd0     15 E5 01 F6 | 	mov	objptr, local07
19cd4     01 22 06 F1 | 	add	local03, #1
19cd8     2D 2C 62 FD | 	call	local08
19cdc     17 E5 01 F6 | 	mov	objptr, local09
19ce0     FD 2E 02 F6 | 	mov	local09, result1
19ce4     00 2E 56 F2 | 	cmps	local09, #0 wc
19ce8     17 FB 01 C6 |  if_b	mov	result1, local09
19cec     30 00 90 CD |  if_b	jmp	#LR__2294
19cf0     17 27 02 F1 | 	add	local05, local09
19cf4     ED 29 6E FB | 	djnz	local06, #LR__2292
19cf8                 | LR__2293
19cf8     10 15 02 F6 | 	mov	arg02, local02
19cfc     12 17 02 F6 | 	mov	arg03, local04
19d00     0F 13 02 F6 | 	mov	arg01, local01
19d04     01 18 06 F6 | 	mov	arg04, #1
19d08     88 45 B0 FD | 	call	#__system___fmtpad
19d0c     FD 2E 02 F6 | 	mov	local09, result1
19d10     00 2E 56 F2 | 	cmps	local09, #0 wc
19d14     17 FB 01 C6 |  if_b	mov	result1, local09
19d18     17 27 02 31 |  if_ae	add	local05, local09
19d1c     13 FB 01 36 |  if_ae	mov	result1, local05
19d20                 | LR__2294
19d20     A7 F0 03 F6 | 	mov	ptra, fp
19d24     B2 00 A0 FD | 	call	#popregs_
19d28                 | __system___fmtstr_ret
19d28     2D 00 64 FD | 	ret
19d2c                 | 
19d2c                 | __system___fmtnum
19d2c     0B 4A 05 F6 | 	mov	COUNT_, #11
19d30     A8 00 A0 FD | 	call	#pushregs_
19d34     09 1F 02 F6 | 	mov	local01, arg01
19d38     0A 21 02 F6 | 	mov	local02, arg02
19d3c     0B 23 02 F6 | 	mov	local03, arg03
19d40     0C 25 02 F6 | 	mov	local04, arg04
19d44     F8 27 02 F6 | 	mov	local05, ptra
19d48     13 29 02 F6 | 	mov	local06, local05
19d4c     00 2A 06 F6 | 	mov	local07, #0
19d50     10 2D 02 F6 | 	mov	local08, local02
19d54     10 2C 46 F0 | 	shr	local08, #16
19d58     3F 2C 06 F5 | 	and	local08, #63
19d5c     10 2F E2 F8 | 	getbyte	local09, local02, #0
19d60     10 31 02 F6 | 	mov	local10, local02
19d64     1A 30 46 F0 | 	shr	local10, #26
19d68     03 30 06 F5 | 	and	local10, #3
19d6c     18 33 02 F6 | 	mov	local11, local10
19d70     01 2C 56 F2 | 	cmps	local08, #1 wc
19d74     44 F0 07 F1 | 	add	ptra, #68
19d78     01 2C 86 31 |  if_ae	sub	local08, #1
19d7c     41 2E 56 F2 | 	cmps	local09, #65 wc
19d80     00 2E 0E C2 |  if_b	cmp	local09, #0 wz
19d84     40 2E 06 B6 |  if_nc_or_z	mov	local09, #64
19d88     03 32 0E F2 | 	cmp	local11, #3 wz
19d8c     00 32 06 A6 |  if_e	mov	local11, #0
19d90     00 22 56 52 |  if_ne	cmps	local03, #0 wc
19d94     04 32 06 46 |  if_c_and_nz	mov	local11, #4
19d98     11 23 62 46 |  if_c_and_nz	neg	local03, local03
19d9c     00 32 0E F2 | 	cmp	local11, #0 wz
19da0     4C 00 90 AD |  if_e	jmp	#LR__2303
19da4     01 2A 06 F6 | 	mov	local07, #1
19da8     17 2D 0A F2 | 	cmp	local08, local09 wz
19dac     18 00 90 5D |  if_ne	jmp	#LR__2301
19db0     05 2C 6E FB | 	djnz	local08, #LR__2300
19db4     0F 13 02 F6 | 	mov	arg01, local01
19db8     10 15 02 F6 | 	mov	arg02, local02
19dbc     23 16 06 F6 | 	mov	arg03, #35
19dc0     24 FE BF FD | 	call	#__system___fmtchar
19dc4     88 00 90 FD | 	jmp	#LR__2307
19dc8                 | LR__2300
19dc8                 | LR__2301
19dc8     02 32 0E F2 | 	cmp	local11, #2 wz
19dcc     14 31 02 A6 |  if_e	mov	local10, local06
19dd0     01 28 06 A1 |  if_e	add	local06, #1
19dd4     18 41 48 AC |  if_e	wrbyte	#32, local10
19dd8     14 00 90 AD |  if_e	jmp	#LR__2302
19ddc     04 32 0E F2 | 	cmp	local11, #4 wz
19de0     14 5B 48 AC |  if_e	wrbyte	#45, local06
19de4     01 28 06 A1 |  if_e	add	local06, #1
19de8     14 57 48 5C |  if_ne	wrbyte	#43, local06
19dec     01 28 06 51 |  if_ne	add	local06, #1
19df0                 | LR__2302
19df0                 | LR__2303
19df0     14 13 02 F6 | 	mov	arg01, local06
19df4     11 15 02 F6 | 	mov	arg02, local03
19df8     12 17 02 F6 | 	mov	arg03, local04
19dfc     16 19 02 F6 | 	mov	arg04, local08
19e00     00 1A 06 F6 | 	mov	arg05, #0
19e04     1D 20 2E F4 | 	testbn	local02, #29 wz
19e08     01 1A 06 56 |  if_ne	mov	arg05, #1
19e0c     4C 45 B0 FD | 	call	#__system___uitoa
19e10     FD 2A 02 F1 | 	add	local07, result1
19e14     17 2B 5A F2 | 	cmps	local07, local09 wcz
19e18     24 00 90 ED |  if_be	jmp	#LR__2306
19e1c     97 0E 48 FB | 	callpa	#(@LR__2305-@LR__2304)>>2,fcache_load_ptr_
19e20                 | LR__2304
19e20     17 31 02 F6 | 	mov	local10, local09
19e24     01 30 56 F2 | 	cmps	local10, #1 wc
19e28     01 2E 86 F1 | 	sub	local09, #1
19e2c     14 31 02 36 |  if_ae	mov	local10, local06
19e30     01 28 06 31 |  if_ae	add	local06, #1
19e34     18 47 48 3C |  if_ae	wrbyte	#35, local10
19e38     E4 FF 9F 3D |  if_ae	jmp	#LR__2304
19e3c                 | LR__2305
19e3c     14 01 48 FC | 	wrbyte	#0, local06
19e40                 | LR__2306
19e40     0F 13 02 F6 | 	mov	arg01, local01
19e44     10 15 02 F6 | 	mov	arg02, local02
19e48     13 17 02 F6 | 	mov	arg03, local05
19e4c     F0 FD BF FD | 	call	#__system___fmtstr
19e50                 | LR__2307
19e50     A7 F0 03 F6 | 	mov	ptra, fp
19e54     B2 00 A0 FD | 	call	#popregs_
19e58                 | __system___fmtnum_ret
19e58     2D 00 64 FD | 	ret
19e5c                 | 
19e5c                 | __system___fmtfloat
19e5c     10 4A 05 F6 | 	mov	COUNT_, #16
19e60     A8 00 A0 FD | 	call	#pushregs_
19e64     24 F1 07 F1 | 	add	ptra, #292
19e68     04 4E 05 F1 | 	add	fp, #4
19e6c     A7 12 62 FC | 	wrlong	arg01, fp
19e70     04 4E 05 F1 | 	add	fp, #4
19e74     A7 14 62 FC | 	wrlong	arg02, fp
19e78     04 4E 05 F1 | 	add	fp, #4
19e7c     A7 16 62 FC | 	wrlong	arg03, fp
19e80     04 4E 05 F1 | 	add	fp, #4
19e84     A7 18 62 FC | 	wrlong	arg04, fp
19e88     0C 4E 05 F1 | 	add	fp, #12
19e8c     A7 14 68 FC | 	wrlong	#10, fp
19e90     08 4E 05 F1 | 	add	fp, #8
19e94     A7 00 68 FC | 	wrlong	#0, fp
19e98     08 4E 05 F1 | 	add	fp, #8
19e9c     A7 00 68 FC | 	wrlong	#0, fp
19ea0     08 4E 05 F1 | 	add	fp, #8
19ea4     A7 00 68 FC | 	wrlong	#0, fp
19ea8     04 4E 05 F1 | 	add	fp, #4
19eac     A7 04 68 FC | 	wrlong	#2, fp
19eb0     04 4E 05 F1 | 	add	fp, #4
19eb4     A7 00 68 FC | 	wrlong	#0, fp
19eb8     04 4E 05 F1 | 	add	fp, #4
19ebc     A7 00 68 FC | 	wrlong	#0, fp
19ec0     04 4E 05 F1 | 	add	fp, #4
19ec4     A7 00 68 FC | 	wrlong	#0, fp
19ec8     04 4E 05 F1 | 	add	fp, #4
19ecc     A7 00 68 FC | 	wrlong	#0, fp
19ed0     18 4E 05 F1 | 	add	fp, #24
19ed4     A7 00 68 FC | 	wrlong	#0, fp
19ed8     68 4E 05 F1 | 	add	fp, #104
19edc     A7 1E 02 F6 | 	mov	local01, fp
19ee0     08 4E 85 F1 | 	sub	fp, #8
19ee4     A7 1E 62 FC | 	wrlong	local01, fp
19ee8     04 4E 05 F1 | 	add	fp, #4
19eec     A7 1E 62 FC | 	wrlong	local01, fp
19ef0     BC 4E 85 F1 | 	sub	fp, #188
19ef4     A7 1E 02 FB | 	rdlong	local01, fp
19ef8     10 1E 46 F0 | 	shr	local01, #16
19efc     3F 1E 06 F5 | 	and	local01, #63
19f00     B0 4E 05 F1 | 	add	fp, #176
19f04     A7 1E 62 FC | 	wrlong	local01, fp
19f08     B0 4E 85 F1 | 	sub	fp, #176
19f0c     A7 1E 02 FB | 	rdlong	local01, fp
19f10     1C 1E 46 F0 | 	shr	local01, #28
19f14     01 1E 06 F5 | 	and	local01, #1
19f18     08 4F 05 F1 | 	add	fp, #264
19f1c     A7 1E 62 FC | 	wrlong	local01, fp
19f20     58 4E 85 F1 | 	sub	fp, #88
19f24     A7 1E 0A FB | 	rdlong	local01, fp wz
19f28     B8 4E 85 F1 | 	sub	fp, #184
19f2c     3C 00 90 5D |  if_ne	jmp	#LR__2311
19f30     10 4E 05 F1 | 	add	fp, #16
19f34     A7 1E 02 FB | 	rdlong	local01, fp
19f38     10 4E 85 F1 | 	sub	fp, #16
19f3c     61 1E 0E F2 | 	cmp	local01, #97 wz
19f40     18 00 90 5D |  if_ne	jmp	#LR__2310
19f44     B8 4E 05 F1 | 	add	fp, #184
19f48     A7 1A 68 FC | 	wrlong	#13, fp
19f4c     84 4E 85 F1 | 	sub	fp, #132
19f50     A7 02 68 FC | 	wrlong	#1, fp
19f54     34 4E 85 F1 | 	sub	fp, #52
19f58     24 00 90 FD | 	jmp	#LR__2312
19f5c                 | LR__2310
19f5c     B8 4E 05 F1 | 	add	fp, #184
19f60     A7 0C 68 FC | 	wrlong	#6, fp
19f64     B8 4E 85 F1 | 	sub	fp, #184
19f68     14 00 90 FD | 	jmp	#LR__2312
19f6c                 | LR__2311
19f6c     B8 4E 05 F1 | 	add	fp, #184
19f70     A7 1E 02 FB | 	rdlong	local01, fp
19f74     01 1E 86 F1 | 	sub	local01, #1
19f78     A7 1E 62 FC | 	wrlong	local01, fp
19f7c     B8 4E 85 F1 | 	sub	fp, #184
19f80                 | LR__2312
19f80     08 4E 05 F1 | 	add	fp, #8
19f84     A7 1E 02 FB | 	rdlong	local01, fp
19f88     16 1E 46 F0 | 	shr	local01, #22
19f8c     03 1E 06 F5 | 	and	local01, #3
19f90     04 4F 05 F1 | 	add	fp, #260
19f94     A7 1E 62 FC | 	wrlong	local01, fp
19f98     04 4F 85 F1 | 	sub	fp, #260
19f9c     A7 1E 02 FB | 	rdlong	local01, fp
19fa0     1D 1E 46 F0 | 	shr	local01, #29
19fa4     01 1E 06 F5 | 	and	local01, #1
19fa8     B4 4E 05 F1 | 	add	fp, #180
19fac     A7 1E 62 FC | 	wrlong	local01, fp
19fb0     B4 4E 85 F1 | 	sub	fp, #180
19fb4     A7 1E 02 FB | 	rdlong	local01, fp
19fb8     0F 1F EA F8 | 	getbyte	local01, local01, #1
19fbc     60 4E 05 F1 | 	add	fp, #96
19fc0     A7 1E 62 FC | 	wrlong	local01, fp
19fc4     60 4E 85 F1 | 	sub	fp, #96
19fc8     A7 1E 02 FB | 	rdlong	local01, fp
19fcc     0F 1F E2 F8 | 	getbyte	local01, local01, #0
19fd0     64 4E 05 F1 | 	add	fp, #100
19fd4     A7 1E 62 FC | 	wrlong	local01, fp
19fd8     00 1E 06 F6 | 	mov	local01, #0
19fdc     5C 4E 85 F1 | 	sub	fp, #92
19fe0     A7 1A 02 FB | 	rdlong	arg05, fp
19fe4     65 1A 0E F2 | 	cmp	arg05, #101 wz
19fe8     01 1E 06 A6 |  if_e	mov	local01, #1
19fec     14 4E 05 F1 | 	add	fp, #20
19ff0     A7 1E 62 FC | 	wrlong	local01, fp
19ff4     98 4E 05 F1 | 	add	fp, #152
19ff8     A7 20 0A FB | 	rdlong	local02, fp wz
19ffc     45 1E 06 56 |  if_ne	mov	local01, #69
1a000     65 1E 06 A6 |  if_e	mov	local01, #101
1a004     8C 4E 85 F1 | 	sub	fp, #140
1a008     A7 1E 62 FC | 	wrlong	local01, fp
1a00c     20 4E 85 F1 | 	sub	fp, #32
1a010     A7 1E 02 FB | 	rdlong	local01, fp
1a014     10 4E 85 F1 | 	sub	fp, #16
1a018     61 1E 0E F2 | 	cmp	local01, #97 wz
1a01c     4C 00 90 5D |  if_ne	jmp	#LR__2313
1a020     24 4E 05 F1 | 	add	fp, #36
1a024     A7 02 68 FC | 	wrlong	#1, fp
1a028     98 4E 05 F1 | 	add	fp, #152
1a02c     A7 20 0A FB | 	rdlong	local02, fp wz
1a030     50 1E 06 56 |  if_ne	mov	local01, #80
1a034     70 1E 06 A6 |  if_e	mov	local01, #112
1a038     8C 4E 85 F1 | 	sub	fp, #140
1a03c     A7 1E 62 FC | 	wrlong	local01, fp
1a040     14 4E 85 F1 | 	sub	fp, #20
1a044     A7 04 68 FC | 	wrlong	#2, fp
1a048     1C 4E 05 F1 | 	add	fp, #28
1a04c     A7 02 68 FC | 	wrlong	#1, fp
1a050     84 4E 05 F1 | 	add	fp, #132
1a054     A7 20 0A FB | 	rdlong	local02, fp wz
1a058     58 1E 06 56 |  if_ne	mov	local01, #88
1a05c     78 1E 06 A6 |  if_e	mov	local01, #120
1a060     7C 4E 85 F1 | 	sub	fp, #124
1a064     A7 1E 62 FC | 	wrlong	local01, fp
1a068     40 4E 85 F1 | 	sub	fp, #64
1a06c                 | LR__2313
1a06c     10 4E 05 F1 | 	add	fp, #16
1a070     A7 1E 02 FB | 	rdlong	local01, fp
1a074     10 4E 85 F1 | 	sub	fp, #16
1a078     23 1E 0E F2 | 	cmp	local01, #35 wz
1a07c     3C 00 90 5D |  if_ne	jmp	#LR__2316
1a080     48 4E 05 F1 | 	add	fp, #72
1a084     A7 02 68 FC | 	wrlong	#1, fp
1a088     C8 4E 05 F1 | 	add	fp, #200
1a08c     A7 1E 0A FB | 	rdlong	local01, fp wz
1a090     10 4F 85 F1 | 	sub	fp, #272
1a094     18 00 90 AD |  if_e	jmp	#LR__2314
1a098     10 4E 05 F1 | 	add	fp, #16
1a09c     A7 CC 68 FC | 	wrlong	#102, fp
1a0a0     00 4F 05 F1 | 	add	fp, #256
1a0a4     A7 00 68 FC | 	wrlong	#0, fp
1a0a8     10 4F 85 F1 | 	sub	fp, #272
1a0ac     0C 00 90 FD | 	jmp	#LR__2315
1a0b0                 | LR__2314
1a0b0     10 4F 05 F1 | 	add	fp, #272
1a0b4     A7 02 68 FC | 	wrlong	#1, fp
1a0b8     10 4F 85 F1 | 	sub	fp, #272
1a0bc                 | LR__2315
1a0bc                 | LR__2316
1a0bc     08 4E 05 F1 | 	add	fp, #8
1a0c0     A7 1E 02 FB | 	rdlong	local01, fp
1a0c4     1A 1E 46 F0 | 	shr	local01, #26
1a0c8     03 1E 06 F5 | 	and	local01, #3
1a0cc     5C 4E 05 F1 | 	add	fp, #92
1a0d0     A7 1E 62 FC | 	wrlong	local01, fp
1a0d4     58 4E 85 F1 | 	sub	fp, #88
1a0d8     A7 FA 01 FB | 	rdlong	result1, fp
1a0dc     0C 4E 85 F1 | 	sub	fp, #12
1a0e0     1F FA 4D F0 | 	shr	result1, #31 wz
1a0e4     20 00 90 AD |  if_e	jmp	#LR__2317
1a0e8     2C 4E 05 F1 | 	add	fp, #44
1a0ec     A7 5A 68 FC | 	wrlong	#45, fp
1a0f0     20 4E 85 F1 | 	sub	fp, #32
1a0f4     A7 FA 01 FB | 	rdlong	result1, fp
1a0f8     1F FA E5 F4 | 	bitnot	result1, #31
1a0fc     A7 FA 61 FC | 	wrlong	result1, fp
1a100     0C 4E 85 F1 | 	sub	fp, #12
1a104     3C 00 90 FD | 	jmp	#LR__2319
1a108                 | LR__2317
1a108     64 4E 05 F1 | 	add	fp, #100
1a10c     A7 1E 02 FB | 	rdlong	local01, fp
1a110     64 4E 85 F1 | 	sub	fp, #100
1a114     01 1E 0E F2 | 	cmp	local01, #1 wz
1a118     2C 4E 05 A1 |  if_e	add	fp, #44
1a11c     A7 56 68 AC |  if_e	wrlong	#43, fp
1a120     2C 4E 85 A1 |  if_e	sub	fp, #44
1a124     1C 00 90 AD |  if_e	jmp	#LR__2318
1a128     64 4E 05 F1 | 	add	fp, #100
1a12c     A7 1E 02 FB | 	rdlong	local01, fp
1a130     64 4E 85 F1 | 	sub	fp, #100
1a134     02 1E 0E F2 | 	cmp	local01, #2 wz
1a138     2C 4E 05 A1 |  if_e	add	fp, #44
1a13c     A7 40 68 AC |  if_e	wrlong	#32, fp
1a140     2C 4E 85 A1 |  if_e	sub	fp, #44
1a144                 | LR__2318
1a144                 | LR__2319
1a144     08 4E 05 F1 | 	add	fp, #8
1a148     A7 1E 02 FB | 	rdlong	local01, fp
1a14c     18 1E 46 F0 | 	shr	local01, #24
1a150     03 1E 06 F5 | 	and	local01, #3
1a154     3C 4E 05 F1 | 	add	fp, #60
1a158     A7 1E 62 FC | 	wrlong	local01, fp
1a15c     00 1E 06 F6 | 	mov	local01, #0
1a160     18 4E 85 F1 | 	sub	fp, #24
1a164     A7 22 0A FB | 	rdlong	local03, fp wz
1a168     2C 4E 85 F1 | 	sub	fp, #44
1a16c     18 00 90 5D |  if_ne	jmp	#LR__2320
1a170     1C 4E 05 F1 | 	add	fp, #28
1a174     A7 24 02 FB | 	rdlong	local04, fp
1a178     1C 4E 85 F1 | 	sub	fp, #28
1a17c     12 27 02 F6 | 	mov	local05, local04
1a180     0A 26 0E F2 | 	cmp	local05, #10 wz
1a184     04 00 90 AD |  if_e	jmp	#LR__2321
1a188                 | LR__2320
1a188     01 1E 66 F5 | 	xor	local01, #1
1a18c                 | LR__2321
1a18c     3C 4E 05 F1 | 	add	fp, #60
1a190     A7 1E 62 FC | 	wrlong	local01, fp
1a194     3C 4E 85 F1 | 	sub	fp, #60
1a198     00 1E 0E F2 | 	cmp	local01, #0 wz
1a19c     0C 01 90 AD |  if_e	jmp	#LR__2323
1a1a0     44 4E 05 F1 | 	add	fp, #68
1a1a4     A7 26 02 FB | 	rdlong	local05, fp
1a1a8     44 4E 85 F1 | 	sub	fp, #68
1a1ac     13 23 02 F6 | 	mov	local03, local05
1a1b0     02 22 0E F2 | 	cmp	local03, #2 wz
1a1b4     F4 00 90 5D |  if_ne	jmp	#LR__2323
1a1b8     0C 4F 05 F1 | 	add	fp, #268
1a1bc     A7 28 02 FB | 	rdlong	local06, fp
1a1c0     0C 4F 85 F1 | 	sub	fp, #268
1a1c4     14 25 02 F6 | 	mov	local04, local06
1a1c8     02 24 0E F2 | 	cmp	local04, #2 wz
1a1cc     DC 00 90 AD |  if_e	jmp	#LR__2323
1a1d0     C0 4E 05 F1 | 	add	fp, #192
1a1d4     A7 12 02 FB | 	rdlong	arg01, fp
1a1d8     94 4E 85 F1 | 	sub	fp, #148
1a1dc     A7 14 02 FB | 	rdlong	arg02, fp
1a1e0     14 4E 05 F1 | 	add	fp, #20
1a1e4     A7 16 02 FB | 	rdlong	arg03, fp
1a1e8     40 4E 85 F1 | 	sub	fp, #64
1a1ec     D4 43 B0 FD | 	call	#__system__emitsign_0383
1a1f0     14 4F 05 F1 | 	add	fp, #276
1a1f4     A7 FA 61 FC | 	wrlong	result1, fp
1a1f8     14 4F 85 F1 | 	sub	fp, #276
1a1fc     00 FA 55 F2 | 	cmps	result1, #0 wc
1a200     14 4F 05 C1 |  if_b	add	fp, #276
1a204     A7 FA 01 CB |  if_b	rdlong	result1, fp
1a208     14 4F 85 C1 |  if_b	sub	fp, #276
1a20c     6C 0B 90 CD |  if_b	jmp	#LR__2373
1a210     C0 4E 05 F1 | 	add	fp, #192
1a214     A7 1E 02 FB | 	rdlong	local01, fp
1a218     54 4E 05 F1 | 	add	fp, #84
1a21c     A7 26 02 FB | 	rdlong	local05, fp
1a220     13 23 02 F6 | 	mov	local03, local05
1a224     13 1F 02 F1 | 	add	local01, local05
1a228     54 4E 85 F1 | 	sub	fp, #84
1a22c     A7 1E 62 FC | 	wrlong	local01, fp
1a230     58 4E 85 F1 | 	sub	fp, #88
1a234     A7 1E 0A FB | 	rdlong	local01, fp wz
1a238     68 4E 85 F1 | 	sub	fp, #104
1a23c     60 00 90 AD |  if_e	jmp	#LR__2322
1a240     68 4E 05 F1 | 	add	fp, #104
1a244     A7 1E 02 FB | 	rdlong	local01, fp
1a248     AC 4E 05 F1 | 	add	fp, #172
1a24c     A7 22 02 FB | 	rdlong	local03, fp
1a250     11 1F 82 F1 | 	sub	local01, local03
1a254     AC 4E 85 F1 | 	sub	fp, #172
1a258     A7 1E 62 FC | 	wrlong	local01, fp
1a25c     68 4E 85 F1 | 	sub	fp, #104
1a260     00 1E 56 F2 | 	cmps	local01, #0 wc
1a264     68 4E 05 C1 |  if_b	add	fp, #104
1a268     A7 00 68 CC |  if_b	wrlong	#0, fp
1a26c     68 4E 85 C1 |  if_b	sub	fp, #104
1a270     08 4E 05 F1 | 	add	fp, #8
1a274     A7 1E 02 FB | 	rdlong	local01, fp
1a278     E8 1E 06 F4 | 	bitl	local01, #232
1a27c     A7 1E 62 FC | 	wrlong	local01, fp
1a280     60 4E 05 F1 | 	add	fp, #96
1a284     A7 26 02 FB | 	rdlong	local05, fp
1a288     13 23 02 F6 | 	mov	local03, local05
1a28c     08 22 66 F0 | 	shl	local03, #8
1a290     11 1F 42 F5 | 	or	local01, local03
1a294     60 4E 85 F1 | 	sub	fp, #96
1a298     A7 1E 62 FC | 	wrlong	local01, fp
1a29c     08 4E 85 F1 | 	sub	fp, #8
1a2a0                 | LR__2322
1a2a0     3C 4E 05 F1 | 	add	fp, #60
1a2a4     A7 00 68 FC | 	wrlong	#0, fp
1a2a8     3C 4E 85 F1 | 	sub	fp, #60
1a2ac                 | LR__2323
1a2ac     0C 4E 05 F1 | 	add	fp, #12
1a2b0     A7 12 02 FB | 	rdlong	arg01, fp
1a2b4     0C 4E 85 F1 | 	sub	fp, #12
1a2b8     A8 1E B0 FD | 	call	#__system____builtin_ilogb
1a2bc     FF FF 3F FF 
1a2c0     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
1a2c4     50 00 90 5D |  if_ne	jmp	#LR__2325
1a2c8     2C 4E 05 F1 | 	add	fp, #44
1a2cc     A7 1E 0A FB | 	rdlong	local01, fp wz
1a2d0     2C 4E 85 F1 | 	sub	fp, #44
1a2d4     24 00 90 AD |  if_e	jmp	#LR__2324
1a2d8     C0 4E 05 F1 | 	add	fp, #192
1a2dc     A7 20 02 FB | 	rdlong	local02, fp
1a2e0     10 23 02 F6 | 	mov	local03, local02
1a2e4     01 22 06 F1 | 	add	local03, #1
1a2e8     A7 22 62 FC | 	wrlong	local03, fp
1a2ec     94 4E 85 F1 | 	sub	fp, #148
1a2f0     A7 24 02 FB | 	rdlong	local04, fp
1a2f4     2C 4E 85 F1 | 	sub	fp, #44
1a2f8     10 25 42 FC | 	wrbyte	local04, local02
1a2fc                 | LR__2324
1a2fc     C0 4E 05 F1 | 	add	fp, #192
1a300     A7 12 02 FB | 	rdlong	arg01, fp
1a304     C0 4E 85 F1 | 	sub	fp, #192
1a308     41 01 00 FF 
1a30c     86 14 06 F6 | 	mov	arg02, ##@LR__4251
1a310     18 EA BF FD | 	call	#__system____builtin_strcpy
1a314     A4 08 90 FD | 	jmp	#LR__2361
1a318                 | LR__2325
1a318     0C 4E 05 F1 | 	add	fp, #12
1a31c     A7 20 02 FB | 	rdlong	local02, fp
1a320     0C 4E 85 F1 | 	sub	fp, #12
1a324     10 13 02 F6 | 	mov	arg01, local02
1a328     38 1E B0 FD | 	call	#__system____builtin_ilogb
1a32c     00 00 40 FF 
1a330     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
1a334     50 00 90 5D |  if_ne	jmp	#LR__2327
1a338     2C 4E 05 F1 | 	add	fp, #44
1a33c     A7 1E 0A FB | 	rdlong	local01, fp wz
1a340     2C 4E 85 F1 | 	sub	fp, #44
1a344     24 00 90 AD |  if_e	jmp	#LR__2326
1a348     C0 4E 05 F1 | 	add	fp, #192
1a34c     A7 20 02 FB | 	rdlong	local02, fp
1a350     10 23 02 F6 | 	mov	local03, local02
1a354     01 22 06 F1 | 	add	local03, #1
1a358     A7 22 62 FC | 	wrlong	local03, fp
1a35c     94 4E 85 F1 | 	sub	fp, #148
1a360     A7 24 02 FB | 	rdlong	local04, fp
1a364     2C 4E 85 F1 | 	sub	fp, #44
1a368     10 25 42 FC | 	wrbyte	local04, local02
1a36c                 | LR__2326
1a36c     C0 4E 05 F1 | 	add	fp, #192
1a370     A7 12 02 FB | 	rdlong	arg01, fp
1a374     C0 4E 85 F1 | 	sub	fp, #192
1a378     41 01 00 FF 
1a37c     8A 14 06 F6 | 	mov	arg02, ##@LR__4252
1a380     A8 E9 BF FD | 	call	#__system____builtin_strcpy
1a384     34 08 90 FD | 	jmp	#LR__2361
1a388                 | LR__2327
1a388     10 4E 05 F1 | 	add	fp, #16
1a38c     A7 1E 02 FB | 	rdlong	local01, fp
1a390     10 4E 85 F1 | 	sub	fp, #16
1a394     67 1E 0E F2 | 	cmp	local01, #103 wz
1a398     10 4E 05 51 |  if_ne	add	fp, #16
1a39c     A7 22 02 5B |  if_ne	rdlong	local03, fp
1a3a0     10 4E 85 51 |  if_ne	sub	fp, #16
1a3a4     23 22 0E 52 |  if_ne	cmp	local03, #35 wz
1a3a8     94 01 90 5D |  if_ne	jmp	#LR__2332
1a3ac     0C 4E 05 F1 | 	add	fp, #12
1a3b0     A7 12 02 FB | 	rdlong	arg01, fp
1a3b4     08 4E 05 F1 | 	add	fp, #8
1a3b8     A7 14 02 F6 | 	mov	arg02, fp
1a3bc     0C 4E 05 F1 | 	add	fp, #12
1a3c0     A7 16 02 F6 | 	mov	arg03, fp
1a3c4     98 4E 05 F1 | 	add	fp, #152
1a3c8     A7 18 02 FB | 	rdlong	arg04, fp
1a3cc     9C 4E 85 F1 | 	sub	fp, #156
1a3d0     A7 1A 02 FB | 	rdlong	arg05, fp
1a3d4     1C 4E 85 F1 | 	sub	fp, #28
1a3d8     F4 3F B0 FD | 	call	#__system__disassemble_0381
1a3dc     10 4E 05 F1 | 	add	fp, #16
1a3e0     A7 1E 02 FB | 	rdlong	local01, fp
1a3e4     10 4E 85 F1 | 	sub	fp, #16
1a3e8     23 1E 0E F2 | 	cmp	local01, #35 wz
1a3ec     A0 00 90 5D |  if_ne	jmp	#LR__2329
1a3f0     20 4E 05 F1 | 	add	fp, #32
1a3f4     A7 1E 02 FB | 	rdlong	local01, fp
1a3f8     98 4E 05 F1 | 	add	fp, #152
1a3fc     A7 22 02 FB | 	rdlong	local03, fp
1a400     B8 4E 85 F1 | 	sub	fp, #184
1a404     11 1F 5A F2 | 	cmps	local01, local03 wcz
1a408     24 4E 05 11 |  if_a	add	fp, #36
1a40c     A7 02 68 1C |  if_a	wrlong	#1, fp
1a410     24 4E 85 11 |  if_a	sub	fp, #36
1a414     A4 01 90 1D |  if_a	jmp	#LR__2335
1a418     20 4E 05 F1 | 	add	fp, #32
1a41c     A7 1E 02 FB | 	rdlong	local01, fp
1a420     20 4E 85 F1 | 	sub	fp, #32
1a424     00 1E 56 F2 | 	cmps	local01, #0 wc
1a428     2C 00 90 3D |  if_ae	jmp	#LR__2328
1a42c     B8 4E 05 F1 | 	add	fp, #184
1a430     A7 1E 02 FB | 	rdlong	local01, fp
1a434     0F 1F 62 F6 | 	neg	local01, local01
1a438     98 4E 85 F1 | 	sub	fp, #152
1a43c     A7 22 02 FB | 	rdlong	local03, fp
1a440     20 4E 85 F1 | 	sub	fp, #32
1a444     0F 23 5A F2 | 	cmps	local03, local01 wcz
1a448     24 4E 05 E1 |  if_be	add	fp, #36
1a44c     A7 02 68 EC |  if_be	wrlong	#1, fp
1a450     24 4E 85 E1 |  if_be	sub	fp, #36
1a454     64 01 90 FD | 	jmp	#LR__2335
1a458                 | LR__2328
1a458     20 4E 05 F1 | 	add	fp, #32
1a45c     A7 1E 02 FB | 	rdlong	local01, fp
1a460     20 4E 85 F1 | 	sub	fp, #32
1a464     01 1E 56 F2 | 	cmps	local01, #1 wc
1a468     50 01 90 CD |  if_b	jmp	#LR__2335
1a46c     B8 4E 05 F1 | 	add	fp, #184
1a470     A7 1E 02 FB | 	rdlong	local01, fp
1a474     98 4E 85 F1 | 	sub	fp, #152
1a478     A7 22 02 FB | 	rdlong	local03, fp
1a47c     11 1F 82 F1 | 	sub	local01, local03
1a480     98 4E 05 F1 | 	add	fp, #152
1a484     A7 1E 62 FC | 	wrlong	local01, fp
1a488     B8 4E 85 F1 | 	sub	fp, #184
1a48c     2C 01 90 FD | 	jmp	#LR__2335
1a490                 | LR__2329
1a490     00 1E 06 F6 | 	mov	local01, #0
1a494     08 4E 05 F1 | 	add	fp, #8
1a498     A7 20 02 FB | 	rdlong	local02, fp
1a49c     1C 20 46 F0 | 	shr	local02, #28
1a4a0     01 20 0E F5 | 	and	local02, #1 wz
1a4a4     01 1E 06 A6 |  if_e	mov	local01, #1
1a4a8     2C 4E 05 F1 | 	add	fp, #44
1a4ac     A7 1E 62 FC | 	wrlong	local01, fp
1a4b0     14 4E 85 F1 | 	sub	fp, #20
1a4b4     A7 1E 02 FB | 	rdlong	local01, fp
1a4b8     98 4E 05 F1 | 	add	fp, #152
1a4bc     A7 22 02 FB | 	rdlong	local03, fp
1a4c0     B8 4E 85 F1 | 	sub	fp, #184
1a4c4     11 1F 52 F2 | 	cmps	local01, local03 wc
1a4c8     18 00 90 3D |  if_ae	jmp	#LR__2330
1a4cc     20 4E 05 F1 | 	add	fp, #32
1a4d0     A7 24 02 FB | 	rdlong	local04, fp
1a4d4     20 4E 85 F1 | 	sub	fp, #32
1a4d8     FF FF 7F FF 
1a4dc     FC 25 56 F2 | 	cmps	local04, ##-4 wc
1a4e0     10 00 90 3D |  if_ae	jmp	#LR__2331
1a4e4                 | LR__2330
1a4e4     24 4E 05 F1 | 	add	fp, #36
1a4e8     A7 02 68 FC | 	wrlong	#1, fp
1a4ec     24 4E 85 F1 | 	sub	fp, #36
1a4f0     C8 00 90 FD | 	jmp	#LR__2335
1a4f4                 | LR__2331
1a4f4     B8 4E 05 F1 | 	add	fp, #184
1a4f8     A7 24 02 FB | 	rdlong	local04, fp
1a4fc     98 4E 85 F1 | 	sub	fp, #152
1a500     A7 22 02 FB | 	rdlong	local03, fp
1a504     11 25 82 F1 | 	sub	local04, local03
1a508     98 4E 05 F1 | 	add	fp, #152
1a50c     A7 24 62 FC | 	wrlong	local04, fp
1a510     AC 4E 85 F1 | 	sub	fp, #172
1a514     A7 12 02 FB | 	rdlong	arg01, fp
1a518     08 4E 05 F1 | 	add	fp, #8
1a51c     A7 14 02 F6 | 	mov	arg02, fp
1a520     0C 4E 05 F1 | 	add	fp, #12
1a524     A7 16 02 F6 | 	mov	arg03, fp
1a528     12 19 62 F6 | 	neg	arg04, local04
1a52c     04 4E 85 F1 | 	sub	fp, #4
1a530     A7 1A 02 FB | 	rdlong	arg05, fp
1a534     1C 4E 85 F1 | 	sub	fp, #28
1a538     94 3E B0 FD | 	call	#__system__disassemble_0381
1a53c     7C 00 90 FD | 	jmp	#LR__2335
1a540                 | LR__2332
1a540     24 4E 05 F1 | 	add	fp, #36
1a544     A7 1E 0A FB | 	rdlong	local01, fp wz
1a548     24 4E 85 F1 | 	sub	fp, #36
1a54c     34 00 90 AD |  if_e	jmp	#LR__2333
1a550     0C 4E 05 F1 | 	add	fp, #12
1a554     A7 12 02 FB | 	rdlong	arg01, fp
1a558     08 4E 05 F1 | 	add	fp, #8
1a55c     A7 14 02 F6 | 	mov	arg02, fp
1a560     0C 4E 05 F1 | 	add	fp, #12
1a564     A7 16 02 F6 | 	mov	arg03, fp
1a568     98 4E 05 F1 | 	add	fp, #152
1a56c     A7 18 02 FB | 	rdlong	arg04, fp
1a570     9C 4E 85 F1 | 	sub	fp, #156
1a574     A7 1A 02 FB | 	rdlong	arg05, fp
1a578     1C 4E 85 F1 | 	sub	fp, #28
1a57c     50 3E B0 FD | 	call	#__system__disassemble_0381
1a580     38 00 90 FD | 	jmp	#LR__2334
1a584                 | LR__2333
1a584     0C 4E 05 F1 | 	add	fp, #12
1a588     A7 12 02 FB | 	rdlong	arg01, fp
1a58c     08 4E 05 F1 | 	add	fp, #8
1a590     A7 14 02 F6 | 	mov	arg02, fp
1a594     0C 4E 05 F1 | 	add	fp, #12
1a598     A7 16 02 F6 | 	mov	arg03, fp
1a59c     98 4E 05 F1 | 	add	fp, #152
1a5a0     A7 24 02 FB | 	rdlong	local04, fp
1a5a4     01 24 06 F1 | 	add	local04, #1
1a5a8     12 19 62 F6 | 	neg	arg04, local04
1a5ac     9C 4E 85 F1 | 	sub	fp, #156
1a5b0     A7 1A 02 FB | 	rdlong	arg05, fp
1a5b4     1C 4E 85 F1 | 	sub	fp, #28
1a5b8     14 3E B0 FD | 	call	#__system__disassemble_0381
1a5bc                 | LR__2334
1a5bc                 | LR__2335
1a5bc     1C 4E 05 F1 | 	add	fp, #28
1a5c0     A7 1E 02 FB | 	rdlong	local01, fp
1a5c4     1C 4E 85 F1 | 	sub	fp, #28
1a5c8     02 1E 0E F2 | 	cmp	local01, #2 wz
1a5cc     4C 00 90 5D |  if_ne	jmp	#LR__2338
1a5d0     1C 4E 05 F1 | 	add	fp, #28
1a5d4     A7 20 68 FC | 	wrlong	#16, fp
1a5d8     1C 4E 85 F1 | 	sub	fp, #28
1a5dc                 | LR__2336
1a5dc     14 4E 05 F1 | 	add	fp, #20
1a5e0     A7 1E 0A FB | 	rdlong	local01, fp wz
1a5e4     14 4E 85 F1 | 	sub	fp, #20
1a5e8     30 00 90 AD |  if_e	jmp	#LR__2337
1a5ec     14 4E 05 F1 | 	add	fp, #20
1a5f0     A7 22 02 FB | 	rdlong	local03, fp
1a5f4     14 4E 85 F1 | 	sub	fp, #20
1a5f8     00 80 00 FF 
1a5fc     00 22 16 F2 | 	cmp	local03, ##16777216 wc
1a600     18 00 90 3D |  if_ae	jmp	#LR__2337
1a604     14 4E 05 F1 | 	add	fp, #20
1a608     A7 1E 02 FB | 	rdlong	local01, fp
1a60c     01 1E 66 F0 | 	shl	local01, #1
1a610     A7 1E 62 FC | 	wrlong	local01, fp
1a614     14 4E 85 F1 | 	sub	fp, #20
1a618     C0 FF 9F FD | 	jmp	#LR__2336
1a61c                 | LR__2337
1a61c                 | LR__2338
1a61c     70 4E 05 F1 | 	add	fp, #112
1a620     A7 12 02 F6 | 	mov	arg01, fp
1a624     5C 4E 85 F1 | 	sub	fp, #92
1a628     A7 14 02 FB | 	rdlong	arg02, fp
1a62c     08 4E 05 F1 | 	add	fp, #8
1a630     A7 16 02 FB | 	rdlong	arg03, fp
1a634     A0 4E 05 F1 | 	add	fp, #160
1a638     A7 1A 02 FB | 	rdlong	arg05, fp
1a63c     BC 4E 85 F1 | 	sub	fp, #188
1a640     01 18 06 F6 | 	mov	arg04, #1
1a644     14 3D B0 FD | 	call	#__system___uitoa
1a648     58 4E 05 F1 | 	add	fp, #88
1a64c     A7 FA 61 FC | 	wrlong	result1, fp
1a650     38 4E 85 F1 | 	sub	fp, #56
1a654     A7 1E 02 FB | 	rdlong	local01, fp
1a658     20 4E 85 F1 | 	sub	fp, #32
1a65c     00 1E 56 F2 | 	cmps	local01, #0 wc
1a660     50 00 90 3D |  if_ae	jmp	#LR__2339
1a664     60 4E 05 F1 | 	add	fp, #96
1a668     A7 5A 68 FC | 	wrlong	#45, fp
1a66c     50 4E 05 F1 | 	add	fp, #80
1a670     A7 12 02 F6 | 	mov	arg01, fp
1a674     90 4E 85 F1 | 	sub	fp, #144
1a678     A7 22 02 FB | 	rdlong	local03, fp
1a67c     11 15 62 F6 | 	neg	arg02, local03
1a680     18 4E 05 F1 | 	add	fp, #24
1a684     A7 18 02 FB | 	rdlong	arg04, fp
1a688     84 4E 05 F1 | 	add	fp, #132
1a68c     A7 28 02 FB | 	rdlong	local06, fp
1a690     BC 4E 85 F1 | 	sub	fp, #188
1a694     14 25 02 F6 | 	mov	local04, local06
1a698     0A 16 06 F6 | 	mov	arg03, #10
1a69c     12 1B 02 F6 | 	mov	arg05, local04
1a6a0     B8 3C B0 FD | 	call	#__system___uitoa
1a6a4     5C 4E 05 F1 | 	add	fp, #92
1a6a8     A7 FA 61 FC | 	wrlong	result1, fp
1a6ac     5C 4E 85 F1 | 	sub	fp, #92
1a6b0     48 00 90 FD | 	jmp	#LR__2340
1a6b4                 | LR__2339
1a6b4     60 4E 05 F1 | 	add	fp, #96
1a6b8     A7 56 68 FC | 	wrlong	#43, fp
1a6bc     50 4E 05 F1 | 	add	fp, #80
1a6c0     A7 12 02 F6 | 	mov	arg01, fp
1a6c4     90 4E 85 F1 | 	sub	fp, #144
1a6c8     A7 14 02 FB | 	rdlong	arg02, fp
1a6cc     18 4E 05 F1 | 	add	fp, #24
1a6d0     A7 18 02 FB | 	rdlong	arg04, fp
1a6d4     84 4E 05 F1 | 	add	fp, #132
1a6d8     A7 28 02 FB | 	rdlong	local06, fp
1a6dc     BC 4E 85 F1 | 	sub	fp, #188
1a6e0     14 25 02 F6 | 	mov	local04, local06
1a6e4     0A 16 06 F6 | 	mov	arg03, #10
1a6e8     12 1B 02 F6 | 	mov	arg05, local04
1a6ec     6C 3C B0 FD | 	call	#__system___uitoa
1a6f0     5C 4E 05 F1 | 	add	fp, #92
1a6f4     A7 FA 61 FC | 	wrlong	result1, fp
1a6f8     5C 4E 85 F1 | 	sub	fp, #92
1a6fc                 | LR__2340
1a6fc     24 4E 05 F1 | 	add	fp, #36
1a700     A7 1E 0A FB | 	rdlong	local01, fp wz
1a704     24 4E 85 F1 | 	sub	fp, #36
1a708     2C 00 90 AD |  if_e	jmp	#LR__2341
1a70c     50 4E 05 F1 | 	add	fp, #80
1a710     A7 00 68 FC | 	wrlong	#0, fp
1a714     04 4E 85 F1 | 	sub	fp, #4
1a718     A7 00 68 FC | 	wrlong	#0, fp
1a71c     6C 4E 05 F1 | 	add	fp, #108
1a720     A7 1E 02 FB | 	rdlong	local01, fp
1a724     01 1E 06 F1 | 	add	local01, #1
1a728     64 4E 85 F1 | 	sub	fp, #100
1a72c     A7 1E 62 FC | 	wrlong	local01, fp
1a730     54 4E 85 F1 | 	sub	fp, #84
1a734     88 00 90 FD | 	jmp	#LR__2344
1a738                 | LR__2341
1a738     20 4E 05 F1 | 	add	fp, #32
1a73c     A7 1E 02 FB | 	rdlong	local01, fp
1a740     20 4E 85 F1 | 	sub	fp, #32
1a744     00 1E 56 F2 | 	cmps	local01, #0 wc
1a748     40 00 90 3D |  if_ae	jmp	#LR__2342
1a74c     20 4E 05 F1 | 	add	fp, #32
1a750     A7 20 02 FB | 	rdlong	local02, fp
1a754     30 4E 05 F1 | 	add	fp, #48
1a758     A7 20 62 FC | 	wrlong	local02, fp
1a75c     04 4E 85 F1 | 	sub	fp, #4
1a760     A7 20 62 FC | 	wrlong	local02, fp
1a764     2C 4E 85 F1 | 	sub	fp, #44
1a768     A7 1E 02 FB | 	rdlong	local01, fp
1a76c     98 4E 05 F1 | 	add	fp, #152
1a770     A7 22 02 FB | 	rdlong	local03, fp
1a774     11 1F 02 F1 | 	add	local01, local03
1a778     01 1E 06 F1 | 	add	local01, #1
1a77c     64 4E 85 F1 | 	sub	fp, #100
1a780     A7 1E 62 FC | 	wrlong	local01, fp
1a784     54 4E 85 F1 | 	sub	fp, #84
1a788     34 00 90 FD | 	jmp	#LR__2343
1a78c                 | LR__2342
1a78c     4C 4E 05 F1 | 	add	fp, #76
1a790     A7 00 68 FC | 	wrlong	#0, fp
1a794     2C 4E 85 F1 | 	sub	fp, #44
1a798     A7 1E 02 FB | 	rdlong	local01, fp
1a79c     30 4E 05 F1 | 	add	fp, #48
1a7a0     A7 1E 62 FC | 	wrlong	local01, fp
1a7a4     68 4E 05 F1 | 	add	fp, #104
1a7a8     A7 22 02 FB | 	rdlong	local03, fp
1a7ac     11 1F 02 F1 | 	add	local01, local03
1a7b0     01 1E 06 F1 | 	add	local01, #1
1a7b4     64 4E 85 F1 | 	sub	fp, #100
1a7b8     A7 1E 62 FC | 	wrlong	local01, fp
1a7bc     54 4E 85 F1 | 	sub	fp, #84
1a7c0                 | LR__2343
1a7c0                 | LR__2344
1a7c0     54 4E 05 F1 | 	add	fp, #84
1a7c4     A7 1E 02 FB | 	rdlong	local01, fp
1a7c8     08 4E 85 F1 | 	sub	fp, #8
1a7cc     A7 22 02 FB | 	rdlong	local03, fp
1a7d0     11 1F 82 F1 | 	sub	local01, local03
1a7d4     01 1E 06 F1 | 	add	local01, #1
1a7d8     24 4E 85 F1 | 	sub	fp, #36
1a7dc     A7 1E 62 FC | 	wrlong	local01, fp
1a7e0     04 4E 05 F1 | 	add	fp, #4
1a7e4     A7 1E 0A FB | 	rdlong	local01, fp wz
1a7e8     2C 4E 85 F1 | 	sub	fp, #44
1a7ec     28 4E 05 51 |  if_ne	add	fp, #40
1a7f0     A7 22 02 5B |  if_ne	rdlong	local03, fp
1a7f4     01 22 06 51 |  if_ne	add	local03, #1
1a7f8     A7 22 62 5C |  if_ne	wrlong	local03, fp
1a7fc     28 4E 85 51 |  if_ne	sub	fp, #40
1a800     1C 4E 05 F1 | 	add	fp, #28
1a804     A7 1E 02 FB | 	rdlong	local01, fp
1a808     1C 4E 85 F1 | 	sub	fp, #28
1a80c     10 1E 0E F2 | 	cmp	local01, #16 wz
1a810     28 4E 05 A1 |  if_e	add	fp, #40
1a814     A7 1E 02 AB |  if_e	rdlong	local01, fp
1a818     02 1E 06 A1 |  if_e	add	local01, #2
1a81c     A7 1E 62 AC |  if_e	wrlong	local01, fp
1a820     28 4E 85 A1 |  if_e	sub	fp, #40
1a824     24 4E 05 F1 | 	add	fp, #36
1a828     A7 1E 0A FB | 	rdlong	local01, fp wz
1a82c     24 4E 85 F1 | 	sub	fp, #36
1a830     28 00 90 AD |  if_e	jmp	#LR__2345
1a834     28 4E 05 F1 | 	add	fp, #40
1a838     A7 1E 02 FB | 	rdlong	local01, fp
1a83c     02 22 06 F6 | 	mov	local03, #2
1a840     34 4E 05 F1 | 	add	fp, #52
1a844     A7 26 02 FB | 	rdlong	local05, fp
1a848     13 23 02 F1 | 	add	local03, local05
1a84c     11 1F 02 F1 | 	add	local01, local03
1a850     34 4E 85 F1 | 	sub	fp, #52
1a854     A7 1E 62 FC | 	wrlong	local01, fp
1a858     28 4E 85 F1 | 	sub	fp, #40
1a85c                 | LR__2345
1a85c     28 4E 05 F1 | 	add	fp, #40
1a860     A7 1E 02 FB | 	rdlong	local01, fp
1a864     28 4E 85 F1 | 	sub	fp, #40
1a868     41 1E 56 F2 | 	cmps	local01, #65 wc
1a86c     01 FA 65 36 |  if_ae	neg	result1, #1
1a870     08 05 90 3D |  if_ae	jmp	#LR__2373
1a874     3C 4E 05 F1 | 	add	fp, #60
1a878     A7 1E 0A FB | 	rdlong	local01, fp wz
1a87c     3C 4E 85 F1 | 	sub	fp, #60
1a880     60 00 90 AD |  if_e	jmp	#LR__2346
1a884     C0 4E 05 F1 | 	add	fp, #192
1a888     A7 12 02 FB | 	rdlong	arg01, fp
1a88c     94 4E 85 F1 | 	sub	fp, #148
1a890     A7 14 02 FB | 	rdlong	arg02, fp
1a894     14 4E 05 F1 | 	add	fp, #20
1a898     A7 16 02 FB | 	rdlong	arg03, fp
1a89c     40 4E 85 F1 | 	sub	fp, #64
1a8a0     20 3D B0 FD | 	call	#__system__emitsign_0383
1a8a4     18 4F 05 F1 | 	add	fp, #280
1a8a8     A7 FA 61 FC | 	wrlong	result1, fp
1a8ac     18 4F 85 F1 | 	sub	fp, #280
1a8b0     00 FA 55 F2 | 	cmps	result1, #0 wc
1a8b4     18 4F 05 C1 |  if_b	add	fp, #280
1a8b8     A7 FA 01 CB |  if_b	rdlong	result1, fp
1a8bc     18 4F 85 C1 |  if_b	sub	fp, #280
1a8c0     B8 04 90 CD |  if_b	jmp	#LR__2373
1a8c4     C0 4E 05 F1 | 	add	fp, #192
1a8c8     A7 1E 02 FB | 	rdlong	local01, fp
1a8cc     58 4E 05 F1 | 	add	fp, #88
1a8d0     A7 22 02 FB | 	rdlong	local03, fp
1a8d4     11 1F 02 F1 | 	add	local01, local03
1a8d8     58 4E 85 F1 | 	sub	fp, #88
1a8dc     A7 1E 62 FC | 	wrlong	local01, fp
1a8e0     C0 4E 85 F1 | 	sub	fp, #192
1a8e4                 | LR__2346
1a8e4     4C 4E 05 F1 | 	add	fp, #76
1a8e8     A7 1E 02 FB | 	rdlong	local01, fp
1a8ec     34 4E 85 F1 | 	sub	fp, #52
1a8f0     A7 1E 62 FC | 	wrlong	local01, fp
1a8f4     18 4E 85 F1 | 	sub	fp, #24
1a8f8     97 9E 48 FB | 	callpa	#(@LR__2352-@LR__2347)>>2,fcache_load_ptr_
1a8fc                 | LR__2347
1a8fc     18 4E 05 F1 | 	add	fp, #24
1a900     A7 20 02 FB | 	rdlong	local02, fp
1a904     3C 4E 05 F1 | 	add	fp, #60
1a908     A7 26 02 FB | 	rdlong	local05, fp
1a90c     54 4E 85 F1 | 	sub	fp, #84
1a910     13 21 52 F2 | 	cmps	local02, local05 wc
1a914     20 01 90 3D |  if_ae	jmp	#LR__2353
1a918     18 4E 05 F1 | 	add	fp, #24
1a91c     A7 28 02 FB | 	rdlong	local06, fp
1a920     18 4E 85 F1 | 	sub	fp, #24
1a924     00 28 56 F2 | 	cmps	local06, #0 wc
1a928     58 00 90 CD |  if_b	jmp	#LR__2348
1a92c     18 4E 05 F1 | 	add	fp, #24
1a930     A7 28 02 FB | 	rdlong	local06, fp
1a934     40 4E 05 F1 | 	add	fp, #64
1a938     A7 2A 02 FB | 	rdlong	local07, fp
1a93c     58 4E 85 F1 | 	sub	fp, #88
1a940     15 29 52 F2 | 	cmps	local06, local07 wc
1a944     3C 00 90 3D |  if_ae	jmp	#LR__2348
1a948     C0 4E 05 F1 | 	add	fp, #192
1a94c     A7 2C 02 FB | 	rdlong	local08, fp
1a950     16 2B 02 F6 | 	mov	local07, local08
1a954     01 2A 06 F1 | 	add	local07, #1
1a958     A7 2A 62 FC | 	wrlong	local07, fp
1a95c     A8 4E 85 F1 | 	sub	fp, #168
1a960     A7 2A 02 FB | 	rdlong	local07, fp
1a964     15 2F 02 F6 | 	mov	local09, local07
1a968     58 4E 05 F1 | 	add	fp, #88
1a96c     A7 30 02 F6 | 	mov	local10, fp
1a970     A7 2E 02 F1 | 	add	local09, fp
1a974     17 33 C2 FA | 	rdbyte	local11, local09
1a978     16 33 42 FC | 	wrbyte	local11, local08
1a97c     70 4E 85 F1 | 	sub	fp, #112
1a980     20 00 90 FD | 	jmp	#LR__2349
1a984                 | LR__2348
1a984     C0 4E 05 F1 | 	add	fp, #192
1a988     A7 2C 02 FB | 	rdlong	local08, fp
1a98c     16 2F 02 F6 | 	mov	local09, local08
1a990     01 2E 06 F1 | 	add	local09, #1
1a994     A7 2E 62 FC | 	wrlong	local09, fp
1a998     C0 4E 85 F1 | 	sub	fp, #192
1a99c     30 2E 06 F6 | 	mov	local09, #48
1a9a0     16 61 48 FC | 	wrbyte	#48, local08
1a9a4                 | LR__2349
1a9a4     18 4E 05 F1 | 	add	fp, #24
1a9a8     A7 28 02 FB | 	rdlong	local06, fp
1a9ac     38 4E 05 F1 | 	add	fp, #56
1a9b0     A7 34 02 FB | 	rdlong	local12, fp
1a9b4     50 4E 85 F1 | 	sub	fp, #80
1a9b8     1A 29 0A F2 | 	cmp	local06, local12 wz
1a9bc     5C 00 90 5D |  if_ne	jmp	#LR__2351
1a9c0     10 4F 05 F1 | 	add	fp, #272
1a9c4     A7 2A 02 FB | 	rdlong	local07, fp
1a9c8     10 4F 85 F1 | 	sub	fp, #272
1a9cc     15 2F 0A F6 | 	mov	local09, local07 wz
1a9d0     28 00 90 5D |  if_ne	jmp	#LR__2350
1a9d4     54 4E 05 F1 | 	add	fp, #84
1a9d8     A7 32 02 FB | 	rdlong	local11, fp
1a9dc     19 31 02 F6 | 	mov	local10, local11
1a9e0     01 30 86 F1 | 	sub	local10, #1
1a9e4     3C 4E 85 F1 | 	sub	fp, #60
1a9e8     A7 36 02 FB | 	rdlong	local13, fp
1a9ec     18 4E 85 F1 | 	sub	fp, #24
1a9f0     1B 39 02 F6 | 	mov	local14, local13
1a9f4     18 39 52 F2 | 	cmps	local14, local10 wc
1a9f8     20 00 90 3D |  if_ae	jmp	#LR__2351
1a9fc                 | LR__2350
1a9fc     C0 4E 05 F1 | 	add	fp, #192
1aa00     A7 2C 02 FB | 	rdlong	local08, fp
1aa04     16 35 02 F6 | 	mov	local12, local08
1aa08     01 34 06 F1 | 	add	local12, #1
1aa0c     A7 34 62 FC | 	wrlong	local12, fp
1aa10     C0 4E 85 F1 | 	sub	fp, #192
1aa14     2E 2E 06 F6 | 	mov	local09, #46
1aa18     16 5D 48 FC | 	wrbyte	#46, local08
1aa1c                 | LR__2351
1aa1c     18 4E 05 F1 | 	add	fp, #24
1aa20     A7 3A 02 FB | 	rdlong	local15, fp
1aa24     1D 35 02 F6 | 	mov	local12, local15
1aa28     01 34 06 F1 | 	add	local12, #1
1aa2c     A7 34 62 FC | 	wrlong	local12, fp
1aa30     18 4E 85 F1 | 	sub	fp, #24
1aa34     C4 FE 9F FD | 	jmp	#LR__2347
1aa38                 | LR__2352
1aa38                 | LR__2353
1aa38     34 4E 05 F1 | 	add	fp, #52
1aa3c     A7 1E 0A FB | 	rdlong	local01, fp wz
1aa40     34 4E 85 F1 | 	sub	fp, #52
1aa44     A0 00 90 AD |  if_e	jmp	#LR__2357
1aa48     C0 4E 05 F1 | 	add	fp, #192
1aa4c     A7 1E 02 FB | 	rdlong	local01, fp
1aa50     01 1E 86 F1 | 	sub	local01, #1
1aa54     A7 1E 62 FC | 	wrlong	local01, fp
1aa58     C0 4E 85 F1 | 	sub	fp, #192
1aa5c     97 26 48 FB | 	callpa	#(@LR__2355-@LR__2354)>>2,fcache_load_ptr_
1aa60                 | LR__2354
1aa60     C0 4E 05 F1 | 	add	fp, #192
1aa64     A7 1E 02 FB | 	rdlong	local01, fp
1aa68     04 4E 05 F1 | 	add	fp, #4
1aa6c     A7 22 02 FB | 	rdlong	local03, fp
1aa70     C4 4E 85 F1 | 	sub	fp, #196
1aa74     11 1F 5A F2 | 	cmps	local01, local03 wcz
1aa78     30 00 90 ED |  if_be	jmp	#LR__2356
1aa7c     C0 4E 05 F1 | 	add	fp, #192
1aa80     A7 28 02 FB | 	rdlong	local06, fp
1aa84     C0 4E 85 F1 | 	sub	fp, #192
1aa88     14 25 C2 FA | 	rdbyte	local04, local06
1aa8c     30 24 0E F2 | 	cmp	local04, #48 wz
1aa90     18 00 90 5D |  if_ne	jmp	#LR__2356
1aa94     C0 4E 05 F1 | 	add	fp, #192
1aa98     A7 1E 02 FB | 	rdlong	local01, fp
1aa9c     01 1E 86 F1 | 	sub	local01, #1
1aaa0     A7 1E 62 FC | 	wrlong	local01, fp
1aaa4     C0 4E 85 F1 | 	sub	fp, #192
1aaa8     B4 FF 9F FD | 	jmp	#LR__2354
1aaac                 | LR__2355
1aaac                 | LR__2356
1aaac     C0 4E 05 F1 | 	add	fp, #192
1aab0     A7 20 02 FB | 	rdlong	local02, fp
1aab4     C0 4E 85 F1 | 	sub	fp, #192
1aab8     10 1F C2 FA | 	rdbyte	local01, local02
1aabc     2E 1E 0E F2 | 	cmp	local01, #46 wz
1aac0     C0 4E 05 A1 |  if_e	add	fp, #192
1aac4     A7 1E 02 AB |  if_e	rdlong	local01, fp
1aac8     01 1E 86 A1 |  if_e	sub	local01, #1
1aacc     A7 1E 62 AC |  if_e	wrlong	local01, fp
1aad0     C0 4E 85 A1 |  if_e	sub	fp, #192
1aad4     C0 4E 05 F1 | 	add	fp, #192
1aad8     A7 22 02 FB | 	rdlong	local03, fp
1aadc     01 22 06 F1 | 	add	local03, #1
1aae0     A7 22 62 FC | 	wrlong	local03, fp
1aae4     C0 4E 85 F1 | 	sub	fp, #192
1aae8                 | LR__2357
1aae8     24 4E 05 F1 | 	add	fp, #36
1aaec     A7 1E 0A FB | 	rdlong	local01, fp wz
1aaf0     24 4E 85 F1 | 	sub	fp, #36
1aaf4     B4 00 90 AD |  if_e	jmp	#LR__2360
1aaf8     C0 4E 05 F1 | 	add	fp, #192
1aafc     A7 20 02 FB | 	rdlong	local02, fp
1ab00     10 23 02 F6 | 	mov	local03, local02
1ab04     01 22 06 F1 | 	add	local03, #1
1ab08     A7 22 62 FC | 	wrlong	local03, fp
1ab0c     90 4E 85 F1 | 	sub	fp, #144
1ab10     A7 24 02 FB | 	rdlong	local04, fp
1ab14     10 25 42 FC | 	wrbyte	local04, local02
1ab18     90 4E 05 F1 | 	add	fp, #144
1ab1c     A7 20 02 FB | 	rdlong	local02, fp
1ab20     10 23 02 F6 | 	mov	local03, local02
1ab24     01 22 06 F1 | 	add	local03, #1
1ab28     A7 22 62 FC | 	wrlong	local03, fp
1ab2c     60 4E 85 F1 | 	sub	fp, #96
1ab30     A7 24 02 FB | 	rdlong	local04, fp
1ab34     10 25 42 FC | 	wrbyte	local04, local02
1ab38     48 4E 85 F1 | 	sub	fp, #72
1ab3c     A7 00 68 FC | 	wrlong	#0, fp
1ab40     18 4E 85 F1 | 	sub	fp, #24
1ab44                 | LR__2358
1ab44     18 4E 05 F1 | 	add	fp, #24
1ab48     A7 20 02 FB | 	rdlong	local02, fp
1ab4c     44 4E 05 F1 | 	add	fp, #68
1ab50     A7 26 02 FB | 	rdlong	local05, fp
1ab54     5C 4E 85 F1 | 	sub	fp, #92
1ab58     13 21 52 F2 | 	cmps	local02, local05 wc
1ab5c     4C 00 90 3D |  if_ae	jmp	#LR__2359
1ab60     C0 4E 05 F1 | 	add	fp, #192
1ab64     A7 2C 02 FB | 	rdlong	local08, fp
1ab68     16 35 02 F6 | 	mov	local12, local08
1ab6c     01 34 06 F1 | 	add	local12, #1
1ab70     A7 34 62 FC | 	wrlong	local12, fp
1ab74     A8 4E 85 F1 | 	sub	fp, #168
1ab78     A7 2A 02 FB | 	rdlong	local07, fp
1ab7c     15 2F 02 F6 | 	mov	local09, local07
1ab80     98 4E 05 F1 | 	add	fp, #152
1ab84     A7 30 02 F6 | 	mov	local10, fp
1ab88     A7 2E 02 F1 | 	add	local09, fp
1ab8c     17 33 C2 FA | 	rdbyte	local11, local09
1ab90     16 33 42 FC | 	wrbyte	local11, local08
1ab94     98 4E 85 F1 | 	sub	fp, #152
1ab98     A7 34 02 FB | 	rdlong	local12, fp
1ab9c     01 34 06 F1 | 	add	local12, #1
1aba0     A7 34 62 FC | 	wrlong	local12, fp
1aba4     18 4E 85 F1 | 	sub	fp, #24
1aba8     98 FF 9F FD | 	jmp	#LR__2358
1abac                 | LR__2359
1abac                 | LR__2360
1abac     C0 4E 05 F1 | 	add	fp, #192
1abb0     A7 1E 02 FB | 	rdlong	local01, fp
1abb4     C0 4E 85 F1 | 	sub	fp, #192
1abb8     0F 01 48 FC | 	wrbyte	#0, local01
1abbc                 | LR__2361
1abbc     6C 4E 05 F1 | 	add	fp, #108
1abc0     A7 1E 0A FB | 	rdlong	local01, fp wz
1abc4     6C 4E 85 F1 | 	sub	fp, #108
1abc8     90 01 90 AD |  if_e	jmp	#LR__2372
1abcc     48 4E 05 F1 | 	add	fp, #72
1abd0     A7 22 0A FB | 	rdlong	local03, fp wz
1abd4     48 4E 85 F1 | 	sub	fp, #72
1abd8     80 01 90 AD |  if_e	jmp	#LR__2372
1abdc     C4 4E 05 F1 | 	add	fp, #196
1abe0     A7 12 02 FB | 	rdlong	arg01, fp
1abe4     C4 4E 85 F1 | 	sub	fp, #196
1abe8     09 3D 02 F6 | 	mov	local16, arg01
1abec     97 06 48 FB | 	callpa	#(@LR__2363-@LR__2362)>>2,fcache_load_ptr_
1abf0                 | LR__2362
1abf0     1E FB C9 FA | 	rdbyte	result1, local16 wz
1abf4     01 3C 06 51 |  if_ne	add	local16, #1
1abf8     F4 FF 9F 5D |  if_ne	jmp	#LR__2362
1abfc                 | LR__2363
1abfc     09 3D 82 F1 | 	sub	local16, arg01
1ac00     1E 25 02 F6 | 	mov	local04, local16
1ac04     6C 4E 05 F1 | 	add	fp, #108
1ac08     A7 28 02 FB | 	rdlong	local06, fp
1ac0c     6C 4E 85 F1 | 	sub	fp, #108
1ac10     14 25 5A F2 | 	cmps	local04, local06 wcz
1ac14     44 01 90 ED |  if_be	jmp	#LR__2372
1ac18     C4 4E 05 F1 | 	add	fp, #196
1ac1c     A7 1E 02 FB | 	rdlong	local01, fp
1ac20     5C 4E 05 F1 | 	add	fp, #92
1ac24     A7 1E 62 FC | 	wrlong	local01, fp
1ac28     FC 4E 85 F1 | 	sub	fp, #252
1ac2c     A7 1E 0A FB | 	rdlong	local01, fp wz
1ac30     24 4E 85 F1 | 	sub	fp, #36
1ac34     20 00 90 AD |  if_e	jmp	#LR__2364
1ac38     B8 4E 05 F1 | 	add	fp, #184
1ac3c     A7 00 68 FC | 	wrlong	#0, fp
1ac40     4C 4E 85 F1 | 	sub	fp, #76
1ac44     A7 1E 02 FB | 	rdlong	local01, fp
1ac48     B0 4E 05 F1 | 	add	fp, #176
1ac4c     A7 1E 62 FC | 	wrlong	local01, fp
1ac50     1C 4F 85 F1 | 	sub	fp, #284
1ac54     24 00 90 FD | 	jmp	#LR__2365
1ac58                 | LR__2364
1ac58     6C 4E 05 F1 | 	add	fp, #108
1ac5c     A7 1E 02 FB | 	rdlong	local01, fp
1ac60     01 1E 86 F1 | 	sub	local01, #1
1ac64     4C 4E 05 F1 | 	add	fp, #76
1ac68     A7 22 02 FB | 	rdlong	local03, fp
1ac6c     11 1F 82 F1 | 	sub	local01, local03
1ac70     64 4E 05 F1 | 	add	fp, #100
1ac74     A7 1E 62 FC | 	wrlong	local01, fp
1ac78     1C 4F 85 F1 | 	sub	fp, #284
1ac7c                 | LR__2365
1ac7c     97 20 48 FB | 	callpa	#(@LR__2367-@LR__2366)>>2,fcache_load_ptr_
1ac80                 | LR__2366
1ac80     1C 4F 05 F1 | 	add	fp, #284
1ac84     A7 1E 0A FB | 	rdlong	local01, fp wz
1ac88     1C 4F 85 F1 | 	sub	fp, #284
1ac8c     30 00 90 AD |  if_e	jmp	#LR__2368
1ac90     20 4F 05 F1 | 	add	fp, #288
1ac94     A7 20 02 FB | 	rdlong	local02, fp
1ac98     10 23 02 F6 | 	mov	local03, local02
1ac9c     01 22 06 F1 | 	add	local03, #1
1aca0     A7 22 62 FC | 	wrlong	local03, fp
1aca4     10 55 48 FC | 	wrbyte	#42, local02
1aca8     04 4E 85 F1 | 	sub	fp, #4
1acac     A7 1E 02 FB | 	rdlong	local01, fp
1acb0     01 1E 86 F1 | 	sub	local01, #1
1acb4     A7 1E 62 FC | 	wrlong	local01, fp
1acb8     1C 4F 85 F1 | 	sub	fp, #284
1acbc     C0 FF 9F FD | 	jmp	#LR__2366
1acc0                 | LR__2367
1acc0                 | LR__2368
1acc0     B8 4E 05 F1 | 	add	fp, #184
1acc4     A7 1E 0A FB | 	rdlong	local01, fp wz
1acc8     B8 4E 85 F1 | 	sub	fp, #184
1accc     70 00 90 AD |  if_e	jmp	#LR__2371
1acd0     20 4F 05 F1 | 	add	fp, #288
1acd4     A7 20 02 FB | 	rdlong	local02, fp
1acd8     10 23 02 F6 | 	mov	local03, local02
1acdc     01 22 06 F1 | 	add	local03, #1
1ace0     A7 22 62 FC | 	wrlong	local03, fp
1ace4     10 5D 48 FC | 	wrbyte	#46, local02
1ace8     04 4E 85 F1 | 	sub	fp, #4
1acec     A7 00 68 FC | 	wrlong	#0, fp
1acf0     1C 4F 85 F1 | 	sub	fp, #284
1acf4                 | LR__2369
1acf4     1C 4F 05 F1 | 	add	fp, #284
1acf8     A7 20 02 FB | 	rdlong	local02, fp
1acfc     64 4E 85 F1 | 	sub	fp, #100
1ad00     A7 26 02 FB | 	rdlong	local05, fp
1ad04     B8 4E 85 F1 | 	sub	fp, #184
1ad08     13 21 52 F2 | 	cmps	local02, local05 wc
1ad0c     30 00 90 3D |  if_ae	jmp	#LR__2370
1ad10     20 4F 05 F1 | 	add	fp, #288
1ad14     A7 2C 02 FB | 	rdlong	local08, fp
1ad18     16 35 02 F6 | 	mov	local12, local08
1ad1c     01 34 06 F1 | 	add	local12, #1
1ad20     A7 34 62 FC | 	wrlong	local12, fp
1ad24     16 55 48 FC | 	wrbyte	#42, local08
1ad28     04 4E 85 F1 | 	sub	fp, #4
1ad2c     A7 34 02 FB | 	rdlong	local12, fp
1ad30     01 34 06 F1 | 	add	local12, #1
1ad34     A7 34 62 FC | 	wrlong	local12, fp
1ad38     1C 4F 85 F1 | 	sub	fp, #284
1ad3c     B4 FF 9F FD | 	jmp	#LR__2369
1ad40                 | LR__2370
1ad40                 | LR__2371
1ad40     20 4F 05 F1 | 	add	fp, #288
1ad44     A7 20 02 FB | 	rdlong	local02, fp
1ad48     10 23 02 F6 | 	mov	local03, local02
1ad4c     01 22 06 F1 | 	add	local03, #1
1ad50     A7 22 62 FC | 	wrlong	local03, fp
1ad54     20 4F 85 F1 | 	sub	fp, #288
1ad58     10 01 48 FC | 	wrbyte	#0, local02
1ad5c                 | LR__2372
1ad5c     04 4E 05 F1 | 	add	fp, #4
1ad60     A7 12 02 FB | 	rdlong	arg01, fp
1ad64     04 4E 05 F1 | 	add	fp, #4
1ad68     A7 14 02 FB | 	rdlong	arg02, fp
1ad6c     BC 4E 05 F1 | 	add	fp, #188
1ad70     A7 16 02 FB | 	rdlong	arg03, fp
1ad74     C4 4E 85 F1 | 	sub	fp, #196
1ad78     C4 EE BF FD | 	call	#__system___fmtstr
1ad7c                 | LR__2373
1ad7c     A7 F0 03 F6 | 	mov	ptra, fp
1ad80     B2 00 A0 FD | 	call	#popregs_
1ad84                 | __system___fmtfloat_ret
1ad84     2D 00 64 FD | 	ret
1ad88                 | 
1ad88                 | __system__Left_S
1ad88     04 4A 05 F6 | 	mov	COUNT_, #4
1ad8c     A8 00 A0 FD | 	call	#pushregs_
1ad90     09 1F 02 F6 | 	mov	local01, arg01
1ad94     0A 21 02 F6 | 	mov	local02, arg02
1ad98     01 20 56 F2 | 	cmps	local02, #1 wc
1ad9c     41 01 00 CF 
1ada0     8E FA 05 C6 |  if_b	mov	result1, ##@LR__4253
1ada4     5C 00 90 CD |  if_b	jmp	#LR__2383
1ada8     0F 13 02 F6 | 	mov	arg01, local01
1adac     09 23 02 F6 | 	mov	local03, arg01
1adb0     97 06 48 FB | 	callpa	#(@LR__2381-@LR__2380)>>2,fcache_load_ptr_
1adb4                 | LR__2380
1adb4     11 FB C9 FA | 	rdbyte	result1, local03 wz
1adb8     01 22 06 51 |  if_ne	add	local03, #1
1adbc     F4 FF 9F 5D |  if_ne	jmp	#LR__2380
1adc0                 | LR__2381
1adc0     09 23 82 F1 | 	sub	local03, arg01
1adc4     11 FB 01 F6 | 	mov	result1, local03
1adc8     10 FB 59 F2 | 	cmps	result1, local02 wcz
1adcc     0F FB 01 E6 |  if_be	mov	result1, local01
1add0     30 00 90 ED |  if_be	jmp	#LR__2383
1add4     10 13 02 F6 | 	mov	arg01, local02
1add8     02 12 06 F1 | 	add	arg01, #2
1addc     50 1D B0 FD | 	call	#__system___gc_alloc_managed
1ade0     FD 24 0A F6 | 	mov	local04, result1 wz
1ade4     18 00 90 AD |  if_e	jmp	#LR__2382
1ade8     12 13 02 F6 | 	mov	arg01, local04
1adec     0F 15 02 F6 | 	mov	arg02, local01
1adf0     10 17 02 F6 | 	mov	arg03, local02
1adf4     A0 DE BF FD | 	call	#__system____builtin_memmove
1adf8     12 21 02 F1 | 	add	local02, local04
1adfc     10 01 48 FC | 	wrbyte	#0, local02
1ae00                 | LR__2382
1ae00     12 FB 01 F6 | 	mov	result1, local04
1ae04                 | LR__2383
1ae04     A7 F0 03 F6 | 	mov	ptra, fp
1ae08     B2 00 A0 FD | 	call	#popregs_
1ae0c                 | __system__Left_S_ret
1ae0c     2D 00 64 FD | 	ret
1ae10                 | 
1ae10                 | __system__Right_S
1ae10     05 4A 05 F6 | 	mov	COUNT_, #5
1ae14     A8 00 A0 FD | 	call	#pushregs_
1ae18     09 1F 02 F6 | 	mov	local01, arg01
1ae1c     0A 21 02 F6 | 	mov	local02, arg02
1ae20     01 20 56 F2 | 	cmps	local02, #1 wc
1ae24     41 01 00 CF 
1ae28     8F FA 05 C6 |  if_b	mov	result1, ##@LR__4254
1ae2c     64 00 90 CD |  if_b	jmp	#LR__2393
1ae30     0F 13 02 F6 | 	mov	arg01, local01
1ae34     09 23 02 F6 | 	mov	local03, arg01
1ae38     97 06 48 FB | 	callpa	#(@LR__2391-@LR__2390)>>2,fcache_load_ptr_
1ae3c                 | LR__2390
1ae3c     11 FB C9 FA | 	rdbyte	result1, local03 wz
1ae40     01 22 06 51 |  if_ne	add	local03, #1
1ae44     F4 FF 9F 5D |  if_ne	jmp	#LR__2390
1ae48                 | LR__2391
1ae48     09 23 82 F1 | 	sub	local03, arg01
1ae4c     11 FB 01 F6 | 	mov	result1, local03
1ae50     FD 24 02 F6 | 	mov	local04, result1
1ae54     10 25 5A F2 | 	cmps	local04, local02 wcz
1ae58     0F FB 01 E6 |  if_be	mov	result1, local01
1ae5c     34 00 90 ED |  if_be	jmp	#LR__2393
1ae60     10 13 02 F6 | 	mov	arg01, local02
1ae64     02 12 06 F1 | 	add	arg01, #2
1ae68     C4 1C B0 FD | 	call	#__system___gc_alloc_managed
1ae6c     FD 26 0A F6 | 	mov	local05, result1 wz
1ae70     1C 00 90 AD |  if_e	jmp	#LR__2392
1ae74     10 25 82 F1 | 	sub	local04, local02
1ae78     0F 25 02 F1 | 	add	local04, local01
1ae7c     01 20 06 F1 | 	add	local02, #1
1ae80     13 13 02 F6 | 	mov	arg01, local05
1ae84     12 15 02 F6 | 	mov	arg02, local04
1ae88     10 17 02 F6 | 	mov	arg03, local02
1ae8c     08 DE BF FD | 	call	#__system____builtin_memmove
1ae90                 | LR__2392
1ae90     13 FB 01 F6 | 	mov	result1, local05
1ae94                 | LR__2393
1ae94     A7 F0 03 F6 | 	mov	ptra, fp
1ae98     B2 00 A0 FD | 	call	#popregs_
1ae9c                 | __system__Right_S_ret
1ae9c     2D 00 64 FD | 	ret
1aea0                 | 
1aea0                 | __system__Mid_S
1aea0     05 4A 05 F6 | 	mov	COUNT_, #5
1aea4     A8 00 A0 FD | 	call	#pushregs_
1aea8     09 1F 02 F6 | 	mov	local01, arg01
1aeac     0A 21 02 F6 | 	mov	local02, arg02
1aeb0     01 16 56 F2 | 	cmps	arg03, #1 wc
1aeb4     41 01 00 CF 
1aeb8     90 FA 05 C6 |  if_b	mov	result1, ##@LR__4255
1aebc     80 00 90 CD |  if_b	jmp	#LR__2403
1aec0     01 20 86 F1 | 	sub	local02, #1
1aec4     00 20 56 F3 | 	fges	local02, #0 wc
1aec8     0F 13 02 F6 | 	mov	arg01, local01
1aecc     09 23 02 F6 | 	mov	local03, arg01
1aed0     97 06 48 FB | 	callpa	#(@LR__2401-@LR__2400)>>2,fcache_load_ptr_
1aed4                 | LR__2400
1aed4     11 FB C9 FA | 	rdbyte	result1, local03 wz
1aed8     01 22 06 51 |  if_ne	add	local03, #1
1aedc     F4 FF 9F 5D |  if_ne	jmp	#LR__2400
1aee0                 | LR__2401
1aee0     09 23 82 F1 | 	sub	local03, arg01
1aee4     11 FB 01 F6 | 	mov	result1, local03
1aee8     FD 14 02 F6 | 	mov	arg02, result1
1aeec     10 15 52 F2 | 	cmps	arg02, local02 wc
1aef0     41 01 00 CF 
1aef4     91 FA 05 C6 |  if_b	mov	result1, ##@LR__4256
1aef8     44 00 90 CD |  if_b	jmp	#LR__2403
1aefc     0A 25 02 F6 | 	mov	local04, arg02
1af00     10 25 82 F1 | 	sub	local04, local02
1af04     0B 25 5A F2 | 	cmps	local04, arg03 wcz
1af08     0B 25 02 16 |  if_a	mov	local04, arg03
1af0c     12 13 02 F6 | 	mov	arg01, local04
1af10     02 12 06 F1 | 	add	arg01, #2
1af14     18 1C B0 FD | 	call	#__system___gc_alloc_managed
1af18     FD 26 0A F6 | 	mov	local05, result1 wz
1af1c     1C 00 90 AD |  if_e	jmp	#LR__2402
1af20     0F 21 02 F1 | 	add	local02, local01
1af24     13 13 02 F6 | 	mov	arg01, local05
1af28     10 15 02 F6 | 	mov	arg02, local02
1af2c     12 17 02 F6 | 	mov	arg03, local04
1af30     64 DD BF FD | 	call	#__system____builtin_memmove
1af34     13 25 02 F1 | 	add	local04, local05
1af38     12 01 48 FC | 	wrbyte	#0, local04
1af3c                 | LR__2402
1af3c     13 FB 01 F6 | 	mov	result1, local05
1af40                 | LR__2403
1af40     A7 F0 03 F6 | 	mov	ptra, fp
1af44     B2 00 A0 FD | 	call	#popregs_
1af48                 | __system__Mid_S_ret
1af48     2D 00 64 FD | 	ret
1af4c                 | 
1af4c                 | __system__Chr_S
1af4c     01 4A 05 F6 | 	mov	COUNT_, #1
1af50     A8 00 A0 FD | 	call	#pushregs_
1af54     09 1F 02 F6 | 	mov	local01, arg01
1af58     03 12 06 F6 | 	mov	arg01, #3
1af5c     D0 1B B0 FD | 	call	#__system___gc_alloc_managed
1af60     00 FA 4D F2 | 	cmps	result1, #0 wz
1af64     FD 1E 42 5C |  if_ne	wrbyte	local01, result1
1af68     01 FA 05 51 |  if_ne	add	result1, #1
1af6c     FD 00 48 5C |  if_ne	wrbyte	#0, result1
1af70     01 FA 85 51 |  if_ne	sub	result1, #1
1af74     A7 F0 03 F6 | 	mov	ptra, fp
1af78     B2 00 A0 FD | 	call	#popregs_
1af7c                 | __system__Chr_S_ret
1af7c     2D 00 64 FD | 	ret
1af80                 | 
1af80                 | __system__Number_S
1af80     08 4A 05 F6 | 	mov	COUNT_, #8
1af84     A8 00 A0 FD | 	call	#pushregs_
1af88     09 1F 02 F6 | 	mov	local01, arg01
1af8c     0A 21 0A F6 | 	mov	local02, arg02 wz
1af90     0B 23 02 F6 | 	mov	local03, arg03
1af94     3C 00 90 5D |  if_ne	jmp	#LR__2412
1af98     01 20 06 F6 | 	mov	local02, #1
1af9c     11 25 02 F6 | 	mov	local04, local03
1afa0     01 26 06 F6 | 	mov	local05, #1
1afa4     97 16 48 FB | 	callpa	#(@LR__2411-@LR__2410)>>2,fcache_load_ptr_
1afa8                 | LR__2410
1afa8     00 28 06 F6 | 	mov	local06, #0
1afac     0F 25 1A F2 | 	cmp	local04, local01 wcz
1afb0     01 28 66 E6 |  if_be	neg	local06, #1
1afb4     12 27 12 F2 | 	cmp	local05, local04 wc
1afb8     15 2B A2 F1 | 	subx	local07, local07
1afbc     15 29 CA F7 | 	test	local06, local07 wz
1afc0     11 25 02 5D |  if_ne	qmul	local04, local03
1afc4     12 27 02 56 |  if_ne	mov	local05, local04
1afc8     01 20 06 51 |  if_ne	add	local02, #1
1afcc     18 24 62 5D |  if_ne	getqx	local04
1afd0     D4 FF 9F 5D |  if_ne	jmp	#LR__2410
1afd4                 | LR__2411
1afd4                 | LR__2412
1afd4     20 20 36 F3 | 	fle	local02, #32 wc
1afd8     10 13 02 F6 | 	mov	arg01, local02
1afdc     02 12 06 F1 | 	add	arg01, #2
1afe0     4C 1B B0 FD | 	call	#__system___gc_alloc_managed
1afe4     FD 28 02 F6 | 	mov	local06, result1
1afe8     10 2B 02 F6 | 	mov	local07, local02
1afec     14 2B 02 F1 | 	add	local07, local06
1aff0     15 01 48 FC | 	wrbyte	#0, local07
1aff4     97 1A 48 FB | 	callpa	#(@LR__2414-@LR__2413)>>2,fcache_load_ptr_
1aff8                 | LR__2413
1aff8     01 20 16 F2 | 	cmp	local02, #1 wc
1affc     2C 00 90 CD |  if_b	jmp	#LR__2415
1b000     11 1F 12 FD | 	qdiv	local01, local03
1b004     01 20 86 F1 | 	sub	local02, #1
1b008     10 2B 02 F6 | 	mov	local07, local02
1b00c     14 2B 02 F1 | 	add	local07, local06
1b010     19 2C 62 FD | 	getqy	local08
1b014     0A 2C 16 F2 | 	cmp	local08, #10 wc
1b018     30 2C 06 C1 |  if_b	add	local08, #48
1b01c     37 2C 06 31 |  if_ae	add	local08, #55
1b020     15 2D 42 FC | 	wrbyte	local08, local07
1b024     18 1E 62 FD | 	getqx	local01
1b028     CC FF 9F FD | 	jmp	#LR__2413
1b02c                 | LR__2414
1b02c                 | LR__2415
1b02c     14 FB 01 F6 | 	mov	result1, local06
1b030     A7 F0 03 F6 | 	mov	ptra, fp
1b034     B2 00 A0 FD | 	call	#popregs_
1b038                 | __system__Number_S_ret
1b038     2D 00 64 FD | 	ret
1b03c                 | 
1b03c                 | __system__LCase_S
1b03c     07 4A 05 F6 | 	mov	COUNT_, #7
1b040     A8 00 A0 FD | 	call	#pushregs_
1b044     09 1F 02 F6 | 	mov	local01, arg01
1b048     09 21 02 F6 | 	mov	local02, arg01
1b04c     97 06 48 FB | 	callpa	#(@LR__2421-@LR__2420)>>2,fcache_load_ptr_
1b050                 | LR__2420
1b050     10 FB C9 FA | 	rdbyte	result1, local02 wz
1b054     01 20 06 51 |  if_ne	add	local02, #1
1b058     F4 FF 9F 5D |  if_ne	jmp	#LR__2420
1b05c                 | LR__2421
1b05c     09 21 82 F1 | 	sub	local02, arg01
1b060     10 FB 01 F6 | 	mov	result1, local02
1b064     FD 20 0A F6 | 	mov	local02, result1 wz
1b068     41 01 00 AF 
1b06c     92 FA 05 A6 |  if_e	mov	result1, ##@LR__4257
1b070     7C 00 90 AD |  if_e	jmp	#LR__2427
1b074     10 13 02 F6 | 	mov	arg01, local02
1b078     02 12 06 F1 | 	add	arg01, #2
1b07c     B0 1A B0 FD | 	call	#__system___gc_alloc_managed
1b080     FD 22 0A F6 | 	mov	local03, result1 wz
1b084     64 00 90 AD |  if_e	jmp	#LR__2426
1b088     01 24 66 F6 | 	neg	local04, #1
1b08c     97 26 48 FB | 	callpa	#(@LR__2425-@LR__2422)>>2,fcache_load_ptr_
1b090                 | LR__2422
1b090     01 24 06 F1 | 	add	local04, #1
1b094     12 27 02 F6 | 	mov	local05, local04
1b098     0F 27 02 F1 | 	add	local05, local01
1b09c     13 29 C2 FA | 	rdbyte	local06, local05
1b0a0     41 28 56 F2 | 	cmps	local06, #65 wc
1b0a4     18 00 90 CD |  if_b	jmp	#LR__2423
1b0a8     5B 28 56 F2 | 	cmps	local06, #91 wc
1b0ac     12 2B 02 C6 |  if_b	mov	local07, local04
1b0b0     11 2B 02 C1 |  if_b	add	local07, local03
1b0b4     20 28 06 C1 |  if_b	add	local06, #32
1b0b8     15 29 42 CC |  if_b	wrbyte	local06, local07
1b0bc     0C 00 90 CD |  if_b	jmp	#LR__2424
1b0c0                 | LR__2423
1b0c0     12 2B 02 F6 | 	mov	local07, local04
1b0c4     11 2B 02 F1 | 	add	local07, local03
1b0c8     15 29 42 FC | 	wrbyte	local06, local07
1b0cc                 | LR__2424
1b0cc     10 29 02 F6 | 	mov	local06, local02
1b0d0     01 28 86 F1 | 	sub	local06, #1
1b0d4     14 25 0A F2 | 	cmp	local04, local06 wz
1b0d8     B4 FF 9F 5D |  if_ne	jmp	#LR__2422
1b0dc                 | LR__2425
1b0dc     11 21 02 F1 | 	add	local02, local03
1b0e0     10 01 48 FC | 	wrbyte	#0, local02
1b0e4     11 FB 01 F6 | 	mov	result1, local03
1b0e8     04 00 90 FD | 	jmp	#LR__2427
1b0ec                 | LR__2426
1b0ec     11 FB 01 F6 | 	mov	result1, local03
1b0f0                 | LR__2427
1b0f0     A7 F0 03 F6 | 	mov	ptra, fp
1b0f4     B2 00 A0 FD | 	call	#popregs_
1b0f8                 | __system__LCase_S_ret
1b0f8     2D 00 64 FD | 	ret
1b0fc                 | 
1b0fc                 | __system__LTrim_S
1b0fc     05 4A 05 F6 | 	mov	COUNT_, #5
1b100     A8 00 A0 FD | 	call	#pushregs_
1b104     09 1F 02 F6 | 	mov	local01, arg01
1b108     09 21 02 F6 | 	mov	local02, arg01
1b10c     97 06 48 FB | 	callpa	#(@LR__2431-@LR__2430)>>2,fcache_load_ptr_
1b110                 | LR__2430
1b110     10 FB C9 FA | 	rdbyte	result1, local02 wz
1b114     01 20 06 51 |  if_ne	add	local02, #1
1b118     F4 FF 9F 5D |  if_ne	jmp	#LR__2430
1b11c                 | LR__2431
1b11c     09 21 82 F1 | 	sub	local02, arg01
1b120     10 FB 01 F6 | 	mov	result1, local02
1b124     FD 20 0A F6 | 	mov	local02, result1 wz
1b128     41 01 00 AF 
1b12c     93 FA 05 A6 |  if_e	mov	result1, ##@LR__4258
1b130     7C 00 90 AD |  if_e	jmp	#LR__2436
1b134     00 22 06 F6 | 	mov	local03, #0
1b138     10 25 02 F6 | 	mov	local04, local02
1b13c                 | LR__2432
1b13c     12 23 52 F2 | 	cmps	local03, local04 wc
1b140     68 00 90 3D |  if_ae	jmp	#LR__2435
1b144     11 17 02 F6 | 	mov	arg03, local03
1b148     0F 17 02 F1 | 	add	arg03, local01
1b14c     0B 17 C2 FA | 	rdbyte	arg03, arg03
1b150     20 16 0E F2 | 	cmp	arg03, #32 wz
1b154     4C 00 90 AD |  if_e	jmp	#LR__2434
1b158     10 13 02 F6 | 	mov	arg01, local02
1b15c     11 13 82 F1 | 	sub	arg01, local03
1b160     02 12 06 F1 | 	add	arg01, #2
1b164     C8 19 B0 FD | 	call	#__system___gc_alloc_managed
1b168     FD 26 0A F6 | 	mov	local05, result1 wz
1b16c     2C 00 90 AD |  if_e	jmp	#LR__2433
1b170     11 15 02 F6 | 	mov	arg02, local03
1b174     0F 15 02 F1 | 	add	arg02, local01
1b178     10 17 02 F6 | 	mov	arg03, local02
1b17c     11 17 82 F1 | 	sub	arg03, local03
1b180     13 13 02 F6 | 	mov	arg01, local05
1b184     10 DB BF FD | 	call	#__system____builtin_memmove
1b188     11 21 82 F1 | 	sub	local02, local03
1b18c     13 21 02 F1 | 	add	local02, local05
1b190     10 01 48 FC | 	wrbyte	#0, local02
1b194     13 FB 01 F6 | 	mov	result1, local05
1b198     14 00 90 FD | 	jmp	#LR__2436
1b19c                 | LR__2433
1b19c     13 FB 01 F6 | 	mov	result1, local05
1b1a0     0C 00 90 FD | 	jmp	#LR__2436
1b1a4                 | LR__2434
1b1a4     01 22 06 F1 | 	add	local03, #1
1b1a8     90 FF 9F FD | 	jmp	#LR__2432
1b1ac                 | LR__2435
1b1ac     0F FB 01 F6 | 	mov	result1, local01
1b1b0                 | LR__2436
1b1b0     A7 F0 03 F6 | 	mov	ptra, fp
1b1b4     B2 00 A0 FD | 	call	#popregs_
1b1b8                 | __system__LTrim_S_ret
1b1b8     2D 00 64 FD | 	ret
1b1bc                 | 
1b1bc                 | __system__RTrim_S
1b1bc     04 4A 05 F6 | 	mov	COUNT_, #4
1b1c0     A8 00 A0 FD | 	call	#pushregs_
1b1c4     09 1F 02 F6 | 	mov	local01, arg01
1b1c8     09 21 02 F6 | 	mov	local02, arg01
1b1cc     97 06 48 FB | 	callpa	#(@LR__2441-@LR__2440)>>2,fcache_load_ptr_
1b1d0                 | LR__2440
1b1d0     10 FB C9 FA | 	rdbyte	result1, local02 wz
1b1d4     01 20 06 51 |  if_ne	add	local02, #1
1b1d8     F4 FF 9F 5D |  if_ne	jmp	#LR__2440
1b1dc                 | LR__2441
1b1dc     09 21 82 F1 | 	sub	local02, arg01
1b1e0     10 FB 01 F6 | 	mov	result1, local02
1b1e4     FD 20 0A F6 | 	mov	local02, result1 wz
1b1e8     41 01 00 AF 
1b1ec     94 FA 05 A6 |  if_e	mov	result1, ##@LR__4259
1b1f0     74 00 90 AD |  if_e	jmp	#LR__2445
1b1f4     10 23 02 F6 | 	mov	local03, local02
1b1f8     01 22 86 F1 | 	sub	local03, #1
1b1fc                 | LR__2442
1b1fc     11 15 02 F6 | 	mov	arg02, local03
1b200     0F 15 02 F1 | 	add	arg02, local01
1b204     0A 21 C2 FA | 	rdbyte	local02, arg02
1b208     20 20 0E F2 | 	cmp	local02, #32 wz
1b20c     44 00 90 AD |  if_e	jmp	#LR__2444
1b210     11 13 02 F6 | 	mov	arg01, local03
1b214     02 12 06 F1 | 	add	arg01, #2
1b218     14 19 B0 FD | 	call	#__system___gc_alloc_managed
1b21c     FD 24 0A F6 | 	mov	local04, result1 wz
1b220     28 00 90 AD |  if_e	jmp	#LR__2443
1b224     11 17 02 F6 | 	mov	arg03, local03
1b228     01 16 06 F1 | 	add	arg03, #1
1b22c     12 13 02 F6 | 	mov	arg01, local04
1b230     0F 15 02 F6 | 	mov	arg02, local01
1b234     60 DA BF FD | 	call	#__system____builtin_memmove
1b238     01 22 06 F1 | 	add	local03, #1
1b23c     12 23 02 F1 | 	add	local03, local04
1b240     11 01 48 FC | 	wrbyte	#0, local03
1b244     12 FB 01 F6 | 	mov	result1, local04
1b248     1C 00 90 FD | 	jmp	#LR__2445
1b24c                 | LR__2443
1b24c     12 FB 01 F6 | 	mov	result1, local04
1b250     14 00 90 FD | 	jmp	#LR__2445
1b254                 | LR__2444
1b254     01 22 86 F1 | 	sub	local03, #1
1b258     00 22 56 F2 | 	cmps	local03, #0 wc
1b25c     9C FF 9F 3D |  if_ae	jmp	#LR__2442
1b260     41 01 00 FF 
1b264     95 FA 05 F6 | 	mov	result1, ##@LR__4260
1b268                 | LR__2445
1b268     A7 F0 03 F6 | 	mov	ptra, fp
1b26c     B2 00 A0 FD | 	call	#popregs_
1b270                 | __system__RTrim_S_ret
1b270     2D 00 64 FD | 	ret
1b274                 | 
1b274                 | __system__Instr
1b274     07 4A 05 F6 | 	mov	COUNT_, #7
1b278     A8 00 A0 FD | 	call	#pushregs_
1b27c     09 1F 02 F6 | 	mov	local01, arg01
1b280     0A 21 02 F6 | 	mov	local02, arg02
1b284     0B 23 02 F6 | 	mov	local03, arg03
1b288     11 13 02 F6 | 	mov	arg01, local03
1b28c     09 25 02 F6 | 	mov	local04, arg01
1b290     97 06 48 FB | 	callpa	#(@LR__2451-@LR__2450)>>2,fcache_load_ptr_
1b294                 | LR__2450
1b294     12 FB C9 FA | 	rdbyte	result1, local04 wz
1b298     01 24 06 51 |  if_ne	add	local04, #1
1b29c     F4 FF 9F 5D |  if_ne	jmp	#LR__2450
1b2a0                 | LR__2451
1b2a0     09 25 82 F1 | 	sub	local04, arg01
1b2a4     12 27 02 F6 | 	mov	local05, local04
1b2a8     10 13 02 F6 | 	mov	arg01, local02
1b2ac     09 25 02 F6 | 	mov	local04, arg01
1b2b0     97 06 48 FB | 	callpa	#(@LR__2453-@LR__2452)>>2,fcache_load_ptr_
1b2b4                 | LR__2452
1b2b4     12 FB C9 FA | 	rdbyte	result1, local04 wz
1b2b8     01 24 06 51 |  if_ne	add	local04, #1
1b2bc     F4 FF 9F 5D |  if_ne	jmp	#LR__2452
1b2c0                 | LR__2453
1b2c0     09 25 82 F1 | 	sub	local04, arg01
1b2c4     12 FB 01 F6 | 	mov	result1, local04
1b2c8     FD 18 0A F6 | 	mov	arg04, result1 wz
1b2cc     00 FA 05 A6 |  if_e	mov	result1, #0
1b2d0     98 00 90 AD |  if_e	jmp	#LR__2457
1b2d4     00 26 0E F2 | 	cmp	local05, #0 wz
1b2d8     00 FA 05 A6 |  if_e	mov	result1, #0
1b2dc     8C 00 90 AD |  if_e	jmp	#LR__2457
1b2e0     0C 1F 5A F2 | 	cmps	local01, arg04 wcz
1b2e4     00 FA 05 16 |  if_a	mov	result1, #0
1b2e8     80 00 90 1D |  if_a	jmp	#LR__2457
1b2ec     01 1E 56 F2 | 	cmps	local01, #1 wc
1b2f0     01 1E 06 C6 |  if_b	mov	local01, #1
1b2f4     11 29 C2 FA | 	rdbyte	local06, local03
1b2f8     01 26 0E F2 | 	cmp	local05, #1 wz
1b2fc     18 00 90 5D |  if_ne	jmp	#LR__2454
1b300     10 13 02 F6 | 	mov	arg01, local02
1b304     14 15 02 F6 | 	mov	arg02, local06
1b308     0F 17 02 F6 | 	mov	arg03, local01
1b30c     00 18 06 F6 | 	mov	arg04, #0
1b310     B8 33 B0 FD | 	call	#__system____ScanForChar
1b314     54 00 90 FD | 	jmp	#LR__2457
1b318                 | LR__2454
1b318     0F 2B 02 F6 | 	mov	local07, local01
1b31c                 | LR__2455
1b31c     10 13 02 F6 | 	mov	arg01, local02
1b320     14 15 02 F6 | 	mov	arg02, local06
1b324     15 17 02 F6 | 	mov	arg03, local07
1b328     00 18 06 F6 | 	mov	arg04, #0
1b32c     9C 33 B0 FD | 	call	#__system____ScanForChar
1b330     FD 2A 0A F6 | 	mov	local07, result1 wz
1b334     30 00 90 AD |  if_e	jmp	#LR__2456
1b338     13 17 02 F6 | 	mov	arg03, local05
1b33c     10 13 02 F6 | 	mov	arg01, local02
1b340     15 15 02 F6 | 	mov	arg02, local07
1b344     58 FB BF FD | 	call	#__system__Mid_S
1b348     FD 12 02 F6 | 	mov	arg01, result1
1b34c     11 15 02 F6 | 	mov	arg02, local03
1b350     4C DA BF FD | 	call	#__system___string_cmp
1b354     00 FA 0D F2 | 	cmp	result1, #0 wz
1b358     15 FB 01 A6 |  if_e	mov	result1, local07
1b35c     0C 00 90 AD |  if_e	jmp	#LR__2457
1b360     13 2B 02 F1 | 	add	local07, local05
1b364     B4 FF 9F FD | 	jmp	#LR__2455
1b368                 | LR__2456
1b368     00 FA 05 F6 | 	mov	result1, #0
1b36c                 | LR__2457
1b36c     A7 F0 03 F6 | 	mov	ptra, fp
1b370     B2 00 A0 FD | 	call	#popregs_
1b374                 | __system__Instr_ret
1b374     2D 00 64 FD | 	ret
1b378                 | 
1b378                 | __system___strerror
1b378     00 12 56 F2 | 	cmps	arg01, #0 wc
1b37c     08 00 90 CD |  if_b	jmp	#LR__2460
1b380     1A 12 56 F2 | 	cmps	arg01, #26 wc
1b384     04 00 90 CD |  if_b	jmp	#LR__2461
1b388                 | LR__2460
1b388     19 12 06 F6 | 	mov	arg01, #25
1b38c                 | LR__2461
1b38c     02 12 66 F0 | 	shl	arg01, #2
1b390     01 00 00 FF 
1b394     D8 E8 05 F1 | 	add	ptr___system__dat__, ##728
1b398     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
1b39c     09 FB 01 FB | 	rdlong	result1, arg01
1b3a0     01 00 00 FF 
1b3a4     D8 E8 85 F1 | 	sub	ptr___system__dat__, ##728
1b3a8                 | __system___strerror_ret
1b3a8     2D 00 64 FD | 	ret
1b3ac                 | 
1b3ac                 | __system___int64_shl
1b3ac     20 16 CE F7 | 	test	arg03, #32 wz
1b3b0     09 15 02 56 |  if_ne	mov	arg02, arg01
1b3b4     00 12 06 56 |  if_ne	mov	arg01, #0
1b3b8     1F 16 CE F7 | 	test	arg03, #31 wz
1b3bc     18 00 90 AD |  if_e	jmp	#LR__2470
1b3c0     0B 15 62 F0 | 	shl	arg02, arg03
1b3c4     09 FB 01 F6 | 	mov	result1, arg01
1b3c8     0B FD 61 F6 | 	neg	result2, arg03
1b3cc     FE FA 41 F0 | 	shr	result1, result2
1b3d0     FD 14 42 F5 | 	or	arg02, result1
1b3d4     0B 13 62 F0 | 	shl	arg01, arg03
1b3d8                 | LR__2470
1b3d8     0A FD 01 F6 | 	mov	result2, arg02
1b3dc     09 FB 01 F6 | 	mov	result1, arg01
1b3e0                 | __system___int64_shl_ret
1b3e0     2D 00 64 FD | 	ret
1b3e4                 | 
1b3e4                 | __system___usepins
1b3e4     14 E8 05 F1 | 	add	ptr___system__dat__, #20
1b3e8     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1b3ec     14 E8 85 F1 | 	sub	ptr___system__dat__, #20
1b3f0     00 13 CA F7 | 	test	arg01, _var01 wz
1b3f4     18 E8 05 A1 |  if_e	add	ptr___system__dat__, #24
1b3f8     F4 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
1b3fc     18 E8 85 A1 |  if_e	sub	ptr___system__dat__, #24
1b400     01 15 CA A7 |  if_e	test	arg02, _var02 wz
1b404     00 FA 05 56 |  if_ne	mov	result1, #0
1b408     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
1b40c     14 E8 05 F1 | 	add	ptr___system__dat__, #20
1b410     F4 02 02 FB | 	rdlong	_var02, ptr___system__dat__
1b414     09 03 42 F5 | 	or	_var02, arg01
1b418     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
1b41c     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1b420     F4 02 02 FB | 	rdlong	_var02, ptr___system__dat__
1b424     0A 03 42 F5 | 	or	_var02, arg02
1b428     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
1b42c     18 E8 85 F1 | 	sub	ptr___system__dat__, #24
1b430     01 FA 65 F6 | 	neg	result1, #1
1b434                 | __system___usepins_ret
1b434     2D 00 64 FD | 	ret
1b438                 | 
1b438                 | __system___freepins
1b438     14 E8 05 F1 | 	add	ptr___system__dat__, #20
1b43c     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1b440     09 01 22 F5 | 	andn	_var01, arg01
1b444     F4 00 62 FC | 	wrlong	_var01, ptr___system__dat__
1b448     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1b44c     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1b450     0A 01 22 F5 | 	andn	_var01, arg02
1b454     F4 00 62 FC | 	wrlong	_var01, ptr___system__dat__
1b458     18 E8 85 F1 | 	sub	ptr___system__dat__, #24
1b45c                 | __system___freepins_ret
1b45c     2D 00 64 FD | 	ret
1b460                 | 
1b460                 | __system___float_fromuns
1b460     09 17 0A F6 | 	mov	arg03, arg01 wz
1b464     0B FB 01 A6 |  if_e	mov	result1, arg03
1b468     24 00 90 AD |  if_e	jmp	#LR__2480
1b46c     0B 15 92 F7 | 	encod	arg02, arg03 wc
1b470     01 14 06 C1 |  if_b	add	arg02, #1
1b474     01 14 86 F1 | 	sub	arg02, #1
1b478     1F 12 06 F6 | 	mov	arg01, #31
1b47c     0A 13 82 F1 | 	sub	arg01, arg02
1b480     09 17 62 F0 | 	shl	arg03, arg01
1b484     02 16 46 F0 | 	shr	arg03, #2
1b488     00 12 06 F6 | 	mov	arg01, #0
1b48c     4C 09 B0 FD | 	call	#__system___float_Pack
1b490                 | LR__2480
1b490                 | __system___float_fromuns_ret
1b490     2D 00 64 FD | 	ret
1b494                 | 
1b494                 | __system___float_add
1b494     0F 4A 05 F6 | 	mov	COUNT_, #15
1b498     A8 00 A0 FD | 	call	#pushregs_
1b49c     09 1F 02 F6 | 	mov	local01, arg01
1b4a0     0A 21 02 F6 | 	mov	local02, arg02
1b4a4     00 22 06 F6 | 	mov	local03, #0
1b4a8     0F 25 02 F6 | 	mov	local04, local01
1b4ac     12 27 02 F6 | 	mov	local05, local04
1b4b0     16 26 46 F7 | 	zerox	local05, #22
1b4b4     12 29 02 F6 | 	mov	local06, local04
1b4b8     01 28 66 F0 | 	shl	local06, #1
1b4bc     18 28 46 F0 | 	shr	local06, #24
1b4c0     1F 24 46 F0 | 	shr	local04, #31
1b4c4     10 13 02 F6 | 	mov	arg01, local02
1b4c8     09 FB 01 F6 | 	mov	result1, arg01
1b4cc     FD 2A 02 F6 | 	mov	local07, result1
1b4d0     15 2D 02 F6 | 	mov	local08, local07
1b4d4     16 2C 46 F7 | 	zerox	local08, #22
1b4d8     15 2F 02 F6 | 	mov	local09, local07
1b4dc     01 2E 66 F0 | 	shl	local09, #1
1b4e0     18 2E 46 F0 | 	shr	local09, #24
1b4e4     17 31 02 F6 | 	mov	local10, local09
1b4e8     1F 2A 46 F0 | 	shr	local07, #31
1b4ec     00 32 06 F6 | 	mov	local11, #0
1b4f0     00 34 06 F6 | 	mov	local12, #0
1b4f4     18 29 12 F2 | 	cmp	local06, local10 wc
1b4f8     18 29 0A 32 |  if_ae	cmp	local06, local10 wz
1b4fc     2C 00 90 1D |  if_a	jmp	#LR__2490
1b500     16 27 12 32 |  if_ae	cmp	local05, local08 wc
1b504     24 00 90 3D |  if_ae	jmp	#LR__2490
1b508     13 37 02 F6 | 	mov	local13, local05
1b50c     16 27 02 F6 | 	mov	local05, local08
1b510     1B 2D 02 F6 | 	mov	local08, local13
1b514     14 37 02 F6 | 	mov	local13, local06
1b518     18 29 02 F6 | 	mov	local06, local10
1b51c     1B 31 02 F6 | 	mov	local10, local13
1b520     12 37 02 F6 | 	mov	local13, local04
1b524     15 25 02 F6 | 	mov	local04, local07
1b528     1B 2B 02 F6 | 	mov	local07, local13
1b52c                 | LR__2490
1b52c     FF 28 0E F2 | 	cmp	local06, #255 wz
1b530     70 01 90 AD |  if_e	jmp	#LR__2505
1b534     00 28 0E F2 | 	cmp	local06, #0 wz
1b538     AC 01 90 AD |  if_e	jmp	#LR__2507
1b53c     17 26 26 F4 | 	bith	local05, #23
1b540                 | LR__2491
1b540     00 30 0E F2 | 	cmp	local10, #0 wz
1b544     F0 01 90 AD |  if_e	jmp	#LR__2511
1b548     17 2C 26 F4 | 	bith	local08, #23
1b54c                 | LR__2492
1b54c     7F 28 86 F1 | 	sub	local06, #127
1b550     7F 30 86 F1 | 	sub	local10, #127
1b554     14 39 02 F6 | 	mov	local14, local06
1b558     18 39 82 F1 | 	sub	local14, local10
1b55c     97 14 48 FB | 	callpa	#(@LR__2494-@LR__2493)>>2,fcache_load_ptr_
1b560                 | LR__2493
1b560     20 38 56 F2 | 	cmps	local14, #32 wc
1b564     20 00 90 CD |  if_b	jmp	#LR__2495
1b568     16 2F 02 F6 | 	mov	local09, local08
1b56c     00 32 0E F2 | 	cmp	local11, #0 wz
1b570     6F 32 62 FD | 	wrnz	local11
1b574     19 2F 42 F5 | 	or	local09, local11
1b578     17 33 02 F6 | 	mov	local11, local09
1b57c     00 2C 06 F6 | 	mov	local08, #0
1b580     20 38 86 F1 | 	sub	local14, #32
1b584     D8 FF 9F FD | 	jmp	#LR__2493
1b588                 | LR__2494
1b588                 | LR__2495
1b588     00 38 0E F2 | 	cmp	local14, #0 wz
1b58c     38 00 90 AD |  if_e	jmp	#LR__2496
1b590     16 37 02 F6 | 	mov	local13, local08
1b594     20 30 06 F6 | 	mov	local10, #32
1b598     1C 31 82 F1 | 	sub	local10, local14
1b59c     18 37 62 F0 | 	shl	local13, local10
1b5a0     19 31 02 F6 | 	mov	local10, local11
1b5a4     20 2E 06 F6 | 	mov	local09, #32
1b5a8     1C 2F 82 F1 | 	sub	local09, local14
1b5ac     17 31 6A F0 | 	shl	local10, local09 wz
1b5b0     1C 33 42 F0 | 	shr	local11, local14
1b5b4     1C 2D 42 F0 | 	shr	local08, local14
1b5b8     1B 33 42 F5 | 	or	local11, local13
1b5bc     00 3A 06 F6 | 	mov	local15, #0
1b5c0     01 3A 06 56 |  if_ne	mov	local15, #1
1b5c4     1D 33 42 F5 | 	or	local11, local15
1b5c8                 | LR__2496
1b5c8     12 3B 02 F6 | 	mov	local15, local04
1b5cc     15 3B 62 F5 | 	xor	local15, local07
1b5d0     01 3A CE F7 | 	test	local15, #1 wz
1b5d4     18 00 90 AD |  if_e	jmp	#LR__2497
1b5d8     16 2D 22 F6 | 	not	local08, local08
1b5dc     19 33 22 F6 | 	not	local11, local11
1b5e0     01 32 0E F1 | 	add	local11, #1 wz
1b5e4     00 3A 06 F6 | 	mov	local15, #0
1b5e8     01 3A 06 A6 |  if_e	mov	local15, #1
1b5ec     1D 2D 02 F1 | 	add	local08, local15
1b5f0                 | LR__2497
1b5f0     19 35 12 F1 | 	add	local12, local11 wc
1b5f4     16 27 22 F1 | 	addx	local05, local08
1b5f8     00 26 56 F2 | 	cmps	local05, #0 wc
1b5fc     1C 00 90 3D |  if_ae	jmp	#LR__2498
1b600     01 24 66 F5 | 	xor	local04, #1
1b604     13 27 22 F6 | 	not	local05, local05
1b608     1A 35 22 F6 | 	not	local12, local12
1b60c     01 34 0E F1 | 	add	local12, #1 wz
1b610     00 3A 06 F6 | 	mov	local15, #0
1b614     01 3A 06 A6 |  if_e	mov	local15, #1
1b618     1D 27 02 F1 | 	add	local05, local15
1b61c                 | LR__2498
1b61c     00 80 00 FF 
1b620     00 26 16 F2 | 	cmp	local05, ##16777216 wc
1b624     28 00 90 CD |  if_b	jmp	#LR__2499
1b628     01 28 06 F1 | 	add	local06, #1
1b62c     1A 39 02 F6 | 	mov	local14, local12
1b630     01 38 06 F5 | 	and	local14, #1
1b634     01 34 46 F0 | 	shr	local12, #1
1b638     13 3B 02 F6 | 	mov	local15, local05
1b63c     1F 3A 66 F0 | 	shl	local15, #31
1b640     1D 35 42 F5 | 	or	local12, local15
1b644     1C 35 42 F5 | 	or	local12, local14
1b648     01 26 46 F0 | 	shr	local05, #1
1b64c     3C 00 90 FD | 	jmp	#LR__2504
1b650                 | LR__2499
1b650     00 40 00 FF 
1b654     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1b658     30 00 90 3D |  if_ae	jmp	#LR__2503
1b65c     00 26 0E F2 | 	cmp	local05, #0 wz
1b660     00 34 0E A2 |  if_e	cmp	local12, #0 wz
1b664     08 24 46 A5 |  if_e	or	local04, #8
1b668     01 24 26 A5 |  if_e	andn	local04, #1
1b66c     1C 00 90 AD |  if_e	jmp	#LR__2502
1b670                 | LR__2500
1b670     00 40 00 FF 
1b674     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1b678     10 00 90 3D |  if_ae	jmp	#LR__2501
1b67c     1A 35 12 F1 | 	add	local12, local12 wc
1b680     13 27 22 F1 | 	addx	local05, local05
1b684     01 28 86 F1 | 	sub	local06, #1
1b688     E4 FF 9F FD | 	jmp	#LR__2500
1b68c                 | LR__2501
1b68c                 | LR__2502
1b68c                 | LR__2503
1b68c                 | LR__2504
1b68c     13 13 02 F6 | 	mov	arg01, local05
1b690     1A 15 02 F6 | 	mov	arg02, local12
1b694     14 17 02 F6 | 	mov	arg03, local06
1b698     12 19 02 F6 | 	mov	arg04, local04
1b69c     70 34 B0 FD | 	call	#__system__pack_0489
1b6a0     DC 00 90 FD | 	jmp	#LR__2515
1b6a4                 | LR__2505
1b6a4     FF 30 0E F2 | 	cmp	local10, #255 wz
1b6a8     10 00 90 5D |  if_ne	jmp	#LR__2506
1b6ac     12 2B 0A F2 | 	cmp	local07, local04 wz
1b6b0     00 F8 3F 5F 
1b6b4     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1b6b8     C4 00 90 5D |  if_ne	jmp	#LR__2515
1b6bc                 | LR__2506
1b6bc     00 26 0E F2 | 	cmp	local05, #0 wz
1b6c0     00 F8 3F 5F 
1b6c4     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1b6c8     B4 00 90 5D |  if_ne	jmp	#LR__2515
1b6cc     1A 15 02 F6 | 	mov	arg02, local12
1b6d0     14 17 02 F6 | 	mov	arg03, local06
1b6d4     12 19 02 F6 | 	mov	arg04, local04
1b6d8     02 18 46 F5 | 	or	arg04, #2
1b6dc     13 13 02 F6 | 	mov	arg01, local05
1b6e0     2C 34 B0 FD | 	call	#__system__pack_0489
1b6e4     98 00 90 FD | 	jmp	#LR__2515
1b6e8                 | LR__2507
1b6e8     00 26 0E F2 | 	cmp	local05, #0 wz
1b6ec     28 00 90 AD |  if_e	jmp	#LR__2510
1b6f0     01 26 66 F0 | 	shl	local05, #1
1b6f4     97 0E 48 FB | 	callpa	#(@LR__2509-@LR__2508)>>2,fcache_load_ptr_
1b6f8                 | LR__2508
1b6f8     00 40 00 FF 
1b6fc     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1b700     14 3B 02 C6 |  if_b	mov	local15, local06
1b704     01 3A 86 C1 |  if_b	sub	local15, #1
1b708     1D 29 02 C6 |  if_b	mov	local06, local15
1b70c     01 26 66 C0 |  if_b	shl	local05, #1
1b710     E4 FF 9F CD |  if_b	jmp	#LR__2508
1b714                 | LR__2509
1b714     28 FE 9F FD | 	jmp	#LR__2491
1b718                 | LR__2510
1b718     15 25 02 F5 | 	and	local04, local07
1b71c     12 19 02 F6 | 	mov	arg04, local04
1b720     08 18 46 F5 | 	or	arg04, #8
1b724     00 12 06 F6 | 	mov	arg01, #0
1b728     00 14 06 F6 | 	mov	arg02, #0
1b72c     00 16 06 F6 | 	mov	arg03, #0
1b730     DC 33 B0 FD | 	call	#__system__pack_0489
1b734     48 00 90 FD | 	jmp	#LR__2515
1b738                 | LR__2511
1b738     00 2C 0E F2 | 	cmp	local08, #0 wz
1b73c     28 00 90 AD |  if_e	jmp	#LR__2514
1b740     01 2C 66 F0 | 	shl	local08, #1
1b744     97 0E 48 FB | 	callpa	#(@LR__2513-@LR__2512)>>2,fcache_load_ptr_
1b748                 | LR__2512
1b748     00 40 00 FF 
1b74c     00 2C 16 F2 | 	cmp	local08, ##8388608 wc
1b750     18 3B 02 C6 |  if_b	mov	local15, local10
1b754     01 3A 86 C1 |  if_b	sub	local15, #1
1b758     1D 31 02 C6 |  if_b	mov	local10, local15
1b75c     01 2C 66 C0 |  if_b	shl	local08, #1
1b760     E4 FF 9F CD |  if_b	jmp	#LR__2512
1b764                 | LR__2513
1b764     E4 FD 9F FD | 	jmp	#LR__2492
1b768                 | LR__2514
1b768     7F 28 86 F1 | 	sub	local06, #127
1b76c     13 13 02 F6 | 	mov	arg01, local05
1b770     1A 15 02 F6 | 	mov	arg02, local12
1b774     14 17 02 F6 | 	mov	arg03, local06
1b778     12 19 02 F6 | 	mov	arg04, local04
1b77c     90 33 B0 FD | 	call	#__system__pack_0489
1b780                 | LR__2515
1b780     A7 F0 03 F6 | 	mov	ptra, fp
1b784     B2 00 A0 FD | 	call	#popregs_
1b788                 | __system___float_add_ret
1b788     2D 00 64 FD | 	ret
1b78c                 | 
1b78c                 | __system___float_sqrt
1b78c     04 4A 05 F6 | 	mov	COUNT_, #4
1b790     A8 00 A0 FD | 	call	#pushregs_
1b794     09 1F 02 F6 | 	mov	local01, arg01
1b798     09 FB 01 F6 | 	mov	result1, arg01
1b79c     FD 20 02 F6 | 	mov	local02, result1
1b7a0     10 23 02 F6 | 	mov	local03, local02
1b7a4     16 22 46 F7 | 	zerox	local03, #22
1b7a8     10 25 02 F6 | 	mov	local04, local02
1b7ac     01 24 66 F0 | 	shl	local04, #1
1b7b0     18 24 4E F0 | 	shr	local04, #24 wz
1b7b4     1F 20 46 F0 | 	shr	local02, #31
1b7b8     70 00 90 AD |  if_e	jmp	#LR__2521
1b7bc     17 22 26 F4 | 	bith	local03, #23
1b7c0                 | LR__2520
1b7c0     00 20 0E F2 | 	cmp	local02, #0 wz
1b7c4     00 F8 3F 5F 
1b7c8     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1b7cc     88 00 90 5D |  if_ne	jmp	#LR__2524
1b7d0     FF 24 0E F2 | 	cmp	local04, #255 wz
1b7d4     0F FB 01 A6 |  if_e	mov	result1, local01
1b7d8     7C 00 90 AD |  if_e	jmp	#LR__2524
1b7dc     7F 24 86 F1 | 	sub	local04, #127
1b7e0     01 24 CE F7 | 	test	local04, #1 wz
1b7e4     01 22 66 50 |  if_ne	shl	local03, #1
1b7e8     05 22 66 F0 | 	shl	local03, #5
1b7ec     11 01 38 FD | 	qsqrt	#0, local03
1b7f0     01 24 86 51 |  if_ne	sub	local04, #1
1b7f4     12 25 52 F6 | 	abs	local04, local04 wc
1b7f8     01 24 46 F0 | 	shr	local04, #1
1b7fc     12 17 82 F6 | 	negc	arg03, local04
1b800     10 19 02 F6 | 	mov	arg04, local02
1b804     18 12 62 FD | 	getqx	arg01
1b808     09 15 02 F6 | 	mov	arg02, arg01
1b80c     19 14 66 F0 | 	shl	arg02, #25
1b810     07 12 46 F0 | 	shr	arg01, #7
1b814     00 80 00 FF 
1b818     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
1b81c     01 16 06 31 |  if_ae	add	arg03, #1
1b820     01 12 46 30 |  if_ae	shr	arg01, #1
1b824     E8 32 B0 FD | 	call	#__system__pack_0489
1b828     2C 00 90 FD | 	jmp	#LR__2524
1b82c                 | LR__2521
1b82c     00 22 0E F2 | 	cmp	local03, #0 wz
1b830     0F FB 01 A6 |  if_e	mov	result1, local01
1b834     20 00 90 AD |  if_e	jmp	#LR__2524
1b838     01 22 66 F0 | 	shl	local03, #1
1b83c     97 0A 48 FB | 	callpa	#(@LR__2523-@LR__2522)>>2,fcache_load_ptr_
1b840                 | LR__2522
1b840     00 40 00 FF 
1b844     00 22 16 F2 | 	cmp	local03, ##8388608 wc
1b848     01 24 86 C1 |  if_b	sub	local04, #1
1b84c     01 22 66 C0 |  if_b	shl	local03, #1
1b850     EC FF 9F CD |  if_b	jmp	#LR__2522
1b854                 | LR__2523
1b854     68 FF 9F FD | 	jmp	#LR__2520
1b858                 | LR__2524
1b858     A7 F0 03 F6 | 	mov	ptra, fp
1b85c     B2 00 A0 FD | 	call	#popregs_
1b860                 | __system___float_sqrt_ret
1b860     2D 00 64 FD | 	ret
1b864                 | 
1b864                 | __system___float_mul
1b864     0B 4A 05 F6 | 	mov	COUNT_, #11
1b868     A8 00 A0 FD | 	call	#pushregs_
1b86c     09 1F 02 F6 | 	mov	local01, arg01
1b870     0A 21 02 F6 | 	mov	local02, arg02
1b874     0F 23 02 F6 | 	mov	local03, local01
1b878     11 25 02 F6 | 	mov	local04, local03
1b87c     16 24 46 F7 | 	zerox	local04, #22
1b880     11 27 02 F6 | 	mov	local05, local03
1b884     01 26 66 F0 | 	shl	local05, #1
1b888     18 26 46 F0 | 	shr	local05, #24
1b88c     1F 22 46 F0 | 	shr	local03, #31
1b890     10 FB 01 F6 | 	mov	result1, local02
1b894     FD 28 02 F6 | 	mov	local06, result1
1b898     14 2B 02 F6 | 	mov	local07, local06
1b89c     16 2A 46 F7 | 	zerox	local07, #22
1b8a0     14 2D 02 F6 | 	mov	local08, local06
1b8a4     01 2C 66 F0 | 	shl	local08, #1
1b8a8     18 2C 46 F0 | 	shr	local08, #24
1b8ac     1F 28 46 F0 | 	shr	local06, #31
1b8b0     14 23 62 F5 | 	xor	local03, local06
1b8b4     FF 26 0E F2 | 	cmp	local05, #255 wz
1b8b8     90 00 90 AD |  if_e	jmp	#LR__2533
1b8bc     FF 2C 0E F2 | 	cmp	local08, #255 wz
1b8c0     D8 00 90 AD |  if_e	jmp	#LR__2535
1b8c4     00 26 0E F2 | 	cmp	local05, #0 wz
1b8c8     0C 01 90 AD |  if_e	jmp	#LR__2536
1b8cc     17 24 26 F4 | 	bith	local04, #23
1b8d0                 | LR__2530
1b8d0     00 2C 0E F2 | 	cmp	local08, #0 wz
1b8d4     44 01 90 AD |  if_e	jmp	#LR__2540
1b8d8     17 2A 26 F4 | 	bith	local07, #23
1b8dc                 | LR__2531
1b8dc     12 21 02 F6 | 	mov	local02, local04
1b8e0     04 20 66 F0 | 	shl	local02, #4
1b8e4     15 29 02 F6 | 	mov	local06, local07
1b8e8     05 28 66 F0 | 	shl	local06, #5
1b8ec     14 21 02 FD | 	qmul	local02, local06
1b8f0     16 27 02 F1 | 	add	local05, local08
1b8f4     FE 26 86 F1 | 	sub	local05, #254
1b8f8     13 2F 02 F6 | 	mov	local09, local05
1b8fc     04 24 66 F0 | 	shl	local04, #4
1b900     05 2A 66 F0 | 	shl	local07, #5
1b904     18 30 62 FD | 	getqx	local10
1b908     15 25 02 FD | 	qmul	local04, local07
1b90c     19 32 62 FD | 	getqy	local11
1b910     00 80 00 FF 
1b914     00 32 16 F2 | 	cmp	local11, ##16777216 wc
1b918     18 00 90 CD |  if_b	jmp	#LR__2532
1b91c     01 2E 06 F1 | 	add	local09, #1
1b920     01 30 46 F0 | 	shr	local10, #1
1b924     19 2D 02 F6 | 	mov	local08, local11
1b928     1F 2C 66 F0 | 	shl	local08, #31
1b92c     16 31 42 F5 | 	or	local10, local08
1b930     01 32 46 F0 | 	shr	local11, #1
1b934                 | LR__2532
1b934     19 13 02 F6 | 	mov	arg01, local11
1b938     18 15 02 F6 | 	mov	arg02, local10
1b93c     17 17 02 F6 | 	mov	arg03, local09
1b940     11 19 02 F6 | 	mov	arg04, local03
1b944     C8 31 B0 FD | 	call	#__system__pack_0489
1b948     10 01 90 FD | 	jmp	#LR__2544
1b94c                 | LR__2533
1b94c     00 24 0E F2 | 	cmp	local04, #0 wz
1b950     0F FB 01 56 |  if_ne	mov	result1, local01
1b954     04 01 90 5D |  if_ne	jmp	#LR__2544
1b958     FF 2C 56 F2 | 	cmps	local08, #255 wc
1b95c     00 2C 0E C2 |  if_b	cmp	local08, #0 wz
1b960     00 2A 0E 82 |  if_c_and_z	cmp	local07, #0 wz
1b964     18 00 90 4D |  if_c_and_nz	jmp	#LR__2534
1b968     00 F8 3F CF 
1b96c     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
1b970     E8 00 90 CD |  if_b	jmp	#LR__2544
1b974     00 2A 0E F2 | 	cmp	local07, #0 wz
1b978     10 FB 01 56 |  if_ne	mov	result1, local02
1b97c     DC 00 90 5D |  if_ne	jmp	#LR__2544
1b980                 | LR__2534
1b980     02 22 46 F5 | 	or	local03, #2
1b984     00 12 06 F6 | 	mov	arg01, #0
1b988     00 14 06 F6 | 	mov	arg02, #0
1b98c     13 17 02 F6 | 	mov	arg03, local05
1b990     11 19 02 F6 | 	mov	arg04, local03
1b994     78 31 B0 FD | 	call	#__system__pack_0489
1b998     C0 00 90 FD | 	jmp	#LR__2544
1b99c                 | LR__2535
1b99c     00 26 0E F2 | 	cmp	local05, #0 wz
1b9a0     00 24 0E A2 |  if_e	cmp	local04, #0 wz
1b9a4     00 F8 3F AF 
1b9a8     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1b9ac     AC 00 90 AD |  if_e	jmp	#LR__2544
1b9b0     00 2A 0E F2 | 	cmp	local07, #0 wz
1b9b4     10 FB 01 56 |  if_ne	mov	result1, local02
1b9b8     A0 00 90 5D |  if_ne	jmp	#LR__2544
1b9bc     16 17 02 F6 | 	mov	arg03, local08
1b9c0     11 19 02 F6 | 	mov	arg04, local03
1b9c4     02 18 46 F5 | 	or	arg04, #2
1b9c8     00 12 06 F6 | 	mov	arg01, #0
1b9cc     00 14 06 F6 | 	mov	arg02, #0
1b9d0     3C 31 B0 FD | 	call	#__system__pack_0489
1b9d4     84 00 90 FD | 	jmp	#LR__2544
1b9d8                 | LR__2536
1b9d8     00 24 0E F2 | 	cmp	local04, #0 wz
1b9dc     20 00 90 AD |  if_e	jmp	#LR__2539
1b9e0     01 24 66 F0 | 	shl	local04, #1
1b9e4     97 0A 48 FB | 	callpa	#(@LR__2538-@LR__2537)>>2,fcache_load_ptr_
1b9e8                 | LR__2537
1b9e8     00 40 00 FF 
1b9ec     00 24 16 F2 | 	cmp	local04, ##8388608 wc
1b9f0     01 26 86 C1 |  if_b	sub	local05, #1
1b9f4     01 24 66 C0 |  if_b	shl	local04, #1
1b9f8     EC FF 9F CD |  if_b	jmp	#LR__2537
1b9fc                 | LR__2538
1b9fc     D0 FE 9F FD | 	jmp	#LR__2530
1ba00                 | LR__2539
1ba00     08 22 46 F5 | 	or	local03, #8
1ba04     00 12 06 F6 | 	mov	arg01, #0
1ba08     00 14 06 F6 | 	mov	arg02, #0
1ba0c     00 16 06 F6 | 	mov	arg03, #0
1ba10     11 19 02 F6 | 	mov	arg04, local03
1ba14     F8 30 B0 FD | 	call	#__system__pack_0489
1ba18     40 00 90 FD | 	jmp	#LR__2544
1ba1c                 | LR__2540
1ba1c     00 2A 0E F2 | 	cmp	local07, #0 wz
1ba20     20 00 90 AD |  if_e	jmp	#LR__2543
1ba24     01 2A 66 F0 | 	shl	local07, #1
1ba28     97 0A 48 FB | 	callpa	#(@LR__2542-@LR__2541)>>2,fcache_load_ptr_
1ba2c                 | LR__2541
1ba2c     00 40 00 FF 
1ba30     00 2A 16 F2 | 	cmp	local07, ##8388608 wc
1ba34     01 2C 86 C1 |  if_b	sub	local08, #1
1ba38     01 2A 66 C0 |  if_b	shl	local07, #1
1ba3c     EC FF 9F CD |  if_b	jmp	#LR__2541
1ba40                 | LR__2542
1ba40     98 FE 9F FD | 	jmp	#LR__2531
1ba44                 | LR__2543
1ba44     08 22 46 F5 | 	or	local03, #8
1ba48     00 12 06 F6 | 	mov	arg01, #0
1ba4c     00 14 06 F6 | 	mov	arg02, #0
1ba50     00 16 06 F6 | 	mov	arg03, #0
1ba54     11 19 02 F6 | 	mov	arg04, local03
1ba58     B4 30 B0 FD | 	call	#__system__pack_0489
1ba5c                 | LR__2544
1ba5c     A7 F0 03 F6 | 	mov	ptra, fp
1ba60     B2 00 A0 FD | 	call	#popregs_
1ba64                 | __system___float_mul_ret
1ba64     2D 00 64 FD | 	ret
1ba68                 | 
1ba68                 | __system___float_div
1ba68     0E 4A 05 F6 | 	mov	COUNT_, #14
1ba6c     A8 00 A0 FD | 	call	#pushregs_
1ba70     09 23 02 F6 | 	mov	local03, arg01
1ba74     0A 25 02 F6 | 	mov	local04, arg02
1ba78     11 27 02 F6 | 	mov	local05, local03
1ba7c     13 29 02 F6 | 	mov	local06, local05
1ba80     16 28 46 F7 | 	zerox	local06, #22
1ba84     13 2B 02 F6 | 	mov	local07, local05
1ba88     01 2A 66 F0 | 	shl	local07, #1
1ba8c     18 2A 46 F0 | 	shr	local07, #24
1ba90     1F 26 46 F0 | 	shr	local05, #31
1ba94     12 FB 01 F6 | 	mov	result1, local04
1ba98     FD 2C 02 F6 | 	mov	local08, result1
1ba9c     16 2F 02 F6 | 	mov	local09, local08
1baa0     16 2E 46 F7 | 	zerox	local09, #22
1baa4     16 31 02 F6 | 	mov	local10, local08
1baa8     01 30 66 F0 | 	shl	local10, #1
1baac     18 30 46 F0 | 	shr	local10, #24
1bab0     1F 2C 46 F0 | 	shr	local08, #31
1bab4     16 27 62 F5 | 	xor	local05, local08
1bab8     FF 2A 0E F2 | 	cmp	local07, #255 wz
1babc     D4 00 90 AD |  if_e	jmp	#LR__2555
1bac0     FF 30 0E F2 | 	cmp	local10, #255 wz
1bac4     04 01 90 AD |  if_e	jmp	#LR__2556
1bac8     00 2A 0E F2 | 	cmp	local07, #0 wz
1bacc     24 01 90 AD |  if_e	jmp	#LR__2557
1bad0     17 28 26 F4 | 	bith	local06, #23
1bad4                 | LR__2550
1bad4     00 30 0E F2 | 	cmp	local10, #0 wz
1bad8     70 01 90 AD |  if_e	jmp	#LR__2561
1badc     17 2E 26 F4 | 	bith	local09, #23
1bae0                 | LR__2551
1bae0     18 2B 82 F1 | 	sub	local07, local10
1bae4     15 33 02 F6 | 	mov	local11, local07
1bae8     14 13 02 F6 | 	mov	arg01, local06
1baec     02 12 46 F0 | 	shr	arg01, #2
1baf0     1E 28 66 F0 | 	shl	local06, #30
1baf4     14 15 02 F6 | 	mov	arg02, local06
1baf8     17 17 02 F6 | 	mov	arg03, local09
1bafc     28 12 62 FD | 	setq	arg01
1bb00     0B 15 12 FD | 	qdiv	arg02, arg03
1bb04     00 34 06 F6 | 	mov	local12, #0
1bb08     18 1E 62 FD | 	getqx	local01
1bb0c     19 FC 61 FD | 	getqy	result2
1bb10     FE 20 02 F6 | 	mov	local02, result2
1bb14     0F 37 02 F6 | 	mov	local13, local01
1bb18     00 20 4E F2 | 	cmps	local02, #0 wz
1bb1c     1B 39 02 F6 | 	mov	local14, local13
1bb20     19 38 66 F0 | 	shl	local14, #25
1bb24     01 34 06 56 |  if_ne	mov	local12, #1
1bb28     1A 39 42 F5 | 	or	local14, local12
1bb2c     07 36 46 F0 | 	shr	local13, #7
1bb30     00 80 00 FF 
1bb34     00 36 16 F2 | 	cmp	local13, ##16777216 wc
1bb38     1C 00 90 CD |  if_b	jmp	#LR__2552
1bb3c     01 32 06 F1 | 	add	local11, #1
1bb40     01 38 46 F0 | 	shr	local14, #1
1bb44     1B 35 02 F6 | 	mov	local12, local13
1bb48     1F 34 66 F0 | 	shl	local12, #31
1bb4c     1A 39 42 F5 | 	or	local14, local12
1bb50     01 36 46 F0 | 	shr	local13, #1
1bb54     24 00 90 FD | 	jmp	#LR__2554
1bb58                 | LR__2552
1bb58     00 40 00 FF 
1bb5c     00 36 16 F2 | 	cmp	local13, ##8388608 wc
1bb60     18 00 90 3D |  if_ae	jmp	#LR__2553
1bb64     01 32 86 F1 | 	sub	local11, #1
1bb68     01 36 66 F0 | 	shl	local13, #1
1bb6c     1C 35 02 F6 | 	mov	local12, local14
1bb70     1F 34 46 F0 | 	shr	local12, #31
1bb74     1A 37 42 F5 | 	or	local13, local12
1bb78     01 38 66 F0 | 	shl	local14, #1
1bb7c                 | LR__2553
1bb7c                 | LR__2554
1bb7c     1B 13 02 F6 | 	mov	arg01, local13
1bb80     1C 15 02 F6 | 	mov	arg02, local14
1bb84     19 17 02 F6 | 	mov	arg03, local11
1bb88     13 19 02 F6 | 	mov	arg04, local05
1bb8c     80 2F B0 FD | 	call	#__system__pack_0489
1bb90     F8 00 90 FD | 	jmp	#LR__2565
1bb94                 | LR__2555
1bb94     00 28 0E F2 | 	cmp	local06, #0 wz
1bb98     11 FB 01 56 |  if_ne	mov	result1, local03
1bb9c     EC 00 90 5D |  if_ne	jmp	#LR__2565
1bba0     FF 30 0E F2 | 	cmp	local10, #255 wz
1bba4     00 F8 3F AF 
1bba8     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1bbac     DC 00 90 AD |  if_e	jmp	#LR__2565
1bbb0     02 26 46 F5 | 	or	local05, #2
1bbb4     00 12 06 F6 | 	mov	arg01, #0
1bbb8     00 14 06 F6 | 	mov	arg02, #0
1bbbc     15 17 02 F6 | 	mov	arg03, local07
1bbc0     13 19 02 F6 | 	mov	arg04, local05
1bbc4     48 2F B0 FD | 	call	#__system__pack_0489
1bbc8     C0 00 90 FD | 	jmp	#LR__2565
1bbcc                 | LR__2556
1bbcc     00 2E 0E F2 | 	cmp	local09, #0 wz
1bbd0     12 FB 01 56 |  if_ne	mov	result1, local04
1bbd4     B4 00 90 5D |  if_ne	jmp	#LR__2565
1bbd8     13 19 02 F6 | 	mov	arg04, local05
1bbdc     08 18 46 F5 | 	or	arg04, #8
1bbe0     00 12 06 F6 | 	mov	arg01, #0
1bbe4     00 14 06 F6 | 	mov	arg02, #0
1bbe8     00 16 06 F6 | 	mov	arg03, #0
1bbec     20 2F B0 FD | 	call	#__system__pack_0489
1bbf0     98 00 90 FD | 	jmp	#LR__2565
1bbf4                 | LR__2557
1bbf4     00 28 0E F2 | 	cmp	local06, #0 wz
1bbf8     20 00 90 AD |  if_e	jmp	#LR__2560
1bbfc     01 28 66 F0 | 	shl	local06, #1
1bc00     97 0A 48 FB | 	callpa	#(@LR__2559-@LR__2558)>>2,fcache_load_ptr_
1bc04                 | LR__2558
1bc04     00 40 00 FF 
1bc08     00 28 16 F2 | 	cmp	local06, ##8388608 wc
1bc0c     01 2A 86 C1 |  if_b	sub	local07, #1
1bc10     01 28 66 C0 |  if_b	shl	local06, #1
1bc14     EC FF 9F CD |  if_b	jmp	#LR__2558
1bc18                 | LR__2559
1bc18     B8 FE 9F FD | 	jmp	#LR__2550
1bc1c                 | LR__2560
1bc1c     00 30 0E F2 | 	cmp	local10, #0 wz
1bc20     00 2E 0E A2 |  if_e	cmp	local09, #0 wz
1bc24     00 F8 3F AF 
1bc28     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1bc2c     5C 00 90 AD |  if_e	jmp	#LR__2565
1bc30     13 19 02 F6 | 	mov	arg04, local05
1bc34     08 18 46 F5 | 	or	arg04, #8
1bc38     00 12 06 F6 | 	mov	arg01, #0
1bc3c     00 14 06 F6 | 	mov	arg02, #0
1bc40     00 16 06 F6 | 	mov	arg03, #0
1bc44     C8 2E B0 FD | 	call	#__system__pack_0489
1bc48     40 00 90 FD | 	jmp	#LR__2565
1bc4c                 | LR__2561
1bc4c     00 2E 0E F2 | 	cmp	local09, #0 wz
1bc50     20 00 90 AD |  if_e	jmp	#LR__2564
1bc54     01 2E 66 F0 | 	shl	local09, #1
1bc58     97 0A 48 FB | 	callpa	#(@LR__2563-@LR__2562)>>2,fcache_load_ptr_
1bc5c                 | LR__2562
1bc5c     00 40 00 FF 
1bc60     00 2E 16 F2 | 	cmp	local09, ##8388608 wc
1bc64     01 30 86 C1 |  if_b	sub	local10, #1
1bc68     01 2E 66 C0 |  if_b	shl	local09, #1
1bc6c     EC FF 9F CD |  if_b	jmp	#LR__2562
1bc70                 | LR__2563
1bc70     6C FE 9F FD | 	jmp	#LR__2551
1bc74                 | LR__2564
1bc74     02 26 46 F5 | 	or	local05, #2
1bc78     00 12 06 F6 | 	mov	arg01, #0
1bc7c     00 14 06 F6 | 	mov	arg02, #0
1bc80     00 16 06 F6 | 	mov	arg03, #0
1bc84     13 19 02 F6 | 	mov	arg04, local05
1bc88     84 2E B0 FD | 	call	#__system__pack_0489
1bc8c                 | LR__2565
1bc8c     A7 F0 03 F6 | 	mov	ptra, fp
1bc90     B2 00 A0 FD | 	call	#popregs_
1bc94                 | __system___float_div_ret
1bc94     2D 00 64 FD | 	ret
1bc98                 | 
1bc98                 | __system___float_cmp
1bc98     00 C0 3F FF 
1bc9c     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
1bca0     00 C0 3F CF 
1bca4     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
1bca8     0B FB 01 36 |  if_ae	mov	result1, arg03
1bcac     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
1bcb0     00 C0 7F FF 
1bcb4     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
1bcb8     00 C0 7F CF 
1bcbc     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
1bcc0     0B FB 01 36 |  if_ae	mov	result1, arg03
1bcc4     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
1bcc8     00 12 56 F2 | 	cmps	arg01, #0 wc
1bccc     2C 00 90 3D |  if_ae	jmp	#LR__2570
1bcd0     00 14 56 F2 | 	cmps	arg02, #0 wc
1bcd4     0A FB 01 C6 |  if_b	mov	result1, arg02
1bcd8     09 FB 81 C1 |  if_b	sub	result1, arg01
1bcdc     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
1bce0     00 14 0E F2 | 	cmp	arg02, #0 wz
1bce4     00 00 40 AF 
1bce8     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
1bcec     00 FA 05 A6 |  if_e	mov	result1, #0
1bcf0     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
1bcf4     01 FA 65 F6 | 	neg	result1, #1
1bcf8     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
1bcfc                 | LR__2570
1bcfc     00 14 56 F2 | 	cmps	arg02, #0 wc
1bd00     1C 00 90 3D |  if_ae	jmp	#LR__2571
1bd04     00 12 0E F2 | 	cmp	arg01, #0 wz
1bd08     00 00 40 AF 
1bd0c     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
1bd10     00 FA 05 A6 |  if_e	mov	result1, #0
1bd14     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
1bd18     01 FA 05 F6 | 	mov	result1, #1
1bd1c     08 00 90 FD | 	jmp	#__system___float_cmp_ret
1bd20                 | LR__2571
1bd20     0A 13 82 F1 | 	sub	arg01, arg02
1bd24     09 FB 01 F6 | 	mov	result1, arg01
1bd28                 | __system___float_cmp_ret
1bd28     2D 00 64 FD | 	ret
1bd2c                 | 
1bd2c                 | __system___float_tointeger
1bd2c     02 4A 05 F6 | 	mov	COUNT_, #2
1bd30     A8 00 A0 FD | 	call	#pushregs_
1bd34     50 00 B0 FD | 	call	#__system___float_Unpack
1bd38     FF FF 7F FF 
1bd3c     FF FD 55 F2 | 	cmps	result2, ##-1 wc
1bd40     34 00 90 CD |  if_b	jmp	#LR__2580
1bd44     1F FC 55 F2 | 	cmps	result2, #31 wc
1bd48     2C 00 90 3D |  if_ae	jmp	#LR__2580
1bd4c     02 FE 65 F0 | 	shl	result3, #2
1bd50     1E 1E 06 F6 | 	mov	local01, #30
1bd54     FE 1E 82 F1 | 	sub	local01, result2
1bd58     0F FF 41 F0 | 	shr	result3, local01
1bd5c     FF 20 02 F6 | 	mov	local02, result3
1bd60     0A 21 02 F1 | 	add	local02, arg02
1bd64     01 20 46 F0 | 	shr	local02, #1
1bd68     00 FA 0D F2 | 	cmp	result1, #0 wz
1bd6c     10 21 62 56 |  if_ne	neg	local02, local02
1bd70     10 FB 01 F6 | 	mov	result1, local02
1bd74     04 00 90 FD | 	jmp	#LR__2581
1bd78                 | LR__2580
1bd78     00 FA 05 F6 | 	mov	result1, #0
1bd7c                 | LR__2581
1bd7c     A7 F0 03 F6 | 	mov	ptra, fp
1bd80     B2 00 A0 FD | 	call	#popregs_
1bd84                 | __system___float_tointeger_ret
1bd84     2D 00 64 FD | 	ret
1bd88                 | 
1bd88                 | __system___float_Unpack
1bd88     09 01 02 F6 | 	mov	_var01, arg01
1bd8c     1F 00 46 F0 | 	shr	_var01, #31
1bd90     09 03 02 F6 | 	mov	_var02, arg01
1bd94     01 02 66 F0 | 	shl	_var02, #1
1bd98     18 02 4E F0 | 	shr	_var02, #24 wz
1bd9c     17 13 06 F4 | 	bitl	arg01, #279
1bda0     06 12 66 50 |  if_ne	shl	arg01, #6
1bda4     1D 12 26 54 |  if_ne	bith	arg01, #29
1bda8     1C 00 90 5D |  if_ne	jmp	#LR__2590
1bdac     09 05 92 F7 | 	encod	_var03, arg01 wc
1bdb0     01 04 06 C1 |  if_b	add	_var03, #1
1bdb4     17 04 86 F1 | 	sub	_var03, #23
1bdb8     02 03 02 F6 | 	mov	_var02, _var03
1bdbc     07 FC 05 F6 | 	mov	result2, #7
1bdc0     02 FD 81 F1 | 	sub	result2, _var03
1bdc4     FE 12 62 F0 | 	shl	arg01, result2
1bdc8                 | LR__2590
1bdc8     7F 02 86 F1 | 	sub	_var02, #127
1bdcc     09 FF 01 F6 | 	mov	result3, arg01
1bdd0     00 FB 01 F6 | 	mov	result1, _var01
1bdd4     01 FD 01 F6 | 	mov	result2, _var02
1bdd8                 | __system___float_Unpack_ret
1bdd8     2D 00 64 FD | 	ret
1bddc                 | 
1bddc                 | __system___float_Pack
1bddc     00 00 06 F6 | 	mov	_var01, #0
1bde0     00 16 0E F2 | 	cmp	arg03, #0 wz
1bde4     8C 00 90 AD |  if_e	jmp	#LR__2601
1bde8     0B 03 92 F7 | 	encod	_var02, arg03 wc
1bdec     01 02 06 C1 |  if_b	add	_var02, #1
1bdf0     21 00 06 F6 | 	mov	_var01, #33
1bdf4     01 01 82 F1 | 	sub	_var01, _var02
1bdf8     00 17 62 F0 | 	shl	arg03, _var01
1bdfc     03 02 06 F6 | 	mov	_var02, #3
1be00     00 03 82 F1 | 	sub	_var02, _var01
1be04     01 15 02 F1 | 	add	arg02, _var02
1be08     0A 05 02 F6 | 	mov	_var03, arg02
1be0c     00 17 06 F1 | 	add	arg03, #256
1be10     0B 03 02 F6 | 	mov	_var02, arg03
1be14     FF 02 2E F5 | 	andn	_var02, #255 wz
1be18     01 04 06 A1 |  if_e	add	_var03, #1
1be1c     7F 04 06 F1 | 	add	_var03, #127
1be20     FF FF 7F FF 
1be24     E9 05 46 F3 | 	fges	_var03, ##-23
1be28     FF 04 66 F3 | 	fles	_var03, #255
1be2c     01 04 56 F2 | 	cmps	_var03, #1 wc
1be30     1C 00 90 3D |  if_ae	jmp	#LR__2600
1be34     01 16 46 F0 | 	shr	arg03, #1
1be38     1F 02 C6 F9 | 	decod	_var02, #31
1be3c     0B 03 02 F1 | 	add	_var02, arg03
1be40     02 05 62 F6 | 	neg	_var03, _var03
1be44     02 03 42 F0 | 	shr	_var02, _var03
1be48     01 17 02 F6 | 	mov	arg03, _var02
1be4c     00 04 06 F6 | 	mov	_var03, #0
1be50                 | LR__2600
1be50     09 FB 01 F6 | 	mov	result1, arg01
1be54     1F FA 65 F0 | 	shl	result1, #31
1be58     02 03 02 F6 | 	mov	_var02, _var03
1be5c     17 02 66 F0 | 	shl	_var02, #23
1be60     01 FB 41 F5 | 	or	result1, _var02
1be64     0B 07 02 F6 | 	mov	_var04, arg03
1be68     09 06 46 F0 | 	shr	_var04, #9
1be6c     03 FB 41 F5 | 	or	result1, _var04
1be70     04 00 90 FD | 	jmp	#__system___float_Pack_ret
1be74                 | LR__2601
1be74     00 FB 01 F6 | 	mov	result1, _var01
1be78                 | __system___float_Pack_ret
1be78     2D 00 64 FD | 	ret
1be7c                 | 
1be7c                 | __system___basic_print_float
1be7c     05 4A 05 F6 | 	mov	COUNT_, #5
1be80     A8 00 A0 FD | 	call	#pushregs_
1be84     09 1F 02 F6 | 	mov	local01, arg01
1be88     0A 21 02 F6 | 	mov	local02, arg02
1be8c     0B 23 0A F6 | 	mov	local03, arg03 wz
1be90     0C 25 02 F6 | 	mov	local04, arg04
1be94     14 00 90 5D |  if_ne	jmp	#LR__2610
1be98     23 24 0E F2 | 	cmp	local04, #35 wz
1be9c     80 02 10 AF 
1bea0     00 26 06 A6 |  if_e	mov	local05, ##537198592
1bea4     1D 26 C6 59 |  if_ne	decod	local05, #29
1bea8     13 23 02 F6 | 	mov	local03, local05
1beac                 | LR__2610
1beac     0F 13 02 F6 | 	mov	arg01, local01
1beb0     40 27 B0 FD | 	call	#__system___gettxfunc
1beb4     FD 26 0A F6 | 	mov	local05, result1 wz
1beb8     00 FA 05 A6 |  if_e	mov	result1, #0
1bebc     13 13 02 56 |  if_ne	mov	arg01, local05
1bec0     11 15 02 56 |  if_ne	mov	arg02, local03
1bec4     10 17 02 56 |  if_ne	mov	arg03, local02
1bec8     12 19 02 56 |  if_ne	mov	arg04, local04
1becc     8C DF BF 5D |  if_ne	call	#__system___fmtfloat
1bed0     A7 F0 03 F6 | 	mov	ptra, fp
1bed4     B2 00 A0 FD | 	call	#popregs_
1bed8                 | __system___basic_print_float_ret
1bed8     2D 00 64 FD | 	ret
1bedc                 | 
1bedc                 | __system____builtin_atoi
1bedc     07 4A 05 F6 | 	mov	COUNT_, #7
1bee0     A8 00 A0 FD | 	call	#pushregs_
1bee4                 | __system____builtin_atoi_enter
1bee4     09 1F 02 F6 | 	mov	local01, arg01
1bee8     0A 21 02 F6 | 	mov	local02, arg02
1beec     00 22 06 F6 | 	mov	local03, #0
1bef0     00 24 06 F6 | 	mov	local04, #0
1bef4     00 26 06 F6 | 	mov	local05, #0
1bef8     97 08 48 FB | 	callpa	#(@LR__2621-@LR__2620)>>2,fcache_load_ptr_
1befc                 | LR__2620
1befc     0F 29 C2 FA | 	rdbyte	local06, local01
1bf00     20 28 0E F2 | 	cmp	local06, #32 wz
1bf04     01 1E 06 A1 |  if_e	add	local01, #1
1bf08     F0 FF 9F AD |  if_e	jmp	#LR__2620
1bf0c                 | LR__2621
1bf0c     0F 2B C2 FA | 	rdbyte	local07, local01
1bf10                 | LR__2622
1bf10     2D 2A 0E F2 | 	cmp	local07, #45 wz
1bf14     2B 2A 0E 52 |  if_ne	cmp	local07, #43 wz
1bf18     18 00 90 5D |  if_ne	jmp	#LR__2623
1bf1c     01 1E 06 F1 | 	add	local01, #1
1bf20     2D 2A 0E F2 | 	cmp	local07, #45 wz
1bf24     01 28 06 A6 |  if_e	mov	local06, #1
1bf28     14 27 C2 A2 |  if_e	subr	local05, local06
1bf2c     0F 2B C2 FA | 	rdbyte	local07, local01
1bf30     DC FF 9F FD | 	jmp	#LR__2622
1bf34                 | LR__2623
1bf34     97 48 48 FB | 	callpa	#(@LR__2631-@LR__2624)>>2,fcache_load_ptr_
1bf38                 | LR__2624
1bf38                 | LR__2625
1bf38     0F 2B C2 FA | 	rdbyte	local07, local01
1bf3c     5F 2A 0E F2 | 	cmp	local07, #95 wz
1bf40     01 1E 06 F1 | 	add	local01, #1
1bf44     F0 FF 9F AD |  if_e	jmp	#LR__2625
1bf48     30 2A 0E F2 | 	cmp	local07, #48 wz
1bf4c     26 2A 0E 52 |  if_ne	cmp	local07, #38 wz
1bf50     00 24 06 A6 |  if_e	mov	local04, #0
1bf54     60 00 90 AD |  if_e	jmp	#LR__2630
1bf58     31 2A 56 F2 | 	cmps	local07, #49 wc
1bf5c     18 00 90 CD |  if_b	jmp	#LR__2626
1bf60     3A 2A 56 F2 | 	cmps	local07, #58 wc
1bf64     15 25 02 C6 |  if_b	mov	local04, local07
1bf68     30 24 86 C1 |  if_b	sub	local04, #48
1bf6c     00 20 0E C2 |  if_b	cmp	local02, #0 wz
1bf70     0A 20 06 86 |  if_c_and_z	mov	local02, #10
1bf74     40 00 90 CD |  if_b	jmp	#LR__2629
1bf78                 | LR__2626
1bf78     0B 20 56 F2 | 	cmps	local02, #11 wc
1bf7c     61 2A 56 32 |  if_ae	cmps	local07, #97 wc
1bf80     14 00 90 CD |  if_b	jmp	#LR__2627
1bf84     67 2A 56 F2 | 	cmps	local07, #103 wc
1bf88     61 2A 86 C1 |  if_b	sub	local07, #97
1bf8c     0A 24 06 C6 |  if_b	mov	local04, #10
1bf90     15 25 02 C1 |  if_b	add	local04, local07
1bf94     20 00 90 CD |  if_b	jmp	#LR__2628
1bf98                 | LR__2627
1bf98     0B 20 56 F2 | 	cmps	local02, #11 wc
1bf9c     41 2A 56 32 |  if_ae	cmps	local07, #65 wc
1bfa0     24 00 90 CD |  if_b	jmp	#LR__2632
1bfa4     47 2A 56 F2 | 	cmps	local07, #71 wc
1bfa8     41 2A 86 C1 |  if_b	sub	local07, #65
1bfac     0A 24 06 C6 |  if_b	mov	local04, #10
1bfb0     15 25 02 C1 |  if_b	add	local04, local07
1bfb4     10 00 90 3D |  if_ae	jmp	#LR__2632
1bfb8                 | LR__2628
1bfb8                 | LR__2629
1bfb8                 | LR__2630
1bfb8     11 21 02 FD | 	qmul	local02, local03
1bfbc     18 22 62 FD | 	getqx	local03
1bfc0     12 23 02 F1 | 	add	local03, local04
1bfc4     70 FF 9F FD | 	jmp	#LR__2624
1bfc8                 | LR__2631
1bfc8                 | LR__2632
1bfc8     00 20 0E F2 | 	cmp	local02, #0 wz
1bfcc     64 00 90 5D |  if_ne	jmp	#LR__2638
1bfd0     78 2A 0E F2 | 	cmp	local07, #120 wz
1bfd4     68 2A 0E 52 |  if_ne	cmp	local07, #104 wz
1bfd8     58 2A 0E 52 |  if_ne	cmp	local07, #88 wz
1bfdc     48 2A 0E 52 |  if_ne	cmp	local07, #72 wz
1bfe0     14 00 90 5D |  if_ne	jmp	#LR__2633
1bfe4     0F 13 02 F6 | 	mov	arg01, local01
1bfe8     10 14 06 F6 | 	mov	arg02, #16
1bfec     EC FE BF FD | 	call	#__system____builtin_atoi
1bff0     FD 22 02 F6 | 	mov	local03, result1
1bff4     3C 00 90 FD | 	jmp	#LR__2637
1bff8                 | LR__2633
1bff8     62 2A 0E F2 | 	cmp	local07, #98 wz
1bffc     42 2A 0E 52 |  if_ne	cmp	local07, #66 wz
1c000     14 00 90 5D |  if_ne	jmp	#LR__2634
1c004     0F 13 02 F6 | 	mov	arg01, local01
1c008     02 14 06 F6 | 	mov	arg02, #2
1c00c     CC FE BF FD | 	call	#__system____builtin_atoi
1c010     FD 22 02 F6 | 	mov	local03, result1
1c014     1C 00 90 FD | 	jmp	#LR__2636
1c018                 | LR__2634
1c018     6F 2A 0E F2 | 	cmp	local07, #111 wz
1c01c     4F 2A 0E 52 |  if_ne	cmp	local07, #79 wz
1c020     10 00 90 5D |  if_ne	jmp	#LR__2635
1c024     0F 13 02 F6 | 	mov	arg01, local01
1c028     08 14 06 F6 | 	mov	arg02, #8
1c02c     AC FE BF FD | 	call	#__system____builtin_atoi
1c030     FD 22 02 F6 | 	mov	local03, result1
1c034                 | LR__2635
1c034                 | LR__2636
1c034                 | LR__2637
1c034                 | LR__2638
1c034     00 26 0E F2 | 	cmp	local05, #0 wz
1c038     11 23 62 56 |  if_ne	neg	local03, local03
1c03c     11 FB 01 F6 | 	mov	result1, local03
1c040     A7 F0 03 F6 | 	mov	ptra, fp
1c044     B2 00 A0 FD | 	call	#popregs_
1c048                 | __system____builtin_atoi_ret
1c048     2D 00 64 FD | 	ret
1c04c                 | 
1c04c                 | __system____builtin_atof
1c04c     07 4A 05 F6 | 	mov	COUNT_, #7
1c050     A8 00 A0 FD | 	call	#pushregs_
1c054     09 1F 02 F6 | 	mov	local01, arg01
1c058     00 20 06 F6 | 	mov	local02, #0
1c05c     00 22 06 F6 | 	mov	local03, #0
1c060     00 24 06 F6 | 	mov	local04, #0
1c064     00 26 06 F6 | 	mov	local05, #0
1c068     97 08 48 FB | 	callpa	#(@LR__2641-@LR__2640)>>2,fcache_load_ptr_
1c06c                 | LR__2640
1c06c     0F 17 C2 FA | 	rdbyte	arg03, local01
1c070     20 16 0E F2 | 	cmp	arg03, #32 wz
1c074     01 1E 06 A1 |  if_e	add	local01, #1
1c078     F0 FF 9F AD |  if_e	jmp	#LR__2640
1c07c                 | LR__2641
1c07c     0F 29 C2 FA | 	rdbyte	local06, local01
1c080                 | LR__2642
1c080     2B 28 0E F2 | 	cmp	local06, #43 wz
1c084     2D 28 0E 52 |  if_ne	cmp	local06, #45 wz
1c088     14 00 90 5D |  if_ne	jmp	#LR__2643
1c08c     2D 28 0E F2 | 	cmp	local06, #45 wz
1c090     1F 24 E6 A4 |  if_e	bitnot	local04, #31
1c094     01 1E 06 F1 | 	add	local01, #1
1c098     0F 29 C2 FA | 	rdbyte	local06, local01
1c09c     E0 FF 9F FD | 	jmp	#LR__2642
1c0a0                 | LR__2643
1c0a0                 | LR__2644
1c0a0     97 08 48 FB | 	callpa	#(@LR__2646-@LR__2645)>>2,fcache_load_ptr_
1c0a4                 | LR__2645
1c0a4     0F 29 C2 FA | 	rdbyte	local06, local01
1c0a8     5F 28 0E F2 | 	cmp	local06, #95 wz
1c0ac     01 1E 06 F1 | 	add	local01, #1
1c0b0     F0 FF 9F AD |  if_e	jmp	#LR__2645
1c0b4                 | LR__2646
1c0b4     00 28 0E F2 | 	cmp	local06, #0 wz
1c0b8     5C 00 90 AD |  if_e	jmp	#LR__2648
1c0bc     30 28 56 F2 | 	cmps	local06, #48 wc
1c0c0     44 00 90 CD |  if_b	jmp	#LR__2647
1c0c4     3A 28 56 F2 | 	cmps	local06, #58 wc
1c0c8     3C 00 90 3D |  if_ae	jmp	#LR__2647
1c0cc     10 13 02 F6 | 	mov	arg01, local02
1c0d0     00 90 20 FF 
1c0d4     00 14 06 F6 | 	mov	arg02, ##1092616192
1c0d8     88 F7 BF FD | 	call	#__system___float_mul
1c0dc     FD 20 02 F6 | 	mov	local02, result1
1c0e0     30 28 86 F1 | 	sub	local06, #48
1c0e4     14 13 02 F6 | 	mov	arg01, local06
1c0e8     74 F3 BF FD | 	call	#__system___float_fromuns
1c0ec     FD 14 02 F6 | 	mov	arg02, result1
1c0f0     10 13 02 F6 | 	mov	arg01, local02
1c0f4     9C F3 BF FD | 	call	#__system___float_add
1c0f8     FD 20 02 F6 | 	mov	local02, result1
1c0fc     00 26 0E F2 | 	cmp	local05, #0 wz
1c100     01 22 86 51 |  if_ne	sub	local03, #1
1c104     98 FF 9F FD | 	jmp	#LR__2644
1c108                 | LR__2647
1c108     2E 28 0E F2 | 	cmp	local06, #46 wz
1c10c     00 26 0E A2 |  if_e	cmp	local05, #0 wz
1c110     01 26 06 A6 |  if_e	mov	local05, #1
1c114     88 FF 9F AD |  if_e	jmp	#LR__2644
1c118                 | LR__2648
1c118     45 28 0E F2 | 	cmp	local06, #69 wz
1c11c     65 28 0E 52 |  if_ne	cmp	local06, #101 wz
1c120     18 00 90 5D |  if_ne	jmp	#LR__2649
1c124     0F 13 02 F6 | 	mov	arg01, local01
1c128     00 14 06 F6 | 	mov	arg02, #0
1c12c     AC FD BF FD | 	call	#__system____builtin_atoi
1c130     11 FB 01 F1 | 	add	result1, local03
1c134     FD 2A 02 F6 | 	mov	local07, result1
1c138     04 00 90 FD | 	jmp	#LR__2650
1c13c                 | LR__2649
1c13c     11 2B 02 F6 | 	mov	local07, local03
1c140                 | LR__2650
1c140     15 17 02 F6 | 	mov	arg03, local07
1c144     10 13 02 F6 | 	mov	arg01, local02
1c148     00 90 20 FF 
1c14c     00 14 06 F6 | 	mov	arg02, ##1092616192
1c150     BC 06 B0 FD | 	call	#__system___float_pow_n
1c154     12 FB 61 F5 | 	xor	result1, local04
1c158     A7 F0 03 F6 | 	mov	ptra, fp
1c15c     B2 00 A0 FD | 	call	#popregs_
1c160                 | __system____builtin_atof_ret
1c160     2D 00 64 FD | 	ret
1c164                 | 
1c164                 | __system____builtin_ilogb
1c164     20 FC BF FD | 	call	#__system___float_Unpack
1c168     00 FE 0D F2 | 	cmp	result3, #0 wz
1c16c     00 00 40 AF 
1c170     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
1c174     24 00 90 AD |  if_e	jmp	#LR__2661
1c178     80 FC 0D F2 | 	cmp	result2, #128 wz
1c17c     18 00 90 5D |  if_ne	jmp	#LR__2660
1c180     00 00 10 FF 
1c184     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
1c188     1E FA CD A9 |  if_e	bmask	result1, #30
1c18c     0C 00 90 AD |  if_e	jmp	#LR__2661
1c190     1F FA C5 F9 | 	decod	result1, #31
1c194     04 00 90 FD | 	jmp	#LR__2661
1c198                 | LR__2660
1c198     FE FA 01 F6 | 	mov	result1, result2
1c19c                 | LR__2661
1c19c                 | __system____builtin_ilogb_ret
1c19c     2D 00 64 FD | 	ret
1c1a0                 | 
1c1a0                 | __system____builtin_sinf
1c1a0     03 4A 05 F6 | 	mov	COUNT_, #3
1c1a4     A8 00 A0 FD | 	call	#pushregs_
1c1a8     09 1F 02 F6 | 	mov	local01, arg01
1c1ac     87 64 20 FF 
1c1b0     DB 15 06 F6 | 	mov	arg02, ##1086918619
1c1b4     B0 F8 BF FD | 	call	#__system___float_div
1c1b8     FD 12 02 F6 | 	mov	arg01, result1
1c1bc     00 14 06 F6 | 	mov	arg02, #0
1c1c0     68 FB BF FD | 	call	#__system___float_tointeger
1c1c4     FD 16 0A F6 | 	mov	arg03, result1 wz
1c1c8     44 00 90 AD |  if_e	jmp	#LR__2670
1c1cc     0B 13 52 F6 | 	abs	arg01, arg03 wc
1c1d0     1F 20 C6 C9 |  if_b	decod	local02, #31
1c1d4     00 20 06 36 |  if_ae	mov	local02, #0
1c1d8     84 F2 BF FD | 	call	#__system___float_fromuns
1c1dc     10 FB 61 F5 | 	xor	result1, local02
1c1e0     FD 12 02 F6 | 	mov	arg01, result1
1c1e4     1E 14 C6 F9 | 	decod	arg02, #30
1c1e8     78 F6 BF FD | 	call	#__system___float_mul
1c1ec     FD 12 02 F6 | 	mov	arg01, result1
1c1f0     87 24 20 FF 
1c1f4     DB 15 06 F6 | 	mov	arg02, ##1078530011
1c1f8     68 F6 BF FD | 	call	#__system___float_mul
1c1fc     FD 14 02 F6 | 	mov	arg02, result1
1c200     0F 13 02 F6 | 	mov	arg01, local01
1c204     1F 14 E6 F4 | 	bitnot	arg02, #31
1c208     88 F2 BF FD | 	call	#__system___float_add
1c20c     FD 1E 02 F6 | 	mov	local01, result1
1c210                 | LR__2670
1c210     0F 13 02 F6 | 	mov	arg01, local01
1c214     66 E6 1E FF 
1c218     CD 14 06 F6 | 	mov	arg02, ##1036831949
1c21c     01 16 06 F6 | 	mov	arg03, #1
1c220     74 FA BF FD | 	call	#__system___float_cmp
1c224     00 FA 55 F2 | 	cmps	result1, #0 wc
1c228     5C 00 90 3D |  if_ae	jmp	#LR__2671
1c22c     0F 13 02 F6 | 	mov	arg01, local01
1c230     66 E6 5E FF 
1c234     CD 14 06 F6 | 	mov	arg02, ##-1110651699
1c238     01 16 66 F6 | 	neg	arg03, #1
1c23c     58 FA BF FD | 	call	#__system___float_cmp
1c240     01 FA 55 F2 | 	cmps	result1, #1 wc
1c244     40 00 90 CD |  if_b	jmp	#LR__2671
1c248     0F 13 02 F6 | 	mov	arg01, local01
1c24c     0F 15 02 F6 | 	mov	arg02, local01
1c250     10 F6 BF FD | 	call	#__system___float_mul
1c254     FD 12 02 F6 | 	mov	arg01, result1
1c258     0F 15 02 F6 | 	mov	arg02, local01
1c25c     04 F6 BF FD | 	call	#__system___float_mul
1c260     FD 12 02 F6 | 	mov	arg01, result1
1c264     00 60 20 FF 
1c268     00 14 06 F6 | 	mov	arg02, ##1086324736
1c26c     F8 F7 BF FD | 	call	#__system___float_div
1c270     FD 14 02 F6 | 	mov	arg02, result1
1c274     0F 13 02 F6 | 	mov	arg01, local01
1c278     1F 14 E6 F4 | 	bitnot	arg02, #31
1c27c     14 F2 BF FD | 	call	#__system___float_add
1c280     FD 22 02 F6 | 	mov	local03, result1
1c284     54 00 90 FD | 	jmp	#LR__2672
1c288                 | LR__2671
1c288     0F 13 02 F6 | 	mov	arg01, local01
1c28c     7C 91 26 FF 
1c290     83 15 06 F6 | 	mov	arg02, ##1294137731
1c294     CC F5 BF FD | 	call	#__system___float_mul
1c298     FD 12 02 F6 | 	mov	arg01, result1
1c29c     00 14 06 F6 | 	mov	arg02, #0
1c2a0     88 FA BF FD | 	call	#__system___float_tointeger
1c2a4     02 FA 65 F0 | 	shl	result1, #2
1c2a8     00 00 A0 FF 
1c2ac     FD 00 48 FD | 	qrotate	##1073741824, result1
1c2b0     19 12 62 FD | 	getqy	arg01
1c2b4     09 13 52 F6 | 	abs	arg01, arg01 wc
1c2b8     1F 20 C6 C9 |  if_b	decod	local02, #31
1c2bc     00 20 06 36 |  if_ae	mov	local02, #0
1c2c0     9C F1 BF FD | 	call	#__system___float_fromuns
1c2c4     10 FB 61 F5 | 	xor	result1, local02
1c2c8     FD 12 02 F6 | 	mov	arg01, result1
1c2cc     00 40 27 FF 
1c2d0     00 14 06 F6 | 	mov	arg02, ##1317011456
1c2d4     90 F7 BF FD | 	call	#__system___float_div
1c2d8     FD 22 02 F6 | 	mov	local03, result1
1c2dc                 | LR__2672
1c2dc     11 FB 01 F6 | 	mov	result1, local03
1c2e0     A7 F0 03 F6 | 	mov	ptra, fp
1c2e4     B2 00 A0 FD | 	call	#popregs_
1c2e8                 | __system____builtin_sinf_ret
1c2e8     2D 00 64 FD | 	ret
1c2ec                 | 
1c2ec                 | __system____builtin_tanf
1c2ec     02 4A 05 F6 | 	mov	COUNT_, #2
1c2f0     A8 00 A0 FD | 	call	#pushregs_
1c2f4     09 1F 02 F6 | 	mov	local01, arg01
1c2f8     A4 FE BF FD | 	call	#__system____builtin_sinf
1c2fc     FD 20 02 F6 | 	mov	local02, result1
1c300     0F 15 02 F6 | 	mov	arg02, local01
1c304     87 E4 1F FF 
1c308     DB 13 06 F6 | 	mov	arg01, ##1070141403
1c30c     1F 14 E6 F4 | 	bitnot	arg02, #31
1c310     80 F1 BF FD | 	call	#__system___float_add
1c314     FD 12 02 F6 | 	mov	arg01, result1
1c318     84 FE BF FD | 	call	#__system____builtin_sinf
1c31c     FD 14 02 F6 | 	mov	arg02, result1
1c320     10 13 02 F6 | 	mov	arg01, local02
1c324     40 F7 BF FD | 	call	#__system___float_div
1c328     A7 F0 03 F6 | 	mov	ptra, fp
1c32c     B2 00 A0 FD | 	call	#popregs_
1c330                 | __system____builtin_tanf_ret
1c330     2D 00 64 FD | 	ret
1c334                 | 
1c334                 | __system____builtin_asinf
1c334     01 4A 05 F6 | 	mov	COUNT_, #1
1c338     A8 00 A0 FD | 	call	#pushregs_
1c33c     09 1F 02 F6 | 	mov	local01, arg01
1c340     0F 15 02 F6 | 	mov	arg02, local01
1c344     0F 13 02 F6 | 	mov	arg01, local01
1c348     18 F5 BF FD | 	call	#__system___float_mul
1c34c     FD 14 02 F6 | 	mov	arg02, result1
1c350     00 C0 1F FF 
1c354     00 12 06 F6 | 	mov	arg01, ##1065353216
1c358     1F 14 E6 F4 | 	bitnot	arg02, #31
1c35c     34 F1 BF FD | 	call	#__system___float_add
1c360     FD 12 02 F6 | 	mov	arg01, result1
1c364     24 F4 BF FD | 	call	#__system___float_sqrt
1c368     FD 14 02 F6 | 	mov	arg02, result1
1c36c     0F 13 02 F6 | 	mov	arg01, local01
1c370     58 00 B0 FD | 	call	#__system____builtin_atan2f
1c374     A7 F0 03 F6 | 	mov	ptra, fp
1c378     B2 00 A0 FD | 	call	#popregs_
1c37c                 | __system____builtin_asinf_ret
1c37c     2D 00 64 FD | 	ret
1c380                 | 
1c380                 | __system____builtin_acosf
1c380     01 4A 05 F6 | 	mov	COUNT_, #1
1c384     A8 00 A0 FD | 	call	#pushregs_
1c388     09 1F 02 F6 | 	mov	local01, arg01
1c38c     0F 15 02 F6 | 	mov	arg02, local01
1c390     0F 13 02 F6 | 	mov	arg01, local01
1c394     CC F4 BF FD | 	call	#__system___float_mul
1c398     FD 14 02 F6 | 	mov	arg02, result1
1c39c     00 C0 1F FF 
1c3a0     00 12 06 F6 | 	mov	arg01, ##1065353216
1c3a4     1F 14 E6 F4 | 	bitnot	arg02, #31
1c3a8     E8 F0 BF FD | 	call	#__system___float_add
1c3ac     FD 12 02 F6 | 	mov	arg01, result1
1c3b0     D8 F3 BF FD | 	call	#__system___float_sqrt
1c3b4     FD 12 02 F6 | 	mov	arg01, result1
1c3b8     0F 15 02 F6 | 	mov	arg02, local01
1c3bc     0C 00 B0 FD | 	call	#__system____builtin_atan2f
1c3c0     A7 F0 03 F6 | 	mov	ptra, fp
1c3c4     B2 00 A0 FD | 	call	#popregs_
1c3c8                 | __system____builtin_acosf_ret
1c3c8     2D 00 64 FD | 	ret
1c3cc                 | 
1c3cc                 | __system____builtin_atan2f
1c3cc     04 4A 05 F6 | 	mov	COUNT_, #4
1c3d0     A8 00 A0 FD | 	call	#pushregs_
1c3d4     09 1F 02 F6 | 	mov	local01, arg01
1c3d8     0A 21 02 F6 | 	mov	local02, arg02
1c3dc     0F 13 02 F6 | 	mov	arg01, local01
1c3e0     00 14 06 F6 | 	mov	arg02, #0
1c3e4     01 16 06 F6 | 	mov	arg03, #1
1c3e8     AC F8 BF FD | 	call	#__system___float_cmp
1c3ec     00 FA 0D F2 | 	cmp	result1, #0 wz
1c3f0     28 00 90 5D |  if_ne	jmp	#LR__2680
1c3f4     10 13 02 F6 | 	mov	arg01, local02
1c3f8     00 14 06 F6 | 	mov	arg02, #0
1c3fc     01 16 06 F6 | 	mov	arg03, #1
1c400     94 F8 BF FD | 	call	#__system___float_cmp
1c404     00 FA 55 F2 | 	cmps	result1, #0 wc
1c408     87 24 60 CF 
1c40c     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
1c410     DC 00 90 CD |  if_b	jmp	#LR__2681
1c414     00 FA 05 F6 | 	mov	result1, #0
1c418     D4 00 90 FD | 	jmp	#LR__2681
1c41c                 | LR__2680
1c41c     10 13 02 F6 | 	mov	arg01, local02
1c420     10 15 02 F6 | 	mov	arg02, local02
1c424     3C F4 BF FD | 	call	#__system___float_mul
1c428     FD 22 02 F6 | 	mov	local03, result1
1c42c     0F 13 02 F6 | 	mov	arg01, local01
1c430     0F 15 02 F6 | 	mov	arg02, local01
1c434     2C F4 BF FD | 	call	#__system___float_mul
1c438     FD 14 02 F6 | 	mov	arg02, result1
1c43c     11 13 02 F6 | 	mov	arg01, local03
1c440     50 F0 BF FD | 	call	#__system___float_add
1c444     FD 12 02 F6 | 	mov	arg01, result1
1c448     40 F3 BF FD | 	call	#__system___float_sqrt
1c44c     FD 22 02 F6 | 	mov	local03, result1
1c450     10 13 02 F6 | 	mov	arg01, local02
1c454     11 15 02 F6 | 	mov	arg02, local03
1c458     0C F6 BF FD | 	call	#__system___float_div
1c45c     FD 20 02 F6 | 	mov	local02, result1
1c460     0F 13 02 F6 | 	mov	arg01, local01
1c464     11 15 02 F6 | 	mov	arg02, local03
1c468     FC F5 BF FD | 	call	#__system___float_div
1c46c     FD 1E 02 F6 | 	mov	local01, result1
1c470     00 40 27 FF 
1c474     00 12 06 F6 | 	mov	arg01, ##1317011456
1c478     10 15 02 F6 | 	mov	arg02, local02
1c47c     E4 F3 BF FD | 	call	#__system___float_mul
1c480     FD 12 02 F6 | 	mov	arg01, result1
1c484     00 14 06 F6 | 	mov	arg02, #0
1c488     A0 F8 BF FD | 	call	#__system___float_tointeger
1c48c     FD 22 02 F6 | 	mov	local03, result1
1c490     00 40 27 FF 
1c494     00 12 06 F6 | 	mov	arg01, ##1317011456
1c498     0F 15 02 F6 | 	mov	arg02, local01
1c49c     C4 F3 BF FD | 	call	#__system___float_mul
1c4a0     FD 12 02 F6 | 	mov	arg01, result1
1c4a4     00 14 06 F6 | 	mov	arg02, #0
1c4a8     80 F8 BF FD | 	call	#__system___float_tointeger
1c4ac     FD 22 52 FD | 	qvector	local03, result1
1c4b0     87 24 20 FF 
1c4b4     DB 23 06 F6 | 	mov	local03, ##1078530011
1c4b8     19 12 62 FD | 	getqy	arg01
1c4bc     01 12 C6 F0 | 	sar	arg01, #1
1c4c0     09 13 52 F6 | 	abs	arg01, arg01 wc
1c4c4     1F 24 C6 C9 |  if_b	decod	local04, #31
1c4c8     00 24 06 36 |  if_ae	mov	local04, #0
1c4cc     90 EF BF FD | 	call	#__system___float_fromuns
1c4d0     12 FB 61 F5 | 	xor	result1, local04
1c4d4     FD 12 02 F6 | 	mov	arg01, result1
1c4d8     00 40 27 FF 
1c4dc     00 14 06 F6 | 	mov	arg02, ##1317011456
1c4e0     84 F5 BF FD | 	call	#__system___float_div
1c4e4     FD 14 02 F6 | 	mov	arg02, result1
1c4e8     11 13 02 F6 | 	mov	arg01, local03
1c4ec     74 F3 BF FD | 	call	#__system___float_mul
1c4f0                 | LR__2681
1c4f0     A7 F0 03 F6 | 	mov	ptra, fp
1c4f4     B2 00 A0 FD | 	call	#popregs_
1c4f8                 | __system____builtin_atan2f_ret
1c4f8     2D 00 64 FD | 	ret
1c4fc                 | 
1c4fc                 | __system____builtin_exp2f
1c4fc     04 4A 05 F6 | 	mov	COUNT_, #4
1c500     A8 00 A0 FD | 	call	#pushregs_
1c504     09 1F 02 F6 | 	mov	local01, arg01
1c508     00 7F 21 FF 
1c50c     00 14 06 F6 | 	mov	arg02, ##1123942400
1c510     01 16 66 F6 | 	neg	arg03, #1
1c514     80 F7 BF FD | 	call	#__system___float_cmp
1c518     00 FA 55 F2 | 	cmps	result1, #0 wc
1c51c     00 C0 3F 3F 
1c520     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
1c524     DC 00 90 3D |  if_ae	jmp	#LR__2691
1c528     0F 13 02 F6 | 	mov	arg01, local01
1c52c     00 7F 61 FF 
1c530     00 14 06 F6 | 	mov	arg02, ##-1023541248
1c534     01 16 06 F6 | 	mov	arg03, #1
1c538     5C F7 BF FD | 	call	#__system___float_cmp
1c53c     00 FA 55 F2 | 	cmps	result1, #0 wc
1c540     00 FA 05 C6 |  if_b	mov	result1, #0
1c544     BC 00 90 CD |  if_b	jmp	#LR__2691
1c548     0F 13 02 F6 | 	mov	arg01, local01
1c54c     00 14 06 F6 | 	mov	arg02, #0
1c550     D8 F7 BF FD | 	call	#__system___float_tointeger
1c554     FD 20 02 F6 | 	mov	local02, result1
1c558     10 13 52 F6 | 	abs	arg01, local02 wc
1c55c     1F 22 C6 C9 |  if_b	decod	local03, #31
1c560     00 22 06 36 |  if_ae	mov	local03, #0
1c564     F8 EE BF FD | 	call	#__system___float_fromuns
1c568     11 FB 61 F5 | 	xor	result1, local03
1c56c     FD 14 02 F6 | 	mov	arg02, result1
1c570     0F 13 02 F6 | 	mov	arg01, local01
1c574     1F 14 E6 F4 | 	bitnot	arg02, #31
1c578     18 EF BF FD | 	call	#__system___float_add
1c57c     FD 24 02 F6 | 	mov	local04, result1
1c580     12 13 02 F6 | 	mov	arg01, local04
1c584     00 14 06 F6 | 	mov	arg02, #0
1c588     01 16 06 F6 | 	mov	arg03, #1
1c58c     08 F7 BF FD | 	call	#__system___float_cmp
1c590     00 FA 55 F2 | 	cmps	result1, #0 wc
1c594     18 00 90 3D |  if_ae	jmp	#LR__2690
1c598     12 13 02 F6 | 	mov	arg01, local04
1c59c     00 C0 1F FF 
1c5a0     00 14 06 F6 | 	mov	arg02, ##1065353216
1c5a4     EC EE BF FD | 	call	#__system___float_add
1c5a8     FD 24 02 F6 | 	mov	local04, result1
1c5ac     01 20 86 F1 | 	sub	local02, #1
1c5b0                 | LR__2690
1c5b0     7F 20 06 F1 | 	add	local02, #127
1c5b4     17 20 66 F0 | 	shl	local02, #23
1c5b8     12 13 02 F6 | 	mov	arg01, local04
1c5bc     00 80 26 FF 
1c5c0     00 14 06 F6 | 	mov	arg02, ##1291845632
1c5c4     9C F2 BF FD | 	call	#__system___float_mul
1c5c8     FD 12 02 F6 | 	mov	arg01, result1
1c5cc     00 14 06 F6 | 	mov	arg02, #0
1c5d0     58 F7 BF FD | 	call	#__system___float_tointeger
1c5d4     FD 24 0A F6 | 	mov	local04, result1 wz
1c5d8     10 FB 01 A6 |  if_e	mov	result1, local02
1c5dc     24 00 90 AD |  if_e	jmp	#LR__2691
1c5e0     3E 24 26 F4 | 	bith	local04, #62
1c5e4     0F 24 62 FD | 	qexp	local04
1c5e8     10 13 02 F6 | 	mov	arg01, local02
1c5ec     18 14 62 FD | 	getqx	arg02
1c5f0     01 14 06 F1 | 	add	arg02, #1
1c5f4     01 14 46 F0 | 	shr	arg02, #1
1c5f8     00 80 1F FF 
1c5fc     00 14 06 F1 | 	add	arg02, ##1056964608
1c600     60 F2 BF FD | 	call	#__system___float_mul
1c604                 | LR__2691
1c604     A7 F0 03 F6 | 	mov	ptra, fp
1c608     B2 00 A0 FD | 	call	#popregs_
1c60c                 | __system____builtin_exp2f_ret
1c60c     2D 00 64 FD | 	ret
1c610                 | 
1c610                 | __system____builtin_log2f
1c610     06 4A 05 F6 | 	mov	COUNT_, #6
1c614     A8 00 A0 FD | 	call	#pushregs_
1c618     09 1F 02 F6 | 	mov	local01, arg01
1c61c     09 21 0A F6 | 	mov	local02, arg01 wz
1c620     00 00 40 5F 
1c624     00 20 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
1c628     00 40 00 AF 
1c62c     00 FA 65 A6 |  if_e	neg	result1, ##8388608
1c630     08 01 90 AD |  if_e	jmp	#LR__2704
1c634     00 20 56 F2 | 	cmps	local02, #0 wc
1c638     00 E0 3F CF 
1c63c     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
1c640     F8 00 90 CD |  if_b	jmp	#LR__2704
1c644     0F 13 02 F6 | 	mov	arg01, local01
1c648     00 90 20 FF 
1c64c     00 14 06 F6 | 	mov	arg02, ##1092616192
1c650     01 16 06 F6 | 	mov	arg03, #1
1c654     40 F6 BF FD | 	call	#__system___float_cmp
1c658     00 FA 0D F2 | 	cmp	result1, #0 wz
1c65c     4D 2A 20 AF 
1c660     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
1c664     D4 00 90 AD |  if_e	jmp	#LR__2704
1c668     0F 13 02 F6 | 	mov	arg01, local01
1c66c     FC 16 20 FF 
1c670     54 14 06 F6 | 	mov	arg02, ##1076754516
1c674     01 16 06 F6 | 	mov	arg03, #1
1c678     1C F6 BF FD | 	call	#__system___float_cmp
1c67c     00 FA 0D F2 | 	cmp	result1, #0 wz
1c680     55 DC 1F AF 
1c684     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
1c688     B0 00 90 AD |  if_e	jmp	#LR__2704
1c68c     10 23 02 F6 | 	mov	local03, local02
1c690     17 22 46 F0 | 	shr	local03, #23
1c694     11 23 E2 F8 | 	getbyte	local03, local03, #0
1c698     17 21 06 F4 | 	bitl	local02, #279
1c69c     10 25 02 F6 | 	mov	local04, local02
1c6a0     FF 22 0E F2 | 	cmp	local03, #255 wz
1c6a4     1C 00 90 5D |  if_ne	jmp	#LR__2700
1c6a8     00 24 0E F2 | 	cmp	local04, #0 wz
1c6ac     00 C0 3F 5F 
1c6b0     00 26 06 56 |  if_ne	mov	local05, ##2139095040
1c6b4     00 E0 3F AF 
1c6b8     00 26 06 A6 |  if_e	mov	local05, ##2143289344
1c6bc     13 FB 01 F6 | 	mov	result1, local05
1c6c0     78 00 90 FD | 	jmp	#LR__2704
1c6c4                 | LR__2700
1c6c4     00 22 0E F2 | 	cmp	local03, #0 wz
1c6c8     17 24 26 54 |  if_ne	bith	local04, #23
1c6cc     7F 22 86 51 |  if_ne	sub	local03, #127
1c6d0     28 00 90 5D |  if_ne	jmp	#LR__2703
1c6d4     00 24 0E F2 | 	cmp	local04, #0 wz
1c6d8     00 40 00 AF 
1c6dc     00 FA 65 A6 |  if_e	neg	result1, ##8388608
1c6e0     58 00 90 AD |  if_e	jmp	#LR__2704
1c6e4     7E 22 66 F6 | 	neg	local03, #126
1c6e8     97 08 48 FB | 	callpa	#(@LR__2702-@LR__2701)>>2,fcache_load_ptr_
1c6ec                 | LR__2701
1c6ec     17 24 2E F4 | 	testbn	local04, #23 wz
1c6f0     01 24 66 A0 |  if_e	shl	local04, #1
1c6f4     01 22 06 A1 |  if_e	add	local03, #1
1c6f8     F0 FF 9F AD |  if_e	jmp	#LR__2701
1c6fc                 | LR__2702
1c6fc                 | LR__2703
1c6fc     0E 24 62 FD | 	qlog	local04
1c700     01 22 86 F1 | 	sub	local03, #1
1c704     11 13 52 F6 | 	abs	arg01, local03 wc
1c708     1F 28 C6 C9 |  if_b	decod	local06, #31
1c70c     00 28 06 36 |  if_ae	mov	local06, #0
1c710     18 26 62 FD | 	getqx	local05
1c714     9B 26 06 F4 | 	bitl	local05, #155
1c718     08 26 06 F1 | 	add	local05, #8
1c71c     04 26 46 F0 | 	shr	local05, #4
1c720     00 C0 1F FF 
1c724     00 26 06 F1 | 	add	local05, ##1065353216
1c728     34 ED BF FD | 	call	#__system___float_fromuns
1c72c     14 FB 61 F5 | 	xor	result1, local06
1c730     FD 14 02 F6 | 	mov	arg02, result1
1c734     13 13 02 F6 | 	mov	arg01, local05
1c738     58 ED BF FD | 	call	#__system___float_add
1c73c                 | LR__2704
1c73c     A7 F0 03 F6 | 	mov	ptra, fp
1c740     B2 00 A0 FD | 	call	#popregs_
1c744                 | __system____builtin_log2f_ret
1c744     2D 00 64 FD | 	ret
1c748                 | 
1c748                 | __system____builtin_powf
1c748     04 4A 05 F6 | 	mov	COUNT_, #4
1c74c     A8 00 A0 FD | 	call	#pushregs_
1c750     09 1F 02 F6 | 	mov	local01, arg01
1c754     0A 21 02 F6 | 	mov	local02, arg02
1c758     10 13 02 F6 | 	mov	arg01, local02
1c75c     00 14 06 F6 | 	mov	arg02, #0
1c760     C8 F5 BF FD | 	call	#__system___float_tointeger
1c764     FD 22 02 F6 | 	mov	local03, result1
1c768     11 13 52 F6 | 	abs	arg01, local03 wc
1c76c     1F 24 C6 C9 |  if_b	decod	local04, #31
1c770     00 24 06 36 |  if_ae	mov	local04, #0
1c774     E8 EC BF FD | 	call	#__system___float_fromuns
1c778     12 FB 61 F5 | 	xor	result1, local04
1c77c     FD 12 02 F6 | 	mov	arg01, result1
1c780     10 15 02 F6 | 	mov	arg02, local02
1c784     01 16 06 F6 | 	mov	arg03, #1
1c788     0C F5 BF FD | 	call	#__system___float_cmp
1c78c     00 FA 0D F2 | 	cmp	result1, #0 wz
1c790     18 00 90 5D |  if_ne	jmp	#LR__2710
1c794     00 C0 1F FF 
1c798     00 12 06 F6 | 	mov	arg01, ##1065353216
1c79c     0F 15 02 F6 | 	mov	arg02, local01
1c7a0     11 17 02 F6 | 	mov	arg03, local03
1c7a4     68 00 B0 FD | 	call	#__system___float_pow_n
1c7a8     58 00 90 FD | 	jmp	#LR__2711
1c7ac                 | LR__2710
1c7ac     0F 13 02 F6 | 	mov	arg01, local01
1c7b0     00 14 06 F6 | 	mov	arg02, #0
1c7b4     01 16 06 F6 | 	mov	arg03, #1
1c7b8     DC F4 BF FD | 	call	#__system___float_cmp
1c7bc     00 FA 55 F2 | 	cmps	result1, #0 wc
1c7c0     00 E0 3F CF 
1c7c4     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
1c7c8     38 00 90 CD |  if_b	jmp	#LR__2711
1c7cc     0F 13 02 F6 | 	mov	arg01, local01
1c7d0     00 14 06 F6 | 	mov	arg02, #0
1c7d4     01 16 06 F6 | 	mov	arg03, #1
1c7d8     BC F4 BF FD | 	call	#__system___float_cmp
1c7dc     00 FA 0D F2 | 	cmp	result1, #0 wz
1c7e0     00 FA 05 A6 |  if_e	mov	result1, #0
1c7e4     1C 00 90 AD |  if_e	jmp	#LR__2711
1c7e8     0F 13 02 F6 | 	mov	arg01, local01
1c7ec     20 FE BF FD | 	call	#__system____builtin_log2f
1c7f0     FD 12 02 F6 | 	mov	arg01, result1
1c7f4     10 15 02 F6 | 	mov	arg02, local02
1c7f8     68 F0 BF FD | 	call	#__system___float_mul
1c7fc     FD 12 02 F6 | 	mov	arg01, result1
1c800     F8 FC BF FD | 	call	#__system____builtin_exp2f
1c804                 | LR__2711
1c804     A7 F0 03 F6 | 	mov	ptra, fp
1c808     B2 00 A0 FD | 	call	#popregs_
1c80c                 | __system____builtin_powf_ret
1c80c     2D 00 64 FD | 	ret
1c810                 | 
1c810                 | __system___float_pow_n
1c810     05 4A 05 F6 | 	mov	COUNT_, #5
1c814     A8 00 A0 FD | 	call	#pushregs_
1c818     09 1F 02 F6 | 	mov	local01, arg01
1c81c     0A 21 02 F6 | 	mov	local02, arg02
1c820     0B 23 02 F6 | 	mov	local03, arg03
1c824     00 22 56 F2 | 	cmps	local03, #0 wc
1c828     18 00 90 3D |  if_ae	jmp	#LR__2720
1c82c     01 24 06 F6 | 	mov	local04, #1
1c830     11 23 62 F6 | 	neg	local03, local03
1c834     00 22 56 F2 | 	cmps	local03, #0 wc
1c838     00 FA 05 C6 |  if_b	mov	result1, #0
1c83c     94 00 90 CD |  if_b	jmp	#LR__2728
1c840     04 00 90 FD | 	jmp	#LR__2721
1c844                 | LR__2720
1c844     00 24 06 F6 | 	mov	local04, #0
1c848                 | LR__2721
1c848     00 C0 1F FF 
1c84c     00 26 06 F6 | 	mov	local05, ##1065353216
1c850                 | LR__2722
1c850     01 22 56 F2 | 	cmps	local03, #1 wc
1c854     30 00 90 CD |  if_b	jmp	#LR__2724
1c858     01 22 CE F7 | 	test	local03, #1 wz
1c85c     10 00 90 AD |  if_e	jmp	#LR__2723
1c860     13 13 02 F6 | 	mov	arg01, local05
1c864     10 15 02 F6 | 	mov	arg02, local02
1c868     F8 EF BF FD | 	call	#__system___float_mul
1c86c     FD 26 02 F6 | 	mov	local05, result1
1c870                 | LR__2723
1c870     01 22 C6 F0 | 	sar	local03, #1
1c874     10 13 02 F6 | 	mov	arg01, local02
1c878     10 15 02 F6 | 	mov	arg02, local02
1c87c     E4 EF BF FD | 	call	#__system___float_mul
1c880     FD 20 02 F6 | 	mov	local02, result1
1c884     C8 FF 9F FD | 	jmp	#LR__2722
1c888                 | LR__2724
1c888     00 24 0E F2 | 	cmp	local04, #0 wz
1c88c     14 00 90 AD |  if_e	jmp	#LR__2725
1c890     0F 13 02 F6 | 	mov	arg01, local01
1c894     13 15 02 F6 | 	mov	arg02, local05
1c898     CC F1 BF FD | 	call	#__system___float_div
1c89c     FD 26 02 F6 | 	mov	local05, result1
1c8a0     2C 00 90 FD | 	jmp	#LR__2727
1c8a4                 | LR__2725
1c8a4     0F 13 02 F6 | 	mov	arg01, local01
1c8a8     00 C0 1F FF 
1c8ac     00 14 06 F6 | 	mov	arg02, ##1065353216
1c8b0     01 16 06 F6 | 	mov	arg03, #1
1c8b4     E0 F3 BF FD | 	call	#__system___float_cmp
1c8b8     00 FA 0D F2 | 	cmp	result1, #0 wz
1c8bc     10 00 90 AD |  if_e	jmp	#LR__2726
1c8c0     0F 13 02 F6 | 	mov	arg01, local01
1c8c4     13 15 02 F6 | 	mov	arg02, local05
1c8c8     98 EF BF FD | 	call	#__system___float_mul
1c8cc     FD 26 02 F6 | 	mov	local05, result1
1c8d0                 | LR__2726
1c8d0                 | LR__2727
1c8d0     13 FB 01 F6 | 	mov	result1, local05
1c8d4                 | LR__2728
1c8d4     A7 F0 03 F6 | 	mov	ptra, fp
1c8d8     B2 00 A0 FD | 	call	#popregs_
1c8dc                 | __system___float_pow_n_ret
1c8dc     2D 00 64 FD | 	ret
1c8e0                 | 
1c8e0                 | __system___gc_ptrs
1c8e0     EC 00 02 F6 | 	mov	_var01, __heap_ptr
1c8e4     00 03 02 F6 | 	mov	_var02, _var01
1c8e8     76 01 00 FF 
1c8ec     F8 03 06 F1 | 	add	_var02, ##191992
1c8f0     00 FD 09 FB | 	rdlong	result2, _var01 wz
1c8f4     74 00 90 5D |  if_ne	jmp	#LR__2730
1c8f8     01 FD 01 F6 | 	mov	result2, _var02
1c8fc     00 FD 81 F1 | 	sub	result2, _var01
1c900     00 03 58 FC | 	wrword	#1, _var01
1c904     00 FB 01 F6 | 	mov	result1, _var01
1c908     02 FA 05 F1 | 	add	result1, #2
1c90c     36 00 80 FF 
1c910     FD 20 59 FC | 	wrword	##27792, result1
1c914     00 FB 01 F6 | 	mov	result1, _var01
1c918     04 FA 05 F1 | 	add	result1, #4
1c91c     FD 00 58 FC | 	wrword	#0, result1
1c920     00 FB 01 F6 | 	mov	result1, _var01
1c924     06 FA 05 F1 | 	add	result1, #6
1c928     FD 02 58 FC | 	wrword	#1, result1
1c92c     10 00 06 F1 | 	add	_var01, #16
1c930     FE FC 51 F6 | 	abs	result2, result2 wc
1c934     04 FC 45 F0 | 	shr	result2, #4
1c938     FE FC 81 F6 | 	negc	result2, result2
1c93c     00 FD 51 FC | 	wrword	result2, _var01
1c940     00 FD 01 F6 | 	mov	result2, _var01
1c944     02 FC 05 F1 | 	add	result2, #2
1c948     36 00 80 FF 
1c94c     FE 1E 59 FC | 	wrword	##27791, result2
1c950     00 FD 01 F6 | 	mov	result2, _var01
1c954     04 FC 05 F1 | 	add	result2, #4
1c958     FE 00 58 FC | 	wrword	#0, result2
1c95c     00 FD 01 F6 | 	mov	result2, _var01
1c960     06 FC 05 F1 | 	add	result2, #6
1c964     FE 00 58 FC | 	wrword	#0, result2
1c968     10 00 86 F1 | 	sub	_var01, #16
1c96c                 | LR__2730
1c96c     00 FB 01 F6 | 	mov	result1, _var01
1c970     01 FD 01 F6 | 	mov	result2, _var02
1c974                 | __system___gc_ptrs_ret
1c974     2D 00 64 FD | 	ret
1c978                 | 
1c978                 | __system___gc_tryalloc
1c978     0B 4A 05 F6 | 	mov	COUNT_, #11
1c97c     A8 00 A0 FD | 	call	#pushregs_
1c980     09 1F 02 F6 | 	mov	local01, arg01
1c984     0A 21 02 F6 | 	mov	local02, arg02
1c988     54 FF BF FD | 	call	#__system___gc_ptrs
1c98c     FD 22 02 F6 | 	mov	local03, result1
1c990     FE 24 02 F6 | 	mov	local04, result2
1c994     11 27 02 F6 | 	mov	local05, local03
1c998     00 28 06 F6 | 	mov	local06, #0
1c99c     97 1E 48 FB | 	callpa	#(@LR__2741-@LR__2740)>>2,fcache_load_ptr_
1c9a0                 | LR__2740
1c9a0     13 2B 02 F6 | 	mov	local07, local05
1c9a4     06 26 06 F1 | 	add	local05, #6
1c9a8     13 15 EA FA | 	rdword	arg02, local05 wz
1c9ac     11 13 02 F6 | 	mov	arg01, local03
1c9b0     00 FA 05 A6 |  if_e	mov	result1, #0
1c9b4     04 14 66 50 |  if_ne	shl	arg02, #4
1c9b8     0A 13 02 51 |  if_ne	add	arg01, arg02
1c9bc     09 FB 01 56 |  if_ne	mov	result1, arg01
1c9c0     FD 26 0A F6 | 	mov	local05, result1 wz
1c9c4     13 29 E2 5A |  if_ne	rdword	local06, local05
1c9c8     00 26 0E F2 | 	cmp	local05, #0 wz
1c9cc     12 27 52 52 |  if_ne	cmps	local05, local04 wc
1c9d0     08 00 90 1D |  if_a	jmp	#LR__2742
1c9d4     14 1F 5A 52 |  if_ne	cmps	local01, local06 wcz
1c9d8     C4 FF 9F 1D |  if_a	jmp	#LR__2740
1c9dc                 | LR__2741
1c9dc                 | LR__2742
1c9dc     00 26 0E F2 | 	cmp	local05, #0 wz
1c9e0     13 FB 01 A6 |  if_e	mov	result1, local05
1c9e4     3C 01 90 AD |  if_e	jmp	#LR__2745
1c9e8     13 FD 01 F6 | 	mov	result2, local05
1c9ec     06 FC 05 F1 | 	add	result2, #6
1c9f0     FE 2C E2 FA | 	rdword	local08, result2
1c9f4     14 1F 52 F2 | 	cmps	local01, local06 wc
1c9f8     C0 00 90 3D |  if_ae	jmp	#LR__2744
1c9fc     13 1F 52 FC | 	wrword	local01, local05
1ca00     13 13 02 F6 | 	mov	arg01, local05
1ca04     0F 2D 02 F6 | 	mov	local08, local01
1ca08     04 2C 66 F0 | 	shl	local08, #4
1ca0c     16 13 02 F1 | 	add	arg01, local08
1ca10     0F 29 82 F1 | 	sub	local06, local01
1ca14     09 29 52 FC | 	wrword	local06, arg01
1ca18     09 2D 02 F6 | 	mov	local08, arg01
1ca1c     02 2C 06 F1 | 	add	local08, #2
1ca20     36 00 80 FF 
1ca24     16 1F 59 FC | 	wrword	##27791, local08
1ca28     13 15 0A F6 | 	mov	arg02, local05 wz
1ca2c     00 FA 05 A6 |  if_e	mov	result1, #0
1ca30     11 15 82 51 |  if_ne	sub	arg02, local03
1ca34     04 14 46 50 |  if_ne	shr	arg02, #4
1ca38     0A FB 01 56 |  if_ne	mov	result1, arg02
1ca3c     09 2D 02 F6 | 	mov	local08, arg01
1ca40     04 2C 06 F1 | 	add	local08, #4
1ca44     16 FB 51 FC | 	wrword	result1, local08
1ca48     13 2D 02 F6 | 	mov	local08, local05
1ca4c     06 2C 06 F1 | 	add	local08, #6
1ca50     09 15 02 F6 | 	mov	arg02, arg01
1ca54     16 2D E2 FA | 	rdword	local08, local08
1ca58     06 14 06 F1 | 	add	arg02, #6
1ca5c     0A 2D 52 FC | 	wrword	local08, arg02
1ca60     09 2F 02 F6 | 	mov	local09, arg01
1ca64     17 15 0A F6 | 	mov	arg02, local09 wz
1ca68     00 FA 05 A6 |  if_e	mov	result1, #0
1ca6c     11 15 82 51 |  if_ne	sub	arg02, local03
1ca70     04 14 46 50 |  if_ne	shr	arg02, #4
1ca74     0A FB 01 56 |  if_ne	mov	result1, arg02
1ca78     FD 2C 02 F6 | 	mov	local08, result1
1ca7c     09 31 EA FA | 	rdword	local10, arg01 wz
1ca80     00 FA 05 A6 |  if_e	mov	result1, #0
1ca84     04 30 66 50 |  if_ne	shl	local10, #4
1ca88     18 13 02 51 |  if_ne	add	arg01, local10
1ca8c     09 FB 01 56 |  if_ne	mov	result1, arg01
1ca90     FD 32 0A F6 | 	mov	local11, result1 wz
1ca94     24 00 90 AD |  if_e	jmp	#LR__2743
1ca98     12 33 52 F2 | 	cmps	local11, local04 wc
1ca9c     1C 00 90 3D |  if_ae	jmp	#LR__2743
1caa0     17 15 0A F6 | 	mov	arg02, local09 wz
1caa4     00 FA 05 A6 |  if_e	mov	result1, #0
1caa8     11 15 82 51 |  if_ne	sub	arg02, local03
1caac     04 14 46 50 |  if_ne	shr	arg02, #4
1cab0     0A FB 01 56 |  if_ne	mov	result1, arg02
1cab4     04 32 06 F1 | 	add	local11, #4
1cab8     19 FB 51 FC | 	wrword	result1, local11
1cabc                 | LR__2743
1cabc                 | LR__2744
1cabc     06 2A 06 F1 | 	add	local07, #6
1cac0     15 2D 52 FC | 	wrword	local08, local07
1cac4     36 00 00 FF 
1cac8     80 2E 06 F6 | 	mov	local09, ##27776
1cacc     10 2F 42 F5 | 	or	local09, local02
1cad0     00 FA 05 F6 | 	mov	result1, #0
1cad4     01 FA 61 FD | 	cogid	result1
1cad8     FD 2E 42 F5 | 	or	local09, result1
1cadc     13 33 02 F6 | 	mov	local11, local05
1cae0     02 32 06 F1 | 	add	local11, #2
1cae4     19 2F 52 FC | 	wrword	local09, local11
1cae8     11 2F 02 F6 | 	mov	local09, local03
1caec     08 2E 06 F1 | 	add	local09, #8
1caf0     13 33 02 F6 | 	mov	local11, local05
1caf4     17 2F E2 FA | 	rdword	local09, local09
1caf8     06 32 06 F1 | 	add	local11, #6
1cafc     19 2F 52 FC | 	wrword	local09, local11
1cb00     13 15 0A F6 | 	mov	arg02, local05 wz
1cb04     00 FA 05 A6 |  if_e	mov	result1, #0
1cb08     11 15 82 51 |  if_ne	sub	arg02, local03
1cb0c     04 14 46 50 |  if_ne	shr	arg02, #4
1cb10     0A FB 01 56 |  if_ne	mov	result1, arg02
1cb14     08 22 06 F1 | 	add	local03, #8
1cb18     11 FB 51 FC | 	wrword	result1, local03
1cb1c     08 26 06 F1 | 	add	local05, #8
1cb20     13 FB 01 F6 | 	mov	result1, local05
1cb24                 | LR__2745
1cb24     A7 F0 03 F6 | 	mov	ptra, fp
1cb28     B2 00 A0 FD | 	call	#popregs_
1cb2c                 | __system___gc_tryalloc_ret
1cb2c     2D 00 64 FD | 	ret
1cb30                 | 
1cb30                 | __system___gc_alloc_managed
1cb30     01 4A 05 F6 | 	mov	COUNT_, #1
1cb34     A8 00 A0 FD | 	call	#pushregs_
1cb38     09 1F 02 F6 | 	mov	local01, arg01
1cb3c     00 14 06 F6 | 	mov	arg02, #0
1cb40     1C 00 B0 FD | 	call	#__system___gc_doalloc
1cb44     FD 14 0A F6 | 	mov	arg02, result1 wz
1cb48     01 1E 56 A2 |  if_e	cmps	local01, #1 wc
1cb4c     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
1cb50     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
1cb54     A7 F0 03 F6 | 	mov	ptra, fp
1cb58     B2 00 A0 FD | 	call	#popregs_
1cb5c                 | __system___gc_alloc_managed_ret
1cb5c     2D 00 64 FD | 	ret
1cb60                 | 
1cb60                 | __system___gc_doalloc
1cb60     06 4A 05 F6 | 	mov	COUNT_, #6
1cb64     A8 00 A0 FD | 	call	#pushregs_
1cb68     09 1F 0A F6 | 	mov	local01, arg01 wz
1cb6c     0A 21 02 F6 | 	mov	local02, arg02
1cb70     00 FA 05 A6 |  if_e	mov	result1, #0
1cb74     8C 00 90 AD |  if_e	jmp	#LR__2757
1cb78     17 1E 06 F1 | 	add	local01, #23
1cb7c     0F 1E 26 F5 | 	andn	local01, #15
1cb80     04 1E 46 F0 | 	shr	local01, #4
1cb84     1C E8 05 F1 | 	add	ptr___system__dat__, #28
1cb88     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
1cb8c     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
1cb90     E4 C1 BF FD | 	call	#__system___lockmem
1cb94     0F 13 02 F6 | 	mov	arg01, local01
1cb98     10 15 02 F6 | 	mov	arg02, local02
1cb9c     D8 FD BF FD | 	call	#__system___gc_tryalloc
1cba0     FD 22 0A F6 | 	mov	local03, result1 wz
1cba4     14 00 90 5D |  if_ne	jmp	#LR__2750
1cba8     70 03 B0 FD | 	call	#__system___gc_docollect
1cbac     0F 13 02 F6 | 	mov	arg01, local01
1cbb0     10 15 02 F6 | 	mov	arg02, local02
1cbb4     C0 FD BF FD | 	call	#__system___gc_tryalloc
1cbb8     FD 22 02 F6 | 	mov	local03, result1
1cbbc                 | LR__2750
1cbbc     1C E8 05 F1 | 	add	ptr___system__dat__, #28
1cbc0     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
1cbc4     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
1cbc8     09 01 68 FC | 	wrlong	#0, arg01
1cbcc     00 22 0E F2 | 	cmp	local03, #0 wz
1cbd0     2C 00 90 AD |  if_e	jmp	#LR__2756
1cbd4     04 1E 66 F0 | 	shl	local01, #4
1cbd8     08 1E 86 F1 | 	sub	local01, #8
1cbdc     0F 25 52 F6 | 	abs	local04, local01 wc
1cbe0     02 24 46 F0 | 	shr	local04, #2
1cbe4     12 27 8A F6 | 	negc	local05, local04 wz
1cbe8     11 29 02 F6 | 	mov	local06, local03
1cbec     10 00 90 AD |  if_e	jmp	#LR__2755
1cbf0     97 06 48 FB | 	callpa	#(@LR__2753-@LR__2751)>>2,fcache_load_ptr_
1cbf4                 | LR__2751
1cbf4     13 05 D8 FC | 	rep	@LR__2754, local05
1cbf8                 | LR__2752
1cbf8     14 01 68 FC | 	wrlong	#0, local06
1cbfc     04 28 06 F1 | 	add	local06, #4
1cc00                 | LR__2753
1cc00                 | LR__2754
1cc00                 | LR__2755
1cc00                 | LR__2756
1cc00     11 FB 01 F6 | 	mov	result1, local03
1cc04                 | LR__2757
1cc04     A7 F0 03 F6 | 	mov	ptra, fp
1cc08     B2 00 A0 FD | 	call	#popregs_
1cc0c                 | __system___gc_doalloc_ret
1cc0c     2D 00 64 FD | 	ret
1cc10                 | 
1cc10                 | __system___gc_isvalidptr
1cc10     F8 16 06 F4 | 	bitl	arg03, #248
1cc14     08 16 86 F1 | 	sub	arg03, #8
1cc18     09 17 52 F2 | 	cmps	arg03, arg01 wc
1cc1c     08 00 90 CD |  if_b	jmp	#LR__2760
1cc20     0A 17 52 F2 | 	cmps	arg03, arg02 wc
1cc24     08 00 90 CD |  if_b	jmp	#LR__2761
1cc28                 | LR__2760
1cc28     00 FA 05 F6 | 	mov	result1, #0
1cc2c     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
1cc30                 | LR__2761
1cc30     0B 01 02 F6 | 	mov	_var01, arg03
1cc34     09 01 62 F5 | 	xor	_var01, arg01
1cc38     0F 00 CE F7 | 	test	_var01, #15 wz
1cc3c     00 FA 05 56 |  if_ne	mov	result1, #0
1cc40     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
1cc44     0B 01 02 F6 | 	mov	_var01, arg03
1cc48     02 00 06 F1 | 	add	_var01, #2
1cc4c     00 01 E2 FA | 	rdword	_var01, _var01
1cc50     7F 00 00 FF 
1cc54     C0 01 06 F5 | 	and	_var01, ##65472
1cc58     36 00 00 FF 
1cc5c     80 00 0E F2 | 	cmp	_var01, ##27776 wz
1cc60     00 FA 05 56 |  if_ne	mov	result1, #0
1cc64     0B FB 01 A6 |  if_e	mov	result1, arg03
1cc68                 | __system___gc_isvalidptr_ret
1cc68     2D 00 64 FD | 	ret
1cc6c                 | 
1cc6c                 | __system___gc_free
1cc6c     09 17 02 F6 | 	mov	arg03, arg01
1cc70     6C FC BF FD | 	call	#__system___gc_ptrs
1cc74     FD 12 02 F6 | 	mov	arg01, result1
1cc78     FE 14 02 F6 | 	mov	arg02, result2
1cc7c     90 FF BF FD | 	call	#__system___gc_isvalidptr
1cc80     FD 14 0A F6 | 	mov	arg02, result1 wz
1cc84     28 00 90 AD |  if_e	jmp	#LR__2770
1cc88     1C E8 05 F1 | 	add	ptr___system__dat__, #28
1cc8c     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
1cc90     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
1cc94     E0 C0 BF FD | 	call	#__system___lockmem
1cc98     0A 13 02 F6 | 	mov	arg01, arg02
1cc9c     14 00 B0 FD | 	call	#__system___gc_dofree
1cca0     1C E8 05 F1 | 	add	ptr___system__dat__, #28
1cca4     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
1cca8     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
1ccac     09 01 68 FC | 	wrlong	#0, arg01
1ccb0                 | LR__2770
1ccb0                 | __system___gc_free_ret
1ccb0     2D 00 64 FD | 	ret
1ccb4                 | 
1ccb4                 | __system___gc_dofree
1ccb4     06 4A 05 F6 | 	mov	COUNT_, #6
1ccb8     A8 00 A0 FD | 	call	#pushregs_
1ccbc     09 1F 02 F6 | 	mov	local01, arg01
1ccc0     1C FC BF FD | 	call	#__system___gc_ptrs
1ccc4     FD 20 02 F6 | 	mov	local02, result1
1ccc8     FE 22 02 F6 | 	mov	local03, result2
1cccc     0F 15 02 F6 | 	mov	arg02, local01
1ccd0     02 14 06 F1 | 	add	arg02, #2
1ccd4     36 00 80 FF 
1ccd8     0A 1F 59 FC | 	wrword	##27791, arg02
1ccdc     0F 25 02 F6 | 	mov	local04, local01
1cce0     0F 13 02 F6 | 	mov	arg01, local01
1cce4     09 27 EA FA | 	rdword	local05, arg01 wz
1cce8     00 FA 05 A6 |  if_e	mov	result1, #0
1ccec     04 26 66 50 |  if_ne	shl	local05, #4
1ccf0     13 13 02 51 |  if_ne	add	arg01, local05
1ccf4     09 FB 01 56 |  if_ne	mov	result1, arg01
1ccf8     FD 28 02 F6 | 	mov	local06, result1
1ccfc     97 24 48 FB | 	callpa	#(@LR__2781-@LR__2780)>>2,fcache_load_ptr_
1cd00                 | LR__2780
1cd00     04 24 06 F1 | 	add	local04, #4
1cd04     12 15 EA FA | 	rdword	arg02, local04 wz
1cd08     10 13 02 F6 | 	mov	arg01, local02
1cd0c     00 FA 05 A6 |  if_e	mov	result1, #0
1cd10     04 14 66 50 |  if_ne	shl	arg02, #4
1cd14     0A 13 02 51 |  if_ne	add	arg01, arg02
1cd18     09 FB 01 56 |  if_ne	mov	result1, arg01
1cd1c     FD 24 0A F6 | 	mov	local04, result1 wz
1cd20     24 00 90 AD |  if_e	jmp	#LR__2782
1cd24     12 13 02 F6 | 	mov	arg01, local04
1cd28     00 FA 05 F6 | 	mov	result1, #0
1cd2c     02 12 06 F1 | 	add	arg01, #2
1cd30     09 13 E2 FA | 	rdword	arg01, arg01
1cd34     36 00 00 FF 
1cd38     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
1cd3c     01 FA 65 A6 |  if_e	neg	result1, #1
1cd40     00 FA 0D F2 | 	cmp	result1, #0 wz
1cd44     B8 FF 9F AD |  if_e	jmp	#LR__2780
1cd48                 | LR__2781
1cd48                 | LR__2782
1cd48     00 24 0E F2 | 	cmp	local04, #0 wz
1cd4c     10 25 02 A6 |  if_e	mov	local04, local02
1cd50     12 15 02 F6 | 	mov	arg02, local04
1cd54     06 14 06 F1 | 	add	arg02, #6
1cd58     0F 13 02 F6 | 	mov	arg01, local01
1cd5c     0A 15 E2 FA | 	rdword	arg02, arg02
1cd60     06 12 06 F1 | 	add	arg01, #6
1cd64     09 15 52 FC | 	wrword	arg02, arg01
1cd68     0F 15 0A F6 | 	mov	arg02, local01 wz
1cd6c     00 FA 05 A6 |  if_e	mov	result1, #0
1cd70     10 15 82 51 |  if_ne	sub	arg02, local02
1cd74     04 14 46 50 |  if_ne	shr	arg02, #4
1cd78     0A FB 01 56 |  if_ne	mov	result1, arg02
1cd7c     12 15 02 F6 | 	mov	arg02, local04
1cd80     06 14 06 F1 | 	add	arg02, #6
1cd84     0A FB 51 FC | 	wrword	result1, arg02
1cd88     10 25 0A F2 | 	cmp	local04, local02 wz
1cd8c     A4 00 90 AD |  if_e	jmp	#LR__2785
1cd90     12 13 02 F6 | 	mov	arg01, local04
1cd94     09 27 EA FA | 	rdword	local05, arg01 wz
1cd98     00 FA 05 A6 |  if_e	mov	result1, #0
1cd9c     04 26 66 50 |  if_ne	shl	local05, #4
1cda0     13 13 02 51 |  if_ne	add	arg01, local05
1cda4     09 FB 01 56 |  if_ne	mov	result1, arg01
1cda8     0F FB 09 F2 | 	cmp	result1, local01 wz
1cdac     84 00 90 5D |  if_ne	jmp	#LR__2784
1cdb0     12 29 E2 FA | 	rdword	local06, local04
1cdb4     0F 15 E2 FA | 	rdword	arg02, local01
1cdb8     0A 29 02 F1 | 	add	local06, arg02
1cdbc     12 29 52 FC | 	wrword	local06, local04
1cdc0     0F 29 02 F6 | 	mov	local06, local01
1cdc4     02 28 06 F1 | 	add	local06, #2
1cdc8     14 01 58 FC | 	wrword	#0, local06
1cdcc     0F 13 02 F6 | 	mov	arg01, local01
1cdd0     09 27 EA FA | 	rdword	local05, arg01 wz
1cdd4     00 FA 05 A6 |  if_e	mov	result1, #0
1cdd8     04 26 66 50 |  if_ne	shl	local05, #4
1cddc     13 13 02 51 |  if_ne	add	arg01, local05
1cde0     09 FB 01 56 |  if_ne	mov	result1, arg01
1cde4     FD 28 02 F6 | 	mov	local06, result1
1cde8     11 29 52 F2 | 	cmps	local06, local03 wc
1cdec     20 00 90 3D |  if_ae	jmp	#LR__2783
1cdf0     12 15 0A F6 | 	mov	arg02, local04 wz
1cdf4     00 FA 05 A6 |  if_e	mov	result1, #0
1cdf8     10 15 82 51 |  if_ne	sub	arg02, local02
1cdfc     04 14 46 50 |  if_ne	shr	arg02, #4
1ce00     0A FB 01 56 |  if_ne	mov	result1, arg02
1ce04     14 15 02 F6 | 	mov	arg02, local06
1ce08     04 14 06 F1 | 	add	arg02, #4
1ce0c     0A FB 51 FC | 	wrword	result1, arg02
1ce10                 | LR__2783
1ce10     0F 15 02 F6 | 	mov	arg02, local01
1ce14     06 14 06 F1 | 	add	arg02, #6
1ce18     12 FD 01 F6 | 	mov	result2, local04
1ce1c     0A 15 E2 FA | 	rdword	arg02, arg02
1ce20     06 FC 05 F1 | 	add	result2, #6
1ce24     FE 14 52 FC | 	wrword	arg02, result2
1ce28     06 1E 06 F1 | 	add	local01, #6
1ce2c     0F 01 58 FC | 	wrword	#0, local01
1ce30     12 1F 02 F6 | 	mov	local01, local04
1ce34                 | LR__2784
1ce34                 | LR__2785
1ce34     0F 13 02 F6 | 	mov	arg01, local01
1ce38     09 27 EA FA | 	rdword	local05, arg01 wz
1ce3c     00 FA 05 A6 |  if_e	mov	result1, #0
1ce40     04 26 66 50 |  if_ne	shl	local05, #4
1ce44     13 13 02 51 |  if_ne	add	arg01, local05
1ce48     09 FB 01 56 |  if_ne	mov	result1, arg01
1ce4c     FD 14 0A F6 | 	mov	arg02, result1 wz
1ce50     B8 00 90 AD |  if_e	jmp	#LR__2787
1ce54     11 15 52 F2 | 	cmps	arg02, local03 wc
1ce58     B0 00 90 3D |  if_ae	jmp	#LR__2787
1ce5c     0A 13 02 F6 | 	mov	arg01, arg02
1ce60     00 FA 05 F6 | 	mov	result1, #0
1ce64     02 12 06 F1 | 	add	arg01, #2
1ce68     09 13 E2 FA | 	rdword	arg01, arg01
1ce6c     36 00 00 FF 
1ce70     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
1ce74     01 FA 65 A6 |  if_e	neg	result1, #1
1ce78     00 FA 0D F2 | 	cmp	result1, #0 wz
1ce7c     8C 00 90 AD |  if_e	jmp	#LR__2787
1ce80     0F 25 02 F6 | 	mov	local04, local01
1ce84     12 29 E2 FA | 	rdword	local06, local04
1ce88     0A 13 02 F6 | 	mov	arg01, arg02
1ce8c     09 1F E2 FA | 	rdword	local01, arg01
1ce90     0F 29 02 F1 | 	add	local06, local01
1ce94     12 29 52 FC | 	wrword	local06, local04
1ce98     09 29 02 F6 | 	mov	local06, arg01
1ce9c     06 28 06 F1 | 	add	local06, #6
1cea0     12 1F 02 F6 | 	mov	local01, local04
1cea4     14 29 E2 FA | 	rdword	local06, local06
1cea8     06 1E 06 F1 | 	add	local01, #6
1ceac     0F 29 52 FC | 	wrword	local06, local01
1ceb0     09 29 02 F6 | 	mov	local06, arg01
1ceb4     02 28 06 F1 | 	add	local06, #2
1ceb8     14 55 59 FC | 	wrword	#170, local06
1cebc     09 29 02 F6 | 	mov	local06, arg01
1cec0     06 28 06 F1 | 	add	local06, #6
1cec4     14 01 58 FC | 	wrword	#0, local06
1cec8     09 27 EA FA | 	rdword	local05, arg01 wz
1cecc     00 FA 05 A6 |  if_e	mov	result1, #0
1ced0     04 26 66 50 |  if_ne	shl	local05, #4
1ced4     13 13 02 51 |  if_ne	add	arg01, local05
1ced8     09 FB 01 56 |  if_ne	mov	result1, arg01
1cedc     FD 28 0A F6 | 	mov	local06, result1 wz
1cee0     28 00 90 AD |  if_e	jmp	#LR__2786
1cee4     11 29 52 F2 | 	cmps	local06, local03 wc
1cee8     20 00 90 3D |  if_ae	jmp	#LR__2786
1ceec     12 15 0A F6 | 	mov	arg02, local04 wz
1cef0     00 FA 05 A6 |  if_e	mov	result1, #0
1cef4     10 15 82 51 |  if_ne	sub	arg02, local02
1cef8     04 14 46 50 |  if_ne	shr	arg02, #4
1cefc     0A FB 01 56 |  if_ne	mov	result1, arg02
1cf00     14 25 02 F6 | 	mov	local04, local06
1cf04     04 24 06 F1 | 	add	local04, #4
1cf08     12 FB 51 FC | 	wrword	result1, local04
1cf0c                 | LR__2786
1cf0c                 | LR__2787
1cf0c     14 FB 01 F6 | 	mov	result1, local06
1cf10     A7 F0 03 F6 | 	mov	ptra, fp
1cf14     B2 00 A0 FD | 	call	#popregs_
1cf18                 | __system___gc_dofree_ret
1cf18     2D 00 64 FD | 	ret
1cf1c                 | 
1cf1c                 | __system___gc_docollect
1cf1c     05 4A 05 F6 | 	mov	COUNT_, #5
1cf20     A8 00 A0 FD | 	call	#pushregs_
1cf24     B8 F9 BF FD | 	call	#__system___gc_ptrs
1cf28     FE 1E 02 F6 | 	mov	local01, result2
1cf2c     FD 20 02 F6 | 	mov	local02, result1
1cf30     10 13 02 F6 | 	mov	arg01, local02
1cf34     09 23 EA FA | 	rdword	local03, arg01 wz
1cf38     00 FA 05 A6 |  if_e	mov	result1, #0
1cf3c     04 22 66 50 |  if_ne	shl	local03, #4
1cf40     11 13 02 51 |  if_ne	add	arg01, local03
1cf44     09 FB 01 56 |  if_ne	mov	result1, arg01
1cf48     FD 24 0A F6 | 	mov	local04, result1 wz
1cf4c     00 FA 05 F6 | 	mov	result1, #0
1cf50     01 FA 61 FD | 	cogid	result1
1cf54     FD 26 02 F6 | 	mov	local05, result1
1cf58     48 00 90 AD |  if_e	jmp	#LR__2792
1cf5c     97 22 48 FB | 	callpa	#(@LR__2791-@LR__2790)>>2,fcache_load_ptr_
1cf60                 | LR__2790
1cf60     0F 25 52 F2 | 	cmps	local04, local01 wc
1cf64     3C 00 90 3D |  if_ae	jmp	#LR__2792
1cf68     12 15 02 F6 | 	mov	arg02, local04
1cf6c     02 14 06 F1 | 	add	arg02, #2
1cf70     0A 15 E2 FA | 	rdword	arg02, arg02
1cf74     20 14 26 F5 | 	andn	arg02, #32
1cf78     12 13 02 F6 | 	mov	arg01, local04
1cf7c     02 12 06 F1 | 	add	arg01, #2
1cf80     09 15 52 FC | 	wrword	arg02, arg01
1cf84     12 13 02 F6 | 	mov	arg01, local04
1cf88     09 23 EA FA | 	rdword	local03, arg01 wz
1cf8c     00 FA 05 A6 |  if_e	mov	result1, #0
1cf90     04 22 66 50 |  if_ne	shl	local03, #4
1cf94     11 13 02 51 |  if_ne	add	arg01, local03
1cf98     09 FB 01 56 |  if_ne	mov	result1, arg01
1cf9c     FD 24 0A F6 | 	mov	local04, result1 wz
1cfa0     BC FF 9F 5D |  if_ne	jmp	#LR__2790
1cfa4                 | LR__2791
1cfa4                 | LR__2792
1cfa4     00 22 06 F6 | 	mov	local03, #0
1cfa8     00 12 06 F6 | 	mov	arg01, #0
1cfac     A0 BD BF FD | 	call	#__system____topofstack
1cfb0     FD 14 02 F6 | 	mov	arg02, result1
1cfb4     11 13 02 F6 | 	mov	arg01, local03
1cfb8     90 00 B0 FD | 	call	#__system___gc_markhub
1cfbc     1C 01 B0 FD | 	call	#__system___gc_markcog
1cfc0     10 13 02 F6 | 	mov	arg01, local02
1cfc4     09 23 EA FA | 	rdword	local03, arg01 wz
1cfc8     00 FA 05 A6 |  if_e	mov	result1, #0
1cfcc     04 22 66 50 |  if_ne	shl	local03, #4
1cfd0     11 13 02 51 |  if_ne	add	arg01, local03
1cfd4     09 FB 01 56 |  if_ne	mov	result1, arg01
1cfd8     FD 20 0A F6 | 	mov	local02, result1 wz
1cfdc     60 00 90 AD |  if_e	jmp	#LR__2796
1cfe0                 | LR__2793
1cfe0     10 25 02 F6 | 	mov	local04, local02
1cfe4     12 13 02 F6 | 	mov	arg01, local04
1cfe8     09 23 EA FA | 	rdword	local03, arg01 wz
1cfec     00 FA 05 A6 |  if_e	mov	result1, #0
1cff0     04 22 66 50 |  if_ne	shl	local03, #4
1cff4     11 13 02 51 |  if_ne	add	arg01, local03
1cff8     09 FB 01 56 |  if_ne	mov	result1, arg01
1cffc     FD 20 02 F6 | 	mov	local02, result1
1d000     12 15 02 F6 | 	mov	arg02, local04
1d004     02 14 06 F1 | 	add	arg02, #2
1d008     0A 15 E2 FA | 	rdword	arg02, arg02
1d00c     20 14 CE F7 | 	test	arg02, #32 wz
1d010     10 14 CE A7 |  if_e	test	arg02, #16 wz
1d014     1C 00 90 5D |  if_ne	jmp	#LR__2795
1d018     0A 15 42 F8 | 	getnib	arg02, arg02, #0
1d01c     13 15 0A F2 | 	cmp	arg02, local05 wz
1d020     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
1d024     0C 00 90 5D |  if_ne	jmp	#LR__2794
1d028     12 13 02 F6 | 	mov	arg01, local04
1d02c     84 FC BF FD | 	call	#__system___gc_dofree
1d030     FD 20 02 F6 | 	mov	local02, result1
1d034                 | LR__2794
1d034                 | LR__2795
1d034     00 20 0E F2 | 	cmp	local02, #0 wz
1d038     0F 21 52 52 |  if_ne	cmps	local02, local01 wc
1d03c     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__2793
1d040                 | LR__2796
1d040     A7 F0 03 F6 | 	mov	ptra, fp
1d044     B2 00 A0 FD | 	call	#popregs_
1d048                 | __system___gc_docollect_ret
1d048     2D 00 64 FD | 	ret
1d04c                 | 
1d04c                 | __system___gc_markhub
1d04c     04 4A 05 F6 | 	mov	COUNT_, #4
1d050     A8 00 A0 FD | 	call	#pushregs_
1d054     09 1F 02 F6 | 	mov	local01, arg01
1d058     0A 21 02 F6 | 	mov	local02, arg02
1d05c     80 F8 BF FD | 	call	#__system___gc_ptrs
1d060     FD 22 02 F6 | 	mov	local03, result1
1d064     FE 24 02 F6 | 	mov	local04, result2
1d068                 | LR__2800
1d068     10 1F 52 F2 | 	cmps	local01, local02 wc
1d06c     60 00 90 3D |  if_ae	jmp	#LR__2801
1d070     0F 17 02 FB | 	rdlong	arg03, local01
1d074     04 1E 06 F1 | 	add	local01, #4
1d078     12 15 02 F6 | 	mov	arg02, local04
1d07c     11 13 02 F6 | 	mov	arg01, local03
1d080     8C FB BF FD | 	call	#__system___gc_isvalidptr
1d084     FD 16 0A F6 | 	mov	arg03, result1 wz
1d088     DC FF 9F AD |  if_e	jmp	#LR__2800
1d08c     0B 13 02 F6 | 	mov	arg01, arg03
1d090     00 FA 05 F6 | 	mov	result1, #0
1d094     02 12 06 F1 | 	add	arg01, #2
1d098     09 13 E2 FA | 	rdword	arg01, arg01
1d09c     36 00 00 FF 
1d0a0     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
1d0a4     01 FA 65 A6 |  if_e	neg	result1, #1
1d0a8     00 FA 0D F2 | 	cmp	result1, #0 wz
1d0ac     B8 FF 9F 5D |  if_ne	jmp	#LR__2800
1d0b0     0B FD 01 F6 | 	mov	result2, arg03
1d0b4     02 FC 05 F1 | 	add	result2, #2
1d0b8     FE FC E1 FA | 	rdword	result2, result2
1d0bc     0F FC 25 F5 | 	andn	result2, #15
1d0c0     2E FC 45 F5 | 	or	result2, #46
1d0c4     02 16 06 F1 | 	add	arg03, #2
1d0c8     0B FD 51 FC | 	wrword	result2, arg03
1d0cc     98 FF 9F FD | 	jmp	#LR__2800
1d0d0                 | LR__2801
1d0d0     A7 F0 03 F6 | 	mov	ptra, fp
1d0d4     B2 00 A0 FD | 	call	#popregs_
1d0d8                 | __system___gc_markhub_ret
1d0d8     2D 00 64 FD | 	ret
1d0dc                 | 
1d0dc                 | __system___gc_markcog
1d0dc     04 4A 05 F6 | 	mov	COUNT_, #4
1d0e0     A8 00 A0 FD | 	call	#pushregs_
1d0e4     F8 F7 BF FD | 	call	#__system___gc_ptrs
1d0e8     FD 1E 02 F6 | 	mov	local01, result1
1d0ec     FE 20 02 F6 | 	mov	local02, result2
1d0f0     EF 23 06 F6 | 	mov	local03, #495
1d0f4                 | LR__2810
1d0f4                 | 	'.live	local03
1d0f4     00 22 96 F9 | 	alts	local03, #0
1d0f8     11 25 02 F6 | 	mov	local04, local03
1d0fc     0F 13 02 F6 | 	mov	arg01, local01
1d100     10 15 02 F6 | 	mov	arg02, local02
1d104     12 17 02 F6 | 	mov	arg03, local04
1d108     04 FB BF FD | 	call	#__system___gc_isvalidptr
1d10c     00 FA 0D F2 | 	cmp	result1, #0 wz
1d110     18 00 90 AD |  if_e	jmp	#LR__2811
1d114     FD 24 02 F6 | 	mov	local04, result1
1d118     02 24 06 F1 | 	add	local04, #2
1d11c     12 25 E2 FA | 	rdword	local04, local04
1d120     20 24 46 F5 | 	or	local04, #32
1d124     02 FA 05 F1 | 	add	result1, #2
1d128     FD 24 52 FC | 	wrword	local04, result1
1d12c                 | LR__2811
1d12c     01 22 86 F1 | 	sub	local03, #1
1d130     00 22 56 F2 | 	cmps	local03, #0 wc
1d134     BC FF 9F 3D |  if_ae	jmp	#LR__2810
1d138     A7 F0 03 F6 | 	mov	ptra, fp
1d13c     B2 00 A0 FD | 	call	#popregs_
1d140                 | __system___gc_markcog_ret
1d140     2D 00 64 FD | 	ret
1d144                 | 
1d144                 | __system__opendir
1d144     06 4A 05 F6 | 	mov	COUNT_, #6
1d148     A8 00 A0 FD | 	call	#pushregs_
1d14c     84 E9 05 F1 | 	add	ptr___system__dat__, #388
1d150     F4 1E 02 F6 | 	mov	local01, ptr___system__dat__
1d154     09 15 02 F6 | 	mov	arg02, arg01
1d158     0F 13 02 F6 | 	mov	arg01, local01
1d15c     00 16 06 F6 | 	mov	arg03, #0
1d160     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
1d164     A8 C3 BF FD | 	call	#__system____getvfsforfile
1d168     FD 20 0A F6 | 	mov	local02, result1 wz
1d16c     10 00 90 AD |  if_e	jmp	#LR__2820
1d170     28 20 06 F1 | 	add	local02, #40
1d174     10 17 0A FB | 	rdlong	arg03, local02 wz
1d178     28 20 86 F1 | 	sub	local02, #40
1d17c     14 00 90 5D |  if_ne	jmp	#LR__2821
1d180                 | LR__2820
1d180     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1d184     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
1d188     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1d18c     00 FA 05 F6 | 	mov	result1, #0
1d190     90 00 90 FD | 	jmp	#LR__2823
1d194                 | LR__2821
1d194     5C 12 06 F6 | 	mov	arg01, #92
1d198     10 14 06 F6 | 	mov	arg02, #16
1d19c     C0 F9 BF FD | 	call	#__system___gc_doalloc
1d1a0     FD 22 0A F6 | 	mov	local03, result1 wz
1d1a4     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1d1a8     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
1d1ac     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1d1b0     00 FA 05 A6 |  if_e	mov	result1, #0
1d1b4     6C 00 90 AD |  if_e	jmp	#LR__2823
1d1b8     28 20 06 F1 | 	add	local02, #40
1d1bc     10 25 02 FB | 	rdlong	local04, local02
1d1c0     12 27 02 F6 | 	mov	local05, local04
1d1c4     28 20 86 F1 | 	sub	local02, #40
1d1c8     13 26 46 F7 | 	zerox	local05, #19
1d1cc     14 24 46 F0 | 	shr	local04, #20
1d1d0     02 24 66 F0 | 	shl	local04, #2
1d1d4     ED 24 02 F1 | 	add	local04, __methods__
1d1d8     12 25 02 FB | 	rdlong	local04, local04
1d1dc     11 13 02 F6 | 	mov	arg01, local03
1d1e0     0F 15 02 F6 | 	mov	arg02, local01
1d1e4     F2 28 02 F6 | 	mov	local06, objptr
1d1e8     13 E5 01 F6 | 	mov	objptr, local05
1d1ec     2D 24 62 FD | 	call	local04
1d1f0     14 E5 01 F6 | 	mov	objptr, local06
1d1f4     FD 16 0A F6 | 	mov	arg03, result1 wz
1d1f8     20 00 90 AD |  if_e	jmp	#LR__2822
1d1fc     00 16 4E F2 | 	cmps	arg03, #0 wz
1d200     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1d204     F4 16 62 FC | 	wrlong	arg03, ptr___system__dat__
1d208     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1d20c     11 13 02 F6 | 	mov	arg01, local03
1d210     58 FA BF FD | 	call	#__system___gc_free
1d214     00 FA 05 F6 | 	mov	result1, #0
1d218     08 00 90 FD | 	jmp	#LR__2823
1d21c                 | LR__2822
1d21c     11 21 62 FC | 	wrlong	local02, local03
1d220     11 FB 01 F6 | 	mov	result1, local03
1d224                 | LR__2823
1d224     A7 F0 03 F6 | 	mov	ptra, fp
1d228     B2 00 A0 FD | 	call	#popregs_
1d22c                 | __system__opendir_ret
1d22c     2D 00 64 FD | 	ret
1d230                 | 
1d230                 | __system__closedir
1d230     04 4A 05 F6 | 	mov	COUNT_, #4
1d234     A8 00 A0 FD | 	call	#pushregs_
1d238     09 1F 02 F6 | 	mov	local01, arg01
1d23c     0F 13 02 FB | 	rdlong	arg01, local01
1d240     2C 12 06 F1 | 	add	arg01, #44
1d244     09 21 02 FB | 	rdlong	local02, arg01
1d248     10 23 02 F6 | 	mov	local03, local02
1d24c     13 22 46 F7 | 	zerox	local03, #19
1d250     14 20 46 F0 | 	shr	local02, #20
1d254     02 20 66 F0 | 	shl	local02, #2
1d258     ED 20 02 F1 | 	add	local02, __methods__
1d25c     10 21 02 FB | 	rdlong	local02, local02
1d260     0F 13 02 F6 | 	mov	arg01, local01
1d264     F2 24 02 F6 | 	mov	local04, objptr
1d268     11 E5 01 F6 | 	mov	objptr, local03
1d26c     2D 20 62 FD | 	call	local02
1d270     12 E5 01 F6 | 	mov	objptr, local04
1d274     FD 24 02 F6 | 	mov	local04, result1
1d278     0F 13 02 F6 | 	mov	arg01, local01
1d27c     EC F9 BF FD | 	call	#__system___gc_free
1d280     00 24 4E F2 | 	cmps	local04, #0 wz
1d284     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1d288     F4 24 62 FC | 	wrlong	local04, ptr___system__dat__
1d28c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1d290     01 FA 65 56 |  if_ne	neg	result1, #1
1d294     00 FA 05 A6 |  if_e	mov	result1, #0
1d298     A7 F0 03 F6 | 	mov	ptra, fp
1d29c     B2 00 A0 FD | 	call	#popregs_
1d2a0                 | __system__closedir_ret
1d2a0     2D 00 64 FD | 	ret
1d2a4                 | 
1d2a4                 | __system__readdir
1d2a4     04 4A 05 F6 | 	mov	COUNT_, #4
1d2a8     A8 00 A0 FD | 	call	#pushregs_
1d2ac     09 15 0A FB | 	rdlong	arg02, arg01 wz
1d2b0     08 12 06 F1 | 	add	arg01, #8
1d2b4     09 1F 02 F6 | 	mov	local01, arg01
1d2b8     08 12 86 F1 | 	sub	arg01, #8
1d2bc     00 FA 05 A6 |  if_e	mov	result1, #0
1d2c0     5C 00 90 AD |  if_e	jmp	#LR__2831
1d2c4     30 14 06 F1 | 	add	arg02, #48
1d2c8     0A 21 02 FB | 	rdlong	local02, arg02
1d2cc     10 23 02 F6 | 	mov	local03, local02
1d2d0     13 22 46 F7 | 	zerox	local03, #19
1d2d4     14 20 46 F0 | 	shr	local02, #20
1d2d8     02 20 66 F0 | 	shl	local02, #2
1d2dc     ED 20 02 F1 | 	add	local02, __methods__
1d2e0     10 21 02 FB | 	rdlong	local02, local02
1d2e4     0F 15 02 F6 | 	mov	arg02, local01
1d2e8     F2 24 02 F6 | 	mov	local04, objptr
1d2ec     11 E5 01 F6 | 	mov	objptr, local03
1d2f0     2D 20 62 FD | 	call	local02
1d2f4     12 E5 01 F6 | 	mov	objptr, local04
1d2f8     00 FA 4D F2 | 	cmps	result1, #0 wz
1d2fc     1C 00 90 AD |  if_e	jmp	#LR__2830
1d300     01 FA 55 F2 | 	cmps	result1, #1 wc
1d304     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
1d308     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1d30c     F4 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
1d310     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1d314     00 FA 05 F6 | 	mov	result1, #0
1d318     04 00 90 FD | 	jmp	#LR__2831
1d31c                 | LR__2830
1d31c     0F FB 01 F6 | 	mov	result1, local01
1d320                 | LR__2831
1d320     A7 F0 03 F6 | 	mov	ptra, fp
1d324     B2 00 A0 FD | 	call	#popregs_
1d328                 | __system__readdir_ret
1d328     2D 00 64 FD | 	ret
1d32c                 | 
1d32c                 | __system___openraw
1d32c     15 4A 05 F6 | 	mov	COUNT_, #21
1d330     A8 00 A0 FD | 	call	#pushregs_
1d334     09 1F 02 F6 | 	mov	local01, arg01
1d338     0A 21 02 F6 | 	mov	local02, arg02
1d33c     0B 23 02 F6 | 	mov	local03, arg03
1d340     0C 25 02 F6 | 	mov	local04, arg04
1d344     04 26 06 F6 | 	mov	local05, #4
1d348     0F 29 02 F6 | 	mov	local06, local01
1d34c     00 2A 06 F6 | 	mov	local07, #0
1d350     84 E9 05 F1 | 	add	ptr___system__dat__, #388
1d354     F4 2C 02 F6 | 	mov	local08, ptr___system__dat__
1d358     16 13 02 F6 | 	mov	arg01, local08
1d35c     10 15 02 F6 | 	mov	arg02, local02
1d360     00 16 06 F6 | 	mov	arg03, #0
1d364     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
1d368     A4 C1 BF FD | 	call	#__system____getvfsforfile
1d36c     FD 2E 0A F6 | 	mov	local09, result1 wz
1d370     10 00 90 AD |  if_e	jmp	#LR__2840
1d374     20 2E 06 F1 | 	add	local09, #32
1d378     17 FB 09 FB | 	rdlong	result1, local09 wz
1d37c     20 2E 86 F1 | 	sub	local09, #32
1d380     14 00 90 5D |  if_ne	jmp	#LR__2841
1d384                 | LR__2840
1d384     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1d388     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
1d38c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1d390     01 FA 65 F6 | 	neg	result1, #1
1d394     8C 02 90 FD | 	jmp	#LR__2854
1d398                 | LR__2841
1d398     14 13 02 F6 | 	mov	arg01, local06
1d39c     00 14 06 F6 | 	mov	arg02, #0
1d3a0     34 16 06 F6 | 	mov	arg03, #52
1d3a4     09 31 02 F6 | 	mov	local10, arg01
1d3a8     98 00 A0 FD | 	call	#\builtin_bytefill_
1d3ac     20 2E 06 F1 | 	add	local09, #32
1d3b0     17 33 02 FB | 	rdlong	local11, local09
1d3b4     19 35 02 F6 | 	mov	local12, local11
1d3b8     19 37 02 F6 | 	mov	local13, local11
1d3bc     20 2E 86 F1 | 	sub	local09, #32
1d3c0     1B 39 02 F6 | 	mov	local14, local13
1d3c4     13 34 46 F7 | 	zerox	local12, #19
1d3c8     14 38 46 F0 | 	shr	local14, #20
1d3cc     02 38 66 F0 | 	shl	local14, #2
1d3d0     ED 38 02 F1 | 	add	local14, __methods__
1d3d4     1C 39 02 FB | 	rdlong	local14, local14
1d3d8     14 3B 02 F6 | 	mov	local15, local06
1d3dc     16 3D 02 F6 | 	mov	local16, local08
1d3e0     11 3F 02 F6 | 	mov	local17, local03
1d3e4     1D 13 02 F6 | 	mov	arg01, local15
1d3e8     1E 15 02 F6 | 	mov	arg02, local16
1d3ec     1F 17 02 F6 | 	mov	arg03, local17
1d3f0     F2 40 02 F6 | 	mov	local18, objptr
1d3f4     1A E5 01 F6 | 	mov	objptr, local12
1d3f8     2D 38 62 FD | 	call	local14
1d3fc     20 E5 01 F6 | 	mov	objptr, local18
1d400     FD 42 0A F6 | 	mov	local19, result1 wz
1d404     04 22 CE 57 |  if_ne	test	local03, #4 wz
1d408     58 00 90 AD |  if_e	jmp	#LR__2842
1d40c     24 2E 06 F1 | 	add	local09, #36
1d410     17 33 02 FB | 	rdlong	local11, local09
1d414     19 35 02 F6 | 	mov	local12, local11
1d418     19 37 02 F6 | 	mov	local13, local11
1d41c     24 2E 86 F1 | 	sub	local09, #36
1d420     1B 39 02 F6 | 	mov	local14, local13
1d424     13 34 46 F7 | 	zerox	local12, #19
1d428     14 38 46 F0 | 	shr	local14, #20
1d42c     02 38 66 F0 | 	shl	local14, #2
1d430     ED 38 02 F1 | 	add	local14, __methods__
1d434     1C 39 02 FB | 	rdlong	local14, local14
1d438     14 3B 02 F6 | 	mov	local15, local06
1d43c     16 3D 02 F6 | 	mov	local16, local08
1d440     12 3F 02 F6 | 	mov	local17, local04
1d444     1D 13 02 F6 | 	mov	arg01, local15
1d448     1E 15 02 F6 | 	mov	arg02, local16
1d44c     1F 17 02 F6 | 	mov	arg03, local17
1d450     F2 40 02 F6 | 	mov	local18, objptr
1d454     1A E5 01 F6 | 	mov	objptr, local12
1d458     2D 38 62 FD | 	call	local14
1d45c     20 E5 01 F6 | 	mov	objptr, local18
1d460     FD 42 02 F6 | 	mov	local19, result1
1d464                 | LR__2842
1d464     00 42 0E F2 | 	cmp	local19, #0 wz
1d468     8C 01 90 5D |  if_ne	jmp	#LR__2852
1d46c     11 45 02 F6 | 	mov	local20, local03
1d470     03 44 0E F5 | 	and	local20, #3 wz
1d474     02 26 46 55 |  if_ne	or	local05, #2
1d478     01 44 0E F2 | 	cmp	local20, #1 wz
1d47c     01 26 46 55 |  if_ne	or	local05, #1
1d480     20 22 CE F7 | 	test	local03, #32 wz
1d484     C0 26 46 55 |  if_ne	or	local05, #192
1d488     08 28 06 F1 | 	add	local06, #8
1d48c     14 27 62 FC | 	wrlong	local05, local06
1d490     0C 28 06 F1 | 	add	local06, #12
1d494     14 47 0A FB | 	rdlong	local21, local06 wz
1d498     14 28 86 F1 | 	sub	local06, #20
1d49c     18 00 90 5D |  if_ne	jmp	#LR__2843
1d4a0     04 2E 06 F1 | 	add	local09, #4
1d4a4     17 47 02 FB | 	rdlong	local21, local09
1d4a8     04 2E 86 F1 | 	sub	local09, #4
1d4ac     14 28 06 F1 | 	add	local06, #20
1d4b0     14 47 62 FC | 	wrlong	local21, local06
1d4b4     14 28 86 F1 | 	sub	local06, #20
1d4b8                 | LR__2843
1d4b8     18 28 06 F1 | 	add	local06, #24
1d4bc     14 47 0A FB | 	rdlong	local21, local06 wz
1d4c0     18 28 86 F1 | 	sub	local06, #24
1d4c4     18 00 90 5D |  if_ne	jmp	#LR__2844
1d4c8     08 2E 06 F1 | 	add	local09, #8
1d4cc     17 47 02 FB | 	rdlong	local21, local09
1d4d0     08 2E 86 F1 | 	sub	local09, #8
1d4d4     18 28 06 F1 | 	add	local06, #24
1d4d8     14 47 62 FC | 	wrlong	local21, local06
1d4dc     18 28 86 F1 | 	sub	local06, #24
1d4e0                 | LR__2844
1d4e0     24 28 06 F1 | 	add	local06, #36
1d4e4     14 47 0A FB | 	rdlong	local21, local06 wz
1d4e8     24 28 86 F1 | 	sub	local06, #36
1d4ec     17 47 02 AB |  if_e	rdlong	local21, local09
1d4f0     24 28 06 A1 |  if_e	add	local06, #36
1d4f4     14 47 62 AC |  if_e	wrlong	local21, local06
1d4f8     24 28 86 A1 |  if_e	sub	local06, #36
1d4fc     28 28 06 F1 | 	add	local06, #40
1d500     14 47 0A FB | 	rdlong	local21, local06 wz
1d504     28 28 86 F1 | 	sub	local06, #40
1d508     18 00 90 5D |  if_ne	jmp	#LR__2845
1d50c     10 2E 06 F1 | 	add	local09, #16
1d510     17 47 02 FB | 	rdlong	local21, local09
1d514     10 2E 86 F1 | 	sub	local09, #16
1d518     28 28 06 F1 | 	add	local06, #40
1d51c     14 47 62 FC | 	wrlong	local21, local06
1d520     28 28 86 F1 | 	sub	local06, #40
1d524                 | LR__2845
1d524     30 28 06 F1 | 	add	local06, #48
1d528     14 47 0A FB | 	rdlong	local21, local06 wz
1d52c     30 28 86 F1 | 	sub	local06, #48
1d530     18 00 90 5D |  if_ne	jmp	#LR__2846
1d534     0C 2E 06 F1 | 	add	local09, #12
1d538     17 47 02 FB | 	rdlong	local21, local09
1d53c     0C 2E 86 F1 | 	sub	local09, #12
1d540     30 28 06 F1 | 	add	local06, #48
1d544     14 47 62 FC | 	wrlong	local21, local06
1d548     30 28 86 F1 | 	sub	local06, #48
1d54c                 | LR__2846
1d54c     1C 28 06 F1 | 	add	local06, #28
1d550     14 47 0A FB | 	rdlong	local21, local06 wz
1d554     1C 28 86 F1 | 	sub	local06, #28
1d558     1C 00 90 5D |  if_ne	jmp	#LR__2847
1d55c     01 2A 06 F6 | 	mov	local07, #1
1d560     F2 12 02 F6 | 	mov	arg01, objptr
1d564     00 60 03 FF 
1d568     00 12 46 F5 | 	or	arg01, ##113246208
1d56c     1C 28 06 F1 | 	add	local06, #28
1d570     14 13 62 FC | 	wrlong	arg01, local06
1d574     1C 28 86 F1 | 	sub	local06, #28
1d578                 | LR__2847
1d578     20 28 06 F1 | 	add	local06, #32
1d57c     14 47 0A FB | 	rdlong	local21, local06 wz
1d580     20 28 86 F1 | 	sub	local06, #32
1d584     1C 00 90 5D |  if_ne	jmp	#LR__2848
1d588     01 2A 06 F6 | 	mov	local07, #1
1d58c     F2 12 02 F6 | 	mov	arg01, objptr
1d590     00 68 03 FF 
1d594     00 12 46 F5 | 	or	arg01, ##114294784
1d598     20 28 06 F1 | 	add	local06, #32
1d59c     14 13 62 FC | 	wrlong	arg01, local06
1d5a0     20 28 86 F1 | 	sub	local06, #32
1d5a4                 | LR__2848
1d5a4     2C 28 06 F1 | 	add	local06, #44
1d5a8     14 47 0A FB | 	rdlong	local21, local06 wz
1d5ac     2C 28 86 F1 | 	sub	local06, #44
1d5b0     44 00 90 5D |  if_ne	jmp	#LR__2851
1d5b4     14 2E 06 F1 | 	add	local09, #20
1d5b8     17 47 0A FB | 	rdlong	local21, local09 wz
1d5bc     14 2E 86 F1 | 	sub	local09, #20
1d5c0     18 00 90 AD |  if_e	jmp	#LR__2849
1d5c4     14 2E 06 F1 | 	add	local09, #20
1d5c8     17 47 02 FB | 	rdlong	local21, local09
1d5cc     2C 28 06 F1 | 	add	local06, #44
1d5d0     14 47 62 FC | 	wrlong	local21, local06
1d5d4     2C 28 86 F1 | 	sub	local06, #44
1d5d8     1C 00 90 FD | 	jmp	#LR__2850
1d5dc                 | LR__2849
1d5dc     01 2A 06 F6 | 	mov	local07, #1
1d5e0     F2 12 02 F6 | 	mov	arg01, objptr
1d5e4     00 70 03 FF 
1d5e8     00 12 46 F5 | 	or	arg01, ##115343360
1d5ec     2C 28 06 F1 | 	add	local06, #44
1d5f0     14 13 62 FC | 	wrlong	arg01, local06
1d5f4     2C 28 86 F1 | 	sub	local06, #44
1d5f8                 | LR__2850
1d5f8                 | LR__2851
1d5f8                 | LR__2852
1d5f8     00 2A 0E F2 | 	cmp	local07, #0 wz
1d5fc     14 13 02 56 |  if_ne	mov	arg01, local06
1d600     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
1d604     00 42 0E F2 | 	cmp	local19, #0 wz
1d608     00 12 06 A6 |  if_e	mov	arg01, #0
1d60c     10 00 90 5D |  if_ne	jmp	#LR__2853
1d610     00 12 4E F2 | 	cmps	arg01, #0 wz
1d614     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1d618     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1d61c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1d620                 | LR__2853
1d620     21 FB 01 F6 | 	mov	result1, local19
1d624                 | LR__2854
1d624     A7 F0 03 F6 | 	mov	ptra, fp
1d628     B2 00 A0 FD | 	call	#popregs_
1d62c                 | __system___openraw_ret
1d62c     2D 00 64 FD | 	ret
1d630                 | 
1d630                 | __system___closeraw
1d630     05 4A 05 F6 | 	mov	COUNT_, #5
1d634     A8 00 A0 FD | 	call	#pushregs_
1d638     09 1F 02 F6 | 	mov	local01, arg01
1d63c     00 20 06 F6 | 	mov	local02, #0
1d640     08 1E 06 F1 | 	add	local01, #8
1d644     0F FB 09 FB | 	rdlong	result1, local01 wz
1d648     08 1E 86 F1 | 	sub	local01, #8
1d64c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1d650     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
1d654     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1d658     01 FA 65 A6 |  if_e	neg	result1, #1
1d65c     A8 00 90 AD |  if_e	jmp	#LR__2862
1d660     2C 1E 06 F1 | 	add	local01, #44
1d664     0F FB 09 FB | 	rdlong	result1, local01 wz
1d668     2C 1E 86 F1 | 	sub	local01, #44
1d66c     38 00 90 AD |  if_e	jmp	#LR__2860
1d670     2C 1E 06 F1 | 	add	local01, #44
1d674     0F 23 02 FB | 	rdlong	local03, local01
1d678     11 25 02 F6 | 	mov	local04, local03
1d67c     2C 1E 86 F1 | 	sub	local01, #44
1d680     13 24 46 F7 | 	zerox	local04, #19
1d684     14 22 46 F0 | 	shr	local03, #20
1d688     02 22 66 F0 | 	shl	local03, #2
1d68c     ED 22 02 F1 | 	add	local03, __methods__
1d690     11 23 02 FB | 	rdlong	local03, local03
1d694     0F 13 02 F6 | 	mov	arg01, local01
1d698     F2 26 02 F6 | 	mov	local05, objptr
1d69c     12 E5 01 F6 | 	mov	objptr, local04
1d6a0     2D 22 62 FD | 	call	local03
1d6a4     13 E5 01 F6 | 	mov	objptr, local05
1d6a8                 | LR__2860
1d6a8     24 1E 06 F1 | 	add	local01, #36
1d6ac     0F 27 0A FB | 	rdlong	local05, local01 wz
1d6b0     24 1E 86 F1 | 	sub	local01, #36
1d6b4     3C 00 90 AD |  if_e	jmp	#LR__2861
1d6b8     24 1E 06 F1 | 	add	local01, #36
1d6bc     0F 23 02 FB | 	rdlong	local03, local01
1d6c0     11 25 02 F6 | 	mov	local04, local03
1d6c4     24 1E 86 F1 | 	sub	local01, #36
1d6c8     13 24 46 F7 | 	zerox	local04, #19
1d6cc     14 22 46 F0 | 	shr	local03, #20
1d6d0     02 22 66 F0 | 	shl	local03, #2
1d6d4     ED 22 02 F1 | 	add	local03, __methods__
1d6d8     11 23 02 FB | 	rdlong	local03, local03
1d6dc     0F 13 02 F6 | 	mov	arg01, local01
1d6e0     F2 26 02 F6 | 	mov	local05, objptr
1d6e4     12 E5 01 F6 | 	mov	objptr, local04
1d6e8     2D 22 62 FD | 	call	local03
1d6ec     13 E5 01 F6 | 	mov	objptr, local05
1d6f0     FD 20 02 F6 | 	mov	local02, result1
1d6f4                 | LR__2861
1d6f4     0F 13 02 F6 | 	mov	arg01, local01
1d6f8     00 14 06 F6 | 	mov	arg02, #0
1d6fc     34 16 06 F6 | 	mov	arg03, #52
1d700     98 00 A0 FD | 	call	#\builtin_bytefill_
1d704     10 FB 01 F6 | 	mov	result1, local02
1d708                 | LR__2862
1d708     A7 F0 03 F6 | 	mov	ptra, fp
1d70c     B2 00 A0 FD | 	call	#popregs_
1d710                 | __system___closeraw_ret
1d710     2D 00 64 FD | 	ret
1d714                 | 
1d714                 | __system___vfs_open_sdcardx
1d714     0B 4A 05 F6 | 	mov	COUNT_, #11
1d718     A8 00 A0 FD | 	call	#pushregs_
1d71c     09 23 02 F6 | 	mov	local03, arg01
1d720     0A 25 02 F6 | 	mov	local04, arg02
1d724     0B 27 02 F6 | 	mov	local05, arg03
1d728     0C 29 02 F6 | 	mov	local06, arg04
1d72c     01 00 00 FF 
1d730     24 12 06 F6 | 	mov	arg01, ##548
1d734     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
1d738     FD 2A 02 F6 | 	mov	local07, result1
1d73c     01 00 00 FF 
1d740     34 12 06 F6 | 	mov	arg01, ##564
1d744     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
1d748     FD 2C 02 F6 | 	mov	local08, result1
1d74c     11 19 02 F6 | 	mov	arg04, local03
1d750     1F 18 C6 F0 | 	sar	arg04, #31
1d754     11 17 02 F6 | 	mov	arg03, local03
1d758     01 12 06 F6 | 	mov	arg01, #1
1d75c     00 14 06 F6 | 	mov	arg02, #0
1d760     48 DC BF FD | 	call	#__system___int64_shl
1d764     FD 1E 02 F6 | 	mov	local01, result1
1d768     FE 2E 02 F6 | 	mov	local09, result2
1d76c     12 19 02 F6 | 	mov	arg04, local04
1d770     1F 18 C6 F0 | 	sar	arg04, #31
1d774     12 17 02 F6 | 	mov	arg03, local04
1d778     01 12 06 F6 | 	mov	arg01, #1
1d77c     00 14 06 F6 | 	mov	arg02, #0
1d780     28 DC BF FD | 	call	#__system___int64_shl
1d784     FD 1E 42 F5 | 	or	local01, result1
1d788     FE 2E 42 F5 | 	or	local09, result2
1d78c     13 19 02 F6 | 	mov	arg04, local05
1d790     1F 18 C6 F0 | 	sar	arg04, #31
1d794     13 17 02 F6 | 	mov	arg03, local05
1d798     01 12 06 F6 | 	mov	arg01, #1
1d79c     00 14 06 F6 | 	mov	arg02, #0
1d7a0     08 DC BF FD | 	call	#__system___int64_shl
1d7a4     FD 1E 42 F5 | 	or	local01, result1
1d7a8     FE 2E 42 F5 | 	or	local09, result2
1d7ac     14 19 02 F6 | 	mov	arg04, local06
1d7b0     1F 18 C6 F0 | 	sar	arg04, #31
1d7b4     14 17 02 F6 | 	mov	arg03, local06
1d7b8     01 12 06 F6 | 	mov	arg01, #1
1d7bc     00 14 06 F6 | 	mov	arg02, #0
1d7c0     E8 DB BF FD | 	call	#__system___int64_shl
1d7c4     17 15 02 F6 | 	mov	arg02, local09
1d7c8     FD 1E 42 F5 | 	or	local01, result1
1d7cc     0A FD 41 F5 | 	or	result2, arg02
1d7d0     FE 20 02 F6 | 	mov	local02, result2
1d7d4     0F 13 02 F6 | 	mov	arg01, local01
1d7d8     10 15 02 F6 | 	mov	arg02, local02
1d7dc     04 DC BF FD | 	call	#__system___usepins
1d7e0     00 FA 0D F2 | 	cmp	result1, #0 wz
1d7e4     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1d7e8     F4 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
1d7ec     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1d7f0     00 FA 05 A6 |  if_e	mov	result1, #0
1d7f4     B4 00 90 AD |  if_e	jmp	#LR__2872
1d7f8     0F 31 02 F6 | 	mov	local10, local01
1d7fc     10 2F 02 F6 | 	mov	local09, local02
1d800     01 00 00 FF 
1d804     08 2A 06 F1 | 	add	local07, ##520
1d808     15 31 62 FC | 	wrlong	local10, local07
1d80c     04 2A 06 F1 | 	add	local07, #4
1d810     15 2F 62 FC | 	wrlong	local09, local07
1d814     01 00 00 FF 
1d818     0C 2A 86 F1 | 	sub	local07, ##524
1d81c     14 1B 02 F6 | 	mov	arg05, local06
1d820     00 12 06 F6 | 	mov	arg01, #0
1d824     11 15 02 F6 | 	mov	arg02, local03
1d828     12 17 02 F6 | 	mov	arg03, local04
1d82c     13 19 02 F6 | 	mov	arg04, local05
1d830     F2 30 02 F6 | 	mov	local10, objptr
1d834     15 E5 01 F6 | 	mov	objptr, local07
1d838     7C 27 B0 FD | 	call	#_fatfs_cc_disk_setpins
1d83c     18 E5 01 F6 | 	mov	objptr, local10
1d840     FD 32 0A F6 | 	mov	local11, result1 wz
1d844     24 00 90 5D |  if_ne	jmp	#LR__2870
1d848     41 01 00 FF 
1d84c     EE 14 06 F6 | 	mov	arg02, ##@LR__4267
1d850     16 13 02 F6 | 	mov	arg01, local08
1d854     00 16 06 F6 | 	mov	arg03, #0
1d858     F2 32 02 F6 | 	mov	local11, objptr
1d85c     15 E5 01 F6 | 	mov	objptr, local07
1d860     AC 5E B0 FD | 	call	#_fatfs_cc_f_mount
1d864     19 E5 01 F6 | 	mov	objptr, local11
1d868     FD 32 02 F6 | 	mov	local11, result1
1d86c                 | LR__2870
1d86c     00 32 0E F2 | 	cmp	local11, #0 wz
1d870     24 00 90 AD |  if_e	jmp	#LR__2871
1d874     0F 13 02 F6 | 	mov	arg01, local01
1d878     10 15 02 F6 | 	mov	arg02, local02
1d87c     B8 DB BF FD | 	call	#__system___freepins
1d880     19 13 6A F6 | 	neg	arg01, local11 wz
1d884     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1d888     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1d88c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1d890     00 FA 05 F6 | 	mov	result1, #0
1d894     14 00 90 FD | 	jmp	#LR__2872
1d898                 | LR__2871
1d898     15 13 02 F6 | 	mov	arg01, local07
1d89c     F2 32 02 F6 | 	mov	local11, objptr
1d8a0     15 E5 01 F6 | 	mov	objptr, local07
1d8a4     48 9B B0 FD | 	call	#_fatfs_cc_get_vfs
1d8a8     19 E5 01 F6 | 	mov	objptr, local11
1d8ac                 | LR__2872
1d8ac     A7 F0 03 F6 | 	mov	ptra, fp
1d8b0     B2 00 A0 FD | 	call	#popregs_
1d8b4                 | __system___vfs_open_sdcardx_ret
1d8b4     2D 00 64 FD | 	ret
1d8b8                 | 
1d8b8                 | __system____default_getc
1d8b8     03 4A 05 F6 | 	mov	COUNT_, #3
1d8bc     A8 00 A0 FD | 	call	#pushregs_
1d8c0     09 1F 02 F6 | 	mov	local01, arg01
1d8c4     0F 21 02 FB | 	rdlong	local02, local01
1d8c8     08 20 06 F1 | 	add	local02, #8
1d8cc     10 23 02 FB | 	rdlong	local03, local02
1d8d0     02 22 CE F7 | 	test	local03, #2 wz
1d8d4     0F 13 02 56 |  if_ne	mov	arg01, local01
1d8d8     00 01 B0 5D |  if_ne	call	#__system____default_flush
1d8dc     10 23 02 FB | 	rdlong	local03, local02
1d8e0     01 22 46 F5 | 	or	local03, #1
1d8e4     10 23 62 FC | 	wrlong	local03, local02
1d8e8     08 20 86 F1 | 	sub	local02, #8
1d8ec     10 23 0A FB | 	rdlong	local03, local02 wz
1d8f0     0C 00 90 5D |  if_ne	jmp	#LR__2880
1d8f4     0F 13 02 F6 | 	mov	arg01, local01
1d8f8     64 16 B0 FD | 	call	#__system____default_filbuf
1d8fc     FD 22 02 F6 | 	mov	local03, result1
1d900                 | LR__2880
1d900     01 22 56 F2 | 	cmps	local03, #1 wc
1d904     01 FA 65 C6 |  if_b	neg	result1, #1
1d908     1C 00 90 CD |  if_b	jmp	#LR__2881
1d90c     01 22 86 F1 | 	sub	local03, #1
1d910     10 23 62 FC | 	wrlong	local03, local02
1d914     04 20 06 F1 | 	add	local02, #4
1d918     10 23 02 FB | 	rdlong	local03, local02
1d91c     11 FB C1 FA | 	rdbyte	result1, local03
1d920     01 22 06 F1 | 	add	local03, #1
1d924     10 23 62 FC | 	wrlong	local03, local02
1d928                 | LR__2881
1d928     A7 F0 03 F6 | 	mov	ptra, fp
1d92c     B2 00 A0 FD | 	call	#popregs_
1d930                 | __system____default_getc_ret
1d930     2D 00 64 FD | 	ret
1d934                 | 
1d934                 | __system____default_putc
1d934     06 4A 05 F6 | 	mov	COUNT_, #6
1d938     A8 00 A0 FD | 	call	#pushregs_
1d93c     09 1F 02 F6 | 	mov	local01, arg01
1d940     0A 21 02 F6 | 	mov	local02, arg02
1d944     10 23 02 FB | 	rdlong	local03, local02
1d948     08 22 06 F1 | 	add	local03, #8
1d94c     11 FB 01 FB | 	rdlong	result1, local03
1d950     01 FA CD F7 | 	test	result1, #1 wz
1d954     10 13 02 56 |  if_ne	mov	arg01, local02
1d958     80 00 B0 5D |  if_ne	call	#__system____default_flush
1d95c     11 25 02 FB | 	rdlong	local04, local03
1d960     02 24 46 F5 | 	or	local04, #2
1d964     11 25 62 FC | 	wrlong	local04, local03
1d968     08 22 86 F1 | 	sub	local03, #8
1d96c     11 27 02 FB | 	rdlong	local05, local03
1d970     10 22 06 F1 | 	add	local03, #16
1d974     11 15 02 FB | 	rdlong	arg02, local03
1d978     10 22 86 F1 | 	sub	local03, #16
1d97c     13 FB 01 F6 | 	mov	result1, local05
1d980     0A FB 01 F1 | 	add	result1, arg02
1d984     FD 1E 42 FC | 	wrbyte	local01, result1
1d988     0F 1F E2 F8 | 	getbyte	local01, local01, #0
1d98c     01 26 06 F1 | 	add	local05, #1
1d990     11 27 62 FC | 	wrlong	local05, local03
1d994     06 20 06 F1 | 	add	local02, #6
1d998     10 29 EA FA | 	rdword	local06, local02 wz
1d99c     06 20 86 F1 | 	sub	local02, #6
1d9a0     0C 22 06 51 |  if_ne	add	local03, #12
1d9a4     11 25 02 5B |  if_ne	rdlong	local04, local03
1d9a8     12 27 0A 52 |  if_ne	cmp	local05, local04 wz
1d9ac     0C 00 90 AD |  if_e	jmp	#LR__2890
1d9b0     0A 1E 0E F2 | 	cmp	local01, #10 wz
1d9b4     01 28 0E A2 |  if_e	cmp	local06, #1 wz
1d9b8     10 00 90 5D |  if_ne	jmp	#LR__2891
1d9bc                 | LR__2890
1d9bc     10 13 02 F6 | 	mov	arg01, local02
1d9c0     18 00 B0 FD | 	call	#__system____default_flush
1d9c4     00 FA 0D F2 | 	cmp	result1, #0 wz
1d9c8     01 1E 66 56 |  if_ne	neg	local01, #1
1d9cc                 | LR__2891
1d9cc     0F FB 01 F6 | 	mov	result1, local01
1d9d0     A7 F0 03 F6 | 	mov	ptra, fp
1d9d4     B2 00 A0 FD | 	call	#popregs_
1d9d8                 | __system____default_putc_ret
1d9d8     2D 00 64 FD | 	ret
1d9dc                 | 
1d9dc                 | __system____default_flush
1d9dc     06 4A 05 F6 | 	mov	COUNT_, #6
1d9e0     A8 00 A0 FD | 	call	#pushregs_
1d9e4     09 1F 02 F6 | 	mov	local01, arg01
1d9e8     0F 21 02 FB | 	rdlong	local02, local01
1d9ec     10 23 02 FB | 	rdlong	local03, local02
1d9f0     08 20 06 F1 | 	add	local02, #8
1d9f4     10 FB 01 FB | 	rdlong	result1, local02
1d9f8     08 20 86 F1 | 	sub	local02, #8
1d9fc     02 FA CD F7 | 	test	result1, #2 wz
1da00     D0 00 90 AD |  if_e	jmp	#LR__2902
1da04     01 22 56 F2 | 	cmps	local03, #1 wc
1da08     20 01 90 CD |  if_b	jmp	#LR__2904
1da0c     08 1E 06 F1 | 	add	local01, #8
1da10     0F FB 01 FB | 	rdlong	result1, local01
1da14     08 1E 86 F1 | 	sub	local01, #8
1da18     40 FA CD F7 | 	test	result1, #64 wz
1da1c     68 00 90 AD |  if_e	jmp	#LR__2901
1da20     08 1E 06 F1 | 	add	local01, #8
1da24     0F 17 02 FB | 	rdlong	arg03, local01
1da28     08 1E 86 F1 | 	sub	local01, #8
1da2c     80 16 CE F7 | 	test	arg03, #128 wz
1da30     54 00 90 AD |  if_e	jmp	#LR__2900
1da34     30 1E 06 F1 | 	add	local01, #48
1da38     0F 25 02 FB | 	rdlong	local04, local01
1da3c     12 27 02 F6 | 	mov	local05, local04
1da40     30 1E 86 F1 | 	sub	local01, #48
1da44     13 26 46 F7 | 	zerox	local05, #19
1da48     14 24 46 F0 | 	shr	local04, #20
1da4c     02 24 66 F0 | 	shl	local04, #2
1da50     ED 24 02 F1 | 	add	local04, __methods__
1da54     12 25 02 FB | 	rdlong	local04, local04
1da58     0F 13 02 F6 | 	mov	arg01, local01
1da5c     00 14 06 F6 | 	mov	arg02, #0
1da60     02 16 06 F6 | 	mov	arg03, #2
1da64     F2 28 02 F6 | 	mov	local06, objptr
1da68     13 E5 01 F6 | 	mov	objptr, local05
1da6c     2D 24 62 FD | 	call	local04
1da70     14 E5 01 F6 | 	mov	objptr, local06
1da74     08 1E 06 F1 | 	add	local01, #8
1da78     0F 29 02 FB | 	rdlong	local06, local01
1da7c     80 28 26 F5 | 	andn	local06, #128
1da80     0F 29 62 FC | 	wrlong	local06, local01
1da84     08 1E 86 F1 | 	sub	local01, #8
1da88                 | LR__2900
1da88                 | LR__2901
1da88     18 1E 06 F1 | 	add	local01, #24
1da8c     0F 25 02 FB | 	rdlong	local04, local01
1da90     12 27 02 F6 | 	mov	local05, local04
1da94     18 1E 86 F1 | 	sub	local01, #24
1da98     13 26 46 F7 | 	zerox	local05, #19
1da9c     14 24 46 F0 | 	shr	local04, #20
1daa0     02 24 66 F0 | 	shl	local04, #2
1daa4     ED 24 02 F1 | 	add	local04, __methods__
1daa8     12 25 02 FB | 	rdlong	local04, local04
1daac     10 20 06 F1 | 	add	local02, #16
1dab0     10 15 02 FB | 	rdlong	arg02, local02
1dab4     10 20 86 F1 | 	sub	local02, #16
1dab8     0F 13 02 F6 | 	mov	arg01, local01
1dabc     11 17 02 F6 | 	mov	arg03, local03
1dac0     F2 28 02 F6 | 	mov	local06, objptr
1dac4     13 E5 01 F6 | 	mov	objptr, local05
1dac8     2D 24 62 FD | 	call	local04
1dacc     14 E5 01 F6 | 	mov	objptr, local06
1dad0     58 00 90 FD | 	jmp	#LR__2904
1dad4                 | LR__2902
1dad4     08 20 06 F1 | 	add	local02, #8
1dad8     10 29 02 FB | 	rdlong	local06, local02
1dadc     08 20 86 F1 | 	sub	local02, #8
1dae0     01 28 CE F7 | 	test	local06, #1 wz
1dae4     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
1dae8     40 00 90 AD |  if_e	jmp	#LR__2903
1daec     30 1E 06 F1 | 	add	local01, #48
1daf0     0F 25 02 FB | 	rdlong	local04, local01
1daf4     12 27 02 F6 | 	mov	local05, local04
1daf8     30 1E 86 F1 | 	sub	local01, #48
1dafc     13 26 46 F7 | 	zerox	local05, #19
1db00     14 24 46 F0 | 	shr	local04, #20
1db04     02 24 66 F0 | 	shl	local04, #2
1db08     ED 24 02 F1 | 	add	local04, __methods__
1db0c     12 25 02 FB | 	rdlong	local04, local04
1db10     0F 13 02 F6 | 	mov	arg01, local01
1db14     11 15 62 F6 | 	neg	arg02, local03
1db18     01 16 06 F6 | 	mov	arg03, #1
1db1c     F2 28 02 F6 | 	mov	local06, objptr
1db20     13 E5 01 F6 | 	mov	objptr, local05
1db24     2D 24 62 FD | 	call	local04
1db28     14 E5 01 F6 | 	mov	objptr, local06
1db2c                 | LR__2903
1db2c                 | LR__2904
1db2c     10 01 68 FC | 	wrlong	#0, local02
1db30     04 20 06 F1 | 	add	local02, #4
1db34     10 01 68 FC | 	wrlong	#0, local02
1db38     04 20 06 F1 | 	add	local02, #4
1db3c     10 01 68 FC | 	wrlong	#0, local02
1db40     00 FA 05 F6 | 	mov	result1, #0
1db44     A7 F0 03 F6 | 	mov	ptra, fp
1db48     B2 00 A0 FD | 	call	#popregs_
1db4c                 | __system____default_flush_ret
1db4c     2D 00 64 FD | 	ret
1db50                 | 
1db50                 | __system____default_buffer_init
1db50     02 4A 05 F6 | 	mov	COUNT_, #2
1db54     A8 00 A0 FD | 	call	#pushregs_
1db58     09 1F 02 F6 | 	mov	local01, arg01
1db5c     0F 21 02 FB | 	rdlong	local02, local01
1db60     0F 13 02 F6 | 	mov	arg01, local01
1db64     F8 02 B0 FD | 	call	#__system___isatty
1db68     00 FA 0D F2 | 	cmp	result1, #0 wz
1db6c     06 1E 06 51 |  if_ne	add	local01, #6
1db70     0F 0B 58 5C |  if_ne	wrword	#5, local01
1db74     06 1E 06 A1 |  if_e	add	local01, #6
1db78     0F 0D 58 AC |  if_e	wrword	#6, local01
1db7c     14 20 06 F1 | 	add	local02, #20
1db80     10 1F 02 F6 | 	mov	local01, local02
1db84     04 20 86 F1 | 	sub	local02, #4
1db88     10 1F 62 FC | 	wrlong	local01, local02
1db8c     04 20 86 F1 | 	sub	local02, #4
1db90     02 00 80 FF 
1db94     10 01 68 FC | 	wrlong	##1024, local02
1db98     00 FA 05 F6 | 	mov	result1, #0
1db9c     A7 F0 03 F6 | 	mov	ptra, fp
1dba0     B2 00 A0 FD | 	call	#popregs_
1dba4                 | __system____default_buffer_init_ret
1dba4     2D 00 64 FD | 	ret
1dba8                 | 
1dba8                 | __system__stat
1dba8     04 4A 05 F6 | 	mov	COUNT_, #4
1dbac     A8 00 A0 FD | 	call	#pushregs_
1dbb0     0A 1F 02 F6 | 	mov	local01, arg02
1dbb4     84 E9 05 F1 | 	add	ptr___system__dat__, #388
1dbb8     F4 20 02 F6 | 	mov	local02, ptr___system__dat__
1dbbc     09 15 02 F6 | 	mov	arg02, arg01
1dbc0     10 13 02 F6 | 	mov	arg01, local02
1dbc4     00 16 06 F6 | 	mov	arg03, #0
1dbc8     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
1dbcc     40 B9 BF FD | 	call	#__system____getvfsforfile
1dbd0     FD 22 0A F6 | 	mov	local03, result1 wz
1dbd4     10 00 90 AD |  if_e	jmp	#LR__2910
1dbd8     34 22 06 F1 | 	add	local03, #52
1dbdc     11 17 0A FB | 	rdlong	arg03, local03 wz
1dbe0     34 22 86 F1 | 	sub	local03, #52
1dbe4     14 00 90 5D |  if_ne	jmp	#LR__2911
1dbe8                 | LR__2910
1dbe8     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1dbec     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
1dbf0     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1dbf4     01 FA 65 F6 | 	neg	result1, #1
1dbf8     68 00 90 FD | 	jmp	#LR__2912
1dbfc                 | LR__2911
1dbfc     0F 13 02 F6 | 	mov	arg01, local01
1dc00     00 14 06 F6 | 	mov	arg02, #0
1dc04     30 16 06 F6 | 	mov	arg03, #48
1dc08     09 25 02 F6 | 	mov	local04, arg01
1dc0c     98 00 A0 FD | 	call	#\builtin_bytefill_
1dc10     12 FB 01 F6 | 	mov	result1, local04
1dc14     10 13 CA FA | 	rdbyte	arg01, local02 wz
1dc18     08 1E 06 A1 |  if_e	add	local01, #8
1dc1c     08 00 80 AF 
1dc20     0F FF 6B AC |  if_e	wrlong	##4607, local01
1dc24     00 FA 05 A6 |  if_e	mov	result1, #0
1dc28     38 00 90 AD |  if_e	jmp	#LR__2912
1dc2c     34 22 06 F1 | 	add	local03, #52
1dc30     11 23 02 FB | 	rdlong	local03, local03
1dc34     11 25 02 F6 | 	mov	local04, local03
1dc38     13 22 46 F7 | 	zerox	local03, #19
1dc3c     14 24 46 F0 | 	shr	local04, #20
1dc40     02 24 66 F0 | 	shl	local04, #2
1dc44     ED 24 02 F1 | 	add	local04, __methods__
1dc48     12 25 02 FB | 	rdlong	local04, local04
1dc4c     10 13 02 F6 | 	mov	arg01, local02
1dc50     0F 15 02 F6 | 	mov	arg02, local01
1dc54     F2 20 02 F6 | 	mov	local02, objptr
1dc58     11 E5 01 F6 | 	mov	objptr, local03
1dc5c     2D 24 62 FD | 	call	local04
1dc60     10 E5 01 F6 | 	mov	objptr, local02
1dc64                 | LR__2912
1dc64     A7 F0 03 F6 | 	mov	ptra, fp
1dc68     B2 00 A0 FD | 	call	#popregs_
1dc6c                 | __system__stat_ret
1dc6c     2D 00 64 FD | 	ret
1dc70                 | 
1dc70                 | __system__read
1dc70     0A 12 16 F2 | 	cmp	arg01, #10 wc
1dc74     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1dc78     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1dc7c     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1dc80     01 FA 65 36 |  if_ae	neg	result1, #1
1dc84     20 00 90 3D |  if_ae	jmp	#LR__2920
1dc88     34 12 06 FD | 	qmul	arg01, #52
1dc8c     02 00 00 FF 
1dc90     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
1dc94     18 12 62 FD | 	getqx	arg01
1dc98     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
1dc9c     02 00 00 FF 
1dca0     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
1dca4     D0 0F B0 FD | 	call	#__system___vfsread
1dca8                 | LR__2920
1dca8                 | __system__read_ret
1dca8     2D 00 64 FD | 	ret
1dcac                 | 
1dcac                 | __system__close
1dcac     0A 12 16 F2 | 	cmp	arg01, #10 wc
1dcb0     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1dcb4     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1dcb8     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1dcbc     01 FA 65 36 |  if_ae	neg	result1, #1
1dcc0     20 00 90 3D |  if_ae	jmp	#LR__2930
1dcc4     34 12 06 FD | 	qmul	arg01, #52
1dcc8     02 00 00 FF 
1dccc     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
1dcd0     18 12 62 FD | 	getqx	arg01
1dcd4     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
1dcd8     02 00 00 FF 
1dcdc     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
1dce0     4C F9 BF FD | 	call	#__system___closeraw
1dce4                 | LR__2930
1dce4                 | __system__close_ret
1dce4     2D 00 64 FD | 	ret
1dce8                 | 
1dce8                 | __system__lseek
1dce8     06 4A 05 F6 | 	mov	COUNT_, #6
1dcec     A8 00 A0 FD | 	call	#pushregs_
1dcf0     0A 12 16 F2 | 	cmp	arg01, #10 wc
1dcf4     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1dcf8     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1dcfc     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1dd00     01 FA 65 36 |  if_ae	neg	result1, #1
1dd04     C4 00 90 3D |  if_ae	jmp	#LR__2941
1dd08     34 12 06 FD | 	qmul	arg01, #52
1dd0c     02 00 00 FF 
1dd10     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
1dd14     18 1E 62 FD | 	getqx	local01
1dd18     F4 1E 02 F1 | 	add	local01, ptr___system__dat__
1dd1c     30 1E 06 F1 | 	add	local01, #48
1dd20     0F 13 0A FB | 	rdlong	arg01, local01 wz
1dd24     30 1E 86 F1 | 	sub	local01, #48
1dd28     02 00 00 FF 
1dd2c     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
1dd30     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1dd34     F4 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
1dd38     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1dd3c     01 FA 65 A6 |  if_e	neg	result1, #1
1dd40     88 00 90 AD |  if_e	jmp	#LR__2941
1dd44     08 1E 06 F1 | 	add	local01, #8
1dd48     0F 21 02 FB | 	rdlong	local02, local01
1dd4c     08 1E 86 F1 | 	sub	local01, #8
1dd50     40 20 CE F7 | 	test	local02, #64 wz
1dd54     08 1E 06 51 |  if_ne	add	local01, #8
1dd58     0F 21 02 5B |  if_ne	rdlong	local02, local01
1dd5c     80 20 46 55 |  if_ne	or	local02, #128
1dd60     0F 21 62 5C |  if_ne	wrlong	local02, local01
1dd64     08 1E 86 51 |  if_ne	sub	local01, #8
1dd68     30 1E 06 F1 | 	add	local01, #48
1dd6c     0F 23 02 FB | 	rdlong	local03, local01
1dd70     11 25 02 F6 | 	mov	local04, local03
1dd74     30 1E 86 F1 | 	sub	local01, #48
1dd78     13 24 46 F7 | 	zerox	local04, #19
1dd7c     14 22 46 F0 | 	shr	local03, #20
1dd80     02 22 66 F0 | 	shl	local03, #2
1dd84     ED 22 02 F1 | 	add	local03, __methods__
1dd88     11 23 02 FB | 	rdlong	local03, local03
1dd8c     0F 13 02 F6 | 	mov	arg01, local01
1dd90     F2 26 02 F6 | 	mov	local05, objptr
1dd94     12 E5 01 F6 | 	mov	objptr, local04
1dd98     2D 22 62 FD | 	call	local03
1dd9c     13 E5 01 F6 | 	mov	objptr, local05
1dda0     FD 28 02 F6 | 	mov	local06, result1
1dda4     00 28 56 F2 | 	cmps	local06, #0 wc
1dda8     1C 00 90 3D |  if_ae	jmp	#LR__2940
1ddac     14 13 6A F6 | 	neg	arg01, local06 wz
1ddb0     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1ddb4     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1ddb8     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1ddbc     01 FA 65 56 |  if_ne	neg	result1, #1
1ddc0     00 FA 05 A6 |  if_e	mov	result1, #0
1ddc4     04 00 90 FD | 	jmp	#LR__2941
1ddc8                 | LR__2940
1ddc8     14 FB 01 F6 | 	mov	result1, local06
1ddcc                 | LR__2941
1ddcc     A7 F0 03 F6 | 	mov	ptra, fp
1ddd0     B2 00 A0 FD | 	call	#popregs_
1ddd4                 | __system__lseek_ret
1ddd4     2D 00 64 FD | 	ret
1ddd8                 | 
1ddd8                 | __system___ioctl
1ddd8     03 4A 05 F6 | 	mov	COUNT_, #3
1dddc     A8 00 A0 FD | 	call	#pushregs_
1dde0     00 12 4E F2 | 	cmps	arg01, #0 wz
1dde4     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1dde8     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
1ddec     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1ddf0     01 FA 65 A6 |  if_e	neg	result1, #1
1ddf4     5C 00 90 AD |  if_e	jmp	#LR__2951
1ddf8     28 12 06 F1 | 	add	arg01, #40
1ddfc     09 1F 02 FB | 	rdlong	local01, arg01
1de00     0F 21 02 F6 | 	mov	local02, local01
1de04     28 12 86 F1 | 	sub	arg01, #40
1de08     13 20 46 F7 | 	zerox	local02, #19
1de0c     14 1E 46 F0 | 	shr	local01, #20
1de10     02 1E 66 F0 | 	shl	local01, #2
1de14     ED 1E 02 F1 | 	add	local01, __methods__
1de18     0F 1F 02 FB | 	rdlong	local01, local01
1de1c     F2 22 02 F6 | 	mov	local03, objptr
1de20     10 E5 01 F6 | 	mov	objptr, local02
1de24     2D 1E 62 FD | 	call	local01
1de28     11 E5 01 F6 | 	mov	objptr, local03
1de2c     FD 12 0A F6 | 	mov	arg01, result1 wz
1de30     1C 00 90 AD |  if_e	jmp	#LR__2950
1de34     00 12 4E F2 | 	cmps	arg01, #0 wz
1de38     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1de3c     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1de40     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1de44     01 FA 65 56 |  if_ne	neg	result1, #1
1de48     00 FA 05 A6 |  if_e	mov	result1, #0
1de4c     04 00 90 FD | 	jmp	#LR__2951
1de50                 | LR__2950
1de50     00 FA 05 F6 | 	mov	result1, #0
1de54                 | LR__2951
1de54     A7 F0 03 F6 | 	mov	ptra, fp
1de58     B2 00 A0 FD | 	call	#popregs_
1de5c                 | __system___ioctl_ret
1de5c     2D 00 64 FD | 	ret
1de60                 | 
1de60                 | __system___isatty
1de60     00 4A 05 F6 | 	mov	COUNT_, #0
1de64     A8 00 A0 FD | 	call	#pushregs_
1de68     0C F0 07 F1 | 	add	ptra, #12
1de6c     04 4E 05 F1 | 	add	fp, #4
1de70     A7 12 62 FC | 	wrlong	arg01, fp
1de74     04 4E 05 F1 | 	add	fp, #4
1de78     A7 16 02 F6 | 	mov	arg03, fp
1de7c     08 4E 85 F1 | 	sub	fp, #8
1de80     00 15 06 F6 | 	mov	arg02, #256
1de84     50 FF BF FD | 	call	#__system___ioctl
1de88     00 FA 0D F2 | 	cmp	result1, #0 wz
1de8c     01 FA 05 A6 |  if_e	mov	result1, #1
1de90     00 FA 05 56 |  if_ne	mov	result1, #0
1de94     A7 F0 03 F6 | 	mov	ptra, fp
1de98     B2 00 A0 FD | 	call	#popregs_
1de9c                 | __system___isatty_ret
1de9c     2D 00 64 FD | 	ret
1dea0                 | 
1dea0                 | __system____getftab
1dea0     0A 12 16 F2 | 	cmp	arg01, #10 wc
1dea4     34 12 06 CD |  if_b	qmul	arg01, #52
1dea8     00 FA 05 36 |  if_ae	mov	result1, #0
1deac     02 00 00 CF 
1deb0     20 E9 05 C1 |  if_b	add	ptr___system__dat__, ##1312
1deb4     18 FA 61 CD |  if_b	getqx	result1
1deb8     F4 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
1debc     02 00 00 CF 
1dec0     20 E9 85 C1 |  if_b	sub	ptr___system__dat__, ##1312
1dec4                 | __system____getftab_ret
1dec4     2D 00 64 FD | 	ret
1dec8                 | 
1dec8                 | __system__strncpy
1dec8     09 01 02 F6 | 	mov	_var01, arg01
1decc                 | LR__2960
1decc     01 16 86 F1 | 	sub	arg03, #1
1ded0     00 16 56 F2 | 	cmps	arg03, #0 wc
1ded4     18 00 90 CD |  if_b	jmp	#LR__2961
1ded8     0A FB C1 FA | 	rdbyte	result1, arg02
1dedc     00 FB 41 FC | 	wrbyte	result1, _var01
1dee0     01 14 06 F1 | 	add	arg02, #1
1dee4     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1dee8     01 00 06 F1 | 	add	_var01, #1
1deec     DC FF 9F 5D |  if_ne	jmp	#LR__2960
1def0                 | LR__2961
1def0     97 0C 48 FB | 	callpa	#(@LR__2963-@LR__2962)>>2,fcache_load_ptr_
1def4                 | LR__2962
1def4     01 16 86 F1 | 	sub	arg03, #1
1def8     00 16 56 F2 | 	cmps	arg03, #0 wc
1defc     00 03 02 36 |  if_ae	mov	_var02, _var01
1df00     01 00 06 31 |  if_ae	add	_var01, #1
1df04     01 01 48 3C |  if_ae	wrbyte	#0, _var02
1df08     E8 FF 9F 3D |  if_ae	jmp	#LR__2962
1df0c                 | LR__2963
1df0c     09 FB 01 F6 | 	mov	result1, arg01
1df10                 | __system__strncpy_ret
1df10     2D 00 64 FD | 	ret
1df14                 | 
1df14                 | __system__strncat
1df14     00 14 4E F2 | 	cmps	arg02, #0 wz
1df18     50 00 90 AD |  if_e	jmp	#LR__2974
1df1c     01 16 16 F2 | 	cmp	arg03, #1 wc
1df20     48 00 90 CD |  if_b	jmp	#LR__2974
1df24     09 01 02 F6 | 	mov	_var01, arg01
1df28     97 1E 48 FB | 	callpa	#(@LR__2972-@LR__2970)>>2,fcache_load_ptr_
1df2c                 | LR__2970
1df2c     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1df30     01 00 06 51 |  if_ne	add	_var01, #1
1df34     F4 FF 9F 5D |  if_ne	jmp	#LR__2970
1df38     0B 03 02 F6 | 	mov	_var02, arg03
1df3c                 | LR__2971
1df3c     0A 05 C2 FA | 	rdbyte	_var03, arg02
1df40     02 07 02 F6 | 	mov	_var04, _var03
1df44     07 06 4E F7 | 	zerox	_var04, #7 wz
1df48     01 14 06 F1 | 	add	arg02, #1
1df4c     18 00 90 AD |  if_e	jmp	#LR__2973
1df50     01 02 86 F1 | 	sub	_var02, #1
1df54     00 02 56 F2 | 	cmps	_var02, #0 wc
1df58     00 07 02 36 |  if_ae	mov	_var04, _var01
1df5c     01 00 06 31 |  if_ae	add	_var01, #1
1df60     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
1df64     D4 FF 9F 3D |  if_ae	jmp	#LR__2971
1df68                 | LR__2972
1df68                 | LR__2973
1df68     00 01 48 FC | 	wrbyte	#0, _var01
1df6c                 | LR__2974
1df6c     09 FB 01 F6 | 	mov	result1, arg01
1df70                 | __system__strncat_ret
1df70     2D 00 64 FD | 	ret
1df74                 | 
1df74                 | __system__strncmp
1df74     09 01 0A F6 | 	mov	_var01, arg01 wz
1df78     14 00 90 5D |  if_ne	jmp	#LR__2980
1df7c     00 14 0E F2 | 	cmp	arg02, #0 wz
1df80     01 02 66 56 |  if_ne	neg	_var02, #1
1df84     00 02 06 A6 |  if_e	mov	_var02, #0
1df88     01 FB 01 F6 | 	mov	result1, _var02
1df8c     74 00 90 FD | 	jmp	#__system__strncmp_ret
1df90                 | LR__2980
1df90     00 14 0E F2 | 	cmp	arg02, #0 wz
1df94     01 FA 05 A6 |  if_e	mov	result1, #1
1df98     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1df9c     0B 05 02 F6 | 	mov	_var03, arg03
1dfa0     97 16 48 FB | 	callpa	#(@LR__2982-@LR__2981)>>2,fcache_load_ptr_
1dfa4                 | LR__2981
1dfa4     00 07 C2 FA | 	rdbyte	_var04, _var01
1dfa8     0A 09 02 F6 | 	mov	_var05, arg02
1dfac     04 0B C2 FA | 	rdbyte	_var06, _var05
1dfb0     01 04 86 F1 | 	sub	_var03, #1
1dfb4     00 04 56 F2 | 	cmps	_var03, #0 wc
1dfb8     01 00 06 F1 | 	add	_var01, #1
1dfbc     01 14 06 F1 | 	add	arg02, #1
1dfc0     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
1dfc4     08 00 90 2D |  if_nc_and_z	jmp	#LR__2983
1dfc8     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
1dfcc     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__2981
1dfd0                 | LR__2982
1dfd0                 | LR__2983
1dfd0     00 04 56 F2 | 	cmps	_var03, #0 wc
1dfd4     00 FA 05 C6 |  if_b	mov	result1, #0
1dfd8     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
1dfdc     05 07 0A F2 | 	cmp	_var04, _var06 wz
1dfe0     00 FA 05 A6 |  if_e	mov	result1, #0
1dfe4     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1dfe8     00 06 0E F2 | 	cmp	_var04, #0 wz
1dfec     01 FA 65 A6 |  if_e	neg	result1, #1
1dff0     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1dff4     00 0A 0E F2 | 	cmp	_var06, #0 wz
1dff8     01 FA 05 A6 |  if_e	mov	result1, #1
1dffc     03 FB 01 56 |  if_ne	mov	result1, _var04
1e000     05 FB 81 51 |  if_ne	sub	result1, _var06
1e004                 | __system__strncmp_ret
1e004     2D 00 64 FD | 	ret
1e008                 | 
1e008                 | __system____root_opendir
1e008     64 E8 05 F1 | 	add	ptr___system__dat__, #100
1e00c     04 12 06 F1 | 	add	arg01, #4
1e010     09 E9 61 FC | 	wrlong	ptr___system__dat__, arg01
1e014     00 FA 05 F6 | 	mov	result1, #0
1e018     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
1e01c                 | __system____root_opendir_ret
1e01c     2D 00 64 FD | 	ret
1e020                 | 
1e020                 | __system____root_readdir
1e020     03 4A 05 F6 | 	mov	COUNT_, #3
1e024     A8 00 A0 FD | 	call	#pushregs_
1e028     09 1F 02 F6 | 	mov	local01, arg01
1e02c     0A 21 02 F6 | 	mov	local02, arg02
1e030     04 1E 06 F1 | 	add	local01, #4
1e034     0F 23 02 FB | 	rdlong	local03, local01
1e038     04 1E 86 F1 | 	sub	local01, #4
1e03c                 | LR__2990
1e03c     74 E8 05 F1 | 	add	ptr___system__dat__, #116
1e040     F4 22 0A F2 | 	cmp	local03, ptr___system__dat__ wz
1e044     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
1e048     01 FA 65 A6 |  if_e	neg	result1, #1
1e04c     48 00 90 AD |  if_e	jmp	#LR__2991
1e050     11 17 0A FB | 	rdlong	arg03, local03 wz
1e054     04 22 06 A1 |  if_e	add	local03, #4
1e058     E0 FF 9F AD |  if_e	jmp	#LR__2990
1e05c     11 15 02 FB | 	rdlong	arg02, local03
1e060     01 14 06 F1 | 	add	arg02, #1
1e064     10 13 02 F6 | 	mov	arg01, local02
1e068     40 16 06 F6 | 	mov	arg03, #64
1e06c     58 FE BF FD | 	call	#__system__strncpy
1e070     50 20 06 F1 | 	add	local02, #80
1e074     10 03 48 FC | 	wrbyte	#1, local02
1e078     08 20 86 F1 | 	sub	local02, #8
1e07c     10 01 68 FC | 	wrlong	#0, local02
1e080     04 20 06 F1 | 	add	local02, #4
1e084     10 01 68 FC | 	wrlong	#0, local02
1e088     04 22 06 F1 | 	add	local03, #4
1e08c     04 1E 06 F1 | 	add	local01, #4
1e090     0F 23 62 FC | 	wrlong	local03, local01
1e094     00 FA 05 F6 | 	mov	result1, #0
1e098                 | LR__2991
1e098     A7 F0 03 F6 | 	mov	ptra, fp
1e09c     B2 00 A0 FD | 	call	#popregs_
1e0a0                 | __system____root_readdir_ret
1e0a0     2D 00 64 FD | 	ret
1e0a4                 | 
1e0a4                 | __system____root_closedir
1e0a4     00 FA 05 F6 | 	mov	result1, #0
1e0a8                 | __system____root_closedir_ret
1e0a8     2D 00 64 FD | 	ret
1e0ac                 | 
1e0ac                 | __system____root_stat
1e0ac     0A 01 02 F6 | 	mov	_var01, arg02
1e0b0     00 13 02 F6 | 	mov	arg01, _var01
1e0b4     00 14 06 F6 | 	mov	arg02, #0
1e0b8     30 16 06 F6 | 	mov	arg03, #48
1e0bc     98 00 A0 FD | 	call	#\builtin_bytefill_
1e0c0     08 00 06 F1 | 	add	_var01, #8
1e0c4     08 00 80 FF 
1e0c8     00 FF 6B FC | 	wrlong	##4607, _var01
1e0cc     00 FA 05 F6 | 	mov	result1, #0
1e0d0                 | __system____root_stat_ret
1e0d0     2D 00 64 FD | 	ret
1e0d4                 | 
1e0d4                 | __system___normalizeName
1e0d4     00 00 06 F6 | 	mov	_var01, #0
1e0d8     09 03 02 F6 | 	mov	_var02, arg01
1e0dc     01 05 02 F6 | 	mov	_var03, _var02
1e0e0                 | LR__3000
1e0e0     01 07 CA FA | 	rdbyte	_var04, _var02 wz
1e0e4     5C 01 90 AD |  if_e	jmp	#LR__3019
1e0e8     00 00 0E F2 | 	cmp	_var01, #0 wz
1e0ec     02 07 02 56 |  if_ne	mov	_var04, _var03
1e0f0     01 04 06 51 |  if_ne	add	_var03, #1
1e0f4     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
1e0f8     00 00 06 56 |  if_ne	mov	_var01, #0
1e0fc     01 07 C2 FA | 	rdbyte	_var04, _var02
1e100     2E 06 0E F2 | 	cmp	_var04, #46 wz
1e104     D8 00 90 5D |  if_ne	jmp	#LR__3012
1e108     01 02 06 F1 | 	add	_var02, #1
1e10c     01 07 C2 FA | 	rdbyte	_var04, _var02
1e110     01 02 86 F1 | 	sub	_var02, #1
1e114     2F 06 0E F2 | 	cmp	_var04, #47 wz
1e118     18 00 90 AD |  if_e	jmp	#LR__3001
1e11c     01 02 06 F1 | 	add	_var02, #1
1e120     01 09 C2 FA | 	rdbyte	_var05, _var02
1e124     01 02 86 F1 | 	sub	_var02, #1
1e128     04 0B 02 F6 | 	mov	_var06, _var05
1e12c     07 0A 4E F7 | 	zerox	_var06, #7 wz
1e130     10 00 90 5D |  if_ne	jmp	#LR__3002
1e134                 | LR__3001
1e134     01 0D 02 F6 | 	mov	_var07, _var02
1e138     01 0C 06 F1 | 	add	_var07, #1
1e13c     06 03 02 F6 | 	mov	_var02, _var07
1e140     E0 00 90 FD | 	jmp	#LR__3016
1e144                 | LR__3002
1e144     01 02 06 F1 | 	add	_var02, #1
1e148     01 0D C2 FA | 	rdbyte	_var07, _var02
1e14c     01 02 86 F1 | 	sub	_var02, #1
1e150     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
1e154     2E 06 0E F2 | 	cmp	_var04, #46 wz
1e158     84 00 90 5D |  if_ne	jmp	#LR__3011
1e15c     02 02 06 F1 | 	add	_var02, #2
1e160     01 0D C2 FA | 	rdbyte	_var07, _var02
1e164     02 02 86 F1 | 	sub	_var02, #2
1e168     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
1e16c     2F 06 0E F2 | 	cmp	_var04, #47 wz
1e170     18 00 90 AD |  if_e	jmp	#LR__3003
1e174     02 02 06 F1 | 	add	_var02, #2
1e178     01 09 C2 FA | 	rdbyte	_var05, _var02
1e17c     02 02 86 F1 | 	sub	_var02, #2
1e180     04 0B 02 F6 | 	mov	_var06, _var05
1e184     07 0A 4E F7 | 	zerox	_var06, #7 wz
1e188     54 00 90 5D |  if_ne	jmp	#LR__3010
1e18c                 | LR__3003
1e18c     02 02 06 F1 | 	add	_var02, #2
1e190     09 05 5A F2 | 	cmps	_var03, arg01 wcz
1e194     40 00 90 ED |  if_be	jmp	#LR__3009
1e198     02 0F 02 F6 | 	mov	_var08, _var03
1e19c     01 0E 86 F1 | 	sub	_var08, #1
1e1a0                 | LR__3004
1e1a0     07 07 C2 FA | 	rdbyte	_var04, _var08
1e1a4     2F 06 0E F2 | 	cmp	_var04, #47 wz
1e1a8     0C 00 90 5D |  if_ne	jmp	#LR__3005
1e1ac     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
1e1b0     01 0E 86 11 |  if_a	sub	_var08, #1
1e1b4     E8 FF 9F 1D |  if_a	jmp	#LR__3004
1e1b8                 | LR__3005
1e1b8     97 0C 48 FB | 	callpa	#(@LR__3007-@LR__3006)>>2,fcache_load_ptr_
1e1bc                 | LR__3006
1e1bc     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
1e1c0     10 00 90 ED |  if_be	jmp	#LR__3008
1e1c4     07 07 C2 FA | 	rdbyte	_var04, _var08
1e1c8     2F 06 0E F2 | 	cmp	_var04, #47 wz
1e1cc     01 0E 86 51 |  if_ne	sub	_var08, #1
1e1d0     E8 FF 9F 5D |  if_ne	jmp	#LR__3006
1e1d4                 | LR__3007
1e1d4                 | LR__3008
1e1d4     07 05 02 F6 | 	mov	_var03, _var08
1e1d8                 | LR__3009
1e1d8     01 00 06 F6 | 	mov	_var01, #1
1e1dc     44 00 90 FD | 	jmp	#LR__3016
1e1e0                 | LR__3010
1e1e0                 | LR__3011
1e1e0                 | LR__3012
1e1e0     97 18 48 FB | 	callpa	#(@LR__3014-@LR__3013)>>2,fcache_load_ptr_
1e1e4                 | LR__3013
1e1e4     01 07 CA FA | 	rdbyte	_var04, _var02 wz
1e1e8     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
1e1ec     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
1e1f0     20 00 90 AD |  if_e	jmp	#LR__3015
1e1f4     01 0B 02 F6 | 	mov	_var06, _var02
1e1f8     01 09 02 F6 | 	mov	_var05, _var02
1e1fc     01 08 06 F1 | 	add	_var05, #1
1e200     05 11 C2 FA | 	rdbyte	_var09, _var06
1e204     04 03 02 F6 | 	mov	_var02, _var05
1e208     02 11 42 FC | 	wrbyte	_var09, _var03
1e20c     01 04 06 F1 | 	add	_var03, #1
1e210     D0 FF 9F FD | 	jmp	#LR__3013
1e214                 | LR__3014
1e214                 | LR__3015
1e214     01 07 C2 FA | 	rdbyte	_var04, _var02
1e218     2F 06 0E F2 | 	cmp	_var04, #47 wz
1e21c     C0 FE 9F 5D |  if_ne	jmp	#LR__3000
1e220     01 00 06 F6 | 	mov	_var01, #1
1e224                 | LR__3016
1e224     97 0C 48 FB | 	callpa	#(@LR__3018-@LR__3017)>>2,fcache_load_ptr_
1e228                 | LR__3017
1e228     01 07 C2 FA | 	rdbyte	_var04, _var02
1e22c     2F 06 0E F2 | 	cmp	_var04, #47 wz
1e230     01 0D 02 A6 |  if_e	mov	_var07, _var02
1e234     01 0C 06 A1 |  if_e	add	_var07, #1
1e238     06 03 02 A6 |  if_e	mov	_var02, _var07
1e23c     E8 FF 9F AD |  if_e	jmp	#LR__3017
1e240                 | LR__3018
1e240     9C FE 9F FD | 	jmp	#LR__3000
1e244                 | LR__3019
1e244     02 01 48 FC | 	wrbyte	#0, _var03
1e248                 | __system___normalizeName_ret
1e248     2D 00 64 FD | 	ret
1e24c                 | 
1e24c                 | __system___strrev
1e24c     09 01 CA FA | 	rdbyte	_var01, arg01 wz
1e250     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
1e254     09 03 02 F6 | 	mov	_var02, arg01
1e258     97 1A 48 FB | 	callpa	#(@LR__3022-@LR__3020)>>2,fcache_load_ptr_
1e25c                 | LR__3020
1e25c     01 01 CA FA | 	rdbyte	_var01, _var02 wz
1e260     01 02 06 51 |  if_ne	add	_var02, #1
1e264     F4 FF 9F 5D |  if_ne	jmp	#LR__3020
1e268     01 02 86 F1 | 	sub	_var02, #1
1e26c                 | LR__3021
1e26c     09 03 5A F2 | 	cmps	_var02, arg01 wcz
1e270     1C 00 90 ED |  if_be	jmp	#LR__3023
1e274     09 01 C2 FA | 	rdbyte	_var01, arg01
1e278     01 05 C2 FA | 	rdbyte	_var03, _var02
1e27c     09 05 42 FC | 	wrbyte	_var03, arg01
1e280     01 01 42 FC | 	wrbyte	_var01, _var02
1e284     01 12 06 F1 | 	add	arg01, #1
1e288     01 02 86 F1 | 	sub	_var02, #1
1e28c     DC FF 9F FD | 	jmp	#LR__3021
1e290                 | LR__3022
1e290                 | LR__3023
1e290                 | __system___strrev_ret
1e290     2D 00 64 FD | 	ret
1e294                 | 
1e294                 | __system___fmtpad
1e294     06 4A 05 F6 | 	mov	COUNT_, #6
1e298     A8 00 A0 FD | 	call	#pushregs_
1e29c     09 1F 02 F6 | 	mov	local01, arg01
1e2a0     0A 21 02 F6 | 	mov	local02, arg02
1e2a4     0B 23 02 F6 | 	mov	local03, arg03
1e2a8     10 13 EA F8 | 	getbyte	arg01, local02, #1
1e2ac     16 20 46 F0 | 	shr	local02, #22
1e2b0     03 20 0E F5 | 	and	local02, #3 wz
1e2b4     00 24 06 F6 | 	mov	local04, #0
1e2b8     01 20 06 A6 |  if_e	mov	local02, #1
1e2bc     0C 21 CA F7 | 	test	local02, arg04 wz
1e2c0     00 FA 05 A6 |  if_e	mov	result1, #0
1e2c4     88 00 90 AD |  if_e	jmp	#LR__3033
1e2c8     09 23 C2 F2 | 	subr	local03, arg01
1e2cc     01 22 56 F2 | 	cmps	local03, #1 wc
1e2d0     00 FA 05 C6 |  if_b	mov	result1, #0
1e2d4     78 00 90 CD |  if_b	jmp	#LR__3033
1e2d8     03 20 0E F2 | 	cmp	local02, #3 wz
1e2dc     18 00 90 5D |  if_ne	jmp	#LR__3030
1e2e0     01 18 0E F2 | 	cmp	arg04, #1 wz
1e2e4     6E 20 62 FD | 	wrz	local02
1e2e8     10 23 02 F1 | 	add	local03, local02
1e2ec     11 23 52 F6 | 	abs	local03, local03 wc
1e2f0     01 22 46 F0 | 	shr	local03, #1
1e2f4     11 23 82 F6 | 	negc	local03, local03
1e2f8                 | LR__3030
1e2f8     01 22 56 F2 | 	cmps	local03, #1 wc
1e2fc     4C 00 90 CD |  if_b	jmp	#LR__3032
1e300     11 27 02 F6 | 	mov	local05, local03
1e304                 | LR__3031
1e304     0F 21 02 F6 | 	mov	local02, local01
1e308     0F 29 02 F6 | 	mov	local06, local01
1e30c     13 20 46 F7 | 	zerox	local02, #19
1e310     14 28 46 F0 | 	shr	local06, #20
1e314     02 28 66 F0 | 	shl	local06, #2
1e318     ED 28 02 F1 | 	add	local06, __methods__
1e31c     14 29 02 FB | 	rdlong	local06, local06
1e320     20 12 06 F6 | 	mov	arg01, #32
1e324     F2 22 02 F6 | 	mov	local03, objptr
1e328     10 E5 01 F6 | 	mov	objptr, local02
1e32c     2D 28 62 FD | 	call	local06
1e330     11 E5 01 F6 | 	mov	objptr, local03
1e334     FD 28 02 F6 | 	mov	local06, result1
1e338     00 28 56 F2 | 	cmps	local06, #0 wc
1e33c     14 FB 01 C6 |  if_b	mov	result1, local06
1e340     0C 00 90 CD |  if_b	jmp	#LR__3033
1e344     14 25 02 F1 | 	add	local04, local06
1e348     EE 27 6E FB | 	djnz	local05, #LR__3031
1e34c                 | LR__3032
1e34c     12 FB 01 F6 | 	mov	result1, local04
1e350                 | LR__3033
1e350     A7 F0 03 F6 | 	mov	ptra, fp
1e354     B2 00 A0 FD | 	call	#popregs_
1e358                 | __system___fmtpad_ret
1e358     2D 00 64 FD | 	ret
1e35c                 | 
1e35c                 | __system___uitoa
1e35c     04 4A 05 F6 | 	mov	COUNT_, #4
1e360     A8 00 A0 FD | 	call	#pushregs_
1e364     09 1F 02 F6 | 	mov	local01, arg01
1e368     00 1A 4E F2 | 	cmps	arg05, #0 wz
1e36c     0F 1B 02 F6 | 	mov	arg05, local01
1e370     00 20 06 F6 | 	mov	local02, #0
1e374     37 22 06 56 |  if_ne	mov	local03, #55
1e378     57 22 06 A6 |  if_e	mov	local03, #87
1e37c                 | LR__3040
1e37c     0B 15 12 FD | 	qdiv	arg02, arg03
1e380     19 24 62 FD | 	getqy	local04
1e384     0B 15 12 FD | 	qdiv	arg02, arg03
1e388     0A 24 16 F2 | 	cmp	local04, #10 wc
1e38c     30 24 06 C1 |  if_b	add	local04, #48
1e390     11 25 02 31 |  if_ae	add	local04, local03
1e394     0D 25 42 FC | 	wrbyte	local04, arg05
1e398     01 1A 06 F1 | 	add	arg05, #1
1e39c     01 20 06 F1 | 	add	local02, #1
1e3a0     18 14 62 FD | 	getqx	arg02
1e3a4     00 14 0E F2 | 	cmp	arg02, #0 wz
1e3a8     D0 FF 9F 5D |  if_ne	jmp	#LR__3040
1e3ac     0C 21 12 F2 | 	cmp	local02, arg04 wc
1e3b0     C8 FF 9F CD |  if_b	jmp	#LR__3040
1e3b4     0D 01 48 FC | 	wrbyte	#0, arg05
1e3b8     0F 13 02 F6 | 	mov	arg01, local01
1e3bc     8C FE BF FD | 	call	#__system___strrev
1e3c0     10 FB 01 F6 | 	mov	result1, local02
1e3c4     A7 F0 03 F6 | 	mov	ptra, fp
1e3c8     B2 00 A0 FD | 	call	#popregs_
1e3cc                 | __system___uitoa_ret
1e3cc     2D 00 64 FD | 	ret
1e3d0                 | 
1e3d0                 | __system__disassemble_0381
1e3d0     10 4A 05 F6 | 	mov	COUNT_, #16
1e3d4     A8 00 A0 FD | 	call	#pushregs_
1e3d8     09 1F 02 F6 | 	mov	local01, arg01
1e3dc     0A 21 02 F6 | 	mov	local02, arg02
1e3e0     0B 23 02 F6 | 	mov	local03, arg03
1e3e4     0C 25 02 F6 | 	mov	local04, arg04
1e3e8     0D 27 02 F6 | 	mov	local05, arg05
1e3ec     13 13 52 F6 | 	abs	arg01, local05 wc
1e3f0     1F 28 C6 C9 |  if_b	decod	local06, #31
1e3f4     00 28 06 36 |  if_ae	mov	local06, #0
1e3f8     64 D0 BF FD | 	call	#__system___float_fromuns
1e3fc     14 FB 61 F5 | 	xor	result1, local06
1e400     FD 2A 02 F6 | 	mov	local07, result1
1e404     00 2C 06 F6 | 	mov	local08, #0
1e408     0F 13 02 F6 | 	mov	arg01, local01
1e40c     00 14 06 F6 | 	mov	arg02, #0
1e410     01 16 06 F6 | 	mov	arg03, #1
1e414     80 D8 BF FD | 	call	#__system___float_cmp
1e418     00 FA 0D F2 | 	cmp	result1, #0 wz
1e41c     00 2E 06 A6 |  if_e	mov	local09, #0
1e420     10 01 68 AC |  if_e	wrlong	#0, local02
1e424     11 2F 62 AC |  if_e	wrlong	local09, local03
1e428     8C 01 90 AD |  if_e	jmp	#LR__3062
1e42c     0F 13 02 F6 | 	mov	arg01, local01
1e430     30 DD BF FD | 	call	#__system____builtin_ilogb
1e434     FD 30 02 F6 | 	mov	local10, result1
1e438     0A 26 0E F2 | 	cmp	local05, #10 wz
1e43c     24 00 90 5D |  if_ne	jmp	#LR__3050
1e440     18 2F 02 F6 | 	mov	local09, local10
1e444     01 2E 66 F0 | 	shl	local09, #1
1e448     18 2F 02 F1 | 	add	local09, local10
1e44c     17 31 52 F6 | 	abs	local10, local09 wc
1e450     0A 30 16 FD | 	qdiv	local10, #10
1e454     09 32 06 F6 | 	mov	local11, #9
1e458     18 30 62 FD | 	getqx	local10
1e45c     18 31 82 F6 | 	negc	local10, local10
1e460     04 00 90 FD | 	jmp	#LR__3051
1e464                 | LR__3050
1e464     18 32 06 F6 | 	mov	local11, #24
1e468                 | LR__3051
1e468                 | LR__3052
1e468     08 2C 56 F2 | 	cmps	local08, #8 wc
1e46c     01 2C 06 F1 | 	add	local08, #1
1e470     60 00 90 3D |  if_ae	jmp	#LR__3053
1e474     00 C0 1F FF 
1e478     00 12 06 F6 | 	mov	arg01, ##1065353216
1e47c     15 15 02 F6 | 	mov	arg02, local07
1e480     18 17 02 F6 | 	mov	arg03, local10
1e484     88 E3 BF FD | 	call	#__system___float_pow_n
1e488     FD 14 02 F6 | 	mov	arg02, result1
1e48c     0F 13 02 F6 | 	mov	arg01, local01
1e490     D4 D5 BF FD | 	call	#__system___float_div
1e494     FD 34 02 F6 | 	mov	local12, result1
1e498     1A 13 02 F6 | 	mov	arg01, local12
1e49c     00 C0 1F FF 
1e4a0     00 14 06 F6 | 	mov	arg02, ##1065353216
1e4a4     01 16 06 F6 | 	mov	arg03, #1
1e4a8     EC D7 BF FD | 	call	#__system___float_cmp
1e4ac     00 FA 55 F2 | 	cmps	result1, #0 wc
1e4b0     01 30 86 C1 |  if_b	sub	local10, #1
1e4b4     B0 FF 9F CD |  if_b	jmp	#LR__3052
1e4b8     15 15 02 F6 | 	mov	arg02, local07
1e4bc     1A 13 02 F6 | 	mov	arg01, local12
1e4c0     01 16 66 F6 | 	neg	arg03, #1
1e4c4     D0 D7 BF FD | 	call	#__system___float_cmp
1e4c8     00 FA 55 F2 | 	cmps	result1, #0 wc
1e4cc     01 30 06 31 |  if_ae	add	local10, #1
1e4d0     94 FF 9F 3D |  if_ae	jmp	#LR__3052
1e4d4                 | LR__3053
1e4d4     1A 13 02 F6 | 	mov	arg01, local12
1e4d8     88 DC BF FD | 	call	#__system____builtin_ilogb
1e4dc     FD 36 02 F6 | 	mov	local13, result1
1e4e0     1A 39 02 F6 | 	mov	local14, local12
1e4e4     17 39 06 F4 | 	bitl	local14, #279
1e4e8     17 38 26 F4 | 	bith	local14, #23
1e4ec     1B 39 62 F0 | 	shl	local14, local13
1e4f0     02 26 0E F2 | 	cmp	local05, #2 wz
1e4f4     02 24 66 A0 |  if_e	shl	local04, #2
1e4f8     00 3A 06 F6 | 	mov	local15, #0
1e4fc     00 24 56 F2 | 	cmps	local04, #0 wc
1e500     10 00 90 3D |  if_ae	jmp	#LR__3054
1e504     18 25 C2 F2 | 	subr	local04, local10
1e508     00 24 56 F2 | 	cmps	local04, #0 wc
1e50c     A0 00 90 CD |  if_b	jmp	#LR__3061
1e510     04 00 90 FD | 	jmp	#LR__3055
1e514                 | LR__3054
1e514     01 24 06 F1 | 	add	local04, #1
1e518                 | LR__3055
1e518     19 25 7A F3 | 	fles	local04, local11 wcz
1e51c     01 3C 06 F6 | 	mov	local16, #1
1e520     97 22 48 FB | 	callpa	#(@LR__3057-@LR__3056)>>2,fcache_load_ptr_
1e524                 | LR__3056
1e524     00 40 00 FF 
1e528     00 3A 16 F2 | 	cmp	local15, ##8388608 wc
1e52c     38 00 90 3D |  if_ae	jmp	#LR__3058
1e530     01 24 56 F2 | 	cmps	local04, #1 wc
1e534     01 24 86 F1 | 	sub	local04, #1
1e538     2C 00 90 CD |  if_b	jmp	#LR__3058
1e53c     13 3B 02 FD | 	qmul	local15, local05
1e540     1C 37 02 F6 | 	mov	local13, local14
1e544     17 36 46 F0 | 	shr	local13, #23
1e548     17 39 06 F4 | 	bitl	local14, #279
1e54c     18 3A 62 FD | 	getqx	local15
1e550     13 3D 02 FD | 	qmul	local16, local05
1e554     18 3C 62 FD | 	getqx	local16
1e558     13 39 02 FD | 	qmul	local14, local05
1e55c     1B 3B 02 F1 | 	add	local15, local13
1e560     18 38 62 FD | 	getqx	local14
1e564     BC FF 9F FD | 	jmp	#LR__3056
1e568                 | LR__3057
1e568                 | LR__3058
1e568     13 2F 02 F6 | 	mov	local09, local05
1e56c     17 2E 66 F0 | 	shl	local09, #23
1e570     17 37 52 F6 | 	abs	local13, local09 wc
1e574     01 36 46 F0 | 	shr	local13, #1
1e578     1B 37 82 F6 | 	negc	local13, local13
1e57c     1B 39 1A F2 | 	cmp	local14, local13 wcz
1e580     20 00 90 1D |  if_a	jmp	#LR__3059
1e584     17 26 66 F0 | 	shl	local05, #23
1e588     13 37 52 F6 | 	abs	local13, local05 wc
1e58c     01 36 46 F0 | 	shr	local13, #1
1e590     1B 37 82 F6 | 	negc	local13, local13
1e594     1B 39 0A F2 | 	cmp	local14, local13 wz
1e598     14 00 90 5D |  if_ne	jmp	#LR__3060
1e59c     01 3A CE F7 | 	test	local15, #1 wz
1e5a0     0C 00 90 AD |  if_e	jmp	#LR__3060
1e5a4                 | LR__3059
1e5a4     01 3A 06 F1 | 	add	local15, #1
1e5a8     1E 3B 0A F2 | 	cmp	local15, local16 wz
1e5ac     01 30 06 A1 |  if_e	add	local10, #1
1e5b0                 | LR__3060
1e5b0                 | LR__3061
1e5b0     10 3B 62 FC | 	wrlong	local15, local02
1e5b4     11 31 62 FC | 	wrlong	local10, local03
1e5b8                 | LR__3062
1e5b8     A7 F0 03 F6 | 	mov	ptra, fp
1e5bc     B2 00 A0 FD | 	call	#popregs_
1e5c0                 | __system__disassemble_0381_ret
1e5c0     2D 00 64 FD | 	ret
1e5c4                 | 
1e5c4                 | __system__emitsign_0383
1e5c4     00 FA 05 F6 | 	mov	result1, #0
1e5c8     00 14 0E F2 | 	cmp	arg02, #0 wz
1e5cc     09 01 02 56 |  if_ne	mov	_var01, arg01
1e5d0     01 12 06 51 |  if_ne	add	arg01, #1
1e5d4     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
1e5d8     01 FA 05 56 |  if_ne	mov	result1, #1
1e5dc     00 16 0E F2 | 	cmp	arg03, #0 wz
1e5e0     09 61 48 5C |  if_ne	wrbyte	#48, arg01
1e5e4     01 12 06 51 |  if_ne	add	arg01, #1
1e5e8     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
1e5ec     02 FA 05 51 |  if_ne	add	result1, #2
1e5f0                 | __system__emitsign_0383_ret
1e5f0     2D 00 64 FD | 	ret
1e5f4                 | 
1e5f4                 | __system___gettxfunc
1e5f4     01 4A 05 F6 | 	mov	COUNT_, #1
1e5f8     A8 00 A0 FD | 	call	#pushregs_
1e5fc     A0 F8 BF FD | 	call	#__system____getftab
1e600     FD 1E 0A F6 | 	mov	local01, result1 wz
1e604     10 00 90 AD |  if_e	jmp	#LR__3070
1e608     08 1E 06 F1 | 	add	local01, #8
1e60c     0F 15 0A FB | 	rdlong	arg02, local01 wz
1e610     08 1E 86 F1 | 	sub	local01, #8
1e614     08 00 90 5D |  if_ne	jmp	#LR__3071
1e618                 | LR__3070
1e618     00 FA 05 F6 | 	mov	result1, #0
1e61c     0C 00 90 FD | 	jmp	#LR__3072
1e620                 | LR__3071
1e620     00 28 03 FF 
1e624     00 1E 46 F5 | 	or	local01, ##105906176
1e628     0F FB 01 F6 | 	mov	result1, local01
1e62c                 | LR__3072
1e62c     A7 F0 03 F6 | 	mov	ptra, fp
1e630     B2 00 A0 FD | 	call	#popregs_
1e634                 | __system___gettxfunc_ret
1e634     2D 00 64 FD | 	ret
1e638                 | 
1e638                 | __system___getrxfunc
1e638     01 4A 05 F6 | 	mov	COUNT_, #1
1e63c     A8 00 A0 FD | 	call	#pushregs_
1e640     5C F8 BF FD | 	call	#__system____getftab
1e644     FD 1E 0A F6 | 	mov	local01, result1 wz
1e648     10 00 90 AD |  if_e	jmp	#LR__3080
1e64c     08 1E 06 F1 | 	add	local01, #8
1e650     0F 15 0A FB | 	rdlong	arg02, local01 wz
1e654     08 1E 86 F1 | 	sub	local01, #8
1e658     08 00 90 5D |  if_ne	jmp	#LR__3081
1e65c                 | LR__3080
1e65c     00 FA 05 F6 | 	mov	result1, #0
1e660     0C 00 90 FD | 	jmp	#LR__3082
1e664                 | LR__3081
1e664     00 30 03 FF 
1e668     00 1E 46 F5 | 	or	local01, ##106954752
1e66c     0F FB 01 F6 | 	mov	result1, local01
1e670                 | LR__3082
1e670     A7 F0 03 F6 | 	mov	ptra, fp
1e674     B2 00 A0 FD | 	call	#popregs_
1e678                 | __system___getrxfunc_ret
1e678     2D 00 64 FD | 	ret
1e67c                 | 
1e67c                 | __system___getiolock_0423
1e67c     01 4A 05 F6 | 	mov	COUNT_, #1
1e680     A8 00 A0 FD | 	call	#pushregs_
1e684     18 F8 BF FD | 	call	#__system____getftab
1e688     FD 1E 0A F6 | 	mov	local01, result1 wz
1e68c     10 00 90 AD |  if_e	jmp	#LR__3090
1e690     08 1E 06 F1 | 	add	local01, #8
1e694     0F FB 09 FB | 	rdlong	result1, local01 wz
1e698     08 1E 86 F1 | 	sub	local01, #8
1e69c     18 00 90 5D |  if_ne	jmp	#LR__3091
1e6a0                 | LR__3090
1e6a0     01 00 00 FF 
1e6a4     D4 E8 05 F1 | 	add	ptr___system__dat__, ##724
1e6a8     F4 FA 01 F6 | 	mov	result1, ptr___system__dat__
1e6ac     01 00 00 FF 
1e6b0     D4 E8 85 F1 | 	sub	ptr___system__dat__, ##724
1e6b4     08 00 90 FD | 	jmp	#LR__3092
1e6b8                 | LR__3091
1e6b8     0C 1E 06 F1 | 	add	local01, #12
1e6bc     0F FB 01 F6 | 	mov	result1, local01
1e6c0                 | LR__3092
1e6c0     A7 F0 03 F6 | 	mov	ptra, fp
1e6c4     B2 00 A0 FD | 	call	#popregs_
1e6c8                 | __system___getiolock_0423_ret
1e6c8     2D 00 64 FD | 	ret
1e6cc                 | 
1e6cc                 | __system____ScanForChar
1e6cc     09 01 02 F6 | 	mov	_var01, arg01
1e6d0     09 03 02 F6 | 	mov	_var02, arg01
1e6d4     97 06 48 FB | 	callpa	#(@LR__3101-@LR__3100)>>2,fcache_load_ptr_
1e6d8                 | LR__3100
1e6d8     01 FB C9 FA | 	rdbyte	result1, _var02 wz
1e6dc     01 02 06 51 |  if_ne	add	_var02, #1
1e6e0     F4 FF 9F 5D |  if_ne	jmp	#LR__3100
1e6e4                 | LR__3101
1e6e4     09 03 82 F1 | 	sub	_var02, arg01
1e6e8     01 FB 01 F6 | 	mov	result1, _var02
1e6ec     FD 12 0A F6 | 	mov	arg01, result1 wz
1e6f0     00 FA 05 A6 |  if_e	mov	result1, #0
1e6f4     B8 00 90 AD |  if_e	jmp	#LR__3108
1e6f8     0A 05 02 F6 | 	mov	_var03, arg02
1e6fc     07 04 4E F7 | 	zerox	_var03, #7 wz
1e700     00 FA 05 A6 |  if_e	mov	result1, #0
1e704     A8 00 90 AD |  if_e	jmp	#LR__3108
1e708     01 16 16 F2 | 	cmp	arg03, #1 wc
1e70c     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
1e710     01 16 06 86 |  if_c_and_z	mov	arg03, #1
1e714     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
1e718     94 00 90 4D |  if_c_and_nz	jmp	#LR__3108
1e71c     09 17 1A F2 | 	cmp	arg03, arg01 wcz
1e720     10 00 90 ED |  if_be	jmp	#LR__3102
1e724     00 18 0E F2 | 	cmp	arg04, #0 wz
1e728     00 FA 05 A6 |  if_e	mov	result1, #0
1e72c     80 00 90 AD |  if_e	jmp	#LR__3108
1e730     09 17 02 F6 | 	mov	arg03, arg01
1e734                 | LR__3102
1e734     01 16 86 F1 | 	sub	arg03, #1
1e738     00 18 0E F2 | 	cmp	arg04, #0 wz
1e73c     38 00 90 5D |  if_ne	jmp	#LR__3104
1e740     0B 07 02 F6 | 	mov	_var04, arg03
1e744     09 09 02 F6 | 	mov	_var05, arg01
1e748                 | LR__3103
1e748     04 07 12 F2 | 	cmp	_var04, _var05 wc
1e74c     5C 00 90 3D |  if_ae	jmp	#LR__3107
1e750     03 05 02 F6 | 	mov	_var03, _var04
1e754     00 05 02 F1 | 	add	_var03, _var01
1e758     02 05 C2 FA | 	rdbyte	_var03, _var03
1e75c     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
1e760     0C 05 0A F2 | 	cmp	_var03, arg04 wz
1e764     01 06 06 A1 |  if_e	add	_var04, #1
1e768     03 FB 01 A6 |  if_e	mov	result1, _var04
1e76c     40 00 90 AD |  if_e	jmp	#LR__3108
1e770     01 06 06 F1 | 	add	_var04, #1
1e774     D0 FF 9F FD | 	jmp	#LR__3103
1e778                 | LR__3104
1e778     0B 07 02 F6 | 	mov	_var04, arg03
1e77c                 | LR__3105
1e77c     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
1e780     28 00 90 1D |  if_a	jmp	#LR__3106
1e784     03 09 02 F6 | 	mov	_var05, _var04
1e788     00 09 02 F1 | 	add	_var05, _var01
1e78c     04 05 C2 FA | 	rdbyte	_var03, _var05
1e790     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
1e794     04 05 0A F2 | 	cmp	_var03, _var05 wz
1e798     01 06 06 A1 |  if_e	add	_var04, #1
1e79c     03 FB 01 A6 |  if_e	mov	result1, _var04
1e7a0     0C 00 90 AD |  if_e	jmp	#LR__3108
1e7a4     01 06 86 F1 | 	sub	_var04, #1
1e7a8     D0 FF 9F FD | 	jmp	#LR__3105
1e7ac                 | LR__3106
1e7ac                 | LR__3107
1e7ac     00 FA 05 F6 | 	mov	result1, #0
1e7b0                 | LR__3108
1e7b0                 | __system____ScanForChar_ret
1e7b0     2D 00 64 FD | 	ret
1e7b4                 | 
1e7b4                 | __system___basic_dir
1e7b4     05 4A 05 F6 | 	mov	COUNT_, #5
1e7b8     A8 00 A0 FD | 	call	#pushregs_
1e7bc     4C F0 07 F1 | 	add	ptra, #76
1e7c0     04 4E 05 F1 | 	add	fp, #4
1e7c4     A7 12 62 FC | 	wrlong	arg01, fp
1e7c8     04 4E 05 F1 | 	add	fp, #4
1e7cc     A7 14 62 FC | 	wrlong	arg02, fp
1e7d0     04 4E 85 F1 | 	sub	fp, #4
1e7d4     A7 14 0A FB | 	rdlong	arg02, fp wz
1e7d8     04 4E 85 F1 | 	sub	fp, #4
1e7dc     04 4E 05 51 |  if_ne	add	fp, #4
1e7e0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1e7e4     04 4E 85 51 |  if_ne	sub	fp, #4
1e7e8     0F 21 CA 5A |  if_ne	rdbyte	local02, local01 wz
1e7ec     70 00 90 AD |  if_e	jmp	#LR__3110
1e7f0     03 00 00 FF 
1e7f4     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1e7f8     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1e7fc     03 00 00 FF 
1e800     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1e804     03 00 00 5F 
1e808     28 E9 05 51 |  if_ne	add	ptr___system__dat__, ##1832
1e80c     F4 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
1e810     03 00 00 5F 
1e814     28 E9 85 51 |  if_ne	sub	ptr___system__dat__, ##1832
1e818     14 EA BF 5D |  if_ne	call	#__system__closedir
1e81c     41 01 00 FF 
1e820     F0 12 06 F6 | 	mov	arg01, ##@LR__4268
1e824     1C E9 BF FD | 	call	#__system__opendir
1e828     03 00 00 FF 
1e82c     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1e830     F4 FA 61 FC | 	wrlong	result1, ptr___system__dat__
1e834     08 4E 05 F1 | 	add	fp, #8
1e838     A7 20 02 FB | 	rdlong	local02, fp
1e83c     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1e840     F4 20 62 FC | 	wrlong	local02, ptr___system__dat__
1e844     04 4E 85 F1 | 	sub	fp, #4
1e848     A7 20 02 FB | 	rdlong	local02, fp
1e84c     04 4E 85 F1 | 	sub	fp, #4
1e850     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1e854     F4 20 62 FC | 	wrlong	local02, ptr___system__dat__
1e858     03 00 00 FF 
1e85c     30 E9 85 F1 | 	sub	ptr___system__dat__, ##1840
1e860                 | LR__3110
1e860     03 00 00 FF 
1e864     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1e868     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1e86c     03 00 00 FF 
1e870     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1e874     41 01 00 AF 
1e878     F2 FA 05 A6 |  if_e	mov	result1, ##@LR__4269
1e87c     84 02 90 AD |  if_e	jmp	#LR__3123
1e880                 | LR__3111
1e880     03 00 00 FF 
1e884     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1e888     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1e88c     03 00 00 FF 
1e890     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1e894     0C EA BF FD | 	call	#__system__readdir
1e898     0C 4E 05 F1 | 	add	fp, #12
1e89c     A7 FA 61 FC | 	wrlong	result1, fp
1e8a0     0C 4E 85 F1 | 	sub	fp, #12
1e8a4     00 FA 0D F2 | 	cmp	result1, #0 wz
1e8a8     38 00 90 5D |  if_ne	jmp	#LR__3112
1e8ac     03 00 00 FF 
1e8b0     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1e8b4     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1e8b8     03 00 00 FF 
1e8bc     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1e8c0     6C E9 BF FD | 	call	#__system__closedir
1e8c4     03 00 00 FF 
1e8c8     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1e8cc     F4 00 68 FC | 	wrlong	#0, ptr___system__dat__
1e8d0     03 00 00 FF 
1e8d4     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1e8d8     41 01 00 FF 
1e8dc     F4 FA 05 F6 | 	mov	result1, ##@LR__4270
1e8e0     20 02 90 FD | 	jmp	#LR__3123
1e8e4                 | LR__3112
1e8e4     0C 4E 05 F1 | 	add	fp, #12
1e8e8     A7 12 02 FB | 	rdlong	arg01, fp
1e8ec     0C 4E 85 F1 | 	sub	fp, #12
1e8f0     03 00 00 FF 
1e8f4     30 E9 05 F1 | 	add	ptr___system__dat__, ##1840
1e8f8     F4 14 02 FB | 	rdlong	arg02, ptr___system__dat__
1e8fc     03 00 00 FF 
1e900     30 E9 85 F1 | 	sub	ptr___system__dat__, ##1840
1e904     48 07 B0 FD | 	call	#__system___pat_match
1e908     00 FA 0D F2 | 	cmp	result1, #0 wz
1e90c     70 FF 9F AD |  if_e	jmp	#LR__3111
1e910     03 00 00 FF 
1e914     2C E9 05 F1 | 	add	ptr___system__dat__, ##1836
1e918     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1e91c     03 00 00 FF 
1e920     2C E9 85 F1 | 	sub	ptr___system__dat__, ##1836
1e924     78 01 90 AD |  if_e	jmp	#LR__3119
1e928     0C 4E 05 F1 | 	add	fp, #12
1e92c     A7 12 02 FB | 	rdlong	arg01, fp
1e930     04 4E 05 F1 | 	add	fp, #4
1e934     A7 14 02 F6 | 	mov	arg02, fp
1e938     10 4E 85 F1 | 	sub	fp, #16
1e93c     68 F2 BF FD | 	call	#__system__stat
1e940     40 4E 05 F1 | 	add	fp, #64
1e944     A7 FA 61 FC | 	wrlong	result1, fp
1e948     40 4E 85 F1 | 	sub	fp, #64
1e94c     00 FA 0D F2 | 	cmp	result1, #0 wz
1e950     41 01 00 5F 
1e954     F6 FA 05 56 |  if_ne	mov	result1, ##@LR__4271
1e958     A8 01 90 5D |  if_ne	jmp	#LR__3123
1e95c     18 4E 05 F1 | 	add	fp, #24
1e960     A7 20 02 FB | 	rdlong	local02, fp
1e964     78 00 00 FF 
1e968     00 20 06 F5 | 	and	local02, ##61440
1e96c     2C 4E 05 F1 | 	add	fp, #44
1e970     A7 20 62 FC | 	wrlong	local02, fp
1e974     38 4E 85 F1 | 	sub	fp, #56
1e978     A7 20 02 FB | 	rdlong	local02, fp
1e97c     0C 4E 85 F1 | 	sub	fp, #12
1e980     10 21 C2 FA | 	rdbyte	local02, local02
1e984     2E 20 0E F2 | 	cmp	local02, #46 wz
1e988     08 4E 05 A1 |  if_e	add	fp, #8
1e98c     A7 04 68 AC |  if_e	wrlong	#2, fp
1e990     08 4E C5 F3 | 	sumz	fp, #8
1e994     A7 00 68 5C |  if_ne	wrlong	#0, fp
1e998     08 4E 85 51 |  if_ne	sub	fp, #8
1e99c     44 4E 05 F1 | 	add	fp, #68
1e9a0     A7 20 02 FB | 	rdlong	local02, fp
1e9a4     44 4E 85 F1 | 	sub	fp, #68
1e9a8     08 00 00 FF 
1e9ac     00 20 0E F2 | 	cmp	local02, ##4096 wz
1e9b0     18 00 90 5D |  if_ne	jmp	#LR__3113
1e9b4     08 4E 05 F1 | 	add	fp, #8
1e9b8     A7 20 02 FB | 	rdlong	local02, fp
1e9bc     10 20 46 F5 | 	or	local02, #16
1e9c0     A7 20 62 FC | 	wrlong	local02, fp
1e9c4     08 4E 85 F1 | 	sub	fp, #8
1e9c8     AC 00 90 FD | 	jmp	#LR__3118
1e9cc                 | LR__3113
1e9cc     44 4E 05 F1 | 	add	fp, #68
1e9d0     A7 20 02 FB | 	rdlong	local02, fp
1e9d4     44 4E 85 F1 | 	sub	fp, #68
1e9d8     10 00 00 FF 
1e9dc     00 20 0E F2 | 	cmp	local02, ##8192 wz
1e9e0     44 4E 05 51 |  if_ne	add	fp, #68
1e9e4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1e9e8     44 4E 85 51 |  if_ne	sub	fp, #68
1e9ec     18 00 00 5F 
1e9f0     00 1E 0E 52 |  if_ne	cmp	local01, ##12288 wz
1e9f4     44 4E 05 51 |  if_ne	add	fp, #68
1e9f8     0F 23 02 56 |  if_ne	mov	local03, local01
1e9fc     44 4E 85 51 |  if_ne	sub	fp, #68
1ea00     20 00 00 5F 
1ea04     00 22 0E 52 |  if_ne	cmp	local03, ##16384 wz
1ea08     18 00 90 5D |  if_ne	jmp	#LR__3114
1ea0c     08 4E 05 F1 | 	add	fp, #8
1ea10     A7 20 02 FB | 	rdlong	local02, fp
1ea14     04 20 46 F5 | 	or	local02, #4
1ea18     A7 20 62 FC | 	wrlong	local02, fp
1ea1c     08 4E 85 F1 | 	sub	fp, #8
1ea20     54 00 90 FD | 	jmp	#LR__3117
1ea24                 | LR__3114
1ea24     18 4E 05 F1 | 	add	fp, #24
1ea28     A7 20 02 FB | 	rdlong	local02, fp
1ea2c     18 4E 85 F1 | 	sub	fp, #24
1ea30     92 20 CE F7 | 	test	local02, #146 wz
1ea34     18 00 90 5D |  if_ne	jmp	#LR__3115
1ea38     08 4E 05 F1 | 	add	fp, #8
1ea3c     A7 20 02 FB | 	rdlong	local02, fp
1ea40     01 20 46 F5 | 	or	local02, #1
1ea44     A7 20 62 FC | 	wrlong	local02, fp
1ea48     08 4E 85 F1 | 	sub	fp, #8
1ea4c     28 00 90 FD | 	jmp	#LR__3116
1ea50                 | LR__3115
1ea50     44 4E 05 F1 | 	add	fp, #68
1ea54     A7 24 02 FB | 	rdlong	local04, fp
1ea58     44 4E 85 F1 | 	sub	fp, #68
1ea5c     08 00 00 FF 
1ea60     00 24 0E F2 | 	cmp	local04, ##4096 wz
1ea64     08 4E 05 51 |  if_ne	add	fp, #8
1ea68     A7 24 02 5B |  if_ne	rdlong	local04, fp
1ea6c     20 24 46 55 |  if_ne	or	local04, #32
1ea70     A7 24 62 5C |  if_ne	wrlong	local04, fp
1ea74     08 4E 85 51 |  if_ne	sub	fp, #8
1ea78                 | LR__3116
1ea78                 | LR__3117
1ea78                 | LR__3118
1ea78     08 4E 05 F1 | 	add	fp, #8
1ea7c     A7 24 02 FB | 	rdlong	local04, fp
1ea80     08 4E 85 F1 | 	sub	fp, #8
1ea84     03 00 00 FF 
1ea88     2C E9 05 F1 | 	add	ptr___system__dat__, ##1836
1ea8c     F4 1E 02 FB | 	rdlong	local01, ptr___system__dat__
1ea90     03 00 00 FF 
1ea94     2C E9 85 F1 | 	sub	ptr___system__dat__, ##1836
1ea98     0F 25 CA F7 | 	test	local04, local01 wz
1ea9c     E0 FD 9F AD |  if_e	jmp	#LR__3111
1eaa0                 | LR__3119
1eaa0     0C 4E 05 F1 | 	add	fp, #12
1eaa4     A7 12 02 FB | 	rdlong	arg01, fp
1eaa8     0C 4E 85 F1 | 	sub	fp, #12
1eaac     09 27 02 F6 | 	mov	local05, arg01
1eab0     97 06 48 FB | 	callpa	#(@LR__3121-@LR__3120)>>2,fcache_load_ptr_
1eab4                 | LR__3120
1eab4     13 FB C9 FA | 	rdbyte	result1, local05 wz
1eab8     01 26 06 51 |  if_ne	add	local05, #1
1eabc     F4 FF 9F 5D |  if_ne	jmp	#LR__3120
1eac0                 | LR__3121
1eac0     13 13 C2 F2 | 	subr	arg01, local05
1eac4     01 12 06 F1 | 	add	arg01, #1
1eac8     64 E0 BF FD | 	call	#__system___gc_alloc_managed
1eacc     48 4E 05 F1 | 	add	fp, #72
1ead0     A7 FA 61 FC | 	wrlong	result1, fp
1ead4     48 4E 85 F1 | 	sub	fp, #72
1ead8     00 FA 0D F2 | 	cmp	result1, #0 wz
1eadc     18 00 90 AD |  if_e	jmp	#LR__3122
1eae0     48 4E 05 F1 | 	add	fp, #72
1eae4     A7 12 02 FB | 	rdlong	arg01, fp
1eae8     3C 4E 85 F1 | 	sub	fp, #60
1eaec     A7 14 02 FB | 	rdlong	arg02, fp
1eaf0     0C 4E 85 F1 | 	sub	fp, #12
1eaf4     34 A2 BF FD | 	call	#__system____builtin_strcpy
1eaf8                 | LR__3122
1eaf8     48 4E 05 F1 | 	add	fp, #72
1eafc     A7 FA 01 FB | 	rdlong	result1, fp
1eb00     48 4E 85 F1 | 	sub	fp, #72
1eb04                 | LR__3123
1eb04     A7 F0 03 F6 | 	mov	ptra, fp
1eb08     B2 00 A0 FD | 	call	#popregs_
1eb0c                 | __system___basic_dir_ret
1eb0c     2D 00 64 FD | 	ret
1eb10                 | 
1eb10                 | __system__pack_0489
1eb10     09 01 02 F6 | 	mov	_var01, arg01
1eb14     7F 16 06 F1 | 	add	arg03, #127
1eb18     04 18 CE F7 | 	test	arg04, #4 wz
1eb1c     10 00 90 AD |  if_e	jmp	#LR__3130
1eb20     00 00 0E F2 | 	cmp	_var01, #0 wz
1eb24     16 00 C6 A9 |  if_e	decod	_var01, #22
1eb28     F7 00 26 F4 | 	bith	_var01, #247
1eb2c     B4 00 90 FD | 	jmp	#LR__3139
1eb30                 | LR__3130
1eb30     02 18 CE F7 | 	test	arg04, #2 wz
1eb34     00 C0 3F 5F 
1eb38     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
1eb3c     00 14 06 56 |  if_ne	mov	arg02, #0
1eb40     A0 00 90 5D |  if_ne	jmp	#LR__3138
1eb44     08 18 CE F7 | 	test	arg04, #8 wz
1eb48     00 00 06 56 |  if_ne	mov	_var01, #0
1eb4c     94 00 90 5D |  if_ne	jmp	#LR__3137
1eb50     FF 16 56 F2 | 	cmps	arg03, #255 wc
1eb54     00 C0 3F 3F 
1eb58     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
1eb5c     00 14 06 36 |  if_ae	mov	arg02, #0
1eb60     80 00 90 3D |  if_ae	jmp	#LR__3136
1eb64     01 16 56 F2 | 	cmps	arg03, #1 wc
1eb68     6C 00 90 3D |  if_ae	jmp	#LR__3134
1eb6c     01 14 46 F0 | 	shr	arg02, #1
1eb70     00 03 02 F6 | 	mov	_var02, _var01
1eb74     01 02 06 F5 | 	and	_var02, #1
1eb78     1F 02 66 F0 | 	shl	_var02, #31
1eb7c     01 15 42 F5 | 	or	arg02, _var02
1eb80     01 00 46 F0 | 	shr	_var01, #1
1eb84     97 1E 48 FB | 	callpa	#(@LR__3132-@LR__3131)>>2,fcache_load_ptr_
1eb88                 | LR__3131
1eb88     00 16 56 F2 | 	cmps	arg03, #0 wc
1eb8c     34 00 90 3D |  if_ae	jmp	#LR__3133
1eb90     00 00 0E F2 | 	cmp	_var01, #0 wz
1eb94     2C 00 90 AD |  if_e	jmp	#LR__3133
1eb98     0A 13 02 F6 | 	mov	arg01, arg02
1eb9c     01 12 06 F5 | 	and	arg01, #1
1eba0     01 16 06 F1 | 	add	arg03, #1
1eba4     01 14 46 F0 | 	shr	arg02, #1
1eba8     00 03 02 F6 | 	mov	_var02, _var01
1ebac     01 02 06 F5 | 	and	_var02, #1
1ebb0     1F 02 66 F0 | 	shl	_var02, #31
1ebb4     01 15 42 F5 | 	or	arg02, _var02
1ebb8     09 15 42 F5 | 	or	arg02, arg01
1ebbc     01 00 46 F0 | 	shr	_var01, #1
1ebc0     C4 FF 9F FD | 	jmp	#LR__3131
1ebc4                 | LR__3132
1ebc4                 | LR__3133
1ebc4     00 16 56 F2 | 	cmps	arg03, #0 wc
1ebc8     18 00 90 3D |  if_ae	jmp	#LR__3135
1ebcc     00 14 0E F2 | 	cmp	arg02, #0 wz
1ebd0     6F 14 62 FD | 	wrnz	arg02
1ebd4     0C 00 90 FD | 	jmp	#LR__3135
1ebd8                 | LR__3134
1ebd8     17 01 06 F4 | 	bitl	_var01, #279
1ebdc     17 16 66 F0 | 	shl	arg03, #23
1ebe0     0B 01 42 F5 | 	or	_var01, arg03
1ebe4                 | LR__3135
1ebe4                 | LR__3136
1ebe4                 | LR__3137
1ebe4                 | LR__3138
1ebe4                 | LR__3139
1ebe4     01 00 CE F7 | 	test	_var01, #1 wz
1ebe8     01 14 46 55 |  if_ne	or	arg02, #1
1ebec     0A 17 02 F6 | 	mov	arg03, arg02
1ebf0     00 02 06 F6 | 	mov	_var02, #0
1ebf4     FF FF 3F FF 
1ebf8     FF 15 06 F1 | 	add	arg02, ##2147483647
1ebfc     0B 15 12 F2 | 	cmp	arg02, arg03 wc
1ec00     01 02 06 C6 |  if_b	mov	_var02, #1
1ec04     01 01 02 F1 | 	add	_var01, _var02
1ec08     01 18 CE F7 | 	test	arg04, #1 wz
1ec0c     1F 00 26 54 |  if_ne	bith	_var01, #31
1ec10     00 FB 01 F6 | 	mov	result1, _var01
1ec14                 | __system__pack_0489_ret
1ec14     2D 00 64 FD | 	ret
1ec18                 | 
1ec18                 | __system___rxtxioctl_0579
1ec18     00 15 0E F2 | 	cmp	arg02, #256 wz
1ec1c     0C 00 90 AD |  if_e	jmp	#LR__3140
1ec20     01 15 0E F2 | 	cmp	arg02, #257 wz
1ec24     1C 00 90 AD |  if_e	jmp	#LR__3141
1ec28     30 00 90 FD | 	jmp	#LR__3142
1ec2c                 | LR__3140
1ec2c     08 E8 05 F1 | 	add	ptr___system__dat__, #8
1ec30     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1ec34     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
1ec38     0B FB 61 FC | 	wrlong	result1, arg03
1ec3c     00 FA 05 F6 | 	mov	result1, #0
1ec40     28 00 90 FD | 	jmp	#LR__3143
1ec44                 | LR__3141
1ec44     0B 13 02 FB | 	rdlong	arg01, arg03
1ec48     08 E8 05 F1 | 	add	ptr___system__dat__, #8
1ec4c     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1ec50     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
1ec54     00 FA 05 F6 | 	mov	result1, #0
1ec58     10 00 90 FD | 	jmp	#LR__3143
1ec5c                 | LR__3142
1ec5c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1ec60     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
1ec64     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1ec68     01 FA 65 F6 | 	neg	result1, #1
1ec6c                 | LR__3143
1ec6c                 | __system___rxtxioctl_0579_ret
1ec6c     2D 00 64 FD | 	ret
1ec70                 | 
1ec70                 | __system____dummy_flush_0580
1ec70     00 FA 05 F6 | 	mov	result1, #0
1ec74                 | __system____dummy_flush_0580_ret
1ec74     2D 00 64 FD | 	ret
1ec78                 | 
1ec78                 | __system___vfsread
1ec78     03 4A 05 F6 | 	mov	COUNT_, #3
1ec7c     A8 00 A0 FD | 	call	#pushregs_
1ec80     28 F0 07 F1 | 	add	ptra, #40
1ec84     04 4E 05 F1 | 	add	fp, #4
1ec88     A7 12 62 FC | 	wrlong	arg01, fp
1ec8c     04 4E 05 F1 | 	add	fp, #4
1ec90     A7 14 62 FC | 	wrlong	arg02, fp
1ec94     04 4E 05 F1 | 	add	fp, #4
1ec98     A7 16 62 FC | 	wrlong	arg03, fp
1ec9c     04 4E 85 F1 | 	sub	fp, #4
1eca0     A7 FA 01 FB | 	rdlong	result1, fp
1eca4     14 4E 05 F1 | 	add	fp, #20
1eca8     A7 FA 61 FC | 	wrlong	result1, fp
1ecac     04 4E 05 F1 | 	add	fp, #4
1ecb0     A7 00 68 FC | 	wrlong	#0, fp
1ecb4     1C 4E 85 F1 | 	sub	fp, #28
1ecb8     A7 12 02 FB | 	rdlong	arg01, fp
1ecbc     04 4E 85 F1 | 	sub	fp, #4
1ecc0     08 12 06 F1 | 	add	arg01, #8
1ecc4     09 FB 01 FB | 	rdlong	result1, arg01
1ecc8     01 FA CD F7 | 	test	result1, #1 wz
1eccc     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1ecd0     F4 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
1ecd4     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1ecd8     01 FA 65 A6 |  if_e	neg	result1, #1
1ecdc     74 02 90 AD |  if_e	jmp	#LR__3156
1ece0     04 4E 05 F1 | 	add	fp, #4
1ece4     A7 12 02 FB | 	rdlong	arg01, fp
1ece8     04 4E 85 F1 | 	sub	fp, #4
1ecec     14 12 06 F1 | 	add	arg01, #20
1ecf0     09 FB 09 FB | 	rdlong	result1, arg01 wz
1ecf4     B8 00 90 AD |  if_e	jmp	#LR__3151
1ecf8     04 4E 05 F1 | 	add	fp, #4
1ecfc     A7 12 02 FB | 	rdlong	arg01, fp
1ed00     09 17 02 F6 | 	mov	arg03, arg01
1ed04     14 16 06 F1 | 	add	arg03, #20
1ed08     0B 1F 02 FB | 	rdlong	local01, arg03
1ed0c     0F 21 02 F6 | 	mov	local02, local01
1ed10     13 1E 46 F7 | 	zerox	local01, #19
1ed14     14 20 46 F0 | 	shr	local02, #20
1ed18     02 20 66 F0 | 	shl	local02, #2
1ed1c     ED 20 02 F1 | 	add	local02, __methods__
1ed20     10 21 02 FB | 	rdlong	local02, local02
1ed24     04 4E 05 F1 | 	add	fp, #4
1ed28     A7 14 02 FB | 	rdlong	arg02, fp
1ed2c     04 4E 05 F1 | 	add	fp, #4
1ed30     A7 16 02 FB | 	rdlong	arg03, fp
1ed34     0C 4E 85 F1 | 	sub	fp, #12
1ed38     F2 22 02 F6 | 	mov	local03, objptr
1ed3c     0F E5 01 F6 | 	mov	objptr, local01
1ed40     2D 20 62 FD | 	call	local02
1ed44     11 E5 01 F6 | 	mov	objptr, local03
1ed48     10 4E 05 F1 | 	add	fp, #16
1ed4c     A7 FA 61 FC | 	wrlong	result1, fp
1ed50     10 4E 85 F1 | 	sub	fp, #16
1ed54     00 FA 55 F2 | 	cmps	result1, #0 wc
1ed58     44 00 90 3D |  if_ae	jmp	#LR__3150
1ed5c     04 4E 05 F1 | 	add	fp, #4
1ed60     A7 22 02 FB | 	rdlong	local03, fp
1ed64     11 1F 02 F6 | 	mov	local01, local03
1ed68     08 22 06 F1 | 	add	local03, #8
1ed6c     11 21 02 FB | 	rdlong	local02, local03
1ed70     20 20 46 F5 | 	or	local02, #32
1ed74     08 1E 06 F1 | 	add	local01, #8
1ed78     0F 21 62 FC | 	wrlong	local02, local01
1ed7c     0C 4E 05 F1 | 	add	fp, #12
1ed80     A7 12 0A FB | 	rdlong	arg01, fp wz
1ed84     10 4E 85 F1 | 	sub	fp, #16
1ed88     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1ed8c     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1ed90     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1ed94     01 FA 65 56 |  if_ne	neg	result1, #1
1ed98     00 FA 05 A6 |  if_e	mov	result1, #0
1ed9c     B4 01 90 FD | 	jmp	#LR__3156
1eda0                 | LR__3150
1eda0     10 4E 05 F1 | 	add	fp, #16
1eda4     A7 FA 01 FB | 	rdlong	result1, fp
1eda8     10 4E 85 F1 | 	sub	fp, #16
1edac     A4 01 90 FD | 	jmp	#LR__3156
1edb0                 | LR__3151
1edb0     04 4E 05 F1 | 	add	fp, #4
1edb4     A7 12 02 FB | 	rdlong	arg01, fp
1edb8     20 12 06 F1 | 	add	arg01, #32
1edbc     09 13 0A FB | 	rdlong	arg01, arg01 wz
1edc0     14 4E 05 F1 | 	add	fp, #20
1edc4     A7 12 62 FC | 	wrlong	arg01, fp
1edc8     18 4E 85 F1 | 	sub	fp, #24
1edcc     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1edd0     F4 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
1edd4     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1edd8     01 FA 65 A6 |  if_e	neg	result1, #1
1eddc     74 01 90 AD |  if_e	jmp	#LR__3156
1ede0     04 4E 05 F1 | 	add	fp, #4
1ede4     A7 22 02 FB | 	rdlong	local03, fp
1ede8     04 4E 85 F1 | 	sub	fp, #4
1edec     28 22 06 F1 | 	add	local03, #40
1edf0     11 21 0A FB | 	rdlong	local02, local03 wz
1edf4     7C 00 90 AD |  if_e	jmp	#LR__3153
1edf8     04 4E 05 F1 | 	add	fp, #4
1edfc     A7 12 02 FB | 	rdlong	arg01, fp
1ee00     09 23 02 F6 | 	mov	local03, arg01
1ee04     28 22 06 F1 | 	add	local03, #40
1ee08     11 1F 02 FB | 	rdlong	local01, local03
1ee0c     0F 21 02 F6 | 	mov	local02, local01
1ee10     13 1E 46 F7 | 	zerox	local01, #19
1ee14     14 20 46 F0 | 	shr	local02, #20
1ee18     02 20 66 F0 | 	shl	local02, #2
1ee1c     ED 20 02 F1 | 	add	local02, __methods__
1ee20     10 21 02 FB | 	rdlong	local02, local02
1ee24     20 4E 05 F1 | 	add	fp, #32
1ee28     A7 16 02 F6 | 	mov	arg03, fp
1ee2c     24 4E 85 F1 | 	sub	fp, #36
1ee30     00 15 06 F6 | 	mov	arg02, #256
1ee34     F2 22 02 F6 | 	mov	local03, objptr
1ee38     0F E5 01 F6 | 	mov	objptr, local01
1ee3c     2D 20 62 FD | 	call	local02
1ee40     11 E5 01 F6 | 	mov	objptr, local03
1ee44     10 4E 05 F1 | 	add	fp, #16
1ee48     A7 FA 61 FC | 	wrlong	result1, fp
1ee4c     00 FA 4D F2 | 	cmps	result1, #0 wz
1ee50     10 4E 85 F1 | 	sub	fp, #16
1ee54     1C 00 90 5D |  if_ne	jmp	#LR__3152
1ee58     24 4E 05 F1 | 	add	fp, #36
1ee5c     A7 20 02 FB | 	rdlong	local02, fp
1ee60     24 4E 85 F1 | 	sub	fp, #36
1ee64     02 20 CE F7 | 	test	local02, #2 wz
1ee68     20 4E 05 51 |  if_ne	add	fp, #32
1ee6c     A7 02 68 5C |  if_ne	wrlong	#1, fp
1ee70     20 4E 85 51 |  if_ne	sub	fp, #32
1ee74                 | LR__3152
1ee74                 | LR__3153
1ee74     10 4E 05 F1 | 	add	fp, #16
1ee78     A7 00 68 FC | 	wrlong	#0, fp
1ee7c     10 4E 85 F1 | 	sub	fp, #16
1ee80                 | LR__3154
1ee80     0C 4E 05 F1 | 	add	fp, #12
1ee84     A7 22 02 FB | 	rdlong	local03, fp
1ee88     0C 4E 85 F1 | 	sub	fp, #12
1ee8c     01 22 16 F2 | 	cmp	local03, #1 wc
1ee90     B4 00 90 CD |  if_b	jmp	#LR__3155
1ee94     18 4E 05 F1 | 	add	fp, #24
1ee98     A7 20 02 FB | 	rdlong	local02, fp
1ee9c     10 23 02 F6 | 	mov	local03, local02
1eea0     13 22 46 F7 | 	zerox	local03, #19
1eea4     14 20 46 F0 | 	shr	local02, #20
1eea8     02 20 66 F0 | 	shl	local02, #2
1eeac     ED 20 02 F1 | 	add	local02, __methods__
1eeb0     10 21 02 FB | 	rdlong	local02, local02
1eeb4     14 4E 85 F1 | 	sub	fp, #20
1eeb8     A7 12 02 FB | 	rdlong	arg01, fp
1eebc     04 4E 85 F1 | 	sub	fp, #4
1eec0     F2 1E 02 F6 | 	mov	local01, objptr
1eec4     11 E5 01 F6 | 	mov	objptr, local03
1eec8     2D 20 62 FD | 	call	local02
1eecc     0F E5 01 F6 | 	mov	objptr, local01
1eed0     14 4E 05 F1 | 	add	fp, #20
1eed4     A7 FA 61 FC | 	wrlong	result1, fp
1eed8     14 4E 85 F1 | 	sub	fp, #20
1eedc     00 FA 55 F2 | 	cmps	result1, #0 wc
1eee0     64 00 90 CD |  if_b	jmp	#LR__3155
1eee4     1C 4E 05 F1 | 	add	fp, #28
1eee8     A7 22 02 FB | 	rdlong	local03, fp
1eeec     11 21 02 F6 | 	mov	local02, local03
1eef0     01 20 06 F1 | 	add	local02, #1
1eef4     A7 20 62 FC | 	wrlong	local02, fp
1eef8     08 4E 85 F1 | 	sub	fp, #8
1eefc     A7 20 02 FB | 	rdlong	local02, fp
1ef00     11 21 42 FC | 	wrbyte	local02, local03
1ef04     04 4E 85 F1 | 	sub	fp, #4
1ef08     A7 22 02 FB | 	rdlong	local03, fp
1ef0c     01 22 06 F1 | 	add	local03, #1
1ef10     A7 22 62 FC | 	wrlong	local03, fp
1ef14     04 4E 85 F1 | 	sub	fp, #4
1ef18     A7 22 02 FB | 	rdlong	local03, fp
1ef1c     01 22 86 F1 | 	sub	local03, #1
1ef20     A7 22 62 FC | 	wrlong	local03, fp
1ef24     14 4E 05 F1 | 	add	fp, #20
1ef28     A7 22 0A FB | 	rdlong	local03, fp wz
1ef2c     20 4E 85 F1 | 	sub	fp, #32
1ef30     4C FF 9F AD |  if_e	jmp	#LR__3154
1ef34     14 4E 05 F1 | 	add	fp, #20
1ef38     A7 20 02 FB | 	rdlong	local02, fp
1ef3c     14 4E 85 F1 | 	sub	fp, #20
1ef40     0A 20 0E F2 | 	cmp	local02, #10 wz
1ef44     38 FF 9F 5D |  if_ne	jmp	#LR__3154
1ef48                 | LR__3155
1ef48     10 4E 05 F1 | 	add	fp, #16
1ef4c     A7 FA 01 FB | 	rdlong	result1, fp
1ef50     10 4E 85 F1 | 	sub	fp, #16
1ef54                 | LR__3156
1ef54     A7 F0 03 F6 | 	mov	ptra, fp
1ef58     B2 00 A0 FD | 	call	#popregs_
1ef5c                 | __system___vfsread_ret
1ef5c     2D 00 64 FD | 	ret
1ef60                 | 
1ef60                 | __system____default_filbuf
1ef60     04 4A 05 F6 | 	mov	COUNT_, #4
1ef64     A8 00 A0 FD | 	call	#pushregs_
1ef68     09 1F 02 F6 | 	mov	local01, arg01
1ef6c     0F 21 02 FB | 	rdlong	local02, local01
1ef70     0C 20 06 F1 | 	add	local02, #12
1ef74     10 FB 09 FB | 	rdlong	result1, local02 wz
1ef78     0C 20 86 F1 | 	sub	local02, #12
1ef7c     20 00 90 5D |  if_ne	jmp	#LR__3160
1ef80     14 20 06 F1 | 	add	local02, #20
1ef84     10 FB 01 F6 | 	mov	result1, local02
1ef88     04 20 86 F1 | 	sub	local02, #4
1ef8c     10 FB 61 FC | 	wrlong	result1, local02
1ef90     04 20 86 F1 | 	sub	local02, #4
1ef94     02 00 80 FF 
1ef98     10 01 68 FC | 	wrlong	##1024, local02
1ef9c     0C 20 86 F1 | 	sub	local02, #12
1efa0                 | LR__3160
1efa0     14 1E 06 F1 | 	add	local01, #20
1efa4     0F 23 02 FB | 	rdlong	local03, local01
1efa8     11 25 02 F6 | 	mov	local04, local03
1efac     14 1E 86 F1 | 	sub	local01, #20
1efb0     13 24 46 F7 | 	zerox	local04, #19
1efb4     14 22 46 F0 | 	shr	local03, #20
1efb8     02 22 66 F0 | 	shl	local03, #2
1efbc     ED 22 02 F1 | 	add	local03, __methods__
1efc0     11 23 02 FB | 	rdlong	local03, local03
1efc4     10 20 06 F1 | 	add	local02, #16
1efc8     10 15 02 FB | 	rdlong	arg02, local02
1efcc     04 20 86 F1 | 	sub	local02, #4
1efd0     10 17 02 FB | 	rdlong	arg03, local02
1efd4     0C 20 86 F1 | 	sub	local02, #12
1efd8     0F 13 02 F6 | 	mov	arg01, local01
1efdc     F2 1E 02 F6 | 	mov	local01, objptr
1efe0     12 E5 01 F6 | 	mov	objptr, local04
1efe4     2D 22 62 FD | 	call	local03
1efe8     0F E5 01 F6 | 	mov	objptr, local01
1efec     FD 24 02 F6 | 	mov	local04, result1
1eff0     00 24 56 F2 | 	cmps	local04, #0 wc
1eff4     01 FA 65 C6 |  if_b	neg	result1, #1
1eff8     28 00 90 CD |  if_b	jmp	#LR__3161
1effc     10 25 62 FC | 	wrlong	local04, local02
1f000     10 20 06 F1 | 	add	local02, #16
1f004     10 23 02 FB | 	rdlong	local03, local02
1f008     0C 20 86 F1 | 	sub	local02, #12
1f00c     10 23 62 FC | 	wrlong	local03, local02
1f010     04 20 06 F1 | 	add	local02, #4
1f014     10 23 02 FB | 	rdlong	local03, local02
1f018     01 22 46 F5 | 	or	local03, #1
1f01c     10 23 62 FC | 	wrlong	local03, local02
1f020     12 FB 01 F6 | 	mov	result1, local04
1f024                 | LR__3161
1f024     A7 F0 03 F6 | 	mov	ptra, fp
1f028     B2 00 A0 FD | 	call	#popregs_
1f02c                 | __system____default_filbuf_ret
1f02c     2D 00 64 FD | 	ret
1f030                 | 
1f030                 | __system__getlower_0965
1f030     41 12 56 F2 | 	cmps	arg01, #65 wc
1f034     10 00 90 CD |  if_b	jmp	#LR__3170
1f038     5B 12 56 F2 | 	cmps	arg01, #91 wc
1f03c     09 FB 01 C6 |  if_b	mov	result1, arg01
1f040     20 FA 05 C1 |  if_b	add	result1, #32
1f044     04 00 90 CD |  if_b	jmp	#__system__getlower_0965_ret
1f048                 | LR__3170
1f048     09 FB 01 F6 | 	mov	result1, arg01
1f04c                 | __system__getlower_0965_ret
1f04c     2D 00 64 FD | 	ret
1f050                 | 
1f050                 | __system___pat_match
1f050     08 4A 05 F6 | 	mov	COUNT_, #8
1f054     A8 00 A0 FD | 	call	#pushregs_
1f058     09 1F 02 F6 | 	mov	local01, arg01
1f05c                 | LR__3180
1f05c     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
1f060     0F 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
1f064     0A 21 C2 5A |  if_ne	rdbyte	local02, arg02
1f068     2A 20 0E 52 |  if_ne	cmp	local02, #42 wz
1f06c     2C 00 90 AD |  if_e	jmp	#LR__3181
1f070     0A 13 C2 FA | 	rdbyte	arg01, arg02
1f074     B8 FF BF FD | 	call	#__system__getlower_0965
1f078     FD 22 02 F6 | 	mov	local03, result1
1f07c     0F 13 C2 FA | 	rdbyte	arg01, local01
1f080     AC FF BF FD | 	call	#__system__getlower_0965
1f084     11 FB 09 F2 | 	cmp	result1, local03 wz
1f088     00 FA 05 56 |  if_ne	mov	result1, #0
1f08c     FC 00 90 5D |  if_ne	jmp	#LR__3189
1f090     01 1E 06 F1 | 	add	local01, #1
1f094     01 14 06 F1 | 	add	arg02, #1
1f098     C0 FF 9F FD | 	jmp	#LR__3180
1f09c                 | LR__3181
1f09c     0A 23 C2 FA | 	rdbyte	local03, arg02
1f0a0     2A 22 0E F2 | 	cmp	local03, #42 wz
1f0a4     D4 00 90 5D |  if_ne	jmp	#LR__3188
1f0a8     01 14 06 F1 | 	add	arg02, #1
1f0ac     0A 21 C2 FA | 	rdbyte	local02, arg02
1f0b0     01 14 86 F1 | 	sub	arg02, #1
1f0b4     2E 20 0E F2 | 	cmp	local02, #46 wz
1f0b8     28 00 90 5D |  if_ne	jmp	#LR__3182
1f0bc     02 14 06 F1 | 	add	arg02, #2
1f0c0     0A 21 C2 FA | 	rdbyte	local02, arg02
1f0c4     02 14 86 F1 | 	sub	arg02, #2
1f0c8     2A 20 0E F2 | 	cmp	local02, #42 wz
1f0cc     03 14 06 A1 |  if_e	add	arg02, #3
1f0d0     0A 25 C2 AA |  if_e	rdbyte	local04, arg02
1f0d4     03 14 86 A1 |  if_e	sub	arg02, #3
1f0d8     12 27 0A A6 |  if_e	mov	local05, local04 wz
1f0dc     01 FA 05 A6 |  if_e	mov	result1, #1
1f0e0     A8 00 90 AD |  if_e	jmp	#LR__3189
1f0e4                 | LR__3182
1f0e4     01 14 06 F1 | 	add	arg02, #1
1f0e8     00 28 06 F6 | 	mov	local06, #0
1f0ec     97 1E 48 FB | 	callpa	#(@LR__3185-@LR__3183)>>2,fcache_load_ptr_
1f0f0                 | LR__3183
1f0f0     14 2B 02 F6 | 	mov	local07, local06
1f0f4     0A 2B 02 F1 | 	add	local07, arg02
1f0f8     15 2B CA FA | 	rdbyte	local07, local07 wz
1f0fc     14 27 02 56 |  if_ne	mov	local05, local06
1f100     01 26 06 51 |  if_ne	add	local05, #1
1f104     13 29 02 56 |  if_ne	mov	local06, local05
1f108     E4 FF 9F 5D |  if_ne	jmp	#LR__3183
1f10c     00 2C 06 F6 | 	mov	local08, #0
1f110                 | LR__3184
1f110     16 2B 02 F6 | 	mov	local07, local08
1f114     0F 2B 02 F1 | 	add	local07, local01
1f118     15 2B CA FA | 	rdbyte	local07, local07 wz
1f11c     16 27 02 56 |  if_ne	mov	local05, local08
1f120     01 26 06 51 |  if_ne	add	local05, #1
1f124     13 2D 02 56 |  if_ne	mov	local08, local05
1f128     E4 FF 9F 5D |  if_ne	jmp	#LR__3184
1f12c                 | LR__3185
1f12c     14 2D 52 F2 | 	cmps	local08, local06 wc
1f130     00 FA 05 C6 |  if_b	mov	result1, #0
1f134     54 00 90 CD |  if_b	jmp	#LR__3189
1f138     16 21 02 F6 | 	mov	local02, local08
1f13c     14 21 82 F1 | 	sub	local02, local06
1f140     10 1F 02 F1 | 	add	local01, local02
1f144                 | LR__3186
1f144     01 28 56 F2 | 	cmps	local06, #1 wc
1f148     30 00 90 CD |  if_b	jmp	#LR__3187
1f14c     0F 13 C2 FA | 	rdbyte	arg01, local01
1f150     DC FE BF FD | 	call	#__system__getlower_0965
1f154     FD 2C 02 F6 | 	mov	local08, result1
1f158     0A 13 C2 FA | 	rdbyte	arg01, arg02
1f15c     D0 FE BF FD | 	call	#__system__getlower_0965
1f160     FD 2C 0A F2 | 	cmp	local08, result1 wz
1f164     00 FA 05 56 |  if_ne	mov	result1, #0
1f168     20 00 90 5D |  if_ne	jmp	#LR__3189
1f16c     01 1E 06 F1 | 	add	local01, #1
1f170     01 14 06 F1 | 	add	arg02, #1
1f174     01 28 86 F1 | 	sub	local06, #1
1f178     C8 FF 9F FD | 	jmp	#LR__3186
1f17c                 | LR__3187
1f17c                 | LR__3188
1f17c     0A 2D CA FA | 	rdbyte	local08, arg02 wz
1f180     0F 2B CA AA |  if_e	rdbyte	local07, local01 wz
1f184     01 FA 05 A6 |  if_e	mov	result1, #1
1f188     00 FA 05 56 |  if_ne	mov	result1, #0
1f18c                 | LR__3189
1f18c     A7 F0 03 F6 | 	mov	ptra, fp
1f190     B2 00 A0 FD | 	call	#popregs_
1f194                 | __system___pat_match_ret
1f194     2D 00 64 FD | 	ret
1f198                 | 
1f198                 | _fatfs_cc_ff_uni2oem
1f198     00 00 06 F6 | 	mov	_var01, #0
1f19c     80 12 16 F2 | 	cmp	arg01, #128 wc
1f1a0     09 01 02 C6 |  if_b	mov	_var01, arg01
1f1a4     58 00 90 CD |  if_b	jmp	#LR__3194
1f1a8     80 00 00 FF 
1f1ac     00 12 16 F2 | 	cmp	arg01, ##65536 wc
1f1b0     4C 00 90 3D |  if_ae	jmp	#LR__3193
1f1b4     0A FB 31 F9 | 	getword	result1, arg02, #0
1f1b8     01 00 00 FF 
1f1bc     52 FB 0D F2 | 	cmp	result1, ##850 wz
1f1c0     3C 00 90 5D |  if_ne	jmp	#LR__3193
1f1c4                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
1f1c4     00 00 06 F6 | 	mov	_var01, #0
1f1c8     97 14 48 FB | 	callpa	#(@LR__3191-@LR__3190)>>2,fcache_load_ptr_
1f1cc                 | LR__3190
1f1cc     00 FB 31 F9 | 	getword	result1, _var01, #0
1f1d0     80 FA 15 F2 | 	cmp	result1, #128 wc
1f1d4     1C 00 90 3D |  if_ae	jmp	#LR__3192
1f1d8     00 FB 31 F9 | 	getword	result1, _var01, #0
1f1dc     01 FA 65 F0 | 	shl	result1, #1
1f1e0     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
1f1e4     FD FA E1 FA | 	rdword	result1, result1
1f1e8     FD 12 0A F2 | 	cmp	arg01, result1 wz
1f1ec     01 00 06 51 |  if_ne	add	_var01, #1
1f1f0     D8 FF 9F 5D |  if_ne	jmp	#LR__3190
1f1f4                 | LR__3191
1f1f4                 | LR__3192
1f1f4     00 01 32 F9 | 	getword	_var01, _var01, #0
1f1f8     80 00 06 F1 | 	add	_var01, #128
1f1fc     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
1f200                 | LR__3193
1f200                 | LR__3194
1f200                 | ' 			c = (c + 0x80) & 0xFF;
1f200                 | ' 		}
1f200                 | ' 	}
1f200                 | ' 
1f200                 | ' 	return c;
1f200     00 FB 01 F6 | 	mov	result1, _var01
1f204                 | _fatfs_cc_ff_uni2oem_ret
1f204     2D 00 64 FD | 	ret
1f208                 | 
1f208                 | _fatfs_cc_ff_oem2uni
1f208     00 00 06 F6 | 	mov	_var01, #0
1f20c     09 FB 31 F9 | 	getword	result1, arg01, #0
1f210     80 FA 15 F2 | 	cmp	result1, #128 wc
1f214     09 01 02 C6 |  if_b	mov	_var01, arg01
1f218     2C 00 90 CD |  if_b	jmp	#LR__3201
1f21c     0A 15 32 F9 | 	getword	arg02, arg02, #0
1f220     01 00 00 FF 
1f224     52 15 0E F2 | 	cmp	arg02, ##850 wz
1f228     1C 00 90 5D |  if_ne	jmp	#LR__3200
1f22c     09 FB 31 F9 | 	getword	result1, arg01, #0
1f230     00 FB 15 F2 | 	cmp	result1, #256 wc
1f234     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
1f238     80 12 86 C1 |  if_b	sub	arg01, #128
1f23c     01 12 66 C0 |  if_b	shl	arg01, #1
1f240     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
1f244     09 01 E2 CA |  if_b	rdword	_var01, arg01
1f248                 | LR__3200
1f248                 | LR__3201
1f248                 | ' 		}
1f248                 | ' 	}
1f248                 | ' 
1f248                 | ' 	return c;
1f248     00 FB 01 F6 | 	mov	result1, _var01
1f24c                 | _fatfs_cc_ff_oem2uni_ret
1f24c     2D 00 64 FD | 	ret
1f250                 | 
1f250                 | _fatfs_cc_ff_wtoupper
1f250     09 01 02 F6 | 	mov	_var01, arg01
1f254     80 00 00 FF 
1f258     00 00 16 F2 | 	cmp	_var01, ##65536 wc
1f25c     60 01 90 3D |  if_ae	jmp	#LR__3223
1f260     00 03 02 F6 | 	mov	_var02, _var01
1f264     01 01 32 F9 | 	getword	_var01, _var02, #0
1f268     08 00 00 FF 
1f26c     00 00 16 F2 | 	cmp	_var01, ##4096 wc
1f270     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
1f274     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
1f278     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
1f27c     01 00 00 3F 
1f280     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
1f284     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
1f288     01 00 00 3F 
1f28c     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
1f290     02 07 02 F6 | 	mov	_var04, _var03
1f294                 | ' 		uc = (WORD)uni;
1f294                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
1f294                 | ' 		for (;;) {
1f294                 | LR__3210
1f294     03 09 E2 FA | 	rdword	_var05, _var04
1f298     04 05 02 F6 | 	mov	_var03, _var05
1f29c     0F 04 4E F7 | 	zerox	_var03, #15 wz
1f2a0     02 06 06 F1 | 	add	_var04, #2
1f2a4     14 01 90 AD |  if_e	jmp	#LR__3222
1f2a8     01 05 32 F9 | 	getword	_var03, _var02, #0
1f2ac     04 01 32 F9 | 	getword	_var01, _var05, #0
1f2b0     00 05 12 F2 | 	cmp	_var03, _var01 wc
1f2b4     04 01 90 CD |  if_b	jmp	#LR__3222
1f2b8     03 0B E2 FA | 	rdword	_var06, _var04
1f2bc     05 0D 32 F9 | 	getword	_var07, _var06, #0
1f2c0     08 0C 46 F0 | 	shr	_var07, #8
1f2c4     05 0B 32 F9 | 	getword	_var06, _var06, #0
1f2c8     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
1f2cc     01 05 32 F9 | 	getword	_var03, _var02, #0
1f2d0     04 0F 32 F9 | 	getword	_var08, _var05, #0
1f2d4     05 01 32 F9 | 	getword	_var01, _var06, #0
1f2d8     00 0F 02 F1 | 	add	_var08, _var01
1f2dc     07 05 52 F2 | 	cmps	_var03, _var08 wc
1f2e0     02 06 06 F1 | 	add	_var04, #2
1f2e4     C4 00 90 3D |  if_ae	jmp	#LR__3221
1f2e8                 | ' 				switch (cmd) {
1f2e8     06 11 32 F9 | 	getword	_var09, _var07, #0
1f2ec     09 10 26 F3 | 	fle	_var09, #9
1f2f0     30 10 62 FD | 	jmprel	_var09
1f2f4                 | LR__3211
1f2f4     24 00 90 FD | 	jmp	#LR__3212
1f2f8     3C 00 90 FD | 	jmp	#LR__3213
1f2fc     54 00 90 FD | 	jmp	#LR__3214
1f300     5C 00 90 FD | 	jmp	#LR__3215
1f304     64 00 90 FD | 	jmp	#LR__3216
1f308     6C 00 90 FD | 	jmp	#LR__3217
1f30c     74 00 90 FD | 	jmp	#LR__3218
1f310     7C 00 90 FD | 	jmp	#LR__3219
1f314     84 00 90 FD | 	jmp	#LR__3220
1f318     A0 00 90 FD | 	jmp	#LR__3222
1f31c                 | LR__3212
1f31c     01 03 32 F9 | 	getword	_var02, _var02, #0
1f320     04 09 32 F9 | 	getword	_var05, _var05, #0
1f324     04 03 82 F1 | 	sub	_var02, _var05
1f328     01 02 66 F0 | 	shl	_var02, #1
1f32c     03 03 02 F1 | 	add	_var02, _var04
1f330     01 03 E2 FA | 	rdword	_var02, _var02
1f334     84 00 90 FD | 	jmp	#LR__3222
1f338                 | LR__3213
1f338     01 05 32 F9 | 	getword	_var03, _var02, #0
1f33c     01 03 32 F9 | 	getword	_var02, _var02, #0
1f340     04 09 32 F9 | 	getword	_var05, _var05, #0
1f344     04 03 82 F1 | 	sub	_var02, _var05
1f348     01 02 06 F5 | 	and	_var02, #1
1f34c     02 03 C2 F2 | 	subr	_var02, _var03
1f350     68 00 90 FD | 	jmp	#LR__3222
1f354                 | LR__3214
1f354     01 03 32 F9 | 	getword	_var02, _var02, #0
1f358     10 02 86 F1 | 	sub	_var02, #16
1f35c     5C 00 90 FD | 	jmp	#LR__3222
1f360                 | LR__3215
1f360     01 03 32 F9 | 	getword	_var02, _var02, #0
1f364     20 02 86 F1 | 	sub	_var02, #32
1f368     50 00 90 FD | 	jmp	#LR__3222
1f36c                 | LR__3216
1f36c     01 03 32 F9 | 	getword	_var02, _var02, #0
1f370     30 02 86 F1 | 	sub	_var02, #48
1f374     44 00 90 FD | 	jmp	#LR__3222
1f378                 | LR__3217
1f378     01 03 32 F9 | 	getword	_var02, _var02, #0
1f37c     1A 02 86 F1 | 	sub	_var02, #26
1f380     38 00 90 FD | 	jmp	#LR__3222
1f384                 | LR__3218
1f384     01 03 32 F9 | 	getword	_var02, _var02, #0
1f388     08 02 06 F1 | 	add	_var02, #8
1f38c     2C 00 90 FD | 	jmp	#LR__3222
1f390                 | LR__3219
1f390     01 03 32 F9 | 	getword	_var02, _var02, #0
1f394     50 02 86 F1 | 	sub	_var02, #80
1f398     20 00 90 FD | 	jmp	#LR__3222
1f39c                 | LR__3220
1f39c     01 03 32 F9 | 	getword	_var02, _var02, #0
1f3a0     0E 00 00 FF 
1f3a4     60 02 86 F1 | 	sub	_var02, ##7264
1f3a8                 | ' 				}
1f3a8                 | ' 				break;
1f3a8     10 00 90 FD | 	jmp	#LR__3222
1f3ac                 | LR__3221
1f3ac     0F 0C 4E F7 | 	zerox	_var07, #15 wz
1f3b0     02 0A 06 AA |  if_e	mul	_var06, #2
1f3b4     05 07 02 A1 |  if_e	add	_var04, _var06
1f3b8     D8 FE 9F FD | 	jmp	#LR__3210
1f3bc                 | LR__3222
1f3bc     01 01 32 F9 | 	getword	_var01, _var02, #0
1f3c0                 | LR__3223
1f3c0                 | ' 		}
1f3c0                 | ' 		uni = uc;
1f3c0                 | ' 	}
1f3c0                 | ' 
1f3c0                 | ' 	return uni;
1f3c0     00 FB 01 F6 | 	mov	result1, _var01
1f3c4                 | _fatfs_cc_ff_wtoupper_ret
1f3c4     2D 00 64 FD | 	ret
1f3c8                 | 
1f3c8                 | _fatfs_cc_strncpy
1f3c8     09 01 02 F6 | 	mov	_var01, arg01
1f3cc     97 12 48 FB | 	callpa	#(@LR__3231-@LR__3230)>>2,fcache_load_ptr_
1f3d0                 | ' 
1f3d0                 | ' 	dscan = dst;
1f3d0                 | ' 	sscan = src;
1f3d0                 | ' 	count = n;
1f3d0                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
1f3d0                 | LR__3230
1f3d0     01 16 86 F1 | 	sub	arg03, #1
1f3d4     00 16 56 F2 | 	cmps	arg03, #0 wc
1f3d8     18 00 90 CD |  if_b	jmp	#LR__3232
1f3dc     0A FB C1 FA | 	rdbyte	result1, arg02
1f3e0     00 FB 41 FC | 	wrbyte	result1, _var01
1f3e4     01 14 06 F1 | 	add	arg02, #1
1f3e8     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1f3ec                 | ' 		continue;
1f3ec     01 00 06 F1 | 	add	_var01, #1
1f3f0     DC FF 9F 5D |  if_ne	jmp	#LR__3230
1f3f4                 | LR__3231
1f3f4                 | LR__3232
1f3f4     97 0C 48 FB | 	callpa	#(@LR__3234-@LR__3233)>>2,fcache_load_ptr_
1f3f8                 | ' 	while (--count >= 0)
1f3f8                 | LR__3233
1f3f8     01 16 86 F1 | 	sub	arg03, #1
1f3fc     00 16 56 F2 | 	cmps	arg03, #0 wc
1f400     00 03 02 36 |  if_ae	mov	_var02, _var01
1f404     01 00 06 31 |  if_ae	add	_var01, #1
1f408     01 01 48 3C |  if_ae	wrbyte	#0, _var02
1f40c     E8 FF 9F 3D |  if_ae	jmp	#LR__3233
1f410                 | LR__3234
1f410                 | ' 		*dscan++ = '\0';
1f410                 | ' 	return(dst);
1f410     09 FB 01 F6 | 	mov	result1, arg01
1f414                 | _fatfs_cc_strncpy_ret
1f414     2D 00 64 FD | 	ret
1f418                 | 
1f418                 | _fatfs_cc_memcmp
1f418                 | ' 	for (n = size; n > 0; n--)
1f418     00 16 0E F2 | 	cmp	arg03, #0 wz
1f41c     28 00 90 AD |  if_e	jmp	#LR__3241
1f420                 | LR__3240
1f420     09 01 C2 FA | 	rdbyte	_var01, arg01
1f424     0A 03 C2 FA | 	rdbyte	_var02, arg02
1f428     01 01 0A F2 | 	cmp	_var01, _var02 wz
1f42c     01 12 06 A1 |  if_e	add	arg01, #1
1f430     01 14 06 A1 |  if_e	add	arg02, #1
1f434                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
1f434     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
1f438     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
1f43c     01 FB 81 51 |  if_ne	sub	result1, _var02
1f440     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
1f444     F6 17 6E FB | 	djnz	arg03, #LR__3240
1f448                 | LR__3241
1f448                 | ' 
1f448                 | ' 	return(0);
1f448     00 FA 05 F6 | 	mov	result1, #0
1f44c                 | _fatfs_cc_memcmp_ret
1f44c     2D 00 64 FD | 	ret
1f450                 | 
1f450                 | _fatfs_cc_strncmp
1f450     09 01 0A F6 | 	mov	_var01, arg01 wz
1f454     14 00 90 5D |  if_ne	jmp	#LR__3250
1f458                 | ' 		return scan2 ? -1 : 0;
1f458     00 14 0E F2 | 	cmp	arg02, #0 wz
1f45c     01 02 66 56 |  if_ne	neg	_var02, #1
1f460     00 02 06 A6 |  if_e	mov	_var02, #0
1f464     01 FB 01 F6 | 	mov	result1, _var02
1f468     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
1f46c                 | LR__3250
1f46c     00 14 0E F2 | 	cmp	arg02, #0 wz
1f470     01 FA 05 A6 |  if_e	mov	result1, #1
1f474     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1f478     0B 05 02 F6 | 	mov	_var03, arg03
1f47c     97 16 48 FB | 	callpa	#(@LR__3252-@LR__3251)>>2,fcache_load_ptr_
1f480                 | ' 	count = n;
1f480                 | ' 	do {
1f480                 | LR__3251
1f480     00 07 C2 FA | 	rdbyte	_var04, _var01
1f484     0A 09 02 F6 | 	mov	_var05, arg02
1f488     04 0B C2 FA | 	rdbyte	_var06, _var05
1f48c     01 04 86 F1 | 	sub	_var03, #1
1f490     00 04 56 F2 | 	cmps	_var03, #0 wc
1f494     01 00 06 F1 | 	add	_var01, #1
1f498     01 14 06 F1 | 	add	arg02, #1
1f49c     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
1f4a0     08 00 90 2D |  if_nc_and_z	jmp	#LR__3253
1f4a4     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
1f4a8     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3251
1f4ac                 | LR__3252
1f4ac                 | LR__3253
1f4ac     00 04 56 F2 | 	cmps	_var03, #0 wc
1f4b0                 | ' 		return(0);
1f4b0     00 FA 05 C6 |  if_b	mov	result1, #0
1f4b4     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
1f4b8     05 07 0A F2 | 	cmp	_var04, _var06 wz
1f4bc                 | ' 		return(0);
1f4bc     00 FA 05 A6 |  if_e	mov	result1, #0
1f4c0     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1f4c4     00 06 0E F2 | 	cmp	_var04, #0 wz
1f4c8                 | ' 		return(-1);
1f4c8     01 FA 65 A6 |  if_e	neg	result1, #1
1f4cc     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1f4d0     00 0A 0E F2 | 	cmp	_var06, #0 wz
1f4d4                 | ' 		return(1);
1f4d4     01 FA 05 A6 |  if_e	mov	result1, #1
1f4d8                 | ' 		return(c1 - c2);
1f4d8     03 FB 01 56 |  if_ne	mov	result1, _var04
1f4dc     05 FB 81 51 |  if_ne	sub	result1, _var06
1f4e0                 | _fatfs_cc_strncmp_ret
1f4e0     2D 00 64 FD | 	ret
1f4e4                 | 
1f4e4                 | _fatfs_cc_strchr
1f4e4                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/libc/string/strchr.c"
1f4e4                 | ' 	while ((c = *s++) != (char) charwanted)
1f4e4                 | LR__3260
1f4e4     09 01 02 F6 | 	mov	_var01, arg01
1f4e8     00 03 C2 FA | 	rdbyte	_var02, _var01
1f4ec     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
1f4f0     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
1f4f4     03 05 0A F2 | 	cmp	_var03, _var04 wz
1f4f8     01 12 06 F1 | 	add	arg01, #1
1f4fc     14 00 90 AD |  if_e	jmp	#LR__3261
1f500     01 05 02 F6 | 	mov	_var03, _var02
1f504     07 04 4E F7 | 	zerox	_var03, #7 wz
1f508     00 FA 05 A6 |  if_e	mov	result1, #0
1f50c     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
1f510     D0 FF 9F FD | 	jmp	#LR__3260
1f514                 | LR__3261
1f514                 | ' 	return((char *)--s);
1f514     01 12 86 F1 | 	sub	arg01, #1
1f518     09 FB 01 F6 | 	mov	result1, arg01
1f51c                 | _fatfs_cc_strchr_ret
1f51c     2D 00 64 FD | 	ret
1f520                 | 
1f520                 | _fatfs_cc_disk_initialize
1f520     04 4A 05 F6 | 	mov	COUNT_, #4
1f524     A8 00 A0 FD | 	call	#pushregs_
1f528     40 F0 07 F1 | 	add	ptra, #64
1f52c     04 4E 05 F1 | 	add	fp, #4
1f530     A7 12 42 FC | 	wrbyte	arg01, fp
1f534     01 00 00 FF 
1f538     14 E4 05 F1 | 	add	objptr, ##532
1f53c     F2 18 02 FB | 	rdlong	arg04, objptr
1f540     2C 4E 05 F1 | 	add	fp, #44
1f544     A7 18 62 FC | 	wrlong	arg04, fp
1f548     04 E4 85 F1 | 	sub	objptr, #4
1f54c     F2 18 02 FB | 	rdlong	arg04, objptr
1f550     04 4E 05 F1 | 	add	fp, #4
1f554     A7 18 62 FC | 	wrlong	arg04, fp
1f558     08 E4 05 F1 | 	add	objptr, #8
1f55c     F2 18 02 FB | 	rdlong	arg04, objptr
1f560     04 4E 05 F1 | 	add	fp, #4
1f564     A7 18 62 FC | 	wrlong	arg04, fp
1f568     04 E4 05 F1 | 	add	objptr, #4
1f56c     F2 18 02 FB | 	rdlong	arg04, objptr
1f570     04 4E 05 F1 | 	add	fp, #4
1f574     A7 18 62 FC | 	wrlong	arg04, fp
1f578     04 E4 05 F1 | 	add	objptr, #4
1f57c     F2 02 48 FC | 	wrbyte	#1, objptr
1f580     01 00 00 FF 
1f584     20 E4 85 F1 | 	sub	objptr, ##544
1f588     38 4E 85 F1 | 	sub	fp, #56
1f58c     A7 18 CA FA | 	rdbyte	arg04, fp wz
1f590     04 4E 85 F1 | 	sub	fp, #4
1f594                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
1f594                 | '             return RES_NOTRDY;
1f594     03 FA 05 56 |  if_ne	mov	result1, #3
1f598     D8 05 90 5D |  if_ne	jmp	#LR__3288
1f59c     13 00 00 FF 
1f5a0     10 13 06 F6 | 	mov	arg01, ##10000
1f5a4     30 9B BF FD | 	call	#__system___waitus
1f5a8     30 4E 05 F1 | 	add	fp, #48
1f5ac     A7 12 02 FB | 	rdlong	arg01, fp
1f5b0     09 01 08 FC | 	wrpin	#0, arg01
1f5b4     04 4E 05 F1 | 	add	fp, #4
1f5b8     A7 12 02 FB | 	rdlong	arg01, fp
1f5bc     09 01 08 FC | 	wrpin	#0, arg01
1f5c0     04 4E 05 F1 | 	add	fp, #4
1f5c4     A7 12 02 FB | 	rdlong	arg01, fp
1f5c8     09 01 08 FC | 	wrpin	#0, arg01
1f5cc     04 4E 05 F1 | 	add	fp, #4
1f5d0     A7 12 02 FB | 	rdlong	arg01, fp
1f5d4     09 00 80 FF 
1f5d8     09 01 08 FC | 	wrpin	##4608, arg01
1f5dc     0C 4E 85 F1 | 	sub	fp, #12
1f5e0     A7 12 02 FB | 	rdlong	arg01, fp
1f5e4     59 12 62 FD | 	drvh	arg01
1f5e8     04 4E 05 F1 | 	add	fp, #4
1f5ec     A7 12 02 FB | 	rdlong	arg01, fp
1f5f0     59 12 62 FD | 	drvh	arg01
1f5f4     04 4E 05 F1 | 	add	fp, #4
1f5f8     A7 12 02 FB | 	rdlong	arg01, fp
1f5fc     59 12 62 FD | 	drvh	arg01
1f600     04 4E 05 F1 | 	add	fp, #4
1f604     A7 12 02 FB | 	rdlong	arg01, fp
1f608     59 12 62 FD | 	drvh	arg01
1f60c     20 4E 85 F1 | 	sub	fp, #32
1f610     00 04 80 FF 
1f614     A7 20 68 FC | 	wrlong	##524304, fp
1f618     04 4E 05 F1 | 	add	fp, #4
1f61c     20 03 80 FF 
1f620     A7 90 68 FC | 	wrlong	##409672, fp
1f624     14 4E 05 F1 | 	add	fp, #20
1f628     A7 1E 02 FB | 	rdlong	local01, fp
1f62c     18 4E 85 F1 | 	sub	fp, #24
1f630     A7 16 02 FB | 	rdlong	arg03, fp
1f634     40 1E 62 FD | 	dirl	local01
1f638     A0 03 80 FF 
1f63c     0F 91 08 FC | 	wrpin	##475208, local01
1f640     0F 17 12 FC | 	wxpin	arg03, local01
1f644     0F 01 28 FC | 	wypin	#0, local01
1f648     41 1E 62 FD | 	dirh	local01
1f64c     1C 4E 05 F1 | 	add	fp, #28
1f650     A7 20 02 FB | 	rdlong	local02, fp
1f654     10 1F 82 F1 | 	sub	local01, local02
1f658     07 1E 06 F5 | 	and	local01, #7
1f65c     18 1E 66 F0 | 	shl	local01, #24
1f660     78 14 06 F6 | 	mov	arg02, #120
1f664     0F 15 42 F5 | 	or	arg02, local01
1f668     14 4E 85 F1 | 	sub	fp, #20
1f66c     A7 14 62 FC | 	wrlong	arg02, fp
1f670     14 4E 05 F1 | 	add	fp, #20
1f674     A7 12 02 FB | 	rdlong	arg01, fp
1f678     10 14 26 F4 | 	bith	arg02, #16
1f67c     40 12 62 FD | 	dirl	arg01
1f680     09 15 02 FC | 	wrpin	arg02, arg01
1f684     09 3F 18 FC | 	wxpin	#31, arg01
1f688     FF FF FF FF 
1f68c     09 FF 2B FC | 	wypin	##-1, arg01
1f690     41 12 62 FD | 	dirh	arg01
1f694     04 4E 85 F1 | 	sub	fp, #4
1f698     A7 14 02 FB | 	rdlong	arg02, fp
1f69c     08 4E 05 F1 | 	add	fp, #8
1f6a0     A7 22 02 FB | 	rdlong	local03, fp
1f6a4     11 15 82 F1 | 	sub	arg02, local03
1f6a8     07 14 06 F5 | 	and	arg02, #7
1f6ac     18 14 66 F0 | 	shl	arg02, #24
1f6b0     14 4E 85 F1 | 	sub	fp, #20
1f6b4     A7 14 62 FC | 	wrlong	arg02, fp
1f6b8     29 00 00 FF 
1f6bc     7A 14 46 F5 | 	or	arg02, ##21114
1f6c0     A7 14 62 FC | 	wrlong	arg02, fp
1f6c4     14 4E 05 F1 | 	add	fp, #20
1f6c8     A7 12 02 FB | 	rdlong	arg01, fp
1f6cc     40 12 62 FD | 	dirl	arg01
1f6d0     09 15 02 FC | 	wrpin	arg02, arg01
1f6d4     09 4F 18 FC | 	wxpin	#39, arg01
1f6d8     09 01 28 FC | 	wypin	#0, arg01
1f6dc     41 12 62 FD | 	dirh	arg01
1f6e0     28 4E 85 F1 | 	sub	fp, #40
1f6e4     A7 12 02 F6 | 	mov	arg01, fp
1f6e8     14 4E 85 F1 | 	sub	fp, #20
1f6ec     0A 14 06 F6 | 	mov	arg02, #10
1f6f0     0C 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0999
1f6f4     00 12 06 F6 | 	mov	arg01, #0
1f6f8     00 14 06 F6 | 	mov	arg02, #0
1f6fc     D8 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1f700     14 80 B0 FD | 	call	#_fatfs_cc_deselect_1009
1f704     64 12 06 F6 | 	mov	arg01, #100
1f708     CC 99 BF FD | 	call	#__system___waitus
1f70c     14 4E 05 F1 | 	add	fp, #20
1f710     A7 12 02 F6 | 	mov	arg01, fp
1f714     14 4E 85 F1 | 	sub	fp, #20
1f718     0A 14 06 F6 | 	mov	arg02, #10
1f71c     E0 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0999
1f720     0C 4E 05 F1 | 	add	fp, #12
1f724     A7 00 48 FC | 	wrbyte	#0, fp
1f728     0C 4E 85 F1 | 	sub	fp, #12
1f72c     00 12 06 F6 | 	mov	arg01, #0
1f730     00 14 06 F6 | 	mov	arg02, #0
1f734     A0 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1f738     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
1f73c     01 18 0E F2 | 	cmp	arg04, #1 wz
1f740     B8 03 90 5D |  if_ne	jmp	#LR__3287
1f744     08 12 06 F6 | 	mov	arg01, #8
1f748     AA 15 06 F6 | 	mov	arg02, #426
1f74c     88 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1f750     FD FA E1 F8 | 	getbyte	result1, result1, #0
1f754     01 FA 0D F2 | 	cmp	result1, #1 wz
1f758     98 01 90 5D |  if_ne	jmp	#LR__3273
1f75c     14 4E 05 F1 | 	add	fp, #20
1f760     A7 12 02 F6 | 	mov	arg01, fp
1f764     14 4E 85 F1 | 	sub	fp, #20
1f768     04 14 06 F6 | 	mov	arg02, #4
1f76c     90 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0999
1f770     16 4E 05 F1 | 	add	fp, #22
1f774     A7 24 C2 FA | 	rdbyte	local04, fp
1f778     16 4E 85 F1 | 	sub	fp, #22
1f77c     01 24 0E F2 | 	cmp	local04, #1 wz
1f780     17 4E 05 A1 |  if_e	add	fp, #23
1f784     A7 22 C2 AA |  if_e	rdbyte	local03, fp
1f788     17 4E 85 A1 |  if_e	sub	fp, #23
1f78c     AA 22 0E A2 |  if_e	cmp	local03, #170 wz
1f790     68 03 90 5D |  if_ne	jmp	#LR__3286
1f794                 | ' 				for (tmr = 1000; tmr; tmr--) {
1f794     18 4E 05 F1 | 	add	fp, #24
1f798     01 00 80 FF 
1f79c     A7 D0 6B FC | 	wrlong	##1000, fp
1f7a0     18 4E 85 F1 | 	sub	fp, #24
1f7a4                 | LR__3270
1f7a4     18 4E 05 F1 | 	add	fp, #24
1f7a8     A7 1E 0A FB | 	rdlong	local01, fp wz
1f7ac     18 4E 85 F1 | 	sub	fp, #24
1f7b0     3C 00 90 AD |  if_e	jmp	#LR__3271
1f7b4     A9 12 06 F6 | 	mov	arg01, #169
1f7b8     1E 14 C6 F9 | 	decod	arg02, #30
1f7bc     18 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1f7c0     FD 24 02 F6 | 	mov	local04, result1
1f7c4     07 24 4E F7 | 	zerox	local04, #7 wz
1f7c8     24 00 90 AD |  if_e	jmp	#LR__3271
1f7cc     01 00 00 FF 
1f7d0     E8 13 06 F6 | 	mov	arg01, ##1000
1f7d4     00 99 BF FD | 	call	#__system___waitus
1f7d8     18 4E 05 F1 | 	add	fp, #24
1f7dc     A7 24 02 FB | 	rdlong	local04, fp
1f7e0     01 24 86 F1 | 	sub	local04, #1
1f7e4     A7 24 62 FC | 	wrlong	local04, fp
1f7e8     18 4E 85 F1 | 	sub	fp, #24
1f7ec     B4 FF 9F FD | 	jmp	#LR__3270
1f7f0                 | LR__3271
1f7f0     18 4E 05 F1 | 	add	fp, #24
1f7f4     A7 24 0A FB | 	rdlong	local04, fp wz
1f7f8     18 4E 85 F1 | 	sub	fp, #24
1f7fc     4C 00 90 AD |  if_e	jmp	#LR__3272
1f800     3A 12 06 F6 | 	mov	arg01, #58
1f804     00 14 06 F6 | 	mov	arg02, #0
1f808     CC 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1f80c     FD 22 02 F6 | 	mov	local03, result1
1f810     07 22 4E F7 | 	zerox	local03, #7 wz
1f814     34 00 90 5D |  if_ne	jmp	#LR__3272
1f818     14 4E 05 F1 | 	add	fp, #20
1f81c     A7 12 02 F6 | 	mov	arg01, fp
1f820     14 4E 85 F1 | 	sub	fp, #20
1f824     04 14 06 F6 | 	mov	arg02, #4
1f828     D4 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0999
1f82c     14 4E 05 F1 | 	add	fp, #20
1f830     A7 1E C2 FA | 	rdbyte	local01, fp
1f834     40 1E CE F7 | 	test	local01, #64 wz
1f838     0C 24 06 56 |  if_ne	mov	local04, #12
1f83c     04 24 06 A6 |  if_e	mov	local04, #4
1f840     08 4E 85 F1 | 	sub	fp, #8
1f844     A7 24 42 FC | 	wrbyte	local04, fp
1f848     0C 4E 85 F1 | 	sub	fp, #12
1f84c                 | LR__3272
1f84c     14 24 06 FB | 	rdlong	local04, #20
1f850     18 4E 05 F1 | 	add	fp, #24
1f854     A7 24 62 FC | 	wrlong	local04, fp
1f858     0C 4E 05 F1 | 	add	fp, #12
1f85c     A7 24 02 FB | 	rdlong	local04, fp
1f860     1B 24 26 F4 | 	bith	local04, #27
1f864     A7 24 62 FC | 	wrlong	local04, fp
1f868     0C 4E 85 F1 | 	sub	fp, #12
1f86c     A7 24 02 FB | 	rdlong	local04, fp
1f870     18 4E 85 F1 | 	sub	fp, #24
1f874     68 78 04 FF 
1f878     81 25 16 F2 | 	cmp	local04, ##150000001 wc
1f87c     1C 4E 05 C1 |  if_b	add	fp, #28
1f880     00 01 80 CF 
1f884     A7 08 68 CC |  if_b	wrlong	##131076, fp
1f888     1C 4E 85 C1 |  if_b	sub	fp, #28
1f88c     6C 02 90 CD |  if_b	jmp	#LR__3286
1f890     18 4E 05 F1 | 	add	fp, #24
1f894     A7 24 02 FB | 	rdlong	local04, fp
1f898     18 4E 85 F1 | 	sub	fp, #24
1f89c     E1 F5 05 FF 
1f8a0     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1f8a4     1C 4E 05 C1 |  if_b	add	fp, #28
1f8a8     00 01 80 CF 
1f8ac     A7 0A 68 CC |  if_b	wrlong	##131077, fp
1f8b0     1C 4E 85 C1 |  if_b	sub	fp, #28
1f8b4     44 02 90 CD |  if_b	jmp	#LR__3286
1f8b8     18 4E 05 F1 | 	add	fp, #24
1f8bc     A7 24 02 FB | 	rdlong	local04, fp
1f8c0     18 4E 85 F1 | 	sub	fp, #24
1f8c4     3B 58 08 FF 
1f8c8     01 24 16 F2 | 	cmp	local04, ##280000001 wc
1f8cc     1C 4E 05 C1 |  if_b	add	fp, #28
1f8d0     00 01 80 CF 
1f8d4     A7 0C 68 CC |  if_b	wrlong	##131078, fp
1f8d8     1C 4E 85 C1 |  if_b	sub	fp, #28
1f8dc     1C 02 90 CD |  if_b	jmp	#LR__3286
1f8e0     1C 4E 05 F1 | 	add	fp, #28
1f8e4     80 01 80 FF 
1f8e8     A7 10 68 FC | 	wrlong	##196616, fp
1f8ec     1C 4E 85 F1 | 	sub	fp, #28
1f8f0     08 02 90 FD | 	jmp	#LR__3286
1f8f4                 | LR__3273
1f8f4     A9 12 06 F6 | 	mov	arg01, #169
1f8f8     00 14 06 F6 | 	mov	arg02, #0
1f8fc     D8 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1f900     FD 24 E2 F8 | 	getbyte	local04, result1, #0
1f904     02 24 16 F2 | 	cmp	local04, #2 wc
1f908     18 00 90 3D |  if_ae	jmp	#LR__3274
1f90c     0C 4E 05 F1 | 	add	fp, #12
1f910     A7 04 48 FC | 	wrbyte	#2, fp
1f914     04 4E 05 F1 | 	add	fp, #4
1f918     A7 52 49 FC | 	wrbyte	#169, fp
1f91c     10 4E 85 F1 | 	sub	fp, #16
1f920     14 00 90 FD | 	jmp	#LR__3275
1f924                 | LR__3274
1f924     0C 4E 05 F1 | 	add	fp, #12
1f928     A7 02 48 FC | 	wrbyte	#1, fp
1f92c     04 4E 05 F1 | 	add	fp, #4
1f930     A7 02 48 FC | 	wrbyte	#1, fp
1f934     10 4E 85 F1 | 	sub	fp, #16
1f938                 | LR__3275
1f938                 | ' 				ty =  0x01 ; cmd =  (1) ;
1f938                 | ' 			}
1f938                 | ' 			for (tmr = 1000; tmr; tmr--) {
1f938     18 4E 05 F1 | 	add	fp, #24
1f93c     01 00 80 FF 
1f940     A7 D0 6B FC | 	wrlong	##1000, fp
1f944     18 4E 85 F1 | 	sub	fp, #24
1f948                 | LR__3276
1f948     18 4E 05 F1 | 	add	fp, #24
1f94c     A7 22 0A FB | 	rdlong	local03, fp wz
1f950     18 4E 85 F1 | 	sub	fp, #24
1f954     44 00 90 AD |  if_e	jmp	#LR__3277
1f958     10 4E 05 F1 | 	add	fp, #16
1f95c     A7 12 C2 FA | 	rdbyte	arg01, fp
1f960     10 4E 85 F1 | 	sub	fp, #16
1f964     00 14 06 F6 | 	mov	arg02, #0
1f968     6C 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1f96c     FD 24 02 F6 | 	mov	local04, result1
1f970     07 24 4E F7 | 	zerox	local04, #7 wz
1f974     24 00 90 AD |  if_e	jmp	#LR__3277
1f978     01 00 00 FF 
1f97c     E8 13 06 F6 | 	mov	arg01, ##1000
1f980     54 97 BF FD | 	call	#__system___waitus
1f984     18 4E 05 F1 | 	add	fp, #24
1f988     A7 24 02 FB | 	rdlong	local04, fp
1f98c     01 24 86 F1 | 	sub	local04, #1
1f990     A7 24 62 FC | 	wrlong	local04, fp
1f994     18 4E 85 F1 | 	sub	fp, #24
1f998     AC FF 9F FD | 	jmp	#LR__3276
1f99c                 | LR__3277
1f99c     18 4E 05 F1 | 	add	fp, #24
1f9a0     A7 24 0A FB | 	rdlong	local04, fp wz
1f9a4     18 4E 85 F1 | 	sub	fp, #24
1f9a8     14 00 90 AD |  if_e	jmp	#LR__3278
1f9ac     10 12 06 F6 | 	mov	arg01, #16
1f9b0     09 14 C6 F9 | 	decod	arg02, #9
1f9b4     20 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1f9b8     07 FA 4D F7 | 	zerox	result1, #7 wz
1f9bc     0C 00 90 AD |  if_e	jmp	#LR__3279
1f9c0                 | LR__3278
1f9c0     0C 4E 05 F1 | 	add	fp, #12
1f9c4     A7 00 48 FC | 	wrbyte	#0, fp
1f9c8     0C 4E 85 F1 | 	sub	fp, #12
1f9cc                 | LR__3279
1f9cc     14 24 06 FB | 	rdlong	local04, #20
1f9d0     18 4E 05 F1 | 	add	fp, #24
1f9d4     A7 24 62 FC | 	wrlong	local04, fp
1f9d8     18 4E 85 F1 | 	sub	fp, #24
1f9dc     F0 FA 02 FF 
1f9e0     01 25 16 F2 | 	cmp	local04, ##100000001 wc
1f9e4     18 00 90 3D |  if_ae	jmp	#LR__3280
1f9e8     24 4E 05 F1 | 	add	fp, #36
1f9ec     A7 24 02 FB | 	rdlong	local04, fp
1f9f0     1B 24 26 F4 | 	bith	local04, #27
1f9f4     A7 24 62 FC | 	wrlong	local04, fp
1f9f8     24 4E 85 F1 | 	sub	fp, #36
1f9fc     2C 00 90 FD | 	jmp	#LR__3281
1fa00                 | LR__3280
1fa00     18 4E 05 F1 | 	add	fp, #24
1fa04     A7 24 02 FB | 	rdlong	local04, fp
1fa08     18 4E 85 F1 | 	sub	fp, #24
1fa0c     E1 F5 05 FF 
1fa10     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1fa14     24 4E 05 C1 |  if_b	add	fp, #36
1fa18     A7 24 02 CB |  if_b	rdlong	local04, fp
1fa1c     80 00 04 CF 
1fa20     00 24 46 C5 |  if_b	or	local04, ##134283264
1fa24     A7 24 62 CC |  if_b	wrlong	local04, fp
1fa28     24 4E 85 C1 |  if_b	sub	fp, #36
1fa2c                 | LR__3281
1fa2c     18 4E 05 F1 | 	add	fp, #24
1fa30     A7 24 02 FB | 	rdlong	local04, fp
1fa34     18 4E 85 F1 | 	sub	fp, #24
1fa38     F0 FA 02 FF 
1fa3c     01 25 16 F2 | 	cmp	local04, ##100000001 wc
1fa40     1C 4E 05 C1 |  if_b	add	fp, #28
1fa44     00 01 80 CF 
1fa48     A7 08 68 CC |  if_b	wrlong	##131076, fp
1fa4c     1C 4E 85 C1 |  if_b	sub	fp, #28
1fa50     A8 00 90 CD |  if_b	jmp	#LR__3285
1fa54     18 4E 05 F1 | 	add	fp, #24
1fa58     A7 24 02 FB | 	rdlong	local04, fp
1fa5c     18 4E 85 F1 | 	sub	fp, #24
1fa60     68 78 04 FF 
1fa64     81 25 16 F2 | 	cmp	local04, ##150000001 wc
1fa68     1C 4E 05 C1 |  if_b	add	fp, #28
1fa6c     80 01 80 CF 
1fa70     A7 0C 68 CC |  if_b	wrlong	##196614, fp
1fa74     1C 4E 85 C1 |  if_b	sub	fp, #28
1fa78     80 00 90 CD |  if_b	jmp	#LR__3284
1fa7c     18 4E 05 F1 | 	add	fp, #24
1fa80     A7 24 02 FB | 	rdlong	local04, fp
1fa84     18 4E 85 F1 | 	sub	fp, #24
1fa88     E1 F5 05 FF 
1fa8c     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1fa90     1C 4E 05 C1 |  if_b	add	fp, #28
1fa94     00 02 80 CF 
1fa98     A7 10 68 CC |  if_b	wrlong	##262152, fp
1fa9c     1C 4E 85 C1 |  if_b	sub	fp, #28
1faa0     58 00 90 CD |  if_b	jmp	#LR__3283
1faa4     18 4E 05 F1 | 	add	fp, #24
1faa8     A7 24 02 FB | 	rdlong	local04, fp
1faac     18 4E 85 F1 | 	sub	fp, #24
1fab0     59 73 07 FF 
1fab4     81 24 16 F2 | 	cmp	local04, ##250000001 wc
1fab8     1C 4E 05 C1 |  if_b	add	fp, #28
1fabc     80 02 80 CF 
1fac0     A7 14 68 CC |  if_b	wrlong	##327690, fp
1fac4     1C 4E 85 C1 |  if_b	sub	fp, #28
1fac8     30 00 90 CD |  if_b	jmp	#LR__3282
1facc     18 4E 05 F1 | 	add	fp, #24
1fad0     A7 24 02 FB | 	rdlong	local04, fp
1fad4     18 4E 85 F1 | 	sub	fp, #24
1fad8     D1 F0 08 FF 
1fadc     01 25 16 F2 | 	cmp	local04, ##300000001 wc
1fae0     1C 4E 05 C1 |  if_b	add	fp, #28
1fae4     00 03 80 CF 
1fae8     A7 18 68 CC |  if_b	wrlong	##393228, fp
1faec     1C 4E 85 F3 | 	sumc	fp, #28
1faf0     80 03 80 3F 
1faf4     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
1faf8     1C 4E 85 31 |  if_ae	sub	fp, #28
1fafc                 | LR__3282
1fafc                 | LR__3283
1fafc                 | LR__3284
1fafc                 | LR__3285
1fafc                 | LR__3286
1fafc                 | LR__3287
1fafc     0C 4E 05 F1 | 	add	fp, #12
1fb00     A7 24 C2 FA | 	rdbyte	local04, fp
1fb04     01 00 00 FF 
1fb08     21 E4 05 F1 | 	add	objptr, ##545
1fb0c     F2 24 42 FC | 	wrbyte	local04, objptr
1fb10     A7 1E CA FA | 	rdbyte	local01, fp wz
1fb14     00 24 06 56 |  if_ne	mov	local04, #0
1fb18     01 24 06 A6 |  if_e	mov	local04, #1
1fb1c     20 4E 05 F1 | 	add	fp, #32
1fb20     A7 24 42 FC | 	wrbyte	local04, fp
1fb24     A7 24 C2 FA | 	rdbyte	local04, fp
1fb28     2C 4E 85 F1 | 	sub	fp, #44
1fb2c     01 E4 85 F1 | 	sub	objptr, #1
1fb30     F2 24 42 FC | 	wrbyte	local04, objptr
1fb34     01 00 00 FF 
1fb38     20 E4 85 F1 | 	sub	objptr, ##544
1fb3c     D8 7B B0 FD | 	call	#_fatfs_cc_deselect_1009
1fb40     34 4E 05 F1 | 	add	fp, #52
1fb44     A7 12 02 FB | 	rdlong	arg01, fp
1fb48     18 4E 85 F1 | 	sub	fp, #24
1fb4c     A7 14 02 FB | 	rdlong	arg02, fp
1fb50     09 15 12 FC | 	wxpin	arg02, arg01
1fb54     1C 4E 05 F1 | 	add	fp, #28
1fb58     A7 12 02 FB | 	rdlong	arg01, fp
1fb5c     14 4E 85 F1 | 	sub	fp, #20
1fb60     A7 14 02 FB | 	rdlong	arg02, fp
1fb64     09 15 02 FC | 	wrpin	arg02, arg01
1fb68                 | ' 
1fb68                 | ' 		}
1fb68                 | ' 	}
1fb68                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
1fb68                 | ' 	CardType = ty;
1fb68                 | ' 	s = ty ? 0 :  0x01 ;
1fb68                 | ' 	Stat = s;
1fb68                 | ' 
1fb68                 | ' 	deselect();
1fb68                 | ' 
1fb68                 | ' 
1fb68                 | ' 	_wxpin( PIN_CLK, ck_div );
1fb68                 | ' 	_wrpin( PIN_DI, spm_tx );
1fb68                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
1fb68                 | ' 	return s;
1fb68     08 4E 05 F1 | 	add	fp, #8
1fb6c     A7 FA C1 FA | 	rdbyte	result1, fp
1fb70     2C 4E 85 F1 | 	sub	fp, #44
1fb74                 | LR__3288
1fb74     A7 F0 03 F6 | 	mov	ptra, fp
1fb78     B2 00 A0 FD | 	call	#popregs_
1fb7c                 | _fatfs_cc_disk_initialize_ret
1fb7c     2D 00 64 FD | 	ret
1fb80                 | 
1fb80                 | _fatfs_cc_disk_read
1fb80     05 4A 05 F6 | 	mov	COUNT_, #5
1fb84     A8 00 A0 FD | 	call	#pushregs_
1fb88     0A 1F 02 F6 | 	mov	local01, arg02
1fb8c     0B 21 02 F6 | 	mov	local02, arg03
1fb90     0C 23 02 F6 | 	mov	local03, arg04
1fb94     00 12 0E F2 | 	cmp	arg01, #0 wz
1fb98     01 FA 05 56 |  if_ne	mov	result1, #1
1fb9c                 | ' 
1fb9c                 | ' 	return Stat;
1fb9c     01 00 00 AF 
1fba0     20 E4 05 A1 |  if_e	add	objptr, ##544
1fba4     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1fba8     01 00 00 AF 
1fbac     20 E4 85 A1 |  if_e	sub	objptr, ##544
1fbb0     FD FA E1 F8 | 	getbyte	result1, result1, #0
1fbb4     01 FA CD F7 | 	test	result1, #1 wz
1fbb8     03 FA 05 56 |  if_ne	mov	result1, #3
1fbbc     84 00 90 5D |  if_ne	jmp	#LR__3292
1fbc0     01 00 00 FF 
1fbc4     21 E4 05 F1 | 	add	objptr, ##545
1fbc8     F2 24 C2 FA | 	rdbyte	local04, objptr
1fbcc     01 00 00 FF 
1fbd0     21 E4 85 F1 | 	sub	objptr, ##545
1fbd4     08 24 CE F7 | 	test	local04, #8 wz
1fbd8     09 20 66 A0 |  if_e	shl	local02, #9
1fbdc     02 22 16 F2 | 	cmp	local03, #2 wc
1fbe0     12 24 06 36 |  if_ae	mov	local04, #18
1fbe4     11 24 06 C6 |  if_b	mov	local04, #17
1fbe8     10 15 02 F6 | 	mov	arg02, local02
1fbec     12 13 02 F6 | 	mov	arg01, local04
1fbf0     E4 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1fbf4     FD 26 02 F6 | 	mov	local05, result1
1fbf8     07 26 4E F7 | 	zerox	local05, #7 wz
1fbfc     30 00 90 5D |  if_ne	jmp	#LR__3291
1fc00                 | ' 		do {
1fc00                 | LR__3290
1fc00     0F 13 02 F6 | 	mov	arg01, local01
1fc04     09 14 C6 F9 | 	decod	arg02, #9
1fc08     20 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1017
1fc0c     00 FA 0D F2 | 	cmp	result1, #0 wz
1fc10     01 00 00 5F 
1fc14     00 1E 06 51 |  if_ne	add	local01, ##512
1fc18     F9 23 6E 5B |  if_ne	djnz	local03, #LR__3290
1fc1c     12 25 E2 F8 | 	getbyte	local04, local04, #0
1fc20     12 24 0E F2 | 	cmp	local04, #18 wz
1fc24     0C 12 06 A6 |  if_e	mov	arg01, #12
1fc28     00 14 06 A6 |  if_e	mov	arg02, #0
1fc2c     A8 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1023
1fc30                 | LR__3291
1fc30     E4 7A B0 FD | 	call	#_fatfs_cc_deselect_1009
1fc34                 | ' 	}
1fc34                 | ' 	deselect();
1fc34                 | ' 
1fc34                 | ' 	return count ? RES_ERROR : RES_OK;
1fc34     00 22 0E F2 | 	cmp	local03, #0 wz
1fc38     01 26 06 56 |  if_ne	mov	local05, #1
1fc3c     00 26 06 A6 |  if_e	mov	local05, #0
1fc40     13 FB 01 F6 | 	mov	result1, local05
1fc44                 | LR__3292
1fc44     A7 F0 03 F6 | 	mov	ptra, fp
1fc48     B2 00 A0 FD | 	call	#popregs_
1fc4c                 | _fatfs_cc_disk_read_ret
1fc4c     2D 00 64 FD | 	ret
1fc50                 | 
1fc50                 | _fatfs_cc_disk_write
1fc50     04 4A 05 F6 | 	mov	COUNT_, #4
1fc54     A8 00 A0 FD | 	call	#pushregs_
1fc58     0A 1F 02 F6 | 	mov	local01, arg02
1fc5c     0C 21 02 F6 | 	mov	local02, arg04
1fc60     0B 23 02 F6 | 	mov	local03, arg03
1fc64     00 12 0E F2 | 	cmp	arg01, #0 wz
1fc68     01 FA 05 56 |  if_ne	mov	result1, #1
1fc6c                 | ' 
1fc6c                 | ' 	return Stat;
1fc6c     01 00 00 AF 
1fc70     20 E4 05 A1 |  if_e	add	objptr, ##544
1fc74     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1fc78     01 00 00 AF 
1fc7c     20 E4 85 A1 |  if_e	sub	objptr, ##544
1fc80     FD FA E1 F8 | 	getbyte	result1, result1, #0
1fc84     01 FA CD F7 | 	test	result1, #1 wz
1fc88     03 FA 05 56 |  if_ne	mov	result1, #3
1fc8c     D4 00 90 5D |  if_ne	jmp	#LR__3304
1fc90     01 00 00 FF 
1fc94     21 E4 05 F1 | 	add	objptr, ##545
1fc98     F2 16 C2 FA | 	rdbyte	arg03, objptr
1fc9c     01 00 00 FF 
1fca0     21 E4 85 F1 | 	sub	objptr, ##545
1fca4     08 16 CE F7 | 	test	arg03, #8 wz
1fca8     09 22 66 A0 |  if_e	shl	local03, #9
1fcac     01 20 0E F2 | 	cmp	local02, #1 wz
1fcb0     30 00 90 5D |  if_ne	jmp	#LR__3300
1fcb4     18 12 06 F6 | 	mov	arg01, #24
1fcb8     11 15 02 F6 | 	mov	arg02, local03
1fcbc     18 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1fcc0     FD 24 02 F6 | 	mov	local04, result1
1fcc4     07 24 4E F7 | 	zerox	local04, #7 wz
1fcc8     84 00 90 5D |  if_ne	jmp	#LR__3303
1fccc     0F 13 02 F6 | 	mov	arg01, local01
1fcd0     FE 14 06 F6 | 	mov	arg02, #254
1fcd4     34 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1019
1fcd8     00 FA 0D F2 | 	cmp	result1, #0 wz
1fcdc     00 20 06 56 |  if_ne	mov	local02, #0
1fce0     6C 00 90 FD | 	jmp	#LR__3303
1fce4                 | LR__3300
1fce4     01 00 00 FF 
1fce8     21 E4 05 F1 | 	add	objptr, ##545
1fcec     F2 24 C2 FA | 	rdbyte	local04, objptr
1fcf0     01 00 00 FF 
1fcf4     21 E4 85 F1 | 	sub	objptr, ##545
1fcf8     06 24 CE F7 | 	test	local04, #6 wz
1fcfc     97 12 06 56 |  if_ne	mov	arg01, #151
1fd00     10 15 02 56 |  if_ne	mov	arg02, local02
1fd04     D0 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1023
1fd08     11 15 02 F6 | 	mov	arg02, local03
1fd0c     19 12 06 F6 | 	mov	arg01, #25
1fd10     C4 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1fd14     FD 24 02 F6 | 	mov	local04, result1
1fd18     07 24 4E F7 | 	zerox	local04, #7 wz
1fd1c     30 00 90 5D |  if_ne	jmp	#LR__3302
1fd20                 | ' 			do {
1fd20                 | LR__3301
1fd20     0F 13 02 F6 | 	mov	arg01, local01
1fd24     FC 14 06 F6 | 	mov	arg02, #252
1fd28     E0 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1019
1fd2c     00 FA 0D F2 | 	cmp	result1, #0 wz
1fd30     01 00 00 5F 
1fd34     00 1E 06 51 |  if_ne	add	local01, ##512
1fd38     F9 21 6E 5B |  if_ne	djnz	local02, #LR__3301
1fd3c     00 12 06 F6 | 	mov	arg01, #0
1fd40     FD 14 06 F6 | 	mov	arg02, #253
1fd44     C4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1019
1fd48     00 FA 0D F2 | 	cmp	result1, #0 wz
1fd4c     01 20 06 A6 |  if_e	mov	local02, #1
1fd50                 | LR__3302
1fd50                 | LR__3303
1fd50     C4 79 B0 FD | 	call	#_fatfs_cc_deselect_1009
1fd54                 | ' 				count = 1;
1fd54                 | ' 		}
1fd54                 | ' 	}
1fd54                 | ' 	deselect();
1fd54                 | ' 
1fd54                 | ' 	return count ? RES_ERROR : RES_OK;
1fd54     00 20 0E F2 | 	cmp	local02, #0 wz
1fd58     01 24 06 56 |  if_ne	mov	local04, #1
1fd5c     00 24 06 A6 |  if_e	mov	local04, #0
1fd60     12 FB 01 F6 | 	mov	result1, local04
1fd64                 | LR__3304
1fd64     A7 F0 03 F6 | 	mov	ptra, fp
1fd68     B2 00 A0 FD | 	call	#popregs_
1fd6c                 | _fatfs_cc_disk_write_ret
1fd6c     2D 00 64 FD | 	ret
1fd70                 | 
1fd70                 | _fatfs_cc_disk_ioctl
1fd70     01 4A 05 F6 | 	mov	COUNT_, #1
1fd74     A8 00 A0 FD | 	call	#pushregs_
1fd78     30 F0 07 F1 | 	add	ptra, #48
1fd7c     04 4E 05 F1 | 	add	fp, #4
1fd80     A7 12 42 FC | 	wrbyte	arg01, fp
1fd84     04 4E 05 F1 | 	add	fp, #4
1fd88     A7 14 42 FC | 	wrbyte	arg02, fp
1fd8c     04 4E 05 F1 | 	add	fp, #4
1fd90     A7 16 62 FC | 	wrlong	arg03, fp
1fd94     08 4E 85 F1 | 	sub	fp, #8
1fd98     A7 12 CA FA | 	rdbyte	arg01, fp wz
1fd9c     04 4E 85 F1 | 	sub	fp, #4
1fda0     01 FA 05 56 |  if_ne	mov	result1, #1
1fda4                 | ' 
1fda4                 | ' 	return Stat;
1fda4     01 00 00 AF 
1fda8     20 E4 05 A1 |  if_e	add	objptr, ##544
1fdac     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1fdb0     01 00 00 AF 
1fdb4     20 E4 85 A1 |  if_e	sub	objptr, ##544
1fdb8     FD FA E1 F8 | 	getbyte	result1, result1, #0
1fdbc     01 FA CD F7 | 	test	result1, #1 wz
1fdc0     03 FA 05 56 |  if_ne	mov	result1, #3
1fdc4     E4 01 90 5D |  if_ne	jmp	#LR__3318
1fdc8     10 4E 05 F1 | 	add	fp, #16
1fdcc     A7 02 68 FC | 	wrlong	#1, fp
1fdd0                 | ' 
1fdd0                 | ' 	res = RES_ERROR;
1fdd0                 | ' 	switch (ctrl) {
1fdd0     08 4E 85 F1 | 	sub	fp, #8
1fdd4     A7 1E C2 FA | 	rdbyte	local01, fp
1fdd8     08 4E 85 F1 | 	sub	fp, #8
1fddc     04 1E 26 F3 | 	fle	local01, #4
1fde0     30 1E 62 FD | 	jmprel	local01
1fde4                 | LR__3310
1fde4     10 00 90 FD | 	jmp	#LR__3311
1fde8     24 00 90 FD | 	jmp	#LR__3312
1fdec     A0 01 90 FD | 	jmp	#LR__3316
1fdf0     80 01 90 FD | 	jmp	#LR__3315
1fdf4     98 01 90 FD | 	jmp	#LR__3316
1fdf8                 | LR__3311
1fdf8     A0 79 B0 FD | 	call	#_fatfs_cc_select_1013
1fdfc     00 FA 0D F2 | 	cmp	result1, #0 wz
1fe00     10 4E 05 51 |  if_ne	add	fp, #16
1fe04     A7 00 68 5C |  if_ne	wrlong	#0, fp
1fe08     10 4E 85 51 |  if_ne	sub	fp, #16
1fe0c                 | ' 			break;
1fe0c     8C 01 90 FD | 	jmp	#LR__3317
1fe10                 | LR__3312
1fe10     09 12 06 F6 | 	mov	arg01, #9
1fe14     00 14 06 F6 | 	mov	arg02, #0
1fe18     BC 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1fe1c     FD 1E 02 F6 | 	mov	local01, result1
1fe20     07 1E 4E F7 | 	zerox	local01, #7 wz
1fe24     74 01 90 5D |  if_ne	jmp	#LR__3317
1fe28     18 4E 05 F1 | 	add	fp, #24
1fe2c     A7 12 02 F6 | 	mov	arg01, fp
1fe30     18 4E 85 F1 | 	sub	fp, #24
1fe34     10 14 06 F6 | 	mov	arg02, #16
1fe38     F0 79 B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1017
1fe3c     00 FA 0D F2 | 	cmp	result1, #0 wz
1fe40     58 01 90 AD |  if_e	jmp	#LR__3317
1fe44     18 4E 05 F1 | 	add	fp, #24
1fe48     A7 1E C2 FA | 	rdbyte	local01, fp
1fe4c     18 4E 85 F1 | 	sub	fp, #24
1fe50     06 1E 46 F0 | 	shr	local01, #6
1fe54     01 1E 0E F2 | 	cmp	local01, #1 wz
1fe58     5C 00 90 5D |  if_ne	jmp	#LR__3313
1fe5c     21 4E 05 F1 | 	add	fp, #33
1fe60     A7 1E C2 FA | 	rdbyte	local01, fp
1fe64     01 4E 85 F1 | 	sub	fp, #1
1fe68     A7 FA C1 FA | 	rdbyte	result1, fp
1fe6c     FD FA 31 F9 | 	getword	result1, result1, #0
1fe70     08 FA 65 F0 | 	shl	result1, #8
1fe74     FD 1E 02 F1 | 	add	local01, result1
1fe78     01 4E 85 F1 | 	sub	fp, #1
1fe7c     A7 FA C1 FA | 	rdbyte	result1, fp
1fe80     3F FA 05 F5 | 	and	result1, #63
1fe84     10 FA 65 F0 | 	shl	result1, #16
1fe88     FD 1E 02 F1 | 	add	local01, result1
1fe8c     01 1E 06 F1 | 	add	local01, #1
1fe90     09 4E 05 F1 | 	add	fp, #9
1fe94     A7 1E 62 FC | 	wrlong	local01, fp
1fe98     1C 4E 85 F1 | 	sub	fp, #28
1fe9c     A7 1E 02 FB | 	rdlong	local01, fp
1fea0     1C 4E 05 F1 | 	add	fp, #28
1fea4     A7 FA 01 FB | 	rdlong	result1, fp
1fea8     28 4E 85 F1 | 	sub	fp, #40
1feac     0A FA 65 F0 | 	shl	result1, #10
1feb0     0F FB 61 FC | 	wrlong	result1, local01
1feb4     AC 00 90 FD | 	jmp	#LR__3314
1feb8                 | LR__3313
1feb8     1D 4E 05 F1 | 	add	fp, #29
1febc     A7 1E C2 FA | 	rdbyte	local01, fp
1fec0     0F 1F 42 F8 | 	getnib	local01, local01, #0
1fec4     05 4E 05 F1 | 	add	fp, #5
1fec8     A7 FA C1 FA | 	rdbyte	result1, fp
1fecc     80 FA 05 F5 | 	and	result1, #128
1fed0     07 FA C5 F0 | 	sar	result1, #7
1fed4     FD 1E 02 F1 | 	add	local01, result1
1fed8     01 4E 85 F1 | 	sub	fp, #1
1fedc     A7 FA C1 FA | 	rdbyte	result1, fp
1fee0     03 FA 05 F5 | 	and	result1, #3
1fee4     01 FA 65 F0 | 	shl	result1, #1
1fee8     FD 1E 02 F1 | 	add	local01, result1
1feec     02 1E 06 F1 | 	add	local01, #2
1fef0     0D 4E 85 F1 | 	sub	fp, #13
1fef4     A7 1E 42 FC | 	wrbyte	local01, fp
1fef8     0C 4E 05 F1 | 	add	fp, #12
1fefc     A7 1E C2 FA | 	rdbyte	local01, fp
1ff00     06 1E 46 F0 | 	shr	local01, #6
1ff04     01 4E 85 F1 | 	sub	fp, #1
1ff08     A7 FA C1 FA | 	rdbyte	result1, fp
1ff0c     FD FA 31 F9 | 	getword	result1, result1, #0
1ff10     02 FA 65 F0 | 	shl	result1, #2
1ff14     FD 1E 02 F1 | 	add	local01, result1
1ff18     01 4E 85 F1 | 	sub	fp, #1
1ff1c     A7 FA C1 FA | 	rdbyte	result1, fp
1ff20     03 FA 05 F5 | 	and	result1, #3
1ff24     FD FA 31 F9 | 	getword	result1, result1, #0
1ff28     0A FA 65 F0 | 	shl	result1, #10
1ff2c     FD 1E 02 F1 | 	add	local01, result1
1ff30     01 1E 06 F1 | 	add	local01, #1
1ff34     0A 4E 05 F1 | 	add	fp, #10
1ff38     A7 1E 62 FC | 	wrlong	local01, fp
1ff3c     1C 4E 85 F1 | 	sub	fp, #28
1ff40     A7 1E 02 FB | 	rdlong	local01, fp
1ff44     1C 4E 05 F1 | 	add	fp, #28
1ff48     A7 FA 01 FB | 	rdlong	result1, fp
1ff4c     14 4E 85 F1 | 	sub	fp, #20
1ff50     A7 16 C2 FA | 	rdbyte	arg03, fp
1ff54     14 4E 85 F1 | 	sub	fp, #20
1ff58     09 16 86 F1 | 	sub	arg03, #9
1ff5c     0B FB 61 F0 | 	shl	result1, arg03
1ff60     0F FB 61 FC | 	wrlong	result1, local01
1ff64                 | LR__3314
1ff64     10 4E 05 F1 | 	add	fp, #16
1ff68     A7 00 68 FC | 	wrlong	#0, fp
1ff6c     10 4E 85 F1 | 	sub	fp, #16
1ff70                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
1ff70                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
1ff70                 | ' 					*(LBA_t*)buff = cs << (n - 9);
1ff70                 | ' 				}
1ff70                 | ' 				res = RES_OK;
1ff70                 | ' 			}
1ff70                 | ' 			break;
1ff70     28 00 90 FD | 	jmp	#LR__3317
1ff74                 | LR__3315
1ff74     0C 4E 05 F1 | 	add	fp, #12
1ff78     A7 1E 02 FB | 	rdlong	local01, fp
1ff7c     0F 01 69 FC | 	wrlong	#128, local01
1ff80     04 4E 05 F1 | 	add	fp, #4
1ff84     A7 00 68 FC | 	wrlong	#0, fp
1ff88     10 4E 85 F1 | 	sub	fp, #16
1ff8c                 | ' 			*(DWORD*)buff = 128;
1ff8c                 | ' 			res = RES_OK;
1ff8c                 | ' 			break;
1ff8c     0C 00 90 FD | 	jmp	#LR__3317
1ff90                 | LR__3316
1ff90     10 4E 05 F1 | 	add	fp, #16
1ff94     A7 08 68 FC | 	wrlong	#4, fp
1ff98     10 4E 85 F1 | 	sub	fp, #16
1ff9c                 | LR__3317
1ff9c     78 77 B0 FD | 	call	#_fatfs_cc_deselect_1009
1ffa0                 | ' 			res = RES_PARERR;
1ffa0                 | ' 	}
1ffa0                 | ' 
1ffa0                 | ' 	deselect();
1ffa0                 | ' 
1ffa0                 | ' 	return res;
1ffa0     10 4E 05 F1 | 	add	fp, #16
1ffa4     A7 FA 01 FB | 	rdlong	result1, fp
1ffa8     10 4E 85 F1 | 	sub	fp, #16
1ffac                 | LR__3318
1ffac     A7 F0 03 F6 | 	mov	ptra, fp
1ffb0     B2 00 A0 FD | 	call	#popregs_
1ffb4                 | _fatfs_cc_disk_ioctl_ret
1ffb4     2D 00 64 FD | 	ret
1ffb8                 | 
1ffb8                 | _fatfs_cc_disk_setpins
1ffb8     00 12 0E F2 | 	cmp	arg01, #0 wz
1ffbc     01 FA 65 56 |  if_ne	neg	result1, #1
1ffc0     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
1ffc4     01 00 00 FF 
1ffc8     10 E4 05 F1 | 	add	objptr, ##528
1ffcc     F2 14 62 FC | 	wrlong	arg02, objptr
1ffd0     04 E4 05 F1 | 	add	objptr, #4
1ffd4     F2 16 62 FC | 	wrlong	arg03, objptr
1ffd8     04 E4 05 F1 | 	add	objptr, #4
1ffdc     F2 18 62 FC | 	wrlong	arg04, objptr
1ffe0     04 E4 05 F1 | 	add	objptr, #4
1ffe4     F2 1A 62 FC | 	wrlong	arg05, objptr
1ffe8     01 00 00 FF 
1ffec     1C E4 85 F1 | 	sub	objptr, ##540
1fff0     00 FA 05 F6 | 	mov	result1, #0
1fff4                 | _fatfs_cc_disk_setpins_ret
1fff4     2D 00 64 FD | 	ret
1fff8                 | 
1fff8                 | _fatfs_cc_tchar2uni
1fff8     09 01 02 FB | 	rdlong	_var01, arg01
1fffc     00 03 02 F6 | 	mov	_var02, _var01
20000     01 00 06 F1 | 	add	_var01, #1
20004     00 05 02 F6 | 	mov	_var03, _var01
20008     01 07 C2 FA | 	rdbyte	_var04, _var02
2000c     80 06 CE F7 | 	test	_var04, #128 wz
20010     E8 00 90 AD |  if_e	jmp	#LR__3327
20014     03 09 02 F6 | 	mov	_var05, _var04
20018     E0 08 06 F5 | 	and	_var05, #224
2001c     C0 08 0E F2 | 	cmp	_var05, #192 wz
20020     1F 06 06 A5 |  if_e	and	_var04, #31
20024     01 0A 06 A6 |  if_e	mov	_var06, #1
20028     34 00 90 AD |  if_e	jmp	#LR__3321
2002c     03 09 02 F6 | 	mov	_var05, _var04
20030     F0 08 06 F5 | 	and	_var05, #240
20034     E0 08 0E F2 | 	cmp	_var05, #224 wz
20038     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
2003c     02 0A 06 A6 |  if_e	mov	_var06, #2
20040     1C 00 90 AD |  if_e	jmp	#LR__3320
20044     03 09 02 F6 | 	mov	_var05, _var04
20048     F8 08 06 F5 | 	and	_var05, #248
2004c     F0 08 0E F2 | 	cmp	_var05, #240 wz
20050     07 06 06 A5 |  if_e	and	_var04, #7
20054     03 0A 06 A6 |  if_e	mov	_var06, #3
20058                 | ' 			return 0xFFFFFFFF;
20058     01 FA 65 56 |  if_ne	neg	result1, #1
2005c     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
20060                 | LR__3320
20060                 | LR__3321
20060                 | ' 		}
20060                 | ' 		do {
20060                 | LR__3322
20060     02 0D C2 FA | 	rdbyte	_var07, _var03
20064     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
20068     C0 08 06 F5 | 	and	_var05, #192
2006c     80 08 0E F2 | 	cmp	_var05, #128 wz
20070     01 04 06 F1 | 	add	_var03, #1
20074     01 FA 65 56 |  if_ne	neg	result1, #1
20078     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2007c     06 06 66 F0 | 	shl	_var04, #6
20080     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
20084     3F 02 06 F5 | 	and	_var02, #63
20088     01 07 42 F5 | 	or	_var04, _var02
2008c     F4 0B 6E FB | 	djnz	_var06, #LR__3322
20090     80 06 16 F2 | 	cmp	_var04, #128 wc
20094     24 00 90 CD |  if_b	jmp	#LR__3324
20098     6C 00 00 FF 
2009c     00 06 16 F2 | 	cmp	_var04, ##55296 wc
200a0     0C 00 90 CD |  if_b	jmp	#LR__3323
200a4     70 00 00 FF 
200a8     00 06 16 F2 | 	cmp	_var04, ##57344 wc
200ac     0C 00 90 CD |  if_b	jmp	#LR__3324
200b0                 | LR__3323
200b0     80 08 00 FF 
200b4     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
200b8     08 00 90 CD |  if_b	jmp	#LR__3325
200bc                 | LR__3324
200bc     01 FA 65 F6 | 	neg	result1, #1
200c0     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
200c4                 | LR__3325
200c4     80 00 00 FF 
200c8     00 06 16 F2 | 	cmp	_var04, ##65536 wc
200cc     2C 00 90 CD |  if_b	jmp	#LR__3326
200d0     03 03 02 F6 | 	mov	_var02, _var04
200d4     80 00 00 FF 
200d8     00 02 86 F1 | 	sub	_var02, ##65536
200dc     06 02 66 F0 | 	shl	_var02, #6
200e0     80 FF 01 FF 
200e4     00 02 06 F5 | 	and	_var02, ##67043328
200e8     6E 00 6C FF 
200ec     00 08 06 F6 | 	mov	_var05, ##-671032320
200f0     01 09 42 F5 | 	or	_var05, _var02
200f4     09 06 46 F7 | 	zerox	_var04, #9
200f8     04 07 42 F5 | 	or	_var04, _var05
200fc                 | LR__3326
200fc                 | LR__3327
200fc     09 05 62 FC | 	wrlong	_var03, arg01
20100                 | ' 	}
20100                 | ' #line 811 "ff.c"
20100                 | ' 	*str = p;
20100                 | ' 	return uc;
20100     03 FB 01 F6 | 	mov	result1, _var04
20104                 | _fatfs_cc_tchar2uni_ret
20104     2D 00 64 FD | 	ret
20108                 | 
20108                 | _fatfs_cc_put_utf
20108     80 12 16 F2 | 	cmp	arg01, #128 wc
2010c     18 00 90 3D |  if_ae	jmp	#LR__3330
20110     01 16 16 F2 | 	cmp	arg03, #1 wc
20114     00 FA 05 C6 |  if_b	mov	result1, #0
20118     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2011c     0A 13 42 FC | 	wrbyte	arg01, arg02
20120                 | ' 		*buf = (TCHAR)chr;
20120                 | ' 		return 1;
20120     01 FA 05 F6 | 	mov	result1, #1
20124     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
20128                 | LR__3330
20128     04 00 00 FF 
2012c     00 12 16 F2 | 	cmp	arg01, ##2048 wc
20130     40 00 90 3D |  if_ae	jmp	#LR__3331
20134     02 16 16 F2 | 	cmp	arg03, #2 wc
20138     00 FA 05 C6 |  if_b	mov	result1, #0
2013c     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
20140     09 FB 01 F6 | 	mov	result1, arg01
20144     06 FA 45 F0 | 	shr	result1, #6
20148     1F FA 05 F5 | 	and	result1, #31
2014c     C0 16 06 F6 | 	mov	arg03, #192
20150     FD 16 42 F5 | 	or	arg03, result1
20154     0A 17 42 FC | 	wrbyte	arg03, arg02
20158     01 14 06 F1 | 	add	arg02, #1
2015c     3F 12 06 F5 | 	and	arg01, #63
20160     80 FA 05 F6 | 	mov	result1, #128
20164     09 FB 41 F5 | 	or	result1, arg01
20168     0A FB 41 FC | 	wrbyte	result1, arg02
2016c                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
2016c                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2016c                 | ' 		return 2;
2016c     02 FA 05 F6 | 	mov	result1, #2
20170     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
20174                 | LR__3331
20174     80 00 00 FF 
20178     00 12 16 F2 | 	cmp	arg01, ##65536 wc
2017c     70 00 90 3D |  if_ae	jmp	#LR__3334
20180     03 16 16 F2 | 	cmp	arg03, #3 wc
20184     18 00 90 CD |  if_b	jmp	#LR__3332
20188     6C 00 00 FF 
2018c     00 12 16 F2 | 	cmp	arg01, ##55296 wc
20190     14 00 90 CD |  if_b	jmp	#LR__3333
20194     70 00 00 FF 
20198     00 12 16 F2 | 	cmp	arg01, ##57344 wc
2019c     08 00 90 3D |  if_ae	jmp	#LR__3333
201a0                 | LR__3332
201a0     00 FA 05 F6 | 	mov	result1, #0
201a4     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
201a8                 | LR__3333
201a8     09 FB 59 F8 | 	getnib	result1, arg01, #3
201ac     E0 16 06 F6 | 	mov	arg03, #224
201b0     FD 16 42 F5 | 	or	arg03, result1
201b4     0A 17 42 FC | 	wrbyte	arg03, arg02
201b8     01 14 06 F1 | 	add	arg02, #1
201bc     09 FB 01 F6 | 	mov	result1, arg01
201c0     06 FA 45 F0 | 	shr	result1, #6
201c4     3F FA 05 F5 | 	and	result1, #63
201c8     80 16 06 F6 | 	mov	arg03, #128
201cc     FD 16 42 F5 | 	or	arg03, result1
201d0     0A 17 42 FC | 	wrbyte	arg03, arg02
201d4     01 14 06 F1 | 	add	arg02, #1
201d8     3F 12 06 F5 | 	and	arg01, #63
201dc     80 FA 05 F6 | 	mov	result1, #128
201e0     09 FB 41 F5 | 	or	result1, arg01
201e4     0A FB 41 FC | 	wrbyte	result1, arg02
201e8                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
201e8                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
201e8                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
201e8                 | ' 		return 3;
201e8     03 FA 05 F6 | 	mov	result1, #3
201ec     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
201f0                 | LR__3334
201f0     04 16 16 F2 | 	cmp	arg03, #4 wc
201f4     00 FA 05 C6 |  if_b	mov	result1, #0
201f8     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
201fc     09 01 02 F6 | 	mov	_var01, arg01
20200     E0 01 06 F4 | 	bitl	_var01, #480
20204     00 00 6C FF 
20208     00 00 86 F1 | 	sub	_var01, ##-671088640
2020c     06 00 46 F0 | 	shr	_var01, #6
20210     09 13 32 F9 | 	getword	arg01, arg01, #0
20214     6E 00 00 FF 
20218     00 12 86 F1 | 	sub	arg01, ##56320
2021c     00 08 00 FF 
20220     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
20224     02 00 00 CF 
20228     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
2022c     00 FA 05 36 |  if_ae	mov	result1, #0
20230     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
20234     09 01 42 F5 | 	or	_var01, arg01
20238     80 00 00 FF 
2023c     00 00 06 F1 | 	add	_var01, ##65536
20240     00 FB 01 F6 | 	mov	result1, _var01
20244     12 FA 45 F0 | 	shr	result1, #18
20248     07 FA 05 F5 | 	and	result1, #7
2024c     F0 16 06 F6 | 	mov	arg03, #240
20250     FD 16 42 F5 | 	or	arg03, result1
20254     0A 17 42 FC | 	wrbyte	arg03, arg02
20258     01 14 06 F1 | 	add	arg02, #1
2025c     00 FB 01 F6 | 	mov	result1, _var01
20260     0C FA 45 F0 | 	shr	result1, #12
20264     3F FA 05 F5 | 	and	result1, #63
20268     80 16 06 F6 | 	mov	arg03, #128
2026c     FD 16 42 F5 | 	or	arg03, result1
20270     0A 17 42 FC | 	wrbyte	arg03, arg02
20274     01 14 06 F1 | 	add	arg02, #1
20278     00 FB 01 F6 | 	mov	result1, _var01
2027c     06 FA 45 F0 | 	shr	result1, #6
20280     3F FA 05 F5 | 	and	result1, #63
20284     80 16 06 F6 | 	mov	arg03, #128
20288     FD 16 42 F5 | 	or	arg03, result1
2028c     0A 17 42 FC | 	wrbyte	arg03, arg02
20290     01 14 06 F1 | 	add	arg02, #1
20294     3F 00 06 F5 | 	and	_var01, #63
20298     80 FA 05 F6 | 	mov	result1, #128
2029c     00 FB 41 F5 | 	or	result1, _var01
202a0     0A FB 41 FC | 	wrbyte	result1, arg02
202a4                 | ' 	chr = (hc | chr) + 0x10000;
202a4                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
202a4                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
202a4                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
202a4                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
202a4                 | ' 	return 4;
202a4     04 FA 05 F6 | 	mov	result1, #4
202a8                 | _fatfs_cc_put_utf_ret
202a8     2D 00 64 FD | 	ret
202ac                 | 
202ac                 | _fatfs_cc_sync_window
202ac     02 4A 05 F6 | 	mov	COUNT_, #2
202b0     A8 00 A0 FD | 	call	#pushregs_
202b4     09 1F 02 F6 | 	mov	local01, arg01
202b8     00 20 06 F6 | 	mov	local02, #0
202bc     03 1E 06 F1 | 	add	local01, #3
202c0     0F FB C9 FA | 	rdbyte	result1, local01 wz
202c4     03 1E 86 F1 | 	sub	local01, #3
202c8     A4 00 90 AD |  if_e	jmp	#LR__3342
202cc     01 1E 06 F1 | 	add	local01, #1
202d0     0F 13 C2 FA | 	rdbyte	arg01, local01
202d4     33 1E 06 F1 | 	add	local01, #51
202d8     0F 15 02 F6 | 	mov	arg02, local01
202dc     04 1E 86 F1 | 	sub	local01, #4
202e0     0F 17 02 FB | 	rdlong	arg03, local01
202e4     30 1E 86 F1 | 	sub	local01, #48
202e8     01 18 06 F6 | 	mov	arg04, #1
202ec     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
202f0     00 FA 0D F2 | 	cmp	result1, #0 wz
202f4     74 00 90 5D |  if_ne	jmp	#LR__3340
202f8     03 1E 06 F1 | 	add	local01, #3
202fc     0F 01 48 FC | 	wrbyte	#0, local01
20300     2D 1E 06 F1 | 	add	local01, #45
20304     0F FB 01 FB | 	rdlong	result1, local01
20308     0C 1E 86 F1 | 	sub	local01, #12
2030c     0F 19 02 FB | 	rdlong	arg04, local01
20310     0C FB 81 F1 | 	sub	result1, arg04
20314     08 1E 86 F1 | 	sub	local01, #8
20318     0F 19 02 FB | 	rdlong	arg04, local01
2031c     1C 1E 86 F1 | 	sub	local01, #28
20320     0C FB 11 F2 | 	cmp	result1, arg04 wc
20324     48 00 90 3D |  if_ae	jmp	#LR__3341
20328     02 1E 06 F1 | 	add	local01, #2
2032c     0F 19 C2 FA | 	rdbyte	arg04, local01
20330     02 1E 86 F1 | 	sub	local01, #2
20334     02 18 0E F2 | 	cmp	arg04, #2 wz
20338     34 00 90 5D |  if_ne	jmp	#LR__3341
2033c     01 1E 06 F1 | 	add	local01, #1
20340     0F 13 C2 FA | 	rdbyte	arg01, local01
20344     33 1E 06 F1 | 	add	local01, #51
20348     0F 15 02 F6 | 	mov	arg02, local01
2034c     04 1E 86 F1 | 	sub	local01, #4
20350     0F 17 02 FB | 	rdlong	arg03, local01
20354     14 1E 86 F1 | 	sub	local01, #20
20358     0F 1F 02 FB | 	rdlong	local01, local01
2035c     0F 17 02 F1 | 	add	arg03, local01
20360     01 18 06 F6 | 	mov	arg04, #1
20364     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
20368     04 00 90 FD | 	jmp	#LR__3341
2036c                 | LR__3340
2036c     01 20 06 F6 | 	mov	local02, #1
20370                 | LR__3341
20370                 | LR__3342
20370                 | ' 			res = FR_DISK_ERR;
20370                 | ' 		}
20370                 | ' 	}
20370                 | ' 	return res;
20370     10 FB 01 F6 | 	mov	result1, local02
20374     A7 F0 03 F6 | 	mov	ptra, fp
20378     B2 00 A0 FD | 	call	#popregs_
2037c                 | _fatfs_cc_sync_window_ret
2037c     2D 00 64 FD | 	ret
20380                 | 
20380                 | _fatfs_cc_move_window
20380     03 4A 05 F6 | 	mov	COUNT_, #3
20384     A8 00 A0 FD | 	call	#pushregs_
20388     09 1F 02 F6 | 	mov	local01, arg01
2038c     0A 21 02 F6 | 	mov	local02, arg02
20390     00 22 06 F6 | 	mov	local03, #0
20394     30 1E 06 F1 | 	add	local01, #48
20398     0F 19 02 FB | 	rdlong	arg04, local01
2039c     30 1E 86 F1 | 	sub	local01, #48
203a0     0C 21 0A F2 | 	cmp	local02, arg04 wz
203a4     40 00 90 AD |  if_e	jmp	#LR__3351
203a8     0F 13 02 F6 | 	mov	arg01, local01
203ac     FC FE BF FD | 	call	#_fatfs_cc_sync_window
203b0     FD 22 0A F6 | 	mov	local03, result1 wz
203b4     30 00 90 5D |  if_ne	jmp	#LR__3350
203b8     01 1E 06 F1 | 	add	local01, #1
203bc     0F 13 C2 FA | 	rdbyte	arg01, local01
203c0     33 1E 06 F1 | 	add	local01, #51
203c4     0F 15 02 F6 | 	mov	arg02, local01
203c8     10 17 02 F6 | 	mov	arg03, local02
203cc     01 18 06 F6 | 	mov	arg04, #1
203d0     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
203d4     00 FA 0D F2 | 	cmp	result1, #0 wz
203d8     01 20 66 56 |  if_ne	neg	local02, #1
203dc     01 22 06 56 |  if_ne	mov	local03, #1
203e0     04 1E 86 F1 | 	sub	local01, #4
203e4     0F 21 62 FC | 	wrlong	local02, local01
203e8                 | LR__3350
203e8                 | LR__3351
203e8                 | ' 				sect = (LBA_t)0 - 1;
203e8                 | ' 				res = FR_DISK_ERR;
203e8                 | ' 			}
203e8                 | ' 			fs->winsect = sect;
203e8                 | ' 		}
203e8                 | ' 	}
203e8                 | ' 	return res;
203e8     11 FB 01 F6 | 	mov	result1, local03
203ec     A7 F0 03 F6 | 	mov	ptra, fp
203f0     B2 00 A0 FD | 	call	#popregs_
203f4                 | _fatfs_cc_move_window_ret
203f4     2D 00 64 FD | 	ret
203f8                 | 
203f8                 | _fatfs_cc_sync_fs
203f8     02 4A 05 F6 | 	mov	COUNT_, #2
203fc     A8 00 A0 FD | 	call	#pushregs_
20400     09 1F 02 F6 | 	mov	local01, arg01
20404     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
20408     FD 20 0A F6 | 	mov	local02, result1 wz
2040c     D8 00 90 5D |  if_ne	jmp	#LR__3361
20410     0F 19 C2 FA | 	rdbyte	arg04, local01
20414     03 18 0E F2 | 	cmp	arg04, #3 wz
20418     04 1E 06 A1 |  if_e	add	local01, #4
2041c     0F 19 C2 AA |  if_e	rdbyte	arg04, local01
20420     04 1E 86 A1 |  if_e	sub	local01, #4
20424     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
20428     A0 00 90 5D |  if_ne	jmp	#LR__3360
2042c     34 1E 06 F1 | 	add	local01, #52
20430     0F 13 02 F6 | 	mov	arg01, local01
20434     00 14 06 F6 | 	mov	arg02, #0
20438     09 16 C6 F9 | 	decod	arg03, #9
2043c     98 00 A0 FD | 	call	#\builtin_bytefill_
20440     0F 13 02 F6 | 	mov	arg01, local01
20444     FE 13 06 F1 | 	add	arg01, #510
20448     55 00 80 FF 
2044c     09 AB 58 FC | 	wrword	##43605, arg01
20450     A9 B0 A0 FF 
20454     0F A5 68 FC | 	wrlong	##1096897106, local01
20458     0F 13 02 F6 | 	mov	arg01, local01
2045c     E4 13 06 F1 | 	add	arg01, #484
20460     B9 A0 B0 FF 
20464     09 E5 68 FC | 	wrlong	##1631679090, arg01
20468     0F 13 02 F6 | 	mov	arg01, local01
2046c     E8 13 06 F1 | 	add	arg01, #488
20470     20 1E 86 F1 | 	sub	local01, #32
20474     0F 15 02 FB | 	rdlong	arg02, local01
20478     09 15 62 FC | 	wrlong	arg02, arg01
2047c     20 1E 06 F1 | 	add	local01, #32
20480     0F 13 02 F6 | 	mov	arg01, local01
20484     EC 13 06 F1 | 	add	arg01, #492
20488     24 1E 86 F1 | 	sub	local01, #36
2048c     0F 15 02 FB | 	rdlong	arg02, local01
20490     09 15 62 FC | 	wrlong	arg02, arg01
20494     10 1E 06 F1 | 	add	local01, #16
20498     0F 17 02 FB | 	rdlong	arg03, local01
2049c     01 16 06 F1 | 	add	arg03, #1
204a0     10 1E 06 F1 | 	add	local01, #16
204a4     0F 17 62 FC | 	wrlong	arg03, local01
204a8     2F 1E 86 F1 | 	sub	local01, #47
204ac     0F 13 C2 FA | 	rdbyte	arg01, local01
204b0     33 1E 06 F1 | 	add	local01, #51
204b4     0F 15 02 F6 | 	mov	arg02, local01
204b8     01 18 06 F6 | 	mov	arg04, #1
204bc     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
204c0     30 1E 86 F1 | 	sub	local01, #48
204c4     0F 01 48 FC | 	wrbyte	#0, local01
204c8     04 1E 86 F1 | 	sub	local01, #4
204cc                 | LR__3360
204cc     01 1E 06 F1 | 	add	local01, #1
204d0     0F 13 C2 FA | 	rdbyte	arg01, local01
204d4     00 14 06 F6 | 	mov	arg02, #0
204d8     00 16 06 F6 | 	mov	arg03, #0
204dc     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
204e0     00 FA 0D F2 | 	cmp	result1, #0 wz
204e4     01 20 06 56 |  if_ne	mov	local02, #1
204e8                 | LR__3361
204e8                 | ' 	}
204e8                 | ' 
204e8                 | ' 	return res;
204e8     10 FB 01 F6 | 	mov	result1, local02
204ec     A7 F0 03 F6 | 	mov	ptra, fp
204f0     B2 00 A0 FD | 	call	#popregs_
204f4                 | _fatfs_cc_sync_fs_ret
204f4     2D 00 64 FD | 	ret
204f8                 | 
204f8                 | _fatfs_cc_clst2sect
204f8     02 14 86 F1 | 	sub	arg02, #2
204fc     18 12 06 F1 | 	add	arg01, #24
20500     09 01 02 FB | 	rdlong	_var01, arg01
20504     18 12 86 F1 | 	sub	arg01, #24
20508     02 00 86 F1 | 	sub	_var01, #2
2050c     00 15 12 F2 | 	cmp	arg02, _var01 wc
20510     00 FA 05 36 |  if_ae	mov	result1, #0
20514     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
20518     0A 12 06 F1 | 	add	arg01, #10
2051c     09 01 E2 FA | 	rdword	_var01, arg01
20520     0A 01 02 FD | 	qmul	_var01, arg02
20524                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
20524     22 12 06 F1 | 	add	arg01, #34
20528     09 FB 01 FB | 	rdlong	result1, arg01
2052c     18 00 62 FD | 	getqx	_var01
20530     00 FB 01 F1 | 	add	result1, _var01
20534                 | _fatfs_cc_clst2sect_ret
20534     2D 00 64 FD | 	ret
20538                 | 
20538                 | _fatfs_cc_get_fat
20538     07 4A 05 F6 | 	mov	COUNT_, #7
2053c     A8 00 A0 FD | 	call	#pushregs_
20540     0A 1F 02 F6 | 	mov	local01, arg02
20544     09 21 02 FB | 	rdlong	local02, arg01
20548     02 1E 16 F2 | 	cmp	local01, #2 wc
2054c     14 00 90 CD |  if_b	jmp	#LR__3370
20550     18 20 06 F1 | 	add	local02, #24
20554     10 23 02 FB | 	rdlong	local03, local02
20558     18 20 86 F1 | 	sub	local02, #24
2055c     11 1F 12 F2 | 	cmp	local01, local03 wc
20560     08 00 90 CD |  if_b	jmp	#LR__3371
20564                 | LR__3370
20564     01 24 06 F6 | 	mov	local04, #1
20568     60 01 90 FD | 	jmp	#LR__3378
2056c                 | LR__3371
2056c     01 24 66 F6 | 	neg	local04, #1
20570                 | ' 		val = 0xFFFFFFFF;
20570                 | ' 
20570                 | ' 		switch (fs->fs_type) {
20570     10 27 C2 FA | 	rdbyte	local05, local02
20574     01 26 86 F1 | 	sub	local05, #1
20578     03 26 26 F3 | 	fle	local05, #3
2057c     30 26 62 FD | 	jmprel	local05
20580                 | LR__3372
20580     0C 00 90 FD | 	jmp	#LR__3373
20584     B8 00 90 FD | 	jmp	#LR__3374
20588     F8 00 90 FD | 	jmp	#LR__3375
2058c     38 01 90 FD | 	jmp	#LR__3376
20590                 | LR__3373
20590     0F 27 02 F6 | 	mov	local05, local01
20594     0F 13 02 F6 | 	mov	arg01, local01
20598     01 12 46 F0 | 	shr	arg01, #1
2059c     09 27 02 F1 | 	add	local05, arg01
205a0     10 13 02 F6 | 	mov	arg01, local02
205a4     13 29 02 F6 | 	mov	local06, local05
205a8     09 28 46 F0 | 	shr	local06, #9
205ac     24 20 06 F1 | 	add	local02, #36
205b0     10 15 02 FB | 	rdlong	arg02, local02
205b4     24 20 86 F1 | 	sub	local02, #36
205b8     14 15 02 F1 | 	add	arg02, local06
205bc     C0 FD BF FD | 	call	#_fatfs_cc_move_window
205c0     00 FA 0D F2 | 	cmp	result1, #0 wz
205c4     04 01 90 5D |  if_ne	jmp	#LR__3377
205c8     13 29 02 F6 | 	mov	local06, local05
205cc     FF 29 06 F5 | 	and	local06, #511
205d0     34 20 06 F1 | 	add	local02, #52
205d4     10 29 02 F1 | 	add	local06, local02
205d8     14 2B C2 FA | 	rdbyte	local07, local06
205dc     34 20 86 F1 | 	sub	local02, #52
205e0     10 13 02 F6 | 	mov	arg01, local02
205e4     01 26 06 F1 | 	add	local05, #1
205e8     13 29 02 F6 | 	mov	local06, local05
205ec     09 28 46 F0 | 	shr	local06, #9
205f0     24 20 06 F1 | 	add	local02, #36
205f4     10 15 02 FB | 	rdlong	arg02, local02
205f8     24 20 86 F1 | 	sub	local02, #36
205fc     14 15 02 F1 | 	add	arg02, local06
20600     7C FD BF FD | 	call	#_fatfs_cc_move_window
20604     00 FA 0D F2 | 	cmp	result1, #0 wz
20608     C0 00 90 5D |  if_ne	jmp	#LR__3377
2060c     FF 27 06 F5 | 	and	local05, #511
20610     34 20 06 F1 | 	add	local02, #52
20614     10 27 02 F1 | 	add	local05, local02
20618     13 29 C2 FA | 	rdbyte	local06, local05
2061c     08 28 66 F0 | 	shl	local06, #8
20620     14 2B 42 F5 | 	or	local07, local06
20624     01 1E CE F7 | 	test	local01, #1 wz
20628     04 2A 46 50 |  if_ne	shr	local07, #4
2062c     15 23 02 56 |  if_ne	mov	local03, local07
20630     0B 2A 46 A7 |  if_e	zerox	local07, #11
20634     15 23 02 A6 |  if_e	mov	local03, local07
20638     11 25 02 F6 | 	mov	local04, local03
2063c                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
2063c                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2063c                 | ' 			break;
2063c     8C 00 90 FD | 	jmp	#LR__3377
20640                 | LR__3374
20640     10 13 02 F6 | 	mov	arg01, local02
20644     0F 29 02 F6 | 	mov	local06, local01
20648     08 28 46 F0 | 	shr	local06, #8
2064c     24 20 06 F1 | 	add	local02, #36
20650     10 15 02 FB | 	rdlong	arg02, local02
20654     24 20 86 F1 | 	sub	local02, #36
20658     14 15 02 F1 | 	add	arg02, local06
2065c     20 FD BF FD | 	call	#_fatfs_cc_move_window
20660     00 FA 0D F2 | 	cmp	result1, #0 wz
20664     64 00 90 5D |  if_ne	jmp	#LR__3377
20668     34 20 06 F1 | 	add	local02, #52
2066c     01 1E 66 F0 | 	shl	local01, #1
20670     FF 1F 06 F5 | 	and	local01, #511
20674     0F 21 02 F1 | 	add	local02, local01
20678                 | ' {
20678                 | ' 
20678                 | ' 	return *((WORD*)ptr);
20678     10 FB E1 FA | 	rdword	result1, local02
2067c     FD 24 32 F9 | 	getword	local04, result1, #0
20680                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
20680                 | ' 			break;
20680     48 00 90 FD | 	jmp	#LR__3377
20684                 | LR__3375
20684     10 13 02 F6 | 	mov	arg01, local02
20688     0F 29 02 F6 | 	mov	local06, local01
2068c     07 28 46 F0 | 	shr	local06, #7
20690     24 20 06 F1 | 	add	local02, #36
20694     10 15 02 FB | 	rdlong	arg02, local02
20698     24 20 86 F1 | 	sub	local02, #36
2069c     14 15 02 F1 | 	add	arg02, local06
206a0     DC FC BF FD | 	call	#_fatfs_cc_move_window
206a4     00 FA 0D F2 | 	cmp	result1, #0 wz
206a8     20 00 90 5D |  if_ne	jmp	#LR__3377
206ac     34 20 06 F1 | 	add	local02, #52
206b0     02 1E 66 F0 | 	shl	local01, #2
206b4     FF 1F 06 F5 | 	and	local01, #511
206b8     0F 21 02 F1 | 	add	local02, local01
206bc                 | ' {
206bc                 | ' 
206bc                 | ' 	return *((DWORD*)ptr);
206bc     10 25 02 FB | 	rdlong	local04, local02
206c0     7C 24 06 F4 | 	bitl	local04, #124
206c4                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
206c4                 | ' 			break;
206c4     04 00 90 FD | 	jmp	#LR__3377
206c8                 | LR__3376
206c8     01 24 06 F6 | 	mov	local04, #1
206cc                 | LR__3377
206cc                 | LR__3378
206cc                 | ' 			val = 1;
206cc                 | ' 		}
206cc                 | ' 	}
206cc                 | ' 
206cc                 | ' 	return val;
206cc     12 FB 01 F6 | 	mov	result1, local04
206d0     A7 F0 03 F6 | 	mov	ptra, fp
206d4     B2 00 A0 FD | 	call	#popregs_
206d8                 | _fatfs_cc_get_fat_ret
206d8     2D 00 64 FD | 	ret
206dc                 | 
206dc                 | _fatfs_cc_put_fat
206dc     08 4A 05 F6 | 	mov	COUNT_, #8
206e0     A8 00 A0 FD | 	call	#pushregs_
206e4     09 1F 02 F6 | 	mov	local01, arg01
206e8     0A 21 02 F6 | 	mov	local02, arg02
206ec     0B 23 02 F6 | 	mov	local03, arg03
206f0     02 24 06 F6 | 	mov	local04, #2
206f4     02 20 16 F2 | 	cmp	local02, #2 wc
206f8     E0 01 90 CD |  if_b	jmp	#LR__3387
206fc     18 1E 06 F1 | 	add	local01, #24
20700     0F 27 02 FB | 	rdlong	local05, local01
20704     18 1E 86 F1 | 	sub	local01, #24
20708     13 21 12 F2 | 	cmp	local02, local05 wc
2070c     CC 01 90 3D |  if_ae	jmp	#LR__3387
20710                 | ' 		switch (fs->fs_type) {
20710     0F 29 C2 FA | 	rdbyte	local06, local01
20714     01 28 86 F1 | 	sub	local06, #1
20718     03 28 26 F3 | 	fle	local06, #3
2071c     30 28 62 FD | 	jmprel	local06
20720                 | LR__3380
20720     0C 00 90 FD | 	jmp	#LR__3381
20724     F8 00 90 FD | 	jmp	#LR__3384
20728     40 01 90 FD | 	jmp	#LR__3385
2072c     AC 01 90 FD | 	jmp	#LR__3386
20730                 | LR__3381
20730     10 2B 02 F6 | 	mov	local07, local02
20734     10 27 02 F6 | 	mov	local05, local02
20738     01 26 46 F0 | 	shr	local05, #1
2073c     13 2B 02 F1 | 	add	local07, local05
20740     0F 13 02 F6 | 	mov	arg01, local01
20744     15 29 02 F6 | 	mov	local06, local07
20748     09 28 46 F0 | 	shr	local06, #9
2074c     24 1E 06 F1 | 	add	local01, #36
20750     0F 15 02 FB | 	rdlong	arg02, local01
20754     24 1E 86 F1 | 	sub	local01, #36
20758     14 15 02 F1 | 	add	arg02, local06
2075c     20 FC BF FD | 	call	#_fatfs_cc_move_window
20760     FD 24 0A F6 | 	mov	local04, result1 wz
20764     74 01 90 5D |  if_ne	jmp	#LR__3386
20768     34 1E 06 F1 | 	add	local01, #52
2076c     0F 2D 02 F6 | 	mov	local08, local01
20770     15 27 02 F6 | 	mov	local05, local07
20774     FF 27 06 F5 | 	and	local05, #511
20778     13 2D 02 F1 | 	add	local08, local05
2077c     01 20 CE F7 | 	test	local02, #1 wz
20780     34 1E 86 F1 | 	sub	local01, #52
20784     01 2A 06 F1 | 	add	local07, #1
20788     18 00 90 AD |  if_e	jmp	#LR__3382
2078c     16 27 C2 FA | 	rdbyte	local05, local08
20790     13 27 42 F8 | 	getnib	local05, local05, #0
20794     11 29 E2 F8 | 	getbyte	local06, local03, #0
20798     04 28 66 F0 | 	shl	local06, #4
2079c     14 27 42 F5 | 	or	local05, local06
207a0     04 00 90 FD | 	jmp	#LR__3383
207a4                 | LR__3382
207a4     11 27 02 F6 | 	mov	local05, local03
207a8                 | LR__3383
207a8     16 27 42 FC | 	wrbyte	local05, local08
207ac     03 1E 06 F1 | 	add	local01, #3
207b0     0F 03 48 FC | 	wrbyte	#1, local01
207b4     03 1E 86 F1 | 	sub	local01, #3
207b8     0F 13 02 F6 | 	mov	arg01, local01
207bc     15 2D 02 F6 | 	mov	local08, local07
207c0     09 2C 46 F0 | 	shr	local08, #9
207c4     24 1E 06 F1 | 	add	local01, #36
207c8     0F 15 02 FB | 	rdlong	arg02, local01
207cc     24 1E 86 F1 | 	sub	local01, #36
207d0     16 15 02 F1 | 	add	arg02, local08
207d4     A8 FB BF FD | 	call	#_fatfs_cc_move_window
207d8     FD 24 0A F6 | 	mov	local04, result1 wz
207dc     FC 00 90 5D |  if_ne	jmp	#LR__3386
207e0     34 1E 06 F1 | 	add	local01, #52
207e4     0F 2D 02 F6 | 	mov	local08, local01
207e8     FF 2B 06 F5 | 	and	local07, #511
207ec     15 2D 02 F1 | 	add	local08, local07
207f0     01 20 CE F7 | 	test	local02, #1 wz
207f4     04 22 46 50 |  if_ne	shr	local03, #4
207f8     11 27 02 56 |  if_ne	mov	local05, local03
207fc     16 27 C2 AA |  if_e	rdbyte	local05, local08
20800     F0 26 06 A5 |  if_e	and	local05, #240
20804     11 23 EA A8 |  if_e	getbyte	local03, local03, #1
20808     11 23 42 A8 |  if_e	getnib	local03, local03, #0
2080c     11 27 42 A5 |  if_e	or	local05, local03
20810     16 27 42 FC | 	wrbyte	local05, local08
20814     31 1E 86 F1 | 	sub	local01, #49
20818     0F 03 48 FC | 	wrbyte	#1, local01
2081c                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
2081c                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2081c                 | ' 			fs->wflag = 1;
2081c                 | ' 			break;
2081c     BC 00 90 FD | 	jmp	#LR__3386
20820                 | LR__3384
20820     0F 13 02 F6 | 	mov	arg01, local01
20824     10 2D 02 F6 | 	mov	local08, local02
20828     08 2C 46 F0 | 	shr	local08, #8
2082c     24 1E 06 F1 | 	add	local01, #36
20830     0F 15 02 FB | 	rdlong	arg02, local01
20834     24 1E 86 F1 | 	sub	local01, #36
20838     16 15 02 F1 | 	add	arg02, local08
2083c     40 FB BF FD | 	call	#_fatfs_cc_move_window
20840     FD 24 0A F6 | 	mov	local04, result1 wz
20844     94 00 90 5D |  if_ne	jmp	#LR__3386
20848     34 1E 06 F1 | 	add	local01, #52
2084c     0F 13 02 F6 | 	mov	arg01, local01
20850     01 20 66 F0 | 	shl	local02, #1
20854     FF 21 06 F5 | 	and	local02, #511
20858     10 13 02 F1 | 	add	arg01, local02
2085c     09 23 52 FC | 	wrword	local03, arg01
20860     31 1E 86 F1 | 	sub	local01, #49
20864     0F 03 48 FC | 	wrbyte	#1, local01
20868                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
20868                 | ' 			fs->wflag = 1;
20868                 | ' 			break;
20868     70 00 90 FD | 	jmp	#LR__3386
2086c                 | LR__3385
2086c     0F 13 02 F6 | 	mov	arg01, local01
20870     10 2D 02 F6 | 	mov	local08, local02
20874     07 2C 46 F0 | 	shr	local08, #7
20878     24 1E 06 F1 | 	add	local01, #36
2087c     0F 15 02 FB | 	rdlong	arg02, local01
20880     24 1E 86 F1 | 	sub	local01, #36
20884     16 15 02 F1 | 	add	arg02, local08
20888     F4 FA BF FD | 	call	#_fatfs_cc_move_window
2088c     FD 24 0A F6 | 	mov	local04, result1 wz
20890     48 00 90 5D |  if_ne	jmp	#LR__3386
20894     7C 22 06 F4 | 	bitl	local03, #124
20898     34 1E 06 F1 | 	add	local01, #52
2089c     10 2D 02 F6 | 	mov	local08, local02
208a0     02 2C 66 F0 | 	shl	local08, #2
208a4     FF 2D 06 F5 | 	and	local08, #511
208a8     0F 13 02 F6 | 	mov	arg01, local01
208ac     16 13 02 F1 | 	add	arg01, local08
208b0                 | ' {
208b0                 | ' 
208b0                 | ' 	return *((DWORD*)ptr);
208b0     09 2D 02 FB | 	rdlong	local08, arg01
208b4     00 00 78 FF 
208b8     00 2C 06 F5 | 	and	local08, ##-268435456
208bc     16 23 42 F5 | 	or	local03, local08
208c0     0F 13 02 F6 | 	mov	arg01, local01
208c4     02 20 66 F0 | 	shl	local02, #2
208c8     FF 21 06 F5 | 	and	local02, #511
208cc     10 13 02 F1 | 	add	arg01, local02
208d0     09 23 62 FC | 	wrlong	local03, arg01
208d4     31 1E 86 F1 | 	sub	local01, #49
208d8     0F 03 48 FC | 	wrbyte	#1, local01
208dc                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
208dc                 | ' 			}
208dc                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
208dc                 | ' 			fs->wflag = 1;
208dc                 | ' 			break;
208dc                 | LR__3386
208dc                 | LR__3387
208dc                 | ' 		}
208dc                 | ' 	}
208dc                 | ' 	return res;
208dc     12 FB 01 F6 | 	mov	result1, local04
208e0     A7 F0 03 F6 | 	mov	ptra, fp
208e4     B2 00 A0 FD | 	call	#popregs_
208e8                 | _fatfs_cc_put_fat_ret
208e8     2D 00 64 FD | 	ret
208ec                 | 
208ec                 | _fatfs_cc_remove_chain
208ec     05 4A 05 F6 | 	mov	COUNT_, #5
208f0     A8 00 A0 FD | 	call	#pushregs_
208f4     09 1F 02 F6 | 	mov	local01, arg01
208f8     0A 21 02 F6 | 	mov	local02, arg02
208fc     0B 23 02 F6 | 	mov	local03, arg03
20900     0F 25 02 FB | 	rdlong	local04, local01
20904     02 20 16 F2 | 	cmp	local02, #2 wc
20908     14 00 90 CD |  if_b	jmp	#LR__3390
2090c     18 24 06 F1 | 	add	local04, #24
20910     12 FB 01 FB | 	rdlong	result1, local04
20914     18 24 86 F1 | 	sub	local04, #24
20918     FD 20 12 F2 | 	cmp	local02, result1 wc
2091c     08 00 90 CD |  if_b	jmp	#LR__3391
20920                 | LR__3390
20920     02 FA 05 F6 | 	mov	result1, #2
20924     CC 00 90 FD | 	jmp	#LR__3396
20928                 | LR__3391
20928     00 22 0E F2 | 	cmp	local03, #0 wz
2092c     18 00 90 AD |  if_e	jmp	#LR__3392
20930     11 15 02 F6 | 	mov	arg02, local03
20934     12 13 02 F6 | 	mov	arg01, local04
20938     01 16 66 F6 | 	neg	arg03, #1
2093c     9C FD BF FD | 	call	#_fatfs_cc_put_fat
20940     00 FA 0D F2 | 	cmp	result1, #0 wz
20944     AC 00 90 5D |  if_ne	jmp	#LR__3396
20948                 | LR__3392
20948                 | ' 	}
20948                 | ' 
20948                 | ' 
20948                 | ' 	do {
20948                 | LR__3393
20948     10 15 02 F6 | 	mov	arg02, local02
2094c     0F 13 02 F6 | 	mov	arg01, local01
20950     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
20954     FD 26 0A F6 | 	mov	local05, result1 wz
20958     94 00 90 AD |  if_e	jmp	#LR__3395
2095c     01 26 0E F2 | 	cmp	local05, #1 wz
20960     02 FA 05 A6 |  if_e	mov	result1, #2
20964     8C 00 90 AD |  if_e	jmp	#LR__3396
20968     FF FF 7F FF 
2096c     FF 27 0E F2 | 	cmp	local05, ##-1 wz
20970     01 FA 05 A6 |  if_e	mov	result1, #1
20974     7C 00 90 AD |  if_e	jmp	#LR__3396
20978     10 15 02 F6 | 	mov	arg02, local02
2097c     12 13 02 F6 | 	mov	arg01, local04
20980     00 16 06 F6 | 	mov	arg03, #0
20984     54 FD BF FD | 	call	#_fatfs_cc_put_fat
20988     FD 22 0A F6 | 	mov	local03, result1 wz
2098c     11 FB 01 56 |  if_ne	mov	result1, local03
20990     60 00 90 5D |  if_ne	jmp	#LR__3396
20994     18 24 06 F1 | 	add	local04, #24
20998     12 23 02 FB | 	rdlong	local03, local04
2099c     02 22 86 F1 | 	sub	local03, #2
209a0     04 24 86 F1 | 	sub	local04, #4
209a4     12 21 02 FB | 	rdlong	local02, local04
209a8     14 24 86 F1 | 	sub	local04, #20
209ac     11 21 12 F2 | 	cmp	local02, local03 wc
209b0     24 00 90 3D |  if_ae	jmp	#LR__3394
209b4     14 24 06 F1 | 	add	local04, #20
209b8     12 23 02 FB | 	rdlong	local03, local04
209bc     01 22 06 F1 | 	add	local03, #1
209c0     12 23 62 FC | 	wrlong	local03, local04
209c4     10 24 86 F1 | 	sub	local04, #16
209c8     12 23 C2 FA | 	rdbyte	local03, local04
209cc     01 22 46 F5 | 	or	local03, #1
209d0     12 23 42 FC | 	wrbyte	local03, local04
209d4     04 24 86 F1 | 	sub	local04, #4
209d8                 | LR__3394
209d8     13 21 02 F6 | 	mov	local02, local05
209dc     18 24 06 F1 | 	add	local04, #24
209e0     12 27 02 FB | 	rdlong	local05, local04
209e4     18 24 86 F1 | 	sub	local04, #24
209e8     13 21 12 F2 | 	cmp	local02, local05 wc
209ec     58 FF 9F CD |  if_b	jmp	#LR__3393
209f0                 | LR__3395
209f0                 | ' #line 1500 "ff.c"
209f0                 | ' 	return FR_OK;
209f0     00 FA 05 F6 | 	mov	result1, #0
209f4                 | LR__3396
209f4     A7 F0 03 F6 | 	mov	ptra, fp
209f8     B2 00 A0 FD | 	call	#popregs_
209fc                 | _fatfs_cc_remove_chain_ret
209fc     2D 00 64 FD | 	ret
20a00                 | 
20a00                 | _fatfs_cc_create_chain
20a00     09 4A 05 F6 | 	mov	COUNT_, #9
20a04     A8 00 A0 FD | 	call	#pushregs_
20a08     09 1F 02 F6 | 	mov	local01, arg01
20a0c     0A 21 0A F6 | 	mov	local02, arg02 wz
20a10     0F 23 02 FB | 	rdlong	local03, local01
20a14     28 00 90 5D |  if_ne	jmp	#LR__3400
20a18     10 22 06 F1 | 	add	local03, #16
20a1c     11 25 0A FB | 	rdlong	local04, local03 wz
20a20     10 22 86 F1 | 	sub	local03, #16
20a24     18 22 06 51 |  if_ne	add	local03, #24
20a28     11 27 02 5B |  if_ne	rdlong	local05, local03
20a2c     18 22 86 51 |  if_ne	sub	local03, #24
20a30     13 25 12 52 |  if_ne	cmp	local04, local05 wc
20a34     50 00 90 4D |  if_c_and_nz	jmp	#LR__3401
20a38     01 24 06 F6 | 	mov	local04, #1
20a3c     48 00 90 FD | 	jmp	#LR__3401
20a40                 | LR__3400
20a40     10 15 02 F6 | 	mov	arg02, local02
20a44     0F 13 02 F6 | 	mov	arg01, local01
20a48     EC FA BF FD | 	call	#_fatfs_cc_get_fat
20a4c     FD 24 02 F6 | 	mov	local04, result1
20a50     02 24 16 F2 | 	cmp	local04, #2 wc
20a54     01 FA 05 C6 |  if_b	mov	result1, #1
20a58     BC 01 90 CD |  if_b	jmp	#LR__3411
20a5c     FF FF 7F FF 
20a60     FF 25 0E F2 | 	cmp	local04, ##-1 wz
20a64     12 FB 01 A6 |  if_e	mov	result1, local04
20a68     AC 01 90 AD |  if_e	jmp	#LR__3411
20a6c     18 22 06 F1 | 	add	local03, #24
20a70     11 27 02 FB | 	rdlong	local05, local03
20a74     18 22 86 F1 | 	sub	local03, #24
20a78     13 25 12 F2 | 	cmp	local04, local05 wc
20a7c     12 FB 01 C6 |  if_b	mov	result1, local04
20a80     94 01 90 CD |  if_b	jmp	#LR__3411
20a84     10 25 02 F6 | 	mov	local04, local02
20a88                 | LR__3401
20a88     14 22 06 F1 | 	add	local03, #20
20a8c     11 27 0A FB | 	rdlong	local05, local03 wz
20a90     14 22 86 F1 | 	sub	local03, #20
20a94     00 FA 05 A6 |  if_e	mov	result1, #0
20a98     7C 01 90 AD |  if_e	jmp	#LR__3411
20a9c     00 28 06 F6 | 	mov	local06, #0
20aa0     10 25 0A F2 | 	cmp	local04, local02 wz
20aa4     74 00 90 5D |  if_ne	jmp	#LR__3404
20aa8     12 29 02 F6 | 	mov	local06, local04
20aac     01 28 06 F1 | 	add	local06, #1
20ab0     18 22 06 F1 | 	add	local03, #24
20ab4     11 27 02 FB | 	rdlong	local05, local03
20ab8     18 22 86 F1 | 	sub	local03, #24
20abc     13 29 12 F2 | 	cmp	local06, local05 wc
20ac0     02 28 06 36 |  if_ae	mov	local06, #2
20ac4     14 15 02 F6 | 	mov	arg02, local06
20ac8     0F 13 02 F6 | 	mov	arg01, local01
20acc     68 FA BF FD | 	call	#_fatfs_cc_get_fat
20ad0     FD 26 02 F6 | 	mov	local05, result1
20ad4     01 26 0E F2 | 	cmp	local05, #1 wz
20ad8     FF FF 7F 5F 
20adc     FF 27 0E 52 |  if_ne	cmp	local05, ##-1 wz
20ae0     13 FB 01 A6 |  if_e	mov	result1, local05
20ae4     30 01 90 AD |  if_e	jmp	#LR__3411
20ae8     00 26 0E F2 | 	cmp	local05, #0 wz
20aec     2C 00 90 AD |  if_e	jmp	#LR__3403
20af0     10 22 06 F1 | 	add	local03, #16
20af4     11 2B 02 FB | 	rdlong	local07, local03
20af8     10 22 86 F1 | 	sub	local03, #16
20afc     02 2A 16 F2 | 	cmp	local07, #2 wc
20b00     14 00 90 CD |  if_b	jmp	#LR__3402
20b04     18 22 06 F1 | 	add	local03, #24
20b08     11 27 02 FB | 	rdlong	local05, local03
20b0c     18 22 86 F1 | 	sub	local03, #24
20b10     13 2B 12 F2 | 	cmp	local07, local05 wc
20b14     15 25 02 C6 |  if_b	mov	local04, local07
20b18                 | LR__3402
20b18     00 28 06 F6 | 	mov	local06, #0
20b1c                 | LR__3403
20b1c                 | LR__3404
20b1c     00 28 0E F2 | 	cmp	local06, #0 wz
20b20     60 00 90 5D |  if_ne	jmp	#LR__3407
20b24     12 29 02 F6 | 	mov	local06, local04
20b28                 | ' 			ncl = scl;
20b28                 | ' 			for (;;) {
20b28                 | LR__3405
20b28     01 28 06 F1 | 	add	local06, #1
20b2c     18 22 06 F1 | 	add	local03, #24
20b30     11 27 02 FB | 	rdlong	local05, local03
20b34     18 22 86 F1 | 	sub	local03, #24
20b38     13 29 12 F2 | 	cmp	local06, local05 wc
20b3c     02 28 06 36 |  if_ae	mov	local06, #2
20b40     12 29 1A 32 |  if_ae	cmp	local06, local04 wcz
20b44     00 FA 05 16 |  if_a	mov	result1, #0
20b48     CC 00 90 1D |  if_a	jmp	#LR__3411
20b4c     14 15 02 F6 | 	mov	arg02, local06
20b50     0F 13 02 F6 | 	mov	arg01, local01
20b54     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
20b58     FD 2A 0A F6 | 	mov	local07, result1 wz
20b5c     24 00 90 AD |  if_e	jmp	#LR__3406
20b60     01 2A 0E F2 | 	cmp	local07, #1 wz
20b64     FF FF 7F 5F 
20b68     FF 2B 0E 52 |  if_ne	cmp	local07, ##-1 wz
20b6c     15 FB 01 A6 |  if_e	mov	result1, local07
20b70     A4 00 90 AD |  if_e	jmp	#LR__3411
20b74     12 29 0A F2 | 	cmp	local06, local04 wz
20b78     00 FA 05 A6 |  if_e	mov	result1, #0
20b7c     98 00 90 AD |  if_e	jmp	#LR__3411
20b80     A4 FF 9F FD | 	jmp	#LR__3405
20b84                 | LR__3406
20b84                 | LR__3407
20b84     11 13 02 F6 | 	mov	arg01, local03
20b88     14 15 02 F6 | 	mov	arg02, local06
20b8c     01 16 66 F6 | 	neg	arg03, #1
20b90     48 FB BF FD | 	call	#_fatfs_cc_put_fat
20b94     FD 2C 0A F6 | 	mov	local08, result1 wz
20b98     1C 00 90 5D |  if_ne	jmp	#LR__3408
20b9c     00 20 0E F2 | 	cmp	local02, #0 wz
20ba0     14 00 90 AD |  if_e	jmp	#LR__3408
20ba4     11 13 02 F6 | 	mov	arg01, local03
20ba8     10 15 02 F6 | 	mov	arg02, local02
20bac     14 17 02 F6 | 	mov	arg03, local06
20bb0     28 FB BF FD | 	call	#_fatfs_cc_put_fat
20bb4     FD 2C 02 F6 | 	mov	local08, result1
20bb8                 | LR__3408
20bb8     00 2C 0E F2 | 	cmp	local08, #0 wz
20bbc     4C 00 90 5D |  if_ne	jmp	#LR__3409
20bc0     10 22 06 F1 | 	add	local03, #16
20bc4     11 29 62 FC | 	wrlong	local06, local03
20bc8     08 22 06 F1 | 	add	local03, #8
20bcc     11 27 02 FB | 	rdlong	local05, local03
20bd0     02 26 86 F1 | 	sub	local05, #2
20bd4     04 22 86 F1 | 	sub	local03, #4
20bd8     11 2F 02 FB | 	rdlong	local09, local03
20bdc     14 22 86 F1 | 	sub	local03, #20
20be0     13 2F 1A F2 | 	cmp	local09, local05 wcz
20be4     14 22 06 E1 |  if_be	add	local03, #20
20be8     11 2F 02 EB |  if_be	rdlong	local09, local03
20bec     01 2E 86 E1 |  if_be	sub	local09, #1
20bf0     11 2F 62 EC |  if_be	wrlong	local09, local03
20bf4     14 22 86 E1 |  if_be	sub	local03, #20
20bf8     04 22 06 F1 | 	add	local03, #4
20bfc     11 27 C2 FA | 	rdbyte	local05, local03
20c00     01 26 46 F5 | 	or	local05, #1
20c04     11 27 42 FC | 	wrbyte	local05, local03
20c08     08 00 90 FD | 	jmp	#LR__3410
20c0c                 | LR__3409
20c0c     01 2C 0E F2 | 	cmp	local08, #1 wz
20c10     01 28 C6 F6 | 	negz	local06, #1
20c14                 | LR__3410
20c14                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
20c14                 | ' 	}
20c14                 | ' 
20c14                 | ' 	return ncl;
20c14     14 FB 01 F6 | 	mov	result1, local06
20c18                 | LR__3411
20c18     A7 F0 03 F6 | 	mov	ptra, fp
20c1c     B2 00 A0 FD | 	call	#popregs_
20c20                 | _fatfs_cc_create_chain_ret
20c20     2D 00 64 FD | 	ret
20c24                 | 
20c24                 | _fatfs_cc_dir_clear
20c24     06 4A 05 F6 | 	mov	COUNT_, #6
20c28     A8 00 A0 FD | 	call	#pushregs_
20c2c     09 1F 02 F6 | 	mov	local01, arg01
20c30     0A 21 02 F6 | 	mov	local02, arg02
20c34     0F 13 02 F6 | 	mov	arg01, local01
20c38     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
20c3c     00 FA 0D F2 | 	cmp	result1, #0 wz
20c40     01 FA 05 56 |  if_ne	mov	result1, #1
20c44     90 00 90 5D |  if_ne	jmp	#LR__3422
20c48     0F 13 02 F6 | 	mov	arg01, local01
20c4c     10 15 02 F6 | 	mov	arg02, local02
20c50     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
20c54     FD 22 02 F6 | 	mov	local03, result1
20c58     30 1E 06 F1 | 	add	local01, #48
20c5c     0F 23 62 FC | 	wrlong	local03, local01
20c60     04 1E 06 F1 | 	add	local01, #4
20c64     0F 13 02 F6 | 	mov	arg01, local01
20c68     00 14 06 F6 | 	mov	arg02, #0
20c6c     09 16 C6 F9 | 	decod	arg03, #9
20c70     98 00 A0 FD | 	call	#\builtin_bytefill_
20c74     0F 25 02 F6 | 	mov	local04, local01
20c78                 | ' #line 1667 "ff.c"
20c78                 | ' 	{
20c78                 | ' 		ibuf = fs->win; szb = 1;
20c78                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
20c78     00 26 06 F6 | 	mov	local05, #0
20c7c     34 1E 86 F1 | 	sub	local01, #52
20c80                 | LR__3420
20c80     0A 1E 06 F1 | 	add	local01, #10
20c84     0F 29 E2 FA | 	rdword	local06, local01
20c88     0A 1E 86 F1 | 	sub	local01, #10
20c8c     14 27 12 F2 | 	cmp	local05, local06 wc
20c90     2C 00 90 3D |  if_ae	jmp	#LR__3421
20c94     01 1E 06 F1 | 	add	local01, #1
20c98     0F 13 C2 FA | 	rdbyte	arg01, local01
20c9c     01 1E 86 F1 | 	sub	local01, #1
20ca0     12 15 02 F6 | 	mov	arg02, local04
20ca4     11 17 02 F6 | 	mov	arg03, local03
20ca8     13 17 02 F1 | 	add	arg03, local05
20cac     01 18 06 F6 | 	mov	arg04, #1
20cb0     9C EF BF FD | 	call	#_fatfs_cc_disk_write
20cb4     00 FA 0D F2 | 	cmp	result1, #0 wz
20cb8     01 26 06 A1 |  if_e	add	local05, #1
20cbc     C0 FF 9F AD |  if_e	jmp	#LR__3420
20cc0                 | LR__3421
20cc0                 | ' 	}
20cc0                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
20cc0     0A 1E 06 F1 | 	add	local01, #10
20cc4     0F 25 E2 FA | 	rdword	local04, local01
20cc8     12 27 0A F2 | 	cmp	local05, local04 wz
20ccc     00 28 06 A6 |  if_e	mov	local06, #0
20cd0     01 28 06 56 |  if_ne	mov	local06, #1
20cd4     14 FB 01 F6 | 	mov	result1, local06
20cd8                 | LR__3422
20cd8     A7 F0 03 F6 | 	mov	ptra, fp
20cdc     B2 00 A0 FD | 	call	#popregs_
20ce0                 | _fatfs_cc_dir_clear_ret
20ce0     2D 00 64 FD | 	ret
20ce4                 | 
20ce4                 | _fatfs_cc_dir_sdi
20ce4     06 4A 05 F6 | 	mov	COUNT_, #6
20ce8     A8 00 A0 FD | 	call	#pushregs_
20cec     09 1F 02 F6 | 	mov	local01, arg01
20cf0     0A 21 02 F6 | 	mov	local02, arg02
20cf4     0F 23 02 FB | 	rdlong	local03, local01
20cf8     00 10 00 FF 
20cfc     00 20 16 F2 | 	cmp	local02, ##2097152 wc
20d00     1F 20 CE C7 |  if_b	test	local02, #31 wz
20d04                 | ' 		return FR_INT_ERR;
20d04     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
20d08     34 01 90 7D |  if_nc_or_nz	jmp	#LR__3436
20d0c     10 1E 06 F1 | 	add	local01, #16
20d10     0F 21 62 FC | 	wrlong	local02, local01
20d14     08 1E 86 F1 | 	sub	local01, #8
20d18     0F 25 0A FB | 	rdlong	local04, local01 wz
20d1c     08 1E 86 F1 | 	sub	local01, #8
20d20     11 27 C2 AA |  if_e	rdbyte	local05, local03
20d24     03 26 16 A2 |  if_e	cmp	local05, #3 wc
20d28     28 22 06 21 |  if_nc_and_z	add	local03, #40
20d2c     11 25 02 2B |  if_nc_and_z	rdlong	local04, local03
20d30     28 22 86 21 |  if_nc_and_z	sub	local03, #40
20d34     00 24 0E F2 | 	cmp	local04, #0 wz
20d38     3C 00 90 5D |  if_ne	jmp	#LR__3430
20d3c     10 27 02 F6 | 	mov	local05, local02
20d40     05 26 46 F0 | 	shr	local05, #5
20d44     08 22 06 F1 | 	add	local03, #8
20d48     11 15 E2 FA | 	rdword	arg02, local03
20d4c     08 22 86 F1 | 	sub	local03, #8
20d50     0A 27 12 F2 | 	cmp	local05, arg02 wc
20d54     02 FA 05 36 |  if_ae	mov	result1, #2
20d58     E4 00 90 3D |  if_ae	jmp	#LR__3436
20d5c     28 22 06 F1 | 	add	local03, #40
20d60     11 27 02 FB | 	rdlong	local05, local03
20d64     28 22 86 F1 | 	sub	local03, #40
20d68     18 1E 06 F1 | 	add	local01, #24
20d6c     0F 27 62 FC | 	wrlong	local05, local01
20d70     18 1E 86 F1 | 	sub	local01, #24
20d74     7C 00 90 FD | 	jmp	#LR__3435
20d78                 | LR__3430
20d78     0A 22 06 F1 | 	add	local03, #10
20d7c     11 29 E2 FA | 	rdword	local06, local03
20d80     0A 22 86 F1 | 	sub	local03, #10
20d84     09 28 66 F0 | 	shl	local06, #9
20d88                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
20d88                 | ' 		while (ofs >= csz) {
20d88                 | LR__3431
20d88     14 21 12 F2 | 	cmp	local02, local06 wc
20d8c     4C 00 90 CD |  if_b	jmp	#LR__3434
20d90     0F 13 02 F6 | 	mov	arg01, local01
20d94     12 15 02 F6 | 	mov	arg02, local04
20d98     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
20d9c     FD 24 02 F6 | 	mov	local04, result1
20da0     FF FF 7F FF 
20da4     FF 25 0E F2 | 	cmp	local04, ##-1 wz
20da8     01 FA 05 A6 |  if_e	mov	result1, #1
20dac     90 00 90 AD |  if_e	jmp	#LR__3436
20db0     02 24 16 F2 | 	cmp	local04, #2 wc
20db4     14 00 90 CD |  if_b	jmp	#LR__3432
20db8     18 22 06 F1 | 	add	local03, #24
20dbc     11 27 02 FB | 	rdlong	local05, local03
20dc0     18 22 86 F1 | 	sub	local03, #24
20dc4     13 25 12 F2 | 	cmp	local04, local05 wc
20dc8     08 00 90 CD |  if_b	jmp	#LR__3433
20dcc                 | LR__3432
20dcc     02 FA 05 F6 | 	mov	result1, #2
20dd0     6C 00 90 FD | 	jmp	#LR__3436
20dd4                 | LR__3433
20dd4     14 21 82 F1 | 	sub	local02, local06
20dd8     AC FF 9F FD | 	jmp	#LR__3431
20ddc                 | LR__3434
20ddc     11 13 02 F6 | 	mov	arg01, local03
20de0     12 15 02 F6 | 	mov	arg02, local04
20de4     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
20de8     18 1E 06 F1 | 	add	local01, #24
20dec     0F FB 61 FC | 	wrlong	result1, local01
20df0     18 1E 86 F1 | 	sub	local01, #24
20df4                 | LR__3435
20df4     14 1E 06 F1 | 	add	local01, #20
20df8     0F 25 62 FC | 	wrlong	local04, local01
20dfc     04 1E 06 F1 | 	add	local01, #4
20e00     0F 27 0A FB | 	rdlong	local05, local01 wz
20e04     18 1E 86 F1 | 	sub	local01, #24
20e08     02 FA 05 A6 |  if_e	mov	result1, #2
20e0c     30 00 90 AD |  if_e	jmp	#LR__3436
20e10     10 29 02 F6 | 	mov	local06, local02
20e14     09 28 46 F0 | 	shr	local06, #9
20e18     18 1E 06 F1 | 	add	local01, #24
20e1c     0F 27 02 FB | 	rdlong	local05, local01
20e20     14 27 02 F1 | 	add	local05, local06
20e24     0F 27 62 FC | 	wrlong	local05, local01
20e28     34 22 06 F1 | 	add	local03, #52
20e2c     FF 21 06 F5 | 	and	local02, #511
20e30     10 23 02 F1 | 	add	local03, local02
20e34     04 1E 06 F1 | 	add	local01, #4
20e38     0F 23 62 FC | 	wrlong	local03, local01
20e3c                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
20e3c                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
20e3c                 | ' 
20e3c                 | ' 	return FR_OK;
20e3c     00 FA 05 F6 | 	mov	result1, #0
20e40                 | LR__3436
20e40     A7 F0 03 F6 | 	mov	ptra, fp
20e44     B2 00 A0 FD | 	call	#popregs_
20e48                 | _fatfs_cc_dir_sdi_ret
20e48     2D 00 64 FD | 	ret
20e4c                 | 
20e4c                 | _fatfs_cc_dir_next
20e4c     05 4A 05 F6 | 	mov	COUNT_, #5
20e50     A8 00 A0 FD | 	call	#pushregs_
20e54     09 1F 02 F6 | 	mov	local01, arg01
20e58     0A 21 02 F6 | 	mov	local02, arg02
20e5c     0F 23 02 FB | 	rdlong	local03, local01
20e60     10 1E 06 F1 | 	add	local01, #16
20e64     0F 25 02 FB | 	rdlong	local04, local01
20e68     10 1E 86 F1 | 	sub	local01, #16
20e6c     20 24 06 F1 | 	add	local04, #32
20e70     00 10 00 FF 
20e74     00 24 16 F2 | 	cmp	local04, ##2097152 wc
20e78     18 1E 06 31 |  if_ae	add	local01, #24
20e7c     0F 01 68 3C |  if_ae	wrlong	#0, local01
20e80     18 1E 86 31 |  if_ae	sub	local01, #24
20e84     18 1E 06 F1 | 	add	local01, #24
20e88     0F 15 0A FB | 	rdlong	arg02, local01 wz
20e8c     18 1E 86 F1 | 	sub	local01, #24
20e90     04 FA 05 A6 |  if_e	mov	result1, #4
20e94     64 01 90 AD |  if_e	jmp	#LR__3445
20e98     FF 25 CE F7 | 	test	local04, #511 wz
20e9c     3C 01 90 5D |  if_ne	jmp	#LR__3444
20ea0     18 1E 06 F1 | 	add	local01, #24
20ea4     0F 15 02 FB | 	rdlong	arg02, local01
20ea8     01 14 06 F1 | 	add	arg02, #1
20eac     0F 15 62 FC | 	wrlong	arg02, local01
20eb0     04 1E 86 F1 | 	sub	local01, #4
20eb4     0F 15 0A FB | 	rdlong	arg02, local01 wz
20eb8     14 1E 86 F1 | 	sub	local01, #20
20ebc     2C 00 90 5D |  if_ne	jmp	#LR__3440
20ec0     12 15 02 F6 | 	mov	arg02, local04
20ec4     05 14 46 F0 | 	shr	arg02, #5
20ec8     08 22 06 F1 | 	add	local03, #8
20ecc     11 21 E2 FA | 	rdword	local02, local03
20ed0     08 22 86 F1 | 	sub	local03, #8
20ed4     10 15 12 F2 | 	cmp	arg02, local02 wc
20ed8     18 1E 06 31 |  if_ae	add	local01, #24
20edc     0F 01 68 3C |  if_ae	wrlong	#0, local01
20ee0                 | ' 				dp->sect = 0; return FR_NO_FILE;
20ee0     04 FA 05 36 |  if_ae	mov	result1, #4
20ee4     14 01 90 3D |  if_ae	jmp	#LR__3445
20ee8     F0 00 90 FD | 	jmp	#LR__3443
20eec                 | LR__3440
20eec     12 13 02 F6 | 	mov	arg01, local04
20ef0     09 12 46 F0 | 	shr	arg01, #9
20ef4     0A 22 06 F1 | 	add	local03, #10
20ef8     11 15 E2 FA | 	rdword	arg02, local03
20efc     0A 22 86 F1 | 	sub	local03, #10
20f00     01 14 86 F1 | 	sub	arg02, #1
20f04     0A 13 CA F7 | 	test	arg01, arg02 wz
20f08     D0 00 90 5D |  if_ne	jmp	#LR__3442
20f0c     0F 13 02 F6 | 	mov	arg01, local01
20f10     14 1E 06 F1 | 	add	local01, #20
20f14     0F 15 02 FB | 	rdlong	arg02, local01
20f18     14 1E 86 F1 | 	sub	local01, #20
20f1c     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
20f20     FD 26 02 F6 | 	mov	local05, result1
20f24     02 26 16 F2 | 	cmp	local05, #2 wc
20f28     02 FA 05 C6 |  if_b	mov	result1, #2
20f2c     CC 00 90 CD |  if_b	jmp	#LR__3445
20f30     FF FF 7F FF 
20f34     FF 27 0E F2 | 	cmp	local05, ##-1 wz
20f38     01 FA 05 A6 |  if_e	mov	result1, #1
20f3c     BC 00 90 AD |  if_e	jmp	#LR__3445
20f40     18 22 06 F1 | 	add	local03, #24
20f44     11 15 02 FB | 	rdlong	arg02, local03
20f48     18 22 86 F1 | 	sub	local03, #24
20f4c     0A 27 12 F2 | 	cmp	local05, arg02 wc
20f50     68 00 90 CD |  if_b	jmp	#LR__3441
20f54     00 20 0E F2 | 	cmp	local02, #0 wz
20f58     18 1E 06 A1 |  if_e	add	local01, #24
20f5c     0F 01 68 AC |  if_e	wrlong	#0, local01
20f60                 | ' 						dp->sect = 0; return FR_NO_FILE;
20f60     04 FA 05 A6 |  if_e	mov	result1, #4
20f64     94 00 90 AD |  if_e	jmp	#LR__3445
20f68     0F 13 02 F6 | 	mov	arg01, local01
20f6c     14 1E 06 F1 | 	add	local01, #20
20f70     0F 15 02 FB | 	rdlong	arg02, local01
20f74     14 1E 86 F1 | 	sub	local01, #20
20f78     84 FA BF FD | 	call	#_fatfs_cc_create_chain
20f7c     FD 26 0A F6 | 	mov	local05, result1 wz
20f80     07 FA 05 A6 |  if_e	mov	result1, #7
20f84     74 00 90 AD |  if_e	jmp	#LR__3445
20f88     01 26 0E F2 | 	cmp	local05, #1 wz
20f8c     02 FA 05 A6 |  if_e	mov	result1, #2
20f90     68 00 90 AD |  if_e	jmp	#LR__3445
20f94     FF FF 7F FF 
20f98     FF 27 0E F2 | 	cmp	local05, ##-1 wz
20f9c     01 FA 05 A6 |  if_e	mov	result1, #1
20fa0     58 00 90 AD |  if_e	jmp	#LR__3445
20fa4     13 15 02 F6 | 	mov	arg02, local05
20fa8     11 13 02 F6 | 	mov	arg01, local03
20fac     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
20fb0     00 FA 0D F2 | 	cmp	result1, #0 wz
20fb4     01 FA 05 56 |  if_ne	mov	result1, #1
20fb8     40 00 90 5D |  if_ne	jmp	#LR__3445
20fbc                 | LR__3441
20fbc     14 1E 06 F1 | 	add	local01, #20
20fc0     0F 27 62 FC | 	wrlong	local05, local01
20fc4     11 13 02 F6 | 	mov	arg01, local03
20fc8     13 15 02 F6 | 	mov	arg02, local05
20fcc     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
20fd0     04 1E 06 F1 | 	add	local01, #4
20fd4     0F FB 61 FC | 	wrlong	result1, local01
20fd8     18 1E 86 F1 | 	sub	local01, #24
20fdc                 | LR__3442
20fdc                 | LR__3443
20fdc                 | LR__3444
20fdc     10 1E 06 F1 | 	add	local01, #16
20fe0     0F 25 62 FC | 	wrlong	local04, local01
20fe4     34 22 06 F1 | 	add	local03, #52
20fe8     FF 25 06 F5 | 	and	local04, #511
20fec     12 23 02 F1 | 	add	local03, local04
20ff0     0C 1E 06 F1 | 	add	local01, #12
20ff4     0F 23 62 FC | 	wrlong	local03, local01
20ff8                 | ' #line 1771 "ff.c"
20ff8                 | ' 				}
20ff8                 | ' 				dp->clust = clst;
20ff8                 | ' 				dp->sect = clst2sect(fs, clst);
20ff8                 | ' 			}
20ff8                 | ' 		}
20ff8                 | ' 	}
20ff8                 | ' 	dp->dptr = ofs;
20ff8                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
20ff8                 | ' 
20ff8                 | ' 	return FR_OK;
20ff8     00 FA 05 F6 | 	mov	result1, #0
20ffc                 | LR__3445
20ffc     A7 F0 03 F6 | 	mov	ptra, fp
21000     B2 00 A0 FD | 	call	#popregs_
21004                 | _fatfs_cc_dir_next_ret
21004     2D 00 64 FD | 	ret
21008                 | 
21008                 | _fatfs_cc_dir_alloc
21008     08 4A 05 F6 | 	mov	COUNT_, #8
2100c     A8 00 A0 FD | 	call	#pushregs_
21010     09 1F 02 F6 | 	mov	local01, arg01
21014     0A 21 02 F6 | 	mov	local02, arg02
21018     0F 23 02 FB | 	rdlong	local03, local01
2101c     0F 13 02 F6 | 	mov	arg01, local01
21020     00 14 06 F6 | 	mov	arg02, #0
21024     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
21028     FD 24 0A F6 | 	mov	local04, result1 wz
2102c     70 00 90 5D |  if_ne	jmp	#LR__3454
21030     00 26 06 F6 | 	mov	local05, #0
21034                 | ' 		n = 0;
21034                 | ' 		do {
21034                 | LR__3450
21034     18 1E 06 F1 | 	add	local01, #24
21038     0F 15 02 FB | 	rdlong	arg02, local01
2103c     18 1E 86 F1 | 	sub	local01, #24
21040     11 13 02 F6 | 	mov	arg01, local03
21044     38 F3 BF FD | 	call	#_fatfs_cc_move_window
21048     FD 24 0A F6 | 	mov	local04, result1 wz
2104c     50 00 90 5D |  if_ne	jmp	#LR__3453
21050     1C 1E 06 F1 | 	add	local01, #28
21054     0F 29 02 FB | 	rdlong	local06, local01
21058     1C 1E 86 F1 | 	sub	local01, #28
2105c     14 29 C2 FA | 	rdbyte	local06, local06
21060     E5 28 0E F2 | 	cmp	local06, #229 wz
21064     1C 1E 06 51 |  if_ne	add	local01, #28
21068     0F 2B 02 5B |  if_ne	rdlong	local07, local01
2106c     1C 1E 86 51 |  if_ne	sub	local01, #28
21070     15 2D CA 5A |  if_ne	rdbyte	local08, local07 wz
21074     10 00 90 5D |  if_ne	jmp	#LR__3451
21078     01 26 06 F1 | 	add	local05, #1
2107c     10 27 0A F2 | 	cmp	local05, local02 wz
21080     1C 00 90 AD |  if_e	jmp	#LR__3453
21084     04 00 90 FD | 	jmp	#LR__3452
21088                 | LR__3451
21088     00 26 06 F6 | 	mov	local05, #0
2108c                 | LR__3452
2108c     0F 13 02 F6 | 	mov	arg01, local01
21090     01 14 06 F6 | 	mov	arg02, #1
21094     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
21098     FD 24 0A F6 | 	mov	local04, result1 wz
2109c     94 FF 9F AD |  if_e	jmp	#LR__3450
210a0                 | LR__3453
210a0                 | LR__3454
210a0     04 24 0E F2 | 	cmp	local04, #4 wz
210a4     07 24 06 A6 |  if_e	mov	local04, #7
210a8                 | ' 	return res;
210a8     12 FB 01 F6 | 	mov	result1, local04
210ac     A7 F0 03 F6 | 	mov	ptra, fp
210b0     B2 00 A0 FD | 	call	#popregs_
210b4                 | _fatfs_cc_dir_alloc_ret
210b4     2D 00 64 FD | 	ret
210b8                 | 
210b8                 | _fatfs_cc_ld_clust
210b8     09 01 02 F6 | 	mov	_var01, arg01
210bc     0A 13 02 F6 | 	mov	arg01, arg02
210c0     1A 12 06 F1 | 	add	arg01, #26
210c4                 | ' {
210c4                 | ' 
210c4                 | ' 	return *((WORD*)ptr);
210c4     09 FB E1 FA | 	rdword	result1, arg01
210c8     FD 12 32 F9 | 	getword	arg01, result1, #0
210cc     00 01 C2 FA | 	rdbyte	_var01, _var01
210d0     03 00 0E F2 | 	cmp	_var01, #3 wz
210d4     14 14 06 A1 |  if_e	add	arg02, #20
210d8                 | ' {
210d8                 | ' 
210d8                 | ' 	return *((WORD*)ptr);
210d8     0A FB E1 AA |  if_e	rdword	result1, arg02
210dc     10 FA 65 A0 |  if_e	shl	result1, #16
210e0     FD 12 42 A5 |  if_e	or	arg01, result1
210e4                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
210e4                 | ' 	}
210e4                 | ' 
210e4                 | ' 	return cl;
210e4     09 FB 01 F6 | 	mov	result1, arg01
210e8                 | _fatfs_cc_ld_clust_ret
210e8     2D 00 64 FD | 	ret
210ec                 | 
210ec                 | _fatfs_cc_st_clust
210ec     09 01 02 F6 | 	mov	_var01, arg01
210f0     0A 13 02 F6 | 	mov	arg01, arg02
210f4     1A 12 06 F1 | 	add	arg01, #26
210f8     09 17 52 FC | 	wrword	arg03, arg01
210fc     00 01 C2 FA | 	rdbyte	_var01, _var01
21100     03 00 0E F2 | 	cmp	_var01, #3 wz
21104     14 14 06 A1 |  if_e	add	arg02, #20
21108     10 16 46 A0 |  if_e	shr	arg03, #16
2110c     0A 17 52 AC |  if_e	wrword	arg03, arg02
21110                 | _fatfs_cc_st_clust_ret
21110     2D 00 64 FD | 	ret
21114                 | 
21114                 | _fatfs_cc_cmp_lfn
21114     07 4A 05 F6 | 	mov	COUNT_, #7
21118     A8 00 A0 FD | 	call	#pushregs_
2111c     09 1F 02 F6 | 	mov	local01, arg01
21120     0A 13 02 F6 | 	mov	arg01, arg02
21124     1A 12 06 F1 | 	add	arg01, #26
21128                 | ' {
21128                 | ' 
21128                 | ' 	return *((WORD*)ptr);
21128     09 FB E9 FA | 	rdword	result1, arg01 wz
2112c     00 FA 05 56 |  if_ne	mov	result1, #0
21130     E0 00 90 5D |  if_ne	jmp	#LR__3466
21134     0A 21 C2 FA | 	rdbyte	local02, arg02
21138     3F 20 06 F5 | 	and	local02, #63
2113c     01 20 86 F1 | 	sub	local02, #1
21140     0D 20 06 FD | 	qmul	local02, #13
21144                 | ' 
21144                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
21144                 | ' 
21144                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
21144     01 22 06 F6 | 	mov	local03, #1
21148     00 24 06 F6 | 	mov	local04, #0
2114c     18 26 62 FD | 	getqx	local05
21150                 | LR__3460
21150     0D 24 16 F2 | 	cmp	local04, #13 wc
21154     9C 00 90 3D |  if_ae	jmp	#LR__3465
21158     0A 13 02 F6 | 	mov	arg01, arg02
2115c     12 21 02 F6 | 	mov	local02, local04
21160     01 00 00 FF 
21164     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
21168     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
2116c     10 21 C2 FA | 	rdbyte	local02, local02
21170     01 20 06 FA | 	mul	local02, #1
21174     10 13 02 F1 | 	add	arg01, local02
21178     01 00 00 FF 
2117c     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
21180                 | ' {
21180                 | ' 
21180                 | ' 	return *((WORD*)ptr);
21180     09 FB E1 FA | 	rdword	result1, arg01
21184     FD 28 02 F6 | 	mov	local06, result1
21188     11 21 02 F6 | 	mov	local02, local03
2118c     0F 20 4E F7 | 	zerox	local02, #15 wz
21190     44 00 90 AD |  if_e	jmp	#LR__3463
21194     00 27 16 F2 | 	cmp	local05, #256 wc
21198     2C 00 90 3D |  if_ae	jmp	#LR__3461
2119c     14 13 32 F9 | 	getword	arg01, local06, #0
211a0     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
211a4     FD 20 02 F6 | 	mov	local02, result1
211a8     13 23 02 F6 | 	mov	local03, local05
211ac     01 22 66 F0 | 	shl	local03, #1
211b0     0F 23 02 F1 | 	add	local03, local01
211b4     11 13 E2 FA | 	rdword	arg01, local03
211b8     01 26 06 F1 | 	add	local05, #1
211bc     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
211c0     FD 20 0A F2 | 	cmp	local02, result1 wz
211c4     08 00 90 AD |  if_e	jmp	#LR__3462
211c8                 | LR__3461
211c8                 | ' 				return 0;
211c8     00 FA 05 F6 | 	mov	result1, #0
211cc     44 00 90 FD | 	jmp	#LR__3466
211d0                 | LR__3462
211d0     14 23 02 F6 | 	mov	local03, local06
211d4     14 00 90 FD | 	jmp	#LR__3464
211d8                 | LR__3463
211d8     14 29 32 F9 | 	getword	local06, local06, #0
211dc     7F 00 00 FF 
211e0     FF 29 0E F2 | 	cmp	local06, ##65535 wz
211e4     00 FA 05 56 |  if_ne	mov	result1, #0
211e8     28 00 90 5D |  if_ne	jmp	#LR__3466
211ec                 | LR__3464
211ec     01 24 06 F1 | 	add	local04, #1
211f0     5C FF 9F FD | 	jmp	#LR__3460
211f4                 | LR__3465
211f4     0A 21 C2 FA | 	rdbyte	local02, arg02
211f8     40 20 CE F7 | 	test	local02, #64 wz
211fc     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
21200     01 26 66 50 |  if_ne	shl	local05, #1
21204     0F 27 02 51 |  if_ne	add	local05, local01
21208     13 2B EA 5A |  if_ne	rdword	local07, local05 wz
2120c     00 FA 05 56 |  if_ne	mov	result1, #0
21210                 | ' 
21210                 | ' 	return 1;
21210     01 FA 05 A6 |  if_e	mov	result1, #1
21214                 | LR__3466
21214     A7 F0 03 F6 | 	mov	ptra, fp
21218     B2 00 A0 FD | 	call	#popregs_
2121c                 | _fatfs_cc_cmp_lfn_ret
2121c     2D 00 64 FD | 	ret
21220                 | 
21220                 | _fatfs_cc_pick_lfn
21220     09 01 02 F6 | 	mov	_var01, arg01
21224     0A 13 02 F6 | 	mov	arg01, arg02
21228     1A 12 06 F1 | 	add	arg01, #26
2122c                 | ' {
2122c                 | ' 
2122c                 | ' 	return *((WORD*)ptr);
2122c     09 FB E9 FA | 	rdword	result1, arg01 wz
21230     00 FA 05 56 |  if_ne	mov	result1, #0
21234     D4 00 90 5D |  if_ne	jmp	#LR__3475
21238     0A 03 C2 FA | 	rdbyte	_var02, arg02
2123c     40 02 26 F5 | 	andn	_var02, #64
21240     01 02 86 F1 | 	sub	_var02, #1
21244     0D 02 06 FD | 	qmul	_var02, #13
21248                 | ' 
21248                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
21248                 | ' 
21248                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
21248     01 04 06 F6 | 	mov	_var03, #1
2124c     00 06 06 F6 | 	mov	_var04, #0
21250     18 08 62 FD | 	getqx	_var05
21254                 | LR__3470
21254     0D 06 16 F2 | 	cmp	_var04, #13 wc
21258     80 00 90 3D |  if_ae	jmp	#LR__3473
2125c     0A 13 02 F6 | 	mov	arg01, arg02
21260     03 03 02 F6 | 	mov	_var02, _var04
21264     01 00 00 FF 
21268     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2126c     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
21270     01 03 C2 FA | 	rdbyte	_var02, _var02
21274     01 02 06 FA | 	mul	_var02, #1
21278     01 13 02 F1 | 	add	arg01, _var02
2127c     01 00 00 FF 
21280     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
21284                 | ' {
21284                 | ' 
21284                 | ' 	return *((WORD*)ptr);
21284     09 FB E1 FA | 	rdword	result1, arg01
21288     FD 0A 02 F6 | 	mov	_var06, result1
2128c     02 03 02 F6 | 	mov	_var02, _var03
21290     0F 02 4E F7 | 	zerox	_var02, #15 wz
21294     28 00 90 AD |  if_e	jmp	#LR__3471
21298     00 09 16 F2 | 	cmp	_var05, #256 wc
2129c     00 FA 05 36 |  if_ae	mov	result1, #0
212a0     68 00 90 3D |  if_ae	jmp	#LR__3475
212a4     04 03 02 F6 | 	mov	_var02, _var05
212a8     01 02 66 F0 | 	shl	_var02, #1
212ac     00 03 02 F1 | 	add	_var02, _var01
212b0     05 05 02 F6 | 	mov	_var03, _var06
212b4     01 05 52 FC | 	wrword	_var03, _var02
212b8     01 08 06 F1 | 	add	_var05, #1
212bc     14 00 90 FD | 	jmp	#LR__3472
212c0                 | LR__3471
212c0     05 0B 32 F9 | 	getword	_var06, _var06, #0
212c4     7F 00 00 FF 
212c8     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
212cc     00 FA 05 56 |  if_ne	mov	result1, #0
212d0     38 00 90 5D |  if_ne	jmp	#LR__3475
212d4                 | LR__3472
212d4     01 06 06 F1 | 	add	_var04, #1
212d8     78 FF 9F FD | 	jmp	#LR__3470
212dc                 | LR__3473
212dc     0A 03 C2 FA | 	rdbyte	_var02, arg02
212e0     40 02 CE F7 | 	test	_var02, #64 wz
212e4     02 0D 02 56 |  if_ne	mov	_var07, _var03
212e8     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
212ec     18 00 90 AD |  if_e	jmp	#LR__3474
212f0     00 09 16 F2 | 	cmp	_var05, #256 wc
212f4     00 FA 05 36 |  if_ae	mov	result1, #0
212f8     10 00 90 3D |  if_ae	jmp	#LR__3475
212fc     01 08 66 F0 | 	shl	_var05, #1
21300     00 09 02 F1 | 	add	_var05, _var01
21304     04 01 58 FC | 	wrword	#0, _var05
21308                 | LR__3474
21308                 | ' 		lfnbuf[i] = 0;
21308                 | ' 	}
21308                 | ' 
21308                 | ' 	return 1;
21308     01 FA 05 F6 | 	mov	result1, #1
2130c                 | LR__3475
2130c                 | _fatfs_cc_pick_lfn_ret
2130c     2D 00 64 FD | 	ret
21310                 | 
21310                 | _fatfs_cc_put_lfn
21310     0D 14 06 F1 | 	add	arg02, #13
21314     0A 19 42 FC | 	wrbyte	arg04, arg02
21318     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
2131c     01 18 86 F1 | 	sub	arg04, #1
21320     0D 18 06 FD | 	qmul	arg04, #13
21324     09 01 02 F6 | 	mov	_var01, arg01
21328     02 14 86 F1 | 	sub	arg02, #2
2132c     0A 1F 48 FC | 	wrbyte	#15, arg02
21330     01 14 06 F1 | 	add	arg02, #1
21334     0A 01 48 FC | 	wrbyte	#0, arg02
21338     0C 14 86 F1 | 	sub	arg02, #12
2133c     0A 13 02 F6 | 	mov	arg01, arg02
21340     1A 12 06 F1 | 	add	arg01, #26
21344     09 01 58 FC | 	wrword	#0, arg01
21348     00 02 06 F6 | 	mov	_var02, #0
2134c     00 04 06 F6 | 	mov	_var03, #0
21350                 | ' 	BYTE* dir,
21350                 | ' 	BYTE ord,
21350                 | ' 	BYTE sum
21350                 | ' )
21350                 | ' {
21350                 | ' 	UINT i, s;
21350                 | ' 	WCHAR wc;
21350                 | ' 
21350                 | ' 
21350                 | ' 	dir[ 13 ] = sum;
21350                 | ' 	dir[ 11 ] =  0x0F ;
21350                 | ' 	dir[ 12 ] = 0;
21350                 | ' 	st_word(dir +  26 , 0);
21350                 | ' 
21350                 | ' 	i = (ord - 1) * 13;
21350                 | ' 	s = wc = 0;
21350                 | ' 	do {
21350     01 00 00 FF 
21354     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
21358     18 06 62 FD | 	getqx	_var04
2135c     97 2A 48 FB | 	callpa	#(@LR__3481-@LR__3480)>>2,fcache_load_ptr_
21360                 | LR__3480
21360     01 19 32 F9 | 	getword	arg04, _var02, #0
21364     7F 00 00 FF 
21368     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
2136c     03 13 02 56 |  if_ne	mov	arg01, _var04
21370     01 06 06 51 |  if_ne	add	_var04, #1
21374     01 12 66 50 |  if_ne	shl	arg01, #1
21378     00 13 02 51 |  if_ne	add	arg01, _var01
2137c     09 03 E2 5A |  if_ne	rdword	_var02, arg01
21380     0A 13 02 F6 | 	mov	arg01, arg02
21384     02 19 02 F6 | 	mov	arg04, _var03
21388     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
2138c     0C 19 C2 FA | 	rdbyte	arg04, arg04
21390     01 18 06 FA | 	mul	arg04, #1
21394     0C 13 02 F1 | 	add	arg01, arg04
21398     09 03 52 FC | 	wrword	_var02, arg01
2139c     01 19 02 F6 | 	mov	arg04, _var02
213a0     0F 18 4E F7 | 	zerox	arg04, #15 wz
213a4     0F 02 CE A9 |  if_e	bmask	_var02, #15
213a8     01 04 06 F1 | 	add	_var03, #1
213ac     0D 04 16 F2 | 	cmp	_var03, #13 wc
213b0     AC FF 9F CD |  if_b	jmp	#LR__3480
213b4                 | LR__3481
213b4     01 00 00 FF 
213b8     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
213bc     01 03 32 F9 | 	getword	_var02, _var02, #0
213c0     7F 00 00 FF 
213c4     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
213c8     01 06 66 50 |  if_ne	shl	_var04, #1
213cc     00 07 02 51 |  if_ne	add	_var04, _var01
213d0     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
213d4     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
213d8     40 16 46 A5 |  if_e	or	arg03, #64
213dc     0A 17 42 FC | 	wrbyte	arg03, arg02
213e0                 | _fatfs_cc_put_lfn_ret
213e0     2D 00 64 FD | 	ret
213e4                 | 
213e4                 | _fatfs_cc_gen_numname
213e4     08 4A 05 F6 | 	mov	COUNT_, #8
213e8     A8 00 A0 FD | 	call	#pushregs_
213ec     2C F0 07 F1 | 	add	ptra, #44
213f0     09 1F 02 F6 | 	mov	local01, arg01
213f4     0A 21 02 F6 | 	mov	local02, arg02
213f8     0B 23 02 F6 | 	mov	local03, arg03
213fc     0C 25 02 F6 | 	mov	local04, arg04
21400     0F 13 02 F6 | 	mov	arg01, local01
21404     10 15 02 F6 | 	mov	arg02, local02
21408     0B 16 06 F6 | 	mov	arg03, #11
2140c     88 78 BF FD | 	call	#__system____builtin_memmove
21410     06 24 16 F2 | 	cmp	local04, #6 wc
21414     48 00 90 CD |  if_b	jmp	#LR__3495
21418     12 27 02 F6 | 	mov	local05, local04
2141c     97 1E 48 FB | 	callpa	#(@LR__3493-@LR__3490)>>2,fcache_load_ptr_
21420                 | ' 		sreg = seq;
21420                 | ' 		while (*lfn) {
21420                 | LR__3490
21420     11 29 EA FA | 	rdword	local06, local03 wz
21424     34 00 90 AD |  if_e	jmp	#LR__3494
21428     11 2B E2 FA | 	rdword	local07, local03
2142c                 | ' 			wc = *lfn++;
2142c                 | ' 			for (i = 0; i < 16; i++) {
2142c     02 22 06 F1 | 	add	local03, #2
21430     10 12 DC FC | 	rep	@LR__3492, #16
21434                 | LR__3491
21434     01 26 66 F0 | 	shl	local05, #1
21438     15 29 32 F9 | 	getword	local06, local07, #0
2143c     01 28 06 F5 | 	and	local06, #1
21440     14 27 02 F1 | 	add	local05, local06
21444     15 2B 32 F9 | 	getword	local07, local07, #0
21448     01 2A 46 F0 | 	shr	local07, #1
2144c     10 26 2E F4 | 	testbn	local05, #16 wz
21450     88 00 00 5F 
21454     21 26 66 55 |  if_ne	xor	local05, ##69665
21458                 | LR__3492
21458     C4 FF 9F FD | 	jmp	#LR__3490
2145c                 | LR__3493
2145c                 | LR__3494
2145c     13 25 02 F6 | 	mov	local04, local05
21460                 | LR__3495
21460     07 2A 06 F6 | 	mov	local07, #7
21464                 | ' 			}
21464                 | ' 		}
21464                 | ' 		seq = (UINT)sreg;
21464                 | ' 	}
21464                 | ' 
21464                 | ' 
21464                 | ' 	i = 7;
21464                 | ' 	do {
21464     10 4E 05 F1 | 	add	fp, #16
21468     97 1A 48 FB | 	callpa	#(@LR__3497-@LR__3496)>>2,fcache_load_ptr_
2146c                 | LR__3496
2146c     12 27 42 F8 | 	getnib	local05, local04, #0
21470     30 26 06 F1 | 	add	local05, #48
21474     04 24 46 F0 | 	shr	local04, #4
21478     13 29 E2 F8 | 	getbyte	local06, local05, #0
2147c     3A 28 16 F2 | 	cmp	local06, #58 wc
21480     13 27 E2 38 |  if_ae	getbyte	local05, local05, #0
21484     07 26 06 31 |  if_ae	add	local05, #7
21488     15 29 02 F6 | 	mov	local06, local07
2148c     01 2A 8E F1 | 	sub	local07, #1 wz
21490     A7 28 02 F1 | 	add	local06, fp
21494     14 27 42 FC | 	wrbyte	local05, local06
21498     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
2149c     CC FF 9F 5D |  if_ne	jmp	#LR__3496
214a0                 | LR__3497
214a0     15 29 02 F6 | 	mov	local06, local07
214a4     A7 28 02 F1 | 	add	local06, fp
214a8     14 FD 48 FC | 	wrbyte	#126, local06
214ac                 | ' 	ns[i] = '~';
214ac                 | ' 
214ac                 | ' 
214ac                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
214ac     00 26 06 F6 | 	mov	local05, #0
214b0     10 4E 85 F1 | 	sub	fp, #16
214b4     97 2A 48 FB | 	callpa	#(@LR__3500-@LR__3498)>>2,fcache_load_ptr_
214b8                 | LR__3498
214b8     15 27 12 F2 | 	cmp	local05, local07 wc
214bc     4C 00 90 3D |  if_ae	jmp	#LR__3501
214c0     13 29 02 F6 | 	mov	local06, local05
214c4     0F 29 02 F1 | 	add	local06, local01
214c8     14 29 C2 FA | 	rdbyte	local06, local06
214cc     20 28 0E F2 | 	cmp	local06, #32 wz
214d0     38 00 90 AD |  if_e	jmp	#LR__3501
214d4     13 13 02 F6 | 	mov	arg01, local05
214d8     0F 13 02 F1 | 	add	arg01, local01
214dc     09 13 CA FA | 	rdbyte	arg01, arg01 wz
214e0     00 FA 05 56 |  if_ne	mov	result1, #0
214e4                 | ' 
214e4                 | ' 	return 0;
214e4     00 FA 05 A6 |  if_e	mov	result1, #0
214e8     00 FA 0D F2 | 	cmp	result1, #0 wz
214ec     14 00 90 AD |  if_e	jmp	#LR__3499
214f0     15 29 02 F6 | 	mov	local06, local07
214f4     01 28 86 F1 | 	sub	local06, #1
214f8     14 27 0A F2 | 	cmp	local05, local06 wz
214fc     0C 00 90 AD |  if_e	jmp	#LR__3501
21500     01 26 06 F1 | 	add	local05, #1
21504                 | LR__3499
21504     01 26 06 F1 | 	add	local05, #1
21508     AC FF 9F FD | 	jmp	#LR__3498
2150c                 | LR__3500
2150c                 | LR__3501
2150c     97 20 48 FB | 	callpa	#(@LR__3505-@LR__3502)>>2,fcache_load_ptr_
21510                 | ' 			j++;
21510                 | ' 		}
21510                 | ' 	}
21510                 | ' 	do {
21510                 | LR__3502
21510     13 29 02 F6 | 	mov	local06, local05
21514     0F 29 02 F1 | 	add	local06, local01
21518     08 2A 16 F2 | 	cmp	local07, #8 wc
2151c     01 26 06 F1 | 	add	local05, #1
21520     1C 00 90 3D |  if_ae	jmp	#LR__3503
21524     15 25 02 F6 | 	mov	local04, local07
21528     10 4E 05 F1 | 	add	fp, #16
2152c     A7 24 02 F1 | 	add	local04, fp
21530     12 2D C2 FA | 	rdbyte	local08, local04
21534     01 2A 06 F1 | 	add	local07, #1
21538     10 4E 85 F1 | 	sub	fp, #16
2153c     04 00 90 FD | 	jmp	#LR__3504
21540                 | LR__3503
21540     20 2C 06 F6 | 	mov	local08, #32
21544                 | LR__3504
21544     14 2D 42 FC | 	wrbyte	local08, local06
21548     08 26 16 F2 | 	cmp	local05, #8 wc
2154c     C0 FF 9F CD |  if_b	jmp	#LR__3502
21550                 | LR__3505
21550     A7 F0 03 F6 | 	mov	ptra, fp
21554     B2 00 A0 FD | 	call	#popregs_
21558                 | _fatfs_cc_gen_numname_ret
21558     2D 00 64 FD | 	ret
2155c                 | 
2155c                 | _fatfs_cc_sum_sfn
2155c     00 00 06 F6 | 	mov	_var01, #0
21560                 | ' )
21560                 | ' {
21560                 | ' 	BYTE sum = 0;
21560                 | ' 	UINT n = 11;
21560                 | ' 
21560                 | ' 	do {
21560     97 12 48 FB | 	callpa	#(@LR__3512-@LR__3510)>>2,fcache_load_ptr_
21564                 | LR__3510
21564     0B 10 DC FC | 	rep	@LR__3513, #11
21568                 | LR__3511
21568     00 FB E1 F8 | 	getbyte	result1, _var01, #0
2156c     01 FA 45 F0 | 	shr	result1, #1
21570     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
21574     07 00 66 F0 | 	shl	_var01, #7
21578     00 FB 01 F1 | 	add	result1, _var01
2157c     09 01 C2 FA | 	rdbyte	_var01, arg01
21580     FD 00 02 F1 | 	add	_var01, result1
21584     01 12 06 F1 | 	add	arg01, #1
21588                 | LR__3512
21588                 | LR__3513
21588                 | ' 	return sum;
21588     00 FB 01 F6 | 	mov	result1, _var01
2158c                 | _fatfs_cc_sum_sfn_ret
2158c     2D 00 64 FD | 	ret
21590                 | 
21590                 | _fatfs_cc_dir_read
21590     0C 4A 05 F6 | 	mov	COUNT_, #12
21594     A8 00 A0 FD | 	call	#pushregs_
21598     09 1F 02 F6 | 	mov	local01, arg01
2159c     0A 21 02 F6 | 	mov	local02, arg02
215a0     04 22 06 F6 | 	mov	local03, #4
215a4     0F 25 02 FB | 	rdlong	local04, local01
215a8     FF 26 06 F6 | 	mov	local05, #255
215ac     FF 28 06 F6 | 	mov	local06, #255
215b0                 | ' )
215b0                 | ' {
215b0                 | ' 	FRESULT res = FR_NO_FILE;
215b0                 | ' 	FATFS *fs = dp->obj.fs;
215b0                 | ' 	BYTE attr, b;
215b0                 | ' 
215b0                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
215b0                 | ' 
215b0                 | ' 
215b0                 | ' 	while (dp->sect) {
215b0                 | LR__3520
215b0     18 1E 06 F1 | 	add	local01, #24
215b4     0F FB 09 FB | 	rdlong	result1, local01 wz
215b8     18 1E 86 F1 | 	sub	local01, #24
215bc     AC 01 90 AD |  if_e	jmp	#LR__3530
215c0     18 1E 06 F1 | 	add	local01, #24
215c4     0F 15 02 FB | 	rdlong	arg02, local01
215c8     18 1E 86 F1 | 	sub	local01, #24
215cc     12 13 02 F6 | 	mov	arg01, local04
215d0     AC ED BF FD | 	call	#_fatfs_cc_move_window
215d4     FD 22 0A F6 | 	mov	local03, result1 wz
215d8     90 01 90 5D |  if_ne	jmp	#LR__3530
215dc     1C 1E 06 F1 | 	add	local01, #28
215e0     0F FB 01 FB | 	rdlong	result1, local01
215e4     1C 1E 86 F1 | 	sub	local01, #28
215e8     FD 2A C2 FA | 	rdbyte	local07, result1
215ec     15 FB 01 F6 | 	mov	result1, local07
215f0     07 FA 4D F7 | 	zerox	result1, #7 wz
215f4     04 22 06 A6 |  if_e	mov	local03, #4
215f8                 | ' 			res = FR_NO_FILE; break;
215f8     70 01 90 AD |  if_e	jmp	#LR__3530
215fc     1C 1E 06 F1 | 	add	local01, #28
21600     0F 2D 02 FB | 	rdlong	local08, local01
21604     0B 2C 06 F1 | 	add	local08, #11
21608     16 2F C2 FA | 	rdbyte	local09, local08
2160c     3F 2E 06 F5 | 	and	local09, #63
21610     16 1E 86 F1 | 	sub	local01, #22
21614     0F 2F 42 FC | 	wrbyte	local09, local01
21618     06 1E 86 F1 | 	sub	local01, #6
2161c     15 FB E1 F8 | 	getbyte	result1, local07, #0
21620     E5 FA 0D F2 | 	cmp	result1, #229 wz
21624     15 2D 02 56 |  if_ne	mov	local08, local07
21628     16 2D E2 58 |  if_ne	getbyte	local08, local08, #0
2162c     2E 2C 0E 52 |  if_ne	cmp	local08, #46 wz
21630     1C 00 90 AD |  if_e	jmp	#LR__3521
21634     00 30 06 F6 | 	mov	local10, #0
21638     17 2D E2 F8 | 	getbyte	local08, local09, #0
2163c     20 2C 26 F5 | 	andn	local08, #32
21640     08 2C 0E F2 | 	cmp	local08, #8 wz
21644     01 30 06 A6 |  if_e	mov	local10, #1
21648     10 31 0A F2 | 	cmp	local10, local02 wz
2164c     08 00 90 AD |  if_e	jmp	#LR__3522
21650                 | LR__3521
21650     FF 26 06 F6 | 	mov	local05, #255
21654     00 01 90 FD | 	jmp	#LR__3529
21658                 | LR__3522
21658     17 2F E2 F8 | 	getbyte	local09, local09, #0
2165c     0F 2E 0E F2 | 	cmp	local09, #15 wz
21660     B4 00 90 5D |  if_ne	jmp	#LR__3526
21664     15 33 E2 F8 | 	getbyte	local11, local07, #0
21668     40 32 CE F7 | 	test	local11, #64 wz
2166c     30 00 90 AD |  if_e	jmp	#LR__3523
21670     1C 1E 06 F1 | 	add	local01, #28
21674     0F 33 02 FB | 	rdlong	local11, local01
21678     0D 32 06 F1 | 	add	local11, #13
2167c     19 29 C2 FA | 	rdbyte	local06, local11
21680     15 2B E2 F8 | 	getbyte	local07, local07, #0
21684     BF 2A 06 F5 | 	and	local07, #191
21688     15 27 02 F6 | 	mov	local05, local07
2168c     0C 1E 86 F1 | 	sub	local01, #12
21690     0F 33 02 FB | 	rdlong	local11, local01
21694     1C 1E 06 F1 | 	add	local01, #28
21698     0F 33 62 FC | 	wrlong	local11, local01
2169c     2C 1E 86 F1 | 	sub	local01, #44
216a0                 | LR__3523
216a0     15 2D E2 F8 | 	getbyte	local08, local07, #0
216a4     13 31 E2 F8 | 	getbyte	local10, local05, #0
216a8     18 2D 0A F2 | 	cmp	local08, local10 wz
216ac     5C 00 90 5D |  if_ne	jmp	#LR__3524
216b0     14 31 E2 F8 | 	getbyte	local10, local06, #0
216b4     1C 1E 06 F1 | 	add	local01, #28
216b8     0F 2F 02 FB | 	rdlong	local09, local01
216bc     1C 1E 86 F1 | 	sub	local01, #28
216c0     0D 2E 06 F1 | 	add	local09, #13
216c4     17 2D C2 FA | 	rdbyte	local08, local09
216c8     16 2F E2 F8 | 	getbyte	local09, local08, #0
216cc     17 31 0A F2 | 	cmp	local10, local09 wz
216d0     38 00 90 5D |  if_ne	jmp	#LR__3524
216d4     0C 24 06 F1 | 	add	local04, #12
216d8     12 13 02 FB | 	rdlong	arg01, local04
216dc     0C 24 86 F1 | 	sub	local04, #12
216e0     1C 1E 06 F1 | 	add	local01, #28
216e4     0F 35 02 FB | 	rdlong	local12, local01
216e8     1C 1E 86 F1 | 	sub	local01, #28
216ec     1A 15 02 F6 | 	mov	arg02, local12
216f0     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
216f4     00 FA 4D F2 | 	cmps	result1, #0 wz
216f8     13 35 02 56 |  if_ne	mov	local12, local05
216fc     1A 35 E2 58 |  if_ne	getbyte	local12, local12, #0
21700     01 34 86 51 |  if_ne	sub	local12, #1
21704     1A 33 02 56 |  if_ne	mov	local11, local12
21708     04 00 90 5D |  if_ne	jmp	#LR__3525
2170c                 | LR__3524
2170c     FF 32 06 F6 | 	mov	local11, #255
21710                 | LR__3525
21710     19 27 02 F6 | 	mov	local05, local11
21714     40 00 90 FD | 	jmp	#LR__3528
21718                 | LR__3526
21718     13 33 02 F6 | 	mov	local11, local05
2171c     07 32 4E F7 | 	zerox	local11, #7 wz
21720     20 00 90 5D |  if_ne	jmp	#LR__3527
21724     14 29 E2 F8 | 	getbyte	local06, local06, #0
21728     1C 1E 06 F1 | 	add	local01, #28
2172c     0F 13 02 FB | 	rdlong	arg01, local01
21730     1C 1E 86 F1 | 	sub	local01, #28
21734     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
21738     FD FA E1 F8 | 	getbyte	result1, result1, #0
2173c     FD 28 0A F2 | 	cmp	local06, result1 wz
21740     28 00 90 AD |  if_e	jmp	#LR__3530
21744                 | LR__3527
21744     2C 1E 06 F1 | 	add	local01, #44
21748     FF FF FF FF 
2174c     0F FF 6B FC | 	wrlong	##-1, local01
21750     2C 1E 86 F1 | 	sub	local01, #44
21754                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
21754                 | ' 					}
21754                 | ' 					break;
21754     14 00 90 FD | 	jmp	#LR__3530
21758                 | LR__3528
21758                 | LR__3529
21758     0F 13 02 F6 | 	mov	arg01, local01
2175c     00 14 06 F6 | 	mov	arg02, #0
21760     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
21764     FD 22 0A F6 | 	mov	local03, result1 wz
21768     44 FE 9F AD |  if_e	jmp	#LR__3520
2176c                 | LR__3530
2176c     00 22 0E F2 | 	cmp	local03, #0 wz
21770     18 1E 06 51 |  if_ne	add	local01, #24
21774     0F 01 68 5C |  if_ne	wrlong	#0, local01
21778                 | ' 	return res;
21778     11 FB 01 F6 | 	mov	result1, local03
2177c     A7 F0 03 F6 | 	mov	ptra, fp
21780     B2 00 A0 FD | 	call	#popregs_
21784                 | _fatfs_cc_dir_read_ret
21784     2D 00 64 FD | 	ret
21788                 | 
21788                 | _fatfs_cc_dir_find
21788     0B 4A 05 F6 | 	mov	COUNT_, #11
2178c     A8 00 A0 FD | 	call	#pushregs_
21790     09 1F 02 F6 | 	mov	local01, arg01
21794     0F 21 02 FB | 	rdlong	local02, local01
21798     0F 13 02 F6 | 	mov	arg01, local01
2179c     00 14 06 F6 | 	mov	arg02, #0
217a0     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
217a4     00 FA 0D F2 | 	cmp	result1, #0 wz
217a8     18 02 90 5D |  if_ne	jmp	#LR__3552
217ac     FF 22 06 F6 | 	mov	local03, #255
217b0     FF 24 06 F6 | 	mov	local04, #255
217b4     2C 1E 06 F1 | 	add	local01, #44
217b8     FF FF FF FF 
217bc     0F FF 6B FC | 	wrlong	##-1, local01
217c0     2C 1E 86 F1 | 	sub	local01, #44
217c4                 | ' #line 2404 "ff.c"
217c4                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
217c4                 | ' 
217c4                 | ' 	do {
217c4                 | LR__3540
217c4     18 1E 06 F1 | 	add	local01, #24
217c8     0F 15 02 FB | 	rdlong	arg02, local01
217cc     18 1E 86 F1 | 	sub	local01, #24
217d0     10 13 02 F6 | 	mov	arg01, local02
217d4     A8 EB BF FD | 	call	#_fatfs_cc_move_window
217d8     FD 26 0A F6 | 	mov	local05, result1 wz
217dc     E0 01 90 5D |  if_ne	jmp	#LR__3551
217e0     1C 1E 06 F1 | 	add	local01, #28
217e4     0F 17 02 FB | 	rdlong	arg03, local01
217e8     1C 1E 86 F1 | 	sub	local01, #28
217ec     0B 29 C2 FA | 	rdbyte	local06, arg03
217f0     14 17 02 F6 | 	mov	arg03, local06
217f4     07 16 4E F7 | 	zerox	arg03, #7 wz
217f8     04 26 06 A6 |  if_e	mov	local05, #4
217fc     C0 01 90 AD |  if_e	jmp	#LR__3551
21800     1C 1E 06 F1 | 	add	local01, #28
21804     0F 2B 02 FB | 	rdlong	local07, local01
21808     15 17 02 F6 | 	mov	arg03, local07
2180c     0B 16 06 F1 | 	add	arg03, #11
21810     0B 2D C2 FA | 	rdbyte	local08, arg03
21814     3F 2C 06 F5 | 	and	local08, #63
21818     16 1E 86 F1 | 	sub	local01, #22
2181c     0F 2D 42 FC | 	wrbyte	local08, local01
21820     06 1E 86 F1 | 	sub	local01, #6
21824     14 17 E2 F8 | 	getbyte	arg03, local06, #0
21828     E5 16 0E F2 | 	cmp	arg03, #229 wz
2182c     18 00 90 AD |  if_e	jmp	#LR__3541
21830     16 17 E2 F8 | 	getbyte	arg03, local08, #0
21834     08 16 CE F7 | 	test	arg03, #8 wz
21838     16 2B 02 56 |  if_ne	mov	local07, local08
2183c     15 2B E2 58 |  if_ne	getbyte	local07, local07, #0
21840     0F 2A 0E 52 |  if_ne	cmp	local07, #15 wz
21844     18 00 90 AD |  if_e	jmp	#LR__3542
21848                 | LR__3541
21848     FF 24 06 F6 | 	mov	local04, #255
2184c     2C 1E 06 F1 | 	add	local01, #44
21850     FF FF FF FF 
21854     0F FF 6B FC | 	wrlong	##-1, local01
21858     2C 1E 86 F1 | 	sub	local01, #44
2185c     4C 01 90 FD | 	jmp	#LR__3550
21860                 | LR__3542
21860     16 2D E2 F8 | 	getbyte	local08, local08, #0
21864     0F 2C 0E F2 | 	cmp	local08, #15 wz
21868     C8 00 90 5D |  if_ne	jmp	#LR__3546
2186c     2B 1E 06 F1 | 	add	local01, #43
21870     0F 2D C2 FA | 	rdbyte	local08, local01
21874     2B 1E 86 F1 | 	sub	local01, #43
21878     40 2C CE F7 | 	test	local08, #64 wz
2187c     2C 01 90 5D |  if_ne	jmp	#LR__3549
21880     14 2F E2 F8 | 	getbyte	local09, local06, #0
21884     40 2E CE F7 | 	test	local09, #64 wz
21888     30 00 90 AD |  if_e	jmp	#LR__3543
2188c     1C 1E 06 F1 | 	add	local01, #28
21890     0F 2F 02 FB | 	rdlong	local09, local01
21894     0D 2E 06 F1 | 	add	local09, #13
21898     17 23 C2 FA | 	rdbyte	local03, local09
2189c     14 29 E2 F8 | 	getbyte	local06, local06, #0
218a0     BF 28 06 F5 | 	and	local06, #191
218a4     14 25 02 F6 | 	mov	local04, local06
218a8     0C 1E 86 F1 | 	sub	local01, #12
218ac     0F 2F 02 FB | 	rdlong	local09, local01
218b0     1C 1E 06 F1 | 	add	local01, #28
218b4     0F 2F 62 FC | 	wrlong	local09, local01
218b8     2C 1E 86 F1 | 	sub	local01, #44
218bc                 | LR__3543
218bc     14 31 E2 F8 | 	getbyte	local10, local06, #0
218c0     12 2B E2 F8 | 	getbyte	local07, local04, #0
218c4     15 31 0A F2 | 	cmp	local10, local07 wz
218c8     5C 00 90 5D |  if_ne	jmp	#LR__3544
218cc     11 2D E2 F8 | 	getbyte	local08, local03, #0
218d0     1C 1E 06 F1 | 	add	local01, #28
218d4     0F 2B 02 FB | 	rdlong	local07, local01
218d8     1C 1E 86 F1 | 	sub	local01, #28
218dc     0D 2A 06 F1 | 	add	local07, #13
218e0     15 29 C2 FA | 	rdbyte	local06, local07
218e4     14 2B E2 F8 | 	getbyte	local07, local06, #0
218e8     15 2D 0A F2 | 	cmp	local08, local07 wz
218ec     38 00 90 5D |  if_ne	jmp	#LR__3544
218f0     0C 20 06 F1 | 	add	local02, #12
218f4     10 13 02 FB | 	rdlong	arg01, local02
218f8     0C 20 86 F1 | 	sub	local02, #12
218fc     1C 1E 06 F1 | 	add	local01, #28
21900     0F 33 02 FB | 	rdlong	local11, local01
21904     1C 1E 86 F1 | 	sub	local01, #28
21908     19 15 02 F6 | 	mov	arg02, local11
2190c     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
21910     00 FA 4D F2 | 	cmps	result1, #0 wz
21914     12 33 02 56 |  if_ne	mov	local11, local04
21918     19 33 E2 58 |  if_ne	getbyte	local11, local11, #0
2191c     01 32 86 51 |  if_ne	sub	local11, #1
21920     19 2F 02 56 |  if_ne	mov	local09, local11
21924     04 00 90 5D |  if_ne	jmp	#LR__3545
21928                 | LR__3544
21928     FF 2E 06 F6 | 	mov	local09, #255
2192c                 | LR__3545
2192c     17 25 02 F6 | 	mov	local04, local09
21930     78 00 90 FD | 	jmp	#LR__3549
21934                 | LR__3546
21934     12 2F 02 F6 | 	mov	local09, local04
21938     07 2E 4E F7 | 	zerox	local09, #7 wz
2193c     20 00 90 5D |  if_ne	jmp	#LR__3547
21940     11 31 E2 F8 | 	getbyte	local10, local03, #0
21944     1C 1E 06 F1 | 	add	local01, #28
21948     0F 13 02 FB | 	rdlong	arg01, local01
2194c     1C 1E 86 F1 | 	sub	local01, #28
21950     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
21954     FD FA E1 F8 | 	getbyte	result1, result1, #0
21958     FD 30 0A F2 | 	cmp	local10, result1 wz
2195c     60 00 90 AD |  if_e	jmp	#LR__3551
21960                 | LR__3547
21960     2B 1E 06 F1 | 	add	local01, #43
21964     0F 2F C2 FA | 	rdbyte	local09, local01
21968     2B 1E 86 F1 | 	sub	local01, #43
2196c     01 2E CE F7 | 	test	local09, #1 wz
21970     24 00 90 5D |  if_ne	jmp	#LR__3548
21974     1C 1E 06 F1 | 	add	local01, #28
21978     0F 13 02 FB | 	rdlong	arg01, local01
2197c     04 1E 06 F1 | 	add	local01, #4
21980     0F 15 02 F6 | 	mov	arg02, local01
21984     20 1E 86 F1 | 	sub	local01, #32
21988     0B 16 06 F6 | 	mov	arg03, #11
2198c     88 DA BF FD | 	call	#_fatfs_cc_memcmp
21990     00 FA 0D F2 | 	cmp	result1, #0 wz
21994     28 00 90 AD |  if_e	jmp	#LR__3551
21998                 | LR__3548
21998     FF 24 06 F6 | 	mov	local04, #255
2199c     2C 1E 06 F1 | 	add	local01, #44
219a0     FF FF FF FF 
219a4     0F FF 6B FC | 	wrlong	##-1, local01
219a8     2C 1E 86 F1 | 	sub	local01, #44
219ac                 | LR__3549
219ac                 | LR__3550
219ac     0F 13 02 F6 | 	mov	arg01, local01
219b0     00 14 06 F6 | 	mov	arg02, #0
219b4     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
219b8     FD 26 0A F6 | 	mov	local05, result1 wz
219bc     04 FE 9F AD |  if_e	jmp	#LR__3540
219c0                 | LR__3551
219c0                 | ' 
219c0                 | ' 	return res;
219c0     13 FB 01 F6 | 	mov	result1, local05
219c4                 | LR__3552
219c4     A7 F0 03 F6 | 	mov	ptra, fp
219c8     B2 00 A0 FD | 	call	#popregs_
219cc                 | _fatfs_cc_dir_find_ret
219cc     2D 00 64 FD | 	ret
219d0                 | 
219d0                 | _fatfs_cc_dir_register
219d0     0A 4A 05 F6 | 	mov	COUNT_, #10
219d4     A8 00 A0 FD | 	call	#pushregs_
219d8     2C F0 07 F1 | 	add	ptra, #44
219dc     04 4E 05 F1 | 	add	fp, #4
219e0     A7 12 62 FC | 	wrlong	arg01, fp
219e4     09 1F 02 FB | 	rdlong	local01, arg01
219e8     08 4E 05 F1 | 	add	fp, #8
219ec     A7 1E 62 FC | 	wrlong	local01, fp
219f0     08 4E 85 F1 | 	sub	fp, #8
219f4     A7 20 02 FB | 	rdlong	local02, fp
219f8     04 4E 85 F1 | 	sub	fp, #4
219fc     2B 20 06 F1 | 	add	local02, #43
21a00     10 21 C2 FA | 	rdbyte	local02, local02
21a04     A0 20 CE F7 | 	test	local02, #160 wz
21a08     06 FA 05 56 |  if_ne	mov	result1, #6
21a0c     F8 03 90 5D |  if_ne	jmp	#LR__3575
21a10                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
21a10     14 4E 05 F1 | 	add	fp, #20
21a14     A7 00 68 FC | 	wrlong	#0, fp
21a18     14 4E 85 F1 | 	sub	fp, #20
21a1c     97 28 48 FB | 	callpa	#(@LR__3561-@LR__3560)>>2,fcache_load_ptr_
21a20                 | LR__3560
21a20     0C 4E 05 F1 | 	add	fp, #12
21a24     A7 20 02 FB | 	rdlong	local02, fp
21a28     0C 20 06 F1 | 	add	local02, #12
21a2c     10 23 02 FB | 	rdlong	local03, local02
21a30     08 4E 05 F1 | 	add	fp, #8
21a34     A7 24 02 FB | 	rdlong	local04, fp
21a38     14 4E 85 F1 | 	sub	fp, #20
21a3c     01 24 66 F0 | 	shl	local04, #1
21a40     11 25 02 F1 | 	add	local04, local03
21a44     12 21 EA FA | 	rdword	local02, local04 wz
21a48     24 00 90 AD |  if_e	jmp	#LR__3562
21a4c     14 4E 05 F1 | 	add	fp, #20
21a50     A7 26 02 FB | 	rdlong	local05, fp
21a54     13 29 02 F6 | 	mov	local06, local05
21a58     13 2B 02 F6 | 	mov	local07, local05
21a5c     15 2D 02 F6 | 	mov	local08, local07
21a60     01 2C 06 F1 | 	add	local08, #1
21a64     A7 2C 62 FC | 	wrlong	local08, fp
21a68     14 4E 85 F1 | 	sub	fp, #20
21a6c     B0 FF 9F FD | 	jmp	#LR__3560
21a70                 | LR__3561
21a70                 | LR__3562
21a70     1C 4E 05 F1 | 	add	fp, #28
21a74     A7 12 02 F6 | 	mov	arg01, fp
21a78     18 4E 85 F1 | 	sub	fp, #24
21a7c     A7 14 02 FB | 	rdlong	arg02, fp
21a80     04 4E 85 F1 | 	sub	fp, #4
21a84     20 14 06 F1 | 	add	arg02, #32
21a88     0C 16 06 F6 | 	mov	arg03, #12
21a8c     08 72 BF FD | 	call	#__system____builtin_memmove
21a90     27 4E 05 F1 | 	add	fp, #39
21a94     A7 2E C2 FA | 	rdbyte	local09, fp
21a98     27 4E 85 F1 | 	sub	fp, #39
21a9c     01 2E CE F7 | 	test	local09, #1 wz
21aa0     F4 00 90 AD |  if_e	jmp	#LR__3565
21aa4     04 4E 05 F1 | 	add	fp, #4
21aa8     A7 30 02 FB | 	rdlong	local10, fp
21aac     2B 30 06 F1 | 	add	local10, #43
21ab0     18 81 48 FC | 	wrbyte	#64, local10
21ab4                 | ' 		dp->fn[ 11 ] =  0x40 ;
21ab4                 | ' 		for (n = 1; n < 100; n++) {
21ab4     0C 4E 05 F1 | 	add	fp, #12
21ab8     A7 02 68 FC | 	wrlong	#1, fp
21abc     10 4E 85 F1 | 	sub	fp, #16
21ac0                 | LR__3563
21ac0     10 4E 05 F1 | 	add	fp, #16
21ac4     A7 20 02 FB | 	rdlong	local02, fp
21ac8     10 4E 85 F1 | 	sub	fp, #16
21acc     64 20 16 F2 | 	cmp	local02, #100 wc
21ad0     70 00 90 3D |  if_ae	jmp	#LR__3564
21ad4     04 4E 05 F1 | 	add	fp, #4
21ad8     A7 12 02 FB | 	rdlong	arg01, fp
21adc     20 12 06 F1 | 	add	arg01, #32
21ae0     18 4E 05 F1 | 	add	fp, #24
21ae4     A7 14 02 F6 | 	mov	arg02, fp
21ae8     10 4E 85 F1 | 	sub	fp, #16
21aec     A7 30 02 FB | 	rdlong	local10, fp
21af0     0C 30 06 F1 | 	add	local10, #12
21af4     18 17 02 FB | 	rdlong	arg03, local10
21af8     04 4E 05 F1 | 	add	fp, #4
21afc     A7 18 02 FB | 	rdlong	arg04, fp
21b00     10 4E 85 F1 | 	sub	fp, #16
21b04     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
21b08     04 4E 05 F1 | 	add	fp, #4
21b0c     A7 12 02 FB | 	rdlong	arg01, fp
21b10     04 4E 85 F1 | 	sub	fp, #4
21b14     70 FC BF FD | 	call	#_fatfs_cc_dir_find
21b18     08 4E 05 F1 | 	add	fp, #8
21b1c     A7 FA 61 FC | 	wrlong	result1, fp
21b20     00 FA 4D F2 | 	cmps	result1, #0 wz
21b24     08 4E 85 F1 | 	sub	fp, #8
21b28     18 00 90 5D |  if_ne	jmp	#LR__3564
21b2c     10 4E 05 F1 | 	add	fp, #16
21b30     A7 30 02 FB | 	rdlong	local10, fp
21b34     01 30 06 F1 | 	add	local10, #1
21b38     A7 30 62 FC | 	wrlong	local10, fp
21b3c     10 4E 85 F1 | 	sub	fp, #16
21b40     7C FF 9F FD | 	jmp	#LR__3563
21b44                 | LR__3564
21b44     10 4E 05 F1 | 	add	fp, #16
21b48     A7 30 02 FB | 	rdlong	local10, fp
21b4c     10 4E 85 F1 | 	sub	fp, #16
21b50     64 30 0E F2 | 	cmp	local10, #100 wz
21b54     07 FA 05 A6 |  if_e	mov	result1, #7
21b58     AC 02 90 AD |  if_e	jmp	#LR__3575
21b5c     08 4E 05 F1 | 	add	fp, #8
21b60     A7 30 02 FB | 	rdlong	local10, fp
21b64     08 4E 85 F1 | 	sub	fp, #8
21b68     04 30 0E F2 | 	cmp	local10, #4 wz
21b6c     08 4E 05 51 |  if_ne	add	fp, #8
21b70     A7 FA 01 5B |  if_ne	rdlong	result1, fp
21b74     08 4E 85 51 |  if_ne	sub	fp, #8
21b78     8C 02 90 5D |  if_ne	jmp	#LR__3575
21b7c     04 4E 05 F1 | 	add	fp, #4
21b80     A7 30 02 FB | 	rdlong	local10, fp
21b84     23 4E 05 F1 | 	add	fp, #35
21b88     A7 1E C2 FA | 	rdbyte	local01, fp
21b8c     27 4E 85 F1 | 	sub	fp, #39
21b90     2B 30 06 F1 | 	add	local10, #43
21b94     18 1F 42 FC | 	wrbyte	local01, local10
21b98                 | LR__3565
21b98     27 4E 05 F1 | 	add	fp, #39
21b9c     A7 20 C2 FA | 	rdbyte	local02, fp
21ba0     27 4E 85 F1 | 	sub	fp, #39
21ba4     02 20 CE F7 | 	test	local02, #2 wz
21ba8     20 00 90 AD |  if_e	jmp	#LR__3566
21bac     14 4E 05 F1 | 	add	fp, #20
21bb0     A7 30 02 FB | 	rdlong	local10, fp
21bb4     0C 30 06 F1 | 	add	local10, #12
21bb8     0D 30 16 FD | 	qdiv	local10, #13
21bbc     14 4E 85 F1 | 	sub	fp, #20
21bc0     18 30 62 FD | 	getqx	local10
21bc4     01 30 06 F1 | 	add	local10, #1
21bc8     04 00 90 FD | 	jmp	#LR__3567
21bcc                 | LR__3566
21bcc     01 30 06 F6 | 	mov	local10, #1
21bd0                 | LR__3567
21bd0     18 4E 05 F1 | 	add	fp, #24
21bd4     A7 30 62 FC | 	wrlong	local10, fp
21bd8     14 4E 85 F1 | 	sub	fp, #20
21bdc     A7 12 02 FB | 	rdlong	arg01, fp
21be0     18 15 02 F6 | 	mov	arg02, local10
21be4     04 4E 85 F1 | 	sub	fp, #4
21be8     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
21bec     08 4E 05 F1 | 	add	fp, #8
21bf0     A7 FA 61 FC | 	wrlong	result1, fp
21bf4     08 4E 85 F1 | 	sub	fp, #8
21bf8     00 FA 0D F2 | 	cmp	result1, #0 wz
21bfc     38 01 90 5D |  if_ne	jmp	#LR__3572
21c00     18 4E 05 F1 | 	add	fp, #24
21c04     A7 30 02 FB | 	rdlong	local10, fp
21c08     01 30 8E F1 | 	sub	local10, #1 wz
21c0c     A7 30 62 FC | 	wrlong	local10, fp
21c10     18 4E 85 F1 | 	sub	fp, #24
21c14     20 01 90 AD |  if_e	jmp	#LR__3572
21c18     04 4E 05 F1 | 	add	fp, #4
21c1c     A7 30 02 FB | 	rdlong	local10, fp
21c20     18 13 02 F6 | 	mov	arg01, local10
21c24     14 4E 05 F1 | 	add	fp, #20
21c28     A7 18 02 FB | 	rdlong	arg04, fp
21c2c     18 4E 85 F1 | 	sub	fp, #24
21c30     05 18 66 F0 | 	shl	arg04, #5
21c34     10 30 06 F1 | 	add	local10, #16
21c38     18 15 02 FB | 	rdlong	arg02, local10
21c3c     0C 15 82 F1 | 	sub	arg02, arg04
21c40     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
21c44     08 4E 05 F1 | 	add	fp, #8
21c48     A7 FA 61 FC | 	wrlong	result1, fp
21c4c     08 4E 85 F1 | 	sub	fp, #8
21c50     00 FA 0D F2 | 	cmp	result1, #0 wz
21c54     E0 00 90 5D |  if_ne	jmp	#LR__3571
21c58     04 4E 05 F1 | 	add	fp, #4
21c5c     A7 12 02 FB | 	rdlong	arg01, fp
21c60     04 4E 85 F1 | 	sub	fp, #4
21c64     20 12 06 F1 | 	add	arg01, #32
21c68     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
21c6c     FD 30 02 F6 | 	mov	local10, result1
21c70     28 4E 05 F1 | 	add	fp, #40
21c74     A7 30 42 FC | 	wrbyte	local10, fp
21c78     28 4E 85 F1 | 	sub	fp, #40
21c7c                 | ' 			sum = sum_sfn(dp->fn);
21c7c                 | ' 			do {
21c7c                 | LR__3568
21c7c     0C 4E 05 F1 | 	add	fp, #12
21c80     A7 12 02 FB | 	rdlong	arg01, fp
21c84     08 4E 85 F1 | 	sub	fp, #8
21c88     A7 1E 02 FB | 	rdlong	local01, fp
21c8c     04 4E 85 F1 | 	sub	fp, #4
21c90     18 1E 06 F1 | 	add	local01, #24
21c94     0F 15 02 FB | 	rdlong	arg02, local01
21c98     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
21c9c     08 4E 05 F1 | 	add	fp, #8
21ca0     A7 FA 61 FC | 	wrlong	result1, fp
21ca4     00 FA 4D F2 | 	cmps	result1, #0 wz
21ca8     08 4E 85 F1 | 	sub	fp, #8
21cac     88 00 90 5D |  if_ne	jmp	#LR__3570
21cb0     0C 4E 05 F1 | 	add	fp, #12
21cb4     A7 20 02 FB | 	rdlong	local02, fp
21cb8     0C 20 06 F1 | 	add	local02, #12
21cbc     10 13 02 FB | 	rdlong	arg01, local02
21cc0     08 4E 85 F1 | 	sub	fp, #8
21cc4     A7 1E 02 FB | 	rdlong	local01, fp
21cc8     1C 1E 06 F1 | 	add	local01, #28
21ccc     0F 15 02 FB | 	rdlong	arg02, local01
21cd0     14 4E 05 F1 | 	add	fp, #20
21cd4     A7 16 02 FB | 	rdlong	arg03, fp
21cd8     10 4E 05 F1 | 	add	fp, #16
21cdc     A7 18 C2 FA | 	rdbyte	arg04, fp
21ce0     28 4E 85 F1 | 	sub	fp, #40
21ce4     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
21ce8     0C 4E 05 F1 | 	add	fp, #12
21cec     A7 30 02 FB | 	rdlong	local10, fp
21cf0     03 30 06 F1 | 	add	local10, #3
21cf4     18 03 48 FC | 	wrbyte	#1, local10
21cf8     08 4E 85 F1 | 	sub	fp, #8
21cfc     A7 12 02 FB | 	rdlong	arg01, fp
21d00     04 4E 85 F1 | 	sub	fp, #4
21d04     00 14 06 F6 | 	mov	arg02, #0
21d08     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
21d0c     08 4E 05 F1 | 	add	fp, #8
21d10     A7 FA 61 FC | 	wrlong	result1, fp
21d14     00 FA 4D F2 | 	cmps	result1, #0 wz
21d18     08 4E 85 F1 | 	sub	fp, #8
21d1c     18 00 90 5D |  if_ne	jmp	#LR__3569
21d20     18 4E 05 F1 | 	add	fp, #24
21d24     A7 30 02 FB | 	rdlong	local10, fp
21d28     01 30 8E F1 | 	sub	local10, #1 wz
21d2c     A7 30 62 FC | 	wrlong	local10, fp
21d30     18 4E 85 F1 | 	sub	fp, #24
21d34     44 FF 9F 5D |  if_ne	jmp	#LR__3568
21d38                 | LR__3569
21d38                 | LR__3570
21d38                 | LR__3571
21d38                 | LR__3572
21d38     08 4E 05 F1 | 	add	fp, #8
21d3c     A7 30 0A FB | 	rdlong	local10, fp wz
21d40     08 4E 85 F1 | 	sub	fp, #8
21d44     B4 00 90 5D |  if_ne	jmp	#LR__3574
21d48     0C 4E 05 F1 | 	add	fp, #12
21d4c     A7 12 02 FB | 	rdlong	arg01, fp
21d50     08 4E 85 F1 | 	sub	fp, #8
21d54     A7 1E 02 FB | 	rdlong	local01, fp
21d58     04 4E 85 F1 | 	sub	fp, #4
21d5c     18 1E 06 F1 | 	add	local01, #24
21d60     0F 15 02 FB | 	rdlong	arg02, local01
21d64     18 E6 BF FD | 	call	#_fatfs_cc_move_window
21d68     08 4E 05 F1 | 	add	fp, #8
21d6c     A7 FA 61 FC | 	wrlong	result1, fp
21d70     08 4E 85 F1 | 	sub	fp, #8
21d74     00 FA 0D F2 | 	cmp	result1, #0 wz
21d78     80 00 90 5D |  if_ne	jmp	#LR__3573
21d7c     04 4E 05 F1 | 	add	fp, #4
21d80     A7 20 02 FB | 	rdlong	local02, fp
21d84     04 4E 85 F1 | 	sub	fp, #4
21d88     1C 20 06 F1 | 	add	local02, #28
21d8c     10 13 02 FB | 	rdlong	arg01, local02
21d90     00 14 06 F6 | 	mov	arg02, #0
21d94     20 16 06 F6 | 	mov	arg03, #32
21d98     98 00 A0 FD | 	call	#\builtin_bytefill_
21d9c     04 4E 05 F1 | 	add	fp, #4
21da0     A7 14 02 FB | 	rdlong	arg02, fp
21da4     0A 1F 02 F6 | 	mov	local01, arg02
21da8     1C 1E 06 F1 | 	add	local01, #28
21dac     0F 13 02 FB | 	rdlong	arg01, local01
21db0     04 4E 85 F1 | 	sub	fp, #4
21db4     20 14 06 F1 | 	add	arg02, #32
21db8     0B 16 06 F6 | 	mov	arg03, #11
21dbc     D8 6E BF FD | 	call	#__system____builtin_memmove
21dc0     04 4E 05 F1 | 	add	fp, #4
21dc4     A7 2E 02 FB | 	rdlong	local09, fp
21dc8     17 31 02 F6 | 	mov	local10, local09
21dcc     1C 30 06 F1 | 	add	local10, #28
21dd0     18 1F 02 FB | 	rdlong	local01, local10
21dd4     2B 2E 06 F1 | 	add	local09, #43
21dd8     17 31 C2 FA | 	rdbyte	local10, local09
21ddc     18 30 06 F5 | 	and	local10, #24
21de0     0C 1E 06 F1 | 	add	local01, #12
21de4     0F 31 42 FC | 	wrbyte	local10, local01
21de8     08 4E 05 F1 | 	add	fp, #8
21dec     A7 30 02 FB | 	rdlong	local10, fp
21df0     0C 4E 85 F1 | 	sub	fp, #12
21df4     03 30 06 F1 | 	add	local10, #3
21df8     18 03 48 FC | 	wrbyte	#1, local10
21dfc                 | LR__3573
21dfc                 | LR__3574
21dfc                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
21dfc                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
21dfc                 | ' 
21dfc                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
21dfc                 | ' 
21dfc                 | ' 			fs->wflag = 1;
21dfc                 | ' 		}
21dfc                 | ' 	}
21dfc                 | ' 
21dfc                 | ' 	return res;
21dfc     08 4E 05 F1 | 	add	fp, #8
21e00     A7 FA 01 FB | 	rdlong	result1, fp
21e04     08 4E 85 F1 | 	sub	fp, #8
21e08                 | LR__3575
21e08     A7 F0 03 F6 | 	mov	ptra, fp
21e0c     B2 00 A0 FD | 	call	#popregs_
21e10                 | _fatfs_cc_dir_register_ret
21e10     2D 00 64 FD | 	ret
21e14                 | 
21e14                 | _fatfs_cc_dir_remove
21e14     05 4A 05 F6 | 	mov	COUNT_, #5
21e18     A8 00 A0 FD | 	call	#pushregs_
21e1c     09 1F 02 F6 | 	mov	local01, arg01
21e20     0F 21 02 FB | 	rdlong	local02, local01
21e24     10 1E 06 F1 | 	add	local01, #16
21e28     0F 23 02 FB | 	rdlong	local03, local01
21e2c     1C 1E 06 F1 | 	add	local01, #28
21e30     0F 15 02 FB | 	rdlong	arg02, local01
21e34     2C 1E 86 F1 | 	sub	local01, #44
21e38     FF FF 7F FF 
21e3c     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
21e40     00 24 06 A6 |  if_e	mov	local04, #0
21e44     18 00 90 AD |  if_e	jmp	#LR__3580
21e48     0F 13 02 F6 | 	mov	arg01, local01
21e4c     2C 1E 06 F1 | 	add	local01, #44
21e50     0F 15 02 FB | 	rdlong	arg02, local01
21e54     2C 1E 86 F1 | 	sub	local01, #44
21e58     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
21e5c     FD 24 02 F6 | 	mov	local04, result1
21e60                 | LR__3580
21e60     12 27 0A F6 | 	mov	local05, local04 wz
21e64     64 00 90 5D |  if_ne	jmp	#LR__3583
21e68                 | ' 		do {
21e68                 | LR__3581
21e68     18 1E 06 F1 | 	add	local01, #24
21e6c     0F 15 02 FB | 	rdlong	arg02, local01
21e70     18 1E 86 F1 | 	sub	local01, #24
21e74     10 13 02 F6 | 	mov	arg01, local02
21e78     04 E5 BF FD | 	call	#_fatfs_cc_move_window
21e7c     FD 26 0A F6 | 	mov	local05, result1 wz
21e80     40 00 90 5D |  if_ne	jmp	#LR__3582
21e84     1C 1E 06 F1 | 	add	local01, #28
21e88     0F 25 02 FB | 	rdlong	local04, local01
21e8c     12 CB 49 FC | 	wrbyte	#229, local04
21e90     03 20 06 F1 | 	add	local02, #3
21e94     10 03 48 FC | 	wrbyte	#1, local02
21e98     03 20 86 F1 | 	sub	local02, #3
21e9c     0C 1E 86 F1 | 	sub	local01, #12
21ea0     0F 25 02 FB | 	rdlong	local04, local01
21ea4     10 1E 86 F1 | 	sub	local01, #16
21ea8     11 25 12 F2 | 	cmp	local04, local03 wc
21eac     14 00 90 3D |  if_ae	jmp	#LR__3582
21eb0     0F 13 02 F6 | 	mov	arg01, local01
21eb4     00 14 06 F6 | 	mov	arg02, #0
21eb8     90 EF BF FD | 	call	#_fatfs_cc_dir_next
21ebc     FD 26 0A F6 | 	mov	local05, result1 wz
21ec0     A4 FF 9F AD |  if_e	jmp	#LR__3581
21ec4                 | LR__3582
21ec4     04 26 0E F2 | 	cmp	local05, #4 wz
21ec8     02 26 06 A6 |  if_e	mov	local05, #2
21ecc                 | LR__3583
21ecc                 | ' 	}
21ecc                 | ' #line 2590 "ff.c"
21ecc                 | ' 	return res;
21ecc     13 FB 01 F6 | 	mov	result1, local05
21ed0     A7 F0 03 F6 | 	mov	ptra, fp
21ed4     B2 00 A0 FD | 	call	#popregs_
21ed8                 | _fatfs_cc_dir_remove_ret
21ed8     2D 00 64 FD | 	ret
21edc                 | 
21edc                 | _fatfs_cc_get_fileinfo
21edc     0F 4A 05 F6 | 	mov	COUNT_, #15
21ee0     A8 00 A0 FD | 	call	#pushregs_
21ee4     09 1F 02 F6 | 	mov	local01, arg01
21ee8     0A 21 02 F6 | 	mov	local02, arg02
21eec     0F 23 02 FB | 	rdlong	local03, local01
21ef0     1C 20 06 F1 | 	add	local02, #28
21ef4     10 01 48 FC | 	wrbyte	#0, local02
21ef8     1C 20 86 F1 | 	sub	local02, #28
21efc     18 1E 06 F1 | 	add	local01, #24
21f00     0F 25 0A FB | 	rdlong	local04, local01 wz
21f04     18 1E 86 F1 | 	sub	local01, #24
21f08     90 03 90 AD |  if_e	jmp	#LR__3604
21f0c     2C 1E 06 F1 | 	add	local01, #44
21f10     0F 25 02 FB | 	rdlong	local04, local01
21f14     2C 1E 86 F1 | 	sub	local01, #44
21f18     FF FF 7F FF 
21f1c     FF 25 0E F2 | 	cmp	local04, ##-1 wz
21f20     D8 00 90 AD |  if_e	jmp	#LR__3593
21f24     00 26 06 F6 | 	mov	local05, #0
21f28     00 28 06 F6 | 	mov	local06, #0
21f2c     00 2A 06 F6 | 	mov	local07, #0
21f30                 | ' 			si = di = 0;
21f30                 | ' 			hs = 0;
21f30                 | ' 			while (fs->lfnbuf[si] != 0) {
21f30                 | LR__3590
21f30     0C 22 06 F1 | 	add	local03, #12
21f34     11 25 02 FB | 	rdlong	local04, local03
21f38     0C 22 86 F1 | 	sub	local03, #12
21f3c     14 2D 02 F6 | 	mov	local08, local06
21f40     01 2C 66 F0 | 	shl	local08, #1
21f44     12 2D 02 F1 | 	add	local08, local04
21f48     16 25 EA FA | 	rdword	local04, local08 wz
21f4c     90 00 90 AD |  if_e	jmp	#LR__3592
21f50     0C 22 06 F1 | 	add	local03, #12
21f54     11 2F 02 FB | 	rdlong	local09, local03
21f58     0C 22 86 F1 | 	sub	local03, #12
21f5c     14 31 02 F6 | 	mov	local10, local06
21f60     01 30 66 F0 | 	shl	local10, #1
21f64     17 31 02 F1 | 	add	local10, local09
21f68     18 33 E2 FA | 	rdword	local11, local10
21f6c     15 25 02 F6 | 	mov	local04, local07
21f70     0F 24 4E F7 | 	zerox	local04, #15 wz
21f74     01 28 06 F1 | 	add	local06, #1
21f78     24 00 90 5D |  if_ne	jmp	#LR__3591
21f7c     19 35 32 F9 | 	getword	local12, local11, #0
21f80     6C 00 00 FF 
21f84     00 34 16 F2 | 	cmp	local12, ##55296 wc
21f88     14 00 90 CD |  if_b	jmp	#LR__3591
21f8c     19 37 32 F9 | 	getword	local13, local11, #0
21f90     70 00 00 FF 
21f94     00 36 16 F2 | 	cmp	local13, ##57344 wc
21f98     19 2B 02 C6 |  if_b	mov	local07, local11
21f9c                 | ' 					hs = wc; continue;
21f9c     90 FF 9F CD |  if_b	jmp	#LR__3590
21fa0                 | LR__3591
21fa0     15 13 32 F9 | 	getword	arg01, local07, #0
21fa4     10 12 66 F0 | 	shl	arg01, #16
21fa8     19 33 32 F9 | 	getword	local11, local11, #0
21fac     19 13 42 F5 | 	or	arg01, local11
21fb0     13 15 02 F6 | 	mov	arg02, local05
21fb4     1C 20 06 F1 | 	add	local02, #28
21fb8     10 15 02 F1 | 	add	arg02, local02
21fbc     FF 16 06 F6 | 	mov	arg03, #255
21fc0     13 17 82 F1 | 	sub	arg03, local05
21fc4     1C 20 86 F1 | 	sub	local02, #28
21fc8     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
21fcc     FD 38 0A F6 | 	mov	local14, result1 wz
21fd0     00 26 06 A6 |  if_e	mov	local05, #0
21fd4     1C 27 02 51 |  if_ne	add	local05, local14
21fd8     00 2A 06 56 |  if_ne	mov	local07, #0
21fdc     50 FF 9F 5D |  if_ne	jmp	#LR__3590
21fe0                 | LR__3592
21fe0     15 25 02 F6 | 	mov	local04, local07
21fe4     0F 24 4E F7 | 	zerox	local04, #15 wz
21fe8     00 26 06 56 |  if_ne	mov	local05, #0
21fec     1C 20 06 F1 | 	add	local02, #28
21ff0     10 27 02 F1 | 	add	local05, local02
21ff4     13 01 48 FC | 	wrbyte	#0, local05
21ff8     1C 20 86 F1 | 	sub	local02, #28
21ffc                 | LR__3593
21ffc     00 26 06 F6 | 	mov	local05, #0
22000     00 28 06 F6 | 	mov	local06, #0
22004                 | ' 			fno->fname[di] = 0;
22004                 | ' 		}
22004                 | ' 	}
22004                 | ' 
22004                 | ' 	si = di = 0;
22004                 | ' 	while (si < 11) {
22004                 | LR__3594
22004     0B 28 16 F2 | 	cmp	local06, #11 wc
22008     20 01 90 3D |  if_ae	jmp	#LR__3597
2200c     1C 1E 06 F1 | 	add	local01, #28
22010     0F 2F 02 FB | 	rdlong	local09, local01
22014     1C 1E 86 F1 | 	sub	local01, #28
22018     14 31 02 F6 | 	mov	local10, local06
2201c     17 31 02 F1 | 	add	local10, local09
22020     18 33 C2 FA | 	rdbyte	local11, local10
22024     19 25 32 F9 | 	getword	local04, local11, #0
22028     20 24 0E F2 | 	cmp	local04, #32 wz
2202c     01 28 06 F1 | 	add	local06, #1
22030     D0 FF 9F AD |  if_e	jmp	#LR__3594
22034     19 25 32 F9 | 	getword	local04, local11, #0
22038     05 24 0E F2 | 	cmp	local04, #5 wz
2203c     E5 32 06 A6 |  if_e	mov	local11, #229
22040     09 28 0E F2 | 	cmp	local06, #9 wz
22044     20 00 90 5D |  if_ne	jmp	#LR__3595
22048     0C 26 16 F2 | 	cmp	local05, #12 wc
2204c     18 00 90 3D |  if_ae	jmp	#LR__3595
22050     13 37 02 F6 | 	mov	local13, local05
22054     0C 20 06 F1 | 	add	local02, #12
22058     10 37 02 F1 | 	add	local13, local02
2205c     1B 5D 48 FC | 	wrbyte	#46, local13
22060     01 26 06 F1 | 	add	local05, #1
22064     0C 20 86 F1 | 	sub	local02, #12
22068                 | LR__3595
22068     19 13 32 F9 | 	getword	arg01, local11, #0
2206c     07 12 4E F7 | 	zerox	arg01, #7 wz
22070     00 FA 05 56 |  if_ne	mov	result1, #0
22074                 | ' 
22074                 | ' 	return 0;
22074     00 FA 05 A6 |  if_e	mov	result1, #0
22078     00 FA 0D F2 | 	cmp	result1, #0 wz
2207c     08 28 0E 52 |  if_ne	cmp	local06, #8 wz
22080     0B 28 0E 52 |  if_ne	cmp	local06, #11 wz
22084     50 00 90 AD |  if_e	jmp	#LR__3596
22088     1C 1E 06 F1 | 	add	local01, #28
2208c     0F 31 02 FB | 	rdlong	local10, local01
22090     1C 1E 86 F1 | 	sub	local01, #28
22094     14 2D 02 F6 | 	mov	local08, local06
22098     18 2D 02 F1 | 	add	local08, local10
2209c     16 13 CA FA | 	rdbyte	arg01, local08 wz
220a0     00 FA 05 56 |  if_ne	mov	result1, #0
220a4                 | ' 
220a4                 | ' 	return 0;
220a4     00 FA 05 A6 |  if_e	mov	result1, #0
220a8     00 FA 0D F2 | 	cmp	result1, #0 wz
220ac     28 00 90 AD |  if_e	jmp	#LR__3596
220b0     19 33 32 F9 | 	getword	local11, local11, #0
220b4     08 32 66 F0 | 	shl	local11, #8
220b8     1C 1E 06 F1 | 	add	local01, #28
220bc     0F 39 02 FB | 	rdlong	local14, local01
220c0     1C 1E 86 F1 | 	sub	local01, #28
220c4     14 2F 02 F6 | 	mov	local09, local06
220c8     1C 2F 02 F1 | 	add	local09, local14
220cc     17 35 C2 FA | 	rdbyte	local12, local09
220d0     1A 33 42 F5 | 	or	local11, local12
220d4     01 28 06 F1 | 	add	local06, #1
220d8                 | LR__3596
220d8     19 13 02 F6 | 	mov	arg01, local11
220dc     01 00 00 FF 
220e0     52 15 06 F6 | 	mov	arg02, ##850
220e4     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
220e8     FD 32 02 F6 | 	mov	local11, result1
220ec     19 25 02 F6 | 	mov	local04, local11
220f0     0F 24 4E F7 | 	zerox	local04, #15 wz
220f4     00 26 06 A6 |  if_e	mov	local05, #0
220f8     30 00 90 AD |  if_e	jmp	#LR__3597
220fc     19 13 32 F9 | 	getword	arg01, local11, #0
22100     13 15 02 F6 | 	mov	arg02, local05
22104     0C 20 06 F1 | 	add	local02, #12
22108     10 15 02 F1 | 	add	arg02, local02
2210c     0C 16 06 F6 | 	mov	arg03, #12
22110     13 17 82 F1 | 	sub	arg03, local05
22114     0C 20 86 F1 | 	sub	local02, #12
22118     EC DF BF FD | 	call	#_fatfs_cc_put_utf
2211c     FD 38 0A F6 | 	mov	local14, result1 wz
22120     00 26 06 A6 |  if_e	mov	local05, #0
22124     1C 27 02 51 |  if_ne	add	local05, local14
22128     D8 FE 9F 5D |  if_ne	jmp	#LR__3594
2212c                 | LR__3597
2212c     13 25 02 F6 | 	mov	local04, local05
22130     0C 20 06 F1 | 	add	local02, #12
22134     10 25 02 F1 | 	add	local04, local02
22138     12 01 48 FC | 	wrbyte	#0, local04
2213c     10 20 06 F1 | 	add	local02, #16
22140     10 25 CA FA | 	rdbyte	local04, local02 wz
22144     1C 20 86 F1 | 	sub	local02, #28
22148     F8 00 90 5D |  if_ne	jmp	#LR__3603
2214c     00 26 0E F2 | 	cmp	local05, #0 wz
22150     1C 00 90 5D |  if_ne	jmp	#LR__3598
22154     13 37 02 F6 | 	mov	local13, local05
22158     1C 20 06 F1 | 	add	local02, #28
2215c     10 37 02 F1 | 	add	local13, local02
22160     1B 7F 48 FC | 	wrbyte	#63, local13
22164     01 26 06 F1 | 	add	local05, #1
22168     1C 20 86 F1 | 	sub	local02, #28
2216c     A4 00 90 FD | 	jmp	#LR__3602
22170                 | LR__3598
22170                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
22170     00 26 06 F6 | 	mov	local05, #0
22174     00 28 06 F6 | 	mov	local06, #0
22178     08 3A 06 F6 | 	mov	local15, #8
2217c                 | LR__3599
2217c     14 25 02 F6 | 	mov	local04, local06
22180     0C 20 06 F1 | 	add	local02, #12
22184     10 25 02 F1 | 	add	local04, local02
22188     12 37 CA FA | 	rdbyte	local13, local04 wz
2218c     0C 20 86 F1 | 	sub	local02, #12
22190     80 00 90 AD |  if_e	jmp	#LR__3601
22194     14 2D 02 F6 | 	mov	local08, local06
22198     0C 20 06 F1 | 	add	local02, #12
2219c     10 2D 02 F1 | 	add	local08, local02
221a0     16 33 C2 FA | 	rdbyte	local11, local08
221a4     19 39 32 F9 | 	getword	local14, local11, #0
221a8     2E 38 0E F2 | 	cmp	local14, #46 wz
221ac     0C 20 86 F1 | 	sub	local02, #12
221b0     10 3A 06 A6 |  if_e	mov	local15, #16
221b4     19 39 32 F9 | 	getword	local14, local11, #0
221b8     41 38 16 F2 | 	cmp	local14, #65 wc
221bc     30 00 90 CD |  if_b	jmp	#LR__3600
221c0     19 2D 32 F9 | 	getword	local08, local11, #0
221c4     5B 2C 16 F2 | 	cmp	local08, #91 wc
221c8     24 00 90 3D |  if_ae	jmp	#LR__3600
221cc     1C 1E 06 F1 | 	add	local01, #28
221d0     0F 2F 02 FB | 	rdlong	local09, local01
221d4     1C 1E 86 F1 | 	sub	local01, #28
221d8     0C 2E 06 F1 | 	add	local09, #12
221dc     17 31 C2 FA | 	rdbyte	local10, local09
221e0     1D 39 E2 F8 | 	getbyte	local14, local15, #0
221e4     1C 31 CA F7 | 	test	local10, local14 wz
221e8     19 33 32 59 |  if_ne	getword	local11, local11, #0
221ec     20 32 06 51 |  if_ne	add	local11, #32
221f0                 | LR__3600
221f0     13 39 02 F6 | 	mov	local14, local05
221f4     1C 20 06 F1 | 	add	local02, #28
221f8     10 39 02 F1 | 	add	local14, local02
221fc     19 33 32 F9 | 	getword	local11, local11, #0
22200     1C 33 42 FC | 	wrbyte	local11, local14
22204     01 28 06 F1 | 	add	local06, #1
22208     01 26 06 F1 | 	add	local05, #1
2220c     1C 20 86 F1 | 	sub	local02, #28
22210     68 FF 9F FD | 	jmp	#LR__3599
22214                 | LR__3601
22214                 | LR__3602
22214     1C 20 06 F1 | 	add	local02, #28
22218     10 27 02 F1 | 	add	local05, local02
2221c     13 01 48 FC | 	wrbyte	#0, local05
22220     1C 1E 06 F1 | 	add	local01, #28
22224     0F 25 02 FB | 	rdlong	local04, local01
22228     1C 1E 86 F1 | 	sub	local01, #28
2222c     0C 24 06 F1 | 	add	local04, #12
22230     12 37 CA FA | 	rdbyte	local13, local04 wz
22234     1C 20 86 F1 | 	sub	local02, #28
22238     0C 20 06 A1 |  if_e	add	local02, #12
2223c     10 01 48 AC |  if_e	wrbyte	#0, local02
22240     0C 20 86 A1 |  if_e	sub	local02, #12
22244                 | LR__3603
22244     1C 1E 06 F1 | 	add	local01, #28
22248     0F 35 02 FB | 	rdlong	local12, local01
2224c     0B 34 06 F1 | 	add	local12, #11
22250     1A 25 C2 FA | 	rdbyte	local04, local12
22254     3F 24 06 F5 | 	and	local04, #63
22258     08 20 06 F1 | 	add	local02, #8
2225c     10 25 42 FC | 	wrbyte	local04, local02
22260     08 20 86 F1 | 	sub	local02, #8
22264     0F 13 02 FB | 	rdlong	arg01, local01
22268     1C 12 06 F1 | 	add	arg01, #28
2226c                 | ' {
2226c                 | ' 
2226c                 | ' 	return *((DWORD*)ptr);
2226c     09 FB 01 FB | 	rdlong	result1, arg01
22270     10 FB 61 FC | 	wrlong	result1, local02
22274     0F 13 02 FB | 	rdlong	arg01, local01
22278     16 12 06 F1 | 	add	arg01, #22
2227c                 | ' {
2227c                 | ' 
2227c                 | ' 	return *((WORD*)ptr);
2227c     09 FB E1 FA | 	rdword	result1, arg01
22280     06 20 06 F1 | 	add	local02, #6
22284     10 FB 51 FC | 	wrword	result1, local02
22288     0F 13 02 FB | 	rdlong	arg01, local01
2228c     18 12 06 F1 | 	add	arg01, #24
22290                 | ' {
22290                 | ' 
22290                 | ' 	return *((WORD*)ptr);
22290     09 FB E1 FA | 	rdword	result1, arg01
22294     02 20 86 F1 | 	sub	local02, #2
22298     10 FB 51 FC | 	wrword	result1, local02
2229c                 | LR__3604
2229c     A7 F0 03 F6 | 	mov	ptra, fp
222a0     B2 00 A0 FD | 	call	#popregs_
222a4                 | _fatfs_cc_get_fileinfo_ret
222a4     2D 00 64 FD | 	ret
222a8                 | 
222a8                 | _fatfs_cc_create_name
222a8     0D 4A 05 F6 | 	mov	COUNT_, #13
222ac     A8 00 A0 FD | 	call	#pushregs_
222b0     34 F0 07 F1 | 	add	ptra, #52
222b4     04 4E 05 F1 | 	add	fp, #4
222b8     A7 12 62 FC | 	wrlong	arg01, fp
222bc     04 4E 05 F1 | 	add	fp, #4
222c0     A7 14 62 FC | 	wrlong	arg02, fp
222c4     0A FB 01 FB | 	rdlong	result1, arg02
222c8     28 4E 05 F1 | 	add	fp, #40
222cc     A7 FA 61 FC | 	wrlong	result1, fp
222d0     2C 4E 85 F1 | 	sub	fp, #44
222d4     A7 FA 01 FB | 	rdlong	result1, fp
222d8     FD 1E 02 FB | 	rdlong	local01, result1
222dc     0C 1E 06 F1 | 	add	local01, #12
222e0     0F 21 02 FB | 	rdlong	local02, local01
222e4     14 4E 05 F1 | 	add	fp, #20
222e8     A7 20 62 FC | 	wrlong	local02, fp
222ec     14 4E 05 F1 | 	add	fp, #20
222f0     A7 00 68 FC | 	wrlong	#0, fp
222f4     2C 4E 85 F1 | 	sub	fp, #44
222f8                 | ' 
222f8                 | ' 
222f8                 | ' 
222f8                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
222f8                 | ' 	for (;;) {
222f8                 | LR__3610
222f8     30 4E 05 F1 | 	add	fp, #48
222fc     A7 12 02 F6 | 	mov	arg01, fp
22300     30 4E 85 F1 | 	sub	fp, #48
22304     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
22308     1C 4E 05 F1 | 	add	fp, #28
2230c     A7 FA 61 FC | 	wrlong	result1, fp
22310     1C 4E 85 F1 | 	sub	fp, #28
22314     FF FF 7F FF 
22318     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2231c     06 FA 05 A6 |  if_e	mov	result1, #6
22320     74 08 90 AD |  if_e	jmp	#LR__3650
22324     1C 4E 05 F1 | 	add	fp, #28
22328     A7 1E 02 FB | 	rdlong	local01, fp
2232c     1C 4E 85 F1 | 	sub	fp, #28
22330     80 00 00 FF 
22334     00 1E 16 F2 | 	cmp	local01, ##65536 wc
22338     3C 00 90 CD |  if_b	jmp	#LR__3611
2233c     18 4E 05 F1 | 	add	fp, #24
22340     A7 22 02 FB | 	rdlong	local03, fp
22344     14 4E 05 F1 | 	add	fp, #20
22348     A7 1E 02 FB | 	rdlong	local01, fp
2234c     0F 25 02 F6 | 	mov	local04, local01
22350     01 24 06 F1 | 	add	local04, #1
22354     A7 24 62 FC | 	wrlong	local04, fp
22358     01 1E 66 F0 | 	shl	local01, #1
2235c     11 1F 02 F1 | 	add	local01, local03
22360     10 4E 85 F1 | 	sub	fp, #16
22364     A7 26 02 FB | 	rdlong	local05, fp
22368     1C 4E 85 F1 | 	sub	fp, #28
2236c     13 29 02 F6 | 	mov	local06, local05
22370     10 28 46 F0 | 	shr	local06, #16
22374     0F 29 52 FC | 	wrword	local06, local01
22378                 | LR__3611
22378     1C 4E 05 F1 | 	add	fp, #28
2237c     A7 1E 02 FB | 	rdlong	local01, fp
22380     08 4E 85 F1 | 	sub	fp, #8
22384     A7 1E 52 FC | 	wrword	local01, fp
22388     A7 1E E2 FA | 	rdword	local01, fp
2238c     14 4E 85 F1 | 	sub	fp, #20
22390     20 1E 16 F2 | 	cmp	local01, #32 wc
22394     B0 00 90 CD |  if_b	jmp	#LR__3613
22398     14 4E 05 F1 | 	add	fp, #20
2239c     A7 1E E2 FA | 	rdword	local01, fp
223a0     14 4E 85 F1 | 	sub	fp, #20
223a4     2F 1E 0E F2 | 	cmp	local01, #47 wz
223a8     14 4E 05 51 |  if_ne	add	fp, #20
223ac     A7 24 E2 5A |  if_ne	rdword	local04, fp
223b0     14 4E 85 51 |  if_ne	sub	fp, #20
223b4     5C 24 0E 52 |  if_ne	cmp	local04, #92 wz
223b8     8C 00 90 AD |  if_e	jmp	#LR__3613
223bc     14 4E 05 F1 | 	add	fp, #20
223c0     A7 12 E2 FA | 	rdword	arg01, fp
223c4     14 4E 85 F1 | 	sub	fp, #20
223c8     80 12 16 F2 | 	cmp	arg01, #128 wc
223cc     24 00 90 3D |  if_ae	jmp	#LR__3612
223d0     41 01 00 FF 
223d4     F8 12 06 F6 | 	mov	arg01, ##@LR__4272
223d8     14 4E 05 F1 | 	add	fp, #20
223dc     A7 14 E2 FA | 	rdword	arg02, fp
223e0     14 4E 85 F1 | 	sub	fp, #20
223e4     FC D0 BF FD | 	call	#_fatfs_cc_strchr
223e8     00 FA 0D F2 | 	cmp	result1, #0 wz
223ec     06 FA 05 56 |  if_ne	mov	result1, #6
223f0     A4 07 90 5D |  if_ne	jmp	#LR__3650
223f4                 | LR__3612
223f4     2C 4E 05 F1 | 	add	fp, #44
223f8     A7 28 02 FB | 	rdlong	local06, fp
223fc     2C 4E 85 F1 | 	sub	fp, #44
22400     FF 28 16 F2 | 	cmp	local06, #255 wc
22404     06 FA 05 36 |  if_ae	mov	result1, #6
22408     8C 07 90 3D |  if_ae	jmp	#LR__3650
2240c     18 4E 05 F1 | 	add	fp, #24
22410     A7 22 02 FB | 	rdlong	local03, fp
22414     14 4E 05 F1 | 	add	fp, #20
22418     A7 20 02 FB | 	rdlong	local02, fp
2241c     10 25 02 F6 | 	mov	local04, local02
22420     01 24 06 F1 | 	add	local04, #1
22424     A7 24 62 FC | 	wrlong	local04, fp
22428     10 1F 02 F6 | 	mov	local01, local02
2242c     01 1E 66 F0 | 	shl	local01, #1
22430     11 1F 02 F1 | 	add	local01, local03
22434     18 4E 85 F1 | 	sub	fp, #24
22438     A7 28 E2 FA | 	rdword	local06, fp
2243c     14 4E 85 F1 | 	sub	fp, #20
22440     0F 29 52 FC | 	wrword	local06, local01
22444     B0 FE 9F FD | 	jmp	#LR__3610
22448                 | LR__3613
22448     14 4E 05 F1 | 	add	fp, #20
2244c     A7 2A E2 FA | 	rdword	local07, fp
22450     14 4E 85 F1 | 	sub	fp, #20
22454     20 2A 16 F2 | 	cmp	local07, #32 wc
22458     10 4E 05 C1 |  if_b	add	fp, #16
2245c     A7 08 48 CC |  if_b	wrbyte	#4, fp
22460     10 4E 85 C1 |  if_b	sub	fp, #16
22464     74 00 90 CD |  if_b	jmp	#LR__3618
22468     97 24 48 FB | 	callpa	#(@LR__3616-@LR__3614)>>2,fcache_load_ptr_
2246c                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
2246c                 | LR__3614
2246c     30 4E 05 F1 | 	add	fp, #48
22470     A7 24 02 FB | 	rdlong	local04, fp
22474     30 4E 85 F1 | 	sub	fp, #48
22478     12 2B C2 FA | 	rdbyte	local07, local04
2247c     2F 2A 0E F2 | 	cmp	local07, #47 wz
22480     18 00 90 AD |  if_e	jmp	#LR__3615
22484     30 4E 05 F1 | 	add	fp, #48
22488     A7 24 02 FB | 	rdlong	local04, fp
2248c     30 4E 85 F1 | 	sub	fp, #48
22490     12 21 C2 FA | 	rdbyte	local02, local04
22494     5C 20 0E F2 | 	cmp	local02, #92 wz
22498     18 00 90 5D |  if_ne	jmp	#LR__3617
2249c                 | LR__3615
2249c     30 4E 05 F1 | 	add	fp, #48
224a0     A7 1E 02 FB | 	rdlong	local01, fp
224a4     01 1E 06 F1 | 	add	local01, #1
224a8     A7 1E 62 FC | 	wrlong	local01, fp
224ac     30 4E 85 F1 | 	sub	fp, #48
224b0     B8 FF 9F FD | 	jmp	#LR__3614
224b4                 | LR__3616
224b4                 | LR__3617
224b4     10 4E 05 F1 | 	add	fp, #16
224b8     A7 00 48 FC | 	wrbyte	#0, fp
224bc     20 4E 05 F1 | 	add	fp, #32
224c0     A7 28 02 FB | 	rdlong	local06, fp
224c4     30 4E 85 F1 | 	sub	fp, #48
224c8     14 2B C2 FA | 	rdbyte	local07, local06
224cc     20 2A 16 F2 | 	cmp	local07, #32 wc
224d0     10 4E 05 C1 |  if_b	add	fp, #16
224d4     A7 08 48 CC |  if_b	wrbyte	#4, fp
224d8     10 4E 85 C1 |  if_b	sub	fp, #16
224dc                 | LR__3618
224dc     08 4E 05 F1 | 	add	fp, #8
224e0     A7 2A 02 FB | 	rdlong	local07, fp
224e4     28 4E 05 F1 | 	add	fp, #40
224e8     A7 1E 02 FB | 	rdlong	local01, fp
224ec     30 4E 85 F1 | 	sub	fp, #48
224f0     15 1F 62 FC | 	wrlong	local01, local07
224f4     97 38 48 FB | 	callpa	#(@LR__3620-@LR__3619)>>2,fcache_load_ptr_
224f8                 | ' 	}
224f8                 | ' 	*path = p;
224f8                 | ' #line 2862 "ff.c"
224f8                 | ' 	while (di) {
224f8                 | LR__3619
224f8     2C 4E 05 F1 | 	add	fp, #44
224fc     A7 2A 0A FB | 	rdlong	local07, fp wz
22500     2C 4E 85 F1 | 	sub	fp, #44
22504     60 00 90 AD |  if_e	jmp	#LR__3621
22508     18 4E 05 F1 | 	add	fp, #24
2250c     A7 28 02 FB | 	rdlong	local06, fp
22510     14 4E 05 F1 | 	add	fp, #20
22514     A7 24 02 FB | 	rdlong	local04, fp
22518     01 24 86 F1 | 	sub	local04, #1
2251c     01 24 66 F0 | 	shl	local04, #1
22520     14 25 02 F1 | 	add	local04, local06
22524     12 29 E2 FA | 	rdword	local06, local04
22528     18 4E 85 F1 | 	sub	fp, #24
2252c     A7 28 52 FC | 	wrword	local06, fp
22530     A7 2A E2 FA | 	rdword	local07, fp
22534     14 4E 85 F1 | 	sub	fp, #20
22538     20 2A 0E F2 | 	cmp	local07, #32 wz
2253c     14 4E 05 51 |  if_ne	add	fp, #20
22540     A7 1E E2 5A |  if_ne	rdword	local01, fp
22544     14 4E 85 51 |  if_ne	sub	fp, #20
22548     2E 1E 0E 52 |  if_ne	cmp	local01, #46 wz
2254c     18 00 90 5D |  if_ne	jmp	#LR__3621
22550     2C 4E 05 F1 | 	add	fp, #44
22554     A7 1E 02 FB | 	rdlong	local01, fp
22558     01 1E 86 F1 | 	sub	local01, #1
2255c     A7 1E 62 FC | 	wrlong	local01, fp
22560     2C 4E 85 F1 | 	sub	fp, #44
22564     90 FF 9F FD | 	jmp	#LR__3619
22568                 | LR__3620
22568                 | LR__3621
22568     18 4E 05 F1 | 	add	fp, #24
2256c     A7 2C 02 FB | 	rdlong	local08, fp
22570     14 4E 05 F1 | 	add	fp, #20
22574     A7 24 02 FB | 	rdlong	local04, fp
22578     01 24 66 F0 | 	shl	local04, #1
2257c     16 25 02 F1 | 	add	local04, local08
22580     12 01 58 FC | 	wrword	#0, local04
22584     A7 2A 0A FB | 	rdlong	local07, fp wz
22588     2C 4E 85 F1 | 	sub	fp, #44
2258c     06 FA 05 A6 |  if_e	mov	result1, #6
22590     04 06 90 AD |  if_e	jmp	#LR__3650
22594                 | ' 
22594                 | ' 
22594                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
22594     28 4E 05 F1 | 	add	fp, #40
22598     A7 00 68 FC | 	wrlong	#0, fp
2259c     28 4E 85 F1 | 	sub	fp, #40
225a0     97 22 48 FB | 	callpa	#(@LR__3623-@LR__3622)>>2,fcache_load_ptr_
225a4                 | LR__3622
225a4     18 4E 05 F1 | 	add	fp, #24
225a8     A7 2E 02 FB | 	rdlong	local09, fp
225ac     10 4E 05 F1 | 	add	fp, #16
225b0     A7 30 02 FB | 	rdlong	local10, fp
225b4     28 4E 85 F1 | 	sub	fp, #40
225b8     01 30 66 F0 | 	shl	local10, #1
225bc     17 31 02 F1 | 	add	local10, local09
225c0     18 33 E2 FA | 	rdword	local11, local10
225c4     20 32 0E F2 | 	cmp	local11, #32 wz
225c8     1C 00 90 5D |  if_ne	jmp	#LR__3624
225cc     28 4E 05 F1 | 	add	fp, #40
225d0     A7 34 02 FB | 	rdlong	local12, fp
225d4     1A 27 02 F6 | 	mov	local05, local12
225d8     01 26 06 F1 | 	add	local05, #1
225dc     A7 26 62 FC | 	wrlong	local05, fp
225e0     28 4E 85 F1 | 	sub	fp, #40
225e4     BC FF 9F FD | 	jmp	#LR__3622
225e8                 | LR__3623
225e8                 | LR__3624
225e8     28 4E 05 F1 | 	add	fp, #40
225ec     A7 2A 02 FB | 	rdlong	local07, fp
225f0     28 4E 85 F1 | 	sub	fp, #40
225f4     01 2A 16 F2 | 	cmp	local07, #1 wc
225f8     28 00 90 3D |  if_ae	jmp	#LR__3625
225fc     18 4E 05 F1 | 	add	fp, #24
22600     A7 22 02 FB | 	rdlong	local03, fp
22604     10 4E 05 F1 | 	add	fp, #16
22608     A7 2E 02 FB | 	rdlong	local09, fp
2260c     28 4E 85 F1 | 	sub	fp, #40
22610     01 2E 66 F0 | 	shl	local09, #1
22614     11 2F 02 F1 | 	add	local09, local03
22618     17 1F E2 FA | 	rdword	local01, local09
2261c     2E 1E 0E F2 | 	cmp	local01, #46 wz
22620     14 00 90 5D |  if_ne	jmp	#LR__3626
22624                 | LR__3625
22624     10 4E 05 F1 | 	add	fp, #16
22628     A7 2A C2 FA | 	rdbyte	local07, fp
2262c     03 2A 46 F5 | 	or	local07, #3
22630     A7 2A 42 FC | 	wrbyte	local07, fp
22634     10 4E 85 F1 | 	sub	fp, #16
22638                 | LR__3626
22638     97 2C 48 FB | 	callpa	#(@LR__3628-@LR__3627)>>2,fcache_load_ptr_
2263c                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
2263c                 | LR__3627
2263c     2C 4E 05 F1 | 	add	fp, #44
22640     A7 2A 02 FB | 	rdlong	local07, fp
22644     2C 4E 85 F1 | 	sub	fp, #44
22648     01 2A 16 F2 | 	cmp	local07, #1 wc
2264c     44 00 90 CD |  if_b	jmp	#LR__3629
22650     18 4E 05 F1 | 	add	fp, #24
22654     A7 28 02 FB | 	rdlong	local06, fp
22658     14 4E 05 F1 | 	add	fp, #20
2265c     A7 22 02 FB | 	rdlong	local03, fp
22660     2C 4E 85 F1 | 	sub	fp, #44
22664     01 22 86 F1 | 	sub	local03, #1
22668     01 22 66 F0 | 	shl	local03, #1
2266c     14 23 02 F1 | 	add	local03, local06
22670     11 1F E2 FA | 	rdword	local01, local03
22674     2E 1E 0E F2 | 	cmp	local01, #46 wz
22678     18 00 90 AD |  if_e	jmp	#LR__3629
2267c     2C 4E 05 F1 | 	add	fp, #44
22680     A7 1E 02 FB | 	rdlong	local01, fp
22684     01 1E 86 F1 | 	sub	local01, #1
22688     A7 1E 62 FC | 	wrlong	local01, fp
2268c     2C 4E 85 F1 | 	sub	fp, #44
22690     A8 FF 9F FD | 	jmp	#LR__3627
22694                 | LR__3628
22694                 | LR__3629
22694     04 4E 05 F1 | 	add	fp, #4
22698     A7 12 02 FB | 	rdlong	arg01, fp
2269c     04 4E 85 F1 | 	sub	fp, #4
226a0     20 12 06 F1 | 	add	arg01, #32
226a4     20 14 06 F6 | 	mov	arg02, #32
226a8     0B 16 06 F6 | 	mov	arg03, #11
226ac     09 37 02 F6 | 	mov	local13, arg01
226b0     98 00 A0 FD | 	call	#\builtin_bytefill_
226b4     1B FB 01 F6 | 	mov	result1, local13
226b8     0C 4E 05 F1 | 	add	fp, #12
226bc     A7 00 48 FC | 	wrbyte	#0, fp
226c0     A7 2A C2 FA | 	rdbyte	local07, fp
226c4     14 4E 05 F1 | 	add	fp, #20
226c8     A7 2A 62 FC | 	wrlong	local07, fp
226cc     04 4E 05 F1 | 	add	fp, #4
226d0     A7 10 68 FC | 	wrlong	#8, fp
226d4     24 4E 85 F1 | 	sub	fp, #36
226d8                 | ' 
226d8                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
226d8                 | ' 	i = b = 0; ni = 8;
226d8                 | ' 	for (;;) {
226d8                 | LR__3630
226d8     18 4E 05 F1 | 	add	fp, #24
226dc     A7 22 02 FB | 	rdlong	local03, fp
226e0     10 4E 05 F1 | 	add	fp, #16
226e4     A7 2E 02 FB | 	rdlong	local09, fp
226e8     17 25 02 F6 | 	mov	local04, local09
226ec     01 24 06 F1 | 	add	local04, #1
226f0     A7 24 62 FC | 	wrlong	local04, fp
226f4     01 2E 66 F0 | 	shl	local09, #1
226f8     11 2F 02 F1 | 	add	local09, local03
226fc     17 29 E2 FA | 	rdword	local06, local09
22700     14 4E 85 F1 | 	sub	fp, #20
22704     A7 28 52 FC | 	wrword	local06, fp
22708     A7 2A EA FA | 	rdword	local07, fp wz
2270c     14 4E 85 F1 | 	sub	fp, #20
22710     74 03 90 AD |  if_e	jmp	#LR__3646
22714     14 4E 05 F1 | 	add	fp, #20
22718     A7 2A E2 FA | 	rdword	local07, fp
2271c     14 4E 85 F1 | 	sub	fp, #20
22720     20 2A 0E F2 | 	cmp	local07, #32 wz
22724     30 00 90 AD |  if_e	jmp	#LR__3631
22728     14 4E 05 F1 | 	add	fp, #20
2272c     A7 1E E2 FA | 	rdword	local01, fp
22730     14 4E 85 F1 | 	sub	fp, #20
22734     2E 1E 0E F2 | 	cmp	local01, #46 wz
22738     34 00 90 5D |  if_ne	jmp	#LR__3632
2273c     28 4E 05 F1 | 	add	fp, #40
22740     A7 24 02 FB | 	rdlong	local04, fp
22744     04 4E 05 F1 | 	add	fp, #4
22748     A7 30 02 FB | 	rdlong	local10, fp
2274c     2C 4E 85 F1 | 	sub	fp, #44
22750     18 25 0A F2 | 	cmp	local04, local10 wz
22754     18 00 90 AD |  if_e	jmp	#LR__3632
22758                 | LR__3631
22758     10 4E 05 F1 | 	add	fp, #16
2275c     A7 2A C2 FA | 	rdbyte	local07, fp
22760     03 2A 46 F5 | 	or	local07, #3
22764     A7 2A 42 FC | 	wrbyte	local07, fp
22768     10 4E 85 F1 | 	sub	fp, #16
2276c                 | ' 			cf |=  0x01  |  0x02 ;
2276c                 | ' 			continue;
2276c     68 FF 9F FD | 	jmp	#LR__3630
22770                 | LR__3632
22770     20 4E 05 F1 | 	add	fp, #32
22774     A7 2A 02 FB | 	rdlong	local07, fp
22778     04 4E 05 F1 | 	add	fp, #4
2277c     A7 1E 02 FB | 	rdlong	local01, fp
22780     24 4E 85 F1 | 	sub	fp, #36
22784     0F 2B 12 F2 | 	cmp	local07, local01 wc
22788     1C 00 90 3D |  if_ae	jmp	#LR__3633
2278c     28 4E 05 F1 | 	add	fp, #40
22790     A7 2C 02 FB | 	rdlong	local08, fp
22794     04 4E 05 F1 | 	add	fp, #4
22798     A7 30 02 FB | 	rdlong	local10, fp
2279c     2C 4E 85 F1 | 	sub	fp, #44
227a0     18 2D 0A F2 | 	cmp	local08, local10 wz
227a4     B0 00 90 5D |  if_ne	jmp	#LR__3635
227a8                 | LR__3633
227a8     24 4E 05 F1 | 	add	fp, #36
227ac     A7 2A 02 FB | 	rdlong	local07, fp
227b0     24 4E 85 F1 | 	sub	fp, #36
227b4     0B 2A 0E F2 | 	cmp	local07, #11 wz
227b8     18 00 90 5D |  if_ne	jmp	#LR__3634
227bc     10 4E 05 F1 | 	add	fp, #16
227c0     A7 2A C2 FA | 	rdbyte	local07, fp
227c4     03 2A 46 F5 | 	or	local07, #3
227c8     A7 2A 42 FC | 	wrbyte	local07, fp
227cc     10 4E 85 F1 | 	sub	fp, #16
227d0                 | ' 				cf |=  0x01  |  0x02 ;
227d0                 | ' 				break;
227d0     B4 02 90 FD | 	jmp	#LR__3646
227d4                 | LR__3634
227d4     28 4E 05 F1 | 	add	fp, #40
227d8     A7 2A 02 FB | 	rdlong	local07, fp
227dc     04 4E 05 F1 | 	add	fp, #4
227e0     A7 1E 02 FB | 	rdlong	local01, fp
227e4     2C 4E 85 F1 | 	sub	fp, #44
227e8     0F 2B 0A F2 | 	cmp	local07, local01 wz
227ec     10 4E 05 51 |  if_ne	add	fp, #16
227f0     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
227f4     03 2A 46 55 |  if_ne	or	local07, #3
227f8     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
227fc     10 4E 85 51 |  if_ne	sub	fp, #16
22800     28 4E 05 F1 | 	add	fp, #40
22804     A7 2A 02 FB | 	rdlong	local07, fp
22808     04 4E 05 F1 | 	add	fp, #4
2280c     A7 20 02 FB | 	rdlong	local02, fp
22810     2C 4E 85 F1 | 	sub	fp, #44
22814     10 2B 1A F2 | 	cmp	local07, local02 wcz
22818     6C 02 90 1D |  if_a	jmp	#LR__3646
2281c     2C 4E 05 F1 | 	add	fp, #44
22820     A7 2A 02 FB | 	rdlong	local07, fp
22824     04 4E 85 F1 | 	sub	fp, #4
22828     A7 2A 62 FC | 	wrlong	local07, fp
2282c     08 4E 85 F1 | 	sub	fp, #8
22830     A7 10 68 FC | 	wrlong	#8, fp
22834     04 4E 05 F1 | 	add	fp, #4
22838     A7 16 68 FC | 	wrlong	#11, fp
2283c     18 4E 85 F1 | 	sub	fp, #24
22840     A7 32 C2 FA | 	rdbyte	local11, fp
22844     19 2B E2 F8 | 	getbyte	local07, local11, #0
22848     02 2A 66 F0 | 	shl	local07, #2
2284c     A7 2A 42 FC | 	wrbyte	local07, fp
22850     0C 4E 85 F1 | 	sub	fp, #12
22854                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
22854                 | ' 			continue;
22854     80 FE 9F FD | 	jmp	#LR__3630
22858                 | LR__3635
22858     14 4E 05 F1 | 	add	fp, #20
2285c     A7 2A E2 FA | 	rdword	local07, fp
22860     14 4E 85 F1 | 	sub	fp, #20
22864     80 2A 16 F2 | 	cmp	local07, #128 wc
22868     6C 00 90 CD |  if_b	jmp	#LR__3637
2286c     10 4E 05 F1 | 	add	fp, #16
22870     A7 2A C2 FA | 	rdbyte	local07, fp
22874     02 2A 46 F5 | 	or	local07, #2
22878     A7 2A 42 FC | 	wrbyte	local07, fp
2287c     04 4E 05 F1 | 	add	fp, #4
22880     A7 12 E2 FA | 	rdword	arg01, fp
22884     14 4E 85 F1 | 	sub	fp, #20
22888     01 00 00 FF 
2288c     52 15 06 F6 | 	mov	arg02, ##850
22890     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
22894     14 4E 05 F1 | 	add	fp, #20
22898     A7 FA 51 FC | 	wrword	result1, fp
2289c     A7 2A E2 FA | 	rdword	local07, fp
228a0     14 4E 85 F1 | 	sub	fp, #20
228a4     80 2A CE F7 | 	test	local07, #128 wz
228a8     2C 00 90 AD |  if_e	jmp	#LR__3636
228ac     14 4E 05 F1 | 	add	fp, #20
228b0     A7 20 E2 FA | 	rdword	local02, fp
228b4     7F 20 06 F5 | 	and	local02, #127
228b8     01 00 00 FF 
228bc     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
228c0     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
228c4     10 2B C2 FA | 	rdbyte	local07, local02
228c8     A7 2A 52 FC | 	wrword	local07, fp
228cc     14 4E 85 F1 | 	sub	fp, #20
228d0     01 00 00 FF 
228d4     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
228d8                 | LR__3636
228d8                 | LR__3637
228d8     14 4E 05 F1 | 	add	fp, #20
228dc     A7 2A E2 FA | 	rdword	local07, fp
228e0     14 4E 85 F1 | 	sub	fp, #20
228e4     00 2B 16 F2 | 	cmp	local07, #256 wc
228e8     88 00 90 CD |  if_b	jmp	#LR__3639
228ec     24 4E 05 F1 | 	add	fp, #36
228f0     A7 2A 02 FB | 	rdlong	local07, fp
228f4     01 2A 86 F1 | 	sub	local07, #1
228f8     04 4E 85 F1 | 	sub	fp, #4
228fc     A7 20 02 FB | 	rdlong	local02, fp
22900     20 4E 85 F1 | 	sub	fp, #32
22904     15 21 12 F2 | 	cmp	local02, local07 wc
22908     2C 00 90 CD |  if_b	jmp	#LR__3638
2290c     10 4E 05 F1 | 	add	fp, #16
22910     A7 32 C2 FA | 	rdbyte	local11, fp
22914     19 2B E2 F8 | 	getbyte	local07, local11, #0
22918     03 2A 46 F5 | 	or	local07, #3
2291c     A7 2A 42 FC | 	wrbyte	local07, fp
22920     14 4E 05 F1 | 	add	fp, #20
22924     A7 2A 02 FB | 	rdlong	local07, fp
22928     04 4E 85 F1 | 	sub	fp, #4
2292c     A7 2A 62 FC | 	wrlong	local07, fp
22930     20 4E 85 F1 | 	sub	fp, #32
22934                 | ' 				cf |=  0x01  |  0x02 ;
22934                 | ' 				i = ni; continue;
22934     A0 FD 9F FD | 	jmp	#LR__3630
22938                 | LR__3638
22938     04 4E 05 F1 | 	add	fp, #4
2293c     A7 2E 02 FB | 	rdlong	local09, fp
22940     1C 4E 05 F1 | 	add	fp, #28
22944     A7 30 02 FB | 	rdlong	local10, fp
22948     18 25 02 F6 | 	mov	local04, local10
2294c     01 24 06 F1 | 	add	local04, #1
22950     A7 24 62 FC | 	wrlong	local04, fp
22954     20 2E 06 F1 | 	add	local09, #32
22958     17 31 02 F1 | 	add	local10, local09
2295c     0C 4E 85 F1 | 	sub	fp, #12
22960     A7 22 E2 FA | 	rdword	local03, fp
22964     14 4E 85 F1 | 	sub	fp, #20
22968     08 22 46 F0 | 	shr	local03, #8
2296c     18 23 42 FC | 	wrbyte	local03, local10
22970     D4 00 90 FD | 	jmp	#LR__3645
22974                 | LR__3639
22974     14 4E 05 F1 | 	add	fp, #20
22978     A7 2A EA FA | 	rdword	local07, fp wz
2297c     14 4E 85 F1 | 	sub	fp, #20
22980     20 00 90 AD |  if_e	jmp	#LR__3640
22984     41 01 00 FF 
22988     01 13 06 F6 | 	mov	arg01, ##@LR__4273
2298c     14 4E 05 F1 | 	add	fp, #20
22990     A7 14 E2 FA | 	rdword	arg02, fp
22994     14 4E 85 F1 | 	sub	fp, #20
22998     48 CB BF FD | 	call	#_fatfs_cc_strchr
2299c     00 FA 0D F2 | 	cmp	result1, #0 wz
229a0     20 00 90 AD |  if_e	jmp	#LR__3641
229a4                 | LR__3640
229a4     14 4E 05 F1 | 	add	fp, #20
229a8     A7 BE 58 FC | 	wrword	#95, fp
229ac     04 4E 85 F1 | 	sub	fp, #4
229b0     A7 2A C2 FA | 	rdbyte	local07, fp
229b4     03 2A 46 F5 | 	or	local07, #3
229b8     A7 2A 42 FC | 	wrbyte	local07, fp
229bc     10 4E 85 F1 | 	sub	fp, #16
229c0     84 00 90 FD | 	jmp	#LR__3644
229c4                 | LR__3641
229c4     14 4E 05 F1 | 	add	fp, #20
229c8     A7 2A E2 FA | 	rdword	local07, fp
229cc     14 4E 85 F1 | 	sub	fp, #20
229d0     41 2A 16 F2 | 	cmp	local07, #65 wc
229d4     24 00 90 CD |  if_b	jmp	#LR__3642
229d8     14 4E 05 F1 | 	add	fp, #20
229dc     A7 1E E2 FA | 	rdword	local01, fp
229e0     14 4E 85 F1 | 	sub	fp, #20
229e4     5B 1E 16 F2 | 	cmp	local01, #91 wc
229e8     0C 4E 05 C1 |  if_b	add	fp, #12
229ec     A7 2A C2 CA |  if_b	rdbyte	local07, fp
229f0     02 2A 46 C5 |  if_b	or	local07, #2
229f4     A7 2A 42 CC |  if_b	wrbyte	local07, fp
229f8     0C 4E 85 C1 |  if_b	sub	fp, #12
229fc                 | LR__3642
229fc     14 4E 05 F1 | 	add	fp, #20
22a00     A7 2A E2 FA | 	rdword	local07, fp
22a04     14 4E 85 F1 | 	sub	fp, #20
22a08     61 2A 16 F2 | 	cmp	local07, #97 wc
22a0c     38 00 90 CD |  if_b	jmp	#LR__3643
22a10     14 4E 05 F1 | 	add	fp, #20
22a14     A7 1E E2 FA | 	rdword	local01, fp
22a18     14 4E 85 F1 | 	sub	fp, #20
22a1c     7B 1E 16 F2 | 	cmp	local01, #123 wc
22a20     24 00 90 3D |  if_ae	jmp	#LR__3643
22a24     0C 4E 05 F1 | 	add	fp, #12
22a28     A7 2A C2 FA | 	rdbyte	local07, fp
22a2c     01 2A 46 F5 | 	or	local07, #1
22a30     A7 2A 42 FC | 	wrbyte	local07, fp
22a34     08 4E 05 F1 | 	add	fp, #8
22a38     A7 2A E2 FA | 	rdword	local07, fp
22a3c     20 2A 86 F1 | 	sub	local07, #32
22a40     A7 2A 52 FC | 	wrword	local07, fp
22a44     14 4E 85 F1 | 	sub	fp, #20
22a48                 | LR__3643
22a48                 | LR__3644
22a48                 | LR__3645
22a48     04 4E 05 F1 | 	add	fp, #4
22a4c     A7 32 02 FB | 	rdlong	local11, fp
22a50     19 2F 02 F6 | 	mov	local09, local11
22a54     1C 4E 05 F1 | 	add	fp, #28
22a58     A7 20 02 FB | 	rdlong	local02, fp
22a5c     10 25 02 F6 | 	mov	local04, local02
22a60     01 24 06 F1 | 	add	local04, #1
22a64     A7 24 62 FC | 	wrlong	local04, fp
22a68     10 31 02 F6 | 	mov	local10, local02
22a6c     20 2E 06 F1 | 	add	local09, #32
22a70     17 31 02 F1 | 	add	local10, local09
22a74     0C 4E 85 F1 | 	sub	fp, #12
22a78     A7 22 E2 FA | 	rdword	local03, fp
22a7c     14 4E 85 F1 | 	sub	fp, #20
22a80     18 23 42 FC | 	wrbyte	local03, local10
22a84     50 FC 9F FD | 	jmp	#LR__3630
22a88                 | LR__3646
22a88     04 4E 05 F1 | 	add	fp, #4
22a8c     A7 32 02 FB | 	rdlong	local11, fp
22a90     04 4E 85 F1 | 	sub	fp, #4
22a94     20 32 06 F1 | 	add	local11, #32
22a98     19 2B C2 FA | 	rdbyte	local07, local11
22a9c     E5 2A 0E F2 | 	cmp	local07, #229 wz
22aa0     04 4E 05 A1 |  if_e	add	fp, #4
22aa4     A7 2A 02 AB |  if_e	rdlong	local07, fp
22aa8     04 4E 85 A1 |  if_e	sub	fp, #4
22aac     20 2A 06 A1 |  if_e	add	local07, #32
22ab0     15 0B 48 AC |  if_e	wrbyte	#5, local07
22ab4     24 4E 05 F1 | 	add	fp, #36
22ab8     A7 2A 02 FB | 	rdlong	local07, fp
22abc     24 4E 85 F1 | 	sub	fp, #36
22ac0     08 2A 0E F2 | 	cmp	local07, #8 wz
22ac4     0C 4E 05 A1 |  if_e	add	fp, #12
22ac8     A7 2A C2 AA |  if_e	rdbyte	local07, fp
22acc     02 2A 66 A0 |  if_e	shl	local07, #2
22ad0     A7 2A 42 AC |  if_e	wrbyte	local07, fp
22ad4     0C 4E 85 A1 |  if_e	sub	fp, #12
22ad8     0C 4E 05 F1 | 	add	fp, #12
22adc     A7 2A C2 FA | 	rdbyte	local07, fp
22ae0     0C 4E 85 F1 | 	sub	fp, #12
22ae4     0C 2A 06 F5 | 	and	local07, #12
22ae8     0C 2A 0E F2 | 	cmp	local07, #12 wz
22aec     18 00 90 AD |  if_e	jmp	#LR__3647
22af0     0C 4E 05 F1 | 	add	fp, #12
22af4     A7 1E C2 FA | 	rdbyte	local01, fp
22af8     0C 4E 85 F1 | 	sub	fp, #12
22afc     03 1E 06 F5 | 	and	local01, #3
22b00     03 1E 0E F2 | 	cmp	local01, #3 wz
22b04     14 00 90 5D |  if_ne	jmp	#LR__3648
22b08                 | LR__3647
22b08     10 4E 05 F1 | 	add	fp, #16
22b0c     A7 2A C2 FA | 	rdbyte	local07, fp
22b10     02 2A 46 F5 | 	or	local07, #2
22b14     A7 2A 42 FC | 	wrbyte	local07, fp
22b18     10 4E 85 F1 | 	sub	fp, #16
22b1c                 | LR__3648
22b1c     10 4E 05 F1 | 	add	fp, #16
22b20     A7 2A C2 FA | 	rdbyte	local07, fp
22b24     10 4E 85 F1 | 	sub	fp, #16
22b28     02 2A CE F7 | 	test	local07, #2 wz
22b2c     48 00 90 5D |  if_ne	jmp	#LR__3649
22b30     0C 4E 05 F1 | 	add	fp, #12
22b34     A7 2A C2 FA | 	rdbyte	local07, fp
22b38     0C 4E 85 F1 | 	sub	fp, #12
22b3c     01 2A CE F7 | 	test	local07, #1 wz
22b40     10 4E 05 51 |  if_ne	add	fp, #16
22b44     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
22b48     10 2A 46 55 |  if_ne	or	local07, #16
22b4c     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
22b50     10 4E 85 51 |  if_ne	sub	fp, #16
22b54     0C 4E 05 F1 | 	add	fp, #12
22b58     A7 2A C2 FA | 	rdbyte	local07, fp
22b5c     0C 4E 85 F1 | 	sub	fp, #12
22b60     04 2A CE F7 | 	test	local07, #4 wz
22b64     10 4E 05 51 |  if_ne	add	fp, #16
22b68     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
22b6c     08 2A 46 55 |  if_ne	or	local07, #8
22b70     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
22b74     10 4E 85 51 |  if_ne	sub	fp, #16
22b78                 | LR__3649
22b78     04 4E 05 F1 | 	add	fp, #4
22b7c     A7 2A 02 FB | 	rdlong	local07, fp
22b80     0C 4E 05 F1 | 	add	fp, #12
22b84     A7 1E C2 FA | 	rdbyte	local01, fp
22b88     10 4E 85 F1 | 	sub	fp, #16
22b8c     2B 2A 06 F1 | 	add	local07, #43
22b90     15 1F 42 FC | 	wrbyte	local01, local07
22b94                 | ' 	}
22b94                 | ' 
22b94                 | ' 	dp->fn[ 11 ] = cf;
22b94                 | ' 
22b94                 | ' 	return FR_OK;
22b94     00 FA 05 F6 | 	mov	result1, #0
22b98                 | LR__3650
22b98     A7 F0 03 F6 | 	mov	ptra, fp
22b9c     B2 00 A0 FD | 	call	#popregs_
22ba0                 | _fatfs_cc_create_name_ret
22ba0     2D 00 64 FD | 	ret
22ba4                 | 
22ba4                 | _fatfs_cc_follow_path
22ba4     02 4A 05 F6 | 	mov	COUNT_, #2
22ba8     A8 00 A0 FD | 	call	#pushregs_
22bac     18 F0 07 F1 | 	add	ptra, #24
22bb0     04 4E 05 F1 | 	add	fp, #4
22bb4     A7 12 62 FC | 	wrlong	arg01, fp
22bb8     04 4E 05 F1 | 	add	fp, #4
22bbc     A7 14 62 FC | 	wrlong	arg02, fp
22bc0     04 4E 85 F1 | 	sub	fp, #4
22bc4     A7 FA 01 FB | 	rdlong	result1, fp
22bc8     FD 1E 02 FB | 	rdlong	local01, result1
22bcc     10 4E 05 F1 | 	add	fp, #16
22bd0     A7 1E 62 FC | 	wrlong	local01, fp
22bd4     14 4E 85 F1 | 	sub	fp, #20
22bd8     97 24 48 FB | 	callpa	#(@LR__3662-@LR__3660)>>2,fcache_load_ptr_
22bdc                 | ' )
22bdc                 | ' {
22bdc                 | ' 	FRESULT res;
22bdc                 | ' 	BYTE ns;
22bdc                 | ' 	FATFS *fs = dp->obj.fs;
22bdc                 | ' #line 3034 "ff.c"
22bdc                 | ' 	{
22bdc                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
22bdc                 | LR__3660
22bdc     08 4E 05 F1 | 	add	fp, #8
22be0     A7 1E 02 FB | 	rdlong	local01, fp
22be4     08 4E 85 F1 | 	sub	fp, #8
22be8     0F 1F C2 FA | 	rdbyte	local01, local01
22bec     2F 1E 0E F2 | 	cmp	local01, #47 wz
22bf0     18 00 90 AD |  if_e	jmp	#LR__3661
22bf4     08 4E 05 F1 | 	add	fp, #8
22bf8     A7 1E 02 FB | 	rdlong	local01, fp
22bfc     08 4E 85 F1 | 	sub	fp, #8
22c00     0F 1F C2 FA | 	rdbyte	local01, local01
22c04     5C 1E 0E F2 | 	cmp	local01, #92 wz
22c08     18 00 90 5D |  if_ne	jmp	#LR__3663
22c0c                 | LR__3661
22c0c     08 4E 05 F1 | 	add	fp, #8
22c10     A7 1E 02 FB | 	rdlong	local01, fp
22c14     01 1E 06 F1 | 	add	local01, #1
22c18     A7 1E 62 FC | 	wrlong	local01, fp
22c1c     08 4E 85 F1 | 	sub	fp, #8
22c20     B8 FF 9F FD | 	jmp	#LR__3660
22c24                 | LR__3662
22c24                 | LR__3663
22c24     04 4E 05 F1 | 	add	fp, #4
22c28     A7 1E 02 FB | 	rdlong	local01, fp
22c2c     08 1E 06 F1 | 	add	local01, #8
22c30     0F 01 68 FC | 	wrlong	#0, local01
22c34     04 4E 05 F1 | 	add	fp, #4
22c38     A7 1E 02 FB | 	rdlong	local01, fp
22c3c     08 4E 85 F1 | 	sub	fp, #8
22c40     0F 1F C2 FA | 	rdbyte	local01, local01
22c44     20 1E 16 F2 | 	cmp	local01, #32 wc
22c48     30 00 90 3D |  if_ae	jmp	#LR__3664
22c4c     04 4E 05 F1 | 	add	fp, #4
22c50     A7 1E 02 FB | 	rdlong	local01, fp
22c54     2B 1E 06 F1 | 	add	local01, #43
22c58     0F 01 49 FC | 	wrbyte	#128, local01
22c5c     A7 12 02 FB | 	rdlong	arg01, fp
22c60     04 4E 85 F1 | 	sub	fp, #4
22c64     00 14 06 F6 | 	mov	arg02, #0
22c68     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
22c6c     0C 4E 05 F1 | 	add	fp, #12
22c70     A7 FA 61 FC | 	wrlong	result1, fp
22c74     0C 4E 85 F1 | 	sub	fp, #12
22c78     1C 01 90 FD | 	jmp	#LR__3668
22c7c                 | LR__3664
22c7c                 | ' 		for (;;) {
22c7c                 | LR__3665
22c7c     04 4E 05 F1 | 	add	fp, #4
22c80     A7 12 02 FB | 	rdlong	arg01, fp
22c84     04 4E 05 F1 | 	add	fp, #4
22c88     A7 14 02 F6 | 	mov	arg02, fp
22c8c     08 4E 85 F1 | 	sub	fp, #8
22c90     14 F6 BF FD | 	call	#_fatfs_cc_create_name
22c94     0C 4E 05 F1 | 	add	fp, #12
22c98     A7 FA 61 FC | 	wrlong	result1, fp
22c9c     00 FA 4D F2 | 	cmps	result1, #0 wz
22ca0     0C 4E 85 F1 | 	sub	fp, #12
22ca4     F0 00 90 5D |  if_ne	jmp	#LR__3667
22ca8     04 4E 05 F1 | 	add	fp, #4
22cac     A7 12 02 FB | 	rdlong	arg01, fp
22cb0     04 4E 85 F1 | 	sub	fp, #4
22cb4     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
22cb8     0C 4E 05 F1 | 	add	fp, #12
22cbc     A7 FA 61 FC | 	wrlong	result1, fp
22cc0     08 4E 85 F1 | 	sub	fp, #8
22cc4     A7 1E 02 FB | 	rdlong	local01, fp
22cc8     2B 1E 06 F1 | 	add	local01, #43
22ccc     0F 1F C2 FA | 	rdbyte	local01, local01
22cd0     0C 4E 05 F1 | 	add	fp, #12
22cd4     A7 1E 42 FC | 	wrbyte	local01, fp
22cd8     04 4E 85 F1 | 	sub	fp, #4
22cdc     A7 1E 0A FB | 	rdlong	local01, fp wz
22ce0     0C 4E 85 F1 | 	sub	fp, #12
22ce4     34 00 90 AD |  if_e	jmp	#LR__3666
22ce8     0C 4E 05 F1 | 	add	fp, #12
22cec     A7 1E 02 FB | 	rdlong	local01, fp
22cf0     0C 4E 85 F1 | 	sub	fp, #12
22cf4     04 1E 0E F2 | 	cmp	local01, #4 wz
22cf8     9C 00 90 5D |  if_ne	jmp	#LR__3667
22cfc     10 4E 05 F1 | 	add	fp, #16
22d00     A7 1E C2 FA | 	rdbyte	local01, fp
22d04     10 4E 85 F1 | 	sub	fp, #16
22d08     04 1E CE F7 | 	test	local01, #4 wz
22d0c     0C 4E 05 A1 |  if_e	add	fp, #12
22d10     A7 0A 68 AC |  if_e	wrlong	#5, fp
22d14     0C 4E 85 A1 |  if_e	sub	fp, #12
22d18                 | ' 					}
22d18                 | ' 				}
22d18                 | ' 				break;
22d18     7C 00 90 FD | 	jmp	#LR__3667
22d1c                 | LR__3666
22d1c     10 4E 05 F1 | 	add	fp, #16
22d20     A7 1E C2 FA | 	rdbyte	local01, fp
22d24     10 4E 85 F1 | 	sub	fp, #16
22d28     04 1E CE F7 | 	test	local01, #4 wz
22d2c     68 00 90 5D |  if_ne	jmp	#LR__3667
22d30     04 4E 05 F1 | 	add	fp, #4
22d34     A7 1E 02 FB | 	rdlong	local01, fp
22d38     04 4E 85 F1 | 	sub	fp, #4
22d3c     06 1E 06 F1 | 	add	local01, #6
22d40     0F 1F C2 FA | 	rdbyte	local01, local01
22d44     10 1E CE F7 | 	test	local01, #16 wz
22d48     0C 4E 05 A1 |  if_e	add	fp, #12
22d4c     A7 0A 68 AC |  if_e	wrlong	#5, fp
22d50     0C 4E 85 A1 |  if_e	sub	fp, #12
22d54                 | ' 				res = FR_NO_PATH; break;
22d54     40 00 90 AD |  if_e	jmp	#LR__3667
22d58     04 4E 05 F1 | 	add	fp, #4
22d5c     A7 20 02 FB | 	rdlong	local02, fp
22d60     10 1F 02 F6 | 	mov	local01, local02
22d64     10 4E 05 F1 | 	add	fp, #16
22d68     A7 14 02 FB | 	rdlong	arg02, fp
22d6c     0A 13 02 F6 | 	mov	arg01, arg02
22d70     34 14 06 F1 | 	add	arg02, #52
22d74     14 4E 85 F1 | 	sub	fp, #20
22d78     10 20 06 F1 | 	add	local02, #16
22d7c     10 21 02 FB | 	rdlong	local02, local02
22d80     FF 21 06 F5 | 	and	local02, #511
22d84     10 15 02 F1 | 	add	arg02, local02
22d88     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
22d8c     08 1E 06 F1 | 	add	local01, #8
22d90     0F FB 61 FC | 	wrlong	result1, local01
22d94     E4 FE 9F FD | 	jmp	#LR__3665
22d98                 | LR__3667
22d98                 | LR__3668
22d98                 | ' 			}
22d98                 | ' #line 3090 "ff.c"
22d98                 | ' 			{
22d98                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
22d98                 | ' 			}
22d98                 | ' 		}
22d98                 | ' 	}
22d98                 | ' 
22d98                 | ' 	return res;
22d98     0C 4E 05 F1 | 	add	fp, #12
22d9c     A7 FA 01 FB | 	rdlong	result1, fp
22da0     0C 4E 85 F1 | 	sub	fp, #12
22da4     A7 F0 03 F6 | 	mov	ptra, fp
22da8     B2 00 A0 FD | 	call	#popregs_
22dac                 | _fatfs_cc_follow_path_ret
22dac     2D 00 64 FD | 	ret
22db0                 | 
22db0                 | _fatfs_cc_get_ldnumber
22db0     01 00 66 F6 | 	neg	_var01, #1
22db4     09 03 0A FB | 	rdlong	_var02, arg01 wz
22db8     01 05 02 F6 | 	mov	_var03, _var02
22dbc     01 FA 65 A6 |  if_e	neg	result1, #1
22dc0     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
22dc4     97 10 48 FB | 	callpa	#(@LR__3671-@LR__3670)>>2,fcache_load_ptr_
22dc8                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
22dc8                 | LR__3670
22dc8     02 07 C2 FA | 	rdbyte	_var04, _var03
22dcc     03 FB E1 F8 | 	getbyte	result1, _var04, #0
22dd0     20 FA 15 F2 | 	cmp	result1, #32 wc
22dd4     01 04 06 F1 | 	add	_var03, #1
22dd8     03 09 02 36 |  if_ae	mov	_var05, _var04
22ddc     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
22de0     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
22de4     E0 FF 9F 1D |  if_a	jmp	#LR__3670
22de8                 | LR__3671
22de8     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
22dec     3A 06 0E F2 | 	cmp	_var04, #58 wz
22df0     40 00 90 5D |  if_ne	jmp	#LR__3673
22df4     01 0A 06 F6 | 	mov	_var06, #1
22df8     01 09 C2 FA | 	rdbyte	_var05, _var02
22dfc     30 08 16 F2 | 	cmp	_var05, #48 wc
22e00     1C 00 90 CD |  if_b	jmp	#LR__3672
22e04     01 09 C2 FA | 	rdbyte	_var05, _var02
22e08     3A 08 16 F2 | 	cmp	_var05, #58 wc
22e0c     01 0D 02 C6 |  if_b	mov	_var07, _var02
22e10     02 0C 06 C1 |  if_b	add	_var07, #2
22e14     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
22e18     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
22e1c     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
22e20                 | LR__3672
22e20     01 0A 56 F2 | 	cmps	_var06, #1 wc
22e24     05 01 02 C6 |  if_b	mov	_var01, _var06
22e28     09 05 62 CC |  if_b	wrlong	_var03, arg01
22e2c                 | ' 			vol = i;
22e2c                 | ' 			*path = tt;
22e2c                 | ' 		}
22e2c                 | ' 		return vol;
22e2c     00 FB 01 F6 | 	mov	result1, _var01
22e30     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
22e34                 | LR__3673
22e34                 | ' 	}
22e34                 | ' #line 3170 "ff.c"
22e34                 | ' 	vol = 0;
22e34                 | ' 
22e34                 | ' 	return vol;
22e34     00 FA 05 F6 | 	mov	result1, #0
22e38                 | _fatfs_cc_get_ldnumber_ret
22e38     2D 00 64 FD | 	ret
22e3c                 | 
22e3c                 | _fatfs_cc_check_fs
22e3c     04 4A 05 F6 | 	mov	COUNT_, #4
22e40     A8 00 A0 FD | 	call	#pushregs_
22e44     09 1F 02 F6 | 	mov	local01, arg01
22e48     03 1E 06 F1 | 	add	local01, #3
22e4c     0F 01 48 FC | 	wrbyte	#0, local01
22e50     2D 1E 06 F1 | 	add	local01, #45
22e54     FF FF FF FF 
22e58     0F FF 6B FC | 	wrlong	##-1, local01
22e5c     30 1E 86 F1 | 	sub	local01, #48
22e60     0F 13 02 F6 | 	mov	arg01, local01
22e64     18 D5 BF FD | 	call	#_fatfs_cc_move_window
22e68     00 FA 0D F2 | 	cmp	result1, #0 wz
22e6c     04 FA 05 56 |  if_ne	mov	result1, #4
22e70     94 01 90 5D |  if_ne	jmp	#LR__3684
22e74     34 1E 06 F1 | 	add	local01, #52
22e78     0F 13 02 F6 | 	mov	arg01, local01
22e7c     FE 13 06 F1 | 	add	arg01, #510
22e80                 | ' {
22e80                 | ' 
22e80                 | ' 	return *((WORD*)ptr);
22e80     09 21 E2 FA | 	rdword	local02, arg01
22e84     0F 23 C2 FA | 	rdbyte	local03, local01
22e88     34 1E 86 F1 | 	sub	local01, #52
22e8c     11 25 E2 F8 | 	getbyte	local04, local03, #0
22e90     EB 24 0E F2 | 	cmp	local04, #235 wz
22e94     11 17 02 56 |  if_ne	mov	arg03, local03
22e98     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
22e9c     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
22ea0     11 23 E2 58 |  if_ne	getbyte	local03, local03, #0
22ea4     E8 22 0E 52 |  if_ne	cmp	local03, #232 wz
22ea8     44 01 90 5D |  if_ne	jmp	#LR__3683
22eac     10 25 32 F9 | 	getword	local04, local02, #0
22eb0     55 00 00 FF 
22eb4     55 24 0E F2 | 	cmp	local04, ##43605 wz
22eb8     2C 00 90 5D |  if_ne	jmp	#LR__3680
22ebc     34 1E 06 F1 | 	add	local01, #52
22ec0     0F 13 02 F6 | 	mov	arg01, local01
22ec4     34 1E 86 F1 | 	sub	local01, #52
22ec8     52 12 06 F1 | 	add	arg01, #82
22ecc     41 01 00 FF 
22ed0     08 15 06 F6 | 	mov	arg02, ##@LR__4274
22ed4     08 16 06 F6 | 	mov	arg03, #8
22ed8     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
22edc     00 FA 0D F2 | 	cmp	result1, #0 wz
22ee0                 | ' 			return 0;
22ee0     00 FA 05 A6 |  if_e	mov	result1, #0
22ee4     20 01 90 AD |  if_e	jmp	#LR__3684
22ee8                 | LR__3680
22ee8     34 1E 06 F1 | 	add	local01, #52
22eec     0F 13 02 F6 | 	mov	arg01, local01
22ef0     0B 12 06 F1 | 	add	arg01, #11
22ef4                 | ' {
22ef4                 | ' 
22ef4                 | ' 	return *((WORD*)ptr);
22ef4     09 FB E1 FA | 	rdword	result1, arg01
22ef8     0D 1E 06 F1 | 	add	local01, #13
22efc     0F 23 C2 FA | 	rdbyte	local03, local01
22f00     41 1E 86 F1 | 	sub	local01, #65
22f04     FD 24 32 F9 | 	getword	local04, result1, #0
22f08     FD 14 32 F9 | 	getword	arg02, result1, #0
22f0c     01 14 86 F1 | 	sub	arg02, #1
22f10     0A 25 CA F7 | 	test	local04, arg02 wz
22f14     D8 00 90 5D |  if_ne	jmp	#LR__3682
22f18     FD 14 32 F9 | 	getword	arg02, result1, #0
22f1c     01 00 00 FF 
22f20     00 14 16 F2 | 	cmp	arg02, ##512 wc
22f24     C8 00 90 CD |  if_b	jmp	#LR__3682
22f28     FD 14 32 F9 | 	getword	arg02, result1, #0
22f2c     01 00 00 FF 
22f30     01 14 16 F2 | 	cmp	arg02, ##513 wc
22f34     B8 00 90 3D |  if_ae	jmp	#LR__3682
22f38     11 13 02 F6 | 	mov	arg01, local03
22f3c     07 12 4E F7 | 	zerox	arg01, #7 wz
22f40     AC 00 90 AD |  if_e	jmp	#LR__3682
22f44     11 13 E2 F8 | 	getbyte	arg01, local03, #0
22f48     11 23 E2 F8 | 	getbyte	local03, local03, #0
22f4c     01 22 86 F1 | 	sub	local03, #1
22f50     11 13 CA F7 | 	test	arg01, local03 wz
22f54     98 00 90 5D |  if_ne	jmp	#LR__3682
22f58     34 1E 06 F1 | 	add	local01, #52
22f5c     0F 13 02 F6 | 	mov	arg01, local01
22f60     34 1E 86 F1 | 	sub	local01, #52
22f64     0E 12 06 F1 | 	add	arg01, #14
22f68                 | ' {
22f68                 | ' 
22f68                 | ' 	return *((WORD*)ptr);
22f68     09 FB E9 FA | 	rdword	result1, arg01 wz
22f6c     80 00 90 AD |  if_e	jmp	#LR__3682
22f70     44 1E 06 F1 | 	add	local01, #68
22f74     0F 13 C2 FA | 	rdbyte	arg01, local01
22f78     44 1E 86 F1 | 	sub	local01, #68
22f7c     01 12 86 F1 | 	sub	arg01, #1
22f80     02 12 16 F2 | 	cmp	arg01, #2 wc
22f84     68 00 90 3D |  if_ae	jmp	#LR__3682
22f88     34 1E 06 F1 | 	add	local01, #52
22f8c     0F 13 02 F6 | 	mov	arg01, local01
22f90     34 1E 86 F1 | 	sub	local01, #52
22f94     11 12 06 F1 | 	add	arg01, #17
22f98                 | ' {
22f98                 | ' 
22f98                 | ' 	return *((WORD*)ptr);
22f98     09 FB E9 FA | 	rdword	result1, arg01 wz
22f9c     50 00 90 AD |  if_e	jmp	#LR__3682
22fa0     34 1E 06 F1 | 	add	local01, #52
22fa4     0F 13 02 F6 | 	mov	arg01, local01
22fa8     34 1E 86 F1 | 	sub	local01, #52
22fac     13 12 06 F1 | 	add	arg01, #19
22fb0                 | ' {
22fb0                 | ' 
22fb0                 | ' 	return *((WORD*)ptr);
22fb0     09 FB E1 FA | 	rdword	result1, arg01
22fb4     FD 22 32 F9 | 	getword	local03, result1, #0
22fb8     80 22 16 F2 | 	cmp	local03, #128 wc
22fbc     20 00 90 3D |  if_ae	jmp	#LR__3681
22fc0     34 1E 06 F1 | 	add	local01, #52
22fc4     0F 13 02 F6 | 	mov	arg01, local01
22fc8     34 1E 86 F1 | 	sub	local01, #52
22fcc     20 12 06 F1 | 	add	arg01, #32
22fd0                 | ' {
22fd0                 | ' 
22fd0                 | ' 	return *((DWORD*)ptr);
22fd0     09 FB 01 FB | 	rdlong	result1, arg01
22fd4     80 00 00 FF 
22fd8     00 FA 15 F2 | 	cmp	result1, ##65536 wc
22fdc     10 00 90 CD |  if_b	jmp	#LR__3682
22fe0                 | LR__3681
22fe0     4A 1E 06 F1 | 	add	local01, #74
22fe4                 | ' {
22fe4                 | ' 
22fe4                 | ' 	return *((WORD*)ptr);
22fe4     0F FB E9 FA | 	rdword	result1, local01 wz
22fe8                 | ' 			&& b != 0 && (b & (b - 1)) == 0
22fe8                 | ' 			&& ld_word(fs->win +  14 ) != 0
22fe8                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
22fe8                 | ' 			&& ld_word(fs->win +  17 ) != 0
22fe8                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
22fe8                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
22fe8                 | ' 				return 0;
22fe8     00 FA 05 56 |  if_ne	mov	result1, #0
22fec     18 00 90 5D |  if_ne	jmp	#LR__3684
22ff0                 | LR__3682
22ff0                 | LR__3683
22ff0                 | ' 		}
22ff0                 | ' 	}
22ff0                 | ' 	return sign == 0xAA55 ? 2 : 3;
22ff0     10 23 32 F9 | 	getword	local03, local02, #0
22ff4     55 00 00 FF 
22ff8     55 22 0E F2 | 	cmp	local03, ##43605 wz
22ffc     02 24 06 A6 |  if_e	mov	local04, #2
23000     03 24 06 56 |  if_ne	mov	local04, #3
23004     12 FB 01 F6 | 	mov	result1, local04
23008                 | LR__3684
23008     A7 F0 03 F6 | 	mov	ptra, fp
2300c     B2 00 A0 FD | 	call	#popregs_
23010                 | _fatfs_cc_check_fs_ret
23010     2D 00 64 FD | 	ret
23014                 | 
23014                 | _fatfs_cc_find_volume
23014     05 4A 05 F6 | 	mov	COUNT_, #5
23018     A8 00 A0 FD | 	call	#pushregs_
2301c     24 F0 07 F1 | 	add	ptra, #36
23020     09 1F 02 F6 | 	mov	local01, arg01
23024     0A 21 02 F6 | 	mov	local02, arg02
23028     0F 13 02 F6 | 	mov	arg01, local01
2302c     00 14 06 F6 | 	mov	arg02, #0
23030     08 FE BF FD | 	call	#_fatfs_cc_check_fs
23034     02 FA 0D F2 | 	cmp	result1, #2 wz
23038     0C 00 90 AD |  if_e	jmp	#LR__3690
2303c     03 FA 15 F2 | 	cmp	result1, #3 wc
23040     00 20 0E C2 |  if_b	cmp	local02, #0 wz
23044     D0 00 90 BD |  if_nc_or_z	jmp	#LR__3698
23048                 | LR__3690
23048                 | ' 	for (i = 0; i < 4; i++) {
23048     00 22 06 F6 | 	mov	local03, #0
2304c     97 26 48 FB | 	callpa	#(@LR__3692-@LR__3691)>>2,fcache_load_ptr_
23050                 | LR__3691
23050     04 22 16 F2 | 	cmp	local03, #4 wc
23054     44 00 90 3D |  if_ae	jmp	#LR__3693
23058     11 25 02 F6 | 	mov	local04, local03
2305c     02 24 66 F0 | 	shl	local04, #2
23060     14 4E 05 F1 | 	add	fp, #20
23064     A7 24 02 F1 | 	add	local04, fp
23068     34 1E 06 F1 | 	add	local01, #52
2306c     0F 13 02 F6 | 	mov	arg01, local01
23070     34 1E 86 F1 | 	sub	local01, #52
23074     BE 13 06 F1 | 	add	arg01, #446
23078     11 15 02 F6 | 	mov	arg02, local03
2307c     04 14 66 F0 | 	shl	arg02, #4
23080     0A 13 02 F1 | 	add	arg01, arg02
23084     08 12 06 F1 | 	add	arg01, #8
23088                 | ' {
23088                 | ' 
23088                 | ' 	return *((DWORD*)ptr);
23088     09 FB 01 FB | 	rdlong	result1, arg01
2308c     14 4E 85 F1 | 	sub	fp, #20
23090     12 FB 61 FC | 	wrlong	result1, local04
23094     01 22 06 F1 | 	add	local03, #1
23098     B4 FF 9F FD | 	jmp	#LR__3691
2309c                 | LR__3692
2309c                 | LR__3693
2309c     00 20 0E F2 | 	cmp	local02, #0 wz
230a0     10 25 02 56 |  if_ne	mov	local04, local02
230a4     01 24 86 51 |  if_ne	sub	local04, #1
230a8     00 24 06 A6 |  if_e	mov	local04, #0
230ac     12 23 02 F6 | 	mov	local03, local04
230b0                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
230b0                 | ' 	}
230b0                 | ' 	i = part ? part - 1 : 0;
230b0                 | ' 	do {
230b0                 | LR__3694
230b0     11 25 02 F6 | 	mov	local04, local03
230b4     02 24 66 F0 | 	shl	local04, #2
230b8     14 4E 05 F1 | 	add	fp, #20
230bc     A7 24 02 F1 | 	add	local04, fp
230c0     12 25 0A FB | 	rdlong	local04, local04 wz
230c4     14 4E 85 F1 | 	sub	fp, #20
230c8     28 00 90 AD |  if_e	jmp	#LR__3695
230cc     11 25 02 F6 | 	mov	local04, local03
230d0     02 24 66 F0 | 	shl	local04, #2
230d4     14 4E 05 F1 | 	add	fp, #20
230d8     A7 24 02 F1 | 	add	local04, fp
230dc     12 15 02 FB | 	rdlong	arg02, local04
230e0     0F 13 02 F6 | 	mov	arg01, local01
230e4     14 4E 85 F1 | 	sub	fp, #20
230e8     50 FD BF FD | 	call	#_fatfs_cc_check_fs
230ec     FD 24 02 F6 | 	mov	local04, result1
230f0     04 00 90 FD | 	jmp	#LR__3696
230f4                 | LR__3695
230f4     03 24 06 F6 | 	mov	local04, #3
230f8                 | LR__3696
230f8     12 27 02 F6 | 	mov	local05, local04
230fc     00 20 0E F2 | 	cmp	local02, #0 wz
23100     02 26 16 A2 |  if_e	cmp	local05, #2 wc
23104     0C 00 90 8D |  if_c_and_z	jmp	#LR__3697
23108     01 22 06 A1 |  if_e	add	local03, #1
2310c     04 22 16 A2 |  if_e	cmp	local03, #4 wc
23110     9C FF 9F 8D |  if_c_and_z	jmp	#LR__3694
23114                 | LR__3697
23114                 | ' 	return fmt;
23114     13 FB 01 F6 | 	mov	result1, local05
23118                 | LR__3698
23118     A7 F0 03 F6 | 	mov	ptra, fp
2311c     B2 00 A0 FD | 	call	#popregs_
23120                 | _fatfs_cc_find_volume_ret
23120     2D 00 64 FD | 	ret
23124                 | 
23124                 | _fatfs_cc_mount_volume
23124     0B 4A 05 F6 | 	mov	COUNT_, #11
23128     A8 00 A0 FD | 	call	#pushregs_
2312c     0A 1F 02 F6 | 	mov	local01, arg02
23130     0B 21 02 F6 | 	mov	local02, arg03
23134     0F 01 68 FC | 	wrlong	#0, local01
23138     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
2313c     FD 22 02 F6 | 	mov	local03, result1
23140     00 22 56 F2 | 	cmps	local03, #0 wc
23144     0B FA 05 C6 |  if_b	mov	result1, #11
23148     3C 05 90 CD |  if_b	jmp	#LR__3710
2314c     11 17 02 F6 | 	mov	arg03, local03
23150     02 16 66 F0 | 	shl	arg03, #2
23154     F2 16 02 F1 | 	add	arg03, objptr
23158     0B 25 0A FB | 	rdlong	local04, arg03 wz
2315c     0C FA 05 A6 |  if_e	mov	result1, #12
23160     24 05 90 AD |  if_e	jmp	#LR__3710
23164     0F 25 62 FC | 	wrlong	local04, local01
23168     10 21 E2 F8 | 	getbyte	local02, local02, #0
2316c     FE 20 06 F5 | 	and	local02, #254
23170     12 17 CA FA | 	rdbyte	arg03, local04 wz
23174     4C 00 90 AD |  if_e	jmp	#LR__3701
23178     01 24 06 F1 | 	add	local04, #1
2317c     12 13 CA FA | 	rdbyte	arg01, local04 wz
23180     01 24 86 F1 | 	sub	local04, #1
23184     01 FA 05 56 |  if_ne	mov	result1, #1
23188                 | ' 
23188                 | ' 	return Stat;
23188     01 00 00 AF 
2318c     20 E4 05 A1 |  if_e	add	objptr, ##544
23190     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
23194     01 00 00 AF 
23198     20 E4 85 A1 |  if_e	sub	objptr, ##544
2319c     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
231a0     01 16 CE F7 | 	test	arg03, #1 wz
231a4     1C 00 90 5D |  if_ne	jmp	#LR__3700
231a8     00 20 0E F2 | 	cmp	local02, #0 wz
231ac     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
231b0     04 FA CD 57 |  if_ne	test	result1, #4 wz
231b4                 | ' 				return FR_WRITE_PROTECTED;
231b4     0A FA 05 56 |  if_ne	mov	result1, #10
231b8     CC 04 90 5D |  if_ne	jmp	#LR__3710
231bc                 | ' 			}
231bc                 | ' 			return FR_OK;
231bc     00 FA 05 F6 | 	mov	result1, #0
231c0     C4 04 90 FD | 	jmp	#LR__3710
231c4                 | LR__3700
231c4                 | LR__3701
231c4     12 01 48 FC | 	wrbyte	#0, local04
231c8     01 24 06 F1 | 	add	local04, #1
231cc     12 23 42 FC | 	wrbyte	local03, local04
231d0     12 13 C2 FA | 	rdbyte	arg01, local04
231d4     01 24 86 F1 | 	sub	local04, #1
231d8     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
231dc     FD 16 02 F6 | 	mov	arg03, result1
231e0     0B 27 E2 F8 | 	getbyte	local05, arg03, #0
231e4     01 26 CE F7 | 	test	local05, #1 wz
231e8                 | ' 		return FR_NOT_READY;
231e8     03 FA 05 56 |  if_ne	mov	result1, #3
231ec     98 04 90 5D |  if_ne	jmp	#LR__3710
231f0     00 20 0E F2 | 	cmp	local02, #0 wz
231f4     0B 27 02 56 |  if_ne	mov	local05, arg03
231f8     13 27 E2 58 |  if_ne	getbyte	local05, local05, #0
231fc     04 26 CE 57 |  if_ne	test	local05, #4 wz
23200                 | ' 		return FR_WRITE_PROTECTED;
23200     0A FA 05 56 |  if_ne	mov	result1, #10
23204     80 04 90 5D |  if_ne	jmp	#LR__3710
23208     12 13 02 F6 | 	mov	arg01, local04
2320c     00 14 06 F6 | 	mov	arg02, #0
23210     00 FE BF FD | 	call	#_fatfs_cc_find_volume
23214     FD 12 02 F6 | 	mov	arg01, result1
23218     04 12 0E F2 | 	cmp	arg01, #4 wz
2321c     01 FA 05 A6 |  if_e	mov	result1, #1
23220     64 04 90 AD |  if_e	jmp	#LR__3710
23224     02 12 16 F2 | 	cmp	arg01, #2 wc
23228     0D FA 05 36 |  if_ae	mov	result1, #13
2322c     58 04 90 3D |  if_ae	jmp	#LR__3710
23230     30 24 06 F1 | 	add	local04, #48
23234     12 29 02 FB | 	rdlong	local06, local04
23238     04 24 06 F1 | 	add	local04, #4
2323c     12 13 02 F6 | 	mov	arg01, local04
23240     34 24 86 F1 | 	sub	local04, #52
23244     0B 12 06 F1 | 	add	arg01, #11
23248                 | ' {
23248                 | ' 
23248                 | ' 	return *((WORD*)ptr);
23248     09 FB E1 FA | 	rdword	result1, arg01
2324c     01 00 00 FF 
23250     00 FA 0D F2 | 	cmp	result1, ##512 wz
23254     0D FA 05 56 |  if_ne	mov	result1, #13
23258     2C 04 90 5D |  if_ne	jmp	#LR__3710
2325c     34 24 06 F1 | 	add	local04, #52
23260     12 13 02 F6 | 	mov	arg01, local04
23264     34 24 86 F1 | 	sub	local04, #52
23268     16 12 06 F1 | 	add	arg01, #22
2326c                 | ' {
2326c                 | ' 
2326c                 | ' 	return *((WORD*)ptr);
2326c     09 FB E1 FA | 	rdword	result1, arg01
23270     FD 2A 0A F6 | 	mov	local07, result1 wz
23274     18 00 90 5D |  if_ne	jmp	#LR__3702
23278     34 24 06 F1 | 	add	local04, #52
2327c     12 13 02 F6 | 	mov	arg01, local04
23280     34 24 86 F1 | 	sub	local04, #52
23284     24 12 06 F1 | 	add	arg01, #36
23288                 | ' {
23288                 | ' 
23288                 | ' 	return *((DWORD*)ptr);
23288     09 FB 01 FB | 	rdlong	result1, arg01
2328c     FD 2A 02 F6 | 	mov	local07, result1
23290                 | LR__3702
23290     1C 24 06 F1 | 	add	local04, #28
23294     12 2B 62 FC | 	wrlong	local07, local04
23298     28 24 06 F1 | 	add	local04, #40
2329c     12 27 C2 FA | 	rdbyte	local05, local04
232a0     42 24 86 F1 | 	sub	local04, #66
232a4     12 27 42 FC | 	wrbyte	local05, local04
232a8     12 27 C2 FA | 	rdbyte	local05, local04
232ac     02 24 86 F1 | 	sub	local04, #2
232b0     01 26 0E F2 | 	cmp	local05, #1 wz
232b4     02 24 06 51 |  if_ne	add	local04, #2
232b8     12 27 C2 5A |  if_ne	rdbyte	local05, local04
232bc     02 24 86 51 |  if_ne	sub	local04, #2
232c0     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
232c4     0D FA 05 56 |  if_ne	mov	result1, #13
232c8     BC 03 90 5D |  if_ne	jmp	#LR__3710
232cc     02 24 06 F1 | 	add	local04, #2
232d0     12 27 C2 FA | 	rdbyte	local05, local04
232d4     13 2B 02 FD | 	qmul	local07, local05
232d8     3F 24 06 F1 | 	add	local04, #63
232dc     12 27 C2 FA | 	rdbyte	local05, local04
232e0     37 24 86 F1 | 	sub	local04, #55
232e4     12 27 52 FC | 	wrword	local05, local04
232e8     12 27 EA FA | 	rdword	local05, local04 wz
232ec     0A 24 86 F1 | 	sub	local04, #10
232f0     18 2A 62 FD | 	getqx	local07
232f4     20 00 90 AD |  if_e	jmp	#LR__3703
232f8     0A 24 06 F1 | 	add	local04, #10
232fc     12 27 E2 FA | 	rdword	local05, local04
23300     13 23 32 F9 | 	getword	local03, local05, #0
23304     0A 24 86 F1 | 	sub	local04, #10
23308     13 27 32 F9 | 	getword	local05, local05, #0
2330c     01 26 86 F1 | 	sub	local05, #1
23310     13 23 CA F7 | 	test	local03, local05 wz
23314     08 00 90 AD |  if_e	jmp	#LR__3704
23318                 | LR__3703
23318     0D FA 05 F6 | 	mov	result1, #13
2331c     68 03 90 FD | 	jmp	#LR__3710
23320                 | LR__3704
23320     34 24 06 F1 | 	add	local04, #52
23324     12 13 02 F6 | 	mov	arg01, local04
23328     11 12 06 F1 | 	add	arg01, #17
2332c                 | ' {
2332c                 | ' 
2332c                 | ' 	return *((WORD*)ptr);
2332c     09 FB E1 FA | 	rdword	result1, arg01
23330     2C 24 86 F1 | 	sub	local04, #44
23334     12 FB 51 FC | 	wrword	result1, local04
23338     12 27 E2 FA | 	rdword	local05, local04
2333c     08 24 86 F1 | 	sub	local04, #8
23340     13 13 52 F6 | 	abs	arg01, local05 wc
23344     09 13 42 F8 | 	getnib	arg01, arg01, #0
23348     09 13 8A F6 | 	negc	arg01, arg01 wz
2334c     0D FA 05 56 |  if_ne	mov	result1, #13
23350     34 03 90 5D |  if_ne	jmp	#LR__3710
23354     34 24 06 F1 | 	add	local04, #52
23358     12 13 02 F6 | 	mov	arg01, local04
2335c     34 24 86 F1 | 	sub	local04, #52
23360     13 12 06 F1 | 	add	arg01, #19
23364                 | ' {
23364                 | ' 
23364                 | ' 	return *((WORD*)ptr);
23364     09 FB E1 FA | 	rdword	result1, arg01
23368     FD 2C 0A F6 | 	mov	local08, result1 wz
2336c     34 24 06 A1 |  if_e	add	local04, #52
23370     12 13 02 A6 |  if_e	mov	arg01, local04
23374     34 24 86 A1 |  if_e	sub	local04, #52
23378     20 12 06 A1 |  if_e	add	arg01, #32
2337c                 | ' {
2337c                 | ' 
2337c                 | ' 	return *((DWORD*)ptr);
2337c     09 2D 02 AB |  if_e	rdlong	local08, arg01
23380     34 24 06 F1 | 	add	local04, #52
23384     12 13 02 F6 | 	mov	arg01, local04
23388     34 24 86 F1 | 	sub	local04, #52
2338c     0E 12 06 F1 | 	add	arg01, #14
23390                 | ' {
23390                 | ' 
23390                 | ' 	return *((WORD*)ptr);
23390     09 FB E1 FA | 	rdword	result1, arg01
23394     FD 12 02 F6 | 	mov	arg01, result1
23398     09 27 02 F6 | 	mov	local05, arg01
2339c     0F 26 4E F7 | 	zerox	local05, #15 wz
233a0     0D FA 05 A6 |  if_e	mov	result1, #13
233a4     E0 02 90 AD |  if_e	jmp	#LR__3710
233a8     09 2F 32 F9 | 	getword	local09, arg01, #0
233ac     15 2F 02 F1 | 	add	local09, local07
233b0     08 24 06 F1 | 	add	local04, #8
233b4     12 27 E2 FA | 	rdword	local05, local04
233b8     08 24 86 F1 | 	sub	local04, #8
233bc     13 27 52 F6 | 	abs	local05, local05 wc
233c0     04 26 46 F0 | 	shr	local05, #4
233c4     13 2F 82 F3 | 	sumc	local09, local05
233c8     17 2D 12 F2 | 	cmp	local08, local09 wc
233cc     0D FA 05 C6 |  if_b	mov	result1, #13
233d0     B4 02 90 CD |  if_b	jmp	#LR__3710
233d4     17 2D 82 F1 | 	sub	local08, local09
233d8     0A 24 06 F1 | 	add	local04, #10
233dc     12 27 E2 FA | 	rdword	local05, local04
233e0     13 2D 12 FD | 	qdiv	local08, local05
233e4     0A 24 86 F1 | 	sub	local04, #10
233e8     18 26 62 FD | 	getqx	local05
233ec     00 26 0E F2 | 	cmp	local05, #0 wz
233f0     0D FA 05 A6 |  if_e	mov	result1, #13
233f4     90 02 90 AD |  if_e	jmp	#LR__3710
233f8     00 30 06 F6 | 	mov	local10, #0
233fc     FF FF 07 FF 
23400     F6 27 16 F2 | 	cmp	local05, ##268435446 wc
23404     03 30 06 C6 |  if_b	mov	local10, #3
23408     7F 00 00 FF 
2340c     F6 27 16 F2 | 	cmp	local05, ##65526 wc
23410     02 30 06 C6 |  if_b	mov	local10, #2
23414     07 00 00 FF 
23418     F6 27 16 F2 | 	cmp	local05, ##4086 wc
2341c     01 30 06 C6 |  if_b	mov	local10, #1
23420     00 30 0E F2 | 	cmp	local10, #0 wz
23424     0D FA 05 A6 |  if_e	mov	result1, #13
23428     5C 02 90 AD |  if_e	jmp	#LR__3710
2342c     02 26 06 F1 | 	add	local05, #2
23430     18 24 06 F1 | 	add	local04, #24
23434     12 27 62 FC | 	wrlong	local05, local04
23438     08 24 06 F1 | 	add	local04, #8
2343c     12 29 62 FC | 	wrlong	local06, local04
23440     14 27 02 F6 | 	mov	local05, local06
23444     09 13 32 F9 | 	getword	arg01, arg01, #0
23448     09 27 02 F1 | 	add	local05, arg01
2344c     04 24 06 F1 | 	add	local04, #4
23450     12 27 62 FC | 	wrlong	local05, local04
23454     14 27 02 F6 | 	mov	local05, local06
23458     17 27 02 F1 | 	add	local05, local09
2345c     08 24 06 F1 | 	add	local04, #8
23460     12 27 62 FC | 	wrlong	local05, local04
23464     2C 24 86 F1 | 	sub	local04, #44
23468     03 30 0E F2 | 	cmp	local10, #3 wz
2346c     5C 00 90 5D |  if_ne	jmp	#LR__3705
23470     34 24 06 F1 | 	add	local04, #52
23474     12 13 02 F6 | 	mov	arg01, local04
23478     34 24 86 F1 | 	sub	local04, #52
2347c     2A 12 06 F1 | 	add	arg01, #42
23480                 | ' {
23480                 | ' 
23480                 | ' 	return *((WORD*)ptr);
23480     09 FB E9 FA | 	rdword	result1, arg01 wz
23484     0D FA 05 56 |  if_ne	mov	result1, #13
23488     FC 01 90 5D |  if_ne	jmp	#LR__3710
2348c     08 24 06 F1 | 	add	local04, #8
23490     12 27 EA FA | 	rdword	local05, local04 wz
23494     08 24 86 F1 | 	sub	local04, #8
23498     0D FA 05 56 |  if_ne	mov	result1, #13
2349c     E8 01 90 5D |  if_ne	jmp	#LR__3710
234a0     34 24 06 F1 | 	add	local04, #52
234a4     12 13 02 F6 | 	mov	arg01, local04
234a8     2C 12 06 F1 | 	add	arg01, #44
234ac                 | ' {
234ac                 | ' 
234ac                 | ' 	return *((DWORD*)ptr);
234ac     09 FB 01 FB | 	rdlong	result1, arg01
234b0     0C 24 86 F1 | 	sub	local04, #12
234b4     12 FB 61 FC | 	wrlong	result1, local04
234b8     10 24 86 F1 | 	sub	local04, #16
234bc     12 33 02 FB | 	rdlong	local11, local04
234c0     18 24 86 F1 | 	sub	local04, #24
234c4     02 32 66 F0 | 	shl	local11, #2
234c8     6C 00 90 FD | 	jmp	#LR__3707
234cc                 | LR__3705
234cc     08 24 06 F1 | 	add	local04, #8
234d0     12 27 EA FA | 	rdword	local05, local04 wz
234d4     08 24 86 F1 | 	sub	local04, #8
234d8     0D FA 05 A6 |  if_e	mov	result1, #13
234dc     A8 01 90 AD |  if_e	jmp	#LR__3710
234e0     24 24 06 F1 | 	add	local04, #36
234e4     12 27 02 FB | 	rdlong	local05, local04
234e8     15 27 02 F1 | 	add	local05, local07
234ec     04 24 06 F1 | 	add	local04, #4
234f0     12 27 62 FC | 	wrlong	local05, local04
234f4     28 24 86 F1 | 	sub	local04, #40
234f8     02 30 0E F2 | 	cmp	local10, #2 wz
234fc     18 24 06 A1 |  if_e	add	local04, #24
23500     12 27 02 AB |  if_e	rdlong	local05, local04
23504     18 24 86 A1 |  if_e	sub	local04, #24
23508     01 26 66 A0 |  if_e	shl	local05, #1
2350c     24 00 90 AD |  if_e	jmp	#LR__3706
23510     18 24 06 F1 | 	add	local04, #24
23514     12 33 02 FB | 	rdlong	local11, local04
23518     19 27 02 F6 | 	mov	local05, local11
2351c     01 26 66 F0 | 	shl	local05, #1
23520     19 27 02 F1 | 	add	local05, local11
23524     01 26 46 F0 | 	shr	local05, #1
23528     18 24 86 F1 | 	sub	local04, #24
2352c     01 32 06 F5 | 	and	local11, #1
23530     19 27 02 F1 | 	add	local05, local11
23534                 | LR__3706
23534     13 33 02 F6 | 	mov	local11, local05
23538                 | LR__3707
23538     FF 33 06 F1 | 	add	local11, #511
2353c     09 32 46 F0 | 	shr	local11, #9
23540     1C 24 06 F1 | 	add	local04, #28
23544     12 17 02 FB | 	rdlong	arg03, local04
23548     1C 24 86 F1 | 	sub	local04, #28
2354c     19 17 12 F2 | 	cmp	arg03, local11 wc
23550     0D FA 05 C6 |  if_b	mov	result1, #13
23554     30 01 90 CD |  if_b	jmp	#LR__3710
23558     14 24 06 F1 | 	add	local04, #20
2355c     FF FF FF FF 
23560     12 FF 6B FC | 	wrlong	##-1, local04
23564     04 24 86 F1 | 	sub	local04, #4
23568     FF FF FF FF 
2356c     12 FF 6B FC | 	wrlong	##-1, local04
23570     0C 24 86 F1 | 	sub	local04, #12
23574     12 01 49 FC | 	wrbyte	#128, local04
23578     04 24 86 F1 | 	sub	local04, #4
2357c     03 30 0E F2 | 	cmp	local10, #3 wz
23580     D0 00 90 5D |  if_ne	jmp	#LR__3709
23584     34 24 06 F1 | 	add	local04, #52
23588     12 13 02 F6 | 	mov	arg01, local04
2358c     34 24 86 F1 | 	sub	local04, #52
23590     30 12 06 F1 | 	add	arg01, #48
23594                 | ' {
23594                 | ' 
23594                 | ' 	return *((WORD*)ptr);
23594     09 FB E1 FA | 	rdword	result1, arg01
23598     FD 26 32 F9 | 	getword	local05, result1, #0
2359c     01 26 0E F2 | 	cmp	local05, #1 wz
235a0     B0 00 90 5D |  if_ne	jmp	#LR__3709
235a4     01 28 06 F1 | 	add	local06, #1
235a8     12 13 02 F6 | 	mov	arg01, local04
235ac     14 15 02 F6 | 	mov	arg02, local06
235b0     CC CD BF FD | 	call	#_fatfs_cc_move_window
235b4     00 FA 0D F2 | 	cmp	result1, #0 wz
235b8     98 00 90 5D |  if_ne	jmp	#LR__3709
235bc     04 24 06 F1 | 	add	local04, #4
235c0     12 01 48 FC | 	wrbyte	#0, local04
235c4     30 24 06 F1 | 	add	local04, #48
235c8     12 13 02 F6 | 	mov	arg01, local04
235cc     34 24 86 F1 | 	sub	local04, #52
235d0     FE 13 06 F1 | 	add	arg01, #510
235d4                 | ' {
235d4                 | ' 
235d4                 | ' 	return *((WORD*)ptr);
235d4     09 FB E1 FA | 	rdword	result1, arg01
235d8     FD 26 32 F9 | 	getword	local05, result1, #0
235dc     55 00 00 FF 
235e0     55 26 0E F2 | 	cmp	local05, ##43605 wz
235e4     34 24 06 A1 |  if_e	add	local04, #52
235e8     12 13 02 A6 |  if_e	mov	arg01, local04
235ec     34 24 86 A1 |  if_e	sub	local04, #52
235f0                 | ' {
235f0                 | ' 
235f0                 | ' 	return *((DWORD*)ptr);
235f0     09 FB 01 AB |  if_e	rdlong	result1, arg01
235f4     A9 B0 20 AF 
235f8     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
235fc     54 00 90 5D |  if_ne	jmp	#LR__3708
23600     34 24 06 F1 | 	add	local04, #52
23604     12 13 02 F6 | 	mov	arg01, local04
23608     34 24 86 F1 | 	sub	local04, #52
2360c     E4 13 06 F1 | 	add	arg01, #484
23610                 | ' {
23610                 | ' 
23610                 | ' 	return *((DWORD*)ptr);
23610     09 FB 01 FB | 	rdlong	result1, arg01
23614     B9 A0 30 FF 
23618     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
2361c     34 00 90 5D |  if_ne	jmp	#LR__3708
23620     34 24 06 F1 | 	add	local04, #52
23624     12 13 02 F6 | 	mov	arg01, local04
23628     E8 13 06 F1 | 	add	arg01, #488
2362c                 | ' {
2362c                 | ' 
2362c                 | ' 	return *((DWORD*)ptr);
2362c     09 FB 01 FB | 	rdlong	result1, arg01
23630     20 24 86 F1 | 	sub	local04, #32
23634     12 FB 61 FC | 	wrlong	result1, local04
23638     20 24 06 F1 | 	add	local04, #32
2363c     12 13 02 F6 | 	mov	arg01, local04
23640     EC 13 06 F1 | 	add	arg01, #492
23644                 | ' {
23644                 | ' 
23644                 | ' 	return *((DWORD*)ptr);
23644     09 FB 01 FB | 	rdlong	result1, arg01
23648     24 24 86 F1 | 	sub	local04, #36
2364c     12 FB 61 FC | 	wrlong	result1, local04
23650     10 24 86 F1 | 	sub	local04, #16
23654                 | LR__3708
23654                 | LR__3709
23654     12 31 42 FC | 	wrbyte	local10, local04
23658     04 E4 05 F1 | 	add	objptr, #4
2365c     F2 26 E2 FA | 	rdword	local05, objptr
23660     01 26 06 F1 | 	add	local05, #1
23664     F2 26 52 FC | 	wrword	local05, objptr
23668     F2 32 E2 FA | 	rdword	local11, objptr
2366c     06 24 06 F1 | 	add	local04, #6
23670     12 33 52 FC | 	wrword	local11, local04
23674     04 E4 05 F1 | 	add	objptr, #4
23678     06 24 06 F1 | 	add	local04, #6
2367c     12 E5 61 FC | 	wrlong	objptr, local04
23680                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
23680                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
23680                 | ' 			{
23680                 | ' 
23680                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
23680                 | ' 
23680                 | ' 
23680                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
23680                 | ' 
23680                 | ' 			}
23680                 | ' 		}
23680                 | ' 
23680                 | ' 
23680                 | ' 	}
23680                 | ' 
23680                 | ' 	fs->fs_type = (BYTE)fmt;
23680                 | ' 	fs->id = ++Fsid;
23680                 | ' 
23680                 | ' 	fs->lfnbuf = LfnBuf;
23680                 | ' #line 3567 "ff.c"
23680                 | ' 	return FR_OK;
23680     00 FA 05 F6 | 	mov	result1, #0
23684     08 E4 85 F1 | 	sub	objptr, #8
23688                 | LR__3710
23688     A7 F0 03 F6 | 	mov	ptra, fp
2368c     B2 00 A0 FD | 	call	#popregs_
23690                 | _fatfs_cc_mount_volume_ret
23690     2D 00 64 FD | 	ret
23694                 | 
23694                 | _fatfs_cc_validate
23694     09 01 0A F6 | 	mov	_var01, arg01 wz
23698     09 02 06 F6 | 	mov	_var02, #9
2369c     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
236a0     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
236a4     50 00 90 AD |  if_e	jmp	#LR__3720
236a8     04 00 06 F1 | 	add	_var01, #4
236ac     00 07 E2 FA | 	rdword	_var04, _var01
236b0     04 00 86 F1 | 	sub	_var01, #4
236b4     00 13 02 FB | 	rdlong	arg01, _var01
236b8     06 12 06 F1 | 	add	arg01, #6
236bc     09 FB E1 FA | 	rdword	result1, arg01
236c0     FD 06 0A F2 | 	cmp	_var04, result1 wz
236c4     30 00 90 5D |  if_ne	jmp	#LR__3720
236c8     00 07 02 FB | 	rdlong	_var04, _var01
236cc     01 06 06 F1 | 	add	_var04, #1
236d0     03 13 CA FA | 	rdbyte	arg01, _var04 wz
236d4     01 FA 05 56 |  if_ne	mov	result1, #1
236d8                 | ' 
236d8                 | ' 	return Stat;
236d8     01 00 00 AF 
236dc     20 E4 05 A1 |  if_e	add	objptr, ##544
236e0     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
236e4     01 00 00 AF 
236e8     20 E4 85 A1 |  if_e	sub	objptr, ##544
236ec     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
236f0     01 04 CE F7 | 	test	_var03, #1 wz
236f4     00 02 06 A6 |  if_e	mov	_var02, #0
236f8                 | LR__3720
236f8     00 02 0E F2 | 	cmp	_var02, #0 wz
236fc     00 05 02 AB |  if_e	rdlong	_var03, _var01
23700     00 04 06 56 |  if_ne	mov	_var03, #0
23704     0A 05 62 FC | 	wrlong	_var03, arg02
23708                 | ' 			res = FR_OK;
23708                 | ' 		}
23708                 | ' 
23708                 | ' 	}
23708                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
23708                 | ' 	return res;
23708     01 FB 01 F6 | 	mov	result1, _var02
2370c                 | _fatfs_cc_validate_ret
2370c     2D 00 64 FD | 	ret
23710                 | 
23710                 | _fatfs_cc_f_mount
23710     01 4A 05 F6 | 	mov	COUNT_, #1
23714     A8 00 A0 FD | 	call	#pushregs_
23718     20 F0 07 F1 | 	add	ptra, #32
2371c     04 4E 05 F1 | 	add	fp, #4
23720     A7 12 62 FC | 	wrlong	arg01, fp
23724     04 4E 05 F1 | 	add	fp, #4
23728     A7 14 62 FC | 	wrlong	arg02, fp
2372c     04 4E 05 F1 | 	add	fp, #4
23730     A7 16 42 FC | 	wrbyte	arg03, fp
23734     04 4E 85 F1 | 	sub	fp, #4
23738     A7 16 02 FB | 	rdlong	arg03, fp
2373c     14 4E 05 F1 | 	add	fp, #20
23740     A7 16 62 FC | 	wrlong	arg03, fp
23744     A7 12 02 F6 | 	mov	arg01, fp
23748     1C 4E 85 F1 | 	sub	fp, #28
2374c     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
23750     14 4E 05 F1 | 	add	fp, #20
23754     A7 FA 61 FC | 	wrlong	result1, fp
23758     14 4E 85 F1 | 	sub	fp, #20
2375c     00 FA 55 F2 | 	cmps	result1, #0 wc
23760     0B FA 05 C6 |  if_b	mov	result1, #11
23764     C0 00 90 CD |  if_b	jmp	#LR__3731
23768     14 4E 05 F1 | 	add	fp, #20
2376c     A7 16 02 FB | 	rdlong	arg03, fp
23770     02 16 66 F0 | 	shl	arg03, #2
23774     F2 16 02 F1 | 	add	arg03, objptr
23778     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2377c     04 4E 85 F1 | 	sub	fp, #4
23780     A7 16 62 FC | 	wrlong	arg03, fp
23784     10 4E 85 F1 | 	sub	fp, #16
23788     28 00 90 AD |  if_e	jmp	#LR__3730
2378c     10 4E 05 F1 | 	add	fp, #16
23790     A7 16 02 FB | 	rdlong	arg03, fp
23794     10 4E 85 F1 | 	sub	fp, #16
23798     01 16 06 F1 | 	add	arg03, #1
2379c     0B 13 C2 FA | 	rdbyte	arg01, arg03
237a0     20 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
237a4     10 4E 05 F1 | 	add	fp, #16
237a8     A7 16 02 FB | 	rdlong	arg03, fp
237ac     10 4E 85 F1 | 	sub	fp, #16
237b0     0B 01 48 FC | 	wrbyte	#0, arg03
237b4                 | LR__3730
237b4     04 4E 05 F1 | 	add	fp, #4
237b8     A7 1E 0A FB | 	rdlong	local01, fp wz
237bc     04 4E 85 F1 | 	sub	fp, #4
237c0     04 4E 05 51 |  if_ne	add	fp, #4
237c4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
237c8     04 4E 85 51 |  if_ne	sub	fp, #4
237cc     0F 01 48 5C |  if_ne	wrbyte	#0, local01
237d0     14 4E 05 F1 | 	add	fp, #20
237d4     A7 1E 02 FB | 	rdlong	local01, fp
237d8     02 1E 66 F0 | 	shl	local01, #2
237dc     F2 1E 02 F1 | 	add	local01, objptr
237e0     10 4E 85 F1 | 	sub	fp, #16
237e4     A7 16 02 FB | 	rdlong	arg03, fp
237e8     0F 17 62 FC | 	wrlong	arg03, local01
237ec     08 4E 05 F1 | 	add	fp, #8
237f0     A7 1E CA FA | 	rdbyte	local01, fp wz
237f4     0C 4E 85 F1 | 	sub	fp, #12
237f8     00 FA 05 A6 |  if_e	mov	result1, #0
237fc     28 00 90 AD |  if_e	jmp	#LR__3731
23800     08 4E 05 F1 | 	add	fp, #8
23804     A7 12 02 F6 | 	mov	arg01, fp
23808     04 4E 85 F1 | 	sub	fp, #4
2380c     A7 14 02 F6 | 	mov	arg02, fp
23810     04 4E 85 F1 | 	sub	fp, #4
23814     00 16 06 F6 | 	mov	arg03, #0
23818     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
2381c     18 4E 05 F1 | 	add	fp, #24
23820     A7 FA 61 FC | 	wrlong	result1, fp
23824                 | ' 
23824                 | ' 	res = mount_volume(&path, &fs, 0);
23824                 | ' 	return res ;
23824     18 4E 85 F1 | 	sub	fp, #24
23828                 | LR__3731
23828     A7 F0 03 F6 | 	mov	ptra, fp
2382c     B2 00 A0 FD | 	call	#popregs_
23830                 | _fatfs_cc_f_mount_ret
23830     2D 00 64 FD | 	ret
23834                 | 
23834                 | _fatfs_cc_f_open
23834     02 4A 05 F6 | 	mov	COUNT_, #2
23838     A8 00 A0 FD | 	call	#pushregs_
2383c     60 F0 07 F1 | 	add	ptra, #96
23840     04 4E 05 F1 | 	add	fp, #4
23844     A7 12 62 FC | 	wrlong	arg01, fp
23848     04 4E 05 F1 | 	add	fp, #4
2384c     A7 14 62 FC | 	wrlong	arg02, fp
23850     04 4E 05 F1 | 	add	fp, #4
23854     A7 16 42 FC | 	wrbyte	arg03, fp
23858     08 4E 85 F1 | 	sub	fp, #8
2385c     A7 18 0A FB | 	rdlong	arg04, fp wz
23860     04 4E 85 F1 | 	sub	fp, #4
23864     09 FA 05 A6 |  if_e	mov	result1, #9
23868     98 06 90 AD |  if_e	jmp	#LR__3757
2386c     0C 4E 05 F1 | 	add	fp, #12
23870     A7 18 C2 FA | 	rdbyte	arg04, fp
23874     3F 18 06 F5 | 	and	arg04, #63
23878     A7 18 42 FC | 	wrbyte	arg04, fp
2387c     04 4E 85 F1 | 	sub	fp, #4
23880     A7 12 02 F6 | 	mov	arg01, fp
23884     3C 4E 05 F1 | 	add	fp, #60
23888     A7 14 02 F6 | 	mov	arg02, fp
2388c     38 4E 85 F1 | 	sub	fp, #56
23890     A7 16 C2 FA | 	rdbyte	arg03, fp
23894     0C 4E 85 F1 | 	sub	fp, #12
23898     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
2389c     10 4E 05 F1 | 	add	fp, #16
238a0     A7 FA 61 FC | 	wrlong	result1, fp
238a4     10 4E 85 F1 | 	sub	fp, #16
238a8     00 FA 0D F2 | 	cmp	result1, #0 wz
238ac     2C 06 90 5D |  if_ne	jmp	#LR__3756
238b0     44 4E 05 F1 | 	add	fp, #68
238b4     A7 18 02 FB | 	rdlong	arg04, fp
238b8     30 4E 85 F1 | 	sub	fp, #48
238bc     A7 18 62 FC | 	wrlong	arg04, fp
238c0     A7 12 02 F6 | 	mov	arg01, fp
238c4     0C 4E 85 F1 | 	sub	fp, #12
238c8     A7 1E 02 FB | 	rdlong	local01, fp
238cc     08 4E 85 F1 | 	sub	fp, #8
238d0     0F 15 02 F6 | 	mov	arg02, local01
238d4     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
238d8     10 4E 05 F1 | 	add	fp, #16
238dc     A7 FA 61 FC | 	wrlong	result1, fp
238e0     10 4E 85 F1 | 	sub	fp, #16
238e4     00 FA 0D F2 | 	cmp	result1, #0 wz
238e8     1C 00 90 5D |  if_ne	jmp	#LR__3740
238ec     3F 4E 05 F1 | 	add	fp, #63
238f0     A7 18 C2 FA | 	rdbyte	arg04, fp
238f4     3F 4E 85 F1 | 	sub	fp, #63
238f8     80 18 CE F7 | 	test	arg04, #128 wz
238fc     10 4E 05 51 |  if_ne	add	fp, #16
23900     A7 0C 68 5C |  if_ne	wrlong	#6, fp
23904     10 4E 85 51 |  if_ne	sub	fp, #16
23908                 | LR__3740
23908     0C 4E 05 F1 | 	add	fp, #12
2390c     A7 18 C2 FA | 	rdbyte	arg04, fp
23910     0C 4E 85 F1 | 	sub	fp, #12
23914     1C 18 CE F7 | 	test	arg04, #28 wz
23918     F0 01 90 AD |  if_e	jmp	#LR__3745
2391c     10 4E 05 F1 | 	add	fp, #16
23920     A7 1E 0A FB | 	rdlong	local01, fp wz
23924     10 4E 85 F1 | 	sub	fp, #16
23928     48 00 90 AD |  if_e	jmp	#LR__3742
2392c     10 4E 05 F1 | 	add	fp, #16
23930     A7 18 02 FB | 	rdlong	arg04, fp
23934     10 4E 85 F1 | 	sub	fp, #16
23938     04 18 0E F2 | 	cmp	arg04, #4 wz
2393c     1C 00 90 5D |  if_ne	jmp	#LR__3741
23940     14 4E 05 F1 | 	add	fp, #20
23944     A7 12 02 F6 | 	mov	arg01, fp
23948     14 4E 85 F1 | 	sub	fp, #20
2394c     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
23950     10 4E 05 F1 | 	add	fp, #16
23954     A7 FA 61 FC | 	wrlong	result1, fp
23958     10 4E 85 F1 | 	sub	fp, #16
2395c                 | LR__3741
2395c     0C 4E 05 F1 | 	add	fp, #12
23960     A7 1E C2 FA | 	rdbyte	local01, fp
23964     08 1E 46 F5 | 	or	local01, #8
23968     A7 1E 42 FC | 	wrbyte	local01, fp
2396c     0C 4E 85 F1 | 	sub	fp, #12
23970     3C 00 90 FD | 	jmp	#LR__3744
23974                 | LR__3742
23974     1A 4E 05 F1 | 	add	fp, #26
23978     A7 1E C2 FA | 	rdbyte	local01, fp
2397c     1A 4E 85 F1 | 	sub	fp, #26
23980     11 1E CE F7 | 	test	local01, #17 wz
23984     10 4E 05 51 |  if_ne	add	fp, #16
23988     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2398c     10 4E 85 51 |  if_ne	sub	fp, #16
23990     1C 00 90 5D |  if_ne	jmp	#LR__3743
23994     0C 4E 05 F1 | 	add	fp, #12
23998     A7 1E C2 FA | 	rdbyte	local01, fp
2399c     0C 4E 85 F1 | 	sub	fp, #12
239a0     04 1E CE F7 | 	test	local01, #4 wz
239a4     10 4E 05 51 |  if_ne	add	fp, #16
239a8     A7 10 68 5C |  if_ne	wrlong	#8, fp
239ac     10 4E 85 51 |  if_ne	sub	fp, #16
239b0                 | LR__3743
239b0                 | LR__3744
239b0     10 4E 05 F1 | 	add	fp, #16
239b4     A7 1E 0A FB | 	rdlong	local01, fp wz
239b8     10 4E 85 F1 | 	sub	fp, #16
239bc     A8 01 90 5D |  if_ne	jmp	#LR__3748
239c0     0C 4E 05 F1 | 	add	fp, #12
239c4     A7 1E C2 FA | 	rdbyte	local01, fp
239c8     0C 4E 85 F1 | 	sub	fp, #12
239cc     08 1E CE F7 | 	test	local01, #8 wz
239d0     94 01 90 AD |  if_e	jmp	#LR__3748
239d4     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
239d8     54 4E 05 F1 | 	add	fp, #84
239dc     A7 FA 61 FC | 	wrlong	result1, fp
239e0     24 4E 85 F1 | 	sub	fp, #36
239e4     A7 12 02 FB | 	rdlong	arg01, fp
239e8     0E 12 06 F1 | 	add	arg01, #14
239ec     09 FB 61 FC | 	wrlong	result1, arg01
239f0     A7 12 02 FB | 	rdlong	arg01, fp
239f4     16 12 06 F1 | 	add	arg01, #22
239f8     24 4E 05 F1 | 	add	fp, #36
239fc     A7 14 02 FB | 	rdlong	arg02, fp
23a00     09 15 62 FC | 	wrlong	arg02, arg01
23a04     10 4E 85 F1 | 	sub	fp, #16
23a08     A7 12 02 FB | 	rdlong	arg01, fp
23a0c     14 4E 85 F1 | 	sub	fp, #20
23a10     A7 14 02 FB | 	rdlong	arg02, fp
23a14     30 4E 85 F1 | 	sub	fp, #48
23a18     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
23a1c     48 4E 05 F1 | 	add	fp, #72
23a20     A7 FA 61 FC | 	wrlong	result1, fp
23a24     18 4E 85 F1 | 	sub	fp, #24
23a28     A7 1E 02 FB | 	rdlong	local01, fp
23a2c     0B 1E 06 F1 | 	add	local01, #11
23a30     0F 41 48 FC | 	wrbyte	#32, local01
23a34     14 4E 05 F1 | 	add	fp, #20
23a38     A7 12 02 FB | 	rdlong	arg01, fp
23a3c     14 4E 85 F1 | 	sub	fp, #20
23a40     A7 14 02 FB | 	rdlong	arg02, fp
23a44     30 4E 85 F1 | 	sub	fp, #48
23a48     00 16 06 F6 | 	mov	arg03, #0
23a4c     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
23a50     30 4E 05 F1 | 	add	fp, #48
23a54     A7 12 02 FB | 	rdlong	arg01, fp
23a58     1C 12 06 F1 | 	add	arg01, #28
23a5c     09 01 68 FC | 	wrlong	#0, arg01
23a60     14 4E 05 F1 | 	add	fp, #20
23a64     A7 1E 02 FB | 	rdlong	local01, fp
23a68     03 1E 06 F1 | 	add	local01, #3
23a6c     0F 03 48 FC | 	wrbyte	#1, local01
23a70     04 4E 05 F1 | 	add	fp, #4
23a74     A7 1E 0A FB | 	rdlong	local01, fp wz
23a78     48 4E 85 F1 | 	sub	fp, #72
23a7c     E8 00 90 AD |  if_e	jmp	#LR__3748
23a80     44 4E 05 F1 | 	add	fp, #68
23a84     A7 1E 02 FB | 	rdlong	local01, fp
23a88     30 1E 06 F1 | 	add	local01, #48
23a8c     0F 1F 02 FB | 	rdlong	local01, local01
23a90     14 4E 05 F1 | 	add	fp, #20
23a94     A7 1E 62 FC | 	wrlong	local01, fp
23a98     44 4E 85 F1 | 	sub	fp, #68
23a9c     A7 12 02 F6 | 	mov	arg01, fp
23aa0     34 4E 05 F1 | 	add	fp, #52
23aa4     A7 14 02 FB | 	rdlong	arg02, fp
23aa8     48 4E 85 F1 | 	sub	fp, #72
23aac     00 16 06 F6 | 	mov	arg03, #0
23ab0     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
23ab4     10 4E 05 F1 | 	add	fp, #16
23ab8     A7 FA 61 FC | 	wrlong	result1, fp
23abc     10 4E 85 F1 | 	sub	fp, #16
23ac0     00 FA 0D F2 | 	cmp	result1, #0 wz
23ac4     A0 00 90 5D |  if_ne	jmp	#LR__3748
23ac8     44 4E 05 F1 | 	add	fp, #68
23acc     A7 12 02 FB | 	rdlong	arg01, fp
23ad0     14 4E 05 F1 | 	add	fp, #20
23ad4     A7 14 02 FB | 	rdlong	arg02, fp
23ad8     58 4E 85 F1 | 	sub	fp, #88
23adc     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
23ae0     10 4E 05 F1 | 	add	fp, #16
23ae4     A7 FA 61 FC | 	wrlong	result1, fp
23ae8     34 4E 05 F1 | 	add	fp, #52
23aec     A7 18 02 FB | 	rdlong	arg04, fp
23af0     04 4E 05 F1 | 	add	fp, #4
23af4     A7 1E 02 FB | 	rdlong	local01, fp
23af8     48 4E 85 F1 | 	sub	fp, #72
23afc     01 1E 86 F1 | 	sub	local01, #1
23b00     10 18 06 F1 | 	add	arg04, #16
23b04     0C 1F 62 FC | 	wrlong	local01, arg04
23b08     5C 00 90 FD | 	jmp	#LR__3748
23b0c                 | LR__3745
23b0c     10 4E 05 F1 | 	add	fp, #16
23b10     A7 18 0A FB | 	rdlong	arg04, fp wz
23b14     10 4E 85 F1 | 	sub	fp, #16
23b18     4C 00 90 5D |  if_ne	jmp	#LR__3747
23b1c     1A 4E 05 F1 | 	add	fp, #26
23b20     A7 18 C2 FA | 	rdbyte	arg04, fp
23b24     1A 4E 85 F1 | 	sub	fp, #26
23b28     10 18 CE F7 | 	test	arg04, #16 wz
23b2c     10 4E 05 51 |  if_ne	add	fp, #16
23b30     A7 08 68 5C |  if_ne	wrlong	#4, fp
23b34     10 4E 85 51 |  if_ne	sub	fp, #16
23b38     2C 00 90 5D |  if_ne	jmp	#LR__3746
23b3c     0C 4E 05 F1 | 	add	fp, #12
23b40     A7 18 C2 FA | 	rdbyte	arg04, fp
23b44     0C 4E 85 F1 | 	sub	fp, #12
23b48     02 18 CE F7 | 	test	arg04, #2 wz
23b4c     1A 4E 05 51 |  if_ne	add	fp, #26
23b50     A7 1E C2 5A |  if_ne	rdbyte	local01, fp
23b54     1A 4E 85 51 |  if_ne	sub	fp, #26
23b58     01 1E CE 57 |  if_ne	test	local01, #1 wz
23b5c     10 4E 05 51 |  if_ne	add	fp, #16
23b60     A7 0E 68 5C |  if_ne	wrlong	#7, fp
23b64     10 4E 85 51 |  if_ne	sub	fp, #16
23b68                 | LR__3746
23b68                 | LR__3747
23b68                 | LR__3748
23b68     10 4E 05 F1 | 	add	fp, #16
23b6c     A7 1E 0A FB | 	rdlong	local01, fp wz
23b70     10 4E 85 F1 | 	sub	fp, #16
23b74     60 00 90 5D |  if_ne	jmp	#LR__3749
23b78     0C 4E 05 F1 | 	add	fp, #12
23b7c     A7 20 C2 FA | 	rdbyte	local02, fp
23b80     0C 4E 85 F1 | 	sub	fp, #12
23b84     08 20 CE F7 | 	test	local02, #8 wz
23b88     0C 4E 05 51 |  if_ne	add	fp, #12
23b8c     A7 20 C2 5A |  if_ne	rdbyte	local02, fp
23b90     40 20 46 55 |  if_ne	or	local02, #64
23b94     A7 20 42 5C |  if_ne	wrbyte	local02, fp
23b98     0C 4E 85 51 |  if_ne	sub	fp, #12
23b9c     04 4E 05 F1 | 	add	fp, #4
23ba0     A7 20 02 FB | 	rdlong	local02, fp
23ba4     40 4E 05 F1 | 	add	fp, #64
23ba8     A7 1E 02 FB | 	rdlong	local01, fp
23bac     30 1E 06 F1 | 	add	local01, #48
23bb0     0F 1F 02 FB | 	rdlong	local01, local01
23bb4     20 20 06 F1 | 	add	local02, #32
23bb8     10 1F 62 FC | 	wrlong	local01, local02
23bbc     40 4E 85 F1 | 	sub	fp, #64
23bc0     A7 20 02 FB | 	rdlong	local02, fp
23bc4     2C 4E 05 F1 | 	add	fp, #44
23bc8     A7 1E 02 FB | 	rdlong	local01, fp
23bcc     30 4E 85 F1 | 	sub	fp, #48
23bd0     24 20 06 F1 | 	add	local02, #36
23bd4     10 1F 62 FC | 	wrlong	local01, local02
23bd8                 | LR__3749
23bd8     10 4E 05 F1 | 	add	fp, #16
23bdc     A7 20 0A FB | 	rdlong	local02, fp wz
23be0     10 4E 85 F1 | 	sub	fp, #16
23be4     F4 02 90 5D |  if_ne	jmp	#LR__3755
23be8     04 4E 05 F1 | 	add	fp, #4
23bec     A7 20 02 FB | 	rdlong	local02, fp
23bf0     40 4E 05 F1 | 	add	fp, #64
23bf4     A7 12 02 FB | 	rdlong	arg01, fp
23bf8     14 4E 85 F1 | 	sub	fp, #20
23bfc     A7 14 02 FB | 	rdlong	arg02, fp
23c00     30 4E 85 F1 | 	sub	fp, #48
23c04     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
23c08     08 20 06 F1 | 	add	local02, #8
23c0c     10 FB 61 FC | 	wrlong	result1, local02
23c10     04 4E 05 F1 | 	add	fp, #4
23c14     A7 20 02 FB | 	rdlong	local02, fp
23c18     2C 4E 05 F1 | 	add	fp, #44
23c1c     A7 12 02 FB | 	rdlong	arg01, fp
23c20     1C 12 06 F1 | 	add	arg01, #28
23c24                 | ' {
23c24                 | ' 
23c24                 | ' 	return *((DWORD*)ptr);
23c24     09 FB 01 FB | 	rdlong	result1, arg01
23c28     0C 20 06 F1 | 	add	local02, #12
23c2c     10 FB 61 FC | 	wrlong	result1, local02
23c30     2C 4E 85 F1 | 	sub	fp, #44
23c34     A7 20 02 FB | 	rdlong	local02, fp
23c38     40 4E 05 F1 | 	add	fp, #64
23c3c     A7 1E 02 FB | 	rdlong	local01, fp
23c40     10 1F 62 FC | 	wrlong	local01, local02
23c44     40 4E 85 F1 | 	sub	fp, #64
23c48     A7 20 02 FB | 	rdlong	local02, fp
23c4c     40 4E 05 F1 | 	add	fp, #64
23c50     A7 1E 02 FB | 	rdlong	local01, fp
23c54     06 1E 06 F1 | 	add	local01, #6
23c58     0F 1F E2 FA | 	rdword	local01, local01
23c5c     04 20 06 F1 | 	add	local02, #4
23c60     10 1F 52 FC | 	wrword	local01, local02
23c64     40 4E 85 F1 | 	sub	fp, #64
23c68     A7 20 02 FB | 	rdlong	local02, fp
23c6c     08 4E 05 F1 | 	add	fp, #8
23c70     A7 1E C2 FA | 	rdbyte	local01, fp
23c74     10 20 06 F1 | 	add	local02, #16
23c78     10 1F 42 FC | 	wrbyte	local01, local02
23c7c     08 4E 85 F1 | 	sub	fp, #8
23c80     A7 20 02 FB | 	rdlong	local02, fp
23c84     11 20 06 F1 | 	add	local02, #17
23c88     10 01 48 FC | 	wrbyte	#0, local02
23c8c     A7 20 02 FB | 	rdlong	local02, fp
23c90     1C 20 06 F1 | 	add	local02, #28
23c94     10 01 68 FC | 	wrlong	#0, local02
23c98     A7 20 02 FB | 	rdlong	local02, fp
23c9c     14 20 06 F1 | 	add	local02, #20
23ca0     10 01 68 FC | 	wrlong	#0, local02
23ca4     A7 12 02 FB | 	rdlong	arg01, fp
23ca8     04 4E 85 F1 | 	sub	fp, #4
23cac     28 12 06 F1 | 	add	arg01, #40
23cb0     00 14 06 F6 | 	mov	arg02, #0
23cb4     09 16 C6 F9 | 	decod	arg03, #9
23cb8     98 00 A0 FD | 	call	#\builtin_bytefill_
23cbc     0C 4E 05 F1 | 	add	fp, #12
23cc0     A7 20 C2 FA | 	rdbyte	local02, fp
23cc4     0C 4E 85 F1 | 	sub	fp, #12
23cc8     20 20 CE F7 | 	test	local02, #32 wz
23ccc     0C 02 90 AD |  if_e	jmp	#LR__3754
23cd0     04 4E 05 F1 | 	add	fp, #4
23cd4     A7 1E 02 FB | 	rdlong	local01, fp
23cd8     04 4E 85 F1 | 	sub	fp, #4
23cdc     0C 1E 06 F1 | 	add	local01, #12
23ce0     0F 21 02 FB | 	rdlong	local02, local01
23ce4     01 20 16 F2 | 	cmp	local02, #1 wc
23ce8     F0 01 90 CD |  if_b	jmp	#LR__3754
23cec     04 4E 05 F1 | 	add	fp, #4
23cf0     A7 1E 02 FB | 	rdlong	local01, fp
23cf4     0F 21 02 F6 | 	mov	local02, local01
23cf8     0C 1E 06 F1 | 	add	local01, #12
23cfc     0F 1F 02 FB | 	rdlong	local01, local01
23d00     14 20 06 F1 | 	add	local02, #20
23d04     10 1F 62 FC | 	wrlong	local01, local02
23d08     40 4E 05 F1 | 	add	fp, #64
23d0c     A7 20 02 FB | 	rdlong	local02, fp
23d10     0A 20 06 F1 | 	add	local02, #10
23d14     10 21 E2 FA | 	rdword	local02, local02
23d18     09 20 66 F0 | 	shl	local02, #9
23d1c     08 4E 05 F1 | 	add	fp, #8
23d20     A7 20 62 FC | 	wrlong	local02, fp
23d24     48 4E 85 F1 | 	sub	fp, #72
23d28     A7 20 02 FB | 	rdlong	local02, fp
23d2c     08 20 06 F1 | 	add	local02, #8
23d30     10 1F 02 FB | 	rdlong	local01, local02
23d34     4C 4E 05 F1 | 	add	fp, #76
23d38     A7 1E 62 FC | 	wrlong	local01, fp
23d3c                 | ' 				fp->fptr = fp->obj.objsize;
23d3c                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
23d3c                 | ' 				clst = fp->obj.sclust;
23d3c                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
23d3c     4C 4E 85 F1 | 	sub	fp, #76
23d40     A7 20 02 FB | 	rdlong	local02, fp
23d44     0C 20 06 F1 | 	add	local02, #12
23d48     10 1F 02 FB | 	rdlong	local01, local02
23d4c     58 4E 05 F1 | 	add	fp, #88
23d50     A7 1E 62 FC | 	wrlong	local01, fp
23d54     5C 4E 85 F1 | 	sub	fp, #92
23d58                 | LR__3750
23d58     10 4E 05 F1 | 	add	fp, #16
23d5c     A7 20 0A FB | 	rdlong	local02, fp wz
23d60     10 4E 85 F1 | 	sub	fp, #16
23d64     94 00 90 5D |  if_ne	jmp	#LR__3751
23d68     5C 4E 05 F1 | 	add	fp, #92
23d6c     A7 20 02 FB | 	rdlong	local02, fp
23d70     10 4E 85 F1 | 	sub	fp, #16
23d74     A7 1E 02 FB | 	rdlong	local01, fp
23d78     4C 4E 85 F1 | 	sub	fp, #76
23d7c     0F 21 1A F2 | 	cmp	local02, local01 wcz
23d80     78 00 90 ED |  if_be	jmp	#LR__3751
23d84     04 4E 05 F1 | 	add	fp, #4
23d88     A7 12 02 FB | 	rdlong	arg01, fp
23d8c     4C 4E 05 F1 | 	add	fp, #76
23d90     A7 14 02 FB | 	rdlong	arg02, fp
23d94     50 4E 85 F1 | 	sub	fp, #80
23d98     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
23d9c     50 4E 05 F1 | 	add	fp, #80
23da0     A7 FA 61 FC | 	wrlong	result1, fp
23da4     50 4E 85 F1 | 	sub	fp, #80
23da8     02 FA 15 F2 | 	cmp	result1, #2 wc
23dac     10 4E 05 C1 |  if_b	add	fp, #16
23db0     A7 04 68 CC |  if_b	wrlong	#2, fp
23db4     10 4E 85 C1 |  if_b	sub	fp, #16
23db8     50 4E 05 F1 | 	add	fp, #80
23dbc     A7 20 02 FB | 	rdlong	local02, fp
23dc0     50 4E 85 F1 | 	sub	fp, #80
23dc4     FF FF 7F FF 
23dc8     FF 21 0E F2 | 	cmp	local02, ##-1 wz
23dcc     10 4E 05 A1 |  if_e	add	fp, #16
23dd0     A7 02 68 AC |  if_e	wrlong	#1, fp
23dd4     10 4E 85 A1 |  if_e	sub	fp, #16
23dd8     5C 4E 05 F1 | 	add	fp, #92
23ddc     A7 20 02 FB | 	rdlong	local02, fp
23de0     10 4E 85 F1 | 	sub	fp, #16
23de4     A7 1E 02 FB | 	rdlong	local01, fp
23de8     0F 21 82 F1 | 	sub	local02, local01
23dec     10 4E 05 F1 | 	add	fp, #16
23df0     A7 20 62 FC | 	wrlong	local02, fp
23df4     5C 4E 85 F1 | 	sub	fp, #92
23df8     5C FF 9F FD | 	jmp	#LR__3750
23dfc                 | LR__3751
23dfc     04 4E 05 F1 | 	add	fp, #4
23e00     A7 20 02 FB | 	rdlong	local02, fp
23e04     4C 4E 05 F1 | 	add	fp, #76
23e08     A7 1E 02 FB | 	rdlong	local01, fp
23e0c     18 20 06 F1 | 	add	local02, #24
23e10     10 1F 62 FC | 	wrlong	local01, local02
23e14     40 4E 85 F1 | 	sub	fp, #64
23e18     A7 20 0A FB | 	rdlong	local02, fp wz
23e1c     10 4E 85 F1 | 	sub	fp, #16
23e20     B8 00 90 5D |  if_ne	jmp	#LR__3753
23e24     5C 4E 05 F1 | 	add	fp, #92
23e28     A7 1E 02 FB | 	rdlong	local01, fp
23e2c     5C 4E 85 F1 | 	sub	fp, #92
23e30     FF 1F CE F7 | 	test	local01, #511 wz
23e34     A4 00 90 AD |  if_e	jmp	#LR__3753
23e38     44 4E 05 F1 | 	add	fp, #68
23e3c     A7 12 02 FB | 	rdlong	arg01, fp
23e40     0C 4E 05 F1 | 	add	fp, #12
23e44     A7 14 02 FB | 	rdlong	arg02, fp
23e48     50 4E 85 F1 | 	sub	fp, #80
23e4c     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
23e50     58 4E 05 F1 | 	add	fp, #88
23e54     A7 FA 61 FC | 	wrlong	result1, fp
23e58     00 FA 4D F2 | 	cmps	result1, #0 wz
23e5c     58 4E 85 F1 | 	sub	fp, #88
23e60     10 4E 05 A1 |  if_e	add	fp, #16
23e64     A7 04 68 AC |  if_e	wrlong	#2, fp
23e68     10 4E 85 A1 |  if_e	sub	fp, #16
23e6c     6C 00 90 AD |  if_e	jmp	#LR__3752
23e70     04 4E 05 F1 | 	add	fp, #4
23e74     A7 20 02 FB | 	rdlong	local02, fp
23e78     54 4E 05 F1 | 	add	fp, #84
23e7c     A7 1E 02 FB | 	rdlong	local01, fp
23e80     04 4E 05 F1 | 	add	fp, #4
23e84     A7 18 02 FB | 	rdlong	arg04, fp
23e88     09 18 46 F0 | 	shr	arg04, #9
23e8c     0C 1F 02 F1 | 	add	local01, arg04
23e90     1C 20 06 F1 | 	add	local02, #28
23e94     10 1F 62 FC | 	wrlong	local01, local02
23e98     18 4E 85 F1 | 	sub	fp, #24
23e9c     A7 20 02 FB | 	rdlong	local02, fp
23ea0     01 20 06 F1 | 	add	local02, #1
23ea4     10 13 C2 FA | 	rdbyte	arg01, local02
23ea8     40 4E 85 F1 | 	sub	fp, #64
23eac     A7 20 02 FB | 	rdlong	local02, fp
23eb0     10 15 02 F6 | 	mov	arg02, local02
23eb4     28 14 06 F1 | 	add	arg02, #40
23eb8     04 4E 85 F1 | 	sub	fp, #4
23ebc     1C 20 06 F1 | 	add	local02, #28
23ec0     10 17 02 FB | 	rdlong	arg03, local02
23ec4     01 18 06 F6 | 	mov	arg04, #1
23ec8     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
23ecc     00 FA 0D F2 | 	cmp	result1, #0 wz
23ed0     10 4E 05 51 |  if_ne	add	fp, #16
23ed4     A7 02 68 5C |  if_ne	wrlong	#1, fp
23ed8     10 4E 85 51 |  if_ne	sub	fp, #16
23edc                 | LR__3752
23edc                 | LR__3753
23edc                 | LR__3754
23edc                 | LR__3755
23edc                 | LR__3756
23edc     10 4E 05 F1 | 	add	fp, #16
23ee0     A7 20 0A FB | 	rdlong	local02, fp wz
23ee4     10 4E 85 F1 | 	sub	fp, #16
23ee8     04 4E 05 51 |  if_ne	add	fp, #4
23eec     A7 20 02 5B |  if_ne	rdlong	local02, fp
23ef0     04 4E 85 51 |  if_ne	sub	fp, #4
23ef4     10 01 68 5C |  if_ne	wrlong	#0, local02
23ef8                 | ' 
23ef8                 | ' 	return res ;
23ef8     10 4E 05 F1 | 	add	fp, #16
23efc     A7 FA 01 FB | 	rdlong	result1, fp
23f00     10 4E 85 F1 | 	sub	fp, #16
23f04                 | LR__3757
23f04     A7 F0 03 F6 | 	mov	ptra, fp
23f08     B2 00 A0 FD | 	call	#popregs_
23f0c                 | _fatfs_cc_f_open_ret
23f0c     2D 00 64 FD | 	ret
23f10                 | 
23f10                 | _fatfs_cc_f_read
23f10     0E 4A 05 F6 | 	mov	COUNT_, #14
23f14     A8 00 A0 FD | 	call	#pushregs_
23f18     38 F0 07 F1 | 	add	ptra, #56
23f1c     04 4E 05 F1 | 	add	fp, #4
23f20     A7 12 62 FC | 	wrlong	arg01, fp
23f24     04 4E 05 F1 | 	add	fp, #4
23f28     A7 14 62 FC | 	wrlong	arg02, fp
23f2c     04 4E 05 F1 | 	add	fp, #4
23f30     A7 16 62 FC | 	wrlong	arg03, fp
23f34     04 4E 05 F1 | 	add	fp, #4
23f38     A7 18 62 FC | 	wrlong	arg04, fp
23f3c     08 4E 85 F1 | 	sub	fp, #8
23f40     A7 FA 01 FB | 	rdlong	result1, fp
23f44     2C 4E 05 F1 | 	add	fp, #44
23f48     A7 FA 61 FC | 	wrlong	result1, fp
23f4c     24 4E 85 F1 | 	sub	fp, #36
23f50     A7 FA 01 FB | 	rdlong	result1, fp
23f54     FD 00 68 FC | 	wrlong	#0, result1
23f58     0C 4E 85 F1 | 	sub	fp, #12
23f5c     A7 12 02 FB | 	rdlong	arg01, fp
23f60     14 4E 05 F1 | 	add	fp, #20
23f64     A7 14 02 F6 | 	mov	arg02, fp
23f68     18 4E 85 F1 | 	sub	fp, #24
23f6c     24 F7 BF FD | 	call	#_fatfs_cc_validate
23f70     14 4E 05 F1 | 	add	fp, #20
23f74     A7 FA 61 FC | 	wrlong	result1, fp
23f78     00 FA 4D F2 | 	cmps	result1, #0 wz
23f7c     14 4E 85 F1 | 	sub	fp, #20
23f80     20 00 90 5D |  if_ne	jmp	#LR__3760
23f84     04 4E 05 F1 | 	add	fp, #4
23f88     A7 14 02 FB | 	rdlong	arg02, fp
23f8c     11 14 06 F1 | 	add	arg02, #17
23f90     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
23f94     10 4E 05 F1 | 	add	fp, #16
23f98     A7 14 62 FC | 	wrlong	arg02, fp
23f9c     14 4E 85 F1 | 	sub	fp, #20
23fa0     10 00 90 AD |  if_e	jmp	#LR__3761
23fa4                 | LR__3760
23fa4     14 4E 05 F1 | 	add	fp, #20
23fa8     A7 FA 01 FB | 	rdlong	result1, fp
23fac     14 4E 85 F1 | 	sub	fp, #20
23fb0     EC 05 90 FD | 	jmp	#LR__3780
23fb4                 | LR__3761
23fb4     04 4E 05 F1 | 	add	fp, #4
23fb8     A7 18 02 FB | 	rdlong	arg04, fp
23fbc     04 4E 85 F1 | 	sub	fp, #4
23fc0     10 18 06 F1 | 	add	arg04, #16
23fc4     0C 19 C2 FA | 	rdbyte	arg04, arg04
23fc8     01 18 CE F7 | 	test	arg04, #1 wz
23fcc     07 FA 05 A6 |  if_e	mov	result1, #7
23fd0     CC 05 90 AD |  if_e	jmp	#LR__3780
23fd4     04 4E 05 F1 | 	add	fp, #4
23fd8     A7 1E 02 FB | 	rdlong	local01, fp
23fdc     0F 21 02 F6 | 	mov	local02, local01
23fe0     0C 20 06 F1 | 	add	local02, #12
23fe4     10 23 02 FB | 	rdlong	local03, local02
23fe8     14 1E 06 F1 | 	add	local01, #20
23fec     0F 1F 02 FB | 	rdlong	local01, local01
23ff0     0F 23 82 F1 | 	sub	local03, local01
23ff4     20 4E 05 F1 | 	add	fp, #32
23ff8     A7 22 62 FC | 	wrlong	local03, fp
23ffc     18 4E 85 F1 | 	sub	fp, #24
24000     A7 24 02 FB | 	rdlong	local04, fp
24004     0C 4E 85 F1 | 	sub	fp, #12
24008     11 25 1A F2 | 	cmp	local04, local03 wcz
2400c     24 4E 05 11 |  if_a	add	fp, #36
24010     A7 24 02 1B |  if_a	rdlong	local04, fp
24014     18 4E 85 11 |  if_a	sub	fp, #24
24018     A7 24 62 1C |  if_a	wrlong	local04, fp
2401c     0C 4E 85 11 |  if_a	sub	fp, #12
24020                 | ' 
24020                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
24020                 | LR__3762
24020     0C 4E 05 F1 | 	add	fp, #12
24024     A7 20 02 FB | 	rdlong	local02, fp
24028     0C 4E 85 F1 | 	sub	fp, #12
2402c     10 25 02 F6 | 	mov	local04, local02
24030     01 24 16 F2 | 	cmp	local04, #1 wc
24034     64 05 90 CD |  if_b	jmp	#LR__3779
24038     04 4E 05 F1 | 	add	fp, #4
2403c     A7 22 02 FB | 	rdlong	local03, fp
24040     04 4E 85 F1 | 	sub	fp, #4
24044     14 22 06 F1 | 	add	local03, #20
24048     11 23 02 FB | 	rdlong	local03, local03
2404c     FF 23 CE F7 | 	test	local03, #511 wz
24050     3C 04 90 5D |  if_ne	jmp	#LR__3777
24054     04 4E 05 F1 | 	add	fp, #4
24058     A7 1E 02 FB | 	rdlong	local01, fp
2405c     14 1E 06 F1 | 	add	local01, #20
24060     0F 23 02 FB | 	rdlong	local03, local01
24064     09 22 46 F0 | 	shr	local03, #9
24068     14 4E 05 F1 | 	add	fp, #20
2406c     A7 26 02 FB | 	rdlong	local05, fp
24070     13 29 02 F6 | 	mov	local06, local05
24074     0A 28 06 F1 | 	add	local06, #10
24078     14 2B E2 FA | 	rdword	local07, local06
2407c     0A 28 86 F1 | 	sub	local06, #10
24080     15 2D 32 F9 | 	getword	local08, local07, #0
24084     01 2C 86 F1 | 	sub	local08, #1
24088     16 23 0A F5 | 	and	local03, local08 wz
2408c     18 4E 05 F1 | 	add	fp, #24
24090     A7 22 62 FC | 	wrlong	local03, fp
24094     30 4E 85 F1 | 	sub	fp, #48
24098     E0 00 90 5D |  if_ne	jmp	#LR__3767
2409c     04 4E 05 F1 | 	add	fp, #4
240a0     A7 22 02 FB | 	rdlong	local03, fp
240a4     04 4E 85 F1 | 	sub	fp, #4
240a8     14 22 06 F1 | 	add	local03, #20
240ac     11 23 0A FB | 	rdlong	local03, local03 wz
240b0     20 00 90 5D |  if_ne	jmp	#LR__3763
240b4     04 4E 05 F1 | 	add	fp, #4
240b8     A7 22 02 FB | 	rdlong	local03, fp
240bc     08 22 06 F1 | 	add	local03, #8
240c0     11 23 02 FB | 	rdlong	local03, local03
240c4     18 4E 05 F1 | 	add	fp, #24
240c8     A7 22 62 FC | 	wrlong	local03, fp
240cc     1C 4E 85 F1 | 	sub	fp, #28
240d0     28 00 90 FD | 	jmp	#LR__3764
240d4                 | LR__3763
240d4     04 4E 05 F1 | 	add	fp, #4
240d8     A7 2C 02 FB | 	rdlong	local08, fp
240dc     16 13 02 F6 | 	mov	arg01, local08
240e0     04 4E 85 F1 | 	sub	fp, #4
240e4     18 2C 06 F1 | 	add	local08, #24
240e8     16 15 02 FB | 	rdlong	arg02, local08
240ec     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
240f0     1C 4E 05 F1 | 	add	fp, #28
240f4     A7 FA 61 FC | 	wrlong	result1, fp
240f8     1C 4E 85 F1 | 	sub	fp, #28
240fc                 | LR__3764
240fc     1C 4E 05 F1 | 	add	fp, #28
24100     A7 22 02 FB | 	rdlong	local03, fp
24104     1C 4E 85 F1 | 	sub	fp, #28
24108     02 22 16 F2 | 	cmp	local03, #2 wc
2410c     1C 00 90 3D |  if_ae	jmp	#LR__3765
24110     04 4E 05 F1 | 	add	fp, #4
24114     A7 22 02 FB | 	rdlong	local03, fp
24118     04 4E 85 F1 | 	sub	fp, #4
2411c     11 22 06 F1 | 	add	local03, #17
24120     11 05 48 FC | 	wrbyte	#2, local03
24124     02 FA 05 F6 | 	mov	result1, #2
24128     74 04 90 FD | 	jmp	#LR__3780
2412c                 | LR__3765
2412c     1C 4E 05 F1 | 	add	fp, #28
24130     A7 22 02 FB | 	rdlong	local03, fp
24134     1C 4E 85 F1 | 	sub	fp, #28
24138     FF FF 7F FF 
2413c     FF 23 0E F2 | 	cmp	local03, ##-1 wz
24140     1C 00 90 5D |  if_ne	jmp	#LR__3766
24144     04 4E 05 F1 | 	add	fp, #4
24148     A7 22 02 FB | 	rdlong	local03, fp
2414c     04 4E 85 F1 | 	sub	fp, #4
24150     11 22 06 F1 | 	add	local03, #17
24154     11 03 48 FC | 	wrbyte	#1, local03
24158     01 FA 05 F6 | 	mov	result1, #1
2415c     40 04 90 FD | 	jmp	#LR__3780
24160                 | LR__3766
24160     04 4E 05 F1 | 	add	fp, #4
24164     A7 22 02 FB | 	rdlong	local03, fp
24168     18 4E 05 F1 | 	add	fp, #24
2416c     A7 2C 02 FB | 	rdlong	local08, fp
24170     1C 4E 85 F1 | 	sub	fp, #28
24174     18 22 06 F1 | 	add	local03, #24
24178     11 2D 62 FC | 	wrlong	local08, local03
2417c                 | LR__3767
2417c     18 4E 05 F1 | 	add	fp, #24
24180     A7 12 02 FB | 	rdlong	arg01, fp
24184     14 4E 85 F1 | 	sub	fp, #20
24188     A7 22 02 FB | 	rdlong	local03, fp
2418c     04 4E 85 F1 | 	sub	fp, #4
24190     18 22 06 F1 | 	add	local03, #24
24194     11 15 02 FB | 	rdlong	arg02, local03
24198     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
2419c     20 4E 05 F1 | 	add	fp, #32
241a0     A7 FA 61 FC | 	wrlong	result1, fp
241a4     20 4E 85 F1 | 	sub	fp, #32
241a8     00 FA 0D F2 | 	cmp	result1, #0 wz
241ac     1C 00 90 5D |  if_ne	jmp	#LR__3768
241b0     04 4E 05 F1 | 	add	fp, #4
241b4     A7 22 02 FB | 	rdlong	local03, fp
241b8     04 4E 85 F1 | 	sub	fp, #4
241bc     11 22 06 F1 | 	add	local03, #17
241c0     11 05 48 FC | 	wrbyte	#2, local03
241c4     02 FA 05 F6 | 	mov	result1, #2
241c8     D4 03 90 FD | 	jmp	#LR__3780
241cc                 | LR__3768
241cc     20 4E 05 F1 | 	add	fp, #32
241d0     A7 22 02 FB | 	rdlong	local03, fp
241d4     10 4E 05 F1 | 	add	fp, #16
241d8     A7 2C 02 FB | 	rdlong	local08, fp
241dc     16 23 02 F1 | 	add	local03, local08
241e0     10 4E 85 F1 | 	sub	fp, #16
241e4     A7 22 62 FC | 	wrlong	local03, fp
241e8     14 4E 85 F1 | 	sub	fp, #20
241ec     A7 22 02 FB | 	rdlong	local03, fp
241f0     09 22 46 F0 | 	shr	local03, #9
241f4     20 4E 05 F1 | 	add	fp, #32
241f8     A7 22 62 FC | 	wrlong	local03, fp
241fc     2C 4E 85 F1 | 	sub	fp, #44
24200     01 22 16 F2 | 	cmp	local03, #1 wc
24204     5C 01 90 CD |  if_b	jmp	#LR__3772
24208     30 4E 05 F1 | 	add	fp, #48
2420c     A7 22 02 FB | 	rdlong	local03, fp
24210     04 4E 85 F1 | 	sub	fp, #4
24214     A7 2C 02 FB | 	rdlong	local08, fp
24218     16 23 02 F1 | 	add	local03, local08
2421c     14 4E 85 F1 | 	sub	fp, #20
24220     A7 2C 02 FB | 	rdlong	local08, fp
24224     18 4E 85 F1 | 	sub	fp, #24
24228     0A 2C 06 F1 | 	add	local08, #10
2422c     16 2D E2 FA | 	rdword	local08, local08
24230     16 23 1A F2 | 	cmp	local03, local08 wcz
24234     28 00 90 ED |  if_be	jmp	#LR__3769
24238     18 4E 05 F1 | 	add	fp, #24
2423c     A7 1E 02 FB | 	rdlong	local01, fp
24240     0A 1E 06 F1 | 	add	local01, #10
24244     0F 23 E2 FA | 	rdword	local03, local01
24248     18 4E 05 F1 | 	add	fp, #24
2424c     A7 2C 02 FB | 	rdlong	local08, fp
24250     16 23 82 F1 | 	sub	local03, local08
24254     04 4E 85 F1 | 	sub	fp, #4
24258     A7 22 62 FC | 	wrlong	local03, fp
2425c     2C 4E 85 F1 | 	sub	fp, #44
24260                 | LR__3769
24260     18 4E 05 F1 | 	add	fp, #24
24264     A7 1E 02 FB | 	rdlong	local01, fp
24268     01 1E 06 F1 | 	add	local01, #1
2426c     0F 13 C2 FA | 	rdbyte	arg01, local01
24270     1C 4E 05 F1 | 	add	fp, #28
24274     A7 14 02 FB | 	rdlong	arg02, fp
24278     14 4E 85 F1 | 	sub	fp, #20
2427c     A7 16 02 FB | 	rdlong	arg03, fp
24280     0C 4E 05 F1 | 	add	fp, #12
24284     A7 18 02 FB | 	rdlong	arg04, fp
24288     2C 4E 85 F1 | 	sub	fp, #44
2428c     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
24290     00 FA 0D F2 | 	cmp	result1, #0 wz
24294     1C 00 90 AD |  if_e	jmp	#LR__3770
24298     04 4E 05 F1 | 	add	fp, #4
2429c     A7 22 02 FB | 	rdlong	local03, fp
242a0     04 4E 85 F1 | 	sub	fp, #4
242a4     11 22 06 F1 | 	add	local03, #17
242a8     11 03 48 FC | 	wrbyte	#1, local03
242ac     01 FA 05 F6 | 	mov	result1, #1
242b0     EC 02 90 FD | 	jmp	#LR__3780
242b4                 | LR__3770
242b4     04 4E 05 F1 | 	add	fp, #4
242b8     A7 1E 02 FB | 	rdlong	local01, fp
242bc     04 4E 85 F1 | 	sub	fp, #4
242c0     10 1E 06 F1 | 	add	local01, #16
242c4     0F 23 C2 FA | 	rdbyte	local03, local01
242c8     80 22 CE F7 | 	test	local03, #128 wz
242cc     78 00 90 AD |  if_e	jmp	#LR__3771
242d0     04 4E 05 F1 | 	add	fp, #4
242d4     A7 2C 02 FB | 	rdlong	local08, fp
242d8     1C 2C 06 F1 | 	add	local08, #28
242dc     16 2D 02 FB | 	rdlong	local08, local08
242e0     1C 4E 05 F1 | 	add	fp, #28
242e4     A7 2E 02 FB | 	rdlong	local09, fp
242e8     17 2D 82 F1 | 	sub	local08, local09
242ec     0C 4E 05 F1 | 	add	fp, #12
242f0     A7 30 02 FB | 	rdlong	local10, fp
242f4     2C 4E 85 F1 | 	sub	fp, #44
242f8     18 33 02 F6 | 	mov	local11, local10
242fc     19 2D 12 F2 | 	cmp	local08, local11 wc
24300     44 00 90 3D |  if_ae	jmp	#LR__3771
24304     34 4E 05 F1 | 	add	fp, #52
24308     A7 12 02 FB | 	rdlong	arg01, fp
2430c     30 4E 85 F1 | 	sub	fp, #48
24310     A7 14 02 FB | 	rdlong	arg02, fp
24314     0A 33 02 F6 | 	mov	local11, arg02
24318     1C 32 06 F1 | 	add	local11, #28
2431c     19 2F 02 FB | 	rdlong	local09, local11
24320     1C 4E 05 F1 | 	add	fp, #28
24324     A7 26 02 FB | 	rdlong	local05, fp
24328     13 2F 82 F1 | 	sub	local09, local05
2432c     09 2E 66 F0 | 	shl	local09, #9
24330     17 33 02 F6 | 	mov	local11, local09
24334     17 13 02 F1 | 	add	arg01, local09
24338     20 4E 85 F1 | 	sub	fp, #32
2433c     28 14 06 F1 | 	add	arg02, #40
24340     09 16 C6 F9 | 	decod	arg03, #9
24344     50 49 BF FD | 	call	#__system____builtin_memmove
24348                 | LR__3771
24348     2C 4E 05 F1 | 	add	fp, #44
2434c     A7 22 02 FB | 	rdlong	local03, fp
24350     09 22 66 F0 | 	shl	local03, #9
24354     04 4E 85 F1 | 	sub	fp, #4
24358     A7 22 62 FC | 	wrlong	local03, fp
2435c     28 4E 85 F1 | 	sub	fp, #40
24360                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
24360                 | ' 				}
24360                 | ' 
24360                 | ' 
24360                 | ' 				rcnt =  ((UINT) 512 )  * cc;
24360                 | ' 				continue;
24360     B4 01 90 FD | 	jmp	#LR__3778
24364                 | LR__3772
24364     04 4E 05 F1 | 	add	fp, #4
24368     A7 22 02 FB | 	rdlong	local03, fp
2436c     1C 22 06 F1 | 	add	local03, #28
24370     11 23 02 FB | 	rdlong	local03, local03
24374     1C 4E 05 F1 | 	add	fp, #28
24378     A7 1E 02 FB | 	rdlong	local01, fp
2437c     20 4E 85 F1 | 	sub	fp, #32
24380     0F 23 0A F2 | 	cmp	local03, local01 wz
24384     EC 00 90 AD |  if_e	jmp	#LR__3776
24388     04 4E 05 F1 | 	add	fp, #4
2438c     A7 1E 02 FB | 	rdlong	local01, fp
24390     04 4E 85 F1 | 	sub	fp, #4
24394     10 1E 06 F1 | 	add	local01, #16
24398     0F 23 C2 FA | 	rdbyte	local03, local01
2439c     80 22 CE F7 | 	test	local03, #128 wz
243a0     7C 00 90 AD |  if_e	jmp	#LR__3774
243a4     18 4E 05 F1 | 	add	fp, #24
243a8     A7 1E 02 FB | 	rdlong	local01, fp
243ac     01 1E 06 F1 | 	add	local01, #1
243b0     0F 13 C2 FA | 	rdbyte	arg01, local01
243b4     14 4E 85 F1 | 	sub	fp, #20
243b8     A7 22 02 FB | 	rdlong	local03, fp
243bc     11 15 02 F6 | 	mov	arg02, local03
243c0     28 14 06 F1 | 	add	arg02, #40
243c4     04 4E 85 F1 | 	sub	fp, #4
243c8     1C 22 06 F1 | 	add	local03, #28
243cc     11 17 02 FB | 	rdlong	arg03, local03
243d0     01 18 06 F6 | 	mov	arg04, #1
243d4     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
243d8     00 FA 0D F2 | 	cmp	result1, #0 wz
243dc     1C 00 90 AD |  if_e	jmp	#LR__3773
243e0     04 4E 05 F1 | 	add	fp, #4
243e4     A7 22 02 FB | 	rdlong	local03, fp
243e8     04 4E 85 F1 | 	sub	fp, #4
243ec     11 22 06 F1 | 	add	local03, #17
243f0     11 03 48 FC | 	wrbyte	#1, local03
243f4     01 FA 05 F6 | 	mov	result1, #1
243f8     A4 01 90 FD | 	jmp	#LR__3780
243fc                 | LR__3773
243fc     04 4E 05 F1 | 	add	fp, #4
24400     A7 32 02 FB | 	rdlong	local11, fp
24404     19 23 02 F6 | 	mov	local03, local11
24408     04 4E 85 F1 | 	sub	fp, #4
2440c     10 32 06 F1 | 	add	local11, #16
24410     19 33 C2 FA | 	rdbyte	local11, local11
24414     7F 32 06 F5 | 	and	local11, #127
24418     10 22 06 F1 | 	add	local03, #16
2441c     11 33 42 FC | 	wrbyte	local11, local03
24420                 | LR__3774
24420     18 4E 05 F1 | 	add	fp, #24
24424     A7 1E 02 FB | 	rdlong	local01, fp
24428     01 1E 06 F1 | 	add	local01, #1
2442c     0F 13 C2 FA | 	rdbyte	arg01, local01
24430     14 4E 85 F1 | 	sub	fp, #20
24434     A7 14 02 FB | 	rdlong	arg02, fp
24438     28 14 06 F1 | 	add	arg02, #40
2443c     1C 4E 05 F1 | 	add	fp, #28
24440     A7 16 02 FB | 	rdlong	arg03, fp
24444     20 4E 85 F1 | 	sub	fp, #32
24448     01 18 06 F6 | 	mov	arg04, #1
2444c     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
24450     00 FA 0D F2 | 	cmp	result1, #0 wz
24454     1C 00 90 AD |  if_e	jmp	#LR__3775
24458     04 4E 05 F1 | 	add	fp, #4
2445c     A7 22 02 FB | 	rdlong	local03, fp
24460     04 4E 85 F1 | 	sub	fp, #4
24464     11 22 06 F1 | 	add	local03, #17
24468     11 03 48 FC | 	wrbyte	#1, local03
2446c     01 FA 05 F6 | 	mov	result1, #1
24470     2C 01 90 FD | 	jmp	#LR__3780
24474                 | LR__3775
24474                 | LR__3776
24474     04 4E 05 F1 | 	add	fp, #4
24478     A7 22 02 FB | 	rdlong	local03, fp
2447c     1C 4E 05 F1 | 	add	fp, #28
24480     A7 32 02 FB | 	rdlong	local11, fp
24484     20 4E 85 F1 | 	sub	fp, #32
24488     1C 22 06 F1 | 	add	local03, #28
2448c     11 33 62 FC | 	wrlong	local11, local03
24490                 | LR__3777
24490     04 4E 05 F1 | 	add	fp, #4
24494     A7 1E 02 FB | 	rdlong	local01, fp
24498     14 1E 06 F1 | 	add	local01, #20
2449c     0F 33 02 FB | 	rdlong	local11, local01
244a0     FF 33 06 F5 | 	and	local11, #511
244a4     09 22 C6 F9 | 	decod	local03, #9
244a8     19 23 82 F1 | 	sub	local03, local11
244ac     24 4E 05 F1 | 	add	fp, #36
244b0     A7 22 62 FC | 	wrlong	local03, fp
244b4     1C 4E 85 F1 | 	sub	fp, #28
244b8     A7 32 02 FB | 	rdlong	local11, fp
244bc     0C 4E 85 F1 | 	sub	fp, #12
244c0     19 23 1A F2 | 	cmp	local03, local11 wcz
244c4     0C 4E 05 11 |  if_a	add	fp, #12
244c8     A7 22 02 1B |  if_a	rdlong	local03, fp
244cc     1C 4E 05 11 |  if_a	add	fp, #28
244d0     A7 22 62 1C |  if_a	wrlong	local03, fp
244d4     28 4E 85 11 |  if_a	sub	fp, #40
244d8     34 4E 05 F1 | 	add	fp, #52
244dc     A7 12 02 FB | 	rdlong	arg01, fp
244e0     30 4E 85 F1 | 	sub	fp, #48
244e4     A7 28 02 FB | 	rdlong	local06, fp
244e8     14 15 02 F6 | 	mov	arg02, local06
244ec     28 14 06 F1 | 	add	arg02, #40
244f0     14 28 06 F1 | 	add	local06, #20
244f4     14 33 02 FB | 	rdlong	local11, local06
244f8     19 2F 02 F6 | 	mov	local09, local11
244fc     17 31 02 F6 | 	mov	local10, local09
24500     FF 31 06 F5 | 	and	local10, #511
24504     18 15 02 F1 | 	add	arg02, local10
24508     24 4E 05 F1 | 	add	fp, #36
2450c     A7 16 02 FB | 	rdlong	arg03, fp
24510     28 4E 85 F1 | 	sub	fp, #40
24514     80 47 BF FD | 	call	#__system____builtin_memmove
24518                 | LR__3778
24518     0C 4E 05 F1 | 	add	fp, #12
2451c     A7 22 02 FB | 	rdlong	local03, fp
24520     1C 4E 05 F1 | 	add	fp, #28
24524     A7 2C 02 FB | 	rdlong	local08, fp
24528     16 23 82 F1 | 	sub	local03, local08
2452c     1C 4E 85 F1 | 	sub	fp, #28
24530     A7 22 62 FC | 	wrlong	local03, fp
24534     04 4E 05 F1 | 	add	fp, #4
24538     A7 1E 02 FB | 	rdlong	local01, fp
2453c     0F 2B 02 FB | 	rdlong	local07, local01
24540     18 4E 05 F1 | 	add	fp, #24
24544     A7 2C 02 FB | 	rdlong	local08, fp
24548     16 2B 02 F1 | 	add	local07, local08
2454c     0F 2B 62 FC | 	wrlong	local07, local01
24550     0C 4E 05 F1 | 	add	fp, #12
24554     A7 22 02 FB | 	rdlong	local03, fp
24558     0C 4E 85 F1 | 	sub	fp, #12
2455c     A7 34 02 FB | 	rdlong	local12, fp
24560     1A 23 02 F1 | 	add	local03, local12
24564     0C 4E 05 F1 | 	add	fp, #12
24568     A7 22 62 FC | 	wrlong	local03, fp
2456c     30 4E 85 F1 | 	sub	fp, #48
24570     A7 36 02 FB | 	rdlong	local13, fp
24574     1B 23 02 F6 | 	mov	local03, local13
24578     14 36 06 F1 | 	add	local13, #20
2457c     1B 39 02 FB | 	rdlong	local14, local13
24580     24 4E 05 F1 | 	add	fp, #36
24584     A7 28 02 FB | 	rdlong	local06, fp
24588     28 4E 85 F1 | 	sub	fp, #40
2458c     14 39 02 F1 | 	add	local14, local06
24590     14 22 06 F1 | 	add	local03, #20
24594     11 39 62 FC | 	wrlong	local14, local03
24598     84 FA 9F FD | 	jmp	#LR__3762
2459c                 | LR__3779
2459c                 | ' 
2459c                 | ' 
2459c                 | ' 
2459c                 | ' 
2459c                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
2459c                 | ' 
2459c                 | ' 	}
2459c                 | ' 
2459c                 | ' 	return FR_OK ;
2459c     00 FA 05 F6 | 	mov	result1, #0
245a0                 | LR__3780
245a0     A7 F0 03 F6 | 	mov	ptra, fp
245a4     B2 00 A0 FD | 	call	#popregs_
245a8                 | _fatfs_cc_f_read_ret
245a8     2D 00 64 FD | 	ret
245ac                 | 
245ac                 | _fatfs_cc_f_write
245ac     15 4A 05 F6 | 	mov	COUNT_, #21
245b0     A8 00 A0 FD | 	call	#pushregs_
245b4     34 F0 07 F1 | 	add	ptra, #52
245b8     04 4E 05 F1 | 	add	fp, #4
245bc     A7 12 62 FC | 	wrlong	arg01, fp
245c0     04 4E 05 F1 | 	add	fp, #4
245c4     A7 14 62 FC | 	wrlong	arg02, fp
245c8     04 4E 05 F1 | 	add	fp, #4
245cc     A7 16 62 FC | 	wrlong	arg03, fp
245d0     04 4E 05 F1 | 	add	fp, #4
245d4     A7 18 62 FC | 	wrlong	arg04, fp
245d8     08 4E 85 F1 | 	sub	fp, #8
245dc     A7 FA 01 FB | 	rdlong	result1, fp
245e0     28 4E 05 F1 | 	add	fp, #40
245e4     A7 FA 61 FC | 	wrlong	result1, fp
245e8     20 4E 85 F1 | 	sub	fp, #32
245ec     A7 FA 01 FB | 	rdlong	result1, fp
245f0     FD 00 68 FC | 	wrlong	#0, result1
245f4     0C 4E 85 F1 | 	sub	fp, #12
245f8     A7 12 02 FB | 	rdlong	arg01, fp
245fc     14 4E 05 F1 | 	add	fp, #20
24600     A7 14 02 F6 | 	mov	arg02, fp
24604     18 4E 85 F1 | 	sub	fp, #24
24608     88 F0 BF FD | 	call	#_fatfs_cc_validate
2460c     14 4E 05 F1 | 	add	fp, #20
24610     A7 FA 61 FC | 	wrlong	result1, fp
24614     00 FA 4D F2 | 	cmps	result1, #0 wz
24618     14 4E 85 F1 | 	sub	fp, #20
2461c     20 00 90 5D |  if_ne	jmp	#LR__3790
24620     04 4E 05 F1 | 	add	fp, #4
24624     A7 14 02 FB | 	rdlong	arg02, fp
24628     11 14 06 F1 | 	add	arg02, #17
2462c     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
24630     10 4E 05 F1 | 	add	fp, #16
24634     A7 14 62 FC | 	wrlong	arg02, fp
24638     14 4E 85 F1 | 	sub	fp, #20
2463c     10 00 90 AD |  if_e	jmp	#LR__3791
24640                 | LR__3790
24640     14 4E 05 F1 | 	add	fp, #20
24644     A7 FA 01 FB | 	rdlong	result1, fp
24648     14 4E 85 F1 | 	sub	fp, #20
2464c     44 07 90 FD | 	jmp	#LR__3813
24650                 | LR__3791
24650     04 4E 05 F1 | 	add	fp, #4
24654     A7 14 02 FB | 	rdlong	arg02, fp
24658     04 4E 85 F1 | 	sub	fp, #4
2465c     10 14 06 F1 | 	add	arg02, #16
24660     0A 15 C2 FA | 	rdbyte	arg02, arg02
24664     02 14 CE F7 | 	test	arg02, #2 wz
24668     07 FA 05 A6 |  if_e	mov	result1, #7
2466c     24 07 90 AD |  if_e	jmp	#LR__3813
24670     04 4E 05 F1 | 	add	fp, #4
24674     A7 14 02 FB | 	rdlong	arg02, fp
24678     0A 13 02 F6 | 	mov	arg01, arg02
2467c     14 12 06 F1 | 	add	arg01, #20
24680     09 13 02 FB | 	rdlong	arg01, arg01
24684     08 4E 05 F1 | 	add	fp, #8
24688     A7 FA 01 FB | 	rdlong	result1, fp
2468c     FD 12 02 F1 | 	add	arg01, result1
24690     0C 4E 85 F1 | 	sub	fp, #12
24694     14 14 06 F1 | 	add	arg02, #20
24698     0A FB 01 FB | 	rdlong	result1, arg02
2469c     FD 12 12 F2 | 	cmp	arg01, result1 wc
246a0     24 00 90 3D |  if_ae	jmp	#LR__3792
246a4     04 4E 05 F1 | 	add	fp, #4
246a8     A7 14 02 FB | 	rdlong	arg02, fp
246ac     01 FA 65 F6 | 	neg	result1, #1
246b0     14 14 06 F1 | 	add	arg02, #20
246b4     0A 15 02 FB | 	rdlong	arg02, arg02
246b8     0A FB 81 F1 | 	sub	result1, arg02
246bc     08 4E 05 F1 | 	add	fp, #8
246c0     A7 FA 61 FC | 	wrlong	result1, fp
246c4     0C 4E 85 F1 | 	sub	fp, #12
246c8                 | LR__3792
246c8                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
246c8                 | ' 	}
246c8                 | ' 
246c8                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
246c8                 | LR__3793
246c8     0C 4E 05 F1 | 	add	fp, #12
246cc     A7 FA 01 FB | 	rdlong	result1, fp
246d0     0C 4E 85 F1 | 	sub	fp, #12
246d4     01 FA 15 F2 | 	cmp	result1, #1 wc
246d8     90 06 90 CD |  if_b	jmp	#LR__3812
246dc     04 4E 05 F1 | 	add	fp, #4
246e0     A7 FA 01 FB | 	rdlong	result1, fp
246e4     04 4E 85 F1 | 	sub	fp, #4
246e8     14 FA 05 F1 | 	add	result1, #20
246ec     FD FA 01 FB | 	rdlong	result1, result1
246f0     FF FB CD F7 | 	test	result1, #511 wz
246f4     D8 04 90 5D |  if_ne	jmp	#LR__3808
246f8     04 4E 05 F1 | 	add	fp, #4
246fc     A7 FA 01 FB | 	rdlong	result1, fp
24700     14 FA 05 F1 | 	add	result1, #20
24704     FD FA 01 FB | 	rdlong	result1, result1
24708     09 FA 45 F0 | 	shr	result1, #9
2470c     14 4E 05 F1 | 	add	fp, #20
24710     A7 14 02 FB | 	rdlong	arg02, fp
24714     0A 14 06 F1 | 	add	arg02, #10
24718     0A 19 E2 FA | 	rdword	arg04, arg02
2471c     0C 15 32 F9 | 	getword	arg02, arg04, #0
24720     01 14 86 F1 | 	sub	arg02, #1
24724     0A FB 09 F5 | 	and	result1, arg02 wz
24728     14 4E 05 F1 | 	add	fp, #20
2472c     A7 FA 61 FC | 	wrlong	result1, fp
24730     2C 4E 85 F1 | 	sub	fp, #44
24734     44 01 90 5D |  if_ne	jmp	#LR__3799
24738     04 4E 05 F1 | 	add	fp, #4
2473c     A7 FA 01 FB | 	rdlong	result1, fp
24740     04 4E 85 F1 | 	sub	fp, #4
24744     14 FA 05 F1 | 	add	result1, #20
24748     FD 14 0A FB | 	rdlong	arg02, result1 wz
2474c     44 00 90 5D |  if_ne	jmp	#LR__3794
24750     04 4E 05 F1 | 	add	fp, #4
24754     A7 14 02 FB | 	rdlong	arg02, fp
24758     08 14 06 F1 | 	add	arg02, #8
2475c     0A 15 0A FB | 	rdlong	arg02, arg02 wz
24760     18 4E 05 F1 | 	add	fp, #24
24764     A7 14 62 FC | 	wrlong	arg02, fp
24768     1C 4E 85 F1 | 	sub	fp, #28
2476c     4C 00 90 5D |  if_ne	jmp	#LR__3795
24770     04 4E 05 F1 | 	add	fp, #4
24774     A7 12 02 FB | 	rdlong	arg01, fp
24778     04 4E 85 F1 | 	sub	fp, #4
2477c     00 14 06 F6 | 	mov	arg02, #0
24780     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
24784     1C 4E 05 F1 | 	add	fp, #28
24788     A7 FA 61 FC | 	wrlong	result1, fp
2478c     1C 4E 85 F1 | 	sub	fp, #28
24790     28 00 90 FD | 	jmp	#LR__3795
24794                 | LR__3794
24794     04 4E 05 F1 | 	add	fp, #4
24798     A7 18 02 FB | 	rdlong	arg04, fp
2479c     0C 13 02 F6 | 	mov	arg01, arg04
247a0     04 4E 85 F1 | 	sub	fp, #4
247a4     18 18 06 F1 | 	add	arg04, #24
247a8     0C 15 02 FB | 	rdlong	arg02, arg04
247ac     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
247b0     1C 4E 05 F1 | 	add	fp, #28
247b4     A7 FA 61 FC | 	wrlong	result1, fp
247b8     1C 4E 85 F1 | 	sub	fp, #28
247bc                 | LR__3795
247bc     1C 4E 05 F1 | 	add	fp, #28
247c0     A7 FA 09 FB | 	rdlong	result1, fp wz
247c4     1C 4E 85 F1 | 	sub	fp, #28
247c8     A0 05 90 AD |  if_e	jmp	#LR__3812
247cc     1C 4E 05 F1 | 	add	fp, #28
247d0     A7 FA 01 FB | 	rdlong	result1, fp
247d4     1C 4E 85 F1 | 	sub	fp, #28
247d8     01 FA 0D F2 | 	cmp	result1, #1 wz
247dc     1C 00 90 5D |  if_ne	jmp	#LR__3796
247e0     04 4E 05 F1 | 	add	fp, #4
247e4     A7 FA 01 FB | 	rdlong	result1, fp
247e8     04 4E 85 F1 | 	sub	fp, #4
247ec     11 FA 05 F1 | 	add	result1, #17
247f0     FD 04 48 FC | 	wrbyte	#2, result1
247f4     02 FA 05 F6 | 	mov	result1, #2
247f8     98 05 90 FD | 	jmp	#LR__3813
247fc                 | LR__3796
247fc     1C 4E 05 F1 | 	add	fp, #28
24800     A7 FA 01 FB | 	rdlong	result1, fp
24804     1C 4E 85 F1 | 	sub	fp, #28
24808     FF FF 7F FF 
2480c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
24810     1C 00 90 5D |  if_ne	jmp	#LR__3797
24814     04 4E 05 F1 | 	add	fp, #4
24818     A7 FA 01 FB | 	rdlong	result1, fp
2481c     04 4E 85 F1 | 	sub	fp, #4
24820     11 FA 05 F1 | 	add	result1, #17
24824     FD 02 48 FC | 	wrbyte	#1, result1
24828     01 FA 05 F6 | 	mov	result1, #1
2482c     64 05 90 FD | 	jmp	#LR__3813
24830                 | LR__3797
24830     04 4E 05 F1 | 	add	fp, #4
24834     A7 FA 01 FB | 	rdlong	result1, fp
24838     18 4E 05 F1 | 	add	fp, #24
2483c     A7 18 02 FB | 	rdlong	arg04, fp
24840     18 FA 05 F1 | 	add	result1, #24
24844     FD 18 62 FC | 	wrlong	arg04, result1
24848     18 4E 85 F1 | 	sub	fp, #24
2484c     A7 FA 01 FB | 	rdlong	result1, fp
24850     04 4E 85 F1 | 	sub	fp, #4
24854     08 FA 05 F1 | 	add	result1, #8
24858     FD FA 09 FB | 	rdlong	result1, result1 wz
2485c     1C 00 90 5D |  if_ne	jmp	#LR__3798
24860     04 4E 05 F1 | 	add	fp, #4
24864     A7 18 02 FB | 	rdlong	arg04, fp
24868     18 4E 05 F1 | 	add	fp, #24
2486c     A7 FA 01 FB | 	rdlong	result1, fp
24870     1C 4E 85 F1 | 	sub	fp, #28
24874     08 18 06 F1 | 	add	arg04, #8
24878     0C FB 61 FC | 	wrlong	result1, arg04
2487c                 | LR__3798
2487c                 | LR__3799
2487c     04 4E 05 F1 | 	add	fp, #4
24880     A7 18 02 FB | 	rdlong	arg04, fp
24884     04 4E 85 F1 | 	sub	fp, #4
24888     10 18 06 F1 | 	add	arg04, #16
2488c     0C 19 C2 FA | 	rdbyte	arg04, arg04
24890     80 18 CE F7 | 	test	arg04, #128 wz
24894     7C 00 90 AD |  if_e	jmp	#LR__3801
24898     18 4E 05 F1 | 	add	fp, #24
2489c     A7 18 02 FB | 	rdlong	arg04, fp
248a0     01 18 06 F1 | 	add	arg04, #1
248a4     0C 13 C2 FA | 	rdbyte	arg01, arg04
248a8     14 4E 85 F1 | 	sub	fp, #20
248ac     A7 18 02 FB | 	rdlong	arg04, fp
248b0     0C 15 02 F6 | 	mov	arg02, arg04
248b4     28 14 06 F1 | 	add	arg02, #40
248b8     04 4E 85 F1 | 	sub	fp, #4
248bc     1C 18 06 F1 | 	add	arg04, #28
248c0     0C 17 02 FB | 	rdlong	arg03, arg04
248c4     01 18 06 F6 | 	mov	arg04, #1
248c8     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
248cc     00 FA 0D F2 | 	cmp	result1, #0 wz
248d0     1C 00 90 AD |  if_e	jmp	#LR__3800
248d4     04 4E 05 F1 | 	add	fp, #4
248d8     A7 FA 01 FB | 	rdlong	result1, fp
248dc     04 4E 85 F1 | 	sub	fp, #4
248e0     11 FA 05 F1 | 	add	result1, #17
248e4     FD 02 48 FC | 	wrbyte	#1, result1
248e8     01 FA 05 F6 | 	mov	result1, #1
248ec     A4 04 90 FD | 	jmp	#LR__3813
248f0                 | LR__3800
248f0     04 4E 05 F1 | 	add	fp, #4
248f4     A7 18 02 FB | 	rdlong	arg04, fp
248f8     0C FB 01 F6 | 	mov	result1, arg04
248fc     04 4E 85 F1 | 	sub	fp, #4
24900     10 18 06 F1 | 	add	arg04, #16
24904     0C 19 C2 FA | 	rdbyte	arg04, arg04
24908     7F 18 06 F5 | 	and	arg04, #127
2490c     10 FA 05 F1 | 	add	result1, #16
24910     FD 18 42 FC | 	wrbyte	arg04, result1
24914                 | LR__3801
24914     18 4E 05 F1 | 	add	fp, #24
24918     A7 12 02 FB | 	rdlong	arg01, fp
2491c     14 4E 85 F1 | 	sub	fp, #20
24920     A7 14 02 FB | 	rdlong	arg02, fp
24924     04 4E 85 F1 | 	sub	fp, #4
24928     18 14 06 F1 | 	add	arg02, #24
2492c     0A 15 02 FB | 	rdlong	arg02, arg02
24930     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
24934     20 4E 05 F1 | 	add	fp, #32
24938     A7 FA 61 FC | 	wrlong	result1, fp
2493c     20 4E 85 F1 | 	sub	fp, #32
24940     00 FA 0D F2 | 	cmp	result1, #0 wz
24944     1C 00 90 5D |  if_ne	jmp	#LR__3802
24948     04 4E 05 F1 | 	add	fp, #4
2494c     A7 FA 01 FB | 	rdlong	result1, fp
24950     04 4E 85 F1 | 	sub	fp, #4
24954     11 FA 05 F1 | 	add	result1, #17
24958     FD 04 48 FC | 	wrbyte	#2, result1
2495c     02 FA 05 F6 | 	mov	result1, #2
24960     30 04 90 FD | 	jmp	#LR__3813
24964                 | LR__3802
24964     20 4E 05 F1 | 	add	fp, #32
24968     A7 FA 01 FB | 	rdlong	result1, fp
2496c     0C 4E 05 F1 | 	add	fp, #12
24970     A7 1E 02 FB | 	rdlong	local01, fp
24974     0F FB 01 F1 | 	add	result1, local01
24978     0C 4E 85 F1 | 	sub	fp, #12
2497c     A7 FA 61 FC | 	wrlong	result1, fp
24980     14 4E 85 F1 | 	sub	fp, #20
24984     A7 FA 01 FB | 	rdlong	result1, fp
24988     09 FA 45 F0 | 	shr	result1, #9
2498c     1C 4E 05 F1 | 	add	fp, #28
24990     A7 FA 61 FC | 	wrlong	result1, fp
24994     28 4E 85 F1 | 	sub	fp, #40
24998     01 FA 15 F2 | 	cmp	result1, #1 wc
2499c     60 01 90 CD |  if_b	jmp	#LR__3806
249a0     2C 4E 05 F1 | 	add	fp, #44
249a4     A7 FA 01 FB | 	rdlong	result1, fp
249a8     04 4E 85 F1 | 	sub	fp, #4
249ac     A7 18 02 FB | 	rdlong	arg04, fp
249b0     0C FB 01 F1 | 	add	result1, arg04
249b4     10 4E 85 F1 | 	sub	fp, #16
249b8     A7 18 02 FB | 	rdlong	arg04, fp
249bc     18 4E 85 F1 | 	sub	fp, #24
249c0     0A 18 06 F1 | 	add	arg04, #10
249c4     0C 19 E2 FA | 	rdword	arg04, arg04
249c8     0C FB 19 F2 | 	cmp	result1, arg04 wcz
249cc     28 00 90 ED |  if_be	jmp	#LR__3803
249d0     18 4E 05 F1 | 	add	fp, #24
249d4     A7 FA 01 FB | 	rdlong	result1, fp
249d8     0A FA 05 F1 | 	add	result1, #10
249dc     FD FA E1 FA | 	rdword	result1, result1
249e0     14 4E 05 F1 | 	add	fp, #20
249e4     A7 18 02 FB | 	rdlong	arg04, fp
249e8     0C FB 81 F1 | 	sub	result1, arg04
249ec     04 4E 85 F1 | 	sub	fp, #4
249f0     A7 FA 61 FC | 	wrlong	result1, fp
249f4     28 4E 85 F1 | 	sub	fp, #40
249f8                 | LR__3803
249f8     18 4E 05 F1 | 	add	fp, #24
249fc     A7 18 02 FB | 	rdlong	arg04, fp
24a00     01 18 06 F1 | 	add	arg04, #1
24a04     0C 13 C2 FA | 	rdbyte	arg01, arg04
24a08     18 4E 05 F1 | 	add	fp, #24
24a0c     A7 14 02 FB | 	rdlong	arg02, fp
24a10     10 4E 85 F1 | 	sub	fp, #16
24a14     A7 16 02 FB | 	rdlong	arg03, fp
24a18     08 4E 05 F1 | 	add	fp, #8
24a1c     A7 18 02 FB | 	rdlong	arg04, fp
24a20     28 4E 85 F1 | 	sub	fp, #40
24a24     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
24a28     00 FA 0D F2 | 	cmp	result1, #0 wz
24a2c     1C 00 90 AD |  if_e	jmp	#LR__3804
24a30     04 4E 05 F1 | 	add	fp, #4
24a34     A7 1E 02 FB | 	rdlong	local01, fp
24a38     04 4E 85 F1 | 	sub	fp, #4
24a3c     11 1E 06 F1 | 	add	local01, #17
24a40     0F 03 48 FC | 	wrbyte	#1, local01
24a44     01 FA 05 F6 | 	mov	result1, #1
24a48     48 03 90 FD | 	jmp	#LR__3813
24a4c                 | LR__3804
24a4c     04 4E 05 F1 | 	add	fp, #4
24a50     A7 FA 01 FB | 	rdlong	result1, fp
24a54     1C FA 05 F1 | 	add	result1, #28
24a58     FD FA 01 FB | 	rdlong	result1, result1
24a5c     1C 4E 05 F1 | 	add	fp, #28
24a60     A7 20 02 FB | 	rdlong	local02, fp
24a64     10 FB 81 F1 | 	sub	result1, local02
24a68     08 4E 05 F1 | 	add	fp, #8
24a6c     A7 18 02 FB | 	rdlong	arg04, fp
24a70     28 4E 85 F1 | 	sub	fp, #40
24a74     0C FB 11 F2 | 	cmp	result1, arg04 wc
24a78     68 00 90 3D |  if_ae	jmp	#LR__3805
24a7c     04 4E 05 F1 | 	add	fp, #4
24a80     A7 12 02 FB | 	rdlong	arg01, fp
24a84     28 12 06 F1 | 	add	arg01, #40
24a88     2C 4E 05 F1 | 	add	fp, #44
24a8c     A7 14 02 FB | 	rdlong	arg02, fp
24a90     2C 4E 85 F1 | 	sub	fp, #44
24a94     A7 FA 01 FB | 	rdlong	result1, fp
24a98     1C FA 05 F1 | 	add	result1, #28
24a9c     FD 22 02 FB | 	rdlong	local03, result1
24aa0     1C 4E 05 F1 | 	add	fp, #28
24aa4     A7 18 02 FB | 	rdlong	arg04, fp
24aa8     20 4E 85 F1 | 	sub	fp, #32
24aac     0C 23 82 F1 | 	sub	local03, arg04
24ab0     09 22 66 F0 | 	shl	local03, #9
24ab4     11 15 02 F1 | 	add	arg02, local03
24ab8     09 16 C6 F9 | 	decod	arg03, #9
24abc     D8 41 BF FD | 	call	#__system____builtin_memmove
24ac0     04 4E 05 F1 | 	add	fp, #4
24ac4     A7 18 02 FB | 	rdlong	arg04, fp
24ac8     0C FB 01 F6 | 	mov	result1, arg04
24acc     04 4E 85 F1 | 	sub	fp, #4
24ad0     10 18 06 F1 | 	add	arg04, #16
24ad4     0C 19 C2 FA | 	rdbyte	arg04, arg04
24ad8     7F 18 06 F5 | 	and	arg04, #127
24adc     10 FA 05 F1 | 	add	result1, #16
24ae0     FD 18 42 FC | 	wrbyte	arg04, result1
24ae4                 | LR__3805
24ae4     28 4E 05 F1 | 	add	fp, #40
24ae8     A7 FA 01 FB | 	rdlong	result1, fp
24aec     09 FA 65 F0 | 	shl	result1, #9
24af0     04 4E 85 F1 | 	sub	fp, #4
24af4     A7 FA 61 FC | 	wrlong	result1, fp
24af8     24 4E 85 F1 | 	sub	fp, #36
24afc                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
24afc                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
24afc                 | ' 				}
24afc                 | ' 
24afc                 | ' 
24afc                 | ' 				wcnt =  ((UINT) 512 )  * cc;
24afc                 | ' 				continue;
24afc     74 01 90 FD | 	jmp	#LR__3809
24b00                 | LR__3806
24b00     04 4E 05 F1 | 	add	fp, #4
24b04     A7 20 02 FB | 	rdlong	local02, fp
24b08     1C 20 06 F1 | 	add	local02, #28
24b0c     10 FB 01 FB | 	rdlong	result1, local02
24b10     1C 4E 05 F1 | 	add	fp, #28
24b14     A7 20 02 FB | 	rdlong	local02, fp
24b18     20 4E 85 F1 | 	sub	fp, #32
24b1c     10 FB 09 F2 | 	cmp	result1, local02 wz
24b20     90 00 90 AD |  if_e	jmp	#LR__3807
24b24     04 4E 05 F1 | 	add	fp, #4
24b28     A7 FA 01 FB | 	rdlong	result1, fp
24b2c     FD 22 02 F6 | 	mov	local03, result1
24b30     04 4E 85 F1 | 	sub	fp, #4
24b34     14 22 06 F1 | 	add	local03, #20
24b38     11 23 02 FB | 	rdlong	local03, local03
24b3c     0C FA 05 F1 | 	add	result1, #12
24b40     FD 24 02 FB | 	rdlong	local04, result1
24b44     12 27 02 F6 | 	mov	local05, local04
24b48     13 23 12 F2 | 	cmp	local03, local05 wc
24b4c     64 00 90 3D |  if_ae	jmp	#LR__3807
24b50     18 4E 05 F1 | 	add	fp, #24
24b54     A7 18 02 FB | 	rdlong	arg04, fp
24b58     01 18 06 F1 | 	add	arg04, #1
24b5c     0C 13 C2 FA | 	rdbyte	arg01, arg04
24b60     14 4E 85 F1 | 	sub	fp, #20
24b64     A7 28 02 FB | 	rdlong	local06, fp
24b68     28 28 06 F1 | 	add	local06, #40
24b6c     14 2B 02 F6 | 	mov	local07, local06
24b70     1C 4E 05 F1 | 	add	fp, #28
24b74     A7 2C 02 FB | 	rdlong	local08, fp
24b78     20 4E 85 F1 | 	sub	fp, #32
24b7c     01 2E 06 F6 | 	mov	local09, #1
24b80     15 15 02 F6 | 	mov	arg02, local07
24b84     16 17 02 F6 | 	mov	arg03, local08
24b88     01 18 06 F6 | 	mov	arg04, #1
24b8c     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
24b90     FD 30 0A F6 | 	mov	local10, result1 wz
24b94     1C 00 90 AD |  if_e	jmp	#LR__3807
24b98     04 4E 05 F1 | 	add	fp, #4
24b9c     A7 30 02 FB | 	rdlong	local10, fp
24ba0     04 4E 85 F1 | 	sub	fp, #4
24ba4     11 30 06 F1 | 	add	local10, #17
24ba8     18 03 48 FC | 	wrbyte	#1, local10
24bac                 | ' 				fp->fptr < fp->obj.objsize &&
24bac                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
24bac                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
24bac     01 FA 05 F6 | 	mov	result1, #1
24bb0     E0 01 90 FD | 	jmp	#LR__3813
24bb4                 | LR__3807
24bb4     04 4E 05 F1 | 	add	fp, #4
24bb8     A7 18 02 FB | 	rdlong	arg04, fp
24bbc     1C 4E 05 F1 | 	add	fp, #28
24bc0     A7 FA 01 FB | 	rdlong	result1, fp
24bc4     20 4E 85 F1 | 	sub	fp, #32
24bc8     1C 18 06 F1 | 	add	arg04, #28
24bcc     0C FB 61 FC | 	wrlong	result1, arg04
24bd0                 | LR__3808
24bd0     04 4E 05 F1 | 	add	fp, #4
24bd4     A7 FA 01 FB | 	rdlong	result1, fp
24bd8     14 FA 05 F1 | 	add	result1, #20
24bdc     FD FA 01 FB | 	rdlong	result1, result1
24be0     FF FB 05 F5 | 	and	result1, #511
24be4     09 32 C6 F9 | 	decod	local11, #9
24be8     FD 32 82 F1 | 	sub	local11, result1
24bec     20 4E 05 F1 | 	add	fp, #32
24bf0     A7 32 62 FC | 	wrlong	local11, fp
24bf4     18 4E 85 F1 | 	sub	fp, #24
24bf8     A7 FA 01 FB | 	rdlong	result1, fp
24bfc     0C 4E 85 F1 | 	sub	fp, #12
24c00     FD 32 1A F2 | 	cmp	local11, result1 wcz
24c04     0C 4E 05 11 |  if_a	add	fp, #12
24c08     A7 32 02 1B |  if_a	rdlong	local11, fp
24c0c     18 4E 05 11 |  if_a	add	fp, #24
24c10     A7 32 62 1C |  if_a	wrlong	local11, fp
24c14     24 4E 85 11 |  if_a	sub	fp, #36
24c18     04 4E 05 F1 | 	add	fp, #4
24c1c     A7 32 02 FB | 	rdlong	local11, fp
24c20     19 13 02 F6 | 	mov	arg01, local11
24c24     28 12 06 F1 | 	add	arg01, #40
24c28     14 32 06 F1 | 	add	local11, #20
24c2c     19 33 02 FB | 	rdlong	local11, local11
24c30     FF 33 06 F5 | 	and	local11, #511
24c34     19 13 02 F1 | 	add	arg01, local11
24c38     2C 4E 05 F1 | 	add	fp, #44
24c3c     A7 14 02 FB | 	rdlong	arg02, fp
24c40     0C 4E 85 F1 | 	sub	fp, #12
24c44     A7 16 02 FB | 	rdlong	arg03, fp
24c48     24 4E 85 F1 | 	sub	fp, #36
24c4c     48 40 BF FD | 	call	#__system____builtin_memmove
24c50     04 4E 05 F1 | 	add	fp, #4
24c54     A7 FA 01 FB | 	rdlong	result1, fp
24c58     FD 32 02 F6 | 	mov	local11, result1
24c5c     04 4E 85 F1 | 	sub	fp, #4
24c60     10 FA 05 F1 | 	add	result1, #16
24c64     FD FA C1 FA | 	rdbyte	result1, result1
24c68     80 FA 45 F5 | 	or	result1, #128
24c6c     10 32 06 F1 | 	add	local11, #16
24c70     19 FB 41 FC | 	wrbyte	result1, local11
24c74                 | LR__3809
24c74     0C 4E 05 F1 | 	add	fp, #12
24c78     A7 32 02 FB | 	rdlong	local11, fp
24c7c     18 4E 05 F1 | 	add	fp, #24
24c80     A7 FA 01 FB | 	rdlong	result1, fp
24c84     FD 32 82 F1 | 	sub	local11, result1
24c88     18 4E 85 F1 | 	sub	fp, #24
24c8c     A7 32 62 FC | 	wrlong	local11, fp
24c90     04 4E 05 F1 | 	add	fp, #4
24c94     A7 34 02 FB | 	rdlong	local12, fp
24c98     1A 33 02 FB | 	rdlong	local11, local12
24c9c     14 4E 05 F1 | 	add	fp, #20
24ca0     A7 36 02 FB | 	rdlong	local13, fp
24ca4     1B 33 02 F1 | 	add	local11, local13
24ca8     1A 33 62 FC | 	wrlong	local11, local12
24cac     0C 4E 05 F1 | 	add	fp, #12
24cb0     A7 32 02 FB | 	rdlong	local11, fp
24cb4     0C 4E 85 F1 | 	sub	fp, #12
24cb8     A7 38 02 FB | 	rdlong	local14, fp
24cbc     1C 33 02 F1 | 	add	local11, local14
24cc0     0C 4E 05 F1 | 	add	fp, #12
24cc4     A7 32 62 FC | 	wrlong	local11, fp
24cc8     2C 4E 85 F1 | 	sub	fp, #44
24ccc     A7 3A 02 FB | 	rdlong	local15, fp
24cd0     1D 33 02 F6 | 	mov	local11, local15
24cd4     14 3A 06 F1 | 	add	local15, #20
24cd8     1D 3B 02 FB | 	rdlong	local15, local15
24cdc     20 4E 05 F1 | 	add	fp, #32
24ce0     A7 3C 02 FB | 	rdlong	local16, fp
24ce4     1E 3B 02 F1 | 	add	local15, local16
24ce8     14 32 06 F1 | 	add	local11, #20
24cec     19 3B 62 FC | 	wrlong	local15, local11
24cf0     20 4E 85 F1 | 	sub	fp, #32
24cf4     A7 3E 02 FB | 	rdlong	local17, fp
24cf8     1F 33 02 F6 | 	mov	local11, local17
24cfc     1F 41 02 F6 | 	mov	local18, local17
24d00     04 4E 85 F1 | 	sub	fp, #4
24d04     14 3E 06 F1 | 	add	local17, #20
24d08     1F 43 02 FB | 	rdlong	local19, local17
24d0c     0C 40 06 F1 | 	add	local18, #12
24d10     20 45 02 FB | 	rdlong	local20, local18
24d14     22 43 1A F2 | 	cmp	local19, local20 wcz
24d18     24 00 90 ED |  if_be	jmp	#LR__3810
24d1c     04 4E 05 F1 | 	add	fp, #4
24d20     A7 26 02 FB | 	rdlong	local05, fp
24d24     04 4E 85 F1 | 	sub	fp, #4
24d28     13 23 02 F6 | 	mov	local03, local05
24d2c     14 22 06 F1 | 	add	local03, #20
24d30     11 25 02 FB | 	rdlong	local04, local03
24d34     14 22 86 F1 | 	sub	local03, #20
24d38     12 47 02 F6 | 	mov	local21, local04
24d3c     20 00 90 FD | 	jmp	#LR__3811
24d40                 | LR__3810
24d40     04 4E 05 F1 | 	add	fp, #4
24d44     A7 2A 02 FB | 	rdlong	local07, fp
24d48     04 4E 85 F1 | 	sub	fp, #4
24d4c     15 31 02 F6 | 	mov	local10, local07
24d50     0C 30 06 F1 | 	add	local10, #12
24d54     18 2D 02 FB | 	rdlong	local08, local10
24d58     0C 30 86 F1 | 	sub	local10, #12
24d5c     16 47 02 F6 | 	mov	local21, local08
24d60                 | LR__3811
24d60     0C 32 06 F1 | 	add	local11, #12
24d64     19 47 62 FC | 	wrlong	local21, local11
24d68     5C F9 9F FD | 	jmp	#LR__3793
24d6c                 | LR__3812
24d6c     04 4E 05 F1 | 	add	fp, #4
24d70     A7 34 02 FB | 	rdlong	local12, fp
24d74     1A 1F 02 F6 | 	mov	local01, local12
24d78     04 4E 85 F1 | 	sub	fp, #4
24d7c     10 34 06 F1 | 	add	local12, #16
24d80     1A 33 C2 FA | 	rdbyte	local11, local12
24d84     40 32 46 F5 | 	or	local11, #64
24d88     10 1E 06 F1 | 	add	local01, #16
24d8c     0F 33 42 FC | 	wrbyte	local11, local01
24d90                 | ' 
24d90                 | ' 
24d90                 | ' 
24d90                 | ' 
24d90                 | ' 
24d90                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
24d90                 | ' 		fp->flag |=  0x80 ;
24d90                 | ' 
24d90                 | ' 	}
24d90                 | ' 
24d90                 | ' 	fp->flag |=  0x40 ;
24d90                 | ' 
24d90                 | ' 	return FR_OK ;
24d90     00 FA 05 F6 | 	mov	result1, #0
24d94                 | LR__3813
24d94     A7 F0 03 F6 | 	mov	ptra, fp
24d98     B2 00 A0 FD | 	call	#popregs_
24d9c                 | _fatfs_cc_f_write_ret
24d9c     2D 00 64 FD | 	ret
24da0                 | 
24da0                 | _fatfs_cc_f_sync
24da0     00 4A 05 F6 | 	mov	COUNT_, #0
24da4     A8 00 A0 FD | 	call	#pushregs_
24da8     18 F0 07 F1 | 	add	ptra, #24
24dac     04 4E 05 F1 | 	add	fp, #4
24db0     A7 12 62 FC | 	wrlong	arg01, fp
24db4     08 4E 05 F1 | 	add	fp, #8
24db8     A7 14 02 F6 | 	mov	arg02, fp
24dbc     0C 4E 85 F1 | 	sub	fp, #12
24dc0     D0 E8 BF FD | 	call	#_fatfs_cc_validate
24dc4     08 4E 05 F1 | 	add	fp, #8
24dc8     A7 FA 61 FC | 	wrlong	result1, fp
24dcc     08 4E 85 F1 | 	sub	fp, #8
24dd0     00 FA 0D F2 | 	cmp	result1, #0 wz
24dd4     C0 01 90 5D |  if_ne	jmp	#LR__3823
24dd8     04 4E 05 F1 | 	add	fp, #4
24ddc     A7 18 02 FB | 	rdlong	arg04, fp
24de0     04 4E 85 F1 | 	sub	fp, #4
24de4     10 18 06 F1 | 	add	arg04, #16
24de8     0C 19 C2 FA | 	rdbyte	arg04, arg04
24dec     40 18 CE F7 | 	test	arg04, #64 wz
24df0     A4 01 90 AD |  if_e	jmp	#LR__3822
24df4     04 4E 05 F1 | 	add	fp, #4
24df8     A7 18 02 FB | 	rdlong	arg04, fp
24dfc     04 4E 85 F1 | 	sub	fp, #4
24e00     10 18 06 F1 | 	add	arg04, #16
24e04     0C 19 C2 FA | 	rdbyte	arg04, arg04
24e08     80 18 CE F7 | 	test	arg04, #128 wz
24e0c     64 00 90 AD |  if_e	jmp	#LR__3820
24e10     0C 4E 05 F1 | 	add	fp, #12
24e14     A7 18 02 FB | 	rdlong	arg04, fp
24e18     01 18 06 F1 | 	add	arg04, #1
24e1c     0C 13 C2 FA | 	rdbyte	arg01, arg04
24e20     08 4E 85 F1 | 	sub	fp, #8
24e24     A7 18 02 FB | 	rdlong	arg04, fp
24e28     0C 15 02 F6 | 	mov	arg02, arg04
24e2c     28 14 06 F1 | 	add	arg02, #40
24e30     04 4E 85 F1 | 	sub	fp, #4
24e34     1C 18 06 F1 | 	add	arg04, #28
24e38     0C 17 02 FB | 	rdlong	arg03, arg04
24e3c     01 18 06 F6 | 	mov	arg04, #1
24e40     0C AE BF FD | 	call	#_fatfs_cc_disk_write
24e44     00 FA 0D F2 | 	cmp	result1, #0 wz
24e48     01 FA 05 56 |  if_ne	mov	result1, #1
24e4c     54 01 90 5D |  if_ne	jmp	#LR__3824
24e50     04 4E 05 F1 | 	add	fp, #4
24e54     A7 18 02 FB | 	rdlong	arg04, fp
24e58     0C 17 02 F6 | 	mov	arg03, arg04
24e5c     04 4E 85 F1 | 	sub	fp, #4
24e60     10 18 06 F1 | 	add	arg04, #16
24e64     0C 19 C2 FA | 	rdbyte	arg04, arg04
24e68     7F 18 06 F5 | 	and	arg04, #127
24e6c     10 16 06 F1 | 	add	arg03, #16
24e70     0B 19 42 FC | 	wrbyte	arg04, arg03
24e74                 | LR__3820
24e74     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
24e78     10 4E 05 F1 | 	add	fp, #16
24e7c     A7 FA 61 FC | 	wrlong	result1, fp
24e80     04 4E 85 F1 | 	sub	fp, #4
24e84     A7 12 02 FB | 	rdlong	arg01, fp
24e88     08 4E 85 F1 | 	sub	fp, #8
24e8c     A7 18 02 FB | 	rdlong	arg04, fp
24e90     04 4E 85 F1 | 	sub	fp, #4
24e94     20 18 06 F1 | 	add	arg04, #32
24e98     0C 15 02 FB | 	rdlong	arg02, arg04
24e9c     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
24ea0     08 4E 05 F1 | 	add	fp, #8
24ea4     A7 FA 61 FC | 	wrlong	result1, fp
24ea8     08 4E 85 F1 | 	sub	fp, #8
24eac     00 FA 0D F2 | 	cmp	result1, #0 wz
24eb0     E4 00 90 5D |  if_ne	jmp	#LR__3821
24eb4     04 4E 05 F1 | 	add	fp, #4
24eb8     A7 18 02 FB | 	rdlong	arg04, fp
24ebc     24 18 06 F1 | 	add	arg04, #36
24ec0     0C 19 02 FB | 	rdlong	arg04, arg04
24ec4     10 4E 05 F1 | 	add	fp, #16
24ec8     A7 18 62 FC | 	wrlong	arg04, fp
24ecc     0C 17 02 F6 | 	mov	arg03, arg04
24ed0     0B 16 06 F1 | 	add	arg03, #11
24ed4     0B 17 C2 FA | 	rdbyte	arg03, arg03
24ed8     20 16 46 F5 | 	or	arg03, #32
24edc     0B 18 06 F1 | 	add	arg04, #11
24ee0     0C 17 42 FC | 	wrbyte	arg03, arg04
24ee4     10 4E 85 F1 | 	sub	fp, #16
24ee8     A7 18 02 FB | 	rdlong	arg04, fp
24eec     0C 13 02 FB | 	rdlong	arg01, arg04
24ef0     10 4E 05 F1 | 	add	fp, #16
24ef4     A7 14 02 FB | 	rdlong	arg02, fp
24ef8     14 4E 85 F1 | 	sub	fp, #20
24efc     08 18 06 F1 | 	add	arg04, #8
24f00     0C 17 02 FB | 	rdlong	arg03, arg04
24f04     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
24f08     14 4E 05 F1 | 	add	fp, #20
24f0c     A7 12 02 FB | 	rdlong	arg01, fp
24f10     1C 12 06 F1 | 	add	arg01, #28
24f14     10 4E 85 F1 | 	sub	fp, #16
24f18     A7 18 02 FB | 	rdlong	arg04, fp
24f1c     0C 18 06 F1 | 	add	arg04, #12
24f20     0C 15 02 FB | 	rdlong	arg02, arg04
24f24     09 15 62 FC | 	wrlong	arg02, arg01
24f28     10 4E 05 F1 | 	add	fp, #16
24f2c     A7 12 02 FB | 	rdlong	arg01, fp
24f30     16 12 06 F1 | 	add	arg01, #22
24f34     04 4E 85 F1 | 	sub	fp, #4
24f38     A7 14 02 FB | 	rdlong	arg02, fp
24f3c     09 15 62 FC | 	wrlong	arg02, arg01
24f40     04 4E 05 F1 | 	add	fp, #4
24f44     A7 12 02 FB | 	rdlong	arg01, fp
24f48     12 12 06 F1 | 	add	arg01, #18
24f4c     09 01 58 FC | 	wrword	#0, arg01
24f50     08 4E 85 F1 | 	sub	fp, #8
24f54     A7 18 02 FB | 	rdlong	arg04, fp
24f58     03 18 06 F1 | 	add	arg04, #3
24f5c     0C 03 48 FC | 	wrbyte	#1, arg04
24f60     A7 12 02 FB | 	rdlong	arg01, fp
24f64     0C 4E 85 F1 | 	sub	fp, #12
24f68     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
24f6c     08 4E 05 F1 | 	add	fp, #8
24f70     A7 FA 61 FC | 	wrlong	result1, fp
24f74     04 4E 85 F1 | 	sub	fp, #4
24f78     A7 18 02 FB | 	rdlong	arg04, fp
24f7c     0C 17 02 F6 | 	mov	arg03, arg04
24f80     04 4E 85 F1 | 	sub	fp, #4
24f84     10 18 06 F1 | 	add	arg04, #16
24f88     0C 19 C2 FA | 	rdbyte	arg04, arg04
24f8c     BF 18 06 F5 | 	and	arg04, #191
24f90     10 16 06 F1 | 	add	arg03, #16
24f94     0B 19 42 FC | 	wrbyte	arg04, arg03
24f98                 | LR__3821
24f98                 | LR__3822
24f98                 | LR__3823
24f98                 | ' 					dir = fp->dir_ptr;
24f98                 | ' 					dir[ 11 ] |=  0x20 ;
24f98                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
24f98                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
24f98                 | ' 					st_dword(dir +  22 , tm);
24f98                 | ' 					st_word(dir +  18 , 0);
24f98                 | ' 					fs->wflag = 1;
24f98                 | ' 					res = sync_fs(fs);
24f98                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
24f98                 | ' 				}
24f98                 | ' 			}
24f98                 | ' 		}
24f98                 | ' 	}
24f98                 | ' 
24f98                 | ' 	return res ;
24f98     08 4E 05 F1 | 	add	fp, #8
24f9c     A7 FA 01 FB | 	rdlong	result1, fp
24fa0     08 4E 85 F1 | 	sub	fp, #8
24fa4                 | LR__3824
24fa4     A7 F0 03 F6 | 	mov	ptra, fp
24fa8     B2 00 A0 FD | 	call	#popregs_
24fac                 | _fatfs_cc_f_sync_ret
24fac     2D 00 64 FD | 	ret
24fb0                 | 
24fb0                 | _fatfs_cc_f_close
24fb0     01 4A 05 F6 | 	mov	COUNT_, #1
24fb4     A8 00 A0 FD | 	call	#pushregs_
24fb8     10 F0 07 F1 | 	add	ptra, #16
24fbc     04 4E 05 F1 | 	add	fp, #4
24fc0     A7 12 62 FC | 	wrlong	arg01, fp
24fc4     04 4E 85 F1 | 	sub	fp, #4
24fc8     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
24fcc     08 4E 05 F1 | 	add	fp, #8
24fd0     A7 FA 61 FC | 	wrlong	result1, fp
24fd4     08 4E 85 F1 | 	sub	fp, #8
24fd8     00 FA 0D F2 | 	cmp	result1, #0 wz
24fdc     38 00 90 5D |  if_ne	jmp	#LR__3830
24fe0     04 4E 05 F1 | 	add	fp, #4
24fe4     A7 12 02 FB | 	rdlong	arg01, fp
24fe8     08 4E 05 F1 | 	add	fp, #8
24fec     A7 14 02 F6 | 	mov	arg02, fp
24ff0     0C 4E 85 F1 | 	sub	fp, #12
24ff4     9C E6 BF FD | 	call	#_fatfs_cc_validate
24ff8     08 4E 05 F1 | 	add	fp, #8
24ffc     A7 FA 61 FC | 	wrlong	result1, fp
25000     08 4E 85 F1 | 	sub	fp, #8
25004     00 FA 0D F2 | 	cmp	result1, #0 wz
25008     04 4E 05 A1 |  if_e	add	fp, #4
2500c     A7 1E 02 AB |  if_e	rdlong	local01, fp
25010     04 4E 85 A1 |  if_e	sub	fp, #4
25014     0F 01 68 AC |  if_e	wrlong	#0, local01
25018                 | LR__3830
25018                 | ' 
25018                 | ' 
25018                 | ' 
25018                 | ' 
25018                 | ' 			fp->obj.fs = 0;
25018                 | ' #line 4192 "ff.c"
25018                 | ' 		}
25018                 | ' 	}
25018                 | ' 	return res;
25018     08 4E 05 F1 | 	add	fp, #8
2501c     A7 FA 01 FB | 	rdlong	result1, fp
25020     08 4E 85 F1 | 	sub	fp, #8
25024     A7 F0 03 F6 | 	mov	ptra, fp
25028     B2 00 A0 FD | 	call	#popregs_
2502c                 | _fatfs_cc_f_close_ret
2502c     2D 00 64 FD | 	ret
25030                 | 
25030                 | _fatfs_cc_f_lseek
25030     00 4A 05 F6 | 	mov	COUNT_, #0
25034     A8 00 A0 FD | 	call	#pushregs_
25038     24 F0 07 F1 | 	add	ptra, #36
2503c     04 4E 05 F1 | 	add	fp, #4
25040     A7 12 62 FC | 	wrlong	arg01, fp
25044     04 4E 05 F1 | 	add	fp, #4
25048     A7 14 62 FC | 	wrlong	arg02, fp
2504c     04 4E 85 F1 | 	sub	fp, #4
25050     A7 12 02 FB | 	rdlong	arg01, fp
25054     0C 4E 05 F1 | 	add	fp, #12
25058     A7 14 02 F6 | 	mov	arg02, fp
2505c     10 4E 85 F1 | 	sub	fp, #16
25060     30 E6 BF FD | 	call	#_fatfs_cc_validate
25064     0C 4E 05 F1 | 	add	fp, #12
25068     A7 FA 61 FC | 	wrlong	result1, fp
2506c     0C 4E 85 F1 | 	sub	fp, #12
25070     00 FA 0D F2 | 	cmp	result1, #0 wz
25074     1C 00 90 5D |  if_ne	jmp	#LR__3840
25078     04 4E 05 F1 | 	add	fp, #4
2507c     A7 18 02 FB | 	rdlong	arg04, fp
25080     11 18 06 F1 | 	add	arg04, #17
25084     0C 19 C2 FA | 	rdbyte	arg04, arg04
25088     08 4E 05 F1 | 	add	fp, #8
2508c     A7 18 62 FC | 	wrlong	arg04, fp
25090     0C 4E 85 F1 | 	sub	fp, #12
25094                 | LR__3840
25094     0C 4E 05 F1 | 	add	fp, #12
25098     A7 18 0A FB | 	rdlong	arg04, fp wz
2509c     0C 4E 85 F1 | 	sub	fp, #12
250a0     0C 4E 05 51 |  if_ne	add	fp, #12
250a4     A7 FA 01 5B |  if_ne	rdlong	result1, fp
250a8     0C 4E 85 51 |  if_ne	sub	fp, #12
250ac     40 06 90 5D |  if_ne	jmp	#LR__3863
250b0     04 4E 05 F1 | 	add	fp, #4
250b4     A7 18 02 FB | 	rdlong	arg04, fp
250b8     04 4E 05 F1 | 	add	fp, #4
250bc     A7 16 02 FB | 	rdlong	arg03, fp
250c0     08 4E 85 F1 | 	sub	fp, #8
250c4     0C 18 06 F1 | 	add	arg04, #12
250c8     0C 19 02 FB | 	rdlong	arg04, arg04
250cc     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
250d0     3C 00 90 ED |  if_be	jmp	#LR__3841
250d4     04 4E 05 F1 | 	add	fp, #4
250d8     A7 16 02 FB | 	rdlong	arg03, fp
250dc     04 4E 85 F1 | 	sub	fp, #4
250e0     10 16 06 F1 | 	add	arg03, #16
250e4     0B 17 C2 FA | 	rdbyte	arg03, arg03
250e8     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
250ec     02 16 CE F7 | 	test	arg03, #2 wz
250f0     1C 00 90 5D |  if_ne	jmp	#LR__3841
250f4     04 4E 05 F1 | 	add	fp, #4
250f8     A7 16 02 FB | 	rdlong	arg03, fp
250fc     0C 16 06 F1 | 	add	arg03, #12
25100     0B 17 02 FB | 	rdlong	arg03, arg03
25104     04 4E 05 F1 | 	add	fp, #4
25108     A7 16 62 FC | 	wrlong	arg03, fp
2510c     08 4E 85 F1 | 	sub	fp, #8
25110                 | LR__3841
25110     04 4E 05 F1 | 	add	fp, #4
25114     A7 16 02 FB | 	rdlong	arg03, fp
25118     14 16 06 F1 | 	add	arg03, #20
2511c     0B 17 02 FB | 	rdlong	arg03, arg03
25120     1C 4E 05 F1 | 	add	fp, #28
25124     A7 16 62 FC | 	wrlong	arg03, fp
25128     1C 4E 85 F1 | 	sub	fp, #28
2512c     A7 16 02 FB | 	rdlong	arg03, fp
25130     18 4E 05 F1 | 	add	fp, #24
25134     A7 00 68 FC | 	wrlong	#0, fp
25138     14 16 06 F1 | 	add	arg03, #20
2513c     0B 01 68 FC | 	wrlong	#0, arg03
25140     14 4E 85 F1 | 	sub	fp, #20
25144     A7 16 02 FB | 	rdlong	arg03, fp
25148     08 4E 85 F1 | 	sub	fp, #8
2514c     01 16 16 F2 | 	cmp	arg03, #1 wc
25150     E4 03 90 CD |  if_b	jmp	#LR__3857
25154     10 4E 05 F1 | 	add	fp, #16
25158     A7 16 02 FB | 	rdlong	arg03, fp
2515c     0A 16 06 F1 | 	add	arg03, #10
25160     0B 19 E2 FA | 	rdword	arg04, arg03
25164     09 18 66 F0 | 	shl	arg04, #9
25168     08 4E 05 F1 | 	add	fp, #8
2516c     A7 18 62 FC | 	wrlong	arg04, fp
25170     08 4E 05 F1 | 	add	fp, #8
25174     A7 18 02 FB | 	rdlong	arg04, fp
25178     20 4E 85 F1 | 	sub	fp, #32
2517c     01 18 16 F2 | 	cmp	arg04, #1 wc
25180     AC 00 90 CD |  if_b	jmp	#LR__3842
25184     08 4E 05 F1 | 	add	fp, #8
25188     A7 18 02 FB | 	rdlong	arg04, fp
2518c     01 18 86 F1 | 	sub	arg04, #1
25190     10 4E 05 F1 | 	add	fp, #16
25194     A7 16 02 FB | 	rdlong	arg03, fp
25198     0B 19 12 FD | 	qdiv	arg04, arg03
2519c     08 4E 05 F1 | 	add	fp, #8
251a0     A7 FA 01 FB | 	rdlong	result1, fp
251a4     01 FA 85 F1 | 	sub	result1, #1
251a8     18 18 62 FD | 	getqx	arg04
251ac     0B FB 11 FD | 	qdiv	result1, arg03
251b0     20 4E 85 F1 | 	sub	fp, #32
251b4     18 16 62 FD | 	getqx	arg03
251b8     0B 19 12 F2 | 	cmp	arg04, arg03 wc
251bc     70 00 90 CD |  if_b	jmp	#LR__3842
251c0     04 4E 05 F1 | 	add	fp, #4
251c4     A7 16 02 FB | 	rdlong	arg03, fp
251c8     1C 4E 05 F1 | 	add	fp, #28
251cc     A7 FA 01 FB | 	rdlong	result1, fp
251d0     01 FA 85 F1 | 	sub	result1, #1
251d4     08 4E 85 F1 | 	sub	fp, #8
251d8     A7 18 02 FB | 	rdlong	arg04, fp
251dc     01 18 86 F1 | 	sub	arg04, #1
251e0     0C FB 21 F5 | 	andn	result1, arg04
251e4     14 16 06 F1 | 	add	arg03, #20
251e8     0B FB 61 FC | 	wrlong	result1, arg03
251ec     10 4E 85 F1 | 	sub	fp, #16
251f0     A7 16 02 FB | 	rdlong	arg03, fp
251f4     04 4E 85 F1 | 	sub	fp, #4
251f8     A7 18 02 FB | 	rdlong	arg04, fp
251fc     14 18 06 F1 | 	add	arg04, #20
25200     0C 19 02 FB | 	rdlong	arg04, arg04
25204     0C 17 82 F1 | 	sub	arg03, arg04
25208     04 4E 05 F1 | 	add	fp, #4
2520c     A7 16 62 FC | 	wrlong	arg03, fp
25210     04 4E 85 F1 | 	sub	fp, #4
25214     A7 16 02 FB | 	rdlong	arg03, fp
25218     18 16 06 F1 | 	add	arg03, #24
2521c     0B 17 02 FB | 	rdlong	arg03, arg03
25220     10 4E 05 F1 | 	add	fp, #16
25224     A7 16 62 FC | 	wrlong	arg03, fp
25228     14 4E 85 F1 | 	sub	fp, #20
2522c     D0 00 90 FD | 	jmp	#LR__3846
25230                 | LR__3842
25230     04 4E 05 F1 | 	add	fp, #4
25234     A7 16 02 FB | 	rdlong	arg03, fp
25238     08 16 06 F1 | 	add	arg03, #8
2523c     0B 17 0A FB | 	rdlong	arg03, arg03 wz
25240     10 4E 05 F1 | 	add	fp, #16
25244     A7 16 62 FC | 	wrlong	arg03, fp
25248     14 4E 85 F1 | 	sub	fp, #20
2524c     94 00 90 5D |  if_ne	jmp	#LR__3845
25250     04 4E 05 F1 | 	add	fp, #4
25254     A7 12 02 FB | 	rdlong	arg01, fp
25258     04 4E 85 F1 | 	sub	fp, #4
2525c     00 14 06 F6 | 	mov	arg02, #0
25260     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
25264     14 4E 05 F1 | 	add	fp, #20
25268     A7 FA 61 FC | 	wrlong	result1, fp
2526c     14 4E 85 F1 | 	sub	fp, #20
25270     01 FA 0D F2 | 	cmp	result1, #1 wz
25274     1C 00 90 5D |  if_ne	jmp	#LR__3843
25278     04 4E 05 F1 | 	add	fp, #4
2527c     A7 16 02 FB | 	rdlong	arg03, fp
25280     04 4E 85 F1 | 	sub	fp, #4
25284     11 16 06 F1 | 	add	arg03, #17
25288     0B 05 48 FC | 	wrbyte	#2, arg03
2528c     02 FA 05 F6 | 	mov	result1, #2
25290     5C 04 90 FD | 	jmp	#LR__3863
25294                 | LR__3843
25294     14 4E 05 F1 | 	add	fp, #20
25298     A7 FA 01 FB | 	rdlong	result1, fp
2529c     14 4E 85 F1 | 	sub	fp, #20
252a0     FF FF 7F FF 
252a4     FF FB 0D F2 | 	cmp	result1, ##-1 wz
252a8     1C 00 90 5D |  if_ne	jmp	#LR__3844
252ac     04 4E 05 F1 | 	add	fp, #4
252b0     A7 16 02 FB | 	rdlong	arg03, fp
252b4     04 4E 85 F1 | 	sub	fp, #4
252b8     11 16 06 F1 | 	add	arg03, #17
252bc     0B 03 48 FC | 	wrbyte	#1, arg03
252c0     01 FA 05 F6 | 	mov	result1, #1
252c4     28 04 90 FD | 	jmp	#LR__3863
252c8                 | LR__3844
252c8     04 4E 05 F1 | 	add	fp, #4
252cc     A7 16 02 FB | 	rdlong	arg03, fp
252d0     10 4E 05 F1 | 	add	fp, #16
252d4     A7 18 02 FB | 	rdlong	arg04, fp
252d8     14 4E 85 F1 | 	sub	fp, #20
252dc     08 16 06 F1 | 	add	arg03, #8
252e0     0B 19 62 FC | 	wrlong	arg04, arg03
252e4                 | LR__3845
252e4     04 4E 05 F1 | 	add	fp, #4
252e8     A7 16 02 FB | 	rdlong	arg03, fp
252ec     10 4E 05 F1 | 	add	fp, #16
252f0     A7 18 02 FB | 	rdlong	arg04, fp
252f4     14 4E 85 F1 | 	sub	fp, #20
252f8     18 16 06 F1 | 	add	arg03, #24
252fc     0B 19 62 FC | 	wrlong	arg04, arg03
25300                 | LR__3846
25300     14 4E 05 F1 | 	add	fp, #20
25304     A7 16 0A FB | 	rdlong	arg03, fp wz
25308     14 4E 85 F1 | 	sub	fp, #20
2530c     28 02 90 AD |  if_e	jmp	#LR__3856
25310                 | ' 				while (ofs > bcs) {
25310                 | LR__3847
25310     08 4E 05 F1 | 	add	fp, #8
25314     A7 18 02 FB | 	rdlong	arg04, fp
25318     10 4E 05 F1 | 	add	fp, #16
2531c     A7 16 02 FB | 	rdlong	arg03, fp
25320     18 4E 85 F1 | 	sub	fp, #24
25324     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
25328     68 01 90 ED |  if_be	jmp	#LR__3853
2532c     08 4E 05 F1 | 	add	fp, #8
25330     A7 18 02 FB | 	rdlong	arg04, fp
25334     10 4E 05 F1 | 	add	fp, #16
25338     A7 16 02 FB | 	rdlong	arg03, fp
2533c     0B 19 82 F1 | 	sub	arg04, arg03
25340     10 4E 85 F1 | 	sub	fp, #16
25344     A7 18 62 FC | 	wrlong	arg04, fp
25348     04 4E 85 F1 | 	sub	fp, #4
2534c     A7 18 02 FB | 	rdlong	arg04, fp
25350     0C FB 01 F6 | 	mov	result1, arg04
25354     14 18 06 F1 | 	add	arg04, #20
25358     0C 19 02 FB | 	rdlong	arg04, arg04
2535c     14 4E 05 F1 | 	add	fp, #20
25360     A7 16 02 FB | 	rdlong	arg03, fp
25364     0B 19 02 F1 | 	add	arg04, arg03
25368     14 FA 05 F1 | 	add	result1, #20
2536c     FD 18 62 FC | 	wrlong	arg04, result1
25370     14 4E 85 F1 | 	sub	fp, #20
25374     A7 16 02 FB | 	rdlong	arg03, fp
25378     04 4E 85 F1 | 	sub	fp, #4
2537c     10 16 06 F1 | 	add	arg03, #16
25380     0B 17 C2 FA | 	rdbyte	arg03, arg03
25384     02 16 CE F7 | 	test	arg03, #2 wz
25388     3C 00 90 AD |  if_e	jmp	#LR__3848
2538c     04 4E 05 F1 | 	add	fp, #4
25390     A7 12 02 FB | 	rdlong	arg01, fp
25394     10 4E 05 F1 | 	add	fp, #16
25398     A7 14 02 FB | 	rdlong	arg02, fp
2539c     14 4E 85 F1 | 	sub	fp, #20
253a0     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
253a4     14 4E 05 F1 | 	add	fp, #20
253a8     A7 FA 61 FC | 	wrlong	result1, fp
253ac     00 FA 4D F2 | 	cmps	result1, #0 wz
253b0     14 4E 85 F1 | 	sub	fp, #20
253b4     08 4E 05 A1 |  if_e	add	fp, #8
253b8     A7 00 68 AC |  if_e	wrlong	#0, fp
253bc     08 4E 85 A1 |  if_e	sub	fp, #8
253c0                 | ' 							ofs = 0; break;
253c0     D0 00 90 AD |  if_e	jmp	#LR__3853
253c4     24 00 90 FD | 	jmp	#LR__3849
253c8                 | LR__3848
253c8     04 4E 05 F1 | 	add	fp, #4
253cc     A7 12 02 FB | 	rdlong	arg01, fp
253d0     10 4E 05 F1 | 	add	fp, #16
253d4     A7 14 02 FB | 	rdlong	arg02, fp
253d8     14 4E 85 F1 | 	sub	fp, #20
253dc     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
253e0     14 4E 05 F1 | 	add	fp, #20
253e4     A7 FA 61 FC | 	wrlong	result1, fp
253e8     14 4E 85 F1 | 	sub	fp, #20
253ec                 | LR__3849
253ec     14 4E 05 F1 | 	add	fp, #20
253f0     A7 16 02 FB | 	rdlong	arg03, fp
253f4     14 4E 85 F1 | 	sub	fp, #20
253f8     FF FF 7F FF 
253fc     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
25400     1C 00 90 5D |  if_ne	jmp	#LR__3850
25404     04 4E 05 F1 | 	add	fp, #4
25408     A7 16 02 FB | 	rdlong	arg03, fp
2540c     04 4E 85 F1 | 	sub	fp, #4
25410     11 16 06 F1 | 	add	arg03, #17
25414     0B 03 48 FC | 	wrbyte	#1, arg03
25418     01 FA 05 F6 | 	mov	result1, #1
2541c     D0 02 90 FD | 	jmp	#LR__3863
25420                 | LR__3850
25420     14 4E 05 F1 | 	add	fp, #20
25424     A7 16 02 FB | 	rdlong	arg03, fp
25428     14 4E 85 F1 | 	sub	fp, #20
2542c     02 16 16 F2 | 	cmp	arg03, #2 wc
25430     24 00 90 CD |  if_b	jmp	#LR__3851
25434     10 4E 05 F1 | 	add	fp, #16
25438     A7 18 02 FB | 	rdlong	arg04, fp
2543c     04 4E 05 F1 | 	add	fp, #4
25440     A7 16 02 FB | 	rdlong	arg03, fp
25444     14 4E 85 F1 | 	sub	fp, #20
25448     18 18 06 F1 | 	add	arg04, #24
2544c     0C 19 02 FB | 	rdlong	arg04, arg04
25450     0C 17 12 F2 | 	cmp	arg03, arg04 wc
25454     1C 00 90 CD |  if_b	jmp	#LR__3852
25458                 | LR__3851
25458     04 4E 05 F1 | 	add	fp, #4
2545c     A7 16 02 FB | 	rdlong	arg03, fp
25460     04 4E 85 F1 | 	sub	fp, #4
25464     11 16 06 F1 | 	add	arg03, #17
25468     0B 05 48 FC | 	wrbyte	#2, arg03
2546c     02 FA 05 F6 | 	mov	result1, #2
25470     7C 02 90 FD | 	jmp	#LR__3863
25474                 | LR__3852
25474     04 4E 05 F1 | 	add	fp, #4
25478     A7 18 02 FB | 	rdlong	arg04, fp
2547c     10 4E 05 F1 | 	add	fp, #16
25480     A7 16 02 FB | 	rdlong	arg03, fp
25484     14 4E 85 F1 | 	sub	fp, #20
25488     18 18 06 F1 | 	add	arg04, #24
2548c     0C 17 62 FC | 	wrlong	arg03, arg04
25490     7C FE 9F FD | 	jmp	#LR__3847
25494                 | LR__3853
25494     04 4E 05 F1 | 	add	fp, #4
25498     A7 16 02 FB | 	rdlong	arg03, fp
2549c     0B 13 02 F6 | 	mov	arg01, arg03
254a0     14 16 06 F1 | 	add	arg03, #20
254a4     0B 15 02 FB | 	rdlong	arg02, arg03
254a8     04 4E 05 F1 | 	add	fp, #4
254ac     A7 16 02 FB | 	rdlong	arg03, fp
254b0     0B 15 02 F1 | 	add	arg02, arg03
254b4     14 12 06 F1 | 	add	arg01, #20
254b8     09 15 62 FC | 	wrlong	arg02, arg01
254bc     A7 16 02 FB | 	rdlong	arg03, fp
254c0     08 4E 85 F1 | 	sub	fp, #8
254c4     FF 17 CE F7 | 	test	arg03, #511 wz
254c8     6C 00 90 AD |  if_e	jmp	#LR__3855
254cc     10 4E 05 F1 | 	add	fp, #16
254d0     A7 12 02 FB | 	rdlong	arg01, fp
254d4     04 4E 05 F1 | 	add	fp, #4
254d8     A7 14 02 FB | 	rdlong	arg02, fp
254dc     14 4E 85 F1 | 	sub	fp, #20
254e0     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
254e4     1C 4E 05 F1 | 	add	fp, #28
254e8     A7 FA 61 FC | 	wrlong	result1, fp
254ec     1C 4E 85 F1 | 	sub	fp, #28
254f0     00 FA 0D F2 | 	cmp	result1, #0 wz
254f4     1C 00 90 5D |  if_ne	jmp	#LR__3854
254f8     04 4E 05 F1 | 	add	fp, #4
254fc     A7 16 02 FB | 	rdlong	arg03, fp
25500     04 4E 85 F1 | 	sub	fp, #4
25504     11 16 06 F1 | 	add	arg03, #17
25508     0B 05 48 FC | 	wrbyte	#2, arg03
2550c     02 FA 05 F6 | 	mov	result1, #2
25510     DC 01 90 FD | 	jmp	#LR__3863
25514                 | LR__3854
25514     1C 4E 05 F1 | 	add	fp, #28
25518     A7 18 02 FB | 	rdlong	arg04, fp
2551c     14 4E 85 F1 | 	sub	fp, #20
25520     A7 16 02 FB | 	rdlong	arg03, fp
25524     09 16 46 F0 | 	shr	arg03, #9
25528     0B 19 02 F1 | 	add	arg04, arg03
2552c     14 4E 05 F1 | 	add	fp, #20
25530     A7 18 62 FC | 	wrlong	arg04, fp
25534     1C 4E 85 F1 | 	sub	fp, #28
25538                 | LR__3855
25538                 | LR__3856
25538                 | LR__3857
25538     04 4E 05 F1 | 	add	fp, #4
2553c     A7 18 02 FB | 	rdlong	arg04, fp
25540     0C 17 02 F6 | 	mov	arg03, arg04
25544     04 4E 85 F1 | 	sub	fp, #4
25548     14 16 06 F1 | 	add	arg03, #20
2554c     0B 17 02 FB | 	rdlong	arg03, arg03
25550     0C 18 06 F1 | 	add	arg04, #12
25554     0C 19 02 FB | 	rdlong	arg04, arg04
25558     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2555c     3C 00 90 ED |  if_be	jmp	#LR__3858
25560     04 4E 05 F1 | 	add	fp, #4
25564     A7 18 02 FB | 	rdlong	arg04, fp
25568     0C 17 02 F6 | 	mov	arg03, arg04
2556c     14 18 06 F1 | 	add	arg04, #20
25570     0C 19 02 FB | 	rdlong	arg04, arg04
25574     0C 16 06 F1 | 	add	arg03, #12
25578     0B 19 62 FC | 	wrlong	arg04, arg03
2557c     A7 18 02 FB | 	rdlong	arg04, fp
25580     0C 17 02 F6 | 	mov	arg03, arg04
25584     04 4E 85 F1 | 	sub	fp, #4
25588     10 18 06 F1 | 	add	arg04, #16
2558c     0C 19 C2 FA | 	rdbyte	arg04, arg04
25590     40 18 46 F5 | 	or	arg04, #64
25594     10 16 06 F1 | 	add	arg03, #16
25598     0B 19 42 FC | 	wrbyte	arg04, arg03
2559c                 | LR__3858
2559c     04 4E 05 F1 | 	add	fp, #4
255a0     A7 16 02 FB | 	rdlong	arg03, fp
255a4     04 4E 85 F1 | 	sub	fp, #4
255a8     14 16 06 F1 | 	add	arg03, #20
255ac     0B 17 02 FB | 	rdlong	arg03, arg03
255b0     FF 17 CE F7 | 	test	arg03, #511 wz
255b4     2C 01 90 AD |  if_e	jmp	#LR__3862
255b8     04 4E 05 F1 | 	add	fp, #4
255bc     A7 18 02 FB | 	rdlong	arg04, fp
255c0     18 4E 05 F1 | 	add	fp, #24
255c4     A7 16 02 FB | 	rdlong	arg03, fp
255c8     1C 4E 85 F1 | 	sub	fp, #28
255cc     1C 18 06 F1 | 	add	arg04, #28
255d0     0C 19 02 FB | 	rdlong	arg04, arg04
255d4     0C 17 0A F2 | 	cmp	arg03, arg04 wz
255d8     08 01 90 AD |  if_e	jmp	#LR__3862
255dc     04 4E 05 F1 | 	add	fp, #4
255e0     A7 16 02 FB | 	rdlong	arg03, fp
255e4     04 4E 85 F1 | 	sub	fp, #4
255e8     10 16 06 F1 | 	add	arg03, #16
255ec     0B 17 C2 FA | 	rdbyte	arg03, arg03
255f0     80 16 CE F7 | 	test	arg03, #128 wz
255f4     7C 00 90 AD |  if_e	jmp	#LR__3860
255f8     10 4E 05 F1 | 	add	fp, #16
255fc     A7 16 02 FB | 	rdlong	arg03, fp
25600     01 16 06 F1 | 	add	arg03, #1
25604     0B 13 C2 FA | 	rdbyte	arg01, arg03
25608     0C 4E 85 F1 | 	sub	fp, #12
2560c     A7 16 02 FB | 	rdlong	arg03, fp
25610     0B 15 02 F6 | 	mov	arg02, arg03
25614     28 14 06 F1 | 	add	arg02, #40
25618     04 4E 85 F1 | 	sub	fp, #4
2561c     1C 16 06 F1 | 	add	arg03, #28
25620     0B 17 02 FB | 	rdlong	arg03, arg03
25624     01 18 06 F6 | 	mov	arg04, #1
25628     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
2562c     00 FA 0D F2 | 	cmp	result1, #0 wz
25630     1C 00 90 AD |  if_e	jmp	#LR__3859
25634     04 4E 05 F1 | 	add	fp, #4
25638     A7 16 02 FB | 	rdlong	arg03, fp
2563c     04 4E 85 F1 | 	sub	fp, #4
25640     11 16 06 F1 | 	add	arg03, #17
25644     0B 03 48 FC | 	wrbyte	#1, arg03
25648     01 FA 05 F6 | 	mov	result1, #1
2564c     A0 00 90 FD | 	jmp	#LR__3863
25650                 | LR__3859
25650     04 4E 05 F1 | 	add	fp, #4
25654     A7 18 02 FB | 	rdlong	arg04, fp
25658     0C 17 02 F6 | 	mov	arg03, arg04
2565c     04 4E 85 F1 | 	sub	fp, #4
25660     10 18 06 F1 | 	add	arg04, #16
25664     0C 19 C2 FA | 	rdbyte	arg04, arg04
25668     7F 18 06 F5 | 	and	arg04, #127
2566c     10 16 06 F1 | 	add	arg03, #16
25670     0B 19 42 FC | 	wrbyte	arg04, arg03
25674                 | LR__3860
25674     10 4E 05 F1 | 	add	fp, #16
25678     A7 16 02 FB | 	rdlong	arg03, fp
2567c     01 16 06 F1 | 	add	arg03, #1
25680     0B 13 C2 FA | 	rdbyte	arg01, arg03
25684     0C 4E 85 F1 | 	sub	fp, #12
25688     A7 14 02 FB | 	rdlong	arg02, fp
2568c     28 14 06 F1 | 	add	arg02, #40
25690     18 4E 05 F1 | 	add	fp, #24
25694     A7 16 02 FB | 	rdlong	arg03, fp
25698     1C 4E 85 F1 | 	sub	fp, #28
2569c     01 18 06 F6 | 	mov	arg04, #1
256a0     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
256a4     00 FA 0D F2 | 	cmp	result1, #0 wz
256a8     1C 00 90 AD |  if_e	jmp	#LR__3861
256ac     04 4E 05 F1 | 	add	fp, #4
256b0     A7 16 02 FB | 	rdlong	arg03, fp
256b4     04 4E 85 F1 | 	sub	fp, #4
256b8     11 16 06 F1 | 	add	arg03, #17
256bc     0B 03 48 FC | 	wrbyte	#1, arg03
256c0     01 FA 05 F6 | 	mov	result1, #1
256c4     28 00 90 FD | 	jmp	#LR__3863
256c8                 | LR__3861
256c8     04 4E 05 F1 | 	add	fp, #4
256cc     A7 18 02 FB | 	rdlong	arg04, fp
256d0     18 4E 05 F1 | 	add	fp, #24
256d4     A7 16 02 FB | 	rdlong	arg03, fp
256d8     1C 4E 85 F1 | 	sub	fp, #28
256dc     1C 18 06 F1 | 	add	arg04, #28
256e0     0C 17 62 FC | 	wrlong	arg03, arg04
256e4                 | LR__3862
256e4                 | ' 
256e4                 | ' 			fp->sect = nsect;
256e4                 | ' 		}
256e4                 | ' 	}
256e4                 | ' 
256e4                 | ' 	return res ;
256e4     0C 4E 05 F1 | 	add	fp, #12
256e8     A7 FA 01 FB | 	rdlong	result1, fp
256ec     0C 4E 85 F1 | 	sub	fp, #12
256f0                 | LR__3863
256f0     A7 F0 03 F6 | 	mov	ptra, fp
256f4     B2 00 A0 FD | 	call	#popregs_
256f8                 | _fatfs_cc_f_lseek_ret
256f8     2D 00 64 FD | 	ret
256fc                 | 
256fc                 | _fatfs_cc_f_opendir
256fc     01 4A 05 F6 | 	mov	COUNT_, #1
25700     A8 00 A0 FD | 	call	#pushregs_
25704     14 F0 07 F1 | 	add	ptra, #20
25708     04 4E 05 F1 | 	add	fp, #4
2570c     A7 12 62 FC | 	wrlong	arg01, fp
25710     04 4E 05 F1 | 	add	fp, #4
25714     A7 14 62 FC | 	wrlong	arg02, fp
25718     04 4E 85 F1 | 	sub	fp, #4
2571c     A7 16 0A FB | 	rdlong	arg03, fp wz
25720     04 4E 85 F1 | 	sub	fp, #4
25724     09 FA 05 A6 |  if_e	mov	result1, #9
25728     78 01 90 AD |  if_e	jmp	#LR__3876
2572c     08 4E 05 F1 | 	add	fp, #8
25730     A7 12 02 F6 | 	mov	arg01, fp
25734     08 4E 05 F1 | 	add	fp, #8
25738     A7 14 02 F6 | 	mov	arg02, fp
2573c     10 4E 85 F1 | 	sub	fp, #16
25740     00 16 06 F6 | 	mov	arg03, #0
25744     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
25748     0C 4E 05 F1 | 	add	fp, #12
2574c     A7 FA 61 FC | 	wrlong	result1, fp
25750     0C 4E 85 F1 | 	sub	fp, #12
25754     00 FA 0D F2 | 	cmp	result1, #0 wz
25758     20 01 90 5D |  if_ne	jmp	#LR__3875
2575c     04 4E 05 F1 | 	add	fp, #4
25760     A7 16 02 FB | 	rdlong	arg03, fp
25764     0C 4E 05 F1 | 	add	fp, #12
25768     A7 FA 01 FB | 	rdlong	result1, fp
2576c     0B FB 61 FC | 	wrlong	result1, arg03
25770     0C 4E 85 F1 | 	sub	fp, #12
25774     A7 12 02 FB | 	rdlong	arg01, fp
25778     04 4E 05 F1 | 	add	fp, #4
2577c     A7 14 02 FB | 	rdlong	arg02, fp
25780     08 4E 85 F1 | 	sub	fp, #8
25784     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
25788     0C 4E 05 F1 | 	add	fp, #12
2578c     A7 FA 61 FC | 	wrlong	result1, fp
25790     0C 4E 85 F1 | 	sub	fp, #12
25794     00 FA 0D F2 | 	cmp	result1, #0 wz
25798     C4 00 90 5D |  if_ne	jmp	#LR__3874
2579c     04 4E 05 F1 | 	add	fp, #4
257a0     A7 16 02 FB | 	rdlong	arg03, fp
257a4     04 4E 85 F1 | 	sub	fp, #4
257a8     2B 16 06 F1 | 	add	arg03, #43
257ac     0B 17 C2 FA | 	rdbyte	arg03, arg03
257b0     80 16 CE F7 | 	test	arg03, #128 wz
257b4     58 00 90 5D |  if_ne	jmp	#LR__3872
257b8     04 4E 05 F1 | 	add	fp, #4
257bc     A7 16 02 FB | 	rdlong	arg03, fp
257c0     04 4E 85 F1 | 	sub	fp, #4
257c4     06 16 06 F1 | 	add	arg03, #6
257c8     0B 17 C2 FA | 	rdbyte	arg03, arg03
257cc     10 16 CE F7 | 	test	arg03, #16 wz
257d0     30 00 90 AD |  if_e	jmp	#LR__3870
257d4     04 4E 05 F1 | 	add	fp, #4
257d8     A7 16 02 FB | 	rdlong	arg03, fp
257dc     0B 1F 02 F6 | 	mov	local01, arg03
257e0     0C 4E 05 F1 | 	add	fp, #12
257e4     A7 12 02 FB | 	rdlong	arg01, fp
257e8     10 4E 85 F1 | 	sub	fp, #16
257ec     1C 16 06 F1 | 	add	arg03, #28
257f0     0B 15 02 FB | 	rdlong	arg02, arg03
257f4     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
257f8     08 1E 06 F1 | 	add	local01, #8
257fc     0F FB 61 FC | 	wrlong	result1, local01
25800     0C 00 90 FD | 	jmp	#LR__3871
25804                 | LR__3870
25804     0C 4E 05 F1 | 	add	fp, #12
25808     A7 0A 68 FC | 	wrlong	#5, fp
2580c     0C 4E 85 F1 | 	sub	fp, #12
25810                 | LR__3871
25810                 | LR__3872
25810     0C 4E 05 F1 | 	add	fp, #12
25814     A7 1E 0A FB | 	rdlong	local01, fp wz
25818     0C 4E 85 F1 | 	sub	fp, #12
2581c     40 00 90 5D |  if_ne	jmp	#LR__3873
25820     04 4E 05 F1 | 	add	fp, #4
25824     A7 1E 02 FB | 	rdlong	local01, fp
25828     0C 4E 05 F1 | 	add	fp, #12
2582c     A7 16 02 FB | 	rdlong	arg03, fp
25830     06 16 06 F1 | 	add	arg03, #6
25834     0B 17 E2 FA | 	rdword	arg03, arg03
25838     04 1E 06 F1 | 	add	local01, #4
2583c     0F 17 52 FC | 	wrword	arg03, local01
25840     0C 4E 85 F1 | 	sub	fp, #12
25844     A7 12 02 FB | 	rdlong	arg01, fp
25848     04 4E 85 F1 | 	sub	fp, #4
2584c     00 14 06 F6 | 	mov	arg02, #0
25850     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
25854     0C 4E 05 F1 | 	add	fp, #12
25858     A7 FA 61 FC | 	wrlong	result1, fp
2585c     0C 4E 85 F1 | 	sub	fp, #12
25860                 | LR__3873
25860                 | LR__3874
25860     0C 4E 05 F1 | 	add	fp, #12
25864     A7 1E 02 FB | 	rdlong	local01, fp
25868     0C 4E 85 F1 | 	sub	fp, #12
2586c     04 1E 0E F2 | 	cmp	local01, #4 wz
25870     0C 4E 05 A1 |  if_e	add	fp, #12
25874     A7 0A 68 AC |  if_e	wrlong	#5, fp
25878     0C 4E 85 A1 |  if_e	sub	fp, #12
2587c                 | LR__3875
2587c     0C 4E 05 F1 | 	add	fp, #12
25880     A7 1E 0A FB | 	rdlong	local01, fp wz
25884     0C 4E 85 F1 | 	sub	fp, #12
25888     04 4E 05 51 |  if_ne	add	fp, #4
2588c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
25890     04 4E 85 51 |  if_ne	sub	fp, #4
25894     0F 01 68 5C |  if_ne	wrlong	#0, local01
25898                 | ' 
25898                 | ' 	return res ;
25898     0C 4E 05 F1 | 	add	fp, #12
2589c     A7 FA 01 FB | 	rdlong	result1, fp
258a0     0C 4E 85 F1 | 	sub	fp, #12
258a4                 | LR__3876
258a4     A7 F0 03 F6 | 	mov	ptra, fp
258a8     B2 00 A0 FD | 	call	#popregs_
258ac                 | _fatfs_cc_f_opendir_ret
258ac     2D 00 64 FD | 	ret
258b0                 | 
258b0                 | _fatfs_cc_f_closedir
258b0     00 4A 05 F6 | 	mov	COUNT_, #0
258b4     A8 00 A0 FD | 	call	#pushregs_
258b8     10 F0 07 F1 | 	add	ptra, #16
258bc     04 4E 05 F1 | 	add	fp, #4
258c0     A7 12 62 FC | 	wrlong	arg01, fp
258c4     08 4E 05 F1 | 	add	fp, #8
258c8     A7 14 02 F6 | 	mov	arg02, fp
258cc     0C 4E 85 F1 | 	sub	fp, #12
258d0     C0 DD BF FD | 	call	#_fatfs_cc_validate
258d4     08 4E 05 F1 | 	add	fp, #8
258d8     A7 FA 61 FC | 	wrlong	result1, fp
258dc     08 4E 85 F1 | 	sub	fp, #8
258e0     00 FA 0D F2 | 	cmp	result1, #0 wz
258e4     04 4E 05 A1 |  if_e	add	fp, #4
258e8     A7 FA 01 AB |  if_e	rdlong	result1, fp
258ec     04 4E 85 A1 |  if_e	sub	fp, #4
258f0     FD 00 68 AC |  if_e	wrlong	#0, result1
258f4                 | ' 
258f4                 | ' 
258f4                 | ' 
258f4                 | ' 
258f4                 | ' 		dp->obj.fs = 0;
258f4                 | ' #line 4633 "ff.c"
258f4                 | ' 	}
258f4                 | ' 	return res;
258f4     08 4E 05 F1 | 	add	fp, #8
258f8     A7 FA 01 FB | 	rdlong	result1, fp
258fc     08 4E 85 F1 | 	sub	fp, #8
25900     A7 F0 03 F6 | 	mov	ptra, fp
25904     B2 00 A0 FD | 	call	#popregs_
25908                 | _fatfs_cc_f_closedir_ret
25908     2D 00 64 FD | 	ret
2590c                 | 
2590c                 | _fatfs_cc_f_readdir
2590c     00 4A 05 F6 | 	mov	COUNT_, #0
25910     A8 00 A0 FD | 	call	#pushregs_
25914     14 F0 07 F1 | 	add	ptra, #20
25918     04 4E 05 F1 | 	add	fp, #4
2591c     A7 12 62 FC | 	wrlong	arg01, fp
25920     04 4E 05 F1 | 	add	fp, #4
25924     A7 14 62 FC | 	wrlong	arg02, fp
25928     04 4E 85 F1 | 	sub	fp, #4
2592c     A7 12 02 FB | 	rdlong	arg01, fp
25930     0C 4E 05 F1 | 	add	fp, #12
25934     A7 14 02 F6 | 	mov	arg02, fp
25938     10 4E 85 F1 | 	sub	fp, #16
2593c     54 DD BF FD | 	call	#_fatfs_cc_validate
25940     0C 4E 05 F1 | 	add	fp, #12
25944     A7 FA 61 FC | 	wrlong	result1, fp
25948     0C 4E 85 F1 | 	sub	fp, #12
2594c     00 FA 0D F2 | 	cmp	result1, #0 wz
25950     BC 00 90 5D |  if_ne	jmp	#LR__3883
25954     08 4E 05 F1 | 	add	fp, #8
25958     A7 FA 09 FB | 	rdlong	result1, fp wz
2595c     08 4E 85 F1 | 	sub	fp, #8
25960     24 00 90 5D |  if_ne	jmp	#LR__3880
25964     04 4E 05 F1 | 	add	fp, #4
25968     A7 12 02 FB | 	rdlong	arg01, fp
2596c     04 4E 85 F1 | 	sub	fp, #4
25970     00 14 06 F6 | 	mov	arg02, #0
25974     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
25978     0C 4E 05 F1 | 	add	fp, #12
2597c     A7 FA 61 FC | 	wrlong	result1, fp
25980     0C 4E 85 F1 | 	sub	fp, #12
25984     88 00 90 FD | 	jmp	#LR__3882
25988                 | LR__3880
25988     04 4E 05 F1 | 	add	fp, #4
2598c     A7 12 02 FB | 	rdlong	arg01, fp
25990     04 4E 85 F1 | 	sub	fp, #4
25994     00 14 06 F6 | 	mov	arg02, #0
25998     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
2599c     0C 4E 05 F1 | 	add	fp, #12
259a0     A7 FA 61 FC | 	wrlong	result1, fp
259a4     0C 4E 85 F1 | 	sub	fp, #12
259a8     04 FA 0D F2 | 	cmp	result1, #4 wz
259ac     0C 4E 05 A1 |  if_e	add	fp, #12
259b0     A7 00 68 AC |  if_e	wrlong	#0, fp
259b4     0C 4E 85 A1 |  if_e	sub	fp, #12
259b8     0C 4E 05 F1 | 	add	fp, #12
259bc     A7 FA 09 FB | 	rdlong	result1, fp wz
259c0     0C 4E 85 F1 | 	sub	fp, #12
259c4     48 00 90 5D |  if_ne	jmp	#LR__3881
259c8     04 4E 05 F1 | 	add	fp, #4
259cc     A7 12 02 FB | 	rdlong	arg01, fp
259d0     04 4E 05 F1 | 	add	fp, #4
259d4     A7 14 02 FB | 	rdlong	arg02, fp
259d8     08 4E 85 F1 | 	sub	fp, #8
259dc     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
259e0     04 4E 05 F1 | 	add	fp, #4
259e4     A7 12 02 FB | 	rdlong	arg01, fp
259e8     04 4E 85 F1 | 	sub	fp, #4
259ec     00 14 06 F6 | 	mov	arg02, #0
259f0     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
259f4     0C 4E 05 F1 | 	add	fp, #12
259f8     A7 FA 61 FC | 	wrlong	result1, fp
259fc     0C 4E 85 F1 | 	sub	fp, #12
25a00     04 FA 0D F2 | 	cmp	result1, #4 wz
25a04     0C 4E 05 A1 |  if_e	add	fp, #12
25a08     A7 00 68 AC |  if_e	wrlong	#0, fp
25a0c     0C 4E 85 A1 |  if_e	sub	fp, #12
25a10                 | LR__3881
25a10                 | LR__3882
25a10                 | LR__3883
25a10                 | ' 			}
25a10                 | ' 			;
25a10                 | ' 		}
25a10                 | ' 	}
25a10                 | ' 	return res ;
25a10     0C 4E 05 F1 | 	add	fp, #12
25a14     A7 FA 01 FB | 	rdlong	result1, fp
25a18     0C 4E 85 F1 | 	sub	fp, #12
25a1c     A7 F0 03 F6 | 	mov	ptra, fp
25a20     B2 00 A0 FD | 	call	#popregs_
25a24                 | _fatfs_cc_f_readdir_ret
25a24     2D 00 64 FD | 	ret
25a28                 | 
25a28                 | _fatfs_cc_f_stat
25a28     00 4A 05 F6 | 	mov	COUNT_, #0
25a2c     A8 00 A0 FD | 	call	#pushregs_
25a30     40 F0 07 F1 | 	add	ptra, #64
25a34     04 4E 05 F1 | 	add	fp, #4
25a38     A7 12 62 FC | 	wrlong	arg01, fp
25a3c     04 4E 05 F1 | 	add	fp, #4
25a40     A7 14 62 FC | 	wrlong	arg02, fp
25a44     04 4E 85 F1 | 	sub	fp, #4
25a48     A7 12 02 F6 | 	mov	arg01, fp
25a4c     0C 4E 05 F1 | 	add	fp, #12
25a50     A7 14 02 F6 | 	mov	arg02, fp
25a54     10 4E 85 F1 | 	sub	fp, #16
25a58     00 16 06 F6 | 	mov	arg03, #0
25a5c     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
25a60     0C 4E 05 F1 | 	add	fp, #12
25a64     A7 FA 61 FC | 	wrlong	result1, fp
25a68     0C 4E 85 F1 | 	sub	fp, #12
25a6c     00 FA 0D F2 | 	cmp	result1, #0 wz
25a70     74 00 90 5D |  if_ne	jmp	#LR__3893
25a74     10 4E 05 F1 | 	add	fp, #16
25a78     A7 12 02 F6 | 	mov	arg01, fp
25a7c     0C 4E 85 F1 | 	sub	fp, #12
25a80     A7 14 02 FB | 	rdlong	arg02, fp
25a84     04 4E 85 F1 | 	sub	fp, #4
25a88     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
25a8c     0C 4E 05 F1 | 	add	fp, #12
25a90     A7 FA 61 FC | 	wrlong	result1, fp
25a94     0C 4E 85 F1 | 	sub	fp, #12
25a98     00 FA 0D F2 | 	cmp	result1, #0 wz
25a9c     48 00 90 5D |  if_ne	jmp	#LR__3892
25aa0     3B 4E 05 F1 | 	add	fp, #59
25aa4     A7 FA C1 FA | 	rdbyte	result1, fp
25aa8     3B 4E 85 F1 | 	sub	fp, #59
25aac     80 FA CD F7 | 	test	result1, #128 wz
25ab0     0C 4E 05 51 |  if_ne	add	fp, #12
25ab4     A7 0C 68 5C |  if_ne	wrlong	#6, fp
25ab8     0C 4E 85 51 |  if_ne	sub	fp, #12
25abc     28 00 90 5D |  if_ne	jmp	#LR__3891
25ac0     08 4E 05 F1 | 	add	fp, #8
25ac4     A7 FA 09 FB | 	rdlong	result1, fp wz
25ac8     08 4E 85 F1 | 	sub	fp, #8
25acc     18 00 90 AD |  if_e	jmp	#LR__3890
25ad0     10 4E 05 F1 | 	add	fp, #16
25ad4     A7 12 02 F6 | 	mov	arg01, fp
25ad8     08 4E 85 F1 | 	sub	fp, #8
25adc     A7 14 02 FB | 	rdlong	arg02, fp
25ae0     08 4E 85 F1 | 	sub	fp, #8
25ae4     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
25ae8                 | LR__3890
25ae8                 | LR__3891
25ae8                 | LR__3892
25ae8                 | LR__3893
25ae8                 | ' 			}
25ae8                 | ' 		}
25ae8                 | ' 		;
25ae8                 | ' 	}
25ae8                 | ' 
25ae8                 | ' 	return res ;
25ae8     0C 4E 05 F1 | 	add	fp, #12
25aec     A7 FA 01 FB | 	rdlong	result1, fp
25af0     0C 4E 85 F1 | 	sub	fp, #12
25af4     A7 F0 03 F6 | 	mov	ptra, fp
25af8     B2 00 A0 FD | 	call	#popregs_
25afc                 | _fatfs_cc_f_stat_ret
25afc     2D 00 64 FD | 	ret
25b00                 | 
25b00                 | _fatfs_cc_f_unlink
25b00     00 4A 05 F6 | 	mov	COUNT_, #0
25b04     A8 00 A0 FD | 	call	#pushregs_
25b08     74 F0 07 F1 | 	add	ptra, #116
25b0c     04 4E 05 F1 | 	add	fp, #4
25b10     A7 12 62 FC | 	wrlong	arg01, fp
25b14     68 4E 05 F1 | 	add	fp, #104
25b18     A7 00 68 FC | 	wrlong	#0, fp
25b1c     68 4E 85 F1 | 	sub	fp, #104
25b20     A7 12 02 F6 | 	mov	arg01, fp
25b24     6C 4E 05 F1 | 	add	fp, #108
25b28     A7 14 02 F6 | 	mov	arg02, fp
25b2c     70 4E 85 F1 | 	sub	fp, #112
25b30     02 16 06 F6 | 	mov	arg03, #2
25b34     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
25b38     08 4E 05 F1 | 	add	fp, #8
25b3c     A7 FA 61 FC | 	wrlong	result1, fp
25b40     08 4E 85 F1 | 	sub	fp, #8
25b44     00 FA 0D F2 | 	cmp	result1, #0 wz
25b48     E4 01 90 5D |  if_ne	jmp	#LR__3908
25b4c     70 4E 05 F1 | 	add	fp, #112
25b50     A7 16 02 FB | 	rdlong	arg03, fp
25b54     64 4E 85 F1 | 	sub	fp, #100
25b58     A7 16 62 FC | 	wrlong	arg03, fp
25b5c     A7 12 02 F6 | 	mov	arg01, fp
25b60     08 4E 85 F1 | 	sub	fp, #8
25b64     A7 14 02 FB | 	rdlong	arg02, fp
25b68     04 4E 85 F1 | 	sub	fp, #4
25b6c     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
25b70     08 4E 05 F1 | 	add	fp, #8
25b74     A7 FA 61 FC | 	wrlong	result1, fp
25b78     00 FA 4D F2 | 	cmps	result1, #0 wz
25b7c     08 4E 85 F1 | 	sub	fp, #8
25b80     AC 01 90 5D |  if_ne	jmp	#LR__3907
25b84     37 4E 05 F1 | 	add	fp, #55
25b88     A7 FA C1 FA | 	rdbyte	result1, fp
25b8c     37 4E 85 F1 | 	sub	fp, #55
25b90     80 FA CD F7 | 	test	result1, #128 wz
25b94     08 4E 05 51 |  if_ne	add	fp, #8
25b98     A7 0C 68 5C |  if_ne	wrlong	#6, fp
25b9c     08 4E 85 51 |  if_ne	sub	fp, #8
25ba0     1C 00 90 5D |  if_ne	jmp	#LR__3900
25ba4     12 4E 05 F1 | 	add	fp, #18
25ba8     A7 FA C1 FA | 	rdbyte	result1, fp
25bac     12 4E 85 F1 | 	sub	fp, #18
25bb0     01 FA CD F7 | 	test	result1, #1 wz
25bb4     08 4E 05 51 |  if_ne	add	fp, #8
25bb8     A7 0E 68 5C |  if_ne	wrlong	#7, fp
25bbc     08 4E 85 51 |  if_ne	sub	fp, #8
25bc0                 | LR__3900
25bc0     08 4E 05 F1 | 	add	fp, #8
25bc4     A7 FA 09 FB | 	rdlong	result1, fp wz
25bc8     08 4E 85 F1 | 	sub	fp, #8
25bcc     C8 00 90 5D |  if_ne	jmp	#LR__3903
25bd0     70 4E 05 F1 | 	add	fp, #112
25bd4     A7 12 02 FB | 	rdlong	arg01, fp
25bd8     48 4E 85 F1 | 	sub	fp, #72
25bdc     A7 14 02 FB | 	rdlong	arg02, fp
25be0     28 4E 85 F1 | 	sub	fp, #40
25be4     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
25be8     6C 4E 05 F1 | 	add	fp, #108
25bec     A7 FA 61 FC | 	wrlong	result1, fp
25bf0     5A 4E 85 F1 | 	sub	fp, #90
25bf4     A7 FA C1 FA | 	rdbyte	result1, fp
25bf8     12 4E 85 F1 | 	sub	fp, #18
25bfc     10 FA CD F7 | 	test	result1, #16 wz
25c00     94 00 90 AD |  if_e	jmp	#LR__3902
25c04     70 4E 05 F1 | 	add	fp, #112
25c08     A7 FA 01 FB | 	rdlong	result1, fp
25c0c     34 4E 85 F1 | 	sub	fp, #52
25c10     A7 FA 61 FC | 	wrlong	result1, fp
25c14     30 4E 05 F1 | 	add	fp, #48
25c18     A7 16 02 FB | 	rdlong	arg03, fp
25c1c     28 4E 85 F1 | 	sub	fp, #40
25c20     A7 16 62 FC | 	wrlong	arg03, fp
25c24     08 4E 85 F1 | 	sub	fp, #8
25c28     A7 12 02 F6 | 	mov	arg01, fp
25c2c     3C 4E 85 F1 | 	sub	fp, #60
25c30     00 14 06 F6 | 	mov	arg02, #0
25c34     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
25c38     08 4E 05 F1 | 	add	fp, #8
25c3c     A7 FA 61 FC | 	wrlong	result1, fp
25c40     08 4E 85 F1 | 	sub	fp, #8
25c44     00 FA 0D F2 | 	cmp	result1, #0 wz
25c48     4C 00 90 5D |  if_ne	jmp	#LR__3901
25c4c     3C 4E 05 F1 | 	add	fp, #60
25c50     A7 12 02 F6 | 	mov	arg01, fp
25c54     3C 4E 85 F1 | 	sub	fp, #60
25c58     00 14 06 F6 | 	mov	arg02, #0
25c5c     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
25c60     08 4E 05 F1 | 	add	fp, #8
25c64     A7 FA 61 FC | 	wrlong	result1, fp
25c68     00 FA 4D F2 | 	cmps	result1, #0 wz
25c6c     08 4E 85 F1 | 	sub	fp, #8
25c70     08 4E 05 A1 |  if_e	add	fp, #8
25c74     A7 0E 68 AC |  if_e	wrlong	#7, fp
25c78     08 4E 85 A1 |  if_e	sub	fp, #8
25c7c     08 4E 05 F1 | 	add	fp, #8
25c80     A7 FA 01 FB | 	rdlong	result1, fp
25c84     08 4E 85 F1 | 	sub	fp, #8
25c88     04 FA 0D F2 | 	cmp	result1, #4 wz
25c8c     08 4E 05 A1 |  if_e	add	fp, #8
25c90     A7 00 68 AC |  if_e	wrlong	#0, fp
25c94     08 4E 85 A1 |  if_e	sub	fp, #8
25c98                 | LR__3901
25c98                 | LR__3902
25c98                 | LR__3903
25c98     08 4E 05 F1 | 	add	fp, #8
25c9c     A7 FA 09 FB | 	rdlong	result1, fp wz
25ca0     08 4E 85 F1 | 	sub	fp, #8
25ca4     88 00 90 5D |  if_ne	jmp	#LR__3906
25ca8     0C 4E 05 F1 | 	add	fp, #12
25cac     A7 12 02 F6 | 	mov	arg01, fp
25cb0     0C 4E 85 F1 | 	sub	fp, #12
25cb4     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
25cb8     08 4E 05 F1 | 	add	fp, #8
25cbc     A7 FA 61 FC | 	wrlong	result1, fp
25cc0     08 4E 85 F1 | 	sub	fp, #8
25cc4     00 FA 0D F2 | 	cmp	result1, #0 wz
25cc8     38 00 90 5D |  if_ne	jmp	#LR__3904
25ccc     6C 4E 05 F1 | 	add	fp, #108
25cd0     A7 FA 09 FB | 	rdlong	result1, fp wz
25cd4     6C 4E 85 F1 | 	sub	fp, #108
25cd8     28 00 90 AD |  if_e	jmp	#LR__3904
25cdc     0C 4E 05 F1 | 	add	fp, #12
25ce0     A7 12 02 F6 | 	mov	arg01, fp
25ce4     60 4E 05 F1 | 	add	fp, #96
25ce8     A7 14 02 FB | 	rdlong	arg02, fp
25cec     6C 4E 85 F1 | 	sub	fp, #108
25cf0     00 16 06 F6 | 	mov	arg03, #0
25cf4     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
25cf8     08 4E 05 F1 | 	add	fp, #8
25cfc     A7 FA 61 FC | 	wrlong	result1, fp
25d00     08 4E 85 F1 | 	sub	fp, #8
25d04                 | LR__3904
25d04     08 4E 05 F1 | 	add	fp, #8
25d08     A7 FA 09 FB | 	rdlong	result1, fp wz
25d0c     08 4E 85 F1 | 	sub	fp, #8
25d10     1C 00 90 5D |  if_ne	jmp	#LR__3905
25d14     70 4E 05 F1 | 	add	fp, #112
25d18     A7 12 02 FB | 	rdlong	arg01, fp
25d1c     70 4E 85 F1 | 	sub	fp, #112
25d20     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
25d24     08 4E 05 F1 | 	add	fp, #8
25d28     A7 FA 61 FC | 	wrlong	result1, fp
25d2c     08 4E 85 F1 | 	sub	fp, #8
25d30                 | LR__3905
25d30                 | LR__3906
25d30                 | LR__3907
25d30                 | LR__3908
25d30                 | ' 			}
25d30                 | ' 		}
25d30                 | ' 		;
25d30                 | ' 	}
25d30                 | ' 
25d30                 | ' 	return res ;
25d30     08 4E 05 F1 | 	add	fp, #8
25d34     A7 FA 01 FB | 	rdlong	result1, fp
25d38     08 4E 85 F1 | 	sub	fp, #8
25d3c     A7 F0 03 F6 | 	mov	ptra, fp
25d40     B2 00 A0 FD | 	call	#popregs_
25d44                 | _fatfs_cc_f_unlink_ret
25d44     2D 00 64 FD | 	ret
25d48                 | 
25d48                 | _fatfs_cc_f_mkdir
25d48     00 4A 05 F6 | 	mov	COUNT_, #0
25d4c     A8 00 A0 FD | 	call	#pushregs_
25d50     5C F0 07 F1 | 	add	ptra, #92
25d54     04 4E 05 F1 | 	add	fp, #4
25d58     A7 12 62 FC | 	wrlong	arg01, fp
25d5c     A7 12 02 F6 | 	mov	arg01, fp
25d60     48 4E 05 F1 | 	add	fp, #72
25d64     A7 14 02 F6 | 	mov	arg02, fp
25d68     4C 4E 85 F1 | 	sub	fp, #76
25d6c     02 16 06 F6 | 	mov	arg03, #2
25d70     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
25d74     08 4E 05 F1 | 	add	fp, #8
25d78     A7 FA 61 FC | 	wrlong	result1, fp
25d7c     08 4E 85 F1 | 	sub	fp, #8
25d80     00 FA 0D F2 | 	cmp	result1, #0 wz
25d84     C4 02 90 5D |  if_ne	jmp	#LR__3915
25d88     4C 4E 05 F1 | 	add	fp, #76
25d8c     A7 16 02 FB | 	rdlong	arg03, fp
25d90     40 4E 85 F1 | 	sub	fp, #64
25d94     A7 16 62 FC | 	wrlong	arg03, fp
25d98     A7 12 02 F6 | 	mov	arg01, fp
25d9c     08 4E 85 F1 | 	sub	fp, #8
25da0     A7 14 02 FB | 	rdlong	arg02, fp
25da4     04 4E 85 F1 | 	sub	fp, #4
25da8     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
25dac     08 4E 05 F1 | 	add	fp, #8
25db0     A7 FA 61 FC | 	wrlong	result1, fp
25db4     00 FA 4D F2 | 	cmps	result1, #0 wz
25db8     08 4E 85 F1 | 	sub	fp, #8
25dbc     08 4E 05 A1 |  if_e	add	fp, #8
25dc0     A7 10 68 AC |  if_e	wrlong	#8, fp
25dc4     08 4E 85 A1 |  if_e	sub	fp, #8
25dc8     08 4E 05 F1 | 	add	fp, #8
25dcc     A7 FA 01 FB | 	rdlong	result1, fp
25dd0     08 4E 85 F1 | 	sub	fp, #8
25dd4     04 FA 0D F2 | 	cmp	result1, #4 wz
25dd8     70 02 90 5D |  if_ne	jmp	#LR__3914
25ddc     4C 4E 05 F1 | 	add	fp, #76
25de0     A7 16 02 FB | 	rdlong	arg03, fp
25de4     10 4E 85 F1 | 	sub	fp, #16
25de8     A7 16 62 FC | 	wrlong	arg03, fp
25dec     A7 12 02 F6 | 	mov	arg01, fp
25df0     3C 4E 85 F1 | 	sub	fp, #60
25df4     00 14 06 F6 | 	mov	arg02, #0
25df8     04 AC BF FD | 	call	#_fatfs_cc_create_chain
25dfc     50 4E 05 F1 | 	add	fp, #80
25e00     A7 FA 61 FC | 	wrlong	result1, fp
25e04     48 4E 85 F1 | 	sub	fp, #72
25e08     A7 00 68 FC | 	wrlong	#0, fp
25e0c     48 4E 05 F1 | 	add	fp, #72
25e10     A7 FA 09 FB | 	rdlong	result1, fp wz
25e14     50 4E 85 F1 | 	sub	fp, #80
25e18     08 4E 05 A1 |  if_e	add	fp, #8
25e1c     A7 0E 68 AC |  if_e	wrlong	#7, fp
25e20     08 4E 85 A1 |  if_e	sub	fp, #8
25e24     50 4E 05 F1 | 	add	fp, #80
25e28     A7 FA 01 FB | 	rdlong	result1, fp
25e2c     50 4E 85 F1 | 	sub	fp, #80
25e30     01 FA 0D F2 | 	cmp	result1, #1 wz
25e34     08 4E 05 A1 |  if_e	add	fp, #8
25e38     A7 04 68 AC |  if_e	wrlong	#2, fp
25e3c     08 4E 85 A1 |  if_e	sub	fp, #8
25e40     50 4E 05 F1 | 	add	fp, #80
25e44     A7 16 02 FB | 	rdlong	arg03, fp
25e48     50 4E 85 F1 | 	sub	fp, #80
25e4c     FF FF 7F FF 
25e50     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
25e54     08 4E 05 A1 |  if_e	add	fp, #8
25e58     A7 02 68 AC |  if_e	wrlong	#1, fp
25e5c     08 4E 85 A1 |  if_e	sub	fp, #8
25e60     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
25e64     58 4E 05 F1 | 	add	fp, #88
25e68     A7 FA 61 FC | 	wrlong	result1, fp
25e6c     50 4E 85 F1 | 	sub	fp, #80
25e70     A7 FA 09 FB | 	rdlong	result1, fp wz
25e74     08 4E 85 F1 | 	sub	fp, #8
25e78     1C 01 90 5D |  if_ne	jmp	#LR__3911
25e7c     4C 4E 05 F1 | 	add	fp, #76
25e80     A7 12 02 FB | 	rdlong	arg01, fp
25e84     04 4E 05 F1 | 	add	fp, #4
25e88     A7 14 02 FB | 	rdlong	arg02, fp
25e8c     50 4E 85 F1 | 	sub	fp, #80
25e90     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
25e94     08 4E 05 F1 | 	add	fp, #8
25e98     A7 FA 61 FC | 	wrlong	result1, fp
25e9c     00 FA 4D F2 | 	cmps	result1, #0 wz
25ea0     08 4E 85 F1 | 	sub	fp, #8
25ea4     F0 00 90 5D |  if_ne	jmp	#LR__3910
25ea8     4C 4E 05 F1 | 	add	fp, #76
25eac     A7 12 02 FB | 	rdlong	arg01, fp
25eb0     4C 4E 85 F1 | 	sub	fp, #76
25eb4     34 12 06 F1 | 	add	arg01, #52
25eb8     20 14 06 F6 | 	mov	arg02, #32
25ebc     0B 16 06 F6 | 	mov	arg03, #11
25ec0     98 00 A0 FD | 	call	#\builtin_bytefill_
25ec4     4C 4E 05 F1 | 	add	fp, #76
25ec8     A7 FA 01 FB | 	rdlong	result1, fp
25ecc     34 FA 05 F1 | 	add	result1, #52
25ed0     FD 5C 48 FC | 	wrbyte	#46, result1
25ed4     A7 16 02 FB | 	rdlong	arg03, fp
25ed8     3F 16 06 F1 | 	add	arg03, #63
25edc     0B 21 48 FC | 	wrbyte	#16, arg03
25ee0     A7 12 02 FB | 	rdlong	arg01, fp
25ee4     4A 12 06 F1 | 	add	arg01, #74
25ee8     0C 4E 05 F1 | 	add	fp, #12
25eec     A7 14 02 FB | 	rdlong	arg02, fp
25ef0     09 15 62 FC | 	wrlong	arg02, arg01
25ef4     0C 4E 85 F1 | 	sub	fp, #12
25ef8     A7 14 02 FB | 	rdlong	arg02, fp
25efc     0A 13 02 F6 | 	mov	arg01, arg02
25f00     34 14 06 F1 | 	add	arg02, #52
25f04     04 4E 05 F1 | 	add	fp, #4
25f08     A7 16 02 FB | 	rdlong	arg03, fp
25f0c     50 4E 85 F1 | 	sub	fp, #80
25f10     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
25f14     4C 4E 05 F1 | 	add	fp, #76
25f18     A7 14 02 FB | 	rdlong	arg02, fp
25f1c     0A 13 02 F6 | 	mov	arg01, arg02
25f20     54 12 06 F1 | 	add	arg01, #84
25f24     4C 4E 85 F1 | 	sub	fp, #76
25f28     34 14 06 F1 | 	add	arg02, #52
25f2c     20 16 06 F6 | 	mov	arg03, #32
25f30     64 2D BF FD | 	call	#__system____builtin_memmove
25f34     4C 4E 05 F1 | 	add	fp, #76
25f38     A7 16 02 FB | 	rdlong	arg03, fp
25f3c     55 16 06 F1 | 	add	arg03, #85
25f40     0B 5D 48 FC | 	wrbyte	#46, arg03
25f44     38 4E 85 F1 | 	sub	fp, #56
25f48     A7 16 02 FB | 	rdlong	arg03, fp
25f4c     40 4E 05 F1 | 	add	fp, #64
25f50     A7 16 62 FC | 	wrlong	arg03, fp
25f54     08 4E 85 F1 | 	sub	fp, #8
25f58     A7 14 02 FB | 	rdlong	arg02, fp
25f5c     0A 13 02 F6 | 	mov	arg01, arg02
25f60     54 14 06 F1 | 	add	arg02, #84
25f64     4C 4E 85 F1 | 	sub	fp, #76
25f68     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
25f6c     4C 4E 05 F1 | 	add	fp, #76
25f70     A7 16 02 FB | 	rdlong	arg03, fp
25f74     03 16 06 F1 | 	add	arg03, #3
25f78     0B 03 48 FC | 	wrbyte	#1, arg03
25f7c     40 4E 85 F1 | 	sub	fp, #64
25f80     A7 12 02 F6 | 	mov	arg01, fp
25f84     0C 4E 85 F1 | 	sub	fp, #12
25f88     44 BA BF FD | 	call	#_fatfs_cc_dir_register
25f8c     08 4E 05 F1 | 	add	fp, #8
25f90     A7 FA 61 FC | 	wrlong	result1, fp
25f94     08 4E 85 F1 | 	sub	fp, #8
25f98                 | LR__3910
25f98                 | LR__3911
25f98     08 4E 05 F1 | 	add	fp, #8
25f9c     A7 FA 09 FB | 	rdlong	result1, fp wz
25fa0     08 4E 85 F1 | 	sub	fp, #8
25fa4     88 00 90 5D |  if_ne	jmp	#LR__3912
25fa8     28 4E 05 F1 | 	add	fp, #40
25fac     A7 12 02 FB | 	rdlong	arg01, fp
25fb0     16 12 06 F1 | 	add	arg01, #22
25fb4     30 4E 05 F1 | 	add	fp, #48
25fb8     A7 14 02 FB | 	rdlong	arg02, fp
25fbc     09 15 62 FC | 	wrlong	arg02, arg01
25fc0     0C 4E 85 F1 | 	sub	fp, #12
25fc4     A7 12 02 FB | 	rdlong	arg01, fp
25fc8     24 4E 85 F1 | 	sub	fp, #36
25fcc     A7 14 02 FB | 	rdlong	arg02, fp
25fd0     28 4E 05 F1 | 	add	fp, #40
25fd4     A7 16 02 FB | 	rdlong	arg03, fp
25fd8     50 4E 85 F1 | 	sub	fp, #80
25fdc     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
25fe0     28 4E 05 F1 | 	add	fp, #40
25fe4     A7 FA 01 FB | 	rdlong	result1, fp
25fe8     0B FA 05 F1 | 	add	result1, #11
25fec     FD 20 48 FC | 	wrbyte	#16, result1
25ff0     24 4E 05 F1 | 	add	fp, #36
25ff4     A7 FA 01 FB | 	rdlong	result1, fp
25ff8     03 FA 05 F1 | 	add	result1, #3
25ffc     FD 02 48 FC | 	wrbyte	#1, result1
26000     44 4E 85 F1 | 	sub	fp, #68
26004     A7 FA 09 FB | 	rdlong	result1, fp wz
26008     08 4E 85 F1 | 	sub	fp, #8
2600c     3C 00 90 5D |  if_ne	jmp	#LR__3913
26010     4C 4E 05 F1 | 	add	fp, #76
26014     A7 12 02 FB | 	rdlong	arg01, fp
26018     4C 4E 85 F1 | 	sub	fp, #76
2601c     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
26020     08 4E 05 F1 | 	add	fp, #8
26024     A7 FA 61 FC | 	wrlong	result1, fp
26028     08 4E 85 F1 | 	sub	fp, #8
2602c     1C 00 90 FD | 	jmp	#LR__3913
26030                 | LR__3912
26030     3C 4E 05 F1 | 	add	fp, #60
26034     A7 12 02 F6 | 	mov	arg01, fp
26038     14 4E 05 F1 | 	add	fp, #20
2603c     A7 14 02 FB | 	rdlong	arg02, fp
26040     50 4E 85 F1 | 	sub	fp, #80
26044     00 16 06 F6 | 	mov	arg03, #0
26048     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
2604c                 | LR__3913
2604c                 | LR__3914
2604c                 | LR__3915
2604c                 | ' 				remove_chain(&sobj, dcl, 0);
2604c                 | ' 			}
2604c                 | ' 		}
2604c                 | ' 		;
2604c                 | ' 	}
2604c                 | ' 
2604c                 | ' 	return res ;
2604c     08 4E 05 F1 | 	add	fp, #8
26050     A7 FA 01 FB | 	rdlong	result1, fp
26054     08 4E 85 F1 | 	sub	fp, #8
26058     A7 F0 03 F6 | 	mov	ptra, fp
2605c     B2 00 A0 FD | 	call	#popregs_
26060                 | _fatfs_cc_f_mkdir_ret
26060     2D 00 64 FD | 	ret
26064                 | 
26064                 | _fatfs_cc_f_rename
26064     01 4A 05 F6 | 	mov	COUNT_, #1
26068     A8 00 A0 FD | 	call	#pushregs_
2606c     9C F0 07 F1 | 	add	ptra, #156
26070     04 4E 05 F1 | 	add	fp, #4
26074     A7 12 62 FC | 	wrlong	arg01, fp
26078     04 4E 05 F1 | 	add	fp, #4
2607c     A7 14 62 FC | 	wrlong	arg02, fp
26080     A7 12 02 F6 | 	mov	arg01, fp
26084     08 4E 85 F1 | 	sub	fp, #8
26088     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
2608c     04 4E 05 F1 | 	add	fp, #4
26090     A7 12 02 F6 | 	mov	arg01, fp
26094     6C 4E 05 F1 | 	add	fp, #108
26098     A7 14 02 F6 | 	mov	arg02, fp
2609c     70 4E 85 F1 | 	sub	fp, #112
260a0     02 16 06 F6 | 	mov	arg03, #2
260a4     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
260a8     0C 4E 05 F1 | 	add	fp, #12
260ac     A7 FA 61 FC | 	wrlong	result1, fp
260b0     0C 4E 85 F1 | 	sub	fp, #12
260b4     00 FA 0D F2 | 	cmp	result1, #0 wz
260b8     44 03 90 5D |  if_ne	jmp	#LR__3933
260bc     70 4E 05 F1 | 	add	fp, #112
260c0     A7 16 02 FB | 	rdlong	arg03, fp
260c4     60 4E 85 F1 | 	sub	fp, #96
260c8     A7 16 62 FC | 	wrlong	arg03, fp
260cc     A7 12 02 F6 | 	mov	arg01, fp
260d0     0C 4E 85 F1 | 	sub	fp, #12
260d4     A7 14 02 FB | 	rdlong	arg02, fp
260d8     04 4E 85 F1 | 	sub	fp, #4
260dc     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
260e0     0C 4E 05 F1 | 	add	fp, #12
260e4     A7 FA 61 FC | 	wrlong	result1, fp
260e8     00 FA 4D F2 | 	cmps	result1, #0 wz
260ec     0C 4E 85 F1 | 	sub	fp, #12
260f0     1C 00 90 5D |  if_ne	jmp	#LR__3920
260f4     3B 4E 05 F1 | 	add	fp, #59
260f8     A7 FA C1 FA | 	rdbyte	result1, fp
260fc     3B 4E 85 F1 | 	sub	fp, #59
26100     A0 FA CD F7 | 	test	result1, #160 wz
26104     0C 4E 05 51 |  if_ne	add	fp, #12
26108     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2610c     0C 4E 85 51 |  if_ne	sub	fp, #12
26110                 | LR__3920
26110     0C 4E 05 F1 | 	add	fp, #12
26114     A7 1E 0A FB | 	rdlong	local01, fp wz
26118     0C 4E 85 F1 | 	sub	fp, #12
2611c     E0 02 90 5D |  if_ne	jmp	#LR__3932
26120     74 4E 05 F1 | 	add	fp, #116
26124     A7 12 02 F6 | 	mov	arg01, fp
26128     48 4E 85 F1 | 	sub	fp, #72
2612c     A7 14 02 FB | 	rdlong	arg02, fp
26130     2C 4E 85 F1 | 	sub	fp, #44
26134     20 16 06 F6 | 	mov	arg03, #32
26138     5C 2B BF FD | 	call	#__system____builtin_memmove
2613c     40 4E 05 F1 | 	add	fp, #64
26140     A7 12 02 F6 | 	mov	arg01, fp
26144     30 4E 85 F1 | 	sub	fp, #48
26148     A7 14 02 F6 | 	mov	arg02, fp
2614c     10 4E 85 F1 | 	sub	fp, #16
26150     30 16 06 F6 | 	mov	arg03, #48
26154     40 2B BF FD | 	call	#__system____builtin_memmove
26158     40 4E 05 F1 | 	add	fp, #64
2615c     A7 12 02 F6 | 	mov	arg01, fp
26160     38 4E 85 F1 | 	sub	fp, #56
26164     A7 14 02 FB | 	rdlong	arg02, fp
26168     08 4E 85 F1 | 	sub	fp, #8
2616c     34 CA BF FD | 	call	#_fatfs_cc_follow_path
26170     0C 4E 05 F1 | 	add	fp, #12
26174     A7 FA 61 FC | 	wrlong	result1, fp
26178     0C 4E 85 F1 | 	sub	fp, #12
2617c     00 FA 0D F2 | 	cmp	result1, #0 wz
26180     4C 00 90 5D |  if_ne	jmp	#LR__3923
26184     48 4E 05 F1 | 	add	fp, #72
26188     A7 FA 01 FB | 	rdlong	result1, fp
2618c     30 4E 85 F1 | 	sub	fp, #48
26190     A7 16 02 FB | 	rdlong	arg03, fp
26194     18 4E 85 F1 | 	sub	fp, #24
26198     0B FB 09 F2 | 	cmp	result1, arg03 wz
2619c     20 00 90 5D |  if_ne	jmp	#LR__3921
261a0     50 4E 05 F1 | 	add	fp, #80
261a4     A7 FA 01 FB | 	rdlong	result1, fp
261a8     30 4E 85 F1 | 	sub	fp, #48
261ac     A7 16 02 FB | 	rdlong	arg03, fp
261b0     20 4E 85 F1 | 	sub	fp, #32
261b4     0B FB 09 F2 | 	cmp	result1, arg03 wz
261b8     04 1E 06 A6 |  if_e	mov	local01, #4
261bc     04 00 90 AD |  if_e	jmp	#LR__3922
261c0                 | LR__3921
261c0     08 1E 06 F6 | 	mov	local01, #8
261c4                 | LR__3922
261c4     0C 4E 05 F1 | 	add	fp, #12
261c8     A7 1E 62 FC | 	wrlong	local01, fp
261cc     0C 4E 85 F1 | 	sub	fp, #12
261d0                 | LR__3923
261d0     0C 4E 05 F1 | 	add	fp, #12
261d4     A7 1E 02 FB | 	rdlong	local01, fp
261d8     0C 4E 85 F1 | 	sub	fp, #12
261dc     04 1E 0E F2 | 	cmp	local01, #4 wz
261e0     CC 01 90 5D |  if_ne	jmp	#LR__3929
261e4     40 4E 05 F1 | 	add	fp, #64
261e8     A7 12 02 F6 | 	mov	arg01, fp
261ec     40 4E 85 F1 | 	sub	fp, #64
261f0     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
261f4     0C 4E 05 F1 | 	add	fp, #12
261f8     A7 FA 61 FC | 	wrlong	result1, fp
261fc     0C 4E 85 F1 | 	sub	fp, #12
26200     00 FA 0D F2 | 	cmp	result1, #0 wz
26204     A8 01 90 5D |  if_ne	jmp	#LR__3928
26208     5C 4E 05 F1 | 	add	fp, #92
2620c     A7 12 02 FB | 	rdlong	arg01, fp
26210     38 4E 05 F1 | 	add	fp, #56
26214     A7 12 62 FC | 	wrlong	arg01, fp
26218     0D 12 06 F1 | 	add	arg01, #13
2621c     20 4E 85 F1 | 	sub	fp, #32
26220     A7 14 02 F6 | 	mov	arg02, fp
26224     74 4E 85 F1 | 	sub	fp, #116
26228     0D 14 06 F1 | 	add	arg02, #13
2622c     13 16 06 F6 | 	mov	arg03, #19
26230     64 2A BF FD | 	call	#__system____builtin_memmove
26234     94 4E 05 F1 | 	add	fp, #148
26238     A7 1E 02 FB | 	rdlong	local01, fp
2623c     15 4E 85 F1 | 	sub	fp, #21
26240     A7 FA C1 FA | 	rdbyte	result1, fp
26244     0B 1E 06 F1 | 	add	local01, #11
26248     0F FB 41 FC | 	wrbyte	result1, local01
2624c     15 4E 05 F1 | 	add	fp, #21
26250     A7 1E 02 FB | 	rdlong	local01, fp
26254     94 4E 85 F1 | 	sub	fp, #148
26258     0B 1E 06 F1 | 	add	local01, #11
2625c     0F 1F C2 FA | 	rdbyte	local01, local01
26260     10 1E CE F7 | 	test	local01, #16 wz
26264     24 00 90 5D |  if_ne	jmp	#LR__3924
26268     94 4E 05 F1 | 	add	fp, #148
2626c     A7 FA 01 FB | 	rdlong	result1, fp
26270     FD 1E 02 F6 | 	mov	local01, result1
26274     94 4E 85 F1 | 	sub	fp, #148
26278     0B FA 05 F1 | 	add	result1, #11
2627c     FD FA C1 FA | 	rdbyte	result1, result1
26280     20 FA 45 F5 | 	or	result1, #32
26284     0B 1E 06 F1 | 	add	local01, #11
26288     0F FB 41 FC | 	wrbyte	result1, local01
2628c                 | LR__3924
2628c     70 4E 05 F1 | 	add	fp, #112
26290     A7 1E 02 FB | 	rdlong	local01, fp
26294     03 1E 06 F1 | 	add	local01, #3
26298     0F 03 48 FC | 	wrbyte	#1, local01
2629c     24 4E 05 F1 | 	add	fp, #36
262a0     A7 1E 02 FB | 	rdlong	local01, fp
262a4     94 4E 85 F1 | 	sub	fp, #148
262a8     0B 1E 06 F1 | 	add	local01, #11
262ac     0F 1F C2 FA | 	rdbyte	local01, local01
262b0     10 1E CE F7 | 	test	local01, #16 wz
262b4     F8 00 90 AD |  if_e	jmp	#LR__3927
262b8     18 4E 05 F1 | 	add	fp, #24
262bc     A7 16 02 FB | 	rdlong	arg03, fp
262c0     30 4E 05 F1 | 	add	fp, #48
262c4     A7 1E 02 FB | 	rdlong	local01, fp
262c8     48 4E 85 F1 | 	sub	fp, #72
262cc     0F 17 0A F2 | 	cmp	arg03, local01 wz
262d0     DC 00 90 AD |  if_e	jmp	#LR__3927
262d4     70 4E 05 F1 | 	add	fp, #112
262d8     A7 12 02 FB | 	rdlong	arg01, fp
262dc     09 1F 02 F6 | 	mov	local01, arg01
262e0     24 4E 05 F1 | 	add	fp, #36
262e4     A7 14 02 FB | 	rdlong	arg02, fp
262e8     94 4E 85 F1 | 	sub	fp, #148
262ec     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
262f0     FD 14 02 F6 | 	mov	arg02, result1
262f4     0F 13 02 F6 | 	mov	arg01, local01
262f8     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
262fc     98 4E 05 F1 | 	add	fp, #152
26300     A7 FA 61 FC | 	wrlong	result1, fp
26304     00 FA 4D F2 | 	cmps	result1, #0 wz
26308     98 4E 85 F1 | 	sub	fp, #152
2630c     0C 4E 05 A1 |  if_e	add	fp, #12
26310     A7 04 68 AC |  if_e	wrlong	#2, fp
26314     0C 4E 85 A1 |  if_e	sub	fp, #12
26318     94 00 90 AD |  if_e	jmp	#LR__3926
2631c     70 4E 05 F1 | 	add	fp, #112
26320     A7 12 02 FB | 	rdlong	arg01, fp
26324     28 4E 05 F1 | 	add	fp, #40
26328     A7 14 02 FB | 	rdlong	arg02, fp
2632c     98 4E 85 F1 | 	sub	fp, #152
26330     4C A0 BF FD | 	call	#_fatfs_cc_move_window
26334     0C 4E 05 F1 | 	add	fp, #12
26338     A7 FA 61 FC | 	wrlong	result1, fp
2633c     64 4E 05 F1 | 	add	fp, #100
26340     A7 1E 02 FB | 	rdlong	local01, fp
26344     54 1E 06 F1 | 	add	local01, #84
26348     24 4E 05 F1 | 	add	fp, #36
2634c     A7 1E 62 FC | 	wrlong	local01, fp
26350     88 4E 85 F1 | 	sub	fp, #136
26354     A7 1E 0A FB | 	rdlong	local01, fp wz
26358     0C 4E 85 F1 | 	sub	fp, #12
2635c     50 00 90 5D |  if_ne	jmp	#LR__3925
26360     94 4E 05 F1 | 	add	fp, #148
26364     A7 1E 02 FB | 	rdlong	local01, fp
26368     94 4E 85 F1 | 	sub	fp, #148
2636c     01 1E 06 F1 | 	add	local01, #1
26370     0F 1F C2 FA | 	rdbyte	local01, local01
26374     2E 1E 0E F2 | 	cmp	local01, #46 wz
26378     34 00 90 5D |  if_ne	jmp	#LR__3925
2637c     70 4E 05 F1 | 	add	fp, #112
26380     A7 12 02 FB | 	rdlong	arg01, fp
26384     24 4E 05 F1 | 	add	fp, #36
26388     A7 14 02 FB | 	rdlong	arg02, fp
2638c     4C 4E 85 F1 | 	sub	fp, #76
26390     A7 16 02 FB | 	rdlong	arg03, fp
26394     48 4E 85 F1 | 	sub	fp, #72
26398     50 AD BF FD | 	call	#_fatfs_cc_st_clust
2639c     70 4E 05 F1 | 	add	fp, #112
263a0     A7 1E 02 FB | 	rdlong	local01, fp
263a4     70 4E 85 F1 | 	sub	fp, #112
263a8     03 1E 06 F1 | 	add	local01, #3
263ac     0F 03 48 FC | 	wrbyte	#1, local01
263b0                 | LR__3925
263b0                 | LR__3926
263b0                 | LR__3927
263b0                 | LR__3928
263b0                 | LR__3929
263b0     0C 4E 05 F1 | 	add	fp, #12
263b4     A7 1E 0A FB | 	rdlong	local01, fp wz
263b8     0C 4E 85 F1 | 	sub	fp, #12
263bc     40 00 90 5D |  if_ne	jmp	#LR__3931
263c0     10 4E 05 F1 | 	add	fp, #16
263c4     A7 12 02 F6 | 	mov	arg01, fp
263c8     10 4E 85 F1 | 	sub	fp, #16
263cc     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
263d0     0C 4E 05 F1 | 	add	fp, #12
263d4     A7 FA 61 FC | 	wrlong	result1, fp
263d8     0C 4E 85 F1 | 	sub	fp, #12
263dc     00 FA 0D F2 | 	cmp	result1, #0 wz
263e0     1C 00 90 5D |  if_ne	jmp	#LR__3930
263e4     70 4E 05 F1 | 	add	fp, #112
263e8     A7 12 02 FB | 	rdlong	arg01, fp
263ec     70 4E 85 F1 | 	sub	fp, #112
263f0     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
263f4     0C 4E 05 F1 | 	add	fp, #12
263f8     A7 FA 61 FC | 	wrlong	result1, fp
263fc     0C 4E 85 F1 | 	sub	fp, #12
26400                 | LR__3930
26400                 | LR__3931
26400                 | LR__3932
26400                 | LR__3933
26400                 | ' 					res = sync_fs(fs);
26400                 | ' 				}
26400                 | ' 			}
26400                 | ' 
26400                 | ' 		}
26400                 | ' 		;
26400                 | ' 	}
26400                 | ' 
26400                 | ' 	return res ;
26400     0C 4E 05 F1 | 	add	fp, #12
26404     A7 FA 01 FB | 	rdlong	result1, fp
26408     0C 4E 85 F1 | 	sub	fp, #12
2640c     A7 F0 03 F6 | 	mov	ptra, fp
26410     B2 00 A0 FD | 	call	#popregs_
26414                 | _fatfs_cc_f_rename_ret
26414     2D 00 64 FD | 	ret
26418                 | 
26418                 | _fatfs_cc_time
26418     00 4A 05 F6 | 	mov	COUNT_, #0
2641c     A8 00 A0 FD | 	call	#pushregs_
26420     14 F0 07 F1 | 	add	ptra, #20
26424     04 4E 05 F1 | 	add	fp, #4
26428     A7 12 62 FC | 	wrlong	arg01, fp
2642c     04 4E 05 F1 | 	add	fp, #4
26430     A7 12 02 F6 | 	mov	arg01, fp
26434     08 4E 85 F1 | 	sub	fp, #8
26438     00 14 06 F6 | 	mov	arg02, #0
2643c     FC 17 B0 FD | 	call	#_fatfs_cc_gettimeofday
26440     08 4E 05 F1 | 	add	fp, #8
26444     A7 FA 01 FB | 	rdlong	result1, fp
26448     08 4E 05 F1 | 	add	fp, #8
2644c     A7 FA 61 FC | 	wrlong	result1, fp
26450     0C 4E 85 F1 | 	sub	fp, #12
26454     A7 FA 09 FB | 	rdlong	result1, fp wz
26458     04 4E 85 F1 | 	sub	fp, #4
2645c     18 00 90 AD |  if_e	jmp	#LR__3940
26460     04 4E 05 F1 | 	add	fp, #4
26464     A7 FA 01 FB | 	rdlong	result1, fp
26468     0C 4E 05 F1 | 	add	fp, #12
2646c     A7 14 02 FB | 	rdlong	arg02, fp
26470     10 4E 85 F1 | 	sub	fp, #16
26474     FD 14 62 FC | 	wrlong	arg02, result1
26478                 | LR__3940
26478                 | '         *tp = now;
26478                 | '     return now;
26478     10 4E 05 F1 | 	add	fp, #16
2647c     A7 FA 01 FB | 	rdlong	result1, fp
26480     10 4E 85 F1 | 	sub	fp, #16
26484     A7 F0 03 F6 | 	mov	ptra, fp
26488     B2 00 A0 FD | 	call	#popregs_
2648c                 | _fatfs_cc_time_ret
2648c     2D 00 64 FD | 	ret
26490                 | 
26490                 | _fatfs_cc_mktime
26490     06 4A 05 F6 | 	mov	COUNT_, #6
26494     A8 00 A0 FD | 	call	#pushregs_
26498     09 1F 02 F6 | 	mov	local01, arg01
2649c     14 1E 06 F1 | 	add	local01, #20
264a0     0F 13 02 FB | 	rdlong	arg01, local01
264a4     14 1E 86 F1 | 	sub	local01, #20
264a8     46 12 56 F2 | 	cmps	arg01, #70 wc
264ac                 | '                 return (time_t) -1;
264ac     01 FA 65 C6 |  if_b	neg	result1, #1
264b0     7C 01 90 CD |  if_b	jmp	#LR__3954
264b4     03 00 00 FF 
264b8     6C 21 06 F6 | 	mov	local02, ##1900
264bc     14 1E 06 F1 | 	add	local01, #20
264c0     0F FB 01 FB | 	rdlong	result1, local01
264c4     FD 20 02 F1 | 	add	local02, result1
264c8     08 1E 86 F1 | 	sub	local01, #8
264cc     0F 23 02 FB | 	rdlong	local03, local01
264d0     01 22 86 F1 | 	sub	local03, #1
264d4     04 1E 06 F1 | 	add	local01, #4
264d8     0F 13 02 FB | 	rdlong	arg01, local01
264dc     10 1E 86 F1 | 	sub	local01, #16
264e0     02 12 66 F0 | 	shl	arg01, #2
264e4     02 00 00 FF 
264e8     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
264ec     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
264f0     09 FB 01 FB | 	rdlong	result1, arg01
264f4     FD 22 02 F1 | 	add	local03, result1
264f8     10 13 02 F6 | 	mov	arg01, local02
264fc     02 00 00 FF 
26500     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
26504     DC 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
26508     00 FA 0D F2 | 	cmp	result1, #0 wz
2650c     1C 00 90 AD |  if_e	jmp	#LR__3950
26510     00 24 06 F6 | 	mov	local04, #0
26514     10 1E 06 F1 | 	add	local01, #16
26518     0F FB 01 FB | 	rdlong	result1, local01
2651c     10 1E 86 F1 | 	sub	local01, #16
26520     02 FA 55 F2 | 	cmps	result1, #2 wc
26524     01 24 06 36 |  if_ae	mov	local04, #1
26528     04 00 90 FD | 	jmp	#LR__3951
2652c                 | LR__3950
2652c     00 24 06 F6 | 	mov	local04, #0
26530                 | LR__3951
26530     04 1E 06 F1 | 	add	local01, #4
26534     0F FB 01 FB | 	rdlong	result1, local01
26538     04 1E 86 F1 | 	sub	local01, #4
2653c     0F 27 02 FB | 	rdlong	local05, local01
26540     08 1E 06 F1 | 	add	local01, #8
26544     0F 13 02 FB | 	rdlong	arg01, local01
26548     07 00 00 FF 
2654c     10 12 06 FD | 	qmul	arg01, ##3600
26550     12 23 02 F1 | 	add	local03, local04
26554     FD 24 02 F6 | 	mov	local04, result1
26558     04 24 66 F0 | 	shl	local04, #4
2655c     FD 24 82 F1 | 	sub	local04, result1
26560     02 24 66 F0 | 	shl	local04, #2
26564     12 27 02 F1 | 	add	local05, local04
26568     08 1E 86 F1 | 	sub	local01, #8
2656c     18 24 62 FD | 	getqx	local04
26570     A8 00 00 FF 
26574     80 23 06 FD | 	qmul	local03, ##86400
26578     12 27 02 F1 | 	add	local05, local04
2657c     10 23 02 F6 | 	mov	local03, local02
26580     03 00 00 FF 
26584     B2 23 86 F1 | 	sub	local03, ##1970
26588     18 24 62 FD | 	getqx	local04
2658c     99 F0 00 FF 
26590     80 23 06 FD | 	qmul	local03, ##31536000
26594     12 27 02 F1 | 	add	local05, local04
26598     10 23 02 F6 | 	mov	local03, local02
2659c     03 00 00 FF 
265a0     B1 23 86 F1 | 	sub	local03, ##1969
265a4     11 29 52 F6 | 	abs	local06, local03 wc
265a8     02 28 46 F0 | 	shr	local06, #2
265ac     14 29 82 F6 | 	negc	local06, local06
265b0     03 00 00 FF 
265b4     D1 21 56 F2 | 	cmps	local02, ##2001 wc
265b8     18 24 62 FD | 	getqx	local04
265bc     12 27 02 F1 | 	add	local05, local04
265c0     18 00 90 CD |  if_b	jmp	#LR__3952
265c4     03 00 00 FF 
265c8     D0 21 86 F1 | 	sub	local02, ##2000
265cc     10 25 52 F6 | 	abs	local04, local02 wc
265d0     64 24 16 FD | 	qdiv	local04, #100
265d4     18 24 62 FD | 	getqx	local04
265d8     12 29 A2 F3 | 	sumnc	local06, local04
265dc                 | LR__3952
265dc     A8 00 00 FF 
265e0     80 29 06 FD | 	qmul	local06, ##86400
265e4     18 28 62 FD | 	getqx	local06
265e8     14 27 02 F1 | 	add	local05, local06
265ec     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
265f0     02 00 00 FF 
265f4     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
265f8     F6 28 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
265fc     14 27 02 F1 | 	add	local05, local06
26600     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
26604     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
26608     02 00 00 FF 
2660c     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
26610     01 22 0E F2 | 	cmp	local03, #1 wz
26614     14 00 90 5D |  if_ne	jmp	#LR__3953
26618     0F 13 02 F6 | 	mov	arg01, local01
2661c     C8 19 B0 FD | 	call	#_fatfs_cc___indst
26620     00 FA 0D F2 | 	cmp	result1, #0 wz
26624     07 00 00 5F 
26628     10 26 86 51 |  if_ne	sub	local05, ##3600
2662c                 | LR__3953
2662c                 | '                 s -=  (3600L) ;
2662c                 | ' 
2662c                 | '         return s;
2662c     13 FB 01 F6 | 	mov	result1, local05
26630                 | LR__3954
26630     A7 F0 03 F6 | 	mov	ptra, fp
26634     B2 00 A0 FD | 	call	#popregs_
26638                 | _fatfs_cc_mktime_ret
26638     2D 00 64 FD | 	ret
2663c                 | 
2663c                 | _fatfs_cc__gmtime_r
2663c     03 4A 05 F6 | 	mov	COUNT_, #3
26640     A8 00 A0 FD | 	call	#pushregs_
26644     09 1F 02 FB | 	rdlong	local01, arg01
26648     A8 00 00 FF 
2664c     80 1F 16 FD | 	qdiv	local01, ##86400
26650     18 FA 61 FD | 	getqx	result1
26654     04 FA 05 F1 | 	add	result1, #4
26658     07 FA 15 FD | 	qdiv	result1, #7
2665c     18 14 06 F1 | 	add	arg02, #24
26660     D1 7F 27 FF 
26664     00 1E 16 F2 | 	cmp	local01, ##1325376000 wc
26668     D1 7F 27 3F 
2666c     00 1E 86 31 |  if_ae	sub	local01, ##1325376000
26670     03 00 00 3F 
26674     DC 21 06 36 |  if_ae	mov	local02, ##2012
26678     03 00 00 CF 
2667c     B2 21 06 C6 |  if_b	mov	local02, ##1970
26680                 | ' 	  year = 1970;
26680                 | ' 	}
26680                 | ' 
26680                 | ' 	for(;;) {
26680     19 FA 61 FD | 	getqy	result1
26684     0A FB 61 FC | 	wrlong	result1, arg02
26688     18 14 86 F1 | 	sub	arg02, #24
2668c                 | LR__3960
2668c     10 13 02 F6 | 	mov	arg01, local02
26690     50 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
26694     00 FA 0D F2 | 	cmp	result1, #0 wz
26698     42 F1 00 5F 
2669c     00 23 06 56 |  if_ne	mov	local03, ##31622400
266a0     99 F0 00 AF 
266a4     80 23 06 A6 |  if_e	mov	local03, ##31536000
266a8     11 1F 12 F2 | 	cmp	local01, local03 wc
266ac                 | ' 	    break;
266ac     01 20 06 31 |  if_ae	add	local02, #1
266b0     11 1F 82 31 |  if_ae	sub	local01, local03
266b4     D4 FF 9F 3D |  if_ae	jmp	#LR__3960
266b8     A8 00 00 FF 
266bc     80 1F 16 FD | 	qdiv	local01, ##86400
266c0     10 23 02 F6 | 	mov	local03, local02
266c4     03 00 00 FF 
266c8     6C 23 86 F1 | 	sub	local03, ##1900
266cc     14 14 06 F1 | 	add	arg02, #20
266d0     0A 23 62 FC | 	wrlong	local03, arg02
266d4     08 14 06 F1 | 	add	arg02, #8
266d8     10 13 02 F6 | 	mov	arg01, local02
266dc     18 20 62 FD | 	getqx	local02
266e0     0A 21 62 FC | 	wrlong	local02, arg02
266e4     1C 14 86 F1 | 	sub	arg02, #28
266e8     F8 15 B0 FD | 	call	#_fatfs_cc__is_leap_year
266ec     00 FA 0D F2 | 	cmp	result1, #0 wz
266f0     1D 22 06 56 |  if_ne	mov	local03, #29
266f4     1C 22 06 A6 |  if_e	mov	local03, #28
266f8     02 00 00 FF 
266fc     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
26700     F6 22 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
26704     02 00 00 FF 
26708     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
2670c                 | ' 
2670c                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
2670c                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
2670c     00 12 06 F6 | 	mov	arg01, #0
26710     97 2A 48 FB | 	callpa	#(@LR__3962-@LR__3961)>>2,fcache_load_ptr_
26714                 | LR__3961
26714     09 23 02 F6 | 	mov	local03, arg01
26718     02 22 66 F0 | 	shl	local03, #2
2671c     02 00 00 FF 
26720     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
26724     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
26728     11 23 02 FB | 	rdlong	local03, local03
2672c     11 21 52 F2 | 	cmps	local02, local03 wc
26730     02 00 00 FF 
26734     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
26738     2C 00 90 CD |  if_b	jmp	#LR__3963
2673c     09 23 02 F6 | 	mov	local03, arg01
26740     02 22 66 F0 | 	shl	local03, #2
26744     02 00 00 FF 
26748     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2674c     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
26750     11 23 02 FB | 	rdlong	local03, local03
26754     11 21 82 F1 | 	sub	local02, local03
26758     01 12 06 F1 | 	add	arg01, #1
2675c     02 00 00 FF 
26760     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
26764     AC FF 9F FD | 	jmp	#LR__3961
26768                 | LR__3962
26768                 | LR__3963
26768     A8 00 00 FF 
2676c     80 1F 16 FD | 	qdiv	local01, ##86400
26770     10 14 06 F1 | 	add	arg02, #16
26774     0A 13 62 FC | 	wrlong	arg01, arg02
26778     01 20 06 F1 | 	add	local02, #1
2677c     04 14 86 F1 | 	sub	arg02, #4
26780     0A 21 62 FC | 	wrlong	local02, arg02
26784     19 1E 62 FD | 	getqy	local01
26788     07 00 00 FF 
2678c     10 1E 16 FD | 	qdiv	local01, ##3600
26790     18 22 62 FD | 	getqx	local03
26794     07 00 00 FF 
26798     10 1E 16 FD | 	qdiv	local01, ##3600
2679c     04 14 86 F1 | 	sub	arg02, #4
267a0     0A 23 62 FC | 	wrlong	local03, arg02
267a4     19 1E 62 FD | 	getqy	local01
267a8     3C 1E 16 FD | 	qdiv	local01, #60
267ac     18 22 62 FD | 	getqx	local03
267b0     3C 1E 16 FD | 	qdiv	local01, #60
267b4     04 14 86 F1 | 	sub	arg02, #4
267b8     0A 23 62 FC | 	wrlong	local03, arg02
267bc     04 14 86 F1 | 	sub	arg02, #4
267c0                 | '         stm->tm_isdst = 0;
267c0                 | ' 
267c0                 | ' ;
267c0                 | '         return stm;
267c0     0A FB 01 F6 | 	mov	result1, arg02
267c4     19 22 62 FD | 	getqy	local03
267c8     0A 23 62 FC | 	wrlong	local03, arg02
267cc     20 14 06 F1 | 	add	arg02, #32
267d0     0A 01 68 FC | 	wrlong	#0, arg02
267d4     A7 F0 03 F6 | 	mov	ptra, fp
267d8     B2 00 A0 FD | 	call	#popregs_
267dc                 | _fatfs_cc__gmtime_r_ret
267dc     2D 00 64 FD | 	ret
267e0                 | 
267e0                 | _fatfs_cc__tzset
267e0     41 01 00 FF 
267e4     11 13 06 F6 | 	mov	arg01, ##@LR__4275
267e8     34 00 B0 FD | 	call	#_fatfs_cc_getenv
267ec     FD 12 02 F6 | 	mov	arg01, result1
267f0     02 00 00 FF 
267f4     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
267f8     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
267fc     02 00 00 FF 
26800     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
26804     2C 15 B0 FD | 	call	#_fatfs_cc___tzoffset
26808     02 00 00 FF 
2680c     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
26810     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
26814     02 00 00 FF 
26818     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
2681c                 | _fatfs_cc__tzset_ret
2681c     2D 00 64 FD | 	ret
26820                 | 
26820                 | _fatfs_cc_getenv
26820     06 4A 05 F6 | 	mov	COUNT_, #6
26824     A8 00 A0 FD | 	call	#pushregs_
26828     09 1F 02 F6 | 	mov	local01, arg01
2682c     09 21 02 F6 | 	mov	local02, arg01
26830     97 06 48 FB | 	callpa	#(@LR__3971-@LR__3970)>>2,fcache_load_ptr_
26834                 | LR__3970
26834     10 FB C9 FA | 	rdbyte	result1, local02 wz
26838     01 20 06 51 |  if_ne	add	local02, #1
2683c     F4 FF 9F 5D |  if_ne	jmp	#LR__3970
26840                 | LR__3971
26840     09 21 82 F1 | 	sub	local02, arg01
26844     10 FB 01 F6 | 	mov	result1, local02
26848     02 00 00 FF 
2684c     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
26850     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
26854     02 00 00 FF 
26858     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2685c                 | '             return 0;
2685c     00 FA 05 A6 |  if_e	mov	result1, #0
26860     5C 00 90 AD |  if_e	jmp	#LR__3974
26864                 | ' 
26864                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
26864     02 00 00 FF 
26868     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2686c     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
26870     02 00 00 FF 
26874     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
26878                 | LR__3972
26878     11 25 0A FB | 	rdlong	local04, local03 wz
2687c     3C 00 90 AD |  if_e	jmp	#LR__3973
26880     12 13 02 F6 | 	mov	arg01, local04
26884     0F 15 02 F6 | 	mov	arg02, local01
26888     10 17 02 F6 | 	mov	arg03, local02
2688c     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
26890     00 FA 0D F2 | 	cmp	result1, #0 wz
26894     10 27 02 A6 |  if_e	mov	local05, local02
26898     12 27 02 A1 |  if_e	add	local05, local04
2689c     13 29 C2 AA |  if_e	rdbyte	local06, local05
268a0     3D 28 0E A2 |  if_e	cmp	local06, #61 wz
268a4                 | ' 			return name+len+1;
268a4     10 25 02 A1 |  if_e	add	local04, local02
268a8     01 24 06 A1 |  if_e	add	local04, #1
268ac     12 FB 01 A6 |  if_e	mov	result1, local04
268b0     0C 00 90 AD |  if_e	jmp	#LR__3974
268b4     04 22 06 F1 | 	add	local03, #4
268b8     BC FF 9F FD | 	jmp	#LR__3972
268bc                 | LR__3973
268bc                 | ' 	}
268bc                 | ' 	return 0;
268bc     00 FA 05 F6 | 	mov	result1, #0
268c0                 | LR__3974
268c0     A7 F0 03 F6 | 	mov	ptra, fp
268c4     B2 00 A0 FD | 	call	#popregs_
268c8                 | _fatfs_cc_getenv_ret
268c8     2D 00 64 FD | 	ret
268cc                 | 
268cc                 | _fatfs_cc__get_fattime
268cc     00 4A 05 F6 | 	mov	COUNT_, #0
268d0     A8 00 A0 FD | 	call	#pushregs_
268d4     34 F0 07 F1 | 	add	ptra, #52
268d8     00 12 06 F6 | 	mov	arg01, #0
268dc     38 FB BF FD | 	call	#_fatfs_cc_time
268e0     04 4E 05 F1 | 	add	fp, #4
268e4     A7 FA 61 FC | 	wrlong	result1, fp
268e8     A7 12 02 F6 | 	mov	arg01, fp
268ec     0C 4E 05 F1 | 	add	fp, #12
268f0     A7 14 02 F6 | 	mov	arg02, fp
268f4     10 4E 85 F1 | 	sub	fp, #16
268f8     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
268fc     24 4E 05 F1 | 	add	fp, #36
26900     A7 14 02 FB | 	rdlong	arg02, fp
26904     50 14 86 F1 | 	sub	arg02, #80
26908     09 14 66 F0 | 	shl	arg02, #9
2690c     04 4E 85 F1 | 	sub	fp, #4
26910     A7 FA 01 FB | 	rdlong	result1, fp
26914     01 FA 05 F1 | 	add	result1, #1
26918     05 FA 65 F0 | 	shl	result1, #5
2691c     FD 14 42 F5 | 	or	arg02, result1
26920     04 4E 85 F1 | 	sub	fp, #4
26924     A7 FA 01 FB | 	rdlong	result1, fp
26928     FD 14 42 F5 | 	or	arg02, result1
2692c     14 4E 85 F1 | 	sub	fp, #20
26930     A7 14 62 FC | 	wrlong	arg02, fp
26934     10 4E 05 F1 | 	add	fp, #16
26938     A7 14 02 FB | 	rdlong	arg02, fp
2693c     0B 14 66 F0 | 	shl	arg02, #11
26940     04 4E 85 F1 | 	sub	fp, #4
26944     A7 FA 01 FB | 	rdlong	result1, fp
26948     05 FA 65 F0 | 	shl	result1, #5
2694c     FD 14 42 F5 | 	or	arg02, result1
26950     04 4E 85 F1 | 	sub	fp, #4
26954     A7 FA 01 FB | 	rdlong	result1, fp
26958     FD 14 42 F5 | 	or	arg02, result1
2695c     04 4E 85 F1 | 	sub	fp, #4
26960     A7 14 62 FC | 	wrlong	arg02, fp
26964                 | ' 
26964                 | '     now = time(0);
26964                 | '     _gmtime_r (&now, &date);
26964                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
26964                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
26964                 | '     return (ffdate << 16) | fftime;
26964     04 4E 85 F1 | 	sub	fp, #4
26968     A7 FA 01 FB | 	rdlong	result1, fp
2696c     10 FA 65 F0 | 	shl	result1, #16
26970     08 4E 85 F1 | 	sub	fp, #8
26974     0A FB 41 F5 | 	or	result1, arg02
26978     A7 F0 03 F6 | 	mov	ptra, fp
2697c     B2 00 A0 FD | 	call	#popregs_
26980                 | _fatfs_cc__get_fattime_ret
26980     2D 00 64 FD | 	ret
26984                 | 
26984                 | _fatfs_cc_unixtime_0843
26984     00 4A 05 F6 | 	mov	COUNT_, #0
26988     A8 00 A0 FD | 	call	#pushregs_
2698c     34 F0 07 F1 | 	add	ptra, #52
26990     04 4E 05 F1 | 	add	fp, #4
26994     A7 12 62 FC | 	wrlong	arg01, fp
26998     04 4E 05 F1 | 	add	fp, #4
2699c     A7 14 62 FC | 	wrlong	arg02, fp
269a0     04 4E 85 F1 | 	sub	fp, #4
269a4     A7 14 02 FB | 	rdlong	arg02, fp
269a8     09 14 46 F0 | 	shr	arg02, #9
269ac     7F 14 06 F5 | 	and	arg02, #127
269b0     50 FA 05 F6 | 	mov	result1, #80
269b4     0A FB 01 F1 | 	add	result1, arg02
269b8     20 4E 05 F1 | 	add	fp, #32
269bc     A7 FA 61 FC | 	wrlong	result1, fp
269c0     20 4E 85 F1 | 	sub	fp, #32
269c4     A7 FA 01 FB | 	rdlong	result1, fp
269c8     05 FA 45 F0 | 	shr	result1, #5
269cc     FD FA 41 F8 | 	getnib	result1, result1, #0
269d0     01 FA 85 F1 | 	sub	result1, #1
269d4     1C 4E 05 F1 | 	add	fp, #28
269d8     A7 FA 61 FC | 	wrlong	result1, fp
269dc     1C 4E 85 F1 | 	sub	fp, #28
269e0     A7 FA 01 FB | 	rdlong	result1, fp
269e4     1F FA 05 F5 | 	and	result1, #31
269e8     18 4E 05 F1 | 	add	fp, #24
269ec     A7 FA 61 FC | 	wrlong	result1, fp
269f0     14 4E 85 F1 | 	sub	fp, #20
269f4     A7 FA 01 FB | 	rdlong	result1, fp
269f8     0B FA 45 F0 | 	shr	result1, #11
269fc     1F FA 05 F5 | 	and	result1, #31
26a00     10 4E 05 F1 | 	add	fp, #16
26a04     A7 FA 61 FC | 	wrlong	result1, fp
26a08     10 4E 85 F1 | 	sub	fp, #16
26a0c     A7 FA 01 FB | 	rdlong	result1, fp
26a10     05 FA 45 F0 | 	shr	result1, #5
26a14     3F FA 05 F5 | 	and	result1, #63
26a18     0C 4E 05 F1 | 	add	fp, #12
26a1c     A7 FA 61 FC | 	wrlong	result1, fp
26a20     0C 4E 85 F1 | 	sub	fp, #12
26a24     A7 14 02 FB | 	rdlong	arg02, fp
26a28     1F 14 06 F5 | 	and	arg02, #31
26a2c     01 14 66 F0 | 	shl	arg02, #1
26a30     08 4E 05 F1 | 	add	fp, #8
26a34     A7 14 62 FC | 	wrlong	arg02, fp
26a38     A7 12 02 F6 | 	mov	arg01, fp
26a3c     10 4E 85 F1 | 	sub	fp, #16
26a40     4C FA BF FD | 	call	#_fatfs_cc_mktime
26a44     0C 4E 05 F1 | 	add	fp, #12
26a48     A7 FA 61 FC | 	wrlong	result1, fp
26a4c                 | ' 
26a4c                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
26a4c                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
26a4c                 | '     date.tm_mday = (dosdate & 0x1f);
26a4c                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
26a4c                 | '     date.tm_min = (dostime >> 5) & 0x3f;
26a4c                 | '     date.tm_sec = (dostime & 0x1f) << 1;
26a4c                 | ' 
26a4c                 | '     t = mktime(&date);
26a4c                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
26a4c                 | '     return t;
26a4c     0C 4E 85 F1 | 	sub	fp, #12
26a50     A7 F0 03 F6 | 	mov	ptra, fp
26a54     B2 00 A0 FD | 	call	#popregs_
26a58                 | _fatfs_cc_unixtime_0843_ret
26a58     2D 00 64 FD | 	ret
26a5c                 | 
26a5c                 | _fatfs_cc__set_dos_error_0845
26a5c     09 01 02 F6 | 	mov	_var01, arg01
26a60                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
26a60                 | '     switch (derr) {
26a60     14 00 26 F3 | 	fle	_var01, #20
26a64     30 00 62 FD | 	jmprel	_var01
26a68                 | LR__3980
26a68     50 00 90 FD | 	jmp	#LR__3981
26a6c     84 00 90 FD | 	jmp	#LR__3995
26a70     80 00 90 FD | 	jmp	#LR__3996
26a74     7C 00 90 FD | 	jmp	#LR__3997
26a78     48 00 90 FD | 	jmp	#LR__3982
26a7c     44 00 90 FD | 	jmp	#LR__3983
26a80     40 00 90 FD | 	jmp	#LR__3984
26a84     44 00 90 FD | 	jmp	#LR__3985
26a88     48 00 90 FD | 	jmp	#LR__3987
26a8c     54 00 90 FD | 	jmp	#LR__3990
26a90     38 00 90 FD | 	jmp	#LR__3986
26a94     4C 00 90 FD | 	jmp	#LR__3991
26a98     48 00 90 FD | 	jmp	#LR__3992
26a9c     44 00 90 FD | 	jmp	#LR__3993
26aa0     50 00 90 FD | 	jmp	#LR__3998
26aa4     4C 00 90 FD | 	jmp	#LR__3998
26aa8     48 00 90 FD | 	jmp	#LR__3998
26aac     2C 00 90 FD | 	jmp	#LR__3988
26ab0     38 00 90 FD | 	jmp	#LR__3994
26ab4     2C 00 90 FD | 	jmp	#LR__3989
26ab8     38 00 90 FD | 	jmp	#LR__3998
26abc                 | LR__3981
26abc     00 02 06 F6 | 	mov	_var02, #0
26ac0                 | '         r = 0;
26ac0                 | '         break;
26ac0     34 00 90 FD | 	jmp	#LR__3999
26ac4                 | LR__3982
26ac4                 | LR__3983
26ac4                 | LR__3984
26ac4     04 02 06 F6 | 	mov	_var02, #4
26ac8                 | '         r =  4 ;
26ac8                 | '         break;
26ac8     2C 00 90 FD | 	jmp	#LR__3999
26acc                 | LR__3985
26acc                 | LR__3986
26acc     06 02 06 F6 | 	mov	_var02, #6
26ad0                 | '         r =  6 ;
26ad0                 | '         break;
26ad0     24 00 90 FD | 	jmp	#LR__3999
26ad4                 | LR__3987
26ad4     09 02 06 F6 | 	mov	_var02, #9
26ad8                 | '         r =  9 ;
26ad8                 | '         break;
26ad8     1C 00 90 FD | 	jmp	#LR__3999
26adc                 | LR__3988
26adc     07 02 06 F6 | 	mov	_var02, #7
26ae0                 | '         r =  7 ;
26ae0                 | '         break;
26ae0     14 00 90 FD | 	jmp	#LR__3999
26ae4                 | LR__3989
26ae4                 | LR__3990
26ae4                 | LR__3991
26ae4                 | LR__3992
26ae4                 | LR__3993
26ae4     0A 02 06 F6 | 	mov	_var02, #10
26ae8                 | '         r =  10 ;
26ae8                 | '         break;
26ae8     0C 00 90 FD | 	jmp	#LR__3999
26aec                 | LR__3994
26aec     0B 02 06 F6 | 	mov	_var02, #11
26af0                 | '         r =  11 ;
26af0                 | '         break;
26af0     04 00 90 FD | 	jmp	#LR__3999
26af4                 | LR__3995
26af4                 | LR__3996
26af4                 | LR__3997
26af4                 | LR__3998
26af4     0C 02 06 F6 | 	mov	_var02, #12
26af8                 | '         r =  12 ;
26af8                 | '         break;
26af8                 | LR__3999
26af8                 | '     }
26af8                 | '     return _seterror(r);
26af8     00 02 4E F2 | 	cmps	_var02, #0 wz
26afc     20 E8 05 F1 | 	add	ptr___system__dat__, #32
26b00     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
26b04     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
26b08     01 FA 65 56 |  if_ne	neg	result1, #1
26b0c     00 FA 05 A6 |  if_e	mov	result1, #0
26b10                 | _fatfs_cc__set_dos_error_0845_ret
26b10     2D 00 64 FD | 	ret
26b14                 | 
26b14                 | _fatfs_cc_v_creat
26b14     04 4A 05 F6 | 	mov	COUNT_, #4
26b18     A8 00 A0 FD | 	call	#pushregs_
26b1c     09 1F 02 F6 | 	mov	local01, arg01
26b20     0A 21 02 F6 | 	mov	local02, arg02
26b24     03 00 00 FF 
26b28     3C 12 06 F6 | 	mov	arg01, ##1596
26b2c                 | '     return _gc_alloc(size);
26b2c     10 14 06 F6 | 	mov	arg02, #16
26b30     2C 60 BF FD | 	call	#__system___gc_doalloc
26b34     FD 22 0A F6 | 	mov	local03, result1 wz
26b38                 | '       return _seterror( 7 );
26b38     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
26b3c     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
26b40     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
26b44     01 FA 65 A6 |  if_e	neg	result1, #1
26b48     58 00 90 AD |  if_e	jmp	#LR__4001
26b4c     11 13 02 F6 | 	mov	arg01, local03
26b50     00 14 06 F6 | 	mov	arg02, #0
26b54     03 00 00 FF 
26b58     3C 16 06 F6 | 	mov	arg03, ##1596
26b5c     98 00 A0 FD | 	call	#\builtin_bytefill_
26b60     02 00 00 FF 
26b64     14 22 06 F1 | 	add	local03, ##1044
26b68     11 13 02 F6 | 	mov	arg01, local03
26b6c     02 00 00 FF 
26b70     14 22 86 F1 | 	sub	local03, ##1044
26b74     10 15 02 F6 | 	mov	arg02, local02
26b78     07 16 06 F6 | 	mov	arg03, #7
26b7c     B4 CC BF FD | 	call	#_fatfs_cc_f_open
26b80     FD 24 0A F6 | 	mov	local04, result1 wz
26b84     14 00 90 AD |  if_e	jmp	#LR__4000
26b88     11 13 02 F6 | 	mov	arg01, local03
26b8c                 | '     return _gc_free(ptr);
26b8c     DC 60 BF FD | 	call	#__system___gc_free
26b90                 | '     free(f);
26b90                 | '     return _set_dos_error(r);
26b90     12 13 02 F6 | 	mov	arg01, local04
26b94     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0845
26b98     08 00 90 FD | 	jmp	#LR__4001
26b9c                 | LR__4000
26b9c     0F 23 62 FC | 	wrlong	local03, local01
26ba0                 | '   }
26ba0                 | '   fil->vfsdata = f;
26ba0                 | '   return 0;
26ba0     00 FA 05 F6 | 	mov	result1, #0
26ba4                 | LR__4001
26ba4     A7 F0 03 F6 | 	mov	ptra, fp
26ba8     B2 00 A0 FD | 	call	#popregs_
26bac                 | _fatfs_cc_v_creat_ret
26bac     2D 00 64 FD | 	ret
26bb0                 | 
26bb0                 | _fatfs_cc_v_close
26bb0     02 4A 05 F6 | 	mov	COUNT_, #2
26bb4     A8 00 A0 FD | 	call	#pushregs_
26bb8     09 1F 02 FB | 	rdlong	local01, arg01
26bbc     02 00 00 FF 
26bc0     14 1E 06 F1 | 	add	local01, ##1044
26bc4     0F 13 02 F6 | 	mov	arg01, local01
26bc8     02 00 00 FF 
26bcc     14 1E 86 F1 | 	sub	local01, ##1044
26bd0     DC E3 BF FD | 	call	#_fatfs_cc_f_close
26bd4     FD 20 02 F6 | 	mov	local02, result1
26bd8     0F 13 02 F6 | 	mov	arg01, local01
26bdc                 | '     return _gc_free(ptr);
26bdc     8C 60 BF FD | 	call	#__system___gc_free
26be0                 | '     FAT_FIL *f = fil->vfsdata;
26be0                 | '     r=f_close(&f->fil);
26be0                 | '     free(f);
26be0                 | '     return _set_dos_error(r);
26be0     10 13 02 F6 | 	mov	arg01, local02
26be4     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0845
26be8     A7 F0 03 F6 | 	mov	ptra, fp
26bec     B2 00 A0 FD | 	call	#popregs_
26bf0                 | _fatfs_cc_v_close_ret
26bf0     2D 00 64 FD | 	ret
26bf4                 | 
26bf4                 | _fatfs_cc_v_opendir
26bf4     04 4A 05 F6 | 	mov	COUNT_, #4
26bf8     A8 00 A0 FD | 	call	#pushregs_
26bfc     09 1F 02 F6 | 	mov	local01, arg01
26c00     0A 21 02 F6 | 	mov	local02, arg02
26c04     30 12 06 F6 | 	mov	arg01, #48
26c08                 | '     return _gc_alloc(size);
26c08     10 14 06 F6 | 	mov	arg02, #16
26c0c     50 5F BF FD | 	call	#__system___gc_doalloc
26c10     FD 22 0A F6 | 	mov	local03, result1 wz
26c14                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
26c14                 | '       return _seterror( 7 );
26c14     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
26c18     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
26c1c     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
26c20     01 FA 65 A6 |  if_e	neg	result1, #1
26c24     34 00 90 AD |  if_e	jmp	#LR__4011
26c28     10 15 02 F6 | 	mov	arg02, local02
26c2c     11 13 02 F6 | 	mov	arg01, local03
26c30     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
26c34     FD 24 0A F6 | 	mov	local04, result1 wz
26c38     14 00 90 AD |  if_e	jmp	#LR__4010
26c3c     11 13 02 F6 | 	mov	arg01, local03
26c40                 | '     return _gc_free(ptr);
26c40     28 60 BF FD | 	call	#__system___gc_free
26c44                 | '         free(f);
26c44                 | '         return _set_dos_error(r);
26c44     12 13 02 F6 | 	mov	arg01, local04
26c48     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0845
26c4c     0C 00 90 FD | 	jmp	#LR__4011
26c50                 | LR__4010
26c50     04 1E 06 F1 | 	add	local01, #4
26c54     0F 23 62 FC | 	wrlong	local03, local01
26c58                 | '     }
26c58                 | '     dir->vfsdata = f;
26c58                 | '     return 0;
26c58     00 FA 05 F6 | 	mov	result1, #0
26c5c                 | LR__4011
26c5c     A7 F0 03 F6 | 	mov	ptra, fp
26c60     B2 00 A0 FD | 	call	#popregs_
26c64                 | _fatfs_cc_v_opendir_ret
26c64     2D 00 64 FD | 	ret
26c68                 | 
26c68                 | _fatfs_cc_v_closedir
26c68     02 4A 05 F6 | 	mov	COUNT_, #2
26c6c     A8 00 A0 FD | 	call	#pushregs_
26c70     04 12 06 F1 | 	add	arg01, #4
26c74     09 1F 02 FB | 	rdlong	local01, arg01
26c78     0F 13 02 F6 | 	mov	arg01, local01
26c7c     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
26c80     FD 20 02 F6 | 	mov	local02, result1
26c84     0F 13 02 F6 | 	mov	arg01, local01
26c88                 | '     return _gc_free(ptr);
26c88     E0 5F BF FD | 	call	#__system___gc_free
26c8c     00 20 0E F2 | 	cmp	local02, #0 wz
26c90     10 13 02 56 |  if_ne	mov	arg01, local02
26c94     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0845
26c98                 | '     return r;
26c98     10 FB 01 F6 | 	mov	result1, local02
26c9c     A7 F0 03 F6 | 	mov	ptra, fp
26ca0     B2 00 A0 FD | 	call	#popregs_
26ca4                 | _fatfs_cc_v_closedir_ret
26ca4     2D 00 64 FD | 	ret
26ca8                 | 
26ca8                 | _fatfs_cc_v_readdir
26ca8     01 4A 05 F6 | 	mov	COUNT_, #1
26cac     A8 00 A0 FD | 	call	#pushregs_
26cb0     2C F1 07 F1 | 	add	ptra, #300
26cb4     04 4E 05 F1 | 	add	fp, #4
26cb8     A7 12 62 FC | 	wrlong	arg01, fp
26cbc     04 4E 05 F1 | 	add	fp, #4
26cc0     A7 14 62 FC | 	wrlong	arg02, fp
26cc4     04 4E 85 F1 | 	sub	fp, #4
26cc8     A7 16 02 FB | 	rdlong	arg03, fp
26ccc     04 16 06 F1 | 	add	arg03, #4
26cd0     0B 13 02 FB | 	rdlong	arg01, arg03
26cd4     08 4E 05 F1 | 	add	fp, #8
26cd8     A7 14 02 F6 | 	mov	arg02, fp
26cdc     0C 4E 85 F1 | 	sub	fp, #12
26ce0     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
26ce4     28 4F 05 F1 | 	add	fp, #296
26ce8     A7 FA 61 FC | 	wrlong	result1, fp
26cec     28 4F 85 F1 | 	sub	fp, #296
26cf0     00 FA 0D F2 | 	cmp	result1, #0 wz
26cf4     14 00 90 AD |  if_e	jmp	#LR__4020
26cf8                 | '         return _set_dos_error(r);
26cf8     28 4F 05 F1 | 	add	fp, #296
26cfc     A7 12 02 FB | 	rdlong	arg01, fp
26d00     28 4F 85 F1 | 	sub	fp, #296
26d04     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0845
26d08     C4 00 90 FD | 	jmp	#LR__4023
26d0c                 | LR__4020
26d0c     28 4E 05 F1 | 	add	fp, #40
26d10     A7 16 CA FA | 	rdbyte	arg03, fp wz
26d14     28 4E 85 F1 | 	sub	fp, #40
26d18                 | '         return -1;
26d18     01 FA 65 A6 |  if_e	neg	result1, #1
26d1c     B0 00 90 AD |  if_e	jmp	#LR__4023
26d20     08 4E 05 F1 | 	add	fp, #8
26d24     A7 12 02 FB | 	rdlong	arg01, fp
26d28     20 4E 05 F1 | 	add	fp, #32
26d2c     A7 14 02 F6 | 	mov	arg02, fp
26d30     28 4E 85 F1 | 	sub	fp, #40
26d34     3F 16 06 F6 | 	mov	arg03, #63
26d38     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
26d3c     08 4E 05 F1 | 	add	fp, #8
26d40     A7 16 02 FB | 	rdlong	arg03, fp
26d44     3F 16 06 F1 | 	add	arg03, #63
26d48     0B 01 48 FC | 	wrbyte	#0, arg03
26d4c     0C 4E 05 F1 | 	add	fp, #12
26d50     A7 16 C2 FA | 	rdbyte	arg03, fp
26d54     14 4E 85 F1 | 	sub	fp, #20
26d58     10 16 CE F7 | 	test	arg03, #16 wz
26d5c     18 00 90 AD |  if_e	jmp	#LR__4021
26d60     08 4E 05 F1 | 	add	fp, #8
26d64     A7 16 02 FB | 	rdlong	arg03, fp
26d68     08 4E 85 F1 | 	sub	fp, #8
26d6c     50 16 06 F1 | 	add	arg03, #80
26d70     0B 03 48 FC | 	wrbyte	#1, arg03
26d74     14 00 90 FD | 	jmp	#LR__4022
26d78                 | LR__4021
26d78     08 4E 05 F1 | 	add	fp, #8
26d7c     A7 16 02 FB | 	rdlong	arg03, fp
26d80     08 4E 85 F1 | 	sub	fp, #8
26d84     50 16 06 F1 | 	add	arg03, #80
26d88     0B 01 48 FC | 	wrbyte	#0, arg03
26d8c                 | LR__4022
26d8c     08 4E 05 F1 | 	add	fp, #8
26d90     A7 16 02 FB | 	rdlong	arg03, fp
26d94     04 4E 05 F1 | 	add	fp, #4
26d98     A7 14 02 FB | 	rdlong	arg02, fp
26d9c     48 16 06 F1 | 	add	arg03, #72
26da0     0B 15 62 FC | 	wrlong	arg02, arg03
26da4     04 4E 85 F1 | 	sub	fp, #4
26da8     A7 1E 02 FB | 	rdlong	local01, fp
26dac     08 4E 05 F1 | 	add	fp, #8
26db0     A7 12 E2 FA | 	rdword	arg01, fp
26db4     02 4E 05 F1 | 	add	fp, #2
26db8     A7 14 E2 FA | 	rdword	arg02, fp
26dbc     12 4E 85 F1 | 	sub	fp, #18
26dc0     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0843
26dc4     4C 1E 06 F1 | 	add	local01, #76
26dc8     0F FB 61 FC | 	wrlong	result1, local01
26dcc                 | '         ent->d_type =  (0) ;
26dcc                 | '     }
26dcc                 | '     ent->d_size = finfo.fsize;
26dcc                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
26dcc                 | '     return 0;
26dcc     00 FA 05 F6 | 	mov	result1, #0
26dd0                 | LR__4023
26dd0     A7 F0 03 F6 | 	mov	ptra, fp
26dd4     B2 00 A0 FD | 	call	#popregs_
26dd8                 | _fatfs_cc_v_readdir_ret
26dd8     2D 00 64 FD | 	ret
26ddc                 | 
26ddc                 | _fatfs_cc_v_stat
26ddc     03 4A 05 F6 | 	mov	COUNT_, #3
26de0     A8 00 A0 FD | 	call	#pushregs_
26de4     30 F1 07 F1 | 	add	ptra, #304
26de8     04 4E 05 F1 | 	add	fp, #4
26dec     A7 12 62 FC | 	wrlong	arg01, fp
26df0     04 4E 05 F1 | 	add	fp, #4
26df4     A7 14 62 FC | 	wrlong	arg02, fp
26df8     08 4E 85 F1 | 	sub	fp, #8
26dfc     0A 13 02 F6 | 	mov	arg01, arg02
26e00     00 14 06 F6 | 	mov	arg02, #0
26e04     30 16 06 F6 | 	mov	arg03, #48
26e08     98 00 A0 FD | 	call	#\builtin_bytefill_
26e0c     04 4E 05 F1 | 	add	fp, #4
26e10     A7 FA 01 FB | 	rdlong	result1, fp
26e14     04 4E 85 F1 | 	sub	fp, #4
26e18     FD FA C9 FA | 	rdbyte	result1, result1 wz
26e1c     2C 00 90 AD |  if_e	jmp	#LR__4030
26e20     04 4E 05 F1 | 	add	fp, #4
26e24     A7 FA 01 FB | 	rdlong	result1, fp
26e28     04 4E 85 F1 | 	sub	fp, #4
26e2c     FD FA C1 FA | 	rdbyte	result1, result1
26e30     2E FA 0D F2 | 	cmp	result1, #46 wz
26e34     04 4E 05 A1 |  if_e	add	fp, #4
26e38     A7 1E 02 AB |  if_e	rdlong	local01, fp
26e3c     04 4E 85 A1 |  if_e	sub	fp, #4
26e40     01 1E 06 A1 |  if_e	add	local01, #1
26e44     0F 21 CA AA |  if_e	rdbyte	local02, local01 wz
26e48     18 00 90 5D |  if_ne	jmp	#LR__4031
26e4c                 | LR__4030
26e4c     18 4E 05 F1 | 	add	fp, #24
26e50     A7 20 48 FC | 	wrbyte	#16, fp
26e54     0C 4E 85 F1 | 	sub	fp, #12
26e58     A7 00 68 FC | 	wrlong	#0, fp
26e5c     0C 4E 85 F1 | 	sub	fp, #12
26e60     24 00 90 FD | 	jmp	#LR__4032
26e64                 | LR__4031
26e64     04 4E 05 F1 | 	add	fp, #4
26e68     A7 12 02 FB | 	rdlong	arg01, fp
26e6c     0C 4E 05 F1 | 	add	fp, #12
26e70     A7 14 02 F6 | 	mov	arg02, fp
26e74     10 4E 85 F1 | 	sub	fp, #16
26e78     AC EB BF FD | 	call	#_fatfs_cc_f_stat
26e7c     0C 4E 05 F1 | 	add	fp, #12
26e80     A7 FA 61 FC | 	wrlong	result1, fp
26e84     0C 4E 85 F1 | 	sub	fp, #12
26e88                 | LR__4032
26e88     0C 4E 05 F1 | 	add	fp, #12
26e8c     A7 20 0A FB | 	rdlong	local02, fp wz
26e90     0C 4E 85 F1 | 	sub	fp, #12
26e94     14 00 90 AD |  if_e	jmp	#LR__4033
26e98                 | '         return _set_dos_error(r);
26e98     0C 4E 05 F1 | 	add	fp, #12
26e9c     A7 12 02 FB | 	rdlong	arg01, fp
26ea0     0C 4E 85 F1 | 	sub	fp, #12
26ea4     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0845
26ea8     14 01 90 FD | 	jmp	#LR__4034
26eac                 | LR__4033
26eac     2C 4F 05 F1 | 	add	fp, #300
26eb0     A7 48 6A FC | 	wrlong	#292, fp
26eb4     14 4F 85 F1 | 	sub	fp, #276
26eb8     A7 22 C2 FA | 	rdbyte	local03, fp
26ebc     18 4E 85 F1 | 	sub	fp, #24
26ec0     01 22 CE F7 | 	test	local03, #1 wz
26ec4     2C 4F 05 A1 |  if_e	add	fp, #300
26ec8     A7 22 02 AB |  if_e	rdlong	local03, fp
26ecc     92 22 46 A5 |  if_e	or	local03, #146
26ed0     A7 22 62 AC |  if_e	wrlong	local03, fp
26ed4     2C 4F 85 A1 |  if_e	sub	fp, #300
26ed8     18 4E 05 F1 | 	add	fp, #24
26edc     A7 22 C2 FA | 	rdbyte	local03, fp
26ee0     18 4E 85 F1 | 	sub	fp, #24
26ee4     10 22 CE F7 | 	test	local03, #16 wz
26ee8     2C 4F 05 51 |  if_ne	add	fp, #300
26eec     A7 22 02 5B |  if_ne	rdlong	local03, fp
26ef0     08 00 00 5F 
26ef4     49 22 46 55 |  if_ne	or	local03, ##4169
26ef8     A7 22 62 5C |  if_ne	wrlong	local03, fp
26efc     2C 4F 85 51 |  if_ne	sub	fp, #300
26f00     08 4E 05 F1 | 	add	fp, #8
26f04     A7 22 02 FB | 	rdlong	local03, fp
26f08     24 4F 05 F1 | 	add	fp, #292
26f0c     A7 20 02 FB | 	rdlong	local02, fp
26f10     08 22 06 F1 | 	add	local03, #8
26f14     11 21 62 FC | 	wrlong	local02, local03
26f18     24 4F 85 F1 | 	sub	fp, #292
26f1c     A7 22 02 FB | 	rdlong	local03, fp
26f20     0C 22 06 F1 | 	add	local03, #12
26f24     11 03 68 FC | 	wrlong	#1, local03
26f28     A7 22 02 FB | 	rdlong	local03, fp
26f2c     08 4E 05 F1 | 	add	fp, #8
26f30     A7 20 02 FB | 	rdlong	local02, fp
26f34     18 22 06 F1 | 	add	local03, #24
26f38     11 21 62 FC | 	wrlong	local02, local03
26f3c     08 4E 85 F1 | 	sub	fp, #8
26f40     A7 22 02 FB | 	rdlong	local03, fp
26f44     1C 22 06 F1 | 	add	local03, #28
26f48     01 00 80 FF 
26f4c     11 01 68 FC | 	wrlong	##512, local03
26f50     A7 20 02 FB | 	rdlong	local02, fp
26f54     10 23 02 F6 | 	mov	local03, local02
26f58     18 20 06 F1 | 	add	local02, #24
26f5c     10 21 02 FB | 	rdlong	local02, local02
26f60     FF 21 06 F1 | 	add	local02, #511
26f64     10 21 52 F6 | 	abs	local02, local02 wc
26f68     09 20 46 F0 | 	shr	local02, #9
26f6c     10 21 82 F6 | 	negc	local02, local02
26f70     20 22 06 F1 | 	add	local03, #32
26f74     11 21 62 FC | 	wrlong	local02, local03
26f78     A7 20 02 FB | 	rdlong	local02, fp
26f7c     10 23 02 F6 | 	mov	local03, local02
26f80     10 1F 02 F6 | 	mov	local01, local02
26f84     0C 4E 05 F1 | 	add	fp, #12
26f88     A7 12 E2 FA | 	rdword	arg01, fp
26f8c     02 4E 05 F1 | 	add	fp, #2
26f90     A7 14 E2 FA | 	rdword	arg02, fp
26f94     16 4E 85 F1 | 	sub	fp, #22
26f98     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0843
26f9c     2C 1E 06 F1 | 	add	local01, #44
26fa0     0F FB 61 FC | 	wrlong	result1, local01
26fa4     28 20 06 F1 | 	add	local02, #40
26fa8     10 FB 61 FC | 	wrlong	result1, local02
26fac     24 22 06 F1 | 	add	local03, #36
26fb0     11 FB 61 FC | 	wrlong	result1, local03
26fb4                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
26fb4                 | '     }
26fb4                 | '     buf->st_mode = mode;
26fb4                 | '     buf->st_nlink = 1;
26fb4                 | '     buf->st_size = finfo.fsize;
26fb4                 | '     buf->st_blksize = 512;
26fb4                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
26fb4                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
26fb4                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
26fb4                 | '     return r;
26fb4     0C 4E 05 F1 | 	add	fp, #12
26fb8     A7 FA 01 FB | 	rdlong	result1, fp
26fbc     0C 4E 85 F1 | 	sub	fp, #12
26fc0                 | LR__4034
26fc0     A7 F0 03 F6 | 	mov	ptra, fp
26fc4     B2 00 A0 FD | 	call	#popregs_
26fc8                 | _fatfs_cc_v_stat_ret
26fc8     2D 00 64 FD | 	ret
26fcc                 | 
26fcc                 | _fatfs_cc_v_read
26fcc     00 4A 05 F6 | 	mov	COUNT_, #0
26fd0     A8 00 A0 FD | 	call	#pushregs_
26fd4     1C F0 07 F1 | 	add	ptra, #28
26fd8     04 4E 05 F1 | 	add	fp, #4
26fdc     A7 12 62 FC | 	wrlong	arg01, fp
26fe0     04 4E 05 F1 | 	add	fp, #4
26fe4     A7 14 62 FC | 	wrlong	arg02, fp
26fe8     04 4E 05 F1 | 	add	fp, #4
26fec     A7 16 62 FC | 	wrlong	arg03, fp
26ff0     08 4E 85 F1 | 	sub	fp, #8
26ff4     A7 12 02 FB | 	rdlong	arg01, fp
26ff8     09 13 0A FB | 	rdlong	arg01, arg01 wz
26ffc     0C 4E 05 F1 | 	add	fp, #12
27000     A7 12 62 FC | 	wrlong	arg01, fp
27004     10 4E 85 F1 | 	sub	fp, #16
27008                 | '         return _seterror( 5 );
27008     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
2700c     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
27010     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
27014     01 FA 65 A6 |  if_e	neg	result1, #1
27018     B8 00 90 AD |  if_e	jmp	#LR__4042
2701c     10 4E 05 F1 | 	add	fp, #16
27020     A7 12 02 FB | 	rdlong	arg01, fp
27024     02 00 00 FF 
27028     14 12 06 F1 | 	add	arg01, ##1044
2702c     08 4E 85 F1 | 	sub	fp, #8
27030     A7 14 02 FB | 	rdlong	arg02, fp
27034     04 4E 05 F1 | 	add	fp, #4
27038     A7 16 02 FB | 	rdlong	arg03, fp
2703c     0C 4E 05 F1 | 	add	fp, #12
27040     A7 18 02 F6 | 	mov	arg04, fp
27044     18 4E 85 F1 | 	sub	fp, #24
27048     C4 CE BF FD | 	call	#_fatfs_cc_f_read
2704c     14 4E 05 F1 | 	add	fp, #20
27050     A7 FA 61 FC | 	wrlong	result1, fp
27054     14 4E 85 F1 | 	sub	fp, #20
27058     00 FA 0D F2 | 	cmp	result1, #0 wz
2705c     34 00 90 AD |  if_e	jmp	#LR__4040
27060     04 4E 05 F1 | 	add	fp, #4
27064     A7 18 02 FB | 	rdlong	arg04, fp
27068     0C 17 02 F6 | 	mov	arg03, arg04
2706c     08 18 06 F1 | 	add	arg04, #8
27070     0C 19 02 FB | 	rdlong	arg04, arg04
27074     20 18 46 F5 | 	or	arg04, #32
27078     08 16 06 F1 | 	add	arg03, #8
2707c     0B 19 62 FC | 	wrlong	arg04, arg03
27080                 | '         fil->state |=  (0x20) ;
27080                 | '         return _set_dos_error(r);
27080     10 4E 05 F1 | 	add	fp, #16
27084     A7 12 02 FB | 	rdlong	arg01, fp
27088     14 4E 85 F1 | 	sub	fp, #20
2708c     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0845
27090     40 00 90 FD | 	jmp	#LR__4042
27094                 | LR__4040
27094     18 4E 05 F1 | 	add	fp, #24
27098     A7 FA 09 FB | 	rdlong	result1, fp wz
2709c     18 4E 85 F1 | 	sub	fp, #24
270a0     24 00 90 5D |  if_ne	jmp	#LR__4041
270a4     04 4E 05 F1 | 	add	fp, #4
270a8     A7 FA 01 FB | 	rdlong	result1, fp
270ac     FD 18 02 F6 | 	mov	arg04, result1
270b0     04 4E 85 F1 | 	sub	fp, #4
270b4     08 FA 05 F1 | 	add	result1, #8
270b8     FD FA 01 FB | 	rdlong	result1, result1
270bc     10 FA 45 F5 | 	or	result1, #16
270c0     08 18 06 F1 | 	add	arg04, #8
270c4     0C FB 61 FC | 	wrlong	result1, arg04
270c8                 | LR__4041
270c8                 | '         fil->state |=  (0x10) ;
270c8                 | '     }
270c8                 | '     return x;
270c8     18 4E 05 F1 | 	add	fp, #24
270cc     A7 FA 01 FB | 	rdlong	result1, fp
270d0     18 4E 85 F1 | 	sub	fp, #24
270d4                 | LR__4042
270d4     A7 F0 03 F6 | 	mov	ptra, fp
270d8     B2 00 A0 FD | 	call	#popregs_
270dc                 | _fatfs_cc_v_read_ret
270dc     2D 00 64 FD | 	ret
270e0                 | 
270e0                 | _fatfs_cc_v_write
270e0     00 4A 05 F6 | 	mov	COUNT_, #0
270e4     A8 00 A0 FD | 	call	#pushregs_
270e8     1C F0 07 F1 | 	add	ptra, #28
270ec     04 4E 05 F1 | 	add	fp, #4
270f0     A7 12 62 FC | 	wrlong	arg01, fp
270f4     04 4E 05 F1 | 	add	fp, #4
270f8     A7 14 62 FC | 	wrlong	arg02, fp
270fc     04 4E 05 F1 | 	add	fp, #4
27100     A7 16 62 FC | 	wrlong	arg03, fp
27104     08 4E 85 F1 | 	sub	fp, #8
27108     A7 12 02 FB | 	rdlong	arg01, fp
2710c     09 13 0A FB | 	rdlong	arg01, arg01 wz
27110     0C 4E 05 F1 | 	add	fp, #12
27114     A7 12 62 FC | 	wrlong	arg01, fp
27118     10 4E 85 F1 | 	sub	fp, #16
2711c                 | '         return _seterror( 5 );
2711c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
27120     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
27124     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
27128     01 FA 65 A6 |  if_e	neg	result1, #1
2712c     84 00 90 AD |  if_e	jmp	#LR__4051
27130     10 4E 05 F1 | 	add	fp, #16
27134     A7 12 02 FB | 	rdlong	arg01, fp
27138     02 00 00 FF 
2713c     14 12 06 F1 | 	add	arg01, ##1044
27140     08 4E 85 F1 | 	sub	fp, #8
27144     A7 14 02 FB | 	rdlong	arg02, fp
27148     04 4E 05 F1 | 	add	fp, #4
2714c     A7 16 02 FB | 	rdlong	arg03, fp
27150     0C 4E 05 F1 | 	add	fp, #12
27154     A7 18 02 F6 | 	mov	arg04, fp
27158     18 4E 85 F1 | 	sub	fp, #24
2715c     4C D4 BF FD | 	call	#_fatfs_cc_f_write
27160     14 4E 05 F1 | 	add	fp, #20
27164     A7 FA 61 FC | 	wrlong	result1, fp
27168     14 4E 85 F1 | 	sub	fp, #20
2716c     00 FA 0D F2 | 	cmp	result1, #0 wz
27170     34 00 90 AD |  if_e	jmp	#LR__4050
27174     04 4E 05 F1 | 	add	fp, #4
27178     A7 18 02 FB | 	rdlong	arg04, fp
2717c     0C 17 02 F6 | 	mov	arg03, arg04
27180     08 18 06 F1 | 	add	arg04, #8
27184     0C 19 02 FB | 	rdlong	arg04, arg04
27188     20 18 46 F5 | 	or	arg04, #32
2718c     08 16 06 F1 | 	add	arg03, #8
27190     0B 19 62 FC | 	wrlong	arg04, arg03
27194                 | '         fil->state |=  (0x20) ;
27194                 | '         return _set_dos_error(r);
27194     10 4E 05 F1 | 	add	fp, #16
27198     A7 12 02 FB | 	rdlong	arg01, fp
2719c     14 4E 85 F1 | 	sub	fp, #20
271a0     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0845
271a4     0C 00 90 FD | 	jmp	#LR__4051
271a8                 | LR__4050
271a8                 | '     }
271a8                 | '     return x;
271a8     18 4E 05 F1 | 	add	fp, #24
271ac     A7 FA 01 FB | 	rdlong	result1, fp
271b0     18 4E 85 F1 | 	sub	fp, #24
271b4                 | LR__4051
271b4     A7 F0 03 F6 | 	mov	ptra, fp
271b8     B2 00 A0 FD | 	call	#popregs_
271bc                 | _fatfs_cc_v_write_ret
271bc     2D 00 64 FD | 	ret
271c0                 | 
271c0                 | _fatfs_cc_v_lseek
271c0     04 4A 05 F6 | 	mov	COUNT_, #4
271c4     A8 00 A0 FD | 	call	#pushregs_
271c8     0A 1F 02 F6 | 	mov	local01, arg02
271cc     0B 21 02 F6 | 	mov	local02, arg03
271d0     09 23 02 FB | 	rdlong	local03, arg01
271d4     02 00 00 FF 
271d8     14 22 0E F1 | 	add	local03, ##1044 wz
271dc                 | '         return _seterror( 5 );
271dc     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
271e0     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
271e4     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
271e8     01 FA 65 A6 |  if_e	neg	result1, #1
271ec     4C 00 90 AD |  if_e	jmp	#LR__4062
271f0     00 20 0E F2 | 	cmp	local02, #0 wz
271f4     24 00 90 AD |  if_e	jmp	#LR__4060
271f8     01 20 0E F2 | 	cmp	local02, #1 wz
271fc     14 22 06 A1 |  if_e	add	local03, #20
27200     11 25 02 AB |  if_e	rdlong	local04, local03
27204     14 22 86 A1 |  if_e	sub	local03, #20
27208     12 1F 02 A1 |  if_e	add	local01, local04
2720c     0C 22 06 51 |  if_ne	add	local03, #12
27210     11 25 02 5B |  if_ne	rdlong	local04, local03
27214     0C 22 86 51 |  if_ne	sub	local03, #12
27218     12 1F 02 51 |  if_ne	add	local01, local04
2721c                 | LR__4060
2721c     0F 15 02 F6 | 	mov	arg02, local01
27220     11 13 02 F6 | 	mov	arg01, local03
27224     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
27228     FD 12 0A F6 | 	mov	arg01, result1 wz
2722c     08 00 90 AD |  if_e	jmp	#LR__4061
27230                 | '         return _set_dos_error(result);
27230     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0845
27234     04 00 90 FD | 	jmp	#LR__4062
27238                 | LR__4061
27238                 | '     }
27238                 | '     return offset;
27238     0F FB 01 F6 | 	mov	result1, local01
2723c                 | LR__4062
2723c     A7 F0 03 F6 | 	mov	ptra, fp
27240     B2 00 A0 FD | 	call	#popregs_
27244                 | _fatfs_cc_v_lseek_ret
27244     2D 00 64 FD | 	ret
27248                 | 
27248                 | _fatfs_cc_v_ioctl
27248                 | ' {
27248                 | '     return _seterror( 10 );
27248     20 E8 05 F1 | 	add	ptr___system__dat__, #32
2724c     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
27250     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
27254     01 FA 65 F6 | 	neg	result1, #1
27258                 | _fatfs_cc_v_ioctl_ret
27258     2D 00 64 FD | 	ret
2725c                 | 
2725c                 | _fatfs_cc_v_mkdir
2725c     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
27260     FD 12 02 F6 | 	mov	arg01, result1
27264                 | ' 
27264                 | '     r = f_mkdir(name);
27264                 | '     return _set_dos_error(r);
27264     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0845
27268                 | _fatfs_cc_v_mkdir_ret
27268     2D 00 64 FD | 	ret
2726c                 | 
2726c                 | _fatfs_cc_v_remove
2726c     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
27270     FD 12 02 F6 | 	mov	arg01, result1
27274                 | ' 
27274                 | '     r = f_unlink(name);
27274                 | '     return _set_dos_error(r);
27274     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0845
27278                 | _fatfs_cc_v_remove_ret
27278     2D 00 64 FD | 	ret
2727c                 | 
2727c                 | _fatfs_cc_v_rmdir
2727c     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
27280     FD 12 02 F6 | 	mov	arg01, result1
27284                 | ' 
27284                 | '     r = f_unlink(name);
27284                 | '     return _set_dos_error(r);
27284     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0845
27288                 | _fatfs_cc_v_rmdir_ret
27288     2D 00 64 FD | 	ret
2728c                 | 
2728c                 | _fatfs_cc_v_rename
2728c     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
27290     FD 12 02 F6 | 	mov	arg01, result1
27294                 | '     return _set_dos_error(r);
27294     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0845
27298                 | _fatfs_cc_v_rename_ret
27298     2D 00 64 FD | 	ret
2729c                 | 
2729c                 | _fatfs_cc_v_open
2729c     07 4A 05 F6 | 	mov	COUNT_, #7
272a0     A8 00 A0 FD | 	call	#pushregs_
272a4     09 1F 02 F6 | 	mov	local01, arg01
272a8     0A 21 02 F6 | 	mov	local02, arg02
272ac     0B 23 02 F6 | 	mov	local03, arg03
272b0     03 00 00 FF 
272b4     3C 12 06 F6 | 	mov	arg01, ##1596
272b8                 | '     return _gc_alloc(size);
272b8     10 14 06 F6 | 	mov	arg02, #16
272bc     A0 58 BF FD | 	call	#__system___gc_doalloc
272c0     FD 24 0A F6 | 	mov	local04, result1 wz
272c4                 | '       return _seterror( 7 );
272c4     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
272c8     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
272cc     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
272d0     01 FA 65 A6 |  if_e	neg	result1, #1
272d4     98 00 90 AD |  if_e	jmp	#LR__4076
272d8     12 13 02 F6 | 	mov	arg01, local04
272dc     00 14 06 F6 | 	mov	arg02, #0
272e0     03 00 00 FF 
272e4     3C 16 06 F6 | 	mov	arg03, ##1596
272e8     98 00 A0 FD | 	call	#\builtin_bytefill_
272ec                 | '   switch (flags & 3) {
272ec     11 27 02 F6 | 	mov	local05, local03
272f0     03 26 0E F5 | 	and	local05, #3 wz
272f4     0C 00 90 AD |  if_e	jmp	#LR__4070
272f8     01 26 0E F2 | 	cmp	local05, #1 wz
272fc     0C 00 90 AD |  if_e	jmp	#LR__4071
27300     10 00 90 FD | 	jmp	#LR__4072
27304                 | LR__4070
27304     01 28 06 F6 | 	mov	local06, #1
27308                 | '       fs_flags =  0x01 ;
27308                 | '       break;
27308     0C 00 90 FD | 	jmp	#LR__4073
2730c                 | LR__4071
2730c     02 28 06 F6 | 	mov	local06, #2
27310                 | '       fs_flags =  0x02 ;
27310                 | '       break;
27310     04 00 90 FD | 	jmp	#LR__4073
27314                 | LR__4072
27314     03 28 06 F6 | 	mov	local06, #3
27318                 | '       fs_flags =  0x01  |  0x02 ;
27318                 | '       break;
27318                 | LR__4073
27318     08 22 CE F7 | 	test	local03, #8 wz
2731c     18 28 46 55 |  if_ne	or	local06, #24
27320     08 00 90 5D |  if_ne	jmp	#LR__4074
27324     20 22 CE F7 | 	test	local03, #32 wz
27328     30 28 46 55 |  if_ne	or	local06, #48
2732c                 | LR__4074
2732c     02 00 00 FF 
27330     14 24 06 F1 | 	add	local04, ##1044
27334     12 13 02 F6 | 	mov	arg01, local04
27338     02 00 00 FF 
2733c     14 24 86 F1 | 	sub	local04, ##1044
27340     10 15 02 F6 | 	mov	arg02, local02
27344     14 17 02 F6 | 	mov	arg03, local06
27348     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
2734c     FD 2A 0A F6 | 	mov	local07, result1 wz
27350     14 00 90 AD |  if_e	jmp	#LR__4075
27354     12 13 02 F6 | 	mov	arg01, local04
27358                 | '     return _gc_free(ptr);
27358     10 59 BF FD | 	call	#__system___gc_free
2735c                 | '     free(f);
2735c                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2735c                 | '     return _set_dos_error(r);
2735c     15 13 02 F6 | 	mov	arg01, local07
27360     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0845
27364     08 00 90 FD | 	jmp	#LR__4076
27368                 | LR__4075
27368     0F 25 62 FC | 	wrlong	local04, local01
2736c                 | '   }
2736c                 | '   fil->vfsdata = f;
2736c                 | '   return 0;
2736c     00 FA 05 F6 | 	mov	result1, #0
27370                 | LR__4076
27370     A7 F0 03 F6 | 	mov	ptra, fp
27374     B2 00 A0 FD | 	call	#popregs_
27378                 | _fatfs_cc_v_open_ret
27378     2D 00 64 FD | 	ret
2737c                 | 
2737c                 | _fatfs_cc_v_flush
2737c     09 13 02 FB | 	rdlong	arg01, arg01
27380     02 00 00 FF 
27384     14 12 0E F1 | 	add	arg01, ##1044 wz
27388                 | '         return _seterror( 5 );
27388     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
2738c     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
27390     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
27394     01 FA 65 A6 |  if_e	neg	result1, #1
27398     0C 00 90 AD |  if_e	jmp	#LR__4080
2739c     00 DA BF FD | 	call	#_fatfs_cc_f_sync
273a0     FD 12 02 F6 | 	mov	arg01, result1
273a4                 | '     }
273a4                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
273a4                 | '     result = f_sync(f);
273a4                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
273a4                 | '     return _set_dos_error(result);
273a4     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0845
273a8                 | LR__4080
273a8                 | _fatfs_cc_v_flush_ret
273a8     2D 00 64 FD | 	ret
273ac                 | 
273ac                 | _fatfs_cc_v_init
273ac                 | ' {
273ac                 | '     return 0;
273ac     00 FA 05 F6 | 	mov	result1, #0
273b0                 | _fatfs_cc_v_init_ret
273b0     2D 00 64 FD | 	ret
273b4                 | 
273b4                 | _fatfs_cc_v_deinit
273b4     41 01 00 FF 
273b8     14 15 06 F6 | 	mov	arg02, ##@LR__4276
273bc     00 12 06 F6 | 	mov	arg01, #0
273c0     00 16 06 F6 | 	mov	arg03, #0
273c4     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
273c8     01 00 00 FF 
273cc     08 E4 05 F1 | 	add	objptr, ##520
273d0     F2 12 02 FB | 	rdlong	arg01, objptr
273d4     04 E4 05 F1 | 	add	objptr, #4
273d8     F2 14 02 FB | 	rdlong	arg02, objptr
273dc     01 00 00 FF 
273e0     0C E4 85 F1 | 	sub	objptr, ##524
273e4     50 40 BF FD | 	call	#__system___freepins
273e8                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
273e8                 | '     _freepins(f_pinmask);
273e8                 | '     return 0;
273e8     00 FA 05 F6 | 	mov	result1, #0
273ec                 | _fatfs_cc_v_deinit_ret
273ec     2D 00 64 FD | 	ret
273f0                 | 
273f0                 | _fatfs_cc_get_vfs
273f0     01 4A 05 F6 | 	mov	COUNT_, #1
273f4     A8 00 A0 FD | 	call	#pushregs_
273f8     09 1F 02 F6 | 	mov	local01, arg01
273fc     50 12 06 F6 | 	mov	arg01, #80
27400     2C 57 BF FD | 	call	#__system___gc_alloc_managed
27404     FD 12 02 F6 | 	mov	arg01, result1
27408     F2 FA 01 F6 | 	mov	result1, objptr
2740c     00 78 03 FF 
27410     00 FA 45 F5 | 	or	result1, ##116391936
27414     09 FB 61 FC | 	wrlong	result1, arg01
27418     F2 FA 01 F6 | 	mov	result1, objptr
2741c     58 FA 25 F4 | 	bith	result1, #88
27420     04 12 06 F1 | 	add	arg01, #4
27424     09 FB 61 FC | 	wrlong	result1, arg01
27428     F2 FA 01 F6 | 	mov	result1, objptr
2742c     00 88 03 FF 
27430     00 FA 45 F5 | 	or	result1, ##118489088
27434     04 12 06 F1 | 	add	arg01, #4
27438     09 FB 61 FC | 	wrlong	result1, arg01
2743c     F2 FA 01 F6 | 	mov	result1, objptr
27440     00 90 03 FF 
27444     00 FA 45 F5 | 	or	result1, ##119537664
27448     04 12 06 F1 | 	add	arg01, #4
2744c     09 FB 61 FC | 	wrlong	result1, arg01
27450     F2 FA 01 F6 | 	mov	result1, objptr
27454     00 98 03 FF 
27458     00 FA 45 F5 | 	or	result1, ##120586240
2745c     04 12 06 F1 | 	add	arg01, #4
27460     09 FB 61 FC | 	wrlong	result1, arg01
27464     04 12 06 F1 | 	add	arg01, #4
27468     09 01 68 FC | 	wrlong	#0, arg01
2746c     04 12 06 F1 | 	add	arg01, #4
27470     09 1F 62 FC | 	wrlong	local01, arg01
27474     04 12 06 F1 | 	add	arg01, #4
27478     09 01 68 FC | 	wrlong	#0, arg01
2747c     F2 FA 01 F6 | 	mov	result1, objptr
27480     00 A0 03 FF 
27484     00 FA 45 F5 | 	or	result1, ##121634816
27488     04 12 06 F1 | 	add	arg01, #4
2748c     09 FB 61 FC | 	wrlong	result1, arg01
27490     F2 FA 01 F6 | 	mov	result1, objptr
27494     00 A8 03 FF 
27498     00 FA 45 F5 | 	or	result1, ##122683392
2749c     04 12 06 F1 | 	add	arg01, #4
274a0     09 FB 61 FC | 	wrlong	result1, arg01
274a4     F2 FA 01 F6 | 	mov	result1, objptr
274a8     00 B0 03 FF 
274ac     00 FA 45 F5 | 	or	result1, ##123731968
274b0     04 12 06 F1 | 	add	arg01, #4
274b4     09 FB 61 FC | 	wrlong	result1, arg01
274b8     F2 FA 01 F6 | 	mov	result1, objptr
274bc     00 B8 03 FF 
274c0     00 FA 45 F5 | 	or	result1, ##124780544
274c4     04 12 06 F1 | 	add	arg01, #4
274c8     09 FB 61 FC | 	wrlong	result1, arg01
274cc     F2 FA 01 F6 | 	mov	result1, objptr
274d0     77 FA 25 F4 | 	bith	result1, #119
274d4     04 12 06 F1 | 	add	arg01, #4
274d8     09 FB 61 FC | 	wrlong	result1, arg01
274dc     F2 FA 01 F6 | 	mov	result1, objptr
274e0     00 C8 03 FF 
274e4     00 FA 45 F5 | 	or	result1, ##126877696
274e8     04 12 06 F1 | 	add	arg01, #4
274ec     09 FB 61 FC | 	wrlong	result1, arg01
274f0     F2 FA 01 F6 | 	mov	result1, objptr
274f4     00 D0 03 FF 
274f8     00 FA 45 F5 | 	or	result1, ##127926272
274fc     04 12 06 F1 | 	add	arg01, #4
27500     09 FB 61 FC | 	wrlong	result1, arg01
27504     F2 FA 01 F6 | 	mov	result1, objptr
27508     00 D8 03 FF 
2750c     00 FA 45 F5 | 	or	result1, ##128974848
27510     04 12 06 F1 | 	add	arg01, #4
27514     09 FB 61 FC | 	wrlong	result1, arg01
27518     F2 FA 01 F6 | 	mov	result1, objptr
2751c     96 FA 25 F4 | 	bith	result1, #150
27520     04 12 06 F1 | 	add	arg01, #4
27524     09 FB 61 FC | 	wrlong	result1, arg01
27528     F2 FA 01 F6 | 	mov	result1, objptr
2752c     00 E8 03 FF 
27530     00 FA 45 F5 | 	or	result1, ##131072000
27534     04 12 06 F1 | 	add	arg01, #4
27538     09 FB 61 FC | 	wrlong	result1, arg01
2753c     F2 FA 01 F6 | 	mov	result1, objptr
27540     B5 FA 25 F4 | 	bith	result1, #181
27544     04 12 06 F1 | 	add	arg01, #4
27548     09 FB 61 FC | 	wrlong	result1, arg01
2754c     F2 FA 01 F6 | 	mov	result1, objptr
27550     D4 FA 25 F4 | 	bith	result1, #212
27554     04 12 06 F1 | 	add	arg01, #4
27558     09 FB 61 FC | 	wrlong	result1, arg01
2755c     4C 12 86 F1 | 	sub	arg01, #76
27560                 | ' 
27560                 | '     v->close = &v_close;
27560                 | '     v->read = &v_read;
27560                 | '     v->write = &v_write;
27560                 | '     v->lseek = &v_lseek;
27560                 | '     v->ioctl = &v_ioctl;
27560                 | '     v->flush = 0;
27560                 | '     v->vfs_data = ptr;
27560                 | '     v->reserved = 0;
27560                 | ' 
27560                 | '     v->open = &v_open;
27560                 | '     v->creat = &v_creat;
27560                 | '     v->opendir = &v_opendir;
27560                 | '     v->closedir = &v_closedir;
27560                 | '     v->readdir = &v_readdir;
27560                 | '     v->stat = &v_stat;
27560                 | ' 
27560                 | '     v->mkdir = &v_mkdir;
27560                 | '     v->rmdir = &v_rmdir;
27560                 | ' 
27560                 | '     v->remove = &v_remove;
27560                 | '     v->rename = &v_rename;
27560                 | ' 
27560                 | '     v->init = &v_init;
27560                 | '     v->deinit = &v_deinit;
27560                 | ' 
27560                 | '     return v;
27560     09 FB 01 F6 | 	mov	result1, arg01
27564     A7 F0 03 F6 | 	mov	ptra, fp
27568     B2 00 A0 FD | 	call	#popregs_
2756c                 | _fatfs_cc_get_vfs_ret
2756c     2D 00 64 FD | 	ret
27570                 | 
27570                 | _fatfs_cc_xmit_mmc_0992
27570     01 00 00 FF 
27574     10 E4 05 F1 | 	add	objptr, ##528
27578     F2 00 02 FB | 	rdlong	_var01, objptr
2757c     08 E4 05 F1 | 	add	objptr, #8
27580     F2 02 02 FB | 	rdlong	_var02, objptr
27584     01 00 00 FF 
27588     18 E4 85 F1 | 	sub	objptr, ##536
2758c     40 02 62 FD | 	dirl	_var02
27590     28 02 64 FD | 	setq	#1
27594     09 05 02 FB | 	rdlong	_var03, arg01
27598     69 04 62 FD | 	rev	_var03
2759c     1B 04 FE F9 | 	movbyts	_var03, #27
275a0     01 05 22 FC | 	wypin	_var03, _var02
275a4     0A 05 02 F6 | 	mov	_var03, arg02
275a8     02 14 4E F0 | 	shr	arg02, #2 wz
275ac     03 04 66 F0 | 	shl	_var03, #3
275b0     00 05 22 FC | 	wypin	_var03, _var01
275b4     41 02 62 FD | 	dirh	_var02
275b8     08 12 06 F1 | 	add	arg01, #8
275bc     69 06 62 FD | 	rev	_var04
275c0     1B 06 FE F9 | 	movbyts	_var04, #27
275c4                 | LR__4090
275c4     01 07 22 5C |  if_ne	wypin	_var04, _var02
275c8     09 07 02 5B |  if_ne	rdlong	_var04, arg01
275cc     04 12 06 51 |  if_ne	add	arg01, #4
275d0     69 06 62 5D |  if_ne	rev	_var04
275d4     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
275d8                 | LR__4091
275d8     40 02 72 5D |  if_ne	testp	_var02 wc
275dc     F8 FF 9F 1D |  if_a	jmp	#LR__4091
275e0     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__4090
275e4                 | LR__4092
275e4     40 00 72 FD | 	testp	_var01 wc
275e8     F8 FF 9F 3D |  if_ae	jmp	#LR__4092
275ec     40 02 62 FD | 	dirl	_var02
275f0     FF FF FF FF 
275f4     01 FF 2B FC | 	wypin	##-1, _var02
275f8     41 02 62 FD | 	dirh	_var02
275fc                 | _fatfs_cc_xmit_mmc_0992_ret
275fc     2D 00 64 FD | 	ret
27600                 | 
27600                 | _fatfs_cc_rcvr_mmc_0999
27600     01 00 00 FF 
27604     10 E4 05 F1 | 	add	objptr, ##528
27608     F2 00 02 FB | 	rdlong	_var01, objptr
2760c     0C E4 05 F1 | 	add	objptr, #12
27610     F2 02 02 FB | 	rdlong	_var02, objptr
27614     01 00 00 FF 
27618     1C E4 85 F1 | 	sub	objptr, ##540
2761c     01 03 08 FC | 	akpin	_var02
27620     0A 05 0A F6 | 	mov	_var03, arg02 wz
27624     02 04 4E F0 | 	shr	_var03, #2 wz
27628     30 00 90 AD |  if_e	jmp	#LR__4102
2762c     02 07 02 F6 | 	mov	_var04, _var03
27630     05 06 66 F0 | 	shl	_var04, #5
27634     00 07 22 FC | 	wypin	_var04, _var01
27638     01 7F 18 FC | 	wxpin	#63, _var02
2763c                 | LR__4100
2763c                 | LR__4101
2763c     40 02 72 FD | 	testp	_var02 wc
27640     F8 FF 9F 3D |  if_ae	jmp	#LR__4101
27644     01 07 8A FA | 	rdpin	_var04, _var02
27648     69 06 62 FD | 	rev	_var04
2764c     1B 06 FE F9 | 	movbyts	_var04, #27
27650     09 07 62 FC | 	wrlong	_var04, arg01
27654     04 12 06 F1 | 	add	arg01, #4
27658     F8 05 6E FB | 	djnz	_var03, #LR__4100
2765c                 | LR__4102
2765c     03 14 0E F5 | 	and	arg02, #3 wz
27660     24 00 90 AD |  if_e	jmp	#LR__4105
27664     01 4F 18 FC | 	wxpin	#39, _var02
27668                 | LR__4103
27668     00 11 28 FC | 	wypin	#8, _var01
2766c                 | LR__4104
2766c     40 02 72 FD | 	testp	_var02 wc
27670     F8 FF 9F 3D |  if_ae	jmp	#LR__4104
27674     01 07 8A FA | 	rdpin	_var04, _var02
27678     69 06 62 FD | 	rev	_var04
2767c     09 07 42 FC | 	wrbyte	_var04, arg01
27680     01 12 06 F1 | 	add	arg01, #1
27684     F8 15 6E FB | 	djnz	arg02, #LR__4103
27688                 | LR__4105
27688                 | _fatfs_cc_rcvr_mmc_0999_ret
27688     2D 00 64 FD | 	ret
2768c                 | 
2768c                 | _fatfs_cc_wait_ready_1003
2768c     01 4A 05 F6 | 	mov	COUNT_, #1
27690     A8 00 A0 FD | 	call	#pushregs_
27694     10 F0 07 F1 | 	add	ptra, #16
27698     1A FA 61 FD | 	getct	result1
2769c     08 4E 05 F1 | 	add	fp, #8
276a0     A7 FA 61 FC | 	wrlong	result1, fp
276a4     14 1E 06 FB | 	rdlong	local01, #20
276a8     01 1E 46 F0 | 	shr	local01, #1
276ac     04 4E 05 F1 | 	add	fp, #4
276b0     A7 1E 62 FC | 	wrlong	local01, fp
276b4     0C 4E 85 F1 | 	sub	fp, #12
276b8                 | ' {
276b8                 | ' 	BYTE d;
276b8                 | ' 	UINT tmr, tmout;
276b8                 | ' 
276b8                 | ' 	tmr = _cnt();
276b8                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
276b8                 | ' 	for(;;) {
276b8                 | LR__4110
276b8     04 4E 05 F1 | 	add	fp, #4
276bc     A7 12 02 F6 | 	mov	arg01, fp
276c0     04 4E 85 F1 | 	sub	fp, #4
276c4     01 14 06 F6 | 	mov	arg02, #1
276c8     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_0999
276cc     04 4E 05 F1 | 	add	fp, #4
276d0     A7 1E C2 FA | 	rdbyte	local01, fp
276d4     04 4E 85 F1 | 	sub	fp, #4
276d8     FF 1E 0E F2 | 	cmp	local01, #255 wz
276dc     01 FA 05 A6 |  if_e	mov	result1, #1
276e0     28 00 90 AD |  if_e	jmp	#LR__4111
276e4     1A FA 61 FD | 	getct	result1
276e8     08 4E 05 F1 | 	add	fp, #8
276ec     A7 1E 02 FB | 	rdlong	local01, fp
276f0     0F FB 81 F1 | 	sub	result1, local01
276f4     04 4E 05 F1 | 	add	fp, #4
276f8     A7 1E 02 FB | 	rdlong	local01, fp
276fc     0C 4E 85 F1 | 	sub	fp, #12
27700     0F FB 11 F2 | 	cmp	result1, local01 wc
27704     00 FA 05 36 |  if_ae	mov	result1, #0
27708     AC FF 9F CD |  if_b	jmp	#LR__4110
2770c                 | LR__4111
2770c     A7 F0 03 F6 | 	mov	ptra, fp
27710     B2 00 A0 FD | 	call	#popregs_
27714                 | _fatfs_cc_wait_ready_1003_ret
27714     2D 00 64 FD | 	ret
27718                 | 
27718                 | _fatfs_cc_deselect_1009
27718     00 4A 05 F6 | 	mov	COUNT_, #0
2771c     A8 00 A0 FD | 	call	#pushregs_
27720     14 F0 07 F1 | 	add	ptra, #20
27724     01 00 00 FF 
27728     14 E4 05 F1 | 	add	objptr, ##532
2772c     F2 14 02 FB | 	rdlong	arg02, objptr
27730     04 4E 05 F1 | 	add	fp, #4
27734     A7 14 62 FC | 	wrlong	arg02, fp
27738     04 E4 85 F1 | 	sub	objptr, #4
2773c     F2 14 02 FB | 	rdlong	arg02, objptr
27740     04 4E 05 F1 | 	add	fp, #4
27744     A7 14 62 FC | 	wrlong	arg02, fp
27748     08 E4 05 F1 | 	add	objptr, #8
2774c     F2 14 02 FB | 	rdlong	arg02, objptr
27750     04 4E 05 F1 | 	add	fp, #4
27754     A7 14 62 FC | 	wrlong	arg02, fp
27758     04 E4 05 F1 | 	add	objptr, #4
2775c     F2 14 02 FB | 	rdlong	arg02, objptr
27760     01 00 00 FF 
27764     1C E4 85 F1 | 	sub	objptr, ##540
27768     04 4E 05 F1 | 	add	fp, #4
2776c     A7 14 62 FC | 	wrlong	arg02, fp
27770     0C 4E 85 F1 | 	sub	fp, #12
27774     A7 12 02 FB | 	rdlong	arg01, fp
27778     04 4E 85 F1 | 	sub	fp, #4
2777c     59 12 62 FD | 	drvh	arg01
27780     1F 20 64 FD | 	waitx	#16
27784     A7 12 02 F6 | 	mov	arg01, fp
27788     01 14 06 F6 | 	mov	arg02, #1
2778c     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_0999
27790     A7 F0 03 F6 | 	mov	ptra, fp
27794     B2 00 A0 FD | 	call	#popregs_
27798                 | _fatfs_cc_deselect_1009_ret
27798     2D 00 64 FD | 	ret
2779c                 | 
2779c                 | _fatfs_cc_select_1013
2779c     00 4A 05 F6 | 	mov	COUNT_, #0
277a0     A8 00 A0 FD | 	call	#pushregs_
277a4     10 F0 07 F1 | 	add	ptra, #16
277a8     01 00 00 FF 
277ac     14 E4 05 F1 | 	add	objptr, ##532
277b0     F2 14 02 FB | 	rdlong	arg02, objptr
277b4     08 4E 05 F1 | 	add	fp, #8
277b8     A7 14 62 FC | 	wrlong	arg02, fp
277bc     08 E4 05 F1 | 	add	objptr, #8
277c0     F2 12 02 FB | 	rdlong	arg01, objptr
277c4     01 00 00 FF 
277c8     1C E4 85 F1 | 	sub	objptr, ##540
277cc     04 4E 05 F1 | 	add	fp, #4
277d0     A7 12 62 FC | 	wrlong	arg01, fp
277d4     50 12 62 FD | 	fltl	arg01
277d8     04 4E 85 F1 | 	sub	fp, #4
277dc     A7 12 02 FB | 	rdlong	arg01, fp
277e0     58 12 62 FD | 	drvl	arg01
277e4     1F 20 64 FD | 	waitx	#16
277e8     04 4E 05 F1 | 	add	fp, #4
277ec     A7 12 02 FB | 	rdlong	arg01, fp
277f0     41 12 62 FD | 	dirh	arg01
277f4     08 4E 85 F1 | 	sub	fp, #8
277f8     A7 12 02 F6 | 	mov	arg01, fp
277fc     04 4E 85 F1 | 	sub	fp, #4
27800     01 14 06 F6 | 	mov	arg02, #1
27804     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0999
27808     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1003
2780c     00 FA 0D F2 | 	cmp	result1, #0 wz
27810     01 FA 05 56 |  if_ne	mov	result1, #1
27814     08 00 90 5D |  if_ne	jmp	#LR__4120
27818     FC FE BF FD | 	call	#_fatfs_cc_deselect_1009
2781c                 | ' 
2781c                 | ' 	deselect();
2781c                 | ' 	return 0;
2781c     00 FA 05 F6 | 	mov	result1, #0
27820                 | LR__4120
27820     A7 F0 03 F6 | 	mov	ptra, fp
27824     B2 00 A0 FD | 	call	#popregs_
27828                 | _fatfs_cc_select_1013_ret
27828     2D 00 64 FD | 	ret
2782c                 | 
2782c                 | _fatfs_cc_rcvr_datablock_1017
2782c     01 4A 05 F6 | 	mov	COUNT_, #1
27830     A8 00 A0 FD | 	call	#pushregs_
27834     18 F0 07 F1 | 	add	ptra, #24
27838     04 4E 05 F1 | 	add	fp, #4
2783c     A7 12 62 FC | 	wrlong	arg01, fp
27840     04 4E 05 F1 | 	add	fp, #4
27844     A7 14 62 FC | 	wrlong	arg02, fp
27848     1A FA 61 FD | 	getct	result1
2784c     08 4E 05 F1 | 	add	fp, #8
27850     A7 FA 61 FC | 	wrlong	result1, fp
27854     14 1E 06 FB | 	rdlong	local01, #20
27858     03 1E 46 F0 | 	shr	local01, #3
2785c     04 4E 05 F1 | 	add	fp, #4
27860     A7 1E 62 FC | 	wrlong	local01, fp
27864     14 4E 85 F1 | 	sub	fp, #20
27868                 | ' 	BYTE *buff,
27868                 | ' 	UINT btr
27868                 | ' )
27868                 | ' {
27868                 | ' 	BYTE d[2];
27868                 | ' 	UINT tmr, tmout;
27868                 | ' 
27868                 | ' 	tmr = _cnt();
27868                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
27868                 | ' 	for(;;) {
27868                 | LR__4130
27868     0C 4E 05 F1 | 	add	fp, #12
2786c     A7 12 02 F6 | 	mov	arg01, fp
27870     0C 4E 85 F1 | 	sub	fp, #12
27874     01 14 06 F6 | 	mov	arg02, #1
27878     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0999
2787c     0C 4E 05 F1 | 	add	fp, #12
27880     A7 1E C2 FA | 	rdbyte	local01, fp
27884     0C 4E 85 F1 | 	sub	fp, #12
27888     FF 1E 0E F2 | 	cmp	local01, #255 wz
2788c     28 00 90 5D |  if_ne	jmp	#LR__4131
27890     1A FA 61 FD | 	getct	result1
27894     FD 1E 02 F6 | 	mov	local01, result1
27898     10 4E 05 F1 | 	add	fp, #16
2789c     A7 14 02 FB | 	rdlong	arg02, fp
278a0     0A 1F 82 F1 | 	sub	local01, arg02
278a4     04 4E 05 F1 | 	add	fp, #4
278a8     A7 14 02 FB | 	rdlong	arg02, fp
278ac     14 4E 85 F1 | 	sub	fp, #20
278b0     0A 1F 12 F2 | 	cmp	local01, arg02 wc
278b4     B0 FF 9F CD |  if_b	jmp	#LR__4130
278b8                 | LR__4131
278b8     0C 4E 05 F1 | 	add	fp, #12
278bc     A7 1E C2 FA | 	rdbyte	local01, fp
278c0     0C 4E 85 F1 | 	sub	fp, #12
278c4     FE 1E 0E F2 | 	cmp	local01, #254 wz
278c8     00 FA 05 56 |  if_ne	mov	result1, #0
278cc     30 00 90 5D |  if_ne	jmp	#LR__4132
278d0     04 4E 05 F1 | 	add	fp, #4
278d4     A7 12 02 FB | 	rdlong	arg01, fp
278d8     04 4E 05 F1 | 	add	fp, #4
278dc     A7 14 02 FB | 	rdlong	arg02, fp
278e0     08 4E 85 F1 | 	sub	fp, #8
278e4     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0999
278e8     0C 4E 05 F1 | 	add	fp, #12
278ec     A7 12 02 F6 | 	mov	arg01, fp
278f0     0C 4E 85 F1 | 	sub	fp, #12
278f4     02 14 06 F6 | 	mov	arg02, #2
278f8     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0999
278fc                 | ' 
278fc                 | ' 	rcvr_mmc(buff, btr);
278fc                 | ' 	rcvr_mmc(d, 2);
278fc                 | ' 
278fc                 | ' 	return 1;
278fc     01 FA 05 F6 | 	mov	result1, #1
27900                 | LR__4132
27900     A7 F0 03 F6 | 	mov	ptra, fp
27904     B2 00 A0 FD | 	call	#popregs_
27908                 | _fatfs_cc_rcvr_datablock_1017_ret
27908     2D 00 64 FD | 	ret
2790c                 | 
2790c                 | _fatfs_cc_xmit_datablock_1019
2790c     00 4A 05 F6 | 	mov	COUNT_, #0
27910     A8 00 A0 FD | 	call	#pushregs_
27914     10 F0 07 F1 | 	add	ptra, #16
27918     04 4E 05 F1 | 	add	fp, #4
2791c     A7 12 62 FC | 	wrlong	arg01, fp
27920     04 4E 05 F1 | 	add	fp, #4
27924     A7 14 42 FC | 	wrbyte	arg02, fp
27928     08 4E 85 F1 | 	sub	fp, #8
2792c     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1003
27930     00 FA 0D F2 | 	cmp	result1, #0 wz
27934     00 FA 05 A6 |  if_e	mov	result1, #0
27938     90 00 90 AD |  if_e	jmp	#LR__4141
2793c     08 4E 05 F1 | 	add	fp, #8
27940     A7 14 C2 FA | 	rdbyte	arg02, fp
27944     04 4E 05 F1 | 	add	fp, #4
27948     A7 14 42 FC | 	wrbyte	arg02, fp
2794c     A7 12 02 F6 | 	mov	arg01, fp
27950     0C 4E 85 F1 | 	sub	fp, #12
27954     01 14 06 F6 | 	mov	arg02, #1
27958     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_0992
2795c     08 4E 05 F1 | 	add	fp, #8
27960     A7 14 C2 FA | 	rdbyte	arg02, fp
27964     08 4E 85 F1 | 	sub	fp, #8
27968     FD 14 0E F2 | 	cmp	arg02, #253 wz
2796c     58 00 90 AD |  if_e	jmp	#LR__4140
27970     04 4E 05 F1 | 	add	fp, #4
27974     A7 12 02 FB | 	rdlong	arg01, fp
27978     04 4E 85 F1 | 	sub	fp, #4
2797c     09 14 C6 F9 | 	decod	arg02, #9
27980     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_0992
27984     0C 4E 05 F1 | 	add	fp, #12
27988     A7 12 02 F6 | 	mov	arg01, fp
2798c     0C 4E 85 F1 | 	sub	fp, #12
27990     02 14 06 F6 | 	mov	arg02, #2
27994     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_0999
27998     0C 4E 05 F1 | 	add	fp, #12
2799c     A7 12 02 F6 | 	mov	arg01, fp
279a0     0C 4E 85 F1 | 	sub	fp, #12
279a4     01 14 06 F6 | 	mov	arg02, #1
279a8     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_0999
279ac     0C 4E 05 F1 | 	add	fp, #12
279b0     A7 14 C2 FA | 	rdbyte	arg02, fp
279b4     0C 4E 85 F1 | 	sub	fp, #12
279b8     1F 14 06 F5 | 	and	arg02, #31
279bc     05 14 0E F2 | 	cmp	arg02, #5 wz
279c0                 | ' 			return 0;
279c0     00 FA 05 56 |  if_ne	mov	result1, #0
279c4     04 00 90 5D |  if_ne	jmp	#LR__4141
279c8                 | LR__4140
279c8                 | ' 	}
279c8                 | ' 
279c8                 | ' 	return 1;
279c8     01 FA 05 F6 | 	mov	result1, #1
279cc                 | LR__4141
279cc     A7 F0 03 F6 | 	mov	ptra, fp
279d0     B2 00 A0 FD | 	call	#popregs_
279d4                 | _fatfs_cc_xmit_datablock_1019_ret
279d4     2D 00 64 FD | 	ret
279d8                 | 
279d8                 | _fatfs_cc_send_cmd_1023
279d8     01 4A 05 F6 | 	mov	COUNT_, #1
279dc     A8 00 A0 FD | 	call	#pushregs_
279e0     1C F0 07 F1 | 	add	ptra, #28
279e4                 | _fatfs_cc_send_cmd_1023_enter
279e4     04 4E 05 F1 | 	add	fp, #4
279e8     A7 12 42 FC | 	wrbyte	arg01, fp
279ec     04 4E 05 F1 | 	add	fp, #4
279f0     A7 14 62 FC | 	wrlong	arg02, fp
279f4     04 4E 85 F1 | 	sub	fp, #4
279f8     A7 FA C1 FA | 	rdbyte	result1, fp
279fc     04 4E 85 F1 | 	sub	fp, #4
27a00     80 FA CD F7 | 	test	result1, #128 wz
27a04     44 00 90 AD |  if_e	jmp	#LR__4150
27a08     04 4E 05 F1 | 	add	fp, #4
27a0c     A7 14 C2 FA | 	rdbyte	arg02, fp
27a10     7F 14 06 F5 | 	and	arg02, #127
27a14     A7 14 42 FC | 	wrbyte	arg02, fp
27a18     04 4E 85 F1 | 	sub	fp, #4
27a1c     37 12 06 F6 | 	mov	arg01, #55
27a20     00 14 06 F6 | 	mov	arg02, #0
27a24     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1023
27a28     0C 4E 05 F1 | 	add	fp, #12
27a2c     A7 FA 41 FC | 	wrbyte	result1, fp
27a30     A7 14 C2 FA | 	rdbyte	arg02, fp
27a34     0C 4E 85 F1 | 	sub	fp, #12
27a38     02 14 16 F2 | 	cmp	arg02, #2 wc
27a3c     0C 4E 05 31 |  if_ae	add	fp, #12
27a40     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
27a44     0C 4E 85 31 |  if_ae	sub	fp, #12
27a48     6C 01 90 3D |  if_ae	jmp	#LR__4154
27a4c                 | LR__4150
27a4c     04 4E 05 F1 | 	add	fp, #4
27a50     A7 14 C2 FA | 	rdbyte	arg02, fp
27a54     04 4E 85 F1 | 	sub	fp, #4
27a58     0C 14 0E F2 | 	cmp	arg02, #12 wz
27a5c     14 00 90 AD |  if_e	jmp	#LR__4151
27a60     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1009
27a64     34 FD BF FD | 	call	#_fatfs_cc_select_1013
27a68     00 FA 0D F2 | 	cmp	result1, #0 wz
27a6c     FF FA 05 A6 |  if_e	mov	result1, #255
27a70     44 01 90 AD |  if_e	jmp	#LR__4154
27a74                 | LR__4151
27a74     04 4E 05 F1 | 	add	fp, #4
27a78     A7 14 C2 FA | 	rdbyte	arg02, fp
27a7c     40 FA 05 F6 | 	mov	result1, #64
27a80     0A FB 41 F5 | 	or	result1, arg02
27a84     10 4E 05 F1 | 	add	fp, #16
27a88     A7 FA 41 FC | 	wrbyte	result1, fp
27a8c     0C 4E 85 F1 | 	sub	fp, #12
27a90     A7 FA 01 FB | 	rdlong	result1, fp
27a94     18 FA 45 F0 | 	shr	result1, #24
27a98     0D 4E 05 F1 | 	add	fp, #13
27a9c     A7 FA 41 FC | 	wrbyte	result1, fp
27aa0     0D 4E 85 F1 | 	sub	fp, #13
27aa4     A7 FA 01 FB | 	rdlong	result1, fp
27aa8     10 FA 45 F0 | 	shr	result1, #16
27aac     0E 4E 05 F1 | 	add	fp, #14
27ab0     A7 FA 41 FC | 	wrbyte	result1, fp
27ab4     0E 4E 85 F1 | 	sub	fp, #14
27ab8     A7 FA 01 FB | 	rdlong	result1, fp
27abc     08 FA 45 F0 | 	shr	result1, #8
27ac0     0F 4E 05 F1 | 	add	fp, #15
27ac4     A7 FA 41 FC | 	wrbyte	result1, fp
27ac8     0F 4E 85 F1 | 	sub	fp, #15
27acc     A7 FA 01 FB | 	rdlong	result1, fp
27ad0     10 4E 05 F1 | 	add	fp, #16
27ad4     A7 FA 41 FC | 	wrbyte	result1, fp
27ad8     0C 4E 85 F1 | 	sub	fp, #12
27adc     A7 02 48 FC | 	wrbyte	#1, fp
27ae0     08 4E 85 F1 | 	sub	fp, #8
27ae4     A7 FA C9 FA | 	rdbyte	result1, fp wz
27ae8     04 4E 85 F1 | 	sub	fp, #4
27aec     0C 4E 05 A1 |  if_e	add	fp, #12
27af0     A7 2A 49 AC |  if_e	wrbyte	#149, fp
27af4     0C 4E 85 A1 |  if_e	sub	fp, #12
27af8     04 4E 05 F1 | 	add	fp, #4
27afc     A7 FA C1 FA | 	rdbyte	result1, fp
27b00     04 4E 85 F1 | 	sub	fp, #4
27b04     08 FA 0D F2 | 	cmp	result1, #8 wz
27b08     0C 4E 05 A1 |  if_e	add	fp, #12
27b0c     A7 0E 49 AC |  if_e	wrbyte	#135, fp
27b10     0C 4E 85 A1 |  if_e	sub	fp, #12
27b14     0C 4E 05 F1 | 	add	fp, #12
27b18     A7 14 C2 FA | 	rdbyte	arg02, fp
27b1c     0D 4E 05 F1 | 	add	fp, #13
27b20     A7 14 42 FC | 	wrbyte	arg02, fp
27b24     05 4E 85 F1 | 	sub	fp, #5
27b28     A7 12 02 F6 | 	mov	arg01, fp
27b2c     14 4E 85 F1 | 	sub	fp, #20
27b30     06 14 06 F6 | 	mov	arg02, #6
27b34     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_0992
27b38     04 4E 05 F1 | 	add	fp, #4
27b3c     A7 1E C2 FA | 	rdbyte	local01, fp
27b40     04 4E 85 F1 | 	sub	fp, #4
27b44     0C 1E 0E F2 | 	cmp	local01, #12 wz
27b48     10 4E 05 A1 |  if_e	add	fp, #16
27b4c     A7 12 02 A6 |  if_e	mov	arg01, fp
27b50     10 4E 85 A1 |  if_e	sub	fp, #16
27b54     01 14 06 A6 |  if_e	mov	arg02, #1
27b58     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_0999
27b5c     0C 4E 05 F1 | 	add	fp, #12
27b60     A7 14 48 FC | 	wrbyte	#10, fp
27b64     0C 4E 85 F1 | 	sub	fp, #12
27b68                 | ' 	n = 10;
27b68                 | ' 	do
27b68                 | LR__4152
27b68     10 4E 05 F1 | 	add	fp, #16
27b6c     A7 12 02 F6 | 	mov	arg01, fp
27b70     10 4E 85 F1 | 	sub	fp, #16
27b74     01 14 06 F6 | 	mov	arg02, #1
27b78     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_0999
27b7c     10 4E 05 F1 | 	add	fp, #16
27b80     A7 1E C2 FA | 	rdbyte	local01, fp
27b84     10 4E 85 F1 | 	sub	fp, #16
27b88     80 1E CE F7 | 	test	local01, #128 wz
27b8c     1C 00 90 AD |  if_e	jmp	#LR__4153
27b90     0C 4E 05 F1 | 	add	fp, #12
27b94     A7 1E C2 FA | 	rdbyte	local01, fp
27b98     01 1E 86 F1 | 	sub	local01, #1
27b9c     A7 1E 42 FC | 	wrbyte	local01, fp
27ba0     A7 1E CA FA | 	rdbyte	local01, fp wz
27ba4     0C 4E 85 F1 | 	sub	fp, #12
27ba8     BC FF 9F 5D |  if_ne	jmp	#LR__4152
27bac                 | LR__4153
27bac                 | ' 
27bac                 | ' 	return d;
27bac     10 4E 05 F1 | 	add	fp, #16
27bb0     A7 FA C1 FA | 	rdbyte	result1, fp
27bb4     10 4E 85 F1 | 	sub	fp, #16
27bb8                 | LR__4154
27bb8     A7 F0 03 F6 | 	mov	ptra, fp
27bbc     B2 00 A0 FD | 	call	#popregs_
27bc0                 | _fatfs_cc_send_cmd_1023_ret
27bc0     2D 00 64 FD | 	ret
27bc4                 | 
27bc4                 | _fatfs_cc_disk_deinitialize
27bc4     03 4A 05 F6 | 	mov	COUNT_, #3
27bc8     A8 00 A0 FD | 	call	#pushregs_
27bcc     00 12 4E F2 | 	cmps	arg01, #0 wz
27bd0     01 00 00 FF 
27bd4     14 E4 05 F1 | 	add	objptr, ##532
27bd8     F2 12 02 FB | 	rdlong	arg01, objptr
27bdc     04 E4 85 F1 | 	sub	objptr, #4
27be0     F2 1E 02 FB | 	rdlong	local01, objptr
27be4     08 E4 05 F1 | 	add	objptr, #8
27be8     F2 20 02 FB | 	rdlong	local02, objptr
27bec     04 E4 05 F1 | 	add	objptr, #4
27bf0     F2 22 02 FB | 	rdlong	local03, objptr
27bf4     01 00 00 FF 
27bf8     1C E4 85 F1 | 	sub	objptr, ##540
27bfc                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
27bfc                 | '         return RES_NOTRDY;
27bfc     03 FA 05 56 |  if_ne	mov	result1, #3
27c00     2C 00 90 5D |  if_ne	jmp	#LR__4160
27c04     50 12 62 FD | 	fltl	arg01
27c08     09 01 08 FC | 	wrpin	#0, arg01
27c0c     50 1E 62 FD | 	fltl	local01
27c10     0F 01 08 FC | 	wrpin	#0, local01
27c14     50 20 62 FD | 	fltl	local02
27c18     10 01 08 FC | 	wrpin	#0, local02
27c1c     50 22 62 FD | 	fltl	local03
27c20     11 01 08 FC | 	wrpin	#0, local03
27c24     0A 12 06 F6 | 	mov	arg01, #10
27c28     40 14 BF FD | 	call	#__system___waitms
27c2c                 | '     }
27c2c                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
27c2c                 | '     _pinclear(PIN_SS);
27c2c                 | '     _pinclear(PIN_CLK);
27c2c                 | '     _pinclear(PIN_DI);
27c2c                 | '     _pinclear(PIN_DO);
27c2c                 | ' 
27c2c                 | '     _waitms(10);
27c2c                 | ' 
27c2c                 | '     return 0;
27c2c     00 FA 05 F6 | 	mov	result1, #0
27c30                 | LR__4160
27c30     A7 F0 03 F6 | 	mov	ptra, fp
27c34     B2 00 A0 FD | 	call	#popregs_
27c38                 | _fatfs_cc_disk_deinitialize_ret
27c38     2D 00 64 FD | 	ret
27c3c                 | 
27c3c                 | _fatfs_cc_gettimeofday
27c3c     04 4A 05 F6 | 	mov	COUNT_, #4
27c40     A8 00 A0 FD | 	call	#pushregs_
27c44     09 1F 02 F6 | 	mov	local01, arg01
27c48     FC 0F BF FD | 	call	#__system___getus
27c4c     FD 12 02 F6 | 	mov	arg01, result1
27c50     02 00 00 FF 
27c54     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
27c58     F6 20 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
27c5c     09 FB 01 F6 | 	mov	result1, arg01
27c60     10 FB 81 F1 | 	sub	result1, local02
27c64     A1 07 00 FF 
27c68     40 FA 15 FD | 	qdiv	result1, ##1000000
27c6c     02 00 00 FF 
27c70     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
27c74     18 20 62 FD | 	getqx	local02
27c78     A1 07 00 FF 
27c7c     40 FA 15 FD | 	qdiv	result1, ##1000000
27c80     00 20 0E F2 | 	cmp	local02, #0 wz
27c84     19 22 62 FD | 	getqy	local03
27c88     28 00 90 AD |  if_e	jmp	#LR__4170
27c8c     02 00 00 FF 
27c90     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
27c94     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
27c98     10 25 02 F1 | 	add	local04, local02
27c9c     F6 24 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
27ca0     11 13 82 F1 | 	sub	arg01, local03
27ca4     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
27ca8     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
27cac     02 00 00 FF 
27cb0     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
27cb4                 | LR__4170
27cb4     02 00 00 FF 
27cb8     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
27cbc     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
27cc0     02 00 00 FF 
27cc4     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
27cc8     0F 25 62 FC | 	wrlong	local04, local01
27ccc     04 1E 06 F1 | 	add	local01, #4
27cd0     0F 23 62 FC | 	wrlong	local03, local01
27cd4                 | '         lastsec += secs;
27cd4                 | '         lastus = now - leftover;
27cd4                 | '     }
27cd4                 | '     tv->tv_sec = lastsec;
27cd4                 | '     tv->tv_usec = leftover;
27cd4                 | '     return 0;
27cd4     00 FA 05 F6 | 	mov	result1, #0
27cd8     A7 F0 03 F6 | 	mov	ptra, fp
27cdc     B2 00 A0 FD | 	call	#popregs_
27ce0                 | _fatfs_cc_gettimeofday_ret
27ce0     2D 00 64 FD | 	ret
27ce4                 | 
27ce4                 | _fatfs_cc__is_leap_year
27ce4     09 FB 51 F6 | 	abs	result1, arg01 wc
27ce8     03 FA 05 F5 | 	and	result1, #3
27cec     FD FA 89 F6 | 	negc	result1, result1 wz
27cf0     38 00 90 5D |  if_ne	jmp	#LR__4181
27cf4     09 FB 51 F6 | 	abs	result1, arg01 wc
27cf8     64 FA 15 FD | 	qdiv	result1, #100
27cfc     19 FA 61 FD | 	getqy	result1
27d00     FD FA 89 F6 | 	negc	result1, result1 wz
27d04     1C 00 90 5D |  if_ne	jmp	#LR__4180
27d08     09 FB 51 F6 | 	abs	result1, arg01 wc
27d0c     90 FB 15 FD | 	qdiv	result1, #400
27d10                 | '       return (0 == y % 400);
27d10     00 FA 05 F6 | 	mov	result1, #0
27d14     19 00 62 FD | 	getqy	_var01
27d18     00 01 8A F6 | 	negc	_var01, _var01 wz
27d1c     01 FA 05 A6 |  if_e	mov	result1, #1
27d20     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
27d24                 | LR__4180
27d24                 | '     return 1;
27d24     01 FA 05 F6 | 	mov	result1, #1
27d28     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
27d2c                 | LR__4181
27d2c                 | '   }
27d2c                 | '   return 0;
27d2c     00 FA 05 F6 | 	mov	result1, #0
27d30                 | _fatfs_cc__is_leap_year_ret
27d30     2D 00 64 FD | 	ret
27d34                 | 
27d34                 | _fatfs_cc___tzoffset
27d34     09 01 0A F6 | 	mov	_var01, arg01 wz
27d38     FF FF FF FF 
27d3c     0A FF 6B FC | 	wrlong	##-1, arg02
27d40     01 02 06 F6 | 	mov	_var02, #1
27d44     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
27d48                 | '                 return 0;
27d48     00 FA 05 A6 |  if_e	mov	result1, #0
27d4c     94 02 90 AD |  if_e	jmp	#LR__4207
27d50     0A 01 68 FC | 	wrlong	#0, arg02
27d54     02 00 00 FF 
27d58     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
27d5c     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
27d60                 | ' 
27d60                 | '        *hasdst = 0;
27d60                 | ' 
27d60                 | ' 	n = stdname;
27d60                 | '         while (*s && isalpha(*s)) {
27d60     02 00 00 FF 
27d64     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
27d68     97 28 48 FB | 	callpa	#(@LR__4191-@LR__4190)>>2,fcache_load_ptr_
27d6c                 | LR__4190
27d6c     00 05 CA FA | 	rdbyte	_var03, _var01 wz
27d70     48 00 90 AD |  if_e	jmp	#LR__4192
27d74     00 13 C2 FA | 	rdbyte	arg01, _var01
27d78                 | ' {
27d78                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
27d78     80 12 36 F3 | 	fle	arg01, #128 wc
27d7c                 | '     return __ctype[c];
27d7c     02 00 00 FF 
27d80     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
27d84     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
27d88     09 FB C1 FA | 	rdbyte	result1, arg01
27d8c     02 00 00 FF 
27d90     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
27d94     0C FA CD F7 | 	test	result1, #12 wz
27d98     20 00 90 AD |  if_e	jmp	#LR__4192
27d9c     00 09 02 F6 | 	mov	_var05, _var01
27da0     00 0B 02 F6 | 	mov	_var06, _var01
27da4     01 0A 06 F1 | 	add	_var06, #1
27da8     04 0D C2 FA | 	rdbyte	_var07, _var05
27dac     05 01 02 F6 | 	mov	_var01, _var06
27db0     03 0D 42 FC | 	wrbyte	_var07, _var04
27db4     01 06 06 F1 | 	add	_var04, #1
27db8     B0 FF 9F FD | 	jmp	#LR__4190
27dbc                 | LR__4191
27dbc                 | LR__4192
27dbc     03 01 48 FC | 	wrbyte	#0, _var04
27dc0     00 0E 06 F6 | 	mov	_var08, #0
27dc4     00 05 C2 FA | 	rdbyte	_var03, _var01
27dc8     2D 04 0E F2 | 	cmp	_var03, #45 wz
27dcc     01 02 66 A6 |  if_e	neg	_var02, #1
27dd0     01 00 06 A1 |  if_e	add	_var01, #1
27dd4     97 28 48 FB | 	callpa	#(@LR__4194-@LR__4193)>>2,fcache_load_ptr_
27dd8                 | '                 sgn = -1;
27dd8                 | '                 s++;
27dd8                 | '         }
27dd8                 | '         while (isdigit(*s)) {
27dd8                 | LR__4193
27dd8     00 13 C2 FA | 	rdbyte	arg01, _var01
27ddc                 | ' {
27ddc                 | '   return  (__ctype_get(c) & 0x02 ) ;
27ddc     80 12 36 F3 | 	fle	arg01, #128 wc
27de0                 | '     return __ctype[c];
27de0     02 00 00 FF 
27de4     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
27de8     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
27dec     09 FB C1 FA | 	rdbyte	result1, arg01
27df0     02 00 00 FF 
27df4     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
27df8     02 FA CD F7 | 	test	result1, #2 wz
27dfc     28 00 90 AD |  if_e	jmp	#LR__4195
27e00     07 05 02 F6 | 	mov	_var03, _var08
27e04     02 04 66 F0 | 	shl	_var03, #2
27e08     07 05 02 F1 | 	add	_var03, _var08
27e0c     01 04 66 F0 | 	shl	_var03, #1
27e10     00 09 C2 FA | 	rdbyte	_var05, _var01
27e14     30 08 86 F1 | 	sub	_var05, #48
27e18     04 05 02 F1 | 	add	_var03, _var05
27e1c     02 0F 02 F6 | 	mov	_var08, _var03
27e20     01 00 06 F1 | 	add	_var01, #1
27e24     B0 FF 9F FD | 	jmp	#LR__4193
27e28                 | LR__4194
27e28                 | LR__4195
27e28     07 00 00 FF 
27e2c     10 0E 06 FD | 	qmul	_var08, ##3600
27e30     00 05 C2 FA | 	rdbyte	_var03, _var01
27e34     3A 04 0E F2 | 	cmp	_var03, #58 wz
27e38     18 10 62 FD | 	getqx	_var09
27e3c     70 00 90 5D |  if_ne	jmp	#LR__4199
27e40     00 0E 06 F6 | 	mov	_var08, #0
27e44     01 00 06 F1 | 	add	_var01, #1
27e48     97 28 48 FB | 	callpa	#(@LR__4197-@LR__4196)>>2,fcache_load_ptr_
27e4c                 | '                 x = 0;
27e4c                 | '                 s++;
27e4c                 | '                 while (isdigit(*s)) {
27e4c                 | LR__4196
27e4c     00 13 C2 FA | 	rdbyte	arg01, _var01
27e50                 | ' {
27e50                 | '   return  (__ctype_get(c) & 0x02 ) ;
27e50     80 12 36 F3 | 	fle	arg01, #128 wc
27e54                 | '     return __ctype[c];
27e54     02 00 00 FF 
27e58     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
27e5c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
27e60     09 FB C1 FA | 	rdbyte	result1, arg01
27e64     02 00 00 FF 
27e68     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
27e6c     02 FA CD F7 | 	test	result1, #2 wz
27e70     28 00 90 AD |  if_e	jmp	#LR__4198
27e74     07 05 02 F6 | 	mov	_var03, _var08
27e78     02 04 66 F0 | 	shl	_var03, #2
27e7c     07 05 02 F1 | 	add	_var03, _var08
27e80     01 04 66 F0 | 	shl	_var03, #1
27e84     00 09 C2 FA | 	rdbyte	_var05, _var01
27e88     30 08 86 F1 | 	sub	_var05, #48
27e8c     04 05 02 F1 | 	add	_var03, _var05
27e90     02 0F 02 F6 | 	mov	_var08, _var03
27e94     01 00 06 F1 | 	add	_var01, #1
27e98     B0 FF 9F FD | 	jmp	#LR__4196
27e9c                 | LR__4197
27e9c                 | LR__4198
27e9c     07 0D 02 F6 | 	mov	_var07, _var08
27ea0     04 0C 66 F0 | 	shl	_var07, #4
27ea4     07 0D 82 F1 | 	sub	_var07, _var08
27ea8     02 0C 66 F0 | 	shl	_var07, #2
27eac     06 11 02 F1 | 	add	_var09, _var07
27eb0                 | LR__4199
27eb0     02 00 00 FF 
27eb4     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
27eb8     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
27ebc     00 13 C2 FA | 	rdbyte	arg01, _var01
27ec0                 | ' {
27ec0                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
27ec0     80 12 36 F3 | 	fle	arg01, #128 wc
27ec4                 | '     return __ctype[c];
27ec4     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
27ec8     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
27ecc     09 FB C1 FA | 	rdbyte	result1, arg01
27ed0     02 00 00 FF 
27ed4     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
27ed8     0C FA CD F7 | 	test	result1, #12 wz
27edc     50 00 90 AD |  if_e	jmp	#LR__4202
27ee0     0A 03 68 FC | 	wrlong	#1, arg02
27ee4                 | '                 *hasdst = 1;
27ee4                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
27ee4                 | LR__4200
27ee4     00 05 CA FA | 	rdbyte	_var03, _var01 wz
27ee8     44 00 90 AD |  if_e	jmp	#LR__4201
27eec     00 13 C2 FA | 	rdbyte	arg01, _var01
27ef0                 | ' {
27ef0                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
27ef0     80 12 36 F3 | 	fle	arg01, #128 wc
27ef4                 | '     return __ctype[c];
27ef4     02 00 00 FF 
27ef8     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
27efc     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
27f00     09 FB C1 FA | 	rdbyte	result1, arg01
27f04     02 00 00 FF 
27f08     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
27f0c     0C FA CD F7 | 	test	result1, #12 wz
27f10     1C 00 90 AD |  if_e	jmp	#LR__4201
27f14     00 0B 02 F6 | 	mov	_var06, _var01
27f18     01 0A 06 F1 | 	add	_var06, #1
27f1c     00 0D C2 FA | 	rdbyte	_var07, _var01
27f20     05 01 02 F6 | 	mov	_var01, _var06
27f24     03 0D 42 FC | 	wrbyte	_var07, _var04
27f28     01 06 06 F1 | 	add	_var04, #1
27f2c     B4 FF 9F FD | 	jmp	#LR__4200
27f30                 | LR__4201
27f30                 | LR__4202
27f30     03 01 48 FC | 	wrbyte	#0, _var04
27f34     02 00 00 FF 
27f38     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
27f3c     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
27f40     02 00 00 FF 
27f44     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
27f48     20 00 90 AD |  if_e	jmp	#LR__4203
27f4c     02 00 00 FF 
27f50     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
27f54     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
27f58     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
27f5c     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
27f60     02 00 00 FF 
27f64     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
27f68     1C 00 90 FD | 	jmp	#LR__4204
27f6c                 | LR__4203
27f6c     02 00 00 FF 
27f70     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
27f74     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
27f78     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
27f7c     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
27f80     02 00 00 FF 
27f84     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
27f88                 | LR__4204
27f88     02 00 00 FF 
27f8c     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
27f90     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
27f94     02 00 00 FF 
27f98     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
27f9c     20 00 90 AD |  if_e	jmp	#LR__4205
27fa0     02 00 00 FF 
27fa4     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
27fa8     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
27fac     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
27fb0     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
27fb4     02 00 00 FF 
27fb8     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
27fbc     1C 00 90 FD | 	jmp	#LR__4206
27fc0                 | LR__4205
27fc0     02 00 00 FF 
27fc4     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
27fc8     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
27fcc     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
27fd0     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
27fd4     02 00 00 FF 
27fd8     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
27fdc                 | LR__4206
27fdc     08 03 02 FD | 	qmul	_var02, _var09
27fe0                 | ' 		_tzname[1] = stdname;
27fe0                 | ' 
27fe0                 | '         return sgn * off;
27fe0     18 FA 61 FD | 	getqx	result1
27fe4                 | LR__4207
27fe4                 | _fatfs_cc___tzoffset_ret
27fe4     2D 00 64 FD | 	ret
27fe8                 | 
27fe8                 | _fatfs_cc___indst
27fe8     10 12 06 F1 | 	add	arg01, #16
27fec     09 01 02 FB | 	rdlong	_var01, arg01
27ff0     10 12 86 F1 | 	sub	arg01, #16
27ff4     02 00 0E F2 | 	cmp	_var01, #2 wz
27ff8     30 00 90 5D |  if_ne	jmp	#LR__4210
27ffc     07 00 06 F6 | 	mov	_var01, #7
28000     18 12 06 F1 | 	add	arg01, #24
28004     09 03 02 FB | 	rdlong	_var02, arg01
28008     01 01 02 F1 | 	add	_var01, _var02
2800c     0C 12 86 F1 | 	sub	arg01, #12
28010     09 05 02 FB | 	rdlong	_var03, arg01
28014     02 01 82 F1 | 	sub	_var01, _var03
28018     00 00 56 F2 | 	cmps	_var01, #0 wc
2801c                 | '                         return 1;
2801c     01 FA 05 C6 |  if_b	mov	result1, #1
28020     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
28024                 | '                 return 0;
28024     00 FA 05 F6 | 	mov	result1, #0
28028     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
2802c                 | LR__4210
2802c     10 12 06 F1 | 	add	arg01, #16
28030     09 01 02 FB | 	rdlong	_var01, arg01
28034     10 12 86 F1 | 	sub	arg01, #16
28038     0A 00 0E F2 | 	cmp	_var01, #10 wz
2803c     28 00 90 5D |  if_ne	jmp	#LR__4211
28040     18 12 06 F1 | 	add	arg01, #24
28044     09 01 02 FB | 	rdlong	_var01, arg01
28048     0C 12 86 F1 | 	sub	arg01, #12
2804c     09 07 02 FB | 	rdlong	_var04, arg01
28050     03 01 82 F1 | 	sub	_var01, _var04
28054     00 00 56 F2 | 	cmps	_var01, #0 wc
28058                 | '                         return 0;
28058     00 FA 05 C6 |  if_b	mov	result1, #0
2805c     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
28060                 | '                 return 1;
28060     01 FA 05 F6 | 	mov	result1, #1
28064     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
28068                 | LR__4211
28068                 | '         }
28068                 | ' 
28068                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
28068     00 00 06 F6 | 	mov	_var01, #0
2806c     10 12 06 F1 | 	add	arg01, #16
28070     09 03 02 FB | 	rdlong	_var02, arg01
28074     10 12 86 F1 | 	sub	arg01, #16
28078     03 02 56 F2 | 	cmps	_var02, #3 wc
2807c     10 00 90 CD |  if_b	jmp	#LR__4212
28080     10 12 06 F1 | 	add	arg01, #16
28084     09 05 02 FB | 	rdlong	_var03, arg01
28088     0A 04 56 F2 | 	cmps	_var03, #10 wc
2808c     01 00 06 C6 |  if_b	mov	_var01, #1
28090                 | LR__4212
28090     00 FB 01 F6 | 	mov	result1, _var01
28094                 | _fatfs_cc___indst_ret
28094     2D 00 64 FD | 	ret
28098                 | 
28098                 | ' 	
28098                 | ' 	FUNCTION pfunc(c as integer) as integer
28098                 | ___strs_cl_pfunc
28098                 | ' 		if (i < 16) then
28098     04 E4 05 F1 | 	add	objptr, #4
2809c     F2 FA 01 FB | 	rdlong	result1, objptr
280a0     04 E4 85 F1 | 	sub	objptr, #4
280a4     10 FA 55 F2 | 	cmps	result1, #16 wc
280a8     2C 00 90 3D |  if_ae	jmp	#LR__4220
280ac     F2 FA 01 FB | 	rdlong	result1, objptr
280b0     04 E4 05 F1 | 	add	objptr, #4
280b4     F2 00 02 FB | 	rdlong	_var01, objptr
280b8     FD 00 02 F1 | 	add	_var01, result1
280bc     00 13 42 FC | 	wrbyte	arg01, _var01
280c0     F2 FA 01 FB | 	rdlong	result1, objptr
280c4     01 FA 05 F1 | 	add	result1, #1
280c8     F2 FA 61 FC | 	wrlong	result1, objptr
280cc     04 E4 85 F1 | 	sub	objptr, #4
280d0                 | ' 			p(i) = c
280d0                 | ' 			i = i+1
280d0                 | ' 			return 1
280d0     01 FA 05 F6 | 	mov	result1, #1
280d4     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
280d8                 | LR__4220
280d8                 | ' 			return -1
280d8     01 FA 65 F6 | 	neg	result1, #1
280dc                 | ___strs_cl_pfunc_ret
280dc     2D 00 64 FD | 	ret
280e0                 | 
280e0                 | __struct__s_vfs_file_t_putchar
280e0     04 4A 05 F6 | 	mov	COUNT_, #4
280e4     A8 00 A0 FD | 	call	#pushregs_
280e8     1C E4 05 F1 | 	add	objptr, #28
280ec     F2 1E 0A FB | 	rdlong	local01, objptr wz
280f0     1C E4 85 F1 | 	sub	objptr, #28
280f4     00 FA 05 A6 |  if_e	mov	result1, #0
280f8     48 00 90 AD |  if_e	jmp	#LR__4230
280fc     1C E4 05 F1 | 	add	objptr, #28
28100     F2 20 02 FB | 	rdlong	local02, objptr
28104     10 23 02 F6 | 	mov	local03, local02
28108     1C E4 85 F1 | 	sub	objptr, #28
2810c     13 22 46 F7 | 	zerox	local03, #19
28110     14 20 46 F0 | 	shr	local02, #20
28114     02 20 66 F0 | 	shl	local02, #2
28118     ED 20 02 F1 | 	add	local02, __methods__
2811c     10 21 02 FB | 	rdlong	local02, local02
28120     F2 14 02 F6 | 	mov	arg02, objptr
28124     F2 24 02 F6 | 	mov	local04, objptr
28128     11 E5 01 F6 | 	mov	objptr, local03
2812c     2D 20 62 FD | 	call	local02
28130     12 E5 01 F6 | 	mov	objptr, local04
28134                 | '     return (i < 0) ? 0 : 1;
28134     00 FA 55 F2 | 	cmps	result1, #0 wc
28138     00 1E 06 C6 |  if_b	mov	local01, #0
2813c     01 1E 06 36 |  if_ae	mov	local01, #1
28140     0F FB 01 F6 | 	mov	result1, local01
28144                 | LR__4230
28144     A7 F0 03 F6 | 	mov	ptra, fp
28148     B2 00 A0 FD | 	call	#popregs_
2814c                 | __struct__s_vfs_file_t_putchar_ret
2814c     2D 00 64 FD | 	ret
28150                 | 
28150                 | __struct__s_vfs_file_t_getchar
28150     03 4A 05 F6 | 	mov	COUNT_, #3
28154     A8 00 A0 FD | 	call	#pushregs_
28158     20 E4 05 F1 | 	add	objptr, #32
2815c     F2 12 0A FB | 	rdlong	arg01, objptr wz
28160     20 E4 85 F1 | 	sub	objptr, #32
28164     01 FA 65 A6 |  if_e	neg	result1, #1
28168     38 00 90 AD |  if_e	jmp	#LR__4240
2816c                 | '     return getcf(__this);
2816c     20 E4 05 F1 | 	add	objptr, #32
28170     F2 1E 02 FB | 	rdlong	local01, objptr
28174     0F 21 02 F6 | 	mov	local02, local01
28178     20 E4 85 F1 | 	sub	objptr, #32
2817c     13 20 46 F7 | 	zerox	local02, #19
28180     14 1E 46 F0 | 	shr	local01, #20
28184     02 1E 66 F0 | 	shl	local01, #2
28188     ED 1E 02 F1 | 	add	local01, __methods__
2818c     0F 1F 02 FB | 	rdlong	local01, local01
28190     F2 12 02 F6 | 	mov	arg01, objptr
28194     F2 22 02 F6 | 	mov	local03, objptr
28198     10 E5 01 F6 | 	mov	objptr, local02
2819c     2D 1E 62 FD | 	call	local01
281a0     11 E5 01 F6 | 	mov	objptr, local03
281a4                 | LR__4240
281a4     A7 F0 03 F6 | 	mov	ptra, fp
281a8     B2 00 A0 FD | 	call	#popregs_
281ac                 | __struct__s_vfs_file_t_getchar_ret
281ac     2D 00 64 FD | 	ret
281b0                 | 
281b0                 | __struct___bas_wrap_sender_tx
281b0     03 4A 05 F6 | 	mov	COUNT_, #3
281b4     A8 00 A0 FD | 	call	#pushregs_
281b8     F2 1E 02 FB | 	rdlong	local01, objptr
281bc     0F 21 02 F6 | 	mov	local02, local01
281c0     13 1E 46 F7 | 	zerox	local01, #19
281c4     14 20 46 F0 | 	shr	local02, #20
281c8     02 20 66 F0 | 	shl	local02, #2
281cc     ED 20 02 F1 | 	add	local02, __methods__
281d0     10 21 02 FB | 	rdlong	local02, local02
281d4     F2 22 02 F6 | 	mov	local03, objptr
281d8     0F E5 01 F6 | 	mov	objptr, local01
281dc     2D 20 62 FD | 	call	local02
281e0     11 E5 01 F6 | 	mov	objptr, local03
281e4     01 FA 05 F6 | 	mov	result1, #1
281e8     A7 F0 03 F6 | 	mov	ptra, fp
281ec     B2 00 A0 FD | 	call	#popregs_
281f0                 | __struct___bas_wrap_sender_tx_ret
281f0     2D 00 64 FD | 	ret
281f4                 | 
281f4                 | __struct___bas_wrap_sender_rx
281f4     03 4A 05 F6 | 	mov	COUNT_, #3
281f8     A8 00 A0 FD | 	call	#pushregs_
281fc     04 E4 05 F1 | 	add	objptr, #4
28200     F2 1E 02 FB | 	rdlong	local01, objptr
28204     0F 21 02 F6 | 	mov	local02, local01
28208     04 E4 85 F1 | 	sub	objptr, #4
2820c     13 20 46 F7 | 	zerox	local02, #19
28210     14 1E 46 F0 | 	shr	local01, #20
28214     02 1E 66 F0 | 	shl	local01, #2
28218     ED 1E 02 F1 | 	add	local01, __methods__
2821c     0F 1F 02 FB | 	rdlong	local01, local01
28220     F2 22 02 F6 | 	mov	local03, objptr
28224     10 E5 01 F6 | 	mov	objptr, local02
28228     2D 1E 62 FD | 	call	local01
2822c     11 E5 01 F6 | 	mov	objptr, local03
28230     A7 F0 03 F6 | 	mov	ptra, fp
28234     B2 00 A0 FD | 	call	#popregs_
28238                 | __struct___bas_wrap_sender_rx_ret
28238     2D 00 64 FD | 	ret
2823c                 | 
2823c                 | __struct___bas_wrap_sender_close
2823c     03 4A 05 F6 | 	mov	COUNT_, #3
28240     A8 00 A0 FD | 	call	#pushregs_
28244     08 E4 05 F1 | 	add	objptr, #8
28248     F2 1E 02 FB | 	rdlong	local01, objptr
2824c     0F 21 02 F6 | 	mov	local02, local01
28250     08 E4 85 F1 | 	sub	objptr, #8
28254     13 20 46 F7 | 	zerox	local02, #19
28258     14 1E 46 F0 | 	shr	local01, #20
2825c     02 1E 66 F0 | 	shl	local01, #2
28260     ED 1E 02 F1 | 	add	local01, __methods__
28264     0F 1F 02 FB | 	rdlong	local01, local01
28268     F2 22 02 F6 | 	mov	local03, objptr
2826c     10 E5 01 F6 | 	mov	objptr, local02
28270     2D 1E 62 FD | 	call	local01
28274     11 E5 01 F6 | 	mov	objptr, local03
28278     A7 F0 03 F6 | 	mov	ptra, fp
2827c     B2 00 A0 FD | 	call	#popregs_
28280                 | __struct___bas_wrap_sender_close_ret
28280     2D 00 64 FD | 	ret
28284                 | 
28284                 | LR__4250
28284     2F          | 	byte	"/"
28285     00          | 	byte	0
28286                 | LR__4251
28286     69 6E 66    | 	byte	"inf"
28289     00          | 	byte	0
2828a                 | LR__4252
2828a     6E 61 6E    | 	byte	"nan"
2828d     00          | 	byte	0
2828e                 | LR__4253
2828e                 | 	byte	
2828e     00          | 	byte	0
2828f                 | LR__4254
2828f                 | 	byte	
2828f     00          | 	byte	0
28290                 | LR__4255
28290                 | 	byte	
28290     00          | 	byte	0
28291                 | LR__4256
28291                 | 	byte	
28291     00          | 	byte	0
28292                 | LR__4257
28292                 | 	byte	
28292     00          | 	byte	0
28293                 | LR__4258
28293                 | 	byte	
28293     00          | 	byte	0
28294                 | LR__4259
28294                 | 	byte	
28294     00          | 	byte	0
28295                 | LR__4260
28295                 | 	byte	
28295     00          | 	byte	0
28296                 | LR__4261
28296     00          | 	byte	0
28297     00          | 	byte	0
28298                 | LR__4262
28298     00          | 	byte	0
28299     00          | 	byte	0
2829a                 | LR__4263
2829a     00          | 	byte	0
2829b     00          | 	byte	0
2829c                 | LR__4264
2829c     20 21 21 21 
282a0     20 63 6F 72 
282a4     72 75 70 74 
282a8     65 64 20 68 
282ac     65 61 70 3F 
282b0     3F 3F 20 21 
282b4     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
282b7     00          | 	byte	0
282b8                 | LR__4265
282b8     20 21 21 21 
282bc     20 6F 75 74 
282c0     20 6F 66 20 
282c4     68 65 61 70 
282c8     20 6D 65 6D 
282cc     6F 72 79 20 
282d0     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
282d4     00          | 	byte	0
282d5                 | LR__4266
282d5     20 21 21 21 
282d9     20 63 6F 72 
282dd     72 75 70 74 
282e1     65 64 20 68 
282e5     65 61 70 20 
282e9     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
282ed     00          | 	byte	0
282ee                 | LR__4267
282ee     00          | 	byte	0
282ef     00          | 	byte	0
282f0                 | LR__4268
282f0     2E          | 	byte	"."
282f1     00          | 	byte	0
282f2                 | LR__4269
282f2     00          | 	byte	0
282f3     00          | 	byte	0
282f4                 | LR__4270
282f4     00          | 	byte	0
282f5     00          | 	byte	0
282f6                 | LR__4271
282f6     00          | 	byte	0
282f7     00          | 	byte	0
282f8                 | LR__4272
282f8     2A 3A 3C 3E 
282fc     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
28300     00          | 	byte	0
28301                 | LR__4273
28301     2B 2C 3B 3D 
28305     5B 5D       | 	byte	"+,;=[]"
28307     00          | 	byte	0
28308                 | LR__4274
28308     46 41 54 33 
2830c     32 20 20 20 | 	byte	"FAT32   "
28310     00          | 	byte	0
28311                 | LR__4275
28311     54 5A       | 	byte	"TZ"
28313     00          | 	byte	0
28314                 | LR__4276
28314     00          | 	byte	0
28315     00          | 	byte	0
28316                 | LR__4277
28316                 | 	byte	
28316     00          | 	byte	0
28317                 | LR__4278
28317                 | 	byte	
28317     00          | 	byte	0
28318                 | LR__4279
28318     22          | 	byte	34
28319     00          | 	byte	0
2831a                 | LR__4280
2831a     22          | 	byte	34
2831b     00          | 	byte	0
2831c                 | LR__4281
2831c     3A          | 	byte	":"
2831d     00          | 	byte	0
2831e                 | LR__4282
2831e                 | 	byte	
2831e     00          | 	byte	0
2831f                 | LR__4283
2831f                 | 	byte	
2831f     00          | 	byte	0
28320                 | LR__4284
28320                 | 	byte	
28320     00          | 	byte	0
28321                 | LR__4285
28321                 | 	byte	
28321     00          | 	byte	0
28322                 | LR__4286
28322                 | 	byte	
28322     00          | 	byte	0
28323                 | LR__4287
28323                 | 	byte	
28323     00          | 	byte	0
28324                 | LR__4288
28324                 | 	byte	
28324     00          | 	byte	0
28325                 | LR__4289
28325     22          | 	byte	34
28326     00          | 	byte	0
28327                 | LR__4290
28327     22          | 	byte	34
28328     00          | 	byte	0
28329                 | LR__4291
28329     22          | 	byte	34
2832a     00          | 	byte	0
2832b                 | LR__4292
2832b     22          | 	byte	34
2832c     00          | 	byte	0
2832d                 | LR__4293
2832d     22          | 	byte	34
2832e     00          | 	byte	0
2832f                 | LR__4294
2832f     3E          | 	byte	">"
28330     00          | 	byte	0
28331                 | LR__4295
28331     3E          | 	byte	">"
28332     00          | 	byte	0
28333                 | LR__4296
28333     2B          | 	byte	"+"
28334     00          | 	byte	0
28335                 | LR__4297
28335     2D          | 	byte	"-"
28336     00          | 	byte	0
28337                 | LR__4298
28337     2A          | 	byte	"*"
28338     00          | 	byte	0
28339                 | LR__4299
28339     2F          | 	byte	"/"
2833a     00          | 	byte	0
2833b                 | LR__4300
2833b     5E          | 	byte	"^"
2833c     00          | 	byte	0
2833d                 | LR__4301
2833d     3D          | 	byte	"="
2833e     00          | 	byte	0
2833f                 | LR__4302
2833f     2B          | 	byte	"+"
28340     00          | 	byte	0
28341                 | LR__4303
28341     2B          | 	byte	"+"
28342     00          | 	byte	0
28343                 | LR__4304
28343     2D          | 	byte	"-"
28344     00          | 	byte	0
28345                 | LR__4305
28345     2D          | 	byte	"-"
28346     00          | 	byte	0
28347                 | LR__4306
28347     3C          | 	byte	"<"
28348     00          | 	byte	0
28349                 | LR__4307
28349     3E          | 	byte	">"
2834a     00          | 	byte	0
2834b                 | LR__4308
2834b     22          | 	byte	34
2834c     00          | 	byte	0
2834d                 | LR__4309
2834d     22          | 	byte	34
2834e     00          | 	byte	0
2834f                 | LR__4310
2834f     2E          | 	byte	"."
28350     00          | 	byte	0
28351                 | LR__4311
28351     3F          | 	byte	"?"
28352     00          | 	byte	0
28353                 | LR__4312
28353     3F          | 	byte	"?"
28354     00          | 	byte	0
28355                 | LR__4313
28355     6D 6F 75 73 
28359     65          | 	byte	"mouse"
2835a     00          | 	byte	0
2835b                 | LR__4314
2835b     63 75 72 73 
2835f     6F 72       | 	byte	"cursor"
28361     00          | 	byte	0
28362                 | LR__4315
28362     63 6C 69 63 
28366     6B          | 	byte	"click"
28367     00          | 	byte	0
28368                 | LR__4316
28368     6F 6E       | 	byte	"on"
2836a     00          | 	byte	0
2836b                 | LR__4317
2836b     31          | 	byte	"1"
2836c     00          | 	byte	0
2836d                 | LR__4318
2836d     6F 66 66    | 	byte	"off"
28370     00          | 	byte	0
28371                 | LR__4319
28371     30          | 	byte	"0"
28372     00          | 	byte	0
28373                 | LR__4320
28373     6D 6F 64 65 | 	byte	"mode"
28377     00          | 	byte	0
28378                 | LR__4321
28378     6D 2E       | 	byte	"m."
2837a     00          | 	byte	0
2837b                 | LR__4322
2837b     61 74 61 72 
2837f     69          | 	byte	"atari"
28380     00          | 	byte	0
28381                 | LR__4323
28381     30          | 	byte	"0"
28382     00          | 	byte	0
28383                 | LR__4324
28383     70 63 5F 61 
28387     6D 62 65 72 | 	byte	"pc_amber"
2838b     00          | 	byte	0
2838c                 | LR__4325
2838c     31          | 	byte	"1"
2838d     00          | 	byte	0
2838e                 | LR__4326
2838e     70 63 5F 67 
28392     72 65 65 6E | 	byte	"pc_green"
28396     00          | 	byte	0
28397                 | LR__4327
28397     32          | 	byte	"2"
28398     00          | 	byte	0
28399                 | LR__4328
28399     70 63 5F 77 
2839d     68 69 74 65 | 	byte	"pc_white"
283a1     00          | 	byte	0
283a2                 | LR__4329
283a2     33          | 	byte	"3"
283a3     00          | 	byte	0
283a4                 | LR__4330
283a4     73 74       | 	byte	"st"
283a6     00          | 	byte	0
283a7                 | LR__4331
283a7     34          | 	byte	"4"
283a8     00          | 	byte	0
283a9                 | LR__4332
283a9                 | 	byte	
283a9     00          | 	byte	0
283aa                 | LR__4333
283aa     6C 6F 61 64 | 	byte	"load"
283ae     00          | 	byte	0
283af                 | LR__4334
283af     73 61 76 65 | 	byte	"save"
283b3     00          | 	byte	0
283b4                 | LR__4335
283b4     62 72 75 6E | 	byte	"brun"
283b8     00          | 	byte	0
283b9                 | LR__4336
283b9     6C 6F 2E    | 	byte	"lo."
283bc     00          | 	byte	0
283bd                 | LR__4337
283bd     73 2E       | 	byte	"s."
283bf     00          | 	byte	0
283c0                 | LR__4338
283c0     62 72 2E    | 	byte	"br."
283c3     00          | 	byte	0
283c4                 | LR__4339
283c4                 | 	byte	
283c4     00          | 	byte	0
283c5                 | LR__4340
283c5                 | 	byte	
283c5     00          | 	byte	0
283c6                 | LR__4341
283c6                 | 	byte	
283c6     00          | 	byte	0
283c7                 | LR__4342
283c7                 | 	byte	
283c7     00          | 	byte	0
283c8                 | LR__4343
283c8     20 55 73 65 
283cc     72 20 66 75 
283d0     6E 63 74 69 
283d4     6F 6E 73 20 
283d8     61 6E 64 20 
283dc     61 72 72 61 
283e0     79 73 20 6E 
283e4     6F 74 20 79 
283e8     65 74 20 69 
283ec     6D 70 6C 65 
283f0     6D 65 6E 74 
283f4     65 64       | 	byte	" User functions and arrays not yet implemented"
283f6     00          | 	byte	0
283f7                 | LR__4344
283f7                 | 	byte	
283f7     00          | 	byte	0
283f8                 | LR__4345
283f8                 | 	byte	
283f8     00          | 	byte	0
283f9                 | LR__4346
283f9     52 65 61 64 
283fd     79          | 	byte	"Ready"
283fe     00          | 	byte	0
283ff                 | LR__4347
283ff     2B          | 	byte	"+"
28400     00          | 	byte	0
28401                 | LR__4348
28401     2D          | 	byte	"-"
28402     00          | 	byte	0
28403                 | LR__4349
28403     6F 72       | 	byte	"or"
28405     00          | 	byte	0
28406                 | LR__4350
28406     78 6F 72    | 	byte	"xor"
28409     00          | 	byte	0
2840a                 | LR__4351
2840a     2A          | 	byte	"*"
2840b     00          | 	byte	0
2840c                 | LR__4352
2840c     2F          | 	byte	"/"
2840d     00          | 	byte	0
2840e                 | LR__4353
2840e     61 6E 64    | 	byte	"and"
28411     00          | 	byte	0
28412                 | LR__4354
28412     64 69 76    | 	byte	"div"
28415     00          | 	byte	0
28416                 | LR__4355
28416     6D 6F 64    | 	byte	"mod"
28419     00          | 	byte	0
2841a                 | LR__4356
2841a     73 68 6C    | 	byte	"shl"
2841d     00          | 	byte	0
2841e                 | LR__4357
2841e     73 68 72    | 	byte	"shr"
28421     00          | 	byte	0
28422                 | LR__4358
28422     5E          | 	byte	"^"
28423     00          | 	byte	0
28424                 | LR__4359
28424     6E 6F 74    | 	byte	"not"
28427     00          | 	byte	0
28428                 | LR__4360
28428     40          | 	byte	"@"
28429     00          | 	byte	0
2842a                 | LR__4361
2842a     3D          | 	byte	"="
2842b     00          | 	byte	0
2842c                 | LR__4362
2842c     3E 3D       | 	byte	">="
2842e     00          | 	byte	0
2842f                 | LR__4363
2842f     3C 3D       | 	byte	"<="
28431     00          | 	byte	0
28432                 | LR__4364
28432     3C          | 	byte	"<"
28433     00          | 	byte	0
28434                 | LR__4365
28434     3E          | 	byte	">"
28435     00          | 	byte	0
28436                 | LR__4366
28436     3C 3E       | 	byte	"<>"
28438     00          | 	byte	0
28439                 | LR__4367
28439     2B 2B       | 	byte	"++"
2843b     00          | 	byte	0
2843c                 | LR__4368
2843c     2D 2D       | 	byte	"--"
2843e     00          | 	byte	0
2843f                 | LR__4369
2843f     2B          | 	byte	"+"
28440     00          | 	byte	0
28441                 | LR__4370
28441     2D          | 	byte	"-"
28442     00          | 	byte	0
28443                 | LR__4371
28443     3D          | 	byte	"="
28444     00          | 	byte	0
28445                 | LR__4372
28445     2C          | 	byte	","
28446     00          | 	byte	0
28447                 | LR__4373
28447     2A          | 	byte	"*"
28448     00          | 	byte	0
28449                 | LR__4374
28449     2F          | 	byte	"/"
2844a     00          | 	byte	0
2844b                 | LR__4375
2844b     3B          | 	byte	";"
2844c     00          | 	byte	0
2844d                 | LR__4376
2844d     22          | 	byte	34
2844e     00          | 	byte	0
2844f                 | LR__4377
2844f     5E          | 	byte	"^"
28450     00          | 	byte	0
28451                 | LR__4378
28451     29          | 	byte	")"
28452     00          | 	byte	0
28453                 | LR__4379
28453     28          | 	byte	"("
28454     00          | 	byte	0
28455                 | LR__4380
28455     3A          | 	byte	":"
28456     00          | 	byte	0
28457                 | LR__4381
28457     20          | 	byte	" "
28458     00          | 	byte	0
28459                 | LR__4382
28459     3E          | 	byte	">"
2845a     00          | 	byte	0
2845b                 | LR__4383
2845b     3C          | 	byte	"<"
2845c     00          | 	byte	0
2845d                 | LR__4384
2845d     3D          | 	byte	"="
2845e     00          | 	byte	0
2845f                 | LR__4385
2845f     62 65 65 70 | 	byte	"beep"
28463     00          | 	byte	0
28464                 | LR__4386
28464     62 2E       | 	byte	"b."
28466     00          | 	byte	0
28467                 | LR__4387
28467     62 6F 78    | 	byte	"box"
2846a     00          | 	byte	0
2846b                 | LR__4388
2846b     62 72 75 6E | 	byte	"brun"
2846f     00          | 	byte	0
28470                 | LR__4389
28470     62 72 2E    | 	byte	"br."
28473     00          | 	byte	0
28474                 | LR__4390
28474     63 69 72 63 
28478     6C 65       | 	byte	"circle"
2847a     00          | 	byte	0
2847b                 | LR__4391
2847b     63 69 2E    | 	byte	"ci."
2847e     00          | 	byte	0
2847f                 | LR__4392
2847f     63 6C 69 63 
28483     6B          | 	byte	"click"
28484     00          | 	byte	0
28485                 | LR__4393
28485     63 6C 73    | 	byte	"cls"
28488     00          | 	byte	0
28489                 | LR__4394
28489     63 6F 6C 6F 
2848d     72          | 	byte	"color"
2848e     00          | 	byte	0
2848f                 | LR__4395
2848f     63 2E       | 	byte	"c."
28491     00          | 	byte	0
28492                 | LR__4396
28492     63 73 61 76 
28496     65          | 	byte	"csave"
28497     00          | 	byte	0
28498                 | LR__4397
28498     63 73 2E    | 	byte	"cs."
2849b     00          | 	byte	0
2849c                 | LR__4398
2849c     63 75 72 73 
284a0     6F 72       | 	byte	"cursor"
284a2     00          | 	byte	0
284a3                 | LR__4399
284a3     64 65 66 73 
284a7     6E 64       | 	byte	"defsnd"
284a9     00          | 	byte	0
284aa                 | LR__4400
284aa     64 65 66 65 
284ae     6E 76       | 	byte	"defenv"
284b0     00          | 	byte	0
284b1                 | LR__4401
284b1     64 65 66 73 
284b5     70 72 69 74 
284b9     65          | 	byte	"defsprite"
284ba     00          | 	byte	0
284bb                 | LR__4402
284bb     64 73 2E    | 	byte	"ds."
284be     00          | 	byte	0
284bf                 | LR__4403
284bf     64 65 67    | 	byte	"deg"
284c2     00          | 	byte	0
284c3                 | LR__4404
284c3     64 69 6D    | 	byte	"dim"
284c6     00          | 	byte	0
284c7                 | LR__4405
284c7     64 69 72    | 	byte	"dir"
284ca     00          | 	byte	0
284cb                 | LR__4406
284cb     64 72 61 77 | 	byte	"draw"
284cf     00          | 	byte	0
284d0                 | LR__4407
284d0     64 72 2E    | 	byte	"dr."
284d3     00          | 	byte	0
284d4                 | LR__4408
284d4     65 6C 73 65 | 	byte	"else"
284d8     00          | 	byte	0
284d9                 | LR__4409
284d9     66 63 69 72 
284dd     63 6C 65    | 	byte	"fcircle"
284e0     00          | 	byte	0
284e1                 | LR__4410
284e1     66 63 2E    | 	byte	"fc."
284e4     00          | 	byte	0
284e5                 | LR__4411
284e5     66 69 6C 6C | 	byte	"fill"
284e9     00          | 	byte	0
284ea                 | LR__4412
284ea     66 69 2E    | 	byte	"fi."
284ed     00          | 	byte	0
284ee                 | LR__4413
284ee     66 6F 6E 74 | 	byte	"font"
284f2     00          | 	byte	0
284f3                 | LR__4414
284f3     66 6F 72    | 	byte	"for"
284f6     00          | 	byte	0
284f7                 | LR__4415
284f7     66 2E       | 	byte	"f."
284f9     00          | 	byte	0
284fa                 | LR__4416
284fa     66 72 61 6D 
284fe     65          | 	byte	"frame"
284ff     00          | 	byte	0
28500                 | LR__4417
28500     66 72 2E    | 	byte	"fr."
28503     00          | 	byte	0
28504                 | LR__4418
28504     67 6F 74 6F | 	byte	"goto"
28508     00          | 	byte	0
28509                 | LR__4419
28509     67 2E       | 	byte	"g."
2850b     00          | 	byte	0
2850c                 | LR__4420
2850c     69 66       | 	byte	"if"
2850e     00          | 	byte	0
2850f                 | LR__4421
2850f     69 6E 6B    | 	byte	"ink"
28512     00          | 	byte	0
28513                 | LR__4422
28513     69 2E       | 	byte	"i."
28515     00          | 	byte	0
28516                 | LR__4423
28516     69 6E 74    | 	byte	"int"
28519     00          | 	byte	0
2851a                 | LR__4424
2851a     6C 69 73 74 | 	byte	"list"
2851e     00          | 	byte	0
2851f                 | LR__4425
2851f     6C 2E       | 	byte	"l."
28521     00          | 	byte	0
28522                 | LR__4426
28522     6C 6F 61 64 | 	byte	"load"
28526     00          | 	byte	0
28527                 | LR__4427
28527     6C 6F 2E    | 	byte	"lo."
2852a     00          | 	byte	0
2852b                 | LR__4428
2852b     6D 6F 64 65 | 	byte	"mode"
2852f     00          | 	byte	0
28530                 | LR__4429
28530     6D 2E       | 	byte	"m."
28532     00          | 	byte	0
28533                 | LR__4430
28533     6D 6F 75 73 
28537     65          | 	byte	"mouse"
28538     00          | 	byte	0
28539                 | LR__4431
28539     6E 65 77    | 	byte	"new"
2853c     00          | 	byte	0
2853d                 | LR__4432
2853d     6E 65 78 74 | 	byte	"next"
28541     00          | 	byte	0
28542                 | LR__4433
28542     6E 2E       | 	byte	"n."
28544     00          | 	byte	0
28545                 | LR__4434
28545     70 61 70 65 
28549     72          | 	byte	"paper"
2854a     00          | 	byte	0
2854b                 | LR__4435
2854b     70 2E       | 	byte	"p."
2854d     00          | 	byte	0
2854e                 | LR__4436
2854e     70 69 6E 66 
28552     6C 6F 61 74 | 	byte	"pinfloat"
28556     00          | 	byte	0
28557                 | LR__4437
28557     70 69 6E 68 
2855b     69          | 	byte	"pinhi"
2855c     00          | 	byte	0
2855d                 | LR__4438
2855d     70 69 6E 6C 
28561     6F          | 	byte	"pinlo"
28562     00          | 	byte	0
28563                 | LR__4439
28563     70 69 6E 73 
28567     74 61 72 74 | 	byte	"pinstart"
2856b     00          | 	byte	0
2856c                 | LR__4440
2856c     70 69 6E 74 
28570     6F 67 67 6C 
28574     65          | 	byte	"pintoggle"
28575     00          | 	byte	0
28576                 | LR__4441
28576     70 69 6E 77 
2857a     72 69 74 65 | 	byte	"pinwrite"
2857e     00          | 	byte	0
2857f                 | LR__4442
2857f     70 6C 61 79 | 	byte	"play"
28583     00          | 	byte	0
28584                 | LR__4443
28584     70 6C 6F 74 | 	byte	"plot"
28588     00          | 	byte	0
28589                 | LR__4444
28589     70 6C 2E    | 	byte	"pl."
2858c     00          | 	byte	0
2858d                 | LR__4445
2858d     70 6F 73 69 
28591     74 69 6F 6E | 	byte	"position"
28595     00          | 	byte	0
28596                 | LR__4446
28596     70 6F 73 2E | 	byte	"pos."
2859a     00          | 	byte	0
2859b                 | LR__4447
2859b     70 72 69 6E 
2859f     74          | 	byte	"print"
285a0     00          | 	byte	0
285a1                 | LR__4448
285a1     3F          | 	byte	"?"
285a2     00          | 	byte	0
285a3                 | LR__4449
285a3     72 61 64    | 	byte	"rad"
285a6     00          | 	byte	0
285a7                 | LR__4450
285a7     72 75 6E    | 	byte	"run"
285aa     00          | 	byte	0
285ab                 | LR__4451
285ab     73 61 76 65 | 	byte	"save"
285af     00          | 	byte	0
285b0                 | LR__4452
285b0     73 2E       | 	byte	"s."
285b2     00          | 	byte	0
285b3                 | LR__4453
285b3     73 70 72 69 
285b7     74 65       | 	byte	"sprite"
285b9     00          | 	byte	0
285ba                 | LR__4454
285ba     73 70 2E    | 	byte	"sp."
285bd     00          | 	byte	0
285be                 | LR__4455
285be     74 68 65 6E | 	byte	"then"
285c2     00          | 	byte	0
285c3                 | LR__4456
285c3     77 61 69 74 
285c7     6D 73       | 	byte	"waitms"
285c9     00          | 	byte	0
285ca                 | LR__4457
285ca     77 61 69 74 
285ce     63 6C 6F 63 
285d2     6B          | 	byte	"waitclock"
285d3     00          | 	byte	0
285d4                 | LR__4458
285d4     77 63 2E    | 	byte	"wc."
285d7     00          | 	byte	0
285d8                 | LR__4459
285d8     77 61 69 74 
285dc     76 62 6C    | 	byte	"waitvbl"
285df     00          | 	byte	0
285e0                 | LR__4460
285e0     77 76 2E    | 	byte	"wv."
285e3     00          | 	byte	0
285e4                 | LR__4461
285e4     77 78 70 69 
285e8     6E          | 	byte	"wxpin"
285e9     00          | 	byte	0
285ea                 | LR__4462
285ea     77 79 70 69 
285ee     6E          | 	byte	"wypin"
285ef     00          | 	byte	0
285f0                 | LR__4463
285f0     61 63 6F 73 | 	byte	"acos"
285f4     00          | 	byte	0
285f5                 | LR__4464
285f5     61 73 69 6E | 	byte	"asin"
285f9     00          | 	byte	0
285fa                 | LR__4465
285fa     61 74 6E    | 	byte	"atn"
285fd     00          | 	byte	0
285fe                 | LR__4466
285fe     63 6F 73    | 	byte	"cos"
28601     00          | 	byte	0
28602                 | LR__4467
28602     67 65 74 70 
28606     69 78 65 6C | 	byte	"getpixel"
2860a     00          | 	byte	0
2860b                 | LR__4468
2860b     67 65 2E    | 	byte	"ge."
2860e     00          | 	byte	0
2860f                 | LR__4469
2860f     67 65 74 74 
28613     69 6D 65    | 	byte	"gettime"
28616     00          | 	byte	0
28617                 | LR__4470
28617     6D 6F 75 73 
2861b     65 6B       | 	byte	"mousek"
2861d     00          | 	byte	0
2861e                 | LR__4471
2861e     6D 6F 75 73 
28622     65 77       | 	byte	"mousew"
28624     00          | 	byte	0
28625                 | LR__4472
28625     6D 6F 75 73 
28629     65 78       | 	byte	"mousex"
2862b     00          | 	byte	0
2862c                 | LR__4473
2862c     6D 6F 75 73 
28630     65 79       | 	byte	"mousey"
28632     00          | 	byte	0
28633                 | LR__4474
28633     70 69 6E 72 
28637     65 61 64    | 	byte	"pinread"
2863a     00          | 	byte	0
2863b                 | LR__4475
2863b     72 64 70 69 
2863f     6E          | 	byte	"rdpin"
28640     00          | 	byte	0
28641                 | LR__4476
28641     72 71 70 69 
28645     6E          | 	byte	"rqpin"
28646     00          | 	byte	0
28647                 | LR__4477
28647     72 6E 64    | 	byte	"rnd"
2864a     00          | 	byte	0
2864b                 | LR__4478
2864b     73 69 6E    | 	byte	"sin"
2864e     00          | 	byte	0
2864f                 | LR__4479
2864f     73 71 72    | 	byte	"sqr"
28652     00          | 	byte	0
28653                 | LR__4480
28653     73 74 69 63 
28657     6B          | 	byte	"stick"
28658     00          | 	byte	0
28659                 | LR__4481
28659     73 74 72 69 
2865d     67          | 	byte	"strig"
2865e     00          | 	byte	0
2865f                 | LR__4482
2865f     74 61 6E    | 	byte	"tan"
28662     00          | 	byte	0
28663                 | LR__4483
28663     61          | 	byte	"a"
28664     00          | 	byte	0
28665                 | LR__4484
28665     7A          | 	byte	"z"
28666     00          | 	byte	0
28667                 | LR__4485
28667     5F          | 	byte	"_"
28668     00          | 	byte	0
28669                 | LR__4486
28669     61          | 	byte	"a"
2866a     00          | 	byte	0
2866b                 | LR__4487
2866b     7A          | 	byte	"z"
2866c     00          | 	byte	0
2866d                 | LR__4488
2866d     30          | 	byte	"0"
2866e     00          | 	byte	0
2866f                 | LR__4489
2866f     39          | 	byte	"9"
28670     00          | 	byte	0
28671                 | LR__4490
28671     5F          | 	byte	"_"
28672     00          | 	byte	0
28673                 | LR__4491
28673     2E          | 	byte	"."
28674     00          | 	byte	0
28675                 | LR__4492
28675     61          | 	byte	"a"
28676     00          | 	byte	0
28677                 | LR__4493
28677     7A          | 	byte	"z"
28678     00          | 	byte	0
28679                 | LR__4494
28679     30          | 	byte	"0"
2867a     00          | 	byte	0
2867b                 | LR__4495
2867b     39          | 	byte	"9"
2867c     00          | 	byte	0
2867d                 | LR__4496
2867d     5F          | 	byte	"_"
2867e     00          | 	byte	0
2867f                 | LR__4497
2867f     24          | 	byte	"$"
28680     00          | 	byte	0
28681                 | LR__4498
28681     25          | 	byte	"%"
28682     00          | 	byte	0
28683                 | LR__4499
28683     21          | 	byte	"!"
28684     00          | 	byte	0
28685                 | LR__4500
28685     30          | 	byte	"0"
28686     00          | 	byte	0
28687                 | LR__4501
28687     39          | 	byte	"9"
28688     00          | 	byte	0
28689                 | LR__4502
28689     2E          | 	byte	"."
2868a     00          | 	byte	0
2868b                 | LR__4503
2868b     24          | 	byte	"$"
2868c     00          | 	byte	0
2868d                 | LR__4504
2868d     25          | 	byte	"%"
2868e     00          | 	byte	0
2868f                 | LR__4505
2868f     2D          | 	byte	"-"
28690     00          | 	byte	0
28691                 | LR__4506
28691     2E          | 	byte	"."
28692     00          | 	byte	0
28693                 | LR__4507
28693     30          | 	byte	"0"
28694     00          | 	byte	0
28695                 | LR__4508
28695     39          | 	byte	"9"
28696     00          | 	byte	0
28697                 | LR__4509
28697     5F          | 	byte	"_"
28698     00          | 	byte	0
28699                 | LR__4510
28699     2E          | 	byte	"."
2869a     00          | 	byte	0
2869b                 | LR__4511
2869b     45          | 	byte	"E"
2869c     00          | 	byte	0
2869d                 | LR__4512
2869d     65          | 	byte	"e"
2869e     00          | 	byte	0
2869f                 | LR__4513
2869f     2D          | 	byte	"-"
286a0     00          | 	byte	0
286a1                 | LR__4514
286a1     2D          | 	byte	"-"
286a2     00          | 	byte	0
286a3                 | LR__4515
286a3     65          | 	byte	"e"
286a4     00          | 	byte	0
286a5                 | LR__4516
286a5     2E          | 	byte	"."
286a6     00          | 	byte	0
286a7                 | LR__4517
286a7     45          | 	byte	"E"
286a8     00          | 	byte	0
286a9                 | LR__4518
286a9     65          | 	byte	"e"
286aa     00          | 	byte	0
286ab                 | LR__4519
286ab     30          | 	byte	"0"
286ac     00          | 	byte	0
286ad                 | LR__4520
286ad     39          | 	byte	"9"
286ae     00          | 	byte	0
286af                 | LR__4521
286af     24          | 	byte	"$"
286b0     00          | 	byte	0
286b1                 | LR__4522
286b1     25          | 	byte	"%"
286b2     00          | 	byte	0
286b3                 | LR__4523
286b3     2D          | 	byte	"-"
286b4     00          | 	byte	0
286b5                 | LR__4524
286b5     30          | 	byte	"0"
286b6     00          | 	byte	0
286b7                 | LR__4525
286b7     39          | 	byte	"9"
286b8     00          | 	byte	0
286b9                 | LR__4526
286b9     5F          | 	byte	"_"
286ba     00          | 	byte	0
286bb                 | LR__4527
286bb     30          | 	byte	"0"
286bc     00          | 	byte	0
286bd                 | LR__4528
286bd     39          | 	byte	"9"
286be     00          | 	byte	0
286bf                 | LR__4529
286bf     5F          | 	byte	"_"
286c0     00          | 	byte	0
286c1                 | LR__4530
286c1     22          | 	byte	34
286c2     00          | 	byte	0
286c3                 | LR__4531
286c3     22          | 	byte	34
286c4     00          | 	byte	0
286c5                 | LR__4532
286c5     44 69 6D 3A 
286c9     20 61 74 20 
286cd     6C 69 6E 65 
286d1     20          | 	byte	"Dim: at line "
286d2     00          | 	byte	0
286d3                 | LR__4533
286d3     3A 20 77 61 
286d7     72 6E 69 6E 
286db     67 3A 20 74 
286df     68 65 20 76 
286e3     61 72 69 61 
286e7     62 6C 65 20 
286eb     65 78 69 73 
286ef     74 65 64 2E | 	byte	": warning: the variable existed."
286f3     00          | 	byte	0
286f4                 | LR__4534
286f4     28          | 	byte	"("
286f5     00          | 	byte	0
286f6                 | LR__4535
286f6     61 73       | 	byte	"as"
286f8     00          | 	byte	0
286f9                 | LR__4536
286f9     61 73       | 	byte	"as"
286fb     00          | 	byte	0
286fc                 | LR__4537
286fc     2C          | 	byte	","
286fd     00          | 	byte	0
286fe                 | LR__4538
286fe     29          | 	byte	")"
286ff     00          | 	byte	0
28700                 | LR__4539
28700     29          | 	byte	")"
28701     00          | 	byte	0
28702                 | LR__4540
28702     61 73       | 	byte	"as"
28704     00          | 	byte	0
28705                 | LR__4541
28705     62 79 74 65 | 	byte	"byte"
28709     00          | 	byte	0
2870a                 | LR__4542
2870a     75 62 79 74 
2870e     65          | 	byte	"ubyte"
2870f     00          | 	byte	0
28710                 | LR__4543
28710     73 68 6F 72 
28714     74          | 	byte	"short"
28715     00          | 	byte	0
28716                 | LR__4544
28716     75 73 68 6F 
2871a     72 74       | 	byte	"ushort"
2871c     00          | 	byte	0
2871d                 | LR__4545
2871d     6C 6F 6E 67 | 	byte	"long"
28721     00          | 	byte	0
28722                 | LR__4546
28722     69 6E 74 65 
28726     67 65 72    | 	byte	"integer"
28729     00          | 	byte	0
2872a                 | LR__4547
2872a     75 6C 6F 6E 
2872e     67          | 	byte	"ulong"
2872f     00          | 	byte	0
28730                 | LR__4548
28730     69 6E 74 36 
28734     34          | 	byte	"int64"
28735     00          | 	byte	0
28736                 | LR__4549
28736     75 69 6E 74 
2873a     36 34       | 	byte	"uint64"
2873c     00          | 	byte	0
2873d                 | LR__4550
2873d     73 69 6E 67 
28741     6C 65       | 	byte	"single"
28743     00          | 	byte	0
28744                 | LR__4551
28744     64 6F 75 62 
28748     6C 65       | 	byte	"double"
2874a     00          | 	byte	0
2874b                 | LR__4552
2874b     73 74 72 69 
2874f     6E 67       | 	byte	"string"
28751     00          | 	byte	0
28752                 | LR__4553
28752     74 6F       | 	byte	"to"
28754     00          | 	byte	0
28755                 | LR__4554
28755     73 74 65 70 | 	byte	"step"
28759     00          | 	byte	0
2875a                 | LR__4555
2875a     73 74 2E    | 	byte	"st."
2875d     00          | 	byte	0
2875e                 | LR__4556
2875e     57 65 20 68 
28762     61 76 65 20 
28766     61 20 73 6C 
2876a     6F 77 20 67 
2876e     6F 74 6F 2C 
28772     20 74 6F 64 
28776     6F 20 20    | 	byte	"We have a slow goto, todo  "
28779     00          | 	byte	0
2877a                 | LR__4557
2877a     6E 6F 6E 61 
2877e     6D 65 2E 62 
28782     61 73       | 	byte	"noname.bas"
28784     00          | 	byte	0
28785                 | LR__4558
28785                 | 	byte	
28785     00          | 	byte	0
28786                 | LR__4559
28786     6E 6F 6E 61 
2878a     6D 65 2E 62 
2878e     61 73       | 	byte	"noname.bas"
28790     00          | 	byte	0
28791                 | LR__4560
28791     2F          | 	byte	"/"
28792     00          | 	byte	0
28793                 | LR__4561
28793                 | 	byte	
28793     00          | 	byte	0
28794                 | LR__4562
28794                 | 	byte	
28794     00          | 	byte	0
28795                 | LR__4563
28795     6E 6F 6E 61 
28799     6D 65 2E 62 
2879d     61 73       | 	byte	"noname.bas"
2879f     00          | 	byte	0
287a0                 | LR__4564
287a0     2F          | 	byte	"/"
287a1     00          | 	byte	0
287a2                 | LR__4565
287a2     53 79 73 74 
287a6     65 6D 20 65 
287aa     72 72 6F 72 
287ae     20          | 	byte	"System error "
287af     00          | 	byte	0
287b0                 | LR__4566
287b0     3A 20       | 	byte	": "
287b2     00          | 	byte	0
287b3                 | LR__4567
287b3     2F          | 	byte	"/"
287b4     00          | 	byte	0
287b5                 | LR__4568
287b5     30          | 	byte	"0"
287b6     00          | 	byte	0
287b7                 | LR__4569
287b7     39          | 	byte	"9"
287b8     00          | 	byte	0
287b9                 | LR__4570
287b9                 | 	byte	
287b9     00          | 	byte	0
287ba                 | LR__4571
287ba     53 74 6F 70 
287be     70 65 64 20 
287c2     61 74 20 6C 
287c6     69 6E 65 20 | 	byte	"Stopped at line "
287ca     00          | 	byte	0
287cb                 | LR__4572
287cb                 | 	byte	
287cb     00          | 	byte	0
287cc                 | LR__4573
287cc                 | 	byte	
287cc     00          | 	byte	0
287cd                 | LR__4574
287cd     2F 73 64 2F 
287d1     6D 65 64 69 
287d5     61 2F 68 2F | 	byte	"/sd/media/h/"
287d9     00          | 	byte	0
287da                 | LR__4575
287da     53 79 73 74 
287de     65 6D 20 65 
287e2     72 72 6F 72 
287e6     20          | 	byte	"System error "
287e7     00          | 	byte	0
287e8                 | LR__4576
287e8     3A 20       | 	byte	": "
287ea     00          | 	byte	0
287eb                 | LR__4577
287eb                 | 	byte	
287eb     00          | 	byte	0
287ec                 | LR__4578
287ec                 | 	byte	
287ec     00          | 	byte	0
287ed                 | LR__4579
287ed     2F 73 64 2F 
287f1     6D 65 64 69 
287f5     61 2F 73 2F | 	byte	"/sd/media/s/"
287f9     00          | 	byte	0
287fa                 | LR__4580
287fa     53 79 73 74 
287fe     65 6D 20 65 
28802     72 72 6F 72 
28806     20          | 	byte	"System error "
28807     00          | 	byte	0
28808                 | LR__4581
28808     3A 20       | 	byte	": "
2880a     00          | 	byte	0
2880b                 | LR__4582
2880b     45 72 72 6F 
2880f     72 20       | 	byte	"Error "
28811     00          | 	byte	0
28812                 | LR__4583
28812     3A 20       | 	byte	": "
28814     00          | 	byte	0
28815                 | LR__4584
28815                 | 	byte	
28815     00          | 	byte	0
28816                 | LR__4585
28816     72 6E 64 3A 
2881a     20          | 	byte	"rnd: "
2881b     00          | 	byte	0
2881c                 | LR__4586
2881c     72 6E 64 3A 
28820     20          | 	byte	"rnd: "
28821     00          | 	byte	0
28822                 | LR__4587
28822     73 69 6E 3A 
28826     20          | 	byte	"sin: "
28827     00          | 	byte	0
28828                 | LR__4588
28828     63 6F 73 3A 
2882c     20          | 	byte	"cos: "
2882d     00          | 	byte	0
2882e                 | LR__4589
2882e     74 61 6E 3A 
28832     20          | 	byte	"tan: "
28833     00          | 	byte	0
28834                 | LR__4590
28834     61 73 69 6E 
28838     3A 20       | 	byte	"asin: "
2883a     00          | 	byte	0
2883b                 | LR__4591
2883b     61 63 6F 73 
2883f     3A 20       | 	byte	"acos: "
28841     00          | 	byte	0
28842                 | LR__4592
28842     61 74 6E 3A 
28846     20          | 	byte	"atn: "
28847     00          | 	byte	0
28848                 | LR__4593
28848     73 71 72 3A 
2884c     20          | 	byte	"sqr: "
2884d     00          | 	byte	0
2884e                 | LR__4594
2884e     73 74 69 63 
28852     6B 3A 20    | 	byte	"stick: "
28855     00          | 	byte	0
28856                 | LR__4595
28856     73 74 72 69 
2885a     67 3A 20    | 	byte	"strig: "
2885d     00          | 	byte	0
2885e                 | LR__4596
2885e     67 65 74 70 
28862     69 78 65 6C 
28866     3A 20       | 	byte	"getpixel: "
28868     00          | 	byte	0
28869                 | LR__4597
28869                 | 	byte	
28869     00          | 	byte	0
2886a                 | LR__4598
2886a     2F 73 64 2F 
2886e     62 61 73    | 	byte	"/sd/bas"
28871     00          | 	byte	0
28872                 | LR__4599
28872     57 6F 72 6B 
28876     69 6E 67 20 
2887a     64 69 72 65 
2887e     63 74 6F 72 
28882     79 3A 20    | 	byte	"Working directory: "
28885     00          | 	byte	0
28886                 | LR__4600
28886     2A          | 	byte	"*"
28887     00          | 	byte	0
28888                 | LR__4601
28888                 | 	byte	
28888     00          | 	byte	0
28889                 | LR__4602
28889     5B 64 69 72 
2888d     5D 20       | 	byte	"[dir] "
2888f     00          | 	byte	0
28890                 | LR__4603
28890     2A          | 	byte	"*"
28891     00          | 	byte	0
28892                 | LR__4604
28892                 | 	byte	
28892     00          | 	byte	0
28893                 | LR__4605
28893     2D 2D 2D 2D 
28897     2D 6D 6F 72 
2889b     65 2C 20 70 
2889f     72 65 73 73 
288a3     20 61 6E 79 
288a7     20 6B 65 79 | 	byte	"-----more, press any key"
288ab     00          | 	byte	0
288ac                 | LR__4606
288ac     20 20 20 20 
      ...             
288c4     20 20 20 20 
288c8     20          | 	byte	"                             "
288c9     00          | 	byte	0
288ca                 | LR__4607
288ca     2F          | 	byte	"/"
288cb     00          | 	byte	0
288cc                 | LR__4608
288cc     2F 73 64 2F 
288d0     62 69 6E 2F | 	byte	"/sd/bin/"
288d4     00          | 	byte	0
288d5                 | LR__4609
288d5     53 79 73 74 
288d9     65 6D 20 65 
288dd     72 72 6F 72 
288e1     20          | 	byte	"System error "
288e2     00          | 	byte	0
288e3                 | LR__4610
288e3     3A 20       | 	byte	": "
288e5     00          | 	byte	0
288e6                 | LR__4611
288e6                 | 	byte	
288e6     00          | 	byte	0
288e7                 | LR__4612
288e7     45 78 70 65 
288eb     63 74 65 64 
288ef     20 6E 75 6D 
288f3     62 65 72 2C 
288f7     20 67 6F 74 
288fb     20 73 6F 6D 
288ff     65 74 68 69 
28903     6E 67 20 65 
28907     6C 73 65 2E | 	byte	"Expected number, got something else."
2890b     00          | 	byte	0
2890c                 | LR__4613
2890c     43 61 6E 6E 
28910     6F 74 20 61 
28914     64 64 20 61 
28918     20 6E 75 6D 
2891c     62 65 72 20 
28920     74 6F 20 61 
28924     20 73 74 72 
28928     69 6E 67 2E | 	byte	"Cannot add a number to a string."
2892c     00          | 	byte	0
2892d                 | LR__4614
2892d     43 61 6E 6E 
28931     6F 74 20 73 
28935     75 62 73 74 
28939     72 61 63 74 
2893d     20 73 74 72 
28941     69 6E 67 73 
28945     2E          | 	byte	"Cannot substract strings."
28946     00          | 	byte	0
28947                 | LR__4615
28947     55 6E 6B 6E 
2894b     6F 77 6E 20 
2894f     65 72 72 6F 
28953     72 20 77 68 
28957     69 6C 65 20 
2895b     61 64 64 69 
2895f     6E 67 2E    | 	byte	"Unknown error while adding."
28962     00          | 	byte	0
28963                 | LR__4616
28963     55 6E 6B 6E 
28967     6F 77 6E 20 
2896b     65 72 72 6F 
2896f     72 20 77 68 
28973     69 6C 65 20 
28977     73 75 62 73 
2897b     74 72 61 63 
2897f     74 69 6E 67 
28983     2E          | 	byte	"Unknown error while substracting."
28984     00          | 	byte	0
28985                 | LR__4617
28985     43 61 6E 6E 
28989     6F 74 20 64 
2898d     6F 20 6C 6F 
28991     67 69 63 20 
28995     6F 70 65 72 
28999     61 74 69 6F 
2899d     6E 20 6F 6E 
289a1     20 73 74 72 
289a5     69 6E 67 20 
289a9     6F 72 20 66 
289ad     6C 6F 61 74 
289b1     2E          | 	byte	"Cannot do logic operation on string or float."
289b2     00          | 	byte	0
289b3                 | LR__4618
289b3     55 6E 6B 6E 
289b7     6F 77 6E 20 
289bb     65 72 72 6F 
289bf     72 20 77 68 
289c3     69 6C 65 20 
289c7     64 6F 69 6E 
289cb     67 20 6C 6F 
289cf     67 69 63 20 
289d3     6F 70 65 72 
289d7     61 74 69 6F 
289db     6E 2E       | 	byte	"Unknown error while doing logic operation."
289dd     00          | 	byte	0
289de                 | LR__4619
289de     43 61 6E 6E 
289e2     6F 74 20 6D 
289e6     75 6C 74 69 
289ea     70 6C 79 20 
289ee     73 74 72 69 
289f2     6E 67 73 2E | 	byte	"Cannot multiply strings."
289f6     00          | 	byte	0
289f7                 | LR__4620
289f7     55 6E 6B 6E 
289fb     6F 77 6E 20 
289ff     65 72 72 6F 
28a03     72 20 77 68 
28a07     69 6C 65 20 
28a0b     6D 75 6C 74 
28a0f     69 70 6C 79 
28a13     69 6E 67 2E | 	byte	"Unknown error while multiplying."
28a17     00          | 	byte	0
28a18                 | LR__4621
28a18     43 61 6E 6E 
28a1c     6F 74 20 64 
28a20     69 76 69 64 
28a24     65 20 73 74 
28a28     72 69 6E 67 
28a2c     73 2E       | 	byte	"Cannot divide strings."
28a2e     00          | 	byte	0
28a2f                 | LR__4622
28a2f     55 6E 6B 6E 
28a33     6F 77 6E 20 
28a37     65 72 72 6F 
28a3b     72 20 77 68 
28a3f     69 6C 65 20 
28a43     64 69 76 69 
28a47     64 69 6E 67 
28a4b     2E          | 	byte	"Unknown error while dividing."
28a4c     00          | 	byte	0
28a4d                 | LR__4623
28a4d     43 61 6E 6E 
28a51     6F 74 20 63 
28a55     6F 6D 70 75 
28a59     74 65 20 61 
28a5d     20 70 6F 77 
28a61     65 72 20 6F 
28a65     66 20 61 20 
28a69     73 74 72 69 
28a6d     6E 67 2E    | 	byte	"Cannot compute a power of a string."
28a70     00          | 	byte	0
28a71                 | LR__4624
28a71     55 6E 6B 6E 
28a75     6F 77 6E 20 
28a79     65 72 72 6F 
28a7d     72 20 77 68 
28a81     69 6C 65 20 
28a85     63 6F 6D 70 
28a89     75 74 69 6E 
28a8d     67 20 61 20 
28a91     70 6F 77 65 
28a95     72 2E       | 	byte	"Unknown error while computing a power."
28a97     00          | 	byte	0
28a98                 | LR__4625
28a98     52 69 67 68 
28a9c     74 20 70 61 
28aa0     72 65 6E 74 
28aa4     68 65 73 69 
28aa8     73 20 65 78 
28aac     70 65 63 74 
28ab0     65 64 2E    | 	byte	"Right parenthesis expected."
28ab3     00          | 	byte	0
28ab4                 | LR__4626
28ab4     45 78 70 65 
28ab8     63 74 65 64 
28abc     20 73 74 72 
28ac0     69 6E 67 2E | 	byte	"Expected string."
28ac4     00          | 	byte	0
28ac5                 | LR__4627
28ac5     45 78 70 65 
28ac9     63 74 65 64 
28acd     20 66 6C 6F 
28ad1     61 74 2E    | 	byte	"Expected float."
28ad4     00          | 	byte	0
28ad5                 | LR__4628
28ad5     45 78 70 65 
28ad9     63 74 65 64 
28add     20 75 6E 73 
28ae1     69 67 6E 65 
28ae5     64 20 69 6E 
28ae9     74 65 67 65 
28aed     72 2E       | 	byte	"Expected unsigned integer."
28aef     00          | 	byte	0
28af0                 | LR__4629
28af0     45 78 70 65 
28af4     63 74 65 64 
28af8     20 69 6E 74 
28afc     65 67 65 72 
28b00     2E          | 	byte	"Expected integer."
28b01     00          | 	byte	0
28b02                 | LR__4630
28b02     4E 6F 20 6D 
28b06     6F 72 65 20 
28b0a     76 61 72 69 
28b0e     61 62 6C 65 
28b12     20 73 6C 6F 
28b16     74 73 2E    | 	byte	"No more variable slots."
28b19     00          | 	byte	0
28b1a                 | LR__4631
28b1a     56 61 72 69 
28b1e     61 62 6C 65 
28b22     20 6E 6F 74 
28b26     20 66 6F 75 
28b2a     6E 64 2E    | 	byte	"Variable not found."
28b2d     00          | 	byte	0
28b2e                 | LR__4632
28b2e     43 6F 6D 6D 
28b32     61 20 65 78 
28b36     70 65 63 74 
28b3a     65 64 2E    | 	byte	"Comma expected."
28b3d     00          | 	byte	0
28b3e                 | LR__4633
28b3e     43 6F 6D 6D 
28b42     61 20 6F 72 
28b46     20 73 65 6D 
28b4a     69 63 6F 6C 
28b4e     6F 6E 20 65 
28b52     78 70 65 63 
28b56     74 65 64 2E | 	byte	"Comma or semicolon expected."
28b5a     00          | 	byte	0
28b5b                 | LR__4634
28b5b     55 6E 6B 6E 
28b5f     6F 77 6E 20 
28b63     63 6F 6D 6D 
28b67     61 6E 64 2E | 	byte	"Unknown command."
28b6b     00          | 	byte	0
28b6c                 | LR__4635
28b6c     53 74 61 63 
28b70     6B 20 75 6E 
28b74     64 65 72 66 
28b78     6C 6F 77 2E | 	byte	"Stack underflow."
28b7c     00          | 	byte	0
28b7d                 | LR__4636
28b7d     43 61 6E 6E 
28b81     6F 74 20 65 
28b85     78 65 63 75 
28b89     74 65 20 67 
28b8d     6F 74 6F 20 
28b91     69 6E 20 74 
28b95     68 65 20 69 
28b99     6D 6D 65 64 
28b9d     69 61 74 65 
28ba1     20 6D 6F 64 
28ba5     65 2E       | 	byte	"Cannot execute goto in the immediate mode."
28ba7     00          | 	byte	0
28ba8                 | LR__4637
28ba8     43 61 6E 6E 
28bac     6F 74 20 6C 
28bb0     6F 61 64 20 
28bb4     66 72 6F 6D 
28bb8     20 74 68 69 
28bbc     73 20 66 69 
28bc0     6C 65 2E    | 	byte	"Cannot load from this file."
28bc3     00          | 	byte	0
28bc4                 | LR__4638
28bc4     54 68 65 20 
28bc8     70 72 6F 67 
28bcc     72 61 6D 20 
28bd0     69 73 20 65 
28bd4     6D 70 74 79 
28bd8     2E          | 	byte	"The program is empty."
28bd9     00          | 	byte	0
28bda                 | LR__4639
28bda     49 66 20 61 
28bde     66 74 65 72 
28be2     20 69 66 2E | 	byte	"If after if."
28be6     00          | 	byte	0
28be7                 | LR__4640
28be7     45 6D 70 74 
28beb     79 20 65 78 
28bef     70 72 65 73 
28bf3     73 69 6F 6E 
28bf7     2E          | 	byte	"Empty expression."
28bf8     00          | 	byte	0
28bf9                 | LR__4641
28bf9     53 74 72 69 
28bfd     6E 67 20 65 
28c01     78 70 65 63 
28c05     74 65 64 2E | 	byte	"String expected."
28c09     00          | 	byte	0
28c0a                 | LR__4642
28c0a     49 6E 74 65 
28c0e     72 70 72 65 
28c12     74 65 72 20 
28c16     69 6E 74 65 
28c1a     72 6E 61 6C 
28c1e     20 65 72 72 
28c22     6F 72 2E    | 	byte	"Interpreter internal error."
28c25     00          | 	byte	0
28c26                 | LR__4643
28c26     45 78 70 65 
28c2a     63 74 65 64 
28c2e     20 61 73 73 
28c32     69 67 6E 2E | 	byte	"Expected assign."
28c36     00          | 	byte	0
28c37                 | LR__4644
28c37     45 78 70 65 
28c3b     63 74 65 64 
28c3f     20 27 74 6F 
28c43     27 2E       | 	byte	"Expected 'to'."
28c45     00          | 	byte	0
28c46                 | LR__4645
28c46     45 78 70 65 
28c4a     63 74 65 64 
28c4e     20 69 6E 74 
28c52     65 67 65 72 
28c56     20 76 61 72 
28c5a     69 61 62 6C 
28c5e     65 2E       | 	byte	"Expected integer variable."
28c60     00          | 	byte	0
28c61                 | LR__4646
28c61     55 6E 69 6E 
28c65     69 74 69 61 
28c69     6C 69 7A 65 
28c6d     64 20 76 61 
28c71     72 69 61 62 
28c75     6C 65 20 69 
28c79     6E 20 27 6E 
28c7d     65 78 74 27 
28c81     2C 20 75 73 
28c85     65 20 27 66 
28c89     6F 72 27 20 
28c8d     62 65 66 6F 
28c91     72 65 2E    | 	byte	"Uninitialized variable in 'next', use 'for' before."
28c94     00          | 	byte	0
28c95                 | LR__4647
28c95     4E 6F 20 6D 
28c99     6F 72 65 20 
28c9d     73 6C 6F 74 
28ca1     73 20 66 6F 
28ca5     72 20 27 66 
28ca9     6F 72 27 2E | 	byte	"No more slots for 'for'."
28cad     00          | 	byte	0
28cae                 | LR__4648
28cae     27 4E 65 78 
28cb2     74 27 20 64 
28cb6     6F 65 73 6E 
28cba     27 74 20 6D 
28cbe     61 74 63 68 
28cc2     20 27 66 6F 
28cc6     72 27 2E    | 	byte	"'Next' doesn't match 'for'."
28cc9     00          | 	byte	0
28cca                 | LR__4649
28cca     27 47 6F 74 
28cce     6F 27 20 74 
28cd2     61 72 67 65 
28cd6     74 20 6C 69 
28cda     6E 65 20 6E 
28cde     6F 74 20 66 
28ce2     6F 75 6E 64 
28ce6     2E          | 	byte	"'Goto' target line not found."
28ce7     00          | 	byte	0
28ce8                 | LR__4650
28ce8     42 61 64 20 
28cec     6E 75 6D 62 
28cf0     65 72 20 6F 
28cf4     66 20 70 61 
28cf8     72 61 6D 65 
28cfc     74 65 72 73 | 	byte	"Bad number of parameters"
28d00     00          | 	byte	0
28d01                 | LR__4651
28d01     46 75 6E 63 
28d05     74 69 6F 6E 
28d09     20 75 6E 64 
28d0d     65 66 69 6E 
28d11     65 64 20 66 
28d15     6F 72 20 73 
28d19     74 72 69 6E 
28d1d     67 73       | 	byte	"Function undefined for strings"
28d1f     00          | 	byte	0
28d20                 | LR__4652
28d20     42 61 64 20 
28d24     70 61 72 61 
28d28     6D 65 74 65 
28d2c     72 2E       | 	byte	"Bad parameter."
28d2e     00          | 	byte	0
28d2f                 | LR__4653
28d2f     43 61 6E 6E 
28d33     6F 74 20 64 
28d37     65 63 6C 61 
28d3b     72 65 20 61 
28d3f     6E 20 61 72 
28d43     72 61 79 3A 
28d47     20 74 68 65 
28d4b     20 76 61 72 
28d4f     69 61 62 6C 
28d53     65 20 65 78 
28d57     69 73 74 73 
28d5b     2E          | 	byte	"Cannot declare an array: the variable exists."
28d5c     00          | 	byte	0
28d5d                 | LR__4654
28d5d     45 78 70 65 
28d61     63 74 65 64 
28d65     20 27 28 27 
28d69     2E          | 	byte	"Expected '('."
28d6a     00          | 	byte	0
28d6b                 | LR__4655
28d6b     45 78 70 65 
28d6f     63 74 65 64 
28d73     20 27 29 27 
28d77     20 6F 72 20 
28d7b     27 2C 27 2E | 	byte	"Expected ')' or ','."
28d7f     00          | 	byte	0
28d80                 | LR__4656
28d80     4E 6F 20 6D 
28d84     6F 72 65 20 
28d88     74 68 61 6E 
28d8c     20 33 20 64 
28d90     69 6D 65 6E 
28d94     73 69 6F 6E 
28d98     73 20 73 75 
28d9c     70 70 6F 72 
28da0     74 65 64    | 	byte	"No more than 3 dimensions supported"
28da3     00          | 	byte	0
28da4                 | LR__4657
28da4     56 61 72 69 
28da8     61 62 6C 65 
28dac     20 6E 61 6D 
28db0     65 20 65 78 
28db4     70 65 63 74 
28db8     65 64       | 	byte	"Variable name expected"
28dba     00          | 	byte	0
28dbb                 | LR__4658
28dbb     54 79 70 65 
28dbf     20 6E 61 6D 
28dc3     65 20 65 78 
28dc7     70 65 63 74 
28dcb     65 64       | 	byte	"Type name expected"
28dcd     00          | 	byte	0
28dce                 | LR__4659
28dce     54 79 70 65 
28dd2     20 6E 6F 74 
28dd6     20 73 75 70 
28dda     70 6F 72 74 
28dde     65 64 20 79 
28de2     65 74       | 	byte	"Type not supported yet"
28de4     00          | 	byte	0
28de5                 | LR__4660
28de5     41 72 72 61 
28de9     79 20 69 6E 
28ded     64 65 78 20 
28df1     6F 75 74 20 
28df5     6F 66 20 62 
28df9     6F 75 6E 64 | 	byte	"Array index out of bound"
28dfd     00          | 	byte	0
28dfe                 | LR__4661
28dfe     45 72 72 6F 
28e02     72 20       | 	byte	"Error "
28e04     00          | 	byte	0
28e05                 | LR__4662
28e05     3A 20       | 	byte	": "
28e07     00          | 	byte	0
28e08                 | LR__4663
28e08     2F 73 64    | 	byte	"/sd"
28e0b     00          | 	byte	0
28e0c                 | LR__4664
28e0c     2F 73 64 2F 
28e10     62 61 73    | 	byte	"/sd/bas"
28e13     00          | 	byte	0
28e14                 | LR__4665
28e14     2F 73 64 2F 
28e18     62 61 73    | 	byte	"/sd/bas"
28e1b     00          | 	byte	0
28e1c                 | LR__4666
28e1c     20 42 41 53 
28e20     49 43 20 62 
28e24     79 74 65 73 
28e28     20 66 72 65 
28e2c     65          | 	byte	" BASIC bytes free"
28e2d     00          | 	byte	0
28e2e                 | LR__4667
28e2e     52 65 61 64 
28e32     79          | 	byte	"Ready"
28e33     00          | 	byte	0
28e34                 | LR__4668
28e34     20          | 	byte	" "
28e35     00          | 	byte	0
28e36                 | LR__4669
28e36     20          | 	byte	" "
28e37     00          | 	byte	0
28e38                 | LR__4670
28e38                 | 	byte	
28e38     00          | 	byte	0
28e39                 | LR__4671
28e39                 | 	byte	
28e39     00          | 	byte	0
28e3a     00 00       | 	alignl
28e3c                 | _dat_
28e3c     00 00 00 00 
28e40     00 00 00 00 
28e44     00 00 00 00 
28e48     00 00 00 00 | 	byte	$00[16]
28e4c     61 41 17 0E 
28e50     62 42 00 00 
28e54     63 43 19 10 
28e58     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
28e5c     65 45 18 0F 
28e60     66 46 00 00 
28e64     67 47 00 00 
28e68     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
28e6c     69 49 00 00 
28e70     6A 4A 00 00 
28e74     6B 4B 00 00 
28e78     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
28e7c     6D 4D 00 00 
28e80     6E 4E 1A 11 
28e84     6F 4F 1E 15 
28e88     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
28e8c     71 51 00 00 
28e90     72 52 00 00 
28e94     73 53 1B 12 
28e98     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
28e9c     75 55 00 00 
28ea0     76 56 00 00 
28ea4     77 57 00 00 
28ea8     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
28eac     79 59 00 00 
28eb0     7A 5A 1D 14 
28eb4     31 21 04 00 
28eb8     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
28ebc     33 23 06 00 
28ec0     34 24 07 00 
28ec4     35 25 08 00 
28ec8     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
28ecc     37 26 0A 00 
28ed0     38 2A 0B 00 
28ed4     39 28 0C 00 
28ed8     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
28edc     8D 8D 00 00 
28ee0     9B 9B 00 00 
28ee4     88 88 00 00 
28ee8     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
28eec     20 20 00 00 
28ef0     2D 5F 00 00 
28ef4     3D 2B 00 00 
28ef8     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
28efc     5D 7D 00 00 
28f00     5C 7C 00 00 
28f04     23 7E 00 00 
28f08     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
28f0c     27 22 00 00 
28f10     60 7E 03 00 
28f14     2C 3C 00 00 
28f18     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
28f1c     2F 3F 00 00 
28f20     B9 B9 00 00 
28f24     BA 00 00 00 
28f28     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
28f2c     BC 00 00 00 
28f30     BD 00 00 00 
28f34     BE 00 00 00 
28f38     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
28f3c     C0 00 00 00 
28f40     C1 00 00 00 
28f44     C2 00 00 00 
28f48     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
28f4c     C4 00 00 00 
28f50     C5 00 00 00 
28f54     C6 00 00 00 
28f58     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
28f5c     C8 00 00 00 
28f60     C9 00 00 00 
28f64     CA 00 00 00 
28f68     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
28f6c     7F 7F 00 00 
28f70     CC 00 00 00 
28f74     CD 00 00 00 
28f78     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
28f7c     CF 00 00 00 
28f80     D0 00 00 00 
28f84     D1 00 00 00 
28f88     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
28f8c     2F 2F 00 00 
28f90     2A 2A 00 00 
28f94     2D 2D 00 00 
28f98     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
28f9c     8D 8D 00 00 
28fa0     31 31 00 00 
28fa4     32 32 00 00 
28fa8     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
28fac     34 34 00 00 
28fb0     35 35 00 00 
28fb4     36 36 00 00 
28fb8     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
28fbc     38 38 00 00 
28fc0     39 39 00 00 
28fc4     30 30 00 00 
28fc8     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
28fcc     5C 7C 00 00 
28fd0     00 00 00 00 
28fd4     00 00 00 00 
28fd8     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
28fdc     00 00 00 00 
      ...             
29034     00 00 00 00 
29038     00 00 00 00 | 	byte	$00[96]
2903c     2B 00 A6 F2 
29040     24 A7 09 80 
29044     5B 88 4D 89 
29048     80 88 A5 88 | atari_spl file "atari.spl"
2904c     6D 88 B8 88 
29050     80 88 CB 88 
29054     92 88 A5 88 
29058     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
2905c     A5 88 CA 88 
29060     A6 88 DD 88 
29064     B8 88 AB 89 
29068     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
2906c     C8 AD C6 F1 
29070     91 06 B6 FF 
29074     13 00 4A 00 
29078     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
2907c     5D 00 5E 00 
29080     5D 00 5E 00 
29084     5E 00 5D 00 
29088     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
2908c     38 00 83 00 
29090     25 00 83 00 
29094     C3 FE D1 04 
29098     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
2909c     48 88 38 85 
290a0     41 8A CB 88 
290a4     28 89 B8 88 
290a8     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
290ac     15 89 03 89 
290b0     02 89 15 89 
290b4     16 89 15 89 
290b8     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
290bc     15 89 3A 89 
290c0     72 89 E3 89 
290c4     52 83 AD 97 
290c8     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
290cc     0C 02 B6 FF 
290d0     E1 00 A8 00 
290d4     F3 00 A8 00 
290d8     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
290dc     CE 00 CD 00 
290e0     CD 00 BA 00 
290e4     E1 00 BB 00 
290e8     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
290ec     DF 00 C9 FF 
290f0     E6 01 B6 06 
290f4     EE DD 8D 98 
290f8     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
290fc     97 89 73 89 
29100     3B 89 60 89 
29104     60 89 60 89 
29108     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
2910c     73 89 72 89 
29110     85 89 73 89 
29114     AA 89 60 89 
29118     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
2911c     E8 8A 18 86 
29120     92 88 A5 C2 
29124     E0 00 C3 05 
29128     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
2912c     F2 00 64 01 
29130     06 01 3E 01 
29134     2B 01 2B 01 
29138     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
2913c     2B 01 2A 01 
29140     2B 01 2B 01 
29144     2B 01 18 01 
29148     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
2914c     39 07 61 F3 
29150     C0 AF 37 85 
29154     0F 88 8B 8A 
29158     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
2915c     AB 89 D0 89 
29160     AB 89 D0 89 
29164     D0 89 CF 89 
29168     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
2916c     D0 89 F5 89 
29170     BD 89 08 8A 
29174     CF 89 E8 8A 
29178     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
2917c     53 B3 0D F8 
29180     F4 07 38 00 
29184     63 01 63 01 
29188     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
2918c     88 01 88 01 
29190     76 01 88 01 
29194     88 01 89 01 
29198     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
2919c     75 01 AE 01 
291a0     76 01 88 01 
291a4     4A 00 46 06 
291a8     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
291ac     08 8A 9A 86 
291b0     33 8B 08 8A 
291b4     2D 8A F5 89 
291b8     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
291bc     2D 8A 2D 8A 
291c0     2E 8A 1B 8A 
291c4     40 8A 2D 8A 
291c8     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
291cc     2E 8A 79 8A 
291d0     66 8A C8 8B 
291d4     72 82 2B 97 
291d8     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
291dc     1D 02 05 01 
291e0     F8 01 C0 01 
291e4     0B 02 C0 01 
291e8     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
291ec     F9 01 D3 01 
291f0     F8 01 D3 01 
291f4     F8 01 D2 01 
291f8     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
291fc     E6 01 2B 01 
29200     8E 02 5F 07 
29204     F7 E2 ED 9C 
29208     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
2920c     E8 8A 78 8A 
29210     78 8A 65 8A 
29214     8B 8A 78 8A 
29218     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
2921c     8B 8A 9D 8A 
29220     9D 8A 8B 8A 
29224     C2 8A 78 8A 
29228     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
2922c     70 8C 18 86 
29230     8B 8A 23 C9 
29234     CB 03 C4 05 
29238     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
2923c     0B 02 7B 02 
29240     1E 02 55 02 
29244     30 02 43 02 
29248     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
2924c     43 02 44 02 
29250     43 02 30 02 
29254     68 02 31 02 
29258     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
2925c     07 08 3F F7 
29260     73 B2 13 85 
29264     15 89 ED 8B 
29268     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
2926c     B0 8A FB 8A 
29270     D5 8A FA 8A 
29274     E8 8A FB 8A 
29278     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
2927c     E8 8A 21 8B 
29280     E7 8A 33 8B 
29284     E8 8A 26 8C 
29288     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
2928c     8D B0 27 F6 
29290     9C 08 AD 01 
29294     7B 02 8D 02 
29298     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
2929c     A1 02 A0 02 
292a0     A1 02 A0 02 
292a4     A0 02 A0 02 
292a8     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
292ac     7B 02 D8 02 
292b0     7B 02 C6 02 
292b4     3E 01 C3 05 
292b8     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
292bc     00 8C 2A 86 
292c0     E0 8C FA 8A 
292c4     6A 8B FB 8A 
292c8     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
292cc     45 8B 45 8B 
292d0     45 8B 6B 8B 
292d4     46 8B 59 8B 
292d8     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
292dc     6B 8B 6B 8B 
292e0     6B 8B 6B 8B 
292e4     7D 8B 7D 8B 
292e8     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
292ec     90 8B 91 8B 
292f0     90 8B 90 8B 
292f4     A3 8B A3 8B 
292f8     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
292fc     B5 8B B6 8B 
29300     B5 8B B5 8B 
29304     B6 8B C8 8B 
29308     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
2930c     C8 8B DA 8B 
29310     DB 8B DB 8B 
29314     DB 8B DC 8B 
29318     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
2931c     EE 8B EE 8B 
29320     00 8C 01 8C 
29324     00 8C 01 8C 
29328     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
2932c     12 8C 13 8C 
29330     13 8C 26 8C 
29334     26 8C 26 8C 
29338     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
2933c     38 8C 38 8C 
29340     38 8C 38 8C 
29344     4B 8C 4B 8C 
29348     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
2934c     5E 8C 5E 8C 
29350     5E 8C 5E 8C 
29354     70 8C 70 8C 
29358     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
2935c     70 8C 83 8C 
29360     83 8C 83 8C 
29364     83 8C 96 8C 
29368     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
2936c     95 8C A9 8C 
29370     A9 8C A8 8C 
29374     A8 8C A8 8C 
29378     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
2937c     BB 8C BB 8C 
29380     BB 8C CE 8C 
29384     CE 8C CE 8C 
29388     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
2938c     E0 8C E1 8C 
29390     E1 8C E0 8C 
29394     F4 8C F2 8C 
29398     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
2939c     05 8D 05 8D 
293a0     06 8D 06 8D 
293a4     19 8D 19 8D 
293a8     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
293ac     18 8D 2B 8D 
293b0     2B 8D 2B 8D 
293b4     2A 8D 3E 8D 
293b8     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
293bc     3E 8D 51 8D 
293c0     50 8D 50 8D 
293c4     50 8D 51 8D 
293c8     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
293cc     63 8D 64 8D 
293d0     76 8D 75 8D 
293d4     75 8D 76 8D 
293d8     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
293dc     88 8D 88 8D 
293e0     89 8D 9B 8D 
293e4     9A 8D 9B 8D 
293e8     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
293ec     AD 8D AE 8D 
293f0     AD 8D AE 8D 
293f4     C1 8D C1 8D 
293f8     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
293fc     D3 8D D3 8D 
29400     D3 8D D3 8D 
29404     D3 8D E6 8D 
29408     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
2940c     E6 8D E6 8D 
29410     F9 8D F9 8D 
29414     F9 8D F8 8D 
29418     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
2941c     0B 8E 0B 8E 
29420     1D 8E 1D 8E 
29424     1E 8E 1E 8E 
29428     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
2942c     31 8E 31 8E 
29430     31 8E 42 8E 
29434     43 8E 43 8E 
29438     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
2943c     56 8E 56 8E 
29440     55 8E 56 8E 
29444     68 8E 69 8E 
29448     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
2944c     69 8E 7B 8E 
29450     7C 8E 7B 8E 
29454     7B 8E 8D 8E 
29458     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
2945c     8D 8E A1 8E 
29460     A0 8E A1 8E 
29464     A1 8E A0 8E 
29468     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
2946c     B3 8E B3 8E 
29470     C6 8E C5 8E 
29474     C6 8E C6 8E 
29478     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
2947c     D8 8E D9 8E 
29480     D8 8E EC 8E 
29484     EB 8E EC 8E 
29488     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
2948c     FE 8E FE 8E 
29490     FE 8E FE 8E 
29494     10 8F 10 8F 
29498     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
2949c     11 8F 23 8F 
294a0     24 8F 23 8F 
294a4     24 8F 37 8F 
294a8     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
294ac     36 8F 36 8F 
294b0     48 8F 49 8F 
294b4     49 8F 49 8F 
294b8     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
294bc     5B 8F 5C 8F 
294c0     5B 8F 6E 8F 
294c4     6E 8F 6E 8F 
294c8     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
294cc     81 8F 81 8F 
294d0     81 8F 81 8F 
294d4     93 8F 93 8F 
294d8     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
294dc     93 8F A6 8F 
294e0     A6 8F A6 8F 
294e4     A6 8F B9 8F 
294e8     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
294ec     B9 8F B9 8F 
294f0     CC 8F CB 8F 
294f4     CB 8F CC 8F 
294f8     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
294fc     DF 8F DE 8F 
29500     DE 8F F1 8F 
29504     F1 8F F1 8F 
29508     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
2950c     03 90 04 90 
29510     04 90 04 90 
29514     16 90 17 90 
29518     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
2951c     29 90 28 90 
29520     29 90 28 90 
29524     29 90 3C 90 
29528     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
2952c     3C 90 4F 90 
29530     4E 90 4E 90 
29534     4E 90 4E 90 
29538     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
2953c     61 90 61 90 
29540     73 90 74 90 
29544     74 90 74 90 
29548     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
2954c     87 90 86 90 
29550     87 90 86 90 
29554     99 90 99 90 
29558     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
2955c     AB 90 AB 90 
29560     AC 90 AB 90 
29564     AB 90 BF 90 
29568     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
2956c     BE 90 D1 90 
29570     D0 90 D1 90 
29574     D1 90 D1 90 
29578     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
2957c     E3 90 E4 90 
29580     F6 90 F6 90 
29584     F6 90 F6 90 
29588     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
2958c     09 91 0A 91 
29590     0A 91 1C 91 
29594     1C 91 1C 91 
29598     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
2959c     2F 91 2E 91 
295a0     2F 91 2F 91 
295a4     2E 91 41 91 
295a8     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
295ac     41 91 53 91 
295b0     54 91 54 91 
295b4     53 91 54 91 
295b8     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
295bc     67 91 67 91 
295c0     79 91 7A 91 
295c4     79 91 78 91 
295c8     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
295cc     8C 91 8B 91 
295d0     8C 91 8C 91 
295d4     9E 91 9E 91 
295d8     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
295dc     B1 91 B1 91 
295e0     B2 91 B1 91 
295e4     B1 91 C4 91 
295e8     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
295ec     C4 91 D6 91 
295f0     D7 91 D7 91 
295f4     D7 91 D6 91 
295f8     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
295fc     EA 91 EA 91 
29600     EA 91 FC 91 
29604     FC 91 FB 91 
29608     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
2960c     0E 92 0F 92 
29610     0F 92 0E 92 
29614     21 92 21 92 
29618     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
2961c     21 92 34 92 
29620     33 92 34 92 
29624     34 92 47 92 
29628     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
2962c     46 92 47 92 
29630     59 92 59 92 
29634     59 92 59 92 
29638     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
2963c     6C 92 6C 92 
29640     6B 92 7E 92 
29644     7E 92 7E 92 
29648     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
2964c     92 92 91 92 
29650     91 92 90 92 
29654     91 92 A4 92 
29658     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
2965c     A3 92 B6 92 
29660     B6 92 B7 92 
29664     B7 92 B6 92 
29668     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
2966c     CA 92 C9 92 
29670     CA 92 DC 92 
29674     DC 92 DC 92 
29678     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
2967c     EF 92 EF 92 
29680     EF 92 EF 92 
29684     01 93 01 93 
29688     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
2968c     15 93 14 93 
29690     14 93 14 93 
29694     14 93 27 93 
29698     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
2969c     27 93 39 93 
296a0     3A 93 39 93 
296a4     39 93 39 93 
296a8     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
296ac     4B 93 4C 93 
296b0     5F 93 5F 93 
296b4     5F 93 5E 93 
296b8     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
296bc     5F 93 84 93 
296c0     4C 93 96 93 
296c4     5F 93 AE 94 
296c8     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
296cc     7B C1 00 00 | 	byte	$7b, $c1, $00, $00
296d0     7A D7 00 80 
296d4     87 8A 48 8F 
296d8     EC 8C 76 8D 
296dc     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
296e0     3C 8D 82 8D 
296e4     42 8D 88 8D 
296e8     8C 8D 8E 8D 
296ec     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
296f0     97 8D DE 8D 
296f4     E1 8D F1 8E 
296f8     D8 8C A3 83 
296fc     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
29700     65 71 C9 65 
29704     FC 64 C4 65 
29708     C1 65 BF 65 
2970c     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
29710     B6 65 B4 65 
29714     B2 65 AE 65 
29718     AC 65 ED 65 
2971c     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
29720     5E 65 25 66 
29724     FA 62 23 6B 
29728     B5 6C 61 0A 
2972c     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
29730     5D 90 BE 8D 
29734     47 8E C3 8D 
29738     09 8E C9 8D 
2973c     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
29740     15 8E 19 8E 
29744     1B 8E 62 8E 
29748     64 8E 68 8E 
2974c     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
29750     B5 8E 4C 90 
29754     FA 84 3C 9D 
29758     98 13 79 6D 
2975c     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
29760     D9 66 50 66 
29764     D4 66 4B 66 
29768     8C 66 46 66 
2976c     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
29770     81 66 3A 66 
29774     7C 66 36 66 
29778     76 66 30 66 
2977c     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
29780     6B 66 88 72 
29784     BF 37 E7 B7 
29788     75 83 8B 8E 
2978c     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
29790     94 8E 96 8E 
29794     DD 8E 9C 8E 
29798     E2 8E A2 8E 
2979c     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
297a0     EE 8E AE 8E 
297a4     38 8F B5 8E 
297a8     3F 8F FD 8E 
297ac     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
297b0     A5 87 1E E3 
297b4     6D 5D FA 71 
297b8     41 64 25 67 
297bc     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
297c0     D9 66 1A 67 
297c4     18 67 15 67 
297c8     12 67 0F 67 
297cc     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
297d0     07 67 C0 66 
297d4     01 67 BC 66 
297d8     B8 66 DE 64 
297dc     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
297e0     43 E5 1F 8B 
297e4     14 8A F1 90 
297e8     1C 8F 63 8F 
297ec     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
297f0     29 8F 6E 8F 
297f4     72 8F 75 8F 
297f8     34 8F BE 8F 
297fc     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
29800     84 8F 87 8F 
29804     CC 8F 56 90 
29808     67 91 49 80 
2980c     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
29810     46 77 A6 66 
29814     E8 66 B0 67 
29818     AD 67 ED 67 
2981c     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
29820     A2 67 E3 67 
29824     9D 67 9A 67 
29828     98 67 94 67 
2982c     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
29830     49 67 CD 67 
29834     28 65 5F 6E 
29838     82 67 3A 01 
2983c     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
29840     C2 91 A9 8F 
29844     EF 8F AE 8F 
29848     F4 8F B5 8F 
2984c     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
29850     01 90 03 90 
29854     07 90 09 90 
29858     0C 90 53 90 
2985c     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
29860     18 90 44 93 
29864     85 84 D6 9D 
29868     87 1F 2F 75 
2986c     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
29870     C4 68 F6 67 
29874     BE 68 F1 67 
29878     76 68 2E 68 
2987c     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
29880     27 68 24 68 
29884     64 68 1E 68 
29888     5F 68 19 68 
2988c     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
29890     DC 68 56 72 
29894     7E 36 C2 B8 
29898     D7 84 73 90 
2989c     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
298a0     7B 90 7F 90 
298a4     82 90 84 90 
298a8     CB 90 8B 90 
298ac     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
298b0     D7 90 96 90 
298b4     20 91 59 90 
298b8     25 91 A2 90 
298bc     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
298c0     D0 89 40 EE 
298c4     12 64 C4 71 
298c8     29 66 0C 69 
298cc     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
298d0     C0 68 02 69 
298d4     FE 68 FB 68 
298d8     F9 68 F6 68 
298dc     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
298e0     EE 68 A8 68 
298e4     2C 69 5F 68 
298e8     E2 68 81 66 
298ec     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
298f0     1E EB A6 8A 
298f4     73 8B 5E 93 
298f8     7B 90 48 91 
298fc     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
29900     0D 91 11 91 
29904     14 91 16 91 
29908     5C 91 1C 91 
2990c     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
29910     68 91 AF 91 
29914     2A 91 B5 91 
29918     75 91 1A 94 
2991c     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
29920     70 0E CB 6C 
29924     5D 6E C4 67 
29928     99 69 54 69 
2992c     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
29930     D2 69 49 69 
29934     89 69 86 69 
29938     40 69 C4 69 
2993c     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
29940     35 69 76 69 
29944     58 67 EB 6D 
29948     E9 6D 89 0F 
2994c     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
29950     33 94 94 91 
29954     D9 91 56 91 
29958     E0 91 9F 91 
2995c     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
29960     EC 91 EE 91 
29964     F1 91 F4 91 
29968     F7 91 3D 92 
2996c     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
29970     46 92 21 94 
29974     11 89 A4 9D 
29978     FD 0E 8F 6C 
2997c     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
29980     28 6A E1 69 
29984     65 6A 1F 6A 
29988     5F 6A 1A 6A 
2998c     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
29990     54 6A 0F 6A 
29994     4F 6A 09 6A 
29998     06 6A 03 6A 
2999c     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
299a0     23 68 69 77 
299a4     3A 4D 38 CA 
299a8     38 86 4E 91 
299ac     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
299b0     64 92 24 92 
299b4     6A 92 2A 92 
299b8     70 92 30 92 
299bc     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
299c0     7B 92 7E 92 
299c4     C5 92 84 92 
299c8     CB 92 8A 92 
299cc     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
299d0     4D 8D F9 E2 
299d4     97 59 FE 74 
299d8     DB 68 6D 6A 
299dc     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
299e0     A8 6A A5 6A 
299e4     A3 6A 9F 6A 
299e8     9D 6A 9B 6A 
299ec     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
299f0     D6 6A 8F 6A 
299f4     CF 6A 46 6A 
299f8     CA 6A E1 67 
299fc     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
29a00     D3 F7 15 92 
29a04     90 8C BF 94 
29a08     A6 92 EB 92 
29a0c     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
29a10     B1 92 F7 92 
29a14     FA 92 FD 92 
29a18     00 93 02 93 
29a1c     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
29a20     4F 93 52 93 
29a24     54 93 22 94 
29a28     5A 93 8F 88 
29a2c     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
29a30     1C 77 07 6C 
29a34     E8 69 7A 6B 
29a38     34 6B 75 6B 
29a3c     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
29a40     29 6B 26 6B 
29a44     24 6B 21 6B 
29a48     1D 6B 5E 6B 
29a4c     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
29a50     12 6B 52 6B 
29a54     34 69 34 6E 
29a58     BA 73 A4 24 
29a5c     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
29a60     7A 94 B3 93 
29a64     72 93 31 93 
29a68     78 93 7A 93 
29a6c     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
29a70     83 93 86 93 
29a74     89 93 D0 93 
29a78     D2 93 D5 93 
29a7c     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
29a80     DD 93 40 96 
29a84     30 8B 99 9C 
29a88     52 10 94 71 
29a8c     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
29a90     46 6C 79 6B 
29a94     40 6C B7 6B 
29a98     F7 6B B1 6B 
29a9c     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
29aa0     EC 6B A5 6B 
29aa4     A2 6B 9F 6B 
29aa8     9D 6B 9A 6B 
29aac     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
29ab0     C8 6A E4 76 
29ab4     20 4B F9 CE 
29ab8     2E 8A 1A 92 
29abc     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
29ac0     FB 93 BA 93 
29ac4     01 94 03 94 
29ac8     4A 94 09 94 
29acc     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
29ad0     55 94 14 94 
29ad4     9E 94 1A 94 
29ad8     61 94 20 94 
29adc     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
29ae0     3E 87 E5 CD 
29ae4     5F 50 6C 78 
29ae8     B5 6A 04 6C 
29aec     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
29af0     83 6C 7F 6C 
29af4     7C 6C 36 6C 
29af8     76 6C 74 6C 
29afc     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
29b00     6B 6C 25 6C 
29b04     66 6C 1F 6C 
29b08     1D 6C 41 6A 
29b0c     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
29b10     BA FA FC 94 
29b14     5B 8D 97 96 
29b18     3B 94 C5 94 
29b1c     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
29b20     89 94 8C 94 
29b24     8F 94 92 94 
29b28     94 94 DB 94 
29b2c     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
29b30     E4 94 E7 94 
29b34     2D 95 74 95 
29b38     C8 96 15 89 
29b3c     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
29b40     CB 75 31 6F 
29b44     7E 6B 10 6D 
29b48     C9 6C 0A 6D 
29b4c     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
29b50     BD 6C FF 6C 
29b54     FB 6C F9 6C 
29b58     B2 6C F3 6C 
29b5c     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
29b60     A7 6C E8 6C 
29b64     0D 6B 85 6F 
29b68     C7 74 10 28 
29b6c     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
29b70     96 96 47 95 
29b74     06 95 0A 95 
29b78     0C 95 0F 95 
29b7c     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
29b80     17 95 5E 95 
29b84     61 95 63 95 
29b88     22 95 AC 95 
29b8c     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
29b90     72 95 17 98 
29b94     59 8E 01 96 
29b98     CF FC 5A 68 
29b9c     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
29ba0     96 6D 50 6D 
29ba4     D5 6D 4A 6D 
29ba8     8C 6D 89 6D 
29bac     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
29bb0     80 6D 3A 6D 
29bb4     7A 6D 77 6D 
29bb8     75 6D 71 6D 
29bbc     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
29bc0     18 6C BC 78 
29bc4     9A 4F 7E CF 
29bc8     1F 89 F1 93 
29bcc     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
29bd0     D2 95 4E 95 
29bd4     D7 95 53 95 
29bd8     DD 95 E0 95 
29bdc     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
29be0     A5 95 EB 95 
29be4     EE 95 F0 95 
29be8     37 96 B3 95 
29bec     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
29bf0     1A 98 D5 8D 
29bf4     C5 9F CD 0F 
29bf8     0F 71 F3 73 
29bfc     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
29c00     D9 6D 5E 6E 
29c04     D3 6D 58 6E 
29c08     12 6E 0F 6E 
29c0c     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
29c10     49 6E BF 6D 
29c14     87 6E 76 6D 
29c18     81 6E 11 6B 
29c1c     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
29c20     3F 09 44 95 
29c24     E5 8D 3F 99 
29c28     D4 95 A2 96 
29c2c     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
29c30     23 96 69 96 
29c34     6B 96 6E 96 
29c38     71 96 74 96 
29c3c     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
29c40     BF 96 3C 96 
29c44     C6 96 C8 96 
29c48     A3 98 51 8D 
29c4c     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
29c50     CF 75 29 73 
29c54     90 6C EC 6E 
29c58     62 6E E7 6E 
29c5c     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
29c60     9A 6E 98 6E 
29c64     95 6E 91 6E 
29c68     8E 6E CF 6E 
29c6c     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
29c70     40 6E C3 6E 
29c74     E8 6C 45 6F 
29c78     A5 7B C9 35 
29c7c     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
29c80     2D 98 23 97 
29c84     E1 96 A0 96 
29c88     A4 96 EA 96 
29c8c     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
29c90     AF 96 F4 96 
29c94     F8 96 3E 97 
29c98     FD 96 43 97 
29c9c     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
29ca0     08 97 6B 99 
29ca4     D6 92 88 91 
29ca8     D8 EE 84 66 
29cac     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
29cb0     2E 6F E7 6E 
29cb4     6C 6F 24 6F 
29cb8     21 6F 1F 6F 
29cbc     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
29cc0     17 6F 13 6F 
29cc4     54 6F 0E 6F 
29cc8     0B 6F 4B 6F 
29ccc     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
29cd0     27 6D 1C 7B 
29cd4     19 59 9F DB 
29cd8     66 8E BC 94 
29cdc     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
29ce0     67 97 26 97 
29ce4     6D 97 2B 97 
29ce8     72 97 32 97 
29cec     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
29cf0     C1 97 7F 97 
29cf4     C6 97 85 97 
29cf8     CB 97 CE 97 
29cfc     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
29d00     EC 8A C4 C6 
29d04     68 4C F4 7D 
29d08     63 6E E8 6E 
29d0c     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
29d10     ED 6F A7 6F 
29d14     E7 6F A0 6F 
29d18     E1 6F 9B 6F 
29d1c     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
29d20     D5 6F 8F 6F 
29d24     CE 6F 45 6F 
29d28     86 6F 68 6D 
29d2c     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
29d30     C0 13 AD A2 
29d34     A7 8E 79 99 
29d38     E6 97 E8 97 
29d3c     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
29d40     F1 97 F3 97 
29d44     F6 97 F9 97 
29d48     FB 97 FE 97 
29d4c     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
29d50     4A 98 0A 98 
29d54     93 98 0F 98 
29d58     7F 9B BF 8C 
29d5c     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
29d60     91 7B 62 73 
29d64     1A 6E B9 70 
29d68     EB 6F B3 70 
29d6c     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
29d70     25 70 20 70 
29d74     1E 70 1B 70 
29d78     18 70 15 70 
29d7c     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
29d80     0D 70 09 70 
29d84     07 70 03 70 
29d88     01 70 FD 6F 
29d8c     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
29d90     F6 6F F2 6F 
29d94     EF 6F EC 6F 
29d98     2C 70 E6 6F 
29d9c     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
29da0     DD 6F 97 6F 
29da4     D7 6F 84 6E 
29da8     8F 6F 3F 7D 
29dac     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
29dae     FF FF FF FF 
29db2     FF FF       | atarist_spl file "atarist.spl" '512
29db4     00 00 00 00 
29db8     00 00 00 00 
29dbc     00 00       | 	byte	$00[10]
29dbe     17 7F F2 7F 
29dc2     B2 7F 72 7F 
29dc6     33 7F F4 7E 
29dca     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
29dce     36 7E F5 7D 
29dd2     E9 51 F2 0D 
29dd6     8E 00 F3 FD 
29dda     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
29dde     57 FD 58 FD 
29de2     5B FD 5C FD 
29de6     5C FD 60 7D 
29dea     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
29dee     D6 7C 98 7C 
29df2     59 7C 1A 7C 
29df6     DC 7B 9E 7B 
29dfa     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
29dfe     F3 05 00 FD 
29e02     41 FB EA FA 
29e06     D9 FA DB FA 
29e0a     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
29e0e     E4 FA 9B 36 
29e12     F8 7A C0 7A 
29e16     84 7A 45 7A 
29e1a     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
29e1e     8E 79 51 79 
29e22     15 79 D7 78 
29e26     3C 1F EB FF 
29e2a     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
29e2e     6D F8 65 F8 
29e32     68 F8 6D F8 
29e36     70 F8 74 F8 
29e3a     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
29e3e     AB 60 79 60 
29e42     4B 60 1A 60 
29e46     E9 5F B9 5F 
29e4a     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
29e4e     FB 59 B2 0B 
29e52     92 FA 3A F7 
29e56     96 F6 79 F6 
29e5a     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
29e5e     82 F6 86 F6 
29e62     8C F6 DB 5D 
29e66     F1 5E C1 5E 
29e6a     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
29e6e     34 5E 04 5E 
29e72     D6 5D A6 5D 
29e76     78 5D D4 3E 
29e7a     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
29e7e     27 F5 BA F4 
29e82     AB F4 AD F4 
29e86     B2 F4 B8 F4 
29e8a     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
29e8e     26 5D 2B 5D 
29e92     FC 5C CD 5C 
29e96     9F 5C 70 5C 
29e9a     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
29e9e     E5 5B B8 5B 
29ea2     DB 24 A7 FC 
29ea6     D1 F4 4D F3 
29eaa     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
29eae     04 F3 0B F3 
29eb2     11 F3 16 F3 
29eb6     DE 18 98 5B 
29eba     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
29ebe     4E 4A 29 48 
29ec2     A0 47 6A 47 
29ec6     43 47 20 47 
29eca     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
29ece     E2 F6 98 F2 
29ed2     C5 F1 A3 F1 
29ed6     A3 F1 A8 F1 
29eda     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
29ede     BF F1 00 3D 
29ee2     EF 46 CD 46 
29ee6     AA 46 86 46 
29eea     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
29eee     1C 46 F9 45 
29ef2     D7 45 EE 43 
29ef6     DE 02 E8 F3 
29efa     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
29efe     61 F0 65 F0 
29f02     6D F0 74 F0 
29f06     7C F0 84 F0 
29f0a     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
29f0e     8E 45 6D 45 
29f12     49 45 27 45 
29f16     05 45 E1 44 
29f1a     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
29f1e     F1 2F A9 FB 
29f22     8B F1 9B EF 
29f26     40 EF 36 EF 
29f2a     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
29f2e     4D EF 56 EF 
29f32     5E EF 7B 44 
29f36     8C 44 69 44 
29f3a     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
29f3e     03 44 E1 43 
29f42     C0 43 F5 37 
29f46     69 33 0F 11 
29f4a     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
29f4e     66 EE 37 EE 
29f52     38 EE 40 EE 
29f56     48 EE 51 EE 
29f5a     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
29f5e     7D 32 6A 32 
29f62     51 32 37 32 
29f66     1F 32 05 32 
29f6a     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
29f6e     B9 31 A1 31 
29f72     F1 04 F4 F1 
29f76     50 EE A0 ED 
29f7a     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
29f7e     93 ED 9A ED 
29f82     A4 ED AD ED 
29f86     F4 27 C1 31 
29f8a     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
29f8e     78 31 5F 31 
29f92     46 31 2E 31 
29f96     15 31 FC 30 
29f9a     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
29f9e     C4 EF 4A ED 
29fa2     DC EC CB EC 
29fa6     D2 EC DA EC 
29faa     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
29fae     F9 EC 64 2F 
29fb2     0A 31 F1 30 
29fb6     D9 30 C0 30 
29fba     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
29fbe     78 30 5F 30 
29fc2     46 30 38 23 
29fc6     A6 F6 19 EE 
29fca     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
29fce     20 EC 28 EC 
29fd2     32 EC 3C EC 
29fd6     47 EC 51 EC 
29fda     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
29fde     A3 22 93 22 
29fe2     7F 22 6E 22 
29fe6     5D 22 4C 22 
29fea     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
29fee     77 09 76 F1 
29ff2     CC EC F0 EB 
29ff6     CD EB CE EB 
29ffa     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
29ffe     ED EB F5 EB 
2a002     3E F6 6B 22 
2a006     5F 22 4E 22 
2a00a     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
2a00e     1B 22 0B 22 
2a012     FA 21 E9 21 
2a016     D8 21 4D FF 
2a01a     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
2a01e     92 EB 7B EB 
2a022     82 EB 8C EB 
2a026     97 EB A1 EB 
2a02a     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
2a02e     15 22 04 22 
2a032     F3 21 E3 21 
2a036     D2 21 C0 21 
2a03a     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
2a03e     8E 21 7D 21 
2a042     9A F8 A4 ED 
2a046     8E EB 2F EB 
2a04a     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
2a04e     37 EB 42 EB 
2a052     4C EB 57 EB 
2a056     B2 17 22 19 
2a05a     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
2a05e     FD 18 EF 18 
2a062     E3 18 D6 18 
2a066     CA 18 BD 18 
2a06a     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
2a06e     60 EC 35 EB 
2a072     01 EB 01 EB 
2a076     0C EB 16 EB 
2a07a     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
2a07e     34 EB D0 18 
2a082     00 19 F4 18 
2a086     E8 18 DA 18 
2a08a     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
2a08e     B6 18 A9 18 
2a092     9D 18 91 05 
2a096     F0 EF CA EB 
2a09a     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
2a09e     E8 EA F2 EA 
2a0a2     FE EA 07 EB 
2a0a6     12 EB C2 EF 
2a0aa     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
2a0ae     D9 18 CD 18 
2a0b2     C0 18 B3 18 
2a0b6     A7 18 9B 18 
2a0ba     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
2a0be     B8 FC 30 EE 
2a0c2     61 EB DC EA 
2a0c6     CD EA D2 EA 
2a0ca     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
2a0ce     F3 EA FE EA 
2a0d2     D2 09 D1 18 
2a0d6     C3 18 17 18 
2a0da     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
2a0de     66 11 52 11 
2a0e2     49 11 41 11 
2a0e6     38 11 E0 F4 
2a0ea     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
2a0ee     C9 EA C5 EA 
2a0f2     CF EA DB EA 
2a0f6     E6 EA EF EA 
2a0fa     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
2a0fe     89 11 80 11 
2a102     78 11 6E 11 
2a106     67 11 5D 11 
2a10a     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
2a10e     43 11 32 0D 
2a112     9C F1 07 EC 
2a116     F8 EA CD EA 
2a11a     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
2a11e     E4 EA ED EA 
2a122     F8 EA 02 EB 
2a126     55 11 91 11 
2a12a     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
2a12e     75 11 6E 11 
2a132     64 11 5E 11 
2a136     54 11 4A 11 
2a13a     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
2a13e     A8 EB F1 EA 
2a142     D9 EA DC EA 
2a146     E8 EA F1 EA 
2a14a     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
2a14e     A6 EB 9E 11 
2a152     A0 11 96 11 
2a156     8D 11 85 11 
2a15a     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
2a15e     6A 11 CA 0D 
2a162     36 0B 57 F8 
2a166     6C ED 57 EB 
2a16a     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
2a16e     F4 EA FF EA 
2a172     09 EB 15 EB 
2a176     1E EB 1A FD 
2a17a     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
2a17e     ED 0A E8 0A 
2a182     E2 0A DC 0A 
2a186     D6 0A D1 0A 
2a18a     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
2a18e     F8 F3 BC EC 
2a192     57 EB 1E EB 
2a196     18 EB 24 EB 
2a19a     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
2a19e     42 EB 4D EB 
2a1a2     08 09 20 0B 
2a1a6     1A 0B 14 0B 
2a1aa     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
2a1ae     04 0B FE 0A 
2a1b2     F9 0A F2 0A 
2a1b6     84 08 3A F1 
2a1ba     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
2a1be     42 EB 42 EB 
2a1c2     4E EB 57 EB 
2a1c6     62 EB 6B EB 
2a1ca     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
2a1ce     48 0B 43 0B 
2a1d2     3C 0B 36 0B 
2a1d6     31 0B 2C 0B 
2a1da     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
2a1de     1B 0B 5C 00 
2a1e2     6A EF 1B EC 
2a1e6     81 EB 6A EB 
2a1ea     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
2a1ee     85 EB 8E EB 
2a1f2     99 EB A3 EB 
2a1f6     DD 05 E5 05 
2a1fa     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
2a1fe     DB 05 D8 05 
2a202     D5 05 D1 05 
2a206     D0 05 CB 05 
2a20a     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
2a20e     0C EC BB EB 
2a212     B3 EB BB EB 
2a216     C5 EB D0 EB 
2a21a     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
2a21e     E4 F7 2C 06 
2a222     28 06 24 06 
2a226     22 06 1F 06 
2a22a     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
2a22e     16 06 14 06 
2a232     0F 06 D0 F3 
2a236     65 ED 2D EC 
2a23a     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
2a23e     01 EC 0A EC 
2a242     14 EC 1E EC 
2a246     29 EC FB 03 
2a24a     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
2a24e     63 06 60 06 
2a252     5E 06 59 06 
2a256     58 06 54 06 
2a25a     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
2a25e     69 F1 21 ED 
2a262     55 EC 33 EC 
2a266     36 EC 40 EC 
2a26a     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
2a26e     5C EC 68 EC 
2a272     92 02 D9 02 
2a276     D7 02 D7 02 
2a27a     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
2a27e     D1 02 D1 02 
2a282     CE 02 CD 02 
2a286     5D FC 80 EF 
2a28a     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
2a28e     83 EC 8A EC 
2a292     93 EC 9C EC 
2a296     A5 EC B1 EC 
2a29a     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
2a29e     2B 03 2A 03 
2a2a2     29 03 26 03 
2a2a6     25 03 24 03 
2a2aa     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
2a2ae     1F 03 70 F7 
2a2b2     D0 EE 27 ED 
2a2b6     DB EC D4 EC 
2a2ba     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
2a2be     F0 EC FA EC 
2a2c2     02 ED F9 F4 
2a2c6     7B 03 7C 03 
2a2ca     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
2a2ce     75 03 73 03 
2a2d2     72 03 70 03 
2a2d6     6D 03 6C 03 
2a2da     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
2a2de     54 ED 22 ED 
2a2e2     22 ED 2C ED 
2a2e6     35 ED 3F ED 
2a2ea     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
2a2ee     14 01 C3 03 
2a2f2     C1 03 C0 03 
2a2f6     5F 01 A5 00 
2a2fa     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
2a2fe     7B 00 7C 00 
2a302     20 00 85 F1 
2a306     2A EE 89 ED 
2a30a     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
2a30e     80 ED 87 ED 
2a312     90 ED 9A ED 
2a316     A3 ED 73 00 
2a31a     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
2a31e     D0 00 D0 00 
2a322     D0 00 D0 00 
2a326     D0 00 CF 00 
2a32a     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
2a32e     80 F0 3D EE 
2a332     D5 ED C7 ED 
2a336     CD ED D6 ED 
2a33a     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
2a33e     F2 ED FA ED 
2a342     1D 01 29 01 
2a346     27 01 27 01 
2a34a     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
2a34e     25 01 26 01 
2a352     26 01 23 01 
2a356     D0 F7 EC EF 
2a35a     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
2a35e     1C EE 24 EE 
2a362     2D EE 37 EE 
2a366     40 EE 47 EE 
2a36a     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
2a36e     7D 01 7B 01 
2a372     7A 01 7A 01 
2a376     79 01 78 01 
2a37a     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
2a37e     84 FE DE F3 
2a382     6C EF 93 EE 
2a386     72 EE 72 EE 
2a38a     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
2a38e     8B EE 95 EE 
2a392     9E EE 15 FC 
2a396     67 FE 67 FE 
2a39a     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
2a39e     6B FE 6B FE 
2a3a2     6D FE 6D FE 
2a3a6     6D FE 6F FE 
2a3aa     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
2a3ae     DF EE CC EE 
2a3b2     CF EE D9 EE 
2a3b6     E1 EE EA EE 
2a3ba     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
2a3be     5A FE C4 FE 
2a3c2     C3 FE C5 FE 
2a3c6     C6 FE C6 FE 
2a3ca     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
2a3ce     C8 FE C7 FE 
2a3d2     DA FB 85 F1 
2a3d6     8D EF 31 EF 
2a3da     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
2a3de     34 EF 3E EF 
2a3e2     46 EF 4F EF 
2a3e6     57 EF 0D FF 
2a3ea     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
2a3ee     1F FF 1F FF 
2a3f2     21 FF 21 FF 
2a3f6     21 FF 21 FF 
2a3fa     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
2a3fe     15 F1 BE EF 
2a402     84 EF 7E EF 
2a406     88 EF 8F EF 
2a40a     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
2a40e     A9 EF 06 F2 
2a412     A6 FC AB FC 
2a416     AD FC AE FC 
2a41a     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
2a41e     B2 FC B4 FC 
2a422     B6 FC B7 FC 
2a426     8B F4 BD F0 
2a42a     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
2a42e     E4 EF EE EF 
2a432     F6 EF FD EF 
2a436     04 F0 0E F0 
2a43a     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
2a43e     0B FD 0D FD 
2a442     0F FD 11 FD 
2a446     11 FD 13 FD 
2a44a     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
2a44e     17 FD 64 F3 
2a452     CD F0 52 F0 
2a456     41 F0 45 F0 
2a45a     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
2a45e     5B F0 64 F0 
2a462     6D F0 FB FC 
2a466     65 FD 68 FD 
2a46a     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
2a46e     6C FD 6D FD 
2a472     6F FD 70 FD 
2a476     72 FD B3 FB 
2a47a     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
2a47e     A4 F0 99 F0 
2a482     A0 F0 A8 F0 
2a486     AE F0 B9 F0 
2a48a     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
2a48e     CB FB DD FB 
2a492     DE FB E0 FB 
2a496     E3 FB E3 FB 
2a49a     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
2a49e     E9 FB EC FB 
2a4a2     62 F7 27 F2 
2a4a6     2A F1 FF F0 
2a4aa     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
2a4ae     0C F1 13 F1 
2a4b2     1B F1 23 F1 
2a4b6     33 F2 3C FC 
2a4ba     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
2a4be     42 FC 45 FC 
2a4c2     47 FC 48 FC 
2a4c6     4A FC 4C FC 
2a4ca     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
2a4ce     20 F2 77 F1 
2a4d2     5C F1 5F F1 
2a4d6     64 F1 6C F1 
2a4da     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
2a4de     83 F1 DC F8 
2a4e2     9A FC 9A FC 
2a4e6     9B FC 9E FC 
2a4ea     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
2a4ee     A3 FC A4 FC 
2a4f2     A6 FC A9 FC 
2a4f6     90 F4 33 F2 
2a4fa     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
2a4fe     BA F1 BF F1 
2a502     C7 F1 CE F1 
2a506     D6 F1 DC F1 
2a50a     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
2a50e     F3 FC F5 FC 
2a512     FE FB 79 FB 
2a516     62 FB 5F FB 
2a51a     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
2a51e     6F FA AF F3 
2a522     53 F2 12 F2 
2a526     0F F2 15 F2 
2a52a     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
2a52e     2A F2 32 F2 
2a532     38 F2 9A FB 
2a536     AF FB B1 FB 
2a53a     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
2a53e     B7 FB B8 FB 
2a542     BA FB BC FB 
2a546     C1 FB 3B F8 
2a54a     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
2a54e     6E F2 6C F2 
2a552     74 F2 7A F2 
2a556     81 F2 87 F2 
2a55a     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
2a55e     06 FC 09 FC 
2a562     0C FC 0E FC 
2a566     0F FC 12 FC 
2a56a     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
2a56e     17 FC 1A FC 
2a572     B2 F6 7B F3 
2a576     DD F2 C5 F2 
2a57a     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
2a57e     D4 F2 DB F2 
2a582     E0 F2 E8 F2 
2a586     28 F8 60 FC 
2a58a     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
2a58e     64 FC 66 FC 
2a592     68 FC 6A FC 
2a596     6D FC 52 FC 
2a59a     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
2a59e     78 F3 24 F3 
2a5a2     1A F3 1E F3 
2a5a6     24 F3 2A F3 
2a5aa     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
2a5ae     3D F3 80 FA 
2a5b2     0C FB 0F FB 
2a5b6     10 FB 14 FB 
2a5ba     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
2a5be     1B FB 1D FB 
2a5c2     1F FB 92 FA 
2a5c6     DE F4 AE F3 
2a5ca     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
2a5ce     79 F3 7E F3 
2a5d2     84 F3 8C F3 
2a5d6     92 F3 97 F3 
2a5da     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
2a5de     67 FB 69 FB 
2a5e2     6B FB 6F FB 
2a5e6     71 FB 72 FB 
2a5ea     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
2a5ee     E3 F8 BA F4 
2a5f2     EE F3 CC F3 
2a5f6     CA F3 CF F3 
2a5fa     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
2a5fe     E2 F3 E8 F3 
2a602     ED F3 B7 FB 
2a606     BC FB BE FB 
2a60a     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
2a60e     C4 FB C6 FB 
2a612     C8 FB C9 FB 
2a616     CC FB 8F F7 
2a61a     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
2a61e     1E F4 1E F4 
2a622     24 F4 2A F4 
2a626     30 F4 38 F4 
2a62a     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
2a62e     AD FA B1 FA 
2a632     B4 FA B6 FA 
2a636     BA FA BB FA 
2a63a     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
2a63e     C2 FA C6 FA 
2a642     55 F6 C6 F4 
2a646     7D F4 72 F4 
2a64a     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
2a64e     83 F4 89 F4 
2a652     8F F4 94 F4 
2a656     66 FA 03 FB 
2a65a     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
2a65e     0A FB 0E FB 
2a662     10 FB 11 FB 
2a666     16 FB 18 FB 
2a66a     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
2a66e     F9 F4 CA F4 
2a672     C5 F4 CB F4 
2a676     D1 F4 D7 F4 
2a67a     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
2a67e     E8 F4 3F FB 
2a682     56 FB 58 FB 
2a686     5A FB 5E FB 
2a68a     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
2a68e     64 FB 64 FB 
2a692     69 FB 99 F9 
2a696     E9 F5 33 F5 
2a69a     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
2a69e     1D F5 22 F5 
2a6a2     27 F5 2E F5 
2a6a6     32 F5 37 F5 
2a6aa     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
2a6ae     BC FA BC FA 
2a6b2     C1 FA C2 FA 
2a6b6     C4 FA C8 FA 
2a6ba     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
2a6be     F9 F7 DB F5 
2a6c2     78 F5 69 F5 
2a6c6     6A F5 70 F5 
2a6ca     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
2a6ce     7F F5 85 F5 
2a6d2     6E F7 06 FB 
2a6d6     0A FB 0B FB 
2a6da     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
2a6de     14 FB 15 FB 
2a6e2     18 FB 1B FB 
2a6e6     1D FB 70 F7 
2a6ea     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
2a6ee     B6 F5 BB F5 
2a6f2     C0 F5 C6 F5 
2a6f6     CA F5 CF F5 
2a6fa     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
2a6fe     54 FB 56 FB 
2a702     5A FB 5B FB 
2a706     5E FB 5F FB 
2a70a     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
2a70e     67 FB 52 FB 
2a712     29 F7 33 F6 
2a716     06 F6 02 F6 
2a71a     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
2a71e     10 F6 16 F6 
2a722     1A F6 1F F6 
2a726     81 FB 9F FB 
2a72a     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
2a72e     51 FB F2 FA 
2a732     E3 FA E3 FA 
2a736     E5 FA E9 FA 
2a73a     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
2a73e     64 F6 4D F6 
2a742     4D F6 53 F6 
2a746     57 F6 5C F6 
2a74a     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
2a74e     6A F6 19 FB 
2a752     1E FB 22 FB 
2a756     23 FB 24 FB 
2a75a     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
2a75e     2C FB 2E FB 
2a762     32 FB F0 F8 
2a766     01 F7 A5 F6 
2a76a     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
2a76e     9F F6 A3 F6 
2a772     A6 F6 AC F6 
2a776     B0 F6 EB F7 
2a77a     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
2a77e     68 FB 6C FB 
2a782     6E FB 71 FB 
2a786     72 FB 74 FB 
2a78a     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
2a78e     71 F8 21 F7 
2a792     E5 F6 DD F6 
2a796     E1 F6 E6 F6 
2a79a     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
2a79e     F5 F6 F7 F6 
2a7a2     F7 FA AB FB 
2a7a6     AD FB AF FB 
2a7aa     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
2a7ae     B6 FB B9 FB 
2a7b2     BB FB BC FB 
2a7b6     21 FB 07 F8 
2a7ba     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
2a7be     22 F7 26 F7 
2a7c2     2B F7 2E F7 
2a7c6     34 F7 38 F7 
2a7ca     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
2a7ce     13 FB 16 FB 
2a7d2     17 FB 1B FB 
2a7d6     1E FB 20 FB 
2a7da     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
2a7de     26 FB 77 FA 
2a7e2     F3 F7 7C F7 
2a7e6     67 F7 6A F7 
2a7ea     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
2a7ee     74 F7 7A F7 
2a7f2     7E F7 82 F7 
2a7f6     53 FB 5A FB 
2a7fa     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
2a7fe     5F FB 63 FB 
2a802     65 FB 67 FB 
2a806     69 FB 6A FB 
2a80a     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
2a80e     B5 F7 A9 F7 
2a812     AD F7 B0 F7 
2a816     B5 F7 B8 F7 
2a81a     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
2a81e     6E F8 99 FB 
2a822     9C FB 9D FB 
2a826     9F FB A4 FB 
2a82a     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
2a82e     A9 FB AB FB 
2a832     AD FB 46 F9 
2a836     26 F8 F0 F7 
2a83a     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
2a83e     F4 F7 F8 F7 
2a842     FB F7 FF F7 
2a846     03 F8 65 FA 
2a84a     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
2a84e     2B FB 2F FB 
2a852     30 FB 32 FB 
2a856     34 FB 38 FB 
2a85a     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
2a85e     E9 F8 4A F8 
2a862     2E F8 2C F8 
2a866     2F F8 36 F8 
2a86a     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
2a86e     41 F8 44 F8 
2a872     4A FB 67 FB 
2a876     68 FB 6B FB 
2a87a     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
2a87e     73 FB 74 FB 
2a882     78 FB 7A FB 
2a886     14 FB E7 F8 
2a88a     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
2a88e     6D F8 70 F8 
2a892     73 F8 78 F8 
2a896     7C F8 80 F8 
2a89a     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
2a89e     A6 FB A7 FB 
2a8a2     A9 FB AC FB 
2a8a6     AF FB B1 FB 
2a8aa     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
2a8ae     B7 FB 73 FA 
2a8b2     F8 F8 B4 F8 
2a8b6     A9 F8 AB F8 
2a8ba     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
2a8be     B4 F8 B8 F8 
2a8c2     BB F8 FA F8 
2a8c6     64 FB 65 FB 
2a8ca     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
2a8ce     6D FB 6F FB 
2a8d2     70 FB 74 FB 
2a8d6     77 FB 77 FB 
2a8da     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
2a8de     E9 F8 E4 F8 
2a8e2     E8 F8 EB F8 
2a8e6     EE F8 F2 F8 
2a8ea     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
2a8ee     B5 FA 9F FB 
2a8f2     A1 FB A4 FB 
2a8f6     A5 FB A9 FB 
2a8fa     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
2a8fe     AE FB B1 FB 
2a902     B2 FB C7 F9 
2a906     39 F9 22 F9 
2a90a     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
2a90e     26 F9 2A F9 
2a912     2E F9 32 F9 
2a916     33 F9 BA FB 
2a91a     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
2a91e     DE FB E1 FB 
2a922     E2 FB E4 FB 
2a926     E5 FB E7 FB 
2a92a     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
2a92e     C5 F9 67 F9 
2a932     57 F9 56 F9 
2a936     5B F9 5F F9 
2a93a     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
2a93e     68 F9 6C F9 
2a942     0B FC 11 FC 
2a946     14 FC 15 FC 
2a94a     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
2a94e     B5 FB B5 FB 
2a952     B6 FB B8 FB 
2a956     E9 FA C8 F9 
2a95a     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
2a95e     90 F9 94 F9 
2a962     95 F9 99 F9 
2a966     9D F9 9F F9 
2a96a     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
2a96e     DE FB DF FB 
2a972     E2 FB E4 FB 
2a976     E6 FB E8 FB 
2a97a     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
2a97e     EF FB AC FA 
2a982     E9 F9 C7 F9 
2a986     C3 F9 C8 F9 
2a98a     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
2a98e     D0 F9 D4 F9 
2a992     D6 F9 0E FB 
2a996     11 FC 13 FC 
2a99a     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
2a99e     19 FC 1B FC 
2a9a2     1D FC 1E FC 
2a9a6     21 FC 22 FC 
2a9aa     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
2a9ae     F7 F9 F7 F9 
2a9b2     FB F9 FE F9 
2a9b6     00 FA 03 FA 
2a9ba     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
2a9be     1B FC 45 FC 
2a9c2     46 FC 48 FC 
2a9c6     4A FC 4B FC 
2a9ca     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
2a9ce     52 FC 54 FC 
2a9d2     F3 FB 82 FA 
2a9d6     35 FA 28 FA 
2a9da     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
2a9de     31 FA 32 FA 
2a9e2     37 FA 37 FA 
2a9e6     3C FA 00 FC 
2a9ea     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
2a9ee     09 FC 0B FC 
2a9f2     0F FC 12 FC 
2a9f6     12 FC 15 FC 
2a9fa     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
2a9fe     8D FA 60 FA 
2aa02     5B FA 5C FA 
2aa06     60 FA 61 FA 
2aa0a     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
2aa0e     6C FA 6D FA 
2aa12     37 FC 3A FC 
2aa16     3B FC 3D FC 
2aa1a     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
2aa1e     43 FC 44 FC 
2aa22     45 FC 47 FC 
2aa26     51 FB AB FA 
2aa2a     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
2aa2e     8E FA 91 FA 
2aa32     93 FA 95 FA 
2aa36     98 FA 9B FA 
2aa3a     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
2aa3e     68 FC 6A FC 
2aa42     6C FC 6E FC 
2aa46     70 FC 72 FC 
2aa4a     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
2aa4e     76 FC 3B FB 
2aa52     D0 FA BB FA 
2aa56     B9 FA BD FA 
2aa5a     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
2aa5e     C4 FA C6 FA 
2aa62     CA FA 13 FC 
2aa66     3A FC 3A FC 
2aa6a     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
2aa6e     41 FC 43 FC 
2aa72     44 FC 47 FC 
2aa76     48 FC 3C FC 
2aa7a     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
2aa7e     E6 FA E8 FA 
2aa82     EB FA EE FA 
2aa86     F0 FA F2 FA 
2aa8a     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
2aa8e     61 FC 66 FC 
2aa92     68 FC 6B FC 
2aa96     6C FC 6E FC 
2aa9a     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
2aa9e     73 FC 75 FC 
2aaa2     13 FC 3F FB 
2aaa6     17 FB 12 FB 
2aaaa     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
2aaae     1A FB 1D FB 
2aab2     1F FB 20 FB 
2aab6     23 FB 92 FC 
2aaba     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
2aabe     96 FC 97 FC 
2aac2     9A FC 9C FC 
2aac6     9E FC 9F FC 
2aaca     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
2aace     5A FB 41 FB 
2aad2     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
2aad6     01 00 00 00 
2aada     00 00 00 00 
2aade     00 00 00 00 
2aae2     00 00 00 00 | mouse  file "mouse2.def"
2aae6     00 00 00 00 
2aaea     00 00 00 00 
2aaee     00 00 00 00 
2aaf2     00 00 00 00 | 	byte	$00[16]
2aaf6     01 01 00 00 
2aafa     00 00 00 00 
2aafe     00 00 00 00 
2ab02     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ab06     00 00 00 00 
2ab0a     00 00 00 00 
2ab0e     00 00 00 00 
2ab12     00 00 00 00 | 	byte	$00[16]
2ab16     01 0D 01 00 
2ab1a     00 00 00 00 
2ab1e     00 00 00 00 
2ab22     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ab26     00 00 00 00 
2ab2a     00 00 00 00 
2ab2e     00 00 00 00 
2ab32     00 00 00 00 | 	byte	$00[16]
2ab36     01 0D 0D 01 
2ab3a     00 00 00 00 
2ab3e     00 00 00 00 
2ab42     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ab46     00 00 00 00 
2ab4a     00 00 00 00 
2ab4e     00 00 00 00 
2ab52     00 00 00 00 | 	byte	$00[16]
2ab56     01 0D 0D 0D 
2ab5a     01 00 00 00 
2ab5e     00 00 00 00 
2ab62     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ab66     00 00 00 00 
2ab6a     00 00 00 00 
2ab6e     00 00 00 00 
2ab72     00 00 00 00 | 	byte	$00[16]
2ab76     01 0D 0D 0D 
2ab7a     0D 01 00 00 
2ab7e     00 00 00 00 
2ab82     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ab86     00 00 00 00 
2ab8a     00 00 00 00 
2ab8e     00 00 00 00 
2ab92     00 00 00 00 | 	byte	$00[16]
2ab96     01 0D 0D 0D 
2ab9a     0D 0D 01 00 
2ab9e     00 00 00 00 
2aba2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
2aba6     00 00 00 00 
2abaa     00 00 00 00 
2abae     00 00 00 00 
2abb2     00 00 00 00 | 	byte	$00[16]
2abb6     01 0D 0D 0D 
2abba     0D 0D 0D 01 
2abbe     00 00 00 00 
2abc2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
2abc6     00 00 00 00 
2abca     00 00 00 00 
2abce     00 00 00 00 
2abd2     00 00 00 00 | 	byte	$00[16]
2abd6     01 0D 0D 0D 
2abda     0D 0D 0D 0C 
2abde     01 00 00 00 
2abe2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
2abe6     00 00 00 00 
2abea     00 00 00 00 
2abee     00 00 00 00 
2abf2     00 00 00 00 | 	byte	$00[16]
2abf6     01 0D 0D 0D 
2abfa     0D 0D 0D 0D 
2abfe     0C 01 00 00 
2ac02     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
2ac06     00 00 00 00 
2ac0a     00 00 00 00 
2ac0e     00 00 00 00 
2ac12     00 00 00 00 | 	byte	$00[16]
2ac16     01 0D 0D 0D 
2ac1a     0D 0D 0D 0D 
2ac1e     0D 0C 01 00 
2ac22     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
2ac26     00 00 00 00 
2ac2a     00 00 00 00 
2ac2e     00 00 00 00 
2ac32     00 00 00 00 | 	byte	$00[16]
2ac36     01 0D 0D 0D 
2ac3a     0D 0D 0D 0D 
2ac3e     0D 0D 0B 01 
2ac42     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
2ac46     00 00 00 00 
2ac4a     00 00 00 00 
2ac4e     00 00 00 00 
2ac52     00 00 00 00 | 	byte	$00[16]
2ac56     01 0D 0D 0D 
2ac5a     0C 0D 0D 03 
2ac5e     01 01 01 01 
2ac62     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
2ac66     00 00 00 00 
2ac6a     00 00 00 00 
2ac6e     00 00 00 00 
2ac72     00 00 00 00 | 	byte	$00[16]
2ac76     01 0D 0D 0C 
2ac7a     01 09 0D 03 
2ac7e     00 00 00 00 
2ac82     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
2ac86     00 00 00 00 
2ac8a     00 00 00 00 
2ac8e     00 00 00 00 
2ac92     00 00 00 00 | 	byte	$00[16]
2ac96     01 0D 0C 01 
2ac9a     00 01 0D 0B 
2ac9e     01 00 00 00 
2aca2     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
2aca6     00 00 00 00 
2acaa     00 00 00 00 
2acae     00 00 00 00 
2acb2     00 00 00 00 | 	byte	$00[16]
2acb6     01 0C 01 00 
2acba     00 01 0A 0D 
2acbe     01 00 00 00 
2acc2     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
2acc6     00 00 00 00 
2acca     00 00 00 00 
2acce     00 00 00 00 
2acd2     00 00 00 00 | 	byte	$00[16]
2acd6     01 01 00 00 
2acda     00 00 01 0D 
2acde     0B 01 00 00 
2ace2     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
2ace6     00 00 00 00 
2acea     00 00 00 00 
2acee     00 00 00 00 
2acf2     00 00 00 00 
2acf6     00 00 00 00 
2acfa     00 00       | 	byte	$00[22]
2acfc     01 0B 0D 01 
2ad00     00 00 00 00 
2ad04     00 00 00 00 
2ad08     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ad0c     00 00 00 00 
2ad10     00 00 00 00 
2ad14     00 00 00 00 
2ad18     00 00 00 00 
2ad1c     00          | 	byte	$00[17]
2ad1d     01 01 00 00 
2ad21     00 00 00 00 
2ad25     00 00 00 00 
2ad29     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ad2d     00 00 00 00 
      ...             
2aed1     00 00 00 00 
2aed5     00          | 	byte	$00[425]
2aed6                 | 
2aed6     00 00       |              	org
2aed8 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
2aedc 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
2aee0 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
2aee4 003             | 
2aee4 003 00 30 04 F6 |                 mov     psramaddr,#0
2aee8 004             | 
2aee8 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
2aeec 005 20 00 00 FF 
2aef0 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
2aef4 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
2aef8 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
2aefc 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
2af00 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
2af04 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
2af08 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
2af0c 00d             | 
2af0c 00d 20 00 00 FF 
2af10 00e 00 30 04 F1 |                 add 	psramaddr,##16384
2af14 00f E0 03 00 FF 
2af18 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
2af1c 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
2af20 012             | 
2af20 012             |                 
2af20 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
2af24 013             |     
2af24 013 01 2C 60 FD |                 cogid 	t11				' get id
2af28 014 00 00 EC FC |                 coginit #0,#0				' start the new program
2af2c 015 03 2C 60 FD |                 cogstop t11				' stop the loader
2af30 016             | 
2af30 016 00 00 00 00 | t11 		long 	0
2af34 017 00 FF 07 00 | mailbox 	long 	$7FF00
2af38 018 00 00 00 00 | psramaddr 	long 	0
2af3c 019 00 00 00 00 | pslockval	long 	0
2af40 01a 00 00 00 00 | cmd             long    0
2af44 01b 00 00 00 00 | buf1            long    0
2af48 01c 00 40 00 00 | buf2            long    16384
2af4c 01d 50 AF 02 00 | 	long	@@@_dat_ + 8468
2af50 01e 50 32 20 52 
2af54 01f 65 74 72 6F 
2af58 020 6D 61 63 68 
2af5c 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
2af60 022 42 41 53 49 
2af64 023 43 20 76 65 
2af68 024 72 73 69 6F 
2af6c 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
2af70 026 32 34 00 00 | 	byte	$32, $34, $00, $00
2af74 027             | 	alignl
2af74 027             | _hg010b_spin2_dat_
2af74 027             | 
2af74 027 00 00 00 00 
2af78 028 00 00 00 00 
2af7c 029 00 00 00 00 
2af80 02a 00 00 00 00 
2af84 02b 00 00 00    | vga_font       file "vgafont.def"
2af87 02b 7E 81 A5 81 
2af8b 02c 81 BD 99 81 
2af8f 02d 81 7E 00 00 
2af93 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
2af97 02f 7E FF DB FF 
2af9b 030 FF C3 E7 FF 
2af9f 031 FF 7E 00 00 
2afa3 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
2afa7 033 00 36 7F 7F 
2afab 034 7F 7F 3E 1C 
2afaf 035 08 00 00 00 
2afb3 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
2afb7 037 00 08 1C 3E 
2afbb 038 7F 3E 1C 08 
2afbf 039 00 00 00 00 
2afc3 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
2afc7 03b 18 3C 3C E7 
2afcb 03c E7 E7 18 18 
2afcf 03d 3C 00 00 00 
2afd3 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
2afd7 03f 18 3C 7E FF 
2afdb 040 FF 7E 18 18 
2afdf 041 3C 00 00 00 
2afe3 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
2afe7 043 00 00 00 18 
2afeb 044 3C 3C 18 00 
2afef 045 00 00 00 00 
2aff3 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
2aff7 047 FF FF FF E7 
2affb 048 C3 C3 E7 FF 
2afff 049 FF FF FF FF 
2b003 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
2b007 04b 00 00 3C 66 
2b00b 04c 42 42 66 3C 
2b00f 04d 00 00 00 00 
2b013 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
2b017 04f FF FF C3 99 
2b01b 050 BD BD 99 C3 
2b01f 051 FF FF FF FF 
2b023 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
2b027 053 78 70 58 4C 
2b02b 054 1E 33 33 33 
2b02f 055 33 1E 00 00 
2b033 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
2b037 057 3C 66 66 66 
2b03b 058 66 3C 18 7E 
2b03f 059 18 18 00 00 
2b043 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
2b047 05b FC CC FC 0C 
2b04b 05c 0C 0C 0C 0E 
2b04f 05d 0F 07 00 00 
2b053 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
2b057 05f FE C6 FE C6 
2b05b 060 C6 C6 C6 E6 
2b05f 061 E7 67 03 00 
2b063 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
2b067 063 18 18 DB 3C 
2b06b 064 E7 3C DB 18 
2b06f 065 18 00 00 00 
2b073 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
2b077 067 03 07 0F 1F 
2b07b 068 7F 1F 0F 07 
2b07f 069 03 01 00 00 
2b083 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
2b087 06b 60 70 78 7C 
2b08b 06c 7F 7C 78 70 
2b08f 06d 60 40 00 00 
2b093 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
2b097 06f 18 3C 7E 18 
2b09b 070 18 18 7E 3C 
2b09f 071 18 00 00 00 
2b0a3 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
2b0a7 073 66 66 66 66 
2b0ab 074 66 66 66    | 	byte	$66[7]
2b0ae 075 00 66 66 00 
2b0b2 076 00 00 00 00 
2b0b6 077 00 FE DB DB 
2b0ba 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
2b0be 079 D8 D8 D8 00 
2b0c2 07a 00 00 00 3E 
2b0c6 07b 63 06 1C 36 
2b0ca 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
2b0ce 07d 30 63 3E 00 
2b0d2 07e 00 00 00 00 
2b0d6 07f 00 00 00 00 
2b0da 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
2b0de 081 7F 7F 7F 00 
2b0e2 082 00 00 00 00 
2b0e6 083 00 18 3C 7E 
2b0ea 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
2b0ee 085 3C 18 7E 00 
2b0f2 086 00 00 00 00 
2b0f6 087 00 18 3C 7E 
2b0fa 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
2b0fe 089 18 18 18 00 
2b102 08a 00 00 00 00 
2b106 08b 00 18 18 18 
2b10a 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2b10e 08d 7E 3C 18 00 
2b112 08e 00 00 00 00 
2b116 08f 00 00 00 18 
2b11a 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
2b11e 091 00 00 00 00 
2b122 092 00 00 00 00 
2b126 093 00 00 00    | 	byte	$00[11]
2b129 094 0C 06 7F 06 
2b12d 095 0C 00 00 00 
2b131 096 00 00 00 00 
2b135 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b139 098 00 03 03 03 
2b13d 099 7F 00 00 00 
2b141 09a 00 00 00 00 
2b145 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b149 09c 14 36 7F 36 
2b14d 09d 14 00 00 00 
2b151 09e 00 00 00 00 
2b155 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
2b159 0a0 1C 1C 3E 3E 
2b15d 0a1 7F 7F 00 00 
2b161 0a2 00 00 00 00 
2b165 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
2b169 0a4 7F 3E 3E 1C 
2b16d 0a5 1C 08 00 00 
2b171 0a6 00 00 00 00 
2b175 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b179 0a8 00 00 00 00 
2b17d 0a9 00 00 00 00 
2b181 0aa 00 00 00 00 
2b185 0ab 00 00       | 	byte	$00[14]
2b187 0ab 18 3C 3C 3C 
2b18b 0ac 18 18 18 00 
2b18f 0ad 18 18 00 00 
2b193 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
2b197 0af 66 24 00 00 
2b19b 0b0 00 00 00 00 
2b19f 0b1 00 00 00 00 
2b1a3 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b1a7 0b3 00 36 36 7F 
2b1ab 0b4 36 36 36 7F 
2b1af 0b5 36 36 00 00 
2b1b3 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
2b1b7 0b7 3E 63 43 03 
2b1bb 0b8 3E 60 60 61 
2b1bf 0b9 63 3E 18 18 
2b1c3 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
2b1c7 0bb 00 00 43 63 
2b1cb 0bc 30 18 0C 06 
2b1cf 0bd 63 61 00 00 
2b1d3 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
2b1d7 0bf 1C 36 36 1C 
2b1db 0c0 6E 3B 33 33 
2b1df 0c1 33 6E 00 00 
2b1e3 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
2b1e7 0c3 0C 0C 0C 06 
2b1eb 0c4 00 00 00 00 
2b1ef 0c5 00 00 00 00 
2b1f3 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b1f7 0c7 30 18 0C 0C 
2b1fb 0c8 0C 0C 0C 0C 
2b1ff 0c9 18 30 00 00 
2b203 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
2b207 0cb 0C 18 30 30 
2b20b 0cc 30 30 30 30 
2b20f 0cd 18 0C 00 00 
2b213 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
2b217 0cf 00 00 00 66 
2b21b 0d0 3C FF 3C 66 
2b21f 0d1 00 00 00 00 
2b223 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
2b227 0d3 00 00 00 18 
2b22b 0d4 18 7E 18 18 
2b22f 0d5 00 00 00 00 
2b233 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
2b237 0d7 00 00 00 00 
2b23b 0d8 00 00 00 00 | 	byte	$00[8]
2b23f 0d9 18 18 18 0C 
2b243 0da 00 00 00 00 
2b247 0db 00 00 00 00 
2b24b 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
2b24f 0dd 00 00 00 00 
2b253 0de 00 00 00 00 
2b257 0df 00 00 00 00 
2b25b 0e0 00 00 00 00 | 	byte	$00[16]
2b25f 0e1 18 18 00 00 
2b263 0e2 00 00 00 00 
2b267 0e3 00 00 40 60 
2b26b 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
2b26f 0e5 03 01 00 00 
2b273 0e6 00 00 00 00 
2b277 0e7 1C 36 63 63 
2b27b 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
2b27f 0e9 36 1C 00 00 
2b283 0ea 00 00 00 00 
2b287 0eb 18 1C 1E 18 
2b28b 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
2b28f 0ed 18 7E 00 00 
2b293 0ee 00 00 00 00 
2b297 0ef 3E 63 60 30 
2b29b 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
2b29f 0f1 63 7F 00 00 
2b2a3 0f2 00 00 00 00 
2b2a7 0f3 3E 63 60 60 
2b2ab 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
2b2af 0f5 63 3E 00 00 
2b2b3 0f6 00 00 00 00 
2b2b7 0f7 30 38 3C 36 
2b2bb 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
2b2bf 0f9 30 78 00 00 
2b2c3 0fa 00 00 00 00 
2b2c7 0fb 7F 03 03 03 
2b2cb 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
2b2cf 0fd 63 3E 00 00 
2b2d3 0fe 00 00 00 00 
2b2d7 0ff 1C 06 03 03 
2b2db 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
2b2df 101 63 3E 00 00 
2b2e3 102 00 00 00 00 
2b2e7 103 7F 63 60 60 
2b2eb 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
2b2ef 105 0C 0C 00 00 
2b2f3 106 00 00 00 00 
2b2f7 107 3E 63 63 63 
2b2fb 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
2b2ff 109 63 3E 00 00 
2b303 10a 00 00 00 00 
2b307 10b 3E 63 63 63 
2b30b 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
2b30f 10d 30 1E 00 00 
2b313 10e 00 00 00 00 
2b317 10f 00 00 00 18 
2b31b 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
2b31f 111 18 18 00 00 
2b323 112 00 00 00 00 
2b327 113 00 00 00 18 
2b32b 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
2b32f 115 18 18 0C 00 
2b333 116 00 00 00 00 
2b337 117 00 60 30 18 
2b33b 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
2b33f 119 30 60 00 00 
2b343 11a 00 00 00 00 
2b347 11b 00 00 00 7E 
2b34b 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
2b34f 11d 00 00 00 00 
2b353 11e 00 00 00 00 
2b357 11f 00          | 	byte	$00[9]
2b358 120 06 0C 18 30 
2b35c 121 60 30 18 0C 
2b360 122 06 00 00 00 
2b364 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
2b368 124 63 63 30 18 
2b36c 125 18 18 00 18 
2b370 126 18 00 00 00 
2b374 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
2b378 128 3E 63 63 7B 
2b37c 129 7B 7B 3B 03 
2b380 12a 3E 00 00 00 
2b384 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
2b388 12c 1C 36 63 63 
2b38c 12d 7F 63 63 63 
2b390 12e 63 00 00 00 
2b394 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
2b398 130 66 66 66 3E 
2b39c 131 66 66 66 66 
2b3a0 132 3F 00 00 00 
2b3a4 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
2b3a8 134 66 43 03 03 
2b3ac 135 03 03 43 66 
2b3b0 136 3C 00 00 00 
2b3b4 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
2b3b8 138 36 66 66 66 
2b3bc 139 66 66 66 36 
2b3c0 13a 1F 00 00 00 
2b3c4 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
2b3c8 13c 66 46 16 1E 
2b3cc 13d 16 06 46 66 
2b3d0 13e 7F 00 00 00 
2b3d4 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
2b3d8 140 66 46 16 1E 
2b3dc 141 16 06 06 06 
2b3e0 142 0F 00 00 00 
2b3e4 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
2b3e8 144 66 43 03 03 
2b3ec 145 7B 63 63 66 
2b3f0 146 5C 00 00 00 
2b3f4 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
2b3f8 148 63 63 63 7F 
2b3fc 149 63 63 63 63 
2b400 14a 63 00 00 00 
2b404 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
2b408 14c 18 18 18 18 
2b40c 14d 18 18 18 18 | 	byte	$18[8]
2b410 14e 3C 00 00 00 
2b414 14f 00 00 00 78 
2b418 150 30 30 30 30 
2b41c 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
2b420 152 1E 00 00 00 
2b424 153 00 00 00 67 
2b428 154 66 66 36 1E 
2b42c 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
2b430 156 67 00 00 00 
2b434 157 00 00 00 0F 
2b438 158 06 06 06 06 
2b43c 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
2b440 15a 7F 00 00 00 
2b444 15b 00 00 00 63 
2b448 15c 77 7F 7F 6B 
2b44c 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
2b450 15e 63 00 00 00 
2b454 15f 00 00 00 63 
2b458 160 67 6F 7F 7B 
2b45c 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
2b460 162 63 00 00 00 
2b464 163 00 00 00 3E 
2b468 164 63 63 63 63 
2b46c 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
2b470 166 3E 00 00 00 
2b474 167 00 00 00 3F 
2b478 168 66 66 66 3E 
2b47c 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
2b480 16a 0F 00 00 00 
2b484 16b 00 00 00 3E 
2b488 16c 63 63 63 63 
2b48c 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
2b490 16e 3E 30 70 00 
2b494 16f 00 00 00 3F 
2b498 170 66 66 66 3E 
2b49c 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
2b4a0 172 67 00 00 00 
2b4a4 173 00 00 00 3E 
2b4a8 174 63 63 06 1C 
2b4ac 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
2b4b0 176 3E 00 00 00 
2b4b4 177 00 00 00 7E 
2b4b8 178 7E 5A 18 18 
2b4bc 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
2b4c0 17a 3C 00 00 00 
2b4c4 17b 00 00 00 63 
2b4c8 17c 63 63 63 63 
2b4cc 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
2b4d0 17e 3E 00 00 00 
2b4d4 17f 00 00 00 63 
2b4d8 180 63 63 63 63 
2b4dc 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
2b4e0 182 08 00 00 00 
2b4e4 183 00 00 00 63 
2b4e8 184 63 63 63 6B 
2b4ec 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
2b4f0 186 36 00 00 00 
2b4f4 187 00 00 00 63 
2b4f8 188 63 36 3E 1C 
2b4fc 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
2b500 18a 63 00 00 00 
2b504 18b 00 00 00 66 
2b508 18c 66 66 66 3C 
2b50c 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
2b510 18e 3C 00 00 00 
2b514 18f 00 00 00 7F 
2b518 190 63 61 30 18 
2b51c 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
2b520 192 7F 00 00 00 
2b524 193 00 00 00 3C 
2b528 194 0C 0C 0C 0C 
2b52c 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
2b530 196 3C 00 00 00 
2b534 197 00 00 00 00 
2b538 198 01 03 07 0E 
2b53c 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
2b540 19a 40 00 00 00 
2b544 19b 00 00 00 3C 
2b548 19c 30 30 30 30 
2b54c 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
2b550 19e 3C 00 00 00 
2b554 19f 1C 36 00 00 
2b558 1a0 00 00 00 00 
2b55c 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b560 1a2 00 00 00 00 
2b564 1a3 00 00 00 00 
2b568 1a4 00 00 00 00 
2b56c 1a5 00 00 00 00 
2b570 1a6 00          | 	byte	$00[17]
2b571 1a6 FF 00 00 0C 
2b575 1a7 18 00 00 00 
2b579 1a8 00 00 00 00 
2b57d 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b581 1aa 00 00 00 00 
2b585 1ab 00 00 00 00 
2b589 1ac 00          | 	byte	$00[9]
2b58a 1ac 1E 30 3E 33 
2b58e 1ad 33 33 6E 00 
2b592 1ae 00 00 00 00 
2b596 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
2b59a 1b0 1E 36 66 66 
2b59e 1b1 66 66 3E 00 
2b5a2 1b2 00 00 00 00 
2b5a6 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b5aa 1b4 3E 63 03 03 
2b5ae 1b5 03 63 3E 00 
2b5b2 1b6 00 00 00 00 
2b5b6 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
2b5ba 1b8 3C 36 33 33 
2b5be 1b9 33 33 6E 00 
2b5c2 1ba 00 00 00 00 
2b5c6 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b5ca 1bc 3E 63 7F 03 
2b5ce 1bd 03 63 3E 00 
2b5d2 1be 00 00 00 00 
2b5d6 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
2b5da 1c0 0C 1E 0C 0C 
2b5de 1c1 0C 0C 1E 00 
2b5e2 1c2 00 00 00 00 
2b5e6 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b5ea 1c4 6E 33 33 33 
2b5ee 1c5 33 33 3E 30 
2b5f2 1c6 33 1E 00 00 
2b5f6 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
2b5fa 1c8 36 6E 66 66 
2b5fe 1c9 66 66 67 00 
2b602 1ca 00 00 00 00 
2b606 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
2b60a 1cc 1C 18 18 18 
2b60e 1cd 18 18 3C 00 
2b612 1ce 00 00 00 00 
2b616 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
2b61a 1d0 70 60 60 60 
2b61e 1d1 60 60 60 66 
2b622 1d2 66 3C 00 00 
2b626 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
2b62a 1d4 66 36 1E 1E 
2b62e 1d5 36 66 67 00 
2b632 1d6 00 00 00 00 
2b636 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
2b63a 1d8 18 18 18 18 
2b63e 1d9 18 18       | 	byte	$18[6]
2b640 1da 3C 00 00 00 
2b644 1db 00 00 00 00 
2b648 1dc 00 00 37 7F 
2b64c 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
2b650 1de 63 00 00 00 
2b654 1df 00 00 00 00 
2b658 1e0 00 00 3B 66 
2b65c 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
2b660 1e2 66 00 00 00 
2b664 1e3 00 00 00 00 
2b668 1e4 00 00 3E 63 
2b66c 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
2b670 1e6 3E 00 00 00 
2b674 1e7 00 00 00 00 
2b678 1e8 00 00 3B 66 
2b67c 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
2b680 1ea 3E 06 06 0F 
2b684 1eb 00 00 00 00 
2b688 1ec 00 00 6E 33 
2b68c 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
2b690 1ee 3E 30 30 78 
2b694 1ef 00 00 00 00 
2b698 1f0 00 00 3B 6E 
2b69c 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
2b6a0 1f2 0F 00 00 00 
2b6a4 1f3 00 00 00 00 
2b6a8 1f4 00 00 3E 63 
2b6ac 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
2b6b0 1f6 3E 00 00 00 
2b6b4 1f7 00 00 00 08 
2b6b8 1f8 0C 0C 3F 0C 
2b6bc 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
2b6c0 1fa 38 00 00 00 
2b6c4 1fb 00 00 00 00 
2b6c8 1fc 00 00 33 33 
2b6cc 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
2b6d0 1fe 6E 00 00 00 
2b6d4 1ff 00 00 00 00 
2b6d8 200 00 00 63 63 
2b6dc 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
2b6e0 202 1C 00 00 00 
2b6e4 203 00 00 00 00 
2b6e8 204 00 00 63 63 
2b6ec 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
2b6f0 206 36 00 00 00 
2b6f4 207 00 00 00 00 
2b6f8 208 00 00 63 36 
2b6fc 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
2b700 20a 63 00 00 00 
2b704 20b 00 00 00 00 
2b708 20c 00 00 63 63 
2b70c 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
2b710 20e 7E 60 30 1F 
2b714 20f 00 00 00 00 
2b718 210 00 00 7F 33 
2b71c 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
2b720 212 7F 00 00 00 
2b724 213 00 00 00 70 
2b728 214 18 18 18 0E 
2b72c 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
2b730 216 70 00 00 00 
2b734 217 00 00 00 18 
2b738 218 18 18 18 18 
2b73c 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
2b740 21a 18 00 00 00 
2b744 21b 00 00 00 0E 
2b748 21c 18 18 18 70 
2b74c 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
2b750 21e 0E 00 00 00 
2b754 21f 6E 3B 00 00 
2b758 220 00 00 00 00 
2b75c 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b760 222 00 00 00 00 
2b764 223 00 00 00 00 
2b768 224 00 00       | 	byte	$00[10]
2b76a 224 08 1C 36 63 
2b76e 225 63 63 7F 00 
2b772 226 00 00 00 00 
2b776 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
2b77a 228 03 03 03 03 
2b77e 229 43 66 3C 18 
2b782 22a 30 1E 00 00 
2b786 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
2b78a 22c 33 33 33 33 
2b78e 22d 33 33       | 	byte	$33[6]
2b790 22e 6E 00 00 00 
2b794 22f 00 00 60 30 
2b798 230 18 00 3E 63 
2b79c 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
2b7a0 232 3E 00 00 00 
2b7a4 233 00 00 08 1C 
2b7a8 234 36 00 1E 30 
2b7ac 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
2b7b0 236 6E 00 00 00 
2b7b4 237 00 00 00 00 
2b7b8 238 33 00 1E 30 
2b7bc 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
2b7c0 23a 6E 00 00 00 
2b7c4 23b 00 00 1C 36 
2b7c8 23c 1C 00 33 33 
2b7cc 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
2b7d0 23e 6E 00 00 00 
2b7d4 23f 00 00 60 30 
2b7d8 240 18 00 3E 63 
2b7dc 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
2b7e0 242 3E 00 00 00 
2b7e4 243 00 00 00 00 
2b7e8 244 00 00 3E 63 
2b7ec 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
2b7f0 246 3E 18 30 1E 
2b7f4 247 00 00 00 1C 
2b7f8 248 58 78 38 18 
2b7fc 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
2b800 24a 3C 00 00 00 
2b804 24b 00 00 00 00 
2b808 24c 63 00 3E 63 
2b80c 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
2b810 24e 3E 00 00 00 
2b814 24f 66 33 00 3E 
2b818 250 63 63 63 63 
2b81c 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
2b820 252 3E 00 00 00 
2b824 253 00 00 CC 66 
2b828 254 33 00 3E 63 
2b82c 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
2b830 256 3E 00 00 00 
2b834 257 00 00 18 3C 
2b838 258 66 00 1C 18 
2b83c 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
2b840 25a 3C 00 00 00 
2b844 25b 30 18 00 7F 
2b848 25c 63 61 30 18 
2b84c 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
2b850 25e 7F 00 00 00 
2b854 25f 00 63 00 08 
2b858 260 1C 36 63 63 
2b85c 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
2b860 262 63 00 00 00 
2b864 263 30 18 00 3C 
2b868 264 66 43 03 03 
2b86c 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
2b870 266 3C 00 00 00 
2b874 267 30 18 00 7F 
2b878 268 66 46 16 1E 
2b87c 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
2b880 26a 7F 00 00 00 
2b884 26b 0C 06 00 0F 
2b888 26c 06 06 06 06 
2b88c 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
2b890 26e 7F 00 00 00 
2b894 26f 30 18 00 1C 
2b898 270 18 18 18 18 
2b89c 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
2b8a0 272 3C 00 00 00 
2b8a4 273 00 00 08 1C 
2b8a8 274 36 00 3E 63 
2b8ac 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
2b8b0 276 3E 00 00 00 
2b8b4 277 00 00 00 00 
2b8b8 278 63 00 3E 63 
2b8bc 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
2b8c0 27a 3E 00 00 00 
2b8c4 27b 00 00 00 6F 
2b8c8 27c 46 26 06 06 
2b8cc 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
2b8d0 27e 7F 00 00 00 
2b8d4 27f 00 00 00 6E 
2b8d8 280 4C 2C 0C 0C 
2b8dc 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
2b8e0 282 1E 00 00 00 
2b8e4 283 30 18 00 3E 
2b8e8 284 63 63 06 1C 
2b8ec 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
2b8f0 286 3E 00 00 00 
2b8f4 287 00 00 60 30 
2b8f8 288 18 00 3E 63 
2b8fc 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
2b900 28a 3E 00 00 00 
2b904 28b 00 63 00 3E 
2b908 28c 63 63 63 63 
2b90c 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
2b910 28e 3E 00 00 00 
2b914 28f 00 63 00 63 
2b918 290 63 63 63 63 
2b91c 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
2b920 292 3E 00 00 00 
2b924 293 6C 38 00 7E 
2b928 294 7E 5A 18 18 
2b92c 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
2b930 296 3C 00 00 00 
2b934 297 00 00 60 48 
2b938 298 2C 0C 3F 0C 
2b93c 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
2b940 29a 38 00 00 00 
2b944 29b 00 00 00 0F 
2b948 29c 26 36 1E 0E 
2b94c 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
2b950 29e 7F 00 00 00 
2b954 29f 00 00 00 00 
2b958 2a0 00 63 36 1C 
2b95c 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
2b960 2a2 00 00 00 00 
2b964 2a3 00 00       | 	byte	$00[6]
2b966 2a3 36 1C 08 00 
2b96a 2a4 3E 63 03 03 
2b96e 2a5 03 63 3E 00 
2b972 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
2b976 2a7 30 18 0C 00 
2b97a 2a8 1E 30 3E 33 
2b97e 2a9 33 33 6E 00 
2b982 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
2b986 2ab 60 30 18 00 
2b98a 2ac 1C 18 18 18 
2b98e 2ad 18 18 3C 00 
2b992 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
2b996 2af 60 30 18 00 
2b99a 2b0 3E 63 63 63 
2b99e 2b1 63 63 3E 00 
2b9a2 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
2b9a6 2b3 30 18 0C 00 
2b9aa 2b4 33 33 33 33 
2b9ae 2b5 33 33 6E 00 
2b9b2 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
2b9b6 2b7 00 08 1C 36 
2b9ba 2b8 63 63 7F 63 
2b9be 2b9 63 63 63 18 
2b9c2 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
2b9c6 2bb 00 00 00 00 
2b9ca 2bc 1E 30 3E 33 
2b9ce 2bd 33 33 6E 18 
2b9d2 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
2b9d6 2bf 00 7F 63 61 
2b9da 2c0 30 18 0C 06 
2b9de 2c1 43 63 7F 00 
2b9e2 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
2b9e6 2c3 36 1C 08 00 
2b9ea 2c4 7F 33 18 0C 
2b9ee 2c5 06 63 7F 00 
2b9f2 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
2b9f6 2c7 00 7F 66 46 
2b9fa 2c8 16 1E 16 06 
2b9fe 2c9 46 66 7F 18 
2ba02 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
2ba06 2cb 00 00 00 00 
2ba0a 2cc 3E 63 7F 03 
2ba0e 2cd 03 63 3E 18 
2ba12 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
2ba16 2cf 00 3C 66 03 
2ba1a 2d0 1F 03 0F 03 
2ba1e 2d1 03 66 3C 00 
2ba22 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
2ba26 2d3 60 30 18 00 
2ba2a 2d4 7F 33 18 0C 
2ba2e 2d5 06 63 7F 00 
2ba32 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
2ba36 2d7 00 3C 66 43 
2ba3a 2d8 03 03 03 03 
2ba3e 2d9 43 66 3C 00 
2ba42 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
2ba46 2db 00 00 00 00 
2ba4a 2dc 3E 63 06 1C 
2ba4e 2dd 30 63 3E 18 
2ba52 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
2ba56 2df 00 00 00 00 
2ba5a 2e0 00 00       | 	byte	$00[6]
2ba5c 2e1 6C 36 1B 36 
2ba60 2e2 6C 00 00 00 
2ba64 2e3 00 00 00 00 
2ba68 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ba6c 2e5 1B 36 6C 36 
2ba70 2e6 1B 00 00 00 
2ba74 2e7 88 22 88 22 
2ba78 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
2ba7c 2e9 88 22 88 22 
2ba80 2ea 88 22 88 22 
2ba84 2eb AA 55 AA 55 
2ba88 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
2ba8c 2ed AA 55 AA 55 
2ba90 2ee AA 55 AA 55 
2ba94 2ef BB EE BB EE 
2ba98 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
2ba9c 2f1 BB EE BB EE 
2baa0 2f2 BB EE BB EE 
2baa4 2f3 18 18 18 18 
2baa8 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
2baac 2f5 18 18 18 18 
2bab0 2f6 18 18 18 18 
2bab4 2f7 18 18 18 18 
2bab8 2f8 18 18 18    | 	byte	$18[15]
2babb 2f8 1F 18 18 18 
2babf 2f9 18 18 18 18 
2bac3 2fa 18 30 18 00 
2bac7 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
2bacb 2fc 63 7F 63 63 
2bacf 2fd 63 63 00 00 
2bad3 2fe 00 1C 36 00 
2bad7 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
2badb 300 63 7F 63 63 
2badf 301 63 63 00 00 
2bae3 302 00 36 1C 00 
2bae7 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
2baeb 304 1E 16 06 46 
2baef 305 66 7F 00 00 
2baf3 306 00 00 00 00 
2baf7 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
2bafb 308 1C 30 60 63 
2baff 309 63 3E 18 30 
2bb03 30a 1E 6C 6C 6C 
2bb07 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
2bb0b 30c 6F 6C 6C 6C 
2bb0f 30d 6C 6C 6C 6C 
2bb13 30e 6C 6C 6C 6C 
2bb17 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2bb1b 310 6C 6C 6C 6C 
2bb1f 311 6C 6C 6C 6C 
2bb23 312 6C          | 	byte	$6c[9]
2bb24 313 00 00 00 00 
2bb28 314 00          | 	byte	$00[5]
2bb29 314 7F 60 6F 6C 
2bb2d 315 6C 6C 6C 6C 
2bb31 316 6C 6C 6C 6C 
2bb35 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2bb39 318 6F 60 7F 00 
2bb3d 319 00 00 00 00 
2bb41 31a 00 00 00 18 
2bb45 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
2bb49 31c 61 30 18 0C 
2bb4d 31d 06 43 63 7F 
2bb51 31e 00 00 00 00 
2bb55 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
2bb59 320 00 7F 33 18 
2bb5d 321 0C 06 63 7F 
2bb61 322 00 00 00 00 
2bb65 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
2bb69 324 00 00 1F 18 
2bb6d 325 18 18 18 18 
2bb71 326 18 18 18 18 
2bb75 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2bb79 328 18 18 F8 00 
2bb7d 329 00 00 00 00 
2bb81 32a 00 00 00 18 
2bb85 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
2bb89 32c 18 18 FF 00 
2bb8d 32d 00 00 00 00 
2bb91 32e 00 00 00 00 
2bb95 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bb99 330 00 00 FF 18 
2bb9d 331 18 18 18 18 
2bba1 332 18 18 18 18 
2bba5 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2bba9 334 18 18 F8 18 
2bbad 335 18 18 18 18 
2bbb1 336 18 18 18 00 
2bbb5 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
2bbb9 338 00 00 FF 00 
2bbbd 339 00 00 00 00 
2bbc1 33a 00 00 00 18 
2bbc5 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
2bbc9 33c 18 18 FF 18 
2bbcd 33d 18 18 18 18 
2bbd1 33e 18 18 18 63 
2bbd5 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
2bbd9 340 36 63 63 7F 
2bbdd 341 63 63 63 63 
2bbe1 342 00 00 00 00 
2bbe5 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
2bbe9 344 00 1E 30 3E 
2bbed 345 33 33 33 6E 
2bbf1 346 00 00 00 6C 
2bbf5 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
2bbf9 348 EC 0C FC 00 
2bbfd 349 00 00 00 00 
2bc01 34a 00 00 00 00 
2bc05 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bc09 34c FC 0C EC 6C 
2bc0d 34d 6C 6C 6C 6C 
2bc11 34e 6C 6C 6C 6C 
2bc15 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2bc19 350 EF 00 FF 00 
2bc1d 351 00 00 00 00 
2bc21 352 00 00 00 00 
2bc25 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bc29 354 FF 00 EF 6C 
2bc2d 355 6C 6C 6C 6C 
2bc31 356 6C 6C 6C 6C 
2bc35 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2bc39 358 EC 0C EC 6C 
2bc3d 359 6C 6C 6C 6C 
2bc41 35a 6C 6C 6C 00 
2bc45 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
2bc49 35c FF 00 FF 00 
2bc4d 35d 00 00 00 00 
2bc51 35e 00 00 00 6C 
2bc55 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
2bc59 360 EF 00 EF 6C 
2bc5d 361 6C 6C 6C 6C 
2bc61 362 6C 6C 6C 00 
2bc65 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
2bc69 364 63 3E 63 63 
2bc6d 365 63 63 3E 63 
2bc71 366 00 00 00 00 
2bc75 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
2bc79 368 30 3C 36 33 
2bc7d 369 33 33 33 6E 
2bc81 36a 00 00 00 00 
2bc85 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
2bc89 36c 66 66 6F 66 
2bc8d 36d 66 66 36 1F 
2bc91 36e 00 00 00 36 
2bc95 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
2bc99 370 66 66 66 66 
2bc9d 371 66 66       | 	byte	$66[6]
2bc9f 371 36 1F 00 00 
2bca3 372 00 00 63 00 
2bca7 373 7F 66 46 16 
2bcab 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
2bcaf 375 66 7F 00 00 
2bcb3 376 00 6C 38 00 
2bcb7 377 38 30 30 3C 
2bcbb 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
2bcbf 379 33 6E 00 00 
2bcc3 37a 00 36 1C 00 
2bcc7 37b 63 67 6F 7F 
2bccb 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
2bccf 37d 63 63 00 00 
2bcd3 37e 00 30 18 00 
2bcd7 37f 3C 18 18 18 
2bcdb 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
2bcdf 381 18 3C 00 00 
2bce3 382 00 3C 66 00 
2bce7 383 3C 18 18 18 
2bceb 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
2bcef 385 18 3C 00 00 
2bcf3 386 00 00 00 36 
2bcf7 387 1C 08 00 3E 
2bcfb 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
2bcff 389 63 3E 00 00 
2bd03 38a 00 18 18 18 
2bd07 38b 18 18 18 18 
2bd0b 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
2bd0f 38d 00 00 00 00 
2bd13 38e 00 00 00 00 
2bd17 38f 00 00 00 00 | 	byte	$00[12]
2bd1b 390 F8 18 18 18 
2bd1f 391 18 18 18 18 
2bd23 392 18 FF FF FF 
2bd27 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
2bd2b 394 FF FF FF FF 
2bd2f 395 FF FF FF FF 
2bd33 396 FF          | 	byte	$ff[9]
2bd34 397 00 00 00 00 
2bd38 398 00 00 00    | 	byte	$00[7]
2bd3b 398 FF FF FF FF 
2bd3f 399 FF FF FF FF 
2bd43 39a FF          | 	byte	$ff[9]
2bd44 39b 00 00 00 7E 
2bd48 39c 7E 5A 18 18 
2bd4c 39d 18 18 18 18 
2bd50 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
2bd54 39f 1C 36 1C 63 
2bd58 3a0 63 63 63 63 
2bd5c 3a1 63 63 63 63 
2bd60 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2bd64 3a3 FF FF FF FF 
2bd68 3a4 FF FF FF    | 	byte	$ff[7]
2bd6b 3a4 00 00 00 00 
2bd6f 3a5 00 00 00 00 
2bd73 3a6 00          | 	byte	$00[9]
2bd74 3a7 30 18 00 3E 
2bd78 3a8 63 63 63 63 
2bd7c 3a9 63 63 63 63 
2bd80 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2bd84 3ab 00 00 00 1E 
2bd88 3ac 33 33 33 1B 
2bd8c 3ad 33 63 63 63 
2bd90 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
2bd94 3af 1C 36 00 3E 
2bd98 3b0 63 63 63 63 
2bd9c 3b1 63 63 63 63 
2bda0 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2bda4 3b3 30 18 00 63 
2bda8 3b4 67 6F 7F 7B 
2bdac 3b5 73 63 63 63 
2bdb0 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
2bdb4 3b7 00 00 60 30 
2bdb8 3b8 18 00 3B 66 
2bdbc 3b9 66 66 66 66 
2bdc0 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
2bdc4 3bb 00 00 36 1C 
2bdc8 3bc 08 00 3B 66 
2bdcc 3bd 66 66 66 66 
2bdd0 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
2bdd4 3bf 36 1C 00 3E 
2bdd8 3c0 63 63 06 1C 
2bddc 3c1 30 60 63 63 
2bde0 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
2bde4 3c3 00 00 36 1C 
2bde8 3c4 08 00 3E 63 
2bdec 3c5 06 1C 30 63 
2bdf0 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
2bdf4 3c7 30 18 00 3F 
2bdf8 3c8 66 66 66 3E 
2bdfc 3c9 36 66 66 66 
2be00 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
2be04 3cb 30 18 00 63 
2be08 3cc 63 63 63 63 
2be0c 3cd 63 63 63 63 
2be10 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2be14 3cf 00 00 60 30 
2be18 3d0 18 00 3B 6E 
2be1c 3d1 66 06 06 06 
2be20 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
2be24 3d3 66 33 00 63 
2be28 3d4 63 63 63 63 
2be2c 3d5 63 63 63 63 
2be30 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2be34 3d7 00 00 60 30 
2be38 3d8 18 00 63 63 
2be3c 3d9 63 63 63 63 
2be40 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
2be44 3db 30 18 00 66 
2be48 3dc 66 66 66 3C 
2be4c 3dd 18 18 18 18 
2be50 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
2be54 3df 00 00 00 08 
2be58 3e0 0C 0C 3F 0C 
2be5c 3e1 0C 0C 0C 6C 
2be60 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
2be64 3e3 30 18 00 00 
2be68 3e4 00 00 00 00 
2be6c 3e5 00 00 00 00 
2be70 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2be74 3e7 00 00 00 00 
2be78 3e8 00 00 00 00 | 	byte	$00[8]
2be7c 3e9 7F 00 00 00 
2be80 3ea 00 00 00 00 
2be84 3eb 66 33 00 00 
2be88 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
2be8c 3ed 00 00 00 00 
2be90 3ee 00 00 00 00 
2be94 3ef 00 00 00 00 
2be98 3f0 00 00 00 00 
2be9c 3f1 00 00 00 00 
2bea0 3f2 00          | 	byte	$00[21]
2bea1 3f2 0C 06 3C 36 
2bea5 3f3 1C 00 00 00 
2bea9 3f4 00 00 00 00 
2bead 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2beb1 3f6 00 00 00 63 
2beb5 3f7 3E 00 00 00 
2beb9 3f8 00 00 00 00 
2bebd 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bec1 3fa 00 00 00 00 
2bec5 3fb 3E 63 06 1C 
2bec9 3fc 36 63 63 36 
2becd 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
2bed1 3fe 00 00 00 00 
2bed5 3ff 00 00 00 00 | 	byte	$00[8]
2bed9 400 18 00 7E 00 
2bedd 401 18 00 00 00 
2bee1 402 00 00 00 00 
2bee5 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bee9 404 00 00 00 00 
2beed 405 00 00 00 00 | 	byte	$00[8]
2bef1 406 18 30 1E 00 
2bef5 407 00 00 1C 36 
2bef9 408 36 1C 00 00 
2befd 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
2bf01 40a 00 00 00 00 
2bf05 40b 63 00 00 00 
2bf09 40c 00 00 00 00 
2bf0d 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bf11 40e 00 00 00 18 
2bf15 40f 18 00 00 00 
2bf19 410 00 00 00 00 
2bf1d 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bf21 412 00 00 00 00 
2bf25 413 00          | 	byte	$00[5]
2bf26 413 CC 66 33 00 
2bf2a 414 33 33 33 33 
2bf2e 415 33 33 6E 00 
2bf32 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
2bf36 417 00 3F 66 66 
2bf3a 418 66 3E 36 66 
2bf3e 419 66 66 6F 00 
2bf42 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
2bf46 41b 36 1C 08 00 
2bf4a 41c 3B 6E 66 06 
2bf4e 41d 06 06 0F 00 
2bf52 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
2bf56 41f 00 00 00 7E 
2bf5a 420 7E 7E 7E 7E 
2bf5e 421 7E 7E 00 00 
2bf62 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
2bf66 423 00 00 00 00 
2bf6a 424 00 00 00 00 
2bf6e 425 00 00 00 00 
2bf72 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bf74 427             | 'vga_font       file "vgafont.def"
2bf74 427 00 00 00 00 
      ...             
2bfa4 433 00 00 00 00 
2bfa8 434 00 00 00    | st_font        file "st4font.def"
2bfab 434 FF FF 00 00 
2bfaf 435 00 00 00 00 
2bfb3 436 00 18 18 18 
2bfb7 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2bfbb 438 18 18 18 18 
2bfbf 439 18 18 18 18 
2bfc3 43a 18          | 	byte	$18[9]
2bfc4 43b 00 00 00 00 
2bfc8 43c 00 00 00    | 	byte	$00[7]
2bfcb 43c FF FF 18 18 
2bfcf 43d 18 18 18 18 
2bfd3 43e 18 18 18 18 
2bfd7 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2bfdb 440 FF FF 00 00 
2bfdf 441 00 00 00 00 
2bfe3 442 00 18 18 18 
2bfe7 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2bfeb 444 1F 1F 18 18 
2bfef 445 18 18 18 18 
2bff3 446 18 18 18 18 
2bff7 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2bffb 448 F8 F8 18 18 
2bfff 449 18 18 18 18 
2c003 44a 18 00 00 00 
2c007 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2c00b 44c 1F 1F 18 18 
2c00f 44d 18 18 18 18 
2c013 44e 18 00 00 00 
2c017 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2c01b 450 F8 F8 18 18 
2c01f 451 18 18 18 18 
2c023 452 18 18 18 18 
2c027 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2c02b 454 1F 1F 00 00 
2c02f 455 00 00 00 00 
2c033 456 00 18 18 18 
2c037 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2c03b 458 F8 F8 00 00 
2c03f 459 00 00 00 00 
2c043 45a 00 18 18 18 
2c047 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2c04b 45c FF FF 18 18 
2c04f 45d 18 18 18 18 
2c053 45e 18 00 00 18 
2c057 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
2c05b 460 66 7E 7E 66 
2c05f 461 66 66 66 30 
2c063 462 18 00 00 7E 
2c067 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
2c06b 464 3E 06 06 06 
2c06f 465 06 7E 7E 18 
2c073 466 0C 30 18 3C 
2c077 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
2c07b 468 06 06 06 66 
2c07f 469 66 7E 3C 00 
2c083 46a 00 30 18 66 
2c087 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
2c08b 46c 7E 7E 76 76 
2c08f 46d 66 66 66 00 
2c093 46e 00 30 18 7C 
2c097 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
2c09b 470 1C 38 70 60 
2c09f 471 60 7E 3E 00 
2c0a3 472 00 30 18 7E 
2c0a7 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
2c0ab 474 18 0C 0C 06 
2c0af 475 06 7E 7E 00 
2c0b3 476 00 18 18 00 
2c0b7 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
2c0bb 478 18 18 0C 0C 
2c0bf 479 06 7E 7E 00 
2c0c3 47a 00 30 18 3C 
2c0c7 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
2c0cb 47c 66 66 66 66 
2c0cf 47d 66          | 	byte	$66[5]
2c0d0 47e 7E 3C 00 00 
2c0d4 47f 00 00 06 06 
2c0d8 480 06 06 16 1E 
2c0dc 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
2c0e0 482 7E 7E 00 00 
2c0e4 483 00 00 00 00 
2c0e8 484 00 3C 7C 60 
2c0ec 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
2c0f0 486 7E 7C 30 18 
2c0f4 487 00 00 00 00 
2c0f8 488 00 3C 7E 66 
2c0fc 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
2c100 48a 7E 7C 18 0C 
2c104 48b 00 00 30 18 
2c108 48c 00 3C 3E 06 
2c10c 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
2c110 48e 7E 7C 00 00 
2c114 48f 00 00 30 18 
2c118 490 00 3E 7E 66 
2c11c 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
2c120 492 66 66 00 00 
2c124 493 00 00 30 18 
2c128 494 00 7C 7E 06 
2c12c 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
2c130 496 7E 3E 00 00 
2c134 497 00 00 30 18 
2c138 498 00 7E 7E 30 
2c13c 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
2c140 49a 7E 7E 00 00 
2c144 49b 00 00 18 18 
2c148 49c 00 7E 7E 30 
2c14c 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
2c150 49e 7E 7E 00 00 
2c154 49f 00 00 30 18 
2c158 4a0 00 3C 7E 66 
2c15c 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
2c160 4a2 7E 3C 00 00 
2c164 4a3 00 00 1C 1C 
2c168 4a4 18 18 38 3C 
2c16c 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
2c170 4a6 3C 3C 00 00 
2c174 4a7 00 00 00 00 
2c178 4a8 00 00 00 00 
2c17c 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2c180 4aa 00 00 00 00 
2c184 4ab 00 00       | 	byte	$00[6]
2c186 4ab 18 18 18 18 
2c18a 4ac 18 18 18 18 | 	byte	$18[8]
2c18e 4ad 00 00 18 18 
2c192 4ae 00 00 00 00 
2c196 4af 66 66 66 66 
2c19a 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
2c19e 4b1 00 00 00 00 
2c1a2 4b2 00 00 00 00 
2c1a6 4b3 00          | 	byte	$00[9]
2c1a7 4b3 66 66 FF FF 
2c1ab 4b4 66 66 FF FF 
2c1af 4b5 66 66 00 00 
2c1b3 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
2c1b7 4b7 7C 7E 06 06 
2c1bb 4b8 3E 7C 60 60 
2c1bf 4b9 7E 3E 18 18 
2c1c3 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
2c1c7 4bb 66 30 30 18 
2c1cb 4bc 18 0C 0C 66 
2c1cf 4bd 66 00 00 00 
2c1d3 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
2c1d7 4bf 66 66 3C 1C 
2c1db 4c0 1C FC FE 66 
2c1df 4c1 66 FE FC 00 
2c1e3 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
2c1e7 4c3 18 18 18 18 
2c1eb 4c4 00 00 00 00 
2c1ef 4c5 00 00 00 00 
2c1f3 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
2c1f7 4c7 18 1C 0C 0C 
2c1fb 4c8 0C 0C 0C 0C 
2c1ff 4c9 1C 18 30 00 
2c203 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
2c207 4cb 18 38 30 30 
2c20b 4cc 30 30 30 30 
2c20f 4cd 38 18 0C 00 
2c213 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
2c217 4cf 66 66 3C 3C 
2c21b 4d0 FF FF 3C 3C 
2c21f 4d1 66 66 00 00 
2c223 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
2c227 4d3 00 18 18 18 
2c22b 4d4 7E 7E 18 18 
2c22f 4d5 18 00 00 00 
2c233 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2c237 4d7 00 00 00 00 
2c23b 4d8 00 00       | 	byte	$00[6]
2c23d 4d9 18 18 18 18 
2c241 4da 18          | 	byte	$18[5]
2c242 4da 0C 04 00 00 
2c246 4db 00 00 00 00 
2c24a 4dc 7E 7E 00 00 
2c24e 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
2c252 4de 00 00 00 00 
2c256 4df 00 00 00 00 
2c25a 4e0 00 00 00 00 
2c25e 4e1 00          | 	byte	$00[13]
2c25f 4e1 18 18 18 00 
2c263 4e2 00 00 00 60 
2c267 4e3 60 60 30 30 
2c26b 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
2c26f 4e5 06 06 06 00 
2c273 4e6 00 00 00 3C 
2c277 4e7 7E 66 66 66 
2c27b 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
2c27f 4e9 66 7E 3C 00 
2c283 4ea 00 00 00 18 
2c287 4eb 18 1C 1C 18 
2c28b 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
2c28f 4ed 18 7E 7E 00 
2c293 4ee 00 00 00 3C 
2c297 4ef 7E 66 66 30 
2c29b 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
2c29f 4f1 0C 7E 7E 00 
2c2a3 4f2 00 00 00 7E 
2c2a7 4f3 7E 30 30 18 
2c2ab 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
2c2af 4f5 66 7E 3C 00 
2c2b3 4f6 00 00 00 30 
2c2b7 4f7 30 38 38 3C 
2c2bb 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
2c2bf 4f9 7E 30 30 00 
2c2c3 4fa 00 00 00 7E 
2c2c7 4fb 7E 06 06 3E 
2c2cb 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
2c2cf 4fd 66 7E 3C 00 
2c2d3 4fe 00 00 00 38 
2c2d7 4ff 3C 0E 06 06 
2c2db 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
2c2df 501 66 7E 3C 00 
2c2e3 502 00 00 00 7E 
2c2e7 503 7E 60 60 30 
2c2eb 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
2c2ef 505 0C 0C 0C 00 
2c2f3 506 00 00 00 3C 
2c2f7 507 7E 66 66 3C 
2c2fb 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
2c2ff 509 66 7E 3C 00 
2c303 50a 00 00 00 3C 
2c307 50b 7E 66 66 7E 
2c30b 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
2c30f 50d 70 3C 1C 00 
2c313 50e 00 00 00 00 
2c317 50f 00 00 18 18 
2c31b 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
2c31f 511 18 18 18 00 
2c323 512 00 00 00 00 
2c327 513 00 00 18 18 
2c32b 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
2c32f 515 18 18 18 0C 
2c333 516 04 00 00 00 
2c337 517 70 38 1C 0E 
2c33b 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
2c33f 519 70 00 00 00 
2c343 51a 00 00 00 00 
2c347 51b 00 00 7E 7E 
2c34b 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
2c34f 51d 00 00 00 00 
2c353 51e 00 00 00 00 | 	byte	$00[8]
2c357 51f 0E 1C 38 70 
2c35b 520 E0 70 38 1C 
2c35f 521 0E 00 00 00 
2c363 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
2c367 523 7E 66 66 30 
2c36b 524 30 18 18 18 
2c36f 525 00 18 18 00 
2c373 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
2c377 527 7E 66 66 66 
2c37b 528 66 36 06 66 
2c37f 529 66 7E 3C 00 
2c383 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
2c387 52b 3C 7E 66 66 
2c38b 52c 66 7E 7E 66 
2c38f 52d 66 66 66 00 
2c393 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
2c397 52f 7E 66 66 7E 
2c39b 530 3E 66 66 66 
2c39f 531 66 7E 3E 00 
2c3a3 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
2c3a7 533 7E 66 66 06 
2c3ab 534 06 06 06 66 
2c3af 535 66 7E 3C 00 
2c3b3 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
2c3b7 537 7E 66 66 66 
2c3bb 538 66 66 66 66 
2c3bf 539 66 7E 3E 00 
2c3c3 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
2c3c7 53b 7E 06 06 3E 
2c3cb 53c 3E 06 06 06 
2c3cf 53d 06 7E 7E 00 
2c3d3 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
2c3d7 53f 7E 06 06 3E 
2c3db 540 3E 06 06 06 
2c3df 541 06 06 06 00 
2c3e3 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
2c3e7 543 7E 06 06 76 
2c3eb 544 76 66 66 66 
2c3ef 545 66 7E 3C 00 
2c3f3 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
2c3f7 547 66 66 66 7E 
2c3fb 548 7E 66 66 66 
2c3ff 549 66 66 66 00 
2c403 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
2c407 54b 7E 18 18 18 
2c40b 54c 18 18 18 18 
2c40f 54d 18 7E 7E 00 
2c413 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
2c417 54f 60 60 60 60 
2c41b 550 60 60 60    | 	byte	$60[7]
2c41e 551 66 66 7E 3C 
2c422 552 00 00 00 00 
2c426 553 66 66 36 36 
2c42a 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
2c42e 555 66 66 C6 C6 
2c432 556 00 00 00 00 
2c436 557 06 06 06 06 
2c43a 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
2c43e 559 06 06 7E 7E 
2c442 55a 00 00 00 00 
2c446 55b C6 C6 EE EE 
2c44a 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
2c44e 55d C6 C6 C6 C6 
2c452 55e 00 00 00 00 
2c456 55f 66 66 66 6E 
2c45a 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
2c45e 561 76 66 66 66 
2c462 562 00 00 00 00 
2c466 563 3C 7E 66 66 
2c46a 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
2c46e 565 66 66 7E 3C 
2c472 566 00 00 00 00 
2c476 567 3E 7E 66 66 
2c47a 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
2c47e 569 06 06 06 06 
2c482 56a 00 00 00 00 
2c486 56b 3C 7E 66 66 
2c48a 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
2c48e 56d 66 56 3E 6C 
2c492 56e 00 00 00 00 
2c496 56f 3E 7E 66 66 
2c49a 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
2c49e 571 66 66 C6 C6 
2c4a2 572 00 00 00 00 
2c4a6 573 7C 7E 06 06 
2c4aa 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
2c4ae 575 60 60 7E 3E 
2c4b2 576 00 00 00 00 
2c4b6 577 7E 7E 18 18 
2c4ba 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
2c4be 579 18 18 18 18 
2c4c2 57a 00 00 00 00 
2c4c6 57b 66 66 66 66 
2c4ca 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
2c4ce 57d 66 66 7E 3C 
2c4d2 57e 00 00 00 00 
2c4d6 57f 66 66 66 66 
2c4da 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
2c4de 581 3C 3C 18 18 
2c4e2 582 00 00 00 00 
2c4e6 583 C6 C6 C6 C6 
2c4ea 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
2c4ee 585 FE EE C6 82 
2c4f2 586 00 00 00 00 
2c4f6 587 66 66 66 3C 
2c4fa 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
2c4fe 589 3C 66 66 66 
2c502 58a 00 00 00 00 
2c506 58b 66 66 66 66 
2c50a 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
2c50e 58d 18 18 18 18 
2c512 58e 00 00 00 00 
2c516 58f 7E 7E 30 30 
2c51a 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
2c51e 591 06 06 7E 7E 
2c522 592 00 00 00 00 
2c526 593 3C 3C 0C 0C 
2c52a 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
2c52e 595 0C 0C 3C 3C 
2c532 596 00 00 00 00 
2c536 597 06 06 0C 0C 
2c53a 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
2c53e 599 60 60 C0 C0 
2c542 59a 00 00 00 00 
2c546 59b 3C 3C 30 30 
2c54a 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
2c54e 59d 30 30 3C 3C 
2c552 59e 00 00 00 00 
2c556 59f 18 18 3C 3C 
2c55a 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
2c55e 5a1 00 00 00 00 
2c562 5a2 00 00 00 00 
2c566 5a3 00 00 00 00 
2c56a 5a4 00 00 00 00 
2c56e 5a5 00 00       | 	byte	$00[18]
2c570 5a6 FE FE 00 00 
2c574 5a7 00 00 0C 0C 
2c578 5a8 18 18 00 00 
2c57c 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
2c580 5aa 00 00 00 00 
2c584 5ab 00 00 00 00 
2c588 5ac 00          | 	byte	$00[9]
2c589 5ac 3C 7C 60 7C 
2c58d 5ad 7E 66 66 7E 
2c591 5ae 7C 00 00 00 
2c595 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
2c599 5b0 3E 7E 66 66 
2c59d 5b1 66 66 66 7E 
2c5a1 5b2 3E 00 00 00 
2c5a5 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
2c5a9 5b4 3C 3E 06 06 
2c5ad 5b5 06 06 06 7E 
2c5b1 5b6 7C 00 00 00 
2c5b5 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
2c5b9 5b8 7C 7E 66 66 
2c5bd 5b9 66 66 66 7E 
2c5c1 5ba 7C 00 00 00 
2c5c5 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
2c5c9 5bc 3C 7E 66 66 
2c5cd 5bd 7E 06 06 7E 
2c5d1 5be 7C 00 00 00 
2c5d5 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
2c5d9 5c0 18 7E 7E 18 
2c5dd 5c1 18 18 18 18 
2c5e1 5c2 18 00 00 00 
2c5e5 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2c5e9 5c4 7C 7E 66 66 
2c5ed 5c5 66 66 7E 7C 
2c5f1 5c6 60 7E 3E 00 
2c5f5 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
2c5f9 5c8 3E 7E 66 66 
2c5fd 5c9 66 66 66 66 
2c601 5ca 66 00 00 00 
2c605 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
2c609 5cc 1C 1C 18 18 
2c60d 5cd 18 18 18 3C 
2c611 5ce 3C 00 00 00 
2c615 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
2c619 5d0 30 30 30 30 
2c61d 5d1 30 30 30 30 
2c621 5d2 30          | 	byte	$30[9]
2c622 5d2 3E 1E 00 00 
2c626 5d3 06 06 06 36 
2c62a 5d4 36 1E 1E 1E 
2c62e 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
2c632 5d6 00 00 00 00 
2c636 5d7 1C 1C 18 18 
2c63a 5d8 18 18 18 18 
2c63e 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
2c642 5da 00 00 00 00 
2c646 5db 00 00 00    | 	byte	$00[7]
2c649 5dc 6C FE FE D6 
2c64d 5dd D6 C6 C6 C6 
2c651 5de C6 00 00 00 
2c655 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
2c659 5e0 3E 7E 66 66 
2c65d 5e1 66 66 66 66 
2c661 5e2 66 00 00 00 
2c665 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
2c669 5e4 3C 7E 66 66 
2c66d 5e5 66 66 66 7E 
2c671 5e6 3C 00 00 00 
2c675 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
2c679 5e8 3E 7E 66 66 
2c67d 5e9 66 66 66 7E 
2c681 5ea 3E 06 06 00 
2c685 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
2c689 5ec 7C 7E 66 66 
2c68d 5ed 66 66 66 7E 
2c691 5ee 7C 60 60 00 
2c695 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
2c699 5f0 3E 7E 66 06 
2c69d 5f1 06 06 06 06 
2c6a1 5f2 06 00 00 00 
2c6a5 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
2c6a9 5f4 7C 7E 06 0E 
2c6ad 5f5 3C 70 60 7E 
2c6b1 5f6 3E 00 00 00 
2c6b5 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
2c6b9 5f8 7E 7E 18 18 
2c6bd 5f9 18 18 18 78 
2c6c1 5fa 70 00 00 00 
2c6c5 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
2c6c9 5fc 66 66 66 66 
2c6cd 5fd 66 66 66    | 	byte	$66[7]
2c6d0 5fe 7E 7C 00 00 
2c6d4 5ff 00 00 00 00 
2c6d8 600 00 66 66 66 
2c6dc 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
2c6e0 602 18 18 00 00 
2c6e4 603 00 00 00 00 
2c6e8 604 00 C6 C6 D6 
2c6ec 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
2c6f0 606 C6 82 00 00 
2c6f4 607 00 00 00 00 
2c6f8 608 00 66 66 3C 
2c6fc 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
2c700 60a 66 66 00 00 
2c704 60b 00 00 00 00 
2c708 60c 00 66 66 66 
2c70c 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
2c710 60e 7C 60 7E 3E 
2c714 60f 00 00 00 00 
2c718 610 00 7E 7E 30 
2c71c 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
2c720 612 7E 7E 00 00 
2c724 613 00 00 30 18 
2c728 614 18 18 18 0C 
2c72c 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
2c730 616 18 30 00 00 
2c734 617 00 00 18 18 
2c738 618 18 18 18 18 
2c73c 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2c740 61a 18 18 00 00 
2c744 61b 00 00 0C 18 
2c748 61c 18 18 18 30 
2c74c 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
2c750 61e 18 0C 00 00 
2c754 61f 00 00 6C 7E 
2c758 620 36 00 00 00 
2c75c 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
2c760 622 00 00 00 00 
2c764 623 00 00 00 00 
2c768 624 00          | 	byte	$00[9]
2c769 624 18 18 18 18 
2c76d 625 18 18 00 00 
2c771 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
2c774 627             | 'amiga_font     file "amigafont.def"
2c774 627 00 6C FE FE 
2c778 628 7C 38 10 00 
2c77c 629 18 18 18 F8 
2c780 62a F8 18 18 18 | a8_font        file "atari8.fnt"
2c784 62b C0 C0 C0 C0 
2c788 62c C0 C0 C0 C0 | 	byte	$c0[8]
2c78c 62d 18 18 18 1F 
2c790 62e 1F 00 00 00 
2c794 62f 18 18 18 1F 
2c798 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
2c79c 631 00 00 00 1F 
2c7a0 632 1F 18 18 18 
2c7a4 633 C0 E0 70 38 
2c7a8 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
2c7ac 635 03 07 0E 1C 
2c7b0 636 38 70 E0 C0 
2c7b4 637 80 C0 E0 F0 
2c7b8 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
2c7bc 639 00 00 00 00 
2c7c0 63a F0 F0 F0 F0 
2c7c4 63b 01 03 07 0F 
2c7c8 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
2c7cc 63d F0 F0 F0 F0 
2c7d0 63e 00 00 00 00 
2c7d4 63f 0F 0F 0F 0F 
2c7d8 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
2c7dc 641 FF FF 00 00 
2c7e0 642 00 00 00 00 
2c7e4 643 00 00 00 00 
2c7e8 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
2c7ec 645 00 00 00 00 
2c7f0 646 0F 0F 0F 0F 
2c7f4 647 00 38 38 EE 
2c7f8 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
2c7fc 649 00 00 00 F8 
2c800 64a F8 18 18 18 
2c804 64b 00 00 00 FF 
2c808 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
2c80c 64d 18 18 18 FF 
2c810 64e FF 18 18 18 
2c814 64f 00 00 3C 7E 
2c818 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
2c81c 651 00 00 00 00 
2c820 652 FF FF FF FF 
2c824 653 03 03 03 03 
2c828 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
2c82c 655 00 00 00 FF 
2c830 656 FF 18 18 18 
2c834 657 18 18 18 FF 
2c838 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
2c83c 659 0F 0F 0F 0F 
2c840 65a 0F 0F 0F 0F | 	byte	$0f[8]
2c844 65b 18 18 18 F8 
2c848 65c F8 00 00 00 
2c84c 65d 1E 06 1E 06 
2c850 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
2c854 65f 00 18 3C 7E 
2c858 660 18 18 18 00 
2c85c 661 00 18 18 18 
2c860 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
2c864 663 00 18 0C 7E 
2c868 664 0C 18 00 00 
2c86c 665 00 18 30 7E 
2c870 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
2c874 667 00 00 00 00 
2c878 668 00 00 00 00 
2c87c 669 00          | 	byte	$00[9]
2c87d 669 18 18 18 18 
2c881 66a 00 18 00 00 
2c885 66b 66 66 66 00 
2c889 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
2c88d 66d 66 FF 66 66 
2c891 66e FF 66 00 18 
2c895 66f 7C 06 3C 60 
2c899 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
2c89d 671 66 36 18 0C 
2c8a1 672 66 62 00 38 
2c8a5 673 6C 38 1C F6 
2c8a9 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
2c8ad 675 18 18 18 00 
2c8b1 676 00 00 00 00 
2c8b5 677 70 38 18 18 
2c8b9 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
2c8bd 679 0E 1C 18 18 
2c8c1 67a 1C 0E 00 00 
2c8c5 67b 66 3C FF 3C 
2c8c9 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
2c8cd 67d 18 18 7E 18 
2c8d1 67e 18 00 00 00 
2c8d5 67f 00 00 00 00 
2c8d9 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
2c8dd 681 00 00 7E 00 
2c8e1 682 00 00 00 00 
2c8e5 683 00 00 00 00 
2c8e9 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
2c8ed 685 60 30 18 0C 
2c8f1 686 06 02 00 00 
2c8f5 687 3C 66 76 6E 
2c8f9 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
2c8fd 689 18 1C 18 18 
2c901 68a 18 7E 00 00 
2c905 68b 3C 66 30 18 
2c909 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
2c90d 68d 7E 30 18 30 
2c911 68e 66 3C 00 00 
2c915 68f 30 38 3C 36 
2c919 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
2c91d 691 7E 06 3E 60 
2c921 692 66 3C 00 00 
2c925 693 3C 06 3E 66 
2c929 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
2c92d 695 7E 60 30 18 
2c931 696 0C 0C 00 00 
2c935 697 3C 66 3C 66 
2c939 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
2c93d 699 3C 66 7C 60 
2c941 69a 30 1C 00 00 
2c945 69b 00 18 18 00 
2c949 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
2c94d 69d 00 18 18 00 
2c951 69e 18 18 0C 60 
2c955 69f 30 18 0C 18 
2c959 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
2c95d 6a1 00 7E 00 00 
2c961 6a2 7E 00 00 06 
2c965 6a3 0C 18 30 18 
2c969 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
2c96d 6a5 3C 66 30 18 
2c971 6a6 00 18 00 00 
2c975 6a7 3C 66 76 76 
2c979 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
2c97d 6a9 18 3C 66 66 
2c981 6aa 7E 66 00 00 
2c985 6ab 3E 66 3E 66 
2c989 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
2c98d 6ad 3C 66 06 06 
2c991 6ae 66 3C 00 00 
2c995 6af 1E 36 66 66 
2c999 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
2c99d 6b1 7E 06 3E 06 
2c9a1 6b2 06 7E 00 00 
2c9a5 6b3 7E 06 3E 06 
2c9a9 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
2c9ad 6b5 7C 06 06 76 
2c9b1 6b6 66 7C 00 00 
2c9b5 6b7 66 66 7E 66 
2c9b9 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
2c9bd 6b9 7E 18 18 18 
2c9c1 6ba 18 7E 00 00 
2c9c5 6bb 60 60 60 60 
2c9c9 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
2c9cd 6bd 66 36 1E 1E 
2c9d1 6be 36 66 00 00 
2c9d5 6bf 06 06 06 06 
2c9d9 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
2c9dd 6c1 C6 EE FE D6 
2c9e1 6c2 C6 C6 00 00 
2c9e5 6c3 66 6E 7E 7E 
2c9e9 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
2c9ed 6c5 3C 66 66 66 
2c9f1 6c6 66 3C 00 00 
2c9f5 6c7 3E 66 66 3E 
2c9f9 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
2c9fd 6c9 3C 66 66 66 
2ca01 6ca 36 6C 00 00 
2ca05 6cb 3E 66 66 3E 
2ca09 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
2ca0d 6cd 3C 06 3C 60 
2ca11 6ce 60 3C 00 00 
2ca15 6cf 7E 18 18 18 
2ca19 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
2ca1d 6d1 66 66 66 66 
2ca21 6d2 66          | 	byte	$66[5]
2ca22 6d2 7E 00 00 66 
2ca26 6d3 66 66 66 3C 
2ca2a 6d4 18 00 00 C6 
2ca2e 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
2ca32 6d6 C6 00 00 66 
2ca36 6d7 66 3C 3C 66 
2ca3a 6d8 66 00 00 66 
2ca3e 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
2ca42 6da 18 00 00 7E 
2ca46 6db 30 18 0C 06 
2ca4a 6dc 7E 00 00 78 
2ca4e 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
2ca52 6de 78 00 00 02 
2ca56 6df 06 0C 18 30 
2ca5a 6e0 60 00 00 1E 
2ca5e 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
2ca62 6e2 1E 00 00 10 
2ca66 6e3 38 6C C6 00 
2ca6a 6e4 00 00 00 00 
2ca6e 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ca72 6e6 FF 00 00 18 
2ca76 6e7 3C 7E 7E 3C 
2ca7a 6e8 18 00 00 00 
2ca7e 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
2ca82 6ea 7C 00 00 06 
2ca86 6eb 06 3E 66 66 
2ca8a 6ec 3E 00 00 00 
2ca8e 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
2ca92 6ee 3C 00 00 60 
2ca96 6ef 60 7C 66 66 
2ca9a 6f0 7C 00 00 00 
2ca9e 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
2caa2 6f2 3C 00 00 70 
2caa6 6f3 18 7C 18 18 
2caaa 6f4 18 00 00 00 
2caae 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
2cab2 6f6 60 3E 00 06 
2cab6 6f7 06 3E 66 66 
2caba 6f8 66 00 00 18 
2cabe 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
2cac2 6fa 3C 00 00 60 
2cac6 6fb 00 60 60 60 
2caca 6fc 60 3C 00 06 
2cace 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
2cad2 6fe 66 00 00 1C 
2cad6 6ff 18 18 18 18 
2cada 700 3C 00 00 00 
2cade 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
2cae2 702 C6 00 00 00 
2cae6 703 3E 66 66 66 
2caea 704 66 00 00 00 
2caee 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
2caf2 706 3C 00 00 00 
2caf6 707 3E 66 66 3E 
2cafa 708 06 06 00 00 
2cafe 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
2cb02 70a 60 60 00 00 
2cb06 70b 3E 66 06 06 
2cb0a 70c 06 00 00 00 
2cb0e 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
2cb12 70e 3E 00 00 18 
2cb16 70f 7E 18 18 18 
2cb1a 710 70 00 00 00 
2cb1e 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
2cb22 712 7C 00 00 00 
2cb26 713 66 66 66 3C 
2cb2a 714 18 00 00 00 
2cb2e 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
2cb32 716 6C 00 00 00 
2cb36 717 66 3C 18 3C 
2cb3a 718 66 00 00 00 
2cb3e 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
2cb42 71a 30 1E 00 00 
2cb46 71b 7E 30 18 0C 
2cb4a 71c 7E 00 00 18 
2cb4e 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
2cb52 71e 3C 00 18 18 
2cb56 71f 18 18 18 18 
2cb5a 720 18 18 00 7E 
2cb5e 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
2cb62 722 60 00 10 18 
2cb66 723 1C 1E 1C 18 
2cb6a 724 10 00 08 18 
2cb6e 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
2cb72 726 08 00       | 	byte	$08, $00
2cb74 727 00 00 00 00 
2cb78 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
2cb79 728 80 00 00 00 
2cb7d 729 00 80 00 00 
2cb81 72a 80 80 00 00 
2cb85 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
2cb89 72c 80 00 80 00 
2cb8d 72d 00 40 80 00 
2cb91 72e AA AA AA 00 
2cb95 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
2cb99 730 FF 00 00 00 
2cb9d 731 00 FF 00 00 
2cba1 732 FF FF 00 00 
2cba5 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
2cba9 734 FF 00 FF 00 
2cbad 735 00 FF FF 00 
2cbb1 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
2cbb4 737 00 00 00 00 
2cbb8 738 00          | ataripalette   file "ataripalettep2.def"
2cbb9 738 11 11 11 00 
2cbbd 739 22 22 22 00 
2cbc1 73a 33 33 33 00 
2cbc5 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
2cbc9 73c 55 55 55 00 
2cbcd 73d 66 66 66 00 
2cbd1 73e 77 77 77 00 
2cbd5 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
2cbd9 740 99 99 99 00 
2cbdd 741 AA AA AA 00 
2cbe1 742 BB BB BB 00 
2cbe5 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
2cbe9 744 DD DD DD 00 
2cbed 745 EE EE EE 00 
2cbf1 746 FF FF FF 00 
2cbf5 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
2cbf9 748 00 14 40 00 
2cbfd 749 00 1E 60 00 
2cc01 74a 00 28 80 00 
2cc05 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
2cc09 74c 00 3C BF 00 
2cc0d 74d 00 46 DF 00 
2cc11 74e 00 50 FF 00 
2cc15 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
2cc19 750 39 77 FF 00 
2cc1d 751 55 8A FF 00 
2cc21 752 71 9E FF 00 
2cc25 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
2cc29 754 AA C5 FF 00 
2cc2d 755 C6 D8 FF 00 
2cc31 756 E3 EC FF 00 
2cc35 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
2cc39 758 00 00 40 00 
2cc3d 759 00 00 60 00 
2cc41 75a 00 00 80 00 
2cc45 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
2cc49 75c 00 00 BF 00 
2cc4d 75d 00 00 DF 00 
2cc51 75e 00 00 FF 00 
2cc55 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
2cc59 760 39 39 FF 00 
2cc5d 761 55 55 FF 00 
2cc61 762 71 71 FF 00 
2cc65 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
2cc69 764 AA AA FF 00 
2cc6d 765 C6 C6 FF 00 
2cc71 766 E3 E3 FF 00 
2cc75 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
2cc79 768 20 00 40 00 
2cc7d 769 30 00 60 00 
2cc81 76a 40 00 80 00 
2cc85 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
2cc89 76c 60 00 BF 00 
2cc8d 76d 70 00 DF 00 
2cc91 76e 80 00 FF 00 
2cc95 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
2cc99 770 9C 39 FF 00 
2cc9d 771 AA 55 FF 00 
2cca1 772 B8 71 FF 00 
2cca5 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
2cca9 774 D5 AA FF 00 
2ccad 775 E3 C6 FF 00 
2ccb1 776 F1 E3 FF 00 
2ccb5 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
2ccb9 778 40 00 40 00 
2ccbd 779 60 00 60 00 
2ccc1 77a 80 00 80 00 
2ccc5 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
2ccc9 77c BF 00 BF 00 
2cccd 77d DF 00 DF 00 
2ccd1 77e FF 00 FF 00 
2ccd5 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
2ccd9 780 FF 39 FF 00 
2ccdd 781 FF 55 FF 00 
2cce1 782 FF 71 FF 00 
2cce5 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
2cce9 784 FF AA FF 00 
2cced 785 FF C6 FF 00 
2ccf1 786 FF E3 FF 00 
2ccf5 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
2ccf9 788 40 00 20 00 
2ccfd 789 60 00 30 00 
2cd01 78a 80 00 40 00 
2cd05 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
2cd09 78c BF 00 60 00 
2cd0d 78d DF 00 70 00 
2cd11 78e FF 00 80 00 
2cd15 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
2cd19 790 FF 39 9C 00 
2cd1d 791 FF 55 AA 00 
2cd21 792 FF 71 B8 00 
2cd25 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
2cd29 794 FF AA D5 00 
2cd2d 795 FF C6 E3 00 
2cd31 796 FF E3 F1 00 
2cd35 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
2cd39 798 40 00 00 00 
2cd3d 799 60 00 00 00 
2cd41 79a 80 00 00 00 
2cd45 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
2cd49 79c BF 00 00 00 
2cd4d 79d DF 00 00 00 
2cd51 79e FF 00 00 00 
2cd55 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
2cd59 7a0 FF 39 39 00 
2cd5d 7a1 FF 55 55 00 
2cd61 7a2 FF 71 71 00 
2cd65 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
2cd69 7a4 FF AA AA 00 
2cd6d 7a5 FF C6 C6 00 
2cd71 7a6 FF E3 E3 00 
2cd75 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
2cd79 7a8 40 10 00 00 
2cd7d 7a9 60 18 00 00 
2cd81 7aa 80 20 00 00 
2cd85 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
2cd89 7ac BF 30 00 00 
2cd8d 7ad DF 38 00 00 
2cd91 7ae FF 40 00 00 
2cd95 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
2cd99 7b0 FF 6A 39 00 
2cd9d 7b1 FF 80 55 00 
2cda1 7b2 FF 95 71 00 
2cda5 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
2cda9 7b4 FF BF AA 00 
2cdad 7b5 FF D5 C6 00 
2cdb1 7b6 FF EA E3 00 
2cdb5 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
2cdb9 7b8 40 20 00 00 
2cdbd 7b9 60 30 00 00 
2cdc1 7ba 80 40 00 00 
2cdc5 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
2cdc9 7bc BF 60 00 00 
2cdcd 7bd DF 70 00 00 
2cdd1 7be FF 80 00 00 
2cdd5 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
2cdd9 7c0 FF 9C 39 00 
2cddd 7c1 FF AA 55 00 
2cde1 7c2 FF B8 71 00 
2cde5 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
2cde9 7c4 FF D5 AA 00 
2cded 7c5 FF E3 C6 00 
2cdf1 7c6 FF F1 E3 00 
2cdf5 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
2cdf9 7c8 40 30 00 00 
2cdfd 7c9 60 48 00 00 
2ce01 7ca 80 60 00 00 
2ce05 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
2ce09 7cc BF 90 00 00 
2ce0d 7cd DF A8 00 00 
2ce11 7ce FF C0 00 00 
2ce15 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
2ce19 7d0 FF CE 39 00 
2ce1d 7d1 FF D5 55 00 
2ce21 7d2 FF DC 71 00 
2ce25 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
2ce29 7d4 FF EA AA 00 
2ce2d 7d5 FF F1 C6 00 
2ce31 7d6 FF F8 E3 00 
2ce35 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
2ce39 7d8 30 40 00 00 
2ce3d 7d9 48 60 00 00 
2ce41 7da 60 80 00 00 
2ce45 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
2ce49 7dc 90 BF 00 00 
2ce4d 7dd A8 DF 00 00 
2ce51 7de C0 FF 00 00 
2ce55 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
2ce59 7e0 CE FF 39 00 
2ce5d 7e1 D5 FF 55 00 
2ce61 7e2 DC FF 71 00 
2ce65 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
2ce69 7e4 EA FF AA 00 
2ce6d 7e5 F1 FF C6 00 
2ce71 7e6 F8 FF E3 00 
2ce75 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
2ce79 7e8 00 40 00 00 
2ce7d 7e9 00 60 00 00 
2ce81 7ea 00 80 00 00 
2ce85 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
2ce89 7ec 00 BF 00 00 
2ce8d 7ed 00 DF 00 00 
2ce91 7ee 00 FF 00 00 
2ce95 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
2ce99 7f0 39 FF 39 00 
2ce9d 7f1 55 FF 55 00 
2cea1 7f2 71 FF 71 00 
2cea5 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
2cea9 7f4 AA FF AA 00 
2cead 7f5 C6 FF C6 00 
2ceb1 7f6 E3 FF E3 00 
2ceb5 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
2ceb9 7f8 00 40 14 00 
2cebd 7f9 00 60 1E 00 
2cec1 7fa 00 80 28 00 
2cec5 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
2cec9 7fc 00 BF 3C 00 
2cecd 7fd 00 DF 46 00 
2ced1 7fe 00 FF 50 00 
2ced5 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
2ced9 800 39 FF 77 00 
2cedd 801 55 FF 8A 00 
2cee1 802 71 FF 9E 00 
2cee5 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
2cee9 804 AA FF C5 00 
2ceed 805 C6 FF D8 00 
2cef1 806 E3 FF EC 00 
2cef5 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
2cef9 808 00 40 28 00 
2cefd 809 00 60 3C 00 
2cf01 80a 00 80 50 00 
2cf05 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
2cf09 80c 00 BF 78 00 
2cf0d 80d 00 DF 8C 00 
2cf11 80e 00 FF A0 00 
2cf15 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
2cf19 810 39 FF B5 00 
2cf1d 811 55 FF C0 00 
2cf21 812 71 FF CA 00 
2cf25 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
2cf29 814 AA FF DF 00 
2cf2d 815 C6 FF EA 00 
2cf31 816 E3 FF F4 00 
2cf35 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
2cf39 818 00 40 40 00 
2cf3d 819 00 60 60 00 
2cf41 81a 00 80 80 00 
2cf45 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
2cf49 81c 00 BF BF 00 
2cf4d 81d 00 DF DF 00 
2cf51 81e 00 FF FF 00 
2cf55 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
2cf59 820 39 FF FF 00 
2cf5d 821 55 FF FF 00 
2cf61 822 71 FF FF 00 
2cf65 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
2cf69 824 AA FF FF 00 
2cf6d 825 C6 FF FF 00 
2cf71 826 E3 FF FF 00 
2cf75 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
2cf79 828 00 28 40 00 
2cf7d 829 00 3C 60 00 
2cf81 82a 00 50 80 00 
2cf85 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
2cf89 82c 00 78 BF 00 
2cf8d 82d 00 8C DF 00 
2cf91 82e 00 A0 FF 00 
2cf95 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
2cf99 830 39 B5 FF 00 
2cf9d 831 55 C0 FF 00 
2cfa1 832 71 CA FF 00 
2cfa5 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
2cfa9 834 AA DF FF 00 
2cfad 835 C6 EA FF 00 
2cfb1 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
2cfb4 837             | 
2cfb4 837             | '**********************************************************************************
2cfb4 837             | '
2cfb4 837             | '        Timings and colors definitions
2cfb4 837             | '
2cfb4 837             | '**********************************************************************************
2cfb4 837             | 
2cfb4 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
2cfb4 837 10 00 00 00 
2cfb8 838 50 00 00 00 
2cfbc 839 0C 00 00 00 
2cfc0 83a 00 04 00 00 | timings         long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
2cfc4 83b 08 00 00 00 
2cfc8 83c 04 00 00 00 
2cfcc 83d 08 00 00 00 
2cfd0 83e 80 00 00 00 | 	byte	$08, $00, $00, $00, $04, $00, $00, $00, $08, $00, $00, $00, $80, $00, $00, $00
2cfd4 83f 40 02 00 00 
2cfd8 840 6A 8C 15 14 
2cfdc 841 FB 06 B7 01 
2cfe0 842 40 02 00 00 | 	byte	$40, $02, $00, $00, $6a, $8c, $15, $14, $fb, $06, $b7, $01, $40, $02, $00, $00
2cfe4 843 00 00 00 00 
2cfe8 844 C0 00 00 00 
2cfec 845 00 00 00 00 
2cff0 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2cff4 847 00 75 C7 97 
2cff8 848 27 47 F6 0A 
2cffc 849 05 79 CB 9B 
2d000 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
2d004 84b             | 
2d004 84b             | ''--------  Initialization  ----------------------------------------------------------------
2d004 84b             | 
2d004 84b 28 0C 64 FD | hdmi            setq    #6
2d008 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
2d00c 84d 28 10 64 FD |                 setq    #8
2d010 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
2d014 84f             | 
2d014 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
2d018 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
2d01c 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
2d020 852 D6 C6 01 F1 |                 add     t1,hbase
2d024 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
2d028 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
2d02c 855 7B 0B 80 5F 
2d030 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
2d034 857 66 66 86 FF 
2d038 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
2d03c 859             | '
2d03c 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
2d040 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
2d044 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
2d048 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
2d04c 85d             | 
2d04c 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
2d050 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
2d054 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
2d058 860             | 
2d058 860             | ''--------  frame rendering main loop  ---------------------------------------------------
2d058 860             | 
2d058 860 28 06 64 FD | p101            setq 	#3
2d05c 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
2d060 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
2d064 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
2d068 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
2d06c 865 00 A0 05 F6 |                 mov     dlinum, #0
2d070 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
2d074 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
2d078 868             | 
2d078 868             | 
2d078 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
2d07c 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
2d080 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
2d084 86b             |                 
2d084 86b             | 
2d084 86b             | 
2d084 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
2d084 86b             |   
2d084 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
2d088 86c 29 FE 65 3D |          if_nc  setq2   #255
2d08c 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
2d090 86e             | 
2d090 86e             | '' -----   up porch (before the picture)
2d090 86e             | 
2d090 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
2d094 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
2d098 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
2d09c 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
2d0a0 872             |  
2d0a0 872             |    
2d0a0 872             |  
2d0a0 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
2d0a4 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
2d0a8 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
2d0ac 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
2d0b0 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
2d0b4 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
2d0b8 878             | 
2d0b8 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
2d0bc 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
2d0c0 87a 48 00 B0 FD | 		call    #dli
2d0c4 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
2d0c8 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
2d0cc 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
2d0d0 87e             |                 	
2d0d0 87e             |                 
2d0d0 87e             | 
2d0d0 87e             |  
2d0d0 87e             | '' ------- the main screen drawing starts here
2d0d0 87e             | 
2d0d0 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
2d0d4 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
2d0d8 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
2d0dc 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
2d0e0 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
2d0e4 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
2d0e8 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
2d0ec 885             |               
2d0ec 885             | 
2d0ec 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
2d0f0 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
2d0f4 887             | 
2d0f4 887             | ' ---------------- All visible lines displayed now, start vblank  
2d0f4 887             | 
2d0f4 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
2d0f8 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
2d0fc 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
2d100 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
2d104 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
2d108 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
2d10c 88d             | 
2d10c 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
2d10c 88d             | 
2d10c 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
2d10c 88d             | 
2d10c 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
2d110 88e             | 
2d110 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
2d114 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
2d118 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
2d11c 891             | 
2d11c 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
2d120 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
2d124 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
2d128 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
2d12c 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
2d130 896             | 
2d130 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
2d134 897 DD C6 41 F8 |                 getnib  t1,dl,#0
2d138 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
2d13c 899 70 00 90 AD |     if_z        jmp     #preload
2d140 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
2d144 89b 94 00 90 AD |     if_z        jmp     #preload2
2d148 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
2d14c 89d 0C 00 90 AD |     if_z        jmp     #p390
2d150 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
2d154 89f 28 00 90 AD |     if_z        jmp     #p391  
2d158 8a0             | 
2d158 8a0 2D 00 64 FD | p308            ret
2d15c 8a1             |    
2d15c 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
2d160 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
2d164 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
2d168 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
2d16c 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
2d170 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
2d174 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
2d178 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
2d17c 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
2d180 8aa             |  
2d180 8aa             | '' --------  Reload palette. To do 
2d180 8aa             | 
2d180 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
2d184 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
2d188 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
2d18c 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
2d190 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
2d194 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
2d198 8b0 70 FF 9F FD |         	jmp     #dli                
2d19c 8b1             |       
2d19c 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
2d19c 8b1             | 
2d19c 8b1             | 
2d19c 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
2d19c 8b1             | 
2d19c 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
2d1a0 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
2d1a4 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
2d1a8 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
2d1ac 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
2d1b0 8b6             |         
2d1b0 8b6             | '' -------------- Preload a line from PSRAM        
2d1b0 8b6             |         
2d1b0 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
2d1b4 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
2d1b8 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
2d1bc 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
2d1c0 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
2d1c4 8bb             | 
2d1c4 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
2d1c8 8bc 32 B7 01 F6 |                 mov     buf2,a1024
2d1cc 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
2d1d0 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
2d1d4 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
2d1d8 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
2d1dc 8c1             |  
2d1dc 8c1             |  
2d1dc 8c1             | preload2      '  incmod  dlinum,#3
2d1dc 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
2d1e0 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
2d1e4 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
2d1e8 8c4 28 02 64 FD |                 setq	#1
2d1ec 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
2d1f0 8c6             |                 
2d1f0 8c6             | 
2d1f0 8c6             | '' -------------- Draw sprites
2d1f0 8c6             | 
2d1f0 8c6 CF 5C 02 F6 | sprite          mov t8,frames
2d1f4 8c7 10 5C 0E F5 | 		and t8,#16 wz
2d1f8 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
2d1fc 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
2d200 8ca             | 		
2d200 8ca             | 
2d200 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
2d204 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
2d208 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
2d20c 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
2d210 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
2d214 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
2d218 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
2d21c 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
2d220 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
2d224 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
2d228 8d4 01 52 86 F1 |                 sub     sprite_h,#1
2d22c 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
2d230 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
2d234 8d7             | 
2d234 8d7             | 
2d234 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
2d238 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
2d23c 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
2d240 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
2d244 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
2d248 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
2d24c 8dd 00 5E 06 F6 |                 mov 	t9,#0
2d250 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
2d254 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
2d258 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
2d25c 8e1             |      
2d25c 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
2d260 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
2d264 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
2d268 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
2d26c 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
2d270 8e6             |                 
2d270 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
2d274 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
2d278 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
2d27c 8e9             |   		
2d27c 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
2d280 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
2d284 8eb             | 
2d284 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
2d288 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
2d28c 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
2d290 8ee             |  
2d290 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
2d294 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
2d298 8f0 10 00 90 CD |      if_c 	jmp     #p899		
2d29c 8f1             | 	
2d29c 8f1             | 	
2d29c 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
2d2a0 8f2 28 CD 01 F1 | 		add	t4,sprite_w
2d2a4 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
2d2a8 8f4             | 
2d2a8 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
2d2ac 8f5             | 
2d2ac 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
2d2b0 8f6 01 58 86 F1 | 	 	sub     t6,#1
2d2b4 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
2d2b8 8f8             | 
2d2b8 8f8 28 58 62 FD |                 setq   	t6
2d2bc 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
2d2c0 8fa 28 5D 02 F6 |                 mov t8,sprite_w
2d2c4 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
2d2c8 8fc 24 00 90 AD |         if_z    jmp #p898
2d2cc 8fd             |          
2d2cc 8fd             |         
2d2cc 8fd 70 5F 06 F6 |                 mov  t9,#368
2d2d0 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
2d2d4 8ff             | 
2d2d4 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
2d2d8 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
2d2dc 901 FF FF 7F FF 
2d2e0 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
2d2e4 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
2d2e8 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
2d2ec 905 2D 01 00 F5 |                 and 0-0, t7
2d2f0 906             |                
2d2f0 906             | 
2d2f0 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
2d2f4 907 E5 E0 7A FA |                 wmlong 368,t3				
2d2f8 908             |                 
2d2f8 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
2d2fc 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
2d300 90a 2D 00 64 FD |                 ret
2d304 90b             | 	
2d304 90b             | 	
2d304 90b             |                
2d304 90b             |  
2d304 90b             | '' -------------- Graphics line ------------------------------------------------------------
2d304 90b             |  
2d304 90b             | 
2d304 90b             | '' consts and vars
2d304 90b             | 
2d304 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
2d308 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
2d30c 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
2d310 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
2d314 90f             | 
2d314 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
2d318 910             | 
2d318 910             | '------ these longs will be set by setmode function
2d318 910             | 
2d318 910 00 00 00 00 | m_bs            long    0        'blanks before sync
2d31c 911 00 00 00 00 | m_sn            long    0        'sync
2d320 912 00 00 00 00 | m_bv            long    0        'blanks before visible
2d324 913 00 00 00 00 | m_vi            long    0        'visible pixels #
2d328 914             | 'm_border        long    0        'left/right borders
2d328 914 00 00 00 00 | i_upporch       long    0        'up porch lines
2d32c 915 00 00 00 00 | i_vsync         long    0        'vsync lines
2d330 916 00 00 00 00 | i_downporch     long    0        'down porch lines
2d334 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
2d338 918 00 00 00 00 | i_totalvis      long    0
2d33c 919             | 
2d33c 919             | '-------------------------------------
2d33c 919             |  
2d33c 919 00 00 00 00 | linenum         long    0
2d340 91a 00 00 00 00 | frames          long    0
2d344 91b 00 00 00 00 | dlinum long 0
2d348 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
2d34c 91d             | 
2d34c 91d 00 00 00 00 | vblankptr       long    0
2d350 91e 00 00 00 00 | modeptr         long    0
2d354 91f 00 00 00 00 | paletteptr      long    0
2d358 920 00 00 00 00 | dlptr           long    0
2d35c 921 01 00 00 00 | hbase           long    1
2d360 922 00 00 00 00 | mailbox         long    0
2d364 923 00 00 00 00 | spriteptr          long 0
2d368 924             | 
2d368 924 00 00 00 00 | cmd             long    0
2d36c 925 00 B0 07 00 | buf1            long    $80000-16384-4096
2d370 926 00 04 00 00 | buf2            long    1024
2d374 927 01 00 00 00 | dlptr2          long    1
2d378 928 01 00 00 00 | dl              long    1
2d37c 929             | 
2d37c 929 00 00 00 00 | buf1c long 0
2d380 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
2d384 92b 01 00 00 00 | framebuf2       long    1
2d388 92c 01 00 00 00 | hsync0          long    1
2d38c 92d 01 00 00 00 | hsync1          long    1
2d390 92e             | 
2d390 92e 01 00 00 00 | t1              long    1
2d394 92f 00 00 00 00 | t2 long 0
2d398 930 00 00 00 00 | t3 long 0
2d39c 931 00 00 00 00 | t4 long 0
2d3a0 932             | 
2d3a0 932 00 00 00 00 | rcnt            long    0  'dl repeat count
2d3a4 933 00 00 00 00 | rcnt2           long    0
2d3a8 934 00 00 00 00 | rcnt2a          long    0
2d3ac 935 00 00 00 00 | roffset         long    0
2d3b0 936 00 00 00 00 | rdl             long    0  'dl repeat line
2d3b4 937 00 00 00 00 | dlc             long    0  'dl command
2d3b8 938             | 
2d3b8 938 FF FF FF FF | affffffff       long    $ffffffff
2d3bc 939 00 00 00 00 | sprite1pointer long 0
2d3c0 93a 00 00 00 00 | sprite1xy      long 0
2d3c4 93b 00 00 00 00 | sprite1wh      long 0
2d3c8 93c 00 00 00 00 | sprite2pointer long 0
2d3cc 93d 00 00 00 00 | sprite2xy      long 0
2d3d0 93e 00 00 00 00 | sprite2wh      long 0
2d3d4 93f 00 00 00 00 | sprite3pointer long 0
2d3d8 940 00 00 00 00 | sprite3xy      long 0
2d3dc 941 00 00 00 00 | sprite3wh      long 0
2d3e0 942 00 00 00 00 | sprite4pointer long 0
2d3e4 943 00 00 00 00 | sprite4xy      long 0
2d3e8 944 00 00 00 00 | sprite4wh      long 0
2d3ec 945 00 00 00 00 | sprite5pointer long 0
2d3f0 946 00 00 00 00 | sprite5xy      long 0
2d3f4 947 00 00 00 00 | sprite5wh      long 0
2d3f8 948 00 00 00 00 | sprite6pointer long 0
2d3fc 949 00 00 00 00 | sprite6xy      long 0
2d400 94a 00 00 00 00 | sprite6wh      long 0
2d404 94b 00 00 00 00 | sprite7pointer long 0
2d408 94c 00 00 00 00 | sprite7xy      long 0
2d40c 94d 00 00 00 00 | sprite7wh      long 0
2d410 94e 00 00 00 00 | sprite8pointer long 0
2d414 94f 00 00 00 00 | sprite8xy      long 0
2d418 950 00 00 00 00 | sprite8wh      long 0
2d41c 951 00 00 00 00 | sprite9pointer long 0
2d420 952 00 00 00 00 | sprite9xy      long 0
2d424 953 00 00 00 00 | sprite9wh      long 0
2d428 954 00 00 00 00 | sprite10pointer long 0
2d42c 955 00 00 00 00 | sprite10xy      long 0
2d430 956 00 00 00 00 | sprite10wh      long 0
2d434 957 00 00 00 00 | sprite11pointer long 0
2d438 958 00 00 00 00 | sprite11xy      long 0
2d43c 959 00 00 00 00 | sprite11wh      long 0
2d440 95a 00 00 00 00 | sprite12pointer long 0
2d444 95b 00 00 00 00 | sprite12xy      long 0
2d448 95c 00 00 00 00 | sprite12wh      long 0
2d44c 95d 00 00 00 00 | sprite13pointer long 0
2d450 95e 00 00 00 00 | sprite13xy      long 0
2d454 95f 00 00 00 00 | sprite13wh      long 0
2d458 960 00 00 00 00 | sprite14pointer long 0
2d45c 961 00 00 00 00 | sprite14xy      long 0
2d460 962 00 00 00 00 | sprite14wh      long 0
2d464 963 00 00 00 00 | sprite15pointer long 0
2d468 964 00 00 00 00 | sprite15xy      long 0
2d46c 965 00 00 00 00 | sprite15wh      long 0
2d470 966 00 00 00 00 | sprite16pointer long 0
2d474 967 00 00 00 00 | sprite16xy      long 0
2d478 968 00 00 00 00 | sprite16wh      long 0
2d47c 969 00 00 00 00 | sprite17pointer long 0
2d480 96a 00 00 00 00 | sprite17xy      long 0
2d484 96b 00 00 00 00 | sprite17wh      long 0
2d488 96c 00 00 00 00 | sprite18pointer long 0
2d48c 96d 00 00 00 00 | sprite18xy      long 0
2d490 96e 00 00 00 00 | sprite18wh      long 0
2d494 96f 00 00 00 00 | spritenum long 0
2d498 970             | 
2d498 970 00 00 00 00 | spriteline long 0
2d49c 971 84 03 00 00 | sprite_x long 900
2d4a0 972 00 00 00 00 | sprite_y long 0
2d4a4 973 10 00 00 00 | sprite_w long 16
2d4a8 974 40 00 00 00 | sprite_h long 64
2d4ac 975 00 00 00 00 | l2 long 0
2d4b0 976 00 00 00 00 | t5 long 0
2d4b4 977 00 00 00 00 | t6 long 0
2d4b8 978 00 00 00 00 | t7 long 0
2d4bc 979 00 00 00 00 | t8 long 0
2d4c0 97a 00 00 00 00 | t9 long 0
2d4c4 97b 00 00 00 00 | preloadaddr long 0
2d4c8 97c 00 00 00 00 | preloadlineaddr long 0
2d4cc 97d 00 04 00 00 | a1024 long 1024
2d4d0 97e             | 
2d4d0 97e E0 03 00 00 | aa long 992
2d4d4 97f FF 03 00 00 | a1023 long 1023
2d4d8 980 00 10 00 00 | a4096 long 4096
2d4dc 981             |  fit 368
2d4dc 981             | _psram_spin2_dat_
2d4dc 981 00 00 00 00 
      ...             
2d5d4 9bf 00 00 00 00 
2d5d8 9c0 00 00 00 00 |     listdata long 0[8*8]
2d5dc 9c1             |             orgh
2d5dc                 | 
2d5dc                 | ' driver state
2d5dc     FF FF FF FF | drivercog   long    -1  ' COG id of driver
2d5e0     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
2d5e4                 | 
2d5e4                 | ' delay profile
2d5e4     07 00 00 00 
2d5e8     00 CF 7B 05 
2d5ec     80 D1 F0 08 
2d5f0     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
2d5f4     80 C4 60 0F 
2d5f8     80 39 7A 12 
2d5fc     40 2D D9 13 
2d600     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
2d604                 | 
2d604                 | ' data to be passed to driver when starting it
2d604                 | startupData
2d604     00 00 00 00 |     long    0           ' current frequency
2d608     00 00 00 00 |     long    FLAGS       ' optional flags for driver
2d60c     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
2d610     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
2d614     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
2d618     24 D6 02 00 |     long    deviceData  ' address of devices data structure in HUBRAM
2d61c     A4 D6 02 00 |     long    qosData     ' address of QoS data structure in HUBRAM
2d620     C4 D6 02 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
2d624                 | 
2d624                 | ' data for memory
2d624                 | deviceData
2d624                 |     ' 16 bank parameters follow (16MB per bank)
2d624     00 00 00 00 
      ...             
2d65c     00 00 00 00 
2d660     00 00 00 00 |     long    0[16]                               ' banks 0-15
2d664                 |     ' 16 banks of pin parameters follow
2d664     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
2d668     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
2d66c     FF FF FF FF 
      ...             
2d69c     FF FF FF FF 
2d6a0     FF FF FF FF |     long    -1[14]                              ' banks 2-15
2d6a4                 | 
2d6a4                 | ' data for COG polling
2d6a4                 | qosData 
2d6a4     00 00 FF FF 
2d6a8     00 00 FF FF 
2d6ac     00 00 FF FF 
2d6b0     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
2d6b4     00 00 FF FF 
2d6b8     00 00 FF FF 
2d6bc     00 00 FF FF 
2d6c0     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
2d6c4                 |     
2d6c4                 | ' mailbox storage
2d6c4                 | 
2d6c4                 | mailboxes
2d6c4     00 00 00 00 
      ...             
2d71c     00 00 00 00 
2d720     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
2d724                 | 	alignl
2d724                 | _psram16drv_spin2_dat_
2d724                 |                             orgh
2d724     00 00 00 00 
      ...             
2d73c     00 00 00 00 
2d740     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
2d744                 | 
2d744                 | driver_start
2d744                 |                             org
2d744 000             | '..................................................................................................
2d744 000             | ' Memory layout for COG RAM once operational:
2d744 000             | '
2d744 000             | '  COG RAM address      Usage
2d744 000             | '  ---------------      ----
2d744 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
2d744 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
2d744 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
2d744 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
2d744 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
2d744 000             | '  ~$198-$1F3           State and register variables
2d744 000             | '
2d744 000             | ' Also during driver COG startup:
2d744 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
2d744 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
2d744 000             | '..................................................................................................
2d744 000             |                             
2d744 000             | ' Mailbox storage after vector initialization
2d744 000             | 
2d744 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
2d748 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
2d74c 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
2d750 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
2d754 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
2d758 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
2d75c 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
2d760 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
2d764 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
2d768 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
2d76c 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
2d770 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
2d774 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
2d778 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
2d77c 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
2d780 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
2d784 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
2d788 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
2d78c 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
2d790 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
2d794 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
2d798 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
2d79c 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
2d7a0 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
2d7a4 018             | 
2d7a4 018             | ' Mailbox parameter addresses per COG once patched
2d7a4 018             |                             
2d7a4 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
2d7a8 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
2d7ac 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
2d7b0 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
2d7b4 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
2d7b8 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
2d7bc 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
2d7c0 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
2d7c4 020             | 
2d7c4 020             | '..................................................................................................
2d7c4 020             | ' Per COG request and state setup and service branching
2d7c4 020             |         
2d7c4 020             | cog0                 
2d7c4 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
2d7c8 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
2d7cc 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
2d7d0 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
2d7d4 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2d7d8 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2d7dc 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
2d7e0 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
2d7e4 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
2d7e8 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2d7ec 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2d7f0 02b 33 CA 63 FD |                             execf   request-0               'jump to service
2d7f4 02c             | cog1                        
2d7f4 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
2d7f8 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
2d7fc 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
2d800 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
2d804 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2d808 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2d80c 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
2d810 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
2d814 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
2d818 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2d81c 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2d820 037 33 CA 63 FD |                             execf   request-0               'jump to service
2d824 038             | cog2                         
2d824 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
2d828 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
2d82c 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
2d830 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
2d834 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2d838 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2d83c 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
2d840 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
2d844 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
2d848 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2d84c 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2d850 043 33 CA 63 FD |                             execf   request-0               'jump to service
2d854 044             | cog3                        
2d854 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
2d858 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
2d85c 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
2d860 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
2d864 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2d868 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2d86c 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
2d870 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
2d874 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
2d878 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2d87c 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2d880 04f 33 CA 63 FD |                             execf   request-0               'jump to service
2d884 050             | cog4                        
2d884 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
2d888 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
2d88c 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
2d890 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
2d894 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2d898 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2d89c 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
2d8a0 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
2d8a4 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
2d8a8 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2d8ac 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2d8b0 05b 33 CA 63 FD |                             execf   request-0               'jump to service
2d8b4 05c             | cog5                        
2d8b4 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
2d8b8 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
2d8bc 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
2d8c0 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
2d8c4 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2d8c8 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2d8cc 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
2d8d0 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
2d8d4 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
2d8d8 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2d8dc 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2d8e0 067 33 CA 63 FD |                             execf   request-0               'jump to service
2d8e4 068             | cog6                        
2d8e4 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
2d8e8 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
2d8ec 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
2d8f0 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
2d8f4 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2d8f8 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2d8fc 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
2d900 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
2d904 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
2d908 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2d90c 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2d910 073 33 CA 63 FD |                             execf   request-0               'jump to service
2d914 074             | cog7                        
2d914 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
2d918 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
2d91c 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
2d920 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
2d924 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2d928 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2d92c 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
2d930 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
2d934 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
2d938 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2d93c 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2d940 07f 33 CA 63 FD |                             execf   request-0               'jump to service
2d944 080             |                             fit     128
2d944 080             | 
2d944 080             |                             fit     128
2d944 080             | pad                         long    0[128-$]                'align init code to $80
2d944 080             | 
2d944 080             | '..................................................................................................
2d944 080             | 
2d944 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
2d944 080             | 
2d944 080             | init                        
2d944 080             |                             ' get driver scratch long address in hub
2d944 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
2d948 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
2d94c 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
2d950 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
2d954 084             |                     
2d954 084             |                             ' read in the additional LUT RAM code
2d954 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
2d958 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
2d95c 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
2d960 087             | 
2d960 087             |                             ' read the startup parameters
2d960 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
2d964 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
2d968 089             | 
2d968 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
2d968 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
2d96c 08a             | 
2d96c 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
2d970 08b 01 00 00 5F 
2d974 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
2d978 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
2d97c 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
2d980 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
2d984 090             | 
2d984 090             |                             ' setup data pin modes and data bus pin group in streamer commands
2d984 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
2d988 091 01 00 00 FF 
2d98c 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
2d990 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
2d994 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
2d998 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
2d99c 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
2d9a0 097 08 DE 47 F5 |                             or      a, #8
2d9a4 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
2d9a8 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
2d9ac 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
2d9b0 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
2d9b4 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
2d9b8 09d 01 DE 07 F1 |                             add     a, #1
2d9bc 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
2d9c0 09f             |  
2d9c0 09f             |                             ' setup device control pin states
2d9c0 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
2d9c4 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
2d9c8 0a1 01 00 00 FF 
2d9cc 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
2d9d0 0a3             | 
2d9d0 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
2d9d4 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
2d9d8 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
2d9dc 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
2d9e0 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
2d9e4 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
2d9e8 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
2d9ec 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
2d9f0 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
2d9f4 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
2d9f8 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
2d9fc 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
2da00 0af             | pinloop
2da00 0af             |                             ' generate minimum CE high time before access
2da00 0af A1 07 00 FF 
2da04 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
2da08 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
2da0c 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
2da10 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
2da14 0b4 1F DE 63 FD |                             waitx   a                       'delay
2da18 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
2da1c 0b6             | 
2da1c 0b6             |                             ' setup the COG mailboxes and addresses 
2da1c 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
2da20 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
2da24 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
2da28 0b9             | 
2da28 0b9 28 2E 64 FD |                             setq    #24-1
2da2c 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
2da30 0bb             | 
2da30 0bb             |                             ' setup the polling loop for active COGs 
2da30 0bb 01 C2 63 FD |                             cogid   id
2da34 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
2da38 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
2da3c 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
2da40 0bf 0A F0 07 F6 |                             mov     ptra, #10
2da44 0c0 E1 F1 03 FA |                             mul     ptra, id
2da48 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
2da4c 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
2da50 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
2da54 0c4 03 C2 07 FA |                             mul     id, #3
2da58 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
2da5c 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
2da60 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
2da64 0c8 D8 01 B0 FD |                             call    #reloadcogs
2da68 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
2da6c 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
2da70 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
2da70 0cb D8 E5 B7 F9 |                             setd    d, #addr1
2da74 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
2da78 0cd 08 04 DC FC |                             rep     #2, #8
2da7c 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
2da80 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
2da84 0d0             | 
2da84 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
2da84 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
2da84 0d0 01 C2 63 FD |                             cogid   id
2da88 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
2da8c 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
2da90 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
2da94 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
2da98 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
2da9c 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
2daa0 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
2daa4 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
2daa8 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
2daac 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
2dab0 0db 3F E4 A7 F9 |                             alti    d, #%111_111
2dab4 0dc 00 00 00 F6 |                             mov     0-0, 0-0
2dab8 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
2dabc 0de A5 E5 03 F1 |                             add     d, const512
2dac0 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
2dac4 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
2dac8 0e1 00 00 00 F6 |                             mov     0-0, 0-0
2dacc 0e2             |                             
2dacc 0e2             |                             ' setup register values for control vector loop setup after we return
2dacc 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
2dad0 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
2dad4 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
2dad8 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
2dadc 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
2dae0 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
2dae4 0e8 D0 C3 8F F9 |                             altd    id, #id0
2dae8 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
2daec 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
2daf0 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
2daf4 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
2daf8 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
2dafc 0ee             |  
2dafc 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
2db00 0ef 07 CA 07 F5 |                             and     request, #7
2db04 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
2db08 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
2db0c 0f2             |                             fit     $100                    'ensure all init code fits this space
2db0c 0f2             | 
2db0c 0f2             |                             fit     $100                    'ensure all init code fits this space
2db0c 0f2             | 
2db0c 0f2 00 00 00 00 
      ...             
2db3c 0fe 00 00 00 00 
2db40 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
2db44 100             | 
2db44 100             | '..................................................................................................
2db44 100             | ' Error result handling and COG notification of request completion
2db44 100             | 
2db44 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
2db48 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
2db4c 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
2db50 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
2db54 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
2db58 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
2db5c 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
2db60 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
2db64 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
2db68 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
2db6c 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
2db70 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
2db74 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
2db78 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
2db7c 10e             | ' Poller re-starts here after a COG is serviced
2db7c 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
2db80 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
2db84 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
2db88 111             | ' Main dynamic polling loop repeats until a request arrives
2db88 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
2db8c 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
2db90 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
2db94 114             | 
2db94 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
2db98 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
2db9c 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
2dba0 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
2dba4 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
2dba8 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
2dbac 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
2dbb0 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
2dbb4 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
2dbb8 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
2dbbc 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
2dbc0 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
2dbc4 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
2dbc8 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
2dbcc 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
2dbd0 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
2dbd4 124             | 
2dbd4 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
2dbd8 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
2dbdc 126             |  
2dbdc 126             | '..................................................................................................
2dbdc 126             | ' List handler                               
2dbdc 126             | 
2dbdc 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
2dbe0 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
2dbe4 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
2dbe8 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
2dbec 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
2dbf0 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
2dbf4 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
2dbf8 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
2dbfc 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
2dc00 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
2dc04 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
2dc08 131 33 00 60 FD |                             execf   0-0                     'process the request 
2dc0c 132             | 
2dc0c 132             | '..................................................................................................
2dc0c 132             | ' Restoring per COG state and resuming where we left off
2dc0c 132             | 
2dc0c 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
2dc10 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
2dc14 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
2dc18 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
2dc1c 136 D8 CB FB F8 |                             getbyte request, addr1, #3
2dc20 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
2dc24 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
2dc28 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
2dc2c 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
2dc30 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
2dc34 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
2dc38 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
2dc3c 13e             |                    
2dc3c 13e             | '..................................................................................................
2dc3c 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
2dc3c 13e             | 
2dc3c 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
2dc40 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
2dc44 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
2dc48 141 D0 DF B7 F9 |                             setd    a, #id0
2dc4c 142 D8 DF BF F9 |                             sets    a, #addr1
2dc50 143 FE FF FF FF 
2dc54 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
2dc58 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
2dc5c 146 3F DE A7 F9 |                             alti    a, #%111_111 
2dc60 147 00 00 F0 F9 |                             muxq    0-0, 0-0
2dc64 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
2dc68 149 01 E2 63 FD |                             cogid   c
2dc6c 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
2dc70 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
2dc74 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
2dc78 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
2dc7c 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
2dc80 14f 00 E0 03 F6 |                             mov     b, 0-0
2dc84 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
2dc88 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
2dc8c 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
2dc90 153 0C 00 90 AD |             if_z            jmp     #excluded               
2dc94 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
2dc98 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
2dc9c 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
2dca0 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
2dca4 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
2dca8 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
2dcac 15a             | 
2dcac 15a             | 'determine priority cogs and build instructions for the polling sequence
2dcac 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
2dcb0 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
2dcb4 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
2dcb8 15d             | 
2dcb8 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
2dcbc 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
2dcc0 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
2dcc4 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
2dcc8 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
2dccc 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
2dcd0 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
2dcd4 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
2dcd8 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
2dcdc 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
2dce0 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
2dce4 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
2dce8 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
2dcec 16a             | endprioloop
2dcec 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
2dcf0 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
2dcf4 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
2dcf8 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
2dcfc 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
2dd00 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
2dd04 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
2dd08 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
2dd0c 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
2dd10 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
2dd14 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
2dd18 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
2dd1c 176             | 
2dd1c 176             | ' populate the round robin COG polling instructions
2dd1c 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
2dd20 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
2dd24 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
2dd28 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
2dd2c 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
2dd30 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
2dd34 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
2dd38 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
2dd3c 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
2dd40 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
2dd44 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
2dd48 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
2dd4c 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
2dd50 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
2dd54 184             | '..................................................................................................
2dd54 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
2dd54 184             | 
2dd54 184             | set_latency                                                 '            (a) set latency
2dd54 184             | get_latency                                                 '            (b) get latency
2dd54 184             | set_burst                                                   '            (c) set burst size of bank
2dd54 184             | get_burst                                                   '            (d) get burst size of bank
2dd54 184             |                                                             '            (e) dump state
2dd54 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
2dd58 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
2dd5c 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
2dd60 187             |                                                             ' | | | | e  account for following AUGS
2dd60 187 04 00 00 FF 
2dd64 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
2dd68 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
2dd6c 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
2dd70 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
2dd74 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
2dd78 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
2dd7c 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
2dd80 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
2dd84 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
2dd88 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
2dd8c 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
2dd90 193             | 
2dd90 193             | '..................................................................................................
2dd90 193             | ' Misc EXECF code
2dd90 193             | 
2dd90 193 33 72 63 FD | start_read_exec             execf   newburstr
2dd94 194 33 7C 63 FD | start_write_exec            execf   resumewrites
2dd98 195 33 78 63 FD | continue_read_exec          execf   lockedreads
2dd9c 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
2dda0 197             | 
2dda0 197             | '..................................................................................................
2dda0 197             | ' Variables
2dda0 197             | 
2dda0 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
2dda4 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
2dda8 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
2ddac 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
2ddb0 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
2ddb4 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
2ddb8 19d             | 
2ddb8 19d 00 00 00 80 | xfreq1          long    $80000000
2ddbc 19e 00 00 00 40 | xfreq2          long    $40000000
2ddc0 19f 03 00 00 00 | delay           long    3
2ddc4 1a0             | 
2ddc4 1a0             | lutcodeaddr                 
2ddc4 1a0             | startupparams
2ddc4 1a0             | excludedcogs                                    'careful: shared register use!
2ddc4 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
2ddc8 1a1 00 00 00 00 | flags           long    0
2ddcc 1a2             | mask                                            'careful: shared register use!
2ddcc 1a2 00 00 00 00 | resetmaskA      long    0
2ddd0 1a3             | limit                                           'careful: shared register use!
2ddd0 1a3 00 00 00 00 | resetmaskB      long    0
2ddd4 1a4 00 00 00 00 | datapins        long    0
2ddd8 1a5             | const512                                        'careful: shared register use!
2ddd8 1a5 00 00 00 00 | devicelist      long    0
2dddc 1a6 00 00 00 00 | coglist         long    0
2dde0 1a7 00 00 00 00 | mbox            long    0 
2dde4 1a8             | 
2dde4 1a8             | clkpin                                          'shared with code patched during init
2dde4 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
2dde8 1a9             | cspin                                           'shared with code patched during init
2dde8 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
2ddec 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
2ddf0 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
2ddf4 1ac 01 00 00 00 | clkdelay        long    1
2ddf8 1ad 00 00 00 00 | regdatabus      long    0
2ddfc 1ae             | 
2ddfc 1ae 10 00 00 00 | deviceaddr      long    $10
2de00 1af             | rrcounter
2de00 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
2de04 1b0             | 
2de04 1b0             | ' jump addresses for the per COG handlers
2de04 1b0 20 00 00 00 | cog0_handler    long    cog0
2de08 1b1 2C 00 00 00 | cog1_handler    long    cog1
2de0c 1b2 38 00 00 00 | cog2_handler    long    cog2
2de10 1b3 44 00 00 00 | cog3_handler    long    cog3
2de14 1b4 50 00 00 00 | cog4_handler    long    cog4
2de18 1b5 5C 00 00 00 | cog5_handler    long    cog5
2de1c 1b6 68 00 00 00 | cog6_handler    long    cog6
2de20 1b7 74 00 00 00 | cog7_handler    long    cog7
2de24 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
2de28 1b9             | 
2de28 1b9             | ' EXECF sequences
2de28 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
2de2c 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
2de30 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
2de34 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
2de38 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
2de3c 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
2de40 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
2de44 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
2de44 1c0             | 
2de44 1c0             | 
2de44 1c0             | ' SKIPF sequences
2de44 1c0             | skiptable
2de44 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
2de48 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
2de4c 1c2 00 00 00 00 |                 long    0                      ' read modify write long
2de50 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
2de54 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
2de58 1c5 00 00 00 00 | pattern2        long    0
2de5c 1c6 00 00 00 00 | pattern3        long    0
2de60 1c7 77 02 00 00 | singlelong      long    %1001110111  
2de64 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
2de68 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
2de6c 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
2de70 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
2de74 1cc             | 
2de74 1cc             | ' LUT RAM address values
2de74 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
2de78 1cd DD 02 00 00 | continue_read   long    continue_read_lut
2de7c 1ce DB 02 00 00 | continue_write  long    continue_write_lut
2de80 1cf F6 02 00 00 | noread          long    noread_lut
2de84 1d0             | 
2de84 1d0 00 00 00 00 | id0             long    0
2de88 1d1 01 00 00 00 | id1             long    1
2de8c 1d2 02 00 00 00 | id2             long    2
2de90 1d3 03 00 00 00 | id3             long    3
2de94 1d4 04 00 00 00 | id4             long    4
2de98 1d5 05 00 00 00 | id5             long    5
2de9c 1d6 06 00 00 00 | id6             long    6
2dea0 1d7 07 00 00 00 | id7             long    7
2dea4 1d8             | 
2dea4 1d8             | 'These next 10 request registers below are also temporarily reused during init 
2dea4 1d8             | 'and COG updates and need to follow immediately after id0-id7
2dea4 1d8 00 00 00 00 | addr1           long    0
2dea8 1d9 00 00 00 00 | hubdata         long    0
2deac 1da 00 00 00 00 | count           long    0
2deb0 1db 00 00 00 00 | addr2           long    0
2deb4 1dc 00 00 00 00 | total           long    0
2deb8 1dd 00 00 00 00 | offset1         long    0
2debc 1de 00 00 00 00 | offset2         long    0
2dec0 1df 00 00 00 00 | link            long    0
2dec4 1e0             | 
2dec4 1e0             | burstwrite                                      'note shared register use during init
2dec4 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
2dec8 1e1 00 00 00 00 | id              long    0
2decc 1e2             | 
2decc 1e2 00 00 00 00 | header          long    0
2ded0 1e3 00 00 00 00 | trailer         long    0
2ded4 1e4 00 00 00 00 | cmdaddr         long    0
2ded8 1e5 00 00 00 00 | request         long    0
2dedc 1e6 00 00 00 00 | rrlimit         long    0
2dee0 1e7 00 00 00 00 | pinconfig       long    0
2dee4 1e8 00 00 00 00 | clks            long    0
2dee8 1e9 00 00 00 00 | resume          long    0
2deec 1ea 00 00 00 00 | orighubsize     long    0
2def0 1eb 00 00 00 00 | wrclks          long    0
2def4 1ec             | 
2def4 1ec 00 00 00 00 | pattern         long    0
2def8 1ed 00 00 00 00 | hubscratch      long    0
2defc 1ee 00 10 00 00 | val4k           long    4096
2df00 1ef             | 
2df00 1ef             | ' temporary general purpose regs
2df00 1ef 00 00 00 00 | a               long    0
2df04 1f0 00 00 00 00 | b               long    0
2df08 1f1 00 00 00 00 | c               long    0
2df0c 1f2 00 00 00 00 | d               long    0
2df10 1f3             |                 fit     502
2df10 1f3             | 
2df10 1f3             |                 fit     502
2df10 1f3             | 
2df10 1f3             | '..................................................................................................
2df10 1f3             | 
2df10 1f3             |             orgh
2df10                 | 
2df10                 | lut_code
2df10                 | 'HW init code up to 80 longs
2df10                 | 
2df10                 | '..................................................................................................
2df10                 | ' Memory layout for LUT RAM once operational:
2df10                 | '
2df10                 | '  LUT RAM address      Usage
2df10                 | '  ---------------      ----
2df10                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
2df10                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
2df10                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
2df10                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
2df10                 | '
2df10                 | ' Also during driver COG startup:
2df10                 | ' $230-$24F is used for HW init setup
2df10                 | ' $250-$26F is used as temporary vector storage 
2df10                 | '..................................................................................................
2df10                 | 
2df10                 |                 org $230    
2df10 230             | 
2df10 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
2df10 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
2df14 231 24 16 60 FD |                             pollxfi
2df18 232 FF AA 2A FF 
2df1c 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
2df20 234 28 00 B0 FD |                             call    #sendqspi
2df24 235 07 F8 07 FF 
2df28 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
2df2c 237 28 00 B0 FD |                             call    #sendspi
2df30 238 F8 07 78 FF 
2df34 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
2df38 23a 1C 00 B0 FD |                             call    #sendspi
2df3c 23b 7F 78 78 FF 
2df40 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
2df44 23d 10 00 B0 FD |                             call    #sendspi 
2df48 23e 2D 00 64 FD |                             ret
2df4c 23f             | 
2df4c 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
2df50 240 32 0C 64 FD |                             skipf   #%110
2df54 241 9C EF 03 F6 |                             mov     pb, xsendimm
2df58 242             | 
2df58 242 10 D0 07 F6 | sendspi                     mov     clks, #16
2df5c 243 97 EF 03 F6 |                             mov     pb, ximm8lut
2df60 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
2df64 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
2df68 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
2df6c 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
2df70 248 24 36 60 FD |                             waitxfi                         'wait for the completion
2df74 249 50 48 63 FD |                             fltl    datapins                'float data bus
2df78 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
2df7c 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
2df80 24c             | 
2df80 24c 00 00 00 00 
2df84 24d 00 00 00 00 
2df88 24e 00 00 00 00 
2df8c 24f 00 00 00 00 |                 long    0[$270-32-$]
2df90 250             |                 fit     $270-32  ' keep room for 32 vector longs
2df90 250             |     
2df90 250             |                 fit     $270-32  ' keep room for 32 vector longs
2df90 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
2df90 250             | rw_vect ' PSRAM jump vectors
2df90 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
2df94 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
2df98 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
2df9c 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
2dfa0 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
2dfa4 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
2dfa8 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
2dfac 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
2dfb0 258             | ro_vect ' R/O PSRAM jump vectors
2dfb0 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
2dfb4 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
2dfb8 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
2dfbc 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
2dfc0 25c 00 01 00 00 |                 long    unsupported
2dfc4 25d 00 01 00 00 |                 long    unsupported
2dfc8 25e 00 01 00 00 |                 long    unsupported
2dfcc 25f 00 01 00 00 |                 long    unsupported
2dfd0 260             | ctrl_vect ' Control jump vectors
2dfd0 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
2dfd4 261 00 01 00 00 |                 long    unsupported
2dfd8 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
2dfdc 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
2dfe0 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
2dfe4 265 00 01 00 00 |                 long    unsupported
2dfe8 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
2dfec 267 3E 01 00 00 |                 long    reconfig 
2dff0 268             | no_vect ' Invalid bank jump vectors
2dff0 268 01 01 00 00 |                 long    invalidbank
2dff4 269 01 01 00 00 |                 long    invalidbank
2dff8 26a 01 01 00 00 |                 long    invalidbank
2dffc 26b 01 01 00 00 |                 long    invalidbank
2e000 26c 01 01 00 00 |                 long    invalidbank
2e004 26d 01 01 00 00 |                 long    invalidbank
2e008 26e 01 01 00 00 |                 long    invalidbank
2e00c 26f 01 01 00 00 |                 long    invalidbank
2e010 270             |                 fit     $270
2e010 270             | 
2e010 270             |                 fit     $270
2e010 270             | '..................................................................................................
2e010 270             | ' PSRAM READS
2e010 270             |                                                             ' a b c d e f
2e010 270             |                                                             ' B W L B R L  (a) byte read
2e010 270             |                                                             ' Y O O U E O  (b) word read
2e010 270             |                                                             ' T R N R S C  (c) long read
2e010 270             |                                                             ' E D G S U K  (d) new burst read
2e010 270             |                                                             '       T M E  (e) resumed sub-burst
2e010 270             |                                                             '         E D  (f) locked sub-burst
2e010 270             | 
2e010 270             | 
2e010 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
2e014 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
2e018 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
2e01c 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
2e020 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
2e024 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
2e028 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
2e02c 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
2e030 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
2e034 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
2e038 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
2e03c 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
2e040 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
2e044 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
2e048 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
2e04c 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
2e050 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
2e054 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
2e058 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
2e05c 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
2e060 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
2e064 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
2e068 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
2e06c 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
2e070 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
2e074 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
2e078 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
2e07c 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
2e080 28c             | 
2e080 28c             |                             ' fall through to read bursts
2e080 28c             |                         
2e080 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
2e080 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
2e084 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
2e088 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
2e08c 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
2e090 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
2e094 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
2e098 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
2e09c 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
2e0a0 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
2e0a4 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
2e0a8 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
2e0ac 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
2e0b0 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
2e0b4 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
2e0b8 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
2e0bc 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
2e0c0 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
2e0c4 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
2e0c8 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
2e0cc 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
2e0d0 2a0 E8 D1 03 F1 |                             add     clks, clks
2e0d4 2a1             | readcommon
2e0d4 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
2e0d8 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
2e0dc 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
2e0e0 2a4             | 
2e0e0 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
2e0e4 2a5 69 C8 63 FD |                             rev     cmdaddr
2e0e8 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
2e0ec 2a7 61 C8 63 FD |                             mergeb  cmdaddr
2e0f0 2a8             | 
2e0f0 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
2e0f4 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
2e0f8 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
2e0f8 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
2e0fc 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
2e100 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
2e104 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
2e108 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
2e108 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
2e10c 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
2e110 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
2e114 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
2e118 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
2e11c 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
2e120 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
2e120 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
2e124 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
2e128 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
2e12c 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
2e130 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
2e134 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
2e138 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
2e13c 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
2e140 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
2e144 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
2e148 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
2e14c 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
2e150 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
2e154 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
2e158 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
2e158 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
2e15c 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
2e160 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
2e164 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
2e168 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
2e16c 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
2e170 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
2e174 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
2e178 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
2e17c 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
2e180 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
2e184 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
2e188 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
2e18c 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
2e190 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
2e194 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
2e198 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
2e19c 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
2e1a0 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
2e1a4 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
2e1a8 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
2e1ac 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
2e1b0 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
2e1b4 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
2e1b8 2da 10 03 90 FD |                             jmp     #writecommon
2e1bc 2db             | 
2e1bc 2db             | '..................................................................................................
2e1bc 2db             | ' Burst continuation testing
2e1bc 2db             | 
2e1bc 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
2e1c0 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
2e1c4 2dd             | continue_read_lut          
2e1c4 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
2e1c8 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
2e1cc 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
2e1d0 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
2e1d4 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
2e1d8 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
2e1dc 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
2e1e0 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
2e1e4 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
2e1e8 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
2e1ec 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
2e1f0 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
2e1f4 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
2e1f8 2ea             | 
2e1f8 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
2e1fc 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
2e200 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
2e204 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
2e208 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
2e20c 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
2e210 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
2e214 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
2e218 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
2e21c 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
2e220 2f4 2A 1C 66 0D |             _ret_           push    #poller
2e224 2f5             | 
2e224 2f5             | 
2e224 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
2e228 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
2e228 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
2e22c 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
2e230 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
2e234 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
2e238 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
2e23c 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
2e240 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
2e244 2fd 2D 00 64 FD |                             ret                             ' | continue processing
2e248 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
2e24c 2ff             | '..................................................................................................
2e24c 2ff             | ' Completion of requests
2e24c 2ff             | 
2e24c 2ff             | complete_rw_lut             
2e24c 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
2e250 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
2e254 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
2e258 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
2e25c 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
2e260 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
2e264 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
2e268 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
2e26c 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
2e270 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
2e274 309 32 62 64 AD |             if_z            skipf   #%110001
2e278 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
2e27c 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
2e280 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
2e284 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
2e288 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
2e28c 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
2e290 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
2e294 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
2e298 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
2e29c 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
2e2a0 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
2e2a4 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
2e2a8 316             |                                                             ' skipcase (a) gfx copy to/from hub
2e2a8 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
2e2a8 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
2e2a8 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
2e2ac 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
2e2b0 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
2e2b4 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
2e2b8 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
2e2bc 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
2e2c0 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
2e2c4 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
2e2c8 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
2e2cc 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
2e2d0 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
2e2d4 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
2e2d8 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
2e2dc 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
2e2e0 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
2e2e4 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
2e2e8 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
2e2ec 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
2e2f0 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
2e2f4 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
2e2f8 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
2e2fc 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
2e300 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
2e304 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
2e308 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
2e30c 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
2e310 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
2e314 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
2e318 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
2e31c 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
2e320 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
2e324 335 DF B7 03 A6 |             if_z            mov     addr2, link
2e328 336 34 FF 9F AD |             if_z            jmp     #checknext
2e32c 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
2e330 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
2e334 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
2e338 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
2e33c 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
2e340 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
2e344 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
2e348 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
2e34c 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
2e350 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
2e354 341             | 
2e354 341             | '..................................................................................................
2e354 341             | ' PSRAM WRITES
2e354 341             |                                                             '  a b c d e f g h
2e354 341             | 
2e354 341             |                                                             '  B W L F B R L L (a) byte write(s)
2e354 341             |                                                             '  Y O O I U E O O (b) word write(s)
2e354 341             |                                                             '  T R N L R S C C (c) long write(s)
2e354 341             |                                                             '  E D G L S U K K (d) resumed fill
2e354 341             |                                                             '          T M E E (e) new burst write
2e354 341             |                                                             '            E D D (f) resumed burst
2e354 341             |                                                             '              F B (g) locked fill
2e354 341             |                                                             '              I U (h) locked burst write
2e354 341             |                                                             '              L R 
2e354 341             |                                                             '              L S 
2e354 341             |                                                             '                T 
2e354 341             | 
2e354 341             | w_single                   
2e354 341             | w_fill_cont           
2e354 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
2e358 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
2e35c 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
2e360 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
2e364 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
2e368 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
2e36c 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
2e370 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
2e374 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
2e378 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
2e37c 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
2e380 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
2e384 34d             |                ' disable call to r_resume_burst for single longs when z=0
2e384 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
2e388 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
2e38c 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
2e390 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
2e394 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
2e398 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
2e39c 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
2e3a0 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
2e3a4 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
2e3a8 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
2e3ac 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
2e3b0 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
2e3b4 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
2e3b8 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
2e3bc 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
2e3c0 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
2e3c4 35d             |         
2e3c4 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
2e3c4 35d             |             '
2e3c4 35d             |             '  At least one of these 3 optional components will be sent
2e3c4 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
2e3c4 35d             |             '     body - N x full longs of data
2e3c4 35d             |             '     trailer - last partial long of data
2e3c4 35d             |             '
2e3c4 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
2e3c4 35d             |             '
2e3c4 35d             |             'Case    Type                           Sends
2e3c4 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
2e3c4 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
2e3c4 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
2e3c4 35d             |             ' 4)     Multiple long fill             body only
2e3c4 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
2e3c4 35d             | 
2e3c4 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
2e3c4 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
2e3c8 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
2e3cc 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
2e3d0 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
2e3d4 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
2e3d8 362 13 8C 07 F6 |                             mov     pattern3, #%10011
2e3dc 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
2e3e0 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
2e3e4 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
2e3e8 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
2e3ec 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
2e3f0 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
2e3f4 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
2e3f8 36a             |                             
2e3f8 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
2e3fc 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
2e400 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
2e404 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
2e408 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
2e40c 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
2e410 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
2e414 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
2e418 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
2e41c 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
2e420 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
2e424 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
2e428 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
2e42c 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
2e430 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
2e434 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
2e438 37a             | 
2e438 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
2e43c 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
2e440 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
2e444 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
2e448 37e             |                  
2e448 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
2e44c 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
2e450 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
2e454 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
2e458 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
2e45c 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
2e460 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
2e464 385             | 
2e464 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
2e468 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
2e46c 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
2e470 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
2e474 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
2e478 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
2e47c 38b             | 
2e47c 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
2e47c 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
2e480 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
2e484 38d 2A B0 63 FD |                             push    addr1                   'save address
2e488 38e             | 
2e488 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
2e488 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
2e48c 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
2e490 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
2e494 391             |             
2e494 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
2e498 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
2e49c 393 2B B0 63 FD |                             pop     addr1                   'restore address
2e4a0 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
2e4a4 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
2e4a8 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
2e4ac 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
2e4b0 398             | 
2e4b0 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
2e4b4 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
2e4b8 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
2e4bc 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
2e4c0 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
2e4c4 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
2e4c8 39e             | 
2e4c8 39e             |                             'trailer is done
2e4c8 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
2e4cc 39f             | 
2e4cc 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
2e4d0 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
2e4d4 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
2e4d8 3a2             | 
2e4d8 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
2e4dc 3a3 69 C8 63 FD |                             rev     cmdaddr                 
2e4e0 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
2e4e4 3a5 61 C8 63 FD |                             mergeb  cmdaddr
2e4e8 3a6             |                             
2e4e8 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
2e4ec 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
2e4f0 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
2e4f4 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
2e4f8 3aa             |                                                          
2e4f8 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
2e4fc 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
2e500 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
2e504 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
2e508 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
2e50c 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
2e510 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
2e514 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
2e518 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
2e51c 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
2e520 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
2e524 3b5             |  
2e524 3b5 59 52 63 FD |                             drvh    cspin
2e528 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
2e52c 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
2e530 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
2e534 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
2e538 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
2e53c 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
2e540 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
2e544 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
2e548 3be EA E5 03 F6 |                             mov     d, orighubsize
2e54c 3bf EF E5 63 F0 |                             shl     d, a
2e550 3c0 F2 E3 83 F1 |                             sub     c, d
2e554 3c1 DD E3 03 F1 |                             add     c, offset1
2e558 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
2e55c 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
2e560 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
2e564 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
2e568 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
2e56c 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
2e570 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
2e574 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
2e578 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
2e57c 3cb BB D3 03 F6 |                             mov     resume, restorefill
2e580 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
2e584 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
2e588 3ce 6C FC BF CD |             if_c            call    #yield
2e58c 3cf 2D 00 64 FD |                             ret
2e590 3d0             |                            
2e590 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
2e590 3d0             |                       '     rczl    pa                      'rotate left into address offset
2e590 3d0             |                       '     rczl    c wcz                   'restore count and flags
2e590 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
2e594 3d1 02 EC 67 F0 |                             shl     pa, #2
2e598 3d2 28 06 64 AD |             if_z            setq    #3
2e59c 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
2e5a0 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
2e5a4 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
2e5a8 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
2e5ac 3d7             | 
2e5ac 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
2e5b0 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
2e5b4 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
2e5b8 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
2e5bc 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
2e5c0 3dc             |                 fit 1024-32
2e5c0 3dc             |         
2e5c0 3dc             | 
2e5c0 3dc             | '..................................................................................................
2e5c0 3dc             | 
2e5c0 3dc             |                 fit 1024-32
2e5c0 3dc 00 00 00 00 
2e5c4 3dd 00 00 00 00 
2e5c8 3de 00 00 00 00 
2e5cc 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
2e5d0 3e0             |                 org 1024-32
2e5d0 000             | 
2e5d0 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
2e5d0 000 00 00 00 00 |                 long $0000
2e5d4 001 11 11 00 00 |                 long $1111
2e5d8 002 22 22 00 00 |                 long $2222
2e5dc 003 33 33 00 00 |                 long $3333
2e5e0 004 44 44 00 00 |                 long $4444
2e5e4 005 55 55 00 00 |                 long $5555
2e5e8 006 66 66 00 00 |                 long $6666
2e5ec 007 77 77 00 00 |                 long $7777
2e5f0 008 88 88 00 00 |                 long $8888
2e5f4 009 99 99 00 00 |                 long $9999
2e5f8 00a AA AA 00 00 |                 long $aaaa
2e5fc 00b BB BB 00 00 |                 long $bbbb
2e600 00c CC CC 00 00 |                 long $cccc
2e604 00d DD DD 00 00 |                 long $dddd
2e608 00e EE EE 00 00 |                 long $eeee
2e60c 00f FF FF 00 00 |                 long $ffff
2e610 010             | 
2e610 010             | 'masks
2e610 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
2e614 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
2e618 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
2e61c 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
2e620 014             | 
2e620 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
2e624 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
2e628 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
2e62c 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
2e630 018             | 
2e630 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
2e634 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
2e638 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
2e63c 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
2e640 01c             | 
2e640 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
2e644 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
2e648 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
2e64c 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
2e650 020             |         fit 1024
2e650 020             | 
2e650 020             |         fit 1024
2e650 020             | 
2e650 020             | '--------------------------------------------------------------------------------------------------
2e650 020             |         orgh
2e650                 | 
2e650                 | gfxexpansion
2e650                 |                             'simple line drawing graphics expansion of memory driver
2e650                 |                             'jmp     #donerepeats                'just return for now
2e650                 | 
2e650     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
2e654     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
2e658     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
2e65c     DD E1 03 F6 |                             mov     b, offset1              'get error term
2e660     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
2e664     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
2e668     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
2e66c     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
2e670     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
2e674     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
2e678     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
2e67c     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
2e680     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
2e684     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
2e688     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
2e68c     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
2e690     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
2e694     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
2e698     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
2e69c     DC E5 33 F9 |                             getword d, total, #0            'get line width
2e6a0     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
2e6a4     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
2e6a8     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
2e6ac     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
2e6b0     C3 03 80 FD |                             jmp     #readmask               'continue filling
2e6b4                 | 	alignl
2e6b4                 | _usbnew_spin2_dat_
2e6b4                 |                 org     $000
2e6b4 000             | 
2e6b4 000             | usb_host_start
2e6b4 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
2e6b8 001             | 
2e6b8 001 03 00 00 FF 
2e6bc 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
2e6c0 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
2e6c4 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
2e6c8 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
2e6cc 006 29 70 63 FD |                 setq2   htmp
2e6d0 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
2e6d4 008             | 
2e6d4 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
2e6d8 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
2e6dc 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
2e6e0 00b             | 
2e6e0 00b             | '------------------------------------------------------------------------------
2e6e0 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
2e6e0 00b             | ' special because the receiving function must not respond with either STALL or
2e6e0 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
2e6e0 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
2e6e0 00b             | ' corrupt packet, it must ignore the transaction
2e6e0 00b             | '------------------------------------------------------------------------------
2e6e0 00b             | ' On entry:
2e6e0 00b             | '   PTRA - start address of the SETUP data struct.
2e6e0 00b             | ' On exit:
2e6e0 00b             | '   retval - PID_ACK on success, otherwise error code.
2e6e0 00b             | '------------------------------------------------------------------------------
2e6e0 00b             | txn_setup
2e6e0 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
2e6e4 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
2e6e8 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
2e6ec 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
2e6f0 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
2e6f4 010             | .setup
2e6f4 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
2e6f8 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2e6fc 012 2D 00 64 AD |         if_z    ret
2e700 013 7C 0B B0 FD |                 call    #retry_wait
2e704 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2e708 015 2D 00 64 AD |         if_z    ret
2e70c 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
2e710 017 E0 FF 9F FD |                 jmp     #.setup
2e714 018             | 
2e714 018             | '------------------------------------------------------------------------------
2e714 018             | ' IN/INTERRUPT transaction.
2e714 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
2e714 018             | '------------------------------------------------------------------------------
2e714 018             | ' On entry:
2e714 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
2e714 018             | '     CRC(b19..23).
2e714 018             | ' On exit:
2e714 018             | '------------------------------------------------------------------------------
2e714 018             | txn_in
2e714 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
2e718 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
2e71c 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
2e720 01b             | 
2e720 01b             |                 ' Fall through to urx_packet
2e720 01b             | 
2e720 01b             | '------------------------------------------------------------------------------
2e720 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
2e720 01b             | ' received are handshakes and IN DATAx.
2e720 01b             | '------------------------------------------------------------------------------
2e720 01b             | ' On entry:
2e720 01b             | ' On exit:
2e720 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
2e720 01b             | '     returned.
2e720 01b             | '------------------------------------------------------------------------------
2e720 01b             | urx_packet
2e720 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
2e724 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2e728 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
2e72c 01e 1A 92 63 FD |                 getct   hct2
2e730 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
2e734 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
2e738 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
2e73c 022             | .wait_sop
2e73c 022 22 A7 8A FA |                 rdpin   urx, dm
2e740 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2e744 024 08 00 90 CD |         if_c    jmp     #.get_pid
2e748 025 FC 25 CC FB |                 jnct2   #.wait_sop
2e74c 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
2e750 027             | .get_pid
2e750 027 28 02 B0 FD |                 call    #urx_next
2e754 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
2e758 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
2e75c 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
2e760 02b             | .chk_pid
2e760 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2e764 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
2e768 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
2e76c 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
2e770 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
2e774 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
2e778 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
2e77c 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
2e780 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
2e784 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
2e788 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
2e78c 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
2e790 037             | .ack_resend
2e790 037 22 A7 82 FA |                 rqpin   urx, dm
2e794 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
2e798 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
2e79c 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
2e7a0 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
2e7a4 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
2e7a8 03d             | .chk_eop
2e7a8 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2e7ac 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
2e7b0 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
2e7b4 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
2e7b8 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
2e7bc 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
2e7c0 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
2e7c4 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
2e7c8 045 2D 00 64 FD |                 ret
2e7cc 046             | .idle
2e7cc 046 22 A7 82 FA |                 rqpin   urx, dm
2e7d0 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
2e7d4 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
2e7d8 049 2D 00 64 FD |                 ret
2e7dc 04a             | 
2e7dc 04a             | '------------------------------------------------------------------------------
2e7dc 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
2e7dc 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
2e7dc 04a             | ' if one is required.
2e7dc 04a             | '------------------------------------------------------------------------------
2e7dc 04a             | ' On entry:
2e7dc 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
2e7dc 04a             | ' On exit:
2e7dc 04a             | '------------------------------------------------------------------------------
2e7dc 04a             | utx_token
2e7dc 04a 22 A7 82 FA |                 rqpin   urx, dm
2e7e0 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
2e7e4 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
2e7e8 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
2e7ec 04e 34 0D B0 CD |         if_c    call    #utx_pre
2e7f0 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
2e7f4 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
2e7f8 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
2e7fc 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
2e800 053             | .next_byte
2e800 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
2e804 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
2e808 055             | .wait
2e808 055 40 46 72 FD |                 testp   dp                      wc
2e80c 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
2e810 057 23 03 08 FC |                 akpin   dp
2e814 058 22 A5 22 FC |                 wypin   utx, dm
2e818 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
2e81c 05a             | 
2e81c 05a             | '------------------------------------------------------------------------------
2e81c 05a             | ' SETUP/OUT/INTERRUPT transaction.
2e81c 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
2e81c 05a             | '------------------------------------------------------------------------------
2e81c 05a             | ' On entry:
2e81c 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
2e81c 05a             | '     CRC(b19..23).
2e81c 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
2e81c 05a             | '   pkt_data - count of DATAx payload bytes to send.
2e81c 05a             | ' On exit:
2e81c 05a             | '------------------------------------------------------------------------------
2e81c 05a             | txn_out
2e81c 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
2e820 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
2e824 05c 00 00 C0 FF 
2e828 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
2e82c 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
2e830 05f             | 
2e830 05f             |                 ' Fall through to utx_data
2e830 05f             | 
2e830 05f             | '------------------------------------------------------------------------------
2e830 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
2e830 05f             | ' calculated while the data byte is being shifted out. Since data stage
2e830 05f             | ' success/fail is not determined until the status stage of the transaction,
2e830 05f             | ' this routine is only concerned about the current DATAx packet.
2e830 05f             | '------------------------------------------------------------------------------
2e830 05f             | ' On entry:
2e830 05f             | '   PTRA - hub start address of the data to read.
2e830 05f             | '   pkt_cnt - data payload size.
2e830 05f             | ' On exit:
2e830 05f             | '------------------------------------------------------------------------------
2e830 05f             | utx_data
2e830 05f 22 A7 82 FA |                 rqpin   urx, dm
2e834 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2e838 061 F4 FF 9F CD |         if_c    jmp     #utx_data
2e83c 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
2e840 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
2e844 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
2e848 065 D8 0C B0 CD |         if_c    call    #utx_pre
2e84c 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
2e850 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
2e854 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
2e858 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
2e85c 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
2e860 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
2e864 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
2e868 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
2e86c 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
2e870 06f             | .read_byte
2e870 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
2e874 070 F0 00 B0 FD |                 call    #utx_byte
2e878 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
2e87c 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
2e880 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
2e884 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
2e888 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
2e88c 076             | .send_crc
2e88c 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
2e890 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
2e894 078 D0 00 B0 FD |                 call    #utx_byte
2e898 079 5D A5 EA F8 |                 getbyte utx, crc, #1
2e89c 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
2e8a0 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
2e8a4 07c             | 
2e8a4 07c             | '------------------------------------------------------------------------------
2e8a4 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
2e8a4 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
2e8a4 07c             | ' expects that the packet includes at least the CRC word.
2e8a4 07c             | '
2e8a4 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
2e8a4 07c             | ' was requested, which makes it difficult to determine where the data stops
2e8a4 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
2e8a4 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
2e8a4 07c             | ' USB-16 expected residual value of 0xB001.
2e8a4 07c             | '
2e8a4 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
2e8a4 07c             | ' so the caller can verify IN success before writing the data to its final
2e8a4 07c             | ' destination.
2e8a4 07c             | '------------------------------------------------------------------------------
2e8a4 07c             | ' On entry:
2e8a4 07c             | '   pkt_data - max byte count expected to be in the packet.
2e8a4 07c             | '   newb_flg - signals new byte ready when toggled.
2e8a4 07c             | ' On exit:
2e8a4 07c             | '   pkt_cnt - actual number of bytes read.
2e8a4 07c             | '------------------------------------------------------------------------------
2e8a4 07c             | urx_data
2e8a4 07c F7 75 03 F6 |                 mov     htmp2, pb
2e8a8 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
2e8ac 07e 00 00 C0 FF 
2e8b0 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
2e8b4 080 BA EF 03 F6 |                 mov     pb, htmp2
2e8b8 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
2e8bc 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
2e8c0 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
2e8c4 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
2e8c8 085             | .wait_byte
2e8c8 085             | ' In-line rx for max speed
2e8c8 085 22 A7 82 FA |                 rqpin   urx, dm
2e8cc 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
2e8d0 087 53 A5 02 F5 |                 and     utx, urx
2e8d4 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
2e8d8 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
2e8dc 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
2e8e0 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
2e8e4 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
2e8e8 08d DC FF 9F FD |                 jmp     #.wait_byte
2e8ec 08e             | .get_byte
2e8ec 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
2e8f0 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
2e8f4 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
2e8f8 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
2e8fc 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
2e900 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
2e904 094             | .end_crc
2e904 094 01 B8 06 F1 |                 add     pkt_cnt, #1
2e908 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
2e90c 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
2e910 097 2D 00 64 1D |         if_a    ret
2e914 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
2e914 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
2e914 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
2e914 098             | ' to miss it, so cheat a bit and look for SOP clear here.
2e914 098 22 A7 82 FA |                 rqpin   urx, dm
2e918 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
2e91c 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
2e920 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
2e920 09b             | .chk_crc
2e920 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
2e924 09c 58 00 00 FF 
2e928 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
2e92c 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
2e930 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
2e934 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
2e938 0a1 34 09 B0 FD |                 call    #poll_waitx
2e93c 0a2             | 
2e93c 0a2             |                 ' Fall through to utx_handshake
2e93c 0a2             | 
2e93c 0a2             | '------------------------------------------------------------------------------
2e93c 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
2e93c 0a2             | ' the appropriate IP delay has been inserted.
2e93c 0a2             | '------------------------------------------------------------------------------
2e93c 0a2             | ' On entry:
2e93c 0a2             | '   retval - handshake PID to send.
2e93c 0a2             | ' On exit:
2e93c 0a2             | '   retval unchanged.
2e93c 0a2             | '------------------------------------------------------------------------------
2e93c 0a2             | utx_handshake
2e93c 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
2e940 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
2e944 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
2e948 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
2e94c 0a6 5F A5 02 F6 |                 mov     utx, retval
2e950 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
2e954 0a8             | .idle
2e954 0a8 22 A7 82 FA |                 rqpin   urx, dm
2e958 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
2e95c 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
2e960 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
2e964 0ac 08 09 90 FD |                 jmp     #poll_waitx
2e968 0ad             | 
2e968 0ad             | '------------------------------------------------------------------------------
2e968 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
2e968 0ad             | '------------------------------------------------------------------------------
2e968 0ad             | ' On entry:
2e968 0ad             | '   utx - byte to transmit.
2e968 0ad             | ' On exit:
2e968 0ad             | '------------------------------------------------------------------------------
2e968 0ad             | utx_byte
2e968 0ad 40 46 72 FD |                 testp   dp                      wc
2e96c 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
2e970 0af 23 03 08 FC |                 akpin   dp
2e974 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
2e978 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
2e97c 0b2             | 
2e97c 0b2             | '------------------------------------------------------------------------------
2e97c 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
2e97c 0b2             | '------------------------------------------------------------------------------
2e97c 0b2             | ' On entry:
2e97c 0b2             | ' On exit:
2e97c 0b2             | '   retval - the byte read.
2e97c 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
2e97c 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
2e97c 0b2             | '     received.
2e97c 0b2             | '------------------------------------------------------------------------------
2e97c 0b2             | urx_next
2e97c 0b2 22 A7 8A FA |                 rdpin   urx, dm
2e980 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
2e984 0b4 53 A5 02 F5 |                 and     utx, urx
2e988 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
2e98c 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
2e990 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
2e994 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
2e998 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2e99c 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
2e9a0 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
2e9a4 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
2e9a8 0bd 2D 00 64 FD |                 ret
2e9ac 0be             | 
2e9ac 0be             | '------------------------------------------------------------------------------
2e9ac 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
2e9ac 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
2e9ac 0be             | ' length, and the PID is not included in the CRC calculation:
2e9ac 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
2e9ac 0be             | '  CRC5  ENDP ADDRESS PID
2e9ac 0be             | ' %00000_1111_1111111_xxxxxxxx
2e9ac 0be             | '------------------------------------------------------------------------------
2e9ac 0be             | ' On entry:
2e9ac 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
2e9ac 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
2e9ac 0be             | ' On exit:
2e9ac 0be             | '   ep_addr_pid - CRC value appended to the packet.
2e9ac 0be             | '------------------------------------------------------------------------------
2e9ac 0be             | calc_crc5
2e9ac 0be FF 03 00 FF 
2e9b0 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
2e9b4 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
2e9b8 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
2e9bc 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
2e9c0 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
2e9c4 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
2e9c8 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
2e9cc 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
2e9d0 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
2e9d4 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
2e9d8 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
2e9dc 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
2e9e0 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
2e9e4 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
2e9e8 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
2e9ec 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
2e9f0 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
2e9f4 0d0             | 
2e9f4 0d0             | '------------------------------------------------------------------------------
2e9f4 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
2e9f4 0d0             | '------------------------------------------------------------------------------
2e9f4 0d0             | isr1_fsframe
2e9f4 0d0 1A 92 62 FD |                 getct   iframe_ct_base
2e9f8 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2e9fc 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2ea00 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
2ea04 0d4             | .wait
2ea04 0d4 40 46 72 FD |                 testp   dp                      wc
2ea08 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
2ea0c 0d6 23 03 08 FC |                 akpin   dp
2ea10 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
2ea14 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
2ea18 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
2ea1c 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
2ea20 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
2ea24 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
2ea28 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
2ea2c 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
2ea30 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
2ea34 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
2ea38 0e1 2C FF BF FD |                 call    #utx_byte
2ea3c 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
2ea40 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
2ea44 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
2ea48 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
2ea4c 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
2ea50 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
2ea54 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
2ea58 0e9 5B A5 42 F5 |                 or      utx, icrc
2ea5c 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
2ea60 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
2ea64 0ec 20 00 90 FD |                 jmp     #isr1_wait
2ea68 0ed             | isr1_lsframe
2ea68 0ed 1A 92 62 FD |                 getct   iframe_ct_base
2ea6c 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2ea70 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2ea74 0f0             | .wait
2ea74 0f0 40 46 72 FD |                 testp   dp                      wc
2ea78 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
2ea7c 0f2 23 03 08 FC |                 akpin   dp
2ea80 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
2ea84 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
2ea88 0f5             | isr1_wait
2ea88 0f5 22 A5 82 FA |                 rqpin   utx, dm
2ea8c 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
2ea90 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
2ea94 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
2ea98 0f9 03 00 00 FF 
2ea9c 0fa FF B3 06 F5 |                 and     frame, ##$7ff
2eaa0 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
2eaa4 0fc F5 FF 3B FB |                 reti1
2eaa8 0fd             | 
2eaa8 0fd             | '------------------------------------------------------------------------------
2eaa8 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
2eaa8 0fd             | ' transaction will complete before the next frame is triggered.
2eaa8 0fd             | '------------------------------------------------------------------------------
2eaa8 0fd             | ' On entry:
2eaa8 0fd             | ' On exit:
2eaa8 0fd             | '------------------------------------------------------------------------------
2eaa8 0fd             | wait_txn_ok
2eaa8 0fd 1A 74 63 FD |                 getct   htmp2
2eaac 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
2eab0 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2eab4 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
2eab8 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
2eabc 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
2eac0 103 2D 00 64 FD |                 ret
2eac4 104             | 
2eac4 104             | '------------------------------------------------------------------------------
2eac4 104             | ' A device connection was detected, or a bus reset was requested by the USB
2eac4 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
2eac4 104             | ' and perform a reset sequence prior to device enumeration.
2eac4 104             | '------------------------------------------------------------------------------
2eac4 104             | dev_reset
2eac4 104 22 A7 82 FA |                 rqpin   urx, dm
2eac8 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
2eacc 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
2ead0 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
2ead4 108             | reset
2ead4 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
2ead8 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
2eadc 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
2eae0 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2eae4 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
2eae8 10d 1A 92 62 FD |                 getct   iframe_ct_base
2eaec 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2eaf0 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2eaf4 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
2eaf8 111 24 70 07 F1 |                 add     htmp, #36
2eafc 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
2eb00 113             | .framewait
2eb00 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
2eb04 114 F8 FF 9F CD |         if_b    jmp     #.framewait
2eb08 115 2D 00 64 FD |                 ret
2eb0c 116             | 
2eb0c 116             | '------------------------------------------------------------------------------
2eb0c 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
2eb0c 116             | '------------------------------------------------------------------------------
2eb0c 116             | ' On entry:
2eb0c 116             | '   PTRA - source address.
2eb0c 116             | '   PB - destination address.
2eb0c 116             | '   hr0 - length of copy, in bytes.
2eb0c 116             | ' On exit:
2eb0c 116             | '------------------------------------------------------------------------------
2eb0c 116             | hmemcpy
2eb0c 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
2eb10 117 F7 71 43 FC |                 wrbyte  htmp, pb
2eb14 118 01 EE 07 F1 |                 add     pb, #1
2eb18 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
2eb1c 11a             | 
2eb1c 11a             | '------------------------------------------------------------------------------
2eb1c 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
2eb1c 11a             | ' loop until the errant device is disconnected.
2eb1c 11a             | '------------------------------------------------------------------------------
2eb1c 11a             | ' On entry:
2eb1c 11a             | ' On exit:
2eb1c 11a             | '------------------------------------------------------------------------------
2eb1c 11a             | host_error
2eb1c 11a             |           if ERROR_LED >= 0
2eb1c 11a             |           end
2eb1c 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
2eb20 11b             | 
2eb20 11b             | '------------------------------------------------------------------------------
2eb20 11b             | ' Get HID descriptor buffer for current port
2eb20 11b             | '------------------------------------------------------------------------------
2eb20 11b             | ' On entry:
2eb20 11b             | ' On exit:
2eb20 11b             | '   PB - HID descriptor buffer pointer
2eb20 11b             | '------------------------------------------------------------------------------
2eb20 11b             | get_hid_descr_buffer
2eb20 11b 2D EF 03 F6 |                 mov     pb, hdev_port
2eb24 11c 01 EE E7 F2 |                 cmpsub  pb, #1
2eb28 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
2eb2c 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
2eb30 11f             | 
2eb30 11f             | 
2eb30 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
2eb34 120             | 
2eb34 120             | ' USB commands and error codes
2eb34 120 00 00 00 00 | cmd_data        long    0
2eb38 121 00 00 00 00 | usb_err_code    long    ERR_NONE
2eb3c 122             | 
2eb3c 122             | ' Parameters block assigned at cog startup
2eb3c 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
2eb40 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
2eb44 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
2eb48 125             | if ACTIVITY_LED >= 0
2eb48 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
2eb48 125             | end
2eb48 125             | if ERROR_LED >= 0
2eb48 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
2eb48 125             | end
2eb48 125 00 00 00 00 | hid_descr_p     long    0
2eb4c 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
2eb4c 126             | 'hkbd_report_p   long    0
2eb4c 126 00 00 00 00 | hub_descr_p     long    0
2eb50 127 00 00 00 00 | urx_buff_p      long    0
2eb54 128 00 00 00 00 | dev_desc_buff_p long    0
2eb58 129 00 00 00 00 | con_desc_buff_p long    0
2eb5c 12a 00 00 00 00 | cache_start_p   long    0
2eb60 12b 00 00 00 00 | cache_end_p     long    0
2eb64 12c             | if EMUPAD_MAX_PLAYER > 0
2eb64 12c             | emupad_out_ptr  long    0
2eb64 12c             | end
2eb64 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
2eb68 12d             | 
2eb68 12d             | hdev_init_start
2eb68 12d             | hdev_port       res     1
2eb68 12d             | hdev_port       res     1
2eb68 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
2eb68 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
2eb68 12d             | kbm_next_datax  res     1
2eb68 12d             | kbm_next_datax  res     1
2eb68 12d             | hub_intf_num    res     1
2eb68 12d             | hub_intf_num    res     1
2eb68 12d             | hub_next_datax  res     1
2eb68 12d             | hub_next_datax  res     1
2eb68 12d             | hub_status_chg  res     1
2eb68 12d             | hub_status_chg  res     1
2eb68 12d             | hub_port_status res     1
2eb68 12d             | hub_port_status res     1
2eb68 12d             | if HAVE_MOUSE
2eb68 12d             | ms_intf_num     res     1
2eb68 12d             | ms_intf_num     res     1
2eb68 12d             | ms_in_max_pkt   res     1
2eb68 12d             | ms_in_max_pkt   res     1
2eb68 12d             | end
2eb68 12d             | kb_intf_num     res     1
2eb68 12d             | kb_intf_num     res     1
2eb68 12d             | kb_interval     res     1
2eb68 12d             | kb_interval     res     1
2eb68 12d             | kb_in_max_pkt   res     1
2eb68 12d             | kb_in_max_pkt   res     1
2eb68 12d             | kb_max_index    res     1
2eb68 12d             | kb_max_index    res     1
2eb68 12d             | kb_led_states   res     1
2eb68 12d             | kb_led_states   res     1
2eb68 12d             | gp_intf_num     res     1
2eb68 12d             | gp_intf_num     res     1
2eb68 12d             | gp_interval     res     1
2eb68 12d             | gp_interval     res     1
2eb68 12d             | gp_max_index    res     1
2eb68 12d             | gp_max_index    res     1
2eb68 12d             | gp_descr_len    res     1+MAX_DEVICES
2eb68 12d             | gp_descr_len    res     1+MAX_DEVICES
2eb68 12d             | hdev_init_end
2eb68 12d             | 
2eb68 12d             | ' Initialized at cog startup:
2eb68 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
2eb68 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
2eb68 12d             | iframe_ct_new   res     1
2eb68 12d             | iframe_ct_new   res     1
2eb68 12d             | iframe_ct_base  res     1
2eb68 12d             | iframe_ct_base  res     1
2eb68 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
2eb68 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
2eb68 12d             | 
2eb68 12d             | ' This register block is reset to zero when a USB device connects
2eb68 12d             | hreg_init_start
2eb68 12d             | hstatus         res     1         ' Host status flags
2eb68 12d             | hstatus         res     1         ' Host status flags
2eb68 12d             | hctwait         res     1         ' Poll-based wait clocks
2eb68 12d             | hctwait         res     1         ' Poll-based wait clocks
2eb68 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
2eb68 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
2eb68 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
2eb68 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
2eb68 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
2eb68 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
2eb68 12d             | xfer_retry      res     1         ' Control transfer retry count
2eb68 12d             | xfer_retry      res     1         ' Control transfer retry count
2eb68 12d             | retry           res     1         ' Transaction retry count
2eb68 12d             | retry           res     1         ' Transaction retry count
2eb68 12d             | utx             res     1         ' Byte to transmit on USB
2eb68 12d             | utx             res     1         ' Byte to transmit on USB
2eb68 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
2eb68 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
2eb68 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
2eb68 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
2eb68 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
2eb68 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
2eb68 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
2eb68 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
2eb68 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
2eb68 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
2eb68 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
2eb68 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
2eb68 12d             | frame           res     1         ' USB 1ms frame counter value
2eb68 12d             | frame           res     1         ' USB 1ms frame counter value
2eb68 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
2eb68 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
2eb68 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
2eb68 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
2eb68 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
2eb68 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
2eb68 12d             | crc             res     1         ' Used for CRC16 calculation
2eb68 12d             | crc             res     1         ' Used for CRC16 calculation
2eb68 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
2eb68 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
2eb68 12d             | retval          res     1         ' Global success/fail return parameter
2eb68 12d             | retval          res     1         ' Global success/fail return parameter
2eb68 12d             | context_retval  res     1         ' Operation contextual return parameter
2eb68 12d             | context_retval  res     1         ' Operation contextual return parameter
2eb68 12d             | ' Device stuff
2eb68 12d             | hdev_id         res     1+MAX_DEVICES
2eb68 12d             | hdev_id         res     1+MAX_DEVICES
2eb68 12d             | hdev_bcd        res     1
2eb68 12d             | hdev_bcd        res     1
2eb68 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
2eb68 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
2eb68 12d             | ' Keyboard/mouse stuff
2eb68 12d             | hctrl_ep_addr   res     1
2eb68 12d             | hctrl_ep_addr   res     1
2eb68 12d             | hctrl_max_pkt   res     1
2eb68 12d             | hctrl_max_pkt   res     1
2eb68 12d             | hconfig_base    res     1
2eb68 12d             | hconfig_base    res     1
2eb68 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
2eb68 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
2eb68 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
2eb68 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
2eb68 12d             | hdev_class      res     1
2eb68 12d             | hdev_class      res     1
2eb68 12d             | hdev_subclass   res     1
2eb68 12d             | hdev_subclass   res     1
2eb68 12d             | hdev_protocol   res     1
2eb68 12d             | hdev_protocol   res     1
2eb68 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
2eb68 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
2eb68 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
2eb68 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
2eb68 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
2eb68 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
2eb68 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
2eb68 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
2eb68 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
2eb68 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
2eb68 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
2eb68 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
2eb68 12d             | if HAVE_MOUSE
2eb68 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
2eb68 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
2eb68 12d             | end
2eb68 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
2eb68 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
2eb68 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
2eb68 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
2eb68 12d             | hdev_ep_addr    res     1+MAX_DEVICES
2eb68 12d             | hdev_ep_addr    res     1+MAX_DEVICES
2eb68 12d             | hdev_out_addr   res     1
2eb68 12d             | hdev_out_addr   res     1
2eb68 12d             | 
2eb68 12d             | if EMUPAD_MAX_PLAYER > 0
2eb68 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
2eb68 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
2eb68 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
2eb68 12d             | end
2eb68 12d             | 
2eb68 12d             | hreg_init_end
2eb68 12d             | 
2eb68 12d             | hidr_start
2eb68 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
2eb68 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
2eb68 12d             | hidr_flags      res     1
2eb68 12d             | hidr_flags      res     1
2eb68 12d             | hidr_axis       res     3
2eb68 12d             | hidr_axis       res     3
2eb68 12d             | hidr_buttons    res     1
2eb68 12d             | hidr_buttons    res     1
2eb68 12d             | hidr_hats       res     1
2eb68 12d             | hidr_hats       res     1
2eb68 12d             | '' Above are actually useful values, 6 longs
2eb68 12d             | hidr_id         res     1
2eb68 12d             | hidr_id         res     1
2eb68 12d             | hidr_state      res     1
2eb68 12d             | hidr_state      res     1
2eb68 12d             | hidr_size       res     1
2eb68 12d             | hidr_size       res     1
2eb68 12d             | hidr_count      res     1
2eb68 12d             | hidr_count      res     1
2eb68 12d             | hidr_offset     res     1
2eb68 12d             | hidr_offset     res     1
2eb68 12d             | hidr_usage_idx  res     1
2eb68 12d             | hidr_usage_idx  res     1
2eb68 12d             | hidr_lminmax    res     1
2eb68 12d             | hidr_lminmax    res     1
2eb68 12d             | hidr_pminmax    res     1
2eb68 12d             | hidr_pminmax    res     1
2eb68 12d             | hidr_type       res     1
2eb68 12d             | hidr_type       res     1
2eb68 12d             | hidr_end
2eb68 12d             | 
2eb68 12d             | ' Variables dependent on the system freqency
2eb68 12d             | _var_64_lower_  res     1
2eb68 12d             | _var_64_lower_  res     1
2eb68 12d             | _var_64_upper_  res     1
2eb68 12d             | _var_64_upper_  res     1
2eb68 12d             | _12Mbps_        res     1
2eb68 12d             | _12Mbps_        res     1
2eb68 12d             | _1_5Mbps_       res     1
2eb68 12d             | _1_5Mbps_       res     1
2eb68 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
2eb68 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
2eb68 12d             | _1us_           res     1         ' 1us
2eb68 12d             | _1us_           res     1         ' 1us
2eb68 12d             | _10us_          res     1         ' 10us
2eb68 12d             | _10us_          res     1         ' 10us
2eb68 12d             | _33us_          res     1         ' 33us
2eb68 12d             | _33us_          res     1         ' 33us
2eb68 12d             | _txn_err_       res     1         ' 250us
2eb68 12d             | _txn_err_       res     1         ' 250us
2eb68 12d             | _500us_         res     1         ' 500us
2eb68 12d             | _500us_         res     1         ' 500us
2eb68 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
2eb68 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
2eb68 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
2eb68 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
2eb68 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
2eb68 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
2eb68 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
2eb68 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
2eb68 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
2eb68 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
2eb68 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
2eb68 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
2eb68 12d             | _preamble_wait_ res     1
2eb68 12d             | _preamble_wait_ res     1
2eb68 12d             | _1ms_           res     1         ' 1ms
2eb68 12d             | _1ms_           res     1         ' 1ms
2eb68 12d             | _2ms_           res     1         ' 2ms
2eb68 12d             | _2ms_           res     1         ' 2ms
2eb68 12d             | _suspend_wait_  res     1         ' 3ms
2eb68 12d             | _suspend_wait_  res     1         ' 3ms
2eb68 12d             | _4ms_           res     1         ' 4ms
2eb68 12d             | _4ms_           res     1         ' 4ms
2eb68 12d             | _xfer_wait_     res     1         ' 5ms
2eb68 12d             | _xfer_wait_     res     1         ' 5ms
2eb68 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
2eb68 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
2eb68 12d             | _reset_hold_    res     1         ' 15ms
2eb68 12d             | _reset_hold_    res     1         ' 15ms
2eb68 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
2eb68 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
2eb68 12d             | _21ms_          res     1         ' 21ms
2eb68 12d             | _21ms_          res     1         ' 21ms
2eb68 12d             | _100ms_         res     1         ' 100ms
2eb68 12d             | _100ms_         res     1         ' 100ms
2eb68 12d             | _500ms_         res     1         ' 500ms
2eb68 12d             | _500ms_         res     1         ' 500ms
2eb68 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
2eb68 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
2eb68 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
2eb68 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
2eb68 12d             | '------------------------------------------------------------------------------
2eb68 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
2eb68 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
2eb68 12d             | _usb_d_ls_nco_  res     1
2eb68 12d             | _usb_d_ls_nco_  res     1
2eb68 12d             | _usb_h_fs_nco_  res     1
2eb68 12d             | _usb_h_fs_nco_  res     1
2eb68 12d             | _usb_d_fs_nco_  res     1
2eb68 12d             | _usb_d_fs_nco_  res     1
2eb68 12d             | '------------------------------------------------------------------------------
2eb68 12d             | ' Scratch registers
2eb68 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
2eb68 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
2eb68 12d             | htmp1           res     1
2eb68 12d             | htmp1           res     1
2eb68 12d             | htmp2           res     1
2eb68 12d             | htmp2           res     1
2eb68 12d             | htmp3           res     1
2eb68 12d             | htmp3           res     1
2eb68 12d             | hrep            res     1         ' Repeat count
2eb68 12d             | hrep            res     1         ' Repeat count
2eb68 12d             | hsave0          res     1         ' Subroutine parameter saves
2eb68 12d             | hsave0          res     1         ' Subroutine parameter saves
2eb68 12d             | hsave1          res     1
2eb68 12d             | hsave1          res     1
2eb68 12d             | hsave2          res     1
2eb68 12d             | hsave2          res     1
2eb68 12d             | isrtmp1         res     1
2eb68 12d             | isrtmp1         res     1
2eb68 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
2eb68 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
2eb68 12d             | hr0             res     1         ' Multi-purpose registers
2eb68 12d             | hr0             res     1         ' Multi-purpose registers
2eb68 12d             | hr1             res     1
2eb68 12d             | hr1             res     1
2eb68 12d             | hr2             res     1
2eb68 12d             | hr2             res     1
2eb68 12d             | hr3             res     1
2eb68 12d             | hr3             res     1
2eb68 12d             | hpar1           res     1         ' Routine entry/exit parameters
2eb68 12d             | hpar1           res     1         ' Routine entry/exit parameters
2eb68 12d             | hpar2           res     1
2eb68 12d             | hpar2           res     1
2eb68 12d             | hpar3           res     1
2eb68 12d             | hpar3           res     1
2eb68 12d             | hct2            res     1         ' Function response bus turn-around timer
2eb68 12d             | hct2            res     1         ' Function response bus turn-around timer
2eb68 12d             | hct3            res     1         ' Keyboard/mouse poll timer
2eb68 12d             | hct3            res     1         ' Keyboard/mouse poll timer
2eb68 12d             | mod_cnt         res     1         ' Used in idle loops
2eb68 12d             | mod_cnt         res     1         ' Used in idle loops
2eb68 12d             |                 fit     $1F0
2eb68 12d             |                 org     $200
2eb68 200             | hlut_start
2eb68 200             | 
2eb68 200             | '------------------------------------------------------------------------------
2eb68 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
2eb68 200             | ' settings to startup defaults.
2eb68 200             | '------------------------------------------------------------------------------
2eb68 200             | ' On entry:
2eb68 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
2eb68 200             | '------------------------------------------------------------------------------
2eb68 200             | set_speed_full
2eb68 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
2eb6c 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
2eb70 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
2eb74 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
2eb78 204             | '                ret                             wcz     ' Restore caller flags on exit
2eb78 204             | 
2eb78 204             | '------------------------------------------------------------------------------
2eb78 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
2eb78 204             | ' is a downstream hub connected (not yet implemented), the baud generator
2eb78 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
2eb78 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
2eb78 204             | ' putting the smart pins into reset.
2eb78 204             | '------------------------------------------------------------------------------
2eb78 204             | ' On entry:
2eb78 204             | ' On exit: CZ flags restored to caller states
2eb78 204             | '------------------------------------------------------------------------------
2eb78 204             | set_speed_low
2eb78 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
2eb7c 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
2eb80 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
2eb84 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
2eb88 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
2eb8c 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
2eb90 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
2eb94 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
2eb98 20c             | 
2eb98 20c             | '------------------------------------------------------------------------------
2eb98 20c             | ' Perform configuration stuff required when a device intitially connects.
2eb98 20c             | '------------------------------------------------------------------------------
2eb98 20c             | ' On entry:
2eb98 20c             | ' On exit:
2eb98 20c             | '------------------------------------------------------------------------------
2eb98 20c             | on_connect
2eb98 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
2eb9c 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
2eba0 20e             | .retry
2eba0 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2eba4 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
2eba8 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
2ebac 211 00 08 00 FF 
2ebb0 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
2ebb4 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
2ebb8 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2ebbc 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
2ebc0 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
2ebc4 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
2ebc8 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2ebcc 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
2ebd0 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
2ebd4 21b 4C 03 B0 FD |                 call    #poll_waitx
2ebd8 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
2ebdc 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
2ebe0 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
2ebe4 21f B8 FF 9F FD |                 jmp     #.retry
2ebe8 220             | .get_dev_desc
2ebe8 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
2ebec 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
2ebf0 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
2ebf4 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
2ebf8 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
2ebfc 225 88 FB BF FD |                 call    #reset
2ec00 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
2ec04 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2ec08 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
2ec0c 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
2ec10 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2ec14 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
2ec18 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
2ec1c 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
2ec20 22e 04 00 00 FF 
2ec24 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
2ec28 230 34 FA BF FD |                 call    #calc_crc5
2ec2c 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
2ec30 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2ec34 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
2ec38 234 F7 AD C2 FA |                 rdbyte  total_data, pb
2ec3c 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
2ec40 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
2ec44 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2ec48 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
2ec4c 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
2ec50 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
2ec54 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
2ec58 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
2ec5c 23d C4 02 B0 FD |                 call    #poll_waitx
2ec60 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
2ec64 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2ec68 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
2ec6c 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
2ec70 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
2ec74 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2ec78 244 2D 00 64 5D |         if_nz   ret
2ec7c 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
2ec80 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
2ec84 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
2ec88 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
2ec8c 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
2ec90 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
2ec94 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
2ec98 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
2ec9c 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
2eca0 24e 2C FB 9F CD |         if_b    jmp     #host_error
2eca4 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
2eca8 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
2ecac 251 2D EC 63 FD |                 call    pa
2ecb0 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
2ecb4 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
2ecb8 254 2C EC 63 FD |                 jmp     pa
2ecbc 255             | 
2ecbc 255             | '------------------------------------------------------------------------------
2ecbc 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
2ecbc 255             | ' Status reporting is always in the function-to-host direction.
2ecbc 255             | '------------------------------------------------------------------------------
2ecbc 255             | ' On entry:
2ecbc 255             | '   PTRA - start address of the SETUP data in hub.
2ecbc 255             | '   PB - start address of the buffer/struct to be written to during the IN data
2ecbc 255             | '     stage.
2ecbc 255             | '   ep_addr_pid - device address, endpoint and CRC5.
2ecbc 255             | ' On exit:
2ecbc 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
2ecbc 255             | '     contains the count of data stage bytes actually received, which must
2ecbc 255             | '     always be <= the count requested.
2ecbc 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
2ecbc 255             | '     more specific USB operation error code.
2ecbc 255             | '------------------------------------------------------------------------------
2ecbc 255             | control_read
2ecbc 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
2ecc0 256 F8 8F 03 F6 |                 mov     hpar2, ptra
2ecc4 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
2ecc8 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
2eccc 259             | .xfer_start
2eccc 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
2ecd0 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
2ecd4 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2ecd8 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
2ecdc 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
2ece0 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
2ece4 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
2ece8 260 61 00 00 FF 
2ecec 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
2ecf0 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
2ecf4 263             | .data
2ecf4 263 56 B1 02 F6 |                 mov     pkt_data, total_data
2ecf8 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
2ecfc 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
2ed00 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
2ed04 267             | .nak_retry
2ed04 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
2ed08 268             | .in_retry
2ed08 268 BC F6 BF FD |                 call    #txn_in
2ed0c 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
2ed10 26a 28 00 90 AD |         if_z    jmp     #.commit
2ed14 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
2ed18 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
2ed1c 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
2ed20 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
2ed24 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
2ed28 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
2ed2c 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
2ed30 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2ed34 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
2ed38 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
2ed3c 275             | .commit
2ed3c 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
2ed40 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
2ed44 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
2ed48 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
2ed4c 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
2ed50 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
2ed54 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
2ed58 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
2ed5c 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
2ed60 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
2ed64 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
2ed68 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
2ed6c 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
2ed70 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
2ed74 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
2ed78 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
2ed7c 285             | .pre_status
2ed7c 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
2ed80 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
2ed84 287 00 B0 06 F6 |                 mov     pkt_data, #0
2ed88 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
2ed8c 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
2ed90 28a 61 00 00 FF 
2ed94 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
2ed98 28c             | .out_retry
2ed98 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
2ed9c 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2eda0 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
2eda4 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
2eda8 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
2edac 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
2edb0 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
2edb4 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
2edb8 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2edbc 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
2edc0 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
2edc4 297             | ' I've encountered transfer STALL, even though the data looks correct, and
2edc4 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
2edc4 297             | ' ControlRead() transfer gets things unstuck most of the time...
2edc4 297             | .xfer_retry
2edc4 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
2edc8 298 58 01 B0 FD |                 call    #poll_waitx
2edcc 299 8C F9 BF FD |                 call    #wait_txn_ok
2edd0 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
2edd4 29b C7 F1 03 F6 |                 mov     ptra, hpar2
2edd8 29c C8 EF 03 F6 |                 mov     pb, hpar3
2eddc 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
2ede0 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
2ede4 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
2ede8 2a0             | 
2ede8 2a0             | '------------------------------------------------------------------------------
2ede8 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
2ede8 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
2ede8 2a0             | ' the SETUP data struct is filled with the required values.
2ede8 2a0             | '------------------------------------------------------------------------------
2ede8 2a0             | ' On entry:
2ede8 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
2ede8 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
2ede8 2a0             | '     stage.
2ede8 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
2ede8 2a0             | ' On exit:
2ede8 2a0             | '   retval - used to convey the success/failure of each stage.
2ede8 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
2ede8 2a0             | '     more specific USB operation error code.
2ede8 2a0             | '------------------------------------------------------------------------------
2ede8 2a0             | control_write
2ede8 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
2edec 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
2edf0 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
2edf4 2a3             | 
2edf4 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
2edf8 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
2edfc 2a5 F7 91 03 F6 |                 mov     hpar3, pb
2ee00 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
2ee04 2a7             | .xfer_start
2ee04 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
2ee08 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
2ee0c 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
2ee10 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2ee14 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
2ee18 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
2ee1c 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
2ee20 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
2ee24 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
2ee28 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
2ee2c 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
2ee30 2b2             | .data
2ee30 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
2ee34 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
2ee38 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
2ee3c 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
2ee40 2b6             | .out_retry
2ee40 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
2ee44 2b7 88 F6 BF FD |                 call    #txn_out
2ee48 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2ee4c 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
2ee50 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
2ee54 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
2ee58 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
2ee5c 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
2ee60 2be             | .commit
2ee60 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
2ee64 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
2ee68 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
2ee6c 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
2ee70 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
2ee74 2c3             | pre_status_in
2ee74 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
2ee78 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
2ee7c 2c5             | .status_retry
2ee7c 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
2ee80 2c6 44 F5 BF FD |                 call    #txn_in
2ee84 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
2ee88 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
2ee8c 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
2ee90 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
2ee94 2cb 2D 00 64 AD |         if_z    ret
2ee98 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
2ee9c 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2eea0 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
2eea4 2cf             | '               ret                                     ' Caller must handle transfer retirement
2eea4 2cf             | 
2eea4 2cf             | '------------------------------------------------------------------------------
2eea4 2cf             | ' Execute an IN interrupt transaction.
2eea4 2cf             | '------------------------------------------------------------------------------
2eea4 2cf             | ' On entry:
2eea4 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
2eea4 2cf             | '   hpar2 - Address of the IN data buffer
2eea4 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
2eea4 2cf             | ' On exit:
2eea4 2cf             | '   retval - the result of the operation.
2eea4 2cf             | '   hpar3 - the count of IN data bytes actually received.
2eea4 2cf             | '------------------------------------------------------------------------------
2eea4 2cf             | do_int_in
2eea4 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
2eea8 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
2eeac 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
2eeb0 2d2             | 
2eeb0 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
2eeb4 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
2eeb8 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
2eebc 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
2eec0 2d6             | .retry
2eec0 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
2eec4 2d7 00 F5 BF FD |                 call    #txn_in
2eec8 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
2eecc 2d9 1C 00 90 AD |         if_z    jmp     #.commit
2eed0 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
2eed4 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
2eed8 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
2eedc 2dd 54 00 B0 FD |                 call    #retry_wait
2eee0 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2eee4 2df 18 00 90 AD |         if_z    jmp     #.post_ret
2eee8 2e0 D4 FF 9F FD |                 jmp     #.retry
2eeec 2e1             | .commit
2eeec 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
2eef0 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
2eef4 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
2eef8 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
2eefc 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
2ef00 2e6             | .post_ret
2ef00 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
2ef04 2e7             | 
2ef04 2e7             | 
2ef04 2e7             | '------------------------------------------------------------------------------
2ef04 2e7             | ' Resets the downstream hub port to FS
2ef04 2e7             | '------------------------------------------------------------------------------
2ef04 2e7             | dwnstream_reset
2ef04 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
2ef08 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
2ef0c 2e9             | 
2ef0c 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
2ef10 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
2ef14 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
2ef18 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
2ef1c 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
2ef20 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
2ef24 2ef             | 
2ef24 2ef             | '------------------------------------------------------------------------------
2ef24 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
2ef24 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
2ef24 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
2ef24 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
2ef24 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
2ef24 2ef             | '------------------------------------------------------------------------------
2ef24 2ef             | ' On entry:
2ef24 2ef             | '   hctwait - wait interval in sysclocks.
2ef24 2ef             | ' On exit:
2ef24 2ef             | '------------------------------------------------------------------------------
2ef24 2ef             | poll_waitx
2ef24 2ef 1A 92 63 FD |                 getct   hct2
2ef28 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
2ef2c 2f1             | .wait
2ef2c 2f1 FF 25 CC FB |                 jnct2   #.wait
2ef30 2f2 2D 00 64 FD |                 ret
2ef34 2f3             | 
2ef34 2f3             | '------------------------------------------------------------------------------
2ef34 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
2ef34 2f3             | '------------------------------------------------------------------------------
2ef34 2f3             | ' On entry:
2ef34 2f3             | '   retval - transaction response PID or error code.
2ef34 2f3             | ' On exit:
2ef34 2f3             | '------------------------------------------------------------------------------
2ef34 2f3             | retry_wait
2ef34 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
2ef38 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
2ef3c 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
2ef40 2f6 14 00 90 AD |         if_z    jmp     #.nak
2ef44 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
2ef48 2f8 D8 FF BF FD |                 call    #poll_waitx
2ef4c 2f9             | .dec
2ef4c 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
2ef50 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
2ef54 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
2ef58 2fc             | .nak
2ef58 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
2ef5c 2fd C4 FF BF FD |                 call    #poll_waitx
2ef60 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
2ef64 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
2ef68 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
2ef6c 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
2ef70 302 2D 00 64 FD |                 ret
2ef74 303             | 
2ef74 303             | host_reset
2ef74 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
2ef78 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
2ef7c 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
2ef7c 305 BD 01 05 FF 
2ef80 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
2ef84 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
2ef88 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
2ef8c 309             | ' Check to see if the system clock has been changed.
2ef8c 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
2ef90 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
2ef94 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
2ef98 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
2ef9c 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
2efa0 30e 40 46 62 FD |                 dirl    dp
2efa4 30f             | 
2efa4 30f 28 02 64 FD |                 setq    #1
2efa8 310 80 00 80 FF 
2efac 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
2efb0 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
2efb4 313             | .enable
2efb4 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
2efb8 314 41 46 62 FD |                 dirh    dp
2efbc 315 1F 36 63 FD |                 waitx   _1us_
2efc0 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2efc4 317             | 
2efc4 317             |                 ' Handle Port protection enable and startup delay
2efc4 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
2efc8 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
2efcc 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
2efd0 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
2efd4 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
2efd8 31c             | 
2efd8 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
2efdc 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
2efe0 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
2efe4 31f 00 00 04 F6 |                 mov     0-0, #0
2efe8 320             | .regloop
2efe8 320             | 
2efe8 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
2efe8 320             | 
2efe8 320             | discon_entry
2efe8 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
2efec 321             | 
2efec 321             |               
2efec 321             |         if HAVE_HIDPAD
2efec 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
2eff0 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
2eff4 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
2eff8 324 F7 01 68 FC |                 wrlong  #0,pb
2effc 325             |         end
2effc 325             |         if EMUPAD_MAX_PLAYER > 0
2effc 325             |         end
2effc 325             | 
2effc 325             |                 ' Fall through to disconnected loop
2effc 325             | 
2effc 325             | '-----------------------------------------------------------------------------------------------------------------
2effc 325             | ' Device connect handling (Section 7.1.7.3).
2effc 325             | '-----------------------------------------------------------------------------------------------------------------
2effc 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
2effc 325             | ' device to connect (Section 7.1.7.3).
2effc 325             | '-----------------------------------------------------------------------------------------------------------------
2effc 325             | disconnected
2effc 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
2f000 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
2f004 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
2f008 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
2f00c 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
2f010 32a             |         if ACTIVITY_LED >= 0
2f010 32a             |         end
2f010 32a 22 A7 82 FA |                 rqpin   urx, dm
2f014 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
2f018 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
2f01c 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
2f020 32e             | .se1_test
2f020 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
2f024 32f FC FE BF FD |                 call    #poll_waitx
2f028 330 22 A7 82 FA |                 rqpin   urx, dm
2f02c 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
2f030 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
2f034 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
2f038 334             | .se1            'SE1 is a fatal error condition
2f038 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
2f03c 335 E4 FE BF FD |                 call    #poll_waitx
2f040 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
2f044 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
2f048 338             | .connect_test                                           ' Test lines until stable J/K state seen
2f048 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
2f04c 339 22 A7 82 FA |                 rqpin   urx, dm
2f050 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
2f054 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
2f058 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
2f05c 33d             | connected
2f05c 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
2f060 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
2f064 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
2f068 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
2f06c 341             | .set_pulse
2f06c 341 1A 64 63 FD |                 getct   _pulse_time_
2f070 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
2f074 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
2f074 343             | ' of 1ms and make a correction, if necessary.
2f074 343             | '                mov     htmp, _1ms_
2f074 343             | '                subs    htmp, iframe_delta
2f074 343             | '                adds    _frame1ms_clks_, htmp
2f074 343             | '                debug(udec(_frame1ms_clks_))
2f074 343             | 
2f074 343             |                 ' Fall through to idle/processing loop
2f074 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
2f078 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
2f07c 345             | 
2f07c 345             | hidle
2f07c 345 22 A7 82 FA |                 rqpin   urx, dm
2f080 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
2f084 347 98 00 90 CD |         if_c    jmp     #.se0_test
2f088 348 24 06 70 FD |                 pollct3                         wc
2f08c 349 68 00 90 3D |         if_nc   jmp     #.nopoll
2f090 34a 1A 94 63 FD |                 getct   hct3
2f094 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
2f098 34c             | 
2f098 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
2f09c 34d 00 70 E3 F8 |                 getbyte htmp
2f0a0 34e             | 
2f0a0 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
2f0a4 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
2f0a8 350 40 00 90 AD |         if_z    jmp     #.poll
2f0ac 351             | 
2f0ac 351             |         if _HAVE_GAMEPAD
2f0ac 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
2f0b0 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
2f0b4 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
2f0b8 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
2f0bc 355 2C 00 90 AD |         if_z    jmp     #.poll
2f0c0 356             |         end
2f0c0 356             | 
2f0c0 356             |         if HAVE_MOUSE
2f0c0 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
2f0c4 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
2f0c8 358 20 00 90 AD |         if_z    jmp     #.poll
2f0cc 359             |         end
2f0cc 359             | 
2f0cc 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
2f0d0 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
2f0d4 35b 14 00 90 AD |         if_z    jmp     #.poll
2f0d8 35c             | 
2f0d8 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
2f0dc 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
2f0e0 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
2f0e4 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
2f0e8 360             |         if HAVE_MOUSE
2f0e8 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
2f0ec 361             |         else
2f0ec 361             |         end
2f0ec 361             | 
2f0ec 361             | .poll
2f0ec 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
2f0f0 362 2D EC 63 FD |                 call    pa
2f0f4 363             | .skip_poll
2f0f4 363             | 
2f0f4 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
2f0f8 364             | 
2f0f8 364             | .nopoll
2f0f8 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
2f0fc 365 44 00 90 AD |         if_z    jmp     #hsuspend
2f100 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
2f104 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
2f108 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
2f10c 369 1A 84 63 FD |                 getct   hr0
2f110 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
2f114 36b             |         if ACTIVITY_LED >= 0
2f114 36b             |         end
2f114 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
2f118 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
2f11c 36d 5C FF 9F FD |                 jmp     #hidle
2f120 36e             | ' Check for extended SE0 state on the bus
2f120 36e             | .se0_test
2f120 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
2f124 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
2f128 370 22 A7 82 FA |                 rqpin   urx, dm
2f12c 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
2f130 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
2f134 373 24 F6 BF FD |                 call    #wait_txn_ok
2f138 374 00 00 80 FF 
2f13c 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
2f140 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
2f140 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
2f144 377             | 
2f144 377             | hsuspend
2f144 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
2f148 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
2f14c 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
2f150 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
2f154 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
2f158 37c 00 96 07 F6 |                 mov     mod_cnt, #0
2f15c 37d             | 
2f15c 37d             |                 ' Fall through to resume wait loop
2f15c 37d             | 
2f15c 37d             | hwait_resume
2f15c 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
2f160 37e 02 86 47 F0 |                 shr     hr1, #2
2f164 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
2f168 380             |         if ACTIVITY_LED >= 0
2f168 380             |         end
2f168 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
2f16c 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
2f170 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
2f174 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
2f178 384 18 00 90 AD |         if_z    jmp     #.resume
2f17c 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
2f180 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
2f184 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
2f188 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2f18c 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
2f190 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
2f194 38b             | .resume
2f194 38b 22 05 28 FC |                 wypin   #OUT_K, dm
2f198 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
2f19c 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
2f1a0 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
2f1a4 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
2f1a8 390 1F 70 63 FD |                 waitx   htmp
2f1ac 391 22 07 28 FC |                 wypin   #OUT_J, dm
2f1b0 392 01 70 47 F0 |                 shr     htmp, #1
2f1b4 393 1F 70 63 FD |                 waitx   htmp
2f1b8 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2f1bc 395 1A 92 62 FD |                 getct   iframe_ct_base
2f1c0 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2f1c4 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2f1c8 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
2f1cc 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
2f1d0 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
2f1d4 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
2f1d8 39c             | 
2f1d8 39c             | '------------------------------------------------------------------------------
2f1d8 39c             | ' Send preamble to enable low-speed HUB ports
2f1d8 39c             | '------------------------------------------------------------------------------
2f1d8 39c             | ' On entry:
2f1d8 39c             | ' On exit:
2f1d8 39c             | '   USB baud rate set to low-speed
2f1d8 39c             | '------------------------------------------------------------------------------
2f1d8 39c             | utx_pre
2f1d8 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
2f1dc 39d 40 46 62 FD |                 dirl    dp
2f1e0 39e 28 02 64 FD |                 setq    #1
2f1e4 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
2f1e8 3a0 58 44 62 FD |                 drvl    dm
2f1ec 3a1 59 46 62 FD |                 drvh    dp
2f1f0 3a2             | 
2f1f0 3a2 1E 00 00 FF 
2f1f4 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
2f1f8 3a4             | 
2f1f8 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
2f1fc 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
2f200 3a6 28 02 64 3D |         if_nc   setq    #1
2f204 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
2f208 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
2f20c 3a9             | .l1
2f20c 3a9             | 
2f20c 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
2f210 3aa 40 46 62 FD |                 dirl    dp
2f214 3ab 28 02 64 FD |                 setq    #1
2f218 3ac 80 00 80 FF 
2f21c 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
2f220 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
2f224 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
2f228 3b0 41 46 62 FD |                 dirh    dp
2f22c 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2f230 3b2             | 
2f230 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
2f234 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
2f238 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
2f23c 3b5             | 
2f23c 3b5             | hlut_end
2f23c 3b5             |                 fit     $400
2f23c 3b5             |                 orgh
2f23c                 | if OVERLAP_MEMORY
2f23c                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
2f23c                 | end
2f23c                 | '------------------------------------------------------------------------------
2f23c                 | ' Routines called from cog space.
2f23c                 | '------------------------------------------------------------------------------
2f23c                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
2f23c                 | '------------------------------------------------------------------------------
2f23c                 | 
2f23c                 | '------------------------------------------------------------------------------
2f23c                 | ' USB host cog initialization.
2f23c                 | '------------------------------------------------------------------------------
2f23c                 | usb_host_init
2f23c                 |                 ' Initialize buffer pointers
2f23c                 |         if OVERLAP_MEMORY
2f23c                 |         else
2f23c     40 15 B0 FE |                 loc     pb, #hid_descr
2f240                 |         end
2f240     F7 4B 02 F6 |                 mov     hid_descr_p, pb
2f244                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
2f244                 |                 {
2f244                 |                 }
2f244                 |         
2f244                 |                 {
2f244                 |                 }
2f244                 |                 'loc     pb,#hkbd_report
2f244                 |                 'mov     hkbd_report_p,pb
2f244                 | 
2f244     08 1D B0 FE |                 loc     pb, #hub_descr
2f248     F7 4D 02 F6 |                 mov     hub_descr_p, pb
2f24c     1D 1D B0 FE |                 loc     pb, #urx_buff
2f250     F7 4F 02 F6 |                 mov     urx_buff_p, pb
2f254     95 1D B0 FE |                 loc     pb, #dev_desc_buff
2f258     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
2f25c     9F 1D B0 FE |                 loc     pb, #con_desc_buff
2f260     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
2f264     18 15 B0 FE |                 loc     pb, #usb_cache_start
2f268     F7 55 02 F6 |                 mov     cache_start_p, pb
2f26c     E9 1C B0 FE |                 loc     pb, #usb_cache_end
2f270     F7 57 02 F6 |                 mov     cache_end_p, pb
2f274                 | 
2f274                 |         if ERROR_LED >= 0
2f274                 |         end
2f274                 | 
2f274                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
2f274                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
2f274                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
2f274                 | ' Configure and enable the Serial Host USB port.
2f274     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
2f278                 | 
2f278                 | '------------------------------------------------------------------------------
2f278                 | ' Timing calculations happen before any interrupt(s) are enabled.
2f278                 | '------------------------------------------------------------------------------
2f278                 | ' On entry:
2f278                 | '   htmp - current CLKFREQ value.
2f278                 | '------------------------------------------------------------------------------
2f278                 | hinit_usb_timings
2f278                 | '                getct   htmp2
2f278     B8 59 02 F6 |                 mov     save_sysclk, htmp
2f27c     8D 5B 80 FF 
2f280     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
2f284     18 30 63 FD |                 getqx   _12Mbps_
2f288     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
2f28c     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
2f290     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
2f294     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
2f298     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
2f29c     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
2f2a0     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
2f2a4     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
2f2a8     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
2f2ac     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
2f2b0     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
2f2b4     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
2f2b8     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
2f2bc     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
2f2c0     80 00 00 FF 
2f2c4     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
2f2c8     18 2C 63 FD |                 getqx   _var_64_lower_
2f2cc     19 2E 63 FD |                 getqy   _var_64_upper_
2f2d0     28 2C 63 FD |                 setq    _var_64_lower_
2f2d4     65 CD 1D FF 
2f2d8     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
2f2dc     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
2f2e0     01 00 00 FF 
2f2e4     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
2f2e8     18 2C 63 FD |                 getqx   _var_64_lower_
2f2ec     19 2E 63 FD |                 getqy   _var_64_upper_
2f2f0     28 2C 63 FD |                 setq    _var_64_lower_
2f2f4     A1 07 00 FF 
2f2f8     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
2f2fc     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
2f300     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
2f304     09 36 57 F0 |                 shr     _1us_, #9               wc
2f308     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
2f30c     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
2f310     18 38 63 FD |                 getqx   _10us_
2f314     09 38 57 F0 |                 shr     _10us_, #9              wc
2f318     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
2f31c     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
2f320     18 3A 63 FD |                 getqx   _33us_
2f324     09 3A 57 F0 |                 shr     _33us_, #9              wc
2f328     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
2f32c     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
2f330     18 3C 63 FD |                 getqx   _txn_err_
2f334     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
2f338     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
2f33c     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
2f340     18 3E 63 FD |                 getqx   _500us_
2f344     09 3E 57 F0 |                 shr     _500us_, #9             wc
2f348     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
2f34c     01 00 00 FF 
2f350     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
2f354     18 40 63 FD |                 getqx   _txn_ok_ls_
2f358     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
2f35c     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
2f360     01 00 00 FF 
2f364     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
2f368     18 42 63 FD |                 getqx   _txn_ok_fs_
2f36c     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
2f370     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
2f374     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
2f378     05 00 00 FF 
2f37c     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
2f380     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
2f384     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
2f388     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
2f38c     1C 00 00 FF 
2f390     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
2f394     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
2f398     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
2f39c     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
2f3a0     00 00 00 FF 
2f3a4     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
2f3a8     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
2f3ac     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
2f3b0     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
2f3b4     04 00 00 FF 
2f3b8     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
2f3bc     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
2f3c0     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
2f3c4     8D 5B 00 FF 
2f3c8     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
2f3cc     18 4C 63 FD |                 getqx   _preamble_wait_
2f3d0     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
2f3d4     01 00 00 FF 
2f3d8     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
2f3dc     18 2C 63 FD |                 getqx   _var_64_lower_
2f3e0     19 2E 63 FD |                 getqy   _var_64_upper_
2f3e4     28 2C 63 FD |                 setq    _var_64_lower_
2f3e8     01 00 00 FF 
2f3ec     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
2f3f0     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
2f3f4     09 4E 57 F0 |                 shr     _1ms_, #9               wc
2f3f8     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
2f3fc     FF FF 7F FF 
2f400     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
2f404     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
2f408     A7 51 03 F6 |                 mov     _2ms_, _1ms_
2f40c     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
2f410     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
2f414     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
2f418     A7 55 03 F6 |                 mov     _4ms_, _1ms_
2f41c     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
2f420     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
2f424     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
2f428     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
2f42c     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
2f430     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
2f434     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
2f438     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
2f43c     A7 59 03 F6 |                 mov     _8ms_, _1ms_
2f440     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
2f444     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
2f448     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
2f44c     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
2f450     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
2f454     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
2f458     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
2f45c     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
2f460     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
2f464     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
2f468     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
2f46c                 | '        _ret_   mov     _1sec_, save_sysclk
2f46c                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
2f46c                 | '                ret
2f46c                 | {
2f46c                 | }
2f46c                 | 
2f46c                 | '------------------------------------------------------------------------------
2f46c                 | ' Parse a configuration descriptor chain to see if the device is a recognized
2f46c                 | ' one. If it is, start the task progression that will configure the device for
2f46c                 | ' use.
2f46c                 | '------------------------------------------------------------------------------
2f46c                 | ' On entry:
2f46c                 | '   hconfig_base - start address of the cached config descriptor chain.
2f46c                 | ' On exit:
2f46c                 | '------------------------------------------------------------------------------
2f46c                 | hparse_con_desc
2f46c     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
2f470     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
2f474     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
2f478     4E 70 FF F9 |                 movbyts htmp,#%%1032
2f47c     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
2f480                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
2f480                 | 
2f480     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
2f484     6E ED 03 F1 |                 add     pa, hconfig_base
2f488     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
2f48c                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
2f48c                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
2f48c                 | ' that defines a keyboard and/or mouse.
2f48c     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
2f490                 | .next_intf
2f490     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
2f494     BC 01 90 3D |         if_ae   jmp     #hset_config
2f498     6E F3 03 F6 |                 mov     ptrb, hconfig_base
2f49c     75 F3 03 F1 |                 add     ptrb, hnext_desc
2f4a0     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
2f4a4     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
2f4a8     0C 00 90 AD |         if_z    jmp     #.intf
2f4ac     80 71 C7 FA |                 rdbyte  htmp, ptrb
2f4b0     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
2f4b4     D8 FF 9F FD |                 jmp     #.next_intf
2f4b8                 | .intf
2f4b8     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
2f4bc     00 90 07 F6 |                 mov     hpar3, #0
2f4c0     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
2f4c4     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
2f4c8     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
2f4cc     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
2f4d0                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
2f4d0                 | 
2f4d0                 | .endp
2f4d0     80 71 C7 FA |                 rdbyte  htmp, ptrb
2f4d4     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
2f4d8     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
2f4dc     78 00 90 3D |         if_ae   jmp     #.get_device
2f4e0     6E F3 03 F6 |                 mov     ptrb, hconfig_base
2f4e4     75 F3 03 F1 |                 add     ptrb, hnext_desc
2f4e8     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
2f4ec     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
2f4f0     64 00 90 AD |         if_z    jmp     #.get_device
2f4f4     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
2f4f8     04 00 90 AD |         if_z    jmp     #.get_ep
2f4fc     D0 FF 9F FD |                 jmp     #.endp
2f500                 | .get_ep
2f500     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
2f504     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
2f508     0F 86 67 F0 |                 shl     hr1, #8 + 7
2f50c     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
2f510     3F 00 00 FF 
2f514     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
2f518     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
2f51c     00 8E 0F F2 |                 cmp     hpar2, #0               wz
2f520     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
2f524     00 90 0F F2 |                 cmp     hpar3, #0               wz
2f528     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
2f52c     A0 FF 9F FD |                 jmp     #.endp
2f530                 | .in_ep
2f530     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
2f534     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
2f538                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
2f538     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
2f53c     C2 89 DB F8 |                 setbyte hr2, hr0, #3
2f540     8C FF 9F FD |                 jmp     #.endp
2f544                 | .out_ep
2f544     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
2f548     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
2f54c                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
2f54c     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
2f550     C2 8B DB F8 |                 setbyte hr3, hr0, #3
2f554     78 FF 9F FD |                 jmp     #.endp
2f558                 | 
2f558                 | .get_device
2f558     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
2f55c     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
2f560     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
2f564     68 00 90 AD |         if_z    jmp     #.gamepad
2f568     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
2f56c     AC 00 90 AD |         if_z    jmp     #.hub
2f570     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
2f574     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
2f578     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
2f57c     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
2f580     4C 00 90 AD |         if_z    jmp     #.gamepad
2f584     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
2f588     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
2f58c                 | .keyboard
2f58c     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
2f590                 |         if HAVE_MOUSE
2f590     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
2f594                 |         else
2f594                 |         end
2f594     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
2f598     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
2f59c     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2f5a0     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
2f5a4     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
2f5a8     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
2f5ac                 |                 'debug(udec(kb_intf_num))
2f5ac                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
2f5ac     E0 FE 9F FD |                 jmp     #.next_intf
2f5b0                 | if HAVE_MOUSE
2f5b0                 | .mouse
2f5b0     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
2f5b4     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
2f5b8     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
2f5bc     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
2f5c0     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2f5c4                 |                 'getbyte ms_interval, hr2, #3
2f5c4     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
2f5c8     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
2f5cc                 |                 'debug(udec(kb_intf_num))
2f5cc                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
2f5cc     C0 FE 9F FD |                 jmp     #.next_intf
2f5d0                 | end
2f5d0                 | .gamepad
2f5d0     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
2f5d4     C7 71 63 F5 |                 xor     htmp, hpar2
2f5d8     3F 00 00 FF 
2f5dc     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2f5e0     AC FE 9F AD |         if_z    jmp     #.next_intf
2f5e4                 |         if HAVE_MOUSE
2f5e4     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
2f5e8     C7 71 63 F5 |                 xor     htmp, hpar2
2f5ec     3F 00 00 FF 
2f5f0     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2f5f4     98 FE 9F AD |         if_z    jmp     #.next_intf
2f5f8                 |         end
2f5f8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
2f5fc     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
2f600     8C FE 9F 5D |         if_nz   jmp     #.next_intf
2f604                 | 
2f604     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2f608     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
2f60c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2f610     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
2f614     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
2f618                 |                 'debug(udec(gp_intf_num))
2f618                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
2f618     74 FE 9F FD |                 jmp     #.next_intf
2f61c                 | .hub
2f61c     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
2f620     6C FE 9F 5D |         if_nz   jmp     #.next_intf
2f624     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
2f628     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
2f62c     60 FE 9F 5D |         if_nz   jmp     #.next_intf
2f630     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
2f634     58 FE 9F 5D |         if_nz   jmp     #.next_intf
2f638     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
2f63c     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
2f640     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
2f644     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2f648     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
2f64c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
2f650                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
2f650     3C FE 9F FD |                 jmp     #.next_intf
2f654                 | 
2f654                 | '------------------------------------------------------------------------------
2f654                 | ' If a newly-connected device is recognized, do whatever is needed to configure
2f654                 | ' it according to its function, or functions. In the case of this boot protocol
2f654                 | ' keyboard/mouse class driver:
2f654                 | ' - SetConfiguration(config_num)
2f654                 | ' - SetProtocol(boot)
2f654                 | ' - SetIdle(indefinite)
2f654                 | ' - Enter the device interrupt IN polling task stage.
2f654                 | '------------------------------------------------------------------------------
2f654                 | ' On entry:
2f654                 | ' On exit:
2f654                 | '------------------------------------------------------------------------------
2f654                 | hset_config
2f654                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
2f654                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
2f654     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
2f658     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2f65c     00 00 0C F2 |                 cmp     0-0, #0                 wz
2f660     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
2f664                 |         if HAVE_MOUSE
2f664     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
2f668                 |         end
2f668     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
2f66c     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
2f670                 | .set_config
2f670     6C 0E D0 FE |                 loc     ptra, #set_config
2f674     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
2f678     6E ED 03 F1 |                 add     pa, hconfig_base
2f67c     F6 8D C3 FA |                 rdbyte  hpar1, pa
2f680     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
2f684     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
2f688     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
2f68c     A0 02 A0 FD |                 call    #control_write
2f690     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f694     2D 00 64 5D |         if_nz   ret
2f698                 | .kbd_config
2f698     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
2f69c     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
2f6a0                 | 
2f6a0     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
2f6a4     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2f6a8     3F 00 00 FF 
2f6ac     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2f6b0     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
2f6b4                 | 
2f6b4     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
2f6b8     34 0E D0 FE |                 loc     ptra, #set_protocol
2f6bc     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
2f6c0     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2f6c4     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
2f6c8     A0 02 A0 FD |                 call    #control_write
2f6cc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f6d0     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
2f6d4     E4 02 90 5D |         if_nz   jmp     #.notify_client
2f6d8     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
2f6dc     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
2f6e0     30 03 B0 FD |                 call    #hset_idle
2f6e4                 |                 'cmp     retval, #PID_ACK        wz
2f6e4                 |         'if_nz   mov     hkbd_ep_addr, #0
2f6e4                 |         'if_nz   jmp     #.notify_client
2f6e4     A8 99 02 F6 |                 mov     hctwait, _2ms_
2f6e8     EF 02 A0 FD |                 call    #poll_waitx
2f6ec     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
2f6f0     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
2f6f4     90 17 90 FE |                 loc     pa, #hkbd_led_rep
2f6f8     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
2f6fc     2C 03 B0 FD |                 call    #hset_kbdled_report
2f700     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f704     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
2f708     B0 02 90 5D |         if_nz   jmp     #.notify_client
2f70c     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
2f710     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2f714     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2f718     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2f71c     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
2f720     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
2f724     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
2f728     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2f72c     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
2f730     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
2f734     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
2f738                 |         if !!HAVE_MOUSE
2f738                 |         end
2f738                 | 
2f738                 | .mouse_config
2f738                 | if HAVE_MOUSE
2f738     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
2f73c     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
2f740     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
2f744     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2f748     3F 00 00 FF 
2f74c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2f750     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
2f754                 | 
2f754                 |                 debug("mouse passed addr check")
2f754                 | 
2f754     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
2f758     00 00 80 FF 
2f75c     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
2f760     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
2f764     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2f768     55 02 A0 FD |                 call    #control_read
2f76c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f770     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
2f774     44 02 90 5D |         if_nz   jmp     #.notify_client
2f778     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
2f77c     56 01 00 F6 |                 mov     0-0, total_data
2f780     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2f784                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
2f784                 | 
2f784     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
2f788     64 0D D0 FE |                 loc     ptra, #set_protocol
2f78c     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
2f790     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2f794     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
2f798     A0 02 A0 FD |                 call    #control_write
2f79c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f7a0     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
2f7a4     14 02 90 5D |         if_nz   jmp     #.notify_client
2f7a8                 |                 debug("mouse passed SetProtocol")
2f7a8     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
2f7ac     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
2f7b0     60 02 B0 FD |                 call    #hset_idle
2f7b4                 |                 'cmp     retval, #PID_ACK        wz
2f7b4                 |         'if_nz   mov     hmouse_ep_addr, #0
2f7b4                 |         'if_nz   jmp     #.notify_client
2f7b4                 |                 debug("mouse passed SetIdle")
2f7b4     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
2f7b8     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2f7bc     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2f7c0     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2f7c4     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
2f7c8     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2f7cc     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
2f7d0     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
2f7d4     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
2f7d8     3F 00 00 FF 
2f7dc     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
2f7e0     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
2f7e4     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
2f7e8     D0 01 90 FD |                 jmp     #.notify_client
2f7ec                 | end
2f7ec                 | .gamepad_config
2f7ec                 | if _HAVE_GAMEPAD
2f7ec     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2f7f0     00 00 0C F2 |                 cmp     0-0, #0                 wz
2f7f4     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
2f7f8     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2f7fc     00 70 03 F6 |                 mov     htmp, 0-0
2f800     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2f804     3F 00 00 FF 
2f808     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2f80c     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
2f810                 | 
2f810     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2f814     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
2f818     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2f81c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2f820     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2f824     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2f828     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
2f82c     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
2f830     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
2f834     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2f838     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2f83c     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
2f840     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
2f844     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2f848                 | 
2f848                 |                 if EMUPAD_MAX_PLAYER > 0
2f848                 |                 
2f848                 | .rule_loop           
2f848                 |                 end
2f848                 | 
2f848     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
2f84c     5C 00 90 AD |         if_e    jmp     #.xinput
2f850     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
2f854     00 70 03 F6 |                 mov     htmp,0-0
2f858     01 A6 02 FF 
2f85c     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
2f860     7C 00 90 AD |         if_e    jmp     #.ps3
2f864                 | 
2f864     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
2f868     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
2f86c     00 00 80 5F 
2f870     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
2f874     03 00 80 AF 
2f878     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
2f87c     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
2f880     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2f884     55 02 A0 FD |                 call    #control_read
2f888     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f88c     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
2f890     00 00 04 56 |         if_nz   mov     0-0, #0
2f894     24 01 90 5D |         if_nz   jmp     #.notify_client
2f898     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
2f89c     56 01 00 F6 |                 mov     0-0, total_data
2f8a0     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2f8a4                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
2f8a4                 | 
2f8a4     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
2f8a8     10 01 90 FD |                 jmp     #.notify_client
2f8ac                 | .xinput
2f8ac     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
2f8b0     2D EF 03 F6 |                 mov     pb,hdev_port
2f8b4     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
2f8b8     03 EE 27 F3 |                 fle     pb,#3
2f8bc     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
2f8c0     02 EF 47 FC |                 wrbyte  pb, ptra[2]
2f8c4                 | 
2f8c4     03 B0 06 F6 |                 mov     pkt_data, #3
2f8c8     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
2f8cc     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
2f8d0     5A 00 A0 FD |                 call    #txn_out
2f8d4     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
2f8d8                 | 
2f8d8     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
2f8dc     DC 00 90 FD |                 jmp     #.notify_client
2f8e0                 | .ps3
2f8e0     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
2f8e4     2D EF 03 F6 |                 mov     pb,hdev_port
2f8e8     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
2f8ec     04 EE 27 F3 |                 fle     pb,#4
2f8f0     F7 EF C3 F9 |                 decod   pb
2f8f4     09 EF 47 FC |                 wrbyte  pb, ptra[9]
2f8f8                 | 
2f8f8     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
2f8fc     00 0C D0 FE |                 loc     ptra, #set_report
2f900     01 00 80 FF 
2f904     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
2f908     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2f90c     03 61 5C FC |                 wrword  #48, ptra[wLength]
2f910     20 0C B0 FE |                 loc     pb, #ps3_command_buff
2f914     A0 02 A0 FD |                 call    #control_write
2f918                 | 
2f918     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
2f91c     E0 0B D0 FE |                 loc     ptra, #set_report
2f920     01 00 80 FF 
2f924     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
2f928     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2f92c     03 09 5C FC |                 wrword  #4, ptra[wLength]
2f930     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
2f934     A0 02 A0 FD |                 call    #control_write
2f938     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
2f93c     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
2f940     00 00 04 56 |         if_nz   mov     0-0, #0
2f944     74 00 90 5D |         if_nz   jmp     #.notify_client
2f948                 | 
2f948     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
2f94c     6C 00 90 FD |                 jmp     #.notify_client
2f950                 | end
2f950                 | 
2f950                 | .hub_config
2f950     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
2f954     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
2f958     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
2f95c     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2f960     3F 00 00 FF 
2f964     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2f968     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
2f96c                 | 
2f96c     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
2f970     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
2f974     26 EF 03 F6 |                 mov     pb, hub_descr_p
2f978     55 02 A0 FD |                 call    #control_read
2f97c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f980     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
2f984     34 00 90 5D |         if_nz   jmp     #.notify_client
2f988                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
2f988                 | 
2f988     26 F1 03 F6 |                 mov     ptra, hub_descr_p
2f98c     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
2f990     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
2f994                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
2f994                 | .pwr_loop
2f994     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
2f998     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
2f99c     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
2f9a0     A0 02 A0 FD |                 call    #control_write
2f9a4     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
2f9a8                 | 
2f9a8     B1 99 02 F6 |                 mov     hctwait, _500ms_
2f9ac     B0 99 02 F1 |                 add     hctwait, _100ms_
2f9b0     EF 02 A0 FD |                 call    #poll_waitx
2f9b4                 | 
2f9b4     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
2f9b8     00 00 90 FD |                 jmp     #.notify_client
2f9bc                 | 
2f9bc                 | .notify_client
2f9bc     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
2f9c0     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
2f9c4                 |                 debug(uhex_long(hdev_type,hdev_type+1))
2f9c4                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
2f9c4     2D 00 64 FD |                 ret
2f9c8                 | 
2f9c8                 | '------------------------------------------------------------------------------
2f9c8                 | ' Initialize the keyboard/mouse data area to start-up values.
2f9c8                 | '------------------------------------------------------------------------------
2f9c8                 | ' On entry:
2f9c8                 | ' On exit:
2f9c8                 | '------------------------------------------------------------------------------
2f9c8                 | init_kbdm_data
2f9c8     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
2f9cc     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
2f9d0                 | 
2f9d0     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
2f9d4     2B ED 03 F6 |                 mov     pa, cache_end_p
2f9d8                 | .loop
2f9d8     61 01 4C FC |                 wrbyte  #0, ptra++
2f9dc     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
2f9e0     F4 FF 9F CD |         if_b    jmp     #.loop
2f9e4                 |         
2f9e4                 |         if EMUPAD_MAX_PLAYER > 0
2f9e4                 |         end
2f9e4                 | 
2f9e4                 | 
2f9e4     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
2f9e8                 | .regloop
2f9e8     00 EC 8F F9 |                 altd    pa
2f9ec     00 00 04 F6 |                 mov     0-0, #0
2f9f0     01 EC 07 F1 |                 add     pa, #1
2f9f4     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
2f9f8     EC FF 9F 5D |         if_nz   jmp     #.regloop
2f9fc                 | 
2f9fc     E1 E1 61 FF 
2fa00     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
2fa04     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
2fa08     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
2fa0c     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
2fa10                 | 
2fa10     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
2fa14                 | 
2fa14                 | '------------------------------------------------------------------------------
2fa14                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
2fa14                 | ' function.
2fa14                 | '------------------------------------------------------------------------------
2fa14                 | ' On entry:
2fa14                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
2fa14                 | '   hpar2 - index number of the target interface.
2fa14                 | ' On exit:
2fa14                 | '------------------------------------------------------------------------------
2fa14                 | hset_idle
2fa14     A8 99 02 F6 |                 mov     hctwait, _2ms_
2fa18     EF 02 A0 FD |                 call    #poll_waitx
2fa1c     D8 0A D0 FE |                 loc     ptra, #set_idle
2fa20     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
2fa24     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
2fa28     A0 02 80 FD |                 jmp     #control_write
2fa2c                 | 
2fa2c                 | '------------------------------------------------------------------------------
2fa2c                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
2fa2c                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
2fa2c                 | '------------------------------------------------------------------------------
2fa2c                 | ' On entry:
2fa2c                 | '   ep_addr_pid - device address and enpoint for the request.
2fa2c                 | ' On exit:
2fa2c                 | '   retval - transaction result.
2fa2c                 | '------------------------------------------------------------------------------
2fa2c                 | hset_kbdled_report
2fa2c     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
2fa30     CC 0A D0 FE |                 loc     ptra, #set_report
2fa34     01 00 80 FF 
2fa38     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
2fa3c     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2fa40     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
2fa44     27 EF 03 F6 |                 mov     pb, urx_buff_p
2fa48     F7 77 42 FC |                 wrbyte  kb_led_states, pb
2fa4c     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
2fa50                 | 
2fa50                 | '------------------------------------------------------------------------------
2fa50                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
2fa50                 | '------------------------------------------------------------------------------
2fa50                 | ' On entry:
2fa50                 | ' On exit:
2fa50                 | '------------------------------------------------------------------------------
2fa50                 | hget_kbd_in_report
2fa50     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
2fa54     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2fa58     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
2fa5c     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
2fa60     CF 02 A0 FD |                 call    #do_int_in
2fa64     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2fa68     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2fa6c                 | 
2fa6c     00 90 0F F2 |                 cmp     hpar3, #0               wz
2fa70     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2fa74                 | 
2fa74     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
2fa78     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2fa7c     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
2fa80     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
2fa84                 | 
2fa84     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
2fa88     18 00 B0 FD |                 call    #hkbd_compare
2fa8c                 |         if EMUPAD_MAX_PLAYER > 0
2fa8c                 |         end
2fa8c                 | 
2fa8c                 | .led_check
2fa8c     3B 71 03 F6 |                 mov     htmp, kb_led_states
2fa90     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
2fa94     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
2fa98     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
2fa9c     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
2faa0     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
2faa4                 | 
2faa4                 | '------------------------------------------------------------------------------
2faa4                 | ' Compare current and previous keyboard data buffers for keypress changes.
2faa4                 | '------------------------------------------------------------------------------
2faa4                 | hkbd_compare
2faa4     27 F1 03 F6 |                 mov     ptra, urx_buff_p
2faa8     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
2faac     61 73 07 FB |                 rdlong  htmp1, ptra++
2fab0     E1 75 07 FB |                 rdlong  htmp2, ptrb++
2fab4     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
2fab8     61 73 07 FB |                 rdlong  htmp1, ptra++
2fabc     E1 75 07 FB |                 rdlong  htmp2, ptrb++
2fac0     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
2fac4     2D 00 64 AD |         if_z    ret
2fac8                 | 
2fac8     B4 13 D0 FE |                 loc     ptra, #hkbd_report
2facc                 | 
2facc                 |                 ' Handle modifiers
2facc     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
2fad0     00 87 C7 FA |                 rdbyte  hr1, ptra
2fad4     C7 87 43 F9 |                 rolword hr1,hpar2,#0
2fad8     63 86 63 FD |                 mergew  hr1
2fadc     08 EC 07 F6 |                 mov     pa,#8
2fae0                 | .modloop
2fae0     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
2fae4     E8 8C 07 F6 |                 mov     hpar1,#$E8
2fae8     F6 8D 83 F1 |                 sub     hpar1,pa
2faec     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
2faf0     FB ED 6F FB |                 djnz    pa,#.modloop
2faf4                 | 
2faf4     6F E0 75 FD | .release        modc    _set    wc
2faf8                 |                 'alts    hdev_port, #hid_report_p
2faf8                 |                 'mov     ptra, hid_report_p
2faf8     02 F0 07 F1 |                 add     ptra, #2
2fafc     06 EC 07 F6 |                 mov     pa, #6
2fb00     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
2fb04     20 00 90 AD |         if_z    jmp     #.rl3
2fb08     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
2fb0c     02 F2 07 F1 |                 add     ptrb, #2
2fb10     06 EE 07 F6 |                 mov     pb, #6
2fb14     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
2fb18     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
2fb1c     08 00 90 AD |         if_z    jmp     #.rl3
2fb20     FC EF 6F FB |                 djnz    pb, #.rl2
2fb24     68 00 B0 FD |                 call    #hkbd_translate
2fb28     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
2fb2c                 | 
2fb2c     00 90 07 F6 |                 mov     hpar3, #0
2fb30     1F 90 27 F4 |                 bith    hpar3, #31
2fb34                 | 
2fb34     6F 00 74 FD | .press          modc    _clr    wc
2fb38     27 F1 03 F6 |                 mov     ptra, urx_buff_p
2fb3c     02 F0 07 F1 |                 add     ptra, #2
2fb40     06 EC 07 F6 |                 mov     pa, #6
2fb44     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
2fb48     20 00 90 AD |         if_z    jmp     #.pl3
2fb4c     30 13 F0 FE |                 loc     ptrb, #hkbd_report
2fb50     02 F2 07 F1 |                 add     ptrb, #2
2fb54     06 EE 07 F6 |                 mov     pb, #6
2fb58     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
2fb5c     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
2fb60     08 00 90 AD |         if_z    jmp     #.pl3
2fb64     FC EF 6F FB |                 djnz    pb, #.pl2
2fb68     24 00 B0 FD |                 call    #hkbd_translate
2fb6c     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
2fb70                 | 
2fb70     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
2fb74     08 13 F0 FE |                 loc     ptrb, #hkbd_report
2fb78     28 02 64 FD |                 setq #1
2fb7c     61 73 07 FB |                 rdlong  htmp1, ptra++
2fb80     28 02 64 FD |                 setq #1
2fb84     E1 73 67 FC |                 wrlong  htmp1, ptrb++
2fb88     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
2fb8c                 | 
2fb8c     2D 00 64 FD |                 ret
2fb90                 | 
2fb90                 | '------------------------------------------------------------------------------
2fb90                 | ' Translate keyboard scancode to ASCII
2fb90                 | '------------------------------------------------------------------------------
2fb90                 | ' On entry:
2fb90                 | '   hpar1 - scancode
2fb90                 | '   hpar2 - key modifiers state
2fb90                 | '       c - pressed (0) or released (1) flag
2fb90                 | ' On exit:
2fb90                 | '   hpar1 - bit     31 = 0 pressed, 1 released
2fb90                 | '               30..17 = unused
2fb90                 | '                   18 = scroll-lock state 
2fb90                 | '                   17 = caps-lock state
2fb90                 | '                   16 = num-lock state 
2fb90                 | '                15..8 = key modifiers state
2fb90                 | '                 7..0 = scancode
2fb90                 | '------------------------------------------------------------------------------
2fb90                 | hkbd_translate
2fb90     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
2fb94     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
2fb98     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
2fb9c     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
2fba0     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
2fba4     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
2fba8                 | 
2fba8                 |         if EMUPAD_MAX_PLAYER > 0
2fba8                 | 
2fba8                 |         if EMUPAD_BT0_BIT >= 0
2fba8                 |         end
2fba8                 |         if EMUPAD_BT1_BIT >= 0
2fba8                 |         end
2fba8                 |         if EMUPAD_BT2_BIT >= 0
2fba8                 |         end
2fba8                 |         if EMUPAD_BT3_BIT >= 0
2fba8                 |         end
2fba8                 |         if EMUPAD_BT4_BIT >= 0
2fba8                 |         end
2fba8                 |         if EMUPAD_BT5_BIT >= 0
2fba8                 |         end
2fba8                 |         if EMUPAD_BT6_BIT >= 0
2fba8                 |         end
2fba8                 |         if EMUPAD_BT7_BIT >= 0
2fba8                 |         end
2fba8                 |         if EMUPAD_BT8_BIT >= 0
2fba8                 |         end
2fba8                 |         if EMUPAD_BT9_BIT >= 0
2fba8                 |         end
2fba8                 | 
2fba8                 |         end
2fba8     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
2fbac     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
2fbb0     1F 8C 47 F4 |                 bitc    hpar1, #31
2fbb4                 |         if KEYQUEUE_SIZE > 0
2fbb4     C4 09 B0 FE |                 loc pb,#keyq_head
2fbb8     F7 71 E3 FA |                 rdword htmp,pb
2fbbc     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
2fbc0     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
2fbc4     B8 75 03 F6 |                 mov htmp2,htmp
2fbc8     04 74 07 FA |                 mul htmp2,#4
2fbcc     F7 75 03 F1 |                 add htmp2,pb
2fbd0     02 74 07 F1 |                 add htmp2,#2
2fbd4     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
2fbd8     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
2fbdc     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
2fbe0     F7 71 43 5C |         if_nz   wrbyte htmp,pb
2fbe4                 |         end
2fbe4     2D 00 7C FD |                 ret wcz
2fbe8                 | 
2fbe8                 | if HAVE_MOUSE
2fbe8                 | '------------------------------------------------------------------------------
2fbe8                 | ' Execute an IN interrupt transaction to poll for mouse activity.
2fbe8                 | '------------------------------------------------------------------------------
2fbe8                 | ' On entry:
2fbe8                 | ' On exit:
2fbe8                 | '------------------------------------------------------------------------------
2fbe8                 | hget_mouse_in_report
2fbe8     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
2fbec     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2fbf0     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
2fbf4     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
2fbf8     CF 02 A0 FD |                 call    #do_int_in
2fbfc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2fc00     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2fc04                 | 
2fc04     00 90 0F F2 |                 cmp     hpar3, #0               wz
2fc08     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2fc0c                 | 
2fc0c     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
2fc10     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2fc14     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
2fc18     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
2fc1c                 | 
2fc1c     27 F1 03 F6 |                 mov     ptra, urx_buff_p
2fc20     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
2fc24     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
2fc28     01 90 87 31 |         if_ae   sub     hpar3, #1
2fc2c                 | 
2fc2c     40 09 90 FE |                 loc     pa, #mouse_limits
2fc30     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
2fc34                 | 
2fc34                 |                 ' load xacc,yacc,zacc
2fc34     28 04 64 FD |                 setq    #3-1
2fc38     80 87 07 FB |                 rdlong  hr1,ptrb
2fc3c                 |                 ' load limits and outptr
2fc3c     28 04 64 FD |                 setq    #3-1
2fc40     F6 73 03 FB |                 rdlong  htmp1,pa
2fc44                 | 
2fc44     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
2fc48     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
2fc4c     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
2fc50     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
2fc54     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
2fc58     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
2fc5c     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
2fc60     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
2fc64                 |               
2fc64                 | 
2fc64     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
2fc68     07 70 67 F7 |                 signx   htmp, #7
2fc6c     B8 87 03 F1 |                 add     hr1,htmp
2fc70     00 72 0F F2 |                 cmp     htmp1,#0 wz
2fc74     B9 87 63 53 |         if_ne   fles    hr1,htmp1
2fc78     00 86 47 53 |         if_ne   fges    hr1,#0
2fc7c                 | 
2fc7c     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
2fc80     07 70 67 F7 |                 signx   htmp, #7
2fc84     B8 89 03 F1 |                 add     hr2,htmp
2fc88     00 74 0F F2 |                 cmp     htmp2,#0 wz
2fc8c     BA 89 63 53 |         if_ne   fles    hr2,htmp2
2fc90     00 88 47 53 |         if_ne   fges    hr2,#0
2fc94                 |                 
2fc94                 | 
2fc94     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
2fc98     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
2fc9c     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
2fca0     B8 8B 03 A1 |         if_z    add     hr3,htmp
2fca4                 | 
2fca4     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
2fca8     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
2fcac                 | 
2fcac                 |                 ' write back accumulators
2fcac     28 04 64 FD |                 setq    #3-1
2fcb0     80 87 67 FC |                 wrlong  hr1,ptrb
2fcb4                 |                 ' if outptr set, write X/Y words
2fcb4     00 76 0F F2 |                 cmp htmp3,#0                    wz
2fcb8     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
2fcbc     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
2fcc0     2D 00 64 FD |                 ret
2fcc4                 | end
2fcc4                 | 
2fcc4                 | '------------------------------------------------------------------------------
2fcc4                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
2fcc4                 | '------------------------------------------------------------------------------
2fcc4                 | ' On entry:
2fcc4                 | ' On exit:
2fcc4                 | '------------------------------------------------------------------------------
2fcc4                 | if _HAVE_GAMEPAD
2fcc4                 | hget_gp_in_report
2fcc4     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2fcc8     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
2fccc                 | 
2fccc     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2fcd0     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
2fcd4     00 90 E3 F8 |                 getbyte hpar3
2fcd8     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
2fcdc     CF 02 A0 FD |                 call    #do_int_in
2fce0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2fce4     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2fce8                 | 
2fce8     00 90 0F F2 |                 cmp     hpar3, #0               wz
2fcec     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2fcf0                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
2fcf0                 | 
2fcf0     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
2fcf4     00 70 E3 F8 |                 getbyte htmp                            ' |
2fcf8     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2fcfc     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
2fd00     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
2fd04     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
2fd08     B8 01 C0 F8 |                 setbyte htmp                            ' |
2fd0c                 | 
2fd0c                 | ' Note: the following code compares the current and previous reports
2fd0c                 | ' and process the data if there are changes to ease the debug output.
2fd0c                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
2fd0c                 | ' gpPreReport buffer.
2fd0c                 | 
2fd0c                 |                 ' ----- start of block to remove
2fd0c                 |                 {
2fd0c                 |                 }
2fd0c                 |                 ' ----- end of block to remove
2fd0c     F4 04 90 FE |                 loc pa,#hpad_translate
2fd10     2A EC 63 FD |                 push pa
2fd14                 | 
2fd14                 |                 ' FALL THROUGH !!!!
2fd14                 | 
2fd14                 | '------------------------------------------------------------------------------
2fd14                 | ' Decode controller report
2fd14                 | '------------------------------------------------------------------------------
2fd14                 | hid_decode
2fd14                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
2fd14     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
2fd18     00 04 00 FF 
2fd1c     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
2fd20                 | 
2fd20     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
2fd24                 | 
2fd24     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
2fd28     00 2A E3 F8 |                 getbyte hidr_type
2fd2c     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
2fd30     34 02 90 AD |         if_z    jmp     #hpad_xinput
2fd34     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
2fd38     1C 03 90 AD |         if_z    jmp     #hpad_ps3
2fd3c     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
2fd40     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
2fd44     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
2fd48                 |                 
2fd48                 | 
2fd48                 | '------------------------------------------------------------------------------
2fd48                 | ' Handle HID controller (or mouse now
2fd48                 | ' On entry:
2fd48                 | '   ptrb - controller report
2fd48                 | '------------------------------------------------------------------------------
2fd48                 | hpad_hid
2fd48     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2fd4c     F7 F1 03 F6 |                 mov     ptra, pb
2fd50     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
2fd54     00 EC 03 F6 |                 mov     pa, 0-0
2fd58                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
2fd58     19 2A 3B FF 
2fd5c     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
2fd60                 | 
2fd60                 | .next
2fd60     00 EC 5F F2 |                 cmps    pa, #0      wcz
2fd64     2D 00 7C ED |         if_be   ret     wcz
2fd68                 | 
2fd68     61 8D C7 FA |                 rdbyte  hpar1, ptra++
2fd6c     01 EC 87 F1 |                 sub     pa, #1
2fd70     00 8E 07 F6 |                 mov     hpar2, #0
2fd74                 | 
2fd74     C6 71 03 F6 |                 mov     htmp, hpar1
2fd78     03 70 07 F5 |                 and     htmp, #$03
2fd7c     01 70 0F F2 |                 cmp     htmp, #1    wz
2fd80     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
2fd84     07 8E 67 A7 |         if_z    signx   hpar2,#7
2fd88     01 EC 87 A1 |         if_z    sub     pa, #1
2fd8c     02 70 0F F2 |                 cmp     htmp, #2    wz
2fd90     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
2fd94     0F 8E 67 A7 |         if_z    signx   hpar2,#15
2fd98     02 EC 87 A1 |         if_z    sub     pa, #2
2fd9c     03 70 0F F2 |                 cmp     htmp, #3    wz
2fda0     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
2fda4     04 EC 87 A1 |         if_z    sub     pa, #4
2fda8                 | 
2fda8     FC 8C 07 F5 |                 and     hpar1, #$FC
2fdac                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
2fdac                 | 
2fdac     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
2fdb0     0C 01 90 AD |         if_z    jmp     #.report_id
2fdb4     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
2fdb8     24 01 90 AD |         if_z    jmp     #.usage_page
2fdbc     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
2fdc0     2C 01 90 AD |         if_z    jmp     #.usage
2fdc4     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
2fdc8     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
2fdcc     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
2fdd0     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
2fdd4     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
2fdd8     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
2fddc     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
2fde0     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
2fde4     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
2fde8     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
2fdec     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
2fdf0     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
2fdf4     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
2fdf8     64 FF 9F 5D |         if_nz   jmp     #.next
2fdfc                 | 
2fdfc     D8 1D A7 FB |                 tjf     hidr_state,#.next
2fe00                 | 
2fe00     03 8E 07 F5 |                 and     hpar2, #$03
2fe04     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
2fe08     18 00 90 5D |         if_nz   jmp     #.skip
2fe0c                 | 
2fe0c     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
2fe10     20 00 90 AD |         if_z    jmp     #.axes
2fe14     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
2fe18     5C 00 90 AD |         if_z    jmp     #.hats
2fe1c     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
2fe20     70 00 90 AD |         if_z    jmp     #.buttons
2fe24                 | .skip
2fe24     8F 71 03 F6 |                 mov     htmp, hidr_size
2fe28     90 71 03 FA |                 mul     htmp, hidr_count
2fe2c     B8 23 03 F1 |                 add     hidr_offset, htmp
2fe30     2C FF 9F FD |                 jmp     #.next
2fe34                 | .axes
2fe34                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
2fe34     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
2fe38     90 87 03 F6 |                 mov     hr1, hidr_count
2fe3c                 | .l1
2fe3c     91 8D 03 F6 |                 mov     hpar1, hidr_offset
2fe40     8F 8F 03 F6 |                 mov     hpar2, hidr_size
2fe44     04 03 B0 FD |                 call    #hpad_getbits
2fe48     64 03 B0 FD |                 call    #hpad_normalize
2fe4c     06 84 1F F2 |                 cmp     hr0, #6         wcz
2fe50     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
2fe54     00 88 43 C8 |         if_b    getnib  hr2
2fe58     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
2fe5c     5F 01 20 C9 |         if_b    setword retval
2fe60     01 84 07 C1 |         if_b    add     hr0, #1
2fe64     8F 23 03 F1 |                 add     hidr_offset, hidr_size
2fe68     F4 87 6F FB |                 djnz    hr1, #.l1
2fe6c                 | 
2fe6c     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
2fe70     01 1C 07 F6 |                 mov     hidr_state, #1
2fe74     E8 FE 9F FD |                 jmp     #.next
2fe78                 | .hats
2fe78                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
2fe78     91 8D 03 F6 |                 mov     hpar1, hidr_offset
2fe7c     8F 8F 03 F6 |                 mov     hpar2, hidr_size
2fe80     C8 02 B0 FD |                 call    #hpad_getbits
2fe84     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
2fe88     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
2fe8c     01 1C 07 F6 |                 mov     hidr_state, #1
2fe90     90 FF 9F FD |                 jmp     #.skip
2fe94                 | .buttons
2fe94                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
2fe94     91 8D 03 F6 |                 mov     hpar1, hidr_offset
2fe98     8F 8F 03 F6 |                 mov     hpar2, hidr_size
2fe9c     90 8F 03 FA |                 mul     hpar2, hidr_count
2fea0     A8 02 B0 FD |                 call    #hpad_getbits
2fea4     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
2fea8     B8 BF 62 F0 |                 shl     retval, htmp
2feac     5F 17 43 F5 |                 or      hidr_buttons, retval
2feb0     90 71 03 F1 |                 add     htmp, hidr_count
2feb4     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
2feb8     01 1C 07 F6 |                 mov     hidr_state, #1
2febc     64 FF 9F FD |                 jmp     #.skip
2fec0                 | .report_id
2fec0     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
2fec4     2D 00 7C 5D |         if_nz   ret     wcz
2fec8     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
2fecc     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
2fed0     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
2fed4     01 1C 67 56 |         if_nz   neg     hidr_state,#1
2fed8     01 F2 87 51 |         if_nz   sub     ptrb,#1
2fedc     80 FE 9F FD |                 jmp     #.next
2fee0                 | .usage_page
2fee0     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
2fee4     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
2fee8     04 1C 07 A6 |         if_z    mov     hidr_state, #4
2feec     70 FE 9F FD |                 jmp     #.next
2fef0                 | .usage
2fef0     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
2fef4     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
2fef8     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
2fefc     01 1C 07 A6 |         if_z    mov     hidr_state, #1
2ff00     5C FE 9F AD |         if_z    jmp     #.next
2ff04     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
2ff08     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
2ff0c     01 1C 07 A6 |         if_z    mov     hidr_state, #1
2ff10     4C FE 9F AD |         if_z    jmp     #.next
2ff14     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
2ff18     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
2ff1c     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
2ff20     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
2ff24     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
2ff28     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
2ff2c     10 00 90 AD |         if_z    jmp     #.usage_axis
2ff30     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
2ff34     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
2ff38     03 1C 07 A6 |         if_z    mov     hidr_state, #3
2ff3c     20 FE 9F FD |                 jmp     #.next
2ff40                 | .usage_axis
2ff40     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
2ff44     18 FE 9F CD |         if_b    jmp     #.next
2ff48     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
2ff4c     C7 01 00 F8 |                 setnib  hpar2
2ff50                 | 
2ff50     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
2ff54     C7 8F C3 F9 |                 decod   hpar2
2ff58     C7 0F 43 F5 |                 or      hidr_flags, hpar2
2ff5c                 | 
2ff5c     01 24 07 F1 |                 add     hidr_usage_idx, #1
2ff60     02 1C 07 F6 |                 mov     hidr_state, #2
2ff64     F8 FD 9F FD |                 jmp     #.next
2ff68                 | 
2ff68                 | '------------------------------------------------------------------------------
2ff68                 | ' Handle XInput controller
2ff68                 | ' On entry:
2ff68                 | '   ptrb - controller report
2ff68                 | '------------------------------------------------------------------------------
2ff68                 | '   Default implementation translates the report to a pseudo-defacto hid
2ff68                 | '   standard and jumps to hpad_translate for actions.
2ff68                 | '   Implementors may take specific actions for this kind of controller.
2ff68                 | '------------------------------------------------------------------------------
2ff68                 | hpad_xinput
2ff68     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
2ff6c     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
2ff70     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
2ff74     14 70 0F F2 |                 cmp     htmp, #$14      wz
2ff78     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
2ff7c                 | 
2ff7c                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
2ff7c                 | 
2ff7c     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
2ff80     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
2ff84                 | 
2ff84     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
2ff88     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
2ff8c     5F BF 22 F6 |                 not     retval
2ff90     5F 11 2B F9 |                 setword hidr_axis, retval, #1
2ff94     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
2ff98     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
2ff9c     5F BF 22 F6 |                 not     retval
2ffa0     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
2ffa4                 | 
2ffa4     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
2ffa8     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
2ffac     C0 BE 1E F2 |                 cmp     retval, #192    wcz
2ffb0     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
2ffb4     F8 01 B0 FD |                 call    #hpad_normalize
2ffb8     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
2ffbc     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
2ffc0     C0 BE 1E F2 |                 cmp     retval, #192    wcz
2ffc4     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
2ffc8     E4 01 B0 FD |                 call    #hpad_normalize
2ffcc     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
2ffd0                 | 
2ffd0     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
2ffd4     81 BF E6 FA |                 rdword  retval, ptrb[1]
2ffd8     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
2ffdc     00 16 47 F4 |                 bitc    hidr_buttons, #0
2ffe0     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
2ffe4     01 16 47 F4 |                 bitc    hidr_buttons, #1
2ffe8     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
2ffec     02 16 47 F4 |                 bitc    hidr_buttons, #2
2fff0     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
2fff4     03 16 47 F4 |                 bitc    hidr_buttons, #3
2fff8     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
2fffc     04 16 47 F4 |                 bitc    hidr_buttons, #4
30000     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
30004     05 16 47 F4 |                 bitc    hidr_buttons, #5
30008     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
3000c     08 16 47 F4 |                 bitc    hidr_buttons, #8
30010     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
30014     09 16 47 F4 |                 bitc    hidr_buttons, #9
30018     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
3001c     0A 16 47 F4 |                 bitc    hidr_buttons, #10
30020     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
30024     0B 16 47 F4 |                 bitc    hidr_buttons, #11
30028     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
3002c     0C 16 47 F4 |                 bitc    hidr_buttons, #12
30030                 | 
30030     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
30034     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
30038     7A BB 7A FF 
3003c     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
30040     F9 FF 7F FF 
30044     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
30048     B9 71 5F F9 |                 altgn   htmp, #htmp1
3004c     00 70 43 F8 |                 getnib  htmp
30050     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
30054                 | 
30054     AC 01 90 FD |                 jmp     #hpad_translate
30058                 | 
30058                 | '------------------------------------------------------------------------------
30058                 | ' Handle PS3 controller
30058                 | ' On entry:
30058                 | '   ptrb - controller report
30058                 | '------------------------------------------------------------------------------
30058                 | '   Default implementation translates the report to a pseudo-defacto hid
30058                 | '   standard and jumps to hpad_translate for actions.
30058                 | '   Implementors may take specific actions for this kind of controller.
30058                 | '------------------------------------------------------------------------------
30058                 | hpad_ps3
30058     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
3005c     01 70 0F F2 |                 cmp     htmp, #$01      wz
30060     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
30064                 | 
30064                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
30064                 | 
30064     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
30068     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
3006c     40 01 B0 FD |                 call    #hpad_normalize
30070     5F 11 23 F9 |                 setword hidr_axis, retval, #0
30074     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
30078     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
3007c     30 01 B0 FD |                 call    #hpad_normalize
30080     5F 11 2B F9 |                 setword hidr_axis, retval, #1
30084     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
30088     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
3008c     20 01 B0 FD |                 call    #hpad_normalize
30090     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
30094     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
30098     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
3009c     10 01 B0 FD |                 call    #hpad_normalize
300a0     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
300a4     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
300a8     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
300ac                 | 
300ac     08 8C 07 F6 |                 mov     hpar1, #8
300b0     13 8E 07 F6 |                 mov     hpar2, #19
300b4     94 00 B0 FD |                 call    #hpad_getbits
300b8                 | 
300b8     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
300bc     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
300c0     00 16 47 F4 |                 bitc    hidr_buttons, #0
300c4     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
300c8     01 16 47 F4 |                 bitc    hidr_buttons, #1
300cc     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
300d0     02 16 47 F4 |                 bitc    hidr_buttons, #2
300d4     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
300d8     03 16 47 F4 |                 bitc    hidr_buttons, #3
300dc     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
300e0     04 16 47 F4 |                 bitc    hidr_buttons, #4
300e4     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
300e8     05 16 47 F4 |                 bitc    hidr_buttons, #5
300ec     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
300f0     06 16 47 F4 |                 bitc    hidr_buttons, #6
300f4     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
300f8     07 16 47 F4 |                 bitc    hidr_buttons, #7
300fc     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
30100     08 16 47 F4 |                 bitc    hidr_buttons, #8
30104     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
30108     09 16 47 F4 |                 bitc    hidr_buttons, #9
3010c     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
30110     0A 16 47 F4 |                 bitc    hidr_buttons, #10
30114     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
30118     0B 16 47 F4 |                 bitc    hidr_buttons, #11
3011c     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
30120     0C 16 47 F4 |                 bitc    hidr_buttons, #12
30124                 | 
30124     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
30128     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
3012c     09 FA 79 FF 
30130     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
30134     FF FA 7F FF 
30138     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
3013c     B9 71 5F F9 |                 altgn   htmp, #htmp1
30140     00 70 43 F8 |                 getnib  htmp
30144     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
30148                 | 
30148     B8 00 90 FD |                 jmp     #hpad_translate
3014c                 | 
3014c                 | '------------------------------------------------------------------------------
3014c                 | ' Read bits from report data buffer
3014c                 | '------------------------------------------------------------------------------
3014c                 | ' On entry:
3014c                 | '   PTRB - report buffer
3014c                 | '   hpar1 - start bit
3014c                 | '   hpar2 - number of bits
3014c                 | ' On exit:
3014c                 | '   retval - bits
3014c                 | '------------------------------------------------------------------------------
3014c                 | hpad_getbits
3014c     C6 71 03 F6 |                 mov     htmp, hpar1
30150     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
30154     F9 71 03 F1 |                 add     htmp, ptrb
30158     B8 BF 02 FB |                 rdlong  retval, htmp
3015c                 | 
3015c     C6 73 03 F6 |                 mov     htmp1, hpar1
30160     07 72 07 F5 |                 and     htmp1, #$07     ' shift
30164     B9 BF 42 F0 |                 shr     retval, htmp1
30168                 | 
30168     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
3016c     10 00 90 1D |         if_a    jmp     #.l1
30170                 | 
30170     C7 8F C3 F9 |                 decod   hpar2
30174     01 8E 87 F1 |                 sub     hpar2, #1
30178     C7 BF 02 F5 |                 and     retval, hpar2
3017c     2D 00 64 FD |                 ret
30180                 | .l1
30180     FF 7F 00 FF 
30184     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
30188     03 70 07 F1 |                 add     htmp, #3
3018c     B8 75 03 FB |                 rdlong  htmp2, htmp
30190     18 8E 87 F1 |                 sub     hpar2, #24
30194     C7 8F C3 F9 |                 decod   hpar2
30198     01 8E 87 F1 |                 sub     hpar2, #1
3019c     B9 75 43 F0 |                 shr     htmp2, htmp1
301a0     C7 75 03 F5 |                 and     htmp2, hpar2
301a4     18 74 67 F0 |                 shl     htmp2, #24
301a8     BA BF 42 F5 |                 or      retval, htmp2
301ac     2D 00 64 FD |                 ret
301b0                 | 
301b0                 | '------------------------------------------------------------------------------
301b0                 | ' Normalize value to signed word (-32768 / 32767)
301b0                 | '------------------------------------------------------------------------------
301b0                 | ' On entry:
301b0                 | '   retval - value to normalize
301b0                 | '   hidr_lminmax - min (word 1) max (word 0) value range
301b0                 | '   - or -
301b0                 | '   hidr_pminmax - min (word 1) max (word 0) value range
301b0                 | '   hidr_size - value bits length
301b0                 | ' On exit:
301b0                 | '   retval - normalized value
301b0                 | '------------------------------------------------------------------------------
301b0                 | hpad_normalize
301b0     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
301b4     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
301b8     2D 00 64 AD |         if_z    ret
301bc     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
301c0     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
301c4     0F 72 77 F7 |                 signx   htmp1, #15      wc
301c8     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
301cc     00 BE 66 C7 |         if_c    signx   retval, #0-0
301d0     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
301d4     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
301d8     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
301dc     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
301e0     B8 71 53 F6 |                 abs     htmp            wc
301e4     1F BE 0E F4 |                 testb   retval, #31     wz
301e8     5F BF 42 F6 |                 abs     retval
301ec     B8 BF 12 FD |                 qdiv    retval, htmp
301f0     18 BE 62 FD |                 getqx   retval
301f4     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
301f8     C0 FF 7F FF 
301fc     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
30200     2D 00 64 FD |                 ret
30204                 | 
30204                 | '------------------------------------------------------------------------------
30204                 | ' Perform controller actions
30204                 | ' On entry:
30204                 | '    hidr_id        report id
30204                 | '    hidr_axis      axis value (signed word, 2 axes per long)
30204                 | '                      X = hidr_axis+0, #0
30204                 | '                      Y = hidr_axis+0, #1
30204                 | '                      Z = hidr_axis+1, #0
30204                 | '                     RX = hidr_axis+1, #1
30204                 | '                     RY = hidr_axis+2, #0
30204                 | '                     RZ = hidr_axis+2, #1
30204                 | '    hidr_buttons   buttons state (bits 0 to 31)
30204                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
30204                 | '
30204                 | '                     -------3 -------2 -------1 -------0 byte
30204                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
30204                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
30204                 | '                                zyx||| |||||||| ++++++++ n. buttons
30204                 | '                                |||||| ||||++++--------- n. axes
30204                 | '                                |||||| ++++------------- n. hats
30204                 | '                                ++++++------------------ valid axes
30204                 | '------------------------------------------------------------------------------
30204                 | hpad_translate
30204                 | 
30204                 | 
30204                 |         if HAVE_HIDPAD
30204     84 0C F0 FE |                 loc     ptrb,#hidpad_report
30208     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
3020c     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
30210     01 70 E7 F2 |                 cmpsub  htmp,#1
30214     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
30218     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
3021c     2D 00 7C 3D |         if_ae   ret     wcz
30220     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
30224     B8 F3 03 F1 |                 add     ptrb,htmp
30228     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3022c     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
30230     28 0C 64 FD |                 setq    #7-1
30234     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
30238                 |         end
30238                 | 
30238                 | 
30238                 |         if EMUPAD_MAX_PLAYER > 0
30238                 | .emupad_no_hat
30238                 |         if EMUPAD_BT0_BIT >= 0
30238                 |         end
30238                 |         if EMUPAD_BT1_BIT >= 0
30238                 |         end
30238                 |         if EMUPAD_BT2_BIT >= 0
30238                 |         end
30238                 |         if EMUPAD_BT3_BIT >= 0
30238                 |         end
30238                 |         if EMUPAD_BT4_BIT >= 0
30238                 |         end
30238                 |         if EMUPAD_BT5_BIT >= 0
30238                 |         end
30238                 |         if EMUPAD_BT6_BIT >= 0
30238                 |         end
30238                 |         if EMUPAD_BT7_BIT >= 0
30238                 |         end
30238                 |         if EMUPAD_BT8_BIT >= 0
30238                 |         end
30238                 |         if EMUPAD_BT9_BIT >= 0
30238                 |         end
30238                 | .emupad_slot_over
30238                 |         end
30238                 | 
30238                 |         if 0
30238                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
30238                 | 
30238                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
30238                 | 
30238                 |         end
30238     2D 00 64 FD |                 ret
3023c                 | end
3023c                 | 
3023c                 | if EMUPAD_MAX_PLAYER > 0
3023c                 | '------------------------------------------------------------------------------
3023c                 | ' Clear EmuPad state
3023c                 | '------------------------------------------------------------------------------
3023c                 | emupad_reset
3023c                 | 
3023c                 | '------------------------------------------------------------------------------
3023c                 | ' Get EmuPad Player number for current device (into retval)
3023c                 | ' Z flag is also set if current device is valid
3023c                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
3023c                 | '------------------------------------------------------------------------------
3023c                 | emupad_getnum
3023c                 | .loop
3023c                 | '------------------------------------------------------------------------------
3023c                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
3023c                 | '------------------------------------------------------------------------------
3023c                 | emupad_discon
3023c                 | .loop         
3023c                 |         
3023c                 |         ' FALL THROUGH!!!
3023c                 | 
3023c                 | '------------------------------------------------------------------------------
3023c                 | ' Update EmuPad reports (all of them...)
3023c                 | '------------------------------------------------------------------------------
3023c                 | emupad_write_reports
3023c                 | .devloop
3023c                 | 
3023c                 | end
3023c                 | 
3023c                 | 
3023c                 | '------------------------------------------------------------------------------
3023c                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3023c                 | '------------------------------------------------------------------------------
3023c                 | ' On entry:
3023c                 | ' On exit:
3023c                 | '------------------------------------------------------------------------------
3023c                 | hget_hub_status
3023c     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
30240     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
30244     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
30248     01 90 2F F9 |                 setword hpar3, #1, #1
3024c     CF 02 A0 FD |                 call    #do_int_in
30250     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
30254     0C 00 90 AD |         if_z    jmp     #.data
30258     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3025c     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
30260     2D 00 64 FD |                 ret
30264                 | .data
30264     00 90 0F F2 |                 cmp     hpar3, #0               wz
30268     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3026c                 | 
3026c     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
30270     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
30274     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
30278     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
3027c                 |                 debug(ubin_long(hub_status_chg))
3027c                 | 
3027c     01 5A 06 F6 |                 mov     hdev_port, #1
30280                 | .loop
30280     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
30284     0C 00 B0 AD |         if_x1   call    #hub_port_handler
30288     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
3028c     F0 FF 9F 3D |         if_nc   jmp     #.loop
30290     2D 00 64 FD |                 ret
30294                 | 
30294                 | hub_port_handler
30294     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
30298     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3029c     27 EF 03 F6 |                 mov     pb, urx_buff_p
302a0     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
302a4     55 02 A0 FD |                 call    #control_read
302a8     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
302ac                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
302ac                 | 
302ac     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
302b0     50 01 90 5D |         if_x0   jmp     #.other
302b4     68 02 D0 FE |                 loc     ptra, #clr_port_feat
302b8     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
302bc     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
302c0     A0 02 A0 FD |                 call    #control_write
302c4     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
302c8     7C 01 90 5D |         if_x0   jmp     #.disconnect
302cc     B0 99 02 F6 |                 mov     hctwait, _100ms_
302d0     EF 02 A0 FD |                 call    #poll_waitx
302d4                 | 
302d4     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
302d8     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
302dc     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
302e0     A0 02 A0 FD |                 call    #control_write
302e4                 | 
302e4     02 76 07 F6 |                 mov     htmp3, #2
302e8                 | .wait_reset
302e8     AC 99 02 F6 |                 mov     hctwait, _8ms_
302ec     EF 02 A0 FD |                 call    #poll_waitx
302f0     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
302f4     27 EF 03 F6 |                 mov     pb, urx_buff_p
302f8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
302fc     55 02 A0 FD |                 call    #control_read
30300     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
30304     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
30308     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
3030c                 | 
3030c     10 02 D0 FE |                 loc     ptra, #clr_port_feat
30310     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
30314     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
30318     A0 02 A0 FD |                 call    #control_write
3031c                 | 
3031c     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
30320                 | .wait_recover
30320     A7 99 02 F6 |                 mov     hctwait, _1ms_
30324     EF 02 A0 FD |                 call    #poll_waitx
30328     FD 71 6F FB |                 djnz    htmp,#.wait_recover
3032c                 | 
3032c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
30330     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
30334     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
30338                 | 
30338     00 08 00 FF 
3033c     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
30340     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
30344     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
30348     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3034c     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
30350     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
30354     48 01 90 5D |         if_nz   jmp     #.done
30358                 | .get_dev_desc
30358     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3035c     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
30360     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
30364     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
30368     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
3036c     01 71 57 FC |                 wrword  htmp, ptra[wValue]
30370     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
30374     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
30378     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3037c     AC 99 02 F6 |                 mov     hctwait, _8ms_
30380     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
30384     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
30388     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
3038c     BE 00 A0 FD |                 call    #calc_crc5
30390     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
30394     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
30398     F7 AD C2 FA |                 rdbyte  total_data, pb
3039c     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
303a0     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
303a4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
303a8     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
303ac     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
303b0     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
303b4                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
303b4     9F 99 02 F6 |                 mov     hctwait, _500us_
303b8     EF 02 A0 FD |                 call    #poll_waitx
303bc     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
303c0     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
303c4     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
303c8     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
303cc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
303d0     CC 00 90 5D |         if_nz   jmp     #.done
303d4     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
303d8     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
303dc     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
303e0     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
303e4     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
303e8     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
303ec     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
303f0     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
303f4     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
303f8     A4 00 90 CD |         if_b    jmp     #.done
303fc     6C F0 BF FD |                 call    #hparse_con_desc
30400     9C 00 90 FD |                 jmp     #.done
30404                 | 
30404                 | .other
30404     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
30408     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
3040c     28 00 90 AD |         if_x1   jmp     #.reset_feature
30410     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
30414     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
30418     1C 00 90 AD |         if_x1   jmp     #.reset_feature
3041c     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
30420     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
30424     10 00 90 AD |         if_x1   jmp     #.reset_feature
30428     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
3042c     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
30430     04 00 90 AD |         if_x1   jmp     #.reset_feature
30434     68 00 90 FD |                 jmp     #.done
30438                 | .reset_feature
30438     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
3043c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
30440     A0 02 A0 FD |                 call    #control_write
30444     58 00 90 FD |                 jmp     #.done
30448                 | .disconnect
30448                 | 
30448     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3044c     00 70 E3 F8 |                 getbyte htmp
30450     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
30454     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
30458     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
3045c     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
30460     00 76 06 A6 |         if_z    mov     kb_led_states, #0
30464     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
30468                 |         if EMUPAD_MAX_PLAYER > 0
30468                 |         end
30468                 |         if HAVE_MOUSE
30468     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
3046c     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
30470     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
30474                 |         end
30474                 |         if HAVE_HIDPAD
30474     14 0A F0 FE |                 loc ptrb,#hidpad_report
30478     2D 71 03 F6 |                 mov htmp,hdev_port
3047c     01 70 E7 F2 |                 cmpsub htmp,#1
30480     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
30484     B8 F3 03 F1 |                 add ptrb,htmp
30488     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
3048c     80 01 6C FC |                 wrlong #0,ptrb
30490                 |         end
30490                 | 
30490     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
30494     00 00 C4 F8 |                 setbyte #0
30498     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3049c     00 00 04 F6 |                 mov     0-0, #0
304a0                 | 
304a0                 | .done
304a0     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
304a4     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
304a8     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
304ac     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
304b0     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
304b4     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
304b8                 | 
304b8     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
304bc     27 EF 03 F6 |                 mov     pb, urx_buff_p
304c0     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
304c4     55 02 A0 FD |                 call    #control_read
304c8     00 69 06 FB |                 rdlong  hub_port_status, ptra
304cc                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
304cc     2D 00 64 FD |                 ret
304d0                 | 
304d0                 | '------------------------------------------------------------------------------
304d0                 | ' Partially populated SETUP packets
304d0                 | '------------------------------------------------------------------------------
304d0     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
304d1     06          |                 byte    REQ_GET_DESC
304d2     00 01       |                 word    TYPE_DEVICE << 8
304d4     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
304d6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
304d8     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
304d9     06          |                 byte    REQ_GET_DESC
304da     00 02       |                 word    TYPE_CONFIG << 8
304dc     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
304de     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
304e0     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
304e1     09          |                 byte    REQ_SET_CONFIG
304e2     00 00       |                 word    0       ' Configuration value
304e4     00 00       |                 word    0       ' Zero
304e6     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
304e8     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
304e9     05          |                 byte    REQ_SET_ADDR
304ea     00 00       |                 word    0       ' Zero
304ec     00 00       |                 word    0       ' Zero
304ee     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
304f0                 | '------------------------------------------------------------------------------
304f0                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
304f0                 | ' wValue field dictates which protocol should be used.
304f0                 | '
304f0                 | ' When initialized, all devices default to report protocol. However the host
304f0                 | ' should not make any assumptions about the device state and should set the
304f0                 | ' desired protocol whenever initializing a device.
304f0                 | '------------------------------------------------------------------------------
304f0     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
304f1     0B          |                 byte    HID_SET_PROTO
304f2     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
304f4                 |                                                 ' (HID 1.11 Section 7.2.6).
304f4     00 00       |                 word    0               ' Interface index number.
304f6     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
304f8                 | '------------------------------------------------------------------------------
304f8     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
304f9     0A          |                 byte    HID_SET_IDLE
304fa     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
304fc                 |                                         ' reporting until a change is detected in the report data
304fc                 | 
304fc                 |                                         ' (HID 1.11 Section 7.2.4).
304fc     00 00       |                 word    0       ' Interface index number.
304fe     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
30500     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
30501     09          |                 byte    HID_SET_REPORT
30502     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
30504                 |                                         ' (HID 1.11 Section 7.2.2).
30504     00 00       |                 word    0       ' Interface index number.
30506     00 00       |                 word    0       ' Size of the report, in bytes.
30508     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
30509     06          |                 byte    REQ_GET_DESC
3050a     00 22       |                 word    TYPE_REPORT << 8
3050c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3050e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
30510                 | '------------------------------------------------------------------------------
30510     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
30511     06          |                 byte    REQ_GET_DESC
30512     00 29       |                 word    TYPE_HUB << 8
30514     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
30516     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
30518     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
30519     03          |                 byte    REQ_SET_FEATURE
3051a     00 00       |                 word    0       ' port power
3051c     01 00       |                 word    1       ' Port index number (1+)
3051e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
30520     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
30521     01          |                 byte    REQ_CLEAR_FEATURE
30522     00 00       |                 word    0       ' port power
30524     01 00       |                 word    1       ' Port index number (1+)
30526     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
30528     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
30529     00          |                 byte    REQ_GET_STATUS
3052a     00 00       |                 word    0
3052c     01 00       |                 word    1       ' Port index number (1+)
3052e     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
30530                 | '------------------------------------------------------------------------------
30530                 | if _HAVE_GAMEPAD
30530     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
30534                 | ps3_command_buff
30534     00 00 00 00 
30538     00          |                 byte    $00, $00, $00, $00, $00
30539     00 00 00 00 
3053d     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
3053e     FF 27 10 00 
30542     32          |                 byte    $FF, $27, $10, $00, $32
30543     FF 27 10 00 
30547     32          |                 byte    $FF, $27, $10, $00, $32
30548     FF 27 10 00 
3054c     32          |                 byte    $FF, $27, $10, $00, $32
3054d     FF 27 10 00 
30551     32          |                 byte    $FF, $27, $10, $00, $32
30552     00 00 00 00 
30556     00          |                 byte    $00, $00, $00, $00, $00
30557     00 00 00 00 
3055b     00          |                 byte    $00, $00, $00, $00, $00
3055c     00 00 00 00 
30560     00          |                 byte    $00, $00, $00, $00, $00
30561     00 00 00    |                 byte    $00, $00, $00
30564                 | '------------------------------------------------------------------------------
30564     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
30567                 |                                         ' 0x01 All blinking
30567                 |                                         ' 0x02 1 flashes, then on
30567                 |                                         ' 0x03 2 flashes, then on
30567                 |                                         ' 0x04 3 flashes, then on
30567                 |                                         ' 0x05 4 flashes, then on
30567                 |                                         ' 0x06 1 on
30567                 |                                         ' 0x07 2 on
30567                 |                                         ' 0x08 3 on
30567                 |                                         ' 0x09 4 on
30567                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
30567                 |                                         ' 0x0B Blinking*
30567                 |                                         ' 0x0C Slow blinking*
30567                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
30567     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
3056a     00          |                 byte    $00             ' Left rumble
3056b     00          |                 byte    $00             ' Right rumble
3056c     00 00 00    |                 byte    $00, $00, $00
3056f     00          | end
30570                 | alignl
30570                 | 
30570                 | if HAVE_MOUSE
30570     00 00 00 00 
30574     00 00 00 00 | mouse_limits long 0[2]
30578     00 00 00 00 | mouse_outptr long 0
3057c                 | end
3057c                 | 
3057c                 | if KEYQUEUE_SIZE > 0
3057c     00          | keyq_head byte 0
3057d     00          | keyq_tail byte 0
3057e     00 00 00 00 
      ...             
3077a     00 00 00 00 
3077e     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
30780                 | alignl
30780                 | end
30780                 | 
30780                 | if EMUPAD_MAX_PLAYER > 0
30780                 | emupad_rule_buffer
30780                 | if EMUPAD_BUILTIN_RULES
30780                 | file "padmap_builtin.dat"
30780                 | end
30780                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
30780                 | '' Default rule directly follows!
30780                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
30780                 | end
30780                 | 
30780                 | '------------------------------------------------------------------------------
30780                 | ' The USB data cache area gets zero-filled at every device disconnect
30780                 | '------------------------------------------------------------------------------
30780                 | usb_cache_start
30780                 | 
30780                 | ' HID descriptor and report buffers
30780                 | if !!OVERLAP_MEMORY
30780     00 00 00 00 
      ...             
30e78     00 00 00 00 
30e7c     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
30e80                 | end
30e80     00 00 00 00 
30e84     00 00 00 00 | hkbd_report     byte    0[8]
30e88     00 00 00 00 | hkbd_led_rep    byte    0
30e8c                 | alignl
30e8c                 | 
30e8c                 | if HAVE_HIDPAD
30e8c     00 00 00 00 
      ...             
30f48     00 00 00 00 
30f4c     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
30f50                 | end
30f50                 | 
30f50                 | ' HUB descriptor
30f50     00          | hub_descr       byte    0   ' bDescLength
30f51     00          |                 byte    0   ' bDescriptorType
30f52     00          |                 byte    0   ' bNbrPorts
30f53     00 00       |                 word    0   ' wHubCharacteristics
30f55     00          |                 byte    0   ' bPwrOn2PwrGood
30f56     00          |                 byte    0   ' bHubContrCurrent
30f57     00          |                 byte    0   ' DeviceRemoveable
30f58     00          |                 byte    0   ' PortPwrCtrlMask
30f59                 | 
30f59                 | usb_cache_end
30f59                 | 
30f59                 | if HAVE_MOUSE
30f59     00 00 00 00 | mouse_xacc      long 0
30f5d     00 00 00 00 | mouse_yacc      long 0
30f61     00 00 00 00 | mouse_zacc      long 0
30f65     00          | mouse_bstate    byte 0
30f66     00          | mouse_lpending  byte 0
30f67     00          | mouse_rpending  byte 0
30f68     00          | mouse_mpending  byte 0
30f69     00          | mouse_lock      byte 0
30f6a     00 00 00    |                 byte 0[3] ' padding
30f6d                 | end
30f6d                 | 
30f6d     00 00 00 00 
      ...             
30fe5     00 00 00 00 
30fe9     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
30fed     00 00 00 00 
30ff1     00 00 00 00 
30ff5     00 00 00 00 
30ff9     00 00 00 00 
30ffd     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
30fff     00 00 00 00 
      ...             
310f7     00 00 00 00 
310fb     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
310ff                 | 
310ff     00          | driver_cog      byte    0                       ' Current driver cog + 1
31100                 | 	alignl
31100                 | _Audio093b_8_sc_spin2_dat_
31100                 | 
31100                 | audio       org     0
31100                 | 
31100     61 85 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
31104     61 D3 05 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
31108     61 DF 05 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
3110c                 | 
3110c     01 EC 63 FD |             cogid   pa                   ' compute cogid
31110     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
31114     F6 85 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
31118     C2 82 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
3111c                 | 
3111c     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
31120     0E DA 05 FC |             wrpin   dac,#left            ' Noise dither DACs at clk/95
31124     0E BE 1C FC |             wxpin   #95,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
31128     0F DA 05 FC |             wrpin   dac,#right
3112c     0F BE 1C FC |             wxpin   #95,#right    
31130     41 9C 64 FD |             dirh    #left addpins 1
31134     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
31138     A9 E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
3113c     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
31140                 |             
31140                 | '---------------------------------------------------------------------------------        
31140                 | '----------------- The main loop -------------------------------------------------
31140                 | '---------------------------------------------------------------------------------
31140                 | 
31140     B2 66 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
31144     10 00 90 CD |       if_c  jmp     #loop1
31148                 |   
31148     09 B8 05 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
3114c     B2 B8 8D F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
31150     B1 00 80 F1 |             sub     0-0,a40000000
31154     FD B9 6D FB |             djnz    cn,#p402
31158                 |     
31158     00 B8 05 F6 | loop1       mov     cn,#0               ' Find the channel to compute
3115c     B4 BA 01 F6 |             mov     ct,time1            ' with the lowest next sample time
31160     B5 BA 39 F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
31164     01 B8 05 C6 |     if_c    mov     cn,#1
31168     B6 BA 39 F3 |             fle     ct,time3 wcz
3116c     02 B8 05 C6 |     if_c    mov     cn,#2     
31170     B7 BA 39 F3 |             fle     ct,time4 wcz
31174     03 B8 05 C6 |     if_c    mov     cn,#3
31178     B8 BA 39 F3 |             fle     ct,time5 wcz
3117c     04 B8 05 C6 |     if_c    mov     cn,#4
31180     B9 BA 39 F3 |             fle     ct,time6 wcz
31184     05 B8 05 C6 |     if_c    mov     cn,#5
31188     BA BA 39 F3 |             fle     ct,time7 wcz
3118c     06 B8 05 C6 |     if_c    mov     cn,#6
31190     BB BA 39 F3 |             fle     ct,time8 wcz
31194     07 B8 05 C6 |     if_c    mov     cn,#7
31198                 | 
31198                 | 
31198                 | '----------------------------------------------------------------------------------
31198                 | '------------- Compute channel samples --------------------------------------------
31198                 | '----------------------------------------------------------------------------------
31198                 | 
31198                 | 
31198     DC 78 01 F6 | p401        mov     channeladd,cn             ' compute the pointer to channel parameters block
3119c     06 78 65 F0 |             shl     channeladd,#6
311a0     BC F0 03 F1 |             add     ptra,channeladd
311a4                 | 
311a4     28 0E 64 FD |             setq    #7                        ' read parameters
311a8     00 8F 05 FB |             rdlong  pointer0,ptra
311ac                 | '            testb   command0,#29 wz
311ac                 | '    if_nz   jmp     #p408
311ac                 | '    	    getword envptr,command0,#0
311ac                 | '    	    getbyte envspeed,command0,#2
311ac                 | '    	    jmp     #p404                     'if envelope then no sample rate
311ac                 |     	    
311ac     1F 9C 0D F4 | p408        testb   command0,#31 wz	      ' bit #31 command - set the DAC sample rate
311b0     18 00 90 5D |     if_nz   jmp     #p404                     ' if not set, proceed
311b4     CE 7C 31 F9 |             getword qq,command0,#0            ' get the new rate
311b8     4E 7C 15 FC |             wxpin   qq,#left addpins 1        ' and program the pins
311bc     BE 7C E1 F8 |             getbyte qq,qq,#0 		      ' check if the rate is n*256
311c0     00 7C 0D F2 |             cmp     qq,#0 wz                         
311c4     4E DC 05 AC |     if_z    wrpin   dac2,#left addpins 1      ' if yes, set PWM DAC mode
311c8     4E DA 05 5C |     if_nz   wrpin   dac,#left addpins 1       ' else set noise DAC mode
311cc                 |             
311cc     1E 9C 1D F4 | p404        bitl    command0,#30 wcz             ' bit #30: select PSRAM/HUB
311d0     C2 82 01 56 |     if_nz   mov     mailbox,mailbox2             ' if not set, use PSRAM
311d4     00 82 05 A6 |     if_z    mov     mailbox,#0                   ' if set, use HUB : TODO: this can be done at a channel level!
311d8                 | 
311d8                 | 
311d8     C8 BE 31 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
311dc     C8 C0 39 F9 |             getword oldrs,sample0,#1
311e0     CC B4 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
311e4     CC B2 31 F9 |     	    getword avol0,volpan0,#0
311e8     CD B0 39 F9 |             getword askip0,freqskip0,#1    	    
311ec     CD AE 31 F9 |             getword afreq0,freqskip0,#0
311f0                 | 
311f0     B4 B8 95 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
311f4     00 BC 01 F6 |             mov     dt0,0-0    
311f8     B3 BC 81 F1 |             sub     dt0,time0
311fc                 |             
311fc     B4 B8 8D F9 |             altd    cn, #time1                ' add channel period to channel time
31200     D7 00 00 F1 |             add     0-0,afreq0  	
31204                 | 
31204     D8 8E 01 F1 |             add     pointer0,askip0           ' compute the pointer to the next sample       
31208     C7 FA C1 F8 |             setbyte pointer00,pointer0,#0
3120c     08 8E 45 F0 |             shr     pointer0,#8
31210                 |          
31210     1F 92 0D F4 |             testb   sstart0,#31 wz            
31214     01 8E 65 A0 |     if_z    shl     pointer0,#1        
31218     1C 92 0D F4 |             testb   sstart0,#28 wz            
3121c     01 8E 65 A0 |     if_z    shl     pointer0,#1        
31220                 |             
31220     CB 8E 19 F2 |             cmp     pointer0,lend0 wcz
31224     CB 8E 81 31 |     if_ge   sub     pointer0,lend0	      ' and loop if needed     
31228     CA 8E 01 31 |     if_ge   add     pointer0,lstart0       
3122c                 |             
3122c     C7 7C 01 F6 |             mov     qq,pointer0               ' compute place in the memory from where the sample will be loaded
31230     C9 7C 01 F1 |             add     qq,sstart0            
31234                 | 
31234                 | 
31234                 | 
31234     FF 83 5D F2 |             cmps    mailbox,#$1FF wcz            ' the mailbox has to point somewhere not at the start of HUB RAM
31238     BE 7E E1 EA |     if_le   rdword  spl,qq                     ' if not, use HUB RAM for samples
3123c     04 01 B0 1D |     if_gt   call    #cache_read
31240                 |          
31240                 |          
31240                 |  
31240                 |          
31240     1F 92 0D F4 |             testb   sstart0,#31 wz 
31244     08 7E 65 50 |     if_nz   shl     spl,#8
31248     08 8E 65 50 |     if_nz   shl     pointer0,#8
3124c     07 8E 65 A0 |     if_z    shl     pointer0,#7
31250     1C 92 0D F4 |             testb   sstart0,#28 wz            
31254     01 8E 45 A0 |     if_z    shr     pointer0,#1    
31258     FD 8E C1 F8 | 	    setbyte pointer0,pointer00,#0       
3125c                 |     
3125c                 | 
3125c     D9 7E 31 FA | p406        scas    spl,avol0                 ' apply volume
31260     00 7E 01 F6 |             mov     spl,0-0
31264                 |  
31264     DA 7E 31 FA |             scas    spl,apan0                 ' apply pan
31268     00 C2 01 F6 |             mov     ls0,0-0
3126c     20 00 00 FF 
31270     00 7C 05 F6 |             mov     qq,##16384
31274     DA 7C 81 F1 |             sub     qq,apan0
31278     BE 7E 31 FA |             scas    spl,qq
3127c     00 C4 01 F6 |             mov     rs0, 0-0
31280                 | 
31280     E0 C8 81 F1 |             sub     rs,oldrs 		      ' replace the old sample with the new one in the mix
31284     E2 C8 01 F1 |             add     rs,rs0
31288     DF C6 81 F1 |             sub     ls,oldls
3128c     E1 C6 01 F1 |             add     ls,ls0
31290                 |    
31290     E2 90 29 F9 |             setword sample0,rs0,#1           ' pack samples into long
31294     E1 90 21 F9 |             setword sample0,ls0,#0
31298                 |             
31298     1E 92 1D F4 |             bitl    sstart0, #30 wcz          ' if bit #30 of start pointer is set, the current pointer needs resetting  
3129c     00 8E 05 A6 |     if_z    mov     pointer0, #0  
312a0     02 93 65 AC |     if_z    wrlong  sstart0, ptra[2]          ' reset bit #30 in hub
312a4     1D 92 1D F4 |             bitl    sstart0, #29 wcz	      ' if bit #29 is set, synchronize stereo at channels 1 and 2
312a8     04 00 00 AF 
312ac     00 68 05 A1 |     if_z    add     time1,##2048
312b0     B4 6A 01 A6 |     if_z    mov     time2,time1
312b4     02 93 65 AC |     if_z    wrlong  sstart0,ptra[2]
312b8                 |             
312b8     28 02 64 FD | p403        setq #1                          ' write new pointer and sample value to the hub
312bc     00 8F 65 FC |             wrlong  pointer0,ptra
312c0     BC F0 83 F1 |             sub     ptra, channeladd         ' reset the pointer to channel parameters
312c4                 |                       
312c4     B3 B6 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
312c8     FF 7B 25 A7 |     if_z    decmod  front, #511          
312cc                 |          
312cc     E3 BE 31 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
312d0     E4 C0 31 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
312d4     0F BE E5 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
312d8     0F C0 E5 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
312dc                 | 	    
312dc                 | 		    
312dc     DF C0 29 F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
312e0     E6 CA 01 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
312e4     E0 CC 01 F6 |             mov     newsample, oldrs       
312e8                 | 
312e8     B3 B6 01 F6 |             mov     oldt0,time0              ' update global time
312ec     DE 66 01 F1 |             add     time0,dt0    
312f0                 |                                      
312f0     00 BC 0D F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
312f4     60 FE 9F AD |     if_z    jmp     #loop1
312f8     DE 7C 01 F6 |             mov     qq,dt0
312fc                 |   
312fc     FF F3 97 F9 | p301        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
31300     00 7A 9D F2 |             cmpr    front, #0-0 wcz
31304     F4 FF 9F AD |     if_e    jmp     #p301    
31308                 | 		
31308     00 D2 0D F2 | 	    cmp     scbase,#0 wz
3130c     20 00 90 AD |     if_z    jmp #p302	   
31310                 |  
31310                 |  
31310     3F D8 15 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
31314     EA D6 01 C6 |     if_c    mov scptr2,scptr
31318     02 D6 65 C0 |     if_c    shl scptr2,#2
3131c     E9 D6 01 C1 |     if_c    add scptr2,scbase     
31320     60 D6 65 FC |             wrlong scptr2,#$60
31324     EB CA 61 CC |     if_c    wrlong oldsample,scptr2
31328     01 00 00 CF 
3132c     7F D4 05 C7 |     if_c    incmod scptr,##639
31330                 | 			    
31330     BD CA 31 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
31334     00 00 00 FF 
31338     FF 7B 05 F7 |             incmod  front, ##511
3133c     EF 7D 6D FB |             djnz    qq,#p301
31340                 |             
31340     FC FD 9F FD |             jmp     #loop            'loop
31344                 | 
31344                 | '----------------------------------------------------------------------------------
31344                 | '------------- This is the end of the main loop -----------------------------------
31344                 | '----------------------------------------------------------------------------------
31344                 | 
31344                 | '----------------------------------------------------------------------------------
31344                 | '------------- PSRAM cache ----------- --------------------------------------------
31344                 | '----------------------------------------------------------------------------------
31344                 | 
31344                 | ' There are 8 cache pointers for 8 channels
31344                 | ' if 24 higher bits of address=cache, then get a word from the cache
31344                 | ' else load the cache from PSRAM, update the pointer, then read a sample
31344                 | 
31344                 | 
31344     BE F6 E1 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
31348                 |             
31348     BE F8 01 F6 | 	    mov     addrhi,qq		
3134c     08 F8 45 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
31350     F0 B8 95 F9 | 	    alts    cn,#cache1            
31354     00 F8 09 F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
31358     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
3135c                 | 	
3135c     F0 B8 8D F9 | p702	    altd    cn,#cache1			' cache miss. 
31360     FC 00 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
31364     FC F0 01 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
31368     08 F0 65 F0 | 	    shl     cmd,#8
3136c     0B F0 3D F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
31370     DC F2 01 F6 |             mov     hubaddr,cn                  ' to the channel cache
31374     08 F2 65 F0 |             shl     hubaddr,#8                  '
31378     EF F2 01 F1 |             add     hubaddr,hubptr 
3137c     00 F5 05 F6 |             mov     count,#256                  ' 256 bytes
31380     28 04 64 FD |             setq    #2                          ' write 3 longs
31384     C1 F0 61 FC |             wrlong  cmd, mailbox                ' run it
31388     C1 F0 01 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
3138c     FE F1 B5 FB |             tjs     cmd, #poll1                 ' retry until valid 
31390                 |             
31390                 | 	
31390     DC 7C 01 F6 | p701	    mov     qq,cn			' cache hit
31394     08 7C 65 F0 | 	    shl     qq,#8			' compute the cache start
31398     EF 7C 01 F1 | 	    add     qq,hubptr
3139c     FB 7C 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
313a0     BE 7E E1 0A |     _ret_   rdword  spl,qq                      ' read a word
313a4                 |           
313a4                 | 
313a4                 | '--------------------------------------------------------------------------
313a4                 | '------ Interrupt service -------------------------------------------------
313a4                 | '------ Output the sample, get the next one if exists ---------------------
313a4                 | '--------------------------------------------------------------------------
313a4                 | 
313a4     0E 86 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 100 cycles     
313a8     0F 88 25 FC |             wypin   rsample,#right       '4
313ac     BD F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
313b0     80 8B A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
313b4     FF F3 07 57 |     if_ne   incmod  ptrb,#511
313b8     C5 88 39 59 |     if_ne   getword rsample,lsnext,#1    '13
313bc     C5 86 31 59 |     if_ne   getword lsample,lsnext,#0    '15
313c0                 |     
313c0     F5 FF 3B FB |             reti1                        '17/19 
313c4                 |           
313c4                 | '---------------------------------------------------------------------------
313c4                 | '-------- End of interrupt -------------------------------------------------
313c4                 | '---------------------------------------------------------------------------    
313c4                 | 
313c4                 | 
313c4                 | '---------------------------------------------------------------------------
313c4                 | '------- Variables ---------------------------------------------------------
313c4                 | '---------------------------------------------------------------------------
313c4                 | 
313c4                 | ' constants
313c4                 | 
313c4     00 00 00 40 | a40000000   long $40000000
313c8     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
313cc                 | 
313cc                 | ' Time variables
313cc                 | 
313cc     00 00 00 00 | time0       long 0    ' Global sample computing time
313d0     01 00 00 00 | time1       long 1    ' Local channels time
313d4     02 00 00 00 | time2       long 2
313d8     03 00 00 00 | time3       long 3
313dc     04 00 00 00 | time4       long 4
313e0     05 00 00 00 | time5       long 5
313e4     06 00 00 00 | time6       long 6
313e8     07 00 00 00 | time7       long 7
313ec     08 00 00 00 | time8       long 8
313f0                 | 
313f0     00 00 00 00 | channeladd long 0
313f4                 | 
313f4     00 00 00 00 | front       long 0
313f8                 | 
313f8                 | ' temporary variables 
313f8     00 00 00 00 | qq          long 0
313fc     00 00 00 00 | spl         long 0
31400     00 00 00 00 | zero        long 0
31404     00 00 00 00 | mailbox     long 0
31408     00 00 00 00 | mailbox2 long 0
3140c                 | 
3140c                 | ' Interrupt ISR variables
3140c                 | 
3140c     00 00 00 00 | lsample     long 0
31410     00 00 00 00 | rsample     long 0
31414     00 00 00 00 | lsnext      long 0
31418     00 00 00 00 | rsnext      long 0 
3141c                 | 
3141c                 | ' channel parameter block
3141c                 | 
3141c     00 00 00 00 | pointer0    long 0     
31420     00 00 00 00 | sample0     long 0
31424     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
31428     00 00 00 00 | lstart0     long 0
3142c     00 00 00 00 | lend0       long 0
31430     00 00 00 00 | volpan0     long 0
31434     00 00 00 00 | freqskip0   long 0
31438     00 00 00 00 | command0    long 0
3143c     00 00 00 00 | res1	    long 0
31440     00 00 00 00 | res2	    long 0
31444     00 00 00 00 | res3	    long 0
31448     00 00 00 00 | res4	    long 0
3144c     00 00 00 00 | res5	    long 0
31450     00 00 00 00 | res6	    long 0
31454     00 00 00 00 | res7	    long 0
31458     00 00 00 00 | res8	    long 0
3145c                 | 
3145c     00 00 00 00 | afreq0      long 0
31460     00 00 00 00 | askip0      long 0
31464     00 00 00 00 | avol0       long 0
31468     00 00 00 00 | apan0       long 0
3146c                 | 
3146c     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
31470     00 00 00 00 | cn          long 0
31474     00 00 00 00 | ct          long 0
31478     00 00 00 00 | dt0         long 0
3147c                 | 
3147c                 | ' Samples
3147c     00 00 00 00 | oldls       long 0
31480     00 00 00 00 | oldrs       long 0
31484                 | 
31484     00 00 00 00 | ls0         long 0
31488     00 00 00 00 | rs0         long 0
3148c                 | 
3148c     00 00 00 00 | ls          long 0    
31490     00 00 00 00 | rs          long 0
31494                 | 
31494     00 00 00 00 | oldsample   long 0
31498     00 00 00 00 | newsample   long 0
3149c                 | 
3149c     00 00 00 00 | nrsample    long 0
314a0     00 00 00 00 | nlsample    long 0
314a4                 | 
314a4     00 00 00 00 | scbase long 0
314a8     00 00 00 00 | scptr long 0
314ac     00 00 00 00 | scptr2 long 0
314b0     00 00 00 00 | scope long 0
314b4                 | 
314b4     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
314b8     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
314bc                 | 
314bc     00 18 07 00 | hubptr      long $71800
314c0     00 00 00 00 | cache1      long 0
314c4     00 00 00 00 | cache2      long 0
314c8     00 00 00 00 | cache3      long 0
314cc     00 00 00 00 | cache4      long 0
314d0     00 00 00 00 | cache5      long 0
314d4     00 00 00 00 | cache6      long 0
314d8     00 00 00 00 | cache7      long 0
314dc     00 00 00 00 | cache8      long 0
314e0                 | 
314e0                 | 
314e0     00 00 00 00 | cmd         long 0
314e4     00 00 00 00 | hubaddr     long 0
314e8     00 01 00 00 | count       long 256
314ec     00 00 00 00 | addrlo long 0
314f0     00 00 00 00 | addrhi long 0
314f4     00 00 00 00 | pointer00 long 0
314f8     00 00 00 00 
314fc     00 00 00 00 | null  			long 	0,0           ' for channel reset
31500                 | 	alignl
31500                 | __system__dat_
31500     00 00 00 00 
31504     00 00 00 00 | 	byte	$00[8]
31508     03 00 00 00 
3150c     00 00 00 00 
31510     00 00 00 00 
31514     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31518     00 00 00 00 
      ...             
317a4     00 00 00 00 
317a8     00 00 00 00 | 	byte	$00[660]
317ac     00 00 80 06 | 	long	(104 {__system____root_opendir})<<20
317b0     00 00 90 06 | 	long	(105 {__system____root_closedir})<<20
317b4     00 00 A0 06 | 	long	(106 {__system____root_readdir})<<20
317b8     00 00 B0 06 | 	long	(107 {__system____root_stat})<<20
317bc     00 00 00 00 
317c0     00 00 00 00 
317c4     00 00 00 00 
317c8     00 00 00 00 
317cc     00 00 00 00 
317d0     00 00 00 00 
317d4     00 00 00 00 | 	byte	$00[28]
317d8     40 18 03 00 | 	long	@@@__system__dat_ + 832
317dc     43 18 03 00 | 	long	@@@__system__dat_ + 835
317e0     64 18 03 00 | 	long	@@@__system__dat_ + 868
317e4     7D 18 03 00 | 	long	@@@__system__dat_ + 893
317e8     98 18 03 00 | 	long	@@@__system__dat_ + 920
317ec     B2 18 03 00 | 	long	@@@__system__dat_ + 946
317f0     C2 18 03 00 | 	long	@@@__system__dat_ + 962
317f4     D4 18 03 00 | 	long	@@@__system__dat_ + 980
317f8     E6 18 03 00 | 	long	@@@__system__dat_ + 998
317fc     F8 18 03 00 | 	long	@@@__system__dat_ + 1016
31800     04 19 03 00 | 	long	@@@__system__dat_ + 1028
31804     15 19 03 00 | 	long	@@@__system__dat_ + 1045
31808     29 19 03 00 | 	long	@@@__system__dat_ + 1065
3180c     33 19 03 00 | 	long	@@@__system__dat_ + 1075
31810     43 19 03 00 | 	long	@@@__system__dat_ + 1091
31814     52 19 03 00 | 	long	@@@__system__dat_ + 1106
31818     68 19 03 00 | 	long	@@@__system__dat_ + 1128
3181c     81 19 03 00 | 	long	@@@__system__dat_ + 1153
31820     95 19 03 00 | 	long	@@@__system__dat_ + 1173
31824     A3 19 03 00 | 	long	@@@__system__dat_ + 1187
31828     B7 19 03 00 | 	long	@@@__system__dat_ + 1207
3182c     C3 19 03 00 | 	long	@@@__system__dat_ + 1219
31830     D5 19 03 00 | 	long	@@@__system__dat_ + 1237
31834     ED 19 03 00 | 	long	@@@__system__dat_ + 1261
31838     FF 19 03 00 | 	long	@@@__system__dat_ + 1279
3183c     12 1A 03 00 | 	long	@@@__system__dat_ + 1298
31840     4F 4B 00 4E 
31844     75 6D 65 72 
31848     69 63 61 6C 
3184c     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
31850     75 6D 65 6E 
31854     74 20 6F 75 
31858     74 20 6F 66 
3185c     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
31860     61 69 6E 00 
31864     52 65 73 75 
31868     6C 74 20 6E 
3186c     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
31870     65 70 72 65 
31874     73 65 6E 74 
31878     61 62 6C 65 
3187c     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
31880     65 67 61 6C 
31884     20 6D 75 6C 
31888     74 69 62 79 
3188c     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
31890     65 71 75 65 
31894     6E 63 65 00 
31898     4E 6F 20 73 
3189c     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
318a0     66 69 6C 65 
318a4     20 6F 72 20 
318a8     64 69 72 65 
318ac     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
318b0     79 00 42 61 
318b4     64 20 66 69 
318b8     6C 65 20 6E 
318bc     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
318c0     72 00 50 65 
318c4     72 6D 69 73 
318c8     73 69 6F 6E 
318cc     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
318d0     69 65 64 00 
318d4     4E 6F 74 20 
318d8     65 6E 6F 75 
318dc     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
318e0     65 6D 6F 72 
318e4     79 00 54 65 
318e8     6D 70 6F 72 
318ec     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
318f0     66 61 69 6C 
318f4     75 72 65 00 
318f8     46 69 6C 65 
318fc     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
31900     73 74 73 00 
31904     49 6E 76 61 
31908     6C 69 64 20 
3190c     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
31910     6D 65 6E 74 
31914     00 54 6F 6F 
31918     20 6D 61 6E 
3191c     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
31920     65 6E 20 66 
31924     69 6C 65 73 
31928     00 49 2F 4F 
3192c     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
31930     6F 72 00 4E 
31934     6F 74 20 61 
31938     20 64 69 72 
3193c     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
31940     72 79 00 49 
31944     73 20 61 20 
31948     64 69 72 65 
3194c     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
31950     79 00 52 65 
31954     61 64 20 6F 
31958     6E 6C 79 20 
3195c     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
31960     20 73 79 73 
31964     74 65 6D 00 
31968     46 75 6E 63 
3196c     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
31970     20 6E 6F 74 
31974     20 69 6D 70 
31978     6C 65 6D 65 
3197c     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
31980     00 44 69 72 
31984     65 63 74 6F 
31988     72 79 20 6E 
3198c     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
31990     6D 70 74 79 
31994     00 4E 61 6D 
31998     65 20 74 6F 
3199c     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
319a0     6E 67 00 44 
319a4     65 76 69 63 
319a8     65 20 6E 6F 
319ac     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
319b0     65 6B 61 62 
319b4     6C 65 00 42 
319b8     61 64 20 61 
319bc     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
319c0     73 73 00 42 
319c4     72 6F 6B 65 
319c8     6E 20 63 6F 
319cc     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
319d0     74 69 6F 6E 
319d4     00 44 65 76 
319d8     69 63 65 20 
319dc     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
319e0     65 73 6F 75 
319e4     72 63 65 20 
319e8     62 75 73 79 
319ec     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
319f0     73 73 20 64 
319f4     65 76 69 63 
319f8     65 20 6C 69 
319fc     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
31a00     6F 20 73 70 
31a04     61 63 65 20 
31a08     6F 6E 20 64 
31a0c     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
31a10     65 00 55 6E 
31a14     6B 6E 6F 77 
31a18     6E 20 65 72 
31a1c     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
31a20     00 00 00 00 
31a24     00 00 00 00 | 	byte	$00[8]
31a28     05 00 00 00 
31a2c     00 00 00 00 
31a30     00 00 00 00 
31a34     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31a38     00 00 00 00 | 	byte	$00, $00, $00, $00
31a3c     00 00 00 08 | 	long	(128 {__system___tx})<<20
31a40     00 00 10 08 | 	long	(129 {__system___rx})<<20
31a44     00 00 00 00 | 	byte	$00, $00, $00, $00
31a48     00 00 20 08 | 	long	(130 {__system___rxtxioctl_0579})<<20
31a4c     00 00 30 08 | 	long	(131 {__system____dummy_flush_0580})<<20
31a50     00 00 00 00 
31a54     00 00 00 00 | 	byte	$00[8]
31a58     01 00 00 00 
31a5c     06 00 00 00 
31a60     00 00 00 00 
31a64     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31a68     00 00 00 00 
31a6c     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
31a70     00 00 00 08 | 	long	(128 {__system___tx})<<20
31a74     00 00 10 08 | 	long	(129 {__system___rx})<<20
31a78     00 00 00 00 | 	byte	$00, $00, $00, $00
31a7c     00 00 20 08 | 	long	(130 {__system___rxtxioctl_0579})<<20
31a80     00 00 30 08 | 	long	(131 {__system____dummy_flush_0580})<<20
31a84     00 00 00 00 
31a88     00 00 00 00 | 	byte	$00[8]
31a8c     01 00 00 00 
31a90     06 00 00 00 
31a94     00 00 00 00 
31a98     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31a9c     00 00 00 00 
31aa0     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
31aa4     00 00 00 08 | 	long	(128 {__system___tx})<<20
31aa8     00 00 10 08 | 	long	(129 {__system___rx})<<20
31aac     00 00 00 00 | 	byte	$00, $00, $00, $00
31ab0     00 00 20 08 | 	long	(130 {__system___rxtxioctl_0579})<<20
31ab4     00 00 30 08 | 	long	(131 {__system____dummy_flush_0580})<<20
31ab8     00 00 00 00 
      ...             
31c28     00 00 00 00 
31c2c     00 00 00 00 | 	byte	$00[376]
31c30     34 1C 03 00 | 	long	@@@__system__dat_ + 1844
31c34     00 00 00 00 
31c38     00 00 00 00 
31c3c     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31c40                 | 	alignl
31c40                 | _fatfs_cc_dat_
31c40     C7 00 FC 00 
31c44     E9 00 E2 00 
31c48     E4 00 E0 00 
31c4c     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
31c50     EA 00 EB 00 
31c54     E8 00 EF 00 
31c58     EE 00 EC 00 
31c5c     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
31c60     C9 00 E6 00 
31c64     C6 00 F4 00 
31c68     F6 00 F2 00 
31c6c     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
31c70     FF 00 D6 00 
31c74     DC 00 F8 00 
31c78     A3 00 D8 00 
31c7c     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
31c80     E1 00 ED 00 
31c84     F3 00 FA 00 
31c88     F1 00 D1 00 
31c8c     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
31c90     BF 00 AE 00 
31c94     AC 00 BD 00 
31c98     BC 00 A1 00 
31c9c     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
31ca0     91 25 92 25 
31ca4     93 25 02 25 
31ca8     24 25 C1 00 
31cac     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
31cb0     A9 00 63 25 
31cb4     51 25 57 25 
31cb8     5D 25 A2 00 
31cbc     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
31cc0     14 25 34 25 
31cc4     2C 25 1C 25 
31cc8     00 25 3C 25 
31ccc     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
31cd0     5A 25 54 25 
31cd4     69 25 66 25 
31cd8     60 25 50 25 
31cdc     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
31ce0     F0 00 D0 00 
31ce4     CA 00 CB 00 
31ce8     C8 00 31 01 
31cec     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
31cf0     CF 00 18 25 
31cf4     0C 25 88 25 
31cf8     84 25 A6 00 
31cfc     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
31d00     D3 00 DF 00 
31d04     D4 00 D2 00 
31d08     F5 00 D5 00 
31d0c     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
31d10     DE 00 DA 00 
31d14     DB 00 D9 00 
31d18     FD 00 DD 00 
31d1c     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
31d20     AD 00 B1 00 
31d24     17 20 BE 00 
31d28     B6 00 A7 00 
31d2c     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
31d30     B0 00 A8 00 
31d34     B7 00 B9 00 
31d38     B3 00 B2 00 
31d3c     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
31d40     61 00 1A 03 
31d44     E0 00 17 03 
31d48     F8 00 07 03 
31d4c     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
31d50     78 01 00 01 
31d54     30 01 32 01 
31d58     06 01 39 01 
31d5c     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
31d60     2E 01 79 01 
31d64     06 01 80 01 
31d68     4D 00 43 02 
31d6c     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
31d70     82 01 84 01 
31d74     84 01 86 01 
31d78     87 01 87 01 
31d7c     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
31d80     8B 01 8B 01 
31d84     8D 01 8E 01 
31d88     8F 01 90 01 
31d8c     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
31d90     93 01 94 01 
31d94     F6 01 96 01 
31d98     97 01 98 01 
31d9c     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
31da0     9B 01 9C 01 
31da4     9D 01 20 02 
31da8     9F 01 A0 01 
31dac     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
31db0     A2 01 A4 01 
31db4     A4 01 A6 01 
31db8     A7 01 A7 01 
31dbc     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
31dc0     AB 01 AC 01 
31dc4     AC 01 AE 01 
31dc8     AF 01 AF 01 
31dcc     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
31dd0     B3 01 B3 01 
31dd4     B5 01 B5 01 
31dd8     B7 01 B8 01 
31ddc     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
31de0     BB 01 BC 01 
31de4     BC 01 BE 01 
31de8     F7 01 C0 01 
31dec     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
31df0     C3 01 C4 01 
31df4     C5 01 C4 01 
31df8     C7 01 C8 01 
31dfc     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
31e00     CB 01 CA 01 
31e04     CD 01 10 01 
31e08     DD 01 01 00 
31e0c     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
31e10     12 01 F3 01 
31e14     03 00 F1 01 
31e18     F4 01 F4 01 
31e1c     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
31e20     22 02 12 01 
31e24     3A 02 09 00 
31e28     65 2C 3B 02 
31e2c     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
31e30     66 2C 3F 02 
31e34     40 02 41 02 
31e38     41 02 46 02 
31e3c     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
31e40     40 00 81 01 
31e44     86 01 55 02 
31e48     89 01 8A 01 
31e4c     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
31e50     5A 02 90 01 
31e54     5C 02 5D 02 
31e58     5E 02 5F 02 
31e5c     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
31e60     62 02 94 01 
31e64     64 02 65 02 
31e68     66 02 67 02 
31e6c     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
31e70     6A 02 62 2C 
31e74     6C 02 6D 02 
31e78     6E 02 9C 01 
31e7c     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
31e80     9D 01 73 02 
31e84     74 02 9F 01 
31e88     76 02 77 02 
31e8c     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
31e90     7A 02 7B 02 
31e94     7C 02 64 2C 
31e98     7E 02 7F 02 
31e9c     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
31ea0     82 02 A9 01 
31ea4     84 02 85 02 
31ea8     86 02 87 02 
31eac     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
31eb0     B1 01 B2 01 
31eb4     45 02 8D 02 
31eb8     8E 02 8F 02 
31ebc     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
31ec0     B7 01 7B 03 
31ec4     03 00 FD 03 
31ec8     FE 03 FF 03 
31ecc     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
31ed0     86 03 88 03 
31ed4     89 03 8A 03 
31ed8     B1 03 11 03 
31edc     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
31ee0     A3 03 A3 03 
31ee4     C4 03 08 03 
31ee8     CC 03 03 00 
31eec     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
31ef0     8F 03 D8 03 
31ef4     18 01 F2 03 
31ef8     0A 00 F9 03 
31efc     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
31f00     F5 03 F6 03 
31f04     F7 03 F7 03 
31f08     F9 03 FA 03 
31f0c     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
31f10     20 03 50 04 
31f14     10 07 60 04 
31f18     22 01 8A 04 
31f1c     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
31f20     0E 01 CF 04 
31f24     01 00 C0 04 
31f28     D0 04 44 01 
31f2c     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
31f30     00 00 7D 1D 
31f34     01 00 63 2C 
31f38     00 1E 96 01 
31f3c     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
31f40     00 1F 08 06 
31f44     10 1F 06 06 
31f48     20 1F 08 06 
31f4c     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
31f50     40 1F 06 06 
31f54     51 1F 07 00 
31f58     59 1F 52 1F 
31f5c     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
31f60     5D 1F 56 1F 
31f64     5F 1F 60 1F 
31f68     08 06 70 1F 
31f6c     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
31f70     BB 1F C8 1F 
31f74     C9 1F CA 1F 
31f78     CB 1F DA 1F 
31f7c     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
31f80     F9 1F EA 1F 
31f84     EB 1F FA 1F 
31f88     FB 1F 80 1F 
31f8c     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
31f90     08 06 A0 1F 
31f94     08 06 B0 1F 
31f98     04 00 B8 1F 
31f9c     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
31fa0     BC 1F CC 1F 
31fa4     01 00 C3 1F 
31fa8     D0 1F 02 06 
31fac     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
31fb0     E5 1F 01 00 
31fb4     EC 1F F3 1F 
31fb8     01 00 FC 1F 
31fbc     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
31fc0     32 21 70 21 
31fc4     10 02 84 21 
31fc8     01 00 83 21 
31fcc     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
31fd0     30 2C 2F 04 
31fd4     60 2C 02 01 
31fd8     67 2C 06 01 
31fdc     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
31fe0     80 2C 64 01 
31fe4     00 2D 26 08 
31fe8     41 FF 1A 03 
31fec     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
31ff0     05 07 09 0E 
31ff4     10 12 14 16 
31ff8     18 1C 1E 43 
31ffc     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
32000     41 41 43 45 
32004     45 45 49 49 
32008     49 41 41 45 
3200c     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
32010     4F 55 55 59 
32014     4F 55 4F 9C 
32018     4F 9E 9F 41 
3201c     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
32020     A5 A6 A7 A8 
32024     A9 AA AB AC 
32028     AD AE AF B0 
3202c     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
32030     41 41 41 B8 
32034     B9 BA BB BC 
32038     BD BE BF C0 
3203c     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
32040     C5 41 41 C8 
32044     C9 CA CB CC 
32048     CD CE CF D1 
3204c     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
32050     49 49 49 49 
32054     D9 DA DB DC 
32058     DD 49 DF 4F 
3205c     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
32060     4F E6 E8 E8 
32064     55 55 55 59 
32068     59 EE EF F0 
3206c     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
32070     F5 F6 F7 F8 
32074     F9 FA FB FC 
32078     FD FE FF 00 
3207c     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
32080     00 00 00 00 | 	byte	$00, $00, $00, $00
32084     00 00 F0 06 | 	long	(111 {_fatfs_cc_v_close})<<20
32088     00 00 00 07 | 	long	(112 {_fatfs_cc_v_read})<<20
3208c     00 00 10 07 | 	long	(113 {_fatfs_cc_v_write})<<20
32090     00 00 20 07 | 	long	(114 {_fatfs_cc_v_lseek})<<20
32094     00 00 30 07 | 	long	(115 {_fatfs_cc_v_ioctl})<<20
32098     00 00 40 08 | 	long	(132 {_fatfs_cc_v_flush})<<20
3209c     00 00 00 00 
320a0     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
320a4     00 00 40 07 | 	long	(116 {_fatfs_cc_v_open})<<20
320a8     00 00 50 07 | 	long	(117 {_fatfs_cc_v_creat})<<20
320ac     00 00 60 07 | 	long	(118 {_fatfs_cc_v_opendir})<<20
320b0     00 00 70 07 | 	long	(119 {_fatfs_cc_v_closedir})<<20
320b4     00 00 80 07 | 	long	(120 {_fatfs_cc_v_readdir})<<20
320b8     00 00 90 07 | 	long	(121 {_fatfs_cc_v_stat})<<20
320bc     00 00 A0 07 | 	long	(122 {_fatfs_cc_v_mkdir})<<20
320c0     00 00 B0 07 | 	long	(123 {_fatfs_cc_v_rmdir})<<20
320c4     00 00 C0 07 | 	long	(124 {_fatfs_cc_v_remove})<<20
320c8     00 00 D0 07 | 	long	(125 {_fatfs_cc_v_rename})<<20
320cc     00 00 E0 07 | 	long	(126 {_fatfs_cc_v_init})<<20
320d0     00 00 F0 07 | 	long	(127 {_fatfs_cc_v_deinit})<<20
320d4     FF FF FF FF 
320d8     1F 00 00 00 
320dc     1C 00 00 00 
320e0     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
320e4     1E 00 00 00 
320e8     1F 00 00 00 
320ec     1E 00 00 00 
320f0     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
320f4     1F 00 00 00 
320f8     1E 00 00 00 
320fc     1F 00 00 00 
32100     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
32104     1F 00 00 00 
32108     00 00 00 00 
3210c     1F 00 00 00 
32110     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
32114     5A 00 00 00 
32118     78 00 00 00 
3211c     97 00 00 00 
32120     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
32124     D4 00 00 00 
32128     F3 00 00 00 
3212c     11 01 00 00 
32130     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
32134     4E 01 00 00 
32138     6D 01 00 00 
3213c     FF FF FF FF 
32140     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
32144     00 00 00 00 
      ...             
3215c     00 00 00 00 
32160     00 00 00 00 | 	byte	$00[32]
32164     82 21 03 00 | 	long	@@@_fatfs_cc_dat_ + 1346
32168     86 21 03 00 | 	long	@@@_fatfs_cc_dat_ + 1350
3216c     00 00 00 00 
32170     00 00 00 00 
32174     00 00 00 00 
32178     00 00 00 00 
3217c     00 00       | 	byte	$00[18]
3217e     3F 3F 3F 00 
32182     55 43 54 00 
32186     55 43 54 00 
3218a     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
3218e     00 00 00 00 
32192     00 00 00    | 	byte	$00[7]
32195     CA 9A 3B 00 
32199     00 00 00 01 
3219d     01 01 01 01 
321a1     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
321a5     91 11 11 11 
321a9     11 01 01 01 
321ad     01 01 01 01 
321b1     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
321b5     01 01 01 01 
321b9     01 01 01    | 	byte	$01[7]
321bc     90 20 20 20 
321c0     20 20 20 20 
321c4     20 20 20 20 
321c8     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
321cc     42 42 42 42 
321d0     42 42 42 42 
321d4     42 42       | 	byte	$42[10]
321d6     20 20 20 20 
321da     20 20 20    | 	byte	$20[7]
321dd     44 44 44 44 
321e1     44 44       | 	byte	$44[6]
321e3     04 04 04 04 
321e7     04 04 04 04 
321eb     04 04 04 04 
321ef     04 04 04 04 
321f3     04 04 04 04 | 	byte	$04[20]
321f7     20 20 20 20 
321fb     20 20       | 	byte	$20[6]
321fd     48 48 48 48 
32201     48 48       | 	byte	$48[6]
32203     08 08 08 08 
32207     08 08 08 08 
3220b     08 08 08 08 
3220f     08 08 08 08 
32213     08 08 08 08 | 	byte	$08[20]
32217     20 20 20 20 
3221b     01 00 00 00 
3221f     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
32220                 | __methodtable__
32220     90 47 01 00 | 	long	@_do_no_command
32224     90 D7 00 00 | 	long	@_do_plus
32228     7C DC 00 00 | 	long	@_do_minus
3222c     44 E1 00 00 | 	long	@_do_or
32230     5C E2 00 00 | 	long	@_do_mul
32234     E8 E7 00 00 | 	long	@_do_fdiv
32238     2C E0 00 00 | 	long	@_do_and
3223c     C8 E5 00 00 | 	long	@_do_div
32240     B0 E9 00 00 | 	long	@_do_mod
32244     D0 EB 00 00 | 	long	@_do_shl
32248     E8 EC 00 00 | 	long	@_do_shr
3224c     00 EE 00 00 | 	long	@_do_power
32250     D8 D1 00 00 | 	long	@_do_getvar
32254     5C 9A 00 00 | 	long	@_do_push
32258     8C CA 00 00 | 	long	@_do_assign
3225c     70 24 01 00 | 	long	@_do_cls
32260     88 C4 00 00 | 	long	@_do_new
32264     14 25 01 00 | 	long	@_do_plot
32268     E4 25 01 00 | 	long	@_do_draw
3226c     58 2F 01 00 | 	long	@_do_print
32270     50 28 01 00 | 	long	@_do_circle
32274     D8 26 01 00 | 	long	@_do_fcircle
32278     C8 29 01 00 | 	long	@_do_box
3227c     70 2D 01 00 | 	long	@_do_frame
32280     DC 24 01 00 | 	long	@_do_color
32284     60 7A 00 00 | 	long	@_do_for
32288     8C 7C 00 00 | 	long	@_do_next
3228c     EC C1 00 00 | 	long	@_do_list
32290     AC AA 00 00 | 	long	@_do_run
32294     48 C9 00 00 | 	long	@_do_error
32298     44 C6 00 00 | 	long	@_do_fast_goto
3229c     34 C7 00 00 | 	long	@_do_find_goto
322a0     44 C9 00 00 | 	long	@_do_slow_goto
322a4     C8 0C 01 00 | 	long	@_do_converttoint
322a8     A0 A0 00 00 | 	long	@_test_csave
322ac     F4 A3 00 00 | 	long	@_do_save
322b0     E0 A6 00 00 | 	long	@_do_load
322b4     24 39 01 00 | 	long	@_do_pinwrite
322b8     C4 3D 01 00 | 	long	@_do_waitms
322bc     00 3F 01 00 | 	long	@_do_waitvbl
322c0     00 42 01 00 | 	long	@_do_if
322c4     E4 42 01 00 | 	long	@_do_else
322c8     AC 43 01 00 | 	long	@_do_nothing
322cc     C8 EF 00 00 | 	long	@_do_eq
322d0     40 FE 00 00 | 	long	@_do_ge
322d4     18 03 01 00 | 	long	@_do_le
322d8     A0 F4 00 00 | 	long	@_do_gt
322dc     78 F9 00 00 | 	long	@_do_lt
322e0     F0 07 01 00 | 	long	@_do_ne
322e4     A4 0F 01 00 | 	long	@_do_rnd
322e8     B0 43 01 00 | 	long	@_do_brun
322ec     7C 46 01 00 | 	long	@_do_beep
322f0     30 3F 01 00 | 	long	@_do_dir
322f4     20 34 01 00 | 	long	@_do_paper
322f8     A8 34 01 00 | 	long	@_do_ink
322fc     44 35 01 00 | 	long	@_do_font
32300     C0 35 01 00 | 	long	@_do_mode
32304     E8 45 01 00 | 	long	@_do_mouse
32308     08 24 01 00 | 	long	@_do_gettime
3230c     1C 46 01 00 | 	long	@_do_cursor
32310     50 46 01 00 | 	long	@_do_click
32314     94 21 01 00 | 	long	@_do_mousex
32318     D8 21 01 00 | 	long	@_do_mousey
3231c     60 22 01 00 | 	long	@_do_mousek
32320     1C 22 01 00 | 	long	@_do_mousew
32324     6C 11 01 00 | 	long	@_do_sin
32328     C0 18 01 00 | 	long	@_do_stick
3232c     44 1A 01 00 | 	long	@_do_strig
32330     A8 20 01 00 | 	long	@_do_sprite
32334     18 1D 01 00 | 	long	@_do_defsprite
32338     C8 1B 01 00 | 	long	@_do_getpixel
3233c     0C 3F 01 00 | 	long	@_do_waitclock
32340     9C 47 01 00 | 	long	@_do_negative
32344     A4 22 01 00 | 	long	@_do_rdpin
32348     10 23 01 00 | 	long	@_do_rqpin
3234c     84 23 01 00 | 	long	@_do_pinread
32350     BC 3B 01 00 | 	long	@_do_wrpin
32354     3C 3C 01 00 | 	long	@_do_wxpin
32358     BC 3C 01 00 | 	long	@_do_wypin
3235c     AC 39 01 00 | 	long	@_do_pinfloat
32360     EC 39 01 00 | 	long	@_do_pinlo
32364     2C 3A 01 00 | 	long	@_do_pinhi
32368     AC 3A 01 00 | 	long	@_do_pinstart
3236c     6C 3A 01 00 | 	long	@_do_pintoggle
32370     3C 3D 01 00 | 	long	@_do_position
32374     78 12 01 00 | 	long	@_do_cos
32378     98 13 01 00 | 	long	@_do_tan
3237c     BC 16 01 00 | 	long	@_do_atn
32380     A4 14 01 00 | 	long	@_do_asin
32384     B0 15 01 00 | 	long	@_do_acos
32388     D0 17 01 00 | 	long	@_do_sqr
3238c     B0 2B 01 00 | 	long	@_do_fill
32390     68 B8 00 00 | 	long	@_do_defsnd
32394     D0 AD 00 00 | 	long	@_do_defenv
32398     08 43 01 00 | 	long	@_do_rad
3239c     30 43 01 00 | 	long	@_do_deg
323a0     58 43 01 00 | 	long	@_do_int
323a4     34 7B 01 00 | 	long	@_hg010b_spin2_putchar
323a8     B0 81 02 00 | 	long	@__struct___bas_wrap_sender_tx
323ac     F4 81 02 00 | 	long	@__struct___bas_wrap_sender_rx
323b0     3C 82 02 00 | 	long	@__struct___bas_wrap_sender_close
323b4     E0 80 02 00 | 	long	@__struct__s_vfs_file_t_putchar
323b8     50 81 02 00 | 	long	@__struct__s_vfs_file_t_getchar
323bc     98 80 02 00 | 	long	@___strs_cl_pfunc
323c0     08 E0 01 00 | 	long	@__system____root_opendir
323c4     A4 E0 01 00 | 	long	@__system____root_closedir
323c8     20 E0 01 00 | 	long	@__system____root_readdir
323cc     AC E0 01 00 | 	long	@__system____root_stat
323d0     34 D9 01 00 | 	long	@__system____default_putc
323d4     B8 D8 01 00 | 	long	@__system____default_getc
323d8     DC D9 01 00 | 	long	@__system____default_flush
323dc     B0 6B 02 00 | 	long	@_fatfs_cc_v_close
323e0     CC 6F 02 00 | 	long	@_fatfs_cc_v_read
323e4     E0 70 02 00 | 	long	@_fatfs_cc_v_write
323e8     C0 71 02 00 | 	long	@_fatfs_cc_v_lseek
323ec     48 72 02 00 | 	long	@_fatfs_cc_v_ioctl
323f0     9C 72 02 00 | 	long	@_fatfs_cc_v_open
323f4     14 6B 02 00 | 	long	@_fatfs_cc_v_creat
323f8     F4 6B 02 00 | 	long	@_fatfs_cc_v_opendir
323fc     68 6C 02 00 | 	long	@_fatfs_cc_v_closedir
32400     A8 6C 02 00 | 	long	@_fatfs_cc_v_readdir
32404     DC 6D 02 00 | 	long	@_fatfs_cc_v_stat
32408     5C 72 02 00 | 	long	@_fatfs_cc_v_mkdir
3240c     7C 72 02 00 | 	long	@_fatfs_cc_v_rmdir
32410     6C 72 02 00 | 	long	@_fatfs_cc_v_remove
32414     8C 72 02 00 | 	long	@_fatfs_cc_v_rename
32418     AC 73 02 00 | 	long	@_fatfs_cc_v_init
3241c     B4 73 02 00 | 	long	@_fatfs_cc_v_deinit
32420     70 8E 01 00 | 	long	@__system___tx
32424     B0 8E 01 00 | 	long	@__system___rx
32428     18 EC 01 00 | 	long	@__system___rxtxioctl_0579
3242c     70 EC 01 00 | 	long	@__system____dummy_flush_0580
32430     7C 73 02 00 | 	long	@_fatfs_cc_v_flush
32434                 | __heap_base
32434     00 00 00 00 
      ...             
61234     00 00 00 00 
61238     00 00 00 00 | 	long	0[48002]
6123c                 | objmem
6123c     00 00 00 00 
      ...             
70814     00 00 00 00 
70818     00 00 00 00 | 	long	0[15736]
7081c                 | stackspace
7081c     00 00 00 00 | 	long	0[1]
70820 100             | 	org	COG_BSS_START
70820 100             | _var01
70820 100             | 	res	1
70820 101             | _var02
70820 101             | 	res	1
70820 102             | _var03
70820 102             | 	res	1
70820 103             | _var04
70820 103             | 	res	1
70820 104             | _var05
70820 104             | 	res	1
70820 105             | _var06
70820 105             | 	res	1
70820 106             | _var07
70820 106             | 	res	1
70820 107             | _var08
70820 107             | 	res	1
70820 108             | _var09
70820 108             | 	res	1
70820 109             | arg01
70820 109             | 	res	1
70820 10a             | arg02
70820 10a             | 	res	1
70820 10b             | arg03
70820 10b             | 	res	1
70820 10c             | arg04
70820 10c             | 	res	1
70820 10d             | arg05
70820 10d             | 	res	1
70820 10e             | arg06
70820 10e             | 	res	1
70820 10f             | local01
70820 10f             | 	res	1
70820 110             | local02
70820 110             | 	res	1
70820 111             | local03
70820 111             | 	res	1
70820 112             | local04
70820 112             | 	res	1
70820 113             | local05
70820 113             | 	res	1
70820 114             | local06
70820 114             | 	res	1
70820 115             | local07
70820 115             | 	res	1
70820 116             | local08
70820 116             | 	res	1
70820 117             | local09
70820 117             | 	res	1
70820 118             | local10
70820 118             | 	res	1
70820 119             | local11
70820 119             | 	res	1
70820 11a             | local12
70820 11a             | 	res	1
70820 11b             | local13
70820 11b             | 	res	1
70820 11c             | local14
70820 11c             | 	res	1
70820 11d             | local15
70820 11d             | 	res	1
70820 11e             | local16
70820 11e             | 	res	1
70820 11f             | local17
70820 11f             | 	res	1
70820 120             | local18
70820 120             | 	res	1
70820 121             | local19
70820 121             | 	res	1
70820 122             | local20
70820 122             | 	res	1
70820 123             | local21
70820 123             | 	res	1
70820 124             | local22
70820 124             | 	res	1
70820 125             | local23
70820 125             | 	res	1
70820 126             | local24
70820 126             | 	res	1
70820 127             | local25
70820 127             | 	res	1
70820 128             | local26
70820 128             | 	res	1
70820 129             | local27
70820 129             | 	res	1
70820 12a             | local28
70820 12a             | 	res	1
70820 12b             | local29
70820 12b             | 	res	1
70820 12c             | local30
70820 12c             | 	res	1
70820 12d             | local31
70820 12d             | 	res	1
70820 12e             | local32
70820 12e             | 	res	1
70820 12f             | local33
70820 12f             | 	res	1
70820 130             | local34
70820 130             | 	res	1
70820 131             | muldiva_
70820 131             | 	res	1
70820 132             | muldivb_
70820 132             | 	res	1
70820 133             | 	fit	480
70820 133             | 
