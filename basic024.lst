00000                 | 
00000                 | #line 1 "D:/Programowanie/P2-Retromachine-Basic/basic024.p2asm"
00000                 | con
00000                 | 	_clkfreq = 337000000
00000                 | 	_clkmode = 21844219
00000                 | 	HEAPSIZE = 192000
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	ver = 24
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getivar = 17
00000                 | 	fun_getuvar = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1023
00000                 | 	maxstack = 512
00000                 | 	maxfor = 128
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 337000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $14d50fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 A8 A6 80 FF 
00420 007 00 F0 65 FD | 	hubset	##21844216
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a A8 A6 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##21844219
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 1B 0B 8A FF 
00440 00f 14 80 6C FC | 	wrlong	##337000000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 F0 52 A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 1F 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 1F 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 31 63 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 30 61 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 31 61 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 62 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 60 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 30 61 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 31 63 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec A4 19 03 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed 9C 17 03 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 AC 07 06 00 | 	long	@objmem
007d0 0f3             | ptr__Audio093b_8_sc_spin2_dat__
007d0 0f3 9C 06 03 00 | 	long	@_Audio093b_8_sc_spin2_dat_
007d4 0f4             | ptr___system__dat__
007d4 0f4 7C 0A 03 00 | 	long	@__system__dat_
007d8 0f5             | ptr__dat__
007d8 0f5 D8 83 02 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 BC 11 03 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 10 A5 02 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 04 08 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 C0 CC 02 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa 78 CA 02 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb 50 DC 02 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc 7C FC 06 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' 
00804                 | ' 
00804                 | ' '----------------------------------- this is the end of the main loop ------------------------------------------------------------------
00804                 | ' 
00804                 | ' sub housekeeper
00804                 | _housekeeper
00804                 | ' 
00804                 | ' do
00804                 | LR__0001
00804                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
00804     45 E4 05 F1 | 	add	objptr, #69
00808                 | LR__0002
00808     F2 12 02 FB | 	rdlong	arg01, objptr
0080c     01 12 0E F2 | 	cmp	arg01, #1 wz
00810     F4 FF 9F 5D |  if_ne	jmp	#LR__0002
00814     7A 00 00 FF 
00818     03 E4 05 F1 | 	add	objptr, ##62467
0081c     F2 12 02 FB | 	rdlong	arg01, objptr
00820     01 12 06 F1 | 	add	arg01, #1
00824     F2 12 62 FC | 	wrlong	arg01, objptr
00828     7A 00 00 FF 
0082c     48 E4 85 F1 | 	sub	objptr, ##62536
00830     80 00 B0 FD | 	call	#_gethdi
00834     05 12 06 F6 | 	mov	arg01, #5
00838     14 80 B1 FD | 	call	#__system___waitms
0083c     7A 00 00 FF 
00840     48 E4 05 F1 | 	add	objptr, ##62536
00844     F2 12 02 FB | 	rdlong	arg01, objptr
00848     01 12 06 F1 | 	add	arg01, #1
0084c     F2 12 62 FC | 	wrlong	arg01, objptr
00850     7A 00 00 FF 
00854     48 E4 85 F1 | 	sub	objptr, ##62536
00858     58 00 B0 FD | 	call	#_gethdi
0085c     05 12 06 F6 | 	mov	arg01, #5
00860     EC 7F B1 FD | 	call	#__system___waitms
00864     7A 00 00 FF 
00868     48 E4 05 F1 | 	add	objptr, ##62536
0086c     F2 12 02 FB | 	rdlong	arg01, objptr
00870     01 12 06 F1 | 	add	arg01, #1
00874     F2 12 62 FC | 	wrlong	arg01, objptr
00878     7A 00 00 FF 
0087c     48 E4 85 F1 | 	sub	objptr, ##62536
00880     30 00 B0 FD | 	call	#_gethdi
00884     05 12 06 F6 | 	mov	arg01, #5
00888     C4 7F B1 FD | 	call	#__system___waitms
0088c     7A 00 00 FF 
00890     48 E4 05 F1 | 	add	objptr, ##62536
00894     F2 12 02 FB | 	rdlong	arg01, objptr
00898     01 12 06 F1 | 	add	arg01, #1
0089c     F2 12 62 FC | 	wrlong	arg01, objptr
008a0     7A 00 00 FF 
008a4     48 E4 85 F1 | 	sub	objptr, ##62536
008a8     08 00 B0 FD | 	call	#_gethdi
008ac     54 FF 9F FD | 	jmp	#LR__0001
008b0                 | _housekeeper_ret
008b0     2D 00 64 FD | 	ret
008b4                 | 
008b4                 | ' 
008b4                 | ' 
008b4                 | ' sub gethdi
008b4                 | _gethdi
008b4     03 4A 05 F6 | 	mov	COUNT_, #3
008b8     A8 00 A0 FD | 	call	#pushregs_
008bc                 | '   x := mouse_xacc
008bc     14 00 00 FF 
008c0     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
008c4     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
008c8                 | '   y := mouse_yacc
008c8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008cc     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
008d0     79 00 00 FF 
008d4     C0 E5 05 F1 | 	add	objptr, ##62400
008d8     F2 14 62 FC | 	wrlong	arg02, objptr
008dc     04 E4 05 F1 | 	add	objptr, #4
008e0     F2 12 62 FC | 	wrlong	arg01, objptr
008e4                 | '   x := 0
008e4                 | '   y := mouse_zacc
008e4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008e8     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
008ec     08 E4 05 F1 | 	add	objptr, #8
008f0     F2 FA 61 FC | 	wrlong	result1, objptr
008f4                 | '   return mouse_bstate&7
008f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008f8     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
008fc     14 00 00 FF 
00900     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
00904     07 FA 05 F5 | 	and	result1, #7
00908     04 E4 85 F1 | 	sub	objptr, #4
0090c     F2 FA 61 FC | 	wrlong	result1, objptr
00910     79 00 00 FF 
00914     C8 E5 85 F1 | 	sub	objptr, ##62408
00918     00 1E 06 F6 | 	mov	local01, #0
0091c                 | ' 
0091c                 | '   mousex,mousey=kbm.mouse_xy()
0091c                 | '   dummy,mousew=kbm.mouse_scroll()
0091c                 | '   mousek=kbm.mouse_buttons()
0091c                 | '   
0091c                 | '   i=0:
0091c                 | '   for j=0 to 6
0091c     00 20 06 F6 | 	mov	local02, #0
00920                 | LR__0010
00920                 | '     if kbm.hidpad_id(j)>0 then
00920     10 13 02 F6 | 	mov	arg01, local02
00924     D0 75 B1 FD | 	call	#_usbnew_spin2_hidpad_id
00928     01 FA 55 F2 | 	cmps	result1, #1 wc
0092c     8C 00 90 CD |  if_b	jmp	#LR__0011
00930     10 13 02 F6 | 	mov	arg01, local02
00934     00 14 06 F6 | 	mov	arg02, #0
00938     20 76 B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0093c     FD 22 02 F6 | 	mov	local03, result1
00940     10 13 02 F6 | 	mov	arg01, local02
00944     01 14 06 F6 | 	mov	arg02, #1
00948     10 76 B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0094c     60 00 00 FF 
00950     00 22 06 F1 | 	add	local03, ##49152
00954     0F 22 46 F0 | 	shr	local03, #15
00958     01 14 06 F6 | 	mov	arg02, #1
0095c     11 15 02 F1 | 	add	arg02, local03
00960     60 00 00 FF 
00964     00 FA 05 F1 | 	add	result1, ##49152
00968     0F FA 45 F0 | 	shr	result1, #15
0096c     01 12 06 F6 | 	mov	arg01, #1
00970     FD 12 02 F1 | 	add	arg01, result1
00974     0F 23 02 F6 | 	mov	local03, local01
00978     02 22 66 F0 | 	shl	local03, #2
0097c     79 00 00 FF 
00980     D0 E5 05 F1 | 	add	objptr, ##62416
00984     F2 22 02 F1 | 	add	local03, objptr
00988     02 12 66 F0 | 	shl	arg01, #2
0098c     09 15 02 F1 | 	add	arg02, arg01
00990     11 15 62 FC | 	wrlong	arg02, local03
00994     0F 23 02 F6 | 	mov	local03, local01
00998     02 22 66 F0 | 	shl	local03, #2
0099c     1C E4 05 F1 | 	add	objptr, #28
009a0     F2 22 02 F1 | 	add	local03, objptr
009a4     10 13 02 F6 | 	mov	arg01, local02
009a8     79 00 00 FF 
009ac     EC E5 85 F1 | 	sub	objptr, ##62444
009b0     74 75 B1 FD | 	call	#_usbnew_spin2_hidpad_buttons
009b4     11 FB 61 FC | 	wrlong	result1, local03
009b8     01 1E 06 F1 | 	add	local01, #1
009bc                 | LR__0011
009bc     01 20 06 F1 | 	add	local02, #1
009c0     07 20 16 F2 | 	cmp	local02, #7 wc
009c4     58 FF 9F CD |  if_b	jmp	#LR__0010
009c8     97 22 48 FB | 	callpa	#(@LR__0013-@LR__0012)>>2,fcache_load_ptr_
009cc                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
009cc                 | LR__0012
009cc     07 1E 16 F2 | 	cmp	local01, #7 wc
009d0     3C 00 90 3D |  if_ae	jmp	#LR__0014
009d4     0F 23 02 F6 | 	mov	local03, local01
009d8     02 22 66 F0 | 	shl	local03, #2
009dc     79 00 00 FF 
009e0     D0 E5 05 F1 | 	add	objptr, ##62416
009e4     F2 22 02 F1 | 	add	local03, objptr
009e8     11 01 68 FC | 	wrlong	#0, local03
009ec     0F 23 02 F6 | 	mov	local03, local01
009f0     02 22 66 F0 | 	shl	local03, #2
009f4     1C E4 05 F1 | 	add	objptr, #28
009f8     F2 22 02 F1 | 	add	local03, objptr
009fc     11 01 68 FC | 	wrlong	#0, local03
00a00     01 1E 06 F1 | 	add	local01, #1
00a04     79 00 00 FF 
00a08     EC E5 85 F1 | 	sub	objptr, ##62444
00a0c     BC FF 9F FD | 	jmp	#LR__0012
00a10                 | LR__0013
00a10                 | LR__0014
00a10     A7 F0 03 F6 | 	mov	ptra, fp
00a14     B2 00 A0 FD | 	call	#popregs_
00a18                 | _gethdi_ret
00a18     2D 00 64 FD | 	ret
00a1c                 | 
00a1c                 | ' 
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' '----------------------------------- The line interpreter/tokenizer --------------------------------------------------------------------
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' 
00a1c                 | ' sub interpret
00a1c                 | _interpret
00a1c     21 4A 05 F6 | 	mov	COUNT_, #33
00a20     A8 00 A0 FD | 	call	#pushregs_
00a24     01 00 00 FF 
00a28     48 F0 07 F1 | 	add	ptra, ##584
00a2c     55 00 00 FF 
00a30     F0 E5 05 F1 | 	add	objptr, ##44016
00a34     F2 1E 02 FB | 	rdlong	local01, objptr
00a38     04 E4 05 F1 | 	add	objptr, #4
00a3c     F2 1E 62 FC | 	wrlong	local01, objptr
00a40     04 E4 05 F1 | 	add	objptr, #4
00a44     FF FF FF FF 
00a48     F2 FE 6B FC | 	wrlong	##-1, objptr
00a4c     00 20 06 F6 | 	mov	local02, #0
00a50     13 00 00 FF 
00a54     58 E4 05 F1 | 	add	objptr, ##9816
00a58     F2 00 68 FC | 	wrlong	#0, objptr
00a5c     69 00 00 FF 
00a60     50 E4 85 F1 | 	sub	objptr, ##53840
00a64     00 22 06 F6 | 	mov	local03, #0
00a68                 | LR__0020
00a68                 | ' 
00a68                 | ' ' ---------------------------------------------------  Pass 1: Split the line to parts, detect and concatenate strings
00a68                 | ' 
00a68                 | ' fullline$=line$: cont=-1  : linenum=0 : lineptr=0 : err=0
00a68                 | ' 
00a68                 | ' 108 for i=0 to 125: separators(i)=0 :next i
00a68     00 24 06 F6 | 	mov	local04, #0
00a6c     20 4E 05 F1 | 	add	fp, #32
00a70     97 0E 48 FB | 	callpa	#(@LR__0022-@LR__0021)>>2,fcache_load_ptr_
00a74                 | LR__0021
00a74     12 27 02 F6 | 	mov	local05, local04
00a78     02 26 66 F0 | 	shl	local05, #2
00a7c     A7 26 02 F1 | 	add	local05, fp
00a80     13 01 68 FC | 	wrlong	#0, local05
00a84     01 24 06 F1 | 	add	local04, #1
00a88     7E 24 56 F2 | 	cmps	local04, #126 wc
00a8c     E4 FF 9F CD |  if_b	jmp	#LR__0021
00a90                 | LR__0022
00a90     20 4E 85 F1 | 	sub	fp, #32
00a94                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
00a94     00 24 06 F6 | 	mov	local04, #0
00a98     53 00 00 FF 
00a9c     E0 E5 05 F1 | 	add	objptr, ##42976
00aa0     97 20 48 FB | 	callpa	#(@LR__0024-@LR__0023)>>2,fcache_load_ptr_
00aa4                 | LR__0023
00aa4     12 1F 02 F6 | 	mov	local01, local04
00aa8     03 1E 66 F0 | 	shl	local01, #3
00aac     F2 1E 02 F1 | 	add	local01, objptr
00ab0     3C 01 00 FF 
00ab4     12 17 06 F6 | 	mov	arg03, ##@LR__4287
00ab8     0F 17 62 FC | 	wrlong	arg03, local01
00abc     12 1F 02 F6 | 	mov	local01, local04
00ac0     03 1E 66 F0 | 	shl	local01, #3
00ac4     F2 28 02 F6 | 	mov	local06, objptr
00ac8     F2 1E 02 F1 | 	add	local01, objptr
00acc     00 2A 06 F6 | 	mov	local07, #0
00ad0     04 1E 06 F1 | 	add	local01, #4
00ad4     0F 01 68 FC | 	wrlong	#0, local01
00ad8     01 24 06 F1 | 	add	local04, #1
00adc     7E 24 56 F2 | 	cmps	local04, #126 wc
00ae0     C0 FF 9F CD |  if_b	jmp	#LR__0023
00ae4                 | LR__0024
00ae4     02 00 00 FF 
00ae8     10 E4 05 F1 | 	add	objptr, ##1040
00aec     F2 12 02 FB | 	rdlong	arg01, objptr
00af0     55 00 00 FF 
00af4     F0 E5 85 F1 | 	sub	objptr, ##44016
00af8     A0 9E B1 FD | 	call	#__system__RTrim_S
00afc     FD 12 02 F6 | 	mov	arg01, result1
00b00     D8 9D B1 FD | 	call	#__system__LTrim_S
00b04     55 00 00 FF 
00b08     F0 E5 05 F1 | 	add	objptr, ##44016
00b0c     F2 FA 61 FC | 	wrlong	result1, objptr
00b10     3C 01 00 FF 
00b14     13 1F 06 F6 | 	mov	local01, ##@LR__4288
00b18     24 00 00 FF 
00b1c     88 E4 05 F1 | 	add	objptr, ##18568
00b20     F2 1E 62 FC | 	wrlong	local01, objptr
00b24     24 00 00 FF 
00b28     88 E4 85 F1 | 	sub	objptr, ##18568
00b2c     F2 12 02 FB | 	rdlong	arg01, objptr
00b30     55 00 00 FF 
00b34     F0 E5 85 F1 | 	sub	objptr, ##44016
00b38     09 2D 02 F6 | 	mov	local08, arg01
00b3c     97 06 48 FB | 	callpa	#(@LR__0026-@LR__0025)>>2,fcache_load_ptr_
00b40                 | LR__0025
00b40     16 FB C9 FA | 	rdbyte	result1, local08 wz
00b44     01 2C 06 51 |  if_ne	add	local08, #1
00b48     F4 FF 9F 5D |  if_ne	jmp	#LR__0025
00b4c                 | LR__0026
00b4c     09 2D 8A F1 | 	sub	local08, arg01 wz
00b50     7A 00 00 FF 
00b54     7C E4 05 F1 | 	add	objptr, ##62588
00b58     F2 2C 62 FC | 	wrlong	local08, objptr
00b5c                 | ' if l=0 then goto 101
00b5c     7A 00 00 FF 
00b60     7C E4 85 F1 | 	sub	objptr, ##62588
00b64     00 20 90 AD |  if_e	jmp	#LR__0133
00b68     7A 00 00 FF 
00b6c     80 E4 05 F1 | 	add	objptr, ##62592
00b70     F2 00 68 FC | 	wrlong	#0, objptr
00b74                 | ' ' before we split the line, we have to find colons that are inside a string,,,,
00b74                 | ' for i=1 to len(line$)
00b74     01 24 06 F6 | 	mov	local04, #1
00b78     24 00 00 FF 
00b7c     90 E4 85 F1 | 	sub	objptr, ##18576
00b80     F2 12 02 FB | 	rdlong	arg01, objptr
00b84     55 00 00 FF 
00b88     F0 E5 85 F1 | 	sub	objptr, ##44016
00b8c     09 2D 02 F6 | 	mov	local08, arg01
00b90     97 06 48 FB | 	callpa	#(@LR__0028-@LR__0027)>>2,fcache_load_ptr_
00b94                 | LR__0027
00b94     16 FB C9 FA | 	rdbyte	result1, local08 wz
00b98     01 2C 06 51 |  if_ne	add	local08, #1
00b9c     F4 FF 9F 5D |  if_ne	jmp	#LR__0027
00ba0                 | LR__0028
00ba0     09 2D 82 F1 | 	sub	local08, arg01
00ba4     16 2F 02 F6 | 	mov	local09, local08
00ba8     01 2E 06 F1 | 	add	local09, #1
00bac                 | LR__0029
00bac     17 25 52 F2 | 	cmps	local04, local09 wc
00bb0     00 01 90 3D |  if_ae	jmp	#LR__0032
00bb4                 | ' 
00bb4                 | '   if mid$(line$,i,1)="""" andalso d=0 then 
00bb4     55 00 00 FF 
00bb8     F0 E5 05 F1 | 	add	objptr, ##44016
00bbc     F2 12 02 FB | 	rdlong	arg01, objptr
00bc0     55 00 00 FF 
00bc4     F0 E5 85 F1 | 	sub	objptr, ##44016
00bc8     12 15 02 F6 | 	mov	arg02, local04
00bcc     01 16 06 F6 | 	mov	arg03, #1
00bd0     AC 9A B1 FD | 	call	#__system__Mid_S
00bd4     FD 12 02 F6 | 	mov	arg01, result1
00bd8     3C 01 00 FF 
00bdc     14 15 06 F6 | 	mov	arg02, ##@LR__4289
00be0     A0 79 B1 FD | 	call	#__system___string_cmp
00be4     00 FA 0D F2 | 	cmp	result1, #0 wz
00be8     2C 00 90 5D |  if_ne	jmp	#LR__0030
00bec     7A 00 00 FF 
00bf0     80 E4 05 F1 | 	add	objptr, ##62592
00bf4     F2 26 0A FB | 	rdlong	local05, objptr wz
00bf8     7A 00 00 FF 
00bfc     80 E4 85 F1 | 	sub	objptr, ##62592
00c00     7A 00 00 AF 
00c04     80 E4 05 A1 |  if_e	add	objptr, ##62592
00c08     F2 02 68 AC |  if_e	wrlong	#1, objptr
00c0c     7A 00 00 AF 
00c10     80 E4 85 A1 |  if_e	sub	objptr, ##62592
00c14     60 00 90 AD |  if_e	jmp	#LR__0031
00c18                 | LR__0030
00c18     55 00 00 FF 
00c1c     F0 E5 05 F1 | 	add	objptr, ##44016
00c20     F2 12 02 FB | 	rdlong	arg01, objptr
00c24     55 00 00 FF 
00c28     F0 E5 85 F1 | 	sub	objptr, ##44016
00c2c     12 15 02 F6 | 	mov	arg02, local04
00c30     01 16 06 F6 | 	mov	arg03, #1
00c34     48 9A B1 FD | 	call	#__system__Mid_S
00c38     FD 12 02 F6 | 	mov	arg01, result1
00c3c     3C 01 00 FF 
00c40     16 15 06 F6 | 	mov	arg02, ##@LR__4290
00c44     3C 79 B1 FD | 	call	#__system___string_cmp
00c48     00 FA 0D F2 | 	cmp	result1, #0 wz
00c4c     7A 00 00 AF 
00c50     80 E4 05 A1 |  if_e	add	objptr, ##62592
00c54     F2 26 02 AB |  if_e	rdlong	local05, objptr
00c58     7A 00 00 AF 
00c5c     80 E4 85 A1 |  if_e	sub	objptr, ##62592
00c60     01 26 0E A2 |  if_e	cmp	local05, #1 wz
00c64     7A 00 00 AF 
00c68     80 E4 05 A1 |  if_e	add	objptr, ##62592
00c6c     F2 00 68 AC |  if_e	wrlong	#0, objptr
00c70     7A 00 00 AF 
00c74     80 E4 85 A1 |  if_e	sub	objptr, ##62592
00c78                 | LR__0031
00c78     12 1F 02 F6 | 	mov	local01, local04
00c7c     03 1E 66 F0 | 	shl	local01, #3
00c80     53 00 00 FF 
00c84     E0 E5 05 F1 | 	add	objptr, ##42976
00c88     F2 28 02 F6 | 	mov	local06, objptr
00c8c     F2 1E 02 F1 | 	add	local01, objptr
00c90     26 00 00 FF 
00c94     A0 E4 05 F1 | 	add	objptr, ##19616
00c98     F2 2A 02 FB | 	rdlong	local07, objptr
00c9c     7A 00 00 FF 
00ca0     80 E4 85 F1 | 	sub	objptr, ##62592
00ca4     04 1E 06 F1 | 	add	local01, #4
00ca8     0F 2B 62 FC | 	wrlong	local07, local01
00cac     01 24 06 F1 | 	add	local04, #1
00cb0     F8 FE 9F FD | 	jmp	#LR__0029
00cb4                 | LR__0032
00cb4     01 24 06 F6 | 	mov	local04, #1
00cb8                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop
00cb8                 | LR__0033
00cb8     55 00 00 FF 
00cbc     F0 E5 05 F1 | 	add	objptr, ##44016
00cc0     F2 12 02 FB | 	rdlong	arg01, objptr
00cc4     55 00 00 FF 
00cc8     F0 E5 85 F1 | 	sub	objptr, ##44016
00ccc     12 15 02 F6 | 	mov	arg02, local04
00cd0     01 16 06 F6 | 	mov	arg03, #1
00cd4     A8 99 B1 FD | 	call	#__system__Mid_S
00cd8     FD 12 02 F6 | 	mov	arg01, result1
00cdc     3C 01 00 FF 
00ce0     18 31 06 F6 | 	mov	local10, ##@LR__4291
00ce4     18 15 02 F6 | 	mov	arg02, local10
00ce8     98 78 B1 FD | 	call	#__system___string_cmp
00cec     00 FA 0D F2 | 	cmp	result1, #0 wz
00cf0     34 00 90 5D |  if_ne	jmp	#LR__0034
00cf4     12 29 02 F6 | 	mov	local06, local04
00cf8     03 28 66 F0 | 	shl	local06, #3
00cfc     53 00 00 FF 
00d00     E0 E5 05 F1 | 	add	objptr, ##42976
00d04     F2 2A 02 F6 | 	mov	local07, objptr
00d08     F2 28 02 F1 | 	add	local06, objptr
00d0c     04 28 06 F1 | 	add	local06, #4
00d10     14 33 02 FB | 	rdlong	local11, local06
00d14     04 28 86 F1 | 	sub	local06, #4
00d18     19 35 0A F6 | 	mov	local12, local11 wz
00d1c     53 00 00 FF 
00d20     E0 E5 85 F1 | 	sub	objptr, ##42976
00d24     24 00 90 AD |  if_e	jmp	#LR__0035
00d28                 | LR__0034
00d28     7A 00 00 FF 
00d2c     7C E4 05 F1 | 	add	objptr, ##62588
00d30     F2 36 02 FB | 	rdlong	local13, objptr
00d34     7A 00 00 FF 
00d38     7C E4 85 F1 | 	sub	objptr, ##62588
00d3c     1B 39 02 F6 | 	mov	local14, local13
00d40     1C 25 52 F2 | 	cmps	local04, local14 wc
00d44     01 24 06 C1 |  if_b	add	local04, #1
00d48     6C FF 9F CD |  if_b	jmp	#LR__0033
00d4c                 | LR__0035
00d4c                 | ' 
00d4c                 | ' 'let d=instr(1,line$,":"): if d>0 andalso d<len(line$) andalso lparts(d).token=0  then let rest$=trim$(right$(line$,len(line$)-d)):line$=trim$(left$(line$,d-1)) else rest$=""  
00d4c                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 
00d4c     7A 00 00 FF 
00d50     7C E4 05 F1 | 	add	objptr, ##62588
00d54     F2 1E 02 FB | 	rdlong	local01, objptr
00d58     7A 00 00 FF 
00d5c     7C E4 85 F1 | 	sub	objptr, ##62588
00d60     0F 25 52 F2 | 	cmps	local04, local01 wc
00d64     A4 00 90 3D |  if_ae	jmp	#LR__0038
00d68     55 00 00 FF 
00d6c     F0 E5 05 F1 | 	add	objptr, ##44016
00d70     F2 2A 02 FB | 	rdlong	local07, objptr
00d74     55 00 00 FF 
00d78     F0 E5 85 F1 | 	sub	objptr, ##44016
00d7c     15 13 02 F6 | 	mov	arg01, local07
00d80     09 2D 02 F6 | 	mov	local08, arg01
00d84     97 06 48 FB | 	callpa	#(@LR__0037-@LR__0036)>>2,fcache_load_ptr_
00d88                 | LR__0036
00d88     16 FB C9 FA | 	rdbyte	result1, local08 wz
00d8c     01 2C 06 51 |  if_ne	add	local08, #1
00d90     F4 FF 9F 5D |  if_ne	jmp	#LR__0036
00d94                 | LR__0037
00d94     09 2D 82 F1 | 	sub	local08, arg01
00d98     16 15 02 F6 | 	mov	arg02, local08
00d9c     12 15 82 F1 | 	sub	arg02, local04
00da0     15 13 02 F6 | 	mov	arg01, local07
00da4     48 98 B1 FD | 	call	#__system__Right_S
00da8     FD 12 02 F6 | 	mov	arg01, result1
00dac     EC 9B B1 FD | 	call	#__system__RTrim_S
00db0     FD 12 02 F6 | 	mov	arg01, result1
00db4     24 9B B1 FD | 	call	#__system__LTrim_S
00db8     7A 00 00 FF 
00dbc     84 E4 05 F1 | 	add	objptr, ##62596
00dc0     F2 FA 61 FC | 	wrlong	result1, objptr
00dc4     24 00 00 FF 
00dc8     94 E4 85 F1 | 	sub	objptr, ##18580
00dcc     F2 12 02 FB | 	rdlong	arg01, objptr
00dd0     55 00 00 FF 
00dd4     F0 E5 85 F1 | 	sub	objptr, ##44016
00dd8     01 24 86 F1 | 	sub	local04, #1
00ddc     12 15 02 F6 | 	mov	arg02, local04
00de0     84 97 B1 FD | 	call	#__system__Left_S
00de4     FD 12 02 F6 | 	mov	arg01, result1
00de8     B0 9B B1 FD | 	call	#__system__RTrim_S
00dec     FD 12 02 F6 | 	mov	arg01, result1
00df0     E8 9A B1 FD | 	call	#__system__LTrim_S
00df4     55 00 00 FF 
00df8     F0 E5 05 F1 | 	add	objptr, ##44016
00dfc     F2 FA 61 FC | 	wrlong	result1, objptr
00e00     55 00 00 FF 
00e04     F0 E5 85 F1 | 	sub	objptr, ##44016
00e08     1C 00 90 FD | 	jmp	#LR__0039
00e0c                 | LR__0038
00e0c     3C 01 00 FF 
00e10     1A 1F 06 F6 | 	mov	local01, ##@LR__4292
00e14     7A 00 00 FF 
00e18     84 E4 05 F1 | 	add	objptr, ##62596
00e1c     F2 1E 62 FC | 	wrlong	local01, objptr
00e20     7A 00 00 FF 
00e24     84 E4 85 F1 | 	sub	objptr, ##62596
00e28                 | LR__0039
00e28                 | ' 'print "line$=";line$
00e28                 | ' 'print "rest$=";rest$
00e28                 | ' 
00e28                 | ' 
00e28                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not last part
00e28     55 00 00 FF 
00e2c     F8 E5 05 F1 | 	add	objptr, ##44024
00e30     F2 1E 02 FB | 	rdlong	local01, objptr
00e34     55 00 00 FF 
00e38     F8 E5 85 F1 | 	sub	objptr, ##44024
00e3c     FF FF 7F FF 
00e40     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00e44     3C 00 90 5D |  if_ne	jmp	#LR__0040
00e48     7A 00 00 FF 
00e4c     84 E4 05 F1 | 	add	objptr, ##62596
00e50     F2 12 02 FB | 	rdlong	arg01, objptr
00e54     7A 00 00 FF 
00e58     84 E4 85 F1 | 	sub	objptr, ##62596
00e5c     3C 01 00 FF 
00e60     1B 15 06 F6 | 	mov	arg02, ##@LR__4293
00e64     1C 77 B1 FD | 	call	#__system___string_cmp
00e68     00 FA 0D F2 | 	cmp	result1, #0 wz
00e6c     55 00 00 5F 
00e70     F8 E5 05 51 |  if_ne	add	objptr, ##44024
00e74     F2 00 68 5C |  if_ne	wrlong	#0, objptr
00e78     55 00 00 5F 
00e7c     F8 E5 85 51 |  if_ne	sub	objptr, ##44024
00e80     08 01 90 5D |  if_ne	jmp	#LR__0044
00e84                 | LR__0040
00e84                 | ' if cont=-1 andalso rest$="" then cont=3 : goto 107		' this is the first AND last part
00e84     55 00 00 FF 
00e88     F8 E5 05 F1 | 	add	objptr, ##44024
00e8c     F2 1E 02 FB | 	rdlong	local01, objptr
00e90     55 00 00 FF 
00e94     F8 E5 85 F1 | 	sub	objptr, ##44024
00e98     FF FF 7F FF 
00e9c     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00ea0     3C 00 90 5D |  if_ne	jmp	#LR__0041
00ea4     7A 00 00 FF 
00ea8     84 E4 05 F1 | 	add	objptr, ##62596
00eac     F2 12 02 FB | 	rdlong	arg01, objptr
00eb0     7A 00 00 FF 
00eb4     84 E4 85 F1 | 	sub	objptr, ##62596
00eb8     3C 01 00 FF 
00ebc     1C 15 06 F6 | 	mov	arg02, ##@LR__4294
00ec0     C0 76 B1 FD | 	call	#__system___string_cmp
00ec4     00 FA 0D F2 | 	cmp	result1, #0 wz
00ec8     55 00 00 AF 
00ecc     F8 E5 05 A1 |  if_e	add	objptr, ##44024
00ed0     F2 06 68 AC |  if_e	wrlong	#3, objptr
00ed4     55 00 00 AF 
00ed8     F8 E5 85 A1 |  if_e	sub	objptr, ##44024
00edc     AC 00 90 AD |  if_e	jmp	#LR__0044
00ee0                 | LR__0041
00ee0                 | ' if cont=4 andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
00ee0     55 00 00 FF 
00ee4     F8 E5 05 F1 | 	add	objptr, ##44024
00ee8     F2 1E 02 FB | 	rdlong	local01, objptr
00eec     55 00 00 FF 
00ef0     F8 E5 85 F1 | 	sub	objptr, ##44024
00ef4     04 1E 0E F2 | 	cmp	local01, #4 wz
00ef8     3C 00 90 5D |  if_ne	jmp	#LR__0042
00efc     7A 00 00 FF 
00f00     84 E4 05 F1 | 	add	objptr, ##62596
00f04     F2 12 02 FB | 	rdlong	arg01, objptr
00f08     7A 00 00 FF 
00f0c     84 E4 85 F1 | 	sub	objptr, ##62596
00f10     3C 01 00 FF 
00f14     1D 15 06 F6 | 	mov	arg02, ##@LR__4295
00f18     68 76 B1 FD | 	call	#__system___string_cmp
00f1c     00 FA 0D F2 | 	cmp	result1, #0 wz
00f20     55 00 00 5F 
00f24     F8 E5 05 51 |  if_ne	add	objptr, ##44024
00f28     F2 02 68 5C |  if_ne	wrlong	#1, objptr
00f2c     55 00 00 5F 
00f30     F8 E5 85 51 |  if_ne	sub	objptr, ##44024
00f34     54 00 90 5D |  if_ne	jmp	#LR__0044
00f38                 | LR__0042
00f38                 | ' if cont=4 andalso rest$="" then cont=2 :goto 107		' this is the last, and not the first, part
00f38     55 00 00 FF 
00f3c     F8 E5 05 F1 | 	add	objptr, ##44024
00f40     F2 1E 02 FB | 	rdlong	local01, objptr
00f44     55 00 00 FF 
00f48     F8 E5 85 F1 | 	sub	objptr, ##44024
00f4c     04 1E 0E F2 | 	cmp	local01, #4 wz
00f50     38 00 90 5D |  if_ne	jmp	#LR__0043
00f54     7A 00 00 FF 
00f58     84 E4 05 F1 | 	add	objptr, ##62596
00f5c     F2 12 02 FB | 	rdlong	arg01, objptr
00f60     7A 00 00 FF 
00f64     84 E4 85 F1 | 	sub	objptr, ##62596
00f68     3C 01 00 FF 
00f6c     1E 15 06 F6 | 	mov	arg02, ##@LR__4296
00f70     10 76 B1 FD | 	call	#__system___string_cmp
00f74     00 FA 0D F2 | 	cmp	result1, #0 wz
00f78     55 00 00 AF 
00f7c     F8 E5 05 A1 |  if_e	add	objptr, ##44024
00f80     F2 04 68 AC |  if_e	wrlong	#2, objptr
00f84     55 00 00 AF 
00f88     F8 E5 85 A1 |  if_e	sub	objptr, ##44024
00f8c                 | LR__0043
00f8c                 | LR__0044
00f8c     20 4E 05 F1 | 	add	fp, #32
00f90     A7 00 68 FC | 	wrlong	#0, fp
00f94     20 4E 85 F1 | 	sub	fp, #32
00f98     00 24 06 F6 | 	mov	local04, #0
00f9c     01 3A 06 F6 | 	mov	local15, #1
00fa0                 | ' 
00fa0                 | ' ' 1b: find separators
00fa0                 | ' 
00fa0                 | ' 107
00fa0                 | ' separators(0)=0
00fa0                 | ' i=0: j=1 : do: i+=1 : let c$=mid$(line$,i,1) 
00fa0                 | LR__0045
00fa0     01 24 06 F1 | 	add	local04, #1
00fa4     55 00 00 FF 
00fa8     F0 E5 05 F1 | 	add	objptr, ##44016
00fac     F2 12 02 FB | 	rdlong	arg01, objptr
00fb0     55 00 00 FF 
00fb4     F0 E5 85 F1 | 	sub	objptr, ##44016
00fb8     12 15 02 F6 | 	mov	arg02, local04
00fbc     01 16 06 F6 | 	mov	arg03, #1
00fc0     BC 96 B1 FD | 	call	#__system__Mid_S
00fc4     7A 00 00 FF 
00fc8     88 E4 05 F1 | 	add	objptr, ##62600
00fcc     F2 FA 61 FC | 	wrlong	result1, objptr
00fd0                 | ' if isseparator(c$) then separators(j)=i: j+=1 
00fd0     FD 12 02 F6 | 	mov	arg01, result1
00fd4     7A 00 00 FF 
00fd8     88 E4 85 F1 | 	sub	objptr, ##62600
00fdc     94 1E B0 FD | 	call	#_isseparator
00fe0     00 FA 0D F2 | 	cmp	result1, #0 wz
00fe4     1C 00 90 AD |  if_e	jmp	#LR__0046
00fe8     1D 27 02 F6 | 	mov	local05, local15
00fec     02 26 66 F0 | 	shl	local05, #2
00ff0     20 4E 05 F1 | 	add	fp, #32
00ff4     A7 26 02 F1 | 	add	local05, fp
00ff8     13 25 62 FC | 	wrlong	local04, local05
00ffc     01 3A 06 F1 | 	add	local15, #1
01000     20 4E 85 F1 | 	sub	fp, #32
01004                 | LR__0046
01004     7A 00 00 FF 
01008     7C E4 05 F1 | 	add	objptr, ##62588
0100c     F2 1E 02 FB | 	rdlong	local01, objptr
01010     7A 00 00 FF 
01014     7C E4 85 F1 | 	sub	objptr, ##62588
01018     0F 25 5A F2 | 	cmps	local04, local01 wcz
0101c     80 FF 9F ED |  if_be	jmp	#LR__0045
01020     1D 27 02 F6 | 	mov	local05, local15
01024     02 26 66 F0 | 	shl	local05, #2
01028     20 4E 05 F1 | 	add	fp, #32
0102c     A7 26 02 F1 | 	add	local05, fp
01030     13 25 62 FC | 	wrlong	local04, local05
01034     00 3C 06 F6 | 	mov	local16, #0
01038                 | ' for i=0 to j-1 
01038     00 24 06 F6 | 	mov	local04, #0
0103c     1D 3F 02 F6 | 	mov	local17, local15
01040     20 4E 85 F1 | 	sub	fp, #32
01044                 | LR__0047
01044     1F 25 52 F2 | 	cmps	local04, local17 wc
01048     88 01 90 3D |  if_ae	jmp	#LR__0051
0104c     12 27 02 F6 | 	mov	local05, local04
01050     02 26 66 F0 | 	shl	local05, #2
01054     20 4E 05 F1 | 	add	fp, #32
01058     A7 26 02 F1 | 	add	local05, fp
0105c     13 29 02 FB | 	rdlong	local06, local05
01060     7A 00 00 FF 
01064     90 E4 05 F1 | 	add	objptr, ##62608
01068     F2 28 62 FC | 	wrlong	local06, objptr
0106c     12 27 02 F6 | 	mov	local05, local04
01070     01 26 06 F1 | 	add	local05, #1
01074     02 26 66 F0 | 	shl	local05, #2
01078     A7 30 02 F6 | 	mov	local10, fp
0107c     A7 26 02 F1 | 	add	local05, fp
01080     13 29 02 FB | 	rdlong	local06, local05
01084     04 E4 05 F1 | 	add	objptr, #4
01088     F2 28 62 FC | 	wrlong	local06, objptr
0108c                 | '   if p1>0 then let p$=mid$(line$,p1,1):  if   p$<>"" then lparts(k).part$=p$ : k+=1 
0108c     04 E4 85 F1 | 	sub	objptr, #4
01090     F2 1E 02 FB | 	rdlong	local01, objptr
01094     7A 00 00 FF 
01098     90 E4 85 F1 | 	sub	objptr, ##62608
0109c     01 1E 56 F2 | 	cmps	local01, #1 wc
010a0     20 4E 85 F1 | 	sub	fp, #32
010a4     84 00 90 CD |  if_b	jmp	#LR__0049
010a8     55 00 00 FF 
010ac     F0 E5 05 F1 | 	add	objptr, ##44016
010b0     F2 12 02 FB | 	rdlong	arg01, objptr
010b4     24 00 00 FF 
010b8     A0 E4 05 F1 | 	add	objptr, ##18592
010bc     F2 14 02 FB | 	rdlong	arg02, objptr
010c0     7A 00 00 FF 
010c4     90 E4 85 F1 | 	sub	objptr, ##62608
010c8     01 16 06 F6 | 	mov	arg03, #1
010cc     B0 95 B1 FD | 	call	#__system__Mid_S
010d0     7A 00 00 FF 
010d4     98 E4 05 F1 | 	add	objptr, ##62616
010d8     F2 FA 61 FC | 	wrlong	result1, objptr
010dc     7A 00 00 FF 
010e0     98 E4 85 F1 | 	sub	objptr, ##62616
010e4     FD 12 02 F6 | 	mov	arg01, result1
010e8     3C 01 00 FF 
010ec     1F 15 06 F6 | 	mov	arg02, ##@LR__4297
010f0     90 74 B1 FD | 	call	#__system___string_cmp
010f4     00 FA 0D F2 | 	cmp	result1, #0 wz
010f8     30 00 90 AD |  if_e	jmp	#LR__0048
010fc     1E 31 02 F6 | 	mov	local10, local16
01100     03 30 66 F0 | 	shl	local10, #3
01104     53 00 00 FF 
01108     E0 E5 05 F1 | 	add	objptr, ##42976
0110c     F2 30 02 F1 | 	add	local10, objptr
01110     26 00 00 FF 
01114     B8 E4 05 F1 | 	add	objptr, ##19640
01118     F2 2A 02 FB | 	rdlong	local07, objptr
0111c     7A 00 00 FF 
01120     98 E4 85 F1 | 	sub	objptr, ##62616
01124     18 2B 62 FC | 	wrlong	local07, local10
01128     01 3C 06 F1 | 	add	local16, #1
0112c                 | LR__0048
0112c                 | LR__0049
0112c     55 00 00 FF 
01130     F0 E5 05 F1 | 	add	objptr, ##44016
01134     F2 12 02 FB | 	rdlong	arg01, objptr
01138     24 00 00 FF 
0113c     A0 E4 05 F1 | 	add	objptr, ##18592
01140     F2 14 02 FB | 	rdlong	arg02, objptr
01144     01 14 06 F1 | 	add	arg02, #1
01148     04 E4 05 F1 | 	add	objptr, #4
0114c     F2 16 02 FB | 	rdlong	arg03, objptr
01150     04 E4 85 F1 | 	sub	objptr, #4
01154     F2 32 02 FB | 	rdlong	local11, objptr
01158     7A 00 00 FF 
0115c     90 E4 85 F1 | 	sub	objptr, ##62608
01160     19 35 02 F6 | 	mov	local12, local11
01164     1A 17 82 F1 | 	sub	arg03, local12
01168     01 16 86 F1 | 	sub	arg03, #1
0116c     10 95 B1 FD | 	call	#__system__Mid_S
01170     7A 00 00 FF 
01174     98 E4 05 F1 | 	add	objptr, ##62616
01178     F2 FA 61 FC | 	wrlong	result1, objptr
0117c     7A 00 00 FF 
01180     98 E4 85 F1 | 	sub	objptr, ##62616
01184     FD 12 02 F6 | 	mov	arg01, result1
01188     3C 01 00 FF 
0118c     20 15 06 F6 | 	mov	arg02, ##@LR__4298
01190     F0 73 B1 FD | 	call	#__system___string_cmp
01194     00 FA 0D F2 | 	cmp	result1, #0 wz
01198     30 00 90 AD |  if_e	jmp	#LR__0050
0119c     1E 31 02 F6 | 	mov	local10, local16
011a0     03 30 66 F0 | 	shl	local10, #3
011a4     53 00 00 FF 
011a8     E0 E5 05 F1 | 	add	objptr, ##42976
011ac     F2 30 02 F1 | 	add	local10, objptr
011b0     26 00 00 FF 
011b4     B8 E4 05 F1 | 	add	objptr, ##19640
011b8     F2 2A 02 FB | 	rdlong	local07, objptr
011bc     7A 00 00 FF 
011c0     98 E4 85 F1 | 	sub	objptr, ##62616
011c4     18 2B 62 FC | 	wrlong	local07, local10
011c8     01 3C 06 F1 | 	add	local16, #1
011cc                 | LR__0050
011cc     01 24 06 F1 | 	add	local04, #1
011d0     70 FE 9F FD | 	jmp	#LR__0047
011d4                 | LR__0051
011d4     00 24 06 F6 | 	mov	local04, #0
011d8                 | ' 
011d8                 | ' ' 1d : find strings
011d8                 | ' 
011d8                 | ' i=0
011d8                 | ' do
011d8                 | LR__0052
011d8                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
011d8     12 29 02 F6 | 	mov	local06, local04
011dc     03 28 66 F0 | 	shl	local06, #3
011e0     53 00 00 FF 
011e4     E0 E5 05 F1 | 	add	objptr, ##42976
011e8     F2 28 02 F1 | 	add	local06, objptr
011ec     14 13 02 FB | 	rdlong	arg01, local06
011f0     3C 01 00 FF 
011f4     21 15 06 F6 | 	mov	arg02, ##@LR__4299
011f8     53 00 00 FF 
011fc     E0 E5 85 F1 | 	sub	objptr, ##42976
01200     80 73 B1 FD | 	call	#__system___string_cmp
01204     00 FA 0D F2 | 	cmp	result1, #0 wz
01208     01 24 06 51 |  if_ne	add	local04, #1
0120c     50 01 90 5D |  if_ne	jmp	#LR__0057
01210     12 41 02 F6 | 	mov	local18, local04
01214                 | LR__0053
01214     12 31 02 F6 | 	mov	local10, local04
01218     01 30 06 F1 | 	add	local10, #1
0121c     03 30 66 F0 | 	shl	local10, #3
01220     53 00 00 FF 
01224     E0 E5 05 F1 | 	add	objptr, ##42976
01228     F2 30 02 F1 | 	add	local10, objptr
0122c     18 33 02 FB | 	rdlong	local11, local10
01230     26 00 00 FF 
01234     B8 E4 05 F1 | 	add	objptr, ##19640
01238     F2 32 62 FC | 	wrlong	local11, objptr
0123c     20 31 02 F6 | 	mov	local10, local18
01240     03 30 66 F0 | 	shl	local10, #3
01244     26 00 00 FF 
01248     B8 E4 85 F1 | 	sub	objptr, ##19640
0124c     F2 30 02 F1 | 	add	local10, objptr
01250     20 39 02 F6 | 	mov	local14, local18
01254     03 38 66 F0 | 	shl	local14, #3
01258     F2 38 02 F1 | 	add	local14, objptr
0125c     1C 13 02 FB | 	rdlong	arg01, local14
01260     53 00 00 FF 
01264     E0 E5 85 F1 | 	sub	objptr, ##42976
01268     19 35 02 F6 | 	mov	local12, local11
0126c     1A 15 02 F6 | 	mov	arg02, local12
01270     44 73 B1 FD | 	call	#__system___string_concat
01274     18 FB 61 FC | 	wrlong	result1, local10
01278     12 3B 02 F6 | 	mov	local15, local04
0127c     01 3A 06 F1 | 	add	local15, #1
01280     1E 43 02 F6 | 	mov	local19, local16
01284     01 42 06 F1 | 	add	local19, #1
01288     97 3C 48 FB | 	callpa	#(@LR__0055-@LR__0054)>>2,fcache_load_ptr_
0128c                 | LR__0054
0128c     21 3B 52 F2 | 	cmps	local15, local19 wc
01290     70 00 90 3D |  if_ae	jmp	#LR__0056
01294     1D 29 02 F6 | 	mov	local06, local15
01298     01 28 06 F1 | 	add	local06, #1
0129c     03 28 66 F0 | 	shl	local06, #3
012a0     53 00 00 FF 
012a4     E0 E5 05 F1 | 	add	objptr, ##42976
012a8     F2 28 02 F1 | 	add	local06, objptr
012ac     14 1F 02 FB | 	rdlong	local01, local06
012b0     1D 2B 02 F6 | 	mov	local07, local15
012b4     01 2A 06 F1 | 	add	local07, #1
012b8     03 2A 66 F0 | 	shl	local07, #3
012bc     F2 2A 02 F1 | 	add	local07, objptr
012c0     04 2A 06 F1 | 	add	local07, #4
012c4     15 27 02 FB | 	rdlong	local05, local07
012c8     1D 2B 02 F6 | 	mov	local07, local15
012cc     03 2A 66 F0 | 	shl	local07, #3
012d0     F2 34 02 F6 | 	mov	local12, objptr
012d4     F2 2A 02 F1 | 	add	local07, objptr
012d8     15 1F 62 FC | 	wrlong	local01, local07
012dc     1D 33 02 F6 | 	mov	local11, local15
012e0     19 37 02 F6 | 	mov	local13, local11
012e4     03 36 66 F0 | 	shl	local13, #3
012e8     F2 36 02 F1 | 	add	local13, objptr
012ec     04 36 06 F1 | 	add	local13, #4
012f0     1B 27 62 FC | 	wrlong	local05, local13
012f4     01 3A 06 F1 | 	add	local15, #1
012f8     53 00 00 FF 
012fc     E0 E5 85 F1 | 	sub	objptr, ##42976
01300     88 FF 9F FD | 	jmp	#LR__0054
01304                 | LR__0055
01304                 | LR__0056
01304     01 3C 86 F1 | 	sub	local16, #1
01308     7A 00 00 FF 
0130c     98 E4 05 F1 | 	add	objptr, ##62616
01310     F2 12 02 FB | 	rdlong	arg01, objptr
01314     7A 00 00 FF 
01318     98 E4 85 F1 | 	sub	objptr, ##62616
0131c     3C 01 00 FF 
01320     23 15 06 F6 | 	mov	arg02, ##@LR__4300
01324     5C 72 B1 FD | 	call	#__system___string_cmp
01328     00 FA 0D F2 | 	cmp	result1, #0 wz
0132c     1E 25 52 52 |  if_ne	cmps	local04, local16 wc
01330     E0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0053
01334                 | '   if p$<>"""" then k+=1:i+=1
01334     7A 00 00 FF 
01338     98 E4 05 F1 | 	add	objptr, ##62616
0133c     F2 12 02 FB | 	rdlong	arg01, objptr
01340     7A 00 00 FF 
01344     98 E4 85 F1 | 	sub	objptr, ##62616
01348     3C 01 00 FF 
0134c     25 15 06 F6 | 	mov	arg02, ##@LR__4301
01350     30 72 B1 FD | 	call	#__system___string_cmp
01354     00 FA 0D F2 | 	cmp	result1, #0 wz
01358     01 3C 06 51 |  if_ne	add	local16, #1
0135c     01 24 06 51 |  if_ne	add	local04, #1
01360                 | LR__0057
01360     1E 25 52 F2 | 	cmps	local04, local16 wc
01364     70 FE 9F CD |  if_b	jmp	#LR__0052
01368     00 24 06 F6 | 	mov	local04, #0
0136c                 | ' 
0136c                 | ' ' 1e : concatenate strings if "" detected between
0136c                 | '  
0136c                 | ' i=0 : do
0136c                 | LR__0058
0136c                 | '  if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
0136c     12 29 02 F6 | 	mov	local06, local04
01370     03 28 66 F0 | 	shl	local06, #3
01374     53 00 00 FF 
01378     E0 E5 05 F1 | 	add	objptr, ##42976
0137c     F2 28 02 F1 | 	add	local06, objptr
01380     14 13 02 FB | 	rdlong	arg01, local06
01384     01 14 06 F6 | 	mov	arg02, #1
01388     53 00 00 FF 
0138c     E0 E5 85 F1 | 	sub	objptr, ##42976
01390     5C 92 B1 FD | 	call	#__system__Right_S
01394     FD 12 02 F6 | 	mov	arg01, result1
01398     3C 01 00 FF 
0139c     27 15 06 F6 | 	mov	arg02, ##@LR__4302
013a0     E0 71 B1 FD | 	call	#__system___string_cmp
013a4     00 FA 0D F2 | 	cmp	result1, #0 wz
013a8     78 01 90 5D |  if_ne	jmp	#LR__0064
013ac     12 2B 02 F6 | 	mov	local07, local04
013b0     01 2A 06 F1 | 	add	local07, #1
013b4     03 2A 66 F0 | 	shl	local07, #3
013b8     53 00 00 FF 
013bc     E0 E5 05 F1 | 	add	objptr, ##42976
013c0     F2 34 02 F6 | 	mov	local12, objptr
013c4     F2 2A 02 F1 | 	add	local07, objptr
013c8     15 13 02 FB | 	rdlong	arg01, local07
013cc     01 14 06 F6 | 	mov	arg02, #1
013d0     53 00 00 FF 
013d4     E0 E5 85 F1 | 	sub	objptr, ##42976
013d8     8C 91 B1 FD | 	call	#__system__Left_S
013dc     FD 12 02 F6 | 	mov	arg01, result1
013e0     3C 01 00 FF 
013e4     29 15 06 F6 | 	mov	arg02, ##@LR__4303
013e8     98 71 B1 FD | 	call	#__system___string_cmp
013ec     00 FA 0D F2 | 	cmp	result1, #0 wz
013f0     30 01 90 5D |  if_ne	jmp	#LR__0064
013f4     12 31 02 F6 | 	mov	local10, local04
013f8     03 30 66 F0 | 	shl	local10, #3
013fc     53 00 00 FF 
01400     E0 E5 05 F1 | 	add	objptr, ##42976
01404     F2 30 02 F1 | 	add	local10, objptr
01408     12 39 02 F6 | 	mov	local14, local04
0140c     03 38 66 F0 | 	shl	local14, #3
01410     F2 38 02 F1 | 	add	local14, objptr
01414     1C 2B 02 FB | 	rdlong	local07, local14
01418     12 37 02 F6 | 	mov	local13, local04
0141c     01 36 06 F1 | 	add	local13, #1
01420     03 36 66 F0 | 	shl	local13, #3
01424     F2 36 02 F1 | 	add	local13, objptr
01428     1B 35 02 FB | 	rdlong	local12, local13
0142c     12 45 02 F6 | 	mov	local20, local04
01430     01 44 06 F1 | 	add	local20, #1
01434     22 47 02 F6 | 	mov	local21, local20
01438     03 46 66 F0 | 	shl	local21, #3
0143c     F2 48 02 F6 | 	mov	local22, objptr
01440     F2 46 02 F1 | 	add	local21, objptr
01444     23 13 02 FB | 	rdlong	arg01, local21
01448     53 00 00 FF 
0144c     E0 E5 85 F1 | 	sub	objptr, ##42976
01450     09 2D 02 F6 | 	mov	local08, arg01
01454     97 06 48 FB | 	callpa	#(@LR__0060-@LR__0059)>>2,fcache_load_ptr_
01458                 | LR__0059
01458     16 FB C9 FA | 	rdbyte	result1, local08 wz
0145c     01 2C 06 51 |  if_ne	add	local08, #1
01460     F4 FF 9F 5D |  if_ne	jmp	#LR__0059
01464                 | LR__0060
01464     09 2D 82 F1 | 	sub	local08, arg01
01468     16 33 02 F6 | 	mov	local11, local08
0146c     01 32 86 F1 | 	sub	local11, #1
01470     1A 13 02 F6 | 	mov	arg01, local12
01474     19 15 02 F6 | 	mov	arg02, local11
01478     74 91 B1 FD | 	call	#__system__Right_S
0147c     FD 34 02 F6 | 	mov	local12, result1
01480     15 13 02 F6 | 	mov	arg01, local07
01484     1A 15 02 F6 | 	mov	arg02, local12
01488     2C 71 B1 FD | 	call	#__system___string_concat
0148c     18 FB 61 FC | 	wrlong	result1, local10
01490                 | '    for j=i+1 to k: lparts(j)=lparts(j+1): next j  
01490     12 3B 02 F6 | 	mov	local15, local04
01494     01 3A 06 F1 | 	add	local15, #1
01498     1E 4B 02 F6 | 	mov	local23, local16
0149c     01 4A 06 F1 | 	add	local23, #1
014a0     97 3C 48 FB | 	callpa	#(@LR__0062-@LR__0061)>>2,fcache_load_ptr_
014a4                 | LR__0061
014a4     25 3B 52 F2 | 	cmps	local15, local23 wc
014a8     70 00 90 3D |  if_ae	jmp	#LR__0063
014ac     1D 29 02 F6 | 	mov	local06, local15
014b0     01 28 06 F1 | 	add	local06, #1
014b4     03 28 66 F0 | 	shl	local06, #3
014b8     53 00 00 FF 
014bc     E0 E5 05 F1 | 	add	objptr, ##42976
014c0     F2 28 02 F1 | 	add	local06, objptr
014c4     14 1F 02 FB | 	rdlong	local01, local06
014c8     1D 2B 02 F6 | 	mov	local07, local15
014cc     01 2A 06 F1 | 	add	local07, #1
014d0     03 2A 66 F0 | 	shl	local07, #3
014d4     F2 2A 02 F1 | 	add	local07, objptr
014d8     04 2A 06 F1 | 	add	local07, #4
014dc     15 27 02 FB | 	rdlong	local05, local07
014e0     1D 2B 02 F6 | 	mov	local07, local15
014e4     03 2A 66 F0 | 	shl	local07, #3
014e8     F2 34 02 F6 | 	mov	local12, objptr
014ec     F2 2A 02 F1 | 	add	local07, objptr
014f0     15 1F 62 FC | 	wrlong	local01, local07
014f4     1D 33 02 F6 | 	mov	local11, local15
014f8     19 37 02 F6 | 	mov	local13, local11
014fc     03 36 66 F0 | 	shl	local13, #3
01500     F2 36 02 F1 | 	add	local13, objptr
01504     04 36 06 F1 | 	add	local13, #4
01508     1B 27 62 FC | 	wrlong	local05, local13
0150c     01 3A 06 F1 | 	add	local15, #1
01510     53 00 00 FF 
01514     E0 E5 85 F1 | 	sub	objptr, ##42976
01518     88 FF 9F FD | 	jmp	#LR__0061
0151c                 | LR__0062
0151c                 | LR__0063
0151c     01 24 86 F1 | 	sub	local04, #1
01520     01 3C 86 F1 | 	sub	local16, #1
01524                 | LR__0064
01524     01 24 06 F1 | 	add	local04, #1
01528     1E 25 52 F2 | 	cmps	local04, local16 wc
0152c     3C FE 9F CD |  if_b	jmp	#LR__0058
01530     00 24 06 F6 | 	mov	local04, #0
01534                 | '  
01534                 | ' ' 1e2: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
01534                 | '  
01534                 | ' i=0 : do
01534                 | LR__0065
01534     12 31 02 F6 | 	mov	local10, local04
01538     03 30 66 F0 | 	shl	local10, #3
0153c     53 00 00 FF 
01540     E0 E5 05 F1 | 	add	objptr, ##42976
01544     F2 30 02 F1 | 	add	local10, objptr
01548     18 2B 02 FB | 	rdlong	local07, local10
0154c     26 00 00 FF 
01550     C0 E4 05 F1 | 	add	objptr, ##19648
01554     F2 2A 62 FC | 	wrlong	local07, objptr
01558     12 31 02 F6 | 	mov	local10, local04
0155c     01 30 06 F1 | 	add	local10, #1
01560     03 30 66 F0 | 	shl	local10, #3
01564     26 00 00 FF 
01568     C0 E4 85 F1 | 	sub	objptr, ##19648
0156c     F2 30 02 F1 | 	add	local10, objptr
01570     18 2B 02 FB | 	rdlong	local07, local10
01574     26 00 00 FF 
01578     C4 E4 05 F1 | 	add	objptr, ##19652
0157c     F2 2A 62 FC | 	wrlong	local07, objptr
01580                 | '   if ((s1$=">" orelse s1$=">" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
01580     04 E4 85 F1 | 	sub	objptr, #4
01584     F2 12 02 FB | 	rdlong	arg01, objptr
01588     7A 00 00 FF 
0158c     A0 E4 85 F1 | 	sub	objptr, ##62624
01590     3C 01 00 FF 
01594     2B 15 06 F6 | 	mov	arg02, ##@LR__4304
01598     E8 6F B1 FD | 	call	#__system___string_cmp
0159c     00 FA 0D F2 | 	cmp	result1, #0 wz
015a0     04 01 90 AD |  if_e	jmp	#LR__0066
015a4     7A 00 00 FF 
015a8     A0 E4 05 F1 | 	add	objptr, ##62624
015ac     F2 12 02 FB | 	rdlong	arg01, objptr
015b0     7A 00 00 FF 
015b4     A0 E4 85 F1 | 	sub	objptr, ##62624
015b8     3C 01 00 FF 
015bc     2D 15 06 F6 | 	mov	arg02, ##@LR__4305
015c0     C0 6F B1 FD | 	call	#__system___string_cmp
015c4     FD 26 0A F6 | 	mov	local05, result1 wz
015c8     DC 00 90 AD |  if_e	jmp	#LR__0066
015cc     7A 00 00 FF 
015d0     A0 E4 05 F1 | 	add	objptr, ##62624
015d4     F2 12 02 FB | 	rdlong	arg01, objptr
015d8     7A 00 00 FF 
015dc     A0 E4 85 F1 | 	sub	objptr, ##62624
015e0     3C 01 00 FF 
015e4     2F 15 06 F6 | 	mov	arg02, ##@LR__4306
015e8     98 6F B1 FD | 	call	#__system___string_cmp
015ec     00 FA 0D F2 | 	cmp	result1, #0 wz
015f0     B4 00 90 AD |  if_e	jmp	#LR__0066
015f4     7A 00 00 FF 
015f8     A0 E4 05 F1 | 	add	objptr, ##62624
015fc     F2 12 02 FB | 	rdlong	arg01, objptr
01600     7A 00 00 FF 
01604     A0 E4 85 F1 | 	sub	objptr, ##62624
01608     3C 01 00 FF 
0160c     31 35 06 F6 | 	mov	local12, ##@LR__4307
01610     1A 15 02 F6 | 	mov	arg02, local12
01614     6C 6F B1 FD | 	call	#__system___string_cmp
01618     00 FA 0D F2 | 	cmp	result1, #0 wz
0161c     88 00 90 AD |  if_e	jmp	#LR__0066
01620     7A 00 00 FF 
01624     A0 E4 05 F1 | 	add	objptr, ##62624
01628     F2 12 02 FB | 	rdlong	arg01, objptr
0162c     7A 00 00 FF 
01630     A0 E4 85 F1 | 	sub	objptr, ##62624
01634     3C 01 00 FF 
01638     33 33 06 F6 | 	mov	local11, ##@LR__4308
0163c     19 35 02 F6 | 	mov	local12, local11
01640     1A 15 02 F6 | 	mov	arg02, local12
01644     3C 6F B1 FD | 	call	#__system___string_cmp
01648     00 FA 0D F2 | 	cmp	result1, #0 wz
0164c     58 00 90 AD |  if_e	jmp	#LR__0066
01650     7A 00 00 FF 
01654     A0 E4 05 F1 | 	add	objptr, ##62624
01658     F2 12 02 FB | 	rdlong	arg01, objptr
0165c     7A 00 00 FF 
01660     A0 E4 85 F1 | 	sub	objptr, ##62624
01664     3C 01 00 FF 
01668     35 33 06 F6 | 	mov	local11, ##@LR__4309
0166c     19 15 02 F6 | 	mov	arg02, local11
01670     10 6F B1 FD | 	call	#__system___string_cmp
01674     FD 34 0A F6 | 	mov	local12, result1 wz
01678     2C 00 90 AD |  if_e	jmp	#LR__0066
0167c     7A 00 00 FF 
01680     A0 E4 05 F1 | 	add	objptr, ##62624
01684     F2 12 02 FB | 	rdlong	arg01, objptr
01688     7A 00 00 FF 
0168c     A0 E4 85 F1 | 	sub	objptr, ##62624
01690     3C 01 00 FF 
01694     37 39 06 F6 | 	mov	local14, ##@LR__4310
01698     1C 15 02 F6 | 	mov	arg02, local14
0169c     E4 6E B1 FD | 	call	#__system___string_cmp
016a0     FD 32 0A F6 | 	mov	local11, result1 wz
016a4     30 00 90 5D |  if_ne	jmp	#LR__0067
016a8                 | LR__0066
016a8     7A 00 00 FF 
016ac     A4 E4 05 F1 | 	add	objptr, ##62628
016b0     F2 12 02 FB | 	rdlong	arg01, objptr
016b4     7A 00 00 FF 
016b8     A4 E4 85 F1 | 	sub	objptr, ##62628
016bc     3C 01 00 FF 
016c0     39 4D 06 F6 | 	mov	local24, ##@LR__4311
016c4     26 37 02 F6 | 	mov	local13, local24
016c8     1B 15 02 F6 | 	mov	arg02, local13
016cc     B4 6E B1 FD | 	call	#__system___string_cmp
016d0     FD 38 0A F6 | 	mov	local14, result1 wz
016d4     18 01 90 AD |  if_e	jmp	#LR__0070
016d8                 | LR__0067
016d8     7A 00 00 FF 
016dc     A0 E4 05 F1 | 	add	objptr, ##62624
016e0     F2 12 02 FB | 	rdlong	arg01, objptr
016e4     7A 00 00 FF 
016e8     A0 E4 85 F1 | 	sub	objptr, ##62624
016ec     3C 01 00 FF 
016f0     3B 4D 06 F6 | 	mov	local24, ##@LR__4312
016f4     26 15 02 F6 | 	mov	arg02, local24
016f8     88 6E B1 FD | 	call	#__system___string_cmp
016fc     FD 36 0A F6 | 	mov	local13, result1 wz
01700     30 00 90 5D |  if_ne	jmp	#LR__0068
01704     7A 00 00 FF 
01708     A4 E4 05 F1 | 	add	objptr, ##62628
0170c     F2 12 02 FB | 	rdlong	arg01, objptr
01710     7A 00 00 FF 
01714     A4 E4 85 F1 | 	sub	objptr, ##62628
01718     3C 01 00 FF 
0171c     3D 47 06 F6 | 	mov	local21, ##@LR__4313
01720     23 45 02 F6 | 	mov	local20, local21
01724     22 15 02 F6 | 	mov	arg02, local20
01728     58 6E B1 FD | 	call	#__system___string_cmp
0172c     FD 4C 0A F6 | 	mov	local24, result1 wz
01730     BC 00 90 AD |  if_e	jmp	#LR__0070
01734                 | LR__0068
01734     7A 00 00 FF 
01738     A0 E4 05 F1 | 	add	objptr, ##62624
0173c     F2 12 02 FB | 	rdlong	arg01, objptr
01740     7A 00 00 FF 
01744     A0 E4 85 F1 | 	sub	objptr, ##62624
01748     3C 01 00 FF 
0174c     3F 47 06 F6 | 	mov	local21, ##@LR__4314
01750     23 15 02 F6 | 	mov	arg02, local21
01754     2C 6E B1 FD | 	call	#__system___string_cmp
01758     FD 44 0A F6 | 	mov	local20, result1 wz
0175c     30 00 90 5D |  if_ne	jmp	#LR__0069
01760     7A 00 00 FF 
01764     A4 E4 05 F1 | 	add	objptr, ##62628
01768     F2 12 02 FB | 	rdlong	arg01, objptr
0176c     7A 00 00 FF 
01770     A4 E4 85 F1 | 	sub	objptr, ##62628
01774     3C 01 00 FF 
01778     41 4F 06 F6 | 	mov	local25, ##@LR__4315
0177c     27 49 02 F6 | 	mov	local22, local25
01780     24 15 02 F6 | 	mov	arg02, local22
01784     FC 6D B1 FD | 	call	#__system___string_cmp
01788     FD 46 0A F6 | 	mov	local21, result1 wz
0178c     60 00 90 AD |  if_e	jmp	#LR__0070
01790                 | LR__0069
01790     7A 00 00 FF 
01794     A0 E4 05 F1 | 	add	objptr, ##62624
01798     F2 12 02 FB | 	rdlong	arg01, objptr
0179c     7A 00 00 FF 
017a0     A0 E4 85 F1 | 	sub	objptr, ##62624
017a4     3C 01 00 FF 
017a8     43 51 06 F6 | 	mov	local26, ##@LR__4316
017ac     28 4F 02 F6 | 	mov	local25, local26
017b0     27 15 02 F6 | 	mov	arg02, local25
017b4     CC 6D B1 FD | 	call	#__system___string_cmp
017b8     FD 48 0A F6 | 	mov	local22, result1 wz
017bc     10 01 90 5D |  if_ne	jmp	#LR__0074
017c0     7A 00 00 FF 
017c4     A4 E4 05 F1 | 	add	objptr, ##62628
017c8     F2 12 02 FB | 	rdlong	arg01, objptr
017cc     7A 00 00 FF 
017d0     A4 E4 85 F1 | 	sub	objptr, ##62628
017d4     3C 01 00 FF 
017d8     45 53 06 F6 | 	mov	local27, ##@LR__4317
017dc     29 51 02 F6 | 	mov	local26, local27
017e0     28 15 02 F6 | 	mov	arg02, local26
017e4     9C 6D B1 FD | 	call	#__system___string_cmp
017e8     FD 4E 0A F6 | 	mov	local25, result1 wz
017ec     E0 00 90 5D |  if_ne	jmp	#LR__0074
017f0                 | LR__0070
017f0     12 31 02 F6 | 	mov	local10, local04
017f4     03 30 66 F0 | 	shl	local10, #3
017f8     53 00 00 FF 
017fc     E0 E5 05 F1 | 	add	objptr, ##42976
01800     F2 30 02 F1 | 	add	local10, objptr
01804     26 00 00 FF 
01808     C0 E4 05 F1 | 	add	objptr, ##19648
0180c     F2 12 02 FB | 	rdlong	arg01, objptr
01810     04 E4 05 F1 | 	add	objptr, #4
01814     F2 32 02 FB | 	rdlong	local11, objptr
01818     7A 00 00 FF 
0181c     A4 E4 85 F1 | 	sub	objptr, ##62628
01820     19 35 02 F6 | 	mov	local12, local11
01824     1A 15 02 F6 | 	mov	arg02, local12
01828     8C 6D B1 FD | 	call	#__system___string_concat
0182c     18 FB 61 FC | 	wrlong	result1, local10
01830                 | '     lparts(i).part$=s1$+s2$
01830                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
01830     12 3B 02 F6 | 	mov	local15, local04
01834     01 3A 06 F1 | 	add	local15, #1
01838     1E 55 02 F6 | 	mov	local28, local16
0183c     01 54 06 F1 | 	add	local28, #1
01840     97 42 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
01844                 | LR__0071
01844     2A 3B 52 F2 | 	cmps	local15, local28 wc
01848     7C 00 90 3D |  if_ae	jmp	#LR__0073
0184c     1D 29 02 F6 | 	mov	local06, local15
01850     01 28 06 F1 | 	add	local06, #1
01854     03 28 66 F0 | 	shl	local06, #3
01858     53 00 00 FF 
0185c     E0 E5 05 F1 | 	add	objptr, ##42976
01860     F2 28 02 F1 | 	add	local06, objptr
01864     14 1F 02 FB | 	rdlong	local01, local06
01868     1D 2B 02 F6 | 	mov	local07, local15
0186c     01 2A 06 F1 | 	add	local07, #1
01870     03 2A 66 F0 | 	shl	local07, #3
01874     F2 2A 02 F1 | 	add	local07, objptr
01878     04 2A 06 F1 | 	add	local07, #4
0187c     15 27 02 FB | 	rdlong	local05, local07
01880     1D 2B 02 F6 | 	mov	local07, local15
01884     03 2A 66 F0 | 	shl	local07, #3
01888     F2 34 02 F6 | 	mov	local12, objptr
0188c     F2 2A 02 F1 | 	add	local07, objptr
01890     15 1F 62 FC | 	wrlong	local01, local07
01894     1D 33 02 F6 | 	mov	local11, local15
01898     19 39 02 F6 | 	mov	local14, local11
0189c     1C 37 02 F6 | 	mov	local13, local14
018a0     03 36 66 F0 | 	shl	local13, #3
018a4     F2 4C 02 F6 | 	mov	local24, objptr
018a8     F2 36 02 F1 | 	add	local13, objptr
018ac     04 36 06 F1 | 	add	local13, #4
018b0     1B 27 62 FC | 	wrlong	local05, local13
018b4     04 36 86 F1 | 	sub	local13, #4
018b8     01 3A 06 F1 | 	add	local15, #1
018bc     53 00 00 FF 
018c0     E0 E5 85 F1 | 	sub	objptr, ##42976
018c4     7C FF 9F FD | 	jmp	#LR__0071
018c8                 | LR__0072
018c8                 | LR__0073
018c8     01 24 86 F1 | 	sub	local04, #1
018cc     01 3C 86 F1 | 	sub	local16, #1
018d0                 | LR__0074
018d0     01 24 06 F1 | 	add	local04, #1
018d4     1E 25 52 F2 | 	cmps	local04, local16 wc
018d8     58 FC 9F CD |  if_b	jmp	#LR__0065
018dc                 | '  
018dc                 | ' ' 1f : now remove parts that are spaces
018dc                 | ' 
018dc                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
018dc     00 24 06 F6 | 	mov	local04, #0
018e0     1E 57 02 F6 | 	mov	local29, local16
018e4     01 56 06 F1 | 	add	local29, #1
018e8                 | LR__0075
018e8     2B 25 52 F2 | 	cmps	local04, local29 wc
018ec     50 00 90 3D |  if_ae	jmp	#LR__0076
018f0     12 31 02 F6 | 	mov	local10, local04
018f4     03 30 66 F0 | 	shl	local10, #3
018f8     53 00 00 FF 
018fc     E0 E5 05 F1 | 	add	objptr, ##42976
01900     F2 30 02 F1 | 	add	local10, objptr
01904     12 35 02 F6 | 	mov	local12, local04
01908     1A 33 02 F6 | 	mov	local11, local12
0190c     19 39 02 F6 | 	mov	local14, local11
01910     03 38 66 F0 | 	shl	local14, #3
01914     F2 36 02 F6 | 	mov	local13, objptr
01918     F2 38 02 F1 | 	add	local14, objptr
0191c     1C 13 02 FB | 	rdlong	arg01, local14
01920     53 00 00 FF 
01924     E0 E5 85 F1 | 	sub	objptr, ##42976
01928     70 90 B1 FD | 	call	#__system__RTrim_S
0192c     FD 12 02 F6 | 	mov	arg01, result1
01930     A8 8F B1 FD | 	call	#__system__LTrim_S
01934     18 FB 61 FC | 	wrlong	result1, local10
01938     01 24 06 F1 | 	add	local04, #1
0193c     A8 FF 9F FD | 	jmp	#LR__0075
01940                 | LR__0076
01940     00 24 06 F6 | 	mov	local04, #0
01944     97 8A 48 FB | 	callpa	#(@LR__0083-@LR__0077)>>2,fcache_load_ptr_
01948                 | ' 
01948                 | ' i=0
01948                 | ' do 
01948                 | LR__0077
01948                 | '   if len(lparts(i).part$)=0 then 
01948     12 29 02 F6 | 	mov	local06, local04
0194c     03 28 66 F0 | 	shl	local06, #3
01950     53 00 00 FF 
01954     E0 E5 05 F1 | 	add	objptr, ##42976
01958     F2 2A 02 F6 | 	mov	local07, objptr
0195c     F2 28 02 F1 | 	add	local06, objptr
01960     14 13 02 FB | 	rdlong	arg01, local06
01964     53 00 00 FF 
01968     E0 E5 85 F1 | 	sub	objptr, ##42976
0196c     09 2D 02 F6 | 	mov	local08, arg01
01970                 | LR__0078
01970     16 FB C9 FA | 	rdbyte	result1, local08 wz
01974     01 2C 06 51 |  if_ne	add	local08, #1
01978     F4 FF 9F 5D |  if_ne	jmp	#LR__0078
0197c     09 2D 8A F1 | 	sub	local08, arg01 wz
01980     C4 00 90 5D |  if_ne	jmp	#LR__0082
01984                 | '     if i=k-1 then k-=1  :  exit
01984     1E 1F 02 F6 | 	mov	local01, local16
01988     01 1E 86 F1 | 	sub	local01, #1
0198c     0F 25 0A F2 | 	cmp	local04, local01 wz
01990     01 3C 86 A1 |  if_e	sub	local16, #1
01994     C4 00 90 AD |  if_e	jmp	#LR__0084
01998                 | '     if i<k-1 then 
01998     1E 1F 02 F6 | 	mov	local01, local16
0199c     01 1E 86 F1 | 	sub	local01, #1
019a0     0F 25 52 F2 | 	cmps	local04, local01 wc
019a4     A0 00 90 3D |  if_ae	jmp	#LR__0081
019a8                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
019a8     12 3B 02 F6 | 	mov	local15, local04
019ac     1E 59 02 F6 | 	mov	local30, local16
019b0     01 58 86 F1 | 	sub	local30, #1
019b4                 | LR__0079
019b4     2C 3B 52 F2 | 	cmps	local15, local30 wc
019b8     80 00 90 3D |  if_ae	jmp	#LR__0080
019bc     1D 29 02 F6 | 	mov	local06, local15
019c0     01 28 06 F1 | 	add	local06, #1
019c4     03 28 66 F0 | 	shl	local06, #3
019c8     53 00 00 FF 
019cc     E0 E5 05 F1 | 	add	objptr, ##42976
019d0     F2 28 02 F1 | 	add	local06, objptr
019d4     14 1F 02 FB | 	rdlong	local01, local06
019d8     1D 2B 02 F6 | 	mov	local07, local15
019dc     01 2A 06 F1 | 	add	local07, #1
019e0     03 2A 66 F0 | 	shl	local07, #3
019e4     F2 2A 02 F1 | 	add	local07, objptr
019e8     04 2A 06 F1 | 	add	local07, #4
019ec     15 27 02 FB | 	rdlong	local05, local07
019f0     1D 31 02 F6 | 	mov	local10, local15
019f4     18 2B 02 F6 | 	mov	local07, local10
019f8     03 2A 66 F0 | 	shl	local07, #3
019fc     F2 34 02 F6 | 	mov	local12, objptr
01a00     F2 2A 02 F1 | 	add	local07, objptr
01a04     15 1F 62 FC | 	wrlong	local01, local07
01a08     1D 33 02 F6 | 	mov	local11, local15
01a0c     19 39 02 F6 | 	mov	local14, local11
01a10     1C 37 02 F6 | 	mov	local13, local14
01a14     03 36 66 F0 | 	shl	local13, #3
01a18     F2 4C 02 F6 | 	mov	local24, objptr
01a1c     F2 36 02 F1 | 	add	local13, objptr
01a20     04 36 06 F1 | 	add	local13, #4
01a24     1B 27 62 FC | 	wrlong	local05, local13
01a28     04 36 86 F1 | 	sub	local13, #4
01a2c     01 3A 06 F1 | 	add	local15, #1
01a30     53 00 00 FF 
01a34     E0 E5 85 F1 | 	sub	objptr, ##42976
01a38     78 FF 9F FD | 	jmp	#LR__0079
01a3c                 | LR__0080
01a3c     01 3C 86 F1 | 	sub	local16, #1
01a40                 | '       if i>0 then i-=1 
01a40     01 24 56 F2 | 	cmps	local04, #1 wc
01a44     01 24 86 31 |  if_ae	sub	local04, #1
01a48                 | LR__0081
01a48                 | LR__0082
01a48     01 24 06 F1 | 	add	local04, #1
01a4c     1E 1F 02 F6 | 	mov	local01, local16
01a50     01 1E 86 F1 | 	sub	local01, #1
01a54     0F 25 5A F2 | 	cmps	local04, local01 wcz
01a58     EC FE 9F ED |  if_be	jmp	#LR__0077
01a5c                 | LR__0083
01a5c                 | LR__0084
01a5c                 | ' 
01a5c                 | ' ' 1g: lowercase all that is not a string
01a5c                 | ' 
01a5c                 | ' for j=0 to k-1
01a5c     00 3A 06 F6 | 	mov	local15, #0
01a60     1E 5B 02 F6 | 	mov	local31, local16
01a64                 | LR__0085
01a64     2D 3B 52 F2 | 	cmps	local15, local31 wc
01a68     D0 00 90 3D |  if_ae	jmp	#LR__0088
01a6c                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
01a6c     1D 29 02 F6 | 	mov	local06, local15
01a70     03 28 66 F0 | 	shl	local06, #3
01a74     53 00 00 FF 
01a78     E0 E5 05 F1 | 	add	objptr, ##42976
01a7c     F2 2A 02 F6 | 	mov	local07, objptr
01a80     F2 28 02 F1 | 	add	local06, objptr
01a84     14 13 02 FB | 	rdlong	arg01, local06
01a88     01 14 06 F6 | 	mov	arg02, #1
01a8c     53 00 00 FF 
01a90     E0 E5 85 F1 | 	sub	objptr, ##42976
01a94     D0 8A B1 FD | 	call	#__system__Left_S
01a98     FD 12 02 F6 | 	mov	arg01, result1
01a9c     3C 01 00 FF 
01aa0     47 15 06 F6 | 	mov	arg02, ##@LR__4318
01aa4     DC 6A B1 FD | 	call	#__system___string_cmp
01aa8     00 FA 0D F2 | 	cmp	result1, #0 wz
01aac     44 00 90 5D |  if_ne	jmp	#LR__0086
01ab0     1D 2B 02 F6 | 	mov	local07, local15
01ab4     03 2A 66 F0 | 	shl	local07, #3
01ab8     53 00 00 FF 
01abc     E0 E5 05 F1 | 	add	objptr, ##42976
01ac0     F2 34 02 F6 | 	mov	local12, objptr
01ac4     F2 2A 02 F1 | 	add	local07, objptr
01ac8     15 13 02 FB | 	rdlong	arg01, local07
01acc     01 14 06 F6 | 	mov	arg02, #1
01ad0     53 00 00 FF 
01ad4     E0 E5 85 F1 | 	sub	objptr, ##42976
01ad8     14 8B B1 FD | 	call	#__system__Right_S
01adc     FD 12 02 F6 | 	mov	arg01, result1
01ae0     3C 01 00 FF 
01ae4     49 15 06 F6 | 	mov	arg02, ##@LR__4319
01ae8     98 6A B1 FD | 	call	#__system___string_cmp
01aec     00 FA 0D F2 | 	cmp	result1, #0 wz
01af0     40 00 90 AD |  if_e	jmp	#LR__0087
01af4                 | LR__0086
01af4     1D 31 02 F6 | 	mov	local10, local15
01af8     03 30 66 F0 | 	shl	local10, #3
01afc     53 00 00 FF 
01b00     E0 E5 05 F1 | 	add	objptr, ##42976
01b04     F2 30 02 F1 | 	add	local10, objptr
01b08     1D 35 02 F6 | 	mov	local12, local15
01b0c     1A 33 02 F6 | 	mov	local11, local12
01b10     19 39 02 F6 | 	mov	local14, local11
01b14     03 38 66 F0 | 	shl	local14, #3
01b18     F2 36 02 F6 | 	mov	local13, objptr
01b1c     F2 38 02 F1 | 	add	local14, objptr
01b20     1C 13 02 FB | 	rdlong	arg01, local14
01b24     53 00 00 FF 
01b28     E0 E5 85 F1 | 	sub	objptr, ##42976
01b2c     EC 8C B1 FD | 	call	#__system__LCase_S
01b30     18 FB 61 FC | 	wrlong	result1, local10
01b34                 | LR__0087
01b34     01 3A 06 F1 | 	add	local15, #1
01b38     28 FF 9F FD | 	jmp	#LR__0085
01b3c                 | LR__0088
01b3c                 | ' 
01b3c                 | ' '                                                         for i=0 to k-1 : print lparts(i).part$,: next i : print
01b3c                 | ' 
01b3c                 | ' for i=0 to k: lparts(i).token=-1: next i
01b3c     00 24 06 F6 | 	mov	local04, #0
01b40     1E 5D 02 F6 | 	mov	local32, local16
01b44     01 5C 06 F1 | 	add	local32, #1
01b48     97 1E 48 FB | 	callpa	#(@LR__0090-@LR__0089)>>2,fcache_load_ptr_
01b4c                 | LR__0089
01b4c     2E 25 52 F2 | 	cmps	local04, local32 wc
01b50     34 00 90 3D |  if_ae	jmp	#LR__0091
01b54     12 31 02 F6 | 	mov	local10, local04
01b58     03 30 66 F0 | 	shl	local10, #3
01b5c     53 00 00 FF 
01b60     E0 E5 05 F1 | 	add	objptr, ##42976
01b64     F2 28 02 F6 | 	mov	local06, objptr
01b68     F2 30 02 F1 | 	add	local10, objptr
01b6c     04 30 06 F1 | 	add	local10, #4
01b70     FF FF FF FF 
01b74     18 FF 6B FC | 	wrlong	##-1, local10
01b78     01 24 06 F1 | 	add	local04, #1
01b7c     53 00 00 FF 
01b80     E0 E5 85 F1 | 	sub	objptr, ##42976
01b84     C4 FF 9F FD | 	jmp	#LR__0089
01b88                 | LR__0090
01b88                 | LR__0091
01b88                 | ' 
01b88                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
01b88                 | ' 
01b88                 | ' if len(lparts(0).part$)=0 then goto 101				' empty line, nothing to do
01b88     53 00 00 FF 
01b8c     E0 E5 05 F1 | 	add	objptr, ##42976
01b90     F2 12 02 FB | 	rdlong	arg01, objptr
01b94     53 00 00 FF 
01b98     E0 E5 85 F1 | 	sub	objptr, ##42976
01b9c     09 2D 02 F6 | 	mov	local08, arg01
01ba0     97 06 48 FB | 	callpa	#(@LR__0093-@LR__0092)>>2,fcache_load_ptr_
01ba4                 | LR__0092
01ba4     16 FB C9 FA | 	rdbyte	result1, local08 wz
01ba8     01 2C 06 51 |  if_ne	add	local08, #1
01bac     F4 FF 9F 5D |  if_ne	jmp	#LR__0092
01bb0                 | LR__0093
01bb0     09 2D 8A F1 | 	sub	local08, arg01 wz
01bb4     B0 0F 90 AD |  if_e	jmp	#LR__0133
01bb8                 | ' 
01bb8                 | ' ' 2a find part types 
01bb8                 | ' 
01bb8                 | ' for i=0 to k-1
01bb8     00 24 06 F6 | 	mov	local04, #0
01bbc     1E 5F 02 F6 | 	mov	local33, local16
01bc0                 | LR__0094
01bc0     2F 25 52 F2 | 	cmps	local04, local33 wc
01bc4     98 05 90 3D |  if_ae	jmp	#LR__0103
01bc8     12 31 02 F6 | 	mov	local10, local04
01bcc     03 30 66 F0 | 	shl	local10, #3
01bd0     53 00 00 FF 
01bd4     E0 E5 05 F1 | 	add	objptr, ##42976
01bd8     F2 30 02 F1 | 	add	local10, objptr
01bdc     12 37 02 F6 | 	mov	local13, local04
01be0     03 36 66 F0 | 	shl	local13, #3
01be4     F2 4C 02 F6 | 	mov	local24, objptr
01be8     F2 36 02 F1 | 	add	local13, objptr
01bec     1B 13 02 FB | 	rdlong	arg01, local13
01bf0     53 00 00 FF 
01bf4     E0 E5 85 F1 | 	sub	objptr, ##42976
01bf8     78 12 B0 FD | 	call	#_isseparator
01bfc     FD FA E1 F8 | 	getbyte	result1, result1, #0
01c00     04 30 06 F1 | 	add	local10, #4
01c04     18 FB 61 FC | 	wrlong	result1, local10
01c08                 | ' lparts(i).token=isseparator(lparts(i).part$): if lparts(i).token>0 then goto 102
01c08     12 31 02 F6 | 	mov	local10, local04
01c0c     03 30 66 F0 | 	shl	local10, #3
01c10     53 00 00 FF 
01c14     E0 E5 05 F1 | 	add	objptr, ##42976
01c18     F2 28 02 F6 | 	mov	local06, objptr
01c1c     F2 30 02 F1 | 	add	local10, objptr
01c20     04 30 06 F1 | 	add	local10, #4
01c24     18 35 02 FB | 	rdlong	local12, local10
01c28     01 34 56 F2 | 	cmps	local12, #1 wc
01c2c     53 00 00 FF 
01c30     E0 E5 85 F1 | 	sub	objptr, ##42976
01c34     20 05 90 3D |  if_ae	jmp	#LR__0102
01c38     12 31 02 F6 | 	mov	local10, local04
01c3c     03 30 66 F0 | 	shl	local10, #3
01c40     53 00 00 FF 
01c44     E0 E5 05 F1 | 	add	objptr, ##42976
01c48     F2 30 02 F1 | 	add	local10, objptr
01c4c     12 37 02 F6 | 	mov	local13, local04
01c50     03 36 66 F0 | 	shl	local13, #3
01c54     F2 4C 02 F6 | 	mov	local24, objptr
01c58     F2 36 02 F1 | 	add	local13, objptr
01c5c     1B 13 02 FB | 	rdlong	arg01, local13
01c60     53 00 00 FF 
01c64     E0 E5 85 F1 | 	sub	objptr, ##42976
01c68     28 0F B0 FD | 	call	#_isoperator
01c6c     FD FA E1 F8 | 	getbyte	result1, result1, #0
01c70     04 30 06 F1 | 	add	local10, #4
01c74     18 FB 61 FC | 	wrlong	result1, local10
01c78                 | ' lparts(i).token=isoperator(lparts(i).part$): if lparts(i).token>0 then goto 102
01c78     12 31 02 F6 | 	mov	local10, local04
01c7c     03 30 66 F0 | 	shl	local10, #3
01c80     53 00 00 FF 
01c84     E0 E5 05 F1 | 	add	objptr, ##42976
01c88     F2 28 02 F6 | 	mov	local06, objptr
01c8c     F2 30 02 F1 | 	add	local10, objptr
01c90     04 30 06 F1 | 	add	local10, #4
01c94     18 35 02 FB | 	rdlong	local12, local10
01c98     01 34 56 F2 | 	cmps	local12, #1 wc
01c9c     53 00 00 FF 
01ca0     E0 E5 85 F1 | 	sub	objptr, ##42976
01ca4     B0 04 90 3D |  if_ae	jmp	#LR__0102
01ca8     12 31 02 F6 | 	mov	local10, local04
01cac     03 30 66 F0 | 	shl	local10, #3
01cb0     53 00 00 FF 
01cb4     E0 E5 05 F1 | 	add	objptr, ##42976
01cb8     F2 30 02 F1 | 	add	local10, objptr
01cbc     12 37 02 F6 | 	mov	local13, local04
01cc0     03 36 66 F0 | 	shl	local13, #3
01cc4     F2 4C 02 F6 | 	mov	local24, objptr
01cc8     F2 36 02 F1 | 	add	local13, objptr
01ccc     1B 13 02 FB | 	rdlong	arg01, local13
01cd0     53 00 00 FF 
01cd4     E0 E5 85 F1 | 	sub	objptr, ##42976
01cd8                 | ' 
01cd8                 | ' select case s
01cd8     3D 01 00 FF 
01cdc     53 14 06 F6 | 	mov	arg02, ##@LR__4391
01ce0     A0 68 B1 FD | 	call	#__system___string_cmp
01ce4     00 FA 0D F2 | 	cmp	result1, #0 wz
01ce8     1B FA 05 A6 |  if_e	mov	result1, #27
01cec     00 FA 05 56 |  if_ne	mov	result1, #0
01cf0     FD FA E1 F8 | 	getbyte	result1, result1, #0
01cf4     04 30 06 F1 | 	add	local10, #4
01cf8     18 FB 61 FC | 	wrlong	result1, local10
01cfc                 | ' lparts(i).token=isassign(lparts(i).part$) : if lparts(i).token>0 then goto 102
01cfc     12 31 02 F6 | 	mov	local10, local04
01d00     03 30 66 F0 | 	shl	local10, #3
01d04     53 00 00 FF 
01d08     E0 E5 05 F1 | 	add	objptr, ##42976
01d0c     F2 28 02 F6 | 	mov	local06, objptr
01d10     F2 30 02 F1 | 	add	local10, objptr
01d14     04 30 06 F1 | 	add	local10, #4
01d18     18 35 02 FB | 	rdlong	local12, local10
01d1c     01 34 56 F2 | 	cmps	local12, #1 wc
01d20     53 00 00 FF 
01d24     E0 E5 85 F1 | 	sub	objptr, ##42976
01d28     2C 04 90 3D |  if_ae	jmp	#LR__0102
01d2c     12 31 02 F6 | 	mov	local10, local04
01d30     03 30 66 F0 | 	shl	local10, #3
01d34     53 00 00 FF 
01d38     E0 E5 05 F1 | 	add	objptr, ##42976
01d3c     F2 30 02 F1 | 	add	local10, objptr
01d40     12 37 02 F6 | 	mov	local13, local04
01d44     03 36 66 F0 | 	shl	local13, #3
01d48     F2 4C 02 F6 | 	mov	local24, objptr
01d4c     F2 36 02 F1 | 	add	local13, objptr
01d50     1B 13 02 FB | 	rdlong	arg01, local13
01d54     53 00 00 FF 
01d58     E0 E5 85 F1 | 	sub	objptr, ##42976
01d5c     14 13 B0 FD | 	call	#_iscommand
01d60     FD FA E1 F8 | 	getbyte	result1, result1, #0
01d64     04 30 06 F1 | 	add	local10, #4
01d68     18 FB 61 FC | 	wrlong	result1, local10
01d6c                 | ' lparts(i).token=iscommand(lparts(i).part$): if lparts(i).token>0 then goto 102
01d6c     12 31 02 F6 | 	mov	local10, local04
01d70     03 30 66 F0 | 	shl	local10, #3
01d74     53 00 00 FF 
01d78     E0 E5 05 F1 | 	add	objptr, ##42976
01d7c     F2 28 02 F6 | 	mov	local06, objptr
01d80     F2 30 02 F1 | 	add	local10, objptr
01d84     04 30 06 F1 | 	add	local10, #4
01d88     18 35 02 FB | 	rdlong	local12, local10
01d8c     01 34 56 F2 | 	cmps	local12, #1 wc
01d90     53 00 00 FF 
01d94     E0 E5 85 F1 | 	sub	objptr, ##42976
01d98     BC 03 90 3D |  if_ae	jmp	#LR__0102
01d9c     12 31 02 F6 | 	mov	local10, local04
01da0     03 30 66 F0 | 	shl	local10, #3
01da4     53 00 00 FF 
01da8     E0 E5 05 F1 | 	add	objptr, ##42976
01dac     F2 30 02 F1 | 	add	local10, objptr
01db0     12 33 02 F6 | 	mov	local11, local04
01db4     19 39 02 F6 | 	mov	local14, local11
01db8     1C 37 02 F6 | 	mov	local13, local14
01dbc     03 36 66 F0 | 	shl	local13, #3
01dc0     F2 4C 02 F6 | 	mov	local24, objptr
01dc4     F2 36 02 F1 | 	add	local13, objptr
01dc8     1B 13 02 FB | 	rdlong	arg01, local13
01dcc     53 00 00 FF 
01dd0     E0 E5 85 F1 | 	sub	objptr, ##42976
01dd4     1C 1C B0 FD | 	call	#_isfunction
01dd8     FD FA E1 F8 | 	getbyte	result1, result1, #0
01ddc     04 30 06 F1 | 	add	local10, #4
01de0     18 FB 61 FC | 	wrlong	result1, local10
01de4                 | ' lparts(i).token=isfunction(lparts(i).part$): if lparts(i).token>0 then goto 102
01de4     12 31 02 F6 | 	mov	local10, local04
01de8     03 30 66 F0 | 	shl	local10, #3
01dec     53 00 00 FF 
01df0     E0 E5 05 F1 | 	add	objptr, ##42976
01df4     F2 28 02 F6 | 	mov	local06, objptr
01df8     F2 30 02 F1 | 	add	local10, objptr
01dfc     04 30 06 F1 | 	add	local10, #4
01e00     18 35 02 FB | 	rdlong	local12, local10
01e04     01 34 56 F2 | 	cmps	local12, #1 wc
01e08     53 00 00 FF 
01e0c     E0 E5 85 F1 | 	sub	objptr, ##42976
01e10     44 03 90 3D |  if_ae	jmp	#LR__0102
01e14     12 29 02 F6 | 	mov	local06, local04
01e18     03 28 66 F0 | 	shl	local06, #3
01e1c     53 00 00 FF 
01e20     E0 E5 05 F1 | 	add	objptr, ##42976
01e24     F2 28 02 F1 | 	add	local06, objptr
01e28     14 13 02 FB | 	rdlong	arg01, local06
01e2c     53 00 00 FF 
01e30     E0 E5 85 F1 | 	sub	objptr, ##42976
01e34     B0 20 B0 FD | 	call	#_isnum
01e38     FD 1E 02 F6 | 	mov	local01, result1
01e3c     7A 00 00 FF 
01e40     A8 E4 05 F1 | 	add	objptr, ##62632
01e44     F2 1E 62 FC | 	wrlong	local01, objptr
01e48     12 29 02 F6 | 	mov	local06, local04
01e4c     03 28 66 F0 | 	shl	local06, #3
01e50     26 00 00 FF 
01e54     C8 E4 85 F1 | 	sub	objptr, ##19656
01e58     F2 28 02 F1 | 	add	local06, objptr
01e5c     14 13 02 FB | 	rdlong	arg01, local06
01e60     53 00 00 FF 
01e64     E0 E5 85 F1 | 	sub	objptr, ##42976
01e68     54 23 B0 FD | 	call	#_isint
01e6c     FD 1E 02 F6 | 	mov	local01, result1
01e70     7A 00 00 FF 
01e74     AC E4 05 F1 | 	add	objptr, ##62636
01e78     F2 1E 62 FC | 	wrlong	local01, objptr
01e7c     12 29 02 F6 | 	mov	local06, local04
01e80     03 28 66 F0 | 	shl	local06, #3
01e84     26 00 00 FF 
01e88     CC E4 85 F1 | 	sub	objptr, ##19660
01e8c     F2 2A 02 F6 | 	mov	local07, objptr
01e90     F2 28 02 F1 | 	add	local06, objptr
01e94     14 13 02 FB | 	rdlong	arg01, local06
01e98     53 00 00 FF 
01e9c     E0 E5 85 F1 | 	sub	objptr, ##42976
01ea0     74 24 B0 FD | 	call	#_isdec
01ea4     7A 00 00 FF 
01ea8     B0 E4 05 F1 | 	add	objptr, ##62640
01eac     F2 FA 61 FC | 	wrlong	result1, objptr
01eb0                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal : goto 102 					' pure decimal for line num
01eb0     08 E4 85 F1 | 	sub	objptr, #8
01eb4     F2 1E 0A FB | 	rdlong	local01, objptr wz
01eb8     7A 00 00 FF 
01ebc     A8 E4 85 F1 | 	sub	objptr, ##62632
01ec0     64 00 90 AD |  if_e	jmp	#LR__0095
01ec4     7A 00 00 FF 
01ec8     AC E4 05 F1 | 	add	objptr, ##62636
01ecc     F2 30 0A FB | 	rdlong	local10, objptr wz
01ed0     7A 00 00 FF 
01ed4     AC E4 85 F1 | 	sub	objptr, ##62636
01ed8     4C 00 90 AD |  if_e	jmp	#LR__0095
01edc     7A 00 00 FF 
01ee0     B0 E4 05 F1 | 	add	objptr, ##62640
01ee4     F2 34 0A FB | 	rdlong	local12, objptr wz
01ee8     7A 00 00 FF 
01eec     B0 E4 85 F1 | 	sub	objptr, ##62640
01ef0     34 00 90 AD |  if_e	jmp	#LR__0095
01ef4     12 27 02 F6 | 	mov	local05, local04
01ef8     13 31 02 F6 | 	mov	local10, local05
01efc     03 30 66 F0 | 	shl	local10, #3
01f00     53 00 00 FF 
01f04     E0 E5 05 F1 | 	add	objptr, ##42976
01f08     F2 28 02 F6 | 	mov	local06, objptr
01f0c     F2 30 02 F1 | 	add	local10, objptr
01f10     04 30 06 F1 | 	add	local10, #4
01f14     01 00 80 FF 
01f18     18 01 68 FC | 	wrlong	##512, local10
01f1c     53 00 00 FF 
01f20     E0 E5 85 F1 | 	sub	objptr, ##42976
01f24     30 02 90 FD | 	jmp	#LR__0102
01f28                 | LR__0095
01f28                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer : goto 102 				' integer
01f28     7A 00 00 FF 
01f2c     A8 E4 05 F1 | 	add	objptr, ##62632
01f30     F2 1E 0A FB | 	rdlong	local01, objptr wz
01f34     7A 00 00 FF 
01f38     A8 E4 85 F1 | 	sub	objptr, ##62632
01f3c     68 00 90 AD |  if_e	jmp	#LR__0096
01f40     7A 00 00 FF 
01f44     AC E4 05 F1 | 	add	objptr, ##62636
01f48     F2 30 0A FB | 	rdlong	local10, objptr wz
01f4c     7A 00 00 FF 
01f50     AC E4 85 F1 | 	sub	objptr, ##62636
01f54     7A 00 00 5F 
01f58     B0 E4 05 51 |  if_ne	add	objptr, ##62640
01f5c     F2 34 02 5B |  if_ne	rdlong	local12, objptr
01f60     7A 00 00 5F 
01f64     B0 E4 85 51 |  if_ne	sub	objptr, ##62640
01f68     1A 2B 22 56 |  if_ne	not	local07, local12
01f6c     00 2A 0E 52 |  if_ne	cmp	local07, #0 wz
01f70     34 00 90 AD |  if_e	jmp	#LR__0096
01f74     12 27 02 F6 | 	mov	local05, local04
01f78     13 31 02 F6 | 	mov	local10, local05
01f7c     03 30 66 F0 | 	shl	local10, #3
01f80     53 00 00 FF 
01f84     E0 E5 05 F1 | 	add	objptr, ##42976
01f88     F2 28 02 F6 | 	mov	local06, objptr
01f8c     F2 30 02 F1 | 	add	local10, objptr
01f90     04 30 06 F1 | 	add	local10, #4
01f94     01 00 80 FF 
01f98     18 03 68 FC | 	wrlong	##513, local10
01f9c     53 00 00 FF 
01fa0     E0 E5 85 F1 | 	sub	objptr, ##42976
01fa4     B0 01 90 FD | 	jmp	#LR__0102
01fa8                 | LR__0096
01fa8                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float :goto 102 				' float
01fa8     7A 00 00 FF 
01fac     A8 E4 05 F1 | 	add	objptr, ##62632
01fb0     F2 1E 0A FB | 	rdlong	local01, objptr wz
01fb4     7A 00 00 FF 
01fb8     A8 E4 85 F1 | 	sub	objptr, ##62632
01fbc     7A 00 00 5F 
01fc0     AC E4 05 51 |  if_ne	add	objptr, ##62636
01fc4     F2 30 02 5B |  if_ne	rdlong	local10, objptr
01fc8     7A 00 00 5F 
01fcc     AC E4 85 51 |  if_ne	sub	objptr, ##62636
01fd0     18 31 22 56 |  if_ne	not	local10, local10
01fd4     00 30 0E 52 |  if_ne	cmp	local10, #0 wz
01fd8     7A 00 00 5F 
01fdc     B0 E4 05 51 |  if_ne	add	objptr, ##62640
01fe0     F2 34 02 5B |  if_ne	rdlong	local12, objptr
01fe4     7A 00 00 5F 
01fe8     B0 E4 85 51 |  if_ne	sub	objptr, ##62640
01fec     1A 2B 22 56 |  if_ne	not	local07, local12
01ff0     00 2A 0E 52 |  if_ne	cmp	local07, #0 wz
01ff4     34 00 90 AD |  if_e	jmp	#LR__0097
01ff8     12 27 02 F6 | 	mov	local05, local04
01ffc     13 31 02 F6 | 	mov	local10, local05
02000     03 30 66 F0 | 	shl	local10, #3
02004     53 00 00 FF 
02008     E0 E5 05 F1 | 	add	objptr, ##42976
0200c     F2 28 02 F6 | 	mov	local06, objptr
02010     F2 30 02 F1 | 	add	local10, objptr
02014     04 30 06 F1 | 	add	local10, #4
02018     01 00 80 FF 
0201c     18 05 68 FC | 	wrlong	##514, local10
02020     53 00 00 FF 
02024     E0 E5 85 F1 | 	sub	objptr, ##42976
02028     2C 01 90 FD | 	jmp	#LR__0102
0202c                 | LR__0097
0202c                 | ' 
0202c                 | ' if isstring(lparts(i).part$) then 
0202c     12 29 02 F6 | 	mov	local06, local04
02030     03 28 66 F0 | 	shl	local06, #3
02034     53 00 00 FF 
02038     E0 E5 05 F1 | 	add	objptr, ##42976
0203c     F2 28 02 F1 | 	add	local06, objptr
02040     14 13 02 FB | 	rdlong	arg01, local06
02044     53 00 00 FF 
02048     E0 E5 85 F1 | 	sub	objptr, ##42976
0204c     88 23 B0 FD | 	call	#_isstring
02050     00 FA 0D F2 | 	cmp	result1, #0 wz
02054     A0 00 90 AD |  if_e	jmp	#LR__0100
02058     12 31 02 F6 | 	mov	local10, local04
0205c     03 30 66 F0 | 	shl	local10, #3
02060     53 00 00 FF 
02064     E0 E5 05 F1 | 	add	objptr, ##42976
02068     F2 30 02 F1 | 	add	local10, objptr
0206c     04 30 06 F1 | 	add	local10, #4
02070     01 00 80 FF 
02074     18 07 68 FC | 	wrlong	##515, local10
02078     12 27 02 F6 | 	mov	local05, local04
0207c     13 31 02 F6 | 	mov	local10, local05
02080     03 30 66 F0 | 	shl	local10, #3
02084     F2 30 02 F1 | 	add	local10, objptr
02088     12 39 02 F6 | 	mov	local14, local04
0208c     03 38 66 F0 | 	shl	local14, #3
02090     F2 38 02 F1 | 	add	local14, objptr
02094     1C 2B 02 FB | 	rdlong	local07, local14
02098     02 34 06 F6 | 	mov	local12, #2
0209c     12 4D 02 F6 | 	mov	local24, local04
020a0     26 45 02 F6 | 	mov	local20, local24
020a4     22 47 02 F6 | 	mov	local21, local20
020a8     03 46 66 F0 | 	shl	local21, #3
020ac     F2 48 02 F6 | 	mov	local22, objptr
020b0     F2 46 02 F1 | 	add	local21, objptr
020b4     23 13 02 FB | 	rdlong	arg01, local21
020b8     53 00 00 FF 
020bc     E0 E5 85 F1 | 	sub	objptr, ##42976
020c0     09 2D 02 F6 | 	mov	local08, arg01
020c4     97 06 48 FB | 	callpa	#(@LR__0099-@LR__0098)>>2,fcache_load_ptr_
020c8                 | LR__0098
020c8     16 FB C9 FA | 	rdbyte	result1, local08 wz
020cc     01 2C 06 51 |  if_ne	add	local08, #1
020d0     F4 FF 9F 5D |  if_ne	jmp	#LR__0098
020d4                 | LR__0099
020d4     09 2D 82 F1 | 	sub	local08, arg01
020d8     16 37 02 F6 | 	mov	local13, local08
020dc     1B 17 02 F6 | 	mov	arg03, local13
020e0     02 16 86 F1 | 	sub	arg03, #2
020e4     15 13 02 F6 | 	mov	arg01, local07
020e8     1A 15 02 F6 | 	mov	arg02, local12
020ec     90 85 B1 FD | 	call	#__system__Mid_S
020f0     18 FB 61 FC | 	wrlong	result1, local10
020f4     60 00 90 FD | 	jmp	#LR__0102
020f8                 | LR__0100
020f8                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
020f8     12 27 02 F6 | 	mov	local05, local04
020fc     13 29 02 F6 | 	mov	local06, local05
02100     03 28 66 F0 | 	shl	local06, #3
02104     53 00 00 FF 
02108     E0 E5 05 F1 | 	add	objptr, ##42976
0210c     F2 28 02 F1 | 	add	local06, objptr
02110     14 13 02 FB | 	rdlong	arg01, local06
02114     53 00 00 FF 
02118     E0 E5 85 F1 | 	sub	objptr, ##42976
0211c     54 1B B0 FD | 	call	#_isname
02120     00 FA 0D F2 | 	cmp	result1, #0 wz
02124     30 00 90 AD |  if_e	jmp	#LR__0101
02128     12 27 02 F6 | 	mov	local05, local04
0212c     13 31 02 F6 | 	mov	local10, local05
02130     03 30 66 F0 | 	shl	local10, #3
02134     53 00 00 FF 
02138     E0 E5 05 F1 | 	add	objptr, ##42976
0213c     F2 28 02 F6 | 	mov	local06, objptr
02140     F2 30 02 F1 | 	add	local10, objptr
02144     04 30 06 F1 | 	add	local10, #4
02148     01 00 80 FF 
0214c     18 09 68 FC | 	wrlong	##516, local10
02150     53 00 00 FF 
02154     E0 E5 85 F1 | 	sub	objptr, ##42976
02158                 | LR__0101
02158                 | LR__0102
02158     01 24 06 F1 | 	add	local04, #1
0215c     60 FA 9F FD | 	jmp	#LR__0094
02160                 | LR__0103
02160     1E 31 02 F6 | 	mov	local10, local16
02164     03 30 66 F0 | 	shl	local10, #3
02168     53 00 00 FF 
0216c     E0 E5 05 F1 | 	add	objptr, ##42976
02170     F2 30 02 F1 | 	add	local10, objptr
02174     04 30 06 F1 | 	add	local10, #4
02178     18 FD 6B FC | 	wrlong	#510, local10
0217c     1E 31 02 F6 | 	mov	local10, local16
02180     03 30 66 F0 | 	shl	local10, #3
02184     F2 30 02 F1 | 	add	local10, objptr
02188     3C 01 00 FF 
0218c     4B 2B 06 F6 | 	mov	local07, ##@LR__4320
02190     18 2B 62 FC | 	wrlong	local07, local10
02194     10 00 00 FF 
02198     54 E4 05 F1 | 	add	objptr, ##8276
0219c     F2 3C 62 FC | 	wrlong	local16, objptr
021a0     10 00 00 FF 
021a4     54 E4 85 F1 | 	sub	objptr, ##8276
021a8     F2 12 02 FB | 	rdlong	arg01, objptr
021ac     26 00 00 FF 
021b0     D4 E4 05 F1 | 	add	objptr, ##19668
021b4     F2 12 62 FC | 	wrlong	arg01, objptr
021b8                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="lo." orelse lp$="s." orelse lp$="br.") andalso lparts(1).token=token_name andalso lparts(2).token=token_end then lparts(1).token=token_string
021b8     7A 00 00 FF 
021bc     B4 E4 85 F1 | 	sub	objptr, ##62644
021c0     3C 01 00 FF 
021c4     4C 15 06 F6 | 	mov	arg02, ##@LR__4321
021c8     B8 63 B1 FD | 	call	#__system___string_cmp
021cc     00 FA 0D F2 | 	cmp	result1, #0 wz
021d0     D8 00 90 AD |  if_e	jmp	#LR__0104
021d4     7A 00 00 FF 
021d8     B4 E4 05 F1 | 	add	objptr, ##62644
021dc     F2 12 02 FB | 	rdlong	arg01, objptr
021e0     7A 00 00 FF 
021e4     B4 E4 85 F1 | 	sub	objptr, ##62644
021e8     3C 01 00 FF 
021ec     51 15 06 F6 | 	mov	arg02, ##@LR__4322
021f0     90 63 B1 FD | 	call	#__system___string_cmp
021f4     00 FA 0D F2 | 	cmp	result1, #0 wz
021f8     B0 00 90 AD |  if_e	jmp	#LR__0104
021fc     7A 00 00 FF 
02200     B4 E4 05 F1 | 	add	objptr, ##62644
02204     F2 12 02 FB | 	rdlong	arg01, objptr
02208     7A 00 00 FF 
0220c     B4 E4 85 F1 | 	sub	objptr, ##62644
02210     3C 01 00 FF 
02214     56 15 06 F6 | 	mov	arg02, ##@LR__4323
02218     68 63 B1 FD | 	call	#__system___string_cmp
0221c     00 FA 0D F2 | 	cmp	result1, #0 wz
02220     88 00 90 AD |  if_e	jmp	#LR__0104
02224     7A 00 00 FF 
02228     B4 E4 05 F1 | 	add	objptr, ##62644
0222c     F2 12 02 FB | 	rdlong	arg01, objptr
02230     7A 00 00 FF 
02234     B4 E4 85 F1 | 	sub	objptr, ##62644
02238     3C 01 00 FF 
0223c     5B 35 06 F6 | 	mov	local12, ##@LR__4324
02240     1A 15 02 F6 | 	mov	arg02, local12
02244     3C 63 B1 FD | 	call	#__system___string_cmp
02248     00 FA 0D F2 | 	cmp	result1, #0 wz
0224c     5C 00 90 AD |  if_e	jmp	#LR__0104
02250     7A 00 00 FF 
02254     B4 E4 05 F1 | 	add	objptr, ##62644
02258     F2 12 02 FB | 	rdlong	arg01, objptr
0225c     7A 00 00 FF 
02260     B4 E4 85 F1 | 	sub	objptr, ##62644
02264     3C 01 00 FF 
02268     5F 35 06 F6 | 	mov	local12, ##@LR__4325
0226c     1A 15 02 F6 | 	mov	arg02, local12
02270     10 63 B1 FD | 	call	#__system___string_cmp
02274     00 FA 0D F2 | 	cmp	result1, #0 wz
02278     30 00 90 AD |  if_e	jmp	#LR__0104
0227c     7A 00 00 FF 
02280     B4 E4 05 F1 | 	add	objptr, ##62644
02284     F2 12 02 FB | 	rdlong	arg01, objptr
02288     7A 00 00 FF 
0228c     B4 E4 85 F1 | 	sub	objptr, ##62644
02290     3C 01 00 FF 
02294     62 39 06 F6 | 	mov	local14, ##@LR__4326
02298     1C 33 02 F6 | 	mov	local11, local14
0229c     19 15 02 F6 | 	mov	arg02, local11
022a0     E0 62 B1 FD | 	call	#__system___string_cmp
022a4     FD 34 0A F6 | 	mov	local12, result1 wz
022a8     54 00 90 5D |  if_ne	jmp	#LR__0105
022ac                 | LR__0104
022ac     53 00 00 FF 
022b0     EC E5 05 F1 | 	add	objptr, ##42988
022b4     F2 38 02 FB | 	rdlong	local14, objptr
022b8     53 00 00 FF 
022bc     EC E5 85 F1 | 	sub	objptr, ##42988
022c0     1C 33 02 F6 | 	mov	local11, local14
022c4     01 00 00 FF 
022c8     04 32 0E F2 | 	cmp	local11, ##516 wz
022cc     53 00 00 AF 
022d0     F4 E5 05 A1 |  if_e	add	objptr, ##42996
022d4     F2 4C 02 AB |  if_e	rdlong	local24, objptr
022d8     53 00 00 AF 
022dc     F4 E5 85 A1 |  if_e	sub	objptr, ##42996
022e0     26 37 02 A6 |  if_e	mov	local13, local24
022e4     FE 37 0E A2 |  if_e	cmp	local13, #510 wz
022e8     53 00 00 AF 
022ec     EC E5 05 A1 |  if_e	add	objptr, ##42988
022f0     01 00 80 AF 
022f4     F2 06 68 AC |  if_e	wrlong	##515, objptr
022f8     53 00 00 AF 
022fc     EC E5 85 A1 |  if_e	sub	objptr, ##42988
02300                 | LR__0105
02300                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") andalso lparts(1).token=token_name then 
02300     7A 00 00 FF 
02304     B4 E4 05 F1 | 	add	objptr, ##62644
02308     F2 12 02 FB | 	rdlong	arg01, objptr
0230c     7A 00 00 FF 
02310     B4 E4 85 F1 | 	sub	objptr, ##62644
02314     3C 01 00 FF 
02318     66 15 06 F6 | 	mov	arg02, ##@LR__4327
0231c     64 62 B1 FD | 	call	#__system___string_cmp
02320     00 FA 0D F2 | 	cmp	result1, #0 wz
02324     54 00 90 AD |  if_e	jmp	#LR__0106
02328     7A 00 00 FF 
0232c     B4 E4 05 F1 | 	add	objptr, ##62644
02330     F2 12 02 FB | 	rdlong	arg01, objptr
02334     7A 00 00 FF 
02338     B4 E4 85 F1 | 	sub	objptr, ##62644
0233c     3C 01 00 FF 
02340     6C 15 06 F6 | 	mov	arg02, ##@LR__4328
02344     3C 62 B1 FD | 	call	#__system___string_cmp
02348     00 FA 0D F2 | 	cmp	result1, #0 wz
0234c     2C 00 90 AD |  if_e	jmp	#LR__0106
02350     7A 00 00 FF 
02354     B4 E4 05 F1 | 	add	objptr, ##62644
02358     F2 12 02 FB | 	rdlong	arg01, objptr
0235c     7A 00 00 FF 
02360     B4 E4 85 F1 | 	sub	objptr, ##62644
02364     3C 01 00 FF 
02368     73 2B 06 F6 | 	mov	local07, ##@LR__4329
0236c     15 15 02 F6 | 	mov	arg02, local07
02370     10 62 B1 FD | 	call	#__system___string_cmp
02374     00 FA 0D F2 | 	cmp	result1, #0 wz
02378     C0 00 90 5D |  if_ne	jmp	#LR__0109
0237c                 | LR__0106
0237c     53 00 00 FF 
02380     EC E5 05 F1 | 	add	objptr, ##42988
02384     F2 2A 02 FB | 	rdlong	local07, objptr
02388     53 00 00 FF 
0238c     EC E5 85 F1 | 	sub	objptr, ##42988
02390     01 00 00 FF 
02394     04 2A 0E F2 | 	cmp	local07, ##516 wz
02398     A0 00 90 5D |  if_ne	jmp	#LR__0109
0239c                 | '   if lparts(1).part$="on" then lparts(1).part$="1" :lparts(1).token=token_decimal
0239c     53 00 00 FF 
023a0     E8 E5 05 F1 | 	add	objptr, ##42984
023a4     F2 12 02 FB | 	rdlong	arg01, objptr
023a8     53 00 00 FF 
023ac     E8 E5 85 F1 | 	sub	objptr, ##42984
023b0     3C 01 00 FF 
023b4     79 15 06 F6 | 	mov	arg02, ##@LR__4330
023b8     C8 61 B1 FD | 	call	#__system___string_cmp
023bc     00 FA 0D F2 | 	cmp	result1, #0 wz
023c0     28 00 90 5D |  if_ne	jmp	#LR__0107
023c4     3C 01 00 FF 
023c8     7C 1F 06 F6 | 	mov	local01, ##@LR__4331
023cc     53 00 00 FF 
023d0     E8 E5 05 F1 | 	add	objptr, ##42984
023d4     F2 1E 62 FC | 	wrlong	local01, objptr
023d8     04 E4 05 F1 | 	add	objptr, #4
023dc     01 00 80 FF 
023e0     F2 00 68 FC | 	wrlong	##512, objptr
023e4     53 00 00 FF 
023e8     EC E5 85 F1 | 	sub	objptr, ##42988
023ec                 | LR__0107
023ec                 | '   if lparts(1).part$="off" then lparts(1).part$="0" :lparts(1).token=token_decimal
023ec     53 00 00 FF 
023f0     E8 E5 05 F1 | 	add	objptr, ##42984
023f4     F2 12 02 FB | 	rdlong	arg01, objptr
023f8     53 00 00 FF 
023fc     E8 E5 85 F1 | 	sub	objptr, ##42984
02400     3C 01 00 FF 
02404     7E 15 06 F6 | 	mov	arg02, ##@LR__4332
02408     78 61 B1 FD | 	call	#__system___string_cmp
0240c     00 FA 0D F2 | 	cmp	result1, #0 wz
02410     28 00 90 5D |  if_ne	jmp	#LR__0108
02414     3C 01 00 FF 
02418     82 1F 06 F6 | 	mov	local01, ##@LR__4333
0241c     53 00 00 FF 
02420     E8 E5 05 F1 | 	add	objptr, ##42984
02424     F2 1E 62 FC | 	wrlong	local01, objptr
02428     04 E4 05 F1 | 	add	objptr, #4
0242c     01 00 80 FF 
02430     F2 00 68 FC | 	wrlong	##512, objptr
02434     53 00 00 FF 
02438     EC E5 85 F1 | 	sub	objptr, ##42988
0243c                 | LR__0108
0243c                 | LR__0109
0243c                 | ' if (lp$="mode" orelse lp$="m.") andalso lparts(1).token=token_name then
0243c     7A 00 00 FF 
02440     B4 E4 05 F1 | 	add	objptr, ##62644
02444     F2 12 02 FB | 	rdlong	arg01, objptr
02448     7A 00 00 FF 
0244c     B4 E4 85 F1 | 	sub	objptr, ##62644
02450     3C 01 00 FF 
02454     84 15 06 F6 | 	mov	arg02, ##@LR__4334
02458     28 61 B1 FD | 	call	#__system___string_cmp
0245c     00 FA 0D F2 | 	cmp	result1, #0 wz
02460     30 00 90 AD |  if_e	jmp	#LR__0110
02464     7A 00 00 FF 
02468     B4 E4 05 F1 | 	add	objptr, ##62644
0246c     F2 12 02 FB | 	rdlong	arg01, objptr
02470     7A 00 00 FF 
02474     B4 E4 85 F1 | 	sub	objptr, ##62644
02478     3C 01 00 FF 
0247c     89 29 06 F6 | 	mov	local06, ##@LR__4335
02480     14 31 02 F6 | 	mov	local10, local06
02484     18 15 02 F6 | 	mov	arg02, local10
02488     F8 60 B1 FD | 	call	#__system___string_cmp
0248c     00 FA 0D F2 | 	cmp	result1, #0 wz
02490     B8 01 90 5D |  if_ne	jmp	#LR__0116
02494                 | LR__0110
02494     53 00 00 FF 
02498     EC E5 05 F1 | 	add	objptr, ##42988
0249c     F2 28 02 FB | 	rdlong	local06, objptr
024a0     53 00 00 FF 
024a4     EC E5 85 F1 | 	sub	objptr, ##42988
024a8     14 31 02 F6 | 	mov	local10, local06
024ac     01 00 00 FF 
024b0     04 30 0E F2 | 	cmp	local10, ##516 wz
024b4     94 01 90 5D |  if_ne	jmp	#LR__0116
024b8                 | '   if lparts(1).part$="atari" then lparts(1).part$="0" :lparts(1).token=token_decimal
024b8     53 00 00 FF 
024bc     E8 E5 05 F1 | 	add	objptr, ##42984
024c0     F2 12 02 FB | 	rdlong	arg01, objptr
024c4     53 00 00 FF 
024c8     E8 E5 85 F1 | 	sub	objptr, ##42984
024cc     3C 01 00 FF 
024d0     8C 15 06 F6 | 	mov	arg02, ##@LR__4336
024d4     AC 60 B1 FD | 	call	#__system___string_cmp
024d8     00 FA 0D F2 | 	cmp	result1, #0 wz
024dc     28 00 90 5D |  if_ne	jmp	#LR__0111
024e0     3C 01 00 FF 
024e4     92 1F 06 F6 | 	mov	local01, ##@LR__4337
024e8     53 00 00 FF 
024ec     E8 E5 05 F1 | 	add	objptr, ##42984
024f0     F2 1E 62 FC | 	wrlong	local01, objptr
024f4     04 E4 05 F1 | 	add	objptr, #4
024f8     01 00 80 FF 
024fc     F2 00 68 FC | 	wrlong	##512, objptr
02500     53 00 00 FF 
02504     EC E5 85 F1 | 	sub	objptr, ##42988
02508                 | LR__0111
02508                 | '   if lparts(1).part$="pc_amber" then lparts(1).part$="1" :lparts(1).token=token_decimal
02508     53 00 00 FF 
0250c     E8 E5 05 F1 | 	add	objptr, ##42984
02510     F2 12 02 FB | 	rdlong	arg01, objptr
02514     53 00 00 FF 
02518     E8 E5 85 F1 | 	sub	objptr, ##42984
0251c     3C 01 00 FF 
02520     94 15 06 F6 | 	mov	arg02, ##@LR__4338
02524     5C 60 B1 FD | 	call	#__system___string_cmp
02528     00 FA 0D F2 | 	cmp	result1, #0 wz
0252c     28 00 90 5D |  if_ne	jmp	#LR__0112
02530     3C 01 00 FF 
02534     9D 1F 06 F6 | 	mov	local01, ##@LR__4339
02538     53 00 00 FF 
0253c     E8 E5 05 F1 | 	add	objptr, ##42984
02540     F2 1E 62 FC | 	wrlong	local01, objptr
02544     04 E4 05 F1 | 	add	objptr, #4
02548     01 00 80 FF 
0254c     F2 00 68 FC | 	wrlong	##512, objptr
02550     53 00 00 FF 
02554     EC E5 85 F1 | 	sub	objptr, ##42988
02558                 | LR__0112
02558                 | '   if lparts(1).part$="pc_green" then lparts(1).part$="2" :lparts(1).token=token_decimal
02558     53 00 00 FF 
0255c     E8 E5 05 F1 | 	add	objptr, ##42984
02560     F2 12 02 FB | 	rdlong	arg01, objptr
02564     53 00 00 FF 
02568     E8 E5 85 F1 | 	sub	objptr, ##42984
0256c     3C 01 00 FF 
02570     9F 15 06 F6 | 	mov	arg02, ##@LR__4340
02574     0C 60 B1 FD | 	call	#__system___string_cmp
02578     00 FA 0D F2 | 	cmp	result1, #0 wz
0257c     28 00 90 5D |  if_ne	jmp	#LR__0113
02580     3C 01 00 FF 
02584     A8 1F 06 F6 | 	mov	local01, ##@LR__4341
02588     53 00 00 FF 
0258c     E8 E5 05 F1 | 	add	objptr, ##42984
02590     F2 1E 62 FC | 	wrlong	local01, objptr
02594     04 E4 05 F1 | 	add	objptr, #4
02598     01 00 80 FF 
0259c     F2 00 68 FC | 	wrlong	##512, objptr
025a0     53 00 00 FF 
025a4     EC E5 85 F1 | 	sub	objptr, ##42988
025a8                 | LR__0113
025a8                 | '   if lparts(1).part$="pc_white" then lparts(1).part$="3" :lparts(1).token=token_decimal
025a8     53 00 00 FF 
025ac     E8 E5 05 F1 | 	add	objptr, ##42984
025b0     F2 12 02 FB | 	rdlong	arg01, objptr
025b4     53 00 00 FF 
025b8     E8 E5 85 F1 | 	sub	objptr, ##42984
025bc     3C 01 00 FF 
025c0     AA 15 06 F6 | 	mov	arg02, ##@LR__4342
025c4     BC 5F B1 FD | 	call	#__system___string_cmp
025c8     00 FA 0D F2 | 	cmp	result1, #0 wz
025cc     28 00 90 5D |  if_ne	jmp	#LR__0114
025d0     3C 01 00 FF 
025d4     B3 1F 06 F6 | 	mov	local01, ##@LR__4343
025d8     53 00 00 FF 
025dc     E8 E5 05 F1 | 	add	objptr, ##42984
025e0     F2 1E 62 FC | 	wrlong	local01, objptr
025e4     04 E4 05 F1 | 	add	objptr, #4
025e8     01 00 80 FF 
025ec     F2 00 68 FC | 	wrlong	##512, objptr
025f0     53 00 00 FF 
025f4     EC E5 85 F1 | 	sub	objptr, ##42988
025f8                 | LR__0114
025f8                 | '   if lparts(1).part$="st" then lparts(1).part$="4" :lparts(1).token=token_decimal
025f8     53 00 00 FF 
025fc     E8 E5 05 F1 | 	add	objptr, ##42984
02600     F2 12 02 FB | 	rdlong	arg01, objptr
02604     53 00 00 FF 
02608     E8 E5 85 F1 | 	sub	objptr, ##42984
0260c     3C 01 00 FF 
02610     B5 31 06 F6 | 	mov	local10, ##@LR__4344
02614     18 15 02 F6 | 	mov	arg02, local10
02618     68 5F B1 FD | 	call	#__system___string_cmp
0261c     00 FA 0D F2 | 	cmp	result1, #0 wz
02620     28 00 90 5D |  if_ne	jmp	#LR__0115
02624     3C 01 00 FF 
02628     B8 1F 06 F6 | 	mov	local01, ##@LR__4345
0262c     53 00 00 FF 
02630     E8 E5 05 F1 | 	add	objptr, ##42984
02634     F2 1E 62 FC | 	wrlong	local01, objptr
02638     04 E4 05 F1 | 	add	objptr, #4
0263c     01 00 80 FF 
02640     F2 00 68 FC | 	wrlong	##512, objptr
02644     53 00 00 FF 
02648     EC E5 85 F1 | 	sub	objptr, ##42988
0264c                 | LR__0115
0264c                 | LR__0116
0264c                 | ' 
0264c                 | ' 
0264c                 | ' '2b determine a type of the line
0264c                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
0264c     53 00 00 FF 
02650     E0 E5 05 F1 | 	add	objptr, ##42976
02654     F2 12 02 FB | 	rdlong	arg01, objptr
02658     53 00 00 FF 
0265c     E0 E5 85 F1 | 	sub	objptr, ##42976
02660     B4 1C B0 FD | 	call	#_isdec
02664     00 FA 0D F2 | 	cmp	result1, #0 wz
02668     20 00 90 AD |  if_e	jmp	#LR__0117
0266c     53 00 00 FF 
02670     E0 E5 05 F1 | 	add	objptr, ##42976
02674     F2 12 02 FB | 	rdlong	arg01, objptr
02678     53 00 00 FF 
0267c     E0 E5 85 F1 | 	sub	objptr, ##42976
02680     00 14 06 F6 | 	mov	arg02, #0
02684     30 8F B1 FD | 	call	#__system____builtin_atoi
02688     FD 20 02 F6 | 	mov	local02, result1
0268c                 | LR__0117
0268c                 | ' 
0268c                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104
0268c     01 20 16 F2 | 	cmp	local02, #1 wc
02690     2C 00 90 CD |  if_b	jmp	#LR__0118
02694     01 3C 0E F2 | 	cmp	local16, #1 wz
02698     55 00 00 AF 
0269c     F8 E5 05 A1 |  if_e	add	objptr, ##44024
026a0     F2 1E 02 AB |  if_e	rdlong	local01, objptr
026a4     55 00 00 AF 
026a8     F8 E5 85 A1 |  if_e	sub	objptr, ##44024
026ac     03 1E 0E A2 |  if_e	cmp	local01, #3 wz
026b0     0C 00 90 5D |  if_ne	jmp	#LR__0118
026b4     10 13 02 F6 | 	mov	arg01, local02
026b8     80 1D B0 FD | 	call	#_deleteline
026bc     C8 04 90 FD | 	jmp	#LR__0134
026c0                 | LR__0118
026c0                 | ' 
026c0                 | ' if linenum>0  andalso (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  
026c0     01 20 16 F2 | 	cmp	local02, #1 wc
026c4     E0 00 90 CD |  if_b	jmp	#LR__0121
026c8     55 00 00 FF 
026cc     F8 E5 05 F1 | 	add	objptr, ##44024
026d0     F2 1E 0A FB | 	rdlong	local01, objptr wz
026d4     55 00 00 FF 
026d8     F8 E5 85 F1 | 	sub	objptr, ##44024
026dc     20 00 90 AD |  if_e	jmp	#LR__0119
026e0     55 00 00 FF 
026e4     F8 E5 05 F1 | 	add	objptr, ##44024
026e8     F2 28 02 FB | 	rdlong	local06, objptr
026ec     55 00 00 FF 
026f0     F8 E5 85 F1 | 	sub	objptr, ##44024
026f4     14 31 02 F6 | 	mov	local10, local06
026f8     03 30 0E F2 | 	cmp	local10, #3 wz
026fc     A8 00 90 5D |  if_ne	jmp	#LR__0121
02700                 | LR__0119
02700     53 00 00 FF 
02704     F4 E5 05 F1 | 	add	objptr, ##42996
02708     F2 34 02 FB | 	rdlong	local12, objptr
0270c     53 00 00 FF 
02710     F4 E5 85 F1 | 	sub	objptr, ##42996
02714     1A 2B 02 F6 | 	mov	local07, local12
02718     1B 2A 0E F2 | 	cmp	local07, #27 wz
0271c     88 00 90 AD |  if_e	jmp	#LR__0121
02720     55 00 00 FF 
02724     F8 E5 05 F1 | 	add	objptr, ##44024
02728     F2 16 02 FB | 	rdlong	arg03, objptr
0272c     55 00 00 FF 
02730     F8 E5 85 F1 | 	sub	objptr, ##44024
02734     10 13 02 F6 | 	mov	arg01, local02
02738     00 14 06 F6 | 	mov	arg02, #0
0273c     C0 2F B0 FD | 	call	#_compile
02740     FD 22 0A F6 | 	mov	local03, result1 wz
02744                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02744                 | '   if err<>0 then printerror(err): goto 104
02744     0C 00 90 AD |  if_e	jmp	#LR__0120
02748     11 13 02 F6 | 	mov	arg01, local03
0274c     E8 28 B1 FD | 	call	#_printerror
02750     34 04 90 FD | 	jmp	#LR__0134
02754                 | LR__0120
02754                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
02754     7A 00 00 FF 
02758     84 E4 05 F1 | 	add	objptr, ##62596
0275c     F2 12 02 FB | 	rdlong	arg01, objptr
02760     7A 00 00 FF 
02764     84 E4 85 F1 | 	sub	objptr, ##62596
02768     3C 01 00 FF 
0276c     BA 15 06 F6 | 	mov	arg02, ##@LR__4346
02770     10 5E B1 FD | 	call	#__system___string_cmp
02774     00 FA 0D F2 | 	cmp	result1, #0 wz
02778     0C 04 90 AD |  if_e	jmp	#LR__0134
0277c     7A 00 00 FF 
02780     84 E4 05 F1 | 	add	objptr, ##62596
02784     F2 1E 02 FB | 	rdlong	local01, objptr
02788     24 00 00 FF 
0278c     94 E4 85 F1 | 	sub	objptr, ##18580
02790     F2 1E 62 FC | 	wrlong	local01, objptr
02794     08 E4 05 F1 | 	add	objptr, #8
02798     F2 08 68 FC | 	wrlong	#4, objptr
0279c     55 00 00 FF 
027a0     F8 E5 85 F1 | 	sub	objptr, ##44024
027a4     C0 E2 9F FD | 	jmp	#LR__0020
027a8                 | LR__0121
027a8                 | '       							
027a8                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 
027a8     01 20 16 F2 | 	cmp	local02, #1 wc
027ac     E4 00 90 CD |  if_b	jmp	#LR__0124
027b0     55 00 00 FF 
027b4     F8 E5 05 F1 | 	add	objptr, ##44024
027b8     F2 1E 02 FB | 	rdlong	local01, objptr
027bc     55 00 00 FF 
027c0     F8 E5 85 F1 | 	sub	objptr, ##44024
027c4     01 1E 0E F2 | 	cmp	local01, #1 wz
027c8     20 00 90 AD |  if_e	jmp	#LR__0122
027cc     55 00 00 FF 
027d0     F8 E5 05 F1 | 	add	objptr, ##44024
027d4     F2 28 02 FB | 	rdlong	local06, objptr
027d8     55 00 00 FF 
027dc     F8 E5 85 F1 | 	sub	objptr, ##44024
027e0     14 31 02 F6 | 	mov	local10, local06
027e4     02 30 0E F2 | 	cmp	local10, #2 wz
027e8     A8 00 90 5D |  if_ne	jmp	#LR__0124
027ec                 | LR__0122
027ec     53 00 00 FF 
027f0     EC E5 05 F1 | 	add	objptr, ##42988
027f4     F2 34 02 FB | 	rdlong	local12, objptr
027f8     53 00 00 FF 
027fc     EC E5 85 F1 | 	sub	objptr, ##42988
02800     1A 2B 02 F6 | 	mov	local07, local12
02804     1B 2A 0E F2 | 	cmp	local07, #27 wz
02808     88 00 90 AD |  if_e	jmp	#LR__0124
0280c     55 00 00 FF 
02810     F8 E5 05 F1 | 	add	objptr, ##44024
02814     F2 16 02 FB | 	rdlong	arg03, objptr
02818     55 00 00 FF 
0281c     F8 E5 85 F1 | 	sub	objptr, ##44024
02820     10 13 02 F6 | 	mov	arg01, local02
02824     00 14 06 F6 | 	mov	arg02, #0
02828     D4 2E B0 FD | 	call	#_compile
0282c     FD 22 0A F6 | 	mov	local03, result1 wz
02830                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02830                 | '   if err<>0 then printerror(err): goto 104
02830     0C 00 90 AD |  if_e	jmp	#LR__0123
02834     11 13 02 F6 | 	mov	arg01, local03
02838     FC 27 B1 FD | 	call	#_printerror
0283c     48 03 90 FD | 	jmp	#LR__0134
02840                 | LR__0123
02840                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
02840     7A 00 00 FF 
02844     84 E4 05 F1 | 	add	objptr, ##62596
02848     F2 12 02 FB | 	rdlong	arg01, objptr
0284c     7A 00 00 FF 
02850     84 E4 85 F1 | 	sub	objptr, ##62596
02854     3C 01 00 FF 
02858     BB 15 06 F6 | 	mov	arg02, ##@LR__4347
0285c     24 5D B1 FD | 	call	#__system___string_cmp
02860     00 FA 0D F2 | 	cmp	result1, #0 wz
02864     20 03 90 AD |  if_e	jmp	#LR__0134
02868     7A 00 00 FF 
0286c     84 E4 05 F1 | 	add	objptr, ##62596
02870     F2 1E 02 FB | 	rdlong	local01, objptr
02874     24 00 00 FF 
02878     94 E4 85 F1 | 	sub	objptr, ##18580
0287c     F2 1E 62 FC | 	wrlong	local01, objptr
02880     08 E4 05 F1 | 	add	objptr, #8
02884     F2 08 68 FC | 	wrlong	#4, objptr
02888     55 00 00 FF 
0288c     F8 E5 85 F1 | 	sub	objptr, ##44024
02890     D4 E1 9F FD | 	jmp	#LR__0020
02894                 | LR__0124
02894                 | ' 							 
02894                 | ' if linenum>0 andalso (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  
02894     01 20 16 F2 | 	cmp	local02, #1 wc
02898     C0 00 90 CD |  if_b	jmp	#LR__0125
0289c     55 00 00 FF 
028a0     F8 E5 05 F1 | 	add	objptr, ##44024
028a4     F2 1E 0A FB | 	rdlong	local01, objptr wz
028a8     55 00 00 FF 
028ac     F8 E5 85 F1 | 	sub	objptr, ##44024
028b0     55 00 00 5F 
028b4     F8 E5 05 51 |  if_ne	add	objptr, ##44024
028b8     F2 28 02 5B |  if_ne	rdlong	local06, objptr
028bc     55 00 00 5F 
028c0     F8 E5 85 51 |  if_ne	sub	objptr, ##44024
028c4     03 28 0E 52 |  if_ne	cmp	local06, #3 wz
028c8     53 00 00 AF 
028cc     F4 E5 05 A1 |  if_e	add	objptr, ##42996
028d0     F2 34 02 AB |  if_e	rdlong	local12, objptr
028d4     53 00 00 AF 
028d8     F4 E5 85 A1 |  if_e	sub	objptr, ##42996
028dc     1A 2B 02 A6 |  if_e	mov	local07, local12
028e0     1B 2A 0E A2 |  if_e	cmp	local07, #27 wz
028e4     74 00 90 5D |  if_ne	jmp	#LR__0125
028e8     55 00 00 FF 
028ec     F8 E5 05 F1 | 	add	objptr, ##44024
028f0     F2 16 02 FB | 	rdlong	arg03, objptr
028f4     55 00 00 FF 
028f8     F8 E5 85 F1 | 	sub	objptr, ##44024
028fc     10 13 02 F6 | 	mov	arg01, local02
02900     00 14 06 F6 | 	mov	arg02, #0
02904     C8 2E B0 FD | 	call	#_compile_assign
02908                 | '   compile_assign(linenum,0,cont)': print "called compile_assign with cont=";cont, "line$=";line$
02908                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
02908     7A 00 00 FF 
0290c     84 E4 05 F1 | 	add	objptr, ##62596
02910     F2 12 02 FB | 	rdlong	arg01, objptr
02914     7A 00 00 FF 
02918     84 E4 85 F1 | 	sub	objptr, ##62596
0291c     3C 01 00 FF 
02920     BC 15 06 F6 | 	mov	arg02, ##@LR__4348
02924     5C 5C B1 FD | 	call	#__system___string_cmp
02928     00 FA 0D F2 | 	cmp	result1, #0 wz
0292c     58 02 90 AD |  if_e	jmp	#LR__0134
02930     7A 00 00 FF 
02934     84 E4 05 F1 | 	add	objptr, ##62596
02938     F2 1E 02 FB | 	rdlong	local01, objptr
0293c     24 00 00 FF 
02940     94 E4 85 F1 | 	sub	objptr, ##18580
02944     F2 1E 62 FC | 	wrlong	local01, objptr
02948     08 E4 05 F1 | 	add	objptr, #8
0294c     F2 08 68 FC | 	wrlong	#4, objptr
02950     55 00 00 FF 
02954     F8 E5 85 F1 | 	sub	objptr, ##44024
02958     0C E1 9F FD | 	jmp	#LR__0020
0295c                 | LR__0125
0295c                 | '     							 
0295c                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 
0295c     01 20 16 F2 | 	cmp	local02, #1 wc
02960     C0 00 90 CD |  if_b	jmp	#LR__0126
02964     55 00 00 FF 
02968     F8 E5 05 F1 | 	add	objptr, ##44024
0296c     F2 1E 02 FB | 	rdlong	local01, objptr
02970     55 00 00 FF 
02974     F8 E5 85 F1 | 	sub	objptr, ##44024
02978     01 1E 0E F2 | 	cmp	local01, #1 wz
0297c     55 00 00 5F 
02980     F8 E5 05 51 |  if_ne	add	objptr, ##44024
02984     F2 30 02 5B |  if_ne	rdlong	local10, objptr
02988     55 00 00 5F 
0298c     F8 E5 85 51 |  if_ne	sub	objptr, ##44024
02990     02 30 0E 52 |  if_ne	cmp	local10, #2 wz
02994     53 00 00 AF 
02998     EC E5 05 A1 |  if_e	add	objptr, ##42988
0299c     F2 34 02 AB |  if_e	rdlong	local12, objptr
029a0     53 00 00 AF 
029a4     EC E5 85 A1 |  if_e	sub	objptr, ##42988
029a8     1B 34 0E A2 |  if_e	cmp	local12, #27 wz
029ac     74 00 90 5D |  if_ne	jmp	#LR__0126
029b0     55 00 00 FF 
029b4     F8 E5 05 F1 | 	add	objptr, ##44024
029b8     F2 16 02 FB | 	rdlong	arg03, objptr
029bc     55 00 00 FF 
029c0     F8 E5 85 F1 | 	sub	objptr, ##44024
029c4     10 13 02 F6 | 	mov	arg01, local02
029c8     00 14 06 F6 | 	mov	arg02, #0
029cc     00 2E B0 FD | 	call	#_compile_assign
029d0                 | '   compile_assign(linenum,0,cont) ': print "called compile_assign with cont=";cont, "line$=";line$
029d0                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								'<-- TODO: add a line to a program
029d0     7A 00 00 FF 
029d4     84 E4 05 F1 | 	add	objptr, ##62596
029d8     F2 12 02 FB | 	rdlong	arg01, objptr
029dc     7A 00 00 FF 
029e0     84 E4 85 F1 | 	sub	objptr, ##62596
029e4     3C 01 00 FF 
029e8     BD 15 06 F6 | 	mov	arg02, ##@LR__4349
029ec     94 5B B1 FD | 	call	#__system___string_cmp
029f0     00 FA 0D F2 | 	cmp	result1, #0 wz
029f4     90 01 90 AD |  if_e	jmp	#LR__0134
029f8     7A 00 00 FF 
029fc     84 E4 05 F1 | 	add	objptr, ##62596
02a00     F2 1E 02 FB | 	rdlong	local01, objptr
02a04     24 00 00 FF 
02a08     94 E4 85 F1 | 	sub	objptr, ##18580
02a0c     F2 1E 62 FC | 	wrlong	local01, objptr
02a10     08 E4 05 F1 | 	add	objptr, #8
02a14     F2 08 68 FC | 	wrlong	#4, objptr
02a18     55 00 00 FF 
02a1c     F8 E5 85 F1 | 	sub	objptr, ##44024
02a20     44 E0 9F FD | 	jmp	#LR__0020
02a24                 | LR__0126
02a24                 | ' 
02a24                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_eq then compile_assign(0) : goto 103    					' assign a variable
02a24     53 00 00 FF 
02a28     E4 E5 05 F1 | 	add	objptr, ##42980
02a2c     F2 1E 02 FB | 	rdlong	local01, objptr
02a30     53 00 00 FF 
02a34     E4 E5 85 F1 | 	sub	objptr, ##42980
02a38     01 00 00 FF 
02a3c     04 1E 0E F2 | 	cmp	local01, ##516 wz
02a40     53 00 00 AF 
02a44     EC E5 05 A1 |  if_e	add	objptr, ##42988
02a48     F2 30 02 AB |  if_e	rdlong	local10, objptr
02a4c     53 00 00 AF 
02a50     EC E5 85 A1 |  if_e	sub	objptr, ##42988
02a54     1B 30 0E A2 |  if_e	cmp	local10, #27 wz
02a58     14 00 90 5D |  if_ne	jmp	#LR__0127
02a5c     00 12 06 F6 | 	mov	arg01, #0
02a60     00 14 06 F6 | 	mov	arg02, #0
02a64     00 16 06 F6 | 	mov	arg03, #0
02a68     64 2D B0 FD | 	call	#_compile_assign
02a6c     90 00 90 FD | 	jmp	#LR__0129
02a70                 | LR__0127
02a70                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_rpar then print " User functions and arrays not yet implemented" : goto 101
02a70     53 00 00 FF 
02a74     E4 E5 05 F1 | 	add	objptr, ##42980
02a78     F2 1E 02 FB | 	rdlong	local01, objptr
02a7c     53 00 00 FF 
02a80     E4 E5 85 F1 | 	sub	objptr, ##42980
02a84     01 00 00 FF 
02a88     04 1E 0E F2 | 	cmp	local01, ##516 wz
02a8c     53 00 00 AF 
02a90     EC E5 05 A1 |  if_e	add	objptr, ##42988
02a94     F2 30 02 AB |  if_e	rdlong	local10, objptr
02a98     53 00 00 AF 
02a9c     EC E5 85 A1 |  if_e	sub	objptr, ##42988
02aa0     14 30 0E A2 |  if_e	cmp	local10, #20 wz
02aa4     44 00 90 5D |  if_ne	jmp	#LR__0128
02aa8     00 12 06 F6 | 	mov	arg01, #0
02aac     A8 B2 B1 FD | 	call	#__system___getiolock_0416
02ab0     FD 12 02 F6 | 	mov	arg01, result1
02ab4     A4 5A B1 FD | 	call	#__system___lockmem
02ab8     3C 01 00 FF 
02abc     BE 15 06 F6 | 	mov	arg02, ##@LR__4350
02ac0     00 12 06 F6 | 	mov	arg01, #0
02ac4     00 16 06 F6 | 	mov	arg03, #0
02ac8     80 67 B1 FD | 	call	#__system___basic_print_string
02acc     00 12 06 F6 | 	mov	arg01, #0
02ad0     0A 14 06 F6 | 	mov	arg02, #10
02ad4     00 16 06 F6 | 	mov	arg03, #0
02ad8     18 67 B1 FD | 	call	#__system___basic_print_char
02adc     00 12 06 F6 | 	mov	arg01, #0
02ae0     74 B2 B1 FD | 	call	#__system___getiolock_0416
02ae4     FD 00 68 FC | 	wrlong	#0, result1
02ae8     7C 00 90 FD | 	jmp	#LR__0133
02aec                 | LR__0128
02aec     00 12 06 F6 | 	mov	arg01, #0
02af0     00 14 06 F6 | 	mov	arg02, #0
02af4     00 16 06 F6 | 	mov	arg03, #0
02af8     04 2C B0 FD | 	call	#_compile
02afc     FD 22 02 F6 | 	mov	local03, result1
02b00                 | LR__0129
02b00                 | ' 
02b00                 | ' ' if we are here, this is not a program line to add, so try to execute this
02b00                 | ' 
02b00                 | ' err=compile(0) : '' execute(0) ' print "  this is a command to execute"  ''' param=line to compile
02b00                 | ' 103  'for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, : next i
02b00                 | ' if err=0 then execute_line() else printerror(err)
02b00     00 22 0E F2 | 	cmp	local03, #0 wz
02b04     0C 00 90 5D |  if_ne	jmp	#LR__0130
02b08     00 12 06 F6 | 	mov	arg01, #0
02b0c     B0 65 B0 FD | 	call	#_execute_line
02b10     08 00 90 FD | 	jmp	#LR__0131
02b14                 | LR__0130
02b14     11 13 02 F6 | 	mov	arg01, local03
02b18     1C 25 B1 FD | 	call	#_printerror
02b1c                 | LR__0131
02b1c                 | ' if rest$<>"" then line$=rest$:  goto 108 
02b1c     7A 00 00 FF 
02b20     84 E4 05 F1 | 	add	objptr, ##62596
02b24     F2 12 02 FB | 	rdlong	arg01, objptr
02b28     7A 00 00 FF 
02b2c     84 E4 85 F1 | 	sub	objptr, ##62596
02b30     3C 01 00 FF 
02b34     ED 15 06 F6 | 	mov	arg02, ##@LR__4351
02b38     48 5A B1 FD | 	call	#__system___string_cmp
02b3c     00 FA 0D F2 | 	cmp	result1, #0 wz
02b40     24 00 90 AD |  if_e	jmp	#LR__0132
02b44     7A 00 00 FF 
02b48     84 E4 05 F1 | 	add	objptr, ##62596
02b4c     F2 1E 02 FB | 	rdlong	local01, objptr
02b50     24 00 00 FF 
02b54     94 E4 85 F1 | 	sub	objptr, ##18580
02b58     F2 1E 62 FC | 	wrlong	local01, objptr
02b5c     55 00 00 FF 
02b60     F0 E5 85 F1 | 	sub	objptr, ##44016
02b64     00 DF 9F FD | 	jmp	#LR__0020
02b68                 | LR__0132
02b68                 | LR__0133
02b68     3C 01 00 FF 
02b6c     EE 13 06 F6 | 	mov	arg01, ##@LR__4352
02b70                 | ' 
02b70                 | ' write(text)
02b70     C0 49 B1 FD | 	call	#_hg010b_spin2_write
02b74                 | ' crlf
02b74     1C 4B B1 FD | 	call	#_hg010b_spin2_crlf
02b78     3C 01 00 FF 
02b7c     EF 13 06 F6 | 	mov	arg01, ##@LR__4353
02b80                 | ' 
02b80                 | ' write(text)
02b80     B0 49 B1 FD | 	call	#_hg010b_spin2_write
02b84                 | ' crlf
02b84     0C 4B B1 FD | 	call	#_hg010b_spin2_crlf
02b88                 | LR__0134
02b88     A7 F0 03 F6 | 	mov	ptra, fp
02b8c     B2 00 A0 FD | 	call	#popregs_
02b90                 | _interpret_ret
02b90     2D 00 64 FD | 	ret
02b94                 | 
02b94                 | ' 
02b94                 | ' 
02b94                 | ' '------------------------------ Helper functions for the tokenizer -------------------------------------------
02b94                 | ' 
02b94                 | ' function isoperator(s as string) as ubyte
02b94                 | _isoperator
02b94     01 4A 05 F6 | 	mov	COUNT_, #1
02b98     A8 00 A0 FD | 	call	#pushregs_
02b9c                 | ' 
02b9c                 | ' select case s
02b9c     09 1F 02 F6 | 	mov	local01, arg01
02ba0     3C 01 00 FF 
02ba4     F5 15 06 F6 | 	mov	arg02, ##@LR__4354
02ba8     0F 13 02 F6 | 	mov	arg01, local01
02bac     D4 59 B1 FD | 	call	#__system___string_cmp
02bb0     00 FA 0D F2 | 	cmp	result1, #0 wz
02bb4     FC 01 90 AD |  if_e	jmp	#LR__0140
02bb8     3C 01 00 FF 
02bbc     F7 15 06 F6 | 	mov	arg02, ##@LR__4355
02bc0     0F 13 02 F6 | 	mov	arg01, local01
02bc4     BC 59 B1 FD | 	call	#__system___string_cmp
02bc8     00 FA 0D F2 | 	cmp	result1, #0 wz
02bcc     EC 01 90 AD |  if_e	jmp	#LR__0141
02bd0     3C 01 00 FF 
02bd4     F9 15 06 F6 | 	mov	arg02, ##@LR__4356
02bd8     0F 13 02 F6 | 	mov	arg01, local01
02bdc     A4 59 B1 FD | 	call	#__system___string_cmp
02be0     00 FA 0D F2 | 	cmp	result1, #0 wz
02be4     DC 01 90 AD |  if_e	jmp	#LR__0142
02be8     3C 01 00 FF 
02bec     FC 15 06 F6 | 	mov	arg02, ##@LR__4357
02bf0     0F 13 02 F6 | 	mov	arg01, local01
02bf4     8C 59 B1 FD | 	call	#__system___string_cmp
02bf8     00 FA 0D F2 | 	cmp	result1, #0 wz
02bfc     CC 01 90 AD |  if_e	jmp	#LR__0143
02c00     3D 01 00 FF 
02c04     00 14 06 F6 | 	mov	arg02, ##@LR__4358
02c08     0F 13 02 F6 | 	mov	arg01, local01
02c0c     74 59 B1 FD | 	call	#__system___string_cmp
02c10     00 FA 0D F2 | 	cmp	result1, #0 wz
02c14     BC 01 90 AD |  if_e	jmp	#LR__0144
02c18     3D 01 00 FF 
02c1c     02 14 06 F6 | 	mov	arg02, ##@LR__4359
02c20     0F 13 02 F6 | 	mov	arg01, local01
02c24     5C 59 B1 FD | 	call	#__system___string_cmp
02c28     00 FA 0D F2 | 	cmp	result1, #0 wz
02c2c     AC 01 90 AD |  if_e	jmp	#LR__0145
02c30     3D 01 00 FF 
02c34     04 14 06 F6 | 	mov	arg02, ##@LR__4360
02c38     0F 13 02 F6 | 	mov	arg01, local01
02c3c     44 59 B1 FD | 	call	#__system___string_cmp
02c40     00 FA 0D F2 | 	cmp	result1, #0 wz
02c44     9C 01 90 AD |  if_e	jmp	#LR__0146
02c48     3D 01 00 FF 
02c4c     08 14 06 F6 | 	mov	arg02, ##@LR__4361
02c50     0F 13 02 F6 | 	mov	arg01, local01
02c54     2C 59 B1 FD | 	call	#__system___string_cmp
02c58     00 FA 0D F2 | 	cmp	result1, #0 wz
02c5c     8C 01 90 AD |  if_e	jmp	#LR__0147
02c60     3D 01 00 FF 
02c64     0C 14 06 F6 | 	mov	arg02, ##@LR__4362
02c68     0F 13 02 F6 | 	mov	arg01, local01
02c6c     14 59 B1 FD | 	call	#__system___string_cmp
02c70     00 FA 0D F2 | 	cmp	result1, #0 wz
02c74     7C 01 90 AD |  if_e	jmp	#LR__0148
02c78     3D 01 00 FF 
02c7c     10 14 06 F6 | 	mov	arg02, ##@LR__4363
02c80     0F 13 02 F6 | 	mov	arg01, local01
02c84     FC 58 B1 FD | 	call	#__system___string_cmp
02c88     00 FA 0D F2 | 	cmp	result1, #0 wz
02c8c     6C 01 90 AD |  if_e	jmp	#LR__0149
02c90     3D 01 00 FF 
02c94     14 14 06 F6 | 	mov	arg02, ##@LR__4364
02c98     0F 13 02 F6 | 	mov	arg01, local01
02c9c     E4 58 B1 FD | 	call	#__system___string_cmp
02ca0     00 FA 0D F2 | 	cmp	result1, #0 wz
02ca4     5C 01 90 AD |  if_e	jmp	#LR__0150
02ca8     3D 01 00 FF 
02cac     18 14 06 F6 | 	mov	arg02, ##@LR__4365
02cb0     0F 13 02 F6 | 	mov	arg01, local01
02cb4     CC 58 B1 FD | 	call	#__system___string_cmp
02cb8     00 FA 0D F2 | 	cmp	result1, #0 wz
02cbc     4C 01 90 AD |  if_e	jmp	#LR__0151
02cc0     3D 01 00 FF 
02cc4     1A 14 06 F6 | 	mov	arg02, ##@LR__4366
02cc8     0F 13 02 F6 | 	mov	arg01, local01
02ccc     B4 58 B1 FD | 	call	#__system___string_cmp
02cd0     00 FA 0D F2 | 	cmp	result1, #0 wz
02cd4     3C 01 90 AD |  if_e	jmp	#LR__0152
02cd8     3D 01 00 FF 
02cdc     1E 14 06 F6 | 	mov	arg02, ##@LR__4367
02ce0     0F 13 02 F6 | 	mov	arg01, local01
02ce4     9C 58 B1 FD | 	call	#__system___string_cmp
02ce8     00 FA 0D F2 | 	cmp	result1, #0 wz
02cec     2C 01 90 AD |  if_e	jmp	#LR__0153
02cf0     3D 01 00 FF 
02cf4     20 14 06 F6 | 	mov	arg02, ##@LR__4368
02cf8     0F 13 02 F6 | 	mov	arg01, local01
02cfc     84 58 B1 FD | 	call	#__system___string_cmp
02d00     00 FA 0D F2 | 	cmp	result1, #0 wz
02d04     1C 01 90 AD |  if_e	jmp	#LR__0154
02d08     3D 01 00 FF 
02d0c     22 14 06 F6 | 	mov	arg02, ##@LR__4369
02d10     0F 13 02 F6 | 	mov	arg01, local01
02d14     6C 58 B1 FD | 	call	#__system___string_cmp
02d18     00 FA 0D F2 | 	cmp	result1, #0 wz
02d1c     0C 01 90 AD |  if_e	jmp	#LR__0155
02d20     3D 01 00 FF 
02d24     25 14 06 F6 | 	mov	arg02, ##@LR__4370
02d28     0F 13 02 F6 | 	mov	arg01, local01
02d2c     54 58 B1 FD | 	call	#__system___string_cmp
02d30     00 FA 0D F2 | 	cmp	result1, #0 wz
02d34     FC 00 90 AD |  if_e	jmp	#LR__0156
02d38     3D 01 00 FF 
02d3c     28 14 06 F6 | 	mov	arg02, ##@LR__4371
02d40     0F 13 02 F6 | 	mov	arg01, local01
02d44     3C 58 B1 FD | 	call	#__system___string_cmp
02d48     00 FA 0D F2 | 	cmp	result1, #0 wz
02d4c     EC 00 90 AD |  if_e	jmp	#LR__0157
02d50     3D 01 00 FF 
02d54     2A 14 06 F6 | 	mov	arg02, ##@LR__4372
02d58     0F 13 02 F6 | 	mov	arg01, local01
02d5c     24 58 B1 FD | 	call	#__system___string_cmp
02d60     00 FA 0D F2 | 	cmp	result1, #0 wz
02d64     DC 00 90 AD |  if_e	jmp	#LR__0158
02d68     3D 01 00 FF 
02d6c     2C 14 06 F6 | 	mov	arg02, ##@LR__4373
02d70     0F 13 02 F6 | 	mov	arg01, local01
02d74     0C 58 B1 FD | 	call	#__system___string_cmp
02d78     00 FA 0D F2 | 	cmp	result1, #0 wz
02d7c     CC 00 90 AD |  if_e	jmp	#LR__0159
02d80     3D 01 00 FF 
02d84     2F 14 06 F6 | 	mov	arg02, ##@LR__4374
02d88     0F 13 02 F6 | 	mov	arg01, local01
02d8c     F4 57 B1 FD | 	call	#__system___string_cmp
02d90     00 FA 0D F2 | 	cmp	result1, #0 wz
02d94     BC 00 90 AD |  if_e	jmp	#LR__0160
02d98     3D 01 00 FF 
02d9c     32 14 06 F6 | 	mov	arg02, ##@LR__4375
02da0     0F 13 02 F6 | 	mov	arg01, local01
02da4     DC 57 B1 FD | 	call	#__system___string_cmp
02da8     00 FA 0D F2 | 	cmp	result1, #0 wz
02dac     AC 00 90 AD |  if_e	jmp	#LR__0161
02db0     B0 00 90 FD | 	jmp	#LR__0162
02db4                 | LR__0140
02db4     01 FA 05 F6 | 	mov	result1, #1
02db8     AC 00 90 FD | 	jmp	#LR__0163
02dbc                 | LR__0141
02dbc     02 FA 05 F6 | 	mov	result1, #2
02dc0     A4 00 90 FD | 	jmp	#LR__0163
02dc4                 | LR__0142
02dc4     03 FA 05 F6 | 	mov	result1, #3
02dc8     9C 00 90 FD | 	jmp	#LR__0163
02dcc                 | LR__0143
02dcc     04 FA 05 F6 | 	mov	result1, #4
02dd0     94 00 90 FD | 	jmp	#LR__0163
02dd4                 | LR__0144
02dd4     05 FA 05 F6 | 	mov	result1, #5
02dd8     8C 00 90 FD | 	jmp	#LR__0163
02ddc                 | LR__0145
02ddc     06 FA 05 F6 | 	mov	result1, #6
02de0     84 00 90 FD | 	jmp	#LR__0163
02de4                 | LR__0146
02de4     07 FA 05 F6 | 	mov	result1, #7
02de8     7C 00 90 FD | 	jmp	#LR__0163
02dec                 | LR__0147
02dec     08 FA 05 F6 | 	mov	result1, #8
02df0     74 00 90 FD | 	jmp	#LR__0163
02df4                 | LR__0148
02df4     09 FA 05 F6 | 	mov	result1, #9
02df8     6C 00 90 FD | 	jmp	#LR__0163
02dfc                 | LR__0149
02dfc     0A FA 05 F6 | 	mov	result1, #10
02e00     64 00 90 FD | 	jmp	#LR__0163
02e04                 | LR__0150
02e04     0B FA 05 F6 | 	mov	result1, #11
02e08     5C 00 90 FD | 	jmp	#LR__0163
02e0c                 | LR__0151
02e0c     0C FA 05 F6 | 	mov	result1, #12
02e10     54 00 90 FD | 	jmp	#LR__0163
02e14                 | LR__0152
02e14     0D FA 05 F6 | 	mov	result1, #13
02e18     4C 00 90 FD | 	jmp	#LR__0163
02e1c                 | LR__0153
02e1c     0E FA 05 F6 | 	mov	result1, #14
02e20     44 00 90 FD | 	jmp	#LR__0163
02e24                 | LR__0154
02e24     1B FA 05 F6 | 	mov	result1, #27
02e28     3C 00 90 FD | 	jmp	#LR__0163
02e2c                 | LR__0155
02e2c     27 FA 05 F6 | 	mov	result1, #39
02e30     34 00 90 FD | 	jmp	#LR__0163
02e34                 | LR__0156
02e34     26 FA 05 F6 | 	mov	result1, #38
02e38     2C 00 90 FD | 	jmp	#LR__0163
02e3c                 | LR__0157
02e3c     10 FA 05 F6 | 	mov	result1, #16
02e40     24 00 90 FD | 	jmp	#LR__0163
02e44                 | LR__0158
02e44     0F FA 05 F6 | 	mov	result1, #15
02e48     1C 00 90 FD | 	jmp	#LR__0163
02e4c                 | LR__0159
02e4c     2A FA 05 F6 | 	mov	result1, #42
02e50     14 00 90 FD | 	jmp	#LR__0163
02e54                 | LR__0160
02e54     28 FA 05 F6 | 	mov	result1, #40
02e58     0C 00 90 FD | 	jmp	#LR__0163
02e5c                 | LR__0161
02e5c     29 FA 05 F6 | 	mov	result1, #41
02e60     04 00 90 FD | 	jmp	#LR__0163
02e64                 | LR__0162
02e64     00 FA 05 F6 | 	mov	result1, #0
02e68                 | LR__0163
02e68     A7 F0 03 F6 | 	mov	ptra, fp
02e6c     B2 00 A0 FD | 	call	#popregs_
02e70                 | _isoperator_ret
02e70     2D 00 64 FD | 	ret
02e74                 | 
02e74                 | ' 
02e74                 | ' function isseparator(s as string) as ubyte
02e74                 | _isseparator
02e74     01 4A 05 F6 | 	mov	COUNT_, #1
02e78     A8 00 A0 FD | 	call	#pushregs_
02e7c                 | ' 
02e7c                 | ' select case s
02e7c     09 1F 02 F6 | 	mov	local01, arg01
02e80     3D 01 00 FF 
02e84     35 14 06 F6 | 	mov	arg02, ##@LR__4376
02e88     0F 13 02 F6 | 	mov	arg01, local01
02e8c     F4 56 B1 FD | 	call	#__system___string_cmp
02e90     00 FA 0D F2 | 	cmp	result1, #0 wz
02e94     54 01 90 AD |  if_e	jmp	#LR__0170
02e98     3D 01 00 FF 
02e9c     37 14 06 F6 | 	mov	arg02, ##@LR__4377
02ea0     0F 13 02 F6 | 	mov	arg01, local01
02ea4     DC 56 B1 FD | 	call	#__system___string_cmp
02ea8     00 FA 0D F2 | 	cmp	result1, #0 wz
02eac     44 01 90 AD |  if_e	jmp	#LR__0171
02eb0     3D 01 00 FF 
02eb4     39 14 06 F6 | 	mov	arg02, ##@LR__4378
02eb8     0F 13 02 F6 | 	mov	arg01, local01
02ebc     C4 56 B1 FD | 	call	#__system___string_cmp
02ec0     00 FA 0D F2 | 	cmp	result1, #0 wz
02ec4     34 01 90 AD |  if_e	jmp	#LR__0172
02ec8     3D 01 00 FF 
02ecc     3B 14 06 F6 | 	mov	arg02, ##@LR__4379
02ed0     0F 13 02 F6 | 	mov	arg01, local01
02ed4     AC 56 B1 FD | 	call	#__system___string_cmp
02ed8     00 FA 0D F2 | 	cmp	result1, #0 wz
02edc     24 01 90 AD |  if_e	jmp	#LR__0173
02ee0     3D 01 00 FF 
02ee4     3D 14 06 F6 | 	mov	arg02, ##@LR__4380
02ee8     0F 13 02 F6 | 	mov	arg01, local01
02eec     94 56 B1 FD | 	call	#__system___string_cmp
02ef0     00 FA 0D F2 | 	cmp	result1, #0 wz
02ef4     14 01 90 AD |  if_e	jmp	#LR__0174
02ef8     3D 01 00 FF 
02efc     3F 14 06 F6 | 	mov	arg02, ##@LR__4381
02f00     0F 13 02 F6 | 	mov	arg01, local01
02f04     7C 56 B1 FD | 	call	#__system___string_cmp
02f08     00 FA 0D F2 | 	cmp	result1, #0 wz
02f0c     04 01 90 AD |  if_e	jmp	#LR__0175
02f10     3D 01 00 FF 
02f14     41 14 06 F6 | 	mov	arg02, ##@LR__4382
02f18     0F 13 02 F6 | 	mov	arg01, local01
02f1c     64 56 B1 FD | 	call	#__system___string_cmp
02f20     00 FA 0D F2 | 	cmp	result1, #0 wz
02f24     F4 00 90 AD |  if_e	jmp	#LR__0176
02f28     3D 01 00 FF 
02f2c     43 14 06 F6 | 	mov	arg02, ##@LR__4383
02f30     0F 13 02 F6 | 	mov	arg01, local01
02f34     4C 56 B1 FD | 	call	#__system___string_cmp
02f38     00 FA 0D F2 | 	cmp	result1, #0 wz
02f3c     E4 00 90 AD |  if_e	jmp	#LR__0177
02f40     3D 01 00 FF 
02f44     45 14 06 F6 | 	mov	arg02, ##@LR__4384
02f48     0F 13 02 F6 | 	mov	arg01, local01
02f4c     34 56 B1 FD | 	call	#__system___string_cmp
02f50     00 FA 0D F2 | 	cmp	result1, #0 wz
02f54     D4 00 90 AD |  if_e	jmp	#LR__0178
02f58     3D 01 00 FF 
02f5c     47 14 06 F6 | 	mov	arg02, ##@LR__4385
02f60     0F 13 02 F6 | 	mov	arg01, local01
02f64     1C 56 B1 FD | 	call	#__system___string_cmp
02f68     00 FA 0D F2 | 	cmp	result1, #0 wz
02f6c     C4 00 90 AD |  if_e	jmp	#LR__0179
02f70     3D 01 00 FF 
02f74     49 14 06 F6 | 	mov	arg02, ##@LR__4386
02f78     0F 13 02 F6 | 	mov	arg01, local01
02f7c     04 56 B1 FD | 	call	#__system___string_cmp
02f80     00 FA 0D F2 | 	cmp	result1, #0 wz
02f84     B4 00 90 AD |  if_e	jmp	#LR__0180
02f88     3D 01 00 FF 
02f8c     4B 14 06 F6 | 	mov	arg02, ##@LR__4387
02f90     0F 13 02 F6 | 	mov	arg01, local01
02f94     EC 55 B1 FD | 	call	#__system___string_cmp
02f98     00 FA 0D F2 | 	cmp	result1, #0 wz
02f9c     A4 00 90 AD |  if_e	jmp	#LR__0181
02fa0     3D 01 00 FF 
02fa4     4D 14 06 F6 | 	mov	arg02, ##@LR__4388
02fa8     0F 13 02 F6 | 	mov	arg01, local01
02fac     D4 55 B1 FD | 	call	#__system___string_cmp
02fb0     00 FA 0D F2 | 	cmp	result1, #0 wz
02fb4     94 00 90 AD |  if_e	jmp	#LR__0182
02fb8     3D 01 00 FF 
02fbc     4F 14 06 F6 | 	mov	arg02, ##@LR__4389
02fc0     0F 13 02 F6 | 	mov	arg01, local01
02fc4     BC 55 B1 FD | 	call	#__system___string_cmp
02fc8     00 FA 0D F2 | 	cmp	result1, #0 wz
02fcc     84 00 90 AD |  if_e	jmp	#LR__0183
02fd0     3D 01 00 FF 
02fd4     51 14 06 F6 | 	mov	arg02, ##@LR__4390
02fd8     0F 13 02 F6 | 	mov	arg01, local01
02fdc     A4 55 B1 FD | 	call	#__system___string_cmp
02fe0     00 FA 0D F2 | 	cmp	result1, #0 wz
02fe4     74 00 90 AD |  if_e	jmp	#LR__0184
02fe8     78 00 90 FD | 	jmp	#LR__0185
02fec                 | LR__0170
02fec     01 FA 05 F6 | 	mov	result1, #1
02ff0     74 00 90 FD | 	jmp	#LR__0186
02ff4                 | LR__0171
02ff4     02 FA 05 F6 | 	mov	result1, #2
02ff8     6C 00 90 FD | 	jmp	#LR__0186
02ffc                 | LR__0172
02ffc     1B FA 05 F6 | 	mov	result1, #27
03000     64 00 90 FD | 	jmp	#LR__0186
03004                 | LR__0173
03004     11 FA 05 F6 | 	mov	result1, #17
03008     5C 00 90 FD | 	jmp	#LR__0186
0300c                 | LR__0174
0300c     05 FA 05 F6 | 	mov	result1, #5
03010     54 00 90 FD | 	jmp	#LR__0186
03014                 | LR__0175
03014     06 FA 05 F6 | 	mov	result1, #6
03018     4C 00 90 FD | 	jmp	#LR__0186
0301c                 | LR__0176
0301c     12 FA 05 F6 | 	mov	result1, #18
03020     44 00 90 FD | 	jmp	#LR__0186
03024                 | LR__0177
03024     13 FA 05 F6 | 	mov	result1, #19
03028     3C 00 90 FD | 	jmp	#LR__0186
0302c                 | LR__0178
0302c     0C FA 05 F6 | 	mov	result1, #12
03030     34 00 90 FD | 	jmp	#LR__0186
03034                 | LR__0179
03034     14 FA 05 F6 | 	mov	result1, #20
03038     2C 00 90 FD | 	jmp	#LR__0186
0303c                 | LR__0180
0303c     15 FA 05 F6 | 	mov	result1, #21
03040     24 00 90 FD | 	jmp	#LR__0186
03044                 | LR__0181
03044     16 FA 05 F6 | 	mov	result1, #22
03048     1C 00 90 FD | 	jmp	#LR__0186
0304c                 | LR__0182
0304c     FF FB 05 F6 | 	mov	result1, #511
03050     14 00 90 FD | 	jmp	#LR__0186
03054                 | LR__0183
03054     0F FA 05 F6 | 	mov	result1, #15
03058     0C 00 90 FD | 	jmp	#LR__0186
0305c                 | LR__0184
0305c     10 FA 05 F6 | 	mov	result1, #16
03060     04 00 90 FD | 	jmp	#LR__0186
03064                 | LR__0185
03064     00 FA 05 F6 | 	mov	result1, #0
03068                 | LR__0186
03068     A7 F0 03 F6 | 	mov	ptra, fp
0306c     B2 00 A0 FD | 	call	#popregs_
03070                 | _isseparator_ret
03070     2D 00 64 FD | 	ret
03074                 | 
03074                 | ' 
03074                 | ' 
03074                 | ' function iscommand(s as string) as ubyte
03074                 | _iscommand
03074     01 4A 05 F6 | 	mov	COUNT_, #1
03078     A8 00 A0 FD | 	call	#pushregs_
0307c                 | ' 
0307c                 | ' select case s
0307c     09 1F 02 F6 | 	mov	local01, arg01
03080     3D 01 00 FF 
03084     55 14 06 F6 | 	mov	arg02, ##@LR__4392
03088     0F 13 02 F6 | 	mov	arg01, local01
0308c     F4 54 B1 FD | 	call	#__system___string_cmp
03090     00 FA 0D F2 | 	cmp	result1, #0 wz
03094     F4 06 90 AD |  if_e	jmp	#LR__0190
03098     3D 01 00 FF 
0309c     5A 14 06 F6 | 	mov	arg02, ##@LR__4393
030a0     0F 13 02 F6 | 	mov	arg01, local01
030a4     DC 54 B1 FD | 	call	#__system___string_cmp
030a8     00 FA 0D F2 | 	cmp	result1, #0 wz
030ac     E4 06 90 AD |  if_e	jmp	#LR__0191
030b0     3D 01 00 FF 
030b4     5D 14 06 F6 | 	mov	arg02, ##@LR__4394
030b8     0F 13 02 F6 | 	mov	arg01, local01
030bc     C4 54 B1 FD | 	call	#__system___string_cmp
030c0     00 FA 0D F2 | 	cmp	result1, #0 wz
030c4     D4 06 90 AD |  if_e	jmp	#LR__0192
030c8     3D 01 00 FF 
030cc     61 14 06 F6 | 	mov	arg02, ##@LR__4395
030d0     0F 13 02 F6 | 	mov	arg01, local01
030d4     AC 54 B1 FD | 	call	#__system___string_cmp
030d8     00 FA 0D F2 | 	cmp	result1, #0 wz
030dc     C4 06 90 AD |  if_e	jmp	#LR__0193
030e0     3D 01 00 FF 
030e4     66 14 06 F6 | 	mov	arg02, ##@LR__4396
030e8     0F 13 02 F6 | 	mov	arg01, local01
030ec     94 54 B1 FD | 	call	#__system___string_cmp
030f0     00 FA 0D F2 | 	cmp	result1, #0 wz
030f4     B4 06 90 AD |  if_e	jmp	#LR__0194
030f8     3D 01 00 FF 
030fc     6A 14 06 F6 | 	mov	arg02, ##@LR__4397
03100     0F 13 02 F6 | 	mov	arg01, local01
03104     7C 54 B1 FD | 	call	#__system___string_cmp
03108     00 FA 0D F2 | 	cmp	result1, #0 wz
0310c     A4 06 90 AD |  if_e	jmp	#LR__0195
03110     3D 01 00 FF 
03114     71 14 06 F6 | 	mov	arg02, ##@LR__4398
03118     0F 13 02 F6 | 	mov	arg01, local01
0311c     64 54 B1 FD | 	call	#__system___string_cmp
03120     00 FA 0D F2 | 	cmp	result1, #0 wz
03124     94 06 90 AD |  if_e	jmp	#LR__0196
03128     3D 01 00 FF 
0312c     75 14 06 F6 | 	mov	arg02, ##@LR__4399
03130     0F 13 02 F6 | 	mov	arg01, local01
03134     4C 54 B1 FD | 	call	#__system___string_cmp
03138     00 FA 0D F2 | 	cmp	result1, #0 wz
0313c     84 06 90 AD |  if_e	jmp	#LR__0197
03140     3D 01 00 FF 
03144     7B 14 06 F6 | 	mov	arg02, ##@LR__4400
03148     0F 13 02 F6 | 	mov	arg01, local01
0314c     34 54 B1 FD | 	call	#__system___string_cmp
03150     00 FA 0D F2 | 	cmp	result1, #0 wz
03154     74 06 90 AD |  if_e	jmp	#LR__0198
03158     3D 01 00 FF 
0315c     7F 14 06 F6 | 	mov	arg02, ##@LR__4401
03160     0F 13 02 F6 | 	mov	arg01, local01
03164     1C 54 B1 FD | 	call	#__system___string_cmp
03168     00 FA 0D F2 | 	cmp	result1, #0 wz
0316c     64 06 90 AD |  if_e	jmp	#LR__0199
03170     3D 01 00 FF 
03174     85 14 06 F6 | 	mov	arg02, ##@LR__4402
03178     0F 13 02 F6 | 	mov	arg01, local01
0317c     04 54 B1 FD | 	call	#__system___string_cmp
03180     00 FA 0D F2 | 	cmp	result1, #0 wz
03184     54 06 90 AD |  if_e	jmp	#LR__0200
03188     3D 01 00 FF 
0318c     88 14 06 F6 | 	mov	arg02, ##@LR__4403
03190     0F 13 02 F6 | 	mov	arg01, local01
03194     EC 53 B1 FD | 	call	#__system___string_cmp
03198     00 FA 0D F2 | 	cmp	result1, #0 wz
0319c     44 06 90 AD |  if_e	jmp	#LR__0201
031a0     3D 01 00 FF 
031a4     8E 14 06 F6 | 	mov	arg02, ##@LR__4404
031a8     0F 13 02 F6 | 	mov	arg01, local01
031ac     D4 53 B1 FD | 	call	#__system___string_cmp
031b0     00 FA 0D F2 | 	cmp	result1, #0 wz
031b4     34 06 90 AD |  if_e	jmp	#LR__0202
031b8     3D 01 00 FF 
031bc     92 14 06 F6 | 	mov	arg02, ##@LR__4405
031c0     0F 13 02 F6 | 	mov	arg01, local01
031c4     BC 53 B1 FD | 	call	#__system___string_cmp
031c8     00 FA 0D F2 | 	cmp	result1, #0 wz
031cc     24 06 90 AD |  if_e	jmp	#LR__0203
031d0     3D 01 00 FF 
031d4     99 14 06 F6 | 	mov	arg02, ##@LR__4406
031d8     0F 13 02 F6 | 	mov	arg01, local01
031dc     A4 53 B1 FD | 	call	#__system___string_cmp
031e0     00 FA 0D F2 | 	cmp	result1, #0 wz
031e4     14 06 90 AD |  if_e	jmp	#LR__0204
031e8     3D 01 00 FF 
031ec     A0 14 06 F6 | 	mov	arg02, ##@LR__4407
031f0     0F 13 02 F6 | 	mov	arg01, local01
031f4     8C 53 B1 FD | 	call	#__system___string_cmp
031f8     00 FA 0D F2 | 	cmp	result1, #0 wz
031fc     04 06 90 AD |  if_e	jmp	#LR__0205
03200     3D 01 00 FF 
03204     A7 14 06 F6 | 	mov	arg02, ##@LR__4408
03208     0F 13 02 F6 | 	mov	arg01, local01
0320c     74 53 B1 FD | 	call	#__system___string_cmp
03210     00 FA 0D F2 | 	cmp	result1, #0 wz
03214     F4 05 90 AD |  if_e	jmp	#LR__0206
03218     3D 01 00 FF 
0321c     B1 14 06 F6 | 	mov	arg02, ##@LR__4409
03220     0F 13 02 F6 | 	mov	arg01, local01
03224     5C 53 B1 FD | 	call	#__system___string_cmp
03228     00 FA 0D F2 | 	cmp	result1, #0 wz
0322c     E4 05 90 AD |  if_e	jmp	#LR__0207
03230     3D 01 00 FF 
03234     B5 14 06 F6 | 	mov	arg02, ##@LR__4410
03238     0F 13 02 F6 | 	mov	arg01, local01
0323c     44 53 B1 FD | 	call	#__system___string_cmp
03240     00 FA 0D F2 | 	cmp	result1, #0 wz
03244     D4 05 90 AD |  if_e	jmp	#LR__0208
03248     3D 01 00 FF 
0324c     B9 14 06 F6 | 	mov	arg02, ##@LR__4411
03250     0F 13 02 F6 | 	mov	arg01, local01
03254     2C 53 B1 FD | 	call	#__system___string_cmp
03258     00 FA 0D F2 | 	cmp	result1, #0 wz
0325c     C4 05 90 AD |  if_e	jmp	#LR__0209
03260     3D 01 00 FF 
03264     BD 14 06 F6 | 	mov	arg02, ##@LR__4412
03268     0F 13 02 F6 | 	mov	arg01, local01
0326c     14 53 B1 FD | 	call	#__system___string_cmp
03270     00 FA 0D F2 | 	cmp	result1, #0 wz
03274     B4 05 90 AD |  if_e	jmp	#LR__0210
03278     3D 01 00 FF 
0327c     C2 14 06 F6 | 	mov	arg02, ##@LR__4413
03280     0F 13 02 F6 | 	mov	arg01, local01
03284     FC 52 B1 FD | 	call	#__system___string_cmp
03288     00 FA 0D F2 | 	cmp	result1, #0 wz
0328c     A4 05 90 AD |  if_e	jmp	#LR__0211
03290     3D 01 00 FF 
03294     C6 14 06 F6 | 	mov	arg02, ##@LR__4414
03298     0F 13 02 F6 | 	mov	arg01, local01
0329c     E4 52 B1 FD | 	call	#__system___string_cmp
032a0     00 FA 0D F2 | 	cmp	result1, #0 wz
032a4     94 05 90 AD |  if_e	jmp	#LR__0212
032a8     3D 01 00 FF 
032ac     CB 14 06 F6 | 	mov	arg02, ##@LR__4415
032b0     0F 13 02 F6 | 	mov	arg01, local01
032b4     CC 52 B1 FD | 	call	#__system___string_cmp
032b8     00 FA 0D F2 | 	cmp	result1, #0 wz
032bc     84 05 90 AD |  if_e	jmp	#LR__0213
032c0     3D 01 00 FF 
032c4     D3 14 06 F6 | 	mov	arg02, ##@LR__4416
032c8     0F 13 02 F6 | 	mov	arg01, local01
032cc     B4 52 B1 FD | 	call	#__system___string_cmp
032d0     00 FA 0D F2 | 	cmp	result1, #0 wz
032d4     74 05 90 AD |  if_e	jmp	#LR__0214
032d8     3D 01 00 FF 
032dc     D7 14 06 F6 | 	mov	arg02, ##@LR__4417
032e0     0F 13 02 F6 | 	mov	arg01, local01
032e4     9C 52 B1 FD | 	call	#__system___string_cmp
032e8     00 FA 0D F2 | 	cmp	result1, #0 wz
032ec     64 05 90 AD |  if_e	jmp	#LR__0215
032f0     3D 01 00 FF 
032f4     DC 14 06 F6 | 	mov	arg02, ##@LR__4418
032f8     0F 13 02 F6 | 	mov	arg01, local01
032fc     84 52 B1 FD | 	call	#__system___string_cmp
03300     00 FA 0D F2 | 	cmp	result1, #0 wz
03304     54 05 90 AD |  if_e	jmp	#LR__0216
03308     3D 01 00 FF 
0330c     E0 14 06 F6 | 	mov	arg02, ##@LR__4419
03310     0F 13 02 F6 | 	mov	arg01, local01
03314     6C 52 B1 FD | 	call	#__system___string_cmp
03318     00 FA 0D F2 | 	cmp	result1, #0 wz
0331c     44 05 90 AD |  if_e	jmp	#LR__0217
03320     3D 01 00 FF 
03324     E5 14 06 F6 | 	mov	arg02, ##@LR__4420
03328     0F 13 02 F6 | 	mov	arg01, local01
0332c     54 52 B1 FD | 	call	#__system___string_cmp
03330     00 FA 0D F2 | 	cmp	result1, #0 wz
03334     34 05 90 AD |  if_e	jmp	#LR__0218
03338     3D 01 00 FF 
0333c     E9 14 06 F6 | 	mov	arg02, ##@LR__4421
03340     0F 13 02 F6 | 	mov	arg01, local01
03344     3C 52 B1 FD | 	call	#__system___string_cmp
03348     00 FA 0D F2 | 	cmp	result1, #0 wz
0334c     24 05 90 AD |  if_e	jmp	#LR__0219
03350     3D 01 00 FF 
03354     EC 14 06 F6 | 	mov	arg02, ##@LR__4422
03358     0F 13 02 F6 | 	mov	arg01, local01
0335c     24 52 B1 FD | 	call	#__system___string_cmp
03360     00 FA 0D F2 | 	cmp	result1, #0 wz
03364     14 05 90 AD |  if_e	jmp	#LR__0220
03368     3D 01 00 FF 
0336c     F2 14 06 F6 | 	mov	arg02, ##@LR__4423
03370     0F 13 02 F6 | 	mov	arg01, local01
03374     0C 52 B1 FD | 	call	#__system___string_cmp
03378     00 FA 0D F2 | 	cmp	result1, #0 wz
0337c     04 05 90 AD |  if_e	jmp	#LR__0221
03380     3D 01 00 FF 
03384     F6 14 06 F6 | 	mov	arg02, ##@LR__4424
03388     0F 13 02 F6 | 	mov	arg01, local01
0338c     F4 51 B1 FD | 	call	#__system___string_cmp
03390     00 FA 0D F2 | 	cmp	result1, #0 wz
03394     F4 04 90 AD |  if_e	jmp	#LR__0222
03398     3D 01 00 FF 
0339c     FB 14 06 F6 | 	mov	arg02, ##@LR__4425
033a0     0F 13 02 F6 | 	mov	arg01, local01
033a4     DC 51 B1 FD | 	call	#__system___string_cmp
033a8     00 FA 0D F2 | 	cmp	result1, #0 wz
033ac     E4 04 90 AD |  if_e	jmp	#LR__0223
033b0     3D 01 00 FF 
033b4     FE 14 06 F6 | 	mov	arg02, ##@LR__4426
033b8     0F 13 02 F6 | 	mov	arg01, local01
033bc     C4 51 B1 FD | 	call	#__system___string_cmp
033c0     00 FA 0D F2 | 	cmp	result1, #0 wz
033c4     D4 04 90 AD |  if_e	jmp	#LR__0224
033c8     3D 01 00 FF 
033cc     01 15 06 F6 | 	mov	arg02, ##@LR__4427
033d0     0F 13 02 F6 | 	mov	arg01, local01
033d4     AC 51 B1 FD | 	call	#__system___string_cmp
033d8     00 FA 0D F2 | 	cmp	result1, #0 wz
033dc     C4 04 90 AD |  if_e	jmp	#LR__0225
033e0     3D 01 00 FF 
033e4     05 15 06 F6 | 	mov	arg02, ##@LR__4428
033e8     0F 13 02 F6 | 	mov	arg01, local01
033ec     94 51 B1 FD | 	call	#__system___string_cmp
033f0     00 FA 0D F2 | 	cmp	result1, #0 wz
033f4     B4 04 90 AD |  if_e	jmp	#LR__0226
033f8     3D 01 00 FF 
033fc     08 15 06 F6 | 	mov	arg02, ##@LR__4429
03400     0F 13 02 F6 | 	mov	arg01, local01
03404     7C 51 B1 FD | 	call	#__system___string_cmp
03408     00 FA 0D F2 | 	cmp	result1, #0 wz
0340c     A4 04 90 AD |  if_e	jmp	#LR__0227
03410     3D 01 00 FF 
03414     0D 15 06 F6 | 	mov	arg02, ##@LR__4430
03418     0F 13 02 F6 | 	mov	arg01, local01
0341c     64 51 B1 FD | 	call	#__system___string_cmp
03420     00 FA 0D F2 | 	cmp	result1, #0 wz
03424     94 04 90 AD |  if_e	jmp	#LR__0228
03428     3D 01 00 FF 
0342c     10 15 06 F6 | 	mov	arg02, ##@LR__4431
03430     0F 13 02 F6 | 	mov	arg01, local01
03434     4C 51 B1 FD | 	call	#__system___string_cmp
03438     00 FA 0D F2 | 	cmp	result1, #0 wz
0343c     84 04 90 AD |  if_e	jmp	#LR__0229
03440     3D 01 00 FF 
03444     15 15 06 F6 | 	mov	arg02, ##@LR__4432
03448     0F 13 02 F6 | 	mov	arg01, local01
0344c     34 51 B1 FD | 	call	#__system___string_cmp
03450     00 FA 0D F2 | 	cmp	result1, #0 wz
03454     74 04 90 AD |  if_e	jmp	#LR__0230
03458     3D 01 00 FF 
0345c     19 15 06 F6 | 	mov	arg02, ##@LR__4433
03460     0F 13 02 F6 | 	mov	arg01, local01
03464     1C 51 B1 FD | 	call	#__system___string_cmp
03468     00 FA 0D F2 | 	cmp	result1, #0 wz
0346c     64 04 90 AD |  if_e	jmp	#LR__0231
03470     3D 01 00 FF 
03474     1E 15 06 F6 | 	mov	arg02, ##@LR__4434
03478     0F 13 02 F6 | 	mov	arg01, local01
0347c     04 51 B1 FD | 	call	#__system___string_cmp
03480     00 FA 0D F2 | 	cmp	result1, #0 wz
03484     54 04 90 AD |  if_e	jmp	#LR__0232
03488     3D 01 00 FF 
0348c     21 15 06 F6 | 	mov	arg02, ##@LR__4435
03490     0F 13 02 F6 | 	mov	arg01, local01
03494     EC 50 B1 FD | 	call	#__system___string_cmp
03498     00 FA 0D F2 | 	cmp	result1, #0 wz
0349c     44 04 90 AD |  if_e	jmp	#LR__0233
034a0     3D 01 00 FF 
034a4     27 15 06 F6 | 	mov	arg02, ##@LR__4436
034a8     0F 13 02 F6 | 	mov	arg01, local01
034ac     D4 50 B1 FD | 	call	#__system___string_cmp
034b0     00 FA 0D F2 | 	cmp	result1, #0 wz
034b4     34 04 90 AD |  if_e	jmp	#LR__0234
034b8     3D 01 00 FF 
034bc     2B 15 06 F6 | 	mov	arg02, ##@LR__4437
034c0     0F 13 02 F6 | 	mov	arg01, local01
034c4     BC 50 B1 FD | 	call	#__system___string_cmp
034c8     00 FA 0D F2 | 	cmp	result1, #0 wz
034cc     24 04 90 AD |  if_e	jmp	#LR__0235
034d0     3D 01 00 FF 
034d4     30 15 06 F6 | 	mov	arg02, ##@LR__4438
034d8     0F 13 02 F6 | 	mov	arg01, local01
034dc     A4 50 B1 FD | 	call	#__system___string_cmp
034e0     00 FA 0D F2 | 	cmp	result1, #0 wz
034e4     14 04 90 AD |  if_e	jmp	#LR__0236
034e8     3D 01 00 FF 
034ec     33 15 06 F6 | 	mov	arg02, ##@LR__4439
034f0     0F 13 02 F6 | 	mov	arg01, local01
034f4     8C 50 B1 FD | 	call	#__system___string_cmp
034f8     00 FA 0D F2 | 	cmp	result1, #0 wz
034fc     04 04 90 AD |  if_e	jmp	#LR__0237
03500     3D 01 00 FF 
03504     39 15 06 F6 | 	mov	arg02, ##@LR__4440
03508     0F 13 02 F6 | 	mov	arg01, local01
0350c     74 50 B1 FD | 	call	#__system___string_cmp
03510     00 FA 0D F2 | 	cmp	result1, #0 wz
03514     F4 03 90 AD |  if_e	jmp	#LR__0238
03518     3D 01 00 FF 
0351c     3C 15 06 F6 | 	mov	arg02, ##@LR__4441
03520     0F 13 02 F6 | 	mov	arg01, local01
03524     5C 50 B1 FD | 	call	#__system___string_cmp
03528     00 FA 0D F2 | 	cmp	result1, #0 wz
0352c     E4 03 90 AD |  if_e	jmp	#LR__0239
03530     3D 01 00 FF 
03534     45 15 06 F6 | 	mov	arg02, ##@LR__4442
03538     0F 13 02 F6 | 	mov	arg01, local01
0353c     44 50 B1 FD | 	call	#__system___string_cmp
03540     00 FA 0D F2 | 	cmp	result1, #0 wz
03544     D4 03 90 AD |  if_e	jmp	#LR__0240
03548     3D 01 00 FF 
0354c     4B 15 06 F6 | 	mov	arg02, ##@LR__4443
03550     0F 13 02 F6 | 	mov	arg01, local01
03554     2C 50 B1 FD | 	call	#__system___string_cmp
03558     00 FA 0D F2 | 	cmp	result1, #0 wz
0355c     C4 03 90 AD |  if_e	jmp	#LR__0241
03560     3D 01 00 FF 
03564     51 15 06 F6 | 	mov	arg02, ##@LR__4444
03568     0F 13 02 F6 | 	mov	arg01, local01
0356c     14 50 B1 FD | 	call	#__system___string_cmp
03570     00 FA 0D F2 | 	cmp	result1, #0 wz
03574     B4 03 90 AD |  if_e	jmp	#LR__0242
03578     3D 01 00 FF 
0357c     5A 15 06 F6 | 	mov	arg02, ##@LR__4445
03580     0F 13 02 F6 | 	mov	arg01, local01
03584     FC 4F B1 FD | 	call	#__system___string_cmp
03588     00 FA 0D F2 | 	cmp	result1, #0 wz
0358c     A4 03 90 AD |  if_e	jmp	#LR__0243
03590     3D 01 00 FF 
03594     64 15 06 F6 | 	mov	arg02, ##@LR__4446
03598     0F 13 02 F6 | 	mov	arg01, local01
0359c     E4 4F B1 FD | 	call	#__system___string_cmp
035a0     00 FA 0D F2 | 	cmp	result1, #0 wz
035a4     94 03 90 AD |  if_e	jmp	#LR__0244
035a8     3D 01 00 FF 
035ac     6D 15 06 F6 | 	mov	arg02, ##@LR__4447
035b0     0F 13 02 F6 | 	mov	arg01, local01
035b4     CC 4F B1 FD | 	call	#__system___string_cmp
035b8     00 FA 0D F2 | 	cmp	result1, #0 wz
035bc     84 03 90 AD |  if_e	jmp	#LR__0245
035c0     3D 01 00 FF 
035c4     72 15 06 F6 | 	mov	arg02, ##@LR__4448
035c8     0F 13 02 F6 | 	mov	arg01, local01
035cc     B4 4F B1 FD | 	call	#__system___string_cmp
035d0     00 FA 0D F2 | 	cmp	result1, #0 wz
035d4     74 03 90 AD |  if_e	jmp	#LR__0246
035d8     3D 01 00 FF 
035dc     77 15 06 F6 | 	mov	arg02, ##@LR__4449
035e0     0F 13 02 F6 | 	mov	arg01, local01
035e4     9C 4F B1 FD | 	call	#__system___string_cmp
035e8     00 FA 0D F2 | 	cmp	result1, #0 wz
035ec     64 03 90 AD |  if_e	jmp	#LR__0247
035f0     3D 01 00 FF 
035f4     7B 15 06 F6 | 	mov	arg02, ##@LR__4450
035f8     0F 13 02 F6 | 	mov	arg01, local01
035fc     84 4F B1 FD | 	call	#__system___string_cmp
03600     00 FA 0D F2 | 	cmp	result1, #0 wz
03604     54 03 90 AD |  if_e	jmp	#LR__0248
03608     3D 01 00 FF 
0360c     84 15 06 F6 | 	mov	arg02, ##@LR__4451
03610     0F 13 02 F6 | 	mov	arg01, local01
03614     6C 4F B1 FD | 	call	#__system___string_cmp
03618     00 FA 0D F2 | 	cmp	result1, #0 wz
0361c     44 03 90 AD |  if_e	jmp	#LR__0249
03620     3D 01 00 FF 
03624     8A 15 06 F6 | 	mov	arg02, ##@LR__4452
03628     0F 13 02 F6 | 	mov	arg01, local01
0362c     54 4F B1 FD | 	call	#__system___string_cmp
03630     00 FA 0D F2 | 	cmp	result1, #0 wz
03634     34 03 90 AD |  if_e	jmp	#LR__0250
03638     3D 01 00 FF 
0363c     90 15 06 F6 | 	mov	arg02, ##@LR__4453
03640     0F 13 02 F6 | 	mov	arg01, local01
03644     3C 4F B1 FD | 	call	#__system___string_cmp
03648     00 FA 0D F2 | 	cmp	result1, #0 wz
0364c     24 03 90 AD |  if_e	jmp	#LR__0251
03650     3D 01 00 FF 
03654     92 15 06 F6 | 	mov	arg02, ##@LR__4454
03658     0F 13 02 F6 | 	mov	arg01, local01
0365c     24 4F B1 FD | 	call	#__system___string_cmp
03660     00 FA 0D F2 | 	cmp	result1, #0 wz
03664     14 03 90 AD |  if_e	jmp	#LR__0252
03668     3D 01 00 FF 
0366c     96 15 06 F6 | 	mov	arg02, ##@LR__4455
03670     0F 13 02 F6 | 	mov	arg01, local01
03674     0C 4F B1 FD | 	call	#__system___string_cmp
03678     00 FA 0D F2 | 	cmp	result1, #0 wz
0367c     04 03 90 AD |  if_e	jmp	#LR__0253
03680     3D 01 00 FF 
03684     9B 15 06 F6 | 	mov	arg02, ##@LR__4456
03688     0F 13 02 F6 | 	mov	arg01, local01
0368c     F4 4E B1 FD | 	call	#__system___string_cmp
03690     00 FA 0D F2 | 	cmp	result1, #0 wz
03694     F4 02 90 AD |  if_e	jmp	#LR__0254
03698     3D 01 00 FF 
0369c     9E 15 06 F6 | 	mov	arg02, ##@LR__4457
036a0     0F 13 02 F6 | 	mov	arg01, local01
036a4     DC 4E B1 FD | 	call	#__system___string_cmp
036a8     00 FA 0D F2 | 	cmp	result1, #0 wz
036ac     E4 02 90 AD |  if_e	jmp	#LR__0255
036b0     3D 01 00 FF 
036b4     A5 15 06 F6 | 	mov	arg02, ##@LR__4458
036b8     0F 13 02 F6 | 	mov	arg01, local01
036bc     C4 4E B1 FD | 	call	#__system___string_cmp
036c0     00 FA 0D F2 | 	cmp	result1, #0 wz
036c4     D4 02 90 AD |  if_e	jmp	#LR__0256
036c8     3D 01 00 FF 
036cc     A9 15 06 F6 | 	mov	arg02, ##@LR__4459
036d0     0F 13 02 F6 | 	mov	arg01, local01
036d4     AC 4E B1 FD | 	call	#__system___string_cmp
036d8     00 FA 0D F2 | 	cmp	result1, #0 wz
036dc     C4 02 90 AD |  if_e	jmp	#LR__0257
036e0     3D 01 00 FF 
036e4     AE 15 06 F6 | 	mov	arg02, ##@LR__4460
036e8     0F 13 02 F6 | 	mov	arg01, local01
036ec     94 4E B1 FD | 	call	#__system___string_cmp
036f0     00 FA 0D F2 | 	cmp	result1, #0 wz
036f4     B4 02 90 AD |  if_e	jmp	#LR__0258
036f8     3D 01 00 FF 
036fc     B5 15 06 F6 | 	mov	arg02, ##@LR__4461
03700     0F 13 02 F6 | 	mov	arg01, local01
03704     7C 4E B1 FD | 	call	#__system___string_cmp
03708     00 FA 0D F2 | 	cmp	result1, #0 wz
0370c     A4 02 90 AD |  if_e	jmp	#LR__0259
03710     3D 01 00 FF 
03714     BF 15 06 F6 | 	mov	arg02, ##@LR__4462
03718     0F 13 02 F6 | 	mov	arg01, local01
0371c     64 4E B1 FD | 	call	#__system___string_cmp
03720     00 FA 0D F2 | 	cmp	result1, #0 wz
03724     94 02 90 AD |  if_e	jmp	#LR__0260
03728     3D 01 00 FF 
0372c     C3 15 06 F6 | 	mov	arg02, ##@LR__4463
03730     0F 13 02 F6 | 	mov	arg01, local01
03734     4C 4E B1 FD | 	call	#__system___string_cmp
03738     00 FA 0D F2 | 	cmp	result1, #0 wz
0373c     84 02 90 AD |  if_e	jmp	#LR__0261
03740     3D 01 00 FF 
03744     CB 15 06 F6 | 	mov	arg02, ##@LR__4464
03748     0F 13 02 F6 | 	mov	arg01, local01
0374c     34 4E B1 FD | 	call	#__system___string_cmp
03750     00 FA 0D F2 | 	cmp	result1, #0 wz
03754     74 02 90 AD |  if_e	jmp	#LR__0262
03758     3D 01 00 FF 
0375c     CF 15 06 F6 | 	mov	arg02, ##@LR__4465
03760     0F 13 02 F6 | 	mov	arg01, local01
03764     1C 4E B1 FD | 	call	#__system___string_cmp
03768     00 FA 0D F2 | 	cmp	result1, #0 wz
0376c     64 02 90 AD |  if_e	jmp	#LR__0263
03770     3D 01 00 FF 
03774     D5 15 06 F6 | 	mov	arg02, ##@LR__4466
03778     0F 13 02 F6 | 	mov	arg01, local01
0377c     04 4E B1 FD | 	call	#__system___string_cmp
03780     00 FA 0D F2 | 	cmp	result1, #0 wz
03784     54 02 90 AD |  if_e	jmp	#LR__0264
03788     58 02 90 FD | 	jmp	#LR__0265
0378c                 | LR__0190
0378c     5C FA 05 F6 | 	mov	result1, #92
03790     54 02 90 FD | 	jmp	#LR__0266
03794                 | LR__0191
03794     5C FA 05 F6 | 	mov	result1, #92
03798     4C 02 90 FD | 	jmp	#LR__0266
0379c                 | LR__0192
0379c     47 FA 05 F6 | 	mov	result1, #71
037a0     44 02 90 FD | 	jmp	#LR__0266
037a4                 | LR__0193
037a4     59 FA 05 F6 | 	mov	result1, #89
037a8     3C 02 90 FD | 	jmp	#LR__0266
037ac                 | LR__0194
037ac     59 FA 05 F6 | 	mov	result1, #89
037b0     34 02 90 FD | 	jmp	#LR__0266
037b4                 | LR__0195
037b4     45 FA 05 F6 | 	mov	result1, #69
037b8     2C 02 90 FD | 	jmp	#LR__0266
037bc                 | LR__0196
037bc     45 FA 05 F6 | 	mov	result1, #69
037c0     24 02 90 FD | 	jmp	#LR__0266
037c4                 | LR__0197
037c4     69 FA 05 F6 | 	mov	result1, #105
037c8     1C 02 90 FD | 	jmp	#LR__0266
037cc                 | LR__0198
037cc     40 FA 05 F6 | 	mov	result1, #64
037d0     14 02 90 FD | 	jmp	#LR__0266
037d4                 | LR__0199
037d4     49 FA 05 F6 | 	mov	result1, #73
037d8     0C 02 90 FD | 	jmp	#LR__0266
037dc                 | LR__0200
037dc     49 FA 05 F6 | 	mov	result1, #73
037e0     04 02 90 FD | 	jmp	#LR__0266
037e4                 | LR__0201
037e4     50 FA 05 F6 | 	mov	result1, #80
037e8     FC 01 90 FD | 	jmp	#LR__0266
037ec                 | LR__0202
037ec     50 FA 05 F6 | 	mov	result1, #80
037f0     F4 01 90 FD | 	jmp	#LR__0266
037f4                 | LR__0203
037f4     68 FA 05 F6 | 	mov	result1, #104
037f8     EC 01 90 FD | 	jmp	#LR__0266
037fc                 | LR__0204
037fc     73 FA 05 F6 | 	mov	result1, #115
03800     E4 01 90 FD | 	jmp	#LR__0266
03804                 | LR__0205
03804     74 FA 05 F6 | 	mov	result1, #116
03808     DC 01 90 FD | 	jmp	#LR__0266
0380c                 | LR__0206
0380c     6C FA 05 F6 | 	mov	result1, #108
03810     D4 01 90 FD | 	jmp	#LR__0266
03814                 | LR__0207
03814     6C FA 05 F6 | 	mov	result1, #108
03818     CC 01 90 FD | 	jmp	#LR__0266
0381c                 | LR__0208
0381c     72 FA 05 F6 | 	mov	result1, #114
03820     C4 01 90 FD | 	jmp	#LR__0266
03824                 | LR__0209
03824     5D FA 05 F6 | 	mov	result1, #93
03828     BC 01 90 FD | 	jmp	#LR__0266
0382c                 | LR__0210
0382c     43 FA 05 F6 | 	mov	result1, #67
03830     B4 01 90 FD | 	jmp	#LR__0266
03834                 | LR__0211
03834     43 FA 05 F6 | 	mov	result1, #67
03838     AC 01 90 FD | 	jmp	#LR__0266
0383c                 | LR__0212
0383c     5A FA 05 F6 | 	mov	result1, #90
03840     A4 01 90 FD | 	jmp	#LR__0266
03844                 | LR__0213
03844     46 FA 05 F6 | 	mov	result1, #70
03848     9C 01 90 FD | 	jmp	#LR__0266
0384c                 | LR__0214
0384c     46 FA 05 F6 | 	mov	result1, #70
03850     94 01 90 FD | 	jmp	#LR__0266
03854                 | LR__0215
03854     71 FA 05 F6 | 	mov	result1, #113
03858     8C 01 90 FD | 	jmp	#LR__0266
0385c                 | LR__0216
0385c     71 FA 05 F6 | 	mov	result1, #113
03860     84 01 90 FD | 	jmp	#LR__0266
03864                 | LR__0217
03864     60 FA 05 F6 | 	mov	result1, #96
03868     7C 01 90 FD | 	jmp	#LR__0266
0386c                 | LR__0218
0386c     4A FA 05 F6 | 	mov	result1, #74
03870     74 01 90 FD | 	jmp	#LR__0266
03874                 | LR__0219
03874     4A FA 05 F6 | 	mov	result1, #74
03878     6C 01 90 FD | 	jmp	#LR__0266
0387c                 | LR__0220
0387c     48 FA 05 F6 | 	mov	result1, #72
03880     64 01 90 FD | 	jmp	#LR__0266
03884                 | LR__0221
03884     48 FA 05 F6 | 	mov	result1, #72
03888     5C 01 90 FD | 	jmp	#LR__0266
0388c                 | LR__0222
0388c     4E FA 05 F6 | 	mov	result1, #78
03890     54 01 90 FD | 	jmp	#LR__0266
03894                 | LR__0223
03894     4E FA 05 F6 | 	mov	result1, #78
03898     4C 01 90 FD | 	jmp	#LR__0266
0389c                 | LR__0224
0389c     58 FA 05 F6 | 	mov	result1, #88
038a0     44 01 90 FD | 	jmp	#LR__0266
038a4                 | LR__0225
038a4     5F FA 05 F6 | 	mov	result1, #95
038a8     3C 01 90 FD | 	jmp	#LR__0266
038ac                 | LR__0226
038ac     5F FA 05 F6 | 	mov	result1, #95
038b0     34 01 90 FD | 	jmp	#LR__0266
038b4                 | LR__0227
038b4     4C FA 05 F6 | 	mov	result1, #76
038b8     2C 01 90 FD | 	jmp	#LR__0266
038bc                 | LR__0228
038bc     4C FA 05 F6 | 	mov	result1, #76
038c0     24 01 90 FD | 	jmp	#LR__0266
038c4                 | LR__0229
038c4     52 FA 05 F6 | 	mov	result1, #82
038c8     1C 01 90 FD | 	jmp	#LR__0266
038cc                 | LR__0230
038cc     52 FA 05 F6 | 	mov	result1, #82
038d0     14 01 90 FD | 	jmp	#LR__0266
038d4                 | LR__0231
038d4     61 FA 05 F6 | 	mov	result1, #97
038d8     0C 01 90 FD | 	jmp	#LR__0266
038dc                 | LR__0232
038dc     61 FA 05 F6 | 	mov	result1, #97
038e0     04 01 90 FD | 	jmp	#LR__0266
038e4                 | LR__0233
038e4     63 FA 05 F6 | 	mov	result1, #99
038e8     FC 00 90 FD | 	jmp	#LR__0266
038ec                 | LR__0234
038ec     41 FA 05 F6 | 	mov	result1, #65
038f0     F4 00 90 FD | 	jmp	#LR__0266
038f4                 | LR__0235
038f4     4B FA 05 F6 | 	mov	result1, #75
038f8     EC 00 90 FD | 	jmp	#LR__0266
038fc                 | LR__0236
038fc     4B FA 05 F6 | 	mov	result1, #75
03900     E4 00 90 FD | 	jmp	#LR__0266
03904                 | LR__0237
03904     5E FA 05 F6 | 	mov	result1, #94
03908     DC 00 90 FD | 	jmp	#LR__0266
0390c                 | LR__0238
0390c     5E FA 05 F6 | 	mov	result1, #94
03910     D4 00 90 FD | 	jmp	#LR__0266
03914                 | LR__0239
03914     7C FA 05 F6 | 	mov	result1, #124
03918     CC 00 90 FD | 	jmp	#LR__0266
0391c                 | LR__0240
0391c     7E FA 05 F6 | 	mov	result1, #126
03920     C4 00 90 FD | 	jmp	#LR__0266
03924                 | LR__0241
03924     7D FA 05 F6 | 	mov	result1, #125
03928     BC 00 90 FD | 	jmp	#LR__0266
0392c                 | LR__0242
0392c     7F FA 05 F6 | 	mov	result1, #127
03930     B4 00 90 FD | 	jmp	#LR__0266
03934                 | LR__0243
03934     80 FA 05 F6 | 	mov	result1, #128
03938     AC 00 90 FD | 	jmp	#LR__0266
0393c                 | LR__0244
0393c     55 FA 05 F6 | 	mov	result1, #85
03940     A4 00 90 FD | 	jmp	#LR__0266
03944                 | LR__0245
03944     75 FA 05 F6 | 	mov	result1, #117
03948     9C 00 90 FD | 	jmp	#LR__0266
0394c                 | LR__0246
0394c     42 FA 05 F6 | 	mov	result1, #66
03950     94 00 90 FD | 	jmp	#LR__0266
03954                 | LR__0247
03954     42 FA 05 F6 | 	mov	result1, #66
03958     8C 00 90 FD | 	jmp	#LR__0266
0395c                 | LR__0248
0395c     81 FA 05 F6 | 	mov	result1, #129
03960     84 00 90 FD | 	jmp	#LR__0266
03964                 | LR__0249
03964     81 FA 05 F6 | 	mov	result1, #129
03968     7C 00 90 FD | 	jmp	#LR__0266
0396c                 | LR__0250
0396c     44 FA 05 F6 | 	mov	result1, #68
03970     74 00 90 FD | 	jmp	#LR__0266
03974                 | LR__0251
03974     44 FA 05 F6 | 	mov	result1, #68
03978     6C 00 90 FD | 	jmp	#LR__0266
0397c                 | LR__0252
0397c     4D FA 05 F6 | 	mov	result1, #77
03980     64 00 90 FD | 	jmp	#LR__0266
03984                 | LR__0253
03984     51 FA 05 F6 | 	mov	result1, #81
03988     5C 00 90 FD | 	jmp	#LR__0266
0398c                 | LR__0254
0398c     51 FA 05 F6 | 	mov	result1, #81
03990     54 00 90 FD | 	jmp	#LR__0266
03994                 | LR__0255
03994     6D FA 05 F6 | 	mov	result1, #109
03998     4C 00 90 FD | 	jmp	#LR__0266
0399c                 | LR__0256
0399c     6D FA 05 F6 | 	mov	result1, #109
039a0     44 00 90 FD | 	jmp	#LR__0266
039a4                 | LR__0257
039a4     5B FA 05 F6 | 	mov	result1, #91
039a8     3C 00 90 FD | 	jmp	#LR__0266
039ac                 | LR__0258
039ac     56 FA 05 F6 | 	mov	result1, #86
039b0     34 00 90 FD | 	jmp	#LR__0266
039b4                 | LR__0259
039b4     70 FA 05 F6 | 	mov	result1, #112
039b8     2C 00 90 FD | 	jmp	#LR__0266
039bc                 | LR__0260
039bc     70 FA 05 F6 | 	mov	result1, #112
039c0     24 00 90 FD | 	jmp	#LR__0266
039c4                 | LR__0261
039c4     57 FA 05 F6 | 	mov	result1, #87
039c8     1C 00 90 FD | 	jmp	#LR__0266
039cc                 | LR__0262
039cc     57 FA 05 F6 | 	mov	result1, #87
039d0     14 00 90 FD | 	jmp	#LR__0266
039d4                 | LR__0263
039d4     77 FA 05 F6 | 	mov	result1, #119
039d8     0C 00 90 FD | 	jmp	#LR__0266
039dc                 | LR__0264
039dc     78 FA 05 F6 | 	mov	result1, #120
039e0     04 00 90 FD | 	jmp	#LR__0266
039e4                 | LR__0265
039e4     00 FA 05 F6 | 	mov	result1, #0
039e8                 | LR__0266
039e8     A7 F0 03 F6 | 	mov	ptra, fp
039ec     B2 00 A0 FD | 	call	#popregs_
039f0                 | _iscommand_ret
039f0     2D 00 64 FD | 	ret
039f4                 | 
039f4                 | ' 
039f4                 | ' function isfunction(s as string) as ubyte
039f4                 | _isfunction
039f4     01 4A 05 F6 | 	mov	COUNT_, #1
039f8     A8 00 A0 FD | 	call	#pushregs_
039fc                 | ' 
039fc                 | ' select case s
039fc     09 1F 02 F6 | 	mov	local01, arg01
03a00     3D 01 00 FF 
03a04     DB 15 06 F6 | 	mov	arg02, ##@LR__4467
03a08     0F 13 02 F6 | 	mov	arg01, local01
03a0c     74 4B B1 FD | 	call	#__system___string_cmp
03a10     00 FA 0D F2 | 	cmp	result1, #0 wz
03a14     B4 01 90 AD |  if_e	jmp	#LR__0270
03a18     3D 01 00 FF 
03a1c     E0 15 06 F6 | 	mov	arg02, ##@LR__4468
03a20     0F 13 02 F6 | 	mov	arg01, local01
03a24     5C 4B B1 FD | 	call	#__system___string_cmp
03a28     00 FA 0D F2 | 	cmp	result1, #0 wz
03a2c     A4 01 90 AD |  if_e	jmp	#LR__0271
03a30     3D 01 00 FF 
03a34     E5 15 06 F6 | 	mov	arg02, ##@LR__4469
03a38     0F 13 02 F6 | 	mov	arg01, local01
03a3c     44 4B B1 FD | 	call	#__system___string_cmp
03a40     00 FA 0D F2 | 	cmp	result1, #0 wz
03a44     94 01 90 AD |  if_e	jmp	#LR__0272
03a48     3D 01 00 FF 
03a4c     E9 15 06 F6 | 	mov	arg02, ##@LR__4470
03a50     0F 13 02 F6 | 	mov	arg01, local01
03a54     2C 4B B1 FD | 	call	#__system___string_cmp
03a58     00 FA 0D F2 | 	cmp	result1, #0 wz
03a5c     84 01 90 AD |  if_e	jmp	#LR__0273
03a60     3D 01 00 FF 
03a64     ED 15 06 F6 | 	mov	arg02, ##@LR__4471
03a68     0F 13 02 F6 | 	mov	arg01, local01
03a6c     14 4B B1 FD | 	call	#__system___string_cmp
03a70     00 FA 0D F2 | 	cmp	result1, #0 wz
03a74     74 01 90 AD |  if_e	jmp	#LR__0274
03a78     3D 01 00 FF 
03a7c     F6 15 06 F6 | 	mov	arg02, ##@LR__4472
03a80     0F 13 02 F6 | 	mov	arg01, local01
03a84     FC 4A B1 FD | 	call	#__system___string_cmp
03a88     00 FA 0D F2 | 	cmp	result1, #0 wz
03a8c     64 01 90 AD |  if_e	jmp	#LR__0275
03a90     3D 01 00 FF 
03a94     FE 15 06 F6 | 	mov	arg02, ##@LR__4473
03a98     0F 13 02 F6 | 	mov	arg01, local01
03a9c     E4 4A B1 FD | 	call	#__system___string_cmp
03aa0     00 FA 0D F2 | 	cmp	result1, #0 wz
03aa4     54 01 90 AD |  if_e	jmp	#LR__0276
03aa8     3E 01 00 FF 
03aac     05 14 06 F6 | 	mov	arg02, ##@LR__4474
03ab0     0F 13 02 F6 | 	mov	arg01, local01
03ab4     CC 4A B1 FD | 	call	#__system___string_cmp
03ab8     00 FA 0D F2 | 	cmp	result1, #0 wz
03abc     44 01 90 AD |  if_e	jmp	#LR__0277
03ac0     3E 01 00 FF 
03ac4     0C 14 06 F6 | 	mov	arg02, ##@LR__4475
03ac8     0F 13 02 F6 | 	mov	arg01, local01
03acc     B4 4A B1 FD | 	call	#__system___string_cmp
03ad0     00 FA 0D F2 | 	cmp	result1, #0 wz
03ad4     34 01 90 AD |  if_e	jmp	#LR__0278
03ad8     3E 01 00 FF 
03adc     13 14 06 F6 | 	mov	arg02, ##@LR__4476
03ae0     0F 13 02 F6 | 	mov	arg01, local01
03ae4     9C 4A B1 FD | 	call	#__system___string_cmp
03ae8     00 FA 0D F2 | 	cmp	result1, #0 wz
03aec     24 01 90 AD |  if_e	jmp	#LR__0279
03af0     3E 01 00 FF 
03af4     1A 14 06 F6 | 	mov	arg02, ##@LR__4477
03af8     0F 13 02 F6 | 	mov	arg01, local01
03afc     84 4A B1 FD | 	call	#__system___string_cmp
03b00     00 FA 0D F2 | 	cmp	result1, #0 wz
03b04     14 01 90 AD |  if_e	jmp	#LR__0280
03b08     3E 01 00 FF 
03b0c     22 14 06 F6 | 	mov	arg02, ##@LR__4478
03b10     0F 13 02 F6 | 	mov	arg01, local01
03b14     6C 4A B1 FD | 	call	#__system___string_cmp
03b18     00 FA 0D F2 | 	cmp	result1, #0 wz
03b1c     04 01 90 AD |  if_e	jmp	#LR__0281
03b20     3E 01 00 FF 
03b24     28 14 06 F6 | 	mov	arg02, ##@LR__4479
03b28     0F 13 02 F6 | 	mov	arg01, local01
03b2c     54 4A B1 FD | 	call	#__system___string_cmp
03b30     00 FA 0D F2 | 	cmp	result1, #0 wz
03b34     F4 00 90 AD |  if_e	jmp	#LR__0282
03b38     3E 01 00 FF 
03b3c     2E 14 06 F6 | 	mov	arg02, ##@LR__4480
03b40     0F 13 02 F6 | 	mov	arg01, local01
03b44     3C 4A B1 FD | 	call	#__system___string_cmp
03b48     00 FA 0D F2 | 	cmp	result1, #0 wz
03b4c     E4 00 90 AD |  if_e	jmp	#LR__0283
03b50     3E 01 00 FF 
03b54     32 14 06 F6 | 	mov	arg02, ##@LR__4481
03b58     0F 13 02 F6 | 	mov	arg01, local01
03b5c     24 4A B1 FD | 	call	#__system___string_cmp
03b60     00 FA 0D F2 | 	cmp	result1, #0 wz
03b64     D4 00 90 AD |  if_e	jmp	#LR__0284
03b68     3E 01 00 FF 
03b6c     36 14 06 F6 | 	mov	arg02, ##@LR__4482
03b70     0F 13 02 F6 | 	mov	arg01, local01
03b74     0C 4A B1 FD | 	call	#__system___string_cmp
03b78     00 FA 0D F2 | 	cmp	result1, #0 wz
03b7c     C4 00 90 AD |  if_e	jmp	#LR__0285
03b80     3E 01 00 FF 
03b84     3A 14 06 F6 | 	mov	arg02, ##@LR__4483
03b88     0F 13 02 F6 | 	mov	arg01, local01
03b8c     F4 49 B1 FD | 	call	#__system___string_cmp
03b90     00 FA 0D F2 | 	cmp	result1, #0 wz
03b94     B4 00 90 AD |  if_e	jmp	#LR__0286
03b98     3E 01 00 FF 
03b9c     40 14 06 F6 | 	mov	arg02, ##@LR__4484
03ba0     0F 13 02 F6 | 	mov	arg01, local01
03ba4     DC 49 B1 FD | 	call	#__system___string_cmp
03ba8     00 FA 0D F2 | 	cmp	result1, #0 wz
03bac     A4 00 90 AD |  if_e	jmp	#LR__0287
03bb0     3E 01 00 FF 
03bb4     46 14 06 F6 | 	mov	arg02, ##@LR__4485
03bb8     0F 13 02 F6 | 	mov	arg01, local01
03bbc     C4 49 B1 FD | 	call	#__system___string_cmp
03bc0     00 FA 0D F2 | 	cmp	result1, #0 wz
03bc4     94 00 90 AD |  if_e	jmp	#LR__0288
03bc8     98 00 90 FD | 	jmp	#LR__0289
03bcc                 | LR__0270
03bcc     85 FA 05 F6 | 	mov	result1, #133
03bd0     94 00 90 FD | 	jmp	#LR__0290
03bd4                 | LR__0271
03bd4     84 FA 05 F6 | 	mov	result1, #132
03bd8     8C 00 90 FD | 	jmp	#LR__0290
03bdc                 | LR__0272
03bdc     86 FA 05 F6 | 	mov	result1, #134
03be0     84 00 90 FD | 	jmp	#LR__0290
03be4                 | LR__0273
03be4     82 FA 05 F6 | 	mov	result1, #130
03be8     7C 00 90 FD | 	jmp	#LR__0290
03bec                 | LR__0274
03bec     6F FA 05 F6 | 	mov	result1, #111
03bf0     74 00 90 FD | 	jmp	#LR__0290
03bf4                 | LR__0275
03bf4     62 FA 05 F6 | 	mov	result1, #98
03bf8     6C 00 90 FD | 	jmp	#LR__0290
03bfc                 | LR__0276
03bfc     66 FA 05 F6 | 	mov	result1, #102
03c00     64 00 90 FD | 	jmp	#LR__0290
03c04                 | LR__0277
03c04     67 FA 05 F6 | 	mov	result1, #103
03c08     5C 00 90 FD | 	jmp	#LR__0290
03c0c                 | LR__0278
03c0c     64 FA 05 F6 | 	mov	result1, #100
03c10     54 00 90 FD | 	jmp	#LR__0290
03c14                 | LR__0279
03c14     65 FA 05 F6 | 	mov	result1, #101
03c18     4C 00 90 FD | 	jmp	#LR__0290
03c1c                 | LR__0280
03c1c     7B FA 05 F6 | 	mov	result1, #123
03c20     44 00 90 FD | 	jmp	#LR__0290
03c24                 | LR__0281
03c24     76 FA 05 F6 | 	mov	result1, #118
03c28     3C 00 90 FD | 	jmp	#LR__0290
03c2c                 | LR__0282
03c2c     7A FA 05 F6 | 	mov	result1, #122
03c30     34 00 90 FD | 	jmp	#LR__0290
03c34                 | LR__0283
03c34     54 FA 05 F6 | 	mov	result1, #84
03c38     2C 00 90 FD | 	jmp	#LR__0290
03c3c                 | LR__0284
03c3c     6B FA 05 F6 | 	mov	result1, #107
03c40     24 00 90 FD | 	jmp	#LR__0290
03c44                 | LR__0285
03c44     87 FA 05 F6 | 	mov	result1, #135
03c48     1C 00 90 FD | 	jmp	#LR__0290
03c4c                 | LR__0286
03c4c     6A FA 05 F6 | 	mov	result1, #106
03c50     14 00 90 FD | 	jmp	#LR__0290
03c54                 | LR__0287
03c54     6E FA 05 F6 | 	mov	result1, #110
03c58     0C 00 90 FD | 	jmp	#LR__0290
03c5c                 | LR__0288
03c5c     83 FA 05 F6 | 	mov	result1, #131
03c60     04 00 90 FD | 	jmp	#LR__0290
03c64                 | LR__0289
03c64     00 FA 05 F6 | 	mov	result1, #0
03c68                 | LR__0290
03c68     A7 F0 03 F6 | 	mov	ptra, fp
03c6c     B2 00 A0 FD | 	call	#popregs_
03c70                 | _isfunction_ret
03c70     2D 00 64 FD | 	ret
03c74                 | 
03c74                 | ' 
03c74                 | ' function isname(s as string) as boolean
03c74                 | _isname
03c74     0D 4A 05 F6 | 	mov	COUNT_, #13
03c78     A8 00 A0 FD | 	call	#pushregs_
03c7c     09 1F 02 F6 | 	mov	local01, arg01
03c80     09 21 02 F6 | 	mov	local02, arg01
03c84     97 06 48 FB | 	callpa	#(@LR__0301-@LR__0300)>>2,fcache_load_ptr_
03c88                 | LR__0300
03c88     10 FB C9 FA | 	rdbyte	result1, local02 wz
03c8c     01 20 06 51 |  if_ne	add	local02, #1
03c90     F4 FF 9F 5D |  if_ne	jmp	#LR__0300
03c94                 | LR__0301
03c94     09 21 82 F1 | 	sub	local02, arg01
03c98     10 FB 01 F6 | 	mov	result1, local02
03c9c     FD 22 0A F6 | 	mov	local03, result1 wz
03ca0     00 FA 05 A6 |  if_e	mov	result1, #0
03ca4     34 02 90 AD |  if_e	jmp	#LR__0313
03ca8     0F 13 02 F6 | 	mov	arg01, local01
03cac     01 14 06 F6 | 	mov	arg02, #1
03cb0     01 16 06 F6 | 	mov	arg03, #1
03cb4     C8 69 B1 FD | 	call	#__system__Mid_S
03cb8     FD 24 02 F6 | 	mov	local04, result1
03cbc                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
03cbc     3E 01 00 FF 
03cc0     4A 14 06 F6 | 	mov	arg02, ##@LR__4486
03cc4     12 13 02 F6 | 	mov	arg01, local04
03cc8     B8 48 B1 FD | 	call	#__system___string_cmp
03ccc     00 FA 55 F2 | 	cmps	result1, #0 wc
03cd0     18 00 90 CD |  if_b	jmp	#LR__0302
03cd4     3E 01 00 FF 
03cd8     4C 14 06 F6 | 	mov	arg02, ##@LR__4487
03cdc     12 13 02 F6 | 	mov	arg01, local04
03ce0     A0 48 B1 FD | 	call	#__system___string_cmp
03ce4     01 FA 55 F2 | 	cmps	result1, #1 wc
03ce8     1C 00 90 CD |  if_b	jmp	#LR__0303
03cec                 | LR__0302
03cec     3E 01 00 FF 
03cf0     4E 14 06 F6 | 	mov	arg02, ##@LR__4488
03cf4     12 13 02 F6 | 	mov	arg01, local04
03cf8     88 48 B1 FD | 	call	#__system___string_cmp
03cfc     00 FA 0D F2 | 	cmp	result1, #0 wz
03d00     00 FA 05 56 |  if_ne	mov	result1, #0
03d04     D4 01 90 5D |  if_ne	jmp	#LR__0313
03d08                 | LR__0303
03d08                 | ' if l>2 then 
03d08     03 22 56 F2 | 	cmps	local03, #3 wc
03d0c     C8 01 90 CD |  if_b	jmp	#LR__0312
03d10                 | '   for i=2 to l
03d10     02 26 06 F6 | 	mov	local05, #2
03d14     11 29 02 F6 | 	mov	local06, local03
03d18     01 28 06 F1 | 	add	local06, #1
03d1c                 | LR__0304
03d1c     14 27 52 F2 | 	cmps	local05, local06 wc
03d20     B4 01 90 3D |  if_ae	jmp	#LR__0311
03d24     0F 13 02 F6 | 	mov	arg01, local01
03d28     13 15 02 F6 | 	mov	arg02, local05
03d2c     01 16 06 F6 | 	mov	arg03, #1
03d30     4C 69 B1 FD | 	call	#__system__Mid_S
03d34     FD 24 02 F6 | 	mov	local04, result1
03d38                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false
03d38     11 27 52 F2 | 	cmps	local05, local03 wc
03d3c     9C 00 90 3D |  if_ae	jmp	#LR__0307
03d40     3E 01 00 FF 
03d44     50 14 06 F6 | 	mov	arg02, ##@LR__4489
03d48     12 13 02 F6 | 	mov	arg01, local04
03d4c     34 48 B1 FD | 	call	#__system___string_cmp
03d50     00 FA 55 F2 | 	cmps	result1, #0 wc
03d54     18 00 90 CD |  if_b	jmp	#LR__0305
03d58     3E 01 00 FF 
03d5c     52 14 06 F6 | 	mov	arg02, ##@LR__4490
03d60     12 13 02 F6 | 	mov	arg01, local04
03d64     1C 48 B1 FD | 	call	#__system___string_cmp
03d68     01 FA 55 F2 | 	cmps	result1, #1 wc
03d6c     6C 00 90 CD |  if_b	jmp	#LR__0307
03d70                 | LR__0305
03d70     3E 01 00 FF 
03d74     54 14 06 F6 | 	mov	arg02, ##@LR__4491
03d78     12 13 02 F6 | 	mov	arg01, local04
03d7c     04 48 B1 FD | 	call	#__system___string_cmp
03d80     00 FA 55 F2 | 	cmps	result1, #0 wc
03d84     18 00 90 CD |  if_b	jmp	#LR__0306
03d88     3E 01 00 FF 
03d8c     56 14 06 F6 | 	mov	arg02, ##@LR__4492
03d90     12 13 02 F6 | 	mov	arg01, local04
03d94     EC 47 B1 FD | 	call	#__system___string_cmp
03d98     01 FA 55 F2 | 	cmps	result1, #1 wc
03d9c     3C 00 90 CD |  if_b	jmp	#LR__0307
03da0                 | LR__0306
03da0     3E 01 00 FF 
03da4     58 2A 06 F6 | 	mov	local07, ##@LR__4493
03da8     12 13 02 F6 | 	mov	arg01, local04
03dac     15 15 02 F6 | 	mov	arg02, local07
03db0     D0 47 B1 FD | 	call	#__system___string_cmp
03db4     00 FA 0D F2 | 	cmp	result1, #0 wz
03db8     20 00 90 AD |  if_e	jmp	#LR__0307
03dbc     3E 01 00 FF 
03dc0     5A 2C 06 F6 | 	mov	local08, ##@LR__4494
03dc4     12 13 02 F6 | 	mov	arg01, local04
03dc8     16 15 02 F6 | 	mov	arg02, local08
03dcc     B4 47 B1 FD | 	call	#__system___string_cmp
03dd0     FD 2E 0A F6 | 	mov	local09, result1 wz
03dd4     00 FA 05 56 |  if_ne	mov	result1, #0
03dd8     00 01 90 5D |  if_ne	jmp	#LR__0313
03ddc                 | LR__0307
03ddc                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
03ddc     11 27 0A F2 | 	cmp	local05, local03 wz
03de0     EC 00 90 5D |  if_ne	jmp	#LR__0310
03de4     3E 01 00 FF 
03de8     5C 30 06 F6 | 	mov	local10, ##@LR__4495
03dec     12 13 02 F6 | 	mov	arg01, local04
03df0     18 15 02 F6 | 	mov	arg02, local10
03df4     8C 47 B1 FD | 	call	#__system___string_cmp
03df8     FD 32 02 F6 | 	mov	local11, result1
03dfc     00 32 56 F2 | 	cmps	local11, #0 wc
03e00     1C 00 90 CD |  if_b	jmp	#LR__0308
03e04     3E 01 00 FF 
03e08     5E 14 06 F6 | 	mov	arg02, ##@LR__4496
03e0c     12 13 02 F6 | 	mov	arg01, local04
03e10     70 47 B1 FD | 	call	#__system___string_cmp
03e14     FD 30 02 F6 | 	mov	local10, result1
03e18     01 30 56 F2 | 	cmps	local10, #1 wc
03e1c     B0 00 90 CD |  if_b	jmp	#LR__0310
03e20                 | LR__0308
03e20     3E 01 00 FF 
03e24     60 14 06 F6 | 	mov	arg02, ##@LR__4497
03e28     12 13 02 F6 | 	mov	arg01, local04
03e2c     54 47 B1 FD | 	call	#__system___string_cmp
03e30     00 FA 55 F2 | 	cmps	result1, #0 wc
03e34     1C 00 90 CD |  if_b	jmp	#LR__0309
03e38     3E 01 00 FF 
03e3c     62 2E 06 F6 | 	mov	local09, ##@LR__4498
03e40     12 13 02 F6 | 	mov	arg01, local04
03e44     17 15 02 F6 | 	mov	arg02, local09
03e48     38 47 B1 FD | 	call	#__system___string_cmp
03e4c     01 FA 55 F2 | 	cmps	result1, #1 wc
03e50     7C 00 90 CD |  if_b	jmp	#LR__0310
03e54                 | LR__0309
03e54     3E 01 00 FF 
03e58     64 2E 06 F6 | 	mov	local09, ##@LR__4499
03e5c     12 13 02 F6 | 	mov	arg01, local04
03e60     17 15 02 F6 | 	mov	arg02, local09
03e64     1C 47 B1 FD | 	call	#__system___string_cmp
03e68     00 FA 4D F2 | 	cmps	result1, #0 wz
03e6c     60 00 90 AD |  if_e	jmp	#LR__0310
03e70     3E 01 00 FF 
03e74     66 2C 06 F6 | 	mov	local08, ##@LR__4500
03e78     12 13 02 F6 | 	mov	arg01, local04
03e7c     16 15 02 F6 | 	mov	arg02, local08
03e80     00 47 B1 FD | 	call	#__system___string_cmp
03e84     FD 2E 0A F6 | 	mov	local09, result1 wz
03e88     44 00 90 AD |  if_e	jmp	#LR__0310
03e8c     3E 01 00 FF 
03e90     68 34 06 F6 | 	mov	local12, ##@LR__4501
03e94     1A 2D 02 F6 | 	mov	local08, local12
03e98     12 13 02 F6 | 	mov	arg01, local04
03e9c     16 15 02 F6 | 	mov	arg02, local08
03ea0     E0 46 B1 FD | 	call	#__system___string_cmp
03ea4     FD 2A 0A F6 | 	mov	local07, result1 wz
03ea8     24 00 90 AD |  if_e	jmp	#LR__0310
03eac     3E 01 00 FF 
03eb0     6A 36 06 F6 | 	mov	local13, ##@LR__4502
03eb4     1B 35 02 F6 | 	mov	local12, local13
03eb8     12 13 02 F6 | 	mov	arg01, local04
03ebc     1A 15 02 F6 | 	mov	arg02, local12
03ec0     C0 46 B1 FD | 	call	#__system___string_cmp
03ec4     FD 2C 0A F6 | 	mov	local08, result1 wz
03ec8     00 FA 05 56 |  if_ne	mov	result1, #0
03ecc     0C 00 90 5D |  if_ne	jmp	#LR__0313
03ed0                 | LR__0310
03ed0     01 26 06 F1 | 	add	local05, #1
03ed4     44 FE 9F FD | 	jmp	#LR__0304
03ed8                 | LR__0311
03ed8                 | LR__0312
03ed8                 | ' return true
03ed8     01 FA 65 F6 | 	neg	result1, #1
03edc                 | LR__0313
03edc     A7 F0 03 F6 | 	mov	ptra, fp
03ee0     B2 00 A0 FD | 	call	#popregs_
03ee4                 | _isname_ret
03ee4     2D 00 64 FD | 	ret
03ee8                 | 
03ee8                 | ' 
03ee8                 | ' function isnum(s as string) as boolean
03ee8                 | _isnum
03ee8     0D 4A 05 F6 | 	mov	COUNT_, #13
03eec     A8 00 A0 FD | 	call	#pushregs_
03ef0     09 1F 02 F6 | 	mov	local01, arg01
03ef4     00 20 06 F6 | 	mov	local02, #0
03ef8     00 22 06 F6 | 	mov	local03, #0
03efc     0F 13 02 F6 | 	mov	arg01, local01
03f00     09 25 02 F6 | 	mov	local04, arg01
03f04     97 06 48 FB | 	callpa	#(@LR__0321-@LR__0320)>>2,fcache_load_ptr_
03f08                 | LR__0320
03f08     12 FB C9 FA | 	rdbyte	result1, local04 wz
03f0c     01 24 06 51 |  if_ne	add	local04, #1
03f10     F4 FF 9F 5D |  if_ne	jmp	#LR__0320
03f14                 | LR__0321
03f14     09 25 82 F1 | 	sub	local04, arg01
03f18     12 FB 01 F6 | 	mov	result1, local04
03f1c     FD 26 0A F6 | 	mov	local05, result1 wz
03f20     00 FA 05 A6 |  if_e	mov	result1, #0
03f24     8C 02 90 AD |  if_e	jmp	#LR__0332
03f28     0F 13 02 F6 | 	mov	arg01, local01
03f2c     01 14 06 F6 | 	mov	arg02, #1
03f30     01 16 06 F6 | 	mov	arg03, #1
03f34     48 67 B1 FD | 	call	#__system__Mid_S
03f38     FD 28 02 F6 | 	mov	local06, result1
03f3c                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
03f3c     3E 01 00 FF 
03f40     6C 14 06 F6 | 	mov	arg02, ##@LR__4503
03f44     14 13 02 F6 | 	mov	arg01, local06
03f48     38 46 B1 FD | 	call	#__system___string_cmp
03f4c     00 FA 55 F2 | 	cmps	result1, #0 wc
03f50     18 00 90 CD |  if_b	jmp	#LR__0322
03f54     3E 01 00 FF 
03f58     6E 14 06 F6 | 	mov	arg02, ##@LR__4504
03f5c     14 13 02 F6 | 	mov	arg01, local06
03f60     20 46 B1 FD | 	call	#__system___string_cmp
03f64     01 FA 55 F2 | 	cmps	result1, #1 wc
03f68     78 00 90 CD |  if_b	jmp	#LR__0323
03f6c                 | LR__0322
03f6c     3E 01 00 FF 
03f70     70 14 06 F6 | 	mov	arg02, ##@LR__4505
03f74     14 13 02 F6 | 	mov	arg01, local06
03f78     08 46 B1 FD | 	call	#__system___string_cmp
03f7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03f80     60 00 90 AD |  if_e	jmp	#LR__0323
03f84     3E 01 00 FF 
03f88     72 2A 06 F6 | 	mov	local07, ##@LR__4506
03f8c     14 13 02 F6 | 	mov	arg01, local06
03f90     15 15 02 F6 | 	mov	arg02, local07
03f94     EC 45 B1 FD | 	call	#__system___string_cmp
03f98     00 FA 0D F2 | 	cmp	result1, #0 wz
03f9c     44 00 90 AD |  if_e	jmp	#LR__0323
03fa0     3E 01 00 FF 
03fa4     74 2C 06 F6 | 	mov	local08, ##@LR__4507
03fa8     16 2B 02 F6 | 	mov	local07, local08
03fac     14 13 02 F6 | 	mov	arg01, local06
03fb0     15 15 02 F6 | 	mov	arg02, local07
03fb4     CC 45 B1 FD | 	call	#__system___string_cmp
03fb8     00 FA 4D F2 | 	cmps	result1, #0 wz
03fbc     24 00 90 AD |  if_e	jmp	#LR__0323
03fc0     3E 01 00 FF 
03fc4     76 2E 06 F6 | 	mov	local09, ##@LR__4508
03fc8     17 2D 02 F6 | 	mov	local08, local09
03fcc     14 13 02 F6 | 	mov	arg01, local06
03fd0     16 15 02 F6 | 	mov	arg02, local08
03fd4     AC 45 B1 FD | 	call	#__system___string_cmp
03fd8     FD 2A 0A F6 | 	mov	local07, result1 wz
03fdc     00 FA 05 56 |  if_ne	mov	result1, #0
03fe0     D0 01 90 5D |  if_ne	jmp	#LR__0332
03fe4                 | LR__0323
03fe4                 | ' if m$="." then ds=1
03fe4     3E 01 00 FF 
03fe8     78 14 06 F6 | 	mov	arg02, ##@LR__4509
03fec     14 13 02 F6 | 	mov	arg01, local06
03ff0     90 45 B1 FD | 	call	#__system___string_cmp
03ff4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ff8     01 20 06 A6 |  if_e	mov	local02, #1
03ffc                 | ' if l>1 then 
03ffc     02 26 56 F2 | 	cmps	local05, #2 wc
04000     AC 01 90 CD |  if_b	jmp	#LR__0331
04004                 | '   for i=2 to l
04004     02 30 06 F6 | 	mov	local10, #2
04008     13 33 02 F6 | 	mov	local11, local05
0400c     01 32 06 F1 | 	add	local11, #1
04010                 | LR__0324
04010     19 31 52 F2 | 	cmps	local10, local11 wc
04014     98 01 90 3D |  if_ae	jmp	#LR__0330
04018     0F 13 02 F6 | 	mov	arg01, local01
0401c     18 15 02 F6 | 	mov	arg02, local10
04020     01 16 06 F6 | 	mov	arg03, #1
04024     58 66 B1 FD | 	call	#__system__Mid_S
04028     FD 28 02 F6 | 	mov	local06, result1
0402c                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." andalso m$<>"E" andalso m$<>"e" andalso m$<>"-" then return false
0402c     3E 01 00 FF 
04030     7A 14 06 F6 | 	mov	arg02, ##@LR__4510
04034     14 13 02 F6 | 	mov	arg01, local06
04038     48 45 B1 FD | 	call	#__system___string_cmp
0403c     00 FA 55 F2 | 	cmps	result1, #0 wc
04040     18 00 90 CD |  if_b	jmp	#LR__0325
04044     3E 01 00 FF 
04048     7C 14 06 F6 | 	mov	arg02, ##@LR__4511
0404c     14 13 02 F6 | 	mov	arg01, local06
04050     30 45 B1 FD | 	call	#__system___string_cmp
04054     01 FA 55 F2 | 	cmps	result1, #1 wc
04058     98 00 90 CD |  if_b	jmp	#LR__0326
0405c                 | LR__0325
0405c     3E 01 00 FF 
04060     7E 14 06 F6 | 	mov	arg02, ##@LR__4512
04064     14 13 02 F6 | 	mov	arg01, local06
04068     18 45 B1 FD | 	call	#__system___string_cmp
0406c     00 FA 0D F2 | 	cmp	result1, #0 wz
04070     80 00 90 AD |  if_e	jmp	#LR__0326
04074     3E 01 00 FF 
04078     80 2A 06 F6 | 	mov	local07, ##@LR__4513
0407c     14 13 02 F6 | 	mov	arg01, local06
04080     15 15 02 F6 | 	mov	arg02, local07
04084     FC 44 B1 FD | 	call	#__system___string_cmp
04088     00 FA 4D F2 | 	cmps	result1, #0 wz
0408c     64 00 90 AD |  if_e	jmp	#LR__0326
04090     3E 01 00 FF 
04094     82 2C 06 F6 | 	mov	local08, ##@LR__4514
04098     16 2B 02 F6 | 	mov	local07, local08
0409c     14 13 02 F6 | 	mov	arg01, local06
040a0     15 15 02 F6 | 	mov	arg02, local07
040a4     DC 44 B1 FD | 	call	#__system___string_cmp
040a8     FD 34 0A F6 | 	mov	local12, result1 wz
040ac     44 00 90 AD |  if_e	jmp	#LR__0326
040b0     3E 01 00 FF 
040b4     84 2E 06 F6 | 	mov	local09, ##@LR__4515
040b8     17 2D 02 F6 | 	mov	local08, local09
040bc     14 13 02 F6 | 	mov	arg01, local06
040c0     16 15 02 F6 | 	mov	arg02, local08
040c4     BC 44 B1 FD | 	call	#__system___string_cmp
040c8     FD 2A 0A F6 | 	mov	local07, result1 wz
040cc     24 00 90 AD |  if_e	jmp	#LR__0326
040d0     3E 01 00 FF 
040d4     86 36 06 F6 | 	mov	local13, ##@LR__4516
040d8     1B 2F 02 F6 | 	mov	local09, local13
040dc     14 13 02 F6 | 	mov	arg01, local06
040e0     17 15 02 F6 | 	mov	arg02, local09
040e4     9C 44 B1 FD | 	call	#__system___string_cmp
040e8     FD 2C 0A F6 | 	mov	local08, result1 wz
040ec     00 FA 05 56 |  if_ne	mov	result1, #0
040f0     C0 00 90 5D |  if_ne	jmp	#LR__0332
040f4                 | LR__0326
040f4                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
040f4     3E 01 00 FF 
040f8     88 14 06 F6 | 	mov	arg02, ##@LR__4517
040fc     14 13 02 F6 | 	mov	arg01, local06
04100     80 44 B1 FD | 	call	#__system___string_cmp
04104     00 FA 0D F2 | 	cmp	result1, #0 wz
04108     38 00 90 5D |  if_ne	jmp	#LR__0327
0410c     18 15 02 F6 | 	mov	arg02, local10
04110     01 14 86 F1 | 	sub	arg02, #1
04114     0F 13 02 F6 | 	mov	arg01, local01
04118     01 16 06 F6 | 	mov	arg03, #1
0411c     60 65 B1 FD | 	call	#__system__Mid_S
04120     FD 12 02 F6 | 	mov	arg01, result1
04124     F4 66 B1 FD | 	call	#__system__LCase_S
04128     FD 12 02 F6 | 	mov	arg01, result1
0412c     3E 01 00 FF 
04130     8A 14 06 F6 | 	mov	arg02, ##@LR__4518
04134     4C 44 B1 FD | 	call	#__system___string_cmp
04138     00 FA 0D F2 | 	cmp	result1, #0 wz
0413c     00 FA 05 56 |  if_ne	mov	result1, #0
04140     70 00 90 5D |  if_ne	jmp	#LR__0332
04144                 | LR__0327
04144                 | '     if m$="." then ds+=1: if ds>1 then return false
04144     3E 01 00 FF 
04148     8C 14 06 F6 | 	mov	arg02, ##@LR__4519
0414c     14 13 02 F6 | 	mov	arg01, local06
04150     30 44 B1 FD | 	call	#__system___string_cmp
04154     00 FA 0D F2 | 	cmp	result1, #0 wz
04158     01 20 06 A1 |  if_e	add	local02, #1
0415c     02 20 56 A2 |  if_e	cmps	local02, #2 wc
04160     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
04164     4C 00 90 2D |  if_nc_and_z	jmp	#LR__0332
04168                 | '     if m$="E" orelse m$="e" then es+=1: if es>1 then return false
04168     3E 01 00 FF 
0416c     8E 14 06 F6 | 	mov	arg02, ##@LR__4520
04170     14 13 02 F6 | 	mov	arg01, local06
04174     0C 44 B1 FD | 	call	#__system___string_cmp
04178     00 FA 4D F2 | 	cmps	result1, #0 wz
0417c     18 00 90 AD |  if_e	jmp	#LR__0328
04180     3E 01 00 FF 
04184     90 14 06 F6 | 	mov	arg02, ##@LR__4521
04188     14 13 02 F6 | 	mov	arg01, local06
0418c     F4 43 B1 FD | 	call	#__system___string_cmp
04190     00 FA 4D F2 | 	cmps	result1, #0 wz
04194     10 00 90 5D |  if_ne	jmp	#LR__0329
04198                 | LR__0328
04198     01 22 06 F1 | 	add	local03, #1
0419c     02 22 56 F2 | 	cmps	local03, #2 wc
041a0     00 FA 05 36 |  if_ae	mov	result1, #0
041a4     0C 00 90 3D |  if_ae	jmp	#LR__0332
041a8                 | LR__0329
041a8     01 30 06 F1 | 	add	local10, #1
041ac     60 FE 9F FD | 	jmp	#LR__0324
041b0                 | LR__0330
041b0                 | LR__0331
041b0                 | ' return true
041b0     01 FA 65 F6 | 	neg	result1, #1
041b4                 | LR__0332
041b4     A7 F0 03 F6 | 	mov	ptra, fp
041b8     B2 00 A0 FD | 	call	#popregs_
041bc                 | _isnum_ret
041bc     2D 00 64 FD | 	ret
041c0                 | 
041c0                 | '   
041c0                 | ' function isint(s as string) as boolean
041c0                 | _isint
041c0     05 4A 05 F6 | 	mov	COUNT_, #5
041c4     A8 00 A0 FD | 	call	#pushregs_
041c8     09 1F 02 F6 | 	mov	local01, arg01
041cc     09 21 02 F6 | 	mov	local02, arg01
041d0     97 06 48 FB | 	callpa	#(@LR__0341-@LR__0340)>>2,fcache_load_ptr_
041d4                 | LR__0340
041d4     10 FB C9 FA | 	rdbyte	result1, local02 wz
041d8     01 20 06 51 |  if_ne	add	local02, #1
041dc     F4 FF 9F 5D |  if_ne	jmp	#LR__0340
041e0                 | LR__0341
041e0     09 21 82 F1 | 	sub	local02, arg01
041e4     10 FB 01 F6 | 	mov	result1, local02
041e8     FD 20 0A F6 | 	mov	local02, result1 wz
041ec     00 FA 05 A6 |  if_e	mov	result1, #0
041f0     18 01 90 AD |  if_e	jmp	#LR__0349
041f4     0F 13 02 F6 | 	mov	arg01, local01
041f8     01 14 06 F6 | 	mov	arg02, #1
041fc     01 16 06 F6 | 	mov	arg03, #1
04200     7C 64 B1 FD | 	call	#__system__Mid_S
04204     FD 22 02 F6 | 	mov	local03, result1
04208                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
04208     3E 01 00 FF 
0420c     92 14 06 F6 | 	mov	arg02, ##@LR__4522
04210     11 13 02 F6 | 	mov	arg01, local03
04214     6C 43 B1 FD | 	call	#__system___string_cmp
04218     00 FA 55 F2 | 	cmps	result1, #0 wc
0421c     18 00 90 CD |  if_b	jmp	#LR__0342
04220     3E 01 00 FF 
04224     94 14 06 F6 | 	mov	arg02, ##@LR__4523
04228     11 13 02 F6 | 	mov	arg01, local03
0422c     54 43 B1 FD | 	call	#__system___string_cmp
04230     01 FA 55 F2 | 	cmps	result1, #1 wc
04234     4C 00 90 CD |  if_b	jmp	#LR__0343
04238                 | LR__0342
04238     3E 01 00 FF 
0423c     96 14 06 F6 | 	mov	arg02, ##@LR__4524
04240     11 13 02 F6 | 	mov	arg01, local03
04244     3C 43 B1 FD | 	call	#__system___string_cmp
04248     00 FA 0D F2 | 	cmp	result1, #0 wz
0424c     34 00 90 AD |  if_e	jmp	#LR__0343
04250     3E 01 00 FF 
04254     98 14 06 F6 | 	mov	arg02, ##@LR__4525
04258     11 13 02 F6 | 	mov	arg01, local03
0425c     24 43 B1 FD | 	call	#__system___string_cmp
04260     00 FA 0D F2 | 	cmp	result1, #0 wz
04264     1C 00 90 AD |  if_e	jmp	#LR__0343
04268     3E 01 00 FF 
0426c     9A 14 06 F6 | 	mov	arg02, ##@LR__4526
04270     11 13 02 F6 | 	mov	arg01, local03
04274     0C 43 B1 FD | 	call	#__system___string_cmp
04278     00 FA 0D F2 | 	cmp	result1, #0 wz
0427c     00 FA 05 56 |  if_ne	mov	result1, #0
04280     88 00 90 5D |  if_ne	jmp	#LR__0349
04284                 | LR__0343
04284                 | ' 
04284                 | ' if l>1 then 
04284     02 20 56 F2 | 	cmps	local02, #2 wc
04288     7C 00 90 CD |  if_b	jmp	#LR__0348
0428c                 | '   for i=2 to l
0428c     02 24 06 F6 | 	mov	local04, #2
04290     10 27 02 F6 | 	mov	local05, local02
04294     01 26 06 F1 | 	add	local05, #1
04298                 | LR__0344
04298     13 25 52 F2 | 	cmps	local04, local05 wc
0429c     68 00 90 3D |  if_ae	jmp	#LR__0347
042a0     0F 13 02 F6 | 	mov	arg01, local01
042a4     12 15 02 F6 | 	mov	arg02, local04
042a8     01 16 06 F6 | 	mov	arg03, #1
042ac     D0 63 B1 FD | 	call	#__system__Mid_S
042b0     FD 22 02 F6 | 	mov	local03, result1
042b4                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
042b4     3E 01 00 FF 
042b8     9C 14 06 F6 | 	mov	arg02, ##@LR__4527
042bc     11 13 02 F6 | 	mov	arg01, local03
042c0     C0 42 B1 FD | 	call	#__system___string_cmp
042c4     00 FA 55 F2 | 	cmps	result1, #0 wc
042c8     18 00 90 CD |  if_b	jmp	#LR__0345
042cc     3E 01 00 FF 
042d0     9E 14 06 F6 | 	mov	arg02, ##@LR__4528
042d4     11 13 02 F6 | 	mov	arg01, local03
042d8     A8 42 B1 FD | 	call	#__system___string_cmp
042dc     01 FA 55 F2 | 	cmps	result1, #1 wc
042e0     1C 00 90 CD |  if_b	jmp	#LR__0346
042e4                 | LR__0345
042e4     3E 01 00 FF 
042e8     A0 14 06 F6 | 	mov	arg02, ##@LR__4529
042ec     11 13 02 F6 | 	mov	arg01, local03
042f0     90 42 B1 FD | 	call	#__system___string_cmp
042f4     00 FA 0D F2 | 	cmp	result1, #0 wz
042f8     00 FA 05 56 |  if_ne	mov	result1, #0
042fc     0C 00 90 5D |  if_ne	jmp	#LR__0349
04300                 | LR__0346
04300     01 24 06 F1 | 	add	local04, #1
04304     90 FF 9F FD | 	jmp	#LR__0344
04308                 | LR__0347
04308                 | LR__0348
04308                 | ' return true
04308     01 FA 65 F6 | 	neg	result1, #1
0430c                 | LR__0349
0430c     A7 F0 03 F6 | 	mov	ptra, fp
04310     B2 00 A0 FD | 	call	#popregs_
04314                 | _isint_ret
04314     2D 00 64 FD | 	ret
04318                 | 
04318                 | ' 
04318                 | ' function isdec(s as string) as boolean
04318                 | _isdec
04318     05 4A 05 F6 | 	mov	COUNT_, #5
0431c     A8 00 A0 FD | 	call	#pushregs_
04320     09 1F 02 F6 | 	mov	local01, arg01
04324     09 21 02 F6 | 	mov	local02, arg01
04328     97 06 48 FB | 	callpa	#(@LR__0351-@LR__0350)>>2,fcache_load_ptr_
0432c                 | LR__0350
0432c     10 FB C9 FA | 	rdbyte	result1, local02 wz
04330     01 20 06 51 |  if_ne	add	local02, #1
04334     F4 FF 9F 5D |  if_ne	jmp	#LR__0350
04338                 | LR__0351
04338     09 21 82 F1 | 	sub	local02, arg01
0433c     10 FB 01 F6 | 	mov	result1, local02
04340     FD 20 0A F6 | 	mov	local02, result1 wz
04344     00 FA 05 A6 |  if_e	mov	result1, #0
04348     80 00 90 AD |  if_e	jmp	#LR__0356
0434c                 | ' for i=1 to l
0434c     01 22 06 F6 | 	mov	local03, #1
04350     10 25 02 F6 | 	mov	local04, local02
04354     01 24 06 F1 | 	add	local04, #1
04358                 | LR__0352
04358     12 23 52 F2 | 	cmps	local03, local04 wc
0435c     68 00 90 3D |  if_ae	jmp	#LR__0355
04360     0F 13 02 F6 | 	mov	arg01, local01
04364     11 15 02 F6 | 	mov	arg02, local03
04368     01 16 06 F6 | 	mov	arg03, #1
0436c     10 63 B1 FD | 	call	#__system__Mid_S
04370     FD 26 02 F6 | 	mov	local05, result1
04374                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
04374     3E 01 00 FF 
04378     A2 14 06 F6 | 	mov	arg02, ##@LR__4530
0437c     13 13 02 F6 | 	mov	arg01, local05
04380     00 42 B1 FD | 	call	#__system___string_cmp
04384     00 FA 55 F2 | 	cmps	result1, #0 wc
04388     18 00 90 CD |  if_b	jmp	#LR__0353
0438c     3E 01 00 FF 
04390     A4 14 06 F6 | 	mov	arg02, ##@LR__4531
04394     13 13 02 F6 | 	mov	arg01, local05
04398     E8 41 B1 FD | 	call	#__system___string_cmp
0439c     01 FA 55 F2 | 	cmps	result1, #1 wc
043a0     1C 00 90 CD |  if_b	jmp	#LR__0354
043a4                 | LR__0353
043a4     3E 01 00 FF 
043a8     A6 14 06 F6 | 	mov	arg02, ##@LR__4532
043ac     13 13 02 F6 | 	mov	arg01, local05
043b0     D0 41 B1 FD | 	call	#__system___string_cmp
043b4     00 FA 0D F2 | 	cmp	result1, #0 wz
043b8     00 FA 05 56 |  if_ne	mov	result1, #0
043bc     0C 00 90 5D |  if_ne	jmp	#LR__0356
043c0                 | LR__0354
043c0     01 22 06 F1 | 	add	local03, #1
043c4     90 FF 9F FD | 	jmp	#LR__0352
043c8                 | LR__0355
043c8                 | ' return true
043c8     01 FA 65 F6 | 	neg	result1, #1
043cc                 | LR__0356
043cc     A7 F0 03 F6 | 	mov	ptra, fp
043d0     B2 00 A0 FD | 	call	#popregs_
043d4                 | _isdec_ret
043d4     2D 00 64 FD | 	ret
043d8                 | 
043d8                 | ' 
043d8                 | ' function isstring(s as string) as boolean
043d8                 | _isstring
043d8     01 4A 05 F6 | 	mov	COUNT_, #1
043dc     A8 00 A0 FD | 	call	#pushregs_
043e0                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
043e0     09 1F 02 F6 | 	mov	local01, arg01
043e4     01 14 06 F6 | 	mov	arg02, #1
043e8     7C 61 B1 FD | 	call	#__system__Left_S
043ec     FD 12 02 F6 | 	mov	arg01, result1
043f0     3E 01 00 FF 
043f4     A8 14 06 F6 | 	mov	arg02, ##@LR__4533
043f8     88 41 B1 FD | 	call	#__system___string_cmp
043fc     00 FA 4D F2 | 	cmps	result1, #0 wz
04400     28 00 90 5D |  if_ne	jmp	#LR__0360
04404     0F 13 02 F6 | 	mov	arg01, local01
04408     01 14 06 F6 | 	mov	arg02, #1
0440c     E0 61 B1 FD | 	call	#__system__Right_S
04410     FD 12 02 F6 | 	mov	arg01, result1
04414     3E 01 00 FF 
04418     AA 14 06 F6 | 	mov	arg02, ##@LR__4534
0441c     64 41 B1 FD | 	call	#__system___string_cmp
04420     00 FA 4D F2 | 	cmps	result1, #0 wz
04424     01 FA 65 A6 |  if_e	neg	result1, #1
04428     04 00 90 AD |  if_e	jmp	#LR__0361
0442c                 | LR__0360
0442c     00 FA 05 F6 | 	mov	result1, #0
04430                 | LR__0361
04430     A7 F0 03 F6 | 	mov	ptra, fp
04434     B2 00 A0 FD | 	call	#popregs_
04438                 | _isstring_ret
04438     2D 00 64 FD | 	ret
0443c                 | 
0443c                 | ' 
0443c                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
0443c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0443c                 | ' 
0443c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0443c                 | ' '----------------------Reverse Polish notation precompiler -----------------------------------------------------------------------------
0443c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0443c                 | ' 
0443c                 | ' '----- delete a line from a program
0443c                 | ' 
0443c                 | ' function deleteline(aline as ulong) as integer
0443c                 | _deleteline
0443c     03 4A 05 F6 | 	mov	COUNT_, #3
04440     A8 00 A0 FD | 	call	#pushregs_
04444     2C F0 07 F1 | 	add	ptra, #44
04448     04 4E 05 F1 | 	add	fp, #4
0444c     A7 12 62 FC | 	wrlong	arg01, fp
04450     69 00 00 FF 
04454     58 E4 05 F1 | 	add	objptr, ##53848
04458     F2 1E 02 FB | 	rdlong	local01, objptr
0445c     0C 4E 05 F1 | 	add	fp, #12
04460     A7 1E 62 FC | 	wrlong	local01, fp
04464     10 4E 85 F1 | 	sub	fp, #16
04468                 | ' 
04468                 | ' 
04468                 | ' searchptr=programstart
04468                 | ' 
04468                 | ' do
04468     5D 00 00 FF 
0446c     98 E5 85 F1 | 	sub	objptr, ##48024
04470                 | LR__0370
04470     14 4E 05 F1 | 	add	fp, #20
04474     A7 12 02 F6 | 	mov	arg01, fp
04478     04 4E 85 F1 | 	sub	fp, #4
0447c     A7 14 02 FB | 	rdlong	arg02, fp
04480     10 4E 85 F1 | 	sub	fp, #16
04484     18 16 06 F6 | 	mov	arg03, #24
04488     E0 35 B1 FD | 	call	#_psram_spin2_read1
0448c     10 4E 05 F1 | 	add	fp, #16
04490     A7 1E 02 FB | 	rdlong	local01, fp
04494     08 4E 85 F1 | 	sub	fp, #8
04498     A7 1E 62 FC | 	wrlong	local01, fp
0449c     20 4E 05 F1 | 	add	fp, #32
044a0     A7 1E 02 FB | 	rdlong	local01, fp
044a4     18 4E 85 F1 | 	sub	fp, #24
044a8     A7 1E 62 FC | 	wrlong	local01, fp
044ac     04 4E 05 F1 | 	add	fp, #4
044b0     A7 1E 02 FB | 	rdlong	local01, fp
044b4     10 4E 85 F1 | 	sub	fp, #16
044b8     A7 16 02 FB | 	rdlong	arg03, fp
044bc     04 4E 85 F1 | 	sub	fp, #4
044c0     0B 1F 12 F2 | 	cmp	local01, arg03 wc
044c4     28 4E 05 C1 |  if_b	add	fp, #40
044c8     A7 20 02 CB |  if_b	rdlong	local02, fp
044cc     28 4E 85 C1 |  if_b	sub	fp, #40
044d0     FF FF 3F CF 
044d4     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
044d8     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0370
044dc     0B 00 00 FF 
044e0     C0 E4 85 F1 | 	sub	objptr, ##5824
044e4                 | ' 
044e4                 | ' 
044e4                 | ' if header(0)<>aline then return -1
044e4     14 4E 05 F1 | 	add	fp, #20
044e8     A7 1E 02 FB | 	rdlong	local01, fp
044ec     10 4E 85 F1 | 	sub	fp, #16
044f0     A7 22 02 FB | 	rdlong	local03, fp
044f4     04 4E 85 F1 | 	sub	fp, #4
044f8     11 1F 0A F2 | 	cmp	local01, local03 wz
044fc     01 FA 65 56 |  if_ne	neg	result1, #1
04500     4C 03 90 5D |  if_ne	jmp	#LR__0376
04504     08 4E 05 F1 | 	add	fp, #8
04508     A7 12 02 FB | 	rdlong	arg01, fp
0450c     08 4E 85 F1 | 	sub	fp, #8
04510     01 14 66 F6 | 	neg	arg02, #1
04514     01 16 06 F6 | 	mov	arg03, #1
04518     00 18 06 F6 | 	mov	arg04, #0
0451c     0B 00 00 FF 
04520     C0 E4 05 F1 | 	add	objptr, ##5824
04524                 | '     return fill(addr, pattern, count, listPtr, 4)
04524     04 1A 06 F6 | 	mov	arg05, #4
04528     78 36 B1 FD | 	call	#_psram_spin2_fill
0452c     0B 00 00 FF 
04530     C0 E4 85 F1 | 	sub	objptr, ##5824
04534                 | ' 
04534                 | ' pslpoke(lineptr2,$FFFF_FFFF) ' flag the deleted line
04534                 | ' 
04534                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is one and only line in the program
04534     28 4E 05 F1 | 	add	fp, #40
04538     A7 1E 02 FB | 	rdlong	local01, fp
0453c     28 4E 85 F1 | 	sub	fp, #40
04540     FF FF 3F FF 
04544     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
04548     24 4E 05 A1 |  if_e	add	fp, #36
0454c     A7 22 02 AB |  if_e	rdlong	local03, fp
04550     24 4E 85 A1 |  if_e	sub	fp, #36
04554     FF FF 7F AF 
04558     FF 23 0E A2 |  if_e	cmp	local03, ##-1 wz
0455c     90 00 90 5D |  if_ne	jmp	#LR__0371
04560     69 00 00 FF 
04564     58 E4 05 F1 | 	add	objptr, ##53848
04568     F2 00 68 FC | 	wrlong	#0, objptr
0456c     07 00 00 FF 
04570     28 E4 85 F1 | 	sub	objptr, ##3624
04574     F2 00 68 FC | 	wrlong	#0, objptr
04578     07 00 00 FF 
0457c     2C E4 05 F1 | 	add	objptr, ##3628
04580     F2 00 68 FC | 	wrlong	#0, objptr
04584     04 E4 05 F1 | 	add	objptr, #4
04588     FF FF FF FF 
0458c     F2 FE 6B FC | 	wrlong	##-1, objptr
04590     00 12 06 F6 | 	mov	arg01, #0
04594     10 E4 85 F1 | 	sub	objptr, #16
04598     F2 00 68 FC | 	wrlong	#0, objptr
0459c     01 14 66 F6 | 	neg	arg02, #1
045a0     01 16 06 F6 | 	mov	arg03, #1
045a4     00 18 06 F6 | 	mov	arg04, #0
045a8     5D 00 00 FF 
045ac     90 E5 85 F1 | 	sub	objptr, ##48016
045b0                 | '     return fill(addr, pattern, count, listPtr, 4)
045b0     04 1A 06 F6 | 	mov	arg05, #4
045b4     EC 35 B1 FD | 	call	#_psram_spin2_fill
045b8     10 12 06 F6 | 	mov	arg01, #16
045bc     01 14 66 F6 | 	neg	arg02, #1
045c0     01 16 06 F6 | 	mov	arg03, #1
045c4     00 18 06 F6 | 	mov	arg04, #0
045c8                 | '     return fill(addr, pattern, count, listPtr, 4)
045c8     04 1A 06 F6 | 	mov	arg05, #4
045cc     D4 35 B1 FD | 	call	#_psram_spin2_fill
045d0     14 12 06 F6 | 	mov	arg01, #20
045d4     1E 14 CE F9 | 	bmask	arg02, #30
045d8     01 16 06 F6 | 	mov	arg03, #1
045dc     00 18 06 F6 | 	mov	arg04, #0
045e0                 | '     return fill(addr, pattern, count, listPtr, 4)
045e0     04 1A 06 F6 | 	mov	arg05, #4
045e4     BC 35 B1 FD | 	call	#_psram_spin2_fill
045e8     0B 00 00 FF 
045ec     C0 E4 85 F1 | 	sub	objptr, ##5824
045f0                 | LR__0371
045f0                 | ' 
045f0                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' this is the last, and not first, line of the program
045f0     28 4E 05 F1 | 	add	fp, #40
045f4     A7 1E 02 FB | 	rdlong	local01, fp
045f8     28 4E 85 F1 | 	sub	fp, #40
045fc     FF FF 3F FF 
04600     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
04604     88 00 90 5D |  if_ne	jmp	#LR__0372
04608     24 4E 05 F1 | 	add	fp, #36
0460c     A7 22 02 FB | 	rdlong	local03, fp
04610     24 4E 85 F1 | 	sub	fp, #36
04614     FF FF 7F FF 
04618     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0461c     70 00 90 AD |  if_e	jmp	#LR__0372
04620     24 4E 05 F1 | 	add	fp, #36
04624     A7 12 02 FB | 	rdlong	arg01, fp
04628     24 4E 85 F1 | 	sub	fp, #36
0462c     14 12 06 F1 | 	add	arg01, #20
04630     1E 14 CE F9 | 	bmask	arg02, #30
04634     01 16 06 F6 | 	mov	arg03, #1
04638     00 18 06 F6 | 	mov	arg04, #0
0463c     0B 00 00 FF 
04640     C0 E4 05 F1 | 	add	objptr, ##5824
04644                 | '     return fill(addr, pattern, count, listPtr, 4)
04644     04 1A 06 F6 | 	mov	arg05, #4
04648     58 35 B1 FD | 	call	#_psram_spin2_fill
0464c     24 4E 05 F1 | 	add	fp, #36
04650     A7 1E 02 FB | 	rdlong	local01, fp
04654     5D 00 00 FF 
04658     A0 E5 05 F1 | 	add	objptr, ##48032
0465c     F2 1E 62 FC | 	wrlong	local01, objptr
04660     69 00 00 FF 
04664     60 E4 85 F1 | 	sub	objptr, ##53856
04668     A7 12 02 FB | 	rdlong	arg01, fp
0466c     24 4E 85 F1 | 	sub	fp, #36
04670     80 0B B1 FD | 	call	#_pslpeek
04674     69 00 00 FF 
04678     5C E4 05 F1 | 	add	objptr, ##53852
0467c     F2 FA 61 FC | 	wrlong	result1, objptr
04680     69 00 00 FF 
04684     5C E4 85 F1 | 	sub	objptr, ##53852
04688                 | '   pslpoke(header(4)+20,$7FFF_FFFF) ' unlink the previous line
04688                 | '   lastlineptr=header(4)            ' keep last line pointer to avoid searching while sequentially adding a new line
04688                 | '   lastline=pslpeek(header(4))
04688                 | '   return 0
04688     00 FA 05 F6 | 	mov	result1, #0
0468c     C0 01 90 FD | 	jmp	#LR__0376
04690                 | LR__0372
04690                 | ' 
04690                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is the first line, but not the last
04690     28 4E 05 F1 | 	add	fp, #40
04694     A7 1E 02 FB | 	rdlong	local01, fp
04698     28 4E 85 F1 | 	sub	fp, #40
0469c     FF FF 3F FF 
046a0     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
046a4     6C 00 90 AD |  if_e	jmp	#LR__0373
046a8     24 4E 05 F1 | 	add	fp, #36
046ac     A7 22 02 FB | 	rdlong	local03, fp
046b0     24 4E 85 F1 | 	sub	fp, #36
046b4     FF FF 7F FF 
046b8     FF 23 0E F2 | 	cmp	local03, ##-1 wz
046bc     54 00 90 5D |  if_ne	jmp	#LR__0373
046c0     28 4E 05 F1 | 	add	fp, #40
046c4     A7 12 02 FB | 	rdlong	arg01, fp
046c8     28 4E 85 F1 | 	sub	fp, #40
046cc     10 12 06 F1 | 	add	arg01, #16
046d0     01 14 66 F6 | 	neg	arg02, #1
046d4     01 16 06 F6 | 	mov	arg03, #1
046d8     00 18 06 F6 | 	mov	arg04, #0
046dc     0B 00 00 FF 
046e0     C0 E4 05 F1 | 	add	objptr, ##5824
046e4                 | '     return fill(addr, pattern, count, listPtr, 4)
046e4     04 1A 06 F6 | 	mov	arg05, #4
046e8     B8 34 B1 FD | 	call	#_psram_spin2_fill
046ec     28 4E 05 F1 | 	add	fp, #40
046f0     A7 1E 02 FB | 	rdlong	local01, fp
046f4     28 4E 85 F1 | 	sub	fp, #40
046f8     5D 00 00 FF 
046fc     98 E5 05 F1 | 	add	objptr, ##48024
04700     F2 1E 62 FC | 	wrlong	local01, objptr
04704     69 00 00 FF 
04708     58 E4 85 F1 | 	sub	objptr, ##53848
0470c                 | ' '   print "deleted first line"
0470c                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
0470c                 | '   programstart=header(5) ' adjust the program start to point on the first new line
0470c                 | '   return 0
0470c     00 FA 05 F6 | 	mov	result1, #0
04710     3C 01 90 FD | 	jmp	#LR__0376
04714                 | LR__0373
04714                 | ' 
04714                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' the line is not first and not last
04714     28 4E 05 F1 | 	add	fp, #40
04718     A7 1E 02 FB | 	rdlong	local01, fp
0471c     28 4E 85 F1 | 	sub	fp, #40
04720     FF FF 3F FF 
04724     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
04728     24 4E 05 51 |  if_ne	add	fp, #36
0472c     A7 22 02 5B |  if_ne	rdlong	local03, fp
04730     24 4E 85 51 |  if_ne	sub	fp, #36
04734     FF FF 7F 5F 
04738     FF 23 0E 52 |  if_ne	cmp	local03, ##-1 wz
0473c     68 00 90 AD |  if_e	jmp	#LR__0374
04740     28 4E 05 F1 | 	add	fp, #40
04744     A7 12 02 FB | 	rdlong	arg01, fp
04748     10 12 06 F1 | 	add	arg01, #16
0474c     04 4E 85 F1 | 	sub	fp, #4
04750     A7 14 02 FB | 	rdlong	arg02, fp
04754     24 4E 85 F1 | 	sub	fp, #36
04758     01 16 06 F6 | 	mov	arg03, #1
0475c     00 18 06 F6 | 	mov	arg04, #0
04760     0B 00 00 FF 
04764     C0 E4 05 F1 | 	add	objptr, ##5824
04768                 | '     return fill(addr, pattern, count, listPtr, 4)
04768     04 1A 06 F6 | 	mov	arg05, #4
0476c     34 34 B1 FD | 	call	#_psram_spin2_fill
04770     24 4E 05 F1 | 	add	fp, #36
04774     A7 12 02 FB | 	rdlong	arg01, fp
04778     14 12 06 F1 | 	add	arg01, #20
0477c     04 4E 05 F1 | 	add	fp, #4
04780     A7 14 02 FB | 	rdlong	arg02, fp
04784     28 4E 85 F1 | 	sub	fp, #40
04788     01 16 06 F6 | 	mov	arg03, #1
0478c     00 18 06 F6 | 	mov	arg04, #0
04790                 | '     return fill(addr, pattern, count, listPtr, 4)
04790     04 1A 06 F6 | 	mov	arg05, #4
04794     0C 34 B1 FD | 	call	#_psram_spin2_fill
04798     0B 00 00 FF 
0479c     C0 E4 85 F1 | 	sub	objptr, ##5824
047a0                 | '    pslpoke(header(5)+16,header(4))  
047a0                 | '    pslpoke(header(4)+20, header(5))
047a0                 | '    return 0
047a0     00 FA 05 F6 | 	mov	result1, #0
047a4     A8 00 90 FD | 	jmp	#LR__0376
047a8                 | LR__0374
047a8     10 4E 05 F1 | 	add	fp, #16
047ac     A7 1E 02 FB | 	rdlong	local01, fp
047b0     08 4E 85 F1 | 	sub	fp, #8
047b4     A7 1E 62 FC | 	wrlong	local01, fp
047b8     69 00 00 FF 
047bc     58 E4 05 F1 | 	add	objptr, ##53848
047c0     F2 1E 02 FB | 	rdlong	local01, objptr
047c4     08 4E 05 F1 | 	add	fp, #8
047c8     A7 1E 62 FC | 	wrlong	local01, fp
047cc     10 4E 85 F1 | 	sub	fp, #16
047d0                 | ' 
047d0                 | ' 
047d0                 | ' 
047d0                 | ' ' now find if the deleted line was a target for goto and replace fast_goto with find_goto
047d0                 | ' 
047d0                 | ' lineptr2=searchptr
047d0                 | ' searchptr=programstart
047d0                 | ' 
047d0                 | ' do
047d0     5D 00 00 FF 
047d4     98 E5 85 F1 | 	sub	objptr, ##48024
047d8                 | LR__0375
047d8     14 4E 05 F1 | 	add	fp, #20
047dc     A7 12 02 F6 | 	mov	arg01, fp
047e0     04 4E 85 F1 | 	sub	fp, #4
047e4     A7 14 02 FB | 	rdlong	arg02, fp
047e8     10 4E 85 F1 | 	sub	fp, #16
047ec     18 16 06 F6 | 	mov	arg03, #24
047f0     78 32 B1 FD | 	call	#_psram_spin2_read1
047f4     10 4E 05 F1 | 	add	fp, #16
047f8     A7 1E 02 FB | 	rdlong	local01, fp
047fc     08 4E 85 F1 | 	sub	fp, #8
04800     A7 1E 62 FC | 	wrlong	local01, fp
04804     20 4E 05 F1 | 	add	fp, #32
04808     A7 1E 02 FB | 	rdlong	local01, fp
0480c     18 4E 85 F1 | 	sub	fp, #24
04810     A7 1E 62 FC | 	wrlong	local01, fp
04814     04 4E 05 F1 | 	add	fp, #4
04818     A7 1E 02 FB | 	rdlong	local01, fp
0481c     10 4E 85 F1 | 	sub	fp, #16
04820     A7 22 02 FB | 	rdlong	local03, fp
04824     04 4E 85 F1 | 	sub	fp, #4
04828     11 1F 12 F2 | 	cmp	local01, local03 wc
0482c     28 4E 05 C1 |  if_b	add	fp, #40
04830     A7 20 02 CB |  if_b	rdlong	local02, fp
04834     28 4E 85 C1 |  if_b	sub	fp, #40
04838     FF FF 3F CF 
0483c     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
04840     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0375
04844     0B 00 00 FF 
04848     C0 E4 85 F1 | 	sub	objptr, ##5824
0484c     00 FA 05 F6 | 	mov	result1, #0
04850                 | LR__0376
04850     A7 F0 03 F6 | 	mov	ptra, fp
04854     B2 00 A0 FD | 	call	#popregs_
04858                 | _deleteline_ret
04858     2D 00 64 FD | 	ret
0485c                 | 
0485c                 | ' 
0485c                 | ' sub save_line
0485c                 | _save_line
0485c     03 4A 05 F6 | 	mov	COUNT_, #3
04860     A8 00 A0 FD | 	call	#pushregs_
04864     69 00 00 FF 
04868     50 E4 05 F1 | 	add	objptr, ##53840
0486c     F2 16 02 FB | 	rdlong	arg03, objptr
04870     01 16 06 F1 | 	add	arg03, #1
04874     05 00 00 FF 
04878     18 E4 85 F1 | 	sub	objptr, ##2584
0487c     F2 14 02 FB | 	rdlong	arg02, objptr
04880     0B 15 02 FD | 	qmul	arg02, arg03
04884     0E 00 00 FF 
04888     44 E4 85 F1 | 	sub	objptr, ##7236
0488c     F2 12 02 FB | 	rdlong	arg01, objptr
04890     55 00 00 FF 
04894     F4 E5 85 F1 | 	sub	objptr, ##44020
04898     09 1F 02 F6 | 	mov	local01, arg01
0489c     18 20 62 FD | 	getqx	local02
048a0     97 06 48 FB | 	callpa	#(@LR__0381-@LR__0380)>>2,fcache_load_ptr_
048a4                 | LR__0380
048a4     0F FB C9 FA | 	rdbyte	result1, local01 wz
048a8     01 1E 06 51 |  if_ne	add	local01, #1
048ac     F4 FF 9F 5D |  if_ne	jmp	#LR__0380
048b0                 | LR__0381
048b0     09 1F 82 F1 | 	sub	local01, arg01
048b4     03 1E CE F7 | 	test	local01, #3 wz
048b8     02 1E 46 50 |  if_ne	shr	local01, #2
048bc     01 1E 06 51 |  if_ne	add	local01, #1
048c0     02 1E 66 50 |  if_ne	shl	local01, #2
048c4     10 23 02 F6 | 	mov	local03, local02
048c8     0F 23 02 F1 | 	add	local03, local01
048cc     62 00 00 FF 
048d0     30 E4 05 F1 | 	add	objptr, ##50224
048d4     F2 16 02 FB | 	rdlong	arg03, objptr
048d8     10 17 02 F1 | 	add	arg03, local02
048dc     04 00 00 FF 
048e0     28 E4 05 F1 | 	add	objptr, ##2088
048e4     F2 16 62 FC | 	wrlong	arg03, objptr
048e8     04 E4 05 F1 | 	add	objptr, #4
048ec     F2 1E 62 FC | 	wrlong	local01, objptr
048f0     0C E4 85 F1 | 	sub	objptr, #12
048f4     F2 12 02 F6 | 	mov	arg01, objptr
048f8     04 00 00 FF 
048fc     20 E4 85 F1 | 	sub	objptr, ##2080
04900     F2 14 02 FB | 	rdlong	arg02, objptr
04904     10 17 02 F6 | 	mov	arg03, local02
04908     56 00 00 FF 
0490c     70 E5 85 F1 | 	sub	objptr, ##44400
04910     F4 31 B1 FD | 	call	#_psram_spin2_write
04914     4A 00 00 FF 
04918     34 E5 05 F1 | 	add	objptr, ##38196
0491c     F2 12 02 FB | 	rdlong	arg01, objptr
04920     0C 00 00 FF 
04924     3C E4 05 F1 | 	add	objptr, ##6204
04928     F2 14 02 FB | 	rdlong	arg02, objptr
0492c     10 15 02 F1 | 	add	arg02, local02
04930     0F 17 02 F6 | 	mov	arg03, local01
04934     56 00 00 FF 
04938     70 E5 85 F1 | 	sub	objptr, ##44400
0493c     C8 31 B1 FD | 	call	#_psram_spin2_write
04940     56 00 00 FF 
04944     70 E5 05 F1 | 	add	objptr, ##44400
04948     F2 1E 02 FB | 	rdlong	local01, objptr
0494c     11 1F 02 F1 | 	add	local01, local03
04950     F2 1E 62 FC | 	wrlong	local01, objptr
04954     62 00 00 FF 
04958     30 E4 85 F1 | 	sub	objptr, ##50224
0495c     A7 F0 03 F6 | 	mov	ptra, fp
04960     B2 00 A0 FD | 	call	#popregs_
04964                 | _save_line_ret
04964     2D 00 64 FD | 	ret
04968                 | 
04968                 | ' 
04968                 | ' 
04968                 | ' function insertline(aline as ulong) as integer
04968                 | _insertline
04968     02 4A 05 F6 | 	mov	COUNT_, #2
0496c     A8 00 A0 FD | 	call	#pushregs_
04970     28 F0 07 F1 | 	add	ptra, #40
04974     04 4E 05 F1 | 	add	fp, #4
04978     A7 12 62 FC | 	wrlong	arg01, fp
0497c     69 00 00 FF 
04980     58 E4 05 F1 | 	add	objptr, ##53848
04984     F2 1E 02 FB | 	rdlong	local01, objptr
04988     04 4E 05 F1 | 	add	fp, #4
0498c     A7 1E 62 FC | 	wrlong	local01, fp
04990     08 4E 85 F1 | 	sub	fp, #8
04994                 | ' 
04994                 | ' do
04994     5D 00 00 FF 
04998     98 E5 85 F1 | 	sub	objptr, ##48024
0499c                 | LR__0390
0499c     10 4E 05 F1 | 	add	fp, #16
049a0     A7 12 02 F6 | 	mov	arg01, fp
049a4     08 4E 85 F1 | 	sub	fp, #8
049a8     A7 14 02 FB | 	rdlong	arg02, fp
049ac     08 4E 85 F1 | 	sub	fp, #8
049b0     18 16 06 F6 | 	mov	arg03, #24
049b4     B4 30 B1 FD | 	call	#_psram_spin2_read1
049b8     08 4E 05 F1 | 	add	fp, #8
049bc     A7 1E 02 FB | 	rdlong	local01, fp
049c0     04 4E 05 F1 | 	add	fp, #4
049c4     A7 1E 62 FC | 	wrlong	local01, fp
049c8     18 4E 05 F1 | 	add	fp, #24
049cc     A7 1E 02 FB | 	rdlong	local01, fp
049d0     1C 4E 85 F1 | 	sub	fp, #28
049d4     A7 1E 62 FC | 	wrlong	local01, fp
049d8     08 4E 05 F1 | 	add	fp, #8
049dc     A7 1E 02 FB | 	rdlong	local01, fp
049e0     0C 4E 85 F1 | 	sub	fp, #12
049e4     A7 16 02 FB | 	rdlong	arg03, fp
049e8     04 4E 85 F1 | 	sub	fp, #4
049ec     0B 1F 12 F2 | 	cmp	local01, arg03 wc
049f0     24 4E 05 C1 |  if_b	add	fp, #36
049f4     A7 20 02 CB |  if_b	rdlong	local02, fp
049f8     24 4E 85 C1 |  if_b	sub	fp, #36
049fc     FF FF 3F CF 
04a00     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
04a04     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0390
04a08     0B 00 00 FF 
04a0c     C0 E4 85 F1 | 	sub	objptr, ##5824
04a10                 | ' 
04a10                 | ' if header(0)=aline then return -1 ' delete it first
04a10     10 4E 05 F1 | 	add	fp, #16
04a14     A7 1E 02 FB | 	rdlong	local01, fp
04a18     0C 4E 85 F1 | 	sub	fp, #12
04a1c     A7 20 02 FB | 	rdlong	local02, fp
04a20     04 4E 85 F1 | 	sub	fp, #4
04a24     10 1F 0A F2 | 	cmp	local01, local02 wz
04a28     01 FA 65 A6 |  if_e	neg	result1, #1
04a2c     74 01 90 AD |  if_e	jmp	#LR__0393
04a30                 | ' if header(0)<aline then return -2 ' end of program reached
04a30     10 4E 05 F1 | 	add	fp, #16
04a34     A7 1E 02 FB | 	rdlong	local01, fp
04a38     0C 4E 85 F1 | 	sub	fp, #12
04a3c     A7 16 02 FB | 	rdlong	arg03, fp
04a40     04 4E 85 F1 | 	sub	fp, #4
04a44     0B 1F 12 F2 | 	cmp	local01, arg03 wc
04a48     02 FA 65 C6 |  if_b	neg	result1, #2
04a4c     54 01 90 CD |  if_b	jmp	#LR__0393
04a50                 | ' 
04a50                 | ' if  header(4)=$FFFF_FFFF then ' this is one first line in the program so the inserted line will be new first
04a50     20 4E 05 F1 | 	add	fp, #32
04a54     A7 1E 02 FB | 	rdlong	local01, fp
04a58     20 4E 85 F1 | 	sub	fp, #32
04a5c     FF FF 7F FF 
04a60     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
04a64     84 00 90 5D |  if_ne	jmp	#LR__0391
04a68     62 00 00 FF 
04a6c     30 E4 05 F1 | 	add	objptr, ##50224
04a70     F2 1E 02 FB | 	rdlong	local01, objptr
04a74     07 00 00 FF 
04a78     28 E4 05 F1 | 	add	objptr, ##3624
04a7c     F2 1E 62 FC | 	wrlong	local01, objptr
04a80     0C 4E 05 F1 | 	add	fp, #12
04a84     A7 12 02 FB | 	rdlong	arg01, fp
04a88     0C 4E 85 F1 | 	sub	fp, #12
04a8c     10 12 06 F1 | 	add	arg01, #16
04a90     07 00 00 FF 
04a94     28 E4 85 F1 | 	sub	objptr, ##3624
04a98     F2 14 02 FB | 	rdlong	arg02, objptr
04a9c     01 16 06 F6 | 	mov	arg03, #1
04aa0     00 18 06 F6 | 	mov	arg04, #0
04aa4     56 00 00 FF 
04aa8     70 E5 85 F1 | 	sub	objptr, ##44400
04aac                 | '     return fill(addr, pattern, count, listPtr, 4)
04aac     04 1A 06 F6 | 	mov	arg05, #4
04ab0     F0 30 B1 FD | 	call	#_psram_spin2_fill
04ab4     5A 00 00 FF 
04ab8     A0 E5 05 F1 | 	add	objptr, ##46496
04abc     FF FF FF FF 
04ac0     F2 FE 6B FC | 	wrlong	##-1, objptr
04ac4     0C 4E 05 F1 | 	add	fp, #12
04ac8     A7 1E 02 FB | 	rdlong	local01, fp
04acc     0C 4E 85 F1 | 	sub	fp, #12
04ad0     04 E4 05 F1 | 	add	objptr, #4
04ad4     F2 1E 62 FC | 	wrlong	local01, objptr
04ad8     66 00 00 FF 
04adc     64 E4 85 F1 | 	sub	objptr, ##52324
04ae0     78 FD BF FD | 	call	#_save_line
04ae4                 | '   programstart=programptr
04ae4                 | '   pslpoke(lineptr2+16,programptr)
04ae4                 | '   ucompiledline(4)=$FFFF_FFFF
04ae4                 | '   ucompiledline(5)=lineptr2
04ae4                 | '   save_line
04ae4                 | '   return 0
04ae4     00 FA 05 F6 | 	mov	result1, #0
04ae8     B8 00 90 FD | 	jmp	#LR__0393
04aec                 | LR__0391
04aec                 | ' 
04aec                 | ' if header(4)<>$FFFF_FFFF then ' this is not first line of the program. It doesn't matter if it is last as we will insert it before
04aec     20 4E 05 F1 | 	add	fp, #32
04af0     A7 1E 02 FB | 	rdlong	local01, fp
04af4     20 4E 85 F1 | 	sub	fp, #32
04af8     FF FF 7F FF 
04afc     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
04b00     9C 00 90 AD |  if_e	jmp	#LR__0392
04b04     20 4E 05 F1 | 	add	fp, #32
04b08     A7 1E 02 FB | 	rdlong	local01, fp
04b0c     66 00 00 FF 
04b10     60 E4 05 F1 | 	add	objptr, ##52320
04b14     F2 1E 62 FC | 	wrlong	local01, objptr
04b18     14 4E 85 F1 | 	sub	fp, #20
04b1c     A7 1E 02 FB | 	rdlong	local01, fp
04b20     04 E4 05 F1 | 	add	objptr, #4
04b24     F2 1E 62 FC | 	wrlong	local01, objptr
04b28     A7 12 02 FB | 	rdlong	arg01, fp
04b2c     0C 4E 85 F1 | 	sub	fp, #12
04b30     10 12 06 F1 | 	add	arg01, #16
04b34     04 00 00 FF 
04b38     34 E4 85 F1 | 	sub	objptr, ##2100
04b3c     F2 14 02 FB | 	rdlong	arg02, objptr
04b40     01 16 06 F6 | 	mov	arg03, #1
04b44     00 18 06 F6 | 	mov	arg04, #0
04b48     56 00 00 FF 
04b4c     70 E5 85 F1 | 	sub	objptr, ##44400
04b50                 | '     return fill(addr, pattern, count, listPtr, 4)
04b50     04 1A 06 F6 | 	mov	arg05, #4
04b54     4C 30 B1 FD | 	call	#_psram_spin2_fill
04b58     20 4E 05 F1 | 	add	fp, #32
04b5c     A7 12 02 FB | 	rdlong	arg01, fp
04b60     20 4E 85 F1 | 	sub	fp, #32
04b64     14 12 06 F1 | 	add	arg01, #20
04b68     56 00 00 FF 
04b6c     70 E5 05 F1 | 	add	objptr, ##44400
04b70     F2 14 02 FB | 	rdlong	arg02, objptr
04b74     01 16 06 F6 | 	mov	arg03, #1
04b78     00 18 06 F6 | 	mov	arg04, #0
04b7c     56 00 00 FF 
04b80     70 E5 85 F1 | 	sub	objptr, ##44400
04b84                 | '     return fill(addr, pattern, count, listPtr, 4)
04b84     04 1A 06 F6 | 	mov	arg05, #4
04b88     18 30 B1 FD | 	call	#_psram_spin2_fill
04b8c     0B 00 00 FF 
04b90     C0 E4 85 F1 | 	sub	objptr, ##5824
04b94     C4 FC BF FD | 	call	#_save_line
04b98                 | '   ucompiledline(4)=header(4)
04b98                 | '   ucompiledline(5)=lineptr2
04b98                 | '   pslpoke(lineptr2+16,programptr)
04b98                 | '   pslpoke(header(4)+20,programptr)
04b98                 | '   save_line
04b98                 | '   return 0
04b98     00 FA 05 F6 | 	mov	result1, #0
04b9c     04 00 90 FD | 	jmp	#LR__0393
04ba0                 | LR__0392
04ba0     00 FA 05 F6 | 	mov	result1, #0
04ba4                 | LR__0393
04ba4     A7 F0 03 F6 | 	mov	ptra, fp
04ba8     B2 00 A0 FD | 	call	#popregs_
04bac                 | _insertline_ret
04bac     2D 00 64 FD | 	ret
04bb0                 | 
04bb0                 | ' 
04bb0                 | ' sub add_line_at_end(aline) 
04bb0                 | _add_line_at_end
04bb0     69 00 00 FF 
04bb4     5C E4 05 F1 | 	add	objptr, ##53852
04bb8     F2 12 62 FC | 	wrlong	arg01, objptr
04bbc     04 E4 05 F1 | 	add	objptr, #4
04bc0     F2 14 02 FB | 	rdlong	arg02, objptr
04bc4     03 00 00 FF 
04bc8     00 E4 85 F1 | 	sub	objptr, ##1536
04bcc     F2 14 62 FC | 	wrlong	arg02, objptr
04bd0     03 00 00 FF 
04bd4     00 E4 05 F1 | 	add	objptr, ##1536
04bd8     F2 12 02 FB | 	rdlong	arg01, objptr
04bdc     14 12 06 F1 | 	add	arg01, #20
04be0     07 00 00 FF 
04be4     30 E4 85 F1 | 	sub	objptr, ##3632
04be8     F2 14 02 FB | 	rdlong	arg02, objptr
04bec     01 16 06 F6 | 	mov	arg03, #1
04bf0     00 18 06 F6 | 	mov	arg04, #0
04bf4     56 00 00 FF 
04bf8     70 E5 85 F1 | 	sub	objptr, ##44400
04bfc                 | '     return fill(addr, pattern, count, listPtr, 4)
04bfc     04 1A 06 F6 | 	mov	arg05, #4
04c00     A0 2F B1 FD | 	call	#_psram_spin2_fill
04c04     56 00 00 FF 
04c08     70 E5 05 F1 | 	add	objptr, ##44400
04c0c     F2 14 02 FB | 	rdlong	arg02, objptr
04c10     07 00 00 FF 
04c14     30 E4 05 F1 | 	add	objptr, ##3632
04c18     F2 14 62 FC | 	wrlong	arg02, objptr
04c1c     02 00 00 FF 
04c20     FC E5 85 F1 | 	sub	objptr, ##1532
04c24     FF FF BF FF 
04c28     F2 FE 6B FC | 	wrlong	##2147483647, objptr
04c2c                 | ' 
04c2c                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
04c2c                 | ' if programptr=0 then ucompiledline(4)=$FFFFFFFF ' that is the first line
04c2c     04 00 00 FF 
04c30     34 E4 85 F1 | 	sub	objptr, ##2100
04c34     F2 14 0A FB | 	rdlong	arg02, objptr wz
04c38     62 00 00 FF 
04c3c     30 E4 85 F1 | 	sub	objptr, ##50224
04c40     66 00 00 AF 
04c44     60 E4 05 A1 |  if_e	add	objptr, ##52320
04c48     FF FF FF AF 
04c4c     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
04c50     66 00 00 AF 
04c54     60 E4 85 A1 |  if_e	sub	objptr, ##52320
04c58     00 FC BF FD | 	call	#_save_line
04c5c     62 00 00 FF 
04c60     30 E4 05 F1 | 	add	objptr, ##50224
04c64     F2 12 02 FB | 	rdlong	arg01, objptr
04c68     01 14 66 F6 | 	neg	arg02, #1
04c6c     01 16 06 F6 | 	mov	arg03, #1
04c70     00 18 06 F6 | 	mov	arg04, #0
04c74     56 00 00 FF 
04c78     70 E5 85 F1 | 	sub	objptr, ##44400
04c7c                 | '     return fill(addr, pattern, count, listPtr, 4)
04c7c     04 1A 06 F6 | 	mov	arg05, #4
04c80     20 2F B1 FD | 	call	#_psram_spin2_fill
04c84     0B 00 00 FF 
04c88     C0 E4 85 F1 | 	sub	objptr, ##5824
04c8c                 | _add_line_at_end_ret
04c8c     2D 00 64 FD | 	ret
04c90                 | 
04c90                 | ' 
04c90                 | ' function compile_immediate(linetype as ulong) as integer
04c90                 | _compile_immediate
04c90     09 4A 05 F6 | 	mov	COUNT_, #9
04c94     A8 00 A0 FD | 	call	#pushregs_
04c98                 | _compile_immediate_enter
04c98     09 25 0A F6 | 	mov	local04, arg01 wz
04c9c     00 26 06 F6 | 	mov	local05, #0
04ca0     00 28 06 F6 | 	mov	local06, #0
04ca4                 | ' 
04ca4                 | ' ' linetype=cont+1, linetype=0 immediate
04ca4                 | ' '  : 1: this is the first part of the line that will continue
04ca4                 | ' ' 2 - this is the continuation of the line
04ca4                 | ' ' 3 - this is the last continued line
04ca4                 | ' ' 4 - this is the one and only part
04ca4                 | ' 
04ca4                 | ' err=0
04ca4                 | ' cmd=0
04ca4                 | ' if linetype=0 then cmd=lparts(0).token : ct=1 : lineptr=0 
04ca4     2C 00 90 5D |  if_ne	jmp	#LR__0400
04ca8     53 00 00 FF 
04cac     E4 E5 05 F1 | 	add	objptr, ##42980
04cb0     F2 28 02 FB | 	rdlong	local06, objptr
04cb4     02 00 00 FF 
04cb8     34 E4 05 F1 | 	add	objptr, ##1076
04cbc     F2 02 68 FC | 	wrlong	#1, objptr
04cc0     13 00 00 FF 
04cc4     38 E4 05 F1 | 	add	objptr, ##9784
04cc8     F2 00 68 FC | 	wrlong	#0, objptr
04ccc     69 00 00 FF 
04cd0     50 E4 85 F1 | 	sub	objptr, ##53840
04cd4                 | LR__0400
04cd4                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 ' don't set lineptr
04cd4     02 24 0E F2 | 	cmp	local04, #2 wz
04cd8     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
04cdc     53 00 00 AF 
04ce0     E4 E5 05 A1 |  if_e	add	objptr, ##42980
04ce4     F2 28 02 AB |  if_e	rdlong	local06, objptr
04ce8     02 00 00 AF 
04cec     34 E4 05 A1 |  if_e	add	objptr, ##1076
04cf0     F2 02 68 AC |  if_e	wrlong	#1, objptr
04cf4     56 00 00 AF 
04cf8     18 E4 85 A1 |  if_e	sub	objptr, ##44056
04cfc                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
04cfc     04 24 0E F2 | 	cmp	local04, #4 wz
04d00     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
04d04     2C 00 90 5D |  if_ne	jmp	#LR__0401
04d08     53 00 00 FF 
04d0c     EC E5 05 F1 | 	add	objptr, ##42988
04d10     F2 28 02 FB | 	rdlong	local06, objptr
04d14     02 00 00 FF 
04d18     2C E4 05 F1 | 	add	objptr, ##1068
04d1c     F2 04 68 FC | 	wrlong	#2, objptr
04d20     13 00 00 FF 
04d24     38 E4 05 F1 | 	add	objptr, ##9784
04d28     F2 04 68 FC | 	wrlong	#2, objptr
04d2c     69 00 00 FF 
04d30     50 E4 85 F1 | 	sub	objptr, ##53840
04d34                 | LR__0401
04d34                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 ' continued after if/else
04d34     05 24 0E F2 | 	cmp	local04, #5 wz
04d38     40 00 90 5D |  if_ne	jmp	#LR__0402
04d3c     56 00 00 FF 
04d40     18 E4 05 F1 | 	add	objptr, ##44056
04d44     F2 2A 02 FB | 	rdlong	local07, objptr
04d48     15 29 02 F6 | 	mov	local06, local07
04d4c     03 28 66 F0 | 	shl	local06, #3
04d50     02 00 00 FF 
04d54     38 E4 85 F1 | 	sub	objptr, ##1080
04d58     F2 28 02 F1 | 	add	local06, objptr
04d5c     04 28 06 F1 | 	add	local06, #4
04d60     14 29 02 FB | 	rdlong	local06, local06
04d64     01 2A 06 F1 | 	add	local07, #1
04d68     02 00 00 FF 
04d6c     38 E4 05 F1 | 	add	objptr, ##1080
04d70     F2 2A 62 FC | 	wrlong	local07, objptr
04d74     56 00 00 FF 
04d78     18 E4 85 F1 | 	sub	objptr, ##44056
04d7c                 | LR__0402
04d7c     00 2C 06 F6 | 	mov	local08, #0
04d80                 | ' vars=0
04d80                 | ' 'print  "In compile_immediate cmd=:", cmd
04d80                 | ' 451 select case cmd
04d80     40 28 0E F2 | 	cmp	local06, #64 wz
04d84     41 28 0E 52 |  if_ne	cmp	local06, #65 wz
04d88     44 03 90 AD |  if_e	jmp	#LR__0450
04d8c     4C 28 0E F2 | 	cmp	local06, #76 wz
04d90     84 01 90 AD |  if_e	jmp	#LR__0403
04d94     73 28 0E F2 | 	cmp	local06, #115 wz
04d98     88 01 90 AD |  if_e	jmp	#LR__0404
04d9c     74 28 0E F2 | 	cmp	local06, #116 wz
04da0     8C 01 90 AD |  if_e	jmp	#LR__0405
04da4     75 28 0E F2 | 	cmp	local06, #117 wz
04da8     90 01 90 AD |  if_e	jmp	#LR__0406
04dac     4D 28 0E F2 | 	cmp	local06, #77 wz
04db0     1C 03 90 AD |  if_e	jmp	#LR__0450
04db4     42 28 0E F2 | 	cmp	local06, #66 wz
04db8     8C 01 90 AD |  if_e	jmp	#LR__0407
04dbc     43 28 0E F2 | 	cmp	local06, #67 wz
04dc0     90 01 90 AD |  if_e	jmp	#LR__0408
04dc4     45 28 0E F2 | 	cmp	local06, #69 wz
04dc8     94 01 90 AD |  if_e	jmp	#LR__0409
04dcc     46 28 0E F2 | 	cmp	local06, #70 wz
04dd0     98 01 90 AD |  if_e	jmp	#LR__0410
04dd4     47 28 0E F2 | 	cmp	local06, #71 wz
04dd8     9C 01 90 AD |  if_e	jmp	#LR__0411
04ddc     48 28 0E F2 | 	cmp	local06, #72 wz
04de0     A0 01 90 AD |  if_e	jmp	#LR__0412
04de4     49 28 0E F2 | 	cmp	local06, #73 wz
04de8     A4 01 90 AD |  if_e	jmp	#LR__0413
04dec     44 28 0E F2 | 	cmp	local06, #68 wz
04df0     A8 01 90 AD |  if_e	jmp	#LR__0414
04df4     4E 28 0E F2 | 	cmp	local06, #78 wz
04df8     AC 01 90 AD |  if_e	jmp	#LR__0415
04dfc     50 28 0E F2 | 	cmp	local06, #80 wz
04e00     C0 01 90 AD |  if_e	jmp	#LR__0417
04e04     51 28 0E F2 | 	cmp	local06, #81 wz
04e08     C0 01 90 AD |  if_e	jmp	#LR__0418
04e0c     52 28 0E F2 | 	cmp	local06, #82 wz
04e10     C0 01 90 AD |  if_e	jmp	#LR__0419
04e14     59 28 0E F2 | 	cmp	local06, #89 wz
04e18     C0 01 90 AD |  if_e	jmp	#LR__0420
04e1c     55 28 0E F2 | 	cmp	local06, #85 wz
04e20     C0 01 90 AD |  if_e	jmp	#LR__0421
04e24     56 28 0E F2 | 	cmp	local06, #86 wz
04e28     C0 01 90 AD |  if_e	jmp	#LR__0422
04e2c     57 28 0E F2 | 	cmp	local06, #87 wz
04e30     70 28 0E 52 |  if_ne	cmp	local06, #112 wz
04e34     98 02 90 AD |  if_e	jmp	#LR__0450
04e38     58 28 0E F2 | 	cmp	local06, #88 wz
04e3c     B4 01 90 AD |  if_e	jmp	#LR__0423
04e40     4A 28 0E F2 | 	cmp	local06, #74 wz
04e44     B4 01 90 AD |  if_e	jmp	#LR__0424
04e48     4B 28 0E F2 | 	cmp	local06, #75 wz
04e4c     B4 01 90 AD |  if_e	jmp	#LR__0425
04e50     5A 28 0E F2 | 	cmp	local06, #90 wz
04e54     B4 01 90 AD |  if_e	jmp	#LR__0426
04e58     5C 28 0E F2 | 	cmp	local06, #92 wz
04e5c     B4 01 90 AD |  if_e	jmp	#LR__0427
04e60     5D 28 0E F2 | 	cmp	local06, #93 wz
04e64     68 02 90 AD |  if_e	jmp	#LR__0450
04e68     5E 28 0E F2 | 	cmp	local06, #94 wz
04e6c     B0 01 90 AD |  if_e	jmp	#LR__0428
04e70     5F 28 0E F2 | 	cmp	local06, #95 wz
04e74     B0 01 90 AD |  if_e	jmp	#LR__0429
04e78     60 28 0E F2 | 	cmp	local06, #96 wz
04e7c     B0 01 90 AD |  if_e	jmp	#LR__0430
04e80     61 28 0E F2 | 	cmp	local06, #97 wz
04e84     B0 01 90 AD |  if_e	jmp	#LR__0431
04e88     63 28 0E F2 | 	cmp	local06, #99 wz
04e8c     B0 01 90 AD |  if_e	jmp	#LR__0432
04e90     68 28 0E F2 | 	cmp	local06, #104 wz
04e94     B0 01 90 AD |  if_e	jmp	#LR__0433
04e98     69 28 0E F2 | 	cmp	local06, #105 wz
04e9c     B0 01 90 AD |  if_e	jmp	#LR__0434
04ea0     6D 28 0E F2 | 	cmp	local06, #109 wz
04ea4     B0 01 90 AD |  if_e	jmp	#LR__0435
04ea8     6C 28 0E F2 | 	cmp	local06, #108 wz
04eac     B0 01 90 AD |  if_e	jmp	#LR__0436
04eb0     71 28 0E F2 | 	cmp	local06, #113 wz
04eb4     B0 01 90 AD |  if_e	jmp	#LR__0437
04eb8     79 28 0E F2 | 	cmp	local06, #121 wz
04ebc     B0 01 90 AD |  if_e	jmp	#LR__0438
04ec0     77 28 0E F2 | 	cmp	local06, #119 wz
04ec4     B0 01 90 AD |  if_e	jmp	#LR__0439
04ec8     78 28 0E F2 | 	cmp	local06, #120 wz
04ecc     B0 01 90 AD |  if_e	jmp	#LR__0440
04ed0     7C 28 0E F2 | 	cmp	local06, #124 wz
04ed4     B0 01 90 AD |  if_e	jmp	#LR__0441
04ed8     7D 28 0E F2 | 	cmp	local06, #125 wz
04edc     B0 01 90 AD |  if_e	jmp	#LR__0442
04ee0     7E 28 0E F2 | 	cmp	local06, #126 wz
04ee4     B0 01 90 AD |  if_e	jmp	#LR__0443
04ee8     7F 28 0E F2 | 	cmp	local06, #127 wz
04eec     B0 01 90 AD |  if_e	jmp	#LR__0444
04ef0     80 28 0E F2 | 	cmp	local06, #128 wz
04ef4     B0 01 90 AD |  if_e	jmp	#LR__0445
04ef8     72 28 0E F2 | 	cmp	local06, #114 wz
04efc     B0 01 90 AD |  if_e	jmp	#LR__0446
04f00     81 28 0E F2 | 	cmp	local06, #129 wz
04f04     B0 01 90 AD |  if_e	jmp	#LR__0447
04f08     01 00 00 FF 
04f0c     04 28 0E F2 | 	cmp	local06, ##516 wz
04f10     AC 01 90 AD |  if_e	jmp	#LR__0448
04f14     B0 01 90 FD | 	jmp	#LR__0449
04f18                 | LR__0403
04f18     B4 0F B0 FD | 	call	#_compile_fun_varp
04f1c     FD 2C 02 F6 | 	mov	local08, result1
04f20     AC 01 90 FD | 	jmp	#LR__0450
04f24                 | LR__0404
04f24     A8 0F B0 FD | 	call	#_compile_fun_varp
04f28     FD 2C 02 F6 | 	mov	local08, result1
04f2c     A0 01 90 FD | 	jmp	#LR__0450
04f30                 | LR__0405
04f30     9C 0F B0 FD | 	call	#_compile_fun_varp
04f34     FD 2C 02 F6 | 	mov	local08, result1
04f38     94 01 90 FD | 	jmp	#LR__0450
04f3c                 | LR__0406
04f3c     90 0F B0 FD | 	call	#_compile_fun_varp
04f40     FD 2C 02 F6 | 	mov	local08, result1
04f44     88 01 90 FD | 	jmp	#LR__0450
04f48                 | LR__0407
04f48     A4 0B B0 FD | 	call	#_compile_fun_2p
04f4c     FD 26 02 F6 | 	mov	local05, result1
04f50     7C 01 90 FD | 	jmp	#LR__0450
04f54                 | LR__0408
04f54     98 0B B0 FD | 	call	#_compile_fun_2p
04f58     FD 26 02 F6 | 	mov	local05, result1
04f5c     70 01 90 FD | 	jmp	#LR__0450
04f60                 | LR__0409
04f60     00 0C B0 FD | 	call	#_compile_fun_3p
04f64     FD 26 02 F6 | 	mov	local05, result1
04f68     64 01 90 FD | 	jmp	#LR__0450
04f6c                 | LR__0410
04f6c     F4 0B B0 FD | 	call	#_compile_fun_3p
04f70     FD 26 02 F6 | 	mov	local05, result1
04f74     58 01 90 FD | 	jmp	#LR__0450
04f78                 | LR__0411
04f78     B4 0C B0 FD | 	call	#_compile_fun_4p
04f7c     FD 26 02 F6 | 	mov	local05, result1
04f80     4C 01 90 FD | 	jmp	#LR__0450
04f84                 | LR__0412
04f84     A8 0C B0 FD | 	call	#_compile_fun_4p
04f88     FD 26 02 F6 | 	mov	local05, result1
04f8c     40 01 90 FD | 	jmp	#LR__0450
04f90                 | LR__0413
04f90     80 2D B0 FD | 	call	#_expr
04f94                 | ' 
04f94                 | ' 
04f94                 | ' expr()
04f94                 | ' return 0
04f94     00 26 06 F6 | 	mov	local05, #0
04f98     34 01 90 FD | 	jmp	#LR__0450
04f9c                 | LR__0414
04f9c     5C 10 B0 FD | 	call	#_compile_print
04fa0     FD 26 02 F6 | 	mov	local05, result1
04fa4     E4 01 90 FD | 	jmp	#LR__0451
04fa8                 | LR__0415
04fa8     01 24 16 F2 | 	cmp	local04, #1 wc
04fac     08 00 90 CD |  if_b	jmp	#LR__0416
04fb0     00 2A B0 FD | 	call	#_compile_goto
04fb4     D4 01 90 FD | 	jmp	#LR__0451
04fb8                 | LR__0416
04fb8     19 12 06 F6 | 	mov	arg01, #25
04fbc     78 00 B1 FD | 	call	#_printerror
04fc0     C8 01 90 FD | 	jmp	#LR__0451
04fc4                 | LR__0417
04fc4     4C 2D B0 FD | 	call	#_expr
04fc8                 | ' 
04fc8                 | ' 
04fc8                 | ' expr()
04fc8                 | ' return 0
04fc8     04 01 90 FD | 	jmp	#LR__0450
04fcc                 | LR__0418
04fcc     44 2D B0 FD | 	call	#_expr
04fd0                 | ' 
04fd0                 | ' 
04fd0                 | ' expr()
04fd0                 | ' return 0
04fd0     FC 00 90 FD | 	jmp	#LR__0450
04fd4                 | LR__0419
04fd4     3C 2D B0 FD | 	call	#_expr
04fd8                 | ' 
04fd8                 | ' 
04fd8                 | ' expr()
04fd8                 | ' return 0
04fd8     F4 00 90 FD | 	jmp	#LR__0450
04fdc                 | LR__0420
04fdc     34 2D B0 FD | 	call	#_expr
04fe0                 | ' 
04fe0                 | ' 
04fe0                 | ' expr()
04fe0                 | ' return 0
04fe0     EC 00 90 FD | 	jmp	#LR__0450
04fe4                 | LR__0421
04fe4     94 0F B0 FD | 	call	#_compile_int_fun_2p
04fe8     E4 00 90 FD | 	jmp	#LR__0450
04fec                 | LR__0422
04fec     18 0A B0 FD | 	call	#_compile_converttoint
04ff0                 | ' return err
04ff0     DC 00 90 FD | 	jmp	#LR__0450
04ff4                 | LR__0423
04ff4     DC 16 B0 FD | 	call	#_compile_if
04ff8     90 01 90 FD | 	jmp	#LR__0451
04ffc                 | LR__0424
04ffc     18 20 B0 FD | 	call	#_compile_for
05000     88 01 90 FD | 	jmp	#LR__0451
05004                 | LR__0425
05004     FC 27 B0 FD | 	call	#_compile_next
05008     80 01 90 FD | 	jmp	#LR__0451
0500c                 | LR__0426
0500c     04 18 B0 FD | 	call	#_compile_else
05010     78 01 90 FD | 	jmp	#LR__0451
05014                 | LR__0427
05014     D8 0A B0 FD | 	call	#_compile_fun_2p
05018     FD 26 02 F6 | 	mov	local05, result1
0501c     B0 00 90 FD | 	jmp	#LR__0450
05020                 | LR__0428
05020     F0 2C B0 FD | 	call	#_expr
05024                 | ' 
05024                 | ' 
05024                 | ' expr()
05024                 | ' return 0
05024     A8 00 90 FD | 	jmp	#LR__0450
05028                 | LR__0429
05028     E8 2C B0 FD | 	call	#_expr
0502c                 | ' 
0502c                 | ' 
0502c                 | ' expr()
0502c                 | ' return 0
0502c     A0 00 90 FD | 	jmp	#LR__0450
05030                 | LR__0430
05030     E0 2C B0 FD | 	call	#_expr
05034                 | ' 
05034                 | ' 
05034                 | ' expr()
05034                 | ' return 0
05034     98 00 90 FD | 	jmp	#LR__0450
05038                 | LR__0431
05038     D8 2C B0 FD | 	call	#_expr
0503c                 | ' 
0503c                 | ' 
0503c                 | ' expr()
0503c                 | ' return 0
0503c     90 00 90 FD | 	jmp	#LR__0450
05040                 | LR__0432
05040     D0 2C B0 FD | 	call	#_expr
05044                 | ' 
05044                 | ' 
05044                 | ' expr()
05044                 | ' return 0
05044     88 00 90 FD | 	jmp	#LR__0450
05048                 | LR__0433
05048     C8 2C B0 FD | 	call	#_expr
0504c                 | ' 
0504c                 | ' 
0504c                 | ' expr()
0504c                 | ' return 0
0504c     80 00 90 FD | 	jmp	#LR__0450
05050                 | LR__0434
05050     C0 2C B0 FD | 	call	#_expr
05054                 | ' 
05054                 | ' 
05054                 | ' expr()
05054                 | ' return 0
05054     78 00 90 FD | 	jmp	#LR__0450
05058                 | LR__0435
05058     08 0B B0 FD | 	call	#_compile_fun_3p
0505c     70 00 90 FD | 	jmp	#LR__0450
05060                 | LR__0436
05060     F0 0C B0 FD | 	call	#_compile_fun_5p
05064     68 00 90 FD | 	jmp	#LR__0450
05068                 | LR__0437
05068     C4 0B B0 FD | 	call	#_compile_fun_4p
0506c     60 00 90 FD | 	jmp	#LR__0450
05070                 | LR__0438
05070     7C 0A B0 FD | 	call	#_compile_fun_2p
05074     58 00 90 FD | 	jmp	#LR__0450
05078                 | LR__0439
05078     74 0A B0 FD | 	call	#_compile_fun_2p
0507c     50 00 90 FD | 	jmp	#LR__0450
05080                 | LR__0440
05080     6C 0A B0 FD | 	call	#_compile_fun_2p
05084     48 00 90 FD | 	jmp	#LR__0450
05088                 | LR__0441
05088     88 2C B0 FD | 	call	#_expr
0508c                 | ' 
0508c                 | ' 
0508c                 | ' expr()
0508c                 | ' return 0
0508c     40 00 90 FD | 	jmp	#LR__0450
05090                 | LR__0442
05090     80 2C B0 FD | 	call	#_expr
05094                 | ' 
05094                 | ' 
05094                 | ' expr()
05094                 | ' return 0
05094     38 00 90 FD | 	jmp	#LR__0450
05098                 | LR__0443
05098     78 2C B0 FD | 	call	#_expr
0509c                 | ' 
0509c                 | ' 
0509c                 | ' expr()
0509c                 | ' return 0
0509c     30 00 90 FD | 	jmp	#LR__0450
050a0                 | LR__0444
050a0     8C 0B B0 FD | 	call	#_compile_fun_4p
050a4     28 00 90 FD | 	jmp	#LR__0450
050a8                 | LR__0445
050a8     68 2C B0 FD | 	call	#_expr
050ac                 | ' 
050ac                 | ' 
050ac                 | ' expr()
050ac                 | ' return 0
050ac     20 00 90 FD | 	jmp	#LR__0450
050b0                 | LR__0446
050b0     88 18 B0 FD | 	call	#_compile_dim
050b4     D4 00 90 FD | 	jmp	#LR__0451
050b8                 | LR__0447
050b8     34 0A B0 FD | 	call	#_compile_fun_2p
050bc     10 00 90 FD | 	jmp	#LR__0450
050c0                 | LR__0448
050c0     20 01 B0 FD | 	call	#_compile_array_assign
050c4     C4 00 90 FD | 	jmp	#LR__0451
050c8                 | LR__0449
050c8     80 08 B0 FD | 	call	#_compile_unknown
050cc     BC 00 90 FD | 	jmp	#LR__0451
050d0                 | LR__0450
050d0     14 23 02 F6 | 	mov	local03, local06
050d4     16 1F 02 F6 | 	mov	local01, local08
050d8     0F 2B 02 F6 | 	mov	local07, local01
050dc     10 2F 02 F6 | 	mov	local09, local02
050e0     11 1F 02 F6 | 	mov	local01, local03
050e4     69 00 00 FF 
050e8     50 E4 05 F1 | 	add	objptr, ##53840
050ec     F2 2C 02 FB | 	rdlong	local08, objptr
050f0     16 29 02 F6 | 	mov	local06, local08
050f4     01 28 66 F0 | 	shl	local06, #1
050f8     16 29 02 F1 | 	add	local06, local08
050fc     02 28 66 F0 | 	shl	local06, #2
05100     03 00 00 FF 
05104     00 E4 85 F1 | 	sub	objptr, ##1536
05108     F2 28 02 F1 | 	add	local06, objptr
0510c     14 2B 62 FC | 	wrlong	local07, local06
05110     03 00 00 FF 
05114     00 E4 05 F1 | 	add	objptr, ##1536
05118     F2 2C 02 FB | 	rdlong	local08, objptr
0511c     16 2B 02 F6 | 	mov	local07, local08
05120     01 2A 66 F0 | 	shl	local07, #1
05124     16 2B 02 F1 | 	add	local07, local08
05128     02 2A 66 F0 | 	shl	local07, #2
0512c     03 00 00 FF 
05130     00 E4 85 F1 | 	sub	objptr, ##1536
05134     F2 2A 02 F1 | 	add	local07, objptr
05138     04 2A 06 F1 | 	add	local07, #4
0513c     15 2F 62 FC | 	wrlong	local09, local07
05140     03 00 00 FF 
05144     00 E4 05 F1 | 	add	objptr, ##1536
05148     F2 2E 02 FB | 	rdlong	local09, objptr
0514c     17 2D 02 F6 | 	mov	local08, local09
05150     01 2C 66 F0 | 	shl	local08, #1
05154     17 2D 02 F1 | 	add	local08, local09
05158     02 2C 66 F0 | 	shl	local08, #2
0515c     03 00 00 FF 
05160     00 E4 85 F1 | 	sub	objptr, ##1536
05164     F2 2C 02 F1 | 	add	local08, objptr
05168     08 2C 06 F1 | 	add	local08, #8
0516c     16 1F 62 FC | 	wrlong	local01, local08
05170     03 00 00 FF 
05174     00 E4 05 F1 | 	add	objptr, ##1536
05178     F2 2A 02 FB | 	rdlong	local07, objptr
0517c     01 2A 06 F1 | 	add	local07, #1
05180     F2 2A 62 FC | 	wrlong	local07, objptr
05184     69 00 00 FF 
05188     50 E4 85 F1 | 	sub	objptr, ##53840
0518c                 | LR__0451
0518c                 | ' 
0518c                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
0518c                 | ' 450 if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end ' end token if the last part or imm
0518c     00 24 0E F2 | 	cmp	local04, #0 wz
05190     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
05194     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
05198     38 00 90 5D |  if_ne	jmp	#LR__0452
0519c     69 00 00 FF 
051a0     50 E4 05 F1 | 	add	objptr, ##53840
051a4     F2 2E 02 FB | 	rdlong	local09, objptr
051a8     17 1F 02 F6 | 	mov	local01, local09
051ac     01 1E 66 F0 | 	shl	local01, #1
051b0     17 1F 02 F1 | 	add	local01, local09
051b4     02 1E 66 F0 | 	shl	local01, #2
051b8     03 00 00 FF 
051bc     00 E4 85 F1 | 	sub	objptr, ##1536
051c0     F2 1E 02 F1 | 	add	local01, objptr
051c4     08 1E 06 F1 | 	add	local01, #8
051c8     0F FD 6B FC | 	wrlong	#510, local01
051cc     66 00 00 FF 
051d0     50 E4 85 F1 | 	sub	objptr, ##52304
051d4                 | LR__0452
051d4                 | ' 
051d4                 | ' ' print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
051d4                 | ' return err
051d4     13 FB 01 F6 | 	mov	result1, local05
051d8     A7 F0 03 F6 | 	mov	ptra, fp
051dc     B2 00 A0 FD | 	call	#popregs_
051e0                 | _compile_immediate_ret
051e0     2D 00 64 FD | 	ret
051e4                 | 
051e4                 | ' 
051e4                 | ' sub compile_array_assign
051e4                 | _compile_array_assign
051e4     0A 4A 05 F6 | 	mov	COUNT_, #10
051e8     A8 00 A0 FD | 	call	#pushregs_
051ec     00 24 06 F6 | 	mov	local04, #0
051f0     56 00 00 FF 
051f4     18 E4 05 F1 | 	add	objptr, ##44056
051f8     F2 26 02 FB | 	rdlong	local05, objptr
051fc     13 FB 01 F6 | 	mov	result1, local05
05200     01 FA 85 F1 | 	sub	result1, #1
05204     03 FA 65 F0 | 	shl	result1, #3
05208     02 00 00 FF 
0520c     38 E4 85 F1 | 	sub	objptr, ##1080
05210     F2 FA 01 F1 | 	add	result1, objptr
05214     FD 28 02 FB | 	rdlong	local06, result1
05218                 | ' numpar=0
05218                 | ' 'print "In array_assign, lparts(ct).token=",lparts(ct).token,lparts(ct).part$
05218                 | ' ' todo here: recognize params and t1.result.twowords=numpar
05218                 | ' varname$=lparts(ct-1).part$' : print "In array_assign, varname$=";varname$
05218                 | ' if lparts(ct).token=token_lpar then
05218     03 26 66 F0 | 	shl	local05, #3
0521c     F2 26 02 F1 | 	add	local05, objptr
05220     04 26 06 F1 | 	add	local05, #4
05224     13 27 02 FB | 	rdlong	local05, local05
05228     15 26 0E F2 | 	cmp	local05, #21 wz
0522c     53 00 00 FF 
05230     E0 E5 85 F1 | 	sub	objptr, ##42976
05234     D4 01 90 5D |  if_ne	jmp	#LR__0464
05238     56 00 00 FF 
0523c     18 E4 05 F1 | 	add	objptr, ##44056
05240     F2 2A 02 FB | 	rdlong	local07, objptr
05244     01 2A 06 F1 | 	add	local07, #1
05248     F2 2A 62 FC | 	wrlong	local07, objptr
0524c     56 00 00 FF 
05250     18 E4 85 F1 | 	sub	objptr, ##44056
05254                 | '   ct+=1 											' omit this lpar, this is for expr list
05254                 | '   do
05254                 | LR__0460
05254     BC 2A B0 FD | 	call	#_expr
05258     56 00 00 FF 
0525c     18 E4 05 F1 | 	add	objptr, ##44056
05260     F2 26 02 FB | 	rdlong	local05, objptr
05264     01 26 06 F1 | 	add	local05, #1
05268     F2 26 62 FC | 	wrlong	local05, objptr
0526c     01 24 06 F1 | 	add	local04, #1
05270     01 26 86 F1 | 	sub	local05, #1
05274     03 26 66 F0 | 	shl	local05, #3
05278     02 00 00 FF 
0527c     38 E4 85 F1 | 	sub	objptr, ##1080
05280     F2 26 02 F1 | 	add	local05, objptr
05284     04 26 06 F1 | 	add	local05, #4
05288     13 2B 02 FB | 	rdlong	local07, local05
0528c     14 2A 0E F2 | 	cmp	local07, #20 wz
05290     53 00 00 FF 
05294     E0 E5 85 F1 | 	sub	objptr, ##42976
05298     34 00 90 AD |  if_e	jmp	#LR__0461
0529c     56 00 00 FF 
052a0     18 E4 05 F1 | 	add	objptr, ##44056
052a4     F2 2A 02 FB | 	rdlong	local07, objptr
052a8     03 2A 66 F0 | 	shl	local07, #3
052ac     02 00 00 FF 
052b0     38 E4 85 F1 | 	sub	objptr, ##1080
052b4     F2 2A 02 F1 | 	add	local07, objptr
052b8     04 2A 06 F1 | 	add	local07, #4
052bc     15 2B 02 FB | 	rdlong	local07, local07
052c0     FE 2B 0E F2 | 	cmp	local07, #510 wz
052c4     53 00 00 FF 
052c8     E0 E5 85 F1 | 	sub	objptr, ##42976
052cc     84 FF 9F 5D |  if_ne	jmp	#LR__0460
052d0                 | LR__0461
052d0     56 00 00 FF 
052d4     18 E4 05 F1 | 	add	objptr, ##44056
052d8     F2 2A 02 FB | 	rdlong	local07, objptr
052dc     01 2A 06 F1 | 	add	local07, #1
052e0     F2 2A 62 FC | 	wrlong	local07, objptr
052e4     56 00 00 FF 
052e8     18 E4 85 F1 | 	sub	objptr, ##44056
052ec     24 2A B0 FD | 	call	#_expr
052f0     01 2C 66 F6 | 	neg	local08, #1
052f4     00 2E 06 F6 | 	mov	local09, #0
052f8                 | ' '   print "in array_assign, rpar found, numpar=",numpar
052f8                 | '  'if lparts(ct).token=token_end then print "in getfun, end found, numpar=",numpar
052f8                 | ' 'if lparts(ct).token<>token_eq then print "in array_assign,= expected" else print "in array_assign,= found"
052f8                 | ' ct+=1 : expr()
052f8                 | ' ' now find the vae
052f8                 | ' 
052f8                 | ' j=-1 : i=0 : do : 
052f8                 | LR__0462
052f8                 | '   if variables(i).name=varname$ then j=i: exit loop
052f8     17 27 02 F6 | 	mov	local05, local09
052fc     04 26 66 F0 | 	shl	local05, #4
05300     33 00 00 FF 
05304     DC E5 05 F1 | 	add	objptr, ##26588
05308     F2 26 02 F1 | 	add	local05, objptr
0530c     13 13 02 FB | 	rdlong	arg01, local05
05310     14 15 02 F6 | 	mov	arg02, local06
05314     33 00 00 FF 
05318     DC E5 85 F1 | 	sub	objptr, ##26588
0531c     64 32 B1 FD | 	call	#__system___string_cmp
05320     00 FA 0D F2 | 	cmp	result1, #0 wz
05324     17 2D 02 A6 |  if_e	mov	local08, local09
05328     20 00 90 AD |  if_e	jmp	#LR__0463
0532c     01 2E 06 F1 | 	add	local09, #1
05330     53 00 00 FF 
05334     DC E5 05 F1 | 	add	objptr, ##42972
05338     F2 2A 02 FB | 	rdlong	local07, objptr
0533c     53 00 00 FF 
05340     DC E5 85 F1 | 	sub	objptr, ##42972
05344     15 2F 5A F2 | 	cmps	local09, local07 wcz
05348     AC FF 9F ED |  if_be	jmp	#LR__0462
0534c                 | LR__0463
0534c     16 1F 02 F6 | 	mov	local01, local08
05350     12 21 02 F6 | 	mov	local02, local04
05354     17 22 06 F6 | 	mov	local03, #23
05358     0F 2B 02 F6 | 	mov	local07, local01
0535c     10 31 02 F6 | 	mov	local10, local02
05360     11 2D 02 F6 | 	mov	local08, local03
05364     69 00 00 FF 
05368     50 E4 05 F1 | 	add	objptr, ##53840
0536c     F2 1E 02 FB | 	rdlong	local01, objptr
05370     0F 2F 02 F6 | 	mov	local09, local01
05374     01 2E 66 F0 | 	shl	local09, #1
05378     0F 2F 02 F1 | 	add	local09, local01
0537c     02 2E 66 F0 | 	shl	local09, #2
05380     03 00 00 FF 
05384     00 E4 85 F1 | 	sub	objptr, ##1536
05388     F2 2E 02 F1 | 	add	local09, objptr
0538c     17 2B 62 FC | 	wrlong	local07, local09
05390     03 00 00 FF 
05394     00 E4 05 F1 | 	add	objptr, ##1536
05398     F2 1E 02 FB | 	rdlong	local01, objptr
0539c     0F 2F 02 F6 | 	mov	local09, local01
053a0     01 2E 66 F0 | 	shl	local09, #1
053a4     0F 2F 02 F1 | 	add	local09, local01
053a8     02 2E 66 F0 | 	shl	local09, #2
053ac     03 00 00 FF 
053b0     00 E4 85 F1 | 	sub	objptr, ##1536
053b4     F2 2E 02 F1 | 	add	local09, objptr
053b8     04 2E 06 F1 | 	add	local09, #4
053bc     17 31 62 FC | 	wrlong	local10, local09
053c0     03 00 00 FF 
053c4     00 E4 05 F1 | 	add	objptr, ##1536
053c8     F2 30 02 FB | 	rdlong	local10, objptr
053cc     18 1F 02 F6 | 	mov	local01, local10
053d0     01 1E 66 F0 | 	shl	local01, #1
053d4     18 1F 02 F1 | 	add	local01, local10
053d8     02 1E 66 F0 | 	shl	local01, #2
053dc     03 00 00 FF 
053e0     00 E4 85 F1 | 	sub	objptr, ##1536
053e4     F2 1E 02 F1 | 	add	local01, objptr
053e8     08 1E 06 F1 | 	add	local01, #8
053ec     0F 2D 62 FC | 	wrlong	local08, local01
053f0     03 00 00 FF 
053f4     00 E4 05 F1 | 	add	objptr, ##1536
053f8     F2 2A 02 FB | 	rdlong	local07, objptr
053fc     01 2A 06 F1 | 	add	local07, #1
05400     F2 2A 62 FC | 	wrlong	local07, objptr
05404     69 00 00 FF 
05408     50 E4 85 F1 | 	sub	objptr, ##53840
0540c                 | LR__0464
0540c     A7 F0 03 F6 | 	mov	ptra, fp
05410     B2 00 A0 FD | 	call	#popregs_
05414                 | _compile_array_assign_ret
05414     2D 00 64 FD | 	ret
05418                 | 
05418                 | ' 
05418                 | ' 
05418                 | ' sub compile_immediate_assign(linetype as ulong)
05418                 | _compile_immediate_assign
05418     09 4A 05 F6 | 	mov	COUNT_, #9
0541c     A8 00 A0 FD | 	call	#pushregs_
05420     09 25 0A F6 | 	mov	local04, arg01 wz
05424     FF 22 06 F6 | 	mov	local03, #255
05428     01 26 66 F6 | 	neg	local05, #1
0542c                 | ' 
0542c                 | ' t1.result_type=result_error : t1.result.uresult=0
0542c                 | ' i=-1: j=-1
0542c                 | ' 
0542c                 | ' if linetype=0 then varname2$=lparts(0).part$: ct=2 : lineptr=0 
0542c     2C 00 90 5D |  if_ne	jmp	#LR__0470
05430     53 00 00 FF 
05434     E0 E5 05 F1 | 	add	objptr, ##42976
05438     F2 28 02 FB | 	rdlong	local06, objptr
0543c     02 00 00 FF 
05440     38 E4 05 F1 | 	add	objptr, ##1080
05444     F2 04 68 FC | 	wrlong	#2, objptr
05448     13 00 00 FF 
0544c     38 E4 05 F1 | 	add	objptr, ##9784
05450     F2 00 68 FC | 	wrlong	#0, objptr
05454     69 00 00 FF 
05458     50 E4 85 F1 | 	sub	objptr, ##53840
0545c                 | LR__0470
0545c                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
0545c     02 24 0E F2 | 	cmp	local04, #2 wz
05460     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
05464     53 00 00 AF 
05468     E0 E5 05 A1 |  if_e	add	objptr, ##42976
0546c     F2 28 02 AB |  if_e	rdlong	local06, objptr
05470     02 00 00 AF 
05474     38 E4 05 A1 |  if_e	add	objptr, ##1080
05478     F2 04 68 AC |  if_e	wrlong	#2, objptr
0547c     56 00 00 AF 
05480     18 E4 85 A1 |  if_e	sub	objptr, ##44056
05484                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
05484     04 24 0E F2 | 	cmp	local04, #4 wz
05488     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
0548c     2C 00 90 5D |  if_ne	jmp	#LR__0471
05490     53 00 00 FF 
05494     E8 E5 05 F1 | 	add	objptr, ##42984
05498     F2 28 02 FB | 	rdlong	local06, objptr
0549c     02 00 00 FF 
054a0     30 E4 05 F1 | 	add	objptr, ##1072
054a4     F2 06 68 FC | 	wrlong	#3, objptr
054a8     13 00 00 FF 
054ac     38 E4 05 F1 | 	add	objptr, ##9784
054b0     F2 04 68 FC | 	wrlong	#2, objptr
054b4     69 00 00 FF 
054b8     50 E4 85 F1 | 	sub	objptr, ##53840
054bc                 | LR__0471
054bc                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
054bc     05 24 0E F2 | 	cmp	local04, #5 wz
054c0     3C 00 90 5D |  if_ne	jmp	#LR__0472
054c4     56 00 00 FF 
054c8     18 E4 05 F1 | 	add	objptr, ##44056
054cc     F2 FA 01 FB | 	rdlong	result1, objptr
054d0     FD 28 02 F6 | 	mov	local06, result1
054d4     03 28 66 F0 | 	shl	local06, #3
054d8     02 00 00 FF 
054dc     38 E4 85 F1 | 	sub	objptr, ##1080
054e0     F2 28 02 F1 | 	add	local06, objptr
054e4     14 29 02 FB | 	rdlong	local06, local06
054e8     02 FA 05 F1 | 	add	result1, #2
054ec     02 00 00 FF 
054f0     38 E4 05 F1 | 	add	objptr, ##1080
054f4     F2 FA 61 FC | 	wrlong	result1, objptr
054f8     56 00 00 FF 
054fc     18 E4 85 F1 | 	sub	objptr, ##44056
05500                 | LR__0472
05500     14 13 02 F6 | 	mov	arg01, local06
05504     01 14 06 F6 | 	mov	arg02, #1
05508     E4 50 B1 FD | 	call	#__system__Right_S
0550c     04 28 B0 FD | 	call	#_expr
05510                 | '  
05510                 | ' 'print "Called compile immediate assign with linetype",linetype, "varname=",varname2$, "lineptr=", lineptr
05510                 | ' 
05510                 | ' suffix2$=right$(varname2$,1)
05510                 | ' expr()
05510                 | ' 
05510                 | ' 
05510                 | ' if varnum>0 then
05510     53 00 00 FF 
05514     DC E5 05 F1 | 	add	objptr, ##42972
05518     F2 2A 02 FB | 	rdlong	local07, objptr
0551c     53 00 00 FF 
05520     DC E5 85 F1 | 	sub	objptr, ##42972
05524     01 2A 56 F2 | 	cmps	local07, #1 wc
05528     58 00 90 CD |  if_b	jmp	#LR__0475
0552c                 | '   for i=0 to varnum-1
0552c     00 2C 06 F6 | 	mov	local08, #0
05530     53 00 00 FF 
05534     DC E5 05 F1 | 	add	objptr, ##42972
05538     F2 2E 02 FB | 	rdlong	local09, objptr
0553c     53 00 00 FF 
05540     DC E5 85 F1 | 	sub	objptr, ##42972
05544                 | LR__0473
05544     17 2D 52 F2 | 	cmps	local08, local09 wc
05548     38 00 90 3D |  if_ae	jmp	#LR__0474
0554c                 | '     if variables(i).name=varname2$ then j=i : exit
0554c     16 2B 02 F6 | 	mov	local07, local08
05550     04 2A 66 F0 | 	shl	local07, #4
05554     33 00 00 FF 
05558     DC E5 05 F1 | 	add	objptr, ##26588
0555c     F2 2A 02 F1 | 	add	local07, objptr
05560     15 13 02 FB | 	rdlong	arg01, local07
05564     14 15 02 F6 | 	mov	arg02, local06
05568     33 00 00 FF 
0556c     DC E5 85 F1 | 	sub	objptr, ##26588
05570     10 30 B1 FD | 	call	#__system___string_cmp
05574     00 FA 0D F2 | 	cmp	result1, #0 wz
05578     16 27 02 A6 |  if_e	mov	local05, local08
0557c     01 2C 06 51 |  if_ne	add	local08, #1
05580     C0 FF 9F 5D |  if_ne	jmp	#LR__0473
05584                 | LR__0474
05584                 | LR__0475
05584                 | ' if  j=-1 andalso varnum<maxvars then   
05584     FF FF 7F FF 
05588     FF 27 0E F2 | 	cmp	local05, ##-1 wz
0558c     60 00 90 5D |  if_ne	jmp	#LR__0476
05590     53 00 00 FF 
05594     DC E5 05 F1 | 	add	objptr, ##42972
05598     F2 2A 02 FB | 	rdlong	local07, objptr
0559c     53 00 00 FF 
055a0     DC E5 85 F1 | 	sub	objptr, ##42972
055a4     01 00 00 FF 
055a8     FF 2B 56 F2 | 	cmps	local07, ##1023 wc
055ac     40 00 90 3D |  if_ae	jmp	#LR__0476
055b0     53 00 00 FF 
055b4     DC E5 05 F1 | 	add	objptr, ##42972
055b8     F2 2E 02 FB | 	rdlong	local09, objptr
055bc     04 2E 66 F0 | 	shl	local09, #4
055c0     20 00 00 FF 
055c4     00 E4 85 F1 | 	sub	objptr, ##16384
055c8     F2 2E 02 F1 | 	add	local09, objptr
055cc     17 29 62 FC | 	wrlong	local06, local09
055d0     20 00 00 FF 
055d4     00 E4 05 F1 | 	add	objptr, ##16384
055d8     F2 2A 02 FB | 	rdlong	local07, objptr
055dc     15 27 02 F6 | 	mov	local05, local07
055e0     01 2A 06 F1 | 	add	local07, #1
055e4     F2 2A 62 FC | 	wrlong	local07, objptr
055e8     53 00 00 FF 
055ec     DC E5 85 F1 | 	sub	objptr, ##42972
055f0                 | LR__0476
055f0     13 1F 02 F6 | 	mov	local01, local05
055f4     17 22 06 F6 | 	mov	local03, #23
055f8     0F 2B 02 F6 | 	mov	local07, local01
055fc     10 2F 02 F6 | 	mov	local09, local02
05600     11 1F 02 F6 | 	mov	local01, local03
05604     69 00 00 FF 
05608     50 E4 05 F1 | 	add	objptr, ##53840
0560c     F2 2C 02 FB | 	rdlong	local08, objptr
05610     16 29 02 F6 | 	mov	local06, local08
05614     01 28 66 F0 | 	shl	local06, #1
05618     16 29 02 F1 | 	add	local06, local08
0561c     02 28 66 F0 | 	shl	local06, #2
05620     03 00 00 FF 
05624     00 E4 85 F1 | 	sub	objptr, ##1536
05628     F2 28 02 F1 | 	add	local06, objptr
0562c     14 2B 62 FC | 	wrlong	local07, local06
05630     03 00 00 FF 
05634     00 E4 05 F1 | 	add	objptr, ##1536
05638     F2 2C 02 FB | 	rdlong	local08, objptr
0563c     16 2B 02 F6 | 	mov	local07, local08
05640     01 2A 66 F0 | 	shl	local07, #1
05644     16 2B 02 F1 | 	add	local07, local08
05648     02 2A 66 F0 | 	shl	local07, #2
0564c     03 00 00 FF 
05650     00 E4 85 F1 | 	sub	objptr, ##1536
05654     F2 2A 02 F1 | 	add	local07, objptr
05658     04 2A 06 F1 | 	add	local07, #4
0565c     15 2F 62 FC | 	wrlong	local09, local07
05660     03 00 00 FF 
05664     00 E4 05 F1 | 	add	objptr, ##1536
05668     F2 2E 02 FB | 	rdlong	local09, objptr
0566c     17 2D 02 F6 | 	mov	local08, local09
05670     01 2C 66 F0 | 	shl	local08, #1
05674     17 2D 02 F1 | 	add	local08, local09
05678     02 2C 66 F0 | 	shl	local08, #2
0567c     03 00 00 FF 
05680     00 E4 85 F1 | 	sub	objptr, ##1536
05684     F2 2C 02 F1 | 	add	local08, objptr
05688     08 2C 06 F1 | 	add	local08, #8
0568c     16 1F 62 FC | 	wrlong	local01, local08
05690     03 00 00 FF 
05694     00 E4 05 F1 | 	add	objptr, ##1536
05698     F2 2A 02 FB | 	rdlong	local07, objptr
0569c     01 2A 06 F1 | 	add	local07, #1
056a0     F2 2A 62 FC | 	wrlong	local07, objptr
056a4     69 00 00 FF 
056a8     50 E4 85 F1 | 	sub	objptr, ##53840
056ac                 | ' t1.result.uresult=j: t1.result_type=fun_assign  
056ac                 | ' 
056ac                 | ' 
056ac                 | ' 
056ac                 | ' 
056ac                 | ' 
056ac                 | ' 
056ac                 | ' compiledline(lineptr)=t1:  lineptr+=1 
056ac                 | '  if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
056ac     00 24 0E F2 | 	cmp	local04, #0 wz
056b0     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
056b4     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
056b8     38 00 90 5D |  if_ne	jmp	#LR__0477
056bc     69 00 00 FF 
056c0     50 E4 05 F1 | 	add	objptr, ##53840
056c4     F2 1E 02 FB | 	rdlong	local01, objptr
056c8     0F 2F 02 F6 | 	mov	local09, local01
056cc     01 2E 66 F0 | 	shl	local09, #1
056d0     0F 2F 02 F1 | 	add	local09, local01
056d4     02 2E 66 F0 | 	shl	local09, #2
056d8     03 00 00 FF 
056dc     00 E4 85 F1 | 	sub	objptr, ##1536
056e0     F2 2E 02 F1 | 	add	local09, objptr
056e4     08 2E 06 F1 | 	add	local09, #8
056e8     17 FD 6B FC | 	wrlong	#510, local09
056ec     66 00 00 FF 
056f0     50 E4 85 F1 | 	sub	objptr, ##52304
056f4                 | LR__0477
056f4     A7 F0 03 F6 | 	mov	ptra, fp
056f8     B2 00 A0 FD | 	call	#popregs_
056fc                 | _compile_immediate_assign_ret
056fc     2D 00 64 FD | 	ret
05700                 | 
05700                 | ' 
05700                 | ' ' ------------------ compile the line that is calling a command 
05700                 | ' 
05700                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)
05700                 | _compile
05700     04 4A 05 F6 | 	mov	COUNT_, #4
05704     A8 00 A0 FD | 	call	#pushregs_
05708     09 1F 0A F6 | 	mov	local01, arg01 wz
0570c     0A 21 02 F6 | 	mov	local02, arg02
05710     0B 23 02 F6 | 	mov	local03, arg03
05714                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
05714                 | ' ' num_minor bit 31: the line is goto target. If deleted, a proper record(s) has to be added to goto list
05714                 | '  
05714                 | ' '  print "called compile with line= "; alinemajor;" and cont= "; cont 
05714                 | ' if alinemajor=0 then err=compile_immediate(0) : return err  
05714     0C 00 90 5D |  if_ne	jmp	#LR__0480
05718     00 12 06 F6 | 	mov	arg01, #0
0571c     70 F5 BF FD | 	call	#_compile_immediate
05720     A0 00 90 FD | 	jmp	#LR__0487
05724                 | LR__0480
05724     66 00 00 FF 
05728     50 E4 05 F1 | 	add	objptr, ##52304
0572c     F2 1E 62 FC | 	wrlong	local01, objptr
05730     04 E4 05 F1 | 	add	objptr, #4
05734     F2 20 62 FC | 	wrlong	local02, objptr
05738     66 00 00 FF 
0573c     54 E4 85 F1 | 	sub	objptr, ##52308
05740     11 13 02 F6 | 	mov	arg01, local03
05744     01 12 06 F1 | 	add	arg01, #1
05748     44 F5 BF FD | 	call	#_compile_immediate
0574c     FD 24 0A F6 | 	mov	local04, result1 wz
05750                 | ' 
05750                 | ' ucompiledline(0)=alinemajor
05750                 | ' ucompiledline(1)=alineminor
05750                 | ' 
05750                 | ' 
05750                 | ' ' cont: 0: this is the first part of the line that will continue
05750                 | ' ' 1 - this is the continuation of the line
05750                 | ' ' 2 - this is the last continued line
05750                 | ' ' 3 - this is the ome and only part
05750                 | ' 
05750                 | ' 
05750                 | ' err=compile_immediate(cont+1) 
05750                 | ' if err=0 then
05750     6C 00 90 5D |  if_ne	jmp	#LR__0486
05754                 | '   if cont=3 orelse cont=2 then 
05754     03 22 0E F2 | 	cmp	local03, #3 wz
05758     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
0575c     60 00 90 5D |  if_ne	jmp	#LR__0485
05760                 | '     if alinemajor >lastline then 
05760     69 00 00 FF 
05764     5C E4 05 F1 | 	add	objptr, ##53852
05768     F2 16 02 FB | 	rdlong	arg03, objptr
0576c     69 00 00 FF 
05770     5C E4 85 F1 | 	sub	objptr, ##53852
05774     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
05778     0C 00 90 ED |  if_be	jmp	#LR__0481
0577c     0F 13 02 F6 | 	mov	arg01, local01
05780     2C F4 BF FD | 	call	#_add_line_at_end
05784     38 00 90 FD | 	jmp	#LR__0484
05788                 | LR__0481
05788     0F 13 02 F6 | 	mov	arg01, local01
0578c     AC EC BF FD | 	call	#_deleteline
05790                 | '       deleteline(alinemajor)  
05790                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor) ' yes I know that's not optimal    
05790     69 00 00 FF 
05794     5C E4 05 F1 | 	add	objptr, ##53852
05798     F2 16 02 FB | 	rdlong	arg03, objptr
0579c     69 00 00 FF 
057a0     5C E4 85 F1 | 	sub	objptr, ##53852
057a4     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
057a8     0C 00 90 ED |  if_be	jmp	#LR__0482
057ac     0F 13 02 F6 | 	mov	arg01, local01
057b0     FC F3 BF FD | 	call	#_add_line_at_end
057b4     08 00 90 FD | 	jmp	#LR__0483
057b8                 | LR__0482
057b8     0F 13 02 F6 | 	mov	arg01, local01
057bc     A8 F1 BF FD | 	call	#_insertline
057c0                 | LR__0483
057c0                 | LR__0484
057c0                 | LR__0485
057c0                 | LR__0486
057c0                 | ' return err
057c0     12 FB 01 F6 | 	mov	result1, local04
057c4                 | LR__0487
057c4     A7 F0 03 F6 | 	mov	ptra, fp
057c8     B2 00 A0 FD | 	call	#popregs_
057cc                 | _compile_ret
057cc     2D 00 64 FD | 	ret
057d0                 | 
057d0                 | ' 
057d0                 | ' ' ------------------ compile the line that is assigning to a variable
057d0                 | ' 
057d0                 | ' sub compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  
057d0                 | _compile_assign
057d0     03 4A 05 F6 | 	mov	COUNT_, #3
057d4     A8 00 A0 FD | 	call	#pushregs_
057d8     09 1F 0A F6 | 	mov	local01, arg01 wz
057dc     0A 21 02 F6 | 	mov	local02, arg02
057e0     0B 23 02 F6 | 	mov	local03, arg03
057e4                 | ' 
057e4                 | ' '  print "called compile_assign  with line= "; alinemajor;" and cont= "; cont 
057e4                 | ' if alinemajor=0 then compile_immediate_assign(0) : return  
057e4     0C 00 90 5D |  if_ne	jmp	#LR__0490
057e8     00 12 06 F6 | 	mov	arg01, #0
057ec     28 FC BF FD | 	call	#_compile_immediate_assign
057f0     94 00 90 FD | 	jmp	#LR__0496
057f4                 | LR__0490
057f4     66 00 00 FF 
057f8     50 E4 05 F1 | 	add	objptr, ##52304
057fc     F2 1E 62 FC | 	wrlong	local01, objptr
05800     04 E4 05 F1 | 	add	objptr, #4
05804     F2 20 62 FC | 	wrlong	local02, objptr
05808     66 00 00 FF 
0580c     54 E4 85 F1 | 	sub	objptr, ##52308
05810     11 13 02 F6 | 	mov	arg01, local03
05814     01 12 06 F1 | 	add	arg01, #1
05818     FC FB BF FD | 	call	#_compile_immediate_assign
0581c                 | ' 
0581c                 | ' ucompiledline(0)=alinemajor
0581c                 | ' ucompiledline(1)=alineminor
0581c                 | ' 
0581c                 | ' compile_immediate_assign(cont+1) 
0581c                 | ' 
0581c                 | ' if cont=3 orelse cont=2 then 
0581c     03 22 0E F2 | 	cmp	local03, #3 wz
05820     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
05824     60 00 90 5D |  if_ne	jmp	#LR__0495
05828                 | '   if alinemajor >lastline then 
05828     69 00 00 FF 
0582c     5C E4 05 F1 | 	add	objptr, ##53852
05830     F2 16 02 FB | 	rdlong	arg03, objptr
05834     69 00 00 FF 
05838     5C E4 85 F1 | 	sub	objptr, ##53852
0583c     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
05840     0C 00 90 ED |  if_be	jmp	#LR__0491
05844     0F 13 02 F6 | 	mov	arg01, local01
05848     64 F3 BF FD | 	call	#_add_line_at_end
0584c     38 00 90 FD | 	jmp	#LR__0494
05850                 | LR__0491
05850     0F 13 02 F6 | 	mov	arg01, local01
05854     E4 EB BF FD | 	call	#_deleteline
05858                 | '     deleteline(alinemajor)  
05858                 | '     if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
05858     69 00 00 FF 
0585c     5C E4 05 F1 | 	add	objptr, ##53852
05860     F2 16 02 FB | 	rdlong	arg03, objptr
05864     69 00 00 FF 
05868     5C E4 85 F1 | 	sub	objptr, ##53852
0586c     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
05870     0C 00 90 ED |  if_be	jmp	#LR__0492
05874     0F 13 02 F6 | 	mov	arg01, local01
05878     34 F3 BF FD | 	call	#_add_line_at_end
0587c     08 00 90 FD | 	jmp	#LR__0493
05880                 | LR__0492
05880     0F 13 02 F6 | 	mov	arg01, local01
05884     E0 F0 BF FD | 	call	#_insertline
05888                 | LR__0493
05888                 | LR__0494
05888                 | LR__0495
05888                 | LR__0496
05888     A7 F0 03 F6 | 	mov	ptra, fp
0588c     B2 00 A0 FD | 	call	#popregs_
05890                 | _compile_assign_ret
05890     2D 00 64 FD | 	ret
05894                 | 
05894                 | ' 
05894                 | ' sub compile_error(errno)
05894                 | _compile_error
05894     FF 04 06 F6 | 	mov	_var03, #255
05898     01 07 02 F6 | 	mov	_var04, _var02
0589c     02 09 02 F6 | 	mov	_var05, _var03
058a0     69 00 00 FF 
058a4     50 E4 05 F1 | 	add	objptr, ##53840
058a8     F2 0A 02 FB | 	rdlong	_var06, objptr
058ac     05 0D 02 F6 | 	mov	_var07, _var06
058b0     01 0C 66 F0 | 	shl	_var07, #1
058b4     05 0D 02 F1 | 	add	_var07, _var06
058b8     02 0C 66 F0 | 	shl	_var07, #2
058bc     03 00 00 FF 
058c0     00 E4 85 F1 | 	sub	objptr, ##1536
058c4     F2 0C 02 F1 | 	add	_var07, objptr
058c8     06 13 62 FC | 	wrlong	arg01, _var07
058cc     03 00 00 FF 
058d0     00 E4 05 F1 | 	add	objptr, ##1536
058d4     F2 0C 02 FB | 	rdlong	_var07, objptr
058d8     06 0B 02 F6 | 	mov	_var06, _var07
058dc     01 0A 66 F0 | 	shl	_var06, #1
058e0     06 0B 02 F1 | 	add	_var06, _var07
058e4     02 0A 66 F0 | 	shl	_var06, #2
058e8     03 00 00 FF 
058ec     00 E4 85 F1 | 	sub	objptr, ##1536
058f0     F2 0A 02 F1 | 	add	_var06, objptr
058f4     04 0A 06 F1 | 	add	_var06, #4
058f8     05 07 62 FC | 	wrlong	_var04, _var06
058fc     03 00 00 FF 
05900     00 E4 05 F1 | 	add	objptr, ##1536
05904     F2 0C 02 FB | 	rdlong	_var07, objptr
05908     06 0B 02 F6 | 	mov	_var06, _var07
0590c     01 0A 66 F0 | 	shl	_var06, #1
05910     06 0B 02 F1 | 	add	_var06, _var07
05914     02 0A 66 F0 | 	shl	_var06, #2
05918     03 00 00 FF 
0591c     00 E4 85 F1 | 	sub	objptr, ##1536
05920     F2 0A 02 F1 | 	add	_var06, objptr
05924     08 0A 06 F1 | 	add	_var06, #8
05928     05 09 62 FC | 	wrlong	_var05, _var06
0592c     03 00 00 FF 
05930     00 E4 05 F1 | 	add	objptr, ##1536
05934     F2 12 02 FB | 	rdlong	arg01, objptr
05938     01 12 06 F1 | 	add	arg01, #1
0593c     F2 12 62 FC | 	wrlong	arg01, objptr
05940     69 00 00 FF 
05944     50 E4 85 F1 | 	sub	objptr, ##53840
05948                 | _compile_error_ret
05948     2D 00 64 FD | 	ret
0594c                 | 
0594c                 | ' 
0594c                 | ' 
0594c                 | ' sub compile_unknown() 
0594c                 | _compile_unknown
0594c     FF 04 06 F6 | 	mov	_var03, #255
05950     17 00 06 F6 | 	mov	_var01, #23
05954     01 07 02 F6 | 	mov	_var04, _var02
05958     02 01 02 F6 | 	mov	_var01, _var03
0595c     69 00 00 FF 
05960     50 E4 05 F1 | 	add	objptr, ##53840
05964     F2 08 02 FB | 	rdlong	_var05, objptr
05968     04 0B 02 F6 | 	mov	_var06, _var05
0596c     01 0A 66 F0 | 	shl	_var06, #1
05970     04 0B 02 F1 | 	add	_var06, _var05
05974     02 0A 66 F0 | 	shl	_var06, #2
05978     03 00 00 FF 
0597c     00 E4 85 F1 | 	sub	objptr, ##1536
05980     F2 0A 02 F1 | 	add	_var06, objptr
05984     05 2F 68 FC | 	wrlong	#23, _var06
05988     03 00 00 FF 
0598c     00 E4 05 F1 | 	add	objptr, ##1536
05990     F2 0A 02 FB | 	rdlong	_var06, objptr
05994     05 09 02 F6 | 	mov	_var05, _var06
05998     01 08 66 F0 | 	shl	_var05, #1
0599c     05 09 02 F1 | 	add	_var05, _var06
059a0     02 08 66 F0 | 	shl	_var05, #2
059a4     03 00 00 FF 
059a8     00 E4 85 F1 | 	sub	objptr, ##1536
059ac     F2 08 02 F1 | 	add	_var05, objptr
059b0     04 08 06 F1 | 	add	_var05, #4
059b4     04 07 62 FC | 	wrlong	_var04, _var05
059b8     03 00 00 FF 
059bc     00 E4 05 F1 | 	add	objptr, ##1536
059c0     F2 0A 02 FB | 	rdlong	_var06, objptr
059c4     05 09 02 F6 | 	mov	_var05, _var06
059c8     01 08 66 F0 | 	shl	_var05, #1
059cc     05 09 02 F1 | 	add	_var05, _var06
059d0     02 08 66 F0 | 	shl	_var05, #2
059d4     03 00 00 FF 
059d8     00 E4 85 F1 | 	sub	objptr, ##1536
059dc     F2 08 02 F1 | 	add	_var05, objptr
059e0     08 08 06 F1 | 	add	_var05, #8
059e4     04 01 62 FC | 	wrlong	_var01, _var05
059e8     03 00 00 FF 
059ec     00 E4 05 F1 | 	add	objptr, ##1536
059f0     F2 0A 02 FB | 	rdlong	_var06, objptr
059f4     01 0A 06 F1 | 	add	_var06, #1
059f8     F2 0A 62 FC | 	wrlong	_var06, objptr
059fc     69 00 00 FF 
05a00     50 E4 85 F1 | 	sub	objptr, ##53840
05a04                 | _compile_unknown_ret
05a04     2D 00 64 FD | 	ret
05a08                 | 
05a08                 | ' 
05a08                 | ' function compile_converttoint() as integer
05a08                 | _compile_converttoint
05a08     06 4A 05 F6 | 	mov	COUNT_, #6
05a0c     A8 00 A0 FD | 	call	#pushregs_
05a10     00 1E 06 F6 | 	mov	local01, #0
05a14     FC 22 B0 FD | 	call	#_expr
05a18     FD 24 0A F6 | 	mov	local04, result1 wz
05a1c                 | ' err=0
05a1c                 | ' t1.result.uresult=0
05a1c                 | ' err=expr()
05a1c                 | ' if err=0 then
05a1c     C0 00 90 5D |  if_ne	jmp	#LR__0500
05a20     16 22 06 F6 | 	mov	local03, #22
05a24     0F 27 02 F6 | 	mov	local05, local01
05a28     10 29 02 F6 | 	mov	local06, local02
05a2c     11 25 02 F6 | 	mov	local04, local03
05a30     69 00 00 FF 
05a34     50 E4 05 F1 | 	add	objptr, ##53840
05a38     F2 1E 02 FB | 	rdlong	local01, objptr
05a3c     0F FB 01 F6 | 	mov	result1, local01
05a40     01 FA 65 F0 | 	shl	result1, #1
05a44     0F FB 01 F1 | 	add	result1, local01
05a48     02 FA 65 F0 | 	shl	result1, #2
05a4c     03 00 00 FF 
05a50     00 E4 85 F1 | 	sub	objptr, ##1536
05a54     F2 FA 01 F1 | 	add	result1, objptr
05a58     FD 26 62 FC | 	wrlong	local05, result1
05a5c     03 00 00 FF 
05a60     00 E4 05 F1 | 	add	objptr, ##1536
05a64     F2 26 02 FB | 	rdlong	local05, objptr
05a68     13 1F 02 F6 | 	mov	local01, local05
05a6c     01 1E 66 F0 | 	shl	local01, #1
05a70     13 1F 02 F1 | 	add	local01, local05
05a74     02 1E 66 F0 | 	shl	local01, #2
05a78     03 00 00 FF 
05a7c     00 E4 85 F1 | 	sub	objptr, ##1536
05a80     F2 1E 02 F1 | 	add	local01, objptr
05a84     04 1E 06 F1 | 	add	local01, #4
05a88     0F 29 62 FC | 	wrlong	local06, local01
05a8c     03 00 00 FF 
05a90     00 E4 05 F1 | 	add	objptr, ##1536
05a94     F2 28 02 FB | 	rdlong	local06, objptr
05a98     14 27 02 F6 | 	mov	local05, local06
05a9c     01 26 66 F0 | 	shl	local05, #1
05aa0     14 27 02 F1 | 	add	local05, local06
05aa4     02 26 66 F0 | 	shl	local05, #2
05aa8     03 00 00 FF 
05aac     00 E4 85 F1 | 	sub	objptr, ##1536
05ab0     F2 26 02 F1 | 	add	local05, objptr
05ab4     08 26 06 F1 | 	add	local05, #8
05ab8     13 25 62 FC | 	wrlong	local04, local05
05abc     03 00 00 FF 
05ac0     00 E4 05 F1 | 	add	objptr, ##1536
05ac4     F2 26 02 FB | 	rdlong	local05, objptr
05ac8     01 26 06 F1 | 	add	local05, #1
05acc     F2 26 62 FC | 	wrlong	local05, objptr
05ad0     69 00 00 FF 
05ad4     50 E4 85 F1 | 	sub	objptr, ##53840
05ad8                 | '   t1.result_type=fun_converttoint
05ad8                 | '   compiledline(lineptr)=t1: lineptr+=1 
05ad8                 | '   return 0
05ad8     00 FA 05 F6 | 	mov	result1, #0
05adc     04 00 90 FD | 	jmp	#LR__0501
05ae0                 | LR__0500
05ae0                 | '   return err
05ae0     12 FB 01 F6 | 	mov	result1, local04
05ae4                 | LR__0501
05ae4     A7 F0 03 F6 | 	mov	ptra, fp
05ae8     B2 00 A0 FD | 	call	#popregs_
05aec                 | _compile_converttoint_ret
05aec     2D 00 64 FD | 	ret
05af0                 | 
05af0                 | ' 
05af0                 | ' 
05af0                 | ' function compile_fun_2p() as ulong
05af0                 | _compile_fun_2p
05af0     01 4A 05 F6 | 	mov	COUNT_, #1
05af4     A8 00 A0 FD | 	call	#pushregs_
05af8     18 22 B0 FD | 	call	#_expr
05afc                 | ' 
05afc                 | ' expr()
05afc                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05afc     56 00 00 FF 
05b00     18 E4 05 F1 | 	add	objptr, ##44056
05b04     F2 1E 02 FB | 	rdlong	local01, objptr
05b08     03 1E 66 F0 | 	shl	local01, #3
05b0c     02 00 00 FF 
05b10     38 E4 85 F1 | 	sub	objptr, ##1080
05b14     F2 1E 02 F1 | 	add	local01, objptr
05b18     04 1E 06 F1 | 	add	local01, #4
05b1c     0F 1F 02 FB | 	rdlong	local01, local01
05b20     11 1E 0E F2 | 	cmp	local01, #17 wz
05b24     53 00 00 FF 
05b28     E0 E5 85 F1 | 	sub	objptr, ##42976
05b2c     15 FA 05 56 |  if_ne	mov	result1, #21
05b30     24 00 90 5D |  if_ne	jmp	#LR__0510
05b34     56 00 00 FF 
05b38     18 E4 05 F1 | 	add	objptr, ##44056
05b3c     F2 1E 02 FB | 	rdlong	local01, objptr
05b40     01 1E 06 F1 | 	add	local01, #1
05b44     F2 1E 62 FC | 	wrlong	local01, objptr
05b48     56 00 00 FF 
05b4c     18 E4 85 F1 | 	sub	objptr, ##44056
05b50     C0 21 B0 FD | 	call	#_expr
05b54     00 FA 05 F6 | 	mov	result1, #0
05b58                 | LR__0510
05b58     A7 F0 03 F6 | 	mov	ptra, fp
05b5c     B2 00 A0 FD | 	call	#popregs_
05b60                 | _compile_fun_2p_ret
05b60     2D 00 64 FD | 	ret
05b64                 | 
05b64                 | ' 
05b64                 | ' function compile_fun_3p() as ulong
05b64                 | _compile_fun_3p
05b64     01 4A 05 F6 | 	mov	COUNT_, #1
05b68     A8 00 A0 FD | 	call	#pushregs_
05b6c     A4 21 B0 FD | 	call	#_expr
05b70                 | ' 
05b70                 | ' expr()
05b70                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05b70     56 00 00 FF 
05b74     18 E4 05 F1 | 	add	objptr, ##44056
05b78     F2 1E 02 FB | 	rdlong	local01, objptr
05b7c     03 1E 66 F0 | 	shl	local01, #3
05b80     02 00 00 FF 
05b84     38 E4 85 F1 | 	sub	objptr, ##1080
05b88     F2 1E 02 F1 | 	add	local01, objptr
05b8c     04 1E 06 F1 | 	add	local01, #4
05b90     0F 1F 02 FB | 	rdlong	local01, local01
05b94     11 1E 0E F2 | 	cmp	local01, #17 wz
05b98     53 00 00 FF 
05b9c     E0 E5 85 F1 | 	sub	objptr, ##42976
05ba0     15 FA 05 56 |  if_ne	mov	result1, #21
05ba4     7C 00 90 5D |  if_ne	jmp	#LR__0520
05ba8     56 00 00 FF 
05bac     18 E4 05 F1 | 	add	objptr, ##44056
05bb0     F2 1E 02 FB | 	rdlong	local01, objptr
05bb4     01 1E 06 F1 | 	add	local01, #1
05bb8     F2 1E 62 FC | 	wrlong	local01, objptr
05bbc     56 00 00 FF 
05bc0     18 E4 85 F1 | 	sub	objptr, ##44056
05bc4     4C 21 B0 FD | 	call	#_expr
05bc8                 | ' expr()
05bc8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05bc8     56 00 00 FF 
05bcc     18 E4 05 F1 | 	add	objptr, ##44056
05bd0     F2 1E 02 FB | 	rdlong	local01, objptr
05bd4     03 1E 66 F0 | 	shl	local01, #3
05bd8     02 00 00 FF 
05bdc     38 E4 85 F1 | 	sub	objptr, ##1080
05be0     F2 1E 02 F1 | 	add	local01, objptr
05be4     04 1E 06 F1 | 	add	local01, #4
05be8     0F 1F 02 FB | 	rdlong	local01, local01
05bec     11 1E 0E F2 | 	cmp	local01, #17 wz
05bf0     53 00 00 FF 
05bf4     E0 E5 85 F1 | 	sub	objptr, ##42976
05bf8     15 FA 05 56 |  if_ne	mov	result1, #21
05bfc     24 00 90 5D |  if_ne	jmp	#LR__0520
05c00     56 00 00 FF 
05c04     18 E4 05 F1 | 	add	objptr, ##44056
05c08     F2 1E 02 FB | 	rdlong	local01, objptr
05c0c     01 1E 06 F1 | 	add	local01, #1
05c10     F2 1E 62 FC | 	wrlong	local01, objptr
05c14     56 00 00 FF 
05c18     18 E4 85 F1 | 	sub	objptr, ##44056
05c1c     F4 20 B0 FD | 	call	#_expr
05c20     00 FA 05 F6 | 	mov	result1, #0
05c24                 | LR__0520
05c24     A7 F0 03 F6 | 	mov	ptra, fp
05c28     B2 00 A0 FD | 	call	#popregs_
05c2c                 | _compile_fun_3p_ret
05c2c     2D 00 64 FD | 	ret
05c30                 | 
05c30                 | ' 
05c30                 | ' function compile_fun_4p() as ulong
05c30                 | _compile_fun_4p
05c30     01 4A 05 F6 | 	mov	COUNT_, #1
05c34     A8 00 A0 FD | 	call	#pushregs_
05c38     D8 20 B0 FD | 	call	#_expr
05c3c                 | ' 
05c3c                 | ' expr()
05c3c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05c3c     56 00 00 FF 
05c40     18 E4 05 F1 | 	add	objptr, ##44056
05c44     F2 1E 02 FB | 	rdlong	local01, objptr
05c48     03 1E 66 F0 | 	shl	local01, #3
05c4c     02 00 00 FF 
05c50     38 E4 85 F1 | 	sub	objptr, ##1080
05c54     F2 1E 02 F1 | 	add	local01, objptr
05c58     04 1E 06 F1 | 	add	local01, #4
05c5c     0F 1F 02 FB | 	rdlong	local01, local01
05c60     11 1E 0E F2 | 	cmp	local01, #17 wz
05c64     53 00 00 FF 
05c68     E0 E5 85 F1 | 	sub	objptr, ##42976
05c6c     15 FA 05 56 |  if_ne	mov	result1, #21
05c70     D4 00 90 5D |  if_ne	jmp	#LR__0530
05c74     56 00 00 FF 
05c78     18 E4 05 F1 | 	add	objptr, ##44056
05c7c     F2 1E 02 FB | 	rdlong	local01, objptr
05c80     01 1E 06 F1 | 	add	local01, #1
05c84     F2 1E 62 FC | 	wrlong	local01, objptr
05c88     56 00 00 FF 
05c8c     18 E4 85 F1 | 	sub	objptr, ##44056
05c90     80 20 B0 FD | 	call	#_expr
05c94                 | ' expr()
05c94                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05c94     56 00 00 FF 
05c98     18 E4 05 F1 | 	add	objptr, ##44056
05c9c     F2 1E 02 FB | 	rdlong	local01, objptr
05ca0     03 1E 66 F0 | 	shl	local01, #3
05ca4     02 00 00 FF 
05ca8     38 E4 85 F1 | 	sub	objptr, ##1080
05cac     F2 1E 02 F1 | 	add	local01, objptr
05cb0     04 1E 06 F1 | 	add	local01, #4
05cb4     0F 1F 02 FB | 	rdlong	local01, local01
05cb8     11 1E 0E F2 | 	cmp	local01, #17 wz
05cbc     53 00 00 FF 
05cc0     E0 E5 85 F1 | 	sub	objptr, ##42976
05cc4     15 FA 05 56 |  if_ne	mov	result1, #21
05cc8     7C 00 90 5D |  if_ne	jmp	#LR__0530
05ccc     56 00 00 FF 
05cd0     18 E4 05 F1 | 	add	objptr, ##44056
05cd4     F2 1E 02 FB | 	rdlong	local01, objptr
05cd8     01 1E 06 F1 | 	add	local01, #1
05cdc     F2 1E 62 FC | 	wrlong	local01, objptr
05ce0     56 00 00 FF 
05ce4     18 E4 85 F1 | 	sub	objptr, ##44056
05ce8     28 20 B0 FD | 	call	#_expr
05cec                 | ' expr()
05cec                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05cec     56 00 00 FF 
05cf0     18 E4 05 F1 | 	add	objptr, ##44056
05cf4     F2 1E 02 FB | 	rdlong	local01, objptr
05cf8     03 1E 66 F0 | 	shl	local01, #3
05cfc     02 00 00 FF 
05d00     38 E4 85 F1 | 	sub	objptr, ##1080
05d04     F2 1E 02 F1 | 	add	local01, objptr
05d08     04 1E 06 F1 | 	add	local01, #4
05d0c     0F 1F 02 FB | 	rdlong	local01, local01
05d10     11 1E 0E F2 | 	cmp	local01, #17 wz
05d14     53 00 00 FF 
05d18     E0 E5 85 F1 | 	sub	objptr, ##42976
05d1c     15 FA 05 56 |  if_ne	mov	result1, #21
05d20     24 00 90 5D |  if_ne	jmp	#LR__0530
05d24     56 00 00 FF 
05d28     18 E4 05 F1 | 	add	objptr, ##44056
05d2c     F2 1E 02 FB | 	rdlong	local01, objptr
05d30     01 1E 06 F1 | 	add	local01, #1
05d34     F2 1E 62 FC | 	wrlong	local01, objptr
05d38     56 00 00 FF 
05d3c     18 E4 85 F1 | 	sub	objptr, ##44056
05d40     D0 1F B0 FD | 	call	#_expr
05d44     00 FA 05 F6 | 	mov	result1, #0
05d48                 | LR__0530
05d48     A7 F0 03 F6 | 	mov	ptra, fp
05d4c     B2 00 A0 FD | 	call	#popregs_
05d50                 | _compile_fun_4p_ret
05d50     2D 00 64 FD | 	ret
05d54                 | 
05d54                 | ' 
05d54                 | ' 
05d54                 | ' function compile_fun_5p() as ulong
05d54                 | _compile_fun_5p
05d54     01 4A 05 F6 | 	mov	COUNT_, #1
05d58     A8 00 A0 FD | 	call	#pushregs_
05d5c     B4 1F B0 FD | 	call	#_expr
05d60                 | ' 
05d60                 | ' expr()
05d60                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05d60     56 00 00 FF 
05d64     18 E4 05 F1 | 	add	objptr, ##44056
05d68     F2 1E 02 FB | 	rdlong	local01, objptr
05d6c     03 1E 66 F0 | 	shl	local01, #3
05d70     02 00 00 FF 
05d74     38 E4 85 F1 | 	sub	objptr, ##1080
05d78     F2 1E 02 F1 | 	add	local01, objptr
05d7c     04 1E 06 F1 | 	add	local01, #4
05d80     0F 1F 02 FB | 	rdlong	local01, local01
05d84     11 1E 0E F2 | 	cmp	local01, #17 wz
05d88     53 00 00 FF 
05d8c     E0 E5 85 F1 | 	sub	objptr, ##42976
05d90     15 FA 05 56 |  if_ne	mov	result1, #21
05d94     2C 01 90 5D |  if_ne	jmp	#LR__0540
05d98     56 00 00 FF 
05d9c     18 E4 05 F1 | 	add	objptr, ##44056
05da0     F2 1E 02 FB | 	rdlong	local01, objptr
05da4     01 1E 06 F1 | 	add	local01, #1
05da8     F2 1E 62 FC | 	wrlong	local01, objptr
05dac     56 00 00 FF 
05db0     18 E4 85 F1 | 	sub	objptr, ##44056
05db4     5C 1F B0 FD | 	call	#_expr
05db8                 | ' expr()
05db8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05db8     56 00 00 FF 
05dbc     18 E4 05 F1 | 	add	objptr, ##44056
05dc0     F2 1E 02 FB | 	rdlong	local01, objptr
05dc4     03 1E 66 F0 | 	shl	local01, #3
05dc8     02 00 00 FF 
05dcc     38 E4 85 F1 | 	sub	objptr, ##1080
05dd0     F2 1E 02 F1 | 	add	local01, objptr
05dd4     04 1E 06 F1 | 	add	local01, #4
05dd8     0F 1F 02 FB | 	rdlong	local01, local01
05ddc     11 1E 0E F2 | 	cmp	local01, #17 wz
05de0     53 00 00 FF 
05de4     E0 E5 85 F1 | 	sub	objptr, ##42976
05de8     15 FA 05 56 |  if_ne	mov	result1, #21
05dec     D4 00 90 5D |  if_ne	jmp	#LR__0540
05df0     56 00 00 FF 
05df4     18 E4 05 F1 | 	add	objptr, ##44056
05df8     F2 1E 02 FB | 	rdlong	local01, objptr
05dfc     01 1E 06 F1 | 	add	local01, #1
05e00     F2 1E 62 FC | 	wrlong	local01, objptr
05e04     56 00 00 FF 
05e08     18 E4 85 F1 | 	sub	objptr, ##44056
05e0c     04 1F B0 FD | 	call	#_expr
05e10                 | ' expr()
05e10                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05e10     56 00 00 FF 
05e14     18 E4 05 F1 | 	add	objptr, ##44056
05e18     F2 1E 02 FB | 	rdlong	local01, objptr
05e1c     03 1E 66 F0 | 	shl	local01, #3
05e20     02 00 00 FF 
05e24     38 E4 85 F1 | 	sub	objptr, ##1080
05e28     F2 1E 02 F1 | 	add	local01, objptr
05e2c     04 1E 06 F1 | 	add	local01, #4
05e30     0F 1F 02 FB | 	rdlong	local01, local01
05e34     11 1E 0E F2 | 	cmp	local01, #17 wz
05e38     53 00 00 FF 
05e3c     E0 E5 85 F1 | 	sub	objptr, ##42976
05e40     15 FA 05 56 |  if_ne	mov	result1, #21
05e44     7C 00 90 5D |  if_ne	jmp	#LR__0540
05e48     56 00 00 FF 
05e4c     18 E4 05 F1 | 	add	objptr, ##44056
05e50     F2 1E 02 FB | 	rdlong	local01, objptr
05e54     01 1E 06 F1 | 	add	local01, #1
05e58     F2 1E 62 FC | 	wrlong	local01, objptr
05e5c     56 00 00 FF 
05e60     18 E4 85 F1 | 	sub	objptr, ##44056
05e64     AC 1E B0 FD | 	call	#_expr
05e68                 | ' expr()
05e68                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05e68     56 00 00 FF 
05e6c     18 E4 05 F1 | 	add	objptr, ##44056
05e70     F2 1E 02 FB | 	rdlong	local01, objptr
05e74     03 1E 66 F0 | 	shl	local01, #3
05e78     02 00 00 FF 
05e7c     38 E4 85 F1 | 	sub	objptr, ##1080
05e80     F2 1E 02 F1 | 	add	local01, objptr
05e84     04 1E 06 F1 | 	add	local01, #4
05e88     0F 1F 02 FB | 	rdlong	local01, local01
05e8c     11 1E 0E F2 | 	cmp	local01, #17 wz
05e90     53 00 00 FF 
05e94     E0 E5 85 F1 | 	sub	objptr, ##42976
05e98     15 FA 05 56 |  if_ne	mov	result1, #21
05e9c     24 00 90 5D |  if_ne	jmp	#LR__0540
05ea0     56 00 00 FF 
05ea4     18 E4 05 F1 | 	add	objptr, ##44056
05ea8     F2 1E 02 FB | 	rdlong	local01, objptr
05eac     01 1E 06 F1 | 	add	local01, #1
05eb0     F2 1E 62 FC | 	wrlong	local01, objptr
05eb4     56 00 00 FF 
05eb8     18 E4 85 F1 | 	sub	objptr, ##44056
05ebc     54 1E B0 FD | 	call	#_expr
05ec0     00 FA 05 F6 | 	mov	result1, #0
05ec4                 | LR__0540
05ec4     A7 F0 03 F6 | 	mov	ptra, fp
05ec8     B2 00 A0 FD | 	call	#popregs_
05ecc                 | _compile_fun_5p_ret
05ecc     2D 00 64 FD | 	ret
05ed0                 | 
05ed0                 | ' 
05ed0                 | ' function compile_fun_varp() as ulong ' parameter # on top of the stack
05ed0                 | _compile_fun_varp
05ed0     02 4A 05 F6 | 	mov	COUNT_, #2
05ed4     A8 00 A0 FD | 	call	#pushregs_
05ed8     00 1E 06 F6 | 	mov	local01, #0
05edc                 | ' i=0
05edc                 | ' if lparts(ct).token<>token_end then
05edc     56 00 00 FF 
05ee0     18 E4 05 F1 | 	add	objptr, ##44056
05ee4     F2 20 02 FB | 	rdlong	local02, objptr
05ee8     03 20 66 F0 | 	shl	local02, #3
05eec     02 00 00 FF 
05ef0     38 E4 85 F1 | 	sub	objptr, ##1080
05ef4     F2 20 02 F1 | 	add	local02, objptr
05ef8     04 20 06 F1 | 	add	local02, #4
05efc     10 21 02 FB | 	rdlong	local02, local02
05f00     FE 21 0E F2 | 	cmp	local02, #510 wz
05f04     53 00 00 FF 
05f08     E0 E5 85 F1 | 	sub	objptr, ##42976
05f0c     5C 00 90 AD |  if_e	jmp	#LR__0552
05f10                 | '   do
05f10                 | LR__0550
05f10     00 1E B0 FD | 	call	#_expr
05f14     01 1E 06 F1 | 	add	local01, #1
05f18                 | '   expr()
05f18                 | '    i+=1
05f18                 | '    if lparts(ct).token<> token_comma then exit loop else ct+=1
05f18     56 00 00 FF 
05f1c     18 E4 05 F1 | 	add	objptr, ##44056
05f20     F2 20 02 FB | 	rdlong	local02, objptr
05f24     03 20 66 F0 | 	shl	local02, #3
05f28     02 00 00 FF 
05f2c     38 E4 85 F1 | 	sub	objptr, ##1080
05f30     F2 20 02 F1 | 	add	local02, objptr
05f34     04 20 06 F1 | 	add	local02, #4
05f38     10 21 02 FB | 	rdlong	local02, local02
05f3c     11 20 0E F2 | 	cmp	local02, #17 wz
05f40     53 00 00 FF 
05f44     E0 E5 85 F1 | 	sub	objptr, ##42976
05f48     20 00 90 5D |  if_ne	jmp	#LR__0551
05f4c     56 00 00 FF 
05f50     18 E4 05 F1 | 	add	objptr, ##44056
05f54     F2 20 02 FB | 	rdlong	local02, objptr
05f58     01 20 06 F1 | 	add	local02, #1
05f5c     F2 20 62 FC | 	wrlong	local02, objptr
05f60     56 00 00 FF 
05f64     18 E4 85 F1 | 	sub	objptr, ##44056
05f68     A4 FF 9F FD | 	jmp	#LR__0550
05f6c                 | LR__0551
05f6c                 | LR__0552
05f6c                 | ' return i
05f6c     0F FB 01 F6 | 	mov	result1, local01
05f70     A7 F0 03 F6 | 	mov	ptra, fp
05f74     B2 00 A0 FD | 	call	#popregs_
05f78                 | _compile_fun_varp_ret
05f78     2D 00 64 FD | 	ret
05f7c                 | 
05f7c                 | ' 
05f7c                 | ' 
05f7c                 | ' function compile_int_fun_2p() as ulong
05f7c                 | _compile_int_fun_2p
05f7c     01 4A 05 F6 | 	mov	COUNT_, #1
05f80     A8 00 A0 FD | 	call	#pushregs_
05f84     80 FA BF FD | 	call	#_compile_converttoint
05f88     FD 1E 02 F6 | 	mov	local01, result1
05f8c                 | ' err=compile_converttoint() : if err>0 then return err
05f8c     01 1E 56 F2 | 	cmps	local01, #1 wc
05f90     0F FB 01 36 |  if_ae	mov	result1, local01
05f94     58 00 90 3D |  if_ae	jmp	#LR__0560
05f98                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05f98     56 00 00 FF 
05f9c     18 E4 05 F1 | 	add	objptr, ##44056
05fa0     F2 1E 02 FB | 	rdlong	local01, objptr
05fa4     03 1E 66 F0 | 	shl	local01, #3
05fa8     02 00 00 FF 
05fac     38 E4 85 F1 | 	sub	objptr, ##1080
05fb0     F2 1E 02 F1 | 	add	local01, objptr
05fb4     04 1E 06 F1 | 	add	local01, #4
05fb8     0F 1F 02 FB | 	rdlong	local01, local01
05fbc     11 1E 0E F2 | 	cmp	local01, #17 wz
05fc0     53 00 00 FF 
05fc4     E0 E5 85 F1 | 	sub	objptr, ##42976
05fc8     15 FA 05 56 |  if_ne	mov	result1, #21
05fcc     20 00 90 5D |  if_ne	jmp	#LR__0560
05fd0     56 00 00 FF 
05fd4     18 E4 05 F1 | 	add	objptr, ##44056
05fd8     F2 1E 02 FB | 	rdlong	local01, objptr
05fdc     01 1E 06 F1 | 	add	local01, #1
05fe0     F2 1E 62 FC | 	wrlong	local01, objptr
05fe4     56 00 00 FF 
05fe8     18 E4 85 F1 | 	sub	objptr, ##44056
05fec     18 FA BF FD | 	call	#_compile_converttoint
05ff0                 | ' err=compile_converttoint() 
05ff0                 | ' return err
05ff0                 | LR__0560
05ff0     A7 F0 03 F6 | 	mov	ptra, fp
05ff4     B2 00 A0 FD | 	call	#popregs_
05ff8                 | _compile_int_fun_2p_ret
05ff8     2D 00 64 FD | 	ret
05ffc                 | 
05ffc                 | ' 
05ffc                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
05ffc                 | _compile_print
05ffc     0B 4A 05 F6 | 	mov	COUNT_, #11
06000     A8 00 A0 FD | 	call	#pushregs_
06004     00 1E 06 F6 | 	mov	local01, #0
06008     1D 22 06 F6 | 	mov	local03, #29
0600c                 | ' t1.result.uresult=0 : t1.result_type=result_uint
0600c                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
0600c     56 00 00 FF 
06010     18 E4 05 F1 | 	add	objptr, ##44056
06014     F2 24 02 FB | 	rdlong	local04, objptr
06018     03 24 66 F0 | 	shl	local04, #3
0601c     02 00 00 FF 
06020     38 E4 85 F1 | 	sub	objptr, ##1080
06024     F2 24 02 F1 | 	add	local04, objptr
06028     04 24 06 F1 | 	add	local04, #4
0602c     12 25 02 FB | 	rdlong	local04, local04
06030     FE 25 0E F2 | 	cmp	local04, #510 wz
06034     53 00 00 FF 
06038     E0 E5 85 F1 | 	sub	objptr, ##42976
0603c     68 01 90 5D |  if_ne	jmp	#LR__0570
06040     20 22 06 F6 | 	mov	local03, #32
06044     0F 27 02 F6 | 	mov	local05, local01
06048     10 29 02 F6 | 	mov	local06, local02
0604c     11 2B 02 F6 | 	mov	local07, local03
06050     69 00 00 FF 
06054     50 E4 05 F1 | 	add	objptr, ##53840
06058     F2 2C 02 FB | 	rdlong	local08, objptr
0605c     16 2F 02 F6 | 	mov	local09, local08
06060     01 2E 66 F0 | 	shl	local09, #1
06064     16 2F 02 F1 | 	add	local09, local08
06068     02 2E 66 F0 | 	shl	local09, #2
0606c     03 00 00 FF 
06070     00 E4 85 F1 | 	sub	objptr, ##1536
06074     F2 2E 02 F1 | 	add	local09, objptr
06078     17 27 62 FC | 	wrlong	local05, local09
0607c     03 00 00 FF 
06080     00 E4 05 F1 | 	add	objptr, ##1536
06084     F2 26 02 FB | 	rdlong	local05, objptr
06088     13 31 02 F6 | 	mov	local10, local05
0608c     01 30 66 F0 | 	shl	local10, #1
06090     13 31 02 F1 | 	add	local10, local05
06094     02 30 66 F0 | 	shl	local10, #2
06098     03 00 00 FF 
0609c     00 E4 85 F1 | 	sub	objptr, ##1536
060a0     F2 30 02 F1 | 	add	local10, objptr
060a4     04 30 06 F1 | 	add	local10, #4
060a8     18 29 62 FC | 	wrlong	local06, local10
060ac     03 00 00 FF 
060b0     00 E4 05 F1 | 	add	objptr, ##1536
060b4     F2 26 02 FB | 	rdlong	local05, objptr
060b8     13 33 02 F6 | 	mov	local11, local05
060bc     01 32 66 F0 | 	shl	local11, #1
060c0     13 33 02 F1 | 	add	local11, local05
060c4     02 32 66 F0 | 	shl	local11, #2
060c8     03 00 00 FF 
060cc     00 E4 85 F1 | 	sub	objptr, ##1536
060d0     F2 32 02 F1 | 	add	local11, objptr
060d4     08 32 06 F1 | 	add	local11, #8
060d8     19 2B 62 FC | 	wrlong	local07, local11
060dc     03 00 00 FF 
060e0     00 E4 05 F1 | 	add	objptr, ##1536
060e4     F2 26 02 FB | 	rdlong	local05, objptr
060e8     01 26 06 F1 | 	add	local05, #1
060ec     F2 26 62 FC | 	wrlong	local05, objptr
060f0     44 22 06 F6 | 	mov	local03, #68
060f4     0F 27 02 F6 | 	mov	local05, local01
060f8     10 29 02 F6 | 	mov	local06, local02
060fc     11 2B 02 F6 | 	mov	local07, local03
06100     F2 2C 02 FB | 	rdlong	local08, objptr
06104     16 2F 02 F6 | 	mov	local09, local08
06108     01 2E 66 F0 | 	shl	local09, #1
0610c     16 2F 02 F1 | 	add	local09, local08
06110     02 2E 66 F0 | 	shl	local09, #2
06114     03 00 00 FF 
06118     00 E4 85 F1 | 	sub	objptr, ##1536
0611c     F2 2E 02 F1 | 	add	local09, objptr
06120     17 27 62 FC | 	wrlong	local05, local09
06124     03 00 00 FF 
06128     00 E4 05 F1 | 	add	objptr, ##1536
0612c     F2 32 02 FB | 	rdlong	local11, objptr
06130     19 31 02 F6 | 	mov	local10, local11
06134     01 30 66 F0 | 	shl	local10, #1
06138     19 31 02 F1 | 	add	local10, local11
0613c     02 30 66 F0 | 	shl	local10, #2
06140     03 00 00 FF 
06144     00 E4 85 F1 | 	sub	objptr, ##1536
06148     F2 30 02 F1 | 	add	local10, objptr
0614c     04 30 06 F1 | 	add	local10, #4
06150     18 29 62 FC | 	wrlong	local06, local10
06154     03 00 00 FF 
06158     00 E4 05 F1 | 	add	objptr, ##1536
0615c     F2 30 02 FB | 	rdlong	local10, objptr
06160     18 33 02 F6 | 	mov	local11, local10
06164     01 32 66 F0 | 	shl	local11, #1
06168     18 33 02 F1 | 	add	local11, local10
0616c     02 32 66 F0 | 	shl	local11, #2
06170     03 00 00 FF 
06174     00 E4 85 F1 | 	sub	objptr, ##1536
06178     F2 32 02 F1 | 	add	local11, objptr
0617c     08 32 06 F1 | 	add	local11, #8
06180     19 2B 62 FC | 	wrlong	local07, local11
06184     03 00 00 FF 
06188     00 E4 05 F1 | 	add	objptr, ##1536
0618c     F2 26 02 FB | 	rdlong	local05, objptr
06190     01 26 06 F1 | 	add	local05, #1
06194     F2 26 62 FC | 	wrlong	local05, objptr
06198     69 00 00 FF 
0619c     50 E4 85 F1 | 	sub	objptr, ##53840
061a0     00 FA 05 F6 | 	mov	result1, #0
061a4     20 05 90 FD | 	jmp	#LR__0577
061a8                 | LR__0570
061a8                 | ' do
061a8                 | LR__0571
061a8     68 1B B0 FD | 	call	#_expr
061ac                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
061ac                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
061ac     56 00 00 FF 
061b0     18 E4 05 F1 | 	add	objptr, ##44056
061b4     F2 24 02 FB | 	rdlong	local04, objptr
061b8     03 24 66 F0 | 	shl	local04, #3
061bc     02 00 00 FF 
061c0     38 E4 85 F1 | 	sub	objptr, ##1080
061c4     F2 24 02 F1 | 	add	local04, objptr
061c8     04 24 06 F1 | 	add	local04, #4
061cc     12 2D 02 FB | 	rdlong	local08, local04
061d0     11 2C 0E F2 | 	cmp	local08, #17 wz
061d4     53 00 00 FF 
061d8     E0 E5 85 F1 | 	sub	objptr, ##42976
061dc     60 01 90 5D |  if_ne	jmp	#LR__0572
061e0     21 22 06 F6 | 	mov	local03, #33
061e4     0F 27 02 F6 | 	mov	local05, local01
061e8     10 29 02 F6 | 	mov	local06, local02
061ec     11 2B 02 F6 | 	mov	local07, local03
061f0     69 00 00 FF 
061f4     50 E4 05 F1 | 	add	objptr, ##53840
061f8     F2 2C 02 FB | 	rdlong	local08, objptr
061fc     16 2F 02 F6 | 	mov	local09, local08
06200     01 2E 66 F0 | 	shl	local09, #1
06204     16 2F 02 F1 | 	add	local09, local08
06208     02 2E 66 F0 | 	shl	local09, #2
0620c     03 00 00 FF 
06210     00 E4 85 F1 | 	sub	objptr, ##1536
06214     F2 2E 02 F1 | 	add	local09, objptr
06218     17 27 62 FC | 	wrlong	local05, local09
0621c     03 00 00 FF 
06220     00 E4 05 F1 | 	add	objptr, ##1536
06224     F2 32 02 FB | 	rdlong	local11, objptr
06228     19 31 02 F6 | 	mov	local10, local11
0622c     01 30 66 F0 | 	shl	local10, #1
06230     19 31 02 F1 | 	add	local10, local11
06234     02 30 66 F0 | 	shl	local10, #2
06238     03 00 00 FF 
0623c     00 E4 85 F1 | 	sub	objptr, ##1536
06240     F2 30 02 F1 | 	add	local10, objptr
06244     04 30 06 F1 | 	add	local10, #4
06248     18 29 62 FC | 	wrlong	local06, local10
0624c     03 00 00 FF 
06250     00 E4 05 F1 | 	add	objptr, ##1536
06254     F2 26 02 FB | 	rdlong	local05, objptr
06258     13 33 02 F6 | 	mov	local11, local05
0625c     01 32 66 F0 | 	shl	local11, #1
06260     13 33 02 F1 | 	add	local11, local05
06264     02 32 66 F0 | 	shl	local11, #2
06268     03 00 00 FF 
0626c     00 E4 85 F1 | 	sub	objptr, ##1536
06270     F2 32 02 F1 | 	add	local11, objptr
06274     08 32 06 F1 | 	add	local11, #8
06278     19 2B 62 FC | 	wrlong	local07, local11
0627c     03 00 00 FF 
06280     00 E4 05 F1 | 	add	objptr, ##1536
06284     F2 26 02 FB | 	rdlong	local05, objptr
06288     01 26 06 F1 | 	add	local05, #1
0628c     F2 26 62 FC | 	wrlong	local05, objptr
06290     44 22 06 F6 | 	mov	local03, #68
06294     0F 27 02 F6 | 	mov	local05, local01
06298     10 29 02 F6 | 	mov	local06, local02
0629c     11 2B 02 F6 | 	mov	local07, local03
062a0     F2 2C 02 FB | 	rdlong	local08, objptr
062a4     16 2F 02 F6 | 	mov	local09, local08
062a8     01 2E 66 F0 | 	shl	local09, #1
062ac     16 2F 02 F1 | 	add	local09, local08
062b0     02 2E 66 F0 | 	shl	local09, #2
062b4     03 00 00 FF 
062b8     00 E4 85 F1 | 	sub	objptr, ##1536
062bc     F2 2E 02 F1 | 	add	local09, objptr
062c0     17 27 62 FC | 	wrlong	local05, local09
062c4     03 00 00 FF 
062c8     00 E4 05 F1 | 	add	objptr, ##1536
062cc     F2 32 02 FB | 	rdlong	local11, objptr
062d0     19 31 02 F6 | 	mov	local10, local11
062d4     01 30 66 F0 | 	shl	local10, #1
062d8     19 31 02 F1 | 	add	local10, local11
062dc     02 30 66 F0 | 	shl	local10, #2
062e0     03 00 00 FF 
062e4     00 E4 85 F1 | 	sub	objptr, ##1536
062e8     F2 30 02 F1 | 	add	local10, objptr
062ec     04 30 06 F1 | 	add	local10, #4
062f0     18 29 62 FC | 	wrlong	local06, local10
062f4     03 00 00 FF 
062f8     00 E4 05 F1 | 	add	objptr, ##1536
062fc     F2 30 02 FB | 	rdlong	local10, objptr
06300     18 33 02 F6 | 	mov	local11, local10
06304     01 32 66 F0 | 	shl	local11, #1
06308     18 33 02 F1 | 	add	local11, local10
0630c     02 32 66 F0 | 	shl	local11, #2
06310     03 00 00 FF 
06314     00 E4 85 F1 | 	sub	objptr, ##1536
06318     F2 32 02 F1 | 	add	local11, objptr
0631c     08 32 06 F1 | 	add	local11, #8
06320     19 2B 62 FC | 	wrlong	local07, local11
06324     03 00 00 FF 
06328     00 E4 05 F1 | 	add	objptr, ##1536
0632c     F2 26 02 FB | 	rdlong	local05, objptr
06330     01 26 06 F1 | 	add	local05, #1
06334     F2 26 62 FC | 	wrlong	local05, objptr
06338     69 00 00 FF 
0633c     50 E4 85 F1 | 	sub	objptr, ##53840
06340                 | LR__0572
06340                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
06340     56 00 00 FF 
06344     18 E4 05 F1 | 	add	objptr, ##44056
06348     F2 24 02 FB | 	rdlong	local04, objptr
0634c     03 24 66 F0 | 	shl	local04, #3
06350     02 00 00 FF 
06354     38 E4 85 F1 | 	sub	objptr, ##1080
06358     F2 24 02 F1 | 	add	local04, objptr
0635c     04 24 06 F1 | 	add	local04, #4
06360     12 2D 02 FB | 	rdlong	local08, local04
06364     12 2C 0E F2 | 	cmp	local08, #18 wz
06368     53 00 00 FF 
0636c     E0 E5 85 F1 | 	sub	objptr, ##42976
06370     60 01 90 5D |  if_ne	jmp	#LR__0573
06374     22 22 06 F6 | 	mov	local03, #34
06378     0F 27 02 F6 | 	mov	local05, local01
0637c     10 29 02 F6 | 	mov	local06, local02
06380     11 2B 02 F6 | 	mov	local07, local03
06384     69 00 00 FF 
06388     50 E4 05 F1 | 	add	objptr, ##53840
0638c     F2 2C 02 FB | 	rdlong	local08, objptr
06390     16 2F 02 F6 | 	mov	local09, local08
06394     01 2E 66 F0 | 	shl	local09, #1
06398     16 2F 02 F1 | 	add	local09, local08
0639c     02 2E 66 F0 | 	shl	local09, #2
063a0     03 00 00 FF 
063a4     00 E4 85 F1 | 	sub	objptr, ##1536
063a8     F2 2E 02 F1 | 	add	local09, objptr
063ac     17 27 62 FC | 	wrlong	local05, local09
063b0     03 00 00 FF 
063b4     00 E4 05 F1 | 	add	objptr, ##1536
063b8     F2 32 02 FB | 	rdlong	local11, objptr
063bc     19 31 02 F6 | 	mov	local10, local11
063c0     01 30 66 F0 | 	shl	local10, #1
063c4     19 31 02 F1 | 	add	local10, local11
063c8     02 30 66 F0 | 	shl	local10, #2
063cc     03 00 00 FF 
063d0     00 E4 85 F1 | 	sub	objptr, ##1536
063d4     F2 30 02 F1 | 	add	local10, objptr
063d8     04 30 06 F1 | 	add	local10, #4
063dc     18 29 62 FC | 	wrlong	local06, local10
063e0     03 00 00 FF 
063e4     00 E4 05 F1 | 	add	objptr, ##1536
063e8     F2 26 02 FB | 	rdlong	local05, objptr
063ec     13 33 02 F6 | 	mov	local11, local05
063f0     01 32 66 F0 | 	shl	local11, #1
063f4     13 33 02 F1 | 	add	local11, local05
063f8     02 32 66 F0 | 	shl	local11, #2
063fc     03 00 00 FF 
06400     00 E4 85 F1 | 	sub	objptr, ##1536
06404     F2 32 02 F1 | 	add	local11, objptr
06408     08 32 06 F1 | 	add	local11, #8
0640c     19 2B 62 FC | 	wrlong	local07, local11
06410     03 00 00 FF 
06414     00 E4 05 F1 | 	add	objptr, ##1536
06418     F2 26 02 FB | 	rdlong	local05, objptr
0641c     01 26 06 F1 | 	add	local05, #1
06420     F2 26 62 FC | 	wrlong	local05, objptr
06424     44 22 06 F6 | 	mov	local03, #68
06428     0F 27 02 F6 | 	mov	local05, local01
0642c     10 29 02 F6 | 	mov	local06, local02
06430     11 2B 02 F6 | 	mov	local07, local03
06434     F2 2C 02 FB | 	rdlong	local08, objptr
06438     16 2F 02 F6 | 	mov	local09, local08
0643c     01 2E 66 F0 | 	shl	local09, #1
06440     16 2F 02 F1 | 	add	local09, local08
06444     02 2E 66 F0 | 	shl	local09, #2
06448     03 00 00 FF 
0644c     00 E4 85 F1 | 	sub	objptr, ##1536
06450     F2 2E 02 F1 | 	add	local09, objptr
06454     17 27 62 FC | 	wrlong	local05, local09
06458     03 00 00 FF 
0645c     00 E4 05 F1 | 	add	objptr, ##1536
06460     F2 32 02 FB | 	rdlong	local11, objptr
06464     19 31 02 F6 | 	mov	local10, local11
06468     01 30 66 F0 | 	shl	local10, #1
0646c     19 31 02 F1 | 	add	local10, local11
06470     02 30 66 F0 | 	shl	local10, #2
06474     03 00 00 FF 
06478     00 E4 85 F1 | 	sub	objptr, ##1536
0647c     F2 30 02 F1 | 	add	local10, objptr
06480     04 30 06 F1 | 	add	local10, #4
06484     18 29 62 FC | 	wrlong	local06, local10
06488     03 00 00 FF 
0648c     00 E4 05 F1 | 	add	objptr, ##1536
06490     F2 30 02 FB | 	rdlong	local10, objptr
06494     18 33 02 F6 | 	mov	local11, local10
06498     01 32 66 F0 | 	shl	local11, #1
0649c     18 33 02 F1 | 	add	local11, local10
064a0     02 32 66 F0 | 	shl	local11, #2
064a4     03 00 00 FF 
064a8     00 E4 85 F1 | 	sub	objptr, ##1536
064ac     F2 32 02 F1 | 	add	local11, objptr
064b0     08 32 06 F1 | 	add	local11, #8
064b4     19 2B 62 FC | 	wrlong	local07, local11
064b8     03 00 00 FF 
064bc     00 E4 05 F1 | 	add	objptr, ##1536
064c0     F2 26 02 FB | 	rdlong	local05, objptr
064c4     01 26 06 F1 | 	add	local05, #1
064c8     F2 26 62 FC | 	wrlong	local05, objptr
064cc     69 00 00 FF 
064d0     50 E4 85 F1 | 	sub	objptr, ##53840
064d4                 | LR__0573
064d4                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
064d4     56 00 00 FF 
064d8     18 E4 05 F1 | 	add	objptr, ##44056
064dc     F2 24 02 FB | 	rdlong	local04, objptr
064e0     03 24 66 F0 | 	shl	local04, #3
064e4     02 00 00 FF 
064e8     38 E4 85 F1 | 	sub	objptr, ##1080
064ec     F2 24 02 F1 | 	add	local04, objptr
064f0     04 24 06 F1 | 	add	local04, #4
064f4     12 2D 02 FB | 	rdlong	local08, local04
064f8     FE 2D 0E F2 | 	cmp	local08, #510 wz
064fc     53 00 00 FF 
06500     E0 E5 85 F1 | 	sub	objptr, ##42976
06504     B8 00 90 5D |  if_ne	jmp	#LR__0574
06508     44 22 06 F6 | 	mov	local03, #68
0650c     0F 27 02 F6 | 	mov	local05, local01
06510     10 29 02 F6 | 	mov	local06, local02
06514     11 2B 02 F6 | 	mov	local07, local03
06518     69 00 00 FF 
0651c     50 E4 05 F1 | 	add	objptr, ##53840
06520     F2 2C 02 FB | 	rdlong	local08, objptr
06524     16 2F 02 F6 | 	mov	local09, local08
06528     01 2E 66 F0 | 	shl	local09, #1
0652c     16 2F 02 F1 | 	add	local09, local08
06530     02 2E 66 F0 | 	shl	local09, #2
06534     03 00 00 FF 
06538     00 E4 85 F1 | 	sub	objptr, ##1536
0653c     F2 2E 02 F1 | 	add	local09, objptr
06540     17 27 62 FC | 	wrlong	local05, local09
06544     03 00 00 FF 
06548     00 E4 05 F1 | 	add	objptr, ##1536
0654c     F2 32 02 FB | 	rdlong	local11, objptr
06550     19 31 02 F6 | 	mov	local10, local11
06554     01 30 66 F0 | 	shl	local10, #1
06558     19 31 02 F1 | 	add	local10, local11
0655c     02 30 66 F0 | 	shl	local10, #2
06560     03 00 00 FF 
06564     00 E4 85 F1 | 	sub	objptr, ##1536
06568     F2 30 02 F1 | 	add	local10, objptr
0656c     04 30 06 F1 | 	add	local10, #4
06570     18 29 62 FC | 	wrlong	local06, local10
06574     03 00 00 FF 
06578     00 E4 05 F1 | 	add	objptr, ##1536
0657c     F2 30 02 FB | 	rdlong	local10, objptr
06580     18 33 02 F6 | 	mov	local11, local10
06584     01 32 66 F0 | 	shl	local11, #1
06588     18 33 02 F1 | 	add	local11, local10
0658c     02 32 66 F0 | 	shl	local11, #2
06590     03 00 00 FF 
06594     00 E4 85 F1 | 	sub	objptr, ##1536
06598     F2 32 02 F1 | 	add	local11, objptr
0659c     08 32 06 F1 | 	add	local11, #8
065a0     19 2B 62 FC | 	wrlong	local07, local11
065a4     03 00 00 FF 
065a8     00 E4 05 F1 | 	add	objptr, ##1536
065ac     F2 26 02 FB | 	rdlong	local05, objptr
065b0     01 26 06 F1 | 	add	local05, #1
065b4     F2 26 62 FC | 	wrlong	local05, objptr
065b8     69 00 00 FF 
065bc     50 E4 85 F1 | 	sub	objptr, ##53840
065c0                 | LR__0574
065c0                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then  return 22
065c0     56 00 00 FF 
065c4     18 E4 05 F1 | 	add	objptr, ##44056
065c8     F2 24 02 FB | 	rdlong	local04, objptr
065cc     03 24 66 F0 | 	shl	local04, #3
065d0     02 00 00 FF 
065d4     38 E4 85 F1 | 	sub	objptr, ##1080
065d8     F2 24 02 F1 | 	add	local04, objptr
065dc     04 24 06 F1 | 	add	local04, #4
065e0     12 2D 02 FB | 	rdlong	local08, local04
065e4     11 2C 0E F2 | 	cmp	local08, #17 wz
065e8     53 00 00 FF 
065ec     E0 E5 85 F1 | 	sub	objptr, ##42976
065f0     6C 00 90 AD |  if_e	jmp	#LR__0575
065f4     56 00 00 FF 
065f8     18 E4 05 F1 | 	add	objptr, ##44056
065fc     F2 2C 02 FB | 	rdlong	local08, objptr
06600     03 2C 66 F0 | 	shl	local08, #3
06604     02 00 00 FF 
06608     38 E4 85 F1 | 	sub	objptr, ##1080
0660c     F2 2C 02 F1 | 	add	local08, objptr
06610     04 2C 06 F1 | 	add	local08, #4
06614     16 2D 02 FB | 	rdlong	local08, local08
06618     12 2C 0E F2 | 	cmp	local08, #18 wz
0661c     53 00 00 FF 
06620     E0 E5 85 F1 | 	sub	objptr, ##42976
06624     38 00 90 AD |  if_e	jmp	#LR__0575
06628     56 00 00 FF 
0662c     18 E4 05 F1 | 	add	objptr, ##44056
06630     F2 32 02 FB | 	rdlong	local11, objptr
06634     03 32 66 F0 | 	shl	local11, #3
06638     02 00 00 FF 
0663c     38 E4 85 F1 | 	sub	objptr, ##1080
06640     F2 32 02 F1 | 	add	local11, objptr
06644     04 32 06 F1 | 	add	local11, #4
06648     19 33 02 FB | 	rdlong	local11, local11
0664c     FE 33 0E F2 | 	cmp	local11, #510 wz
06650     53 00 00 FF 
06654     E0 E5 85 F1 | 	sub	objptr, ##42976
06658     16 FA 05 56 |  if_ne	mov	result1, #22
0665c     68 00 90 5D |  if_ne	jmp	#LR__0577
06660                 | LR__0575
06660     56 00 00 FF 
06664     18 E4 05 F1 | 	add	objptr, ##44056
06668     F2 24 02 FB | 	rdlong	local04, objptr
0666c     01 24 06 F1 | 	add	local04, #1
06670     F2 24 62 FC | 	wrlong	local04, objptr
06674     03 24 66 F0 | 	shl	local04, #3
06678     02 00 00 FF 
0667c     38 E4 85 F1 | 	sub	objptr, ##1080
06680     F2 24 02 F1 | 	add	local04, objptr
06684     04 24 06 F1 | 	add	local04, #4
06688     12 2D 02 FB | 	rdlong	local08, local04
0668c     FE 2D 0E F2 | 	cmp	local08, #510 wz
06690     53 00 00 FF 
06694     E0 E5 85 F1 | 	sub	objptr, ##42976
06698     28 00 90 AD |  if_e	jmp	#LR__0576
0669c     56 00 00 FF 
066a0     18 E4 05 F1 | 	add	objptr, ##44056
066a4     F2 32 02 FB | 	rdlong	local11, objptr
066a8     0E 00 00 FF 
066ac     1C E4 05 F1 | 	add	objptr, ##7196
066b0     F2 30 02 FB | 	rdlong	local10, objptr
066b4     64 00 00 FF 
066b8     34 E4 85 F1 | 	sub	objptr, ##51252
066bc     18 33 52 F2 | 	cmps	local11, local10 wc
066c0     E4 FA 9F CD |  if_b	jmp	#LR__0571
066c4                 | LR__0576
066c4                 | ' return 0
066c4     00 FA 05 F6 | 	mov	result1, #0
066c8                 | LR__0577
066c8     A7 F0 03 F6 | 	mov	ptra, fp
066cc     B2 00 A0 FD | 	call	#popregs_
066d0                 | _compile_print_ret
066d0     2D 00 64 FD | 	ret
066d4                 | 
066d4                 | ' 
066d4                 | ' function compile_if() as ulong  
066d4                 | _compile_if
066d4     05 4A 05 F6 | 	mov	COUNT_, #5
066d8     A8 00 A0 FD | 	call	#pushregs_
066dc                 | _compile_if_enter
066dc     28 F3 BF FD | 	call	#_compile_converttoint
066e0                 | ' return err
066e0     56 00 00 FF 
066e4     18 E4 05 F1 | 	add	objptr, ##44056
066e8     F2 FA 01 FB | 	rdlong	result1, objptr
066ec     01 FA 05 F1 | 	add	result1, #1
066f0     F2 FA 61 FC | 	wrlong	result1, objptr
066f4     58 22 06 F6 | 	mov	local03, #88
066f8     0F 25 02 F6 | 	mov	local04, local01
066fc     10 27 02 F6 | 	mov	local05, local02
06700     11 1F 02 F6 | 	mov	local01, local03
06704     13 00 00 FF 
06708     38 E4 05 F1 | 	add	objptr, ##9784
0670c     F2 12 02 FB | 	rdlong	arg01, objptr
06710     09 FB 01 F6 | 	mov	result1, arg01
06714     01 FA 65 F0 | 	shl	result1, #1
06718     09 FB 01 F1 | 	add	result1, arg01
0671c     02 FA 65 F0 | 	shl	result1, #2
06720     03 00 00 FF 
06724     00 E4 85 F1 | 	sub	objptr, ##1536
06728     F2 FA 01 F1 | 	add	result1, objptr
0672c     FD 24 62 FC | 	wrlong	local04, result1
06730     03 00 00 FF 
06734     00 E4 05 F1 | 	add	objptr, ##1536
06738     F2 12 02 FB | 	rdlong	arg01, objptr
0673c     09 25 02 F6 | 	mov	local04, arg01
06740     01 24 66 F0 | 	shl	local04, #1
06744     09 25 02 F1 | 	add	local04, arg01
06748     02 24 66 F0 | 	shl	local04, #2
0674c     03 00 00 FF 
06750     00 E4 85 F1 | 	sub	objptr, ##1536
06754     F2 24 02 F1 | 	add	local04, objptr
06758     04 24 06 F1 | 	add	local04, #4
0675c     12 27 62 FC | 	wrlong	local05, local04
06760     03 00 00 FF 
06764     00 E4 05 F1 | 	add	objptr, ##1536
06768     F2 24 02 FB | 	rdlong	local04, objptr
0676c     12 27 02 F6 | 	mov	local05, local04
06770     01 26 66 F0 | 	shl	local05, #1
06774     12 27 02 F1 | 	add	local05, local04
06778     02 26 66 F0 | 	shl	local05, #2
0677c     03 00 00 FF 
06780     00 E4 85 F1 | 	sub	objptr, ##1536
06784     F2 26 02 F1 | 	add	local05, objptr
06788     08 26 06 F1 | 	add	local05, #8
0678c     13 1F 62 FC | 	wrlong	local01, local05
06790     03 00 00 FF 
06794     00 E4 05 F1 | 	add	objptr, ##1536
06798     F2 24 02 FB | 	rdlong	local04, objptr
0679c     01 24 06 F1 | 	add	local04, #1
067a0     F2 24 62 FC | 	wrlong	local04, objptr
067a4                 | ' 
067a4                 | ' 'print "In compile_if"
067a4                 | ' compile_int_fun_1p()
067a4                 | ' cmd=lparts(ct).token : ct+=1
067a4                 | ' 'print cmd ' : if cmd<> token_then then print "Expected then" else print "Found then"
067a4                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
067a4                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
067a4     13 00 00 FF 
067a8     38 E4 85 F1 | 	sub	objptr, ##9784
067ac     F2 26 02 FB | 	rdlong	local05, objptr
067b0     01 26 06 F1 | 	add	local05, #1
067b4     03 26 66 F0 | 	shl	local05, #3
067b8     02 00 00 FF 
067bc     38 E4 85 F1 | 	sub	objptr, ##1080
067c0     F2 26 02 F1 | 	add	local05, objptr
067c4     13 13 02 FB | 	rdlong	arg01, local05
067c8     53 00 00 FF 
067cc     E0 E5 85 F1 | 	sub	objptr, ##42976
067d0                 | ' 
067d0                 | ' select case s
067d0     3D 01 00 FF 
067d4     53 14 06 F6 | 	mov	arg02, ##@LR__4391
067d8     A8 1D B1 FD | 	call	#__system___string_cmp
067dc     00 FA 0D F2 | 	cmp	result1, #0 wz
067e0     1B FA 05 A6 |  if_e	mov	result1, #27
067e4     00 FA 05 56 |  if_ne	mov	result1, #0
067e8     00 FA 0D F2 | 	cmp	result1, #0 wz
067ec     0C 00 90 AD |  if_e	jmp	#LR__0580
067f0     05 12 06 F6 | 	mov	arg01, #5
067f4     20 EC BF FD | 	call	#_compile_immediate_assign
067f8     08 00 90 FD | 	jmp	#LR__0581
067fc                 | LR__0580
067fc     05 12 06 F6 | 	mov	arg01, #5
06800     8C E4 BF FD | 	call	#_compile_immediate
06804                 | LR__0581
06804                 | ' 
06804                 | ' 
06804                 | ' return 0
06804     00 FA 05 F6 | 	mov	result1, #0
06808     A7 F0 03 F6 | 	mov	ptra, fp
0680c     B2 00 A0 FD | 	call	#popregs_
06810                 | _compile_if_ret
06810     2D 00 64 FD | 	ret
06814                 | 
06814                 | ' 
06814                 | ' function compile_else() as ulong  
06814                 | _compile_else
06814     05 4A 05 F6 | 	mov	COUNT_, #5
06818     A8 00 A0 FD | 	call	#pushregs_
0681c                 | _compile_else_enter
0681c     5A 22 06 F6 | 	mov	local03, #90
06820     0F 25 02 F6 | 	mov	local04, local01
06824     10 27 02 F6 | 	mov	local05, local02
06828     11 1F 02 F6 | 	mov	local01, local03
0682c     69 00 00 FF 
06830     50 E4 05 F1 | 	add	objptr, ##53840
06834     F2 12 02 FB | 	rdlong	arg01, objptr
06838     09 FB 01 F6 | 	mov	result1, arg01
0683c     01 FA 65 F0 | 	shl	result1, #1
06840     09 FB 01 F1 | 	add	result1, arg01
06844     02 FA 65 F0 | 	shl	result1, #2
06848     03 00 00 FF 
0684c     00 E4 85 F1 | 	sub	objptr, ##1536
06850     F2 FA 01 F1 | 	add	result1, objptr
06854     FD 24 62 FC | 	wrlong	local04, result1
06858     03 00 00 FF 
0685c     00 E4 05 F1 | 	add	objptr, ##1536
06860     F2 FA 01 FB | 	rdlong	result1, objptr
06864     FD 24 02 F6 | 	mov	local04, result1
06868     01 24 66 F0 | 	shl	local04, #1
0686c     FD 24 02 F1 | 	add	local04, result1
06870     02 24 66 F0 | 	shl	local04, #2
06874     03 00 00 FF 
06878     00 E4 85 F1 | 	sub	objptr, ##1536
0687c     F2 24 02 F1 | 	add	local04, objptr
06880     04 24 06 F1 | 	add	local04, #4
06884     12 27 62 FC | 	wrlong	local05, local04
06888     03 00 00 FF 
0688c     00 E4 05 F1 | 	add	objptr, ##1536
06890     F2 24 02 FB | 	rdlong	local04, objptr
06894     12 27 02 F6 | 	mov	local05, local04
06898     01 26 66 F0 | 	shl	local05, #1
0689c     12 27 02 F1 | 	add	local05, local04
068a0     02 26 66 F0 | 	shl	local05, #2
068a4     03 00 00 FF 
068a8     00 E4 85 F1 | 	sub	objptr, ##1536
068ac     F2 26 02 F1 | 	add	local05, objptr
068b0     08 26 06 F1 | 	add	local05, #8
068b4     13 1F 62 FC | 	wrlong	local01, local05
068b8     03 00 00 FF 
068bc     00 E4 05 F1 | 	add	objptr, ##1536
068c0     F2 24 02 FB | 	rdlong	local04, objptr
068c4     01 24 06 F1 | 	add	local04, #1
068c8     F2 24 62 FC | 	wrlong	local04, objptr
068cc                 | ' 
068cc                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
068cc                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
068cc     13 00 00 FF 
068d0     38 E4 85 F1 | 	sub	objptr, ##9784
068d4     F2 26 02 FB | 	rdlong	local05, objptr
068d8     01 26 06 F1 | 	add	local05, #1
068dc     03 26 66 F0 | 	shl	local05, #3
068e0     02 00 00 FF 
068e4     38 E4 85 F1 | 	sub	objptr, ##1080
068e8     F2 26 02 F1 | 	add	local05, objptr
068ec     13 13 02 FB | 	rdlong	arg01, local05
068f0     53 00 00 FF 
068f4     E0 E5 85 F1 | 	sub	objptr, ##42976
068f8                 | ' 
068f8                 | ' select case s
068f8     3D 01 00 FF 
068fc     53 14 06 F6 | 	mov	arg02, ##@LR__4391
06900     80 1C B1 FD | 	call	#__system___string_cmp
06904     00 FA 0D F2 | 	cmp	result1, #0 wz
06908     1B FA 05 A6 |  if_e	mov	result1, #27
0690c     00 FA 05 56 |  if_ne	mov	result1, #0
06910     00 FA 0D F2 | 	cmp	result1, #0 wz
06914     0C 00 90 AD |  if_e	jmp	#LR__0590
06918     05 12 06 F6 | 	mov	arg01, #5
0691c     F8 EA BF FD | 	call	#_compile_immediate_assign
06920     08 00 90 FD | 	jmp	#LR__0591
06924                 | LR__0590
06924     05 12 06 F6 | 	mov	arg01, #5
06928     64 E3 BF FD | 	call	#_compile_immediate
0692c                 | LR__0591
0692c                 | ' 
0692c                 | ' 
0692c                 | ' return 0
0692c     00 FA 05 F6 | 	mov	result1, #0
06930     A7 F0 03 F6 | 	mov	ptra, fp
06934     B2 00 A0 FD | 	call	#popregs_
06938                 | _compile_else_ret
06938     2D 00 64 FD | 	ret
0693c                 | 
0693c                 | ' 
0693c                 | ' 
0693c                 | ' function compile_dim() as ulong  
0693c                 | _compile_dim
0693c     11 4A 05 F6 | 	mov	COUNT_, #17
06940     A8 00 A0 FD | 	call	#pushregs_
06944     01 1E 06 F6 | 	mov	local01, #1
06948     01 20 06 F6 | 	mov	local02, #1
0694c     01 22 06 F6 | 	mov	local03, #1
06950                 | ' 
06950                 | ' dims(0)=1: dims(1)=1: dims(2)=1
06950                 | ' 
06950                 | ' if isname(lparts(ct).part$) then 
06950     56 00 00 FF 
06954     18 E4 05 F1 | 	add	objptr, ##44056
06958     F2 14 02 FB | 	rdlong	arg02, objptr
0695c     03 14 66 F0 | 	shl	arg02, #3
06960     02 00 00 FF 
06964     38 E4 85 F1 | 	sub	objptr, ##1080
06968     F2 14 02 F1 | 	add	arg02, objptr
0696c     0A 13 02 FB | 	rdlong	arg01, arg02
06970     53 00 00 FF 
06974     E0 E5 85 F1 | 	sub	objptr, ##42976
06978     F8 D2 BF FD | 	call	#_isname
0697c     00 FA 0D F2 | 	cmp	result1, #0 wz
06980     30 05 90 AD |  if_e	jmp	#LR__0624
06984     56 00 00 FF 
06988     18 E4 05 F1 | 	add	objptr, ##44056
0698c     F2 24 02 FB | 	rdlong	local04, objptr
06990     03 24 66 F0 | 	shl	local04, #3
06994     02 00 00 FF 
06998     38 E4 85 F1 | 	sub	objptr, ##1080
0699c     F2 24 02 F1 | 	add	local04, objptr
069a0     12 27 02 FB | 	rdlong	local05, local04
069a4     01 28 66 F6 | 	neg	local06, #1
069a8                 | '   varname2$=lparts(ct).part$ 
069a8                 | '   j=-1
069a8                 | '   if varnum>0 then
069a8     04 E4 85 F1 | 	sub	objptr, #4
069ac     F2 2A 02 FB | 	rdlong	local07, objptr
069b0     53 00 00 FF 
069b4     DC E5 85 F1 | 	sub	objptr, ##42972
069b8     01 2A 56 F2 | 	cmps	local07, #1 wc
069bc     58 00 90 CD |  if_b	jmp	#LR__0602
069c0                 | '  '   print "in dim, varnum=";varnum
069c0                 | '     for i=0 to varnum-1
069c0     00 2C 06 F6 | 	mov	local08, #0
069c4     53 00 00 FF 
069c8     DC E5 05 F1 | 	add	objptr, ##42972
069cc     F2 2E 02 FB | 	rdlong	local09, objptr
069d0     53 00 00 FF 
069d4     DC E5 85 F1 | 	sub	objptr, ##42972
069d8                 | LR__0600
069d8     17 2D 52 F2 | 	cmps	local08, local09 wc
069dc     38 00 90 3D |  if_ae	jmp	#LR__0601
069e0                 | '       if variables(i).name=varname2$ then j=i : exit
069e0     16 25 02 F6 | 	mov	local04, local08
069e4     04 24 66 F0 | 	shl	local04, #4
069e8     33 00 00 FF 
069ec     DC E5 05 F1 | 	add	objptr, ##26588
069f0     F2 24 02 F1 | 	add	local04, objptr
069f4     12 13 02 FB | 	rdlong	arg01, local04
069f8     13 15 02 F6 | 	mov	arg02, local05
069fc     33 00 00 FF 
06a00     DC E5 85 F1 | 	sub	objptr, ##26588
06a04     7C 1B B1 FD | 	call	#__system___string_cmp
06a08     00 FA 0D F2 | 	cmp	result1, #0 wz
06a0c     16 29 02 A6 |  if_e	mov	local06, local08
06a10     01 2C 06 51 |  if_ne	add	local08, #1
06a14     C0 FF 9F 5D |  if_ne	jmp	#LR__0600
06a18                 | LR__0601
06a18                 | LR__0602
06a18                 | '   if j<>-1 then printerror (42) : return 42
06a18     FF FF 7F FF 
06a1c     FF 29 0E F2 | 	cmp	local06, ##-1 wz
06a20     10 00 90 AD |  if_e	jmp	#LR__0603
06a24     2A 12 06 F6 | 	mov	arg01, #42
06a28     0C E6 B0 FD | 	call	#_printerror
06a2c     2A FA 05 F6 | 	mov	result1, #42
06a30     D8 05 90 FD | 	jmp	#LR__0626
06a34                 | LR__0603
06a34                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then printerror(43) : return 43
06a34     56 00 00 FF 
06a38     18 E4 05 F1 | 	add	objptr, ##44056
06a3c     F2 14 02 FB | 	rdlong	arg02, objptr
06a40     01 14 06 F1 | 	add	arg02, #1
06a44     03 14 66 F0 | 	shl	arg02, #3
06a48     02 00 00 FF 
06a4c     38 E4 85 F1 | 	sub	objptr, ##1080
06a50     F2 14 02 F1 | 	add	arg02, objptr
06a54     0A 13 02 FB | 	rdlong	arg01, arg02
06a58     3E 01 00 FF 
06a5c     AC 14 06 F6 | 	mov	arg02, ##@LR__4535
06a60     53 00 00 FF 
06a64     E0 E5 85 F1 | 	sub	objptr, ##42976
06a68     18 1B B1 FD | 	call	#__system___string_cmp
06a6c     00 FA 0D F2 | 	cmp	result1, #0 wz
06a70     50 00 90 AD |  if_e	jmp	#LR__0604
06a74     56 00 00 FF 
06a78     18 E4 05 F1 | 	add	objptr, ##44056
06a7c     F2 2E 02 FB | 	rdlong	local09, objptr
06a80     01 2E 06 F1 | 	add	local09, #1
06a84     03 2E 66 F0 | 	shl	local09, #3
06a88     02 00 00 FF 
06a8c     38 E4 85 F1 | 	sub	objptr, ##1080
06a90     F2 2E 02 F1 | 	add	local09, objptr
06a94     17 13 02 FB | 	rdlong	arg01, local09
06a98     3E 01 00 FF 
06a9c     AE 14 06 F6 | 	mov	arg02, ##@LR__4536
06aa0     53 00 00 FF 
06aa4     E0 E5 85 F1 | 	sub	objptr, ##42976
06aa8     D8 1A B1 FD | 	call	#__system___string_cmp
06aac     00 FA 0D F2 | 	cmp	result1, #0 wz
06ab0     10 00 90 AD |  if_e	jmp	#LR__0604
06ab4     2B 12 06 F6 | 	mov	arg01, #43
06ab8     7C E5 B0 FD | 	call	#_printerror
06abc     2B FA 05 F6 | 	mov	result1, #43
06ac0     48 05 90 FD | 	jmp	#LR__0626
06ac4                 | LR__0604
06ac4                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350
06ac4     56 00 00 FF 
06ac8     18 E4 05 F1 | 	add	objptr, ##44056
06acc     F2 14 02 FB | 	rdlong	arg02, objptr
06ad0     01 14 06 F1 | 	add	arg02, #1
06ad4     03 14 66 F0 | 	shl	arg02, #3
06ad8     02 00 00 FF 
06adc     38 E4 85 F1 | 	sub	objptr, ##1080
06ae0     F2 14 02 F1 | 	add	arg02, objptr
06ae4     0A 13 02 FB | 	rdlong	arg01, arg02
06ae8     3E 01 00 FF 
06aec     B1 14 06 F6 | 	mov	arg02, ##@LR__4537
06af0     53 00 00 FF 
06af4     E0 E5 85 F1 | 	sub	objptr, ##42976
06af8     88 1A B1 FD | 	call	#__system___string_cmp
06afc     00 FA 0D F2 | 	cmp	result1, #0 wz
06b00     56 00 00 AF 
06b04     18 E4 05 A1 |  if_e	add	objptr, ##44056
06b08     F2 30 02 AB |  if_e	rdlong	local10, objptr
06b0c     56 00 00 AF 
06b10     18 E4 85 A1 |  if_e	sub	objptr, ##44056
06b14     01 30 06 A1 |  if_e	add	local10, #1
06b18     7C 01 90 AD |  if_e	jmp	#LR__0610
06b1c     56 00 00 FF 
06b20     18 E4 05 F1 | 	add	objptr, ##44056
06b24     F2 30 02 FB | 	rdlong	local10, objptr
06b28     56 00 00 FF 
06b2c     18 E4 85 F1 | 	sub	objptr, ##44056
06b30     02 30 06 F1 | 	add	local10, #2
06b34     00 32 06 F6 | 	mov	local11, #0
06b38                 | '   l=ct+2 : m=0 : do
06b38                 | LR__0605
06b38                 | '    ' print "in dim, lparts: ";lparts(l).part$, isdec(lparts(l).part$)
06b38                 | '     if isdec(lparts(l).part$) then 
06b38     18 25 02 F6 | 	mov	local04, local10
06b3c     03 24 66 F0 | 	shl	local04, #3
06b40     53 00 00 FF 
06b44     E0 E5 05 F1 | 	add	objptr, ##42976
06b48     F2 24 02 F1 | 	add	local04, objptr
06b4c     12 13 02 FB | 	rdlong	arg01, local04
06b50     53 00 00 FF 
06b54     E0 E5 85 F1 | 	sub	objptr, ##42976
06b58     BC D7 BF FD | 	call	#_isdec
06b5c     00 FA 0D F2 | 	cmp	result1, #0 wz
06b60     44 00 90 AD |  if_e	jmp	#LR__0606
06b64     19 35 02 F6 | 	mov	local12, local11
06b68     0F 35 06 F1 | 	add	local12, #local01
06b6c     18 2F 02 F6 | 	mov	local09, local10
06b70     03 2E 66 F0 | 	shl	local09, #3
06b74     53 00 00 FF 
06b78     E0 E5 05 F1 | 	add	objptr, ##42976
06b7c     F2 2E 02 F1 | 	add	local09, objptr
06b80     17 13 02 FB | 	rdlong	arg01, local09
06b84     00 14 06 F6 | 	mov	arg02, #0
06b88     53 00 00 FF 
06b8c     E0 E5 85 F1 | 	sub	objptr, ##42976
06b90     24 4A B1 FD | 	call	#__system____builtin_atoi
06b94     FD 36 02 F6 | 	mov	local13, result1
06b98                 | 	'.live	local13
06b98                 | 	'.live	local12
06b98     00 34 8E F9 | 	altd	local12, #0
06b9c     1B 35 02 F6 | 	mov	local12, local13
06ba0     01 32 06 F1 | 	add	local11, #1
06ba4     10 00 90 FD | 	jmp	#LR__0607
06ba8                 | LR__0606
06ba8     11 12 06 F6 | 	mov	arg01, #17
06bac     88 E4 B0 FD | 	call	#_printerror
06bb0                 | '       printerror (17)  : return(17)
06bb0     11 FA 05 F6 | 	mov	result1, #17
06bb4     54 04 90 FD | 	jmp	#LR__0626
06bb8                 | LR__0607
06bb8                 | '     if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then printerror (44)  : return(44)
06bb8     18 25 02 F6 | 	mov	local04, local10
06bbc     01 24 06 F1 | 	add	local04, #1
06bc0     03 24 66 F0 | 	shl	local04, #3
06bc4     53 00 00 FF 
06bc8     E0 E5 05 F1 | 	add	objptr, ##42976
06bcc     F2 24 02 F1 | 	add	local04, objptr
06bd0     12 13 02 FB | 	rdlong	arg01, local04
06bd4     3E 01 00 FF 
06bd8     B4 14 06 F6 | 	mov	arg02, ##@LR__4538
06bdc     53 00 00 FF 
06be0     E0 E5 85 F1 | 	sub	objptr, ##42976
06be4     9C 19 B1 FD | 	call	#__system___string_cmp
06be8     00 FA 0D F2 | 	cmp	result1, #0 wz
06bec     48 00 90 AD |  if_e	jmp	#LR__0608
06bf0     18 37 02 F6 | 	mov	local13, local10
06bf4     01 36 06 F1 | 	add	local13, #1
06bf8     03 36 66 F0 | 	shl	local13, #3
06bfc     53 00 00 FF 
06c00     E0 E5 05 F1 | 	add	objptr, ##42976
06c04     F2 36 02 F1 | 	add	local13, objptr
06c08     1B 13 02 FB | 	rdlong	arg01, local13
06c0c     3E 01 00 FF 
06c10     B6 14 06 F6 | 	mov	arg02, ##@LR__4539
06c14     53 00 00 FF 
06c18     E0 E5 85 F1 | 	sub	objptr, ##42976
06c1c     64 19 B1 FD | 	call	#__system___string_cmp
06c20     00 FA 0D F2 | 	cmp	result1, #0 wz
06c24     10 00 90 AD |  if_e	jmp	#LR__0608
06c28     2C 12 06 F6 | 	mov	arg01, #44
06c2c     08 E4 B0 FD | 	call	#_printerror
06c30     2C FA 05 F6 | 	mov	result1, #44
06c34     D4 03 90 FD | 	jmp	#LR__0626
06c38                 | LR__0608
06c38     02 30 06 F1 | 	add	local10, #2
06c3c     18 25 02 F6 | 	mov	local04, local10
06c40     01 24 86 F1 | 	sub	local04, #1
06c44     03 24 66 F0 | 	shl	local04, #3
06c48     53 00 00 FF 
06c4c     E0 E5 05 F1 | 	add	objptr, ##42976
06c50     F2 24 02 F1 | 	add	local04, objptr
06c54     12 13 02 FB | 	rdlong	arg01, local04
06c58     3E 01 00 FF 
06c5c     B8 14 06 F6 | 	mov	arg02, ##@LR__4540
06c60     53 00 00 FF 
06c64     E0 E5 85 F1 | 	sub	objptr, ##42976
06c68     18 19 B1 FD | 	call	#__system___string_cmp
06c6c     00 FA 0D F2 | 	cmp	result1, #0 wz
06c70     03 32 56 52 |  if_ne	cmps	local11, #3 wc
06c74     C0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0605
06c78                 | '   if m>3 then printerror(45): return(45)
06c78     04 32 56 F2 | 	cmps	local11, #4 wc
06c7c     10 00 90 CD |  if_b	jmp	#LR__0609
06c80     2D 12 06 F6 | 	mov	arg01, #45
06c84     B0 E3 B0 FD | 	call	#_printerror
06c88     2D FA 05 F6 | 	mov	result1, #45
06c8c     7C 03 90 FD | 	jmp	#LR__0626
06c90                 | LR__0609
06c90     00 39 06 F6 | 	mov	local14, #256
06c94     0C 3A 06 F6 | 	mov	local15, #12
06c98                 | LR__0610
06c98                 | '  ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' print lparts(l-1).part$,lparts(l).part$, lparts(l+1).part$
06c98                 | '   arraytype=array_no_type : esize=12
06c98                 | ' 1350 
06c98                 | '   if lparts(l).part$="as" then
06c98     18 25 02 F6 | 	mov	local04, local10
06c9c     03 24 66 F0 | 	shl	local04, #3
06ca0     53 00 00 FF 
06ca4     E0 E5 05 F1 | 	add	objptr, ##42976
06ca8     F2 24 02 F1 | 	add	local04, objptr
06cac     12 13 02 FB | 	rdlong	arg01, local04
06cb0     3E 01 00 FF 
06cb4     BA 14 06 F6 | 	mov	arg02, ##@LR__4541
06cb8     53 00 00 FF 
06cbc     E0 E5 85 F1 | 	sub	objptr, ##42976
06cc0     C0 18 B1 FD | 	call	#__system___string_cmp
06cc4     00 FA 0D F2 | 	cmp	result1, #0 wz
06cc8     F8 01 90 5D |  if_ne	jmp	#LR__0625
06ccc                 | '     select case lparts(l+1).part$
06ccc     18 35 02 F6 | 	mov	local12, local10
06cd0     01 34 06 F1 | 	add	local12, #1
06cd4     03 34 66 F0 | 	shl	local12, #3
06cd8     53 00 00 FF 
06cdc     E0 E5 05 F1 | 	add	objptr, ##42976
06ce0     F2 34 02 F1 | 	add	local12, objptr
06ce4     1A 3D 02 FB | 	rdlong	local16, local12
06ce8     3E 01 00 FF 
06cec     BD 14 06 F6 | 	mov	arg02, ##@LR__4542
06cf0     1E 13 02 F6 | 	mov	arg01, local16
06cf4     53 00 00 FF 
06cf8     E0 E5 85 F1 | 	sub	objptr, ##42976
06cfc     84 18 B1 FD | 	call	#__system___string_cmp
06d00     00 FA 0D F2 | 	cmp	result1, #0 wz
06d04     0C 01 90 AD |  if_e	jmp	#LR__0611
06d08     3E 01 00 FF 
06d0c     C2 14 06 F6 | 	mov	arg02, ##@LR__4543
06d10     1E 13 02 F6 | 	mov	arg01, local16
06d14     6C 18 B1 FD | 	call	#__system___string_cmp
06d18     00 FA 0D F2 | 	cmp	result1, #0 wz
06d1c     00 01 90 AD |  if_e	jmp	#LR__0612
06d20     3E 01 00 FF 
06d24     C8 14 06 F6 | 	mov	arg02, ##@LR__4544
06d28     1E 13 02 F6 | 	mov	arg01, local16
06d2c     54 18 B1 FD | 	call	#__system___string_cmp
06d30     00 FA 0D F2 | 	cmp	result1, #0 wz
06d34     F4 00 90 AD |  if_e	jmp	#LR__0613
06d38     3E 01 00 FF 
06d3c     CE 14 06 F6 | 	mov	arg02, ##@LR__4545
06d40     1E 13 02 F6 | 	mov	arg01, local16
06d44     3C 18 B1 FD | 	call	#__system___string_cmp
06d48     00 FA 0D F2 | 	cmp	result1, #0 wz
06d4c     E8 00 90 AD |  if_e	jmp	#LR__0614
06d50     3E 01 00 FF 
06d54     D5 14 06 F6 | 	mov	arg02, ##@LR__4546
06d58     1E 13 02 F6 | 	mov	arg01, local16
06d5c     24 18 B1 FD | 	call	#__system___string_cmp
06d60     00 FA 0D F2 | 	cmp	result1, #0 wz
06d64     DC 00 90 AD |  if_e	jmp	#LR__0615
06d68     3E 01 00 FF 
06d6c     DA 14 06 F6 | 	mov	arg02, ##@LR__4547
06d70     1E 13 02 F6 | 	mov	arg01, local16
06d74     0C 18 B1 FD | 	call	#__system___string_cmp
06d78     00 FA 0D F2 | 	cmp	result1, #0 wz
06d7c     D0 00 90 AD |  if_e	jmp	#LR__0616
06d80     3E 01 00 FF 
06d84     E2 14 06 F6 | 	mov	arg02, ##@LR__4548
06d88     1E 13 02 F6 | 	mov	arg01, local16
06d8c     F4 17 B1 FD | 	call	#__system___string_cmp
06d90     00 FA 0D F2 | 	cmp	result1, #0 wz
06d94     C4 00 90 AD |  if_e	jmp	#LR__0617
06d98     3E 01 00 FF 
06d9c     E8 14 06 F6 | 	mov	arg02, ##@LR__4549
06da0     1E 13 02 F6 | 	mov	arg01, local16
06da4     DC 17 B1 FD | 	call	#__system___string_cmp
06da8     00 FA 0D F2 | 	cmp	result1, #0 wz
06dac     B8 00 90 AD |  if_e	jmp	#LR__0618
06db0     3E 01 00 FF 
06db4     EE 14 06 F6 | 	mov	arg02, ##@LR__4550
06db8     1E 13 02 F6 | 	mov	arg01, local16
06dbc     C4 17 B1 FD | 	call	#__system___string_cmp
06dc0     00 FA 0D F2 | 	cmp	result1, #0 wz
06dc4     AC 00 90 AD |  if_e	jmp	#LR__0619
06dc8     3E 01 00 FF 
06dcc     F5 14 06 F6 | 	mov	arg02, ##@LR__4551
06dd0     1E 13 02 F6 | 	mov	arg01, local16
06dd4     AC 17 B1 FD | 	call	#__system___string_cmp
06dd8     00 FA 0D F2 | 	cmp	result1, #0 wz
06ddc     A0 00 90 AD |  if_e	jmp	#LR__0620
06de0     3E 01 00 FF 
06de4     FC 14 06 F6 | 	mov	arg02, ##@LR__4552
06de8     1E 13 02 F6 | 	mov	arg01, local16
06dec     94 17 B1 FD | 	call	#__system___string_cmp
06df0     00 FA 0D F2 | 	cmp	result1, #0 wz
06df4     94 00 90 AD |  if_e	jmp	#LR__0621
06df8     3E 01 00 FF 
06dfc     03 15 06 F6 | 	mov	arg02, ##@LR__4553
06e00     1E 13 02 F6 | 	mov	arg01, local16
06e04     7C 17 B1 FD | 	call	#__system___string_cmp
06e08     00 FA 0D F2 | 	cmp	result1, #0 wz
06e0c     88 00 90 AD |  if_e	jmp	#LR__0622
06e10     90 00 90 FD | 	jmp	#LR__0623
06e14                 | LR__0611
06e14     01 39 06 F6 | 	mov	local14, #257
06e18     01 3A 06 F6 | 	mov	local15, #1
06e1c     A4 00 90 FD | 	jmp	#LR__0625
06e20                 | LR__0612
06e20     02 39 06 F6 | 	mov	local14, #258
06e24     01 3A 06 F6 | 	mov	local15, #1
06e28     98 00 90 FD | 	jmp	#LR__0625
06e2c                 | LR__0613
06e2c     03 39 06 F6 | 	mov	local14, #259
06e30     02 3A 06 F6 | 	mov	local15, #2
06e34     8C 00 90 FD | 	jmp	#LR__0625
06e38                 | LR__0614
06e38     04 39 06 F6 | 	mov	local14, #260
06e3c     02 3A 06 F6 | 	mov	local15, #2
06e40     80 00 90 FD | 	jmp	#LR__0625
06e44                 | LR__0615
06e44     05 39 06 F6 | 	mov	local14, #261
06e48     04 3A 06 F6 | 	mov	local15, #4
06e4c     74 00 90 FD | 	jmp	#LR__0625
06e50                 | LR__0616
06e50     05 39 06 F6 | 	mov	local14, #261
06e54     04 3A 06 F6 | 	mov	local15, #4
06e58     68 00 90 FD | 	jmp	#LR__0625
06e5c                 | LR__0617
06e5c     06 39 06 F6 | 	mov	local14, #262
06e60     04 3A 06 F6 | 	mov	local15, #4
06e64     5C 00 90 FD | 	jmp	#LR__0625
06e68                 | LR__0618
06e68     07 39 06 F6 | 	mov	local14, #263
06e6c     08 3A 06 F6 | 	mov	local15, #8
06e70     50 00 90 FD | 	jmp	#LR__0625
06e74                 | LR__0619
06e74     08 39 06 F6 | 	mov	local14, #264
06e78     08 3A 06 F6 | 	mov	local15, #8
06e7c     44 00 90 FD | 	jmp	#LR__0625
06e80                 | LR__0620
06e80     09 39 06 F6 | 	mov	local14, #265
06e84     04 3A 06 F6 | 	mov	local15, #4
06e88     38 00 90 FD | 	jmp	#LR__0625
06e8c                 | LR__0621
06e8c     0A 39 06 F6 | 	mov	local14, #266
06e90     08 3A 06 F6 | 	mov	local15, #8
06e94     2C 00 90 FD | 	jmp	#LR__0625
06e98                 | LR__0622
06e98     0B 39 06 F6 | 	mov	local14, #267
06e9c     04 3A 06 F6 | 	mov	local15, #4
06ea0     20 00 90 FD | 	jmp	#LR__0625
06ea4                 | LR__0623
06ea4     2F 12 06 F6 | 	mov	arg01, #47
06ea8     8C E1 B0 FD | 	call	#_printerror
06eac     2F FA 05 F6 | 	mov	result1, #47
06eb0     58 01 90 FD | 	jmp	#LR__0626
06eb4                 | LR__0624
06eb4     2E 12 06 F6 | 	mov	arg01, #46
06eb8     7C E1 B0 FD | 	call	#_printerror
06ebc                 | '   printerror(46): return 46
06ebc     2E FA 05 F6 | 	mov	result1, #46
06ec0     48 01 90 FD | 	jmp	#LR__0626
06ec4                 | LR__0625
06ec4     0F 3B 02 FD | 	qmul	local15, local01
06ec8     18 2A 62 FD | 	getqx	local07
06ecc     10 2B 02 FD | 	qmul	local07, local02
06ed0     18 3C 62 FD | 	getqx	local16
06ed4     11 3D 02 FD | 	qmul	local16, local03
06ed8     7A 00 00 FF 
06edc     4C E4 05 F1 | 	add	objptr, ##62540
06ee0     F2 3E 02 FB | 	rdlong	local17, objptr
06ee4     1C 15 02 F6 | 	mov	arg02, local14
06ee8     01 16 06 F6 | 	mov	arg03, #1
06eec     00 18 06 F6 | 	mov	arg04, #0
06ef0                 | '     return fill(addr, pattern, count, listPtr, 4)
06ef0     04 1A 06 F6 | 	mov	arg05, #4
06ef4     18 3C 62 FD | 	getqx	local16
06ef8     1E 3F 82 F1 | 	sub	local17, local16
06efc     10 3E 86 F1 | 	sub	local17, #16
06f00     F2 3E 62 FC | 	wrlong	local17, objptr
06f04     1F 13 02 F6 | 	mov	arg01, local17
06f08     6E 00 00 FF 
06f0c     8C E5 85 F1 | 	sub	objptr, ##56716
06f10     90 0C B1 FD | 	call	#_psram_spin2_fill
06f14     1F 13 02 F6 | 	mov	arg01, local17
06f18     02 12 06 F1 | 	add	arg01, #2
06f1c     1D 15 02 F6 | 	mov	arg02, local15
06f20     01 16 06 F6 | 	mov	arg03, #1
06f24     00 18 06 F6 | 	mov	arg04, #0
06f28                 | '     return fill(addr, pattern, count, listPtr, 1)
06f28     01 1A 06 F6 | 	mov	arg05, #1
06f2c     74 0C B1 FD | 	call	#_psram_spin2_fill
06f30     1F 13 02 F6 | 	mov	arg01, local17
06f34     04 12 06 F1 | 	add	arg01, #4
06f38     0F 15 02 F6 | 	mov	arg02, local01
06f3c     01 16 06 F6 | 	mov	arg03, #1
06f40     00 18 06 F6 | 	mov	arg04, #0
06f44                 | '     return fill(addr, pattern, count, listPtr, 4)
06f44     04 1A 06 F6 | 	mov	arg05, #4
06f48     58 0C B1 FD | 	call	#_psram_spin2_fill
06f4c     1F 13 02 F6 | 	mov	arg01, local17
06f50     08 12 06 F1 | 	add	arg01, #8
06f54     10 15 02 F6 | 	mov	arg02, local02
06f58     01 16 06 F6 | 	mov	arg03, #1
06f5c     00 18 06 F6 | 	mov	arg04, #0
06f60                 | '     return fill(addr, pattern, count, listPtr, 4)
06f60     04 1A 06 F6 | 	mov	arg05, #4
06f64     3C 0C B1 FD | 	call	#_psram_spin2_fill
06f68     1F 13 02 F6 | 	mov	arg01, local17
06f6c     0C 12 06 F1 | 	add	arg01, #12
06f70     11 15 02 F6 | 	mov	arg02, local03
06f74     01 16 06 F6 | 	mov	arg03, #1
06f78     00 18 06 F6 | 	mov	arg04, #0
06f7c                 | '     return fill(addr, pattern, count, listPtr, 4)
06f7c     04 1A 06 F6 | 	mov	arg05, #4
06f80     20 0C B1 FD | 	call	#_psram_spin2_fill
06f84     48 00 00 FF 
06f88     1C E5 05 F1 | 	add	objptr, ##37148
06f8c     F2 24 02 FB | 	rdlong	local04, objptr
06f90     04 24 66 F0 | 	shl	local04, #4
06f94     20 00 00 FF 
06f98     00 E4 85 F1 | 	sub	objptr, ##16384
06f9c     F2 24 02 F1 | 	add	local04, objptr
06fa0     12 27 62 FC | 	wrlong	local05, local04
06fa4     20 00 00 FF 
06fa8     00 E4 05 F1 | 	add	objptr, ##16384
06fac     F2 24 02 FB | 	rdlong	local04, objptr
06fb0     04 24 66 F0 | 	shl	local04, #4
06fb4     20 00 00 FF 
06fb8     00 E4 85 F1 | 	sub	objptr, ##16384
06fbc     F2 24 02 F1 | 	add	local04, objptr
06fc0     04 24 06 F1 | 	add	local04, #4
06fc4     12 3F 62 FC | 	wrlong	local17, local04
06fc8     20 00 00 FF 
06fcc     00 E4 05 F1 | 	add	objptr, ##16384
06fd0     F2 24 02 FB | 	rdlong	local04, objptr
06fd4     04 24 66 F0 | 	shl	local04, #4
06fd8     20 00 00 FF 
06fdc     00 E4 85 F1 | 	sub	objptr, ##16384
06fe0     F2 24 02 F1 | 	add	local04, objptr
06fe4     0C 24 06 F1 | 	add	local04, #12
06fe8     12 39 62 FC | 	wrlong	local14, local04
06fec     20 00 00 FF 
06ff0     00 E4 05 F1 | 	add	objptr, ##16384
06ff4     F2 2A 02 FB | 	rdlong	local07, objptr
06ff8     01 2A 06 F1 | 	add	local07, #1
06ffc     F2 2A 62 FC | 	wrlong	local07, objptr
07000     53 00 00 FF 
07004     DC E5 85 F1 | 	sub	objptr, ##42972
07008                 | ' 'print dims(0),dims(1),dims(2),arraytype
07008                 | ' 
07008                 | ' arraysize=esize*dims(0)*dims(1)*dims(2)
07008                 | ' arrayptr=memtop-arraysize-16
07008                 | ' memtop=arrayptr
07008                 | ' 
07008                 | ' pslpoke arrayptr,arraytype
07008                 | ' pspoke arrayptr+2,esize
07008                 | ' pslpoke arrayptr+4,dims(0)
07008                 | ' pslpoke arrayptr+8,dims(1)
07008                 | ' pslpoke arrayptr+12,dims(2)
07008                 | ' 
07008                 | ' variables(varnum).name=varname2$
07008                 | ' variables(varnum).value.uresult=arrayptr
07008                 | ' variables(varnum).vartype=arraytype
07008                 | ' varnum+=1
07008                 | ' 
07008                 | ' return 0
07008     00 FA 05 F6 | 	mov	result1, #0
0700c                 | LR__0626
0700c     A7 F0 03 F6 | 	mov	ptra, fp
07010     B2 00 A0 FD | 	call	#popregs_
07014                 | _compile_dim_ret
07014     2D 00 64 FD | 	ret
07018                 | 
07018                 | ' 
07018                 | ' 
07018                 | ' function compile_for() as ulong  
07018                 | _compile_for
07018     07 4A 05 F6 | 	mov	COUNT_, #7
0701c     A8 00 A0 FD | 	call	#pushregs_
07020                 | ' 
07020                 | ' 
07020                 | ' 
07020                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_error(32) : return 32
07020     56 00 00 FF 
07024     18 E4 05 F1 | 	add	objptr, ##44056
07028     F2 14 02 FB | 	rdlong	arg02, objptr
0702c     01 14 06 F1 | 	add	arg02, #1
07030     03 14 66 F0 | 	shl	arg02, #3
07034     02 00 00 FF 
07038     38 E4 85 F1 | 	sub	objptr, ##1080
0703c     F2 14 02 F1 | 	add	arg02, objptr
07040     0A 13 02 FB | 	rdlong	arg01, arg02
07044     53 00 00 FF 
07048     E0 E5 85 F1 | 	sub	objptr, ##42976
0704c                 | ' 
0704c                 | ' select case s
0704c     3D 01 00 FF 
07050     53 14 06 F6 | 	mov	arg02, ##@LR__4391
07054     2C 15 B1 FD | 	call	#__system___string_cmp
07058     00 FA 0D F2 | 	cmp	result1, #0 wz
0705c     1B FA 05 A6 |  if_e	mov	result1, #27
07060     00 FA 05 56 |  if_ne	mov	result1, #0
07064     00 FA 0D F2 | 	cmp	result1, #0 wz
07068     0C 00 90 AD |  if_e	jmp	#LR__0630
0706c     05 12 06 F6 | 	mov	arg01, #5
07070     A4 E3 BF FD | 	call	#_compile_immediate_assign
07074     10 00 90 FD | 	jmp	#LR__0631
07078                 | LR__0630
07078     20 12 06 F6 | 	mov	arg01, #32
0707c     14 E8 BF FD | 	call	#_compile_error
07080     20 FA 05 F6 | 	mov	result1, #32
07084     AC 02 90 FD | 	jmp	#LR__0636
07088                 | LR__0631
07088     69 00 00 FF 
0708c     50 E4 05 F1 | 	add	objptr, ##53840
07090     F2 12 02 FB | 	rdlong	arg01, objptr
07094     09 25 02 F6 | 	mov	local04, arg01
07098     01 24 86 F1 | 	sub	local04, #1
0709c     12 15 02 F6 | 	mov	arg02, local04
070a0     01 14 66 F0 | 	shl	arg02, #1
070a4     12 15 02 F1 | 	add	arg02, local04
070a8     02 14 66 F0 | 	shl	arg02, #2
070ac     03 00 00 FF 
070b0     00 E4 85 F1 | 	sub	objptr, ##1536
070b4     F2 14 02 F1 | 	add	arg02, objptr
070b8     0A 1F 02 FB | 	rdlong	local01, arg02
070bc     04 14 06 F1 | 	add	arg02, #4
070c0     0A 27 02 FB | 	rdlong	local05, arg02
070c4     01 12 86 F1 | 	sub	arg01, #1
070c8     09 29 02 F6 | 	mov	local06, arg01
070cc     01 28 66 F0 | 	shl	local06, #1
070d0     09 29 02 F1 | 	add	local06, arg01
070d4     02 28 66 F0 | 	shl	local06, #2
070d8     F2 28 02 F1 | 	add	local06, objptr
070dc     08 28 06 F1 | 	add	local06, #8
070e0     14 13 02 FB | 	rdlong	arg01, local06
070e4     13 21 02 F6 | 	mov	local02, local05
070e8     09 23 02 F6 | 	mov	local03, arg01
070ec                 | ' '' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
070ec                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then compile_error(34) : return 34
070ec     17 22 0E F2 | 	cmp	local03, #23 wz
070f0     66 00 00 FF 
070f4     50 E4 85 F1 | 	sub	objptr, ##52304
070f8     10 00 90 AD |  if_e	jmp	#LR__0632
070fc     22 12 06 F6 | 	mov	arg01, #34
07100     90 E7 BF FD | 	call	#_compile_error
07104     22 FA 05 F6 | 	mov	result1, #34
07108     28 02 90 FD | 	jmp	#LR__0636
0710c                 | LR__0632
0710c     0F 2B 02 F6 | 	mov	local07, local01
07110                 | ' varnum=t1.result.uresult
07110                 | ' if lparts(ct).part$<>"to" then  compile_error(33) : return 33
07110     56 00 00 FF 
07114     18 E4 05 F1 | 	add	objptr, ##44056
07118     F2 24 02 FB | 	rdlong	local04, objptr
0711c     03 24 66 F0 | 	shl	local04, #3
07120     02 00 00 FF 
07124     38 E4 85 F1 | 	sub	objptr, ##1080
07128     F2 24 02 F1 | 	add	local04, objptr
0712c     12 13 02 FB | 	rdlong	arg01, local04
07130     3E 01 00 FF 
07134     0A 15 06 F6 | 	mov	arg02, ##@LR__4554
07138     53 00 00 FF 
0713c     E0 E5 85 F1 | 	sub	objptr, ##42976
07140     40 14 B1 FD | 	call	#__system___string_cmp
07144     00 FA 0D F2 | 	cmp	result1, #0 wz
07148     10 00 90 AD |  if_e	jmp	#LR__0633
0714c     21 12 06 F6 | 	mov	arg01, #33
07150     40 E7 BF FD | 	call	#_compile_error
07154     21 FA 05 F6 | 	mov	result1, #33
07158     D8 01 90 FD | 	jmp	#LR__0636
0715c                 | LR__0633
0715c     56 00 00 FF 
07160     18 E4 05 F1 | 	add	objptr, ##44056
07164     F2 28 02 FB | 	rdlong	local06, objptr
07168     01 28 06 F1 | 	add	local06, #1
0716c     F2 28 62 FC | 	wrlong	local06, objptr
07170     56 00 00 FF 
07174     18 E4 85 F1 | 	sub	objptr, ##44056
07178     98 0B B0 FD | 	call	#_expr
0717c                 | ' ct+=1
0717c                 | ' expr()  ' there is "to" value pushed on the stack
0717c                 | ' if lparts(ct).part$="step" then 
0717c     56 00 00 FF 
07180     18 E4 05 F1 | 	add	objptr, ##44056
07184     F2 24 02 FB | 	rdlong	local04, objptr
07188     03 24 66 F0 | 	shl	local04, #3
0718c     02 00 00 FF 
07190     38 E4 85 F1 | 	sub	objptr, ##1080
07194     F2 24 02 F1 | 	add	local04, objptr
07198     12 13 02 FB | 	rdlong	arg01, local04
0719c     3E 01 00 FF 
071a0     0D 15 06 F6 | 	mov	arg02, ##@LR__4555
071a4     53 00 00 FF 
071a8     E0 E5 85 F1 | 	sub	objptr, ##42976
071ac     D4 13 B1 FD | 	call	#__system___string_cmp
071b0     00 FA 0D F2 | 	cmp	result1, #0 wz
071b4     24 00 90 5D |  if_ne	jmp	#LR__0634
071b8     56 00 00 FF 
071bc     18 E4 05 F1 | 	add	objptr, ##44056
071c0     F2 28 02 FB | 	rdlong	local06, objptr
071c4     01 28 06 F1 | 	add	local06, #1
071c8     F2 28 62 FC | 	wrlong	local06, objptr
071cc     56 00 00 FF 
071d0     18 E4 85 F1 | 	sub	objptr, ##44056
071d4     3C 0B B0 FD | 	call	#_expr
071d8     78 00 90 FD | 	jmp	#LR__0635
071dc                 | LR__0634
071dc     69 00 00 FF 
071e0     50 E4 05 F1 | 	add	objptr, ##53840
071e4     F2 28 02 FB | 	rdlong	local06, objptr
071e8     14 27 02 F6 | 	mov	local05, local06
071ec     01 26 66 F0 | 	shl	local05, #1
071f0     14 27 02 F1 | 	add	local05, local06
071f4     02 26 66 F0 | 	shl	local05, #2
071f8     03 00 00 FF 
071fc     00 E4 85 F1 | 	sub	objptr, ##1536
07200     F2 26 02 F1 | 	add	local05, objptr
07204     08 26 06 F1 | 	add	local05, #8
07208     13 39 68 FC | 	wrlong	#28, local05
0720c     03 00 00 FF 
07210     00 E4 05 F1 | 	add	objptr, ##1536
07214     F2 28 02 FB | 	rdlong	local06, objptr
07218     14 27 02 F6 | 	mov	local05, local06
0721c     01 26 66 F0 | 	shl	local05, #1
07220     14 27 02 F1 | 	add	local05, local06
07224     02 26 66 F0 | 	shl	local05, #2
07228     03 00 00 FF 
0722c     00 E4 85 F1 | 	sub	objptr, ##1536
07230     F2 26 02 F1 | 	add	local05, objptr
07234     13 03 68 FC | 	wrlong	#1, local05
07238     03 00 00 FF 
0723c     00 E4 05 F1 | 	add	objptr, ##1536
07240     F2 28 02 FB | 	rdlong	local06, objptr
07244     01 28 06 F1 | 	add	local06, #1
07248     F2 28 62 FC | 	wrlong	local06, objptr
0724c     69 00 00 FF 
07250     50 E4 85 F1 | 	sub	objptr, ##53840
07254                 | LR__0635
07254     69 00 00 FF 
07258     50 E4 05 F1 | 	add	objptr, ##53840
0725c     F2 28 02 FB | 	rdlong	local06, objptr
07260     14 27 02 F6 | 	mov	local05, local06
07264     01 26 66 F0 | 	shl	local05, #1
07268     14 27 02 F1 | 	add	local05, local06
0726c     02 26 66 F0 | 	shl	local05, #2
07270     03 00 00 FF 
07274     00 E4 85 F1 | 	sub	objptr, ##1536
07278     F2 26 02 F1 | 	add	local05, objptr
0727c     08 26 06 F1 | 	add	local05, #8
07280     13 39 68 FC | 	wrlong	#28, local05
07284     03 00 00 FF 
07288     00 E4 05 F1 | 	add	objptr, ##1536
0728c     F2 28 02 FB | 	rdlong	local06, objptr
07290     14 27 02 F6 | 	mov	local05, local06
07294     01 26 66 F0 | 	shl	local05, #1
07298     14 27 02 F1 | 	add	local05, local06
0729c     02 26 66 F0 | 	shl	local05, #2
072a0     03 00 00 FF 
072a4     00 E4 85 F1 | 	sub	objptr, ##1536
072a8     F2 26 02 F1 | 	add	local05, objptr
072ac     13 2B 62 FC | 	wrlong	local07, local05
072b0     03 00 00 FF 
072b4     00 E4 05 F1 | 	add	objptr, ##1536
072b8     F2 2A 02 FB | 	rdlong	local07, objptr
072bc     01 2A 06 F1 | 	add	local07, #1
072c0     F2 2A 62 FC | 	wrlong	local07, objptr
072c4     15 29 02 F6 | 	mov	local06, local07
072c8     01 28 66 F0 | 	shl	local06, #1
072cc     15 29 02 F1 | 	add	local06, local07
072d0     02 28 66 F0 | 	shl	local06, #2
072d4     03 00 00 FF 
072d8     00 E4 85 F1 | 	sub	objptr, ##1536
072dc     F2 28 02 F1 | 	add	local06, objptr
072e0     08 28 06 F1 | 	add	local06, #8
072e4     14 95 68 FC | 	wrlong	#74, local06
072e8     03 00 00 FF 
072ec     00 E4 05 F1 | 	add	objptr, ##1536
072f0     F2 2A 02 FB | 	rdlong	local07, objptr
072f4     15 29 02 F6 | 	mov	local06, local07
072f8     01 28 66 F0 | 	shl	local06, #1
072fc     15 29 02 F1 | 	add	local06, local07
07300     02 28 66 F0 | 	shl	local06, #2
07304     03 00 00 FF 
07308     00 E4 85 F1 | 	sub	objptr, ##1536
0730c     F2 28 02 F1 | 	add	local06, objptr
07310     14 01 68 FC | 	wrlong	#0, local06
07314     03 00 00 FF 
07318     00 E4 05 F1 | 	add	objptr, ##1536
0731c     F2 2A 02 FB | 	rdlong	local07, objptr
07320     01 2A 06 F1 | 	add	local07, #1
07324     F2 2A 62 FC | 	wrlong	local07, objptr
07328     69 00 00 FF 
0732c     50 E4 85 F1 | 	sub	objptr, ##53840
07330                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
07330                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
07330                 | ' 
07330                 | ' 
07330                 | ' return 0
07330     00 FA 05 F6 | 	mov	result1, #0
07334                 | LR__0636
07334     A7 F0 03 F6 | 	mov	ptra, fp
07338     B2 00 A0 FD | 	call	#popregs_
0733c                 | _compile_for_ret
0733c     2D 00 64 FD | 	ret
07340                 | 
07340                 | ' 
07340                 | ' 
07340                 | ' sub do_for()
07340                 | _do_for
07340     05 4A 05 F6 | 	mov	COUNT_, #5
07344     A8 00 A0 FD | 	call	#pushregs_
07348     78 00 00 FF 
0734c     AC E5 05 F1 | 	add	objptr, ##61868
07350     F2 24 02 FB | 	rdlong	local04, objptr
07354     01 24 06 F1 | 	add	local04, #1
07358     F2 24 62 FC | 	wrlong	local04, objptr
0735c     78 00 00 FF 
07360     AC E5 85 F1 | 	sub	objptr, ##61868
07364     5C 1E B0 FD | 	call	#_pop
07368     FD 1E 02 F6 | 	mov	local01, result1
0736c     FE 20 02 F6 | 	mov	local02, result2
07370     FF 22 02 F6 | 	mov	local03, result3
07374     78 00 00 FF 
07378     AC E5 05 F1 | 	add	objptr, ##61868
0737c     F2 24 02 FB | 	rdlong	local04, objptr
07380     12 27 02 F6 | 	mov	local05, local04
07384     02 26 66 F0 | 	shl	local05, #2
07388     12 27 02 F1 | 	add	local05, local04
0738c     02 26 66 F0 | 	shl	local05, #2
07390     07 00 00 FF 
07394     40 E5 85 F1 | 	sub	objptr, ##3904
07398     F2 26 02 F1 | 	add	local05, objptr
0739c     08 26 06 F1 | 	add	local05, #8
073a0     13 1F 62 FC | 	wrlong	local01, local05
073a4     71 00 00 FF 
073a8     6C E4 85 F1 | 	sub	objptr, ##57964
073ac     14 1E B0 FD | 	call	#_pop
073b0     FD 1E 02 F6 | 	mov	local01, result1
073b4     FE 20 02 F6 | 	mov	local02, result2
073b8     FF 22 02 F6 | 	mov	local03, result3
073bc     78 00 00 FF 
073c0     AC E5 05 F1 | 	add	objptr, ##61868
073c4     F2 24 02 FB | 	rdlong	local04, objptr
073c8     12 27 02 F6 | 	mov	local05, local04
073cc     02 26 66 F0 | 	shl	local05, #2
073d0     12 27 02 F1 | 	add	local05, local04
073d4     02 26 66 F0 | 	shl	local05, #2
073d8     07 00 00 FF 
073dc     40 E5 85 F1 | 	sub	objptr, ##3904
073e0     F2 26 02 F1 | 	add	local05, objptr
073e4     0C 26 06 F1 | 	add	local05, #12
073e8     13 1F 62 FC | 	wrlong	local01, local05
073ec     71 00 00 FF 
073f0     6C E4 85 F1 | 	sub	objptr, ##57964
073f4     CC 1D B0 FD | 	call	#_pop
073f8     FD 1E 02 F6 | 	mov	local01, result1
073fc     FE 20 02 F6 | 	mov	local02, result2
07400     FF 22 02 F6 | 	mov	local03, result3
07404     78 00 00 FF 
07408     AC E5 05 F1 | 	add	objptr, ##61868
0740c     F2 24 02 FB | 	rdlong	local04, objptr
07410     12 27 02 F6 | 	mov	local05, local04
07414     02 26 66 F0 | 	shl	local05, #2
07418     12 27 02 F1 | 	add	local05, local04
0741c     02 26 66 F0 | 	shl	local05, #2
07420     07 00 00 FF 
07424     40 E5 85 F1 | 	sub	objptr, ##3904
07428     F2 26 02 F1 | 	add	local05, objptr
0742c     10 26 06 F1 | 	add	local05, #16
07430     13 1F 62 FC | 	wrlong	local01, local05
07434                 | ' fortop+=1
07434                 | ' 'i=-1: do: i+=1 : loop until fortable(i).varnum= -1 orelse i>= maxfor
07434                 | ' 'if i> maxfor then printerror(36) : return
07434                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
07434                 | ' t1=pop() : fortable(fortop).stepval=t1.result.iresult
07434                 | ' t1=pop() : fortable(fortop).endval=t1.result.iresult
07434                 | ' if compiledline(lineptr_e).result_type=token_end then
07434     08 00 00 FF 
07438     18 E4 85 F1 | 	sub	objptr, ##4120
0743c     F2 1E 02 FB | 	rdlong	local01, objptr
07440     0F 27 02 F6 | 	mov	local05, local01
07444     01 26 66 F0 | 	shl	local05, #1
07448     0F 27 02 F1 | 	add	local05, local01
0744c     02 26 66 F0 | 	shl	local05, #2
07450     03 00 00 FF 
07454     04 E4 85 F1 | 	sub	objptr, ##1540
07458     F2 26 02 F1 | 	add	local05, objptr
0745c     08 26 06 F1 | 	add	local05, #8
07460     13 27 02 FB | 	rdlong	local05, local05
07464     FE 27 0E F2 | 	cmp	local05, #510 wz
07468     66 00 00 FF 
0746c     50 E4 85 F1 | 	sub	objptr, ##52304
07470     70 00 90 5D |  if_ne	jmp	#LR__0640
07474     78 00 00 FF 
07478     AC E5 05 F1 | 	add	objptr, ##61868
0747c     F2 1E 02 FB | 	rdlong	local01, objptr
07480     0F 27 02 F6 | 	mov	local05, local01
07484     02 26 66 F0 | 	shl	local05, #2
07488     0F 27 02 F1 | 	add	local05, local01
0748c     02 26 66 F0 | 	shl	local05, #2
07490     07 00 00 FF 
07494     40 E5 85 F1 | 	sub	objptr, ##3904
07498     F2 26 02 F1 | 	add	local05, objptr
0749c     07 00 00 FF 
074a0     18 E5 05 F1 | 	add	objptr, ##3864
074a4     F2 1E 02 FB | 	rdlong	local01, objptr
074a8     13 1F 62 FC | 	wrlong	local01, local05
074ac     28 E4 05 F1 | 	add	objptr, #40
074b0     F2 1E 02 FB | 	rdlong	local01, objptr
074b4     0F 27 02 F6 | 	mov	local05, local01
074b8     02 26 66 F0 | 	shl	local05, #2
074bc     0F 27 02 F1 | 	add	local05, local01
074c0     02 26 66 F0 | 	shl	local05, #2
074c4     07 00 00 FF 
074c8     40 E5 85 F1 | 	sub	objptr, ##3904
074cc     F2 26 02 F1 | 	add	local05, objptr
074d0     04 26 06 F1 | 	add	local05, #4
074d4     13 01 68 FC | 	wrlong	#0, local05
074d8     71 00 00 FF 
074dc     6C E4 85 F1 | 	sub	objptr, ##57964
074e0     7C 00 90 FD | 	jmp	#LR__0641
074e4                 | LR__0640
074e4     78 00 00 FF 
074e8     AC E5 05 F1 | 	add	objptr, ##61868
074ec     F2 1E 02 FB | 	rdlong	local01, objptr
074f0     0F 27 02 F6 | 	mov	local05, local01
074f4     02 26 66 F0 | 	shl	local05, #2
074f8     0F 27 02 F1 | 	add	local05, local01
074fc     02 26 66 F0 | 	shl	local05, #2
07500     07 00 00 FF 
07504     40 E5 85 F1 | 	sub	objptr, ##3904
07508     F2 26 02 F1 | 	add	local05, objptr
0750c     07 00 00 FF 
07510     20 E5 05 F1 | 	add	objptr, ##3872
07514     F2 1E 02 FB | 	rdlong	local01, objptr
07518     13 1F 62 FC | 	wrlong	local01, local05
0751c     20 E4 05 F1 | 	add	objptr, #32
07520     F2 1E 02 FB | 	rdlong	local01, objptr
07524     0F 27 02 F6 | 	mov	local05, local01
07528     02 26 66 F0 | 	shl	local05, #2
0752c     0F 27 02 F1 | 	add	local05, local01
07530     02 26 66 F0 | 	shl	local05, #2
07534     07 00 00 FF 
07538     40 E5 85 F1 | 	sub	objptr, ##3904
0753c     F2 26 02 F1 | 	add	local05, objptr
07540     08 00 00 FF 
07544     18 E4 85 F1 | 	sub	objptr, ##4120
07548     F2 1E 02 FB | 	rdlong	local01, objptr
0754c     69 00 00 FF 
07550     54 E4 85 F1 | 	sub	objptr, ##53844
07554     01 1E 06 F1 | 	add	local01, #1
07558     04 26 06 F1 | 	add	local05, #4
0755c     13 1F 62 FC | 	wrlong	local01, local05
07560                 | LR__0641
07560     A7 F0 03 F6 | 	mov	ptra, fp
07564     B2 00 A0 FD | 	call	#popregs_
07568                 | _do_for_ret
07568     2D 00 64 FD | 	ret
0756c                 | 
0756c                 | ' 
0756c                 | ' ' now do_next todo
0756c                 | ' 
0756c                 | ' sub do_next()
0756c                 | _do_next
0756c     04 4A 05 F6 | 	mov	COUNT_, #4
07570     A8 00 A0 FD | 	call	#pushregs_
07574     4C 1C B0 FD | 	call	#_pop
07578     FD 1E 02 F6 | 	mov	local01, result1
0757c     FE 20 02 F6 | 	mov	local02, result2
07580     FF 22 02 F6 | 	mov	local03, result3
07584                 | ' 
07584                 | ' t1=pop() :varnum=t1.result.uresult
07584                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
07584     78 00 00 FF 
07588     AC E5 05 F1 | 	add	objptr, ##61868
0758c     F2 12 02 FB | 	rdlong	arg01, objptr
07590     09 25 02 F6 | 	mov	local04, arg01
07594     02 24 66 F0 | 	shl	local04, #2
07598     09 25 02 F1 | 	add	local04, arg01
0759c     02 24 66 F0 | 	shl	local04, #2
075a0     07 00 00 FF 
075a4     40 E5 85 F1 | 	sub	objptr, ##3904
075a8     F2 24 02 F1 | 	add	local04, objptr
075ac     08 24 06 F1 | 	add	local04, #8
075b0     12 25 02 FB | 	rdlong	local04, local04
075b4     0F 25 0A F2 | 	cmp	local04, local01 wz
075b8     71 00 00 FF 
075bc     6C E4 85 F1 | 	sub	objptr, ##57964
075c0     0C 00 90 AD |  if_e	jmp	#LR__0650
075c4     25 12 06 F6 | 	mov	arg01, #37
075c8     6C DA B0 FD | 	call	#_printerror
075cc     28 02 90 FD | 	jmp	#LR__0654
075d0                 | LR__0650
075d0     78 00 00 FF 
075d4     AC E5 05 F1 | 	add	objptr, ##61868
075d8     F2 12 02 FB | 	rdlong	arg01, objptr
075dc     09 25 02 F6 | 	mov	local04, arg01
075e0     02 24 66 F0 | 	shl	local04, #2
075e4     09 25 02 F1 | 	add	local04, arg01
075e8     02 24 66 F0 | 	shl	local04, #2
075ec     07 00 00 FF 
075f0     40 E5 85 F1 | 	sub	objptr, ##3904
075f4     F2 24 02 F1 | 	add	local04, objptr
075f8     0C 24 06 F1 | 	add	local04, #12
075fc     12 25 02 FB | 	rdlong	local04, local04
07600     0F 13 02 F6 | 	mov	arg01, local01
07604     04 12 66 F0 | 	shl	arg01, #4
07608     3D 00 00 FF 
0760c     90 E4 85 F1 | 	sub	objptr, ##31376
07610     F2 12 02 F1 | 	add	arg01, objptr
07614     0F FF 01 F6 | 	mov	result3, local01
07618     04 FE 65 F0 | 	shl	result3, #4
0761c     F2 FE 01 F1 | 	add	result3, objptr
07620     04 FE 05 F1 | 	add	result3, #4
07624     FF FE 01 FB | 	rdlong	result3, result3
07628     12 FF 01 F1 | 	add	result3, local04
0762c     04 12 06 F1 | 	add	arg01, #4
07630     09 FF 61 FC | 	wrlong	result3, arg01
07634                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
07634                 | ' if fortable(fortop).stepval>=0 then
07634     44 00 00 FF 
07638     D0 E5 05 F1 | 	add	objptr, ##35280
0763c     F2 12 02 FB | 	rdlong	arg01, objptr
07640     09 25 02 F6 | 	mov	local04, arg01
07644     02 24 66 F0 | 	shl	local04, #2
07648     09 25 02 F1 | 	add	local04, arg01
0764c     02 24 66 F0 | 	shl	local04, #2
07650     07 00 00 FF 
07654     40 E5 85 F1 | 	sub	objptr, ##3904
07658     F2 24 02 F1 | 	add	local04, objptr
0765c     0C 24 06 F1 | 	add	local04, #12
07660     12 25 02 FB | 	rdlong	local04, local04
07664     00 24 56 F2 | 	cmps	local04, #0 wc
07668     71 00 00 FF 
0766c     6C E4 85 F1 | 	sub	objptr, ##57964
07670     78 00 90 CD |  if_b	jmp	#LR__0651
07674                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
07674     04 1E 66 F0 | 	shl	local01, #4
07678     33 00 00 FF 
0767c     DC E5 05 F1 | 	add	objptr, ##26588
07680     F2 1E 02 F1 | 	add	local01, objptr
07684     44 00 00 FF 
07688     D0 E5 05 F1 | 	add	objptr, ##35280
0768c     F2 24 02 FB | 	rdlong	local04, objptr
07690     12 13 02 F6 | 	mov	arg01, local04
07694     02 12 66 F0 | 	shl	arg01, #2
07698     12 13 02 F1 | 	add	arg01, local04
0769c     02 12 66 F0 | 	shl	arg01, #2
076a0     07 00 00 FF 
076a4     40 E5 85 F1 | 	sub	objptr, ##3904
076a8     F2 12 02 F1 | 	add	arg01, objptr
076ac     04 1E 06 F1 | 	add	local01, #4
076b0     0F 25 02 FB | 	rdlong	local04, local01
076b4     10 12 06 F1 | 	add	arg01, #16
076b8     09 13 02 FB | 	rdlong	arg01, arg01
076bc     09 25 5A F2 | 	cmps	local04, arg01 wcz
076c0     71 00 00 FF 
076c4     6C E4 85 F1 | 	sub	objptr, ##57964
076c8     9C 00 90 ED |  if_be	jmp	#LR__0653
076cc     78 00 00 FF 
076d0     AC E5 05 F1 | 	add	objptr, ##61868
076d4     F2 24 02 FB | 	rdlong	local04, objptr
076d8     01 24 86 F1 | 	sub	local04, #1
076dc     F2 24 62 FC | 	wrlong	local04, objptr
076e0     78 00 00 FF 
076e4     AC E5 85 F1 | 	sub	objptr, ##61868
076e8     0C 01 90 FD | 	jmp	#LR__0654
076ec                 | LR__0651
076ec                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
076ec     0F 13 02 F6 | 	mov	arg01, local01
076f0     04 12 66 F0 | 	shl	arg01, #4
076f4     33 00 00 FF 
076f8     DC E5 05 F1 | 	add	objptr, ##26588
076fc     F2 12 02 F1 | 	add	arg01, objptr
07700     44 00 00 FF 
07704     D0 E5 05 F1 | 	add	objptr, ##35280
07708     F2 24 02 FB | 	rdlong	local04, objptr
0770c     12 1F 02 F6 | 	mov	local01, local04
07710     02 1E 66 F0 | 	shl	local01, #2
07714     12 1F 02 F1 | 	add	local01, local04
07718     02 1E 66 F0 | 	shl	local01, #2
0771c     07 00 00 FF 
07720     40 E5 85 F1 | 	sub	objptr, ##3904
07724     F2 1E 02 F1 | 	add	local01, objptr
07728     04 12 06 F1 | 	add	arg01, #4
0772c     09 13 02 FB | 	rdlong	arg01, arg01
07730     10 1E 06 F1 | 	add	local01, #16
07734     0F 1F 02 FB | 	rdlong	local01, local01
07738     0F 13 52 F2 | 	cmps	arg01, local01 wc
0773c     71 00 00 FF 
07740     6C E4 85 F1 | 	sub	objptr, ##57964
07744     20 00 90 3D |  if_ae	jmp	#LR__0652
07748     78 00 00 FF 
0774c     AC E5 05 F1 | 	add	objptr, ##61868
07750     F2 24 02 FB | 	rdlong	local04, objptr
07754     01 24 86 F1 | 	sub	local04, #1
07758     F2 24 62 FC | 	wrlong	local04, objptr
0775c     78 00 00 FF 
07760     AC E5 85 F1 | 	sub	objptr, ##61868
07764     90 00 90 FD | 	jmp	#LR__0654
07768                 | LR__0652
07768                 | LR__0653
07768     78 00 00 FF 
0776c     AC E5 05 F1 | 	add	objptr, ##61868
07770     F2 1E 02 FB | 	rdlong	local01, objptr
07774     0F 25 02 F6 | 	mov	local04, local01
07778     02 24 66 F0 | 	shl	local04, #2
0777c     0F 25 02 F1 | 	add	local04, local01
07780     02 24 66 F0 | 	shl	local04, #2
07784     07 00 00 FF 
07788     40 E5 85 F1 | 	sub	objptr, ##3904
0778c     F2 24 02 F1 | 	add	local04, objptr
07790     12 25 02 FB | 	rdlong	local04, local04
07794     07 00 00 FF 
07798     18 E5 05 F1 | 	add	objptr, ##3864
0779c     F2 24 62 FC | 	wrlong	local04, objptr
077a0     28 E4 05 F1 | 	add	objptr, #40
077a4     F2 1E 02 FB | 	rdlong	local01, objptr
077a8     0F 25 02 F6 | 	mov	local04, local01
077ac     02 24 66 F0 | 	shl	local04, #2
077b0     0F 25 02 F1 | 	add	local04, local01
077b4     02 24 66 F0 | 	shl	local04, #2
077b8     07 00 00 FF 
077bc     40 E5 85 F1 | 	sub	objptr, ##3904
077c0     F2 24 02 F1 | 	add	local04, objptr
077c4     04 24 06 F1 | 	add	local04, #4
077c8     12 25 02 FB | 	rdlong	local04, local04
077cc     07 00 00 FF 
077d0     1C E5 05 F1 | 	add	objptr, ##3868
077d4     F2 24 62 FC | 	wrlong	local04, objptr
077d8     0F 00 00 FF 
077dc     38 E5 85 F1 | 	sub	objptr, ##7992
077e0     F2 24 02 FB | 	rdlong	local04, objptr
077e4     01 24 86 F1 | 	sub	local04, #1
077e8     04 E4 05 F1 | 	add	objptr, #4
077ec     F2 24 62 FC | 	wrlong	local04, objptr
077f0     69 00 00 FF 
077f4     54 E4 85 F1 | 	sub	objptr, ##53844
077f8                 | LR__0654
077f8     A7 F0 03 F6 | 	mov	ptra, fp
077fc     B2 00 A0 FD | 	call	#popregs_
07800                 | _do_next_ret
07800     2D 00 64 FD | 	ret
07804                 | 
07804                 | ' 
07804                 | ' 
07804                 | ' function compile_next() as ulong
07804                 | _compile_next
07804     04 4A 05 F6 | 	mov	COUNT_, #4
07808     A8 00 A0 FD | 	call	#pushregs_
0780c     56 00 00 FF 
07810     18 E4 05 F1 | 	add	objptr, ##44056
07814     F2 12 02 FB | 	rdlong	arg01, objptr
07818     03 12 66 F0 | 	shl	arg01, #3
0781c     02 00 00 FF 
07820     38 E4 85 F1 | 	sub	objptr, ##1080
07824     F2 12 02 F1 | 	add	arg01, objptr
07828     09 1F 02 FB | 	rdlong	local01, arg01
0782c                 | ' 
0782c                 | ' varname$=lparts(ct).part$ 
0782c                 | ' 'suffix$=right$(varname$,1)
0782c                 | ' 'if varname$="" orelse suffix$="$" orelse suffix$="!" orelse suffix$="#" then  compile_error(34) : printerror(34) : return 34
0782c                 | ' if varnum=0 then compile_error(35)  : return 35
0782c     04 E4 85 F1 | 	sub	objptr, #4
07830     F2 14 0A FB | 	rdlong	arg02, objptr wz
07834     53 00 00 FF 
07838     DC E5 85 F1 | 	sub	objptr, ##42972
0783c     10 00 90 5D |  if_ne	jmp	#LR__0660
07840     23 12 06 F6 | 	mov	arg01, #35
07844     4C E0 BF FD | 	call	#_compile_error
07848     23 FA 05 F6 | 	mov	result1, #35
0784c     58 01 90 FD | 	jmp	#LR__0664
07850                 | LR__0660
07850     01 20 66 F6 | 	neg	local02, #1
07854                 | ' j=-1
07854                 | ' for i=0 to varnum-1
07854     00 22 06 F6 | 	mov	local03, #0
07858     53 00 00 FF 
0785c     DC E5 05 F1 | 	add	objptr, ##42972
07860     F2 24 02 FB | 	rdlong	local04, objptr
07864     53 00 00 FF 
07868     DC E5 85 F1 | 	sub	objptr, ##42972
0786c                 | LR__0661
0786c     12 23 12 F2 | 	cmp	local03, local04 wc
07870     38 00 90 3D |  if_ae	jmp	#LR__0662
07874                 | '   if variables(i).name=varname$ then j=i : exit
07874     11 15 02 F6 | 	mov	arg02, local03
07878     04 14 66 F0 | 	shl	arg02, #4
0787c     33 00 00 FF 
07880     DC E5 05 F1 | 	add	objptr, ##26588
07884     F2 14 02 F1 | 	add	arg02, objptr
07888     0A 13 02 FB | 	rdlong	arg01, arg02
0788c     0F 15 02 F6 | 	mov	arg02, local01
07890     33 00 00 FF 
07894     DC E5 85 F1 | 	sub	objptr, ##26588
07898     E8 0C B1 FD | 	call	#__system___string_cmp
0789c     00 FA 0D F2 | 	cmp	result1, #0 wz
078a0     11 21 02 A6 |  if_e	mov	local02, local03
078a4     01 22 06 51 |  if_ne	add	local03, #1
078a8     C0 FF 9F 5D |  if_ne	jmp	#LR__0661
078ac                 | LR__0662
078ac                 | ' if j=-1 then compile_error(35) : return 35
078ac     FF FF 7F FF 
078b0     FF 21 0E F2 | 	cmp	local02, ##-1 wz
078b4     10 00 90 5D |  if_ne	jmp	#LR__0663
078b8     23 12 06 F6 | 	mov	arg01, #35
078bc     D4 DF BF FD | 	call	#_compile_error
078c0     23 FA 05 F6 | 	mov	result1, #35
078c4     E0 00 90 FD | 	jmp	#LR__0664
078c8                 | LR__0663
078c8     69 00 00 FF 
078cc     50 E4 05 F1 | 	add	objptr, ##53840
078d0     F2 24 02 FB | 	rdlong	local04, objptr
078d4     12 23 02 F6 | 	mov	local03, local04
078d8     01 22 66 F0 | 	shl	local03, #1
078dc     12 23 02 F1 | 	add	local03, local04
078e0     02 22 66 F0 | 	shl	local03, #2
078e4     03 00 00 FF 
078e8     00 E4 85 F1 | 	sub	objptr, ##1536
078ec     F2 22 02 F1 | 	add	local03, objptr
078f0     08 22 06 F1 | 	add	local03, #8
078f4     11 39 68 FC | 	wrlong	#28, local03
078f8     03 00 00 FF 
078fc     00 E4 05 F1 | 	add	objptr, ##1536
07900     F2 24 02 FB | 	rdlong	local04, objptr
07904     12 23 02 F6 | 	mov	local03, local04
07908     01 22 66 F0 | 	shl	local03, #1
0790c     12 23 02 F1 | 	add	local03, local04
07910     02 22 66 F0 | 	shl	local03, #2
07914     03 00 00 FF 
07918     00 E4 85 F1 | 	sub	objptr, ##1536
0791c     F2 22 02 F1 | 	add	local03, objptr
07920     11 21 62 FC | 	wrlong	local02, local03
07924     03 00 00 FF 
07928     00 E4 05 F1 | 	add	objptr, ##1536
0792c     F2 24 02 FB | 	rdlong	local04, objptr
07930     01 24 06 F1 | 	add	local04, #1
07934     F2 24 62 FC | 	wrlong	local04, objptr
07938     12 23 02 F6 | 	mov	local03, local04
0793c     01 22 66 F0 | 	shl	local03, #1
07940     12 23 02 F1 | 	add	local03, local04
07944     02 22 66 F0 | 	shl	local03, #2
07948     03 00 00 FF 
0794c     00 E4 85 F1 | 	sub	objptr, ##1536
07950     F2 22 02 F1 | 	add	local03, objptr
07954     08 22 06 F1 | 	add	local03, #8
07958     11 97 68 FC | 	wrlong	#75, local03
0795c     03 00 00 FF 
07960     00 E4 05 F1 | 	add	objptr, ##1536
07964     F2 24 02 FB | 	rdlong	local04, objptr
07968     12 23 02 F6 | 	mov	local03, local04
0796c     01 22 66 F0 | 	shl	local03, #1
07970     12 23 02 F1 | 	add	local03, local04
07974     02 22 66 F0 | 	shl	local03, #2
07978     03 00 00 FF 
0797c     00 E4 85 F1 | 	sub	objptr, ##1536
07980     F2 22 02 F1 | 	add	local03, objptr
07984     11 01 68 FC | 	wrlong	#0, local03
07988     03 00 00 FF 
0798c     00 E4 05 F1 | 	add	objptr, ##1536
07990     F2 24 02 FB | 	rdlong	local04, objptr
07994     01 24 06 F1 | 	add	local04, #1
07998     F2 24 62 FC | 	wrlong	local04, objptr
0799c     69 00 00 FF 
079a0     50 E4 85 F1 | 	sub	objptr, ##53840
079a4                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
079a4                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
079a4                 | ' return 0
079a4     00 FA 05 F6 | 	mov	result1, #0
079a8                 | LR__0664
079a8     A7 F0 03 F6 | 	mov	ptra, fp
079ac     B2 00 A0 FD | 	call	#popregs_
079b0                 | _compile_next_ret
079b0     2D 00 64 FD | 	ret
079b4                 | 
079b4                 | ' 
079b4                 | ' 
079b4                 | ' ' next: we  have to find the variable in the table, compile pushvar, then next
079b4                 | ' ' do_for: push its own pointer, varnum, step, end on the for stack. var init is already compiled before
079b4                 | ' ' do_next: find the entry with the varnum. Add step to varnum. Compare to the end. If step>0, check >, else check <. If not end, goto forptr (how?) 
079b4                 | ' 
079b4                 | ' 
079b4                 | ' function compile_goto( ) as ulong
079b4                 | _compile_goto
079b4     03 4A 05 F6 | 	mov	COUNT_, #3
079b8     A8 00 A0 FD | 	call	#pushregs_
079bc     28 F0 07 F1 | 	add	ptra, #40
079c0                 | ' 
079c0                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 
079c0     56 00 00 FF 
079c4     18 E4 05 F1 | 	add	objptr, ##44056
079c8     F2 16 02 FB | 	rdlong	arg03, objptr
079cc     03 16 66 F0 | 	shl	arg03, #3
079d0     02 00 00 FF 
079d4     38 E4 85 F1 | 	sub	objptr, ##1080
079d8     F2 16 02 F1 | 	add	arg03, objptr
079dc     04 16 06 F1 | 	add	arg03, #4
079e0     0B 17 02 FB | 	rdlong	arg03, arg03
079e4     01 00 00 FF 
079e8     00 16 0E F2 | 	cmp	arg03, ##512 wz
079ec     53 00 00 FF 
079f0     E0 E5 85 F1 | 	sub	objptr, ##42976
079f4     CC 02 90 5D |  if_ne	jmp	#LR__0675
079f8     56 00 00 FF 
079fc     18 E4 05 F1 | 	add	objptr, ##44056
07a00     F2 16 02 FB | 	rdlong	arg03, objptr
07a04     01 16 06 F1 | 	add	arg03, #1
07a08     03 16 66 F0 | 	shl	arg03, #3
07a0c     02 00 00 FF 
07a10     38 E4 85 F1 | 	sub	objptr, ##1080
07a14     F2 16 02 F1 | 	add	arg03, objptr
07a18     04 16 06 F1 | 	add	arg03, #4
07a1c     0B 17 02 FB | 	rdlong	arg03, arg03
07a20     FE 17 0E F2 | 	cmp	arg03, #510 wz
07a24     53 00 00 FF 
07a28     E0 E5 85 F1 | 	sub	objptr, ##42976
07a2c     94 02 90 5D |  if_ne	jmp	#LR__0675
07a30     56 00 00 FF 
07a34     18 E4 05 F1 | 	add	objptr, ##44056
07a38     F2 16 02 FB | 	rdlong	arg03, objptr
07a3c     03 16 66 F0 | 	shl	arg03, #3
07a40     02 00 00 FF 
07a44     38 E4 85 F1 | 	sub	objptr, ##1080
07a48     F2 16 02 F1 | 	add	arg03, objptr
07a4c     0B 13 02 FB | 	rdlong	arg01, arg03
07a50     00 14 06 F6 | 	mov	arg02, #0
07a54     53 00 00 FF 
07a58     E0 E5 85 F1 | 	sub	objptr, ##42976
07a5c     58 3B B1 FD | 	call	#__system____builtin_atoi
07a60     04 4E 05 F1 | 	add	fp, #4
07a64     A7 FA 61 FC | 	wrlong	result1, fp
07a68     69 00 00 FF 
07a6c     50 E4 05 F1 | 	add	objptr, ##53840
07a70     F2 1E 02 FB | 	rdlong	local01, objptr
07a74     0F 21 02 F6 | 	mov	local02, local01
07a78     01 20 66 F0 | 	shl	local02, #1
07a7c     0F 21 02 F1 | 	add	local02, local01
07a80     02 20 66 F0 | 	shl	local02, #2
07a84     03 00 00 FF 
07a88     00 E4 85 F1 | 	sub	objptr, ##1536
07a8c     F2 20 02 F1 | 	add	local02, objptr
07a90     08 20 06 F1 | 	add	local02, #8
07a94     10 9D 68 FC | 	wrlong	#78, local02
07a98     03 00 00 FF 
07a9c     08 E4 05 F1 | 	add	objptr, ##1544
07aa0     F2 22 02 FB | 	rdlong	local03, objptr
07aa4     69 00 00 FF 
07aa8     58 E4 85 F1 | 	sub	objptr, ##53848
07aac     04 4E 05 F1 | 	add	fp, #4
07ab0     A7 22 62 FC | 	wrlong	local03, fp
07ab4     08 4E 85 F1 | 	sub	fp, #8
07ab8                 | ' 
07ab8                 | '   gotoline=val%(lparts(ct).part$) 
07ab8                 | '   compiledline(lineptr).result_type=token_fast_goto
07ab8                 | ' ' now find a pointer to goto
07ab8                 | '   gotoptr=programstart
07ab8                 | '   do
07ab8                 | LR__0670
07ab8     10 4E 05 F1 | 	add	fp, #16
07abc     A7 12 02 F6 | 	mov	arg01, fp
07ac0     08 4E 85 F1 | 	sub	fp, #8
07ac4     A7 14 02 FB | 	rdlong	arg02, fp
07ac8     08 4E 85 F1 | 	sub	fp, #8
07acc     18 16 06 F6 | 	mov	arg03, #24
07ad0     0B 00 00 FF 
07ad4     C0 E4 05 F1 | 	add	objptr, ##5824
07ad8     90 FF B0 FD | 	call	#_psram_spin2_read1
07adc     0B 00 00 FF 
07ae0     C0 E4 85 F1 | 	sub	objptr, ##5824
07ae4                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
07ae4                 | '     if gotoheader(0)<>$FFFFFFFF then
07ae4     10 4E 05 F1 | 	add	fp, #16
07ae8     A7 22 02 FB | 	rdlong	local03, fp
07aec     10 4E 85 F1 | 	sub	fp, #16
07af0     FF FF 7F FF 
07af4     FF 23 0E F2 | 	cmp	local03, ##-1 wz
07af8     24 00 90 AD |  if_e	jmp	#LR__0671
07afc     08 4E 05 F1 | 	add	fp, #8
07b00     A7 22 02 FB | 	rdlong	local03, fp
07b04     04 4E 05 F1 | 	add	fp, #4
07b08     A7 22 62 FC | 	wrlong	local03, fp
07b0c     18 4E 05 F1 | 	add	fp, #24
07b10     A7 22 02 FB | 	rdlong	local03, fp
07b14     1C 4E 85 F1 | 	sub	fp, #28
07b18     A7 22 62 FC | 	wrlong	local03, fp
07b1c     08 4E 85 F1 | 	sub	fp, #8
07b20                 | LR__0671
07b20     24 4E 05 F1 | 	add	fp, #36
07b24     A7 22 02 FB | 	rdlong	local03, fp
07b28     24 4E 85 F1 | 	sub	fp, #36
07b2c     FF FF 3F FF 
07b30     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
07b34     10 4E 05 51 |  if_ne	add	fp, #16
07b38     A7 1E 02 5B |  if_ne	rdlong	local01, fp
07b3c     10 4E 85 51 |  if_ne	sub	fp, #16
07b40     FF FF 7F 5F 
07b44     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
07b48     1C 00 90 AD |  if_e	jmp	#LR__0672
07b4c     10 4E 05 F1 | 	add	fp, #16
07b50     A7 22 02 FB | 	rdlong	local03, fp
07b54     0C 4E 85 F1 | 	sub	fp, #12
07b58     A7 20 02 FB | 	rdlong	local02, fp
07b5c     04 4E 85 F1 | 	sub	fp, #4
07b60     10 23 0A F2 | 	cmp	local03, local02 wz
07b64     50 FF 9F 5D |  if_ne	jmp	#LR__0670
07b68                 | LR__0672
07b68                 | '   if gotoheader(0)=gotoline then
07b68     10 4E 05 F1 | 	add	fp, #16
07b6c     A7 22 02 FB | 	rdlong	local03, fp
07b70     0C 4E 85 F1 | 	sub	fp, #12
07b74     A7 1E 02 FB | 	rdlong	local01, fp
07b78     04 4E 85 F1 | 	sub	fp, #4
07b7c     0F 23 0A F2 | 	cmp	local03, local01 wz
07b80     7C 00 90 5D |  if_ne	jmp	#LR__0673
07b84     69 00 00 FF 
07b88     50 E4 05 F1 | 	add	objptr, ##53840
07b8c     F2 1E 02 FB | 	rdlong	local01, objptr
07b90     0F 21 02 F6 | 	mov	local02, local01
07b94     01 20 66 F0 | 	shl	local02, #1
07b98     0F 21 02 F1 | 	add	local02, local01
07b9c     02 20 66 F0 | 	shl	local02, #2
07ba0     03 00 00 FF 
07ba4     00 E4 85 F1 | 	sub	objptr, ##1536
07ba8     F2 20 02 F1 | 	add	local02, objptr
07bac     0C 4E 05 F1 | 	add	fp, #12
07bb0     A7 22 02 FB | 	rdlong	local03, fp
07bb4     10 23 62 FC | 	wrlong	local03, local02
07bb8     03 00 00 FF 
07bbc     00 E4 05 F1 | 	add	objptr, ##1536
07bc0     F2 1E 02 FB | 	rdlong	local01, objptr
07bc4     0F 21 02 F6 | 	mov	local02, local01
07bc8     01 20 66 F0 | 	shl	local02, #1
07bcc     0F 21 02 F1 | 	add	local02, local01
07bd0     02 20 66 F0 | 	shl	local02, #2
07bd4     03 00 00 FF 
07bd8     00 E4 85 F1 | 	sub	objptr, ##1536
07bdc     F2 20 02 F1 | 	add	local02, objptr
07be0     08 4E 85 F1 | 	sub	fp, #8
07be4     A7 22 02 FB | 	rdlong	local03, fp
07be8     04 4E 85 F1 | 	sub	fp, #4
07bec     04 20 06 F1 | 	add	local02, #4
07bf0     10 23 62 FC | 	wrlong	local03, local02
07bf4     66 00 00 FF 
07bf8     50 E4 85 F1 | 	sub	objptr, ##52304
07bfc     A4 00 90 FD | 	jmp	#LR__0674
07c00                 | LR__0673
07c00     69 00 00 FF 
07c04     50 E4 05 F1 | 	add	objptr, ##53840
07c08     F2 1E 02 FB | 	rdlong	local01, objptr
07c0c     0F 21 02 F6 | 	mov	local02, local01
07c10     01 20 66 F0 | 	shl	local02, #1
07c14     0F 21 02 F1 | 	add	local02, local01
07c18     02 20 66 F0 | 	shl	local02, #2
07c1c     03 00 00 FF 
07c20     00 E4 85 F1 | 	sub	objptr, ##1536
07c24     F2 20 02 F1 | 	add	local02, objptr
07c28     00 00 C0 FF 
07c2c     10 01 68 FC | 	wrlong	##-2147483648, local02
07c30     03 00 00 FF 
07c34     00 E4 05 F1 | 	add	objptr, ##1536
07c38     F2 1E 02 FB | 	rdlong	local01, objptr
07c3c     0F 21 02 F6 | 	mov	local02, local01
07c40     01 20 66 F0 | 	shl	local02, #1
07c44     0F 21 02 F1 | 	add	local02, local01
07c48     02 20 66 F0 | 	shl	local02, #2
07c4c     03 00 00 FF 
07c50     00 E4 85 F1 | 	sub	objptr, ##1536
07c54     F2 20 02 F1 | 	add	local02, objptr
07c58     04 4E 05 F1 | 	add	fp, #4
07c5c     A7 22 02 FB | 	rdlong	local03, fp
07c60     04 4E 85 F1 | 	sub	fp, #4
07c64     04 20 06 F1 | 	add	local02, #4
07c68     10 23 62 FC | 	wrlong	local03, local02
07c6c     03 00 00 FF 
07c70     00 E4 05 F1 | 	add	objptr, ##1536
07c74     F2 1E 02 FB | 	rdlong	local01, objptr
07c78     0F 21 02 F6 | 	mov	local02, local01
07c7c     01 20 66 F0 | 	shl	local02, #1
07c80     0F 21 02 F1 | 	add	local02, local01
07c84     02 20 66 F0 | 	shl	local02, #2
07c88     03 00 00 FF 
07c8c     00 E4 85 F1 | 	sub	objptr, ##1536
07c90     F2 20 02 F1 | 	add	local02, objptr
07c94     08 20 06 F1 | 	add	local02, #8
07c98     10 A7 68 FC | 	wrlong	#83, local02
07c9c     66 00 00 FF 
07ca0     50 E4 85 F1 | 	sub	objptr, ##52304
07ca4                 | LR__0674
07ca4     69 00 00 FF 
07ca8     50 E4 05 F1 | 	add	objptr, ##53840
07cac     F2 22 02 FB | 	rdlong	local03, objptr
07cb0     01 22 06 F1 | 	add	local03, #1
07cb4     F2 22 62 FC | 	wrlong	local03, objptr
07cb8     69 00 00 FF 
07cbc     50 E4 85 F1 | 	sub	objptr, ##53840
07cc0     40 00 90 FD | 	jmp	#LR__0676
07cc4                 | LR__0675
07cc4                 | '    print "We have a slow goto, todo  "
07cc4     00 12 06 F6 | 	mov	arg01, #0
07cc8     8C 60 B1 FD | 	call	#__system___getiolock_0416
07ccc     FD 12 02 F6 | 	mov	arg01, result1
07cd0     88 08 B1 FD | 	call	#__system___lockmem
07cd4     3E 01 00 FF 
07cd8     12 15 06 F6 | 	mov	arg02, ##@LR__4556
07cdc     00 12 06 F6 | 	mov	arg01, #0
07ce0     00 16 06 F6 | 	mov	arg03, #0
07ce4     64 15 B1 FD | 	call	#__system___basic_print_string
07ce8     00 12 06 F6 | 	mov	arg01, #0
07cec     0A 14 06 F6 | 	mov	arg02, #10
07cf0     00 16 06 F6 | 	mov	arg03, #0
07cf4     FC 14 B1 FD | 	call	#__system___basic_print_char
07cf8     00 12 06 F6 | 	mov	arg01, #0
07cfc     58 60 B1 FD | 	call	#__system___getiolock_0416
07d00     FD 00 68 FC | 	wrlong	#0, result1
07d04                 | LR__0676
07d04                 | ' ' if not, there is a slow goto. Call converttoint to get an int value from expression, then do_slow_goto
07d04                 | ' ' Do_slow_goto searches a line pointer list to find the linenum and pointer, then do the goto  
07d04                 | ' return 0
07d04     00 FA 05 F6 | 	mov	result1, #0
07d08     A7 F0 03 F6 | 	mov	ptra, fp
07d0c     B2 00 A0 FD | 	call	#popregs_
07d10                 | _compile_goto_ret
07d10     2D 00 64 FD | 	ret
07d14                 | 
07d14                 | ' 
07d14                 | ' 
07d14                 | ' 
07d14                 | ' 
07d14                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
07d14                 | ' '------------------------------ End of the precompiler  --------------------------------------------------------------------------------
07d14                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
07d14                 | ' 
07d14                 | ' 
07d14                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
07d14                 | ' '---------------------------- Compile time expression decoder/evaluator ----------------------------------------------------------------
07d14                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
07d14                 | ' 
07d14                 | ' 
07d14                 | ' function expr() as integer 
07d14                 | _expr
07d14     07 4A 05 F6 | 	mov	COUNT_, #7
07d18     A8 00 A0 FD | 	call	#pushregs_
07d1c                 | _expr_enter
07d1c     56 00 00 FF 
07d20     18 E4 05 F1 | 	add	objptr, ##44056
07d24     F2 24 02 FB | 	rdlong	local04, objptr
07d28     03 24 66 F0 | 	shl	local04, #3
07d2c     02 00 00 FF 
07d30     38 E4 85 F1 | 	sub	objptr, ##1080
07d34     F2 24 02 F1 | 	add	local04, objptr
07d38     04 24 06 F1 | 	add	local04, #4
07d3c     12 27 02 FB | 	rdlong	local05, local04
07d40                 | ' 
07d40                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
07d40     FE 27 0E F2 | 	cmp	local05, #510 wz
07d44     53 00 00 FF 
07d48     E0 E5 85 F1 | 	sub	objptr, ##42976
07d4c     C4 00 90 5D |  if_ne	jmp	#LR__0680
07d50     1D 1E 06 F6 | 	mov	local01, #29
07d54     FF 22 06 F6 | 	mov	local03, #255
07d58     0F 29 02 F6 | 	mov	local06, local01
07d5c     10 2B 02 F6 | 	mov	local07, local02
07d60     11 1F 02 F6 | 	mov	local01, local03
07d64     69 00 00 FF 
07d68     50 E4 05 F1 | 	add	objptr, ##53840
07d6c     F2 26 02 FB | 	rdlong	local05, objptr
07d70     13 25 02 F6 | 	mov	local04, local05
07d74     01 24 66 F0 | 	shl	local04, #1
07d78     13 25 02 F1 | 	add	local04, local05
07d7c     02 24 66 F0 | 	shl	local04, #2
07d80     03 00 00 FF 
07d84     00 E4 85 F1 | 	sub	objptr, ##1536
07d88     F2 24 02 F1 | 	add	local04, objptr
07d8c     12 29 62 FC | 	wrlong	local06, local04
07d90     03 00 00 FF 
07d94     00 E4 05 F1 | 	add	objptr, ##1536
07d98     F2 28 02 FB | 	rdlong	local06, objptr
07d9c     14 27 02 F6 | 	mov	local05, local06
07da0     01 26 66 F0 | 	shl	local05, #1
07da4     14 27 02 F1 | 	add	local05, local06
07da8     02 26 66 F0 | 	shl	local05, #2
07dac     03 00 00 FF 
07db0     00 E4 85 F1 | 	sub	objptr, ##1536
07db4     F2 26 02 F1 | 	add	local05, objptr
07db8     04 26 06 F1 | 	add	local05, #4
07dbc     13 2B 62 FC | 	wrlong	local07, local05
07dc0     03 00 00 FF 
07dc4     00 E4 05 F1 | 	add	objptr, ##1536
07dc8     F2 2A 02 FB | 	rdlong	local07, objptr
07dcc     15 29 02 F6 | 	mov	local06, local07
07dd0     01 28 66 F0 | 	shl	local06, #1
07dd4     15 29 02 F1 | 	add	local06, local07
07dd8     02 28 66 F0 | 	shl	local06, #2
07ddc     03 00 00 FF 
07de0     00 E4 85 F1 | 	sub	objptr, ##1536
07de4     F2 28 02 F1 | 	add	local06, objptr
07de8     08 28 06 F1 | 	add	local06, #8
07dec     14 1F 62 FC | 	wrlong	local01, local06
07df0     03 00 00 FF 
07df4     00 E4 05 F1 | 	add	objptr, ##1536
07df8     F2 28 02 FB | 	rdlong	local06, objptr
07dfc     01 28 06 F1 | 	add	local06, #1
07e00     F2 28 62 FC | 	wrlong	local06, objptr
07e04     69 00 00 FF 
07e08     50 E4 85 F1 | 	sub	objptr, ##53840
07e0c     1D FA 05 F6 | 	mov	result1, #29
07e10     54 01 90 FD | 	jmp	#LR__0683
07e14                 | LR__0680
07e14     00 1E 06 F6 | 	mov	local01, #0
07e18     58 01 B0 FD | 	call	#_addsub
07e1c     56 00 00 FF 
07e20     18 E4 05 F1 | 	add	objptr, ##44056
07e24     F2 24 02 FB | 	rdlong	local04, objptr
07e28     03 24 66 F0 | 	shl	local04, #3
07e2c     02 00 00 FF 
07e30     38 E4 85 F1 | 	sub	objptr, ##1080
07e34     F2 24 02 F1 | 	add	local04, objptr
07e38     04 24 06 F1 | 	add	local04, #4
07e3c     12 27 02 FB | 	rdlong	local05, local04
07e40                 | ' t3.result.uresult=0
07e40                 | ' rt=addsub()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
07e40                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
07e40                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
07e40     53 00 00 FF 
07e44     E0 E5 85 F1 | 	sub	objptr, ##42976
07e48                 | LR__0681
07e48     1B 26 0E F2 | 	cmp	local05, #27 wz
07e4c     0F 26 0E 52 |  if_ne	cmp	local05, #15 wz
07e50     10 26 0E 52 |  if_ne	cmp	local05, #16 wz
07e54     27 26 0E 52 |  if_ne	cmp	local05, #39 wz
07e58     26 26 0E 52 |  if_ne	cmp	local05, #38 wz
07e5c     2A 26 0E 52 |  if_ne	cmp	local05, #42 wz
07e60     00 01 90 5D |  if_ne	jmp	#LR__0682
07e64     56 00 00 FF 
07e68     18 E4 05 F1 | 	add	objptr, ##44056
07e6c     F2 28 02 FB | 	rdlong	local06, objptr
07e70     01 28 06 F1 | 	add	local06, #1
07e74     F2 28 62 FC | 	wrlong	local06, objptr
07e78     56 00 00 FF 
07e7c     18 E4 85 F1 | 	sub	objptr, ##44056
07e80     F0 00 B0 FD | 	call	#_addsub
07e84     13 23 02 F6 | 	mov	local03, local05
07e88     0F 29 02 F6 | 	mov	local06, local01
07e8c     10 2B 02 F6 | 	mov	local07, local02
07e90     11 27 02 F6 | 	mov	local05, local03
07e94     69 00 00 FF 
07e98     50 E4 05 F1 | 	add	objptr, ##53840
07e9c     F2 24 02 FB | 	rdlong	local04, objptr
07ea0     12 FB 01 F6 | 	mov	result1, local04
07ea4     01 FA 65 F0 | 	shl	result1, #1
07ea8     12 FB 01 F1 | 	add	result1, local04
07eac     02 FA 65 F0 | 	shl	result1, #2
07eb0     03 00 00 FF 
07eb4     00 E4 85 F1 | 	sub	objptr, ##1536
07eb8     F2 FA 01 F1 | 	add	result1, objptr
07ebc     FD 28 62 FC | 	wrlong	local06, result1
07ec0     03 00 00 FF 
07ec4     00 E4 05 F1 | 	add	objptr, ##1536
07ec8     F2 28 02 FB | 	rdlong	local06, objptr
07ecc     14 25 02 F6 | 	mov	local04, local06
07ed0     01 24 66 F0 | 	shl	local04, #1
07ed4     14 25 02 F1 | 	add	local04, local06
07ed8     02 24 66 F0 | 	shl	local04, #2
07edc     03 00 00 FF 
07ee0     00 E4 85 F1 | 	sub	objptr, ##1536
07ee4     F2 24 02 F1 | 	add	local04, objptr
07ee8     04 24 06 F1 | 	add	local04, #4
07eec     12 2B 62 FC | 	wrlong	local07, local04
07ef0     03 00 00 FF 
07ef4     00 E4 05 F1 | 	add	objptr, ##1536
07ef8     F2 2A 02 FB | 	rdlong	local07, objptr
07efc     15 29 02 F6 | 	mov	local06, local07
07f00     01 28 66 F0 | 	shl	local06, #1
07f04     15 29 02 F1 | 	add	local06, local07
07f08     02 28 66 F0 | 	shl	local06, #2
07f0c     03 00 00 FF 
07f10     00 E4 85 F1 | 	sub	objptr, ##1536
07f14     F2 28 02 F1 | 	add	local06, objptr
07f18     08 28 06 F1 | 	add	local06, #8
07f1c     14 27 62 FC | 	wrlong	local05, local06
07f20     03 00 00 FF 
07f24     00 E4 05 F1 | 	add	objptr, ##1536
07f28     F2 28 02 FB | 	rdlong	local06, objptr
07f2c     01 28 06 F1 | 	add	local06, #1
07f30     F2 28 62 FC | 	wrlong	local06, objptr
07f34     13 00 00 FF 
07f38     38 E4 85 F1 | 	sub	objptr, ##9784
07f3c     F2 24 02 FB | 	rdlong	local04, objptr
07f40     03 24 66 F0 | 	shl	local04, #3
07f44     02 00 00 FF 
07f48     38 E4 85 F1 | 	sub	objptr, ##1080
07f4c     F2 24 02 F1 | 	add	local04, objptr
07f50     04 24 06 F1 | 	add	local04, #4
07f54     12 27 02 FB | 	rdlong	local05, local04
07f58     53 00 00 FF 
07f5c     E0 E5 85 F1 | 	sub	objptr, ##42976
07f60     E4 FE 9F FD | 	jmp	#LR__0681
07f64                 | LR__0682
07f64                 | ' return 0  
07f64     00 FA 05 F6 | 	mov	result1, #0
07f68                 | LR__0683
07f68     A7 F0 03 F6 | 	mov	ptra, fp
07f6c     B2 00 A0 FD | 	call	#popregs_
07f70                 | _expr_ret
07f70     2D 00 64 FD | 	ret
07f74                 | 
07f74                 | ' 
07f74                 | ' 
07f74                 | ' '' todo: use propre ops. At getvar and getconst level we know the rt. If both are ints, do int op. If one are float, compile converttofloat, do float op. If both strings, call string op. If string ant int combined, compile err
07f74                 | ' 
07f74                 | ' function addsub() as integer 
07f74                 | _addsub
07f74     07 4A 05 F6 | 	mov	COUNT_, #7
07f78     A8 00 A0 FD | 	call	#pushregs_
07f7c                 | _addsub_enter
07f7c     00 1E 06 F6 | 	mov	local01, #0
07f80     50 01 B0 FD | 	call	#_muldiv
07f84     56 00 00 FF 
07f88     18 E4 05 F1 | 	add	objptr, ##44056
07f8c     F2 24 02 FB | 	rdlong	local04, objptr
07f90     03 24 66 F0 | 	shl	local04, #3
07f94     02 00 00 FF 
07f98     38 E4 85 F1 | 	sub	objptr, ##1080
07f9c     F2 24 02 F1 | 	add	local04, objptr
07fa0     04 24 06 F1 | 	add	local04, #4
07fa4     12 27 02 FB | 	rdlong	local05, local04
07fa8                 | ' t3.result.uresult=0
07fa8                 | ' muldiv()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
07fa8                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
07fa8                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
07fa8     53 00 00 FF 
07fac     E0 E5 85 F1 | 	sub	objptr, ##42976
07fb0                 | LR__0690
07fb0     01 26 0E F2 | 	cmp	local05, #1 wz
07fb4     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
07fb8     07 26 0E 52 |  if_ne	cmp	local05, #7 wz
07fbc     03 26 0E 52 |  if_ne	cmp	local05, #3 wz
07fc0     00 01 90 5D |  if_ne	jmp	#LR__0691
07fc4     56 00 00 FF 
07fc8     18 E4 05 F1 | 	add	objptr, ##44056
07fcc     F2 24 02 FB | 	rdlong	local04, objptr
07fd0     01 24 06 F1 | 	add	local04, #1
07fd4     F2 24 62 FC | 	wrlong	local04, objptr
07fd8     56 00 00 FF 
07fdc     18 E4 85 F1 | 	sub	objptr, ##44056
07fe0     F0 00 B0 FD | 	call	#_muldiv
07fe4     13 23 02 F6 | 	mov	local03, local05
07fe8     0F 29 02 F6 | 	mov	local06, local01
07fec     10 2B 02 F6 | 	mov	local07, local02
07ff0     11 27 02 F6 | 	mov	local05, local03
07ff4     69 00 00 FF 
07ff8     50 E4 05 F1 | 	add	objptr, ##53840
07ffc     F2 24 02 FB | 	rdlong	local04, objptr
08000     12 FB 01 F6 | 	mov	result1, local04
08004     01 FA 65 F0 | 	shl	result1, #1
08008     12 FB 01 F1 | 	add	result1, local04
0800c     02 FA 65 F0 | 	shl	result1, #2
08010     03 00 00 FF 
08014     00 E4 85 F1 | 	sub	objptr, ##1536
08018     F2 FA 01 F1 | 	add	result1, objptr
0801c     FD 28 62 FC | 	wrlong	local06, result1
08020     03 00 00 FF 
08024     00 E4 05 F1 | 	add	objptr, ##1536
08028     F2 28 02 FB | 	rdlong	local06, objptr
0802c     14 25 02 F6 | 	mov	local04, local06
08030     01 24 66 F0 | 	shl	local04, #1
08034     14 25 02 F1 | 	add	local04, local06
08038     02 24 66 F0 | 	shl	local04, #2
0803c     03 00 00 FF 
08040     00 E4 85 F1 | 	sub	objptr, ##1536
08044     F2 24 02 F1 | 	add	local04, objptr
08048     04 24 06 F1 | 	add	local04, #4
0804c     12 2B 62 FC | 	wrlong	local07, local04
08050     03 00 00 FF 
08054     00 E4 05 F1 | 	add	objptr, ##1536
08058     F2 2A 02 FB | 	rdlong	local07, objptr
0805c     15 29 02 F6 | 	mov	local06, local07
08060     01 28 66 F0 | 	shl	local06, #1
08064     15 29 02 F1 | 	add	local06, local07
08068     02 28 66 F0 | 	shl	local06, #2
0806c     03 00 00 FF 
08070     00 E4 85 F1 | 	sub	objptr, ##1536
08074     F2 28 02 F1 | 	add	local06, objptr
08078     08 28 06 F1 | 	add	local06, #8
0807c     14 27 62 FC | 	wrlong	local05, local06
08080     03 00 00 FF 
08084     00 E4 05 F1 | 	add	objptr, ##1536
08088     F2 28 02 FB | 	rdlong	local06, objptr
0808c     01 28 06 F1 | 	add	local06, #1
08090     F2 28 62 FC | 	wrlong	local06, objptr
08094     13 00 00 FF 
08098     38 E4 85 F1 | 	sub	objptr, ##9784
0809c     F2 24 02 FB | 	rdlong	local04, objptr
080a0     03 24 66 F0 | 	shl	local04, #3
080a4     02 00 00 FF 
080a8     38 E4 85 F1 | 	sub	objptr, ##1080
080ac     F2 24 02 F1 | 	add	local04, objptr
080b0     04 24 06 F1 | 	add	local04, #4
080b4     12 27 02 FB | 	rdlong	local05, local04
080b8     53 00 00 FF 
080bc     E0 E5 85 F1 | 	sub	objptr, ##42976
080c0     EC FE 9F FD | 	jmp	#LR__0690
080c4                 | LR__0691
080c4                 | '   return 0
080c4     00 FA 05 F6 | 	mov	result1, #0
080c8     A7 F0 03 F6 | 	mov	ptra, fp
080cc     B2 00 A0 FD | 	call	#popregs_
080d0                 | _addsub_ret
080d0     2D 00 64 FD | 	ret
080d4                 | 
080d4                 | ' 
080d4                 | ' sub muldiv()
080d4                 | _muldiv
080d4     08 4A 05 F6 | 	mov	COUNT_, #8
080d8     A8 00 A0 FD | 	call	#pushregs_
080dc                 | _muldiv_enter
080dc     00 1E 06 F6 | 	mov	local01, #0
080e0     58 01 B0 FD | 	call	#_getvalue
080e4     56 00 00 FF 
080e8     18 E4 05 F1 | 	add	objptr, ##44056
080ec     F2 24 02 FB | 	rdlong	local04, objptr
080f0     03 24 66 F0 | 	shl	local04, #3
080f4     02 00 00 FF 
080f8     38 E4 85 F1 | 	sub	objptr, ##1080
080fc     F2 24 02 F1 | 	add	local04, objptr
08100     04 24 06 F1 | 	add	local04, #4
08104     12 27 02 FB | 	rdlong	local05, local04
08108                 | ' t3.result.uresult=0
08108                 | ' getvalue()    
08108                 | ' op = lparts(ct).token
08108                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
08108     53 00 00 FF 
0810c     E0 E5 85 F1 | 	sub	objptr, ##42976
08110                 | LR__0700
08110     05 26 0E F2 | 	cmp	local05, #5 wz
08114     08 26 0E 52 |  if_ne	cmp	local05, #8 wz
08118     06 26 0E 52 |  if_ne	cmp	local05, #6 wz
0811c     09 26 0E 52 |  if_ne	cmp	local05, #9 wz
08120     0A 26 0E 52 |  if_ne	cmp	local05, #10 wz
08124     0B 26 0E 52 |  if_ne	cmp	local05, #11 wz
08128     0C 26 0E 52 |  if_ne	cmp	local05, #12 wz
0812c     00 01 90 5D |  if_ne	jmp	#LR__0701
08130     56 00 00 FF 
08134     18 E4 05 F1 | 	add	objptr, ##44056
08138     F2 24 02 FB | 	rdlong	local04, objptr
0813c     01 24 06 F1 | 	add	local04, #1
08140     F2 24 62 FC | 	wrlong	local04, objptr
08144     56 00 00 FF 
08148     18 E4 85 F1 | 	sub	objptr, ##44056
0814c     EC 00 B0 FD | 	call	#_getvalue
08150     13 23 02 F6 | 	mov	local03, local05
08154     0F 29 02 F6 | 	mov	local06, local01
08158     10 2B 02 F6 | 	mov	local07, local02
0815c     11 27 02 F6 | 	mov	local05, local03
08160     69 00 00 FF 
08164     50 E4 05 F1 | 	add	objptr, ##53840
08168     F2 24 02 FB | 	rdlong	local04, objptr
0816c     12 2D 02 F6 | 	mov	local08, local04
08170     01 2C 66 F0 | 	shl	local08, #1
08174     12 2D 02 F1 | 	add	local08, local04
08178     02 2C 66 F0 | 	shl	local08, #2
0817c     03 00 00 FF 
08180     00 E4 85 F1 | 	sub	objptr, ##1536
08184     F2 2C 02 F1 | 	add	local08, objptr
08188     16 29 62 FC | 	wrlong	local06, local08
0818c     03 00 00 FF 
08190     00 E4 05 F1 | 	add	objptr, ##1536
08194     F2 2C 02 FB | 	rdlong	local08, objptr
08198     16 29 02 F6 | 	mov	local06, local08
0819c     01 28 66 F0 | 	shl	local06, #1
081a0     16 29 02 F1 | 	add	local06, local08
081a4     02 28 66 F0 | 	shl	local06, #2
081a8     03 00 00 FF 
081ac     00 E4 85 F1 | 	sub	objptr, ##1536
081b0     F2 28 02 F1 | 	add	local06, objptr
081b4     04 28 06 F1 | 	add	local06, #4
081b8     14 2B 62 FC | 	wrlong	local07, local06
081bc     03 00 00 FF 
081c0     00 E4 05 F1 | 	add	objptr, ##1536
081c4     F2 2C 02 FB | 	rdlong	local08, objptr
081c8     16 2B 02 F6 | 	mov	local07, local08
081cc     01 2A 66 F0 | 	shl	local07, #1
081d0     16 2B 02 F1 | 	add	local07, local08
081d4     02 2A 66 F0 | 	shl	local07, #2
081d8     03 00 00 FF 
081dc     00 E4 85 F1 | 	sub	objptr, ##1536
081e0     F2 2A 02 F1 | 	add	local07, objptr
081e4     08 2A 06 F1 | 	add	local07, #8
081e8     15 27 62 FC | 	wrlong	local05, local07
081ec     03 00 00 FF 
081f0     00 E4 05 F1 | 	add	objptr, ##1536
081f4     F2 28 02 FB | 	rdlong	local06, objptr
081f8     01 28 06 F1 | 	add	local06, #1
081fc     F2 28 62 FC | 	wrlong	local06, objptr
08200     13 00 00 FF 
08204     38 E4 85 F1 | 	sub	objptr, ##9784
08208     F2 24 02 FB | 	rdlong	local04, objptr
0820c     03 24 66 F0 | 	shl	local04, #3
08210     02 00 00 FF 
08214     38 E4 85 F1 | 	sub	objptr, ##1080
08218     F2 24 02 F1 | 	add	local04, objptr
0821c     04 24 06 F1 | 	add	local04, #4
08220     12 27 02 FB | 	rdlong	local05, local04
08224     53 00 00 FF 
08228     E0 E5 85 F1 | 	sub	objptr, ##42976
0822c     E0 FE 9F FD | 	jmp	#LR__0700
08230                 | LR__0701
08230     A7 F0 03 F6 | 	mov	ptra, fp
08234     B2 00 A0 FD | 	call	#popregs_
08238                 | _muldiv_ret
08238     2D 00 64 FD | 	ret
0823c                 | 
0823c                 | ' 
0823c                 | ' sub getvalue() 
0823c                 | _getvalue
0823c     0B 4A 05 F6 | 	mov	COUNT_, #11
08240     A8 00 A0 FD | 	call	#pushregs_
08244                 | _getvalue_enter
08244     01 24 06 F6 | 	mov	local04, #1
08248     00 1E 06 F6 | 	mov	local01, #0
0824c     1D 22 06 F6 | 	mov	local03, #29
08250     56 00 00 FF 
08254     18 E4 05 F1 | 	add	objptr, ##44056
08258     F2 16 02 FB | 	rdlong	arg03, objptr
0825c     03 16 66 F0 | 	shl	arg03, #3
08260     02 00 00 FF 
08264     38 E4 85 F1 | 	sub	objptr, ##1080
08268     F2 16 02 F1 | 	add	arg03, objptr
0826c     04 16 06 F1 | 	add	arg03, #4
08270     0B 27 02 FB | 	rdlong	local05, arg03
08274                 | ' m=1
08274                 | ' t1.result.uresult=0: t1.result_type=result_uint
08274                 | ' op=lparts(ct).token
08274                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token
08274     02 26 0E F2 | 	cmp	local05, #2 wz
08278     53 00 00 FF 
0827c     E0 E5 85 F1 | 	sub	objptr, ##42976
08280     38 00 90 5D |  if_ne	jmp	#LR__0710
08284     01 24 66 F6 | 	neg	local04, #1
08288     56 00 00 FF 
0828c     18 E4 05 F1 | 	add	objptr, ##44056
08290     F2 26 02 FB | 	rdlong	local05, objptr
08294     01 26 06 F1 | 	add	local05, #1
08298     F2 26 62 FC | 	wrlong	local05, objptr
0829c     03 26 66 F0 | 	shl	local05, #3
082a0     02 00 00 FF 
082a4     38 E4 85 F1 | 	sub	objptr, ##1080
082a8     F2 26 02 F1 | 	add	local05, objptr
082ac     04 26 06 F1 | 	add	local05, #4
082b0     13 27 02 FB | 	rdlong	local05, local05
082b4     53 00 00 FF 
082b8     E0 E5 85 F1 | 	sub	objptr, ##42976
082bc                 | LR__0710
082bc                 | ' select case op
082bc     01 00 00 FF 
082c0     00 26 0E F2 | 	cmp	local05, ##512 wz
082c4     3C 00 90 AD |  if_e	jmp	#LR__0711
082c8     01 00 00 FF 
082cc     01 26 0E F2 | 	cmp	local05, ##513 wz
082d0     88 01 90 AD |  if_e	jmp	#LR__0714
082d4     01 00 00 FF 
082d8     02 26 0E F2 | 	cmp	local05, ##514 wz
082dc     84 02 90 AD |  if_e	jmp	#LR__0715
082e0     01 00 00 FF 
082e4     03 26 0E F2 | 	cmp	local05, ##515 wz
082e8     E8 03 90 AD |  if_e	jmp	#LR__0718
082ec     01 00 00 FF 
082f0     04 26 0E F2 | 	cmp	local05, ##516 wz
082f4     E0 05 90 AD |  if_e	jmp	#LR__0723
082f8     15 26 0E F2 | 	cmp	local05, #21 wz
082fc     00 06 90 AD |  if_e	jmp	#LR__0724
08300     70 06 90 FD | 	jmp	#LR__0725
08304                 | LR__0711
08304                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_uint ' todo token_int64
08304     01 24 0E F2 | 	cmp	local04, #1 wz
08308     3C 00 90 5D |  if_ne	jmp	#LR__0712
0830c     56 00 00 FF 
08310     18 E4 05 F1 | 	add	objptr, ##44056
08314     F2 26 02 FB | 	rdlong	local05, objptr
08318     03 26 66 F0 | 	shl	local05, #3
0831c     02 00 00 FF 
08320     38 E4 85 F1 | 	sub	objptr, ##1080
08324     F2 26 02 F1 | 	add	local05, objptr
08328     13 13 02 FB | 	rdlong	arg01, local05
0832c     00 14 06 F6 | 	mov	arg02, #0
08330     53 00 00 FF 
08334     E0 E5 85 F1 | 	sub	objptr, ##42976
08338     7C 32 B1 FD | 	call	#__system____builtin_atoi
0833c     FD 24 02 FD | 	qmul	local04, result1
08340     18 1E 62 FD | 	getqx	local01
08344     1D 22 06 F6 | 	mov	local03, #29
08348                 | LR__0712
08348                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
08348     FF FF 7F FF 
0834c     FF 25 0E F2 | 	cmp	local04, ##-1 wz
08350     3C 00 90 5D |  if_ne	jmp	#LR__0713
08354     56 00 00 FF 
08358     18 E4 05 F1 | 	add	objptr, ##44056
0835c     F2 26 02 FB | 	rdlong	local05, objptr
08360     03 26 66 F0 | 	shl	local05, #3
08364     02 00 00 FF 
08368     38 E4 85 F1 | 	sub	objptr, ##1080
0836c     F2 26 02 F1 | 	add	local05, objptr
08370     13 13 02 FB | 	rdlong	arg01, local05
08374     00 14 06 F6 | 	mov	arg02, #0
08378     53 00 00 FF 
0837c     E0 E5 85 F1 | 	sub	objptr, ##42976
08380     34 32 B1 FD | 	call	#__system____builtin_atoi
08384     FD 24 02 FD | 	qmul	local04, result1
08388     18 1E 62 FD | 	getqx	local01
0838c     1C 22 06 F6 | 	mov	local03, #28
08390                 | LR__0713
08390     0F 29 02 F6 | 	mov	local06, local01
08394     10 2B 02 F6 | 	mov	local07, local02
08398     11 27 02 F6 | 	mov	local05, local03
0839c     69 00 00 FF 
083a0     50 E4 05 F1 | 	add	objptr, ##53840
083a4     F2 1E 02 FB | 	rdlong	local01, objptr
083a8     0F 25 02 F6 | 	mov	local04, local01
083ac     01 24 66 F0 | 	shl	local04, #1
083b0     0F 25 02 F1 | 	add	local04, local01
083b4     02 24 66 F0 | 	shl	local04, #2
083b8     03 00 00 FF 
083bc     00 E4 85 F1 | 	sub	objptr, ##1536
083c0     F2 24 02 F1 | 	add	local04, objptr
083c4     12 29 62 FC | 	wrlong	local06, local04
083c8     03 00 00 FF 
083cc     00 E4 05 F1 | 	add	objptr, ##1536
083d0     F2 28 02 FB | 	rdlong	local06, objptr
083d4     14 1F 02 F6 | 	mov	local01, local06
083d8     01 1E 66 F0 | 	shl	local01, #1
083dc     14 1F 02 F1 | 	add	local01, local06
083e0     02 1E 66 F0 | 	shl	local01, #2
083e4     03 00 00 FF 
083e8     00 E4 85 F1 | 	sub	objptr, ##1536
083ec     F2 1E 02 F1 | 	add	local01, objptr
083f0     04 1E 06 F1 | 	add	local01, #4
083f4     0F 2B 62 FC | 	wrlong	local07, local01
083f8     03 00 00 FF 
083fc     00 E4 05 F1 | 	add	objptr, ##1536
08400     F2 2A 02 FB | 	rdlong	local07, objptr
08404     15 29 02 F6 | 	mov	local06, local07
08408     01 28 66 F0 | 	shl	local06, #1
0840c     15 29 02 F1 | 	add	local06, local07
08410     02 28 66 F0 | 	shl	local06, #2
08414     03 00 00 FF 
08418     00 E4 85 F1 | 	sub	objptr, ##1536
0841c     F2 28 02 F1 | 	add	local06, objptr
08420     08 28 06 F1 | 	add	local06, #8
08424     14 27 62 FC | 	wrlong	local05, local06
08428     03 00 00 FF 
0842c     00 E4 05 F1 | 	add	objptr, ##1536
08430     F2 28 02 FB | 	rdlong	local06, objptr
08434     01 28 06 F1 | 	add	local06, #1
08438     F2 28 62 FC | 	wrlong	local06, objptr
0843c     13 00 00 FF 
08440     38 E4 85 F1 | 	sub	objptr, ##9784
08444     F2 28 02 FB | 	rdlong	local06, objptr
08448     01 28 06 F1 | 	add	local06, #1
0844c     F2 28 62 FC | 	wrlong	local06, objptr
08450     56 00 00 FF 
08454     18 E4 85 F1 | 	sub	objptr, ##44056
08458     3C 05 90 FD | 	jmp	#LR__0726
0845c                 | LR__0714
0845c     56 00 00 FF 
08460     18 E4 05 F1 | 	add	objptr, ##44056
08464     F2 28 02 FB | 	rdlong	local06, objptr
08468     03 28 66 F0 | 	shl	local06, #3
0846c     02 00 00 FF 
08470     38 E4 85 F1 | 	sub	objptr, ##1080
08474     F2 28 02 F1 | 	add	local06, objptr
08478     14 13 02 FB | 	rdlong	arg01, local06
0847c     00 14 06 F6 | 	mov	arg02, #0
08480     53 00 00 FF 
08484     E0 E5 85 F1 | 	sub	objptr, ##42976
08488     2C 31 B1 FD | 	call	#__system____builtin_atoi
0848c     FD 24 02 FD | 	qmul	local04, result1
08490     69 00 00 FF 
08494     50 E4 05 F1 | 	add	objptr, ##53840
08498     F2 28 02 FB | 	rdlong	local06, objptr
0849c     14 2D 02 F6 | 	mov	local08, local06
084a0     01 2C 66 F0 | 	shl	local08, #1
084a4     14 2D 02 F1 | 	add	local08, local06
084a8     02 2C 66 F0 | 	shl	local08, #2
084ac     03 00 00 FF 
084b0     00 E4 85 F1 | 	sub	objptr, ##1536
084b4     F2 2C 02 F1 | 	add	local08, objptr
084b8     03 00 00 FF 
084bc     00 E4 05 F1 | 	add	objptr, ##1536
084c0     18 1E 62 FD | 	getqx	local01
084c4     1C 22 06 F6 | 	mov	local03, #28
084c8     0F 29 02 F6 | 	mov	local06, local01
084cc     10 2B 02 F6 | 	mov	local07, local02
084d0     16 29 62 FC | 	wrlong	local06, local08
084d4     11 2D 02 F6 | 	mov	local08, local03
084d8     F2 28 02 FB | 	rdlong	local06, objptr
084dc     14 27 02 F6 | 	mov	local05, local06
084e0     01 26 66 F0 | 	shl	local05, #1
084e4     14 27 02 F1 | 	add	local05, local06
084e8     02 26 66 F0 | 	shl	local05, #2
084ec     03 00 00 FF 
084f0     00 E4 85 F1 | 	sub	objptr, ##1536
084f4     F2 26 02 F1 | 	add	local05, objptr
084f8     04 26 06 F1 | 	add	local05, #4
084fc     13 2B 62 FC | 	wrlong	local07, local05
08500     03 00 00 FF 
08504     00 E4 05 F1 | 	add	objptr, ##1536
08508     F2 2A 02 FB | 	rdlong	local07, objptr
0850c     15 29 02 F6 | 	mov	local06, local07
08510     01 28 66 F0 | 	shl	local06, #1
08514     15 29 02 F1 | 	add	local06, local07
08518     02 28 66 F0 | 	shl	local06, #2
0851c     03 00 00 FF 
08520     00 E4 85 F1 | 	sub	objptr, ##1536
08524     F2 28 02 F1 | 	add	local06, objptr
08528     08 28 06 F1 | 	add	local06, #8
0852c     14 2D 62 FC | 	wrlong	local08, local06
08530     03 00 00 FF 
08534     00 E4 05 F1 | 	add	objptr, ##1536
08538     F2 28 02 FB | 	rdlong	local06, objptr
0853c     01 28 06 F1 | 	add	local06, #1
08540     F2 28 62 FC | 	wrlong	local06, objptr
08544     13 00 00 FF 
08548     38 E4 85 F1 | 	sub	objptr, ##9784
0854c     F2 28 02 FB | 	rdlong	local06, objptr
08550     01 28 06 F1 | 	add	local06, #1
08554     F2 28 62 FC | 	wrlong	local06, objptr
08558     56 00 00 FF 
0855c     18 E4 85 F1 | 	sub	objptr, ##44056
08560     34 04 90 FD | 	jmp	#LR__0726
08564                 | LR__0715
08564                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
08564     01 24 0E F2 | 	cmp	local04, #1 wz
08568     48 00 90 5D |  if_ne	jmp	#LR__0716
0856c     00 C0 1F FF 
08570     00 28 06 F6 | 	mov	local06, ##1065353216
08574     56 00 00 FF 
08578     18 E4 05 F1 | 	add	objptr, ##44056
0857c     F2 2C 02 FB | 	rdlong	local08, objptr
08580     03 2C 66 F0 | 	shl	local08, #3
08584     02 00 00 FF 
08588     38 E4 85 F1 | 	sub	objptr, ##1080
0858c     F2 2C 02 F1 | 	add	local08, objptr
08590     16 13 02 FB | 	rdlong	arg01, local08
08594     53 00 00 FF 
08598     E0 E5 85 F1 | 	sub	objptr, ##42976
0859c     88 31 B1 FD | 	call	#__system____builtin_atof
085a0     FD 14 02 F6 | 	mov	arg02, result1
085a4     14 13 02 F6 | 	mov	arg01, local06
085a8     94 29 B1 FD | 	call	#__system___float_mul
085ac     FD 1E 02 F6 | 	mov	local01, result1
085b0     1E 22 06 F6 | 	mov	local03, #30
085b4                 | LR__0716
085b4                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
085b4     FF FF 7F FF 
085b8     FF 25 0E F2 | 	cmp	local04, ##-1 wz
085bc     48 00 90 5D |  if_ne	jmp	#LR__0717
085c0     00 C0 5F FF 
085c4     00 28 06 F6 | 	mov	local06, ##-1082130432
085c8     56 00 00 FF 
085cc     18 E4 05 F1 | 	add	objptr, ##44056
085d0     F2 2C 02 FB | 	rdlong	local08, objptr
085d4     03 2C 66 F0 | 	shl	local08, #3
085d8     02 00 00 FF 
085dc     38 E4 85 F1 | 	sub	objptr, ##1080
085e0     F2 2C 02 F1 | 	add	local08, objptr
085e4     16 13 02 FB | 	rdlong	arg01, local08
085e8     53 00 00 FF 
085ec     E0 E5 85 F1 | 	sub	objptr, ##42976
085f0     34 31 B1 FD | 	call	#__system____builtin_atof
085f4     FD 14 02 F6 | 	mov	arg02, result1
085f8     14 13 02 F6 | 	mov	arg01, local06
085fc     40 29 B1 FD | 	call	#__system___float_mul
08600     FD 1E 02 F6 | 	mov	local01, result1
08604     1E 22 06 F6 | 	mov	local03, #30
08608                 | LR__0717
08608     0F 29 02 F6 | 	mov	local06, local01
0860c     10 2B 02 F6 | 	mov	local07, local02
08610     11 27 02 F6 | 	mov	local05, local03
08614     69 00 00 FF 
08618     50 E4 05 F1 | 	add	objptr, ##53840
0861c     F2 1E 02 FB | 	rdlong	local01, objptr
08620     0F 2D 02 F6 | 	mov	local08, local01
08624     01 2C 66 F0 | 	shl	local08, #1
08628     0F 2D 02 F1 | 	add	local08, local01
0862c     02 2C 66 F0 | 	shl	local08, #2
08630     03 00 00 FF 
08634     00 E4 85 F1 | 	sub	objptr, ##1536
08638     F2 2C 02 F1 | 	add	local08, objptr
0863c     16 29 62 FC | 	wrlong	local06, local08
08640     03 00 00 FF 
08644     00 E4 05 F1 | 	add	objptr, ##1536
08648     F2 2C 02 FB | 	rdlong	local08, objptr
0864c     16 29 02 F6 | 	mov	local06, local08
08650     01 28 66 F0 | 	shl	local06, #1
08654     16 29 02 F1 | 	add	local06, local08
08658     02 28 66 F0 | 	shl	local06, #2
0865c     03 00 00 FF 
08660     00 E4 85 F1 | 	sub	objptr, ##1536
08664     F2 28 02 F1 | 	add	local06, objptr
08668     04 28 06 F1 | 	add	local06, #4
0866c     14 2B 62 FC | 	wrlong	local07, local06
08670     03 00 00 FF 
08674     00 E4 05 F1 | 	add	objptr, ##1536
08678     F2 2C 02 FB | 	rdlong	local08, objptr
0867c     16 2B 02 F6 | 	mov	local07, local08
08680     01 2A 66 F0 | 	shl	local07, #1
08684     16 2B 02 F1 | 	add	local07, local08
08688     02 2A 66 F0 | 	shl	local07, #2
0868c     03 00 00 FF 
08690     00 E4 85 F1 | 	sub	objptr, ##1536
08694     F2 2A 02 F1 | 	add	local07, objptr
08698     08 2A 06 F1 | 	add	local07, #8
0869c     15 27 62 FC | 	wrlong	local05, local07
086a0     03 00 00 FF 
086a4     00 E4 05 F1 | 	add	objptr, ##1536
086a8     F2 28 02 FB | 	rdlong	local06, objptr
086ac     01 28 06 F1 | 	add	local06, #1
086b0     F2 28 62 FC | 	wrlong	local06, objptr
086b4     13 00 00 FF 
086b8     38 E4 85 F1 | 	sub	objptr, ##9784
086bc     F2 28 02 FB | 	rdlong	local06, objptr
086c0     01 28 06 F1 | 	add	local06, #1
086c4     F2 28 62 FC | 	wrlong	local06, objptr
086c8     56 00 00 FF 
086cc     18 E4 85 F1 | 	sub	objptr, ##44056
086d0     C4 02 90 FD | 	jmp	#LR__0726
086d4                 | LR__0718
086d4     1F 22 06 F6 | 	mov	local03, #31
086d8     56 00 00 FF 
086dc     18 E4 05 F1 | 	add	objptr, ##44056
086e0     F2 16 02 FB | 	rdlong	arg03, objptr
086e4     03 16 66 F0 | 	shl	arg03, #3
086e8     02 00 00 FF 
086ec     38 E4 85 F1 | 	sub	objptr, ##1080
086f0     F2 16 02 F1 | 	add	arg03, objptr
086f4     0B 13 02 FB | 	rdlong	arg01, arg03
086f8     53 00 00 FF 
086fc     E0 E5 85 F1 | 	sub	objptr, ##42976
08700     09 2F 02 F6 | 	mov	local09, arg01
08704     97 06 48 FB | 	callpa	#(@LR__0720-@LR__0719)>>2,fcache_load_ptr_
08708                 | LR__0719
08708     17 FB C9 FA | 	rdbyte	result1, local09 wz
0870c     01 2E 06 51 |  if_ne	add	local09, #1
08710     F4 FF 9F 5D |  if_ne	jmp	#LR__0719
08714                 | LR__0720
08714     09 2F 82 F1 | 	sub	local09, arg01
08718     17 FB 01 F6 | 	mov	result1, local09
0871c     7A 00 00 FF 
08720     7C E4 05 F1 | 	add	objptr, ##62588
08724     F2 FA 61 FC | 	wrlong	result1, objptr
08728     30 E4 85 F1 | 	sub	objptr, #48
0872c     F2 12 02 FB | 	rdlong	arg01, objptr
08730     FD 12 82 F1 | 	sub	arg01, result1
08734     04 12 86 F1 | 	sub	arg01, #4
08738     03 12 26 F5 | 	andn	arg01, #3
0873c     F2 12 62 FC | 	wrlong	arg01, objptr
08740     30 E4 05 F1 | 	add	objptr, #48
08744     F2 14 02 FB | 	rdlong	arg02, objptr
08748     01 16 06 F6 | 	mov	arg03, #1
0874c     00 18 06 F6 | 	mov	arg04, #0
08750     6E 00 00 FF 
08754     BC E5 85 F1 | 	sub	objptr, ##56764
08758                 | '     return fill(addr, pattern, count, listPtr, 4)
08758     04 1A 06 F6 | 	mov	arg05, #4
0875c     44 F4 B0 FD | 	call	#_psram_spin2_fill
08760                 | '     pslpoke memtop,l
08760                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
08760     01 30 06 F6 | 	mov	local10, #1
08764     6E 00 00 FF 
08768     BC E5 05 F1 | 	add	objptr, ##56764
0876c     F2 32 02 FB | 	rdlong	local11, objptr
08770     7A 00 00 FF 
08774     7C E4 85 F1 | 	sub	objptr, ##62588
08778     01 32 06 F1 | 	add	local11, #1
0877c                 | LR__0721
0877c     19 31 52 F2 | 	cmps	local10, local11 wc
08780     78 00 90 3D |  if_ae	jmp	#LR__0722
08784     7A 00 00 FF 
08788     4C E4 05 F1 | 	add	objptr, ##62540
0878c     F2 2A 02 FB | 	rdlong	local07, objptr
08790     03 2A 06 F1 | 	add	local07, #3
08794     18 2B 02 F1 | 	add	local07, local10
08798     24 00 00 FF 
0879c     34 E4 85 F1 | 	sub	objptr, ##18484
087a0     F2 2C 02 FB | 	rdlong	local08, objptr
087a4     03 2C 66 F0 | 	shl	local08, #3
087a8     02 00 00 FF 
087ac     38 E4 85 F1 | 	sub	objptr, ##1080
087b0     F2 2C 02 F1 | 	add	local08, objptr
087b4     16 13 02 FB | 	rdlong	arg01, local08
087b8     18 15 02 F6 | 	mov	arg02, local10
087bc     01 16 06 F6 | 	mov	arg03, #1
087c0     53 00 00 FF 
087c4     E0 E5 85 F1 | 	sub	objptr, ##42976
087c8     B4 1E B1 FD | 	call	#__system__Mid_S
087cc     FD 14 C2 FA | 	rdbyte	arg02, result1
087d0     15 13 02 F6 | 	mov	arg01, local07
087d4     01 16 06 F6 | 	mov	arg03, #1
087d8     00 18 06 F6 | 	mov	arg04, #0
087dc     0B 00 00 FF 
087e0     C0 E4 05 F1 | 	add	objptr, ##5824
087e4                 | '     return fill(addr, pattern, count, listPtr, 1)
087e4     01 1A 06 F6 | 	mov	arg05, #1
087e8     B8 F3 B0 FD | 	call	#_psram_spin2_fill
087ec     0B 00 00 FF 
087f0     C0 E4 85 F1 | 	sub	objptr, ##5824
087f4     01 30 06 F1 | 	add	local10, #1
087f8     80 FF 9F FD | 	jmp	#LR__0721
087fc                 | LR__0722
087fc     7A 00 00 FF 
08800     4C E4 05 F1 | 	add	objptr, ##62540
08804     F2 1E 02 FB | 	rdlong	local01, objptr
08808     2B 22 06 F6 | 	mov	local03, #43
0880c     0F 29 02 F6 | 	mov	local06, local01
08810     10 2B 02 F6 | 	mov	local07, local02
08814     11 33 02 F6 | 	mov	local11, local03
08818     10 00 00 FF 
0881c     FC E5 85 F1 | 	sub	objptr, ##8700
08820     F2 30 02 FB | 	rdlong	local10, objptr
08824     18 2D 02 F6 | 	mov	local08, local10
08828     01 2C 66 F0 | 	shl	local08, #1
0882c     18 2D 02 F1 | 	add	local08, local10
08830     02 2C 66 F0 | 	shl	local08, #2
08834     03 00 00 FF 
08838     00 E4 85 F1 | 	sub	objptr, ##1536
0883c     F2 2C 02 F1 | 	add	local08, objptr
08840     16 29 62 FC | 	wrlong	local06, local08
08844     03 00 00 FF 
08848     00 E4 05 F1 | 	add	objptr, ##1536
0884c     F2 30 02 FB | 	rdlong	local10, objptr
08850     18 2D 02 F6 | 	mov	local08, local10
08854     01 2C 66 F0 | 	shl	local08, #1
08858     18 2D 02 F1 | 	add	local08, local10
0885c     02 2C 66 F0 | 	shl	local08, #2
08860     03 00 00 FF 
08864     00 E4 85 F1 | 	sub	objptr, ##1536
08868     F2 2C 02 F1 | 	add	local08, objptr
0886c     04 2C 06 F1 | 	add	local08, #4
08870     16 2B 62 FC | 	wrlong	local07, local08
08874     03 00 00 FF 
08878     00 E4 05 F1 | 	add	objptr, ##1536
0887c     F2 30 02 FB | 	rdlong	local10, objptr
08880     18 2D 02 F6 | 	mov	local08, local10
08884     01 2C 66 F0 | 	shl	local08, #1
08888     18 2D 02 F1 | 	add	local08, local10
0888c     02 2C 66 F0 | 	shl	local08, #2
08890     03 00 00 FF 
08894     00 E4 85 F1 | 	sub	objptr, ##1536
08898     F2 2C 02 F1 | 	add	local08, objptr
0889c     08 2C 06 F1 | 	add	local08, #8
088a0     16 33 62 FC | 	wrlong	local11, local08
088a4     03 00 00 FF 
088a8     00 E4 05 F1 | 	add	objptr, ##1536
088ac     F2 28 02 FB | 	rdlong	local06, objptr
088b0     01 28 06 F1 | 	add	local06, #1
088b4     F2 28 62 FC | 	wrlong	local06, objptr
088b8     13 00 00 FF 
088bc     38 E4 85 F1 | 	sub	objptr, ##9784
088c0     F2 28 02 FB | 	rdlong	local06, objptr
088c4     01 28 06 F1 | 	add	local06, #1
088c8     F2 28 62 FC | 	wrlong	local06, objptr
088cc     56 00 00 FF 
088d0     18 E4 85 F1 | 	sub	objptr, ##44056
088d4     C0 00 90 FD | 	jmp	#LR__0726
088d8                 | LR__0723
088d8     12 13 02 F6 | 	mov	arg01, local04
088dc     B8 03 B0 FD | 	call	#_getvar
088e0     56 00 00 FF 
088e4     18 E4 05 F1 | 	add	objptr, ##44056
088e8     F2 28 02 FB | 	rdlong	local06, objptr
088ec     01 28 06 F1 | 	add	local06, #1
088f0     F2 28 62 FC | 	wrlong	local06, objptr
088f4     56 00 00 FF 
088f8     18 E4 85 F1 | 	sub	objptr, ##44056
088fc     98 00 90 FD | 	jmp	#LR__0726
08900                 | LR__0724
08900     56 00 00 FF 
08904     18 E4 05 F1 | 	add	objptr, ##44056
08908     F2 28 02 FB | 	rdlong	local06, objptr
0890c     01 28 06 F1 | 	add	local06, #1
08910     F2 28 62 FC | 	wrlong	local06, objptr
08914     56 00 00 FF 
08918     18 E4 85 F1 | 	sub	objptr, ##44056
0891c     F4 F3 BF FD | 	call	#_expr
08920                 | '     ct+=1
08920                 | '     expr() 
08920                 | '     if lparts(ct).token=token_rpar then ct+=1
08920     56 00 00 FF 
08924     18 E4 05 F1 | 	add	objptr, ##44056
08928     F2 32 02 FB | 	rdlong	local11, objptr
0892c     03 32 66 F0 | 	shl	local11, #3
08930     02 00 00 FF 
08934     38 E4 85 F1 | 	sub	objptr, ##1080
08938     F2 32 02 F1 | 	add	local11, objptr
0893c     04 32 06 F1 | 	add	local11, #4
08940     19 33 02 FB | 	rdlong	local11, local11
08944     14 32 0E F2 | 	cmp	local11, #20 wz
08948     53 00 00 FF 
0894c     E0 E5 85 F1 | 	sub	objptr, ##42976
08950     44 00 90 5D |  if_ne	jmp	#LR__0726
08954     56 00 00 FF 
08958     18 E4 05 F1 | 	add	objptr, ##44056
0895c     F2 28 02 FB | 	rdlong	local06, objptr
08960     01 28 06 F1 | 	add	local06, #1
08964     F2 28 62 FC | 	wrlong	local06, objptr
08968     56 00 00 FF 
0896c     18 E4 85 F1 | 	sub	objptr, ##44056
08970     24 00 90 FD | 	jmp	#LR__0726
08974                 | LR__0725
08974     12 13 02 F6 | 	mov	arg01, local04
08978     28 00 B0 FD | 	call	#_getfun
0897c     56 00 00 FF 
08980     18 E4 05 F1 | 	add	objptr, ##44056
08984     F2 28 02 FB | 	rdlong	local06, objptr
08988     01 28 06 F1 | 	add	local06, #1
0898c     F2 28 62 FC | 	wrlong	local06, objptr
08990     56 00 00 FF 
08994     18 E4 85 F1 | 	sub	objptr, ##44056
08998                 | LR__0726
08998     A7 F0 03 F6 | 	mov	ptra, fp
0899c     B2 00 A0 FD | 	call	#popregs_
089a0                 | _getvalue_ret
089a0     2D 00 64 FD | 	ret
089a4                 | 
089a4                 | ' 
089a4                 | ' sub getfun(m as integer) ' todo - functions return type, todo" fun can have expr list after it
089a4                 | _getfun
089a4     0A 4A 05 F6 | 	mov	COUNT_, #10
089a8     A8 00 A0 FD | 	call	#pushregs_
089ac                 | _getfun_enter
089ac     09 25 02 F6 | 	mov	local04, arg01
089b0     56 00 00 FF 
089b4     18 E4 05 F1 | 	add	objptr, ##44056
089b8     F2 26 02 FB | 	rdlong	local05, objptr
089bc     13 29 02 F6 | 	mov	local06, local05
089c0     00 2A 06 F6 | 	mov	local07, #0
089c4                 | '  ' if lparts(ct+1).token=token_lpar then oldct=ct: ct+=1: expr()
089c4                 | ' oldct=ct
089c4                 | ' numpar=0
089c4                 | '   
089c4                 | ' if lparts(ct+1).token=token_lpar then
089c4     01 26 06 F1 | 	add	local05, #1
089c8     03 26 66 F0 | 	shl	local05, #3
089cc     02 00 00 FF 
089d0     38 E4 85 F1 | 	sub	objptr, ##1080
089d4     F2 26 02 F1 | 	add	local05, objptr
089d8     04 26 06 F1 | 	add	local05, #4
089dc     13 27 02 FB | 	rdlong	local05, local05
089e0     15 26 0E F2 | 	cmp	local05, #21 wz
089e4     53 00 00 FF 
089e8     E0 E5 85 F1 | 	sub	objptr, ##42976
089ec     08 01 90 5D |  if_ne	jmp	#LR__0734
089f0     56 00 00 FF 
089f4     18 E4 05 F1 | 	add	objptr, ##44056
089f8     F2 2C 02 FB | 	rdlong	local08, objptr
089fc     01 2C 06 F1 | 	add	local08, #1
08a00     F2 2C 62 FC | 	wrlong	local08, objptr
08a04     56 00 00 FF 
08a08     18 E4 85 F1 | 	sub	objptr, ##44056
08a0c                 | '   ct+=1 											' omit this lpar, this is for expr list
08a0c                 | '   do
08a0c                 | LR__0730
08a0c     56 00 00 FF 
08a10     18 E4 05 F1 | 	add	objptr, ##44056
08a14     F2 26 02 FB | 	rdlong	local05, objptr
08a18     01 26 06 F1 | 	add	local05, #1
08a1c     F2 26 62 FC | 	wrlong	local05, objptr
08a20                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
08a20                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
08a20     03 26 66 F0 | 	shl	local05, #3
08a24     02 00 00 FF 
08a28     38 E4 85 F1 | 	sub	objptr, ##1080
08a2c     F2 26 02 F1 | 	add	local05, objptr
08a30     04 26 06 F1 | 	add	local05, #4
08a34     13 2D 02 FB | 	rdlong	local08, local05
08a38     15 2C 0E F2 | 	cmp	local08, #21 wz
08a3c     53 00 00 FF 
08a40     E0 E5 85 F1 | 	sub	objptr, ##42976
08a44     40 00 90 5D |  if_ne	jmp	#LR__0731
08a48     56 00 00 FF 
08a4c     18 E4 05 F1 | 	add	objptr, ##44056
08a50     F2 2C 02 FB | 	rdlong	local08, objptr
08a54     01 2C 06 F1 | 	add	local08, #1
08a58     F2 2C 62 FC | 	wrlong	local08, objptr
08a5c     56 00 00 FF 
08a60     18 E4 85 F1 | 	sub	objptr, ##44056
08a64     AC F2 BF FD | 	call	#_expr
08a68     56 00 00 FF 
08a6c     18 E4 05 F1 | 	add	objptr, ##44056
08a70     F2 2C 02 FB | 	rdlong	local08, objptr
08a74     01 2C 06 F1 | 	add	local08, #1
08a78     F2 2C 62 FC | 	wrlong	local08, objptr
08a7c     56 00 00 FF 
08a80     18 E4 85 F1 | 	sub	objptr, ##44056
08a84     04 00 90 FD | 	jmp	#LR__0732
08a88                 | LR__0731
08a88     88 F2 BF FD | 	call	#_expr
08a8c                 | LR__0732
08a8c     01 2A 06 F1 | 	add	local07, #1
08a90     56 00 00 FF 
08a94     18 E4 05 F1 | 	add	objptr, ##44056
08a98     F2 26 02 FB | 	rdlong	local05, objptr
08a9c     03 26 66 F0 | 	shl	local05, #3
08aa0     02 00 00 FF 
08aa4     38 E4 85 F1 | 	sub	objptr, ##1080
08aa8     F2 26 02 F1 | 	add	local05, objptr
08aac     04 26 06 F1 | 	add	local05, #4
08ab0     13 2D 02 FB | 	rdlong	local08, local05
08ab4     14 2C 0E F2 | 	cmp	local08, #20 wz
08ab8     53 00 00 FF 
08abc     E0 E5 85 F1 | 	sub	objptr, ##42976
08ac0     34 00 90 AD |  if_e	jmp	#LR__0733
08ac4     56 00 00 FF 
08ac8     18 E4 05 F1 | 	add	objptr, ##44056
08acc     F2 2C 02 FB | 	rdlong	local08, objptr
08ad0     03 2C 66 F0 | 	shl	local08, #3
08ad4     02 00 00 FF 
08ad8     38 E4 85 F1 | 	sub	objptr, ##1080
08adc     F2 2C 02 F1 | 	add	local08, objptr
08ae0     04 2C 06 F1 | 	add	local08, #4
08ae4     16 2D 02 FB | 	rdlong	local08, local08
08ae8     FE 2D 0E F2 | 	cmp	local08, #510 wz
08aec     53 00 00 FF 
08af0     E0 E5 85 F1 | 	sub	objptr, ##42976
08af4     14 FF 9F 5D |  if_ne	jmp	#LR__0730
08af8                 | LR__0733
08af8                 | LR__0734
08af8     15 1F 02 F6 | 	mov	local01, local07
08afc     03 28 66 F0 | 	shl	local06, #3
08b00     53 00 00 FF 
08b04     E0 E5 05 F1 | 	add	objptr, ##42976
08b08     F2 28 02 F1 | 	add	local06, objptr
08b0c     04 28 06 F1 | 	add	local06, #4
08b10     14 23 02 FB | 	rdlong	local03, local06
08b14     0F 2D 02 F6 | 	mov	local08, local01
08b18     10 2B 02 F6 | 	mov	local07, local02
08b1c     11 29 02 F6 | 	mov	local06, local03
08b20     15 00 00 FF 
08b24     70 E4 05 F1 | 	add	objptr, ##10864
08b28     F2 26 02 FB | 	rdlong	local05, objptr
08b2c     13 13 02 F6 | 	mov	arg01, local05
08b30     01 12 66 F0 | 	shl	arg01, #1
08b34     13 13 02 F1 | 	add	arg01, local05
08b38     02 12 66 F0 | 	shl	arg01, #2
08b3c     03 00 00 FF 
08b40     00 E4 85 F1 | 	sub	objptr, ##1536
08b44     F2 12 02 F1 | 	add	arg01, objptr
08b48     09 2D 62 FC | 	wrlong	local08, arg01
08b4c     03 00 00 FF 
08b50     00 E4 05 F1 | 	add	objptr, ##1536
08b54     F2 2C 02 FB | 	rdlong	local08, objptr
08b58     16 2F 02 F6 | 	mov	local09, local08
08b5c     01 2E 66 F0 | 	shl	local09, #1
08b60     16 2F 02 F1 | 	add	local09, local08
08b64     02 2E 66 F0 | 	shl	local09, #2
08b68     03 00 00 FF 
08b6c     00 E4 85 F1 | 	sub	objptr, ##1536
08b70     F2 2E 02 F1 | 	add	local09, objptr
08b74     04 2E 06 F1 | 	add	local09, #4
08b78     17 2B 62 FC | 	wrlong	local07, local09
08b7c     03 00 00 FF 
08b80     00 E4 05 F1 | 	add	objptr, ##1536
08b84     F2 2C 02 FB | 	rdlong	local08, objptr
08b88     16 31 02 F6 | 	mov	local10, local08
08b8c     01 30 66 F0 | 	shl	local10, #1
08b90     16 31 02 F1 | 	add	local10, local08
08b94     02 30 66 F0 | 	shl	local10, #2
08b98     03 00 00 FF 
08b9c     00 E4 85 F1 | 	sub	objptr, ##1536
08ba0     F2 30 02 F1 | 	add	local10, objptr
08ba4     08 30 06 F1 | 	add	local10, #8
08ba8     18 29 62 FC | 	wrlong	local06, local10
08bac     03 00 00 FF 
08bb0     00 E4 05 F1 | 	add	objptr, ##1536
08bb4     F2 2C 02 FB | 	rdlong	local08, objptr
08bb8     01 2C 06 F1 | 	add	local08, #1
08bbc     F2 2C 62 FC | 	wrlong	local08, objptr
08bc0     69 00 00 FF 
08bc4     50 E4 85 F1 | 	sub	objptr, ##53840
08bc8                 | ' 
08bc8                 | ' t2.result.uresult=numpar
08bc8                 | ' 
08bc8                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
08bc8                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
08bc8                 | ' 
08bc8                 | '   
08bc8                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
08bc8     FF FF 7F FF 
08bcc     FF 25 0E F2 | 	cmp	local04, ##-1 wz
08bd0     B8 00 90 5D |  if_ne	jmp	#LR__0735
08bd4     15 22 06 F6 | 	mov	local03, #21
08bd8     0F 2D 02 F6 | 	mov	local08, local01
08bdc     10 2B 02 F6 | 	mov	local07, local02
08be0     11 29 02 F6 | 	mov	local06, local03
08be4     69 00 00 FF 
08be8     50 E4 05 F1 | 	add	objptr, ##53840
08bec     F2 26 02 FB | 	rdlong	local05, objptr
08bf0     13 13 02 F6 | 	mov	arg01, local05
08bf4     01 12 66 F0 | 	shl	arg01, #1
08bf8     13 13 02 F1 | 	add	arg01, local05
08bfc     02 12 66 F0 | 	shl	arg01, #2
08c00     03 00 00 FF 
08c04     00 E4 85 F1 | 	sub	objptr, ##1536
08c08     F2 12 02 F1 | 	add	arg01, objptr
08c0c     09 2D 62 FC | 	wrlong	local08, arg01
08c10     03 00 00 FF 
08c14     00 E4 05 F1 | 	add	objptr, ##1536
08c18     F2 30 02 FB | 	rdlong	local10, objptr
08c1c     18 2F 02 F6 | 	mov	local09, local10
08c20     01 2E 66 F0 | 	shl	local09, #1
08c24     18 2F 02 F1 | 	add	local09, local10
08c28     02 2E 66 F0 | 	shl	local09, #2
08c2c     03 00 00 FF 
08c30     00 E4 85 F1 | 	sub	objptr, ##1536
08c34     F2 2E 02 F1 | 	add	local09, objptr
08c38     04 2E 06 F1 | 	add	local09, #4
08c3c     17 2B 62 FC | 	wrlong	local07, local09
08c40     03 00 00 FF 
08c44     00 E4 05 F1 | 	add	objptr, ##1536
08c48     F2 2E 02 FB | 	rdlong	local09, objptr
08c4c     17 31 02 F6 | 	mov	local10, local09
08c50     01 30 66 F0 | 	shl	local10, #1
08c54     17 31 02 F1 | 	add	local10, local09
08c58     02 30 66 F0 | 	shl	local10, #2
08c5c     03 00 00 FF 
08c60     00 E4 85 F1 | 	sub	objptr, ##1536
08c64     F2 30 02 F1 | 	add	local10, objptr
08c68     08 30 06 F1 | 	add	local10, #8
08c6c     18 29 62 FC | 	wrlong	local06, local10
08c70     03 00 00 FF 
08c74     00 E4 05 F1 | 	add	objptr, ##1536
08c78     F2 2C 02 FB | 	rdlong	local08, objptr
08c7c     01 2C 06 F1 | 	add	local08, #1
08c80     F2 2C 62 FC | 	wrlong	local08, objptr
08c84     69 00 00 FF 
08c88     50 E4 85 F1 | 	sub	objptr, ##53840
08c8c                 | LR__0735
08c8c     A7 F0 03 F6 | 	mov	ptra, fp
08c90     B2 00 A0 FD | 	call	#popregs_
08c94                 | _getfun_ret
08c94     2D 00 64 FD | 	ret
08c98                 | 
08c98                 | '   
08c98                 | '   
08c98                 | ' sub getvar(m as integer) 
08c98                 | _getvar
08c98     0A 4A 05 F6 | 	mov	COUNT_, #10
08c9c     A8 00 A0 FD | 	call	#pushregs_
08ca0                 | _getvar_enter
08ca0     09 25 02 F6 | 	mov	local04, arg01
08ca4     56 00 00 FF 
08ca8     18 E4 05 F1 | 	add	objptr, ##44056
08cac     F2 14 02 FB | 	rdlong	arg02, objptr
08cb0     03 14 66 F0 | 	shl	arg02, #3
08cb4     02 00 00 FF 
08cb8     38 E4 85 F1 | 	sub	objptr, ##1080
08cbc     F2 14 02 F1 | 	add	arg02, objptr
08cc0     0A 27 02 FB | 	rdlong	local05, arg02
08cc4     13 13 02 F6 | 	mov	arg01, local05
08cc8     01 14 06 F6 | 	mov	arg02, #1
08ccc     53 00 00 FF 
08cd0     E0 E5 85 F1 | 	sub	objptr, ##42976
08cd4     18 19 B1 FD | 	call	#__system__Right_S
08cd8     FD 28 02 F6 | 	mov	local06, result1
08cdc     01 2A 66 F6 | 	neg	local07, #1
08ce0                 | ' 
08ce0                 | ' varname$=lparts(ct).part$
08ce0                 | ' suffix$=right$(varname$,1)
08ce0                 | ' j=-1
08ce0                 | ' 
08ce0                 | ' for i=0 to varnum-1
08ce0     00 2C 06 F6 | 	mov	local08, #0
08ce4     53 00 00 FF 
08ce8     DC E5 05 F1 | 	add	objptr, ##42972
08cec     F2 2E 02 FB | 	rdlong	local09, objptr
08cf0     53 00 00 FF 
08cf4     DC E5 85 F1 | 	sub	objptr, ##42972
08cf8                 | LR__0740
08cf8     17 2D 52 F2 | 	cmps	local08, local09 wc
08cfc     38 00 90 3D |  if_ae	jmp	#LR__0741
08d00                 | '   if variables(i).name=varname$ then j=i : exit
08d00     16 15 02 F6 | 	mov	arg02, local08
08d04     04 14 66 F0 | 	shl	arg02, #4
08d08     33 00 00 FF 
08d0c     DC E5 05 F1 | 	add	objptr, ##26588
08d10     F2 14 02 F1 | 	add	arg02, objptr
08d14     0A 13 02 FB | 	rdlong	arg01, arg02
08d18     13 15 02 F6 | 	mov	arg02, local05
08d1c     33 00 00 FF 
08d20     DC E5 85 F1 | 	sub	objptr, ##26588
08d24     5C F8 B0 FD | 	call	#__system___string_cmp
08d28     00 FA 0D F2 | 	cmp	result1, #0 wz
08d2c     16 2B 02 A6 |  if_e	mov	local07, local08
08d30     01 2C 06 51 |  if_ne	add	local08, #1
08d34     C0 FF 9F 5D |  if_ne	jmp	#LR__0740
08d38                 | LR__0741
08d38                 | ' if  j=-1 andalso varnum<maxvars then   
08d38     FF FF 7F FF 
08d3c     FF 2B 0E F2 | 	cmp	local07, ##-1 wz
08d40     A8 00 90 5D |  if_ne	jmp	#LR__0742
08d44     53 00 00 FF 
08d48     DC E5 05 F1 | 	add	objptr, ##42972
08d4c     F2 2E 02 FB | 	rdlong	local09, objptr
08d50     53 00 00 FF 
08d54     DC E5 85 F1 | 	sub	objptr, ##42972
08d58     01 00 00 FF 
08d5c     FF 2F 56 F2 | 	cmps	local09, ##1023 wc
08d60     88 00 90 3D |  if_ae	jmp	#LR__0742
08d64     53 00 00 FF 
08d68     DC E5 05 F1 | 	add	objptr, ##42972
08d6c     F2 2E 02 FB | 	rdlong	local09, objptr
08d70     04 2E 66 F0 | 	shl	local09, #4
08d74     20 00 00 FF 
08d78     00 E4 85 F1 | 	sub	objptr, ##16384
08d7c     F2 2E 02 F1 | 	add	local09, objptr
08d80     17 27 62 FC | 	wrlong	local05, local09
08d84     20 00 00 FF 
08d88     00 E4 05 F1 | 	add	objptr, ##16384
08d8c     F2 2E 02 FB | 	rdlong	local09, objptr
08d90     04 2E 66 F0 | 	shl	local09, #4
08d94     20 00 00 FF 
08d98     00 E4 85 F1 | 	sub	objptr, ##16384
08d9c     F2 2E 02 F1 | 	add	local09, objptr
08da0     04 2E 06 F1 | 	add	local09, #4
08da4     17 01 68 FC | 	wrlong	#0, local09
08da8     20 00 00 FF 
08dac     00 E4 05 F1 | 	add	objptr, ##16384
08db0     F2 2E 02 FB | 	rdlong	local09, objptr
08db4     04 2E 66 F0 | 	shl	local09, #4
08db8     20 00 00 FF 
08dbc     00 E4 85 F1 | 	sub	objptr, ##16384
08dc0     F2 2E 02 F1 | 	add	local09, objptr
08dc4     0C 2E 06 F1 | 	add	local09, #12
08dc8     17 39 68 FC | 	wrlong	#28, local09
08dcc     20 00 00 FF 
08dd0     00 E4 05 F1 | 	add	objptr, ##16384
08dd4     F2 2E 02 FB | 	rdlong	local09, objptr
08dd8     17 2B 02 F6 | 	mov	local07, local09
08ddc     01 2E 06 F1 | 	add	local09, #1
08de0     F2 2E 62 FC | 	wrlong	local09, objptr
08de4     53 00 00 FF 
08de8     DC E5 85 F1 | 	sub	objptr, ##42972
08dec                 | LR__0742
08dec     00 2E 06 F6 | 	mov	local09, #0
08df0                 | ' numpar=0
08df0                 | ' ' check if it is an array
08df0                 | ' 
08df0                 | ' if lparts(ct+1).token=token_lpar then
08df0     56 00 00 FF 
08df4     18 E4 05 F1 | 	add	objptr, ##44056
08df8     F2 2C 02 FB | 	rdlong	local08, objptr
08dfc     01 2C 06 F1 | 	add	local08, #1
08e00     03 2C 66 F0 | 	shl	local08, #3
08e04     02 00 00 FF 
08e08     38 E4 85 F1 | 	sub	objptr, ##1080
08e0c     F2 2C 02 F1 | 	add	local08, objptr
08e10     04 2C 06 F1 | 	add	local08, #4
08e14     16 2D 02 FB | 	rdlong	local08, local08
08e18     15 2C 0E F2 | 	cmp	local08, #21 wz
08e1c     53 00 00 FF 
08e20     E0 E5 85 F1 | 	sub	objptr, ##42976
08e24     08 01 90 5D |  if_ne	jmp	#LR__0747
08e28     56 00 00 FF 
08e2c     18 E4 05 F1 | 	add	objptr, ##44056
08e30     F2 30 02 FB | 	rdlong	local10, objptr
08e34     01 30 06 F1 | 	add	local10, #1
08e38     F2 30 62 FC | 	wrlong	local10, objptr
08e3c     56 00 00 FF 
08e40     18 E4 85 F1 | 	sub	objptr, ##44056
08e44                 | '   ct+=1 											' omit this lpar, this is for expr list
08e44                 | '   do
08e44                 | LR__0743
08e44     56 00 00 FF 
08e48     18 E4 05 F1 | 	add	objptr, ##44056
08e4c     F2 2C 02 FB | 	rdlong	local08, objptr
08e50     01 2C 06 F1 | 	add	local08, #1
08e54     F2 2C 62 FC | 	wrlong	local08, objptr
08e58                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
08e58                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
08e58     03 2C 66 F0 | 	shl	local08, #3
08e5c     02 00 00 FF 
08e60     38 E4 85 F1 | 	sub	objptr, ##1080
08e64     F2 2C 02 F1 | 	add	local08, objptr
08e68     04 2C 06 F1 | 	add	local08, #4
08e6c     16 31 02 FB | 	rdlong	local10, local08
08e70     15 30 0E F2 | 	cmp	local10, #21 wz
08e74     53 00 00 FF 
08e78     E0 E5 85 F1 | 	sub	objptr, ##42976
08e7c     40 00 90 5D |  if_ne	jmp	#LR__0744
08e80     56 00 00 FF 
08e84     18 E4 05 F1 | 	add	objptr, ##44056
08e88     F2 30 02 FB | 	rdlong	local10, objptr
08e8c     01 30 06 F1 | 	add	local10, #1
08e90     F2 30 62 FC | 	wrlong	local10, objptr
08e94     56 00 00 FF 
08e98     18 E4 85 F1 | 	sub	objptr, ##44056
08e9c     74 EE BF FD | 	call	#_expr
08ea0     56 00 00 FF 
08ea4     18 E4 05 F1 | 	add	objptr, ##44056
08ea8     F2 30 02 FB | 	rdlong	local10, objptr
08eac     01 30 06 F1 | 	add	local10, #1
08eb0     F2 30 62 FC | 	wrlong	local10, objptr
08eb4     56 00 00 FF 
08eb8     18 E4 85 F1 | 	sub	objptr, ##44056
08ebc     04 00 90 FD | 	jmp	#LR__0745
08ec0                 | LR__0744
08ec0     50 EE BF FD | 	call	#_expr
08ec4                 | LR__0745
08ec4     01 2E 06 F1 | 	add	local09, #1
08ec8     56 00 00 FF 
08ecc     18 E4 05 F1 | 	add	objptr, ##44056
08ed0     F2 2C 02 FB | 	rdlong	local08, objptr
08ed4     03 2C 66 F0 | 	shl	local08, #3
08ed8     02 00 00 FF 
08edc     38 E4 85 F1 | 	sub	objptr, ##1080
08ee0     F2 2C 02 F1 | 	add	local08, objptr
08ee4     04 2C 06 F1 | 	add	local08, #4
08ee8     16 31 02 FB | 	rdlong	local10, local08
08eec     14 30 0E F2 | 	cmp	local10, #20 wz
08ef0     53 00 00 FF 
08ef4     E0 E5 85 F1 | 	sub	objptr, ##42976
08ef8     34 00 90 AD |  if_e	jmp	#LR__0746
08efc     56 00 00 FF 
08f00     18 E4 05 F1 | 	add	objptr, ##44056
08f04     F2 30 02 FB | 	rdlong	local10, objptr
08f08     03 30 66 F0 | 	shl	local10, #3
08f0c     02 00 00 FF 
08f10     38 E4 85 F1 | 	sub	objptr, ##1080
08f14     F2 30 02 F1 | 	add	local10, objptr
08f18     04 30 06 F1 | 	add	local10, #4
08f1c     18 31 02 FB | 	rdlong	local10, local10
08f20     FE 31 0E F2 | 	cmp	local10, #510 wz
08f24     53 00 00 FF 
08f28     E0 E5 85 F1 | 	sub	objptr, ##42976
08f2c     14 FF 9F 5D |  if_ne	jmp	#LR__0743
08f30                 | LR__0746
08f30                 | LR__0747
08f30     17 21 02 F6 | 	mov	local02, local09
08f34     11 22 06 F6 | 	mov	local03, #17
08f38     15 1F 02 F6 | 	mov	local01, local07
08f3c     0F 31 02 F6 | 	mov	local10, local01
08f40     10 2F 02 F6 | 	mov	local09, local02
08f44     11 2D 02 F6 | 	mov	local08, local03
08f48     69 00 00 FF 
08f4c     50 E4 05 F1 | 	add	objptr, ##53840
08f50     F2 2A 02 FB | 	rdlong	local07, objptr
08f54     15 29 02 F6 | 	mov	local06, local07
08f58     01 28 66 F0 | 	shl	local06, #1
08f5c     15 29 02 F1 | 	add	local06, local07
08f60     02 28 66 F0 | 	shl	local06, #2
08f64     03 00 00 FF 
08f68     00 E4 85 F1 | 	sub	objptr, ##1536
08f6c     F2 28 02 F1 | 	add	local06, objptr
08f70     14 31 62 FC | 	wrlong	local10, local06
08f74     03 00 00 FF 
08f78     00 E4 05 F1 | 	add	objptr, ##1536
08f7c     F2 30 02 FB | 	rdlong	local10, objptr
08f80     18 27 02 F6 | 	mov	local05, local10
08f84     01 26 66 F0 | 	shl	local05, #1
08f88     18 27 02 F1 | 	add	local05, local10
08f8c     02 26 66 F0 | 	shl	local05, #2
08f90     03 00 00 FF 
08f94     00 E4 85 F1 | 	sub	objptr, ##1536
08f98     F2 26 02 F1 | 	add	local05, objptr
08f9c     04 26 06 F1 | 	add	local05, #4
08fa0     13 2F 62 FC | 	wrlong	local09, local05
08fa4     03 00 00 FF 
08fa8     00 E4 05 F1 | 	add	objptr, ##1536
08fac     F2 30 02 FB | 	rdlong	local10, objptr
08fb0     18 FB 01 F6 | 	mov	result1, local10
08fb4     01 FA 65 F0 | 	shl	result1, #1
08fb8     18 FB 01 F1 | 	add	result1, local10
08fbc     02 FA 65 F0 | 	shl	result1, #2
08fc0     03 00 00 FF 
08fc4     00 E4 85 F1 | 	sub	objptr, ##1536
08fc8     F2 FA 01 F1 | 	add	result1, objptr
08fcc     08 FA 05 F1 | 	add	result1, #8
08fd0     FD 2C 62 FC | 	wrlong	local08, result1
08fd4     03 00 00 FF 
08fd8     00 E4 05 F1 | 	add	objptr, ##1536
08fdc     F2 30 02 FB | 	rdlong	local10, objptr
08fe0     01 30 06 F1 | 	add	local10, #1
08fe4     F2 30 62 FC | 	wrlong	local10, objptr
08fe8     69 00 00 FF 
08fec     50 E4 85 F1 | 	sub	objptr, ##53840
08ff0                 | ' 
08ff0                 | ' t2.result.twowords(1)=numpar
08ff0                 | ' 
08ff0                 | ' 
08ff0                 | ' 
08ff0                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
08ff0                 | ' 
08ff0                 | ' 
08ff0                 | '  
08ff0                 | ' 
08ff0                 | ' 701 
08ff0                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
08ff0                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
08ff0     FF FF 7F FF 
08ff4     FF 25 0E F2 | 	cmp	local04, ##-1 wz
08ff8     B8 00 90 5D |  if_ne	jmp	#LR__0748
08ffc     15 22 06 F6 | 	mov	local03, #21
09000     0F 31 02 F6 | 	mov	local10, local01
09004     10 2F 02 F6 | 	mov	local09, local02
09008     11 2D 02 F6 | 	mov	local08, local03
0900c     69 00 00 FF 
09010     50 E4 05 F1 | 	add	objptr, ##53840
09014     F2 2A 02 FB | 	rdlong	local07, objptr
09018     15 29 02 F6 | 	mov	local06, local07
0901c     01 28 66 F0 | 	shl	local06, #1
09020     15 29 02 F1 | 	add	local06, local07
09024     02 28 66 F0 | 	shl	local06, #2
09028     03 00 00 FF 
0902c     00 E4 85 F1 | 	sub	objptr, ##1536
09030     F2 28 02 F1 | 	add	local06, objptr
09034     14 31 62 FC | 	wrlong	local10, local06
09038     03 00 00 FF 
0903c     00 E4 05 F1 | 	add	objptr, ##1536
09040     F2 1E 02 FB | 	rdlong	local01, objptr
09044     0F 27 02 F6 | 	mov	local05, local01
09048     01 26 66 F0 | 	shl	local05, #1
0904c     0F 27 02 F1 | 	add	local05, local01
09050     02 26 66 F0 | 	shl	local05, #2
09054     03 00 00 FF 
09058     00 E4 85 F1 | 	sub	objptr, ##1536
0905c     F2 26 02 F1 | 	add	local05, objptr
09060     04 26 06 F1 | 	add	local05, #4
09064     13 2F 62 FC | 	wrlong	local09, local05
09068     03 00 00 FF 
0906c     00 E4 05 F1 | 	add	objptr, ##1536
09070     F2 1E 02 FB | 	rdlong	local01, objptr
09074     0F FB 01 F6 | 	mov	result1, local01
09078     01 FA 65 F0 | 	shl	result1, #1
0907c     0F FB 01 F1 | 	add	result1, local01
09080     02 FA 65 F0 | 	shl	result1, #2
09084     03 00 00 FF 
09088     00 E4 85 F1 | 	sub	objptr, ##1536
0908c     F2 FA 01 F1 | 	add	result1, objptr
09090     08 FA 05 F1 | 	add	result1, #8
09094     FD 2C 62 FC | 	wrlong	local08, result1
09098     03 00 00 FF 
0909c     00 E4 05 F1 | 	add	objptr, ##1536
090a0     F2 30 02 FB | 	rdlong	local10, objptr
090a4     01 30 06 F1 | 	add	local10, #1
090a8     F2 30 62 FC | 	wrlong	local10, objptr
090ac     69 00 00 FF 
090b0     50 E4 85 F1 | 	sub	objptr, ##53840
090b4                 | LR__0748
090b4     A7 F0 03 F6 | 	mov	ptra, fp
090b8     B2 00 A0 FD | 	call	#popregs_
090bc                 | _getvar_ret
090bc     2D 00 64 FD | 	ret
090c0                 | 
090c0                 | ' 
090c0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
090c0                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
090c0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
090c0                 | ' 
090c0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
090c0                 | ' '--------------------------------------------- Runtime functions ------------------------------------------------------------------------ 
090c0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
090c0                 | ' 
090c0                 | ' function execute_line (astart=0 as integer) as integer
090c0                 | _execute_line
090c0     04 4A 05 F6 | 	mov	COUNT_, #4
090c4     A8 00 A0 FD | 	call	#pushregs_
090c8     78 00 00 FF 
090cc     88 E5 05 F1 | 	add	objptr, ##61832
090d0     F2 00 68 FC | 	wrlong	#0, objptr
090d4                 | ' runptr2=0
090d4                 | ' for lineptr_e=astart to lineptr-1
090d4     0F 00 00 FF 
090d8     34 E5 85 F1 | 	sub	objptr, ##7988
090dc     F2 12 62 FC | 	wrlong	arg01, objptr
090e0     04 E4 85 F1 | 	sub	objptr, #4
090e4     F2 1E 02 FB | 	rdlong	local01, objptr
090e8     69 00 00 FF 
090ec     50 E4 85 F1 | 	sub	objptr, ##53840
090f0                 | LR__0750
090f0     69 00 00 FF 
090f4     54 E4 05 F1 | 	add	objptr, ##53844
090f8     F2 FA 01 FB | 	rdlong	result1, objptr
090fc     69 00 00 FF 
09100     54 E4 85 F1 | 	sub	objptr, ##53844
09104     0F FB 51 F2 | 	cmps	result1, local01 wc
09108     98 00 90 3D |  if_ae	jmp	#LR__0751
0910c     69 00 00 FF 
09110     54 E4 05 F1 | 	add	objptr, ##53844
09114     F2 FA 01 FB | 	rdlong	result1, objptr
09118     FD 20 02 F6 | 	mov	local02, result1
0911c     01 20 66 F0 | 	shl	local02, #1
09120     FD 20 02 F1 | 	add	local02, result1
09124     02 20 66 F0 | 	shl	local02, #2
09128     03 00 00 FF 
0912c     04 E4 85 F1 | 	sub	objptr, ##1540
09130     F2 20 02 F1 | 	add	local02, objptr
09134     08 20 06 F1 | 	add	local02, #8
09138     10 21 02 FB | 	rdlong	local02, local02
0913c     10 21 E2 F8 | 	getbyte	local02, local02, #0
09140     02 20 66 F0 | 	shl	local02, #2
09144     04 00 00 FF 
09148     1C E4 85 F1 | 	sub	objptr, ##2076
0914c     F2 20 02 F1 | 	add	local02, objptr
09150     10 21 02 FB | 	rdlong	local02, local02
09154     10 23 02 F6 | 	mov	local03, local02
09158     13 20 46 F7 | 	zerox	local02, #19
0915c     14 22 46 F0 | 	shr	local03, #20
09160     02 22 66 F0 | 	shl	local03, #2
09164     ED 22 02 F1 | 	add	local03, __methods__
09168     11 23 02 FB | 	rdlong	local03, local03
0916c     62 00 00 FF 
09170     34 E4 85 F1 | 	sub	objptr, ##50228
09174     F2 24 02 F6 | 	mov	local04, objptr
09178     10 E5 01 F6 | 	mov	objptr, local02
0917c     2D 22 62 FD | 	call	local03
09180     12 E5 01 F6 | 	mov	objptr, local04
09184     69 00 00 FF 
09188     54 E4 05 F1 | 	add	objptr, ##53844
0918c     F2 24 02 FB | 	rdlong	local04, objptr
09190     01 24 06 F1 | 	add	local04, #1
09194     F2 24 62 FC | 	wrlong	local04, objptr
09198     69 00 00 FF 
0919c     54 E4 85 F1 | 	sub	objptr, ##53844
091a0     4C FF 9F FD | 	jmp	#LR__0750
091a4                 | LR__0751
091a4                 | ' return runptr2
091a4     78 00 00 FF 
091a8     88 E5 05 F1 | 	add	objptr, ##61832
091ac     F2 FA 01 FB | 	rdlong	result1, objptr
091b0     78 00 00 FF 
091b4     88 E5 85 F1 | 	sub	objptr, ##61832
091b8     A7 F0 03 F6 | 	mov	ptra, fp
091bc     B2 00 A0 FD | 	call	#popregs_
091c0                 | _execute_line_ret
091c0     2D 00 64 FD | 	ret
091c4                 | 
091c4                 | ' 
091c4                 | ' 
091c4                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
091c4                 | ' 
091c4                 | ' function pop() as expr_result
091c4                 | _pop
091c4                 | ' 
091c4                 | ' if stackpointer=0 then
091c4     62 00 00 FF 
091c8     2C E4 05 F1 | 	add	objptr, ##50220
091cc     F2 FA 09 FB | 	rdlong	result1, objptr wz
091d0     62 00 00 FF 
091d4     2C E4 85 F1 | 	sub	objptr, ##50220
091d8     FF 04 06 A6 |  if_e	mov	_var03, #255
091dc     18 00 06 A6 |  if_e	mov	_var01, #24
091e0     68 00 90 AD |  if_e	jmp	#LR__0760
091e4     62 00 00 FF 
091e8     2C E4 05 F1 | 	add	objptr, ##50220
091ec     F2 FA 01 FB | 	rdlong	result1, objptr
091f0     01 FA 85 F1 | 	sub	result1, #1
091f4     F2 FA 61 FC | 	wrlong	result1, objptr
091f8     FD FE 01 F6 | 	mov	result3, result1
091fc     01 FE 65 F0 | 	shl	result3, #1
09200     FD FE 01 F1 | 	add	result3, result1
09204     02 FE 65 F0 | 	shl	result3, #2
09208     0C 00 00 FF 
0920c     0C E4 85 F1 | 	sub	objptr, ##6156
09210     F2 FE 01 F1 | 	add	result3, objptr
09214     FF 00 02 FB | 	rdlong	_var01, result3
09218     04 FE 05 F1 | 	add	result3, #4
0921c     FF FE 01 FB | 	rdlong	result3, result3
09220     FD FC 01 F6 | 	mov	result2, result1
09224     01 FC 65 F0 | 	shl	result2, #1
09228     FD FC 01 F1 | 	add	result2, result1
0922c     02 FC 65 F0 | 	shl	result2, #2
09230     F2 FC 01 F1 | 	add	result2, objptr
09234     08 FC 05 F1 | 	add	result2, #8
09238     FE FA 01 FB | 	rdlong	result1, result2
0923c     FF 02 02 F6 | 	mov	_var02, result3
09240     FD 04 02 F6 | 	mov	_var03, result1
09244     56 00 00 FF 
09248     20 E4 85 F1 | 	sub	objptr, ##44064
0924c                 | LR__0760
0924c                 | ' return t1
0924c     01 FD 01 F6 | 	mov	result2, _var02
09250     02 FF 01 F6 | 	mov	result3, _var03
09254     00 FB 01 F6 | 	mov	result1, _var01
09258                 | _pop_ret
09258     2D 00 64 FD | 	ret
0925c                 | 
0925c                 | ' 
0925c                 | ' sub push(t1 as expr_result )
0925c                 | _push
0925c                 | ' 
0925c                 | ' 'print "In push: "; t1.result_type
0925c                 | ' 'print "In push: "; t1.result.uresult
0925c                 | ' 
0925c                 | ' if stackpointer<maxstack then 
0925c     62 00 00 FF 
09260     2C E4 05 F1 | 	add	objptr, ##50220
09264     F2 00 02 FB | 	rdlong	_var01, objptr
09268     62 00 00 FF 
0926c     2C E4 85 F1 | 	sub	objptr, ##50220
09270     01 00 00 FF 
09274     00 00 56 F2 | 	cmps	_var01, ##512 wc
09278     BC 00 90 3D |  if_ae	jmp	#LR__0770
0927c     09 01 02 FB | 	rdlong	_var01, arg01
09280     04 12 06 F1 | 	add	arg01, #4
09284     09 03 02 FB | 	rdlong	_var02, arg01
09288     04 12 06 F1 | 	add	arg01, #4
0928c     09 13 02 FB | 	rdlong	arg01, arg01
09290     62 00 00 FF 
09294     2C E4 05 F1 | 	add	objptr, ##50220
09298     F2 04 02 FB | 	rdlong	_var03, objptr
0929c     02 07 02 F6 | 	mov	_var04, _var03
092a0     01 06 66 F0 | 	shl	_var04, #1
092a4     02 07 02 F1 | 	add	_var04, _var03
092a8     02 06 66 F0 | 	shl	_var04, #2
092ac     0C 00 00 FF 
092b0     0C E4 85 F1 | 	sub	objptr, ##6156
092b4     F2 06 02 F1 | 	add	_var04, objptr
092b8     03 01 62 FC | 	wrlong	_var01, _var04
092bc     0C 00 00 FF 
092c0     0C E4 05 F1 | 	add	objptr, ##6156
092c4     F2 06 02 FB | 	rdlong	_var04, objptr
092c8     03 05 02 F6 | 	mov	_var03, _var04
092cc     01 04 66 F0 | 	shl	_var03, #1
092d0     03 05 02 F1 | 	add	_var03, _var04
092d4     02 04 66 F0 | 	shl	_var03, #2
092d8     0C 00 00 FF 
092dc     0C E4 85 F1 | 	sub	objptr, ##6156
092e0     F2 04 02 F1 | 	add	_var03, objptr
092e4     04 04 06 F1 | 	add	_var03, #4
092e8     02 03 62 FC | 	wrlong	_var02, _var03
092ec     0C 00 00 FF 
092f0     0C E4 05 F1 | 	add	objptr, ##6156
092f4     F2 06 02 FB | 	rdlong	_var04, objptr
092f8     03 05 02 F6 | 	mov	_var03, _var04
092fc     01 04 66 F0 | 	shl	_var03, #1
09300     03 05 02 F1 | 	add	_var03, _var04
09304     02 04 66 F0 | 	shl	_var03, #2
09308     0C 00 00 FF 
0930c     0C E4 85 F1 | 	sub	objptr, ##6156
09310     F2 04 02 F1 | 	add	_var03, objptr
09314     08 04 06 F1 | 	add	_var03, #8
09318     02 13 62 FC | 	wrlong	arg01, _var03
0931c     0C 00 00 FF 
09320     0C E4 05 F1 | 	add	objptr, ##6156
09324     F2 00 02 FB | 	rdlong	_var01, objptr
09328     01 00 06 F1 | 	add	_var01, #1
0932c     F2 00 62 FC | 	wrlong	_var01, objptr
09330     62 00 00 FF 
09334     2C E4 85 F1 | 	sub	objptr, ##50220
09338                 | LR__0770
09338                 | _push_ret
09338     2D 00 64 FD | 	ret
0933c                 | 
0933c                 | ' 
0933c                 | ' ' ------------------ push a variable on the stack as an independent operation called by execute_line 
0933c                 | ' 
0933c                 | ' sub do_push
0933c                 | _do_push
0933c                 | ' if stackpointer<maxstack then 
0933c     62 00 00 FF 
09340     2C E4 05 F1 | 	add	objptr, ##50220
09344     F2 00 02 FB | 	rdlong	_var01, objptr
09348     62 00 00 FF 
0934c     2C E4 85 F1 | 	sub	objptr, ##50220
09350     01 00 00 FF 
09354     00 00 56 F2 | 	cmps	_var01, ##512 wc
09358     F8 00 90 3D |  if_ae	jmp	#LR__0780
0935c     69 00 00 FF 
09360     54 E4 05 F1 | 	add	objptr, ##53844
09364     F2 02 02 FB | 	rdlong	_var02, objptr
09368     01 05 02 F6 | 	mov	_var03, _var02
0936c     01 04 66 F0 | 	shl	_var03, #1
09370     01 05 02 F1 | 	add	_var03, _var02
09374     02 04 66 F0 | 	shl	_var03, #2
09378     03 00 00 FF 
0937c     04 E4 85 F1 | 	sub	objptr, ##1540
09380     F2 04 02 F1 | 	add	_var03, objptr
09384     02 01 02 FB | 	rdlong	_var01, _var03
09388     04 04 06 F1 | 	add	_var03, #4
0938c     02 07 02 FB | 	rdlong	_var04, _var03
09390     01 05 02 F6 | 	mov	_var03, _var02
09394     01 04 66 F0 | 	shl	_var03, #1
09398     01 05 02 F1 | 	add	_var03, _var02
0939c     02 04 66 F0 | 	shl	_var03, #2
093a0     F2 04 02 F1 | 	add	_var03, objptr
093a4     08 04 06 F1 | 	add	_var03, #8
093a8     02 03 02 FB | 	rdlong	_var02, _var03
093ac     04 00 00 FF 
093b0     24 E4 85 F1 | 	sub	objptr, ##2084
093b4     F2 04 02 FB | 	rdlong	_var03, objptr
093b8     02 09 02 F6 | 	mov	_var05, _var03
093bc     01 08 66 F0 | 	shl	_var05, #1
093c0     02 09 02 F1 | 	add	_var05, _var03
093c4     02 08 66 F0 | 	shl	_var05, #2
093c8     0C 00 00 FF 
093cc     0C E4 85 F1 | 	sub	objptr, ##6156
093d0     F2 08 02 F1 | 	add	_var05, objptr
093d4     04 01 62 FC | 	wrlong	_var01, _var05
093d8     0C 00 00 FF 
093dc     0C E4 05 F1 | 	add	objptr, ##6156
093e0     F2 08 02 FB | 	rdlong	_var05, objptr
093e4     04 05 02 F6 | 	mov	_var03, _var05
093e8     01 04 66 F0 | 	shl	_var03, #1
093ec     04 05 02 F1 | 	add	_var03, _var05
093f0     02 04 66 F0 | 	shl	_var03, #2
093f4     0C 00 00 FF 
093f8     0C E4 85 F1 | 	sub	objptr, ##6156
093fc     F2 04 02 F1 | 	add	_var03, objptr
09400     04 04 06 F1 | 	add	_var03, #4
09404     02 07 62 FC | 	wrlong	_var04, _var03
09408     0C 00 00 FF 
0940c     0C E4 05 F1 | 	add	objptr, ##6156
09410     F2 08 02 FB | 	rdlong	_var05, objptr
09414     04 07 02 F6 | 	mov	_var04, _var05
09418     01 06 66 F0 | 	shl	_var04, #1
0941c     04 07 02 F1 | 	add	_var04, _var05
09420     02 06 66 F0 | 	shl	_var04, #2
09424     0C 00 00 FF 
09428     0C E4 85 F1 | 	sub	objptr, ##6156
0942c     F2 06 02 F1 | 	add	_var04, objptr
09430     08 06 06 F1 | 	add	_var04, #8
09434     03 03 62 FC | 	wrlong	_var02, _var04
09438     0C 00 00 FF 
0943c     0C E4 05 F1 | 	add	objptr, ##6156
09440     F2 00 02 FB | 	rdlong	_var01, objptr
09444     01 00 06 F1 | 	add	_var01, #1
09448     F2 00 62 FC | 	wrlong	_var01, objptr
0944c     62 00 00 FF 
09450     2C E4 85 F1 | 	sub	objptr, ##50220
09454                 | LR__0780
09454                 | _do_push_ret
09454     2D 00 64 FD | 	ret
09458                 | 
09458                 | ' 
09458                 | '   
09458                 | ' sub csave_block(address as ulong)
09458                 | _csave_block
09458     09 01 02 F6 | 	mov	_var01, arg01
0945c                 | ' 
0945c                 | ' ' let it be 1k blocks=256 longs=8 kbits=32 k samples
0945c                 | ' ' we enter it at the state of playing 1 kHz header tone
0945c                 | ' 
0945c                 | ' for i=0 to 63 step 2
0945c     00 02 06 F6 | 	mov	_var02, #0
09460                 | LR__0790
09460                 | '   do: loop until lpeek(base+32*7)>32768
09460     55 00 00 FF 
09464     E4 E5 05 F1 | 	add	objptr, ##44004
09468     97 0C 48 FB | 	callpa	#(@LR__0792-@LR__0791)>>2,fcache_load_ptr_
0946c                 | LR__0791
0946c     F2 12 02 FB | 	rdlong	arg01, objptr
09470     E0 12 06 F1 | 	add	arg01, #224
09474     09 FB 01 FB | 	rdlong	result1, arg01
09478     40 00 00 FF 
0947c     01 FA 55 F2 | 	cmps	result1, ##32769 wc
09480     E8 FF 9F CD |  if_b	jmp	#LR__0791
09484                 | LR__0792
09484     00 13 02 F6 | 	mov	arg01, _var01
09488     01 05 02 F6 | 	mov	_var03, _var02
0948c     02 04 66 F0 | 	shl	_var03, #2
09490     02 13 02 F1 | 	add	arg01, _var03
09494     09 07 02 FB | 	rdlong	_var04, arg01
09498     24 00 00 FF 
0949c     B8 E4 05 F1 | 	add	objptr, ##18616
094a0     F2 06 62 FC | 	wrlong	_var04, objptr
094a4     7A 00 00 FF 
094a8     9C E4 85 F1 | 	sub	objptr, ##62620
094ac                 | '   q=lpeek(address+4*i)
094ac                 | '      for bit=0 to 31
094ac     00 08 06 F6 | 	mov	_var05, #0
094b0     97 84 48 FB | 	callpa	#(@LR__0797-@LR__0793)>>2,fcache_load_ptr_
094b4                 | LR__0793
094b4                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
094b4     7A 00 00 FF 
094b8     9C E4 05 F1 | 	add	objptr, ##62620
094bc     F2 06 02 FB | 	rdlong	_var04, objptr
094c0     7A 00 00 FF 
094c4     9C E4 85 F1 | 	sub	objptr, ##62620
094c8     04 05 C2 F9 | 	decod	_var03, _var05
094cc     02 07 CA F7 | 	test	_var04, _var03 wz
094d0     60 00 90 AD |  if_e	jmp	#LR__0794
094d4     04 05 02 F6 | 	mov	_var03, _var05
094d8     02 04 66 F0 | 	shl	_var03, #2
094dc     76 00 00 FF 
094e0     80 E4 05 F1 | 	add	objptr, ##60544
094e4     F2 04 02 F1 | 	add	_var03, objptr
094e8     02 FF 48 FC | 	wrbyte	#127, _var03
094ec     04 05 02 F6 | 	mov	_var03, _var05
094f0     02 04 66 F0 | 	shl	_var03, #2
094f4     01 04 06 F1 | 	add	_var03, #1
094f8     F2 04 02 F1 | 	add	_var03, objptr
094fc     02 01 49 FC | 	wrbyte	#128, _var03
09500     04 05 02 F6 | 	mov	_var03, _var05
09504     02 04 66 F0 | 	shl	_var03, #2
09508     02 04 06 F1 | 	add	_var03, #2
0950c     F2 04 02 F1 | 	add	_var03, objptr
09510     02 FF 48 FC | 	wrbyte	#127, _var03
09514     04 05 02 F6 | 	mov	_var03, _var05
09518     02 04 66 F0 | 	shl	_var03, #2
0951c     03 04 06 F1 | 	add	_var03, #3
09520     F2 04 02 F1 | 	add	_var03, objptr
09524     02 01 49 FC | 	wrbyte	#128, _var03
09528     76 00 00 FF 
0952c     80 E4 85 F1 | 	sub	objptr, ##60544
09530     5C 00 90 FD | 	jmp	#LR__0795
09534                 | LR__0794
09534     04 05 02 F6 | 	mov	_var03, _var05
09538     02 04 66 F0 | 	shl	_var03, #2
0953c     76 00 00 FF 
09540     80 E4 05 F1 | 	add	objptr, ##60544
09544     F2 04 02 F1 | 	add	_var03, objptr
09548     02 01 49 FC | 	wrbyte	#128, _var03
0954c     04 05 02 F6 | 	mov	_var03, _var05
09550     02 04 66 F0 | 	shl	_var03, #2
09554     01 04 06 F1 | 	add	_var03, #1
09558     F2 04 02 F1 | 	add	_var03, objptr
0955c     02 01 49 FC | 	wrbyte	#128, _var03
09560     04 05 02 F6 | 	mov	_var03, _var05
09564     02 04 66 F0 | 	shl	_var03, #2
09568     02 04 06 F1 | 	add	_var03, #2
0956c     F2 04 02 F1 | 	add	_var03, objptr
09570     02 FF 48 FC | 	wrbyte	#127, _var03
09574     04 05 02 F6 | 	mov	_var03, _var05
09578     02 04 66 F0 | 	shl	_var03, #2
0957c     03 04 06 F1 | 	add	_var03, #3
09580     F2 04 02 F1 | 	add	_var03, objptr
09584     02 FF 48 FC | 	wrbyte	#127, _var03
09588     76 00 00 FF 
0958c     80 E4 85 F1 | 	sub	objptr, ##60544
09590                 | LR__0795
09590     01 08 06 F1 | 	add	_var05, #1
09594     20 08 56 F2 | 	cmps	_var05, #32 wc
09598     18 FF 9F CD |  if_b	jmp	#LR__0793
0959c                 | '   do: loop until lpeek(base+32*7)<32768
0959c     55 00 00 FF 
095a0     E4 E5 05 F1 | 	add	objptr, ##44004
095a4                 | LR__0796
095a4     F2 12 02 FB | 	rdlong	arg01, objptr
095a8     E0 12 06 F1 | 	add	arg01, #224
095ac     09 FB 01 FB | 	rdlong	result1, arg01
095b0     40 00 00 FF 
095b4     00 FA 55 F2 | 	cmps	result1, ##32768 wc
095b8     E8 FF 9F 3D |  if_ae	jmp	#LR__0796
095bc                 | LR__0797
095bc     00 13 02 F6 | 	mov	arg01, _var01
095c0     04 12 06 F1 | 	add	arg01, #4
095c4     01 05 02 F6 | 	mov	_var03, _var02
095c8     02 04 66 F0 | 	shl	_var03, #2
095cc     02 13 02 F1 | 	add	arg01, _var03
095d0     09 07 02 FB | 	rdlong	_var04, arg01
095d4     24 00 00 FF 
095d8     B8 E4 05 F1 | 	add	objptr, ##18616
095dc     F2 06 62 FC | 	wrlong	_var04, objptr
095e0     7A 00 00 FF 
095e4     9C E4 85 F1 | 	sub	objptr, ##62620
095e8                 | '   q=lpeek(address+4+4*i)
095e8                 | '      for bit=0 to 31
095e8     00 08 06 F6 | 	mov	_var05, #0
095ec     97 94 48 FB | 	callpa	#(@LR__0801-@LR__0798)>>2,fcache_load_ptr_
095f0                 | LR__0798
095f0                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
095f0     7A 00 00 FF 
095f4     9C E4 05 F1 | 	add	objptr, ##62620
095f8     F2 06 02 FB | 	rdlong	_var04, objptr
095fc     7A 00 00 FF 
09600     9C E4 85 F1 | 	sub	objptr, ##62620
09604     04 05 C2 F9 | 	decod	_var03, _var05
09608     02 07 CA F7 | 	test	_var04, _var03 wz
0960c     80 00 90 AD |  if_e	jmp	#LR__0799
09610     04 0B 02 F6 | 	mov	_var06, _var05
09614     02 0A 66 F0 | 	shl	_var06, #2
09618     80 04 06 F6 | 	mov	_var03, #128
0961c     05 05 02 F1 | 	add	_var03, _var06
09620     76 00 00 FF 
09624     80 E4 05 F1 | 	add	objptr, ##60544
09628     F2 04 02 F1 | 	add	_var03, objptr
0962c     02 FF 48 FC | 	wrbyte	#127, _var03
09630     04 0B 02 F6 | 	mov	_var06, _var05
09634     02 0A 66 F0 | 	shl	_var06, #2
09638     80 04 06 F6 | 	mov	_var03, #128
0963c     05 05 02 F1 | 	add	_var03, _var06
09640     01 04 06 F1 | 	add	_var03, #1
09644     F2 04 02 F1 | 	add	_var03, objptr
09648     02 01 49 FC | 	wrbyte	#128, _var03
0964c     04 0B 02 F6 | 	mov	_var06, _var05
09650     02 0A 66 F0 | 	shl	_var06, #2
09654     80 04 06 F6 | 	mov	_var03, #128
09658     05 05 02 F1 | 	add	_var03, _var06
0965c     02 04 06 F1 | 	add	_var03, #2
09660     F2 04 02 F1 | 	add	_var03, objptr
09664     02 FF 48 FC | 	wrbyte	#127, _var03
09668     04 0B 02 F6 | 	mov	_var06, _var05
0966c     02 0A 66 F0 | 	shl	_var06, #2
09670     80 04 06 F6 | 	mov	_var03, #128
09674     05 05 02 F1 | 	add	_var03, _var06
09678     03 04 06 F1 | 	add	_var03, #3
0967c     F2 04 02 F1 | 	add	_var03, objptr
09680     02 01 49 FC | 	wrbyte	#128, _var03
09684     76 00 00 FF 
09688     80 E4 85 F1 | 	sub	objptr, ##60544
0968c     7C 00 90 FD | 	jmp	#LR__0800
09690                 | LR__0799
09690     04 0B 02 F6 | 	mov	_var06, _var05
09694     02 0A 66 F0 | 	shl	_var06, #2
09698     80 04 06 F6 | 	mov	_var03, #128
0969c     05 05 02 F1 | 	add	_var03, _var06
096a0     76 00 00 FF 
096a4     80 E4 05 F1 | 	add	objptr, ##60544
096a8     F2 04 02 F1 | 	add	_var03, objptr
096ac     02 01 49 FC | 	wrbyte	#128, _var03
096b0     04 0B 02 F6 | 	mov	_var06, _var05
096b4     02 0A 66 F0 | 	shl	_var06, #2
096b8     80 04 06 F6 | 	mov	_var03, #128
096bc     05 05 02 F1 | 	add	_var03, _var06
096c0     01 04 06 F1 | 	add	_var03, #1
096c4     F2 04 02 F1 | 	add	_var03, objptr
096c8     02 01 49 FC | 	wrbyte	#128, _var03
096cc     04 0B 02 F6 | 	mov	_var06, _var05
096d0     02 0A 66 F0 | 	shl	_var06, #2
096d4     80 04 06 F6 | 	mov	_var03, #128
096d8     05 05 02 F1 | 	add	_var03, _var06
096dc     02 04 06 F1 | 	add	_var03, #2
096e0     F2 04 02 F1 | 	add	_var03, objptr
096e4     02 FF 48 FC | 	wrbyte	#127, _var03
096e8     04 0B 02 F6 | 	mov	_var06, _var05
096ec     02 0A 66 F0 | 	shl	_var06, #2
096f0     80 04 06 F6 | 	mov	_var03, #128
096f4     05 05 02 F1 | 	add	_var03, _var06
096f8     03 04 06 F1 | 	add	_var03, #3
096fc     F2 04 02 F1 | 	add	_var03, objptr
09700     02 FF 48 FC | 	wrbyte	#127, _var03
09704     76 00 00 FF 
09708     80 E4 85 F1 | 	sub	objptr, ##60544
0970c                 | LR__0800
0970c     01 08 06 F1 | 	add	_var05, #1
09710     20 08 56 F2 | 	cmps	_var05, #32 wc
09714     D8 FE 9F CD |  if_b	jmp	#LR__0798
09718                 | LR__0801
09718     02 02 06 F1 | 	add	_var02, #2
0971c     40 02 56 F2 | 	cmps	_var02, #64 wc
09720     3C FD 9F CD |  if_b	jmp	#LR__0790
09724                 | ' do: loop until lpeek(base+32*7)>32768
09724     55 00 00 FF 
09728     E4 E5 05 F1 | 	add	objptr, ##44004
0972c     97 84 48 FB | 	callpa	#(@LR__0810-@LR__0802)>>2,fcache_load_ptr_
09730                 | LR__0802
09730     F2 12 02 FB | 	rdlong	arg01, objptr
09734     E0 12 06 F1 | 	add	arg01, #224
09738     09 FB 01 FB | 	rdlong	result1, arg01
0973c     40 00 00 FF 
09740     01 FA 55 F2 | 	cmps	result1, ##32769 wc
09744     E8 FF 9F CD |  if_b	jmp	#LR__0802
09748     55 00 00 FF 
0974c     E4 E5 85 F1 | 	sub	objptr, ##44004
09750                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
09750     00 02 06 F6 | 	mov	_var02, #0
09754                 | LR__0803
09754     01 07 52 F6 | 	abs	_var04, _var02 wc
09758     07 06 06 F5 | 	and	_var04, #7
0975c     03 07 82 F6 | 	negc	_var04, _var04
09760     04 06 56 F2 | 	cmps	_var04, #4 wc
09764     20 00 90 3D |  if_ae	jmp	#LR__0804
09768     01 0B 02 F6 | 	mov	_var06, _var02
0976c     76 00 00 FF 
09770     80 E4 05 F1 | 	add	objptr, ##60544
09774     F2 0A 02 F1 | 	add	_var06, objptr
09778     05 FF 48 FC | 	wrbyte	#127, _var06
0977c     76 00 00 FF 
09780     80 E4 85 F1 | 	sub	objptr, ##60544
09784     1C 00 90 FD | 	jmp	#LR__0805
09788                 | LR__0804
09788     01 0B 02 F6 | 	mov	_var06, _var02
0978c     76 00 00 FF 
09790     80 E4 05 F1 | 	add	objptr, ##60544
09794     F2 0A 02 F1 | 	add	_var06, objptr
09798     05 01 49 FC | 	wrbyte	#128, _var06
0979c     76 00 00 FF 
097a0     80 E4 85 F1 | 	sub	objptr, ##60544
097a4                 | LR__0805
097a4     01 02 06 F1 | 	add	_var02, #1
097a8     80 02 56 F2 | 	cmps	_var02, #128 wc
097ac     A4 FF 9F CD |  if_b	jmp	#LR__0803
097b0                 | ' 
097b0                 | ' do: loop until lpeek(base+32*7)<32768
097b0     55 00 00 FF 
097b4     E4 E5 05 F1 | 	add	objptr, ##44004
097b8                 | LR__0806
097b8     F2 12 02 FB | 	rdlong	arg01, objptr
097bc     E0 12 06 F1 | 	add	arg01, #224
097c0     09 FB 01 FB | 	rdlong	result1, arg01
097c4     40 00 00 FF 
097c8     00 FA 55 F2 | 	cmps	result1, ##32768 wc
097cc     E8 FF 9F 3D |  if_ae	jmp	#LR__0806
097d0     55 00 00 FF 
097d4     E4 E5 85 F1 | 	sub	objptr, ##44004
097d8                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
097d8     80 02 06 F6 | 	mov	_var02, #128
097dc                 | LR__0807
097dc     01 07 52 F6 | 	abs	_var04, _var02 wc
097e0     07 06 06 F5 | 	and	_var04, #7
097e4     03 07 82 F6 | 	negc	_var04, _var04
097e8     04 06 56 F2 | 	cmps	_var04, #4 wc
097ec     20 00 90 3D |  if_ae	jmp	#LR__0808
097f0     01 0B 02 F6 | 	mov	_var06, _var02
097f4     76 00 00 FF 
097f8     80 E4 05 F1 | 	add	objptr, ##60544
097fc     F2 0A 02 F1 | 	add	_var06, objptr
09800     05 FF 48 FC | 	wrbyte	#127, _var06
09804     76 00 00 FF 
09808     80 E4 85 F1 | 	sub	objptr, ##60544
0980c     1C 00 90 FD | 	jmp	#LR__0809
09810                 | LR__0808
09810     01 0B 02 F6 | 	mov	_var06, _var02
09814     76 00 00 FF 
09818     80 E4 05 F1 | 	add	objptr, ##60544
0981c     F2 0A 02 F1 | 	add	_var06, objptr
09820     05 01 49 FC | 	wrbyte	#128, _var06
09824     76 00 00 FF 
09828     80 E4 85 F1 | 	sub	objptr, ##60544
0982c                 | LR__0809
0982c     01 02 06 F1 | 	add	_var02, #1
09830     00 03 16 F2 | 	cmp	_var02, #256 wc
09834     A4 FF 9F CD |  if_b	jmp	#LR__0807
09838                 | LR__0810
09838                 | _csave_block_ret
09838     2D 00 64 FD | 	ret
0983c                 | 
0983c                 | ' 
0983c                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
0983c                 | _csave_addtoblock
0983c     04 4A 05 F6 | 	mov	COUNT_, #4
09840     A8 00 A0 FD | 	call	#pushregs_
09844     09 1F 02 F6 | 	mov	local01, arg01
09848                 | ' 
09848                 | ' 
09848                 | ' if force=0 then
09848     07 14 4E F7 | 	zerox	arg02, #7 wz
0984c     78 00 90 5D |  if_ne	jmp	#LR__0820
09850     78 00 00 FF 
09854     80 E5 05 F1 | 	add	objptr, ##61824
09858     F2 14 02 FB | 	rdlong	arg02, objptr
0985c     02 00 00 FF 
09860     00 E4 85 F1 | 	sub	objptr, ##1024
09864     F2 14 02 F1 | 	add	arg02, objptr
09868     0A 1F 42 FC | 	wrbyte	local01, arg02
0986c     02 00 00 FF 
09870     00 E4 05 F1 | 	add	objptr, ##1024
09874     F2 1E 02 FB | 	rdlong	local01, objptr
09878     01 1E 06 F1 | 	add	local01, #1
0987c     F2 1E 62 FC | 	wrlong	local01, objptr
09880                 | '   block(blockptr)=d
09880                 | '   blockptr+=1
09880                 | '   if blockptr>=255 then
09880     78 00 00 FF 
09884     80 E5 85 F1 | 	sub	objptr, ##61824
09888     FF 1E 16 F2 | 	cmp	local01, #255 wc
0988c     E4 00 90 CD |  if_b	jmp	#LR__0824
09890     76 00 00 FF 
09894     80 E5 05 F1 | 	add	objptr, ##60800
09898     F2 12 02 F6 | 	mov	arg01, objptr
0989c     76 00 00 FF 
098a0     80 E5 85 F1 | 	sub	objptr, ##60800
098a4     B0 FB BF FD | 	call	#_csave_block
098a8     78 00 00 FF 
098ac     80 E5 05 F1 | 	add	objptr, ##61824
098b0     F2 00 68 FC | 	wrlong	#0, objptr
098b4     78 00 00 FF 
098b8     80 E5 85 F1 | 	sub	objptr, ##61824
098bc     2C 13 06 F6 | 	mov	arg01, #300
098c0     8C EF B0 FD | 	call	#__system___waitms
098c4     AC 00 90 FD | 	jmp	#LR__0824
098c8                 | LR__0820
098c8     78 00 00 FF 
098cc     80 E5 05 F1 | 	add	objptr, ##61824
098d0     F2 20 02 FB | 	rdlong	local02, objptr
098d4     02 00 00 FF 
098d8     00 E4 85 F1 | 	sub	objptr, ##1024
098dc     F2 20 02 F1 | 	add	local02, objptr
098e0     10 1F 42 FC | 	wrbyte	local01, local02
098e4                 | '   block(blockptr)=d
098e4                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
098e4     02 00 00 FF 
098e8     00 E4 05 F1 | 	add	objptr, ##1024
098ec     F2 22 02 FB | 	rdlong	local03, objptr
098f0     78 00 00 FF 
098f4     80 E5 85 F1 | 	sub	objptr, ##61824
098f8     FF 22 16 F2 | 	cmp	local03, #255 wc
098fc     40 00 90 3D |  if_ae	jmp	#LR__0823
09900     78 00 00 FF 
09904     80 E5 05 F1 | 	add	objptr, ##61824
09908     F2 24 02 FB | 	rdlong	local04, objptr
0990c     78 00 00 FF 
09910     80 E5 85 F1 | 	sub	objptr, ##61824
09914                 | LR__0821
09914     00 25 56 F2 | 	cmps	local04, #256 wc
09918     24 00 90 3D |  if_ae	jmp	#LR__0822
0991c     12 21 02 F6 | 	mov	local02, local04
09920     76 00 00 FF 
09924     80 E5 05 F1 | 	add	objptr, ##60800
09928     F2 20 02 F1 | 	add	local02, objptr
0992c     10 01 48 FC | 	wrbyte	#0, local02
09930     01 24 06 F1 | 	add	local04, #1
09934     76 00 00 FF 
09938     80 E5 85 F1 | 	sub	objptr, ##60800
0993c     D4 FF 9F FD | 	jmp	#LR__0821
09940                 | LR__0822
09940                 | LR__0823
09940     76 00 00 FF 
09944     80 E5 05 F1 | 	add	objptr, ##60800
09948     F2 12 02 F6 | 	mov	arg01, objptr
0994c     76 00 00 FF 
09950     80 E5 85 F1 | 	sub	objptr, ##60800
09954     00 FB BF FD | 	call	#_csave_block
09958     78 00 00 FF 
0995c     80 E5 05 F1 | 	add	objptr, ##61824
09960     F2 00 68 FC | 	wrlong	#0, objptr
09964     78 00 00 FF 
09968     80 E5 85 F1 | 	sub	objptr, ##61824
0996c     2C 13 06 F6 | 	mov	arg01, #300
09970     DC EE B0 FD | 	call	#__system___waitms
09974                 | LR__0824
09974     A7 F0 03 F6 | 	mov	ptra, fp
09978     B2 00 A0 FD | 	call	#popregs_
0997c                 | _csave_addtoblock_ret
0997c     2D 00 64 FD | 	ret
09980                 | 
09980                 | ' 
09980                 | ' sub test_csave
09980                 | _test_csave
09980     04 4A 05 F6 | 	mov	COUNT_, #4
09984     A8 00 A0 FD | 	call	#pushregs_
09988     C0 F0 07 F1 | 	add	ptra, #192
0998c                 | ' 'dim fileheader,savestart, saveptr as ulong
0998c                 | ' 
0998c                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0998c     69 00 00 FF 
09990     58 E4 05 F1 | 	add	objptr, ##53848
09994     F2 12 02 FB | 	rdlong	arg01, objptr
09998     69 00 00 FF 
0999c     58 E4 85 F1 | 	sub	objptr, ##53848
099a0     50 B8 B0 FD | 	call	#_pslpeek
099a4     FF FF 7F FF 
099a8     FF FB 0D F2 | 	cmp	result1, ##-1 wz
099ac     0C 00 90 5D |  if_ne	jmp	#LR__0830
099b0     1B 12 06 F6 | 	mov	arg01, #27
099b4     80 B6 B0 FD | 	call	#_printerror
099b8     0C 03 90 FD | 	jmp	#LR__0842
099bc                 | LR__0830
099bc     04 F8 BF FD | 	call	#_pop
099c0     FF 1E 02 F6 | 	mov	local01, result3
099c4     90 4E 05 F1 | 	add	fp, #144
099c8     A7 FA 61 FC | 	wrlong	result1, fp
099cc     04 4E 05 F1 | 	add	fp, #4
099d0     A7 FC 61 FC | 	wrlong	result2, fp
099d4     04 4E 05 F1 | 	add	fp, #4
099d8     A7 1E 62 FC | 	wrlong	local01, fp
099dc                 | ' t1=pop()
099dc                 | ' if t1.result_type<>result_string then name$="noname.bas" else name$=t1.result.sresult
099dc     98 4E 85 F1 | 	sub	fp, #152
099e0     1F 1E 0E F2 | 	cmp	local01, #31 wz
099e4     3E 01 00 5F 
099e8     2E 1F 06 56 |  if_ne	mov	local01, ##@LR__4557
099ec     8C 4E 05 51 |  if_ne	add	fp, #140
099f0     A7 1E 62 5C |  if_ne	wrlong	local01, fp
099f4     8C 4E 85 51 |  if_ne	sub	fp, #140
099f8     90 4E 05 A1 |  if_e	add	fp, #144
099fc     A7 1E 02 AB |  if_e	rdlong	local01, fp
09a00     04 4E 85 A1 |  if_e	sub	fp, #4
09a04     A7 1E 62 AC |  if_e	wrlong	local01, fp
09a08     8C 4E 85 A1 |  if_e	sub	fp, #140
09a0c                 | ' 
09a0c                 | ' ' prepare 1 kHz header wave
09a0c                 | ' 
09a0c                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
09a0c     A7 00 68 FC | 	wrlong	#0, fp
09a10     97 34 48 FB | 	callpa	#(@LR__0834-@LR__0831)>>2,fcache_load_ptr_
09a14                 | LR__0831
09a14     A7 1E 02 FB | 	rdlong	local01, fp
09a18     0F 1F 52 F6 | 	abs	local01, local01 wc
09a1c     07 1E 06 F5 | 	and	local01, #7
09a20     0F 1F 82 F6 | 	negc	local01, local01
09a24     04 1E 56 F2 | 	cmps	local01, #4 wc
09a28     20 00 90 3D |  if_ae	jmp	#LR__0832
09a2c     A7 1E 02 FB | 	rdlong	local01, fp
09a30     76 00 00 FF 
09a34     80 E4 05 F1 | 	add	objptr, ##60544
09a38     F2 1E 02 F1 | 	add	local01, objptr
09a3c     0F FF 48 FC | 	wrbyte	#127, local01
09a40     76 00 00 FF 
09a44     80 E4 85 F1 | 	sub	objptr, ##60544
09a48     1C 00 90 FD | 	jmp	#LR__0833
09a4c                 | LR__0832
09a4c     A7 1E 02 FB | 	rdlong	local01, fp
09a50     76 00 00 FF 
09a54     80 E4 05 F1 | 	add	objptr, ##60544
09a58     F2 1E 02 F1 | 	add	local01, objptr
09a5c     0F 01 49 FC | 	wrbyte	#128, local01
09a60     76 00 00 FF 
09a64     80 E4 85 F1 | 	sub	objptr, ##60544
09a68                 | LR__0833
09a68     A7 1E 02 FB | 	rdlong	local01, fp
09a6c     01 1E 06 F1 | 	add	local01, #1
09a70     A7 1E 62 FC | 	wrlong	local01, fp
09a74     00 1F 56 F2 | 	cmps	local01, #256 wc
09a78     98 FF 9F CD |  if_b	jmp	#LR__0831
09a7c                 | LR__0834
09a7c     76 00 00 FF 
09a80     80 E4 05 F1 | 	add	objptr, ##60544
09a84     F2 14 02 F6 | 	mov	arg02, objptr
09a88     07 12 06 F6 | 	mov	arg01, #7
09a8c     0F 00 00 FF 
09a90     40 17 06 F6 | 	mov	arg03, ##8000
09a94     0E 18 C6 F9 | 	decod	arg04, #14
09a98     00 1B 06 F6 | 	mov	arg05, #256
09a9c     00 1C 06 F6 | 	mov	arg06, #0
09aa0     6A 00 00 FF 
09aa4     C0 E5 85 F1 | 	sub	objptr, ##54720
09aa8     14 E7 B0 FD | 	call	#_Audio093b_8_sc_spin2_play8
09aac     0B 00 00 FF 
09ab0     C0 E4 85 F1 | 	sub	objptr, ##5824
09ab4     05 00 00 FF 
09ab8     B8 13 06 F6 | 	mov	arg01, ##3000
09abc     90 ED B0 FD | 	call	#__system___waitms
09ac0     78 00 00 FF 
09ac4     80 E5 05 F1 | 	add	objptr, ##61824
09ac8     F2 00 68 FC | 	wrlong	#0, objptr
09acc     78 00 00 FF 
09ad0     80 E5 85 F1 | 	sub	objptr, ##61824
09ad4     72 12 06 F6 | 	mov	arg01, #114
09ad8     00 14 06 F6 | 	mov	arg02, #0
09adc     5C FD BF FD | 	call	#_csave_addtoblock
09ae0     62 12 06 F6 | 	mov	arg01, #98
09ae4     00 14 06 F6 | 	mov	arg02, #0
09ae8     50 FD BF FD | 	call	#_csave_addtoblock
09aec     61 12 06 F6 | 	mov	arg01, #97
09af0     00 14 06 F6 | 	mov	arg02, #0
09af4     44 FD BF FD | 	call	#_csave_addtoblock
09af8     0D 12 06 F6 | 	mov	arg01, #13
09afc     00 14 06 F6 | 	mov	arg02, #0
09b00     38 FD BF FD | 	call	#_csave_addtoblock
09b04                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
09b04                 | ' waitms 3000 
09b04                 | ' 
09b04                 | ' blockptr=0
09b04                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
09b04                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
09b04     A7 02 68 FC | 	wrlong	#1, fp
09b08     8C 4E 05 F1 | 	add	fp, #140
09b0c     A7 12 02 FB | 	rdlong	arg01, fp
09b10     8C 4E 85 F1 | 	sub	fp, #140
09b14     09 21 02 F6 | 	mov	local02, arg01
09b18     97 06 48 FB | 	callpa	#(@LR__0836-@LR__0835)>>2,fcache_load_ptr_
09b1c                 | LR__0835
09b1c     10 FB C9 FA | 	rdbyte	result1, local02 wz
09b20     01 20 06 51 |  if_ne	add	local02, #1
09b24     F4 FF 9F 5D |  if_ne	jmp	#LR__0835
09b28                 | LR__0836
09b28     09 21 82 F1 | 	sub	local02, arg01
09b2c     10 23 02 F6 | 	mov	local03, local02
09b30     01 22 06 F1 | 	add	local03, #1
09b34                 | LR__0837
09b34     A7 1E 02 FB | 	rdlong	local01, fp
09b38     11 1F 52 F2 | 	cmps	local01, local03 wc
09b3c     34 00 90 3D |  if_ae	jmp	#LR__0838
09b40     8C 4E 05 F1 | 	add	fp, #140
09b44     A7 12 02 FB | 	rdlong	arg01, fp
09b48     8C 4E 85 F1 | 	sub	fp, #140
09b4c     A7 14 02 FB | 	rdlong	arg02, fp
09b50     01 16 06 F6 | 	mov	arg03, #1
09b54     28 0B B1 FD | 	call	#__system__Mid_S
09b58     FD 12 C2 FA | 	rdbyte	arg01, result1
09b5c     00 14 06 F6 | 	mov	arg02, #0
09b60     D8 FC BF FD | 	call	#_csave_addtoblock
09b64     A7 1E 02 FB | 	rdlong	local01, fp
09b68     01 1E 06 F1 | 	add	local01, #1
09b6c     A7 1E 62 FC | 	wrlong	local01, fp
09b70     C0 FF 9F FD | 	jmp	#LR__0837
09b74                 | LR__0838
09b74     00 12 06 F6 | 	mov	arg01, #0
09b78     00 14 06 F6 | 	mov	arg02, #0
09b7c     BC FC BF FD | 	call	#_csave_addtoblock
09b80     72 12 06 F6 | 	mov	arg01, #114
09b84     00 14 06 F6 | 	mov	arg02, #0
09b88     B0 FC BF FD | 	call	#_csave_addtoblock
09b8c     62 12 06 F6 | 	mov	arg01, #98
09b90     00 14 06 F6 | 	mov	arg02, #0
09b94     A4 FC BF FD | 	call	#_csave_addtoblock
09b98     73 12 06 F6 | 	mov	arg01, #115
09b9c     00 14 06 F6 | 	mov	arg02, #0
09ba0     98 FC BF FD | 	call	#_csave_addtoblock
09ba4     0D 12 06 F6 | 	mov	arg01, #13
09ba8     00 14 06 F6 | 	mov	arg02, #0
09bac     8C FC BF FD | 	call	#_csave_addtoblock
09bb0     69 00 00 FF 
09bb4     58 E4 05 F1 | 	add	objptr, ##53848
09bb8     F2 1E 02 FB | 	rdlong	local01, objptr
09bbc     69 00 00 FF 
09bc0     58 E4 85 F1 | 	sub	objptr, ##53848
09bc4     9C 4E 05 F1 | 	add	fp, #156
09bc8     A7 1E 62 FC | 	wrlong	local01, fp
09bcc     9C 4E 85 F1 | 	sub	fp, #156
09bd0                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
09bd0                 | ' 
09bd0                 | ' saveptr=programstart
09bd0                 | ' do
09bd0                 | LR__0839
09bd0     A0 4E 05 F1 | 	add	fp, #160
09bd4     A7 12 02 F6 | 	mov	arg01, fp
09bd8     04 4E 85 F1 | 	sub	fp, #4
09bdc     A7 14 02 FB | 	rdlong	arg02, fp
09be0     9C 4E 85 F1 | 	sub	fp, #156
09be4     18 16 06 F6 | 	mov	arg03, #24
09be8     0B 00 00 FF 
09bec     C0 E4 05 F1 | 	add	objptr, ##5824
09bf0     78 DE B0 FD | 	call	#_psram_spin2_read1
09bf4     0C 4E 05 F1 | 	add	fp, #12
09bf8     A7 12 02 F6 | 	mov	arg01, fp
09bfc     9C 4E 05 F1 | 	add	fp, #156
09c00     A7 14 02 FB | 	rdlong	arg02, fp
09c04     04 4E 05 F1 | 	add	fp, #4
09c08     A7 16 02 FB | 	rdlong	arg03, fp
09c0c     AC 4E 85 F1 | 	sub	fp, #172
09c10     58 DE B0 FD | 	call	#_psram_spin2_read1
09c14     0B 00 00 FF 
09c18     C0 E4 85 F1 | 	sub	objptr, ##5824
09c1c     AC 4E 05 F1 | 	add	fp, #172
09c20     A7 12 02 FB | 	rdlong	arg01, fp
09c24     AC 4E 85 F1 | 	sub	fp, #172
09c28     00 14 06 F6 | 	mov	arg02, #0
09c2c     0C FC BF FD | 	call	#_csave_addtoblock
09c30                 | '   psram.read1(varptr(header(0)),saveptr,24)
09c30                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
09c30                 | '   csave_addtoblock(header(3),0) ' that's always <255
09c30                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)    :next i
09c30     A7 00 68 FC | 	wrlong	#0, fp
09c34     AC 4E 05 F1 | 	add	fp, #172
09c38     A7 24 02 FB | 	rdlong	local04, fp
09c3c     AC 4E 85 F1 | 	sub	fp, #172
09c40                 | LR__0840
09c40     A7 1E 02 FB | 	rdlong	local01, fp
09c44     12 1F 52 F2 | 	cmps	local01, local04 wc
09c48     2C 00 90 3D |  if_ae	jmp	#LR__0841
09c4c     A7 22 02 FB | 	rdlong	local03, fp
09c50     0C 4E 05 F1 | 	add	fp, #12
09c54     A7 22 02 F1 | 	add	local03, fp
09c58     11 13 C2 FA | 	rdbyte	arg01, local03
09c5c     00 14 06 F6 | 	mov	arg02, #0
09c60     0C 4E 85 F1 | 	sub	fp, #12
09c64     D4 FB BF FD | 	call	#_csave_addtoblock
09c68     A7 22 02 FB | 	rdlong	local03, fp
09c6c     01 22 06 F1 | 	add	local03, #1
09c70     A7 22 62 FC | 	wrlong	local03, fp
09c74     C8 FF 9F FD | 	jmp	#LR__0840
09c78                 | LR__0841
09c78     B4 4E 05 F1 | 	add	fp, #180
09c7c     A7 1E 02 FB | 	rdlong	local01, fp
09c80     18 4E 85 F1 | 	sub	fp, #24
09c84     A7 1E 62 FC | 	wrlong	local01, fp
09c88     18 4E 05 F1 | 	add	fp, #24
09c8c     A7 1E 02 FB | 	rdlong	local01, fp
09c90     B4 4E 85 F1 | 	sub	fp, #180
09c94     FF FF 3F FF 
09c98     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
09c9c     30 FF 9F 5D |  if_ne	jmp	#LR__0839
09ca0     00 12 06 F6 | 	mov	arg01, #0
09ca4     01 14 06 F6 | 	mov	arg02, #1
09ca8     90 FB BF FD | 	call	#_csave_addtoblock
09cac     55 00 00 FF 
09cb0     E4 E5 05 F1 | 	add	objptr, ##44004
09cb4     F2 12 02 FB | 	rdlong	arg01, objptr
09cb8     55 00 00 FF 
09cbc     E4 E5 85 F1 | 	sub	objptr, ##44004
09cc0     F4 12 06 F1 | 	add	arg01, #244
09cc4     09 01 58 FC | 	wrword	#0, arg01
09cc8                 | LR__0842
09cc8     A7 F0 03 F6 | 	mov	ptra, fp
09ccc     B2 00 A0 FD | 	call	#popregs_
09cd0                 | _test_csave_ret
09cd0     2D 00 64 FD | 	ret
09cd4                 | 
09cd4                 | ' 
09cd4                 | ' ' ----------------- Save the program
09cd4                 | ' 
09cd4                 | ' sub do_save                           ''' <------------------------ TODO vartables has to be saved too! Or maybe o
09cd4                 | _do_save
09cd4     02 4A 05 F6 | 	mov	COUNT_, #2
09cd8     A8 00 A0 FD | 	call	#pushregs_
09cdc     01 00 00 FF 
09ce0     BC F0 07 F1 | 	add	ptra, ##700
09ce4     01 00 00 FF 
09ce8     10 4E 05 F1 | 	add	fp, ##528
09cec     B1 B0 86 FF 
09cf0     A7 E4 68 FC | 	wrlong	##224486002, fp
09cf4     01 00 00 FF 
09cf8     10 4E 85 F1 | 	sub	fp, ##528
09cfc     C4 F4 BF FD | 	call	#_pop
09d00     FF 16 02 F6 | 	mov	arg03, result3
09d04     A7 FA 61 FC | 	wrlong	result1, fp
09d08     04 4E 05 F1 | 	add	fp, #4
09d0c     A7 FC 61 FC | 	wrlong	result2, fp
09d10     04 4E 05 F1 | 	add	fp, #4
09d14     A7 16 62 FC | 	wrlong	arg03, fp
09d18     08 4E 85 F1 | 	sub	fp, #8
09d1c                 | ' 
09d1c                 | ' fileheader=$0D616272' rba+ver'
09d1c                 | ' 
09d1c                 | ' t1=pop() 
09d1c                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
09d1c     69 00 00 FF 
09d20     58 E4 05 F1 | 	add	objptr, ##53848
09d24     F2 12 02 FB | 	rdlong	arg01, objptr
09d28     69 00 00 FF 
09d2c     58 E4 85 F1 | 	sub	objptr, ##53848
09d30     C0 B4 B0 FD | 	call	#_pslpeek
09d34     FF FF 7F FF 
09d38     FF FB 0D F2 | 	cmp	result1, ##-1 wz
09d3c     0C 00 90 5D |  if_ne	jmp	#LR__0850
09d40     1B 12 06 F6 | 	mov	arg01, #27
09d44     F0 B2 B0 FD | 	call	#_printerror
09d48     68 02 90 FD | 	jmp	#LR__0856
09d4c                 | LR__0850
09d4c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
09d4c     08 4E 05 F1 | 	add	fp, #8
09d50     A7 16 02 FB | 	rdlong	arg03, fp
09d54     08 4E 85 F1 | 	sub	fp, #8
09d58     2B 16 0E F2 | 	cmp	arg03, #43 wz
09d5c     18 00 90 5D |  if_ne	jmp	#LR__0851
09d60     A7 12 02 FB | 	rdlong	arg01, fp
09d64     64 25 B0 FD | 	call	#_convertstring
09d68     A7 FA 61 FC | 	wrlong	result1, fp
09d6c     08 4E 05 F1 | 	add	fp, #8
09d70     A7 3E 68 FC | 	wrlong	#31, fp
09d74     08 4E 85 F1 | 	sub	fp, #8
09d78                 | LR__0851
09d78                 | ' if t1.result_type=result_string then
09d78     08 4E 05 F1 | 	add	fp, #8
09d7c     A7 1E 02 FB | 	rdlong	local01, fp
09d80     08 4E 85 F1 | 	sub	fp, #8
09d84     1F 1E 0E F2 | 	cmp	local01, #31 wz
09d88     28 02 90 5D |  if_ne	jmp	#LR__0855
09d8c                 | '   if t1.result.sresult="" then t1.result.sresult="noname.bas"
09d8c     A7 12 02 FB | 	rdlong	arg01, fp
09d90     3E 01 00 FF 
09d94     39 15 06 F6 | 	mov	arg02, ##@LR__4558
09d98     E8 E7 B0 FD | 	call	#__system___string_cmp
09d9c     00 FA 0D F2 | 	cmp	result1, #0 wz
09da0     3E 01 00 AF 
09da4     3A 1F 06 A6 |  if_e	mov	local01, ##@LR__4559
09da8     A7 1E 62 AC |  if_e	wrlong	local01, fp
09dac                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
09dac     09 12 06 F6 | 	mov	arg01, #9
09db0     D4 35 B1 FD | 	call	#__system__close
09db4     09 1E 06 F6 | 	mov	local01, #9
09db8     71 00 00 FF 
09dbc     68 E4 05 F1 | 	add	objptr, ##57960
09dc0     F2 12 02 FB | 	rdlong	arg01, objptr
09dc4     71 00 00 FF 
09dc8     68 E4 85 F1 | 	sub	objptr, ##57960
09dcc     3E 01 00 FF 
09dd0     45 15 06 F6 | 	mov	arg02, ##@LR__4560
09dd4     E0 E7 B0 FD | 	call	#__system___string_concat
09dd8     FD 12 02 F6 | 	mov	arg01, result1
09ddc     A7 14 02 FB | 	rdlong	arg02, fp
09de0     D4 E7 B0 FD | 	call	#__system___string_concat
09de4     FD 14 02 F6 | 	mov	arg02, result1
09de8     0F 13 02 F6 | 	mov	arg01, local01
09dec     0D 16 06 F6 | 	mov	arg03, #13
09df0     68 F3 B0 FD | 	call	#__system___basic_open_string
09df4     01 00 00 FF 
09df8     0C 4E 05 F1 | 	add	fp, ##524
09dfc     A7 0A 68 FC | 	wrlong	#5, fp
09e00     69 00 00 FF 
09e04     58 E4 05 F1 | 	add	objptr, ##53848
09e08     F2 1E 02 FB | 	rdlong	local01, objptr
09e0c     69 00 00 FF 
09e10     58 E4 85 F1 | 	sub	objptr, ##53848
09e14     0C 4E 05 F1 | 	add	fp, #12
09e18     A7 1E 62 FC | 	wrlong	local01, fp
09e1c     01 00 00 FF 
09e20     18 4E 85 F1 | 	sub	fp, ##536
09e24                 | ' '  put #9,1,fileheader,1
09e24                 | '   i=5
09e24                 | '   saveptr=programstart
09e24                 | '   do
09e24                 | LR__0852
09e24     01 00 00 FF 
09e28     1C 4E 05 F1 | 	add	fp, ##540
09e2c     A7 12 02 F6 | 	mov	arg01, fp
09e30     04 4E 85 F1 | 	sub	fp, #4
09e34     A7 14 02 FB | 	rdlong	arg02, fp
09e38     01 00 00 FF 
09e3c     18 4E 85 F1 | 	sub	fp, ##536
09e40     18 16 06 F6 | 	mov	arg03, #24
09e44     0B 00 00 FF 
09e48     C0 E4 05 F1 | 	add	objptr, ##5824
09e4c     1C DC B0 FD | 	call	#_psram_spin2_read1
09e50     01 00 00 FF 
09e54     34 4E 05 F1 | 	add	fp, ##564
09e58     A7 12 02 F6 | 	mov	arg01, fp
09e5c     10 4E 85 F1 | 	sub	fp, #16
09e60     A7 14 02 FB | 	rdlong	arg02, fp
09e64     04 4E 05 F1 | 	add	fp, #4
09e68     A7 16 02 FB | 	rdlong	arg03, fp
09e6c     01 00 00 FF 
09e70     28 4E 85 F1 | 	sub	fp, ##552
09e74     F4 DB B0 FD | 	call	#_psram_spin2_read1
09e78     0B 00 00 FF 
09e7c     C0 E4 85 F1 | 	sub	objptr, ##5824
09e80     3E 01 00 FF 
09e84     47 1F 06 F6 | 	mov	local01, ##@LR__4561
09e88     01 00 00 FF 
09e8c     B4 4E 05 F1 | 	add	fp, ##692
09e90     A7 1E 62 FC | 	wrlong	local01, fp
09e94                 | '     psram.read1(varptr(header(0)),saveptr,24)
09e94                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
09e94                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
09e94     A8 4E 85 F1 | 	sub	fp, #168
09e98     A7 02 68 FC | 	wrlong	#1, fp
09e9c     1C 4E 05 F1 | 	add	fp, #28
09ea0     A7 20 02 FB | 	rdlong	local02, fp
09ea4     01 00 00 FF 
09ea8     28 4E 85 F1 | 	sub	fp, ##552
09eac     01 20 06 F1 | 	add	local02, #1
09eb0                 | LR__0853
09eb0     01 00 00 FF 
09eb4     0C 4E 05 F1 | 	add	fp, ##524
09eb8     A7 1E 02 FB | 	rdlong	local01, fp
09ebc     01 00 00 FF 
09ec0     0C 4E 85 F1 | 	sub	fp, ##524
09ec4     10 1F 52 F2 | 	cmps	local01, local02 wc
09ec8     64 00 90 3D |  if_ae	jmp	#LR__0854
09ecc     01 00 00 FF 
09ed0     B4 4E 05 F1 | 	add	fp, ##692
09ed4     A7 1E 02 FB | 	rdlong	local01, fp
09ed8     A8 4E 85 F1 | 	sub	fp, #168
09edc     A7 16 02 FB | 	rdlong	arg03, fp
09ee0     01 16 86 F1 | 	sub	arg03, #1
09ee4     28 4E 05 F1 | 	add	fp, #40
09ee8     A7 16 02 F1 | 	add	arg03, fp
09eec     0B 13 C2 FA | 	rdbyte	arg01, arg03
09ef0     01 00 00 FF 
09ef4     34 4E 85 F1 | 	sub	fp, ##564
09ef8     30 08 B1 FD | 	call	#__system__Chr_S
09efc     FD 14 02 F6 | 	mov	arg02, result1
09f00     0F 13 02 F6 | 	mov	arg01, local01
09f04     B0 E6 B0 FD | 	call	#__system___string_concat
09f08     01 00 00 FF 
09f0c     B4 4E 05 F1 | 	add	fp, ##692
09f10     A7 FA 61 FC | 	wrlong	result1, fp
09f14     A8 4E 85 F1 | 	sub	fp, #168
09f18     A7 1E 02 FB | 	rdlong	local01, fp
09f1c     01 1E 06 F1 | 	add	local01, #1
09f20     A7 1E 62 FC | 	wrlong	local01, fp
09f24     01 00 00 FF 
09f28     0C 4E 85 F1 | 	sub	fp, ##524
09f2c     80 FF 9F FD | 	jmp	#LR__0853
09f30                 | LR__0854
09f30                 | '  '   put #9,i,header(3),1 : i+=4
09f30                 | '  '   put #9,i,linebuf(0),header(3) : i+=header(3)
09f30                 | '      print #9, saveline$
09f30     09 12 06 F6 | 	mov	arg01, #9
09f34     20 3E B1 FD | 	call	#__system___getiolock_0416
09f38     FD 12 02 F6 | 	mov	arg01, result1
09f3c     1C E6 B0 FD | 	call	#__system___lockmem
09f40     01 00 00 FF 
09f44     B4 4E 05 F1 | 	add	fp, ##692
09f48     A7 14 02 FB | 	rdlong	arg02, fp
09f4c     01 00 00 FF 
09f50     B4 4E 85 F1 | 	sub	fp, ##692
09f54     09 12 06 F6 | 	mov	arg01, #9
09f58     00 16 06 F6 | 	mov	arg03, #0
09f5c     EC F2 B0 FD | 	call	#__system___basic_print_string
09f60     09 12 06 F6 | 	mov	arg01, #9
09f64     0A 14 06 F6 | 	mov	arg02, #10
09f68     00 16 06 F6 | 	mov	arg03, #0
09f6c     84 F2 B0 FD | 	call	#__system___basic_print_char
09f70     09 12 06 F6 | 	mov	arg01, #9
09f74     E0 3D B1 FD | 	call	#__system___getiolock_0416
09f78     FD 00 68 FC | 	wrlong	#0, result1
09f7c     01 00 00 FF 
09f80     30 4E 05 F1 | 	add	fp, ##560
09f84     A7 1E 02 FB | 	rdlong	local01, fp
09f88     18 4E 85 F1 | 	sub	fp, #24
09f8c     A7 1E 62 FC | 	wrlong	local01, fp
09f90     18 4E 05 F1 | 	add	fp, #24
09f94     A7 1E 02 FB | 	rdlong	local01, fp
09f98     01 00 00 FF 
09f9c     30 4E 85 F1 | 	sub	fp, ##560
09fa0     FF FF 3F FF 
09fa4     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
09fa8     78 FE 9F 5D |  if_ne	jmp	#LR__0852
09fac                 | '   close #9  
09fac     09 12 06 F6 | 	mov	arg01, #9
09fb0     D4 33 B1 FD | 	call	#__system__close
09fb4                 | LR__0855
09fb4                 | LR__0856
09fb4     A7 F0 03 F6 | 	mov	ptra, fp
09fb8     B2 00 A0 FD | 	call	#popregs_
09fbc                 | _do_save_ret
09fbc     2D 00 64 FD | 	ret
09fc0                 | 
09fc0                 | ' 
09fc0                 | ' '----------------- Load the program
09fc0                 | ' 'lo todo: errors while loading
09fc0                 | ' sub do_load
09fc0                 | _do_load
09fc0     01 4A 05 F6 | 	mov	COUNT_, #1
09fc4     A8 00 A0 FD | 	call	#pushregs_
09fc8     A4 F0 07 F1 | 	add	ptra, #164
09fcc     A0 4E 05 F1 | 	add	fp, #160
09fd0     A7 12 02 F6 | 	mov	arg01, fp
09fd4     80 4E 85 F1 | 	sub	fp, #128
09fd8     A7 14 02 F6 | 	mov	arg02, fp
09fdc     20 4E 85 F1 | 	sub	fp, #32
09fe0     09 15 62 FC | 	wrlong	arg02, arg01
09fe4     DC F1 BF FD | 	call	#_pop
09fe8     FF 1A 02 F6 | 	mov	arg05, result3
09fec     A7 FA 61 FC | 	wrlong	result1, fp
09ff0     04 4E 05 F1 | 	add	fp, #4
09ff4     A7 FC 61 FC | 	wrlong	result2, fp
09ff8     04 4E 05 F1 | 	add	fp, #4
09ffc     A7 1A 62 FC | 	wrlong	arg05, fp
0a000                 | ' 
0a000                 | ' lpoke varptr(line2$),varptr(line2)
0a000                 | ' t1=pop() 
0a000                 | ' 'print "popped "; t1.result.uresult, t1.result_type
0a000                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
0a000     08 4E 85 F1 | 	sub	fp, #8
0a004     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0a008     18 00 90 5D |  if_ne	jmp	#LR__0860
0a00c     A7 12 02 FB | 	rdlong	arg01, fp
0a010     B8 22 B0 FD | 	call	#_convertstring
0a014     A7 FA 61 FC | 	wrlong	result1, fp
0a018     08 4E 05 F1 | 	add	fp, #8
0a01c     A7 3E 68 FC | 	wrlong	#31, fp
0a020     08 4E 85 F1 | 	sub	fp, #8
0a024                 | LR__0860
0a024                 | ' if t1.result_type=result_string then
0a024     08 4E 05 F1 | 	add	fp, #8
0a028     A7 1E 02 FB | 	rdlong	local01, fp
0a02c     08 4E 85 F1 | 	sub	fp, #8
0a030     1F 1E 0E F2 | 	cmp	local01, #31 wz
0a034     40 03 90 5D |  if_ne	jmp	#LR__0867
0a038     2C 1D B0 FD | 	call	#_do_new
0a03c                 | '   do_new
0a03c                 | '   if t1.result.sresult="" then t1.result.sresult="noname.bas" 
0a03c     A7 12 02 FB | 	rdlong	arg01, fp
0a040     3E 01 00 FF 
0a044     48 15 06 F6 | 	mov	arg02, ##@LR__4562
0a048     38 E5 B0 FD | 	call	#__system___string_cmp
0a04c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a050     3E 01 00 AF 
0a054     49 1F 06 A6 |  if_e	mov	local01, ##@LR__4563
0a058     A7 1E 62 AC |  if_e	wrlong	local01, fp
0a05c                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
0a05c     09 12 06 F6 | 	mov	arg01, #9
0a060     24 33 B1 FD | 	call	#__system__close
0a064     09 1E 06 F6 | 	mov	local01, #9
0a068     71 00 00 FF 
0a06c     68 E4 05 F1 | 	add	objptr, ##57960
0a070     F2 12 02 FB | 	rdlong	arg01, objptr
0a074     71 00 00 FF 
0a078     68 E4 85 F1 | 	sub	objptr, ##57960
0a07c     3E 01 00 FF 
0a080     54 15 06 F6 | 	mov	arg02, ##@LR__4564
0a084     30 E5 B0 FD | 	call	#__system___string_concat
0a088     FD 12 02 F6 | 	mov	arg01, result1
0a08c     A7 14 02 FB | 	rdlong	arg02, fp
0a090     24 E5 B0 FD | 	call	#__system___string_concat
0a094     FD 14 02 F6 | 	mov	arg02, result1
0a098     0F 13 02 F6 | 	mov	arg01, local01
0a09c     00 16 06 F6 | 	mov	arg03, #0
0a0a0     B8 F0 B0 FD | 	call	#__system___basic_open_string
0a0a4     20 E8 05 F1 | 	add	ptr___system__dat__, #32
0a0a8     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0a0ac     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
0a0b0     10 4E 05 F1 | 	add	fp, #16
0a0b4     A7 FA 61 FC | 	wrlong	result1, fp
0a0b8                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0a0b8     10 4E 85 F1 | 	sub	fp, #16
0a0bc     9C 00 90 AD |  if_e	jmp	#LR__0861
0a0c0     00 12 06 F6 | 	mov	arg01, #0
0a0c4     90 3C B1 FD | 	call	#__system___getiolock_0416
0a0c8     FD 12 02 F6 | 	mov	arg01, result1
0a0cc     8C E4 B0 FD | 	call	#__system___lockmem
0a0d0     3E 01 00 FF 
0a0d4     56 15 06 F6 | 	mov	arg02, ##@LR__4565
0a0d8     00 12 06 F6 | 	mov	arg01, #0
0a0dc     00 16 06 F6 | 	mov	arg03, #0
0a0e0     68 F1 B0 FD | 	call	#__system___basic_print_string
0a0e4     10 4E 05 F1 | 	add	fp, #16
0a0e8     A7 14 02 FB | 	rdlong	arg02, fp
0a0ec     10 4E 85 F1 | 	sub	fp, #16
0a0f0     00 12 06 F6 | 	mov	arg01, #0
0a0f4     00 16 06 F6 | 	mov	arg03, #0
0a0f8     0A 18 06 F6 | 	mov	arg04, #10
0a0fc     90 F1 B0 FD | 	call	#__system___basic_print_integer
0a100     3E 01 00 FF 
0a104     64 15 06 F6 | 	mov	arg02, ##@LR__4566
0a108     00 12 06 F6 | 	mov	arg01, #0
0a10c     00 16 06 F6 | 	mov	arg03, #0
0a110     38 F1 B0 FD | 	call	#__system___basic_print_string
0a114     10 4E 05 F1 | 	add	fp, #16
0a118     A7 12 02 FB | 	rdlong	arg01, fp
0a11c     10 4E 85 F1 | 	sub	fp, #16
0a120     30 09 B1 FD | 	call	#__system___strerror
0a124     FD 14 02 F6 | 	mov	arg02, result1
0a128     00 12 06 F6 | 	mov	arg01, #0
0a12c     00 16 06 F6 | 	mov	arg03, #0
0a130     18 F1 B0 FD | 	call	#__system___basic_print_string
0a134     00 12 06 F6 | 	mov	arg01, #0
0a138     0A 14 06 F6 | 	mov	arg02, #10
0a13c     00 16 06 F6 | 	mov	arg03, #0
0a140     B0 F0 B0 FD | 	call	#__system___basic_print_char
0a144     00 12 06 F6 | 	mov	arg01, #0
0a148     0C 3C B1 FD | 	call	#__system___getiolock_0416
0a14c     FD 00 68 FC | 	wrlong	#0, result1
0a150     09 12 06 F6 | 	mov	arg01, #9
0a154     30 32 B1 FD | 	call	#__system__close
0a158     24 02 90 FD | 	jmp	#LR__0869
0a15c                 | LR__0861
0a15c     0C 4E 05 F1 | 	add	fp, #12
0a160     A7 0A 68 FC | 	wrlong	#5, fp
0a164                 | '   i=5
0a164                 | '   get #9,1,header,1
0a164     0C 4E 05 F1 | 	add	fp, #12
0a168     A7 16 02 F6 | 	mov	arg03, fp
0a16c     18 4E 85 F1 | 	sub	fp, #24
0a170     09 12 06 F6 | 	mov	arg01, #9
0a174     01 14 06 F6 | 	mov	arg02, #1
0a178     01 18 06 F6 | 	mov	arg04, #1
0a17c     04 1A 06 F6 | 	mov	arg05, #4
0a180     D8 F1 B0 FD | 	call	#__system___basic_get
0a184                 | '   
0a184                 | '   if header<>$0D616272 then 
0a184     18 4E 05 F1 | 	add	fp, #24
0a188     A7 1E 02 FB | 	rdlong	local01, fp
0a18c     18 4E 85 F1 | 	sub	fp, #24
0a190     B1 B0 06 FF 
0a194     72 1E 0E F2 | 	cmp	local01, ##224486002 wz
0a198     F0 00 90 AD |  if_e	jmp	#LR__0864
0a19c                 | '     close #9: open currentdir$+"/"+t1.result.sresult for input as #9
0a19c     09 12 06 F6 | 	mov	arg01, #9
0a1a0     E4 31 B1 FD | 	call	#__system__close
0a1a4     09 1E 06 F6 | 	mov	local01, #9
0a1a8     71 00 00 FF 
0a1ac     68 E4 05 F1 | 	add	objptr, ##57960
0a1b0     F2 12 02 FB | 	rdlong	arg01, objptr
0a1b4     71 00 00 FF 
0a1b8     68 E4 85 F1 | 	sub	objptr, ##57960
0a1bc     3E 01 00 FF 
0a1c0     67 15 06 F6 | 	mov	arg02, ##@LR__4567
0a1c4     F0 E3 B0 FD | 	call	#__system___string_concat
0a1c8     FD 12 02 F6 | 	mov	arg01, result1
0a1cc     A7 14 02 FB | 	rdlong	arg02, fp
0a1d0     E4 E3 B0 FD | 	call	#__system___string_concat
0a1d4     FD 14 02 F6 | 	mov	arg02, result1
0a1d8     0F 13 02 F6 | 	mov	arg01, local01
0a1dc     00 16 06 F6 | 	mov	arg03, #0
0a1e0     78 EF B0 FD | 	call	#__system___basic_open_string
0a1e4                 | '     do
0a1e4                 | LR__0862
0a1e4     09 12 06 F6 | 	mov	arg01, #9
0a1e8     7C E5 B0 FD | 	call	#__system___basic_read_line
0a1ec     55 00 00 FF 
0a1f0     F0 E5 05 F1 | 	add	objptr, ##44016
0a1f4     F2 FA 61 FC | 	wrlong	result1, objptr
0a1f8                 | '       if left$(line$,1) >="0" andalso left$(line$,1)<="9" then interpret
0a1f8     55 00 00 FF 
0a1fc     F0 E5 85 F1 | 	sub	objptr, ##44016
0a200     FD 12 02 F6 | 	mov	arg01, result1
0a204     01 14 06 F6 | 	mov	arg02, #1
0a208     5C 03 B1 FD | 	call	#__system__Left_S
0a20c     FD 12 02 F6 | 	mov	arg01, result1
0a210     3E 01 00 FF 
0a214     69 15 06 F6 | 	mov	arg02, ##@LR__4568
0a218     68 E3 B0 FD | 	call	#__system___string_cmp
0a21c     00 FA 55 F2 | 	cmps	result1, #0 wc
0a220     34 00 90 CD |  if_b	jmp	#LR__0863
0a224     55 00 00 FF 
0a228     F0 E5 05 F1 | 	add	objptr, ##44016
0a22c     F2 12 02 FB | 	rdlong	arg01, objptr
0a230     55 00 00 FF 
0a234     F0 E5 85 F1 | 	sub	objptr, ##44016
0a238     01 14 06 F6 | 	mov	arg02, #1
0a23c     28 03 B1 FD | 	call	#__system__Left_S
0a240     FD 12 02 F6 | 	mov	arg01, result1
0a244     3E 01 00 FF 
0a248     6B 15 06 F6 | 	mov	arg02, ##@LR__4569
0a24c     34 E3 B0 FD | 	call	#__system___string_cmp
0a250     01 FA 55 F2 | 	cmps	result1, #1 wc
0a254     C4 67 BF CD |  if_b	call	#_interpret
0a258                 | LR__0863
0a258     55 00 00 FF 
0a25c     F0 E5 05 F1 | 	add	objptr, ##44016
0a260     F2 12 02 FB | 	rdlong	arg01, objptr
0a264     55 00 00 FF 
0a268     F0 E5 85 F1 | 	sub	objptr, ##44016
0a26c     3E 01 00 FF 
0a270     6D 15 06 F6 | 	mov	arg02, ##@LR__4570
0a274     0C E3 B0 FD | 	call	#__system___string_cmp
0a278     00 FA 0D F2 | 	cmp	result1, #0 wz
0a27c     64 FF 9F 5D |  if_ne	jmp	#LR__0862
0a280                 | '     close #9
0a280     09 12 06 F6 | 	mov	arg01, #9
0a284     00 31 B1 FD | 	call	#__system__close
0a288     F4 00 90 FD | 	jmp	#LR__0868
0a28c                 | LR__0864
0a28c                 | '   'printerror(26) : close #9 : return
0a28c                 | '     do
0a28c                 | LR__0865
0a28c                 | '       get #9,i,linelength,1,amount : i+=4 : line2(linelength)=0
0a28c     0C 4E 05 F1 | 	add	fp, #12
0a290     A7 14 02 FB | 	rdlong	arg02, fp
0a294     10 4E 05 F1 | 	add	fp, #16
0a298     A7 16 02 F6 | 	mov	arg03, fp
0a29c     1C 4E 85 F1 | 	sub	fp, #28
0a2a0     09 12 06 F6 | 	mov	arg01, #9
0a2a4     01 18 06 F6 | 	mov	arg04, #1
0a2a8     04 1A 06 F6 | 	mov	arg05, #4
0a2ac     AC F0 B0 FD | 	call	#__system___basic_get
0a2b0     14 4E 05 F1 | 	add	fp, #20
0a2b4     A7 FA 61 FC | 	wrlong	result1, fp
0a2b8     08 4E 85 F1 | 	sub	fp, #8
0a2bc     A7 1E 02 FB | 	rdlong	local01, fp
0a2c0     04 1E 06 F1 | 	add	local01, #4
0a2c4     A7 1E 62 FC | 	wrlong	local01, fp
0a2c8     10 4E 05 F1 | 	add	fp, #16
0a2cc     A7 1E 02 FB | 	rdlong	local01, fp
0a2d0     04 4E 05 F1 | 	add	fp, #4
0a2d4     A7 1E 02 F1 | 	add	local01, fp
0a2d8     0F 01 48 FC | 	wrbyte	#0, local01
0a2dc                 | '       if amount=1 then  
0a2dc     0C 4E 85 F1 | 	sub	fp, #12
0a2e0     A7 1E 02 FB | 	rdlong	local01, fp
0a2e4     14 4E 85 F1 | 	sub	fp, #20
0a2e8     01 1E 0E F2 | 	cmp	local01, #1 wz
0a2ec     68 00 90 5D |  if_ne	jmp	#LR__0866
0a2f0                 | '         get #9,i,line2(0),linelength : i+=linelength
0a2f0     0C 4E 05 F1 | 	add	fp, #12
0a2f4     A7 14 02 FB | 	rdlong	arg02, fp
0a2f8     14 4E 05 F1 | 	add	fp, #20
0a2fc     A7 16 02 F6 | 	mov	arg03, fp
0a300     04 4E 85 F1 | 	sub	fp, #4
0a304     A7 18 02 FB | 	rdlong	arg04, fp
0a308     1C 4E 85 F1 | 	sub	fp, #28
0a30c     09 12 06 F6 | 	mov	arg01, #9
0a310     01 1A 06 F6 | 	mov	arg05, #1
0a314     44 F0 B0 FD | 	call	#__system___basic_get
0a318     0C 4E 05 F1 | 	add	fp, #12
0a31c     A7 1E 02 FB | 	rdlong	local01, fp
0a320     10 4E 05 F1 | 	add	fp, #16
0a324     A7 1A 02 FB | 	rdlong	arg05, fp
0a328     0D 1F 02 F1 | 	add	local01, arg05
0a32c     10 4E 85 F1 | 	sub	fp, #16
0a330     A7 1E 62 FC | 	wrlong	local01, fp
0a334     94 4E 05 F1 | 	add	fp, #148
0a338     A7 1E 02 FB | 	rdlong	local01, fp
0a33c     A0 4E 85 F1 | 	sub	fp, #160
0a340     55 00 00 FF 
0a344     F0 E5 05 F1 | 	add	objptr, ##44016
0a348     F2 1E 62 FC | 	wrlong	local01, objptr
0a34c     55 00 00 FF 
0a350     F0 E5 85 F1 | 	sub	objptr, ##44016
0a354     C4 66 BF FD | 	call	#_interpret
0a358                 | LR__0866
0a358     14 4E 05 F1 | 	add	fp, #20
0a35c     A7 1E 02 FB | 	rdlong	local01, fp
0a360     14 4E 85 F1 | 	sub	fp, #20
0a364     01 1E 56 F2 | 	cmps	local01, #1 wc
0a368     20 FF 9F 3D |  if_ae	jmp	#LR__0865
0a36c                 | '     close #9 
0a36c     09 12 06 F6 | 	mov	arg01, #9
0a370     14 30 B1 FD | 	call	#__system__close
0a374     08 00 90 FD | 	jmp	#LR__0868
0a378                 | LR__0867
0a378     1E 12 06 F6 | 	mov	arg01, #30
0a37c     B8 AC B0 FD | 	call	#_printerror
0a380                 | LR__0868
0a380                 | LR__0869
0a380     A7 F0 03 F6 | 	mov	ptra, fp
0a384     B2 00 A0 FD | 	call	#popregs_
0a388                 | _do_load_ret
0a388     2D 00 64 FD | 	ret
0a38c                 | 
0a38c                 | ' 
0a38c                 | ' '----------------- Run the program 
0a38c                 | ' 
0a38c                 | ' '' line header: linenum major, linenum minor, list start, list length, prev ptr, next ptr
0a38c                 | ' 
0a38c                 | ' sub do_run
0a38c                 | _do_run
0a38c     01 4A 05 F6 | 	mov	COUNT_, #1
0a390     A8 00 A0 FD | 	call	#pushregs_
0a394     69 00 00 FF 
0a398     58 E4 05 F1 | 	add	objptr, ##53848
0a39c     F2 1C 02 FB | 	rdlong	arg06, objptr
0a3a0     0F 00 00 FF 
0a3a4     2C E5 05 F1 | 	add	objptr, ##7980
0a3a8     F2 1C 62 FC | 	wrlong	arg06, objptr
0a3ac     04 E4 05 F1 | 	add	objptr, #4
0a3b0     F2 00 68 FC | 	wrlong	#0, objptr
0a3b4     04 E4 05 F1 | 	add	objptr, #4
0a3b8     FF FF FF FF 
0a3bc     F2 FE 6B FC | 	wrlong	##-1, objptr
0a3c0                 | ' if inrun>0 then 
0a3c0     04 E4 05 F1 | 	add	objptr, #4
0a3c4     F2 1C 02 FB | 	rdlong	arg06, objptr
0a3c8     78 00 00 FF 
0a3cc     90 E5 85 F1 | 	sub	objptr, ##61840
0a3d0     01 1C 16 F2 | 	cmp	arg06, #1 wc
0a3d4     30 00 90 CD |  if_b	jmp	#LR__0870
0a3d8     78 00 00 FF 
0a3dc     94 E5 05 F1 | 	add	objptr, ##61844
0a3e0     F2 12 02 F6 | 	mov	arg01, objptr
0a3e4     10 E4 85 F1 | 	sub	objptr, #16
0a3e8     F2 14 02 FB | 	rdlong	arg02, objptr
0a3ec     18 16 06 F6 | 	mov	arg03, #24
0a3f0     6D 00 00 FF 
0a3f4     C4 E4 85 F1 | 	sub	objptr, ##56004
0a3f8     70 D6 B0 FD | 	call	#_psram_spin2_read1
0a3fc     0B 00 00 FF 
0a400     C0 E4 85 F1 | 	sub	objptr, ##5824
0a404                 | '   psram.read1(varptr(runheader),runptr,24)  
0a404                 | '   return
0a404     9C 02 90 FD | 	jmp	#LR__0876
0a408                 | LR__0870
0a408     78 00 00 FF 
0a40c     90 E5 05 F1 | 	add	objptr, ##61840
0a410     F2 02 68 FC | 	wrlong	#1, objptr
0a414     04 E4 05 F1 | 	add	objptr, #4
0a418     F2 12 02 F6 | 	mov	arg01, objptr
0a41c     10 E4 85 F1 | 	sub	objptr, #16
0a420     F2 14 02 FB | 	rdlong	arg02, objptr
0a424     18 16 06 F6 | 	mov	arg03, #24
0a428     6D 00 00 FF 
0a42c     C4 E4 85 F1 | 	sub	objptr, ##56004
0a430     38 D6 B0 FD | 	call	#_psram_spin2_read1
0a434                 | ' inrun=1
0a434                 | ' psram.read1(varptr(runheader),runptr,24) 
0a434                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
0a434     6D 00 00 FF 
0a438     D4 E4 05 F1 | 	add	objptr, ##56020
0a43c     F2 1E 02 FB | 	rdlong	local01, objptr
0a440     78 00 00 FF 
0a444     94 E5 85 F1 | 	sub	objptr, ##61844
0a448     FF FF 7F FF 
0a44c     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
0a450     78 00 00 AF 
0a454     90 E5 05 A1 |  if_e	add	objptr, ##61840
0a458     F2 00 68 AC |  if_e	wrlong	#0, objptr
0a45c     78 00 00 AF 
0a460     90 E5 85 A1 |  if_e	sub	objptr, ##61840
0a464     3C 02 90 AD |  if_e	jmp	#LR__0876
0a468                 | ' do 
0a468                 | LR__0871
0a468                 | '   if runptr<>oldrunptr then
0a468     78 00 00 FF 
0a46c     84 E5 05 F1 | 	add	objptr, ##61828
0a470     F2 1E 02 FB | 	rdlong	local01, objptr
0a474     08 E4 05 F1 | 	add	objptr, #8
0a478     F2 1C 02 FB | 	rdlong	arg06, objptr
0a47c     78 00 00 FF 
0a480     8C E5 85 F1 | 	sub	objptr, ##61836
0a484     0E 1F 0A F2 | 	cmp	local01, arg06 wz
0a488     CC 00 90 AD |  if_e	jmp	#LR__0872
0a48c     78 00 00 FF 
0a490     94 E5 05 F1 | 	add	objptr, ##61844
0a494     F2 12 02 F6 | 	mov	arg01, objptr
0a498     10 E4 85 F1 | 	sub	objptr, #16
0a49c     F2 14 02 FB | 	rdlong	arg02, objptr
0a4a0     18 16 06 F6 | 	mov	arg03, #24
0a4a4     6D 00 00 FF 
0a4a8     C4 E4 85 F1 | 	sub	objptr, ##56004
0a4ac     BC D5 B0 FD | 	call	#_psram_spin2_read1
0a4b0     5A 00 00 FF 
0a4b4     90 E5 05 F1 | 	add	objptr, ##46480
0a4b8     F2 12 02 F6 | 	mov	arg01, objptr
0a4bc     12 00 00 FF 
0a4c0     34 E5 05 F1 | 	add	objptr, ##9524
0a4c4     F2 14 02 FB | 	rdlong	arg02, objptr
0a4c8     14 00 00 FF 
0a4cc     4C E5 85 F1 | 	sub	objptr, ##10572
0a4d0     F2 1E 02 FB | 	rdlong	local01, objptr
0a4d4     01 1E 66 F0 | 	shl	local01, #1
0a4d8     0F 15 02 F1 | 	add	arg02, local01
0a4dc     14 00 00 FF 
0a4e0     64 E5 05 F1 | 	add	objptr, ##10596
0a4e4     F2 16 02 FB | 	rdlong	arg03, objptr
0a4e8     18 E4 85 F1 | 	sub	objptr, #24
0a4ec     F2 1E 02 FB | 	rdlong	local01, objptr
0a4f0     0F 17 82 F1 | 	sub	arg03, local01
0a4f4     6D 00 00 FF 
0a4f8     C4 E4 85 F1 | 	sub	objptr, ##56004
0a4fc     6C D5 B0 FD | 	call	#_psram_spin2_read1
0a500     6D 00 00 FF 
0a504     DC E4 05 F1 | 	add	objptr, ##56028
0a508     F2 1E 02 FB | 	rdlong	local01, objptr
0a50c     18 E4 85 F1 | 	sub	objptr, #24
0a510     F2 1C 02 FB | 	rdlong	arg06, objptr
0a514     0E 1F 82 F1 | 	sub	local01, arg06
0a518     14 00 00 FF 
0a51c     4C E5 85 F1 | 	sub	objptr, ##10572
0a520     F2 1C 02 FB | 	rdlong	arg06, objptr
0a524     0E 1F 12 FD | 	qdiv	local01, arg06
0a528     05 00 00 FF 
0a52c     18 E4 05 F1 | 	add	objptr, ##2584
0a530     18 1E 62 FD | 	getqx	local01
0a534     03 1E 86 F1 | 	sub	local01, #3
0a538     F2 1E 62 FC | 	wrlong	local01, objptr
0a53c     0F 00 00 FF 
0a540     34 E5 05 F1 | 	add	objptr, ##7988
0a544     F2 1E 02 FB | 	rdlong	local01, objptr
0a548     08 E4 05 F1 | 	add	objptr, #8
0a54c     F2 1E 62 FC | 	wrlong	local01, objptr
0a550     78 00 00 FF 
0a554     8C E5 85 F1 | 	sub	objptr, ##61836
0a558                 | LR__0872
0a558     78 00 00 FF 
0a55c     A8 E5 05 F1 | 	add	objptr, ##61864
0a560     F2 1E 02 FB | 	rdlong	local01, objptr
0a564     24 E4 85 F1 | 	sub	objptr, #36
0a568     F2 1E 62 FC | 	wrlong	local01, objptr
0a56c     04 E4 05 F1 | 	add	objptr, #4
0a570     F2 12 02 FB | 	rdlong	arg01, objptr
0a574     78 00 00 FF 
0a578     88 E5 85 F1 | 	sub	objptr, ##61832
0a57c     40 EB BF FD | 	call	#_execute_line
0a580     78 00 00 FF 
0a584     88 E5 05 F1 | 	add	objptr, ##61832
0a588     F2 FA 61 FC | 	wrlong	result1, objptr
0a58c     04 E4 85 F1 | 	sub	objptr, #4
0a590     F2 1E 02 FB | 	rdlong	local01, objptr
0a594     78 00 00 FF 
0a598     84 E5 85 F1 | 	sub	objptr, ##61828
0a59c     FF FF 3F FF 
0a5a0     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0a5a4     0C 00 90 AD |  if_e	jmp	#LR__0873
0a5a8     50 D8 B0 FD | 	call	#_usbnew_spin2_get_key
0a5ac     06 FB 0D F2 | 	cmp	result1, #262 wz
0a5b0     B4 FE 9F 5D |  if_ne	jmp	#LR__0871
0a5b4                 | LR__0873
0a5b4                 | ' if runheader(5)<>$7FFF_FFFF then 
0a5b4     78 00 00 FF 
0a5b8     A8 E5 05 F1 | 	add	objptr, ##61864
0a5bc     F2 1E 02 FB | 	rdlong	local01, objptr
0a5c0     78 00 00 FF 
0a5c4     A8 E5 85 F1 | 	sub	objptr, ##61864
0a5c8     FF FF 3F FF 
0a5cc     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0a5d0     BC 00 90 AD |  if_e	jmp	#LR__0875
0a5d4                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,16384,spl_len)  
0a5d4     78 00 00 FF 
0a5d8     B4 E5 05 F1 | 	add	objptr, ##61876
0a5dc     F2 1E 02 FB | 	rdlong	local01, objptr
0a5e0     78 00 00 FF 
0a5e4     B4 E5 85 F1 | 	sub	objptr, ##61876
0a5e8     01 1E 0E F2 | 	cmp	local01, #1 wz
0a5ec     3C 00 90 5D |  if_ne	jmp	#LR__0874
0a5f0     7A 00 00 FF 
0a5f4     58 E4 05 F1 | 	add	objptr, ##62552
0a5f8     F2 14 02 FB | 	rdlong	arg02, objptr
0a5fc     04 E4 85 F1 | 	sub	objptr, #4
0a600     F2 1A 02 FB | 	rdlong	arg05, objptr
0a604     07 12 06 F6 | 	mov	arg01, #7
0a608     56 00 00 FF 
0a60c     44 16 06 F6 | 	mov	arg03, ##44100
0a610     0E 18 C6 F9 | 	decod	arg04, #14
0a614     01 1C 66 F6 | 	neg	arg06, #1
0a618     6E 00 00 FF 
0a61c     94 E5 85 F1 | 	sub	objptr, ##56724
0a620     00 DB B0 FD | 	call	#_Audio093b_8_sc_spin2_play
0a624     0B 00 00 FF 
0a628     C0 E4 85 F1 | 	sub	objptr, ##5824
0a62c                 | LR__0874
0a62c                 | '   print "Stopped at line ";runheader(0)
0a62c     00 12 06 F6 | 	mov	arg01, #0
0a630     24 37 B1 FD | 	call	#__system___getiolock_0416
0a634     FD 12 02 F6 | 	mov	arg01, result1
0a638     20 DF B0 FD | 	call	#__system___lockmem
0a63c     3E 01 00 FF 
0a640     6E 15 06 F6 | 	mov	arg02, ##@LR__4571
0a644     00 12 06 F6 | 	mov	arg01, #0
0a648     00 16 06 F6 | 	mov	arg03, #0
0a64c     FC EB B0 FD | 	call	#__system___basic_print_string
0a650     78 00 00 FF 
0a654     94 E5 05 F1 | 	add	objptr, ##61844
0a658     F2 14 02 FB | 	rdlong	arg02, objptr
0a65c     78 00 00 FF 
0a660     94 E5 85 F1 | 	sub	objptr, ##61844
0a664     00 12 06 F6 | 	mov	arg01, #0
0a668     00 16 06 F6 | 	mov	arg03, #0
0a66c     0A 18 06 F6 | 	mov	arg04, #10
0a670     5C EC B0 FD | 	call	#__system___basic_print_unsigned
0a674     00 12 06 F6 | 	mov	arg01, #0
0a678     0A 14 06 F6 | 	mov	arg02, #10
0a67c     00 16 06 F6 | 	mov	arg03, #0
0a680     70 EB B0 FD | 	call	#__system___basic_print_char
0a684     00 12 06 F6 | 	mov	arg01, #0
0a688     CC 36 B1 FD | 	call	#__system___getiolock_0416
0a68c     FD 00 68 FC | 	wrlong	#0, result1
0a690                 | LR__0875
0a690     78 00 00 FF 
0a694     90 E5 05 F1 | 	add	objptr, ##61840
0a698     F2 00 68 FC | 	wrlong	#0, objptr
0a69c     78 00 00 FF 
0a6a0     90 E5 85 F1 | 	sub	objptr, ##61840
0a6a4                 | LR__0876
0a6a4     A7 F0 03 F6 | 	mov	ptra, fp
0a6a8     B2 00 A0 FD | 	call	#popregs_
0a6ac                 | _do_run_ret
0a6ac     2D 00 64 FD | 	ret
0a6b0                 | 
0a6b0                 | ' 
0a6b0                 | ' sub do_defenv
0a6b0                 | _do_defenv
0a6b0     05 4A 05 F6 | 	mov	COUNT_, #5
0a6b4     A8 00 A0 FD | 	call	#pushregs_
0a6b8     84 F0 07 F1 | 	add	ptra, #132
0a6bc     69 00 00 FF 
0a6c0     54 E4 05 F1 | 	add	objptr, ##53844
0a6c4     F2 1A 02 FB | 	rdlong	arg05, objptr
0a6c8     0D 19 02 F6 | 	mov	arg04, arg05
0a6cc     01 18 66 F0 | 	shl	arg04, #1
0a6d0     0D 19 02 F1 | 	add	arg04, arg05
0a6d4     02 18 66 F0 | 	shl	arg04, #2
0a6d8     03 00 00 FF 
0a6dc     04 E4 85 F1 | 	sub	objptr, ##1540
0a6e0     F2 18 02 F1 | 	add	arg04, objptr
0a6e4     0C 1B 02 FB | 	rdlong	arg05, arg04
0a6e8     A7 1A 62 FC | 	wrlong	arg05, fp
0a6ec                 | ' 
0a6ec                 | ' numpar=compiledline(lineptr_e).result.uresult
0a6ec                 | ' 
0a6ec                 | ' 
0a6ec                 | ' ' defenv channel, string - tries to load from /media/h a h2 file from PC-Softsynth
0a6ec                 | ' ' defenv channel, l1,r1,l2,r2,l3,r3,l4,r4 - defines ADSR in Yamaha DX  style, except these are linear values
0a6ec                 | ' ' Every 5 ms added 
0a6ec                 | ' ' defsnd channel, a,d,s,r - defines ADSR as in SID 
0a6ec                 | ' 
0a6ec                 | ' 
0a6ec                 | ' if numpar<2 then return
0a6ec     02 1A 56 F2 | 	cmps	arg05, #2 wc
0a6f0     66 00 00 FF 
0a6f4     50 E4 85 F1 | 	sub	objptr, ##52304
0a6f8     40 0A 90 CD |  if_b	jmp	#LR__0907
0a6fc                 | ' 
0a6fc                 | '  
0a6fc                 | ' if numpar=2 then
0a6fc     A7 1A 02 FB | 	rdlong	arg05, fp
0a700     02 1A 0E F2 | 	cmp	arg05, #2 wz
0a704     AC 04 90 5D |  if_ne	jmp	#LR__0890
0a708     B8 EA BF FD | 	call	#_pop
0a70c     FF 1A 02 F6 | 	mov	arg05, result3
0a710     28 4E 05 F1 | 	add	fp, #40
0a714     A7 FA 61 FC | 	wrlong	result1, fp
0a718     04 4E 05 F1 | 	add	fp, #4
0a71c     A7 FC 61 FC | 	wrlong	result2, fp
0a720     04 4E 05 F1 | 	add	fp, #4
0a724     A7 1A 62 FC | 	wrlong	arg05, fp
0a728                 | '   t1=pop()
0a728                 | '   if t1.result_type=result_string2 then 
0a728     30 4E 85 F1 | 	sub	fp, #48
0a72c     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0a730     20 00 90 5D |  if_ne	jmp	#LR__0880
0a734     28 4E 05 F1 | 	add	fp, #40
0a738     A7 12 02 FB | 	rdlong	arg01, fp
0a73c     28 4E 85 F1 | 	sub	fp, #40
0a740     88 1B B0 FD | 	call	#_convertstring
0a744     34 4E 05 F1 | 	add	fp, #52
0a748     A7 FA 61 FC | 	wrlong	result1, fp
0a74c     34 4E 85 F1 | 	sub	fp, #52
0a750     40 00 90 FD | 	jmp	#LR__0883
0a754                 | LR__0880
0a754     30 4E 05 F1 | 	add	fp, #48
0a758     A7 1A 02 FB | 	rdlong	arg05, fp
0a75c     30 4E 85 F1 | 	sub	fp, #48
0a760     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0a764     18 00 90 5D |  if_ne	jmp	#LR__0881
0a768     28 4E 05 F1 | 	add	fp, #40
0a76c     A7 1A 02 FB | 	rdlong	arg05, fp
0a770     0C 4E 05 F1 | 	add	fp, #12
0a774     A7 1A 62 FC | 	wrlong	arg05, fp
0a778     34 4E 85 F1 | 	sub	fp, #52
0a77c     14 00 90 FD | 	jmp	#LR__0882
0a780                 | LR__0881
0a780     3E 01 00 FF 
0a784     7F 1B 06 F6 | 	mov	arg05, ##@LR__4572
0a788     34 4E 05 F1 | 	add	fp, #52
0a78c     A7 1A 62 FC | 	wrlong	arg05, fp
0a790     34 4E 85 F1 | 	sub	fp, #52
0a794                 | LR__0882
0a794                 | LR__0883
0a794                 | ' 
0a794                 | '     
0a794                 | '   if s<>"" then 
0a794     34 4E 05 F1 | 	add	fp, #52
0a798     A7 12 02 FB | 	rdlong	arg01, fp
0a79c     34 4E 85 F1 | 	sub	fp, #52
0a7a0     3E 01 00 FF 
0a7a4     80 15 06 F6 | 	mov	arg02, ##@LR__4573
0a7a8     D8 DD B0 FD | 	call	#__system___string_cmp
0a7ac     00 FA 0D F2 | 	cmp	result1, #0 wz
0a7b0     9C 02 90 AD |  if_e	jmp	#LR__0888
0a7b4     0C EA BF FD | 	call	#_pop
0a7b8     FF 1A 02 F6 | 	mov	arg05, result3
0a7bc     28 4E 05 F1 | 	add	fp, #40
0a7c0     A7 FA 61 FC | 	wrlong	result1, fp
0a7c4     04 4E 05 F1 | 	add	fp, #4
0a7c8     A7 FC 61 FC | 	wrlong	result2, fp
0a7cc     04 4E 05 F1 | 	add	fp, #4
0a7d0     A7 1A 62 FC | 	wrlong	arg05, fp
0a7d4     08 4E 85 F1 | 	sub	fp, #8
0a7d8     A7 12 02 F6 | 	mov	arg01, fp
0a7dc     28 4E 85 F1 | 	sub	fp, #40
0a7e0     70 5E B0 FD | 	call	#_converttoint
0a7e4     10 4E 05 F1 | 	add	fp, #16
0a7e8     A7 FA 61 FC | 	wrlong	result1, fp
0a7ec     10 4E 85 F1 | 	sub	fp, #16
0a7f0                 | '     t1=pop()
0a7f0                 | '     channel=converttoint(t1) 
0a7f0                 | '     close #9 : open "/sd/media/h/"+s for input as #9
0a7f0     09 12 06 F6 | 	mov	arg01, #9
0a7f4     90 2B B1 FD | 	call	#__system__close
0a7f8     09 1E 06 F6 | 	mov	local01, #9
0a7fc     3E 01 00 FF 
0a800     81 13 06 F6 | 	mov	arg01, ##@LR__4574
0a804     34 4E 05 F1 | 	add	fp, #52
0a808     A7 14 02 FB | 	rdlong	arg02, fp
0a80c     34 4E 85 F1 | 	sub	fp, #52
0a810     A4 DD B0 FD | 	call	#__system___string_concat
0a814     FD 14 02 F6 | 	mov	arg02, result1
0a818     0F 13 02 F6 | 	mov	arg01, local01
0a81c     00 16 06 F6 | 	mov	arg03, #0
0a820     38 E9 B0 FD | 	call	#__system___basic_open_string
0a824     20 E8 05 F1 | 	add	ptr___system__dat__, #32
0a828     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0a82c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
0a830     7A 00 00 FF 
0a834     C4 E4 05 F1 | 	add	objptr, ##62660
0a838     F2 FA 61 FC | 	wrlong	result1, objptr
0a83c                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0a83c     7A 00 00 FF 
0a840     C4 E4 85 F1 | 	sub	objptr, ##62660
0a844     B0 00 90 AD |  if_e	jmp	#LR__0884
0a848     00 12 06 F6 | 	mov	arg01, #0
0a84c     08 35 B1 FD | 	call	#__system___getiolock_0416
0a850     FD 12 02 F6 | 	mov	arg01, result1
0a854     04 DD B0 FD | 	call	#__system___lockmem
0a858     3E 01 00 FF 
0a85c     8E 15 06 F6 | 	mov	arg02, ##@LR__4575
0a860     00 12 06 F6 | 	mov	arg01, #0
0a864     00 16 06 F6 | 	mov	arg03, #0
0a868     E0 E9 B0 FD | 	call	#__system___basic_print_string
0a86c     7A 00 00 FF 
0a870     C4 E4 05 F1 | 	add	objptr, ##62660
0a874     F2 14 02 FB | 	rdlong	arg02, objptr
0a878     7A 00 00 FF 
0a87c     C4 E4 85 F1 | 	sub	objptr, ##62660
0a880     00 12 06 F6 | 	mov	arg01, #0
0a884     00 16 06 F6 | 	mov	arg03, #0
0a888     0A 18 06 F6 | 	mov	arg04, #10
0a88c     00 EA B0 FD | 	call	#__system___basic_print_integer
0a890     3E 01 00 FF 
0a894     9C 15 06 F6 | 	mov	arg02, ##@LR__4576
0a898     00 12 06 F6 | 	mov	arg01, #0
0a89c     00 16 06 F6 | 	mov	arg03, #0
0a8a0     A8 E9 B0 FD | 	call	#__system___basic_print_string
0a8a4     00 1E 06 F6 | 	mov	local01, #0
0a8a8     7A 00 00 FF 
0a8ac     C4 E4 05 F1 | 	add	objptr, ##62660
0a8b0     F2 12 02 FB | 	rdlong	arg01, objptr
0a8b4     7A 00 00 FF 
0a8b8     C4 E4 85 F1 | 	sub	objptr, ##62660
0a8bc     94 01 B1 FD | 	call	#__system___strerror
0a8c0     FD 14 02 F6 | 	mov	arg02, result1
0a8c4     0F 13 02 F6 | 	mov	arg01, local01
0a8c8     00 16 06 F6 | 	mov	arg03, #0
0a8cc     7C E9 B0 FD | 	call	#__system___basic_print_string
0a8d0     00 12 06 F6 | 	mov	arg01, #0
0a8d4     0A 14 06 F6 | 	mov	arg02, #10
0a8d8     00 16 06 F6 | 	mov	arg03, #0
0a8dc     14 E9 B0 FD | 	call	#__system___basic_print_char
0a8e0     00 12 06 F6 | 	mov	arg01, #0
0a8e4     70 34 B1 FD | 	call	#__system___getiolock_0416
0a8e8     FD 00 68 FC | 	wrlong	#0, result1
0a8ec     09 12 06 F6 | 	mov	arg01, #9
0a8f0     94 2A B1 FD | 	call	#__system__close
0a8f4     44 08 90 FD | 	jmp	#LR__0907
0a8f8                 | LR__0884
0a8f8                 | '     get #9,17,envbuf8(channel,0),256
0a8f8     10 4E 05 F1 | 	add	fp, #16
0a8fc     A7 1A 02 FB | 	rdlong	arg05, fp
0a900     10 4E 85 F1 | 	sub	fp, #16
0a904     0D 17 02 F6 | 	mov	arg03, arg05
0a908     09 16 66 F0 | 	shl	arg03, #9
0a90c     0D 17 02 F1 | 	add	arg03, arg05
0a910     2B 00 00 FF 
0a914     CC E5 05 F1 | 	add	objptr, ##22476
0a918     F2 16 02 F1 | 	add	arg03, objptr
0a91c     09 12 06 F6 | 	mov	arg01, #9
0a920     11 14 06 F6 | 	mov	arg02, #17
0a924     00 19 06 F6 | 	mov	arg04, #256
0a928     01 1A 06 F6 | 	mov	arg05, #1
0a92c     2B 00 00 FF 
0a930     CC E5 85 F1 | 	sub	objptr, ##22476
0a934     24 EA B0 FD | 	call	#__system___basic_get
0a938                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0a938     04 4E 05 F1 | 	add	fp, #4
0a93c     A7 FE 69 FC | 	wrlong	#255, fp
0a940     04 4E 85 F1 | 	sub	fp, #4
0a944     2B 00 00 FF 
0a948     CC E5 05 F1 | 	add	objptr, ##22476
0a94c     97 34 48 FB | 	callpa	#(@LR__0886-@LR__0885)>>2,fcache_load_ptr_
0a950                 | LR__0885
0a950     10 4E 05 F1 | 	add	fp, #16
0a954     A7 1A 02 FB | 	rdlong	arg05, fp
0a958     0D 19 02 F6 | 	mov	arg04, arg05
0a95c     08 18 66 F0 | 	shl	arg04, #8
0a960     0D 19 02 F1 | 	add	arg04, arg05
0a964     01 18 66 F0 | 	shl	arg04, #1
0a968     F2 18 02 F1 | 	add	arg04, objptr
0a96c     0C 4E 85 F1 | 	sub	fp, #12
0a970     A7 16 02 FB | 	rdlong	arg03, fp
0a974     0B 15 02 F6 | 	mov	arg02, arg03
0a978     01 14 66 F0 | 	shl	arg02, #1
0a97c     0C 15 02 F1 | 	add	arg02, arg04
0a980     0D 19 02 F6 | 	mov	arg04, arg05
0a984     09 18 66 F0 | 	shl	arg04, #9
0a988     0D 19 02 F1 | 	add	arg04, arg05
0a98c     F2 18 02 F1 | 	add	arg04, objptr
0a990     0C 17 02 F1 | 	add	arg03, arg04
0a994     0B 1B C2 FA | 	rdbyte	arg05, arg03
0a998     00 1B 06 FA | 	mul	arg05, #256
0a99c     0A 1B 52 FC | 	wrword	arg05, arg02
0a9a0     A7 1A 02 FB | 	rdlong	arg05, fp
0a9a4     01 1A 86 F1 | 	sub	arg05, #1
0a9a8     A7 1A 62 FC | 	wrlong	arg05, fp
0a9ac     04 4E 85 F1 | 	sub	fp, #4
0a9b0     00 1A 56 F2 | 	cmps	arg05, #0 wc
0a9b4     98 FF 9F 3D |  if_ae	jmp	#LR__0885
0a9b8                 | LR__0886
0a9b8     2B 00 00 FF 
0a9bc     CC E5 85 F1 | 	sub	objptr, ##22476
0a9c0                 | '     close #9
0a9c0     09 12 06 F6 | 	mov	arg01, #9
0a9c4     C0 29 B1 FD | 	call	#__system__close
0a9c8                 | '                                                                       for i=0 to 255: v.putpixel(i,288-envbuf(channel,i)/400,40) : next i
0a9c8     04 4E 05 F1 | 	add	fp, #4
0a9cc     A7 00 68 FC | 	wrlong	#0, fp
0a9d0                 | LR__0887
0a9d0     A7 1E 02 FB | 	rdlong	local01, fp
0a9d4     0F 13 02 F6 | 	mov	arg01, local01
0a9d8     0C 4E 05 F1 | 	add	fp, #12
0a9dc     A7 1A 02 FB | 	rdlong	arg05, fp
0a9e0     0D 19 02 F6 | 	mov	arg04, arg05
0a9e4     08 18 66 F0 | 	shl	arg04, #8
0a9e8     0D 19 02 F1 | 	add	arg04, arg05
0a9ec     01 18 66 F0 | 	shl	arg04, #1
0a9f0     2B 00 00 FF 
0a9f4     CC E5 05 F1 | 	add	objptr, ##22476
0a9f8     F2 18 02 F1 | 	add	arg04, objptr
0a9fc     01 1E 66 F0 | 	shl	local01, #1
0aa00     0C 1F 02 F1 | 	add	local01, arg04
0aa04     0F 1F E2 FA | 	rdword	local01, local01
0aa08     0F 1F 52 F6 | 	abs	local01, local01 wc
0aa0c     90 1F 16 FD | 	qdiv	local01, #400
0aa10     10 4E 85 F1 | 	sub	fp, #16
0aa14     2B 00 00 FF 
0aa18     CC E5 85 F1 | 	sub	objptr, ##22476
0aa1c     20 15 06 F6 | 	mov	arg02, #288
0aa20     28 16 06 F6 | 	mov	arg03, #40
0aa24     18 1E 62 FD | 	getqx	local01
0aa28     0F 15 A2 F3 | 	sumnc	arg02, local01
0aa2c     DC BB B0 FD | 	call	#_hg010b_spin2_putpixel
0aa30     04 4E 05 F1 | 	add	fp, #4
0aa34     A7 1E 02 FB | 	rdlong	local01, fp
0aa38     01 1E 06 F1 | 	add	local01, #1
0aa3c     A7 1E 62 FC | 	wrlong	local01, fp
0aa40     00 1F 56 F2 | 	cmps	local01, #256 wc
0aa44     88 FF 9F CD |  if_b	jmp	#LR__0887
0aa48     04 4E 85 F1 | 	sub	fp, #4
0aa4c                 | '     return
0aa4c     EC 06 90 FD | 	jmp	#LR__0907
0aa50                 | LR__0888
0aa50     28 4E 05 F1 | 	add	fp, #40
0aa54     A7 12 02 F6 | 	mov	arg01, fp
0aa58     28 4E 85 F1 | 	sub	fp, #40
0aa5c     F4 5B B0 FD | 	call	#_converttoint
0aa60     FD 1E 02 F6 | 	mov	local01, result1
0aa64     0C 4E 05 F1 | 	add	fp, #12
0aa68     A7 1E 62 FC | 	wrlong	local01, fp
0aa6c     0C 4E 85 F1 | 	sub	fp, #12
0aa70                 | '   
0aa70                 | '   par=converttoint(t1)  : print par
0aa70     00 12 06 F6 | 	mov	arg01, #0
0aa74     E0 32 B1 FD | 	call	#__system___getiolock_0416
0aa78     FD 12 02 F6 | 	mov	arg01, result1
0aa7c     DC DA B0 FD | 	call	#__system___lockmem
0aa80     0C 4E 05 F1 | 	add	fp, #12
0aa84     A7 14 02 FB | 	rdlong	arg02, fp
0aa88     0C 4E 85 F1 | 	sub	fp, #12
0aa8c     00 12 06 F6 | 	mov	arg01, #0
0aa90     00 16 06 F6 | 	mov	arg03, #0
0aa94     0A 18 06 F6 | 	mov	arg04, #10
0aa98     F4 E7 B0 FD | 	call	#__system___basic_print_integer
0aa9c     00 12 06 F6 | 	mov	arg01, #0
0aaa0     0A 14 06 F6 | 	mov	arg02, #10
0aaa4     00 16 06 F6 | 	mov	arg03, #0
0aaa8     48 E7 B0 FD | 	call	#__system___basic_print_char
0aaac     00 12 06 F6 | 	mov	arg01, #0
0aab0     A4 32 B1 FD | 	call	#__system___getiolock_0416
0aab4     FD 00 68 FC | 	wrlong	#0, result1
0aab8     08 E7 BF FD | 	call	#_pop
0aabc     FF 1E 02 F6 | 	mov	local01, result3
0aac0     28 4E 05 F1 | 	add	fp, #40
0aac4     A7 FA 61 FC | 	wrlong	result1, fp
0aac8     04 4E 05 F1 | 	add	fp, #4
0aacc     A7 FC 61 FC | 	wrlong	result2, fp
0aad0     04 4E 05 F1 | 	add	fp, #4
0aad4     A7 1E 62 FC | 	wrlong	local01, fp
0aad8     08 4E 85 F1 | 	sub	fp, #8
0aadc     A7 12 02 F6 | 	mov	arg01, fp
0aae0     28 4E 85 F1 | 	sub	fp, #40
0aae4     6C 5B B0 FD | 	call	#_converttoint
0aae8     10 4E 05 F1 | 	add	fp, #16
0aaec     A7 FA 61 FC | 	wrlong	result1, fp
0aaf0                 | '   t1=pop()
0aaf0                 | '   channel=converttoint(t1)  
0aaf0                 | '   if par=0 then for i=0 to 1023: samplebuf(channel,i)=round(32600*sin(1.0/512*3.14159265359*i)) : next i
0aaf0     04 4E 85 F1 | 	sub	fp, #4
0aaf4     A7 1E 0A FB | 	rdlong	local01, fp wz
0aaf8     0C 4E 85 F1 | 	sub	fp, #12
0aafc     3C 06 90 5D |  if_ne	jmp	#LR__0907
0ab00     04 4E 05 F1 | 	add	fp, #4
0ab04     A7 00 68 FC | 	wrlong	#0, fp
0ab08     04 4E 85 F1 | 	sub	fp, #4
0ab0c                 | LR__0889
0ab0c     10 4E 05 F1 | 	add	fp, #16
0ab10     A7 1E 02 FB | 	rdlong	local01, fp
0ab14     0B 1E 66 F0 | 	shl	local01, #11
0ab18     0B 00 00 FF 
0ab1c     CC E5 05 F1 | 	add	objptr, ##6092
0ab20     F2 1E 02 F1 | 	add	local01, objptr
0ab24     0C 4E 85 F1 | 	sub	fp, #12
0ab28     A7 12 02 FB | 	rdlong	arg01, fp
0ab2c     09 21 02 F6 | 	mov	local02, arg01
0ab30     01 20 66 F0 | 	shl	local02, #1
0ab34     0F 21 02 F1 | 	add	local02, local01
0ab38     04 4E 85 F1 | 	sub	fp, #4
0ab3c     0B 00 00 FF 
0ab40     CC E5 85 F1 | 	sub	objptr, ##6092
0ab44     09 13 52 F6 | 	abs	arg01, arg01 wc
0ab48     1F 22 C6 C9 |  if_b	decod	local03, #31
0ab4c     00 22 06 36 |  if_ae	mov	local03, #0
0ab50     E8 FF B0 FD | 	call	#__system___float_fromuns
0ab54     11 FB 61 F5 | 	xor	result1, local03
0ab58     FD 14 02 F6 | 	mov	arg02, result1
0ab5c     87 E4 1D FF 
0ab60     DB 13 06 F6 | 	mov	arg01, ##1003032539
0ab64     D8 03 B1 FD | 	call	#__system___float_mul
0ab68     FD 12 02 F6 | 	mov	arg01, result1
0ab6c     0C 0D B1 FD | 	call	#__system____builtin_sinf
0ab70     FD 14 02 F6 | 	mov	arg02, result1
0ab74     58 7F 23 FF 
0ab78     00 12 06 F6 | 	mov	arg01, ##1191096320
0ab7c     C0 03 B1 FD | 	call	#__system___float_mul
0ab80     FD 12 02 F6 | 	mov	arg01, result1
0ab84     01 14 06 F6 | 	mov	arg02, #1
0ab88     7C 08 B1 FD | 	call	#__system___float_tointeger
0ab8c     10 FB 51 FC | 	wrword	result1, local02
0ab90     04 4E 05 F1 | 	add	fp, #4
0ab94     A7 20 02 FB | 	rdlong	local02, fp
0ab98     01 20 06 F1 | 	add	local02, #1
0ab9c     A7 20 62 FC | 	wrlong	local02, fp
0aba0     04 4E 85 F1 | 	sub	fp, #4
0aba4     02 00 00 FF 
0aba8     00 20 56 F2 | 	cmps	local02, ##1024 wc
0abac     5C FF 9F CD |  if_b	jmp	#LR__0889
0abb0                 | '                                                                            '  for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0abb0                 | '   return
0abb0     88 05 90 FD | 	jmp	#LR__0907
0abb4                 | LR__0890
0abb4                 | ' for i=0 to 15 : harm(i)=0: next i  
0abb4     04 4E 05 F1 | 	add	fp, #4
0abb8     A7 00 68 FC | 	wrlong	#0, fp
0abbc     97 16 48 FB | 	callpa	#(@LR__0892-@LR__0891)>>2,fcache_load_ptr_
0abc0                 | LR__0891
0abc0     A7 1E 02 FB | 	rdlong	local01, fp
0abc4     02 1E 66 F0 | 	shl	local01, #2
0abc8     34 4E 05 F1 | 	add	fp, #52
0abcc     A7 1E 02 F1 | 	add	local01, fp
0abd0     0F 01 68 FC | 	wrlong	#0, local01
0abd4     34 4E 85 F1 | 	sub	fp, #52
0abd8     A7 1E 02 FB | 	rdlong	local01, fp
0abdc     01 1E 06 F1 | 	add	local01, #1
0abe0     A7 1E 62 FC | 	wrlong	local01, fp
0abe4     10 1E 56 F2 | 	cmps	local01, #16 wc
0abe8     D4 FF 9F CD |  if_b	jmp	#LR__0891
0abec                 | LR__0892
0abec     04 4E 85 F1 | 	sub	fp, #4
0abf0                 | ' for i=numpar to 2 step -1 
0abf0     A7 1E 02 FB | 	rdlong	local01, fp
0abf4     04 4E 05 F1 | 	add	fp, #4
0abf8     A7 1E 62 FC | 	wrlong	local01, fp
0abfc     04 4E 85 F1 | 	sub	fp, #4
0ac00                 | LR__0893
0ac00     C0 E5 BF FD | 	call	#_pop
0ac04     28 4E 05 F1 | 	add	fp, #40
0ac08     A7 FA 61 FC | 	wrlong	result1, fp
0ac0c     04 4E 05 F1 | 	add	fp, #4
0ac10     A7 FC 61 FC | 	wrlong	result2, fp
0ac14     04 4E 05 F1 | 	add	fp, #4
0ac18     A7 FE 61 FC | 	wrlong	result3, fp
0ac1c     2C 4E 85 F1 | 	sub	fp, #44
0ac20     A7 1E 02 FB | 	rdlong	local01, fp
0ac24     02 1E 86 F1 | 	sub	local01, #2
0ac28     02 1E 66 F0 | 	shl	local01, #2
0ac2c     34 4E 05 F1 | 	add	fp, #52
0ac30     A7 1E 02 F1 | 	add	local01, fp
0ac34     10 4E 85 F1 | 	sub	fp, #16
0ac38     A7 12 02 F6 | 	mov	arg01, fp
0ac3c     28 4E 85 F1 | 	sub	fp, #40
0ac40     BC 5A B0 FD | 	call	#_converttofloat
0ac44     0F FB 61 FC | 	wrlong	result1, local01
0ac48     04 4E 05 F1 | 	add	fp, #4
0ac4c     A7 1E 02 FB | 	rdlong	local01, fp
0ac50     01 1E 86 F1 | 	sub	local01, #1
0ac54     A7 1E 62 FC | 	wrlong	local01, fp
0ac58     04 4E 85 F1 | 	sub	fp, #4
0ac5c     02 1E 56 F2 | 	cmps	local01, #2 wc
0ac60     9C FF 9F 3D |  if_ae	jmp	#LR__0893
0ac64     5C E5 BF FD | 	call	#_pop
0ac68     FF 1E 02 F6 | 	mov	local01, result3
0ac6c     28 4E 05 F1 | 	add	fp, #40
0ac70     A7 FA 61 FC | 	wrlong	result1, fp
0ac74     04 4E 05 F1 | 	add	fp, #4
0ac78     A7 FC 61 FC | 	wrlong	result2, fp
0ac7c     04 4E 05 F1 | 	add	fp, #4
0ac80     A7 1E 62 FC | 	wrlong	local01, fp
0ac84     08 4E 85 F1 | 	sub	fp, #8
0ac88     A7 12 02 F6 | 	mov	arg01, fp
0ac8c     28 4E 85 F1 | 	sub	fp, #40
0ac90     C0 59 B0 FD | 	call	#_converttoint
0ac94     FD 1E 02 F6 | 	mov	local01, result1
0ac98     10 4E 05 F1 | 	add	fp, #16
0ac9c     A7 1E 62 FC | 	wrlong	local01, fp
0aca0     10 4E 85 F1 | 	sub	fp, #16
0aca4                 | ' t1=pop()
0aca4                 | ' channel=converttoint(t1) : print channel
0aca4     00 12 06 F6 | 	mov	arg01, #0
0aca8     AC 30 B1 FD | 	call	#__system___getiolock_0416
0acac     FD 12 02 F6 | 	mov	arg01, result1
0acb0     A8 D8 B0 FD | 	call	#__system___lockmem
0acb4     10 4E 05 F1 | 	add	fp, #16
0acb8     A7 14 02 FB | 	rdlong	arg02, fp
0acbc     10 4E 85 F1 | 	sub	fp, #16
0acc0     00 12 06 F6 | 	mov	arg01, #0
0acc4     00 16 06 F6 | 	mov	arg03, #0
0acc8     0A 18 06 F6 | 	mov	arg04, #10
0accc     C0 E5 B0 FD | 	call	#__system___basic_print_integer
0acd0     00 12 06 F6 | 	mov	arg01, #0
0acd4     0A 14 06 F6 | 	mov	arg02, #10
0acd8     00 16 06 F6 | 	mov	arg03, #0
0acdc     14 E5 B0 FD | 	call	#__system___basic_print_char
0ace0     00 12 06 F6 | 	mov	arg01, #0
0ace4     70 30 B1 FD | 	call	#__system___getiolock_0416
0ace8     FD 00 68 FC | 	wrlong	#0, result1
0acec                 | ' for j=0 to 1023: samplebuf(channel, i) =0 : next j
0acec     08 4E 05 F1 | 	add	fp, #8
0acf0     02 00 80 FF 
0acf4     A7 00 68 FC | 	wrlong	##1024, fp
0acf8     08 4E 85 F1 | 	sub	fp, #8
0acfc     0B 00 00 FF 
0ad00     CC E5 05 F1 | 	add	objptr, ##6092
0ad04     97 18 48 FB | 	callpa	#(@LR__0896-@LR__0894)>>2,fcache_load_ptr_
0ad08                 | LR__0894
0ad08     02 00 00 FF 
0ad0c     00 14 DC FC | 	rep	@LR__0897, ##1024
0ad10                 | LR__0895
0ad10     10 4E 05 F1 | 	add	fp, #16
0ad14     A7 20 02 FB | 	rdlong	local02, fp
0ad18     0B 20 66 F0 | 	shl	local02, #11
0ad1c     F2 20 02 F1 | 	add	local02, objptr
0ad20     0C 4E 85 F1 | 	sub	fp, #12
0ad24     A7 1E 02 FB | 	rdlong	local01, fp
0ad28     04 4E 85 F1 | 	sub	fp, #4
0ad2c     01 1E 66 F0 | 	shl	local01, #1
0ad30     10 1F 02 F1 | 	add	local01, local02
0ad34     0F 01 58 FC | 	wrword	#0, local01
0ad38                 | LR__0896
0ad38                 | LR__0897
0ad38     0B 00 00 FF 
0ad3c     CC E5 85 F1 | 	sub	objptr, ##6092
0ad40     1C 4E 05 F1 | 	add	fp, #28
0ad44     A7 00 68 FC | 	wrlong	#0, fp
0ad48                 | ' max=0
0ad48                 | ' if harm(0)<0 then
0ad48     1C 4E 05 F1 | 	add	fp, #28
0ad4c     A7 12 02 FB | 	rdlong	arg01, fp
0ad50     38 4E 85 F1 | 	sub	fp, #56
0ad54     00 14 06 F6 | 	mov	arg02, #0
0ad58     01 16 06 F6 | 	mov	arg03, #1
0ad5c     14 06 B1 FD | 	call	#__system___float_cmp
0ad60     00 FA 55 F2 | 	cmps	result1, #0 wc
0ad64     04 01 90 3D |  if_ae	jmp	#LR__0900
0ad68     38 4E 05 F1 | 	add	fp, #56
0ad6c     A7 FA 01 FB | 	rdlong	result1, fp
0ad70     1F FA 05 F4 | 	bitl	result1, #31
0ad74     24 4E 85 F1 | 	sub	fp, #36
0ad78     A7 FA 61 FC | 	wrlong	result1, fp
0ad7c     28 4E 05 F1 | 	add	fp, #40
0ad80     A7 FA 01 FB | 	rdlong	result1, fp
0ad84     1F FA 05 F4 | 	bitl	result1, #31
0ad88     24 4E 85 F1 | 	sub	fp, #36
0ad8c     A7 FA 61 FC | 	wrlong	result1, fp
0ad90     20 4E 05 F1 | 	add	fp, #32
0ad94     00 C0 9F FF 
0ad98     A7 00 68 FC | 	wrlong	##1065353216, fp
0ad9c     24 4E 85 F1 | 	sub	fp, #36
0ada0     A7 1E 02 FB | 	rdlong	local01, fp
0ada4     28 4E 05 F1 | 	add	fp, #40
0ada8     A7 1E 62 FC | 	wrlong	local01, fp
0adac     24 4E 85 F1 | 	sub	fp, #36
0adb0     A7 1E 02 FB | 	rdlong	local01, fp
0adb4     28 4E 05 F1 | 	add	fp, #40
0adb8     A7 1E 62 FC | 	wrlong	local01, fp
0adbc                 | '   harm(0)=1
0adbc                 | '   harm(1)=even
0adbc                 | '   harm(2)=odd
0adbc                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0adbc     3C 4E 85 F1 | 	sub	fp, #60
0adc0     A7 06 68 FC | 	wrlong	#3, fp
0adc4                 | LR__0898
0adc4     A7 1A 02 FB | 	rdlong	arg05, fp
0adc8     0D 25 02 F6 | 	mov	local04, arg05
0adcc     02 24 66 F0 | 	shl	local04, #2
0add0     34 4E 05 F1 | 	add	fp, #52
0add4     A7 24 02 F1 | 	add	local04, fp
0add8     02 1A 86 F1 | 	sub	arg05, #2
0addc     02 1A 66 F0 | 	shl	arg05, #2
0ade0     A7 1A 02 F1 | 	add	arg05, fp
0ade4     0D 13 02 FB | 	rdlong	arg01, arg05
0ade8     24 4E 85 F1 | 	sub	fp, #36
0adec     A7 14 02 FB | 	rdlong	arg02, fp
0adf0     14 4E 85 F1 | 	sub	fp, #20
0adf4     48 01 B1 FD | 	call	#__system___float_mul
0adf8     12 FB 61 FC | 	wrlong	result1, local04
0adfc     04 4E 05 F1 | 	add	fp, #4
0ae00     A7 26 02 FB | 	rdlong	local05, fp
0ae04     02 26 06 F1 | 	add	local05, #2
0ae08     A7 26 62 FC | 	wrlong	local05, fp
0ae0c     10 26 56 F2 | 	cmps	local05, #16 wc
0ae10     B0 FF 9F CD |  if_b	jmp	#LR__0898
0ae14                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0ae14     A7 08 68 FC | 	wrlong	#4, fp
0ae18                 | LR__0899
0ae18     A7 26 02 FB | 	rdlong	local05, fp
0ae1c     13 25 02 F6 | 	mov	local04, local05
0ae20     02 24 66 F0 | 	shl	local04, #2
0ae24     34 4E 05 F1 | 	add	fp, #52
0ae28     A7 24 02 F1 | 	add	local04, fp
0ae2c     02 26 86 F1 | 	sub	local05, #2
0ae30     02 26 66 F0 | 	shl	local05, #2
0ae34     A7 26 02 F1 | 	add	local05, fp
0ae38     13 13 02 FB | 	rdlong	arg01, local05
0ae3c     20 4E 85 F1 | 	sub	fp, #32
0ae40     A7 14 02 FB | 	rdlong	arg02, fp
0ae44     18 4E 85 F1 | 	sub	fp, #24
0ae48     F4 00 B1 FD | 	call	#__system___float_mul
0ae4c     12 FB 61 FC | 	wrlong	result1, local04
0ae50     04 4E 05 F1 | 	add	fp, #4
0ae54     A7 26 02 FB | 	rdlong	local05, fp
0ae58     02 26 06 F1 | 	add	local05, #2
0ae5c     A7 26 62 FC | 	wrlong	local05, fp
0ae60     0F 26 56 F2 | 	cmps	local05, #15 wc
0ae64     B0 FF 9F CD |  if_b	jmp	#LR__0899
0ae68     04 4E 85 F1 | 	sub	fp, #4
0ae6c                 | LR__0900
0ae6c                 | ' if harm(0)>=0 then ' synthesize with harmonics
0ae6c     38 4E 05 F1 | 	add	fp, #56
0ae70     A7 12 02 FB | 	rdlong	arg01, fp
0ae74     38 4E 85 F1 | 	sub	fp, #56
0ae78     00 14 06 F6 | 	mov	arg02, #0
0ae7c     01 16 66 F6 | 	neg	arg03, #1
0ae80     F0 04 B1 FD | 	call	#__system___float_cmp
0ae84     00 FA 55 F2 | 	cmps	result1, #0 wc
0ae88     B0 02 90 CD |  if_b	jmp	#LR__0906
0ae8c                 | '   for i=0 to 1023
0ae8c     04 4E 05 F1 | 	add	fp, #4
0ae90     A7 00 68 FC | 	wrlong	#0, fp
0ae94     04 4E 85 F1 | 	sub	fp, #4
0ae98                 | LR__0901
0ae98     20 4E 05 F1 | 	add	fp, #32
0ae9c     A7 00 68 FC | 	wrlong	#0, fp
0aea0                 | '     spl=0
0aea0                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
0aea0     18 4E 85 F1 | 	sub	fp, #24
0aea4     A7 00 68 FC | 	wrlong	#0, fp
0aea8                 | LR__0902
0aea8     A7 24 02 FB | 	rdlong	local04, fp
0aeac     02 24 66 F0 | 	shl	local04, #2
0aeb0     30 4E 05 F1 | 	add	fp, #48
0aeb4     A7 24 02 F1 | 	add	local04, fp
0aeb8     12 27 02 FB | 	rdlong	local05, local04
0aebc     87 E4 1D FF 
0aec0     DB 25 06 F6 | 	mov	local04, ##1003032539
0aec4     34 4E 85 F1 | 	sub	fp, #52
0aec8     A7 12 02 FB | 	rdlong	arg01, fp
0aecc     04 4E 85 F1 | 	sub	fp, #4
0aed0     09 13 52 F6 | 	abs	arg01, arg01 wc
0aed4     1F 22 C6 C9 |  if_b	decod	local03, #31
0aed8     00 22 06 36 |  if_ae	mov	local03, #0
0aedc     5C FC B0 FD | 	call	#__system___float_fromuns
0aee0     11 FB 61 F5 | 	xor	result1, local03
0aee4     FD 14 02 F6 | 	mov	arg02, result1
0aee8     12 13 02 F6 | 	mov	arg01, local04
0aeec     50 00 B1 FD | 	call	#__system___float_mul
0aef0     FD 24 02 F6 | 	mov	local04, result1
0aef4     08 4E 05 F1 | 	add	fp, #8
0aef8     A7 12 02 FB | 	rdlong	arg01, fp
0aefc     08 4E 85 F1 | 	sub	fp, #8
0af00     01 12 06 F1 | 	add	arg01, #1
0af04     09 13 52 F6 | 	abs	arg01, arg01 wc
0af08     1F 22 C6 C9 |  if_b	decod	local03, #31
0af0c     00 22 06 36 |  if_ae	mov	local03, #0
0af10     28 FC B0 FD | 	call	#__system___float_fromuns
0af14     11 FB 61 F5 | 	xor	result1, local03
0af18     FD 14 02 F6 | 	mov	arg02, result1
0af1c     12 13 02 F6 | 	mov	arg01, local04
0af20     1C 00 B1 FD | 	call	#__system___float_mul
0af24     FD 12 02 F6 | 	mov	arg01, result1
0af28     50 09 B1 FD | 	call	#__system____builtin_sinf
0af2c     FD 14 02 F6 | 	mov	arg02, result1
0af30     13 13 02 F6 | 	mov	arg01, local05
0af34     08 00 B1 FD | 	call	#__system___float_mul
0af38     FD 14 02 F6 | 	mov	arg02, result1
0af3c     20 4E 05 F1 | 	add	fp, #32
0af40     A7 12 02 FB | 	rdlong	arg01, fp
0af44     20 4E 85 F1 | 	sub	fp, #32
0af48     24 FC B0 FD | 	call	#__system___float_add
0af4c     20 4E 05 F1 | 	add	fp, #32
0af50     A7 FA 61 FC | 	wrlong	result1, fp
0af54     18 4E 85 F1 | 	sub	fp, #24
0af58     A7 16 02 FB | 	rdlong	arg03, fp
0af5c     01 16 06 F1 | 	add	arg03, #1
0af60     A7 16 62 FC | 	wrlong	arg03, fp
0af64     10 16 56 F2 | 	cmps	arg03, #16 wc
0af68     3C FF 9F CD |  if_b	jmp	#LR__0902
0af6c                 | '     if abs(spl)>max then max=abs(spl)  ': print max 
0af6c     18 4E 05 F1 | 	add	fp, #24
0af70     A7 12 02 FB | 	rdlong	arg01, fp
0af74     1F 12 06 F4 | 	bitl	arg01, #31
0af78     04 4E 85 F1 | 	sub	fp, #4
0af7c     A7 14 02 FB | 	rdlong	arg02, fp
0af80     1C 4E 85 F1 | 	sub	fp, #28
0af84     01 16 66 F6 | 	neg	arg03, #1
0af88     E8 03 B1 FD | 	call	#__system___float_cmp
0af8c     01 FA 55 F2 | 	cmps	result1, #1 wc
0af90     18 00 90 CD |  if_b	jmp	#LR__0903
0af94     20 4E 05 F1 | 	add	fp, #32
0af98     A7 FA 01 FB | 	rdlong	result1, fp
0af9c     1F FA 05 F4 | 	bitl	result1, #31
0afa0     04 4E 85 F1 | 	sub	fp, #4
0afa4     A7 FA 61 FC | 	wrlong	result1, fp
0afa8     1C 4E 85 F1 | 	sub	fp, #28
0afac                 | LR__0903
0afac     04 4E 05 F1 | 	add	fp, #4
0afb0     A7 26 02 FB | 	rdlong	local05, fp
0afb4     01 26 06 F1 | 	add	local05, #1
0afb8     A7 26 62 FC | 	wrlong	local05, fp
0afbc     04 4E 85 F1 | 	sub	fp, #4
0afc0     02 00 00 FF 
0afc4     00 26 56 F2 | 	cmps	local05, ##1024 wc
0afc8     CC FE 9F CD |  if_b	jmp	#LR__0901
0afcc                 | '   for i=0 to 1023
0afcc     04 4E 05 F1 | 	add	fp, #4
0afd0     A7 00 68 FC | 	wrlong	#0, fp
0afd4     04 4E 85 F1 | 	sub	fp, #4
0afd8                 | LR__0904
0afd8     20 4E 05 F1 | 	add	fp, #32
0afdc     A7 00 68 FC | 	wrlong	#0, fp
0afe0                 | '     spl=0
0afe0                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j ':' print spl
0afe0     18 4E 85 F1 | 	sub	fp, #24
0afe4     A7 00 68 FC | 	wrlong	#0, fp
0afe8                 | LR__0905
0afe8     A7 26 02 FB | 	rdlong	local05, fp
0afec     02 26 66 F0 | 	shl	local05, #2
0aff0     30 4E 05 F1 | 	add	fp, #48
0aff4     A7 26 02 F1 | 	add	local05, fp
0aff8     13 27 02 FB | 	rdlong	local05, local05
0affc     1C 4E 85 F1 | 	sub	fp, #28
0b000     A7 14 02 FB | 	rdlong	arg02, fp
0b004     1C 4E 85 F1 | 	sub	fp, #28
0b008     58 7F 23 FF 
0b00c     00 12 06 F6 | 	mov	arg01, ##1191096320
0b010     30 01 B1 FD | 	call	#__system___float_div
0b014     FD 14 02 F6 | 	mov	arg02, result1
0b018     13 13 02 F6 | 	mov	arg01, local05
0b01c     20 FF B0 FD | 	call	#__system___float_mul
0b020     FD 26 02 F6 | 	mov	local05, result1
0b024     87 E4 1D FF 
0b028     DB 25 06 F6 | 	mov	local04, ##1003032539
0b02c     04 4E 05 F1 | 	add	fp, #4
0b030     A7 12 02 FB | 	rdlong	arg01, fp
0b034     04 4E 85 F1 | 	sub	fp, #4
0b038     09 13 52 F6 | 	abs	arg01, arg01 wc
0b03c     1F 22 C6 C9 |  if_b	decod	local03, #31
0b040     00 22 06 36 |  if_ae	mov	local03, #0
0b044     F4 FA B0 FD | 	call	#__system___float_fromuns
0b048     11 FB 61 F5 | 	xor	result1, local03
0b04c     FD 14 02 F6 | 	mov	arg02, result1
0b050     12 13 02 F6 | 	mov	arg01, local04
0b054     E8 FE B0 FD | 	call	#__system___float_mul
0b058     FD 24 02 F6 | 	mov	local04, result1
0b05c     08 4E 05 F1 | 	add	fp, #8
0b060     A7 12 02 FB | 	rdlong	arg01, fp
0b064     08 4E 85 F1 | 	sub	fp, #8
0b068     01 12 06 F1 | 	add	arg01, #1
0b06c     09 13 52 F6 | 	abs	arg01, arg01 wc
0b070     1F 22 C6 C9 |  if_b	decod	local03, #31
0b074     00 22 06 36 |  if_ae	mov	local03, #0
0b078     C0 FA B0 FD | 	call	#__system___float_fromuns
0b07c     11 FB 61 F5 | 	xor	result1, local03
0b080     FD 14 02 F6 | 	mov	arg02, result1
0b084     12 13 02 F6 | 	mov	arg01, local04
0b088     B4 FE B0 FD | 	call	#__system___float_mul
0b08c     FD 12 02 F6 | 	mov	arg01, result1
0b090     E8 07 B1 FD | 	call	#__system____builtin_sinf
0b094     FD 14 02 F6 | 	mov	arg02, result1
0b098     13 13 02 F6 | 	mov	arg01, local05
0b09c     A0 FE B0 FD | 	call	#__system___float_mul
0b0a0     FD 14 02 F6 | 	mov	arg02, result1
0b0a4     20 4E 05 F1 | 	add	fp, #32
0b0a8     A7 12 02 FB | 	rdlong	arg01, fp
0b0ac     20 4E 85 F1 | 	sub	fp, #32
0b0b0     BC FA B0 FD | 	call	#__system___float_add
0b0b4     20 4E 05 F1 | 	add	fp, #32
0b0b8     A7 FA 61 FC | 	wrlong	result1, fp
0b0bc     18 4E 85 F1 | 	sub	fp, #24
0b0c0     A7 26 02 FB | 	rdlong	local05, fp
0b0c4     01 26 06 F1 | 	add	local05, #1
0b0c8     A7 26 62 FC | 	wrlong	local05, fp
0b0cc     10 26 56 F2 | 	cmps	local05, #16 wc
0b0d0     14 FF 9F CD |  if_b	jmp	#LR__0905
0b0d4     08 4E 05 F1 | 	add	fp, #8
0b0d8     A7 26 02 FB | 	rdlong	local05, fp
0b0dc     0B 26 66 F0 | 	shl	local05, #11
0b0e0     0B 00 00 FF 
0b0e4     CC E5 05 F1 | 	add	objptr, ##6092
0b0e8     F2 26 02 F1 | 	add	local05, objptr
0b0ec     0C 4E 85 F1 | 	sub	fp, #12
0b0f0     A7 20 02 FB | 	rdlong	local02, fp
0b0f4     01 20 66 F0 | 	shl	local02, #1
0b0f8     13 21 02 F1 | 	add	local02, local05
0b0fc     1C 4E 05 F1 | 	add	fp, #28
0b100     A7 12 02 FB | 	rdlong	arg01, fp
0b104     20 4E 85 F1 | 	sub	fp, #32
0b108     0B 00 00 FF 
0b10c     CC E5 85 F1 | 	sub	objptr, ##6092
0b110     01 14 06 F6 | 	mov	arg02, #1
0b114     F0 02 B1 FD | 	call	#__system___float_tointeger
0b118     10 FB 51 FC | 	wrword	result1, local02
0b11c     04 4E 05 F1 | 	add	fp, #4
0b120     A7 26 02 FB | 	rdlong	local05, fp
0b124     01 26 06 F1 | 	add	local05, #1
0b128     A7 26 62 FC | 	wrlong	local05, fp
0b12c     04 4E 85 F1 | 	sub	fp, #4
0b130     02 00 00 FF 
0b134     00 26 56 F2 | 	cmps	local05, ##1024 wc
0b138     9C FE 9F CD |  if_b	jmp	#LR__0904
0b13c                 | LR__0906
0b13c                 | LR__0907
0b13c     A7 F0 03 F6 | 	mov	ptra, fp
0b140     B2 00 A0 FD | 	call	#popregs_
0b144                 | _do_defenv_ret
0b144     2D 00 64 FD | 	ret
0b148                 | 
0b148                 | ' 
0b148                 | ' sub do_defsnd
0b148                 | _do_defsnd
0b148     05 4A 05 F6 | 	mov	COUNT_, #5
0b14c     A8 00 A0 FD | 	call	#pushregs_
0b150     84 F0 07 F1 | 	add	ptra, #132
0b154     69 00 00 FF 
0b158     54 E4 05 F1 | 	add	objptr, ##53844
0b15c     F2 1A 02 FB | 	rdlong	arg05, objptr
0b160     0D 19 02 F6 | 	mov	arg04, arg05
0b164     01 18 66 F0 | 	shl	arg04, #1
0b168     0D 19 02 F1 | 	add	arg04, arg05
0b16c     02 18 66 F0 | 	shl	arg04, #2
0b170     03 00 00 FF 
0b174     04 E4 85 F1 | 	sub	objptr, ##1540
0b178     F2 18 02 F1 | 	add	arg04, objptr
0b17c     0C 1B 02 FB | 	rdlong	arg05, arg04
0b180     A7 1A 62 FC | 	wrlong	arg05, fp
0b184                 | ' 
0b184                 | ' numpar=compiledline(lineptr_e).result.uresult
0b184                 | ' 
0b184                 | ' 
0b184                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
0b184                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
0b184                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
0b184                 | ' ' defsnd channel, oneint - defines waveshape as in SID and 0=sinewave
0b184                 | ' 
0b184                 | ' if numpar<2 then return
0b184     02 1A 56 F2 | 	cmps	arg05, #2 wc
0b188     66 00 00 FF 
0b18c     50 E4 85 F1 | 	sub	objptr, ##52304
0b190     2C 09 90 CD |  if_b	jmp	#LR__0934
0b194                 | ' 
0b194                 | '  
0b194                 | ' if numpar=2 then
0b194     A7 1A 02 FB | 	rdlong	arg05, fp
0b198     02 1A 0E F2 | 	cmp	arg05, #2 wz
0b19c     98 03 90 5D |  if_ne	jmp	#LR__0917
0b1a0     20 E0 BF FD | 	call	#_pop
0b1a4     FF 1A 02 F6 | 	mov	arg05, result3
0b1a8     28 4E 05 F1 | 	add	fp, #40
0b1ac     A7 FA 61 FC | 	wrlong	result1, fp
0b1b0     04 4E 05 F1 | 	add	fp, #4
0b1b4     A7 FC 61 FC | 	wrlong	result2, fp
0b1b8     04 4E 05 F1 | 	add	fp, #4
0b1bc     A7 1A 62 FC | 	wrlong	arg05, fp
0b1c0                 | '   t1=pop()
0b1c0                 | '   if t1.result_type=result_string2 then 
0b1c0     30 4E 85 F1 | 	sub	fp, #48
0b1c4     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0b1c8     20 00 90 5D |  if_ne	jmp	#LR__0910
0b1cc     28 4E 05 F1 | 	add	fp, #40
0b1d0     A7 12 02 FB | 	rdlong	arg01, fp
0b1d4     28 4E 85 F1 | 	sub	fp, #40
0b1d8     F0 10 B0 FD | 	call	#_convertstring
0b1dc     34 4E 05 F1 | 	add	fp, #52
0b1e0     A7 FA 61 FC | 	wrlong	result1, fp
0b1e4     34 4E 85 F1 | 	sub	fp, #52
0b1e8     40 00 90 FD | 	jmp	#LR__0913
0b1ec                 | LR__0910
0b1ec     30 4E 05 F1 | 	add	fp, #48
0b1f0     A7 1A 02 FB | 	rdlong	arg05, fp
0b1f4     30 4E 85 F1 | 	sub	fp, #48
0b1f8     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0b1fc     18 00 90 5D |  if_ne	jmp	#LR__0911
0b200     28 4E 05 F1 | 	add	fp, #40
0b204     A7 1A 02 FB | 	rdlong	arg05, fp
0b208     0C 4E 05 F1 | 	add	fp, #12
0b20c     A7 1A 62 FC | 	wrlong	arg05, fp
0b210     34 4E 85 F1 | 	sub	fp, #52
0b214     14 00 90 FD | 	jmp	#LR__0912
0b218                 | LR__0911
0b218     3E 01 00 FF 
0b21c     9F 1B 06 F6 | 	mov	arg05, ##@LR__4577
0b220     34 4E 05 F1 | 	add	fp, #52
0b224     A7 1A 62 FC | 	wrlong	arg05, fp
0b228     34 4E 85 F1 | 	sub	fp, #52
0b22c                 | LR__0912
0b22c                 | LR__0913
0b22c                 | ' 
0b22c                 | '     
0b22c                 | '   if s<>"" then 
0b22c     34 4E 05 F1 | 	add	fp, #52
0b230     A7 12 02 FB | 	rdlong	arg01, fp
0b234     34 4E 85 F1 | 	sub	fp, #52
0b238     3E 01 00 FF 
0b23c     A0 15 06 F6 | 	mov	arg02, ##@LR__4578
0b240     40 D3 B0 FD | 	call	#__system___string_cmp
0b244     00 FA 0D F2 | 	cmp	result1, #0 wz
0b248     88 01 90 AD |  if_e	jmp	#LR__0915
0b24c     74 DF BF FD | 	call	#_pop
0b250     FF 1A 02 F6 | 	mov	arg05, result3
0b254     28 4E 05 F1 | 	add	fp, #40
0b258     A7 FA 61 FC | 	wrlong	result1, fp
0b25c     04 4E 05 F1 | 	add	fp, #4
0b260     A7 FC 61 FC | 	wrlong	result2, fp
0b264     04 4E 05 F1 | 	add	fp, #4
0b268     A7 1A 62 FC | 	wrlong	arg05, fp
0b26c     08 4E 85 F1 | 	sub	fp, #8
0b270     A7 12 02 F6 | 	mov	arg01, fp
0b274     28 4E 85 F1 | 	sub	fp, #40
0b278     D8 53 B0 FD | 	call	#_converttoint
0b27c     10 4E 05 F1 | 	add	fp, #16
0b280     A7 FA 61 FC | 	wrlong	result1, fp
0b284     10 4E 85 F1 | 	sub	fp, #16
0b288                 | '     t1=pop()
0b288                 | '     channel=converttoint(t1) 
0b288                 | '     close #9 : open "/sd/media/s/"+s for input as #9
0b288     09 12 06 F6 | 	mov	arg01, #9
0b28c     F8 20 B1 FD | 	call	#__system__close
0b290     09 1E 06 F6 | 	mov	local01, #9
0b294     3E 01 00 FF 
0b298     A1 13 06 F6 | 	mov	arg01, ##@LR__4579
0b29c     34 4E 05 F1 | 	add	fp, #52
0b2a0     A7 14 02 FB | 	rdlong	arg02, fp
0b2a4     34 4E 85 F1 | 	sub	fp, #52
0b2a8     0C D3 B0 FD | 	call	#__system___string_concat
0b2ac     FD 14 02 F6 | 	mov	arg02, result1
0b2b0     0F 13 02 F6 | 	mov	arg01, local01
0b2b4     00 16 06 F6 | 	mov	arg03, #0
0b2b8     A0 DE B0 FD | 	call	#__system___basic_open_string
0b2bc     20 E8 05 F1 | 	add	ptr___system__dat__, #32
0b2c0     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0b2c4     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
0b2c8     7A 00 00 FF 
0b2cc     C4 E4 05 F1 | 	add	objptr, ##62660
0b2d0     F2 FA 61 FC | 	wrlong	result1, objptr
0b2d4                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0b2d4     7A 00 00 FF 
0b2d8     C4 E4 85 F1 | 	sub	objptr, ##62660
0b2dc     B0 00 90 AD |  if_e	jmp	#LR__0914
0b2e0     00 12 06 F6 | 	mov	arg01, #0
0b2e4     70 2A B1 FD | 	call	#__system___getiolock_0416
0b2e8     FD 12 02 F6 | 	mov	arg01, result1
0b2ec     6C D2 B0 FD | 	call	#__system___lockmem
0b2f0     3E 01 00 FF 
0b2f4     AE 15 06 F6 | 	mov	arg02, ##@LR__4580
0b2f8     00 12 06 F6 | 	mov	arg01, #0
0b2fc     00 16 06 F6 | 	mov	arg03, #0
0b300     48 DF B0 FD | 	call	#__system___basic_print_string
0b304     7A 00 00 FF 
0b308     C4 E4 05 F1 | 	add	objptr, ##62660
0b30c     F2 14 02 FB | 	rdlong	arg02, objptr
0b310     7A 00 00 FF 
0b314     C4 E4 85 F1 | 	sub	objptr, ##62660
0b318     00 12 06 F6 | 	mov	arg01, #0
0b31c     00 16 06 F6 | 	mov	arg03, #0
0b320     0A 18 06 F6 | 	mov	arg04, #10
0b324     68 DF B0 FD | 	call	#__system___basic_print_integer
0b328     3E 01 00 FF 
0b32c     BC 15 06 F6 | 	mov	arg02, ##@LR__4581
0b330     00 12 06 F6 | 	mov	arg01, #0
0b334     00 16 06 F6 | 	mov	arg03, #0
0b338     10 DF B0 FD | 	call	#__system___basic_print_string
0b33c     00 1E 06 F6 | 	mov	local01, #0
0b340     7A 00 00 FF 
0b344     C4 E4 05 F1 | 	add	objptr, ##62660
0b348     F2 12 02 FB | 	rdlong	arg01, objptr
0b34c     7A 00 00 FF 
0b350     C4 E4 85 F1 | 	sub	objptr, ##62660
0b354     FC F6 B0 FD | 	call	#__system___strerror
0b358     FD 14 02 F6 | 	mov	arg02, result1
0b35c     0F 13 02 F6 | 	mov	arg01, local01
0b360     00 16 06 F6 | 	mov	arg03, #0
0b364     E4 DE B0 FD | 	call	#__system___basic_print_string
0b368     00 12 06 F6 | 	mov	arg01, #0
0b36c     0A 14 06 F6 | 	mov	arg02, #10
0b370     00 16 06 F6 | 	mov	arg03, #0
0b374     7C DE B0 FD | 	call	#__system___basic_print_char
0b378     00 12 06 F6 | 	mov	arg01, #0
0b37c     D8 29 B1 FD | 	call	#__system___getiolock_0416
0b380     FD 00 68 FC | 	wrlong	#0, result1
0b384     09 12 06 F6 | 	mov	arg01, #9
0b388     FC 1F B1 FD | 	call	#__system__close
0b38c     30 07 90 FD | 	jmp	#LR__0934
0b390                 | LR__0914
0b390                 | '     get #9,17,samplebuf(channel,0),1024
0b390     10 4E 05 F1 | 	add	fp, #16
0b394     A7 16 02 FB | 	rdlong	arg03, fp
0b398     10 4E 85 F1 | 	sub	fp, #16
0b39c     0B 16 66 F0 | 	shl	arg03, #11
0b3a0     0B 00 00 FF 
0b3a4     CC E5 05 F1 | 	add	objptr, ##6092
0b3a8     F2 16 02 F1 | 	add	arg03, objptr
0b3ac     09 12 06 F6 | 	mov	arg01, #9
0b3b0     11 14 06 F6 | 	mov	arg02, #17
0b3b4     0A 18 C6 F9 | 	decod	arg04, #10
0b3b8     02 1A 06 F6 | 	mov	arg05, #2
0b3bc     0B 00 00 FF 
0b3c0     CC E5 85 F1 | 	sub	objptr, ##6092
0b3c4     94 DF B0 FD | 	call	#__system___basic_get
0b3c8                 | '     close #9
0b3c8     09 12 06 F6 | 	mov	arg01, #9
0b3cc     B8 1F B1 FD | 	call	#__system__close
0b3d0                 | '                                                                       '  for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0b3d0                 | '     return
0b3d0     EC 06 90 FD | 	jmp	#LR__0934
0b3d4                 | LR__0915
0b3d4     28 4E 05 F1 | 	add	fp, #40
0b3d8     A7 12 02 F6 | 	mov	arg01, fp
0b3dc     28 4E 85 F1 | 	sub	fp, #40
0b3e0     70 52 B0 FD | 	call	#_converttoint
0b3e4     FD 1E 02 F6 | 	mov	local01, result1
0b3e8     0C 4E 05 F1 | 	add	fp, #12
0b3ec     A7 1E 62 FC | 	wrlong	local01, fp
0b3f0     0C 4E 85 F1 | 	sub	fp, #12
0b3f4                 | '   
0b3f4                 | '   par=converttoint(t1)  : print par
0b3f4     00 12 06 F6 | 	mov	arg01, #0
0b3f8     5C 29 B1 FD | 	call	#__system___getiolock_0416
0b3fc     FD 12 02 F6 | 	mov	arg01, result1
0b400     58 D1 B0 FD | 	call	#__system___lockmem
0b404     0C 4E 05 F1 | 	add	fp, #12
0b408     A7 14 02 FB | 	rdlong	arg02, fp
0b40c     0C 4E 85 F1 | 	sub	fp, #12
0b410     00 12 06 F6 | 	mov	arg01, #0
0b414     00 16 06 F6 | 	mov	arg03, #0
0b418     0A 18 06 F6 | 	mov	arg04, #10
0b41c     70 DE B0 FD | 	call	#__system___basic_print_integer
0b420     00 12 06 F6 | 	mov	arg01, #0
0b424     0A 14 06 F6 | 	mov	arg02, #10
0b428     00 16 06 F6 | 	mov	arg03, #0
0b42c     C4 DD B0 FD | 	call	#__system___basic_print_char
0b430     00 12 06 F6 | 	mov	arg01, #0
0b434     20 29 B1 FD | 	call	#__system___getiolock_0416
0b438     FD 00 68 FC | 	wrlong	#0, result1
0b43c     84 DD BF FD | 	call	#_pop
0b440     FF 1E 02 F6 | 	mov	local01, result3
0b444     28 4E 05 F1 | 	add	fp, #40
0b448     A7 FA 61 FC | 	wrlong	result1, fp
0b44c     04 4E 05 F1 | 	add	fp, #4
0b450     A7 FC 61 FC | 	wrlong	result2, fp
0b454     04 4E 05 F1 | 	add	fp, #4
0b458     A7 1E 62 FC | 	wrlong	local01, fp
0b45c     08 4E 85 F1 | 	sub	fp, #8
0b460     A7 12 02 F6 | 	mov	arg01, fp
0b464     28 4E 85 F1 | 	sub	fp, #40
0b468     E8 51 B0 FD | 	call	#_converttoint
0b46c     10 4E 05 F1 | 	add	fp, #16
0b470     A7 FA 61 FC | 	wrlong	result1, fp
0b474                 | '   t1=pop()
0b474                 | '   channel=converttoint(t1)  
0b474                 | '   if par=0 then for i=0 to 1023: samplebuf(channel,i)=round(32600*sin(1.0/512*3.14159265359*i)) : next i
0b474     04 4E 85 F1 | 	sub	fp, #4
0b478     A7 1E 0A FB | 	rdlong	local01, fp wz
0b47c     0C 4E 85 F1 | 	sub	fp, #12
0b480     3C 06 90 5D |  if_ne	jmp	#LR__0934
0b484     04 4E 05 F1 | 	add	fp, #4
0b488     A7 00 68 FC | 	wrlong	#0, fp
0b48c     04 4E 85 F1 | 	sub	fp, #4
0b490                 | LR__0916
0b490     10 4E 05 F1 | 	add	fp, #16
0b494     A7 1E 02 FB | 	rdlong	local01, fp
0b498     0B 1E 66 F0 | 	shl	local01, #11
0b49c     0B 00 00 FF 
0b4a0     CC E5 05 F1 | 	add	objptr, ##6092
0b4a4     F2 1E 02 F1 | 	add	local01, objptr
0b4a8     0C 4E 85 F1 | 	sub	fp, #12
0b4ac     A7 12 02 FB | 	rdlong	arg01, fp
0b4b0     09 21 02 F6 | 	mov	local02, arg01
0b4b4     01 20 66 F0 | 	shl	local02, #1
0b4b8     0F 21 02 F1 | 	add	local02, local01
0b4bc     04 4E 85 F1 | 	sub	fp, #4
0b4c0     0B 00 00 FF 
0b4c4     CC E5 85 F1 | 	sub	objptr, ##6092
0b4c8     09 13 52 F6 | 	abs	arg01, arg01 wc
0b4cc     1F 22 C6 C9 |  if_b	decod	local03, #31
0b4d0     00 22 06 36 |  if_ae	mov	local03, #0
0b4d4     64 F6 B0 FD | 	call	#__system___float_fromuns
0b4d8     11 FB 61 F5 | 	xor	result1, local03
0b4dc     FD 14 02 F6 | 	mov	arg02, result1
0b4e0     87 E4 1D FF 
0b4e4     DB 13 06 F6 | 	mov	arg01, ##1003032539
0b4e8     54 FA B0 FD | 	call	#__system___float_mul
0b4ec     FD 12 02 F6 | 	mov	arg01, result1
0b4f0     88 03 B1 FD | 	call	#__system____builtin_sinf
0b4f4     FD 14 02 F6 | 	mov	arg02, result1
0b4f8     58 7F 23 FF 
0b4fc     00 12 06 F6 | 	mov	arg01, ##1191096320
0b500     3C FA B0 FD | 	call	#__system___float_mul
0b504     FD 12 02 F6 | 	mov	arg01, result1
0b508     01 14 06 F6 | 	mov	arg02, #1
0b50c     F8 FE B0 FD | 	call	#__system___float_tointeger
0b510     10 FB 51 FC | 	wrword	result1, local02
0b514     04 4E 05 F1 | 	add	fp, #4
0b518     A7 20 02 FB | 	rdlong	local02, fp
0b51c     01 20 06 F1 | 	add	local02, #1
0b520     A7 20 62 FC | 	wrlong	local02, fp
0b524     04 4E 85 F1 | 	sub	fp, #4
0b528     02 00 00 FF 
0b52c     00 20 56 F2 | 	cmps	local02, ##1024 wc
0b530     5C FF 9F CD |  if_b	jmp	#LR__0916
0b534                 | '                                                                            '  for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0b534                 | '   return
0b534     88 05 90 FD | 	jmp	#LR__0934
0b538                 | LR__0917
0b538                 | ' for i=0 to 15 : harm(i)=0: next i  
0b538     04 4E 05 F1 | 	add	fp, #4
0b53c     A7 00 68 FC | 	wrlong	#0, fp
0b540     97 16 48 FB | 	callpa	#(@LR__0919-@LR__0918)>>2,fcache_load_ptr_
0b544                 | LR__0918
0b544     A7 1E 02 FB | 	rdlong	local01, fp
0b548     02 1E 66 F0 | 	shl	local01, #2
0b54c     34 4E 05 F1 | 	add	fp, #52
0b550     A7 1E 02 F1 | 	add	local01, fp
0b554     0F 01 68 FC | 	wrlong	#0, local01
0b558     34 4E 85 F1 | 	sub	fp, #52
0b55c     A7 1E 02 FB | 	rdlong	local01, fp
0b560     01 1E 06 F1 | 	add	local01, #1
0b564     A7 1E 62 FC | 	wrlong	local01, fp
0b568     10 1E 56 F2 | 	cmps	local01, #16 wc
0b56c     D4 FF 9F CD |  if_b	jmp	#LR__0918
0b570                 | LR__0919
0b570     04 4E 85 F1 | 	sub	fp, #4
0b574                 | ' for i=numpar to 2 step -1 
0b574     A7 1E 02 FB | 	rdlong	local01, fp
0b578     04 4E 05 F1 | 	add	fp, #4
0b57c     A7 1E 62 FC | 	wrlong	local01, fp
0b580     04 4E 85 F1 | 	sub	fp, #4
0b584                 | LR__0920
0b584     3C DC BF FD | 	call	#_pop
0b588     28 4E 05 F1 | 	add	fp, #40
0b58c     A7 FA 61 FC | 	wrlong	result1, fp
0b590     04 4E 05 F1 | 	add	fp, #4
0b594     A7 FC 61 FC | 	wrlong	result2, fp
0b598     04 4E 05 F1 | 	add	fp, #4
0b59c     A7 FE 61 FC | 	wrlong	result3, fp
0b5a0     2C 4E 85 F1 | 	sub	fp, #44
0b5a4     A7 1E 02 FB | 	rdlong	local01, fp
0b5a8     02 1E 86 F1 | 	sub	local01, #2
0b5ac     02 1E 66 F0 | 	shl	local01, #2
0b5b0     34 4E 05 F1 | 	add	fp, #52
0b5b4     A7 1E 02 F1 | 	add	local01, fp
0b5b8     10 4E 85 F1 | 	sub	fp, #16
0b5bc     A7 12 02 F6 | 	mov	arg01, fp
0b5c0     28 4E 85 F1 | 	sub	fp, #40
0b5c4     38 51 B0 FD | 	call	#_converttofloat
0b5c8     0F FB 61 FC | 	wrlong	result1, local01
0b5cc     04 4E 05 F1 | 	add	fp, #4
0b5d0     A7 1E 02 FB | 	rdlong	local01, fp
0b5d4     01 1E 86 F1 | 	sub	local01, #1
0b5d8     A7 1E 62 FC | 	wrlong	local01, fp
0b5dc     04 4E 85 F1 | 	sub	fp, #4
0b5e0     02 1E 56 F2 | 	cmps	local01, #2 wc
0b5e4     9C FF 9F 3D |  if_ae	jmp	#LR__0920
0b5e8     D8 DB BF FD | 	call	#_pop
0b5ec     FF 1E 02 F6 | 	mov	local01, result3
0b5f0     28 4E 05 F1 | 	add	fp, #40
0b5f4     A7 FA 61 FC | 	wrlong	result1, fp
0b5f8     04 4E 05 F1 | 	add	fp, #4
0b5fc     A7 FC 61 FC | 	wrlong	result2, fp
0b600     04 4E 05 F1 | 	add	fp, #4
0b604     A7 1E 62 FC | 	wrlong	local01, fp
0b608     08 4E 85 F1 | 	sub	fp, #8
0b60c     A7 12 02 F6 | 	mov	arg01, fp
0b610     28 4E 85 F1 | 	sub	fp, #40
0b614     3C 50 B0 FD | 	call	#_converttoint
0b618     FD 1E 02 F6 | 	mov	local01, result1
0b61c     10 4E 05 F1 | 	add	fp, #16
0b620     A7 1E 62 FC | 	wrlong	local01, fp
0b624     10 4E 85 F1 | 	sub	fp, #16
0b628                 | ' t1=pop()
0b628                 | ' channel=converttoint(t1) : print channel
0b628     00 12 06 F6 | 	mov	arg01, #0
0b62c     28 27 B1 FD | 	call	#__system___getiolock_0416
0b630     FD 12 02 F6 | 	mov	arg01, result1
0b634     24 CF B0 FD | 	call	#__system___lockmem
0b638     10 4E 05 F1 | 	add	fp, #16
0b63c     A7 14 02 FB | 	rdlong	arg02, fp
0b640     10 4E 85 F1 | 	sub	fp, #16
0b644     00 12 06 F6 | 	mov	arg01, #0
0b648     00 16 06 F6 | 	mov	arg03, #0
0b64c     0A 18 06 F6 | 	mov	arg04, #10
0b650     3C DC B0 FD | 	call	#__system___basic_print_integer
0b654     00 12 06 F6 | 	mov	arg01, #0
0b658     0A 14 06 F6 | 	mov	arg02, #10
0b65c     00 16 06 F6 | 	mov	arg03, #0
0b660     90 DB B0 FD | 	call	#__system___basic_print_char
0b664     00 12 06 F6 | 	mov	arg01, #0
0b668     EC 26 B1 FD | 	call	#__system___getiolock_0416
0b66c     FD 00 68 FC | 	wrlong	#0, result1
0b670                 | ' for j=0 to 1023: samplebuf(channel, i) =0 : next j
0b670     08 4E 05 F1 | 	add	fp, #8
0b674     02 00 80 FF 
0b678     A7 00 68 FC | 	wrlong	##1024, fp
0b67c     08 4E 85 F1 | 	sub	fp, #8
0b680     0B 00 00 FF 
0b684     CC E5 05 F1 | 	add	objptr, ##6092
0b688     97 18 48 FB | 	callpa	#(@LR__0923-@LR__0921)>>2,fcache_load_ptr_
0b68c                 | LR__0921
0b68c     02 00 00 FF 
0b690     00 14 DC FC | 	rep	@LR__0924, ##1024
0b694                 | LR__0922
0b694     10 4E 05 F1 | 	add	fp, #16
0b698     A7 20 02 FB | 	rdlong	local02, fp
0b69c     0B 20 66 F0 | 	shl	local02, #11
0b6a0     F2 20 02 F1 | 	add	local02, objptr
0b6a4     0C 4E 85 F1 | 	sub	fp, #12
0b6a8     A7 1E 02 FB | 	rdlong	local01, fp
0b6ac     04 4E 85 F1 | 	sub	fp, #4
0b6b0     01 1E 66 F0 | 	shl	local01, #1
0b6b4     10 1F 02 F1 | 	add	local01, local02
0b6b8     0F 01 58 FC | 	wrword	#0, local01
0b6bc                 | LR__0923
0b6bc                 | LR__0924
0b6bc     0B 00 00 FF 
0b6c0     CC E5 85 F1 | 	sub	objptr, ##6092
0b6c4     1C 4E 05 F1 | 	add	fp, #28
0b6c8     A7 00 68 FC | 	wrlong	#0, fp
0b6cc                 | ' max=0
0b6cc                 | ' if harm(0)<0 then
0b6cc     1C 4E 05 F1 | 	add	fp, #28
0b6d0     A7 12 02 FB | 	rdlong	arg01, fp
0b6d4     38 4E 85 F1 | 	sub	fp, #56
0b6d8     00 14 06 F6 | 	mov	arg02, #0
0b6dc     01 16 06 F6 | 	mov	arg03, #1
0b6e0     90 FC B0 FD | 	call	#__system___float_cmp
0b6e4     00 FA 55 F2 | 	cmps	result1, #0 wc
0b6e8     04 01 90 3D |  if_ae	jmp	#LR__0927
0b6ec     38 4E 05 F1 | 	add	fp, #56
0b6f0     A7 FA 01 FB | 	rdlong	result1, fp
0b6f4     1F FA 05 F4 | 	bitl	result1, #31
0b6f8     24 4E 85 F1 | 	sub	fp, #36
0b6fc     A7 FA 61 FC | 	wrlong	result1, fp
0b700     28 4E 05 F1 | 	add	fp, #40
0b704     A7 FA 01 FB | 	rdlong	result1, fp
0b708     1F FA 05 F4 | 	bitl	result1, #31
0b70c     24 4E 85 F1 | 	sub	fp, #36
0b710     A7 FA 61 FC | 	wrlong	result1, fp
0b714     20 4E 05 F1 | 	add	fp, #32
0b718     00 C0 9F FF 
0b71c     A7 00 68 FC | 	wrlong	##1065353216, fp
0b720     24 4E 85 F1 | 	sub	fp, #36
0b724     A7 1E 02 FB | 	rdlong	local01, fp
0b728     28 4E 05 F1 | 	add	fp, #40
0b72c     A7 1E 62 FC | 	wrlong	local01, fp
0b730     24 4E 85 F1 | 	sub	fp, #36
0b734     A7 1E 02 FB | 	rdlong	local01, fp
0b738     28 4E 05 F1 | 	add	fp, #40
0b73c     A7 1E 62 FC | 	wrlong	local01, fp
0b740                 | '   harm(0)=1
0b740                 | '   harm(1)=even
0b740                 | '   harm(2)=odd
0b740                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0b740     3C 4E 85 F1 | 	sub	fp, #60
0b744     A7 06 68 FC | 	wrlong	#3, fp
0b748                 | LR__0925
0b748     A7 1A 02 FB | 	rdlong	arg05, fp
0b74c     0D 25 02 F6 | 	mov	local04, arg05
0b750     02 24 66 F0 | 	shl	local04, #2
0b754     34 4E 05 F1 | 	add	fp, #52
0b758     A7 24 02 F1 | 	add	local04, fp
0b75c     02 1A 86 F1 | 	sub	arg05, #2
0b760     02 1A 66 F0 | 	shl	arg05, #2
0b764     A7 1A 02 F1 | 	add	arg05, fp
0b768     0D 13 02 FB | 	rdlong	arg01, arg05
0b76c     24 4E 85 F1 | 	sub	fp, #36
0b770     A7 14 02 FB | 	rdlong	arg02, fp
0b774     14 4E 85 F1 | 	sub	fp, #20
0b778     C4 F7 B0 FD | 	call	#__system___float_mul
0b77c     12 FB 61 FC | 	wrlong	result1, local04
0b780     04 4E 05 F1 | 	add	fp, #4
0b784     A7 26 02 FB | 	rdlong	local05, fp
0b788     02 26 06 F1 | 	add	local05, #2
0b78c     A7 26 62 FC | 	wrlong	local05, fp
0b790     10 26 56 F2 | 	cmps	local05, #16 wc
0b794     B0 FF 9F CD |  if_b	jmp	#LR__0925
0b798                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0b798     A7 08 68 FC | 	wrlong	#4, fp
0b79c                 | LR__0926
0b79c     A7 26 02 FB | 	rdlong	local05, fp
0b7a0     13 25 02 F6 | 	mov	local04, local05
0b7a4     02 24 66 F0 | 	shl	local04, #2
0b7a8     34 4E 05 F1 | 	add	fp, #52
0b7ac     A7 24 02 F1 | 	add	local04, fp
0b7b0     02 26 86 F1 | 	sub	local05, #2
0b7b4     02 26 66 F0 | 	shl	local05, #2
0b7b8     A7 26 02 F1 | 	add	local05, fp
0b7bc     13 13 02 FB | 	rdlong	arg01, local05
0b7c0     20 4E 85 F1 | 	sub	fp, #32
0b7c4     A7 14 02 FB | 	rdlong	arg02, fp
0b7c8     18 4E 85 F1 | 	sub	fp, #24
0b7cc     70 F7 B0 FD | 	call	#__system___float_mul
0b7d0     12 FB 61 FC | 	wrlong	result1, local04
0b7d4     04 4E 05 F1 | 	add	fp, #4
0b7d8     A7 26 02 FB | 	rdlong	local05, fp
0b7dc     02 26 06 F1 | 	add	local05, #2
0b7e0     A7 26 62 FC | 	wrlong	local05, fp
0b7e4     0F 26 56 F2 | 	cmps	local05, #15 wc
0b7e8     B0 FF 9F CD |  if_b	jmp	#LR__0926
0b7ec     04 4E 85 F1 | 	sub	fp, #4
0b7f0                 | LR__0927
0b7f0                 | ' if harm(0)>=0 then ' synthesize with harmonics
0b7f0     38 4E 05 F1 | 	add	fp, #56
0b7f4     A7 12 02 FB | 	rdlong	arg01, fp
0b7f8     38 4E 85 F1 | 	sub	fp, #56
0b7fc     00 14 06 F6 | 	mov	arg02, #0
0b800     01 16 66 F6 | 	neg	arg03, #1
0b804     6C FB B0 FD | 	call	#__system___float_cmp
0b808     00 FA 55 F2 | 	cmps	result1, #0 wc
0b80c     B0 02 90 CD |  if_b	jmp	#LR__0933
0b810                 | '   for i=0 to 1023
0b810     04 4E 05 F1 | 	add	fp, #4
0b814     A7 00 68 FC | 	wrlong	#0, fp
0b818     04 4E 85 F1 | 	sub	fp, #4
0b81c                 | LR__0928
0b81c     20 4E 05 F1 | 	add	fp, #32
0b820     A7 00 68 FC | 	wrlong	#0, fp
0b824                 | '     spl=0
0b824                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
0b824     18 4E 85 F1 | 	sub	fp, #24
0b828     A7 00 68 FC | 	wrlong	#0, fp
0b82c                 | LR__0929
0b82c     A7 24 02 FB | 	rdlong	local04, fp
0b830     02 24 66 F0 | 	shl	local04, #2
0b834     30 4E 05 F1 | 	add	fp, #48
0b838     A7 24 02 F1 | 	add	local04, fp
0b83c     12 27 02 FB | 	rdlong	local05, local04
0b840     87 E4 1D FF 
0b844     DB 25 06 F6 | 	mov	local04, ##1003032539
0b848     34 4E 85 F1 | 	sub	fp, #52
0b84c     A7 12 02 FB | 	rdlong	arg01, fp
0b850     04 4E 85 F1 | 	sub	fp, #4
0b854     09 13 52 F6 | 	abs	arg01, arg01 wc
0b858     1F 22 C6 C9 |  if_b	decod	local03, #31
0b85c     00 22 06 36 |  if_ae	mov	local03, #0
0b860     D8 F2 B0 FD | 	call	#__system___float_fromuns
0b864     11 FB 61 F5 | 	xor	result1, local03
0b868     FD 14 02 F6 | 	mov	arg02, result1
0b86c     12 13 02 F6 | 	mov	arg01, local04
0b870     CC F6 B0 FD | 	call	#__system___float_mul
0b874     FD 24 02 F6 | 	mov	local04, result1
0b878     08 4E 05 F1 | 	add	fp, #8
0b87c     A7 12 02 FB | 	rdlong	arg01, fp
0b880     08 4E 85 F1 | 	sub	fp, #8
0b884     01 12 06 F1 | 	add	arg01, #1
0b888     09 13 52 F6 | 	abs	arg01, arg01 wc
0b88c     1F 22 C6 C9 |  if_b	decod	local03, #31
0b890     00 22 06 36 |  if_ae	mov	local03, #0
0b894     A4 F2 B0 FD | 	call	#__system___float_fromuns
0b898     11 FB 61 F5 | 	xor	result1, local03
0b89c     FD 14 02 F6 | 	mov	arg02, result1
0b8a0     12 13 02 F6 | 	mov	arg01, local04
0b8a4     98 F6 B0 FD | 	call	#__system___float_mul
0b8a8     FD 12 02 F6 | 	mov	arg01, result1
0b8ac     CC FF B0 FD | 	call	#__system____builtin_sinf
0b8b0     FD 14 02 F6 | 	mov	arg02, result1
0b8b4     13 13 02 F6 | 	mov	arg01, local05
0b8b8     84 F6 B0 FD | 	call	#__system___float_mul
0b8bc     FD 14 02 F6 | 	mov	arg02, result1
0b8c0     20 4E 05 F1 | 	add	fp, #32
0b8c4     A7 12 02 FB | 	rdlong	arg01, fp
0b8c8     20 4E 85 F1 | 	sub	fp, #32
0b8cc     A0 F2 B0 FD | 	call	#__system___float_add
0b8d0     20 4E 05 F1 | 	add	fp, #32
0b8d4     A7 FA 61 FC | 	wrlong	result1, fp
0b8d8     18 4E 85 F1 | 	sub	fp, #24
0b8dc     A7 16 02 FB | 	rdlong	arg03, fp
0b8e0     01 16 06 F1 | 	add	arg03, #1
0b8e4     A7 16 62 FC | 	wrlong	arg03, fp
0b8e8     10 16 56 F2 | 	cmps	arg03, #16 wc
0b8ec     3C FF 9F CD |  if_b	jmp	#LR__0929
0b8f0                 | '     if abs(spl)>max then max=abs(spl)  ': print max 
0b8f0     18 4E 05 F1 | 	add	fp, #24
0b8f4     A7 12 02 FB | 	rdlong	arg01, fp
0b8f8     1F 12 06 F4 | 	bitl	arg01, #31
0b8fc     04 4E 85 F1 | 	sub	fp, #4
0b900     A7 14 02 FB | 	rdlong	arg02, fp
0b904     1C 4E 85 F1 | 	sub	fp, #28
0b908     01 16 66 F6 | 	neg	arg03, #1
0b90c     64 FA B0 FD | 	call	#__system___float_cmp
0b910     01 FA 55 F2 | 	cmps	result1, #1 wc
0b914     18 00 90 CD |  if_b	jmp	#LR__0930
0b918     20 4E 05 F1 | 	add	fp, #32
0b91c     A7 FA 01 FB | 	rdlong	result1, fp
0b920     1F FA 05 F4 | 	bitl	result1, #31
0b924     04 4E 85 F1 | 	sub	fp, #4
0b928     A7 FA 61 FC | 	wrlong	result1, fp
0b92c     1C 4E 85 F1 | 	sub	fp, #28
0b930                 | LR__0930
0b930     04 4E 05 F1 | 	add	fp, #4
0b934     A7 26 02 FB | 	rdlong	local05, fp
0b938     01 26 06 F1 | 	add	local05, #1
0b93c     A7 26 62 FC | 	wrlong	local05, fp
0b940     04 4E 85 F1 | 	sub	fp, #4
0b944     02 00 00 FF 
0b948     00 26 56 F2 | 	cmps	local05, ##1024 wc
0b94c     CC FE 9F CD |  if_b	jmp	#LR__0928
0b950                 | '   for i=0 to 1023
0b950     04 4E 05 F1 | 	add	fp, #4
0b954     A7 00 68 FC | 	wrlong	#0, fp
0b958     04 4E 85 F1 | 	sub	fp, #4
0b95c                 | LR__0931
0b95c     20 4E 05 F1 | 	add	fp, #32
0b960     A7 00 68 FC | 	wrlong	#0, fp
0b964                 | '     spl=0
0b964                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j ':' print spl
0b964     18 4E 85 F1 | 	sub	fp, #24
0b968     A7 00 68 FC | 	wrlong	#0, fp
0b96c                 | LR__0932
0b96c     A7 26 02 FB | 	rdlong	local05, fp
0b970     02 26 66 F0 | 	shl	local05, #2
0b974     30 4E 05 F1 | 	add	fp, #48
0b978     A7 26 02 F1 | 	add	local05, fp
0b97c     13 27 02 FB | 	rdlong	local05, local05
0b980     1C 4E 85 F1 | 	sub	fp, #28
0b984     A7 14 02 FB | 	rdlong	arg02, fp
0b988     1C 4E 85 F1 | 	sub	fp, #28
0b98c     58 7F 23 FF 
0b990     00 12 06 F6 | 	mov	arg01, ##1191096320
0b994     AC F7 B0 FD | 	call	#__system___float_div
0b998     FD 14 02 F6 | 	mov	arg02, result1
0b99c     13 13 02 F6 | 	mov	arg01, local05
0b9a0     9C F5 B0 FD | 	call	#__system___float_mul
0b9a4     FD 26 02 F6 | 	mov	local05, result1
0b9a8     87 E4 1D FF 
0b9ac     DB 25 06 F6 | 	mov	local04, ##1003032539
0b9b0     04 4E 05 F1 | 	add	fp, #4
0b9b4     A7 12 02 FB | 	rdlong	arg01, fp
0b9b8     04 4E 85 F1 | 	sub	fp, #4
0b9bc     09 13 52 F6 | 	abs	arg01, arg01 wc
0b9c0     1F 22 C6 C9 |  if_b	decod	local03, #31
0b9c4     00 22 06 36 |  if_ae	mov	local03, #0
0b9c8     70 F1 B0 FD | 	call	#__system___float_fromuns
0b9cc     11 FB 61 F5 | 	xor	result1, local03
0b9d0     FD 14 02 F6 | 	mov	arg02, result1
0b9d4     12 13 02 F6 | 	mov	arg01, local04
0b9d8     64 F5 B0 FD | 	call	#__system___float_mul
0b9dc     FD 24 02 F6 | 	mov	local04, result1
0b9e0     08 4E 05 F1 | 	add	fp, #8
0b9e4     A7 12 02 FB | 	rdlong	arg01, fp
0b9e8     08 4E 85 F1 | 	sub	fp, #8
0b9ec     01 12 06 F1 | 	add	arg01, #1
0b9f0     09 13 52 F6 | 	abs	arg01, arg01 wc
0b9f4     1F 22 C6 C9 |  if_b	decod	local03, #31
0b9f8     00 22 06 36 |  if_ae	mov	local03, #0
0b9fc     3C F1 B0 FD | 	call	#__system___float_fromuns
0ba00     11 FB 61 F5 | 	xor	result1, local03
0ba04     FD 14 02 F6 | 	mov	arg02, result1
0ba08     12 13 02 F6 | 	mov	arg01, local04
0ba0c     30 F5 B0 FD | 	call	#__system___float_mul
0ba10     FD 12 02 F6 | 	mov	arg01, result1
0ba14     64 FE B0 FD | 	call	#__system____builtin_sinf
0ba18     FD 14 02 F6 | 	mov	arg02, result1
0ba1c     13 13 02 F6 | 	mov	arg01, local05
0ba20     1C F5 B0 FD | 	call	#__system___float_mul
0ba24     FD 14 02 F6 | 	mov	arg02, result1
0ba28     20 4E 05 F1 | 	add	fp, #32
0ba2c     A7 12 02 FB | 	rdlong	arg01, fp
0ba30     20 4E 85 F1 | 	sub	fp, #32
0ba34     38 F1 B0 FD | 	call	#__system___float_add
0ba38     20 4E 05 F1 | 	add	fp, #32
0ba3c     A7 FA 61 FC | 	wrlong	result1, fp
0ba40     18 4E 85 F1 | 	sub	fp, #24
0ba44     A7 26 02 FB | 	rdlong	local05, fp
0ba48     01 26 06 F1 | 	add	local05, #1
0ba4c     A7 26 62 FC | 	wrlong	local05, fp
0ba50     10 26 56 F2 | 	cmps	local05, #16 wc
0ba54     14 FF 9F CD |  if_b	jmp	#LR__0932
0ba58     08 4E 05 F1 | 	add	fp, #8
0ba5c     A7 26 02 FB | 	rdlong	local05, fp
0ba60     0B 26 66 F0 | 	shl	local05, #11
0ba64     0B 00 00 FF 
0ba68     CC E5 05 F1 | 	add	objptr, ##6092
0ba6c     F2 26 02 F1 | 	add	local05, objptr
0ba70     0C 4E 85 F1 | 	sub	fp, #12
0ba74     A7 20 02 FB | 	rdlong	local02, fp
0ba78     01 20 66 F0 | 	shl	local02, #1
0ba7c     13 21 02 F1 | 	add	local02, local05
0ba80     1C 4E 05 F1 | 	add	fp, #28
0ba84     A7 12 02 FB | 	rdlong	arg01, fp
0ba88     20 4E 85 F1 | 	sub	fp, #32
0ba8c     0B 00 00 FF 
0ba90     CC E5 85 F1 | 	sub	objptr, ##6092
0ba94     01 14 06 F6 | 	mov	arg02, #1
0ba98     6C F9 B0 FD | 	call	#__system___float_tointeger
0ba9c     10 FB 51 FC | 	wrword	result1, local02
0baa0     04 4E 05 F1 | 	add	fp, #4
0baa4     A7 26 02 FB | 	rdlong	local05, fp
0baa8     01 26 06 F1 | 	add	local05, #1
0baac     A7 26 62 FC | 	wrlong	local05, fp
0bab0     04 4E 85 F1 | 	sub	fp, #4
0bab4     02 00 00 FF 
0bab8     00 26 56 F2 | 	cmps	local05, ##1024 wc
0babc     9C FE 9F CD |  if_b	jmp	#LR__0931
0bac0                 | LR__0933
0bac0                 | LR__0934
0bac0     A7 F0 03 F6 | 	mov	ptra, fp
0bac4     B2 00 A0 FD | 	call	#popregs_
0bac8                 | _do_defsnd_ret
0bac8     2D 00 64 FD | 	ret
0bacc                 | 
0bacc                 | ' 
0bacc                 | ' ' ---------------  List the program. 
0bacc                 | ' 
0bacc                 | ' sub do_list
0bacc                 | _do_list
0bacc     02 4A 05 F6 | 	mov	COUNT_, #2
0bad0     A8 00 A0 FD | 	call	#pushregs_
0bad4     B8 F0 07 F1 | 	add	ptra, #184
0bad8     04 4E 05 F1 | 	add	fp, #4
0badc     A7 00 68 FC | 	wrlong	#0, fp
0bae0     04 4E 05 F1 | 	add	fp, #4
0bae4     FF FF BF FF 
0bae8     A7 FE 6B FC | 	wrlong	##2147483647, fp
0baec     08 4E 85 F1 | 	sub	fp, #8
0baf0     69 00 00 FF 
0baf4     54 E4 05 F1 | 	add	objptr, ##53844
0baf8     F2 1E 02 FB | 	rdlong	local01, objptr
0bafc     0F 17 02 F6 | 	mov	arg03, local01
0bb00     01 16 66 F0 | 	shl	arg03, #1
0bb04     0F 17 02 F1 | 	add	arg03, local01
0bb08     02 16 66 F0 | 	shl	arg03, #2
0bb0c     03 00 00 FF 
0bb10     04 E4 85 F1 | 	sub	objptr, ##1540
0bb14     F2 16 02 F1 | 	add	arg03, objptr
0bb18     0B 17 02 FB | 	rdlong	arg03, arg03
0bb1c     A7 16 62 FC | 	wrlong	arg03, fp
0bb20                 | ' 
0bb20                 | ' startline=0 : endline=$7FFFFFFF
0bb20                 | ' numpar=compiledline(lineptr_e).result.uresult
0bb20                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
0bb20     01 16 0E F2 | 	cmp	arg03, #1 wz
0bb24     66 00 00 FF 
0bb28     50 E4 85 F1 | 	sub	objptr, ##52304
0bb2c     3C 00 90 5D |  if_ne	jmp	#LR__0940
0bb30     90 D6 BF FD | 	call	#_pop
0bb34     FF 1E 02 F6 | 	mov	local01, result3
0bb38     0C 4E 05 F1 | 	add	fp, #12
0bb3c     A7 FA 61 FC | 	wrlong	result1, fp
0bb40     04 4E 05 F1 | 	add	fp, #4
0bb44     A7 FC 61 FC | 	wrlong	result2, fp
0bb48     04 4E 05 F1 | 	add	fp, #4
0bb4c     A7 1E 62 FC | 	wrlong	local01, fp
0bb50     08 4E 85 F1 | 	sub	fp, #8
0bb54     A7 12 02 F6 | 	mov	arg01, fp
0bb58     0C 4E 85 F1 | 	sub	fp, #12
0bb5c     F4 4A B0 FD | 	call	#_converttoint
0bb60     04 4E 05 F1 | 	add	fp, #4
0bb64     A7 FA 61 FC | 	wrlong	result1, fp
0bb68     04 4E 85 F1 | 	sub	fp, #4
0bb6c                 | LR__0940
0bb6c                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
0bb6c     A7 16 02 FB | 	rdlong	arg03, fp
0bb70     02 16 0E F2 | 	cmp	arg03, #2 wz
0bb74     7C 00 90 5D |  if_ne	jmp	#LR__0941
0bb78     48 D6 BF FD | 	call	#_pop
0bb7c     FF 1E 02 F6 | 	mov	local01, result3
0bb80     0C 4E 05 F1 | 	add	fp, #12
0bb84     A7 FA 61 FC | 	wrlong	result1, fp
0bb88     04 4E 05 F1 | 	add	fp, #4
0bb8c     A7 FC 61 FC | 	wrlong	result2, fp
0bb90     04 4E 05 F1 | 	add	fp, #4
0bb94     A7 1E 62 FC | 	wrlong	local01, fp
0bb98     08 4E 85 F1 | 	sub	fp, #8
0bb9c     A7 12 02 F6 | 	mov	arg01, fp
0bba0     0C 4E 85 F1 | 	sub	fp, #12
0bba4     AC 4A B0 FD | 	call	#_converttoint
0bba8     FD 1E 02 F6 | 	mov	local01, result1
0bbac     08 4E 05 F1 | 	add	fp, #8
0bbb0     A7 1E 62 FC | 	wrlong	local01, fp
0bbb4     08 4E 85 F1 | 	sub	fp, #8
0bbb8     08 D6 BF FD | 	call	#_pop
0bbbc     FF 1E 02 F6 | 	mov	local01, result3
0bbc0     0C 4E 05 F1 | 	add	fp, #12
0bbc4     A7 FA 61 FC | 	wrlong	result1, fp
0bbc8     04 4E 05 F1 | 	add	fp, #4
0bbcc     A7 FC 61 FC | 	wrlong	result2, fp
0bbd0     04 4E 05 F1 | 	add	fp, #4
0bbd4     A7 1E 62 FC | 	wrlong	local01, fp
0bbd8     08 4E 85 F1 | 	sub	fp, #8
0bbdc     A7 12 02 F6 | 	mov	arg01, fp
0bbe0     0C 4E 85 F1 | 	sub	fp, #12
0bbe4     6C 4A B0 FD | 	call	#_converttoint
0bbe8     04 4E 05 F1 | 	add	fp, #4
0bbec     A7 FA 61 FC | 	wrlong	result1, fp
0bbf0     04 4E 85 F1 | 	sub	fp, #4
0bbf4                 | LR__0941
0bbf4                 | ' 
0bbf4                 | ' 
0bbf4                 | ' print
0bbf4     00 12 06 F6 | 	mov	arg01, #0
0bbf8     5C 21 B1 FD | 	call	#__system___getiolock_0416
0bbfc     FD 12 02 F6 | 	mov	arg01, result1
0bc00     58 C9 B0 FD | 	call	#__system___lockmem
0bc04     00 12 06 F6 | 	mov	arg01, #0
0bc08     0A 14 06 F6 | 	mov	arg02, #10
0bc0c     00 16 06 F6 | 	mov	arg03, #0
0bc10     E0 D5 B0 FD | 	call	#__system___basic_print_char
0bc14     00 12 06 F6 | 	mov	arg01, #0
0bc18     3C 21 B1 FD | 	call	#__system___getiolock_0416
0bc1c     FD 00 68 FC | 	wrlong	#0, result1
0bc20     69 00 00 FF 
0bc24     58 E4 05 F1 | 	add	objptr, ##53848
0bc28     F2 20 02 FB | 	rdlong	local02, objptr
0bc2c     11 00 00 FF 
0bc30     64 E4 05 F1 | 	add	objptr, ##8804
0bc34     F2 20 62 FC | 	wrlong	local02, objptr
0bc38     7A 00 00 FF 
0bc3c     BC E4 85 F1 | 	sub	objptr, ##62652
0bc40                 | ' do 
0bc40                 | LR__0942
0bc40     20 4E 05 F1 | 	add	fp, #32
0bc44     A7 12 02 F6 | 	mov	arg01, fp
0bc48     20 4E 85 F1 | 	sub	fp, #32
0bc4c     7A 00 00 FF 
0bc50     BC E4 05 F1 | 	add	objptr, ##62652
0bc54     F2 14 02 FB | 	rdlong	arg02, objptr
0bc58     18 16 06 F6 | 	mov	arg03, #24
0bc5c     6E 00 00 FF 
0bc60     FC E5 85 F1 | 	sub	objptr, ##56828
0bc64     04 BE B0 FD | 	call	#_psram_spin2_read1
0bc68     0B 00 00 FF 
0bc6c     C0 E4 85 F1 | 	sub	objptr, ##5824
0bc70                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart
0bc70                 | '   if header(0)<> $FFFFFFFF then
0bc70     20 4E 05 F1 | 	add	fp, #32
0bc74     A7 20 02 FB | 	rdlong	local02, fp
0bc78     20 4E 85 F1 | 	sub	fp, #32
0bc7c     FF FF 7F FF 
0bc80     FF 21 0E F2 | 	cmp	local02, ##-1 wz
0bc84     A8 00 90 AD |  if_e	jmp	#LR__0944
0bc88     38 4E 05 F1 | 	add	fp, #56
0bc8c     3F 16 06 F6 | 	mov	arg03, #63
0bc90     28 16 62 FD | 	setq	arg03
0bc94     A7 00 68 FC | 	wrlong	#0, fp
0bc98     A7 12 02 F6 | 	mov	arg01, fp
0bc9c     10 4E 85 F1 | 	sub	fp, #16
0bca0     A7 14 02 FB | 	rdlong	arg02, fp
0bca4     04 4E 05 F1 | 	add	fp, #4
0bca8     A7 16 02 FB | 	rdlong	arg03, fp
0bcac     2C 4E 85 F1 | 	sub	fp, #44
0bcb0     0B 00 00 FF 
0bcb4     C0 E4 05 F1 | 	add	objptr, ##5824
0bcb8     B0 BD B0 FD | 	call	#_psram_spin2_read1
0bcbc     0B 00 00 FF 
0bcc0     C0 E4 85 F1 | 	sub	objptr, ##5824
0bcc4                 | '     longfill(linebuf,0,64)
0bcc4                 | '     psram.read1(varptr(linebuf),header(2),header(3))
0bcc4                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
0bcc4     20 4E 05 F1 | 	add	fp, #32
0bcc8     A7 20 02 FB | 	rdlong	local02, fp
0bccc     1C 4E 85 F1 | 	sub	fp, #28
0bcd0     A7 1E 02 FB | 	rdlong	local01, fp
0bcd4     04 4E 85 F1 | 	sub	fp, #4
0bcd8     0F 21 52 F2 | 	cmps	local02, local01 wc
0bcdc     30 00 90 CD |  if_b	jmp	#LR__0943
0bce0     20 4E 05 F1 | 	add	fp, #32
0bce4     A7 20 02 FB | 	rdlong	local02, fp
0bce8     18 4E 85 F1 | 	sub	fp, #24
0bcec     A7 16 02 FB | 	rdlong	arg03, fp
0bcf0     08 4E 85 F1 | 	sub	fp, #8
0bcf4     0B 21 5A F2 | 	cmps	local02, arg03 wcz
0bcf8     14 00 90 1D |  if_a	jmp	#LR__0943
0bcfc     38 4E 05 F1 | 	add	fp, #56
0bd00     A7 12 02 F6 | 	mov	arg01, fp
0bd04     38 4E 85 F1 | 	sub	fp, #56
0bd08                 | ' 
0bd08                 | ' write(text)
0bd08     28 B8 B0 FD | 	call	#_hg010b_spin2_write
0bd0c                 | ' crlf
0bd0c     84 B9 B0 FD | 	call	#_hg010b_spin2_crlf
0bd10                 | LR__0943
0bd10     34 4E 05 F1 | 	add	fp, #52
0bd14     A7 20 02 FB | 	rdlong	local02, fp
0bd18     34 4E 85 F1 | 	sub	fp, #52
0bd1c     7A 00 00 FF 
0bd20     BC E4 05 F1 | 	add	objptr, ##62652
0bd24     F2 20 62 FC | 	wrlong	local02, objptr
0bd28     7A 00 00 FF 
0bd2c     BC E4 85 F1 | 	sub	objptr, ##62652
0bd30                 | LR__0944
0bd30     34 4E 05 F1 | 	add	fp, #52
0bd34     A7 20 02 FB | 	rdlong	local02, fp
0bd38     34 4E 85 F1 | 	sub	fp, #52
0bd3c     FF FF 3F FF 
0bd40     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0bd44     20 4E 05 51 |  if_ne	add	fp, #32
0bd48     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0bd4c     20 4E 85 51 |  if_ne	sub	fp, #32
0bd50     FF FF 7F 5F 
0bd54     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0bd58     E4 FE 9F 5D |  if_ne	jmp	#LR__0942
0bd5c     A7 F0 03 F6 | 	mov	ptra, fp
0bd60     B2 00 A0 FD | 	call	#popregs_
0bd64                 | _do_list_ret
0bd64     2D 00 64 FD | 	ret
0bd68                 | 
0bd68                 | ' 
0bd68                 | ' '---------------- Clear the program
0bd68                 | ' 
0bd68                 | ' sub do_new
0bd68                 | _do_new
0bd68     03 4A 05 F6 | 	mov	COUNT_, #3
0bd6c     A8 00 A0 FD | 	call	#pushregs_
0bd70     00 12 06 F6 | 	mov	arg01, #0
0bd74     01 14 66 F6 | 	neg	arg02, #1
0bd78     01 16 06 F6 | 	mov	arg03, #1
0bd7c     00 18 06 F6 | 	mov	arg04, #0
0bd80     0B 00 00 FF 
0bd84     C0 E4 05 F1 | 	add	objptr, ##5824
0bd88                 | '     return fill(addr, pattern, count, listPtr, 4)
0bd88     04 1A 06 F6 | 	mov	arg05, #4
0bd8c     14 BE B0 FD | 	call	#_psram_spin2_fill
0bd90     48 00 00 FF 
0bd94     1C E5 05 F1 | 	add	objptr, ##37148
0bd98     F2 00 68 FC | 	wrlong	#0, objptr
0bd9c     15 00 00 FF 
0bda0     7C E4 05 F1 | 	add	objptr, ##10876
0bda4     F2 00 68 FC | 	wrlong	#0, objptr
0bda8     0F 00 00 FF 
0bdac     2C E5 05 F1 | 	add	objptr, ##7980
0bdb0     F2 00 68 FC | 	wrlong	#0, objptr
0bdb4     04 E4 05 F1 | 	add	objptr, #4
0bdb8     F2 00 68 FC | 	wrlong	#0, objptr
0bdbc     16 00 00 FF 
0bdc0     5C E5 85 F1 | 	sub	objptr, ##11612
0bdc4     F2 00 68 FC | 	wrlong	#0, objptr
0bdc8     07 00 00 FF 
0bdcc     24 E4 05 F1 | 	add	objptr, ##3620
0bdd0     F2 00 68 FC | 	wrlong	#0, objptr
0bdd4     07 00 00 FF 
0bdd8     20 E4 85 F1 | 	sub	objptr, ##3616
0bddc     F2 00 68 FC | 	wrlong	#0, objptr
0bde0     0F 00 00 FF 
0bde4     34 E4 05 F1 | 	add	objptr, ##7732
0bde8     F2 00 68 FC | 	wrlong	#0, objptr
0bdec     08 00 00 FF 
0bdf0     08 E4 85 F1 | 	sub	objptr, ##4104
0bdf4     F2 00 68 FC | 	wrlong	#0, objptr
0bdf8     04 E4 05 F1 | 	add	objptr, #4
0bdfc     FF FF FF FF 
0be00     F2 FE 6B FC | 	wrlong	##-1, objptr
0be04     0F 00 00 FF 
0be08     4C E5 05 F1 | 	add	objptr, ##8012
0be0c     F2 00 68 FC | 	wrlong	#0, objptr
0be10                 | ' 
0be10                 | ' pslpoke(0,$FFFFFFFF)
0be10                 | ' varnum=0
0be10                 | ' programstart=0 :runptr=0 : runptr2=0
0be10                 | ' stackpointer=0
0be10                 | ' lineptr=0 
0be10                 | ' programptr=0 : stringptr=0
0be10                 | ' lastline=0 : lastlineptr=-1 :fortop=0
0be10                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
0be10     00 1E 06 F6 | 	mov	local01, #0
0be14     07 00 00 FF 
0be18     40 E5 85 F1 | 	sub	objptr, ##3904
0be1c     97 16 48 FB | 	callpa	#(@LR__0951-@LR__0950)>>2,fcache_load_ptr_
0be20                 | LR__0950
0be20     0F 21 02 F6 | 	mov	local02, local01
0be24     02 20 66 F0 | 	shl	local02, #2
0be28     0F 21 02 F1 | 	add	local02, local01
0be2c     02 20 66 F0 | 	shl	local02, #2
0be30     F2 20 02 F1 | 	add	local02, objptr
0be34     08 20 06 F1 | 	add	local02, #8
0be38     FF FF FF FF 
0be3c     10 FF 6B FC | 	wrlong	##-1, local02
0be40     01 1E 06 F1 | 	add	local01, #1
0be44     81 1E 56 F2 | 	cmps	local01, #129 wc
0be48     D4 FF 9F CD |  if_b	jmp	#LR__0950
0be4c                 | LR__0951
0be4c     71 00 00 FF 
0be50     6C E4 85 F1 | 	sub	objptr, ##57964
0be54                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i))
0be54     00 1E 06 F6 | 	mov	local01, #0
0be58                 | LR__0952
0be58     0F 21 02 F6 | 	mov	local02, local01
0be5c     02 20 66 F0 | 	shl	local02, #2
0be60     7A 00 00 FF 
0be64     08 E4 05 F1 | 	add	objptr, ##62472
0be68     F2 20 02 F1 | 	add	local02, objptr
0be6c     10 21 0A FB | 	rdlong	local02, local02 wz
0be70     7A 00 00 FF 
0be74     08 E4 85 F1 | 	sub	objptr, ##62472
0be78     34 00 90 AD |  if_e	jmp	#LR__0953
0be7c     0F 13 02 F6 | 	mov	arg01, local01
0be80     00 14 06 F6 | 	mov	arg02, #0
0be84     00 16 06 F6 | 	mov	arg03, #0
0be88     34 A7 B0 FD | 	call	#_hg010b_spin2_setspritesize
0be8c     0F 21 02 F6 | 	mov	local02, local01
0be90     02 20 66 F0 | 	shl	local02, #2
0be94     7A 00 00 FF 
0be98     08 E4 05 F1 | 	add	objptr, ##62472
0be9c     F2 20 02 F1 | 	add	local02, objptr
0bea0     10 13 02 FB | 	rdlong	arg01, local02
0bea4     7A 00 00 FF 
0bea8     08 E4 85 F1 | 	sub	objptr, ##62472
0beac     98 04 B1 FD | 	call	#__system___gc_free
0beb0                 | LR__0953
0beb0     F2 22 02 FB | 	rdlong	local03, objptr
0beb4     7A 00 00 FF 
0beb8     4C E4 05 F1 | 	add	objptr, ##62540
0bebc     F2 22 62 FC | 	wrlong	local03, objptr
0bec0     7A 00 00 FF 
0bec4     4C E4 85 F1 | 	sub	objptr, ##62540
0bec8     11 12 06 F6 | 	mov	arg01, #17
0becc     08 14 06 F6 | 	mov	arg02, #8
0bed0     10 16 06 F6 | 	mov	arg03, #16
0bed4     E8 A6 B0 FD | 	call	#_hg010b_spin2_setspritesize
0bed8     01 1E 06 F1 | 	add	local01, #1
0bedc     10 1E 56 F2 | 	cmps	local01, #16 wc
0bee0     74 FF 9F CD |  if_b	jmp	#LR__0952
0bee4     A7 F0 03 F6 | 	mov	ptra, fp
0bee8     B2 00 A0 FD | 	call	#popregs_
0beec                 | _do_new_ret
0beec     2D 00 64 FD | 	ret
0bef0                 | 
0bef0                 | ' 
0bef0                 | ' '----------------------- goto
0bef0                 | ' sub do_fast_goto
0bef0                 | _do_fast_goto
0bef0     02 4A 05 F6 | 	mov	COUNT_, #2
0bef4     A8 00 A0 FD | 	call	#pushregs_
0bef8                 | _do_fast_goto_enter
0bef8     69 00 00 FF 
0befc     54 E4 05 F1 | 	add	objptr, ##53844
0bf00     F2 12 02 FB | 	rdlong	arg01, objptr
0bf04     09 1F 02 F6 | 	mov	local01, arg01
0bf08     01 1E 66 F0 | 	shl	local01, #1
0bf0c     09 1F 02 F1 | 	add	local01, arg01
0bf10     02 1E 66 F0 | 	shl	local01, #2
0bf14     03 00 00 FF 
0bf18     04 E4 85 F1 | 	sub	objptr, ##1540
0bf1c     F2 1E 02 F1 | 	add	local01, objptr
0bf20     0F 21 02 FB | 	rdlong	local02, local01
0bf24     10 13 02 F6 | 	mov	arg01, local02
0bf28     66 00 00 FF 
0bf2c     50 E4 85 F1 | 	sub	objptr, ##52304
0bf30     C0 92 B0 FD | 	call	#_pslpeek
0bf34     FD 12 02 F6 | 	mov	arg01, result1
0bf38                 | ' 
0bf38                 | ' testptr=compiledline(lineptr_e).result.uresult
0bf38                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
0bf38                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
0bf38     69 00 00 FF 
0bf3c     54 E4 05 F1 | 	add	objptr, ##53844
0bf40     F2 FA 01 FB | 	rdlong	result1, objptr
0bf44     FD 1E 02 F6 | 	mov	local01, result1
0bf48     01 1E 66 F0 | 	shl	local01, #1
0bf4c     FD 1E 02 F1 | 	add	local01, result1
0bf50     02 1E 66 F0 | 	shl	local01, #2
0bf54     03 00 00 FF 
0bf58     04 E4 85 F1 | 	sub	objptr, ##1540
0bf5c     F2 1E 02 F1 | 	add	local01, objptr
0bf60     04 1E 06 F1 | 	add	local01, #4
0bf64     0F 1F 02 FB | 	rdlong	local01, local01
0bf68     0F 13 0A F2 | 	cmp	arg01, local01 wz
0bf6c     66 00 00 FF 
0bf70     50 E4 85 F1 | 	sub	objptr, ##52304
0bf74     58 00 90 5D |  if_ne	jmp	#LR__0960
0bf78     78 00 00 FF 
0bf7c     84 E5 05 F1 | 	add	objptr, ##61828
0bf80     F2 20 62 FC | 	wrlong	local02, objptr
0bf84     0F 00 00 FF 
0bf88     34 E5 85 F1 | 	sub	objptr, ##7988
0bf8c     F2 20 02 FB | 	rdlong	local02, objptr
0bf90     01 20 86 F1 | 	sub	local02, #1
0bf94     04 E4 05 F1 | 	add	objptr, #4
0bf98     F2 20 62 FC | 	wrlong	local02, objptr
0bf9c                 | '   runptr=testptr
0bf9c                 | '   lineptr_e=lineptr-1
0bf9c                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
0bf9c     0F 00 00 FF 
0bfa0     54 E5 05 F1 | 	add	objptr, ##8020
0bfa4     F2 20 02 FB | 	rdlong	local02, objptr
0bfa8     78 00 00 FF 
0bfac     A8 E5 85 F1 | 	sub	objptr, ##61864
0bfb0     FF FF 3F FF 
0bfb4     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0bfb8     78 00 00 AF 
0bfbc     A8 E5 05 A1 |  if_e	add	objptr, ##61864
0bfc0     F2 00 68 AC |  if_e	wrlong	#0, objptr
0bfc4     78 00 00 AF 
0bfc8     A8 E5 85 A1 |  if_e	sub	objptr, ##61864
0bfcc     04 00 90 FD | 	jmp	#LR__0961
0bfd0                 | LR__0960
0bfd0     0C 00 B0 FD | 	call	#_do_find_goto
0bfd4                 | LR__0961
0bfd4     A7 F0 03 F6 | 	mov	ptra, fp
0bfd8     B2 00 A0 FD | 	call	#popregs_
0bfdc                 | _do_fast_goto_ret
0bfdc     2D 00 64 FD | 	ret
0bfe0                 | 
0bfe0                 | ' 
0bfe0                 | ' 
0bfe0                 | ' 
0bfe0                 | ' 
0bfe0                 | ' sub do_find_goto
0bfe0                 | _do_find_goto
0bfe0     03 4A 05 F6 | 	mov	COUNT_, #3
0bfe4     A8 00 A0 FD | 	call	#pushregs_
0bfe8     24 F0 07 F1 | 	add	ptra, #36
0bfec                 | _do_find_goto_enter
0bfec     69 00 00 FF 
0bff0     54 E4 05 F1 | 	add	objptr, ##53844
0bff4     F2 1E 02 FB | 	rdlong	local01, objptr
0bff8     0F 21 02 F6 | 	mov	local02, local01
0bffc     01 20 66 F0 | 	shl	local02, #1
0c000     0F 21 02 F1 | 	add	local02, local01
0c004     02 20 66 F0 | 	shl	local02, #2
0c008     03 00 00 FF 
0c00c     04 E4 85 F1 | 	sub	objptr, ##1540
0c010     F2 20 02 F1 | 	add	local02, objptr
0c014     04 20 06 F1 | 	add	local02, #4
0c018     10 21 02 FB | 	rdlong	local02, local02
0c01c     A7 20 62 FC | 	wrlong	local02, fp
0c020     03 00 00 FF 
0c024     08 E4 05 F1 | 	add	objptr, ##1544
0c028     F2 22 02 FB | 	rdlong	local03, objptr
0c02c     69 00 00 FF 
0c030     58 E4 85 F1 | 	sub	objptr, ##53848
0c034     04 4E 05 F1 | 	add	fp, #4
0c038     A7 22 62 FC | 	wrlong	local03, fp
0c03c     04 4E 85 F1 | 	sub	fp, #4
0c040                 | ' 
0c040                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
0c040                 | '  ' print "find goto"                                                                     'print gotoline 
0c040                 | ' gotoptr=programstart
0c040                 | ' do
0c040                 | LR__0970
0c040     0C 4E 05 F1 | 	add	fp, #12
0c044     A7 12 02 F6 | 	mov	arg01, fp
0c048     08 4E 85 F1 | 	sub	fp, #8
0c04c     A7 14 02 FB | 	rdlong	arg02, fp
0c050     04 4E 85 F1 | 	sub	fp, #4
0c054     18 16 06 F6 | 	mov	arg03, #24
0c058     0B 00 00 FF 
0c05c     C0 E4 05 F1 | 	add	objptr, ##5824
0c060     08 BA B0 FD | 	call	#_psram_spin2_read1
0c064     0B 00 00 FF 
0c068     C0 E4 85 F1 | 	sub	objptr, ##5824
0c06c                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
0c06c                 | '   if gotoheader(0)<>$FFFFFFFF then
0c06c     0C 4E 05 F1 | 	add	fp, #12
0c070     A7 22 02 FB | 	rdlong	local03, fp
0c074     0C 4E 85 F1 | 	sub	fp, #12
0c078     FF FF 7F FF 
0c07c     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0c080     24 00 90 AD |  if_e	jmp	#LR__0971
0c084     04 4E 05 F1 | 	add	fp, #4
0c088     A7 22 02 FB | 	rdlong	local03, fp
0c08c     04 4E 05 F1 | 	add	fp, #4
0c090     A7 22 62 FC | 	wrlong	local03, fp
0c094     18 4E 05 F1 | 	add	fp, #24
0c098     A7 22 02 FB | 	rdlong	local03, fp
0c09c     1C 4E 85 F1 | 	sub	fp, #28
0c0a0     A7 22 62 FC | 	wrlong	local03, fp
0c0a4     04 4E 85 F1 | 	sub	fp, #4
0c0a8                 | LR__0971
0c0a8     20 4E 05 F1 | 	add	fp, #32
0c0ac     A7 22 02 FB | 	rdlong	local03, fp
0c0b0     20 4E 85 F1 | 	sub	fp, #32
0c0b4     FF FF 3F FF 
0c0b8     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0c0bc     0C 4E 05 51 |  if_ne	add	fp, #12
0c0c0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0c0c4     0C 4E 85 51 |  if_ne	sub	fp, #12
0c0c8     FF FF 7F 5F 
0c0cc     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0c0d0     18 00 90 AD |  if_e	jmp	#LR__0972
0c0d4     0C 4E 05 F1 | 	add	fp, #12
0c0d8     A7 22 02 FB | 	rdlong	local03, fp
0c0dc     0C 4E 85 F1 | 	sub	fp, #12
0c0e0     A7 20 02 FB | 	rdlong	local02, fp
0c0e4     10 23 0A F2 | 	cmp	local03, local02 wz
0c0e8     54 FF 9F 5D |  if_ne	jmp	#LR__0970
0c0ec                 | LR__0972
0c0ec                 | ' 
0c0ec                 | ' if gotoheader(0)=gotoline then
0c0ec     0C 4E 05 F1 | 	add	fp, #12
0c0f0     A7 22 02 FB | 	rdlong	local03, fp
0c0f4     0C 4E 85 F1 | 	sub	fp, #12
0c0f8     A7 1E 02 FB | 	rdlong	local01, fp
0c0fc     0F 23 0A F2 | 	cmp	local03, local01 wz
0c100     D8 00 90 5D |  if_ne	jmp	#LR__0973
0c104     69 00 00 FF 
0c108     54 E4 05 F1 | 	add	objptr, ##53844
0c10c     F2 1E 02 FB | 	rdlong	local01, objptr
0c110     0F 21 02 F6 | 	mov	local02, local01
0c114     01 20 66 F0 | 	shl	local02, #1
0c118     0F 21 02 F1 | 	add	local02, local01
0c11c     02 20 66 F0 | 	shl	local02, #2
0c120     03 00 00 FF 
0c124     04 E4 85 F1 | 	sub	objptr, ##1540
0c128     F2 20 02 F1 | 	add	local02, objptr
0c12c     08 4E 05 F1 | 	add	fp, #8
0c130     A7 22 02 FB | 	rdlong	local03, fp
0c134     10 23 62 FC | 	wrlong	local03, local02
0c138     03 00 00 FF 
0c13c     04 E4 05 F1 | 	add	objptr, ##1540
0c140     F2 1E 02 FB | 	rdlong	local01, objptr
0c144     0F 21 02 F6 | 	mov	local02, local01
0c148     01 20 66 F0 | 	shl	local02, #1
0c14c     0F 21 02 F1 | 	add	local02, local01
0c150     02 20 66 F0 | 	shl	local02, #2
0c154     03 00 00 FF 
0c158     04 E4 85 F1 | 	sub	objptr, ##1540
0c15c     F2 20 02 F1 | 	add	local02, objptr
0c160     08 20 06 F1 | 	add	local02, #8
0c164     10 9D 68 FC | 	wrlong	#78, local02
0c168     03 00 00 FF 
0c16c     04 E4 05 F1 | 	add	objptr, ##1540
0c170     F2 20 02 FB | 	rdlong	local02, objptr
0c174     10 13 02 F6 | 	mov	arg01, local02
0c178     01 12 66 F0 | 	shl	arg01, #1
0c17c     10 13 02 F1 | 	add	arg01, local02
0c180     02 12 66 F0 | 	shl	arg01, #2
0c184     03 00 00 FF 
0c188     04 E4 85 F1 | 	sub	objptr, ##1540
0c18c     F2 12 02 F1 | 	add	arg01, objptr
0c190     12 00 00 FF 
0c194     3C E5 05 F1 | 	add	objptr, ##9532
0c198     F2 14 02 FB | 	rdlong	arg02, objptr
0c19c     02 22 06 F6 | 	mov	local03, #2
0c1a0     10 23 02 F1 | 	add	local03, local02
0c1a4     14 00 00 FF 
0c1a8     54 E5 85 F1 | 	sub	objptr, ##10580
0c1ac     F2 16 02 FB | 	rdlong	arg03, objptr
0c1b0     0B 23 02 FD | 	qmul	local03, arg03
0c1b4     08 4E 85 F1 | 	sub	fp, #8
0c1b8     58 00 00 FF 
0c1bc     78 E5 85 F1 | 	sub	objptr, ##45432
0c1c0     18 22 62 FD | 	getqx	local03
0c1c4     11 15 02 F1 | 	add	arg02, local03
0c1c8     3C B9 B0 FD | 	call	#_psram_spin2_write
0c1cc     0B 00 00 FF 
0c1d0     C0 E4 85 F1 | 	sub	objptr, ##5824
0c1d4     18 FD BF FD | 	call	#_do_fast_goto
0c1d8     08 00 90 FD | 	jmp	#LR__0974
0c1dc                 | LR__0973
0c1dc     26 12 06 F6 | 	mov	arg01, #38
0c1e0     54 8E B0 FD | 	call	#_printerror
0c1e4                 | LR__0974
0c1e4     A7 F0 03 F6 | 	mov	ptra, fp
0c1e8     B2 00 A0 FD | 	call	#popregs_
0c1ec                 | _do_find_goto_ret
0c1ec     2D 00 64 FD | 	ret
0c1f0                 | 
0c1f0                 | ' 
0c1f0                 | ' sub do_slow_goto
0c1f0                 | _do_slow_goto
0c1f0                 | _do_slow_goto_ret
0c1f0     2D 00 64 FD | 	ret
0c1f4                 | 
0c1f4                 | ' 
0c1f4                 | ' '----------------------- Error processing
0c1f4                 | ' 
0c1f4                 | ' sub do_error
0c1f4                 | _do_error
0c1f4     01 4A 05 F6 | 	mov	COUNT_, #1
0c1f8     A8 00 A0 FD | 	call	#pushregs_
0c1fc     69 00 00 FF 
0c200     54 E4 05 F1 | 	add	objptr, ##53844
0c204     F2 18 02 FB | 	rdlong	arg04, objptr
0c208     0C 17 02 F6 | 	mov	arg03, arg04
0c20c     01 16 66 F0 | 	shl	arg03, #1
0c210     0C 17 02 F1 | 	add	arg03, arg04
0c214     02 16 66 F0 | 	shl	arg03, #2
0c218     03 00 00 FF 
0c21c     04 E4 85 F1 | 	sub	objptr, ##1540
0c220     F2 16 02 F1 | 	add	arg03, objptr
0c224     0B 1F 02 FB | 	rdlong	local01, arg03
0c228                 | ' r=compiledline(lineptr_e).result.uresult
0c228                 | ' print "Error ";r;": ";errors$(r)
0c228     00 12 06 F6 | 	mov	arg01, #0
0c22c     66 00 00 FF 
0c230     50 E4 85 F1 | 	sub	objptr, ##52304
0c234     20 1B B1 FD | 	call	#__system___getiolock_0416
0c238     FD 12 02 F6 | 	mov	arg01, result1
0c23c     1C C3 B0 FD | 	call	#__system___lockmem
0c240     3E 01 00 FF 
0c244     BF 15 06 F6 | 	mov	arg02, ##@LR__4582
0c248     00 12 06 F6 | 	mov	arg01, #0
0c24c     00 16 06 F6 | 	mov	arg03, #0
0c250     F8 CF B0 FD | 	call	#__system___basic_print_string
0c254     00 12 06 F6 | 	mov	arg01, #0
0c258     0F 15 02 F6 | 	mov	arg02, local01
0c25c     00 16 06 F6 | 	mov	arg03, #0
0c260     0A 18 06 F6 | 	mov	arg04, #10
0c264     68 D0 B0 FD | 	call	#__system___basic_print_unsigned
0c268     3E 01 00 FF 
0c26c     C6 15 06 F6 | 	mov	arg02, ##@LR__4583
0c270     00 12 06 F6 | 	mov	arg01, #0
0c274     00 16 06 F6 | 	mov	arg03, #0
0c278     D0 CF B0 FD | 	call	#__system___basic_print_string
0c27c     02 1E 66 F0 | 	shl	local01, #2
0c280     64 00 00 FF 
0c284     50 E4 05 F1 | 	add	objptr, ##51280
0c288     F2 1E 02 F1 | 	add	local01, objptr
0c28c     0F 15 02 FB | 	rdlong	arg02, local01
0c290     00 12 06 F6 | 	mov	arg01, #0
0c294     00 16 06 F6 | 	mov	arg03, #0
0c298     64 00 00 FF 
0c29c     50 E4 85 F1 | 	sub	objptr, ##51280
0c2a0     A8 CF B0 FD | 	call	#__system___basic_print_string
0c2a4     00 12 06 F6 | 	mov	arg01, #0
0c2a8     0A 14 06 F6 | 	mov	arg02, #10
0c2ac     00 16 06 F6 | 	mov	arg03, #0
0c2b0     40 CF B0 FD | 	call	#__system___basic_print_char
0c2b4     00 12 06 F6 | 	mov	arg01, #0
0c2b8     9C 1A B1 FD | 	call	#__system___getiolock_0416
0c2bc     FD 00 68 FC | 	wrlong	#0, result1
0c2c0     A7 F0 03 F6 | 	mov	ptra, fp
0c2c4     B2 00 A0 FD | 	call	#popregs_
0c2c8                 | _do_error_ret
0c2c8     2D 00 64 FD | 	ret
0c2cc                 | 
0c2cc                 | ' 
0c2cc                 | ' 
0c2cc                 | ' '------------------ Assigning to a variable  
0c2cc                 | ' 
0c2cc                 | ' function  convertstring(psaddr as ulong) as string
0c2cc                 | _convertstring
0c2cc     04 4A 05 F6 | 	mov	COUNT_, #4
0c2d0     A8 00 A0 FD | 	call	#pushregs_
0c2d4     09 1F 02 F6 | 	mov	local01, arg01
0c2d8     18 8F B0 FD | 	call	#_pslpeek
0c2dc     FD 20 02 F6 | 	mov	local02, result1
0c2e0     3E 01 00 FF 
0c2e4     C9 23 06 F6 | 	mov	local03, ##@LR__4584
0c2e8                 | ' 'print "in convertstring: psaddr=";psaddr
0c2e8                 | ' l=pslpeek(psaddr)
0c2e8                 | ' 'print "in convertstring: len=";l
0c2e8                 | ' s="" 
0c2e8                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0c2e8     01 24 06 F6 | 	mov	local04, #1
0c2ec     01 20 06 F1 | 	add	local02, #1
0c2f0                 | LR__0980
0c2f0     10 25 52 F2 | 	cmps	local04, local02 wc
0c2f4     30 00 90 3D |  if_ae	jmp	#LR__0981
0c2f8     0F 13 02 F6 | 	mov	arg01, local01
0c2fc     03 12 06 F1 | 	add	arg01, #3
0c300     12 13 02 F1 | 	add	arg01, local04
0c304     94 8E B0 FD | 	call	#_pspeek
0c308     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0c30c     1C E4 B0 FD | 	call	#__system__Chr_S
0c310     FD 14 02 F6 | 	mov	arg02, result1
0c314     11 13 02 F6 | 	mov	arg01, local03
0c318     9C C2 B0 FD | 	call	#__system___string_concat
0c31c     FD 22 02 F6 | 	mov	local03, result1
0c320     01 24 06 F1 | 	add	local04, #1
0c324     C8 FF 9F FD | 	jmp	#LR__0980
0c328                 | LR__0981
0c328                 | ' 'print "in convertstring: str=";s
0c328                 | ' return s
0c328     11 FB 01 F6 | 	mov	result1, local03
0c32c     A7 F0 03 F6 | 	mov	ptra, fp
0c330     B2 00 A0 FD | 	call	#popregs_
0c334                 | _convertstring_ret
0c334     2D 00 64 FD | 	ret
0c338                 | 
0c338                 | ' 
0c338                 | ' sub do_assign
0c338                 | _do_assign
0c338     05 4A 05 F6 | 	mov	COUNT_, #5
0c33c     A8 00 A0 FD | 	call	#pushregs_
0c340     44 F0 07 F1 | 	add	ptra, #68
0c344     69 00 00 FF 
0c348     54 E4 05 F1 | 	add	objptr, ##53844
0c34c     F2 16 02 FB | 	rdlong	arg03, objptr
0c350     0B 15 02 F6 | 	mov	arg02, arg03
0c354     01 14 66 F0 | 	shl	arg02, #1
0c358     0B 15 02 F1 | 	add	arg02, arg03
0c35c     02 14 66 F0 | 	shl	arg02, #2
0c360     03 00 00 FF 
0c364     04 E4 85 F1 | 	sub	objptr, ##1540
0c368     F2 14 02 F1 | 	add	arg02, objptr
0c36c     0A 15 02 FB | 	rdlong	arg02, arg02
0c370     18 4E 05 F1 | 	add	fp, #24
0c374     A7 14 62 FC | 	wrlong	arg02, fp
0c378                 | ' 
0c378                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
0c378                 | ' 
0c378                 | ' if variables(varnum).vartype<array_no_type then 
0c378     18 4E 85 F1 | 	sub	fp, #24
0c37c     04 14 66 F0 | 	shl	arg02, #4
0c380     32 00 00 FF 
0c384     74 E4 85 F1 | 	sub	objptr, ##25716
0c388     F2 14 02 F1 | 	add	arg02, objptr
0c38c     0C 14 06 F1 | 	add	arg02, #12
0c390     0A 17 02 FB | 	rdlong	arg03, arg02
0c394     00 17 16 F2 | 	cmp	arg03, #256 wc
0c398     33 00 00 FF 
0c39c     DC E5 85 F1 | 	sub	objptr, ##26588
0c3a0     18 01 90 3D |  if_ae	jmp	#LR__0990
0c3a4     1C CE BF FD | 	call	#_pop
0c3a8     A7 FA 61 FC | 	wrlong	result1, fp
0c3ac     04 4E 05 F1 | 	add	fp, #4
0c3b0     A7 FC 61 FC | 	wrlong	result2, fp
0c3b4     04 4E 05 F1 | 	add	fp, #4
0c3b8     A7 FE 61 FC | 	wrlong	result3, fp
0c3bc     08 4E 85 F1 | 	sub	fp, #8
0c3c0     A7 16 02 FB | 	rdlong	arg03, fp
0c3c4     04 4E 05 F1 | 	add	fp, #4
0c3c8     A7 14 02 FB | 	rdlong	arg02, fp
0c3cc     14 4E 05 F1 | 	add	fp, #20
0c3d0     A7 12 02 FB | 	rdlong	arg01, fp
0c3d4     04 12 66 F0 | 	shl	arg01, #4
0c3d8     33 00 00 FF 
0c3dc     DC E5 05 F1 | 	add	objptr, ##26588
0c3e0     F2 12 02 F1 | 	add	arg01, objptr
0c3e4     04 12 06 F1 | 	add	arg01, #4
0c3e8     09 17 62 FC | 	wrlong	arg03, arg01
0c3ec     A7 16 02 FB | 	rdlong	arg03, fp
0c3f0     04 16 66 F0 | 	shl	arg03, #4
0c3f4     F2 16 02 F1 | 	add	arg03, objptr
0c3f8     08 16 06 F1 | 	add	arg03, #8
0c3fc     0B 15 62 FC | 	wrlong	arg02, arg03
0c400     A7 16 02 FB | 	rdlong	arg03, fp
0c404     04 16 66 F0 | 	shl	arg03, #4
0c408     F2 16 02 F1 | 	add	arg03, objptr
0c40c     10 4E 85 F1 | 	sub	fp, #16
0c410     A7 14 02 FB | 	rdlong	arg02, fp
0c414     0C 16 06 F1 | 	add	arg03, #12
0c418     0B 15 62 FC | 	wrlong	arg02, arg03
0c41c                 | '   t1=pop() 
0c41c                 | ' 'print "In do_assign value to assign=";t1.result.uresult, "type to assign=";t1.result_type  
0c41c                 | '    variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
0c41c                 | '   if variables(varnum).vartype<>result_string2 then return
0c41c     10 4E 05 F1 | 	add	fp, #16
0c420     A7 16 02 FB | 	rdlong	arg03, fp
0c424     18 4E 85 F1 | 	sub	fp, #24
0c428     04 16 66 F0 | 	shl	arg03, #4
0c42c     F2 16 02 F1 | 	add	arg03, objptr
0c430     0C 16 06 F1 | 	add	arg03, #12
0c434     0B 17 02 FB | 	rdlong	arg03, arg03
0c438     2B 16 0E F2 | 	cmp	arg03, #43 wz
0c43c     33 00 00 FF 
0c440     DC E5 85 F1 | 	sub	objptr, ##26588
0c444     9C 05 90 5D |  if_ne	jmp	#LR__1011
0c448     18 4E 05 F1 | 	add	fp, #24
0c44c     A7 16 02 FB | 	rdlong	arg03, fp
0c450     0B 1F 02 F6 | 	mov	local01, arg03
0c454     04 1E 66 F0 | 	shl	local01, #4
0c458     33 00 00 FF 
0c45c     DC E5 05 F1 | 	add	objptr, ##26588
0c460     F2 1E 02 F1 | 	add	local01, objptr
0c464     18 4E 85 F1 | 	sub	fp, #24
0c468     04 16 66 F0 | 	shl	arg03, #4
0c46c     F2 16 02 F1 | 	add	arg03, objptr
0c470     04 16 06 F1 | 	add	arg03, #4
0c474     0B 13 02 FB | 	rdlong	arg01, arg03
0c478     33 00 00 FF 
0c47c     DC E5 85 F1 | 	sub	objptr, ##26588
0c480     48 FE BF FD | 	call	#_convertstring
0c484     04 1E 06 F1 | 	add	local01, #4
0c488     0F FB 61 FC | 	wrlong	result1, local01
0c48c     18 4E 05 F1 | 	add	fp, #24
0c490     A7 1E 02 FB | 	rdlong	local01, fp
0c494     18 4E 85 F1 | 	sub	fp, #24
0c498     04 1E 66 F0 | 	shl	local01, #4
0c49c     33 00 00 FF 
0c4a0     DC E5 05 F1 | 	add	objptr, ##26588
0c4a4     F2 1E 02 F1 | 	add	local01, objptr
0c4a8     0C 1E 06 F1 | 	add	local01, #12
0c4ac     0F 3F 68 FC | 	wrlong	#31, local01
0c4b0                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
0c4b0                 | '   variables(varnum).vartype=result_string
0c4b0                 | '   return
0c4b0     33 00 00 FF 
0c4b4     DC E5 85 F1 | 	sub	objptr, ##26588
0c4b8     28 05 90 FD | 	jmp	#LR__1011
0c4bc                 | LR__0990
0c4bc                 | ' for i=0 to 2 : arrid(i)=0 : next i
0c4bc     1C 4E 05 F1 | 	add	fp, #28
0c4c0     A7 00 68 FC | 	wrlong	#0, fp
0c4c4     97 16 48 FB | 	callpa	#(@LR__0992-@LR__0991)>>2,fcache_load_ptr_
0c4c8                 | LR__0991
0c4c8     A7 1E 02 FB | 	rdlong	local01, fp
0c4cc     02 1E 66 F0 | 	shl	local01, #2
0c4d0     18 4E 05 F1 | 	add	fp, #24
0c4d4     A7 1E 02 F1 | 	add	local01, fp
0c4d8     0F 01 68 FC | 	wrlong	#0, local01
0c4dc     18 4E 85 F1 | 	sub	fp, #24
0c4e0     A7 1E 02 FB | 	rdlong	local01, fp
0c4e4     01 1E 06 F1 | 	add	local01, #1
0c4e8     A7 1E 62 FC | 	wrlong	local01, fp
0c4ec     03 1E 16 F2 | 	cmp	local01, #3 wc
0c4f0     D4 FF 9F CD |  if_b	jmp	#LR__0991
0c4f4                 | LR__0992
0c4f4     69 00 00 FF 
0c4f8     54 E4 05 F1 | 	add	objptr, ##53844
0c4fc     F2 16 02 FB | 	rdlong	arg03, objptr
0c500     0B 1F 02 F6 | 	mov	local01, arg03
0c504     01 1E 66 F0 | 	shl	local01, #1
0c508     0B 1F 02 F1 | 	add	local01, arg03
0c50c     02 1E 66 F0 | 	shl	local01, #2
0c510     03 00 00 FF 
0c514     04 E4 85 F1 | 	sub	objptr, ##1540
0c518     F2 1E 02 F1 | 	add	local01, objptr
0c51c     04 1E 06 F1 | 	add	local01, #4
0c520     0F 21 02 FB | 	rdlong	local02, local01
0c524     04 4E 05 F1 | 	add	fp, #4
0c528     A7 20 62 FC | 	wrlong	local02, fp
0c52c     20 4E 85 F1 | 	sub	fp, #32
0c530     66 00 00 FF 
0c534     50 E4 85 F1 | 	sub	objptr, ##52304
0c538     88 CC BF FD | 	call	#_pop
0c53c     A7 FA 61 FC | 	wrlong	result1, fp
0c540     04 4E 05 F1 | 	add	fp, #4
0c544     A7 FC 61 FC | 	wrlong	result2, fp
0c548     04 4E 05 F1 | 	add	fp, #4
0c54c     A7 FE 61 FC | 	wrlong	result3, fp
0c550                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
0c550                 | ' t1=pop() ' var value
0c550                 | ' if numpar>0 then
0c550     18 4E 05 F1 | 	add	fp, #24
0c554     A7 22 02 FB | 	rdlong	local03, fp
0c558     20 4E 85 F1 | 	sub	fp, #32
0c55c     01 22 16 F2 | 	cmp	local03, #1 wc
0c560     70 00 90 CD |  if_b	jmp	#LR__0995
0c564                 | '   for i=numpar to 1 step -1
0c564     20 4E 05 F1 | 	add	fp, #32
0c568     A7 24 0A FB | 	rdlong	local04, fp wz
0c56c     04 4E 85 F1 | 	sub	fp, #4
0c570     A7 24 62 FC | 	wrlong	local04, fp
0c574     1C 4E 85 F1 | 	sub	fp, #28
0c578     58 00 90 AD |  if_e	jmp	#LR__0994
0c57c                 | LR__0993
0c57c     44 CC BF FD | 	call	#_pop
0c580     0C 4E 05 F1 | 	add	fp, #12
0c584     A7 FA 61 FC | 	wrlong	result1, fp
0c588     04 4E 05 F1 | 	add	fp, #4
0c58c     A7 FC 61 FC | 	wrlong	result2, fp
0c590     04 4E 05 F1 | 	add	fp, #4
0c594     A7 FE 61 FC | 	wrlong	result3, fp
0c598     08 4E 05 F1 | 	add	fp, #8
0c59c     A7 22 02 FB | 	rdlong	local03, fp
0c5a0     01 22 86 F1 | 	sub	local03, #1
0c5a4     02 22 66 F0 | 	shl	local03, #2
0c5a8     18 4E 05 F1 | 	add	fp, #24
0c5ac     A7 22 02 F1 | 	add	local03, fp
0c5b0     28 4E 85 F1 | 	sub	fp, #40
0c5b4     A7 24 02 FB | 	rdlong	local04, fp
0c5b8     11 25 62 FC | 	wrlong	local04, local03
0c5bc     10 4E 05 F1 | 	add	fp, #16
0c5c0     A7 24 02 FB | 	rdlong	local04, fp
0c5c4     01 24 8E F1 | 	sub	local04, #1 wz
0c5c8     A7 24 62 FC | 	wrlong	local04, fp
0c5cc     1C 4E 85 F1 | 	sub	fp, #28
0c5d0     A8 FF 9F 5D |  if_ne	jmp	#LR__0993
0c5d4                 | LR__0994
0c5d4                 | LR__0995
0c5d4     18 4E 05 F1 | 	add	fp, #24
0c5d8     A7 1E 02 FB | 	rdlong	local01, fp
0c5dc     04 1E 66 F0 | 	shl	local01, #4
0c5e0     33 00 00 FF 
0c5e4     DC E5 05 F1 | 	add	objptr, ##26588
0c5e8     F2 1E 02 F1 | 	add	local01, objptr
0c5ec     04 1E 06 F1 | 	add	local01, #4
0c5f0     0F 13 02 FB | 	rdlong	arg01, local01
0c5f4     0C 4E 05 F1 | 	add	fp, #12
0c5f8     A7 12 62 FC | 	wrlong	arg01, fp
0c5fc     24 4E 85 F1 | 	sub	fp, #36
0c600     33 00 00 FF 
0c604     DC E5 85 F1 | 	sub	objptr, ##26588
0c608     E8 8B B0 FD | 	call	#_pslpeek
0c60c     FD 24 32 F9 | 	getword	local04, result1, #0
0c610     28 4E 05 F1 | 	add	fp, #40
0c614     A7 24 62 FC | 	wrlong	local04, fp
0c618     04 4E 85 F1 | 	sub	fp, #4
0c61c     A7 12 02 FB | 	rdlong	arg01, fp
0c620     24 4E 85 F1 | 	sub	fp, #36
0c624     02 12 06 F1 | 	add	arg01, #2
0c628     70 8B B0 FD | 	call	#_pspeek
0c62c     FD FA E1 F8 | 	getbyte	result1, result1, #0
0c630     2C 4E 05 F1 | 	add	fp, #44
0c634     A7 FA 61 FC | 	wrlong	result1, fp
0c638     08 4E 85 F1 | 	sub	fp, #8
0c63c     A7 12 02 FB | 	rdlong	arg01, fp
0c640     09 25 02 F6 | 	mov	local04, arg01
0c644     10 24 06 F1 | 	add	local04, #16
0c648     24 4E 85 F1 | 	sub	fp, #36
0c64c     04 12 06 F1 | 	add	arg01, #4
0c650     A0 8B B0 FD | 	call	#_pslpeek
0c654     FD 1E 02 F6 | 	mov	local01, result1
0c658     38 4E 05 F1 | 	add	fp, #56
0c65c     A7 20 02 FB | 	rdlong	local02, fp
0c660     10 1F 02 FD | 	qmul	local01, local02
0c664     04 4E 85 F1 | 	sub	fp, #4
0c668     A7 22 02 FB | 	rdlong	local03, fp
0c66c     10 4E 85 F1 | 	sub	fp, #16
0c670     A7 12 02 FB | 	rdlong	arg01, fp
0c674     24 4E 85 F1 | 	sub	fp, #36
0c678     08 12 06 F1 | 	add	arg01, #8
0c67c     18 20 62 FD | 	getqx	local02
0c680     10 23 02 F1 | 	add	local03, local02
0c684     6C 8B B0 FD | 	call	#_pslpeek
0c688     FD 20 02 F6 | 	mov	local02, result1
0c68c     24 4E 05 F1 | 	add	fp, #36
0c690     A7 12 02 FB | 	rdlong	arg01, fp
0c694     24 4E 85 F1 | 	sub	fp, #36
0c698     04 12 06 F1 | 	add	arg01, #4
0c69c     54 8B B0 FD | 	call	#_pslpeek
0c6a0     FD 20 02 FD | 	qmul	local02, result1
0c6a4     3C 4E 05 F1 | 	add	fp, #60
0c6a8     A7 20 02 FB | 	rdlong	local02, fp
0c6ac     18 1E 62 FD | 	getqx	local01
0c6b0     10 1F 02 FD | 	qmul	local01, local02
0c6b4     10 4E 85 F1 | 	sub	fp, #16
0c6b8     A7 20 02 FB | 	rdlong	local02, fp
0c6bc     18 1E 62 FD | 	getqx	local01
0c6c0     0F 23 02 F1 | 	add	local03, local01
0c6c4     11 21 02 FD | 	qmul	local02, local03
0c6c8     04 4E 05 F1 | 	add	fp, #4
0c6cc                 | ' esize=pspeek(arrptr+2)
0c6cc                 | ' 'print " in do_assign, pslpeek(arrptr+4)="; pslpeek(arrptr+4)
0c6cc                 | ' 'print " in do_assign, pslpeek(arrptr+8)="; pslpeek(arrptr+8)
0c6cc                 | ' 'print " in do_assign, pslpeek(arrptr+12)="; pslpeek(arrptr+12)
0c6cc                 | ' 
0c6cc                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
0c6cc                 | ' select case arrtype
0c6cc     18 22 62 FD | 	getqx	local03
0c6d0     11 25 02 F1 | 	add	local04, local03
0c6d4     A7 24 62 FC | 	wrlong	local04, fp
0c6d8     08 4E 85 F1 | 	sub	fp, #8
0c6dc     A7 26 02 FB | 	rdlong	local05, fp
0c6e0     28 4E 85 F1 | 	sub	fp, #40
0c6e4     00 27 86 F1 | 	sub	local05, #256
0c6e8     0C 26 26 F3 | 	fle	local05, #12
0c6ec     30 26 62 FD | 	jmprel	local05
0c6f0                 | LR__0996
0c6f0     30 00 90 FD | 	jmp	#LR__0997
0c6f4     58 00 90 FD | 	jmp	#LR__0998
0c6f8     88 00 90 FD | 	jmp	#LR__0999
0c6fc     B8 00 90 FD | 	jmp	#LR__1000
0c700     10 01 90 FD | 	jmp	#LR__1001
0c704     68 01 90 FD | 	jmp	#LR__1002
0c708     98 01 90 FD | 	jmp	#LR__1003
0c70c     C8 01 90 FD | 	jmp	#LR__1004
0c710     F8 01 90 FD | 	jmp	#LR__1005
0c714     28 02 90 FD | 	jmp	#LR__1006
0c718     58 02 90 FD | 	jmp	#LR__1007
0c71c     88 02 90 FD | 	jmp	#LR__1008
0c720     B8 02 90 FD | 	jmp	#LR__1009
0c724                 | LR__0997
0c724     A7 12 02 F6 | 	mov	arg01, fp
0c728     30 4E 05 F1 | 	add	fp, #48
0c72c     A7 14 02 FB | 	rdlong	arg02, fp
0c730     30 4E 85 F1 | 	sub	fp, #48
0c734     0C 16 06 F6 | 	mov	arg03, #12
0c738     0B 00 00 FF 
0c73c     C0 E4 05 F1 | 	add	objptr, ##5824
0c740     C4 B3 B0 FD | 	call	#_psram_spin2_write
0c744     0B 00 00 FF 
0c748     C0 E4 85 F1 | 	sub	objptr, ##5824
0c74c     94 02 90 FD | 	jmp	#LR__1010
0c750                 | LR__0998
0c750     30 4E 05 F1 | 	add	fp, #48
0c754     A7 12 02 FB | 	rdlong	arg01, fp
0c758     30 4E 85 F1 | 	sub	fp, #48
0c75c     A7 14 02 FB | 	rdlong	arg02, fp
0c760     01 16 06 F6 | 	mov	arg03, #1
0c764     00 18 06 F6 | 	mov	arg04, #0
0c768     0B 00 00 FF 
0c76c     C0 E4 05 F1 | 	add	objptr, ##5824
0c770                 | '     return fill(addr, pattern, count, listPtr, 1)
0c770     01 1A 06 F6 | 	mov	arg05, #1
0c774     2C B4 B0 FD | 	call	#_psram_spin2_fill
0c778     0B 00 00 FF 
0c77c     C0 E4 85 F1 | 	sub	objptr, ##5824
0c780     60 02 90 FD | 	jmp	#LR__1010
0c784                 | LR__0999
0c784     30 4E 05 F1 | 	add	fp, #48
0c788     A7 12 02 FB | 	rdlong	arg01, fp
0c78c     30 4E 85 F1 | 	sub	fp, #48
0c790     A7 14 02 FB | 	rdlong	arg02, fp
0c794     01 16 06 F6 | 	mov	arg03, #1
0c798     00 18 06 F6 | 	mov	arg04, #0
0c79c     0B 00 00 FF 
0c7a0     C0 E4 05 F1 | 	add	objptr, ##5824
0c7a4                 | '     return fill(addr, pattern, count, listPtr, 1)
0c7a4     01 1A 06 F6 | 	mov	arg05, #1
0c7a8     F8 B3 B0 FD | 	call	#_psram_spin2_fill
0c7ac     0B 00 00 FF 
0c7b0     C0 E4 85 F1 | 	sub	objptr, ##5824
0c7b4     2C 02 90 FD | 	jmp	#LR__1010
0c7b8                 | LR__1000
0c7b8     30 4E 05 F1 | 	add	fp, #48
0c7bc     A7 12 02 FB | 	rdlong	arg01, fp
0c7c0     30 4E 85 F1 | 	sub	fp, #48
0c7c4     A7 14 02 FB | 	rdlong	arg02, fp
0c7c8     01 16 06 F6 | 	mov	arg03, #1
0c7cc     00 18 06 F6 | 	mov	arg04, #0
0c7d0     0B 00 00 FF 
0c7d4     C0 E4 05 F1 | 	add	objptr, ##5824
0c7d8                 | '     return fill(addr, pattern, count, listPtr, 1)
0c7d8     01 1A 06 F6 | 	mov	arg05, #1
0c7dc     C4 B3 B0 FD | 	call	#_psram_spin2_fill
0c7e0     30 4E 05 F1 | 	add	fp, #48
0c7e4     A7 12 02 FB | 	rdlong	arg01, fp
0c7e8     30 4E 85 F1 | 	sub	fp, #48
0c7ec     01 12 06 F1 | 	add	arg01, #1
0c7f0     A7 14 02 FB | 	rdlong	arg02, fp
0c7f4     08 14 46 F0 | 	shr	arg02, #8
0c7f8     01 16 06 F6 | 	mov	arg03, #1
0c7fc     00 18 06 F6 | 	mov	arg04, #0
0c800                 | '     return fill(addr, pattern, count, listPtr, 1)
0c800     01 1A 06 F6 | 	mov	arg05, #1
0c804     9C B3 B0 FD | 	call	#_psram_spin2_fill
0c808     0B 00 00 FF 
0c80c     C0 E4 85 F1 | 	sub	objptr, ##5824
0c810     D0 01 90 FD | 	jmp	#LR__1010
0c814                 | LR__1001
0c814     30 4E 05 F1 | 	add	fp, #48
0c818     A7 12 02 FB | 	rdlong	arg01, fp
0c81c     30 4E 85 F1 | 	sub	fp, #48
0c820     A7 14 02 FB | 	rdlong	arg02, fp
0c824     01 16 06 F6 | 	mov	arg03, #1
0c828     00 18 06 F6 | 	mov	arg04, #0
0c82c     0B 00 00 FF 
0c830     C0 E4 05 F1 | 	add	objptr, ##5824
0c834                 | '     return fill(addr, pattern, count, listPtr, 1)
0c834     01 1A 06 F6 | 	mov	arg05, #1
0c838     68 B3 B0 FD | 	call	#_psram_spin2_fill
0c83c     30 4E 05 F1 | 	add	fp, #48
0c840     A7 12 02 FB | 	rdlong	arg01, fp
0c844     30 4E 85 F1 | 	sub	fp, #48
0c848     01 12 06 F1 | 	add	arg01, #1
0c84c     A7 14 02 FB | 	rdlong	arg02, fp
0c850     08 14 46 F0 | 	shr	arg02, #8
0c854     01 16 06 F6 | 	mov	arg03, #1
0c858     00 18 06 F6 | 	mov	arg04, #0
0c85c                 | '     return fill(addr, pattern, count, listPtr, 1)
0c85c     01 1A 06 F6 | 	mov	arg05, #1
0c860     40 B3 B0 FD | 	call	#_psram_spin2_fill
0c864     0B 00 00 FF 
0c868     C0 E4 85 F1 | 	sub	objptr, ##5824
0c86c     74 01 90 FD | 	jmp	#LR__1010
0c870                 | LR__1002
0c870     30 4E 05 F1 | 	add	fp, #48
0c874     A7 12 02 FB | 	rdlong	arg01, fp
0c878     30 4E 85 F1 | 	sub	fp, #48
0c87c     A7 14 02 FB | 	rdlong	arg02, fp
0c880     01 16 06 F6 | 	mov	arg03, #1
0c884     00 18 06 F6 | 	mov	arg04, #0
0c888     0B 00 00 FF 
0c88c     C0 E4 05 F1 | 	add	objptr, ##5824
0c890                 | '     return fill(addr, pattern, count, listPtr, 4)
0c890     04 1A 06 F6 | 	mov	arg05, #4
0c894     0C B3 B0 FD | 	call	#_psram_spin2_fill
0c898     0B 00 00 FF 
0c89c     C0 E4 85 F1 | 	sub	objptr, ##5824
0c8a0     40 01 90 FD | 	jmp	#LR__1010
0c8a4                 | LR__1003
0c8a4     30 4E 05 F1 | 	add	fp, #48
0c8a8     A7 12 02 FB | 	rdlong	arg01, fp
0c8ac     30 4E 85 F1 | 	sub	fp, #48
0c8b0     A7 14 02 FB | 	rdlong	arg02, fp
0c8b4     01 16 06 F6 | 	mov	arg03, #1
0c8b8     00 18 06 F6 | 	mov	arg04, #0
0c8bc     0B 00 00 FF 
0c8c0     C0 E4 05 F1 | 	add	objptr, ##5824
0c8c4                 | '     return fill(addr, pattern, count, listPtr, 4)
0c8c4     04 1A 06 F6 | 	mov	arg05, #4
0c8c8     D8 B2 B0 FD | 	call	#_psram_spin2_fill
0c8cc     0B 00 00 FF 
0c8d0     C0 E4 85 F1 | 	sub	objptr, ##5824
0c8d4     0C 01 90 FD | 	jmp	#LR__1010
0c8d8                 | LR__1004
0c8d8     30 4E 05 F1 | 	add	fp, #48
0c8dc     A7 12 02 FB | 	rdlong	arg01, fp
0c8e0     30 4E 85 F1 | 	sub	fp, #48
0c8e4     A7 14 02 FB | 	rdlong	arg02, fp
0c8e8     01 16 06 F6 | 	mov	arg03, #1
0c8ec     00 18 06 F6 | 	mov	arg04, #0
0c8f0     0B 00 00 FF 
0c8f4     C0 E4 05 F1 | 	add	objptr, ##5824
0c8f8                 | '     return fill(addr, pattern, count, listPtr, 4)
0c8f8     04 1A 06 F6 | 	mov	arg05, #4
0c8fc     A4 B2 B0 FD | 	call	#_psram_spin2_fill
0c900     0B 00 00 FF 
0c904     C0 E4 85 F1 | 	sub	objptr, ##5824
0c908     D8 00 90 FD | 	jmp	#LR__1010
0c90c                 | LR__1005
0c90c     30 4E 05 F1 | 	add	fp, #48
0c910     A7 12 02 FB | 	rdlong	arg01, fp
0c914     30 4E 85 F1 | 	sub	fp, #48
0c918     A7 14 02 FB | 	rdlong	arg02, fp
0c91c     01 16 06 F6 | 	mov	arg03, #1
0c920     00 18 06 F6 | 	mov	arg04, #0
0c924     0B 00 00 FF 
0c928     C0 E4 05 F1 | 	add	objptr, ##5824
0c92c                 | '     return fill(addr, pattern, count, listPtr, 4)
0c92c     04 1A 06 F6 | 	mov	arg05, #4
0c930     70 B2 B0 FD | 	call	#_psram_spin2_fill
0c934     0B 00 00 FF 
0c938     C0 E4 85 F1 | 	sub	objptr, ##5824
0c93c     A4 00 90 FD | 	jmp	#LR__1010
0c940                 | LR__1006
0c940     30 4E 05 F1 | 	add	fp, #48
0c944     A7 12 02 FB | 	rdlong	arg01, fp
0c948     30 4E 85 F1 | 	sub	fp, #48
0c94c     A7 14 02 FB | 	rdlong	arg02, fp
0c950     01 16 06 F6 | 	mov	arg03, #1
0c954     00 18 06 F6 | 	mov	arg04, #0
0c958     0B 00 00 FF 
0c95c     C0 E4 05 F1 | 	add	objptr, ##5824
0c960                 | '     return fill(addr, pattern, count, listPtr, 4)
0c960     04 1A 06 F6 | 	mov	arg05, #4
0c964     3C B2 B0 FD | 	call	#_psram_spin2_fill
0c968     0B 00 00 FF 
0c96c     C0 E4 85 F1 | 	sub	objptr, ##5824
0c970     70 00 90 FD | 	jmp	#LR__1010
0c974                 | LR__1007
0c974     30 4E 05 F1 | 	add	fp, #48
0c978     A7 12 02 FB | 	rdlong	arg01, fp
0c97c     30 4E 85 F1 | 	sub	fp, #48
0c980     A7 14 02 FB | 	rdlong	arg02, fp
0c984     01 16 06 F6 | 	mov	arg03, #1
0c988     00 18 06 F6 | 	mov	arg04, #0
0c98c     0B 00 00 FF 
0c990     C0 E4 05 F1 | 	add	objptr, ##5824
0c994                 | '     return fill(addr, pattern, count, listPtr, 4)
0c994     04 1A 06 F6 | 	mov	arg05, #4
0c998     08 B2 B0 FD | 	call	#_psram_spin2_fill
0c99c     0B 00 00 FF 
0c9a0     C0 E4 85 F1 | 	sub	objptr, ##5824
0c9a4     3C 00 90 FD | 	jmp	#LR__1010
0c9a8                 | LR__1008
0c9a8     30 4E 05 F1 | 	add	fp, #48
0c9ac     A7 12 02 FB | 	rdlong	arg01, fp
0c9b0     30 4E 85 F1 | 	sub	fp, #48
0c9b4     A7 14 02 FB | 	rdlong	arg02, fp
0c9b8     01 16 06 F6 | 	mov	arg03, #1
0c9bc     00 18 06 F6 | 	mov	arg04, #0
0c9c0     0B 00 00 FF 
0c9c4     C0 E4 05 F1 | 	add	objptr, ##5824
0c9c8                 | '     return fill(addr, pattern, count, listPtr, 4)
0c9c8     04 1A 06 F6 | 	mov	arg05, #4
0c9cc     D4 B1 B0 FD | 	call	#_psram_spin2_fill
0c9d0     0B 00 00 FF 
0c9d4     C0 E4 85 F1 | 	sub	objptr, ##5824
0c9d8     08 00 90 FD | 	jmp	#LR__1010
0c9dc                 | LR__1009
0c9dc     2F 12 06 F6 | 	mov	arg01, #47
0c9e0     54 86 B0 FD | 	call	#_printerror
0c9e4                 | LR__1010
0c9e4                 | LR__1011
0c9e4     A7 F0 03 F6 | 	mov	ptra, fp
0c9e8     B2 00 A0 FD | 	call	#popregs_
0c9ec                 | _do_assign_ret
0c9ec     2D 00 64 FD | 	ret
0c9f0                 | 
0c9f0                 | ' 
0c9f0                 | ' 
0c9f0                 | ' ' --------------------- Read a variable and push to the stack
0c9f0                 | ' 
0c9f0                 | ' ' getvar : fun_getvar, var#, numpar. Var, if array, has array type and a pointer
0c9f0                 | ' 
0c9f0                 | ' sub do_getvar
0c9f0                 | _do_getvar
0c9f0     04 4A 05 F6 | 	mov	COUNT_, #4
0c9f4     A8 00 A0 FD | 	call	#pushregs_
0c9f8     3C F0 07 F1 | 	add	ptra, #60
0c9fc                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
0c9fc                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
0c9fc     69 00 00 FF 
0ca00     54 E4 05 F1 | 	add	objptr, ##53844
0ca04     F2 1E 02 FB | 	rdlong	local01, objptr
0ca08     0F 17 02 F6 | 	mov	arg03, local01
0ca0c     01 16 66 F0 | 	shl	arg03, #1
0ca10     0F 17 02 F1 | 	add	arg03, local01
0ca14     02 16 66 F0 | 	shl	arg03, #2
0ca18     03 00 00 FF 
0ca1c     04 E4 85 F1 | 	sub	objptr, ##1540
0ca20     F2 16 02 F1 | 	add	arg03, objptr
0ca24     04 16 06 F1 | 	add	arg03, #4
0ca28     0B 17 0A FB | 	rdlong	arg03, arg03 wz
0ca2c     66 00 00 FF 
0ca30     50 E4 85 F1 | 	sub	objptr, ##52304
0ca34     C4 00 90 5D |  if_ne	jmp	#LR__1021
0ca38     69 00 00 FF 
0ca3c     54 E4 05 F1 | 	add	objptr, ##53844
0ca40     F2 1E 02 FB | 	rdlong	local01, objptr
0ca44     0F 13 02 F6 | 	mov	arg01, local01
0ca48     01 12 66 F0 | 	shl	arg01, #1
0ca4c     0F 13 02 F1 | 	add	arg01, local01
0ca50     02 12 66 F0 | 	shl	arg01, #2
0ca54     03 00 00 FF 
0ca58     04 E4 85 F1 | 	sub	objptr, ##1540
0ca5c     F2 12 02 F1 | 	add	arg01, objptr
0ca60     09 1F 02 FB | 	rdlong	local01, arg01
0ca64     04 1E 66 F0 | 	shl	local01, #4
0ca68     32 00 00 FF 
0ca6c     74 E4 85 F1 | 	sub	objptr, ##25716
0ca70     F2 1E 02 F1 | 	add	local01, objptr
0ca74     04 1E 06 F1 | 	add	local01, #4
0ca78     0F 13 02 FB | 	rdlong	arg01, local01
0ca7c     04 1E 06 F1 | 	add	local01, #4
0ca80     0F 1F 02 FB | 	rdlong	local01, local01
0ca84     A7 12 62 FC | 	wrlong	arg01, fp
0ca88     04 4E 05 F1 | 	add	fp, #4
0ca8c     A7 1E 62 FC | 	wrlong	local01, fp
0ca90     35 00 00 FF 
0ca94     78 E4 05 F1 | 	add	objptr, ##27256
0ca98     F2 1E 02 FB | 	rdlong	local01, objptr
0ca9c     0F 13 02 F6 | 	mov	arg01, local01
0caa0     01 12 66 F0 | 	shl	arg01, #1
0caa4     0F 13 02 F1 | 	add	arg01, local01
0caa8     02 12 66 F0 | 	shl	arg01, #2
0caac     03 00 00 FF 
0cab0     04 E4 85 F1 | 	sub	objptr, ##1540
0cab4     F2 12 02 F1 | 	add	arg01, objptr
0cab8     09 1F 02 FB | 	rdlong	local01, arg01
0cabc     04 1E 66 F0 | 	shl	local01, #4
0cac0     32 00 00 FF 
0cac4     74 E4 85 F1 | 	sub	objptr, ##25716
0cac8     F2 1E 02 F1 | 	add	local01, objptr
0cacc     0C 1E 06 F1 | 	add	local01, #12
0cad0     0F 1F 02 FB | 	rdlong	local01, local01
0cad4     04 4E 05 F1 | 	add	fp, #4
0cad8     A7 1E 62 FC | 	wrlong	local01, fp
0cadc                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
0cadc                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
0cadc                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
0cadc     08 4E 85 F1 | 	sub	fp, #8
0cae0     00 1F 16 F2 | 	cmp	local01, #256 wc
0cae4     33 00 00 FF 
0cae8     DC E5 85 F1 | 	sub	objptr, ##26588
0caec     0C 00 90 3D |  if_ae	jmp	#LR__1020
0caf0     A7 12 02 F6 | 	mov	arg01, fp
0caf4     64 C7 BF FD | 	call	#_push
0caf8     88 04 90 FD | 	jmp	#LR__1042
0cafc                 | LR__1020
0cafc                 | LR__1021
0cafc     69 00 00 FF 
0cb00     54 E4 05 F1 | 	add	objptr, ##53844
0cb04     F2 16 02 FB | 	rdlong	arg03, objptr
0cb08     0B 15 02 F6 | 	mov	arg02, arg03
0cb0c     01 14 66 F0 | 	shl	arg02, #1
0cb10     0B 15 02 F1 | 	add	arg02, arg03
0cb14     02 14 66 F0 | 	shl	arg02, #2
0cb18     03 00 00 FF 
0cb1c     04 E4 85 F1 | 	sub	objptr, ##1540
0cb20     F2 14 02 F1 | 	add	arg02, objptr
0cb24     0A 17 02 FB | 	rdlong	arg03, arg02
0cb28     04 16 66 F0 | 	shl	arg03, #4
0cb2c     32 00 00 FF 
0cb30     74 E4 85 F1 | 	sub	objptr, ##25716
0cb34     F2 16 02 F1 | 	add	arg03, objptr
0cb38     04 16 06 F1 | 	add	arg03, #4
0cb3c     0B 13 02 FB | 	rdlong	arg01, arg03
0cb40     0C 4E 05 F1 | 	add	fp, #12
0cb44     A7 12 62 FC | 	wrlong	arg01, fp
0cb48     0C 4E 85 F1 | 	sub	fp, #12
0cb4c     33 00 00 FF 
0cb50     DC E5 85 F1 | 	sub	objptr, ##26588
0cb54     9C 86 B0 FD | 	call	#_pslpeek
0cb58     FD FA 31 F9 | 	getword	result1, result1, #0
0cb5c     10 4E 05 F1 | 	add	fp, #16
0cb60     A7 FA 61 FC | 	wrlong	result1, fp
0cb64     69 00 00 FF 
0cb68     54 E4 05 F1 | 	add	objptr, ##53844
0cb6c     F2 16 02 FB | 	rdlong	arg03, objptr
0cb70     0B 15 02 F6 | 	mov	arg02, arg03
0cb74     01 14 66 F0 | 	shl	arg02, #1
0cb78     0B 15 02 F1 | 	add	arg02, arg03
0cb7c     02 14 66 F0 | 	shl	arg02, #2
0cb80     03 00 00 FF 
0cb84     04 E4 85 F1 | 	sub	objptr, ##1540
0cb88     F2 14 02 F1 | 	add	arg02, objptr
0cb8c     04 14 06 F1 | 	add	arg02, #4
0cb90     0A 17 02 FB | 	rdlong	arg03, arg02
0cb94     04 4E 05 F1 | 	add	fp, #4
0cb98     A7 16 62 FC | 	wrlong	arg03, fp
0cb9c     08 4E 85 F1 | 	sub	fp, #8
0cba0     A7 12 02 FB | 	rdlong	arg01, fp
0cba4     0C 4E 85 F1 | 	sub	fp, #12
0cba8     02 12 06 F1 | 	add	arg01, #2
0cbac     66 00 00 FF 
0cbb0     50 E4 85 F1 | 	sub	objptr, ##52304
0cbb4     E4 85 B0 FD | 	call	#_pspeek
0cbb8     FD FA E1 F8 | 	getbyte	result1, result1, #0
0cbbc     18 4E 05 F1 | 	add	fp, #24
0cbc0     A7 FA 61 FC | 	wrlong	result1, fp
0cbc4     0C 4E 85 F1 | 	sub	fp, #12
0cbc8     A7 12 02 FB | 	rdlong	arg01, fp
0cbcc     0C 4E 85 F1 | 	sub	fp, #12
0cbd0     04 12 06 F1 | 	add	arg01, #4
0cbd4     1C 86 B0 FD | 	call	#_pslpeek
0cbd8     1C 4E 05 F1 | 	add	fp, #28
0cbdc     A7 FA 61 FC | 	wrlong	result1, fp
0cbe0     10 4E 85 F1 | 	sub	fp, #16
0cbe4     A7 12 02 FB | 	rdlong	arg01, fp
0cbe8     0C 4E 85 F1 | 	sub	fp, #12
0cbec     08 12 06 F1 | 	add	arg01, #8
0cbf0     00 86 B0 FD | 	call	#_pslpeek
0cbf4     20 4E 05 F1 | 	add	fp, #32
0cbf8     A7 FA 61 FC | 	wrlong	result1, fp
0cbfc     14 4E 85 F1 | 	sub	fp, #20
0cc00     A7 12 02 FB | 	rdlong	arg01, fp
0cc04     0C 4E 85 F1 | 	sub	fp, #12
0cc08     0C 12 06 F1 | 	add	arg01, #12
0cc0c     E4 85 B0 FD | 	call	#_pslpeek
0cc10     24 4E 05 F1 | 	add	fp, #36
0cc14     A7 FA 61 FC | 	wrlong	result1, fp
0cc18                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
0cc18                 | ' esize=pspeek(arrptr+2)
0cc18                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
0cc18                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
0cc18                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
0cc18                 | ' if numpar>2 then t1=pop() : i3=t1.result.uresult   else i3=0 
0cc18     10 4E 85 F1 | 	sub	fp, #16
0cc1c     A7 16 02 FB | 	rdlong	arg03, fp
0cc20     14 4E 85 F1 | 	sub	fp, #20
0cc24     03 16 16 F2 | 	cmp	arg03, #3 wc
0cc28     30 00 90 CD |  if_b	jmp	#LR__1022
0cc2c     94 C5 BF FD | 	call	#_pop
0cc30     A7 FA 61 FC | 	wrlong	result1, fp
0cc34     04 4E 05 F1 | 	add	fp, #4
0cc38     A7 FC 61 FC | 	wrlong	result2, fp
0cc3c     04 4E 05 F1 | 	add	fp, #4
0cc40     A7 FE 61 FC | 	wrlong	result3, fp
0cc44     08 4E 85 F1 | 	sub	fp, #8
0cc48     A7 16 02 FB | 	rdlong	arg03, fp
0cc4c     30 4E 05 F1 | 	add	fp, #48
0cc50     A7 16 62 FC | 	wrlong	arg03, fp
0cc54     30 4E 85 F1 | 	sub	fp, #48
0cc58     0C 00 90 FD | 	jmp	#LR__1023
0cc5c                 | LR__1022
0cc5c     30 4E 05 F1 | 	add	fp, #48
0cc60     A7 00 68 FC | 	wrlong	#0, fp
0cc64     30 4E 85 F1 | 	sub	fp, #48
0cc68                 | LR__1023
0cc68                 | ' if numpar>1 then t1=pop() : i2=t1.result.uresult   else i2=0 
0cc68     14 4E 05 F1 | 	add	fp, #20
0cc6c     A7 16 02 FB | 	rdlong	arg03, fp
0cc70     14 4E 85 F1 | 	sub	fp, #20
0cc74     02 16 16 F2 | 	cmp	arg03, #2 wc
0cc78     30 00 90 CD |  if_b	jmp	#LR__1024
0cc7c     44 C5 BF FD | 	call	#_pop
0cc80     A7 FA 61 FC | 	wrlong	result1, fp
0cc84     04 4E 05 F1 | 	add	fp, #4
0cc88     A7 FC 61 FC | 	wrlong	result2, fp
0cc8c     04 4E 05 F1 | 	add	fp, #4
0cc90     A7 FE 61 FC | 	wrlong	result3, fp
0cc94     08 4E 85 F1 | 	sub	fp, #8
0cc98     A7 16 02 FB | 	rdlong	arg03, fp
0cc9c     2C 4E 05 F1 | 	add	fp, #44
0cca0     A7 16 62 FC | 	wrlong	arg03, fp
0cca4     2C 4E 85 F1 | 	sub	fp, #44
0cca8     0C 00 90 FD | 	jmp	#LR__1025
0ccac                 | LR__1024
0ccac     2C 4E 05 F1 | 	add	fp, #44
0ccb0     A7 00 68 FC | 	wrlong	#0, fp
0ccb4     2C 4E 85 F1 | 	sub	fp, #44
0ccb8                 | LR__1025
0ccb8                 | ' if numpar>0 then t1=pop() : i1=t1.result.uresult   else i1=0 
0ccb8     14 4E 05 F1 | 	add	fp, #20
0ccbc     A7 16 02 FB | 	rdlong	arg03, fp
0ccc0     14 4E 85 F1 | 	sub	fp, #20
0ccc4     01 16 16 F2 | 	cmp	arg03, #1 wc
0ccc8     30 00 90 CD |  if_b	jmp	#LR__1026
0cccc     F4 C4 BF FD | 	call	#_pop
0ccd0     A7 FA 61 FC | 	wrlong	result1, fp
0ccd4     04 4E 05 F1 | 	add	fp, #4
0ccd8     A7 FC 61 FC | 	wrlong	result2, fp
0ccdc     04 4E 05 F1 | 	add	fp, #4
0cce0     A7 FE 61 FC | 	wrlong	result3, fp
0cce4     08 4E 85 F1 | 	sub	fp, #8
0cce8     A7 16 02 FB | 	rdlong	arg03, fp
0ccec     28 4E 05 F1 | 	add	fp, #40
0ccf0     A7 16 62 FC | 	wrlong	arg03, fp
0ccf4     28 4E 85 F1 | 	sub	fp, #40
0ccf8     0C 00 90 FD | 	jmp	#LR__1027
0ccfc                 | LR__1026
0ccfc     28 4E 05 F1 | 	add	fp, #40
0cd00     A7 00 68 FC | 	wrlong	#0, fp
0cd04     28 4E 85 F1 | 	sub	fp, #40
0cd08                 | LR__1027
0cd08     0C 4E 05 F1 | 	add	fp, #12
0cd0c     A7 20 02 FB | 	rdlong	local02, fp
0cd10     1C 4E 05 F1 | 	add	fp, #28
0cd14     A7 22 02 FB | 	rdlong	local03, fp
0cd18     04 4E 05 F1 | 	add	fp, #4
0cd1c     A7 FE 01 FB | 	rdlong	result3, fp
0cd20     10 4E 85 F1 | 	sub	fp, #16
0cd24     A7 FC 01 FB | 	rdlong	result2, fp
0cd28     FE FE 01 FD | 	qmul	result3, result2
0cd2c     10 20 06 F1 | 	add	local02, #16
0cd30     14 4E 05 F1 | 	add	fp, #20
0cd34     A7 FE 01 FB | 	rdlong	result3, fp
0cd38     18 FA 61 FD | 	getqx	result1
0cd3c     FE FE 01 FD | 	qmul	result3, result2
0cd40     FD 22 02 F1 | 	add	local03, result1
0cd44     10 4E 85 F1 | 	sub	fp, #16
0cd48     A7 FC 01 FB | 	rdlong	result2, fp
0cd4c     18 FE 61 FD | 	getqx	result3
0cd50     FE FE 01 FD | 	qmul	result3, result2
0cd54     08 4E 85 F1 | 	sub	fp, #8
0cd58     A7 FC 01 FB | 	rdlong	result2, fp
0cd5c     18 FE 61 FD | 	getqx	result3
0cd60     FF 22 02 F1 | 	add	local03, result3
0cd64     FE 22 02 FD | 	qmul	local03, result2
0cd68     1C 4E 05 F1 | 	add	fp, #28
0cd6c                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
0cd6c                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize ': print "arrptr=",arrptr,"varidx=",varidx,"memtop=",memtop,"bufptr=",v.buf_ptr
0cd6c                 | ' 
0cd6c                 | ' select case vartype
0cd6c     18 FE 61 FD | 	getqx	result3
0cd70     FF 20 02 F1 | 	add	local02, result3
0cd74     A7 20 62 FC | 	wrlong	local02, fp
0cd78     24 4E 85 F1 | 	sub	fp, #36
0cd7c     A7 24 02 FB | 	rdlong	local04, fp
0cd80     10 4E 85 F1 | 	sub	fp, #16
0cd84     00 25 86 F1 | 	sub	local04, #256
0cd88     0C 24 26 F3 | 	fle	local04, #12
0cd8c     30 24 62 FD | 	jmprel	local04
0cd90                 | LR__1028
0cd90     30 00 90 FD | 	jmp	#LR__1029
0cd94     58 00 90 FD | 	jmp	#LR__1030
0cd98     8C 00 90 FD | 	jmp	#LR__1031
0cd9c     AC 00 90 FD | 	jmp	#LR__1032
0cda0     E8 00 90 FD | 	jmp	#LR__1033
0cda4     08 01 90 FD | 	jmp	#LR__1034
0cda8     24 01 90 FD | 	jmp	#LR__1035
0cdac     40 01 90 FD | 	jmp	#LR__1036
0cdb0     50 01 90 FD | 	jmp	#LR__1037
0cdb4     60 01 90 FD | 	jmp	#LR__1038
0cdb8     7C 01 90 FD | 	jmp	#LR__1039
0cdbc     8C 01 90 FD | 	jmp	#LR__1040
0cdc0     B8 01 90 FD | 	jmp	#LR__1041
0cdc4                 | LR__1029
0cdc4     A7 12 02 F6 | 	mov	arg01, fp
0cdc8     34 4E 05 F1 | 	add	fp, #52
0cdcc     A7 14 02 FB | 	rdlong	arg02, fp
0cdd0     34 4E 85 F1 | 	sub	fp, #52
0cdd4     0C 16 06 F6 | 	mov	arg03, #12
0cdd8     0B 00 00 FF 
0cddc     C0 E4 05 F1 | 	add	objptr, ##5824
0cde0     88 AC B0 FD | 	call	#_psram_spin2_read1
0cde4     0B 00 00 FF 
0cde8     C0 E4 85 F1 | 	sub	objptr, ##5824
0cdec     8C 01 90 FD | 	jmp	#LR__1041
0cdf0                 | LR__1030
0cdf0     08 4E 05 F1 | 	add	fp, #8
0cdf4     A7 38 68 FC | 	wrlong	#28, fp
0cdf8     2C 4E 05 F1 | 	add	fp, #44
0cdfc     A7 12 02 FB | 	rdlong	arg01, fp
0ce00     34 4E 85 F1 | 	sub	fp, #52
0ce04     94 83 B0 FD | 	call	#_pspeek
0ce08     FD FA E1 F8 | 	getbyte	result1, result1, #0
0ce0c     A7 FA 61 FC | 	wrlong	result1, fp
0ce10     80 FA 15 F2 | 	cmp	result1, #128 wc
0ce14     00 1F 66 36 |  if_ae	neg	local01, #256
0ce18     A7 22 02 3B |  if_ae	rdlong	local03, fp
0ce1c     11 1F 42 35 |  if_ae	or	local01, local03
0ce20     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0ce24     54 01 90 FD | 	jmp	#LR__1041
0ce28                 | LR__1031
0ce28     08 4E 05 F1 | 	add	fp, #8
0ce2c     A7 3A 68 FC | 	wrlong	#29, fp
0ce30     2C 4E 05 F1 | 	add	fp, #44
0ce34     A7 12 02 FB | 	rdlong	arg01, fp
0ce38     34 4E 85 F1 | 	sub	fp, #52
0ce3c     5C 83 B0 FD | 	call	#_pspeek
0ce40     FD FA E1 F8 | 	getbyte	result1, result1, #0
0ce44     A7 FA 61 FC | 	wrlong	result1, fp
0ce48     30 01 90 FD | 	jmp	#LR__1041
0ce4c                 | LR__1032
0ce4c     08 4E 05 F1 | 	add	fp, #8
0ce50     A7 38 68 FC | 	wrlong	#28, fp
0ce54     2C 4E 05 F1 | 	add	fp, #44
0ce58     A7 12 02 FB | 	rdlong	arg01, fp
0ce5c     34 4E 85 F1 | 	sub	fp, #52
0ce60     90 83 B0 FD | 	call	#_pslpeek
0ce64     FD FA 31 F9 | 	getword	result1, result1, #0
0ce68     A7 FA 61 FC | 	wrlong	result1, fp
0ce6c     40 00 00 FF 
0ce70     00 FA 15 F2 | 	cmp	result1, ##32768 wc
0ce74     FF 7F 00 3F 
0ce78     00 1F 06 36 |  if_ae	mov	local01, ##16776960
0ce7c     A7 22 02 3B |  if_ae	rdlong	local03, fp
0ce80     11 1F 42 35 |  if_ae	or	local01, local03
0ce84     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0ce88     F0 00 90 FD | 	jmp	#LR__1041
0ce8c                 | LR__1033
0ce8c     08 4E 05 F1 | 	add	fp, #8
0ce90     A7 3A 68 FC | 	wrlong	#29, fp
0ce94     2C 4E 05 F1 | 	add	fp, #44
0ce98     A7 12 02 FB | 	rdlong	arg01, fp
0ce9c     34 4E 85 F1 | 	sub	fp, #52
0cea0     50 83 B0 FD | 	call	#_pslpeek
0cea4     FD FA 31 F9 | 	getword	result1, result1, #0
0cea8     A7 FA 61 FC | 	wrlong	result1, fp
0ceac     CC 00 90 FD | 	jmp	#LR__1041
0ceb0                 | LR__1034
0ceb0     08 4E 05 F1 | 	add	fp, #8
0ceb4     A7 38 68 FC | 	wrlong	#28, fp
0ceb8     2C 4E 05 F1 | 	add	fp, #44
0cebc     A7 12 02 FB | 	rdlong	arg01, fp
0cec0     34 4E 85 F1 | 	sub	fp, #52
0cec4     2C 83 B0 FD | 	call	#_pslpeek
0cec8     A7 FA 61 FC | 	wrlong	result1, fp
0cecc     AC 00 90 FD | 	jmp	#LR__1041
0ced0                 | LR__1035
0ced0     08 4E 05 F1 | 	add	fp, #8
0ced4     A7 3A 68 FC | 	wrlong	#29, fp
0ced8     2C 4E 05 F1 | 	add	fp, #44
0cedc     A7 12 02 FB | 	rdlong	arg01, fp
0cee0     34 4E 85 F1 | 	sub	fp, #52
0cee4     0C 83 B0 FD | 	call	#_pslpeek
0cee8     A7 FA 61 FC | 	wrlong	result1, fp
0ceec     8C 00 90 FD | 	jmp	#LR__1041
0cef0                 | LR__1036
0cef0     08 4E 05 F1 | 	add	fp, #8
0cef4     A7 FE 69 FC | 	wrlong	#255, fp
0cef8     08 4E 85 F1 | 	sub	fp, #8
0cefc     A7 60 68 FC | 	wrlong	#48, fp
0cf00     78 00 90 FD | 	jmp	#LR__1041
0cf04                 | LR__1037
0cf04     08 4E 05 F1 | 	add	fp, #8
0cf08     A7 FE 69 FC | 	wrlong	#255, fp
0cf0c     08 4E 85 F1 | 	sub	fp, #8
0cf10     A7 60 68 FC | 	wrlong	#48, fp
0cf14     64 00 90 FD | 	jmp	#LR__1041
0cf18                 | LR__1038
0cf18     08 4E 05 F1 | 	add	fp, #8
0cf1c     A7 3C 68 FC | 	wrlong	#30, fp
0cf20     2C 4E 05 F1 | 	add	fp, #44
0cf24     A7 12 02 FB | 	rdlong	arg01, fp
0cf28     34 4E 85 F1 | 	sub	fp, #52
0cf2c     C4 82 B0 FD | 	call	#_pslpeek
0cf30     A7 FA 61 FC | 	wrlong	result1, fp
0cf34     44 00 90 FD | 	jmp	#LR__1041
0cf38                 | LR__1039
0cf38     08 4E 05 F1 | 	add	fp, #8
0cf3c     A7 FE 69 FC | 	wrlong	#255, fp
0cf40     08 4E 85 F1 | 	sub	fp, #8
0cf44     A7 60 68 FC | 	wrlong	#48, fp
0cf48     30 00 90 FD | 	jmp	#LR__1041
0cf4c                 | LR__1040
0cf4c     08 4E 05 F1 | 	add	fp, #8
0cf50     A7 3E 68 FC | 	wrlong	#31, fp
0cf54     2C 4E 05 F1 | 	add	fp, #44
0cf58     A7 12 02 FB | 	rdlong	arg01, fp
0cf5c     34 4E 85 F1 | 	sub	fp, #52
0cf60     90 82 B0 FD | 	call	#_pslpeek
0cf64     A7 FA 61 FC | 	wrlong	result1, fp
0cf68     00 04 00 FF 
0cf6c     00 FA 15 F2 | 	cmp	result1, ##524288 wc
0cf70     08 4E 05 31 |  if_ae	add	fp, #8
0cf74     A7 56 68 3C |  if_ae	wrlong	#43, fp
0cf78     08 4E 85 31 |  if_ae	sub	fp, #8
0cf7c                 | LR__1041
0cf7c     A7 12 02 F6 | 	mov	arg01, fp
0cf80     D8 C2 BF FD | 	call	#_push
0cf84                 | LR__1042
0cf84     A7 F0 03 F6 | 	mov	ptra, fp
0cf88     B2 00 A0 FD | 	call	#popregs_
0cf8c                 | _do_getvar_ret
0cf8c     2D 00 64 FD | 	ret
0cf90                 | 
0cf90                 | ' 
0cf90                 | ' '------------------------ Operators 
0cf90                 | ' 
0cf90                 | ' sub do_plus 
0cf90                 | _do_plus
0cf90     05 4A 05 F6 | 	mov	COUNT_, #5
0cf94     A8 00 A0 FD | 	call	#pushregs_
0cf98     18 F0 07 F1 | 	add	ptra, #24
0cf9c     24 C2 BF FD | 	call	#_pop
0cfa0     FD 1E 02 F6 | 	mov	local01, result1
0cfa4     FE 20 02 F6 | 	mov	local02, result2
0cfa8     FF 22 02 F6 | 	mov	local03, result3
0cfac     0C 4E 05 F1 | 	add	fp, #12
0cfb0     A7 1E 62 FC | 	wrlong	local01, fp
0cfb4     04 4E 05 F1 | 	add	fp, #4
0cfb8     A7 20 62 FC | 	wrlong	local02, fp
0cfbc     04 4E 05 F1 | 	add	fp, #4
0cfc0     A7 22 62 FC | 	wrlong	local03, fp
0cfc4     14 4E 85 F1 | 	sub	fp, #20
0cfc8     F8 C1 BF FD | 	call	#_pop
0cfcc     FF 22 02 F6 | 	mov	local03, result3
0cfd0     A7 FA 61 FC | 	wrlong	result1, fp
0cfd4     04 4E 05 F1 | 	add	fp, #4
0cfd8     A7 FC 61 FC | 	wrlong	result2, fp
0cfdc     04 4E 05 F1 | 	add	fp, #4
0cfe0     A7 22 62 FC | 	wrlong	local03, fp
0cfe4                 | ' 
0cfe4                 | ' t2=pop()
0cfe4                 | ' t1=pop()
0cfe4                 | ' 
0cfe4                 | ' 
0cfe4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
0cfe4     08 4E 85 F1 | 	sub	fp, #8
0cfe8     1D 22 0E F2 | 	cmp	local03, #29 wz
0cfec     14 4E 05 A1 |  if_e	add	fp, #20
0cff0     A7 24 02 AB |  if_e	rdlong	local04, fp
0cff4     14 4E 85 A1 |  if_e	sub	fp, #20
0cff8     12 23 02 A6 |  if_e	mov	local03, local04
0cffc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d000     1C 00 90 5D |  if_ne	jmp	#LR__1050
0d004     A7 1E 02 FB | 	rdlong	local01, fp
0d008     0C 4E 05 F1 | 	add	fp, #12
0d00c     A7 20 02 FB | 	rdlong	local02, fp
0d010     0C 4E 85 F1 | 	sub	fp, #12
0d014     10 1F 02 F1 | 	add	local01, local02
0d018     A7 1E 62 FC | 	wrlong	local01, fp
0d01c     48 04 90 FD | 	jmp	#LR__1065
0d020                 | LR__1050
0d020                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
0d020     08 4E 05 F1 | 	add	fp, #8
0d024     A7 1E 02 FB | 	rdlong	local01, fp
0d028     08 4E 85 F1 | 	sub	fp, #8
0d02c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d030     14 4E 05 A1 |  if_e	add	fp, #20
0d034     A7 24 02 AB |  if_e	rdlong	local04, fp
0d038     14 4E 85 A1 |  if_e	sub	fp, #20
0d03c     12 23 02 A6 |  if_e	mov	local03, local04
0d040     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d044     28 00 90 5D |  if_ne	jmp	#LR__1051
0d048     A7 1E 02 FB | 	rdlong	local01, fp
0d04c     0C 4E 05 F1 | 	add	fp, #12
0d050     A7 20 02 FB | 	rdlong	local02, fp
0d054     0C 4E 85 F1 | 	sub	fp, #12
0d058     10 1F 02 F1 | 	add	local01, local02
0d05c     A7 1E 62 FC | 	wrlong	local01, fp
0d060     08 4E 05 F1 | 	add	fp, #8
0d064     A7 38 68 FC | 	wrlong	#28, fp
0d068     08 4E 85 F1 | 	sub	fp, #8
0d06c     F8 03 90 FD | 	jmp	#LR__1065
0d070                 | LR__1051
0d070                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0d070     08 4E 05 F1 | 	add	fp, #8
0d074     A7 1E 02 FB | 	rdlong	local01, fp
0d078     08 4E 85 F1 | 	sub	fp, #8
0d07c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d080     14 4E 05 A1 |  if_e	add	fp, #20
0d084     A7 24 02 AB |  if_e	rdlong	local04, fp
0d088     14 4E 85 A1 |  if_e	sub	fp, #20
0d08c     12 23 02 A6 |  if_e	mov	local03, local04
0d090     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d094     30 00 90 5D |  if_ne	jmp	#LR__1052
0d098     A7 12 02 FB | 	rdlong	arg01, fp
0d09c     9C DA B0 FD | 	call	#__system___float_fromuns
0d0a0     FD 12 02 F6 | 	mov	arg01, result1
0d0a4     0C 4E 05 F1 | 	add	fp, #12
0d0a8     A7 14 02 FB | 	rdlong	arg02, fp
0d0ac     0C 4E 85 F1 | 	sub	fp, #12
0d0b0     BC DA B0 FD | 	call	#__system___float_add
0d0b4     A7 FA 61 FC | 	wrlong	result1, fp
0d0b8     08 4E 05 F1 | 	add	fp, #8
0d0bc     A7 3C 68 FC | 	wrlong	#30, fp
0d0c0     08 4E 85 F1 | 	sub	fp, #8
0d0c4     A0 03 90 FD | 	jmp	#LR__1065
0d0c8                 | LR__1052
0d0c8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
0d0c8     08 4E 05 F1 | 	add	fp, #8
0d0cc     A7 1E 02 FB | 	rdlong	local01, fp
0d0d0     08 4E 85 F1 | 	sub	fp, #8
0d0d4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d0d8     14 4E 05 A1 |  if_e	add	fp, #20
0d0dc     A7 24 02 AB |  if_e	rdlong	local04, fp
0d0e0     14 4E 85 A1 |  if_e	sub	fp, #20
0d0e4     12 23 02 A6 |  if_e	mov	local03, local04
0d0e8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d0ec     1C 00 90 5D |  if_ne	jmp	#LR__1053
0d0f0     A7 1E 02 FB | 	rdlong	local01, fp
0d0f4     0C 4E 05 F1 | 	add	fp, #12
0d0f8     A7 20 02 FB | 	rdlong	local02, fp
0d0fc     0C 4E 85 F1 | 	sub	fp, #12
0d100     10 1F 02 F1 | 	add	local01, local02
0d104     A7 1E 62 FC | 	wrlong	local01, fp
0d108     5C 03 90 FD | 	jmp	#LR__1065
0d10c                 | LR__1053
0d10c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
0d10c     08 4E 05 F1 | 	add	fp, #8
0d110     A7 1E 02 FB | 	rdlong	local01, fp
0d114     08 4E 85 F1 | 	sub	fp, #8
0d118     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d11c     14 4E 05 A1 |  if_e	add	fp, #20
0d120     A7 24 02 AB |  if_e	rdlong	local04, fp
0d124     14 4E 85 A1 |  if_e	sub	fp, #20
0d128     12 23 02 A6 |  if_e	mov	local03, local04
0d12c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d130     1C 00 90 5D |  if_ne	jmp	#LR__1054
0d134     A7 1E 02 FB | 	rdlong	local01, fp
0d138     0C 4E 05 F1 | 	add	fp, #12
0d13c     A7 20 02 FB | 	rdlong	local02, fp
0d140     0C 4E 85 F1 | 	sub	fp, #12
0d144     10 1F 02 F1 | 	add	local01, local02
0d148     A7 1E 62 FC | 	wrlong	local01, fp
0d14c     18 03 90 FD | 	jmp	#LR__1065
0d150                 | LR__1054
0d150                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0d150     08 4E 05 F1 | 	add	fp, #8
0d154     A7 1E 02 FB | 	rdlong	local01, fp
0d158     08 4E 85 F1 | 	sub	fp, #8
0d15c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d160     14 4E 05 A1 |  if_e	add	fp, #20
0d164     A7 24 02 AB |  if_e	rdlong	local04, fp
0d168     14 4E 85 A1 |  if_e	sub	fp, #20
0d16c     12 23 02 A6 |  if_e	mov	local03, local04
0d170     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d174     40 00 90 5D |  if_ne	jmp	#LR__1055
0d178     A7 12 02 FB | 	rdlong	arg01, fp
0d17c     09 13 52 F6 | 	abs	arg01, arg01 wc
0d180     1F 26 C6 C9 |  if_b	decod	local05, #31
0d184     00 26 06 36 |  if_ae	mov	local05, #0
0d188     B0 D9 B0 FD | 	call	#__system___float_fromuns
0d18c     13 FB 61 F5 | 	xor	result1, local05
0d190     FD 12 02 F6 | 	mov	arg01, result1
0d194     0C 4E 05 F1 | 	add	fp, #12
0d198     A7 14 02 FB | 	rdlong	arg02, fp
0d19c     0C 4E 85 F1 | 	sub	fp, #12
0d1a0     CC D9 B0 FD | 	call	#__system___float_add
0d1a4     A7 FA 61 FC | 	wrlong	result1, fp
0d1a8     08 4E 05 F1 | 	add	fp, #8
0d1ac     A7 3C 68 FC | 	wrlong	#30, fp
0d1b0     08 4E 85 F1 | 	sub	fp, #8
0d1b4     B0 02 90 FD | 	jmp	#LR__1065
0d1b8                 | LR__1055
0d1b8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
0d1b8     08 4E 05 F1 | 	add	fp, #8
0d1bc     A7 1E 02 FB | 	rdlong	local01, fp
0d1c0     08 4E 85 F1 | 	sub	fp, #8
0d1c4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d1c8     14 4E 05 A1 |  if_e	add	fp, #20
0d1cc     A7 24 02 AB |  if_e	rdlong	local04, fp
0d1d0     14 4E 85 A1 |  if_e	sub	fp, #20
0d1d4     12 23 02 A6 |  if_e	mov	local03, local04
0d1d8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d1dc     28 00 90 5D |  if_ne	jmp	#LR__1056
0d1e0     A7 1E 02 FB | 	rdlong	local01, fp
0d1e4     0C 4E 05 F1 | 	add	fp, #12
0d1e8     A7 12 02 FB | 	rdlong	arg01, fp
0d1ec     0C 4E 85 F1 | 	sub	fp, #12
0d1f0     48 D9 B0 FD | 	call	#__system___float_fromuns
0d1f4     FD 14 02 F6 | 	mov	arg02, result1
0d1f8     0F 13 02 F6 | 	mov	arg01, local01
0d1fc     70 D9 B0 FD | 	call	#__system___float_add
0d200     A7 FA 61 FC | 	wrlong	result1, fp
0d204     60 02 90 FD | 	jmp	#LR__1065
0d208                 | LR__1056
0d208                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
0d208     08 4E 05 F1 | 	add	fp, #8
0d20c     A7 1E 02 FB | 	rdlong	local01, fp
0d210     08 4E 85 F1 | 	sub	fp, #8
0d214     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d218     14 4E 05 A1 |  if_e	add	fp, #20
0d21c     A7 24 02 AB |  if_e	rdlong	local04, fp
0d220     14 4E 85 A1 |  if_e	sub	fp, #20
0d224     12 23 02 A6 |  if_e	mov	local03, local04
0d228     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d22c     38 00 90 5D |  if_ne	jmp	#LR__1057
0d230     A7 1E 02 FB | 	rdlong	local01, fp
0d234     0C 4E 05 F1 | 	add	fp, #12
0d238     A7 12 02 FB | 	rdlong	arg01, fp
0d23c     0C 4E 85 F1 | 	sub	fp, #12
0d240     09 13 52 F6 | 	abs	arg01, arg01 wc
0d244     1F 26 C6 C9 |  if_b	decod	local05, #31
0d248     00 26 06 36 |  if_ae	mov	local05, #0
0d24c     EC D8 B0 FD | 	call	#__system___float_fromuns
0d250     13 FB 61 F5 | 	xor	result1, local05
0d254     FD 14 02 F6 | 	mov	arg02, result1
0d258     0F 13 02 F6 | 	mov	arg01, local01
0d25c     10 D9 B0 FD | 	call	#__system___float_add
0d260     A7 FA 61 FC | 	wrlong	result1, fp
0d264     00 02 90 FD | 	jmp	#LR__1065
0d268                 | LR__1057
0d268                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
0d268     08 4E 05 F1 | 	add	fp, #8
0d26c     A7 1E 02 FB | 	rdlong	local01, fp
0d270     08 4E 85 F1 | 	sub	fp, #8
0d274     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d278     14 4E 05 A1 |  if_e	add	fp, #20
0d27c     A7 24 02 AB |  if_e	rdlong	local04, fp
0d280     14 4E 85 A1 |  if_e	sub	fp, #20
0d284     1E 24 0E A2 |  if_e	cmp	local04, #30 wz
0d288     1C 00 90 5D |  if_ne	jmp	#LR__1058
0d28c     A7 12 02 FB | 	rdlong	arg01, fp
0d290     0C 4E 05 F1 | 	add	fp, #12
0d294     A7 14 02 FB | 	rdlong	arg02, fp
0d298     0C 4E 85 F1 | 	sub	fp, #12
0d29c     D0 D8 B0 FD | 	call	#__system___float_add
0d2a0     A7 FA 61 FC | 	wrlong	result1, fp
0d2a4     C0 01 90 FD | 	jmp	#LR__1065
0d2a8                 | LR__1058
0d2a8                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0d2a8     08 4E 05 F1 | 	add	fp, #8
0d2ac     A7 1E 02 FB | 	rdlong	local01, fp
0d2b0     08 4E 85 F1 | 	sub	fp, #8
0d2b4     1F 1E 0E F2 | 	cmp	local01, #31 wz
0d2b8     24 00 90 5D |  if_ne	jmp	#LR__1059
0d2bc     14 4E 05 F1 | 	add	fp, #20
0d2c0     A7 22 02 FB | 	rdlong	local03, fp
0d2c4     14 4E 85 F1 | 	sub	fp, #20
0d2c8     1F 22 0E F2 | 	cmp	local03, #31 wz
0d2cc     A7 04 68 5C |  if_ne	wrlong	#2, fp
0d2d0     08 4E 05 51 |  if_ne	add	fp, #8
0d2d4     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0d2d8     08 4E 85 51 |  if_ne	sub	fp, #8
0d2dc     88 01 90 5D |  if_ne	jmp	#LR__1065
0d2e0                 | LR__1059
0d2e0                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0d2e0     14 4E 05 F1 | 	add	fp, #20
0d2e4     A7 1E 02 FB | 	rdlong	local01, fp
0d2e8     14 4E 85 F1 | 	sub	fp, #20
0d2ec     1F 1E 0E F2 | 	cmp	local01, #31 wz
0d2f0     24 00 90 5D |  if_ne	jmp	#LR__1060
0d2f4     08 4E 05 F1 | 	add	fp, #8
0d2f8     A7 22 02 FB | 	rdlong	local03, fp
0d2fc     08 4E 85 F1 | 	sub	fp, #8
0d300     1F 22 0E F2 | 	cmp	local03, #31 wz
0d304     A7 04 68 5C |  if_ne	wrlong	#2, fp
0d308     08 4E 05 51 |  if_ne	add	fp, #8
0d30c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0d310     08 4E 85 51 |  if_ne	sub	fp, #8
0d314     50 01 90 5D |  if_ne	jmp	#LR__1065
0d318                 | LR__1060
0d318                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
0d318     08 4E 05 F1 | 	add	fp, #8
0d31c     A7 1E 02 FB | 	rdlong	local01, fp
0d320     08 4E 85 F1 | 	sub	fp, #8
0d324     1F 1E 0E F2 | 	cmp	local01, #31 wz
0d328     14 4E 05 A1 |  if_e	add	fp, #20
0d32c     A7 22 02 AB |  if_e	rdlong	local03, fp
0d330     14 4E 85 A1 |  if_e	sub	fp, #20
0d334     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0d338     1C 00 90 5D |  if_ne	jmp	#LR__1061
0d33c     A7 12 02 FB | 	rdlong	arg01, fp
0d340     0C 4E 05 F1 | 	add	fp, #12
0d344     A7 14 02 FB | 	rdlong	arg02, fp
0d348     0C 4E 85 F1 | 	sub	fp, #12
0d34c     68 B2 B0 FD | 	call	#__system___string_concat
0d350     A7 FA 61 FC | 	wrlong	result1, fp
0d354     10 01 90 FD | 	jmp	#LR__1065
0d358                 | LR__1061
0d358                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
0d358     08 4E 05 F1 | 	add	fp, #8
0d35c     A7 1E 02 FB | 	rdlong	local01, fp
0d360     08 4E 85 F1 | 	sub	fp, #8
0d364     2B 1E 0E F2 | 	cmp	local01, #43 wz
0d368     14 4E 05 A1 |  if_e	add	fp, #20
0d36c     A7 22 02 AB |  if_e	rdlong	local03, fp
0d370     14 4E 85 A1 |  if_e	sub	fp, #20
0d374     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0d378     30 00 90 5D |  if_ne	jmp	#LR__1062
0d37c     A7 12 02 FB | 	rdlong	arg01, fp
0d380     48 EF BF FD | 	call	#_convertstring
0d384     FD 12 02 F6 | 	mov	arg01, result1
0d388     0C 4E 05 F1 | 	add	fp, #12
0d38c     A7 14 02 FB | 	rdlong	arg02, fp
0d390     0C 4E 85 F1 | 	sub	fp, #12
0d394     20 B2 B0 FD | 	call	#__system___string_concat
0d398     A7 FA 61 FC | 	wrlong	result1, fp
0d39c     08 4E 05 F1 | 	add	fp, #8
0d3a0     A7 3E 68 FC | 	wrlong	#31, fp
0d3a4     08 4E 85 F1 | 	sub	fp, #8
0d3a8     BC 00 90 FD | 	jmp	#LR__1065
0d3ac                 | LR__1062
0d3ac                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
0d3ac     08 4E 05 F1 | 	add	fp, #8
0d3b0     A7 1E 02 FB | 	rdlong	local01, fp
0d3b4     08 4E 85 F1 | 	sub	fp, #8
0d3b8     1F 1E 0E F2 | 	cmp	local01, #31 wz
0d3bc     14 4E 05 A1 |  if_e	add	fp, #20
0d3c0     A7 22 02 AB |  if_e	rdlong	local03, fp
0d3c4     14 4E 85 A1 |  if_e	sub	fp, #20
0d3c8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0d3cc     28 00 90 5D |  if_ne	jmp	#LR__1063
0d3d0     A7 1E 02 FB | 	rdlong	local01, fp
0d3d4     0C 4E 05 F1 | 	add	fp, #12
0d3d8     A7 12 02 FB | 	rdlong	arg01, fp
0d3dc     0C 4E 85 F1 | 	sub	fp, #12
0d3e0     E8 EE BF FD | 	call	#_convertstring
0d3e4     FD 14 02 F6 | 	mov	arg02, result1
0d3e8     0F 13 02 F6 | 	mov	arg01, local01
0d3ec     C8 B1 B0 FD | 	call	#__system___string_concat
0d3f0     A7 FA 61 FC | 	wrlong	result1, fp
0d3f4     70 00 90 FD | 	jmp	#LR__1065
0d3f8                 | LR__1063
0d3f8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
0d3f8     08 4E 05 F1 | 	add	fp, #8
0d3fc     A7 1E 02 FB | 	rdlong	local01, fp
0d400     08 4E 85 F1 | 	sub	fp, #8
0d404     2B 1E 0E F2 | 	cmp	local01, #43 wz
0d408     14 4E 05 A1 |  if_e	add	fp, #20
0d40c     A7 22 02 AB |  if_e	rdlong	local03, fp
0d410     14 4E 85 A1 |  if_e	sub	fp, #20
0d414     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0d418     3C 00 90 5D |  if_ne	jmp	#LR__1064
0d41c     A7 12 02 FB | 	rdlong	arg01, fp
0d420     A8 EE BF FD | 	call	#_convertstring
0d424     FD 1E 02 F6 | 	mov	local01, result1
0d428     0C 4E 05 F1 | 	add	fp, #12
0d42c     A7 12 02 FB | 	rdlong	arg01, fp
0d430     0C 4E 85 F1 | 	sub	fp, #12
0d434     94 EE BF FD | 	call	#_convertstring
0d438     FD 14 02 F6 | 	mov	arg02, result1
0d43c     0F 13 02 F6 | 	mov	arg01, local01
0d440     74 B1 B0 FD | 	call	#__system___string_concat
0d444     A7 FA 61 FC | 	wrlong	result1, fp
0d448     08 4E 05 F1 | 	add	fp, #8
0d44c     A7 3E 68 FC | 	wrlong	#31, fp
0d450     08 4E 85 F1 | 	sub	fp, #8
0d454     10 00 90 FD | 	jmp	#LR__1065
0d458                 | LR__1064
0d458     A7 08 68 FC | 	wrlong	#4, fp
0d45c     08 4E 05 F1 | 	add	fp, #8
0d460     A7 FE 69 FC | 	wrlong	#255, fp
0d464     08 4E 85 F1 | 	sub	fp, #8
0d468                 | LR__1065
0d468     A7 12 02 F6 | 	mov	arg01, fp
0d46c     EC BD BF FD | 	call	#_push
0d470     A7 F0 03 F6 | 	mov	ptra, fp
0d474     B2 00 A0 FD | 	call	#popregs_
0d478                 | _do_plus_ret
0d478     2D 00 64 FD | 	ret
0d47c                 | 
0d47c                 | ' 
0d47c                 | ' sub do_minus
0d47c                 | _do_minus
0d47c     05 4A 05 F6 | 	mov	COUNT_, #5
0d480     A8 00 A0 FD | 	call	#pushregs_
0d484     18 F0 07 F1 | 	add	ptra, #24
0d488     38 BD BF FD | 	call	#_pop
0d48c     FD 1E 02 F6 | 	mov	local01, result1
0d490     FE 20 02 F6 | 	mov	local02, result2
0d494     FF 22 02 F6 | 	mov	local03, result3
0d498     0C 4E 05 F1 | 	add	fp, #12
0d49c     A7 1E 62 FC | 	wrlong	local01, fp
0d4a0     04 4E 05 F1 | 	add	fp, #4
0d4a4     A7 20 62 FC | 	wrlong	local02, fp
0d4a8     04 4E 05 F1 | 	add	fp, #4
0d4ac     A7 22 62 FC | 	wrlong	local03, fp
0d4b0     14 4E 85 F1 | 	sub	fp, #20
0d4b4     0C BD BF FD | 	call	#_pop
0d4b8     FF 22 02 F6 | 	mov	local03, result3
0d4bc     A7 FA 61 FC | 	wrlong	result1, fp
0d4c0     04 4E 05 F1 | 	add	fp, #4
0d4c4     A7 FC 61 FC | 	wrlong	result2, fp
0d4c8     04 4E 05 F1 | 	add	fp, #4
0d4cc     A7 22 62 FC | 	wrlong	local03, fp
0d4d0                 | ' 
0d4d0                 | ' t2=pop()
0d4d0                 | ' t1=pop()
0d4d0                 | ' 
0d4d0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
0d4d0     08 4E 85 F1 | 	sub	fp, #8
0d4d4     1D 22 0E F2 | 	cmp	local03, #29 wz
0d4d8     14 4E 05 A1 |  if_e	add	fp, #20
0d4dc     A7 24 02 AB |  if_e	rdlong	local04, fp
0d4e0     14 4E 85 A1 |  if_e	sub	fp, #20
0d4e4     12 23 02 A6 |  if_e	mov	local03, local04
0d4e8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d4ec     5C 00 90 5D |  if_ne	jmp	#LR__1071
0d4f0                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
0d4f0     0C 4E 05 F1 | 	add	fp, #12
0d4f4     A7 1E 02 FB | 	rdlong	local01, fp
0d4f8     0C 4E 85 F1 | 	sub	fp, #12
0d4fc     A7 22 02 FB | 	rdlong	local03, fp
0d500     11 1F 12 F2 | 	cmp	local01, local03 wc
0d504     1C 00 90 3D |  if_ae	jmp	#LR__1070
0d508     A7 1E 02 FB | 	rdlong	local01, fp
0d50c     0C 4E 05 F1 | 	add	fp, #12
0d510     A7 20 02 FB | 	rdlong	local02, fp
0d514     0C 4E 85 F1 | 	sub	fp, #12
0d518     10 1F 82 F1 | 	sub	local01, local02
0d51c     A7 1E 62 FC | 	wrlong	local01, fp
0d520     F4 02 90 FD | 	jmp	#LR__1080
0d524                 | LR__1070
0d524     A7 1E 02 FB | 	rdlong	local01, fp
0d528     0C 4E 05 F1 | 	add	fp, #12
0d52c     A7 20 02 FB | 	rdlong	local02, fp
0d530     0C 4E 85 F1 | 	sub	fp, #12
0d534     10 1F 82 F1 | 	sub	local01, local02
0d538     A7 1E 62 FC | 	wrlong	local01, fp
0d53c     08 4E 05 F1 | 	add	fp, #8
0d540     A7 38 68 FC | 	wrlong	#28, fp
0d544     08 4E 85 F1 | 	sub	fp, #8
0d548     CC 02 90 FD | 	jmp	#LR__1080
0d54c                 | LR__1071
0d54c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
0d54c     08 4E 05 F1 | 	add	fp, #8
0d550     A7 1E 02 FB | 	rdlong	local01, fp
0d554     08 4E 85 F1 | 	sub	fp, #8
0d558     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d55c     14 4E 05 A1 |  if_e	add	fp, #20
0d560     A7 24 02 AB |  if_e	rdlong	local04, fp
0d564     14 4E 85 A1 |  if_e	sub	fp, #20
0d568     12 23 02 A6 |  if_e	mov	local03, local04
0d56c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d570     28 00 90 5D |  if_ne	jmp	#LR__1072
0d574     A7 1E 02 FB | 	rdlong	local01, fp
0d578     0C 4E 05 F1 | 	add	fp, #12
0d57c     A7 20 02 FB | 	rdlong	local02, fp
0d580     0C 4E 85 F1 | 	sub	fp, #12
0d584     10 1F 82 F1 | 	sub	local01, local02
0d588     A7 1E 62 FC | 	wrlong	local01, fp
0d58c     08 4E 05 F1 | 	add	fp, #8
0d590     A7 38 68 FC | 	wrlong	#28, fp
0d594     08 4E 85 F1 | 	sub	fp, #8
0d598     7C 02 90 FD | 	jmp	#LR__1080
0d59c                 | LR__1072
0d59c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0d59c     08 4E 05 F1 | 	add	fp, #8
0d5a0     A7 1E 02 FB | 	rdlong	local01, fp
0d5a4     08 4E 85 F1 | 	sub	fp, #8
0d5a8     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d5ac     14 4E 05 A1 |  if_e	add	fp, #20
0d5b0     A7 24 02 AB |  if_e	rdlong	local04, fp
0d5b4     14 4E 85 A1 |  if_e	sub	fp, #20
0d5b8     12 23 02 A6 |  if_e	mov	local03, local04
0d5bc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d5c0     34 00 90 5D |  if_ne	jmp	#LR__1073
0d5c4     A7 12 02 FB | 	rdlong	arg01, fp
0d5c8     70 D5 B0 FD | 	call	#__system___float_fromuns
0d5cc     FD 12 02 F6 | 	mov	arg01, result1
0d5d0     0C 4E 05 F1 | 	add	fp, #12
0d5d4     A7 14 02 FB | 	rdlong	arg02, fp
0d5d8     0C 4E 85 F1 | 	sub	fp, #12
0d5dc     1F 14 E6 F4 | 	bitnot	arg02, #31
0d5e0     8C D5 B0 FD | 	call	#__system___float_add
0d5e4     A7 FA 61 FC | 	wrlong	result1, fp
0d5e8     08 4E 05 F1 | 	add	fp, #8
0d5ec     A7 3C 68 FC | 	wrlong	#30, fp
0d5f0     08 4E 85 F1 | 	sub	fp, #8
0d5f4     20 02 90 FD | 	jmp	#LR__1080
0d5f8                 | LR__1073
0d5f8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
0d5f8     08 4E 05 F1 | 	add	fp, #8
0d5fc     A7 1E 02 FB | 	rdlong	local01, fp
0d600     08 4E 85 F1 | 	sub	fp, #8
0d604     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d608     14 4E 05 A1 |  if_e	add	fp, #20
0d60c     A7 24 02 AB |  if_e	rdlong	local04, fp
0d610     14 4E 85 A1 |  if_e	sub	fp, #20
0d614     12 23 02 A6 |  if_e	mov	local03, local04
0d618     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d61c     1C 00 90 5D |  if_ne	jmp	#LR__1074
0d620     A7 1E 02 FB | 	rdlong	local01, fp
0d624     0C 4E 05 F1 | 	add	fp, #12
0d628     A7 20 02 FB | 	rdlong	local02, fp
0d62c     0C 4E 85 F1 | 	sub	fp, #12
0d630     10 1F 82 F1 | 	sub	local01, local02
0d634     A7 1E 62 FC | 	wrlong	local01, fp
0d638     DC 01 90 FD | 	jmp	#LR__1080
0d63c                 | LR__1074
0d63c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
0d63c     08 4E 05 F1 | 	add	fp, #8
0d640     A7 1E 02 FB | 	rdlong	local01, fp
0d644     08 4E 85 F1 | 	sub	fp, #8
0d648     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d64c     14 4E 05 A1 |  if_e	add	fp, #20
0d650     A7 24 02 AB |  if_e	rdlong	local04, fp
0d654     14 4E 85 A1 |  if_e	sub	fp, #20
0d658     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0d65c     1C 00 90 5D |  if_ne	jmp	#LR__1075
0d660     A7 1E 02 FB | 	rdlong	local01, fp
0d664     0C 4E 05 F1 | 	add	fp, #12
0d668     A7 20 02 FB | 	rdlong	local02, fp
0d66c     0C 4E 85 F1 | 	sub	fp, #12
0d670     10 1F 82 F1 | 	sub	local01, local02
0d674     A7 1E 62 FC | 	wrlong	local01, fp
0d678     9C 01 90 FD | 	jmp	#LR__1080
0d67c                 | LR__1075
0d67c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0d67c     08 4E 05 F1 | 	add	fp, #8
0d680     A7 1E 02 FB | 	rdlong	local01, fp
0d684     08 4E 85 F1 | 	sub	fp, #8
0d688     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d68c     14 4E 05 A1 |  if_e	add	fp, #20
0d690     A7 22 02 AB |  if_e	rdlong	local03, fp
0d694     14 4E 85 A1 |  if_e	sub	fp, #20
0d698     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d69c     44 00 90 5D |  if_ne	jmp	#LR__1076
0d6a0     A7 12 02 FB | 	rdlong	arg01, fp
0d6a4     09 13 52 F6 | 	abs	arg01, arg01 wc
0d6a8     1F 26 C6 C9 |  if_b	decod	local05, #31
0d6ac     00 26 06 36 |  if_ae	mov	local05, #0
0d6b0     88 D4 B0 FD | 	call	#__system___float_fromuns
0d6b4     13 FB 61 F5 | 	xor	result1, local05
0d6b8     FD 12 02 F6 | 	mov	arg01, result1
0d6bc     0C 4E 05 F1 | 	add	fp, #12
0d6c0     A7 14 02 FB | 	rdlong	arg02, fp
0d6c4     0C 4E 85 F1 | 	sub	fp, #12
0d6c8     1F 14 E6 F4 | 	bitnot	arg02, #31
0d6cc     A0 D4 B0 FD | 	call	#__system___float_add
0d6d0     A7 FA 61 FC | 	wrlong	result1, fp
0d6d4     08 4E 05 F1 | 	add	fp, #8
0d6d8     A7 3C 68 FC | 	wrlong	#30, fp
0d6dc     08 4E 85 F1 | 	sub	fp, #8
0d6e0     34 01 90 FD | 	jmp	#LR__1080
0d6e4                 | LR__1076
0d6e4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
0d6e4     08 4E 05 F1 | 	add	fp, #8
0d6e8     A7 1E 02 FB | 	rdlong	local01, fp
0d6ec     08 4E 85 F1 | 	sub	fp, #8
0d6f0     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d6f4     14 4E 05 A1 |  if_e	add	fp, #20
0d6f8     A7 22 02 AB |  if_e	rdlong	local03, fp
0d6fc     14 4E 85 A1 |  if_e	sub	fp, #20
0d700     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d704     2C 00 90 5D |  if_ne	jmp	#LR__1077
0d708     A7 1E 02 FB | 	rdlong	local01, fp
0d70c     0C 4E 05 F1 | 	add	fp, #12
0d710     A7 12 02 FB | 	rdlong	arg01, fp
0d714     0C 4E 85 F1 | 	sub	fp, #12
0d718     20 D4 B0 FD | 	call	#__system___float_fromuns
0d71c     FD 14 02 F6 | 	mov	arg02, result1
0d720     0F 13 02 F6 | 	mov	arg01, local01
0d724     1F 14 E6 F4 | 	bitnot	arg02, #31
0d728     44 D4 B0 FD | 	call	#__system___float_add
0d72c     A7 FA 61 FC | 	wrlong	result1, fp
0d730     E4 00 90 FD | 	jmp	#LR__1080
0d734                 | LR__1077
0d734                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
0d734     08 4E 05 F1 | 	add	fp, #8
0d738     A7 1E 02 FB | 	rdlong	local01, fp
0d73c     08 4E 85 F1 | 	sub	fp, #8
0d740     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d744     14 4E 05 A1 |  if_e	add	fp, #20
0d748     A7 22 02 AB |  if_e	rdlong	local03, fp
0d74c     14 4E 85 A1 |  if_e	sub	fp, #20
0d750     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d754     3C 00 90 5D |  if_ne	jmp	#LR__1078
0d758     A7 1E 02 FB | 	rdlong	local01, fp
0d75c     0C 4E 05 F1 | 	add	fp, #12
0d760     A7 12 02 FB | 	rdlong	arg01, fp
0d764     0C 4E 85 F1 | 	sub	fp, #12
0d768     09 13 52 F6 | 	abs	arg01, arg01 wc
0d76c     1F 26 C6 C9 |  if_b	decod	local05, #31
0d770     00 26 06 36 |  if_ae	mov	local05, #0
0d774     C4 D3 B0 FD | 	call	#__system___float_fromuns
0d778     13 FB 61 F5 | 	xor	result1, local05
0d77c     FD 14 02 F6 | 	mov	arg02, result1
0d780     0F 13 02 F6 | 	mov	arg01, local01
0d784     1F 14 E6 F4 | 	bitnot	arg02, #31
0d788     E4 D3 B0 FD | 	call	#__system___float_add
0d78c     A7 FA 61 FC | 	wrlong	result1, fp
0d790     84 00 90 FD | 	jmp	#LR__1080
0d794                 | LR__1078
0d794                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
0d794     08 4E 05 F1 | 	add	fp, #8
0d798     A7 1E 02 FB | 	rdlong	local01, fp
0d79c     08 4E 85 F1 | 	sub	fp, #8
0d7a0     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d7a4     14 4E 05 A1 |  if_e	add	fp, #20
0d7a8     A7 22 02 AB |  if_e	rdlong	local03, fp
0d7ac     14 4E 85 A1 |  if_e	sub	fp, #20
0d7b0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d7b4     20 00 90 5D |  if_ne	jmp	#LR__1079
0d7b8     A7 12 02 FB | 	rdlong	arg01, fp
0d7bc     0C 4E 05 F1 | 	add	fp, #12
0d7c0     A7 14 02 FB | 	rdlong	arg02, fp
0d7c4     0C 4E 85 F1 | 	sub	fp, #12
0d7c8     1F 14 E6 F4 | 	bitnot	arg02, #31
0d7cc     A0 D3 B0 FD | 	call	#__system___float_add
0d7d0     A7 FA 61 FC | 	wrlong	result1, fp
0d7d4     40 00 90 FD | 	jmp	#LR__1080
0d7d8                 | LR__1079
0d7d8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
0d7d8     08 4E 05 F1 | 	add	fp, #8
0d7dc     A7 1E 02 FB | 	rdlong	local01, fp
0d7e0     08 4E 85 F1 | 	sub	fp, #8
0d7e4     1F 1E 0E F2 | 	cmp	local01, #31 wz
0d7e8     14 4E 05 51 |  if_ne	add	fp, #20
0d7ec     A7 22 02 5B |  if_ne	rdlong	local03, fp
0d7f0     14 4E 85 51 |  if_ne	sub	fp, #20
0d7f4     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
0d7f8     A7 06 68 AC |  if_e	wrlong	#3, fp
0d7fc     08 4E 05 A1 |  if_e	add	fp, #8
0d800     A7 FE 69 AC |  if_e	wrlong	#255, fp
0d804     08 4E 85 A1 |  if_e	sub	fp, #8
0d808     A7 0A 68 5C |  if_ne	wrlong	#5, fp
0d80c     08 4E 05 51 |  if_ne	add	fp, #8
0d810     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0d814     08 4E 85 51 |  if_ne	sub	fp, #8
0d818                 | LR__1080
0d818     A7 12 02 F6 | 	mov	arg01, fp
0d81c     3C BA BF FD | 	call	#_push
0d820     A7 F0 03 F6 | 	mov	ptra, fp
0d824     B2 00 A0 FD | 	call	#popregs_
0d828                 | _do_minus_ret
0d828     2D 00 64 FD | 	ret
0d82c                 | 
0d82c                 | ' 
0d82c                 | ' sub do_and 
0d82c                 | _do_and
0d82c     03 4A 05 F6 | 	mov	COUNT_, #3
0d830     A8 00 A0 FD | 	call	#pushregs_
0d834     18 F0 07 F1 | 	add	ptra, #24
0d838     88 B9 BF FD | 	call	#_pop
0d83c     FD 12 02 F6 | 	mov	arg01, result1
0d840     FE 1E 02 F6 | 	mov	local01, result2
0d844     FF 20 02 F6 | 	mov	local02, result3
0d848     0C 4E 05 F1 | 	add	fp, #12
0d84c     A7 12 62 FC | 	wrlong	arg01, fp
0d850     04 4E 05 F1 | 	add	fp, #4
0d854     A7 1E 62 FC | 	wrlong	local01, fp
0d858     04 4E 05 F1 | 	add	fp, #4
0d85c     A7 20 62 FC | 	wrlong	local02, fp
0d860     14 4E 85 F1 | 	sub	fp, #20
0d864     5C B9 BF FD | 	call	#_pop
0d868     FF 22 02 F6 | 	mov	local03, result3
0d86c     A7 FA 61 FC | 	wrlong	result1, fp
0d870     04 4E 05 F1 | 	add	fp, #4
0d874     A7 FC 61 FC | 	wrlong	result2, fp
0d878     04 4E 05 F1 | 	add	fp, #4
0d87c     A7 22 62 FC | 	wrlong	local03, fp
0d880                 | ' 
0d880                 | ' t2=pop()
0d880                 | ' t1=pop()
0d880                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0d880     08 4E 85 F1 | 	sub	fp, #8
0d884     1C 22 0E F2 | 	cmp	local03, #28 wz
0d888     A7 22 02 AB |  if_e	rdlong	local03, fp
0d88c     A7 22 62 AC |  if_e	wrlong	local03, fp
0d890     08 4E 05 A1 |  if_e	add	fp, #8
0d894     A7 3A 68 AC |  if_e	wrlong	#29, fp
0d898     08 4E 85 A1 |  if_e	sub	fp, #8
0d89c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0d89c     14 4E 05 F1 | 	add	fp, #20
0d8a0     A7 22 02 FB | 	rdlong	local03, fp
0d8a4     14 4E 85 F1 | 	sub	fp, #20
0d8a8     1C 22 0E F2 | 	cmp	local03, #28 wz
0d8ac     18 00 90 5D |  if_ne	jmp	#LR__1090
0d8b0     0C 4E 05 F1 | 	add	fp, #12
0d8b4     A7 22 02 FB | 	rdlong	local03, fp
0d8b8     A7 22 62 FC | 	wrlong	local03, fp
0d8bc     08 4E 05 F1 | 	add	fp, #8
0d8c0     A7 3A 68 FC | 	wrlong	#29, fp
0d8c4     14 4E 85 F1 | 	sub	fp, #20
0d8c8                 | LR__1090
0d8c8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
0d8c8     08 4E 05 F1 | 	add	fp, #8
0d8cc     A7 22 02 FB | 	rdlong	local03, fp
0d8d0     08 4E 85 F1 | 	sub	fp, #8
0d8d4     1F 22 0E F2 | 	cmp	local03, #31 wz
0d8d8     14 4E 05 51 |  if_ne	add	fp, #20
0d8dc     A7 20 02 5B |  if_ne	rdlong	local02, fp
0d8e0     14 4E 85 51 |  if_ne	sub	fp, #20
0d8e4     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0d8e8     08 4E 05 51 |  if_ne	add	fp, #8
0d8ec     A7 22 02 5B |  if_ne	rdlong	local03, fp
0d8f0     08 4E 85 51 |  if_ne	sub	fp, #8
0d8f4     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0d8f8     14 4E 05 51 |  if_ne	add	fp, #20
0d8fc     14 4E 85 51 |  if_ne	sub	fp, #20
0d900     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0d904     A7 0C 68 AC |  if_e	wrlong	#6, fp
0d908     08 4E 05 A1 |  if_e	add	fp, #8
0d90c     A7 FE 69 AC |  if_e	wrlong	#255, fp
0d910     08 4E 85 A1 |  if_e	sub	fp, #8
0d914     18 00 90 AD |  if_e	jmp	#LR__1091
0d918     A7 22 02 FB | 	rdlong	local03, fp
0d91c     0C 4E 05 F1 | 	add	fp, #12
0d920     A7 1E 02 FB | 	rdlong	local01, fp
0d924     0C 4E 85 F1 | 	sub	fp, #12
0d928     0F 23 02 F5 | 	and	local03, local01
0d92c     A7 22 62 FC | 	wrlong	local03, fp
0d930                 | LR__1091
0d930     A7 12 02 F6 | 	mov	arg01, fp
0d934     24 B9 BF FD | 	call	#_push
0d938     A7 F0 03 F6 | 	mov	ptra, fp
0d93c     B2 00 A0 FD | 	call	#popregs_
0d940                 | _do_and_ret
0d940     2D 00 64 FD | 	ret
0d944                 | 
0d944                 | ' 
0d944                 | ' sub do_or 
0d944                 | _do_or
0d944     03 4A 05 F6 | 	mov	COUNT_, #3
0d948     A8 00 A0 FD | 	call	#pushregs_
0d94c     18 F0 07 F1 | 	add	ptra, #24
0d950     70 B8 BF FD | 	call	#_pop
0d954     FD 12 02 F6 | 	mov	arg01, result1
0d958     FE 1E 02 F6 | 	mov	local01, result2
0d95c     FF 20 02 F6 | 	mov	local02, result3
0d960     0C 4E 05 F1 | 	add	fp, #12
0d964     A7 12 62 FC | 	wrlong	arg01, fp
0d968     04 4E 05 F1 | 	add	fp, #4
0d96c     A7 1E 62 FC | 	wrlong	local01, fp
0d970     04 4E 05 F1 | 	add	fp, #4
0d974     A7 20 62 FC | 	wrlong	local02, fp
0d978     14 4E 85 F1 | 	sub	fp, #20
0d97c     44 B8 BF FD | 	call	#_pop
0d980     FF 22 02 F6 | 	mov	local03, result3
0d984     A7 FA 61 FC | 	wrlong	result1, fp
0d988     04 4E 05 F1 | 	add	fp, #4
0d98c     A7 FC 61 FC | 	wrlong	result2, fp
0d990     04 4E 05 F1 | 	add	fp, #4
0d994     A7 22 62 FC | 	wrlong	local03, fp
0d998                 | ' 
0d998                 | ' t2=pop()
0d998                 | ' t1=pop()
0d998                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0d998     08 4E 85 F1 | 	sub	fp, #8
0d99c     1C 22 0E F2 | 	cmp	local03, #28 wz
0d9a0     A7 22 02 AB |  if_e	rdlong	local03, fp
0d9a4     A7 22 62 AC |  if_e	wrlong	local03, fp
0d9a8     08 4E 05 A1 |  if_e	add	fp, #8
0d9ac     A7 3A 68 AC |  if_e	wrlong	#29, fp
0d9b0     08 4E 85 A1 |  if_e	sub	fp, #8
0d9b4                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0d9b4     14 4E 05 F1 | 	add	fp, #20
0d9b8     A7 22 02 FB | 	rdlong	local03, fp
0d9bc     14 4E 85 F1 | 	sub	fp, #20
0d9c0     1C 22 0E F2 | 	cmp	local03, #28 wz
0d9c4     18 00 90 5D |  if_ne	jmp	#LR__1100
0d9c8     0C 4E 05 F1 | 	add	fp, #12
0d9cc     A7 22 02 FB | 	rdlong	local03, fp
0d9d0     A7 22 62 FC | 	wrlong	local03, fp
0d9d4     08 4E 05 F1 | 	add	fp, #8
0d9d8     A7 3A 68 FC | 	wrlong	#29, fp
0d9dc     14 4E 85 F1 | 	sub	fp, #20
0d9e0                 | LR__1100
0d9e0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
0d9e0     08 4E 05 F1 | 	add	fp, #8
0d9e4     A7 22 02 FB | 	rdlong	local03, fp
0d9e8     08 4E 85 F1 | 	sub	fp, #8
0d9ec     1F 22 0E F2 | 	cmp	local03, #31 wz
0d9f0     14 4E 05 51 |  if_ne	add	fp, #20
0d9f4     A7 20 02 5B |  if_ne	rdlong	local02, fp
0d9f8     14 4E 85 51 |  if_ne	sub	fp, #20
0d9fc     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0da00     08 4E 05 51 |  if_ne	add	fp, #8
0da04     A7 22 02 5B |  if_ne	rdlong	local03, fp
0da08     08 4E 85 51 |  if_ne	sub	fp, #8
0da0c     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0da10     14 4E 05 51 |  if_ne	add	fp, #20
0da14     14 4E 85 51 |  if_ne	sub	fp, #20
0da18     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0da1c     A7 0C 68 AC |  if_e	wrlong	#6, fp
0da20     08 4E 05 A1 |  if_e	add	fp, #8
0da24     A7 FE 69 AC |  if_e	wrlong	#255, fp
0da28     08 4E 85 A1 |  if_e	sub	fp, #8
0da2c     18 00 90 AD |  if_e	jmp	#LR__1101
0da30     A7 22 02 FB | 	rdlong	local03, fp
0da34     0C 4E 05 F1 | 	add	fp, #12
0da38     A7 1E 02 FB | 	rdlong	local01, fp
0da3c     0C 4E 85 F1 | 	sub	fp, #12
0da40     0F 23 42 F5 | 	or	local03, local01
0da44     A7 22 62 FC | 	wrlong	local03, fp
0da48                 | LR__1101
0da48     A7 12 02 F6 | 	mov	arg01, fp
0da4c     0C B8 BF FD | 	call	#_push
0da50     A7 F0 03 F6 | 	mov	ptra, fp
0da54     B2 00 A0 FD | 	call	#popregs_
0da58                 | _do_or_ret
0da58     2D 00 64 FD | 	ret
0da5c                 | 
0da5c                 | ' 
0da5c                 | ' sub do_mul
0da5c                 | _do_mul
0da5c     05 4A 05 F6 | 	mov	COUNT_, #5
0da60     A8 00 A0 FD | 	call	#pushregs_
0da64     18 F0 07 F1 | 	add	ptra, #24
0da68     58 B7 BF FD | 	call	#_pop
0da6c     FD 1E 02 F6 | 	mov	local01, result1
0da70     FE 20 02 F6 | 	mov	local02, result2
0da74     FF 22 02 F6 | 	mov	local03, result3
0da78     0C 4E 05 F1 | 	add	fp, #12
0da7c     A7 1E 62 FC | 	wrlong	local01, fp
0da80     04 4E 05 F1 | 	add	fp, #4
0da84     A7 20 62 FC | 	wrlong	local02, fp
0da88     04 4E 05 F1 | 	add	fp, #4
0da8c     A7 22 62 FC | 	wrlong	local03, fp
0da90     14 4E 85 F1 | 	sub	fp, #20
0da94     2C B7 BF FD | 	call	#_pop
0da98     FF 22 02 F6 | 	mov	local03, result3
0da9c     A7 FA 61 FC | 	wrlong	result1, fp
0daa0     04 4E 05 F1 | 	add	fp, #4
0daa4     A7 FC 61 FC | 	wrlong	result2, fp
0daa8     04 4E 05 F1 | 	add	fp, #4
0daac     A7 22 62 FC | 	wrlong	local03, fp
0dab0                 | ' 
0dab0                 | ' t2=pop()
0dab0                 | ' t1=pop()
0dab0                 | ' 
0dab0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
0dab0     08 4E 85 F1 | 	sub	fp, #8
0dab4     1D 22 0E F2 | 	cmp	local03, #29 wz
0dab8     14 4E 05 A1 |  if_e	add	fp, #20
0dabc     A7 24 02 AB |  if_e	rdlong	local04, fp
0dac0     14 4E 85 A1 |  if_e	sub	fp, #20
0dac4     12 23 02 A6 |  if_e	mov	local03, local04
0dac8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0dacc     20 00 90 5D |  if_ne	jmp	#LR__1110
0dad0     A7 20 02 FB | 	rdlong	local02, fp
0dad4     0C 4E 05 F1 | 	add	fp, #12
0dad8     A7 22 02 FB | 	rdlong	local03, fp
0dadc     11 21 02 FD | 	qmul	local02, local03
0dae0     0C 4E 85 F1 | 	sub	fp, #12
0dae4     18 1E 62 FD | 	getqx	local01
0dae8     A7 1E 62 FC | 	wrlong	local01, fp
0daec     C4 02 90 FD | 	jmp	#LR__1119
0daf0                 | LR__1110
0daf0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
0daf0     08 4E 05 F1 | 	add	fp, #8
0daf4     A7 1E 02 FB | 	rdlong	local01, fp
0daf8     08 4E 85 F1 | 	sub	fp, #8
0dafc     1D 1E 0E F2 | 	cmp	local01, #29 wz
0db00     14 4E 05 A1 |  if_e	add	fp, #20
0db04     A7 24 02 AB |  if_e	rdlong	local04, fp
0db08     14 4E 85 A1 |  if_e	sub	fp, #20
0db0c     12 23 02 A6 |  if_e	mov	local03, local04
0db10     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0db14     2C 00 90 5D |  if_ne	jmp	#LR__1111
0db18     A7 20 02 FB | 	rdlong	local02, fp
0db1c     0C 4E 05 F1 | 	add	fp, #12
0db20     A7 22 02 FB | 	rdlong	local03, fp
0db24     11 21 02 FD | 	qmul	local02, local03
0db28     0C 4E 85 F1 | 	sub	fp, #12
0db2c     18 1E 62 FD | 	getqx	local01
0db30     A7 1E 62 FC | 	wrlong	local01, fp
0db34     08 4E 05 F1 | 	add	fp, #8
0db38     A7 38 68 FC | 	wrlong	#28, fp
0db3c     08 4E 85 F1 | 	sub	fp, #8
0db40     70 02 90 FD | 	jmp	#LR__1119
0db44                 | LR__1111
0db44                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
0db44     08 4E 05 F1 | 	add	fp, #8
0db48     A7 1E 02 FB | 	rdlong	local01, fp
0db4c     08 4E 85 F1 | 	sub	fp, #8
0db50     1D 1E 0E F2 | 	cmp	local01, #29 wz
0db54     14 4E 05 A1 |  if_e	add	fp, #20
0db58     A7 24 02 AB |  if_e	rdlong	local04, fp
0db5c     14 4E 85 A1 |  if_e	sub	fp, #20
0db60     12 23 02 A6 |  if_e	mov	local03, local04
0db64     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0db68     30 00 90 5D |  if_ne	jmp	#LR__1112
0db6c     A7 12 02 FB | 	rdlong	arg01, fp
0db70     C8 CF B0 FD | 	call	#__system___float_fromuns
0db74     FD 12 02 F6 | 	mov	arg01, result1
0db78     0C 4E 05 F1 | 	add	fp, #12
0db7c     A7 14 02 FB | 	rdlong	arg02, fp
0db80     0C 4E 85 F1 | 	sub	fp, #12
0db84     B8 D3 B0 FD | 	call	#__system___float_mul
0db88     A7 FA 61 FC | 	wrlong	result1, fp
0db8c     08 4E 05 F1 | 	add	fp, #8
0db90     A7 3C 68 FC | 	wrlong	#30, fp
0db94     08 4E 85 F1 | 	sub	fp, #8
0db98     18 02 90 FD | 	jmp	#LR__1119
0db9c                 | LR__1112
0db9c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
0db9c     08 4E 05 F1 | 	add	fp, #8
0dba0     A7 1E 02 FB | 	rdlong	local01, fp
0dba4     08 4E 85 F1 | 	sub	fp, #8
0dba8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0dbac     14 4E 05 A1 |  if_e	add	fp, #20
0dbb0     A7 24 02 AB |  if_e	rdlong	local04, fp
0dbb4     14 4E 85 A1 |  if_e	sub	fp, #20
0dbb8     12 23 02 A6 |  if_e	mov	local03, local04
0dbbc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0dbc0     20 00 90 5D |  if_ne	jmp	#LR__1113
0dbc4     A7 20 02 FB | 	rdlong	local02, fp
0dbc8     0C 4E 05 F1 | 	add	fp, #12
0dbcc     A7 22 02 FB | 	rdlong	local03, fp
0dbd0     11 21 02 FD | 	qmul	local02, local03
0dbd4     0C 4E 85 F1 | 	sub	fp, #12
0dbd8     18 1E 62 FD | 	getqx	local01
0dbdc     A7 1E 62 FC | 	wrlong	local01, fp
0dbe0     D0 01 90 FD | 	jmp	#LR__1119
0dbe4                 | LR__1113
0dbe4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
0dbe4     08 4E 05 F1 | 	add	fp, #8
0dbe8     A7 1E 02 FB | 	rdlong	local01, fp
0dbec     08 4E 85 F1 | 	sub	fp, #8
0dbf0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0dbf4     14 4E 05 A1 |  if_e	add	fp, #20
0dbf8     A7 24 02 AB |  if_e	rdlong	local04, fp
0dbfc     14 4E 85 A1 |  if_e	sub	fp, #20
0dc00     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0dc04     20 00 90 5D |  if_ne	jmp	#LR__1114
0dc08     A7 20 02 FB | 	rdlong	local02, fp
0dc0c     0C 4E 05 F1 | 	add	fp, #12
0dc10     A7 22 02 FB | 	rdlong	local03, fp
0dc14     11 21 02 FD | 	qmul	local02, local03
0dc18     0C 4E 85 F1 | 	sub	fp, #12
0dc1c     18 1E 62 FD | 	getqx	local01
0dc20     A7 1E 62 FC | 	wrlong	local01, fp
0dc24     8C 01 90 FD | 	jmp	#LR__1119
0dc28                 | LR__1114
0dc28                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
0dc28     08 4E 05 F1 | 	add	fp, #8
0dc2c     A7 1E 02 FB | 	rdlong	local01, fp
0dc30     08 4E 85 F1 | 	sub	fp, #8
0dc34     1C 1E 0E F2 | 	cmp	local01, #28 wz
0dc38     14 4E 05 A1 |  if_e	add	fp, #20
0dc3c     A7 22 02 AB |  if_e	rdlong	local03, fp
0dc40     14 4E 85 A1 |  if_e	sub	fp, #20
0dc44     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0dc48     40 00 90 5D |  if_ne	jmp	#LR__1115
0dc4c     A7 12 02 FB | 	rdlong	arg01, fp
0dc50     09 13 52 F6 | 	abs	arg01, arg01 wc
0dc54     1F 26 C6 C9 |  if_b	decod	local05, #31
0dc58     00 26 06 36 |  if_ae	mov	local05, #0
0dc5c     DC CE B0 FD | 	call	#__system___float_fromuns
0dc60     13 FB 61 F5 | 	xor	result1, local05
0dc64     FD 12 02 F6 | 	mov	arg01, result1
0dc68     0C 4E 05 F1 | 	add	fp, #12
0dc6c     A7 14 02 FB | 	rdlong	arg02, fp
0dc70     0C 4E 85 F1 | 	sub	fp, #12
0dc74     C8 D2 B0 FD | 	call	#__system___float_mul
0dc78     A7 FA 61 FC | 	wrlong	result1, fp
0dc7c     08 4E 05 F1 | 	add	fp, #8
0dc80     A7 3C 68 FC | 	wrlong	#30, fp
0dc84     08 4E 85 F1 | 	sub	fp, #8
0dc88     28 01 90 FD | 	jmp	#LR__1119
0dc8c                 | LR__1115
0dc8c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
0dc8c     08 4E 05 F1 | 	add	fp, #8
0dc90     A7 1E 02 FB | 	rdlong	local01, fp
0dc94     08 4E 85 F1 | 	sub	fp, #8
0dc98     1E 1E 0E F2 | 	cmp	local01, #30 wz
0dc9c     14 4E 05 A1 |  if_e	add	fp, #20
0dca0     A7 22 02 AB |  if_e	rdlong	local03, fp
0dca4     14 4E 85 A1 |  if_e	sub	fp, #20
0dca8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0dcac     28 00 90 5D |  if_ne	jmp	#LR__1116
0dcb0     A7 1E 02 FB | 	rdlong	local01, fp
0dcb4     0C 4E 05 F1 | 	add	fp, #12
0dcb8     A7 12 02 FB | 	rdlong	arg01, fp
0dcbc     0C 4E 85 F1 | 	sub	fp, #12
0dcc0     78 CE B0 FD | 	call	#__system___float_fromuns
0dcc4     FD 14 02 F6 | 	mov	arg02, result1
0dcc8     0F 13 02 F6 | 	mov	arg01, local01
0dccc     70 D2 B0 FD | 	call	#__system___float_mul
0dcd0     A7 FA 61 FC | 	wrlong	result1, fp
0dcd4     DC 00 90 FD | 	jmp	#LR__1119
0dcd8                 | LR__1116
0dcd8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
0dcd8     08 4E 05 F1 | 	add	fp, #8
0dcdc     A7 1E 02 FB | 	rdlong	local01, fp
0dce0     08 4E 85 F1 | 	sub	fp, #8
0dce4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0dce8     14 4E 05 A1 |  if_e	add	fp, #20
0dcec     A7 22 02 AB |  if_e	rdlong	local03, fp
0dcf0     14 4E 85 A1 |  if_e	sub	fp, #20
0dcf4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0dcf8     38 00 90 5D |  if_ne	jmp	#LR__1117
0dcfc     A7 1E 02 FB | 	rdlong	local01, fp
0dd00     0C 4E 05 F1 | 	add	fp, #12
0dd04     A7 12 02 FB | 	rdlong	arg01, fp
0dd08     0C 4E 85 F1 | 	sub	fp, #12
0dd0c     09 13 52 F6 | 	abs	arg01, arg01 wc
0dd10     1F 26 C6 C9 |  if_b	decod	local05, #31
0dd14     00 26 06 36 |  if_ae	mov	local05, #0
0dd18     20 CE B0 FD | 	call	#__system___float_fromuns
0dd1c     13 FB 61 F5 | 	xor	result1, local05
0dd20     FD 14 02 F6 | 	mov	arg02, result1
0dd24     0F 13 02 F6 | 	mov	arg01, local01
0dd28     14 D2 B0 FD | 	call	#__system___float_mul
0dd2c     A7 FA 61 FC | 	wrlong	result1, fp
0dd30     80 00 90 FD | 	jmp	#LR__1119
0dd34                 | LR__1117
0dd34                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
0dd34     08 4E 05 F1 | 	add	fp, #8
0dd38     A7 1E 02 FB | 	rdlong	local01, fp
0dd3c     08 4E 85 F1 | 	sub	fp, #8
0dd40     1E 1E 0E F2 | 	cmp	local01, #30 wz
0dd44     14 4E 05 A1 |  if_e	add	fp, #20
0dd48     A7 22 02 AB |  if_e	rdlong	local03, fp
0dd4c     14 4E 85 A1 |  if_e	sub	fp, #20
0dd50     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0dd54     1C 00 90 5D |  if_ne	jmp	#LR__1118
0dd58     A7 12 02 FB | 	rdlong	arg01, fp
0dd5c     0C 4E 05 F1 | 	add	fp, #12
0dd60     A7 14 02 FB | 	rdlong	arg02, fp
0dd64     0C 4E 85 F1 | 	sub	fp, #12
0dd68     D4 D1 B0 FD | 	call	#__system___float_mul
0dd6c     A7 FA 61 FC | 	wrlong	result1, fp
0dd70     40 00 90 FD | 	jmp	#LR__1119
0dd74                 | LR__1118
0dd74                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
0dd74     08 4E 05 F1 | 	add	fp, #8
0dd78     A7 1E 02 FB | 	rdlong	local01, fp
0dd7c     08 4E 85 F1 | 	sub	fp, #8
0dd80     1F 1E 0E F2 | 	cmp	local01, #31 wz
0dd84     14 4E 05 51 |  if_ne	add	fp, #20
0dd88     A7 22 02 5B |  if_ne	rdlong	local03, fp
0dd8c     14 4E 85 51 |  if_ne	sub	fp, #20
0dd90     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
0dd94     A7 10 68 AC |  if_e	wrlong	#8, fp
0dd98     08 4E 05 A1 |  if_e	add	fp, #8
0dd9c     A7 FE 69 AC |  if_e	wrlong	#255, fp
0dda0     08 4E 85 A1 |  if_e	sub	fp, #8
0dda4     A7 12 68 5C |  if_ne	wrlong	#9, fp
0dda8     08 4E 05 51 |  if_ne	add	fp, #8
0ddac     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0ddb0     08 4E 85 51 |  if_ne	sub	fp, #8
0ddb4                 | LR__1119
0ddb4     A7 12 02 F6 | 	mov	arg01, fp
0ddb8     A0 B4 BF FD | 	call	#_push
0ddbc     A7 F0 03 F6 | 	mov	ptra, fp
0ddc0     B2 00 A0 FD | 	call	#popregs_
0ddc4                 | _do_mul_ret
0ddc4     2D 00 64 FD | 	ret
0ddc8                 | 
0ddc8                 | ' 
0ddc8                 | ' sub do_div 
0ddc8                 | _do_div
0ddc8     01 4A 05 F6 | 	mov	COUNT_, #1
0ddcc     A8 00 A0 FD | 	call	#pushregs_
0ddd0     18 F0 07 F1 | 	add	ptra, #24
0ddd4     EC B3 BF FD | 	call	#_pop
0ddd8     FD 62 02 F6 | 	mov	muldivb_, result1
0dddc     FE 60 02 F6 | 	mov	muldiva_, result2
0dde0     FF 1E 02 F6 | 	mov	local01, result3
0dde4     0C 4E 05 F1 | 	add	fp, #12
0dde8     A7 62 62 FC | 	wrlong	muldivb_, fp
0ddec     04 4E 05 F1 | 	add	fp, #4
0ddf0     A7 60 62 FC | 	wrlong	muldiva_, fp
0ddf4     04 4E 05 F1 | 	add	fp, #4
0ddf8     A7 1E 62 FC | 	wrlong	local01, fp
0ddfc     14 4E 85 F1 | 	sub	fp, #20
0de00     C0 B3 BF FD | 	call	#_pop
0de04     A7 FA 61 FC | 	wrlong	result1, fp
0de08     04 4E 05 F1 | 	add	fp, #4
0de0c     A7 FC 61 FC | 	wrlong	result2, fp
0de10     04 4E 05 F1 | 	add	fp, #4
0de14     A7 FE 61 FC | 	wrlong	result3, fp
0de18                 | ' 
0de18                 | ' t2=pop()
0de18                 | ' t1=pop()
0de18                 | ' 
0de18                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
0de18     08 4E 85 F1 | 	sub	fp, #8
0de1c     1F FE 0D F2 | 	cmp	result3, #31 wz
0de20     14 4E 05 51 |  if_ne	add	fp, #20
0de24     A7 12 02 5B |  if_ne	rdlong	arg01, fp
0de28     14 4E 85 51 |  if_ne	sub	fp, #20
0de2c     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
0de30     A7 14 68 AC |  if_e	wrlong	#10, fp
0de34     08 4E 05 A1 |  if_e	add	fp, #8
0de38     A7 FE 69 AC |  if_e	wrlong	#255, fp
0de3c     08 4E 85 A1 |  if_e	sub	fp, #8
0de40     90 01 90 AD |  if_e	jmp	#LR__1126
0de44                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
0de44     08 4E 05 F1 | 	add	fp, #8
0de48     A7 62 02 FB | 	rdlong	muldivb_, fp
0de4c     08 4E 85 F1 | 	sub	fp, #8
0de50     1E 62 0E F2 | 	cmp	muldivb_, #30 wz
0de54     1C 00 90 5D |  if_ne	jmp	#LR__1120
0de58     08 4E 05 F1 | 	add	fp, #8
0de5c     A7 38 68 FC | 	wrlong	#28, fp
0de60     08 4E 85 F1 | 	sub	fp, #8
0de64     A7 12 02 FB | 	rdlong	arg01, fp
0de68     00 14 06 F6 | 	mov	arg02, #0
0de6c     98 D5 B0 FD | 	call	#__system___float_tointeger
0de70     A7 FA 61 FC | 	wrlong	result1, fp
0de74                 | LR__1120
0de74                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
0de74     14 4E 05 F1 | 	add	fp, #20
0de78     A7 62 02 FB | 	rdlong	muldivb_, fp
0de7c     14 4E 85 F1 | 	sub	fp, #20
0de80     1E 62 0E F2 | 	cmp	muldivb_, #30 wz
0de84     28 00 90 5D |  if_ne	jmp	#LR__1121
0de88     14 4E 05 F1 | 	add	fp, #20
0de8c     A7 38 68 FC | 	wrlong	#28, fp
0de90     08 4E 85 F1 | 	sub	fp, #8
0de94     A7 12 02 FB | 	rdlong	arg01, fp
0de98     0C 4E 85 F1 | 	sub	fp, #12
0de9c     00 14 06 F6 | 	mov	arg02, #0
0dea0     64 D5 B0 FD | 	call	#__system___float_tointeger
0dea4     0C 4E 05 F1 | 	add	fp, #12
0dea8     A7 FA 61 FC | 	wrlong	result1, fp
0deac     0C 4E 85 F1 | 	sub	fp, #12
0deb0                 | LR__1121
0deb0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
0deb0     08 4E 05 F1 | 	add	fp, #8
0deb4     A7 62 02 FB | 	rdlong	muldivb_, fp
0deb8     08 4E 85 F1 | 	sub	fp, #8
0debc     1D 62 0E F2 | 	cmp	muldivb_, #29 wz
0dec0     14 4E 05 A1 |  if_e	add	fp, #20
0dec4     A7 1E 02 AB |  if_e	rdlong	local01, fp
0dec8     14 4E 85 A1 |  if_e	sub	fp, #20
0decc     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0ded0     20 00 90 5D |  if_ne	jmp	#LR__1122
0ded4     0C 4E 05 F1 | 	add	fp, #12
0ded8     A7 1E 02 FB | 	rdlong	local01, fp
0dedc     0C 4E 85 F1 | 	sub	fp, #12
0dee0     A7 62 02 FB | 	rdlong	muldivb_, fp
0dee4     0F 63 12 FD | 	qdiv	muldivb_, local01
0dee8     18 1E 62 FD | 	getqx	local01
0deec     A7 1E 62 FC | 	wrlong	local01, fp
0def0     E0 00 90 FD | 	jmp	#LR__1126
0def4                 | LR__1122
0def4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
0def4     08 4E 05 F1 | 	add	fp, #8
0def8     A7 62 02 FB | 	rdlong	muldivb_, fp
0defc     08 4E 85 F1 | 	sub	fp, #8
0df00     1D 62 0E F2 | 	cmp	muldivb_, #29 wz
0df04     14 4E 05 A1 |  if_e	add	fp, #20
0df08     A7 1E 02 AB |  if_e	rdlong	local01, fp
0df0c     14 4E 85 A1 |  if_e	sub	fp, #20
0df10     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0df14     2C 00 90 5D |  if_ne	jmp	#LR__1123
0df18     0C 4E 05 F1 | 	add	fp, #12
0df1c     A7 1E 02 FB | 	rdlong	local01, fp
0df20     0C 4E 85 F1 | 	sub	fp, #12
0df24     A7 62 02 FB | 	rdlong	muldivb_, fp
0df28     0F 63 12 FD | 	qdiv	muldivb_, local01
0df2c     18 1E 62 FD | 	getqx	local01
0df30     A7 1E 62 FC | 	wrlong	local01, fp
0df34     08 4E 05 F1 | 	add	fp, #8
0df38     A7 38 68 FC | 	wrlong	#28, fp
0df3c     08 4E 85 F1 | 	sub	fp, #8
0df40     90 00 90 FD | 	jmp	#LR__1126
0df44                 | LR__1123
0df44                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
0df44     08 4E 05 F1 | 	add	fp, #8
0df48     A7 62 02 FB | 	rdlong	muldivb_, fp
0df4c     08 4E 85 F1 | 	sub	fp, #8
0df50     1C 62 0E F2 | 	cmp	muldivb_, #28 wz
0df54     14 4E 05 A1 |  if_e	add	fp, #20
0df58     A7 1E 02 AB |  if_e	rdlong	local01, fp
0df5c     14 4E 85 A1 |  if_e	sub	fp, #20
0df60     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0df64     1C 00 90 5D |  if_ne	jmp	#LR__1124
0df68     A7 60 02 FB | 	rdlong	muldiva_, fp
0df6c     0C 4E 05 F1 | 	add	fp, #12
0df70     A7 62 02 FB | 	rdlong	muldivb_, fp
0df74     0C 4E 85 F1 | 	sub	fp, #12
0df78     BA 00 A0 FD | 	call	#divide_
0df7c     A7 62 62 FC | 	wrlong	muldivb_, fp
0df80     50 00 90 FD | 	jmp	#LR__1126
0df84                 | LR__1124
0df84                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
0df84     08 4E 05 F1 | 	add	fp, #8
0df88     A7 62 02 FB | 	rdlong	muldivb_, fp
0df8c     08 4E 85 F1 | 	sub	fp, #8
0df90     1C 62 0E F2 | 	cmp	muldivb_, #28 wz
0df94     14 4E 05 A1 |  if_e	add	fp, #20
0df98     A7 1E 02 AB |  if_e	rdlong	local01, fp
0df9c     14 4E 85 A1 |  if_e	sub	fp, #20
0dfa0     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0dfa4     1C 00 90 5D |  if_ne	jmp	#LR__1125
0dfa8     A7 60 02 FB | 	rdlong	muldiva_, fp
0dfac     0C 4E 05 F1 | 	add	fp, #12
0dfb0     A7 62 02 FB | 	rdlong	muldivb_, fp
0dfb4     0C 4E 85 F1 | 	sub	fp, #12
0dfb8     BA 00 A0 FD | 	call	#divide_
0dfbc     A7 62 62 FC | 	wrlong	muldivb_, fp
0dfc0     10 00 90 FD | 	jmp	#LR__1126
0dfc4                 | LR__1125
0dfc4     A7 16 68 FC | 	wrlong	#11, fp
0dfc8     08 4E 05 F1 | 	add	fp, #8
0dfcc     A7 FE 69 FC | 	wrlong	#255, fp
0dfd0     08 4E 85 F1 | 	sub	fp, #8
0dfd4                 | LR__1126
0dfd4     A7 12 02 F6 | 	mov	arg01, fp
0dfd8     80 B2 BF FD | 	call	#_push
0dfdc     A7 F0 03 F6 | 	mov	ptra, fp
0dfe0     B2 00 A0 FD | 	call	#popregs_
0dfe4                 | _do_div_ret
0dfe4     2D 00 64 FD | 	ret
0dfe8                 | 
0dfe8                 | ' 
0dfe8                 | ' sub do_fdiv 
0dfe8                 | _do_fdiv
0dfe8     02 4A 05 F6 | 	mov	COUNT_, #2
0dfec     A8 00 A0 FD | 	call	#pushregs_
0dff0     18 F0 07 F1 | 	add	ptra, #24
0dff4     CC B1 BF FD | 	call	#_pop
0dff8     FD 14 02 F6 | 	mov	arg02, result1
0dffc     FE 12 02 F6 | 	mov	arg01, result2
0e000     FF 1E 02 F6 | 	mov	local01, result3
0e004     0C 4E 05 F1 | 	add	fp, #12
0e008     A7 14 62 FC | 	wrlong	arg02, fp
0e00c     04 4E 05 F1 | 	add	fp, #4
0e010     A7 12 62 FC | 	wrlong	arg01, fp
0e014     04 4E 05 F1 | 	add	fp, #4
0e018     A7 1E 62 FC | 	wrlong	local01, fp
0e01c     14 4E 85 F1 | 	sub	fp, #20
0e020     A0 B1 BF FD | 	call	#_pop
0e024     A7 FA 61 FC | 	wrlong	result1, fp
0e028     04 4E 05 F1 | 	add	fp, #4
0e02c     A7 FC 61 FC | 	wrlong	result2, fp
0e030     04 4E 05 F1 | 	add	fp, #4
0e034     A7 FE 61 FC | 	wrlong	result3, fp
0e038                 | ' 
0e038                 | ' t2=pop()
0e038                 | ' t1=pop()
0e038                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
0e038     08 4E 85 F1 | 	sub	fp, #8
0e03c     1F FE 0D F2 | 	cmp	result3, #31 wz
0e040     14 4E 05 51 |  if_ne	add	fp, #20
0e044     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e048     14 4E 85 51 |  if_ne	sub	fp, #20
0e04c     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
0e050     A7 14 68 AC |  if_e	wrlong	#10, fp
0e054     08 4E 05 A1 |  if_e	add	fp, #8
0e058     A7 FE 69 AC |  if_e	wrlong	#255, fp
0e05c     08 4E 85 A1 |  if_e	sub	fp, #8
0e060     38 01 90 AD |  if_e	jmp	#LR__1135
0e064                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
0e064     08 4E 05 F1 | 	add	fp, #8
0e068     A7 14 02 FB | 	rdlong	arg02, fp
0e06c     08 4E 85 F1 | 	sub	fp, #8
0e070     1C 14 0E F2 | 	cmp	arg02, #28 wz
0e074     28 00 90 5D |  if_ne	jmp	#LR__1130
0e078     08 4E 05 F1 | 	add	fp, #8
0e07c     A7 3C 68 FC | 	wrlong	#30, fp
0e080     08 4E 85 F1 | 	sub	fp, #8
0e084     A7 12 02 FB | 	rdlong	arg01, fp
0e088     09 13 52 F6 | 	abs	arg01, arg01 wc
0e08c     1F 20 C6 C9 |  if_b	decod	local02, #31
0e090     00 20 06 36 |  if_ae	mov	local02, #0
0e094     A4 CA B0 FD | 	call	#__system___float_fromuns
0e098     10 FB 61 F5 | 	xor	result1, local02
0e09c     A7 FA 61 FC | 	wrlong	result1, fp
0e0a0                 | LR__1130
0e0a0                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
0e0a0     08 4E 05 F1 | 	add	fp, #8
0e0a4     A7 14 02 FB | 	rdlong	arg02, fp
0e0a8     08 4E 85 F1 | 	sub	fp, #8
0e0ac     1D 14 0E F2 | 	cmp	arg02, #29 wz
0e0b0     18 00 90 5D |  if_ne	jmp	#LR__1131
0e0b4     08 4E 05 F1 | 	add	fp, #8
0e0b8     A7 3C 68 FC | 	wrlong	#30, fp
0e0bc     08 4E 85 F1 | 	sub	fp, #8
0e0c0     A7 12 02 FB | 	rdlong	arg01, fp
0e0c4     74 CA B0 FD | 	call	#__system___float_fromuns
0e0c8     A7 FA 61 FC | 	wrlong	result1, fp
0e0cc                 | LR__1131
0e0cc                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
0e0cc     14 4E 05 F1 | 	add	fp, #20
0e0d0     A7 14 02 FB | 	rdlong	arg02, fp
0e0d4     14 4E 85 F1 | 	sub	fp, #20
0e0d8     1C 14 0E F2 | 	cmp	arg02, #28 wz
0e0dc     34 00 90 5D |  if_ne	jmp	#LR__1132
0e0e0     14 4E 05 F1 | 	add	fp, #20
0e0e4     A7 3C 68 FC | 	wrlong	#30, fp
0e0e8     08 4E 85 F1 | 	sub	fp, #8
0e0ec     A7 12 02 FB | 	rdlong	arg01, fp
0e0f0     0C 4E 85 F1 | 	sub	fp, #12
0e0f4     09 13 52 F6 | 	abs	arg01, arg01 wc
0e0f8     1F 20 C6 C9 |  if_b	decod	local02, #31
0e0fc     00 20 06 36 |  if_ae	mov	local02, #0
0e100     38 CA B0 FD | 	call	#__system___float_fromuns
0e104     10 FB 61 F5 | 	xor	result1, local02
0e108     0C 4E 05 F1 | 	add	fp, #12
0e10c     A7 FA 61 FC | 	wrlong	result1, fp
0e110     0C 4E 85 F1 | 	sub	fp, #12
0e114                 | LR__1132
0e114                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
0e114     14 4E 05 F1 | 	add	fp, #20
0e118     A7 14 02 FB | 	rdlong	arg02, fp
0e11c     14 4E 85 F1 | 	sub	fp, #20
0e120     1D 14 0E F2 | 	cmp	arg02, #29 wz
0e124     24 00 90 5D |  if_ne	jmp	#LR__1133
0e128     14 4E 05 F1 | 	add	fp, #20
0e12c     A7 3C 68 FC | 	wrlong	#30, fp
0e130     08 4E 85 F1 | 	sub	fp, #8
0e134     A7 12 02 FB | 	rdlong	arg01, fp
0e138     0C 4E 85 F1 | 	sub	fp, #12
0e13c     FC C9 B0 FD | 	call	#__system___float_fromuns
0e140     0C 4E 05 F1 | 	add	fp, #12
0e144     A7 FA 61 FC | 	wrlong	result1, fp
0e148     0C 4E 85 F1 | 	sub	fp, #12
0e14c                 | LR__1133
0e14c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
0e14c     08 4E 05 F1 | 	add	fp, #8
0e150     A7 14 02 FB | 	rdlong	arg02, fp
0e154     08 4E 85 F1 | 	sub	fp, #8
0e158     1E 14 0E F2 | 	cmp	arg02, #30 wz
0e15c     14 4E 05 A1 |  if_e	add	fp, #20
0e160     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e164     14 4E 85 A1 |  if_e	sub	fp, #20
0e168     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
0e16c     1C 00 90 5D |  if_ne	jmp	#LR__1134
0e170     A7 12 02 FB | 	rdlong	arg01, fp
0e174     0C 4E 05 F1 | 	add	fp, #12
0e178     A7 14 02 FB | 	rdlong	arg02, fp
0e17c     0C 4E 85 F1 | 	sub	fp, #12
0e180     C0 CF B0 FD | 	call	#__system___float_div
0e184     A7 FA 61 FC | 	wrlong	result1, fp
0e188     10 00 90 FD | 	jmp	#LR__1135
0e18c                 | LR__1134
0e18c     A7 16 68 FC | 	wrlong	#11, fp
0e190     08 4E 05 F1 | 	add	fp, #8
0e194     A7 FE 69 FC | 	wrlong	#255, fp
0e198     08 4E 85 F1 | 	sub	fp, #8
0e19c                 | LR__1135
0e19c     A7 12 02 F6 | 	mov	arg01, fp
0e1a0     B8 B0 BF FD | 	call	#_push
0e1a4     A7 F0 03 F6 | 	mov	ptra, fp
0e1a8     B2 00 A0 FD | 	call	#popregs_
0e1ac                 | _do_fdiv_ret
0e1ac     2D 00 64 FD | 	ret
0e1b0                 | 
0e1b0                 | ' 
0e1b0                 | ' 
0e1b0                 | ' sub do_mod 
0e1b0                 | _do_mod
0e1b0     01 4A 05 F6 | 	mov	COUNT_, #1
0e1b4     A8 00 A0 FD | 	call	#pushregs_
0e1b8     18 F0 07 F1 | 	add	ptra, #24
0e1bc     04 B0 BF FD | 	call	#_pop
0e1c0     FD 62 02 F6 | 	mov	muldivb_, result1
0e1c4     FE 60 02 F6 | 	mov	muldiva_, result2
0e1c8     FF 1E 02 F6 | 	mov	local01, result3
0e1cc     0C 4E 05 F1 | 	add	fp, #12
0e1d0     A7 62 62 FC | 	wrlong	muldivb_, fp
0e1d4     04 4E 05 F1 | 	add	fp, #4
0e1d8     A7 60 62 FC | 	wrlong	muldiva_, fp
0e1dc     04 4E 05 F1 | 	add	fp, #4
0e1e0     A7 1E 62 FC | 	wrlong	local01, fp
0e1e4     14 4E 85 F1 | 	sub	fp, #20
0e1e8     D8 AF BF FD | 	call	#_pop
0e1ec     A7 FA 61 FC | 	wrlong	result1, fp
0e1f0     04 4E 05 F1 | 	add	fp, #4
0e1f4     A7 FC 61 FC | 	wrlong	result2, fp
0e1f8     04 4E 05 F1 | 	add	fp, #4
0e1fc     A7 FE 61 FC | 	wrlong	result3, fp
0e200                 | ' 
0e200                 | ' t2=pop()
0e200                 | ' t1=pop()
0e200                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
0e200     08 4E 85 F1 | 	sub	fp, #8
0e204     1F FE 0D F2 | 	cmp	result3, #31 wz
0e208     14 4E 05 51 |  if_ne	add	fp, #20
0e20c     A7 12 02 5B |  if_ne	rdlong	arg01, fp
0e210     14 4E 85 51 |  if_ne	sub	fp, #20
0e214     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
0e218     A7 14 68 AC |  if_e	wrlong	#10, fp
0e21c     08 4E 05 A1 |  if_e	add	fp, #8
0e220     A7 FE 69 AC |  if_e	wrlong	#255, fp
0e224     08 4E 85 A1 |  if_e	sub	fp, #8
0e228     90 01 90 AD |  if_e	jmp	#LR__1146
0e22c                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
0e22c     08 4E 05 F1 | 	add	fp, #8
0e230     A7 62 02 FB | 	rdlong	muldivb_, fp
0e234     08 4E 85 F1 | 	sub	fp, #8
0e238     1E 62 0E F2 | 	cmp	muldivb_, #30 wz
0e23c     1C 00 90 5D |  if_ne	jmp	#LR__1140
0e240     08 4E 05 F1 | 	add	fp, #8
0e244     A7 38 68 FC | 	wrlong	#28, fp
0e248     08 4E 85 F1 | 	sub	fp, #8
0e24c     A7 12 02 FB | 	rdlong	arg01, fp
0e250     00 14 06 F6 | 	mov	arg02, #0
0e254     B0 D1 B0 FD | 	call	#__system___float_tointeger
0e258     A7 FA 61 FC | 	wrlong	result1, fp
0e25c                 | LR__1140
0e25c                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
0e25c     14 4E 05 F1 | 	add	fp, #20
0e260     A7 62 02 FB | 	rdlong	muldivb_, fp
0e264     14 4E 85 F1 | 	sub	fp, #20
0e268     1E 62 0E F2 | 	cmp	muldivb_, #30 wz
0e26c     28 00 90 5D |  if_ne	jmp	#LR__1141
0e270     14 4E 05 F1 | 	add	fp, #20
0e274     A7 38 68 FC | 	wrlong	#28, fp
0e278     08 4E 85 F1 | 	sub	fp, #8
0e27c     A7 12 02 FB | 	rdlong	arg01, fp
0e280     0C 4E 85 F1 | 	sub	fp, #12
0e284     00 14 06 F6 | 	mov	arg02, #0
0e288     7C D1 B0 FD | 	call	#__system___float_tointeger
0e28c     0C 4E 05 F1 | 	add	fp, #12
0e290     A7 FA 61 FC | 	wrlong	result1, fp
0e294     0C 4E 85 F1 | 	sub	fp, #12
0e298                 | LR__1141
0e298                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
0e298     08 4E 05 F1 | 	add	fp, #8
0e29c     A7 62 02 FB | 	rdlong	muldivb_, fp
0e2a0     08 4E 85 F1 | 	sub	fp, #8
0e2a4     1D 62 0E F2 | 	cmp	muldivb_, #29 wz
0e2a8     14 4E 05 A1 |  if_e	add	fp, #20
0e2ac     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e2b0     14 4E 85 A1 |  if_e	sub	fp, #20
0e2b4     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0e2b8     20 00 90 5D |  if_ne	jmp	#LR__1142
0e2bc     0C 4E 05 F1 | 	add	fp, #12
0e2c0     A7 1E 02 FB | 	rdlong	local01, fp
0e2c4     0C 4E 85 F1 | 	sub	fp, #12
0e2c8     A7 62 02 FB | 	rdlong	muldivb_, fp
0e2cc     0F 63 12 FD | 	qdiv	muldivb_, local01
0e2d0     19 1E 62 FD | 	getqy	local01
0e2d4     A7 1E 62 FC | 	wrlong	local01, fp
0e2d8     E0 00 90 FD | 	jmp	#LR__1146
0e2dc                 | LR__1142
0e2dc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
0e2dc     08 4E 05 F1 | 	add	fp, #8
0e2e0     A7 62 02 FB | 	rdlong	muldivb_, fp
0e2e4     08 4E 85 F1 | 	sub	fp, #8
0e2e8     1D 62 0E F2 | 	cmp	muldivb_, #29 wz
0e2ec     14 4E 05 A1 |  if_e	add	fp, #20
0e2f0     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e2f4     14 4E 85 A1 |  if_e	sub	fp, #20
0e2f8     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0e2fc     2C 00 90 5D |  if_ne	jmp	#LR__1143
0e300     0C 4E 05 F1 | 	add	fp, #12
0e304     A7 1E 02 FB | 	rdlong	local01, fp
0e308     0C 4E 85 F1 | 	sub	fp, #12
0e30c     A7 62 02 FB | 	rdlong	muldivb_, fp
0e310     0F 63 12 FD | 	qdiv	muldivb_, local01
0e314     19 1E 62 FD | 	getqy	local01
0e318     A7 1E 62 FC | 	wrlong	local01, fp
0e31c     08 4E 05 F1 | 	add	fp, #8
0e320     A7 38 68 FC | 	wrlong	#28, fp
0e324     08 4E 85 F1 | 	sub	fp, #8
0e328     90 00 90 FD | 	jmp	#LR__1146
0e32c                 | LR__1143
0e32c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
0e32c     08 4E 05 F1 | 	add	fp, #8
0e330     A7 62 02 FB | 	rdlong	muldivb_, fp
0e334     08 4E 85 F1 | 	sub	fp, #8
0e338     1C 62 0E F2 | 	cmp	muldivb_, #28 wz
0e33c     14 4E 05 A1 |  if_e	add	fp, #20
0e340     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e344     14 4E 85 A1 |  if_e	sub	fp, #20
0e348     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0e34c     1C 00 90 5D |  if_ne	jmp	#LR__1144
0e350     A7 60 02 FB | 	rdlong	muldiva_, fp
0e354     0C 4E 05 F1 | 	add	fp, #12
0e358     A7 62 02 FB | 	rdlong	muldivb_, fp
0e35c     0C 4E 85 F1 | 	sub	fp, #12
0e360     BA 00 A0 FD | 	call	#divide_
0e364     A7 60 62 FC | 	wrlong	muldiva_, fp
0e368     50 00 90 FD | 	jmp	#LR__1146
0e36c                 | LR__1144
0e36c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
0e36c     08 4E 05 F1 | 	add	fp, #8
0e370     A7 62 02 FB | 	rdlong	muldivb_, fp
0e374     08 4E 85 F1 | 	sub	fp, #8
0e378     1C 62 0E F2 | 	cmp	muldivb_, #28 wz
0e37c     14 4E 05 A1 |  if_e	add	fp, #20
0e380     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e384     14 4E 85 A1 |  if_e	sub	fp, #20
0e388     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0e38c     1C 00 90 5D |  if_ne	jmp	#LR__1145
0e390     A7 60 02 FB | 	rdlong	muldiva_, fp
0e394     0C 4E 05 F1 | 	add	fp, #12
0e398     A7 62 02 FB | 	rdlong	muldivb_, fp
0e39c     0C 4E 85 F1 | 	sub	fp, #12
0e3a0     BA 00 A0 FD | 	call	#divide_
0e3a4     A7 60 62 FC | 	wrlong	muldiva_, fp
0e3a8     10 00 90 FD | 	jmp	#LR__1146
0e3ac                 | LR__1145
0e3ac     A7 16 68 FC | 	wrlong	#11, fp
0e3b0     08 4E 05 F1 | 	add	fp, #8
0e3b4     A7 FE 69 FC | 	wrlong	#255, fp
0e3b8     08 4E 85 F1 | 	sub	fp, #8
0e3bc                 | LR__1146
0e3bc     A7 12 02 F6 | 	mov	arg01, fp
0e3c0     98 AE BF FD | 	call	#_push
0e3c4     A7 F0 03 F6 | 	mov	ptra, fp
0e3c8     B2 00 A0 FD | 	call	#popregs_
0e3cc                 | _do_mod_ret
0e3cc     2D 00 64 FD | 	ret
0e3d0                 | 
0e3d0                 | ' 
0e3d0                 | ' sub do_shl 
0e3d0                 | _do_shl
0e3d0     03 4A 05 F6 | 	mov	COUNT_, #3
0e3d4     A8 00 A0 FD | 	call	#pushregs_
0e3d8     18 F0 07 F1 | 	add	ptra, #24
0e3dc     E4 AD BF FD | 	call	#_pop
0e3e0     FD 12 02 F6 | 	mov	arg01, result1
0e3e4     FE 1E 02 F6 | 	mov	local01, result2
0e3e8     FF 20 02 F6 | 	mov	local02, result3
0e3ec     0C 4E 05 F1 | 	add	fp, #12
0e3f0     A7 12 62 FC | 	wrlong	arg01, fp
0e3f4     04 4E 05 F1 | 	add	fp, #4
0e3f8     A7 1E 62 FC | 	wrlong	local01, fp
0e3fc     04 4E 05 F1 | 	add	fp, #4
0e400     A7 20 62 FC | 	wrlong	local02, fp
0e404     14 4E 85 F1 | 	sub	fp, #20
0e408     B8 AD BF FD | 	call	#_pop
0e40c     FF 22 02 F6 | 	mov	local03, result3
0e410     A7 FA 61 FC | 	wrlong	result1, fp
0e414     04 4E 05 F1 | 	add	fp, #4
0e418     A7 FC 61 FC | 	wrlong	result2, fp
0e41c     04 4E 05 F1 | 	add	fp, #4
0e420     A7 22 62 FC | 	wrlong	local03, fp
0e424                 | ' 
0e424                 | ' t2=pop()
0e424                 | ' t1=pop()
0e424                 | ' 
0e424                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0e424     08 4E 85 F1 | 	sub	fp, #8
0e428     1C 22 0E F2 | 	cmp	local03, #28 wz
0e42c     A7 22 02 AB |  if_e	rdlong	local03, fp
0e430     A7 22 62 AC |  if_e	wrlong	local03, fp
0e434     08 4E 05 A1 |  if_e	add	fp, #8
0e438     A7 3A 68 AC |  if_e	wrlong	#29, fp
0e43c     08 4E 85 A1 |  if_e	sub	fp, #8
0e440                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0e440     14 4E 05 F1 | 	add	fp, #20
0e444     A7 22 02 FB | 	rdlong	local03, fp
0e448     14 4E 85 F1 | 	sub	fp, #20
0e44c     1C 22 0E F2 | 	cmp	local03, #28 wz
0e450     18 00 90 5D |  if_ne	jmp	#LR__1150
0e454     0C 4E 05 F1 | 	add	fp, #12
0e458     A7 22 02 FB | 	rdlong	local03, fp
0e45c     A7 22 62 FC | 	wrlong	local03, fp
0e460     08 4E 05 F1 | 	add	fp, #8
0e464     A7 3A 68 FC | 	wrlong	#29, fp
0e468     14 4E 85 F1 | 	sub	fp, #20
0e46c                 | LR__1150
0e46c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
0e46c     08 4E 05 F1 | 	add	fp, #8
0e470     A7 22 02 FB | 	rdlong	local03, fp
0e474     08 4E 85 F1 | 	sub	fp, #8
0e478     1F 22 0E F2 | 	cmp	local03, #31 wz
0e47c     14 4E 05 51 |  if_ne	add	fp, #20
0e480     A7 20 02 5B |  if_ne	rdlong	local02, fp
0e484     14 4E 85 51 |  if_ne	sub	fp, #20
0e488     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0e48c     08 4E 05 51 |  if_ne	add	fp, #8
0e490     A7 22 02 5B |  if_ne	rdlong	local03, fp
0e494     08 4E 85 51 |  if_ne	sub	fp, #8
0e498     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0e49c     14 4E 05 51 |  if_ne	add	fp, #20
0e4a0     14 4E 85 51 |  if_ne	sub	fp, #20
0e4a4     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0e4a8     A7 0C 68 AC |  if_e	wrlong	#6, fp
0e4ac     08 4E 05 A1 |  if_e	add	fp, #8
0e4b0     A7 FE 69 AC |  if_e	wrlong	#255, fp
0e4b4     08 4E 85 A1 |  if_e	sub	fp, #8
0e4b8     18 00 90 AD |  if_e	jmp	#LR__1151
0e4bc     A7 22 02 FB | 	rdlong	local03, fp
0e4c0     0C 4E 05 F1 | 	add	fp, #12
0e4c4     A7 1E 02 FB | 	rdlong	local01, fp
0e4c8     0C 4E 85 F1 | 	sub	fp, #12
0e4cc     0F 23 62 F0 | 	shl	local03, local01
0e4d0     A7 22 62 FC | 	wrlong	local03, fp
0e4d4                 | LR__1151
0e4d4     A7 12 02 F6 | 	mov	arg01, fp
0e4d8     80 AD BF FD | 	call	#_push
0e4dc     A7 F0 03 F6 | 	mov	ptra, fp
0e4e0     B2 00 A0 FD | 	call	#popregs_
0e4e4                 | _do_shl_ret
0e4e4     2D 00 64 FD | 	ret
0e4e8                 | 
0e4e8                 | ' 
0e4e8                 | ' sub do_shr 
0e4e8                 | _do_shr
0e4e8     03 4A 05 F6 | 	mov	COUNT_, #3
0e4ec     A8 00 A0 FD | 	call	#pushregs_
0e4f0     18 F0 07 F1 | 	add	ptra, #24
0e4f4     CC AC BF FD | 	call	#_pop
0e4f8     FD 12 02 F6 | 	mov	arg01, result1
0e4fc     FE 1E 02 F6 | 	mov	local01, result2
0e500     FF 20 02 F6 | 	mov	local02, result3
0e504     0C 4E 05 F1 | 	add	fp, #12
0e508     A7 12 62 FC | 	wrlong	arg01, fp
0e50c     04 4E 05 F1 | 	add	fp, #4
0e510     A7 1E 62 FC | 	wrlong	local01, fp
0e514     04 4E 05 F1 | 	add	fp, #4
0e518     A7 20 62 FC | 	wrlong	local02, fp
0e51c     14 4E 85 F1 | 	sub	fp, #20
0e520     A0 AC BF FD | 	call	#_pop
0e524     FF 22 02 F6 | 	mov	local03, result3
0e528     A7 FA 61 FC | 	wrlong	result1, fp
0e52c     04 4E 05 F1 | 	add	fp, #4
0e530     A7 FC 61 FC | 	wrlong	result2, fp
0e534     04 4E 05 F1 | 	add	fp, #4
0e538     A7 22 62 FC | 	wrlong	local03, fp
0e53c                 | ' t2=pop()
0e53c                 | ' t1=pop()
0e53c                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0e53c     08 4E 85 F1 | 	sub	fp, #8
0e540     1C 22 0E F2 | 	cmp	local03, #28 wz
0e544     A7 22 02 AB |  if_e	rdlong	local03, fp
0e548     A7 22 62 AC |  if_e	wrlong	local03, fp
0e54c     08 4E 05 A1 |  if_e	add	fp, #8
0e550     A7 3A 68 AC |  if_e	wrlong	#29, fp
0e554     08 4E 85 A1 |  if_e	sub	fp, #8
0e558                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0e558     14 4E 05 F1 | 	add	fp, #20
0e55c     A7 22 02 FB | 	rdlong	local03, fp
0e560     14 4E 85 F1 | 	sub	fp, #20
0e564     1C 22 0E F2 | 	cmp	local03, #28 wz
0e568     18 00 90 5D |  if_ne	jmp	#LR__1160
0e56c     0C 4E 05 F1 | 	add	fp, #12
0e570     A7 22 02 FB | 	rdlong	local03, fp
0e574     A7 22 62 FC | 	wrlong	local03, fp
0e578     08 4E 05 F1 | 	add	fp, #8
0e57c     A7 3A 68 FC | 	wrlong	#29, fp
0e580     14 4E 85 F1 | 	sub	fp, #20
0e584                 | LR__1160
0e584                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
0e584     08 4E 05 F1 | 	add	fp, #8
0e588     A7 22 02 FB | 	rdlong	local03, fp
0e58c     08 4E 85 F1 | 	sub	fp, #8
0e590     1F 22 0E F2 | 	cmp	local03, #31 wz
0e594     14 4E 05 51 |  if_ne	add	fp, #20
0e598     A7 20 02 5B |  if_ne	rdlong	local02, fp
0e59c     14 4E 85 51 |  if_ne	sub	fp, #20
0e5a0     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0e5a4     08 4E 05 51 |  if_ne	add	fp, #8
0e5a8     A7 22 02 5B |  if_ne	rdlong	local03, fp
0e5ac     08 4E 85 51 |  if_ne	sub	fp, #8
0e5b0     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0e5b4     14 4E 05 51 |  if_ne	add	fp, #20
0e5b8     14 4E 85 51 |  if_ne	sub	fp, #20
0e5bc     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0e5c0     A7 0C 68 AC |  if_e	wrlong	#6, fp
0e5c4     08 4E 05 A1 |  if_e	add	fp, #8
0e5c8     A7 FE 69 AC |  if_e	wrlong	#255, fp
0e5cc     08 4E 85 A1 |  if_e	sub	fp, #8
0e5d0     18 00 90 AD |  if_e	jmp	#LR__1161
0e5d4     A7 22 02 FB | 	rdlong	local03, fp
0e5d8     0C 4E 05 F1 | 	add	fp, #12
0e5dc     A7 1E 02 FB | 	rdlong	local01, fp
0e5e0     0C 4E 85 F1 | 	sub	fp, #12
0e5e4     0F 23 42 F0 | 	shr	local03, local01
0e5e8     A7 22 62 FC | 	wrlong	local03, fp
0e5ec                 | LR__1161
0e5ec     A7 12 02 F6 | 	mov	arg01, fp
0e5f0     68 AC BF FD | 	call	#_push
0e5f4     A7 F0 03 F6 | 	mov	ptra, fp
0e5f8     B2 00 A0 FD | 	call	#popregs_
0e5fc                 | _do_shr_ret
0e5fc     2D 00 64 FD | 	ret
0e600                 | 
0e600                 | ' 
0e600                 | ' sub do_power 
0e600                 | _do_power
0e600     02 4A 05 F6 | 	mov	COUNT_, #2
0e604     A8 00 A0 FD | 	call	#pushregs_
0e608     18 F0 07 F1 | 	add	ptra, #24
0e60c     B4 AB BF FD | 	call	#_pop
0e610     FD 14 02 F6 | 	mov	arg02, result1
0e614     FE 12 02 F6 | 	mov	arg01, result2
0e618     FF 1E 02 F6 | 	mov	local01, result3
0e61c     0C 4E 05 F1 | 	add	fp, #12
0e620     A7 14 62 FC | 	wrlong	arg02, fp
0e624     04 4E 05 F1 | 	add	fp, #4
0e628     A7 12 62 FC | 	wrlong	arg01, fp
0e62c     04 4E 05 F1 | 	add	fp, #4
0e630     A7 1E 62 FC | 	wrlong	local01, fp
0e634     14 4E 85 F1 | 	sub	fp, #20
0e638     88 AB BF FD | 	call	#_pop
0e63c     A7 FA 61 FC | 	wrlong	result1, fp
0e640     04 4E 05 F1 | 	add	fp, #4
0e644     A7 FC 61 FC | 	wrlong	result2, fp
0e648     04 4E 05 F1 | 	add	fp, #4
0e64c     A7 FE 61 FC | 	wrlong	result3, fp
0e650                 | ' t2=pop()
0e650                 | ' t1=pop()
0e650                 | ' 
0e650                 | ' 
0e650                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
0e650     08 4E 85 F1 | 	sub	fp, #8
0e654     1F FE 0D F2 | 	cmp	result3, #31 wz
0e658     14 4E 05 51 |  if_ne	add	fp, #20
0e65c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e660     14 4E 85 51 |  if_ne	sub	fp, #20
0e664     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
0e668     A7 18 68 AC |  if_e	wrlong	#12, fp
0e66c     08 4E 05 A1 |  if_e	add	fp, #8
0e670     A7 FE 69 AC |  if_e	wrlong	#255, fp
0e674     08 4E 85 A1 |  if_e	sub	fp, #8
0e678     38 01 90 AD |  if_e	jmp	#LR__1175
0e67c                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
0e67c     08 4E 05 F1 | 	add	fp, #8
0e680     A7 14 02 FB | 	rdlong	arg02, fp
0e684     08 4E 85 F1 | 	sub	fp, #8
0e688     1C 14 0E F2 | 	cmp	arg02, #28 wz
0e68c     28 00 90 5D |  if_ne	jmp	#LR__1170
0e690     08 4E 05 F1 | 	add	fp, #8
0e694     A7 3C 68 FC | 	wrlong	#30, fp
0e698     08 4E 85 F1 | 	sub	fp, #8
0e69c     A7 12 02 FB | 	rdlong	arg01, fp
0e6a0     09 13 52 F6 | 	abs	arg01, arg01 wc
0e6a4     1F 20 C6 C9 |  if_b	decod	local02, #31
0e6a8     00 20 06 36 |  if_ae	mov	local02, #0
0e6ac     8C C4 B0 FD | 	call	#__system___float_fromuns
0e6b0     10 FB 61 F5 | 	xor	result1, local02
0e6b4     A7 FA 61 FC | 	wrlong	result1, fp
0e6b8                 | LR__1170
0e6b8                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
0e6b8     08 4E 05 F1 | 	add	fp, #8
0e6bc     A7 14 02 FB | 	rdlong	arg02, fp
0e6c0     08 4E 85 F1 | 	sub	fp, #8
0e6c4     1D 14 0E F2 | 	cmp	arg02, #29 wz
0e6c8     18 00 90 5D |  if_ne	jmp	#LR__1171
0e6cc     08 4E 05 F1 | 	add	fp, #8
0e6d0     A7 3C 68 FC | 	wrlong	#30, fp
0e6d4     08 4E 85 F1 | 	sub	fp, #8
0e6d8     A7 12 02 FB | 	rdlong	arg01, fp
0e6dc     5C C4 B0 FD | 	call	#__system___float_fromuns
0e6e0     A7 FA 61 FC | 	wrlong	result1, fp
0e6e4                 | LR__1171
0e6e4                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
0e6e4     14 4E 05 F1 | 	add	fp, #20
0e6e8     A7 14 02 FB | 	rdlong	arg02, fp
0e6ec     14 4E 85 F1 | 	sub	fp, #20
0e6f0     1C 14 0E F2 | 	cmp	arg02, #28 wz
0e6f4     34 00 90 5D |  if_ne	jmp	#LR__1172
0e6f8     14 4E 05 F1 | 	add	fp, #20
0e6fc     A7 3C 68 FC | 	wrlong	#30, fp
0e700     08 4E 85 F1 | 	sub	fp, #8
0e704     A7 12 02 FB | 	rdlong	arg01, fp
0e708     0C 4E 85 F1 | 	sub	fp, #12
0e70c     09 13 52 F6 | 	abs	arg01, arg01 wc
0e710     1F 20 C6 C9 |  if_b	decod	local02, #31
0e714     00 20 06 36 |  if_ae	mov	local02, #0
0e718     20 C4 B0 FD | 	call	#__system___float_fromuns
0e71c     10 FB 61 F5 | 	xor	result1, local02
0e720     0C 4E 05 F1 | 	add	fp, #12
0e724     A7 FA 61 FC | 	wrlong	result1, fp
0e728     0C 4E 85 F1 | 	sub	fp, #12
0e72c                 | LR__1172
0e72c                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
0e72c     14 4E 05 F1 | 	add	fp, #20
0e730     A7 14 02 FB | 	rdlong	arg02, fp
0e734     14 4E 85 F1 | 	sub	fp, #20
0e738     1D 14 0E F2 | 	cmp	arg02, #29 wz
0e73c     24 00 90 5D |  if_ne	jmp	#LR__1173
0e740     14 4E 05 F1 | 	add	fp, #20
0e744     A7 3C 68 FC | 	wrlong	#30, fp
0e748     08 4E 85 F1 | 	sub	fp, #8
0e74c     A7 12 02 FB | 	rdlong	arg01, fp
0e750     0C 4E 85 F1 | 	sub	fp, #12
0e754     E4 C3 B0 FD | 	call	#__system___float_fromuns
0e758     0C 4E 05 F1 | 	add	fp, #12
0e75c     A7 FA 61 FC | 	wrlong	result1, fp
0e760     0C 4E 85 F1 | 	sub	fp, #12
0e764                 | LR__1173
0e764                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
0e764     08 4E 05 F1 | 	add	fp, #8
0e768     A7 14 02 FB | 	rdlong	arg02, fp
0e76c     08 4E 85 F1 | 	sub	fp, #8
0e770     1E 14 0E F2 | 	cmp	arg02, #30 wz
0e774     14 4E 05 A1 |  if_e	add	fp, #20
0e778     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e77c     14 4E 85 A1 |  if_e	sub	fp, #20
0e780     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
0e784     1C 00 90 5D |  if_ne	jmp	#LR__1174
0e788     A7 12 02 FB | 	rdlong	arg01, fp
0e78c     0C 4E 05 F1 | 	add	fp, #12
0e790     A7 14 02 FB | 	rdlong	arg02, fp
0e794     0C 4E 85 F1 | 	sub	fp, #12
0e798     88 D6 B0 FD | 	call	#__system____builtin_powf
0e79c     A7 FA 61 FC | 	wrlong	result1, fp
0e7a0     10 00 90 FD | 	jmp	#LR__1175
0e7a4                 | LR__1174
0e7a4     A7 1A 68 FC | 	wrlong	#13, fp
0e7a8     08 4E 05 F1 | 	add	fp, #8
0e7ac     A7 FE 69 FC | 	wrlong	#255, fp
0e7b0     08 4E 85 F1 | 	sub	fp, #8
0e7b4                 | LR__1175
0e7b4     A7 12 02 F6 | 	mov	arg01, fp
0e7b8     A0 AA BF FD | 	call	#_push
0e7bc     A7 F0 03 F6 | 	mov	ptra, fp
0e7c0     B2 00 A0 FD | 	call	#popregs_
0e7c4                 | _do_power_ret
0e7c4     2D 00 64 FD | 	ret
0e7c8                 | 
0e7c8                 | ' 
0e7c8                 | ' 
0e7c8                 | ' sub do_eq
0e7c8                 | _do_eq
0e7c8     05 4A 05 F6 | 	mov	COUNT_, #5
0e7cc     A8 00 A0 FD | 	call	#pushregs_
0e7d0     18 F0 07 F1 | 	add	ptra, #24
0e7d4     EC A9 BF FD | 	call	#_pop
0e7d8     FD 1E 02 F6 | 	mov	local01, result1
0e7dc     FE 20 02 F6 | 	mov	local02, result2
0e7e0     FF 22 02 F6 | 	mov	local03, result3
0e7e4     0C 4E 05 F1 | 	add	fp, #12
0e7e8     A7 1E 62 FC | 	wrlong	local01, fp
0e7ec     04 4E 05 F1 | 	add	fp, #4
0e7f0     A7 20 62 FC | 	wrlong	local02, fp
0e7f4     04 4E 05 F1 | 	add	fp, #4
0e7f8     A7 22 62 FC | 	wrlong	local03, fp
0e7fc     14 4E 85 F1 | 	sub	fp, #20
0e800     C0 A9 BF FD | 	call	#_pop
0e804     FF 22 02 F6 | 	mov	local03, result3
0e808     A7 FA 61 FC | 	wrlong	result1, fp
0e80c     04 4E 05 F1 | 	add	fp, #4
0e810     A7 FC 61 FC | 	wrlong	result2, fp
0e814     04 4E 05 F1 | 	add	fp, #4
0e818     A7 22 62 FC | 	wrlong	local03, fp
0e81c                 | ' t2=pop()
0e81c                 | ' t1=pop()
0e81c                 | ' 
0e81c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
0e81c     08 4E 85 F1 | 	sub	fp, #8
0e820     1F 22 0E F2 | 	cmp	local03, #31 wz
0e824     14 4E 05 A1 |  if_e	add	fp, #20
0e828     A7 24 02 AB |  if_e	rdlong	local04, fp
0e82c     14 4E 85 A1 |  if_e	sub	fp, #20
0e830     12 23 02 A6 |  if_e	mov	local03, local04
0e834     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0e838     28 00 90 5D |  if_ne	jmp	#LR__1180
0e83c     00 1E 06 F6 | 	mov	local01, #0
0e840     A7 12 02 FB | 	rdlong	arg01, fp
0e844     0C 4E 05 F1 | 	add	fp, #12
0e848     A7 14 02 FB | 	rdlong	arg02, fp
0e84c     0C 4E 85 F1 | 	sub	fp, #12
0e850     30 9D B0 FD | 	call	#__system___string_cmp
0e854     00 FA 0D F2 | 	cmp	result1, #0 wz
0e858     00 1E 26 A6 |  if_e	not	local01, #0
0e85c     A7 1E 62 FC | 	wrlong	local01, fp
0e860     1C 04 90 FD | 	jmp	#LR__1193
0e864                 | LR__1180
0e864                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
0e864     08 4E 05 F1 | 	add	fp, #8
0e868     A7 1E 02 FB | 	rdlong	local01, fp
0e86c     08 4E 85 F1 | 	sub	fp, #8
0e870     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e874     14 4E 05 A1 |  if_e	add	fp, #20
0e878     A7 24 02 AB |  if_e	rdlong	local04, fp
0e87c     14 4E 85 A1 |  if_e	sub	fp, #20
0e880     12 23 02 A6 |  if_e	mov	local03, local04
0e884     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e888     2C 00 90 5D |  if_ne	jmp	#LR__1181
0e88c     00 1E 06 F6 | 	mov	local01, #0
0e890     A7 12 02 FB | 	rdlong	arg01, fp
0e894     0C 4E 05 F1 | 	add	fp, #12
0e898     A7 14 02 FB | 	rdlong	arg02, fp
0e89c     0C 4E 85 F1 | 	sub	fp, #12
0e8a0     01 16 06 F6 | 	mov	arg03, #1
0e8a4     CC CA B0 FD | 	call	#__system___float_cmp
0e8a8     00 FA 0D F2 | 	cmp	result1, #0 wz
0e8ac     00 1E 26 A6 |  if_e	not	local01, #0
0e8b0     A7 1E 62 FC | 	wrlong	local01, fp
0e8b4     C8 03 90 FD | 	jmp	#LR__1193
0e8b8                 | LR__1181
0e8b8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
0e8b8     08 4E 05 F1 | 	add	fp, #8
0e8bc     A7 1E 02 FB | 	rdlong	local01, fp
0e8c0     08 4E 85 F1 | 	sub	fp, #8
0e8c4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e8c8     14 4E 05 A1 |  if_e	add	fp, #20
0e8cc     A7 24 02 AB |  if_e	rdlong	local04, fp
0e8d0     14 4E 85 A1 |  if_e	sub	fp, #20
0e8d4     12 23 02 A6 |  if_e	mov	local03, local04
0e8d8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0e8dc     48 00 90 5D |  if_ne	jmp	#LR__1182
0e8e0     00 1E 06 F6 | 	mov	local01, #0
0e8e4     A7 20 02 FB | 	rdlong	local02, fp
0e8e8     0C 4E 05 F1 | 	add	fp, #12
0e8ec     A7 12 02 FB | 	rdlong	arg01, fp
0e8f0     0C 4E 85 F1 | 	sub	fp, #12
0e8f4     09 13 52 F6 | 	abs	arg01, arg01 wc
0e8f8     1F 26 C6 C9 |  if_b	decod	local05, #31
0e8fc     00 26 06 36 |  if_ae	mov	local05, #0
0e900     38 C2 B0 FD | 	call	#__system___float_fromuns
0e904     13 FB 61 F5 | 	xor	result1, local05
0e908     FD 14 02 F6 | 	mov	arg02, result1
0e90c     10 13 02 F6 | 	mov	arg01, local02
0e910     01 16 06 F6 | 	mov	arg03, #1
0e914     5C CA B0 FD | 	call	#__system___float_cmp
0e918     00 FA 0D F2 | 	cmp	result1, #0 wz
0e91c     00 1E 26 A6 |  if_e	not	local01, #0
0e920     A7 1E 62 FC | 	wrlong	local01, fp
0e924     58 03 90 FD | 	jmp	#LR__1193
0e928                 | LR__1182
0e928                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
0e928     08 4E 05 F1 | 	add	fp, #8
0e92c     A7 1E 02 FB | 	rdlong	local01, fp
0e930     08 4E 85 F1 | 	sub	fp, #8
0e934     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e938     14 4E 05 A1 |  if_e	add	fp, #20
0e93c     A7 24 02 AB |  if_e	rdlong	local04, fp
0e940     14 4E 85 A1 |  if_e	sub	fp, #20
0e944     12 23 02 A6 |  if_e	mov	local03, local04
0e948     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e94c     38 00 90 5D |  if_ne	jmp	#LR__1183
0e950     00 1E 06 F6 | 	mov	local01, #0
0e954     A7 20 02 FB | 	rdlong	local02, fp
0e958     0C 4E 05 F1 | 	add	fp, #12
0e95c     A7 12 02 FB | 	rdlong	arg01, fp
0e960     0C 4E 85 F1 | 	sub	fp, #12
0e964     D4 C1 B0 FD | 	call	#__system___float_fromuns
0e968     FD 14 02 F6 | 	mov	arg02, result1
0e96c     10 13 02 F6 | 	mov	arg01, local02
0e970     01 16 06 F6 | 	mov	arg03, #1
0e974     FC C9 B0 FD | 	call	#__system___float_cmp
0e978     00 FA 0D F2 | 	cmp	result1, #0 wz
0e97c     00 1E 26 A6 |  if_e	not	local01, #0
0e980     A7 1E 62 FC | 	wrlong	local01, fp
0e984     F8 02 90 FD | 	jmp	#LR__1193
0e988                 | LR__1183
0e988                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
0e988     08 4E 05 F1 | 	add	fp, #8
0e98c     A7 1E 02 FB | 	rdlong	local01, fp
0e990     08 4E 85 F1 | 	sub	fp, #8
0e994     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e998     14 4E 05 A1 |  if_e	add	fp, #20
0e99c     A7 24 02 AB |  if_e	rdlong	local04, fp
0e9a0     14 4E 85 A1 |  if_e	sub	fp, #20
0e9a4     12 23 02 A6 |  if_e	mov	local03, local04
0e9a8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e9ac     44 00 90 5D |  if_ne	jmp	#LR__1184
0e9b0     00 1E 06 F6 | 	mov	local01, #0
0e9b4     A7 12 02 FB | 	rdlong	arg01, fp
0e9b8     09 13 52 F6 | 	abs	arg01, arg01 wc
0e9bc     1F 26 C6 C9 |  if_b	decod	local05, #31
0e9c0     00 26 06 36 |  if_ae	mov	local05, #0
0e9c4     74 C1 B0 FD | 	call	#__system___float_fromuns
0e9c8     13 FB 61 F5 | 	xor	result1, local05
0e9cc     FD 12 02 F6 | 	mov	arg01, result1
0e9d0     0C 4E 05 F1 | 	add	fp, #12
0e9d4     A7 14 02 FB | 	rdlong	arg02, fp
0e9d8     0C 4E 85 F1 | 	sub	fp, #12
0e9dc     01 16 06 F6 | 	mov	arg03, #1
0e9e0     90 C9 B0 FD | 	call	#__system___float_cmp
0e9e4     00 FA 0D F2 | 	cmp	result1, #0 wz
0e9e8     00 1E 26 A6 |  if_e	not	local01, #0
0e9ec     A7 1E 62 FC | 	wrlong	local01, fp
0e9f0     8C 02 90 FD | 	jmp	#LR__1193
0e9f4                 | LR__1184
0e9f4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
0e9f4     08 4E 05 F1 | 	add	fp, #8
0e9f8     A7 1E 02 FB | 	rdlong	local01, fp
0e9fc     08 4E 85 F1 | 	sub	fp, #8
0ea00     1C 1E 0E F2 | 	cmp	local01, #28 wz
0ea04     14 4E 05 A1 |  if_e	add	fp, #20
0ea08     A7 24 02 AB |  if_e	rdlong	local04, fp
0ea0c     14 4E 85 A1 |  if_e	sub	fp, #20
0ea10     12 23 02 A6 |  if_e	mov	local03, local04
0ea14     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0ea18     24 00 90 5D |  if_ne	jmp	#LR__1185
0ea1c     00 1E 06 F6 | 	mov	local01, #0
0ea20     A7 20 02 FB | 	rdlong	local02, fp
0ea24     0C 4E 05 F1 | 	add	fp, #12
0ea28     A7 22 02 FB | 	rdlong	local03, fp
0ea2c     0C 4E 85 F1 | 	sub	fp, #12
0ea30     11 21 0A F2 | 	cmp	local02, local03 wz
0ea34     01 1E 66 A6 |  if_e	neg	local01, #1
0ea38     A7 1E 62 FC | 	wrlong	local01, fp
0ea3c     40 02 90 FD | 	jmp	#LR__1193
0ea40                 | LR__1185
0ea40                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
0ea40     08 4E 05 F1 | 	add	fp, #8
0ea44     A7 1E 02 FB | 	rdlong	local01, fp
0ea48     08 4E 85 F1 | 	sub	fp, #8
0ea4c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0ea50     14 4E 05 A1 |  if_e	add	fp, #20
0ea54     A7 24 02 AB |  if_e	rdlong	local04, fp
0ea58     14 4E 85 A1 |  if_e	sub	fp, #20
0ea5c     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0ea60     24 00 90 5D |  if_ne	jmp	#LR__1186
0ea64     00 1E 06 F6 | 	mov	local01, #0
0ea68     A7 20 02 FB | 	rdlong	local02, fp
0ea6c     0C 4E 05 F1 | 	add	fp, #12
0ea70     A7 22 02 FB | 	rdlong	local03, fp
0ea74     0C 4E 85 F1 | 	sub	fp, #12
0ea78     11 21 0A F2 | 	cmp	local02, local03 wz
0ea7c     01 1E 66 A6 |  if_e	neg	local01, #1
0ea80     A7 1E 62 FC | 	wrlong	local01, fp
0ea84     F8 01 90 FD | 	jmp	#LR__1193
0ea88                 | LR__1186
0ea88                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
0ea88     08 4E 05 F1 | 	add	fp, #8
0ea8c     A7 1E 02 FB | 	rdlong	local01, fp
0ea90     08 4E 85 F1 | 	sub	fp, #8
0ea94     1D 1E 0E F2 | 	cmp	local01, #29 wz
0ea98     14 4E 05 A1 |  if_e	add	fp, #20
0ea9c     A7 22 02 AB |  if_e	rdlong	local03, fp
0eaa0     14 4E 85 A1 |  if_e	sub	fp, #20
0eaa4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0eaa8     34 00 90 5D |  if_ne	jmp	#LR__1187
0eaac     00 1E 06 F6 | 	mov	local01, #0
0eab0     A7 12 02 FB | 	rdlong	arg01, fp
0eab4     84 C0 B0 FD | 	call	#__system___float_fromuns
0eab8     FD 12 02 F6 | 	mov	arg01, result1
0eabc     0C 4E 05 F1 | 	add	fp, #12
0eac0     A7 14 02 FB | 	rdlong	arg02, fp
0eac4     0C 4E 85 F1 | 	sub	fp, #12
0eac8     01 16 06 F6 | 	mov	arg03, #1
0eacc     A4 C8 B0 FD | 	call	#__system___float_cmp
0ead0     00 FA 0D F2 | 	cmp	result1, #0 wz
0ead4     00 1E 26 A6 |  if_e	not	local01, #0
0ead8     A7 1E 62 FC | 	wrlong	local01, fp
0eadc     A0 01 90 FD | 	jmp	#LR__1193
0eae0                 | LR__1187
0eae0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
0eae0     08 4E 05 F1 | 	add	fp, #8
0eae4     A7 1E 02 FB | 	rdlong	local01, fp
0eae8     08 4E 85 F1 | 	sub	fp, #8
0eaec     1D 1E 0E F2 | 	cmp	local01, #29 wz
0eaf0     14 4E 05 A1 |  if_e	add	fp, #20
0eaf4     A7 22 02 AB |  if_e	rdlong	local03, fp
0eaf8     14 4E 85 A1 |  if_e	sub	fp, #20
0eafc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0eb00     24 00 90 5D |  if_ne	jmp	#LR__1188
0eb04     00 1E 06 F6 | 	mov	local01, #0
0eb08     A7 20 02 FB | 	rdlong	local02, fp
0eb0c     0C 4E 05 F1 | 	add	fp, #12
0eb10     A7 22 02 FB | 	rdlong	local03, fp
0eb14     0C 4E 85 F1 | 	sub	fp, #12
0eb18     11 21 0A F2 | 	cmp	local02, local03 wz
0eb1c     01 1E 66 A6 |  if_e	neg	local01, #1
0eb20     A7 1E 62 FC | 	wrlong	local01, fp
0eb24     58 01 90 FD | 	jmp	#LR__1193
0eb28                 | LR__1188
0eb28                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
0eb28     08 4E 05 F1 | 	add	fp, #8
0eb2c     A7 1E 02 FB | 	rdlong	local01, fp
0eb30     08 4E 85 F1 | 	sub	fp, #8
0eb34     1D 1E 0E F2 | 	cmp	local01, #29 wz
0eb38     14 4E 05 A1 |  if_e	add	fp, #20
0eb3c     A7 22 02 AB |  if_e	rdlong	local03, fp
0eb40     14 4E 85 A1 |  if_e	sub	fp, #20
0eb44     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0eb48     24 00 90 5D |  if_ne	jmp	#LR__1189
0eb4c     00 1E 06 F6 | 	mov	local01, #0
0eb50     A7 20 02 FB | 	rdlong	local02, fp
0eb54     0C 4E 05 F1 | 	add	fp, #12
0eb58     A7 22 02 FB | 	rdlong	local03, fp
0eb5c     0C 4E 85 F1 | 	sub	fp, #12
0eb60     11 21 0A F2 | 	cmp	local02, local03 wz
0eb64     01 1E 66 A6 |  if_e	neg	local01, #1
0eb68     A7 1E 62 FC | 	wrlong	local01, fp
0eb6c     10 01 90 FD | 	jmp	#LR__1193
0eb70                 | LR__1189
0eb70                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
0eb70     08 4E 05 F1 | 	add	fp, #8
0eb74     A7 1E 02 FB | 	rdlong	local01, fp
0eb78     08 4E 85 F1 | 	sub	fp, #8
0eb7c     2B 1E 0E F2 | 	cmp	local01, #43 wz
0eb80     14 4E 05 A1 |  if_e	add	fp, #20
0eb84     A7 22 02 AB |  if_e	rdlong	local03, fp
0eb88     14 4E 85 A1 |  if_e	sub	fp, #20
0eb8c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0eb90     30 00 90 5D |  if_ne	jmp	#LR__1190
0eb94     00 1E 06 F6 | 	mov	local01, #0
0eb98     A7 12 02 FB | 	rdlong	arg01, fp
0eb9c     2C D7 BF FD | 	call	#_convertstring
0eba0     FD 12 02 F6 | 	mov	arg01, result1
0eba4     0C 4E 05 F1 | 	add	fp, #12
0eba8     A7 14 02 FB | 	rdlong	arg02, fp
0ebac     0C 4E 85 F1 | 	sub	fp, #12
0ebb0     D0 99 B0 FD | 	call	#__system___string_cmp
0ebb4     00 FA 0D F2 | 	cmp	result1, #0 wz
0ebb8     00 1E 26 A6 |  if_e	not	local01, #0
0ebbc     A7 1E 62 FC | 	wrlong	local01, fp
0ebc0     BC 00 90 FD | 	jmp	#LR__1193
0ebc4                 | LR__1190
0ebc4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
0ebc4     08 4E 05 F1 | 	add	fp, #8
0ebc8     A7 1E 02 FB | 	rdlong	local01, fp
0ebcc     08 4E 85 F1 | 	sub	fp, #8
0ebd0     1F 1E 0E F2 | 	cmp	local01, #31 wz
0ebd4     14 4E 05 A1 |  if_e	add	fp, #20
0ebd8     A7 22 02 AB |  if_e	rdlong	local03, fp
0ebdc     14 4E 85 A1 |  if_e	sub	fp, #20
0ebe0     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0ebe4     34 00 90 5D |  if_ne	jmp	#LR__1191
0ebe8     00 1E 06 F6 | 	mov	local01, #0
0ebec     A7 20 02 FB | 	rdlong	local02, fp
0ebf0     0C 4E 05 F1 | 	add	fp, #12
0ebf4     A7 12 02 FB | 	rdlong	arg01, fp
0ebf8     0C 4E 85 F1 | 	sub	fp, #12
0ebfc     CC D6 BF FD | 	call	#_convertstring
0ec00     FD 14 02 F6 | 	mov	arg02, result1
0ec04     10 13 02 F6 | 	mov	arg01, local02
0ec08     78 99 B0 FD | 	call	#__system___string_cmp
0ec0c     00 FA 0D F2 | 	cmp	result1, #0 wz
0ec10     00 1E 26 A6 |  if_e	not	local01, #0
0ec14     A7 1E 62 FC | 	wrlong	local01, fp
0ec18     64 00 90 FD | 	jmp	#LR__1193
0ec1c                 | LR__1191
0ec1c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
0ec1c     08 4E 05 F1 | 	add	fp, #8
0ec20     A7 1E 02 FB | 	rdlong	local01, fp
0ec24     08 4E 85 F1 | 	sub	fp, #8
0ec28     2B 1E 0E F2 | 	cmp	local01, #43 wz
0ec2c     14 4E 05 A1 |  if_e	add	fp, #20
0ec30     A7 22 02 AB |  if_e	rdlong	local03, fp
0ec34     14 4E 85 A1 |  if_e	sub	fp, #20
0ec38     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0ec3c     3C 00 90 5D |  if_ne	jmp	#LR__1192
0ec40     00 1E 06 F6 | 	mov	local01, #0
0ec44     A7 12 02 FB | 	rdlong	arg01, fp
0ec48     80 D6 BF FD | 	call	#_convertstring
0ec4c     FD 20 02 F6 | 	mov	local02, result1
0ec50     0C 4E 05 F1 | 	add	fp, #12
0ec54     A7 12 02 FB | 	rdlong	arg01, fp
0ec58     0C 4E 85 F1 | 	sub	fp, #12
0ec5c     6C D6 BF FD | 	call	#_convertstring
0ec60     FD 14 02 F6 | 	mov	arg02, result1
0ec64     10 13 02 F6 | 	mov	arg01, local02
0ec68     18 99 B0 FD | 	call	#__system___string_cmp
0ec6c     00 FA 0D F2 | 	cmp	result1, #0 wz
0ec70     00 1E 26 A6 |  if_e	not	local01, #0
0ec74     A7 1E 62 FC | 	wrlong	local01, fp
0ec78     04 00 90 FD | 	jmp	#LR__1193
0ec7c                 | LR__1192
0ec7c     A7 00 68 FC | 	wrlong	#0, fp
0ec80                 | LR__1193
0ec80     08 4E 05 F1 | 	add	fp, #8
0ec84     A7 38 68 FC | 	wrlong	#28, fp
0ec88     08 4E 85 F1 | 	sub	fp, #8
0ec8c     A7 12 02 F6 | 	mov	arg01, fp
0ec90     C8 A5 BF FD | 	call	#_push
0ec94     A7 F0 03 F6 | 	mov	ptra, fp
0ec98     B2 00 A0 FD | 	call	#popregs_
0ec9c                 | _do_eq_ret
0ec9c     2D 00 64 FD | 	ret
0eca0                 | 
0eca0                 | ' 
0eca0                 | ' sub do_gt
0eca0                 | _do_gt
0eca0     05 4A 05 F6 | 	mov	COUNT_, #5
0eca4     A8 00 A0 FD | 	call	#pushregs_
0eca8     18 F0 07 F1 | 	add	ptra, #24
0ecac     14 A5 BF FD | 	call	#_pop
0ecb0     FD 1E 02 F6 | 	mov	local01, result1
0ecb4     FE 20 02 F6 | 	mov	local02, result2
0ecb8     FF 22 02 F6 | 	mov	local03, result3
0ecbc     0C 4E 05 F1 | 	add	fp, #12
0ecc0     A7 1E 62 FC | 	wrlong	local01, fp
0ecc4     04 4E 05 F1 | 	add	fp, #4
0ecc8     A7 20 62 FC | 	wrlong	local02, fp
0eccc     04 4E 05 F1 | 	add	fp, #4
0ecd0     A7 22 62 FC | 	wrlong	local03, fp
0ecd4     14 4E 85 F1 | 	sub	fp, #20
0ecd8     E8 A4 BF FD | 	call	#_pop
0ecdc     FF 22 02 F6 | 	mov	local03, result3
0ece0     A7 FA 61 FC | 	wrlong	result1, fp
0ece4     04 4E 05 F1 | 	add	fp, #4
0ece8     A7 FC 61 FC | 	wrlong	result2, fp
0ecec     04 4E 05 F1 | 	add	fp, #4
0ecf0     A7 22 62 FC | 	wrlong	local03, fp
0ecf4                 | ' t2=pop()
0ecf4                 | ' t1=pop()
0ecf4                 | ' 
0ecf4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
0ecf4     08 4E 85 F1 | 	sub	fp, #8
0ecf8     1F 22 0E F2 | 	cmp	local03, #31 wz
0ecfc     14 4E 05 A1 |  if_e	add	fp, #20
0ed00     A7 24 02 AB |  if_e	rdlong	local04, fp
0ed04     14 4E 85 A1 |  if_e	sub	fp, #20
0ed08     12 23 02 A6 |  if_e	mov	local03, local04
0ed0c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0ed10     28 00 90 5D |  if_ne	jmp	#LR__1200
0ed14     00 1E 06 F6 | 	mov	local01, #0
0ed18     A7 12 02 FB | 	rdlong	arg01, fp
0ed1c     0C 4E 05 F1 | 	add	fp, #12
0ed20     A7 14 02 FB | 	rdlong	arg02, fp
0ed24     0C 4E 85 F1 | 	sub	fp, #12
0ed28     58 98 B0 FD | 	call	#__system___string_cmp
0ed2c     01 FA 55 F2 | 	cmps	result1, #1 wc
0ed30     00 1E 26 36 |  if_ae	not	local01, #0
0ed34     A7 1E 62 FC | 	wrlong	local01, fp
0ed38     1C 04 90 FD | 	jmp	#LR__1213
0ed3c                 | LR__1200
0ed3c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
0ed3c     08 4E 05 F1 | 	add	fp, #8
0ed40     A7 1E 02 FB | 	rdlong	local01, fp
0ed44     08 4E 85 F1 | 	sub	fp, #8
0ed48     1E 1E 0E F2 | 	cmp	local01, #30 wz
0ed4c     14 4E 05 A1 |  if_e	add	fp, #20
0ed50     A7 24 02 AB |  if_e	rdlong	local04, fp
0ed54     14 4E 85 A1 |  if_e	sub	fp, #20
0ed58     12 23 02 A6 |  if_e	mov	local03, local04
0ed5c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0ed60     2C 00 90 5D |  if_ne	jmp	#LR__1201
0ed64     00 1E 06 F6 | 	mov	local01, #0
0ed68     A7 12 02 FB | 	rdlong	arg01, fp
0ed6c     0C 4E 05 F1 | 	add	fp, #12
0ed70     A7 14 02 FB | 	rdlong	arg02, fp
0ed74     0C 4E 85 F1 | 	sub	fp, #12
0ed78     01 16 66 F6 | 	neg	arg03, #1
0ed7c     F4 C5 B0 FD | 	call	#__system___float_cmp
0ed80     01 FA 55 F2 | 	cmps	result1, #1 wc
0ed84     00 1E 26 36 |  if_ae	not	local01, #0
0ed88     A7 1E 62 FC | 	wrlong	local01, fp
0ed8c     C8 03 90 FD | 	jmp	#LR__1213
0ed90                 | LR__1201
0ed90                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
0ed90     08 4E 05 F1 | 	add	fp, #8
0ed94     A7 1E 02 FB | 	rdlong	local01, fp
0ed98     08 4E 85 F1 | 	sub	fp, #8
0ed9c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0eda0     14 4E 05 A1 |  if_e	add	fp, #20
0eda4     A7 24 02 AB |  if_e	rdlong	local04, fp
0eda8     14 4E 85 A1 |  if_e	sub	fp, #20
0edac     12 23 02 A6 |  if_e	mov	local03, local04
0edb0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0edb4     48 00 90 5D |  if_ne	jmp	#LR__1202
0edb8     00 1E 06 F6 | 	mov	local01, #0
0edbc     A7 20 02 FB | 	rdlong	local02, fp
0edc0     0C 4E 05 F1 | 	add	fp, #12
0edc4     A7 12 02 FB | 	rdlong	arg01, fp
0edc8     0C 4E 85 F1 | 	sub	fp, #12
0edcc     09 13 52 F6 | 	abs	arg01, arg01 wc
0edd0     1F 26 C6 C9 |  if_b	decod	local05, #31
0edd4     00 26 06 36 |  if_ae	mov	local05, #0
0edd8     60 BD B0 FD | 	call	#__system___float_fromuns
0eddc     13 FB 61 F5 | 	xor	result1, local05
0ede0     FD 14 02 F6 | 	mov	arg02, result1
0ede4     10 13 02 F6 | 	mov	arg01, local02
0ede8     01 16 66 F6 | 	neg	arg03, #1
0edec     84 C5 B0 FD | 	call	#__system___float_cmp
0edf0     01 FA 55 F2 | 	cmps	result1, #1 wc
0edf4     00 1E 26 36 |  if_ae	not	local01, #0
0edf8     A7 1E 62 FC | 	wrlong	local01, fp
0edfc     58 03 90 FD | 	jmp	#LR__1213
0ee00                 | LR__1202
0ee00                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
0ee00     08 4E 05 F1 | 	add	fp, #8
0ee04     A7 1E 02 FB | 	rdlong	local01, fp
0ee08     08 4E 85 F1 | 	sub	fp, #8
0ee0c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0ee10     14 4E 05 A1 |  if_e	add	fp, #20
0ee14     A7 24 02 AB |  if_e	rdlong	local04, fp
0ee18     14 4E 85 A1 |  if_e	sub	fp, #20
0ee1c     12 23 02 A6 |  if_e	mov	local03, local04
0ee20     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0ee24     38 00 90 5D |  if_ne	jmp	#LR__1203
0ee28     00 1E 06 F6 | 	mov	local01, #0
0ee2c     A7 20 02 FB | 	rdlong	local02, fp
0ee30     0C 4E 05 F1 | 	add	fp, #12
0ee34     A7 12 02 FB | 	rdlong	arg01, fp
0ee38     0C 4E 85 F1 | 	sub	fp, #12
0ee3c     FC BC B0 FD | 	call	#__system___float_fromuns
0ee40     FD 14 02 F6 | 	mov	arg02, result1
0ee44     10 13 02 F6 | 	mov	arg01, local02
0ee48     01 16 66 F6 | 	neg	arg03, #1
0ee4c     24 C5 B0 FD | 	call	#__system___float_cmp
0ee50     01 FA 55 F2 | 	cmps	result1, #1 wc
0ee54     00 1E 26 36 |  if_ae	not	local01, #0
0ee58     A7 1E 62 FC | 	wrlong	local01, fp
0ee5c     F8 02 90 FD | 	jmp	#LR__1213
0ee60                 | LR__1203
0ee60                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
0ee60     08 4E 05 F1 | 	add	fp, #8
0ee64     A7 1E 02 FB | 	rdlong	local01, fp
0ee68     08 4E 85 F1 | 	sub	fp, #8
0ee6c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0ee70     14 4E 05 A1 |  if_e	add	fp, #20
0ee74     A7 24 02 AB |  if_e	rdlong	local04, fp
0ee78     14 4E 85 A1 |  if_e	sub	fp, #20
0ee7c     12 23 02 A6 |  if_e	mov	local03, local04
0ee80     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0ee84     44 00 90 5D |  if_ne	jmp	#LR__1204
0ee88     00 1E 06 F6 | 	mov	local01, #0
0ee8c     A7 12 02 FB | 	rdlong	arg01, fp
0ee90     09 13 52 F6 | 	abs	arg01, arg01 wc
0ee94     1F 26 C6 C9 |  if_b	decod	local05, #31
0ee98     00 26 06 36 |  if_ae	mov	local05, #0
0ee9c     9C BC B0 FD | 	call	#__system___float_fromuns
0eea0     13 FB 61 F5 | 	xor	result1, local05
0eea4     FD 12 02 F6 | 	mov	arg01, result1
0eea8     0C 4E 05 F1 | 	add	fp, #12
0eeac     A7 14 02 FB | 	rdlong	arg02, fp
0eeb0     0C 4E 85 F1 | 	sub	fp, #12
0eeb4     01 16 66 F6 | 	neg	arg03, #1
0eeb8     B8 C4 B0 FD | 	call	#__system___float_cmp
0eebc     01 FA 55 F2 | 	cmps	result1, #1 wc
0eec0     00 1E 26 36 |  if_ae	not	local01, #0
0eec4     A7 1E 62 FC | 	wrlong	local01, fp
0eec8     8C 02 90 FD | 	jmp	#LR__1213
0eecc                 | LR__1204
0eecc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
0eecc     08 4E 05 F1 | 	add	fp, #8
0eed0     A7 1E 02 FB | 	rdlong	local01, fp
0eed4     08 4E 85 F1 | 	sub	fp, #8
0eed8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0eedc     14 4E 05 A1 |  if_e	add	fp, #20
0eee0     A7 24 02 AB |  if_e	rdlong	local04, fp
0eee4     14 4E 85 A1 |  if_e	sub	fp, #20
0eee8     12 23 02 A6 |  if_e	mov	local03, local04
0eeec     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0eef0     24 00 90 5D |  if_ne	jmp	#LR__1205
0eef4     00 1E 06 F6 | 	mov	local01, #0
0eef8     A7 20 02 FB | 	rdlong	local02, fp
0eefc     0C 4E 05 F1 | 	add	fp, #12
0ef00     A7 22 02 FB | 	rdlong	local03, fp
0ef04     0C 4E 85 F1 | 	sub	fp, #12
0ef08     11 21 5A F2 | 	cmps	local02, local03 wcz
0ef0c     01 1E 66 16 |  if_a	neg	local01, #1
0ef10     A7 1E 62 FC | 	wrlong	local01, fp
0ef14     40 02 90 FD | 	jmp	#LR__1213
0ef18                 | LR__1205
0ef18                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
0ef18     08 4E 05 F1 | 	add	fp, #8
0ef1c     A7 1E 02 FB | 	rdlong	local01, fp
0ef20     08 4E 85 F1 | 	sub	fp, #8
0ef24     1C 1E 0E F2 | 	cmp	local01, #28 wz
0ef28     14 4E 05 A1 |  if_e	add	fp, #20
0ef2c     A7 24 02 AB |  if_e	rdlong	local04, fp
0ef30     14 4E 85 A1 |  if_e	sub	fp, #20
0ef34     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0ef38     24 00 90 5D |  if_ne	jmp	#LR__1206
0ef3c     00 1E 06 F6 | 	mov	local01, #0
0ef40     A7 20 02 FB | 	rdlong	local02, fp
0ef44     0C 4E 05 F1 | 	add	fp, #12
0ef48     A7 22 02 FB | 	rdlong	local03, fp
0ef4c     0C 4E 85 F1 | 	sub	fp, #12
0ef50     11 21 5A F2 | 	cmps	local02, local03 wcz
0ef54     01 1E 66 16 |  if_a	neg	local01, #1
0ef58     A7 1E 62 FC | 	wrlong	local01, fp
0ef5c     F8 01 90 FD | 	jmp	#LR__1213
0ef60                 | LR__1206
0ef60                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
0ef60     08 4E 05 F1 | 	add	fp, #8
0ef64     A7 1E 02 FB | 	rdlong	local01, fp
0ef68     08 4E 85 F1 | 	sub	fp, #8
0ef6c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0ef70     14 4E 05 A1 |  if_e	add	fp, #20
0ef74     A7 22 02 AB |  if_e	rdlong	local03, fp
0ef78     14 4E 85 A1 |  if_e	sub	fp, #20
0ef7c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0ef80     34 00 90 5D |  if_ne	jmp	#LR__1207
0ef84     00 1E 06 F6 | 	mov	local01, #0
0ef88     A7 12 02 FB | 	rdlong	arg01, fp
0ef8c     AC BB B0 FD | 	call	#__system___float_fromuns
0ef90     FD 12 02 F6 | 	mov	arg01, result1
0ef94     0C 4E 05 F1 | 	add	fp, #12
0ef98     A7 14 02 FB | 	rdlong	arg02, fp
0ef9c     0C 4E 85 F1 | 	sub	fp, #12
0efa0     01 16 66 F6 | 	neg	arg03, #1
0efa4     CC C3 B0 FD | 	call	#__system___float_cmp
0efa8     01 FA 55 F2 | 	cmps	result1, #1 wc
0efac     00 1E 26 36 |  if_ae	not	local01, #0
0efb0     A7 1E 62 FC | 	wrlong	local01, fp
0efb4     A0 01 90 FD | 	jmp	#LR__1213
0efb8                 | LR__1207
0efb8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
0efb8     08 4E 05 F1 | 	add	fp, #8
0efbc     A7 1E 02 FB | 	rdlong	local01, fp
0efc0     08 4E 85 F1 | 	sub	fp, #8
0efc4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0efc8     14 4E 05 A1 |  if_e	add	fp, #20
0efcc     A7 22 02 AB |  if_e	rdlong	local03, fp
0efd0     14 4E 85 A1 |  if_e	sub	fp, #20
0efd4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0efd8     24 00 90 5D |  if_ne	jmp	#LR__1208
0efdc     00 1E 06 F6 | 	mov	local01, #0
0efe0     A7 20 02 FB | 	rdlong	local02, fp
0efe4     0C 4E 05 F1 | 	add	fp, #12
0efe8     A7 22 02 FB | 	rdlong	local03, fp
0efec     0C 4E 85 F1 | 	sub	fp, #12
0eff0     11 21 5A F2 | 	cmps	local02, local03 wcz
0eff4     01 1E 66 16 |  if_a	neg	local01, #1
0eff8     A7 1E 62 FC | 	wrlong	local01, fp
0effc     58 01 90 FD | 	jmp	#LR__1213
0f000                 | LR__1208
0f000                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
0f000     08 4E 05 F1 | 	add	fp, #8
0f004     A7 1E 02 FB | 	rdlong	local01, fp
0f008     08 4E 85 F1 | 	sub	fp, #8
0f00c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f010     14 4E 05 A1 |  if_e	add	fp, #20
0f014     A7 22 02 AB |  if_e	rdlong	local03, fp
0f018     14 4E 85 A1 |  if_e	sub	fp, #20
0f01c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f020     24 00 90 5D |  if_ne	jmp	#LR__1209
0f024     00 1E 06 F6 | 	mov	local01, #0
0f028     A7 20 02 FB | 	rdlong	local02, fp
0f02c     0C 4E 05 F1 | 	add	fp, #12
0f030     A7 22 02 FB | 	rdlong	local03, fp
0f034     0C 4E 85 F1 | 	sub	fp, #12
0f038     11 21 1A F2 | 	cmp	local02, local03 wcz
0f03c     01 1E 66 16 |  if_a	neg	local01, #1
0f040     A7 1E 62 FC | 	wrlong	local01, fp
0f044     10 01 90 FD | 	jmp	#LR__1213
0f048                 | LR__1209
0f048                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
0f048     08 4E 05 F1 | 	add	fp, #8
0f04c     A7 1E 02 FB | 	rdlong	local01, fp
0f050     08 4E 85 F1 | 	sub	fp, #8
0f054     2B 1E 0E F2 | 	cmp	local01, #43 wz
0f058     14 4E 05 A1 |  if_e	add	fp, #20
0f05c     A7 22 02 AB |  if_e	rdlong	local03, fp
0f060     14 4E 85 A1 |  if_e	sub	fp, #20
0f064     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0f068     30 00 90 5D |  if_ne	jmp	#LR__1210
0f06c     00 1E 06 F6 | 	mov	local01, #0
0f070     A7 12 02 FB | 	rdlong	arg01, fp
0f074     54 D2 BF FD | 	call	#_convertstring
0f078     FD 12 02 F6 | 	mov	arg01, result1
0f07c     0C 4E 05 F1 | 	add	fp, #12
0f080     A7 14 02 FB | 	rdlong	arg02, fp
0f084     0C 4E 85 F1 | 	sub	fp, #12
0f088     F8 94 B0 FD | 	call	#__system___string_cmp
0f08c     01 FA 55 F2 | 	cmps	result1, #1 wc
0f090     00 1E 26 36 |  if_ae	not	local01, #0
0f094     A7 1E 62 FC | 	wrlong	local01, fp
0f098     BC 00 90 FD | 	jmp	#LR__1213
0f09c                 | LR__1210
0f09c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
0f09c     08 4E 05 F1 | 	add	fp, #8
0f0a0     A7 1E 02 FB | 	rdlong	local01, fp
0f0a4     08 4E 85 F1 | 	sub	fp, #8
0f0a8     1F 1E 0E F2 | 	cmp	local01, #31 wz
0f0ac     14 4E 05 A1 |  if_e	add	fp, #20
0f0b0     A7 22 02 AB |  if_e	rdlong	local03, fp
0f0b4     14 4E 85 A1 |  if_e	sub	fp, #20
0f0b8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0f0bc     34 00 90 5D |  if_ne	jmp	#LR__1211
0f0c0     00 1E 06 F6 | 	mov	local01, #0
0f0c4     A7 20 02 FB | 	rdlong	local02, fp
0f0c8     0C 4E 05 F1 | 	add	fp, #12
0f0cc     A7 12 02 FB | 	rdlong	arg01, fp
0f0d0     0C 4E 85 F1 | 	sub	fp, #12
0f0d4     F4 D1 BF FD | 	call	#_convertstring
0f0d8     FD 14 02 F6 | 	mov	arg02, result1
0f0dc     10 13 02 F6 | 	mov	arg01, local02
0f0e0     A0 94 B0 FD | 	call	#__system___string_cmp
0f0e4     01 FA 55 F2 | 	cmps	result1, #1 wc
0f0e8     00 1E 26 36 |  if_ae	not	local01, #0
0f0ec     A7 1E 62 FC | 	wrlong	local01, fp
0f0f0     64 00 90 FD | 	jmp	#LR__1213
0f0f4                 | LR__1211
0f0f4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
0f0f4     08 4E 05 F1 | 	add	fp, #8
0f0f8     A7 1E 02 FB | 	rdlong	local01, fp
0f0fc     08 4E 85 F1 | 	sub	fp, #8
0f100     2B 1E 0E F2 | 	cmp	local01, #43 wz
0f104     14 4E 05 A1 |  if_e	add	fp, #20
0f108     A7 22 02 AB |  if_e	rdlong	local03, fp
0f10c     14 4E 85 A1 |  if_e	sub	fp, #20
0f110     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0f114     3C 00 90 5D |  if_ne	jmp	#LR__1212
0f118     00 1E 06 F6 | 	mov	local01, #0
0f11c     A7 12 02 FB | 	rdlong	arg01, fp
0f120     A8 D1 BF FD | 	call	#_convertstring
0f124     FD 20 02 F6 | 	mov	local02, result1
0f128     0C 4E 05 F1 | 	add	fp, #12
0f12c     A7 12 02 FB | 	rdlong	arg01, fp
0f130     0C 4E 85 F1 | 	sub	fp, #12
0f134     94 D1 BF FD | 	call	#_convertstring
0f138     FD 14 02 F6 | 	mov	arg02, result1
0f13c     10 13 02 F6 | 	mov	arg01, local02
0f140     40 94 B0 FD | 	call	#__system___string_cmp
0f144     01 FA 55 F2 | 	cmps	result1, #1 wc
0f148     00 1E 26 36 |  if_ae	not	local01, #0
0f14c     A7 1E 62 FC | 	wrlong	local01, fp
0f150     04 00 90 FD | 	jmp	#LR__1213
0f154                 | LR__1212
0f154     A7 00 68 FC | 	wrlong	#0, fp
0f158                 | LR__1213
0f158     08 4E 05 F1 | 	add	fp, #8
0f15c     A7 38 68 FC | 	wrlong	#28, fp
0f160     08 4E 85 F1 | 	sub	fp, #8
0f164     A7 12 02 F6 | 	mov	arg01, fp
0f168     F0 A0 BF FD | 	call	#_push
0f16c     A7 F0 03 F6 | 	mov	ptra, fp
0f170     B2 00 A0 FD | 	call	#popregs_
0f174                 | _do_gt_ret
0f174     2D 00 64 FD | 	ret
0f178                 | 
0f178                 | ' 
0f178                 | ' sub do_lt
0f178                 | _do_lt
0f178     05 4A 05 F6 | 	mov	COUNT_, #5
0f17c     A8 00 A0 FD | 	call	#pushregs_
0f180     18 F0 07 F1 | 	add	ptra, #24
0f184     3C A0 BF FD | 	call	#_pop
0f188     FD 1E 02 F6 | 	mov	local01, result1
0f18c     FE 20 02 F6 | 	mov	local02, result2
0f190     FF 22 02 F6 | 	mov	local03, result3
0f194     0C 4E 05 F1 | 	add	fp, #12
0f198     A7 1E 62 FC | 	wrlong	local01, fp
0f19c     04 4E 05 F1 | 	add	fp, #4
0f1a0     A7 20 62 FC | 	wrlong	local02, fp
0f1a4     04 4E 05 F1 | 	add	fp, #4
0f1a8     A7 22 62 FC | 	wrlong	local03, fp
0f1ac     14 4E 85 F1 | 	sub	fp, #20
0f1b0     10 A0 BF FD | 	call	#_pop
0f1b4     FF 22 02 F6 | 	mov	local03, result3
0f1b8     A7 FA 61 FC | 	wrlong	result1, fp
0f1bc     04 4E 05 F1 | 	add	fp, #4
0f1c0     A7 FC 61 FC | 	wrlong	result2, fp
0f1c4     04 4E 05 F1 | 	add	fp, #4
0f1c8     A7 22 62 FC | 	wrlong	local03, fp
0f1cc                 | ' t2=pop()
0f1cc                 | ' t1=pop()
0f1cc                 | ' 
0f1cc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
0f1cc     08 4E 85 F1 | 	sub	fp, #8
0f1d0     1F 22 0E F2 | 	cmp	local03, #31 wz
0f1d4     14 4E 05 A1 |  if_e	add	fp, #20
0f1d8     A7 24 02 AB |  if_e	rdlong	local04, fp
0f1dc     14 4E 85 A1 |  if_e	sub	fp, #20
0f1e0     12 23 02 A6 |  if_e	mov	local03, local04
0f1e4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0f1e8     28 00 90 5D |  if_ne	jmp	#LR__1220
0f1ec     00 1E 06 F6 | 	mov	local01, #0
0f1f0     A7 12 02 FB | 	rdlong	arg01, fp
0f1f4     0C 4E 05 F1 | 	add	fp, #12
0f1f8     A7 14 02 FB | 	rdlong	arg02, fp
0f1fc     0C 4E 85 F1 | 	sub	fp, #12
0f200     80 93 B0 FD | 	call	#__system___string_cmp
0f204     00 FA 55 F2 | 	cmps	result1, #0 wc
0f208     00 1E 26 C6 |  if_b	not	local01, #0
0f20c     A7 1E 62 FC | 	wrlong	local01, fp
0f210     0C 04 90 FD | 	jmp	#LR__1233
0f214                 | LR__1220
0f214                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
0f214     08 4E 05 F1 | 	add	fp, #8
0f218     A7 1E 02 FB | 	rdlong	local01, fp
0f21c     08 4E 85 F1 | 	sub	fp, #8
0f220     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f224     14 4E 05 A1 |  if_e	add	fp, #20
0f228     A7 24 02 AB |  if_e	rdlong	local04, fp
0f22c     14 4E 85 A1 |  if_e	sub	fp, #20
0f230     12 23 02 A6 |  if_e	mov	local03, local04
0f234     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f238     2C 00 90 5D |  if_ne	jmp	#LR__1221
0f23c     00 1E 06 F6 | 	mov	local01, #0
0f240     A7 12 02 FB | 	rdlong	arg01, fp
0f244     0C 4E 05 F1 | 	add	fp, #12
0f248     A7 14 02 FB | 	rdlong	arg02, fp
0f24c     0C 4E 85 F1 | 	sub	fp, #12
0f250     01 16 06 F6 | 	mov	arg03, #1
0f254     1C C1 B0 FD | 	call	#__system___float_cmp
0f258     00 FA 55 F2 | 	cmps	result1, #0 wc
0f25c     00 1E 26 C6 |  if_b	not	local01, #0
0f260     A7 1E 62 FC | 	wrlong	local01, fp
0f264     B8 03 90 FD | 	jmp	#LR__1233
0f268                 | LR__1221
0f268                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
0f268     08 4E 05 F1 | 	add	fp, #8
0f26c     A7 1E 02 FB | 	rdlong	local01, fp
0f270     08 4E 85 F1 | 	sub	fp, #8
0f274     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f278     14 4E 05 A1 |  if_e	add	fp, #20
0f27c     A7 24 02 AB |  if_e	rdlong	local04, fp
0f280     14 4E 85 A1 |  if_e	sub	fp, #20
0f284     12 23 02 A6 |  if_e	mov	local03, local04
0f288     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f28c     48 00 90 5D |  if_ne	jmp	#LR__1222
0f290     00 1E 06 F6 | 	mov	local01, #0
0f294     A7 20 02 FB | 	rdlong	local02, fp
0f298     0C 4E 05 F1 | 	add	fp, #12
0f29c     A7 12 02 FB | 	rdlong	arg01, fp
0f2a0     0C 4E 85 F1 | 	sub	fp, #12
0f2a4     09 13 52 F6 | 	abs	arg01, arg01 wc
0f2a8     1F 26 C6 C9 |  if_b	decod	local05, #31
0f2ac     00 26 06 36 |  if_ae	mov	local05, #0
0f2b0     88 B8 B0 FD | 	call	#__system___float_fromuns
0f2b4     13 FB 61 F5 | 	xor	result1, local05
0f2b8     FD 14 02 F6 | 	mov	arg02, result1
0f2bc     10 13 02 F6 | 	mov	arg01, local02
0f2c0     01 16 06 F6 | 	mov	arg03, #1
0f2c4     AC C0 B0 FD | 	call	#__system___float_cmp
0f2c8     00 FA 55 F2 | 	cmps	result1, #0 wc
0f2cc     00 1E 26 C6 |  if_b	not	local01, #0
0f2d0     A7 1E 62 FC | 	wrlong	local01, fp
0f2d4     48 03 90 FD | 	jmp	#LR__1233
0f2d8                 | LR__1222
0f2d8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
0f2d8     08 4E 05 F1 | 	add	fp, #8
0f2dc     A7 1E 02 FB | 	rdlong	local01, fp
0f2e0     08 4E 85 F1 | 	sub	fp, #8
0f2e4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f2e8     14 4E 05 A1 |  if_e	add	fp, #20
0f2ec     A7 24 02 AB |  if_e	rdlong	local04, fp
0f2f0     14 4E 85 A1 |  if_e	sub	fp, #20
0f2f4     12 23 02 A6 |  if_e	mov	local03, local04
0f2f8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f2fc     38 00 90 5D |  if_ne	jmp	#LR__1223
0f300     00 1E 06 F6 | 	mov	local01, #0
0f304     A7 20 02 FB | 	rdlong	local02, fp
0f308     0C 4E 05 F1 | 	add	fp, #12
0f30c     A7 12 02 FB | 	rdlong	arg01, fp
0f310     0C 4E 85 F1 | 	sub	fp, #12
0f314     24 B8 B0 FD | 	call	#__system___float_fromuns
0f318     FD 14 02 F6 | 	mov	arg02, result1
0f31c     10 13 02 F6 | 	mov	arg01, local02
0f320     01 16 06 F6 | 	mov	arg03, #1
0f324     4C C0 B0 FD | 	call	#__system___float_cmp
0f328     00 FA 55 F2 | 	cmps	result1, #0 wc
0f32c     00 1E 26 C6 |  if_b	not	local01, #0
0f330     A7 1E 62 FC | 	wrlong	local01, fp
0f334     E8 02 90 FD | 	jmp	#LR__1233
0f338                 | LR__1223
0f338                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
0f338     08 4E 05 F1 | 	add	fp, #8
0f33c     A7 1E 02 FB | 	rdlong	local01, fp
0f340     08 4E 85 F1 | 	sub	fp, #8
0f344     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f348     14 4E 05 A1 |  if_e	add	fp, #20
0f34c     A7 24 02 AB |  if_e	rdlong	local04, fp
0f350     14 4E 85 A1 |  if_e	sub	fp, #20
0f354     12 23 02 A6 |  if_e	mov	local03, local04
0f358     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f35c     44 00 90 5D |  if_ne	jmp	#LR__1224
0f360     00 1E 06 F6 | 	mov	local01, #0
0f364     A7 12 02 FB | 	rdlong	arg01, fp
0f368     09 13 52 F6 | 	abs	arg01, arg01 wc
0f36c     1F 26 C6 C9 |  if_b	decod	local05, #31
0f370     00 26 06 36 |  if_ae	mov	local05, #0
0f374     C4 B7 B0 FD | 	call	#__system___float_fromuns
0f378     13 FB 61 F5 | 	xor	result1, local05
0f37c     FD 12 02 F6 | 	mov	arg01, result1
0f380     0C 4E 05 F1 | 	add	fp, #12
0f384     A7 14 02 FB | 	rdlong	arg02, fp
0f388     0C 4E 85 F1 | 	sub	fp, #12
0f38c     01 16 06 F6 | 	mov	arg03, #1
0f390     E0 BF B0 FD | 	call	#__system___float_cmp
0f394     00 FA 55 F2 | 	cmps	result1, #0 wc
0f398     00 1E 26 C6 |  if_b	not	local01, #0
0f39c     A7 1E 62 FC | 	wrlong	local01, fp
0f3a0     7C 02 90 FD | 	jmp	#LR__1233
0f3a4                 | LR__1224
0f3a4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
0f3a4     08 4E 05 F1 | 	add	fp, #8
0f3a8     A7 1E 02 FB | 	rdlong	local01, fp
0f3ac     08 4E 85 F1 | 	sub	fp, #8
0f3b0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f3b4     14 4E 05 A1 |  if_e	add	fp, #20
0f3b8     A7 24 02 AB |  if_e	rdlong	local04, fp
0f3bc     14 4E 85 A1 |  if_e	sub	fp, #20
0f3c0     12 23 02 A6 |  if_e	mov	local03, local04
0f3c4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f3c8     20 00 90 5D |  if_ne	jmp	#LR__1225
0f3cc     A7 20 02 FB | 	rdlong	local02, fp
0f3d0     0C 4E 05 F1 | 	add	fp, #12
0f3d4     A7 22 02 FB | 	rdlong	local03, fp
0f3d8     0C 4E 85 F1 | 	sub	fp, #12
0f3dc     11 21 52 F2 | 	cmps	local02, local03 wc
0f3e0     0F 1F A2 F1 | 	subx	local01, local01
0f3e4     A7 1E 62 FC | 	wrlong	local01, fp
0f3e8     34 02 90 FD | 	jmp	#LR__1233
0f3ec                 | LR__1225
0f3ec                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
0f3ec     08 4E 05 F1 | 	add	fp, #8
0f3f0     A7 1E 02 FB | 	rdlong	local01, fp
0f3f4     08 4E 85 F1 | 	sub	fp, #8
0f3f8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f3fc     14 4E 05 A1 |  if_e	add	fp, #20
0f400     A7 24 02 AB |  if_e	rdlong	local04, fp
0f404     14 4E 85 A1 |  if_e	sub	fp, #20
0f408     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0f40c     20 00 90 5D |  if_ne	jmp	#LR__1226
0f410     A7 20 02 FB | 	rdlong	local02, fp
0f414     0C 4E 05 F1 | 	add	fp, #12
0f418     A7 22 02 FB | 	rdlong	local03, fp
0f41c     0C 4E 85 F1 | 	sub	fp, #12
0f420     11 21 52 F2 | 	cmps	local02, local03 wc
0f424     0F 1F A2 F1 | 	subx	local01, local01
0f428     A7 1E 62 FC | 	wrlong	local01, fp
0f42c     F0 01 90 FD | 	jmp	#LR__1233
0f430                 | LR__1226
0f430                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
0f430     08 4E 05 F1 | 	add	fp, #8
0f434     A7 1E 02 FB | 	rdlong	local01, fp
0f438     08 4E 85 F1 | 	sub	fp, #8
0f43c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f440     14 4E 05 A1 |  if_e	add	fp, #20
0f444     A7 22 02 AB |  if_e	rdlong	local03, fp
0f448     14 4E 85 A1 |  if_e	sub	fp, #20
0f44c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f450     34 00 90 5D |  if_ne	jmp	#LR__1227
0f454     00 1E 06 F6 | 	mov	local01, #0
0f458     A7 12 02 FB | 	rdlong	arg01, fp
0f45c     DC B6 B0 FD | 	call	#__system___float_fromuns
0f460     FD 12 02 F6 | 	mov	arg01, result1
0f464     0C 4E 05 F1 | 	add	fp, #12
0f468     A7 14 02 FB | 	rdlong	arg02, fp
0f46c     0C 4E 85 F1 | 	sub	fp, #12
0f470     01 16 06 F6 | 	mov	arg03, #1
0f474     FC BE B0 FD | 	call	#__system___float_cmp
0f478     00 FA 55 F2 | 	cmps	result1, #0 wc
0f47c     00 1E 26 C6 |  if_b	not	local01, #0
0f480     A7 1E 62 FC | 	wrlong	local01, fp
0f484     98 01 90 FD | 	jmp	#LR__1233
0f488                 | LR__1227
0f488                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
0f488     08 4E 05 F1 | 	add	fp, #8
0f48c     A7 1E 02 FB | 	rdlong	local01, fp
0f490     08 4E 85 F1 | 	sub	fp, #8
0f494     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f498     14 4E 05 A1 |  if_e	add	fp, #20
0f49c     A7 22 02 AB |  if_e	rdlong	local03, fp
0f4a0     14 4E 85 A1 |  if_e	sub	fp, #20
0f4a4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f4a8     20 00 90 5D |  if_ne	jmp	#LR__1228
0f4ac     A7 20 02 FB | 	rdlong	local02, fp
0f4b0     0C 4E 05 F1 | 	add	fp, #12
0f4b4     A7 22 02 FB | 	rdlong	local03, fp
0f4b8     0C 4E 85 F1 | 	sub	fp, #12
0f4bc     11 21 52 F2 | 	cmps	local02, local03 wc
0f4c0     0F 1F A2 F1 | 	subx	local01, local01
0f4c4     A7 1E 62 FC | 	wrlong	local01, fp
0f4c8     54 01 90 FD | 	jmp	#LR__1233
0f4cc                 | LR__1228
0f4cc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
0f4cc     08 4E 05 F1 | 	add	fp, #8
0f4d0     A7 1E 02 FB | 	rdlong	local01, fp
0f4d4     08 4E 85 F1 | 	sub	fp, #8
0f4d8     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f4dc     14 4E 05 A1 |  if_e	add	fp, #20
0f4e0     A7 22 02 AB |  if_e	rdlong	local03, fp
0f4e4     14 4E 85 A1 |  if_e	sub	fp, #20
0f4e8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f4ec     20 00 90 5D |  if_ne	jmp	#LR__1229
0f4f0     A7 20 02 FB | 	rdlong	local02, fp
0f4f4     0C 4E 05 F1 | 	add	fp, #12
0f4f8     A7 22 02 FB | 	rdlong	local03, fp
0f4fc     0C 4E 85 F1 | 	sub	fp, #12
0f500     11 21 12 F2 | 	cmp	local02, local03 wc
0f504     0F 1F A2 F1 | 	subx	local01, local01
0f508     A7 1E 62 FC | 	wrlong	local01, fp
0f50c     10 01 90 FD | 	jmp	#LR__1233
0f510                 | LR__1229
0f510                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
0f510     08 4E 05 F1 | 	add	fp, #8
0f514     A7 1E 02 FB | 	rdlong	local01, fp
0f518     08 4E 85 F1 | 	sub	fp, #8
0f51c     2B 1E 0E F2 | 	cmp	local01, #43 wz
0f520     14 4E 05 A1 |  if_e	add	fp, #20
0f524     A7 22 02 AB |  if_e	rdlong	local03, fp
0f528     14 4E 85 A1 |  if_e	sub	fp, #20
0f52c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0f530     30 00 90 5D |  if_ne	jmp	#LR__1230
0f534     00 1E 06 F6 | 	mov	local01, #0
0f538     A7 12 02 FB | 	rdlong	arg01, fp
0f53c     8C CD BF FD | 	call	#_convertstring
0f540     FD 12 02 F6 | 	mov	arg01, result1
0f544     0C 4E 05 F1 | 	add	fp, #12
0f548     A7 14 02 FB | 	rdlong	arg02, fp
0f54c     0C 4E 85 F1 | 	sub	fp, #12
0f550     30 90 B0 FD | 	call	#__system___string_cmp
0f554     00 FA 55 F2 | 	cmps	result1, #0 wc
0f558     00 1E 26 C6 |  if_b	not	local01, #0
0f55c     A7 1E 62 FC | 	wrlong	local01, fp
0f560     BC 00 90 FD | 	jmp	#LR__1233
0f564                 | LR__1230
0f564                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
0f564     08 4E 05 F1 | 	add	fp, #8
0f568     A7 1E 02 FB | 	rdlong	local01, fp
0f56c     08 4E 85 F1 | 	sub	fp, #8
0f570     1F 1E 0E F2 | 	cmp	local01, #31 wz
0f574     14 4E 05 A1 |  if_e	add	fp, #20
0f578     A7 22 02 AB |  if_e	rdlong	local03, fp
0f57c     14 4E 85 A1 |  if_e	sub	fp, #20
0f580     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0f584     34 00 90 5D |  if_ne	jmp	#LR__1231
0f588     00 1E 06 F6 | 	mov	local01, #0
0f58c     A7 20 02 FB | 	rdlong	local02, fp
0f590     0C 4E 05 F1 | 	add	fp, #12
0f594     A7 12 02 FB | 	rdlong	arg01, fp
0f598     0C 4E 85 F1 | 	sub	fp, #12
0f59c     2C CD BF FD | 	call	#_convertstring
0f5a0     FD 14 02 F6 | 	mov	arg02, result1
0f5a4     10 13 02 F6 | 	mov	arg01, local02
0f5a8     D8 8F B0 FD | 	call	#__system___string_cmp
0f5ac     00 FA 55 F2 | 	cmps	result1, #0 wc
0f5b0     00 1E 26 C6 |  if_b	not	local01, #0
0f5b4     A7 1E 62 FC | 	wrlong	local01, fp
0f5b8     64 00 90 FD | 	jmp	#LR__1233
0f5bc                 | LR__1231
0f5bc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
0f5bc     08 4E 05 F1 | 	add	fp, #8
0f5c0     A7 1E 02 FB | 	rdlong	local01, fp
0f5c4     08 4E 85 F1 | 	sub	fp, #8
0f5c8     2B 1E 0E F2 | 	cmp	local01, #43 wz
0f5cc     14 4E 05 A1 |  if_e	add	fp, #20
0f5d0     A7 22 02 AB |  if_e	rdlong	local03, fp
0f5d4     14 4E 85 A1 |  if_e	sub	fp, #20
0f5d8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0f5dc     3C 00 90 5D |  if_ne	jmp	#LR__1232
0f5e0     00 1E 06 F6 | 	mov	local01, #0
0f5e4     A7 12 02 FB | 	rdlong	arg01, fp
0f5e8     E0 CC BF FD | 	call	#_convertstring
0f5ec     FD 20 02 F6 | 	mov	local02, result1
0f5f0     0C 4E 05 F1 | 	add	fp, #12
0f5f4     A7 12 02 FB | 	rdlong	arg01, fp
0f5f8     0C 4E 85 F1 | 	sub	fp, #12
0f5fc     CC CC BF FD | 	call	#_convertstring
0f600     FD 14 02 F6 | 	mov	arg02, result1
0f604     10 13 02 F6 | 	mov	arg01, local02
0f608     78 8F B0 FD | 	call	#__system___string_cmp
0f60c     00 FA 55 F2 | 	cmps	result1, #0 wc
0f610     00 1E 26 C6 |  if_b	not	local01, #0
0f614     A7 1E 62 FC | 	wrlong	local01, fp
0f618     04 00 90 FD | 	jmp	#LR__1233
0f61c                 | LR__1232
0f61c     A7 00 68 FC | 	wrlong	#0, fp
0f620                 | LR__1233
0f620     08 4E 05 F1 | 	add	fp, #8
0f624     A7 38 68 FC | 	wrlong	#28, fp
0f628     08 4E 85 F1 | 	sub	fp, #8
0f62c     A7 12 02 F6 | 	mov	arg01, fp
0f630     28 9C BF FD | 	call	#_push
0f634     A7 F0 03 F6 | 	mov	ptra, fp
0f638     B2 00 A0 FD | 	call	#popregs_
0f63c                 | _do_lt_ret
0f63c     2D 00 64 FD | 	ret
0f640                 | 
0f640                 | ' 
0f640                 | ' sub do_ge
0f640                 | _do_ge
0f640     05 4A 05 F6 | 	mov	COUNT_, #5
0f644     A8 00 A0 FD | 	call	#pushregs_
0f648     18 F0 07 F1 | 	add	ptra, #24
0f64c     74 9B BF FD | 	call	#_pop
0f650     FD 1E 02 F6 | 	mov	local01, result1
0f654     FE 20 02 F6 | 	mov	local02, result2
0f658     FF 22 02 F6 | 	mov	local03, result3
0f65c     0C 4E 05 F1 | 	add	fp, #12
0f660     A7 1E 62 FC | 	wrlong	local01, fp
0f664     04 4E 05 F1 | 	add	fp, #4
0f668     A7 20 62 FC | 	wrlong	local02, fp
0f66c     04 4E 05 F1 | 	add	fp, #4
0f670     A7 22 62 FC | 	wrlong	local03, fp
0f674     14 4E 85 F1 | 	sub	fp, #20
0f678     48 9B BF FD | 	call	#_pop
0f67c     FF 22 02 F6 | 	mov	local03, result3
0f680     A7 FA 61 FC | 	wrlong	result1, fp
0f684     04 4E 05 F1 | 	add	fp, #4
0f688     A7 FC 61 FC | 	wrlong	result2, fp
0f68c     04 4E 05 F1 | 	add	fp, #4
0f690     A7 22 62 FC | 	wrlong	local03, fp
0f694                 | ' t2=pop()
0f694                 | ' t1=pop()
0f694                 | ' 
0f694                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
0f694     08 4E 85 F1 | 	sub	fp, #8
0f698     1F 22 0E F2 | 	cmp	local03, #31 wz
0f69c     14 4E 05 A1 |  if_e	add	fp, #20
0f6a0     A7 24 02 AB |  if_e	rdlong	local04, fp
0f6a4     14 4E 85 A1 |  if_e	sub	fp, #20
0f6a8     12 23 02 A6 |  if_e	mov	local03, local04
0f6ac     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0f6b0     28 00 90 5D |  if_ne	jmp	#LR__1240
0f6b4     00 1E 06 F6 | 	mov	local01, #0
0f6b8     A7 12 02 FB | 	rdlong	arg01, fp
0f6bc     0C 4E 05 F1 | 	add	fp, #12
0f6c0     A7 14 02 FB | 	rdlong	arg02, fp
0f6c4     0C 4E 85 F1 | 	sub	fp, #12
0f6c8     B8 8E B0 FD | 	call	#__system___string_cmp
0f6cc     00 FA 55 F2 | 	cmps	result1, #0 wc
0f6d0     00 1E 26 36 |  if_ae	not	local01, #0
0f6d4     A7 1E 62 FC | 	wrlong	local01, fp
0f6d8     1C 04 90 FD | 	jmp	#LR__1253
0f6dc                 | LR__1240
0f6dc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
0f6dc     08 4E 05 F1 | 	add	fp, #8
0f6e0     A7 1E 02 FB | 	rdlong	local01, fp
0f6e4     08 4E 85 F1 | 	sub	fp, #8
0f6e8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f6ec     14 4E 05 A1 |  if_e	add	fp, #20
0f6f0     A7 24 02 AB |  if_e	rdlong	local04, fp
0f6f4     14 4E 85 A1 |  if_e	sub	fp, #20
0f6f8     12 23 02 A6 |  if_e	mov	local03, local04
0f6fc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f700     2C 00 90 5D |  if_ne	jmp	#LR__1241
0f704     00 1E 06 F6 | 	mov	local01, #0
0f708     A7 12 02 FB | 	rdlong	arg01, fp
0f70c     0C 4E 05 F1 | 	add	fp, #12
0f710     A7 14 02 FB | 	rdlong	arg02, fp
0f714     0C 4E 85 F1 | 	sub	fp, #12
0f718     01 16 66 F6 | 	neg	arg03, #1
0f71c     54 BC B0 FD | 	call	#__system___float_cmp
0f720     00 FA 55 F2 | 	cmps	result1, #0 wc
0f724     00 1E 26 36 |  if_ae	not	local01, #0
0f728     A7 1E 62 FC | 	wrlong	local01, fp
0f72c     C8 03 90 FD | 	jmp	#LR__1253
0f730                 | LR__1241
0f730                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
0f730     08 4E 05 F1 | 	add	fp, #8
0f734     A7 1E 02 FB | 	rdlong	local01, fp
0f738     08 4E 85 F1 | 	sub	fp, #8
0f73c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f740     14 4E 05 A1 |  if_e	add	fp, #20
0f744     A7 24 02 AB |  if_e	rdlong	local04, fp
0f748     14 4E 85 A1 |  if_e	sub	fp, #20
0f74c     12 23 02 A6 |  if_e	mov	local03, local04
0f750     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f754     48 00 90 5D |  if_ne	jmp	#LR__1242
0f758     00 1E 06 F6 | 	mov	local01, #0
0f75c     A7 20 02 FB | 	rdlong	local02, fp
0f760     0C 4E 05 F1 | 	add	fp, #12
0f764     A7 12 02 FB | 	rdlong	arg01, fp
0f768     0C 4E 85 F1 | 	sub	fp, #12
0f76c     09 13 52 F6 | 	abs	arg01, arg01 wc
0f770     1F 26 C6 C9 |  if_b	decod	local05, #31
0f774     00 26 06 36 |  if_ae	mov	local05, #0
0f778     C0 B3 B0 FD | 	call	#__system___float_fromuns
0f77c     13 FB 61 F5 | 	xor	result1, local05
0f780     FD 14 02 F6 | 	mov	arg02, result1
0f784     10 13 02 F6 | 	mov	arg01, local02
0f788     01 16 66 F6 | 	neg	arg03, #1
0f78c     E4 BB B0 FD | 	call	#__system___float_cmp
0f790     00 FA 55 F2 | 	cmps	result1, #0 wc
0f794     00 1E 26 36 |  if_ae	not	local01, #0
0f798     A7 1E 62 FC | 	wrlong	local01, fp
0f79c     58 03 90 FD | 	jmp	#LR__1253
0f7a0                 | LR__1242
0f7a0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
0f7a0     08 4E 05 F1 | 	add	fp, #8
0f7a4     A7 1E 02 FB | 	rdlong	local01, fp
0f7a8     08 4E 85 F1 | 	sub	fp, #8
0f7ac     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f7b0     14 4E 05 A1 |  if_e	add	fp, #20
0f7b4     A7 24 02 AB |  if_e	rdlong	local04, fp
0f7b8     14 4E 85 A1 |  if_e	sub	fp, #20
0f7bc     12 23 02 A6 |  if_e	mov	local03, local04
0f7c0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f7c4     38 00 90 5D |  if_ne	jmp	#LR__1243
0f7c8     00 1E 06 F6 | 	mov	local01, #0
0f7cc     A7 20 02 FB | 	rdlong	local02, fp
0f7d0     0C 4E 05 F1 | 	add	fp, #12
0f7d4     A7 12 02 FB | 	rdlong	arg01, fp
0f7d8     0C 4E 85 F1 | 	sub	fp, #12
0f7dc     5C B3 B0 FD | 	call	#__system___float_fromuns
0f7e0     FD 14 02 F6 | 	mov	arg02, result1
0f7e4     10 13 02 F6 | 	mov	arg01, local02
0f7e8     01 16 66 F6 | 	neg	arg03, #1
0f7ec     84 BB B0 FD | 	call	#__system___float_cmp
0f7f0     00 FA 55 F2 | 	cmps	result1, #0 wc
0f7f4     00 1E 26 36 |  if_ae	not	local01, #0
0f7f8     A7 1E 62 FC | 	wrlong	local01, fp
0f7fc     F8 02 90 FD | 	jmp	#LR__1253
0f800                 | LR__1243
0f800                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
0f800     08 4E 05 F1 | 	add	fp, #8
0f804     A7 1E 02 FB | 	rdlong	local01, fp
0f808     08 4E 85 F1 | 	sub	fp, #8
0f80c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f810     14 4E 05 A1 |  if_e	add	fp, #20
0f814     A7 24 02 AB |  if_e	rdlong	local04, fp
0f818     14 4E 85 A1 |  if_e	sub	fp, #20
0f81c     12 23 02 A6 |  if_e	mov	local03, local04
0f820     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f824     44 00 90 5D |  if_ne	jmp	#LR__1244
0f828     00 1E 06 F6 | 	mov	local01, #0
0f82c     A7 12 02 FB | 	rdlong	arg01, fp
0f830     09 13 52 F6 | 	abs	arg01, arg01 wc
0f834     1F 26 C6 C9 |  if_b	decod	local05, #31
0f838     00 26 06 36 |  if_ae	mov	local05, #0
0f83c     FC B2 B0 FD | 	call	#__system___float_fromuns
0f840     13 FB 61 F5 | 	xor	result1, local05
0f844     FD 12 02 F6 | 	mov	arg01, result1
0f848     0C 4E 05 F1 | 	add	fp, #12
0f84c     A7 14 02 FB | 	rdlong	arg02, fp
0f850     0C 4E 85 F1 | 	sub	fp, #12
0f854     01 16 66 F6 | 	neg	arg03, #1
0f858     18 BB B0 FD | 	call	#__system___float_cmp
0f85c     00 FA 55 F2 | 	cmps	result1, #0 wc
0f860     00 1E 26 36 |  if_ae	not	local01, #0
0f864     A7 1E 62 FC | 	wrlong	local01, fp
0f868     8C 02 90 FD | 	jmp	#LR__1253
0f86c                 | LR__1244
0f86c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
0f86c     08 4E 05 F1 | 	add	fp, #8
0f870     A7 1E 02 FB | 	rdlong	local01, fp
0f874     08 4E 85 F1 | 	sub	fp, #8
0f878     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f87c     14 4E 05 A1 |  if_e	add	fp, #20
0f880     A7 24 02 AB |  if_e	rdlong	local04, fp
0f884     14 4E 85 A1 |  if_e	sub	fp, #20
0f888     12 23 02 A6 |  if_e	mov	local03, local04
0f88c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f890     24 00 90 5D |  if_ne	jmp	#LR__1245
0f894     00 1E 06 F6 | 	mov	local01, #0
0f898     A7 20 02 FB | 	rdlong	local02, fp
0f89c     0C 4E 05 F1 | 	add	fp, #12
0f8a0     A7 22 02 FB | 	rdlong	local03, fp
0f8a4     0C 4E 85 F1 | 	sub	fp, #12
0f8a8     11 21 52 F2 | 	cmps	local02, local03 wc
0f8ac     01 1E 66 36 |  if_ae	neg	local01, #1
0f8b0     A7 1E 62 FC | 	wrlong	local01, fp
0f8b4     40 02 90 FD | 	jmp	#LR__1253
0f8b8                 | LR__1245
0f8b8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
0f8b8     08 4E 05 F1 | 	add	fp, #8
0f8bc     A7 1E 02 FB | 	rdlong	local01, fp
0f8c0     08 4E 85 F1 | 	sub	fp, #8
0f8c4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f8c8     14 4E 05 A1 |  if_e	add	fp, #20
0f8cc     A7 24 02 AB |  if_e	rdlong	local04, fp
0f8d0     14 4E 85 A1 |  if_e	sub	fp, #20
0f8d4     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0f8d8     24 00 90 5D |  if_ne	jmp	#LR__1246
0f8dc     00 1E 06 F6 | 	mov	local01, #0
0f8e0     A7 20 02 FB | 	rdlong	local02, fp
0f8e4     0C 4E 05 F1 | 	add	fp, #12
0f8e8     A7 22 02 FB | 	rdlong	local03, fp
0f8ec     0C 4E 85 F1 | 	sub	fp, #12
0f8f0     11 21 52 F2 | 	cmps	local02, local03 wc
0f8f4     01 1E 66 36 |  if_ae	neg	local01, #1
0f8f8     A7 1E 62 FC | 	wrlong	local01, fp
0f8fc     F8 01 90 FD | 	jmp	#LR__1253
0f900                 | LR__1246
0f900                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
0f900     08 4E 05 F1 | 	add	fp, #8
0f904     A7 1E 02 FB | 	rdlong	local01, fp
0f908     08 4E 85 F1 | 	sub	fp, #8
0f90c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f910     14 4E 05 A1 |  if_e	add	fp, #20
0f914     A7 22 02 AB |  if_e	rdlong	local03, fp
0f918     14 4E 85 A1 |  if_e	sub	fp, #20
0f91c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f920     34 00 90 5D |  if_ne	jmp	#LR__1247
0f924     00 1E 06 F6 | 	mov	local01, #0
0f928     A7 12 02 FB | 	rdlong	arg01, fp
0f92c     0C B2 B0 FD | 	call	#__system___float_fromuns
0f930     FD 12 02 F6 | 	mov	arg01, result1
0f934     0C 4E 05 F1 | 	add	fp, #12
0f938     A7 14 02 FB | 	rdlong	arg02, fp
0f93c     0C 4E 85 F1 | 	sub	fp, #12
0f940     01 16 66 F6 | 	neg	arg03, #1
0f944     2C BA B0 FD | 	call	#__system___float_cmp
0f948     00 FA 55 F2 | 	cmps	result1, #0 wc
0f94c     00 1E 26 36 |  if_ae	not	local01, #0
0f950     A7 1E 62 FC | 	wrlong	local01, fp
0f954     A0 01 90 FD | 	jmp	#LR__1253
0f958                 | LR__1247
0f958                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
0f958     08 4E 05 F1 | 	add	fp, #8
0f95c     A7 1E 02 FB | 	rdlong	local01, fp
0f960     08 4E 85 F1 | 	sub	fp, #8
0f964     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f968     14 4E 05 A1 |  if_e	add	fp, #20
0f96c     A7 22 02 AB |  if_e	rdlong	local03, fp
0f970     14 4E 85 A1 |  if_e	sub	fp, #20
0f974     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f978     24 00 90 5D |  if_ne	jmp	#LR__1248
0f97c     00 1E 06 F6 | 	mov	local01, #0
0f980     A7 20 02 FB | 	rdlong	local02, fp
0f984     0C 4E 05 F1 | 	add	fp, #12
0f988     A7 22 02 FB | 	rdlong	local03, fp
0f98c     0C 4E 85 F1 | 	sub	fp, #12
0f990     11 21 52 F2 | 	cmps	local02, local03 wc
0f994     01 1E 66 36 |  if_ae	neg	local01, #1
0f998     A7 1E 62 FC | 	wrlong	local01, fp
0f99c     58 01 90 FD | 	jmp	#LR__1253
0f9a0                 | LR__1248
0f9a0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
0f9a0     08 4E 05 F1 | 	add	fp, #8
0f9a4     A7 1E 02 FB | 	rdlong	local01, fp
0f9a8     08 4E 85 F1 | 	sub	fp, #8
0f9ac     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f9b0     14 4E 05 A1 |  if_e	add	fp, #20
0f9b4     A7 22 02 AB |  if_e	rdlong	local03, fp
0f9b8     14 4E 85 A1 |  if_e	sub	fp, #20
0f9bc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f9c0     24 00 90 5D |  if_ne	jmp	#LR__1249
0f9c4     00 1E 06 F6 | 	mov	local01, #0
0f9c8     A7 20 02 FB | 	rdlong	local02, fp
0f9cc     0C 4E 05 F1 | 	add	fp, #12
0f9d0     A7 22 02 FB | 	rdlong	local03, fp
0f9d4     0C 4E 85 F1 | 	sub	fp, #12
0f9d8     11 21 12 F2 | 	cmp	local02, local03 wc
0f9dc     01 1E 66 36 |  if_ae	neg	local01, #1
0f9e0     A7 1E 62 FC | 	wrlong	local01, fp
0f9e4     10 01 90 FD | 	jmp	#LR__1253
0f9e8                 | LR__1249
0f9e8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
0f9e8     08 4E 05 F1 | 	add	fp, #8
0f9ec     A7 1E 02 FB | 	rdlong	local01, fp
0f9f0     08 4E 85 F1 | 	sub	fp, #8
0f9f4     2B 1E 0E F2 | 	cmp	local01, #43 wz
0f9f8     14 4E 05 A1 |  if_e	add	fp, #20
0f9fc     A7 22 02 AB |  if_e	rdlong	local03, fp
0fa00     14 4E 85 A1 |  if_e	sub	fp, #20
0fa04     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0fa08     30 00 90 5D |  if_ne	jmp	#LR__1250
0fa0c     00 1E 06 F6 | 	mov	local01, #0
0fa10     A7 12 02 FB | 	rdlong	arg01, fp
0fa14     B4 C8 BF FD | 	call	#_convertstring
0fa18     FD 12 02 F6 | 	mov	arg01, result1
0fa1c     0C 4E 05 F1 | 	add	fp, #12
0fa20     A7 14 02 FB | 	rdlong	arg02, fp
0fa24     0C 4E 85 F1 | 	sub	fp, #12
0fa28     58 8B B0 FD | 	call	#__system___string_cmp
0fa2c     00 FA 55 F2 | 	cmps	result1, #0 wc
0fa30     00 1E 26 36 |  if_ae	not	local01, #0
0fa34     A7 1E 62 FC | 	wrlong	local01, fp
0fa38     BC 00 90 FD | 	jmp	#LR__1253
0fa3c                 | LR__1250
0fa3c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
0fa3c     08 4E 05 F1 | 	add	fp, #8
0fa40     A7 1E 02 FB | 	rdlong	local01, fp
0fa44     08 4E 85 F1 | 	sub	fp, #8
0fa48     1F 1E 0E F2 | 	cmp	local01, #31 wz
0fa4c     14 4E 05 A1 |  if_e	add	fp, #20
0fa50     A7 22 02 AB |  if_e	rdlong	local03, fp
0fa54     14 4E 85 A1 |  if_e	sub	fp, #20
0fa58     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0fa5c     34 00 90 5D |  if_ne	jmp	#LR__1251
0fa60     00 1E 06 F6 | 	mov	local01, #0
0fa64     A7 20 02 FB | 	rdlong	local02, fp
0fa68     0C 4E 05 F1 | 	add	fp, #12
0fa6c     A7 12 02 FB | 	rdlong	arg01, fp
0fa70     0C 4E 85 F1 | 	sub	fp, #12
0fa74     54 C8 BF FD | 	call	#_convertstring
0fa78     FD 14 02 F6 | 	mov	arg02, result1
0fa7c     10 13 02 F6 | 	mov	arg01, local02
0fa80     00 8B B0 FD | 	call	#__system___string_cmp
0fa84     00 FA 55 F2 | 	cmps	result1, #0 wc
0fa88     00 1E 26 36 |  if_ae	not	local01, #0
0fa8c     A7 1E 62 FC | 	wrlong	local01, fp
0fa90     64 00 90 FD | 	jmp	#LR__1253
0fa94                 | LR__1251
0fa94                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
0fa94     08 4E 05 F1 | 	add	fp, #8
0fa98     A7 1E 02 FB | 	rdlong	local01, fp
0fa9c     08 4E 85 F1 | 	sub	fp, #8
0faa0     2B 1E 0E F2 | 	cmp	local01, #43 wz
0faa4     14 4E 05 A1 |  if_e	add	fp, #20
0faa8     A7 22 02 AB |  if_e	rdlong	local03, fp
0faac     14 4E 85 A1 |  if_e	sub	fp, #20
0fab0     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0fab4     3C 00 90 5D |  if_ne	jmp	#LR__1252
0fab8     00 1E 06 F6 | 	mov	local01, #0
0fabc     A7 12 02 FB | 	rdlong	arg01, fp
0fac0     08 C8 BF FD | 	call	#_convertstring
0fac4     FD 20 02 F6 | 	mov	local02, result1
0fac8     0C 4E 05 F1 | 	add	fp, #12
0facc     A7 12 02 FB | 	rdlong	arg01, fp
0fad0     0C 4E 85 F1 | 	sub	fp, #12
0fad4     F4 C7 BF FD | 	call	#_convertstring
0fad8     FD 14 02 F6 | 	mov	arg02, result1
0fadc     10 13 02 F6 | 	mov	arg01, local02
0fae0     A0 8A B0 FD | 	call	#__system___string_cmp
0fae4     00 FA 55 F2 | 	cmps	result1, #0 wc
0fae8     00 1E 26 36 |  if_ae	not	local01, #0
0faec     A7 1E 62 FC | 	wrlong	local01, fp
0faf0     04 00 90 FD | 	jmp	#LR__1253
0faf4                 | LR__1252
0faf4     A7 00 68 FC | 	wrlong	#0, fp
0faf8                 | LR__1253
0faf8     08 4E 05 F1 | 	add	fp, #8
0fafc     A7 38 68 FC | 	wrlong	#28, fp
0fb00     08 4E 85 F1 | 	sub	fp, #8
0fb04     A7 12 02 F6 | 	mov	arg01, fp
0fb08     50 97 BF FD | 	call	#_push
0fb0c     A7 F0 03 F6 | 	mov	ptra, fp
0fb10     B2 00 A0 FD | 	call	#popregs_
0fb14                 | _do_ge_ret
0fb14     2D 00 64 FD | 	ret
0fb18                 | 
0fb18                 | ' 
0fb18                 | ' sub do_le
0fb18                 | _do_le
0fb18     05 4A 05 F6 | 	mov	COUNT_, #5
0fb1c     A8 00 A0 FD | 	call	#pushregs_
0fb20     18 F0 07 F1 | 	add	ptra, #24
0fb24     9C 96 BF FD | 	call	#_pop
0fb28     FD 1E 02 F6 | 	mov	local01, result1
0fb2c     FE 20 02 F6 | 	mov	local02, result2
0fb30     FF 22 02 F6 | 	mov	local03, result3
0fb34     0C 4E 05 F1 | 	add	fp, #12
0fb38     A7 1E 62 FC | 	wrlong	local01, fp
0fb3c     04 4E 05 F1 | 	add	fp, #4
0fb40     A7 20 62 FC | 	wrlong	local02, fp
0fb44     04 4E 05 F1 | 	add	fp, #4
0fb48     A7 22 62 FC | 	wrlong	local03, fp
0fb4c     14 4E 85 F1 | 	sub	fp, #20
0fb50     70 96 BF FD | 	call	#_pop
0fb54     FF 22 02 F6 | 	mov	local03, result3
0fb58     A7 FA 61 FC | 	wrlong	result1, fp
0fb5c     04 4E 05 F1 | 	add	fp, #4
0fb60     A7 FC 61 FC | 	wrlong	result2, fp
0fb64     04 4E 05 F1 | 	add	fp, #4
0fb68     A7 22 62 FC | 	wrlong	local03, fp
0fb6c                 | ' t2=pop()
0fb6c                 | ' t1=pop()
0fb6c                 | ' 
0fb6c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
0fb6c     08 4E 85 F1 | 	sub	fp, #8
0fb70     1F 22 0E F2 | 	cmp	local03, #31 wz
0fb74     14 4E 05 A1 |  if_e	add	fp, #20
0fb78     A7 24 02 AB |  if_e	rdlong	local04, fp
0fb7c     14 4E 85 A1 |  if_e	sub	fp, #20
0fb80     12 23 02 A6 |  if_e	mov	local03, local04
0fb84     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0fb88     28 00 90 5D |  if_ne	jmp	#LR__1260
0fb8c     00 1E 06 F6 | 	mov	local01, #0
0fb90     A7 12 02 FB | 	rdlong	arg01, fp
0fb94     0C 4E 05 F1 | 	add	fp, #12
0fb98     A7 14 02 FB | 	rdlong	arg02, fp
0fb9c     0C 4E 85 F1 | 	sub	fp, #12
0fba0     E0 89 B0 FD | 	call	#__system___string_cmp
0fba4     01 FA 55 F2 | 	cmps	result1, #1 wc
0fba8     00 1E 26 C6 |  if_b	not	local01, #0
0fbac     A7 1E 62 FC | 	wrlong	local01, fp
0fbb0     1C 04 90 FD | 	jmp	#LR__1273
0fbb4                 | LR__1260
0fbb4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
0fbb4     08 4E 05 F1 | 	add	fp, #8
0fbb8     A7 1E 02 FB | 	rdlong	local01, fp
0fbbc     08 4E 85 F1 | 	sub	fp, #8
0fbc0     1E 1E 0E F2 | 	cmp	local01, #30 wz
0fbc4     14 4E 05 A1 |  if_e	add	fp, #20
0fbc8     A7 24 02 AB |  if_e	rdlong	local04, fp
0fbcc     14 4E 85 A1 |  if_e	sub	fp, #20
0fbd0     12 23 02 A6 |  if_e	mov	local03, local04
0fbd4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0fbd8     2C 00 90 5D |  if_ne	jmp	#LR__1261
0fbdc     00 1E 06 F6 | 	mov	local01, #0
0fbe0     A7 12 02 FB | 	rdlong	arg01, fp
0fbe4     0C 4E 05 F1 | 	add	fp, #12
0fbe8     A7 14 02 FB | 	rdlong	arg02, fp
0fbec     0C 4E 85 F1 | 	sub	fp, #12
0fbf0     01 16 06 F6 | 	mov	arg03, #1
0fbf4     7C B7 B0 FD | 	call	#__system___float_cmp
0fbf8     01 FA 55 F2 | 	cmps	result1, #1 wc
0fbfc     00 1E 26 C6 |  if_b	not	local01, #0
0fc00     A7 1E 62 FC | 	wrlong	local01, fp
0fc04     C8 03 90 FD | 	jmp	#LR__1273
0fc08                 | LR__1261
0fc08                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
0fc08     08 4E 05 F1 | 	add	fp, #8
0fc0c     A7 1E 02 FB | 	rdlong	local01, fp
0fc10     08 4E 85 F1 | 	sub	fp, #8
0fc14     1E 1E 0E F2 | 	cmp	local01, #30 wz
0fc18     14 4E 05 A1 |  if_e	add	fp, #20
0fc1c     A7 24 02 AB |  if_e	rdlong	local04, fp
0fc20     14 4E 85 A1 |  if_e	sub	fp, #20
0fc24     12 23 02 A6 |  if_e	mov	local03, local04
0fc28     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0fc2c     48 00 90 5D |  if_ne	jmp	#LR__1262
0fc30     00 1E 06 F6 | 	mov	local01, #0
0fc34     A7 20 02 FB | 	rdlong	local02, fp
0fc38     0C 4E 05 F1 | 	add	fp, #12
0fc3c     A7 12 02 FB | 	rdlong	arg01, fp
0fc40     0C 4E 85 F1 | 	sub	fp, #12
0fc44     09 13 52 F6 | 	abs	arg01, arg01 wc
0fc48     1F 26 C6 C9 |  if_b	decod	local05, #31
0fc4c     00 26 06 36 |  if_ae	mov	local05, #0
0fc50     E8 AE B0 FD | 	call	#__system___float_fromuns
0fc54     13 FB 61 F5 | 	xor	result1, local05
0fc58     FD 14 02 F6 | 	mov	arg02, result1
0fc5c     10 13 02 F6 | 	mov	arg01, local02
0fc60     01 16 06 F6 | 	mov	arg03, #1
0fc64     0C B7 B0 FD | 	call	#__system___float_cmp
0fc68     01 FA 55 F2 | 	cmps	result1, #1 wc
0fc6c     00 1E 26 C6 |  if_b	not	local01, #0
0fc70     A7 1E 62 FC | 	wrlong	local01, fp
0fc74     58 03 90 FD | 	jmp	#LR__1273
0fc78                 | LR__1262
0fc78                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
0fc78     08 4E 05 F1 | 	add	fp, #8
0fc7c     A7 1E 02 FB | 	rdlong	local01, fp
0fc80     08 4E 85 F1 | 	sub	fp, #8
0fc84     1E 1E 0E F2 | 	cmp	local01, #30 wz
0fc88     14 4E 05 A1 |  if_e	add	fp, #20
0fc8c     A7 24 02 AB |  if_e	rdlong	local04, fp
0fc90     14 4E 85 A1 |  if_e	sub	fp, #20
0fc94     12 23 02 A6 |  if_e	mov	local03, local04
0fc98     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0fc9c     38 00 90 5D |  if_ne	jmp	#LR__1263
0fca0     00 1E 06 F6 | 	mov	local01, #0
0fca4     A7 20 02 FB | 	rdlong	local02, fp
0fca8     0C 4E 05 F1 | 	add	fp, #12
0fcac     A7 12 02 FB | 	rdlong	arg01, fp
0fcb0     0C 4E 85 F1 | 	sub	fp, #12
0fcb4     84 AE B0 FD | 	call	#__system___float_fromuns
0fcb8     FD 14 02 F6 | 	mov	arg02, result1
0fcbc     10 13 02 F6 | 	mov	arg01, local02
0fcc0     01 16 06 F6 | 	mov	arg03, #1
0fcc4     AC B6 B0 FD | 	call	#__system___float_cmp
0fcc8     01 FA 55 F2 | 	cmps	result1, #1 wc
0fccc     00 1E 26 C6 |  if_b	not	local01, #0
0fcd0     A7 1E 62 FC | 	wrlong	local01, fp
0fcd4     F8 02 90 FD | 	jmp	#LR__1273
0fcd8                 | LR__1263
0fcd8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
0fcd8     08 4E 05 F1 | 	add	fp, #8
0fcdc     A7 1E 02 FB | 	rdlong	local01, fp
0fce0     08 4E 85 F1 | 	sub	fp, #8
0fce4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fce8     14 4E 05 A1 |  if_e	add	fp, #20
0fcec     A7 24 02 AB |  if_e	rdlong	local04, fp
0fcf0     14 4E 85 A1 |  if_e	sub	fp, #20
0fcf4     12 23 02 A6 |  if_e	mov	local03, local04
0fcf8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0fcfc     44 00 90 5D |  if_ne	jmp	#LR__1264
0fd00     00 1E 06 F6 | 	mov	local01, #0
0fd04     A7 12 02 FB | 	rdlong	arg01, fp
0fd08     09 13 52 F6 | 	abs	arg01, arg01 wc
0fd0c     1F 26 C6 C9 |  if_b	decod	local05, #31
0fd10     00 26 06 36 |  if_ae	mov	local05, #0
0fd14     24 AE B0 FD | 	call	#__system___float_fromuns
0fd18     13 FB 61 F5 | 	xor	result1, local05
0fd1c     FD 12 02 F6 | 	mov	arg01, result1
0fd20     0C 4E 05 F1 | 	add	fp, #12
0fd24     A7 14 02 FB | 	rdlong	arg02, fp
0fd28     0C 4E 85 F1 | 	sub	fp, #12
0fd2c     01 16 06 F6 | 	mov	arg03, #1
0fd30     40 B6 B0 FD | 	call	#__system___float_cmp
0fd34     01 FA 55 F2 | 	cmps	result1, #1 wc
0fd38     00 1E 26 C6 |  if_b	not	local01, #0
0fd3c     A7 1E 62 FC | 	wrlong	local01, fp
0fd40     8C 02 90 FD | 	jmp	#LR__1273
0fd44                 | LR__1264
0fd44                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
0fd44     08 4E 05 F1 | 	add	fp, #8
0fd48     A7 1E 02 FB | 	rdlong	local01, fp
0fd4c     08 4E 85 F1 | 	sub	fp, #8
0fd50     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fd54     14 4E 05 A1 |  if_e	add	fp, #20
0fd58     A7 24 02 AB |  if_e	rdlong	local04, fp
0fd5c     14 4E 85 A1 |  if_e	sub	fp, #20
0fd60     12 23 02 A6 |  if_e	mov	local03, local04
0fd64     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0fd68     24 00 90 5D |  if_ne	jmp	#LR__1265
0fd6c     00 1E 06 F6 | 	mov	local01, #0
0fd70     A7 20 02 FB | 	rdlong	local02, fp
0fd74     0C 4E 05 F1 | 	add	fp, #12
0fd78     A7 22 02 FB | 	rdlong	local03, fp
0fd7c     0C 4E 85 F1 | 	sub	fp, #12
0fd80     11 21 5A F2 | 	cmps	local02, local03 wcz
0fd84     01 1E 66 E6 |  if_be	neg	local01, #1
0fd88     A7 1E 62 FC | 	wrlong	local01, fp
0fd8c     40 02 90 FD | 	jmp	#LR__1273
0fd90                 | LR__1265
0fd90                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
0fd90     08 4E 05 F1 | 	add	fp, #8
0fd94     A7 1E 02 FB | 	rdlong	local01, fp
0fd98     08 4E 85 F1 | 	sub	fp, #8
0fd9c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fda0     14 4E 05 A1 |  if_e	add	fp, #20
0fda4     A7 24 02 AB |  if_e	rdlong	local04, fp
0fda8     14 4E 85 A1 |  if_e	sub	fp, #20
0fdac     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0fdb0     24 00 90 5D |  if_ne	jmp	#LR__1266
0fdb4     00 1E 06 F6 | 	mov	local01, #0
0fdb8     A7 20 02 FB | 	rdlong	local02, fp
0fdbc     0C 4E 05 F1 | 	add	fp, #12
0fdc0     A7 22 02 FB | 	rdlong	local03, fp
0fdc4     0C 4E 85 F1 | 	sub	fp, #12
0fdc8     11 21 5A F2 | 	cmps	local02, local03 wcz
0fdcc     01 1E 66 E6 |  if_be	neg	local01, #1
0fdd0     A7 1E 62 FC | 	wrlong	local01, fp
0fdd4     F8 01 90 FD | 	jmp	#LR__1273
0fdd8                 | LR__1266
0fdd8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
0fdd8     08 4E 05 F1 | 	add	fp, #8
0fddc     A7 1E 02 FB | 	rdlong	local01, fp
0fde0     08 4E 85 F1 | 	sub	fp, #8
0fde4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0fde8     14 4E 05 A1 |  if_e	add	fp, #20
0fdec     A7 22 02 AB |  if_e	rdlong	local03, fp
0fdf0     14 4E 85 A1 |  if_e	sub	fp, #20
0fdf4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0fdf8     34 00 90 5D |  if_ne	jmp	#LR__1267
0fdfc     00 1E 06 F6 | 	mov	local01, #0
0fe00     A7 12 02 FB | 	rdlong	arg01, fp
0fe04     34 AD B0 FD | 	call	#__system___float_fromuns
0fe08     FD 12 02 F6 | 	mov	arg01, result1
0fe0c     0C 4E 05 F1 | 	add	fp, #12
0fe10     A7 14 02 FB | 	rdlong	arg02, fp
0fe14     0C 4E 85 F1 | 	sub	fp, #12
0fe18     01 16 06 F6 | 	mov	arg03, #1
0fe1c     54 B5 B0 FD | 	call	#__system___float_cmp
0fe20     01 FA 55 F2 | 	cmps	result1, #1 wc
0fe24     00 1E 26 C6 |  if_b	not	local01, #0
0fe28     A7 1E 62 FC | 	wrlong	local01, fp
0fe2c     A0 01 90 FD | 	jmp	#LR__1273
0fe30                 | LR__1267
0fe30                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
0fe30     08 4E 05 F1 | 	add	fp, #8
0fe34     A7 1E 02 FB | 	rdlong	local01, fp
0fe38     08 4E 85 F1 | 	sub	fp, #8
0fe3c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0fe40     14 4E 05 A1 |  if_e	add	fp, #20
0fe44     A7 22 02 AB |  if_e	rdlong	local03, fp
0fe48     14 4E 85 A1 |  if_e	sub	fp, #20
0fe4c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0fe50     24 00 90 5D |  if_ne	jmp	#LR__1268
0fe54     00 1E 06 F6 | 	mov	local01, #0
0fe58     A7 20 02 FB | 	rdlong	local02, fp
0fe5c     0C 4E 05 F1 | 	add	fp, #12
0fe60     A7 22 02 FB | 	rdlong	local03, fp
0fe64     0C 4E 85 F1 | 	sub	fp, #12
0fe68     11 21 5A F2 | 	cmps	local02, local03 wcz
0fe6c     01 1E 66 E6 |  if_be	neg	local01, #1
0fe70     A7 1E 62 FC | 	wrlong	local01, fp
0fe74     58 01 90 FD | 	jmp	#LR__1273
0fe78                 | LR__1268
0fe78                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
0fe78     08 4E 05 F1 | 	add	fp, #8
0fe7c     A7 1E 02 FB | 	rdlong	local01, fp
0fe80     08 4E 85 F1 | 	sub	fp, #8
0fe84     1D 1E 0E F2 | 	cmp	local01, #29 wz
0fe88     14 4E 05 A1 |  if_e	add	fp, #20
0fe8c     A7 22 02 AB |  if_e	rdlong	local03, fp
0fe90     14 4E 85 A1 |  if_e	sub	fp, #20
0fe94     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0fe98     24 00 90 5D |  if_ne	jmp	#LR__1269
0fe9c     00 1E 06 F6 | 	mov	local01, #0
0fea0     A7 20 02 FB | 	rdlong	local02, fp
0fea4     0C 4E 05 F1 | 	add	fp, #12
0fea8     A7 22 02 FB | 	rdlong	local03, fp
0feac     0C 4E 85 F1 | 	sub	fp, #12
0feb0     11 21 1A F2 | 	cmp	local02, local03 wcz
0feb4     01 1E 66 E6 |  if_be	neg	local01, #1
0feb8     A7 1E 62 FC | 	wrlong	local01, fp
0febc     10 01 90 FD | 	jmp	#LR__1273
0fec0                 | LR__1269
0fec0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
0fec0     08 4E 05 F1 | 	add	fp, #8
0fec4     A7 1E 02 FB | 	rdlong	local01, fp
0fec8     08 4E 85 F1 | 	sub	fp, #8
0fecc     2B 1E 0E F2 | 	cmp	local01, #43 wz
0fed0     14 4E 05 A1 |  if_e	add	fp, #20
0fed4     A7 22 02 AB |  if_e	rdlong	local03, fp
0fed8     14 4E 85 A1 |  if_e	sub	fp, #20
0fedc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0fee0     30 00 90 5D |  if_ne	jmp	#LR__1270
0fee4     00 1E 06 F6 | 	mov	local01, #0
0fee8     A7 12 02 FB | 	rdlong	arg01, fp
0feec     DC C3 BF FD | 	call	#_convertstring
0fef0     FD 12 02 F6 | 	mov	arg01, result1
0fef4     0C 4E 05 F1 | 	add	fp, #12
0fef8     A7 14 02 FB | 	rdlong	arg02, fp
0fefc     0C 4E 85 F1 | 	sub	fp, #12
0ff00     80 86 B0 FD | 	call	#__system___string_cmp
0ff04     01 FA 55 F2 | 	cmps	result1, #1 wc
0ff08     00 1E 26 C6 |  if_b	not	local01, #0
0ff0c     A7 1E 62 FC | 	wrlong	local01, fp
0ff10     BC 00 90 FD | 	jmp	#LR__1273
0ff14                 | LR__1270
0ff14                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
0ff14     08 4E 05 F1 | 	add	fp, #8
0ff18     A7 1E 02 FB | 	rdlong	local01, fp
0ff1c     08 4E 85 F1 | 	sub	fp, #8
0ff20     1F 1E 0E F2 | 	cmp	local01, #31 wz
0ff24     14 4E 05 A1 |  if_e	add	fp, #20
0ff28     A7 22 02 AB |  if_e	rdlong	local03, fp
0ff2c     14 4E 85 A1 |  if_e	sub	fp, #20
0ff30     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0ff34     34 00 90 5D |  if_ne	jmp	#LR__1271
0ff38     00 1E 06 F6 | 	mov	local01, #0
0ff3c     A7 20 02 FB | 	rdlong	local02, fp
0ff40     0C 4E 05 F1 | 	add	fp, #12
0ff44     A7 12 02 FB | 	rdlong	arg01, fp
0ff48     0C 4E 85 F1 | 	sub	fp, #12
0ff4c     7C C3 BF FD | 	call	#_convertstring
0ff50     FD 14 02 F6 | 	mov	arg02, result1
0ff54     10 13 02 F6 | 	mov	arg01, local02
0ff58     28 86 B0 FD | 	call	#__system___string_cmp
0ff5c     01 FA 55 F2 | 	cmps	result1, #1 wc
0ff60     00 1E 26 C6 |  if_b	not	local01, #0
0ff64     A7 1E 62 FC | 	wrlong	local01, fp
0ff68     64 00 90 FD | 	jmp	#LR__1273
0ff6c                 | LR__1271
0ff6c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
0ff6c     08 4E 05 F1 | 	add	fp, #8
0ff70     A7 1E 02 FB | 	rdlong	local01, fp
0ff74     08 4E 85 F1 | 	sub	fp, #8
0ff78     2B 1E 0E F2 | 	cmp	local01, #43 wz
0ff7c     14 4E 05 A1 |  if_e	add	fp, #20
0ff80     A7 22 02 AB |  if_e	rdlong	local03, fp
0ff84     14 4E 85 A1 |  if_e	sub	fp, #20
0ff88     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0ff8c     3C 00 90 5D |  if_ne	jmp	#LR__1272
0ff90     00 1E 06 F6 | 	mov	local01, #0
0ff94     A7 12 02 FB | 	rdlong	arg01, fp
0ff98     30 C3 BF FD | 	call	#_convertstring
0ff9c     FD 20 02 F6 | 	mov	local02, result1
0ffa0     0C 4E 05 F1 | 	add	fp, #12
0ffa4     A7 12 02 FB | 	rdlong	arg01, fp
0ffa8     0C 4E 85 F1 | 	sub	fp, #12
0ffac     1C C3 BF FD | 	call	#_convertstring
0ffb0     FD 14 02 F6 | 	mov	arg02, result1
0ffb4     10 13 02 F6 | 	mov	arg01, local02
0ffb8     C8 85 B0 FD | 	call	#__system___string_cmp
0ffbc     01 FA 55 F2 | 	cmps	result1, #1 wc
0ffc0     00 1E 26 C6 |  if_b	not	local01, #0
0ffc4     A7 1E 62 FC | 	wrlong	local01, fp
0ffc8     04 00 90 FD | 	jmp	#LR__1273
0ffcc                 | LR__1272
0ffcc     A7 00 68 FC | 	wrlong	#0, fp
0ffd0                 | LR__1273
0ffd0     08 4E 05 F1 | 	add	fp, #8
0ffd4     A7 38 68 FC | 	wrlong	#28, fp
0ffd8     08 4E 85 F1 | 	sub	fp, #8
0ffdc     A7 12 02 F6 | 	mov	arg01, fp
0ffe0     78 92 BF FD | 	call	#_push
0ffe4     A7 F0 03 F6 | 	mov	ptra, fp
0ffe8     B2 00 A0 FD | 	call	#popregs_
0ffec                 | _do_le_ret
0ffec     2D 00 64 FD | 	ret
0fff0                 | 
0fff0                 | ' 
0fff0                 | ' 
0fff0                 | ' sub do_ne
0fff0                 | _do_ne
0fff0     05 4A 05 F6 | 	mov	COUNT_, #5
0fff4     A8 00 A0 FD | 	call	#pushregs_
0fff8     18 F0 07 F1 | 	add	ptra, #24
0fffc     C4 91 BF FD | 	call	#_pop
10000     FD 1E 02 F6 | 	mov	local01, result1
10004     FE 20 02 F6 | 	mov	local02, result2
10008     FF 22 02 F6 | 	mov	local03, result3
1000c     0C 4E 05 F1 | 	add	fp, #12
10010     A7 1E 62 FC | 	wrlong	local01, fp
10014     04 4E 05 F1 | 	add	fp, #4
10018     A7 20 62 FC | 	wrlong	local02, fp
1001c     04 4E 05 F1 | 	add	fp, #4
10020     A7 22 62 FC | 	wrlong	local03, fp
10024     14 4E 85 F1 | 	sub	fp, #20
10028     98 91 BF FD | 	call	#_pop
1002c     FF 22 02 F6 | 	mov	local03, result3
10030     A7 FA 61 FC | 	wrlong	result1, fp
10034     04 4E 05 F1 | 	add	fp, #4
10038     A7 FC 61 FC | 	wrlong	result2, fp
1003c     04 4E 05 F1 | 	add	fp, #4
10040     A7 22 62 FC | 	wrlong	local03, fp
10044                 | ' t2=pop()
10044                 | ' t1=pop()
10044                 | ' 
10044                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
10044     08 4E 85 F1 | 	sub	fp, #8
10048     1F 22 0E F2 | 	cmp	local03, #31 wz
1004c     14 4E 05 A1 |  if_e	add	fp, #20
10050     A7 24 02 AB |  if_e	rdlong	local04, fp
10054     14 4E 85 A1 |  if_e	sub	fp, #20
10058     12 23 02 A6 |  if_e	mov	local03, local04
1005c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
10060     28 00 90 5D |  if_ne	jmp	#LR__1280
10064     00 1E 06 F6 | 	mov	local01, #0
10068     A7 12 02 FB | 	rdlong	arg01, fp
1006c     0C 4E 05 F1 | 	add	fp, #12
10070     A7 14 02 FB | 	rdlong	arg02, fp
10074     0C 4E 85 F1 | 	sub	fp, #12
10078     08 85 B0 FD | 	call	#__system___string_cmp
1007c     00 FA 0D F2 | 	cmp	result1, #0 wz
10080     00 1E 26 56 |  if_ne	not	local01, #0
10084     A7 1E 62 FC | 	wrlong	local01, fp
10088     1C 04 90 FD | 	jmp	#LR__1293
1008c                 | LR__1280
1008c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
1008c     08 4E 05 F1 | 	add	fp, #8
10090     A7 1E 02 FB | 	rdlong	local01, fp
10094     08 4E 85 F1 | 	sub	fp, #8
10098     1E 1E 0E F2 | 	cmp	local01, #30 wz
1009c     14 4E 05 A1 |  if_e	add	fp, #20
100a0     A7 24 02 AB |  if_e	rdlong	local04, fp
100a4     14 4E 85 A1 |  if_e	sub	fp, #20
100a8     12 23 02 A6 |  if_e	mov	local03, local04
100ac     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
100b0     2C 00 90 5D |  if_ne	jmp	#LR__1281
100b4     00 1E 06 F6 | 	mov	local01, #0
100b8     A7 12 02 FB | 	rdlong	arg01, fp
100bc     0C 4E 05 F1 | 	add	fp, #12
100c0     A7 14 02 FB | 	rdlong	arg02, fp
100c4     0C 4E 85 F1 | 	sub	fp, #12
100c8     01 16 06 F6 | 	mov	arg03, #1
100cc     A4 B2 B0 FD | 	call	#__system___float_cmp
100d0     00 FA 0D F2 | 	cmp	result1, #0 wz
100d4     00 1E 26 56 |  if_ne	not	local01, #0
100d8     A7 1E 62 FC | 	wrlong	local01, fp
100dc     C8 03 90 FD | 	jmp	#LR__1293
100e0                 | LR__1281
100e0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
100e0     08 4E 05 F1 | 	add	fp, #8
100e4     A7 1E 02 FB | 	rdlong	local01, fp
100e8     08 4E 85 F1 | 	sub	fp, #8
100ec     1E 1E 0E F2 | 	cmp	local01, #30 wz
100f0     14 4E 05 A1 |  if_e	add	fp, #20
100f4     A7 24 02 AB |  if_e	rdlong	local04, fp
100f8     14 4E 85 A1 |  if_e	sub	fp, #20
100fc     12 23 02 A6 |  if_e	mov	local03, local04
10100     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10104     48 00 90 5D |  if_ne	jmp	#LR__1282
10108     00 1E 06 F6 | 	mov	local01, #0
1010c     A7 20 02 FB | 	rdlong	local02, fp
10110     0C 4E 05 F1 | 	add	fp, #12
10114     A7 12 02 FB | 	rdlong	arg01, fp
10118     0C 4E 85 F1 | 	sub	fp, #12
1011c     09 13 52 F6 | 	abs	arg01, arg01 wc
10120     1F 26 C6 C9 |  if_b	decod	local05, #31
10124     00 26 06 36 |  if_ae	mov	local05, #0
10128     10 AA B0 FD | 	call	#__system___float_fromuns
1012c     13 FB 61 F5 | 	xor	result1, local05
10130     FD 14 02 F6 | 	mov	arg02, result1
10134     10 13 02 F6 | 	mov	arg01, local02
10138     01 16 06 F6 | 	mov	arg03, #1
1013c     34 B2 B0 FD | 	call	#__system___float_cmp
10140     00 FA 0D F2 | 	cmp	result1, #0 wz
10144     00 1E 26 56 |  if_ne	not	local01, #0
10148     A7 1E 62 FC | 	wrlong	local01, fp
1014c     58 03 90 FD | 	jmp	#LR__1293
10150                 | LR__1282
10150                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
10150     08 4E 05 F1 | 	add	fp, #8
10154     A7 1E 02 FB | 	rdlong	local01, fp
10158     08 4E 85 F1 | 	sub	fp, #8
1015c     1E 1E 0E F2 | 	cmp	local01, #30 wz
10160     14 4E 05 A1 |  if_e	add	fp, #20
10164     A7 24 02 AB |  if_e	rdlong	local04, fp
10168     14 4E 85 A1 |  if_e	sub	fp, #20
1016c     12 23 02 A6 |  if_e	mov	local03, local04
10170     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10174     38 00 90 5D |  if_ne	jmp	#LR__1283
10178     00 1E 06 F6 | 	mov	local01, #0
1017c     A7 20 02 FB | 	rdlong	local02, fp
10180     0C 4E 05 F1 | 	add	fp, #12
10184     A7 12 02 FB | 	rdlong	arg01, fp
10188     0C 4E 85 F1 | 	sub	fp, #12
1018c     AC A9 B0 FD | 	call	#__system___float_fromuns
10190     FD 14 02 F6 | 	mov	arg02, result1
10194     10 13 02 F6 | 	mov	arg01, local02
10198     01 16 06 F6 | 	mov	arg03, #1
1019c     D4 B1 B0 FD | 	call	#__system___float_cmp
101a0     00 FA 0D F2 | 	cmp	result1, #0 wz
101a4     00 1E 26 56 |  if_ne	not	local01, #0
101a8     A7 1E 62 FC | 	wrlong	local01, fp
101ac     F8 02 90 FD | 	jmp	#LR__1293
101b0                 | LR__1283
101b0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
101b0     08 4E 05 F1 | 	add	fp, #8
101b4     A7 1E 02 FB | 	rdlong	local01, fp
101b8     08 4E 85 F1 | 	sub	fp, #8
101bc     1C 1E 0E F2 | 	cmp	local01, #28 wz
101c0     14 4E 05 A1 |  if_e	add	fp, #20
101c4     A7 24 02 AB |  if_e	rdlong	local04, fp
101c8     14 4E 85 A1 |  if_e	sub	fp, #20
101cc     12 23 02 A6 |  if_e	mov	local03, local04
101d0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
101d4     44 00 90 5D |  if_ne	jmp	#LR__1284
101d8     00 1E 06 F6 | 	mov	local01, #0
101dc     A7 12 02 FB | 	rdlong	arg01, fp
101e0     09 13 52 F6 | 	abs	arg01, arg01 wc
101e4     1F 26 C6 C9 |  if_b	decod	local05, #31
101e8     00 26 06 36 |  if_ae	mov	local05, #0
101ec     4C A9 B0 FD | 	call	#__system___float_fromuns
101f0     13 FB 61 F5 | 	xor	result1, local05
101f4     FD 12 02 F6 | 	mov	arg01, result1
101f8     0C 4E 05 F1 | 	add	fp, #12
101fc     A7 14 02 FB | 	rdlong	arg02, fp
10200     0C 4E 85 F1 | 	sub	fp, #12
10204     01 16 06 F6 | 	mov	arg03, #1
10208     68 B1 B0 FD | 	call	#__system___float_cmp
1020c     00 FA 0D F2 | 	cmp	result1, #0 wz
10210     00 1E 26 56 |  if_ne	not	local01, #0
10214     A7 1E 62 FC | 	wrlong	local01, fp
10218     8C 02 90 FD | 	jmp	#LR__1293
1021c                 | LR__1284
1021c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
1021c     08 4E 05 F1 | 	add	fp, #8
10220     A7 1E 02 FB | 	rdlong	local01, fp
10224     08 4E 85 F1 | 	sub	fp, #8
10228     1C 1E 0E F2 | 	cmp	local01, #28 wz
1022c     14 4E 05 A1 |  if_e	add	fp, #20
10230     A7 24 02 AB |  if_e	rdlong	local04, fp
10234     14 4E 85 A1 |  if_e	sub	fp, #20
10238     12 23 02 A6 |  if_e	mov	local03, local04
1023c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10240     24 00 90 5D |  if_ne	jmp	#LR__1285
10244     00 1E 06 F6 | 	mov	local01, #0
10248     A7 20 02 FB | 	rdlong	local02, fp
1024c     0C 4E 05 F1 | 	add	fp, #12
10250     A7 22 02 FB | 	rdlong	local03, fp
10254     0C 4E 85 F1 | 	sub	fp, #12
10258     11 21 0A F2 | 	cmp	local02, local03 wz
1025c     01 1E 66 56 |  if_ne	neg	local01, #1
10260     A7 1E 62 FC | 	wrlong	local01, fp
10264     40 02 90 FD | 	jmp	#LR__1293
10268                 | LR__1285
10268                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
10268     08 4E 05 F1 | 	add	fp, #8
1026c     A7 1E 02 FB | 	rdlong	local01, fp
10270     08 4E 85 F1 | 	sub	fp, #8
10274     1C 1E 0E F2 | 	cmp	local01, #28 wz
10278     14 4E 05 A1 |  if_e	add	fp, #20
1027c     A7 24 02 AB |  if_e	rdlong	local04, fp
10280     14 4E 85 A1 |  if_e	sub	fp, #20
10284     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
10288     24 00 90 5D |  if_ne	jmp	#LR__1286
1028c     00 1E 06 F6 | 	mov	local01, #0
10290     A7 20 02 FB | 	rdlong	local02, fp
10294     0C 4E 05 F1 | 	add	fp, #12
10298     A7 22 02 FB | 	rdlong	local03, fp
1029c     0C 4E 85 F1 | 	sub	fp, #12
102a0     11 21 0A F2 | 	cmp	local02, local03 wz
102a4     01 1E 66 56 |  if_ne	neg	local01, #1
102a8     A7 1E 62 FC | 	wrlong	local01, fp
102ac     F8 01 90 FD | 	jmp	#LR__1293
102b0                 | LR__1286
102b0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
102b0     08 4E 05 F1 | 	add	fp, #8
102b4     A7 1E 02 FB | 	rdlong	local01, fp
102b8     08 4E 85 F1 | 	sub	fp, #8
102bc     1D 1E 0E F2 | 	cmp	local01, #29 wz
102c0     14 4E 05 A1 |  if_e	add	fp, #20
102c4     A7 22 02 AB |  if_e	rdlong	local03, fp
102c8     14 4E 85 A1 |  if_e	sub	fp, #20
102cc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
102d0     34 00 90 5D |  if_ne	jmp	#LR__1287
102d4     00 1E 06 F6 | 	mov	local01, #0
102d8     A7 12 02 FB | 	rdlong	arg01, fp
102dc     5C A8 B0 FD | 	call	#__system___float_fromuns
102e0     FD 12 02 F6 | 	mov	arg01, result1
102e4     0C 4E 05 F1 | 	add	fp, #12
102e8     A7 14 02 FB | 	rdlong	arg02, fp
102ec     0C 4E 85 F1 | 	sub	fp, #12
102f0     01 16 06 F6 | 	mov	arg03, #1
102f4     7C B0 B0 FD | 	call	#__system___float_cmp
102f8     00 FA 0D F2 | 	cmp	result1, #0 wz
102fc     00 1E 26 56 |  if_ne	not	local01, #0
10300     A7 1E 62 FC | 	wrlong	local01, fp
10304     A0 01 90 FD | 	jmp	#LR__1293
10308                 | LR__1287
10308                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
10308     08 4E 05 F1 | 	add	fp, #8
1030c     A7 1E 02 FB | 	rdlong	local01, fp
10310     08 4E 85 F1 | 	sub	fp, #8
10314     1D 1E 0E F2 | 	cmp	local01, #29 wz
10318     14 4E 05 A1 |  if_e	add	fp, #20
1031c     A7 22 02 AB |  if_e	rdlong	local03, fp
10320     14 4E 85 A1 |  if_e	sub	fp, #20
10324     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10328     24 00 90 5D |  if_ne	jmp	#LR__1288
1032c     00 1E 06 F6 | 	mov	local01, #0
10330     A7 20 02 FB | 	rdlong	local02, fp
10334     0C 4E 05 F1 | 	add	fp, #12
10338     A7 22 02 FB | 	rdlong	local03, fp
1033c     0C 4E 85 F1 | 	sub	fp, #12
10340     11 21 0A F2 | 	cmp	local02, local03 wz
10344     01 1E 66 56 |  if_ne	neg	local01, #1
10348     A7 1E 62 FC | 	wrlong	local01, fp
1034c     58 01 90 FD | 	jmp	#LR__1293
10350                 | LR__1288
10350                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
10350     08 4E 05 F1 | 	add	fp, #8
10354     A7 1E 02 FB | 	rdlong	local01, fp
10358     08 4E 85 F1 | 	sub	fp, #8
1035c     1D 1E 0E F2 | 	cmp	local01, #29 wz
10360     14 4E 05 A1 |  if_e	add	fp, #20
10364     A7 22 02 AB |  if_e	rdlong	local03, fp
10368     14 4E 85 A1 |  if_e	sub	fp, #20
1036c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10370     24 00 90 5D |  if_ne	jmp	#LR__1289
10374     00 1E 06 F6 | 	mov	local01, #0
10378     A7 20 02 FB | 	rdlong	local02, fp
1037c     0C 4E 05 F1 | 	add	fp, #12
10380     A7 22 02 FB | 	rdlong	local03, fp
10384     0C 4E 85 F1 | 	sub	fp, #12
10388     11 21 0A F2 | 	cmp	local02, local03 wz
1038c     01 1E 66 56 |  if_ne	neg	local01, #1
10390     A7 1E 62 FC | 	wrlong	local01, fp
10394     10 01 90 FD | 	jmp	#LR__1293
10398                 | LR__1289
10398                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
10398     08 4E 05 F1 | 	add	fp, #8
1039c     A7 1E 02 FB | 	rdlong	local01, fp
103a0     08 4E 85 F1 | 	sub	fp, #8
103a4     2B 1E 0E F2 | 	cmp	local01, #43 wz
103a8     14 4E 05 A1 |  if_e	add	fp, #20
103ac     A7 22 02 AB |  if_e	rdlong	local03, fp
103b0     14 4E 85 A1 |  if_e	sub	fp, #20
103b4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
103b8     30 00 90 5D |  if_ne	jmp	#LR__1290
103bc     00 1E 06 F6 | 	mov	local01, #0
103c0     A7 12 02 FB | 	rdlong	arg01, fp
103c4     04 BF BF FD | 	call	#_convertstring
103c8     FD 12 02 F6 | 	mov	arg01, result1
103cc     0C 4E 05 F1 | 	add	fp, #12
103d0     A7 14 02 FB | 	rdlong	arg02, fp
103d4     0C 4E 85 F1 | 	sub	fp, #12
103d8     A8 81 B0 FD | 	call	#__system___string_cmp
103dc     00 FA 0D F2 | 	cmp	result1, #0 wz
103e0     00 1E 26 56 |  if_ne	not	local01, #0
103e4     A7 1E 62 FC | 	wrlong	local01, fp
103e8     BC 00 90 FD | 	jmp	#LR__1293
103ec                 | LR__1290
103ec                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
103ec     08 4E 05 F1 | 	add	fp, #8
103f0     A7 1E 02 FB | 	rdlong	local01, fp
103f4     08 4E 85 F1 | 	sub	fp, #8
103f8     1F 1E 0E F2 | 	cmp	local01, #31 wz
103fc     14 4E 05 A1 |  if_e	add	fp, #20
10400     A7 22 02 AB |  if_e	rdlong	local03, fp
10404     14 4E 85 A1 |  if_e	sub	fp, #20
10408     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1040c     34 00 90 5D |  if_ne	jmp	#LR__1291
10410     00 1E 06 F6 | 	mov	local01, #0
10414     A7 20 02 FB | 	rdlong	local02, fp
10418     0C 4E 05 F1 | 	add	fp, #12
1041c     A7 12 02 FB | 	rdlong	arg01, fp
10420     0C 4E 85 F1 | 	sub	fp, #12
10424     A4 BE BF FD | 	call	#_convertstring
10428     FD 14 02 F6 | 	mov	arg02, result1
1042c     10 13 02 F6 | 	mov	arg01, local02
10430     50 81 B0 FD | 	call	#__system___string_cmp
10434     00 FA 0D F2 | 	cmp	result1, #0 wz
10438     00 1E 26 56 |  if_ne	not	local01, #0
1043c     A7 1E 62 FC | 	wrlong	local01, fp
10440     64 00 90 FD | 	jmp	#LR__1293
10444                 | LR__1291
10444                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
10444     08 4E 05 F1 | 	add	fp, #8
10448     A7 1E 02 FB | 	rdlong	local01, fp
1044c     08 4E 85 F1 | 	sub	fp, #8
10450     2B 1E 0E F2 | 	cmp	local01, #43 wz
10454     14 4E 05 A1 |  if_e	add	fp, #20
10458     A7 22 02 AB |  if_e	rdlong	local03, fp
1045c     14 4E 85 A1 |  if_e	sub	fp, #20
10460     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
10464     3C 00 90 5D |  if_ne	jmp	#LR__1292
10468     00 1E 06 F6 | 	mov	local01, #0
1046c     A7 12 02 FB | 	rdlong	arg01, fp
10470     58 BE BF FD | 	call	#_convertstring
10474     FD 20 02 F6 | 	mov	local02, result1
10478     0C 4E 05 F1 | 	add	fp, #12
1047c     A7 12 02 FB | 	rdlong	arg01, fp
10480     0C 4E 85 F1 | 	sub	fp, #12
10484     44 BE BF FD | 	call	#_convertstring
10488     FD 14 02 F6 | 	mov	arg02, result1
1048c     10 13 02 F6 | 	mov	arg01, local02
10490     F0 80 B0 FD | 	call	#__system___string_cmp
10494     00 FA 0D F2 | 	cmp	result1, #0 wz
10498     00 1E 26 56 |  if_ne	not	local01, #0
1049c     A7 1E 62 FC | 	wrlong	local01, fp
104a0     04 00 90 FD | 	jmp	#LR__1293
104a4                 | LR__1292
104a4     A7 00 68 FC | 	wrlong	#0, fp
104a8                 | LR__1293
104a8     08 4E 05 F1 | 	add	fp, #8
104ac     A7 38 68 FC | 	wrlong	#28, fp
104b0     08 4E 85 F1 | 	sub	fp, #8
104b4     A7 12 02 F6 | 	mov	arg01, fp
104b8     A0 8D BF FD | 	call	#_push
104bc     A7 F0 03 F6 | 	mov	ptra, fp
104c0     B2 00 A0 FD | 	call	#popregs_
104c4                 | _do_ne_ret
104c4     2D 00 64 FD | 	ret
104c8                 | 
104c8                 | ' 
104c8                 | ' 
104c8                 | ' 
104c8                 | ' ' -------------------   convert a variable on the top of stack to integer
104c8                 | ' 
104c8                 | ' sub do_converttoint
104c8                 | _do_converttoint
104c8     02 4A 05 F6 | 	mov	COUNT_, #2
104cc     A8 00 A0 FD | 	call	#pushregs_
104d0     18 F0 07 F1 | 	add	ptra, #24
104d4     EC 8C BF FD | 	call	#_pop
104d8     FE 1E 02 F6 | 	mov	local01, result2
104dc     FF 20 02 F6 | 	mov	local02, result3
104e0     A7 FA 61 FC | 	wrlong	result1, fp
104e4     04 4E 05 F1 | 	add	fp, #4
104e8     A7 1E 62 FC | 	wrlong	local01, fp
104ec     04 4E 05 F1 | 	add	fp, #4
104f0     A7 20 62 FC | 	wrlong	local02, fp
104f4                 | ' t1=pop() 
104f4                 | ' select case t1.result_type
104f4     08 4E 85 F1 | 	sub	fp, #8
104f8     1C 20 0E F2 | 	cmp	local02, #28 wz
104fc     2C 00 90 AD |  if_e	jmp	#LR__1300
10500     1D 20 0E F2 | 	cmp	local02, #29 wz
10504     40 00 90 AD |  if_e	jmp	#LR__1301
10508     1E 20 0E F2 | 	cmp	local02, #30 wz
1050c     54 00 90 AD |  if_e	jmp	#LR__1302
10510     1F 20 0E F2 | 	cmp	local02, #31 wz
10514     70 00 90 AD |  if_e	jmp	#LR__1303
10518     2B 20 0E F2 | 	cmp	local02, #43 wz
1051c     94 00 90 AD |  if_e	jmp	#LR__1304
10520     FF 20 0E F2 | 	cmp	local02, #255 wz
10524     C0 00 90 AD |  if_e	jmp	#LR__1305
10528     DC 00 90 FD | 	jmp	#LR__1306
1052c                 | LR__1300
1052c     A7 20 02 FB | 	rdlong	local02, fp
10530     0C 4E 05 F1 | 	add	fp, #12
10534     A7 20 62 FC | 	wrlong	local02, fp
10538     04 4E 05 F1 | 	add	fp, #4
1053c     A7 38 68 FC | 	wrlong	#28, fp
10540     10 4E 85 F1 | 	sub	fp, #16
10544     D4 00 90 FD | 	jmp	#LR__1307
10548                 | LR__1301
10548     A7 20 02 FB | 	rdlong	local02, fp
1054c     0C 4E 05 F1 | 	add	fp, #12
10550     A7 20 62 FC | 	wrlong	local02, fp
10554     04 4E 05 F1 | 	add	fp, #4
10558     A7 38 68 FC | 	wrlong	#28, fp
1055c     10 4E 85 F1 | 	sub	fp, #16
10560     B8 00 90 FD | 	jmp	#LR__1307
10564                 | LR__1302
10564     A7 12 02 FB | 	rdlong	arg01, fp
10568     01 14 06 F6 | 	mov	arg02, #1
1056c     98 AE B0 FD | 	call	#__system___float_tointeger
10570     0C 4E 05 F1 | 	add	fp, #12
10574     A7 FA 61 FC | 	wrlong	result1, fp
10578     04 4E 05 F1 | 	add	fp, #4
1057c     A7 38 68 FC | 	wrlong	#28, fp
10580     10 4E 85 F1 | 	sub	fp, #16
10584     94 00 90 FD | 	jmp	#LR__1307
10588                 | LR__1303
10588     A7 12 02 FB | 	rdlong	arg01, fp
1058c     98 B1 B0 FD | 	call	#__system____builtin_atof
10590     FD 12 02 F6 | 	mov	arg01, result1
10594     00 14 06 F6 | 	mov	arg02, #0
10598     6C AE B0 FD | 	call	#__system___float_tointeger
1059c     0C 4E 05 F1 | 	add	fp, #12
105a0     A7 FA 61 FC | 	wrlong	result1, fp
105a4     04 4E 05 F1 | 	add	fp, #4
105a8     A7 38 68 FC | 	wrlong	#28, fp
105ac     10 4E 85 F1 | 	sub	fp, #16
105b0     68 00 90 FD | 	jmp	#LR__1307
105b4                 | LR__1304
105b4     A7 12 02 FB | 	rdlong	arg01, fp
105b8     10 BD BF FD | 	call	#_convertstring
105bc     FD 12 02 F6 | 	mov	arg01, result1
105c0     64 B1 B0 FD | 	call	#__system____builtin_atof
105c4     FD 12 02 F6 | 	mov	arg01, result1
105c8     00 14 06 F6 | 	mov	arg02, #0
105cc     38 AE B0 FD | 	call	#__system___float_tointeger
105d0     0C 4E 05 F1 | 	add	fp, #12
105d4     A7 FA 61 FC | 	wrlong	result1, fp
105d8     04 4E 05 F1 | 	add	fp, #4
105dc     A7 38 68 FC | 	wrlong	#28, fp
105e0     10 4E 85 F1 | 	sub	fp, #16
105e4     34 00 90 FD | 	jmp	#LR__1307
105e8                 | LR__1305
105e8     0C 4E 05 F1 | 	add	fp, #12
105ec     A7 00 68 FC | 	wrlong	#0, fp
105f0     0C 4E 85 F1 | 	sub	fp, #12
105f4     A7 20 02 FB | 	rdlong	local02, fp
105f8     10 4E 05 F1 | 	add	fp, #16
105fc     A7 20 62 FC | 	wrlong	local02, fp
10600     10 4E 85 F1 | 	sub	fp, #16
10604     14 00 90 FD | 	jmp	#LR__1307
10608                 | LR__1306
10608     0C 4E 05 F1 | 	add	fp, #12
1060c     A7 00 68 FC | 	wrlong	#0, fp
10610     04 4E 05 F1 | 	add	fp, #4
10614     A7 02 68 FC | 	wrlong	#1, fp
10618     10 4E 85 F1 | 	sub	fp, #16
1061c                 | LR__1307
1061c     0C 4E 05 F1 | 	add	fp, #12
10620     A7 20 02 FB | 	rdlong	local02, fp
10624     0C 4E 85 F1 | 	sub	fp, #12
10628     A7 20 62 FC | 	wrlong	local02, fp
1062c     10 4E 05 F1 | 	add	fp, #16
10630     A7 20 02 FB | 	rdlong	local02, fp
10634     08 4E 85 F1 | 	sub	fp, #8
10638     A7 20 62 FC | 	wrlong	local02, fp
1063c     08 4E 85 F1 | 	sub	fp, #8
10640     A7 12 02 F6 | 	mov	arg01, fp
10644     14 8C BF FD | 	call	#_push
10648     A7 F0 03 F6 | 	mov	ptra, fp
1064c     B2 00 A0 FD | 	call	#popregs_
10650                 | _do_converttoint_ret
10650     2D 00 64 FD | 	ret
10654                 | 
10654                 | ' 
10654                 | ' function converttoint (t1 as expr_result) as integer
10654                 | _converttoint
10654     02 4A 05 F6 | 	mov	COUNT_, #2
10658     A8 00 A0 FD | 	call	#pushregs_
1065c     09 1F 02 F6 | 	mov	local01, arg01
10660                 | ' 
10660                 | ' select case t1.result_type
10660     08 1E 06 F1 | 	add	local01, #8
10664     0F 21 02 FB | 	rdlong	local02, local01
10668     08 1E 86 F1 | 	sub	local01, #8
1066c     1C 20 0E F2 | 	cmp	local02, #28 wz
10670     24 00 90 AD |  if_e	jmp	#LR__1310
10674     1D 20 0E F2 | 	cmp	local02, #29 wz
10678     24 00 90 AD |  if_e	jmp	#LR__1311
1067c     1E 20 0E F2 | 	cmp	local02, #30 wz
10680     24 00 90 AD |  if_e	jmp	#LR__1312
10684     1F 20 0E F2 | 	cmp	local02, #31 wz
10688     2C 00 90 AD |  if_e	jmp	#LR__1313
1068c     2B 20 0E F2 | 	cmp	local02, #43 wz
10690     3C 00 90 AD |  if_e	jmp	#LR__1314
10694     58 00 90 FD | 	jmp	#LR__1315
10698                 | LR__1310
10698     0F FB 01 FB | 	rdlong	result1, local01
1069c     54 00 90 FD | 	jmp	#LR__1316
106a0                 | LR__1311
106a0     0F FB 01 FB | 	rdlong	result1, local01
106a4     4C 00 90 FD | 	jmp	#LR__1316
106a8                 | LR__1312
106a8     0F 13 02 FB | 	rdlong	arg01, local01
106ac     01 14 06 F6 | 	mov	arg02, #1
106b0     54 AD B0 FD | 	call	#__system___float_tointeger
106b4     3C 00 90 FD | 	jmp	#LR__1316
106b8                 | LR__1313
106b8     0F 13 02 FB | 	rdlong	arg01, local01
106bc     68 B0 B0 FD | 	call	#__system____builtin_atof
106c0     FD 12 02 F6 | 	mov	arg01, result1
106c4     00 14 06 F6 | 	mov	arg02, #0
106c8     3C AD B0 FD | 	call	#__system___float_tointeger
106cc     24 00 90 FD | 	jmp	#LR__1316
106d0                 | LR__1314
106d0     0F 13 02 FB | 	rdlong	arg01, local01
106d4     F4 BB BF FD | 	call	#_convertstring
106d8     FD 12 02 F6 | 	mov	arg01, result1
106dc     48 B0 B0 FD | 	call	#__system____builtin_atof
106e0     FD 12 02 F6 | 	mov	arg01, result1
106e4     00 14 06 F6 | 	mov	arg02, #0
106e8     1C AD B0 FD | 	call	#__system___float_tointeger
106ec     04 00 90 FD | 	jmp	#LR__1316
106f0                 | LR__1315
106f0     00 FA 05 F6 | 	mov	result1, #0
106f4                 | LR__1316
106f4     A7 F0 03 F6 | 	mov	ptra, fp
106f8     B2 00 A0 FD | 	call	#popregs_
106fc                 | _converttoint_ret
106fc     2D 00 64 FD | 	ret
10700                 | 
10700                 | ' 
10700                 | ' function converttofloat (t1 as expr_result) as single
10700                 | _converttofloat
10700     03 4A 05 F6 | 	mov	COUNT_, #3
10704     A8 00 A0 FD | 	call	#pushregs_
10708     09 1F 02 F6 | 	mov	local01, arg01
1070c                 | ' 
1070c                 | ' select case t1.result_type
1070c     08 1E 06 F1 | 	add	local01, #8
10710     0F 21 02 FB | 	rdlong	local02, local01
10714     08 1E 86 F1 | 	sub	local01, #8
10718     1C 20 0E F2 | 	cmp	local02, #28 wz
1071c     24 00 90 AD |  if_e	jmp	#LR__1320
10720     1D 20 0E F2 | 	cmp	local02, #29 wz
10724     38 00 90 AD |  if_e	jmp	#LR__1321
10728     1E 20 0E F2 | 	cmp	local02, #30 wz
1072c     3C 00 90 AD |  if_e	jmp	#LR__1322
10730     1F 20 0E F2 | 	cmp	local02, #31 wz
10734     3C 00 90 AD |  if_e	jmp	#LR__1323
10738     2B 20 0E F2 | 	cmp	local02, #43 wz
1073c     40 00 90 AD |  if_e	jmp	#LR__1324
10740     50 00 90 FD | 	jmp	#LR__1325
10744                 | LR__1320
10744     0F 13 02 FB | 	rdlong	arg01, local01
10748     09 13 52 F6 | 	abs	arg01, arg01 wc
1074c     1F 22 C6 C9 |  if_b	decod	local03, #31
10750     00 22 06 36 |  if_ae	mov	local03, #0
10754     E4 A3 B0 FD | 	call	#__system___float_fromuns
10758     11 FB 61 F5 | 	xor	result1, local03
1075c     38 00 90 FD | 	jmp	#LR__1326
10760                 | LR__1321
10760     0F 13 02 FB | 	rdlong	arg01, local01
10764     D4 A3 B0 FD | 	call	#__system___float_fromuns
10768     2C 00 90 FD | 	jmp	#LR__1326
1076c                 | LR__1322
1076c     0F FB 01 FB | 	rdlong	result1, local01
10770     24 00 90 FD | 	jmp	#LR__1326
10774                 | LR__1323
10774     0F 13 02 FB | 	rdlong	arg01, local01
10778     AC AF B0 FD | 	call	#__system____builtin_atof
1077c     18 00 90 FD | 	jmp	#LR__1326
10780                 | LR__1324
10780     0F 13 02 FB | 	rdlong	arg01, local01
10784     44 BB BF FD | 	call	#_convertstring
10788     FD 12 02 F6 | 	mov	arg01, result1
1078c     98 AF B0 FD | 	call	#__system____builtin_atof
10790     04 00 90 FD | 	jmp	#LR__1326
10794                 | LR__1325
10794     00 FA 05 F6 | 	mov	result1, #0
10798                 | LR__1326
10798     A7 F0 03 F6 | 	mov	ptra, fp
1079c     B2 00 A0 FD | 	call	#popregs_
107a0                 | _converttofloat_ret
107a0     2D 00 64 FD | 	ret
107a4                 | 
107a4                 | ' 
107a4                 | ' sub do_rnd
107a4                 | _do_rnd
107a4     01 4A 05 F6 | 	mov	COUNT_, #1
107a8     A8 00 A0 FD | 	call	#pushregs_
107ac     10 F0 07 F1 | 	add	ptra, #16
107b0     69 00 00 FF 
107b4     54 E4 05 F1 | 	add	objptr, ##53844
107b8     F2 1E 02 FB | 	rdlong	local01, objptr
107bc     0F 17 02 F6 | 	mov	arg03, local01
107c0     01 16 66 F0 | 	shl	arg03, #1
107c4     0F 17 02 F1 | 	add	arg03, local01
107c8     02 16 66 F0 | 	shl	arg03, #2
107cc     03 00 00 FF 
107d0     04 E4 85 F1 | 	sub	objptr, ##1540
107d4     F2 16 02 F1 | 	add	arg03, objptr
107d8     0B 17 02 FB | 	rdlong	arg03, arg03
107dc     0C 4E 05 F1 | 	add	fp, #12
107e0     A7 16 62 FC | 	wrlong	arg03, fp
107e4                 | ' 
107e4                 | ' numpar=compiledline(lineptr_e).result.uresult
107e4                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
107e4     0C 4E 85 F1 | 	sub	fp, #12
107e8     02 16 16 F2 | 	cmp	arg03, #2 wc
107ec     66 00 00 FF 
107f0     50 E4 85 F1 | 	sub	objptr, ##52304
107f4     3C 00 90 CD |  if_b	jmp	#LR__1330
107f8     00 12 06 F6 | 	mov	arg01, #0
107fc     58 D5 B0 FD | 	call	#__system___getiolock_0416
10800     FD 12 02 F6 | 	mov	arg01, result1
10804     54 7D B0 FD | 	call	#__system___lockmem
10808     3E 01 00 FF 
1080c     CA 15 06 F6 | 	mov	arg02, ##@LR__4585
10810     00 12 06 F6 | 	mov	arg01, #0
10814     00 16 06 F6 | 	mov	arg03, #0
10818     30 8A B0 FD | 	call	#__system___basic_print_string
1081c     00 12 06 F6 | 	mov	arg01, #0
10820     34 D5 B0 FD | 	call	#__system___getiolock_0416
10824     FD 00 68 FC | 	wrlong	#0, result1
10828     27 12 06 F6 | 	mov	arg01, #39
1082c     08 48 B0 FD | 	call	#_printerror
10830     2C 01 90 FD | 	jmp	#LR__1337
10834                 | LR__1330
10834                 | ' if numpar=0 then
10834     0C 4E 05 F1 | 	add	fp, #12
10838     A7 FE 09 FB | 	rdlong	result3, fp wz
1083c     0C 4E 85 F1 | 	sub	fp, #12
10840     20 00 90 5D |  if_ne	jmp	#LR__1331
10844     08 4E 05 F1 | 	add	fp, #8
10848     A7 3A 68 FC | 	wrlong	#29, fp
1084c     08 4E 85 F1 | 	sub	fp, #8
10850     1B FA 61 FD | 	getrnd	result1
10854     A7 FA 61 FC | 	wrlong	result1, fp
10858     A7 12 02 F6 | 	mov	arg01, fp
1085c     FC 89 BF FD | 	call	#_push
10860     FC 00 90 FD | 	jmp	#LR__1336
10864                 | LR__1331
10864     5C 89 BF FD | 	call	#_pop
10868     A7 FA 61 FC | 	wrlong	result1, fp
1086c     04 4E 05 F1 | 	add	fp, #4
10870     A7 FC 61 FC | 	wrlong	result2, fp
10874     04 4E 05 F1 | 	add	fp, #4
10878     A7 FE 61 FC | 	wrlong	result3, fp
1087c                 | '   t1=pop()
1087c                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
1087c     08 4E 85 F1 | 	sub	fp, #8
10880     1C FE 0D F2 | 	cmp	result3, #28 wz
10884     08 4E 05 51 |  if_ne	add	fp, #8
10888     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1088c     08 4E 85 51 |  if_ne	sub	fp, #8
10890     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
10894     2C 00 90 5D |  if_ne	jmp	#LR__1332
10898     1B FA 61 FD | 	getrnd	result1
1089c     A7 1E 02 FB | 	rdlong	local01, fp
108a0     0F FB 11 FD | 	qdiv	result1, local01
108a4     A7 12 02 F6 | 	mov	arg01, fp
108a8     19 1E 62 FD | 	getqy	local01
108ac     A7 1E 62 FC | 	wrlong	local01, fp
108b0     08 4E 05 F1 | 	add	fp, #8
108b4     A7 3A 68 FC | 	wrlong	#29, fp
108b8     08 4E 85 F1 | 	sub	fp, #8
108bc     9C 89 BF FD | 	call	#_push
108c0     9C 00 90 FD | 	jmp	#LR__1335
108c4                 | LR__1332
108c4     08 4E 05 F1 | 	add	fp, #8
108c8     A7 1E 02 FB | 	rdlong	local01, fp
108cc     08 4E 85 F1 | 	sub	fp, #8
108d0     1E 1E 0E F2 | 	cmp	local01, #30 wz
108d4     48 00 90 5D |  if_ne	jmp	#LR__1333
108d8     A7 12 02 FB | 	rdlong	arg01, fp
108dc     00 C0 24 FF 
108e0     00 14 06 F6 | 	mov	arg02, ##1233125376
108e4     5C A8 B0 FD | 	call	#__system___float_div
108e8     FD 1E 02 F6 | 	mov	local01, result1
108ec     1B 12 62 FD | 	getrnd	arg01
108f0     74 13 06 F4 | 	bitl	arg01, #372
108f4     44 A2 B0 FD | 	call	#__system___float_fromuns
108f8     FD 14 02 F6 | 	mov	arg02, result1
108fc     0F 13 02 F6 | 	mov	arg01, local01
10900     3C A6 B0 FD | 	call	#__system___float_mul
10904     A7 FA 61 FC | 	wrlong	result1, fp
10908     08 4E 05 F1 | 	add	fp, #8
1090c     A7 3C 68 FC | 	wrlong	#30, fp
10910     08 4E 85 F1 | 	sub	fp, #8
10914     A7 12 02 F6 | 	mov	arg01, fp
10918     40 89 BF FD | 	call	#_push
1091c     40 00 90 FD | 	jmp	#LR__1334
10920                 | LR__1333
10920                 | '     print "rnd: "; : printerror(40) 
10920     00 12 06 F6 | 	mov	arg01, #0
10924     30 D4 B0 FD | 	call	#__system___getiolock_0416
10928     FD 12 02 F6 | 	mov	arg01, result1
1092c     2C 7C B0 FD | 	call	#__system___lockmem
10930     3E 01 00 FF 
10934     D0 15 06 F6 | 	mov	arg02, ##@LR__4586
10938     00 12 06 F6 | 	mov	arg01, #0
1093c     00 16 06 F6 | 	mov	arg03, #0
10940     08 89 B0 FD | 	call	#__system___basic_print_string
10944     00 12 06 F6 | 	mov	arg01, #0
10948     0C D4 B0 FD | 	call	#__system___getiolock_0416
1094c     FD 00 68 FC | 	wrlong	#0, result1
10950     28 12 06 F6 | 	mov	arg01, #40
10954     E0 46 B0 FD | 	call	#_printerror
10958     A7 12 02 F6 | 	mov	arg01, fp
1095c     FC 88 BF FD | 	call	#_push
10960                 | LR__1334
10960                 | LR__1335
10960                 | LR__1336
10960                 | LR__1337
10960     A7 F0 03 F6 | 	mov	ptra, fp
10964     B2 00 A0 FD | 	call	#popregs_
10968                 | _do_rnd_ret
10968     2D 00 64 FD | 	ret
1096c                 | 
1096c                 | ' 
1096c                 | ' sub do_sin
1096c                 | _do_sin
1096c     01 4A 05 F6 | 	mov	COUNT_, #1
10970     A8 00 A0 FD | 	call	#pushregs_
10974     10 F0 07 F1 | 	add	ptra, #16
10978     69 00 00 FF 
1097c     54 E4 05 F1 | 	add	objptr, ##53844
10980     F2 1E 02 FB | 	rdlong	local01, objptr
10984     0F 17 02 F6 | 	mov	arg03, local01
10988     01 16 66 F0 | 	shl	arg03, #1
1098c     0F 17 02 F1 | 	add	arg03, local01
10990     02 16 66 F0 | 	shl	arg03, #2
10994     03 00 00 FF 
10998     04 E4 85 F1 | 	sub	objptr, ##1540
1099c     F2 16 02 F1 | 	add	arg03, objptr
109a0     0B 17 02 FB | 	rdlong	arg03, arg03
109a4     0C 4E 05 F1 | 	add	fp, #12
109a8     A7 16 62 FC | 	wrlong	arg03, fp
109ac                 | ' 
109ac                 | ' numpar=compiledline(lineptr_e).result.uresult
109ac                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
109ac     0C 4E 85 F1 | 	sub	fp, #12
109b0     02 16 16 F2 | 	cmp	arg03, #2 wc
109b4     66 00 00 FF 
109b8     50 E4 85 F1 | 	sub	objptr, ##52304
109bc     0C 4E 05 C1 |  if_b	add	fp, #12
109c0     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
109c4     0C 4E 85 C1 |  if_b	sub	fp, #12
109c8     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1340
109cc     00 12 06 F6 | 	mov	arg01, #0
109d0     84 D3 B0 FD | 	call	#__system___getiolock_0416
109d4     FD 12 02 F6 | 	mov	arg01, result1
109d8     80 7B B0 FD | 	call	#__system___lockmem
109dc     3E 01 00 FF 
109e0     D6 15 06 F6 | 	mov	arg02, ##@LR__4587
109e4     00 12 06 F6 | 	mov	arg01, #0
109e8     00 16 06 F6 | 	mov	arg03, #0
109ec     5C 88 B0 FD | 	call	#__system___basic_print_string
109f0     00 12 06 F6 | 	mov	arg01, #0
109f4     60 D3 B0 FD | 	call	#__system___getiolock_0416
109f8     FD 00 68 FC | 	wrlong	#0, result1
109fc     27 12 06 F6 | 	mov	arg01, #39
10a00     34 46 B0 FD | 	call	#_printerror
10a04     68 00 90 FD | 	jmp	#LR__1341
10a08                 | LR__1340
10a08     B8 87 BF FD | 	call	#_pop
10a0c     A7 FA 61 FC | 	wrlong	result1, fp
10a10     04 4E 05 F1 | 	add	fp, #4
10a14     A7 FC 61 FC | 	wrlong	result2, fp
10a18     04 4E 05 F1 | 	add	fp, #4
10a1c     A7 FE 61 FC | 	wrlong	result3, fp
10a20     08 4E 85 F1 | 	sub	fp, #8
10a24     87 24 20 FF 
10a28     DB 1F 06 F6 | 	mov	local01, ##1078530011
10a2c     A7 12 02 F6 | 	mov	arg01, fp
10a30     CC FC BF FD | 	call	#_converttofloat
10a34     FD 14 02 F6 | 	mov	arg02, result1
10a38     0F 13 02 F6 | 	mov	arg01, local01
10a3c     00 A5 B0 FD | 	call	#__system___float_mul
10a40     FD 12 02 F6 | 	mov	arg01, result1
10a44     00 9A 21 FF 
10a48     00 14 06 F6 | 	mov	arg02, ##1127481344
10a4c     F4 A6 B0 FD | 	call	#__system___float_div
10a50     FD 12 02 F6 | 	mov	arg01, result1
10a54     24 AE B0 FD | 	call	#__system____builtin_sinf
10a58     A7 FA 61 FC | 	wrlong	result1, fp
10a5c     08 4E 05 F1 | 	add	fp, #8
10a60     A7 3C 68 FC | 	wrlong	#30, fp
10a64     08 4E 85 F1 | 	sub	fp, #8
10a68     A7 12 02 F6 | 	mov	arg01, fp
10a6c     EC 87 BF FD | 	call	#_push
10a70                 | LR__1341
10a70     A7 F0 03 F6 | 	mov	ptra, fp
10a74     B2 00 A0 FD | 	call	#popregs_
10a78                 | _do_sin_ret
10a78     2D 00 64 FD | 	ret
10a7c                 | 
10a7c                 | ' 
10a7c                 | ' sub do_cos
10a7c                 | _do_cos
10a7c     01 4A 05 F6 | 	mov	COUNT_, #1
10a80     A8 00 A0 FD | 	call	#pushregs_
10a84     10 F0 07 F1 | 	add	ptra, #16
10a88     69 00 00 FF 
10a8c     54 E4 05 F1 | 	add	objptr, ##53844
10a90     F2 1E 02 FB | 	rdlong	local01, objptr
10a94     0F 17 02 F6 | 	mov	arg03, local01
10a98     01 16 66 F0 | 	shl	arg03, #1
10a9c     0F 17 02 F1 | 	add	arg03, local01
10aa0     02 16 66 F0 | 	shl	arg03, #2
10aa4     03 00 00 FF 
10aa8     04 E4 85 F1 | 	sub	objptr, ##1540
10aac     F2 16 02 F1 | 	add	arg03, objptr
10ab0     0B 17 02 FB | 	rdlong	arg03, arg03
10ab4     0C 4E 05 F1 | 	add	fp, #12
10ab8     A7 16 62 FC | 	wrlong	arg03, fp
10abc                 | ' 
10abc                 | ' numpar=compiledline(lineptr_e).result.uresult
10abc                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
10abc     0C 4E 85 F1 | 	sub	fp, #12
10ac0     02 16 16 F2 | 	cmp	arg03, #2 wc
10ac4     66 00 00 FF 
10ac8     50 E4 85 F1 | 	sub	objptr, ##52304
10acc     0C 4E 05 C1 |  if_b	add	fp, #12
10ad0     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
10ad4     0C 4E 85 C1 |  if_b	sub	fp, #12
10ad8     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1350
10adc     00 12 06 F6 | 	mov	arg01, #0
10ae0     74 D2 B0 FD | 	call	#__system___getiolock_0416
10ae4     FD 12 02 F6 | 	mov	arg01, result1
10ae8     70 7A B0 FD | 	call	#__system___lockmem
10aec     3E 01 00 FF 
10af0     DC 15 06 F6 | 	mov	arg02, ##@LR__4588
10af4     00 12 06 F6 | 	mov	arg01, #0
10af8     00 16 06 F6 | 	mov	arg03, #0
10afc     4C 87 B0 FD | 	call	#__system___basic_print_string
10b00     00 12 06 F6 | 	mov	arg01, #0
10b04     50 D2 B0 FD | 	call	#__system___getiolock_0416
10b08     FD 00 68 FC | 	wrlong	#0, result1
10b0c     27 12 06 F6 | 	mov	arg01, #39
10b10     24 45 B0 FD | 	call	#_printerror
10b14     7C 00 90 FD | 	jmp	#LR__1351
10b18                 | LR__1350
10b18     A8 86 BF FD | 	call	#_pop
10b1c     A7 FA 61 FC | 	wrlong	result1, fp
10b20     04 4E 05 F1 | 	add	fp, #4
10b24     A7 FC 61 FC | 	wrlong	result2, fp
10b28     04 4E 05 F1 | 	add	fp, #4
10b2c     A7 FE 61 FC | 	wrlong	result3, fp
10b30     08 4E 85 F1 | 	sub	fp, #8
10b34     87 24 20 FF 
10b38     DB 1F 06 F6 | 	mov	local01, ##1078530011
10b3c     A7 12 02 F6 | 	mov	arg01, fp
10b40     BC FB BF FD | 	call	#_converttofloat
10b44     FD 14 02 F6 | 	mov	arg02, result1
10b48     0F 13 02 F6 | 	mov	arg01, local01
10b4c     F0 A3 B0 FD | 	call	#__system___float_mul
10b50     FD 12 02 F6 | 	mov	arg01, result1
10b54     00 9A 21 FF 
10b58     00 14 06 F6 | 	mov	arg02, ##1127481344
10b5c     E4 A5 B0 FD | 	call	#__system___float_div
10b60     FD 14 02 F6 | 	mov	arg02, result1
10b64     87 E4 1F FF 
10b68     DB 13 06 F6 | 	mov	arg01, ##1070141403
10b6c     1F 14 E6 F4 | 	bitnot	arg02, #31
10b70     FC 9F B0 FD | 	call	#__system___float_add
10b74     FD 12 02 F6 | 	mov	arg01, result1
10b78     00 AD B0 FD | 	call	#__system____builtin_sinf
10b7c     A7 FA 61 FC | 	wrlong	result1, fp
10b80     08 4E 05 F1 | 	add	fp, #8
10b84     A7 3C 68 FC | 	wrlong	#30, fp
10b88     08 4E 85 F1 | 	sub	fp, #8
10b8c     A7 12 02 F6 | 	mov	arg01, fp
10b90     C8 86 BF FD | 	call	#_push
10b94                 | LR__1351
10b94     A7 F0 03 F6 | 	mov	ptra, fp
10b98     B2 00 A0 FD | 	call	#popregs_
10b9c                 | _do_cos_ret
10b9c     2D 00 64 FD | 	ret
10ba0                 | 
10ba0                 | ' 
10ba0                 | ' sub do_tan
10ba0                 | _do_tan
10ba0     01 4A 05 F6 | 	mov	COUNT_, #1
10ba4     A8 00 A0 FD | 	call	#pushregs_
10ba8     10 F0 07 F1 | 	add	ptra, #16
10bac     69 00 00 FF 
10bb0     54 E4 05 F1 | 	add	objptr, ##53844
10bb4     F2 1E 02 FB | 	rdlong	local01, objptr
10bb8     0F 17 02 F6 | 	mov	arg03, local01
10bbc     01 16 66 F0 | 	shl	arg03, #1
10bc0     0F 17 02 F1 | 	add	arg03, local01
10bc4     02 16 66 F0 | 	shl	arg03, #2
10bc8     03 00 00 FF 
10bcc     04 E4 85 F1 | 	sub	objptr, ##1540
10bd0     F2 16 02 F1 | 	add	arg03, objptr
10bd4     0B 17 02 FB | 	rdlong	arg03, arg03
10bd8     0C 4E 05 F1 | 	add	fp, #12
10bdc     A7 16 62 FC | 	wrlong	arg03, fp
10be0                 | ' 
10be0                 | ' numpar=compiledline(lineptr_e).result.uresult
10be0                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
10be0     0C 4E 85 F1 | 	sub	fp, #12
10be4     02 16 16 F2 | 	cmp	arg03, #2 wc
10be8     66 00 00 FF 
10bec     50 E4 85 F1 | 	sub	objptr, ##52304
10bf0     0C 4E 05 C1 |  if_b	add	fp, #12
10bf4     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
10bf8     0C 4E 85 C1 |  if_b	sub	fp, #12
10bfc     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1360
10c00     00 12 06 F6 | 	mov	arg01, #0
10c04     50 D1 B0 FD | 	call	#__system___getiolock_0416
10c08     FD 12 02 F6 | 	mov	arg01, result1
10c0c     4C 79 B0 FD | 	call	#__system___lockmem
10c10     3E 01 00 FF 
10c14     E2 15 06 F6 | 	mov	arg02, ##@LR__4589
10c18     00 12 06 F6 | 	mov	arg01, #0
10c1c     00 16 06 F6 | 	mov	arg03, #0
10c20     28 86 B0 FD | 	call	#__system___basic_print_string
10c24     00 12 06 F6 | 	mov	arg01, #0
10c28     2C D1 B0 FD | 	call	#__system___getiolock_0416
10c2c     FD 00 68 FC | 	wrlong	#0, result1
10c30     27 12 06 F6 | 	mov	arg01, #39
10c34     00 44 B0 FD | 	call	#_printerror
10c38     68 00 90 FD | 	jmp	#LR__1361
10c3c                 | LR__1360
10c3c     84 85 BF FD | 	call	#_pop
10c40     A7 FA 61 FC | 	wrlong	result1, fp
10c44     04 4E 05 F1 | 	add	fp, #4
10c48     A7 FC 61 FC | 	wrlong	result2, fp
10c4c     04 4E 05 F1 | 	add	fp, #4
10c50     A7 FE 61 FC | 	wrlong	result3, fp
10c54     08 4E 85 F1 | 	sub	fp, #8
10c58     87 24 20 FF 
10c5c     DB 1F 06 F6 | 	mov	local01, ##1078530011
10c60     A7 12 02 F6 | 	mov	arg01, fp
10c64     98 FA BF FD | 	call	#_converttofloat
10c68     FD 14 02 F6 | 	mov	arg02, result1
10c6c     0F 13 02 F6 | 	mov	arg01, local01
10c70     CC A2 B0 FD | 	call	#__system___float_mul
10c74     FD 12 02 F6 | 	mov	arg01, result1
10c78     00 9A 21 FF 
10c7c     00 14 06 F6 | 	mov	arg02, ##1127481344
10c80     C0 A4 B0 FD | 	call	#__system___float_div
10c84     FD 12 02 F6 | 	mov	arg01, result1
10c88     3C AD B0 FD | 	call	#__system____builtin_tanf
10c8c     A7 FA 61 FC | 	wrlong	result1, fp
10c90     08 4E 05 F1 | 	add	fp, #8
10c94     A7 3C 68 FC | 	wrlong	#30, fp
10c98     08 4E 85 F1 | 	sub	fp, #8
10c9c     A7 12 02 F6 | 	mov	arg01, fp
10ca0     B8 85 BF FD | 	call	#_push
10ca4                 | LR__1361
10ca4     A7 F0 03 F6 | 	mov	ptra, fp
10ca8     B2 00 A0 FD | 	call	#popregs_
10cac                 | _do_tan_ret
10cac     2D 00 64 FD | 	ret
10cb0                 | 
10cb0                 | ' 
10cb0                 | ' sub do_asin
10cb0                 | _do_asin
10cb0     01 4A 05 F6 | 	mov	COUNT_, #1
10cb4     A8 00 A0 FD | 	call	#pushregs_
10cb8     10 F0 07 F1 | 	add	ptra, #16
10cbc     69 00 00 FF 
10cc0     54 E4 05 F1 | 	add	objptr, ##53844
10cc4     F2 1E 02 FB | 	rdlong	local01, objptr
10cc8     0F 17 02 F6 | 	mov	arg03, local01
10ccc     01 16 66 F0 | 	shl	arg03, #1
10cd0     0F 17 02 F1 | 	add	arg03, local01
10cd4     02 16 66 F0 | 	shl	arg03, #2
10cd8     03 00 00 FF 
10cdc     04 E4 85 F1 | 	sub	objptr, ##1540
10ce0     F2 16 02 F1 | 	add	arg03, objptr
10ce4     0B 17 02 FB | 	rdlong	arg03, arg03
10ce8     0C 4E 05 F1 | 	add	fp, #12
10cec     A7 16 62 FC | 	wrlong	arg03, fp
10cf0                 | ' 
10cf0                 | ' numpar=compiledline(lineptr_e).result.uresult
10cf0                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
10cf0     0C 4E 85 F1 | 	sub	fp, #12
10cf4     02 16 16 F2 | 	cmp	arg03, #2 wc
10cf8     66 00 00 FF 
10cfc     50 E4 85 F1 | 	sub	objptr, ##52304
10d00     0C 4E 05 C1 |  if_b	add	fp, #12
10d04     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
10d08     0C 4E 85 C1 |  if_b	sub	fp, #12
10d0c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1370
10d10     00 12 06 F6 | 	mov	arg01, #0
10d14     40 D0 B0 FD | 	call	#__system___getiolock_0416
10d18     FD 12 02 F6 | 	mov	arg01, result1
10d1c     3C 78 B0 FD | 	call	#__system___lockmem
10d20     3E 01 00 FF 
10d24     E8 15 06 F6 | 	mov	arg02, ##@LR__4590
10d28     00 12 06 F6 | 	mov	arg01, #0
10d2c     00 16 06 F6 | 	mov	arg03, #0
10d30     18 85 B0 FD | 	call	#__system___basic_print_string
10d34     00 12 06 F6 | 	mov	arg01, #0
10d38     1C D0 B0 FD | 	call	#__system___getiolock_0416
10d3c     FD 00 68 FC | 	wrlong	#0, result1
10d40     27 12 06 F6 | 	mov	arg01, #39
10d44     F0 42 B0 FD | 	call	#_printerror
10d48     68 00 90 FD | 	jmp	#LR__1371
10d4c                 | LR__1370
10d4c     74 84 BF FD | 	call	#_pop
10d50     FF 1E 02 F6 | 	mov	local01, result3
10d54     A7 FA 61 FC | 	wrlong	result1, fp
10d58     04 4E 05 F1 | 	add	fp, #4
10d5c     A7 FC 61 FC | 	wrlong	result2, fp
10d60     04 4E 05 F1 | 	add	fp, #4
10d64     A7 1E 62 FC | 	wrlong	local01, fp
10d68     08 4E 85 F1 | 	sub	fp, #8
10d6c     A7 12 02 F6 | 	mov	arg01, fp
10d70     8C F9 BF FD | 	call	#_converttofloat
10d74     FD 12 02 F6 | 	mov	arg01, result1
10d78     94 AC B0 FD | 	call	#__system____builtin_asinf
10d7c     FD 12 02 F6 | 	mov	arg01, result1
10d80     00 9A 21 FF 
10d84     00 14 06 F6 | 	mov	arg02, ##1127481344
10d88     B4 A1 B0 FD | 	call	#__system___float_mul
10d8c     FD 12 02 F6 | 	mov	arg01, result1
10d90     87 24 20 FF 
10d94     DB 15 06 F6 | 	mov	arg02, ##1078530011
10d98     A8 A3 B0 FD | 	call	#__system___float_div
10d9c     A7 FA 61 FC | 	wrlong	result1, fp
10da0     08 4E 05 F1 | 	add	fp, #8
10da4     A7 3C 68 FC | 	wrlong	#30, fp
10da8     08 4E 85 F1 | 	sub	fp, #8
10dac     A7 12 02 F6 | 	mov	arg01, fp
10db0     A8 84 BF FD | 	call	#_push
10db4                 | LR__1371
10db4     A7 F0 03 F6 | 	mov	ptra, fp
10db8     B2 00 A0 FD | 	call	#popregs_
10dbc                 | _do_asin_ret
10dbc     2D 00 64 FD | 	ret
10dc0                 | 
10dc0                 | ' 
10dc0                 | ' sub do_acos
10dc0                 | _do_acos
10dc0     01 4A 05 F6 | 	mov	COUNT_, #1
10dc4     A8 00 A0 FD | 	call	#pushregs_
10dc8     10 F0 07 F1 | 	add	ptra, #16
10dcc     69 00 00 FF 
10dd0     54 E4 05 F1 | 	add	objptr, ##53844
10dd4     F2 1E 02 FB | 	rdlong	local01, objptr
10dd8     0F 17 02 F6 | 	mov	arg03, local01
10ddc     01 16 66 F0 | 	shl	arg03, #1
10de0     0F 17 02 F1 | 	add	arg03, local01
10de4     02 16 66 F0 | 	shl	arg03, #2
10de8     03 00 00 FF 
10dec     04 E4 85 F1 | 	sub	objptr, ##1540
10df0     F2 16 02 F1 | 	add	arg03, objptr
10df4     0B 17 02 FB | 	rdlong	arg03, arg03
10df8     0C 4E 05 F1 | 	add	fp, #12
10dfc     A7 16 62 FC | 	wrlong	arg03, fp
10e00                 | ' 
10e00                 | ' numpar=compiledline(lineptr_e).result.uresult
10e00                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
10e00     0C 4E 85 F1 | 	sub	fp, #12
10e04     02 16 16 F2 | 	cmp	arg03, #2 wc
10e08     66 00 00 FF 
10e0c     50 E4 85 F1 | 	sub	objptr, ##52304
10e10     0C 4E 05 C1 |  if_b	add	fp, #12
10e14     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
10e18     0C 4E 85 C1 |  if_b	sub	fp, #12
10e1c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1380
10e20     00 12 06 F6 | 	mov	arg01, #0
10e24     30 CF B0 FD | 	call	#__system___getiolock_0416
10e28     FD 12 02 F6 | 	mov	arg01, result1
10e2c     2C 77 B0 FD | 	call	#__system___lockmem
10e30     3E 01 00 FF 
10e34     EF 15 06 F6 | 	mov	arg02, ##@LR__4591
10e38     00 12 06 F6 | 	mov	arg01, #0
10e3c     00 16 06 F6 | 	mov	arg03, #0
10e40     08 84 B0 FD | 	call	#__system___basic_print_string
10e44     00 12 06 F6 | 	mov	arg01, #0
10e48     0C CF B0 FD | 	call	#__system___getiolock_0416
10e4c     FD 00 68 FC | 	wrlong	#0, result1
10e50     27 12 06 F6 | 	mov	arg01, #39
10e54     E0 41 B0 FD | 	call	#_printerror
10e58     68 00 90 FD | 	jmp	#LR__1381
10e5c                 | LR__1380
10e5c     64 83 BF FD | 	call	#_pop
10e60     FF 1E 02 F6 | 	mov	local01, result3
10e64     A7 FA 61 FC | 	wrlong	result1, fp
10e68     04 4E 05 F1 | 	add	fp, #4
10e6c     A7 FC 61 FC | 	wrlong	result2, fp
10e70     04 4E 05 F1 | 	add	fp, #4
10e74     A7 1E 62 FC | 	wrlong	local01, fp
10e78     08 4E 85 F1 | 	sub	fp, #8
10e7c     A7 12 02 F6 | 	mov	arg01, fp
10e80     7C F8 BF FD | 	call	#_converttofloat
10e84     FD 12 02 F6 | 	mov	arg01, result1
10e88     D0 AB B0 FD | 	call	#__system____builtin_acosf
10e8c     FD 12 02 F6 | 	mov	arg01, result1
10e90     00 9A 21 FF 
10e94     00 14 06 F6 | 	mov	arg02, ##1127481344
10e98     A4 A0 B0 FD | 	call	#__system___float_mul
10e9c     FD 12 02 F6 | 	mov	arg01, result1
10ea0     87 24 20 FF 
10ea4     DB 15 06 F6 | 	mov	arg02, ##1078530011
10ea8     98 A2 B0 FD | 	call	#__system___float_div
10eac     A7 FA 61 FC | 	wrlong	result1, fp
10eb0     08 4E 05 F1 | 	add	fp, #8
10eb4     A7 3C 68 FC | 	wrlong	#30, fp
10eb8     08 4E 85 F1 | 	sub	fp, #8
10ebc     A7 12 02 F6 | 	mov	arg01, fp
10ec0     98 83 BF FD | 	call	#_push
10ec4                 | LR__1381
10ec4     A7 F0 03 F6 | 	mov	ptra, fp
10ec8     B2 00 A0 FD | 	call	#popregs_
10ecc                 | _do_acos_ret
10ecc     2D 00 64 FD | 	ret
10ed0                 | 
10ed0                 | ' 
10ed0                 | ' sub do_atn
10ed0                 | _do_atn
10ed0     01 4A 05 F6 | 	mov	COUNT_, #1
10ed4     A8 00 A0 FD | 	call	#pushregs_
10ed8     10 F0 07 F1 | 	add	ptra, #16
10edc     69 00 00 FF 
10ee0     54 E4 05 F1 | 	add	objptr, ##53844
10ee4     F2 1E 02 FB | 	rdlong	local01, objptr
10ee8     0F 17 02 F6 | 	mov	arg03, local01
10eec     01 16 66 F0 | 	shl	arg03, #1
10ef0     0F 17 02 F1 | 	add	arg03, local01
10ef4     02 16 66 F0 | 	shl	arg03, #2
10ef8     03 00 00 FF 
10efc     04 E4 85 F1 | 	sub	objptr, ##1540
10f00     F2 16 02 F1 | 	add	arg03, objptr
10f04     0B 17 02 FB | 	rdlong	arg03, arg03
10f08     0C 4E 05 F1 | 	add	fp, #12
10f0c     A7 16 62 FC | 	wrlong	arg03, fp
10f10                 | ' 
10f10                 | ' numpar=compiledline(lineptr_e).result.uresult
10f10                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
10f10     0C 4E 85 F1 | 	sub	fp, #12
10f14     02 16 16 F2 | 	cmp	arg03, #2 wc
10f18     66 00 00 FF 
10f1c     50 E4 85 F1 | 	sub	objptr, ##52304
10f20     0C 4E 05 C1 |  if_b	add	fp, #12
10f24     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
10f28     0C 4E 85 C1 |  if_b	sub	fp, #12
10f2c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1390
10f30     00 12 06 F6 | 	mov	arg01, #0
10f34     20 CE B0 FD | 	call	#__system___getiolock_0416
10f38     FD 12 02 F6 | 	mov	arg01, result1
10f3c     1C 76 B0 FD | 	call	#__system___lockmem
10f40     3E 01 00 FF 
10f44     F6 15 06 F6 | 	mov	arg02, ##@LR__4592
10f48     00 12 06 F6 | 	mov	arg01, #0
10f4c     00 16 06 F6 | 	mov	arg03, #0
10f50     F8 82 B0 FD | 	call	#__system___basic_print_string
10f54     00 12 06 F6 | 	mov	arg01, #0
10f58     FC CD B0 FD | 	call	#__system___getiolock_0416
10f5c     FD 00 68 FC | 	wrlong	#0, result1
10f60     27 12 06 F6 | 	mov	arg01, #39
10f64     D0 40 B0 FD | 	call	#_printerror
10f68     70 00 90 FD | 	jmp	#LR__1391
10f6c                 | LR__1390
10f6c     54 82 BF FD | 	call	#_pop
10f70     FF 1E 02 F6 | 	mov	local01, result3
10f74     A7 FA 61 FC | 	wrlong	result1, fp
10f78     04 4E 05 F1 | 	add	fp, #4
10f7c     A7 FC 61 FC | 	wrlong	result2, fp
10f80     04 4E 05 F1 | 	add	fp, #4
10f84     A7 1E 62 FC | 	wrlong	local01, fp
10f88     08 4E 85 F1 | 	sub	fp, #8
10f8c     A7 12 02 F6 | 	mov	arg01, fp
10f90     6C F7 BF FD | 	call	#_converttofloat
10f94     FD 12 02 F6 | 	mov	arg01, result1
10f98     00 C0 1F FF 
10f9c     00 14 06 F6 | 	mov	arg02, ##1065353216
10fa0     04 AB B0 FD | 	call	#__system____builtin_atan2f
10fa4     FD 12 02 F6 | 	mov	arg01, result1
10fa8     00 9A 21 FF 
10fac     00 14 06 F6 | 	mov	arg02, ##1127481344
10fb0     8C 9F B0 FD | 	call	#__system___float_mul
10fb4     FD 12 02 F6 | 	mov	arg01, result1
10fb8     87 24 20 FF 
10fbc     DB 15 06 F6 | 	mov	arg02, ##1078530011
10fc0     80 A1 B0 FD | 	call	#__system___float_div
10fc4     A7 FA 61 FC | 	wrlong	result1, fp
10fc8     08 4E 05 F1 | 	add	fp, #8
10fcc     A7 3C 68 FC | 	wrlong	#30, fp
10fd0     08 4E 85 F1 | 	sub	fp, #8
10fd4     A7 12 02 F6 | 	mov	arg01, fp
10fd8     80 82 BF FD | 	call	#_push
10fdc                 | LR__1391
10fdc     A7 F0 03 F6 | 	mov	ptra, fp
10fe0     B2 00 A0 FD | 	call	#popregs_
10fe4                 | _do_atn_ret
10fe4     2D 00 64 FD | 	ret
10fe8                 | 
10fe8                 | ' 
10fe8                 | ' sub do_sqr
10fe8                 | _do_sqr
10fe8     01 4A 05 F6 | 	mov	COUNT_, #1
10fec     A8 00 A0 FD | 	call	#pushregs_
10ff0     10 F0 07 F1 | 	add	ptra, #16
10ff4     69 00 00 FF 
10ff8     54 E4 05 F1 | 	add	objptr, ##53844
10ffc     F2 1E 02 FB | 	rdlong	local01, objptr
11000     0F 17 02 F6 | 	mov	arg03, local01
11004     01 16 66 F0 | 	shl	arg03, #1
11008     0F 17 02 F1 | 	add	arg03, local01
1100c     02 16 66 F0 | 	shl	arg03, #2
11010     03 00 00 FF 
11014     04 E4 85 F1 | 	sub	objptr, ##1540
11018     F2 16 02 F1 | 	add	arg03, objptr
1101c     0B 17 02 FB | 	rdlong	arg03, arg03
11020     0C 4E 05 F1 | 	add	fp, #12
11024     A7 16 62 FC | 	wrlong	arg03, fp
11028                 | ' 
11028                 | ' numpar=compiledline(lineptr_e).result.uresult
11028                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
11028     0C 4E 85 F1 | 	sub	fp, #12
1102c     02 16 16 F2 | 	cmp	arg03, #2 wc
11030     66 00 00 FF 
11034     50 E4 85 F1 | 	sub	objptr, ##52304
11038     0C 4E 05 C1 |  if_b	add	fp, #12
1103c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
11040     0C 4E 85 C1 |  if_b	sub	fp, #12
11044     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1400
11048     00 12 06 F6 | 	mov	arg01, #0
1104c     08 CD B0 FD | 	call	#__system___getiolock_0416
11050     FD 12 02 F6 | 	mov	arg01, result1
11054     04 75 B0 FD | 	call	#__system___lockmem
11058     3E 01 00 FF 
1105c     FC 15 06 F6 | 	mov	arg02, ##@LR__4593
11060     00 12 06 F6 | 	mov	arg01, #0
11064     00 16 06 F6 | 	mov	arg03, #0
11068     E0 81 B0 FD | 	call	#__system___basic_print_string
1106c     00 12 06 F6 | 	mov	arg01, #0
11070     E4 CC B0 FD | 	call	#__system___getiolock_0416
11074     FD 00 68 FC | 	wrlong	#0, result1
11078     27 12 06 F6 | 	mov	arg01, #39
1107c     B8 3F B0 FD | 	call	#_printerror
11080     48 00 90 FD | 	jmp	#LR__1401
11084                 | LR__1400
11084     3C 81 BF FD | 	call	#_pop
11088     FF 1E 02 F6 | 	mov	local01, result3
1108c     A7 FA 61 FC | 	wrlong	result1, fp
11090     04 4E 05 F1 | 	add	fp, #4
11094     A7 FC 61 FC | 	wrlong	result2, fp
11098     04 4E 05 F1 | 	add	fp, #4
1109c     A7 1E 62 FC | 	wrlong	local01, fp
110a0     08 4E 85 F1 | 	sub	fp, #8
110a4     A7 12 02 F6 | 	mov	arg01, fp
110a8     54 F6 BF FD | 	call	#_converttofloat
110ac     FD 12 02 F6 | 	mov	arg01, result1
110b0     B4 9D B0 FD | 	call	#__system___float_sqrt
110b4     A7 FA 61 FC | 	wrlong	result1, fp
110b8     08 4E 05 F1 | 	add	fp, #8
110bc     A7 3C 68 FC | 	wrlong	#30, fp
110c0     08 4E 85 F1 | 	sub	fp, #8
110c4     A7 12 02 F6 | 	mov	arg01, fp
110c8     90 81 BF FD | 	call	#_push
110cc                 | LR__1401
110cc     A7 F0 03 F6 | 	mov	ptra, fp
110d0     B2 00 A0 FD | 	call	#popregs_
110d4                 | _do_sqr_ret
110d4     2D 00 64 FD | 	ret
110d8                 | 
110d8                 | ' 
110d8                 | ' sub do_stick
110d8                 | _do_stick
110d8     01 4A 05 F6 | 	mov	COUNT_, #1
110dc     A8 00 A0 FD | 	call	#pushregs_
110e0     10 F0 07 F1 | 	add	ptra, #16
110e4     69 00 00 FF 
110e8     54 E4 05 F1 | 	add	objptr, ##53844
110ec     F2 1E 02 FB | 	rdlong	local01, objptr
110f0     0F 17 02 F6 | 	mov	arg03, local01
110f4     01 16 66 F0 | 	shl	arg03, #1
110f8     0F 17 02 F1 | 	add	arg03, local01
110fc     02 16 66 F0 | 	shl	arg03, #2
11100     03 00 00 FF 
11104     04 E4 85 F1 | 	sub	objptr, ##1540
11108     F2 16 02 F1 | 	add	arg03, objptr
1110c     0B 17 02 FB | 	rdlong	arg03, arg03
11110     0C 4E 05 F1 | 	add	fp, #12
11114     A7 16 62 FC | 	wrlong	arg03, fp
11118                 | ' 
11118                 | ' numpar=compiledline(lineptr_e).result.uresult
11118                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
11118     0C 4E 85 F1 | 	sub	fp, #12
1111c     02 16 16 F2 | 	cmp	arg03, #2 wc
11120     66 00 00 FF 
11124     50 E4 85 F1 | 	sub	objptr, ##52304
11128     3C 00 90 CD |  if_b	jmp	#LR__1410
1112c     00 12 06 F6 | 	mov	arg01, #0
11130     24 CC B0 FD | 	call	#__system___getiolock_0416
11134     FD 12 02 F6 | 	mov	arg01, result1
11138     20 74 B0 FD | 	call	#__system___lockmem
1113c     3F 01 00 FF 
11140     02 14 06 F6 | 	mov	arg02, ##@LR__4594
11144     00 12 06 F6 | 	mov	arg01, #0
11148     00 16 06 F6 | 	mov	arg03, #0
1114c     FC 80 B0 FD | 	call	#__system___basic_print_string
11150     00 12 06 F6 | 	mov	arg01, #0
11154     00 CC B0 FD | 	call	#__system___getiolock_0416
11158     FD 00 68 FC | 	wrlong	#0, result1
1115c     27 12 06 F6 | 	mov	arg01, #39
11160     D4 3E B0 FD | 	call	#_printerror
11164     E8 00 90 FD | 	jmp	#LR__1414
11168                 | LR__1410
11168                 | ' 
11168                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
11168     0C 4E 05 F1 | 	add	fp, #12
1116c     A7 FE 09 FB | 	rdlong	result3, fp wz
11170     0C 4E 85 F1 | 	sub	fp, #12
11174     30 00 90 5D |  if_ne	jmp	#LR__1411
11178     79 00 00 FF 
1117c     D0 E5 05 F1 | 	add	objptr, ##62416
11180     F2 1E 02 FB | 	rdlong	local01, objptr
11184     79 00 00 FF 
11188     D0 E5 85 F1 | 	sub	objptr, ##62416
1118c     A7 1E 62 FC | 	wrlong	local01, fp
11190     08 4E 05 F1 | 	add	fp, #8
11194     A7 3A 68 FC | 	wrlong	#29, fp
11198     08 4E 85 F1 | 	sub	fp, #8
1119c     A7 12 02 F6 | 	mov	arg01, fp
111a0     B8 80 BF FD | 	call	#_push
111a4     A8 00 90 FD | 	jmp	#LR__1414
111a8                 | LR__1411
111a8     18 80 BF FD | 	call	#_pop
111ac     A7 FA 61 FC | 	wrlong	result1, fp
111b0     04 4E 05 F1 | 	add	fp, #4
111b4     A7 FC 61 FC | 	wrlong	result2, fp
111b8     04 4E 05 F1 | 	add	fp, #4
111bc     A7 FE 61 FC | 	wrlong	result3, fp
111c0                 | ' 
111c0                 | ' t1=pop()
111c0                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
111c0     08 4E 85 F1 | 	sub	fp, #8
111c4     1C FE 0D F2 | 	cmp	result3, #28 wz
111c8     08 4E 05 51 |  if_ne	add	fp, #8
111cc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
111d0     08 4E 85 51 |  if_ne	sub	fp, #8
111d4     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
111d8     6C 00 90 5D |  if_ne	jmp	#LR__1413
111dc     A7 1E 02 FB | 	rdlong	local01, fp
111e0     7A 00 00 FF 
111e4     9C E4 05 F1 | 	add	objptr, ##62620
111e8     F2 1E 62 FC | 	wrlong	local01, objptr
111ec                 | '   q=t1.result.uresult
111ec                 | '   if q<7 then 
111ec     7A 00 00 FF 
111f0     9C E4 85 F1 | 	sub	objptr, ##62620
111f4     07 1E 56 F2 | 	cmps	local01, #7 wc
111f8     40 00 90 3D |  if_ae	jmp	#LR__1412
111fc     7A 00 00 FF 
11200     9C E4 05 F1 | 	add	objptr, ##62620
11204     F2 1E 02 FB | 	rdlong	local01, objptr
11208     02 1E 66 F0 | 	shl	local01, #2
1120c     CC E4 85 F1 | 	sub	objptr, #204
11210     F2 1E 02 F1 | 	add	local01, objptr
11214     0F 1F 02 FB | 	rdlong	local01, local01
11218     A7 1E 62 FC | 	wrlong	local01, fp
1121c     08 4E 05 F1 | 	add	fp, #8
11220     A7 3A 68 FC | 	wrlong	#29, fp
11224     08 4E 85 F1 | 	sub	fp, #8
11228     A7 12 02 F6 | 	mov	arg01, fp
1122c     79 00 00 FF 
11230     D0 E5 85 F1 | 	sub	objptr, ##62416
11234     24 80 BF FD | 	call	#_push
11238                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
11238     14 00 90 FD | 	jmp	#LR__1414
1123c                 | LR__1412
1123c     29 12 06 F6 | 	mov	arg01, #41
11240     F4 3D B0 FD | 	call	#_printerror
11244                 | '      printerror(41) : return
11244     08 00 90 FD | 	jmp	#LR__1414
11248                 | LR__1413
11248     29 12 06 F6 | 	mov	arg01, #41
1124c     E8 3D B0 FD | 	call	#_printerror
11250                 | LR__1414
11250     A7 F0 03 F6 | 	mov	ptra, fp
11254     B2 00 A0 FD | 	call	#popregs_
11258                 | _do_stick_ret
11258     2D 00 64 FD | 	ret
1125c                 | 
1125c                 | ' 
1125c                 | ' sub do_strig
1125c                 | _do_strig
1125c     01 4A 05 F6 | 	mov	COUNT_, #1
11260     A8 00 A0 FD | 	call	#pushregs_
11264     10 F0 07 F1 | 	add	ptra, #16
11268     69 00 00 FF 
1126c     54 E4 05 F1 | 	add	objptr, ##53844
11270     F2 1E 02 FB | 	rdlong	local01, objptr
11274     0F 17 02 F6 | 	mov	arg03, local01
11278     01 16 66 F0 | 	shl	arg03, #1
1127c     0F 17 02 F1 | 	add	arg03, local01
11280     02 16 66 F0 | 	shl	arg03, #2
11284     03 00 00 FF 
11288     04 E4 85 F1 | 	sub	objptr, ##1540
1128c     F2 16 02 F1 | 	add	arg03, objptr
11290     0B 17 02 FB | 	rdlong	arg03, arg03
11294     0C 4E 05 F1 | 	add	fp, #12
11298     A7 16 62 FC | 	wrlong	arg03, fp
1129c                 | ' 
1129c                 | ' numpar=compiledline(lineptr_e).result.uresult
1129c                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
1129c     0C 4E 85 F1 | 	sub	fp, #12
112a0     02 16 16 F2 | 	cmp	arg03, #2 wc
112a4     66 00 00 FF 
112a8     50 E4 85 F1 | 	sub	objptr, ##52304
112ac     3C 00 90 CD |  if_b	jmp	#LR__1420
112b0     00 12 06 F6 | 	mov	arg01, #0
112b4     A0 CA B0 FD | 	call	#__system___getiolock_0416
112b8     FD 12 02 F6 | 	mov	arg01, result1
112bc     9C 72 B0 FD | 	call	#__system___lockmem
112c0     3F 01 00 FF 
112c4     0A 14 06 F6 | 	mov	arg02, ##@LR__4595
112c8     00 12 06 F6 | 	mov	arg01, #0
112cc     00 16 06 F6 | 	mov	arg03, #0
112d0     78 7F B0 FD | 	call	#__system___basic_print_string
112d4     00 12 06 F6 | 	mov	arg01, #0
112d8     7C CA B0 FD | 	call	#__system___getiolock_0416
112dc     FD 00 68 FC | 	wrlong	#0, result1
112e0     27 12 06 F6 | 	mov	arg01, #39
112e4     50 3D B0 FD | 	call	#_printerror
112e8     E8 00 90 FD | 	jmp	#LR__1424
112ec                 | LR__1420
112ec                 | ' 
112ec                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
112ec     0C 4E 05 F1 | 	add	fp, #12
112f0     A7 FE 09 FB | 	rdlong	result3, fp wz
112f4     0C 4E 85 F1 | 	sub	fp, #12
112f8     30 00 90 5D |  if_ne	jmp	#LR__1421
112fc     79 00 00 FF 
11300     EC E5 05 F1 | 	add	objptr, ##62444
11304     F2 1E 02 FB | 	rdlong	local01, objptr
11308     79 00 00 FF 
1130c     EC E5 85 F1 | 	sub	objptr, ##62444
11310     A7 1E 62 FC | 	wrlong	local01, fp
11314     08 4E 05 F1 | 	add	fp, #8
11318     A7 3A 68 FC | 	wrlong	#29, fp
1131c     08 4E 85 F1 | 	sub	fp, #8
11320     A7 12 02 F6 | 	mov	arg01, fp
11324     34 7F BF FD | 	call	#_push
11328     A8 00 90 FD | 	jmp	#LR__1424
1132c                 | LR__1421
1132c     94 7E BF FD | 	call	#_pop
11330     A7 FA 61 FC | 	wrlong	result1, fp
11334     04 4E 05 F1 | 	add	fp, #4
11338     A7 FC 61 FC | 	wrlong	result2, fp
1133c     04 4E 05 F1 | 	add	fp, #4
11340     A7 FE 61 FC | 	wrlong	result3, fp
11344                 | ' 
11344                 | ' t1=pop()
11344                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
11344     08 4E 85 F1 | 	sub	fp, #8
11348     1C FE 0D F2 | 	cmp	result3, #28 wz
1134c     08 4E 05 51 |  if_ne	add	fp, #8
11350     A7 1E 02 5B |  if_ne	rdlong	local01, fp
11354     08 4E 85 51 |  if_ne	sub	fp, #8
11358     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
1135c     6C 00 90 5D |  if_ne	jmp	#LR__1423
11360     A7 1E 02 FB | 	rdlong	local01, fp
11364     7A 00 00 FF 
11368     9C E4 05 F1 | 	add	objptr, ##62620
1136c     F2 1E 62 FC | 	wrlong	local01, objptr
11370                 | '   q=t1.result.uresult
11370                 | '   if q<7 then 
11370     7A 00 00 FF 
11374     9C E4 85 F1 | 	sub	objptr, ##62620
11378     07 1E 56 F2 | 	cmps	local01, #7 wc
1137c     40 00 90 3D |  if_ae	jmp	#LR__1422
11380     7A 00 00 FF 
11384     9C E4 05 F1 | 	add	objptr, ##62620
11388     F2 1E 02 FB | 	rdlong	local01, objptr
1138c     02 1E 66 F0 | 	shl	local01, #2
11390     B0 E4 85 F1 | 	sub	objptr, #176
11394     F2 1E 02 F1 | 	add	local01, objptr
11398     0F 1F 02 FB | 	rdlong	local01, local01
1139c     A7 1E 62 FC | 	wrlong	local01, fp
113a0     08 4E 05 F1 | 	add	fp, #8
113a4     A7 3A 68 FC | 	wrlong	#29, fp
113a8     08 4E 85 F1 | 	sub	fp, #8
113ac     A7 12 02 F6 | 	mov	arg01, fp
113b0     79 00 00 FF 
113b4     EC E5 85 F1 | 	sub	objptr, ##62444
113b8     A0 7E BF FD | 	call	#_push
113bc                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
113bc     14 00 90 FD | 	jmp	#LR__1424
113c0                 | LR__1422
113c0     29 12 06 F6 | 	mov	arg01, #41
113c4     70 3C B0 FD | 	call	#_printerror
113c8                 | '      printerror(41) : return
113c8     08 00 90 FD | 	jmp	#LR__1424
113cc                 | LR__1423
113cc     29 12 06 F6 | 	mov	arg01, #41
113d0     64 3C B0 FD | 	call	#_printerror
113d4                 | LR__1424
113d4     A7 F0 03 F6 | 	mov	ptra, fp
113d8     B2 00 A0 FD | 	call	#popregs_
113dc                 | _do_strig_ret
113dc     2D 00 64 FD | 	ret
113e0                 | 
113e0                 | ' 
113e0                 | ' sub do_getpixel
113e0                 | _do_getpixel
113e0     00 4A 05 F6 | 	mov	COUNT_, #0
113e4     A8 00 A0 FD | 	call	#pushregs_
113e8     24 F0 07 F1 | 	add	ptra, #36
113ec     69 00 00 FF 
113f0     54 E4 05 F1 | 	add	objptr, ##53844
113f4     F2 16 02 FB | 	rdlong	arg03, objptr
113f8     0B 15 02 F6 | 	mov	arg02, arg03
113fc     01 14 66 F0 | 	shl	arg02, #1
11400     0B 15 02 F1 | 	add	arg02, arg03
11404     02 14 66 F0 | 	shl	arg02, #2
11408     03 00 00 FF 
1140c     04 E4 85 F1 | 	sub	objptr, ##1540
11410     F2 14 02 F1 | 	add	arg02, objptr
11414     0A 17 02 FB | 	rdlong	arg03, arg02
11418     18 4E 05 F1 | 	add	fp, #24
1141c     A7 16 62 FC | 	wrlong	arg03, fp
11420                 | ' 
11420                 | ' numpar=compiledline(lineptr_e).result.uresult
11420                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
11420     18 4E 85 F1 | 	sub	fp, #24
11424     02 16 0E F2 | 	cmp	arg03, #2 wz
11428     66 00 00 FF 
1142c     50 E4 85 F1 | 	sub	objptr, ##52304
11430     3C 00 90 AD |  if_e	jmp	#LR__1430
11434     00 12 06 F6 | 	mov	arg01, #0
11438     1C C9 B0 FD | 	call	#__system___getiolock_0416
1143c     FD 12 02 F6 | 	mov	arg01, result1
11440     18 71 B0 FD | 	call	#__system___lockmem
11444     3F 01 00 FF 
11448     12 14 06 F6 | 	mov	arg02, ##@LR__4596
1144c     00 12 06 F6 | 	mov	arg01, #0
11450     00 16 06 F6 | 	mov	arg03, #0
11454     F4 7D B0 FD | 	call	#__system___basic_print_string
11458     00 12 06 F6 | 	mov	arg01, #0
1145c     F8 C8 B0 FD | 	call	#__system___getiolock_0416
11460     FD 00 68 FC | 	wrlong	#0, result1
11464     27 12 06 F6 | 	mov	arg01, #39
11468     CC 3B B0 FD | 	call	#_printerror
1146c     B4 00 90 FD | 	jmp	#LR__1431
11470                 | LR__1430
11470     50 7D BF FD | 	call	#_pop
11474     FD 16 02 F6 | 	mov	arg03, result1
11478     FE 14 02 F6 | 	mov	arg02, result2
1147c     FF 12 02 F6 | 	mov	arg01, result3
11480     0C 4E 05 F1 | 	add	fp, #12
11484     A7 16 62 FC | 	wrlong	arg03, fp
11488     04 4E 05 F1 | 	add	fp, #4
1148c     A7 14 62 FC | 	wrlong	arg02, fp
11490     04 4E 05 F1 | 	add	fp, #4
11494     A7 12 62 FC | 	wrlong	arg01, fp
11498     14 4E 85 F1 | 	sub	fp, #20
1149c     24 7D BF FD | 	call	#_pop
114a0     FF 16 02 F6 | 	mov	arg03, result3
114a4     A7 FA 61 FC | 	wrlong	result1, fp
114a8     04 4E 05 F1 | 	add	fp, #4
114ac     A7 FC 61 FC | 	wrlong	result2, fp
114b0     04 4E 05 F1 | 	add	fp, #4
114b4     A7 16 62 FC | 	wrlong	arg03, fp
114b8     08 4E 85 F1 | 	sub	fp, #8
114bc     A7 12 02 F6 | 	mov	arg01, fp
114c0     90 F1 BF FD | 	call	#_converttoint
114c4     1C 4E 05 F1 | 	add	fp, #28
114c8     A7 FA 61 FC | 	wrlong	result1, fp
114cc     10 4E 85 F1 | 	sub	fp, #16
114d0     A7 12 02 F6 | 	mov	arg01, fp
114d4     0C 4E 85 F1 | 	sub	fp, #12
114d8     78 F1 BF FD | 	call	#_converttoint
114dc     FD 16 02 F6 | 	mov	arg03, result1
114e0     20 4E 05 F1 | 	add	fp, #32
114e4     A7 16 62 FC | 	wrlong	arg03, fp
114e8     F2 12 02 FB | 	rdlong	arg01, objptr
114ec     04 4E 85 F1 | 	sub	fp, #4
114f0     A7 FE 01 FB | 	rdlong	result3, fp
114f4     FF 12 02 F1 | 	add	arg01, result3
114f8     1C 4E 85 F1 | 	sub	fp, #28
114fc     0A 16 66 F0 | 	shl	arg03, #10
11500     0B 13 02 F1 | 	add	arg01, arg03
11504     94 3C B0 FD | 	call	#_pspeek
11508     FD FA E1 F8 | 	getbyte	result1, result1, #0
1150c     A7 FA 61 FC | 	wrlong	result1, fp
11510     08 4E 05 F1 | 	add	fp, #8
11514     A7 3A 68 FC | 	wrlong	#29, fp
11518     08 4E 85 F1 | 	sub	fp, #8
1151c     A7 12 02 F6 | 	mov	arg01, fp
11520     38 7D BF FD | 	call	#_push
11524                 | LR__1431
11524     A7 F0 03 F6 | 	mov	ptra, fp
11528     B2 00 A0 FD | 	call	#popregs_
1152c                 | _do_getpixel_ret
1152c     2D 00 64 FD | 	ret
11530                 | 
11530                 | ' 
11530                 | ' 
11530                 | ' 
11530                 | ' sub do_defsprite
11530                 | _do_defsprite
11530     07 4A 05 F6 | 	mov	COUNT_, #7
11534     A8 00 A0 FD | 	call	#pushregs_
11538     5C F0 07 F1 | 	add	ptra, #92
1153c     84 7C BF FD | 	call	#_pop
11540     FD 16 02 F6 | 	mov	arg03, result1
11544     FE 14 02 F6 | 	mov	arg02, result2
11548     FF 12 02 F6 | 	mov	arg01, result3
1154c     30 4E 05 F1 | 	add	fp, #48
11550     A7 16 62 FC | 	wrlong	arg03, fp
11554     04 4E 05 F1 | 	add	fp, #4
11558     A7 14 62 FC | 	wrlong	arg02, fp
1155c     04 4E 05 F1 | 	add	fp, #4
11560     A7 12 62 FC | 	wrlong	arg01, fp
11564     38 4E 85 F1 | 	sub	fp, #56
11568     58 7C BF FD | 	call	#_pop
1156c     FD 16 02 F6 | 	mov	arg03, result1
11570     FE 14 02 F6 | 	mov	arg02, result2
11574     FF 12 02 F6 | 	mov	arg01, result3
11578     24 4E 05 F1 | 	add	fp, #36
1157c     A7 16 62 FC | 	wrlong	arg03, fp
11580     04 4E 05 F1 | 	add	fp, #4
11584     A7 14 62 FC | 	wrlong	arg02, fp
11588     04 4E 05 F1 | 	add	fp, #4
1158c     A7 12 62 FC | 	wrlong	arg01, fp
11590     2C 4E 85 F1 | 	sub	fp, #44
11594     2C 7C BF FD | 	call	#_pop
11598     FD 16 02 F6 | 	mov	arg03, result1
1159c     FE 14 02 F6 | 	mov	arg02, result2
115a0     FF 12 02 F6 | 	mov	arg01, result3
115a4     18 4E 05 F1 | 	add	fp, #24
115a8     A7 16 62 FC | 	wrlong	arg03, fp
115ac     04 4E 05 F1 | 	add	fp, #4
115b0     A7 14 62 FC | 	wrlong	arg02, fp
115b4     04 4E 05 F1 | 	add	fp, #4
115b8     A7 12 62 FC | 	wrlong	arg01, fp
115bc     20 4E 85 F1 | 	sub	fp, #32
115c0     00 7C BF FD | 	call	#_pop
115c4     FD 16 02 F6 | 	mov	arg03, result1
115c8     FE 14 02 F6 | 	mov	arg02, result2
115cc     FF 12 02 F6 | 	mov	arg01, result3
115d0     0C 4E 05 F1 | 	add	fp, #12
115d4     A7 16 62 FC | 	wrlong	arg03, fp
115d8     04 4E 05 F1 | 	add	fp, #4
115dc     A7 14 62 FC | 	wrlong	arg02, fp
115e0     04 4E 05 F1 | 	add	fp, #4
115e4     A7 12 62 FC | 	wrlong	arg01, fp
115e8     14 4E 85 F1 | 	sub	fp, #20
115ec     D4 7B BF FD | 	call	#_pop
115f0     FF 16 02 F6 | 	mov	arg03, result3
115f4     A7 FA 61 FC | 	wrlong	result1, fp
115f8     04 4E 05 F1 | 	add	fp, #4
115fc     A7 FC 61 FC | 	wrlong	result2, fp
11600     04 4E 05 F1 | 	add	fp, #4
11604     A7 16 62 FC | 	wrlong	arg03, fp
11608     08 4E 85 F1 | 	sub	fp, #8
1160c     A7 12 02 F6 | 	mov	arg01, fp
11610     40 F0 BF FD | 	call	#_converttoint
11614     3C 4E 05 F1 | 	add	fp, #60
11618     A7 FA 61 FC | 	wrlong	result1, fp
1161c     30 4E 85 F1 | 	sub	fp, #48
11620     A7 12 02 F6 | 	mov	arg01, fp
11624     0C 4E 85 F1 | 	sub	fp, #12
11628     28 F0 BF FD | 	call	#_converttoint
1162c     40 4E 05 F1 | 	add	fp, #64
11630     A7 FA 61 FC | 	wrlong	result1, fp
11634     28 4E 85 F1 | 	sub	fp, #40
11638     A7 12 02 F6 | 	mov	arg01, fp
1163c     18 4E 85 F1 | 	sub	fp, #24
11640     10 F0 BF FD | 	call	#_converttoint
11644     44 4E 05 F1 | 	add	fp, #68
11648     A7 FA 61 FC | 	wrlong	result1, fp
1164c     20 4E 85 F1 | 	sub	fp, #32
11650     A7 12 02 F6 | 	mov	arg01, fp
11654     24 4E 85 F1 | 	sub	fp, #36
11658     F8 EF BF FD | 	call	#_converttoint
1165c     48 4E 05 F1 | 	add	fp, #72
11660     A7 FA 61 FC | 	wrlong	result1, fp
11664     18 4E 85 F1 | 	sub	fp, #24
11668     A7 12 02 F6 | 	mov	arg01, fp
1166c     30 4E 85 F1 | 	sub	fp, #48
11670     E0 EF BF FD | 	call	#_converttoint
11674     4C 4E 05 F1 | 	add	fp, #76
11678     A7 FA 61 FC | 	wrlong	result1, fp
1167c                 | ' 
1167c                 | ' t5=pop()
1167c                 | ' t4=pop()
1167c                 | ' t3=pop()
1167c                 | ' t2=pop()
1167c                 | ' t1=pop()
1167c                 | ' 
1167c                 | ' ' do convert, defsprite is not a racing command
1167c                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5)
1167c                 | '  
1167c                 | ' ' todo: check parameters for linits
1167c                 | ' if sprite(a1)<> nil then delete(sprite(a1))
1167c     10 4E 85 F1 | 	sub	fp, #16
11680     A7 16 02 FB | 	rdlong	arg03, fp
11684     3C 4E 85 F1 | 	sub	fp, #60
11688     02 16 66 F0 | 	shl	arg03, #2
1168c     7A 00 00 FF 
11690     08 E4 05 F1 | 	add	objptr, ##62472
11694     F2 16 02 F1 | 	add	arg03, objptr
11698     0B 17 0A FB | 	rdlong	arg03, arg03 wz
1169c     7A 00 00 FF 
116a0     08 E4 85 F1 | 	sub	objptr, ##62472
116a4     2C 00 90 AD |  if_e	jmp	#LR__1440
116a8     3C 4E 05 F1 | 	add	fp, #60
116ac     A7 16 02 FB | 	rdlong	arg03, fp
116b0     3C 4E 85 F1 | 	sub	fp, #60
116b4     02 16 66 F0 | 	shl	arg03, #2
116b8     7A 00 00 FF 
116bc     08 E4 05 F1 | 	add	objptr, ##62472
116c0     F2 16 02 F1 | 	add	arg03, objptr
116c4     0B 13 02 FB | 	rdlong	arg01, arg03
116c8     7A 00 00 FF 
116cc     08 E4 85 F1 | 	sub	objptr, ##62472
116d0     74 AC B0 FD | 	call	#__system___gc_free
116d4                 | LR__1440
116d4     3C 4E 05 F1 | 	add	fp, #60
116d8     A7 1E 02 FB | 	rdlong	local01, fp
116dc     0C 4E 05 F1 | 	add	fp, #12
116e0     A7 16 02 FB | 	rdlong	arg03, fp
116e4     04 4E 05 F1 | 	add	fp, #4
116e8     A7 14 02 FB | 	rdlong	arg02, fp
116ec     0A 17 02 FD | 	qmul	arg03, arg02
116f0     02 1E 66 F0 | 	shl	local01, #2
116f4     7A 00 00 FF 
116f8     08 E4 05 F1 | 	add	objptr, ##62472
116fc     F2 1E 02 F1 | 	add	local01, objptr
11700     4C 4E 85 F1 | 	sub	fp, #76
11704     7A 00 00 FF 
11708     08 E4 85 F1 | 	sub	objptr, ##62472
1170c     18 12 62 FD | 	getqx	arg01
11710     F8 AA B0 FD | 	call	#__system___gc_alloc_managed
11714     0F FB 61 FC | 	wrlong	result1, local01
11718                 | ' for y=a3 to a3+a5-1
11718     44 4E 05 F1 | 	add	fp, #68
1171c     A7 20 02 FB | 	rdlong	local02, fp
11720     0C 4E 05 F1 | 	add	fp, #12
11724     A7 20 62 FC | 	wrlong	local02, fp
11728     0C 4E 85 F1 | 	sub	fp, #12
1172c     A7 22 02 FB | 	rdlong	local03, fp
11730     08 4E 05 F1 | 	add	fp, #8
11734     A7 24 02 FB | 	rdlong	local04, fp
11738     4C 4E 85 F1 | 	sub	fp, #76
1173c     12 23 02 F1 | 	add	local03, local04
11740                 | LR__1441
11740     50 4E 05 F1 | 	add	fp, #80
11744     A7 20 02 FB | 	rdlong	local02, fp
11748     50 4E 85 F1 | 	sub	fp, #80
1174c     11 21 52 F2 | 	cmps	local02, local03 wc
11750     10 01 90 3D |  if_ae	jmp	#LR__1444
11754                 | '   for x=a2 to a4+a2-1
11754     40 4E 05 F1 | 	add	fp, #64
11758     A7 1E 02 FB | 	rdlong	local01, fp
1175c     7A 00 00 FF 
11760     70 E4 05 F1 | 	add	objptr, ##62576
11764     F2 1E 62 FC | 	wrlong	local01, objptr
11768     7A 00 00 FF 
1176c     70 E4 85 F1 | 	sub	objptr, ##62576
11770     08 4E 05 F1 | 	add	fp, #8
11774     A7 26 02 FB | 	rdlong	local05, fp
11778     08 4E 85 F1 | 	sub	fp, #8
1177c     A7 28 02 FB | 	rdlong	local06, fp
11780     40 4E 85 F1 | 	sub	fp, #64
11784     14 27 02 F1 | 	add	local05, local06
11788                 | LR__1442
11788     7A 00 00 FF 
1178c     70 E4 05 F1 | 	add	objptr, ##62576
11790     F2 1E 02 FB | 	rdlong	local01, objptr
11794     7A 00 00 FF 
11798     70 E4 85 F1 | 	sub	objptr, ##62576
1179c     13 1F 52 F2 | 	cmps	local01, local05 wc
117a0     A8 00 90 3D |  if_ae	jmp	#LR__1443
117a4     3C 4E 05 F1 | 	add	fp, #60
117a8     A7 28 02 FB | 	rdlong	local06, fp
117ac     04 4E 05 F1 | 	add	fp, #4
117b0     A7 24 02 FB | 	rdlong	local04, fp
117b4     10 4E 05 F1 | 	add	fp, #16
117b8     A7 20 02 FB | 	rdlong	local02, fp
117bc     10 1F 02 F6 | 	mov	local01, local02
117c0     0C 4E 85 F1 | 	sub	fp, #12
117c4     A7 16 02 FB | 	rdlong	arg03, fp
117c8     0B 1F 82 F1 | 	sub	local01, arg03
117cc     04 4E 05 F1 | 	add	fp, #4
117d0     A7 16 02 FB | 	rdlong	arg03, fp
117d4     0B 1F 02 FD | 	qmul	local01, arg03
117d8     02 28 66 F0 | 	shl	local06, #2
117dc     7A 00 00 FF 
117e0     08 E4 05 F1 | 	add	objptr, ##62472
117e4     F2 28 02 F1 | 	add	local06, objptr
117e8     14 29 02 FB | 	rdlong	local06, local06
117ec     68 E4 05 F1 | 	add	objptr, #104
117f0     F2 1E 02 FB | 	rdlong	local01, objptr
117f4     7A 00 00 FF 
117f8     70 E4 85 F1 | 	sub	objptr, ##62576
117fc     0F 2B 02 F6 | 	mov	local07, local01
11800     12 2B 82 F1 | 	sub	local07, local04
11804     F2 12 02 FB | 	rdlong	arg01, objptr
11808     0F 13 02 F1 | 	add	arg01, local01
1180c     48 4E 85 F1 | 	sub	fp, #72
11810     0A 20 66 F0 | 	shl	local02, #10
11814     10 13 02 F1 | 	add	arg01, local02
11818     18 24 62 FD | 	getqx	local04
1181c     12 2B 02 F1 | 	add	local07, local04
11820     14 2B 02 F1 | 	add	local07, local06
11824     74 39 B0 FD | 	call	#_pspeek
11828     15 FB 41 FC | 	wrbyte	result1, local07
1182c     7A 00 00 FF 
11830     70 E4 05 F1 | 	add	objptr, ##62576
11834     F2 2A 02 FB | 	rdlong	local07, objptr
11838     01 2A 06 F1 | 	add	local07, #1
1183c     F2 2A 62 FC | 	wrlong	local07, objptr
11840     7A 00 00 FF 
11844     70 E4 85 F1 | 	sub	objptr, ##62576
11848     3C FF 9F FD | 	jmp	#LR__1442
1184c                 | LR__1443
1184c     50 4E 05 F1 | 	add	fp, #80
11850     A7 2A 02 FB | 	rdlong	local07, fp
11854     01 2A 06 F1 | 	add	local07, #1
11858     A7 2A 62 FC | 	wrlong	local07, fp
1185c     50 4E 85 F1 | 	sub	fp, #80
11860     DC FE 9F FD | 	jmp	#LR__1441
11864                 | LR__1444
11864     3C 4E 05 F1 | 	add	fp, #60
11868     A7 2A 02 FB | 	rdlong	local07, fp
1186c     15 13 02 F6 | 	mov	arg01, local07
11870     3C 4E 85 F1 | 	sub	fp, #60
11874     02 2A 66 F0 | 	shl	local07, #2
11878     7A 00 00 FF 
1187c     08 E4 05 F1 | 	add	objptr, ##62472
11880     F2 2A 02 F1 | 	add	local07, objptr
11884     15 15 02 FB | 	rdlong	arg02, local07
11888     7A 00 00 FF 
1188c     08 E4 85 F1 | 	sub	objptr, ##62472
11890     B8 4C B0 FD | 	call	#_hg010b_spin2_setspriteptr
11894     3C 4E 05 F1 | 	add	fp, #60
11898     A7 12 02 FB | 	rdlong	arg01, fp
1189c     0C 4E 05 F1 | 	add	fp, #12
118a0     A7 14 02 FB | 	rdlong	arg02, fp
118a4     04 4E 05 F1 | 	add	fp, #4
118a8     A7 16 02 FB | 	rdlong	arg03, fp
118ac     4C 4E 85 F1 | 	sub	fp, #76
118b0     0C 4D B0 FD | 	call	#_hg010b_spin2_setspritesize
118b4     A7 F0 03 F6 | 	mov	ptra, fp
118b8     B2 00 A0 FD | 	call	#popregs_
118bc                 | _do_defsprite_ret
118bc     2D 00 64 FD | 	ret
118c0                 | 
118c0                 | ' 
118c0                 | ' sub do_sprite
118c0                 | _do_sprite
118c0     00 4A 05 F6 | 	mov	COUNT_, #0
118c4     A8 00 A0 FD | 	call	#pushregs_
118c8     30 F0 07 F1 | 	add	ptra, #48
118cc     F4 78 BF FD | 	call	#_pop
118d0     FD 16 02 F6 | 	mov	arg03, result1
118d4     FE 14 02 F6 | 	mov	arg02, result2
118d8     FF 12 02 F6 | 	mov	arg01, result3
118dc     18 4E 05 F1 | 	add	fp, #24
118e0     A7 16 62 FC | 	wrlong	arg03, fp
118e4     04 4E 05 F1 | 	add	fp, #4
118e8     A7 14 62 FC | 	wrlong	arg02, fp
118ec     04 4E 05 F1 | 	add	fp, #4
118f0     A7 12 62 FC | 	wrlong	arg01, fp
118f4     20 4E 85 F1 | 	sub	fp, #32
118f8     C8 78 BF FD | 	call	#_pop
118fc     FD 16 02 F6 | 	mov	arg03, result1
11900     FE 14 02 F6 | 	mov	arg02, result2
11904     FF 12 02 F6 | 	mov	arg01, result3
11908     0C 4E 05 F1 | 	add	fp, #12
1190c     A7 16 62 FC | 	wrlong	arg03, fp
11910     04 4E 05 F1 | 	add	fp, #4
11914     A7 14 62 FC | 	wrlong	arg02, fp
11918     04 4E 05 F1 | 	add	fp, #4
1191c     A7 12 62 FC | 	wrlong	arg01, fp
11920     14 4E 85 F1 | 	sub	fp, #20
11924     9C 78 BF FD | 	call	#_pop
11928     FF 16 02 F6 | 	mov	arg03, result3
1192c     A7 FA 61 FC | 	wrlong	result1, fp
11930     04 4E 05 F1 | 	add	fp, #4
11934     A7 FC 61 FC | 	wrlong	result2, fp
11938     04 4E 05 F1 | 	add	fp, #4
1193c     A7 16 62 FC | 	wrlong	arg03, fp
11940     08 4E 85 F1 | 	sub	fp, #8
11944     A7 12 02 F6 | 	mov	arg01, fp
11948     08 ED BF FD | 	call	#_converttoint
1194c     24 4E 05 F1 | 	add	fp, #36
11950     A7 FA 61 FC | 	wrlong	result1, fp
11954     18 4E 85 F1 | 	sub	fp, #24
11958     A7 12 02 F6 | 	mov	arg01, fp
1195c     0C 4E 85 F1 | 	sub	fp, #12
11960     F0 EC BF FD | 	call	#_converttoint
11964     28 4E 05 F1 | 	add	fp, #40
11968     A7 FA 61 FC | 	wrlong	result1, fp
1196c     10 4E 85 F1 | 	sub	fp, #16
11970     A7 12 02 F6 | 	mov	arg01, fp
11974     18 4E 85 F1 | 	sub	fp, #24
11978     D8 EC BF FD | 	call	#_converttoint
1197c     2C 4E 05 F1 | 	add	fp, #44
11980     A7 FA 61 FC | 	wrlong	result1, fp
11984     08 4E 85 F1 | 	sub	fp, #8
11988     A7 12 02 FB | 	rdlong	arg01, fp
1198c     04 4E 05 F1 | 	add	fp, #4
11990     A7 14 02 FB | 	rdlong	arg02, fp
11994     FD 16 02 F6 | 	mov	arg03, result1
11998     28 4E 85 F1 | 	sub	fp, #40
1199c     D4 4B B0 FD | 	call	#_hg010b_spin2_setspritepos
119a0     A7 F0 03 F6 | 	mov	ptra, fp
119a4     B2 00 A0 FD | 	call	#popregs_
119a8                 | _do_sprite_ret
119a8     2D 00 64 FD | 	ret
119ac                 | 
119ac                 | ' 
119ac                 | ' sub do_mousex
119ac                 | _do_mousex
119ac     00 4A 05 F6 | 	mov	COUNT_, #0
119b0     A8 00 A0 FD | 	call	#pushregs_
119b4     0C F0 07 F1 | 	add	ptra, #12
119b8     08 4E 05 F1 | 	add	fp, #8
119bc     A7 3A 68 FC | 	wrlong	#29, fp
119c0     08 4E 85 F1 | 	sub	fp, #8
119c4     79 00 00 FF 
119c8     C0 E5 05 F1 | 	add	objptr, ##62400
119cc     F2 12 02 FB | 	rdlong	arg01, objptr
119d0     79 00 00 FF 
119d4     C0 E5 85 F1 | 	sub	objptr, ##62400
119d8     A7 12 62 FC | 	wrlong	arg01, fp
119dc     A7 12 02 F6 | 	mov	arg01, fp
119e0     78 78 BF FD | 	call	#_push
119e4     A7 F0 03 F6 | 	mov	ptra, fp
119e8     B2 00 A0 FD | 	call	#popregs_
119ec                 | _do_mousex_ret
119ec     2D 00 64 FD | 	ret
119f0                 | 
119f0                 | ' 
119f0                 | ' sub do_mousey
119f0                 | _do_mousey
119f0     00 4A 05 F6 | 	mov	COUNT_, #0
119f4     A8 00 A0 FD | 	call	#pushregs_
119f8     0C F0 07 F1 | 	add	ptra, #12
119fc     08 4E 05 F1 | 	add	fp, #8
11a00     A7 3A 68 FC | 	wrlong	#29, fp
11a04     08 4E 85 F1 | 	sub	fp, #8
11a08     79 00 00 FF 
11a0c     C4 E5 05 F1 | 	add	objptr, ##62404
11a10     F2 12 02 FB | 	rdlong	arg01, objptr
11a14     79 00 00 FF 
11a18     C4 E5 85 F1 | 	sub	objptr, ##62404
11a1c     A7 12 62 FC | 	wrlong	arg01, fp
11a20     A7 12 02 F6 | 	mov	arg01, fp
11a24     34 78 BF FD | 	call	#_push
11a28     A7 F0 03 F6 | 	mov	ptra, fp
11a2c     B2 00 A0 FD | 	call	#popregs_
11a30                 | _do_mousey_ret
11a30     2D 00 64 FD | 	ret
11a34                 | 
11a34                 | ' 
11a34                 | ' sub do_mousew
11a34                 | _do_mousew
11a34     00 4A 05 F6 | 	mov	COUNT_, #0
11a38     A8 00 A0 FD | 	call	#pushregs_
11a3c     0C F0 07 F1 | 	add	ptra, #12
11a40     08 4E 05 F1 | 	add	fp, #8
11a44     A7 38 68 FC | 	wrlong	#28, fp
11a48     08 4E 85 F1 | 	sub	fp, #8
11a4c     79 00 00 FF 
11a50     CC E5 05 F1 | 	add	objptr, ##62412
11a54     F2 12 02 FB | 	rdlong	arg01, objptr
11a58     79 00 00 FF 
11a5c     CC E5 85 F1 | 	sub	objptr, ##62412
11a60     A7 12 62 FC | 	wrlong	arg01, fp
11a64     A7 12 02 F6 | 	mov	arg01, fp
11a68     F0 77 BF FD | 	call	#_push
11a6c     A7 F0 03 F6 | 	mov	ptra, fp
11a70     B2 00 A0 FD | 	call	#popregs_
11a74                 | _do_mousew_ret
11a74     2D 00 64 FD | 	ret
11a78                 | 
11a78                 | ' 
11a78                 | ' sub do_mousek
11a78                 | _do_mousek
11a78     00 4A 05 F6 | 	mov	COUNT_, #0
11a7c     A8 00 A0 FD | 	call	#pushregs_
11a80     0C F0 07 F1 | 	add	ptra, #12
11a84     08 4E 05 F1 | 	add	fp, #8
11a88     A7 3A 68 FC | 	wrlong	#29, fp
11a8c     08 4E 85 F1 | 	sub	fp, #8
11a90     79 00 00 FF 
11a94     C8 E5 05 F1 | 	add	objptr, ##62408
11a98     F2 12 02 FB | 	rdlong	arg01, objptr
11a9c     79 00 00 FF 
11aa0     C8 E5 85 F1 | 	sub	objptr, ##62408
11aa4     A7 12 62 FC | 	wrlong	arg01, fp
11aa8     A7 12 02 F6 | 	mov	arg01, fp
11aac     AC 77 BF FD | 	call	#_push
11ab0     A7 F0 03 F6 | 	mov	ptra, fp
11ab4     B2 00 A0 FD | 	call	#popregs_
11ab8                 | _do_mousek_ret
11ab8     2D 00 64 FD | 	ret
11abc                 | 
11abc                 | ' 
11abc                 | ' 
11abc                 | ' sub do_rdpin
11abc                 | _do_rdpin
11abc     00 4A 05 F6 | 	mov	COUNT_, #0
11ac0     A8 00 A0 FD | 	call	#pushregs_
11ac4     0C F0 07 F1 | 	add	ptra, #12
11ac8     F8 76 BF FD | 	call	#_pop
11acc     A7 FA 61 FC | 	wrlong	result1, fp
11ad0     04 4E 05 F1 | 	add	fp, #4
11ad4     A7 FC 61 FC | 	wrlong	result2, fp
11ad8     04 4E 05 F1 | 	add	fp, #4
11adc     A7 FE 61 FC | 	wrlong	result3, fp
11ae0     08 4E 85 F1 | 	sub	fp, #8
11ae4     A7 12 02 F6 | 	mov	arg01, fp
11ae8     68 EB BF FD | 	call	#_converttoint
11aec     FD FA 89 FA | 	rdpin	result1, result1
11af0     7A 00 00 FF 
11af4     C4 E4 05 F1 | 	add	objptr, ##62660
11af8     F2 FA 61 FC | 	wrlong	result1, objptr
11afc     7A 00 00 FF 
11b00     C4 E4 85 F1 | 	sub	objptr, ##62660
11b04     08 4E 05 F1 | 	add	fp, #8
11b08     A7 3A 68 FC | 	wrlong	#29, fp
11b0c     08 4E 85 F1 | 	sub	fp, #8
11b10     A7 08 68 FC | 	wrlong	#4, fp
11b14     A7 12 02 F6 | 	mov	arg01, fp
11b18     40 77 BF FD | 	call	#_push
11b1c     A7 F0 03 F6 | 	mov	ptra, fp
11b20     B2 00 A0 FD | 	call	#popregs_
11b24                 | _do_rdpin_ret
11b24     2D 00 64 FD | 	ret
11b28                 | 
11b28                 | ' 
11b28                 | ' sub do_rqpin
11b28                 | _do_rqpin
11b28     00 4A 05 F6 | 	mov	COUNT_, #0
11b2c     A8 00 A0 FD | 	call	#pushregs_
11b30     0C F0 07 F1 | 	add	ptra, #12
11b34     8C 76 BF FD | 	call	#_pop
11b38     A7 FA 61 FC | 	wrlong	result1, fp
11b3c     04 4E 05 F1 | 	add	fp, #4
11b40     A7 FC 61 FC | 	wrlong	result2, fp
11b44     04 4E 05 F1 | 	add	fp, #4
11b48     A7 FE 61 FC | 	wrlong	result3, fp
11b4c     08 4E 85 F1 | 	sub	fp, #8
11b50     A7 12 02 F6 | 	mov	arg01, fp
11b54     FC EA BF FD | 	call	#_converttoint
11b58     FD 12 02 F6 | 	mov	arg01, result1
11b5c     00 FA 05 F6 | 	mov	result1, #0
11b60     09 FB 81 FA | 	rqpin	result1, arg01
11b64     7A 00 00 FF 
11b68     C4 E4 05 F1 | 	add	objptr, ##62660
11b6c     F2 FA 61 FC | 	wrlong	result1, objptr
11b70     7A 00 00 FF 
11b74     C4 E4 85 F1 | 	sub	objptr, ##62660
11b78     08 4E 05 F1 | 	add	fp, #8
11b7c     A7 3A 68 FC | 	wrlong	#29, fp
11b80     08 4E 85 F1 | 	sub	fp, #8
11b84     A7 08 68 FC | 	wrlong	#4, fp
11b88     A7 12 02 F6 | 	mov	arg01, fp
11b8c     CC 76 BF FD | 	call	#_push
11b90     A7 F0 03 F6 | 	mov	ptra, fp
11b94     B2 00 A0 FD | 	call	#popregs_
11b98                 | _do_rqpin_ret
11b98     2D 00 64 FD | 	ret
11b9c                 | 
11b9c                 | ' 
11b9c                 | ' sub do_pinread
11b9c                 | _do_pinread
11b9c     00 4A 05 F6 | 	mov	COUNT_, #0
11ba0     A8 00 A0 FD | 	call	#pushregs_
11ba4     0C F0 07 F1 | 	add	ptra, #12
11ba8     18 76 BF FD | 	call	#_pop
11bac     A7 FA 61 FC | 	wrlong	result1, fp
11bb0     04 4E 05 F1 | 	add	fp, #4
11bb4     A7 FC 61 FC | 	wrlong	result2, fp
11bb8     04 4E 05 F1 | 	add	fp, #4
11bbc     A7 FE 61 FC | 	wrlong	result3, fp
11bc0     08 4E 85 F1 | 	sub	fp, #8
11bc4     A7 12 02 F6 | 	mov	arg01, fp
11bc8     88 EA BF FD | 	call	#_converttoint
11bcc     FD 12 02 F6 | 	mov	arg01, result1
11bd0     20 12 CE F7 | 	test	arg01, #32 wz
11bd4     FF FB 01 56 |  if_ne	mov	result1, inb
11bd8     FE FB 01 A6 |  if_e	mov	result1, ina
11bdc     09 FB 41 F0 | 	shr	result1, arg01
11be0     06 12 46 F0 | 	shr	arg01, #6
11be4     09 FB 41 F7 | 	zerox	result1, arg01
11be8     7A 00 00 FF 
11bec     C4 E4 05 F1 | 	add	objptr, ##62660
11bf0     F2 FA 61 FC | 	wrlong	result1, objptr
11bf4     7A 00 00 FF 
11bf8     C4 E4 85 F1 | 	sub	objptr, ##62660
11bfc     08 4E 05 F1 | 	add	fp, #8
11c00     A7 3A 68 FC | 	wrlong	#29, fp
11c04     08 4E 85 F1 | 	sub	fp, #8
11c08     A7 08 68 FC | 	wrlong	#4, fp
11c0c     A7 12 02 F6 | 	mov	arg01, fp
11c10     48 76 BF FD | 	call	#_push
11c14     A7 F0 03 F6 | 	mov	ptra, fp
11c18     B2 00 A0 FD | 	call	#popregs_
11c1c                 | _do_pinread_ret
11c1c     2D 00 64 FD | 	ret
11c20                 | 
11c20                 | ' 
11c20                 | ' sub do_gettime
11c20                 | _do_gettime
11c20     02 4A 05 F6 | 	mov	COUNT_, #2
11c24     A8 00 A0 FD | 	call	#pushregs_
11c28     14 F0 07 F1 | 	add	ptra, #20
11c2c                 | ' 
11c2c                 | ' const asm 
11c2c     1A 1E 72 FD | 	getct	local01 wc
11c30     1A 20 62 FD | 	getct	local02
11c34                 | ' 
11c34                 | ' return hi1, lo1
11c34     10 FD 01 F6 | 	mov	result2, local02
11c38     A7 1E 62 FC | 	wrlong	local01, fp
11c3c     04 4E 05 F1 | 	add	fp, #4
11c40     A7 FC 61 FC | 	wrlong	result2, fp
11c44     0C 4E 05 F1 | 	add	fp, #12
11c48     A7 3A 68 FC | 	wrlong	#29, fp
11c4c     0C 4E 85 F1 | 	sub	fp, #12
11c50     A7 12 02 FB | 	rdlong	arg01, fp
11c54     04 4E 05 F1 | 	add	fp, #4
11c58     A7 12 62 FC | 	wrlong	arg01, fp
11c5c     08 4E 85 F1 | 	sub	fp, #8
11c60     A7 12 02 FB | 	rdlong	arg01, fp
11c64     0C 4E 05 F1 | 	add	fp, #12
11c68     A7 12 62 FC | 	wrlong	arg01, fp
11c6c     04 4E 85 F1 | 	sub	fp, #4
11c70     A7 12 02 F6 | 	mov	arg01, fp
11c74     08 4E 85 F1 | 	sub	fp, #8
11c78     E0 75 BF FD | 	call	#_push
11c7c     A7 F0 03 F6 | 	mov	ptra, fp
11c80     B2 00 A0 FD | 	call	#popregs_
11c84                 | _do_gettime_ret
11c84     2D 00 64 FD | 	ret
11c88                 | 
11c88                 | '    
11c88                 | ' 
11c88                 | ' '' ----------------------------- Graphics related runtime procedures --------------------------------------
11c88                 | ' 
11c88                 | ' '' ----------------------------- Clear the screen
11c88                 | ' 
11c88                 | ' sub do_cls
11c88                 | _do_cls
11c88     56 00 00 FF 
11c8c     10 E4 05 F1 | 	add	objptr, ##44048
11c90     F2 12 02 FB | 	rdlong	arg01, objptr
11c94     04 E4 85 F1 | 	sub	objptr, #4
11c98     F2 14 02 FB | 	rdlong	arg02, objptr
11c9c     56 00 00 FF 
11ca0     0C E4 85 F1 | 	sub	objptr, ##44044
11ca4     D0 55 B0 FD | 	call	#_hg010b_spin2_cls
11ca8     56 00 00 FF 
11cac     10 E4 05 F1 | 	add	objptr, ##44048
11cb0     F2 14 02 FB | 	rdlong	arg02, objptr
11cb4     14 E4 85 F1 | 	sub	objptr, #20
11cb8     F2 14 62 FC | 	wrlong	arg02, objptr
11cbc     55 00 00 FF 
11cc0     FC E5 85 F1 | 	sub	objptr, ##44028
11cc4                 | ' cls(ink,paper): plot_color=ink: print
11cc4     00 12 06 F6 | 	mov	arg01, #0
11cc8     8C C0 B0 FD | 	call	#__system___getiolock_0416
11ccc     FD 12 02 F6 | 	mov	arg01, result1
11cd0     88 68 B0 FD | 	call	#__system___lockmem
11cd4     00 12 06 F6 | 	mov	arg01, #0
11cd8     0A 14 06 F6 | 	mov	arg02, #10
11cdc     00 16 06 F6 | 	mov	arg03, #0
11ce0     10 75 B0 FD | 	call	#__system___basic_print_char
11ce4     00 12 06 F6 | 	mov	arg01, #0
11ce8     6C C0 B0 FD | 	call	#__system___getiolock_0416
11cec     FD 00 68 FC | 	wrlong	#0, result1
11cf0                 | _do_cls_ret
11cf0     2D 00 64 FD | 	ret
11cf4                 | 
11cf4                 | ' 
11cf4                 | ' '' ----------------------------- Set a color # from the palette to plot/draw
11cf4                 | ' 
11cf4                 | ' sub do_color
11cf4                 | _do_color
11cf4     03 4A 05 F6 | 	mov	COUNT_, #3
11cf8     A8 00 A0 FD | 	call	#pushregs_
11cfc     C4 74 BF FD | 	call	#_pop
11d00     FD 1E 02 F6 | 	mov	local01, result1
11d04     FE 20 02 F6 | 	mov	local02, result2
11d08     FF 22 02 F6 | 	mov	local03, result3
11d0c     55 00 00 FF 
11d10     FC E5 05 F1 | 	add	objptr, ##44028
11d14     F2 1E 62 FC | 	wrlong	local01, objptr
11d18     55 00 00 FF 
11d1c     FC E5 85 F1 | 	sub	objptr, ##44028
11d20     A7 F0 03 F6 | 	mov	ptra, fp
11d24     B2 00 A0 FD | 	call	#popregs_
11d28                 | _do_color_ret
11d28     2D 00 64 FD | 	ret
11d2c                 | 
11d2c                 | ' 
11d2c                 | ' ' ----------------------------- Plot a point, set starting point to draw a line
11d2c                 | ' 
11d2c                 | ' sub do_plot
11d2c                 | _do_plot
11d2c     08 4A 05 F6 | 	mov	COUNT_, #8
11d30     A8 00 A0 FD | 	call	#pushregs_
11d34     8C 74 BF FD | 	call	#_pop
11d38     FD 1E 02 F6 | 	mov	local01, result1
11d3c     FE 14 02 F6 | 	mov	arg02, result2
11d40     FF 16 02 F6 | 	mov	arg03, result3
11d44     0A 21 02 F6 | 	mov	local02, arg02
11d48     0B 23 02 F6 | 	mov	local03, arg03
11d4c     74 74 BF FD | 	call	#_pop
11d50     FD 24 02 F6 | 	mov	local04, result1
11d54     FE 26 02 F6 | 	mov	local05, result2
11d58     FF 28 02 F6 | 	mov	local06, result3
11d5c     12 2B 02 F6 | 	mov	local07, local04
11d60     0F 2D 02 F6 | 	mov	local08, local01
11d64                 | ' t2=pop() 					 
11d64                 | ' t1=pop()
11d64                 | ' 
11d64                 | ' x=t1.result.iresult
11d64                 | ' y=t2.result.iresult	
11d64                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) then 					  
11d64     1C 28 0E F2 | 	cmp	local06, #28 wz
11d68     1D 28 0E 52 |  if_ne	cmp	local06, #29 wz
11d6c     44 00 90 5D |  if_ne	jmp	#LR__1450
11d70     1C 22 0E F2 | 	cmp	local03, #28 wz
11d74     1D 22 0E 52 |  if_ne	cmp	local03, #29 wz
11d78     38 00 90 5D |  if_ne	jmp	#LR__1450
11d7c     56 00 00 FF 
11d80     00 E4 05 F1 | 	add	objptr, ##44032
11d84     F2 2A 62 FC | 	wrlong	local07, objptr
11d88     04 E4 05 F1 | 	add	objptr, #4
11d8c     F2 2C 62 FC | 	wrlong	local08, objptr
11d90     04 E4 85 F1 | 	sub	objptr, #4
11d94     F2 12 02 FB | 	rdlong	arg01, objptr
11d98     04 E4 85 F1 | 	sub	objptr, #4
11d9c     F2 16 02 FB | 	rdlong	arg03, objptr
11da0     55 00 00 FF 
11da4     FC E5 85 F1 | 	sub	objptr, ##44028
11da8     16 15 02 F6 | 	mov	arg02, local08
11dac     5C 48 B0 FD | 	call	#_hg010b_spin2_putpixel
11db0     A4 00 90 FD | 	jmp	#LR__1455
11db4                 | LR__1450
11db4                 | '   if t1.result_type=result_float then x=round(t1.result.fresult)
11db4     1E 28 0E F2 | 	cmp	local06, #30 wz
11db8     10 00 90 5D |  if_ne	jmp	#LR__1451
11dbc     12 13 02 F6 | 	mov	arg01, local04
11dc0     01 14 06 F6 | 	mov	arg02, #1
11dc4     40 96 B0 FD | 	call	#__system___float_tointeger
11dc8     FD 2A 02 F6 | 	mov	local07, result1
11dcc                 | LR__1451
11dcc                 | '   if t2.result_type=result_float then y=round(t2.result.fresult)
11dcc     1E 22 0E F2 | 	cmp	local03, #30 wz
11dd0     10 00 90 5D |  if_ne	jmp	#LR__1452
11dd4     0F 13 02 F6 | 	mov	arg01, local01
11dd8     01 14 06 F6 | 	mov	arg02, #1
11ddc     28 96 B0 FD | 	call	#__system___float_tointeger
11de0     FD 2C 02 F6 | 	mov	local08, result1
11de4                 | LR__1452
11de4                 | '   if t1.result_type=result_string then x=val(t1.result.sresult)
11de4     1F 28 0E F2 | 	cmp	local06, #31 wz
11de8     18 00 90 5D |  if_ne	jmp	#LR__1453
11dec     12 13 02 F6 | 	mov	arg01, local04
11df0     34 99 B0 FD | 	call	#__system____builtin_atof
11df4     FD 12 02 F6 | 	mov	arg01, result1
11df8     00 14 06 F6 | 	mov	arg02, #0
11dfc     08 96 B0 FD | 	call	#__system___float_tointeger
11e00     FD 2A 02 F6 | 	mov	local07, result1
11e04                 | LR__1453
11e04                 | '   if t2.result_type=result_string then y=val(t2.result.sresult)
11e04     1F 22 0E F2 | 	cmp	local03, #31 wz
11e08     18 00 90 5D |  if_ne	jmp	#LR__1454
11e0c     0F 13 02 F6 | 	mov	arg01, local01
11e10     14 99 B0 FD | 	call	#__system____builtin_atof
11e14     FD 12 02 F6 | 	mov	arg01, result1
11e18     00 14 06 F6 | 	mov	arg02, #0
11e1c     E8 95 B0 FD | 	call	#__system___float_tointeger
11e20     FD 2C 02 F6 | 	mov	local08, result1
11e24                 | LR__1454
11e24     56 00 00 FF 
11e28     00 E4 05 F1 | 	add	objptr, ##44032
11e2c     F2 2A 62 FC | 	wrlong	local07, objptr
11e30     04 E4 05 F1 | 	add	objptr, #4
11e34     F2 2C 62 FC | 	wrlong	local08, objptr
11e38     04 E4 85 F1 | 	sub	objptr, #4
11e3c     F2 12 02 FB | 	rdlong	arg01, objptr
11e40     04 E4 85 F1 | 	sub	objptr, #4
11e44     F2 16 02 FB | 	rdlong	arg03, objptr
11e48     55 00 00 FF 
11e4c     FC E5 85 F1 | 	sub	objptr, ##44028
11e50     16 15 02 F6 | 	mov	arg02, local08
11e54     B4 47 B0 FD | 	call	#_hg010b_spin2_putpixel
11e58                 | LR__1455
11e58     A7 F0 03 F6 | 	mov	ptra, fp
11e5c     B2 00 A0 FD | 	call	#popregs_
11e60                 | _do_plot_ret
11e60     2D 00 64 FD | 	ret
11e64                 | 
11e64                 | ' 
11e64                 | ' ' --------------------------- Draw a line to point set by plot or previous draw, set a new starting point
11e64                 | ' 
11e64                 | ' sub do_draw
11e64                 | _do_draw
11e64     08 4A 05 F6 | 	mov	COUNT_, #8
11e68     A8 00 A0 FD | 	call	#pushregs_
11e6c     54 73 BF FD | 	call	#_pop
11e70     FD 1E 02 F6 | 	mov	local01, result1
11e74     FE 18 02 F6 | 	mov	arg04, result2
11e78     FF 16 02 F6 | 	mov	arg03, result3
11e7c     0C 21 02 F6 | 	mov	local02, arg04
11e80     0B 23 02 F6 | 	mov	local03, arg03
11e84     3C 73 BF FD | 	call	#_pop
11e88     FD 24 02 F6 | 	mov	local04, result1
11e8c     FE 26 02 F6 | 	mov	local05, result2
11e90     FF 28 02 F6 | 	mov	local06, result3
11e94     12 2B 02 F6 | 	mov	local07, local04
11e98     0F 2D 02 F6 | 	mov	local08, local01
11e9c                 | ' 
11e9c                 | ' t2=pop()
11e9c                 | ' t1=pop()
11e9c                 | ' x=t1.result.iresult
11e9c                 | ' y=t2.result.iresult
11e9c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) then 					  
11e9c     1C 28 0E F2 | 	cmp	local06, #28 wz
11ea0     1D 28 0E 52 |  if_ne	cmp	local06, #29 wz
11ea4     5C 00 90 5D |  if_ne	jmp	#LR__1460
11ea8     1C 22 0E F2 | 	cmp	local03, #28 wz
11eac     1D 22 0E 52 |  if_ne	cmp	local03, #29 wz
11eb0     50 00 90 5D |  if_ne	jmp	#LR__1460
11eb4     56 00 00 FF 
11eb8     00 E4 05 F1 | 	add	objptr, ##44032
11ebc     F2 12 02 FB | 	rdlong	arg01, objptr
11ec0     04 E4 05 F1 | 	add	objptr, #4
11ec4     F2 14 02 FB | 	rdlong	arg02, objptr
11ec8     08 E4 85 F1 | 	sub	objptr, #8
11ecc     F2 1A 02 FB | 	rdlong	arg05, objptr
11ed0     55 00 00 FF 
11ed4     FC E5 85 F1 | 	sub	objptr, ##44028
11ed8     15 17 02 F6 | 	mov	arg03, local07
11edc     16 19 02 F6 | 	mov	arg04, local08
11ee0     D8 49 B0 FD | 	call	#_hg010b_spin2_draw
11ee4     56 00 00 FF 
11ee8     00 E4 05 F1 | 	add	objptr, ##44032
11eec     F2 2A 62 FC | 	wrlong	local07, objptr
11ef0     04 E4 05 F1 | 	add	objptr, #4
11ef4     F2 2C 62 FC | 	wrlong	local08, objptr
11ef8     56 00 00 FF 
11efc     04 E4 85 F1 | 	sub	objptr, ##44036
11f00     BC 00 90 FD | 	jmp	#LR__1465
11f04                 | LR__1460
11f04                 | '   if t1.result_type=result_float then x=round(t1.result.fresult)
11f04     1E 28 0E F2 | 	cmp	local06, #30 wz
11f08     10 00 90 5D |  if_ne	jmp	#LR__1461
11f0c     12 13 02 F6 | 	mov	arg01, local04
11f10     01 14 06 F6 | 	mov	arg02, #1
11f14     F0 94 B0 FD | 	call	#__system___float_tointeger
11f18     FD 2A 02 F6 | 	mov	local07, result1
11f1c                 | LR__1461
11f1c                 | '   if t2.result_type=result_float then y=round(t2.result.fresult)
11f1c     1E 22 0E F2 | 	cmp	local03, #30 wz
11f20     10 00 90 5D |  if_ne	jmp	#LR__1462
11f24     0F 13 02 F6 | 	mov	arg01, local01
11f28     01 14 06 F6 | 	mov	arg02, #1
11f2c     D8 94 B0 FD | 	call	#__system___float_tointeger
11f30     FD 2C 02 F6 | 	mov	local08, result1
11f34                 | LR__1462
11f34                 | '   if t1.result_type=result_string then x=val(t1.result.fresult)
11f34     1F 28 0E F2 | 	cmp	local06, #31 wz
11f38     18 00 90 5D |  if_ne	jmp	#LR__1463
11f3c     12 13 02 F6 | 	mov	arg01, local04
11f40     E4 97 B0 FD | 	call	#__system____builtin_atof
11f44     FD 12 02 F6 | 	mov	arg01, result1
11f48     00 14 06 F6 | 	mov	arg02, #0
11f4c     B8 94 B0 FD | 	call	#__system___float_tointeger
11f50     FD 2A 02 F6 | 	mov	local07, result1
11f54                 | LR__1463
11f54                 | '   if t2.result_type=result_string then y=val(t2.result.fresult)    
11f54     1F 22 0E F2 | 	cmp	local03, #31 wz
11f58     18 00 90 5D |  if_ne	jmp	#LR__1464
11f5c     0F 13 02 F6 | 	mov	arg01, local01
11f60     C4 97 B0 FD | 	call	#__system____builtin_atof
11f64     FD 12 02 F6 | 	mov	arg01, result1
11f68     00 14 06 F6 | 	mov	arg02, #0
11f6c     98 94 B0 FD | 	call	#__system___float_tointeger
11f70     FD 2C 02 F6 | 	mov	local08, result1
11f74                 | LR__1464
11f74     56 00 00 FF 
11f78     00 E4 05 F1 | 	add	objptr, ##44032
11f7c     F2 12 02 FB | 	rdlong	arg01, objptr
11f80     04 E4 05 F1 | 	add	objptr, #4
11f84     F2 14 02 FB | 	rdlong	arg02, objptr
11f88     08 E4 85 F1 | 	sub	objptr, #8
11f8c     F2 1A 02 FB | 	rdlong	arg05, objptr
11f90     55 00 00 FF 
11f94     FC E5 85 F1 | 	sub	objptr, ##44028
11f98     15 17 02 F6 | 	mov	arg03, local07
11f9c     16 19 02 F6 | 	mov	arg04, local08
11fa0     18 49 B0 FD | 	call	#_hg010b_spin2_draw
11fa4     56 00 00 FF 
11fa8     00 E4 05 F1 | 	add	objptr, ##44032
11fac     F2 2A 62 FC | 	wrlong	local07, objptr
11fb0     04 E4 05 F1 | 	add	objptr, #4
11fb4     F2 2C 62 FC | 	wrlong	local08, objptr
11fb8     56 00 00 FF 
11fbc     04 E4 85 F1 | 	sub	objptr, ##44036
11fc0                 | LR__1465
11fc0     A7 F0 03 F6 | 	mov	ptra, fp
11fc4     B2 00 A0 FD | 	call	#popregs_
11fc8                 | _do_draw_ret
11fc8     2D 00 64 FD | 	ret
11fcc                 | 
11fcc                 | ' 
11fcc                 | ' ' -------------------------- Draw a filled circle at x,y and radius r
11fcc                 | ' 
11fcc                 | ' sub do_fcircle
11fcc                 | _do_fcircle
11fcc     02 4A 05 F6 | 	mov	COUNT_, #2
11fd0     A8 00 A0 FD | 	call	#pushregs_
11fd4     24 F0 07 F1 | 	add	ptra, #36
11fd8     E8 71 BF FD | 	call	#_pop
11fdc     FD 18 02 F6 | 	mov	arg04, result1
11fe0     FE 16 02 F6 | 	mov	arg03, result2
11fe4     FF 14 02 F6 | 	mov	arg02, result3
11fe8     18 4E 05 F1 | 	add	fp, #24
11fec     A7 18 62 FC | 	wrlong	arg04, fp
11ff0     04 4E 05 F1 | 	add	fp, #4
11ff4     A7 16 62 FC | 	wrlong	arg03, fp
11ff8     04 4E 05 F1 | 	add	fp, #4
11ffc     A7 14 62 FC | 	wrlong	arg02, fp
12000     20 4E 85 F1 | 	sub	fp, #32
12004     BC 71 BF FD | 	call	#_pop
12008     FD 18 02 F6 | 	mov	arg04, result1
1200c     FE 16 02 F6 | 	mov	arg03, result2
12010     FF 1E 02 F6 | 	mov	local01, result3
12014     0C 4E 05 F1 | 	add	fp, #12
12018     A7 18 62 FC | 	wrlong	arg04, fp
1201c     04 4E 05 F1 | 	add	fp, #4
12020     A7 16 62 FC | 	wrlong	arg03, fp
12024     04 4E 05 F1 | 	add	fp, #4
12028     A7 1E 62 FC | 	wrlong	local01, fp
1202c     14 4E 85 F1 | 	sub	fp, #20
12030     90 71 BF FD | 	call	#_pop
12034     A7 FA 61 FC | 	wrlong	result1, fp
12038     04 4E 05 F1 | 	add	fp, #4
1203c     A7 FC 61 FC | 	wrlong	result2, fp
12040     04 4E 05 F1 | 	add	fp, #4
12044     A7 FE 61 FC | 	wrlong	result3, fp
12048                 | ' 
12048                 | ' t3=pop()
12048                 | ' t2=pop()
12048                 | ' t1=pop()
12048                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
12048     FF 18 02 F6 | 	mov	arg04, result3
1204c     08 4E 85 F1 | 	sub	fp, #8
12050     1C 18 0E F2 | 	cmp	arg04, #28 wz
12054     08 4E 05 51 |  if_ne	add	fp, #8
12058     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1205c     08 4E 85 51 |  if_ne	sub	fp, #8
12060     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
12064     7C 00 90 5D |  if_ne	jmp	#LR__1470
12068     14 4E 05 F1 | 	add	fp, #20
1206c     A7 1E 02 FB | 	rdlong	local01, fp
12070     14 4E 85 F1 | 	sub	fp, #20
12074     1C 1E 0E F2 | 	cmp	local01, #28 wz
12078     14 4E 05 51 |  if_ne	add	fp, #20
1207c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
12080     14 4E 85 51 |  if_ne	sub	fp, #20
12084     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
12088     58 00 90 5D |  if_ne	jmp	#LR__1470
1208c     20 4E 05 F1 | 	add	fp, #32
12090     A7 1E 02 FB | 	rdlong	local01, fp
12094     20 4E 85 F1 | 	sub	fp, #32
12098     1C 1E 0E F2 | 	cmp	local01, #28 wz
1209c     20 4E 05 51 |  if_ne	add	fp, #32
120a0     A7 18 02 5B |  if_ne	rdlong	arg04, fp
120a4     20 4E 85 51 |  if_ne	sub	fp, #32
120a8     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
120ac     34 00 90 5D |  if_ne	jmp	#LR__1470
120b0     A7 12 02 FB | 	rdlong	arg01, fp
120b4     0C 4E 05 F1 | 	add	fp, #12
120b8     A7 14 02 FB | 	rdlong	arg02, fp
120bc     0C 4E 05 F1 | 	add	fp, #12
120c0     A7 16 02 FB | 	rdlong	arg03, fp
120c4     18 4E 85 F1 | 	sub	fp, #24
120c8     55 00 00 FF 
120cc     FC E5 05 F1 | 	add	objptr, ##44028
120d0     F2 18 02 FB | 	rdlong	arg04, objptr
120d4     55 00 00 FF 
120d8     FC E5 85 F1 | 	sub	objptr, ##44028
120dc     60 4C B0 FD | 	call	#_hg010b_spin2_fcircle
120e0                 | '    v.fcircle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
120e0     54 00 90 FD | 	jmp	#LR__1471
120e4                 | LR__1470
120e4     A7 12 02 F6 | 	mov	arg01, fp
120e8     68 E5 BF FD | 	call	#_converttoint
120ec     FD 1E 02 F6 | 	mov	local01, result1
120f0     0C 4E 05 F1 | 	add	fp, #12
120f4     A7 12 02 F6 | 	mov	arg01, fp
120f8     0C 4E 85 F1 | 	sub	fp, #12
120fc     54 E5 BF FD | 	call	#_converttoint
12100     FD 20 02 F6 | 	mov	local02, result1
12104     18 4E 05 F1 | 	add	fp, #24
12108     A7 12 02 F6 | 	mov	arg01, fp
1210c     18 4E 85 F1 | 	sub	fp, #24
12110     40 E5 BF FD | 	call	#_converttoint
12114     FD 16 02 F6 | 	mov	arg03, result1
12118     55 00 00 FF 
1211c     FC E5 05 F1 | 	add	objptr, ##44028
12120     F2 18 02 FB | 	rdlong	arg04, objptr
12124     55 00 00 FF 
12128     FC E5 85 F1 | 	sub	objptr, ##44028
1212c     0F 13 02 F6 | 	mov	arg01, local01
12130     10 15 02 F6 | 	mov	arg02, local02
12134     08 4C B0 FD | 	call	#_hg010b_spin2_fcircle
12138                 | LR__1471
12138     A7 F0 03 F6 | 	mov	ptra, fp
1213c     B2 00 A0 FD | 	call	#popregs_
12140                 | _do_fcircle_ret
12140     2D 00 64 FD | 	ret
12144                 | 
12144                 | ' 
12144                 | ' ' -------------------------- Draw an empty circle at x,y and radius r
12144                 | ' 
12144                 | ' sub do_circle
12144                 | _do_circle
12144     02 4A 05 F6 | 	mov	COUNT_, #2
12148     A8 00 A0 FD | 	call	#pushregs_
1214c     24 F0 07 F1 | 	add	ptra, #36
12150     70 70 BF FD | 	call	#_pop
12154     FD 18 02 F6 | 	mov	arg04, result1
12158     FE 16 02 F6 | 	mov	arg03, result2
1215c     FF 14 02 F6 | 	mov	arg02, result3
12160     18 4E 05 F1 | 	add	fp, #24
12164     A7 18 62 FC | 	wrlong	arg04, fp
12168     04 4E 05 F1 | 	add	fp, #4
1216c     A7 16 62 FC | 	wrlong	arg03, fp
12170     04 4E 05 F1 | 	add	fp, #4
12174     A7 14 62 FC | 	wrlong	arg02, fp
12178     20 4E 85 F1 | 	sub	fp, #32
1217c     44 70 BF FD | 	call	#_pop
12180     FD 18 02 F6 | 	mov	arg04, result1
12184     FE 16 02 F6 | 	mov	arg03, result2
12188     FF 1E 02 F6 | 	mov	local01, result3
1218c     0C 4E 05 F1 | 	add	fp, #12
12190     A7 18 62 FC | 	wrlong	arg04, fp
12194     04 4E 05 F1 | 	add	fp, #4
12198     A7 16 62 FC | 	wrlong	arg03, fp
1219c     04 4E 05 F1 | 	add	fp, #4
121a0     A7 1E 62 FC | 	wrlong	local01, fp
121a4     14 4E 85 F1 | 	sub	fp, #20
121a8     18 70 BF FD | 	call	#_pop
121ac     A7 FA 61 FC | 	wrlong	result1, fp
121b0     04 4E 05 F1 | 	add	fp, #4
121b4     A7 FC 61 FC | 	wrlong	result2, fp
121b8     04 4E 05 F1 | 	add	fp, #4
121bc     A7 FE 61 FC | 	wrlong	result3, fp
121c0                 | ' 
121c0                 | ' t3=pop()
121c0                 | ' t2=pop()
121c0                 | ' t1=pop()
121c0                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
121c0     FF 18 02 F6 | 	mov	arg04, result3
121c4     08 4E 85 F1 | 	sub	fp, #8
121c8     1C 18 0E F2 | 	cmp	arg04, #28 wz
121cc     08 4E 05 51 |  if_ne	add	fp, #8
121d0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
121d4     08 4E 85 51 |  if_ne	sub	fp, #8
121d8     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
121dc     7C 00 90 5D |  if_ne	jmp	#LR__1480
121e0     14 4E 05 F1 | 	add	fp, #20
121e4     A7 1E 02 FB | 	rdlong	local01, fp
121e8     14 4E 85 F1 | 	sub	fp, #20
121ec     1C 1E 0E F2 | 	cmp	local01, #28 wz
121f0     14 4E 05 51 |  if_ne	add	fp, #20
121f4     A7 18 02 5B |  if_ne	rdlong	arg04, fp
121f8     14 4E 85 51 |  if_ne	sub	fp, #20
121fc     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
12200     58 00 90 5D |  if_ne	jmp	#LR__1480
12204     20 4E 05 F1 | 	add	fp, #32
12208     A7 1E 02 FB | 	rdlong	local01, fp
1220c     20 4E 85 F1 | 	sub	fp, #32
12210     1C 1E 0E F2 | 	cmp	local01, #28 wz
12214     20 4E 05 51 |  if_ne	add	fp, #32
12218     A7 18 02 5B |  if_ne	rdlong	arg04, fp
1221c     20 4E 85 51 |  if_ne	sub	fp, #32
12220     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
12224     34 00 90 5D |  if_ne	jmp	#LR__1480
12228     A7 12 02 FB | 	rdlong	arg01, fp
1222c     0C 4E 05 F1 | 	add	fp, #12
12230     A7 14 02 FB | 	rdlong	arg02, fp
12234     0C 4E 05 F1 | 	add	fp, #12
12238     A7 16 02 FB | 	rdlong	arg03, fp
1223c     18 4E 85 F1 | 	sub	fp, #24
12240     55 00 00 FF 
12244     FC E5 05 F1 | 	add	objptr, ##44028
12248     F2 18 02 FB | 	rdlong	arg04, objptr
1224c     55 00 00 FF 
12250     FC E5 85 F1 | 	sub	objptr, ##44028
12254     F4 4B B0 FD | 	call	#_hg010b_spin2_circle
12258                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
12258     54 00 90 FD | 	jmp	#LR__1481
1225c                 | LR__1480
1225c     A7 12 02 F6 | 	mov	arg01, fp
12260     F0 E3 BF FD | 	call	#_converttoint
12264     FD 1E 02 F6 | 	mov	local01, result1
12268     0C 4E 05 F1 | 	add	fp, #12
1226c     A7 12 02 F6 | 	mov	arg01, fp
12270     0C 4E 85 F1 | 	sub	fp, #12
12274     DC E3 BF FD | 	call	#_converttoint
12278     FD 20 02 F6 | 	mov	local02, result1
1227c     18 4E 05 F1 | 	add	fp, #24
12280     A7 12 02 F6 | 	mov	arg01, fp
12284     18 4E 85 F1 | 	sub	fp, #24
12288     C8 E3 BF FD | 	call	#_converttoint
1228c     FD 16 02 F6 | 	mov	arg03, result1
12290     55 00 00 FF 
12294     FC E5 05 F1 | 	add	objptr, ##44028
12298     F2 18 02 FB | 	rdlong	arg04, objptr
1229c     55 00 00 FF 
122a0     FC E5 85 F1 | 	sub	objptr, ##44028
122a4     0F 13 02 F6 | 	mov	arg01, local01
122a8     10 15 02 F6 | 	mov	arg02, local02
122ac     9C 4B B0 FD | 	call	#_hg010b_spin2_circle
122b0                 | LR__1481
122b0     A7 F0 03 F6 | 	mov	ptra, fp
122b4     B2 00 A0 FD | 	call	#popregs_
122b8                 | _do_circle_ret
122b8     2D 00 64 FD | 	ret
122bc                 | 
122bc                 | ' 
122bc                 | ' ' -------------------------- Draw a rectangle
122bc                 | ' 
122bc                 | ' sub do_box
122bc                 | _do_box
122bc     03 4A 05 F6 | 	mov	COUNT_, #3
122c0     A8 00 A0 FD | 	call	#pushregs_
122c4     30 F0 07 F1 | 	add	ptra, #48
122c8     F8 6E BF FD | 	call	#_pop
122cc     FD 1A 02 F6 | 	mov	arg05, result1
122d0     FE 18 02 F6 | 	mov	arg04, result2
122d4     FF 16 02 F6 | 	mov	arg03, result3
122d8     24 4E 05 F1 | 	add	fp, #36
122dc     A7 1A 62 FC | 	wrlong	arg05, fp
122e0     04 4E 05 F1 | 	add	fp, #4
122e4     A7 18 62 FC | 	wrlong	arg04, fp
122e8     04 4E 05 F1 | 	add	fp, #4
122ec     A7 16 62 FC | 	wrlong	arg03, fp
122f0     2C 4E 85 F1 | 	sub	fp, #44
122f4     CC 6E BF FD | 	call	#_pop
122f8     FD 1A 02 F6 | 	mov	arg05, result1
122fc     FE 18 02 F6 | 	mov	arg04, result2
12300     FF 16 02 F6 | 	mov	arg03, result3
12304     18 4E 05 F1 | 	add	fp, #24
12308     A7 1A 62 FC | 	wrlong	arg05, fp
1230c     04 4E 05 F1 | 	add	fp, #4
12310     A7 18 62 FC | 	wrlong	arg04, fp
12314     04 4E 05 F1 | 	add	fp, #4
12318     A7 16 62 FC | 	wrlong	arg03, fp
1231c     20 4E 85 F1 | 	sub	fp, #32
12320     A0 6E BF FD | 	call	#_pop
12324     FD 1A 02 F6 | 	mov	arg05, result1
12328     FE 18 02 F6 | 	mov	arg04, result2
1232c     FF 1E 02 F6 | 	mov	local01, result3
12330     0C 4E 05 F1 | 	add	fp, #12
12334     A7 1A 62 FC | 	wrlong	arg05, fp
12338     04 4E 05 F1 | 	add	fp, #4
1233c     A7 18 62 FC | 	wrlong	arg04, fp
12340     04 4E 05 F1 | 	add	fp, #4
12344     A7 1E 62 FC | 	wrlong	local01, fp
12348     14 4E 85 F1 | 	sub	fp, #20
1234c     74 6E BF FD | 	call	#_pop
12350     A7 FA 61 FC | 	wrlong	result1, fp
12354     04 4E 05 F1 | 	add	fp, #4
12358     A7 FC 61 FC | 	wrlong	result2, fp
1235c     04 4E 05 F1 | 	add	fp, #4
12360     A7 FE 61 FC | 	wrlong	result3, fp
12364                 | ' 
12364                 | ' t4=pop()
12364                 | ' t3=pop()
12364                 | ' t2=pop()
12364                 | ' t1=pop()
12364                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
12364     FF 1A 02 F6 | 	mov	arg05, result3
12368     08 4E 85 F1 | 	sub	fp, #8
1236c     1C 1A 0E F2 | 	cmp	arg05, #28 wz
12370     08 4E 05 51 |  if_ne	add	fp, #8
12374     A7 1E 02 5B |  if_ne	rdlong	local01, fp
12378     08 4E 85 51 |  if_ne	sub	fp, #8
1237c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
12380     A8 00 90 5D |  if_ne	jmp	#LR__1490
12384     14 4E 05 F1 | 	add	fp, #20
12388     A7 1E 02 FB | 	rdlong	local01, fp
1238c     14 4E 85 F1 | 	sub	fp, #20
12390     1C 1E 0E F2 | 	cmp	local01, #28 wz
12394     14 4E 05 51 |  if_ne	add	fp, #20
12398     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
1239c     14 4E 85 51 |  if_ne	sub	fp, #20
123a0     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
123a4     84 00 90 5D |  if_ne	jmp	#LR__1490
123a8     20 4E 05 F1 | 	add	fp, #32
123ac     A7 1E 02 FB | 	rdlong	local01, fp
123b0     20 4E 85 F1 | 	sub	fp, #32
123b4     1C 1E 0E F2 | 	cmp	local01, #28 wz
123b8     20 4E 05 51 |  if_ne	add	fp, #32
123bc     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
123c0     20 4E 85 51 |  if_ne	sub	fp, #32
123c4     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
123c8     60 00 90 5D |  if_ne	jmp	#LR__1490
123cc     2C 4E 05 F1 | 	add	fp, #44
123d0     A7 1E 02 FB | 	rdlong	local01, fp
123d4     2C 4E 85 F1 | 	sub	fp, #44
123d8     1C 1E 0E F2 | 	cmp	local01, #28 wz
123dc     2C 4E 05 51 |  if_ne	add	fp, #44
123e0     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
123e4     2C 4E 85 51 |  if_ne	sub	fp, #44
123e8     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
123ec     3C 00 90 5D |  if_ne	jmp	#LR__1490
123f0     A7 12 02 FB | 	rdlong	arg01, fp
123f4     0C 4E 05 F1 | 	add	fp, #12
123f8     A7 14 02 FB | 	rdlong	arg02, fp
123fc     0C 4E 05 F1 | 	add	fp, #12
12400     A7 16 02 FB | 	rdlong	arg03, fp
12404     0C 4E 05 F1 | 	add	fp, #12
12408     A7 18 02 FB | 	rdlong	arg04, fp
1240c     24 4E 85 F1 | 	sub	fp, #36
12410     55 00 00 FF 
12414     FC E5 05 F1 | 	add	objptr, ##44028
12418     F2 1A 02 FB | 	rdlong	arg05, objptr
1241c     55 00 00 FF 
12420     FC E5 85 F1 | 	sub	objptr, ##44028
12424     F0 4B B0 FD | 	call	#_hg010b_spin2_box
12428                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
12428     6C 00 90 FD | 	jmp	#LR__1491
1242c                 | LR__1490
1242c     A7 12 02 F6 | 	mov	arg01, fp
12430     20 E2 BF FD | 	call	#_converttoint
12434     FD 20 02 F6 | 	mov	local02, result1
12438     0C 4E 05 F1 | 	add	fp, #12
1243c     A7 12 02 F6 | 	mov	arg01, fp
12440     0C 4E 85 F1 | 	sub	fp, #12
12444     0C E2 BF FD | 	call	#_converttoint
12448     FD 22 02 F6 | 	mov	local03, result1
1244c     18 4E 05 F1 | 	add	fp, #24
12450     A7 12 02 F6 | 	mov	arg01, fp
12454     18 4E 85 F1 | 	sub	fp, #24
12458     F8 E1 BF FD | 	call	#_converttoint
1245c     FD 1E 02 F6 | 	mov	local01, result1
12460     24 4E 05 F1 | 	add	fp, #36
12464     A7 12 02 F6 | 	mov	arg01, fp
12468     24 4E 85 F1 | 	sub	fp, #36
1246c     E4 E1 BF FD | 	call	#_converttoint
12470     FD 18 02 F6 | 	mov	arg04, result1
12474     55 00 00 FF 
12478     FC E5 05 F1 | 	add	objptr, ##44028
1247c     F2 1A 02 FB | 	rdlong	arg05, objptr
12480     55 00 00 FF 
12484     FC E5 85 F1 | 	sub	objptr, ##44028
12488     10 13 02 F6 | 	mov	arg01, local02
1248c     11 15 02 F6 | 	mov	arg02, local03
12490     0F 17 02 F6 | 	mov	arg03, local01
12494     80 4B B0 FD | 	call	#_hg010b_spin2_box
12498                 | LR__1491
12498     A7 F0 03 F6 | 	mov	ptra, fp
1249c     B2 00 A0 FD | 	call	#popregs_
124a0                 | _do_box_ret
124a0     2D 00 64 FD | 	ret
124a4                 | 
124a4                 | ' 
124a4                 | ' sub do_fill
124a4                 | _do_fill
124a4     03 4A 05 F6 | 	mov	COUNT_, #3
124a8     A8 00 A0 FD | 	call	#pushregs_
124ac     30 F0 07 F1 | 	add	ptra, #48
124b0     10 6D BF FD | 	call	#_pop
124b4     FD 18 02 F6 | 	mov	arg04, result1
124b8     FE 16 02 F6 | 	mov	arg03, result2
124bc     FF 14 02 F6 | 	mov	arg02, result3
124c0     24 4E 05 F1 | 	add	fp, #36
124c4     A7 18 62 FC | 	wrlong	arg04, fp
124c8     04 4E 05 F1 | 	add	fp, #4
124cc     A7 16 62 FC | 	wrlong	arg03, fp
124d0     04 4E 05 F1 | 	add	fp, #4
124d4     A7 14 62 FC | 	wrlong	arg02, fp
124d8     2C 4E 85 F1 | 	sub	fp, #44
124dc     E4 6C BF FD | 	call	#_pop
124e0     FD 18 02 F6 | 	mov	arg04, result1
124e4     FE 16 02 F6 | 	mov	arg03, result2
124e8     FF 14 02 F6 | 	mov	arg02, result3
124ec     18 4E 05 F1 | 	add	fp, #24
124f0     A7 18 62 FC | 	wrlong	arg04, fp
124f4     04 4E 05 F1 | 	add	fp, #4
124f8     A7 16 62 FC | 	wrlong	arg03, fp
124fc     04 4E 05 F1 | 	add	fp, #4
12500     A7 14 62 FC | 	wrlong	arg02, fp
12504     20 4E 85 F1 | 	sub	fp, #32
12508     B8 6C BF FD | 	call	#_pop
1250c     FD 18 02 F6 | 	mov	arg04, result1
12510     FE 16 02 F6 | 	mov	arg03, result2
12514     FF 1E 02 F6 | 	mov	local01, result3
12518     0C 4E 05 F1 | 	add	fp, #12
1251c     A7 18 62 FC | 	wrlong	arg04, fp
12520     04 4E 05 F1 | 	add	fp, #4
12524     A7 16 62 FC | 	wrlong	arg03, fp
12528     04 4E 05 F1 | 	add	fp, #4
1252c     A7 1E 62 FC | 	wrlong	local01, fp
12530     14 4E 85 F1 | 	sub	fp, #20
12534     8C 6C BF FD | 	call	#_pop
12538     A7 FA 61 FC | 	wrlong	result1, fp
1253c     04 4E 05 F1 | 	add	fp, #4
12540     A7 FC 61 FC | 	wrlong	result2, fp
12544     04 4E 05 F1 | 	add	fp, #4
12548     A7 FE 61 FC | 	wrlong	result3, fp
1254c                 | ' 
1254c                 | ' t4=pop()
1254c                 | ' t3=pop()
1254c                 | ' t2=pop()
1254c                 | ' t1=pop()
1254c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
1254c     FF 18 02 F6 | 	mov	arg04, result3
12550     08 4E 85 F1 | 	sub	fp, #8
12554     1C 18 0E F2 | 	cmp	arg04, #28 wz
12558     08 4E 05 51 |  if_ne	add	fp, #8
1255c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
12560     08 4E 85 51 |  if_ne	sub	fp, #8
12564     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
12568     94 00 90 5D |  if_ne	jmp	#LR__1500
1256c     14 4E 05 F1 | 	add	fp, #20
12570     A7 1E 02 FB | 	rdlong	local01, fp
12574     14 4E 85 F1 | 	sub	fp, #20
12578     1C 1E 0E F2 | 	cmp	local01, #28 wz
1257c     14 4E 05 51 |  if_ne	add	fp, #20
12580     A7 18 02 5B |  if_ne	rdlong	arg04, fp
12584     14 4E 85 51 |  if_ne	sub	fp, #20
12588     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
1258c     70 00 90 5D |  if_ne	jmp	#LR__1500
12590     20 4E 05 F1 | 	add	fp, #32
12594     A7 1E 02 FB | 	rdlong	local01, fp
12598     20 4E 85 F1 | 	sub	fp, #32
1259c     1C 1E 0E F2 | 	cmp	local01, #28 wz
125a0     20 4E 05 51 |  if_ne	add	fp, #32
125a4     A7 18 02 5B |  if_ne	rdlong	arg04, fp
125a8     20 4E 85 51 |  if_ne	sub	fp, #32
125ac     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
125b0     4C 00 90 5D |  if_ne	jmp	#LR__1500
125b4     2C 4E 05 F1 | 	add	fp, #44
125b8     A7 1E 02 FB | 	rdlong	local01, fp
125bc     2C 4E 85 F1 | 	sub	fp, #44
125c0     1C 1E 0E F2 | 	cmp	local01, #28 wz
125c4     2C 4E 05 51 |  if_ne	add	fp, #44
125c8     A7 18 02 5B |  if_ne	rdlong	arg04, fp
125cc     2C 4E 85 51 |  if_ne	sub	fp, #44
125d0     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
125d4     28 00 90 5D |  if_ne	jmp	#LR__1500
125d8     A7 12 02 FB | 	rdlong	arg01, fp
125dc     0C 4E 05 F1 | 	add	fp, #12
125e0     A7 14 02 FB | 	rdlong	arg02, fp
125e4     0C 4E 05 F1 | 	add	fp, #12
125e8     A7 16 02 FB | 	rdlong	arg03, fp
125ec     0C 4E 05 F1 | 	add	fp, #12
125f0     A7 18 02 FB | 	rdlong	arg04, fp
125f4     24 4E 85 F1 | 	sub	fp, #36
125f8     B0 44 B0 FD | 	call	#_hg010b_spin2_fill
125fc                 | '    v.fill(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult) : return
125fc     58 00 90 FD | 	jmp	#LR__1501
12600                 | LR__1500
12600     A7 12 02 F6 | 	mov	arg01, fp
12604     4C E0 BF FD | 	call	#_converttoint
12608     FD 20 02 F6 | 	mov	local02, result1
1260c     0C 4E 05 F1 | 	add	fp, #12
12610     A7 12 02 F6 | 	mov	arg01, fp
12614     0C 4E 85 F1 | 	sub	fp, #12
12618     38 E0 BF FD | 	call	#_converttoint
1261c     FD 22 02 F6 | 	mov	local03, result1
12620     18 4E 05 F1 | 	add	fp, #24
12624     A7 12 02 F6 | 	mov	arg01, fp
12628     18 4E 85 F1 | 	sub	fp, #24
1262c     24 E0 BF FD | 	call	#_converttoint
12630     FD 1E 02 F6 | 	mov	local01, result1
12634     24 4E 05 F1 | 	add	fp, #36
12638     A7 12 02 F6 | 	mov	arg01, fp
1263c     24 4E 85 F1 | 	sub	fp, #36
12640     10 E0 BF FD | 	call	#_converttoint
12644     FD 18 02 F6 | 	mov	arg04, result1
12648     10 13 02 F6 | 	mov	arg01, local02
1264c     11 15 02 F6 | 	mov	arg02, local03
12650     0F 17 02 F6 | 	mov	arg03, local01
12654     54 44 B0 FD | 	call	#_hg010b_spin2_fill
12658                 | LR__1501
12658     A7 F0 03 F6 | 	mov	ptra, fp
1265c     B2 00 A0 FD | 	call	#popregs_
12660                 | _do_fill_ret
12660     2D 00 64 FD | 	ret
12664                 | 
12664                 | ' 
12664                 | ' ' -------------------------- Draw a frane
12664                 | ' 
12664                 | ' sub do_frame
12664                 | _do_frame
12664     03 4A 05 F6 | 	mov	COUNT_, #3
12668     A8 00 A0 FD | 	call	#pushregs_
1266c     30 F0 07 F1 | 	add	ptra, #48
12670     50 6B BF FD | 	call	#_pop
12674     FD 1A 02 F6 | 	mov	arg05, result1
12678     FE 18 02 F6 | 	mov	arg04, result2
1267c     FF 16 02 F6 | 	mov	arg03, result3
12680     24 4E 05 F1 | 	add	fp, #36
12684     A7 1A 62 FC | 	wrlong	arg05, fp
12688     04 4E 05 F1 | 	add	fp, #4
1268c     A7 18 62 FC | 	wrlong	arg04, fp
12690     04 4E 05 F1 | 	add	fp, #4
12694     A7 16 62 FC | 	wrlong	arg03, fp
12698     2C 4E 85 F1 | 	sub	fp, #44
1269c     24 6B BF FD | 	call	#_pop
126a0     FD 1A 02 F6 | 	mov	arg05, result1
126a4     FE 18 02 F6 | 	mov	arg04, result2
126a8     FF 16 02 F6 | 	mov	arg03, result3
126ac     18 4E 05 F1 | 	add	fp, #24
126b0     A7 1A 62 FC | 	wrlong	arg05, fp
126b4     04 4E 05 F1 | 	add	fp, #4
126b8     A7 18 62 FC | 	wrlong	arg04, fp
126bc     04 4E 05 F1 | 	add	fp, #4
126c0     A7 16 62 FC | 	wrlong	arg03, fp
126c4     20 4E 85 F1 | 	sub	fp, #32
126c8     F8 6A BF FD | 	call	#_pop
126cc     FD 1A 02 F6 | 	mov	arg05, result1
126d0     FE 18 02 F6 | 	mov	arg04, result2
126d4     FF 1E 02 F6 | 	mov	local01, result3
126d8     0C 4E 05 F1 | 	add	fp, #12
126dc     A7 1A 62 FC | 	wrlong	arg05, fp
126e0     04 4E 05 F1 | 	add	fp, #4
126e4     A7 18 62 FC | 	wrlong	arg04, fp
126e8     04 4E 05 F1 | 	add	fp, #4
126ec     A7 1E 62 FC | 	wrlong	local01, fp
126f0     14 4E 85 F1 | 	sub	fp, #20
126f4     CC 6A BF FD | 	call	#_pop
126f8     A7 FA 61 FC | 	wrlong	result1, fp
126fc     04 4E 05 F1 | 	add	fp, #4
12700     A7 FC 61 FC | 	wrlong	result2, fp
12704     04 4E 05 F1 | 	add	fp, #4
12708     A7 FE 61 FC | 	wrlong	result3, fp
1270c                 | ' 
1270c                 | ' t4=pop()
1270c                 | ' t3=pop()
1270c                 | ' t2=pop()
1270c                 | ' t1=pop()
1270c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
1270c     FF 1A 02 F6 | 	mov	arg05, result3
12710     08 4E 85 F1 | 	sub	fp, #8
12714     1C 1A 0E F2 | 	cmp	arg05, #28 wz
12718     08 4E 05 51 |  if_ne	add	fp, #8
1271c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
12720     08 4E 85 51 |  if_ne	sub	fp, #8
12724     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
12728     A8 00 90 5D |  if_ne	jmp	#LR__1510
1272c     14 4E 05 F1 | 	add	fp, #20
12730     A7 1E 02 FB | 	rdlong	local01, fp
12734     14 4E 85 F1 | 	sub	fp, #20
12738     1C 1E 0E F2 | 	cmp	local01, #28 wz
1273c     14 4E 05 51 |  if_ne	add	fp, #20
12740     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
12744     14 4E 85 51 |  if_ne	sub	fp, #20
12748     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
1274c     84 00 90 5D |  if_ne	jmp	#LR__1510
12750     20 4E 05 F1 | 	add	fp, #32
12754     A7 1E 02 FB | 	rdlong	local01, fp
12758     20 4E 85 F1 | 	sub	fp, #32
1275c     1C 1E 0E F2 | 	cmp	local01, #28 wz
12760     20 4E 05 51 |  if_ne	add	fp, #32
12764     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
12768     20 4E 85 51 |  if_ne	sub	fp, #32
1276c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
12770     60 00 90 5D |  if_ne	jmp	#LR__1510
12774     2C 4E 05 F1 | 	add	fp, #44
12778     A7 1E 02 FB | 	rdlong	local01, fp
1277c     2C 4E 85 F1 | 	sub	fp, #44
12780     1C 1E 0E F2 | 	cmp	local01, #28 wz
12784     2C 4E 05 51 |  if_ne	add	fp, #44
12788     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
1278c     2C 4E 85 51 |  if_ne	sub	fp, #44
12790     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
12794     3C 00 90 5D |  if_ne	jmp	#LR__1510
12798     A7 12 02 FB | 	rdlong	arg01, fp
1279c     0C 4E 05 F1 | 	add	fp, #12
127a0     A7 14 02 FB | 	rdlong	arg02, fp
127a4     0C 4E 05 F1 | 	add	fp, #12
127a8     A7 16 02 FB | 	rdlong	arg03, fp
127ac     0C 4E 05 F1 | 	add	fp, #12
127b0     A7 18 02 FB | 	rdlong	arg04, fp
127b4     24 4E 85 F1 | 	sub	fp, #36
127b8     55 00 00 FF 
127bc     FC E5 05 F1 | 	add	objptr, ##44028
127c0     F2 1A 02 FB | 	rdlong	arg05, objptr
127c4     55 00 00 FF 
127c8     FC E5 85 F1 | 	sub	objptr, ##44028
127cc     C8 47 B0 FD | 	call	#_hg010b_spin2_frame
127d0                 | '    v.frame(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
127d0     6C 00 90 FD | 	jmp	#LR__1511
127d4                 | LR__1510
127d4     A7 12 02 F6 | 	mov	arg01, fp
127d8     78 DE BF FD | 	call	#_converttoint
127dc     FD 20 02 F6 | 	mov	local02, result1
127e0     0C 4E 05 F1 | 	add	fp, #12
127e4     A7 12 02 F6 | 	mov	arg01, fp
127e8     0C 4E 85 F1 | 	sub	fp, #12
127ec     64 DE BF FD | 	call	#_converttoint
127f0     FD 22 02 F6 | 	mov	local03, result1
127f4     18 4E 05 F1 | 	add	fp, #24
127f8     A7 12 02 F6 | 	mov	arg01, fp
127fc     18 4E 85 F1 | 	sub	fp, #24
12800     50 DE BF FD | 	call	#_converttoint
12804     FD 1E 02 F6 | 	mov	local01, result1
12808     24 4E 05 F1 | 	add	fp, #36
1280c     A7 12 02 F6 | 	mov	arg01, fp
12810     24 4E 85 F1 | 	sub	fp, #36
12814     3C DE BF FD | 	call	#_converttoint
12818     FD 18 02 F6 | 	mov	arg04, result1
1281c     55 00 00 FF 
12820     FC E5 05 F1 | 	add	objptr, ##44028
12824     F2 1A 02 FB | 	rdlong	arg05, objptr
12828     55 00 00 FF 
1282c     FC E5 85 F1 | 	sub	objptr, ##44028
12830     10 13 02 F6 | 	mov	arg01, local02
12834     11 15 02 F6 | 	mov	arg02, local03
12838     0F 17 02 F6 | 	mov	arg03, local01
1283c     58 47 B0 FD | 	call	#_hg010b_spin2_frame
12840                 | LR__1511
12840     A7 F0 03 F6 | 	mov	ptra, fp
12844     B2 00 A0 FD | 	call	#popregs_
12848                 | _do_frame_ret
12848     2D 00 64 FD | 	ret
1284c                 | 
1284c                 | ' 
1284c                 | ' '' ----------------------------- Text related runtime procedures --------------------------------------
1284c                 | ' 
1284c                 | ' ' ------------------------- Print to the screem
1284c                 | ' 
1284c                 | ' sub do_print  
1284c                 | _do_print
1284c     0A 4A 05 F6 | 	mov	COUNT_, #10
12850     A8 00 A0 FD | 	call	#pushregs_
12854     00 24 06 F6 | 	mov	local04, #0
12858     68 69 BF FD | 	call	#_pop
1285c     FD 26 02 F6 | 	mov	local05, result1
12860     FE 28 02 F6 | 	mov	local06, result2
12864     FF 2A 02 F6 | 	mov	local07, result3
12868     13 1F 02 F6 | 	mov	local01, local05
1286c     14 21 02 F6 | 	mov	local02, local06
12870     15 23 02 F6 | 	mov	local03, local07
12874                 | '  
12874                 | ' r=0
12874                 | ' t1=pop() 
12874                 | ' 'print t1.result_type,t1.result.uresult
12874                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
12874     2B 22 0E F2 | 	cmp	local03, #43 wz
12878     14 00 90 5D |  if_ne	jmp	#LR__1520
1287c     0F 13 02 F6 | 	mov	arg01, local01
12880     48 9A BF FD | 	call	#_convertstring
12884     FD 26 02 F6 | 	mov	local05, result1
12888     13 1F 02 F6 | 	mov	local01, local05
1288c     1F 22 06 F6 | 	mov	local03, #31
12890                 | LR__1520
12890                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
12890     21 22 0E F2 | 	cmp	local03, #33 wz
12894     22 22 0E 52 |  if_ne	cmp	local03, #34 wz
12898     20 00 90 5D |  if_ne	jmp	#LR__1521
1289c     11 25 02 F6 | 	mov	local04, local03
128a0     20 69 BF FD | 	call	#_pop
128a4     FD 26 02 F6 | 	mov	local05, result1
128a8     FE 28 02 F6 | 	mov	local06, result2
128ac     FF 2A 02 F6 | 	mov	local07, result3
128b0     13 1F 02 F6 | 	mov	local01, local05
128b4     14 21 02 F6 | 	mov	local02, local06
128b8     15 23 02 F6 | 	mov	local03, local07
128bc                 | LR__1521
128bc                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
128bc     20 22 0E F2 | 	cmp	local03, #32 wz
128c0     11 25 02 A6 |  if_e	mov	local04, local03
128c4                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
128c4     FF 22 0E F2 | 	cmp	local03, #255 wz
128c8     0C 00 90 5D |  if_ne	jmp	#LR__1522
128cc     0F 13 02 F6 | 	mov	arg01, local01
128d0     64 27 B0 FD | 	call	#_printerror
128d4     30 04 90 FD | 	jmp	#LR__1539
128d8                 | LR__1522
128d8                 | ' 
128d8                 | ' if r=print_mod_comma  then
128d8     21 24 0E F2 | 	cmp	local04, #33 wz
128dc     AC 01 90 5D |  if_ne	jmp	#LR__1527
128e0                 | '   if t1.result_type=result_int then print t1.result.iresult,
128e0     1C 22 0E F2 | 	cmp	local03, #28 wz
128e4     64 00 90 5D |  if_ne	jmp	#LR__1523
128e8     00 12 06 F6 | 	mov	arg01, #0
128ec     68 B4 B0 FD | 	call	#__system___getiolock_0416
128f0     FD 12 02 F6 | 	mov	arg01, result1
128f4     64 5C B0 FD | 	call	#__system___lockmem
128f8     00 28 06 F6 | 	mov	local06, #0
128fc     00 12 06 F6 | 	mov	arg01, #0
12900     0F 15 02 F6 | 	mov	arg02, local01
12904     00 16 06 F6 | 	mov	arg03, #0
12908     0A 18 06 F6 | 	mov	arg04, #10
1290c     80 69 B0 FD | 	call	#__system___basic_print_integer
12910     FD 2A 02 F6 | 	mov	local07, result1
12914     14 27 02 F6 | 	mov	local05, local06
12918     15 27 02 F1 | 	add	local05, local07
1291c     00 2C 06 F6 | 	mov	local08, #0
12920     00 12 06 F6 | 	mov	arg01, #0
12924     09 14 06 F6 | 	mov	arg02, #9
12928     00 16 06 F6 | 	mov	arg03, #0
1292c     C4 68 B0 FD | 	call	#__system___basic_print_char
12930     FD 2E 02 F6 | 	mov	local09, result1
12934     FD 26 02 F1 | 	add	local05, result1
12938     00 12 06 F6 | 	mov	arg01, #0
1293c     18 B4 B0 FD | 	call	#__system___getiolock_0416
12940     FD 00 68 FC | 	wrlong	#0, result1
12944     00 FA 05 F6 | 	mov	result1, #0
12948     00 30 06 F6 | 	mov	local10, #0
1294c                 | LR__1523
1294c                 | '   if t1.result_type=result_uint then print t1.result.uresult,
1294c     1D 22 0E F2 | 	cmp	local03, #29 wz
12950     64 00 90 5D |  if_ne	jmp	#LR__1524
12954     00 12 06 F6 | 	mov	arg01, #0
12958     FC B3 B0 FD | 	call	#__system___getiolock_0416
1295c     FD 12 02 F6 | 	mov	arg01, result1
12960     F8 5B B0 FD | 	call	#__system___lockmem
12964     00 28 06 F6 | 	mov	local06, #0
12968     00 12 06 F6 | 	mov	arg01, #0
1296c     0F 15 02 F6 | 	mov	arg02, local01
12970     00 16 06 F6 | 	mov	arg03, #0
12974     0A 18 06 F6 | 	mov	arg04, #10
12978     54 69 B0 FD | 	call	#__system___basic_print_unsigned
1297c     FD 2A 02 F6 | 	mov	local07, result1
12980     14 27 02 F6 | 	mov	local05, local06
12984     15 27 02 F1 | 	add	local05, local07
12988     00 2C 06 F6 | 	mov	local08, #0
1298c     00 12 06 F6 | 	mov	arg01, #0
12990     09 14 06 F6 | 	mov	arg02, #9
12994     00 16 06 F6 | 	mov	arg03, #0
12998     58 68 B0 FD | 	call	#__system___basic_print_char
1299c     FD 2E 02 F6 | 	mov	local09, result1
129a0     FD 26 02 F1 | 	add	local05, result1
129a4     00 12 06 F6 | 	mov	arg01, #0
129a8     AC B3 B0 FD | 	call	#__system___getiolock_0416
129ac     FD 00 68 FC | 	wrlong	#0, result1
129b0     00 FA 05 F6 | 	mov	result1, #0
129b4     00 30 06 F6 | 	mov	local10, #0
129b8                 | LR__1524
129b8                 | '   if t1.result_type=result_float then print t1.result.fresult,
129b8     1E 22 0E F2 | 	cmp	local03, #30 wz
129bc     64 00 90 5D |  if_ne	jmp	#LR__1525
129c0     00 12 06 F6 | 	mov	arg01, #0
129c4     90 B3 B0 FD | 	call	#__system___getiolock_0416
129c8     FD 12 02 F6 | 	mov	arg01, result1
129cc     8C 5B B0 FD | 	call	#__system___lockmem
129d0     00 28 06 F6 | 	mov	local06, #0
129d4     00 12 06 F6 | 	mov	arg01, #0
129d8     0F 15 02 F6 | 	mov	arg02, local01
129dc     00 16 06 F6 | 	mov	arg03, #0
129e0     23 18 06 F6 | 	mov	arg04, #35
129e4     70 8B B0 FD | 	call	#__system___basic_print_float
129e8     FD 2A 02 F6 | 	mov	local07, result1
129ec     14 27 02 F6 | 	mov	local05, local06
129f0     15 27 02 F1 | 	add	local05, local07
129f4     00 2C 06 F6 | 	mov	local08, #0
129f8     00 12 06 F6 | 	mov	arg01, #0
129fc     09 14 06 F6 | 	mov	arg02, #9
12a00     00 16 06 F6 | 	mov	arg03, #0
12a04     EC 67 B0 FD | 	call	#__system___basic_print_char
12a08     FD 2E 02 F6 | 	mov	local09, result1
12a0c     FD 26 02 F1 | 	add	local05, result1
12a10     00 12 06 F6 | 	mov	arg01, #0
12a14     40 B3 B0 FD | 	call	#__system___getiolock_0416
12a18     FD 00 68 FC | 	wrlong	#0, result1
12a1c     00 FA 05 F6 | 	mov	result1, #0
12a20     00 30 06 F6 | 	mov	local10, #0
12a24                 | LR__1525
12a24                 | '   if t1.result_type=result_string then print t1.result.sresult,
12a24     1F 22 0E F2 | 	cmp	local03, #31 wz
12a28     60 00 90 5D |  if_ne	jmp	#LR__1526
12a2c     00 12 06 F6 | 	mov	arg01, #0
12a30     24 B3 B0 FD | 	call	#__system___getiolock_0416
12a34     FD 12 02 F6 | 	mov	arg01, result1
12a38     20 5B B0 FD | 	call	#__system___lockmem
12a3c     00 28 06 F6 | 	mov	local06, #0
12a40     00 12 06 F6 | 	mov	arg01, #0
12a44     0F 15 02 F6 | 	mov	arg02, local01
12a48     00 16 06 F6 | 	mov	arg03, #0
12a4c     FC 67 B0 FD | 	call	#__system___basic_print_string
12a50     FD 2A 02 F6 | 	mov	local07, result1
12a54     14 27 02 F6 | 	mov	local05, local06
12a58     15 27 02 F1 | 	add	local05, local07
12a5c     00 2C 06 F6 | 	mov	local08, #0
12a60     00 12 06 F6 | 	mov	arg01, #0
12a64     09 14 06 F6 | 	mov	arg02, #9
12a68     00 16 06 F6 | 	mov	arg03, #0
12a6c     84 67 B0 FD | 	call	#__system___basic_print_char
12a70     FD 2E 02 F6 | 	mov	local09, result1
12a74     FD 26 02 F1 | 	add	local05, result1
12a78     00 12 06 F6 | 	mov	arg01, #0
12a7c     D8 B2 B0 FD | 	call	#__system___getiolock_0416
12a80     FD 00 68 FC | 	wrlong	#0, result1
12a84     00 FA 05 F6 | 	mov	result1, #0
12a88     00 30 06 F6 | 	mov	local10, #0
12a8c                 | LR__1526
12a8c                 | LR__1527
12a8c                 | ' if r=print_mod_semicolon then 
12a8c     22 24 0E F2 | 	cmp	local04, #34 wz
12a90     1C 01 90 5D |  if_ne	jmp	#LR__1532
12a94                 | '   if t1.result_type=result_int then print t1.result.iresult;
12a94     1C 22 0E F2 | 	cmp	local03, #28 wz
12a98     50 00 90 5D |  if_ne	jmp	#LR__1528
12a9c     00 12 06 F6 | 	mov	arg01, #0
12aa0     B4 B2 B0 FD | 	call	#__system___getiolock_0416
12aa4     FD 12 02 F6 | 	mov	arg01, result1
12aa8     B0 5A B0 FD | 	call	#__system___lockmem
12aac     00 28 06 F6 | 	mov	local06, #0
12ab0     00 30 06 F6 | 	mov	local10, #0
12ab4     0A 2C 06 F6 | 	mov	local08, #10
12ab8     00 12 06 F6 | 	mov	arg01, #0
12abc     0F 15 02 F6 | 	mov	arg02, local01
12ac0     00 16 06 F6 | 	mov	arg03, #0
12ac4     0A 18 06 F6 | 	mov	arg04, #10
12ac8     C4 67 B0 FD | 	call	#__system___basic_print_integer
12acc     FD 2A 02 F6 | 	mov	local07, result1
12ad0     14 27 02 F6 | 	mov	local05, local06
12ad4     15 27 02 F1 | 	add	local05, local07
12ad8     00 12 06 F6 | 	mov	arg01, #0
12adc     78 B2 B0 FD | 	call	#__system___getiolock_0416
12ae0     FD 00 68 FC | 	wrlong	#0, result1
12ae4     00 FA 05 F6 | 	mov	result1, #0
12ae8     00 2E 06 F6 | 	mov	local09, #0
12aec                 | LR__1528
12aec                 | '   if t1.result_type=result_uint then print t1.result.uresult;
12aec     1D 22 0E F2 | 	cmp	local03, #29 wz
12af0     50 00 90 5D |  if_ne	jmp	#LR__1529
12af4     00 12 06 F6 | 	mov	arg01, #0
12af8     5C B2 B0 FD | 	call	#__system___getiolock_0416
12afc     FD 12 02 F6 | 	mov	arg01, result1
12b00     58 5A B0 FD | 	call	#__system___lockmem
12b04     00 28 06 F6 | 	mov	local06, #0
12b08     00 30 06 F6 | 	mov	local10, #0
12b0c     0A 2C 06 F6 | 	mov	local08, #10
12b10     00 12 06 F6 | 	mov	arg01, #0
12b14     0F 15 02 F6 | 	mov	arg02, local01
12b18     00 16 06 F6 | 	mov	arg03, #0
12b1c     0A 18 06 F6 | 	mov	arg04, #10
12b20     AC 67 B0 FD | 	call	#__system___basic_print_unsigned
12b24     FD 2A 02 F6 | 	mov	local07, result1
12b28     14 27 02 F6 | 	mov	local05, local06
12b2c     15 27 02 F1 | 	add	local05, local07
12b30     00 12 06 F6 | 	mov	arg01, #0
12b34     20 B2 B0 FD | 	call	#__system___getiolock_0416
12b38     FD 00 68 FC | 	wrlong	#0, result1
12b3c     00 FA 05 F6 | 	mov	result1, #0
12b40     00 2E 06 F6 | 	mov	local09, #0
12b44                 | LR__1529
12b44                 | '   if t1.result_type=result_float then print t1.result.fresult;
12b44     1E 22 0E F2 | 	cmp	local03, #30 wz
12b48     30 00 90 5D |  if_ne	jmp	#LR__1530
12b4c     00 12 06 F6 | 	mov	arg01, #0
12b50     04 B2 B0 FD | 	call	#__system___getiolock_0416
12b54     FD 12 02 F6 | 	mov	arg01, result1
12b58     00 5A B0 FD | 	call	#__system___lockmem
12b5c     00 12 06 F6 | 	mov	arg01, #0
12b60     0F 15 02 F6 | 	mov	arg02, local01
12b64     00 16 06 F6 | 	mov	arg03, #0
12b68     23 18 06 F6 | 	mov	arg04, #35
12b6c     E8 89 B0 FD | 	call	#__system___basic_print_float
12b70     00 12 06 F6 | 	mov	arg01, #0
12b74     E0 B1 B0 FD | 	call	#__system___getiolock_0416
12b78     FD 00 68 FC | 	wrlong	#0, result1
12b7c                 | LR__1530
12b7c                 | '   if t1.result_type=result_string then print t1.result.sresult;
12b7c     1F 22 0E F2 | 	cmp	local03, #31 wz
12b80     2C 00 90 5D |  if_ne	jmp	#LR__1531
12b84     00 12 06 F6 | 	mov	arg01, #0
12b88     CC B1 B0 FD | 	call	#__system___getiolock_0416
12b8c     FD 12 02 F6 | 	mov	arg01, result1
12b90     C8 59 B0 FD | 	call	#__system___lockmem
12b94     00 12 06 F6 | 	mov	arg01, #0
12b98     0F 15 02 F6 | 	mov	arg02, local01
12b9c     00 16 06 F6 | 	mov	arg03, #0
12ba0     A8 66 B0 FD | 	call	#__system___basic_print_string
12ba4     00 12 06 F6 | 	mov	arg01, #0
12ba8     AC B1 B0 FD | 	call	#__system___getiolock_0416
12bac     FD 00 68 FC | 	wrlong	#0, result1
12bb0                 | LR__1531
12bb0                 | LR__1532
12bb0                 | ' if r=0 then 
12bb0     00 24 0E F2 | 	cmp	local04, #0 wz
12bb4     1C 01 90 5D |  if_ne	jmp	#LR__1537
12bb8                 | '   if t1.result_type=result_int then print t1.result.iresult
12bb8     1C 22 0E F2 | 	cmp	local03, #28 wz
12bbc     40 00 90 5D |  if_ne	jmp	#LR__1533
12bc0     00 12 06 F6 | 	mov	arg01, #0
12bc4     90 B1 B0 FD | 	call	#__system___getiolock_0416
12bc8     FD 12 02 F6 | 	mov	arg01, result1
12bcc     8C 59 B0 FD | 	call	#__system___lockmem
12bd0     00 12 06 F6 | 	mov	arg01, #0
12bd4     0F 15 02 F6 | 	mov	arg02, local01
12bd8     00 16 06 F6 | 	mov	arg03, #0
12bdc     0A 18 06 F6 | 	mov	arg04, #10
12be0     AC 66 B0 FD | 	call	#__system___basic_print_integer
12be4     00 12 06 F6 | 	mov	arg01, #0
12be8     0A 14 06 F6 | 	mov	arg02, #10
12bec     00 16 06 F6 | 	mov	arg03, #0
12bf0     00 66 B0 FD | 	call	#__system___basic_print_char
12bf4     00 12 06 F6 | 	mov	arg01, #0
12bf8     5C B1 B0 FD | 	call	#__system___getiolock_0416
12bfc     FD 00 68 FC | 	wrlong	#0, result1
12c00                 | LR__1533
12c00                 | '   if t1.result_type=result_uint then print t1.result.uresult
12c00     1D 22 0E F2 | 	cmp	local03, #29 wz
12c04     40 00 90 5D |  if_ne	jmp	#LR__1534
12c08     00 12 06 F6 | 	mov	arg01, #0
12c0c     48 B1 B0 FD | 	call	#__system___getiolock_0416
12c10     FD 12 02 F6 | 	mov	arg01, result1
12c14     44 59 B0 FD | 	call	#__system___lockmem
12c18     00 12 06 F6 | 	mov	arg01, #0
12c1c     0F 15 02 F6 | 	mov	arg02, local01
12c20     00 16 06 F6 | 	mov	arg03, #0
12c24     0A 18 06 F6 | 	mov	arg04, #10
12c28     A4 66 B0 FD | 	call	#__system___basic_print_unsigned
12c2c     00 12 06 F6 | 	mov	arg01, #0
12c30     0A 14 06 F6 | 	mov	arg02, #10
12c34     00 16 06 F6 | 	mov	arg03, #0
12c38     B8 65 B0 FD | 	call	#__system___basic_print_char
12c3c     00 12 06 F6 | 	mov	arg01, #0
12c40     14 B1 B0 FD | 	call	#__system___getiolock_0416
12c44     FD 00 68 FC | 	wrlong	#0, result1
12c48                 | LR__1534
12c48                 | '   if t1.result_type=result_float then print t1.result.fresult
12c48     1E 22 0E F2 | 	cmp	local03, #30 wz
12c4c     40 00 90 5D |  if_ne	jmp	#LR__1535
12c50     00 12 06 F6 | 	mov	arg01, #0
12c54     00 B1 B0 FD | 	call	#__system___getiolock_0416
12c58     FD 12 02 F6 | 	mov	arg01, result1
12c5c     FC 58 B0 FD | 	call	#__system___lockmem
12c60     00 12 06 F6 | 	mov	arg01, #0
12c64     0F 15 02 F6 | 	mov	arg02, local01
12c68     00 16 06 F6 | 	mov	arg03, #0
12c6c     23 18 06 F6 | 	mov	arg04, #35
12c70     E4 88 B0 FD | 	call	#__system___basic_print_float
12c74     00 12 06 F6 | 	mov	arg01, #0
12c78     0A 14 06 F6 | 	mov	arg02, #10
12c7c     00 16 06 F6 | 	mov	arg03, #0
12c80     70 65 B0 FD | 	call	#__system___basic_print_char
12c84     00 12 06 F6 | 	mov	arg01, #0
12c88     CC B0 B0 FD | 	call	#__system___getiolock_0416
12c8c     FD 00 68 FC | 	wrlong	#0, result1
12c90                 | LR__1535
12c90                 | '   if t1.result_type=result_string then print t1.result.sresult
12c90     1F 22 0E F2 | 	cmp	local03, #31 wz
12c94     3C 00 90 5D |  if_ne	jmp	#LR__1536
12c98     00 12 06 F6 | 	mov	arg01, #0
12c9c     B8 B0 B0 FD | 	call	#__system___getiolock_0416
12ca0     FD 12 02 F6 | 	mov	arg01, result1
12ca4     B4 58 B0 FD | 	call	#__system___lockmem
12ca8     00 12 06 F6 | 	mov	arg01, #0
12cac     0F 15 02 F6 | 	mov	arg02, local01
12cb0     00 16 06 F6 | 	mov	arg03, #0
12cb4     94 65 B0 FD | 	call	#__system___basic_print_string
12cb8     00 12 06 F6 | 	mov	arg01, #0
12cbc     0A 14 06 F6 | 	mov	arg02, #10
12cc0     00 16 06 F6 | 	mov	arg03, #0
12cc4     2C 65 B0 FD | 	call	#__system___basic_print_char
12cc8     00 12 06 F6 | 	mov	arg01, #0
12ccc     88 B0 B0 FD | 	call	#__system___getiolock_0416
12cd0     FD 00 68 FC | 	wrlong	#0, result1
12cd4                 | LR__1536
12cd4                 | LR__1537
12cd4                 | ' if r=print_mod_empty then print
12cd4     20 24 0E F2 | 	cmp	local04, #32 wz
12cd8     2C 00 90 5D |  if_ne	jmp	#LR__1538
12cdc     00 12 06 F6 | 	mov	arg01, #0
12ce0     74 B0 B0 FD | 	call	#__system___getiolock_0416
12ce4     FD 12 02 F6 | 	mov	arg01, result1
12ce8     70 58 B0 FD | 	call	#__system___lockmem
12cec     00 12 06 F6 | 	mov	arg01, #0
12cf0     0A 14 06 F6 | 	mov	arg02, #10
12cf4     00 16 06 F6 | 	mov	arg03, #0
12cf8     F8 64 B0 FD | 	call	#__system___basic_print_char
12cfc     00 12 06 F6 | 	mov	arg01, #0
12d00     54 B0 B0 FD | 	call	#__system___getiolock_0416
12d04     FD 00 68 FC | 	wrlong	#0, result1
12d08                 | LR__1538
12d08                 | LR__1539
12d08     A7 F0 03 F6 | 	mov	ptra, fp
12d0c     B2 00 A0 FD | 	call	#popregs_
12d10                 | _do_print_ret
12d10     2D 00 64 FD | 	ret
12d14                 | 
12d14                 | ' 
12d14                 | ' 
12d14                 | ' sub do_paper
12d14                 | _do_paper
12d14     03 4A 05 F6 | 	mov	COUNT_, #3
12d18     A8 00 A0 FD | 	call	#pushregs_
12d1c     A4 64 BF FD | 	call	#_pop
12d20     FD 1E 02 F6 | 	mov	local01, result1
12d24     FE 20 02 F6 | 	mov	local02, result2
12d28     FF 22 02 F6 | 	mov	local03, result3
12d2c                 | ' t1=pop() 
12d2c                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
12d2c     1E 22 0E F2 | 	cmp	local03, #30 wz
12d30     10 00 90 5D |  if_ne	jmp	#LR__1540
12d34     0F 13 02 F6 | 	mov	arg01, local01
12d38     00 14 06 F6 | 	mov	arg02, #0
12d3c     C8 86 B0 FD | 	call	#__system___float_tointeger
12d40     FD 1E 02 F6 | 	mov	local01, result1
12d44                 | LR__1540
12d44                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
12d44     1F 22 0E F2 | 	cmp	local03, #31 wz
12d48     18 00 90 5D |  if_ne	jmp	#LR__1541
12d4c     0F 13 02 F6 | 	mov	arg01, local01
12d50     D4 89 B0 FD | 	call	#__system____builtin_atof
12d54     FD 12 02 F6 | 	mov	arg01, result1
12d58     00 14 06 F6 | 	mov	arg02, #0
12d5c     A8 86 B0 FD | 	call	#__system___float_tointeger
12d60     FD 1E 02 F6 | 	mov	local01, result1
12d64                 | LR__1541
12d64     56 00 00 FF 
12d68     0C E4 05 F1 | 	add	objptr, ##44044
12d6c     F2 1E 62 FC | 	wrlong	local01, objptr
12d70     04 E4 05 F1 | 	add	objptr, #4
12d74     F2 12 02 FB | 	rdlong	arg01, objptr
12d78                 | ' 
12d78                 | ' write_color:=ff
12d78     55 00 00 FF 
12d7c     D3 E5 85 F1 | 	sub	objptr, ##43987
12d80     F2 12 62 FC | 	wrlong	arg01, objptr
12d84                 | ' write_background:=bb
12d84     04 E4 05 F1 | 	add	objptr, #4
12d88     F2 1E 62 FC | 	wrlong	local01, objptr
12d8c     41 E4 85 F1 | 	sub	objptr, #65
12d90     A7 F0 03 F6 | 	mov	ptra, fp
12d94     B2 00 A0 FD | 	call	#popregs_
12d98                 | _do_paper_ret
12d98     2D 00 64 FD | 	ret
12d9c                 | 
12d9c                 | ' 
12d9c                 | ' sub do_ink
12d9c                 | _do_ink
12d9c     03 4A 05 F6 | 	mov	COUNT_, #3
12da0     A8 00 A0 FD | 	call	#pushregs_
12da4     1C 64 BF FD | 	call	#_pop
12da8     FD 1E 02 F6 | 	mov	local01, result1
12dac     FE 20 02 F6 | 	mov	local02, result2
12db0     FF 22 02 F6 | 	mov	local03, result3
12db4                 | ' t1=pop() 
12db4                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
12db4     1E 22 0E F2 | 	cmp	local03, #30 wz
12db8     10 00 90 5D |  if_ne	jmp	#LR__1550
12dbc     0F 13 02 F6 | 	mov	arg01, local01
12dc0     00 14 06 F6 | 	mov	arg02, #0
12dc4     40 86 B0 FD | 	call	#__system___float_tointeger
12dc8     FD 1E 02 F6 | 	mov	local01, result1
12dcc                 | LR__1550
12dcc                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
12dcc     1F 22 0E F2 | 	cmp	local03, #31 wz
12dd0     18 00 90 5D |  if_ne	jmp	#LR__1551
12dd4     0F 13 02 F6 | 	mov	arg01, local01
12dd8     4C 89 B0 FD | 	call	#__system____builtin_atof
12ddc     FD 12 02 F6 | 	mov	arg01, result1
12de0     00 14 06 F6 | 	mov	arg02, #0
12de4     20 86 B0 FD | 	call	#__system___float_tointeger
12de8     FD 1E 02 F6 | 	mov	local01, result1
12dec                 | LR__1551
12dec     56 00 00 FF 
12df0     10 E4 05 F1 | 	add	objptr, ##44048
12df4     F2 1E 62 FC | 	wrlong	local01, objptr
12df8     04 E4 85 F1 | 	sub	objptr, #4
12dfc     F2 14 02 FB | 	rdlong	arg02, objptr
12e00                 | ' 
12e00                 | ' write_color:=ff
12e00     55 00 00 FF 
12e04     CF E5 85 F1 | 	sub	objptr, ##43983
12e08     F2 1E 62 FC | 	wrlong	local01, objptr
12e0c                 | ' write_background:=bb
12e0c     04 E4 05 F1 | 	add	objptr, #4
12e10     F2 14 62 FC | 	wrlong	arg02, objptr
12e14     55 00 00 FF 
12e18     CF E5 05 F1 | 	add	objptr, ##43983
12e1c     F2 12 02 FB | 	rdlong	arg01, objptr
12e20     56 00 00 FF 
12e24     10 E4 85 F1 | 	sub	objptr, ##44048
12e28     04 34 B0 FD | 	call	#_hg010b_spin2_setcursorcolor
12e2c     A7 F0 03 F6 | 	mov	ptra, fp
12e30     B2 00 A0 FD | 	call	#popregs_
12e34                 | _do_ink_ret
12e34     2D 00 64 FD | 	ret
12e38                 | 
12e38                 | ' 
12e38                 | ' 
12e38                 | ' sub do_font
12e38                 | _do_font
12e38     03 4A 05 F6 | 	mov	COUNT_, #3
12e3c     A8 00 A0 FD | 	call	#pushregs_
12e40     80 63 BF FD | 	call	#_pop
12e44     FD 1E 02 F6 | 	mov	local01, result1
12e48     FE 20 02 F6 | 	mov	local02, result2
12e4c     FF 22 02 F6 | 	mov	local03, result3
12e50                 | ' t1=pop() 
12e50                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
12e50     1E 22 0E F2 | 	cmp	local03, #30 wz
12e54     10 00 90 5D |  if_ne	jmp	#LR__1560
12e58     0F 13 02 F6 | 	mov	arg01, local01
12e5c     00 14 06 F6 | 	mov	arg02, #0
12e60     A4 85 B0 FD | 	call	#__system___float_tointeger
12e64     FD 1E 02 F6 | 	mov	local01, result1
12e68                 | LR__1560
12e68                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
12e68     1F 22 0E F2 | 	cmp	local03, #31 wz
12e6c     18 00 90 5D |  if_ne	jmp	#LR__1561
12e70     0F 13 02 F6 | 	mov	arg01, local01
12e74     B0 88 B0 FD | 	call	#__system____builtin_atof
12e78     FD 12 02 F6 | 	mov	arg01, result1
12e7c     00 14 06 F6 | 	mov	arg02, #0
12e80     84 85 B0 FD | 	call	#__system___float_tointeger
12e84     FD 1E 02 F6 | 	mov	local01, result1
12e88                 | LR__1561
12e88     56 00 00 FF 
12e8c     14 E4 05 F1 | 	add	objptr, ##44052
12e90     F2 1E 62 FC | 	wrlong	local01, objptr
12e94     56 00 00 FF 
12e98     14 E4 85 F1 | 	sub	objptr, ##44052
12e9c     02 1E 66 F0 | 	shl	local01, #2
12ea0     0F 13 02 F6 | 	mov	arg01, local01
12ea4     E8 42 B0 FD | 	call	#_hg010b_spin2_setfontfamily
12ea8     A7 F0 03 F6 | 	mov	ptra, fp
12eac     B2 00 A0 FD | 	call	#popregs_
12eb0                 | _do_font_ret
12eb0     2D 00 64 FD | 	ret
12eb4                 | 
12eb4                 | ' 
12eb4                 | ' sub do_mode
12eb4                 | _do_mode
12eb4     04 4A 05 F6 | 	mov	COUNT_, #4
12eb8     A8 00 A0 FD | 	call	#pushregs_
12ebc     04 63 BF FD | 	call	#_pop
12ec0     FD 1E 02 F6 | 	mov	local01, result1
12ec4     FE 20 02 F6 | 	mov	local02, result2
12ec8     FF 22 02 F6 | 	mov	local03, result3
12ecc                 | ' t1=pop() 
12ecc                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
12ecc     1E 22 0E F2 | 	cmp	local03, #30 wz
12ed0     10 00 90 5D |  if_ne	jmp	#LR__1570
12ed4     0F 13 02 F6 | 	mov	arg01, local01
12ed8     00 14 06 F6 | 	mov	arg02, #0
12edc     28 85 B0 FD | 	call	#__system___float_tointeger
12ee0     FD 1E 02 F6 | 	mov	local01, result1
12ee4                 | LR__1570
12ee4                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
12ee4     1F 22 0E F2 | 	cmp	local03, #31 wz
12ee8     18 00 90 5D |  if_ne	jmp	#LR__1571
12eec     0F 13 02 F6 | 	mov	arg01, local01
12ef0     34 88 B0 FD | 	call	#__system____builtin_atof
12ef4     FD 12 02 F6 | 	mov	arg01, result1
12ef8     00 14 06 F6 | 	mov	arg02, #0
12efc     08 85 B0 FD | 	call	#__system___float_tointeger
12f00     FD 1E 02 F6 | 	mov	local01, result1
12f04                 | LR__1571
12f04                 | ' select case t1.result.iresult
12f04     0F 25 02 F6 | 	mov	local04, local01
12f08     05 24 26 F3 | 	fle	local04, #5
12f0c     30 24 62 FD | 	jmprel	local04
12f10                 | LR__1572
12f10     14 00 90 FD | 	jmp	#LR__1573
12f14     A8 00 90 FD | 	jmp	#LR__1574
12f18     10 01 90 FD | 	jmp	#LR__1575
12f1c     78 01 90 FD | 	jmp	#LR__1576
12f20     E0 01 90 FD | 	jmp	#LR__1577
12f24     70 02 90 FD | 	jmp	#LR__1578
12f28                 | LR__1573
12f28     56 00 00 FF 
12f2c     14 E4 05 F1 | 	add	objptr, ##44052
12f30     F2 02 68 FC | 	wrlong	#1, objptr
12f34     04 E4 85 F1 | 	sub	objptr, #4
12f38     F2 34 69 FC | 	wrlong	#154, objptr
12f3c     22 00 00 FF 
12f40     A4 E5 05 F1 | 	add	objptr, ##17828
12f44     F2 02 68 FC | 	wrlong	#1, objptr
12f48     22 00 00 FF 
12f4c     A8 E5 85 F1 | 	sub	objptr, ##17832
12f50     F2 26 69 FC | 	wrlong	#147, objptr
12f54     56 00 00 FF 
12f58     0C E4 85 F1 | 	sub	objptr, ##44044
12f5c     04 12 06 F6 | 	mov	arg01, #4
12f60     2C 42 B0 FD | 	call	#_hg010b_spin2_setfontfamily
12f64     56 00 00 FF 
12f68     10 E4 05 F1 | 	add	objptr, ##44048
12f6c     F2 12 02 FB | 	rdlong	arg01, objptr
12f70     04 E4 85 F1 | 	sub	objptr, #4
12f74     F2 14 02 FB | 	rdlong	arg02, objptr
12f78                 | ' 
12f78                 | ' write_color:=ff
12f78     55 00 00 FF 
12f7c     CF E5 85 F1 | 	sub	objptr, ##43983
12f80     F2 12 62 FC | 	wrlong	arg01, objptr
12f84                 | ' write_background:=bb
12f84     04 E4 05 F1 | 	add	objptr, #4
12f88     F2 14 62 FC | 	wrlong	arg02, objptr
12f8c     01 00 00 FF 
12f90     00 EA 05 F1 | 	add	ptr__dat__, ##512
12f94     7A 00 00 FF 
12f98     17 E4 05 F1 | 	add	objptr, ##62487
12f9c     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
12fa0     04 E4 85 F1 | 	sub	objptr, #4
12fa4     03 00 80 FF 
12fa8     F2 28 69 FC | 	wrlong	##1684, objptr
12fac     7A 00 00 FF 
12fb0     54 E4 85 F1 | 	sub	objptr, ##62548
12fb4     01 00 00 FF 
12fb8     00 EA 85 F1 | 	sub	ptr__dat__, ##512
12fbc     D8 01 90 FD | 	jmp	#LR__1578
12fc0                 | LR__1574
12fc0     56 00 00 FF 
12fc4     14 E4 05 F1 | 	add	objptr, ##44052
12fc8     F2 00 68 FC | 	wrlong	#0, objptr
12fcc     04 E4 85 F1 | 	sub	objptr, #4
12fd0     F2 2E 68 FC | 	wrlong	#23, objptr
12fd4     22 00 00 FF 
12fd8     A4 E5 05 F1 | 	add	objptr, ##17828
12fdc     F2 00 68 FC | 	wrlong	#0, objptr
12fe0     22 00 00 FF 
12fe4     A8 E5 85 F1 | 	sub	objptr, ##17832
12fe8     F2 00 68 FC | 	wrlong	#0, objptr
12fec     56 00 00 FF 
12ff0     0C E4 85 F1 | 	sub	objptr, ##44044
12ff4     00 12 06 F6 | 	mov	arg01, #0
12ff8     94 41 B0 FD | 	call	#_hg010b_spin2_setfontfamily
12ffc     56 00 00 FF 
13000     10 E4 05 F1 | 	add	objptr, ##44048
13004     F2 12 02 FB | 	rdlong	arg01, objptr
13008     04 E4 85 F1 | 	sub	objptr, #4
1300c     F2 14 02 FB | 	rdlong	arg02, objptr
13010                 | ' 
13010                 | ' write_color:=ff
13010     55 00 00 FF 
13014     CF E5 85 F1 | 	sub	objptr, ##43983
13018     F2 12 62 FC | 	wrlong	arg01, objptr
1301c                 | ' write_background:=bb
1301c     04 E4 05 F1 | 	add	objptr, #4
13020     F2 14 62 FC | 	wrlong	arg02, objptr
13024     41 E4 85 F1 | 	sub	objptr, #65
13028     6C 01 90 FD | 	jmp	#LR__1578
1302c                 | LR__1575
1302c     56 00 00 FF 
13030     14 E4 05 F1 | 	add	objptr, ##44052
13034     F2 00 68 FC | 	wrlong	#0, objptr
13038     04 E4 85 F1 | 	sub	objptr, #4
1303c     F2 6A 69 FC | 	wrlong	#181, objptr
13040     22 00 00 FF 
13044     A4 E5 05 F1 | 	add	objptr, ##17828
13048     F2 00 68 FC | 	wrlong	#0, objptr
1304c     22 00 00 FF 
13050     A8 E5 85 F1 | 	sub	objptr, ##17832
13054     F2 00 68 FC | 	wrlong	#0, objptr
13058     56 00 00 FF 
1305c     0C E4 85 F1 | 	sub	objptr, ##44044
13060     00 12 06 F6 | 	mov	arg01, #0
13064     28 41 B0 FD | 	call	#_hg010b_spin2_setfontfamily
13068     56 00 00 FF 
1306c     10 E4 05 F1 | 	add	objptr, ##44048
13070     F2 12 02 FB | 	rdlong	arg01, objptr
13074     04 E4 85 F1 | 	sub	objptr, #4
13078     F2 14 02 FB | 	rdlong	arg02, objptr
1307c                 | ' 
1307c                 | ' write_color:=ff
1307c     55 00 00 FF 
13080     CF E5 85 F1 | 	sub	objptr, ##43983
13084     F2 12 62 FC | 	wrlong	arg01, objptr
13088                 | ' write_background:=bb
13088     04 E4 05 F1 | 	add	objptr, #4
1308c     F2 14 62 FC | 	wrlong	arg02, objptr
13090     41 E4 85 F1 | 	sub	objptr, #65
13094     00 01 90 FD | 	jmp	#LR__1578
13098                 | LR__1576
13098     56 00 00 FF 
1309c     14 E4 05 F1 | 	add	objptr, ##44052
130a0     F2 00 68 FC | 	wrlong	#0, objptr
130a4     04 E4 85 F1 | 	sub	objptr, #4
130a8     F2 1E 68 FC | 	wrlong	#15, objptr
130ac     22 00 00 FF 
130b0     A4 E5 05 F1 | 	add	objptr, ##17828
130b4     F2 00 68 FC | 	wrlong	#0, objptr
130b8     22 00 00 FF 
130bc     A8 E5 85 F1 | 	sub	objptr, ##17832
130c0     F2 00 68 FC | 	wrlong	#0, objptr
130c4     56 00 00 FF 
130c8     0C E4 85 F1 | 	sub	objptr, ##44044
130cc     00 12 06 F6 | 	mov	arg01, #0
130d0     BC 40 B0 FD | 	call	#_hg010b_spin2_setfontfamily
130d4     56 00 00 FF 
130d8     10 E4 05 F1 | 	add	objptr, ##44048
130dc     F2 12 02 FB | 	rdlong	arg01, objptr
130e0     04 E4 85 F1 | 	sub	objptr, #4
130e4     F2 14 02 FB | 	rdlong	arg02, objptr
130e8                 | ' 
130e8                 | ' write_color:=ff
130e8     55 00 00 FF 
130ec     CF E5 85 F1 | 	sub	objptr, ##43983
130f0     F2 12 62 FC | 	wrlong	arg01, objptr
130f4                 | ' write_background:=bb
130f4     04 E4 05 F1 | 	add	objptr, #4
130f8     F2 14 62 FC | 	wrlong	arg02, objptr
130fc     41 E4 85 F1 | 	sub	objptr, #65
13100     94 00 90 FD | 	jmp	#LR__1578
13104                 | LR__1577
13104     56 00 00 FF 
13108     14 E4 05 F1 | 	add	objptr, ##44052
1310c     F2 02 68 FC | 	wrlong	#1, objptr
13110     04 E4 85 F1 | 	sub	objptr, #4
13114     F2 02 68 FC | 	wrlong	#1, objptr
13118     22 00 00 FF 
1311c     A4 E5 05 F1 | 	add	objptr, ##17828
13120     F2 02 68 FC | 	wrlong	#1, objptr
13124     22 00 00 FF 
13128     A8 E5 85 F1 | 	sub	objptr, ##17832
1312c     F2 1C 68 FC | 	wrlong	#14, objptr
13130     56 00 00 FF 
13134     0C E4 85 F1 | 	sub	objptr, ##44044
13138     04 12 06 F6 | 	mov	arg01, #4
1313c     50 40 B0 FD | 	call	#_hg010b_spin2_setfontfamily
13140     56 00 00 FF 
13144     10 E4 05 F1 | 	add	objptr, ##44048
13148     F2 12 02 FB | 	rdlong	arg01, objptr
1314c     04 E4 85 F1 | 	sub	objptr, #4
13150     F2 14 02 FB | 	rdlong	arg02, objptr
13154                 | ' 
13154                 | ' write_color:=ff
13154     55 00 00 FF 
13158     CF E5 85 F1 | 	sub	objptr, ##43983
1315c     F2 12 62 FC | 	wrlong	arg01, objptr
13160                 | ' write_background:=bb
13160     04 E4 05 F1 | 	add	objptr, #4
13164     F2 14 62 FC | 	wrlong	arg02, objptr
13168     07 00 00 FF 
1316c     72 EB 05 F1 | 	add	ptr__dat__, ##3954
13170     7A 00 00 FF 
13174     17 E4 05 F1 | 	add	objptr, ##62487
13178     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
1317c     04 E4 85 F1 | 	sub	objptr, #4
13180     03 00 80 FF 
13184     F2 28 69 FC | 	wrlong	##1684, objptr
13188     7A 00 00 FF 
1318c     54 E4 85 F1 | 	sub	objptr, ##62548
13190     07 00 00 FF 
13194     72 EB 85 F1 | 	sub	ptr__dat__, ##3954
13198                 | LR__1578
13198     7A 00 00 FF 
1319c     50 E4 05 F1 | 	add	objptr, ##62544
131a0     F2 1E 62 FC | 	wrlong	local01, objptr
131a4     24 00 00 FF 
131a8     40 E4 85 F1 | 	sub	objptr, ##18496
131ac     F2 12 02 FB | 	rdlong	arg01, objptr
131b0     04 E4 85 F1 | 	sub	objptr, #4
131b4     F2 14 02 FB | 	rdlong	arg02, objptr
131b8     56 00 00 FF 
131bc     0C E4 85 F1 | 	sub	objptr, ##44044
131c0     B4 40 B0 FD | 	call	#_hg010b_spin2_cls
131c4     3F 01 00 FF 
131c8     1D 12 06 F6 | 	mov	arg01, ##@LR__4597
131cc                 | ' 
131cc                 | ' write(text)
131cc     64 43 B0 FD | 	call	#_hg010b_spin2_write
131d0                 | ' crlf
131d0     C0 44 B0 FD | 	call	#_hg010b_spin2_crlf
131d4     10 00 00 FF 
131d8     10 EB 05 F1 | 	add	ptr__dat__, ##8464
131dc     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
131e0     10 00 00 FF 
131e4     10 EB 85 F1 | 	sub	ptr__dat__, ##8464
131e8                 | ' 
131e8                 | ' write(text)
131e8     48 43 B0 FD | 	call	#_hg010b_spin2_write
131ec                 | ' crlf
131ec     A4 44 B0 FD | 	call	#_hg010b_spin2_crlf
131f0     78 00 00 FF 
131f4     B0 E5 05 F1 | 	add	objptr, ##61872
131f8     F2 12 02 FB | 	rdlong	arg01, objptr
131fc     78 00 00 FF 
13200     B0 E5 85 F1 | 	sub	objptr, ##61872
13204                 | ' 
13204                 | ' write(text)
13204     2C 43 B0 FD | 	call	#_hg010b_spin2_write
13208                 | ' crlf
13208     88 44 B0 FD | 	call	#_hg010b_spin2_crlf
1320c     A7 F0 03 F6 | 	mov	ptra, fp
13210     B2 00 A0 FD | 	call	#popregs_
13214                 | _do_mode_ret
13214     2D 00 64 FD | 	ret
13218                 | 
13218                 | ' 
13218                 | ' 
13218                 | ' 
13218                 | ' sub do_pinwrite
13218                 | _do_pinwrite
13218     01 4A 05 F6 | 	mov	COUNT_, #1
1321c     A8 00 A0 FD | 	call	#pushregs_
13220     18 F0 07 F1 | 	add	ptra, #24
13224     9C 5F BF FD | 	call	#_pop
13228     FD 14 02 F6 | 	mov	arg02, result1
1322c     FE 12 02 F6 | 	mov	arg01, result2
13230     FF 1E 02 F6 | 	mov	local01, result3
13234     A7 14 62 FC | 	wrlong	arg02, fp
13238     04 4E 05 F1 | 	add	fp, #4
1323c     A7 12 62 FC | 	wrlong	arg01, fp
13240     04 4E 05 F1 | 	add	fp, #4
13244     A7 1E 62 FC | 	wrlong	local01, fp
13248     08 4E 85 F1 | 	sub	fp, #8
1324c     74 5F BF FD | 	call	#_pop
13250     FF 1E 02 F6 | 	mov	local01, result3
13254     0C 4E 05 F1 | 	add	fp, #12
13258     A7 FA 61 FC | 	wrlong	result1, fp
1325c     04 4E 05 F1 | 	add	fp, #4
13260     A7 FC 61 FC | 	wrlong	result2, fp
13264     04 4E 05 F1 | 	add	fp, #4
13268     A7 1E 62 FC | 	wrlong	local01, fp
1326c     08 4E 85 F1 | 	sub	fp, #8
13270     A7 12 02 F6 | 	mov	arg01, fp
13274     0C 4E 85 F1 | 	sub	fp, #12
13278     D8 D3 BF FD | 	call	#_converttoint
1327c     FD 1E 02 F6 | 	mov	local01, result1
13280     A7 12 02 F6 | 	mov	arg01, fp
13284     CC D3 BF FD | 	call	#_converttoint
13288     FD 14 02 F6 | 	mov	arg02, result1
1328c     0F 13 02 F6 | 	mov	arg01, local01
13290     7C 54 B0 FD | 	call	#__system___pinwrite
13294     A7 F0 03 F6 | 	mov	ptra, fp
13298     B2 00 A0 FD | 	call	#popregs_
1329c                 | _do_pinwrite_ret
1329c     2D 00 64 FD | 	ret
132a0                 | 
132a0                 | ' 
132a0                 | ' sub do_pinfloat
132a0                 | _do_pinfloat
132a0     00 4A 05 F6 | 	mov	COUNT_, #0
132a4     A8 00 A0 FD | 	call	#pushregs_
132a8     0C F0 07 F1 | 	add	ptra, #12
132ac     14 5F BF FD | 	call	#_pop
132b0     A7 FA 61 FC | 	wrlong	result1, fp
132b4     04 4E 05 F1 | 	add	fp, #4
132b8     A7 FC 61 FC | 	wrlong	result2, fp
132bc     04 4E 05 F1 | 	add	fp, #4
132c0     A7 FE 61 FC | 	wrlong	result3, fp
132c4     08 4E 85 F1 | 	sub	fp, #8
132c8     A7 12 02 F6 | 	mov	arg01, fp
132cc     84 D3 BF FD | 	call	#_converttoint
132d0     50 FA 61 FD | 	fltl	result1
132d4     A7 F0 03 F6 | 	mov	ptra, fp
132d8     B2 00 A0 FD | 	call	#popregs_
132dc                 | _do_pinfloat_ret
132dc     2D 00 64 FD | 	ret
132e0                 | 
132e0                 | ' 
132e0                 | ' sub do_pinlo
132e0                 | _do_pinlo
132e0     00 4A 05 F6 | 	mov	COUNT_, #0
132e4     A8 00 A0 FD | 	call	#pushregs_
132e8     0C F0 07 F1 | 	add	ptra, #12
132ec     D4 5E BF FD | 	call	#_pop
132f0     A7 FA 61 FC | 	wrlong	result1, fp
132f4     04 4E 05 F1 | 	add	fp, #4
132f8     A7 FC 61 FC | 	wrlong	result2, fp
132fc     04 4E 05 F1 | 	add	fp, #4
13300     A7 FE 61 FC | 	wrlong	result3, fp
13304     08 4E 85 F1 | 	sub	fp, #8
13308     A7 12 02 F6 | 	mov	arg01, fp
1330c     44 D3 BF FD | 	call	#_converttoint
13310     58 FA 61 FD | 	drvl	result1
13314     A7 F0 03 F6 | 	mov	ptra, fp
13318     B2 00 A0 FD | 	call	#popregs_
1331c                 | _do_pinlo_ret
1331c     2D 00 64 FD | 	ret
13320                 | 
13320                 | ' 
13320                 | ' sub do_pinhi
13320                 | _do_pinhi
13320     00 4A 05 F6 | 	mov	COUNT_, #0
13324     A8 00 A0 FD | 	call	#pushregs_
13328     0C F0 07 F1 | 	add	ptra, #12
1332c     94 5E BF FD | 	call	#_pop
13330     A7 FA 61 FC | 	wrlong	result1, fp
13334     04 4E 05 F1 | 	add	fp, #4
13338     A7 FC 61 FC | 	wrlong	result2, fp
1333c     04 4E 05 F1 | 	add	fp, #4
13340     A7 FE 61 FC | 	wrlong	result3, fp
13344     08 4E 85 F1 | 	sub	fp, #8
13348     A7 12 02 F6 | 	mov	arg01, fp
1334c     04 D3 BF FD | 	call	#_converttoint
13350     59 FA 61 FD | 	drvh	result1
13354     A7 F0 03 F6 | 	mov	ptra, fp
13358     B2 00 A0 FD | 	call	#popregs_
1335c                 | _do_pinhi_ret
1335c     2D 00 64 FD | 	ret
13360                 | 
13360                 | ' 
13360                 | ' sub do_pintoggle
13360                 | _do_pintoggle
13360     00 4A 05 F6 | 	mov	COUNT_, #0
13364     A8 00 A0 FD | 	call	#pushregs_
13368     0C F0 07 F1 | 	add	ptra, #12
1336c     54 5E BF FD | 	call	#_pop
13370     A7 FA 61 FC | 	wrlong	result1, fp
13374     04 4E 05 F1 | 	add	fp, #4
13378     A7 FC 61 FC | 	wrlong	result2, fp
1337c     04 4E 05 F1 | 	add	fp, #4
13380     A7 FE 61 FC | 	wrlong	result3, fp
13384     08 4E 85 F1 | 	sub	fp, #8
13388     A7 12 02 F6 | 	mov	arg01, fp
1338c     C4 D2 BF FD | 	call	#_converttoint
13390     5F FA 61 FD | 	drvnot	result1
13394     A7 F0 03 F6 | 	mov	ptra, fp
13398     B2 00 A0 FD | 	call	#popregs_
1339c                 | _do_pintoggle_ret
1339c     2D 00 64 FD | 	ret
133a0                 | 
133a0                 | ' 
133a0                 | ' 
133a0                 | ' sub do_pinstart
133a0                 | _do_pinstart
133a0     03 4A 05 F6 | 	mov	COUNT_, #3
133a4     A8 00 A0 FD | 	call	#pushregs_
133a8     30 F0 07 F1 | 	add	ptra, #48
133ac     14 5E BF FD | 	call	#_pop
133b0     FD 16 02 F6 | 	mov	arg03, result1
133b4     FE 14 02 F6 | 	mov	arg02, result2
133b8     FF 18 02 F6 | 	mov	arg04, result3
133bc     A7 16 62 FC | 	wrlong	arg03, fp
133c0     04 4E 05 F1 | 	add	fp, #4
133c4     A7 14 62 FC | 	wrlong	arg02, fp
133c8     04 4E 05 F1 | 	add	fp, #4
133cc     A7 18 62 FC | 	wrlong	arg04, fp
133d0     08 4E 85 F1 | 	sub	fp, #8
133d4     EC 5D BF FD | 	call	#_pop
133d8     FD 16 02 F6 | 	mov	arg03, result1
133dc     FE 14 02 F6 | 	mov	arg02, result2
133e0     FF 18 02 F6 | 	mov	arg04, result3
133e4     0C 4E 05 F1 | 	add	fp, #12
133e8     A7 16 62 FC | 	wrlong	arg03, fp
133ec     04 4E 05 F1 | 	add	fp, #4
133f0     A7 14 62 FC | 	wrlong	arg02, fp
133f4     04 4E 05 F1 | 	add	fp, #4
133f8     A7 18 62 FC | 	wrlong	arg04, fp
133fc     14 4E 85 F1 | 	sub	fp, #20
13400     C0 5D BF FD | 	call	#_pop
13404     FD 16 02 F6 | 	mov	arg03, result1
13408     FE 14 02 F6 | 	mov	arg02, result2
1340c     FF 18 02 F6 | 	mov	arg04, result3
13410     18 4E 05 F1 | 	add	fp, #24
13414     A7 16 62 FC | 	wrlong	arg03, fp
13418     04 4E 05 F1 | 	add	fp, #4
1341c     A7 14 62 FC | 	wrlong	arg02, fp
13420     04 4E 05 F1 | 	add	fp, #4
13424     A7 18 62 FC | 	wrlong	arg04, fp
13428     20 4E 85 F1 | 	sub	fp, #32
1342c     94 5D BF FD | 	call	#_pop
13430     FF 16 02 F6 | 	mov	arg03, result3
13434     24 4E 05 F1 | 	add	fp, #36
13438     A7 FA 61 FC | 	wrlong	result1, fp
1343c     04 4E 05 F1 | 	add	fp, #4
13440     A7 FC 61 FC | 	wrlong	result2, fp
13444     04 4E 05 F1 | 	add	fp, #4
13448     A7 16 62 FC | 	wrlong	arg03, fp
1344c     08 4E 85 F1 | 	sub	fp, #8
13450     A7 12 02 F6 | 	mov	arg01, fp
13454     24 4E 85 F1 | 	sub	fp, #36
13458     F8 D1 BF FD | 	call	#_converttoint
1345c     FD 1E 02 F6 | 	mov	local01, result1
13460     18 4E 05 F1 | 	add	fp, #24
13464     A7 12 02 F6 | 	mov	arg01, fp
13468     18 4E 85 F1 | 	sub	fp, #24
1346c     E4 D1 BF FD | 	call	#_converttoint
13470     FD 20 02 F6 | 	mov	local02, result1
13474     0C 4E 05 F1 | 	add	fp, #12
13478     A7 12 02 F6 | 	mov	arg01, fp
1347c     0C 4E 85 F1 | 	sub	fp, #12
13480     D0 D1 BF FD | 	call	#_converttoint
13484     FD 22 02 F6 | 	mov	local03, result1
13488     A7 12 02 F6 | 	mov	arg01, fp
1348c     C4 D1 BF FD | 	call	#_converttoint
13490     40 1E 62 FD | 	dirl	local01
13494     0F 21 02 FC | 	wrpin	local02, local01
13498     0F 23 12 FC | 	wxpin	local03, local01
1349c     0F FB 21 FC | 	wypin	result1, local01
134a0     41 1E 62 FD | 	dirh	local01
134a4     A7 F0 03 F6 | 	mov	ptra, fp
134a8     B2 00 A0 FD | 	call	#popregs_
134ac                 | _do_pinstart_ret
134ac     2D 00 64 FD | 	ret
134b0                 | 
134b0                 | ' 
134b0                 | ' 
134b0                 | ' sub do_wrpin
134b0                 | _do_wrpin
134b0     01 4A 05 F6 | 	mov	COUNT_, #1
134b4     A8 00 A0 FD | 	call	#pushregs_
134b8     18 F0 07 F1 | 	add	ptra, #24
134bc     04 5D BF FD | 	call	#_pop
134c0     FD 14 02 F6 | 	mov	arg02, result1
134c4     FE 12 02 F6 | 	mov	arg01, result2
134c8     FF 1E 02 F6 | 	mov	local01, result3
134cc     A7 14 62 FC | 	wrlong	arg02, fp
134d0     04 4E 05 F1 | 	add	fp, #4
134d4     A7 12 62 FC | 	wrlong	arg01, fp
134d8     04 4E 05 F1 | 	add	fp, #4
134dc     A7 1E 62 FC | 	wrlong	local01, fp
134e0     08 4E 85 F1 | 	sub	fp, #8
134e4     DC 5C BF FD | 	call	#_pop
134e8     FF 1E 02 F6 | 	mov	local01, result3
134ec     0C 4E 05 F1 | 	add	fp, #12
134f0     A7 FA 61 FC | 	wrlong	result1, fp
134f4     04 4E 05 F1 | 	add	fp, #4
134f8     A7 FC 61 FC | 	wrlong	result2, fp
134fc     04 4E 05 F1 | 	add	fp, #4
13500     A7 1E 62 FC | 	wrlong	local01, fp
13504     08 4E 85 F1 | 	sub	fp, #8
13508     A7 12 02 F6 | 	mov	arg01, fp
1350c     0C 4E 85 F1 | 	sub	fp, #12
13510     40 D1 BF FD | 	call	#_converttoint
13514     FD 1E 02 F6 | 	mov	local01, result1
13518     A7 12 02 F6 | 	mov	arg01, fp
1351c     34 D1 BF FD | 	call	#_converttoint
13520     0F FB 01 FC | 	wrpin	result1, local01
13524     A7 F0 03 F6 | 	mov	ptra, fp
13528     B2 00 A0 FD | 	call	#popregs_
1352c                 | _do_wrpin_ret
1352c     2D 00 64 FD | 	ret
13530                 | 
13530                 | ' 
13530                 | ' sub do_wxpin
13530                 | _do_wxpin
13530     01 4A 05 F6 | 	mov	COUNT_, #1
13534     A8 00 A0 FD | 	call	#pushregs_
13538     18 F0 07 F1 | 	add	ptra, #24
1353c     84 5C BF FD | 	call	#_pop
13540     FD 14 02 F6 | 	mov	arg02, result1
13544     FE 12 02 F6 | 	mov	arg01, result2
13548     FF 1E 02 F6 | 	mov	local01, result3
1354c     A7 14 62 FC | 	wrlong	arg02, fp
13550     04 4E 05 F1 | 	add	fp, #4
13554     A7 12 62 FC | 	wrlong	arg01, fp
13558     04 4E 05 F1 | 	add	fp, #4
1355c     A7 1E 62 FC | 	wrlong	local01, fp
13560     08 4E 85 F1 | 	sub	fp, #8
13564     5C 5C BF FD | 	call	#_pop
13568     FF 1E 02 F6 | 	mov	local01, result3
1356c     0C 4E 05 F1 | 	add	fp, #12
13570     A7 FA 61 FC | 	wrlong	result1, fp
13574     04 4E 05 F1 | 	add	fp, #4
13578     A7 FC 61 FC | 	wrlong	result2, fp
1357c     04 4E 05 F1 | 	add	fp, #4
13580     A7 1E 62 FC | 	wrlong	local01, fp
13584     08 4E 85 F1 | 	sub	fp, #8
13588     A7 12 02 F6 | 	mov	arg01, fp
1358c     0C 4E 85 F1 | 	sub	fp, #12
13590     C0 D0 BF FD | 	call	#_converttoint
13594     FD 1E 02 F6 | 	mov	local01, result1
13598     A7 12 02 F6 | 	mov	arg01, fp
1359c     B4 D0 BF FD | 	call	#_converttoint
135a0     0F FB 11 FC | 	wxpin	result1, local01
135a4     A7 F0 03 F6 | 	mov	ptra, fp
135a8     B2 00 A0 FD | 	call	#popregs_
135ac                 | _do_wxpin_ret
135ac     2D 00 64 FD | 	ret
135b0                 | 
135b0                 | ' 
135b0                 | ' sub do_wypin
135b0                 | _do_wypin
135b0     01 4A 05 F6 | 	mov	COUNT_, #1
135b4     A8 00 A0 FD | 	call	#pushregs_
135b8     18 F0 07 F1 | 	add	ptra, #24
135bc     04 5C BF FD | 	call	#_pop
135c0     FD 14 02 F6 | 	mov	arg02, result1
135c4     FE 12 02 F6 | 	mov	arg01, result2
135c8     FF 1E 02 F6 | 	mov	local01, result3
135cc     A7 14 62 FC | 	wrlong	arg02, fp
135d0     04 4E 05 F1 | 	add	fp, #4
135d4     A7 12 62 FC | 	wrlong	arg01, fp
135d8     04 4E 05 F1 | 	add	fp, #4
135dc     A7 1E 62 FC | 	wrlong	local01, fp
135e0     08 4E 85 F1 | 	sub	fp, #8
135e4     DC 5B BF FD | 	call	#_pop
135e8     FF 1E 02 F6 | 	mov	local01, result3
135ec     0C 4E 05 F1 | 	add	fp, #12
135f0     A7 FA 61 FC | 	wrlong	result1, fp
135f4     04 4E 05 F1 | 	add	fp, #4
135f8     A7 FC 61 FC | 	wrlong	result2, fp
135fc     04 4E 05 F1 | 	add	fp, #4
13600     A7 1E 62 FC | 	wrlong	local01, fp
13604     08 4E 85 F1 | 	sub	fp, #8
13608     A7 12 02 F6 | 	mov	arg01, fp
1360c     0C 4E 85 F1 | 	sub	fp, #12
13610     40 D0 BF FD | 	call	#_converttoint
13614     FD 1E 02 F6 | 	mov	local01, result1
13618     A7 12 02 F6 | 	mov	arg01, fp
1361c     34 D0 BF FD | 	call	#_converttoint
13620     0F FB 21 FC | 	wypin	result1, local01
13624     A7 F0 03 F6 | 	mov	ptra, fp
13628     B2 00 A0 FD | 	call	#popregs_
1362c                 | _do_wypin_ret
1362c     2D 00 64 FD | 	ret
13630                 | 
13630                 | ' 
13630                 | ' sub do_position
13630                 | _do_position
13630     01 4A 05 F6 | 	mov	COUNT_, #1
13634     A8 00 A0 FD | 	call	#pushregs_
13638     18 F0 07 F1 | 	add	ptra, #24
1363c     84 5B BF FD | 	call	#_pop
13640     FD 14 02 F6 | 	mov	arg02, result1
13644     FE 12 02 F6 | 	mov	arg01, result2
13648     FF 1E 02 F6 | 	mov	local01, result3
1364c     A7 14 62 FC | 	wrlong	arg02, fp
13650     04 4E 05 F1 | 	add	fp, #4
13654     A7 12 62 FC | 	wrlong	arg01, fp
13658     04 4E 05 F1 | 	add	fp, #4
1365c     A7 1E 62 FC | 	wrlong	local01, fp
13660     08 4E 85 F1 | 	sub	fp, #8
13664     5C 5B BF FD | 	call	#_pop
13668     FF 1E 02 F6 | 	mov	local01, result3
1366c     0C 4E 05 F1 | 	add	fp, #12
13670     A7 FA 61 FC | 	wrlong	result1, fp
13674     04 4E 05 F1 | 	add	fp, #4
13678     A7 FC 61 FC | 	wrlong	result2, fp
1367c     04 4E 05 F1 | 	add	fp, #4
13680     A7 1E 62 FC | 	wrlong	local01, fp
13684     08 4E 85 F1 | 	sub	fp, #8
13688     A7 12 02 F6 | 	mov	arg01, fp
1368c     0C 4E 85 F1 | 	sub	fp, #12
13690     C0 CF BF FD | 	call	#_converttoint
13694     FD 1E 02 F6 | 	mov	local01, result1
13698     A7 12 02 F6 | 	mov	arg01, fp
1369c     B4 CF BF FD | 	call	#_converttoint
136a0     FD 14 02 F6 | 	mov	arg02, result1
136a4     0F 13 02 F6 | 	mov	arg01, local01
136a8     24 3B B0 FD | 	call	#_hg010b_spin2_setcursorpos
136ac     A7 F0 03 F6 | 	mov	ptra, fp
136b0     B2 00 A0 FD | 	call	#popregs_
136b4                 | _do_position_ret
136b4     2D 00 64 FD | 	ret
136b8                 | 
136b8                 | ' 
136b8                 | ' sub do_waitms
136b8                 | _do_waitms
136b8     01 4A 05 F6 | 	mov	COUNT_, #1
136bc     A8 00 A0 FD | 	call	#pushregs_
136c0     18 F0 07 F1 | 	add	ptra, #24
136c4     FC 5A BF FD | 	call	#_pop
136c8     A7 FA 61 FC | 	wrlong	result1, fp
136cc     04 4E 05 F1 | 	add	fp, #4
136d0     A7 FC 61 FC | 	wrlong	result2, fp
136d4     04 4E 05 F1 | 	add	fp, #4
136d8     A7 FE 61 FC | 	wrlong	result3, fp
136dc                 | ' 
136dc                 | ' t1=pop() 'value
136dc                 | ' 
136dc                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then t=t1.result.iresult else t=converttoint(t1)
136dc     08 4E 85 F1 | 	sub	fp, #8
136e0     1C FE 0D F2 | 	cmp	result3, #28 wz
136e4     08 4E 05 51 |  if_ne	add	fp, #8
136e8     A7 12 02 5B |  if_ne	rdlong	arg01, fp
136ec     08 4E 85 51 |  if_ne	sub	fp, #8
136f0     1D 12 0E 52 |  if_ne	cmp	arg01, #29 wz
136f4     A7 12 02 AB |  if_e	rdlong	arg01, fp
136f8     0C 4E 05 A1 |  if_e	add	fp, #12
136fc     A7 12 62 AC |  if_e	wrlong	arg01, fp
13700     0C 4E 85 A1 |  if_e	sub	fp, #12
13704     14 00 90 AD |  if_e	jmp	#LR__1580
13708     A7 12 02 F6 | 	mov	arg01, fp
1370c     44 CF BF FD | 	call	#_converttoint
13710     0C 4E 05 F1 | 	add	fp, #12
13714     A7 FA 61 FC | 	wrlong	result1, fp
13718     0C 4E 85 F1 | 	sub	fp, #12
1371c                 | LR__1580
1371c                 | ' if t<0 then return
1371c     0C 4E 05 F1 | 	add	fp, #12
13720     A7 12 02 FB | 	rdlong	arg01, fp
13724     0C 4E 85 F1 | 	sub	fp, #12
13728     00 12 56 F2 | 	cmps	arg01, #0 wc
1372c     B8 00 90 CD |  if_b	jmp	#LR__1585
13730                 | ' if t < 5000 then 
13730     0C 4E 05 F1 | 	add	fp, #12
13734     A7 12 02 FB | 	rdlong	arg01, fp
13738     0C 4E 85 F1 | 	sub	fp, #12
1373c     09 00 00 FF 
13740     88 13 56 F2 | 	cmps	arg01, ##5000 wc
13744     14 00 90 3D |  if_ae	jmp	#LR__1581
13748     0C 4E 05 F1 | 	add	fp, #12
1374c     A7 12 02 FB | 	rdlong	arg01, fp
13750     0C 4E 85 F1 | 	sub	fp, #12
13754     F8 50 B0 FD | 	call	#__system___waitms
13758     8C 00 90 FD | 	jmp	#LR__1584
1375c                 | LR__1581
1375c     10 4E 05 F1 | 	add	fp, #16
13760     A7 02 68 FC | 	wrlong	#1, fp
13764     04 4E 85 F1 | 	sub	fp, #4
13768     A7 12 02 FB | 	rdlong	arg01, fp
1376c     09 13 52 F6 | 	abs	arg01, arg01 wc
13770     09 00 00 FF 
13774     88 13 16 FD | 	qdiv	arg01, ##5000
13778                 | '   for i=1 to t/5000
13778     0C 4E 85 F1 | 	sub	fp, #12
1377c     18 1E 62 FD | 	getqx	local01
13780     0F 1F 82 F6 | 	negc	local01, local01
13784     01 1E 06 F1 | 	add	local01, #1
13788                 | LR__1582
13788     10 4E 05 F1 | 	add	fp, #16
1378c     A7 12 02 FB | 	rdlong	arg01, fp
13790     10 4E 85 F1 | 	sub	fp, #16
13794     0F 13 52 F2 | 	cmps	arg01, local01 wc
13798     28 00 90 3D |  if_ae	jmp	#LR__1583
1379c     0C 4E 05 F1 | 	add	fp, #12
137a0     A7 12 02 FB | 	rdlong	arg01, fp
137a4     0C 4E 85 F1 | 	sub	fp, #12
137a8     A4 50 B0 FD | 	call	#__system___waitms
137ac     10 4E 05 F1 | 	add	fp, #16
137b0     A7 12 02 FB | 	rdlong	arg01, fp
137b4     01 12 06 F1 | 	add	arg01, #1
137b8     A7 12 62 FC | 	wrlong	arg01, fp
137bc     10 4E 85 F1 | 	sub	fp, #16
137c0     C4 FF 9F FD | 	jmp	#LR__1582
137c4                 | LR__1583
137c4     0C 4E 05 F1 | 	add	fp, #12
137c8     A7 1E 02 FB | 	rdlong	local01, fp
137cc     0F 1F 52 F6 | 	abs	local01, local01 wc
137d0     09 00 00 FF 
137d4     88 1F 16 FD | 	qdiv	local01, ##5000
137d8     0C 4E 85 F1 | 	sub	fp, #12
137dc     19 1E 62 FD | 	getqy	local01
137e0     0F 13 82 F6 | 	negc	arg01, local01
137e4     68 50 B0 FD | 	call	#__system___waitms
137e8                 | LR__1584
137e8                 | LR__1585
137e8     A7 F0 03 F6 | 	mov	ptra, fp
137ec     B2 00 A0 FD | 	call	#popregs_
137f0                 | _do_waitms_ret
137f0     2D 00 64 FD | 	ret
137f4                 | 
137f4                 | ' 
137f4                 | ' sub do_waitvbl
137f4                 | _do_waitvbl
137f4     01 12 06 F6 | 	mov	arg01, #1
137f8     0C 3A B0 FD | 	call	#_hg010b_spin2_waitvbl
137fc                 | _do_waitvbl_ret
137fc     2D 00 64 FD | 	ret
13800                 | 
13800                 | ' 
13800                 | ' sub do_waitclock
13800                 | _do_waitclock
13800     7A 00 00 FF 
13804     48 E4 05 F1 | 	add	objptr, ##62536
13808     F2 00 02 FB | 	rdlong	_var01, objptr
1380c                 | ' c=hkcnt
1380c                 | ' do: loop until hkcnt<>c
1380c                 | LR__1590
1380c     F2 02 02 FB | 	rdlong	_var02, objptr
13810     00 03 0A F2 | 	cmp	_var02, _var01 wz
13814     F4 FF 9F AD |  if_e	jmp	#LR__1590
13818     7A 00 00 FF 
1381c     48 E4 85 F1 | 	sub	objptr, ##62536
13820                 | _do_waitclock_ret
13820     2D 00 64 FD | 	ret
13824                 | 
13824                 | ' 
13824                 | ' sub do_dir
13824                 | _do_dir
13824     03 4A 05 F6 | 	mov	COUNT_, #3
13828     A8 00 A0 FD | 	call	#pushregs_
1382c     3F 01 00 FF 
13830     1E 12 06 F6 | 	mov	arg01, ##@LR__4598
13834     B0 53 B0 FD | 	call	#__system___chdir
13838                 | ' chdir("/sd/bas")       ' set working directory
13838                 | ' print "Working directory: "; currentdir$ 
13838     00 12 06 F6 | 	mov	arg01, #0
1383c     18 A5 B0 FD | 	call	#__system___getiolock_0416
13840     FD 12 02 F6 | 	mov	arg01, result1
13844     14 4D B0 FD | 	call	#__system___lockmem
13848     3F 01 00 FF 
1384c     26 14 06 F6 | 	mov	arg02, ##@LR__4599
13850     00 12 06 F6 | 	mov	arg01, #0
13854     00 16 06 F6 | 	mov	arg03, #0
13858     F0 59 B0 FD | 	call	#__system___basic_print_string
1385c     71 00 00 FF 
13860     68 E4 05 F1 | 	add	objptr, ##57960
13864     F2 14 02 FB | 	rdlong	arg02, objptr
13868     71 00 00 FF 
1386c     68 E4 85 F1 | 	sub	objptr, ##57960
13870     00 12 06 F6 | 	mov	arg01, #0
13874     00 16 06 F6 | 	mov	arg03, #0
13878     D0 59 B0 FD | 	call	#__system___basic_print_string
1387c     00 12 06 F6 | 	mov	arg01, #0
13880     0A 14 06 F6 | 	mov	arg02, #10
13884     00 16 06 F6 | 	mov	arg03, #0
13888     68 59 B0 FD | 	call	#__system___basic_print_char
1388c     00 12 06 F6 | 	mov	arg01, #0
13890     C4 A4 B0 FD | 	call	#__system___getiolock_0416
13894     FD 00 68 FC | 	wrlong	#0, result1
13898     3F 01 00 FF 
1389c     3A 12 06 F6 | 	mov	arg01, ##@LR__4600
138a0     10 14 06 F6 | 	mov	arg02, #16
138a4     00 A5 B0 FD | 	call	#__system___basic_dir
138a8     FD 1E 02 F6 | 	mov	local01, result1
138ac                 | ' 
138ac                 | ' filename=dir$("*", fbDirectory)
138ac                 | ' while filename <> "" and filename <> nil
138ac                 | LR__1600
138ac     00 20 06 F6 | 	mov	local02, #0
138b0     3F 01 00 FF 
138b4     3C 14 06 F6 | 	mov	arg02, ##@LR__4601
138b8     0F 13 02 F6 | 	mov	arg01, local01
138bc     C4 4C B0 FD | 	call	#__system___string_cmp
138c0     00 FA 0D F2 | 	cmp	result1, #0 wz
138c4     00 20 26 56 |  if_ne	not	local02, #0
138c8     00 22 06 F6 | 	mov	local03, #0
138cc     0F 13 02 F6 | 	mov	arg01, local01
138d0     00 14 06 F6 | 	mov	arg02, #0
138d4     AC 4C B0 FD | 	call	#__system___string_cmp
138d8     00 FA 0D F2 | 	cmp	result1, #0 wz
138dc     00 22 26 56 |  if_ne	not	local03, #0
138e0     11 21 CA F7 | 	test	local02, local03 wz
138e4     64 00 90 AD |  if_e	jmp	#LR__1601
138e8                 | '   print "[dir] ";filename
138e8     00 12 06 F6 | 	mov	arg01, #0
138ec     68 A4 B0 FD | 	call	#__system___getiolock_0416
138f0     FD 12 02 F6 | 	mov	arg01, result1
138f4     64 4C B0 FD | 	call	#__system___lockmem
138f8     3F 01 00 FF 
138fc     3D 14 06 F6 | 	mov	arg02, ##@LR__4602
13900     00 12 06 F6 | 	mov	arg01, #0
13904     00 16 06 F6 | 	mov	arg03, #0
13908     40 59 B0 FD | 	call	#__system___basic_print_string
1390c     00 12 06 F6 | 	mov	arg01, #0
13910     0F 15 02 F6 | 	mov	arg02, local01
13914     00 16 06 F6 | 	mov	arg03, #0
13918     30 59 B0 FD | 	call	#__system___basic_print_string
1391c     00 12 06 F6 | 	mov	arg01, #0
13920     0A 14 06 F6 | 	mov	arg02, #10
13924     00 16 06 F6 | 	mov	arg03, #0
13928     C8 58 B0 FD | 	call	#__system___basic_print_char
1392c     00 12 06 F6 | 	mov	arg01, #0
13930     24 A4 B0 FD | 	call	#__system___getiolock_0416
13934     FD 00 68 FC | 	wrlong	#0, result1
13938     00 12 06 F6 | 	mov	arg01, #0
1393c     00 14 06 F6 | 	mov	arg02, #0
13940     64 A4 B0 FD | 	call	#__system___basic_dir
13944     FD 1E 02 F6 | 	mov	local01, result1
13948     60 FF 9F FD | 	jmp	#LR__1600
1394c                 | LR__1601
1394c     3F 01 00 FF 
13950     44 12 06 F6 | 	mov	arg01, ##@LR__4603
13954     21 14 06 F6 | 	mov	arg02, #33
13958     4C A4 B0 FD | 	call	#__system___basic_dir
1395c     FD 1E 02 F6 | 	mov	local01, result1
13960                 | ' 
13960                 | ' filename = dir$("*", fbNormal )  ' start scan for all files and directories
13960                 | ' do while filename <> "" and filename <> nil
13960                 | LR__1602
13960     00 20 06 F6 | 	mov	local02, #0
13964     3F 01 00 FF 
13968     46 14 06 F6 | 	mov	arg02, ##@LR__4604
1396c     0F 13 02 F6 | 	mov	arg01, local01
13970     10 4C B0 FD | 	call	#__system___string_cmp
13974     00 FA 0D F2 | 	cmp	result1, #0 wz
13978     00 20 26 56 |  if_ne	not	local02, #0
1397c     00 22 06 F6 | 	mov	local03, #0
13980     0F 13 02 F6 | 	mov	arg01, local01
13984     00 14 06 F6 | 	mov	arg02, #0
13988     F8 4B B0 FD | 	call	#__system___string_cmp
1398c     00 FA 0D F2 | 	cmp	result1, #0 wz
13990     00 22 26 56 |  if_ne	not	local03, #0
13994     11 21 CA F7 | 	test	local02, local03 wz
13998     4C 01 90 AD |  if_e	jmp	#LR__1606
1399c                 | '   print filename
1399c     00 12 06 F6 | 	mov	arg01, #0
139a0     B4 A3 B0 FD | 	call	#__system___getiolock_0416
139a4     FD 12 02 F6 | 	mov	arg01, result1
139a8     B0 4B B0 FD | 	call	#__system___lockmem
139ac     00 12 06 F6 | 	mov	arg01, #0
139b0     0F 15 02 F6 | 	mov	arg02, local01
139b4     00 16 06 F6 | 	mov	arg03, #0
139b8     90 58 B0 FD | 	call	#__system___basic_print_string
139bc     00 12 06 F6 | 	mov	arg01, #0
139c0     0A 14 06 F6 | 	mov	arg02, #10
139c4     00 16 06 F6 | 	mov	arg03, #0
139c8     28 58 B0 FD | 	call	#__system___basic_print_char
139cc     00 12 06 F6 | 	mov	arg01, #0
139d0     84 A3 B0 FD | 	call	#__system___getiolock_0416
139d4     FD 00 68 FC | 	wrlong	#0, result1
139d8     00 12 06 F6 | 	mov	arg01, #0
139dc     00 14 06 F6 | 	mov	arg02, #0
139e0     C4 A3 B0 FD | 	call	#__system___basic_dir
139e4     FD 1E 02 F6 | 	mov	local01, result1
139e8                 | '   filename = dir$()      ' continue scan
139e8                 | '     if v.getcursory()=34 then    'bug, after first break, cursory is always 35
139e8                 | ' return cursor_y
139e8     3A E4 05 F1 | 	add	objptr, #58
139ec     F2 FA C1 FA | 	rdbyte	result1, objptr
139f0     3A E4 85 F1 | 	sub	objptr, #58
139f4     22 FA 0D F2 | 	cmp	result1, #34 wz
139f8     64 FF 9F 5D |  if_ne	jmp	#LR__1602
139fc                 | '     print "-----more, press any key";
139fc     00 12 06 F6 | 	mov	arg01, #0
13a00     54 A3 B0 FD | 	call	#__system___getiolock_0416
13a04     FD 12 02 F6 | 	mov	arg01, result1
13a08     50 4B B0 FD | 	call	#__system___lockmem
13a0c     3F 01 00 FF 
13a10     47 14 06 F6 | 	mov	arg02, ##@LR__4605
13a14     00 12 06 F6 | 	mov	arg01, #0
13a18     00 16 06 F6 | 	mov	arg03, #0
13a1c     2C 58 B0 FD | 	call	#__system___basic_print_string
13a20     00 12 06 F6 | 	mov	arg01, #0
13a24     30 A3 B0 FD | 	call	#__system___getiolock_0416
13a28     FD 00 68 FC | 	wrlong	#0, result1
13a2c                 | '     do 
13a2c                 | LR__1603
13a2c     CC 43 B0 FD | 	call	#_usbnew_spin2_get_key
13a30     00 FA 0D F2 | 	cmp	result1, #0 wz
13a34     F4 FF 9F 5D |  if_ne	jmp	#LR__1603
13a38                 | '     do
13a38                 | LR__1604
13a38     C0 43 B0 FD | 	call	#_usbnew_spin2_get_key
13a3c     00 FA 0D F2 | 	cmp	result1, #0 wz
13a40     F4 FF 9F AD |  if_e	jmp	#LR__1604
13a44                 | '       if keyclick=1 then paula.play(7,keyclick_spl,44100,16384,spl_len) 
13a44     78 00 00 FF 
13a48     B4 E5 05 F1 | 	add	objptr, ##61876
13a4c     F2 20 02 FB | 	rdlong	local02, objptr
13a50     78 00 00 FF 
13a54     B4 E5 85 F1 | 	sub	objptr, ##61876
13a58     01 20 0E F2 | 	cmp	local02, #1 wz
13a5c     3C 00 90 5D |  if_ne	jmp	#LR__1605
13a60     7A 00 00 FF 
13a64     58 E4 05 F1 | 	add	objptr, ##62552
13a68     F2 14 02 FB | 	rdlong	arg02, objptr
13a6c     04 E4 85 F1 | 	sub	objptr, #4
13a70     F2 1A 02 FB | 	rdlong	arg05, objptr
13a74     07 12 06 F6 | 	mov	arg01, #7
13a78     56 00 00 FF 
13a7c     44 16 06 F6 | 	mov	arg03, ##44100
13a80     0E 18 C6 F9 | 	decod	arg04, #14
13a84     01 1C 66 F6 | 	neg	arg06, #1
13a88     6E 00 00 FF 
13a8c     94 E5 85 F1 | 	sub	objptr, ##56724
13a90     90 46 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
13a94     0B 00 00 FF 
13a98     C0 E4 85 F1 | 	sub	objptr, ##5824
13a9c                 | LR__1605
13a9c     00 12 06 F6 | 	mov	arg01, #0
13aa0     23 14 06 F6 | 	mov	arg02, #35
13aa4     28 37 B0 FD | 	call	#_hg010b_spin2_setcursorpos
13aa8                 | '     position 0,35: print "                             ";: position 4,35  
13aa8     00 12 06 F6 | 	mov	arg01, #0
13aac     A8 A2 B0 FD | 	call	#__system___getiolock_0416
13ab0     FD 12 02 F6 | 	mov	arg01, result1
13ab4     A4 4A B0 FD | 	call	#__system___lockmem
13ab8     3F 01 00 FF 
13abc     60 14 06 F6 | 	mov	arg02, ##@LR__4606
13ac0     00 12 06 F6 | 	mov	arg01, #0
13ac4     00 16 06 F6 | 	mov	arg03, #0
13ac8     80 57 B0 FD | 	call	#__system___basic_print_string
13acc     00 12 06 F6 | 	mov	arg01, #0
13ad0     84 A2 B0 FD | 	call	#__system___getiolock_0416
13ad4     FD 00 68 FC | 	wrlong	#0, result1
13ad8     04 12 06 F6 | 	mov	arg01, #4
13adc     23 14 06 F6 | 	mov	arg02, #35
13ae0     EC 36 B0 FD | 	call	#_hg010b_spin2_setcursorpos
13ae4     78 FE 9F FD | 	jmp	#LR__1602
13ae8                 | LR__1606
13ae8     A7 F0 03 F6 | 	mov	ptra, fp
13aec     B2 00 A0 FD | 	call	#popregs_
13af0                 | _do_dir_ret
13af0     2D 00 64 FD | 	ret
13af4                 | 
13af4                 | ' 
13af4                 | ' sub do_if
13af4                 | _do_if
13af4     05 4A 05 F6 | 	mov	COUNT_, #5
13af8     A8 00 A0 FD | 	call	#pushregs_
13afc     C4 56 BF FD | 	call	#_pop
13b00     FD 1E 0A F6 | 	mov	local01, result1 wz
13b04     FE 20 02 F6 | 	mov	local02, result2
13b08     FF 22 02 F6 | 	mov	local03, result3
13b0c                 | ' t1=pop()
13b0c                 | ' ' if uresult=0, jump over else
13b0c                 | ' if t1.result.uresult = 0 then 
13b0c     BC 00 90 5D |  if_ne	jmp	#LR__1612
13b10                 | '   for i=lineptr_e to lineptr-1
13b10     69 00 00 FF 
13b14     54 E4 05 F1 | 	add	objptr, ##53844
13b18     F2 24 02 FB | 	rdlong	local04, objptr
13b1c     04 E4 85 F1 | 	sub	objptr, #4
13b20     F2 26 02 FB | 	rdlong	local05, objptr
13b24     69 00 00 FF 
13b28     50 E4 85 F1 | 	sub	objptr, ##53840
13b2c                 | LR__1610
13b2c     13 25 52 F2 | 	cmps	local04, local05 wc
13b30     78 00 90 3D |  if_ae	jmp	#LR__1611
13b34     12 FF 01 F6 | 	mov	result3, local04
13b38     01 FE 65 F0 | 	shl	result3, #1
13b3c     12 FF 01 F1 | 	add	result3, local04
13b40     02 FE 65 F0 | 	shl	result3, #2
13b44     66 00 00 FF 
13b48     50 E4 05 F1 | 	add	objptr, ##52304
13b4c     F2 FE 01 F1 | 	add	result3, objptr
13b50     FF 1E 02 FB | 	rdlong	local01, result3
13b54     04 FE 05 F1 | 	add	result3, #4
13b58     FF FC 01 FB | 	rdlong	result2, result3
13b5c     12 FF 01 F6 | 	mov	result3, local04
13b60     01 FE 65 F0 | 	shl	result3, #1
13b64     12 FF 01 F1 | 	add	result3, local04
13b68     02 FE 65 F0 | 	shl	result3, #2
13b6c     F2 FE 01 F1 | 	add	result3, objptr
13b70     08 FE 05 F1 | 	add	result3, #8
13b74     FF FE 01 FB | 	rdlong	result3, result3
13b78     FE 20 02 F6 | 	mov	local02, result2
13b7c     FF 22 02 F6 | 	mov	local03, result3
13b80                 | '     t1=compiledline(i)
13b80                 | '     if t1.result_type=token_else then lineptr_e=i : return
13b80     5A 22 0E F2 | 	cmp	local03, #90 wz
13b84     66 00 00 FF 
13b88     50 E4 85 F1 | 	sub	objptr, ##52304
13b8c     69 00 00 AF 
13b90     54 E4 05 A1 |  if_e	add	objptr, ##53844
13b94     F2 24 62 AC |  if_e	wrlong	local04, objptr
13b98     69 00 00 AF 
13b9c     54 E4 85 A1 |  if_e	sub	objptr, ##53844
13ba0     28 00 90 AD |  if_e	jmp	#LR__1613
13ba4     01 24 06 F1 | 	add	local04, #1
13ba8     80 FF 9F FD | 	jmp	#LR__1610
13bac                 | LR__1611
13bac     69 00 00 FF 
13bb0     50 E4 05 F1 | 	add	objptr, ##53840
13bb4     F2 26 02 FB | 	rdlong	local05, objptr
13bb8     01 26 86 F1 | 	sub	local05, #1
13bbc     04 E4 05 F1 | 	add	objptr, #4
13bc0     F2 26 62 FC | 	wrlong	local05, objptr
13bc4     69 00 00 FF 
13bc8     54 E4 85 F1 | 	sub	objptr, ##53844
13bcc                 | LR__1612
13bcc                 | LR__1613
13bcc     A7 F0 03 F6 | 	mov	ptra, fp
13bd0     B2 00 A0 FD | 	call	#popregs_
13bd4                 | _do_if_ret
13bd4     2D 00 64 FD | 	ret
13bd8                 | 
13bd8                 | ' 
13bd8                 | ' sub do_else
13bd8                 | _do_else
13bd8     69 00 00 FF 
13bdc     50 E4 05 F1 | 	add	objptr, ##53840
13be0     F2 00 02 FB | 	rdlong	_var01, objptr
13be4     01 00 86 F1 | 	sub	_var01, #1
13be8     04 E4 05 F1 | 	add	objptr, #4
13bec     F2 00 62 FC | 	wrlong	_var01, objptr
13bf0     69 00 00 FF 
13bf4     54 E4 85 F1 | 	sub	objptr, ##53844
13bf8                 | _do_else_ret
13bf8     2D 00 64 FD | 	ret
13bfc                 | 
13bfc                 | ' 
13bfc                 | ' 
13bfc                 | ' 
13bfc                 | ' sub do_nothing
13bfc                 | _do_nothing
13bfc                 | _do_nothing_ret
13bfc     2D 00 64 FD | 	ret
13c00                 | 
13c00                 | ' 
13c00                 | ' sub do_brun
13c00                 | _do_brun
13c00     08 4A 05 F6 | 	mov	COUNT_, #8
13c04     A8 00 A0 FD | 	call	#pushregs_
13c08     B8 55 BF FD | 	call	#_pop
13c0c     FE 1A 02 F6 | 	mov	arg05, result2
13c10     FF 18 02 F6 | 	mov	arg04, result3
13c14     FD 1E 02 F6 | 	mov	local01, result1
13c18     0D 21 02 F6 | 	mov	local02, arg05
13c1c     0C 23 02 F6 | 	mov	local03, arg04
13c20                 | ' 
13c20                 | ' t1=pop() 
13c20                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
13c20     2B 22 0E F2 | 	cmp	local03, #43 wz
13c24     10 00 90 5D |  if_ne	jmp	#LR__1620
13c28     0F 13 02 F6 | 	mov	arg01, local01
13c2c     9C 86 BF FD | 	call	#_convertstring
13c30     FD 1E 02 F6 | 	mov	local01, result1
13c34     1F 22 06 F6 | 	mov	local03, #31
13c38                 | LR__1620
13c38                 | ' if t1.result_type=result_string then
13c38     1F 22 0E F2 | 	cmp	local03, #31 wz
13c3c     EC 01 90 5D |  if_ne	jmp	#LR__1624
13c40     0F 25 02 F6 | 	mov	local04, local01
13c44                 | '   filename=t1.result.sresult
13c44                 | '   if left$(filename,1)="/" then 
13c44     12 13 02 F6 | 	mov	arg01, local04
13c48     01 14 06 F6 | 	mov	arg02, #1
13c4c     18 69 B0 FD | 	call	#__system__Left_S
13c50     FD 12 02 F6 | 	mov	arg01, result1
13c54     3F 01 00 FF 
13c58     7E 14 06 F6 | 	mov	arg02, ##@LR__4607
13c5c     24 49 B0 FD | 	call	#__system___string_cmp
13c60     00 FA 0D F2 | 	cmp	result1, #0 wz
13c64     12 27 02 A6 |  if_e	mov	local05, local04
13c68     14 00 90 AD |  if_e	jmp	#LR__1621
13c6c     3F 01 00 FF 
13c70     80 12 06 F6 | 	mov	arg01, ##@LR__4608
13c74     12 15 02 F6 | 	mov	arg02, local04
13c78     3C 49 B0 FD | 	call	#__system___string_concat
13c7c     FD 26 02 F6 | 	mov	local05, result1
13c80                 | LR__1621
13c80                 | ' '  if mid$(filename,2,1)=":" then fullfilename=right$(filename,len(filename-3)) ' todo for future: strip c:/
13c80                 | '   open fullfilename for input as #9
13c80     09 12 06 F6 | 	mov	arg01, #9
13c84     13 15 02 F6 | 	mov	arg02, local05
13c88     00 16 06 F6 | 	mov	arg03, #0
13c8c     CC 54 B0 FD | 	call	#__system___basic_open_string
13c90     20 E8 05 F1 | 	add	ptr___system__dat__, #32
13c94     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
13c98     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
13c9c     FD 28 0A F6 | 	mov	local06, result1 wz
13ca0                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
13ca0     8C 00 90 AD |  if_e	jmp	#LR__1622
13ca4     00 12 06 F6 | 	mov	arg01, #0
13ca8     AC A0 B0 FD | 	call	#__system___getiolock_0416
13cac     FD 12 02 F6 | 	mov	arg01, result1
13cb0     A8 48 B0 FD | 	call	#__system___lockmem
13cb4     3F 01 00 FF 
13cb8     89 14 06 F6 | 	mov	arg02, ##@LR__4609
13cbc     00 12 06 F6 | 	mov	arg01, #0
13cc0     00 16 06 F6 | 	mov	arg03, #0
13cc4     84 55 B0 FD | 	call	#__system___basic_print_string
13cc8     00 12 06 F6 | 	mov	arg01, #0
13ccc     14 15 02 F6 | 	mov	arg02, local06
13cd0     00 16 06 F6 | 	mov	arg03, #0
13cd4     0A 18 06 F6 | 	mov	arg04, #10
13cd8     B4 55 B0 FD | 	call	#__system___basic_print_integer
13cdc     3F 01 00 FF 
13ce0     97 14 06 F6 | 	mov	arg02, ##@LR__4610
13ce4     00 12 06 F6 | 	mov	arg01, #0
13ce8     00 16 06 F6 | 	mov	arg03, #0
13cec     5C 55 B0 FD | 	call	#__system___basic_print_string
13cf0     14 13 02 F6 | 	mov	arg01, local06
13cf4     5C 6D B0 FD | 	call	#__system___strerror
13cf8     FD 14 02 F6 | 	mov	arg02, result1
13cfc     00 12 06 F6 | 	mov	arg01, #0
13d00     00 16 06 F6 | 	mov	arg03, #0
13d04     44 55 B0 FD | 	call	#__system___basic_print_string
13d08     00 12 06 F6 | 	mov	arg01, #0
13d0c     0A 14 06 F6 | 	mov	arg02, #10
13d10     00 16 06 F6 | 	mov	arg03, #0
13d14     DC 54 B0 FD | 	call	#__system___basic_print_char
13d18     00 12 06 F6 | 	mov	arg01, #0
13d1c     38 A0 B0 FD | 	call	#__system___getiolock_0416
13d20     FD 00 68 FC | 	wrlong	#0, result1
13d24     09 12 06 F6 | 	mov	arg01, #9
13d28     5C 96 B0 FD | 	call	#__system__close
13d2c     FC 00 90 FD | 	jmp	#LR__1625
13d30                 | LR__1622
13d30     01 2A 06 F6 | 	mov	local07, #1
13d34     00 2C 06 F6 | 	mov	local08, #0
13d38                 | '   do
13d38                 | LR__1623
13d38                 | '     get #9,pos,block(0),1024,r : pos+=r	
13d38     76 00 00 FF 
13d3c     80 E5 05 F1 | 	add	objptr, ##60800
13d40     F2 16 02 F6 | 	mov	arg03, objptr
13d44     76 00 00 FF 
13d48     80 E5 85 F1 | 	sub	objptr, ##60800
13d4c     09 12 06 F6 | 	mov	arg01, #9
13d50     15 15 02 F6 | 	mov	arg02, local07
13d54     0A 18 C6 F9 | 	decod	arg04, #10
13d58     01 1A 06 F6 | 	mov	arg05, #1
13d5c     FC 55 B0 FD | 	call	#__system___basic_get
13d60     FD 28 02 F6 | 	mov	local06, result1
13d64     FD 2A 02 F1 | 	add	local07, result1
13d68     76 00 00 FF 
13d6c     80 E5 05 F1 | 	add	objptr, ##60800
13d70     F2 12 02 F6 | 	mov	arg01, objptr
13d74     16 15 02 F6 | 	mov	arg02, local08
13d78     0A 16 C6 F9 | 	decod	arg03, #10
13d7c     6B 00 00 FF 
13d80     C0 E4 85 F1 | 	sub	objptr, ##54976
13d84     80 3D B0 FD | 	call	#_psram_spin2_write
13d88     0B 00 00 FF 
13d8c     C0 E4 85 F1 | 	sub	objptr, ##5824
13d90     14 2D 02 F1 | 	add	local08, local06
13d94     02 00 00 FF 
13d98     00 28 0E F2 | 	cmp	local06, ##1024 wz
13d9c     E0 03 00 AF 
13da0     00 2C 56 A2 |  if_e	cmps	local08, ##507904 wc
13da4     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1623
13da8     55 00 00 FF 
13dac     D0 E5 05 F1 | 	add	objptr, ##43984
13db0     F2 12 02 FB | 	rdlong	arg01, objptr
13db4     03 12 62 FD | 	cogstop	arg01
13db8     04 E4 05 F1 | 	add	objptr, #4
13dbc     F2 12 02 FB | 	rdlong	arg01, objptr
13dc0     03 12 62 FD | 	cogstop	arg01
13dc4     04 E4 05 F1 | 	add	objptr, #4
13dc8     F2 12 02 FB | 	rdlong	arg01, objptr
13dcc     03 12 62 FD | 	cogstop	arg01
13dd0     22 00 00 FF 
13dd4     E0 E5 05 F1 | 	add	objptr, ##17888
13dd8     F2 12 02 FB | 	rdlong	arg01, objptr
13ddc     03 12 62 FD | 	cogstop	arg01
13de0     10 00 00 FF 
13de4     9C EA 05 F1 | 	add	ptr__dat__, ##8348
13de8     F5 14 02 F6 | 	mov	arg02, ptr__dat__
13dec     10 00 00 FF 
13df0     9C EA 85 F1 | 	sub	ptr__dat__, ##8348
13df4     22 00 00 FF 
13df8     D8 E5 85 F1 | 	sub	objptr, ##17880
13dfc     1E 2C 06 F6 | 	mov	local08, #30
13e00     28 E4 61 FD | 	setq	objptr
13e04     0A 2D F2 FC | 	coginit	local08, arg02 wc
13e08     01 2C 66 C6 |  if_b	neg	local08, #1
13e0c     24 00 00 FF 
13e10     EC E4 05 F1 | 	add	objptr, ##18668
13e14     F2 2C 62 FC | 	wrlong	local08, objptr
13e18     7A 00 00 FF 
13e1c     CC E4 85 F1 | 	sub	objptr, ##62668
13e20     00 12 06 F6 | 	mov	arg01, #0
13e24     01 12 62 FD | 	cogid	arg01
13e28     03 12 62 FD | 	cogstop	arg01
13e2c                 | LR__1624
13e2c                 | LR__1625
13e2c     A7 F0 03 F6 | 	mov	ptra, fp
13e30     B2 00 A0 FD | 	call	#popregs_
13e34                 | _do_brun_ret
13e34     2D 00 64 FD | 	ret
13e38                 | 
13e38                 | ' 
13e38                 | ' 
13e38                 | ' sub do_mouse
13e38                 | _do_mouse
13e38     88 53 BF FD | 	call	#_pop
13e3c     00 FA 4D F2 | 	cmps	result1, #0 wz
13e40                 | ' 
13e40                 | ' t1=pop()
13e40                 | ' 
13e40                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
13e40     14 00 90 5D |  if_ne	jmp	#LR__1630
13e44     10 12 06 F6 | 	mov	arg01, #16
13e48     00 14 06 F6 | 	mov	arg02, #0
13e4c     00 16 06 F6 | 	mov	arg03, #0
13e50     6C 27 B0 FD | 	call	#_hg010b_spin2_setspritesize
13e54     10 00 90 FD | 	jmp	#LR__1631
13e58                 | LR__1630
13e58     10 12 06 F6 | 	mov	arg01, #16
13e5c     20 14 06 F6 | 	mov	arg02, #32
13e60     20 16 06 F6 | 	mov	arg03, #32
13e64     58 27 B0 FD | 	call	#_hg010b_spin2_setspritesize
13e68                 | LR__1631
13e68                 | _do_mouse_ret
13e68     2D 00 64 FD | 	ret
13e6c                 | 
13e6c                 | ' 
13e6c                 | ' sub do_cursor
13e6c                 | _do_cursor
13e6c     54 53 BF FD | 	call	#_pop
13e70     00 FA 4D F2 | 	cmps	result1, #0 wz
13e74                 | ' 
13e74                 | ' t1=pop()
13e74                 | ' 
13e74                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
13e74     14 00 90 5D |  if_ne	jmp	#LR__1640
13e78     11 12 06 F6 | 	mov	arg01, #17
13e7c     00 14 06 F6 | 	mov	arg02, #0
13e80     00 16 06 F6 | 	mov	arg03, #0
13e84     38 27 B0 FD | 	call	#_hg010b_spin2_setspritesize
13e88     10 00 90 FD | 	jmp	#LR__1641
13e8c                 | LR__1640
13e8c     11 12 06 F6 | 	mov	arg01, #17
13e90     08 14 06 F6 | 	mov	arg02, #8
13e94     10 16 06 F6 | 	mov	arg03, #16
13e98     24 27 B0 FD | 	call	#_hg010b_spin2_setspritesize
13e9c                 | LR__1641
13e9c                 | _do_cursor_ret
13e9c     2D 00 64 FD | 	ret
13ea0                 | 
13ea0                 | ' 
13ea0                 | ' 
13ea0                 | ' sub do_click
13ea0                 | _do_click
13ea0     20 53 BF FD | 	call	#_pop
13ea4     00 FA 4D F2 | 	cmps	result1, #0 wz
13ea8                 | ' 
13ea8                 | ' t1=pop()
13ea8                 | ' 
13ea8                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
13ea8     78 00 00 AF 
13eac     B4 E5 05 A1 |  if_e	add	objptr, ##61876
13eb0     F2 00 68 AC |  if_e	wrlong	#0, objptr
13eb4     78 00 00 FF 
13eb8     B4 E5 C5 F3 | 	sumz	objptr, ##61876
13ebc     F2 02 68 5C |  if_ne	wrlong	#1, objptr
13ec0     78 00 00 5F 
13ec4     B4 E5 85 51 |  if_ne	sub	objptr, ##61876
13ec8                 | _do_click_ret
13ec8     2D 00 64 FD | 	ret
13ecc                 | 
13ecc                 | ' 
13ecc                 | ' 
13ecc                 | ' sub do_beep
13ecc                 | _do_beep
13ecc     02 4A 05 F6 | 	mov	COUNT_, #2
13ed0     A8 00 A0 FD | 	call	#pushregs_
13ed4     20 F0 07 F1 | 	add	ptra, #32
13ed8     E8 52 BF FD | 	call	#_pop
13edc     FD 1E 02 F6 | 	mov	local01, result1
13ee0     FE 1C 02 F6 | 	mov	arg06, result2
13ee4     FF 20 02 F6 | 	mov	local02, result3
13ee8     0C 4E 05 F1 | 	add	fp, #12
13eec     A7 1E 62 FC | 	wrlong	local01, fp
13ef0     04 4E 05 F1 | 	add	fp, #4
13ef4     A7 1C 62 FC | 	wrlong	arg06, fp
13ef8     04 4E 05 F1 | 	add	fp, #4
13efc     A7 20 62 FC | 	wrlong	local02, fp
13f00     14 4E 85 F1 | 	sub	fp, #20
13f04     BC 52 BF FD | 	call	#_pop
13f08     A7 FA 61 FC | 	wrlong	result1, fp
13f0c     04 4E 05 F1 | 	add	fp, #4
13f10     A7 FC 61 FC | 	wrlong	result2, fp
13f14     04 4E 05 F1 | 	add	fp, #4
13f18     A7 FE 61 FC | 	wrlong	result3, fp
13f1c                 | ' 
13f1c                 | ' 
13f1c                 | ' 
13f1c                 | ' t2=pop()
13f1c                 | ' t1=pop()
13f1c                 | ' 
13f1c                 | ' 
13f1c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
13f1c     08 4E 85 F1 | 	sub	fp, #8
13f20     1C FE 0D F2 | 	cmp	result3, #28 wz
13f24     08 4E 05 51 |  if_ne	add	fp, #8
13f28     A7 20 02 5B |  if_ne	rdlong	local02, fp
13f2c     08 4E 85 51 |  if_ne	sub	fp, #8
13f30     1D 20 0E 52 |  if_ne	cmp	local02, #29 wz
13f34     A7 1E 02 AB |  if_e	rdlong	local01, fp
13f38     18 4E 05 A1 |  if_e	add	fp, #24
13f3c     A7 1E 62 AC |  if_e	wrlong	local01, fp
13f40     18 4E 85 A1 |  if_e	sub	fp, #24
13f44     14 00 90 AD |  if_e	jmp	#LR__1650
13f48     A7 12 02 F6 | 	mov	arg01, fp
13f4c     04 C7 BF FD | 	call	#_converttoint
13f50     18 4E 05 F1 | 	add	fp, #24
13f54     A7 FA 61 FC | 	wrlong	result1, fp
13f58     18 4E 85 F1 | 	sub	fp, #24
13f5c                 | LR__1650
13f5c     1C 4E 05 F1 | 	add	fp, #28
13f60     A7 FE 48 FC | 	wrbyte	#127, fp
13f64     01 4E 05 F1 | 	add	fp, #1
13f68     A7 00 49 FC | 	wrbyte	#128, fp
13f6c     01 4E 85 F1 | 	sub	fp, #1
13f70     A7 14 02 F6 | 	mov	arg02, fp
13f74     04 4E 85 F1 | 	sub	fp, #4
13f78     A7 16 02 FB | 	rdlong	arg03, fp
13f7c     18 4E 85 F1 | 	sub	fp, #24
13f80     01 16 66 F0 | 	shl	arg03, #1
13f84     07 12 06 F6 | 	mov	arg01, #7
13f88     0E 18 C6 F9 | 	decod	arg04, #14
13f8c     02 1A 06 F6 | 	mov	arg05, #2
13f90     00 1C 06 F6 | 	mov	arg06, #0
13f94     0B 00 00 FF 
13f98     C0 E4 05 F1 | 	add	objptr, ##5824
13f9c     20 42 B0 FD | 	call	#_Audio093b_8_sc_spin2_play8
13fa0     0B 00 00 FF 
13fa4     C0 E4 85 F1 | 	sub	objptr, ##5824
13fa8     0C 4E 05 F1 | 	add	fp, #12
13fac     A7 12 02 F6 | 	mov	arg01, fp
13fb0     0C 4E 85 F1 | 	sub	fp, #12
13fb4     A4 52 BF FD | 	call	#_push
13fb8     FC F6 BF FD | 	call	#_do_waitms
13fbc     07 12 06 F6 | 	mov	arg01, #7
13fc0     0B 00 00 FF 
13fc4     C0 E4 05 F1 | 	add	objptr, ##5824
13fc8     A8 42 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
13fcc     0B 00 00 FF 
13fd0     C0 E4 85 F1 | 	sub	objptr, ##5824
13fd4     A7 F0 03 F6 | 	mov	ptra, fp
13fd8     B2 00 A0 FD | 	call	#popregs_
13fdc                 | _do_beep_ret
13fdc     2D 00 64 FD | 	ret
13fe0                 | 
13fe0                 | ' 
13fe0                 | ' sub do_no_command
13fe0                 | _do_no_command
13fe0     17 12 06 F6 | 	mov	arg01, #23
13fe4     50 10 B0 FD | 	call	#_printerror
13fe8                 | _do_no_command_ret
13fe8     2D 00 64 FD | 	ret
13fec                 | 
13fec                 | ' 
13fec                 | ' sub do_negative
13fec                 | _do_negative
13fec     02 4A 05 F6 | 	mov	COUNT_, #2
13ff0     A8 00 A0 FD | 	call	#pushregs_
13ff4     0C F0 07 F1 | 	add	ptra, #12
13ff8     C8 51 BF FD | 	call	#_pop
13ffc     FF 1E 02 F6 | 	mov	local01, result3
14000     A7 FA 61 FC | 	wrlong	result1, fp
14004     04 4E 05 F1 | 	add	fp, #4
14008     A7 FC 61 FC | 	wrlong	result2, fp
1400c     04 4E 05 F1 | 	add	fp, #4
14010     A7 1E 62 FC | 	wrlong	local01, fp
14014                 | ' t1=pop()
14014                 | ' if t1.result_type=result_int then 
14014     08 4E 85 F1 | 	sub	fp, #8
14018     1C 1E 0E F2 | 	cmp	local01, #28 wz
1401c     A7 20 02 AB |  if_e	rdlong	local02, fp
14020     10 1F 62 A6 |  if_e	neg	local01, local02
14024     A7 1E 62 AC |  if_e	wrlong	local01, fp
14028     5C 00 90 AD |  if_e	jmp	#LR__1662
1402c     08 4E 05 F1 | 	add	fp, #8
14030     A7 1E 02 FB | 	rdlong	local01, fp
14034     08 4E 85 F1 | 	sub	fp, #8
14038     1D 1E 0E F2 | 	cmp	local01, #29 wz
1403c     1C 00 90 5D |  if_ne	jmp	#LR__1660
14040     A7 20 02 FB | 	rdlong	local02, fp
14044     10 1F 62 F6 | 	neg	local01, local02
14048     A7 1E 62 FC | 	wrlong	local01, fp
1404c     08 4E 05 F1 | 	add	fp, #8
14050     A7 38 68 FC | 	wrlong	#28, fp
14054     08 4E 85 F1 | 	sub	fp, #8
14058     2C 00 90 FD | 	jmp	#LR__1661
1405c                 | LR__1660
1405c     08 4E 05 F1 | 	add	fp, #8
14060     A7 1E 02 FB | 	rdlong	local01, fp
14064     08 4E 85 F1 | 	sub	fp, #8
14068     1E 1E 0E F2 | 	cmp	local01, #30 wz
1406c     A7 FA 01 AB |  if_e	rdlong	result1, fp
14070     1F FA E5 A4 |  if_e	bitnot	result1, #31
14074     A7 FA 61 AC |  if_e	wrlong	result1, fp
14078     08 4E 05 51 |  if_ne	add	fp, #8
1407c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
14080     08 4E 85 51 |  if_ne	sub	fp, #8
14084     A7 50 68 5C |  if_ne	wrlong	#40, fp
14088                 | LR__1661
14088                 | LR__1662
14088     A7 12 02 F6 | 	mov	arg01, fp
1408c     CC 51 BF FD | 	call	#_push
14090     A7 F0 03 F6 | 	mov	ptra, fp
14094     B2 00 A0 FD | 	call	#popregs_
14098                 | _do_negative_ret
14098     2D 00 64 FD | 	ret
1409c                 | 
1409c                 | ' 
1409c                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
1409c                 | ' 
1409c                 | ' ''----------------------------------------------------------------------------------------------------
1409c                 | ' ''------------------ Initialization procedures -------------------------------------------------------
1409c                 | ' ''----------------------------------------------------------------------------------------------------
1409c                 | ' 
1409c                 | ' ''--------------------------- Command function pointers
1409c                 | ' 
1409c                 | ' sub init_commands
1409c                 | _init_commands
1409c                 | ' 
1409c                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
1409c     00 00 06 F6 | 	mov	_var01, #0
140a0     97 16 48 FB | 	callpa	#(@LR__1671-@LR__1670)>>2,fcache_load_ptr_
140a4                 | LR__1670
140a4     00 FB 01 F6 | 	mov	result1, _var01
140a8     02 FA 65 F0 | 	shl	result1, #2
140ac     62 00 00 FF 
140b0     34 E4 05 F1 | 	add	objptr, ##50228
140b4     F2 FA 01 F1 | 	add	result1, objptr
140b8     62 00 00 FF 
140bc     34 E4 85 F1 | 	sub	objptr, ##50228
140c0     FD E4 61 FC | 	wrlong	objptr, result1
140c4     01 00 06 F1 | 	add	_var01, #1
140c8     00 01 56 F2 | 	cmps	_var01, #256 wc
140cc     D4 FF 9F CD |  if_b	jmp	#LR__1670
140d0                 | LR__1671
140d0     F2 FA 01 F6 | 	mov	result1, objptr
140d4     14 FA 25 F4 | 	bith	result1, #20
140d8     62 00 00 FF 
140dc     38 E4 05 F1 | 	add	objptr, ##50232
140e0     F2 FA 61 FC | 	wrlong	result1, objptr
140e4     62 00 00 FF 
140e8     38 E4 85 F1 | 	sub	objptr, ##50232
140ec     F2 FA 01 F6 | 	mov	result1, objptr
140f0     15 FA 25 F4 | 	bith	result1, #21
140f4     62 00 00 FF 
140f8     3C E4 05 F1 | 	add	objptr, ##50236
140fc     F2 FA 61 FC | 	wrlong	result1, objptr
14100     62 00 00 FF 
14104     3C E4 85 F1 | 	sub	objptr, ##50236
14108     F2 FA 01 F6 | 	mov	result1, objptr
1410c     34 FA 25 F4 | 	bith	result1, #52
14110     62 00 00 FF 
14114     40 E4 05 F1 | 	add	objptr, ##50240
14118     F2 FA 61 FC | 	wrlong	result1, objptr
1411c     62 00 00 FF 
14120     40 E4 85 F1 | 	sub	objptr, ##50240
14124     F2 FA 01 F6 | 	mov	result1, objptr
14128     16 FA 25 F4 | 	bith	result1, #22
1412c     62 00 00 FF 
14130     48 E4 05 F1 | 	add	objptr, ##50248
14134     F2 FA 61 FC | 	wrlong	result1, objptr
14138     62 00 00 FF 
1413c     48 E4 85 F1 | 	sub	objptr, ##50248
14140     F2 FA 01 F6 | 	mov	result1, objptr
14144     00 28 00 FF 
14148     00 FA 45 F5 | 	or	result1, ##5242880
1414c     62 00 00 FF 
14150     4C E4 05 F1 | 	add	objptr, ##50252
14154     F2 FA 61 FC | 	wrlong	result1, objptr
14158     62 00 00 FF 
1415c     4C E4 85 F1 | 	sub	objptr, ##50252
14160     F2 FA 01 F6 | 	mov	result1, objptr
14164     35 FA 25 F4 | 	bith	result1, #53
14168     62 00 00 FF 
1416c     50 E4 05 F1 | 	add	objptr, ##50256
14170     F2 FA 61 FC | 	wrlong	result1, objptr
14174     62 00 00 FF 
14178     50 E4 85 F1 | 	sub	objptr, ##50256
1417c     F2 FA 01 F6 | 	mov	result1, objptr
14180     54 FA 25 F4 | 	bith	result1, #84
14184     62 00 00 FF 
14188     54 E4 05 F1 | 	add	objptr, ##50260
1418c     F2 FA 61 FC | 	wrlong	result1, objptr
14190     62 00 00 FF 
14194     54 E4 85 F1 | 	sub	objptr, ##50260
14198     F2 FA 01 F6 | 	mov	result1, objptr
1419c     17 FA 25 F4 | 	bith	result1, #23
141a0     62 00 00 FF 
141a4     58 E4 05 F1 | 	add	objptr, ##50264
141a8     F2 FA 61 FC | 	wrlong	result1, objptr
141ac     62 00 00 FF 
141b0     58 E4 85 F1 | 	sub	objptr, ##50264
141b4     F2 FA 01 F6 | 	mov	result1, objptr
141b8     00 48 00 FF 
141bc     00 FA 45 F5 | 	or	result1, ##9437184
141c0     62 00 00 FF 
141c4     5C E4 05 F1 | 	add	objptr, ##50268
141c8     F2 FA 61 FC | 	wrlong	result1, objptr
141cc     62 00 00 FF 
141d0     5C E4 85 F1 | 	sub	objptr, ##50268
141d4     F2 FA 01 F6 | 	mov	result1, objptr
141d8     00 50 00 FF 
141dc     00 FA 45 F5 | 	or	result1, ##10485760
141e0     62 00 00 FF 
141e4     60 E4 05 F1 | 	add	objptr, ##50272
141e8     F2 FA 61 FC | 	wrlong	result1, objptr
141ec     62 00 00 FF 
141f0     60 E4 85 F1 | 	sub	objptr, ##50272
141f4     F2 FA 01 F6 | 	mov	result1, objptr
141f8     00 58 00 FF 
141fc     00 FA 45 F5 | 	or	result1, ##11534336
14200     62 00 00 FF 
14204     64 E4 05 F1 | 	add	objptr, ##50276
14208     F2 FA 61 FC | 	wrlong	result1, objptr
1420c     62 00 00 FF 
14210     64 E4 85 F1 | 	sub	objptr, ##50276
14214     F2 FA 01 F6 | 	mov	result1, objptr
14218     36 FA 25 F4 | 	bith	result1, #54
1421c     62 00 00 FF 
14220     78 E4 05 F1 | 	add	objptr, ##50296
14224     F2 FA 61 FC | 	wrlong	result1, objptr
14228     62 00 00 FF 
1422c     78 E4 85 F1 | 	sub	objptr, ##50296
14230     F2 FA 01 F6 | 	mov	result1, objptr
14234     00 68 00 FF 
14238     00 FA 45 F5 | 	or	result1, ##13631488
1423c     62 00 00 FF 
14240     A8 E4 05 F1 | 	add	objptr, ##50344
14244     F2 FA 61 FC | 	wrlong	result1, objptr
14248     62 00 00 FF 
1424c     A8 E4 85 F1 | 	sub	objptr, ##50344
14250     F2 FA 01 F6 | 	mov	result1, objptr
14254     00 68 00 FF 
14258     00 FA 45 F5 | 	or	result1, ##13631488
1425c     62 00 00 FF 
14260     A4 E4 05 F1 | 	add	objptr, ##50340
14264     F2 FA 61 FC | 	wrlong	result1, objptr
14268     62 00 00 FF 
1426c     A4 E4 85 F1 | 	sub	objptr, ##50340
14270     F2 FA 01 F6 | 	mov	result1, objptr
14274     00 68 00 FF 
14278     00 FA 45 F5 | 	or	result1, ##13631488
1427c     62 00 00 FF 
14280     AC E4 05 F1 | 	add	objptr, ##50348
14284     F2 FA 61 FC | 	wrlong	result1, objptr
14288     62 00 00 FF 
1428c     AC E4 85 F1 | 	sub	objptr, ##50348
14290     F2 FA 01 F6 | 	mov	result1, objptr
14294     00 68 00 FF 
14298     00 FA 45 F5 | 	or	result1, ##13631488
1429c     62 00 00 FF 
142a0     B0 E4 05 F1 | 	add	objptr, ##50352
142a4     F2 FA 61 FC | 	wrlong	result1, objptr
142a8     62 00 00 FF 
142ac     B0 E4 85 F1 | 	sub	objptr, ##50352
142b0     F2 FA 01 F6 | 	mov	result1, objptr
142b4     00 68 00 FF 
142b8     00 FA 45 F5 | 	or	result1, ##13631488
142bc     62 00 00 FF 
142c0     E0 E4 05 F1 | 	add	objptr, ##50400
142c4     F2 FA 61 FC | 	wrlong	result1, objptr
142c8     62 00 00 FF 
142cc     E0 E4 85 F1 | 	sub	objptr, ##50400
142d0     F2 FA 01 F6 | 	mov	result1, objptr
142d4     55 FA 25 F4 | 	bith	result1, #85
142d8     62 00 00 FF 
142dc     90 E4 05 F1 | 	add	objptr, ##50320
142e0     F2 FA 61 FC | 	wrlong	result1, objptr
142e4     62 00 00 FF 
142e8     90 E4 85 F1 | 	sub	objptr, ##50320
142ec     F2 FA 01 F6 | 	mov	result1, objptr
142f0     00 68 00 FF 
142f4     00 FA 45 F5 | 	or	result1, ##13631488
142f8     62 00 00 FF 
142fc     B4 E4 05 F1 | 	add	objptr, ##50356
14300     F2 FA 61 FC | 	wrlong	result1, objptr
14304     62 00 00 FF 
14308     B4 E4 85 F1 | 	sub	objptr, ##50356
1430c     F2 FA 01 F6 | 	mov	result1, objptr
14310     00 68 00 FF 
14314     00 FA 45 F5 | 	or	result1, ##13631488
14318     62 00 00 FF 
1431c     B8 E4 05 F1 | 	add	objptr, ##50360
14320     F2 FA 61 FC | 	wrlong	result1, objptr
14324     62 00 00 FF 
14328     B8 E4 85 F1 | 	sub	objptr, ##50360
1432c     F2 FA 01 F6 | 	mov	result1, objptr
14330     00 68 00 FF 
14334     00 FA 45 F5 | 	or	result1, ##13631488
14338     62 00 00 FF 
1433c     BC E4 05 F1 | 	add	objptr, ##50364
14340     F2 FA 61 FC | 	wrlong	result1, objptr
14344     62 00 00 FF 
14348     BC E4 85 F1 | 	sub	objptr, ##50364
1434c     F2 FA 01 F6 | 	mov	result1, objptr
14350     74 FA 25 F4 | 	bith	result1, #116
14354     62 00 00 FF 
14358     34 E5 05 F1 | 	add	objptr, ##50484
1435c     F2 FA 61 FC | 	wrlong	result1, objptr
14360     62 00 00 FF 
14364     34 E5 85 F1 | 	sub	objptr, ##50484
14368     F2 FA 01 F6 | 	mov	result1, objptr
1436c     18 FA 25 F4 | 	bith	result1, #24
14370     62 00 00 FF 
14374     38 E5 05 F1 | 	add	objptr, ##50488
14378     F2 FA 61 FC | 	wrlong	result1, objptr
1437c     62 00 00 FF 
14380     38 E5 85 F1 | 	sub	objptr, ##50488
14384     F2 FA 01 F6 | 	mov	result1, objptr
14388     00 88 00 FF 
1438c     00 FA 45 F5 | 	or	result1, ##17825792
14390     62 00 00 FF 
14394     3C E5 05 F1 | 	add	objptr, ##50492
14398     F2 FA 61 FC | 	wrlong	result1, objptr
1439c     62 00 00 FF 
143a0     3C E5 85 F1 | 	sub	objptr, ##50492
143a4     F2 FA 01 F6 | 	mov	result1, objptr
143a8     00 90 00 FF 
143ac     00 FA 45 F5 | 	or	result1, ##18874368
143b0     62 00 00 FF 
143b4     40 E5 05 F1 | 	add	objptr, ##50496
143b8     F2 FA 61 FC | 	wrlong	result1, objptr
143bc     62 00 00 FF 
143c0     40 E5 85 F1 | 	sub	objptr, ##50496
143c4     F2 FA 01 F6 | 	mov	result1, objptr
143c8     00 98 00 FF 
143cc     00 FA 45 F5 | 	or	result1, ##19922944
143d0     62 00 00 FF 
143d4     44 E5 05 F1 | 	add	objptr, ##50500
143d8     F2 FA 61 FC | 	wrlong	result1, objptr
143dc     62 00 00 FF 
143e0     44 E5 85 F1 | 	sub	objptr, ##50500
143e4     F2 FA 01 F6 | 	mov	result1, objptr
143e8     00 A0 00 FF 
143ec     00 FA 45 F5 | 	or	result1, ##20971520
143f0     62 00 00 FF 
143f4     48 E5 05 F1 | 	add	objptr, ##50504
143f8     F2 FA 61 FC | 	wrlong	result1, objptr
143fc     62 00 00 FF 
14400     48 E5 85 F1 | 	sub	objptr, ##50504
14404     F2 FA 01 F6 | 	mov	result1, objptr
14408     00 A8 00 FF 
1440c     00 FA 45 F5 | 	or	result1, ##22020096
14410     62 00 00 FF 
14414     4C E5 05 F1 | 	add	objptr, ##50508
14418     F2 FA 61 FC | 	wrlong	result1, objptr
1441c     62 00 00 FF 
14420     4C E5 85 F1 | 	sub	objptr, ##50508
14424     F2 FA 01 F6 | 	mov	result1, objptr
14428     00 B0 00 FF 
1442c     00 FA 45 F5 | 	or	result1, ##23068672
14430     62 00 00 FF 
14434     50 E5 05 F1 | 	add	objptr, ##50512
14438     F2 FA 61 FC | 	wrlong	result1, objptr
1443c     62 00 00 FF 
14440     50 E5 85 F1 | 	sub	objptr, ##50512
14444     F2 FA 01 F6 | 	mov	result1, objptr
14448     00 B8 00 FF 
1444c     00 FA 45 F5 | 	or	result1, ##24117248
14450     62 00 00 FF 
14454     54 E5 05 F1 | 	add	objptr, ##50516
14458     F2 FA 61 FC | 	wrlong	result1, objptr
1445c     62 00 00 FF 
14460     54 E5 85 F1 | 	sub	objptr, ##50516
14464     F2 FA 01 F6 | 	mov	result1, objptr
14468     37 FA 25 F4 | 	bith	result1, #55
1446c     62 00 00 FF 
14470     58 E5 05 F1 | 	add	objptr, ##50520
14474     F2 FA 61 FC | 	wrlong	result1, objptr
14478     62 00 00 FF 
1447c     58 E5 85 F1 | 	sub	objptr, ##50520
14480     F2 FA 01 F6 | 	mov	result1, objptr
14484     00 C8 00 FF 
14488     00 FA 45 F5 | 	or	result1, ##26214400
1448c     62 00 00 FF 
14490     5C E5 05 F1 | 	add	objptr, ##50524
14494     F2 FA 61 FC | 	wrlong	result1, objptr
14498     62 00 00 FF 
1449c     5C E5 85 F1 | 	sub	objptr, ##50524
144a0     F2 FA 01 F6 | 	mov	result1, objptr
144a4     00 D0 00 FF 
144a8     00 FA 45 F5 | 	or	result1, ##27262976
144ac     62 00 00 FF 
144b0     60 E5 05 F1 | 	add	objptr, ##50528
144b4     F2 FA 61 FC | 	wrlong	result1, objptr
144b8     62 00 00 FF 
144bc     60 E5 85 F1 | 	sub	objptr, ##50528
144c0     F2 FA 01 F6 | 	mov	result1, objptr
144c4     00 D8 00 FF 
144c8     00 FA 45 F5 | 	or	result1, ##28311552
144cc     62 00 00 FF 
144d0     64 E5 05 F1 | 	add	objptr, ##50532
144d4     F2 FA 61 FC | 	wrlong	result1, objptr
144d8     62 00 00 FF 
144dc     64 E5 85 F1 | 	sub	objptr, ##50532
144e0     F2 FA 01 F6 | 	mov	result1, objptr
144e4     56 FA 25 F4 | 	bith	result1, #86
144e8     62 00 00 FF 
144ec     68 E5 05 F1 | 	add	objptr, ##50536
144f0     F2 FA 61 FC | 	wrlong	result1, objptr
144f4     62 00 00 FF 
144f8     68 E5 85 F1 | 	sub	objptr, ##50536
144fc     F2 FA 01 F6 | 	mov	result1, objptr
14500     00 E8 00 FF 
14504     00 FA 45 F5 | 	or	result1, ##30408704
14508     64 00 00 FF 
1450c     30 E4 05 F1 | 	add	objptr, ##51248
14510     F2 FA 61 FC | 	wrlong	result1, objptr
14514     64 00 00 FF 
14518     30 E4 85 F1 | 	sub	objptr, ##51248
1451c     F2 FA 01 F6 | 	mov	result1, objptr
14520     75 FA 25 F4 | 	bith	result1, #117
14524     62 00 00 FF 
14528     6C E5 05 F1 | 	add	objptr, ##50540
1452c     F2 FA 61 FC | 	wrlong	result1, objptr
14530     62 00 00 FF 
14534     6C E5 85 F1 | 	sub	objptr, ##50540
14538     F2 FA 01 F6 | 	mov	result1, objptr
1453c     94 FA 25 F4 | 	bith	result1, #148
14540     62 00 00 FF 
14544     80 E5 05 F1 | 	add	objptr, ##50560
14548     F2 FA 61 FC | 	wrlong	result1, objptr
1454c     62 00 00 FF 
14550     80 E5 85 F1 | 	sub	objptr, ##50560
14554     F2 FA 01 F6 | 	mov	result1, objptr
14558     19 FA 25 F4 | 	bith	result1, #25
1455c     62 00 00 FF 
14560     70 E5 05 F1 | 	add	objptr, ##50544
14564     F2 FA 61 FC | 	wrlong	result1, objptr
14568     62 00 00 FF 
1456c     70 E5 85 F1 | 	sub	objptr, ##50544
14570     F2 FA 01 F6 | 	mov	result1, objptr
14574     00 08 01 FF 
14578     00 FA 45 F5 | 	or	result1, ##34603008
1457c     62 00 00 FF 
14580     8C E4 05 F1 | 	add	objptr, ##50316
14584     F2 FA 61 FC | 	wrlong	result1, objptr
14588     62 00 00 FF 
1458c     8C E4 85 F1 | 	sub	objptr, ##50316
14590     F2 FA 01 F6 | 	mov	result1, objptr
14594     00 10 01 FF 
14598     00 FA 45 F5 | 	or	result1, ##35651584
1459c     62 00 00 FF 
145a0     74 E5 05 F1 | 	add	objptr, ##50548
145a4     F2 FA 61 FC | 	wrlong	result1, objptr
145a8     62 00 00 FF 
145ac     74 E5 85 F1 | 	sub	objptr, ##50548
145b0     F2 FA 01 F6 | 	mov	result1, objptr
145b4     00 18 01 FF 
145b8     00 FA 45 F5 | 	or	result1, ##36700160
145bc     62 00 00 FF 
145c0     78 E5 05 F1 | 	add	objptr, ##50552
145c4     F2 FA 61 FC | 	wrlong	result1, objptr
145c8     62 00 00 FF 
145cc     78 E5 85 F1 | 	sub	objptr, ##50552
145d0     F2 FA 01 F6 | 	mov	result1, objptr
145d4     00 20 01 FF 
145d8     00 FA 45 F5 | 	or	result1, ##37748736
145dc     62 00 00 FF 
145e0     7C E5 05 F1 | 	add	objptr, ##50556
145e4     F2 FA 61 FC | 	wrlong	result1, objptr
145e8     62 00 00 FF 
145ec     7C E5 85 F1 | 	sub	objptr, ##50556
145f0     F2 FA 01 F6 | 	mov	result1, objptr
145f4     00 28 01 FF 
145f8     00 FA 45 F5 | 	or	result1, ##38797312
145fc     62 00 00 FF 
14600     88 E5 05 F1 | 	add	objptr, ##50568
14604     F2 FA 61 FC | 	wrlong	result1, objptr
14608     62 00 00 FF 
1460c     88 E5 85 F1 | 	sub	objptr, ##50568
14610     F2 FA 01 F6 | 	mov	result1, objptr
14614     00 30 01 FF 
14618     00 FA 45 F5 | 	or	result1, ##39845888
1461c     62 00 00 FF 
14620     8C E5 05 F1 | 	add	objptr, ##50572
14624     F2 FA 61 FC | 	wrlong	result1, objptr
14628     62 00 00 FF 
1462c     8C E5 85 F1 | 	sub	objptr, ##50572
14630     F2 FA 01 F6 | 	mov	result1, objptr
14634     00 38 01 FF 
14638     00 FA 45 F5 | 	or	result1, ##40894464
1463c     62 00 00 FF 
14640     90 E5 05 F1 | 	add	objptr, ##50576
14644     F2 FA 61 FC | 	wrlong	result1, objptr
14648     62 00 00 FF 
1464c     90 E5 85 F1 | 	sub	objptr, ##50576
14650     F2 FA 01 F6 | 	mov	result1, objptr
14654     00 40 01 FF 
14658     00 FA 45 F5 | 	or	result1, ##41943040
1465c     62 00 00 FF 
14660     94 E5 05 F1 | 	add	objptr, ##50580
14664     F2 FA 61 FC | 	wrlong	result1, objptr
14668     62 00 00 FF 
1466c     94 E5 85 F1 | 	sub	objptr, ##50580
14670     F2 FA 01 F6 | 	mov	result1, objptr
14674     00 48 01 FF 
14678     00 FA 45 F5 | 	or	result1, ##42991616
1467c     62 00 00 FF 
14680     9C E5 05 F1 | 	add	objptr, ##50588
14684     F2 FA 61 FC | 	wrlong	result1, objptr
14688     62 00 00 FF 
1468c     9C E5 85 F1 | 	sub	objptr, ##50588
14690     F2 FA 01 F6 | 	mov	result1, objptr
14694     00 50 01 FF 
14698     00 FA 45 F5 | 	or	result1, ##44040192
1469c     62 00 00 FF 
146a0     A0 E5 05 F1 | 	add	objptr, ##50592
146a4     F2 FA 61 FC | 	wrlong	result1, objptr
146a8     62 00 00 FF 
146ac     A0 E5 85 F1 | 	sub	objptr, ##50592
146b0     F2 FA 01 F6 | 	mov	result1, objptr
146b4     00 58 01 FF 
146b8     00 FA 45 F5 | 	or	result1, ##45088768
146bc     62 00 00 FF 
146c0     A0 E4 05 F1 | 	add	objptr, ##50336
146c4     F2 FA 61 FC | 	wrlong	result1, objptr
146c8     62 00 00 FF 
146cc     A0 E4 85 F1 | 	sub	objptr, ##50336
146d0     F2 FA 01 F6 | 	mov	result1, objptr
146d4     00 60 01 FF 
146d8     00 FA 45 F5 | 	or	result1, ##46137344
146dc     62 00 00 FF 
146e0     D0 E4 05 F1 | 	add	objptr, ##50384
146e4     F2 FA 61 FC | 	wrlong	result1, objptr
146e8     62 00 00 FF 
146ec     D0 E4 85 F1 | 	sub	objptr, ##50384
146f0     F2 FA 01 F6 | 	mov	result1, objptr
146f4     00 68 01 FF 
146f8     00 FA 45 F5 | 	or	result1, ##47185920
146fc     62 00 00 FF 
14700     CC E4 05 F1 | 	add	objptr, ##50380
14704     F2 FA 61 FC | 	wrlong	result1, objptr
14708     62 00 00 FF 
1470c     CC E4 85 F1 | 	sub	objptr, ##50380
14710     F2 FA 01 F6 | 	mov	result1, objptr
14714     00 70 01 FF 
14718     00 FA 45 F5 | 	or	result1, ##48234496
1471c     62 00 00 FF 
14720     70 E4 05 F1 | 	add	objptr, ##50288
14724     F2 FA 61 FC | 	wrlong	result1, objptr
14728     62 00 00 FF 
1472c     70 E4 85 F1 | 	sub	objptr, ##50288
14730     F2 FA 01 F6 | 	mov	result1, objptr
14734     00 78 01 FF 
14738     00 FA 45 F5 | 	or	result1, ##49283072
1473c     62 00 00 FF 
14740     74 E4 05 F1 | 	add	objptr, ##50292
14744     F2 FA 61 FC | 	wrlong	result1, objptr
14748     62 00 00 FF 
1474c     74 E4 85 F1 | 	sub	objptr, ##50292
14750     F2 FA 01 F6 | 	mov	result1, objptr
14754     38 FA 25 F4 | 	bith	result1, #56
14758     62 00 00 FF 
1475c     DC E4 05 F1 | 	add	objptr, ##50396
14760     F2 FA 61 FC | 	wrlong	result1, objptr
14764     62 00 00 FF 
14768     DC E4 85 F1 | 	sub	objptr, ##50396
1476c     F2 FA 01 F6 | 	mov	result1, objptr
14770     00 88 01 FF 
14774     00 FA 45 F5 | 	or	result1, ##51380224
14778     62 00 00 FF 
1477c     84 E5 05 F1 | 	add	objptr, ##50564
14780     F2 FA 61 FC | 	wrlong	result1, objptr
14784     62 00 00 FF 
14788     84 E5 85 F1 | 	sub	objptr, ##50564
1478c     F2 FA 01 F6 | 	mov	result1, objptr
14790     00 90 01 FF 
14794     00 FA 45 F5 | 	or	result1, ##52428800
14798     62 00 00 FF 
1479c     98 E5 05 F1 | 	add	objptr, ##50584
147a0     F2 FA 61 FC | 	wrlong	result1, objptr
147a4     62 00 00 FF 
147a8     98 E5 85 F1 | 	sub	objptr, ##50584
147ac     F2 FA 01 F6 | 	mov	result1, objptr
147b0     00 98 01 FF 
147b4     00 FA 45 F5 | 	or	result1, ##53477376
147b8     62 00 00 FF 
147bc     A4 E5 05 F1 | 	add	objptr, ##50596
147c0     F2 FA 61 FC | 	wrlong	result1, objptr
147c4     62 00 00 FF 
147c8     A4 E5 85 F1 | 	sub	objptr, ##50596
147cc     F2 FA 01 F6 | 	mov	result1, objptr
147d0     00 A0 01 FF 
147d4     00 FA 45 F5 | 	or	result1, ##54525952
147d8     62 00 00 FF 
147dc     A8 E5 05 F1 | 	add	objptr, ##50600
147e0     F2 FA 61 FC | 	wrlong	result1, objptr
147e4     62 00 00 FF 
147e8     A8 E5 85 F1 | 	sub	objptr, ##50600
147ec     F2 FA 01 F6 | 	mov	result1, objptr
147f0     00 A8 01 FF 
147f4     00 FA 45 F5 | 	or	result1, ##55574528
147f8     62 00 00 FF 
147fc     AC E5 05 F1 | 	add	objptr, ##50604
14800     F2 FA 61 FC | 	wrlong	result1, objptr
14804     62 00 00 FF 
14808     AC E5 85 F1 | 	sub	objptr, ##50604
1480c     F2 FA 01 F6 | 	mov	result1, objptr
14810     00 B0 01 FF 
14814     00 FA 45 F5 | 	or	result1, ##56623104
14818     62 00 00 FF 
1481c     B0 E5 05 F1 | 	add	objptr, ##50608
14820     F2 FA 61 FC | 	wrlong	result1, objptr
14824     62 00 00 FF 
14828     B0 E5 85 F1 | 	sub	objptr, ##50608
1482c     F2 FA 01 F6 | 	mov	result1, objptr
14830     00 B8 01 FF 
14834     00 FA 45 F5 | 	or	result1, ##57671680
14838     62 00 00 FF 
1483c     B4 E5 05 F1 | 	add	objptr, ##50612
14840     F2 FA 61 FC | 	wrlong	result1, objptr
14844     62 00 00 FF 
14848     B4 E5 85 F1 | 	sub	objptr, ##50612
1484c     F2 FA 01 F6 | 	mov	result1, objptr
14850     57 FA 25 F4 | 	bith	result1, #87
14854     62 00 00 FF 
14858     B8 E5 05 F1 | 	add	objptr, ##50616
1485c     F2 FA 61 FC | 	wrlong	result1, objptr
14860     62 00 00 FF 
14864     B8 E5 85 F1 | 	sub	objptr, ##50616
14868     F2 FA 01 F6 | 	mov	result1, objptr
1486c     94 FA 25 F4 | 	bith	result1, #148
14870     62 00 00 FF 
14874     80 E5 05 F1 | 	add	objptr, ##50560
14878     F2 FA 61 FC | 	wrlong	result1, objptr
1487c     62 00 00 FF 
14880     80 E5 85 F1 | 	sub	objptr, ##50560
14884     F2 FA 01 F6 | 	mov	result1, objptr
14888     00 C8 01 FF 
1488c     00 FA 45 F5 | 	or	result1, ##59768832
14890     62 00 00 FF 
14894     C0 E5 05 F1 | 	add	objptr, ##50624
14898     F2 FA 61 FC | 	wrlong	result1, objptr
1489c     62 00 00 FF 
148a0     C0 E5 85 F1 | 	sub	objptr, ##50624
148a4     F2 FA 01 F6 | 	mov	result1, objptr
148a8     00 D0 01 FF 
148ac     00 FA 45 F5 | 	or	result1, ##60817408
148b0     62 00 00 FF 
148b4     BC E5 05 F1 | 	add	objptr, ##50620
148b8     F2 FA 61 FC | 	wrlong	result1, objptr
148bc     62 00 00 FF 
148c0     BC E5 85 F1 | 	sub	objptr, ##50620
148c4     F2 FA 01 F6 | 	mov	result1, objptr
148c8     00 D8 01 FF 
148cc     00 FA 45 F5 | 	or	result1, ##61865984
148d0     62 00 00 FF 
148d4     D4 E5 05 F1 | 	add	objptr, ##50644
148d8     F2 FA 61 FC | 	wrlong	result1, objptr
148dc     62 00 00 FF 
148e0     D4 E5 85 F1 | 	sub	objptr, ##50644
148e4     F2 FA 01 F6 | 	mov	result1, objptr
148e8     76 FA 25 F4 | 	bith	result1, #118
148ec     62 00 00 FF 
148f0     D8 E5 05 F1 | 	add	objptr, ##50648
148f4     F2 FA 61 FC | 	wrlong	result1, objptr
148f8     62 00 00 FF 
148fc     D8 E5 85 F1 | 	sub	objptr, ##50648
14900     F2 FA 01 F6 | 	mov	result1, objptr
14904     00 E8 01 FF 
14908     00 FA 45 F5 | 	or	result1, ##63963136
1490c     62 00 00 FF 
14910     C4 E5 05 F1 | 	add	objptr, ##50628
14914     F2 FA 61 FC | 	wrlong	result1, objptr
14918     62 00 00 FF 
1491c     C4 E5 85 F1 | 	sub	objptr, ##50628
14920     F2 FA 01 F6 | 	mov	result1, objptr
14924     95 FA 25 F4 | 	bith	result1, #149
14928     62 00 00 FF 
1492c     C8 E5 05 F1 | 	add	objptr, ##50632
14930     F2 FA 61 FC | 	wrlong	result1, objptr
14934     62 00 00 FF 
14938     C8 E5 85 F1 | 	sub	objptr, ##50632
1493c     F2 FA 01 F6 | 	mov	result1, objptr
14940     B4 FA 25 F4 | 	bith	result1, #180
14944     62 00 00 FF 
14948     CC E5 05 F1 | 	add	objptr, ##50636
1494c     F2 FA 61 FC | 	wrlong	result1, objptr
14950     62 00 00 FF 
14954     CC E5 85 F1 | 	sub	objptr, ##50636
14958     F2 FA 01 F6 | 	mov	result1, objptr
1495c     1A FA 25 F4 | 	bith	result1, #26
14960     62 00 00 FF 
14964     D0 E5 05 F1 | 	add	objptr, ##50640
14968     F2 FA 61 FC | 	wrlong	result1, objptr
1496c     62 00 00 FF 
14970     D0 E5 85 F1 | 	sub	objptr, ##50640
14974     F2 FA 01 F6 | 	mov	result1, objptr
14978     00 08 02 FF 
1497c     00 FA 45 F5 | 	or	result1, ##68157440
14980     62 00 00 FF 
14984     E0 E5 05 F1 | 	add	objptr, ##50656
14988     F2 FA 61 FC | 	wrlong	result1, objptr
1498c     62 00 00 FF 
14990     E0 E5 85 F1 | 	sub	objptr, ##50656
14994     F2 FA 01 F6 | 	mov	result1, objptr
14998     00 10 02 FF 
1499c     00 FA 45 F5 | 	or	result1, ##69206016
149a0     62 00 00 FF 
149a4     DC E5 05 F1 | 	add	objptr, ##50652
149a8     F2 FA 61 FC | 	wrlong	result1, objptr
149ac     62 00 00 FF 
149b0     DC E5 85 F1 | 	sub	objptr, ##50652
149b4     F2 FA 01 F6 | 	mov	result1, objptr
149b8     00 18 02 FF 
149bc     00 FA 45 F5 | 	or	result1, ##70254592
149c0     62 00 00 FF 
149c4     EC E5 05 F1 | 	add	objptr, ##50668
149c8     F2 FA 61 FC | 	wrlong	result1, objptr
149cc     62 00 00 FF 
149d0     EC E5 85 F1 | 	sub	objptr, ##50668
149d4     F2 FA 01 F6 | 	mov	result1, objptr
149d8     00 20 02 FF 
149dc     00 FA 45 F5 | 	or	result1, ##71303168
149e0     62 00 00 FF 
149e4     E8 E5 05 F1 | 	add	objptr, ##50664
149e8     F2 FA 61 FC | 	wrlong	result1, objptr
149ec     62 00 00 FF 
149f0     E8 E5 85 F1 | 	sub	objptr, ##50664
149f4     F2 FA 01 F6 | 	mov	result1, objptr
149f8     00 28 02 FF 
149fc     00 FA 45 F5 | 	or	result1, ##72351744
14a00     62 00 00 FF 
14a04     E4 E5 05 F1 | 	add	objptr, ##50660
14a08     F2 FA 61 FC | 	wrlong	result1, objptr
14a0c     62 00 00 FF 
14a10     E4 E5 85 F1 | 	sub	objptr, ##50660
14a14     F2 FA 01 F6 | 	mov	result1, objptr
14a18     00 30 02 FF 
14a1c     00 FA 45 F5 | 	or	result1, ##73400320
14a20     62 00 00 FF 
14a24     F0 E5 05 F1 | 	add	objptr, ##50672
14a28     F2 FA 61 FC | 	wrlong	result1, objptr
14a2c     62 00 00 FF 
14a30     F0 E5 85 F1 | 	sub	objptr, ##50672
14a34     F2 FA 01 F6 | 	mov	result1, objptr
14a38     00 38 02 FF 
14a3c     00 FA 45 F5 | 	or	result1, ##74448896
14a40     62 00 00 FF 
14a44     F4 E5 05 F1 | 	add	objptr, ##50676
14a48     F2 FA 61 FC | 	wrlong	result1, objptr
14a4c     62 00 00 FF 
14a50     F4 E5 85 F1 | 	sub	objptr, ##50676
14a54     F2 FA 01 F6 | 	mov	result1, objptr
14a58     00 40 02 FF 
14a5c     00 FA 45 F5 | 	or	result1, ##75497472
14a60     62 00 00 FF 
14a64     88 E4 05 F1 | 	add	objptr, ##50312
14a68     F2 FA 61 FC | 	wrlong	result1, objptr
14a6c     62 00 00 FF 
14a70     88 E4 85 F1 | 	sub	objptr, ##50312
14a74     F2 FA 01 F6 | 	mov	result1, objptr
14a78     00 48 02 FF 
14a7c     00 FA 45 F5 | 	or	result1, ##76546048
14a80     63 00 00 FF 
14a84     0C E4 05 F1 | 	add	objptr, ##50700
14a88     F2 FA 61 FC | 	wrlong	result1, objptr
14a8c     63 00 00 FF 
14a90     0C E4 85 F1 | 	sub	objptr, ##50700
14a94     F2 FA 01 F6 | 	mov	result1, objptr
14a98     00 50 02 FF 
14a9c     00 FA 45 F5 | 	or	result1, ##77594624
14aa0     63 00 00 FF 
14aa4     1C E4 05 F1 | 	add	objptr, ##50716
14aa8     F2 FA 61 FC | 	wrlong	result1, objptr
14aac     63 00 00 FF 
14ab0     1C E4 85 F1 | 	sub	objptr, ##50716
14ab4     F2 FA 01 F6 | 	mov	result1, objptr
14ab8     00 58 02 FF 
14abc     00 FA 45 F5 | 	or	result1, ##78643200
14ac0     63 00 00 FF 
14ac4     20 E4 05 F1 | 	add	objptr, ##50720
14ac8     F2 FA 61 FC | 	wrlong	result1, objptr
14acc     63 00 00 FF 
14ad0     20 E4 85 F1 | 	sub	objptr, ##50720
14ad4     F2 FA 01 F6 | 	mov	result1, objptr
14ad8     00 60 02 FF 
14adc     00 FA 45 F5 | 	or	result1, ##79691776
14ae0     63 00 00 FF 
14ae4     18 E4 05 F1 | 	add	objptr, ##50712
14ae8     F2 FA 61 FC | 	wrlong	result1, objptr
14aec     63 00 00 FF 
14af0     18 E4 85 F1 | 	sub	objptr, ##50712
14af4     F2 FA 01 F6 | 	mov	result1, objptr
14af8     00 68 02 FF 
14afc     00 FA 45 F5 | 	or	result1, ##80740352
14b00     63 00 00 FF 
14b04     10 E4 05 F1 | 	add	objptr, ##50704
14b08     F2 FA 61 FC | 	wrlong	result1, objptr
14b0c     63 00 00 FF 
14b10     10 E4 85 F1 | 	sub	objptr, ##50704
14b14     F2 FA 01 F6 | 	mov	result1, objptr
14b18     00 70 02 FF 
14b1c     00 FA 45 F5 | 	or	result1, ##81788928
14b20     63 00 00 FF 
14b24     14 E4 05 F1 | 	add	objptr, ##50708
14b28     F2 FA 61 FC | 	wrlong	result1, objptr
14b2c     63 00 00 FF 
14b30     14 E4 85 F1 | 	sub	objptr, ##50708
14b34     F2 FA 01 F6 | 	mov	result1, objptr
14b38     00 78 02 FF 
14b3c     00 FA 45 F5 | 	or	result1, ##82837504
14b40     63 00 00 FF 
14b44     24 E4 05 F1 | 	add	objptr, ##50724
14b48     F2 FA 61 FC | 	wrlong	result1, objptr
14b4c     63 00 00 FF 
14b50     24 E4 85 F1 | 	sub	objptr, ##50724
14b54     F2 FA 01 F6 | 	mov	result1, objptr
14b58     00 80 02 FF 
14b5c     00 FA 45 F5 | 	or	result1, ##83886080
14b60     63 00 00 FF 
14b64     28 E4 05 F1 | 	add	objptr, ##50728
14b68     F2 FA 61 FC | 	wrlong	result1, objptr
14b6c     63 00 00 FF 
14b70     28 E4 85 F1 | 	sub	objptr, ##50728
14b74     F2 FA 01 F6 | 	mov	result1, objptr
14b78     00 88 02 FF 
14b7c     00 FA 45 F5 | 	or	result1, ##84934656
14b80     63 00 00 FF 
14b84     2C E4 05 F1 | 	add	objptr, ##50732
14b88     F2 FA 61 FC | 	wrlong	result1, objptr
14b8c     63 00 00 FF 
14b90     2C E4 85 F1 | 	sub	objptr, ##50732
14b94     F2 FA 01 F6 | 	mov	result1, objptr
14b98     00 90 02 FF 
14b9c     00 FA 45 F5 | 	or	result1, ##85983232
14ba0     63 00 00 FF 
14ba4     30 E4 05 F1 | 	add	objptr, ##50736
14ba8     F2 FA 61 FC | 	wrlong	result1, objptr
14bac     63 00 00 FF 
14bb0     30 E4 85 F1 | 	sub	objptr, ##50736
14bb4     F2 FA 01 F6 | 	mov	result1, objptr
14bb8     00 98 02 FF 
14bbc     00 FA 45 F5 | 	or	result1, ##87031808
14bc0     63 00 00 FF 
14bc4     34 E4 05 F1 | 	add	objptr, ##50740
14bc8     F2 FA 61 FC | 	wrlong	result1, objptr
14bcc     63 00 00 FF 
14bd0     34 E4 85 F1 | 	sub	objptr, ##50740
14bd4     F2 FA 01 F6 | 	mov	result1, objptr
14bd8     00 A0 02 FF 
14bdc     00 FA 45 F5 | 	or	result1, ##88080384
14be0     63 00 00 FF 
14be4     38 E4 05 F1 | 	add	objptr, ##50744
14be8     F2 FA 61 FC | 	wrlong	result1, objptr
14bec     63 00 00 FF 
14bf0     38 E4 85 F1 | 	sub	objptr, ##50744
14bf4     F2 FA 01 F6 | 	mov	result1, objptr
14bf8     00 A8 02 FF 
14bfc     00 FA 45 F5 | 	or	result1, ##89128960
14c00     63 00 00 FF 
14c04     3C E4 05 F1 | 	add	objptr, ##50748
14c08     F2 FA 61 FC | 	wrlong	result1, objptr
14c0c     63 00 00 FF 
14c10     3C E4 85 F1 | 	sub	objptr, ##50748
14c14     F2 FA 01 F6 | 	mov	result1, objptr
14c18     00 B0 02 FF 
14c1c     00 FA 45 F5 | 	or	result1, ##90177536
14c20     63 00 00 FF 
14c24     40 E4 05 F1 | 	add	objptr, ##50752
14c28     F2 FA 61 FC | 	wrlong	result1, objptr
14c2c     63 00 00 FF 
14c30     40 E4 85 F1 | 	sub	objptr, ##50752
14c34     F2 FA 01 F6 | 	mov	result1, objptr
14c38     00 B8 02 FF 
14c3c     00 FA 45 F5 | 	or	result1, ##91226112
14c40     63 00 00 FF 
14c44     4C E4 05 F1 | 	add	objptr, ##50764
14c48     F2 FA 61 FC | 	wrlong	result1, objptr
14c4c     63 00 00 FF 
14c50     4C E4 85 F1 | 	sub	objptr, ##50764
14c54     F2 FA 01 F6 | 	mov	result1, objptr
14c58     00 C0 02 FF 
14c5c     00 FA 45 F5 | 	or	result1, ##92274688
14c60     63 00 00 FF 
14c64     44 E4 05 F1 | 	add	objptr, ##50756
14c68     F2 FA 61 FC | 	wrlong	result1, objptr
14c6c     63 00 00 FF 
14c70     44 E4 85 F1 | 	sub	objptr, ##50756
14c74     F2 FA 01 F6 | 	mov	result1, objptr
14c78     00 C8 02 FF 
14c7c     00 FA 45 F5 | 	or	result1, ##93323264
14c80     63 00 00 FF 
14c84     48 E4 05 F1 | 	add	objptr, ##50760
14c88     F2 FA 61 FC | 	wrlong	result1, objptr
14c8c     63 00 00 FF 
14c90     48 E4 85 F1 | 	sub	objptr, ##50760
14c94     F2 FA 01 F6 | 	mov	result1, objptr
14c98     00 D0 02 FF 
14c9c     00 FA 45 F5 | 	or	result1, ##94371840
14ca0     63 00 00 FF 
14ca4     50 E4 05 F1 | 	add	objptr, ##50768
14ca8     F2 FA 61 FC | 	wrlong	result1, objptr
14cac     63 00 00 FF 
14cb0     50 E4 85 F1 | 	sub	objptr, ##50768
14cb4     F2 FA 01 F6 | 	mov	result1, objptr
14cb8     00 D8 02 FF 
14cbc     00 FA 45 F5 | 	or	result1, ##95420416
14cc0     62 00 00 FF 
14cc4     F8 E5 05 F1 | 	add	objptr, ##50680
14cc8     F2 FA 61 FC | 	wrlong	result1, objptr
14ccc     62 00 00 FF 
14cd0     F8 E5 85 F1 | 	sub	objptr, ##50680
14cd4     F2 FA 01 F6 | 	mov	result1, objptr
14cd8     00 E0 02 FF 
14cdc     00 FA 45 F5 | 	or	result1, ##96468992
14ce0     63 00 00 FF 
14ce4     00 E4 05 F1 | 	add	objptr, ##50688
14ce8     F2 FA 61 FC | 	wrlong	result1, objptr
14cec     63 00 00 FF 
14cf0     00 E4 85 F1 | 	sub	objptr, ##50688
14cf4     F2 FA 01 F6 | 	mov	result1, objptr
14cf8     00 E8 02 FF 
14cfc     00 FA 45 F5 | 	or	result1, ##97517568
14d00     63 00 00 FF 
14d04     04 E4 05 F1 | 	add	objptr, ##50692
14d08     F2 FA 61 FC | 	wrlong	result1, objptr
14d0c     63 00 00 FF 
14d10     04 E4 85 F1 | 	sub	objptr, ##50692
14d14                 | _init_commands_ret
14d14     2D 00 64 FD | 	ret
14d18                 | 
14d18                 | ' 
14d18                 | ' ''--------------------------------Error strings -------------------------------------
14d18                 | ' 
14d18                 | ' sub init_error_strings
14d18                 | _init_error_strings
14d18     3F 01 00 FF 
14d1c     9A 00 06 F6 | 	mov	_var01, ##@LR__4611
14d20     64 00 00 FF 
14d24     50 E4 05 F1 | 	add	objptr, ##51280
14d28     F2 00 62 FC | 	wrlong	_var01, objptr
14d2c     3F 01 00 FF 
14d30     9B 00 06 F6 | 	mov	_var01, ##@LR__4612
14d34     04 E4 05 F1 | 	add	objptr, #4
14d38     F2 00 62 FC | 	wrlong	_var01, objptr
14d3c     3F 01 00 FF 
14d40     C0 00 06 F6 | 	mov	_var01, ##@LR__4613
14d44     04 E4 05 F1 | 	add	objptr, #4
14d48     F2 00 62 FC | 	wrlong	_var01, objptr
14d4c     3F 01 00 FF 
14d50     E1 00 06 F6 | 	mov	_var01, ##@LR__4614
14d54     04 E4 05 F1 | 	add	objptr, #4
14d58     F2 00 62 FC | 	wrlong	_var01, objptr
14d5c     3F 01 00 FF 
14d60     FB 00 06 F6 | 	mov	_var01, ##@LR__4615
14d64     04 E4 05 F1 | 	add	objptr, #4
14d68     F2 00 62 FC | 	wrlong	_var01, objptr
14d6c     3F 01 00 FF 
14d70     17 01 06 F6 | 	mov	_var01, ##@LR__4616
14d74     04 E4 05 F1 | 	add	objptr, #4
14d78     F2 00 62 FC | 	wrlong	_var01, objptr
14d7c     3F 01 00 FF 
14d80     39 01 06 F6 | 	mov	_var01, ##@LR__4617
14d84     04 E4 05 F1 | 	add	objptr, #4
14d88     F2 00 62 FC | 	wrlong	_var01, objptr
14d8c     3F 01 00 FF 
14d90     67 01 06 F6 | 	mov	_var01, ##@LR__4618
14d94     04 E4 05 F1 | 	add	objptr, #4
14d98     F2 00 62 FC | 	wrlong	_var01, objptr
14d9c     3F 01 00 FF 
14da0     92 01 06 F6 | 	mov	_var01, ##@LR__4619
14da4     04 E4 05 F1 | 	add	objptr, #4
14da8     F2 00 62 FC | 	wrlong	_var01, objptr
14dac     3F 01 00 FF 
14db0     AB 01 06 F6 | 	mov	_var01, ##@LR__4620
14db4     04 E4 05 F1 | 	add	objptr, #4
14db8     F2 00 62 FC | 	wrlong	_var01, objptr
14dbc     3F 01 00 FF 
14dc0     CC 01 06 F6 | 	mov	_var01, ##@LR__4621
14dc4     04 E4 05 F1 | 	add	objptr, #4
14dc8     F2 00 62 FC | 	wrlong	_var01, objptr
14dcc     3F 01 00 FF 
14dd0     E3 01 06 F6 | 	mov	_var01, ##@LR__4622
14dd4     04 E4 05 F1 | 	add	objptr, #4
14dd8     F2 00 62 FC | 	wrlong	_var01, objptr
14ddc     40 01 00 FF 
14de0     01 00 06 F6 | 	mov	_var01, ##@LR__4623
14de4     04 E4 05 F1 | 	add	objptr, #4
14de8     F2 00 62 FC | 	wrlong	_var01, objptr
14dec     40 01 00 FF 
14df0     25 00 06 F6 | 	mov	_var01, ##@LR__4624
14df4     04 E4 05 F1 | 	add	objptr, #4
14df8     F2 00 62 FC | 	wrlong	_var01, objptr
14dfc     40 01 00 FF 
14e00     4C 00 06 F6 | 	mov	_var01, ##@LR__4625
14e04     04 E4 05 F1 | 	add	objptr, #4
14e08     F2 00 62 FC | 	wrlong	_var01, objptr
14e0c     40 01 00 FF 
14e10     68 00 06 F6 | 	mov	_var01, ##@LR__4626
14e14     04 E4 05 F1 | 	add	objptr, #4
14e18     F2 00 62 FC | 	wrlong	_var01, objptr
14e1c     40 01 00 FF 
14e20     79 00 06 F6 | 	mov	_var01, ##@LR__4627
14e24     04 E4 05 F1 | 	add	objptr, #4
14e28     F2 00 62 FC | 	wrlong	_var01, objptr
14e2c     40 01 00 FF 
14e30     89 00 06 F6 | 	mov	_var01, ##@LR__4628
14e34     04 E4 05 F1 | 	add	objptr, #4
14e38     F2 00 62 FC | 	wrlong	_var01, objptr
14e3c     40 01 00 FF 
14e40     A4 00 06 F6 | 	mov	_var01, ##@LR__4629
14e44     04 E4 05 F1 | 	add	objptr, #4
14e48     F2 00 62 FC | 	wrlong	_var01, objptr
14e4c     40 01 00 FF 
14e50     B6 00 06 F6 | 	mov	_var01, ##@LR__4630
14e54     04 E4 05 F1 | 	add	objptr, #4
14e58     F2 00 62 FC | 	wrlong	_var01, objptr
14e5c     40 01 00 FF 
14e60     CE 00 06 F6 | 	mov	_var01, ##@LR__4631
14e64     04 E4 05 F1 | 	add	objptr, #4
14e68     F2 00 62 FC | 	wrlong	_var01, objptr
14e6c     40 01 00 FF 
14e70     E2 00 06 F6 | 	mov	_var01, ##@LR__4632
14e74     04 E4 05 F1 | 	add	objptr, #4
14e78     F2 00 62 FC | 	wrlong	_var01, objptr
14e7c     40 01 00 FF 
14e80     F2 00 06 F6 | 	mov	_var01, ##@LR__4633
14e84     04 E4 05 F1 | 	add	objptr, #4
14e88     F2 00 62 FC | 	wrlong	_var01, objptr
14e8c     40 01 00 FF 
14e90     0F 01 06 F6 | 	mov	_var01, ##@LR__4634
14e94     04 E4 05 F1 | 	add	objptr, #4
14e98     F2 00 62 FC | 	wrlong	_var01, objptr
14e9c     40 01 00 FF 
14ea0     20 01 06 F6 | 	mov	_var01, ##@LR__4635
14ea4     04 E4 05 F1 | 	add	objptr, #4
14ea8     F2 00 62 FC | 	wrlong	_var01, objptr
14eac     40 01 00 FF 
14eb0     31 01 06 F6 | 	mov	_var01, ##@LR__4636
14eb4     04 E4 05 F1 | 	add	objptr, #4
14eb8     F2 00 62 FC | 	wrlong	_var01, objptr
14ebc     40 01 00 FF 
14ec0     5C 01 06 F6 | 	mov	_var01, ##@LR__4637
14ec4     04 E4 05 F1 | 	add	objptr, #4
14ec8     F2 00 62 FC | 	wrlong	_var01, objptr
14ecc     40 01 00 FF 
14ed0     78 01 06 F6 | 	mov	_var01, ##@LR__4638
14ed4     04 E4 05 F1 | 	add	objptr, #4
14ed8     F2 00 62 FC | 	wrlong	_var01, objptr
14edc     40 01 00 FF 
14ee0     8E 01 06 F6 | 	mov	_var01, ##@LR__4639
14ee4     04 E4 05 F1 | 	add	objptr, #4
14ee8     F2 00 62 FC | 	wrlong	_var01, objptr
14eec     40 01 00 FF 
14ef0     9B 01 06 F6 | 	mov	_var01, ##@LR__4640
14ef4     04 E4 05 F1 | 	add	objptr, #4
14ef8     F2 00 62 FC | 	wrlong	_var01, objptr
14efc     40 01 00 FF 
14f00     AD 01 06 F6 | 	mov	_var01, ##@LR__4641
14f04     04 E4 05 F1 | 	add	objptr, #4
14f08     F2 00 62 FC | 	wrlong	_var01, objptr
14f0c     40 01 00 FF 
14f10     BE 01 06 F6 | 	mov	_var01, ##@LR__4642
14f14     04 E4 05 F1 | 	add	objptr, #4
14f18     F2 00 62 FC | 	wrlong	_var01, objptr
14f1c     40 01 00 FF 
14f20     DA 01 06 F6 | 	mov	_var01, ##@LR__4643
14f24     04 E4 05 F1 | 	add	objptr, #4
14f28     F2 00 62 FC | 	wrlong	_var01, objptr
14f2c     40 01 00 FF 
14f30     EB 01 06 F6 | 	mov	_var01, ##@LR__4644
14f34     04 E4 05 F1 | 	add	objptr, #4
14f38     F2 00 62 FC | 	wrlong	_var01, objptr
14f3c     40 01 00 FF 
14f40     FA 01 06 F6 | 	mov	_var01, ##@LR__4645
14f44     04 E4 05 F1 | 	add	objptr, #4
14f48     F2 00 62 FC | 	wrlong	_var01, objptr
14f4c     41 01 00 FF 
14f50     15 00 06 F6 | 	mov	_var01, ##@LR__4646
14f54     04 E4 05 F1 | 	add	objptr, #4
14f58     F2 00 62 FC | 	wrlong	_var01, objptr
14f5c     41 01 00 FF 
14f60     49 00 06 F6 | 	mov	_var01, ##@LR__4647
14f64     04 E4 05 F1 | 	add	objptr, #4
14f68     F2 00 62 FC | 	wrlong	_var01, objptr
14f6c     41 01 00 FF 
14f70     62 00 06 F6 | 	mov	_var01, ##@LR__4648
14f74     04 E4 05 F1 | 	add	objptr, #4
14f78     F2 00 62 FC | 	wrlong	_var01, objptr
14f7c     41 01 00 FF 
14f80     7E 00 06 F6 | 	mov	_var01, ##@LR__4649
14f84     04 E4 05 F1 | 	add	objptr, #4
14f88     F2 00 62 FC | 	wrlong	_var01, objptr
14f8c     41 01 00 FF 
14f90     9C 00 06 F6 | 	mov	_var01, ##@LR__4650
14f94     04 E4 05 F1 | 	add	objptr, #4
14f98     F2 00 62 FC | 	wrlong	_var01, objptr
14f9c     41 01 00 FF 
14fa0     B5 00 06 F6 | 	mov	_var01, ##@LR__4651
14fa4     04 E4 05 F1 | 	add	objptr, #4
14fa8     F2 00 62 FC | 	wrlong	_var01, objptr
14fac     41 01 00 FF 
14fb0     D4 00 06 F6 | 	mov	_var01, ##@LR__4652
14fb4     04 E4 05 F1 | 	add	objptr, #4
14fb8     F2 00 62 FC | 	wrlong	_var01, objptr
14fbc     41 01 00 FF 
14fc0     E3 00 06 F6 | 	mov	_var01, ##@LR__4653
14fc4     04 E4 05 F1 | 	add	objptr, #4
14fc8     F2 00 62 FC | 	wrlong	_var01, objptr
14fcc     41 01 00 FF 
14fd0     11 01 06 F6 | 	mov	_var01, ##@LR__4654
14fd4     04 E4 05 F1 | 	add	objptr, #4
14fd8     F2 00 62 FC | 	wrlong	_var01, objptr
14fdc     41 01 00 FF 
14fe0     1F 01 06 F6 | 	mov	_var01, ##@LR__4655
14fe4     04 E4 05 F1 | 	add	objptr, #4
14fe8     F2 00 62 FC | 	wrlong	_var01, objptr
14fec     41 01 00 FF 
14ff0     34 01 06 F6 | 	mov	_var01, ##@LR__4656
14ff4     04 E4 05 F1 | 	add	objptr, #4
14ff8     F2 00 62 FC | 	wrlong	_var01, objptr
14ffc     41 01 00 FF 
15000     58 01 06 F6 | 	mov	_var01, ##@LR__4657
15004     04 E4 05 F1 | 	add	objptr, #4
15008     F2 00 62 FC | 	wrlong	_var01, objptr
1500c     41 01 00 FF 
15010     6F 01 06 F6 | 	mov	_var01, ##@LR__4658
15014     04 E4 05 F1 | 	add	objptr, #4
15018     F2 00 62 FC | 	wrlong	_var01, objptr
1501c     41 01 00 FF 
15020     82 01 06 F6 | 	mov	_var01, ##@LR__4659
15024     04 E4 05 F1 | 	add	objptr, #4
15028     F2 00 62 FC | 	wrlong	_var01, objptr
1502c     64 00 00 FF 
15030     10 E5 85 F1 | 	sub	objptr, ##51472
15034                 | _init_error_strings_ret
15034     2D 00 64 FD | 	ret
15038                 | 
15038                 | '         
15038                 | ' sub printerror(err as integer)
15038                 | _printerror
15038     01 4A 05 F6 | 	mov	COUNT_, #1
1503c     A8 00 A0 FD | 	call	#pushregs_
15040     09 1F 02 F6 | 	mov	local01, arg01
15044     41 01 00 FF 
15048     99 13 06 F6 | 	mov	arg01, ##@LR__4660
1504c     E4 24 B0 FD | 	call	#_hg010b_spin2_write
15050     0F 13 02 F6 | 	mov	arg01, local01
15054     DC 26 B0 FD | 	call	#_hg010b_spin2_inttostr
15058     FD 12 02 F6 | 	mov	arg01, result1
1505c     D4 24 B0 FD | 	call	#_hg010b_spin2_write
15060     41 01 00 FF 
15064     A0 13 06 F6 | 	mov	arg01, ##@LR__4661
15068     C8 24 B0 FD | 	call	#_hg010b_spin2_write
1506c     02 1E 66 F0 | 	shl	local01, #2
15070     64 00 00 FF 
15074     50 E4 05 F1 | 	add	objptr, ##51280
15078     F2 1E 02 F1 | 	add	local01, objptr
1507c     0F 13 02 FB | 	rdlong	arg01, local01
15080     64 00 00 FF 
15084     50 E4 85 F1 | 	sub	objptr, ##51280
15088                 | ' 
15088                 | ' write(text)
15088     A8 24 B0 FD | 	call	#_hg010b_spin2_write
1508c                 | ' crlf
1508c     04 26 B0 FD | 	call	#_hg010b_spin2_crlf
15090     A7 F0 03 F6 | 	mov	ptra, fp
15094     B2 00 A0 FD | 	call	#popregs_
15098                 | _printerror_ret
15098     2D 00 64 FD | 	ret
1509c                 | 
1509c                 | ' 
1509c                 | ' '' ------------------------------- Hardware start/stop/initialization 
1509c                 | ' 
1509c                 | ' sub startpsram
1509c                 | _startpsram
1509c     00 12 06 F6 | 	mov	arg01, #0
150a0     0A 14 C6 F9 | 	decod	arg02, #10
150a4     0B 16 06 F6 | 	mov	arg03, #11
150a8     07 18 06 F6 | 	mov	arg04, #7
150ac     0B 00 00 FF 
150b0     C0 E4 05 F1 | 	add	objptr, ##5824
150b4     88 27 B0 FD | 	call	#_psram_spin2_startx
150b8     4A 00 00 FF 
150bc     1C E5 05 F1 | 	add	objptr, ##38172
150c0     F2 FA 61 FC | 	wrlong	result1, objptr
150c4                 | '     return $7FF00 + cog*12
150c4     0C E4 05 F1 | 	add	objptr, #12
150c8     FF 03 80 FF 
150cc     F2 00 6A FC | 	wrlong	##524032, objptr
150d0     55 00 00 FF 
150d4     E8 E5 85 F1 | 	sub	objptr, ##44008
150d8                 | _startpsram_ret
150d8     2D 00 64 FD | 	ret
150dc                 | 
150dc                 | ' 
150dc                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
150dc                 | _startvideo
150dc     01 4A 05 F6 | 	mov	COUNT_, #1
150e0     A8 00 A0 FD | 	call	#pushregs_
150e4     55 00 00 FF 
150e8     E8 E5 05 F1 | 	add	objptr, ##44008
150ec     F2 18 02 FB | 	rdlong	arg04, objptr
150f0     55 00 00 FF 
150f4     E8 E5 85 F1 | 	sub	objptr, ##44008
150f8     0A 13 02 F6 | 	mov	arg01, arg02
150fc     0C 15 02 F6 | 	mov	arg02, arg04
15100     50 0F B0 FD | 	call	#_hg010b_spin2_start
15104     55 00 00 FF 
15108     D4 E5 05 F1 | 	add	objptr, ##43988
1510c     F2 FA 61 FC | 	wrlong	result1, objptr
15110                 | ' 
15110                 | ' videocog=v.start(pin,mbox)
15110                 | ' 
15110                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
15110     00 1E 06 F6 | 	mov	local01, #0
15114     4A 00 00 FF 
15118     14 E5 85 F1 | 	sub	objptr, ##38164
1511c                 | LR__1680
1511c     0F 13 02 F6 | 	mov	arg01, local01
15120     00 28 00 FF 
15124     00 14 06 F6 | 	mov	arg02, ##5242880
15128     6C 2B B0 FD | 	call	#_psram_spin2_setQos
1512c     01 1E 06 F1 | 	add	local01, #1
15130     08 1E 56 F2 | 	cmps	local01, #8 wc
15134     E4 FF 9F CD |  if_b	jmp	#LR__1680
15138     4A 00 00 FF 
1513c     14 E5 05 F1 | 	add	objptr, ##38164
15140     F2 12 02 FB | 	rdlong	arg01, objptr
15144     7A 00 02 FF 
15148     00 14 06 F6 | 	mov	arg02, ##67171328
1514c     4A 00 00 FF 
15150     14 E5 85 F1 | 	sub	objptr, ##38164
15154     40 2B B0 FD | 	call	#_psram_spin2_setQos
15158     0B 00 00 FF 
1515c     C0 E4 85 F1 | 	sub	objptr, ##5824
15160                 | ' psram.setQoS(videocog, $0400f400) 
15160                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
15160     F2 14 02 F6 | 	mov	arg02, objptr
15164     00 F0 02 FF 
15168     00 14 46 F5 | 	or	arg02, ##98566144
1516c     00 16 06 F6 | 	mov	arg03, #0
15170     00 18 06 F6 | 	mov	arg04, #0
15174     00 12 06 F6 | 	mov	arg01, #0
15178     88 3E B0 FD | 	call	#__system___basic_open
1517c                 | ' return videocog
1517c     55 00 00 FF 
15180     D4 E5 05 F1 | 	add	objptr, ##43988
15184     F2 FA 01 FB | 	rdlong	result1, objptr
15188     55 00 00 FF 
1518c     D4 E5 85 F1 | 	sub	objptr, ##43988
15190     A7 F0 03 F6 | 	mov	ptra, fp
15194     B2 00 A0 FD | 	call	#popregs_
15198                 | _startvideo_ret
15198     2D 00 64 FD | 	ret
1519c                 | 
1519c                 | ' 
1519c                 | ' function pspeek(adr as ulong) as ubyte
1519c                 | _pspeek
1519c     00 4A 05 F6 | 	mov	COUNT_, #0
151a0     A8 00 A0 FD | 	call	#pushregs_
151a4     0C F0 07 F1 | 	add	ptra, #12
151a8     04 4E 05 F1 | 	add	fp, #4
151ac     A7 12 62 FC | 	wrlong	arg01, fp
151b0     04 4E 05 F1 | 	add	fp, #4
151b4     A7 12 02 F6 | 	mov	arg01, fp
151b8     04 4E 85 F1 | 	sub	fp, #4
151bc     A7 14 02 FB | 	rdlong	arg02, fp
151c0     04 4E 85 F1 | 	sub	fp, #4
151c4     01 16 06 F6 | 	mov	arg03, #1
151c8     0B 00 00 FF 
151cc     C0 E4 05 F1 | 	add	objptr, ##5824
151d0     98 28 B0 FD | 	call	#_psram_spin2_read1
151d4     0B 00 00 FF 
151d8     C0 E4 85 F1 | 	sub	objptr, ##5824
151dc                 | ' psram.read1(varptr(res),adr,1)
151dc                 | ' return res
151dc     08 4E 05 F1 | 	add	fp, #8
151e0     A7 FA C1 FA | 	rdbyte	result1, fp
151e4     08 4E 85 F1 | 	sub	fp, #8
151e8     A7 F0 03 F6 | 	mov	ptra, fp
151ec     B2 00 A0 FD | 	call	#popregs_
151f0                 | _pspeek_ret
151f0     2D 00 64 FD | 	ret
151f4                 | 
151f4                 | ' 
151f4                 | ' function pslpeek(adr as ulong) as ulong
151f4                 | _pslpeek
151f4     00 4A 05 F6 | 	mov	COUNT_, #0
151f8     A8 00 A0 FD | 	call	#pushregs_
151fc     0C F0 07 F1 | 	add	ptra, #12
15200     04 4E 05 F1 | 	add	fp, #4
15204     A7 12 62 FC | 	wrlong	arg01, fp
15208     04 4E 05 F1 | 	add	fp, #4
1520c     A7 12 02 F6 | 	mov	arg01, fp
15210     04 4E 85 F1 | 	sub	fp, #4
15214     A7 14 02 FB | 	rdlong	arg02, fp
15218     04 4E 85 F1 | 	sub	fp, #4
1521c     04 16 06 F6 | 	mov	arg03, #4
15220     0B 00 00 FF 
15224     C0 E4 05 F1 | 	add	objptr, ##5824
15228     40 28 B0 FD | 	call	#_psram_spin2_read1
1522c     0B 00 00 FF 
15230     C0 E4 85 F1 | 	sub	objptr, ##5824
15234                 | ' psram.read1(varptr(res),adr,4)
15234                 | ' return res
15234     08 4E 05 F1 | 	add	fp, #8
15238     A7 FA 01 FB | 	rdlong	result1, fp
1523c     08 4E 85 F1 | 	sub	fp, #8
15240     A7 F0 03 F6 | 	mov	ptra, fp
15244     B2 00 A0 FD | 	call	#popregs_
15248                 | _pslpeek_ret
15248     2D 00 64 FD | 	ret
1524c                 | 
1524c                 | ' 
1524c                 | ' '' ------------------------------- USB keyboard scan to char translator
1524c                 | ' 
1524c                 | ' function scantochar(key)
1524c                 | _scantochar
1524c                 | ' 
1524c                 | ' select case (key shr 8) and 255
1524c     09 01 02 F6 | 	mov	_var01, arg01
15250     08 00 C6 F0 | 	sar	_var01, #8
15254     FF 00 0E F5 | 	and	_var01, #255 wz
15258     24 00 90 AD |  if_e	jmp	#LR__1690
1525c     02 00 0E F2 | 	cmp	_var01, #2 wz
15260     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
15264     30 00 90 AD |  if_e	jmp	#LR__1691
15268     40 00 0E F2 | 	cmp	_var01, #64 wz
1526c     44 00 90 AD |  if_e	jmp	#LR__1692
15270     42 00 0E F2 | 	cmp	_var01, #66 wz
15274     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
15278     70 00 90 5D |  if_ne	jmp	#LR__1694
1527c     50 00 90 FD | 	jmp	#LR__1693
15280                 | LR__1690
15280     09 FB 01 F6 | 	mov	result1, arg01
15284     7F FA 05 F5 | 	and	result1, #127
15288     02 FA 65 F0 | 	shl	result1, #2
1528c     F5 FA 01 F1 | 	add	result1, ptr__dat__
15290     FD FA C1 FA | 	rdbyte	result1, result1
15294     54 00 90 FD | 	jmp	#_scantochar_ret
15298                 | LR__1691
15298     09 FB 01 F6 | 	mov	result1, arg01
1529c     7F FA 05 F5 | 	and	result1, #127
152a0     02 FA 65 F0 | 	shl	result1, #2
152a4     01 FA 05 F1 | 	add	result1, #1
152a8     F5 FA 01 F1 | 	add	result1, ptr__dat__
152ac     FD FA C1 FA | 	rdbyte	result1, result1
152b0     38 00 90 FD | 	jmp	#_scantochar_ret
152b4                 | LR__1692
152b4     09 FB 01 F6 | 	mov	result1, arg01
152b8     7F FA 05 F5 | 	and	result1, #127
152bc     02 FA 65 F0 | 	shl	result1, #2
152c0     02 FA 05 F1 | 	add	result1, #2
152c4     F5 FA 01 F1 | 	add	result1, ptr__dat__
152c8     FD FA C1 FA | 	rdbyte	result1, result1
152cc     1C 00 90 FD | 	jmp	#_scantochar_ret
152d0                 | LR__1693
152d0     09 FB 01 F6 | 	mov	result1, arg01
152d4     7F FA 05 F5 | 	and	result1, #127
152d8     02 FA 65 F0 | 	shl	result1, #2
152dc     03 FA 05 F1 | 	add	result1, #3
152e0     F5 FA 01 F1 | 	add	result1, ptr__dat__
152e4     FD FA C1 FA | 	rdbyte	result1, result1
152e8     00 00 90 FD | 	jmp	#_scantochar_ret
152ec                 | LR__1694
152ec                 | _scantochar_ret
152ec     2D 00 64 FD | 	ret
152f0                 | 
152f0                 | _program
152f0     0B 4A 05 F6 | 	mov	COUNT_, #11
152f4     A8 00 A0 FD | 	call	#pushregs_
152f8     A0 FD BF FD | 	call	#_startpsram
152fc     40 12 06 F6 | 	mov	arg01, #64
15300     00 14 06 F6 | 	mov	arg02, #0
15304     00 16 06 F6 | 	mov	arg03, #0
15308     D0 FD BF FD | 	call	#_startvideo
1530c     00 12 06 F6 | 	mov	arg01, #0
15310     00 14 06 F6 | 	mov	arg02, #0
15314     00 16 06 F6 | 	mov	arg03, #0
15318     0B 00 00 FF 
1531c     C0 E4 05 F1 | 	add	objptr, ##5824
15320     88 2C B0 FD | 	call	#_Audio093b_8_sc_spin2_start
15324     FE 1C 02 F6 | 	mov	arg06, result2
15328     4A 00 00 FF 
1532c     10 E5 05 F1 | 	add	objptr, ##38160
15330     F2 FA 61 FC | 	wrlong	result1, objptr
15334     14 E4 05 F1 | 	add	objptr, #20
15338     F2 1C 62 FC | 	wrlong	arg06, objptr
1533c     55 00 00 FF 
15340     E4 E5 85 F1 | 	sub	objptr, ##44004
15344     32 12 06 F6 | 	mov	arg01, #50
15348     04 35 B0 FD | 	call	#__system___waitms
1534c     55 00 00 FF 
15350     E4 E5 05 F1 | 	add	objptr, ##44004
15354     F2 12 02 FB | 	rdlong	arg01, objptr
15358     55 00 00 FF 
1535c     E4 E5 85 F1 | 	sub	objptr, ##44004
15360     14 12 06 F1 | 	add	arg01, #20
15364     20 00 80 FF 
15368     09 01 58 FC | 	wrword	##16384, arg01
1536c     30 2A B0 FD | 	call	#_usbnew_spin2_start
15370     55 00 00 FF 
15374     D8 E5 05 F1 | 	add	objptr, ##43992
15378     F2 FA 61 FC | 	wrlong	result1, objptr
1537c                 | '   mouse_limits[0] := xlim
1537c     0F 00 00 FF 
15380     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
15384     01 00 80 FF 
15388     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
1538c                 | '   mouse_limits[1] := ylim
1538c     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
15390     01 00 80 FF 
15394     FB 7E 68 FC | 	wrlong	##575, ptr__usbnew_spin2_dat__
15398     55 00 00 FF 
1539c     CB E4 85 F1 | 	sub	objptr, ##43723
153a0     F2 12 02 F6 | 	mov	arg01, objptr
153a4     0D E5 85 F1 | 	sub	objptr, #269
153a8     C4 12 06 F1 | 	add	arg01, #196
153ac                 | '   mouse_outptr := ptr
153ac     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
153b0     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
153b4     0F 00 00 FF 
153b8     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
153bc     0E 00 00 FF 
153c0     9A EA 05 F1 | 	add	ptr__dat__, ##7322
153c4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
153c8     0E 00 00 FF 
153cc     9A EA 85 F1 | 	sub	ptr__dat__, ##7322
153d0     10 12 06 F6 | 	mov	arg01, #16
153d4     74 11 B0 FD | 	call	#_hg010b_spin2_setspriteptr
153d8     10 12 06 F6 | 	mov	arg01, #16
153dc     20 14 06 F6 | 	mov	arg02, #32
153e0     20 16 06 F6 | 	mov	arg03, #32
153e4     D8 11 B0 FD | 	call	#_hg010b_spin2_setspritesize
153e8     09 12 C6 F9 | 	decod	arg01, #9
153ec     20 15 06 F6 | 	mov	arg02, #288
153f0     68 2A B0 FD | 	call	#_usbnew_spin2_mouse_move
153f4     F2 1C 02 F6 | 	mov	arg06, objptr
153f8     78 00 00 FF 
153fc     BC E5 05 F1 | 	add	objptr, ##61884
15400     F2 1A 02 F6 | 	mov	arg05, objptr
15404     0D 1D 62 FC | 	wrlong	arg06, arg05
15408     04 1A 06 F1 | 	add	arg05, #4
1540c     0D F1 61 FC | 	wrlong	ptr__housekeeper_, arg05
15410     EF 14 02 F6 | 	mov	arg02, entryptr__
15414     F2 1E 02 F6 | 	mov	local01, objptr
15418     1E FA 05 F6 | 	mov	result1, #30
1541c     28 1E 62 FD | 	setq	local01
15420     0A FB F1 FC | 	coginit	result1, arg02 wc
15424     01 FA 65 C6 |  if_b	neg	result1, #1
15428     04 E4 85 F1 | 	sub	objptr, #4
1542c     F2 FA 61 FC | 	wrlong	result1, objptr
15430     01 00 00 FF 
15434     90 E4 05 F1 | 	add	objptr, ##656
15438     F2 00 68 FC | 	wrlong	#0, objptr
1543c     24 00 00 FF 
15440     40 E4 85 F1 | 	sub	objptr, ##18496
15444     F2 04 68 FC | 	wrlong	#2, objptr
15448     04 E4 05 F1 | 	add	objptr, #4
1544c     F2 26 69 FC | 	wrlong	#147, objptr
15450     04 E4 05 F1 | 	add	objptr, #4
15454     F2 34 69 FC | 	wrlong	#154, objptr
15458     04 E4 05 F1 | 	add	objptr, #4
1545c     F2 08 68 FC | 	wrlong	#4, objptr
15460     04 E4 85 F1 | 	sub	objptr, #4
15464     F2 1C 02 FB | 	rdlong	arg06, objptr
15468     14 E4 85 F1 | 	sub	objptr, #20
1546c     F2 1C 62 FC | 	wrlong	arg06, objptr
15470     04 E4 05 F1 | 	add	objptr, #4
15474     F2 00 68 FC | 	wrlong	#0, objptr
15478     04 E4 05 F1 | 	add	objptr, #4
1547c     F2 00 68 FC | 	wrlong	#0, objptr
15480     22 00 00 FF 
15484     B0 E5 05 F1 | 	add	objptr, ##17840
15488     F2 02 68 FC | 	wrlong	#1, objptr
1548c     01 00 00 FF 
15490     9C E4 05 F1 | 	add	objptr, ##668
15494     F2 00 68 FC | 	wrlong	#0, objptr
15498     01 00 00 FF 
1549c     00 EA 05 F1 | 	add	ptr__dat__, ##512
154a0     08 E4 05 F1 | 	add	objptr, #8
154a4     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
154a8     04 E4 85 F1 | 	sub	objptr, #4
154ac     03 00 80 FF 
154b0     F2 28 69 FC | 	wrlong	##1684, objptr
154b4     16 00 00 FF 
154b8     1C E4 85 F1 | 	sub	objptr, ##11292
154bc     F2 18 68 FC | 	wrlong	#12, objptr
154c0     64 00 00 FF 
154c4     38 E4 85 F1 | 	sub	objptr, ##51256
154c8     01 00 00 FF 
154cc     00 EA 85 F1 | 	sub	ptr__dat__, ##512
154d0     C8 EB BF FD | 	call	#_init_commands
154d4     40 F8 BF FD | 	call	#_init_error_strings
154d8     8C 68 BF FD | 	call	#_do_new
154dc     56 00 00 FF 
154e0     10 E4 05 F1 | 	add	objptr, ##44048
154e4     F2 12 02 FB | 	rdlong	arg01, objptr
154e8     04 E4 85 F1 | 	sub	objptr, #4
154ec     F2 14 02 FB | 	rdlong	arg02, objptr
154f0     56 00 00 FF 
154f4     0C E4 85 F1 | 	sub	objptr, ##44044
154f8     7C 1D B0 FD | 	call	#_hg010b_spin2_cls
154fc     56 00 00 FF 
15500     14 E4 05 F1 | 	add	objptr, ##44052
15504     F2 12 02 FB | 	rdlong	arg01, objptr
15508     56 00 00 FF 
1550c     14 E4 85 F1 | 	sub	objptr, ##44052
15510     7C 1C B0 FD | 	call	#_hg010b_spin2_setfontfamily
15514                 | ' 
15514                 | ' leading_spaces:=amount
15514     01 00 00 FF 
15518     B2 E4 05 F1 | 	add	objptr, ##690
1551c     F2 04 68 FC | 	wrlong	#2, objptr
15520     01 00 00 FF 
15524     B2 E4 85 F1 | 	sub	objptr, ##690
15528     41 01 00 FF 
1552c     A3 21 06 F6 | 	mov	local02, ##@LR__4662
15530     3D 12 06 F6 | 	mov	arg01, #61
15534     3C 14 06 F6 | 	mov	arg02, #60
15538     3B 16 06 F6 | 	mov	arg03, #59
1553c     3A 18 06 F6 | 	mov	arg04, #58
15540     AC 78 B0 FD | 	call	#__system___vfs_open_sdcardx
15544     FD 14 02 F6 | 	mov	arg02, result1
15548     10 13 02 F6 | 	mov	arg01, local02
1554c     D8 33 B0 FD | 	call	#__system___mount
15550     41 01 00 FF 
15554     A7 13 06 F6 | 	mov	arg01, ##@LR__4663
15558     8C 36 B0 FD | 	call	#__system___chdir
1555c     41 01 00 FF 
15560     AF 21 06 F6 | 	mov	local02, ##@LR__4664
15564     71 00 00 FF 
15568     68 E4 05 F1 | 	add	objptr, ##57960
1556c     F2 20 62 FC | 	wrlong	local02, objptr
15570     1B 00 00 FF 
15574     60 E4 85 F1 | 	sub	objptr, ##13920
15578     F2 12 02 FB | 	rdlong	arg01, objptr
1557c     56 00 00 FF 
15580     08 E4 85 F1 | 	sub	objptr, ##44040
15584     01 12 66 F0 | 	shl	arg01, #1
15588     01 14 06 F6 | 	mov	arg02, #1
1558c     40 1C B0 FD | 	call	#_hg010b_spin2_setcursorpos
15590                 | ' 
15590                 | ' init_commands
15590                 | ' init_error_strings
15590                 | ' do_new
15590                 | ' 
15590                 | ' 
15590                 | ' cls(ink, paper)
15590                 | ' 'v.setfontfamily(4) 				' use ST Mono font
15590                 | ' v.setfontfamily(font) 				' use ST Mono font
15590                 | ' v.setleadingspaces(2)
15590                 | ' mount "/sd", _vfs_open_sdcard()
15590                 | ' chdir "/sd/bas"
15590                 | ' 
15590                 | ' currentdir$="/sd/bas"
15590                 | ' 
15590                 | ' position 2*editor_spaces,1 : print ver$
15590     00 12 06 F6 | 	mov	arg01, #0
15594     C0 87 B0 FD | 	call	#__system___getiolock_0416
15598     FD 12 02 F6 | 	mov	arg01, result1
1559c     BC 2F B0 FD | 	call	#__system___lockmem
155a0     10 00 00 FF 
155a4     10 EB 05 F1 | 	add	ptr__dat__, ##8464
155a8     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
155ac     10 00 00 FF 
155b0     10 EB 85 F1 | 	sub	ptr__dat__, ##8464
155b4     00 12 06 F6 | 	mov	arg01, #0
155b8     00 16 06 F6 | 	mov	arg03, #0
155bc     8C 3C B0 FD | 	call	#__system___basic_print_string
155c0     00 12 06 F6 | 	mov	arg01, #0
155c4     0A 14 06 F6 | 	mov	arg02, #10
155c8     00 16 06 F6 | 	mov	arg03, #0
155cc     24 3C B0 FD | 	call	#__system___basic_print_char
155d0     00 12 06 F6 | 	mov	arg01, #0
155d4     80 87 B0 FD | 	call	#__system___getiolock_0416
155d8     FD 00 68 FC | 	wrlong	#0, result1
155dc     F2 12 02 FB | 	rdlong	arg01, objptr
155e0     00 14 06 F6 | 	mov	arg02, #0
155e4     0A 16 06 F6 | 	mov	arg03, #10
155e8     74 51 B0 FD | 	call	#__system__Number_S
155ec     FD 12 02 F6 | 	mov	arg01, result1
155f0     41 01 00 FF 
155f4     B7 15 06 F6 | 	mov	arg02, ##@LR__4665
155f8     BC 2F B0 FD | 	call	#__system___string_concat
155fc     FD 20 02 F6 | 	mov	local02, result1
15600     78 00 00 FF 
15604     B0 E5 05 F1 | 	add	objptr, ##61872
15608     F2 20 62 FC | 	wrlong	local02, objptr
1560c     78 00 00 FF 
15610     B0 E5 85 F1 | 	sub	objptr, ##61872
15614                 | ' free$=decuns$(v.buf_ptr)+" BASIC bytes free" : print free$
15614     00 12 06 F6 | 	mov	arg01, #0
15618     3C 87 B0 FD | 	call	#__system___getiolock_0416
1561c     FD 12 02 F6 | 	mov	arg01, result1
15620     38 2F B0 FD | 	call	#__system___lockmem
15624     78 00 00 FF 
15628     B0 E5 05 F1 | 	add	objptr, ##61872
1562c     F2 14 02 FB | 	rdlong	arg02, objptr
15630     78 00 00 FF 
15634     B0 E5 85 F1 | 	sub	objptr, ##61872
15638     00 12 06 F6 | 	mov	arg01, #0
1563c     00 16 06 F6 | 	mov	arg03, #0
15640     08 3C B0 FD | 	call	#__system___basic_print_string
15644     00 12 06 F6 | 	mov	arg01, #0
15648     0A 14 06 F6 | 	mov	arg02, #10
1564c     00 16 06 F6 | 	mov	arg03, #0
15650     A0 3B B0 FD | 	call	#__system___basic_print_char
15654     00 12 06 F6 | 	mov	arg01, #0
15658     FC 86 B0 FD | 	call	#__system___getiolock_0416
1565c     FD 00 68 FC | 	wrlong	#0, result1
15660     56 00 00 FF 
15664     08 E4 05 F1 | 	add	objptr, ##44040
15668     F2 12 02 FB | 	rdlong	arg01, objptr
1566c     56 00 00 FF 
15670     08 E4 85 F1 | 	sub	objptr, ##44040
15674     01 12 66 F0 | 	shl	arg01, #1
15678     04 14 06 F6 | 	mov	arg02, #4
1567c     50 1B B0 FD | 	call	#_hg010b_spin2_setcursorpos
15680                 | ' position 2*editor_spaces,4 : print "Ready"
15680     00 12 06 F6 | 	mov	arg01, #0
15684     D0 86 B0 FD | 	call	#__system___getiolock_0416
15688     FD 12 02 F6 | 	mov	arg01, result1
1568c     CC 2E B0 FD | 	call	#__system___lockmem
15690     41 01 00 FF 
15694     C9 15 06 F6 | 	mov	arg02, ##@LR__4666
15698     00 12 06 F6 | 	mov	arg01, #0
1569c     00 16 06 F6 | 	mov	arg03, #0
156a0     A8 3B B0 FD | 	call	#__system___basic_print_string
156a4     FD 22 02 F6 | 	mov	local03, result1
156a8     00 12 06 F6 | 	mov	arg01, #0
156ac     0A 14 06 F6 | 	mov	arg02, #10
156b0     00 16 06 F6 | 	mov	arg03, #0
156b4     3C 3B B0 FD | 	call	#__system___basic_print_char
156b8     01 24 06 F6 | 	mov	local04, #1
156bc     00 12 06 F6 | 	mov	arg01, #0
156c0     94 86 B0 FD | 	call	#__system___getiolock_0416
156c4     FD 00 68 FC | 	wrlong	#0, result1
156c8     00 26 06 F6 | 	mov	local05, #0
156cc     00 14 06 F6 | 	mov	arg02, #0
156d0     01 14 D6 F7 | 	test	arg02, #1 wc
156d4     5A 4C 64 FD | 	drvc	#38
156d8     01 14 D6 F7 | 	test	arg02, #1 wc
156dc     5A 4E 64 FD | 	drvc	#39
156e0                 | ' 'hubset( %1_000001__00_0001_1010__1111_1011)
156e0                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
156e0                 | ' 
156e0                 | ' '-------------------------------------------------------------------------------------------------------- 
156e0                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
156e0                 | ' '--------------------------------------------------------------------------------------------------------
156e0                 | ' 
156e0                 | ' do
156e0                 | LR__1700
156e0     01 12 06 F6 | 	mov	arg01, #1
156e4     20 1B B0 FD | 	call	#_hg010b_spin2_waitvbl
156e8     10 27 B0 FD | 	call	#_usbnew_spin2_get_key
156ec     64 00 00 FF 
156f0     48 E4 05 F1 | 	add	objptr, ##51272
156f4     F2 FA 61 FC | 	wrlong	result1, objptr
156f8                 | '   return hkbd_led_rep
156f8     13 00 00 FF 
156fc     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
15700     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
15704     13 00 00 FF 
15708     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
1570c     16 00 00 FF 
15710     14 E4 05 F1 | 	add	objptr, ##11284
15714     F2 FA 61 FC | 	wrlong	result1, objptr
15718                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,16384,0,1758): waitms(10): paula.stop(7)
15718     16 00 00 FF 
1571c     14 E4 85 F1 | 	sub	objptr, ##11284
15720     F2 20 02 FB | 	rdlong	local02, objptr
15724     64 00 00 FF 
15728     48 E4 85 F1 | 	sub	objptr, ##51272
1572c     01 20 16 F2 | 	cmp	local02, #1 wc
15730     BC 00 90 CD |  if_b	jmp	#LR__1701
15734     64 00 00 FF 
15738     48 E4 05 F1 | 	add	objptr, ##51272
1573c     F2 24 02 FB | 	rdlong	local04, objptr
15740     64 00 00 FF 
15744     48 E4 85 F1 | 	sub	objptr, ##51272
15748     12 23 02 F6 | 	mov	local03, local04
1574c     04 22 16 F2 | 	cmp	local03, #4 wc
15750     9C 00 90 3D |  if_ae	jmp	#LR__1701
15754     78 00 00 FF 
15758     B4 E5 05 F1 | 	add	objptr, ##61876
1575c     F2 1E 02 FB | 	rdlong	local01, objptr
15760     78 00 00 FF 
15764     B4 E5 85 F1 | 	sub	objptr, ##61876
15768     0F 27 02 F6 | 	mov	local05, local01
1576c     01 26 0E F2 | 	cmp	local05, #1 wz
15770     7C 00 90 5D |  if_ne	jmp	#LR__1701
15774     04 00 00 FF 
15778     94 EA 05 F1 | 	add	ptr__dat__, ##2196
1577c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
15780     04 00 00 FF 
15784     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
15788     56 00 00 FF 
1578c     44 22 06 F6 | 	mov	local03, ##44100
15790     0E 24 C6 F9 | 	decod	local04, #14
15794     00 26 06 F6 | 	mov	local05, #0
15798     03 00 00 FF 
1579c     DE 1E 06 F6 | 	mov	local01, ##1758
157a0     07 12 06 F6 | 	mov	arg01, #7
157a4     56 00 00 FF 
157a8     44 16 06 F6 | 	mov	arg03, ##44100
157ac     0E 18 C6 F9 | 	decod	arg04, #14
157b0     00 1A 06 F6 | 	mov	arg05, #0
157b4     03 00 00 FF 
157b8     DE 1C 06 F6 | 	mov	arg06, ##1758
157bc     0B 00 00 FF 
157c0     C0 E4 05 F1 | 	add	objptr, ##5824
157c4     5C 29 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
157c8     0B 00 00 FF 
157cc     C0 E4 85 F1 | 	sub	objptr, ##5824
157d0     0A 12 06 F6 | 	mov	arg01, #10
157d4     78 30 B0 FD | 	call	#__system___waitms
157d8     07 12 06 F6 | 	mov	arg01, #7
157dc     0B 00 00 FF 
157e0     C0 E4 05 F1 | 	add	objptr, ##5824
157e4     8C 2A B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
157e8     0B 00 00 FF 
157ec     C0 E4 85 F1 | 	sub	objptr, ##5824
157f0                 | LR__1701
157f0                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then let key2=key : let rpt=1 : let key3=key2
157f0     64 00 00 FF 
157f4     48 E4 05 F1 | 	add	objptr, ##51272
157f8     F2 20 02 FB | 	rdlong	local02, objptr
157fc     64 00 00 FF 
15800     48 E4 85 F1 | 	sub	objptr, ##51272
15804     04 20 16 F2 | 	cmp	local02, #4 wc
15808     80 00 90 CD |  if_b	jmp	#LR__1702
1580c     64 00 00 FF 
15810     48 E4 05 F1 | 	add	objptr, ##51272
15814     F2 24 02 FB | 	rdlong	local04, objptr
15818     64 00 00 FF 
1581c     48 E4 85 F1 | 	sub	objptr, ##51272
15820     12 23 02 F6 | 	mov	local03, local04
15824     00 00 40 FF 
15828     00 22 16 F2 | 	cmp	local03, ##-2147483648 wc
1582c     64 00 00 CF 
15830     48 E4 05 C1 |  if_b	add	objptr, ##51272
15834     F2 1E 02 CB |  if_b	rdlong	local01, objptr
15838     64 00 00 CF 
1583c     48 E4 85 C1 |  if_b	sub	objptr, ##51272
15840     0F 27 E2 C8 |  if_b	getbyte	local05, local01, #0
15844     E0 26 16 C2 |  if_b	cmp	local05, #224 wc
15848     40 00 90 3D |  if_ae	jmp	#LR__1702
1584c     64 00 00 FF 
15850     48 E4 05 F1 | 	add	objptr, ##51272
15854     F2 20 02 FB | 	rdlong	local02, objptr
15858     04 E4 05 F1 | 	add	objptr, #4
1585c     F2 20 62 FC | 	wrlong	local02, objptr
15860     16 00 00 FF 
15864     14 E4 05 F1 | 	add	objptr, ##11284
15868     F2 02 68 FC | 	wrlong	#1, objptr
1586c     16 00 00 FF 
15870     14 E4 85 F1 | 	sub	objptr, ##11284
15874     F2 20 02 FB | 	rdlong	local02, objptr
15878     16 00 00 FF 
1587c     18 E4 05 F1 | 	add	objptr, ##11288
15880     F2 20 62 FC | 	wrlong	local02, objptr
15884     7A 00 00 FF 
15888     64 E4 85 F1 | 	sub	objptr, ##62564
1588c                 | LR__1702
1588c                 | ' if key>$80000000 then let rptcnt=0 : let rpt=0
1588c     64 00 00 FF 
15890     48 E4 05 F1 | 	add	objptr, ##51272
15894     F2 20 02 FB | 	rdlong	local02, objptr
15898     64 00 00 FF 
1589c     48 E4 85 F1 | 	sub	objptr, ##51272
158a0     00 00 40 FF 
158a4     01 20 16 F2 | 	cmp	local02, ##-2147483647 wc
158a8     7A 00 00 3F 
158ac     68 E4 05 31 |  if_ae	add	objptr, ##62568
158b0     F2 00 68 3C |  if_ae	wrlong	#0, objptr
158b4     08 E4 85 31 |  if_ae	sub	objptr, #8
158b8     F2 00 68 3C |  if_ae	wrlong	#0, objptr
158bc     7A 00 00 3F 
158c0     60 E4 85 31 |  if_ae	sub	objptr, ##62560
158c4                 | ' if key=0 andalso rpt=1 then rptcnt+=1
158c4     64 00 00 FF 
158c8     48 E4 05 F1 | 	add	objptr, ##51272
158cc     F2 20 0A FB | 	rdlong	local02, objptr wz
158d0     64 00 00 FF 
158d4     48 E4 85 F1 | 	sub	objptr, ##51272
158d8     7A 00 00 AF 
158dc     60 E4 05 A1 |  if_e	add	objptr, ##62560
158e0     F2 24 02 AB |  if_e	rdlong	local04, objptr
158e4     7A 00 00 AF 
158e8     60 E4 85 A1 |  if_e	sub	objptr, ##62560
158ec     12 23 02 A6 |  if_e	mov	local03, local04
158f0     01 22 0E A2 |  if_e	cmp	local03, #1 wz
158f4     7A 00 00 AF 
158f8     68 E4 05 A1 |  if_e	add	objptr, ##62568
158fc     F2 20 02 AB |  if_e	rdlong	local02, objptr
15900     01 20 06 A1 |  if_e	add	local02, #1
15904     F2 20 62 AC |  if_e	wrlong	local02, objptr
15908     7A 00 00 AF 
1590c     68 E4 85 A1 |  if_e	sub	objptr, ##62568
15910                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
15910     64 00 00 FF 
15914     48 E4 05 F1 | 	add	objptr, ##51272
15918     F2 20 02 FB | 	rdlong	local02, objptr
1591c     64 00 00 FF 
15920     48 E4 85 F1 | 	sub	objptr, ##51272
15924     00 00 40 FF 
15928     00 20 16 F2 | 	cmp	local02, ##-2147483648 wc
1592c     44 00 90 3D |  if_ae	jmp	#LR__1704
15930     7A 00 00 FF 
15934     68 E4 05 F1 | 	add	objptr, ##62568
15938     F2 20 02 FB | 	rdlong	local02, objptr
1593c     7A 00 00 FF 
15940     68 E4 85 F1 | 	sub	objptr, ##62568
15944     19 20 0E F2 | 	cmp	local02, #25 wz
15948     28 00 90 5D |  if_ne	jmp	#LR__1703
1594c     64 00 00 FF 
15950     4C E4 05 F1 | 	add	objptr, ##51276
15954     F2 20 02 FB | 	rdlong	local02, objptr
15958     16 00 00 FF 
1595c     18 E4 05 F1 | 	add	objptr, ##11288
15960     F2 20 62 FC | 	wrlong	local02, objptr
15964     04 E4 05 F1 | 	add	objptr, #4
15968     F2 2A 68 FC | 	wrlong	#21, objptr
1596c     7A 00 00 FF 
15970     68 E4 85 F1 | 	sub	objptr, ##62568
15974                 | LR__1703
15974                 | LR__1704
15974                 | ' 
15974                 | ' 
15974                 | ' if key3<>0 then
15974     7A 00 00 FF 
15978     64 E4 05 F1 | 	add	objptr, ##62564
1597c     F2 28 0A FB | 	rdlong	local06, objptr wz
15980     7A 00 00 FF 
15984     64 E4 85 F1 | 	sub	objptr, ##62564
15988     54 FD 9F AD |  if_e	jmp	#LR__1700
1598c                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,16384,spl_len) 
1598c     78 00 00 FF 
15990     B4 E5 05 F1 | 	add	objptr, ##61876
15994     F2 20 02 FB | 	rdlong	local02, objptr
15998     78 00 00 FF 
1599c     B4 E5 85 F1 | 	sub	objptr, ##61876
159a0     01 20 0E F2 | 	cmp	local02, #1 wz
159a4     50 00 90 5D |  if_ne	jmp	#LR__1705
159a8     7A 00 00 FF 
159ac     58 E4 05 F1 | 	add	objptr, ##62552
159b0     F2 14 02 FB | 	rdlong	arg02, objptr
159b4     56 00 00 FF 
159b8     44 22 06 F6 | 	mov	local03, ##44100
159bc     0E 24 C6 F9 | 	decod	local04, #14
159c0     04 E4 85 F1 | 	sub	objptr, #4
159c4     F2 26 02 FB | 	rdlong	local05, objptr
159c8     01 1E 66 F6 | 	neg	local01, #1
159cc     07 12 06 F6 | 	mov	arg01, #7
159d0     56 00 00 FF 
159d4     44 16 06 F6 | 	mov	arg03, ##44100
159d8     0E 18 C6 F9 | 	decod	arg04, #14
159dc     13 1B 02 F6 | 	mov	arg05, local05
159e0     01 1C 66 F6 | 	neg	arg06, #1
159e4     6E 00 00 FF 
159e8     94 E5 85 F1 | 	sub	objptr, ##56724
159ec     34 27 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
159f0     0B 00 00 FF 
159f4     C0 E4 85 F1 | 	sub	objptr, ##5824
159f8                 | LR__1705
159f8     7A 00 00 FF 
159fc     64 E4 05 F1 | 	add	objptr, ##62564
15a00     F2 12 02 FB | 	rdlong	arg01, objptr
15a04     7A 00 00 FF 
15a08     64 E4 85 F1 | 	sub	objptr, ##62564
15a0c     3C F8 BF FD | 	call	#_scantochar
15a10     7A 00 00 FF 
15a14     6C E4 05 F1 | 	add	objptr, ##62572
15a18     F2 FA 61 FC | 	wrlong	result1, objptr
15a1c                 | '   if leds and 2 = 2 then 
15a1c     10 E4 85 F1 | 	sub	objptr, #16
15a20     F2 20 0A FB | 	rdlong	local02, objptr wz
15a24     7A 00 00 FF 
15a28     5C E4 85 F1 | 	sub	objptr, ##62556
15a2c     68 01 90 AD |  if_e	jmp	#LR__1713
15a30                 | '     if key4>96 andalso key4<123 then
15a30     7A 00 00 FF 
15a34     6C E4 05 F1 | 	add	objptr, ##62572
15a38     F2 20 02 FB | 	rdlong	local02, objptr
15a3c     7A 00 00 FF 
15a40     6C E4 85 F1 | 	sub	objptr, ##62572
15a44     61 20 56 F2 | 	cmps	local02, #97 wc
15a48     40 00 90 CD |  if_b	jmp	#LR__1706
15a4c     7A 00 00 FF 
15a50     6C E4 05 F1 | 	add	objptr, ##62572
15a54     F2 24 02 FB | 	rdlong	local04, objptr
15a58     7A 00 00 FF 
15a5c     6C E4 85 F1 | 	sub	objptr, ##62572
15a60     12 23 02 F6 | 	mov	local03, local04
15a64     7B 22 56 F2 | 	cmps	local03, #123 wc
15a68     20 00 90 3D |  if_ae	jmp	#LR__1706
15a6c     7A 00 00 FF 
15a70     6C E4 05 F1 | 	add	objptr, ##62572
15a74     F2 20 02 FB | 	rdlong	local02, objptr
15a78     20 20 86 F1 | 	sub	local02, #32
15a7c     F2 20 62 FC | 	wrlong	local02, objptr
15a80     7A 00 00 FF 
15a84     6C E4 85 F1 | 	sub	objptr, ##62572
15a88     0C 01 90 FD | 	jmp	#LR__1712
15a8c                 | LR__1706
15a8c     7A 00 00 FF 
15a90     6C E4 05 F1 | 	add	objptr, ##62572
15a94     F2 20 02 FB | 	rdlong	local02, objptr
15a98     7A 00 00 FF 
15a9c     6C E4 85 F1 | 	sub	objptr, ##62572
15aa0     41 20 56 F2 | 	cmps	local02, #65 wc
15aa4     40 00 90 CD |  if_b	jmp	#LR__1707
15aa8     7A 00 00 FF 
15aac     6C E4 05 F1 | 	add	objptr, ##62572
15ab0     F2 24 02 FB | 	rdlong	local04, objptr
15ab4     7A 00 00 FF 
15ab8     6C E4 85 F1 | 	sub	objptr, ##62572
15abc     12 23 02 F6 | 	mov	local03, local04
15ac0     5B 22 56 F2 | 	cmps	local03, #91 wc
15ac4     20 00 90 3D |  if_ae	jmp	#LR__1707
15ac8     7A 00 00 FF 
15acc     6C E4 05 F1 | 	add	objptr, ##62572
15ad0     F2 20 02 FB | 	rdlong	local02, objptr
15ad4     20 20 06 F1 | 	add	local02, #32
15ad8     F2 20 62 FC | 	wrlong	local02, objptr
15adc     7A 00 00 FF 
15ae0     6C E4 85 F1 | 	sub	objptr, ##62572
15ae4     B0 00 90 FD | 	jmp	#LR__1711
15ae8                 | LR__1707
15ae8     7A 00 00 FF 
15aec     6C E4 05 F1 | 	add	objptr, ##62572
15af0     F2 20 02 FB | 	rdlong	local02, objptr
15af4     7A 00 00 FF 
15af8     6C E4 85 F1 | 	sub	objptr, ##62572
15afc     17 20 56 F2 | 	cmps	local02, #23 wc
15b00     40 00 90 CD |  if_b	jmp	#LR__1708
15b04     7A 00 00 FF 
15b08     6C E4 05 F1 | 	add	objptr, ##62572
15b0c     F2 24 02 FB | 	rdlong	local04, objptr
15b10     7A 00 00 FF 
15b14     6C E4 85 F1 | 	sub	objptr, ##62572
15b18     12 23 02 F6 | 	mov	local03, local04
15b1c     20 22 56 F2 | 	cmps	local03, #32 wc
15b20     20 00 90 3D |  if_ae	jmp	#LR__1708
15b24     7A 00 00 FF 
15b28     6C E4 05 F1 | 	add	objptr, ##62572
15b2c     F2 20 02 FB | 	rdlong	local02, objptr
15b30     09 20 86 F1 | 	sub	local02, #9
15b34     F2 20 62 FC | 	wrlong	local02, objptr
15b38     7A 00 00 FF 
15b3c     6C E4 85 F1 | 	sub	objptr, ##62572
15b40     54 00 90 FD | 	jmp	#LR__1710
15b44                 | LR__1708
15b44     7A 00 00 FF 
15b48     6C E4 05 F1 | 	add	objptr, ##62572
15b4c     F2 20 02 FB | 	rdlong	local02, objptr
15b50     7A 00 00 FF 
15b54     6C E4 85 F1 | 	sub	objptr, ##62572
15b58     0E 20 56 F2 | 	cmps	local02, #14 wc
15b5c     38 00 90 CD |  if_b	jmp	#LR__1709
15b60     7A 00 00 FF 
15b64     6C E4 05 F1 | 	add	objptr, ##62572
15b68     F2 24 02 FB | 	rdlong	local04, objptr
15b6c     7A 00 00 FF 
15b70     6C E4 85 F1 | 	sub	objptr, ##62572
15b74     12 23 02 F6 | 	mov	local03, local04
15b78     17 22 56 F2 | 	cmps	local03, #23 wc
15b7c     7A 00 00 CF 
15b80     6C E4 05 C1 |  if_b	add	objptr, ##62572
15b84     F2 20 02 CB |  if_b	rdlong	local02, objptr
15b88     27 20 06 C1 |  if_b	add	local02, #39
15b8c     F2 20 62 CC |  if_b	wrlong	local02, objptr
15b90     7A 00 00 CF 
15b94     6C E4 85 C1 |  if_b	sub	objptr, ##62572
15b98                 | LR__1709
15b98                 | LR__1710
15b98                 | LR__1711
15b98                 | LR__1712
15b98                 | LR__1713
15b98                 | '  
15b98                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then line$+=chr$(key4): v.putchar(key4)
15b98     7A 00 00 FF 
15b9c     6C E4 05 F1 | 	add	objptr, ##62572
15ba0     F2 20 02 FB | 	rdlong	local02, objptr
15ba4     7A 00 00 FF 
15ba8     6C E4 85 F1 | 	sub	objptr, ##62572
15bac     01 20 56 F2 | 	cmps	local02, #1 wc
15bb0     90 00 90 CD |  if_b	jmp	#LR__1714
15bb4     7A 00 00 FF 
15bb8     6C E4 05 F1 | 	add	objptr, ##62572
15bbc     F2 24 02 FB | 	rdlong	local04, objptr
15bc0     7A 00 00 FF 
15bc4     6C E4 85 F1 | 	sub	objptr, ##62572
15bc8     12 23 02 F6 | 	mov	local03, local04
15bcc     7F 22 56 F2 | 	cmps	local03, #127 wc
15bd0     38 E4 05 C1 |  if_b	add	objptr, #56
15bd4     F2 1E E2 CA |  if_b	rdword	local01, objptr
15bd8     38 E4 85 C1 |  if_b	sub	objptr, #56
15bdc     0F 27 32 C9 |  if_b	getword	local05, local01, #0
15be0     FE 26 16 C2 |  if_b	cmp	local05, #254 wc
15be4     5C 00 90 3D |  if_ae	jmp	#LR__1714
15be8     7A 00 00 FF 
15bec     6C E4 05 F1 | 	add	objptr, ##62572
15bf0     F2 12 02 FB | 	rdlong	arg01, objptr
15bf4     7A 00 00 FF 
15bf8     6C E4 85 F1 | 	sub	objptr, ##62572
15bfc     2C 4B B0 FD | 	call	#__system__Chr_S
15c00     FD 2A 02 F6 | 	mov	local07, result1
15c04     55 00 00 FF 
15c08     F0 E5 05 F1 | 	add	objptr, ##44016
15c0c     F2 12 02 FB | 	rdlong	arg01, objptr
15c10     55 00 00 FF 
15c14     F0 E5 85 F1 | 	sub	objptr, ##44016
15c18     15 15 02 F6 | 	mov	arg02, local07
15c1c     98 29 B0 FD | 	call	#__system___string_concat
15c20     55 00 00 FF 
15c24     F0 E5 05 F1 | 	add	objptr, ##44016
15c28     F2 FA 61 FC | 	wrlong	result1, objptr
15c2c     24 00 00 FF 
15c30     7C E4 05 F1 | 	add	objptr, ##18556
15c34     F2 12 02 FB | 	rdlong	arg01, objptr
15c38     7A 00 00 FF 
15c3c     6C E4 85 F1 | 	sub	objptr, ##62572
15c40     D4 16 B0 FD | 	call	#_hg010b_spin2_putchar
15c44                 | LR__1714
15c44                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(7) 'end of line reached
15c44     7A 00 00 FF 
15c48     6C E4 05 F1 | 	add	objptr, ##62572
15c4c     F2 20 02 FB | 	rdlong	local02, objptr
15c50     7A 00 00 FF 
15c54     6C E4 85 F1 | 	sub	objptr, ##62572
15c58     01 20 56 F2 | 	cmps	local02, #1 wc
15c5c     D0 00 90 CD |  if_b	jmp	#LR__1715
15c60     7A 00 00 FF 
15c64     6C E4 05 F1 | 	add	objptr, ##62572
15c68     F2 24 02 FB | 	rdlong	local04, objptr
15c6c     7A 00 00 FF 
15c70     6C E4 85 F1 | 	sub	objptr, ##62572
15c74     12 23 02 F6 | 	mov	local03, local04
15c78     7F 22 56 F2 | 	cmps	local03, #127 wc
15c7c     B0 00 90 3D |  if_ae	jmp	#LR__1715
15c80     38 E4 05 F1 | 	add	objptr, #56
15c84     F2 1E E2 FA | 	rdword	local01, objptr
15c88     38 E4 85 F1 | 	sub	objptr, #56
15c8c     0F 27 32 F9 | 	getword	local05, local01, #0
15c90     FE 26 0E F2 | 	cmp	local05, #254 wz
15c94     78 00 00 AF 
15c98     B4 E5 05 A1 |  if_e	add	objptr, ##61876
15c9c     F2 2C 02 AB |  if_e	rdlong	local08, objptr
15ca0     78 00 00 AF 
15ca4     B4 E5 85 A1 |  if_e	sub	objptr, ##61876
15ca8     16 2F 02 A6 |  if_e	mov	local09, local08
15cac     01 2E 0E A2 |  if_e	cmp	local09, #1 wz
15cb0     7C 00 90 5D |  if_ne	jmp	#LR__1715
15cb4     04 00 00 FF 
15cb8     94 EA 05 F1 | 	add	ptr__dat__, ##2196
15cbc     F5 14 02 F6 | 	mov	arg02, ptr__dat__
15cc0     04 00 00 FF 
15cc4     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
15cc8     56 00 00 FF 
15ccc     44 22 06 F6 | 	mov	local03, ##44100
15cd0     0E 24 C6 F9 | 	decod	local04, #14
15cd4     00 26 06 F6 | 	mov	local05, #0
15cd8     03 00 00 FF 
15cdc     DE 1E 06 F6 | 	mov	local01, ##1758
15ce0     07 12 06 F6 | 	mov	arg01, #7
15ce4     56 00 00 FF 
15ce8     44 16 06 F6 | 	mov	arg03, ##44100
15cec     0E 18 C6 F9 | 	decod	arg04, #14
15cf0     00 1A 06 F6 | 	mov	arg05, #0
15cf4     03 00 00 FF 
15cf8     DE 1C 06 F6 | 	mov	arg06, ##1758
15cfc     0B 00 00 FF 
15d00     C0 E4 05 F1 | 	add	objptr, ##5824
15d04     1C 24 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
15d08     0B 00 00 FF 
15d0c     C0 E4 85 F1 | 	sub	objptr, ##5824
15d10     2C 13 06 F6 | 	mov	arg01, #300
15d14     38 2B B0 FD | 	call	#__system___waitms
15d18     07 12 06 F6 | 	mov	arg01, #7
15d1c     0B 00 00 FF 
15d20     C0 E4 05 F1 | 	add	objptr, ##5824
15d24     4C 25 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
15d28     0B 00 00 FF 
15d2c     C0 E4 85 F1 | 	sub	objptr, ##5824
15d30                 | LR__1715
15d30                 | '  
15d30                 | '   'tab
15d30                 | '   if (key3 and 255) = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)
15d30     7A 00 00 FF 
15d34     64 E4 05 F1 | 	add	objptr, ##62564
15d38     F2 20 02 FB | 	rdlong	local02, objptr
15d3c     7A 00 00 FF 
15d40     64 E4 85 F1 | 	sub	objptr, ##62564
15d44     10 21 E2 F8 | 	getbyte	local02, local02, #0
15d48     2B 20 0E F2 | 	cmp	local02, #43 wz
15d4c     B4 00 90 5D |  if_ne	jmp	#LR__1716
15d50     38 E4 05 F1 | 	add	objptr, #56
15d54     F2 24 E2 FA | 	rdword	local04, objptr
15d58     38 E4 85 F1 | 	sub	objptr, #56
15d5c     12 23 32 F9 | 	getword	local03, local04, #0
15d60     F0 22 16 F2 | 	cmp	local03, #240 wc
15d64     9C 00 90 CD |  if_b	jmp	#LR__1716
15d68     78 00 00 FF 
15d6c     B4 E5 05 F1 | 	add	objptr, ##61876
15d70     F2 1E 02 FB | 	rdlong	local01, objptr
15d74     78 00 00 FF 
15d78     B4 E5 85 F1 | 	sub	objptr, ##61876
15d7c     0F 27 02 F6 | 	mov	local05, local01
15d80     01 26 0E F2 | 	cmp	local05, #1 wz
15d84     7C 00 90 5D |  if_ne	jmp	#LR__1716
15d88     04 00 00 FF 
15d8c     94 EA 05 F1 | 	add	ptr__dat__, ##2196
15d90     F5 14 02 F6 | 	mov	arg02, ptr__dat__
15d94     04 00 00 FF 
15d98     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
15d9c     56 00 00 FF 
15da0     44 22 06 F6 | 	mov	local03, ##44100
15da4     0E 24 C6 F9 | 	decod	local04, #14
15da8     00 26 06 F6 | 	mov	local05, #0
15dac     03 00 00 FF 
15db0     DE 1E 06 F6 | 	mov	local01, ##1758
15db4     00 12 06 F6 | 	mov	arg01, #0
15db8     56 00 00 FF 
15dbc     44 16 06 F6 | 	mov	arg03, ##44100
15dc0     0E 18 C6 F9 | 	decod	arg04, #14
15dc4     00 1A 06 F6 | 	mov	arg05, #0
15dc8     03 00 00 FF 
15dcc     DE 1C 06 F6 | 	mov	arg06, ##1758
15dd0     0B 00 00 FF 
15dd4     C0 E4 05 F1 | 	add	objptr, ##5824
15dd8     48 23 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
15ddc     0B 00 00 FF 
15de0     C0 E4 85 F1 | 	sub	objptr, ##5824
15de4     2C 13 06 F6 | 	mov	arg01, #300
15de8     64 2A B0 FD | 	call	#__system___waitms
15dec     00 12 06 F6 | 	mov	arg01, #0
15df0     0B 00 00 FF 
15df4     C0 E4 05 F1 | 	add	objptr, ##5824
15df8     78 24 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
15dfc     0B 00 00 FF 
15e00     C0 E4 85 F1 | 	sub	objptr, ##5824
15e04                 | LR__1716
15e04                 | '   if (key3 and 255) = 43 andalso v.cursor_x<240 then let x=(v.cursor_x mod 16)/2: for i=x to 7: line$+=" " :  v.write (" ") : next i  
15e04     7A 00 00 FF 
15e08     64 E4 05 F1 | 	add	objptr, ##62564
15e0c     F2 20 02 FB | 	rdlong	local02, objptr
15e10     7A 00 00 FF 
15e14     64 E4 85 F1 | 	sub	objptr, ##62564
15e18     10 21 E2 F8 | 	getbyte	local02, local02, #0
15e1c     2B 20 0E F2 | 	cmp	local02, #43 wz
15e20     AC 00 90 5D |  if_ne	jmp	#LR__1719
15e24     38 E4 05 F1 | 	add	objptr, #56
15e28     F2 24 E2 FA | 	rdword	local04, objptr
15e2c     38 E4 85 F1 | 	sub	objptr, #56
15e30     12 23 32 F9 | 	getword	local03, local04, #0
15e34     F0 22 16 F2 | 	cmp	local03, #240 wc
15e38     94 00 90 3D |  if_ae	jmp	#LR__1719
15e3c     38 E4 05 F1 | 	add	objptr, #56
15e40     F2 20 E2 FA | 	rdword	local02, objptr
15e44     10 23 52 F6 | 	abs	local03, local02 wc
15e48     11 23 42 F8 | 	getnib	local03, local03, #0
15e4c     11 23 82 F6 | 	negc	local03, local03
15e50     11 25 52 F6 | 	abs	local04, local03 wc
15e54     01 24 46 F0 | 	shr	local04, #1
15e58     12 25 82 F6 | 	negc	local04, local04
15e5c     7A 00 00 FF 
15e60     38 E4 05 F1 | 	add	objptr, ##62520
15e64     F2 24 62 FC | 	wrlong	local04, objptr
15e68     12 31 02 F6 | 	mov	local10, local04
15e6c     7A 00 00 FF 
15e70     70 E4 85 F1 | 	sub	objptr, ##62576
15e74                 | LR__1717
15e74     08 30 56 F2 | 	cmps	local10, #8 wc
15e78     54 00 90 3D |  if_ae	jmp	#LR__1718
15e7c     55 00 00 FF 
15e80     F0 E5 05 F1 | 	add	objptr, ##44016
15e84     F2 12 02 FB | 	rdlong	arg01, objptr
15e88     55 00 00 FF 
15e8c     F0 E5 85 F1 | 	sub	objptr, ##44016
15e90     41 01 00 FF 
15e94     CF 25 06 F6 | 	mov	local04, ##@LR__4667
15e98     12 15 02 F6 | 	mov	arg02, local04
15e9c     18 27 B0 FD | 	call	#__system___string_concat
15ea0     55 00 00 FF 
15ea4     F0 E5 05 F1 | 	add	objptr, ##44016
15ea8     F2 FA 61 FC | 	wrlong	result1, objptr
15eac     55 00 00 FF 
15eb0     F0 E5 85 F1 | 	sub	objptr, ##44016
15eb4     41 01 00 FF 
15eb8     D1 13 06 F6 | 	mov	arg01, ##@LR__4668
15ebc     74 16 B0 FD | 	call	#_hg010b_spin2_write
15ec0     18 23 02 F6 | 	mov	local03, local10
15ec4     01 22 06 F1 | 	add	local03, #1
15ec8     11 31 02 F6 | 	mov	local10, local03
15ecc     A4 FF 9F FD | 	jmp	#LR__1717
15ed0                 | LR__1718
15ed0                 | LR__1719
15ed0                 | '  
15ed0                 | '   'backspace
15ed0                 | '   if (key3 and 255) = 42 then 
15ed0     7A 00 00 FF 
15ed4     64 E4 05 F1 | 	add	objptr, ##62564
15ed8     F2 20 02 FB | 	rdlong	local02, objptr
15edc     7A 00 00 FF 
15ee0     64 E4 85 F1 | 	sub	objptr, ##62564
15ee4     10 21 E2 F8 | 	getbyte	local02, local02, #0
15ee8     2A 20 0E F2 | 	cmp	local02, #42 wz
15eec     D4 00 90 5D |  if_ne	jmp	#LR__1724
15ef0                 | '       if v.cursor_x>4 then 
15ef0     38 E4 05 F1 | 	add	objptr, #56
15ef4     F2 20 E2 FA | 	rdword	local02, objptr
15ef8     38 E4 85 F1 | 	sub	objptr, #56
15efc     05 20 16 F2 | 	cmp	local02, #5 wc
15f00     9C 00 90 CD |  if_b	jmp	#LR__1722
15f04     55 00 00 FF 
15f08     F0 E5 05 F1 | 	add	objptr, ##44016
15f0c     F2 26 02 FB | 	rdlong	local05, objptr
15f10     55 00 00 FF 
15f14     F0 E5 85 F1 | 	sub	objptr, ##44016
15f18     13 13 02 F6 | 	mov	arg01, local05
15f1c     09 33 02 F6 | 	mov	local11, arg01
15f20     97 06 48 FB | 	callpa	#(@LR__1721-@LR__1720)>>2,fcache_load_ptr_
15f24                 | LR__1720
15f24     19 FB C9 FA | 	rdbyte	result1, local11 wz
15f28     01 32 06 51 |  if_ne	add	local11, #1
15f2c     F4 FF 9F 5D |  if_ne	jmp	#LR__1720
15f30                 | LR__1721
15f30     09 33 82 F1 | 	sub	local11, arg01
15f34     19 15 02 F6 | 	mov	arg02, local11
15f38     01 14 86 F1 | 	sub	arg02, #1
15f3c     13 13 02 F6 | 	mov	arg01, local05
15f40     24 46 B0 FD | 	call	#__system__Left_S
15f44     55 00 00 FF 
15f48     F0 E5 05 F1 | 	add	objptr, ##44016
15f4c     F2 FA 61 FC | 	wrlong	result1, objptr
15f50     55 00 00 FF 
15f54     B8 E5 85 F1 | 	sub	objptr, ##43960
15f58     F2 12 E2 FA | 	rdword	arg01, objptr
15f5c     02 12 86 F1 | 	sub	arg01, #2
15f60     02 E4 05 F1 | 	add	objptr, #2
15f64     F2 14 C2 FA | 	rdbyte	arg02, objptr
15f68     3A E4 85 F1 | 	sub	objptr, #58
15f6c     60 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
15f70     20 12 06 F6 | 	mov	arg01, #32
15f74     A0 13 B0 FD | 	call	#_hg010b_spin2_putchar
15f78     38 E4 05 F1 | 	add	objptr, #56
15f7c     F2 12 E2 FA | 	rdword	arg01, objptr
15f80     02 12 86 F1 | 	sub	arg01, #2
15f84     02 E4 05 F1 | 	add	objptr, #2
15f88     F2 24 C2 FA | 	rdbyte	local04, objptr
15f8c     3A E4 85 F1 | 	sub	objptr, #58
15f90     12 23 E2 F8 | 	getbyte	local03, local04, #0
15f94     11 15 02 F6 | 	mov	arg02, local03
15f98     34 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
15f9c     24 00 90 FD | 	jmp	#LR__1723
15fa0                 | LR__1722
15fa0     41 01 00 FF 
15fa4     D3 21 06 F6 | 	mov	local02, ##@LR__4669
15fa8     55 00 00 FF 
15fac     F0 E5 05 F1 | 	add	objptr, ##44016
15fb0     F2 20 62 FC | 	wrlong	local02, objptr
15fb4     55 00 00 FF 
15fb8     B8 E5 85 F1 | 	sub	objptr, ##43960
15fbc     F2 08 58 FC | 	wrword	#4, objptr
15fc0     38 E4 85 F1 | 	sub	objptr, #56
15fc4                 | LR__1723
15fc4                 | LR__1724
15fc4                 | '    
15fc4                 | '  ' To do: arrows and DEL; use textscreen array to implement fullscreen editing
15fc4                 | '  
15fc4                 | '   if key4=key_enter then 
15fc4     7A 00 00 FF 
15fc8     6C E4 05 F1 | 	add	objptr, ##62572
15fcc     F2 28 02 FB | 	rdlong	local06, objptr
15fd0     7A 00 00 FF 
15fd4     6C E4 85 F1 | 	sub	objptr, ##62572
15fd8     8D 28 0E F2 | 	cmp	local06, #141 wz
15fdc     50 00 90 5D |  if_ne	jmp	#LR__1725
15fe0     B0 16 B0 FD | 	call	#_hg010b_spin2_crlf
15fe4     34 AA BE FD | 	call	#_interpret
15fe8     41 01 00 FF 
15fec     D4 21 06 F6 | 	mov	local02, ##@LR__4670
15ff0     55 00 00 FF 
15ff4     F0 E5 05 F1 | 	add	objptr, ##44016
15ff8     F2 20 62 FC | 	wrlong	local02, objptr
15ffc     1A FA 61 FD | 	getct	result1
16000     24 00 00 FF 
16004     84 E4 05 F1 | 	add	objptr, ##18564
16008     F2 24 02 FB | 	rdlong	local04, objptr
1600c     12 23 02 F6 | 	mov	local03, local04
16010     11 FB 81 F1 | 	sub	result1, local03
16014     F2 FA 61 FC | 	wrlong	result1, objptr
16018     14 E4 85 F1 | 	sub	objptr, #20
1601c     F2 00 68 FC | 	wrlong	#0, objptr
16020     08 E4 05 F1 | 	add	objptr, #8
16024     F2 00 68 FC | 	wrlong	#0, objptr
16028     7A 00 00 FF 
1602c     68 E4 85 F1 | 	sub	objptr, ##62568
16030                 | LR__1725
16030     7A 00 00 FF 
16034     64 E4 05 F1 | 	add	objptr, ##62564
16038     F2 00 68 FC | 	wrlong	#0, objptr
1603c     7A 00 00 FF 
16040     64 E4 85 F1 | 	sub	objptr, ##62564
16044     98 F6 9F FD | 	jmp	#LR__1700
16048     A7 F0 03 F6 | 	mov	ptra, fp
1604c     B2 00 A0 FD | 	call	#popregs_
16050                 | _program_ret
16050     2D 00 64 FD | 	ret
16054                 | 
16054                 | ' '' this is not a main program.
16054                 | ' 
16054                 | ' '****************************************************************************************************************
16054                 | ' '                                                                                                             	*
16054                 | ' 'Start the driver with graphics mode 'mode' at pins 'base'                            		rev 20220320 	*
16054                 | ' '                                                                                                            	*
16054                 | ' ' mode - mode #, see below											*
16054                 | ' ' base - HDMI base pin												*
16054                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
16054                 | ' '														*
16054                 | ' '' mode number: :  %p_tn_bb_cc_vv_hh										*
16054                 | ' '' set bit #15 for custom timings														*
16054                 | ' '' p - 1 - psram, 0 - hub											*
16054                 | ' '' t - 1 - graphics, 0 - text											*
16054                 | ' '' n - 1 - 60 Hz,  0 - 50 Hz 											*
16054                 | ' '' hh - h.zoom, vv-v.zoom, cc-color depth if graphic, unused in text,						*
16054                 | ' '' bb - borders, 00-wide, 01 medium, 10 no border, 11 no border, extended resolution (1024x576/896x496)		*
16054                 | ' '														*
16054                 | ' '****************************************************************************************************************
16054                 | ' 
16054                 | ' pub start(base,mb):result |i
16054                 | _hg010b_spin2_start
16054                 | ' 
16054                 | ' '--------------------------- initialize pointers and variables
16054                 | ' 
16054                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
16054     30 E4 05 F1 | 	add	objptr, #48
16058     F2 FA 01 F6 | 	mov	result1, objptr
1605c     28 E4 85 F1 | 	sub	objptr, #40
16060     F2 FA 61 FC | 	wrlong	result1, objptr
16064                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
16064                 | ' hdmibase:=base							' HDMI base pin, 8*n
16064     18 E4 05 F1 | 	add	objptr, #24
16068     F2 12 62 FC | 	wrlong	arg01, objptr
1606c                 | ' mailbox_ptr:=mb		
1606c     04 E4 05 F1 | 	add	objptr, #4
16070     F2 14 62 FC | 	wrlong	arg02, objptr
16074                 | ' mailbox0:=mb				' PSRAM mailbox pointer
16074     C1 E5 05 F1 | 	add	objptr, #449
16078     F2 14 62 FC | 	wrlong	arg02, objptr
1607c                 | ' sprite_ptr:=@spr1ptr
1607c     D8 E4 85 F1 | 	sub	objptr, #216
16080     F2 FA 01 F6 | 	mov	result1, objptr
16084     E5 E4 85 F1 | 	sub	objptr, #229
16088     F2 FA 61 FC | 	wrlong	result1, objptr
1608c                 | ' 
1608c                 | ' 		'
1608c                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
1608c     E5 E4 05 F1 | 	add	objptr, #229
16090     F2 FA 01 FB | 	rdlong	result1, objptr
16094     D0 FA 05 F1 | 	add	result1, #208
16098     FD 10 58 FC | 	wrword	#8, result1
1609c                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
1609c     F2 16 02 FB | 	rdlong	arg03, objptr
160a0     D2 16 06 F1 | 	add	arg03, #210
160a4     0B 21 58 FC | 	wrword	#16, arg03
160a8                 | ' leading_spaces:=0				'
160a8     A5 E5 05 F1 | 	add	objptr, #421
160ac     F2 00 68 FC | 	wrlong	#0, objptr
160b0                 | ' 
160b0                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
160b0     99 E4 85 F1 | 	sub	objptr, #153
160b4     00 00 A0 FF 
160b8     F2 0E 68 FC | 	wrlong	##1073741831, objptr
160bc                 | ' emptydl[1]:=0
160bc     04 E4 05 F1 | 	add	objptr, #4
160c0     F2 00 68 FC | 	wrlong	#0, objptr
160c4                 | ' 
160c4                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
160c4                 | ' 
160c4                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
160c4     28 E5 85 F1 | 	sub	objptr, #296
160c8     F2 02 68 FC | 	wrlong	#1, objptr
160cc                 | ' if s_debug<>0
160cc                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
160cc     20 00 80 FF 
160d0     F2 00 68 FC | 	wrlong	##16384, objptr
160d4     F5 E4 85 F1 | 	sub	objptr, #245
160d8                 | ' setmode()							' set the mode, see below
160d8     A4 01 B0 FD | 	call	#_hg010b_spin2_setmode
160dc                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
160dc     45 E4 05 F1 | 	add	objptr, #69
160e0     F2 FA 01 F6 | 	mov	result1, objptr
160e4     35 E4 85 F1 | 	sub	objptr, #53
160e8     F2 FA 61 FC | 	wrlong	result1, objptr
160ec                 | ' cursor_ptr:=@cursor_x						
160ec     28 E4 05 F1 | 	add	objptr, #40
160f0     F2 16 02 F6 | 	mov	arg03, objptr
160f4     2C E4 85 F1 | 	sub	objptr, #44
160f8     F2 16 62 FC | 	wrlong	arg03, objptr
160fc                 | ' fontnum:=0  							' start with a PC type font 
160fc     55 E4 05 F1 | 	add	objptr, #85
16100     F2 00 68 FC | 	wrlong	#0, objptr
16104                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
16104     1C E4 05 F1 | 	add	objptr, #28
16108     F2 12 02 F6 | 	mov	arg01, objptr
1610c     7D E4 85 F1 | 	sub	objptr, #125
16110     10 00 00 FF 
16114     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
16118     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1611c     10 00 00 FF 
16120     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
16124     10 16 06 F6 | 	mov	arg03, #16
16128     50 23 B0 FD | 	call	#__system____builtin_memmove
1612c                 | ' leading_spaces:=0
1612c     01 00 00 FF 
16130     B2 E4 05 F1 | 	add	objptr, ##690
16134     F2 00 68 FC | 	wrlong	#0, objptr
16138     01 00 00 FF 
1613c     B2 E4 85 F1 | 	sub	objptr, ##690
16140                 | ' '---------------------------- initialize a cursor (MSDOS type)
16140                 | ' 
16140                 | ' initcursor(154)
16140     9A 12 06 F6 | 	mov	arg01, #154
16144     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
16148                 | ' 
16148                 | ' '---------------------------- start the cog
16148                 | ' 
16148                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
16148     10 00 00 FF 
1614c     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
16150     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
16154     10 00 00 FF 
16158     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
1615c     10 E4 05 F1 | 	add	objptr, #16
16160     10 FA 05 F6 | 	mov	result1, #16
16164     28 E4 61 FD | 	setq	objptr
16168     0A FB F1 FC | 	coginit	result1, arg02 wc
1616c     01 FA 65 C6 |  if_b	neg	result1, #1
16170     1C E4 05 F1 | 	add	objptr, #28
16174     F2 FA 61 FC | 	wrlong	result1, objptr
16178     2C E4 85 F1 | 	sub	objptr, #44
1617c                 | ' waitms(40)							' wait for stabilize
1617c     28 12 06 F6 | 	mov	arg01, #40
16180     CC 26 B0 FD | 	call	#__system___waitms
16184                 | ' return cog							' return the driver's cog #
16184     2C E4 05 F1 | 	add	objptr, #44
16188     F2 FA 01 FB | 	rdlong	result1, objptr
1618c     2C E4 85 F1 | 	sub	objptr, #44
16190                 | _hg010b_spin2_start_ret
16190     2D 00 64 FD | 	ret
16194                 | 
16194                 | ' 
16194                 | ' 
16194                 | ' '**************************************************************************************************************** 
16194                 | ' '                                                                                                             	*
16194                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
16194                 | ' '  Mode number - see start() above or bits below								*
16194                 | ' '                                                                                                             	*
16194                 | ' '****************************************************************************************************************
16194                 | ' 
16194                 | ' '---------------------------- initialize a cursor (MSDOS type)
16194                 | ' pub initcursor(color) |i
16194                 | _hg010b_spin2_initcursor
16194     03 4A 05 F6 | 	mov	COUNT_, #3
16198     A8 00 A0 FD | 	call	#pushregs_
1619c     09 1F 02 F6 | 	mov	local01, arg01
161a0                 | ' 
161a0                 | ' cursor_x:=0							' place the cursor at 0:0
161a0     38 E4 05 F1 | 	add	objptr, #56
161a4     F2 00 58 FC | 	wrword	#0, objptr
161a8                 | ' cursor_y:=0
161a8     02 E4 05 F1 | 	add	objptr, #2
161ac     F2 00 48 FC | 	wrbyte	#0, objptr
161b0                 | ' repeat i from 0 to 111
161b0     00 20 06 F6 | 	mov	local02, #0
161b4     F8 E5 05 F1 | 	add	objptr, #504
161b8     97 1A 48 FB | 	callpa	#(@LR__1732-@LR__1730)>>2,fcache_load_ptr_
161bc                 | LR__1730
161bc                 | '   cursor[i]:=0
161bc     10 23 02 F6 | 	mov	local03, local02
161c0     F2 22 02 F1 | 	add	local03, objptr
161c4     11 01 48 FC | 	wrbyte	#0, local03
161c8     01 20 06 F1 | 	add	local02, #1
161cc     70 20 56 F2 | 	cmps	local02, #112 wc
161d0     E8 FF 9F CD |  if_b	jmp	#LR__1730
161d4                 | ' repeat i from 112 to 127
161d4     70 20 06 F6 | 	mov	local02, #112
161d8                 | LR__1731
161d8                 | '   cursor[i]:=color  
161d8     10 23 02 F6 | 	mov	local03, local02
161dc     F2 22 02 F1 | 	add	local03, objptr
161e0     11 1F 42 FC | 	wrbyte	local01, local03
161e4     01 20 06 F1 | 	add	local02, #1
161e8     80 20 16 F2 | 	cmp	local02, #128 wc
161ec     E8 FF 9F CD |  if_b	jmp	#LR__1731
161f0                 | LR__1732
161f0                 | ' 'repeat i from 0 to 127
161f0                 | ' '  if ((i/8)//2)
161f0                 | ' '    cursor[i]:=15
161f0                 | ' '  else
161f0                 | ' '    cursor[i]:=0
161f0                 | ' '  if i>=120    
161f0                 | ' '    cursor[i]:=40
161f0                 | ' setspriteptr(17,@cursor)
161f0     F2 14 02 F6 | 	mov	arg02, objptr
161f4     01 00 00 FF 
161f8     32 E4 85 F1 | 	sub	objptr, ##562
161fc     11 12 06 F6 | 	mov	arg01, #17
16200     48 03 B0 FD | 	call	#_hg010b_spin2_setspriteptr
16204                 | ' setspritesize(17,8,16)
16204     11 12 06 F6 | 	mov	arg01, #17
16208     08 14 06 F6 | 	mov	arg02, #8
1620c     10 16 06 F6 | 	mov	arg03, #16
16210     AC 03 B0 FD | 	call	#_hg010b_spin2_setspritesize
16214                 | ' setspritepos(17,0,0)
16214     11 12 06 F6 | 	mov	arg01, #17
16218     00 14 06 F6 | 	mov	arg02, #0
1621c     00 16 06 F6 | 	mov	arg03, #0
16220     50 03 B0 FD | 	call	#_hg010b_spin2_setspritepos
16224     A7 F0 03 F6 | 	mov	ptra, fp
16228     B2 00 A0 FD | 	call	#popregs_
1622c                 | _hg010b_spin2_initcursor_ret
1622c     2D 00 64 FD | 	ret
16230                 | 
16230                 | ' 
16230                 | '  
16230                 | ' pub setcursorcolor(color) |i
16230                 | _hg010b_spin2_setcursorcolor
16230                 | ' 
16230                 | ' 
16230                 | ' repeat i from 0 to 111
16230     00 00 06 F6 | 	mov	_var01, #0
16234     01 00 00 FF 
16238     32 E4 05 F1 | 	add	objptr, ##562
1623c     97 1A 48 FB | 	callpa	#(@LR__1742-@LR__1740)>>2,fcache_load_ptr_
16240                 | LR__1740
16240                 | '   cursor[i]:=0
16240     00 03 02 F6 | 	mov	_var02, _var01
16244     F2 02 02 F1 | 	add	_var02, objptr
16248     01 01 48 FC | 	wrbyte	#0, _var02
1624c     01 00 06 F1 | 	add	_var01, #1
16250     70 00 56 F2 | 	cmps	_var01, #112 wc
16254     E8 FF 9F CD |  if_b	jmp	#LR__1740
16258                 | ' repeat i from 112 to 127
16258     70 00 06 F6 | 	mov	_var01, #112
1625c                 | LR__1741
1625c                 | '   cursor[i]:=color  
1625c     00 03 02 F6 | 	mov	_var02, _var01
16260     F2 02 02 F1 | 	add	_var02, objptr
16264     01 13 42 FC | 	wrbyte	arg01, _var02
16268     01 00 06 F1 | 	add	_var01, #1
1626c     80 00 16 F2 | 	cmp	_var01, #128 wc
16270     E8 FF 9F CD |  if_b	jmp	#LR__1741
16274                 | LR__1742
16274     01 00 00 FF 
16278     32 E4 85 F1 | 	sub	objptr, ##562
1627c                 | _hg010b_spin2_setcursorcolor_ret
1627c     2D 00 64 FD | 	ret
16280                 | 
16280                 | '  
16280                 | ' 
16280                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
16280                 | _hg010b_spin2_setmode
16280     02 4A 05 F6 | 	mov	COUNT_, #2
16284     A8 00 A0 FD | 	call	#pushregs_
16288                 | ' 
16288                 | ' 
16288                 | ' dl_ptr:=@emptydl[0]
16288     01 00 00 FF 
1628c     19 E4 05 F1 | 	add	objptr, ##537
16290     F2 62 02 F6 | 	mov	muldivb_, objptr
16294     FD E5 85 F1 | 	sub	objptr, #509
16298     F2 62 62 FC | 	wrlong	muldivb_, objptr
1629c                 | ' 
1629c                 | ' if cog>0 
1629c     10 E4 05 F1 | 	add	objptr, #16
162a0     F2 62 02 FB | 	rdlong	muldivb_, objptr
162a4     2C E4 85 F1 | 	sub	objptr, #44
162a8     01 62 56 F2 | 	cmps	muldivb_, #1 wc
162ac                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
162ac     01 12 06 36 |  if_ae	mov	arg01, #1
162b0     54 0F B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
162b4                 | ' xres:=1024
162b4     01 00 00 FF 
162b8     22 E4 05 F1 | 	add	objptr, ##546
162bc     02 00 80 FF 
162c0     F2 00 68 FC | 	wrlong	##1024, objptr
162c4                 | ' yres:=576  
162c4     04 E4 05 F1 | 	add	objptr, #4
162c8     01 00 80 FF 
162cc     F2 80 68 FC | 	wrlong	##576, objptr
162d0                 | ' ppl:=(timings[3])
162d0     10 00 00 FF 
162d4     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
162d8     F7 62 02 FB | 	rdlong	muldivb_, ptr__hg010b_spin2_dat__
162dc     51 E5 85 F1 | 	sub	objptr, #337
162e0     F2 62 62 FC | 	wrlong	muldivb_, objptr
162e4                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
162e4     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
162e8     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
162ec     01 1E 66 F0 | 	shl	local01, #1
162f0     80 E4 85 F1 | 	sub	objptr, #128
162f4     F2 1E 62 FC | 	wrlong	local01, objptr
162f8                 | ' cpl1:=cpl '' todo remove
162f8     04 E4 05 F1 | 	add	objptr, #4
162fc     F2 1E 62 FC | 	wrlong	local01, objptr
16300                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
16300     02 00 00 FF 
16304     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
16308     41 E4 85 F1 | 	sub	objptr, #65
1630c     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
16310                 | ' repeat i from 0 to 3
16310     00 20 06 F6 | 	mov	local02, #0
16314     02 00 00 FF 
16318     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
1631c     08 E4 05 F1 | 	add	objptr, #8
16320     97 20 48 FB | 	callpa	#(@LR__1751-@LR__1750)>>2,fcache_load_ptr_
16324                 | LR__1750
16324                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
16324     10 1F 02 F6 | 	mov	local01, local02
16328     02 1E 66 F0 | 	shl	local01, #2
1632c     F7 1E 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
16330     F2 62 02 FB | 	rdlong	muldivb_, objptr
16334     11 62 66 F0 | 	shl	muldivb_, #17
16338     0F 1F 02 FB | 	rdlong	local01, local01
1633c     31 1F 02 F1 | 	add	local01, muldivb_
16340     80 40 38 FF 
16344     00 1E 06 F1 | 	add	local01, ##1887502336
16348     10 63 02 F6 | 	mov	muldivb_, local02
1634c     02 62 66 F0 | 	shl	muldivb_, #2
16350     F7 62 02 F1 | 	add	muldivb_, ptr__hg010b_spin2_dat__
16354     31 1F 62 FC | 	wrlong	local01, muldivb_
16358     01 20 06 F1 | 	add	local02, #1
1635c     04 20 56 F2 | 	cmps	local02, #4 wc
16360     C0 FF 9F CD |  if_b	jmp	#LR__1750
16364                 | LR__1751
16364     20 E4 85 F1 | 	sub	objptr, #32
16368                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
16368     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
1636c     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
16370     14 1E 66 FC | 	wrlong	local01, #20
16374                 | ' hubset(timings[10])
16374     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
16378     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
1637c     10 00 00 FF 
16380     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
16384     00 12 62 FD | 	hubset	arg01
16388                 | ' waitms(1)                                                   	' wait for stabilization
16388     01 12 06 F6 | 	mov	arg01, #1
1638c     C0 24 B0 FD | 	call	#__system___waitms
16390     10 00 00 FF 
16394     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
16398     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1639c     5D E4 05 F1 | 	add	objptr, #93
163a0     F2 20 62 FC | 	wrlong	local02, objptr
163a4     10 1F 52 F6 | 	abs	local01, local02 wc
163a8     04 1E 46 F0 | 	shr	local01, #4
163ac     0F 1F 82 F6 | 	negc	local01, local01
163b0     9C E4 05 F1 | 	add	objptr, #156
163b4     F2 1E 62 FC | 	wrlong	local01, objptr
163b8     A4 E4 85 F1 | 	sub	objptr, #164
163bc     F2 20 02 FB | 	rdlong	local02, objptr
163c0     08 E4 05 F1 | 	add	objptr, #8
163c4     F2 1E 02 FB | 	rdlong	local01, objptr
163c8     0F 21 02 FD | 	qmul	local02, local01
163cc                 | ' lines:=timings[11]
163cc                 | ' t_lines:=lines/16
163cc                 | ' buflen:=cpl*lines						' framebuffer length in longs
163cc     29 E4 85 F1 | 	sub	objptr, #41
163d0                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
163d0     19 1E C6 F9 | 	decod	local01, #25
163d4                 | ' mode_ptr:=@timings						' set pointers to timings
163d4     2C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #44
163d8                 | ' graphmode:=1024+512+192+48							' det global variable
163d8                 | ' makedl(graphmode)							' make a DL for the mode
163d8     03 00 00 FF 
163dc     F0 12 06 F6 | 	mov	arg01, ##1776
163e0     18 20 62 FD | 	getqx	local02
163e4     F2 20 62 FC | 	wrlong	local02, objptr
163e8     34 E4 85 F1 | 	sub	objptr, #52
163ec     02 20 66 F0 | 	shl	local02, #2
163f0     10 1F 82 F1 | 	sub	local01, local02
163f4     F2 1E 62 FC | 	wrlong	local01, objptr
163f8     14 E4 05 F1 | 	add	objptr, #20
163fc     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
16400     79 E4 05 F1 | 	add	objptr, #121
16404     03 00 80 FF 
16408     F2 E0 69 FC | 	wrlong	##1776, objptr
1640c     8D E4 85 F1 | 	sub	objptr, #141
16410     10 00 00 FF 
16414     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
16418     AC 00 B0 FD | 	call	#_hg010b_spin2_makedl
1641c                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
1641c     F2 1E 02 FB | 	rdlong	local01, objptr
16420     D9 E4 05 F1 | 	add	objptr, #217
16424     F2 1E 62 FC | 	wrlong	local01, objptr
16428                 | ' s_font_ptr:=font_ptr
16428     D5 E4 85 F1 | 	sub	objptr, #213
1642c     F2 1E 02 FB | 	rdlong	local01, objptr
16430     D9 E4 05 F1 | 	add	objptr, #217
16434     F2 1E 62 FC | 	wrlong	local01, objptr
16438                 | ' s_lines:=lines
16438     80 E4 85 F1 | 	sub	objptr, #128
1643c     F2 1E 02 FB | 	rdlong	local01, objptr
16440     84 E4 05 F1 | 	add	objptr, #132
16444     F2 1E 62 FC | 	wrlong	local01, objptr
16448                 | ' s_buflen:=buflen
16448     AD E4 85 F1 | 	sub	objptr, #173
1644c     F2 1E 02 FB | 	rdlong	local01, objptr
16450     B5 E4 05 F1 | 	add	objptr, #181
16454     F2 1E 62 FC | 	wrlong	local01, objptr
16458                 | ' s_cpl:=cpl
16458     94 E4 85 F1 | 	sub	objptr, #148
1645c     F2 1E 02 FB | 	rdlong	local01, objptr
16460     90 E4 05 F1 | 	add	objptr, #144
16464     F2 1E 62 FC | 	wrlong	local01, objptr
16468                 | ' s_cpl1:=cpl
16468     90 E4 85 F1 | 	sub	objptr, #144
1646c     F2 1E 02 FB | 	rdlong	local01, objptr
16470     98 E4 05 F1 | 	add	objptr, #152
16474     F2 1E 62 FC | 	wrlong	local01, objptr
16478                 | ' st_lines:=t_lines
16478     0C E4 05 F1 | 	add	objptr, #12
1647c     F2 1E 02 FB | 	rdlong	local01, objptr
16480     04 E4 05 F1 | 	add	objptr, #4
16484     F2 1E 62 FC | 	wrlong	local01, objptr
16488                 | ' ppl:=ppl/xzoom  
16488     28 E4 85 F1 | 	sub	objptr, #40
1648c     F2 60 02 FB | 	rdlong	muldiva_, objptr
16490     2C E4 05 F1 | 	add	objptr, #44
16494     F2 62 02 FB | 	rdlong	muldivb_, objptr
16498     01 E5 85 F1 | 	sub	objptr, #257
1649c     BA 00 A0 FD | 	call	#divide_
164a0     D5 E4 05 F1 | 	add	objptr, #213
164a4     F2 62 62 FC | 	wrlong	muldivb_, objptr
164a8                 | ' s_ppl:=ppl
164a8     1C E4 05 F1 | 	add	objptr, #28
164ac     F2 62 62 FC | 	wrlong	muldivb_, objptr
164b0     F1 E4 85 F1 | 	sub	objptr, #241
164b4                 | ' waitms(20)							' wait 
164b4     14 12 06 F6 | 	mov	arg01, #20
164b8     94 23 B0 FD | 	call	#__system___waitms
164bc     A7 F0 03 F6 | 	mov	ptra, fp
164c0     B2 00 A0 FD | 	call	#popregs_
164c4                 | _hg010b_spin2_setmode_ret
164c4     2D 00 64 FD | 	ret
164c8                 | 
164c8                 | ' 
164c8                 | ' 
164c8                 | ' '****************************************************************************************************************
164c8                 | ' '                                                                                                             	*
164c8                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
164c8                 | ' '                                                                                                             	*
164c8                 | ' '****************************************************************************************************************
164c8                 | ' 
164c8                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
164c8                 | _hg010b_spin2_makedl
164c8                 | ' 
164c8                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
164c8                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
164c8                 | ' repeat i from 0 to 11                                                           ' clear DL
164c8     00 00 06 F6 | 	mov	_var01, #0
164cc     E9 E5 05 F1 | 	add	objptr, #489
164d0     97 0E 48 FB | 	callpa	#(@LR__1761-@LR__1760)>>2,fcache_load_ptr_
164d4                 | LR__1760
164d4                 | '   displaylist[i]:=0 
164d4     00 03 02 F6 | 	mov	_var02, _var01
164d8     02 02 66 F0 | 	shl	_var02, #2
164dc     F2 02 02 F1 | 	add	_var02, objptr
164e0     01 01 68 FC | 	wrlong	#0, _var02
164e4     01 00 06 F1 | 	add	_var01, #1
164e8     0C 00 56 F2 | 	cmps	_var01, #12 wc
164ec     E4 FF 9F CD |  if_b	jmp	#LR__1760
164f0                 | LR__1761
164f0                 | '                         ' 
164f0                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
164f0     8C E5 85 F1 | 	sub	objptr, #396
164f4     F2 02 02 FB | 	rdlong	_var02, objptr
164f8     14 02 66 F0 | 	shl	_var02, #20
164fc     01 02 06 F1 | 	add	_var02, #1
16500     04 E4 85 F1 | 	sub	objptr, #4
16504     F2 00 02 FB | 	rdlong	_var01, objptr
16508     02 00 66 F0 | 	shl	_var01, #2
1650c     04 00 66 F0 | 	shl	_var01, #4
16510     00 03 02 F1 | 	add	_var02, _var01
16514     90 E5 05 F1 | 	add	objptr, #400
16518     F2 02 62 FC | 	wrlong	_var02, objptr
1651c     E9 E5 85 F1 | 	sub	objptr, #489
16520                 | ' displaylist[1]:=buf_ptr<<4+%10  
16520     F2 02 02 FB | 	rdlong	_var02, objptr
16524     04 02 66 F0 | 	shl	_var02, #4
16528     02 02 06 F1 | 	add	_var02, #2
1652c     ED E5 05 F1 | 	add	objptr, #493
16530     F2 02 62 FC | 	wrlong	_var02, objptr
16534                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
16534     04 E4 85 F1 | 	sub	objptr, #4
16538     F2 02 02 F6 | 	mov	_var02, objptr
1653c     CD E5 85 F1 | 	sub	objptr, #461
16540     F2 02 62 FC | 	wrlong	_var02, objptr
16544     1C E4 85 F1 | 	sub	objptr, #28
16548                 | _hg010b_spin2_makedl_ret
16548     2D 00 64 FD | 	ret
1654c                 | 
1654c                 | ' 
1654c                 | ' 
1654c                 | ' '****************************************************************************************************************
1654c                 | ' '                                                                        					*
1654c                 | ' '  Graphic primitives                                                    					*
1654c                 | ' '                                                                        					*
1654c                 | ' '****************************************************************************************************************
1654c                 | ' 
1654c                 | ' pub setspriteptr(num,ptr)
1654c                 | _hg010b_spin2_setspriteptr
1654c                 | ' long[@spr1ptr+12*num]:=ptr
1654c     0D E5 05 F1 | 	add	objptr, #269
16550     F2 00 02 F6 | 	mov	_var01, objptr
16554     09 03 02 F6 | 	mov	_var02, arg01
16558     01 02 66 F0 | 	shl	_var02, #1
1655c     09 03 02 F1 | 	add	_var02, arg01
16560     02 02 66 F0 | 	shl	_var02, #2
16564     01 01 02 F1 | 	add	_var01, _var02
16568     00 15 62 FC | 	wrlong	arg02, _var01
1656c     0D E5 85 F1 | 	sub	objptr, #269
16570                 | _hg010b_spin2_setspriteptr_ret
16570     2D 00 64 FD | 	ret
16574                 | 
16574                 | ' 
16574                 | ' pub setspritepos(num,x,y)
16574                 | _hg010b_spin2_setspritepos
16574                 | ' word[@spr1ptr+12*num+4]:=x
16574     0D E5 05 F1 | 	add	objptr, #269
16578     F2 00 02 F6 | 	mov	_var01, objptr
1657c     09 03 02 F6 | 	mov	_var02, arg01
16580     01 02 66 F0 | 	shl	_var02, #1
16584     09 03 02 F1 | 	add	_var02, arg01
16588     02 02 66 F0 | 	shl	_var02, #2
1658c     01 01 02 F1 | 	add	_var01, _var02
16590     04 00 06 F1 | 	add	_var01, #4
16594     00 15 52 FC | 	wrword	arg02, _var01
16598                 | ' word[@spr1ptr+12*num+6]:=y
16598     F2 00 02 F6 | 	mov	_var01, objptr
1659c     09 03 02 F6 | 	mov	_var02, arg01
165a0     01 02 66 F0 | 	shl	_var02, #1
165a4     09 03 02 F1 | 	add	_var02, arg01
165a8     02 02 66 F0 | 	shl	_var02, #2
165ac     01 01 02 F1 | 	add	_var01, _var02
165b0     06 00 06 F1 | 	add	_var01, #6
165b4     00 17 52 FC | 	wrword	arg03, _var01
165b8     0D E5 85 F1 | 	sub	objptr, #269
165bc                 | _hg010b_spin2_setspritepos_ret
165bc     2D 00 64 FD | 	ret
165c0                 | 
165c0                 | ' 
165c0                 | ' pub setspritesize(num,w,h)
165c0                 | _hg010b_spin2_setspritesize
165c0                 | ' word[@spr1ptr+12*num+8]:=w
165c0     0D E5 05 F1 | 	add	objptr, #269
165c4     F2 00 02 F6 | 	mov	_var01, objptr
165c8     09 03 02 F6 | 	mov	_var02, arg01
165cc     01 02 66 F0 | 	shl	_var02, #1
165d0     09 03 02 F1 | 	add	_var02, arg01
165d4     02 02 66 F0 | 	shl	_var02, #2
165d8     01 01 02 F1 | 	add	_var01, _var02
165dc     08 00 06 F1 | 	add	_var01, #8
165e0     00 15 52 FC | 	wrword	arg02, _var01
165e4                 | ' word[@spr1ptr+12*num+10]:=h
165e4     F2 00 02 F6 | 	mov	_var01, objptr
165e8     09 03 02 F6 | 	mov	_var02, arg01
165ec     01 02 66 F0 | 	shl	_var02, #1
165f0     09 03 02 F1 | 	add	_var02, arg01
165f4     02 02 66 F0 | 	shl	_var02, #2
165f8     01 01 02 F1 | 	add	_var01, _var02
165fc     0A 00 06 F1 | 	add	_var01, #10
16600     00 17 52 FC | 	wrword	arg03, _var01
16604     0D E5 85 F1 | 	sub	objptr, #269
16608                 | _hg010b_spin2_setspritesize_ret
16608     2D 00 64 FD | 	ret
1660c                 | 
1660c                 | ' 
1660c                 | ' 
1660c                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
1660c                 | ' 
1660c                 | ' 
1660c                 | ' pub putpixel(x,y,c)
1660c                 | _hg010b_spin2_putpixel
1660c     04 4A 05 F6 | 	mov	COUNT_, #4
16610     A8 00 A0 FD | 	call	#pushregs_
16614     09 1F 02 F6 | 	mov	local01, arg01
16618                 | ' 
16618                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
16618     00 20 06 F6 | 	mov	local02, #0
1661c     00 1E 56 F2 | 	cmps	local01, #0 wc
16620     01 20 66 36 |  if_ae	neg	local02, #1
16624     E5 E4 05 F1 | 	add	objptr, #229
16628     F2 1A 02 FB | 	rdlong	arg05, objptr
1662c     02 1A 66 F0 | 	shl	arg05, #2
16630     0D 1F 52 F2 | 	cmps	local01, arg05 wc
16634     11 23 A2 F1 | 	subx	local03, local03
16638     11 21 02 F5 | 	and	local02, local03
1663c     00 22 06 F6 | 	mov	local03, #0
16640     00 14 56 F2 | 	cmps	arg02, #0 wc
16644     01 22 66 36 |  if_ae	neg	local03, #1
16648     11 21 02 F5 | 	and	local02, local03
1664c     04 E4 85 F1 | 	sub	objptr, #4
16650     F2 22 02 FB | 	rdlong	local03, objptr
16654     E1 E4 85 F1 | 	sub	objptr, #225
16658     11 15 52 F2 | 	cmps	arg02, local03 wc
1665c     12 25 A2 F1 | 	subx	local04, local04
16660     12 21 CA F7 | 	test	local02, local04 wz
16664     48 00 90 AD |  if_e	jmp	#LR__1770
16668     D9 E4 05 F1 | 	add	objptr, #217
1666c     F2 12 02 FB | 	rdlong	arg01, objptr
16670     14 E4 05 F1 | 	add	objptr, #20
16674     F2 24 02 FB | 	rdlong	local04, objptr
16678     02 24 66 F0 | 	shl	local04, #2
1667c     0A 25 02 FD | 	qmul	local04, arg02
16680                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
16680     0B 15 02 F6 | 	mov	arg02, arg03
16684     01 16 06 F6 | 	mov	arg03, #1
16688     00 18 06 F6 | 	mov	arg04, #0
1668c     01 1A 06 F6 | 	mov	arg05, #1
16690     0A 00 00 FF 
16694     D3 E5 05 F1 | 	add	objptr, ##5587
16698     18 24 62 FD | 	getqx	local04
1669c     0F 25 02 F1 | 	add	local04, local01
166a0     12 13 02 F1 | 	add	arg01, local04
166a4     FC 14 B0 FD | 	call	#_psram_spin2_fill
166a8     0B 00 00 FF 
166ac     C0 E4 85 F1 | 	sub	objptr, ##5824
166b0                 | LR__1770
166b0     A7 F0 03 F6 | 	mov	ptra, fp
166b4     B2 00 A0 FD | 	call	#popregs_
166b8                 | _hg010b_spin2_putpixel_ret
166b8     2D 00 64 FD | 	ret
166bc                 | 
166bc                 | ' 
166bc                 | ' pub putpixel2(x,y,c)
166bc                 | _hg010b_spin2_putpixel2
166bc     02 4A 05 F6 | 	mov	COUNT_, #2
166c0     A8 00 A0 FD | 	call	#pushregs_
166c4     D9 E4 05 F1 | 	add	objptr, #217
166c8     F2 1E 02 FB | 	rdlong	local01, objptr
166cc     14 E4 05 F1 | 	add	objptr, #20
166d0     F2 1A 02 FB | 	rdlong	arg05, objptr
166d4     02 1A 66 F0 | 	shl	arg05, #2
166d8     0A 1B 02 FD | 	qmul	arg05, arg02
166dc                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
166dc     0B 15 02 F6 | 	mov	arg02, arg03
166e0     01 16 06 F6 | 	mov	arg03, #1
166e4     00 18 06 F6 | 	mov	arg04, #0
166e8     01 1A 06 F6 | 	mov	arg05, #1
166ec     0A 00 00 FF 
166f0     D3 E5 05 F1 | 	add	objptr, ##5587
166f4     18 20 62 FD | 	getqx	local02
166f8     09 21 02 F1 | 	add	local02, arg01
166fc     10 1F 02 F1 | 	add	local01, local02
16700     0F 13 02 F6 | 	mov	arg01, local01
16704     9C 14 B0 FD | 	call	#_psram_spin2_fill
16708     0B 00 00 FF 
1670c     C0 E4 85 F1 | 	sub	objptr, ##5824
16710     A7 F0 03 F6 | 	mov	ptra, fp
16714     B2 00 A0 FD | 	call	#popregs_
16718                 | _hg010b_spin2_putpixel2_ret
16718     2D 00 64 FD | 	ret
1671c                 | 
1671c                 | ' 
1671c                 | ' pub getpixel2(x,y): c 
1671c                 | _hg010b_spin2_getpixel2
1671c     02 4A 05 F6 | 	mov	COUNT_, #2
16720     A8 00 A0 FD | 	call	#pushregs_
16724     0C F0 07 F1 | 	add	ptra, #12
16728     04 4E 05 F1 | 	add	fp, #4
1672c     A7 12 62 FC | 	wrlong	arg01, fp
16730     04 4E 05 F1 | 	add	fp, #4
16734     A7 14 62 FC | 	wrlong	arg02, fp
16738     08 4E 85 F1 | 	sub	fp, #8
1673c     A7 00 68 FC | 	wrlong	#0, fp
16740     A7 12 02 F6 | 	mov	arg01, fp
16744     D9 E4 05 F1 | 	add	objptr, #217
16748     F2 14 02 FB | 	rdlong	arg02, objptr
1674c     14 E4 05 F1 | 	add	objptr, #20
16750     F2 16 02 FB | 	rdlong	arg03, objptr
16754     02 16 66 F0 | 	shl	arg03, #2
16758     08 4E 05 F1 | 	add	fp, #8
1675c     A7 FA 01 FB | 	rdlong	result1, fp
16760     FD 16 02 FD | 	qmul	arg03, result1
16764                 | ' 
16764                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
16764     04 4E 85 F1 | 	sub	fp, #4
16768     A7 1E 02 FB | 	rdlong	local01, fp
1676c     04 4E 85 F1 | 	sub	fp, #4
16770     01 16 06 F6 | 	mov	arg03, #1
16774     0A 00 00 FF 
16778     D3 E5 05 F1 | 	add	objptr, ##5587
1677c     18 20 62 FD | 	getqx	local02
16780     0F 21 02 F1 | 	add	local02, local01
16784     10 15 02 F1 | 	add	arg02, local02
16788     E0 12 B0 FD | 	call	#_psram_spin2_read1
1678c     0B 00 00 FF 
16790     C0 E4 85 F1 | 	sub	objptr, ##5824
16794                 | ' return c
16794     A7 FA 01 FB | 	rdlong	result1, fp
16798     A7 F0 03 F6 | 	mov	ptra, fp
1679c     B2 00 A0 FD | 	call	#popregs_
167a0                 | _hg010b_spin2_getpixel2_ret
167a0     2D 00 64 FD | 	ret
167a4                 | 
167a4                 | '   
167a4                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
167a4                 | ' 
167a4                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
167a4                 | _hg010b_spin2_fastline
167a4     02 4A 05 F6 | 	mov	COUNT_, #2
167a8     A8 00 A0 FD | 	call	#pushregs_
167ac     09 1F 02 F6 | 	mov	local01, arg01
167b0     0A 21 02 F6 | 	mov	local02, arg02
167b4                 | ' 
167b4                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
167b4     00 16 56 F2 | 	cmps	arg03, #0 wc
167b8     F4 00 90 CD |  if_b	jmp	#LR__1780
167bc     01 00 00 FF 
167c0     26 E4 05 F1 | 	add	objptr, ##550
167c4     F2 1A 02 FB | 	rdlong	arg05, objptr
167c8     01 00 00 FF 
167cc     26 E4 85 F1 | 	sub	objptr, ##550
167d0     0D 17 52 F2 | 	cmps	arg03, arg05 wc
167d4     D8 00 90 3D |  if_ae	jmp	#LR__1780
167d8     00 1E 56 F2 | 	cmps	local01, #0 wc
167dc     00 20 56 C2 |  if_b	cmps	local02, #0 wc
167e0     CC 00 90 CD |  if_b	jmp	#LR__1780
167e4     01 00 00 FF 
167e8     22 E4 05 F1 | 	add	objptr, ##546
167ec     F2 1A 02 FB | 	rdlong	arg05, objptr
167f0     01 00 00 FF 
167f4     22 E4 85 F1 | 	sub	objptr, ##546
167f8     0D 1F 5A F2 | 	cmps	local01, arg05 wcz
167fc     01 00 00 1F 
16800     22 E4 05 11 |  if_a	add	objptr, ##546
16804     F2 12 02 1B |  if_a	rdlong	arg01, objptr
16808     01 00 00 1F 
1680c     22 E4 85 11 |  if_a	sub	objptr, ##546
16810     09 21 5A 12 |  if_a	cmps	local02, arg01 wcz
16814                 | '   return
16814     98 00 90 1D |  if_a	jmp	#LR__1780
16818     10 1F 5A F2 | 	cmps	local01, local02 wcz
1681c     0F 1B 02 16 |  if_a	mov	arg05, local01
16820     10 1F 02 16 |  if_a	mov	local01, local02
16824     0D 21 02 16 |  if_a	mov	local02, arg05
16828     00 1E 56 F2 | 	cmps	local01, #0 wc
1682c     00 1E 06 C6 |  if_b	mov	local01, #0
16830     01 00 00 FF 
16834     22 E4 05 F1 | 	add	objptr, ##546
16838     F2 1A 02 FB | 	rdlong	arg05, objptr
1683c     01 00 00 FF 
16840     22 E4 85 F1 | 	sub	objptr, ##546
16844     0D 21 52 F2 | 	cmps	local02, arg05 wc
16848     01 00 00 3F 
1684c     22 E4 05 31 |  if_ae	add	objptr, ##546
16850     F2 20 02 3B |  if_ae	rdlong	local02, objptr
16854     01 00 00 3F 
16858     22 E4 85 31 |  if_ae	sub	objptr, ##546
1685c     D9 E4 05 F1 | 	add	objptr, #217
16860     F2 12 02 FB | 	rdlong	arg01, objptr
16864     14 E4 05 F1 | 	add	objptr, #20
16868     F2 1A 02 FB | 	rdlong	arg05, objptr
1686c     02 1A 66 F0 | 	shl	arg05, #2
16870     0B 1B 02 FD | 	qmul	arg05, arg03
16874                 | ' if x1>x2
16874                 | '   x1,x2:=x2,x1
16874                 | ' if x1<0 
16874                 | '   x1:=0
16874                 | ' if x2>=xres
16874                 | '   x2:=xres-1  
16874     01 20 86 31 |  if_ae	sub	local02, #1
16878                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
16878     01 16 06 F6 | 	mov	arg03, #1
1687c     10 17 02 F1 | 	add	arg03, local02
16880     0F 17 82 F1 | 	sub	arg03, local01
16884     0C 15 02 F6 | 	mov	arg02, arg04
16888     00 18 06 F6 | 	mov	arg04, #0
1688c     01 1A 06 F6 | 	mov	arg05, #1
16890     0A 00 00 FF 
16894     D3 E5 05 F1 | 	add	objptr, ##5587
16898     18 20 62 FD | 	getqx	local02
1689c     0F 21 02 F1 | 	add	local02, local01
168a0     10 13 02 F1 | 	add	arg01, local02
168a4     FC 12 B0 FD | 	call	#_psram_spin2_fill
168a8     0B 00 00 FF 
168ac     C0 E4 85 F1 | 	sub	objptr, ##5824
168b0                 | LR__1780
168b0     A7 F0 03 F6 | 	mov	ptra, fp
168b4     B2 00 A0 FD | 	call	#popregs_
168b8                 | _hg010b_spin2_fastline_ret
168b8     2D 00 64 FD | 	ret
168bc                 | 
168bc                 | ' 
168bc                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
168bc                 | _hg010b_spin2_draw
168bc     0E 4A 05 F6 | 	mov	COUNT_, #14
168c0     A8 00 A0 FD | 	call	#pushregs_
168c4     09 1F 02 F6 | 	mov	local01, arg01
168c8     0A 21 02 F6 | 	mov	local02, arg02
168cc     0B 23 02 F6 | 	mov	local03, arg03
168d0     0C 25 02 F6 | 	mov	local04, arg04
168d4     0D 27 02 F6 | 	mov	local05, arg05
168d8                 | ' 
168d8                 | ' if (y1==y2)
168d8     12 21 0A F2 | 	cmp	local02, local04 wz
168dc     18 00 90 5D |  if_ne	jmp	#LR__1790
168e0                 | '   fastline(x1,x2,y1,c)
168e0     0F 13 02 F6 | 	mov	arg01, local01
168e4     11 15 02 F6 | 	mov	arg02, local03
168e8     10 17 02 F6 | 	mov	arg03, local02
168ec     13 19 02 F6 | 	mov	arg04, local05
168f0     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
168f4     F8 00 90 FD | 	jmp	#LR__1796
168f8                 | LR__1790
168f8                 | ' else  
168f8                 | '   x:=x1
168f8     0F 29 02 F6 | 	mov	local06, local01
168fc                 | '   y:=y1
168fc     10 2B 02 F6 | 	mov	local07, local02
16900                 | ' 
16900                 | '   if (x1<x2) 
16900     11 1F 52 F2 | 	cmps	local01, local03 wc
16904                 | '     xi:=1
16904     01 2C 06 C6 |  if_b	mov	local08, #1
16908                 | '     dx:=x2-x1
16908     11 2F 02 C6 |  if_b	mov	local09, local03
1690c     0F 2F 82 C1 |  if_b	sub	local09, local01
16910                 | '   else
16910                 | '     xi:=-1
16910     01 2C 66 36 |  if_ae	neg	local08, #1
16914                 | '     dx:=x1-x2
16914     11 1F 82 31 |  if_ae	sub	local01, local03
16918     0F 2F 02 36 |  if_ae	mov	local09, local01
1691c                 | '   
1691c                 | '   if (y1<y2) 
1691c     12 21 52 F2 | 	cmps	local02, local04 wc
16920                 | '     yi:=1
16920     01 30 06 C6 |  if_b	mov	local10, #1
16924                 | '     dy:=y2-y1
16924     12 33 02 C6 |  if_b	mov	local11, local04
16928     10 33 82 C1 |  if_b	sub	local11, local02
1692c                 | '   else
1692c                 | '     yi:=-1
1692c     01 30 66 36 |  if_ae	neg	local10, #1
16930                 | '     dy:=y1-y2
16930     12 21 82 31 |  if_ae	sub	local02, local04
16934     10 33 02 36 |  if_ae	mov	local11, local02
16938                 | ' 
16938                 | '   putpixel(x,y,c)
16938     13 17 02 F6 | 	mov	arg03, local05
1693c     14 13 02 F6 | 	mov	arg01, local06
16940     15 15 02 F6 | 	mov	arg02, local07
16944     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
16948                 | ' 
16948                 | '   if (dx>dy)
16948     19 2F 5A F2 | 	cmps	local09, local11 wcz
1694c     50 00 90 ED |  if_be	jmp	#LR__1792
16950                 | '     ai:=(dy-dx)*2
16950     19 35 02 F6 | 	mov	local12, local11
16954     17 35 82 F1 | 	sub	local12, local09
16958     01 34 66 F0 | 	shl	local12, #1
1695c                 | '     bi:=dy*2
1695c     01 32 66 F0 | 	shl	local11, #1
16960     19 37 02 F6 | 	mov	local13, local11
16964                 | '     d:= bi-dx
16964     1B 39 02 F6 | 	mov	local14, local13
16968     17 39 82 F1 | 	sub	local14, local09
1696c                 | '     repeat while (x<>x2) 
1696c                 | LR__1791
1696c     11 29 0A F2 | 	cmp	local06, local03 wz
16970     7C 00 90 AD |  if_e	jmp	#LR__1795
16974                 | '       if (d>=0) 
16974     00 38 56 F2 | 	cmps	local14, #0 wc
16978                 | '         x+=xi
16978     16 29 02 31 |  if_ae	add	local06, local08
1697c                 | '         y+=yi
1697c     18 2B 02 31 |  if_ae	add	local07, local10
16980                 | '         d+=ai
16980     1A 39 02 31 |  if_ae	add	local14, local12
16984                 | '       else
16984                 | '         d+=bi
16984     1B 39 02 C1 |  if_b	add	local14, local13
16988                 | '         x+=xi
16988     16 29 02 C1 |  if_b	add	local06, local08
1698c                 | '       putpixel(x,y,c)
1698c     14 13 02 F6 | 	mov	arg01, local06
16990     15 15 02 F6 | 	mov	arg02, local07
16994     13 17 02 F6 | 	mov	arg03, local05
16998     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
1699c     CC FF 9F FD | 	jmp	#LR__1791
169a0                 | LR__1792
169a0                 | '   else
169a0                 | '     ai:=(dx-dy)*2
169a0     17 35 02 F6 | 	mov	local12, local09
169a4     19 35 82 F1 | 	sub	local12, local11
169a8     01 34 66 F0 | 	shl	local12, #1
169ac                 | '     bi:=dx*2
169ac     01 2E 66 F0 | 	shl	local09, #1
169b0     17 37 02 F6 | 	mov	local13, local09
169b4                 | '     d:=bi-dy
169b4     1B 39 02 F6 | 	mov	local14, local13
169b8     19 39 82 F1 | 	sub	local14, local11
169bc                 | '     repeat while (y<>y2)
169bc                 | LR__1793
169bc     12 2B 0A F2 | 	cmp	local07, local04 wz
169c0     2C 00 90 AD |  if_e	jmp	#LR__1794
169c4                 | '       if (d>=0)
169c4     00 38 56 F2 | 	cmps	local14, #0 wc
169c8                 | '         x+=xi
169c8     16 29 02 31 |  if_ae	add	local06, local08
169cc                 | '         y+=yi
169cc     18 2B 02 31 |  if_ae	add	local07, local10
169d0                 | '         d+=ai
169d0     1A 39 02 31 |  if_ae	add	local14, local12
169d4                 | '       else
169d4                 | '         d+=bi
169d4     1B 39 02 C1 |  if_b	add	local14, local13
169d8                 | '         y+=yi
169d8     18 2B 02 C1 |  if_b	add	local07, local10
169dc                 | '       putpixel(x, y,c)
169dc     14 13 02 F6 | 	mov	arg01, local06
169e0     15 15 02 F6 | 	mov	arg02, local07
169e4     13 17 02 F6 | 	mov	arg03, local05
169e8     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
169ec     CC FF 9F FD | 	jmp	#LR__1793
169f0                 | LR__1794
169f0                 | LR__1795
169f0                 | LR__1796
169f0     A7 F0 03 F6 | 	mov	ptra, fp
169f4     B2 00 A0 FD | 	call	#popregs_
169f8                 | _hg010b_spin2_draw_ret
169f8     2D 00 64 FD | 	ret
169fc                 | 
169fc                 | '  
169fc                 | ' pub fillpush(val) 
169fc                 | _hg010b_spin2_fillpush
169fc                 | ' fillstack[fillptr]:=val
169fc     0B 00 00 FF 
16a00     B6 E4 05 F1 | 	add	objptr, ##5814
16a04     F2 00 02 FB | 	rdlong	_var01, objptr
16a08     02 00 66 F0 | 	shl	_var01, #2
16a0c     0A 00 00 FF 
16a10     00 E4 85 F1 | 	sub	objptr, ##5120
16a14     F2 00 02 F1 | 	add	_var01, objptr
16a18     00 13 62 FC | 	wrlong	arg01, _var01
16a1c                 | ' fillptr+=1   
16a1c     0A 00 00 FF 
16a20     00 E4 05 F1 | 	add	objptr, ##5120
16a24     F2 00 02 FB | 	rdlong	_var01, objptr
16a28     01 00 06 F1 | 	add	_var01, #1
16a2c     F2 00 62 FC | 	wrlong	_var01, objptr
16a30     0B 00 00 FF 
16a34     B6 E4 85 F1 | 	sub	objptr, ##5814
16a38                 | _hg010b_spin2_fillpush_ret
16a38     2D 00 64 FD | 	ret
16a3c                 | 
16a3c                 | ' 
16a3c                 | '     
16a3c                 | ' pub fillpop() : val
16a3c                 | _hg010b_spin2_fillpop
16a3c                 | ' 
16a3c                 | ' fillptr-=1
16a3c     0B 00 00 FF 
16a40     B6 E4 05 F1 | 	add	objptr, ##5814
16a44     F2 FA 01 FB | 	rdlong	result1, objptr
16a48     01 FA 85 F1 | 	sub	result1, #1
16a4c     F2 FA 61 FC | 	wrlong	result1, objptr
16a50                 | ' if fillptr<0
16a50     0B 00 00 FF 
16a54     B6 E4 85 F1 | 	sub	objptr, ##5814
16a58     00 FA 55 F2 | 	cmps	result1, #0 wc
16a5c                 | '   fillptr:=0
16a5c     0B 00 00 CF 
16a60     B6 E4 05 C1 |  if_b	add	objptr, ##5814
16a64     F2 00 68 CC |  if_b	wrlong	#0, objptr
16a68     0B 00 00 CF 
16a6c     B6 E4 85 C1 |  if_b	sub	objptr, ##5814
16a70                 | '   val:=-12345
16a70     E7 FF 7F CF 
16a74     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
16a78     28 00 90 CD |  if_b	jmp	#LR__1800
16a7c                 | ' else 
16a7c                 | '   val:=fillstack[fillptr]
16a7c     0B 00 00 FF 
16a80     B6 E4 05 F1 | 	add	objptr, ##5814
16a84     F2 00 02 FB | 	rdlong	_var01, objptr
16a88     02 00 66 F0 | 	shl	_var01, #2
16a8c     0A 00 00 FF 
16a90     00 E4 85 F1 | 	sub	objptr, ##5120
16a94     F2 00 02 F1 | 	add	_var01, objptr
16a98     00 01 02 FB | 	rdlong	_var01, _var01
16a9c     01 00 00 FF 
16aa0     B6 E4 85 F1 | 	sub	objptr, ##694
16aa4                 | LR__1800
16aa4                 | ' return val
16aa4     00 FB 01 F6 | 	mov	result1, _var01
16aa8                 | _hg010b_spin2_fillpop_ret
16aa8     2D 00 64 FD | 	ret
16aac                 | 
16aac                 | ' 
16aac                 | '       
16aac                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
16aac                 | _hg010b_spin2_fill
16aac     0B 4A 05 F6 | 	mov	COUNT_, #11
16ab0     A8 00 A0 FD | 	call	#pushregs_
16ab4                 | ' 
16ab4                 | ' newcolor:=newcolor & 255
16ab4     0B 1F E2 F8 | 	getbyte	local01, arg03, #0
16ab8                 | ' oldcolor:=oldcolor & 255
16ab8     0C 21 E2 F8 | 	getbyte	local02, arg04, #0
16abc                 | ' 
16abc                 | ' if (oldcolor == newcolor) 
16abc     0F 21 0A F2 | 	cmp	local02, local01 wz
16ac0                 | '   return
16ac0     70 02 90 AD |  if_e	jmp	#LR__1819
16ac4                 | ' 
16ac4                 | ' fillptr:=0
16ac4     0B 00 00 FF 
16ac8     B6 E4 05 F1 | 	add	objptr, ##5814
16acc     F2 00 68 FC | 	wrlong	#0, objptr
16ad0                 | ' fillmax:=0
16ad0     04 E4 05 F1 | 	add	objptr, #4
16ad4     F2 00 68 FC | 	wrlong	#0, objptr
16ad8     0B 00 00 FF 
16adc     BA E4 85 F1 | 	sub	objptr, ##5818
16ae0                 | ' fillpush(x)
16ae0     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
16ae4                 | ' fillpush(y)
16ae4     0A 13 02 F6 | 	mov	arg01, arg02
16ae8     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
16aec                 | ' y:=fillpop()
16aec     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
16af0     FD 22 02 F6 | 	mov	local03, result1
16af4                 | ' x:=fillpop()
16af4     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
16af8     FD 24 02 F6 | 	mov	local04, result1
16afc                 | ' 'pinhigh(38)
16afc                 | ' repeat while (x>-1)       
16afc                 | LR__1810
16afc     00 24 56 F2 | 	cmps	local04, #0 wc
16b00     30 02 90 CD |  if_b	jmp	#LR__1818
16b04                 | '  ' pintoggle(39)
16b04                 | '   x1 := x
16b04     12 27 02 F6 | 	mov	local05, local04
16b08                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
16b08                 | LR__1811
16b08     00 28 06 F6 | 	mov	local06, #0
16b0c     00 2A 06 F6 | 	mov	local07, #0
16b10     00 26 56 F2 | 	cmps	local05, #0 wc
16b14     01 2A 66 36 |  if_ae	neg	local07, #1
16b18     00 2A 0E F2 | 	cmp	local07, #0 wz
16b1c     00 28 26 56 |  if_ne	not	local06, #0
16b20     00 2C 06 F6 | 	mov	local08, #0
16b24     00 2E 06 F6 | 	mov	local09, #0
16b28     11 15 02 F6 | 	mov	arg02, local03
16b2c     13 13 02 F6 | 	mov	arg01, local05
16b30     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
16b34     10 FB 09 F2 | 	cmp	result1, local02 wz
16b38     00 2E 26 A6 |  if_e	not	local09, #0
16b3c     00 2E 0E F2 | 	cmp	local09, #0 wz
16b40     00 2C 26 56 |  if_ne	not	local08, #0
16b44     16 29 CA F7 | 	test	local06, local08 wz
16b48                 | '     x1--
16b48     01 26 86 51 |  if_ne	sub	local05, #1
16b4c     B8 FF 9F 5D |  if_ne	jmp	#LR__1811
16b50                 | '   x1++
16b50     01 26 06 F1 | 	add	local05, #1
16b54                 | '   spanabove := 0
16b54     00 30 06 F6 | 	mov	local10, #0
16b58                 | '   spanbelow := 0
16b58     00 32 06 F6 | 	mov	local11, #0
16b5c                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
16b5c                 | LR__1812
16b5c     00 28 06 F6 | 	mov	local06, #0
16b60     02 00 00 FF 
16b64     00 26 56 F2 | 	cmps	local05, ##1024 wc
16b68     00 28 26 C6 |  if_b	not	local06, #0
16b6c     00 2C 06 F6 | 	mov	local08, #0
16b70     00 2E 06 F6 | 	mov	local09, #0
16b74     11 15 02 F6 | 	mov	arg02, local03
16b78     13 13 02 F6 | 	mov	arg01, local05
16b7c     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
16b80     10 FB 09 F2 | 	cmp	result1, local02 wz
16b84     00 2E 26 A6 |  if_e	not	local09, #0
16b88     00 2E 0E F2 | 	cmp	local09, #0 wz
16b8c     00 2C 26 56 |  if_ne	not	local08, #0
16b90     16 29 CA F7 | 	test	local06, local08 wz
16b94     88 01 90 AD |  if_e	jmp	#LR__1817
16b98                 | '     putpixel2 (x1,y, newcolor & 255)
16b98     0F 17 E2 F8 | 	getbyte	arg03, local01, #0
16b9c     13 13 02 F6 | 	mov	arg01, local05
16ba0     11 15 02 F6 | 	mov	arg02, local03
16ba4     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
16ba8                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
16ba8     00 28 06 F6 | 	mov	local06, #0
16bac     00 2A 06 F6 | 	mov	local07, #0
16bb0     00 30 0E F2 | 	cmp	local10, #0 wz
16bb4     01 22 56 A2 |  if_e	cmps	local03, #1 wc
16bb8     01 2A 66 26 |  if_nc_and_z	neg	local07, #1
16bbc     00 2A 0E F2 | 	cmp	local07, #0 wz
16bc0     00 28 26 56 |  if_ne	not	local06, #0
16bc4     00 2C 06 F6 | 	mov	local08, #0
16bc8     00 2E 06 F6 | 	mov	local09, #0
16bcc     11 15 02 F6 | 	mov	arg02, local03
16bd0     01 14 86 F1 | 	sub	arg02, #1
16bd4     13 13 02 F6 | 	mov	arg01, local05
16bd8     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
16bdc     10 FB 09 F2 | 	cmp	result1, local02 wz
16be0     00 2E 26 A6 |  if_e	not	local09, #0
16be4     00 2E 0E F2 | 	cmp	local09, #0 wz
16be8     00 2C 26 56 |  if_ne	not	local08, #0
16bec     16 29 CA F7 | 	test	local06, local08 wz
16bf0     1C 00 90 AD |  if_e	jmp	#LR__1813
16bf4                 | '       fillpush(x1)
16bf4     13 13 02 F6 | 	mov	arg01, local05
16bf8     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
16bfc                 | '       fillpush(y-1)
16bfc     11 13 02 F6 | 	mov	arg01, local03
16c00     01 12 86 F1 | 	sub	arg01, #1
16c04     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
16c08                 | '       spanabove := 1 
16c08     01 30 06 F6 | 	mov	local10, #1
16c0c     4C 00 90 FD | 	jmp	#LR__1814
16c10                 | LR__1813
16c10                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
16c10     00 28 06 F6 | 	mov	local06, #0
16c14     00 2A 06 F6 | 	mov	local07, #0
16c18     00 30 0E F2 | 	cmp	local10, #0 wz
16c1c     01 22 56 52 |  if_ne	cmps	local03, #1 wc
16c20     01 2A 66 16 |  if_a	neg	local07, #1
16c24     00 2A 0E F2 | 	cmp	local07, #0 wz
16c28     00 28 26 56 |  if_ne	not	local06, #0
16c2c     00 2C 06 F6 | 	mov	local08, #0
16c30     00 2E 06 F6 | 	mov	local09, #0
16c34     11 15 02 F6 | 	mov	arg02, local03
16c38     01 14 86 F1 | 	sub	arg02, #1
16c3c     13 13 02 F6 | 	mov	arg01, local05
16c40     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
16c44     10 FB 09 F2 | 	cmp	result1, local02 wz
16c48     00 2E 26 56 |  if_ne	not	local09, #0
16c4c     00 2E 0E F2 | 	cmp	local09, #0 wz
16c50     00 2C 26 56 |  if_ne	not	local08, #0
16c54     16 29 CA F7 | 	test	local06, local08 wz
16c58                 | '       spanabove := 0 
16c58     00 30 06 56 |  if_ne	mov	local10, #0
16c5c                 | LR__1814
16c5c                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
16c5c     00 28 06 F6 | 	mov	local06, #0
16c60     00 2A 06 F6 | 	mov	local07, #0
16c64     00 32 0E F2 | 	cmp	local11, #0 wz
16c68     01 00 00 AF 
16c6c     3F 22 56 A2 |  if_e	cmps	local03, ##575 wc
16c70     01 2A 66 86 |  if_c_and_z	neg	local07, #1
16c74     00 2A 0E F2 | 	cmp	local07, #0 wz
16c78     00 28 26 56 |  if_ne	not	local06, #0
16c7c     00 2C 06 F6 | 	mov	local08, #0
16c80     00 2E 06 F6 | 	mov	local09, #0
16c84     11 15 02 F6 | 	mov	arg02, local03
16c88     01 14 06 F1 | 	add	arg02, #1
16c8c     13 13 02 F6 | 	mov	arg01, local05
16c90     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
16c94     10 FB 09 F2 | 	cmp	result1, local02 wz
16c98     00 2E 26 A6 |  if_e	not	local09, #0
16c9c     00 2E 0E F2 | 	cmp	local09, #0 wz
16ca0     00 2C 26 56 |  if_ne	not	local08, #0
16ca4     16 29 CA F7 | 	test	local06, local08 wz
16ca8     1C 00 90 AD |  if_e	jmp	#LR__1815
16cac                 | '       fillpush(x1)
16cac     13 13 02 F6 | 	mov	arg01, local05
16cb0     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
16cb4                 | '       fillpush(y + 1)
16cb4     11 13 02 F6 | 	mov	arg01, local03
16cb8     01 12 06 F1 | 	add	arg01, #1
16cbc     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
16cc0                 | '       spanBelow := 1
16cc0     01 32 06 F6 | 	mov	local11, #1
16cc4     50 00 90 FD | 	jmp	#LR__1816
16cc8                 | LR__1815
16cc8                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
16cc8     00 28 06 F6 | 	mov	local06, #0
16ccc     00 2A 06 F6 | 	mov	local07, #0
16cd0     00 32 0E F2 | 	cmp	local11, #0 wz
16cd4     01 00 00 5F 
16cd8     3F 22 56 52 |  if_ne	cmps	local03, ##575 wc
16cdc     01 2A 66 46 |  if_c_and_nz	neg	local07, #1
16ce0     00 2A 0E F2 | 	cmp	local07, #0 wz
16ce4     00 28 26 56 |  if_ne	not	local06, #0
16ce8     00 2C 06 F6 | 	mov	local08, #0
16cec     00 2E 06 F6 | 	mov	local09, #0
16cf0     11 15 02 F6 | 	mov	arg02, local03
16cf4     01 14 06 F1 | 	add	arg02, #1
16cf8     13 13 02 F6 | 	mov	arg01, local05
16cfc     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
16d00     10 FB 09 F2 | 	cmp	result1, local02 wz
16d04     00 2E 26 56 |  if_ne	not	local09, #0
16d08     00 2E 0E F2 | 	cmp	local09, #0 wz
16d0c     00 2C 26 56 |  if_ne	not	local08, #0
16d10     16 29 CA F7 | 	test	local06, local08 wz
16d14                 | '       spanbelow := 0
16d14     00 32 06 56 |  if_ne	mov	local11, #0
16d18                 | LR__1816
16d18                 | '     x1++
16d18     01 26 06 F1 | 	add	local05, #1
16d1c     3C FE 9F FD | 	jmp	#LR__1812
16d20                 | LR__1817
16d20                 | '   y:=fillpop()
16d20     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
16d24     FD 22 02 F6 | 	mov	local03, result1
16d28                 | '   x:=fillpop()
16d28     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
16d2c     FD 24 02 F6 | 	mov	local04, result1
16d30     C8 FD 9F FD | 	jmp	#LR__1810
16d34                 | LR__1818
16d34                 | LR__1819
16d34     A7 F0 03 F6 | 	mov	ptra, fp
16d38     B2 00 A0 FD | 	call	#popregs_
16d3c                 | _hg010b_spin2_fill_ret
16d3c     2D 00 64 FD | 	ret
16d40                 | 
16d40                 | ' 'pinlow(38)    
16d40                 | ' 
16d40                 | ' '-- A filled circle -----------------------------------------------------
16d40                 | ' 
16d40                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
16d40                 | _hg010b_spin2_fcircle
16d40     08 4A 05 F6 | 	mov	COUNT_, #8
16d44     A8 00 A0 FD | 	call	#pushregs_
16d48     0B 1F 02 F6 | 	mov	local01, arg03
16d4c     FF FF 7F FF 
16d50     FE 1F 06 FD | 	qmul	local01, ##-2
16d54     09 21 02 F6 | 	mov	local02, arg01
16d58     0A 23 02 F6 | 	mov	local03, arg02
16d5c     0C 25 02 F6 | 	mov	local04, arg04
16d60                 | ' 
16d60                 | ' d:=5-4*r
16d60     0F 19 02 F6 | 	mov	arg04, local01
16d64     02 18 66 F0 | 	shl	arg04, #2
16d68     05 26 06 F6 | 	mov	local05, #5
16d6c     0C 27 82 F1 | 	sub	local05, arg04
16d70                 | ' x:=0
16d70     00 28 06 F6 | 	mov	local06, #0
16d74                 | ' y:=r
16d74                 | ' da:=(-2*r+5)*4
16d74                 | ' db:=3*4
16d74     0C 2A 06 F6 | 	mov	local07, #12
16d78                 | ' repeat while (x<=y) 
16d78     18 2C 62 FD | 	getqx	local08
16d7c     05 2C 06 F1 | 	add	local08, #5
16d80     02 2C 66 F0 | 	shl	local08, #2
16d84                 | LR__1820
16d84     0F 29 5A F2 | 	cmps	local06, local01 wcz
16d88     B4 00 90 1D |  if_a	jmp	#LR__1822
16d8c                 | '   fastline(x0-x,x0+x,y0-y,c)
16d8c     10 13 02 F6 | 	mov	arg01, local02
16d90     14 13 82 F1 | 	sub	arg01, local06
16d94     10 15 02 F6 | 	mov	arg02, local02
16d98     14 15 02 F1 | 	add	arg02, local06
16d9c     11 17 02 F6 | 	mov	arg03, local03
16da0     0F 17 82 F1 | 	sub	arg03, local01
16da4     12 19 02 F6 | 	mov	arg04, local04
16da8     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
16dac                 | '   fastline(x0-x,x0+x,y0+y,c)
16dac     10 13 02 F6 | 	mov	arg01, local02
16db0     14 13 82 F1 | 	sub	arg01, local06
16db4     10 15 02 F6 | 	mov	arg02, local02
16db8     14 15 02 F1 | 	add	arg02, local06
16dbc     11 17 02 F6 | 	mov	arg03, local03
16dc0     0F 17 02 F1 | 	add	arg03, local01
16dc4     12 19 02 F6 | 	mov	arg04, local04
16dc8     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
16dcc                 | '   fastline(x0-y,x0+y,y0-x,c)
16dcc     10 13 02 F6 | 	mov	arg01, local02
16dd0     0F 13 82 F1 | 	sub	arg01, local01
16dd4     10 15 02 F6 | 	mov	arg02, local02
16dd8     0F 15 02 F1 | 	add	arg02, local01
16ddc     11 17 02 F6 | 	mov	arg03, local03
16de0     14 17 82 F1 | 	sub	arg03, local06
16de4     12 19 02 F6 | 	mov	arg04, local04
16de8     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
16dec                 | '   fastline(x0-y,x0+y,y0+x,c)
16dec     10 13 02 F6 | 	mov	arg01, local02
16df0     0F 13 82 F1 | 	sub	arg01, local01
16df4     10 15 02 F6 | 	mov	arg02, local02
16df8     0F 15 02 F1 | 	add	arg02, local01
16dfc     11 17 02 F6 | 	mov	arg03, local03
16e00     14 17 02 F1 | 	add	arg03, local06
16e04     12 19 02 F6 | 	mov	arg04, local04
16e08     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
16e0c                 | '   if d>0 
16e0c     01 26 56 F2 | 	cmps	local05, #1 wc
16e10     18 00 90 CD |  if_b	jmp	#LR__1821
16e14                 | '     d+=da
16e14     16 27 02 F1 | 	add	local05, local08
16e18                 | '     y-=1
16e18     01 1E 86 F1 | 	sub	local01, #1
16e1c                 | '     x+=1
16e1c     01 28 06 F1 | 	add	local06, #1
16e20                 | '     da+=4*4
16e20     10 2C 06 F1 | 	add	local08, #16
16e24                 | '     db+=2*4
16e24     08 2A 06 F1 | 	add	local07, #8
16e28     58 FF 9F FD | 	jmp	#LR__1820
16e2c                 | LR__1821
16e2c                 | '   else
16e2c                 | '     d+=db
16e2c     15 27 02 F1 | 	add	local05, local07
16e30                 | '     x+=1
16e30     01 28 06 F1 | 	add	local06, #1
16e34                 | '     da+=2*4
16e34     08 2C 06 F1 | 	add	local08, #8
16e38                 | '     db+=2*4
16e38     08 2A 06 F1 | 	add	local07, #8
16e3c     44 FF 9F FD | 	jmp	#LR__1820
16e40                 | LR__1822
16e40     A7 F0 03 F6 | 	mov	ptra, fp
16e44     B2 00 A0 FD | 	call	#popregs_
16e48                 | _hg010b_spin2_fcircle_ret
16e48     2D 00 64 FD | 	ret
16e4c                 | 
16e4c                 | '  
16e4c                 | ' '-- A circle ------------------------------------------------------------ 
16e4c                 | '  
16e4c                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
16e4c                 | _hg010b_spin2_circle
16e4c     08 4A 05 F6 | 	mov	COUNT_, #8
16e50     A8 00 A0 FD | 	call	#pushregs_
16e54     0B 1F 02 F6 | 	mov	local01, arg03
16e58     FF FF 7F FF 
16e5c     FE 1F 06 FD | 	qmul	local01, ##-2
16e60     09 21 02 F6 | 	mov	local02, arg01
16e64     0A 23 02 F6 | 	mov	local03, arg02
16e68     0C 25 02 F6 | 	mov	local04, arg04
16e6c                 | ' 
16e6c                 | '  
16e6c                 | ' d:=5-4*r
16e6c     0F 19 02 F6 | 	mov	arg04, local01
16e70     02 18 66 F0 | 	shl	arg04, #2
16e74     05 26 06 F6 | 	mov	local05, #5
16e78     0C 27 82 F1 | 	sub	local05, arg04
16e7c                 | ' x:=0
16e7c     00 28 06 F6 | 	mov	local06, #0
16e80                 | ' y:=r
16e80                 | ' da:=(-2*r+5)*4
16e80                 | ' db:=3*4
16e80     0C 2A 06 F6 | 	mov	local07, #12
16e84                 | ' repeat while (x<=y) 
16e84     18 2C 62 FD | 	getqx	local08
16e88     05 2C 06 F1 | 	add	local08, #5
16e8c     02 2C 66 F0 | 	shl	local08, #2
16e90                 | LR__1830
16e90     0F 29 5A F2 | 	cmps	local06, local01 wcz
16e94     F4 00 90 1D |  if_a	jmp	#LR__1832
16e98                 | '   putpixel(x0-x,y0-y,c)
16e98     10 13 02 F6 | 	mov	arg01, local02
16e9c     14 13 82 F1 | 	sub	arg01, local06
16ea0     11 15 02 F6 | 	mov	arg02, local03
16ea4     0F 15 82 F1 | 	sub	arg02, local01
16ea8     12 17 02 F6 | 	mov	arg03, local04
16eac     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
16eb0                 | '   putpixel(x0-x,y0+y,c)
16eb0     10 13 02 F6 | 	mov	arg01, local02
16eb4     14 13 82 F1 | 	sub	arg01, local06
16eb8     11 15 02 F6 | 	mov	arg02, local03
16ebc     0F 15 02 F1 | 	add	arg02, local01
16ec0     12 17 02 F6 | 	mov	arg03, local04
16ec4     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
16ec8                 | '   putpixel(x0+x,y0-y,c)
16ec8     10 13 02 F6 | 	mov	arg01, local02
16ecc     14 13 02 F1 | 	add	arg01, local06
16ed0     11 15 02 F6 | 	mov	arg02, local03
16ed4     0F 15 82 F1 | 	sub	arg02, local01
16ed8     12 17 02 F6 | 	mov	arg03, local04
16edc     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
16ee0                 | '   putpixel(x0+x,y0+y,c)
16ee0     10 13 02 F6 | 	mov	arg01, local02
16ee4     14 13 02 F1 | 	add	arg01, local06
16ee8     11 15 02 F6 | 	mov	arg02, local03
16eec     0F 15 02 F1 | 	add	arg02, local01
16ef0     12 17 02 F6 | 	mov	arg03, local04
16ef4     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
16ef8                 | '   putpixel(x0-y,y0-x,c)
16ef8     10 13 02 F6 | 	mov	arg01, local02
16efc     0F 13 82 F1 | 	sub	arg01, local01
16f00     11 15 02 F6 | 	mov	arg02, local03
16f04     14 15 82 F1 | 	sub	arg02, local06
16f08     12 17 02 F6 | 	mov	arg03, local04
16f0c     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
16f10                 | '   putpixel(x0-y,y0+x,c)
16f10     10 13 02 F6 | 	mov	arg01, local02
16f14     0F 13 82 F1 | 	sub	arg01, local01
16f18     11 15 02 F6 | 	mov	arg02, local03
16f1c     14 15 02 F1 | 	add	arg02, local06
16f20     12 17 02 F6 | 	mov	arg03, local04
16f24     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
16f28                 | '   putpixel(x0+y,y0-x,c)
16f28     10 13 02 F6 | 	mov	arg01, local02
16f2c     0F 13 02 F1 | 	add	arg01, local01
16f30     11 15 02 F6 | 	mov	arg02, local03
16f34     14 15 82 F1 | 	sub	arg02, local06
16f38     12 17 02 F6 | 	mov	arg03, local04
16f3c     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
16f40                 | '   putpixel(x0+y,y0+x,c)
16f40     10 13 02 F6 | 	mov	arg01, local02
16f44     0F 13 02 F1 | 	add	arg01, local01
16f48     11 15 02 F6 | 	mov	arg02, local03
16f4c     14 15 02 F1 | 	add	arg02, local06
16f50     12 17 02 F6 | 	mov	arg03, local04
16f54     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
16f58                 | '   if d>0 
16f58     01 26 56 F2 | 	cmps	local05, #1 wc
16f5c     18 00 90 CD |  if_b	jmp	#LR__1831
16f60                 | '     d+=da
16f60     16 27 02 F1 | 	add	local05, local08
16f64                 | '     y-=1
16f64     01 1E 86 F1 | 	sub	local01, #1
16f68                 | '     x+=1
16f68     01 28 06 F1 | 	add	local06, #1
16f6c                 | '     da+=4*4
16f6c     10 2C 06 F1 | 	add	local08, #16
16f70                 | '     db+=2*4
16f70     08 2A 06 F1 | 	add	local07, #8
16f74     18 FF 9F FD | 	jmp	#LR__1830
16f78                 | LR__1831
16f78                 | '   else
16f78                 | '     d+=db
16f78     15 27 02 F1 | 	add	local05, local07
16f7c                 | '     x+=1
16f7c     01 28 06 F1 | 	add	local06, #1
16f80                 | '     da+=2*4
16f80     08 2C 06 F1 | 	add	local08, #8
16f84                 | '     db+=2*4
16f84     08 2A 06 F1 | 	add	local07, #8
16f88     04 FF 9F FD | 	jmp	#LR__1830
16f8c                 | LR__1832
16f8c     A7 F0 03 F6 | 	mov	ptra, fp
16f90     B2 00 A0 FD | 	call	#popregs_
16f94                 | _hg010b_spin2_circle_ret
16f94     2D 00 64 FD | 	ret
16f98                 | 
16f98                 | '     
16f98                 | ' '-- A frame (an empty rectangle) ---------------------------------------
16f98                 | ' 
16f98                 | ' pub frame(x1,y1,x2,y2,c)
16f98                 | _hg010b_spin2_frame
16f98     05 4A 05 F6 | 	mov	COUNT_, #5
16f9c     A8 00 A0 FD | 	call	#pushregs_
16fa0     09 1F 02 F6 | 	mov	local01, arg01
16fa4     0A 21 02 F6 | 	mov	local02, arg02
16fa8     0B 23 02 F6 | 	mov	local03, arg03
16fac     0C 25 02 F6 | 	mov	local04, arg04
16fb0     0D 27 02 F6 | 	mov	local05, arg05
16fb4                 | ' 
16fb4                 | ' fastline(x1,x2,y1,c)
16fb4     0F 13 02 F6 | 	mov	arg01, local01
16fb8     11 15 02 F6 | 	mov	arg02, local03
16fbc     10 17 02 F6 | 	mov	arg03, local02
16fc0     13 19 02 F6 | 	mov	arg04, local05
16fc4     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
16fc8                 | ' fastline(x1,x2,y2,c)
16fc8     0F 13 02 F6 | 	mov	arg01, local01
16fcc     11 15 02 F6 | 	mov	arg02, local03
16fd0     12 17 02 F6 | 	mov	arg03, local04
16fd4     13 19 02 F6 | 	mov	arg04, local05
16fd8     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
16fdc                 | ' line(x1,y1,x1,y2,c)
16fdc     0F 13 02 F6 | 	mov	arg01, local01
16fe0     10 15 02 F6 | 	mov	arg02, local02
16fe4     0F 17 02 F6 | 	mov	arg03, local01
16fe8     12 19 02 F6 | 	mov	arg04, local04
16fec     13 1B 02 F6 | 	mov	arg05, local05
16ff0                 | ' draw(x1,y1,x2,y2,c)
16ff0     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
16ff4                 | ' line(x2,y1,x2,y2,c)
16ff4     11 13 02 F6 | 	mov	arg01, local03
16ff8     10 15 02 F6 | 	mov	arg02, local02
16ffc     11 17 02 F6 | 	mov	arg03, local03
17000     12 19 02 F6 | 	mov	arg04, local04
17004     13 1B 02 F6 | 	mov	arg05, local05
17008                 | ' draw(x1,y1,x2,y2,c)
17008     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
1700c     A7 F0 03 F6 | 	mov	ptra, fp
17010     B2 00 A0 FD | 	call	#popregs_
17014                 | _hg010b_spin2_frame_ret
17014     2D 00 64 FD | 	ret
17018                 | 
17018                 | ' 
17018                 | ' '-- A box (a filled rectangle) ----------------------------------------
17018                 | ' 
17018                 | ' pub box(x1,y1,x2,y2,c) |yy
17018                 | _hg010b_spin2_box
17018     06 4A 05 F6 | 	mov	COUNT_, #6
1701c     A8 00 A0 FD | 	call	#pushregs_
17020     09 1F 02 F6 | 	mov	local01, arg01
17024     0A 21 02 F6 | 	mov	local02, arg02
17028     0B 23 02 F6 | 	mov	local03, arg03
1702c     0C 25 02 F6 | 	mov	local04, arg04
17030     0D 27 02 F6 | 	mov	local05, arg05
17034                 | ' 
17034                 | ' repeat yy from y1 to y2
17034     10 25 52 F2 | 	cmps	local04, local02 wc
17038     01 28 86 F6 | 	negc	local06, #1
1703c     14 25 02 F1 | 	add	local04, local06
17040                 | LR__1840
17040                 | '   fastline(x1,x2,yy,c)
17040     0F 13 02 F6 | 	mov	arg01, local01
17044     11 15 02 F6 | 	mov	arg02, local03
17048     13 19 02 F6 | 	mov	arg04, local05
1704c     10 17 02 F6 | 	mov	arg03, local02
17050     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
17054     14 21 02 F1 | 	add	local02, local06
17058     12 21 0A F2 | 	cmp	local02, local04 wz
1705c     E0 FF 9F 5D |  if_ne	jmp	#LR__1840
17060     A7 F0 03 F6 | 	mov	ptra, fp
17064     B2 00 A0 FD | 	call	#popregs_
17068                 | _hg010b_spin2_box_ret
17068     2D 00 64 FD | 	ret
1706c                 | 
1706c                 | '       
1706c                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
1706c                 | _hg010b_spin2_putcharxycgf
1706c                 | ' 
1706c                 | '  
1706c                 | ' repeat yy from 0 to 15
1706c     00 00 06 F6 | 	mov	_var01, #0
17070     97 8C 48 FB | 	callpa	#(@LR__1852-@LR__1850)>>2,fcache_load_ptr_
17074                 | LR__1850
17074                 | ' 
17074                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
17074     91 E4 05 F1 | 	add	objptr, #145
17078     F2 02 02 FB | 	rdlong	_var02, objptr
1707c     0A 02 66 F0 | 	shl	_var02, #10
17080     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
17084     01 05 02 F1 | 	add	_var03, _var02
17088     0B 03 02 F6 | 	mov	_var02, arg03
1708c     04 02 66 F0 | 	shl	_var02, #4
17090     01 05 02 F1 | 	add	_var03, _var02
17094     00 05 02 F1 | 	add	_var03, _var01
17098     02 05 C2 FA | 	rdbyte	_var03, _var03
1709c                 | '   asm
1709c     00 04 0E F4 | 	testb	_var03, #0 wz
170a0     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
170a4     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
170a8     01 04 0E F4 | 	testb	_var03, #1 wz
170ac     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
170b0     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
170b4     02 04 0E F4 | 	testb	_var03, #2 wz
170b8     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
170bc     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
170c0     03 04 0E F4 | 	testb	_var03, #3 wz
170c4     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
170c8     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
170cc     04 04 0E F4 | 	testb	_var03, #4 wz
170d0     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
170d4     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
170d8     05 04 0E F4 | 	testb	_var03, #5 wz
170dc     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
170e0     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
170e4     06 04 0E F4 | 	testb	_var03, #6 wz
170e8     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
170ec     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
170f0     07 04 0E F4 | 	testb	_var03, #7 wz
170f4     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
170f8     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
170fc                 | '   
170fc                 | '   ccc[0]:=c1
170fc     99 E5 05 F1 | 	add	objptr, #409
17100     F2 06 62 FC | 	wrlong	_var04, objptr
17104                 | '   ccc[1]:=c2 
17104     04 E4 05 F1 | 	add	objptr, #4
17108     F2 08 62 FC | 	wrlong	_var05, objptr
1710c                 | '   long[mailbox0][2]:=8
1710c     49 E4 85 F1 | 	sub	objptr, #73
17110     F2 04 02 FB | 	rdlong	_var03, objptr
17114     08 04 06 F1 | 	add	_var03, #8
17118     02 11 68 FC | 	wrlong	#8, _var03
1711c                 | '   long[mailbox0][1]:=@ccc
1711c     45 E4 05 F1 | 	add	objptr, #69
17120     F2 04 02 F6 | 	mov	_var03, objptr
17124     45 E4 85 F1 | 	sub	objptr, #69
17128     F2 02 02 FB | 	rdlong	_var02, objptr
1712c     04 02 06 F1 | 	add	_var02, #4
17130     01 05 62 FC | 	wrlong	_var03, _var02
17134                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
17134     0C E5 85 F1 | 	sub	objptr, #268
17138     F2 04 02 FB | 	rdlong	_var03, objptr
1713c     0A 03 02 F6 | 	mov	_var02, arg02
17140     00 03 02 F1 | 	add	_var02, _var01
17144     0A 02 66 F0 | 	shl	_var02, #10
17148     09 0B 02 F6 | 	mov	_var06, arg01
1714c     02 0A 66 F0 | 	shl	_var06, #2
17150     05 03 02 F1 | 	add	_var02, _var06
17154     01 05 02 F1 | 	add	_var03, _var02
17158     00 00 78 FF 
1715c     00 04 06 F1 | 	add	_var03, ##-268435456
17160     0C E5 05 F1 | 	add	objptr, #268
17164     F2 0A 02 FB | 	rdlong	_var06, objptr
17168     05 05 62 FC | 	wrlong	_var03, _var06
1716c                 | '   repeat
1716c                 | LR__1851
1716c     F2 04 02 FB | 	rdlong	_var03, objptr
17170     02 03 02 FB | 	rdlong	_var02, _var03
17174     00 02 56 F2 | 	cmps	_var02, #0 wc
17178     F0 FF 9F CD |  if_b	jmp	#LR__1851
1717c     E5 E5 85 F1 | 	sub	objptr, #485
17180     01 00 06 F1 | 	add	_var01, #1
17184     10 00 56 F2 | 	cmps	_var01, #16 wc
17188     E8 FE 9F CD |  if_b	jmp	#LR__1850
1718c                 | LR__1852
1718c                 | _hg010b_spin2_putcharxycgf_ret
1718c     2D 00 64 FD | 	ret
17190                 | 
17190                 | ' 
17190                 | ' 
17190                 | ' '**********************************************************************r***
17190                 | ' '                                                                        *
17190                 | ' ' Font related functions                                                 *
17190                 | ' '                                                                        *
17190                 | ' '*************************************************************************
17190                 | ' 
17190                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
17190                 | ' 
17190                 | ' pub setfontfamily(afontnum)
17190                 | _hg010b_spin2_setfontfamily
17190                 | ' 
17190                 | ' font_family:=afontnum
17190     91 E4 05 F1 | 	add	objptr, #145
17194     F2 12 62 FC | 	wrlong	arg01, objptr
17198     91 E4 85 F1 | 	sub	objptr, #145
1719c                 | ' 'if afontnum==8
1719c                 | ' '  font_ptr:=@amiga_font
1719c                 | ' 
1719c                 | ' if afontnum==4
1719c     04 12 0E F2 | 	cmp	arg01, #4 wz
171a0                 | '   font_ptr:=@st_font
171a0     08 00 00 AF 
171a4     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
171a8     04 E4 05 A1 |  if_e	add	objptr, #4
171ac     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
171b0     04 E4 85 A1 |  if_e	sub	objptr, #4
171b4     08 00 00 AF 
171b8     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
171bc                 | ' if afontnum==0
171bc     00 12 0E F2 | 	cmp	arg01, #0 wz
171c0                 | '   font_ptr:=@vga_font
171c0     04 E4 05 A1 |  if_e	add	objptr, #4
171c4     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
171c8     04 E4 85 A1 |  if_e	sub	objptr, #4
171cc                 | _hg010b_spin2_setfontfamily_ret
171cc     2D 00 64 FD | 	ret
171d0                 | 
171d0                 | ' 
171d0                 | ' '*************************************************************************
171d0                 | ' '                                                                        *
171d0                 | ' '  Cursor functions                                                      *
171d0                 | ' '                                                                        *
171d0                 | ' '*************************************************************************
171d0                 | ' 
171d0                 | ' 
171d0                 | ' pub setcursorpos(x,y)
171d0                 | _hg010b_spin2_setcursorpos
171d0                 | ' 
171d0                 | ' ''---------- Set the (x,y) position of cursor
171d0                 | ' 
171d0                 | ' cursor_x:=x
171d0     38 E4 05 F1 | 	add	objptr, #56
171d4     F2 12 52 FC | 	wrword	arg01, objptr
171d8                 | ' cursor_y:=y
171d8     02 E4 05 F1 | 	add	objptr, #2
171dc     F2 14 42 FC | 	wrbyte	arg02, objptr
171e0                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
171e0     02 E4 85 F1 | 	sub	objptr, #2
171e4     F2 14 E2 FA | 	rdword	arg02, objptr
171e8     02 14 66 F0 | 	shl	arg02, #2
171ec     02 E4 05 F1 | 	add	objptr, #2
171f0     F2 16 C2 FA | 	rdbyte	arg03, objptr
171f4     3A E4 85 F1 | 	sub	objptr, #58
171f8     04 16 66 F0 | 	shl	arg03, #4
171fc     11 12 06 F6 | 	mov	arg01, #17
17200     70 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
17204                 | _hg010b_spin2_setcursorpos_ret
17204     2D 00 64 FD | 	ret
17208                 | 
17208                 | ' 
17208                 | ' '*************************************************************************
17208                 | ' '                                                                        *
17208                 | ' '  VBlank functions                                                      *
17208                 | ' '                                                                        *
17208                 | ' '*************************************************************************
17208                 | ' 
17208                 | ' pub waitvbl(amount) | i
17208                 | _hg010b_spin2_waitvbl
17208     03 4A 05 F6 | 	mov	COUNT_, #3
1720c     A8 00 A0 FD | 	call	#pushregs_
17210     09 1F 02 F6 | 	mov	local01, arg01
17214                 | ' 
17214                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
17214                 | ' 
17214                 | ' repeat i from 1 to amount
17214     01 20 06 F6 | 	mov	local02, #1
17218     01 1E 56 F2 | 	cmps	local01, #1 wc
1721c     01 22 86 F6 | 	negc	local03, #1
17220     11 1F 02 F1 | 	add	local01, local03
17224                 | LR__1860
17224                 | '   repeat until vblank==0
17224                 | LR__1861
17224     45 E4 05 F1 | 	add	objptr, #69
17228     F2 12 0A FB | 	rdlong	arg01, objptr wz
1722c     45 E4 85 F1 | 	sub	objptr, #69
17230     0C 00 90 AD |  if_e	jmp	#LR__1862
17234                 | '     waitus(100)
17234     64 12 06 F6 | 	mov	arg01, #100
17238     80 16 B0 FD | 	call	#__system___waitus
1723c     E4 FF 9F FD | 	jmp	#LR__1861
17240                 | LR__1862
17240                 | '   repeat until vblank==1
17240                 | LR__1863
17240     45 E4 05 F1 | 	add	objptr, #69
17244     F2 12 02 FB | 	rdlong	arg01, objptr
17248     45 E4 85 F1 | 	sub	objptr, #69
1724c     01 12 0E F2 | 	cmp	arg01, #1 wz
17250     0C 00 90 AD |  if_e	jmp	#LR__1864
17254                 | '     waitus(100)
17254     64 12 06 F6 | 	mov	arg01, #100
17258     60 16 B0 FD | 	call	#__system___waitus
1725c     E0 FF 9F FD | 	jmp	#LR__1863
17260                 | LR__1864
17260     11 21 02 F1 | 	add	local02, local03
17264     0F 21 0A F2 | 	cmp	local02, local01 wz
17268     B8 FF 9F 5D |  if_ne	jmp	#LR__1860
1726c     A7 F0 03 F6 | 	mov	ptra, fp
17270     B2 00 A0 FD | 	call	#popregs_
17274                 | _hg010b_spin2_waitvbl_ret
17274     2D 00 64 FD | 	ret
17278                 | 
17278                 | ' 
17278                 | ' 
17278                 | ' pub cls(fc,bc)   :c,i
17278                 | _hg010b_spin2_cls
17278     02 4A 05 F6 | 	mov	COUNT_, #2
1727c     A8 00 A0 FD | 	call	#pushregs_
17280     09 1F 02 F6 | 	mov	local01, arg01
17284     0A 21 02 F6 | 	mov	local02, arg02
17288                 | ' 
17288                 | ' c:=bc
17288                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
17288     D9 E4 05 F1 | 	add	objptr, #217
1728c     F2 12 02 FB | 	rdlong	arg01, objptr
17290     A5 E4 85 F1 | 	sub	objptr, #165
17294     F2 16 02 FB | 	rdlong	arg03, objptr
17298     02 16 66 F0 | 	shl	arg03, #2
1729c     10 15 02 F6 | 	mov	arg02, local02
172a0     00 18 06 F6 | 	mov	arg04, #0
172a4     01 1A 06 F6 | 	mov	arg05, #1
172a8     0B 00 00 FF 
172ac     8C E4 05 F1 | 	add	objptr, ##5772
172b0     F0 08 B0 FD | 	call	#_psram_spin2_fill
172b4                 | ' setwritecolors(fc,bc)
172b4                 | ' 
172b4                 | ' write_color:=ff
172b4     0B 00 00 FF 
172b8     83 E4 85 F1 | 	sub	objptr, ##5763
172bc     F2 1E 62 FC | 	wrlong	local01, objptr
172c0                 | ' write_background:=bb
172c0     04 E4 05 F1 | 	add	objptr, #4
172c4     F2 20 62 FC | 	wrlong	local02, objptr
172c8                 | ' cursor_x:=0
172c8     09 E4 85 F1 | 	sub	objptr, #9
172cc     F2 00 58 FC | 	wrword	#0, objptr
172d0                 | ' cursor_y:=0
172d0     02 E4 05 F1 | 	add	objptr, #2
172d4     F2 00 48 FC | 	wrbyte	#0, objptr
172d8                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
172d8     02 E4 85 F1 | 	sub	objptr, #2
172dc     F2 14 E2 FA | 	rdword	arg02, objptr
172e0     02 14 66 F0 | 	shl	arg02, #2
172e4     02 E4 05 F1 | 	add	objptr, #2
172e8     F2 16 C2 FA | 	rdbyte	arg03, objptr
172ec     3A E4 85 F1 | 	sub	objptr, #58
172f0     04 16 66 F0 | 	shl	arg03, #4
172f4     11 12 06 F6 | 	mov	arg01, #17
172f8     78 F2 BF FD | 	call	#_hg010b_spin2_setspritepos
172fc                 | ' setcursorcolor(fc)
172fc     0F 13 02 F6 | 	mov	arg01, local01
17300     2C EF BF FD | 	call	#_hg010b_spin2_setcursorcolor
17304     10 FB 01 F6 | 	mov	result1, local02
17308     00 FC 05 F6 | 	mov	result2, #0
1730c     A7 F0 03 F6 | 	mov	ptra, fp
17310     B2 00 A0 FD | 	call	#popregs_
17314                 | _hg010b_spin2_cls_ret
17314     2D 00 64 FD | 	ret
17318                 | 
17318                 | ' 
17318                 | ' ''---------- Output a char at the cursor position, move the cursor 
17318                 | ' 
17318                 | ' pub putchar(achar) | c,x,y,l,newcpl
17318                 | _hg010b_spin2_putchar
17318     01 4A 05 F6 | 	mov	COUNT_, #1
1731c     A8 00 A0 FD | 	call	#pushregs_
17320     09 1F 02 F6 | 	mov	local01, arg01
17324                 | ' 
17324                 | ' if achar==10
17324     0A 1E 0E F2 | 	cmp	local01, #10 wz
17328                 | '   crlf()
17328     68 03 B0 AD |  if_e	call	#_hg010b_spin2_crlf
1732c                 | ' if achar==9
1732c     09 1E 0E F2 | 	cmp	local01, #9 wz
17330     18 00 90 5D |  if_ne	jmp	#LR__1870
17334                 | '   cursor_x:=(cursor_x& %11110000)+16
17334     38 E4 05 F1 | 	add	objptr, #56
17338     F2 16 E2 FA | 	rdword	arg03, objptr
1733c     F0 16 06 F5 | 	and	arg03, #240
17340     10 16 06 F1 | 	add	arg03, #16
17344     F2 16 52 FC | 	wrword	arg03, objptr
17348     38 E4 85 F1 | 	sub	objptr, #56
1734c                 | LR__1870
1734c                 | '   
1734c                 | ' if (achar<>9) && (achar<>10) 
1734c     09 1E 0E F2 | 	cmp	local01, #9 wz
17350     0A 1E 0E 52 |  if_ne	cmp	local01, #10 wz
17354     44 00 90 AD |  if_e	jmp	#LR__1871
17358                 | '   putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
17358     38 E4 05 F1 | 	add	objptr, #56
1735c     F2 12 E2 FA | 	rdword	arg01, objptr
17360     02 E4 05 F1 | 	add	objptr, #2
17364     F2 14 C2 FA | 	rdbyte	arg02, objptr
17368     04 14 66 F0 | 	shl	arg02, #4
1736c     03 E4 05 F1 | 	add	objptr, #3
17370     F2 18 02 FB | 	rdlong	arg04, objptr
17374     04 E4 05 F1 | 	add	objptr, #4
17378     F2 1A 02 FB | 	rdlong	arg05, objptr
1737c     41 E4 85 F1 | 	sub	objptr, #65
17380     0F 17 02 F6 | 	mov	arg03, local01
17384     E4 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
17388                 | '   cursor_x+=2
17388     38 E4 05 F1 | 	add	objptr, #56
1738c     F2 1E E2 FA | 	rdword	local01, objptr
17390     02 1E 06 F1 | 	add	local01, #2
17394     F2 1E 52 FC | 	wrword	local01, objptr
17398     38 E4 85 F1 | 	sub	objptr, #56
1739c                 | LR__1871
1739c                 | ' 
1739c                 | ' if cursor_x>=256
1739c     38 E4 05 F1 | 	add	objptr, #56
173a0     F2 1E E2 FA | 	rdword	local01, objptr
173a4     38 E4 85 F1 | 	sub	objptr, #56
173a8     00 1F 56 F2 | 	cmps	local01, #256 wc
173ac     64 00 90 CD |  if_b	jmp	#LR__1873
173b0                 | '   cursor_x:=0
173b0     38 E4 05 F1 | 	add	objptr, #56
173b4     F2 00 58 FC | 	wrword	#0, objptr
173b8                 | '   cursor_y+=1
173b8     02 E4 05 F1 | 	add	objptr, #2
173bc     F2 1E C2 FA | 	rdbyte	local01, objptr
173c0     01 1E 06 F1 | 	add	local01, #1
173c4     F2 1E 42 FC | 	wrbyte	local01, objptr
173c8                 | '   if cursor_y>st_lines-1
173c8     C3 E4 05 F1 | 	add	objptr, #195
173cc     F2 1E 02 FB | 	rdlong	local01, objptr
173d0     01 1E 86 F1 | 	sub	local01, #1
173d4     C3 E4 85 F1 | 	sub	objptr, #195
173d8     F2 16 C2 FA | 	rdbyte	arg03, objptr
173dc     3A E4 85 F1 | 	sub	objptr, #58
173e0     0F 17 5A F2 | 	cmps	arg03, local01 wcz
173e4     2C 00 90 ED |  if_be	jmp	#LR__1872
173e8                 | '     scrollup()
173e8     00 12 06 F6 | 	mov	arg01, #0
173ec     01 00 00 FF 
173f0     40 14 06 F6 | 	mov	arg02, ##576
173f4     10 16 06 F6 | 	mov	arg03, #16
173f8     9C 01 B0 FD | 	call	#_hg010b_spin2_scrollup
173fc                 | '     cursor_y:=st_lines-1
173fc     FD E4 05 F1 | 	add	objptr, #253
17400     F2 1E 02 FB | 	rdlong	local01, objptr
17404     01 1E 86 F1 | 	sub	local01, #1
17408     C3 E4 85 F1 | 	sub	objptr, #195
1740c     F2 1E 42 FC | 	wrbyte	local01, objptr
17410     3A E4 85 F1 | 	sub	objptr, #58
17414                 | LR__1872
17414                 | LR__1873
17414                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
17414     38 E4 05 F1 | 	add	objptr, #56
17418     F2 14 E2 FA | 	rdword	arg02, objptr
1741c     02 14 66 F0 | 	shl	arg02, #2
17420     02 E4 05 F1 | 	add	objptr, #2
17424     F2 16 C2 FA | 	rdbyte	arg03, objptr
17428     3A E4 85 F1 | 	sub	objptr, #58
1742c     04 16 66 F0 | 	shl	arg03, #4
17430     11 12 06 F6 | 	mov	arg01, #17
17434     3C F1 BF FD | 	call	#_hg010b_spin2_setspritepos
17438     A7 F0 03 F6 | 	mov	ptra, fp
1743c     B2 00 A0 FD | 	call	#popregs_
17440                 | _hg010b_spin2_putchar_ret
17440     2D 00 64 FD | 	ret
17444                 | 
17444                 | '     
17444                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
17444                 | ' 
17444                 | ' pub putchar2(achar) | c,x,y,l,newcpl
17444                 | _hg010b_spin2_putchar2
17444     01 4A 05 F6 | 	mov	COUNT_, #1
17448     A8 00 A0 FD | 	call	#pushregs_
1744c                 | ' 
1744c                 | ' putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
1744c     38 E4 05 F1 | 	add	objptr, #56
17450     F2 1E E2 FA | 	rdword	local01, objptr
17454     02 E4 05 F1 | 	add	objptr, #2
17458     F2 14 C2 FA | 	rdbyte	arg02, objptr
1745c     04 14 66 F0 | 	shl	arg02, #4
17460     09 17 02 F6 | 	mov	arg03, arg01
17464     03 E4 05 F1 | 	add	objptr, #3
17468     F2 18 02 FB | 	rdlong	arg04, objptr
1746c     04 E4 05 F1 | 	add	objptr, #4
17470     F2 1A 02 FB | 	rdlong	arg05, objptr
17474     41 E4 85 F1 | 	sub	objptr, #65
17478     0F 13 02 F6 | 	mov	arg01, local01
1747c     EC FB BF FD | 	call	#_hg010b_spin2_putcharxycgf
17480                 | ' cursor_x+=2
17480     38 E4 05 F1 | 	add	objptr, #56
17484     F2 1E E2 FA | 	rdword	local01, objptr
17488     02 1E 06 F1 | 	add	local01, #2
1748c     F2 1E 52 FC | 	wrword	local01, objptr
17490                 | ' if cursor_x>=256
17490     F2 1E E2 FA | 	rdword	local01, objptr
17494     38 E4 85 F1 | 	sub	objptr, #56
17498     00 1F 56 F2 | 	cmps	local01, #256 wc
1749c     64 00 90 CD |  if_b	jmp	#LR__1881
174a0                 | '   cursor_x:=0
174a0     38 E4 05 F1 | 	add	objptr, #56
174a4     F2 00 58 FC | 	wrword	#0, objptr
174a8                 | '   cursor_y+=1
174a8     02 E4 05 F1 | 	add	objptr, #2
174ac     F2 1E C2 FA | 	rdbyte	local01, objptr
174b0     01 1E 06 F1 | 	add	local01, #1
174b4     F2 1E 42 FC | 	wrbyte	local01, objptr
174b8                 | '   if cursor_y>st_lines-1
174b8     C3 E4 05 F1 | 	add	objptr, #195
174bc     F2 1E 02 FB | 	rdlong	local01, objptr
174c0     01 1E 86 F1 | 	sub	local01, #1
174c4     C3 E4 85 F1 | 	sub	objptr, #195
174c8     F2 1A C2 FA | 	rdbyte	arg05, objptr
174cc     3A E4 85 F1 | 	sub	objptr, #58
174d0     0F 1B 5A F2 | 	cmps	arg05, local01 wcz
174d4     2C 00 90 ED |  if_be	jmp	#LR__1880
174d8                 | '     scrollup()
174d8     00 12 06 F6 | 	mov	arg01, #0
174dc     01 00 00 FF 
174e0     40 14 06 F6 | 	mov	arg02, ##576
174e4     10 16 06 F6 | 	mov	arg03, #16
174e8     AC 00 B0 FD | 	call	#_hg010b_spin2_scrollup
174ec                 | '     cursor_y:=st_lines-1
174ec     FD E4 05 F1 | 	add	objptr, #253
174f0     F2 1E 02 FB | 	rdlong	local01, objptr
174f4     01 1E 86 F1 | 	sub	local01, #1
174f8     C3 E4 85 F1 | 	sub	objptr, #195
174fc     F2 1E 42 FC | 	wrbyte	local01, objptr
17500     3A E4 85 F1 | 	sub	objptr, #58
17504                 | LR__1880
17504                 | LR__1881
17504                 | ' setspritepos(17,4*cursor_x,16*cursor_y ) 
17504     38 E4 05 F1 | 	add	objptr, #56
17508     F2 14 E2 FA | 	rdword	arg02, objptr
1750c     02 14 66 F0 | 	shl	arg02, #2
17510     02 E4 05 F1 | 	add	objptr, #2
17514     F2 16 C2 FA | 	rdbyte	arg03, objptr
17518     3A E4 85 F1 | 	sub	objptr, #58
1751c     04 16 66 F0 | 	shl	arg03, #4
17520     11 12 06 F6 | 	mov	arg01, #17
17524     4C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
17528     A7 F0 03 F6 | 	mov	ptra, fp
1752c     B2 00 A0 FD | 	call	#popregs_
17530                 | _hg010b_spin2_putchar2_ret
17530     2D 00 64 FD | 	ret
17534                 | 
17534                 | ' ''--------- Output a string at the cursor position, move the cursor  
17534                 | ' 
17534                 | ' pub write(text) | iii,c,ncx,ncy
17534                 | _hg010b_spin2_write
17534     04 4A 05 F6 | 	mov	COUNT_, #4
17538     A8 00 A0 FD | 	call	#pushregs_
1753c     09 1F 02 F6 | 	mov	local01, arg01
17540                 | ' 
17540                 | ' repeat iii from 0 to strsize(text)-1
17540     00 20 06 F6 | 	mov	local02, #0
17544     0F 13 02 F6 | 	mov	arg01, local01
17548     09 23 02 F6 | 	mov	local03, arg01
1754c     97 06 48 FB | 	callpa	#(@LR__1891-@LR__1890)>>2,fcache_load_ptr_
17550                 | LR__1890
17550     11 FB C9 FA | 	rdbyte	result1, local03 wz
17554     01 22 06 51 |  if_ne	add	local03, #1
17558     F4 FF 9F 5D |  if_ne	jmp	#LR__1890
1755c                 | LR__1891
1755c     09 23 82 F1 | 	sub	local03, arg01
17560     01 22 86 F1 | 	sub	local03, #1
17564     00 22 56 F2 | 	cmps	local03, #0 wc
17568     01 24 86 F6 | 	negc	local04, #1
1756c     12 23 02 F1 | 	add	local03, local04
17570                 | LR__1892
17570                 | '   putchar2(byte[text+iii])
17570     0F 13 02 F6 | 	mov	arg01, local01
17574     10 13 02 F1 | 	add	arg01, local02
17578     09 13 C2 FA | 	rdbyte	arg01, arg01
1757c     C4 FE BF FD | 	call	#_hg010b_spin2_putchar2
17580     12 21 02 F1 | 	add	local02, local04
17584     11 21 0A F2 | 	cmp	local02, local03 wz
17588     E4 FF 9F 5D |  if_ne	jmp	#LR__1892
1758c     A7 F0 03 F6 | 	mov	ptra, fp
17590     B2 00 A0 FD | 	call	#popregs_
17594                 | _hg010b_spin2_write_ret
17594     2D 00 64 FD | 	ret
17598                 | 
17598                 | ' 
17598                 | ' ''-----------  Scroll the screen one line up
17598                 | ' 
17598                 | ' pub scrollup(start=0, end=576 , amount=16) | i
17598                 | _hg010b_spin2_scrollup
17598     01 4A 05 F6 | 	mov	COUNT_, #1
1759c     A8 00 A0 FD | 	call	#pushregs_
175a0                 | ' 	
175a0                 | ' repeat i from 0 to 559 
175a0     00 1E 06 F6 | 	mov	local01, #0
175a4                 | LR__1900
175a4     F5 E4 05 F1 | 	add	objptr, #245
175a8     F2 18 02 FB | 	rdlong	arg04, objptr
175ac     1C E4 85 F1 | 	sub	objptr, #28
175b0     F2 14 02 FB | 	rdlong	arg02, objptr
175b4     0F 13 02 F6 | 	mov	arg01, local01
175b8     10 12 06 F1 | 	add	arg01, #16
175bc     02 12 66 F0 | 	shl	arg01, #2
175c0     14 E4 05 F1 | 	add	objptr, #20
175c4     F2 16 02 FB | 	rdlong	arg03, objptr
175c8     0B 13 02 FD | 	qmul	arg01, arg03
175cc                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
175cc     F6 03 00 FF 
175d0     00 12 06 F6 | 	mov	arg01, ##519168
175d4     0C 13 82 F1 | 	sub	arg01, arg04
175d8     02 16 66 F0 | 	shl	arg03, #2
175dc     0A 00 00 FF 
175e0     D3 E5 05 F1 | 	add	objptr, ##5587
175e4     18 18 62 FD | 	getqx	arg04
175e8     0C 15 02 F1 | 	add	arg02, arg04
175ec     7C 04 B0 FD | 	call	#_psram_spin2_read1
175f0     0A 00 00 FF 
175f4     CB E5 85 F1 | 	sub	objptr, ##5579
175f8     F2 18 02 FB | 	rdlong	arg04, objptr
175fc     1C E4 85 F1 | 	sub	objptr, #28
17600     F2 14 02 FB | 	rdlong	arg02, objptr
17604     0F 13 02 F6 | 	mov	arg01, local01
17608     02 12 66 F0 | 	shl	arg01, #2
1760c     14 E4 05 F1 | 	add	objptr, #20
17610     F2 16 02 FB | 	rdlong	arg03, objptr
17614     0B 13 02 FD | 	qmul	arg01, arg03
17618                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
17618     F6 03 00 FF 
1761c     00 12 06 F6 | 	mov	arg01, ##519168
17620     0C 13 82 F1 | 	sub	arg01, arg04
17624     02 16 66 F0 | 	shl	arg03, #2
17628     0A 00 00 FF 
1762c     D3 E5 05 F1 | 	add	objptr, ##5587
17630     18 18 62 FD | 	getqx	arg04
17634     0C 15 02 F1 | 	add	arg02, arg04
17638     CC 04 B0 FD | 	call	#_psram_spin2_write
1763c     0B 00 00 FF 
17640     C0 E4 85 F1 | 	sub	objptr, ##5824
17644     01 1E 06 F1 | 	add	local01, #1
17648     01 00 00 FF 
1764c     30 1E 56 F2 | 	cmps	local01, ##560 wc
17650     50 FF 9F CD |  if_b	jmp	#LR__1900
17654                 | ' 
17654                 | ' repeat i from 560 to 575
17654     01 00 00 FF 
17658     30 1E 06 F6 | 	mov	local01, ##560
1765c                 | LR__1901
1765c                 | '    fastline(0,1023,i,write_background)   
1765c     41 E4 05 F1 | 	add	objptr, #65
17660     F2 18 02 FB | 	rdlong	arg04, objptr
17664     41 E4 85 F1 | 	sub	objptr, #65
17668     00 12 06 F6 | 	mov	arg01, #0
1766c     09 14 CE F9 | 	bmask	arg02, #9
17670     0F 17 02 F6 | 	mov	arg03, local01
17674     2C F1 BF FD | 	call	#_hg010b_spin2_fastline
17678     01 1E 06 F1 | 	add	local01, #1
1767c     01 00 00 FF 
17680     40 1E 16 F2 | 	cmp	local01, ##576 wc
17684     D4 FF 9F CD |  if_b	jmp	#LR__1901
17688     A7 F0 03 F6 | 	mov	ptra, fp
1768c     B2 00 A0 FD | 	call	#popregs_
17690                 | _hg010b_spin2_scrollup_ret
17690     2D 00 64 FD | 	ret
17694                 | 
17694                 | ' 
17694                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
17694                 | ' 
17694                 | ' pub crlf()
17694                 | _hg010b_spin2_crlf
17694                 | ' 
17694                 | ' cursor_x:=leading_spaces*2
17694     01 00 00 FF 
17698     B2 E4 05 F1 | 	add	objptr, ##690
1769c     F2 16 02 FB | 	rdlong	arg03, objptr
176a0     01 16 66 F0 | 	shl	arg03, #1
176a4     01 00 00 FF 
176a8     7A E4 85 F1 | 	sub	objptr, ##634
176ac     F2 16 52 FC | 	wrword	arg03, objptr
176b0                 | ' cursor_y+=1
176b0     02 E4 05 F1 | 	add	objptr, #2
176b4     F2 16 C2 FA | 	rdbyte	arg03, objptr
176b8     01 16 06 F1 | 	add	arg03, #1
176bc     F2 16 42 FC | 	wrbyte	arg03, objptr
176c0                 | ' if cursor_y>st_lines-1
176c0     C3 E4 05 F1 | 	add	objptr, #195
176c4     F2 16 02 FB | 	rdlong	arg03, objptr
176c8     01 16 86 F1 | 	sub	arg03, #1
176cc     C3 E4 85 F1 | 	sub	objptr, #195
176d0     F2 14 C2 FA | 	rdbyte	arg02, objptr
176d4     3A E4 85 F1 | 	sub	objptr, #58
176d8     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
176dc     2C 00 90 ED |  if_be	jmp	#LR__1910
176e0                 | '   scrollup()
176e0     00 12 06 F6 | 	mov	arg01, #0
176e4     01 00 00 FF 
176e8     40 14 06 F6 | 	mov	arg02, ##576
176ec     10 16 06 F6 | 	mov	arg03, #16
176f0     A4 FE BF FD | 	call	#_hg010b_spin2_scrollup
176f4                 | '   cursor_y:=st_lines-1
176f4     FD E4 05 F1 | 	add	objptr, #253
176f8     F2 16 02 FB | 	rdlong	arg03, objptr
176fc     01 16 86 F1 | 	sub	arg03, #1
17700     C3 E4 85 F1 | 	sub	objptr, #195
17704     F2 16 42 FC | 	wrbyte	arg03, objptr
17708     3A E4 85 F1 | 	sub	objptr, #58
1770c                 | LR__1910
1770c                 | ' setspritepos(17,4*cursor_x,16*cursor_y )  
1770c     38 E4 05 F1 | 	add	objptr, #56
17710     F2 14 E2 FA | 	rdword	arg02, objptr
17714     02 14 66 F0 | 	shl	arg02, #2
17718     02 E4 05 F1 | 	add	objptr, #2
1771c     F2 16 C2 FA | 	rdbyte	arg03, objptr
17720     3A E4 85 F1 | 	sub	objptr, #58
17724     04 16 66 F0 | 	shl	arg03, #4
17728     11 12 06 F6 | 	mov	arg01, #17
1772c     44 EE BF FD | 	call	#_hg010b_spin2_setspritepos
17730                 | _hg010b_spin2_crlf_ret
17730     2D 00 64 FD | 	ret
17734                 | 
17734                 | ' 
17734                 | ' 
17734                 | ' '*************************************************************************
17734                 | ' '                                                                        *
17734                 | ' '  Conversions                                                           *
17734                 | ' '                                                                        *
17734                 | ' '*************************************************************************
17734                 | ' 
17734                 | ' ''---------- Convert a integer to dec string, return a pointer
17734                 | ' 
17734                 | ' pub inttostr(i):result |q,pos,k,j
17734                 | _hg010b_spin2_inttostr
17734     03 4A 05 F6 | 	mov	COUNT_, #3
17738     A8 00 A0 FD | 	call	#pushregs_
1773c     09 1F 0A F6 | 	mov	local01, arg01 wz
17740                 | ' 
17740                 | ' j:=i
17740                 | ' pos:=10
17740     0A 20 06 F6 | 	mov	local02, #10
17744                 | ' k:=0
17744     00 22 06 F6 | 	mov	local03, #0
17748                 | ' 
17748                 | ' if (j==0)
17748     18 00 90 5D |  if_ne	jmp	#LR__1920
1774c                 | '   n_string[0]:=48
1774c     49 E4 05 F1 | 	add	objptr, #73
17750     F2 60 48 FC | 	wrbyte	#48, objptr
17754                 | '   n_string[1]:=0
17754     01 E4 05 F1 | 	add	objptr, #1
17758     F2 00 48 FC | 	wrbyte	#0, objptr
1775c     4A E4 85 F1 | 	sub	objptr, #74
17760     C4 00 90 FD | 	jmp	#LR__1927
17764                 | LR__1920
17764                 | ' 
17764                 | ' else
17764                 | '   if (j<0)
17764     0F 1F 52 F6 | 	abs	local01, local01 wc
17768                 | '     j:=0-j
17768                 | '     k:=45
17768     2D 22 06 C6 |  if_b	mov	local03, #45
1776c                 | ' 
1776c                 | '   n_string[11]:=0
1776c     54 E4 05 F1 | 	add	objptr, #84
17770     F2 00 48 FC | 	wrbyte	#0, objptr
17774     54 E4 85 F1 | 	sub	objptr, #84
17778     97 24 48 FB | 	callpa	#(@LR__1922-@LR__1921)>>2,fcache_load_ptr_
1777c                 | '   repeat while (pos>-1)
1777c                 | LR__1921
1777c     00 20 56 F2 | 	cmps	local02, #0 wc
17780     40 00 90 CD |  if_b	jmp	#LR__1923
17784     0F FB 51 F6 | 	abs	result1, local01 wc
17788     0A FA 15 FD | 	qdiv	result1, #10
1778c                 | '     q:=j//10
1778c     19 FA 61 FD | 	getqy	result1
17790     FD FA 81 F6 | 	negc	result1, result1
17794     0F 1F 52 F6 | 	abs	local01, local01 wc
17798     0A 1E 16 FD | 	qdiv	local01, #10
1779c                 | '     q:=48+q
1779c     30 FA 05 F1 | 	add	result1, #48
177a0                 | '     n_string[pos]:=q
177a0     10 1F 02 F6 | 	mov	local01, local02
177a4     49 E4 05 F1 | 	add	objptr, #73
177a8     F2 1E 02 F1 | 	add	local01, objptr
177ac     0F FB 41 FC | 	wrbyte	result1, local01
177b0                 | '     j:=j/10
177b0     49 E4 85 F1 | 	sub	objptr, #73
177b4                 | '     pos-=1
177b4     01 20 86 F1 | 	sub	local02, #1
177b8     18 1E 62 FD | 	getqx	local01
177bc     0F 1F 82 F6 | 	negc	local01, local01
177c0     B8 FF 9F FD | 	jmp	#LR__1921
177c4                 | LR__1922
177c4                 | LR__1923
177c4                 | '   repeat while n_string[0]==48
177c4                 | LR__1924
177c4     49 E4 05 F1 | 	add	objptr, #73
177c8     F2 16 C2 FA | 	rdbyte	arg03, objptr
177cc     49 E4 85 F1 | 	sub	objptr, #73
177d0     30 16 0E F2 | 	cmp	arg03, #48 wz
177d4     20 00 90 5D |  if_ne	jmp	#LR__1925
177d8                 | '     bytemove(@n_string,@n_string+1,12)
177d8     49 E4 05 F1 | 	add	objptr, #73
177dc     F2 12 02 F6 | 	mov	arg01, objptr
177e0     F2 14 02 F6 | 	mov	arg02, objptr
177e4     49 E4 85 F1 | 	sub	objptr, #73
177e8     01 14 06 F1 | 	add	arg02, #1
177ec     0C 16 06 F6 | 	mov	arg03, #12
177f0     88 0C B0 FD | 	call	#__system____builtin_memmove
177f4     CC FF 9F FD | 	jmp	#LR__1924
177f8                 | LR__1925
177f8                 | ' 
177f8                 | '   if k==45
177f8     2D 22 0E F2 | 	cmp	local03, #45 wz
177fc     28 00 90 5D |  if_ne	jmp	#LR__1926
17800                 | '      bytemove(@n_string+1,@n_string,12)
17800     49 E4 05 F1 | 	add	objptr, #73
17804     F2 12 02 F6 | 	mov	arg01, objptr
17808     01 12 06 F1 | 	add	arg01, #1
1780c     F2 14 02 F6 | 	mov	arg02, objptr
17810     49 E4 85 F1 | 	sub	objptr, #73
17814     0C 16 06 F6 | 	mov	arg03, #12
17818     60 0C B0 FD | 	call	#__system____builtin_memmove
1781c                 | '      n_string[0]:=k
1781c     49 E4 05 F1 | 	add	objptr, #73
17820     F2 22 42 FC | 	wrbyte	local03, objptr
17824     49 E4 85 F1 | 	sub	objptr, #73
17828                 | LR__1926
17828                 | LR__1927
17828                 | ' 
17828                 | ' q:=@n_string
17828     49 E4 05 F1 | 	add	objptr, #73
1782c     F2 FA 01 F6 | 	mov	result1, objptr
17830     49 E4 85 F1 | 	sub	objptr, #73
17834                 | ' return q
17834     A7 F0 03 F6 | 	mov	ptra, fp
17838     B2 00 A0 FD | 	call	#popregs_
1783c                 | _hg010b_spin2_inttostr_ret
1783c     2D 00 64 FD | 	ret
17840                 | 
17840                 | ' 
17840                 | ' '..............................................................................
17840                 | ' 
17840                 | ' {{
17840                 | ' }}
17840                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
17840                 | _psram_spin2_startx
17840     04 4A 05 F6 | 	mov	COUNT_, #4
17844     A8 00 A0 FD | 	call	#pushregs_
17848     09 1F 02 F6 | 	mov	local01, arg01
1784c     0B 21 02 F6 | 	mov	local02, arg03
17850     0C 23 02 F6 | 	mov	local03, arg04
17854                 | '     stop() ' restart driver if required
17854     54 01 B0 FD | 	call	#_psram_spin2_stop
17858     00 1E 0E F2 | 	cmp	local01, #0 wz
1785c     14 1E 06 AB |  if_e	rdlong	local01, #20
17860     0F 15 52 F6 | 	abs	arg02, local01 wc
17864     A1 07 00 FF 
17868     40 14 16 FD | 	qdiv	arg02, ##1000000
1786c                 | ' 
1786c                 | '     ' use current frequency if none specified
1786c                 | ' 
1786c                 | '     if freq == 0 
1786c                 | '         freq := clkfreq 
1786c                 | ' 
1786c                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
1786c                 | ' 
1786c                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
1786c                 | '     if burst < 0
1786c                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
1786c     18 14 62 FD | 	getqx	arg02
17870     0A 19 82 F6 | 	negc	arg04, arg02
17874     03 18 66 F0 | 	shl	arg04, #3
17878     84 18 86 F1 | 	sub	arg04, #132
1787c     04 18 46 F0 | 	shr	arg04, #4
17880     04 18 66 F0 | 	shl	arg04, #4
17884     00 18 56 F2 | 	cmps	arg04, #0 wc
17888     0E FA 65 C6 |  if_b	neg	result1, #14
1788c     10 01 90 CD |  if_b	jmp	#LR__1933
17890                 | ' 
17890                 | '     ' compute the input delay
17890                 | ' 
17890                 | '     if delay <= 0
17890     01 20 56 F2 | 	cmps	local02, #1 wc
17894     10 00 90 3D |  if_ae	jmp	#LR__1930
17898                 | '         delay := lookupDelay(freq)
17898     0F 13 02 F6 | 	mov	arg01, local01
1789c     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
178a0     FD 20 02 F6 | 	mov	local02, result1
178a4     04 00 90 FD | 	jmp	#LR__1931
178a8                 | LR__1930
178a8                 | '     else
178a8                 | '         delay <#= $f ' limit to 15
178a8     0F 20 66 F3 | 	fles	local02, #15
178ac                 | LR__1931
178ac                 | ' 
178ac                 | '     ' create our lock
178ac                 | ' 
178ac                 | '     driverlock := LOCKNEW()  
178ac     00 FA 05 F6 | 	mov	result1, #0
178b0     04 FA 61 FD | 	locknew	result1
178b4     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
178b8     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
178bc                 | '     if driverlock == -1
178bc     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
178c0     FF FF 7F FF 
178c4     FF FB 0D F2 | 	cmp	result1, ##-1 wz
178c8                 | '         return ERR_NO_LOCK
178c8     1A FA 65 A6 |  if_e	neg	result1, #26
178cc     D0 00 90 AD |  if_e	jmp	#LR__1933
178d0                 | ' 
178d0                 | '     ' patch in the proper data and HUB addresses to the startup structure
178d0                 | ' 
178d0                 | '     long[@startupData][0]:=clkfreq
178d0     14 1E 06 FB | 	rdlong	local01, #20
178d4     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
178d8     FA 1E 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
178dc                 | ' '    long[@startupData][1]:=$1000_0000
178dc                 | '     long[@startupData][5]:=@deviceData
178dc     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
178e0     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
178e4     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
178e8     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
178ec     14 14 06 F1 | 	add	arg02, #20
178f0     0A 1F 62 FC | 	wrlong	local01, arg02
178f4                 | '     long[@startupData][6]:=@qosData
178f4     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
178f8     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
178fc     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
17900     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
17904     18 14 06 F1 | 	add	arg02, #24
17908     0A 1F 62 FC | 	wrlong	local01, arg02
1790c                 | '     long[@startupData][7]:=$7FF00
1790c     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
17910     1C 1E 06 F1 | 	add	local01, #28
17914     FF 03 80 FF 
17918     0F 01 6A FC | 	wrlong	##524032, local01
1791c                 | ' 
1791c                 | '     ' setup some default bank and QoS parameter values
1791c                 | ' 
1791c                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
1791c     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
17920     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
17924     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
17928     10 18 66 F0 | 	shl	arg04, #16
1792c     0C 20 66 F0 | 	shl	local02, #12
17930     10 19 42 F5 | 	or	arg04, local02
17934     18 18 46 F5 | 	or	arg04, #24
17938     0C 15 02 F6 | 	mov	arg02, arg04
1793c     02 16 06 F6 | 	mov	arg03, #2
17940     A0 00 A0 FD | 	call	#\builtin_longfill_
17944                 | '     longfill(@qosData, $FFFF0000, 8)
17944     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
17948     07 16 06 F6 | 	mov	arg03, #7
1794c     28 16 62 FD | 	setq	arg03
17950     80 FF FF FF 
17954     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
17958                 | ' 
17958                 | '     ' get the address of the PSRAM memory driver so we can start it
17958                 | ' 
17958                 | '     driverAddr:= driver.getDriverAddr()
17958                 | '     return @driver_start
17958     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
1795c     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
17960     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
17964                 | ' 
17964                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
17964                 | ' 
17964                 | '     if desiredcog < 0
17964     00 22 56 F2 | 	cmps	local03, #0 wc
17968                 | '         desiredcog := NEWCOG
17968     10 22 06 C6 |  if_b	mov	local03, #16
1796c                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
1796c     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
17970     11 25 02 F6 | 	mov	local04, local03
17974     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
17978     0A 25 F2 FC | 	coginit	local04, arg02 wc
1797c     01 24 66 C6 |  if_b	neg	local04, #1
17980     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
17984     FA 24 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
17988                 | '     repeat until long[@startupData] == 0 
17988     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
1798c                 | LR__1932
1798c     FA 24 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
17990     F8 FF 9F 5D |  if_ne	jmp	#LR__1932
17994                 | ' 
17994                 | '     return drivercog
17994     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
17998     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
1799c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
179a0                 | LR__1933
179a0     A7 F0 03 F6 | 	mov	ptra, fp
179a4     B2 00 A0 FD | 	call	#popregs_
179a8                 | _psram_spin2_startx_ret
179a8     2D 00 64 FD | 	ret
179ac                 | 
179ac                 | ' 
179ac                 | ' '..............................................................................
179ac                 | ' 
179ac                 | ' {{
179ac                 | ' }}
179ac                 | ' PUB stop() : i
179ac                 | _psram_spin2_stop
179ac     00 00 06 F6 | 	mov	_var01, #0
179b0                 | '     if drivercog <> -1
179b0     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
179b4     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
179b8     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
179bc     FF FF 7F FF 
179c0     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
179c4     70 00 90 AD |  if_e	jmp	#LR__1943
179c8                 | '         cogstop(drivercog) ' a rather brutal stop
179c8     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
179cc     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
179d0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
179d4     03 12 62 FD | 	cogstop	arg01
179d8     97 26 48 FB | 	callpa	#(@LR__1942-@LR__1940)>>2,fcache_load_ptr_
179dc                 | '         repeat i from 0 to 7
179dc                 | LR__1940
179dc                 | '             if long[$7FF00][i*3] < 0
179dc     00 FB 01 F6 | 	mov	result1, _var01
179e0     01 FA 65 F0 | 	shl	result1, #1
179e4     00 FB 01 F1 | 	add	result1, _var01
179e8     02 FA 65 F0 | 	shl	result1, #2
179ec     FF 03 00 FF 
179f0     00 FB 05 F1 | 	add	result1, ##524032
179f4     FD FA 01 FB | 	rdlong	result1, result1
179f8     00 FA 55 F2 | 	cmps	result1, #0 wc
179fc     1C 00 90 3D |  if_ae	jmp	#LR__1941
17a00                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
17a00     00 FB 01 F6 | 	mov	result1, _var01
17a04     01 FA 65 F0 | 	shl	result1, #1
17a08     00 FB 01 F1 | 	add	result1, _var01
17a0c     02 FA 65 F0 | 	shl	result1, #2
17a10     FF 03 00 FF 
17a14     00 FB 05 F1 | 	add	result1, ##524032
17a18     FD 20 68 FC | 	wrlong	#16, result1
17a1c                 | LR__1941
17a1c     01 00 06 F1 | 	add	_var01, #1
17a20     08 00 56 F2 | 	cmps	_var01, #8 wc
17a24     B4 FF 9F CD |  if_b	jmp	#LR__1940
17a28                 | LR__1942
17a28                 | '         drivercog := -1
17a28     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
17a2c     FF FF FF FF 
17a30     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
17a34     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
17a38                 | LR__1943
17a38                 | '     if driverlock <> -1
17a38     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
17a3c     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
17a40     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
17a44     FF FF 7F FF 
17a48     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
17a4c                 | '         LOCKRET(driverlock)
17a4c     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
17a50     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
17a54     05 12 62 5D |  if_ne	lockret	arg01
17a58                 | '         driverlock := -1
17a58     FF FF FF 5F 
17a5c     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
17a60     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
17a64     00 FB 01 F6 | 	mov	result1, _var01
17a68                 | _psram_spin2_stop_ret
17a68     2D 00 64 FD | 	ret
17a6c                 | 
17a6c                 | ' 
17a6c                 | ' '..............................................................................
17a6c                 | ' 
17a6c                 | ' {{
17a6c                 | ' }}
17a6c                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
17a6c                 | _psram_spin2_read1
17a6c                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
17a6c                 | '     if drivercog == -1 ' driver must be running
17a6c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
17a70     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
17a74     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
17a78     FF FF 7F FF 
17a7c     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
17a80                 | '         return ERR_INACTIVE
17a80     0F FA 65 A6 |  if_e	neg	result1, #15
17a84     7C 00 90 AD |  if_e	jmp	#LR__1951
17a88                 | '     if count == 0 ' don't even bother reading
17a88     00 16 0E F2 | 	cmp	arg03, #0 wz
17a8c                 | '         return 0
17a8c     00 FA 05 A6 |  if_e	mov	result1, #0
17a90     70 00 90 AD |  if_e	jmp	#LR__1951
17a94                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
17a94     00 FA 05 F6 | 	mov	result1, #0
17a98     01 FA 61 FD | 	cogid	result1
17a9c     FD 00 02 F6 | 	mov	_var01, result1
17aa0     01 00 66 F0 | 	shl	_var01, #1
17aa4     FD 00 02 F1 | 	add	_var01, result1
17aa8     02 00 66 F0 | 	shl	_var01, #2
17aac     FF 03 00 FF 
17ab0     00 03 06 F6 | 	mov	_var02, ##524032
17ab4     00 03 02 F1 | 	add	_var02, _var01
17ab8                 | '     if long[mailbox] < 0
17ab8     01 01 02 FB | 	rdlong	_var01, _var02
17abc     00 00 56 F2 | 	cmps	_var01, #0 wc
17ac0                 | '         return ERR_MAILBOX_BUSY
17ac0     1C FA 65 C6 |  if_b	neg	result1, #28
17ac4     3C 00 90 CD |  if_b	jmp	#LR__1951
17ac8                 | '     long[mailbox][2] := count
17ac8     08 02 06 F1 | 	add	_var02, #8
17acc     01 17 62 FC | 	wrlong	arg03, _var02
17ad0                 | '     long[mailbox][1] := dstHubAddr
17ad0     04 02 86 F1 | 	sub	_var02, #4
17ad4     01 13 62 FC | 	wrlong	arg01, _var02
17ad8     04 02 86 F1 | 	sub	_var02, #4
17adc                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
17adc     0A 05 02 F6 | 	mov	_var03, arg02
17ae0     D9 04 06 F4 | 	bitl	_var03, #217
17ae4     00 00 58 FF 
17ae8     00 00 06 F6 | 	mov	_var01, ##-1342177280
17aec     02 01 02 F1 | 	add	_var01, _var03
17af0     01 01 62 FC | 	wrlong	_var01, _var02
17af4                 | '     repeat
17af4                 | LR__1950
17af4                 | '         result := long[mailbox]    
17af4     01 05 02 FB | 	rdlong	_var03, _var02
17af8     00 04 56 F2 | 	cmps	_var03, #0 wc
17afc     F4 FF 9F CD |  if_b	jmp	#LR__1950
17b00                 | '     while result < 0   
17b00                 | '     return -result                       'return success or error
17b00     02 FB 61 F6 | 	neg	result1, _var03
17b04                 | LR__1951
17b04                 | _psram_spin2_read1_ret
17b04     2D 00 64 FD | 	ret
17b08                 | 
17b08                 | ' 
17b08                 | ' '..............................................................................
17b08                 | ' 
17b08                 | ' {{
17b08                 | ' }}
17b08                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
17b08                 | _psram_spin2_write
17b08                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
17b08                 | '     if drivercog == -1 ' driver must be running
17b08     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
17b0c     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
17b10     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
17b14     FF FF 7F FF 
17b18     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
17b1c                 | '         return ERR_INACTIVE
17b1c     0F FA 65 A6 |  if_e	neg	result1, #15
17b20     7C 00 90 AD |  if_e	jmp	#LR__1961
17b24                 | '     if count == 0 ' don't even bother writing
17b24     00 16 0E F2 | 	cmp	arg03, #0 wz
17b28                 | '         return 0
17b28     00 FA 05 A6 |  if_e	mov	result1, #0
17b2c     70 00 90 AD |  if_e	jmp	#LR__1961
17b30                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
17b30     00 FA 05 F6 | 	mov	result1, #0
17b34     01 FA 61 FD | 	cogid	result1
17b38     FD 00 02 F6 | 	mov	_var01, result1
17b3c     01 00 66 F0 | 	shl	_var01, #1
17b40     FD 00 02 F1 | 	add	_var01, result1
17b44     02 00 66 F0 | 	shl	_var01, #2
17b48     FF 03 00 FF 
17b4c     00 03 06 F6 | 	mov	_var02, ##524032
17b50     00 03 02 F1 | 	add	_var02, _var01
17b54                 | '     if long[mailbox] < 0
17b54     01 01 02 FB | 	rdlong	_var01, _var02
17b58     00 00 56 F2 | 	cmps	_var01, #0 wc
17b5c                 | '         return ERR_MAILBOX_BUSY
17b5c     1C FA 65 C6 |  if_b	neg	result1, #28
17b60     3C 00 90 CD |  if_b	jmp	#LR__1961
17b64                 | '     long[mailbox][2] := count
17b64     08 02 06 F1 | 	add	_var02, #8
17b68     01 17 62 FC | 	wrlong	arg03, _var02
17b6c                 | '     long[mailbox][1] := srcHubAddr
17b6c     04 02 86 F1 | 	sub	_var02, #4
17b70     01 13 62 FC | 	wrlong	arg01, _var02
17b74     04 02 86 F1 | 	sub	_var02, #4
17b78                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
17b78     0A 05 02 F6 | 	mov	_var03, arg02
17b7c     D9 04 06 F4 | 	bitl	_var03, #217
17b80     00 00 78 FF 
17b84     00 00 06 F6 | 	mov	_var01, ##-268435456
17b88     02 01 02 F1 | 	add	_var01, _var03
17b8c     01 01 62 FC | 	wrlong	_var01, _var02
17b90                 | '     repeat
17b90                 | LR__1960
17b90                 | '         result := long[mailbox]    
17b90     01 05 02 FB | 	rdlong	_var03, _var02
17b94     00 04 56 F2 | 	cmps	_var03, #0 wc
17b98     F4 FF 9F CD |  if_b	jmp	#LR__1960
17b9c                 | '     while result < 0   
17b9c                 | '     return -result                       'return success or error
17b9c     02 FB 61 F6 | 	neg	result1, _var03
17ba0                 | LR__1961
17ba0                 | _psram_spin2_write_ret
17ba0     2D 00 64 FD | 	ret
17ba4                 | 
17ba4                 | ' 
17ba4                 | ' ' generalized fill
17ba4                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
17ba4                 | _psram_spin2_fill
17ba4     09 01 02 F6 | 	mov	_var01, arg01
17ba8     0A 03 02 F6 | 	mov	_var02, arg02
17bac     0B 05 02 F6 | 	mov	_var03, arg03
17bb0     0D 07 02 F6 | 	mov	_var04, arg05
17bb4                 | '     case datasize 
17bb4     01 06 86 F1 | 	sub	_var04, #1
17bb8     04 06 26 F3 | 	fle	_var04, #4
17bbc     30 06 62 FD | 	jmprel	_var04
17bc0                 | LR__1970
17bc0     10 00 90 FD | 	jmp	#LR__1971
17bc4     18 00 90 FD | 	jmp	#LR__1972
17bc8     2C 00 90 FD | 	jmp	#LR__1974
17bcc     1C 00 90 FD | 	jmp	#LR__1973
17bd0     24 00 90 FD | 	jmp	#LR__1974
17bd4                 | LR__1971
17bd4                 | '         1: req := driver.R_WRITEBYTE
17bd4     00 00 60 FF 
17bd8     00 08 06 F6 | 	mov	_var05, ##-1073741824
17bdc     20 00 90 FD | 	jmp	#LR__1975
17be0                 | LR__1972
17be0                 | '         2: req := driver.R_WRITEWORD
17be0     00 00 68 FF 
17be4     00 08 06 F6 | 	mov	_var05, ##-805306368
17be8     14 00 90 FD | 	jmp	#LR__1975
17bec                 | LR__1973
17bec                 | '         4: req := driver.R_WRITELONG
17bec     00 00 70 FF 
17bf0     00 08 06 F6 | 	mov	_var05, ##-536870912
17bf4     08 00 90 FD | 	jmp	#LR__1975
17bf8                 | LR__1974
17bf8                 | '         other : return ERR_INVALID
17bf8     06 FA 65 F6 | 	neg	result1, #6
17bfc     94 00 90 FD | 	jmp	#LR__1977
17c00                 | LR__1975
17c00                 | '     if count == 0   ' nothing to do
17c00     00 04 0E F2 | 	cmp	_var03, #0 wz
17c04                 | '         return 0
17c04     00 FA 05 A6 |  if_e	mov	result1, #0
17c08     88 00 90 AD |  if_e	jmp	#LR__1977
17c0c                 | '     if drivercog == -1
17c0c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
17c10     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
17c14     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
17c18     FF FF 7F FF 
17c1c     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
17c20                 | '         return ERR_INACTIVE
17c20     0F FA 65 A6 |  if_e	neg	result1, #15
17c24     6C 00 90 AD |  if_e	jmp	#LR__1977
17c28                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
17c28     00 FA 05 F6 | 	mov	result1, #0
17c2c     01 FA 61 FD | 	cogid	result1
17c30     FD 06 02 F6 | 	mov	_var04, result1
17c34     01 06 66 F0 | 	shl	_var04, #1
17c38     FD 06 02 F1 | 	add	_var04, result1
17c3c     02 06 66 F0 | 	shl	_var04, #2
17c40     FF 03 00 FF 
17c44     00 0B 06 F6 | 	mov	_var06, ##524032
17c48     03 0B 02 F1 | 	add	_var06, _var04
17c4c                 | '     if long[mailbox] < 0
17c4c     05 07 02 FB | 	rdlong	_var04, _var06
17c50     00 06 56 F2 | 	cmps	_var04, #0 wc
17c54                 | '         return ERR_MAILBOX_BUSY
17c54     1C FA 65 C6 |  if_b	neg	result1, #28
17c58     38 00 90 CD |  if_b	jmp	#LR__1977
17c5c                 | '     long[mailbox][2] := count
17c5c     08 0A 06 F1 | 	add	_var06, #8
17c60     05 05 62 FC | 	wrlong	_var03, _var06
17c64                 | '     long[mailbox][1] := pattern
17c64     04 0A 86 F1 | 	sub	_var06, #4
17c68     05 03 62 FC | 	wrlong	_var02, _var06
17c6c     04 0A 86 F1 | 	sub	_var06, #4
17c70                 | '     long[mailbox] := req + (addr & $fffffff)
17c70     04 0D 02 F6 | 	mov	_var07, _var05
17c74     00 0F 02 F6 | 	mov	_var08, _var01
17c78     7C 0E 06 F4 | 	bitl	_var08, #124
17c7c     07 0D 02 F1 | 	add	_var07, _var08
17c80     05 0D 62 FC | 	wrlong	_var07, _var06
17c84                 | '     repeat
17c84                 | LR__1976
17c84                 | '         r := long[mailbox]
17c84     05 0F 02 FB | 	rdlong	_var08, _var06
17c88     00 0E 56 F2 | 	cmps	_var08, #0 wc
17c8c     F4 FF 9F CD |  if_b	jmp	#LR__1976
17c90                 | '     while r < 0
17c90                 | '     return -r                  ' return 0 for success or negated error code
17c90     07 FB 61 F6 | 	neg	result1, _var08
17c94                 | LR__1977
17c94                 | _psram_spin2_fill_ret
17c94     2D 00 64 FD | 	ret
17c98                 | 
17c98                 | ' 
17c98                 | ' '..............................................................................
17c98                 | ' 
17c98                 | ' {{
17c98                 | ' }}
17c98                 | ' PUB setQos(cog, qos) : result | mailbox
17c98                 | _psram_spin2_setQos
17c98     09 01 02 F6 | 	mov	_var01, arg01
17c9c                 | '     if drivercog == -1 ' driver must be running
17c9c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
17ca0     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
17ca4     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
17ca8     FF FF 7F FF 
17cac     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
17cb0                 | '         return ERR_INACTIVE
17cb0     0F FA 65 A6 |  if_e	neg	result1, #15
17cb4     9C 00 90 AD |  if_e	jmp	#LR__1984
17cb8                 | '     if cog < 0 or cog > 7 ' enforce cog id range
17cb8     00 00 56 F2 | 	cmps	_var01, #0 wc
17cbc     08 00 90 CD |  if_b	jmp	#LR__1980
17cc0     08 00 56 F2 | 	cmps	_var01, #8 wc
17cc4     08 00 90 CD |  if_b	jmp	#LR__1981
17cc8                 | LR__1980
17cc8                 | '         return ERR_INVALID
17cc8     06 FA 65 F6 | 	neg	result1, #6
17ccc     84 00 90 FD | 	jmp	#LR__1984
17cd0                 | LR__1981
17cd0                 | '     long[@qosData][cog] := qos & !$1ff
17cd0     FF 15 26 F5 | 	andn	arg02, #511
17cd4     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
17cd8     02 00 66 F0 | 	shl	_var01, #2
17cdc     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
17ce0     00 15 62 FC | 	wrlong	arg02, _var01
17ce4                 | '     mailbox := $7FF00 + drivercog*12
17ce4     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
17ce8     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
17cec     02 07 02 F6 | 	mov	_var04, _var03
17cf0     01 06 66 F0 | 	shl	_var04, #1
17cf4     02 07 02 F1 | 	add	_var04, _var03
17cf8     02 06 66 F0 | 	shl	_var04, #2
17cfc     FF 03 00 FF 
17d00     00 09 06 F6 | 	mov	_var05, ##524032
17d04     03 09 02 F1 | 	add	_var05, _var04
17d08                 | '     repeat until LOCKTRY(driverlock)
17d08     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
17d0c                 | LR__1982
17d0c     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
17d10     06 12 72 FD | 	locktry	arg01 wc
17d14     F4 FF 9F 3D |  if_ae	jmp	#LR__1982
17d18     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
17d1c                 | '     long[mailbox] := driver.R_CONFIG + cogid()
17d1c     00 06 06 F6 | 	mov	_var04, #0
17d20     01 06 62 FD | 	cogid	_var04
17d24     00 00 78 FF 
17d28     00 02 06 F6 | 	mov	_var02, ##-268435456
17d2c     03 03 02 F1 | 	add	_var02, _var04
17d30     04 03 62 FC | 	wrlong	_var02, _var05
17d34                 | '     repeat while long[mailbox] < 0
17d34                 | LR__1983
17d34     04 03 02 FB | 	rdlong	_var02, _var05
17d38     00 02 56 F2 | 	cmps	_var02, #0 wc
17d3c     F4 FF 9F CD |  if_b	jmp	#LR__1983
17d40                 | '     LOCKREL(driverlock)
17d40     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
17d44     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
17d48     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
17d4c     07 12 72 FD | 	lockrel	arg01 wc
17d50     00 FA 05 F6 | 	mov	result1, #0
17d54                 | LR__1984
17d54                 | _psram_spin2_setQos_ret
17d54     2D 00 64 FD | 	ret
17d58                 | 
17d58                 | ' 
17d58                 | ' '..............................................................................
17d58                 | ' 
17d58                 | ' {{
17d58                 | ' }}
17d58                 | ' PRI lookupDelay(freq) : delay | profile
17d58                 | _psram_spin2_lookupDelay
17d58                 | '     profile := @delayTable
17d58     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
17d5c     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
17d60                 | '     delay := long[profile][0]
17d60     00 03 02 FB | 	rdlong	_var02, _var01
17d64                 | '     repeat while long[profile][1] 
17d64     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
17d68     97 16 48 FB | 	callpa	#(@LR__1991-@LR__1990)>>2,fcache_load_ptr_
17d6c                 | LR__1990
17d6c     04 00 06 F1 | 	add	_var01, #4
17d70     00 FB 09 FB | 	rdlong	result1, _var01 wz
17d74     04 00 86 F1 | 	sub	_var01, #4
17d78     1C 00 90 AD |  if_e	jmp	#LR__1992
17d7c                 | '         if freq +< long[profile][1] 
17d7c     04 00 06 F1 | 	add	_var01, #4
17d80     00 FB 01 FB | 	rdlong	result1, _var01
17d84     04 00 86 F1 | 	sub	_var01, #4
17d88     FD 12 12 F2 | 	cmp	arg01, result1 wc
17d8c                 | '             quit
17d8c                 | '         profile += 4
17d8c     04 00 06 31 |  if_ae	add	_var01, #4
17d90                 | '         delay++
17d90     01 02 06 31 |  if_ae	add	_var02, #1
17d94     D4 FF 9F 3D |  if_ae	jmp	#LR__1990
17d98                 | LR__1991
17d98                 | LR__1992
17d98     01 FB 01 F6 | 	mov	result1, _var02
17d9c                 | _psram_spin2_lookupDelay_ret
17d9c     2D 00 64 FD | 	ret
17da0                 | 
17da0                 | ' 
17da0                 | ' PUB start() : r
17da0                 | _usbnew_spin2_start
17da0     00 00 06 F6 | 	mov	_var01, #0
17da4                 | '   ifnot driver_cog
17da4     15 00 00 FF 
17da8     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
17dac     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
17db0     15 00 00 FF 
17db4     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
17db8     38 00 90 5D |  if_ne	jmp	#LR__2000
17dbc                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
17dbc     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
17dc0     10 00 06 F6 | 	mov	_var01, #16
17dc4     00 16 06 F6 | 	mov	arg03, #0
17dc8     28 16 62 FD | 	setq	arg03
17dcc     0A 01 F2 FC | 	coginit	_var01, arg02 wc
17dd0     01 00 66 C6 |  if_b	neg	_var01, #1
17dd4                 | '     if r >= 0
17dd4     00 00 56 F2 | 	cmps	_var01, #0 wc
17dd8                 | '       driver_cog := r+1
17dd8     00 03 02 36 |  if_ae	mov	_var02, _var01
17ddc     01 02 06 31 |  if_ae	add	_var02, #1
17de0     15 00 00 3F 
17de4     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
17de8     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
17dec     15 00 00 3F 
17df0     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
17df4                 | LR__2000
17df4     00 FB 01 F6 | 	mov	result1, _var01
17df8                 | _usbnew_spin2_start_ret
17df8     2D 00 64 FD | 	ret
17dfc                 | 
17dfc                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
17dfc                 | ' 
17dfc                 | ' '' Return key event from buffer if there is one
17dfc                 | ' PUB get_key() : r | tail
17dfc                 | _usbnew_spin2_get_key
17dfc                 | '   tail := keyq_tail
17dfc     0F 00 00 FF 
17e00     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
17e04     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
17e08                 | '   if keyq_head == tail
17e08     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
17e0c     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
17e10     0F 00 00 FF 
17e14     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
17e18     00 03 0A F2 | 	cmp	_var02, _var01 wz
17e1c                 | '     return 0 ' No event
17e1c     00 FA 05 A6 |  if_e	mov	result1, #0
17e20     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
17e24                 | '   r := keyq_data[tail]
17e24     00 03 02 F6 | 	mov	_var02, _var01
17e28     02 02 66 F0 | 	shl	_var02, #2
17e2c     0F 00 00 FF 
17e30     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
17e34     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
17e38     01 FB 01 FB | 	rdlong	result1, _var02
17e3c                 | '   if ++tail == KEYQUEUE_SIZE
17e3c     01 00 06 F1 | 	add	_var01, #1
17e40     80 00 0E F2 | 	cmp	_var01, #128 wz
17e44                 | '     tail := 0
17e44     00 00 06 A6 |  if_e	mov	_var01, #0
17e48                 | '   keyq_tail := tail
17e48     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
17e4c     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
17e50     0F 00 00 FF 
17e54     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
17e58                 | _usbnew_spin2_get_key_ret
17e58     2D 00 64 FD | 	ret
17e5c                 | 
17e5c                 | ' 
17e5c                 | ' '' Emulate mouse movement
17e5c                 | ' PUB mouse_move(x,y)
17e5c                 | _usbnew_spin2_mouse_move
17e5c     02 4A 05 F6 | 	mov	COUNT_, #2
17e60     A8 00 A0 FD | 	call	#pushregs_
17e64     09 1F 02 F6 | 	mov	local01, arg01
17e68     0A 21 02 F6 | 	mov	local02, arg02
17e6c                 | '   mouse_lock := 1
17e6c     14 00 00 FF 
17e70     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
17e74     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
17e78     14 00 00 FF 
17e7c     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
17e80                 | '   waitus(2) ' hope driver is now done
17e80     02 12 06 F6 | 	mov	arg01, #2
17e84     34 0A B0 FD | 	call	#__system___waitus
17e88                 | '   mouse_xacc := x
17e88     14 00 00 FF 
17e8c     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
17e90     FB 1E 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
17e94                 | '   mouse_yacc := y
17e94     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
17e98     FB 20 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
17e9c                 | '   if mouse_outptr
17e9c     04 00 00 FF 
17ea0     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
17ea4     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
17ea8     0F 00 00 FF 
17eac     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
17eb0     24 00 90 AD |  if_e	jmp	#LR__2010
17eb4                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
17eb4     10 20 66 F0 | 	shl	local02, #16
17eb8     0F 1F 32 F9 | 	getword	local01, local01, #0
17ebc     0F 21 42 F5 | 	or	local02, local01
17ec0     0F 00 00 FF 
17ec4     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
17ec8     FB 1E 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
17ecc     0F 00 00 FF 
17ed0     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
17ed4     0F 21 62 FC | 	wrlong	local02, local01
17ed8                 | LR__2010
17ed8                 | '   mouse_lock := 0
17ed8     14 00 00 FF 
17edc     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
17ee0     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
17ee4     14 00 00 FF 
17ee8     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
17eec     A7 F0 03 F6 | 	mov	ptra, fp
17ef0     B2 00 A0 FD | 	call	#popregs_
17ef4                 | _usbnew_spin2_mouse_move_ret
17ef4     2D 00 64 FD | 	ret
17ef8                 | 
17ef8                 | '     '' Set HAVE_HIDPAD to enable.
17ef8                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
17ef8                 | ' 
17ef8                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
17ef8                 | ' PUB hidpad_id(dev) : r
17ef8                 | _usbnew_spin2_hidpad_id
17ef8                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
17ef8     13 00 00 FF 
17efc     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
17f00     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
17f04     09 01 02 F6 | 	mov	_var01, arg01
17f08     03 00 66 F0 | 	shl	_var01, #3
17f0c     09 01 82 F1 | 	sub	_var01, arg01
17f10     02 00 66 F0 | 	shl	_var01, #2
17f14     00 FB 01 F1 | 	add	result1, _var01
17f18     FD FA 01 FB | 	rdlong	result1, result1
17f1c     13 00 00 FF 
17f20     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
17f24                 | _usbnew_spin2_hidpad_id_ret
17f24     2D 00 64 FD | 	ret
17f28                 | 
17f28                 | ' 
17f28                 | ' '' Get all button states for a device
17f28                 | ' PUB hidpad_buttons(dev) : r 
17f28                 | _usbnew_spin2_hidpad_buttons
17f28                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
17f28     13 00 00 FF 
17f2c     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
17f30     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
17f34     09 01 02 F6 | 	mov	_var01, arg01
17f38     03 00 66 F0 | 	shl	_var01, #3
17f3c     09 01 82 F1 | 	sub	_var01, arg01
17f40     02 00 66 F0 | 	shl	_var01, #2
17f44     00 FB 01 F1 | 	add	result1, _var01
17f48     14 FA 05 F1 | 	add	result1, #20
17f4c     FD FA 01 FB | 	rdlong	result1, result1
17f50     13 00 00 FF 
17f54     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
17f58                 | _usbnew_spin2_hidpad_buttons_ret
17f58     2D 00 64 FD | 	ret
17f5c                 | 
17f5c                 | ' 
17f5c                 | ' '' Get state of an axis (normalized between -32768 and 32767)
17f5c                 | ' PUB hidpad_axis(dev,axnum) : r
17f5c                 | _usbnew_spin2_hidpad_axis
17f5c                 | '   if axnum +>= 6
17f5c     06 14 16 F2 | 	cmp	arg02, #6 wc
17f60                 | '     return 0
17f60     00 FA 05 36 |  if_ae	mov	result1, #0
17f64     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
17f68                 | '   else 
17f68                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
17f68     13 00 00 FF 
17f6c     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
17f70     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
17f74     09 01 02 F6 | 	mov	_var01, arg01
17f78     03 00 66 F0 | 	shl	_var01, #3
17f7c     09 01 82 F1 | 	sub	_var01, arg01
17f80     02 00 66 F0 | 	shl	_var01, #2
17f84     00 FB 01 F1 | 	add	result1, _var01
17f88     04 00 06 F6 | 	mov	_var01, #4
17f8c     0A 01 02 F1 | 	add	_var01, arg02
17f90     01 00 66 F0 | 	shl	_var01, #1
17f94     FD 00 02 F1 | 	add	_var01, result1
17f98     00 FB E1 FA | 	rdword	result1, _var01
17f9c     0F FA 65 F7 | 	signx	result1, #15
17fa0     13 00 00 FF 
17fa4     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
17fa8                 | _usbnew_spin2_hidpad_axis_ret
17fa8     2D 00 64 FD | 	ret
17fac                 | 
17fac                 | ' 
17fac                 | ' 
17fac                 | ' '--------------------------------------------------------------
17fac                 | ' '---------- Init the variables, start the cog. ----------------
17fac                 | ' '--------------------------------------------------------------
17fac                 | ' 
17fac                 | ' pub start(mbox,scope,cache) :cog,base | iii
17fac                 | _Audio093b_8_sc_spin2_start
17fac     04 4A 05 F6 | 	mov	COUNT_, #4
17fb0     A8 00 A0 FD | 	call	#pushregs_
17fb4     09 1F 02 F6 | 	mov	local01, arg01
17fb8                 | ' 
17fb8                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
17fb8                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
17fb8                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
17fb8                 | ' 
17fb8                 | ' mailboxaddr:=mbox 
17fb8     F2 1E 62 FC | 	wrlong	local01, objptr
17fbc                 | ' scope_ptr:=scope
17fbc     04 E4 05 F1 | 	add	objptr, #4
17fc0     F2 14 62 FC | 	wrlong	arg02, objptr
17fc4                 | ' cache_ptr:=cache
17fc4     04 E4 05 F1 | 	add	objptr, #4
17fc8     F2 16 62 FC | 	wrlong	arg03, objptr
17fcc                 | ' base:=@channel1[0]
17fcc     04 E4 05 F1 | 	add	objptr, #4
17fd0     F2 20 02 F6 | 	mov	local02, objptr
17fd4                 | ' 
17fd4                 | ' repeat iii from 0 to 7
17fd4     00 22 06 F6 | 	mov	local03, #0
17fd8     01 00 00 FF 
17fdc     D8 E7 05 F1 | 	add	ptr__Audio093b_8_sc_spin2_dat__, ##984
17fe0     0C E4 85 F1 | 	sub	objptr, #12
17fe4     97 80 48 FB | 	callpa	#(@LR__2021-@LR__2020)>>2,fcache_load_ptr_
17fe8                 | LR__2020
17fe8                 | '   long[base+32*iii]:=0
17fe8     10 1F 02 F6 | 	mov	local01, local02
17fec     11 FD 01 F6 | 	mov	result2, local03
17ff0     05 FC 65 F0 | 	shl	result2, #5
17ff4     FE 1E 02 F1 | 	add	local01, result2
17ff8     0F 01 68 FC | 	wrlong	#0, local01
17ffc                 | '   long[base+32*iii+4]:=0
17ffc     10 1F 02 F6 | 	mov	local01, local02
18000     11 FD 01 F6 | 	mov	result2, local03
18004     05 FC 65 F0 | 	shl	result2, #5
18008     FE 1E 02 F1 | 	add	local01, result2
1800c     04 1E 06 F1 | 	add	local01, #4
18010     0F 01 68 FC | 	wrlong	#0, local01
18014                 | '   long[base+32*iii+12]:=0
18014     10 25 02 F6 | 	mov	local04, local02
18018     11 1F 02 F6 | 	mov	local01, local03
1801c     05 1E 66 F0 | 	shl	local01, #5
18020     0F 25 02 F1 | 	add	local04, local01
18024     0C 24 06 F1 | 	add	local04, #12
18028     12 01 68 FC | 	wrlong	#0, local04
1802c                 | '   long[base+32*iii+16]:=2 
1802c     10 25 02 F6 | 	mov	local04, local02
18030     11 1F 02 F6 | 	mov	local01, local03
18034     05 1E 66 F0 | 	shl	local01, #5
18038     0F 25 02 F1 | 	add	local04, local01
1803c     10 24 06 F1 | 	add	local04, #16
18040     12 05 68 FC | 	wrlong	#2, local04
18044                 | '   word[base+32*iii+20]:=0
18044     10 25 02 F6 | 	mov	local04, local02
18048     11 1F 02 F6 | 	mov	local01, local03
1804c     05 1E 66 F0 | 	shl	local01, #5
18050     0F 25 02 F1 | 	add	local04, local01
18054     14 24 06 F1 | 	add	local04, #20
18058     12 01 58 FC | 	wrword	#0, local04
1805c                 | '   word[base+32*iii+22]:=8192
1805c     10 25 02 F6 | 	mov	local04, local02
18060     11 1F 02 F6 | 	mov	local01, local03
18064     05 1E 66 F0 | 	shl	local01, #5
18068     0F 25 02 F1 | 	add	local04, local01
1806c     16 24 06 F1 | 	add	local04, #22
18070     10 00 80 FF 
18074     12 01 58 FC | 	wrword	##8192, local04
18078                 | '   word[base+32*iii+24]:=4000+2*iii
18078     11 25 02 F6 | 	mov	local04, local03
1807c     01 24 66 F0 | 	shl	local04, #1
18080     07 00 00 FF 
18084     A0 1F 06 F6 | 	mov	local01, ##4000
18088     12 1F 02 F1 | 	add	local01, local04
1808c     10 25 02 F6 | 	mov	local04, local02
18090     11 FD 01 F6 | 	mov	result2, local03
18094     05 FC 65 F0 | 	shl	result2, #5
18098     FE 24 02 F1 | 	add	local04, result2
1809c     18 24 06 F1 | 	add	local04, #24
180a0     12 1F 52 FC | 	wrword	local01, local04
180a4                 | '   word[base+32*iii+26]:=2
180a4     10 25 02 F6 | 	mov	local04, local02
180a8     11 1F 02 F6 | 	mov	local01, local03
180ac     05 1E 66 F0 | 	shl	local01, #5
180b0     0F 25 02 F1 | 	add	local04, local01
180b4     1A 24 06 F1 | 	add	local04, #26
180b8     12 05 58 FC | 	wrword	#2, local04
180bc                 | '   long [base+32*iii+8]:=@null | $C0000000
180bc     F3 1E 02 F6 | 	mov	local01, ptr__Audio093b_8_sc_spin2_dat__
180c0     3E 1E 26 F4 | 	bith	local01, #62
180c4     10 25 02 F6 | 	mov	local04, local02
180c8     11 17 02 F6 | 	mov	arg03, local03
180cc     05 16 66 F0 | 	shl	arg03, #5
180d0     0B 25 02 F1 | 	add	local04, arg03
180d4     08 24 06 F1 | 	add	local04, #8
180d8     12 1F 62 FC | 	wrlong	local01, local04
180dc     01 22 06 F1 | 	add	local03, #1
180e0     08 22 56 F2 | 	cmps	local03, #8 wc
180e4     00 FF 9F CD |  if_b	jmp	#LR__2020
180e8                 | LR__2021
180e8     01 00 00 FF 
180ec     D8 E7 85 F1 | 	sub	ptr__Audio093b_8_sc_spin2_dat__, ##984
180f0                 | '   
180f0                 | ' cog:=coginit(16,@audio,@mailboxaddr)
180f0     F3 14 02 F6 | 	mov	arg02, ptr__Audio093b_8_sc_spin2_dat__
180f4     F2 16 02 F6 | 	mov	arg03, objptr
180f8     10 24 06 F6 | 	mov	local04, #16
180fc     28 16 62 FD | 	setq	arg03
18100     0A 25 F2 FC | 	coginit	local04, arg02 wc
18104     01 24 66 C6 |  if_b	neg	local04, #1
18108                 | ' waitms(100)
18108     64 12 06 F6 | 	mov	arg01, #100
1810c     40 07 B0 FD | 	call	#__system___waitms
18110                 | ' return cog,base
18110     10 FD 01 F6 | 	mov	result2, local02
18114     12 FB 01 F6 | 	mov	result1, local04
18118     A7 F0 03 F6 | 	mov	ptra, fp
1811c     B2 00 A0 FD | 	call	#popregs_
18120                 | _Audio093b_8_sc_spin2_start_ret
18120     2D 00 64 FD | 	ret
18124                 | 
18124                 | ' 
18124                 | ' ' a simple play procedure to not poke everything. 
18124                 | ' 
18124                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
18124                 | _Audio093b_8_sc_spin2_play
18124     0C E4 05 F1 | 	add	objptr, #12
18128     F2 00 02 F6 | 	mov	_var01, objptr
1812c     05 12 66 F0 | 	shl	arg01, #5
18130     09 01 02 F1 | 	add	_var01, arg01
18134     00 00 60 FF 
18138     00 14 06 F1 | 	add	arg02, ##-1073741824
1813c     00 13 02 F6 | 	mov	arg01, _var01
18140     08 12 06 F1 | 	add	arg01, #8
18144     09 15 62 FC | 	wrlong	arg02, arg01
18148     00 15 02 F6 | 	mov	arg02, _var01
1814c     0C 14 06 F1 | 	add	arg02, #12
18150     0A 1B 62 FC | 	wrlong	arg05, arg02
18154     00 1C 56 F2 | 	cmps	arg06, #0 wc
18158     00 15 02 36 |  if_ae	mov	arg02, _var01
1815c     10 14 06 31 |  if_ae	add	arg02, #16
18160     0A 1D 62 3C |  if_ae	wrlong	arg06, arg02
18164     02 1A 06 C1 |  if_b	add	arg05, #2
18168     00 13 02 C6 |  if_b	mov	arg01, _var01
1816c     10 12 06 C1 |  if_b	add	arg01, #16
18170     09 1B 62 CC |  if_b	wrlong	arg05, arg01
18174     0B 15 52 F6 | 	abs	arg02, arg03 wc
18178     0F 1B 80 FF 
1817c     0A 3F 1A FD | 	qdiv	##3546911, arg02
18180                 | ' 
18180                 | ' base2:=@channel1[0]+32*channel
18180                 | ' long[base2+8]:=sample+$C0000000 
18180                 | ' long[base2+12]:= len
18180                 | ' if loop >=0 
18180                 | '   long[base2+16]:= loop
18180     0C E4 85 F1 | 	sub	objptr, #12
18184                 | ' else
18184                 | '   long[base2+16]:= len+2
18184                 | ' word[base2+20]:=vol
18184     00 15 02 F6 | 	mov	arg02, _var01
18188     14 14 06 F1 | 	add	arg02, #20
1818c     0A 19 52 FC | 	wrword	arg04, arg02
18190                 | ' word[base2+24]:= 3546911/splfreq 
18190     00 13 02 F6 | 	mov	arg01, _var01
18194     18 12 06 F1 | 	add	arg01, #24
18198                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
18198                 | ' long[base2+28]:=$40000000
18198     18 14 62 FD | 	getqx	arg02
1819c     0A 15 82 F6 | 	negc	arg02, arg02
181a0     09 15 52 FC | 	wrword	arg02, arg01
181a4     00 15 02 F6 | 	mov	arg02, _var01
181a8     1A 14 06 F1 | 	add	arg02, #26
181ac     0A 01 5A FC | 	wrword	#256, arg02
181b0     1C 00 06 F1 | 	add	_var01, #28
181b4     00 00 A0 FF 
181b8     00 01 68 FC | 	wrlong	##1073741824, _var01
181bc                 | _Audio093b_8_sc_spin2_play_ret
181bc     2D 00 64 FD | 	ret
181c0                 | 
181c0                 | ' until (i >>8) >=len
181c0                 | ' 
181c0                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
181c0                 | _Audio093b_8_sc_spin2_play8
181c0                 | ' 
181c0                 | ' base2:=@channel1[0]+32*channel
181c0     0C E4 05 F1 | 	add	objptr, #12
181c4     F2 00 02 F6 | 	mov	_var01, objptr
181c8     05 12 66 F0 | 	shl	arg01, #5
181cc     09 01 02 F1 | 	add	_var01, arg01
181d0                 | ' long[base2]:=0
181d0     00 01 68 FC | 	wrlong	#0, _var01
181d4                 | ' long[base2+8]:=sample+$40000000 
181d4     00 00 20 FF 
181d8     00 14 06 F1 | 	add	arg02, ##1073741824
181dc     00 13 02 F6 | 	mov	arg01, _var01
181e0     08 12 06 F1 | 	add	arg01, #8
181e4     09 15 62 FC | 	wrlong	arg02, arg01
181e8                 | ' if loop>=0
181e8     00 1C 56 F2 | 	cmps	arg06, #0 wc
181ec     0C E4 85 F1 | 	sub	objptr, #12
181f0     1C 00 90 CD |  if_b	jmp	#LR__2030
181f4                 | '   long[base2+12]:=loop
181f4     00 15 02 F6 | 	mov	arg02, _var01
181f8     0C 14 06 F1 | 	add	arg02, #12
181fc     0A 1D 62 FC | 	wrlong	arg06, arg02
18200                 | '   long[base2+16]:= len
18200     00 1D 02 F6 | 	mov	arg06, _var01
18204     10 1C 06 F1 | 	add	arg06, #16
18208     0E 1B 62 FC | 	wrlong	arg05, arg06
1820c     1C 00 90 FD | 	jmp	#LR__2031
18210                 | LR__2030
18210                 | ' else
18210                 | '   long[base2+12]:= len
18210     00 1D 02 F6 | 	mov	arg06, _var01
18214     0C 1C 06 F1 | 	add	arg06, #12
18218     0E 1B 62 FC | 	wrlong	arg05, arg06
1821c                 | '   long[base2+16]:= len+1
1821c     01 1A 06 F1 | 	add	arg05, #1
18220     00 13 02 F6 | 	mov	arg01, _var01
18224     10 12 06 F1 | 	add	arg01, #16
18228     09 1B 62 FC | 	wrlong	arg05, arg01
1822c                 | LR__2031
1822c     0B 17 52 F6 | 	abs	arg03, arg03 wc
18230     0F 1B 80 FF 
18234     0B 3F 1A FD | 	qdiv	##3546911, arg03
18238                 | ' word[base2+20]:=vol
18238     00 17 02 F6 | 	mov	arg03, _var01
1823c     14 16 06 F1 | 	add	arg03, #20
18240     0B 19 52 FC | 	wrword	arg04, arg03
18244                 | ' word[base2+24]:= 3546911/splfreq 
18244     00 13 02 F6 | 	mov	arg01, _var01
18248     18 12 06 F1 | 	add	arg01, #24
1824c                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
1824c                 | ' long[base2+28]:=$40000000
1824c     18 18 62 FD | 	getqx	arg04
18250     0C 19 82 F6 | 	negc	arg04, arg04
18254     09 19 52 FC | 	wrword	arg04, arg01
18258     00 19 02 F6 | 	mov	arg04, _var01
1825c     1A 18 06 F1 | 	add	arg04, #26
18260     0C 01 5A FC | 	wrword	#256, arg04
18264     1C 00 06 F1 | 	add	_var01, #28
18268     00 00 A0 FF 
1826c     00 01 68 FC | 	wrlong	##1073741824, _var01
18270                 | _Audio093b_8_sc_spin2_play8_ret
18270     2D 00 64 FD | 	ret
18274                 | 
18274                 | ' 
18274                 | '     
18274                 | ' pub stop(channel) 'silence it
18274                 | _Audio093b_8_sc_spin2_stop
18274                 | ' 
18274                 | ' word[@channel1[0]+32*channel+20]:=0
18274     0C E4 05 F1 | 	add	objptr, #12
18278     F2 00 02 F6 | 	mov	_var01, objptr
1827c     05 12 66 F0 | 	shl	arg01, #5
18280     09 01 02 F1 | 	add	_var01, arg01
18284     14 00 06 F1 | 	add	_var01, #20
18288     00 01 58 FC | 	wrword	#0, _var01
1828c     0C E4 85 F1 | 	sub	objptr, #12
18290                 | _Audio093b_8_sc_spin2_stop_ret
18290     2D 00 64 FD | 	ret
18294                 | hubexit
18294     81 00 80 FD | 	jmp	#cogexit
18298                 | 
18298                 | __system___setbaud
18298     14 60 06 FB | 	rdlong	muldiva_, #20
1829c     09 63 02 F6 | 	mov	muldivb_, arg01
182a0     BA 00 A0 FD | 	call	#divide_
182a4     97 06 48 FB | 	callpa	#(@LR__2041-@LR__2040)>>2,fcache_load_ptr_
182a8                 | LR__2040
182a8     3E FA 9D FA | 	rdpin	result1, #62 wc
182ac     FE FC A1 F1 | 	subx	result2, result2
182b0     F4 FF 9F CD |  if_b	jmp	#LR__2040
182b4                 | LR__2041
182b4     40 7C 64 FD | 	dirl	#62
182b8     40 7E 64 FD | 	dirl	#63
182bc     F4 62 62 FC | 	wrlong	muldivb_, ptr___system__dat__
182c0     10 62 66 F0 | 	shl	muldivb_, #16
182c4     07 14 06 F6 | 	mov	arg02, #7
182c8     31 15 02 F1 | 	add	arg02, muldivb_
182cc     3E F8 0C FC | 	wrpin	#124, #62
182d0     3E 14 16 FC | 	wxpin	arg02, #62
182d4     3F 7C 0C FC | 	wrpin	#62, #63
182d8     14 14 06 F1 | 	add	arg02, #20
182dc     3F 14 16 FC | 	wxpin	arg02, #63
182e0     41 7C 64 FD | 	dirh	#62
182e4     41 7E 64 FD | 	dirh	#63
182e8                 | __system___setbaud_ret
182e8     2D 00 64 FD | 	ret
182ec                 | 
182ec                 | __system___txraw
182ec     01 4A 05 F6 | 	mov	COUNT_, #1
182f0     A8 00 A0 FD | 	call	#pushregs_
182f4     09 1F 02 F6 | 	mov	local01, arg01
182f8     97 06 48 FB | 	callpa	#(@LR__2051-@LR__2050)>>2,fcache_load_ptr_
182fc                 | LR__2050
182fc     3E FA 9D FA | 	rdpin	result1, #62 wc
18300     FE FC A1 F1 | 	subx	result2, result2
18304     F4 FF 9F CD |  if_b	jmp	#LR__2050
18308                 | LR__2051
18308     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
1830c     C2 01 00 AF 
18310     00 12 06 A6 |  if_e	mov	arg01, ##230400
18314     80 FF BF AD |  if_e	call	#__system___setbaud
18318     58 7C 64 FD | 	drvl	#62
1831c     3E 1E 26 FC | 	wypin	local01, #62
18320     01 FA 05 F6 | 	mov	result1, #1
18324     A7 F0 03 F6 | 	mov	ptra, fp
18328     B2 00 A0 FD | 	call	#popregs_
1832c                 | __system___txraw_ret
1832c     2D 00 64 FD | 	ret
18330                 | 
18330                 | __system___rxraw
18330     0D 4A 05 F6 | 	mov	COUNT_, #13
18334     A8 00 A0 FD | 	call	#pushregs_
18338     09 1F 02 F6 | 	mov	local01, arg01
1833c     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
18340     C2 01 00 AF 
18344     00 12 06 A6 |  if_e	mov	arg01, ##230400
18348     4C FF BF AD |  if_e	call	#__system___setbaud
1834c     00 1E 0E F2 | 	cmp	local01, #0 wz
18350     20 00 90 AD |  if_e	jmp	#LR__2060
18354     14 22 06 FB | 	rdlong	local03, #20
18358     0A 22 46 F0 | 	shr	local03, #10
1835c     11 1F 02 FD | 	qmul	local01, local03
18360     1A FA 61 FD | 	getct	result1
18364     18 24 62 FD | 	getqx	local04
18368     12 FB 01 F1 | 	add	result1, local04
1836c     FD 26 02 F6 | 	mov	local05, result1
18370     04 00 90 FD | 	jmp	#LR__2061
18374                 | LR__2060
18374     00 26 06 F6 | 	mov	local05, #0
18378                 | LR__2061
18378     01 28 66 F6 | 	neg	local06, #1
1837c     3F 2A 06 F6 | 	mov	local07, #63
18380     00 2C 06 F6 | 	mov	local08, #0
18384     04 E8 05 F1 | 	add	ptr___system__dat__, #4
18388     F4 2E 02 FB | 	rdlong	local09, ptr___system__dat__
1838c     04 E8 85 F1 | 	sub	ptr___system__dat__, #4
18390                 | LR__2062
18390     08 2E 16 F4 | 	testb	local09, #8 wc
18394     09 2E 76 F4 | 	testbn	local09, #9 andc
18398     0A 2E 46 F0 | 	shr	local09, #10
1839c     01 2C 06 C6 |  if_b	mov	local08, #1
183a0     40 7E 6C 3D |  if_ae	testp	#63 wz
183a4     01 2C 06 26 |  if_nc_and_z	mov	local08, #1
183a8     3F 2E 8E 2A |  if_nc_and_z	rdpin	local09, #63
183ac     04 2E 46 20 |  if_nc_and_z	shr	local09, #4
183b0                 | LR__2063
183b0     00 20 06 F6 | 	mov	local02, #0
183b4     00 2C 0E F2 | 	cmp	local08, #0 wz
183b8     01 20 66 56 |  if_ne	neg	local02, #1
183bc     00 30 06 F6 | 	mov	local10, #0
183c0     00 22 06 F6 | 	mov	local03, #0
183c4     00 1E 0E F2 | 	cmp	local01, #0 wz
183c8     01 22 66 56 |  if_ne	neg	local03, #1
183cc     00 24 06 F6 | 	mov	local04, #0
183d0     00 32 06 F6 | 	mov	local11, #0
183d4     1A FA 61 FD | 	getct	result1
183d8     FD 34 02 F6 | 	mov	local12, result1
183dc     1A 37 02 F6 | 	mov	local13, local12
183e0     13 37 82 F1 | 	sub	local13, local05
183e4     00 36 56 F2 | 	cmps	local13, #0 wc
183e8     00 32 26 C6 |  if_b	not	local11, #0
183ec     00 32 0E F2 | 	cmp	local11, #0 wz
183f0     00 24 26 56 |  if_ne	not	local04, #0
183f4     12 23 CA F7 | 	test	local03, local04 wz
183f8     00 30 26 56 |  if_ne	not	local10, #0
183fc     18 21 4A F5 | 	or	local02, local10 wz
18400     8C FF 9F AD |  if_e	jmp	#LR__2062
18404     00 2C 0E F2 | 	cmp	local08, #0 wz
18408     17 29 02 56 |  if_ne	mov	local06, local09
1840c     14 29 E2 58 |  if_ne	getbyte	local06, local06, #0
18410     04 E8 05 F1 | 	add	ptr___system__dat__, #4
18414     F4 2E 62 FC | 	wrlong	local09, ptr___system__dat__
18418     04 E8 85 F1 | 	sub	ptr___system__dat__, #4
1841c     14 FB 01 F6 | 	mov	result1, local06
18420     A7 F0 03 F6 | 	mov	ptra, fp
18424     B2 00 A0 FD | 	call	#popregs_
18428                 | __system___rxraw_ret
18428     2D 00 64 FD | 	ret
1842c                 | 
1842c                 | __system___getus
1842c     1A FC 71 FD | 	getct	result2 wc
18430     1A 00 62 FD | 	getct	_var01
18434     10 E8 05 F1 | 	add	ptr___system__dat__, #16
18438     F4 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
1843c     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
18440     20 00 90 5D |  if_ne	jmp	#LR__2070
18444     14 02 06 FB | 	rdlong	_var02, #20
18448     A1 07 00 FF 
1844c     40 02 16 FD | 	qdiv	_var02, ##1000000
18450     10 E8 05 F1 | 	add	ptr___system__dat__, #16
18454     18 FA 61 FD | 	getqx	result1
18458     FD 02 02 F6 | 	mov	_var02, result1
1845c     F4 FA 61 FC | 	wrlong	result1, ptr___system__dat__
18460     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
18464                 | LR__2070
18464     01 FD 11 FD | 	qdiv	result2, _var02
18468     19 FC 61 FD | 	getqy	result2
1846c     28 FC 61 FD | 	setq	result2
18470     01 01 12 FD | 	qdiv	_var01, _var02
18474     18 FA 61 FD | 	getqx	result1
18478                 | __system___getus_ret
18478     2D 00 64 FD | 	ret
1847c                 | 
1847c                 | __system____builtin_memmove
1847c     09 01 02 F6 | 	mov	_var01, arg01
18480     0A 13 52 F2 | 	cmps	arg01, arg02 wc
18484     10 00 90 CD |  if_b	jmp	#LR__2080
18488     0A 03 02 F6 | 	mov	_var02, arg02
1848c     0B 03 02 F1 | 	add	_var02, arg03
18490     01 13 52 F2 | 	cmps	arg01, _var02 wc
18494     48 00 90 CD |  if_b	jmp	#LR__2086
18498                 | LR__2080
18498     0B 05 02 F6 | 	mov	_var03, arg03
1849c     02 04 4E F0 | 	shr	_var03, #2 wz
184a0     18 00 90 AD |  if_e	jmp	#LR__2085
184a4     97 0A 48 FB | 	callpa	#(@LR__2083-@LR__2081)>>2,fcache_load_ptr_
184a8                 | LR__2081
184a8     02 09 D8 FC | 	rep	@LR__2084, _var03
184ac                 | LR__2082
184ac     0A 05 02 FB | 	rdlong	_var03, arg02
184b0     09 05 62 FC | 	wrlong	_var03, arg01
184b4     04 12 06 F1 | 	add	arg01, #4
184b8     04 14 06 F1 | 	add	arg02, #4
184bc                 | LR__2083
184bc                 | LR__2084
184bc                 | LR__2085
184bc     02 16 CE F7 | 	test	arg03, #2 wz
184c0     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
184c4     09 03 52 5C |  if_ne	wrword	_var02, arg01
184c8     02 12 06 51 |  if_ne	add	arg01, #2
184cc     02 14 06 51 |  if_ne	add	arg02, #2
184d0     01 16 CE F7 | 	test	arg03, #1 wz
184d4     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
184d8     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
184dc     28 00 90 FD | 	jmp	#LR__2092
184e0                 | LR__2086
184e0     0B 13 02 F1 | 	add	arg01, arg03
184e4     0B 15 02 F1 | 	add	arg02, arg03
184e8     0B 07 0A F6 | 	mov	_var04, arg03 wz
184ec     18 00 90 AD |  if_e	jmp	#LR__2091
184f0     97 0A 48 FB | 	callpa	#(@LR__2089-@LR__2087)>>2,fcache_load_ptr_
184f4                 | LR__2087
184f4     03 09 D8 FC | 	rep	@LR__2090, _var04
184f8                 | LR__2088
184f8     01 12 86 F1 | 	sub	arg01, #1
184fc     01 14 86 F1 | 	sub	arg02, #1
18500     0A 03 C2 FA | 	rdbyte	_var02, arg02
18504     09 03 42 FC | 	wrbyte	_var02, arg01
18508                 | LR__2089
18508                 | LR__2090
18508                 | LR__2091
18508                 | LR__2092
18508     00 FB 01 F6 | 	mov	result1, _var01
1850c                 | __system____builtin_memmove_ret
1850c     2D 00 64 FD | 	ret
18510                 | 
18510                 | __system____builtin_strcpy
18510     09 01 02 F6 | 	mov	_var01, arg01
18514     97 0A 48 FB | 	callpa	#(@LR__2101-@LR__2100)>>2,fcache_load_ptr_
18518                 | LR__2100
18518     0A FB C9 FA | 	rdbyte	result1, arg02 wz
1851c     09 FB 41 FC | 	wrbyte	result1, arg01
18520     01 14 06 F1 | 	add	arg02, #1
18524     01 12 06 F1 | 	add	arg01, #1
18528     EC FF 9F 5D |  if_ne	jmp	#LR__2100
1852c                 | LR__2101
1852c     00 FB 01 F6 | 	mov	result1, _var01
18530                 | __system____builtin_strcpy_ret
18530     2D 00 64 FD | 	ret
18534                 | 
18534                 | __system____topofstack
18534     00 4A 05 F6 | 	mov	COUNT_, #0
18538     A8 00 A0 FD | 	call	#pushregs_
1853c     08 F0 07 F1 | 	add	ptra, #8
18540     04 4E 05 F1 | 	add	fp, #4
18544     A7 12 62 FC | 	wrlong	arg01, fp
18548     A7 FA 01 F6 | 	mov	result1, fp
1854c     04 4E 85 F1 | 	sub	fp, #4
18550     A7 F0 03 F6 | 	mov	ptra, fp
18554     B2 00 A0 FD | 	call	#popregs_
18558                 | __system____topofstack_ret
18558     2D 00 64 FD | 	ret
1855c                 | 
1855c                 | __system___lockmem
1855c     00 FA 05 F6 | 	mov	result1, #0
18560     01 FA 61 FD | 	cogid	result1
18564     00 FB 05 F1 | 	add	result1, #256
18568                 | LR__2110
18568     09 01 0A FB | 	rdlong	_var01, arg01 wz
1856c     09 FB 61 AC |  if_e	wrlong	result1, arg01
18570     09 01 02 AB |  if_e	rdlong	_var01, arg01
18574     09 01 02 AB |  if_e	rdlong	_var01, arg01
18578     FD 00 0A F2 | 	cmp	_var01, result1 wz
1857c     E8 FF 9F 5D |  if_ne	jmp	#LR__2110
18580                 | __system___lockmem_ret
18580     2D 00 64 FD | 	ret
18584                 | 
18584                 | __system___string_cmp
18584     97 14 48 FB | 	callpa	#(@LR__2121-@LR__2120)>>2,fcache_load_ptr_
18588                 | LR__2120
18588     09 01 C2 FA | 	rdbyte	_var01, arg01
1858c     0A 03 C2 FA | 	rdbyte	_var02, arg02
18590     00 05 02 F6 | 	mov	_var03, _var01
18594     01 05 8A F1 | 	sub	_var03, _var02 wz
18598     01 12 06 F1 | 	add	arg01, #1
1859c     01 14 06 F1 | 	add	arg02, #1
185a0     0C 00 90 5D |  if_ne	jmp	#LR__2122
185a4     00 00 0E F2 | 	cmp	_var01, #0 wz
185a8     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
185ac     D8 FF 9F 5D |  if_ne	jmp	#LR__2120
185b0                 | LR__2121
185b0                 | LR__2122
185b0     02 FB 01 F6 | 	mov	result1, _var03
185b4                 | __system___string_cmp_ret
185b4     2D 00 64 FD | 	ret
185b8                 | 
185b8                 | __system___string_concat
185b8     05 4A 05 F6 | 	mov	COUNT_, #5
185bc     A8 00 A0 FD | 	call	#pushregs_
185c0     09 1F 02 F6 | 	mov	local01, arg01
185c4     0A 21 02 F6 | 	mov	local02, arg02
185c8     0F 13 02 F6 | 	mov	arg01, local01
185cc     09 23 02 F6 | 	mov	local03, arg01
185d0     97 06 48 FB | 	callpa	#(@LR__2131-@LR__2130)>>2,fcache_load_ptr_
185d4                 | LR__2130
185d4     11 FB C9 FA | 	rdbyte	result1, local03 wz
185d8     01 22 06 51 |  if_ne	add	local03, #1
185dc     F4 FF 9F 5D |  if_ne	jmp	#LR__2130
185e0                 | LR__2131
185e0     09 23 82 F1 | 	sub	local03, arg01
185e4     11 25 02 F6 | 	mov	local04, local03
185e8     10 13 02 F6 | 	mov	arg01, local02
185ec     09 23 02 F6 | 	mov	local03, arg01
185f0     97 06 48 FB | 	callpa	#(@LR__2133-@LR__2132)>>2,fcache_load_ptr_
185f4                 | LR__2132
185f4     11 FB C9 FA | 	rdbyte	result1, local03 wz
185f8     01 22 06 51 |  if_ne	add	local03, #1
185fc     F4 FF 9F 5D |  if_ne	jmp	#LR__2132
18600                 | LR__2133
18600     09 23 82 F1 | 	sub	local03, arg01
18604     12 13 02 F6 | 	mov	arg01, local04
18608     11 13 02 F1 | 	add	arg01, local03
1860c     01 12 06 F1 | 	add	arg01, #1
18610     F8 3B B0 FD | 	call	#__system___gc_alloc_managed
18614     FD 26 0A F6 | 	mov	local05, result1 wz
18618     28 00 90 AD |  if_e	jmp	#LR__2134
1861c     13 13 02 F6 | 	mov	arg01, local05
18620     0F 15 02 F6 | 	mov	arg02, local01
18624     12 17 02 F6 | 	mov	arg03, local04
18628     50 FE BF FD | 	call	#__system____builtin_memmove
1862c     13 13 02 F6 | 	mov	arg01, local05
18630     12 13 02 F1 | 	add	arg01, local04
18634     01 22 06 F1 | 	add	local03, #1
18638     10 15 02 F6 | 	mov	arg02, local02
1863c     11 17 02 F6 | 	mov	arg03, local03
18640     38 FE BF FD | 	call	#__system____builtin_memmove
18644                 | LR__2134
18644     13 FB 01 F6 | 	mov	result1, local05
18648     A7 F0 03 F6 | 	mov	ptra, fp
1864c     B2 00 A0 FD | 	call	#popregs_
18650                 | __system___string_concat_ret
18650     2D 00 64 FD | 	ret
18654                 | 
18654                 | __system___tx
18654     02 4A 05 F6 | 	mov	COUNT_, #2
18658     A8 00 A0 FD | 	call	#pushregs_
1865c     09 1F 02 F6 | 	mov	local01, arg01
18660     0A 1E 0E F2 | 	cmp	local01, #10 wz
18664     18 00 90 5D |  if_ne	jmp	#LR__2140
18668     08 E8 05 F1 | 	add	ptr___system__dat__, #8
1866c     F4 20 02 FB | 	rdlong	local02, ptr___system__dat__
18670     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
18674     02 20 CE F7 | 	test	local02, #2 wz
18678     0D 12 06 56 |  if_ne	mov	arg01, #13
1867c     6C FC BF 5D |  if_ne	call	#__system___txraw
18680                 | LR__2140
18680     0F 13 02 F6 | 	mov	arg01, local01
18684     64 FC BF FD | 	call	#__system___txraw
18688     A7 F0 03 F6 | 	mov	ptra, fp
1868c     B2 00 A0 FD | 	call	#popregs_
18690                 | __system___tx_ret
18690     2D 00 64 FD | 	ret
18694                 | 
18694                 | __system___rx
18694     01 4A 05 F6 | 	mov	COUNT_, #1
18698     A8 00 A0 FD | 	call	#pushregs_
1869c                 | LR__2150
1869c     00 12 06 F6 | 	mov	arg01, #0
186a0     8C FC BF FD | 	call	#__system___rxraw
186a4     FD 1E 02 F6 | 	mov	local01, result1
186a8     FF FF 7F FF 
186ac     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
186b0     E8 FF 9F AD |  if_e	jmp	#LR__2150
186b4     0D 1E 0E F2 | 	cmp	local01, #13 wz
186b8     14 00 90 5D |  if_ne	jmp	#LR__2151
186bc     08 E8 05 F1 | 	add	ptr___system__dat__, #8
186c0     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
186c4     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
186c8     02 FA CD F7 | 	test	result1, #2 wz
186cc     0A 1E 06 56 |  if_ne	mov	local01, #10
186d0                 | LR__2151
186d0     08 E8 05 F1 | 	add	ptr___system__dat__, #8
186d4     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
186d8     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
186dc     01 12 CE F7 | 	test	arg01, #1 wz
186e0     1C 00 90 AD |  if_e	jmp	#LR__2154
186e4     7F 1E 0E F2 | 	cmp	local01, #127 wz
186e8     0C 00 90 5D |  if_ne	jmp	#LR__2152
186ec     08 12 06 F6 | 	mov	arg01, #8
186f0     60 FF BF FD | 	call	#__system___tx
186f4     08 00 90 FD | 	jmp	#LR__2153
186f8                 | LR__2152
186f8     0F 13 02 F6 | 	mov	arg01, local01
186fc     54 FF BF FD | 	call	#__system___tx
18700                 | LR__2153
18700                 | LR__2154
18700     0F FB 01 F6 | 	mov	result1, local01
18704     A7 F0 03 F6 | 	mov	ptra, fp
18708     B2 00 A0 FD | 	call	#popregs_
1870c                 | __system___rx_ret
1870c     2D 00 64 FD | 	ret
18710                 | 
18710                 | __system___pinwrite
18710     09 01 02 F6 | 	mov	_var01, arg01
18714     1F 00 06 F5 | 	and	_var01, #31
18718     20 12 CE F7 | 	test	arg01, #32 wz
1871c     06 12 46 F0 | 	shr	arg01, #6
18720     09 13 CA F9 | 	bmask	arg01, arg01
18724     00 13 62 F0 | 	shl	arg01, _var01
18728     00 15 62 F0 | 	shl	arg02, _var01
1872c     1C 00 90 AD |  if_e	jmp	#LR__2160
18730     09 F7 43 F5 | 	or	dirb, arg01
18734     FD 01 02 F6 | 	mov	_var01, outb
18738     09 01 22 F5 | 	andn	_var01, arg01
1873c     09 15 02 F5 | 	and	arg02, arg01
18740     0A 01 42 F5 | 	or	_var01, arg02
18744     00 FB 03 F6 | 	mov	outb, _var01
18748     18 00 90 FD | 	jmp	#LR__2161
1874c                 | LR__2160
1874c     09 F5 43 F5 | 	or	dira, arg01
18750     FC 01 02 F6 | 	mov	_var01, outa
18754     09 01 22 F5 | 	andn	_var01, arg01
18758     09 15 02 F5 | 	and	arg02, arg01
1875c     0A 01 42 F5 | 	or	_var01, arg02
18760     00 F9 03 F6 | 	mov	outa, _var01
18764                 | LR__2161
18764                 | __system___pinwrite_ret
18764     2D 00 64 FD | 	ret
18768                 | 
18768                 | __system___basic_read_line
18768     06 4A 05 F6 | 	mov	COUNT_, #6
1876c     A8 00 A0 FD | 	call	#pushregs_
18770     09 1F 02 F6 | 	mov	local01, arg01
18774     00 20 06 F6 | 	mov	local02, #0
18778     18 22 06 F6 | 	mov	local03, #24
1877c     00 24 06 F6 | 	mov	local04, #0
18780     18 12 06 F6 | 	mov	arg01, #24
18784     84 3A B0 FD | 	call	#__system___gc_alloc_managed
18788     FD 26 0A F6 | 	mov	local05, result1 wz
1878c     13 FB 01 A6 |  if_e	mov	result1, local05
18790     B0 00 90 AD |  if_e	jmp	#LR__2173
18794                 | LR__2170
18794     0F 13 02 F6 | 	mov	arg01, local01
18798     74 0B B0 FD | 	call	#__system___basic_get_char
1879c     FD 28 02 F6 | 	mov	local06, result1
187a0     01 28 56 F2 | 	cmps	local06, #1 wc
187a4     8C 00 90 CD |  if_b	jmp	#LR__2172
187a8     0A 28 0E F2 | 	cmp	local06, #10 wz
187ac     10 00 90 5D |  if_ne	jmp	#LR__2171
187b0     00 24 0E F2 | 	cmp	local04, #0 wz
187b4     01 20 56 52 |  if_ne	cmps	local02, #1 wc
187b8     01 20 86 11 |  if_a	sub	local02, #1
187bc     74 00 90 FD | 	jmp	#LR__2172
187c0                 | LR__2171
187c0     0D 28 0E F2 | 	cmp	local06, #13 wz
187c4     01 24 06 A6 |  if_e	mov	local04, #1
187c8     00 24 06 56 |  if_ne	mov	local04, #0
187cc     08 28 0E F2 | 	cmp	local06, #8 wz
187d0     7F 28 0E 52 |  if_ne	cmp	local06, #127 wz
187d4     01 20 56 A2 |  if_e	cmps	local02, #1 wc
187d8     01 20 86 21 |  if_nc_and_z	sub	local02, #1
187dc     B4 FF 9F AD |  if_e	jmp	#LR__2170
187e0     13 17 02 F6 | 	mov	arg03, local05
187e4     10 17 02 F1 | 	add	arg03, local02
187e8     0B 29 42 FC | 	wrbyte	local06, arg03
187ec     01 20 06 F1 | 	add	local02, #1
187f0     11 21 0A F2 | 	cmp	local02, local03 wz
187f4     9C FF 9F 5D |  if_ne	jmp	#LR__2170
187f8     11 13 02 F6 | 	mov	arg01, local03
187fc     20 12 06 F1 | 	add	arg01, #32
18800     08 3A B0 FD | 	call	#__system___gc_alloc_managed
18804     FD 28 0A F6 | 	mov	local06, result1 wz
18808     14 FB 01 A6 |  if_e	mov	result1, local06
1880c     34 00 90 AD |  if_e	jmp	#LR__2173
18810     14 13 02 F6 | 	mov	arg01, local06
18814     13 15 02 F6 | 	mov	arg02, local05
18818     11 17 02 F6 | 	mov	arg03, local03
1881c     5C FC BF FD | 	call	#__system____builtin_memmove
18820     20 22 06 F1 | 	add	local03, #32
18824     13 13 02 F6 | 	mov	arg01, local05
18828     1C 3B B0 FD | 	call	#__system___gc_free
1882c     14 27 02 F6 | 	mov	local05, local06
18830     60 FF 9F FD | 	jmp	#LR__2170
18834                 | LR__2172
18834     13 29 02 F6 | 	mov	local06, local05
18838     10 29 02 F1 | 	add	local06, local02
1883c     14 01 48 FC | 	wrbyte	#0, local06
18840     13 FB 01 F6 | 	mov	result1, local05
18844                 | LR__2173
18844     A7 F0 03 F6 | 	mov	ptra, fp
18848     B2 00 A0 FD | 	call	#popregs_
1884c                 | __system___basic_read_line_ret
1884c     2D 00 64 FD | 	ret
18850                 | 
18850                 | __system___waitms
18850     09 01 02 F6 | 	mov	_var01, arg01
18854     1A 02 62 FD | 	getct	_var02
18858     14 04 06 FB | 	rdlong	_var03, #20
1885c     97 14 48 FB | 	callpa	#(@LR__2181-@LR__2180)>>2,fcache_load_ptr_
18860                 | LR__2180
18860     01 00 00 FF 
18864     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
18868     1C 00 90 CD |  if_b	jmp	#LR__2182
1886c     02 03 02 F1 | 	add	_var02, _var03
18870     01 13 02 F6 | 	mov	arg01, _var02
18874     00 12 66 FA | 	addct1	arg01, #0
18878     24 22 60 FD | 	waitct1
1887c     01 00 00 FF 
18880     E8 01 86 F1 | 	sub	_var01, ##1000
18884     D8 FF 9F FD | 	jmp	#LR__2180
18888                 | LR__2181
18888                 | LR__2182
18888     01 00 56 F2 | 	cmps	_var01, #1 wc
1888c     28 00 90 CD |  if_b	jmp	#LR__2183
18890     02 01 02 FD | 	qmul	_var01, _var03
18894     01 00 00 FF 
18898     E8 17 06 F6 | 	mov	arg03, ##1000
1889c     19 FA 61 FD | 	getqy	result1
188a0     18 12 62 FD | 	getqx	arg01
188a4     28 FA 61 FD | 	setq	result1
188a8     0B 13 12 FD | 	qdiv	arg01, arg03
188ac     18 12 62 FD | 	getqx	arg01
188b0     01 13 62 FA | 	addct1	arg01, _var02
188b4     24 22 60 FD | 	waitct1
188b8                 | LR__2183
188b8                 | __system___waitms_ret
188b8     2D 00 64 FD | 	ret
188bc                 | 
188bc                 | __system___waitus
188bc     09 01 02 F6 | 	mov	_var01, arg01
188c0     1A 02 62 FD | 	getct	_var02
188c4     14 04 06 FB | 	rdlong	_var03, #20
188c8     97 14 48 FB | 	callpa	#(@LR__2191-@LR__2190)>>2,fcache_load_ptr_
188cc                 | LR__2190
188cc     A1 07 00 FF 
188d0     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
188d4     1C 00 90 CD |  if_b	jmp	#LR__2192
188d8     02 03 02 F1 | 	add	_var02, _var03
188dc     01 13 02 F6 | 	mov	arg01, _var02
188e0     00 12 66 FA | 	addct1	arg01, #0
188e4     24 22 60 FD | 	waitct1
188e8     A1 07 00 FF 
188ec     40 00 86 F1 | 	sub	_var01, ##1000000
188f0     D8 FF 9F FD | 	jmp	#LR__2190
188f4                 | LR__2191
188f4                 | LR__2192
188f4     01 00 56 F2 | 	cmps	_var01, #1 wc
188f8     28 00 90 CD |  if_b	jmp	#LR__2193
188fc     02 01 02 FD | 	qmul	_var01, _var03
18900     A1 07 00 FF 
18904     40 16 06 F6 | 	mov	arg03, ##1000000
18908     19 FA 61 FD | 	getqy	result1
1890c     18 12 62 FD | 	getqx	arg01
18910     28 FA 61 FD | 	setq	result1
18914     0B 13 12 FD | 	qdiv	arg01, arg03
18918     18 FA 61 FD | 	getqx	result1
1891c     FD 02 62 FA | 	addct1	_var02, result1
18920     24 22 60 FD | 	waitct1
18924                 | LR__2193
18924                 | __system___waitus_ret
18924     2D 00 64 FD | 	ret
18928                 | 
18928                 | __system___mount
18928     0B 4A 05 F6 | 	mov	COUNT_, #11
1892c     A8 00 A0 FD | 	call	#pushregs_
18930     09 1F 02 F6 | 	mov	local01, arg01
18934     0A 21 0A F6 | 	mov	local02, arg02 wz
18938     01 22 66 F6 | 	neg	local03, #1
1893c     01 FA 65 A6 |  if_e	neg	result1, #1
18940     98 02 90 AD |  if_e	jmp	#LR__2215
18944     0F FB C1 FA | 	rdbyte	result1, local01
18948     2F FA 0D F2 | 	cmp	result1, #47 wz
1894c     28 00 90 5D |  if_ne	jmp	#LR__2202
18950     0F 13 02 F6 | 	mov	arg01, local01
18954     09 25 02 F6 | 	mov	local04, arg01
18958     97 06 48 FB | 	callpa	#(@LR__2201-@LR__2200)>>2,fcache_load_ptr_
1895c                 | LR__2200
1895c     12 FB C9 FA | 	rdbyte	result1, local04 wz
18960     01 24 06 51 |  if_ne	add	local04, #1
18964     F4 FF 9F 5D |  if_ne	jmp	#LR__2200
18968                 | LR__2201
18968     09 25 82 F1 | 	sub	local04, arg01
1896c     12 FB 01 F6 | 	mov	result1, local04
18970     10 FA 55 F2 | 	cmps	result1, #16 wc
18974     14 00 90 CD |  if_b	jmp	#LR__2203
18978                 | LR__2202
18978     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1897c     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
18980     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
18984     01 FA 65 F6 | 	neg	result1, #1
18988     50 02 90 FD | 	jmp	#LR__2215
1898c                 | LR__2203
1898c     00 26 06 F6 | 	mov	local05, #0
18990                 | LR__2204
18990     04 26 56 F2 | 	cmps	local05, #4 wc
18994     B0 00 90 3D |  if_ae	jmp	#LR__2209
18998     13 13 02 F6 | 	mov	arg01, local05
1899c     02 12 66 F0 | 	shl	arg01, #2
189a0     64 E8 05 F1 | 	add	ptr___system__dat__, #100
189a4     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
189a8     09 FB 09 FB | 	rdlong	result1, arg01 wz
189ac     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
189b0     00 22 56 A2 |  if_e	cmps	local03, #0 wc
189b4     13 23 02 86 |  if_c_and_z	mov	local03, local05
189b8     84 00 90 8D |  if_c_and_z	jmp	#LR__2208
189bc     13 13 02 F6 | 	mov	arg01, local05
189c0     02 12 66 F0 | 	shl	arg01, #2
189c4     64 E8 05 F1 | 	add	ptr___system__dat__, #100
189c8     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
189cc     09 13 02 FB | 	rdlong	arg01, arg01
189d0     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
189d4     09 25 02 F6 | 	mov	local04, arg01
189d8     97 06 48 FB | 	callpa	#(@LR__2206-@LR__2205)>>2,fcache_load_ptr_
189dc                 | LR__2205
189dc     12 FB C9 FA | 	rdbyte	result1, local04 wz
189e0     01 24 06 51 |  if_ne	add	local04, #1
189e4     F4 FF 9F 5D |  if_ne	jmp	#LR__2205
189e8                 | LR__2206
189e8     09 25 82 F1 | 	sub	local04, arg01
189ec     12 29 02 F6 | 	mov	local06, local04
189f0     14 13 02 F6 | 	mov	arg01, local06
189f4     0F 13 02 F1 | 	add	arg01, local01
189f8     09 FB C1 FA | 	rdbyte	result1, arg01
189fc     2F FA 0D F2 | 	cmp	result1, #47 wz
18a00     14 2B 02 56 |  if_ne	mov	local07, local06
18a04     0F 2B 02 51 |  if_ne	add	local07, local01
18a08     15 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
18a0c     30 00 90 5D |  if_ne	jmp	#LR__2207
18a10     13 17 02 F6 | 	mov	arg03, local05
18a14     02 16 66 F0 | 	shl	arg03, #2
18a18     64 E8 05 F1 | 	add	ptr___system__dat__, #100
18a1c     F4 16 02 F1 | 	add	arg03, ptr___system__dat__
18a20     0B 15 02 FB | 	rdlong	arg02, arg03
18a24     0F 13 02 F6 | 	mov	arg01, local01
18a28     14 17 02 F6 | 	mov	arg03, local06
18a2c     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
18a30     1C 4C B0 FD | 	call	#__system__strncmp
18a34     00 FA 0D F2 | 	cmp	result1, #0 wz
18a38     13 23 02 A6 |  if_e	mov	local03, local05
18a3c     08 00 90 AD |  if_e	jmp	#LR__2209
18a40                 | LR__2207
18a40                 | LR__2208
18a40     01 26 06 F1 | 	add	local05, #1
18a44     48 FF 9F FD | 	jmp	#LR__2204
18a48                 | LR__2209
18a48     FF FF 7F FF 
18a4c     FF 23 0E F2 | 	cmp	local03, ##-1 wz
18a50     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
18a54     F4 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
18a58     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
18a5c     01 FA 65 A6 |  if_e	neg	result1, #1
18a60     78 01 90 AD |  if_e	jmp	#LR__2215
18a64     11 27 02 F6 | 	mov	local05, local03
18a68     13 2B 02 F6 | 	mov	local07, local05
18a6c     02 2A 66 F0 | 	shl	local07, #2
18a70     74 E8 05 F1 | 	add	ptr___system__dat__, #116
18a74     F4 2A 02 F1 | 	add	local07, ptr___system__dat__
18a78     15 29 0A FB | 	rdlong	local06, local07 wz
18a7c     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
18a80     58 00 90 AD |  if_e	jmp	#LR__2210
18a84     4C 28 06 F1 | 	add	local06, #76
18a88     14 2B 0A FB | 	rdlong	local07, local06 wz
18a8c     4C 28 86 F1 | 	sub	local06, #76
18a90     48 00 90 AD |  if_e	jmp	#LR__2210
18a94     4C 28 06 F1 | 	add	local06, #76
18a98     14 2B 02 FB | 	rdlong	local07, local06
18a9c     15 23 02 F6 | 	mov	local03, local07
18aa0     13 2A 46 F7 | 	zerox	local07, #19
18aa4     14 22 46 F0 | 	shr	local03, #20
18aa8     02 22 66 F0 | 	shl	local03, #2
18aac     ED 22 02 F1 | 	add	local03, __methods__
18ab0     11 23 02 FB | 	rdlong	local03, local03
18ab4     13 29 02 F6 | 	mov	local06, local05
18ab8     02 28 66 F0 | 	shl	local06, #2
18abc     64 E8 05 F1 | 	add	ptr___system__dat__, #100
18ac0     F4 28 02 F1 | 	add	local06, ptr___system__dat__
18ac4     14 13 02 FB | 	rdlong	arg01, local06
18ac8     F2 28 02 F6 | 	mov	local06, objptr
18acc     15 E5 01 F6 | 	mov	objptr, local07
18ad0     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
18ad4     2D 22 62 FD | 	call	local03
18ad8     14 E5 01 F6 | 	mov	objptr, local06
18adc                 | LR__2210
18adc     13 2D 02 F6 | 	mov	local08, local05
18ae0     02 2C 66 F0 | 	shl	local08, #2
18ae4     74 E8 05 F1 | 	add	ptr___system__dat__, #116
18ae8     F4 2C 02 F1 | 	add	local08, ptr___system__dat__
18aec     16 21 62 FC | 	wrlong	local02, local08
18af0     00 20 0E F2 | 	cmp	local02, #0 wz
18af4     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
18af8     18 00 90 5D |  if_ne	jmp	#LR__2211
18afc     02 26 66 F0 | 	shl	local05, #2
18b00     64 E8 05 F1 | 	add	ptr___system__dat__, #100
18b04     F4 26 02 F1 | 	add	local05, ptr___system__dat__
18b08     13 01 68 FC | 	wrlong	#0, local05
18b0c     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
18b10     C4 00 90 FD | 	jmp	#LR__2214
18b14                 | LR__2211
18b14     13 2F 02 F6 | 	mov	local09, local05
18b18     04 2E 66 F0 | 	shl	local09, #4
18b1c     24 E8 05 F1 | 	add	ptr___system__dat__, #36
18b20     F4 2E 02 F1 | 	add	local09, ptr___system__dat__
18b24     17 13 02 F6 | 	mov	arg01, local09
18b28     0F 15 02 F6 | 	mov	arg02, local01
18b2c     10 16 06 F6 | 	mov	arg03, #16
18b30     24 E8 85 F1 | 	sub	ptr___system__dat__, #36
18b34     6C 4A B0 FD | 	call	#__system__strncpy
18b38     48 20 06 F1 | 	add	local02, #72
18b3c     10 2D 0A FB | 	rdlong	local08, local02 wz
18b40     48 20 86 F1 | 	sub	local02, #72
18b44     7C 00 90 AD |  if_e	jmp	#LR__2213
18b48     48 20 06 F1 | 	add	local02, #72
18b4c     10 2D 02 FB | 	rdlong	local08, local02
18b50     16 31 02 F6 | 	mov	local10, local08
18b54     13 2C 46 F7 | 	zerox	local08, #19
18b58     14 30 46 F0 | 	shr	local10, #20
18b5c     02 30 66 F0 | 	shl	local10, #2
18b60     ED 30 02 F1 | 	add	local10, __methods__
18b64     18 31 02 FB | 	rdlong	local10, local10
18b68     17 13 02 F6 | 	mov	arg01, local09
18b6c     F2 32 02 F6 | 	mov	local11, objptr
18b70     16 E5 01 F6 | 	mov	objptr, local08
18b74     2D 30 62 FD | 	call	local10
18b78     19 E5 01 F6 | 	mov	objptr, local11
18b7c     FD 12 0A F6 | 	mov	arg01, result1 wz
18b80     40 00 90 AD |  if_e	jmp	#LR__2212
18b84     13 2D 02 F6 | 	mov	local08, local05
18b88     02 2C 66 F0 | 	shl	local08, #2
18b8c     74 E8 05 F1 | 	add	ptr___system__dat__, #116
18b90     F4 2C 02 F1 | 	add	local08, ptr___system__dat__
18b94     16 01 68 FC | 	wrlong	#0, local08
18b98     02 26 66 F0 | 	shl	local05, #2
18b9c     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
18ba0     F4 26 02 F1 | 	add	local05, ptr___system__dat__
18ba4     13 01 68 FC | 	wrlong	#0, local05
18ba8     09 13 6A F6 | 	neg	arg01, arg01 wz
18bac     44 E8 85 F1 | 	sub	ptr___system__dat__, #68
18bb0     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
18bb4     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
18bb8     01 FA 65 56 |  if_ne	neg	result1, #1
18bbc     00 FA 05 A6 |  if_e	mov	result1, #0
18bc0     18 00 90 FD | 	jmp	#LR__2215
18bc4                 | LR__2212
18bc4                 | LR__2213
18bc4     02 26 66 F0 | 	shl	local05, #2
18bc8     64 E8 05 F1 | 	add	ptr___system__dat__, #100
18bcc     F4 26 02 F1 | 	add	local05, ptr___system__dat__
18bd0     13 2F 62 FC | 	wrlong	local09, local05
18bd4     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
18bd8                 | LR__2214
18bd8     00 FA 05 F6 | 	mov	result1, #0
18bdc                 | LR__2215
18bdc     A7 F0 03 F6 | 	mov	ptra, fp
18be0     B2 00 A0 FD | 	call	#popregs_
18be4                 | __system___mount_ret
18be4     2D 00 64 FD | 	ret
18be8                 | 
18be8                 | __system___chdir
18be8     00 4A 05 F6 | 	mov	COUNT_, #0
18bec     A8 00 A0 FD | 	call	#pushregs_
18bf0     40 F0 07 F1 | 	add	ptra, #64
18bf4     04 4E 05 F1 | 	add	fp, #4
18bf8     A7 12 62 FC | 	wrlong	arg01, fp
18bfc     04 4E 05 F1 | 	add	fp, #4
18c00     A7 14 02 F6 | 	mov	arg02, fp
18c04     08 4E 85 F1 | 	sub	fp, #8
18c08     78 46 B0 FD | 	call	#__system__stat
18c0c     3C 4E 05 F1 | 	add	fp, #60
18c10     A7 FA 61 FC | 	wrlong	result1, fp
18c14     3C 4E 85 F1 | 	sub	fp, #60
18c18     00 FA 0D F2 | 	cmp	result1, #0 wz
18c1c     3C 4E 05 51 |  if_ne	add	fp, #60
18c20     A7 FA 01 5B |  if_ne	rdlong	result1, fp
18c24     3C 4E 85 51 |  if_ne	sub	fp, #60
18c28     BC 00 90 5D |  if_ne	jmp	#LR__2222
18c2c     10 4E 05 F1 | 	add	fp, #16
18c30     A7 12 02 FB | 	rdlong	arg01, fp
18c34     10 4E 85 F1 | 	sub	fp, #16
18c38     78 00 00 FF 
18c3c     00 12 06 F5 | 	and	arg01, ##61440
18c40     08 00 00 FF 
18c44     00 12 0E F2 | 	cmp	arg01, ##4096 wz
18c48     20 E8 05 51 |  if_ne	add	ptr___system__dat__, #32
18c4c     F4 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
18c50     20 E8 85 51 |  if_ne	sub	ptr___system__dat__, #32
18c54     01 FA 65 56 |  if_ne	neg	result1, #1
18c58     8C 00 90 5D |  if_ne	jmp	#LR__2222
18c5c     04 4E 05 F1 | 	add	fp, #4
18c60     A7 16 02 FB | 	rdlong	arg03, fp
18c64     04 4E 85 F1 | 	sub	fp, #4
18c68     0B 17 C2 FA | 	rdbyte	arg03, arg03
18c6c     2F 16 0E F2 | 	cmp	arg03, #47 wz
18c70     24 00 90 5D |  if_ne	jmp	#LR__2220
18c74     84 E8 05 F1 | 	add	ptr___system__dat__, #132
18c78     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
18c7c     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
18c80     04 4E 05 F1 | 	add	fp, #4
18c84     A7 14 02 FB | 	rdlong	arg02, fp
18c88     04 4E 85 F1 | 	sub	fp, #4
18c8c     00 17 06 F6 | 	mov	arg03, #256
18c90     10 49 B0 FD | 	call	#__system__strncpy
18c94     4C 00 90 FD | 	jmp	#LR__2221
18c98                 | LR__2220
18c98     84 E9 05 F1 | 	add	ptr___system__dat__, #388
18c9c     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
18ca0     38 4E 05 F1 | 	add	fp, #56
18ca4     A7 12 62 FC | 	wrlong	arg01, fp
18ca8     38 4E 85 F1 | 	sub	fp, #56
18cac     00 E9 85 F1 | 	sub	ptr___system__dat__, #256
18cb0     F4 14 02 F6 | 	mov	arg02, ptr___system__dat__
18cb4     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
18cb8     00 17 06 F6 | 	mov	arg03, #256
18cbc     E4 48 B0 FD | 	call	#__system__strncpy
18cc0     38 4E 05 F1 | 	add	fp, #56
18cc4     A7 12 02 FB | 	rdlong	arg01, fp
18cc8     34 4E 85 F1 | 	sub	fp, #52
18ccc     A7 14 02 FB | 	rdlong	arg02, fp
18cd0     04 4E 85 F1 | 	sub	fp, #4
18cd4     84 E8 05 F1 | 	add	ptr___system__dat__, #132
18cd8     F4 16 02 F6 | 	mov	arg03, ptr___system__dat__
18cdc     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
18ce0     10 00 B0 FD | 	call	#__system____getvfsforfile
18ce4                 | LR__2221
18ce4     00 FA 05 F6 | 	mov	result1, #0
18ce8                 | LR__2222
18ce8     A7 F0 03 F6 | 	mov	ptra, fp
18cec     B2 00 A0 FD | 	call	#popregs_
18cf0                 | __system___chdir_ret
18cf0     2D 00 64 FD | 	ret
18cf4                 | 
18cf4                 | __system____getvfsforfile
18cf4     0E 4A 05 F6 | 	mov	COUNT_, #14
18cf8     A8 00 A0 FD | 	call	#pushregs_
18cfc     09 1F 02 F6 | 	mov	local01, arg01
18d00     0A 21 02 F6 | 	mov	local02, arg02
18d04     0B 23 02 F6 | 	mov	local03, arg03
18d08     97 10 48 FB | 	callpa	#(@LR__2231-@LR__2230)>>2,fcache_load_ptr_
18d0c                 | LR__2230
18d0c     10 FB C1 FA | 	rdbyte	result1, local02
18d10     2F FA 0D F2 | 	cmp	result1, #47 wz
18d14     01 20 06 A1 |  if_e	add	local02, #1
18d18     10 25 C2 AA |  if_e	rdbyte	local04, local02
18d1c     01 20 86 A1 |  if_e	sub	local02, #1
18d20     2F 24 0E A2 |  if_e	cmp	local04, #47 wz
18d24     01 20 06 A1 |  if_e	add	local02, #1
18d28     E0 FF 9F AD |  if_e	jmp	#LR__2230
18d2c                 | LR__2231
18d2c     10 25 C2 FA | 	rdbyte	local04, local02
18d30     2F 24 0E F2 | 	cmp	local04, #47 wz
18d34     14 00 90 5D |  if_ne	jmp	#LR__2232
18d38     0F 13 02 F6 | 	mov	arg01, local01
18d3c     10 15 02 F6 | 	mov	arg02, local02
18d40     00 17 06 F6 | 	mov	arg03, #256
18d44     5C 48 B0 FD | 	call	#__system__strncpy
18d48     7C 00 90 FD | 	jmp	#LR__2234
18d4c                 | LR__2232
18d4c     84 E8 05 F1 | 	add	ptr___system__dat__, #132
18d50     F4 14 02 F6 | 	mov	arg02, ptr___system__dat__
18d54     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
18d58     0F 13 02 F6 | 	mov	arg01, local01
18d5c     00 17 06 F6 | 	mov	arg03, #256
18d60     40 48 B0 FD | 	call	#__system__strncpy
18d64     10 25 CA FA | 	rdbyte	local04, local02 wz
18d68     5C 00 90 AD |  if_e	jmp	#LR__2233
18d6c     10 25 C2 FA | 	rdbyte	local04, local02
18d70     2E 24 0E F2 | 	cmp	local04, #46 wz
18d74     01 20 06 A1 |  if_e	add	local02, #1
18d78     10 27 C2 AA |  if_e	rdbyte	local05, local02
18d7c     01 20 86 A1 |  if_e	sub	local02, #1
18d80     13 29 02 A6 |  if_e	mov	local06, local05
18d84     07 28 4E A7 |  if_e	zerox	local06, #7 wz
18d88     3C 00 90 AD |  if_e	jmp	#LR__2233
18d8c     0F 27 C2 FA | 	rdbyte	local05, local01
18d90     2F 26 0E F2 | 	cmp	local05, #47 wz
18d94     01 1E 06 A1 |  if_e	add	local01, #1
18d98     0F 25 C2 AA |  if_e	rdbyte	local04, local01
18d9c     01 1E 86 A1 |  if_e	sub	local01, #1
18da0     00 24 4E A2 |  if_e	cmps	local04, #0 wz
18da4     3C 01 00 5F 
18da8     80 14 06 56 |  if_ne	mov	arg02, ##@LR__4260
18dac     0F 13 02 56 |  if_ne	mov	arg01, local01
18db0     00 17 06 56 |  if_ne	mov	arg03, #256
18db4     38 48 B0 5D |  if_ne	call	#__system__strncat
18db8     0F 13 02 F6 | 	mov	arg01, local01
18dbc     10 15 02 F6 | 	mov	arg02, local02
18dc0     00 17 06 F6 | 	mov	arg03, #256
18dc4     28 48 B0 FD | 	call	#__system__strncat
18dc8                 | LR__2233
18dc8                 | LR__2234
18dc8     0F 13 02 F6 | 	mov	arg01, local01
18dcc     E0 49 B0 FD | 	call	#__system___normalizeName
18dd0     0F 25 CA FA | 	rdbyte	local04, local01 wz
18dd4     1C 00 90 AD |  if_e	jmp	#LR__2235
18dd8     0F 25 C2 FA | 	rdbyte	local04, local01
18ddc     2F 24 0E F2 | 	cmp	local04, #47 wz
18de0     01 1E 06 A1 |  if_e	add	local01, #1
18de4     0F 29 C2 AA |  if_e	rdbyte	local06, local01
18de8     01 1E 86 A1 |  if_e	sub	local01, #1
18dec     00 28 4E A2 |  if_e	cmps	local06, #0 wz
18df0     18 00 90 5D |  if_ne	jmp	#LR__2236
18df4                 | LR__2235
18df4     01 00 00 FF 
18df8     84 E8 05 F1 | 	add	ptr___system__dat__, ##644
18dfc     F4 FA 01 F6 | 	mov	result1, ptr___system__dat__
18e00     01 00 00 FF 
18e04     84 E8 85 F1 | 	sub	ptr___system__dat__, ##644
18e08     EC 01 90 FD | 	jmp	#LR__2250
18e0c                 | LR__2236
18e0c     00 2A 06 F6 | 	mov	local07, #0
18e10                 | LR__2237
18e10     04 2A 56 F2 | 	cmps	local07, #4 wc
18e14     CC 01 90 3D |  if_ae	jmp	#LR__2249
18e18     15 29 02 F6 | 	mov	local06, local07
18e1c     02 28 66 F0 | 	shl	local06, #2
18e20     64 E8 05 F1 | 	add	ptr___system__dat__, #100
18e24     F4 28 02 F1 | 	add	local06, ptr___system__dat__
18e28     14 29 0A FB | 	rdlong	local06, local06 wz
18e2c     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
18e30     A8 01 90 AD |  if_e	jmp	#LR__2248
18e34     15 25 02 F6 | 	mov	local04, local07
18e38     02 24 66 F0 | 	shl	local04, #2
18e3c     64 E8 05 F1 | 	add	ptr___system__dat__, #100
18e40     F4 24 02 F1 | 	add	local04, ptr___system__dat__
18e44     12 13 02 FB | 	rdlong	arg01, local04
18e48     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
18e4c     09 2D 02 F6 | 	mov	local08, arg01
18e50     97 06 48 FB | 	callpa	#(@LR__2239-@LR__2238)>>2,fcache_load_ptr_
18e54                 | LR__2238
18e54     16 FB C9 FA | 	rdbyte	result1, local08 wz
18e58     01 2C 06 51 |  if_ne	add	local08, #1
18e5c     F4 FF 9F 5D |  if_ne	jmp	#LR__2238
18e60                 | LR__2239
18e60     09 2D 82 F1 | 	sub	local08, arg01
18e64     16 2F 02 F6 | 	mov	local09, local08
18e68     17 25 02 F6 | 	mov	local04, local09
18e6c     0F 25 02 F1 | 	add	local04, local01
18e70     12 29 C2 FA | 	rdbyte	local06, local04
18e74     2F 28 0E F2 | 	cmp	local06, #47 wz
18e78     17 31 02 56 |  if_ne	mov	local10, local09
18e7c     0F 31 02 51 |  if_ne	add	local10, local01
18e80     18 27 CA 5A |  if_ne	rdbyte	local05, local10 wz
18e84     54 01 90 5D |  if_ne	jmp	#LR__2247
18e88     15 17 02 F6 | 	mov	arg03, local07
18e8c     02 16 66 F0 | 	shl	arg03, #2
18e90     64 E8 05 F1 | 	add	ptr___system__dat__, #100
18e94     F4 16 02 F1 | 	add	arg03, ptr___system__dat__
18e98     0B 15 02 FB | 	rdlong	arg02, arg03
18e9c     17 17 02 F6 | 	mov	arg03, local09
18ea0     0F 13 02 F6 | 	mov	arg01, local01
18ea4     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
18ea8     A4 47 B0 FD | 	call	#__system__strncmp
18eac     00 FA 4D F2 | 	cmps	result1, #0 wz
18eb0     28 01 90 5D |  if_ne	jmp	#LR__2247
18eb4     15 33 02 F6 | 	mov	local11, local07
18eb8     02 32 66 F0 | 	shl	local11, #2
18ebc     74 E8 05 F1 | 	add	ptr___system__dat__, #116
18ec0     F4 32 02 F1 | 	add	local11, ptr___system__dat__
18ec4     19 35 02 FB | 	rdlong	local12, local11
18ec8     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
18ecc     97 22 48 FB | 	callpa	#(@LR__2241-@LR__2240)>>2,fcache_load_ptr_
18ed0                 | LR__2240
18ed0     17 29 02 F6 | 	mov	local06, local09
18ed4     01 28 06 F1 | 	add	local06, #1
18ed8     0F 29 02 F1 | 	add	local06, local01
18edc     14 33 C2 FA | 	rdbyte	local11, local06
18ee0     2E 32 0E F2 | 	cmp	local11, #46 wz
18ee4     2C 00 90 5D |  if_ne	jmp	#LR__2242
18ee8     17 33 02 F6 | 	mov	local11, local09
18eec     02 32 06 F1 | 	add	local11, #2
18ef0     0F 33 02 F1 | 	add	local11, local01
18ef4     19 31 C2 FA | 	rdbyte	local10, local11
18ef8     2F 30 0E F2 | 	cmp	local10, #47 wz
18efc     17 37 02 56 |  if_ne	mov	local13, local09
18f00     02 36 06 51 |  if_ne	add	local13, #2
18f04     0F 37 02 51 |  if_ne	add	local13, local01
18f08     1B 39 CA 5A |  if_ne	rdbyte	local14, local13 wz
18f0c     01 2E 06 A1 |  if_e	add	local09, #1
18f10     BC FF 9F AD |  if_e	jmp	#LR__2240
18f14                 | LR__2241
18f14                 | LR__2242
18f14     00 22 0E F2 | 	cmp	local03, #0 wz
18f18     11 13 02 56 |  if_ne	mov	arg01, local03
18f1c     0F 15 02 56 |  if_ne	mov	arg02, local01
18f20     00 17 06 56 |  if_ne	mov	arg03, #256
18f24     7C 46 B0 5D |  if_ne	call	#__system__strncpy
18f28     0F 15 02 F6 | 	mov	arg02, local01
18f2c     17 15 02 F1 | 	add	arg02, local09
18f30     01 14 06 F1 | 	add	arg02, #1
18f34     0F 13 02 F6 | 	mov	arg01, local01
18f38     D4 F5 BF FD | 	call	#__system____builtin_strcpy
18f3c     0F 13 02 F6 | 	mov	arg01, local01
18f40     09 2D 02 F6 | 	mov	local08, arg01
18f44     97 06 48 FB | 	callpa	#(@LR__2244-@LR__2243)>>2,fcache_load_ptr_
18f48                 | LR__2243
18f48     16 FB C9 FA | 	rdbyte	result1, local08 wz
18f4c     01 2C 06 51 |  if_ne	add	local08, #1
18f50     F4 FF 9F 5D |  if_ne	jmp	#LR__2243
18f54                 | LR__2244
18f54     09 2D 82 F1 | 	sub	local08, arg01
18f58     16 2F 02 F6 | 	mov	local09, local08
18f5c                 | LR__2245
18f5c     01 2E 56 F2 | 	cmps	local09, #1 wc
18f60     70 00 90 CD |  if_b	jmp	#LR__2246
18f64     17 25 02 F6 | 	mov	local04, local09
18f68     0F 25 02 F1 | 	add	local04, local01
18f6c     12 33 C2 FA | 	rdbyte	local11, local04
18f70     2F 32 0E F2 | 	cmp	local11, #47 wz
18f74     17 33 02 A6 |  if_e	mov	local11, local09
18f78     0F 33 02 A1 |  if_e	add	local11, local01
18f7c     19 01 48 AC |  if_e	wrbyte	#0, local11
18f80     01 2E 86 A1 |  if_e	sub	local09, #1
18f84     D4 FF 9F AD |  if_e	jmp	#LR__2245
18f88     17 25 02 F6 | 	mov	local04, local09
18f8c     0F 25 02 F1 | 	add	local04, local01
18f90     12 33 C2 FA | 	rdbyte	local11, local04
18f94     2E 32 0E F2 | 	cmp	local11, #46 wz
18f98     38 00 90 5D |  if_ne	jmp	#LR__2246
18f9c     02 2E 56 F2 | 	cmps	local09, #2 wc
18fa0     30 00 90 CD |  if_b	jmp	#LR__2246
18fa4     17 39 02 F6 | 	mov	local14, local09
18fa8     01 38 86 F1 | 	sub	local14, #1
18fac     0F 39 02 F1 | 	add	local14, local01
18fb0     1C 27 C2 FA | 	rdbyte	local05, local14
18fb4     2F 26 0E F2 | 	cmp	local05, #47 wz
18fb8     18 00 90 5D |  if_ne	jmp	#LR__2246
18fbc     17 25 02 F6 | 	mov	local04, local09
18fc0     01 24 86 F1 | 	sub	local04, #1
18fc4     0F 25 02 F1 | 	add	local04, local01
18fc8     12 01 48 FC | 	wrbyte	#0, local04
18fcc     02 2E 86 F1 | 	sub	local09, #2
18fd0     88 FF 9F FD | 	jmp	#LR__2245
18fd4                 | LR__2246
18fd4     1A FB 01 F6 | 	mov	result1, local12
18fd8     1C 00 90 FD | 	jmp	#LR__2250
18fdc                 | LR__2247
18fdc                 | LR__2248
18fdc     01 2A 06 F1 | 	add	local07, #1
18fe0     2C FE 9F FD | 	jmp	#LR__2237
18fe4                 | LR__2249
18fe4     03 00 00 FF 
18fe8     38 E9 05 F1 | 	add	ptr___system__dat__, ##1848
18fec     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
18ff0     03 00 00 FF 
18ff4     38 E9 85 F1 | 	sub	ptr___system__dat__, ##1848
18ff8                 | LR__2250
18ff8     A7 F0 03 F6 | 	mov	ptra, fp
18ffc     B2 00 A0 FD | 	call	#popregs_
19000                 | __system____getvfsforfile_ret
19000     2D 00 64 FD | 	ret
19004                 | 
19004                 | __system___basic_open
19004     05 4A 05 F6 | 	mov	COUNT_, #5
19008     A8 00 A0 FD | 	call	#pushregs_
1900c     0A 1F 02 F6 | 	mov	local01, arg02
19010     0B 21 02 F6 | 	mov	local02, arg03
19014     0C 23 02 F6 | 	mov	local03, arg04
19018     00 24 06 F6 | 	mov	local04, #0
1901c     5C 45 B0 FD | 	call	#__system____getftab
19020     FD 26 0A F6 | 	mov	local05, result1 wz
19024     18 00 90 5D |  if_ne	jmp	#LR__2260
19028     EE 12 02 F6 | 	mov	arg01, abortchain
1902c     0C 14 06 F6 | 	mov	arg02, #12
19030     01 16 06 F6 | 	mov	arg03, #1
19034     DA 00 A0 FD | 	call	#__longjmp
19038     01 FA 65 F6 | 	neg	result1, #1
1903c     10 01 90 FD | 	jmp	#LR__2269
19040                 | LR__2260
19040     08 26 06 F1 | 	add	local05, #8
19044     13 FB 09 FB | 	rdlong	result1, local05 wz
19048     08 26 86 F1 | 	sub	local05, #8
1904c     13 13 02 56 |  if_ne	mov	arg01, local05
19050     B8 3C B0 5D |  if_ne	call	#__system___closeraw
19054     00 1E 0E F2 | 	cmp	local01, #0 wz
19058     00 20 0E A2 |  if_e	cmp	local02, #0 wz
1905c     00 22 0E A2 |  if_e	cmp	local03, #0 wz
19060     3C 00 90 AD |  if_e	jmp	#LR__2262
19064     0C 12 06 F6 | 	mov	arg01, #12
19068     A0 31 B0 FD | 	call	#__system___gc_alloc_managed
1906c     FD 24 0A F6 | 	mov	local04, result1 wz
19070     18 00 90 5D |  if_ne	jmp	#LR__2261
19074     EE 12 02 F6 | 	mov	arg01, abortchain
19078     07 14 06 F6 | 	mov	arg02, #7
1907c     01 16 06 F6 | 	mov	arg03, #1
19080     DA 00 A0 FD | 	call	#__longjmp
19084     01 FA 65 F6 | 	neg	result1, #1
19088     C4 00 90 FD | 	jmp	#LR__2269
1908c                 | LR__2261
1908c     12 01 68 FC | 	wrlong	#0, local04
19090     04 24 06 F1 | 	add	local04, #4
19094     12 01 68 FC | 	wrlong	#0, local04
19098     04 24 86 F1 | 	sub	local04, #4
1909c     13 25 62 FC | 	wrlong	local04, local05
190a0                 | LR__2262
190a0     00 1E 0E F2 | 	cmp	local01, #0 wz
190a4     20 00 90 AD |  if_e	jmp	#LR__2263
190a8     12 1F 62 FC | 	wrlong	local01, local04
190ac     12 FB 01 F6 | 	mov	result1, local04
190b0     00 F8 02 FF 
190b4     00 FA 45 F5 | 	or	result1, ##99614720
190b8     1C 26 06 F1 | 	add	local05, #28
190bc     13 FB 61 FC | 	wrlong	result1, local05
190c0     1C 26 86 F1 | 	sub	local05, #28
190c4     0C 00 90 FD | 	jmp	#LR__2264
190c8                 | LR__2263
190c8     1C 26 06 F1 | 	add	local05, #28
190cc     13 01 68 FC | 	wrlong	#0, local05
190d0     1C 26 86 F1 | 	sub	local05, #28
190d4                 | LR__2264
190d4     00 20 0E F2 | 	cmp	local02, #0 wz
190d8     24 00 90 AD |  if_e	jmp	#LR__2265
190dc     04 24 06 F1 | 	add	local04, #4
190e0     12 21 62 FC | 	wrlong	local02, local04
190e4     04 24 86 F1 | 	sub	local04, #4
190e8     12 FB 01 F6 | 	mov	result1, local04
190ec     39 FA 25 F4 | 	bith	result1, #57
190f0     20 26 06 F1 | 	add	local05, #32
190f4     13 FB 61 FC | 	wrlong	result1, local05
190f8     20 26 86 F1 | 	sub	local05, #32
190fc     0C 00 90 FD | 	jmp	#LR__2266
19100                 | LR__2265
19100     20 26 06 F1 | 	add	local05, #32
19104     13 01 68 FC | 	wrlong	#0, local05
19108     20 26 86 F1 | 	sub	local05, #32
1910c                 | LR__2266
1910c     00 22 0E F2 | 	cmp	local03, #0 wz
19110     24 00 90 AD |  if_e	jmp	#LR__2267
19114     08 24 06 F1 | 	add	local04, #8
19118     12 23 62 FC | 	wrlong	local03, local04
1911c     08 24 86 F1 | 	sub	local04, #8
19120     00 08 03 FF 
19124     00 24 46 F5 | 	or	local04, ##101711872
19128     24 26 06 F1 | 	add	local05, #36
1912c     13 25 62 FC | 	wrlong	local04, local05
19130     24 26 86 F1 | 	sub	local05, #36
19134     0C 00 90 FD | 	jmp	#LR__2268
19138                 | LR__2267
19138     24 26 06 F1 | 	add	local05, #36
1913c     13 01 68 FC | 	wrlong	#0, local05
19140     24 26 86 F1 | 	sub	local05, #36
19144                 | LR__2268
19144     08 26 06 F1 | 	add	local05, #8
19148     13 0F 68 FC | 	wrlong	#7, local05
1914c     00 FA 05 F6 | 	mov	result1, #0
19150                 | LR__2269
19150     A7 F0 03 F6 | 	mov	ptra, fp
19154     B2 00 A0 FD | 	call	#popregs_
19158                 | __system___basic_open_ret
19158     2D 00 64 FD | 	ret
1915c                 | 
1915c                 | __system___basic_open_string
1915c     04 4A 05 F6 | 	mov	COUNT_, #4
19160     A8 00 A0 FD | 	call	#pushregs_
19164     0A 1F 02 F6 | 	mov	local01, arg02
19168     0B 21 02 F6 | 	mov	local02, arg03
1916c     0C 44 B0 FD | 	call	#__system____getftab
19170     FD 22 0A F6 | 	mov	local03, result1 wz
19174     18 00 90 5D |  if_ne	jmp	#LR__2270
19178     EE 12 02 F6 | 	mov	arg01, abortchain
1917c     0C 14 06 F6 | 	mov	arg02, #12
19180     01 16 06 F6 | 	mov	arg03, #1
19184     DA 00 A0 FD | 	call	#__longjmp
19188     01 FA 65 F6 | 	neg	result1, #1
1918c     58 00 90 FD | 	jmp	#LR__2272
19190                 | LR__2270
19190     08 22 06 F1 | 	add	local03, #8
19194     11 19 0A FB | 	rdlong	arg04, local03 wz
19198     08 22 86 F1 | 	sub	local03, #8
1919c     11 13 02 56 |  if_ne	mov	arg01, local03
191a0     68 3B B0 5D |  if_ne	call	#__system___closeraw
191a4     0F 15 02 F6 | 	mov	arg02, local01
191a8     10 17 02 F6 | 	mov	arg03, local02
191ac     11 13 02 F6 | 	mov	arg01, local03
191b0     B6 19 06 F6 | 	mov	arg04, #438
191b4     50 38 B0 FD | 	call	#__system___openraw
191b8     FD 24 02 F6 | 	mov	local04, result1
191bc     00 24 56 F2 | 	cmps	local04, #0 wc
191c0     20 00 90 3D |  if_ae	jmp	#LR__2271
191c4     20 E8 05 F1 | 	add	ptr___system__dat__, #32
191c8     F4 14 02 FB | 	rdlong	arg02, ptr___system__dat__
191cc     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
191d0     EE 12 02 F6 | 	mov	arg01, abortchain
191d4     01 16 06 F6 | 	mov	arg03, #1
191d8     DA 00 A0 FD | 	call	#__longjmp
191dc     01 FA 65 F6 | 	neg	result1, #1
191e0     04 00 90 FD | 	jmp	#LR__2272
191e4                 | LR__2271
191e4     12 FB 01 F6 | 	mov	result1, local04
191e8                 | LR__2272
191e8     A7 F0 03 F6 | 	mov	ptra, fp
191ec     B2 00 A0 FD | 	call	#popregs_
191f0                 | __system___basic_open_string_ret
191f0     2D 00 64 FD | 	ret
191f4                 | 
191f4                 | __system___basic_print_char
191f4     03 4A 05 F6 | 	mov	COUNT_, #3
191f8     A8 00 A0 FD | 	call	#pushregs_
191fc     0A 1F 02 F6 | 	mov	local01, arg02
19200     CC 4A B0 FD | 	call	#__system___gettxfunc
19204     FD 20 0A F6 | 	mov	local02, result1 wz
19208     00 FA 05 A6 |  if_e	mov	result1, #0
1920c     30 00 90 AD |  if_e	jmp	#LR__2280
19210     10 23 02 F6 | 	mov	local03, local02
19214     13 20 46 F7 | 	zerox	local02, #19
19218     14 22 46 F0 | 	shr	local03, #20
1921c     02 22 66 F0 | 	shl	local03, #2
19220     ED 22 02 F1 | 	add	local03, __methods__
19224     11 23 02 FB | 	rdlong	local03, local03
19228     0F 13 02 F6 | 	mov	arg01, local01
1922c     F2 1E 02 F6 | 	mov	local01, objptr
19230     10 E5 01 F6 | 	mov	objptr, local02
19234     2D 22 62 FD | 	call	local03
19238     0F E5 01 F6 | 	mov	objptr, local01
1923c     01 FA 05 F6 | 	mov	result1, #1
19240                 | LR__2280
19240     A7 F0 03 F6 | 	mov	ptra, fp
19244     B2 00 A0 FD | 	call	#popregs_
19248                 | __system___basic_print_char_ret
19248     2D 00 64 FD | 	ret
1924c                 | 
1924c                 | __system___basic_print_string
1924c     03 4A 05 F6 | 	mov	COUNT_, #3
19250     A8 00 A0 FD | 	call	#pushregs_
19254     0A 1F 02 F6 | 	mov	local01, arg02
19258     0B 21 02 F6 | 	mov	local02, arg03
1925c     70 4A B0 FD | 	call	#__system___gettxfunc
19260     FD 22 0A F6 | 	mov	local03, result1 wz
19264     00 FA 05 A6 |  if_e	mov	result1, #0
19268     18 00 90 AD |  if_e	jmp	#LR__2290
1926c     00 1E 0E F2 | 	cmp	local01, #0 wz
19270     00 FA 05 A6 |  if_e	mov	result1, #0
19274     11 13 02 56 |  if_ne	mov	arg01, local03
19278     10 15 02 56 |  if_ne	mov	arg02, local02
1927c     0F 17 02 56 |  if_ne	mov	arg03, local01
19280     9C 01 B0 5D |  if_ne	call	#__system___fmtstr
19284                 | LR__2290
19284     A7 F0 03 F6 | 	mov	ptra, fp
19288     B2 00 A0 FD | 	call	#popregs_
1928c                 | __system___basic_print_string_ret
1928c     2D 00 64 FD | 	ret
19290                 | 
19290                 | __system___basic_print_integer
19290     04 4A 05 F6 | 	mov	COUNT_, #4
19294     A8 00 A0 FD | 	call	#pushregs_
19298     0A 1F 02 F6 | 	mov	local01, arg02
1929c     0B 21 02 F6 | 	mov	local02, arg03
192a0     0C 23 02 F6 | 	mov	local03, arg04
192a4     28 4A B0 FD | 	call	#__system___gettxfunc
192a8     FD 24 0A F6 | 	mov	local04, result1 wz
192ac     00 FA 05 A6 |  if_e	mov	result1, #0
192b0     12 13 02 56 |  if_ne	mov	arg01, local04
192b4     10 15 02 56 |  if_ne	mov	arg02, local02
192b8     0F 17 02 56 |  if_ne	mov	arg03, local01
192bc     11 19 02 56 |  if_ne	mov	arg04, local03
192c0     48 02 B0 5D |  if_ne	call	#__system___fmtnum
192c4     A7 F0 03 F6 | 	mov	ptra, fp
192c8     B2 00 A0 FD | 	call	#popregs_
192cc                 | __system___basic_print_integer_ret
192cc     2D 00 64 FD | 	ret
192d0                 | 
192d0                 | __system___basic_print_unsigned
192d0     03 4A 05 F6 | 	mov	COUNT_, #3
192d4     A8 00 A0 FD | 	call	#pushregs_
192d8     0A 1F 02 F6 | 	mov	local01, arg02
192dc     0B 21 02 F6 | 	mov	local02, arg03
192e0     0C 23 02 F6 | 	mov	local03, arg04
192e4     E8 49 B0 FD | 	call	#__system___gettxfunc
192e8     FD 12 0A F6 | 	mov	arg01, result1 wz
192ec     00 FA 05 A6 |  if_e	mov	result1, #0
192f0     3A 20 26 54 |  if_ne	bith	local02, #58
192f4     10 15 02 56 |  if_ne	mov	arg02, local02
192f8     0F 17 02 56 |  if_ne	mov	arg03, local01
192fc     11 19 02 56 |  if_ne	mov	arg04, local03
19300     08 02 B0 5D |  if_ne	call	#__system___fmtnum
19304     A7 F0 03 F6 | 	mov	ptra, fp
19308     B2 00 A0 FD | 	call	#popregs_
1930c                 | __system___basic_print_unsigned_ret
1930c     2D 00 64 FD | 	ret
19310                 | 
19310                 | __system___basic_get_char
19310     03 4A 05 F6 | 	mov	COUNT_, #3
19314     A8 00 A0 FD | 	call	#pushregs_
19318     F8 49 B0 FD | 	call	#__system___getrxfunc
1931c     FD 1E 0A F6 | 	mov	local01, result1 wz
19320     01 FA 65 A6 |  if_e	neg	result1, #1
19324     28 00 90 AD |  if_e	jmp	#LR__2300
19328     0F 21 02 F6 | 	mov	local02, local01
1932c     13 1E 46 F7 | 	zerox	local01, #19
19330     14 20 46 F0 | 	shr	local02, #20
19334     02 20 66 F0 | 	shl	local02, #2
19338     ED 20 02 F1 | 	add	local02, __methods__
1933c     10 21 02 FB | 	rdlong	local02, local02
19340     F2 22 02 F6 | 	mov	local03, objptr
19344     0F E5 01 F6 | 	mov	objptr, local01
19348     2D 20 62 FD | 	call	local02
1934c     11 E5 01 F6 | 	mov	objptr, local03
19350                 | LR__2300
19350     A7 F0 03 F6 | 	mov	ptra, fp
19354     B2 00 A0 FD | 	call	#popregs_
19358                 | __system___basic_get_char_ret
19358     2D 00 64 FD | 	ret
1935c                 | 
1935c                 | __system___basic_get
1935c     04 4A 05 F6 | 	mov	COUNT_, #4
19360     A8 00 A0 FD | 	call	#pushregs_
19364     0D 1F 02 F6 | 	mov	local01, arg05
19368     0F 19 02 FD | 	qmul	arg04, local01
1936c     09 21 02 F6 | 	mov	local02, arg01
19370     0B 23 02 F6 | 	mov	local03, arg03
19374     00 14 0E F2 | 	cmp	arg02, #0 wz
19378     01 14 86 51 |  if_ne	sub	arg02, #1
1937c     10 13 02 56 |  if_ne	mov	arg01, local02
19380     00 16 06 56 |  if_ne	mov	arg03, #0
19384     18 24 62 FD | 	getqx	local04
19388     38 40 B0 5D |  if_ne	call	#__system__lseek
1938c     11 15 02 F6 | 	mov	arg02, local03
19390     12 17 02 F6 | 	mov	arg03, local04
19394     10 13 02 F6 | 	mov	arg01, local02
19398     B0 3F B0 FD | 	call	#__system__read
1939c     FD 24 02 F6 | 	mov	local04, result1
193a0     01 24 56 F2 | 	cmps	local04, #1 wc
193a4     10 00 90 CD |  if_b	jmp	#LR__2310
193a8     12 61 02 F6 | 	mov	muldiva_, local04
193ac     0F 63 02 F6 | 	mov	muldivb_, local01
193b0     BA 00 A0 FD | 	call	#divide_
193b4     31 25 02 F6 | 	mov	local04, muldivb_
193b8                 | LR__2310
193b8     12 FB 01 F6 | 	mov	result1, local04
193bc     A7 F0 03 F6 | 	mov	ptra, fp
193c0     B2 00 A0 FD | 	call	#popregs_
193c4                 | __system___basic_get_ret
193c4     2D 00 64 FD | 	ret
193c8                 | 
193c8                 | __system___fmtchar
193c8     00 4A 05 F6 | 	mov	COUNT_, #0
193cc     A8 00 A0 FD | 	call	#pushregs_
193d0     10 F0 07 F1 | 	add	ptra, #16
193d4     04 4E 05 F1 | 	add	fp, #4
193d8     A7 12 62 FC | 	wrlong	arg01, fp
193dc     04 4E 05 F1 | 	add	fp, #4
193e0     A7 14 62 FC | 	wrlong	arg02, fp
193e4     04 4E 05 F1 | 	add	fp, #4
193e8     A7 16 62 FC | 	wrlong	arg03, fp
193ec     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
193f0     A7 16 62 FC | 	wrlong	arg03, fp
193f4     08 4E 85 F1 | 	sub	fp, #8
193f8     A7 12 02 FB | 	rdlong	arg01, fp
193fc     04 4E 05 F1 | 	add	fp, #4
19400     A7 14 02 FB | 	rdlong	arg02, fp
19404     04 4E 05 F1 | 	add	fp, #4
19408     A7 16 02 F6 | 	mov	arg03, fp
1940c     0C 4E 85 F1 | 	sub	fp, #12
19410     0C 00 B0 FD | 	call	#__system___fmtstr
19414     A7 F0 03 F6 | 	mov	ptra, fp
19418     B2 00 A0 FD | 	call	#popregs_
1941c                 | __system___fmtchar_ret
1941c     2D 00 64 FD | 	ret
19420                 | 
19420                 | __system___fmtstr
19420     09 4A 05 F6 | 	mov	COUNT_, #9
19424     A8 00 A0 FD | 	call	#pushregs_
19428     09 1F 02 F6 | 	mov	local01, arg01
1942c     0A 21 02 F6 | 	mov	local02, arg02
19430     0B 23 02 F6 | 	mov	local03, arg03
19434     10 19 E2 F8 | 	getbyte	arg04, local02, #0
19438     11 13 02 F6 | 	mov	arg01, local03
1943c     09 25 02 F6 | 	mov	local04, arg01
19440     97 06 48 FB | 	callpa	#(@LR__2321-@LR__2320)>>2,fcache_load_ptr_
19444                 | LR__2320
19444     12 FB C9 FA | 	rdbyte	result1, local04 wz
19448     01 24 06 51 |  if_ne	add	local04, #1
1944c     F4 FF 9F 5D |  if_ne	jmp	#LR__2320
19450                 | LR__2321
19450     09 25 82 F1 | 	sub	local04, arg01
19454     00 18 0E F2 | 	cmp	arg04, #0 wz
19458     0C 25 7A 53 |  if_ne	fles	local04, arg04 wcz
1945c     10 15 02 F6 | 	mov	arg02, local02
19460     12 17 02 F6 | 	mov	arg03, local04
19464     0F 13 02 F6 | 	mov	arg01, local01
19468     02 18 06 F6 | 	mov	arg04, #2
1946c     00 45 B0 FD | 	call	#__system___fmtpad
19470     FD 26 02 F6 | 	mov	local05, result1
19474     00 26 56 F2 | 	cmps	local05, #0 wc
19478     13 FB 01 C6 |  if_b	mov	result1, local05
1947c     80 00 90 CD |  if_b	jmp	#LR__2324
19480     01 24 56 F2 | 	cmps	local04, #1 wc
19484     50 00 90 CD |  if_b	jmp	#LR__2323
19488     12 29 02 F6 | 	mov	local06, local04
1948c                 | LR__2322
1948c     0F 2B 02 F6 | 	mov	local07, local01
19490     0F 2D 02 F6 | 	mov	local08, local01
19494     13 2A 46 F7 | 	zerox	local07, #19
19498     14 2C 46 F0 | 	shr	local08, #20
1949c     02 2C 66 F0 | 	shl	local08, #2
194a0     ED 2C 02 F1 | 	add	local08, __methods__
194a4     16 2D 02 FB | 	rdlong	local08, local08
194a8     11 13 C2 FA | 	rdbyte	arg01, local03
194ac     F2 2E 02 F6 | 	mov	local09, objptr
194b0     15 E5 01 F6 | 	mov	objptr, local07
194b4     01 22 06 F1 | 	add	local03, #1
194b8     2D 2C 62 FD | 	call	local08
194bc     17 E5 01 F6 | 	mov	objptr, local09
194c0     FD 2E 02 F6 | 	mov	local09, result1
194c4     00 2E 56 F2 | 	cmps	local09, #0 wc
194c8     17 FB 01 C6 |  if_b	mov	result1, local09
194cc     30 00 90 CD |  if_b	jmp	#LR__2324
194d0     17 27 02 F1 | 	add	local05, local09
194d4     ED 29 6E FB | 	djnz	local06, #LR__2322
194d8                 | LR__2323
194d8     10 15 02 F6 | 	mov	arg02, local02
194dc     12 17 02 F6 | 	mov	arg03, local04
194e0     0F 13 02 F6 | 	mov	arg01, local01
194e4     01 18 06 F6 | 	mov	arg04, #1
194e8     84 44 B0 FD | 	call	#__system___fmtpad
194ec     FD 2E 02 F6 | 	mov	local09, result1
194f0     00 2E 56 F2 | 	cmps	local09, #0 wc
194f4     17 FB 01 C6 |  if_b	mov	result1, local09
194f8     17 27 02 31 |  if_ae	add	local05, local09
194fc     13 FB 01 36 |  if_ae	mov	result1, local05
19500                 | LR__2324
19500     A7 F0 03 F6 | 	mov	ptra, fp
19504     B2 00 A0 FD | 	call	#popregs_
19508                 | __system___fmtstr_ret
19508     2D 00 64 FD | 	ret
1950c                 | 
1950c                 | __system___fmtnum
1950c     0B 4A 05 F6 | 	mov	COUNT_, #11
19510     A8 00 A0 FD | 	call	#pushregs_
19514     09 1F 02 F6 | 	mov	local01, arg01
19518     0A 21 02 F6 | 	mov	local02, arg02
1951c     0B 23 02 F6 | 	mov	local03, arg03
19520     0C 25 02 F6 | 	mov	local04, arg04
19524     F8 27 02 F6 | 	mov	local05, ptra
19528     13 29 02 F6 | 	mov	local06, local05
1952c     00 2A 06 F6 | 	mov	local07, #0
19530     10 2D 02 F6 | 	mov	local08, local02
19534     10 2C 46 F0 | 	shr	local08, #16
19538     3F 2C 06 F5 | 	and	local08, #63
1953c     10 2F E2 F8 | 	getbyte	local09, local02, #0
19540     10 31 02 F6 | 	mov	local10, local02
19544     1A 30 46 F0 | 	shr	local10, #26
19548     03 30 06 F5 | 	and	local10, #3
1954c     18 33 02 F6 | 	mov	local11, local10
19550     01 2C 56 F2 | 	cmps	local08, #1 wc
19554     44 F0 07 F1 | 	add	ptra, #68
19558     01 2C 86 31 |  if_ae	sub	local08, #1
1955c     41 2E 56 F2 | 	cmps	local09, #65 wc
19560     00 2E 0E C2 |  if_b	cmp	local09, #0 wz
19564     40 2E 06 B6 |  if_nc_or_z	mov	local09, #64
19568     03 32 0E F2 | 	cmp	local11, #3 wz
1956c     00 32 06 A6 |  if_e	mov	local11, #0
19570     00 22 56 52 |  if_ne	cmps	local03, #0 wc
19574     04 32 06 46 |  if_c_and_nz	mov	local11, #4
19578     11 23 62 46 |  if_c_and_nz	neg	local03, local03
1957c     00 32 0E F2 | 	cmp	local11, #0 wz
19580     4C 00 90 AD |  if_e	jmp	#LR__2333
19584     01 2A 06 F6 | 	mov	local07, #1
19588     17 2D 0A F2 | 	cmp	local08, local09 wz
1958c     18 00 90 5D |  if_ne	jmp	#LR__2331
19590     05 2C 6E FB | 	djnz	local08, #LR__2330
19594     0F 13 02 F6 | 	mov	arg01, local01
19598     10 15 02 F6 | 	mov	arg02, local02
1959c     23 16 06 F6 | 	mov	arg03, #35
195a0     24 FE BF FD | 	call	#__system___fmtchar
195a4     88 00 90 FD | 	jmp	#LR__2337
195a8                 | LR__2330
195a8                 | LR__2331
195a8     02 32 0E F2 | 	cmp	local11, #2 wz
195ac     14 31 02 A6 |  if_e	mov	local10, local06
195b0     01 28 06 A1 |  if_e	add	local06, #1
195b4     18 41 48 AC |  if_e	wrbyte	#32, local10
195b8     14 00 90 AD |  if_e	jmp	#LR__2332
195bc     04 32 0E F2 | 	cmp	local11, #4 wz
195c0     14 5B 48 AC |  if_e	wrbyte	#45, local06
195c4     01 28 06 A1 |  if_e	add	local06, #1
195c8     14 57 48 5C |  if_ne	wrbyte	#43, local06
195cc     01 28 06 51 |  if_ne	add	local06, #1
195d0                 | LR__2332
195d0                 | LR__2333
195d0     14 13 02 F6 | 	mov	arg01, local06
195d4     11 15 02 F6 | 	mov	arg02, local03
195d8     12 17 02 F6 | 	mov	arg03, local04
195dc     16 19 02 F6 | 	mov	arg04, local08
195e0     00 1A 06 F6 | 	mov	arg05, #0
195e4     1D 20 2E F4 | 	testbn	local02, #29 wz
195e8     01 1A 06 56 |  if_ne	mov	arg05, #1
195ec     48 44 B0 FD | 	call	#__system___uitoa
195f0     FD 2A 02 F1 | 	add	local07, result1
195f4     17 2B 5A F2 | 	cmps	local07, local09 wcz
195f8     24 00 90 ED |  if_be	jmp	#LR__2336
195fc     97 0E 48 FB | 	callpa	#(@LR__2335-@LR__2334)>>2,fcache_load_ptr_
19600                 | LR__2334
19600     17 31 02 F6 | 	mov	local10, local09
19604     01 30 56 F2 | 	cmps	local10, #1 wc
19608     01 2E 86 F1 | 	sub	local09, #1
1960c     14 31 02 36 |  if_ae	mov	local10, local06
19610     01 28 06 31 |  if_ae	add	local06, #1
19614     18 47 48 3C |  if_ae	wrbyte	#35, local10
19618     E4 FF 9F 3D |  if_ae	jmp	#LR__2334
1961c                 | LR__2335
1961c     14 01 48 FC | 	wrbyte	#0, local06
19620                 | LR__2336
19620     0F 13 02 F6 | 	mov	arg01, local01
19624     10 15 02 F6 | 	mov	arg02, local02
19628     13 17 02 F6 | 	mov	arg03, local05
1962c     F0 FD BF FD | 	call	#__system___fmtstr
19630                 | LR__2337
19630     A7 F0 03 F6 | 	mov	ptra, fp
19634     B2 00 A0 FD | 	call	#popregs_
19638                 | __system___fmtnum_ret
19638     2D 00 64 FD | 	ret
1963c                 | 
1963c                 | __system___fmtfloat
1963c     10 4A 05 F6 | 	mov	COUNT_, #16
19640     A8 00 A0 FD | 	call	#pushregs_
19644     24 F1 07 F1 | 	add	ptra, #292
19648     04 4E 05 F1 | 	add	fp, #4
1964c     A7 12 62 FC | 	wrlong	arg01, fp
19650     04 4E 05 F1 | 	add	fp, #4
19654     A7 14 62 FC | 	wrlong	arg02, fp
19658     04 4E 05 F1 | 	add	fp, #4
1965c     A7 16 62 FC | 	wrlong	arg03, fp
19660     04 4E 05 F1 | 	add	fp, #4
19664     A7 18 62 FC | 	wrlong	arg04, fp
19668     0C 4E 05 F1 | 	add	fp, #12
1966c     A7 14 68 FC | 	wrlong	#10, fp
19670     08 4E 05 F1 | 	add	fp, #8
19674     A7 00 68 FC | 	wrlong	#0, fp
19678     08 4E 05 F1 | 	add	fp, #8
1967c     A7 00 68 FC | 	wrlong	#0, fp
19680     08 4E 05 F1 | 	add	fp, #8
19684     A7 00 68 FC | 	wrlong	#0, fp
19688     04 4E 05 F1 | 	add	fp, #4
1968c     A7 04 68 FC | 	wrlong	#2, fp
19690     04 4E 05 F1 | 	add	fp, #4
19694     A7 00 68 FC | 	wrlong	#0, fp
19698     04 4E 05 F1 | 	add	fp, #4
1969c     A7 00 68 FC | 	wrlong	#0, fp
196a0     04 4E 05 F1 | 	add	fp, #4
196a4     A7 00 68 FC | 	wrlong	#0, fp
196a8     04 4E 05 F1 | 	add	fp, #4
196ac     A7 00 68 FC | 	wrlong	#0, fp
196b0     18 4E 05 F1 | 	add	fp, #24
196b4     A7 00 68 FC | 	wrlong	#0, fp
196b8     68 4E 05 F1 | 	add	fp, #104
196bc     A7 1E 02 F6 | 	mov	local01, fp
196c0     08 4E 85 F1 | 	sub	fp, #8
196c4     A7 1E 62 FC | 	wrlong	local01, fp
196c8     04 4E 05 F1 | 	add	fp, #4
196cc     A7 1E 62 FC | 	wrlong	local01, fp
196d0     BC 4E 85 F1 | 	sub	fp, #188
196d4     A7 1E 02 FB | 	rdlong	local01, fp
196d8     10 1E 46 F0 | 	shr	local01, #16
196dc     3F 1E 06 F5 | 	and	local01, #63
196e0     B0 4E 05 F1 | 	add	fp, #176
196e4     A7 1E 62 FC | 	wrlong	local01, fp
196e8     B0 4E 85 F1 | 	sub	fp, #176
196ec     A7 1E 02 FB | 	rdlong	local01, fp
196f0     1C 1E 46 F0 | 	shr	local01, #28
196f4     01 1E 06 F5 | 	and	local01, #1
196f8     08 4F 05 F1 | 	add	fp, #264
196fc     A7 1E 62 FC | 	wrlong	local01, fp
19700     58 4E 85 F1 | 	sub	fp, #88
19704     A7 1E 0A FB | 	rdlong	local01, fp wz
19708     B8 4E 85 F1 | 	sub	fp, #184
1970c     3C 00 90 5D |  if_ne	jmp	#LR__2341
19710     10 4E 05 F1 | 	add	fp, #16
19714     A7 1E 02 FB | 	rdlong	local01, fp
19718     10 4E 85 F1 | 	sub	fp, #16
1971c     61 1E 0E F2 | 	cmp	local01, #97 wz
19720     18 00 90 5D |  if_ne	jmp	#LR__2340
19724     B8 4E 05 F1 | 	add	fp, #184
19728     A7 1A 68 FC | 	wrlong	#13, fp
1972c     84 4E 85 F1 | 	sub	fp, #132
19730     A7 02 68 FC | 	wrlong	#1, fp
19734     34 4E 85 F1 | 	sub	fp, #52
19738     24 00 90 FD | 	jmp	#LR__2342
1973c                 | LR__2340
1973c     B8 4E 05 F1 | 	add	fp, #184
19740     A7 0C 68 FC | 	wrlong	#6, fp
19744     B8 4E 85 F1 | 	sub	fp, #184
19748     14 00 90 FD | 	jmp	#LR__2342
1974c                 | LR__2341
1974c     B8 4E 05 F1 | 	add	fp, #184
19750     A7 1E 02 FB | 	rdlong	local01, fp
19754     01 1E 86 F1 | 	sub	local01, #1
19758     A7 1E 62 FC | 	wrlong	local01, fp
1975c     B8 4E 85 F1 | 	sub	fp, #184
19760                 | LR__2342
19760     08 4E 05 F1 | 	add	fp, #8
19764     A7 1E 02 FB | 	rdlong	local01, fp
19768     16 1E 46 F0 | 	shr	local01, #22
1976c     03 1E 06 F5 | 	and	local01, #3
19770     04 4F 05 F1 | 	add	fp, #260
19774     A7 1E 62 FC | 	wrlong	local01, fp
19778     04 4F 85 F1 | 	sub	fp, #260
1977c     A7 1E 02 FB | 	rdlong	local01, fp
19780     1D 1E 46 F0 | 	shr	local01, #29
19784     01 1E 06 F5 | 	and	local01, #1
19788     B4 4E 05 F1 | 	add	fp, #180
1978c     A7 1E 62 FC | 	wrlong	local01, fp
19790     B4 4E 85 F1 | 	sub	fp, #180
19794     A7 1E 02 FB | 	rdlong	local01, fp
19798     0F 1F EA F8 | 	getbyte	local01, local01, #1
1979c     60 4E 05 F1 | 	add	fp, #96
197a0     A7 1E 62 FC | 	wrlong	local01, fp
197a4     60 4E 85 F1 | 	sub	fp, #96
197a8     A7 1E 02 FB | 	rdlong	local01, fp
197ac     0F 1F E2 F8 | 	getbyte	local01, local01, #0
197b0     64 4E 05 F1 | 	add	fp, #100
197b4     A7 1E 62 FC | 	wrlong	local01, fp
197b8     00 1E 06 F6 | 	mov	local01, #0
197bc     5C 4E 85 F1 | 	sub	fp, #92
197c0     A7 1A 02 FB | 	rdlong	arg05, fp
197c4     65 1A 0E F2 | 	cmp	arg05, #101 wz
197c8     01 1E 06 A6 |  if_e	mov	local01, #1
197cc     14 4E 05 F1 | 	add	fp, #20
197d0     A7 1E 62 FC | 	wrlong	local01, fp
197d4     98 4E 05 F1 | 	add	fp, #152
197d8     A7 20 0A FB | 	rdlong	local02, fp wz
197dc     45 1E 06 56 |  if_ne	mov	local01, #69
197e0     65 1E 06 A6 |  if_e	mov	local01, #101
197e4     8C 4E 85 F1 | 	sub	fp, #140
197e8     A7 1E 62 FC | 	wrlong	local01, fp
197ec     20 4E 85 F1 | 	sub	fp, #32
197f0     A7 1E 02 FB | 	rdlong	local01, fp
197f4     10 4E 85 F1 | 	sub	fp, #16
197f8     61 1E 0E F2 | 	cmp	local01, #97 wz
197fc     4C 00 90 5D |  if_ne	jmp	#LR__2343
19800     24 4E 05 F1 | 	add	fp, #36
19804     A7 02 68 FC | 	wrlong	#1, fp
19808     98 4E 05 F1 | 	add	fp, #152
1980c     A7 20 0A FB | 	rdlong	local02, fp wz
19810     50 1E 06 56 |  if_ne	mov	local01, #80
19814     70 1E 06 A6 |  if_e	mov	local01, #112
19818     8C 4E 85 F1 | 	sub	fp, #140
1981c     A7 1E 62 FC | 	wrlong	local01, fp
19820     14 4E 85 F1 | 	sub	fp, #20
19824     A7 04 68 FC | 	wrlong	#2, fp
19828     1C 4E 05 F1 | 	add	fp, #28
1982c     A7 02 68 FC | 	wrlong	#1, fp
19830     84 4E 05 F1 | 	add	fp, #132
19834     A7 20 0A FB | 	rdlong	local02, fp wz
19838     58 1E 06 56 |  if_ne	mov	local01, #88
1983c     78 1E 06 A6 |  if_e	mov	local01, #120
19840     7C 4E 85 F1 | 	sub	fp, #124
19844     A7 1E 62 FC | 	wrlong	local01, fp
19848     40 4E 85 F1 | 	sub	fp, #64
1984c                 | LR__2343
1984c     10 4E 05 F1 | 	add	fp, #16
19850     A7 1E 02 FB | 	rdlong	local01, fp
19854     10 4E 85 F1 | 	sub	fp, #16
19858     23 1E 0E F2 | 	cmp	local01, #35 wz
1985c     3C 00 90 5D |  if_ne	jmp	#LR__2346
19860     48 4E 05 F1 | 	add	fp, #72
19864     A7 02 68 FC | 	wrlong	#1, fp
19868     C8 4E 05 F1 | 	add	fp, #200
1986c     A7 1E 0A FB | 	rdlong	local01, fp wz
19870     10 4F 85 F1 | 	sub	fp, #272
19874     18 00 90 AD |  if_e	jmp	#LR__2344
19878     10 4E 05 F1 | 	add	fp, #16
1987c     A7 CC 68 FC | 	wrlong	#102, fp
19880     00 4F 05 F1 | 	add	fp, #256
19884     A7 00 68 FC | 	wrlong	#0, fp
19888     10 4F 85 F1 | 	sub	fp, #272
1988c     0C 00 90 FD | 	jmp	#LR__2345
19890                 | LR__2344
19890     10 4F 05 F1 | 	add	fp, #272
19894     A7 02 68 FC | 	wrlong	#1, fp
19898     10 4F 85 F1 | 	sub	fp, #272
1989c                 | LR__2345
1989c                 | LR__2346
1989c     08 4E 05 F1 | 	add	fp, #8
198a0     A7 1E 02 FB | 	rdlong	local01, fp
198a4     1A 1E 46 F0 | 	shr	local01, #26
198a8     03 1E 06 F5 | 	and	local01, #3
198ac     5C 4E 05 F1 | 	add	fp, #92
198b0     A7 1E 62 FC | 	wrlong	local01, fp
198b4     58 4E 85 F1 | 	sub	fp, #88
198b8     A7 FA 01 FB | 	rdlong	result1, fp
198bc     0C 4E 85 F1 | 	sub	fp, #12
198c0     1F FA 4D F0 | 	shr	result1, #31 wz
198c4     20 00 90 AD |  if_e	jmp	#LR__2347
198c8     2C 4E 05 F1 | 	add	fp, #44
198cc     A7 5A 68 FC | 	wrlong	#45, fp
198d0     20 4E 85 F1 | 	sub	fp, #32
198d4     A7 FA 01 FB | 	rdlong	result1, fp
198d8     1F FA E5 F4 | 	bitnot	result1, #31
198dc     A7 FA 61 FC | 	wrlong	result1, fp
198e0     0C 4E 85 F1 | 	sub	fp, #12
198e4     3C 00 90 FD | 	jmp	#LR__2349
198e8                 | LR__2347
198e8     64 4E 05 F1 | 	add	fp, #100
198ec     A7 1E 02 FB | 	rdlong	local01, fp
198f0     64 4E 85 F1 | 	sub	fp, #100
198f4     01 1E 0E F2 | 	cmp	local01, #1 wz
198f8     2C 4E 05 A1 |  if_e	add	fp, #44
198fc     A7 56 68 AC |  if_e	wrlong	#43, fp
19900     2C 4E 85 A1 |  if_e	sub	fp, #44
19904     1C 00 90 AD |  if_e	jmp	#LR__2348
19908     64 4E 05 F1 | 	add	fp, #100
1990c     A7 1E 02 FB | 	rdlong	local01, fp
19910     64 4E 85 F1 | 	sub	fp, #100
19914     02 1E 0E F2 | 	cmp	local01, #2 wz
19918     2C 4E 05 A1 |  if_e	add	fp, #44
1991c     A7 40 68 AC |  if_e	wrlong	#32, fp
19920     2C 4E 85 A1 |  if_e	sub	fp, #44
19924                 | LR__2348
19924                 | LR__2349
19924     08 4E 05 F1 | 	add	fp, #8
19928     A7 1E 02 FB | 	rdlong	local01, fp
1992c     18 1E 46 F0 | 	shr	local01, #24
19930     03 1E 06 F5 | 	and	local01, #3
19934     3C 4E 05 F1 | 	add	fp, #60
19938     A7 1E 62 FC | 	wrlong	local01, fp
1993c     00 1E 06 F6 | 	mov	local01, #0
19940     18 4E 85 F1 | 	sub	fp, #24
19944     A7 22 0A FB | 	rdlong	local03, fp wz
19948     2C 4E 85 F1 | 	sub	fp, #44
1994c     18 00 90 5D |  if_ne	jmp	#LR__2350
19950     1C 4E 05 F1 | 	add	fp, #28
19954     A7 24 02 FB | 	rdlong	local04, fp
19958     1C 4E 85 F1 | 	sub	fp, #28
1995c     12 27 02 F6 | 	mov	local05, local04
19960     0A 26 0E F2 | 	cmp	local05, #10 wz
19964     04 00 90 AD |  if_e	jmp	#LR__2351
19968                 | LR__2350
19968     01 1E 66 F5 | 	xor	local01, #1
1996c                 | LR__2351
1996c     3C 4E 05 F1 | 	add	fp, #60
19970     A7 1E 62 FC | 	wrlong	local01, fp
19974     3C 4E 85 F1 | 	sub	fp, #60
19978     00 1E 0E F2 | 	cmp	local01, #0 wz
1997c     0C 01 90 AD |  if_e	jmp	#LR__2353
19980     44 4E 05 F1 | 	add	fp, #68
19984     A7 26 02 FB | 	rdlong	local05, fp
19988     44 4E 85 F1 | 	sub	fp, #68
1998c     13 23 02 F6 | 	mov	local03, local05
19990     02 22 0E F2 | 	cmp	local03, #2 wz
19994     F4 00 90 5D |  if_ne	jmp	#LR__2353
19998     0C 4F 05 F1 | 	add	fp, #268
1999c     A7 28 02 FB | 	rdlong	local06, fp
199a0     0C 4F 85 F1 | 	sub	fp, #268
199a4     14 25 02 F6 | 	mov	local04, local06
199a8     02 24 0E F2 | 	cmp	local04, #2 wz
199ac     DC 00 90 AD |  if_e	jmp	#LR__2353
199b0     C0 4E 05 F1 | 	add	fp, #192
199b4     A7 12 02 FB | 	rdlong	arg01, fp
199b8     94 4E 85 F1 | 	sub	fp, #148
199bc     A7 14 02 FB | 	rdlong	arg02, fp
199c0     14 4E 05 F1 | 	add	fp, #20
199c4     A7 16 02 FB | 	rdlong	arg03, fp
199c8     40 4E 85 F1 | 	sub	fp, #64
199cc     D0 42 B0 FD | 	call	#__system__emitsign_0376
199d0     14 4F 05 F1 | 	add	fp, #276
199d4     A7 FA 61 FC | 	wrlong	result1, fp
199d8     14 4F 85 F1 | 	sub	fp, #276
199dc     00 FA 55 F2 | 	cmps	result1, #0 wc
199e0     14 4F 05 C1 |  if_b	add	fp, #276
199e4     A7 FA 01 CB |  if_b	rdlong	result1, fp
199e8     14 4F 85 C1 |  if_b	sub	fp, #276
199ec     6C 0B 90 CD |  if_b	jmp	#LR__2403
199f0     C0 4E 05 F1 | 	add	fp, #192
199f4     A7 1E 02 FB | 	rdlong	local01, fp
199f8     54 4E 05 F1 | 	add	fp, #84
199fc     A7 26 02 FB | 	rdlong	local05, fp
19a00     13 23 02 F6 | 	mov	local03, local05
19a04     13 1F 02 F1 | 	add	local01, local05
19a08     54 4E 85 F1 | 	sub	fp, #84
19a0c     A7 1E 62 FC | 	wrlong	local01, fp
19a10     58 4E 85 F1 | 	sub	fp, #88
19a14     A7 1E 0A FB | 	rdlong	local01, fp wz
19a18     68 4E 85 F1 | 	sub	fp, #104
19a1c     60 00 90 AD |  if_e	jmp	#LR__2352
19a20     68 4E 05 F1 | 	add	fp, #104
19a24     A7 1E 02 FB | 	rdlong	local01, fp
19a28     AC 4E 05 F1 | 	add	fp, #172
19a2c     A7 22 02 FB | 	rdlong	local03, fp
19a30     11 1F 82 F1 | 	sub	local01, local03
19a34     AC 4E 85 F1 | 	sub	fp, #172
19a38     A7 1E 62 FC | 	wrlong	local01, fp
19a3c     68 4E 85 F1 | 	sub	fp, #104
19a40     00 1E 56 F2 | 	cmps	local01, #0 wc
19a44     68 4E 05 C1 |  if_b	add	fp, #104
19a48     A7 00 68 CC |  if_b	wrlong	#0, fp
19a4c     68 4E 85 C1 |  if_b	sub	fp, #104
19a50     08 4E 05 F1 | 	add	fp, #8
19a54     A7 1E 02 FB | 	rdlong	local01, fp
19a58     E8 1E 06 F4 | 	bitl	local01, #232
19a5c     A7 1E 62 FC | 	wrlong	local01, fp
19a60     60 4E 05 F1 | 	add	fp, #96
19a64     A7 26 02 FB | 	rdlong	local05, fp
19a68     13 23 02 F6 | 	mov	local03, local05
19a6c     08 22 66 F0 | 	shl	local03, #8
19a70     11 1F 42 F5 | 	or	local01, local03
19a74     60 4E 85 F1 | 	sub	fp, #96
19a78     A7 1E 62 FC | 	wrlong	local01, fp
19a7c     08 4E 85 F1 | 	sub	fp, #8
19a80                 | LR__2352
19a80     3C 4E 05 F1 | 	add	fp, #60
19a84     A7 00 68 FC | 	wrlong	#0, fp
19a88     3C 4E 85 F1 | 	sub	fp, #60
19a8c                 | LR__2353
19a8c     0C 4E 05 F1 | 	add	fp, #12
19a90     A7 12 02 FB | 	rdlong	arg01, fp
19a94     0C 4E 85 F1 | 	sub	fp, #12
19a98     A4 1D B0 FD | 	call	#__system____builtin_ilogb
19a9c     FF FF 3F FF 
19aa0     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
19aa4     50 00 90 5D |  if_ne	jmp	#LR__2355
19aa8     2C 4E 05 F1 | 	add	fp, #44
19aac     A7 1E 0A FB | 	rdlong	local01, fp wz
19ab0     2C 4E 85 F1 | 	sub	fp, #44
19ab4     24 00 90 AD |  if_e	jmp	#LR__2354
19ab8     C0 4E 05 F1 | 	add	fp, #192
19abc     A7 20 02 FB | 	rdlong	local02, fp
19ac0     10 23 02 F6 | 	mov	local03, local02
19ac4     01 22 06 F1 | 	add	local03, #1
19ac8     A7 22 62 FC | 	wrlong	local03, fp
19acc     94 4E 85 F1 | 	sub	fp, #148
19ad0     A7 24 02 FB | 	rdlong	local04, fp
19ad4     2C 4E 85 F1 | 	sub	fp, #44
19ad8     10 25 42 FC | 	wrbyte	local04, local02
19adc                 | LR__2354
19adc     C0 4E 05 F1 | 	add	fp, #192
19ae0     A7 12 02 FB | 	rdlong	arg01, fp
19ae4     C0 4E 85 F1 | 	sub	fp, #192
19ae8     3C 01 00 FF 
19aec     82 14 06 F6 | 	mov	arg02, ##@LR__4261
19af0     1C EA BF FD | 	call	#__system____builtin_strcpy
19af4     A4 08 90 FD | 	jmp	#LR__2391
19af8                 | LR__2355
19af8     0C 4E 05 F1 | 	add	fp, #12
19afc     A7 20 02 FB | 	rdlong	local02, fp
19b00     0C 4E 85 F1 | 	sub	fp, #12
19b04     10 13 02 F6 | 	mov	arg01, local02
19b08     34 1D B0 FD | 	call	#__system____builtin_ilogb
19b0c     00 00 40 FF 
19b10     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
19b14     50 00 90 5D |  if_ne	jmp	#LR__2357
19b18     2C 4E 05 F1 | 	add	fp, #44
19b1c     A7 1E 0A FB | 	rdlong	local01, fp wz
19b20     2C 4E 85 F1 | 	sub	fp, #44
19b24     24 00 90 AD |  if_e	jmp	#LR__2356
19b28     C0 4E 05 F1 | 	add	fp, #192
19b2c     A7 20 02 FB | 	rdlong	local02, fp
19b30     10 23 02 F6 | 	mov	local03, local02
19b34     01 22 06 F1 | 	add	local03, #1
19b38     A7 22 62 FC | 	wrlong	local03, fp
19b3c     94 4E 85 F1 | 	sub	fp, #148
19b40     A7 24 02 FB | 	rdlong	local04, fp
19b44     2C 4E 85 F1 | 	sub	fp, #44
19b48     10 25 42 FC | 	wrbyte	local04, local02
19b4c                 | LR__2356
19b4c     C0 4E 05 F1 | 	add	fp, #192
19b50     A7 12 02 FB | 	rdlong	arg01, fp
19b54     C0 4E 85 F1 | 	sub	fp, #192
19b58     3C 01 00 FF 
19b5c     86 14 06 F6 | 	mov	arg02, ##@LR__4262
19b60     AC E9 BF FD | 	call	#__system____builtin_strcpy
19b64     34 08 90 FD | 	jmp	#LR__2391
19b68                 | LR__2357
19b68     10 4E 05 F1 | 	add	fp, #16
19b6c     A7 1E 02 FB | 	rdlong	local01, fp
19b70     10 4E 85 F1 | 	sub	fp, #16
19b74     67 1E 0E F2 | 	cmp	local01, #103 wz
19b78     10 4E 05 51 |  if_ne	add	fp, #16
19b7c     A7 22 02 5B |  if_ne	rdlong	local03, fp
19b80     10 4E 85 51 |  if_ne	sub	fp, #16
19b84     23 22 0E 52 |  if_ne	cmp	local03, #35 wz
19b88     94 01 90 5D |  if_ne	jmp	#LR__2362
19b8c     0C 4E 05 F1 | 	add	fp, #12
19b90     A7 12 02 FB | 	rdlong	arg01, fp
19b94     08 4E 05 F1 | 	add	fp, #8
19b98     A7 14 02 F6 | 	mov	arg02, fp
19b9c     0C 4E 05 F1 | 	add	fp, #12
19ba0     A7 16 02 F6 | 	mov	arg03, fp
19ba4     98 4E 05 F1 | 	add	fp, #152
19ba8     A7 18 02 FB | 	rdlong	arg04, fp
19bac     9C 4E 85 F1 | 	sub	fp, #156
19bb0     A7 1A 02 FB | 	rdlong	arg05, fp
19bb4     1C 4E 85 F1 | 	sub	fp, #28
19bb8     F0 3E B0 FD | 	call	#__system__disassemble_0374
19bbc     10 4E 05 F1 | 	add	fp, #16
19bc0     A7 1E 02 FB | 	rdlong	local01, fp
19bc4     10 4E 85 F1 | 	sub	fp, #16
19bc8     23 1E 0E F2 | 	cmp	local01, #35 wz
19bcc     A0 00 90 5D |  if_ne	jmp	#LR__2359
19bd0     20 4E 05 F1 | 	add	fp, #32
19bd4     A7 1E 02 FB | 	rdlong	local01, fp
19bd8     98 4E 05 F1 | 	add	fp, #152
19bdc     A7 22 02 FB | 	rdlong	local03, fp
19be0     B8 4E 85 F1 | 	sub	fp, #184
19be4     11 1F 5A F2 | 	cmps	local01, local03 wcz
19be8     24 4E 05 11 |  if_a	add	fp, #36
19bec     A7 02 68 1C |  if_a	wrlong	#1, fp
19bf0     24 4E 85 11 |  if_a	sub	fp, #36
19bf4     A4 01 90 1D |  if_a	jmp	#LR__2365
19bf8     20 4E 05 F1 | 	add	fp, #32
19bfc     A7 1E 02 FB | 	rdlong	local01, fp
19c00     20 4E 85 F1 | 	sub	fp, #32
19c04     00 1E 56 F2 | 	cmps	local01, #0 wc
19c08     2C 00 90 3D |  if_ae	jmp	#LR__2358
19c0c     B8 4E 05 F1 | 	add	fp, #184
19c10     A7 1E 02 FB | 	rdlong	local01, fp
19c14     0F 1F 62 F6 | 	neg	local01, local01
19c18     98 4E 85 F1 | 	sub	fp, #152
19c1c     A7 22 02 FB | 	rdlong	local03, fp
19c20     20 4E 85 F1 | 	sub	fp, #32
19c24     0F 23 5A F2 | 	cmps	local03, local01 wcz
19c28     24 4E 05 E1 |  if_be	add	fp, #36
19c2c     A7 02 68 EC |  if_be	wrlong	#1, fp
19c30     24 4E 85 E1 |  if_be	sub	fp, #36
19c34     64 01 90 FD | 	jmp	#LR__2365
19c38                 | LR__2358
19c38     20 4E 05 F1 | 	add	fp, #32
19c3c     A7 1E 02 FB | 	rdlong	local01, fp
19c40     20 4E 85 F1 | 	sub	fp, #32
19c44     01 1E 56 F2 | 	cmps	local01, #1 wc
19c48     50 01 90 CD |  if_b	jmp	#LR__2365
19c4c     B8 4E 05 F1 | 	add	fp, #184
19c50     A7 1E 02 FB | 	rdlong	local01, fp
19c54     98 4E 85 F1 | 	sub	fp, #152
19c58     A7 22 02 FB | 	rdlong	local03, fp
19c5c     11 1F 82 F1 | 	sub	local01, local03
19c60     98 4E 05 F1 | 	add	fp, #152
19c64     A7 1E 62 FC | 	wrlong	local01, fp
19c68     B8 4E 85 F1 | 	sub	fp, #184
19c6c     2C 01 90 FD | 	jmp	#LR__2365
19c70                 | LR__2359
19c70     00 1E 06 F6 | 	mov	local01, #0
19c74     08 4E 05 F1 | 	add	fp, #8
19c78     A7 20 02 FB | 	rdlong	local02, fp
19c7c     1C 20 46 F0 | 	shr	local02, #28
19c80     01 20 0E F5 | 	and	local02, #1 wz
19c84     01 1E 06 A6 |  if_e	mov	local01, #1
19c88     2C 4E 05 F1 | 	add	fp, #44
19c8c     A7 1E 62 FC | 	wrlong	local01, fp
19c90     14 4E 85 F1 | 	sub	fp, #20
19c94     A7 1E 02 FB | 	rdlong	local01, fp
19c98     98 4E 05 F1 | 	add	fp, #152
19c9c     A7 22 02 FB | 	rdlong	local03, fp
19ca0     B8 4E 85 F1 | 	sub	fp, #184
19ca4     11 1F 52 F2 | 	cmps	local01, local03 wc
19ca8     18 00 90 3D |  if_ae	jmp	#LR__2360
19cac     20 4E 05 F1 | 	add	fp, #32
19cb0     A7 24 02 FB | 	rdlong	local04, fp
19cb4     20 4E 85 F1 | 	sub	fp, #32
19cb8     FF FF 7F FF 
19cbc     FC 25 56 F2 | 	cmps	local04, ##-4 wc
19cc0     10 00 90 3D |  if_ae	jmp	#LR__2361
19cc4                 | LR__2360
19cc4     24 4E 05 F1 | 	add	fp, #36
19cc8     A7 02 68 FC | 	wrlong	#1, fp
19ccc     24 4E 85 F1 | 	sub	fp, #36
19cd0     C8 00 90 FD | 	jmp	#LR__2365
19cd4                 | LR__2361
19cd4     B8 4E 05 F1 | 	add	fp, #184
19cd8     A7 24 02 FB | 	rdlong	local04, fp
19cdc     98 4E 85 F1 | 	sub	fp, #152
19ce0     A7 22 02 FB | 	rdlong	local03, fp
19ce4     11 25 82 F1 | 	sub	local04, local03
19ce8     98 4E 05 F1 | 	add	fp, #152
19cec     A7 24 62 FC | 	wrlong	local04, fp
19cf0     AC 4E 85 F1 | 	sub	fp, #172
19cf4     A7 12 02 FB | 	rdlong	arg01, fp
19cf8     08 4E 05 F1 | 	add	fp, #8
19cfc     A7 14 02 F6 | 	mov	arg02, fp
19d00     0C 4E 05 F1 | 	add	fp, #12
19d04     A7 16 02 F6 | 	mov	arg03, fp
19d08     12 19 62 F6 | 	neg	arg04, local04
19d0c     04 4E 85 F1 | 	sub	fp, #4
19d10     A7 1A 02 FB | 	rdlong	arg05, fp
19d14     1C 4E 85 F1 | 	sub	fp, #28
19d18     90 3D B0 FD | 	call	#__system__disassemble_0374
19d1c     7C 00 90 FD | 	jmp	#LR__2365
19d20                 | LR__2362
19d20     24 4E 05 F1 | 	add	fp, #36
19d24     A7 1E 0A FB | 	rdlong	local01, fp wz
19d28     24 4E 85 F1 | 	sub	fp, #36
19d2c     34 00 90 AD |  if_e	jmp	#LR__2363
19d30     0C 4E 05 F1 | 	add	fp, #12
19d34     A7 12 02 FB | 	rdlong	arg01, fp
19d38     08 4E 05 F1 | 	add	fp, #8
19d3c     A7 14 02 F6 | 	mov	arg02, fp
19d40     0C 4E 05 F1 | 	add	fp, #12
19d44     A7 16 02 F6 | 	mov	arg03, fp
19d48     98 4E 05 F1 | 	add	fp, #152
19d4c     A7 18 02 FB | 	rdlong	arg04, fp
19d50     9C 4E 85 F1 | 	sub	fp, #156
19d54     A7 1A 02 FB | 	rdlong	arg05, fp
19d58     1C 4E 85 F1 | 	sub	fp, #28
19d5c     4C 3D B0 FD | 	call	#__system__disassemble_0374
19d60     38 00 90 FD | 	jmp	#LR__2364
19d64                 | LR__2363
19d64     0C 4E 05 F1 | 	add	fp, #12
19d68     A7 12 02 FB | 	rdlong	arg01, fp
19d6c     08 4E 05 F1 | 	add	fp, #8
19d70     A7 14 02 F6 | 	mov	arg02, fp
19d74     0C 4E 05 F1 | 	add	fp, #12
19d78     A7 16 02 F6 | 	mov	arg03, fp
19d7c     98 4E 05 F1 | 	add	fp, #152
19d80     A7 24 02 FB | 	rdlong	local04, fp
19d84     01 24 06 F1 | 	add	local04, #1
19d88     12 19 62 F6 | 	neg	arg04, local04
19d8c     9C 4E 85 F1 | 	sub	fp, #156
19d90     A7 1A 02 FB | 	rdlong	arg05, fp
19d94     1C 4E 85 F1 | 	sub	fp, #28
19d98     10 3D B0 FD | 	call	#__system__disassemble_0374
19d9c                 | LR__2364
19d9c                 | LR__2365
19d9c     1C 4E 05 F1 | 	add	fp, #28
19da0     A7 1E 02 FB | 	rdlong	local01, fp
19da4     1C 4E 85 F1 | 	sub	fp, #28
19da8     02 1E 0E F2 | 	cmp	local01, #2 wz
19dac     4C 00 90 5D |  if_ne	jmp	#LR__2368
19db0     1C 4E 05 F1 | 	add	fp, #28
19db4     A7 20 68 FC | 	wrlong	#16, fp
19db8     1C 4E 85 F1 | 	sub	fp, #28
19dbc                 | LR__2366
19dbc     14 4E 05 F1 | 	add	fp, #20
19dc0     A7 1E 0A FB | 	rdlong	local01, fp wz
19dc4     14 4E 85 F1 | 	sub	fp, #20
19dc8     30 00 90 AD |  if_e	jmp	#LR__2367
19dcc     14 4E 05 F1 | 	add	fp, #20
19dd0     A7 22 02 FB | 	rdlong	local03, fp
19dd4     14 4E 85 F1 | 	sub	fp, #20
19dd8     00 80 00 FF 
19ddc     00 22 16 F2 | 	cmp	local03, ##16777216 wc
19de0     18 00 90 3D |  if_ae	jmp	#LR__2367
19de4     14 4E 05 F1 | 	add	fp, #20
19de8     A7 1E 02 FB | 	rdlong	local01, fp
19dec     01 1E 66 F0 | 	shl	local01, #1
19df0     A7 1E 62 FC | 	wrlong	local01, fp
19df4     14 4E 85 F1 | 	sub	fp, #20
19df8     C0 FF 9F FD | 	jmp	#LR__2366
19dfc                 | LR__2367
19dfc                 | LR__2368
19dfc     70 4E 05 F1 | 	add	fp, #112
19e00     A7 12 02 F6 | 	mov	arg01, fp
19e04     5C 4E 85 F1 | 	sub	fp, #92
19e08     A7 14 02 FB | 	rdlong	arg02, fp
19e0c     08 4E 05 F1 | 	add	fp, #8
19e10     A7 16 02 FB | 	rdlong	arg03, fp
19e14     A0 4E 05 F1 | 	add	fp, #160
19e18     A7 1A 02 FB | 	rdlong	arg05, fp
19e1c     BC 4E 85 F1 | 	sub	fp, #188
19e20     01 18 06 F6 | 	mov	arg04, #1
19e24     10 3C B0 FD | 	call	#__system___uitoa
19e28     58 4E 05 F1 | 	add	fp, #88
19e2c     A7 FA 61 FC | 	wrlong	result1, fp
19e30     38 4E 85 F1 | 	sub	fp, #56
19e34     A7 1E 02 FB | 	rdlong	local01, fp
19e38     20 4E 85 F1 | 	sub	fp, #32
19e3c     00 1E 56 F2 | 	cmps	local01, #0 wc
19e40     50 00 90 3D |  if_ae	jmp	#LR__2369
19e44     60 4E 05 F1 | 	add	fp, #96
19e48     A7 5A 68 FC | 	wrlong	#45, fp
19e4c     50 4E 05 F1 | 	add	fp, #80
19e50     A7 12 02 F6 | 	mov	arg01, fp
19e54     90 4E 85 F1 | 	sub	fp, #144
19e58     A7 22 02 FB | 	rdlong	local03, fp
19e5c     11 15 62 F6 | 	neg	arg02, local03
19e60     18 4E 05 F1 | 	add	fp, #24
19e64     A7 18 02 FB | 	rdlong	arg04, fp
19e68     84 4E 05 F1 | 	add	fp, #132
19e6c     A7 28 02 FB | 	rdlong	local06, fp
19e70     BC 4E 85 F1 | 	sub	fp, #188
19e74     14 25 02 F6 | 	mov	local04, local06
19e78     0A 16 06 F6 | 	mov	arg03, #10
19e7c     12 1B 02 F6 | 	mov	arg05, local04
19e80     B4 3B B0 FD | 	call	#__system___uitoa
19e84     5C 4E 05 F1 | 	add	fp, #92
19e88     A7 FA 61 FC | 	wrlong	result1, fp
19e8c     5C 4E 85 F1 | 	sub	fp, #92
19e90     48 00 90 FD | 	jmp	#LR__2370
19e94                 | LR__2369
19e94     60 4E 05 F1 | 	add	fp, #96
19e98     A7 56 68 FC | 	wrlong	#43, fp
19e9c     50 4E 05 F1 | 	add	fp, #80
19ea0     A7 12 02 F6 | 	mov	arg01, fp
19ea4     90 4E 85 F1 | 	sub	fp, #144
19ea8     A7 14 02 FB | 	rdlong	arg02, fp
19eac     18 4E 05 F1 | 	add	fp, #24
19eb0     A7 18 02 FB | 	rdlong	arg04, fp
19eb4     84 4E 05 F1 | 	add	fp, #132
19eb8     A7 28 02 FB | 	rdlong	local06, fp
19ebc     BC 4E 85 F1 | 	sub	fp, #188
19ec0     14 25 02 F6 | 	mov	local04, local06
19ec4     0A 16 06 F6 | 	mov	arg03, #10
19ec8     12 1B 02 F6 | 	mov	arg05, local04
19ecc     68 3B B0 FD | 	call	#__system___uitoa
19ed0     5C 4E 05 F1 | 	add	fp, #92
19ed4     A7 FA 61 FC | 	wrlong	result1, fp
19ed8     5C 4E 85 F1 | 	sub	fp, #92
19edc                 | LR__2370
19edc     24 4E 05 F1 | 	add	fp, #36
19ee0     A7 1E 0A FB | 	rdlong	local01, fp wz
19ee4     24 4E 85 F1 | 	sub	fp, #36
19ee8     2C 00 90 AD |  if_e	jmp	#LR__2371
19eec     50 4E 05 F1 | 	add	fp, #80
19ef0     A7 00 68 FC | 	wrlong	#0, fp
19ef4     04 4E 85 F1 | 	sub	fp, #4
19ef8     A7 00 68 FC | 	wrlong	#0, fp
19efc     6C 4E 05 F1 | 	add	fp, #108
19f00     A7 1E 02 FB | 	rdlong	local01, fp
19f04     01 1E 06 F1 | 	add	local01, #1
19f08     64 4E 85 F1 | 	sub	fp, #100
19f0c     A7 1E 62 FC | 	wrlong	local01, fp
19f10     54 4E 85 F1 | 	sub	fp, #84
19f14     88 00 90 FD | 	jmp	#LR__2374
19f18                 | LR__2371
19f18     20 4E 05 F1 | 	add	fp, #32
19f1c     A7 1E 02 FB | 	rdlong	local01, fp
19f20     20 4E 85 F1 | 	sub	fp, #32
19f24     00 1E 56 F2 | 	cmps	local01, #0 wc
19f28     40 00 90 3D |  if_ae	jmp	#LR__2372
19f2c     20 4E 05 F1 | 	add	fp, #32
19f30     A7 20 02 FB | 	rdlong	local02, fp
19f34     30 4E 05 F1 | 	add	fp, #48
19f38     A7 20 62 FC | 	wrlong	local02, fp
19f3c     04 4E 85 F1 | 	sub	fp, #4
19f40     A7 20 62 FC | 	wrlong	local02, fp
19f44     2C 4E 85 F1 | 	sub	fp, #44
19f48     A7 1E 02 FB | 	rdlong	local01, fp
19f4c     98 4E 05 F1 | 	add	fp, #152
19f50     A7 22 02 FB | 	rdlong	local03, fp
19f54     11 1F 02 F1 | 	add	local01, local03
19f58     01 1E 06 F1 | 	add	local01, #1
19f5c     64 4E 85 F1 | 	sub	fp, #100
19f60     A7 1E 62 FC | 	wrlong	local01, fp
19f64     54 4E 85 F1 | 	sub	fp, #84
19f68     34 00 90 FD | 	jmp	#LR__2373
19f6c                 | LR__2372
19f6c     4C 4E 05 F1 | 	add	fp, #76
19f70     A7 00 68 FC | 	wrlong	#0, fp
19f74     2C 4E 85 F1 | 	sub	fp, #44
19f78     A7 1E 02 FB | 	rdlong	local01, fp
19f7c     30 4E 05 F1 | 	add	fp, #48
19f80     A7 1E 62 FC | 	wrlong	local01, fp
19f84     68 4E 05 F1 | 	add	fp, #104
19f88     A7 22 02 FB | 	rdlong	local03, fp
19f8c     11 1F 02 F1 | 	add	local01, local03
19f90     01 1E 06 F1 | 	add	local01, #1
19f94     64 4E 85 F1 | 	sub	fp, #100
19f98     A7 1E 62 FC | 	wrlong	local01, fp
19f9c     54 4E 85 F1 | 	sub	fp, #84
19fa0                 | LR__2373
19fa0                 | LR__2374
19fa0     54 4E 05 F1 | 	add	fp, #84
19fa4     A7 1E 02 FB | 	rdlong	local01, fp
19fa8     08 4E 85 F1 | 	sub	fp, #8
19fac     A7 22 02 FB | 	rdlong	local03, fp
19fb0     11 1F 82 F1 | 	sub	local01, local03
19fb4     01 1E 06 F1 | 	add	local01, #1
19fb8     24 4E 85 F1 | 	sub	fp, #36
19fbc     A7 1E 62 FC | 	wrlong	local01, fp
19fc0     04 4E 05 F1 | 	add	fp, #4
19fc4     A7 1E 0A FB | 	rdlong	local01, fp wz
19fc8     2C 4E 85 F1 | 	sub	fp, #44
19fcc     28 4E 05 51 |  if_ne	add	fp, #40
19fd0     A7 22 02 5B |  if_ne	rdlong	local03, fp
19fd4     01 22 06 51 |  if_ne	add	local03, #1
19fd8     A7 22 62 5C |  if_ne	wrlong	local03, fp
19fdc     28 4E 85 51 |  if_ne	sub	fp, #40
19fe0     1C 4E 05 F1 | 	add	fp, #28
19fe4     A7 1E 02 FB | 	rdlong	local01, fp
19fe8     1C 4E 85 F1 | 	sub	fp, #28
19fec     10 1E 0E F2 | 	cmp	local01, #16 wz
19ff0     28 4E 05 A1 |  if_e	add	fp, #40
19ff4     A7 1E 02 AB |  if_e	rdlong	local01, fp
19ff8     02 1E 06 A1 |  if_e	add	local01, #2
19ffc     A7 1E 62 AC |  if_e	wrlong	local01, fp
1a000     28 4E 85 A1 |  if_e	sub	fp, #40
1a004     24 4E 05 F1 | 	add	fp, #36
1a008     A7 1E 0A FB | 	rdlong	local01, fp wz
1a00c     24 4E 85 F1 | 	sub	fp, #36
1a010     28 00 90 AD |  if_e	jmp	#LR__2375
1a014     28 4E 05 F1 | 	add	fp, #40
1a018     A7 1E 02 FB | 	rdlong	local01, fp
1a01c     02 22 06 F6 | 	mov	local03, #2
1a020     34 4E 05 F1 | 	add	fp, #52
1a024     A7 26 02 FB | 	rdlong	local05, fp
1a028     13 23 02 F1 | 	add	local03, local05
1a02c     11 1F 02 F1 | 	add	local01, local03
1a030     34 4E 85 F1 | 	sub	fp, #52
1a034     A7 1E 62 FC | 	wrlong	local01, fp
1a038     28 4E 85 F1 | 	sub	fp, #40
1a03c                 | LR__2375
1a03c     28 4E 05 F1 | 	add	fp, #40
1a040     A7 1E 02 FB | 	rdlong	local01, fp
1a044     28 4E 85 F1 | 	sub	fp, #40
1a048     41 1E 56 F2 | 	cmps	local01, #65 wc
1a04c     01 FA 65 36 |  if_ae	neg	result1, #1
1a050     08 05 90 3D |  if_ae	jmp	#LR__2403
1a054     3C 4E 05 F1 | 	add	fp, #60
1a058     A7 1E 0A FB | 	rdlong	local01, fp wz
1a05c     3C 4E 85 F1 | 	sub	fp, #60
1a060     60 00 90 AD |  if_e	jmp	#LR__2376
1a064     C0 4E 05 F1 | 	add	fp, #192
1a068     A7 12 02 FB | 	rdlong	arg01, fp
1a06c     94 4E 85 F1 | 	sub	fp, #148
1a070     A7 14 02 FB | 	rdlong	arg02, fp
1a074     14 4E 05 F1 | 	add	fp, #20
1a078     A7 16 02 FB | 	rdlong	arg03, fp
1a07c     40 4E 85 F1 | 	sub	fp, #64
1a080     1C 3C B0 FD | 	call	#__system__emitsign_0376
1a084     18 4F 05 F1 | 	add	fp, #280
1a088     A7 FA 61 FC | 	wrlong	result1, fp
1a08c     18 4F 85 F1 | 	sub	fp, #280
1a090     00 FA 55 F2 | 	cmps	result1, #0 wc
1a094     18 4F 05 C1 |  if_b	add	fp, #280
1a098     A7 FA 01 CB |  if_b	rdlong	result1, fp
1a09c     18 4F 85 C1 |  if_b	sub	fp, #280
1a0a0     B8 04 90 CD |  if_b	jmp	#LR__2403
1a0a4     C0 4E 05 F1 | 	add	fp, #192
1a0a8     A7 1E 02 FB | 	rdlong	local01, fp
1a0ac     58 4E 05 F1 | 	add	fp, #88
1a0b0     A7 22 02 FB | 	rdlong	local03, fp
1a0b4     11 1F 02 F1 | 	add	local01, local03
1a0b8     58 4E 85 F1 | 	sub	fp, #88
1a0bc     A7 1E 62 FC | 	wrlong	local01, fp
1a0c0     C0 4E 85 F1 | 	sub	fp, #192
1a0c4                 | LR__2376
1a0c4     4C 4E 05 F1 | 	add	fp, #76
1a0c8     A7 1E 02 FB | 	rdlong	local01, fp
1a0cc     34 4E 85 F1 | 	sub	fp, #52
1a0d0     A7 1E 62 FC | 	wrlong	local01, fp
1a0d4     18 4E 85 F1 | 	sub	fp, #24
1a0d8     97 9E 48 FB | 	callpa	#(@LR__2382-@LR__2377)>>2,fcache_load_ptr_
1a0dc                 | LR__2377
1a0dc     18 4E 05 F1 | 	add	fp, #24
1a0e0     A7 20 02 FB | 	rdlong	local02, fp
1a0e4     3C 4E 05 F1 | 	add	fp, #60
1a0e8     A7 26 02 FB | 	rdlong	local05, fp
1a0ec     54 4E 85 F1 | 	sub	fp, #84
1a0f0     13 21 52 F2 | 	cmps	local02, local05 wc
1a0f4     20 01 90 3D |  if_ae	jmp	#LR__2383
1a0f8     18 4E 05 F1 | 	add	fp, #24
1a0fc     A7 28 02 FB | 	rdlong	local06, fp
1a100     18 4E 85 F1 | 	sub	fp, #24
1a104     00 28 56 F2 | 	cmps	local06, #0 wc
1a108     58 00 90 CD |  if_b	jmp	#LR__2378
1a10c     18 4E 05 F1 | 	add	fp, #24
1a110     A7 28 02 FB | 	rdlong	local06, fp
1a114     40 4E 05 F1 | 	add	fp, #64
1a118     A7 2A 02 FB | 	rdlong	local07, fp
1a11c     58 4E 85 F1 | 	sub	fp, #88
1a120     15 29 52 F2 | 	cmps	local06, local07 wc
1a124     3C 00 90 3D |  if_ae	jmp	#LR__2378
1a128     C0 4E 05 F1 | 	add	fp, #192
1a12c     A7 2C 02 FB | 	rdlong	local08, fp
1a130     16 2B 02 F6 | 	mov	local07, local08
1a134     01 2A 06 F1 | 	add	local07, #1
1a138     A7 2A 62 FC | 	wrlong	local07, fp
1a13c     A8 4E 85 F1 | 	sub	fp, #168
1a140     A7 2A 02 FB | 	rdlong	local07, fp
1a144     15 2F 02 F6 | 	mov	local09, local07
1a148     58 4E 05 F1 | 	add	fp, #88
1a14c     A7 30 02 F6 | 	mov	local10, fp
1a150     A7 2E 02 F1 | 	add	local09, fp
1a154     17 33 C2 FA | 	rdbyte	local11, local09
1a158     16 33 42 FC | 	wrbyte	local11, local08
1a15c     70 4E 85 F1 | 	sub	fp, #112
1a160     20 00 90 FD | 	jmp	#LR__2379
1a164                 | LR__2378
1a164     C0 4E 05 F1 | 	add	fp, #192
1a168     A7 2C 02 FB | 	rdlong	local08, fp
1a16c     16 2F 02 F6 | 	mov	local09, local08
1a170     01 2E 06 F1 | 	add	local09, #1
1a174     A7 2E 62 FC | 	wrlong	local09, fp
1a178     C0 4E 85 F1 | 	sub	fp, #192
1a17c     30 2E 06 F6 | 	mov	local09, #48
1a180     16 61 48 FC | 	wrbyte	#48, local08
1a184                 | LR__2379
1a184     18 4E 05 F1 | 	add	fp, #24
1a188     A7 28 02 FB | 	rdlong	local06, fp
1a18c     38 4E 05 F1 | 	add	fp, #56
1a190     A7 34 02 FB | 	rdlong	local12, fp
1a194     50 4E 85 F1 | 	sub	fp, #80
1a198     1A 29 0A F2 | 	cmp	local06, local12 wz
1a19c     5C 00 90 5D |  if_ne	jmp	#LR__2381
1a1a0     10 4F 05 F1 | 	add	fp, #272
1a1a4     A7 2A 02 FB | 	rdlong	local07, fp
1a1a8     10 4F 85 F1 | 	sub	fp, #272
1a1ac     15 2F 0A F6 | 	mov	local09, local07 wz
1a1b0     28 00 90 5D |  if_ne	jmp	#LR__2380
1a1b4     54 4E 05 F1 | 	add	fp, #84
1a1b8     A7 32 02 FB | 	rdlong	local11, fp
1a1bc     19 31 02 F6 | 	mov	local10, local11
1a1c0     01 30 86 F1 | 	sub	local10, #1
1a1c4     3C 4E 85 F1 | 	sub	fp, #60
1a1c8     A7 36 02 FB | 	rdlong	local13, fp
1a1cc     18 4E 85 F1 | 	sub	fp, #24
1a1d0     1B 39 02 F6 | 	mov	local14, local13
1a1d4     18 39 52 F2 | 	cmps	local14, local10 wc
1a1d8     20 00 90 3D |  if_ae	jmp	#LR__2381
1a1dc                 | LR__2380
1a1dc     C0 4E 05 F1 | 	add	fp, #192
1a1e0     A7 2C 02 FB | 	rdlong	local08, fp
1a1e4     16 35 02 F6 | 	mov	local12, local08
1a1e8     01 34 06 F1 | 	add	local12, #1
1a1ec     A7 34 62 FC | 	wrlong	local12, fp
1a1f0     C0 4E 85 F1 | 	sub	fp, #192
1a1f4     2E 2E 06 F6 | 	mov	local09, #46
1a1f8     16 5D 48 FC | 	wrbyte	#46, local08
1a1fc                 | LR__2381
1a1fc     18 4E 05 F1 | 	add	fp, #24
1a200     A7 3A 02 FB | 	rdlong	local15, fp
1a204     1D 35 02 F6 | 	mov	local12, local15
1a208     01 34 06 F1 | 	add	local12, #1
1a20c     A7 34 62 FC | 	wrlong	local12, fp
1a210     18 4E 85 F1 | 	sub	fp, #24
1a214     C4 FE 9F FD | 	jmp	#LR__2377
1a218                 | LR__2382
1a218                 | LR__2383
1a218     34 4E 05 F1 | 	add	fp, #52
1a21c     A7 1E 0A FB | 	rdlong	local01, fp wz
1a220     34 4E 85 F1 | 	sub	fp, #52
1a224     A0 00 90 AD |  if_e	jmp	#LR__2387
1a228     C0 4E 05 F1 | 	add	fp, #192
1a22c     A7 1E 02 FB | 	rdlong	local01, fp
1a230     01 1E 86 F1 | 	sub	local01, #1
1a234     A7 1E 62 FC | 	wrlong	local01, fp
1a238     C0 4E 85 F1 | 	sub	fp, #192
1a23c     97 26 48 FB | 	callpa	#(@LR__2385-@LR__2384)>>2,fcache_load_ptr_
1a240                 | LR__2384
1a240     C0 4E 05 F1 | 	add	fp, #192
1a244     A7 1E 02 FB | 	rdlong	local01, fp
1a248     04 4E 05 F1 | 	add	fp, #4
1a24c     A7 22 02 FB | 	rdlong	local03, fp
1a250     C4 4E 85 F1 | 	sub	fp, #196
1a254     11 1F 5A F2 | 	cmps	local01, local03 wcz
1a258     30 00 90 ED |  if_be	jmp	#LR__2386
1a25c     C0 4E 05 F1 | 	add	fp, #192
1a260     A7 28 02 FB | 	rdlong	local06, fp
1a264     C0 4E 85 F1 | 	sub	fp, #192
1a268     14 25 C2 FA | 	rdbyte	local04, local06
1a26c     30 24 0E F2 | 	cmp	local04, #48 wz
1a270     18 00 90 5D |  if_ne	jmp	#LR__2386
1a274     C0 4E 05 F1 | 	add	fp, #192
1a278     A7 1E 02 FB | 	rdlong	local01, fp
1a27c     01 1E 86 F1 | 	sub	local01, #1
1a280     A7 1E 62 FC | 	wrlong	local01, fp
1a284     C0 4E 85 F1 | 	sub	fp, #192
1a288     B4 FF 9F FD | 	jmp	#LR__2384
1a28c                 | LR__2385
1a28c                 | LR__2386
1a28c     C0 4E 05 F1 | 	add	fp, #192
1a290     A7 20 02 FB | 	rdlong	local02, fp
1a294     C0 4E 85 F1 | 	sub	fp, #192
1a298     10 1F C2 FA | 	rdbyte	local01, local02
1a29c     2E 1E 0E F2 | 	cmp	local01, #46 wz
1a2a0     C0 4E 05 A1 |  if_e	add	fp, #192
1a2a4     A7 1E 02 AB |  if_e	rdlong	local01, fp
1a2a8     01 1E 86 A1 |  if_e	sub	local01, #1
1a2ac     A7 1E 62 AC |  if_e	wrlong	local01, fp
1a2b0     C0 4E 85 A1 |  if_e	sub	fp, #192
1a2b4     C0 4E 05 F1 | 	add	fp, #192
1a2b8     A7 22 02 FB | 	rdlong	local03, fp
1a2bc     01 22 06 F1 | 	add	local03, #1
1a2c0     A7 22 62 FC | 	wrlong	local03, fp
1a2c4     C0 4E 85 F1 | 	sub	fp, #192
1a2c8                 | LR__2387
1a2c8     24 4E 05 F1 | 	add	fp, #36
1a2cc     A7 1E 0A FB | 	rdlong	local01, fp wz
1a2d0     24 4E 85 F1 | 	sub	fp, #36
1a2d4     B4 00 90 AD |  if_e	jmp	#LR__2390
1a2d8     C0 4E 05 F1 | 	add	fp, #192
1a2dc     A7 20 02 FB | 	rdlong	local02, fp
1a2e0     10 23 02 F6 | 	mov	local03, local02
1a2e4     01 22 06 F1 | 	add	local03, #1
1a2e8     A7 22 62 FC | 	wrlong	local03, fp
1a2ec     90 4E 85 F1 | 	sub	fp, #144
1a2f0     A7 24 02 FB | 	rdlong	local04, fp
1a2f4     10 25 42 FC | 	wrbyte	local04, local02
1a2f8     90 4E 05 F1 | 	add	fp, #144
1a2fc     A7 20 02 FB | 	rdlong	local02, fp
1a300     10 23 02 F6 | 	mov	local03, local02
1a304     01 22 06 F1 | 	add	local03, #1
1a308     A7 22 62 FC | 	wrlong	local03, fp
1a30c     60 4E 85 F1 | 	sub	fp, #96
1a310     A7 24 02 FB | 	rdlong	local04, fp
1a314     10 25 42 FC | 	wrbyte	local04, local02
1a318     48 4E 85 F1 | 	sub	fp, #72
1a31c     A7 00 68 FC | 	wrlong	#0, fp
1a320     18 4E 85 F1 | 	sub	fp, #24
1a324                 | LR__2388
1a324     18 4E 05 F1 | 	add	fp, #24
1a328     A7 20 02 FB | 	rdlong	local02, fp
1a32c     44 4E 05 F1 | 	add	fp, #68
1a330     A7 26 02 FB | 	rdlong	local05, fp
1a334     5C 4E 85 F1 | 	sub	fp, #92
1a338     13 21 52 F2 | 	cmps	local02, local05 wc
1a33c     4C 00 90 3D |  if_ae	jmp	#LR__2389
1a340     C0 4E 05 F1 | 	add	fp, #192
1a344     A7 2C 02 FB | 	rdlong	local08, fp
1a348     16 35 02 F6 | 	mov	local12, local08
1a34c     01 34 06 F1 | 	add	local12, #1
1a350     A7 34 62 FC | 	wrlong	local12, fp
1a354     A8 4E 85 F1 | 	sub	fp, #168
1a358     A7 2A 02 FB | 	rdlong	local07, fp
1a35c     15 2F 02 F6 | 	mov	local09, local07
1a360     98 4E 05 F1 | 	add	fp, #152
1a364     A7 30 02 F6 | 	mov	local10, fp
1a368     A7 2E 02 F1 | 	add	local09, fp
1a36c     17 33 C2 FA | 	rdbyte	local11, local09
1a370     16 33 42 FC | 	wrbyte	local11, local08
1a374     98 4E 85 F1 | 	sub	fp, #152
1a378     A7 34 02 FB | 	rdlong	local12, fp
1a37c     01 34 06 F1 | 	add	local12, #1
1a380     A7 34 62 FC | 	wrlong	local12, fp
1a384     18 4E 85 F1 | 	sub	fp, #24
1a388     98 FF 9F FD | 	jmp	#LR__2388
1a38c                 | LR__2389
1a38c                 | LR__2390
1a38c     C0 4E 05 F1 | 	add	fp, #192
1a390     A7 1E 02 FB | 	rdlong	local01, fp
1a394     C0 4E 85 F1 | 	sub	fp, #192
1a398     0F 01 48 FC | 	wrbyte	#0, local01
1a39c                 | LR__2391
1a39c     6C 4E 05 F1 | 	add	fp, #108
1a3a0     A7 1E 0A FB | 	rdlong	local01, fp wz
1a3a4     6C 4E 85 F1 | 	sub	fp, #108
1a3a8     90 01 90 AD |  if_e	jmp	#LR__2402
1a3ac     48 4E 05 F1 | 	add	fp, #72
1a3b0     A7 22 0A FB | 	rdlong	local03, fp wz
1a3b4     48 4E 85 F1 | 	sub	fp, #72
1a3b8     80 01 90 AD |  if_e	jmp	#LR__2402
1a3bc     C4 4E 05 F1 | 	add	fp, #196
1a3c0     A7 12 02 FB | 	rdlong	arg01, fp
1a3c4     C4 4E 85 F1 | 	sub	fp, #196
1a3c8     09 3D 02 F6 | 	mov	local16, arg01
1a3cc     97 06 48 FB | 	callpa	#(@LR__2393-@LR__2392)>>2,fcache_load_ptr_
1a3d0                 | LR__2392
1a3d0     1E FB C9 FA | 	rdbyte	result1, local16 wz
1a3d4     01 3C 06 51 |  if_ne	add	local16, #1
1a3d8     F4 FF 9F 5D |  if_ne	jmp	#LR__2392
1a3dc                 | LR__2393
1a3dc     09 3D 82 F1 | 	sub	local16, arg01
1a3e0     1E 25 02 F6 | 	mov	local04, local16
1a3e4     6C 4E 05 F1 | 	add	fp, #108
1a3e8     A7 28 02 FB | 	rdlong	local06, fp
1a3ec     6C 4E 85 F1 | 	sub	fp, #108
1a3f0     14 25 5A F2 | 	cmps	local04, local06 wcz
1a3f4     44 01 90 ED |  if_be	jmp	#LR__2402
1a3f8     C4 4E 05 F1 | 	add	fp, #196
1a3fc     A7 1E 02 FB | 	rdlong	local01, fp
1a400     5C 4E 05 F1 | 	add	fp, #92
1a404     A7 1E 62 FC | 	wrlong	local01, fp
1a408     FC 4E 85 F1 | 	sub	fp, #252
1a40c     A7 1E 0A FB | 	rdlong	local01, fp wz
1a410     24 4E 85 F1 | 	sub	fp, #36
1a414     20 00 90 AD |  if_e	jmp	#LR__2394
1a418     B8 4E 05 F1 | 	add	fp, #184
1a41c     A7 00 68 FC | 	wrlong	#0, fp
1a420     4C 4E 85 F1 | 	sub	fp, #76
1a424     A7 1E 02 FB | 	rdlong	local01, fp
1a428     B0 4E 05 F1 | 	add	fp, #176
1a42c     A7 1E 62 FC | 	wrlong	local01, fp
1a430     1C 4F 85 F1 | 	sub	fp, #284
1a434     24 00 90 FD | 	jmp	#LR__2395
1a438                 | LR__2394
1a438     6C 4E 05 F1 | 	add	fp, #108
1a43c     A7 1E 02 FB | 	rdlong	local01, fp
1a440     01 1E 86 F1 | 	sub	local01, #1
1a444     4C 4E 05 F1 | 	add	fp, #76
1a448     A7 22 02 FB | 	rdlong	local03, fp
1a44c     11 1F 82 F1 | 	sub	local01, local03
1a450     64 4E 05 F1 | 	add	fp, #100
1a454     A7 1E 62 FC | 	wrlong	local01, fp
1a458     1C 4F 85 F1 | 	sub	fp, #284
1a45c                 | LR__2395
1a45c     97 20 48 FB | 	callpa	#(@LR__2397-@LR__2396)>>2,fcache_load_ptr_
1a460                 | LR__2396
1a460     1C 4F 05 F1 | 	add	fp, #284
1a464     A7 1E 0A FB | 	rdlong	local01, fp wz
1a468     1C 4F 85 F1 | 	sub	fp, #284
1a46c     30 00 90 AD |  if_e	jmp	#LR__2398
1a470     20 4F 05 F1 | 	add	fp, #288
1a474     A7 20 02 FB | 	rdlong	local02, fp
1a478     10 23 02 F6 | 	mov	local03, local02
1a47c     01 22 06 F1 | 	add	local03, #1
1a480     A7 22 62 FC | 	wrlong	local03, fp
1a484     10 55 48 FC | 	wrbyte	#42, local02
1a488     04 4E 85 F1 | 	sub	fp, #4
1a48c     A7 1E 02 FB | 	rdlong	local01, fp
1a490     01 1E 86 F1 | 	sub	local01, #1
1a494     A7 1E 62 FC | 	wrlong	local01, fp
1a498     1C 4F 85 F1 | 	sub	fp, #284
1a49c     C0 FF 9F FD | 	jmp	#LR__2396
1a4a0                 | LR__2397
1a4a0                 | LR__2398
1a4a0     B8 4E 05 F1 | 	add	fp, #184
1a4a4     A7 1E 0A FB | 	rdlong	local01, fp wz
1a4a8     B8 4E 85 F1 | 	sub	fp, #184
1a4ac     70 00 90 AD |  if_e	jmp	#LR__2401
1a4b0     20 4F 05 F1 | 	add	fp, #288
1a4b4     A7 20 02 FB | 	rdlong	local02, fp
1a4b8     10 23 02 F6 | 	mov	local03, local02
1a4bc     01 22 06 F1 | 	add	local03, #1
1a4c0     A7 22 62 FC | 	wrlong	local03, fp
1a4c4     10 5D 48 FC | 	wrbyte	#46, local02
1a4c8     04 4E 85 F1 | 	sub	fp, #4
1a4cc     A7 00 68 FC | 	wrlong	#0, fp
1a4d0     1C 4F 85 F1 | 	sub	fp, #284
1a4d4                 | LR__2399
1a4d4     1C 4F 05 F1 | 	add	fp, #284
1a4d8     A7 20 02 FB | 	rdlong	local02, fp
1a4dc     64 4E 85 F1 | 	sub	fp, #100
1a4e0     A7 26 02 FB | 	rdlong	local05, fp
1a4e4     B8 4E 85 F1 | 	sub	fp, #184
1a4e8     13 21 52 F2 | 	cmps	local02, local05 wc
1a4ec     30 00 90 3D |  if_ae	jmp	#LR__2400
1a4f0     20 4F 05 F1 | 	add	fp, #288
1a4f4     A7 2C 02 FB | 	rdlong	local08, fp
1a4f8     16 35 02 F6 | 	mov	local12, local08
1a4fc     01 34 06 F1 | 	add	local12, #1
1a500     A7 34 62 FC | 	wrlong	local12, fp
1a504     16 55 48 FC | 	wrbyte	#42, local08
1a508     04 4E 85 F1 | 	sub	fp, #4
1a50c     A7 34 02 FB | 	rdlong	local12, fp
1a510     01 34 06 F1 | 	add	local12, #1
1a514     A7 34 62 FC | 	wrlong	local12, fp
1a518     1C 4F 85 F1 | 	sub	fp, #284
1a51c     B4 FF 9F FD | 	jmp	#LR__2399
1a520                 | LR__2400
1a520                 | LR__2401
1a520     20 4F 05 F1 | 	add	fp, #288
1a524     A7 20 02 FB | 	rdlong	local02, fp
1a528     10 23 02 F6 | 	mov	local03, local02
1a52c     01 22 06 F1 | 	add	local03, #1
1a530     A7 22 62 FC | 	wrlong	local03, fp
1a534     20 4F 85 F1 | 	sub	fp, #288
1a538     10 01 48 FC | 	wrbyte	#0, local02
1a53c                 | LR__2402
1a53c     04 4E 05 F1 | 	add	fp, #4
1a540     A7 12 02 FB | 	rdlong	arg01, fp
1a544     04 4E 05 F1 | 	add	fp, #4
1a548     A7 14 02 FB | 	rdlong	arg02, fp
1a54c     BC 4E 05 F1 | 	add	fp, #188
1a550     A7 16 02 FB | 	rdlong	arg03, fp
1a554     C4 4E 85 F1 | 	sub	fp, #196
1a558     C4 EE BF FD | 	call	#__system___fmtstr
1a55c                 | LR__2403
1a55c     A7 F0 03 F6 | 	mov	ptra, fp
1a560     B2 00 A0 FD | 	call	#popregs_
1a564                 | __system___fmtfloat_ret
1a564     2D 00 64 FD | 	ret
1a568                 | 
1a568                 | __system__Left_S
1a568     04 4A 05 F6 | 	mov	COUNT_, #4
1a56c     A8 00 A0 FD | 	call	#pushregs_
1a570     09 1F 02 F6 | 	mov	local01, arg01
1a574     0A 21 02 F6 | 	mov	local02, arg02
1a578     01 20 56 F2 | 	cmps	local02, #1 wc
1a57c     3C 01 00 CF 
1a580     8A FA 05 C6 |  if_b	mov	result1, ##@LR__4263
1a584     5C 00 90 CD |  if_b	jmp	#LR__2413
1a588     0F 13 02 F6 | 	mov	arg01, local01
1a58c     09 23 02 F6 | 	mov	local03, arg01
1a590     97 06 48 FB | 	callpa	#(@LR__2411-@LR__2410)>>2,fcache_load_ptr_
1a594                 | LR__2410
1a594     11 FB C9 FA | 	rdbyte	result1, local03 wz
1a598     01 22 06 51 |  if_ne	add	local03, #1
1a59c     F4 FF 9F 5D |  if_ne	jmp	#LR__2410
1a5a0                 | LR__2411
1a5a0     09 23 82 F1 | 	sub	local03, arg01
1a5a4     11 FB 01 F6 | 	mov	result1, local03
1a5a8     10 FB 59 F2 | 	cmps	result1, local02 wcz
1a5ac     0F FB 01 E6 |  if_be	mov	result1, local01
1a5b0     30 00 90 ED |  if_be	jmp	#LR__2413
1a5b4     10 13 02 F6 | 	mov	arg01, local02
1a5b8     02 12 06 F1 | 	add	arg01, #2
1a5bc     4C 1C B0 FD | 	call	#__system___gc_alloc_managed
1a5c0     FD 24 0A F6 | 	mov	local04, result1 wz
1a5c4     18 00 90 AD |  if_e	jmp	#LR__2412
1a5c8     12 13 02 F6 | 	mov	arg01, local04
1a5cc     0F 15 02 F6 | 	mov	arg02, local01
1a5d0     10 17 02 F6 | 	mov	arg03, local02
1a5d4     A4 DE BF FD | 	call	#__system____builtin_memmove
1a5d8     12 21 02 F1 | 	add	local02, local04
1a5dc     10 01 48 FC | 	wrbyte	#0, local02
1a5e0                 | LR__2412
1a5e0     12 FB 01 F6 | 	mov	result1, local04
1a5e4                 | LR__2413
1a5e4     A7 F0 03 F6 | 	mov	ptra, fp
1a5e8     B2 00 A0 FD | 	call	#popregs_
1a5ec                 | __system__Left_S_ret
1a5ec     2D 00 64 FD | 	ret
1a5f0                 | 
1a5f0                 | __system__Right_S
1a5f0     05 4A 05 F6 | 	mov	COUNT_, #5
1a5f4     A8 00 A0 FD | 	call	#pushregs_
1a5f8     09 1F 02 F6 | 	mov	local01, arg01
1a5fc     0A 21 02 F6 | 	mov	local02, arg02
1a600     01 20 56 F2 | 	cmps	local02, #1 wc
1a604     3C 01 00 CF 
1a608     8B FA 05 C6 |  if_b	mov	result1, ##@LR__4264
1a60c     64 00 90 CD |  if_b	jmp	#LR__2423
1a610     0F 13 02 F6 | 	mov	arg01, local01
1a614     09 23 02 F6 | 	mov	local03, arg01
1a618     97 06 48 FB | 	callpa	#(@LR__2421-@LR__2420)>>2,fcache_load_ptr_
1a61c                 | LR__2420
1a61c     11 FB C9 FA | 	rdbyte	result1, local03 wz
1a620     01 22 06 51 |  if_ne	add	local03, #1
1a624     F4 FF 9F 5D |  if_ne	jmp	#LR__2420
1a628                 | LR__2421
1a628     09 23 82 F1 | 	sub	local03, arg01
1a62c     11 FB 01 F6 | 	mov	result1, local03
1a630     FD 24 02 F6 | 	mov	local04, result1
1a634     10 25 5A F2 | 	cmps	local04, local02 wcz
1a638     0F FB 01 E6 |  if_be	mov	result1, local01
1a63c     34 00 90 ED |  if_be	jmp	#LR__2423
1a640     10 13 02 F6 | 	mov	arg01, local02
1a644     02 12 06 F1 | 	add	arg01, #2
1a648     C0 1B B0 FD | 	call	#__system___gc_alloc_managed
1a64c     FD 26 0A F6 | 	mov	local05, result1 wz
1a650     1C 00 90 AD |  if_e	jmp	#LR__2422
1a654     10 25 82 F1 | 	sub	local04, local02
1a658     0F 25 02 F1 | 	add	local04, local01
1a65c     01 20 06 F1 | 	add	local02, #1
1a660     13 13 02 F6 | 	mov	arg01, local05
1a664     12 15 02 F6 | 	mov	arg02, local04
1a668     10 17 02 F6 | 	mov	arg03, local02
1a66c     0C DE BF FD | 	call	#__system____builtin_memmove
1a670                 | LR__2422
1a670     13 FB 01 F6 | 	mov	result1, local05
1a674                 | LR__2423
1a674     A7 F0 03 F6 | 	mov	ptra, fp
1a678     B2 00 A0 FD | 	call	#popregs_
1a67c                 | __system__Right_S_ret
1a67c     2D 00 64 FD | 	ret
1a680                 | 
1a680                 | __system__Mid_S
1a680     05 4A 05 F6 | 	mov	COUNT_, #5
1a684     A8 00 A0 FD | 	call	#pushregs_
1a688     09 1F 02 F6 | 	mov	local01, arg01
1a68c     0A 21 02 F6 | 	mov	local02, arg02
1a690     01 16 56 F2 | 	cmps	arg03, #1 wc
1a694     3C 01 00 CF 
1a698     8C FA 05 C6 |  if_b	mov	result1, ##@LR__4265
1a69c     80 00 90 CD |  if_b	jmp	#LR__2433
1a6a0     01 20 86 F1 | 	sub	local02, #1
1a6a4     00 20 56 F3 | 	fges	local02, #0 wc
1a6a8     0F 13 02 F6 | 	mov	arg01, local01
1a6ac     09 23 02 F6 | 	mov	local03, arg01
1a6b0     97 06 48 FB | 	callpa	#(@LR__2431-@LR__2430)>>2,fcache_load_ptr_
1a6b4                 | LR__2430
1a6b4     11 FB C9 FA | 	rdbyte	result1, local03 wz
1a6b8     01 22 06 51 |  if_ne	add	local03, #1
1a6bc     F4 FF 9F 5D |  if_ne	jmp	#LR__2430
1a6c0                 | LR__2431
1a6c0     09 23 82 F1 | 	sub	local03, arg01
1a6c4     11 FB 01 F6 | 	mov	result1, local03
1a6c8     FD 14 02 F6 | 	mov	arg02, result1
1a6cc     10 15 52 F2 | 	cmps	arg02, local02 wc
1a6d0     3C 01 00 CF 
1a6d4     8D FA 05 C6 |  if_b	mov	result1, ##@LR__4266
1a6d8     44 00 90 CD |  if_b	jmp	#LR__2433
1a6dc     0A 25 02 F6 | 	mov	local04, arg02
1a6e0     10 25 82 F1 | 	sub	local04, local02
1a6e4     0B 25 5A F2 | 	cmps	local04, arg03 wcz
1a6e8     0B 25 02 16 |  if_a	mov	local04, arg03
1a6ec     12 13 02 F6 | 	mov	arg01, local04
1a6f0     02 12 06 F1 | 	add	arg01, #2
1a6f4     14 1B B0 FD | 	call	#__system___gc_alloc_managed
1a6f8     FD 26 0A F6 | 	mov	local05, result1 wz
1a6fc     1C 00 90 AD |  if_e	jmp	#LR__2432
1a700     0F 21 02 F1 | 	add	local02, local01
1a704     13 13 02 F6 | 	mov	arg01, local05
1a708     10 15 02 F6 | 	mov	arg02, local02
1a70c     12 17 02 F6 | 	mov	arg03, local04
1a710     68 DD BF FD | 	call	#__system____builtin_memmove
1a714     13 25 02 F1 | 	add	local04, local05
1a718     12 01 48 FC | 	wrbyte	#0, local04
1a71c                 | LR__2432
1a71c     13 FB 01 F6 | 	mov	result1, local05
1a720                 | LR__2433
1a720     A7 F0 03 F6 | 	mov	ptra, fp
1a724     B2 00 A0 FD | 	call	#popregs_
1a728                 | __system__Mid_S_ret
1a728     2D 00 64 FD | 	ret
1a72c                 | 
1a72c                 | __system__Chr_S
1a72c     01 4A 05 F6 | 	mov	COUNT_, #1
1a730     A8 00 A0 FD | 	call	#pushregs_
1a734     09 1F 02 F6 | 	mov	local01, arg01
1a738     03 12 06 F6 | 	mov	arg01, #3
1a73c     CC 1A B0 FD | 	call	#__system___gc_alloc_managed
1a740     00 FA 4D F2 | 	cmps	result1, #0 wz
1a744     FD 1E 42 5C |  if_ne	wrbyte	local01, result1
1a748     01 FA 05 51 |  if_ne	add	result1, #1
1a74c     FD 00 48 5C |  if_ne	wrbyte	#0, result1
1a750     01 FA 85 51 |  if_ne	sub	result1, #1
1a754     A7 F0 03 F6 | 	mov	ptra, fp
1a758     B2 00 A0 FD | 	call	#popregs_
1a75c                 | __system__Chr_S_ret
1a75c     2D 00 64 FD | 	ret
1a760                 | 
1a760                 | __system__Number_S
1a760     08 4A 05 F6 | 	mov	COUNT_, #8
1a764     A8 00 A0 FD | 	call	#pushregs_
1a768     09 1F 02 F6 | 	mov	local01, arg01
1a76c     0A 21 0A F6 | 	mov	local02, arg02 wz
1a770     0B 23 02 F6 | 	mov	local03, arg03
1a774     3C 00 90 5D |  if_ne	jmp	#LR__2442
1a778     01 20 06 F6 | 	mov	local02, #1
1a77c     11 25 02 F6 | 	mov	local04, local03
1a780     01 26 06 F6 | 	mov	local05, #1
1a784     97 16 48 FB | 	callpa	#(@LR__2441-@LR__2440)>>2,fcache_load_ptr_
1a788                 | LR__2440
1a788     00 28 06 F6 | 	mov	local06, #0
1a78c     0F 25 1A F2 | 	cmp	local04, local01 wcz
1a790     01 28 66 E6 |  if_be	neg	local06, #1
1a794     12 27 12 F2 | 	cmp	local05, local04 wc
1a798     15 2B A2 F1 | 	subx	local07, local07
1a79c     15 29 CA F7 | 	test	local06, local07 wz
1a7a0     11 25 02 5D |  if_ne	qmul	local04, local03
1a7a4     12 27 02 56 |  if_ne	mov	local05, local04
1a7a8     01 20 06 51 |  if_ne	add	local02, #1
1a7ac     18 24 62 5D |  if_ne	getqx	local04
1a7b0     D4 FF 9F 5D |  if_ne	jmp	#LR__2440
1a7b4                 | LR__2441
1a7b4                 | LR__2442
1a7b4     20 20 36 F3 | 	fle	local02, #32 wc
1a7b8     10 13 02 F6 | 	mov	arg01, local02
1a7bc     02 12 06 F1 | 	add	arg01, #2
1a7c0     48 1A B0 FD | 	call	#__system___gc_alloc_managed
1a7c4     FD 28 02 F6 | 	mov	local06, result1
1a7c8     10 2B 02 F6 | 	mov	local07, local02
1a7cc     14 2B 02 F1 | 	add	local07, local06
1a7d0     15 01 48 FC | 	wrbyte	#0, local07
1a7d4     97 1A 48 FB | 	callpa	#(@LR__2444-@LR__2443)>>2,fcache_load_ptr_
1a7d8                 | LR__2443
1a7d8     01 20 16 F2 | 	cmp	local02, #1 wc
1a7dc     2C 00 90 CD |  if_b	jmp	#LR__2445
1a7e0     11 1F 12 FD | 	qdiv	local01, local03
1a7e4     01 20 86 F1 | 	sub	local02, #1
1a7e8     10 2B 02 F6 | 	mov	local07, local02
1a7ec     14 2B 02 F1 | 	add	local07, local06
1a7f0     19 2C 62 FD | 	getqy	local08
1a7f4     0A 2C 16 F2 | 	cmp	local08, #10 wc
1a7f8     30 2C 06 C1 |  if_b	add	local08, #48
1a7fc     37 2C 06 31 |  if_ae	add	local08, #55
1a800     15 2D 42 FC | 	wrbyte	local08, local07
1a804     18 1E 62 FD | 	getqx	local01
1a808     CC FF 9F FD | 	jmp	#LR__2443
1a80c                 | LR__2444
1a80c                 | LR__2445
1a80c     14 FB 01 F6 | 	mov	result1, local06
1a810     A7 F0 03 F6 | 	mov	ptra, fp
1a814     B2 00 A0 FD | 	call	#popregs_
1a818                 | __system__Number_S_ret
1a818     2D 00 64 FD | 	ret
1a81c                 | 
1a81c                 | __system__LCase_S
1a81c     07 4A 05 F6 | 	mov	COUNT_, #7
1a820     A8 00 A0 FD | 	call	#pushregs_
1a824     09 1F 02 F6 | 	mov	local01, arg01
1a828     09 21 02 F6 | 	mov	local02, arg01
1a82c     97 06 48 FB | 	callpa	#(@LR__2451-@LR__2450)>>2,fcache_load_ptr_
1a830                 | LR__2450
1a830     10 FB C9 FA | 	rdbyte	result1, local02 wz
1a834     01 20 06 51 |  if_ne	add	local02, #1
1a838     F4 FF 9F 5D |  if_ne	jmp	#LR__2450
1a83c                 | LR__2451
1a83c     09 21 82 F1 | 	sub	local02, arg01
1a840     10 FB 01 F6 | 	mov	result1, local02
1a844     FD 20 0A F6 | 	mov	local02, result1 wz
1a848     3C 01 00 AF 
1a84c     8E FA 05 A6 |  if_e	mov	result1, ##@LR__4267
1a850     7C 00 90 AD |  if_e	jmp	#LR__2457
1a854     10 13 02 F6 | 	mov	arg01, local02
1a858     02 12 06 F1 | 	add	arg01, #2
1a85c     AC 19 B0 FD | 	call	#__system___gc_alloc_managed
1a860     FD 22 0A F6 | 	mov	local03, result1 wz
1a864     64 00 90 AD |  if_e	jmp	#LR__2456
1a868     01 24 66 F6 | 	neg	local04, #1
1a86c     97 26 48 FB | 	callpa	#(@LR__2455-@LR__2452)>>2,fcache_load_ptr_
1a870                 | LR__2452
1a870     01 24 06 F1 | 	add	local04, #1
1a874     12 27 02 F6 | 	mov	local05, local04
1a878     0F 27 02 F1 | 	add	local05, local01
1a87c     13 29 C2 FA | 	rdbyte	local06, local05
1a880     41 28 56 F2 | 	cmps	local06, #65 wc
1a884     18 00 90 CD |  if_b	jmp	#LR__2453
1a888     5B 28 56 F2 | 	cmps	local06, #91 wc
1a88c     12 2B 02 C6 |  if_b	mov	local07, local04
1a890     11 2B 02 C1 |  if_b	add	local07, local03
1a894     20 28 06 C1 |  if_b	add	local06, #32
1a898     15 29 42 CC |  if_b	wrbyte	local06, local07
1a89c     0C 00 90 CD |  if_b	jmp	#LR__2454
1a8a0                 | LR__2453
1a8a0     12 2B 02 F6 | 	mov	local07, local04
1a8a4     11 2B 02 F1 | 	add	local07, local03
1a8a8     15 29 42 FC | 	wrbyte	local06, local07
1a8ac                 | LR__2454
1a8ac     10 29 02 F6 | 	mov	local06, local02
1a8b0     01 28 86 F1 | 	sub	local06, #1
1a8b4     14 25 0A F2 | 	cmp	local04, local06 wz
1a8b8     B4 FF 9F 5D |  if_ne	jmp	#LR__2452
1a8bc                 | LR__2455
1a8bc     11 21 02 F1 | 	add	local02, local03
1a8c0     10 01 48 FC | 	wrbyte	#0, local02
1a8c4     11 FB 01 F6 | 	mov	result1, local03
1a8c8     04 00 90 FD | 	jmp	#LR__2457
1a8cc                 | LR__2456
1a8cc     11 FB 01 F6 | 	mov	result1, local03
1a8d0                 | LR__2457
1a8d0     A7 F0 03 F6 | 	mov	ptra, fp
1a8d4     B2 00 A0 FD | 	call	#popregs_
1a8d8                 | __system__LCase_S_ret
1a8d8     2D 00 64 FD | 	ret
1a8dc                 | 
1a8dc                 | __system__LTrim_S
1a8dc     05 4A 05 F6 | 	mov	COUNT_, #5
1a8e0     A8 00 A0 FD | 	call	#pushregs_
1a8e4     09 1F 02 F6 | 	mov	local01, arg01
1a8e8     09 21 02 F6 | 	mov	local02, arg01
1a8ec     97 06 48 FB | 	callpa	#(@LR__2461-@LR__2460)>>2,fcache_load_ptr_
1a8f0                 | LR__2460
1a8f0     10 FB C9 FA | 	rdbyte	result1, local02 wz
1a8f4     01 20 06 51 |  if_ne	add	local02, #1
1a8f8     F4 FF 9F 5D |  if_ne	jmp	#LR__2460
1a8fc                 | LR__2461
1a8fc     09 21 82 F1 | 	sub	local02, arg01
1a900     10 FB 01 F6 | 	mov	result1, local02
1a904     FD 20 0A F6 | 	mov	local02, result1 wz
1a908     3C 01 00 AF 
1a90c     8F FA 05 A6 |  if_e	mov	result1, ##@LR__4268
1a910     7C 00 90 AD |  if_e	jmp	#LR__2466
1a914     00 22 06 F6 | 	mov	local03, #0
1a918     10 25 02 F6 | 	mov	local04, local02
1a91c                 | LR__2462
1a91c     12 23 52 F2 | 	cmps	local03, local04 wc
1a920     68 00 90 3D |  if_ae	jmp	#LR__2465
1a924     11 17 02 F6 | 	mov	arg03, local03
1a928     0F 17 02 F1 | 	add	arg03, local01
1a92c     0B 17 C2 FA | 	rdbyte	arg03, arg03
1a930     20 16 0E F2 | 	cmp	arg03, #32 wz
1a934     4C 00 90 AD |  if_e	jmp	#LR__2464
1a938     10 13 02 F6 | 	mov	arg01, local02
1a93c     11 13 82 F1 | 	sub	arg01, local03
1a940     02 12 06 F1 | 	add	arg01, #2
1a944     C4 18 B0 FD | 	call	#__system___gc_alloc_managed
1a948     FD 26 0A F6 | 	mov	local05, result1 wz
1a94c     2C 00 90 AD |  if_e	jmp	#LR__2463
1a950     11 15 02 F6 | 	mov	arg02, local03
1a954     0F 15 02 F1 | 	add	arg02, local01
1a958     10 17 02 F6 | 	mov	arg03, local02
1a95c     11 17 82 F1 | 	sub	arg03, local03
1a960     13 13 02 F6 | 	mov	arg01, local05
1a964     14 DB BF FD | 	call	#__system____builtin_memmove
1a968     11 21 82 F1 | 	sub	local02, local03
1a96c     13 21 02 F1 | 	add	local02, local05
1a970     10 01 48 FC | 	wrbyte	#0, local02
1a974     13 FB 01 F6 | 	mov	result1, local05
1a978     14 00 90 FD | 	jmp	#LR__2466
1a97c                 | LR__2463
1a97c     13 FB 01 F6 | 	mov	result1, local05
1a980     0C 00 90 FD | 	jmp	#LR__2466
1a984                 | LR__2464
1a984     01 22 06 F1 | 	add	local03, #1
1a988     90 FF 9F FD | 	jmp	#LR__2462
1a98c                 | LR__2465
1a98c     0F FB 01 F6 | 	mov	result1, local01
1a990                 | LR__2466
1a990     A7 F0 03 F6 | 	mov	ptra, fp
1a994     B2 00 A0 FD | 	call	#popregs_
1a998                 | __system__LTrim_S_ret
1a998     2D 00 64 FD | 	ret
1a99c                 | 
1a99c                 | __system__RTrim_S
1a99c     04 4A 05 F6 | 	mov	COUNT_, #4
1a9a0     A8 00 A0 FD | 	call	#pushregs_
1a9a4     09 1F 02 F6 | 	mov	local01, arg01
1a9a8     09 21 02 F6 | 	mov	local02, arg01
1a9ac     97 06 48 FB | 	callpa	#(@LR__2471-@LR__2470)>>2,fcache_load_ptr_
1a9b0                 | LR__2470
1a9b0     10 FB C9 FA | 	rdbyte	result1, local02 wz
1a9b4     01 20 06 51 |  if_ne	add	local02, #1
1a9b8     F4 FF 9F 5D |  if_ne	jmp	#LR__2470
1a9bc                 | LR__2471
1a9bc     09 21 82 F1 | 	sub	local02, arg01
1a9c0     10 FB 01 F6 | 	mov	result1, local02
1a9c4     FD 20 0A F6 | 	mov	local02, result1 wz
1a9c8     3C 01 00 AF 
1a9cc     90 FA 05 A6 |  if_e	mov	result1, ##@LR__4269
1a9d0     74 00 90 AD |  if_e	jmp	#LR__2475
1a9d4     10 23 02 F6 | 	mov	local03, local02
1a9d8     01 22 86 F1 | 	sub	local03, #1
1a9dc                 | LR__2472
1a9dc     11 15 02 F6 | 	mov	arg02, local03
1a9e0     0F 15 02 F1 | 	add	arg02, local01
1a9e4     0A 21 C2 FA | 	rdbyte	local02, arg02
1a9e8     20 20 0E F2 | 	cmp	local02, #32 wz
1a9ec     44 00 90 AD |  if_e	jmp	#LR__2474
1a9f0     11 13 02 F6 | 	mov	arg01, local03
1a9f4     02 12 06 F1 | 	add	arg01, #2
1a9f8     10 18 B0 FD | 	call	#__system___gc_alloc_managed
1a9fc     FD 24 0A F6 | 	mov	local04, result1 wz
1aa00     28 00 90 AD |  if_e	jmp	#LR__2473
1aa04     11 17 02 F6 | 	mov	arg03, local03
1aa08     01 16 06 F1 | 	add	arg03, #1
1aa0c     12 13 02 F6 | 	mov	arg01, local04
1aa10     0F 15 02 F6 | 	mov	arg02, local01
1aa14     64 DA BF FD | 	call	#__system____builtin_memmove
1aa18     01 22 06 F1 | 	add	local03, #1
1aa1c     12 23 02 F1 | 	add	local03, local04
1aa20     11 01 48 FC | 	wrbyte	#0, local03
1aa24     12 FB 01 F6 | 	mov	result1, local04
1aa28     1C 00 90 FD | 	jmp	#LR__2475
1aa2c                 | LR__2473
1aa2c     12 FB 01 F6 | 	mov	result1, local04
1aa30     14 00 90 FD | 	jmp	#LR__2475
1aa34                 | LR__2474
1aa34     01 22 86 F1 | 	sub	local03, #1
1aa38     00 22 56 F2 | 	cmps	local03, #0 wc
1aa3c     9C FF 9F 3D |  if_ae	jmp	#LR__2472
1aa40     3C 01 00 FF 
1aa44     91 FA 05 F6 | 	mov	result1, ##@LR__4270
1aa48                 | LR__2475
1aa48     A7 F0 03 F6 | 	mov	ptra, fp
1aa4c     B2 00 A0 FD | 	call	#popregs_
1aa50                 | __system__RTrim_S_ret
1aa50     2D 00 64 FD | 	ret
1aa54                 | 
1aa54                 | __system___strerror
1aa54     00 12 56 F2 | 	cmps	arg01, #0 wc
1aa58     08 00 90 CD |  if_b	jmp	#LR__2480
1aa5c     1A 12 56 F2 | 	cmps	arg01, #26 wc
1aa60     04 00 90 CD |  if_b	jmp	#LR__2481
1aa64                 | LR__2480
1aa64     19 12 06 F6 | 	mov	arg01, #25
1aa68                 | LR__2481
1aa68     02 12 66 F0 | 	shl	arg01, #2
1aa6c     01 00 00 FF 
1aa70     D8 E8 05 F1 | 	add	ptr___system__dat__, ##728
1aa74     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
1aa78     09 FB 01 FB | 	rdlong	result1, arg01
1aa7c     01 00 00 FF 
1aa80     D8 E8 85 F1 | 	sub	ptr___system__dat__, ##728
1aa84                 | __system___strerror_ret
1aa84     2D 00 64 FD | 	ret
1aa88                 | 
1aa88                 | __system___int64_shl
1aa88     20 16 CE F7 | 	test	arg03, #32 wz
1aa8c     09 15 02 56 |  if_ne	mov	arg02, arg01
1aa90     00 12 06 56 |  if_ne	mov	arg01, #0
1aa94     1F 16 CE F7 | 	test	arg03, #31 wz
1aa98     18 00 90 AD |  if_e	jmp	#LR__2490
1aa9c     0B 15 62 F0 | 	shl	arg02, arg03
1aaa0     09 FB 01 F6 | 	mov	result1, arg01
1aaa4     0B FD 61 F6 | 	neg	result2, arg03
1aaa8     FE FA 41 F0 | 	shr	result1, result2
1aaac     FD 14 42 F5 | 	or	arg02, result1
1aab0     0B 13 62 F0 | 	shl	arg01, arg03
1aab4                 | LR__2490
1aab4     0A FD 01 F6 | 	mov	result2, arg02
1aab8     09 FB 01 F6 | 	mov	result1, arg01
1aabc                 | __system___int64_shl_ret
1aabc     2D 00 64 FD | 	ret
1aac0                 | 
1aac0                 | __system___usepins
1aac0     14 E8 05 F1 | 	add	ptr___system__dat__, #20
1aac4     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1aac8     14 E8 85 F1 | 	sub	ptr___system__dat__, #20
1aacc     00 13 CA F7 | 	test	arg01, _var01 wz
1aad0     18 E8 05 A1 |  if_e	add	ptr___system__dat__, #24
1aad4     F4 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
1aad8     18 E8 85 A1 |  if_e	sub	ptr___system__dat__, #24
1aadc     01 15 CA A7 |  if_e	test	arg02, _var02 wz
1aae0     00 FA 05 56 |  if_ne	mov	result1, #0
1aae4     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
1aae8     14 E8 05 F1 | 	add	ptr___system__dat__, #20
1aaec     F4 02 02 FB | 	rdlong	_var02, ptr___system__dat__
1aaf0     09 03 42 F5 | 	or	_var02, arg01
1aaf4     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
1aaf8     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1aafc     F4 02 02 FB | 	rdlong	_var02, ptr___system__dat__
1ab00     0A 03 42 F5 | 	or	_var02, arg02
1ab04     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
1ab08     18 E8 85 F1 | 	sub	ptr___system__dat__, #24
1ab0c     01 FA 65 F6 | 	neg	result1, #1
1ab10                 | __system___usepins_ret
1ab10     2D 00 64 FD | 	ret
1ab14                 | 
1ab14                 | __system___freepins
1ab14     14 E8 05 F1 | 	add	ptr___system__dat__, #20
1ab18     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1ab1c     09 01 22 F5 | 	andn	_var01, arg01
1ab20     F4 00 62 FC | 	wrlong	_var01, ptr___system__dat__
1ab24     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1ab28     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1ab2c     0A 01 22 F5 | 	andn	_var01, arg02
1ab30     F4 00 62 FC | 	wrlong	_var01, ptr___system__dat__
1ab34     18 E8 85 F1 | 	sub	ptr___system__dat__, #24
1ab38                 | __system___freepins_ret
1ab38     2D 00 64 FD | 	ret
1ab3c                 | 
1ab3c                 | __system___float_fromuns
1ab3c     09 17 0A F6 | 	mov	arg03, arg01 wz
1ab40     0B FB 01 A6 |  if_e	mov	result1, arg03
1ab44     24 00 90 AD |  if_e	jmp	#LR__2500
1ab48     0B 15 92 F7 | 	encod	arg02, arg03 wc
1ab4c     01 14 06 C1 |  if_b	add	arg02, #1
1ab50     01 14 86 F1 | 	sub	arg02, #1
1ab54     1F 12 06 F6 | 	mov	arg01, #31
1ab58     0A 13 82 F1 | 	sub	arg01, arg02
1ab5c     09 17 62 F0 | 	shl	arg03, arg01
1ab60     02 16 46 F0 | 	shr	arg03, #2
1ab64     00 12 06 F6 | 	mov	arg01, #0
1ab68     4C 09 B0 FD | 	call	#__system___float_Pack
1ab6c                 | LR__2500
1ab6c                 | __system___float_fromuns_ret
1ab6c     2D 00 64 FD | 	ret
1ab70                 | 
1ab70                 | __system___float_add
1ab70     0F 4A 05 F6 | 	mov	COUNT_, #15
1ab74     A8 00 A0 FD | 	call	#pushregs_
1ab78     09 1F 02 F6 | 	mov	local01, arg01
1ab7c     0A 21 02 F6 | 	mov	local02, arg02
1ab80     00 22 06 F6 | 	mov	local03, #0
1ab84     0F 25 02 F6 | 	mov	local04, local01
1ab88     12 27 02 F6 | 	mov	local05, local04
1ab8c     16 26 46 F7 | 	zerox	local05, #22
1ab90     12 29 02 F6 | 	mov	local06, local04
1ab94     01 28 66 F0 | 	shl	local06, #1
1ab98     18 28 46 F0 | 	shr	local06, #24
1ab9c     1F 24 46 F0 | 	shr	local04, #31
1aba0     10 13 02 F6 | 	mov	arg01, local02
1aba4     09 FB 01 F6 | 	mov	result1, arg01
1aba8     FD 2A 02 F6 | 	mov	local07, result1
1abac     15 2D 02 F6 | 	mov	local08, local07
1abb0     16 2C 46 F7 | 	zerox	local08, #22
1abb4     15 2F 02 F6 | 	mov	local09, local07
1abb8     01 2E 66 F0 | 	shl	local09, #1
1abbc     18 2E 46 F0 | 	shr	local09, #24
1abc0     17 31 02 F6 | 	mov	local10, local09
1abc4     1F 2A 46 F0 | 	shr	local07, #31
1abc8     00 32 06 F6 | 	mov	local11, #0
1abcc     00 34 06 F6 | 	mov	local12, #0
1abd0     18 29 12 F2 | 	cmp	local06, local10 wc
1abd4     18 29 0A 32 |  if_ae	cmp	local06, local10 wz
1abd8     2C 00 90 1D |  if_a	jmp	#LR__2510
1abdc     16 27 12 32 |  if_ae	cmp	local05, local08 wc
1abe0     24 00 90 3D |  if_ae	jmp	#LR__2510
1abe4     13 37 02 F6 | 	mov	local13, local05
1abe8     16 27 02 F6 | 	mov	local05, local08
1abec     1B 2D 02 F6 | 	mov	local08, local13
1abf0     14 37 02 F6 | 	mov	local13, local06
1abf4     18 29 02 F6 | 	mov	local06, local10
1abf8     1B 31 02 F6 | 	mov	local10, local13
1abfc     12 37 02 F6 | 	mov	local13, local04
1ac00     15 25 02 F6 | 	mov	local04, local07
1ac04     1B 2B 02 F6 | 	mov	local07, local13
1ac08                 | LR__2510
1ac08     FF 28 0E F2 | 	cmp	local06, #255 wz
1ac0c     70 01 90 AD |  if_e	jmp	#LR__2525
1ac10     00 28 0E F2 | 	cmp	local06, #0 wz
1ac14     AC 01 90 AD |  if_e	jmp	#LR__2527
1ac18     17 26 26 F4 | 	bith	local05, #23
1ac1c                 | LR__2511
1ac1c     00 30 0E F2 | 	cmp	local10, #0 wz
1ac20     F0 01 90 AD |  if_e	jmp	#LR__2531
1ac24     17 2C 26 F4 | 	bith	local08, #23
1ac28                 | LR__2512
1ac28     7F 28 86 F1 | 	sub	local06, #127
1ac2c     7F 30 86 F1 | 	sub	local10, #127
1ac30     14 39 02 F6 | 	mov	local14, local06
1ac34     18 39 82 F1 | 	sub	local14, local10
1ac38     97 14 48 FB | 	callpa	#(@LR__2514-@LR__2513)>>2,fcache_load_ptr_
1ac3c                 | LR__2513
1ac3c     20 38 56 F2 | 	cmps	local14, #32 wc
1ac40     20 00 90 CD |  if_b	jmp	#LR__2515
1ac44     16 2F 02 F6 | 	mov	local09, local08
1ac48     00 32 0E F2 | 	cmp	local11, #0 wz
1ac4c     6F 32 62 FD | 	wrnz	local11
1ac50     19 2F 42 F5 | 	or	local09, local11
1ac54     17 33 02 F6 | 	mov	local11, local09
1ac58     00 2C 06 F6 | 	mov	local08, #0
1ac5c     20 38 86 F1 | 	sub	local14, #32
1ac60     D8 FF 9F FD | 	jmp	#LR__2513
1ac64                 | LR__2514
1ac64                 | LR__2515
1ac64     00 38 0E F2 | 	cmp	local14, #0 wz
1ac68     38 00 90 AD |  if_e	jmp	#LR__2516
1ac6c     16 37 02 F6 | 	mov	local13, local08
1ac70     20 30 06 F6 | 	mov	local10, #32
1ac74     1C 31 82 F1 | 	sub	local10, local14
1ac78     18 37 62 F0 | 	shl	local13, local10
1ac7c     19 31 02 F6 | 	mov	local10, local11
1ac80     20 2E 06 F6 | 	mov	local09, #32
1ac84     1C 2F 82 F1 | 	sub	local09, local14
1ac88     17 31 6A F0 | 	shl	local10, local09 wz
1ac8c     1C 33 42 F0 | 	shr	local11, local14
1ac90     1C 2D 42 F0 | 	shr	local08, local14
1ac94     1B 33 42 F5 | 	or	local11, local13
1ac98     00 3A 06 F6 | 	mov	local15, #0
1ac9c     01 3A 06 56 |  if_ne	mov	local15, #1
1aca0     1D 33 42 F5 | 	or	local11, local15
1aca4                 | LR__2516
1aca4     12 3B 02 F6 | 	mov	local15, local04
1aca8     15 3B 62 F5 | 	xor	local15, local07
1acac     01 3A CE F7 | 	test	local15, #1 wz
1acb0     18 00 90 AD |  if_e	jmp	#LR__2517
1acb4     16 2D 22 F6 | 	not	local08, local08
1acb8     19 33 22 F6 | 	not	local11, local11
1acbc     01 32 0E F1 | 	add	local11, #1 wz
1acc0     00 3A 06 F6 | 	mov	local15, #0
1acc4     01 3A 06 A6 |  if_e	mov	local15, #1
1acc8     1D 2D 02 F1 | 	add	local08, local15
1accc                 | LR__2517
1accc     19 35 12 F1 | 	add	local12, local11 wc
1acd0     16 27 22 F1 | 	addx	local05, local08
1acd4     00 26 56 F2 | 	cmps	local05, #0 wc
1acd8     1C 00 90 3D |  if_ae	jmp	#LR__2518
1acdc     01 24 66 F5 | 	xor	local04, #1
1ace0     13 27 22 F6 | 	not	local05, local05
1ace4     1A 35 22 F6 | 	not	local12, local12
1ace8     01 34 0E F1 | 	add	local12, #1 wz
1acec     00 3A 06 F6 | 	mov	local15, #0
1acf0     01 3A 06 A6 |  if_e	mov	local15, #1
1acf4     1D 27 02 F1 | 	add	local05, local15
1acf8                 | LR__2518
1acf8     00 80 00 FF 
1acfc     00 26 16 F2 | 	cmp	local05, ##16777216 wc
1ad00     28 00 90 CD |  if_b	jmp	#LR__2519
1ad04     01 28 06 F1 | 	add	local06, #1
1ad08     1A 39 02 F6 | 	mov	local14, local12
1ad0c     01 38 06 F5 | 	and	local14, #1
1ad10     01 34 46 F0 | 	shr	local12, #1
1ad14     13 3B 02 F6 | 	mov	local15, local05
1ad18     1F 3A 66 F0 | 	shl	local15, #31
1ad1c     1D 35 42 F5 | 	or	local12, local15
1ad20     1C 35 42 F5 | 	or	local12, local14
1ad24     01 26 46 F0 | 	shr	local05, #1
1ad28     3C 00 90 FD | 	jmp	#LR__2524
1ad2c                 | LR__2519
1ad2c     00 40 00 FF 
1ad30     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1ad34     30 00 90 3D |  if_ae	jmp	#LR__2523
1ad38     00 26 0E F2 | 	cmp	local05, #0 wz
1ad3c     00 34 0E A2 |  if_e	cmp	local12, #0 wz
1ad40     08 24 46 A5 |  if_e	or	local04, #8
1ad44     01 24 26 A5 |  if_e	andn	local04, #1
1ad48     1C 00 90 AD |  if_e	jmp	#LR__2522
1ad4c                 | LR__2520
1ad4c     00 40 00 FF 
1ad50     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1ad54     10 00 90 3D |  if_ae	jmp	#LR__2521
1ad58     1A 35 12 F1 | 	add	local12, local12 wc
1ad5c     13 27 22 F1 | 	addx	local05, local05
1ad60     01 28 86 F1 | 	sub	local06, #1
1ad64     E4 FF 9F FD | 	jmp	#LR__2520
1ad68                 | LR__2521
1ad68                 | LR__2522
1ad68                 | LR__2523
1ad68                 | LR__2524
1ad68     13 13 02 F6 | 	mov	arg01, local05
1ad6c     1A 15 02 F6 | 	mov	arg02, local12
1ad70     14 17 02 F6 | 	mov	arg03, local06
1ad74     12 19 02 F6 | 	mov	arg04, local04
1ad78     88 33 B0 FD | 	call	#__system__pack_0482
1ad7c     DC 00 90 FD | 	jmp	#LR__2535
1ad80                 | LR__2525
1ad80     FF 30 0E F2 | 	cmp	local10, #255 wz
1ad84     10 00 90 5D |  if_ne	jmp	#LR__2526
1ad88     12 2B 0A F2 | 	cmp	local07, local04 wz
1ad8c     00 F8 3F 5F 
1ad90     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1ad94     C4 00 90 5D |  if_ne	jmp	#LR__2535
1ad98                 | LR__2526
1ad98     00 26 0E F2 | 	cmp	local05, #0 wz
1ad9c     00 F8 3F 5F 
1ada0     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1ada4     B4 00 90 5D |  if_ne	jmp	#LR__2535
1ada8     1A 15 02 F6 | 	mov	arg02, local12
1adac     14 17 02 F6 | 	mov	arg03, local06
1adb0     12 19 02 F6 | 	mov	arg04, local04
1adb4     02 18 46 F5 | 	or	arg04, #2
1adb8     13 13 02 F6 | 	mov	arg01, local05
1adbc     44 33 B0 FD | 	call	#__system__pack_0482
1adc0     98 00 90 FD | 	jmp	#LR__2535
1adc4                 | LR__2527
1adc4     00 26 0E F2 | 	cmp	local05, #0 wz
1adc8     28 00 90 AD |  if_e	jmp	#LR__2530
1adcc     01 26 66 F0 | 	shl	local05, #1
1add0     97 0E 48 FB | 	callpa	#(@LR__2529-@LR__2528)>>2,fcache_load_ptr_
1add4                 | LR__2528
1add4     00 40 00 FF 
1add8     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1addc     14 3B 02 C6 |  if_b	mov	local15, local06
1ade0     01 3A 86 C1 |  if_b	sub	local15, #1
1ade4     1D 29 02 C6 |  if_b	mov	local06, local15
1ade8     01 26 66 C0 |  if_b	shl	local05, #1
1adec     E4 FF 9F CD |  if_b	jmp	#LR__2528
1adf0                 | LR__2529
1adf0     28 FE 9F FD | 	jmp	#LR__2511
1adf4                 | LR__2530
1adf4     15 25 02 F5 | 	and	local04, local07
1adf8     12 19 02 F6 | 	mov	arg04, local04
1adfc     08 18 46 F5 | 	or	arg04, #8
1ae00     00 12 06 F6 | 	mov	arg01, #0
1ae04     00 14 06 F6 | 	mov	arg02, #0
1ae08     00 16 06 F6 | 	mov	arg03, #0
1ae0c     F4 32 B0 FD | 	call	#__system__pack_0482
1ae10     48 00 90 FD | 	jmp	#LR__2535
1ae14                 | LR__2531
1ae14     00 2C 0E F2 | 	cmp	local08, #0 wz
1ae18     28 00 90 AD |  if_e	jmp	#LR__2534
1ae1c     01 2C 66 F0 | 	shl	local08, #1
1ae20     97 0E 48 FB | 	callpa	#(@LR__2533-@LR__2532)>>2,fcache_load_ptr_
1ae24                 | LR__2532
1ae24     00 40 00 FF 
1ae28     00 2C 16 F2 | 	cmp	local08, ##8388608 wc
1ae2c     18 3B 02 C6 |  if_b	mov	local15, local10
1ae30     01 3A 86 C1 |  if_b	sub	local15, #1
1ae34     1D 31 02 C6 |  if_b	mov	local10, local15
1ae38     01 2C 66 C0 |  if_b	shl	local08, #1
1ae3c     E4 FF 9F CD |  if_b	jmp	#LR__2532
1ae40                 | LR__2533
1ae40     E4 FD 9F FD | 	jmp	#LR__2512
1ae44                 | LR__2534
1ae44     7F 28 86 F1 | 	sub	local06, #127
1ae48     13 13 02 F6 | 	mov	arg01, local05
1ae4c     1A 15 02 F6 | 	mov	arg02, local12
1ae50     14 17 02 F6 | 	mov	arg03, local06
1ae54     12 19 02 F6 | 	mov	arg04, local04
1ae58     A8 32 B0 FD | 	call	#__system__pack_0482
1ae5c                 | LR__2535
1ae5c     A7 F0 03 F6 | 	mov	ptra, fp
1ae60     B2 00 A0 FD | 	call	#popregs_
1ae64                 | __system___float_add_ret
1ae64     2D 00 64 FD | 	ret
1ae68                 | 
1ae68                 | __system___float_sqrt
1ae68     04 4A 05 F6 | 	mov	COUNT_, #4
1ae6c     A8 00 A0 FD | 	call	#pushregs_
1ae70     09 1F 02 F6 | 	mov	local01, arg01
1ae74     09 FB 01 F6 | 	mov	result1, arg01
1ae78     FD 20 02 F6 | 	mov	local02, result1
1ae7c     10 23 02 F6 | 	mov	local03, local02
1ae80     16 22 46 F7 | 	zerox	local03, #22
1ae84     10 25 02 F6 | 	mov	local04, local02
1ae88     01 24 66 F0 | 	shl	local04, #1
1ae8c     18 24 4E F0 | 	shr	local04, #24 wz
1ae90     1F 20 46 F0 | 	shr	local02, #31
1ae94     70 00 90 AD |  if_e	jmp	#LR__2541
1ae98     17 22 26 F4 | 	bith	local03, #23
1ae9c                 | LR__2540
1ae9c     00 20 0E F2 | 	cmp	local02, #0 wz
1aea0     00 F8 3F 5F 
1aea4     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1aea8     88 00 90 5D |  if_ne	jmp	#LR__2544
1aeac     FF 24 0E F2 | 	cmp	local04, #255 wz
1aeb0     0F FB 01 A6 |  if_e	mov	result1, local01
1aeb4     7C 00 90 AD |  if_e	jmp	#LR__2544
1aeb8     7F 24 86 F1 | 	sub	local04, #127
1aebc     01 24 CE F7 | 	test	local04, #1 wz
1aec0     01 22 66 50 |  if_ne	shl	local03, #1
1aec4     05 22 66 F0 | 	shl	local03, #5
1aec8     11 01 38 FD | 	qsqrt	#0, local03
1aecc     01 24 86 51 |  if_ne	sub	local04, #1
1aed0     12 25 52 F6 | 	abs	local04, local04 wc
1aed4     01 24 46 F0 | 	shr	local04, #1
1aed8     12 17 82 F6 | 	negc	arg03, local04
1aedc     10 19 02 F6 | 	mov	arg04, local02
1aee0     18 12 62 FD | 	getqx	arg01
1aee4     09 15 02 F6 | 	mov	arg02, arg01
1aee8     19 14 66 F0 | 	shl	arg02, #25
1aeec     07 12 46 F0 | 	shr	arg01, #7
1aef0     00 80 00 FF 
1aef4     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
1aef8     01 16 06 31 |  if_ae	add	arg03, #1
1aefc     01 12 46 30 |  if_ae	shr	arg01, #1
1af00     00 32 B0 FD | 	call	#__system__pack_0482
1af04     2C 00 90 FD | 	jmp	#LR__2544
1af08                 | LR__2541
1af08     00 22 0E F2 | 	cmp	local03, #0 wz
1af0c     0F FB 01 A6 |  if_e	mov	result1, local01
1af10     20 00 90 AD |  if_e	jmp	#LR__2544
1af14     01 22 66 F0 | 	shl	local03, #1
1af18     97 0A 48 FB | 	callpa	#(@LR__2543-@LR__2542)>>2,fcache_load_ptr_
1af1c                 | LR__2542
1af1c     00 40 00 FF 
1af20     00 22 16 F2 | 	cmp	local03, ##8388608 wc
1af24     01 24 86 C1 |  if_b	sub	local04, #1
1af28     01 22 66 C0 |  if_b	shl	local03, #1
1af2c     EC FF 9F CD |  if_b	jmp	#LR__2542
1af30                 | LR__2543
1af30     68 FF 9F FD | 	jmp	#LR__2540
1af34                 | LR__2544
1af34     A7 F0 03 F6 | 	mov	ptra, fp
1af38     B2 00 A0 FD | 	call	#popregs_
1af3c                 | __system___float_sqrt_ret
1af3c     2D 00 64 FD | 	ret
1af40                 | 
1af40                 | __system___float_mul
1af40     0B 4A 05 F6 | 	mov	COUNT_, #11
1af44     A8 00 A0 FD | 	call	#pushregs_
1af48     09 1F 02 F6 | 	mov	local01, arg01
1af4c     0A 21 02 F6 | 	mov	local02, arg02
1af50     0F 23 02 F6 | 	mov	local03, local01
1af54     11 25 02 F6 | 	mov	local04, local03
1af58     16 24 46 F7 | 	zerox	local04, #22
1af5c     11 27 02 F6 | 	mov	local05, local03
1af60     01 26 66 F0 | 	shl	local05, #1
1af64     18 26 46 F0 | 	shr	local05, #24
1af68     1F 22 46 F0 | 	shr	local03, #31
1af6c     10 FB 01 F6 | 	mov	result1, local02
1af70     FD 28 02 F6 | 	mov	local06, result1
1af74     14 2B 02 F6 | 	mov	local07, local06
1af78     16 2A 46 F7 | 	zerox	local07, #22
1af7c     14 2D 02 F6 | 	mov	local08, local06
1af80     01 2C 66 F0 | 	shl	local08, #1
1af84     18 2C 46 F0 | 	shr	local08, #24
1af88     1F 28 46 F0 | 	shr	local06, #31
1af8c     14 23 62 F5 | 	xor	local03, local06
1af90     FF 26 0E F2 | 	cmp	local05, #255 wz
1af94     90 00 90 AD |  if_e	jmp	#LR__2553
1af98     FF 2C 0E F2 | 	cmp	local08, #255 wz
1af9c     D8 00 90 AD |  if_e	jmp	#LR__2555
1afa0     00 26 0E F2 | 	cmp	local05, #0 wz
1afa4     0C 01 90 AD |  if_e	jmp	#LR__2556
1afa8     17 24 26 F4 | 	bith	local04, #23
1afac                 | LR__2550
1afac     00 2C 0E F2 | 	cmp	local08, #0 wz
1afb0     44 01 90 AD |  if_e	jmp	#LR__2560
1afb4     17 2A 26 F4 | 	bith	local07, #23
1afb8                 | LR__2551
1afb8     12 21 02 F6 | 	mov	local02, local04
1afbc     04 20 66 F0 | 	shl	local02, #4
1afc0     15 29 02 F6 | 	mov	local06, local07
1afc4     05 28 66 F0 | 	shl	local06, #5
1afc8     14 21 02 FD | 	qmul	local02, local06
1afcc     16 27 02 F1 | 	add	local05, local08
1afd0     FE 26 86 F1 | 	sub	local05, #254
1afd4     13 2F 02 F6 | 	mov	local09, local05
1afd8     04 24 66 F0 | 	shl	local04, #4
1afdc     05 2A 66 F0 | 	shl	local07, #5
1afe0     18 30 62 FD | 	getqx	local10
1afe4     15 25 02 FD | 	qmul	local04, local07
1afe8     19 32 62 FD | 	getqy	local11
1afec     00 80 00 FF 
1aff0     00 32 16 F2 | 	cmp	local11, ##16777216 wc
1aff4     18 00 90 CD |  if_b	jmp	#LR__2552
1aff8     01 2E 06 F1 | 	add	local09, #1
1affc     01 30 46 F0 | 	shr	local10, #1
1b000     19 2D 02 F6 | 	mov	local08, local11
1b004     1F 2C 66 F0 | 	shl	local08, #31
1b008     16 31 42 F5 | 	or	local10, local08
1b00c     01 32 46 F0 | 	shr	local11, #1
1b010                 | LR__2552
1b010     19 13 02 F6 | 	mov	arg01, local11
1b014     18 15 02 F6 | 	mov	arg02, local10
1b018     17 17 02 F6 | 	mov	arg03, local09
1b01c     11 19 02 F6 | 	mov	arg04, local03
1b020     E0 30 B0 FD | 	call	#__system__pack_0482
1b024     10 01 90 FD | 	jmp	#LR__2564
1b028                 | LR__2553
1b028     00 24 0E F2 | 	cmp	local04, #0 wz
1b02c     0F FB 01 56 |  if_ne	mov	result1, local01
1b030     04 01 90 5D |  if_ne	jmp	#LR__2564
1b034     FF 2C 56 F2 | 	cmps	local08, #255 wc
1b038     00 2C 0E C2 |  if_b	cmp	local08, #0 wz
1b03c     00 2A 0E 82 |  if_c_and_z	cmp	local07, #0 wz
1b040     18 00 90 4D |  if_c_and_nz	jmp	#LR__2554
1b044     00 F8 3F CF 
1b048     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
1b04c     E8 00 90 CD |  if_b	jmp	#LR__2564
1b050     00 2A 0E F2 | 	cmp	local07, #0 wz
1b054     10 FB 01 56 |  if_ne	mov	result1, local02
1b058     DC 00 90 5D |  if_ne	jmp	#LR__2564
1b05c                 | LR__2554
1b05c     02 22 46 F5 | 	or	local03, #2
1b060     00 12 06 F6 | 	mov	arg01, #0
1b064     00 14 06 F6 | 	mov	arg02, #0
1b068     13 17 02 F6 | 	mov	arg03, local05
1b06c     11 19 02 F6 | 	mov	arg04, local03
1b070     90 30 B0 FD | 	call	#__system__pack_0482
1b074     C0 00 90 FD | 	jmp	#LR__2564
1b078                 | LR__2555
1b078     00 26 0E F2 | 	cmp	local05, #0 wz
1b07c     00 24 0E A2 |  if_e	cmp	local04, #0 wz
1b080     00 F8 3F AF 
1b084     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1b088     AC 00 90 AD |  if_e	jmp	#LR__2564
1b08c     00 2A 0E F2 | 	cmp	local07, #0 wz
1b090     10 FB 01 56 |  if_ne	mov	result1, local02
1b094     A0 00 90 5D |  if_ne	jmp	#LR__2564
1b098     16 17 02 F6 | 	mov	arg03, local08
1b09c     11 19 02 F6 | 	mov	arg04, local03
1b0a0     02 18 46 F5 | 	or	arg04, #2
1b0a4     00 12 06 F6 | 	mov	arg01, #0
1b0a8     00 14 06 F6 | 	mov	arg02, #0
1b0ac     54 30 B0 FD | 	call	#__system__pack_0482
1b0b0     84 00 90 FD | 	jmp	#LR__2564
1b0b4                 | LR__2556
1b0b4     00 24 0E F2 | 	cmp	local04, #0 wz
1b0b8     20 00 90 AD |  if_e	jmp	#LR__2559
1b0bc     01 24 66 F0 | 	shl	local04, #1
1b0c0     97 0A 48 FB | 	callpa	#(@LR__2558-@LR__2557)>>2,fcache_load_ptr_
1b0c4                 | LR__2557
1b0c4     00 40 00 FF 
1b0c8     00 24 16 F2 | 	cmp	local04, ##8388608 wc
1b0cc     01 26 86 C1 |  if_b	sub	local05, #1
1b0d0     01 24 66 C0 |  if_b	shl	local04, #1
1b0d4     EC FF 9F CD |  if_b	jmp	#LR__2557
1b0d8                 | LR__2558
1b0d8     D0 FE 9F FD | 	jmp	#LR__2550
1b0dc                 | LR__2559
1b0dc     08 22 46 F5 | 	or	local03, #8
1b0e0     00 12 06 F6 | 	mov	arg01, #0
1b0e4     00 14 06 F6 | 	mov	arg02, #0
1b0e8     00 16 06 F6 | 	mov	arg03, #0
1b0ec     11 19 02 F6 | 	mov	arg04, local03
1b0f0     10 30 B0 FD | 	call	#__system__pack_0482
1b0f4     40 00 90 FD | 	jmp	#LR__2564
1b0f8                 | LR__2560
1b0f8     00 2A 0E F2 | 	cmp	local07, #0 wz
1b0fc     20 00 90 AD |  if_e	jmp	#LR__2563
1b100     01 2A 66 F0 | 	shl	local07, #1
1b104     97 0A 48 FB | 	callpa	#(@LR__2562-@LR__2561)>>2,fcache_load_ptr_
1b108                 | LR__2561
1b108     00 40 00 FF 
1b10c     00 2A 16 F2 | 	cmp	local07, ##8388608 wc
1b110     01 2C 86 C1 |  if_b	sub	local08, #1
1b114     01 2A 66 C0 |  if_b	shl	local07, #1
1b118     EC FF 9F CD |  if_b	jmp	#LR__2561
1b11c                 | LR__2562
1b11c     98 FE 9F FD | 	jmp	#LR__2551
1b120                 | LR__2563
1b120     08 22 46 F5 | 	or	local03, #8
1b124     00 12 06 F6 | 	mov	arg01, #0
1b128     00 14 06 F6 | 	mov	arg02, #0
1b12c     00 16 06 F6 | 	mov	arg03, #0
1b130     11 19 02 F6 | 	mov	arg04, local03
1b134     CC 2F B0 FD | 	call	#__system__pack_0482
1b138                 | LR__2564
1b138     A7 F0 03 F6 | 	mov	ptra, fp
1b13c     B2 00 A0 FD | 	call	#popregs_
1b140                 | __system___float_mul_ret
1b140     2D 00 64 FD | 	ret
1b144                 | 
1b144                 | __system___float_div
1b144     0E 4A 05 F6 | 	mov	COUNT_, #14
1b148     A8 00 A0 FD | 	call	#pushregs_
1b14c     09 23 02 F6 | 	mov	local03, arg01
1b150     0A 25 02 F6 | 	mov	local04, arg02
1b154     11 27 02 F6 | 	mov	local05, local03
1b158     13 29 02 F6 | 	mov	local06, local05
1b15c     16 28 46 F7 | 	zerox	local06, #22
1b160     13 2B 02 F6 | 	mov	local07, local05
1b164     01 2A 66 F0 | 	shl	local07, #1
1b168     18 2A 46 F0 | 	shr	local07, #24
1b16c     1F 26 46 F0 | 	shr	local05, #31
1b170     12 FB 01 F6 | 	mov	result1, local04
1b174     FD 2C 02 F6 | 	mov	local08, result1
1b178     16 2F 02 F6 | 	mov	local09, local08
1b17c     16 2E 46 F7 | 	zerox	local09, #22
1b180     16 31 02 F6 | 	mov	local10, local08
1b184     01 30 66 F0 | 	shl	local10, #1
1b188     18 30 46 F0 | 	shr	local10, #24
1b18c     1F 2C 46 F0 | 	shr	local08, #31
1b190     16 27 62 F5 | 	xor	local05, local08
1b194     FF 2A 0E F2 | 	cmp	local07, #255 wz
1b198     D4 00 90 AD |  if_e	jmp	#LR__2575
1b19c     FF 30 0E F2 | 	cmp	local10, #255 wz
1b1a0     04 01 90 AD |  if_e	jmp	#LR__2576
1b1a4     00 2A 0E F2 | 	cmp	local07, #0 wz
1b1a8     24 01 90 AD |  if_e	jmp	#LR__2577
1b1ac     17 28 26 F4 | 	bith	local06, #23
1b1b0                 | LR__2570
1b1b0     00 30 0E F2 | 	cmp	local10, #0 wz
1b1b4     70 01 90 AD |  if_e	jmp	#LR__2581
1b1b8     17 2E 26 F4 | 	bith	local09, #23
1b1bc                 | LR__2571
1b1bc     18 2B 82 F1 | 	sub	local07, local10
1b1c0     15 33 02 F6 | 	mov	local11, local07
1b1c4     14 13 02 F6 | 	mov	arg01, local06
1b1c8     02 12 46 F0 | 	shr	arg01, #2
1b1cc     1E 28 66 F0 | 	shl	local06, #30
1b1d0     14 15 02 F6 | 	mov	arg02, local06
1b1d4     17 17 02 F6 | 	mov	arg03, local09
1b1d8     28 12 62 FD | 	setq	arg01
1b1dc     0B 15 12 FD | 	qdiv	arg02, arg03
1b1e0     00 34 06 F6 | 	mov	local12, #0
1b1e4     18 1E 62 FD | 	getqx	local01
1b1e8     19 FC 61 FD | 	getqy	result2
1b1ec     FE 20 02 F6 | 	mov	local02, result2
1b1f0     0F 37 02 F6 | 	mov	local13, local01
1b1f4     00 20 4E F2 | 	cmps	local02, #0 wz
1b1f8     1B 39 02 F6 | 	mov	local14, local13
1b1fc     19 38 66 F0 | 	shl	local14, #25
1b200     01 34 06 56 |  if_ne	mov	local12, #1
1b204     1A 39 42 F5 | 	or	local14, local12
1b208     07 36 46 F0 | 	shr	local13, #7
1b20c     00 80 00 FF 
1b210     00 36 16 F2 | 	cmp	local13, ##16777216 wc
1b214     1C 00 90 CD |  if_b	jmp	#LR__2572
1b218     01 32 06 F1 | 	add	local11, #1
1b21c     01 38 46 F0 | 	shr	local14, #1
1b220     1B 35 02 F6 | 	mov	local12, local13
1b224     1F 34 66 F0 | 	shl	local12, #31
1b228     1A 39 42 F5 | 	or	local14, local12
1b22c     01 36 46 F0 | 	shr	local13, #1
1b230     24 00 90 FD | 	jmp	#LR__2574
1b234                 | LR__2572
1b234     00 40 00 FF 
1b238     00 36 16 F2 | 	cmp	local13, ##8388608 wc
1b23c     18 00 90 3D |  if_ae	jmp	#LR__2573
1b240     01 32 86 F1 | 	sub	local11, #1
1b244     01 36 66 F0 | 	shl	local13, #1
1b248     1C 35 02 F6 | 	mov	local12, local14
1b24c     1F 34 46 F0 | 	shr	local12, #31
1b250     1A 37 42 F5 | 	or	local13, local12
1b254     01 38 66 F0 | 	shl	local14, #1
1b258                 | LR__2573
1b258                 | LR__2574
1b258     1B 13 02 F6 | 	mov	arg01, local13
1b25c     1C 15 02 F6 | 	mov	arg02, local14
1b260     19 17 02 F6 | 	mov	arg03, local11
1b264     13 19 02 F6 | 	mov	arg04, local05
1b268     98 2E B0 FD | 	call	#__system__pack_0482
1b26c     F8 00 90 FD | 	jmp	#LR__2585
1b270                 | LR__2575
1b270     00 28 0E F2 | 	cmp	local06, #0 wz
1b274     11 FB 01 56 |  if_ne	mov	result1, local03
1b278     EC 00 90 5D |  if_ne	jmp	#LR__2585
1b27c     FF 30 0E F2 | 	cmp	local10, #255 wz
1b280     00 F8 3F AF 
1b284     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1b288     DC 00 90 AD |  if_e	jmp	#LR__2585
1b28c     02 26 46 F5 | 	or	local05, #2
1b290     00 12 06 F6 | 	mov	arg01, #0
1b294     00 14 06 F6 | 	mov	arg02, #0
1b298     15 17 02 F6 | 	mov	arg03, local07
1b29c     13 19 02 F6 | 	mov	arg04, local05
1b2a0     60 2E B0 FD | 	call	#__system__pack_0482
1b2a4     C0 00 90 FD | 	jmp	#LR__2585
1b2a8                 | LR__2576
1b2a8     00 2E 0E F2 | 	cmp	local09, #0 wz
1b2ac     12 FB 01 56 |  if_ne	mov	result1, local04
1b2b0     B4 00 90 5D |  if_ne	jmp	#LR__2585
1b2b4     13 19 02 F6 | 	mov	arg04, local05
1b2b8     08 18 46 F5 | 	or	arg04, #8
1b2bc     00 12 06 F6 | 	mov	arg01, #0
1b2c0     00 14 06 F6 | 	mov	arg02, #0
1b2c4     00 16 06 F6 | 	mov	arg03, #0
1b2c8     38 2E B0 FD | 	call	#__system__pack_0482
1b2cc     98 00 90 FD | 	jmp	#LR__2585
1b2d0                 | LR__2577
1b2d0     00 28 0E F2 | 	cmp	local06, #0 wz
1b2d4     20 00 90 AD |  if_e	jmp	#LR__2580
1b2d8     01 28 66 F0 | 	shl	local06, #1
1b2dc     97 0A 48 FB | 	callpa	#(@LR__2579-@LR__2578)>>2,fcache_load_ptr_
1b2e0                 | LR__2578
1b2e0     00 40 00 FF 
1b2e4     00 28 16 F2 | 	cmp	local06, ##8388608 wc
1b2e8     01 2A 86 C1 |  if_b	sub	local07, #1
1b2ec     01 28 66 C0 |  if_b	shl	local06, #1
1b2f0     EC FF 9F CD |  if_b	jmp	#LR__2578
1b2f4                 | LR__2579
1b2f4     B8 FE 9F FD | 	jmp	#LR__2570
1b2f8                 | LR__2580
1b2f8     00 30 0E F2 | 	cmp	local10, #0 wz
1b2fc     00 2E 0E A2 |  if_e	cmp	local09, #0 wz
1b300     00 F8 3F AF 
1b304     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1b308     5C 00 90 AD |  if_e	jmp	#LR__2585
1b30c     13 19 02 F6 | 	mov	arg04, local05
1b310     08 18 46 F5 | 	or	arg04, #8
1b314     00 12 06 F6 | 	mov	arg01, #0
1b318     00 14 06 F6 | 	mov	arg02, #0
1b31c     00 16 06 F6 | 	mov	arg03, #0
1b320     E0 2D B0 FD | 	call	#__system__pack_0482
1b324     40 00 90 FD | 	jmp	#LR__2585
1b328                 | LR__2581
1b328     00 2E 0E F2 | 	cmp	local09, #0 wz
1b32c     20 00 90 AD |  if_e	jmp	#LR__2584
1b330     01 2E 66 F0 | 	shl	local09, #1
1b334     97 0A 48 FB | 	callpa	#(@LR__2583-@LR__2582)>>2,fcache_load_ptr_
1b338                 | LR__2582
1b338     00 40 00 FF 
1b33c     00 2E 16 F2 | 	cmp	local09, ##8388608 wc
1b340     01 30 86 C1 |  if_b	sub	local10, #1
1b344     01 2E 66 C0 |  if_b	shl	local09, #1
1b348     EC FF 9F CD |  if_b	jmp	#LR__2582
1b34c                 | LR__2583
1b34c     6C FE 9F FD | 	jmp	#LR__2571
1b350                 | LR__2584
1b350     02 26 46 F5 | 	or	local05, #2
1b354     00 12 06 F6 | 	mov	arg01, #0
1b358     00 14 06 F6 | 	mov	arg02, #0
1b35c     00 16 06 F6 | 	mov	arg03, #0
1b360     13 19 02 F6 | 	mov	arg04, local05
1b364     9C 2D B0 FD | 	call	#__system__pack_0482
1b368                 | LR__2585
1b368     A7 F0 03 F6 | 	mov	ptra, fp
1b36c     B2 00 A0 FD | 	call	#popregs_
1b370                 | __system___float_div_ret
1b370     2D 00 64 FD | 	ret
1b374                 | 
1b374                 | __system___float_cmp
1b374     00 C0 3F FF 
1b378     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
1b37c     00 C0 3F CF 
1b380     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
1b384     0B FB 01 36 |  if_ae	mov	result1, arg03
1b388     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
1b38c     00 C0 7F FF 
1b390     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
1b394     00 C0 7F CF 
1b398     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
1b39c     0B FB 01 36 |  if_ae	mov	result1, arg03
1b3a0     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
1b3a4     00 12 56 F2 | 	cmps	arg01, #0 wc
1b3a8     2C 00 90 3D |  if_ae	jmp	#LR__2590
1b3ac     00 14 56 F2 | 	cmps	arg02, #0 wc
1b3b0     0A FB 01 C6 |  if_b	mov	result1, arg02
1b3b4     09 FB 81 C1 |  if_b	sub	result1, arg01
1b3b8     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
1b3bc     00 14 0E F2 | 	cmp	arg02, #0 wz
1b3c0     00 00 40 AF 
1b3c4     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
1b3c8     00 FA 05 A6 |  if_e	mov	result1, #0
1b3cc     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
1b3d0     01 FA 65 F6 | 	neg	result1, #1
1b3d4     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
1b3d8                 | LR__2590
1b3d8     00 14 56 F2 | 	cmps	arg02, #0 wc
1b3dc     1C 00 90 3D |  if_ae	jmp	#LR__2591
1b3e0     00 12 0E F2 | 	cmp	arg01, #0 wz
1b3e4     00 00 40 AF 
1b3e8     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
1b3ec     00 FA 05 A6 |  if_e	mov	result1, #0
1b3f0     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
1b3f4     01 FA 05 F6 | 	mov	result1, #1
1b3f8     08 00 90 FD | 	jmp	#__system___float_cmp_ret
1b3fc                 | LR__2591
1b3fc     0A 13 82 F1 | 	sub	arg01, arg02
1b400     09 FB 01 F6 | 	mov	result1, arg01
1b404                 | __system___float_cmp_ret
1b404     2D 00 64 FD | 	ret
1b408                 | 
1b408                 | __system___float_tointeger
1b408     02 4A 05 F6 | 	mov	COUNT_, #2
1b40c     A8 00 A0 FD | 	call	#pushregs_
1b410     50 00 B0 FD | 	call	#__system___float_Unpack
1b414     FF FF 7F FF 
1b418     FF FD 55 F2 | 	cmps	result2, ##-1 wc
1b41c     34 00 90 CD |  if_b	jmp	#LR__2600
1b420     1F FC 55 F2 | 	cmps	result2, #31 wc
1b424     2C 00 90 3D |  if_ae	jmp	#LR__2600
1b428     02 FE 65 F0 | 	shl	result3, #2
1b42c     1E 1E 06 F6 | 	mov	local01, #30
1b430     FE 1E 82 F1 | 	sub	local01, result2
1b434     0F FF 41 F0 | 	shr	result3, local01
1b438     FF 20 02 F6 | 	mov	local02, result3
1b43c     0A 21 02 F1 | 	add	local02, arg02
1b440     01 20 46 F0 | 	shr	local02, #1
1b444     00 FA 0D F2 | 	cmp	result1, #0 wz
1b448     10 21 62 56 |  if_ne	neg	local02, local02
1b44c     10 FB 01 F6 | 	mov	result1, local02
1b450     04 00 90 FD | 	jmp	#LR__2601
1b454                 | LR__2600
1b454     00 FA 05 F6 | 	mov	result1, #0
1b458                 | LR__2601
1b458     A7 F0 03 F6 | 	mov	ptra, fp
1b45c     B2 00 A0 FD | 	call	#popregs_
1b460                 | __system___float_tointeger_ret
1b460     2D 00 64 FD | 	ret
1b464                 | 
1b464                 | __system___float_Unpack
1b464     09 01 02 F6 | 	mov	_var01, arg01
1b468     1F 00 46 F0 | 	shr	_var01, #31
1b46c     09 03 02 F6 | 	mov	_var02, arg01
1b470     01 02 66 F0 | 	shl	_var02, #1
1b474     18 02 4E F0 | 	shr	_var02, #24 wz
1b478     17 13 06 F4 | 	bitl	arg01, #279
1b47c     06 12 66 50 |  if_ne	shl	arg01, #6
1b480     1D 12 26 54 |  if_ne	bith	arg01, #29
1b484     1C 00 90 5D |  if_ne	jmp	#LR__2610
1b488     09 05 92 F7 | 	encod	_var03, arg01 wc
1b48c     01 04 06 C1 |  if_b	add	_var03, #1
1b490     17 04 86 F1 | 	sub	_var03, #23
1b494     02 03 02 F6 | 	mov	_var02, _var03
1b498     07 FC 05 F6 | 	mov	result2, #7
1b49c     02 FD 81 F1 | 	sub	result2, _var03
1b4a0     FE 12 62 F0 | 	shl	arg01, result2
1b4a4                 | LR__2610
1b4a4     7F 02 86 F1 | 	sub	_var02, #127
1b4a8     09 FF 01 F6 | 	mov	result3, arg01
1b4ac     00 FB 01 F6 | 	mov	result1, _var01
1b4b0     01 FD 01 F6 | 	mov	result2, _var02
1b4b4                 | __system___float_Unpack_ret
1b4b4     2D 00 64 FD | 	ret
1b4b8                 | 
1b4b8                 | __system___float_Pack
1b4b8     00 00 06 F6 | 	mov	_var01, #0
1b4bc     00 16 0E F2 | 	cmp	arg03, #0 wz
1b4c0     8C 00 90 AD |  if_e	jmp	#LR__2621
1b4c4     0B 03 92 F7 | 	encod	_var02, arg03 wc
1b4c8     01 02 06 C1 |  if_b	add	_var02, #1
1b4cc     21 00 06 F6 | 	mov	_var01, #33
1b4d0     01 01 82 F1 | 	sub	_var01, _var02
1b4d4     00 17 62 F0 | 	shl	arg03, _var01
1b4d8     03 02 06 F6 | 	mov	_var02, #3
1b4dc     00 03 82 F1 | 	sub	_var02, _var01
1b4e0     01 15 02 F1 | 	add	arg02, _var02
1b4e4     0A 05 02 F6 | 	mov	_var03, arg02
1b4e8     00 17 06 F1 | 	add	arg03, #256
1b4ec     0B 03 02 F6 | 	mov	_var02, arg03
1b4f0     FF 02 2E F5 | 	andn	_var02, #255 wz
1b4f4     01 04 06 A1 |  if_e	add	_var03, #1
1b4f8     7F 04 06 F1 | 	add	_var03, #127
1b4fc     FF FF 7F FF 
1b500     E9 05 46 F3 | 	fges	_var03, ##-23
1b504     FF 04 66 F3 | 	fles	_var03, #255
1b508     01 04 56 F2 | 	cmps	_var03, #1 wc
1b50c     1C 00 90 3D |  if_ae	jmp	#LR__2620
1b510     01 16 46 F0 | 	shr	arg03, #1
1b514     1F 02 C6 F9 | 	decod	_var02, #31
1b518     0B 03 02 F1 | 	add	_var02, arg03
1b51c     02 05 62 F6 | 	neg	_var03, _var03
1b520     02 03 42 F0 | 	shr	_var02, _var03
1b524     01 17 02 F6 | 	mov	arg03, _var02
1b528     00 04 06 F6 | 	mov	_var03, #0
1b52c                 | LR__2620
1b52c     09 FB 01 F6 | 	mov	result1, arg01
1b530     1F FA 65 F0 | 	shl	result1, #31
1b534     02 03 02 F6 | 	mov	_var02, _var03
1b538     17 02 66 F0 | 	shl	_var02, #23
1b53c     01 FB 41 F5 | 	or	result1, _var02
1b540     0B 07 02 F6 | 	mov	_var04, arg03
1b544     09 06 46 F0 | 	shr	_var04, #9
1b548     03 FB 41 F5 | 	or	result1, _var04
1b54c     04 00 90 FD | 	jmp	#__system___float_Pack_ret
1b550                 | LR__2621
1b550     00 FB 01 F6 | 	mov	result1, _var01
1b554                 | __system___float_Pack_ret
1b554     2D 00 64 FD | 	ret
1b558                 | 
1b558                 | __system___basic_print_float
1b558     05 4A 05 F6 | 	mov	COUNT_, #5
1b55c     A8 00 A0 FD | 	call	#pushregs_
1b560     09 1F 02 F6 | 	mov	local01, arg01
1b564     0A 21 02 F6 | 	mov	local02, arg02
1b568     0B 23 0A F6 | 	mov	local03, arg03 wz
1b56c     0C 25 02 F6 | 	mov	local04, arg04
1b570     14 00 90 5D |  if_ne	jmp	#LR__2630
1b574     23 24 0E F2 | 	cmp	local04, #35 wz
1b578     80 02 10 AF 
1b57c     00 26 06 A6 |  if_e	mov	local05, ##537198592
1b580     1D 26 C6 59 |  if_ne	decod	local05, #29
1b584     13 23 02 F6 | 	mov	local03, local05
1b588                 | LR__2630
1b588     0F 13 02 F6 | 	mov	arg01, local01
1b58c     40 27 B0 FD | 	call	#__system___gettxfunc
1b590     FD 26 0A F6 | 	mov	local05, result1 wz
1b594     00 FA 05 A6 |  if_e	mov	result1, #0
1b598     13 13 02 56 |  if_ne	mov	arg01, local05
1b59c     11 15 02 56 |  if_ne	mov	arg02, local03
1b5a0     10 17 02 56 |  if_ne	mov	arg03, local02
1b5a4     12 19 02 56 |  if_ne	mov	arg04, local04
1b5a8     90 E0 BF 5D |  if_ne	call	#__system___fmtfloat
1b5ac     A7 F0 03 F6 | 	mov	ptra, fp
1b5b0     B2 00 A0 FD | 	call	#popregs_
1b5b4                 | __system___basic_print_float_ret
1b5b4     2D 00 64 FD | 	ret
1b5b8                 | 
1b5b8                 | __system____builtin_atoi
1b5b8     07 4A 05 F6 | 	mov	COUNT_, #7
1b5bc     A8 00 A0 FD | 	call	#pushregs_
1b5c0                 | __system____builtin_atoi_enter
1b5c0     09 1F 02 F6 | 	mov	local01, arg01
1b5c4     0A 21 02 F6 | 	mov	local02, arg02
1b5c8     00 22 06 F6 | 	mov	local03, #0
1b5cc     00 24 06 F6 | 	mov	local04, #0
1b5d0     00 26 06 F6 | 	mov	local05, #0
1b5d4     97 08 48 FB | 	callpa	#(@LR__2641-@LR__2640)>>2,fcache_load_ptr_
1b5d8                 | LR__2640
1b5d8     0F 29 C2 FA | 	rdbyte	local06, local01
1b5dc     20 28 0E F2 | 	cmp	local06, #32 wz
1b5e0     01 1E 06 A1 |  if_e	add	local01, #1
1b5e4     F0 FF 9F AD |  if_e	jmp	#LR__2640
1b5e8                 | LR__2641
1b5e8     0F 2B C2 FA | 	rdbyte	local07, local01
1b5ec                 | LR__2642
1b5ec     2D 2A 0E F2 | 	cmp	local07, #45 wz
1b5f0     2B 2A 0E 52 |  if_ne	cmp	local07, #43 wz
1b5f4     18 00 90 5D |  if_ne	jmp	#LR__2643
1b5f8     01 1E 06 F1 | 	add	local01, #1
1b5fc     2D 2A 0E F2 | 	cmp	local07, #45 wz
1b600     01 28 06 A6 |  if_e	mov	local06, #1
1b604     14 27 C2 A2 |  if_e	subr	local05, local06
1b608     0F 2B C2 FA | 	rdbyte	local07, local01
1b60c     DC FF 9F FD | 	jmp	#LR__2642
1b610                 | LR__2643
1b610     97 48 48 FB | 	callpa	#(@LR__2651-@LR__2644)>>2,fcache_load_ptr_
1b614                 | LR__2644
1b614                 | LR__2645
1b614     0F 2B C2 FA | 	rdbyte	local07, local01
1b618     5F 2A 0E F2 | 	cmp	local07, #95 wz
1b61c     01 1E 06 F1 | 	add	local01, #1
1b620     F0 FF 9F AD |  if_e	jmp	#LR__2645
1b624     30 2A 0E F2 | 	cmp	local07, #48 wz
1b628     26 2A 0E 52 |  if_ne	cmp	local07, #38 wz
1b62c     00 24 06 A6 |  if_e	mov	local04, #0
1b630     60 00 90 AD |  if_e	jmp	#LR__2650
1b634     31 2A 56 F2 | 	cmps	local07, #49 wc
1b638     18 00 90 CD |  if_b	jmp	#LR__2646
1b63c     3A 2A 56 F2 | 	cmps	local07, #58 wc
1b640     15 25 02 C6 |  if_b	mov	local04, local07
1b644     30 24 86 C1 |  if_b	sub	local04, #48
1b648     00 20 0E C2 |  if_b	cmp	local02, #0 wz
1b64c     0A 20 06 86 |  if_c_and_z	mov	local02, #10
1b650     40 00 90 CD |  if_b	jmp	#LR__2649
1b654                 | LR__2646
1b654     0B 20 56 F2 | 	cmps	local02, #11 wc
1b658     61 2A 56 32 |  if_ae	cmps	local07, #97 wc
1b65c     14 00 90 CD |  if_b	jmp	#LR__2647
1b660     67 2A 56 F2 | 	cmps	local07, #103 wc
1b664     61 2A 86 C1 |  if_b	sub	local07, #97
1b668     0A 24 06 C6 |  if_b	mov	local04, #10
1b66c     15 25 02 C1 |  if_b	add	local04, local07
1b670     20 00 90 CD |  if_b	jmp	#LR__2648
1b674                 | LR__2647
1b674     0B 20 56 F2 | 	cmps	local02, #11 wc
1b678     41 2A 56 32 |  if_ae	cmps	local07, #65 wc
1b67c     24 00 90 CD |  if_b	jmp	#LR__2652
1b680     47 2A 56 F2 | 	cmps	local07, #71 wc
1b684     41 2A 86 C1 |  if_b	sub	local07, #65
1b688     0A 24 06 C6 |  if_b	mov	local04, #10
1b68c     15 25 02 C1 |  if_b	add	local04, local07
1b690     10 00 90 3D |  if_ae	jmp	#LR__2652
1b694                 | LR__2648
1b694                 | LR__2649
1b694                 | LR__2650
1b694     11 21 02 FD | 	qmul	local02, local03
1b698     18 22 62 FD | 	getqx	local03
1b69c     12 23 02 F1 | 	add	local03, local04
1b6a0     70 FF 9F FD | 	jmp	#LR__2644
1b6a4                 | LR__2651
1b6a4                 | LR__2652
1b6a4     00 20 0E F2 | 	cmp	local02, #0 wz
1b6a8     64 00 90 5D |  if_ne	jmp	#LR__2658
1b6ac     78 2A 0E F2 | 	cmp	local07, #120 wz
1b6b0     68 2A 0E 52 |  if_ne	cmp	local07, #104 wz
1b6b4     58 2A 0E 52 |  if_ne	cmp	local07, #88 wz
1b6b8     48 2A 0E 52 |  if_ne	cmp	local07, #72 wz
1b6bc     14 00 90 5D |  if_ne	jmp	#LR__2653
1b6c0     0F 13 02 F6 | 	mov	arg01, local01
1b6c4     10 14 06 F6 | 	mov	arg02, #16
1b6c8     EC FE BF FD | 	call	#__system____builtin_atoi
1b6cc     FD 22 02 F6 | 	mov	local03, result1
1b6d0     3C 00 90 FD | 	jmp	#LR__2657
1b6d4                 | LR__2653
1b6d4     62 2A 0E F2 | 	cmp	local07, #98 wz
1b6d8     42 2A 0E 52 |  if_ne	cmp	local07, #66 wz
1b6dc     14 00 90 5D |  if_ne	jmp	#LR__2654
1b6e0     0F 13 02 F6 | 	mov	arg01, local01
1b6e4     02 14 06 F6 | 	mov	arg02, #2
1b6e8     CC FE BF FD | 	call	#__system____builtin_atoi
1b6ec     FD 22 02 F6 | 	mov	local03, result1
1b6f0     1C 00 90 FD | 	jmp	#LR__2656
1b6f4                 | LR__2654
1b6f4     6F 2A 0E F2 | 	cmp	local07, #111 wz
1b6f8     4F 2A 0E 52 |  if_ne	cmp	local07, #79 wz
1b6fc     10 00 90 5D |  if_ne	jmp	#LR__2655
1b700     0F 13 02 F6 | 	mov	arg01, local01
1b704     08 14 06 F6 | 	mov	arg02, #8
1b708     AC FE BF FD | 	call	#__system____builtin_atoi
1b70c     FD 22 02 F6 | 	mov	local03, result1
1b710                 | LR__2655
1b710                 | LR__2656
1b710                 | LR__2657
1b710                 | LR__2658
1b710     00 26 0E F2 | 	cmp	local05, #0 wz
1b714     11 23 62 56 |  if_ne	neg	local03, local03
1b718     11 FB 01 F6 | 	mov	result1, local03
1b71c     A7 F0 03 F6 | 	mov	ptra, fp
1b720     B2 00 A0 FD | 	call	#popregs_
1b724                 | __system____builtin_atoi_ret
1b724     2D 00 64 FD | 	ret
1b728                 | 
1b728                 | __system____builtin_atof
1b728     07 4A 05 F6 | 	mov	COUNT_, #7
1b72c     A8 00 A0 FD | 	call	#pushregs_
1b730     09 1F 02 F6 | 	mov	local01, arg01
1b734     00 20 06 F6 | 	mov	local02, #0
1b738     00 22 06 F6 | 	mov	local03, #0
1b73c     00 24 06 F6 | 	mov	local04, #0
1b740     00 26 06 F6 | 	mov	local05, #0
1b744     97 08 48 FB | 	callpa	#(@LR__2661-@LR__2660)>>2,fcache_load_ptr_
1b748                 | LR__2660
1b748     0F 17 C2 FA | 	rdbyte	arg03, local01
1b74c     20 16 0E F2 | 	cmp	arg03, #32 wz
1b750     01 1E 06 A1 |  if_e	add	local01, #1
1b754     F0 FF 9F AD |  if_e	jmp	#LR__2660
1b758                 | LR__2661
1b758     0F 29 C2 FA | 	rdbyte	local06, local01
1b75c                 | LR__2662
1b75c     2B 28 0E F2 | 	cmp	local06, #43 wz
1b760     2D 28 0E 52 |  if_ne	cmp	local06, #45 wz
1b764     14 00 90 5D |  if_ne	jmp	#LR__2663
1b768     2D 28 0E F2 | 	cmp	local06, #45 wz
1b76c     1F 24 E6 A4 |  if_e	bitnot	local04, #31
1b770     01 1E 06 F1 | 	add	local01, #1
1b774     0F 29 C2 FA | 	rdbyte	local06, local01
1b778     E0 FF 9F FD | 	jmp	#LR__2662
1b77c                 | LR__2663
1b77c                 | LR__2664
1b77c     97 08 48 FB | 	callpa	#(@LR__2666-@LR__2665)>>2,fcache_load_ptr_
1b780                 | LR__2665
1b780     0F 29 C2 FA | 	rdbyte	local06, local01
1b784     5F 28 0E F2 | 	cmp	local06, #95 wz
1b788     01 1E 06 F1 | 	add	local01, #1
1b78c     F0 FF 9F AD |  if_e	jmp	#LR__2665
1b790                 | LR__2666
1b790     00 28 0E F2 | 	cmp	local06, #0 wz
1b794     5C 00 90 AD |  if_e	jmp	#LR__2668
1b798     30 28 56 F2 | 	cmps	local06, #48 wc
1b79c     44 00 90 CD |  if_b	jmp	#LR__2667
1b7a0     3A 28 56 F2 | 	cmps	local06, #58 wc
1b7a4     3C 00 90 3D |  if_ae	jmp	#LR__2667
1b7a8     10 13 02 F6 | 	mov	arg01, local02
1b7ac     00 90 20 FF 
1b7b0     00 14 06 F6 | 	mov	arg02, ##1092616192
1b7b4     88 F7 BF FD | 	call	#__system___float_mul
1b7b8     FD 20 02 F6 | 	mov	local02, result1
1b7bc     30 28 86 F1 | 	sub	local06, #48
1b7c0     14 13 02 F6 | 	mov	arg01, local06
1b7c4     74 F3 BF FD | 	call	#__system___float_fromuns
1b7c8     FD 14 02 F6 | 	mov	arg02, result1
1b7cc     10 13 02 F6 | 	mov	arg01, local02
1b7d0     9C F3 BF FD | 	call	#__system___float_add
1b7d4     FD 20 02 F6 | 	mov	local02, result1
1b7d8     00 26 0E F2 | 	cmp	local05, #0 wz
1b7dc     01 22 86 51 |  if_ne	sub	local03, #1
1b7e0     98 FF 9F FD | 	jmp	#LR__2664
1b7e4                 | LR__2667
1b7e4     2E 28 0E F2 | 	cmp	local06, #46 wz
1b7e8     00 26 0E A2 |  if_e	cmp	local05, #0 wz
1b7ec     01 26 06 A6 |  if_e	mov	local05, #1
1b7f0     88 FF 9F AD |  if_e	jmp	#LR__2664
1b7f4                 | LR__2668
1b7f4     45 28 0E F2 | 	cmp	local06, #69 wz
1b7f8     65 28 0E 52 |  if_ne	cmp	local06, #101 wz
1b7fc     18 00 90 5D |  if_ne	jmp	#LR__2669
1b800     0F 13 02 F6 | 	mov	arg01, local01
1b804     00 14 06 F6 | 	mov	arg02, #0
1b808     AC FD BF FD | 	call	#__system____builtin_atoi
1b80c     11 FB 01 F1 | 	add	result1, local03
1b810     FD 2A 02 F6 | 	mov	local07, result1
1b814     04 00 90 FD | 	jmp	#LR__2670
1b818                 | LR__2669
1b818     11 2B 02 F6 | 	mov	local07, local03
1b81c                 | LR__2670
1b81c     15 17 02 F6 | 	mov	arg03, local07
1b820     10 13 02 F6 | 	mov	arg01, local02
1b824     00 90 20 FF 
1b828     00 14 06 F6 | 	mov	arg02, ##1092616192
1b82c     BC 06 B0 FD | 	call	#__system___float_pow_n
1b830     12 FB 61 F5 | 	xor	result1, local04
1b834     A7 F0 03 F6 | 	mov	ptra, fp
1b838     B2 00 A0 FD | 	call	#popregs_
1b83c                 | __system____builtin_atof_ret
1b83c     2D 00 64 FD | 	ret
1b840                 | 
1b840                 | __system____builtin_ilogb
1b840     20 FC BF FD | 	call	#__system___float_Unpack
1b844     00 FE 0D F2 | 	cmp	result3, #0 wz
1b848     00 00 40 AF 
1b84c     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
1b850     24 00 90 AD |  if_e	jmp	#LR__2681
1b854     80 FC 0D F2 | 	cmp	result2, #128 wz
1b858     18 00 90 5D |  if_ne	jmp	#LR__2680
1b85c     00 00 10 FF 
1b860     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
1b864     1E FA CD A9 |  if_e	bmask	result1, #30
1b868     0C 00 90 AD |  if_e	jmp	#LR__2681
1b86c     1F FA C5 F9 | 	decod	result1, #31
1b870     04 00 90 FD | 	jmp	#LR__2681
1b874                 | LR__2680
1b874     FE FA 01 F6 | 	mov	result1, result2
1b878                 | LR__2681
1b878                 | __system____builtin_ilogb_ret
1b878     2D 00 64 FD | 	ret
1b87c                 | 
1b87c                 | __system____builtin_sinf
1b87c     03 4A 05 F6 | 	mov	COUNT_, #3
1b880     A8 00 A0 FD | 	call	#pushregs_
1b884     09 1F 02 F6 | 	mov	local01, arg01
1b888     87 64 20 FF 
1b88c     DB 15 06 F6 | 	mov	arg02, ##1086918619
1b890     B0 F8 BF FD | 	call	#__system___float_div
1b894     FD 12 02 F6 | 	mov	arg01, result1
1b898     00 14 06 F6 | 	mov	arg02, #0
1b89c     68 FB BF FD | 	call	#__system___float_tointeger
1b8a0     FD 16 0A F6 | 	mov	arg03, result1 wz
1b8a4     44 00 90 AD |  if_e	jmp	#LR__2690
1b8a8     0B 13 52 F6 | 	abs	arg01, arg03 wc
1b8ac     1F 20 C6 C9 |  if_b	decod	local02, #31
1b8b0     00 20 06 36 |  if_ae	mov	local02, #0
1b8b4     84 F2 BF FD | 	call	#__system___float_fromuns
1b8b8     10 FB 61 F5 | 	xor	result1, local02
1b8bc     FD 12 02 F6 | 	mov	arg01, result1
1b8c0     1E 14 C6 F9 | 	decod	arg02, #30
1b8c4     78 F6 BF FD | 	call	#__system___float_mul
1b8c8     FD 12 02 F6 | 	mov	arg01, result1
1b8cc     87 24 20 FF 
1b8d0     DB 15 06 F6 | 	mov	arg02, ##1078530011
1b8d4     68 F6 BF FD | 	call	#__system___float_mul
1b8d8     FD 14 02 F6 | 	mov	arg02, result1
1b8dc     0F 13 02 F6 | 	mov	arg01, local01
1b8e0     1F 14 E6 F4 | 	bitnot	arg02, #31
1b8e4     88 F2 BF FD | 	call	#__system___float_add
1b8e8     FD 1E 02 F6 | 	mov	local01, result1
1b8ec                 | LR__2690
1b8ec     0F 13 02 F6 | 	mov	arg01, local01
1b8f0     66 E6 1E FF 
1b8f4     CD 14 06 F6 | 	mov	arg02, ##1036831949
1b8f8     01 16 06 F6 | 	mov	arg03, #1
1b8fc     74 FA BF FD | 	call	#__system___float_cmp
1b900     00 FA 55 F2 | 	cmps	result1, #0 wc
1b904     5C 00 90 3D |  if_ae	jmp	#LR__2691
1b908     0F 13 02 F6 | 	mov	arg01, local01
1b90c     66 E6 5E FF 
1b910     CD 14 06 F6 | 	mov	arg02, ##-1110651699
1b914     01 16 66 F6 | 	neg	arg03, #1
1b918     58 FA BF FD | 	call	#__system___float_cmp
1b91c     01 FA 55 F2 | 	cmps	result1, #1 wc
1b920     40 00 90 CD |  if_b	jmp	#LR__2691
1b924     0F 13 02 F6 | 	mov	arg01, local01
1b928     0F 15 02 F6 | 	mov	arg02, local01
1b92c     10 F6 BF FD | 	call	#__system___float_mul
1b930     FD 12 02 F6 | 	mov	arg01, result1
1b934     0F 15 02 F6 | 	mov	arg02, local01
1b938     04 F6 BF FD | 	call	#__system___float_mul
1b93c     FD 12 02 F6 | 	mov	arg01, result1
1b940     00 60 20 FF 
1b944     00 14 06 F6 | 	mov	arg02, ##1086324736
1b948     F8 F7 BF FD | 	call	#__system___float_div
1b94c     FD 14 02 F6 | 	mov	arg02, result1
1b950     0F 13 02 F6 | 	mov	arg01, local01
1b954     1F 14 E6 F4 | 	bitnot	arg02, #31
1b958     14 F2 BF FD | 	call	#__system___float_add
1b95c     FD 22 02 F6 | 	mov	local03, result1
1b960     54 00 90 FD | 	jmp	#LR__2692
1b964                 | LR__2691
1b964     0F 13 02 F6 | 	mov	arg01, local01
1b968     7C 91 26 FF 
1b96c     83 15 06 F6 | 	mov	arg02, ##1294137731
1b970     CC F5 BF FD | 	call	#__system___float_mul
1b974     FD 12 02 F6 | 	mov	arg01, result1
1b978     00 14 06 F6 | 	mov	arg02, #0
1b97c     88 FA BF FD | 	call	#__system___float_tointeger
1b980     02 FA 65 F0 | 	shl	result1, #2
1b984     00 00 A0 FF 
1b988     FD 00 48 FD | 	qrotate	##1073741824, result1
1b98c     19 12 62 FD | 	getqy	arg01
1b990     09 13 52 F6 | 	abs	arg01, arg01 wc
1b994     1F 20 C6 C9 |  if_b	decod	local02, #31
1b998     00 20 06 36 |  if_ae	mov	local02, #0
1b99c     9C F1 BF FD | 	call	#__system___float_fromuns
1b9a0     10 FB 61 F5 | 	xor	result1, local02
1b9a4     FD 12 02 F6 | 	mov	arg01, result1
1b9a8     00 40 27 FF 
1b9ac     00 14 06 F6 | 	mov	arg02, ##1317011456
1b9b0     90 F7 BF FD | 	call	#__system___float_div
1b9b4     FD 22 02 F6 | 	mov	local03, result1
1b9b8                 | LR__2692
1b9b8     11 FB 01 F6 | 	mov	result1, local03
1b9bc     A7 F0 03 F6 | 	mov	ptra, fp
1b9c0     B2 00 A0 FD | 	call	#popregs_
1b9c4                 | __system____builtin_sinf_ret
1b9c4     2D 00 64 FD | 	ret
1b9c8                 | 
1b9c8                 | __system____builtin_tanf
1b9c8     02 4A 05 F6 | 	mov	COUNT_, #2
1b9cc     A8 00 A0 FD | 	call	#pushregs_
1b9d0     09 1F 02 F6 | 	mov	local01, arg01
1b9d4     A4 FE BF FD | 	call	#__system____builtin_sinf
1b9d8     FD 20 02 F6 | 	mov	local02, result1
1b9dc     0F 15 02 F6 | 	mov	arg02, local01
1b9e0     87 E4 1F FF 
1b9e4     DB 13 06 F6 | 	mov	arg01, ##1070141403
1b9e8     1F 14 E6 F4 | 	bitnot	arg02, #31
1b9ec     80 F1 BF FD | 	call	#__system___float_add
1b9f0     FD 12 02 F6 | 	mov	arg01, result1
1b9f4     84 FE BF FD | 	call	#__system____builtin_sinf
1b9f8     FD 14 02 F6 | 	mov	arg02, result1
1b9fc     10 13 02 F6 | 	mov	arg01, local02
1ba00     40 F7 BF FD | 	call	#__system___float_div
1ba04     A7 F0 03 F6 | 	mov	ptra, fp
1ba08     B2 00 A0 FD | 	call	#popregs_
1ba0c                 | __system____builtin_tanf_ret
1ba0c     2D 00 64 FD | 	ret
1ba10                 | 
1ba10                 | __system____builtin_asinf
1ba10     01 4A 05 F6 | 	mov	COUNT_, #1
1ba14     A8 00 A0 FD | 	call	#pushregs_
1ba18     09 1F 02 F6 | 	mov	local01, arg01
1ba1c     0F 15 02 F6 | 	mov	arg02, local01
1ba20     0F 13 02 F6 | 	mov	arg01, local01
1ba24     18 F5 BF FD | 	call	#__system___float_mul
1ba28     FD 14 02 F6 | 	mov	arg02, result1
1ba2c     00 C0 1F FF 
1ba30     00 12 06 F6 | 	mov	arg01, ##1065353216
1ba34     1F 14 E6 F4 | 	bitnot	arg02, #31
1ba38     34 F1 BF FD | 	call	#__system___float_add
1ba3c     FD 12 02 F6 | 	mov	arg01, result1
1ba40     24 F4 BF FD | 	call	#__system___float_sqrt
1ba44     FD 14 02 F6 | 	mov	arg02, result1
1ba48     0F 13 02 F6 | 	mov	arg01, local01
1ba4c     58 00 B0 FD | 	call	#__system____builtin_atan2f
1ba50     A7 F0 03 F6 | 	mov	ptra, fp
1ba54     B2 00 A0 FD | 	call	#popregs_
1ba58                 | __system____builtin_asinf_ret
1ba58     2D 00 64 FD | 	ret
1ba5c                 | 
1ba5c                 | __system____builtin_acosf
1ba5c     01 4A 05 F6 | 	mov	COUNT_, #1
1ba60     A8 00 A0 FD | 	call	#pushregs_
1ba64     09 1F 02 F6 | 	mov	local01, arg01
1ba68     0F 15 02 F6 | 	mov	arg02, local01
1ba6c     0F 13 02 F6 | 	mov	arg01, local01
1ba70     CC F4 BF FD | 	call	#__system___float_mul
1ba74     FD 14 02 F6 | 	mov	arg02, result1
1ba78     00 C0 1F FF 
1ba7c     00 12 06 F6 | 	mov	arg01, ##1065353216
1ba80     1F 14 E6 F4 | 	bitnot	arg02, #31
1ba84     E8 F0 BF FD | 	call	#__system___float_add
1ba88     FD 12 02 F6 | 	mov	arg01, result1
1ba8c     D8 F3 BF FD | 	call	#__system___float_sqrt
1ba90     FD 12 02 F6 | 	mov	arg01, result1
1ba94     0F 15 02 F6 | 	mov	arg02, local01
1ba98     0C 00 B0 FD | 	call	#__system____builtin_atan2f
1ba9c     A7 F0 03 F6 | 	mov	ptra, fp
1baa0     B2 00 A0 FD | 	call	#popregs_
1baa4                 | __system____builtin_acosf_ret
1baa4     2D 00 64 FD | 	ret
1baa8                 | 
1baa8                 | __system____builtin_atan2f
1baa8     04 4A 05 F6 | 	mov	COUNT_, #4
1baac     A8 00 A0 FD | 	call	#pushregs_
1bab0     09 1F 02 F6 | 	mov	local01, arg01
1bab4     0A 21 02 F6 | 	mov	local02, arg02
1bab8     0F 13 02 F6 | 	mov	arg01, local01
1babc     00 14 06 F6 | 	mov	arg02, #0
1bac0     01 16 06 F6 | 	mov	arg03, #1
1bac4     AC F8 BF FD | 	call	#__system___float_cmp
1bac8     00 FA 0D F2 | 	cmp	result1, #0 wz
1bacc     28 00 90 5D |  if_ne	jmp	#LR__2700
1bad0     10 13 02 F6 | 	mov	arg01, local02
1bad4     00 14 06 F6 | 	mov	arg02, #0
1bad8     01 16 06 F6 | 	mov	arg03, #1
1badc     94 F8 BF FD | 	call	#__system___float_cmp
1bae0     00 FA 55 F2 | 	cmps	result1, #0 wc
1bae4     87 24 60 CF 
1bae8     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
1baec     DC 00 90 CD |  if_b	jmp	#LR__2701
1baf0     00 FA 05 F6 | 	mov	result1, #0
1baf4     D4 00 90 FD | 	jmp	#LR__2701
1baf8                 | LR__2700
1baf8     10 13 02 F6 | 	mov	arg01, local02
1bafc     10 15 02 F6 | 	mov	arg02, local02
1bb00     3C F4 BF FD | 	call	#__system___float_mul
1bb04     FD 22 02 F6 | 	mov	local03, result1
1bb08     0F 13 02 F6 | 	mov	arg01, local01
1bb0c     0F 15 02 F6 | 	mov	arg02, local01
1bb10     2C F4 BF FD | 	call	#__system___float_mul
1bb14     FD 14 02 F6 | 	mov	arg02, result1
1bb18     11 13 02 F6 | 	mov	arg01, local03
1bb1c     50 F0 BF FD | 	call	#__system___float_add
1bb20     FD 12 02 F6 | 	mov	arg01, result1
1bb24     40 F3 BF FD | 	call	#__system___float_sqrt
1bb28     FD 22 02 F6 | 	mov	local03, result1
1bb2c     10 13 02 F6 | 	mov	arg01, local02
1bb30     11 15 02 F6 | 	mov	arg02, local03
1bb34     0C F6 BF FD | 	call	#__system___float_div
1bb38     FD 20 02 F6 | 	mov	local02, result1
1bb3c     0F 13 02 F6 | 	mov	arg01, local01
1bb40     11 15 02 F6 | 	mov	arg02, local03
1bb44     FC F5 BF FD | 	call	#__system___float_div
1bb48     FD 1E 02 F6 | 	mov	local01, result1
1bb4c     00 40 27 FF 
1bb50     00 12 06 F6 | 	mov	arg01, ##1317011456
1bb54     10 15 02 F6 | 	mov	arg02, local02
1bb58     E4 F3 BF FD | 	call	#__system___float_mul
1bb5c     FD 12 02 F6 | 	mov	arg01, result1
1bb60     00 14 06 F6 | 	mov	arg02, #0
1bb64     A0 F8 BF FD | 	call	#__system___float_tointeger
1bb68     FD 22 02 F6 | 	mov	local03, result1
1bb6c     00 40 27 FF 
1bb70     00 12 06 F6 | 	mov	arg01, ##1317011456
1bb74     0F 15 02 F6 | 	mov	arg02, local01
1bb78     C4 F3 BF FD | 	call	#__system___float_mul
1bb7c     FD 12 02 F6 | 	mov	arg01, result1
1bb80     00 14 06 F6 | 	mov	arg02, #0
1bb84     80 F8 BF FD | 	call	#__system___float_tointeger
1bb88     FD 22 52 FD | 	qvector	local03, result1
1bb8c     87 24 20 FF 
1bb90     DB 23 06 F6 | 	mov	local03, ##1078530011
1bb94     19 12 62 FD | 	getqy	arg01
1bb98     01 12 C6 F0 | 	sar	arg01, #1
1bb9c     09 13 52 F6 | 	abs	arg01, arg01 wc
1bba0     1F 24 C6 C9 |  if_b	decod	local04, #31
1bba4     00 24 06 36 |  if_ae	mov	local04, #0
1bba8     90 EF BF FD | 	call	#__system___float_fromuns
1bbac     12 FB 61 F5 | 	xor	result1, local04
1bbb0     FD 12 02 F6 | 	mov	arg01, result1
1bbb4     00 40 27 FF 
1bbb8     00 14 06 F6 | 	mov	arg02, ##1317011456
1bbbc     84 F5 BF FD | 	call	#__system___float_div
1bbc0     FD 14 02 F6 | 	mov	arg02, result1
1bbc4     11 13 02 F6 | 	mov	arg01, local03
1bbc8     74 F3 BF FD | 	call	#__system___float_mul
1bbcc                 | LR__2701
1bbcc     A7 F0 03 F6 | 	mov	ptra, fp
1bbd0     B2 00 A0 FD | 	call	#popregs_
1bbd4                 | __system____builtin_atan2f_ret
1bbd4     2D 00 64 FD | 	ret
1bbd8                 | 
1bbd8                 | __system____builtin_exp2f
1bbd8     04 4A 05 F6 | 	mov	COUNT_, #4
1bbdc     A8 00 A0 FD | 	call	#pushregs_
1bbe0     09 1F 02 F6 | 	mov	local01, arg01
1bbe4     00 7F 21 FF 
1bbe8     00 14 06 F6 | 	mov	arg02, ##1123942400
1bbec     01 16 66 F6 | 	neg	arg03, #1
1bbf0     80 F7 BF FD | 	call	#__system___float_cmp
1bbf4     00 FA 55 F2 | 	cmps	result1, #0 wc
1bbf8     00 C0 3F 3F 
1bbfc     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
1bc00     DC 00 90 3D |  if_ae	jmp	#LR__2711
1bc04     0F 13 02 F6 | 	mov	arg01, local01
1bc08     00 7F 61 FF 
1bc0c     00 14 06 F6 | 	mov	arg02, ##-1023541248
1bc10     01 16 06 F6 | 	mov	arg03, #1
1bc14     5C F7 BF FD | 	call	#__system___float_cmp
1bc18     00 FA 55 F2 | 	cmps	result1, #0 wc
1bc1c     00 FA 05 C6 |  if_b	mov	result1, #0
1bc20     BC 00 90 CD |  if_b	jmp	#LR__2711
1bc24     0F 13 02 F6 | 	mov	arg01, local01
1bc28     00 14 06 F6 | 	mov	arg02, #0
1bc2c     D8 F7 BF FD | 	call	#__system___float_tointeger
1bc30     FD 20 02 F6 | 	mov	local02, result1
1bc34     10 13 52 F6 | 	abs	arg01, local02 wc
1bc38     1F 22 C6 C9 |  if_b	decod	local03, #31
1bc3c     00 22 06 36 |  if_ae	mov	local03, #0
1bc40     F8 EE BF FD | 	call	#__system___float_fromuns
1bc44     11 FB 61 F5 | 	xor	result1, local03
1bc48     FD 14 02 F6 | 	mov	arg02, result1
1bc4c     0F 13 02 F6 | 	mov	arg01, local01
1bc50     1F 14 E6 F4 | 	bitnot	arg02, #31
1bc54     18 EF BF FD | 	call	#__system___float_add
1bc58     FD 24 02 F6 | 	mov	local04, result1
1bc5c     12 13 02 F6 | 	mov	arg01, local04
1bc60     00 14 06 F6 | 	mov	arg02, #0
1bc64     01 16 06 F6 | 	mov	arg03, #1
1bc68     08 F7 BF FD | 	call	#__system___float_cmp
1bc6c     00 FA 55 F2 | 	cmps	result1, #0 wc
1bc70     18 00 90 3D |  if_ae	jmp	#LR__2710
1bc74     12 13 02 F6 | 	mov	arg01, local04
1bc78     00 C0 1F FF 
1bc7c     00 14 06 F6 | 	mov	arg02, ##1065353216
1bc80     EC EE BF FD | 	call	#__system___float_add
1bc84     FD 24 02 F6 | 	mov	local04, result1
1bc88     01 20 86 F1 | 	sub	local02, #1
1bc8c                 | LR__2710
1bc8c     7F 20 06 F1 | 	add	local02, #127
1bc90     17 20 66 F0 | 	shl	local02, #23
1bc94     12 13 02 F6 | 	mov	arg01, local04
1bc98     00 80 26 FF 
1bc9c     00 14 06 F6 | 	mov	arg02, ##1291845632
1bca0     9C F2 BF FD | 	call	#__system___float_mul
1bca4     FD 12 02 F6 | 	mov	arg01, result1
1bca8     00 14 06 F6 | 	mov	arg02, #0
1bcac     58 F7 BF FD | 	call	#__system___float_tointeger
1bcb0     FD 24 0A F6 | 	mov	local04, result1 wz
1bcb4     10 FB 01 A6 |  if_e	mov	result1, local02
1bcb8     24 00 90 AD |  if_e	jmp	#LR__2711
1bcbc     3E 24 26 F4 | 	bith	local04, #62
1bcc0     0F 24 62 FD | 	qexp	local04
1bcc4     10 13 02 F6 | 	mov	arg01, local02
1bcc8     18 14 62 FD | 	getqx	arg02
1bccc     01 14 06 F1 | 	add	arg02, #1
1bcd0     01 14 46 F0 | 	shr	arg02, #1
1bcd4     00 80 1F FF 
1bcd8     00 14 06 F1 | 	add	arg02, ##1056964608
1bcdc     60 F2 BF FD | 	call	#__system___float_mul
1bce0                 | LR__2711
1bce0     A7 F0 03 F6 | 	mov	ptra, fp
1bce4     B2 00 A0 FD | 	call	#popregs_
1bce8                 | __system____builtin_exp2f_ret
1bce8     2D 00 64 FD | 	ret
1bcec                 | 
1bcec                 | __system____builtin_log2f
1bcec     06 4A 05 F6 | 	mov	COUNT_, #6
1bcf0     A8 00 A0 FD | 	call	#pushregs_
1bcf4     09 1F 02 F6 | 	mov	local01, arg01
1bcf8     09 21 0A F6 | 	mov	local02, arg01 wz
1bcfc     00 00 40 5F 
1bd00     00 20 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
1bd04     00 40 00 AF 
1bd08     00 FA 65 A6 |  if_e	neg	result1, ##8388608
1bd0c     08 01 90 AD |  if_e	jmp	#LR__2724
1bd10     00 20 56 F2 | 	cmps	local02, #0 wc
1bd14     00 E0 3F CF 
1bd18     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
1bd1c     F8 00 90 CD |  if_b	jmp	#LR__2724
1bd20     0F 13 02 F6 | 	mov	arg01, local01
1bd24     00 90 20 FF 
1bd28     00 14 06 F6 | 	mov	arg02, ##1092616192
1bd2c     01 16 06 F6 | 	mov	arg03, #1
1bd30     40 F6 BF FD | 	call	#__system___float_cmp
1bd34     00 FA 0D F2 | 	cmp	result1, #0 wz
1bd38     4D 2A 20 AF 
1bd3c     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
1bd40     D4 00 90 AD |  if_e	jmp	#LR__2724
1bd44     0F 13 02 F6 | 	mov	arg01, local01
1bd48     FC 16 20 FF 
1bd4c     54 14 06 F6 | 	mov	arg02, ##1076754516
1bd50     01 16 06 F6 | 	mov	arg03, #1
1bd54     1C F6 BF FD | 	call	#__system___float_cmp
1bd58     00 FA 0D F2 | 	cmp	result1, #0 wz
1bd5c     55 DC 1F AF 
1bd60     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
1bd64     B0 00 90 AD |  if_e	jmp	#LR__2724
1bd68     10 23 02 F6 | 	mov	local03, local02
1bd6c     17 22 46 F0 | 	shr	local03, #23
1bd70     11 23 E2 F8 | 	getbyte	local03, local03, #0
1bd74     17 21 06 F4 | 	bitl	local02, #279
1bd78     10 25 02 F6 | 	mov	local04, local02
1bd7c     FF 22 0E F2 | 	cmp	local03, #255 wz
1bd80     1C 00 90 5D |  if_ne	jmp	#LR__2720
1bd84     00 24 0E F2 | 	cmp	local04, #0 wz
1bd88     00 C0 3F 5F 
1bd8c     00 26 06 56 |  if_ne	mov	local05, ##2139095040
1bd90     00 E0 3F AF 
1bd94     00 26 06 A6 |  if_e	mov	local05, ##2143289344
1bd98     13 FB 01 F6 | 	mov	result1, local05
1bd9c     78 00 90 FD | 	jmp	#LR__2724
1bda0                 | LR__2720
1bda0     00 22 0E F2 | 	cmp	local03, #0 wz
1bda4     17 24 26 54 |  if_ne	bith	local04, #23
1bda8     7F 22 86 51 |  if_ne	sub	local03, #127
1bdac     28 00 90 5D |  if_ne	jmp	#LR__2723
1bdb0     00 24 0E F2 | 	cmp	local04, #0 wz
1bdb4     00 40 00 AF 
1bdb8     00 FA 65 A6 |  if_e	neg	result1, ##8388608
1bdbc     58 00 90 AD |  if_e	jmp	#LR__2724
1bdc0     7E 22 66 F6 | 	neg	local03, #126
1bdc4     97 08 48 FB | 	callpa	#(@LR__2722-@LR__2721)>>2,fcache_load_ptr_
1bdc8                 | LR__2721
1bdc8     17 24 2E F4 | 	testbn	local04, #23 wz
1bdcc     01 24 66 A0 |  if_e	shl	local04, #1
1bdd0     01 22 06 A1 |  if_e	add	local03, #1
1bdd4     F0 FF 9F AD |  if_e	jmp	#LR__2721
1bdd8                 | LR__2722
1bdd8                 | LR__2723
1bdd8     0E 24 62 FD | 	qlog	local04
1bddc     01 22 86 F1 | 	sub	local03, #1
1bde0     11 13 52 F6 | 	abs	arg01, local03 wc
1bde4     1F 28 C6 C9 |  if_b	decod	local06, #31
1bde8     00 28 06 36 |  if_ae	mov	local06, #0
1bdec     18 26 62 FD | 	getqx	local05
1bdf0     9B 26 06 F4 | 	bitl	local05, #155
1bdf4     08 26 06 F1 | 	add	local05, #8
1bdf8     04 26 46 F0 | 	shr	local05, #4
1bdfc     00 C0 1F FF 
1be00     00 26 06 F1 | 	add	local05, ##1065353216
1be04     34 ED BF FD | 	call	#__system___float_fromuns
1be08     14 FB 61 F5 | 	xor	result1, local06
1be0c     FD 14 02 F6 | 	mov	arg02, result1
1be10     13 13 02 F6 | 	mov	arg01, local05
1be14     58 ED BF FD | 	call	#__system___float_add
1be18                 | LR__2724
1be18     A7 F0 03 F6 | 	mov	ptra, fp
1be1c     B2 00 A0 FD | 	call	#popregs_
1be20                 | __system____builtin_log2f_ret
1be20     2D 00 64 FD | 	ret
1be24                 | 
1be24                 | __system____builtin_powf
1be24     04 4A 05 F6 | 	mov	COUNT_, #4
1be28     A8 00 A0 FD | 	call	#pushregs_
1be2c     09 1F 02 F6 | 	mov	local01, arg01
1be30     0A 21 02 F6 | 	mov	local02, arg02
1be34     10 13 02 F6 | 	mov	arg01, local02
1be38     00 14 06 F6 | 	mov	arg02, #0
1be3c     C8 F5 BF FD | 	call	#__system___float_tointeger
1be40     FD 22 02 F6 | 	mov	local03, result1
1be44     11 13 52 F6 | 	abs	arg01, local03 wc
1be48     1F 24 C6 C9 |  if_b	decod	local04, #31
1be4c     00 24 06 36 |  if_ae	mov	local04, #0
1be50     E8 EC BF FD | 	call	#__system___float_fromuns
1be54     12 FB 61 F5 | 	xor	result1, local04
1be58     FD 12 02 F6 | 	mov	arg01, result1
1be5c     10 15 02 F6 | 	mov	arg02, local02
1be60     01 16 06 F6 | 	mov	arg03, #1
1be64     0C F5 BF FD | 	call	#__system___float_cmp
1be68     00 FA 0D F2 | 	cmp	result1, #0 wz
1be6c     18 00 90 5D |  if_ne	jmp	#LR__2730
1be70     00 C0 1F FF 
1be74     00 12 06 F6 | 	mov	arg01, ##1065353216
1be78     0F 15 02 F6 | 	mov	arg02, local01
1be7c     11 17 02 F6 | 	mov	arg03, local03
1be80     68 00 B0 FD | 	call	#__system___float_pow_n
1be84     58 00 90 FD | 	jmp	#LR__2731
1be88                 | LR__2730
1be88     0F 13 02 F6 | 	mov	arg01, local01
1be8c     00 14 06 F6 | 	mov	arg02, #0
1be90     01 16 06 F6 | 	mov	arg03, #1
1be94     DC F4 BF FD | 	call	#__system___float_cmp
1be98     00 FA 55 F2 | 	cmps	result1, #0 wc
1be9c     00 E0 3F CF 
1bea0     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
1bea4     38 00 90 CD |  if_b	jmp	#LR__2731
1bea8     0F 13 02 F6 | 	mov	arg01, local01
1beac     00 14 06 F6 | 	mov	arg02, #0
1beb0     01 16 06 F6 | 	mov	arg03, #1
1beb4     BC F4 BF FD | 	call	#__system___float_cmp
1beb8     00 FA 0D F2 | 	cmp	result1, #0 wz
1bebc     00 FA 05 A6 |  if_e	mov	result1, #0
1bec0     1C 00 90 AD |  if_e	jmp	#LR__2731
1bec4     0F 13 02 F6 | 	mov	arg01, local01
1bec8     20 FE BF FD | 	call	#__system____builtin_log2f
1becc     FD 12 02 F6 | 	mov	arg01, result1
1bed0     10 15 02 F6 | 	mov	arg02, local02
1bed4     68 F0 BF FD | 	call	#__system___float_mul
1bed8     FD 12 02 F6 | 	mov	arg01, result1
1bedc     F8 FC BF FD | 	call	#__system____builtin_exp2f
1bee0                 | LR__2731
1bee0     A7 F0 03 F6 | 	mov	ptra, fp
1bee4     B2 00 A0 FD | 	call	#popregs_
1bee8                 | __system____builtin_powf_ret
1bee8     2D 00 64 FD | 	ret
1beec                 | 
1beec                 | __system___float_pow_n
1beec     05 4A 05 F6 | 	mov	COUNT_, #5
1bef0     A8 00 A0 FD | 	call	#pushregs_
1bef4     09 1F 02 F6 | 	mov	local01, arg01
1bef8     0A 21 02 F6 | 	mov	local02, arg02
1befc     0B 23 02 F6 | 	mov	local03, arg03
1bf00     00 22 56 F2 | 	cmps	local03, #0 wc
1bf04     18 00 90 3D |  if_ae	jmp	#LR__2740
1bf08     01 24 06 F6 | 	mov	local04, #1
1bf0c     11 23 62 F6 | 	neg	local03, local03
1bf10     00 22 56 F2 | 	cmps	local03, #0 wc
1bf14     00 FA 05 C6 |  if_b	mov	result1, #0
1bf18     94 00 90 CD |  if_b	jmp	#LR__2748
1bf1c     04 00 90 FD | 	jmp	#LR__2741
1bf20                 | LR__2740
1bf20     00 24 06 F6 | 	mov	local04, #0
1bf24                 | LR__2741
1bf24     00 C0 1F FF 
1bf28     00 26 06 F6 | 	mov	local05, ##1065353216
1bf2c                 | LR__2742
1bf2c     01 22 56 F2 | 	cmps	local03, #1 wc
1bf30     30 00 90 CD |  if_b	jmp	#LR__2744
1bf34     01 22 CE F7 | 	test	local03, #1 wz
1bf38     10 00 90 AD |  if_e	jmp	#LR__2743
1bf3c     13 13 02 F6 | 	mov	arg01, local05
1bf40     10 15 02 F6 | 	mov	arg02, local02
1bf44     F8 EF BF FD | 	call	#__system___float_mul
1bf48     FD 26 02 F6 | 	mov	local05, result1
1bf4c                 | LR__2743
1bf4c     01 22 C6 F0 | 	sar	local03, #1
1bf50     10 13 02 F6 | 	mov	arg01, local02
1bf54     10 15 02 F6 | 	mov	arg02, local02
1bf58     E4 EF BF FD | 	call	#__system___float_mul
1bf5c     FD 20 02 F6 | 	mov	local02, result1
1bf60     C8 FF 9F FD | 	jmp	#LR__2742
1bf64                 | LR__2744
1bf64     00 24 0E F2 | 	cmp	local04, #0 wz
1bf68     14 00 90 AD |  if_e	jmp	#LR__2745
1bf6c     0F 13 02 F6 | 	mov	arg01, local01
1bf70     13 15 02 F6 | 	mov	arg02, local05
1bf74     CC F1 BF FD | 	call	#__system___float_div
1bf78     FD 26 02 F6 | 	mov	local05, result1
1bf7c     2C 00 90 FD | 	jmp	#LR__2747
1bf80                 | LR__2745
1bf80     0F 13 02 F6 | 	mov	arg01, local01
1bf84     00 C0 1F FF 
1bf88     00 14 06 F6 | 	mov	arg02, ##1065353216
1bf8c     01 16 06 F6 | 	mov	arg03, #1
1bf90     E0 F3 BF FD | 	call	#__system___float_cmp
1bf94     00 FA 0D F2 | 	cmp	result1, #0 wz
1bf98     10 00 90 AD |  if_e	jmp	#LR__2746
1bf9c     0F 13 02 F6 | 	mov	arg01, local01
1bfa0     13 15 02 F6 | 	mov	arg02, local05
1bfa4     98 EF BF FD | 	call	#__system___float_mul
1bfa8     FD 26 02 F6 | 	mov	local05, result1
1bfac                 | LR__2746
1bfac                 | LR__2747
1bfac     13 FB 01 F6 | 	mov	result1, local05
1bfb0                 | LR__2748
1bfb0     A7 F0 03 F6 | 	mov	ptra, fp
1bfb4     B2 00 A0 FD | 	call	#popregs_
1bfb8                 | __system___float_pow_n_ret
1bfb8     2D 00 64 FD | 	ret
1bfbc                 | 
1bfbc                 | __system___gc_ptrs
1bfbc     EC 00 02 F6 | 	mov	_var01, __heap_ptr
1bfc0     00 03 02 F6 | 	mov	_var02, _var01
1bfc4     76 01 00 FF 
1bfc8     F8 03 06 F1 | 	add	_var02, ##191992
1bfcc     00 FD 09 FB | 	rdlong	result2, _var01 wz
1bfd0     74 00 90 5D |  if_ne	jmp	#LR__2750
1bfd4     01 FD 01 F6 | 	mov	result2, _var02
1bfd8     00 FD 81 F1 | 	sub	result2, _var01
1bfdc     00 03 58 FC | 	wrword	#1, _var01
1bfe0     00 FB 01 F6 | 	mov	result1, _var01
1bfe4     02 FA 05 F1 | 	add	result1, #2
1bfe8     36 00 80 FF 
1bfec     FD 20 59 FC | 	wrword	##27792, result1
1bff0     00 FB 01 F6 | 	mov	result1, _var01
1bff4     04 FA 05 F1 | 	add	result1, #4
1bff8     FD 00 58 FC | 	wrword	#0, result1
1bffc     00 FB 01 F6 | 	mov	result1, _var01
1c000     06 FA 05 F1 | 	add	result1, #6
1c004     FD 02 58 FC | 	wrword	#1, result1
1c008     10 00 06 F1 | 	add	_var01, #16
1c00c     FE FC 51 F6 | 	abs	result2, result2 wc
1c010     04 FC 45 F0 | 	shr	result2, #4
1c014     FE FC 81 F6 | 	negc	result2, result2
1c018     00 FD 51 FC | 	wrword	result2, _var01
1c01c     00 FD 01 F6 | 	mov	result2, _var01
1c020     02 FC 05 F1 | 	add	result2, #2
1c024     36 00 80 FF 
1c028     FE 1E 59 FC | 	wrword	##27791, result2
1c02c     00 FD 01 F6 | 	mov	result2, _var01
1c030     04 FC 05 F1 | 	add	result2, #4
1c034     FE 00 58 FC | 	wrword	#0, result2
1c038     00 FD 01 F6 | 	mov	result2, _var01
1c03c     06 FC 05 F1 | 	add	result2, #6
1c040     FE 00 58 FC | 	wrword	#0, result2
1c044     10 00 86 F1 | 	sub	_var01, #16
1c048                 | LR__2750
1c048     00 FB 01 F6 | 	mov	result1, _var01
1c04c     01 FD 01 F6 | 	mov	result2, _var02
1c050                 | __system___gc_ptrs_ret
1c050     2D 00 64 FD | 	ret
1c054                 | 
1c054                 | __system___gc_tryalloc
1c054     0B 4A 05 F6 | 	mov	COUNT_, #11
1c058     A8 00 A0 FD | 	call	#pushregs_
1c05c     09 1F 02 F6 | 	mov	local01, arg01
1c060     0A 21 02 F6 | 	mov	local02, arg02
1c064     54 FF BF FD | 	call	#__system___gc_ptrs
1c068     FD 22 02 F6 | 	mov	local03, result1
1c06c     FE 24 02 F6 | 	mov	local04, result2
1c070     11 27 02 F6 | 	mov	local05, local03
1c074     00 28 06 F6 | 	mov	local06, #0
1c078     97 1E 48 FB | 	callpa	#(@LR__2761-@LR__2760)>>2,fcache_load_ptr_
1c07c                 | LR__2760
1c07c     13 2B 02 F6 | 	mov	local07, local05
1c080     06 26 06 F1 | 	add	local05, #6
1c084     13 15 EA FA | 	rdword	arg02, local05 wz
1c088     11 13 02 F6 | 	mov	arg01, local03
1c08c     00 FA 05 A6 |  if_e	mov	result1, #0
1c090     04 14 66 50 |  if_ne	shl	arg02, #4
1c094     0A 13 02 51 |  if_ne	add	arg01, arg02
1c098     09 FB 01 56 |  if_ne	mov	result1, arg01
1c09c     FD 26 0A F6 | 	mov	local05, result1 wz
1c0a0     13 29 E2 5A |  if_ne	rdword	local06, local05
1c0a4     00 26 0E F2 | 	cmp	local05, #0 wz
1c0a8     12 27 52 52 |  if_ne	cmps	local05, local04 wc
1c0ac     08 00 90 1D |  if_a	jmp	#LR__2762
1c0b0     14 1F 5A 52 |  if_ne	cmps	local01, local06 wcz
1c0b4     C4 FF 9F 1D |  if_a	jmp	#LR__2760
1c0b8                 | LR__2761
1c0b8                 | LR__2762
1c0b8     00 26 0E F2 | 	cmp	local05, #0 wz
1c0bc     13 FB 01 A6 |  if_e	mov	result1, local05
1c0c0     3C 01 90 AD |  if_e	jmp	#LR__2765
1c0c4     13 FD 01 F6 | 	mov	result2, local05
1c0c8     06 FC 05 F1 | 	add	result2, #6
1c0cc     FE 2C E2 FA | 	rdword	local08, result2
1c0d0     14 1F 52 F2 | 	cmps	local01, local06 wc
1c0d4     C0 00 90 3D |  if_ae	jmp	#LR__2764
1c0d8     13 1F 52 FC | 	wrword	local01, local05
1c0dc     13 13 02 F6 | 	mov	arg01, local05
1c0e0     0F 2D 02 F6 | 	mov	local08, local01
1c0e4     04 2C 66 F0 | 	shl	local08, #4
1c0e8     16 13 02 F1 | 	add	arg01, local08
1c0ec     0F 29 82 F1 | 	sub	local06, local01
1c0f0     09 29 52 FC | 	wrword	local06, arg01
1c0f4     09 2D 02 F6 | 	mov	local08, arg01
1c0f8     02 2C 06 F1 | 	add	local08, #2
1c0fc     36 00 80 FF 
1c100     16 1F 59 FC | 	wrword	##27791, local08
1c104     13 15 0A F6 | 	mov	arg02, local05 wz
1c108     00 FA 05 A6 |  if_e	mov	result1, #0
1c10c     11 15 82 51 |  if_ne	sub	arg02, local03
1c110     04 14 46 50 |  if_ne	shr	arg02, #4
1c114     0A FB 01 56 |  if_ne	mov	result1, arg02
1c118     09 2D 02 F6 | 	mov	local08, arg01
1c11c     04 2C 06 F1 | 	add	local08, #4
1c120     16 FB 51 FC | 	wrword	result1, local08
1c124     13 2D 02 F6 | 	mov	local08, local05
1c128     06 2C 06 F1 | 	add	local08, #6
1c12c     09 15 02 F6 | 	mov	arg02, arg01
1c130     16 2D E2 FA | 	rdword	local08, local08
1c134     06 14 06 F1 | 	add	arg02, #6
1c138     0A 2D 52 FC | 	wrword	local08, arg02
1c13c     09 2F 02 F6 | 	mov	local09, arg01
1c140     17 15 0A F6 | 	mov	arg02, local09 wz
1c144     00 FA 05 A6 |  if_e	mov	result1, #0
1c148     11 15 82 51 |  if_ne	sub	arg02, local03
1c14c     04 14 46 50 |  if_ne	shr	arg02, #4
1c150     0A FB 01 56 |  if_ne	mov	result1, arg02
1c154     FD 2C 02 F6 | 	mov	local08, result1
1c158     09 31 EA FA | 	rdword	local10, arg01 wz
1c15c     00 FA 05 A6 |  if_e	mov	result1, #0
1c160     04 30 66 50 |  if_ne	shl	local10, #4
1c164     18 13 02 51 |  if_ne	add	arg01, local10
1c168     09 FB 01 56 |  if_ne	mov	result1, arg01
1c16c     FD 32 0A F6 | 	mov	local11, result1 wz
1c170     24 00 90 AD |  if_e	jmp	#LR__2763
1c174     12 33 52 F2 | 	cmps	local11, local04 wc
1c178     1C 00 90 3D |  if_ae	jmp	#LR__2763
1c17c     17 15 0A F6 | 	mov	arg02, local09 wz
1c180     00 FA 05 A6 |  if_e	mov	result1, #0
1c184     11 15 82 51 |  if_ne	sub	arg02, local03
1c188     04 14 46 50 |  if_ne	shr	arg02, #4
1c18c     0A FB 01 56 |  if_ne	mov	result1, arg02
1c190     04 32 06 F1 | 	add	local11, #4
1c194     19 FB 51 FC | 	wrword	result1, local11
1c198                 | LR__2763
1c198                 | LR__2764
1c198     06 2A 06 F1 | 	add	local07, #6
1c19c     15 2D 52 FC | 	wrword	local08, local07
1c1a0     36 00 00 FF 
1c1a4     80 2E 06 F6 | 	mov	local09, ##27776
1c1a8     10 2F 42 F5 | 	or	local09, local02
1c1ac     00 FA 05 F6 | 	mov	result1, #0
1c1b0     01 FA 61 FD | 	cogid	result1
1c1b4     FD 2E 42 F5 | 	or	local09, result1
1c1b8     13 33 02 F6 | 	mov	local11, local05
1c1bc     02 32 06 F1 | 	add	local11, #2
1c1c0     19 2F 52 FC | 	wrword	local09, local11
1c1c4     11 2F 02 F6 | 	mov	local09, local03
1c1c8     08 2E 06 F1 | 	add	local09, #8
1c1cc     13 33 02 F6 | 	mov	local11, local05
1c1d0     17 2F E2 FA | 	rdword	local09, local09
1c1d4     06 32 06 F1 | 	add	local11, #6
1c1d8     19 2F 52 FC | 	wrword	local09, local11
1c1dc     13 15 0A F6 | 	mov	arg02, local05 wz
1c1e0     00 FA 05 A6 |  if_e	mov	result1, #0
1c1e4     11 15 82 51 |  if_ne	sub	arg02, local03
1c1e8     04 14 46 50 |  if_ne	shr	arg02, #4
1c1ec     0A FB 01 56 |  if_ne	mov	result1, arg02
1c1f0     08 22 06 F1 | 	add	local03, #8
1c1f4     11 FB 51 FC | 	wrword	result1, local03
1c1f8     08 26 06 F1 | 	add	local05, #8
1c1fc     13 FB 01 F6 | 	mov	result1, local05
1c200                 | LR__2765
1c200     A7 F0 03 F6 | 	mov	ptra, fp
1c204     B2 00 A0 FD | 	call	#popregs_
1c208                 | __system___gc_tryalloc_ret
1c208     2D 00 64 FD | 	ret
1c20c                 | 
1c20c                 | __system___gc_alloc_managed
1c20c     01 4A 05 F6 | 	mov	COUNT_, #1
1c210     A8 00 A0 FD | 	call	#pushregs_
1c214     09 1F 02 F6 | 	mov	local01, arg01
1c218     00 14 06 F6 | 	mov	arg02, #0
1c21c     1C 00 B0 FD | 	call	#__system___gc_doalloc
1c220     FD 14 0A F6 | 	mov	arg02, result1 wz
1c224     01 1E 56 A2 |  if_e	cmps	local01, #1 wc
1c228     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
1c22c     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
1c230     A7 F0 03 F6 | 	mov	ptra, fp
1c234     B2 00 A0 FD | 	call	#popregs_
1c238                 | __system___gc_alloc_managed_ret
1c238     2D 00 64 FD | 	ret
1c23c                 | 
1c23c                 | __system___gc_doalloc
1c23c     06 4A 05 F6 | 	mov	COUNT_, #6
1c240     A8 00 A0 FD | 	call	#pushregs_
1c244     09 1F 0A F6 | 	mov	local01, arg01 wz
1c248     0A 21 02 F6 | 	mov	local02, arg02
1c24c     00 FA 05 A6 |  if_e	mov	result1, #0
1c250     8C 00 90 AD |  if_e	jmp	#LR__2777
1c254     17 1E 06 F1 | 	add	local01, #23
1c258     0F 1E 26 F5 | 	andn	local01, #15
1c25c     04 1E 46 F0 | 	shr	local01, #4
1c260     1C E8 05 F1 | 	add	ptr___system__dat__, #28
1c264     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
1c268     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
1c26c     EC C2 BF FD | 	call	#__system___lockmem
1c270     0F 13 02 F6 | 	mov	arg01, local01
1c274     10 15 02 F6 | 	mov	arg02, local02
1c278     D8 FD BF FD | 	call	#__system___gc_tryalloc
1c27c     FD 22 0A F6 | 	mov	local03, result1 wz
1c280     14 00 90 5D |  if_ne	jmp	#LR__2770
1c284     70 03 B0 FD | 	call	#__system___gc_docollect
1c288     0F 13 02 F6 | 	mov	arg01, local01
1c28c     10 15 02 F6 | 	mov	arg02, local02
1c290     C0 FD BF FD | 	call	#__system___gc_tryalloc
1c294     FD 22 02 F6 | 	mov	local03, result1
1c298                 | LR__2770
1c298     1C E8 05 F1 | 	add	ptr___system__dat__, #28
1c29c     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
1c2a0     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
1c2a4     09 01 68 FC | 	wrlong	#0, arg01
1c2a8     00 22 0E F2 | 	cmp	local03, #0 wz
1c2ac     2C 00 90 AD |  if_e	jmp	#LR__2776
1c2b0     04 1E 66 F0 | 	shl	local01, #4
1c2b4     08 1E 86 F1 | 	sub	local01, #8
1c2b8     0F 25 52 F6 | 	abs	local04, local01 wc
1c2bc     02 24 46 F0 | 	shr	local04, #2
1c2c0     12 27 8A F6 | 	negc	local05, local04 wz
1c2c4     11 29 02 F6 | 	mov	local06, local03
1c2c8     10 00 90 AD |  if_e	jmp	#LR__2775
1c2cc     97 06 48 FB | 	callpa	#(@LR__2773-@LR__2771)>>2,fcache_load_ptr_
1c2d0                 | LR__2771
1c2d0     13 05 D8 FC | 	rep	@LR__2774, local05
1c2d4                 | LR__2772
1c2d4     14 01 68 FC | 	wrlong	#0, local06
1c2d8     04 28 06 F1 | 	add	local06, #4
1c2dc                 | LR__2773
1c2dc                 | LR__2774
1c2dc                 | LR__2775
1c2dc                 | LR__2776
1c2dc     11 FB 01 F6 | 	mov	result1, local03
1c2e0                 | LR__2777
1c2e0     A7 F0 03 F6 | 	mov	ptra, fp
1c2e4     B2 00 A0 FD | 	call	#popregs_
1c2e8                 | __system___gc_doalloc_ret
1c2e8     2D 00 64 FD | 	ret
1c2ec                 | 
1c2ec                 | __system___gc_isvalidptr
1c2ec     F8 16 06 F4 | 	bitl	arg03, #248
1c2f0     08 16 86 F1 | 	sub	arg03, #8
1c2f4     09 17 52 F2 | 	cmps	arg03, arg01 wc
1c2f8     08 00 90 CD |  if_b	jmp	#LR__2780
1c2fc     0A 17 52 F2 | 	cmps	arg03, arg02 wc
1c300     08 00 90 CD |  if_b	jmp	#LR__2781
1c304                 | LR__2780
1c304     00 FA 05 F6 | 	mov	result1, #0
1c308     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
1c30c                 | LR__2781
1c30c     0B 01 02 F6 | 	mov	_var01, arg03
1c310     09 01 62 F5 | 	xor	_var01, arg01
1c314     0F 00 CE F7 | 	test	_var01, #15 wz
1c318     00 FA 05 56 |  if_ne	mov	result1, #0
1c31c     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
1c320     0B 01 02 F6 | 	mov	_var01, arg03
1c324     02 00 06 F1 | 	add	_var01, #2
1c328     00 01 E2 FA | 	rdword	_var01, _var01
1c32c     7F 00 00 FF 
1c330     C0 01 06 F5 | 	and	_var01, ##65472
1c334     36 00 00 FF 
1c338     80 00 0E F2 | 	cmp	_var01, ##27776 wz
1c33c     00 FA 05 56 |  if_ne	mov	result1, #0
1c340     0B FB 01 A6 |  if_e	mov	result1, arg03
1c344                 | __system___gc_isvalidptr_ret
1c344     2D 00 64 FD | 	ret
1c348                 | 
1c348                 | __system___gc_free
1c348     09 17 02 F6 | 	mov	arg03, arg01
1c34c     6C FC BF FD | 	call	#__system___gc_ptrs
1c350     FD 12 02 F6 | 	mov	arg01, result1
1c354     FE 14 02 F6 | 	mov	arg02, result2
1c358     90 FF BF FD | 	call	#__system___gc_isvalidptr
1c35c     FD 14 0A F6 | 	mov	arg02, result1 wz
1c360     28 00 90 AD |  if_e	jmp	#LR__2790
1c364     1C E8 05 F1 | 	add	ptr___system__dat__, #28
1c368     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
1c36c     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
1c370     E8 C1 BF FD | 	call	#__system___lockmem
1c374     0A 13 02 F6 | 	mov	arg01, arg02
1c378     14 00 B0 FD | 	call	#__system___gc_dofree
1c37c     1C E8 05 F1 | 	add	ptr___system__dat__, #28
1c380     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
1c384     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
1c388     09 01 68 FC | 	wrlong	#0, arg01
1c38c                 | LR__2790
1c38c                 | __system___gc_free_ret
1c38c     2D 00 64 FD | 	ret
1c390                 | 
1c390                 | __system___gc_dofree
1c390     06 4A 05 F6 | 	mov	COUNT_, #6
1c394     A8 00 A0 FD | 	call	#pushregs_
1c398     09 1F 02 F6 | 	mov	local01, arg01
1c39c     1C FC BF FD | 	call	#__system___gc_ptrs
1c3a0     FD 20 02 F6 | 	mov	local02, result1
1c3a4     FE 22 02 F6 | 	mov	local03, result2
1c3a8     0F 15 02 F6 | 	mov	arg02, local01
1c3ac     02 14 06 F1 | 	add	arg02, #2
1c3b0     36 00 80 FF 
1c3b4     0A 1F 59 FC | 	wrword	##27791, arg02
1c3b8     0F 25 02 F6 | 	mov	local04, local01
1c3bc     0F 13 02 F6 | 	mov	arg01, local01
1c3c0     09 27 EA FA | 	rdword	local05, arg01 wz
1c3c4     00 FA 05 A6 |  if_e	mov	result1, #0
1c3c8     04 26 66 50 |  if_ne	shl	local05, #4
1c3cc     13 13 02 51 |  if_ne	add	arg01, local05
1c3d0     09 FB 01 56 |  if_ne	mov	result1, arg01
1c3d4     FD 28 02 F6 | 	mov	local06, result1
1c3d8     97 24 48 FB | 	callpa	#(@LR__2801-@LR__2800)>>2,fcache_load_ptr_
1c3dc                 | LR__2800
1c3dc     04 24 06 F1 | 	add	local04, #4
1c3e0     12 15 EA FA | 	rdword	arg02, local04 wz
1c3e4     10 13 02 F6 | 	mov	arg01, local02
1c3e8     00 FA 05 A6 |  if_e	mov	result1, #0
1c3ec     04 14 66 50 |  if_ne	shl	arg02, #4
1c3f0     0A 13 02 51 |  if_ne	add	arg01, arg02
1c3f4     09 FB 01 56 |  if_ne	mov	result1, arg01
1c3f8     FD 24 0A F6 | 	mov	local04, result1 wz
1c3fc     24 00 90 AD |  if_e	jmp	#LR__2802
1c400     12 13 02 F6 | 	mov	arg01, local04
1c404     00 FA 05 F6 | 	mov	result1, #0
1c408     02 12 06 F1 | 	add	arg01, #2
1c40c     09 13 E2 FA | 	rdword	arg01, arg01
1c410     36 00 00 FF 
1c414     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
1c418     01 FA 65 A6 |  if_e	neg	result1, #1
1c41c     00 FA 0D F2 | 	cmp	result1, #0 wz
1c420     B8 FF 9F AD |  if_e	jmp	#LR__2800
1c424                 | LR__2801
1c424                 | LR__2802
1c424     00 24 0E F2 | 	cmp	local04, #0 wz
1c428     10 25 02 A6 |  if_e	mov	local04, local02
1c42c     12 15 02 F6 | 	mov	arg02, local04
1c430     06 14 06 F1 | 	add	arg02, #6
1c434     0F 13 02 F6 | 	mov	arg01, local01
1c438     0A 15 E2 FA | 	rdword	arg02, arg02
1c43c     06 12 06 F1 | 	add	arg01, #6
1c440     09 15 52 FC | 	wrword	arg02, arg01
1c444     0F 15 0A F6 | 	mov	arg02, local01 wz
1c448     00 FA 05 A6 |  if_e	mov	result1, #0
1c44c     10 15 82 51 |  if_ne	sub	arg02, local02
1c450     04 14 46 50 |  if_ne	shr	arg02, #4
1c454     0A FB 01 56 |  if_ne	mov	result1, arg02
1c458     12 15 02 F6 | 	mov	arg02, local04
1c45c     06 14 06 F1 | 	add	arg02, #6
1c460     0A FB 51 FC | 	wrword	result1, arg02
1c464     10 25 0A F2 | 	cmp	local04, local02 wz
1c468     A4 00 90 AD |  if_e	jmp	#LR__2805
1c46c     12 13 02 F6 | 	mov	arg01, local04
1c470     09 27 EA FA | 	rdword	local05, arg01 wz
1c474     00 FA 05 A6 |  if_e	mov	result1, #0
1c478     04 26 66 50 |  if_ne	shl	local05, #4
1c47c     13 13 02 51 |  if_ne	add	arg01, local05
1c480     09 FB 01 56 |  if_ne	mov	result1, arg01
1c484     0F FB 09 F2 | 	cmp	result1, local01 wz
1c488     84 00 90 5D |  if_ne	jmp	#LR__2804
1c48c     12 29 E2 FA | 	rdword	local06, local04
1c490     0F 15 E2 FA | 	rdword	arg02, local01
1c494     0A 29 02 F1 | 	add	local06, arg02
1c498     12 29 52 FC | 	wrword	local06, local04
1c49c     0F 29 02 F6 | 	mov	local06, local01
1c4a0     02 28 06 F1 | 	add	local06, #2
1c4a4     14 01 58 FC | 	wrword	#0, local06
1c4a8     0F 13 02 F6 | 	mov	arg01, local01
1c4ac     09 27 EA FA | 	rdword	local05, arg01 wz
1c4b0     00 FA 05 A6 |  if_e	mov	result1, #0
1c4b4     04 26 66 50 |  if_ne	shl	local05, #4
1c4b8     13 13 02 51 |  if_ne	add	arg01, local05
1c4bc     09 FB 01 56 |  if_ne	mov	result1, arg01
1c4c0     FD 28 02 F6 | 	mov	local06, result1
1c4c4     11 29 52 F2 | 	cmps	local06, local03 wc
1c4c8     20 00 90 3D |  if_ae	jmp	#LR__2803
1c4cc     12 15 0A F6 | 	mov	arg02, local04 wz
1c4d0     00 FA 05 A6 |  if_e	mov	result1, #0
1c4d4     10 15 82 51 |  if_ne	sub	arg02, local02
1c4d8     04 14 46 50 |  if_ne	shr	arg02, #4
1c4dc     0A FB 01 56 |  if_ne	mov	result1, arg02
1c4e0     14 15 02 F6 | 	mov	arg02, local06
1c4e4     04 14 06 F1 | 	add	arg02, #4
1c4e8     0A FB 51 FC | 	wrword	result1, arg02
1c4ec                 | LR__2803
1c4ec     0F 15 02 F6 | 	mov	arg02, local01
1c4f0     06 14 06 F1 | 	add	arg02, #6
1c4f4     12 FD 01 F6 | 	mov	result2, local04
1c4f8     0A 15 E2 FA | 	rdword	arg02, arg02
1c4fc     06 FC 05 F1 | 	add	result2, #6
1c500     FE 14 52 FC | 	wrword	arg02, result2
1c504     06 1E 06 F1 | 	add	local01, #6
1c508     0F 01 58 FC | 	wrword	#0, local01
1c50c     12 1F 02 F6 | 	mov	local01, local04
1c510                 | LR__2804
1c510                 | LR__2805
1c510     0F 13 02 F6 | 	mov	arg01, local01
1c514     09 27 EA FA | 	rdword	local05, arg01 wz
1c518     00 FA 05 A6 |  if_e	mov	result1, #0
1c51c     04 26 66 50 |  if_ne	shl	local05, #4
1c520     13 13 02 51 |  if_ne	add	arg01, local05
1c524     09 FB 01 56 |  if_ne	mov	result1, arg01
1c528     FD 14 0A F6 | 	mov	arg02, result1 wz
1c52c     B8 00 90 AD |  if_e	jmp	#LR__2807
1c530     11 15 52 F2 | 	cmps	arg02, local03 wc
1c534     B0 00 90 3D |  if_ae	jmp	#LR__2807
1c538     0A 13 02 F6 | 	mov	arg01, arg02
1c53c     00 FA 05 F6 | 	mov	result1, #0
1c540     02 12 06 F1 | 	add	arg01, #2
1c544     09 13 E2 FA | 	rdword	arg01, arg01
1c548     36 00 00 FF 
1c54c     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
1c550     01 FA 65 A6 |  if_e	neg	result1, #1
1c554     00 FA 0D F2 | 	cmp	result1, #0 wz
1c558     8C 00 90 AD |  if_e	jmp	#LR__2807
1c55c     0F 25 02 F6 | 	mov	local04, local01
1c560     12 29 E2 FA | 	rdword	local06, local04
1c564     0A 13 02 F6 | 	mov	arg01, arg02
1c568     09 1F E2 FA | 	rdword	local01, arg01
1c56c     0F 29 02 F1 | 	add	local06, local01
1c570     12 29 52 FC | 	wrword	local06, local04
1c574     09 29 02 F6 | 	mov	local06, arg01
1c578     06 28 06 F1 | 	add	local06, #6
1c57c     12 1F 02 F6 | 	mov	local01, local04
1c580     14 29 E2 FA | 	rdword	local06, local06
1c584     06 1E 06 F1 | 	add	local01, #6
1c588     0F 29 52 FC | 	wrword	local06, local01
1c58c     09 29 02 F6 | 	mov	local06, arg01
1c590     02 28 06 F1 | 	add	local06, #2
1c594     14 55 59 FC | 	wrword	#170, local06
1c598     09 29 02 F6 | 	mov	local06, arg01
1c59c     06 28 06 F1 | 	add	local06, #6
1c5a0     14 01 58 FC | 	wrword	#0, local06
1c5a4     09 27 EA FA | 	rdword	local05, arg01 wz
1c5a8     00 FA 05 A6 |  if_e	mov	result1, #0
1c5ac     04 26 66 50 |  if_ne	shl	local05, #4
1c5b0     13 13 02 51 |  if_ne	add	arg01, local05
1c5b4     09 FB 01 56 |  if_ne	mov	result1, arg01
1c5b8     FD 28 0A F6 | 	mov	local06, result1 wz
1c5bc     28 00 90 AD |  if_e	jmp	#LR__2806
1c5c0     11 29 52 F2 | 	cmps	local06, local03 wc
1c5c4     20 00 90 3D |  if_ae	jmp	#LR__2806
1c5c8     12 15 0A F6 | 	mov	arg02, local04 wz
1c5cc     00 FA 05 A6 |  if_e	mov	result1, #0
1c5d0     10 15 82 51 |  if_ne	sub	arg02, local02
1c5d4     04 14 46 50 |  if_ne	shr	arg02, #4
1c5d8     0A FB 01 56 |  if_ne	mov	result1, arg02
1c5dc     14 25 02 F6 | 	mov	local04, local06
1c5e0     04 24 06 F1 | 	add	local04, #4
1c5e4     12 FB 51 FC | 	wrword	result1, local04
1c5e8                 | LR__2806
1c5e8                 | LR__2807
1c5e8     14 FB 01 F6 | 	mov	result1, local06
1c5ec     A7 F0 03 F6 | 	mov	ptra, fp
1c5f0     B2 00 A0 FD | 	call	#popregs_
1c5f4                 | __system___gc_dofree_ret
1c5f4     2D 00 64 FD | 	ret
1c5f8                 | 
1c5f8                 | __system___gc_docollect
1c5f8     05 4A 05 F6 | 	mov	COUNT_, #5
1c5fc     A8 00 A0 FD | 	call	#pushregs_
1c600     B8 F9 BF FD | 	call	#__system___gc_ptrs
1c604     FE 1E 02 F6 | 	mov	local01, result2
1c608     FD 20 02 F6 | 	mov	local02, result1
1c60c     10 13 02 F6 | 	mov	arg01, local02
1c610     09 23 EA FA | 	rdword	local03, arg01 wz
1c614     00 FA 05 A6 |  if_e	mov	result1, #0
1c618     04 22 66 50 |  if_ne	shl	local03, #4
1c61c     11 13 02 51 |  if_ne	add	arg01, local03
1c620     09 FB 01 56 |  if_ne	mov	result1, arg01
1c624     FD 24 0A F6 | 	mov	local04, result1 wz
1c628     00 FA 05 F6 | 	mov	result1, #0
1c62c     01 FA 61 FD | 	cogid	result1
1c630     FD 26 02 F6 | 	mov	local05, result1
1c634     48 00 90 AD |  if_e	jmp	#LR__2812
1c638     97 22 48 FB | 	callpa	#(@LR__2811-@LR__2810)>>2,fcache_load_ptr_
1c63c                 | LR__2810
1c63c     0F 25 52 F2 | 	cmps	local04, local01 wc
1c640     3C 00 90 3D |  if_ae	jmp	#LR__2812
1c644     12 15 02 F6 | 	mov	arg02, local04
1c648     02 14 06 F1 | 	add	arg02, #2
1c64c     0A 15 E2 FA | 	rdword	arg02, arg02
1c650     20 14 26 F5 | 	andn	arg02, #32
1c654     12 13 02 F6 | 	mov	arg01, local04
1c658     02 12 06 F1 | 	add	arg01, #2
1c65c     09 15 52 FC | 	wrword	arg02, arg01
1c660     12 13 02 F6 | 	mov	arg01, local04
1c664     09 23 EA FA | 	rdword	local03, arg01 wz
1c668     00 FA 05 A6 |  if_e	mov	result1, #0
1c66c     04 22 66 50 |  if_ne	shl	local03, #4
1c670     11 13 02 51 |  if_ne	add	arg01, local03
1c674     09 FB 01 56 |  if_ne	mov	result1, arg01
1c678     FD 24 0A F6 | 	mov	local04, result1 wz
1c67c     BC FF 9F 5D |  if_ne	jmp	#LR__2810
1c680                 | LR__2811
1c680                 | LR__2812
1c680     00 22 06 F6 | 	mov	local03, #0
1c684     00 12 06 F6 | 	mov	arg01, #0
1c688     A8 BE BF FD | 	call	#__system____topofstack
1c68c     FD 14 02 F6 | 	mov	arg02, result1
1c690     11 13 02 F6 | 	mov	arg01, local03
1c694     90 00 B0 FD | 	call	#__system___gc_markhub
1c698     1C 01 B0 FD | 	call	#__system___gc_markcog
1c69c     10 13 02 F6 | 	mov	arg01, local02
1c6a0     09 23 EA FA | 	rdword	local03, arg01 wz
1c6a4     00 FA 05 A6 |  if_e	mov	result1, #0
1c6a8     04 22 66 50 |  if_ne	shl	local03, #4
1c6ac     11 13 02 51 |  if_ne	add	arg01, local03
1c6b0     09 FB 01 56 |  if_ne	mov	result1, arg01
1c6b4     FD 20 0A F6 | 	mov	local02, result1 wz
1c6b8     60 00 90 AD |  if_e	jmp	#LR__2816
1c6bc                 | LR__2813
1c6bc     10 25 02 F6 | 	mov	local04, local02
1c6c0     12 13 02 F6 | 	mov	arg01, local04
1c6c4     09 23 EA FA | 	rdword	local03, arg01 wz
1c6c8     00 FA 05 A6 |  if_e	mov	result1, #0
1c6cc     04 22 66 50 |  if_ne	shl	local03, #4
1c6d0     11 13 02 51 |  if_ne	add	arg01, local03
1c6d4     09 FB 01 56 |  if_ne	mov	result1, arg01
1c6d8     FD 20 02 F6 | 	mov	local02, result1
1c6dc     12 15 02 F6 | 	mov	arg02, local04
1c6e0     02 14 06 F1 | 	add	arg02, #2
1c6e4     0A 15 E2 FA | 	rdword	arg02, arg02
1c6e8     20 14 CE F7 | 	test	arg02, #32 wz
1c6ec     10 14 CE A7 |  if_e	test	arg02, #16 wz
1c6f0     1C 00 90 5D |  if_ne	jmp	#LR__2815
1c6f4     0A 15 42 F8 | 	getnib	arg02, arg02, #0
1c6f8     13 15 0A F2 | 	cmp	arg02, local05 wz
1c6fc     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
1c700     0C 00 90 5D |  if_ne	jmp	#LR__2814
1c704     12 13 02 F6 | 	mov	arg01, local04
1c708     84 FC BF FD | 	call	#__system___gc_dofree
1c70c     FD 20 02 F6 | 	mov	local02, result1
1c710                 | LR__2814
1c710                 | LR__2815
1c710     00 20 0E F2 | 	cmp	local02, #0 wz
1c714     0F 21 52 52 |  if_ne	cmps	local02, local01 wc
1c718     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__2813
1c71c                 | LR__2816
1c71c     A7 F0 03 F6 | 	mov	ptra, fp
1c720     B2 00 A0 FD | 	call	#popregs_
1c724                 | __system___gc_docollect_ret
1c724     2D 00 64 FD | 	ret
1c728                 | 
1c728                 | __system___gc_markhub
1c728     04 4A 05 F6 | 	mov	COUNT_, #4
1c72c     A8 00 A0 FD | 	call	#pushregs_
1c730     09 1F 02 F6 | 	mov	local01, arg01
1c734     0A 21 02 F6 | 	mov	local02, arg02
1c738     80 F8 BF FD | 	call	#__system___gc_ptrs
1c73c     FD 22 02 F6 | 	mov	local03, result1
1c740     FE 24 02 F6 | 	mov	local04, result2
1c744                 | LR__2820
1c744     10 1F 52 F2 | 	cmps	local01, local02 wc
1c748     60 00 90 3D |  if_ae	jmp	#LR__2821
1c74c     0F 17 02 FB | 	rdlong	arg03, local01
1c750     04 1E 06 F1 | 	add	local01, #4
1c754     12 15 02 F6 | 	mov	arg02, local04
1c758     11 13 02 F6 | 	mov	arg01, local03
1c75c     8C FB BF FD | 	call	#__system___gc_isvalidptr
1c760     FD 16 0A F6 | 	mov	arg03, result1 wz
1c764     DC FF 9F AD |  if_e	jmp	#LR__2820
1c768     0B 13 02 F6 | 	mov	arg01, arg03
1c76c     00 FA 05 F6 | 	mov	result1, #0
1c770     02 12 06 F1 | 	add	arg01, #2
1c774     09 13 E2 FA | 	rdword	arg01, arg01
1c778     36 00 00 FF 
1c77c     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
1c780     01 FA 65 A6 |  if_e	neg	result1, #1
1c784     00 FA 0D F2 | 	cmp	result1, #0 wz
1c788     B8 FF 9F 5D |  if_ne	jmp	#LR__2820
1c78c     0B FD 01 F6 | 	mov	result2, arg03
1c790     02 FC 05 F1 | 	add	result2, #2
1c794     FE FC E1 FA | 	rdword	result2, result2
1c798     0F FC 25 F5 | 	andn	result2, #15
1c79c     2E FC 45 F5 | 	or	result2, #46
1c7a0     02 16 06 F1 | 	add	arg03, #2
1c7a4     0B FD 51 FC | 	wrword	result2, arg03
1c7a8     98 FF 9F FD | 	jmp	#LR__2820
1c7ac                 | LR__2821
1c7ac     A7 F0 03 F6 | 	mov	ptra, fp
1c7b0     B2 00 A0 FD | 	call	#popregs_
1c7b4                 | __system___gc_markhub_ret
1c7b4     2D 00 64 FD | 	ret
1c7b8                 | 
1c7b8                 | __system___gc_markcog
1c7b8     04 4A 05 F6 | 	mov	COUNT_, #4
1c7bc     A8 00 A0 FD | 	call	#pushregs_
1c7c0     F8 F7 BF FD | 	call	#__system___gc_ptrs
1c7c4     FD 1E 02 F6 | 	mov	local01, result1
1c7c8     FE 20 02 F6 | 	mov	local02, result2
1c7cc     EF 23 06 F6 | 	mov	local03, #495
1c7d0                 | LR__2830
1c7d0                 | 	'.live	local03
1c7d0     00 22 96 F9 | 	alts	local03, #0
1c7d4     11 25 02 F6 | 	mov	local04, local03
1c7d8     0F 13 02 F6 | 	mov	arg01, local01
1c7dc     10 15 02 F6 | 	mov	arg02, local02
1c7e0     12 17 02 F6 | 	mov	arg03, local04
1c7e4     04 FB BF FD | 	call	#__system___gc_isvalidptr
1c7e8     00 FA 0D F2 | 	cmp	result1, #0 wz
1c7ec     18 00 90 AD |  if_e	jmp	#LR__2831
1c7f0     FD 24 02 F6 | 	mov	local04, result1
1c7f4     02 24 06 F1 | 	add	local04, #2
1c7f8     12 25 E2 FA | 	rdword	local04, local04
1c7fc     20 24 46 F5 | 	or	local04, #32
1c800     02 FA 05 F1 | 	add	result1, #2
1c804     FD 24 52 FC | 	wrword	local04, result1
1c808                 | LR__2831
1c808     01 22 86 F1 | 	sub	local03, #1
1c80c     00 22 56 F2 | 	cmps	local03, #0 wc
1c810     BC FF 9F 3D |  if_ae	jmp	#LR__2830
1c814     A7 F0 03 F6 | 	mov	ptra, fp
1c818     B2 00 A0 FD | 	call	#popregs_
1c81c                 | __system___gc_markcog_ret
1c81c     2D 00 64 FD | 	ret
1c820                 | 
1c820                 | __system__opendir
1c820     06 4A 05 F6 | 	mov	COUNT_, #6
1c824     A8 00 A0 FD | 	call	#pushregs_
1c828     84 E9 05 F1 | 	add	ptr___system__dat__, #388
1c82c     F4 1E 02 F6 | 	mov	local01, ptr___system__dat__
1c830     09 15 02 F6 | 	mov	arg02, arg01
1c834     0F 13 02 F6 | 	mov	arg01, local01
1c838     00 16 06 F6 | 	mov	arg03, #0
1c83c     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
1c840     B0 C4 BF FD | 	call	#__system____getvfsforfile
1c844     FD 20 0A F6 | 	mov	local02, result1 wz
1c848     10 00 90 AD |  if_e	jmp	#LR__2840
1c84c     28 20 06 F1 | 	add	local02, #40
1c850     10 17 0A FB | 	rdlong	arg03, local02 wz
1c854     28 20 86 F1 | 	sub	local02, #40
1c858     14 00 90 5D |  if_ne	jmp	#LR__2841
1c85c                 | LR__2840
1c85c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1c860     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
1c864     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1c868     00 FA 05 F6 | 	mov	result1, #0
1c86c     90 00 90 FD | 	jmp	#LR__2843
1c870                 | LR__2841
1c870     5C 12 06 F6 | 	mov	arg01, #92
1c874     10 14 06 F6 | 	mov	arg02, #16
1c878     C0 F9 BF FD | 	call	#__system___gc_doalloc
1c87c     FD 22 0A F6 | 	mov	local03, result1 wz
1c880     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1c884     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
1c888     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1c88c     00 FA 05 A6 |  if_e	mov	result1, #0
1c890     6C 00 90 AD |  if_e	jmp	#LR__2843
1c894     28 20 06 F1 | 	add	local02, #40
1c898     10 25 02 FB | 	rdlong	local04, local02
1c89c     12 27 02 F6 | 	mov	local05, local04
1c8a0     28 20 86 F1 | 	sub	local02, #40
1c8a4     13 26 46 F7 | 	zerox	local05, #19
1c8a8     14 24 46 F0 | 	shr	local04, #20
1c8ac     02 24 66 F0 | 	shl	local04, #2
1c8b0     ED 24 02 F1 | 	add	local04, __methods__
1c8b4     12 25 02 FB | 	rdlong	local04, local04
1c8b8     11 13 02 F6 | 	mov	arg01, local03
1c8bc     0F 15 02 F6 | 	mov	arg02, local01
1c8c0     F2 28 02 F6 | 	mov	local06, objptr
1c8c4     13 E5 01 F6 | 	mov	objptr, local05
1c8c8     2D 24 62 FD | 	call	local04
1c8cc     14 E5 01 F6 | 	mov	objptr, local06
1c8d0     FD 16 0A F6 | 	mov	arg03, result1 wz
1c8d4     20 00 90 AD |  if_e	jmp	#LR__2842
1c8d8     00 16 4E F2 | 	cmps	arg03, #0 wz
1c8dc     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1c8e0     F4 16 62 FC | 	wrlong	arg03, ptr___system__dat__
1c8e4     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1c8e8     11 13 02 F6 | 	mov	arg01, local03
1c8ec     58 FA BF FD | 	call	#__system___gc_free
1c8f0     00 FA 05 F6 | 	mov	result1, #0
1c8f4     08 00 90 FD | 	jmp	#LR__2843
1c8f8                 | LR__2842
1c8f8     11 21 62 FC | 	wrlong	local02, local03
1c8fc     11 FB 01 F6 | 	mov	result1, local03
1c900                 | LR__2843
1c900     A7 F0 03 F6 | 	mov	ptra, fp
1c904     B2 00 A0 FD | 	call	#popregs_
1c908                 | __system__opendir_ret
1c908     2D 00 64 FD | 	ret
1c90c                 | 
1c90c                 | __system__closedir
1c90c     04 4A 05 F6 | 	mov	COUNT_, #4
1c910     A8 00 A0 FD | 	call	#pushregs_
1c914     09 1F 02 F6 | 	mov	local01, arg01
1c918     0F 13 02 FB | 	rdlong	arg01, local01
1c91c     2C 12 06 F1 | 	add	arg01, #44
1c920     09 21 02 FB | 	rdlong	local02, arg01
1c924     10 23 02 F6 | 	mov	local03, local02
1c928     13 22 46 F7 | 	zerox	local03, #19
1c92c     14 20 46 F0 | 	shr	local02, #20
1c930     02 20 66 F0 | 	shl	local02, #2
1c934     ED 20 02 F1 | 	add	local02, __methods__
1c938     10 21 02 FB | 	rdlong	local02, local02
1c93c     0F 13 02 F6 | 	mov	arg01, local01
1c940     F2 24 02 F6 | 	mov	local04, objptr
1c944     11 E5 01 F6 | 	mov	objptr, local03
1c948     2D 20 62 FD | 	call	local02
1c94c     12 E5 01 F6 | 	mov	objptr, local04
1c950     FD 24 02 F6 | 	mov	local04, result1
1c954     0F 13 02 F6 | 	mov	arg01, local01
1c958     EC F9 BF FD | 	call	#__system___gc_free
1c95c     00 24 4E F2 | 	cmps	local04, #0 wz
1c960     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1c964     F4 24 62 FC | 	wrlong	local04, ptr___system__dat__
1c968     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1c96c     01 FA 65 56 |  if_ne	neg	result1, #1
1c970     00 FA 05 A6 |  if_e	mov	result1, #0
1c974     A7 F0 03 F6 | 	mov	ptra, fp
1c978     B2 00 A0 FD | 	call	#popregs_
1c97c                 | __system__closedir_ret
1c97c     2D 00 64 FD | 	ret
1c980                 | 
1c980                 | __system__readdir
1c980     04 4A 05 F6 | 	mov	COUNT_, #4
1c984     A8 00 A0 FD | 	call	#pushregs_
1c988     09 15 0A FB | 	rdlong	arg02, arg01 wz
1c98c     08 12 06 F1 | 	add	arg01, #8
1c990     09 1F 02 F6 | 	mov	local01, arg01
1c994     08 12 86 F1 | 	sub	arg01, #8
1c998     00 FA 05 A6 |  if_e	mov	result1, #0
1c99c     5C 00 90 AD |  if_e	jmp	#LR__2851
1c9a0     30 14 06 F1 | 	add	arg02, #48
1c9a4     0A 21 02 FB | 	rdlong	local02, arg02
1c9a8     10 23 02 F6 | 	mov	local03, local02
1c9ac     13 22 46 F7 | 	zerox	local03, #19
1c9b0     14 20 46 F0 | 	shr	local02, #20
1c9b4     02 20 66 F0 | 	shl	local02, #2
1c9b8     ED 20 02 F1 | 	add	local02, __methods__
1c9bc     10 21 02 FB | 	rdlong	local02, local02
1c9c0     0F 15 02 F6 | 	mov	arg02, local01
1c9c4     F2 24 02 F6 | 	mov	local04, objptr
1c9c8     11 E5 01 F6 | 	mov	objptr, local03
1c9cc     2D 20 62 FD | 	call	local02
1c9d0     12 E5 01 F6 | 	mov	objptr, local04
1c9d4     00 FA 4D F2 | 	cmps	result1, #0 wz
1c9d8     1C 00 90 AD |  if_e	jmp	#LR__2850
1c9dc     01 FA 55 F2 | 	cmps	result1, #1 wc
1c9e0     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
1c9e4     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1c9e8     F4 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
1c9ec     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1c9f0     00 FA 05 F6 | 	mov	result1, #0
1c9f4     04 00 90 FD | 	jmp	#LR__2851
1c9f8                 | LR__2850
1c9f8     0F FB 01 F6 | 	mov	result1, local01
1c9fc                 | LR__2851
1c9fc     A7 F0 03 F6 | 	mov	ptra, fp
1ca00     B2 00 A0 FD | 	call	#popregs_
1ca04                 | __system__readdir_ret
1ca04     2D 00 64 FD | 	ret
1ca08                 | 
1ca08                 | __system___openraw
1ca08     15 4A 05 F6 | 	mov	COUNT_, #21
1ca0c     A8 00 A0 FD | 	call	#pushregs_
1ca10     09 1F 02 F6 | 	mov	local01, arg01
1ca14     0A 21 02 F6 | 	mov	local02, arg02
1ca18     0B 23 02 F6 | 	mov	local03, arg03
1ca1c     0C 25 02 F6 | 	mov	local04, arg04
1ca20     04 26 06 F6 | 	mov	local05, #4
1ca24     0F 29 02 F6 | 	mov	local06, local01
1ca28     00 2A 06 F6 | 	mov	local07, #0
1ca2c     84 E9 05 F1 | 	add	ptr___system__dat__, #388
1ca30     F4 2C 02 F6 | 	mov	local08, ptr___system__dat__
1ca34     16 13 02 F6 | 	mov	arg01, local08
1ca38     10 15 02 F6 | 	mov	arg02, local02
1ca3c     00 16 06 F6 | 	mov	arg03, #0
1ca40     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
1ca44     AC C2 BF FD | 	call	#__system____getvfsforfile
1ca48     FD 2E 0A F6 | 	mov	local09, result1 wz
1ca4c     10 00 90 AD |  if_e	jmp	#LR__2860
1ca50     20 2E 06 F1 | 	add	local09, #32
1ca54     17 FB 09 FB | 	rdlong	result1, local09 wz
1ca58     20 2E 86 F1 | 	sub	local09, #32
1ca5c     14 00 90 5D |  if_ne	jmp	#LR__2861
1ca60                 | LR__2860
1ca60     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1ca64     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
1ca68     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1ca6c     01 FA 65 F6 | 	neg	result1, #1
1ca70     8C 02 90 FD | 	jmp	#LR__2874
1ca74                 | LR__2861
1ca74     14 13 02 F6 | 	mov	arg01, local06
1ca78     00 14 06 F6 | 	mov	arg02, #0
1ca7c     34 16 06 F6 | 	mov	arg03, #52
1ca80     09 31 02 F6 | 	mov	local10, arg01
1ca84     98 00 A0 FD | 	call	#\builtin_bytefill_
1ca88     20 2E 06 F1 | 	add	local09, #32
1ca8c     17 33 02 FB | 	rdlong	local11, local09
1ca90     19 35 02 F6 | 	mov	local12, local11
1ca94     19 37 02 F6 | 	mov	local13, local11
1ca98     20 2E 86 F1 | 	sub	local09, #32
1ca9c     1B 39 02 F6 | 	mov	local14, local13
1caa0     13 34 46 F7 | 	zerox	local12, #19
1caa4     14 38 46 F0 | 	shr	local14, #20
1caa8     02 38 66 F0 | 	shl	local14, #2
1caac     ED 38 02 F1 | 	add	local14, __methods__
1cab0     1C 39 02 FB | 	rdlong	local14, local14
1cab4     14 3B 02 F6 | 	mov	local15, local06
1cab8     16 3D 02 F6 | 	mov	local16, local08
1cabc     11 3F 02 F6 | 	mov	local17, local03
1cac0     1D 13 02 F6 | 	mov	arg01, local15
1cac4     1E 15 02 F6 | 	mov	arg02, local16
1cac8     1F 17 02 F6 | 	mov	arg03, local17
1cacc     F2 40 02 F6 | 	mov	local18, objptr
1cad0     1A E5 01 F6 | 	mov	objptr, local12
1cad4     2D 38 62 FD | 	call	local14
1cad8     20 E5 01 F6 | 	mov	objptr, local18
1cadc     FD 42 0A F6 | 	mov	local19, result1 wz
1cae0     04 22 CE 57 |  if_ne	test	local03, #4 wz
1cae4     58 00 90 AD |  if_e	jmp	#LR__2862
1cae8     24 2E 06 F1 | 	add	local09, #36
1caec     17 33 02 FB | 	rdlong	local11, local09
1caf0     19 35 02 F6 | 	mov	local12, local11
1caf4     19 37 02 F6 | 	mov	local13, local11
1caf8     24 2E 86 F1 | 	sub	local09, #36
1cafc     1B 39 02 F6 | 	mov	local14, local13
1cb00     13 34 46 F7 | 	zerox	local12, #19
1cb04     14 38 46 F0 | 	shr	local14, #20
1cb08     02 38 66 F0 | 	shl	local14, #2
1cb0c     ED 38 02 F1 | 	add	local14, __methods__
1cb10     1C 39 02 FB | 	rdlong	local14, local14
1cb14     14 3B 02 F6 | 	mov	local15, local06
1cb18     16 3D 02 F6 | 	mov	local16, local08
1cb1c     12 3F 02 F6 | 	mov	local17, local04
1cb20     1D 13 02 F6 | 	mov	arg01, local15
1cb24     1E 15 02 F6 | 	mov	arg02, local16
1cb28     1F 17 02 F6 | 	mov	arg03, local17
1cb2c     F2 40 02 F6 | 	mov	local18, objptr
1cb30     1A E5 01 F6 | 	mov	objptr, local12
1cb34     2D 38 62 FD | 	call	local14
1cb38     20 E5 01 F6 | 	mov	objptr, local18
1cb3c     FD 42 02 F6 | 	mov	local19, result1
1cb40                 | LR__2862
1cb40     00 42 0E F2 | 	cmp	local19, #0 wz
1cb44     8C 01 90 5D |  if_ne	jmp	#LR__2872
1cb48     11 45 02 F6 | 	mov	local20, local03
1cb4c     03 44 0E F5 | 	and	local20, #3 wz
1cb50     02 26 46 55 |  if_ne	or	local05, #2
1cb54     01 44 0E F2 | 	cmp	local20, #1 wz
1cb58     01 26 46 55 |  if_ne	or	local05, #1
1cb5c     20 22 CE F7 | 	test	local03, #32 wz
1cb60     C0 26 46 55 |  if_ne	or	local05, #192
1cb64     08 28 06 F1 | 	add	local06, #8
1cb68     14 27 62 FC | 	wrlong	local05, local06
1cb6c     0C 28 06 F1 | 	add	local06, #12
1cb70     14 47 0A FB | 	rdlong	local21, local06 wz
1cb74     14 28 86 F1 | 	sub	local06, #20
1cb78     18 00 90 5D |  if_ne	jmp	#LR__2863
1cb7c     04 2E 06 F1 | 	add	local09, #4
1cb80     17 47 02 FB | 	rdlong	local21, local09
1cb84     04 2E 86 F1 | 	sub	local09, #4
1cb88     14 28 06 F1 | 	add	local06, #20
1cb8c     14 47 62 FC | 	wrlong	local21, local06
1cb90     14 28 86 F1 | 	sub	local06, #20
1cb94                 | LR__2863
1cb94     18 28 06 F1 | 	add	local06, #24
1cb98     14 47 0A FB | 	rdlong	local21, local06 wz
1cb9c     18 28 86 F1 | 	sub	local06, #24
1cba0     18 00 90 5D |  if_ne	jmp	#LR__2864
1cba4     08 2E 06 F1 | 	add	local09, #8
1cba8     17 47 02 FB | 	rdlong	local21, local09
1cbac     08 2E 86 F1 | 	sub	local09, #8
1cbb0     18 28 06 F1 | 	add	local06, #24
1cbb4     14 47 62 FC | 	wrlong	local21, local06
1cbb8     18 28 86 F1 | 	sub	local06, #24
1cbbc                 | LR__2864
1cbbc     24 28 06 F1 | 	add	local06, #36
1cbc0     14 47 0A FB | 	rdlong	local21, local06 wz
1cbc4     24 28 86 F1 | 	sub	local06, #36
1cbc8     17 47 02 AB |  if_e	rdlong	local21, local09
1cbcc     24 28 06 A1 |  if_e	add	local06, #36
1cbd0     14 47 62 AC |  if_e	wrlong	local21, local06
1cbd4     24 28 86 A1 |  if_e	sub	local06, #36
1cbd8     28 28 06 F1 | 	add	local06, #40
1cbdc     14 47 0A FB | 	rdlong	local21, local06 wz
1cbe0     28 28 86 F1 | 	sub	local06, #40
1cbe4     18 00 90 5D |  if_ne	jmp	#LR__2865
1cbe8     10 2E 06 F1 | 	add	local09, #16
1cbec     17 47 02 FB | 	rdlong	local21, local09
1cbf0     10 2E 86 F1 | 	sub	local09, #16
1cbf4     28 28 06 F1 | 	add	local06, #40
1cbf8     14 47 62 FC | 	wrlong	local21, local06
1cbfc     28 28 86 F1 | 	sub	local06, #40
1cc00                 | LR__2865
1cc00     30 28 06 F1 | 	add	local06, #48
1cc04     14 47 0A FB | 	rdlong	local21, local06 wz
1cc08     30 28 86 F1 | 	sub	local06, #48
1cc0c     18 00 90 5D |  if_ne	jmp	#LR__2866
1cc10     0C 2E 06 F1 | 	add	local09, #12
1cc14     17 47 02 FB | 	rdlong	local21, local09
1cc18     0C 2E 86 F1 | 	sub	local09, #12
1cc1c     30 28 06 F1 | 	add	local06, #48
1cc20     14 47 62 FC | 	wrlong	local21, local06
1cc24     30 28 86 F1 | 	sub	local06, #48
1cc28                 | LR__2866
1cc28     1C 28 06 F1 | 	add	local06, #28
1cc2c     14 47 0A FB | 	rdlong	local21, local06 wz
1cc30     1C 28 86 F1 | 	sub	local06, #28
1cc34     1C 00 90 5D |  if_ne	jmp	#LR__2867
1cc38     01 2A 06 F6 | 	mov	local07, #1
1cc3c     F2 12 02 F6 | 	mov	arg01, objptr
1cc40     00 48 03 FF 
1cc44     00 12 46 F5 | 	or	arg01, ##110100480
1cc48     1C 28 06 F1 | 	add	local06, #28
1cc4c     14 13 62 FC | 	wrlong	arg01, local06
1cc50     1C 28 86 F1 | 	sub	local06, #28
1cc54                 | LR__2867
1cc54     20 28 06 F1 | 	add	local06, #32
1cc58     14 47 0A FB | 	rdlong	local21, local06 wz
1cc5c     20 28 86 F1 | 	sub	local06, #32
1cc60     1C 00 90 5D |  if_ne	jmp	#LR__2868
1cc64     01 2A 06 F6 | 	mov	local07, #1
1cc68     F2 12 02 F6 | 	mov	arg01, objptr
1cc6c     00 50 03 FF 
1cc70     00 12 46 F5 | 	or	arg01, ##111149056
1cc74     20 28 06 F1 | 	add	local06, #32
1cc78     14 13 62 FC | 	wrlong	arg01, local06
1cc7c     20 28 86 F1 | 	sub	local06, #32
1cc80                 | LR__2868
1cc80     2C 28 06 F1 | 	add	local06, #44
1cc84     14 47 0A FB | 	rdlong	local21, local06 wz
1cc88     2C 28 86 F1 | 	sub	local06, #44
1cc8c     44 00 90 5D |  if_ne	jmp	#LR__2871
1cc90     14 2E 06 F1 | 	add	local09, #20
1cc94     17 47 0A FB | 	rdlong	local21, local09 wz
1cc98     14 2E 86 F1 | 	sub	local09, #20
1cc9c     18 00 90 AD |  if_e	jmp	#LR__2869
1cca0     14 2E 06 F1 | 	add	local09, #20
1cca4     17 47 02 FB | 	rdlong	local21, local09
1cca8     2C 28 06 F1 | 	add	local06, #44
1ccac     14 47 62 FC | 	wrlong	local21, local06
1ccb0     2C 28 86 F1 | 	sub	local06, #44
1ccb4     1C 00 90 FD | 	jmp	#LR__2870
1ccb8                 | LR__2869
1ccb8     01 2A 06 F6 | 	mov	local07, #1
1ccbc     F2 12 02 F6 | 	mov	arg01, objptr
1ccc0     00 58 03 FF 
1ccc4     00 12 46 F5 | 	or	arg01, ##112197632
1ccc8     2C 28 06 F1 | 	add	local06, #44
1cccc     14 13 62 FC | 	wrlong	arg01, local06
1ccd0     2C 28 86 F1 | 	sub	local06, #44
1ccd4                 | LR__2870
1ccd4                 | LR__2871
1ccd4                 | LR__2872
1ccd4     00 2A 0E F2 | 	cmp	local07, #0 wz
1ccd8     14 13 02 56 |  if_ne	mov	arg01, local06
1ccdc     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
1cce0     00 42 0E F2 | 	cmp	local19, #0 wz
1cce4     00 12 06 A6 |  if_e	mov	arg01, #0
1cce8     10 00 90 5D |  if_ne	jmp	#LR__2873
1ccec     00 12 4E F2 | 	cmps	arg01, #0 wz
1ccf0     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1ccf4     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1ccf8     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1ccfc                 | LR__2873
1ccfc     21 FB 01 F6 | 	mov	result1, local19
1cd00                 | LR__2874
1cd00     A7 F0 03 F6 | 	mov	ptra, fp
1cd04     B2 00 A0 FD | 	call	#popregs_
1cd08                 | __system___openraw_ret
1cd08     2D 00 64 FD | 	ret
1cd0c                 | 
1cd0c                 | __system___closeraw
1cd0c     05 4A 05 F6 | 	mov	COUNT_, #5
1cd10     A8 00 A0 FD | 	call	#pushregs_
1cd14     09 1F 02 F6 | 	mov	local01, arg01
1cd18     00 20 06 F6 | 	mov	local02, #0
1cd1c     08 1E 06 F1 | 	add	local01, #8
1cd20     0F FB 09 FB | 	rdlong	result1, local01 wz
1cd24     08 1E 86 F1 | 	sub	local01, #8
1cd28     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1cd2c     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
1cd30     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1cd34     01 FA 65 A6 |  if_e	neg	result1, #1
1cd38     A8 00 90 AD |  if_e	jmp	#LR__2882
1cd3c     2C 1E 06 F1 | 	add	local01, #44
1cd40     0F FB 09 FB | 	rdlong	result1, local01 wz
1cd44     2C 1E 86 F1 | 	sub	local01, #44
1cd48     38 00 90 AD |  if_e	jmp	#LR__2880
1cd4c     2C 1E 06 F1 | 	add	local01, #44
1cd50     0F 23 02 FB | 	rdlong	local03, local01
1cd54     11 25 02 F6 | 	mov	local04, local03
1cd58     2C 1E 86 F1 | 	sub	local01, #44
1cd5c     13 24 46 F7 | 	zerox	local04, #19
1cd60     14 22 46 F0 | 	shr	local03, #20
1cd64     02 22 66 F0 | 	shl	local03, #2
1cd68     ED 22 02 F1 | 	add	local03, __methods__
1cd6c     11 23 02 FB | 	rdlong	local03, local03
1cd70     0F 13 02 F6 | 	mov	arg01, local01
1cd74     F2 26 02 F6 | 	mov	local05, objptr
1cd78     12 E5 01 F6 | 	mov	objptr, local04
1cd7c     2D 22 62 FD | 	call	local03
1cd80     13 E5 01 F6 | 	mov	objptr, local05
1cd84                 | LR__2880
1cd84     24 1E 06 F1 | 	add	local01, #36
1cd88     0F 27 0A FB | 	rdlong	local05, local01 wz
1cd8c     24 1E 86 F1 | 	sub	local01, #36
1cd90     3C 00 90 AD |  if_e	jmp	#LR__2881
1cd94     24 1E 06 F1 | 	add	local01, #36
1cd98     0F 23 02 FB | 	rdlong	local03, local01
1cd9c     11 25 02 F6 | 	mov	local04, local03
1cda0     24 1E 86 F1 | 	sub	local01, #36
1cda4     13 24 46 F7 | 	zerox	local04, #19
1cda8     14 22 46 F0 | 	shr	local03, #20
1cdac     02 22 66 F0 | 	shl	local03, #2
1cdb0     ED 22 02 F1 | 	add	local03, __methods__
1cdb4     11 23 02 FB | 	rdlong	local03, local03
1cdb8     0F 13 02 F6 | 	mov	arg01, local01
1cdbc     F2 26 02 F6 | 	mov	local05, objptr
1cdc0     12 E5 01 F6 | 	mov	objptr, local04
1cdc4     2D 22 62 FD | 	call	local03
1cdc8     13 E5 01 F6 | 	mov	objptr, local05
1cdcc     FD 20 02 F6 | 	mov	local02, result1
1cdd0                 | LR__2881
1cdd0     0F 13 02 F6 | 	mov	arg01, local01
1cdd4     00 14 06 F6 | 	mov	arg02, #0
1cdd8     34 16 06 F6 | 	mov	arg03, #52
1cddc     98 00 A0 FD | 	call	#\builtin_bytefill_
1cde0     10 FB 01 F6 | 	mov	result1, local02
1cde4                 | LR__2882
1cde4     A7 F0 03 F6 | 	mov	ptra, fp
1cde8     B2 00 A0 FD | 	call	#popregs_
1cdec                 | __system___closeraw_ret
1cdec     2D 00 64 FD | 	ret
1cdf0                 | 
1cdf0                 | __system___vfs_open_sdcardx
1cdf0     0B 4A 05 F6 | 	mov	COUNT_, #11
1cdf4     A8 00 A0 FD | 	call	#pushregs_
1cdf8     09 23 02 F6 | 	mov	local03, arg01
1cdfc     0A 25 02 F6 | 	mov	local04, arg02
1ce00     0B 27 02 F6 | 	mov	local05, arg03
1ce04     0C 29 02 F6 | 	mov	local06, arg04
1ce08     01 00 00 FF 
1ce0c     24 12 06 F6 | 	mov	arg01, ##548
1ce10     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
1ce14     FD 2A 02 F6 | 	mov	local07, result1
1ce18     01 00 00 FF 
1ce1c     34 12 06 F6 | 	mov	arg01, ##564
1ce20     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
1ce24     FD 2C 02 F6 | 	mov	local08, result1
1ce28     11 19 02 F6 | 	mov	arg04, local03
1ce2c     1F 18 C6 F0 | 	sar	arg04, #31
1ce30     11 17 02 F6 | 	mov	arg03, local03
1ce34     01 12 06 F6 | 	mov	arg01, #1
1ce38     00 14 06 F6 | 	mov	arg02, #0
1ce3c     48 DC BF FD | 	call	#__system___int64_shl
1ce40     FD 1E 02 F6 | 	mov	local01, result1
1ce44     FE 2E 02 F6 | 	mov	local09, result2
1ce48     12 19 02 F6 | 	mov	arg04, local04
1ce4c     1F 18 C6 F0 | 	sar	arg04, #31
1ce50     12 17 02 F6 | 	mov	arg03, local04
1ce54     01 12 06 F6 | 	mov	arg01, #1
1ce58     00 14 06 F6 | 	mov	arg02, #0
1ce5c     28 DC BF FD | 	call	#__system___int64_shl
1ce60     FD 1E 42 F5 | 	or	local01, result1
1ce64     FE 2E 42 F5 | 	or	local09, result2
1ce68     13 19 02 F6 | 	mov	arg04, local05
1ce6c     1F 18 C6 F0 | 	sar	arg04, #31
1ce70     13 17 02 F6 | 	mov	arg03, local05
1ce74     01 12 06 F6 | 	mov	arg01, #1
1ce78     00 14 06 F6 | 	mov	arg02, #0
1ce7c     08 DC BF FD | 	call	#__system___int64_shl
1ce80     FD 1E 42 F5 | 	or	local01, result1
1ce84     FE 2E 42 F5 | 	or	local09, result2
1ce88     14 19 02 F6 | 	mov	arg04, local06
1ce8c     1F 18 C6 F0 | 	sar	arg04, #31
1ce90     14 17 02 F6 | 	mov	arg03, local06
1ce94     01 12 06 F6 | 	mov	arg01, #1
1ce98     00 14 06 F6 | 	mov	arg02, #0
1ce9c     E8 DB BF FD | 	call	#__system___int64_shl
1cea0     17 15 02 F6 | 	mov	arg02, local09
1cea4     FD 1E 42 F5 | 	or	local01, result1
1cea8     0A FD 41 F5 | 	or	result2, arg02
1ceac     FE 20 02 F6 | 	mov	local02, result2
1ceb0     0F 13 02 F6 | 	mov	arg01, local01
1ceb4     10 15 02 F6 | 	mov	arg02, local02
1ceb8     04 DC BF FD | 	call	#__system___usepins
1cebc     00 FA 0D F2 | 	cmp	result1, #0 wz
1cec0     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1cec4     F4 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
1cec8     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1cecc     00 FA 05 A6 |  if_e	mov	result1, #0
1ced0     B4 00 90 AD |  if_e	jmp	#LR__2892
1ced4     0F 31 02 F6 | 	mov	local10, local01
1ced8     10 2F 02 F6 | 	mov	local09, local02
1cedc     01 00 00 FF 
1cee0     08 2A 06 F1 | 	add	local07, ##520
1cee4     15 31 62 FC | 	wrlong	local10, local07
1cee8     04 2A 06 F1 | 	add	local07, #4
1ceec     15 2F 62 FC | 	wrlong	local09, local07
1cef0     01 00 00 FF 
1cef4     0C 2A 86 F1 | 	sub	local07, ##524
1cef8     14 1B 02 F6 | 	mov	arg05, local06
1cefc     00 12 06 F6 | 	mov	arg01, #0
1cf00     11 15 02 F6 | 	mov	arg02, local03
1cf04     12 17 02 F6 | 	mov	arg03, local04
1cf08     13 19 02 F6 | 	mov	arg04, local05
1cf0c     F2 30 02 F6 | 	mov	local10, objptr
1cf10     15 E5 01 F6 | 	mov	objptr, local07
1cf14     94 26 B0 FD | 	call	#_fatfs_cc_disk_setpins
1cf18     18 E5 01 F6 | 	mov	objptr, local10
1cf1c     FD 32 0A F6 | 	mov	local11, result1 wz
1cf20     24 00 90 5D |  if_ne	jmp	#LR__2890
1cf24     3C 01 00 FF 
1cf28     EA 14 06 F6 | 	mov	arg02, ##@LR__4277
1cf2c     16 13 02 F6 | 	mov	arg01, local08
1cf30     00 16 06 F6 | 	mov	arg03, #0
1cf34     F2 32 02 F6 | 	mov	local11, objptr
1cf38     15 E5 01 F6 | 	mov	objptr, local07
1cf3c     C4 5D B0 FD | 	call	#_fatfs_cc_f_mount
1cf40     19 E5 01 F6 | 	mov	objptr, local11
1cf44     FD 32 02 F6 | 	mov	local11, result1
1cf48                 | LR__2890
1cf48     00 32 0E F2 | 	cmp	local11, #0 wz
1cf4c     24 00 90 AD |  if_e	jmp	#LR__2891
1cf50     0F 13 02 F6 | 	mov	arg01, local01
1cf54     10 15 02 F6 | 	mov	arg02, local02
1cf58     B8 DB BF FD | 	call	#__system___freepins
1cf5c     19 13 6A F6 | 	neg	arg01, local11 wz
1cf60     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1cf64     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1cf68     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1cf6c     00 FA 05 F6 | 	mov	result1, #0
1cf70     14 00 90 FD | 	jmp	#LR__2892
1cf74                 | LR__2891
1cf74     15 13 02 F6 | 	mov	arg01, local07
1cf78     F2 32 02 F6 | 	mov	local11, objptr
1cf7c     15 E5 01 F6 | 	mov	objptr, local07
1cf80     60 9A B0 FD | 	call	#_fatfs_cc_get_vfs
1cf84     19 E5 01 F6 | 	mov	objptr, local11
1cf88                 | LR__2892
1cf88     A7 F0 03 F6 | 	mov	ptra, fp
1cf8c     B2 00 A0 FD | 	call	#popregs_
1cf90                 | __system___vfs_open_sdcardx_ret
1cf90     2D 00 64 FD | 	ret
1cf94                 | 
1cf94                 | __system____default_getc
1cf94     03 4A 05 F6 | 	mov	COUNT_, #3
1cf98     A8 00 A0 FD | 	call	#pushregs_
1cf9c     09 1F 02 F6 | 	mov	local01, arg01
1cfa0     0F 21 02 FB | 	rdlong	local02, local01
1cfa4     08 20 06 F1 | 	add	local02, #8
1cfa8     10 23 02 FB | 	rdlong	local03, local02
1cfac     02 22 CE F7 | 	test	local03, #2 wz
1cfb0     0F 13 02 56 |  if_ne	mov	arg01, local01
1cfb4     00 01 B0 5D |  if_ne	call	#__system____default_flush
1cfb8     10 23 02 FB | 	rdlong	local03, local02
1cfbc     01 22 46 F5 | 	or	local03, #1
1cfc0     10 23 62 FC | 	wrlong	local03, local02
1cfc4     08 20 86 F1 | 	sub	local02, #8
1cfc8     10 23 0A FB | 	rdlong	local03, local02 wz
1cfcc     0C 00 90 5D |  if_ne	jmp	#LR__2900
1cfd0     0F 13 02 F6 | 	mov	arg01, local01
1cfd4     7C 15 B0 FD | 	call	#__system____default_filbuf
1cfd8     FD 22 02 F6 | 	mov	local03, result1
1cfdc                 | LR__2900
1cfdc     01 22 56 F2 | 	cmps	local03, #1 wc
1cfe0     01 FA 65 C6 |  if_b	neg	result1, #1
1cfe4     1C 00 90 CD |  if_b	jmp	#LR__2901
1cfe8     01 22 86 F1 | 	sub	local03, #1
1cfec     10 23 62 FC | 	wrlong	local03, local02
1cff0     04 20 06 F1 | 	add	local02, #4
1cff4     10 23 02 FB | 	rdlong	local03, local02
1cff8     11 FB C1 FA | 	rdbyte	result1, local03
1cffc     01 22 06 F1 | 	add	local03, #1
1d000     10 23 62 FC | 	wrlong	local03, local02
1d004                 | LR__2901
1d004     A7 F0 03 F6 | 	mov	ptra, fp
1d008     B2 00 A0 FD | 	call	#popregs_
1d00c                 | __system____default_getc_ret
1d00c     2D 00 64 FD | 	ret
1d010                 | 
1d010                 | __system____default_putc
1d010     06 4A 05 F6 | 	mov	COUNT_, #6
1d014     A8 00 A0 FD | 	call	#pushregs_
1d018     09 1F 02 F6 | 	mov	local01, arg01
1d01c     0A 21 02 F6 | 	mov	local02, arg02
1d020     10 23 02 FB | 	rdlong	local03, local02
1d024     08 22 06 F1 | 	add	local03, #8
1d028     11 FB 01 FB | 	rdlong	result1, local03
1d02c     01 FA CD F7 | 	test	result1, #1 wz
1d030     10 13 02 56 |  if_ne	mov	arg01, local02
1d034     80 00 B0 5D |  if_ne	call	#__system____default_flush
1d038     11 25 02 FB | 	rdlong	local04, local03
1d03c     02 24 46 F5 | 	or	local04, #2
1d040     11 25 62 FC | 	wrlong	local04, local03
1d044     08 22 86 F1 | 	sub	local03, #8
1d048     11 27 02 FB | 	rdlong	local05, local03
1d04c     10 22 06 F1 | 	add	local03, #16
1d050     11 15 02 FB | 	rdlong	arg02, local03
1d054     10 22 86 F1 | 	sub	local03, #16
1d058     13 FB 01 F6 | 	mov	result1, local05
1d05c     0A FB 01 F1 | 	add	result1, arg02
1d060     FD 1E 42 FC | 	wrbyte	local01, result1
1d064     0F 1F E2 F8 | 	getbyte	local01, local01, #0
1d068     01 26 06 F1 | 	add	local05, #1
1d06c     11 27 62 FC | 	wrlong	local05, local03
1d070     06 20 06 F1 | 	add	local02, #6
1d074     10 29 EA FA | 	rdword	local06, local02 wz
1d078     06 20 86 F1 | 	sub	local02, #6
1d07c     0C 22 06 51 |  if_ne	add	local03, #12
1d080     11 25 02 5B |  if_ne	rdlong	local04, local03
1d084     12 27 0A 52 |  if_ne	cmp	local05, local04 wz
1d088     0C 00 90 AD |  if_e	jmp	#LR__2910
1d08c     0A 1E 0E F2 | 	cmp	local01, #10 wz
1d090     01 28 0E A2 |  if_e	cmp	local06, #1 wz
1d094     10 00 90 5D |  if_ne	jmp	#LR__2911
1d098                 | LR__2910
1d098     10 13 02 F6 | 	mov	arg01, local02
1d09c     18 00 B0 FD | 	call	#__system____default_flush
1d0a0     00 FA 0D F2 | 	cmp	result1, #0 wz
1d0a4     01 1E 66 56 |  if_ne	neg	local01, #1
1d0a8                 | LR__2911
1d0a8     0F FB 01 F6 | 	mov	result1, local01
1d0ac     A7 F0 03 F6 | 	mov	ptra, fp
1d0b0     B2 00 A0 FD | 	call	#popregs_
1d0b4                 | __system____default_putc_ret
1d0b4     2D 00 64 FD | 	ret
1d0b8                 | 
1d0b8                 | __system____default_flush
1d0b8     06 4A 05 F6 | 	mov	COUNT_, #6
1d0bc     A8 00 A0 FD | 	call	#pushregs_
1d0c0     09 1F 02 F6 | 	mov	local01, arg01
1d0c4     0F 21 02 FB | 	rdlong	local02, local01
1d0c8     10 23 02 FB | 	rdlong	local03, local02
1d0cc     08 20 06 F1 | 	add	local02, #8
1d0d0     10 FB 01 FB | 	rdlong	result1, local02
1d0d4     08 20 86 F1 | 	sub	local02, #8
1d0d8     02 FA CD F7 | 	test	result1, #2 wz
1d0dc     D0 00 90 AD |  if_e	jmp	#LR__2922
1d0e0     01 22 56 F2 | 	cmps	local03, #1 wc
1d0e4     20 01 90 CD |  if_b	jmp	#LR__2924
1d0e8     08 1E 06 F1 | 	add	local01, #8
1d0ec     0F FB 01 FB | 	rdlong	result1, local01
1d0f0     08 1E 86 F1 | 	sub	local01, #8
1d0f4     40 FA CD F7 | 	test	result1, #64 wz
1d0f8     68 00 90 AD |  if_e	jmp	#LR__2921
1d0fc     08 1E 06 F1 | 	add	local01, #8
1d100     0F 17 02 FB | 	rdlong	arg03, local01
1d104     08 1E 86 F1 | 	sub	local01, #8
1d108     80 16 CE F7 | 	test	arg03, #128 wz
1d10c     54 00 90 AD |  if_e	jmp	#LR__2920
1d110     30 1E 06 F1 | 	add	local01, #48
1d114     0F 25 02 FB | 	rdlong	local04, local01
1d118     12 27 02 F6 | 	mov	local05, local04
1d11c     30 1E 86 F1 | 	sub	local01, #48
1d120     13 26 46 F7 | 	zerox	local05, #19
1d124     14 24 46 F0 | 	shr	local04, #20
1d128     02 24 66 F0 | 	shl	local04, #2
1d12c     ED 24 02 F1 | 	add	local04, __methods__
1d130     12 25 02 FB | 	rdlong	local04, local04
1d134     0F 13 02 F6 | 	mov	arg01, local01
1d138     00 14 06 F6 | 	mov	arg02, #0
1d13c     02 16 06 F6 | 	mov	arg03, #2
1d140     F2 28 02 F6 | 	mov	local06, objptr
1d144     13 E5 01 F6 | 	mov	objptr, local05
1d148     2D 24 62 FD | 	call	local04
1d14c     14 E5 01 F6 | 	mov	objptr, local06
1d150     08 1E 06 F1 | 	add	local01, #8
1d154     0F 29 02 FB | 	rdlong	local06, local01
1d158     80 28 26 F5 | 	andn	local06, #128
1d15c     0F 29 62 FC | 	wrlong	local06, local01
1d160     08 1E 86 F1 | 	sub	local01, #8
1d164                 | LR__2920
1d164                 | LR__2921
1d164     18 1E 06 F1 | 	add	local01, #24
1d168     0F 25 02 FB | 	rdlong	local04, local01
1d16c     12 27 02 F6 | 	mov	local05, local04
1d170     18 1E 86 F1 | 	sub	local01, #24
1d174     13 26 46 F7 | 	zerox	local05, #19
1d178     14 24 46 F0 | 	shr	local04, #20
1d17c     02 24 66 F0 | 	shl	local04, #2
1d180     ED 24 02 F1 | 	add	local04, __methods__
1d184     12 25 02 FB | 	rdlong	local04, local04
1d188     10 20 06 F1 | 	add	local02, #16
1d18c     10 15 02 FB | 	rdlong	arg02, local02
1d190     10 20 86 F1 | 	sub	local02, #16
1d194     0F 13 02 F6 | 	mov	arg01, local01
1d198     11 17 02 F6 | 	mov	arg03, local03
1d19c     F2 28 02 F6 | 	mov	local06, objptr
1d1a0     13 E5 01 F6 | 	mov	objptr, local05
1d1a4     2D 24 62 FD | 	call	local04
1d1a8     14 E5 01 F6 | 	mov	objptr, local06
1d1ac     58 00 90 FD | 	jmp	#LR__2924
1d1b0                 | LR__2922
1d1b0     08 20 06 F1 | 	add	local02, #8
1d1b4     10 29 02 FB | 	rdlong	local06, local02
1d1b8     08 20 86 F1 | 	sub	local02, #8
1d1bc     01 28 CE F7 | 	test	local06, #1 wz
1d1c0     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
1d1c4     40 00 90 AD |  if_e	jmp	#LR__2923
1d1c8     30 1E 06 F1 | 	add	local01, #48
1d1cc     0F 25 02 FB | 	rdlong	local04, local01
1d1d0     12 27 02 F6 | 	mov	local05, local04
1d1d4     30 1E 86 F1 | 	sub	local01, #48
1d1d8     13 26 46 F7 | 	zerox	local05, #19
1d1dc     14 24 46 F0 | 	shr	local04, #20
1d1e0     02 24 66 F0 | 	shl	local04, #2
1d1e4     ED 24 02 F1 | 	add	local04, __methods__
1d1e8     12 25 02 FB | 	rdlong	local04, local04
1d1ec     0F 13 02 F6 | 	mov	arg01, local01
1d1f0     11 15 62 F6 | 	neg	arg02, local03
1d1f4     01 16 06 F6 | 	mov	arg03, #1
1d1f8     F2 28 02 F6 | 	mov	local06, objptr
1d1fc     13 E5 01 F6 | 	mov	objptr, local05
1d200     2D 24 62 FD | 	call	local04
1d204     14 E5 01 F6 | 	mov	objptr, local06
1d208                 | LR__2923
1d208                 | LR__2924
1d208     10 01 68 FC | 	wrlong	#0, local02
1d20c     04 20 06 F1 | 	add	local02, #4
1d210     10 01 68 FC | 	wrlong	#0, local02
1d214     04 20 06 F1 | 	add	local02, #4
1d218     10 01 68 FC | 	wrlong	#0, local02
1d21c     00 FA 05 F6 | 	mov	result1, #0
1d220     A7 F0 03 F6 | 	mov	ptra, fp
1d224     B2 00 A0 FD | 	call	#popregs_
1d228                 | __system____default_flush_ret
1d228     2D 00 64 FD | 	ret
1d22c                 | 
1d22c                 | __system____default_buffer_init
1d22c     02 4A 05 F6 | 	mov	COUNT_, #2
1d230     A8 00 A0 FD | 	call	#pushregs_
1d234     09 1F 02 F6 | 	mov	local01, arg01
1d238     0F 21 02 FB | 	rdlong	local02, local01
1d23c     0F 13 02 F6 | 	mov	arg01, local01
1d240     F8 02 B0 FD | 	call	#__system___isatty
1d244     00 FA 0D F2 | 	cmp	result1, #0 wz
1d248     06 1E 06 51 |  if_ne	add	local01, #6
1d24c     0F 0B 58 5C |  if_ne	wrword	#5, local01
1d250     06 1E 06 A1 |  if_e	add	local01, #6
1d254     0F 0D 58 AC |  if_e	wrword	#6, local01
1d258     14 20 06 F1 | 	add	local02, #20
1d25c     10 1F 02 F6 | 	mov	local01, local02
1d260     04 20 86 F1 | 	sub	local02, #4
1d264     10 1F 62 FC | 	wrlong	local01, local02
1d268     04 20 86 F1 | 	sub	local02, #4
1d26c     02 00 80 FF 
1d270     10 01 68 FC | 	wrlong	##1024, local02
1d274     00 FA 05 F6 | 	mov	result1, #0
1d278     A7 F0 03 F6 | 	mov	ptra, fp
1d27c     B2 00 A0 FD | 	call	#popregs_
1d280                 | __system____default_buffer_init_ret
1d280     2D 00 64 FD | 	ret
1d284                 | 
1d284                 | __system__stat
1d284     04 4A 05 F6 | 	mov	COUNT_, #4
1d288     A8 00 A0 FD | 	call	#pushregs_
1d28c     0A 1F 02 F6 | 	mov	local01, arg02
1d290     84 E9 05 F1 | 	add	ptr___system__dat__, #388
1d294     F4 20 02 F6 | 	mov	local02, ptr___system__dat__
1d298     09 15 02 F6 | 	mov	arg02, arg01
1d29c     10 13 02 F6 | 	mov	arg01, local02
1d2a0     00 16 06 F6 | 	mov	arg03, #0
1d2a4     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
1d2a8     48 BA BF FD | 	call	#__system____getvfsforfile
1d2ac     FD 22 0A F6 | 	mov	local03, result1 wz
1d2b0     10 00 90 AD |  if_e	jmp	#LR__2930
1d2b4     34 22 06 F1 | 	add	local03, #52
1d2b8     11 17 0A FB | 	rdlong	arg03, local03 wz
1d2bc     34 22 86 F1 | 	sub	local03, #52
1d2c0     14 00 90 5D |  if_ne	jmp	#LR__2931
1d2c4                 | LR__2930
1d2c4     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1d2c8     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
1d2cc     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1d2d0     01 FA 65 F6 | 	neg	result1, #1
1d2d4     68 00 90 FD | 	jmp	#LR__2932
1d2d8                 | LR__2931
1d2d8     0F 13 02 F6 | 	mov	arg01, local01
1d2dc     00 14 06 F6 | 	mov	arg02, #0
1d2e0     30 16 06 F6 | 	mov	arg03, #48
1d2e4     09 25 02 F6 | 	mov	local04, arg01
1d2e8     98 00 A0 FD | 	call	#\builtin_bytefill_
1d2ec     12 FB 01 F6 | 	mov	result1, local04
1d2f0     10 13 CA FA | 	rdbyte	arg01, local02 wz
1d2f4     08 1E 06 A1 |  if_e	add	local01, #8
1d2f8     08 00 80 AF 
1d2fc     0F FF 6B AC |  if_e	wrlong	##4607, local01
1d300     00 FA 05 A6 |  if_e	mov	result1, #0
1d304     38 00 90 AD |  if_e	jmp	#LR__2932
1d308     34 22 06 F1 | 	add	local03, #52
1d30c     11 23 02 FB | 	rdlong	local03, local03
1d310     11 25 02 F6 | 	mov	local04, local03
1d314     13 22 46 F7 | 	zerox	local03, #19
1d318     14 24 46 F0 | 	shr	local04, #20
1d31c     02 24 66 F0 | 	shl	local04, #2
1d320     ED 24 02 F1 | 	add	local04, __methods__
1d324     12 25 02 FB | 	rdlong	local04, local04
1d328     10 13 02 F6 | 	mov	arg01, local02
1d32c     0F 15 02 F6 | 	mov	arg02, local01
1d330     F2 20 02 F6 | 	mov	local02, objptr
1d334     11 E5 01 F6 | 	mov	objptr, local03
1d338     2D 24 62 FD | 	call	local04
1d33c     10 E5 01 F6 | 	mov	objptr, local02
1d340                 | LR__2932
1d340     A7 F0 03 F6 | 	mov	ptra, fp
1d344     B2 00 A0 FD | 	call	#popregs_
1d348                 | __system__stat_ret
1d348     2D 00 64 FD | 	ret
1d34c                 | 
1d34c                 | __system__read
1d34c     0A 12 16 F2 | 	cmp	arg01, #10 wc
1d350     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1d354     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1d358     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1d35c     01 FA 65 36 |  if_ae	neg	result1, #1
1d360     20 00 90 3D |  if_ae	jmp	#LR__2940
1d364     34 12 06 FD | 	qmul	arg01, #52
1d368     02 00 00 FF 
1d36c     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
1d370     18 12 62 FD | 	getqx	arg01
1d374     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
1d378     02 00 00 FF 
1d37c     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
1d380     E8 0E B0 FD | 	call	#__system___vfsread
1d384                 | LR__2940
1d384                 | __system__read_ret
1d384     2D 00 64 FD | 	ret
1d388                 | 
1d388                 | __system__close
1d388     0A 12 16 F2 | 	cmp	arg01, #10 wc
1d38c     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1d390     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1d394     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1d398     01 FA 65 36 |  if_ae	neg	result1, #1
1d39c     20 00 90 3D |  if_ae	jmp	#LR__2950
1d3a0     34 12 06 FD | 	qmul	arg01, #52
1d3a4     02 00 00 FF 
1d3a8     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
1d3ac     18 12 62 FD | 	getqx	arg01
1d3b0     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
1d3b4     02 00 00 FF 
1d3b8     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
1d3bc     4C F9 BF FD | 	call	#__system___closeraw
1d3c0                 | LR__2950
1d3c0                 | __system__close_ret
1d3c0     2D 00 64 FD | 	ret
1d3c4                 | 
1d3c4                 | __system__lseek
1d3c4     06 4A 05 F6 | 	mov	COUNT_, #6
1d3c8     A8 00 A0 FD | 	call	#pushregs_
1d3cc     0A 12 16 F2 | 	cmp	arg01, #10 wc
1d3d0     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1d3d4     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1d3d8     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1d3dc     01 FA 65 36 |  if_ae	neg	result1, #1
1d3e0     C4 00 90 3D |  if_ae	jmp	#LR__2961
1d3e4     34 12 06 FD | 	qmul	arg01, #52
1d3e8     02 00 00 FF 
1d3ec     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
1d3f0     18 1E 62 FD | 	getqx	local01
1d3f4     F4 1E 02 F1 | 	add	local01, ptr___system__dat__
1d3f8     30 1E 06 F1 | 	add	local01, #48
1d3fc     0F 13 0A FB | 	rdlong	arg01, local01 wz
1d400     30 1E 86 F1 | 	sub	local01, #48
1d404     02 00 00 FF 
1d408     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
1d40c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1d410     F4 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
1d414     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1d418     01 FA 65 A6 |  if_e	neg	result1, #1
1d41c     88 00 90 AD |  if_e	jmp	#LR__2961
1d420     08 1E 06 F1 | 	add	local01, #8
1d424     0F 21 02 FB | 	rdlong	local02, local01
1d428     08 1E 86 F1 | 	sub	local01, #8
1d42c     40 20 CE F7 | 	test	local02, #64 wz
1d430     08 1E 06 51 |  if_ne	add	local01, #8
1d434     0F 21 02 5B |  if_ne	rdlong	local02, local01
1d438     80 20 46 55 |  if_ne	or	local02, #128
1d43c     0F 21 62 5C |  if_ne	wrlong	local02, local01
1d440     08 1E 86 51 |  if_ne	sub	local01, #8
1d444     30 1E 06 F1 | 	add	local01, #48
1d448     0F 23 02 FB | 	rdlong	local03, local01
1d44c     11 25 02 F6 | 	mov	local04, local03
1d450     30 1E 86 F1 | 	sub	local01, #48
1d454     13 24 46 F7 | 	zerox	local04, #19
1d458     14 22 46 F0 | 	shr	local03, #20
1d45c     02 22 66 F0 | 	shl	local03, #2
1d460     ED 22 02 F1 | 	add	local03, __methods__
1d464     11 23 02 FB | 	rdlong	local03, local03
1d468     0F 13 02 F6 | 	mov	arg01, local01
1d46c     F2 26 02 F6 | 	mov	local05, objptr
1d470     12 E5 01 F6 | 	mov	objptr, local04
1d474     2D 22 62 FD | 	call	local03
1d478     13 E5 01 F6 | 	mov	objptr, local05
1d47c     FD 28 02 F6 | 	mov	local06, result1
1d480     00 28 56 F2 | 	cmps	local06, #0 wc
1d484     1C 00 90 3D |  if_ae	jmp	#LR__2960
1d488     14 13 6A F6 | 	neg	arg01, local06 wz
1d48c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1d490     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1d494     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1d498     01 FA 65 56 |  if_ne	neg	result1, #1
1d49c     00 FA 05 A6 |  if_e	mov	result1, #0
1d4a0     04 00 90 FD | 	jmp	#LR__2961
1d4a4                 | LR__2960
1d4a4     14 FB 01 F6 | 	mov	result1, local06
1d4a8                 | LR__2961
1d4a8     A7 F0 03 F6 | 	mov	ptra, fp
1d4ac     B2 00 A0 FD | 	call	#popregs_
1d4b0                 | __system__lseek_ret
1d4b0     2D 00 64 FD | 	ret
1d4b4                 | 
1d4b4                 | __system___ioctl
1d4b4     03 4A 05 F6 | 	mov	COUNT_, #3
1d4b8     A8 00 A0 FD | 	call	#pushregs_
1d4bc     00 12 4E F2 | 	cmps	arg01, #0 wz
1d4c0     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1d4c4     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
1d4c8     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1d4cc     01 FA 65 A6 |  if_e	neg	result1, #1
1d4d0     5C 00 90 AD |  if_e	jmp	#LR__2971
1d4d4     28 12 06 F1 | 	add	arg01, #40
1d4d8     09 1F 02 FB | 	rdlong	local01, arg01
1d4dc     0F 21 02 F6 | 	mov	local02, local01
1d4e0     28 12 86 F1 | 	sub	arg01, #40
1d4e4     13 20 46 F7 | 	zerox	local02, #19
1d4e8     14 1E 46 F0 | 	shr	local01, #20
1d4ec     02 1E 66 F0 | 	shl	local01, #2
1d4f0     ED 1E 02 F1 | 	add	local01, __methods__
1d4f4     0F 1F 02 FB | 	rdlong	local01, local01
1d4f8     F2 22 02 F6 | 	mov	local03, objptr
1d4fc     10 E5 01 F6 | 	mov	objptr, local02
1d500     2D 1E 62 FD | 	call	local01
1d504     11 E5 01 F6 | 	mov	objptr, local03
1d508     FD 12 0A F6 | 	mov	arg01, result1 wz
1d50c     1C 00 90 AD |  if_e	jmp	#LR__2970
1d510     00 12 4E F2 | 	cmps	arg01, #0 wz
1d514     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1d518     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1d51c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1d520     01 FA 65 56 |  if_ne	neg	result1, #1
1d524     00 FA 05 A6 |  if_e	mov	result1, #0
1d528     04 00 90 FD | 	jmp	#LR__2971
1d52c                 | LR__2970
1d52c     00 FA 05 F6 | 	mov	result1, #0
1d530                 | LR__2971
1d530     A7 F0 03 F6 | 	mov	ptra, fp
1d534     B2 00 A0 FD | 	call	#popregs_
1d538                 | __system___ioctl_ret
1d538     2D 00 64 FD | 	ret
1d53c                 | 
1d53c                 | __system___isatty
1d53c     00 4A 05 F6 | 	mov	COUNT_, #0
1d540     A8 00 A0 FD | 	call	#pushregs_
1d544     0C F0 07 F1 | 	add	ptra, #12
1d548     04 4E 05 F1 | 	add	fp, #4
1d54c     A7 12 62 FC | 	wrlong	arg01, fp
1d550     04 4E 05 F1 | 	add	fp, #4
1d554     A7 16 02 F6 | 	mov	arg03, fp
1d558     08 4E 85 F1 | 	sub	fp, #8
1d55c     00 15 06 F6 | 	mov	arg02, #256
1d560     50 FF BF FD | 	call	#__system___ioctl
1d564     00 FA 0D F2 | 	cmp	result1, #0 wz
1d568     01 FA 05 A6 |  if_e	mov	result1, #1
1d56c     00 FA 05 56 |  if_ne	mov	result1, #0
1d570     A7 F0 03 F6 | 	mov	ptra, fp
1d574     B2 00 A0 FD | 	call	#popregs_
1d578                 | __system___isatty_ret
1d578     2D 00 64 FD | 	ret
1d57c                 | 
1d57c                 | __system____getftab
1d57c     0A 12 16 F2 | 	cmp	arg01, #10 wc
1d580     34 12 06 CD |  if_b	qmul	arg01, #52
1d584     00 FA 05 36 |  if_ae	mov	result1, #0
1d588     02 00 00 CF 
1d58c     20 E9 05 C1 |  if_b	add	ptr___system__dat__, ##1312
1d590     18 FA 61 CD |  if_b	getqx	result1
1d594     F4 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
1d598     02 00 00 CF 
1d59c     20 E9 85 C1 |  if_b	sub	ptr___system__dat__, ##1312
1d5a0                 | __system____getftab_ret
1d5a0     2D 00 64 FD | 	ret
1d5a4                 | 
1d5a4                 | __system__strncpy
1d5a4     09 01 02 F6 | 	mov	_var01, arg01
1d5a8                 | LR__2980
1d5a8     01 16 86 F1 | 	sub	arg03, #1
1d5ac     00 16 56 F2 | 	cmps	arg03, #0 wc
1d5b0     18 00 90 CD |  if_b	jmp	#LR__2981
1d5b4     0A FB C1 FA | 	rdbyte	result1, arg02
1d5b8     00 FB 41 FC | 	wrbyte	result1, _var01
1d5bc     01 14 06 F1 | 	add	arg02, #1
1d5c0     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1d5c4     01 00 06 F1 | 	add	_var01, #1
1d5c8     DC FF 9F 5D |  if_ne	jmp	#LR__2980
1d5cc                 | LR__2981
1d5cc     97 0C 48 FB | 	callpa	#(@LR__2983-@LR__2982)>>2,fcache_load_ptr_
1d5d0                 | LR__2982
1d5d0     01 16 86 F1 | 	sub	arg03, #1
1d5d4     00 16 56 F2 | 	cmps	arg03, #0 wc
1d5d8     00 03 02 36 |  if_ae	mov	_var02, _var01
1d5dc     01 00 06 31 |  if_ae	add	_var01, #1
1d5e0     01 01 48 3C |  if_ae	wrbyte	#0, _var02
1d5e4     E8 FF 9F 3D |  if_ae	jmp	#LR__2982
1d5e8                 | LR__2983
1d5e8     09 FB 01 F6 | 	mov	result1, arg01
1d5ec                 | __system__strncpy_ret
1d5ec     2D 00 64 FD | 	ret
1d5f0                 | 
1d5f0                 | __system__strncat
1d5f0     00 14 4E F2 | 	cmps	arg02, #0 wz
1d5f4     50 00 90 AD |  if_e	jmp	#LR__2994
1d5f8     01 16 16 F2 | 	cmp	arg03, #1 wc
1d5fc     48 00 90 CD |  if_b	jmp	#LR__2994
1d600     09 01 02 F6 | 	mov	_var01, arg01
1d604     97 1E 48 FB | 	callpa	#(@LR__2992-@LR__2990)>>2,fcache_load_ptr_
1d608                 | LR__2990
1d608     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1d60c     01 00 06 51 |  if_ne	add	_var01, #1
1d610     F4 FF 9F 5D |  if_ne	jmp	#LR__2990
1d614     0B 03 02 F6 | 	mov	_var02, arg03
1d618                 | LR__2991
1d618     0A 05 C2 FA | 	rdbyte	_var03, arg02
1d61c     02 07 02 F6 | 	mov	_var04, _var03
1d620     07 06 4E F7 | 	zerox	_var04, #7 wz
1d624     01 14 06 F1 | 	add	arg02, #1
1d628     18 00 90 AD |  if_e	jmp	#LR__2993
1d62c     01 02 86 F1 | 	sub	_var02, #1
1d630     00 02 56 F2 | 	cmps	_var02, #0 wc
1d634     00 07 02 36 |  if_ae	mov	_var04, _var01
1d638     01 00 06 31 |  if_ae	add	_var01, #1
1d63c     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
1d640     D4 FF 9F 3D |  if_ae	jmp	#LR__2991
1d644                 | LR__2992
1d644                 | LR__2993
1d644     00 01 48 FC | 	wrbyte	#0, _var01
1d648                 | LR__2994
1d648     09 FB 01 F6 | 	mov	result1, arg01
1d64c                 | __system__strncat_ret
1d64c     2D 00 64 FD | 	ret
1d650                 | 
1d650                 | __system__strncmp
1d650     09 01 0A F6 | 	mov	_var01, arg01 wz
1d654     14 00 90 5D |  if_ne	jmp	#LR__3000
1d658     00 14 0E F2 | 	cmp	arg02, #0 wz
1d65c     01 02 66 56 |  if_ne	neg	_var02, #1
1d660     00 02 06 A6 |  if_e	mov	_var02, #0
1d664     01 FB 01 F6 | 	mov	result1, _var02
1d668     74 00 90 FD | 	jmp	#__system__strncmp_ret
1d66c                 | LR__3000
1d66c     00 14 0E F2 | 	cmp	arg02, #0 wz
1d670     01 FA 05 A6 |  if_e	mov	result1, #1
1d674     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1d678     0B 05 02 F6 | 	mov	_var03, arg03
1d67c     97 16 48 FB | 	callpa	#(@LR__3002-@LR__3001)>>2,fcache_load_ptr_
1d680                 | LR__3001
1d680     00 07 C2 FA | 	rdbyte	_var04, _var01
1d684     0A 09 02 F6 | 	mov	_var05, arg02
1d688     04 0B C2 FA | 	rdbyte	_var06, _var05
1d68c     01 04 86 F1 | 	sub	_var03, #1
1d690     00 04 56 F2 | 	cmps	_var03, #0 wc
1d694     01 00 06 F1 | 	add	_var01, #1
1d698     01 14 06 F1 | 	add	arg02, #1
1d69c     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
1d6a0     08 00 90 2D |  if_nc_and_z	jmp	#LR__3003
1d6a4     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
1d6a8     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3001
1d6ac                 | LR__3002
1d6ac                 | LR__3003
1d6ac     00 04 56 F2 | 	cmps	_var03, #0 wc
1d6b0     00 FA 05 C6 |  if_b	mov	result1, #0
1d6b4     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
1d6b8     05 07 0A F2 | 	cmp	_var04, _var06 wz
1d6bc     00 FA 05 A6 |  if_e	mov	result1, #0
1d6c0     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1d6c4     00 06 0E F2 | 	cmp	_var04, #0 wz
1d6c8     01 FA 65 A6 |  if_e	neg	result1, #1
1d6cc     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1d6d0     00 0A 0E F2 | 	cmp	_var06, #0 wz
1d6d4     01 FA 05 A6 |  if_e	mov	result1, #1
1d6d8     03 FB 01 56 |  if_ne	mov	result1, _var04
1d6dc     05 FB 81 51 |  if_ne	sub	result1, _var06
1d6e0                 | __system__strncmp_ret
1d6e0     2D 00 64 FD | 	ret
1d6e4                 | 
1d6e4                 | __system____root_opendir
1d6e4     64 E8 05 F1 | 	add	ptr___system__dat__, #100
1d6e8     04 12 06 F1 | 	add	arg01, #4
1d6ec     09 E9 61 FC | 	wrlong	ptr___system__dat__, arg01
1d6f0     00 FA 05 F6 | 	mov	result1, #0
1d6f4     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
1d6f8                 | __system____root_opendir_ret
1d6f8     2D 00 64 FD | 	ret
1d6fc                 | 
1d6fc                 | __system____root_readdir
1d6fc     03 4A 05 F6 | 	mov	COUNT_, #3
1d700     A8 00 A0 FD | 	call	#pushregs_
1d704     09 1F 02 F6 | 	mov	local01, arg01
1d708     0A 21 02 F6 | 	mov	local02, arg02
1d70c     04 1E 06 F1 | 	add	local01, #4
1d710     0F 23 02 FB | 	rdlong	local03, local01
1d714     04 1E 86 F1 | 	sub	local01, #4
1d718                 | LR__3010
1d718     74 E8 05 F1 | 	add	ptr___system__dat__, #116
1d71c     F4 22 0A F2 | 	cmp	local03, ptr___system__dat__ wz
1d720     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
1d724     01 FA 65 A6 |  if_e	neg	result1, #1
1d728     48 00 90 AD |  if_e	jmp	#LR__3011
1d72c     11 17 0A FB | 	rdlong	arg03, local03 wz
1d730     04 22 06 A1 |  if_e	add	local03, #4
1d734     E0 FF 9F AD |  if_e	jmp	#LR__3010
1d738     11 15 02 FB | 	rdlong	arg02, local03
1d73c     01 14 06 F1 | 	add	arg02, #1
1d740     10 13 02 F6 | 	mov	arg01, local02
1d744     40 16 06 F6 | 	mov	arg03, #64
1d748     58 FE BF FD | 	call	#__system__strncpy
1d74c     50 20 06 F1 | 	add	local02, #80
1d750     10 03 48 FC | 	wrbyte	#1, local02
1d754     08 20 86 F1 | 	sub	local02, #8
1d758     10 01 68 FC | 	wrlong	#0, local02
1d75c     04 20 06 F1 | 	add	local02, #4
1d760     10 01 68 FC | 	wrlong	#0, local02
1d764     04 22 06 F1 | 	add	local03, #4
1d768     04 1E 06 F1 | 	add	local01, #4
1d76c     0F 23 62 FC | 	wrlong	local03, local01
1d770     00 FA 05 F6 | 	mov	result1, #0
1d774                 | LR__3011
1d774     A7 F0 03 F6 | 	mov	ptra, fp
1d778     B2 00 A0 FD | 	call	#popregs_
1d77c                 | __system____root_readdir_ret
1d77c     2D 00 64 FD | 	ret
1d780                 | 
1d780                 | __system____root_closedir
1d780     00 FA 05 F6 | 	mov	result1, #0
1d784                 | __system____root_closedir_ret
1d784     2D 00 64 FD | 	ret
1d788                 | 
1d788                 | __system____root_stat
1d788     0A 01 02 F6 | 	mov	_var01, arg02
1d78c     00 13 02 F6 | 	mov	arg01, _var01
1d790     00 14 06 F6 | 	mov	arg02, #0
1d794     30 16 06 F6 | 	mov	arg03, #48
1d798     98 00 A0 FD | 	call	#\builtin_bytefill_
1d79c     08 00 06 F1 | 	add	_var01, #8
1d7a0     08 00 80 FF 
1d7a4     00 FF 6B FC | 	wrlong	##4607, _var01
1d7a8     00 FA 05 F6 | 	mov	result1, #0
1d7ac                 | __system____root_stat_ret
1d7ac     2D 00 64 FD | 	ret
1d7b0                 | 
1d7b0                 | __system___normalizeName
1d7b0     00 00 06 F6 | 	mov	_var01, #0
1d7b4     09 03 02 F6 | 	mov	_var02, arg01
1d7b8     01 05 02 F6 | 	mov	_var03, _var02
1d7bc                 | LR__3020
1d7bc     01 07 CA FA | 	rdbyte	_var04, _var02 wz
1d7c0     5C 01 90 AD |  if_e	jmp	#LR__3039
1d7c4     00 00 0E F2 | 	cmp	_var01, #0 wz
1d7c8     02 07 02 56 |  if_ne	mov	_var04, _var03
1d7cc     01 04 06 51 |  if_ne	add	_var03, #1
1d7d0     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
1d7d4     00 00 06 56 |  if_ne	mov	_var01, #0
1d7d8     01 07 C2 FA | 	rdbyte	_var04, _var02
1d7dc     2E 06 0E F2 | 	cmp	_var04, #46 wz
1d7e0     D8 00 90 5D |  if_ne	jmp	#LR__3032
1d7e4     01 02 06 F1 | 	add	_var02, #1
1d7e8     01 07 C2 FA | 	rdbyte	_var04, _var02
1d7ec     01 02 86 F1 | 	sub	_var02, #1
1d7f0     2F 06 0E F2 | 	cmp	_var04, #47 wz
1d7f4     18 00 90 AD |  if_e	jmp	#LR__3021
1d7f8     01 02 06 F1 | 	add	_var02, #1
1d7fc     01 09 C2 FA | 	rdbyte	_var05, _var02
1d800     01 02 86 F1 | 	sub	_var02, #1
1d804     04 0B 02 F6 | 	mov	_var06, _var05
1d808     07 0A 4E F7 | 	zerox	_var06, #7 wz
1d80c     10 00 90 5D |  if_ne	jmp	#LR__3022
1d810                 | LR__3021
1d810     01 0D 02 F6 | 	mov	_var07, _var02
1d814     01 0C 06 F1 | 	add	_var07, #1
1d818     06 03 02 F6 | 	mov	_var02, _var07
1d81c     E0 00 90 FD | 	jmp	#LR__3036
1d820                 | LR__3022
1d820     01 02 06 F1 | 	add	_var02, #1
1d824     01 0D C2 FA | 	rdbyte	_var07, _var02
1d828     01 02 86 F1 | 	sub	_var02, #1
1d82c     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
1d830     2E 06 0E F2 | 	cmp	_var04, #46 wz
1d834     84 00 90 5D |  if_ne	jmp	#LR__3031
1d838     02 02 06 F1 | 	add	_var02, #2
1d83c     01 0D C2 FA | 	rdbyte	_var07, _var02
1d840     02 02 86 F1 | 	sub	_var02, #2
1d844     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
1d848     2F 06 0E F2 | 	cmp	_var04, #47 wz
1d84c     18 00 90 AD |  if_e	jmp	#LR__3023
1d850     02 02 06 F1 | 	add	_var02, #2
1d854     01 09 C2 FA | 	rdbyte	_var05, _var02
1d858     02 02 86 F1 | 	sub	_var02, #2
1d85c     04 0B 02 F6 | 	mov	_var06, _var05
1d860     07 0A 4E F7 | 	zerox	_var06, #7 wz
1d864     54 00 90 5D |  if_ne	jmp	#LR__3030
1d868                 | LR__3023
1d868     02 02 06 F1 | 	add	_var02, #2
1d86c     09 05 5A F2 | 	cmps	_var03, arg01 wcz
1d870     40 00 90 ED |  if_be	jmp	#LR__3029
1d874     02 0F 02 F6 | 	mov	_var08, _var03
1d878     01 0E 86 F1 | 	sub	_var08, #1
1d87c                 | LR__3024
1d87c     07 07 C2 FA | 	rdbyte	_var04, _var08
1d880     2F 06 0E F2 | 	cmp	_var04, #47 wz
1d884     0C 00 90 5D |  if_ne	jmp	#LR__3025
1d888     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
1d88c     01 0E 86 11 |  if_a	sub	_var08, #1
1d890     E8 FF 9F 1D |  if_a	jmp	#LR__3024
1d894                 | LR__3025
1d894     97 0C 48 FB | 	callpa	#(@LR__3027-@LR__3026)>>2,fcache_load_ptr_
1d898                 | LR__3026
1d898     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
1d89c     10 00 90 ED |  if_be	jmp	#LR__3028
1d8a0     07 07 C2 FA | 	rdbyte	_var04, _var08
1d8a4     2F 06 0E F2 | 	cmp	_var04, #47 wz
1d8a8     01 0E 86 51 |  if_ne	sub	_var08, #1
1d8ac     E8 FF 9F 5D |  if_ne	jmp	#LR__3026
1d8b0                 | LR__3027
1d8b0                 | LR__3028
1d8b0     07 05 02 F6 | 	mov	_var03, _var08
1d8b4                 | LR__3029
1d8b4     01 00 06 F6 | 	mov	_var01, #1
1d8b8     44 00 90 FD | 	jmp	#LR__3036
1d8bc                 | LR__3030
1d8bc                 | LR__3031
1d8bc                 | LR__3032
1d8bc     97 18 48 FB | 	callpa	#(@LR__3034-@LR__3033)>>2,fcache_load_ptr_
1d8c0                 | LR__3033
1d8c0     01 07 CA FA | 	rdbyte	_var04, _var02 wz
1d8c4     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
1d8c8     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
1d8cc     20 00 90 AD |  if_e	jmp	#LR__3035
1d8d0     01 0B 02 F6 | 	mov	_var06, _var02
1d8d4     01 09 02 F6 | 	mov	_var05, _var02
1d8d8     01 08 06 F1 | 	add	_var05, #1
1d8dc     05 11 C2 FA | 	rdbyte	_var09, _var06
1d8e0     04 03 02 F6 | 	mov	_var02, _var05
1d8e4     02 11 42 FC | 	wrbyte	_var09, _var03
1d8e8     01 04 06 F1 | 	add	_var03, #1
1d8ec     D0 FF 9F FD | 	jmp	#LR__3033
1d8f0                 | LR__3034
1d8f0                 | LR__3035
1d8f0     01 07 C2 FA | 	rdbyte	_var04, _var02
1d8f4     2F 06 0E F2 | 	cmp	_var04, #47 wz
1d8f8     C0 FE 9F 5D |  if_ne	jmp	#LR__3020
1d8fc     01 00 06 F6 | 	mov	_var01, #1
1d900                 | LR__3036
1d900     97 0C 48 FB | 	callpa	#(@LR__3038-@LR__3037)>>2,fcache_load_ptr_
1d904                 | LR__3037
1d904     01 07 C2 FA | 	rdbyte	_var04, _var02
1d908     2F 06 0E F2 | 	cmp	_var04, #47 wz
1d90c     01 0D 02 A6 |  if_e	mov	_var07, _var02
1d910     01 0C 06 A1 |  if_e	add	_var07, #1
1d914     06 03 02 A6 |  if_e	mov	_var02, _var07
1d918     E8 FF 9F AD |  if_e	jmp	#LR__3037
1d91c                 | LR__3038
1d91c     9C FE 9F FD | 	jmp	#LR__3020
1d920                 | LR__3039
1d920     02 01 48 FC | 	wrbyte	#0, _var03
1d924                 | __system___normalizeName_ret
1d924     2D 00 64 FD | 	ret
1d928                 | 
1d928                 | __system___strrev
1d928     09 01 CA FA | 	rdbyte	_var01, arg01 wz
1d92c     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
1d930     09 03 02 F6 | 	mov	_var02, arg01
1d934     97 1A 48 FB | 	callpa	#(@LR__3042-@LR__3040)>>2,fcache_load_ptr_
1d938                 | LR__3040
1d938     01 01 CA FA | 	rdbyte	_var01, _var02 wz
1d93c     01 02 06 51 |  if_ne	add	_var02, #1
1d940     F4 FF 9F 5D |  if_ne	jmp	#LR__3040
1d944     01 02 86 F1 | 	sub	_var02, #1
1d948                 | LR__3041
1d948     09 03 5A F2 | 	cmps	_var02, arg01 wcz
1d94c     1C 00 90 ED |  if_be	jmp	#LR__3043
1d950     09 01 C2 FA | 	rdbyte	_var01, arg01
1d954     01 05 C2 FA | 	rdbyte	_var03, _var02
1d958     09 05 42 FC | 	wrbyte	_var03, arg01
1d95c     01 01 42 FC | 	wrbyte	_var01, _var02
1d960     01 12 06 F1 | 	add	arg01, #1
1d964     01 02 86 F1 | 	sub	_var02, #1
1d968     DC FF 9F FD | 	jmp	#LR__3041
1d96c                 | LR__3042
1d96c                 | LR__3043
1d96c                 | __system___strrev_ret
1d96c     2D 00 64 FD | 	ret
1d970                 | 
1d970                 | __system___fmtpad
1d970     06 4A 05 F6 | 	mov	COUNT_, #6
1d974     A8 00 A0 FD | 	call	#pushregs_
1d978     09 1F 02 F6 | 	mov	local01, arg01
1d97c     0A 21 02 F6 | 	mov	local02, arg02
1d980     0B 23 02 F6 | 	mov	local03, arg03
1d984     10 13 EA F8 | 	getbyte	arg01, local02, #1
1d988     16 20 46 F0 | 	shr	local02, #22
1d98c     03 20 0E F5 | 	and	local02, #3 wz
1d990     00 24 06 F6 | 	mov	local04, #0
1d994     01 20 06 A6 |  if_e	mov	local02, #1
1d998     0C 21 CA F7 | 	test	local02, arg04 wz
1d99c     00 FA 05 A6 |  if_e	mov	result1, #0
1d9a0     88 00 90 AD |  if_e	jmp	#LR__3053
1d9a4     09 23 C2 F2 | 	subr	local03, arg01
1d9a8     01 22 56 F2 | 	cmps	local03, #1 wc
1d9ac     00 FA 05 C6 |  if_b	mov	result1, #0
1d9b0     78 00 90 CD |  if_b	jmp	#LR__3053
1d9b4     03 20 0E F2 | 	cmp	local02, #3 wz
1d9b8     18 00 90 5D |  if_ne	jmp	#LR__3050
1d9bc     01 18 0E F2 | 	cmp	arg04, #1 wz
1d9c0     6E 20 62 FD | 	wrz	local02
1d9c4     10 23 02 F1 | 	add	local03, local02
1d9c8     11 23 52 F6 | 	abs	local03, local03 wc
1d9cc     01 22 46 F0 | 	shr	local03, #1
1d9d0     11 23 82 F6 | 	negc	local03, local03
1d9d4                 | LR__3050
1d9d4     01 22 56 F2 | 	cmps	local03, #1 wc
1d9d8     4C 00 90 CD |  if_b	jmp	#LR__3052
1d9dc     11 27 02 F6 | 	mov	local05, local03
1d9e0                 | LR__3051
1d9e0     0F 21 02 F6 | 	mov	local02, local01
1d9e4     0F 29 02 F6 | 	mov	local06, local01
1d9e8     13 20 46 F7 | 	zerox	local02, #19
1d9ec     14 28 46 F0 | 	shr	local06, #20
1d9f0     02 28 66 F0 | 	shl	local06, #2
1d9f4     ED 28 02 F1 | 	add	local06, __methods__
1d9f8     14 29 02 FB | 	rdlong	local06, local06
1d9fc     20 12 06 F6 | 	mov	arg01, #32
1da00     F2 22 02 F6 | 	mov	local03, objptr
1da04     10 E5 01 F6 | 	mov	objptr, local02
1da08     2D 28 62 FD | 	call	local06
1da0c     11 E5 01 F6 | 	mov	objptr, local03
1da10     FD 28 02 F6 | 	mov	local06, result1
1da14     00 28 56 F2 | 	cmps	local06, #0 wc
1da18     14 FB 01 C6 |  if_b	mov	result1, local06
1da1c     0C 00 90 CD |  if_b	jmp	#LR__3053
1da20     14 25 02 F1 | 	add	local04, local06
1da24     EE 27 6E FB | 	djnz	local05, #LR__3051
1da28                 | LR__3052
1da28     12 FB 01 F6 | 	mov	result1, local04
1da2c                 | LR__3053
1da2c     A7 F0 03 F6 | 	mov	ptra, fp
1da30     B2 00 A0 FD | 	call	#popregs_
1da34                 | __system___fmtpad_ret
1da34     2D 00 64 FD | 	ret
1da38                 | 
1da38                 | __system___uitoa
1da38     04 4A 05 F6 | 	mov	COUNT_, #4
1da3c     A8 00 A0 FD | 	call	#pushregs_
1da40     09 1F 02 F6 | 	mov	local01, arg01
1da44     00 1A 4E F2 | 	cmps	arg05, #0 wz
1da48     0F 1B 02 F6 | 	mov	arg05, local01
1da4c     00 20 06 F6 | 	mov	local02, #0
1da50     37 22 06 56 |  if_ne	mov	local03, #55
1da54     57 22 06 A6 |  if_e	mov	local03, #87
1da58                 | LR__3060
1da58     0B 15 12 FD | 	qdiv	arg02, arg03
1da5c     19 24 62 FD | 	getqy	local04
1da60     0B 15 12 FD | 	qdiv	arg02, arg03
1da64     0A 24 16 F2 | 	cmp	local04, #10 wc
1da68     30 24 06 C1 |  if_b	add	local04, #48
1da6c     11 25 02 31 |  if_ae	add	local04, local03
1da70     0D 25 42 FC | 	wrbyte	local04, arg05
1da74     01 1A 06 F1 | 	add	arg05, #1
1da78     01 20 06 F1 | 	add	local02, #1
1da7c     18 14 62 FD | 	getqx	arg02
1da80     00 14 0E F2 | 	cmp	arg02, #0 wz
1da84     D0 FF 9F 5D |  if_ne	jmp	#LR__3060
1da88     0C 21 12 F2 | 	cmp	local02, arg04 wc
1da8c     C8 FF 9F CD |  if_b	jmp	#LR__3060
1da90     0D 01 48 FC | 	wrbyte	#0, arg05
1da94     0F 13 02 F6 | 	mov	arg01, local01
1da98     8C FE BF FD | 	call	#__system___strrev
1da9c     10 FB 01 F6 | 	mov	result1, local02
1daa0     A7 F0 03 F6 | 	mov	ptra, fp
1daa4     B2 00 A0 FD | 	call	#popregs_
1daa8                 | __system___uitoa_ret
1daa8     2D 00 64 FD | 	ret
1daac                 | 
1daac                 | __system__disassemble_0374
1daac     10 4A 05 F6 | 	mov	COUNT_, #16
1dab0     A8 00 A0 FD | 	call	#pushregs_
1dab4     09 1F 02 F6 | 	mov	local01, arg01
1dab8     0A 21 02 F6 | 	mov	local02, arg02
1dabc     0B 23 02 F6 | 	mov	local03, arg03
1dac0     0C 25 02 F6 | 	mov	local04, arg04
1dac4     0D 27 02 F6 | 	mov	local05, arg05
1dac8     13 13 52 F6 | 	abs	arg01, local05 wc
1dacc     1F 28 C6 C9 |  if_b	decod	local06, #31
1dad0     00 28 06 36 |  if_ae	mov	local06, #0
1dad4     64 D0 BF FD | 	call	#__system___float_fromuns
1dad8     14 FB 61 F5 | 	xor	result1, local06
1dadc     FD 2A 02 F6 | 	mov	local07, result1
1dae0     00 2C 06 F6 | 	mov	local08, #0
1dae4     0F 13 02 F6 | 	mov	arg01, local01
1dae8     00 14 06 F6 | 	mov	arg02, #0
1daec     01 16 06 F6 | 	mov	arg03, #1
1daf0     80 D8 BF FD | 	call	#__system___float_cmp
1daf4     00 FA 0D F2 | 	cmp	result1, #0 wz
1daf8     00 2E 06 A6 |  if_e	mov	local09, #0
1dafc     10 01 68 AC |  if_e	wrlong	#0, local02
1db00     11 2F 62 AC |  if_e	wrlong	local09, local03
1db04     8C 01 90 AD |  if_e	jmp	#LR__3082
1db08     0F 13 02 F6 | 	mov	arg01, local01
1db0c     30 DD BF FD | 	call	#__system____builtin_ilogb
1db10     FD 30 02 F6 | 	mov	local10, result1
1db14     0A 26 0E F2 | 	cmp	local05, #10 wz
1db18     24 00 90 5D |  if_ne	jmp	#LR__3070
1db1c     18 2F 02 F6 | 	mov	local09, local10
1db20     01 2E 66 F0 | 	shl	local09, #1
1db24     18 2F 02 F1 | 	add	local09, local10
1db28     17 31 52 F6 | 	abs	local10, local09 wc
1db2c     0A 30 16 FD | 	qdiv	local10, #10
1db30     09 32 06 F6 | 	mov	local11, #9
1db34     18 30 62 FD | 	getqx	local10
1db38     18 31 82 F6 | 	negc	local10, local10
1db3c     04 00 90 FD | 	jmp	#LR__3071
1db40                 | LR__3070
1db40     18 32 06 F6 | 	mov	local11, #24
1db44                 | LR__3071
1db44                 | LR__3072
1db44     08 2C 56 F2 | 	cmps	local08, #8 wc
1db48     01 2C 06 F1 | 	add	local08, #1
1db4c     60 00 90 3D |  if_ae	jmp	#LR__3073
1db50     00 C0 1F FF 
1db54     00 12 06 F6 | 	mov	arg01, ##1065353216
1db58     15 15 02 F6 | 	mov	arg02, local07
1db5c     18 17 02 F6 | 	mov	arg03, local10
1db60     88 E3 BF FD | 	call	#__system___float_pow_n
1db64     FD 14 02 F6 | 	mov	arg02, result1
1db68     0F 13 02 F6 | 	mov	arg01, local01
1db6c     D4 D5 BF FD | 	call	#__system___float_div
1db70     FD 34 02 F6 | 	mov	local12, result1
1db74     1A 13 02 F6 | 	mov	arg01, local12
1db78     00 C0 1F FF 
1db7c     00 14 06 F6 | 	mov	arg02, ##1065353216
1db80     01 16 06 F6 | 	mov	arg03, #1
1db84     EC D7 BF FD | 	call	#__system___float_cmp
1db88     00 FA 55 F2 | 	cmps	result1, #0 wc
1db8c     01 30 86 C1 |  if_b	sub	local10, #1
1db90     B0 FF 9F CD |  if_b	jmp	#LR__3072
1db94     15 15 02 F6 | 	mov	arg02, local07
1db98     1A 13 02 F6 | 	mov	arg01, local12
1db9c     01 16 66 F6 | 	neg	arg03, #1
1dba0     D0 D7 BF FD | 	call	#__system___float_cmp
1dba4     00 FA 55 F2 | 	cmps	result1, #0 wc
1dba8     01 30 06 31 |  if_ae	add	local10, #1
1dbac     94 FF 9F 3D |  if_ae	jmp	#LR__3072
1dbb0                 | LR__3073
1dbb0     1A 13 02 F6 | 	mov	arg01, local12
1dbb4     88 DC BF FD | 	call	#__system____builtin_ilogb
1dbb8     FD 36 02 F6 | 	mov	local13, result1
1dbbc     1A 39 02 F6 | 	mov	local14, local12
1dbc0     17 39 06 F4 | 	bitl	local14, #279
1dbc4     17 38 26 F4 | 	bith	local14, #23
1dbc8     1B 39 62 F0 | 	shl	local14, local13
1dbcc     02 26 0E F2 | 	cmp	local05, #2 wz
1dbd0     02 24 66 A0 |  if_e	shl	local04, #2
1dbd4     00 3A 06 F6 | 	mov	local15, #0
1dbd8     00 24 56 F2 | 	cmps	local04, #0 wc
1dbdc     10 00 90 3D |  if_ae	jmp	#LR__3074
1dbe0     18 25 C2 F2 | 	subr	local04, local10
1dbe4     00 24 56 F2 | 	cmps	local04, #0 wc
1dbe8     A0 00 90 CD |  if_b	jmp	#LR__3081
1dbec     04 00 90 FD | 	jmp	#LR__3075
1dbf0                 | LR__3074
1dbf0     01 24 06 F1 | 	add	local04, #1
1dbf4                 | LR__3075
1dbf4     19 25 7A F3 | 	fles	local04, local11 wcz
1dbf8     01 3C 06 F6 | 	mov	local16, #1
1dbfc     97 22 48 FB | 	callpa	#(@LR__3077-@LR__3076)>>2,fcache_load_ptr_
1dc00                 | LR__3076
1dc00     00 40 00 FF 
1dc04     00 3A 16 F2 | 	cmp	local15, ##8388608 wc
1dc08     38 00 90 3D |  if_ae	jmp	#LR__3078
1dc0c     01 24 56 F2 | 	cmps	local04, #1 wc
1dc10     01 24 86 F1 | 	sub	local04, #1
1dc14     2C 00 90 CD |  if_b	jmp	#LR__3078
1dc18     13 3B 02 FD | 	qmul	local15, local05
1dc1c     1C 37 02 F6 | 	mov	local13, local14
1dc20     17 36 46 F0 | 	shr	local13, #23
1dc24     17 39 06 F4 | 	bitl	local14, #279
1dc28     18 3A 62 FD | 	getqx	local15
1dc2c     13 3D 02 FD | 	qmul	local16, local05
1dc30     18 3C 62 FD | 	getqx	local16
1dc34     13 39 02 FD | 	qmul	local14, local05
1dc38     1B 3B 02 F1 | 	add	local15, local13
1dc3c     18 38 62 FD | 	getqx	local14
1dc40     BC FF 9F FD | 	jmp	#LR__3076
1dc44                 | LR__3077
1dc44                 | LR__3078
1dc44     13 2F 02 F6 | 	mov	local09, local05
1dc48     17 2E 66 F0 | 	shl	local09, #23
1dc4c     17 37 52 F6 | 	abs	local13, local09 wc
1dc50     01 36 46 F0 | 	shr	local13, #1
1dc54     1B 37 82 F6 | 	negc	local13, local13
1dc58     1B 39 1A F2 | 	cmp	local14, local13 wcz
1dc5c     20 00 90 1D |  if_a	jmp	#LR__3079
1dc60     17 26 66 F0 | 	shl	local05, #23
1dc64     13 37 52 F6 | 	abs	local13, local05 wc
1dc68     01 36 46 F0 | 	shr	local13, #1
1dc6c     1B 37 82 F6 | 	negc	local13, local13
1dc70     1B 39 0A F2 | 	cmp	local14, local13 wz
1dc74     14 00 90 5D |  if_ne	jmp	#LR__3080
1dc78     01 3A CE F7 | 	test	local15, #1 wz
1dc7c     0C 00 90 AD |  if_e	jmp	#LR__3080
1dc80                 | LR__3079
1dc80     01 3A 06 F1 | 	add	local15, #1
1dc84     1E 3B 0A F2 | 	cmp	local15, local16 wz
1dc88     01 30 06 A1 |  if_e	add	local10, #1
1dc8c                 | LR__3080
1dc8c                 | LR__3081
1dc8c     10 3B 62 FC | 	wrlong	local15, local02
1dc90     11 31 62 FC | 	wrlong	local10, local03
1dc94                 | LR__3082
1dc94     A7 F0 03 F6 | 	mov	ptra, fp
1dc98     B2 00 A0 FD | 	call	#popregs_
1dc9c                 | __system__disassemble_0374_ret
1dc9c     2D 00 64 FD | 	ret
1dca0                 | 
1dca0                 | __system__emitsign_0376
1dca0     00 FA 05 F6 | 	mov	result1, #0
1dca4     00 14 0E F2 | 	cmp	arg02, #0 wz
1dca8     09 01 02 56 |  if_ne	mov	_var01, arg01
1dcac     01 12 06 51 |  if_ne	add	arg01, #1
1dcb0     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
1dcb4     01 FA 05 56 |  if_ne	mov	result1, #1
1dcb8     00 16 0E F2 | 	cmp	arg03, #0 wz
1dcbc     09 61 48 5C |  if_ne	wrbyte	#48, arg01
1dcc0     01 12 06 51 |  if_ne	add	arg01, #1
1dcc4     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
1dcc8     02 FA 05 51 |  if_ne	add	result1, #2
1dccc                 | __system__emitsign_0376_ret
1dccc     2D 00 64 FD | 	ret
1dcd0                 | 
1dcd0                 | __system___gettxfunc
1dcd0     01 4A 05 F6 | 	mov	COUNT_, #1
1dcd4     A8 00 A0 FD | 	call	#pushregs_
1dcd8     A0 F8 BF FD | 	call	#__system____getftab
1dcdc     FD 1E 0A F6 | 	mov	local01, result1 wz
1dce0     10 00 90 AD |  if_e	jmp	#LR__3090
1dce4     08 1E 06 F1 | 	add	local01, #8
1dce8     0F 15 0A FB | 	rdlong	arg02, local01 wz
1dcec     08 1E 86 F1 | 	sub	local01, #8
1dcf0     08 00 90 5D |  if_ne	jmp	#LR__3091
1dcf4                 | LR__3090
1dcf4     00 FA 05 F6 | 	mov	result1, #0
1dcf8     0C 00 90 FD | 	jmp	#LR__3092
1dcfc                 | LR__3091
1dcfc     00 10 03 FF 
1dd00     00 1E 46 F5 | 	or	local01, ##102760448
1dd04     0F FB 01 F6 | 	mov	result1, local01
1dd08                 | LR__3092
1dd08     A7 F0 03 F6 | 	mov	ptra, fp
1dd0c     B2 00 A0 FD | 	call	#popregs_
1dd10                 | __system___gettxfunc_ret
1dd10     2D 00 64 FD | 	ret
1dd14                 | 
1dd14                 | __system___getrxfunc
1dd14     01 4A 05 F6 | 	mov	COUNT_, #1
1dd18     A8 00 A0 FD | 	call	#pushregs_
1dd1c     5C F8 BF FD | 	call	#__system____getftab
1dd20     FD 1E 0A F6 | 	mov	local01, result1 wz
1dd24     10 00 90 AD |  if_e	jmp	#LR__3100
1dd28     08 1E 06 F1 | 	add	local01, #8
1dd2c     0F 15 0A FB | 	rdlong	arg02, local01 wz
1dd30     08 1E 86 F1 | 	sub	local01, #8
1dd34     08 00 90 5D |  if_ne	jmp	#LR__3101
1dd38                 | LR__3100
1dd38     00 FA 05 F6 | 	mov	result1, #0
1dd3c     0C 00 90 FD | 	jmp	#LR__3102
1dd40                 | LR__3101
1dd40     00 18 03 FF 
1dd44     00 1E 46 F5 | 	or	local01, ##103809024
1dd48     0F FB 01 F6 | 	mov	result1, local01
1dd4c                 | LR__3102
1dd4c     A7 F0 03 F6 | 	mov	ptra, fp
1dd50     B2 00 A0 FD | 	call	#popregs_
1dd54                 | __system___getrxfunc_ret
1dd54     2D 00 64 FD | 	ret
1dd58                 | 
1dd58                 | __system___getiolock_0416
1dd58     01 4A 05 F6 | 	mov	COUNT_, #1
1dd5c     A8 00 A0 FD | 	call	#pushregs_
1dd60     18 F8 BF FD | 	call	#__system____getftab
1dd64     FD 1E 0A F6 | 	mov	local01, result1 wz
1dd68     10 00 90 AD |  if_e	jmp	#LR__3110
1dd6c     08 1E 06 F1 | 	add	local01, #8
1dd70     0F FB 09 FB | 	rdlong	result1, local01 wz
1dd74     08 1E 86 F1 | 	sub	local01, #8
1dd78     18 00 90 5D |  if_ne	jmp	#LR__3111
1dd7c                 | LR__3110
1dd7c     01 00 00 FF 
1dd80     D4 E8 05 F1 | 	add	ptr___system__dat__, ##724
1dd84     F4 FA 01 F6 | 	mov	result1, ptr___system__dat__
1dd88     01 00 00 FF 
1dd8c     D4 E8 85 F1 | 	sub	ptr___system__dat__, ##724
1dd90     08 00 90 FD | 	jmp	#LR__3112
1dd94                 | LR__3111
1dd94     0C 1E 06 F1 | 	add	local01, #12
1dd98     0F FB 01 F6 | 	mov	result1, local01
1dd9c                 | LR__3112
1dd9c     A7 F0 03 F6 | 	mov	ptra, fp
1dda0     B2 00 A0 FD | 	call	#popregs_
1dda4                 | __system___getiolock_0416_ret
1dda4     2D 00 64 FD | 	ret
1dda8                 | 
1dda8                 | __system___basic_dir
1dda8     05 4A 05 F6 | 	mov	COUNT_, #5
1ddac     A8 00 A0 FD | 	call	#pushregs_
1ddb0     4C F0 07 F1 | 	add	ptra, #76
1ddb4     04 4E 05 F1 | 	add	fp, #4
1ddb8     A7 12 62 FC | 	wrlong	arg01, fp
1ddbc     04 4E 05 F1 | 	add	fp, #4
1ddc0     A7 14 62 FC | 	wrlong	arg02, fp
1ddc4     04 4E 85 F1 | 	sub	fp, #4
1ddc8     A7 14 0A FB | 	rdlong	arg02, fp wz
1ddcc     04 4E 85 F1 | 	sub	fp, #4
1ddd0     04 4E 05 51 |  if_ne	add	fp, #4
1ddd4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1ddd8     04 4E 85 51 |  if_ne	sub	fp, #4
1dddc     0F 21 CA 5A |  if_ne	rdbyte	local02, local01 wz
1dde0     70 00 90 AD |  if_e	jmp	#LR__3120
1dde4     03 00 00 FF 
1dde8     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1ddec     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1ddf0     03 00 00 FF 
1ddf4     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1ddf8     03 00 00 5F 
1ddfc     28 E9 05 51 |  if_ne	add	ptr___system__dat__, ##1832
1de00     F4 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
1de04     03 00 00 5F 
1de08     28 E9 85 51 |  if_ne	sub	ptr___system__dat__, ##1832
1de0c     FC EA BF 5D |  if_ne	call	#__system__closedir
1de10     3C 01 00 FF 
1de14     EC 12 06 F6 | 	mov	arg01, ##@LR__4278
1de18     04 EA BF FD | 	call	#__system__opendir
1de1c     03 00 00 FF 
1de20     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1de24     F4 FA 61 FC | 	wrlong	result1, ptr___system__dat__
1de28     08 4E 05 F1 | 	add	fp, #8
1de2c     A7 20 02 FB | 	rdlong	local02, fp
1de30     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1de34     F4 20 62 FC | 	wrlong	local02, ptr___system__dat__
1de38     04 4E 85 F1 | 	sub	fp, #4
1de3c     A7 20 02 FB | 	rdlong	local02, fp
1de40     04 4E 85 F1 | 	sub	fp, #4
1de44     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1de48     F4 20 62 FC | 	wrlong	local02, ptr___system__dat__
1de4c     03 00 00 FF 
1de50     30 E9 85 F1 | 	sub	ptr___system__dat__, ##1840
1de54                 | LR__3120
1de54     03 00 00 FF 
1de58     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1de5c     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1de60     03 00 00 FF 
1de64     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1de68     3C 01 00 AF 
1de6c     EE FA 05 A6 |  if_e	mov	result1, ##@LR__4279
1de70     84 02 90 AD |  if_e	jmp	#LR__3133
1de74                 | LR__3121
1de74     03 00 00 FF 
1de78     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1de7c     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1de80     03 00 00 FF 
1de84     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1de88     F4 EA BF FD | 	call	#__system__readdir
1de8c     0C 4E 05 F1 | 	add	fp, #12
1de90     A7 FA 61 FC | 	wrlong	result1, fp
1de94     0C 4E 85 F1 | 	sub	fp, #12
1de98     00 FA 0D F2 | 	cmp	result1, #0 wz
1de9c     38 00 90 5D |  if_ne	jmp	#LR__3122
1dea0     03 00 00 FF 
1dea4     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1dea8     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1deac     03 00 00 FF 
1deb0     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1deb4     54 EA BF FD | 	call	#__system__closedir
1deb8     03 00 00 FF 
1debc     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1dec0     F4 00 68 FC | 	wrlong	#0, ptr___system__dat__
1dec4     03 00 00 FF 
1dec8     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1decc     3C 01 00 FF 
1ded0     F0 FA 05 F6 | 	mov	result1, ##@LR__4280
1ded4     20 02 90 FD | 	jmp	#LR__3133
1ded8                 | LR__3122
1ded8     0C 4E 05 F1 | 	add	fp, #12
1dedc     A7 12 02 FB | 	rdlong	arg01, fp
1dee0     0C 4E 85 F1 | 	sub	fp, #12
1dee4     03 00 00 FF 
1dee8     30 E9 05 F1 | 	add	ptr___system__dat__, ##1840
1deec     F4 14 02 FB | 	rdlong	arg02, ptr___system__dat__
1def0     03 00 00 FF 
1def4     30 E9 85 F1 | 	sub	ptr___system__dat__, ##1840
1def8     48 07 B0 FD | 	call	#__system___pat_match
1defc     00 FA 0D F2 | 	cmp	result1, #0 wz
1df00     70 FF 9F AD |  if_e	jmp	#LR__3121
1df04     03 00 00 FF 
1df08     2C E9 05 F1 | 	add	ptr___system__dat__, ##1836
1df0c     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1df10     03 00 00 FF 
1df14     2C E9 85 F1 | 	sub	ptr___system__dat__, ##1836
1df18     78 01 90 AD |  if_e	jmp	#LR__3129
1df1c     0C 4E 05 F1 | 	add	fp, #12
1df20     A7 12 02 FB | 	rdlong	arg01, fp
1df24     04 4E 05 F1 | 	add	fp, #4
1df28     A7 14 02 F6 | 	mov	arg02, fp
1df2c     10 4E 85 F1 | 	sub	fp, #16
1df30     50 F3 BF FD | 	call	#__system__stat
1df34     40 4E 05 F1 | 	add	fp, #64
1df38     A7 FA 61 FC | 	wrlong	result1, fp
1df3c     40 4E 85 F1 | 	sub	fp, #64
1df40     00 FA 0D F2 | 	cmp	result1, #0 wz
1df44     3C 01 00 5F 
1df48     F2 FA 05 56 |  if_ne	mov	result1, ##@LR__4281
1df4c     A8 01 90 5D |  if_ne	jmp	#LR__3133
1df50     18 4E 05 F1 | 	add	fp, #24
1df54     A7 20 02 FB | 	rdlong	local02, fp
1df58     78 00 00 FF 
1df5c     00 20 06 F5 | 	and	local02, ##61440
1df60     2C 4E 05 F1 | 	add	fp, #44
1df64     A7 20 62 FC | 	wrlong	local02, fp
1df68     38 4E 85 F1 | 	sub	fp, #56
1df6c     A7 20 02 FB | 	rdlong	local02, fp
1df70     0C 4E 85 F1 | 	sub	fp, #12
1df74     10 21 C2 FA | 	rdbyte	local02, local02
1df78     2E 20 0E F2 | 	cmp	local02, #46 wz
1df7c     08 4E 05 A1 |  if_e	add	fp, #8
1df80     A7 04 68 AC |  if_e	wrlong	#2, fp
1df84     08 4E C5 F3 | 	sumz	fp, #8
1df88     A7 00 68 5C |  if_ne	wrlong	#0, fp
1df8c     08 4E 85 51 |  if_ne	sub	fp, #8
1df90     44 4E 05 F1 | 	add	fp, #68
1df94     A7 20 02 FB | 	rdlong	local02, fp
1df98     44 4E 85 F1 | 	sub	fp, #68
1df9c     08 00 00 FF 
1dfa0     00 20 0E F2 | 	cmp	local02, ##4096 wz
1dfa4     18 00 90 5D |  if_ne	jmp	#LR__3123
1dfa8     08 4E 05 F1 | 	add	fp, #8
1dfac     A7 20 02 FB | 	rdlong	local02, fp
1dfb0     10 20 46 F5 | 	or	local02, #16
1dfb4     A7 20 62 FC | 	wrlong	local02, fp
1dfb8     08 4E 85 F1 | 	sub	fp, #8
1dfbc     AC 00 90 FD | 	jmp	#LR__3128
1dfc0                 | LR__3123
1dfc0     44 4E 05 F1 | 	add	fp, #68
1dfc4     A7 20 02 FB | 	rdlong	local02, fp
1dfc8     44 4E 85 F1 | 	sub	fp, #68
1dfcc     10 00 00 FF 
1dfd0     00 20 0E F2 | 	cmp	local02, ##8192 wz
1dfd4     44 4E 05 51 |  if_ne	add	fp, #68
1dfd8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1dfdc     44 4E 85 51 |  if_ne	sub	fp, #68
1dfe0     18 00 00 5F 
1dfe4     00 1E 0E 52 |  if_ne	cmp	local01, ##12288 wz
1dfe8     44 4E 05 51 |  if_ne	add	fp, #68
1dfec     0F 23 02 56 |  if_ne	mov	local03, local01
1dff0     44 4E 85 51 |  if_ne	sub	fp, #68
1dff4     20 00 00 5F 
1dff8     00 22 0E 52 |  if_ne	cmp	local03, ##16384 wz
1dffc     18 00 90 5D |  if_ne	jmp	#LR__3124
1e000     08 4E 05 F1 | 	add	fp, #8
1e004     A7 20 02 FB | 	rdlong	local02, fp
1e008     04 20 46 F5 | 	or	local02, #4
1e00c     A7 20 62 FC | 	wrlong	local02, fp
1e010     08 4E 85 F1 | 	sub	fp, #8
1e014     54 00 90 FD | 	jmp	#LR__3127
1e018                 | LR__3124
1e018     18 4E 05 F1 | 	add	fp, #24
1e01c     A7 20 02 FB | 	rdlong	local02, fp
1e020     18 4E 85 F1 | 	sub	fp, #24
1e024     92 20 CE F7 | 	test	local02, #146 wz
1e028     18 00 90 5D |  if_ne	jmp	#LR__3125
1e02c     08 4E 05 F1 | 	add	fp, #8
1e030     A7 20 02 FB | 	rdlong	local02, fp
1e034     01 20 46 F5 | 	or	local02, #1
1e038     A7 20 62 FC | 	wrlong	local02, fp
1e03c     08 4E 85 F1 | 	sub	fp, #8
1e040     28 00 90 FD | 	jmp	#LR__3126
1e044                 | LR__3125
1e044     44 4E 05 F1 | 	add	fp, #68
1e048     A7 24 02 FB | 	rdlong	local04, fp
1e04c     44 4E 85 F1 | 	sub	fp, #68
1e050     08 00 00 FF 
1e054     00 24 0E F2 | 	cmp	local04, ##4096 wz
1e058     08 4E 05 51 |  if_ne	add	fp, #8
1e05c     A7 24 02 5B |  if_ne	rdlong	local04, fp
1e060     20 24 46 55 |  if_ne	or	local04, #32
1e064     A7 24 62 5C |  if_ne	wrlong	local04, fp
1e068     08 4E 85 51 |  if_ne	sub	fp, #8
1e06c                 | LR__3126
1e06c                 | LR__3127
1e06c                 | LR__3128
1e06c     08 4E 05 F1 | 	add	fp, #8
1e070     A7 24 02 FB | 	rdlong	local04, fp
1e074     08 4E 85 F1 | 	sub	fp, #8
1e078     03 00 00 FF 
1e07c     2C E9 05 F1 | 	add	ptr___system__dat__, ##1836
1e080     F4 1E 02 FB | 	rdlong	local01, ptr___system__dat__
1e084     03 00 00 FF 
1e088     2C E9 85 F1 | 	sub	ptr___system__dat__, ##1836
1e08c     0F 25 CA F7 | 	test	local04, local01 wz
1e090     E0 FD 9F AD |  if_e	jmp	#LR__3121
1e094                 | LR__3129
1e094     0C 4E 05 F1 | 	add	fp, #12
1e098     A7 12 02 FB | 	rdlong	arg01, fp
1e09c     0C 4E 85 F1 | 	sub	fp, #12
1e0a0     09 27 02 F6 | 	mov	local05, arg01
1e0a4     97 06 48 FB | 	callpa	#(@LR__3131-@LR__3130)>>2,fcache_load_ptr_
1e0a8                 | LR__3130
1e0a8     13 FB C9 FA | 	rdbyte	result1, local05 wz
1e0ac     01 26 06 51 |  if_ne	add	local05, #1
1e0b0     F4 FF 9F 5D |  if_ne	jmp	#LR__3130
1e0b4                 | LR__3131
1e0b4     13 13 C2 F2 | 	subr	arg01, local05
1e0b8     01 12 06 F1 | 	add	arg01, #1
1e0bc     4C E1 BF FD | 	call	#__system___gc_alloc_managed
1e0c0     48 4E 05 F1 | 	add	fp, #72
1e0c4     A7 FA 61 FC | 	wrlong	result1, fp
1e0c8     48 4E 85 F1 | 	sub	fp, #72
1e0cc     00 FA 0D F2 | 	cmp	result1, #0 wz
1e0d0     18 00 90 AD |  if_e	jmp	#LR__3132
1e0d4     48 4E 05 F1 | 	add	fp, #72
1e0d8     A7 12 02 FB | 	rdlong	arg01, fp
1e0dc     3C 4E 85 F1 | 	sub	fp, #60
1e0e0     A7 14 02 FB | 	rdlong	arg02, fp
1e0e4     0C 4E 85 F1 | 	sub	fp, #12
1e0e8     24 A4 BF FD | 	call	#__system____builtin_strcpy
1e0ec                 | LR__3132
1e0ec     48 4E 05 F1 | 	add	fp, #72
1e0f0     A7 FA 01 FB | 	rdlong	result1, fp
1e0f4     48 4E 85 F1 | 	sub	fp, #72
1e0f8                 | LR__3133
1e0f8     A7 F0 03 F6 | 	mov	ptra, fp
1e0fc     B2 00 A0 FD | 	call	#popregs_
1e100                 | __system___basic_dir_ret
1e100     2D 00 64 FD | 	ret
1e104                 | 
1e104                 | __system__pack_0482
1e104     09 01 02 F6 | 	mov	_var01, arg01
1e108     7F 16 06 F1 | 	add	arg03, #127
1e10c     04 18 CE F7 | 	test	arg04, #4 wz
1e110     10 00 90 AD |  if_e	jmp	#LR__3140
1e114     00 00 0E F2 | 	cmp	_var01, #0 wz
1e118     16 00 C6 A9 |  if_e	decod	_var01, #22
1e11c     F7 00 26 F4 | 	bith	_var01, #247
1e120     B4 00 90 FD | 	jmp	#LR__3149
1e124                 | LR__3140
1e124     02 18 CE F7 | 	test	arg04, #2 wz
1e128     00 C0 3F 5F 
1e12c     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
1e130     00 14 06 56 |  if_ne	mov	arg02, #0
1e134     A0 00 90 5D |  if_ne	jmp	#LR__3148
1e138     08 18 CE F7 | 	test	arg04, #8 wz
1e13c     00 00 06 56 |  if_ne	mov	_var01, #0
1e140     94 00 90 5D |  if_ne	jmp	#LR__3147
1e144     FF 16 56 F2 | 	cmps	arg03, #255 wc
1e148     00 C0 3F 3F 
1e14c     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
1e150     00 14 06 36 |  if_ae	mov	arg02, #0
1e154     80 00 90 3D |  if_ae	jmp	#LR__3146
1e158     01 16 56 F2 | 	cmps	arg03, #1 wc
1e15c     6C 00 90 3D |  if_ae	jmp	#LR__3144
1e160     01 14 46 F0 | 	shr	arg02, #1
1e164     00 03 02 F6 | 	mov	_var02, _var01
1e168     01 02 06 F5 | 	and	_var02, #1
1e16c     1F 02 66 F0 | 	shl	_var02, #31
1e170     01 15 42 F5 | 	or	arg02, _var02
1e174     01 00 46 F0 | 	shr	_var01, #1
1e178     97 1E 48 FB | 	callpa	#(@LR__3142-@LR__3141)>>2,fcache_load_ptr_
1e17c                 | LR__3141
1e17c     00 16 56 F2 | 	cmps	arg03, #0 wc
1e180     34 00 90 3D |  if_ae	jmp	#LR__3143
1e184     00 00 0E F2 | 	cmp	_var01, #0 wz
1e188     2C 00 90 AD |  if_e	jmp	#LR__3143
1e18c     0A 13 02 F6 | 	mov	arg01, arg02
1e190     01 12 06 F5 | 	and	arg01, #1
1e194     01 16 06 F1 | 	add	arg03, #1
1e198     01 14 46 F0 | 	shr	arg02, #1
1e19c     00 03 02 F6 | 	mov	_var02, _var01
1e1a0     01 02 06 F5 | 	and	_var02, #1
1e1a4     1F 02 66 F0 | 	shl	_var02, #31
1e1a8     01 15 42 F5 | 	or	arg02, _var02
1e1ac     09 15 42 F5 | 	or	arg02, arg01
1e1b0     01 00 46 F0 | 	shr	_var01, #1
1e1b4     C4 FF 9F FD | 	jmp	#LR__3141
1e1b8                 | LR__3142
1e1b8                 | LR__3143
1e1b8     00 16 56 F2 | 	cmps	arg03, #0 wc
1e1bc     18 00 90 3D |  if_ae	jmp	#LR__3145
1e1c0     00 14 0E F2 | 	cmp	arg02, #0 wz
1e1c4     6F 14 62 FD | 	wrnz	arg02
1e1c8     0C 00 90 FD | 	jmp	#LR__3145
1e1cc                 | LR__3144
1e1cc     17 01 06 F4 | 	bitl	_var01, #279
1e1d0     17 16 66 F0 | 	shl	arg03, #23
1e1d4     0B 01 42 F5 | 	or	_var01, arg03
1e1d8                 | LR__3145
1e1d8                 | LR__3146
1e1d8                 | LR__3147
1e1d8                 | LR__3148
1e1d8                 | LR__3149
1e1d8     01 00 CE F7 | 	test	_var01, #1 wz
1e1dc     01 14 46 55 |  if_ne	or	arg02, #1
1e1e0     0A 17 02 F6 | 	mov	arg03, arg02
1e1e4     00 02 06 F6 | 	mov	_var02, #0
1e1e8     FF FF 3F FF 
1e1ec     FF 15 06 F1 | 	add	arg02, ##2147483647
1e1f0     0B 15 12 F2 | 	cmp	arg02, arg03 wc
1e1f4     01 02 06 C6 |  if_b	mov	_var02, #1
1e1f8     01 01 02 F1 | 	add	_var01, _var02
1e1fc     01 18 CE F7 | 	test	arg04, #1 wz
1e200     1F 00 26 54 |  if_ne	bith	_var01, #31
1e204     00 FB 01 F6 | 	mov	result1, _var01
1e208                 | __system__pack_0482_ret
1e208     2D 00 64 FD | 	ret
1e20c                 | 
1e20c                 | __system___rxtxioctl_0572
1e20c     00 15 0E F2 | 	cmp	arg02, #256 wz
1e210     0C 00 90 AD |  if_e	jmp	#LR__3150
1e214     01 15 0E F2 | 	cmp	arg02, #257 wz
1e218     1C 00 90 AD |  if_e	jmp	#LR__3151
1e21c     30 00 90 FD | 	jmp	#LR__3152
1e220                 | LR__3150
1e220     08 E8 05 F1 | 	add	ptr___system__dat__, #8
1e224     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1e228     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
1e22c     0B FB 61 FC | 	wrlong	result1, arg03
1e230     00 FA 05 F6 | 	mov	result1, #0
1e234     28 00 90 FD | 	jmp	#LR__3153
1e238                 | LR__3151
1e238     0B 13 02 FB | 	rdlong	arg01, arg03
1e23c     08 E8 05 F1 | 	add	ptr___system__dat__, #8
1e240     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1e244     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
1e248     00 FA 05 F6 | 	mov	result1, #0
1e24c     10 00 90 FD | 	jmp	#LR__3153
1e250                 | LR__3152
1e250     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1e254     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
1e258     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1e25c     01 FA 65 F6 | 	neg	result1, #1
1e260                 | LR__3153
1e260                 | __system___rxtxioctl_0572_ret
1e260     2D 00 64 FD | 	ret
1e264                 | 
1e264                 | __system____dummy_flush_0573
1e264     00 FA 05 F6 | 	mov	result1, #0
1e268                 | __system____dummy_flush_0573_ret
1e268     2D 00 64 FD | 	ret
1e26c                 | 
1e26c                 | __system___vfsread
1e26c     03 4A 05 F6 | 	mov	COUNT_, #3
1e270     A8 00 A0 FD | 	call	#pushregs_
1e274     28 F0 07 F1 | 	add	ptra, #40
1e278     04 4E 05 F1 | 	add	fp, #4
1e27c     A7 12 62 FC | 	wrlong	arg01, fp
1e280     04 4E 05 F1 | 	add	fp, #4
1e284     A7 14 62 FC | 	wrlong	arg02, fp
1e288     04 4E 05 F1 | 	add	fp, #4
1e28c     A7 16 62 FC | 	wrlong	arg03, fp
1e290     04 4E 85 F1 | 	sub	fp, #4
1e294     A7 FA 01 FB | 	rdlong	result1, fp
1e298     14 4E 05 F1 | 	add	fp, #20
1e29c     A7 FA 61 FC | 	wrlong	result1, fp
1e2a0     04 4E 05 F1 | 	add	fp, #4
1e2a4     A7 00 68 FC | 	wrlong	#0, fp
1e2a8     1C 4E 85 F1 | 	sub	fp, #28
1e2ac     A7 12 02 FB | 	rdlong	arg01, fp
1e2b0     04 4E 85 F1 | 	sub	fp, #4
1e2b4     08 12 06 F1 | 	add	arg01, #8
1e2b8     09 FB 01 FB | 	rdlong	result1, arg01
1e2bc     01 FA CD F7 | 	test	result1, #1 wz
1e2c0     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1e2c4     F4 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
1e2c8     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1e2cc     01 FA 65 A6 |  if_e	neg	result1, #1
1e2d0     74 02 90 AD |  if_e	jmp	#LR__3166
1e2d4     04 4E 05 F1 | 	add	fp, #4
1e2d8     A7 12 02 FB | 	rdlong	arg01, fp
1e2dc     04 4E 85 F1 | 	sub	fp, #4
1e2e0     14 12 06 F1 | 	add	arg01, #20
1e2e4     09 FB 09 FB | 	rdlong	result1, arg01 wz
1e2e8     B8 00 90 AD |  if_e	jmp	#LR__3161
1e2ec     04 4E 05 F1 | 	add	fp, #4
1e2f0     A7 12 02 FB | 	rdlong	arg01, fp
1e2f4     09 17 02 F6 | 	mov	arg03, arg01
1e2f8     14 16 06 F1 | 	add	arg03, #20
1e2fc     0B 1F 02 FB | 	rdlong	local01, arg03
1e300     0F 21 02 F6 | 	mov	local02, local01
1e304     13 1E 46 F7 | 	zerox	local01, #19
1e308     14 20 46 F0 | 	shr	local02, #20
1e30c     02 20 66 F0 | 	shl	local02, #2
1e310     ED 20 02 F1 | 	add	local02, __methods__
1e314     10 21 02 FB | 	rdlong	local02, local02
1e318     04 4E 05 F1 | 	add	fp, #4
1e31c     A7 14 02 FB | 	rdlong	arg02, fp
1e320     04 4E 05 F1 | 	add	fp, #4
1e324     A7 16 02 FB | 	rdlong	arg03, fp
1e328     0C 4E 85 F1 | 	sub	fp, #12
1e32c     F2 22 02 F6 | 	mov	local03, objptr
1e330     0F E5 01 F6 | 	mov	objptr, local01
1e334     2D 20 62 FD | 	call	local02
1e338     11 E5 01 F6 | 	mov	objptr, local03
1e33c     10 4E 05 F1 | 	add	fp, #16
1e340     A7 FA 61 FC | 	wrlong	result1, fp
1e344     10 4E 85 F1 | 	sub	fp, #16
1e348     00 FA 55 F2 | 	cmps	result1, #0 wc
1e34c     44 00 90 3D |  if_ae	jmp	#LR__3160
1e350     04 4E 05 F1 | 	add	fp, #4
1e354     A7 22 02 FB | 	rdlong	local03, fp
1e358     11 1F 02 F6 | 	mov	local01, local03
1e35c     08 22 06 F1 | 	add	local03, #8
1e360     11 21 02 FB | 	rdlong	local02, local03
1e364     20 20 46 F5 | 	or	local02, #32
1e368     08 1E 06 F1 | 	add	local01, #8
1e36c     0F 21 62 FC | 	wrlong	local02, local01
1e370     0C 4E 05 F1 | 	add	fp, #12
1e374     A7 12 0A FB | 	rdlong	arg01, fp wz
1e378     10 4E 85 F1 | 	sub	fp, #16
1e37c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1e380     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1e384     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1e388     01 FA 65 56 |  if_ne	neg	result1, #1
1e38c     00 FA 05 A6 |  if_e	mov	result1, #0
1e390     B4 01 90 FD | 	jmp	#LR__3166
1e394                 | LR__3160
1e394     10 4E 05 F1 | 	add	fp, #16
1e398     A7 FA 01 FB | 	rdlong	result1, fp
1e39c     10 4E 85 F1 | 	sub	fp, #16
1e3a0     A4 01 90 FD | 	jmp	#LR__3166
1e3a4                 | LR__3161
1e3a4     04 4E 05 F1 | 	add	fp, #4
1e3a8     A7 12 02 FB | 	rdlong	arg01, fp
1e3ac     20 12 06 F1 | 	add	arg01, #32
1e3b0     09 13 0A FB | 	rdlong	arg01, arg01 wz
1e3b4     14 4E 05 F1 | 	add	fp, #20
1e3b8     A7 12 62 FC | 	wrlong	arg01, fp
1e3bc     18 4E 85 F1 | 	sub	fp, #24
1e3c0     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1e3c4     F4 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
1e3c8     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1e3cc     01 FA 65 A6 |  if_e	neg	result1, #1
1e3d0     74 01 90 AD |  if_e	jmp	#LR__3166
1e3d4     04 4E 05 F1 | 	add	fp, #4
1e3d8     A7 22 02 FB | 	rdlong	local03, fp
1e3dc     04 4E 85 F1 | 	sub	fp, #4
1e3e0     28 22 06 F1 | 	add	local03, #40
1e3e4     11 21 0A FB | 	rdlong	local02, local03 wz
1e3e8     7C 00 90 AD |  if_e	jmp	#LR__3163
1e3ec     04 4E 05 F1 | 	add	fp, #4
1e3f0     A7 12 02 FB | 	rdlong	arg01, fp
1e3f4     09 23 02 F6 | 	mov	local03, arg01
1e3f8     28 22 06 F1 | 	add	local03, #40
1e3fc     11 1F 02 FB | 	rdlong	local01, local03
1e400     0F 21 02 F6 | 	mov	local02, local01
1e404     13 1E 46 F7 | 	zerox	local01, #19
1e408     14 20 46 F0 | 	shr	local02, #20
1e40c     02 20 66 F0 | 	shl	local02, #2
1e410     ED 20 02 F1 | 	add	local02, __methods__
1e414     10 21 02 FB | 	rdlong	local02, local02
1e418     20 4E 05 F1 | 	add	fp, #32
1e41c     A7 16 02 F6 | 	mov	arg03, fp
1e420     24 4E 85 F1 | 	sub	fp, #36
1e424     00 15 06 F6 | 	mov	arg02, #256
1e428     F2 22 02 F6 | 	mov	local03, objptr
1e42c     0F E5 01 F6 | 	mov	objptr, local01
1e430     2D 20 62 FD | 	call	local02
1e434     11 E5 01 F6 | 	mov	objptr, local03
1e438     10 4E 05 F1 | 	add	fp, #16
1e43c     A7 FA 61 FC | 	wrlong	result1, fp
1e440     00 FA 4D F2 | 	cmps	result1, #0 wz
1e444     10 4E 85 F1 | 	sub	fp, #16
1e448     1C 00 90 5D |  if_ne	jmp	#LR__3162
1e44c     24 4E 05 F1 | 	add	fp, #36
1e450     A7 20 02 FB | 	rdlong	local02, fp
1e454     24 4E 85 F1 | 	sub	fp, #36
1e458     02 20 CE F7 | 	test	local02, #2 wz
1e45c     20 4E 05 51 |  if_ne	add	fp, #32
1e460     A7 02 68 5C |  if_ne	wrlong	#1, fp
1e464     20 4E 85 51 |  if_ne	sub	fp, #32
1e468                 | LR__3162
1e468                 | LR__3163
1e468     10 4E 05 F1 | 	add	fp, #16
1e46c     A7 00 68 FC | 	wrlong	#0, fp
1e470     10 4E 85 F1 | 	sub	fp, #16
1e474                 | LR__3164
1e474     0C 4E 05 F1 | 	add	fp, #12
1e478     A7 22 02 FB | 	rdlong	local03, fp
1e47c     0C 4E 85 F1 | 	sub	fp, #12
1e480     01 22 16 F2 | 	cmp	local03, #1 wc
1e484     B4 00 90 CD |  if_b	jmp	#LR__3165
1e488     18 4E 05 F1 | 	add	fp, #24
1e48c     A7 20 02 FB | 	rdlong	local02, fp
1e490     10 23 02 F6 | 	mov	local03, local02
1e494     13 22 46 F7 | 	zerox	local03, #19
1e498     14 20 46 F0 | 	shr	local02, #20
1e49c     02 20 66 F0 | 	shl	local02, #2
1e4a0     ED 20 02 F1 | 	add	local02, __methods__
1e4a4     10 21 02 FB | 	rdlong	local02, local02
1e4a8     14 4E 85 F1 | 	sub	fp, #20
1e4ac     A7 12 02 FB | 	rdlong	arg01, fp
1e4b0     04 4E 85 F1 | 	sub	fp, #4
1e4b4     F2 1E 02 F6 | 	mov	local01, objptr
1e4b8     11 E5 01 F6 | 	mov	objptr, local03
1e4bc     2D 20 62 FD | 	call	local02
1e4c0     0F E5 01 F6 | 	mov	objptr, local01
1e4c4     14 4E 05 F1 | 	add	fp, #20
1e4c8     A7 FA 61 FC | 	wrlong	result1, fp
1e4cc     14 4E 85 F1 | 	sub	fp, #20
1e4d0     00 FA 55 F2 | 	cmps	result1, #0 wc
1e4d4     64 00 90 CD |  if_b	jmp	#LR__3165
1e4d8     1C 4E 05 F1 | 	add	fp, #28
1e4dc     A7 22 02 FB | 	rdlong	local03, fp
1e4e0     11 21 02 F6 | 	mov	local02, local03
1e4e4     01 20 06 F1 | 	add	local02, #1
1e4e8     A7 20 62 FC | 	wrlong	local02, fp
1e4ec     08 4E 85 F1 | 	sub	fp, #8
1e4f0     A7 20 02 FB | 	rdlong	local02, fp
1e4f4     11 21 42 FC | 	wrbyte	local02, local03
1e4f8     04 4E 85 F1 | 	sub	fp, #4
1e4fc     A7 22 02 FB | 	rdlong	local03, fp
1e500     01 22 06 F1 | 	add	local03, #1
1e504     A7 22 62 FC | 	wrlong	local03, fp
1e508     04 4E 85 F1 | 	sub	fp, #4
1e50c     A7 22 02 FB | 	rdlong	local03, fp
1e510     01 22 86 F1 | 	sub	local03, #1
1e514     A7 22 62 FC | 	wrlong	local03, fp
1e518     14 4E 05 F1 | 	add	fp, #20
1e51c     A7 22 0A FB | 	rdlong	local03, fp wz
1e520     20 4E 85 F1 | 	sub	fp, #32
1e524     4C FF 9F AD |  if_e	jmp	#LR__3164
1e528     14 4E 05 F1 | 	add	fp, #20
1e52c     A7 20 02 FB | 	rdlong	local02, fp
1e530     14 4E 85 F1 | 	sub	fp, #20
1e534     0A 20 0E F2 | 	cmp	local02, #10 wz
1e538     38 FF 9F 5D |  if_ne	jmp	#LR__3164
1e53c                 | LR__3165
1e53c     10 4E 05 F1 | 	add	fp, #16
1e540     A7 FA 01 FB | 	rdlong	result1, fp
1e544     10 4E 85 F1 | 	sub	fp, #16
1e548                 | LR__3166
1e548     A7 F0 03 F6 | 	mov	ptra, fp
1e54c     B2 00 A0 FD | 	call	#popregs_
1e550                 | __system___vfsread_ret
1e550     2D 00 64 FD | 	ret
1e554                 | 
1e554                 | __system____default_filbuf
1e554     04 4A 05 F6 | 	mov	COUNT_, #4
1e558     A8 00 A0 FD | 	call	#pushregs_
1e55c     09 1F 02 F6 | 	mov	local01, arg01
1e560     0F 21 02 FB | 	rdlong	local02, local01
1e564     0C 20 06 F1 | 	add	local02, #12
1e568     10 FB 09 FB | 	rdlong	result1, local02 wz
1e56c     0C 20 86 F1 | 	sub	local02, #12
1e570     20 00 90 5D |  if_ne	jmp	#LR__3170
1e574     14 20 06 F1 | 	add	local02, #20
1e578     10 FB 01 F6 | 	mov	result1, local02
1e57c     04 20 86 F1 | 	sub	local02, #4
1e580     10 FB 61 FC | 	wrlong	result1, local02
1e584     04 20 86 F1 | 	sub	local02, #4
1e588     02 00 80 FF 
1e58c     10 01 68 FC | 	wrlong	##1024, local02
1e590     0C 20 86 F1 | 	sub	local02, #12
1e594                 | LR__3170
1e594     14 1E 06 F1 | 	add	local01, #20
1e598     0F 23 02 FB | 	rdlong	local03, local01
1e59c     11 25 02 F6 | 	mov	local04, local03
1e5a0     14 1E 86 F1 | 	sub	local01, #20
1e5a4     13 24 46 F7 | 	zerox	local04, #19
1e5a8     14 22 46 F0 | 	shr	local03, #20
1e5ac     02 22 66 F0 | 	shl	local03, #2
1e5b0     ED 22 02 F1 | 	add	local03, __methods__
1e5b4     11 23 02 FB | 	rdlong	local03, local03
1e5b8     10 20 06 F1 | 	add	local02, #16
1e5bc     10 15 02 FB | 	rdlong	arg02, local02
1e5c0     04 20 86 F1 | 	sub	local02, #4
1e5c4     10 17 02 FB | 	rdlong	arg03, local02
1e5c8     0C 20 86 F1 | 	sub	local02, #12
1e5cc     0F 13 02 F6 | 	mov	arg01, local01
1e5d0     F2 1E 02 F6 | 	mov	local01, objptr
1e5d4     12 E5 01 F6 | 	mov	objptr, local04
1e5d8     2D 22 62 FD | 	call	local03
1e5dc     0F E5 01 F6 | 	mov	objptr, local01
1e5e0     FD 24 02 F6 | 	mov	local04, result1
1e5e4     00 24 56 F2 | 	cmps	local04, #0 wc
1e5e8     01 FA 65 C6 |  if_b	neg	result1, #1
1e5ec     28 00 90 CD |  if_b	jmp	#LR__3171
1e5f0     10 25 62 FC | 	wrlong	local04, local02
1e5f4     10 20 06 F1 | 	add	local02, #16
1e5f8     10 23 02 FB | 	rdlong	local03, local02
1e5fc     0C 20 86 F1 | 	sub	local02, #12
1e600     10 23 62 FC | 	wrlong	local03, local02
1e604     04 20 06 F1 | 	add	local02, #4
1e608     10 23 02 FB | 	rdlong	local03, local02
1e60c     01 22 46 F5 | 	or	local03, #1
1e610     10 23 62 FC | 	wrlong	local03, local02
1e614     12 FB 01 F6 | 	mov	result1, local04
1e618                 | LR__3171
1e618     A7 F0 03 F6 | 	mov	ptra, fp
1e61c     B2 00 A0 FD | 	call	#popregs_
1e620                 | __system____default_filbuf_ret
1e620     2D 00 64 FD | 	ret
1e624                 | 
1e624                 | __system__getlower_0958
1e624     41 12 56 F2 | 	cmps	arg01, #65 wc
1e628     10 00 90 CD |  if_b	jmp	#LR__3180
1e62c     5B 12 56 F2 | 	cmps	arg01, #91 wc
1e630     09 FB 01 C6 |  if_b	mov	result1, arg01
1e634     20 FA 05 C1 |  if_b	add	result1, #32
1e638     04 00 90 CD |  if_b	jmp	#__system__getlower_0958_ret
1e63c                 | LR__3180
1e63c     09 FB 01 F6 | 	mov	result1, arg01
1e640                 | __system__getlower_0958_ret
1e640     2D 00 64 FD | 	ret
1e644                 | 
1e644                 | __system___pat_match
1e644     08 4A 05 F6 | 	mov	COUNT_, #8
1e648     A8 00 A0 FD | 	call	#pushregs_
1e64c     09 1F 02 F6 | 	mov	local01, arg01
1e650                 | LR__3190
1e650     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
1e654     0F 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
1e658     0A 21 C2 5A |  if_ne	rdbyte	local02, arg02
1e65c     2A 20 0E 52 |  if_ne	cmp	local02, #42 wz
1e660     2C 00 90 AD |  if_e	jmp	#LR__3191
1e664     0A 13 C2 FA | 	rdbyte	arg01, arg02
1e668     B8 FF BF FD | 	call	#__system__getlower_0958
1e66c     FD 22 02 F6 | 	mov	local03, result1
1e670     0F 13 C2 FA | 	rdbyte	arg01, local01
1e674     AC FF BF FD | 	call	#__system__getlower_0958
1e678     11 FB 09 F2 | 	cmp	result1, local03 wz
1e67c     00 FA 05 56 |  if_ne	mov	result1, #0
1e680     FC 00 90 5D |  if_ne	jmp	#LR__3199
1e684     01 1E 06 F1 | 	add	local01, #1
1e688     01 14 06 F1 | 	add	arg02, #1
1e68c     C0 FF 9F FD | 	jmp	#LR__3190
1e690                 | LR__3191
1e690     0A 23 C2 FA | 	rdbyte	local03, arg02
1e694     2A 22 0E F2 | 	cmp	local03, #42 wz
1e698     D4 00 90 5D |  if_ne	jmp	#LR__3198
1e69c     01 14 06 F1 | 	add	arg02, #1
1e6a0     0A 21 C2 FA | 	rdbyte	local02, arg02
1e6a4     01 14 86 F1 | 	sub	arg02, #1
1e6a8     2E 20 0E F2 | 	cmp	local02, #46 wz
1e6ac     28 00 90 5D |  if_ne	jmp	#LR__3192
1e6b0     02 14 06 F1 | 	add	arg02, #2
1e6b4     0A 21 C2 FA | 	rdbyte	local02, arg02
1e6b8     02 14 86 F1 | 	sub	arg02, #2
1e6bc     2A 20 0E F2 | 	cmp	local02, #42 wz
1e6c0     03 14 06 A1 |  if_e	add	arg02, #3
1e6c4     0A 25 C2 AA |  if_e	rdbyte	local04, arg02
1e6c8     03 14 86 A1 |  if_e	sub	arg02, #3
1e6cc     12 27 0A A6 |  if_e	mov	local05, local04 wz
1e6d0     01 FA 05 A6 |  if_e	mov	result1, #1
1e6d4     A8 00 90 AD |  if_e	jmp	#LR__3199
1e6d8                 | LR__3192
1e6d8     01 14 06 F1 | 	add	arg02, #1
1e6dc     00 28 06 F6 | 	mov	local06, #0
1e6e0     97 1E 48 FB | 	callpa	#(@LR__3195-@LR__3193)>>2,fcache_load_ptr_
1e6e4                 | LR__3193
1e6e4     14 2B 02 F6 | 	mov	local07, local06
1e6e8     0A 2B 02 F1 | 	add	local07, arg02
1e6ec     15 2B CA FA | 	rdbyte	local07, local07 wz
1e6f0     14 27 02 56 |  if_ne	mov	local05, local06
1e6f4     01 26 06 51 |  if_ne	add	local05, #1
1e6f8     13 29 02 56 |  if_ne	mov	local06, local05
1e6fc     E4 FF 9F 5D |  if_ne	jmp	#LR__3193
1e700     00 2C 06 F6 | 	mov	local08, #0
1e704                 | LR__3194
1e704     16 2B 02 F6 | 	mov	local07, local08
1e708     0F 2B 02 F1 | 	add	local07, local01
1e70c     15 2B CA FA | 	rdbyte	local07, local07 wz
1e710     16 27 02 56 |  if_ne	mov	local05, local08
1e714     01 26 06 51 |  if_ne	add	local05, #1
1e718     13 2D 02 56 |  if_ne	mov	local08, local05
1e71c     E4 FF 9F 5D |  if_ne	jmp	#LR__3194
1e720                 | LR__3195
1e720     14 2D 52 F2 | 	cmps	local08, local06 wc
1e724     00 FA 05 C6 |  if_b	mov	result1, #0
1e728     54 00 90 CD |  if_b	jmp	#LR__3199
1e72c     16 21 02 F6 | 	mov	local02, local08
1e730     14 21 82 F1 | 	sub	local02, local06
1e734     10 1F 02 F1 | 	add	local01, local02
1e738                 | LR__3196
1e738     01 28 56 F2 | 	cmps	local06, #1 wc
1e73c     30 00 90 CD |  if_b	jmp	#LR__3197
1e740     0F 13 C2 FA | 	rdbyte	arg01, local01
1e744     DC FE BF FD | 	call	#__system__getlower_0958
1e748     FD 2C 02 F6 | 	mov	local08, result1
1e74c     0A 13 C2 FA | 	rdbyte	arg01, arg02
1e750     D0 FE BF FD | 	call	#__system__getlower_0958
1e754     FD 2C 0A F2 | 	cmp	local08, result1 wz
1e758     00 FA 05 56 |  if_ne	mov	result1, #0
1e75c     20 00 90 5D |  if_ne	jmp	#LR__3199
1e760     01 1E 06 F1 | 	add	local01, #1
1e764     01 14 06 F1 | 	add	arg02, #1
1e768     01 28 86 F1 | 	sub	local06, #1
1e76c     C8 FF 9F FD | 	jmp	#LR__3196
1e770                 | LR__3197
1e770                 | LR__3198
1e770     0A 2D CA FA | 	rdbyte	local08, arg02 wz
1e774     0F 2B CA AA |  if_e	rdbyte	local07, local01 wz
1e778     01 FA 05 A6 |  if_e	mov	result1, #1
1e77c     00 FA 05 56 |  if_ne	mov	result1, #0
1e780                 | LR__3199
1e780     A7 F0 03 F6 | 	mov	ptra, fp
1e784     B2 00 A0 FD | 	call	#popregs_
1e788                 | __system___pat_match_ret
1e788     2D 00 64 FD | 	ret
1e78c                 | 
1e78c                 | _fatfs_cc_ff_uni2oem
1e78c     00 00 06 F6 | 	mov	_var01, #0
1e790     80 12 16 F2 | 	cmp	arg01, #128 wc
1e794     09 01 02 C6 |  if_b	mov	_var01, arg01
1e798     58 00 90 CD |  if_b	jmp	#LR__3204
1e79c     80 00 00 FF 
1e7a0     00 12 16 F2 | 	cmp	arg01, ##65536 wc
1e7a4     4C 00 90 3D |  if_ae	jmp	#LR__3203
1e7a8     0A FB 31 F9 | 	getword	result1, arg02, #0
1e7ac     01 00 00 FF 
1e7b0     52 FB 0D F2 | 	cmp	result1, ##850 wz
1e7b4     3C 00 90 5D |  if_ne	jmp	#LR__3203
1e7b8                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
1e7b8     00 00 06 F6 | 	mov	_var01, #0
1e7bc     97 14 48 FB | 	callpa	#(@LR__3201-@LR__3200)>>2,fcache_load_ptr_
1e7c0                 | LR__3200
1e7c0     00 FB 31 F9 | 	getword	result1, _var01, #0
1e7c4     80 FA 15 F2 | 	cmp	result1, #128 wc
1e7c8     1C 00 90 3D |  if_ae	jmp	#LR__3202
1e7cc     00 FB 31 F9 | 	getword	result1, _var01, #0
1e7d0     01 FA 65 F0 | 	shl	result1, #1
1e7d4     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
1e7d8     FD FA E1 FA | 	rdword	result1, result1
1e7dc     FD 12 0A F2 | 	cmp	arg01, result1 wz
1e7e0     01 00 06 51 |  if_ne	add	_var01, #1
1e7e4     D8 FF 9F 5D |  if_ne	jmp	#LR__3200
1e7e8                 | LR__3201
1e7e8                 | LR__3202
1e7e8     00 01 32 F9 | 	getword	_var01, _var01, #0
1e7ec     80 00 06 F1 | 	add	_var01, #128
1e7f0     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
1e7f4                 | LR__3203
1e7f4                 | LR__3204
1e7f4                 | ' 			c = (c + 0x80) & 0xFF;
1e7f4                 | ' 		}
1e7f4                 | ' 	}
1e7f4                 | ' 
1e7f4                 | ' 	return c;
1e7f4     00 FB 01 F6 | 	mov	result1, _var01
1e7f8                 | _fatfs_cc_ff_uni2oem_ret
1e7f8     2D 00 64 FD | 	ret
1e7fc                 | 
1e7fc                 | _fatfs_cc_ff_oem2uni
1e7fc     00 00 06 F6 | 	mov	_var01, #0
1e800     09 FB 31 F9 | 	getword	result1, arg01, #0
1e804     80 FA 15 F2 | 	cmp	result1, #128 wc
1e808     09 01 02 C6 |  if_b	mov	_var01, arg01
1e80c     2C 00 90 CD |  if_b	jmp	#LR__3211
1e810     0A 15 32 F9 | 	getword	arg02, arg02, #0
1e814     01 00 00 FF 
1e818     52 15 0E F2 | 	cmp	arg02, ##850 wz
1e81c     1C 00 90 5D |  if_ne	jmp	#LR__3210
1e820     09 FB 31 F9 | 	getword	result1, arg01, #0
1e824     00 FB 15 F2 | 	cmp	result1, #256 wc
1e828     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
1e82c     80 12 86 C1 |  if_b	sub	arg01, #128
1e830     01 12 66 C0 |  if_b	shl	arg01, #1
1e834     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
1e838     09 01 E2 CA |  if_b	rdword	_var01, arg01
1e83c                 | LR__3210
1e83c                 | LR__3211
1e83c                 | ' 		}
1e83c                 | ' 	}
1e83c                 | ' 
1e83c                 | ' 	return c;
1e83c     00 FB 01 F6 | 	mov	result1, _var01
1e840                 | _fatfs_cc_ff_oem2uni_ret
1e840     2D 00 64 FD | 	ret
1e844                 | 
1e844                 | _fatfs_cc_ff_wtoupper
1e844     09 01 02 F6 | 	mov	_var01, arg01
1e848     80 00 00 FF 
1e84c     00 00 16 F2 | 	cmp	_var01, ##65536 wc
1e850     60 01 90 3D |  if_ae	jmp	#LR__3233
1e854     00 03 02 F6 | 	mov	_var02, _var01
1e858     01 01 32 F9 | 	getword	_var01, _var02, #0
1e85c     08 00 00 FF 
1e860     00 00 16 F2 | 	cmp	_var01, ##4096 wc
1e864     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
1e868     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
1e86c     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
1e870     01 00 00 3F 
1e874     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
1e878     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
1e87c     01 00 00 3F 
1e880     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
1e884     02 07 02 F6 | 	mov	_var04, _var03
1e888                 | ' 		uc = (WORD)uni;
1e888                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
1e888                 | ' 		for (;;) {
1e888                 | LR__3220
1e888     03 09 E2 FA | 	rdword	_var05, _var04
1e88c     04 05 02 F6 | 	mov	_var03, _var05
1e890     0F 04 4E F7 | 	zerox	_var03, #15 wz
1e894     02 06 06 F1 | 	add	_var04, #2
1e898     14 01 90 AD |  if_e	jmp	#LR__3232
1e89c     01 05 32 F9 | 	getword	_var03, _var02, #0
1e8a0     04 01 32 F9 | 	getword	_var01, _var05, #0
1e8a4     00 05 12 F2 | 	cmp	_var03, _var01 wc
1e8a8     04 01 90 CD |  if_b	jmp	#LR__3232
1e8ac     03 0B E2 FA | 	rdword	_var06, _var04
1e8b0     05 0D 32 F9 | 	getword	_var07, _var06, #0
1e8b4     08 0C 46 F0 | 	shr	_var07, #8
1e8b8     05 0B 32 F9 | 	getword	_var06, _var06, #0
1e8bc     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
1e8c0     01 05 32 F9 | 	getword	_var03, _var02, #0
1e8c4     04 0F 32 F9 | 	getword	_var08, _var05, #0
1e8c8     05 01 32 F9 | 	getword	_var01, _var06, #0
1e8cc     00 0F 02 F1 | 	add	_var08, _var01
1e8d0     07 05 52 F2 | 	cmps	_var03, _var08 wc
1e8d4     02 06 06 F1 | 	add	_var04, #2
1e8d8     C4 00 90 3D |  if_ae	jmp	#LR__3231
1e8dc                 | ' 				switch (cmd) {
1e8dc     06 11 32 F9 | 	getword	_var09, _var07, #0
1e8e0     09 10 26 F3 | 	fle	_var09, #9
1e8e4     30 10 62 FD | 	jmprel	_var09
1e8e8                 | LR__3221
1e8e8     24 00 90 FD | 	jmp	#LR__3222
1e8ec     3C 00 90 FD | 	jmp	#LR__3223
1e8f0     54 00 90 FD | 	jmp	#LR__3224
1e8f4     5C 00 90 FD | 	jmp	#LR__3225
1e8f8     64 00 90 FD | 	jmp	#LR__3226
1e8fc     6C 00 90 FD | 	jmp	#LR__3227
1e900     74 00 90 FD | 	jmp	#LR__3228
1e904     7C 00 90 FD | 	jmp	#LR__3229
1e908     84 00 90 FD | 	jmp	#LR__3230
1e90c     A0 00 90 FD | 	jmp	#LR__3232
1e910                 | LR__3222
1e910     01 03 32 F9 | 	getword	_var02, _var02, #0
1e914     04 09 32 F9 | 	getword	_var05, _var05, #0
1e918     04 03 82 F1 | 	sub	_var02, _var05
1e91c     01 02 66 F0 | 	shl	_var02, #1
1e920     03 03 02 F1 | 	add	_var02, _var04
1e924     01 03 E2 FA | 	rdword	_var02, _var02
1e928     84 00 90 FD | 	jmp	#LR__3232
1e92c                 | LR__3223
1e92c     01 05 32 F9 | 	getword	_var03, _var02, #0
1e930     01 03 32 F9 | 	getword	_var02, _var02, #0
1e934     04 09 32 F9 | 	getword	_var05, _var05, #0
1e938     04 03 82 F1 | 	sub	_var02, _var05
1e93c     01 02 06 F5 | 	and	_var02, #1
1e940     02 03 C2 F2 | 	subr	_var02, _var03
1e944     68 00 90 FD | 	jmp	#LR__3232
1e948                 | LR__3224
1e948     01 03 32 F9 | 	getword	_var02, _var02, #0
1e94c     10 02 86 F1 | 	sub	_var02, #16
1e950     5C 00 90 FD | 	jmp	#LR__3232
1e954                 | LR__3225
1e954     01 03 32 F9 | 	getword	_var02, _var02, #0
1e958     20 02 86 F1 | 	sub	_var02, #32
1e95c     50 00 90 FD | 	jmp	#LR__3232
1e960                 | LR__3226
1e960     01 03 32 F9 | 	getword	_var02, _var02, #0
1e964     30 02 86 F1 | 	sub	_var02, #48
1e968     44 00 90 FD | 	jmp	#LR__3232
1e96c                 | LR__3227
1e96c     01 03 32 F9 | 	getword	_var02, _var02, #0
1e970     1A 02 86 F1 | 	sub	_var02, #26
1e974     38 00 90 FD | 	jmp	#LR__3232
1e978                 | LR__3228
1e978     01 03 32 F9 | 	getword	_var02, _var02, #0
1e97c     08 02 06 F1 | 	add	_var02, #8
1e980     2C 00 90 FD | 	jmp	#LR__3232
1e984                 | LR__3229
1e984     01 03 32 F9 | 	getword	_var02, _var02, #0
1e988     50 02 86 F1 | 	sub	_var02, #80
1e98c     20 00 90 FD | 	jmp	#LR__3232
1e990                 | LR__3230
1e990     01 03 32 F9 | 	getword	_var02, _var02, #0
1e994     0E 00 00 FF 
1e998     60 02 86 F1 | 	sub	_var02, ##7264
1e99c                 | ' 				}
1e99c                 | ' 				break;
1e99c     10 00 90 FD | 	jmp	#LR__3232
1e9a0                 | LR__3231
1e9a0     0F 0C 4E F7 | 	zerox	_var07, #15 wz
1e9a4     02 0A 06 AA |  if_e	mul	_var06, #2
1e9a8     05 07 02 A1 |  if_e	add	_var04, _var06
1e9ac     D8 FE 9F FD | 	jmp	#LR__3220
1e9b0                 | LR__3232
1e9b0     01 01 32 F9 | 	getword	_var01, _var02, #0
1e9b4                 | LR__3233
1e9b4                 | ' 		}
1e9b4                 | ' 		uni = uc;
1e9b4                 | ' 	}
1e9b4                 | ' 
1e9b4                 | ' 	return uni;
1e9b4     00 FB 01 F6 | 	mov	result1, _var01
1e9b8                 | _fatfs_cc_ff_wtoupper_ret
1e9b8     2D 00 64 FD | 	ret
1e9bc                 | 
1e9bc                 | _fatfs_cc_strncpy
1e9bc     09 01 02 F6 | 	mov	_var01, arg01
1e9c0     97 12 48 FB | 	callpa	#(@LR__3241-@LR__3240)>>2,fcache_load_ptr_
1e9c4                 | ' 
1e9c4                 | ' 	dscan = dst;
1e9c4                 | ' 	sscan = src;
1e9c4                 | ' 	count = n;
1e9c4                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
1e9c4                 | LR__3240
1e9c4     01 16 86 F1 | 	sub	arg03, #1
1e9c8     00 16 56 F2 | 	cmps	arg03, #0 wc
1e9cc     18 00 90 CD |  if_b	jmp	#LR__3242
1e9d0     0A FB C1 FA | 	rdbyte	result1, arg02
1e9d4     00 FB 41 FC | 	wrbyte	result1, _var01
1e9d8     01 14 06 F1 | 	add	arg02, #1
1e9dc     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1e9e0                 | ' 		continue;
1e9e0     01 00 06 F1 | 	add	_var01, #1
1e9e4     DC FF 9F 5D |  if_ne	jmp	#LR__3240
1e9e8                 | LR__3241
1e9e8                 | LR__3242
1e9e8     97 0C 48 FB | 	callpa	#(@LR__3244-@LR__3243)>>2,fcache_load_ptr_
1e9ec                 | ' 	while (--count >= 0)
1e9ec                 | LR__3243
1e9ec     01 16 86 F1 | 	sub	arg03, #1
1e9f0     00 16 56 F2 | 	cmps	arg03, #0 wc
1e9f4     00 03 02 36 |  if_ae	mov	_var02, _var01
1e9f8     01 00 06 31 |  if_ae	add	_var01, #1
1e9fc     01 01 48 3C |  if_ae	wrbyte	#0, _var02
1ea00     E8 FF 9F 3D |  if_ae	jmp	#LR__3243
1ea04                 | LR__3244
1ea04                 | ' 		*dscan++ = '\0';
1ea04                 | ' 	return(dst);
1ea04     09 FB 01 F6 | 	mov	result1, arg01
1ea08                 | _fatfs_cc_strncpy_ret
1ea08     2D 00 64 FD | 	ret
1ea0c                 | 
1ea0c                 | _fatfs_cc_memcmp
1ea0c                 | ' 	for (n = size; n > 0; n--)
1ea0c     00 16 0E F2 | 	cmp	arg03, #0 wz
1ea10     28 00 90 AD |  if_e	jmp	#LR__3251
1ea14                 | LR__3250
1ea14     09 01 C2 FA | 	rdbyte	_var01, arg01
1ea18     0A 03 C2 FA | 	rdbyte	_var02, arg02
1ea1c     01 01 0A F2 | 	cmp	_var01, _var02 wz
1ea20     01 12 06 A1 |  if_e	add	arg01, #1
1ea24     01 14 06 A1 |  if_e	add	arg02, #1
1ea28                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
1ea28     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
1ea2c     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
1ea30     01 FB 81 51 |  if_ne	sub	result1, _var02
1ea34     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
1ea38     F6 17 6E FB | 	djnz	arg03, #LR__3250
1ea3c                 | LR__3251
1ea3c                 | ' 
1ea3c                 | ' 	return(0);
1ea3c     00 FA 05 F6 | 	mov	result1, #0
1ea40                 | _fatfs_cc_memcmp_ret
1ea40     2D 00 64 FD | 	ret
1ea44                 | 
1ea44                 | _fatfs_cc_strncmp
1ea44     09 01 0A F6 | 	mov	_var01, arg01 wz
1ea48     14 00 90 5D |  if_ne	jmp	#LR__3260
1ea4c                 | ' 		return scan2 ? -1 : 0;
1ea4c     00 14 0E F2 | 	cmp	arg02, #0 wz
1ea50     01 02 66 56 |  if_ne	neg	_var02, #1
1ea54     00 02 06 A6 |  if_e	mov	_var02, #0
1ea58     01 FB 01 F6 | 	mov	result1, _var02
1ea5c     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
1ea60                 | LR__3260
1ea60     00 14 0E F2 | 	cmp	arg02, #0 wz
1ea64     01 FA 05 A6 |  if_e	mov	result1, #1
1ea68     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1ea6c     0B 05 02 F6 | 	mov	_var03, arg03
1ea70     97 16 48 FB | 	callpa	#(@LR__3262-@LR__3261)>>2,fcache_load_ptr_
1ea74                 | ' 	count = n;
1ea74                 | ' 	do {
1ea74                 | LR__3261
1ea74     00 07 C2 FA | 	rdbyte	_var04, _var01
1ea78     0A 09 02 F6 | 	mov	_var05, arg02
1ea7c     04 0B C2 FA | 	rdbyte	_var06, _var05
1ea80     01 04 86 F1 | 	sub	_var03, #1
1ea84     00 04 56 F2 | 	cmps	_var03, #0 wc
1ea88     01 00 06 F1 | 	add	_var01, #1
1ea8c     01 14 06 F1 | 	add	arg02, #1
1ea90     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
1ea94     08 00 90 2D |  if_nc_and_z	jmp	#LR__3263
1ea98     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
1ea9c     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3261
1eaa0                 | LR__3262
1eaa0                 | LR__3263
1eaa0     00 04 56 F2 | 	cmps	_var03, #0 wc
1eaa4                 | ' 		return(0);
1eaa4     00 FA 05 C6 |  if_b	mov	result1, #0
1eaa8     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
1eaac     05 07 0A F2 | 	cmp	_var04, _var06 wz
1eab0                 | ' 		return(0);
1eab0     00 FA 05 A6 |  if_e	mov	result1, #0
1eab4     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1eab8     00 06 0E F2 | 	cmp	_var04, #0 wz
1eabc                 | ' 		return(-1);
1eabc     01 FA 65 A6 |  if_e	neg	result1, #1
1eac0     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1eac4     00 0A 0E F2 | 	cmp	_var06, #0 wz
1eac8                 | ' 		return(1);
1eac8     01 FA 05 A6 |  if_e	mov	result1, #1
1eacc                 | ' 		return(c1 - c2);
1eacc     03 FB 01 56 |  if_ne	mov	result1, _var04
1ead0     05 FB 81 51 |  if_ne	sub	result1, _var06
1ead4                 | _fatfs_cc_strncmp_ret
1ead4     2D 00 64 FD | 	ret
1ead8                 | 
1ead8                 | _fatfs_cc_strchr
1ead8                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/libc/string/strchr.c"
1ead8                 | ' 	while ((c = *s++) != (char) charwanted)
1ead8                 | LR__3270
1ead8     09 01 02 F6 | 	mov	_var01, arg01
1eadc     00 03 C2 FA | 	rdbyte	_var02, _var01
1eae0     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
1eae4     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
1eae8     03 05 0A F2 | 	cmp	_var03, _var04 wz
1eaec     01 12 06 F1 | 	add	arg01, #1
1eaf0     14 00 90 AD |  if_e	jmp	#LR__3271
1eaf4     01 05 02 F6 | 	mov	_var03, _var02
1eaf8     07 04 4E F7 | 	zerox	_var03, #7 wz
1eafc     00 FA 05 A6 |  if_e	mov	result1, #0
1eb00     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
1eb04     D0 FF 9F FD | 	jmp	#LR__3270
1eb08                 | LR__3271
1eb08                 | ' 	return((char *)--s);
1eb08     01 12 86 F1 | 	sub	arg01, #1
1eb0c     09 FB 01 F6 | 	mov	result1, arg01
1eb10                 | _fatfs_cc_strchr_ret
1eb10     2D 00 64 FD | 	ret
1eb14                 | 
1eb14                 | _fatfs_cc_disk_initialize
1eb14     04 4A 05 F6 | 	mov	COUNT_, #4
1eb18     A8 00 A0 FD | 	call	#pushregs_
1eb1c     40 F0 07 F1 | 	add	ptra, #64
1eb20     04 4E 05 F1 | 	add	fp, #4
1eb24     A7 12 42 FC | 	wrbyte	arg01, fp
1eb28     01 00 00 FF 
1eb2c     14 E4 05 F1 | 	add	objptr, ##532
1eb30     F2 18 02 FB | 	rdlong	arg04, objptr
1eb34     2C 4E 05 F1 | 	add	fp, #44
1eb38     A7 18 62 FC | 	wrlong	arg04, fp
1eb3c     04 E4 85 F1 | 	sub	objptr, #4
1eb40     F2 18 02 FB | 	rdlong	arg04, objptr
1eb44     04 4E 05 F1 | 	add	fp, #4
1eb48     A7 18 62 FC | 	wrlong	arg04, fp
1eb4c     08 E4 05 F1 | 	add	objptr, #8
1eb50     F2 18 02 FB | 	rdlong	arg04, objptr
1eb54     04 4E 05 F1 | 	add	fp, #4
1eb58     A7 18 62 FC | 	wrlong	arg04, fp
1eb5c     04 E4 05 F1 | 	add	objptr, #4
1eb60     F2 18 02 FB | 	rdlong	arg04, objptr
1eb64     04 4E 05 F1 | 	add	fp, #4
1eb68     A7 18 62 FC | 	wrlong	arg04, fp
1eb6c     04 E4 05 F1 | 	add	objptr, #4
1eb70     F2 02 48 FC | 	wrbyte	#1, objptr
1eb74     01 00 00 FF 
1eb78     20 E4 85 F1 | 	sub	objptr, ##544
1eb7c     38 4E 85 F1 | 	sub	fp, #56
1eb80     A7 18 CA FA | 	rdbyte	arg04, fp wz
1eb84     04 4E 85 F1 | 	sub	fp, #4
1eb88                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
1eb88                 | '             return RES_NOTRDY;
1eb88     03 FA 05 56 |  if_ne	mov	result1, #3
1eb8c     D8 05 90 5D |  if_ne	jmp	#LR__3298
1eb90     13 00 00 FF 
1eb94     10 13 06 F6 | 	mov	arg01, ##10000
1eb98     20 9D BF FD | 	call	#__system___waitus
1eb9c     30 4E 05 F1 | 	add	fp, #48
1eba0     A7 12 02 FB | 	rdlong	arg01, fp
1eba4     09 01 08 FC | 	wrpin	#0, arg01
1eba8     04 4E 05 F1 | 	add	fp, #4
1ebac     A7 12 02 FB | 	rdlong	arg01, fp
1ebb0     09 01 08 FC | 	wrpin	#0, arg01
1ebb4     04 4E 05 F1 | 	add	fp, #4
1ebb8     A7 12 02 FB | 	rdlong	arg01, fp
1ebbc     09 01 08 FC | 	wrpin	#0, arg01
1ebc0     04 4E 05 F1 | 	add	fp, #4
1ebc4     A7 12 02 FB | 	rdlong	arg01, fp
1ebc8     09 00 80 FF 
1ebcc     09 01 08 FC | 	wrpin	##4608, arg01
1ebd0     0C 4E 85 F1 | 	sub	fp, #12
1ebd4     A7 12 02 FB | 	rdlong	arg01, fp
1ebd8     59 12 62 FD | 	drvh	arg01
1ebdc     04 4E 05 F1 | 	add	fp, #4
1ebe0     A7 12 02 FB | 	rdlong	arg01, fp
1ebe4     59 12 62 FD | 	drvh	arg01
1ebe8     04 4E 05 F1 | 	add	fp, #4
1ebec     A7 12 02 FB | 	rdlong	arg01, fp
1ebf0     59 12 62 FD | 	drvh	arg01
1ebf4     04 4E 05 F1 | 	add	fp, #4
1ebf8     A7 12 02 FB | 	rdlong	arg01, fp
1ebfc     59 12 62 FD | 	drvh	arg01
1ec00     20 4E 85 F1 | 	sub	fp, #32
1ec04     00 04 80 FF 
1ec08     A7 20 68 FC | 	wrlong	##524304, fp
1ec0c     04 4E 05 F1 | 	add	fp, #4
1ec10     20 03 80 FF 
1ec14     A7 90 68 FC | 	wrlong	##409672, fp
1ec18     14 4E 05 F1 | 	add	fp, #20
1ec1c     A7 1E 02 FB | 	rdlong	local01, fp
1ec20     18 4E 85 F1 | 	sub	fp, #24
1ec24     A7 16 02 FB | 	rdlong	arg03, fp
1ec28     40 1E 62 FD | 	dirl	local01
1ec2c     A0 03 80 FF 
1ec30     0F 91 08 FC | 	wrpin	##475208, local01
1ec34     0F 17 12 FC | 	wxpin	arg03, local01
1ec38     0F 01 28 FC | 	wypin	#0, local01
1ec3c     41 1E 62 FD | 	dirh	local01
1ec40     1C 4E 05 F1 | 	add	fp, #28
1ec44     A7 20 02 FB | 	rdlong	local02, fp
1ec48     10 1F 82 F1 | 	sub	local01, local02
1ec4c     07 1E 06 F5 | 	and	local01, #7
1ec50     18 1E 66 F0 | 	shl	local01, #24
1ec54     78 14 06 F6 | 	mov	arg02, #120
1ec58     0F 15 42 F5 | 	or	arg02, local01
1ec5c     14 4E 85 F1 | 	sub	fp, #20
1ec60     A7 14 62 FC | 	wrlong	arg02, fp
1ec64     14 4E 05 F1 | 	add	fp, #20
1ec68     A7 12 02 FB | 	rdlong	arg01, fp
1ec6c     10 14 26 F4 | 	bith	arg02, #16
1ec70     40 12 62 FD | 	dirl	arg01
1ec74     09 15 02 FC | 	wrpin	arg02, arg01
1ec78     09 3F 18 FC | 	wxpin	#31, arg01
1ec7c     FF FF FF FF 
1ec80     09 FF 2B FC | 	wypin	##-1, arg01
1ec84     41 12 62 FD | 	dirh	arg01
1ec88     04 4E 85 F1 | 	sub	fp, #4
1ec8c     A7 14 02 FB | 	rdlong	arg02, fp
1ec90     08 4E 05 F1 | 	add	fp, #8
1ec94     A7 22 02 FB | 	rdlong	local03, fp
1ec98     11 15 82 F1 | 	sub	arg02, local03
1ec9c     07 14 06 F5 | 	and	arg02, #7
1eca0     18 14 66 F0 | 	shl	arg02, #24
1eca4     14 4E 85 F1 | 	sub	fp, #20
1eca8     A7 14 62 FC | 	wrlong	arg02, fp
1ecac     29 00 00 FF 
1ecb0     7A 14 46 F5 | 	or	arg02, ##21114
1ecb4     A7 14 62 FC | 	wrlong	arg02, fp
1ecb8     14 4E 05 F1 | 	add	fp, #20
1ecbc     A7 12 02 FB | 	rdlong	arg01, fp
1ecc0     40 12 62 FD | 	dirl	arg01
1ecc4     09 15 02 FC | 	wrpin	arg02, arg01
1ecc8     09 4F 18 FC | 	wxpin	#39, arg01
1eccc     09 01 28 FC | 	wypin	#0, arg01
1ecd0     41 12 62 FD | 	dirh	arg01
1ecd4     28 4E 85 F1 | 	sub	fp, #40
1ecd8     A7 12 02 F6 | 	mov	arg01, fp
1ecdc     14 4E 85 F1 | 	sub	fp, #20
1ece0     0A 14 06 F6 | 	mov	arg02, #10
1ece4     14 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0992
1ece8     00 12 06 F6 | 	mov	arg01, #0
1ecec     00 14 06 F6 | 	mov	arg02, #0
1ecf0     E0 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1016
1ecf4     1C 80 B0 FD | 	call	#_fatfs_cc_deselect_1002
1ecf8     64 12 06 F6 | 	mov	arg01, #100
1ecfc     BC 9B BF FD | 	call	#__system___waitus
1ed00     14 4E 05 F1 | 	add	fp, #20
1ed04     A7 12 02 F6 | 	mov	arg01, fp
1ed08     14 4E 85 F1 | 	sub	fp, #20
1ed0c     0A 14 06 F6 | 	mov	arg02, #10
1ed10     E8 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0992
1ed14     0C 4E 05 F1 | 	add	fp, #12
1ed18     A7 00 48 FC | 	wrbyte	#0, fp
1ed1c     0C 4E 85 F1 | 	sub	fp, #12
1ed20     00 12 06 F6 | 	mov	arg01, #0
1ed24     00 14 06 F6 | 	mov	arg02, #0
1ed28     A8 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1016
1ed2c     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
1ed30     01 18 0E F2 | 	cmp	arg04, #1 wz
1ed34     B8 03 90 5D |  if_ne	jmp	#LR__3297
1ed38     08 12 06 F6 | 	mov	arg01, #8
1ed3c     AA 15 06 F6 | 	mov	arg02, #426
1ed40     90 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1016
1ed44     FD FA E1 F8 | 	getbyte	result1, result1, #0
1ed48     01 FA 0D F2 | 	cmp	result1, #1 wz
1ed4c     98 01 90 5D |  if_ne	jmp	#LR__3283
1ed50     14 4E 05 F1 | 	add	fp, #20
1ed54     A7 12 02 F6 | 	mov	arg01, fp
1ed58     14 4E 85 F1 | 	sub	fp, #20
1ed5c     04 14 06 F6 | 	mov	arg02, #4
1ed60     98 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0992
1ed64     16 4E 05 F1 | 	add	fp, #22
1ed68     A7 24 C2 FA | 	rdbyte	local04, fp
1ed6c     16 4E 85 F1 | 	sub	fp, #22
1ed70     01 24 0E F2 | 	cmp	local04, #1 wz
1ed74     17 4E 05 A1 |  if_e	add	fp, #23
1ed78     A7 22 C2 AA |  if_e	rdbyte	local03, fp
1ed7c     17 4E 85 A1 |  if_e	sub	fp, #23
1ed80     AA 22 0E A2 |  if_e	cmp	local03, #170 wz
1ed84     68 03 90 5D |  if_ne	jmp	#LR__3296
1ed88                 | ' 				for (tmr = 1000; tmr; tmr--) {
1ed88     18 4E 05 F1 | 	add	fp, #24
1ed8c     01 00 80 FF 
1ed90     A7 D0 6B FC | 	wrlong	##1000, fp
1ed94     18 4E 85 F1 | 	sub	fp, #24
1ed98                 | LR__3280
1ed98     18 4E 05 F1 | 	add	fp, #24
1ed9c     A7 1E 0A FB | 	rdlong	local01, fp wz
1eda0     18 4E 85 F1 | 	sub	fp, #24
1eda4     3C 00 90 AD |  if_e	jmp	#LR__3281
1eda8     A9 12 06 F6 | 	mov	arg01, #169
1edac     1E 14 C6 F9 | 	decod	arg02, #30
1edb0     20 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1016
1edb4     FD 24 02 F6 | 	mov	local04, result1
1edb8     07 24 4E F7 | 	zerox	local04, #7 wz
1edbc     24 00 90 AD |  if_e	jmp	#LR__3281
1edc0     01 00 00 FF 
1edc4     E8 13 06 F6 | 	mov	arg01, ##1000
1edc8     F0 9A BF FD | 	call	#__system___waitus
1edcc     18 4E 05 F1 | 	add	fp, #24
1edd0     A7 24 02 FB | 	rdlong	local04, fp
1edd4     01 24 86 F1 | 	sub	local04, #1
1edd8     A7 24 62 FC | 	wrlong	local04, fp
1eddc     18 4E 85 F1 | 	sub	fp, #24
1ede0     B4 FF 9F FD | 	jmp	#LR__3280
1ede4                 | LR__3281
1ede4     18 4E 05 F1 | 	add	fp, #24
1ede8     A7 24 0A FB | 	rdlong	local04, fp wz
1edec     18 4E 85 F1 | 	sub	fp, #24
1edf0     4C 00 90 AD |  if_e	jmp	#LR__3282
1edf4     3A 12 06 F6 | 	mov	arg01, #58
1edf8     00 14 06 F6 | 	mov	arg02, #0
1edfc     D4 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1016
1ee00     FD 22 02 F6 | 	mov	local03, result1
1ee04     07 22 4E F7 | 	zerox	local03, #7 wz
1ee08     34 00 90 5D |  if_ne	jmp	#LR__3282
1ee0c     14 4E 05 F1 | 	add	fp, #20
1ee10     A7 12 02 F6 | 	mov	arg01, fp
1ee14     14 4E 85 F1 | 	sub	fp, #20
1ee18     04 14 06 F6 | 	mov	arg02, #4
1ee1c     DC 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0992
1ee20     14 4E 05 F1 | 	add	fp, #20
1ee24     A7 1E C2 FA | 	rdbyte	local01, fp
1ee28     40 1E CE F7 | 	test	local01, #64 wz
1ee2c     0C 24 06 56 |  if_ne	mov	local04, #12
1ee30     04 24 06 A6 |  if_e	mov	local04, #4
1ee34     08 4E 85 F1 | 	sub	fp, #8
1ee38     A7 24 42 FC | 	wrbyte	local04, fp
1ee3c     0C 4E 85 F1 | 	sub	fp, #12
1ee40                 | LR__3282
1ee40     14 24 06 FB | 	rdlong	local04, #20
1ee44     18 4E 05 F1 | 	add	fp, #24
1ee48     A7 24 62 FC | 	wrlong	local04, fp
1ee4c     0C 4E 05 F1 | 	add	fp, #12
1ee50     A7 24 02 FB | 	rdlong	local04, fp
1ee54     1B 24 26 F4 | 	bith	local04, #27
1ee58     A7 24 62 FC | 	wrlong	local04, fp
1ee5c     0C 4E 85 F1 | 	sub	fp, #12
1ee60     A7 24 02 FB | 	rdlong	local04, fp
1ee64     18 4E 85 F1 | 	sub	fp, #24
1ee68     68 78 04 FF 
1ee6c     81 25 16 F2 | 	cmp	local04, ##150000001 wc
1ee70     1C 4E 05 C1 |  if_b	add	fp, #28
1ee74     00 01 80 CF 
1ee78     A7 08 68 CC |  if_b	wrlong	##131076, fp
1ee7c     1C 4E 85 C1 |  if_b	sub	fp, #28
1ee80     6C 02 90 CD |  if_b	jmp	#LR__3296
1ee84     18 4E 05 F1 | 	add	fp, #24
1ee88     A7 24 02 FB | 	rdlong	local04, fp
1ee8c     18 4E 85 F1 | 	sub	fp, #24
1ee90     E1 F5 05 FF 
1ee94     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1ee98     1C 4E 05 C1 |  if_b	add	fp, #28
1ee9c     00 01 80 CF 
1eea0     A7 0A 68 CC |  if_b	wrlong	##131077, fp
1eea4     1C 4E 85 C1 |  if_b	sub	fp, #28
1eea8     44 02 90 CD |  if_b	jmp	#LR__3296
1eeac     18 4E 05 F1 | 	add	fp, #24
1eeb0     A7 24 02 FB | 	rdlong	local04, fp
1eeb4     18 4E 85 F1 | 	sub	fp, #24
1eeb8     3B 58 08 FF 
1eebc     01 24 16 F2 | 	cmp	local04, ##280000001 wc
1eec0     1C 4E 05 C1 |  if_b	add	fp, #28
1eec4     00 01 80 CF 
1eec8     A7 0C 68 CC |  if_b	wrlong	##131078, fp
1eecc     1C 4E 85 C1 |  if_b	sub	fp, #28
1eed0     1C 02 90 CD |  if_b	jmp	#LR__3296
1eed4     1C 4E 05 F1 | 	add	fp, #28
1eed8     80 01 80 FF 
1eedc     A7 10 68 FC | 	wrlong	##196616, fp
1eee0     1C 4E 85 F1 | 	sub	fp, #28
1eee4     08 02 90 FD | 	jmp	#LR__3296
1eee8                 | LR__3283
1eee8     A9 12 06 F6 | 	mov	arg01, #169
1eeec     00 14 06 F6 | 	mov	arg02, #0
1eef0     E0 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1016
1eef4     FD 24 E2 F8 | 	getbyte	local04, result1, #0
1eef8     02 24 16 F2 | 	cmp	local04, #2 wc
1eefc     18 00 90 3D |  if_ae	jmp	#LR__3284
1ef00     0C 4E 05 F1 | 	add	fp, #12
1ef04     A7 04 48 FC | 	wrbyte	#2, fp
1ef08     04 4E 05 F1 | 	add	fp, #4
1ef0c     A7 52 49 FC | 	wrbyte	#169, fp
1ef10     10 4E 85 F1 | 	sub	fp, #16
1ef14     14 00 90 FD | 	jmp	#LR__3285
1ef18                 | LR__3284
1ef18     0C 4E 05 F1 | 	add	fp, #12
1ef1c     A7 02 48 FC | 	wrbyte	#1, fp
1ef20     04 4E 05 F1 | 	add	fp, #4
1ef24     A7 02 48 FC | 	wrbyte	#1, fp
1ef28     10 4E 85 F1 | 	sub	fp, #16
1ef2c                 | LR__3285
1ef2c                 | ' 				ty =  0x01 ; cmd =  (1) ;
1ef2c                 | ' 			}
1ef2c                 | ' 			for (tmr = 1000; tmr; tmr--) {
1ef2c     18 4E 05 F1 | 	add	fp, #24
1ef30     01 00 80 FF 
1ef34     A7 D0 6B FC | 	wrlong	##1000, fp
1ef38     18 4E 85 F1 | 	sub	fp, #24
1ef3c                 | LR__3286
1ef3c     18 4E 05 F1 | 	add	fp, #24
1ef40     A7 22 0A FB | 	rdlong	local03, fp wz
1ef44     18 4E 85 F1 | 	sub	fp, #24
1ef48     44 00 90 AD |  if_e	jmp	#LR__3287
1ef4c     10 4E 05 F1 | 	add	fp, #16
1ef50     A7 12 C2 FA | 	rdbyte	arg01, fp
1ef54     10 4E 85 F1 | 	sub	fp, #16
1ef58     00 14 06 F6 | 	mov	arg02, #0
1ef5c     74 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1016
1ef60     FD 24 02 F6 | 	mov	local04, result1
1ef64     07 24 4E F7 | 	zerox	local04, #7 wz
1ef68     24 00 90 AD |  if_e	jmp	#LR__3287
1ef6c     01 00 00 FF 
1ef70     E8 13 06 F6 | 	mov	arg01, ##1000
1ef74     44 99 BF FD | 	call	#__system___waitus
1ef78     18 4E 05 F1 | 	add	fp, #24
1ef7c     A7 24 02 FB | 	rdlong	local04, fp
1ef80     01 24 86 F1 | 	sub	local04, #1
1ef84     A7 24 62 FC | 	wrlong	local04, fp
1ef88     18 4E 85 F1 | 	sub	fp, #24
1ef8c     AC FF 9F FD | 	jmp	#LR__3286
1ef90                 | LR__3287
1ef90     18 4E 05 F1 | 	add	fp, #24
1ef94     A7 24 0A FB | 	rdlong	local04, fp wz
1ef98     18 4E 85 F1 | 	sub	fp, #24
1ef9c     14 00 90 AD |  if_e	jmp	#LR__3288
1efa0     10 12 06 F6 | 	mov	arg01, #16
1efa4     09 14 C6 F9 | 	decod	arg02, #9
1efa8     28 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1016
1efac     07 FA 4D F7 | 	zerox	result1, #7 wz
1efb0     0C 00 90 AD |  if_e	jmp	#LR__3289
1efb4                 | LR__3288
1efb4     0C 4E 05 F1 | 	add	fp, #12
1efb8     A7 00 48 FC | 	wrbyte	#0, fp
1efbc     0C 4E 85 F1 | 	sub	fp, #12
1efc0                 | LR__3289
1efc0     14 24 06 FB | 	rdlong	local04, #20
1efc4     18 4E 05 F1 | 	add	fp, #24
1efc8     A7 24 62 FC | 	wrlong	local04, fp
1efcc     18 4E 85 F1 | 	sub	fp, #24
1efd0     F0 FA 02 FF 
1efd4     01 25 16 F2 | 	cmp	local04, ##100000001 wc
1efd8     18 00 90 3D |  if_ae	jmp	#LR__3290
1efdc     24 4E 05 F1 | 	add	fp, #36
1efe0     A7 24 02 FB | 	rdlong	local04, fp
1efe4     1B 24 26 F4 | 	bith	local04, #27
1efe8     A7 24 62 FC | 	wrlong	local04, fp
1efec     24 4E 85 F1 | 	sub	fp, #36
1eff0     2C 00 90 FD | 	jmp	#LR__3291
1eff4                 | LR__3290
1eff4     18 4E 05 F1 | 	add	fp, #24
1eff8     A7 24 02 FB | 	rdlong	local04, fp
1effc     18 4E 85 F1 | 	sub	fp, #24
1f000     E1 F5 05 FF 
1f004     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1f008     24 4E 05 C1 |  if_b	add	fp, #36
1f00c     A7 24 02 CB |  if_b	rdlong	local04, fp
1f010     80 00 04 CF 
1f014     00 24 46 C5 |  if_b	or	local04, ##134283264
1f018     A7 24 62 CC |  if_b	wrlong	local04, fp
1f01c     24 4E 85 C1 |  if_b	sub	fp, #36
1f020                 | LR__3291
1f020     18 4E 05 F1 | 	add	fp, #24
1f024     A7 24 02 FB | 	rdlong	local04, fp
1f028     18 4E 85 F1 | 	sub	fp, #24
1f02c     F0 FA 02 FF 
1f030     01 25 16 F2 | 	cmp	local04, ##100000001 wc
1f034     1C 4E 05 C1 |  if_b	add	fp, #28
1f038     00 01 80 CF 
1f03c     A7 08 68 CC |  if_b	wrlong	##131076, fp
1f040     1C 4E 85 C1 |  if_b	sub	fp, #28
1f044     A8 00 90 CD |  if_b	jmp	#LR__3295
1f048     18 4E 05 F1 | 	add	fp, #24
1f04c     A7 24 02 FB | 	rdlong	local04, fp
1f050     18 4E 85 F1 | 	sub	fp, #24
1f054     68 78 04 FF 
1f058     81 25 16 F2 | 	cmp	local04, ##150000001 wc
1f05c     1C 4E 05 C1 |  if_b	add	fp, #28
1f060     80 01 80 CF 
1f064     A7 0C 68 CC |  if_b	wrlong	##196614, fp
1f068     1C 4E 85 C1 |  if_b	sub	fp, #28
1f06c     80 00 90 CD |  if_b	jmp	#LR__3294
1f070     18 4E 05 F1 | 	add	fp, #24
1f074     A7 24 02 FB | 	rdlong	local04, fp
1f078     18 4E 85 F1 | 	sub	fp, #24
1f07c     E1 F5 05 FF 
1f080     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1f084     1C 4E 05 C1 |  if_b	add	fp, #28
1f088     00 02 80 CF 
1f08c     A7 10 68 CC |  if_b	wrlong	##262152, fp
1f090     1C 4E 85 C1 |  if_b	sub	fp, #28
1f094     58 00 90 CD |  if_b	jmp	#LR__3293
1f098     18 4E 05 F1 | 	add	fp, #24
1f09c     A7 24 02 FB | 	rdlong	local04, fp
1f0a0     18 4E 85 F1 | 	sub	fp, #24
1f0a4     59 73 07 FF 
1f0a8     81 24 16 F2 | 	cmp	local04, ##250000001 wc
1f0ac     1C 4E 05 C1 |  if_b	add	fp, #28
1f0b0     80 02 80 CF 
1f0b4     A7 14 68 CC |  if_b	wrlong	##327690, fp
1f0b8     1C 4E 85 C1 |  if_b	sub	fp, #28
1f0bc     30 00 90 CD |  if_b	jmp	#LR__3292
1f0c0     18 4E 05 F1 | 	add	fp, #24
1f0c4     A7 24 02 FB | 	rdlong	local04, fp
1f0c8     18 4E 85 F1 | 	sub	fp, #24
1f0cc     D1 F0 08 FF 
1f0d0     01 25 16 F2 | 	cmp	local04, ##300000001 wc
1f0d4     1C 4E 05 C1 |  if_b	add	fp, #28
1f0d8     00 03 80 CF 
1f0dc     A7 18 68 CC |  if_b	wrlong	##393228, fp
1f0e0     1C 4E 85 F3 | 	sumc	fp, #28
1f0e4     80 03 80 3F 
1f0e8     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
1f0ec     1C 4E 85 31 |  if_ae	sub	fp, #28
1f0f0                 | LR__3292
1f0f0                 | LR__3293
1f0f0                 | LR__3294
1f0f0                 | LR__3295
1f0f0                 | LR__3296
1f0f0                 | LR__3297
1f0f0     0C 4E 05 F1 | 	add	fp, #12
1f0f4     A7 24 C2 FA | 	rdbyte	local04, fp
1f0f8     01 00 00 FF 
1f0fc     21 E4 05 F1 | 	add	objptr, ##545
1f100     F2 24 42 FC | 	wrbyte	local04, objptr
1f104     A7 1E CA FA | 	rdbyte	local01, fp wz
1f108     00 24 06 56 |  if_ne	mov	local04, #0
1f10c     01 24 06 A6 |  if_e	mov	local04, #1
1f110     20 4E 05 F1 | 	add	fp, #32
1f114     A7 24 42 FC | 	wrbyte	local04, fp
1f118     A7 24 C2 FA | 	rdbyte	local04, fp
1f11c     2C 4E 85 F1 | 	sub	fp, #44
1f120     01 E4 85 F1 | 	sub	objptr, #1
1f124     F2 24 42 FC | 	wrbyte	local04, objptr
1f128     01 00 00 FF 
1f12c     20 E4 85 F1 | 	sub	objptr, ##544
1f130     E0 7B B0 FD | 	call	#_fatfs_cc_deselect_1002
1f134     34 4E 05 F1 | 	add	fp, #52
1f138     A7 12 02 FB | 	rdlong	arg01, fp
1f13c     18 4E 85 F1 | 	sub	fp, #24
1f140     A7 14 02 FB | 	rdlong	arg02, fp
1f144     09 15 12 FC | 	wxpin	arg02, arg01
1f148     1C 4E 05 F1 | 	add	fp, #28
1f14c     A7 12 02 FB | 	rdlong	arg01, fp
1f150     14 4E 85 F1 | 	sub	fp, #20
1f154     A7 14 02 FB | 	rdlong	arg02, fp
1f158     09 15 02 FC | 	wrpin	arg02, arg01
1f15c                 | ' 
1f15c                 | ' 		}
1f15c                 | ' 	}
1f15c                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
1f15c                 | ' 	CardType = ty;
1f15c                 | ' 	s = ty ? 0 :  0x01 ;
1f15c                 | ' 	Stat = s;
1f15c                 | ' 
1f15c                 | ' 	deselect();
1f15c                 | ' 
1f15c                 | ' 
1f15c                 | ' 	_wxpin( PIN_CLK, ck_div );
1f15c                 | ' 	_wrpin( PIN_DI, spm_tx );
1f15c                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
1f15c                 | ' 	return s;
1f15c     08 4E 05 F1 | 	add	fp, #8
1f160     A7 FA C1 FA | 	rdbyte	result1, fp
1f164     2C 4E 85 F1 | 	sub	fp, #44
1f168                 | LR__3298
1f168     A7 F0 03 F6 | 	mov	ptra, fp
1f16c     B2 00 A0 FD | 	call	#popregs_
1f170                 | _fatfs_cc_disk_initialize_ret
1f170     2D 00 64 FD | 	ret
1f174                 | 
1f174                 | _fatfs_cc_disk_read
1f174     05 4A 05 F6 | 	mov	COUNT_, #5
1f178     A8 00 A0 FD | 	call	#pushregs_
1f17c     0A 1F 02 F6 | 	mov	local01, arg02
1f180     0B 21 02 F6 | 	mov	local02, arg03
1f184     0C 23 02 F6 | 	mov	local03, arg04
1f188     00 12 0E F2 | 	cmp	arg01, #0 wz
1f18c     01 FA 05 56 |  if_ne	mov	result1, #1
1f190                 | ' 
1f190                 | ' 	return Stat;
1f190     01 00 00 AF 
1f194     20 E4 05 A1 |  if_e	add	objptr, ##544
1f198     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1f19c     01 00 00 AF 
1f1a0     20 E4 85 A1 |  if_e	sub	objptr, ##544
1f1a4     FD FA E1 F8 | 	getbyte	result1, result1, #0
1f1a8     01 FA CD F7 | 	test	result1, #1 wz
1f1ac     03 FA 05 56 |  if_ne	mov	result1, #3
1f1b0     84 00 90 5D |  if_ne	jmp	#LR__3302
1f1b4     01 00 00 FF 
1f1b8     21 E4 05 F1 | 	add	objptr, ##545
1f1bc     F2 24 C2 FA | 	rdbyte	local04, objptr
1f1c0     01 00 00 FF 
1f1c4     21 E4 85 F1 | 	sub	objptr, ##545
1f1c8     08 24 CE F7 | 	test	local04, #8 wz
1f1cc     09 20 66 A0 |  if_e	shl	local02, #9
1f1d0     02 22 16 F2 | 	cmp	local03, #2 wc
1f1d4     12 24 06 36 |  if_ae	mov	local04, #18
1f1d8     11 24 06 C6 |  if_b	mov	local04, #17
1f1dc     10 15 02 F6 | 	mov	arg02, local02
1f1e0     12 13 02 F6 | 	mov	arg01, local04
1f1e4     EC 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1016
1f1e8     FD 26 02 F6 | 	mov	local05, result1
1f1ec     07 26 4E F7 | 	zerox	local05, #7 wz
1f1f0     30 00 90 5D |  if_ne	jmp	#LR__3301
1f1f4                 | ' 		do {
1f1f4                 | LR__3300
1f1f4     0F 13 02 F6 | 	mov	arg01, local01
1f1f8     09 14 C6 F9 | 	decod	arg02, #9
1f1fc     28 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1010
1f200     00 FA 0D F2 | 	cmp	result1, #0 wz
1f204     01 00 00 5F 
1f208     00 1E 06 51 |  if_ne	add	local01, ##512
1f20c     F9 23 6E 5B |  if_ne	djnz	local03, #LR__3300
1f210     12 25 E2 F8 | 	getbyte	local04, local04, #0
1f214     12 24 0E F2 | 	cmp	local04, #18 wz
1f218     0C 12 06 A6 |  if_e	mov	arg01, #12
1f21c     00 14 06 A6 |  if_e	mov	arg02, #0
1f220     B0 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1016
1f224                 | LR__3301
1f224     EC 7A B0 FD | 	call	#_fatfs_cc_deselect_1002
1f228                 | ' 	}
1f228                 | ' 	deselect();
1f228                 | ' 
1f228                 | ' 	return count ? RES_ERROR : RES_OK;
1f228     00 22 0E F2 | 	cmp	local03, #0 wz
1f22c     01 26 06 56 |  if_ne	mov	local05, #1
1f230     00 26 06 A6 |  if_e	mov	local05, #0
1f234     13 FB 01 F6 | 	mov	result1, local05
1f238                 | LR__3302
1f238     A7 F0 03 F6 | 	mov	ptra, fp
1f23c     B2 00 A0 FD | 	call	#popregs_
1f240                 | _fatfs_cc_disk_read_ret
1f240     2D 00 64 FD | 	ret
1f244                 | 
1f244                 | _fatfs_cc_disk_write
1f244     04 4A 05 F6 | 	mov	COUNT_, #4
1f248     A8 00 A0 FD | 	call	#pushregs_
1f24c     0A 1F 02 F6 | 	mov	local01, arg02
1f250     0C 21 02 F6 | 	mov	local02, arg04
1f254     0B 23 02 F6 | 	mov	local03, arg03
1f258     00 12 0E F2 | 	cmp	arg01, #0 wz
1f25c     01 FA 05 56 |  if_ne	mov	result1, #1
1f260                 | ' 
1f260                 | ' 	return Stat;
1f260     01 00 00 AF 
1f264     20 E4 05 A1 |  if_e	add	objptr, ##544
1f268     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1f26c     01 00 00 AF 
1f270     20 E4 85 A1 |  if_e	sub	objptr, ##544
1f274     FD FA E1 F8 | 	getbyte	result1, result1, #0
1f278     01 FA CD F7 | 	test	result1, #1 wz
1f27c     03 FA 05 56 |  if_ne	mov	result1, #3
1f280     D4 00 90 5D |  if_ne	jmp	#LR__3314
1f284     01 00 00 FF 
1f288     21 E4 05 F1 | 	add	objptr, ##545
1f28c     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f290     01 00 00 FF 
1f294     21 E4 85 F1 | 	sub	objptr, ##545
1f298     08 16 CE F7 | 	test	arg03, #8 wz
1f29c     09 22 66 A0 |  if_e	shl	local03, #9
1f2a0     01 20 0E F2 | 	cmp	local02, #1 wz
1f2a4     30 00 90 5D |  if_ne	jmp	#LR__3310
1f2a8     18 12 06 F6 | 	mov	arg01, #24
1f2ac     11 15 02 F6 | 	mov	arg02, local03
1f2b0     20 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1016
1f2b4     FD 24 02 F6 | 	mov	local04, result1
1f2b8     07 24 4E F7 | 	zerox	local04, #7 wz
1f2bc     84 00 90 5D |  if_ne	jmp	#LR__3313
1f2c0     0F 13 02 F6 | 	mov	arg01, local01
1f2c4     FE 14 06 F6 | 	mov	arg02, #254
1f2c8     3C 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1012
1f2cc     00 FA 0D F2 | 	cmp	result1, #0 wz
1f2d0     00 20 06 56 |  if_ne	mov	local02, #0
1f2d4     6C 00 90 FD | 	jmp	#LR__3313
1f2d8                 | LR__3310
1f2d8     01 00 00 FF 
1f2dc     21 E4 05 F1 | 	add	objptr, ##545
1f2e0     F2 24 C2 FA | 	rdbyte	local04, objptr
1f2e4     01 00 00 FF 
1f2e8     21 E4 85 F1 | 	sub	objptr, ##545
1f2ec     06 24 CE F7 | 	test	local04, #6 wz
1f2f0     97 12 06 56 |  if_ne	mov	arg01, #151
1f2f4     10 15 02 56 |  if_ne	mov	arg02, local02
1f2f8     D8 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1016
1f2fc     11 15 02 F6 | 	mov	arg02, local03
1f300     19 12 06 F6 | 	mov	arg01, #25
1f304     CC 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1016
1f308     FD 24 02 F6 | 	mov	local04, result1
1f30c     07 24 4E F7 | 	zerox	local04, #7 wz
1f310     30 00 90 5D |  if_ne	jmp	#LR__3312
1f314                 | ' 			do {
1f314                 | LR__3311
1f314     0F 13 02 F6 | 	mov	arg01, local01
1f318     FC 14 06 F6 | 	mov	arg02, #252
1f31c     E8 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1012
1f320     00 FA 0D F2 | 	cmp	result1, #0 wz
1f324     01 00 00 5F 
1f328     00 1E 06 51 |  if_ne	add	local01, ##512
1f32c     F9 21 6E 5B |  if_ne	djnz	local02, #LR__3311
1f330     00 12 06 F6 | 	mov	arg01, #0
1f334     FD 14 06 F6 | 	mov	arg02, #253
1f338     CC 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1012
1f33c     00 FA 0D F2 | 	cmp	result1, #0 wz
1f340     01 20 06 A6 |  if_e	mov	local02, #1
1f344                 | LR__3312
1f344                 | LR__3313
1f344     CC 79 B0 FD | 	call	#_fatfs_cc_deselect_1002
1f348                 | ' 				count = 1;
1f348                 | ' 		}
1f348                 | ' 	}
1f348                 | ' 	deselect();
1f348                 | ' 
1f348                 | ' 	return count ? RES_ERROR : RES_OK;
1f348     00 20 0E F2 | 	cmp	local02, #0 wz
1f34c     01 24 06 56 |  if_ne	mov	local04, #1
1f350     00 24 06 A6 |  if_e	mov	local04, #0
1f354     12 FB 01 F6 | 	mov	result1, local04
1f358                 | LR__3314
1f358     A7 F0 03 F6 | 	mov	ptra, fp
1f35c     B2 00 A0 FD | 	call	#popregs_
1f360                 | _fatfs_cc_disk_write_ret
1f360     2D 00 64 FD | 	ret
1f364                 | 
1f364                 | _fatfs_cc_disk_ioctl
1f364     01 4A 05 F6 | 	mov	COUNT_, #1
1f368     A8 00 A0 FD | 	call	#pushregs_
1f36c     30 F0 07 F1 | 	add	ptra, #48
1f370     04 4E 05 F1 | 	add	fp, #4
1f374     A7 12 42 FC | 	wrbyte	arg01, fp
1f378     04 4E 05 F1 | 	add	fp, #4
1f37c     A7 14 42 FC | 	wrbyte	arg02, fp
1f380     04 4E 05 F1 | 	add	fp, #4
1f384     A7 16 62 FC | 	wrlong	arg03, fp
1f388     08 4E 85 F1 | 	sub	fp, #8
1f38c     A7 12 CA FA | 	rdbyte	arg01, fp wz
1f390     04 4E 85 F1 | 	sub	fp, #4
1f394     01 FA 05 56 |  if_ne	mov	result1, #1
1f398                 | ' 
1f398                 | ' 	return Stat;
1f398     01 00 00 AF 
1f39c     20 E4 05 A1 |  if_e	add	objptr, ##544
1f3a0     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1f3a4     01 00 00 AF 
1f3a8     20 E4 85 A1 |  if_e	sub	objptr, ##544
1f3ac     FD FA E1 F8 | 	getbyte	result1, result1, #0
1f3b0     01 FA CD F7 | 	test	result1, #1 wz
1f3b4     03 FA 05 56 |  if_ne	mov	result1, #3
1f3b8     E4 01 90 5D |  if_ne	jmp	#LR__3328
1f3bc     10 4E 05 F1 | 	add	fp, #16
1f3c0     A7 02 68 FC | 	wrlong	#1, fp
1f3c4                 | ' 
1f3c4                 | ' 	res = RES_ERROR;
1f3c4                 | ' 	switch (ctrl) {
1f3c4     08 4E 85 F1 | 	sub	fp, #8
1f3c8     A7 1E C2 FA | 	rdbyte	local01, fp
1f3cc     08 4E 85 F1 | 	sub	fp, #8
1f3d0     04 1E 26 F3 | 	fle	local01, #4
1f3d4     30 1E 62 FD | 	jmprel	local01
1f3d8                 | LR__3320
1f3d8     10 00 90 FD | 	jmp	#LR__3321
1f3dc     24 00 90 FD | 	jmp	#LR__3322
1f3e0     A0 01 90 FD | 	jmp	#LR__3326
1f3e4     80 01 90 FD | 	jmp	#LR__3325
1f3e8     98 01 90 FD | 	jmp	#LR__3326
1f3ec                 | LR__3321
1f3ec     A8 79 B0 FD | 	call	#_fatfs_cc_select_1006
1f3f0     00 FA 0D F2 | 	cmp	result1, #0 wz
1f3f4     10 4E 05 51 |  if_ne	add	fp, #16
1f3f8     A7 00 68 5C |  if_ne	wrlong	#0, fp
1f3fc     10 4E 85 51 |  if_ne	sub	fp, #16
1f400                 | ' 			break;
1f400     8C 01 90 FD | 	jmp	#LR__3327
1f404                 | LR__3322
1f404     09 12 06 F6 | 	mov	arg01, #9
1f408     00 14 06 F6 | 	mov	arg02, #0
1f40c     C4 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1016
1f410     FD 1E 02 F6 | 	mov	local01, result1
1f414     07 1E 4E F7 | 	zerox	local01, #7 wz
1f418     74 01 90 5D |  if_ne	jmp	#LR__3327
1f41c     18 4E 05 F1 | 	add	fp, #24
1f420     A7 12 02 F6 | 	mov	arg01, fp
1f424     18 4E 85 F1 | 	sub	fp, #24
1f428     10 14 06 F6 | 	mov	arg02, #16
1f42c     F8 79 B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1010
1f430     00 FA 0D F2 | 	cmp	result1, #0 wz
1f434     58 01 90 AD |  if_e	jmp	#LR__3327
1f438     18 4E 05 F1 | 	add	fp, #24
1f43c     A7 1E C2 FA | 	rdbyte	local01, fp
1f440     18 4E 85 F1 | 	sub	fp, #24
1f444     06 1E 46 F0 | 	shr	local01, #6
1f448     01 1E 0E F2 | 	cmp	local01, #1 wz
1f44c     5C 00 90 5D |  if_ne	jmp	#LR__3323
1f450     21 4E 05 F1 | 	add	fp, #33
1f454     A7 1E C2 FA | 	rdbyte	local01, fp
1f458     01 4E 85 F1 | 	sub	fp, #1
1f45c     A7 FA C1 FA | 	rdbyte	result1, fp
1f460     FD FA 31 F9 | 	getword	result1, result1, #0
1f464     08 FA 65 F0 | 	shl	result1, #8
1f468     FD 1E 02 F1 | 	add	local01, result1
1f46c     01 4E 85 F1 | 	sub	fp, #1
1f470     A7 FA C1 FA | 	rdbyte	result1, fp
1f474     3F FA 05 F5 | 	and	result1, #63
1f478     10 FA 65 F0 | 	shl	result1, #16
1f47c     FD 1E 02 F1 | 	add	local01, result1
1f480     01 1E 06 F1 | 	add	local01, #1
1f484     09 4E 05 F1 | 	add	fp, #9
1f488     A7 1E 62 FC | 	wrlong	local01, fp
1f48c     1C 4E 85 F1 | 	sub	fp, #28
1f490     A7 1E 02 FB | 	rdlong	local01, fp
1f494     1C 4E 05 F1 | 	add	fp, #28
1f498     A7 FA 01 FB | 	rdlong	result1, fp
1f49c     28 4E 85 F1 | 	sub	fp, #40
1f4a0     0A FA 65 F0 | 	shl	result1, #10
1f4a4     0F FB 61 FC | 	wrlong	result1, local01
1f4a8     AC 00 90 FD | 	jmp	#LR__3324
1f4ac                 | LR__3323
1f4ac     1D 4E 05 F1 | 	add	fp, #29
1f4b0     A7 1E C2 FA | 	rdbyte	local01, fp
1f4b4     0F 1F 42 F8 | 	getnib	local01, local01, #0
1f4b8     05 4E 05 F1 | 	add	fp, #5
1f4bc     A7 FA C1 FA | 	rdbyte	result1, fp
1f4c0     80 FA 05 F5 | 	and	result1, #128
1f4c4     07 FA C5 F0 | 	sar	result1, #7
1f4c8     FD 1E 02 F1 | 	add	local01, result1
1f4cc     01 4E 85 F1 | 	sub	fp, #1
1f4d0     A7 FA C1 FA | 	rdbyte	result1, fp
1f4d4     03 FA 05 F5 | 	and	result1, #3
1f4d8     01 FA 65 F0 | 	shl	result1, #1
1f4dc     FD 1E 02 F1 | 	add	local01, result1
1f4e0     02 1E 06 F1 | 	add	local01, #2
1f4e4     0D 4E 85 F1 | 	sub	fp, #13
1f4e8     A7 1E 42 FC | 	wrbyte	local01, fp
1f4ec     0C 4E 05 F1 | 	add	fp, #12
1f4f0     A7 1E C2 FA | 	rdbyte	local01, fp
1f4f4     06 1E 46 F0 | 	shr	local01, #6
1f4f8     01 4E 85 F1 | 	sub	fp, #1
1f4fc     A7 FA C1 FA | 	rdbyte	result1, fp
1f500     FD FA 31 F9 | 	getword	result1, result1, #0
1f504     02 FA 65 F0 | 	shl	result1, #2
1f508     FD 1E 02 F1 | 	add	local01, result1
1f50c     01 4E 85 F1 | 	sub	fp, #1
1f510     A7 FA C1 FA | 	rdbyte	result1, fp
1f514     03 FA 05 F5 | 	and	result1, #3
1f518     FD FA 31 F9 | 	getword	result1, result1, #0
1f51c     0A FA 65 F0 | 	shl	result1, #10
1f520     FD 1E 02 F1 | 	add	local01, result1
1f524     01 1E 06 F1 | 	add	local01, #1
1f528     0A 4E 05 F1 | 	add	fp, #10
1f52c     A7 1E 62 FC | 	wrlong	local01, fp
1f530     1C 4E 85 F1 | 	sub	fp, #28
1f534     A7 1E 02 FB | 	rdlong	local01, fp
1f538     1C 4E 05 F1 | 	add	fp, #28
1f53c     A7 FA 01 FB | 	rdlong	result1, fp
1f540     14 4E 85 F1 | 	sub	fp, #20
1f544     A7 16 C2 FA | 	rdbyte	arg03, fp
1f548     14 4E 85 F1 | 	sub	fp, #20
1f54c     09 16 86 F1 | 	sub	arg03, #9
1f550     0B FB 61 F0 | 	shl	result1, arg03
1f554     0F FB 61 FC | 	wrlong	result1, local01
1f558                 | LR__3324
1f558     10 4E 05 F1 | 	add	fp, #16
1f55c     A7 00 68 FC | 	wrlong	#0, fp
1f560     10 4E 85 F1 | 	sub	fp, #16
1f564                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
1f564                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
1f564                 | ' 					*(LBA_t*)buff = cs << (n - 9);
1f564                 | ' 				}
1f564                 | ' 				res = RES_OK;
1f564                 | ' 			}
1f564                 | ' 			break;
1f564     28 00 90 FD | 	jmp	#LR__3327
1f568                 | LR__3325
1f568     0C 4E 05 F1 | 	add	fp, #12
1f56c     A7 1E 02 FB | 	rdlong	local01, fp
1f570     0F 01 69 FC | 	wrlong	#128, local01
1f574     04 4E 05 F1 | 	add	fp, #4
1f578     A7 00 68 FC | 	wrlong	#0, fp
1f57c     10 4E 85 F1 | 	sub	fp, #16
1f580                 | ' 			*(DWORD*)buff = 128;
1f580                 | ' 			res = RES_OK;
1f580                 | ' 			break;
1f580     0C 00 90 FD | 	jmp	#LR__3327
1f584                 | LR__3326
1f584     10 4E 05 F1 | 	add	fp, #16
1f588     A7 08 68 FC | 	wrlong	#4, fp
1f58c     10 4E 85 F1 | 	sub	fp, #16
1f590                 | LR__3327
1f590     80 77 B0 FD | 	call	#_fatfs_cc_deselect_1002
1f594                 | ' 			res = RES_PARERR;
1f594                 | ' 	}
1f594                 | ' 
1f594                 | ' 	deselect();
1f594                 | ' 
1f594                 | ' 	return res;
1f594     10 4E 05 F1 | 	add	fp, #16
1f598     A7 FA 01 FB | 	rdlong	result1, fp
1f59c     10 4E 85 F1 | 	sub	fp, #16
1f5a0                 | LR__3328
1f5a0     A7 F0 03 F6 | 	mov	ptra, fp
1f5a4     B2 00 A0 FD | 	call	#popregs_
1f5a8                 | _fatfs_cc_disk_ioctl_ret
1f5a8     2D 00 64 FD | 	ret
1f5ac                 | 
1f5ac                 | _fatfs_cc_disk_setpins
1f5ac     00 12 0E F2 | 	cmp	arg01, #0 wz
1f5b0     01 FA 65 56 |  if_ne	neg	result1, #1
1f5b4     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
1f5b8     01 00 00 FF 
1f5bc     10 E4 05 F1 | 	add	objptr, ##528
1f5c0     F2 14 62 FC | 	wrlong	arg02, objptr
1f5c4     04 E4 05 F1 | 	add	objptr, #4
1f5c8     F2 16 62 FC | 	wrlong	arg03, objptr
1f5cc     04 E4 05 F1 | 	add	objptr, #4
1f5d0     F2 18 62 FC | 	wrlong	arg04, objptr
1f5d4     04 E4 05 F1 | 	add	objptr, #4
1f5d8     F2 1A 62 FC | 	wrlong	arg05, objptr
1f5dc     01 00 00 FF 
1f5e0     1C E4 85 F1 | 	sub	objptr, ##540
1f5e4     00 FA 05 F6 | 	mov	result1, #0
1f5e8                 | _fatfs_cc_disk_setpins_ret
1f5e8     2D 00 64 FD | 	ret
1f5ec                 | 
1f5ec                 | _fatfs_cc_tchar2uni
1f5ec     09 01 02 FB | 	rdlong	_var01, arg01
1f5f0     00 03 02 F6 | 	mov	_var02, _var01
1f5f4     01 00 06 F1 | 	add	_var01, #1
1f5f8     00 05 02 F6 | 	mov	_var03, _var01
1f5fc     01 07 C2 FA | 	rdbyte	_var04, _var02
1f600     80 06 CE F7 | 	test	_var04, #128 wz
1f604     E8 00 90 AD |  if_e	jmp	#LR__3337
1f608     03 09 02 F6 | 	mov	_var05, _var04
1f60c     E0 08 06 F5 | 	and	_var05, #224
1f610     C0 08 0E F2 | 	cmp	_var05, #192 wz
1f614     1F 06 06 A5 |  if_e	and	_var04, #31
1f618     01 0A 06 A6 |  if_e	mov	_var06, #1
1f61c     34 00 90 AD |  if_e	jmp	#LR__3331
1f620     03 09 02 F6 | 	mov	_var05, _var04
1f624     F0 08 06 F5 | 	and	_var05, #240
1f628     E0 08 0E F2 | 	cmp	_var05, #224 wz
1f62c     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
1f630     02 0A 06 A6 |  if_e	mov	_var06, #2
1f634     1C 00 90 AD |  if_e	jmp	#LR__3330
1f638     03 09 02 F6 | 	mov	_var05, _var04
1f63c     F8 08 06 F5 | 	and	_var05, #248
1f640     F0 08 0E F2 | 	cmp	_var05, #240 wz
1f644     07 06 06 A5 |  if_e	and	_var04, #7
1f648     03 0A 06 A6 |  if_e	mov	_var06, #3
1f64c                 | ' 			return 0xFFFFFFFF;
1f64c     01 FA 65 56 |  if_ne	neg	result1, #1
1f650     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
1f654                 | LR__3330
1f654                 | LR__3331
1f654                 | ' 		}
1f654                 | ' 		do {
1f654                 | LR__3332
1f654     02 0D C2 FA | 	rdbyte	_var07, _var03
1f658     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
1f65c     C0 08 06 F5 | 	and	_var05, #192
1f660     80 08 0E F2 | 	cmp	_var05, #128 wz
1f664     01 04 06 F1 | 	add	_var03, #1
1f668     01 FA 65 56 |  if_ne	neg	result1, #1
1f66c     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
1f670     06 06 66 F0 | 	shl	_var04, #6
1f674     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
1f678     3F 02 06 F5 | 	and	_var02, #63
1f67c     01 07 42 F5 | 	or	_var04, _var02
1f680     F4 0B 6E FB | 	djnz	_var06, #LR__3332
1f684     80 06 16 F2 | 	cmp	_var04, #128 wc
1f688     24 00 90 CD |  if_b	jmp	#LR__3334
1f68c     6C 00 00 FF 
1f690     00 06 16 F2 | 	cmp	_var04, ##55296 wc
1f694     0C 00 90 CD |  if_b	jmp	#LR__3333
1f698     70 00 00 FF 
1f69c     00 06 16 F2 | 	cmp	_var04, ##57344 wc
1f6a0     0C 00 90 CD |  if_b	jmp	#LR__3334
1f6a4                 | LR__3333
1f6a4     80 08 00 FF 
1f6a8     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
1f6ac     08 00 90 CD |  if_b	jmp	#LR__3335
1f6b0                 | LR__3334
1f6b0     01 FA 65 F6 | 	neg	result1, #1
1f6b4     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
1f6b8                 | LR__3335
1f6b8     80 00 00 FF 
1f6bc     00 06 16 F2 | 	cmp	_var04, ##65536 wc
1f6c0     2C 00 90 CD |  if_b	jmp	#LR__3336
1f6c4     03 03 02 F6 | 	mov	_var02, _var04
1f6c8     80 00 00 FF 
1f6cc     00 02 86 F1 | 	sub	_var02, ##65536
1f6d0     06 02 66 F0 | 	shl	_var02, #6
1f6d4     80 FF 01 FF 
1f6d8     00 02 06 F5 | 	and	_var02, ##67043328
1f6dc     6E 00 6C FF 
1f6e0     00 08 06 F6 | 	mov	_var05, ##-671032320
1f6e4     01 09 42 F5 | 	or	_var05, _var02
1f6e8     09 06 46 F7 | 	zerox	_var04, #9
1f6ec     04 07 42 F5 | 	or	_var04, _var05
1f6f0                 | LR__3336
1f6f0                 | LR__3337
1f6f0     09 05 62 FC | 	wrlong	_var03, arg01
1f6f4                 | ' 	}
1f6f4                 | ' #line 811 "ff.c"
1f6f4                 | ' 	*str = p;
1f6f4                 | ' 	return uc;
1f6f4     03 FB 01 F6 | 	mov	result1, _var04
1f6f8                 | _fatfs_cc_tchar2uni_ret
1f6f8     2D 00 64 FD | 	ret
1f6fc                 | 
1f6fc                 | _fatfs_cc_put_utf
1f6fc     80 12 16 F2 | 	cmp	arg01, #128 wc
1f700     18 00 90 3D |  if_ae	jmp	#LR__3340
1f704     01 16 16 F2 | 	cmp	arg03, #1 wc
1f708     00 FA 05 C6 |  if_b	mov	result1, #0
1f70c     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
1f710     0A 13 42 FC | 	wrbyte	arg01, arg02
1f714                 | ' 		*buf = (TCHAR)chr;
1f714                 | ' 		return 1;
1f714     01 FA 05 F6 | 	mov	result1, #1
1f718     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1f71c                 | LR__3340
1f71c     04 00 00 FF 
1f720     00 12 16 F2 | 	cmp	arg01, ##2048 wc
1f724     40 00 90 3D |  if_ae	jmp	#LR__3341
1f728     02 16 16 F2 | 	cmp	arg03, #2 wc
1f72c     00 FA 05 C6 |  if_b	mov	result1, #0
1f730     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
1f734     09 FB 01 F6 | 	mov	result1, arg01
1f738     06 FA 45 F0 | 	shr	result1, #6
1f73c     1F FA 05 F5 | 	and	result1, #31
1f740     C0 16 06 F6 | 	mov	arg03, #192
1f744     FD 16 42 F5 | 	or	arg03, result1
1f748     0A 17 42 FC | 	wrbyte	arg03, arg02
1f74c     01 14 06 F1 | 	add	arg02, #1
1f750     3F 12 06 F5 | 	and	arg01, #63
1f754     80 FA 05 F6 | 	mov	result1, #128
1f758     09 FB 41 F5 | 	or	result1, arg01
1f75c     0A FB 41 FC | 	wrbyte	result1, arg02
1f760                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
1f760                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
1f760                 | ' 		return 2;
1f760     02 FA 05 F6 | 	mov	result1, #2
1f764     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1f768                 | LR__3341
1f768     80 00 00 FF 
1f76c     00 12 16 F2 | 	cmp	arg01, ##65536 wc
1f770     70 00 90 3D |  if_ae	jmp	#LR__3344
1f774     03 16 16 F2 | 	cmp	arg03, #3 wc
1f778     18 00 90 CD |  if_b	jmp	#LR__3342
1f77c     6C 00 00 FF 
1f780     00 12 16 F2 | 	cmp	arg01, ##55296 wc
1f784     14 00 90 CD |  if_b	jmp	#LR__3343
1f788     70 00 00 FF 
1f78c     00 12 16 F2 | 	cmp	arg01, ##57344 wc
1f790     08 00 90 3D |  if_ae	jmp	#LR__3343
1f794                 | LR__3342
1f794     00 FA 05 F6 | 	mov	result1, #0
1f798     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1f79c                 | LR__3343
1f79c     09 FB 59 F8 | 	getnib	result1, arg01, #3
1f7a0     E0 16 06 F6 | 	mov	arg03, #224
1f7a4     FD 16 42 F5 | 	or	arg03, result1
1f7a8     0A 17 42 FC | 	wrbyte	arg03, arg02
1f7ac     01 14 06 F1 | 	add	arg02, #1
1f7b0     09 FB 01 F6 | 	mov	result1, arg01
1f7b4     06 FA 45 F0 | 	shr	result1, #6
1f7b8     3F FA 05 F5 | 	and	result1, #63
1f7bc     80 16 06 F6 | 	mov	arg03, #128
1f7c0     FD 16 42 F5 | 	or	arg03, result1
1f7c4     0A 17 42 FC | 	wrbyte	arg03, arg02
1f7c8     01 14 06 F1 | 	add	arg02, #1
1f7cc     3F 12 06 F5 | 	and	arg01, #63
1f7d0     80 FA 05 F6 | 	mov	result1, #128
1f7d4     09 FB 41 F5 | 	or	result1, arg01
1f7d8     0A FB 41 FC | 	wrbyte	result1, arg02
1f7dc                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
1f7dc                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
1f7dc                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
1f7dc                 | ' 		return 3;
1f7dc     03 FA 05 F6 | 	mov	result1, #3
1f7e0     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1f7e4                 | LR__3344
1f7e4     04 16 16 F2 | 	cmp	arg03, #4 wc
1f7e8     00 FA 05 C6 |  if_b	mov	result1, #0
1f7ec     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
1f7f0     09 01 02 F6 | 	mov	_var01, arg01
1f7f4     E0 01 06 F4 | 	bitl	_var01, #480
1f7f8     00 00 6C FF 
1f7fc     00 00 86 F1 | 	sub	_var01, ##-671088640
1f800     06 00 46 F0 | 	shr	_var01, #6
1f804     09 13 32 F9 | 	getword	arg01, arg01, #0
1f808     6E 00 00 FF 
1f80c     00 12 86 F1 | 	sub	arg01, ##56320
1f810     00 08 00 FF 
1f814     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
1f818     02 00 00 CF 
1f81c     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
1f820     00 FA 05 36 |  if_ae	mov	result1, #0
1f824     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
1f828     09 01 42 F5 | 	or	_var01, arg01
1f82c     80 00 00 FF 
1f830     00 00 06 F1 | 	add	_var01, ##65536
1f834     00 FB 01 F6 | 	mov	result1, _var01
1f838     12 FA 45 F0 | 	shr	result1, #18
1f83c     07 FA 05 F5 | 	and	result1, #7
1f840     F0 16 06 F6 | 	mov	arg03, #240
1f844     FD 16 42 F5 | 	or	arg03, result1
1f848     0A 17 42 FC | 	wrbyte	arg03, arg02
1f84c     01 14 06 F1 | 	add	arg02, #1
1f850     00 FB 01 F6 | 	mov	result1, _var01
1f854     0C FA 45 F0 | 	shr	result1, #12
1f858     3F FA 05 F5 | 	and	result1, #63
1f85c     80 16 06 F6 | 	mov	arg03, #128
1f860     FD 16 42 F5 | 	or	arg03, result1
1f864     0A 17 42 FC | 	wrbyte	arg03, arg02
1f868     01 14 06 F1 | 	add	arg02, #1
1f86c     00 FB 01 F6 | 	mov	result1, _var01
1f870     06 FA 45 F0 | 	shr	result1, #6
1f874     3F FA 05 F5 | 	and	result1, #63
1f878     80 16 06 F6 | 	mov	arg03, #128
1f87c     FD 16 42 F5 | 	or	arg03, result1
1f880     0A 17 42 FC | 	wrbyte	arg03, arg02
1f884     01 14 06 F1 | 	add	arg02, #1
1f888     3F 00 06 F5 | 	and	_var01, #63
1f88c     80 FA 05 F6 | 	mov	result1, #128
1f890     00 FB 41 F5 | 	or	result1, _var01
1f894     0A FB 41 FC | 	wrbyte	result1, arg02
1f898                 | ' 	chr = (hc | chr) + 0x10000;
1f898                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
1f898                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
1f898                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
1f898                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
1f898                 | ' 	return 4;
1f898     04 FA 05 F6 | 	mov	result1, #4
1f89c                 | _fatfs_cc_put_utf_ret
1f89c     2D 00 64 FD | 	ret
1f8a0                 | 
1f8a0                 | _fatfs_cc_sync_window
1f8a0     02 4A 05 F6 | 	mov	COUNT_, #2
1f8a4     A8 00 A0 FD | 	call	#pushregs_
1f8a8     09 1F 02 F6 | 	mov	local01, arg01
1f8ac     00 20 06 F6 | 	mov	local02, #0
1f8b0     03 1E 06 F1 | 	add	local01, #3
1f8b4     0F FB C9 FA | 	rdbyte	result1, local01 wz
1f8b8     03 1E 86 F1 | 	sub	local01, #3
1f8bc     A4 00 90 AD |  if_e	jmp	#LR__3352
1f8c0     01 1E 06 F1 | 	add	local01, #1
1f8c4     0F 13 C2 FA | 	rdbyte	arg01, local01
1f8c8     33 1E 06 F1 | 	add	local01, #51
1f8cc     0F 15 02 F6 | 	mov	arg02, local01
1f8d0     04 1E 86 F1 | 	sub	local01, #4
1f8d4     0F 17 02 FB | 	rdlong	arg03, local01
1f8d8     30 1E 86 F1 | 	sub	local01, #48
1f8dc     01 18 06 F6 | 	mov	arg04, #1
1f8e0     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
1f8e4     00 FA 0D F2 | 	cmp	result1, #0 wz
1f8e8     74 00 90 5D |  if_ne	jmp	#LR__3350
1f8ec     03 1E 06 F1 | 	add	local01, #3
1f8f0     0F 01 48 FC | 	wrbyte	#0, local01
1f8f4     2D 1E 06 F1 | 	add	local01, #45
1f8f8     0F FB 01 FB | 	rdlong	result1, local01
1f8fc     0C 1E 86 F1 | 	sub	local01, #12
1f900     0F 19 02 FB | 	rdlong	arg04, local01
1f904     0C FB 81 F1 | 	sub	result1, arg04
1f908     08 1E 86 F1 | 	sub	local01, #8
1f90c     0F 19 02 FB | 	rdlong	arg04, local01
1f910     1C 1E 86 F1 | 	sub	local01, #28
1f914     0C FB 11 F2 | 	cmp	result1, arg04 wc
1f918     48 00 90 3D |  if_ae	jmp	#LR__3351
1f91c     02 1E 06 F1 | 	add	local01, #2
1f920     0F 19 C2 FA | 	rdbyte	arg04, local01
1f924     02 1E 86 F1 | 	sub	local01, #2
1f928     02 18 0E F2 | 	cmp	arg04, #2 wz
1f92c     34 00 90 5D |  if_ne	jmp	#LR__3351
1f930     01 1E 06 F1 | 	add	local01, #1
1f934     0F 13 C2 FA | 	rdbyte	arg01, local01
1f938     33 1E 06 F1 | 	add	local01, #51
1f93c     0F 15 02 F6 | 	mov	arg02, local01
1f940     04 1E 86 F1 | 	sub	local01, #4
1f944     0F 17 02 FB | 	rdlong	arg03, local01
1f948     14 1E 86 F1 | 	sub	local01, #20
1f94c     0F 1F 02 FB | 	rdlong	local01, local01
1f950     0F 17 02 F1 | 	add	arg03, local01
1f954     01 18 06 F6 | 	mov	arg04, #1
1f958     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
1f95c     04 00 90 FD | 	jmp	#LR__3351
1f960                 | LR__3350
1f960     01 20 06 F6 | 	mov	local02, #1
1f964                 | LR__3351
1f964                 | LR__3352
1f964                 | ' 			res = FR_DISK_ERR;
1f964                 | ' 		}
1f964                 | ' 	}
1f964                 | ' 	return res;
1f964     10 FB 01 F6 | 	mov	result1, local02
1f968     A7 F0 03 F6 | 	mov	ptra, fp
1f96c     B2 00 A0 FD | 	call	#popregs_
1f970                 | _fatfs_cc_sync_window_ret
1f970     2D 00 64 FD | 	ret
1f974                 | 
1f974                 | _fatfs_cc_move_window
1f974     03 4A 05 F6 | 	mov	COUNT_, #3
1f978     A8 00 A0 FD | 	call	#pushregs_
1f97c     09 1F 02 F6 | 	mov	local01, arg01
1f980     0A 21 02 F6 | 	mov	local02, arg02
1f984     00 22 06 F6 | 	mov	local03, #0
1f988     30 1E 06 F1 | 	add	local01, #48
1f98c     0F 19 02 FB | 	rdlong	arg04, local01
1f990     30 1E 86 F1 | 	sub	local01, #48
1f994     0C 21 0A F2 | 	cmp	local02, arg04 wz
1f998     40 00 90 AD |  if_e	jmp	#LR__3361
1f99c     0F 13 02 F6 | 	mov	arg01, local01
1f9a0     FC FE BF FD | 	call	#_fatfs_cc_sync_window
1f9a4     FD 22 0A F6 | 	mov	local03, result1 wz
1f9a8     30 00 90 5D |  if_ne	jmp	#LR__3360
1f9ac     01 1E 06 F1 | 	add	local01, #1
1f9b0     0F 13 C2 FA | 	rdbyte	arg01, local01
1f9b4     33 1E 06 F1 | 	add	local01, #51
1f9b8     0F 15 02 F6 | 	mov	arg02, local01
1f9bc     10 17 02 F6 | 	mov	arg03, local02
1f9c0     01 18 06 F6 | 	mov	arg04, #1
1f9c4     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
1f9c8     00 FA 0D F2 | 	cmp	result1, #0 wz
1f9cc     01 20 66 56 |  if_ne	neg	local02, #1
1f9d0     01 22 06 56 |  if_ne	mov	local03, #1
1f9d4     04 1E 86 F1 | 	sub	local01, #4
1f9d8     0F 21 62 FC | 	wrlong	local02, local01
1f9dc                 | LR__3360
1f9dc                 | LR__3361
1f9dc                 | ' 				sect = (LBA_t)0 - 1;
1f9dc                 | ' 				res = FR_DISK_ERR;
1f9dc                 | ' 			}
1f9dc                 | ' 			fs->winsect = sect;
1f9dc                 | ' 		}
1f9dc                 | ' 	}
1f9dc                 | ' 	return res;
1f9dc     11 FB 01 F6 | 	mov	result1, local03
1f9e0     A7 F0 03 F6 | 	mov	ptra, fp
1f9e4     B2 00 A0 FD | 	call	#popregs_
1f9e8                 | _fatfs_cc_move_window_ret
1f9e8     2D 00 64 FD | 	ret
1f9ec                 | 
1f9ec                 | _fatfs_cc_sync_fs
1f9ec     02 4A 05 F6 | 	mov	COUNT_, #2
1f9f0     A8 00 A0 FD | 	call	#pushregs_
1f9f4     09 1F 02 F6 | 	mov	local01, arg01
1f9f8     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
1f9fc     FD 20 0A F6 | 	mov	local02, result1 wz
1fa00     D8 00 90 5D |  if_ne	jmp	#LR__3371
1fa04     0F 19 C2 FA | 	rdbyte	arg04, local01
1fa08     03 18 0E F2 | 	cmp	arg04, #3 wz
1fa0c     04 1E 06 A1 |  if_e	add	local01, #4
1fa10     0F 19 C2 AA |  if_e	rdbyte	arg04, local01
1fa14     04 1E 86 A1 |  if_e	sub	local01, #4
1fa18     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
1fa1c     A0 00 90 5D |  if_ne	jmp	#LR__3370
1fa20     34 1E 06 F1 | 	add	local01, #52
1fa24     0F 13 02 F6 | 	mov	arg01, local01
1fa28     00 14 06 F6 | 	mov	arg02, #0
1fa2c     09 16 C6 F9 | 	decod	arg03, #9
1fa30     98 00 A0 FD | 	call	#\builtin_bytefill_
1fa34     0F 13 02 F6 | 	mov	arg01, local01
1fa38     FE 13 06 F1 | 	add	arg01, #510
1fa3c     55 00 80 FF 
1fa40     09 AB 58 FC | 	wrword	##43605, arg01
1fa44     A9 B0 A0 FF 
1fa48     0F A5 68 FC | 	wrlong	##1096897106, local01
1fa4c     0F 13 02 F6 | 	mov	arg01, local01
1fa50     E4 13 06 F1 | 	add	arg01, #484
1fa54     B9 A0 B0 FF 
1fa58     09 E5 68 FC | 	wrlong	##1631679090, arg01
1fa5c     0F 13 02 F6 | 	mov	arg01, local01
1fa60     E8 13 06 F1 | 	add	arg01, #488
1fa64     20 1E 86 F1 | 	sub	local01, #32
1fa68     0F 15 02 FB | 	rdlong	arg02, local01
1fa6c     09 15 62 FC | 	wrlong	arg02, arg01
1fa70     20 1E 06 F1 | 	add	local01, #32
1fa74     0F 13 02 F6 | 	mov	arg01, local01
1fa78     EC 13 06 F1 | 	add	arg01, #492
1fa7c     24 1E 86 F1 | 	sub	local01, #36
1fa80     0F 15 02 FB | 	rdlong	arg02, local01
1fa84     09 15 62 FC | 	wrlong	arg02, arg01
1fa88     10 1E 06 F1 | 	add	local01, #16
1fa8c     0F 17 02 FB | 	rdlong	arg03, local01
1fa90     01 16 06 F1 | 	add	arg03, #1
1fa94     10 1E 06 F1 | 	add	local01, #16
1fa98     0F 17 62 FC | 	wrlong	arg03, local01
1fa9c     2F 1E 86 F1 | 	sub	local01, #47
1faa0     0F 13 C2 FA | 	rdbyte	arg01, local01
1faa4     33 1E 06 F1 | 	add	local01, #51
1faa8     0F 15 02 F6 | 	mov	arg02, local01
1faac     01 18 06 F6 | 	mov	arg04, #1
1fab0     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
1fab4     30 1E 86 F1 | 	sub	local01, #48
1fab8     0F 01 48 FC | 	wrbyte	#0, local01
1fabc     04 1E 86 F1 | 	sub	local01, #4
1fac0                 | LR__3370
1fac0     01 1E 06 F1 | 	add	local01, #1
1fac4     0F 13 C2 FA | 	rdbyte	arg01, local01
1fac8     00 14 06 F6 | 	mov	arg02, #0
1facc     00 16 06 F6 | 	mov	arg03, #0
1fad0     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
1fad4     00 FA 0D F2 | 	cmp	result1, #0 wz
1fad8     01 20 06 56 |  if_ne	mov	local02, #1
1fadc                 | LR__3371
1fadc                 | ' 	}
1fadc                 | ' 
1fadc                 | ' 	return res;
1fadc     10 FB 01 F6 | 	mov	result1, local02
1fae0     A7 F0 03 F6 | 	mov	ptra, fp
1fae4     B2 00 A0 FD | 	call	#popregs_
1fae8                 | _fatfs_cc_sync_fs_ret
1fae8     2D 00 64 FD | 	ret
1faec                 | 
1faec                 | _fatfs_cc_clst2sect
1faec     02 14 86 F1 | 	sub	arg02, #2
1faf0     18 12 06 F1 | 	add	arg01, #24
1faf4     09 01 02 FB | 	rdlong	_var01, arg01
1faf8     18 12 86 F1 | 	sub	arg01, #24
1fafc     02 00 86 F1 | 	sub	_var01, #2
1fb00     00 15 12 F2 | 	cmp	arg02, _var01 wc
1fb04     00 FA 05 36 |  if_ae	mov	result1, #0
1fb08     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
1fb0c     0A 12 06 F1 | 	add	arg01, #10
1fb10     09 01 E2 FA | 	rdword	_var01, arg01
1fb14     0A 01 02 FD | 	qmul	_var01, arg02
1fb18                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
1fb18     22 12 06 F1 | 	add	arg01, #34
1fb1c     09 FB 01 FB | 	rdlong	result1, arg01
1fb20     18 00 62 FD | 	getqx	_var01
1fb24     00 FB 01 F1 | 	add	result1, _var01
1fb28                 | _fatfs_cc_clst2sect_ret
1fb28     2D 00 64 FD | 	ret
1fb2c                 | 
1fb2c                 | _fatfs_cc_get_fat
1fb2c     07 4A 05 F6 | 	mov	COUNT_, #7
1fb30     A8 00 A0 FD | 	call	#pushregs_
1fb34     0A 1F 02 F6 | 	mov	local01, arg02
1fb38     09 21 02 FB | 	rdlong	local02, arg01
1fb3c     02 1E 16 F2 | 	cmp	local01, #2 wc
1fb40     14 00 90 CD |  if_b	jmp	#LR__3380
1fb44     18 20 06 F1 | 	add	local02, #24
1fb48     10 23 02 FB | 	rdlong	local03, local02
1fb4c     18 20 86 F1 | 	sub	local02, #24
1fb50     11 1F 12 F2 | 	cmp	local01, local03 wc
1fb54     08 00 90 CD |  if_b	jmp	#LR__3381
1fb58                 | LR__3380
1fb58     01 24 06 F6 | 	mov	local04, #1
1fb5c     60 01 90 FD | 	jmp	#LR__3388
1fb60                 | LR__3381
1fb60     01 24 66 F6 | 	neg	local04, #1
1fb64                 | ' 		val = 0xFFFFFFFF;
1fb64                 | ' 
1fb64                 | ' 		switch (fs->fs_type) {
1fb64     10 27 C2 FA | 	rdbyte	local05, local02
1fb68     01 26 86 F1 | 	sub	local05, #1
1fb6c     03 26 26 F3 | 	fle	local05, #3
1fb70     30 26 62 FD | 	jmprel	local05
1fb74                 | LR__3382
1fb74     0C 00 90 FD | 	jmp	#LR__3383
1fb78     B8 00 90 FD | 	jmp	#LR__3384
1fb7c     F8 00 90 FD | 	jmp	#LR__3385
1fb80     38 01 90 FD | 	jmp	#LR__3386
1fb84                 | LR__3383
1fb84     0F 27 02 F6 | 	mov	local05, local01
1fb88     0F 13 02 F6 | 	mov	arg01, local01
1fb8c     01 12 46 F0 | 	shr	arg01, #1
1fb90     09 27 02 F1 | 	add	local05, arg01
1fb94     10 13 02 F6 | 	mov	arg01, local02
1fb98     13 29 02 F6 | 	mov	local06, local05
1fb9c     09 28 46 F0 | 	shr	local06, #9
1fba0     24 20 06 F1 | 	add	local02, #36
1fba4     10 15 02 FB | 	rdlong	arg02, local02
1fba8     24 20 86 F1 | 	sub	local02, #36
1fbac     14 15 02 F1 | 	add	arg02, local06
1fbb0     C0 FD BF FD | 	call	#_fatfs_cc_move_window
1fbb4     00 FA 0D F2 | 	cmp	result1, #0 wz
1fbb8     04 01 90 5D |  if_ne	jmp	#LR__3387
1fbbc     13 29 02 F6 | 	mov	local06, local05
1fbc0     FF 29 06 F5 | 	and	local06, #511
1fbc4     34 20 06 F1 | 	add	local02, #52
1fbc8     10 29 02 F1 | 	add	local06, local02
1fbcc     14 2B C2 FA | 	rdbyte	local07, local06
1fbd0     34 20 86 F1 | 	sub	local02, #52
1fbd4     10 13 02 F6 | 	mov	arg01, local02
1fbd8     01 26 06 F1 | 	add	local05, #1
1fbdc     13 29 02 F6 | 	mov	local06, local05
1fbe0     09 28 46 F0 | 	shr	local06, #9
1fbe4     24 20 06 F1 | 	add	local02, #36
1fbe8     10 15 02 FB | 	rdlong	arg02, local02
1fbec     24 20 86 F1 | 	sub	local02, #36
1fbf0     14 15 02 F1 | 	add	arg02, local06
1fbf4     7C FD BF FD | 	call	#_fatfs_cc_move_window
1fbf8     00 FA 0D F2 | 	cmp	result1, #0 wz
1fbfc     C0 00 90 5D |  if_ne	jmp	#LR__3387
1fc00     FF 27 06 F5 | 	and	local05, #511
1fc04     34 20 06 F1 | 	add	local02, #52
1fc08     10 27 02 F1 | 	add	local05, local02
1fc0c     13 29 C2 FA | 	rdbyte	local06, local05
1fc10     08 28 66 F0 | 	shl	local06, #8
1fc14     14 2B 42 F5 | 	or	local07, local06
1fc18     01 1E CE F7 | 	test	local01, #1 wz
1fc1c     04 2A 46 50 |  if_ne	shr	local07, #4
1fc20     15 23 02 56 |  if_ne	mov	local03, local07
1fc24     0B 2A 46 A7 |  if_e	zerox	local07, #11
1fc28     15 23 02 A6 |  if_e	mov	local03, local07
1fc2c     11 25 02 F6 | 	mov	local04, local03
1fc30                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
1fc30                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
1fc30                 | ' 			break;
1fc30     8C 00 90 FD | 	jmp	#LR__3387
1fc34                 | LR__3384
1fc34     10 13 02 F6 | 	mov	arg01, local02
1fc38     0F 29 02 F6 | 	mov	local06, local01
1fc3c     08 28 46 F0 | 	shr	local06, #8
1fc40     24 20 06 F1 | 	add	local02, #36
1fc44     10 15 02 FB | 	rdlong	arg02, local02
1fc48     24 20 86 F1 | 	sub	local02, #36
1fc4c     14 15 02 F1 | 	add	arg02, local06
1fc50     20 FD BF FD | 	call	#_fatfs_cc_move_window
1fc54     00 FA 0D F2 | 	cmp	result1, #0 wz
1fc58     64 00 90 5D |  if_ne	jmp	#LR__3387
1fc5c     34 20 06 F1 | 	add	local02, #52
1fc60     01 1E 66 F0 | 	shl	local01, #1
1fc64     FF 1F 06 F5 | 	and	local01, #511
1fc68     0F 21 02 F1 | 	add	local02, local01
1fc6c                 | ' {
1fc6c                 | ' 
1fc6c                 | ' 	return *((WORD*)ptr);
1fc6c     10 FB E1 FA | 	rdword	result1, local02
1fc70     FD 24 32 F9 | 	getword	local04, result1, #0
1fc74                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
1fc74                 | ' 			break;
1fc74     48 00 90 FD | 	jmp	#LR__3387
1fc78                 | LR__3385
1fc78     10 13 02 F6 | 	mov	arg01, local02
1fc7c     0F 29 02 F6 | 	mov	local06, local01
1fc80     07 28 46 F0 | 	shr	local06, #7
1fc84     24 20 06 F1 | 	add	local02, #36
1fc88     10 15 02 FB | 	rdlong	arg02, local02
1fc8c     24 20 86 F1 | 	sub	local02, #36
1fc90     14 15 02 F1 | 	add	arg02, local06
1fc94     DC FC BF FD | 	call	#_fatfs_cc_move_window
1fc98     00 FA 0D F2 | 	cmp	result1, #0 wz
1fc9c     20 00 90 5D |  if_ne	jmp	#LR__3387
1fca0     34 20 06 F1 | 	add	local02, #52
1fca4     02 1E 66 F0 | 	shl	local01, #2
1fca8     FF 1F 06 F5 | 	and	local01, #511
1fcac     0F 21 02 F1 | 	add	local02, local01
1fcb0                 | ' {
1fcb0                 | ' 
1fcb0                 | ' 	return *((DWORD*)ptr);
1fcb0     10 25 02 FB | 	rdlong	local04, local02
1fcb4     7C 24 06 F4 | 	bitl	local04, #124
1fcb8                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
1fcb8                 | ' 			break;
1fcb8     04 00 90 FD | 	jmp	#LR__3387
1fcbc                 | LR__3386
1fcbc     01 24 06 F6 | 	mov	local04, #1
1fcc0                 | LR__3387
1fcc0                 | LR__3388
1fcc0                 | ' 			val = 1;
1fcc0                 | ' 		}
1fcc0                 | ' 	}
1fcc0                 | ' 
1fcc0                 | ' 	return val;
1fcc0     12 FB 01 F6 | 	mov	result1, local04
1fcc4     A7 F0 03 F6 | 	mov	ptra, fp
1fcc8     B2 00 A0 FD | 	call	#popregs_
1fccc                 | _fatfs_cc_get_fat_ret
1fccc     2D 00 64 FD | 	ret
1fcd0                 | 
1fcd0                 | _fatfs_cc_put_fat
1fcd0     08 4A 05 F6 | 	mov	COUNT_, #8
1fcd4     A8 00 A0 FD | 	call	#pushregs_
1fcd8     09 1F 02 F6 | 	mov	local01, arg01
1fcdc     0A 21 02 F6 | 	mov	local02, arg02
1fce0     0B 23 02 F6 | 	mov	local03, arg03
1fce4     02 24 06 F6 | 	mov	local04, #2
1fce8     02 20 16 F2 | 	cmp	local02, #2 wc
1fcec     E0 01 90 CD |  if_b	jmp	#LR__3397
1fcf0     18 1E 06 F1 | 	add	local01, #24
1fcf4     0F 27 02 FB | 	rdlong	local05, local01
1fcf8     18 1E 86 F1 | 	sub	local01, #24
1fcfc     13 21 12 F2 | 	cmp	local02, local05 wc
1fd00     CC 01 90 3D |  if_ae	jmp	#LR__3397
1fd04                 | ' 		switch (fs->fs_type) {
1fd04     0F 29 C2 FA | 	rdbyte	local06, local01
1fd08     01 28 86 F1 | 	sub	local06, #1
1fd0c     03 28 26 F3 | 	fle	local06, #3
1fd10     30 28 62 FD | 	jmprel	local06
1fd14                 | LR__3390
1fd14     0C 00 90 FD | 	jmp	#LR__3391
1fd18     F8 00 90 FD | 	jmp	#LR__3394
1fd1c     40 01 90 FD | 	jmp	#LR__3395
1fd20     AC 01 90 FD | 	jmp	#LR__3396
1fd24                 | LR__3391
1fd24     10 2B 02 F6 | 	mov	local07, local02
1fd28     10 27 02 F6 | 	mov	local05, local02
1fd2c     01 26 46 F0 | 	shr	local05, #1
1fd30     13 2B 02 F1 | 	add	local07, local05
1fd34     0F 13 02 F6 | 	mov	arg01, local01
1fd38     15 29 02 F6 | 	mov	local06, local07
1fd3c     09 28 46 F0 | 	shr	local06, #9
1fd40     24 1E 06 F1 | 	add	local01, #36
1fd44     0F 15 02 FB | 	rdlong	arg02, local01
1fd48     24 1E 86 F1 | 	sub	local01, #36
1fd4c     14 15 02 F1 | 	add	arg02, local06
1fd50     20 FC BF FD | 	call	#_fatfs_cc_move_window
1fd54     FD 24 0A F6 | 	mov	local04, result1 wz
1fd58     74 01 90 5D |  if_ne	jmp	#LR__3396
1fd5c     34 1E 06 F1 | 	add	local01, #52
1fd60     0F 2D 02 F6 | 	mov	local08, local01
1fd64     15 27 02 F6 | 	mov	local05, local07
1fd68     FF 27 06 F5 | 	and	local05, #511
1fd6c     13 2D 02 F1 | 	add	local08, local05
1fd70     01 20 CE F7 | 	test	local02, #1 wz
1fd74     34 1E 86 F1 | 	sub	local01, #52
1fd78     01 2A 06 F1 | 	add	local07, #1
1fd7c     18 00 90 AD |  if_e	jmp	#LR__3392
1fd80     16 27 C2 FA | 	rdbyte	local05, local08
1fd84     13 27 42 F8 | 	getnib	local05, local05, #0
1fd88     11 29 E2 F8 | 	getbyte	local06, local03, #0
1fd8c     04 28 66 F0 | 	shl	local06, #4
1fd90     14 27 42 F5 | 	or	local05, local06
1fd94     04 00 90 FD | 	jmp	#LR__3393
1fd98                 | LR__3392
1fd98     11 27 02 F6 | 	mov	local05, local03
1fd9c                 | LR__3393
1fd9c     16 27 42 FC | 	wrbyte	local05, local08
1fda0     03 1E 06 F1 | 	add	local01, #3
1fda4     0F 03 48 FC | 	wrbyte	#1, local01
1fda8     03 1E 86 F1 | 	sub	local01, #3
1fdac     0F 13 02 F6 | 	mov	arg01, local01
1fdb0     15 2D 02 F6 | 	mov	local08, local07
1fdb4     09 2C 46 F0 | 	shr	local08, #9
1fdb8     24 1E 06 F1 | 	add	local01, #36
1fdbc     0F 15 02 FB | 	rdlong	arg02, local01
1fdc0     24 1E 86 F1 | 	sub	local01, #36
1fdc4     16 15 02 F1 | 	add	arg02, local08
1fdc8     A8 FB BF FD | 	call	#_fatfs_cc_move_window
1fdcc     FD 24 0A F6 | 	mov	local04, result1 wz
1fdd0     FC 00 90 5D |  if_ne	jmp	#LR__3396
1fdd4     34 1E 06 F1 | 	add	local01, #52
1fdd8     0F 2D 02 F6 | 	mov	local08, local01
1fddc     FF 2B 06 F5 | 	and	local07, #511
1fde0     15 2D 02 F1 | 	add	local08, local07
1fde4     01 20 CE F7 | 	test	local02, #1 wz
1fde8     04 22 46 50 |  if_ne	shr	local03, #4
1fdec     11 27 02 56 |  if_ne	mov	local05, local03
1fdf0     16 27 C2 AA |  if_e	rdbyte	local05, local08
1fdf4     F0 26 06 A5 |  if_e	and	local05, #240
1fdf8     11 23 EA A8 |  if_e	getbyte	local03, local03, #1
1fdfc     11 23 42 A8 |  if_e	getnib	local03, local03, #0
1fe00     11 27 42 A5 |  if_e	or	local05, local03
1fe04     16 27 42 FC | 	wrbyte	local05, local08
1fe08     31 1E 86 F1 | 	sub	local01, #49
1fe0c     0F 03 48 FC | 	wrbyte	#1, local01
1fe10                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
1fe10                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
1fe10                 | ' 			fs->wflag = 1;
1fe10                 | ' 			break;
1fe10     BC 00 90 FD | 	jmp	#LR__3396
1fe14                 | LR__3394
1fe14     0F 13 02 F6 | 	mov	arg01, local01
1fe18     10 2D 02 F6 | 	mov	local08, local02
1fe1c     08 2C 46 F0 | 	shr	local08, #8
1fe20     24 1E 06 F1 | 	add	local01, #36
1fe24     0F 15 02 FB | 	rdlong	arg02, local01
1fe28     24 1E 86 F1 | 	sub	local01, #36
1fe2c     16 15 02 F1 | 	add	arg02, local08
1fe30     40 FB BF FD | 	call	#_fatfs_cc_move_window
1fe34     FD 24 0A F6 | 	mov	local04, result1 wz
1fe38     94 00 90 5D |  if_ne	jmp	#LR__3396
1fe3c     34 1E 06 F1 | 	add	local01, #52
1fe40     0F 13 02 F6 | 	mov	arg01, local01
1fe44     01 20 66 F0 | 	shl	local02, #1
1fe48     FF 21 06 F5 | 	and	local02, #511
1fe4c     10 13 02 F1 | 	add	arg01, local02
1fe50     09 23 52 FC | 	wrword	local03, arg01
1fe54     31 1E 86 F1 | 	sub	local01, #49
1fe58     0F 03 48 FC | 	wrbyte	#1, local01
1fe5c                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
1fe5c                 | ' 			fs->wflag = 1;
1fe5c                 | ' 			break;
1fe5c     70 00 90 FD | 	jmp	#LR__3396
1fe60                 | LR__3395
1fe60     0F 13 02 F6 | 	mov	arg01, local01
1fe64     10 2D 02 F6 | 	mov	local08, local02
1fe68     07 2C 46 F0 | 	shr	local08, #7
1fe6c     24 1E 06 F1 | 	add	local01, #36
1fe70     0F 15 02 FB | 	rdlong	arg02, local01
1fe74     24 1E 86 F1 | 	sub	local01, #36
1fe78     16 15 02 F1 | 	add	arg02, local08
1fe7c     F4 FA BF FD | 	call	#_fatfs_cc_move_window
1fe80     FD 24 0A F6 | 	mov	local04, result1 wz
1fe84     48 00 90 5D |  if_ne	jmp	#LR__3396
1fe88     7C 22 06 F4 | 	bitl	local03, #124
1fe8c     34 1E 06 F1 | 	add	local01, #52
1fe90     10 2D 02 F6 | 	mov	local08, local02
1fe94     02 2C 66 F0 | 	shl	local08, #2
1fe98     FF 2D 06 F5 | 	and	local08, #511
1fe9c     0F 13 02 F6 | 	mov	arg01, local01
1fea0     16 13 02 F1 | 	add	arg01, local08
1fea4                 | ' {
1fea4                 | ' 
1fea4                 | ' 	return *((DWORD*)ptr);
1fea4     09 2D 02 FB | 	rdlong	local08, arg01
1fea8     00 00 78 FF 
1feac     00 2C 06 F5 | 	and	local08, ##-268435456
1feb0     16 23 42 F5 | 	or	local03, local08
1feb4     0F 13 02 F6 | 	mov	arg01, local01
1feb8     02 20 66 F0 | 	shl	local02, #2
1febc     FF 21 06 F5 | 	and	local02, #511
1fec0     10 13 02 F1 | 	add	arg01, local02
1fec4     09 23 62 FC | 	wrlong	local03, arg01
1fec8     31 1E 86 F1 | 	sub	local01, #49
1fecc     0F 03 48 FC | 	wrbyte	#1, local01
1fed0                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
1fed0                 | ' 			}
1fed0                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
1fed0                 | ' 			fs->wflag = 1;
1fed0                 | ' 			break;
1fed0                 | LR__3396
1fed0                 | LR__3397
1fed0                 | ' 		}
1fed0                 | ' 	}
1fed0                 | ' 	return res;
1fed0     12 FB 01 F6 | 	mov	result1, local04
1fed4     A7 F0 03 F6 | 	mov	ptra, fp
1fed8     B2 00 A0 FD | 	call	#popregs_
1fedc                 | _fatfs_cc_put_fat_ret
1fedc     2D 00 64 FD | 	ret
1fee0                 | 
1fee0                 | _fatfs_cc_remove_chain
1fee0     05 4A 05 F6 | 	mov	COUNT_, #5
1fee4     A8 00 A0 FD | 	call	#pushregs_
1fee8     09 1F 02 F6 | 	mov	local01, arg01
1feec     0A 21 02 F6 | 	mov	local02, arg02
1fef0     0B 23 02 F6 | 	mov	local03, arg03
1fef4     0F 25 02 FB | 	rdlong	local04, local01
1fef8     02 20 16 F2 | 	cmp	local02, #2 wc
1fefc     14 00 90 CD |  if_b	jmp	#LR__3400
1ff00     18 24 06 F1 | 	add	local04, #24
1ff04     12 FB 01 FB | 	rdlong	result1, local04
1ff08     18 24 86 F1 | 	sub	local04, #24
1ff0c     FD 20 12 F2 | 	cmp	local02, result1 wc
1ff10     08 00 90 CD |  if_b	jmp	#LR__3401
1ff14                 | LR__3400
1ff14     02 FA 05 F6 | 	mov	result1, #2
1ff18     CC 00 90 FD | 	jmp	#LR__3406
1ff1c                 | LR__3401
1ff1c     00 22 0E F2 | 	cmp	local03, #0 wz
1ff20     18 00 90 AD |  if_e	jmp	#LR__3402
1ff24     11 15 02 F6 | 	mov	arg02, local03
1ff28     12 13 02 F6 | 	mov	arg01, local04
1ff2c     01 16 66 F6 | 	neg	arg03, #1
1ff30     9C FD BF FD | 	call	#_fatfs_cc_put_fat
1ff34     00 FA 0D F2 | 	cmp	result1, #0 wz
1ff38     AC 00 90 5D |  if_ne	jmp	#LR__3406
1ff3c                 | LR__3402
1ff3c                 | ' 	}
1ff3c                 | ' 
1ff3c                 | ' 
1ff3c                 | ' 	do {
1ff3c                 | LR__3403
1ff3c     10 15 02 F6 | 	mov	arg02, local02
1ff40     0F 13 02 F6 | 	mov	arg01, local01
1ff44     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
1ff48     FD 26 0A F6 | 	mov	local05, result1 wz
1ff4c     94 00 90 AD |  if_e	jmp	#LR__3405
1ff50     01 26 0E F2 | 	cmp	local05, #1 wz
1ff54     02 FA 05 A6 |  if_e	mov	result1, #2
1ff58     8C 00 90 AD |  if_e	jmp	#LR__3406
1ff5c     FF FF 7F FF 
1ff60     FF 27 0E F2 | 	cmp	local05, ##-1 wz
1ff64     01 FA 05 A6 |  if_e	mov	result1, #1
1ff68     7C 00 90 AD |  if_e	jmp	#LR__3406
1ff6c     10 15 02 F6 | 	mov	arg02, local02
1ff70     12 13 02 F6 | 	mov	arg01, local04
1ff74     00 16 06 F6 | 	mov	arg03, #0
1ff78     54 FD BF FD | 	call	#_fatfs_cc_put_fat
1ff7c     FD 22 0A F6 | 	mov	local03, result1 wz
1ff80     11 FB 01 56 |  if_ne	mov	result1, local03
1ff84     60 00 90 5D |  if_ne	jmp	#LR__3406
1ff88     18 24 06 F1 | 	add	local04, #24
1ff8c     12 23 02 FB | 	rdlong	local03, local04
1ff90     02 22 86 F1 | 	sub	local03, #2
1ff94     04 24 86 F1 | 	sub	local04, #4
1ff98     12 21 02 FB | 	rdlong	local02, local04
1ff9c     14 24 86 F1 | 	sub	local04, #20
1ffa0     11 21 12 F2 | 	cmp	local02, local03 wc
1ffa4     24 00 90 3D |  if_ae	jmp	#LR__3404
1ffa8     14 24 06 F1 | 	add	local04, #20
1ffac     12 23 02 FB | 	rdlong	local03, local04
1ffb0     01 22 06 F1 | 	add	local03, #1
1ffb4     12 23 62 FC | 	wrlong	local03, local04
1ffb8     10 24 86 F1 | 	sub	local04, #16
1ffbc     12 23 C2 FA | 	rdbyte	local03, local04
1ffc0     01 22 46 F5 | 	or	local03, #1
1ffc4     12 23 42 FC | 	wrbyte	local03, local04
1ffc8     04 24 86 F1 | 	sub	local04, #4
1ffcc                 | LR__3404
1ffcc     13 21 02 F6 | 	mov	local02, local05
1ffd0     18 24 06 F1 | 	add	local04, #24
1ffd4     12 27 02 FB | 	rdlong	local05, local04
1ffd8     18 24 86 F1 | 	sub	local04, #24
1ffdc     13 21 12 F2 | 	cmp	local02, local05 wc
1ffe0     58 FF 9F CD |  if_b	jmp	#LR__3403
1ffe4                 | LR__3405
1ffe4                 | ' #line 1500 "ff.c"
1ffe4                 | ' 	return FR_OK;
1ffe4     00 FA 05 F6 | 	mov	result1, #0
1ffe8                 | LR__3406
1ffe8     A7 F0 03 F6 | 	mov	ptra, fp
1ffec     B2 00 A0 FD | 	call	#popregs_
1fff0                 | _fatfs_cc_remove_chain_ret
1fff0     2D 00 64 FD | 	ret
1fff4                 | 
1fff4                 | _fatfs_cc_create_chain
1fff4     09 4A 05 F6 | 	mov	COUNT_, #9
1fff8     A8 00 A0 FD | 	call	#pushregs_
1fffc     09 1F 02 F6 | 	mov	local01, arg01
20000     0A 21 0A F6 | 	mov	local02, arg02 wz
20004     0F 23 02 FB | 	rdlong	local03, local01
20008     28 00 90 5D |  if_ne	jmp	#LR__3410
2000c     10 22 06 F1 | 	add	local03, #16
20010     11 25 0A FB | 	rdlong	local04, local03 wz
20014     10 22 86 F1 | 	sub	local03, #16
20018     18 22 06 51 |  if_ne	add	local03, #24
2001c     11 27 02 5B |  if_ne	rdlong	local05, local03
20020     18 22 86 51 |  if_ne	sub	local03, #24
20024     13 25 12 52 |  if_ne	cmp	local04, local05 wc
20028     50 00 90 4D |  if_c_and_nz	jmp	#LR__3411
2002c     01 24 06 F6 | 	mov	local04, #1
20030     48 00 90 FD | 	jmp	#LR__3411
20034                 | LR__3410
20034     10 15 02 F6 | 	mov	arg02, local02
20038     0F 13 02 F6 | 	mov	arg01, local01
2003c     EC FA BF FD | 	call	#_fatfs_cc_get_fat
20040     FD 24 02 F6 | 	mov	local04, result1
20044     02 24 16 F2 | 	cmp	local04, #2 wc
20048     01 FA 05 C6 |  if_b	mov	result1, #1
2004c     BC 01 90 CD |  if_b	jmp	#LR__3421
20050     FF FF 7F FF 
20054     FF 25 0E F2 | 	cmp	local04, ##-1 wz
20058     12 FB 01 A6 |  if_e	mov	result1, local04
2005c     AC 01 90 AD |  if_e	jmp	#LR__3421
20060     18 22 06 F1 | 	add	local03, #24
20064     11 27 02 FB | 	rdlong	local05, local03
20068     18 22 86 F1 | 	sub	local03, #24
2006c     13 25 12 F2 | 	cmp	local04, local05 wc
20070     12 FB 01 C6 |  if_b	mov	result1, local04
20074     94 01 90 CD |  if_b	jmp	#LR__3421
20078     10 25 02 F6 | 	mov	local04, local02
2007c                 | LR__3411
2007c     14 22 06 F1 | 	add	local03, #20
20080     11 27 0A FB | 	rdlong	local05, local03 wz
20084     14 22 86 F1 | 	sub	local03, #20
20088     00 FA 05 A6 |  if_e	mov	result1, #0
2008c     7C 01 90 AD |  if_e	jmp	#LR__3421
20090     00 28 06 F6 | 	mov	local06, #0
20094     10 25 0A F2 | 	cmp	local04, local02 wz
20098     74 00 90 5D |  if_ne	jmp	#LR__3414
2009c     12 29 02 F6 | 	mov	local06, local04
200a0     01 28 06 F1 | 	add	local06, #1
200a4     18 22 06 F1 | 	add	local03, #24
200a8     11 27 02 FB | 	rdlong	local05, local03
200ac     18 22 86 F1 | 	sub	local03, #24
200b0     13 29 12 F2 | 	cmp	local06, local05 wc
200b4     02 28 06 36 |  if_ae	mov	local06, #2
200b8     14 15 02 F6 | 	mov	arg02, local06
200bc     0F 13 02 F6 | 	mov	arg01, local01
200c0     68 FA BF FD | 	call	#_fatfs_cc_get_fat
200c4     FD 26 02 F6 | 	mov	local05, result1
200c8     01 26 0E F2 | 	cmp	local05, #1 wz
200cc     FF FF 7F 5F 
200d0     FF 27 0E 52 |  if_ne	cmp	local05, ##-1 wz
200d4     13 FB 01 A6 |  if_e	mov	result1, local05
200d8     30 01 90 AD |  if_e	jmp	#LR__3421
200dc     00 26 0E F2 | 	cmp	local05, #0 wz
200e0     2C 00 90 AD |  if_e	jmp	#LR__3413
200e4     10 22 06 F1 | 	add	local03, #16
200e8     11 2B 02 FB | 	rdlong	local07, local03
200ec     10 22 86 F1 | 	sub	local03, #16
200f0     02 2A 16 F2 | 	cmp	local07, #2 wc
200f4     14 00 90 CD |  if_b	jmp	#LR__3412
200f8     18 22 06 F1 | 	add	local03, #24
200fc     11 27 02 FB | 	rdlong	local05, local03
20100     18 22 86 F1 | 	sub	local03, #24
20104     13 2B 12 F2 | 	cmp	local07, local05 wc
20108     15 25 02 C6 |  if_b	mov	local04, local07
2010c                 | LR__3412
2010c     00 28 06 F6 | 	mov	local06, #0
20110                 | LR__3413
20110                 | LR__3414
20110     00 28 0E F2 | 	cmp	local06, #0 wz
20114     60 00 90 5D |  if_ne	jmp	#LR__3417
20118     12 29 02 F6 | 	mov	local06, local04
2011c                 | ' 			ncl = scl;
2011c                 | ' 			for (;;) {
2011c                 | LR__3415
2011c     01 28 06 F1 | 	add	local06, #1
20120     18 22 06 F1 | 	add	local03, #24
20124     11 27 02 FB | 	rdlong	local05, local03
20128     18 22 86 F1 | 	sub	local03, #24
2012c     13 29 12 F2 | 	cmp	local06, local05 wc
20130     02 28 06 36 |  if_ae	mov	local06, #2
20134     12 29 1A 32 |  if_ae	cmp	local06, local04 wcz
20138     00 FA 05 16 |  if_a	mov	result1, #0
2013c     CC 00 90 1D |  if_a	jmp	#LR__3421
20140     14 15 02 F6 | 	mov	arg02, local06
20144     0F 13 02 F6 | 	mov	arg01, local01
20148     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
2014c     FD 2A 0A F6 | 	mov	local07, result1 wz
20150     24 00 90 AD |  if_e	jmp	#LR__3416
20154     01 2A 0E F2 | 	cmp	local07, #1 wz
20158     FF FF 7F 5F 
2015c     FF 2B 0E 52 |  if_ne	cmp	local07, ##-1 wz
20160     15 FB 01 A6 |  if_e	mov	result1, local07
20164     A4 00 90 AD |  if_e	jmp	#LR__3421
20168     12 29 0A F2 | 	cmp	local06, local04 wz
2016c     00 FA 05 A6 |  if_e	mov	result1, #0
20170     98 00 90 AD |  if_e	jmp	#LR__3421
20174     A4 FF 9F FD | 	jmp	#LR__3415
20178                 | LR__3416
20178                 | LR__3417
20178     11 13 02 F6 | 	mov	arg01, local03
2017c     14 15 02 F6 | 	mov	arg02, local06
20180     01 16 66 F6 | 	neg	arg03, #1
20184     48 FB BF FD | 	call	#_fatfs_cc_put_fat
20188     FD 2C 0A F6 | 	mov	local08, result1 wz
2018c     1C 00 90 5D |  if_ne	jmp	#LR__3418
20190     00 20 0E F2 | 	cmp	local02, #0 wz
20194     14 00 90 AD |  if_e	jmp	#LR__3418
20198     11 13 02 F6 | 	mov	arg01, local03
2019c     10 15 02 F6 | 	mov	arg02, local02
201a0     14 17 02 F6 | 	mov	arg03, local06
201a4     28 FB BF FD | 	call	#_fatfs_cc_put_fat
201a8     FD 2C 02 F6 | 	mov	local08, result1
201ac                 | LR__3418
201ac     00 2C 0E F2 | 	cmp	local08, #0 wz
201b0     4C 00 90 5D |  if_ne	jmp	#LR__3419
201b4     10 22 06 F1 | 	add	local03, #16
201b8     11 29 62 FC | 	wrlong	local06, local03
201bc     08 22 06 F1 | 	add	local03, #8
201c0     11 27 02 FB | 	rdlong	local05, local03
201c4     02 26 86 F1 | 	sub	local05, #2
201c8     04 22 86 F1 | 	sub	local03, #4
201cc     11 2F 02 FB | 	rdlong	local09, local03
201d0     14 22 86 F1 | 	sub	local03, #20
201d4     13 2F 1A F2 | 	cmp	local09, local05 wcz
201d8     14 22 06 E1 |  if_be	add	local03, #20
201dc     11 2F 02 EB |  if_be	rdlong	local09, local03
201e0     01 2E 86 E1 |  if_be	sub	local09, #1
201e4     11 2F 62 EC |  if_be	wrlong	local09, local03
201e8     14 22 86 E1 |  if_be	sub	local03, #20
201ec     04 22 06 F1 | 	add	local03, #4
201f0     11 27 C2 FA | 	rdbyte	local05, local03
201f4     01 26 46 F5 | 	or	local05, #1
201f8     11 27 42 FC | 	wrbyte	local05, local03
201fc     08 00 90 FD | 	jmp	#LR__3420
20200                 | LR__3419
20200     01 2C 0E F2 | 	cmp	local08, #1 wz
20204     01 28 C6 F6 | 	negz	local06, #1
20208                 | LR__3420
20208                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
20208                 | ' 	}
20208                 | ' 
20208                 | ' 	return ncl;
20208     14 FB 01 F6 | 	mov	result1, local06
2020c                 | LR__3421
2020c     A7 F0 03 F6 | 	mov	ptra, fp
20210     B2 00 A0 FD | 	call	#popregs_
20214                 | _fatfs_cc_create_chain_ret
20214     2D 00 64 FD | 	ret
20218                 | 
20218                 | _fatfs_cc_dir_clear
20218     06 4A 05 F6 | 	mov	COUNT_, #6
2021c     A8 00 A0 FD | 	call	#pushregs_
20220     09 1F 02 F6 | 	mov	local01, arg01
20224     0A 21 02 F6 | 	mov	local02, arg02
20228     0F 13 02 F6 | 	mov	arg01, local01
2022c     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
20230     00 FA 0D F2 | 	cmp	result1, #0 wz
20234     01 FA 05 56 |  if_ne	mov	result1, #1
20238     90 00 90 5D |  if_ne	jmp	#LR__3432
2023c     0F 13 02 F6 | 	mov	arg01, local01
20240     10 15 02 F6 | 	mov	arg02, local02
20244     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
20248     FD 22 02 F6 | 	mov	local03, result1
2024c     30 1E 06 F1 | 	add	local01, #48
20250     0F 23 62 FC | 	wrlong	local03, local01
20254     04 1E 06 F1 | 	add	local01, #4
20258     0F 13 02 F6 | 	mov	arg01, local01
2025c     00 14 06 F6 | 	mov	arg02, #0
20260     09 16 C6 F9 | 	decod	arg03, #9
20264     98 00 A0 FD | 	call	#\builtin_bytefill_
20268     0F 25 02 F6 | 	mov	local04, local01
2026c                 | ' #line 1667 "ff.c"
2026c                 | ' 	{
2026c                 | ' 		ibuf = fs->win; szb = 1;
2026c                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
2026c     00 26 06 F6 | 	mov	local05, #0
20270     34 1E 86 F1 | 	sub	local01, #52
20274                 | LR__3430
20274     0A 1E 06 F1 | 	add	local01, #10
20278     0F 29 E2 FA | 	rdword	local06, local01
2027c     0A 1E 86 F1 | 	sub	local01, #10
20280     14 27 12 F2 | 	cmp	local05, local06 wc
20284     2C 00 90 3D |  if_ae	jmp	#LR__3431
20288     01 1E 06 F1 | 	add	local01, #1
2028c     0F 13 C2 FA | 	rdbyte	arg01, local01
20290     01 1E 86 F1 | 	sub	local01, #1
20294     12 15 02 F6 | 	mov	arg02, local04
20298     11 17 02 F6 | 	mov	arg03, local03
2029c     13 17 02 F1 | 	add	arg03, local05
202a0     01 18 06 F6 | 	mov	arg04, #1
202a4     9C EF BF FD | 	call	#_fatfs_cc_disk_write
202a8     00 FA 0D F2 | 	cmp	result1, #0 wz
202ac     01 26 06 A1 |  if_e	add	local05, #1
202b0     C0 FF 9F AD |  if_e	jmp	#LR__3430
202b4                 | LR__3431
202b4                 | ' 	}
202b4                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
202b4     0A 1E 06 F1 | 	add	local01, #10
202b8     0F 25 E2 FA | 	rdword	local04, local01
202bc     12 27 0A F2 | 	cmp	local05, local04 wz
202c0     00 28 06 A6 |  if_e	mov	local06, #0
202c4     01 28 06 56 |  if_ne	mov	local06, #1
202c8     14 FB 01 F6 | 	mov	result1, local06
202cc                 | LR__3432
202cc     A7 F0 03 F6 | 	mov	ptra, fp
202d0     B2 00 A0 FD | 	call	#popregs_
202d4                 | _fatfs_cc_dir_clear_ret
202d4     2D 00 64 FD | 	ret
202d8                 | 
202d8                 | _fatfs_cc_dir_sdi
202d8     06 4A 05 F6 | 	mov	COUNT_, #6
202dc     A8 00 A0 FD | 	call	#pushregs_
202e0     09 1F 02 F6 | 	mov	local01, arg01
202e4     0A 21 02 F6 | 	mov	local02, arg02
202e8     0F 23 02 FB | 	rdlong	local03, local01
202ec     00 10 00 FF 
202f0     00 20 16 F2 | 	cmp	local02, ##2097152 wc
202f4     1F 20 CE C7 |  if_b	test	local02, #31 wz
202f8                 | ' 		return FR_INT_ERR;
202f8     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
202fc     34 01 90 7D |  if_nc_or_nz	jmp	#LR__3446
20300     10 1E 06 F1 | 	add	local01, #16
20304     0F 21 62 FC | 	wrlong	local02, local01
20308     08 1E 86 F1 | 	sub	local01, #8
2030c     0F 25 0A FB | 	rdlong	local04, local01 wz
20310     08 1E 86 F1 | 	sub	local01, #8
20314     11 27 C2 AA |  if_e	rdbyte	local05, local03
20318     03 26 16 A2 |  if_e	cmp	local05, #3 wc
2031c     28 22 06 21 |  if_nc_and_z	add	local03, #40
20320     11 25 02 2B |  if_nc_and_z	rdlong	local04, local03
20324     28 22 86 21 |  if_nc_and_z	sub	local03, #40
20328     00 24 0E F2 | 	cmp	local04, #0 wz
2032c     3C 00 90 5D |  if_ne	jmp	#LR__3440
20330     10 27 02 F6 | 	mov	local05, local02
20334     05 26 46 F0 | 	shr	local05, #5
20338     08 22 06 F1 | 	add	local03, #8
2033c     11 15 E2 FA | 	rdword	arg02, local03
20340     08 22 86 F1 | 	sub	local03, #8
20344     0A 27 12 F2 | 	cmp	local05, arg02 wc
20348     02 FA 05 36 |  if_ae	mov	result1, #2
2034c     E4 00 90 3D |  if_ae	jmp	#LR__3446
20350     28 22 06 F1 | 	add	local03, #40
20354     11 27 02 FB | 	rdlong	local05, local03
20358     28 22 86 F1 | 	sub	local03, #40
2035c     18 1E 06 F1 | 	add	local01, #24
20360     0F 27 62 FC | 	wrlong	local05, local01
20364     18 1E 86 F1 | 	sub	local01, #24
20368     7C 00 90 FD | 	jmp	#LR__3445
2036c                 | LR__3440
2036c     0A 22 06 F1 | 	add	local03, #10
20370     11 29 E2 FA | 	rdword	local06, local03
20374     0A 22 86 F1 | 	sub	local03, #10
20378     09 28 66 F0 | 	shl	local06, #9
2037c                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
2037c                 | ' 		while (ofs >= csz) {
2037c                 | LR__3441
2037c     14 21 12 F2 | 	cmp	local02, local06 wc
20380     4C 00 90 CD |  if_b	jmp	#LR__3444
20384     0F 13 02 F6 | 	mov	arg01, local01
20388     12 15 02 F6 | 	mov	arg02, local04
2038c     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
20390     FD 24 02 F6 | 	mov	local04, result1
20394     FF FF 7F FF 
20398     FF 25 0E F2 | 	cmp	local04, ##-1 wz
2039c     01 FA 05 A6 |  if_e	mov	result1, #1
203a0     90 00 90 AD |  if_e	jmp	#LR__3446
203a4     02 24 16 F2 | 	cmp	local04, #2 wc
203a8     14 00 90 CD |  if_b	jmp	#LR__3442
203ac     18 22 06 F1 | 	add	local03, #24
203b0     11 27 02 FB | 	rdlong	local05, local03
203b4     18 22 86 F1 | 	sub	local03, #24
203b8     13 25 12 F2 | 	cmp	local04, local05 wc
203bc     08 00 90 CD |  if_b	jmp	#LR__3443
203c0                 | LR__3442
203c0     02 FA 05 F6 | 	mov	result1, #2
203c4     6C 00 90 FD | 	jmp	#LR__3446
203c8                 | LR__3443
203c8     14 21 82 F1 | 	sub	local02, local06
203cc     AC FF 9F FD | 	jmp	#LR__3441
203d0                 | LR__3444
203d0     11 13 02 F6 | 	mov	arg01, local03
203d4     12 15 02 F6 | 	mov	arg02, local04
203d8     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
203dc     18 1E 06 F1 | 	add	local01, #24
203e0     0F FB 61 FC | 	wrlong	result1, local01
203e4     18 1E 86 F1 | 	sub	local01, #24
203e8                 | LR__3445
203e8     14 1E 06 F1 | 	add	local01, #20
203ec     0F 25 62 FC | 	wrlong	local04, local01
203f0     04 1E 06 F1 | 	add	local01, #4
203f4     0F 27 0A FB | 	rdlong	local05, local01 wz
203f8     18 1E 86 F1 | 	sub	local01, #24
203fc     02 FA 05 A6 |  if_e	mov	result1, #2
20400     30 00 90 AD |  if_e	jmp	#LR__3446
20404     10 29 02 F6 | 	mov	local06, local02
20408     09 28 46 F0 | 	shr	local06, #9
2040c     18 1E 06 F1 | 	add	local01, #24
20410     0F 27 02 FB | 	rdlong	local05, local01
20414     14 27 02 F1 | 	add	local05, local06
20418     0F 27 62 FC | 	wrlong	local05, local01
2041c     34 22 06 F1 | 	add	local03, #52
20420     FF 21 06 F5 | 	and	local02, #511
20424     10 23 02 F1 | 	add	local03, local02
20428     04 1E 06 F1 | 	add	local01, #4
2042c     0F 23 62 FC | 	wrlong	local03, local01
20430                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
20430                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
20430                 | ' 
20430                 | ' 	return FR_OK;
20430     00 FA 05 F6 | 	mov	result1, #0
20434                 | LR__3446
20434     A7 F0 03 F6 | 	mov	ptra, fp
20438     B2 00 A0 FD | 	call	#popregs_
2043c                 | _fatfs_cc_dir_sdi_ret
2043c     2D 00 64 FD | 	ret
20440                 | 
20440                 | _fatfs_cc_dir_next
20440     05 4A 05 F6 | 	mov	COUNT_, #5
20444     A8 00 A0 FD | 	call	#pushregs_
20448     09 1F 02 F6 | 	mov	local01, arg01
2044c     0A 21 02 F6 | 	mov	local02, arg02
20450     0F 23 02 FB | 	rdlong	local03, local01
20454     10 1E 06 F1 | 	add	local01, #16
20458     0F 25 02 FB | 	rdlong	local04, local01
2045c     10 1E 86 F1 | 	sub	local01, #16
20460     20 24 06 F1 | 	add	local04, #32
20464     00 10 00 FF 
20468     00 24 16 F2 | 	cmp	local04, ##2097152 wc
2046c     18 1E 06 31 |  if_ae	add	local01, #24
20470     0F 01 68 3C |  if_ae	wrlong	#0, local01
20474     18 1E 86 31 |  if_ae	sub	local01, #24
20478     18 1E 06 F1 | 	add	local01, #24
2047c     0F 15 0A FB | 	rdlong	arg02, local01 wz
20480     18 1E 86 F1 | 	sub	local01, #24
20484     04 FA 05 A6 |  if_e	mov	result1, #4
20488     64 01 90 AD |  if_e	jmp	#LR__3455
2048c     FF 25 CE F7 | 	test	local04, #511 wz
20490     3C 01 90 5D |  if_ne	jmp	#LR__3454
20494     18 1E 06 F1 | 	add	local01, #24
20498     0F 15 02 FB | 	rdlong	arg02, local01
2049c     01 14 06 F1 | 	add	arg02, #1
204a0     0F 15 62 FC | 	wrlong	arg02, local01
204a4     04 1E 86 F1 | 	sub	local01, #4
204a8     0F 15 0A FB | 	rdlong	arg02, local01 wz
204ac     14 1E 86 F1 | 	sub	local01, #20
204b0     2C 00 90 5D |  if_ne	jmp	#LR__3450
204b4     12 15 02 F6 | 	mov	arg02, local04
204b8     05 14 46 F0 | 	shr	arg02, #5
204bc     08 22 06 F1 | 	add	local03, #8
204c0     11 21 E2 FA | 	rdword	local02, local03
204c4     08 22 86 F1 | 	sub	local03, #8
204c8     10 15 12 F2 | 	cmp	arg02, local02 wc
204cc     18 1E 06 31 |  if_ae	add	local01, #24
204d0     0F 01 68 3C |  if_ae	wrlong	#0, local01
204d4                 | ' 				dp->sect = 0; return FR_NO_FILE;
204d4     04 FA 05 36 |  if_ae	mov	result1, #4
204d8     14 01 90 3D |  if_ae	jmp	#LR__3455
204dc     F0 00 90 FD | 	jmp	#LR__3453
204e0                 | LR__3450
204e0     12 13 02 F6 | 	mov	arg01, local04
204e4     09 12 46 F0 | 	shr	arg01, #9
204e8     0A 22 06 F1 | 	add	local03, #10
204ec     11 15 E2 FA | 	rdword	arg02, local03
204f0     0A 22 86 F1 | 	sub	local03, #10
204f4     01 14 86 F1 | 	sub	arg02, #1
204f8     0A 13 CA F7 | 	test	arg01, arg02 wz
204fc     D0 00 90 5D |  if_ne	jmp	#LR__3452
20500     0F 13 02 F6 | 	mov	arg01, local01
20504     14 1E 06 F1 | 	add	local01, #20
20508     0F 15 02 FB | 	rdlong	arg02, local01
2050c     14 1E 86 F1 | 	sub	local01, #20
20510     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
20514     FD 26 02 F6 | 	mov	local05, result1
20518     02 26 16 F2 | 	cmp	local05, #2 wc
2051c     02 FA 05 C6 |  if_b	mov	result1, #2
20520     CC 00 90 CD |  if_b	jmp	#LR__3455
20524     FF FF 7F FF 
20528     FF 27 0E F2 | 	cmp	local05, ##-1 wz
2052c     01 FA 05 A6 |  if_e	mov	result1, #1
20530     BC 00 90 AD |  if_e	jmp	#LR__3455
20534     18 22 06 F1 | 	add	local03, #24
20538     11 15 02 FB | 	rdlong	arg02, local03
2053c     18 22 86 F1 | 	sub	local03, #24
20540     0A 27 12 F2 | 	cmp	local05, arg02 wc
20544     68 00 90 CD |  if_b	jmp	#LR__3451
20548     00 20 0E F2 | 	cmp	local02, #0 wz
2054c     18 1E 06 A1 |  if_e	add	local01, #24
20550     0F 01 68 AC |  if_e	wrlong	#0, local01
20554                 | ' 						dp->sect = 0; return FR_NO_FILE;
20554     04 FA 05 A6 |  if_e	mov	result1, #4
20558     94 00 90 AD |  if_e	jmp	#LR__3455
2055c     0F 13 02 F6 | 	mov	arg01, local01
20560     14 1E 06 F1 | 	add	local01, #20
20564     0F 15 02 FB | 	rdlong	arg02, local01
20568     14 1E 86 F1 | 	sub	local01, #20
2056c     84 FA BF FD | 	call	#_fatfs_cc_create_chain
20570     FD 26 0A F6 | 	mov	local05, result1 wz
20574     07 FA 05 A6 |  if_e	mov	result1, #7
20578     74 00 90 AD |  if_e	jmp	#LR__3455
2057c     01 26 0E F2 | 	cmp	local05, #1 wz
20580     02 FA 05 A6 |  if_e	mov	result1, #2
20584     68 00 90 AD |  if_e	jmp	#LR__3455
20588     FF FF 7F FF 
2058c     FF 27 0E F2 | 	cmp	local05, ##-1 wz
20590     01 FA 05 A6 |  if_e	mov	result1, #1
20594     58 00 90 AD |  if_e	jmp	#LR__3455
20598     13 15 02 F6 | 	mov	arg02, local05
2059c     11 13 02 F6 | 	mov	arg01, local03
205a0     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
205a4     00 FA 0D F2 | 	cmp	result1, #0 wz
205a8     01 FA 05 56 |  if_ne	mov	result1, #1
205ac     40 00 90 5D |  if_ne	jmp	#LR__3455
205b0                 | LR__3451
205b0     14 1E 06 F1 | 	add	local01, #20
205b4     0F 27 62 FC | 	wrlong	local05, local01
205b8     11 13 02 F6 | 	mov	arg01, local03
205bc     13 15 02 F6 | 	mov	arg02, local05
205c0     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
205c4     04 1E 06 F1 | 	add	local01, #4
205c8     0F FB 61 FC | 	wrlong	result1, local01
205cc     18 1E 86 F1 | 	sub	local01, #24
205d0                 | LR__3452
205d0                 | LR__3453
205d0                 | LR__3454
205d0     10 1E 06 F1 | 	add	local01, #16
205d4     0F 25 62 FC | 	wrlong	local04, local01
205d8     34 22 06 F1 | 	add	local03, #52
205dc     FF 25 06 F5 | 	and	local04, #511
205e0     12 23 02 F1 | 	add	local03, local04
205e4     0C 1E 06 F1 | 	add	local01, #12
205e8     0F 23 62 FC | 	wrlong	local03, local01
205ec                 | ' #line 1771 "ff.c"
205ec                 | ' 				}
205ec                 | ' 				dp->clust = clst;
205ec                 | ' 				dp->sect = clst2sect(fs, clst);
205ec                 | ' 			}
205ec                 | ' 		}
205ec                 | ' 	}
205ec                 | ' 	dp->dptr = ofs;
205ec                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
205ec                 | ' 
205ec                 | ' 	return FR_OK;
205ec     00 FA 05 F6 | 	mov	result1, #0
205f0                 | LR__3455
205f0     A7 F0 03 F6 | 	mov	ptra, fp
205f4     B2 00 A0 FD | 	call	#popregs_
205f8                 | _fatfs_cc_dir_next_ret
205f8     2D 00 64 FD | 	ret
205fc                 | 
205fc                 | _fatfs_cc_dir_alloc
205fc     08 4A 05 F6 | 	mov	COUNT_, #8
20600     A8 00 A0 FD | 	call	#pushregs_
20604     09 1F 02 F6 | 	mov	local01, arg01
20608     0A 21 02 F6 | 	mov	local02, arg02
2060c     0F 23 02 FB | 	rdlong	local03, local01
20610     0F 13 02 F6 | 	mov	arg01, local01
20614     00 14 06 F6 | 	mov	arg02, #0
20618     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
2061c     FD 24 0A F6 | 	mov	local04, result1 wz
20620     70 00 90 5D |  if_ne	jmp	#LR__3464
20624     00 26 06 F6 | 	mov	local05, #0
20628                 | ' 		n = 0;
20628                 | ' 		do {
20628                 | LR__3460
20628     18 1E 06 F1 | 	add	local01, #24
2062c     0F 15 02 FB | 	rdlong	arg02, local01
20630     18 1E 86 F1 | 	sub	local01, #24
20634     11 13 02 F6 | 	mov	arg01, local03
20638     38 F3 BF FD | 	call	#_fatfs_cc_move_window
2063c     FD 24 0A F6 | 	mov	local04, result1 wz
20640     50 00 90 5D |  if_ne	jmp	#LR__3463
20644     1C 1E 06 F1 | 	add	local01, #28
20648     0F 29 02 FB | 	rdlong	local06, local01
2064c     1C 1E 86 F1 | 	sub	local01, #28
20650     14 29 C2 FA | 	rdbyte	local06, local06
20654     E5 28 0E F2 | 	cmp	local06, #229 wz
20658     1C 1E 06 51 |  if_ne	add	local01, #28
2065c     0F 2B 02 5B |  if_ne	rdlong	local07, local01
20660     1C 1E 86 51 |  if_ne	sub	local01, #28
20664     15 2D CA 5A |  if_ne	rdbyte	local08, local07 wz
20668     10 00 90 5D |  if_ne	jmp	#LR__3461
2066c     01 26 06 F1 | 	add	local05, #1
20670     10 27 0A F2 | 	cmp	local05, local02 wz
20674     1C 00 90 AD |  if_e	jmp	#LR__3463
20678     04 00 90 FD | 	jmp	#LR__3462
2067c                 | LR__3461
2067c     00 26 06 F6 | 	mov	local05, #0
20680                 | LR__3462
20680     0F 13 02 F6 | 	mov	arg01, local01
20684     01 14 06 F6 | 	mov	arg02, #1
20688     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
2068c     FD 24 0A F6 | 	mov	local04, result1 wz
20690     94 FF 9F AD |  if_e	jmp	#LR__3460
20694                 | LR__3463
20694                 | LR__3464
20694     04 24 0E F2 | 	cmp	local04, #4 wz
20698     07 24 06 A6 |  if_e	mov	local04, #7
2069c                 | ' 	return res;
2069c     12 FB 01 F6 | 	mov	result1, local04
206a0     A7 F0 03 F6 | 	mov	ptra, fp
206a4     B2 00 A0 FD | 	call	#popregs_
206a8                 | _fatfs_cc_dir_alloc_ret
206a8     2D 00 64 FD | 	ret
206ac                 | 
206ac                 | _fatfs_cc_ld_clust
206ac     09 01 02 F6 | 	mov	_var01, arg01
206b0     0A 13 02 F6 | 	mov	arg01, arg02
206b4     1A 12 06 F1 | 	add	arg01, #26
206b8                 | ' {
206b8                 | ' 
206b8                 | ' 	return *((WORD*)ptr);
206b8     09 FB E1 FA | 	rdword	result1, arg01
206bc     FD 12 32 F9 | 	getword	arg01, result1, #0
206c0     00 01 C2 FA | 	rdbyte	_var01, _var01
206c4     03 00 0E F2 | 	cmp	_var01, #3 wz
206c8     14 14 06 A1 |  if_e	add	arg02, #20
206cc                 | ' {
206cc                 | ' 
206cc                 | ' 	return *((WORD*)ptr);
206cc     0A FB E1 AA |  if_e	rdword	result1, arg02
206d0     10 FA 65 A0 |  if_e	shl	result1, #16
206d4     FD 12 42 A5 |  if_e	or	arg01, result1
206d8                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
206d8                 | ' 	}
206d8                 | ' 
206d8                 | ' 	return cl;
206d8     09 FB 01 F6 | 	mov	result1, arg01
206dc                 | _fatfs_cc_ld_clust_ret
206dc     2D 00 64 FD | 	ret
206e0                 | 
206e0                 | _fatfs_cc_st_clust
206e0     09 01 02 F6 | 	mov	_var01, arg01
206e4     0A 13 02 F6 | 	mov	arg01, arg02
206e8     1A 12 06 F1 | 	add	arg01, #26
206ec     09 17 52 FC | 	wrword	arg03, arg01
206f0     00 01 C2 FA | 	rdbyte	_var01, _var01
206f4     03 00 0E F2 | 	cmp	_var01, #3 wz
206f8     14 14 06 A1 |  if_e	add	arg02, #20
206fc     10 16 46 A0 |  if_e	shr	arg03, #16
20700     0A 17 52 AC |  if_e	wrword	arg03, arg02
20704                 | _fatfs_cc_st_clust_ret
20704     2D 00 64 FD | 	ret
20708                 | 
20708                 | _fatfs_cc_cmp_lfn
20708     07 4A 05 F6 | 	mov	COUNT_, #7
2070c     A8 00 A0 FD | 	call	#pushregs_
20710     09 1F 02 F6 | 	mov	local01, arg01
20714     0A 13 02 F6 | 	mov	arg01, arg02
20718     1A 12 06 F1 | 	add	arg01, #26
2071c                 | ' {
2071c                 | ' 
2071c                 | ' 	return *((WORD*)ptr);
2071c     09 FB E9 FA | 	rdword	result1, arg01 wz
20720     00 FA 05 56 |  if_ne	mov	result1, #0
20724     E0 00 90 5D |  if_ne	jmp	#LR__3476
20728     0A 21 C2 FA | 	rdbyte	local02, arg02
2072c     3F 20 06 F5 | 	and	local02, #63
20730     01 20 86 F1 | 	sub	local02, #1
20734     0D 20 06 FD | 	qmul	local02, #13
20738                 | ' 
20738                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
20738                 | ' 
20738                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
20738     01 22 06 F6 | 	mov	local03, #1
2073c     00 24 06 F6 | 	mov	local04, #0
20740     18 26 62 FD | 	getqx	local05
20744                 | LR__3470
20744     0D 24 16 F2 | 	cmp	local04, #13 wc
20748     9C 00 90 3D |  if_ae	jmp	#LR__3475
2074c     0A 13 02 F6 | 	mov	arg01, arg02
20750     12 21 02 F6 | 	mov	local02, local04
20754     01 00 00 FF 
20758     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2075c     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
20760     10 21 C2 FA | 	rdbyte	local02, local02
20764     01 20 06 FA | 	mul	local02, #1
20768     10 13 02 F1 | 	add	arg01, local02
2076c     01 00 00 FF 
20770     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
20774                 | ' {
20774                 | ' 
20774                 | ' 	return *((WORD*)ptr);
20774     09 FB E1 FA | 	rdword	result1, arg01
20778     FD 28 02 F6 | 	mov	local06, result1
2077c     11 21 02 F6 | 	mov	local02, local03
20780     0F 20 4E F7 | 	zerox	local02, #15 wz
20784     44 00 90 AD |  if_e	jmp	#LR__3473
20788     00 27 16 F2 | 	cmp	local05, #256 wc
2078c     2C 00 90 3D |  if_ae	jmp	#LR__3471
20790     14 13 32 F9 | 	getword	arg01, local06, #0
20794     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
20798     FD 20 02 F6 | 	mov	local02, result1
2079c     13 23 02 F6 | 	mov	local03, local05
207a0     01 22 66 F0 | 	shl	local03, #1
207a4     0F 23 02 F1 | 	add	local03, local01
207a8     11 13 E2 FA | 	rdword	arg01, local03
207ac     01 26 06 F1 | 	add	local05, #1
207b0     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
207b4     FD 20 0A F2 | 	cmp	local02, result1 wz
207b8     08 00 90 AD |  if_e	jmp	#LR__3472
207bc                 | LR__3471
207bc                 | ' 				return 0;
207bc     00 FA 05 F6 | 	mov	result1, #0
207c0     44 00 90 FD | 	jmp	#LR__3476
207c4                 | LR__3472
207c4     14 23 02 F6 | 	mov	local03, local06
207c8     14 00 90 FD | 	jmp	#LR__3474
207cc                 | LR__3473
207cc     14 29 32 F9 | 	getword	local06, local06, #0
207d0     7F 00 00 FF 
207d4     FF 29 0E F2 | 	cmp	local06, ##65535 wz
207d8     00 FA 05 56 |  if_ne	mov	result1, #0
207dc     28 00 90 5D |  if_ne	jmp	#LR__3476
207e0                 | LR__3474
207e0     01 24 06 F1 | 	add	local04, #1
207e4     5C FF 9F FD | 	jmp	#LR__3470
207e8                 | LR__3475
207e8     0A 21 C2 FA | 	rdbyte	local02, arg02
207ec     40 20 CE F7 | 	test	local02, #64 wz
207f0     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
207f4     01 26 66 50 |  if_ne	shl	local05, #1
207f8     0F 27 02 51 |  if_ne	add	local05, local01
207fc     13 2B EA 5A |  if_ne	rdword	local07, local05 wz
20800     00 FA 05 56 |  if_ne	mov	result1, #0
20804                 | ' 
20804                 | ' 	return 1;
20804     01 FA 05 A6 |  if_e	mov	result1, #1
20808                 | LR__3476
20808     A7 F0 03 F6 | 	mov	ptra, fp
2080c     B2 00 A0 FD | 	call	#popregs_
20810                 | _fatfs_cc_cmp_lfn_ret
20810     2D 00 64 FD | 	ret
20814                 | 
20814                 | _fatfs_cc_pick_lfn
20814     09 01 02 F6 | 	mov	_var01, arg01
20818     0A 13 02 F6 | 	mov	arg01, arg02
2081c     1A 12 06 F1 | 	add	arg01, #26
20820                 | ' {
20820                 | ' 
20820                 | ' 	return *((WORD*)ptr);
20820     09 FB E9 FA | 	rdword	result1, arg01 wz
20824     00 FA 05 56 |  if_ne	mov	result1, #0
20828     D4 00 90 5D |  if_ne	jmp	#LR__3485
2082c     0A 03 C2 FA | 	rdbyte	_var02, arg02
20830     40 02 26 F5 | 	andn	_var02, #64
20834     01 02 86 F1 | 	sub	_var02, #1
20838     0D 02 06 FD | 	qmul	_var02, #13
2083c                 | ' 
2083c                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
2083c                 | ' 
2083c                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2083c     01 04 06 F6 | 	mov	_var03, #1
20840     00 06 06 F6 | 	mov	_var04, #0
20844     18 08 62 FD | 	getqx	_var05
20848                 | LR__3480
20848     0D 06 16 F2 | 	cmp	_var04, #13 wc
2084c     80 00 90 3D |  if_ae	jmp	#LR__3483
20850     0A 13 02 F6 | 	mov	arg01, arg02
20854     03 03 02 F6 | 	mov	_var02, _var04
20858     01 00 00 FF 
2085c     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
20860     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
20864     01 03 C2 FA | 	rdbyte	_var02, _var02
20868     01 02 06 FA | 	mul	_var02, #1
2086c     01 13 02 F1 | 	add	arg01, _var02
20870     01 00 00 FF 
20874     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
20878                 | ' {
20878                 | ' 
20878                 | ' 	return *((WORD*)ptr);
20878     09 FB E1 FA | 	rdword	result1, arg01
2087c     FD 0A 02 F6 | 	mov	_var06, result1
20880     02 03 02 F6 | 	mov	_var02, _var03
20884     0F 02 4E F7 | 	zerox	_var02, #15 wz
20888     28 00 90 AD |  if_e	jmp	#LR__3481
2088c     00 09 16 F2 | 	cmp	_var05, #256 wc
20890     00 FA 05 36 |  if_ae	mov	result1, #0
20894     68 00 90 3D |  if_ae	jmp	#LR__3485
20898     04 03 02 F6 | 	mov	_var02, _var05
2089c     01 02 66 F0 | 	shl	_var02, #1
208a0     00 03 02 F1 | 	add	_var02, _var01
208a4     05 05 02 F6 | 	mov	_var03, _var06
208a8     01 05 52 FC | 	wrword	_var03, _var02
208ac     01 08 06 F1 | 	add	_var05, #1
208b0     14 00 90 FD | 	jmp	#LR__3482
208b4                 | LR__3481
208b4     05 0B 32 F9 | 	getword	_var06, _var06, #0
208b8     7F 00 00 FF 
208bc     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
208c0     00 FA 05 56 |  if_ne	mov	result1, #0
208c4     38 00 90 5D |  if_ne	jmp	#LR__3485
208c8                 | LR__3482
208c8     01 06 06 F1 | 	add	_var04, #1
208cc     78 FF 9F FD | 	jmp	#LR__3480
208d0                 | LR__3483
208d0     0A 03 C2 FA | 	rdbyte	_var02, arg02
208d4     40 02 CE F7 | 	test	_var02, #64 wz
208d8     02 0D 02 56 |  if_ne	mov	_var07, _var03
208dc     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
208e0     18 00 90 AD |  if_e	jmp	#LR__3484
208e4     00 09 16 F2 | 	cmp	_var05, #256 wc
208e8     00 FA 05 36 |  if_ae	mov	result1, #0
208ec     10 00 90 3D |  if_ae	jmp	#LR__3485
208f0     01 08 66 F0 | 	shl	_var05, #1
208f4     00 09 02 F1 | 	add	_var05, _var01
208f8     04 01 58 FC | 	wrword	#0, _var05
208fc                 | LR__3484
208fc                 | ' 		lfnbuf[i] = 0;
208fc                 | ' 	}
208fc                 | ' 
208fc                 | ' 	return 1;
208fc     01 FA 05 F6 | 	mov	result1, #1
20900                 | LR__3485
20900                 | _fatfs_cc_pick_lfn_ret
20900     2D 00 64 FD | 	ret
20904                 | 
20904                 | _fatfs_cc_put_lfn
20904     0D 14 06 F1 | 	add	arg02, #13
20908     0A 19 42 FC | 	wrbyte	arg04, arg02
2090c     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
20910     01 18 86 F1 | 	sub	arg04, #1
20914     0D 18 06 FD | 	qmul	arg04, #13
20918     09 01 02 F6 | 	mov	_var01, arg01
2091c     02 14 86 F1 | 	sub	arg02, #2
20920     0A 1F 48 FC | 	wrbyte	#15, arg02
20924     01 14 06 F1 | 	add	arg02, #1
20928     0A 01 48 FC | 	wrbyte	#0, arg02
2092c     0C 14 86 F1 | 	sub	arg02, #12
20930     0A 13 02 F6 | 	mov	arg01, arg02
20934     1A 12 06 F1 | 	add	arg01, #26
20938     09 01 58 FC | 	wrword	#0, arg01
2093c     00 02 06 F6 | 	mov	_var02, #0
20940     00 04 06 F6 | 	mov	_var03, #0
20944                 | ' 	BYTE* dir,
20944                 | ' 	BYTE ord,
20944                 | ' 	BYTE sum
20944                 | ' )
20944                 | ' {
20944                 | ' 	UINT i, s;
20944                 | ' 	WCHAR wc;
20944                 | ' 
20944                 | ' 
20944                 | ' 	dir[ 13 ] = sum;
20944                 | ' 	dir[ 11 ] =  0x0F ;
20944                 | ' 	dir[ 12 ] = 0;
20944                 | ' 	st_word(dir +  26 , 0);
20944                 | ' 
20944                 | ' 	i = (ord - 1) * 13;
20944                 | ' 	s = wc = 0;
20944                 | ' 	do {
20944     01 00 00 FF 
20948     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2094c     18 06 62 FD | 	getqx	_var04
20950     97 2A 48 FB | 	callpa	#(@LR__3491-@LR__3490)>>2,fcache_load_ptr_
20954                 | LR__3490
20954     01 19 32 F9 | 	getword	arg04, _var02, #0
20958     7F 00 00 FF 
2095c     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
20960     03 13 02 56 |  if_ne	mov	arg01, _var04
20964     01 06 06 51 |  if_ne	add	_var04, #1
20968     01 12 66 50 |  if_ne	shl	arg01, #1
2096c     00 13 02 51 |  if_ne	add	arg01, _var01
20970     09 03 E2 5A |  if_ne	rdword	_var02, arg01
20974     0A 13 02 F6 | 	mov	arg01, arg02
20978     02 19 02 F6 | 	mov	arg04, _var03
2097c     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
20980     0C 19 C2 FA | 	rdbyte	arg04, arg04
20984     01 18 06 FA | 	mul	arg04, #1
20988     0C 13 02 F1 | 	add	arg01, arg04
2098c     09 03 52 FC | 	wrword	_var02, arg01
20990     01 19 02 F6 | 	mov	arg04, _var02
20994     0F 18 4E F7 | 	zerox	arg04, #15 wz
20998     0F 02 CE A9 |  if_e	bmask	_var02, #15
2099c     01 04 06 F1 | 	add	_var03, #1
209a0     0D 04 16 F2 | 	cmp	_var03, #13 wc
209a4     AC FF 9F CD |  if_b	jmp	#LR__3490
209a8                 | LR__3491
209a8     01 00 00 FF 
209ac     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
209b0     01 03 32 F9 | 	getword	_var02, _var02, #0
209b4     7F 00 00 FF 
209b8     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
209bc     01 06 66 50 |  if_ne	shl	_var04, #1
209c0     00 07 02 51 |  if_ne	add	_var04, _var01
209c4     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
209c8     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
209cc     40 16 46 A5 |  if_e	or	arg03, #64
209d0     0A 17 42 FC | 	wrbyte	arg03, arg02
209d4                 | _fatfs_cc_put_lfn_ret
209d4     2D 00 64 FD | 	ret
209d8                 | 
209d8                 | _fatfs_cc_gen_numname
209d8     08 4A 05 F6 | 	mov	COUNT_, #8
209dc     A8 00 A0 FD | 	call	#pushregs_
209e0     2C F0 07 F1 | 	add	ptra, #44
209e4     09 1F 02 F6 | 	mov	local01, arg01
209e8     0A 21 02 F6 | 	mov	local02, arg02
209ec     0B 23 02 F6 | 	mov	local03, arg03
209f0     0C 25 02 F6 | 	mov	local04, arg04
209f4     0F 13 02 F6 | 	mov	arg01, local01
209f8     10 15 02 F6 | 	mov	arg02, local02
209fc     0B 16 06 F6 | 	mov	arg03, #11
20a00     78 7A BF FD | 	call	#__system____builtin_memmove
20a04     06 24 16 F2 | 	cmp	local04, #6 wc
20a08     48 00 90 CD |  if_b	jmp	#LR__3505
20a0c     12 27 02 F6 | 	mov	local05, local04
20a10     97 1E 48 FB | 	callpa	#(@LR__3503-@LR__3500)>>2,fcache_load_ptr_
20a14                 | ' 		sreg = seq;
20a14                 | ' 		while (*lfn) {
20a14                 | LR__3500
20a14     11 29 EA FA | 	rdword	local06, local03 wz
20a18     34 00 90 AD |  if_e	jmp	#LR__3504
20a1c     11 2B E2 FA | 	rdword	local07, local03
20a20                 | ' 			wc = *lfn++;
20a20                 | ' 			for (i = 0; i < 16; i++) {
20a20     02 22 06 F1 | 	add	local03, #2
20a24     10 12 DC FC | 	rep	@LR__3502, #16
20a28                 | LR__3501
20a28     01 26 66 F0 | 	shl	local05, #1
20a2c     15 29 32 F9 | 	getword	local06, local07, #0
20a30     01 28 06 F5 | 	and	local06, #1
20a34     14 27 02 F1 | 	add	local05, local06
20a38     15 2B 32 F9 | 	getword	local07, local07, #0
20a3c     01 2A 46 F0 | 	shr	local07, #1
20a40     10 26 2E F4 | 	testbn	local05, #16 wz
20a44     88 00 00 5F 
20a48     21 26 66 55 |  if_ne	xor	local05, ##69665
20a4c                 | LR__3502
20a4c     C4 FF 9F FD | 	jmp	#LR__3500
20a50                 | LR__3503
20a50                 | LR__3504
20a50     13 25 02 F6 | 	mov	local04, local05
20a54                 | LR__3505
20a54     07 2A 06 F6 | 	mov	local07, #7
20a58                 | ' 			}
20a58                 | ' 		}
20a58                 | ' 		seq = (UINT)sreg;
20a58                 | ' 	}
20a58                 | ' 
20a58                 | ' 
20a58                 | ' 	i = 7;
20a58                 | ' 	do {
20a58     10 4E 05 F1 | 	add	fp, #16
20a5c     97 1A 48 FB | 	callpa	#(@LR__3507-@LR__3506)>>2,fcache_load_ptr_
20a60                 | LR__3506
20a60     12 27 42 F8 | 	getnib	local05, local04, #0
20a64     30 26 06 F1 | 	add	local05, #48
20a68     04 24 46 F0 | 	shr	local04, #4
20a6c     13 29 E2 F8 | 	getbyte	local06, local05, #0
20a70     3A 28 16 F2 | 	cmp	local06, #58 wc
20a74     13 27 E2 38 |  if_ae	getbyte	local05, local05, #0
20a78     07 26 06 31 |  if_ae	add	local05, #7
20a7c     15 29 02 F6 | 	mov	local06, local07
20a80     01 2A 8E F1 | 	sub	local07, #1 wz
20a84     A7 28 02 F1 | 	add	local06, fp
20a88     14 27 42 FC | 	wrbyte	local05, local06
20a8c     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
20a90     CC FF 9F 5D |  if_ne	jmp	#LR__3506
20a94                 | LR__3507
20a94     15 29 02 F6 | 	mov	local06, local07
20a98     A7 28 02 F1 | 	add	local06, fp
20a9c     14 FD 48 FC | 	wrbyte	#126, local06
20aa0                 | ' 	ns[i] = '~';
20aa0                 | ' 
20aa0                 | ' 
20aa0                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
20aa0     00 26 06 F6 | 	mov	local05, #0
20aa4     10 4E 85 F1 | 	sub	fp, #16
20aa8     97 2A 48 FB | 	callpa	#(@LR__3510-@LR__3508)>>2,fcache_load_ptr_
20aac                 | LR__3508
20aac     15 27 12 F2 | 	cmp	local05, local07 wc
20ab0     4C 00 90 3D |  if_ae	jmp	#LR__3511
20ab4     13 29 02 F6 | 	mov	local06, local05
20ab8     0F 29 02 F1 | 	add	local06, local01
20abc     14 29 C2 FA | 	rdbyte	local06, local06
20ac0     20 28 0E F2 | 	cmp	local06, #32 wz
20ac4     38 00 90 AD |  if_e	jmp	#LR__3511
20ac8     13 13 02 F6 | 	mov	arg01, local05
20acc     0F 13 02 F1 | 	add	arg01, local01
20ad0     09 13 CA FA | 	rdbyte	arg01, arg01 wz
20ad4     00 FA 05 56 |  if_ne	mov	result1, #0
20ad8                 | ' 
20ad8                 | ' 	return 0;
20ad8     00 FA 05 A6 |  if_e	mov	result1, #0
20adc     00 FA 0D F2 | 	cmp	result1, #0 wz
20ae0     14 00 90 AD |  if_e	jmp	#LR__3509
20ae4     15 29 02 F6 | 	mov	local06, local07
20ae8     01 28 86 F1 | 	sub	local06, #1
20aec     14 27 0A F2 | 	cmp	local05, local06 wz
20af0     0C 00 90 AD |  if_e	jmp	#LR__3511
20af4     01 26 06 F1 | 	add	local05, #1
20af8                 | LR__3509
20af8     01 26 06 F1 | 	add	local05, #1
20afc     AC FF 9F FD | 	jmp	#LR__3508
20b00                 | LR__3510
20b00                 | LR__3511
20b00     97 20 48 FB | 	callpa	#(@LR__3515-@LR__3512)>>2,fcache_load_ptr_
20b04                 | ' 			j++;
20b04                 | ' 		}
20b04                 | ' 	}
20b04                 | ' 	do {
20b04                 | LR__3512
20b04     13 29 02 F6 | 	mov	local06, local05
20b08     0F 29 02 F1 | 	add	local06, local01
20b0c     08 2A 16 F2 | 	cmp	local07, #8 wc
20b10     01 26 06 F1 | 	add	local05, #1
20b14     1C 00 90 3D |  if_ae	jmp	#LR__3513
20b18     15 25 02 F6 | 	mov	local04, local07
20b1c     10 4E 05 F1 | 	add	fp, #16
20b20     A7 24 02 F1 | 	add	local04, fp
20b24     12 2D C2 FA | 	rdbyte	local08, local04
20b28     01 2A 06 F1 | 	add	local07, #1
20b2c     10 4E 85 F1 | 	sub	fp, #16
20b30     04 00 90 FD | 	jmp	#LR__3514
20b34                 | LR__3513
20b34     20 2C 06 F6 | 	mov	local08, #32
20b38                 | LR__3514
20b38     14 2D 42 FC | 	wrbyte	local08, local06
20b3c     08 26 16 F2 | 	cmp	local05, #8 wc
20b40     C0 FF 9F CD |  if_b	jmp	#LR__3512
20b44                 | LR__3515
20b44     A7 F0 03 F6 | 	mov	ptra, fp
20b48     B2 00 A0 FD | 	call	#popregs_
20b4c                 | _fatfs_cc_gen_numname_ret
20b4c     2D 00 64 FD | 	ret
20b50                 | 
20b50                 | _fatfs_cc_sum_sfn
20b50     00 00 06 F6 | 	mov	_var01, #0
20b54                 | ' )
20b54                 | ' {
20b54                 | ' 	BYTE sum = 0;
20b54                 | ' 	UINT n = 11;
20b54                 | ' 
20b54                 | ' 	do {
20b54     97 12 48 FB | 	callpa	#(@LR__3522-@LR__3520)>>2,fcache_load_ptr_
20b58                 | LR__3520
20b58     0B 10 DC FC | 	rep	@LR__3523, #11
20b5c                 | LR__3521
20b5c     00 FB E1 F8 | 	getbyte	result1, _var01, #0
20b60     01 FA 45 F0 | 	shr	result1, #1
20b64     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
20b68     07 00 66 F0 | 	shl	_var01, #7
20b6c     00 FB 01 F1 | 	add	result1, _var01
20b70     09 01 C2 FA | 	rdbyte	_var01, arg01
20b74     FD 00 02 F1 | 	add	_var01, result1
20b78     01 12 06 F1 | 	add	arg01, #1
20b7c                 | LR__3522
20b7c                 | LR__3523
20b7c                 | ' 	return sum;
20b7c     00 FB 01 F6 | 	mov	result1, _var01
20b80                 | _fatfs_cc_sum_sfn_ret
20b80     2D 00 64 FD | 	ret
20b84                 | 
20b84                 | _fatfs_cc_dir_read
20b84     0C 4A 05 F6 | 	mov	COUNT_, #12
20b88     A8 00 A0 FD | 	call	#pushregs_
20b8c     09 1F 02 F6 | 	mov	local01, arg01
20b90     0A 21 02 F6 | 	mov	local02, arg02
20b94     04 22 06 F6 | 	mov	local03, #4
20b98     0F 25 02 FB | 	rdlong	local04, local01
20b9c     FF 26 06 F6 | 	mov	local05, #255
20ba0     FF 28 06 F6 | 	mov	local06, #255
20ba4                 | ' )
20ba4                 | ' {
20ba4                 | ' 	FRESULT res = FR_NO_FILE;
20ba4                 | ' 	FATFS *fs = dp->obj.fs;
20ba4                 | ' 	BYTE attr, b;
20ba4                 | ' 
20ba4                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
20ba4                 | ' 
20ba4                 | ' 
20ba4                 | ' 	while (dp->sect) {
20ba4                 | LR__3530
20ba4     18 1E 06 F1 | 	add	local01, #24
20ba8     0F FB 09 FB | 	rdlong	result1, local01 wz
20bac     18 1E 86 F1 | 	sub	local01, #24
20bb0     AC 01 90 AD |  if_e	jmp	#LR__3540
20bb4     18 1E 06 F1 | 	add	local01, #24
20bb8     0F 15 02 FB | 	rdlong	arg02, local01
20bbc     18 1E 86 F1 | 	sub	local01, #24
20bc0     12 13 02 F6 | 	mov	arg01, local04
20bc4     AC ED BF FD | 	call	#_fatfs_cc_move_window
20bc8     FD 22 0A F6 | 	mov	local03, result1 wz
20bcc     90 01 90 5D |  if_ne	jmp	#LR__3540
20bd0     1C 1E 06 F1 | 	add	local01, #28
20bd4     0F FB 01 FB | 	rdlong	result1, local01
20bd8     1C 1E 86 F1 | 	sub	local01, #28
20bdc     FD 2A C2 FA | 	rdbyte	local07, result1
20be0     15 FB 01 F6 | 	mov	result1, local07
20be4     07 FA 4D F7 | 	zerox	result1, #7 wz
20be8     04 22 06 A6 |  if_e	mov	local03, #4
20bec                 | ' 			res = FR_NO_FILE; break;
20bec     70 01 90 AD |  if_e	jmp	#LR__3540
20bf0     1C 1E 06 F1 | 	add	local01, #28
20bf4     0F 2D 02 FB | 	rdlong	local08, local01
20bf8     0B 2C 06 F1 | 	add	local08, #11
20bfc     16 2F C2 FA | 	rdbyte	local09, local08
20c00     3F 2E 06 F5 | 	and	local09, #63
20c04     16 1E 86 F1 | 	sub	local01, #22
20c08     0F 2F 42 FC | 	wrbyte	local09, local01
20c0c     06 1E 86 F1 | 	sub	local01, #6
20c10     15 FB E1 F8 | 	getbyte	result1, local07, #0
20c14     E5 FA 0D F2 | 	cmp	result1, #229 wz
20c18     15 2D 02 56 |  if_ne	mov	local08, local07
20c1c     16 2D E2 58 |  if_ne	getbyte	local08, local08, #0
20c20     2E 2C 0E 52 |  if_ne	cmp	local08, #46 wz
20c24     1C 00 90 AD |  if_e	jmp	#LR__3531
20c28     00 30 06 F6 | 	mov	local10, #0
20c2c     17 2D E2 F8 | 	getbyte	local08, local09, #0
20c30     20 2C 26 F5 | 	andn	local08, #32
20c34     08 2C 0E F2 | 	cmp	local08, #8 wz
20c38     01 30 06 A6 |  if_e	mov	local10, #1
20c3c     10 31 0A F2 | 	cmp	local10, local02 wz
20c40     08 00 90 AD |  if_e	jmp	#LR__3532
20c44                 | LR__3531
20c44     FF 26 06 F6 | 	mov	local05, #255
20c48     00 01 90 FD | 	jmp	#LR__3539
20c4c                 | LR__3532
20c4c     17 2F E2 F8 | 	getbyte	local09, local09, #0
20c50     0F 2E 0E F2 | 	cmp	local09, #15 wz
20c54     B4 00 90 5D |  if_ne	jmp	#LR__3536
20c58     15 33 E2 F8 | 	getbyte	local11, local07, #0
20c5c     40 32 CE F7 | 	test	local11, #64 wz
20c60     30 00 90 AD |  if_e	jmp	#LR__3533
20c64     1C 1E 06 F1 | 	add	local01, #28
20c68     0F 33 02 FB | 	rdlong	local11, local01
20c6c     0D 32 06 F1 | 	add	local11, #13
20c70     19 29 C2 FA | 	rdbyte	local06, local11
20c74     15 2B E2 F8 | 	getbyte	local07, local07, #0
20c78     BF 2A 06 F5 | 	and	local07, #191
20c7c     15 27 02 F6 | 	mov	local05, local07
20c80     0C 1E 86 F1 | 	sub	local01, #12
20c84     0F 33 02 FB | 	rdlong	local11, local01
20c88     1C 1E 06 F1 | 	add	local01, #28
20c8c     0F 33 62 FC | 	wrlong	local11, local01
20c90     2C 1E 86 F1 | 	sub	local01, #44
20c94                 | LR__3533
20c94     15 2D E2 F8 | 	getbyte	local08, local07, #0
20c98     13 31 E2 F8 | 	getbyte	local10, local05, #0
20c9c     18 2D 0A F2 | 	cmp	local08, local10 wz
20ca0     5C 00 90 5D |  if_ne	jmp	#LR__3534
20ca4     14 31 E2 F8 | 	getbyte	local10, local06, #0
20ca8     1C 1E 06 F1 | 	add	local01, #28
20cac     0F 2F 02 FB | 	rdlong	local09, local01
20cb0     1C 1E 86 F1 | 	sub	local01, #28
20cb4     0D 2E 06 F1 | 	add	local09, #13
20cb8     17 2D C2 FA | 	rdbyte	local08, local09
20cbc     16 2F E2 F8 | 	getbyte	local09, local08, #0
20cc0     17 31 0A F2 | 	cmp	local10, local09 wz
20cc4     38 00 90 5D |  if_ne	jmp	#LR__3534
20cc8     0C 24 06 F1 | 	add	local04, #12
20ccc     12 13 02 FB | 	rdlong	arg01, local04
20cd0     0C 24 86 F1 | 	sub	local04, #12
20cd4     1C 1E 06 F1 | 	add	local01, #28
20cd8     0F 35 02 FB | 	rdlong	local12, local01
20cdc     1C 1E 86 F1 | 	sub	local01, #28
20ce0     1A 15 02 F6 | 	mov	arg02, local12
20ce4     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
20ce8     00 FA 4D F2 | 	cmps	result1, #0 wz
20cec     13 35 02 56 |  if_ne	mov	local12, local05
20cf0     1A 35 E2 58 |  if_ne	getbyte	local12, local12, #0
20cf4     01 34 86 51 |  if_ne	sub	local12, #1
20cf8     1A 33 02 56 |  if_ne	mov	local11, local12
20cfc     04 00 90 5D |  if_ne	jmp	#LR__3535
20d00                 | LR__3534
20d00     FF 32 06 F6 | 	mov	local11, #255
20d04                 | LR__3535
20d04     19 27 02 F6 | 	mov	local05, local11
20d08     40 00 90 FD | 	jmp	#LR__3538
20d0c                 | LR__3536
20d0c     13 33 02 F6 | 	mov	local11, local05
20d10     07 32 4E F7 | 	zerox	local11, #7 wz
20d14     20 00 90 5D |  if_ne	jmp	#LR__3537
20d18     14 29 E2 F8 | 	getbyte	local06, local06, #0
20d1c     1C 1E 06 F1 | 	add	local01, #28
20d20     0F 13 02 FB | 	rdlong	arg01, local01
20d24     1C 1E 86 F1 | 	sub	local01, #28
20d28     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
20d2c     FD FA E1 F8 | 	getbyte	result1, result1, #0
20d30     FD 28 0A F2 | 	cmp	local06, result1 wz
20d34     28 00 90 AD |  if_e	jmp	#LR__3540
20d38                 | LR__3537
20d38     2C 1E 06 F1 | 	add	local01, #44
20d3c     FF FF FF FF 
20d40     0F FF 6B FC | 	wrlong	##-1, local01
20d44     2C 1E 86 F1 | 	sub	local01, #44
20d48                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
20d48                 | ' 					}
20d48                 | ' 					break;
20d48     14 00 90 FD | 	jmp	#LR__3540
20d4c                 | LR__3538
20d4c                 | LR__3539
20d4c     0F 13 02 F6 | 	mov	arg01, local01
20d50     00 14 06 F6 | 	mov	arg02, #0
20d54     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
20d58     FD 22 0A F6 | 	mov	local03, result1 wz
20d5c     44 FE 9F AD |  if_e	jmp	#LR__3530
20d60                 | LR__3540
20d60     00 22 0E F2 | 	cmp	local03, #0 wz
20d64     18 1E 06 51 |  if_ne	add	local01, #24
20d68     0F 01 68 5C |  if_ne	wrlong	#0, local01
20d6c                 | ' 	return res;
20d6c     11 FB 01 F6 | 	mov	result1, local03
20d70     A7 F0 03 F6 | 	mov	ptra, fp
20d74     B2 00 A0 FD | 	call	#popregs_
20d78                 | _fatfs_cc_dir_read_ret
20d78     2D 00 64 FD | 	ret
20d7c                 | 
20d7c                 | _fatfs_cc_dir_find
20d7c     0B 4A 05 F6 | 	mov	COUNT_, #11
20d80     A8 00 A0 FD | 	call	#pushregs_
20d84     09 1F 02 F6 | 	mov	local01, arg01
20d88     0F 21 02 FB | 	rdlong	local02, local01
20d8c     0F 13 02 F6 | 	mov	arg01, local01
20d90     00 14 06 F6 | 	mov	arg02, #0
20d94     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
20d98     00 FA 0D F2 | 	cmp	result1, #0 wz
20d9c     18 02 90 5D |  if_ne	jmp	#LR__3562
20da0     FF 22 06 F6 | 	mov	local03, #255
20da4     FF 24 06 F6 | 	mov	local04, #255
20da8     2C 1E 06 F1 | 	add	local01, #44
20dac     FF FF FF FF 
20db0     0F FF 6B FC | 	wrlong	##-1, local01
20db4     2C 1E 86 F1 | 	sub	local01, #44
20db8                 | ' #line 2404 "ff.c"
20db8                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
20db8                 | ' 
20db8                 | ' 	do {
20db8                 | LR__3550
20db8     18 1E 06 F1 | 	add	local01, #24
20dbc     0F 15 02 FB | 	rdlong	arg02, local01
20dc0     18 1E 86 F1 | 	sub	local01, #24
20dc4     10 13 02 F6 | 	mov	arg01, local02
20dc8     A8 EB BF FD | 	call	#_fatfs_cc_move_window
20dcc     FD 26 0A F6 | 	mov	local05, result1 wz
20dd0     E0 01 90 5D |  if_ne	jmp	#LR__3561
20dd4     1C 1E 06 F1 | 	add	local01, #28
20dd8     0F 17 02 FB | 	rdlong	arg03, local01
20ddc     1C 1E 86 F1 | 	sub	local01, #28
20de0     0B 29 C2 FA | 	rdbyte	local06, arg03
20de4     14 17 02 F6 | 	mov	arg03, local06
20de8     07 16 4E F7 | 	zerox	arg03, #7 wz
20dec     04 26 06 A6 |  if_e	mov	local05, #4
20df0     C0 01 90 AD |  if_e	jmp	#LR__3561
20df4     1C 1E 06 F1 | 	add	local01, #28
20df8     0F 2B 02 FB | 	rdlong	local07, local01
20dfc     15 17 02 F6 | 	mov	arg03, local07
20e00     0B 16 06 F1 | 	add	arg03, #11
20e04     0B 2D C2 FA | 	rdbyte	local08, arg03
20e08     3F 2C 06 F5 | 	and	local08, #63
20e0c     16 1E 86 F1 | 	sub	local01, #22
20e10     0F 2D 42 FC | 	wrbyte	local08, local01
20e14     06 1E 86 F1 | 	sub	local01, #6
20e18     14 17 E2 F8 | 	getbyte	arg03, local06, #0
20e1c     E5 16 0E F2 | 	cmp	arg03, #229 wz
20e20     18 00 90 AD |  if_e	jmp	#LR__3551
20e24     16 17 E2 F8 | 	getbyte	arg03, local08, #0
20e28     08 16 CE F7 | 	test	arg03, #8 wz
20e2c     16 2B 02 56 |  if_ne	mov	local07, local08
20e30     15 2B E2 58 |  if_ne	getbyte	local07, local07, #0
20e34     0F 2A 0E 52 |  if_ne	cmp	local07, #15 wz
20e38     18 00 90 AD |  if_e	jmp	#LR__3552
20e3c                 | LR__3551
20e3c     FF 24 06 F6 | 	mov	local04, #255
20e40     2C 1E 06 F1 | 	add	local01, #44
20e44     FF FF FF FF 
20e48     0F FF 6B FC | 	wrlong	##-1, local01
20e4c     2C 1E 86 F1 | 	sub	local01, #44
20e50     4C 01 90 FD | 	jmp	#LR__3560
20e54                 | LR__3552
20e54     16 2D E2 F8 | 	getbyte	local08, local08, #0
20e58     0F 2C 0E F2 | 	cmp	local08, #15 wz
20e5c     C8 00 90 5D |  if_ne	jmp	#LR__3556
20e60     2B 1E 06 F1 | 	add	local01, #43
20e64     0F 2D C2 FA | 	rdbyte	local08, local01
20e68     2B 1E 86 F1 | 	sub	local01, #43
20e6c     40 2C CE F7 | 	test	local08, #64 wz
20e70     2C 01 90 5D |  if_ne	jmp	#LR__3559
20e74     14 2F E2 F8 | 	getbyte	local09, local06, #0
20e78     40 2E CE F7 | 	test	local09, #64 wz
20e7c     30 00 90 AD |  if_e	jmp	#LR__3553
20e80     1C 1E 06 F1 | 	add	local01, #28
20e84     0F 2F 02 FB | 	rdlong	local09, local01
20e88     0D 2E 06 F1 | 	add	local09, #13
20e8c     17 23 C2 FA | 	rdbyte	local03, local09
20e90     14 29 E2 F8 | 	getbyte	local06, local06, #0
20e94     BF 28 06 F5 | 	and	local06, #191
20e98     14 25 02 F6 | 	mov	local04, local06
20e9c     0C 1E 86 F1 | 	sub	local01, #12
20ea0     0F 2F 02 FB | 	rdlong	local09, local01
20ea4     1C 1E 06 F1 | 	add	local01, #28
20ea8     0F 2F 62 FC | 	wrlong	local09, local01
20eac     2C 1E 86 F1 | 	sub	local01, #44
20eb0                 | LR__3553
20eb0     14 31 E2 F8 | 	getbyte	local10, local06, #0
20eb4     12 2B E2 F8 | 	getbyte	local07, local04, #0
20eb8     15 31 0A F2 | 	cmp	local10, local07 wz
20ebc     5C 00 90 5D |  if_ne	jmp	#LR__3554
20ec0     11 2D E2 F8 | 	getbyte	local08, local03, #0
20ec4     1C 1E 06 F1 | 	add	local01, #28
20ec8     0F 2B 02 FB | 	rdlong	local07, local01
20ecc     1C 1E 86 F1 | 	sub	local01, #28
20ed0     0D 2A 06 F1 | 	add	local07, #13
20ed4     15 29 C2 FA | 	rdbyte	local06, local07
20ed8     14 2B E2 F8 | 	getbyte	local07, local06, #0
20edc     15 2D 0A F2 | 	cmp	local08, local07 wz
20ee0     38 00 90 5D |  if_ne	jmp	#LR__3554
20ee4     0C 20 06 F1 | 	add	local02, #12
20ee8     10 13 02 FB | 	rdlong	arg01, local02
20eec     0C 20 86 F1 | 	sub	local02, #12
20ef0     1C 1E 06 F1 | 	add	local01, #28
20ef4     0F 33 02 FB | 	rdlong	local11, local01
20ef8     1C 1E 86 F1 | 	sub	local01, #28
20efc     19 15 02 F6 | 	mov	arg02, local11
20f00     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
20f04     00 FA 4D F2 | 	cmps	result1, #0 wz
20f08     12 33 02 56 |  if_ne	mov	local11, local04
20f0c     19 33 E2 58 |  if_ne	getbyte	local11, local11, #0
20f10     01 32 86 51 |  if_ne	sub	local11, #1
20f14     19 2F 02 56 |  if_ne	mov	local09, local11
20f18     04 00 90 5D |  if_ne	jmp	#LR__3555
20f1c                 | LR__3554
20f1c     FF 2E 06 F6 | 	mov	local09, #255
20f20                 | LR__3555
20f20     17 25 02 F6 | 	mov	local04, local09
20f24     78 00 90 FD | 	jmp	#LR__3559
20f28                 | LR__3556
20f28     12 2F 02 F6 | 	mov	local09, local04
20f2c     07 2E 4E F7 | 	zerox	local09, #7 wz
20f30     20 00 90 5D |  if_ne	jmp	#LR__3557
20f34     11 31 E2 F8 | 	getbyte	local10, local03, #0
20f38     1C 1E 06 F1 | 	add	local01, #28
20f3c     0F 13 02 FB | 	rdlong	arg01, local01
20f40     1C 1E 86 F1 | 	sub	local01, #28
20f44     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
20f48     FD FA E1 F8 | 	getbyte	result1, result1, #0
20f4c     FD 30 0A F2 | 	cmp	local10, result1 wz
20f50     60 00 90 AD |  if_e	jmp	#LR__3561
20f54                 | LR__3557
20f54     2B 1E 06 F1 | 	add	local01, #43
20f58     0F 2F C2 FA | 	rdbyte	local09, local01
20f5c     2B 1E 86 F1 | 	sub	local01, #43
20f60     01 2E CE F7 | 	test	local09, #1 wz
20f64     24 00 90 5D |  if_ne	jmp	#LR__3558
20f68     1C 1E 06 F1 | 	add	local01, #28
20f6c     0F 13 02 FB | 	rdlong	arg01, local01
20f70     04 1E 06 F1 | 	add	local01, #4
20f74     0F 15 02 F6 | 	mov	arg02, local01
20f78     20 1E 86 F1 | 	sub	local01, #32
20f7c     0B 16 06 F6 | 	mov	arg03, #11
20f80     88 DA BF FD | 	call	#_fatfs_cc_memcmp
20f84     00 FA 0D F2 | 	cmp	result1, #0 wz
20f88     28 00 90 AD |  if_e	jmp	#LR__3561
20f8c                 | LR__3558
20f8c     FF 24 06 F6 | 	mov	local04, #255
20f90     2C 1E 06 F1 | 	add	local01, #44
20f94     FF FF FF FF 
20f98     0F FF 6B FC | 	wrlong	##-1, local01
20f9c     2C 1E 86 F1 | 	sub	local01, #44
20fa0                 | LR__3559
20fa0                 | LR__3560
20fa0     0F 13 02 F6 | 	mov	arg01, local01
20fa4     00 14 06 F6 | 	mov	arg02, #0
20fa8     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
20fac     FD 26 0A F6 | 	mov	local05, result1 wz
20fb0     04 FE 9F AD |  if_e	jmp	#LR__3550
20fb4                 | LR__3561
20fb4                 | ' 
20fb4                 | ' 	return res;
20fb4     13 FB 01 F6 | 	mov	result1, local05
20fb8                 | LR__3562
20fb8     A7 F0 03 F6 | 	mov	ptra, fp
20fbc     B2 00 A0 FD | 	call	#popregs_
20fc0                 | _fatfs_cc_dir_find_ret
20fc0     2D 00 64 FD | 	ret
20fc4                 | 
20fc4                 | _fatfs_cc_dir_register
20fc4     0A 4A 05 F6 | 	mov	COUNT_, #10
20fc8     A8 00 A0 FD | 	call	#pushregs_
20fcc     2C F0 07 F1 | 	add	ptra, #44
20fd0     04 4E 05 F1 | 	add	fp, #4
20fd4     A7 12 62 FC | 	wrlong	arg01, fp
20fd8     09 1F 02 FB | 	rdlong	local01, arg01
20fdc     08 4E 05 F1 | 	add	fp, #8
20fe0     A7 1E 62 FC | 	wrlong	local01, fp
20fe4     08 4E 85 F1 | 	sub	fp, #8
20fe8     A7 20 02 FB | 	rdlong	local02, fp
20fec     04 4E 85 F1 | 	sub	fp, #4
20ff0     2B 20 06 F1 | 	add	local02, #43
20ff4     10 21 C2 FA | 	rdbyte	local02, local02
20ff8     A0 20 CE F7 | 	test	local02, #160 wz
20ffc     06 FA 05 56 |  if_ne	mov	result1, #6
21000     F8 03 90 5D |  if_ne	jmp	#LR__3585
21004                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
21004     14 4E 05 F1 | 	add	fp, #20
21008     A7 00 68 FC | 	wrlong	#0, fp
2100c     14 4E 85 F1 | 	sub	fp, #20
21010     97 28 48 FB | 	callpa	#(@LR__3571-@LR__3570)>>2,fcache_load_ptr_
21014                 | LR__3570
21014     0C 4E 05 F1 | 	add	fp, #12
21018     A7 20 02 FB | 	rdlong	local02, fp
2101c     0C 20 06 F1 | 	add	local02, #12
21020     10 23 02 FB | 	rdlong	local03, local02
21024     08 4E 05 F1 | 	add	fp, #8
21028     A7 24 02 FB | 	rdlong	local04, fp
2102c     14 4E 85 F1 | 	sub	fp, #20
21030     01 24 66 F0 | 	shl	local04, #1
21034     11 25 02 F1 | 	add	local04, local03
21038     12 21 EA FA | 	rdword	local02, local04 wz
2103c     24 00 90 AD |  if_e	jmp	#LR__3572
21040     14 4E 05 F1 | 	add	fp, #20
21044     A7 26 02 FB | 	rdlong	local05, fp
21048     13 29 02 F6 | 	mov	local06, local05
2104c     13 2B 02 F6 | 	mov	local07, local05
21050     15 2D 02 F6 | 	mov	local08, local07
21054     01 2C 06 F1 | 	add	local08, #1
21058     A7 2C 62 FC | 	wrlong	local08, fp
2105c     14 4E 85 F1 | 	sub	fp, #20
21060     B0 FF 9F FD | 	jmp	#LR__3570
21064                 | LR__3571
21064                 | LR__3572
21064     1C 4E 05 F1 | 	add	fp, #28
21068     A7 12 02 F6 | 	mov	arg01, fp
2106c     18 4E 85 F1 | 	sub	fp, #24
21070     A7 14 02 FB | 	rdlong	arg02, fp
21074     04 4E 85 F1 | 	sub	fp, #4
21078     20 14 06 F1 | 	add	arg02, #32
2107c     0C 16 06 F6 | 	mov	arg03, #12
21080     F8 73 BF FD | 	call	#__system____builtin_memmove
21084     27 4E 05 F1 | 	add	fp, #39
21088     A7 2E C2 FA | 	rdbyte	local09, fp
2108c     27 4E 85 F1 | 	sub	fp, #39
21090     01 2E CE F7 | 	test	local09, #1 wz
21094     F4 00 90 AD |  if_e	jmp	#LR__3575
21098     04 4E 05 F1 | 	add	fp, #4
2109c     A7 30 02 FB | 	rdlong	local10, fp
210a0     2B 30 06 F1 | 	add	local10, #43
210a4     18 81 48 FC | 	wrbyte	#64, local10
210a8                 | ' 		dp->fn[ 11 ] =  0x40 ;
210a8                 | ' 		for (n = 1; n < 100; n++) {
210a8     0C 4E 05 F1 | 	add	fp, #12
210ac     A7 02 68 FC | 	wrlong	#1, fp
210b0     10 4E 85 F1 | 	sub	fp, #16
210b4                 | LR__3573
210b4     10 4E 05 F1 | 	add	fp, #16
210b8     A7 20 02 FB | 	rdlong	local02, fp
210bc     10 4E 85 F1 | 	sub	fp, #16
210c0     64 20 16 F2 | 	cmp	local02, #100 wc
210c4     70 00 90 3D |  if_ae	jmp	#LR__3574
210c8     04 4E 05 F1 | 	add	fp, #4
210cc     A7 12 02 FB | 	rdlong	arg01, fp
210d0     20 12 06 F1 | 	add	arg01, #32
210d4     18 4E 05 F1 | 	add	fp, #24
210d8     A7 14 02 F6 | 	mov	arg02, fp
210dc     10 4E 85 F1 | 	sub	fp, #16
210e0     A7 30 02 FB | 	rdlong	local10, fp
210e4     0C 30 06 F1 | 	add	local10, #12
210e8     18 17 02 FB | 	rdlong	arg03, local10
210ec     04 4E 05 F1 | 	add	fp, #4
210f0     A7 18 02 FB | 	rdlong	arg04, fp
210f4     10 4E 85 F1 | 	sub	fp, #16
210f8     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
210fc     04 4E 05 F1 | 	add	fp, #4
21100     A7 12 02 FB | 	rdlong	arg01, fp
21104     04 4E 85 F1 | 	sub	fp, #4
21108     70 FC BF FD | 	call	#_fatfs_cc_dir_find
2110c     08 4E 05 F1 | 	add	fp, #8
21110     A7 FA 61 FC | 	wrlong	result1, fp
21114     00 FA 4D F2 | 	cmps	result1, #0 wz
21118     08 4E 85 F1 | 	sub	fp, #8
2111c     18 00 90 5D |  if_ne	jmp	#LR__3574
21120     10 4E 05 F1 | 	add	fp, #16
21124     A7 30 02 FB | 	rdlong	local10, fp
21128     01 30 06 F1 | 	add	local10, #1
2112c     A7 30 62 FC | 	wrlong	local10, fp
21130     10 4E 85 F1 | 	sub	fp, #16
21134     7C FF 9F FD | 	jmp	#LR__3573
21138                 | LR__3574
21138     10 4E 05 F1 | 	add	fp, #16
2113c     A7 30 02 FB | 	rdlong	local10, fp
21140     10 4E 85 F1 | 	sub	fp, #16
21144     64 30 0E F2 | 	cmp	local10, #100 wz
21148     07 FA 05 A6 |  if_e	mov	result1, #7
2114c     AC 02 90 AD |  if_e	jmp	#LR__3585
21150     08 4E 05 F1 | 	add	fp, #8
21154     A7 30 02 FB | 	rdlong	local10, fp
21158     08 4E 85 F1 | 	sub	fp, #8
2115c     04 30 0E F2 | 	cmp	local10, #4 wz
21160     08 4E 05 51 |  if_ne	add	fp, #8
21164     A7 FA 01 5B |  if_ne	rdlong	result1, fp
21168     08 4E 85 51 |  if_ne	sub	fp, #8
2116c     8C 02 90 5D |  if_ne	jmp	#LR__3585
21170     04 4E 05 F1 | 	add	fp, #4
21174     A7 30 02 FB | 	rdlong	local10, fp
21178     23 4E 05 F1 | 	add	fp, #35
2117c     A7 1E C2 FA | 	rdbyte	local01, fp
21180     27 4E 85 F1 | 	sub	fp, #39
21184     2B 30 06 F1 | 	add	local10, #43
21188     18 1F 42 FC | 	wrbyte	local01, local10
2118c                 | LR__3575
2118c     27 4E 05 F1 | 	add	fp, #39
21190     A7 20 C2 FA | 	rdbyte	local02, fp
21194     27 4E 85 F1 | 	sub	fp, #39
21198     02 20 CE F7 | 	test	local02, #2 wz
2119c     20 00 90 AD |  if_e	jmp	#LR__3576
211a0     14 4E 05 F1 | 	add	fp, #20
211a4     A7 30 02 FB | 	rdlong	local10, fp
211a8     0C 30 06 F1 | 	add	local10, #12
211ac     0D 30 16 FD | 	qdiv	local10, #13
211b0     14 4E 85 F1 | 	sub	fp, #20
211b4     18 30 62 FD | 	getqx	local10
211b8     01 30 06 F1 | 	add	local10, #1
211bc     04 00 90 FD | 	jmp	#LR__3577
211c0                 | LR__3576
211c0     01 30 06 F6 | 	mov	local10, #1
211c4                 | LR__3577
211c4     18 4E 05 F1 | 	add	fp, #24
211c8     A7 30 62 FC | 	wrlong	local10, fp
211cc     14 4E 85 F1 | 	sub	fp, #20
211d0     A7 12 02 FB | 	rdlong	arg01, fp
211d4     18 15 02 F6 | 	mov	arg02, local10
211d8     04 4E 85 F1 | 	sub	fp, #4
211dc     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
211e0     08 4E 05 F1 | 	add	fp, #8
211e4     A7 FA 61 FC | 	wrlong	result1, fp
211e8     08 4E 85 F1 | 	sub	fp, #8
211ec     00 FA 0D F2 | 	cmp	result1, #0 wz
211f0     38 01 90 5D |  if_ne	jmp	#LR__3582
211f4     18 4E 05 F1 | 	add	fp, #24
211f8     A7 30 02 FB | 	rdlong	local10, fp
211fc     01 30 8E F1 | 	sub	local10, #1 wz
21200     A7 30 62 FC | 	wrlong	local10, fp
21204     18 4E 85 F1 | 	sub	fp, #24
21208     20 01 90 AD |  if_e	jmp	#LR__3582
2120c     04 4E 05 F1 | 	add	fp, #4
21210     A7 30 02 FB | 	rdlong	local10, fp
21214     18 13 02 F6 | 	mov	arg01, local10
21218     14 4E 05 F1 | 	add	fp, #20
2121c     A7 18 02 FB | 	rdlong	arg04, fp
21220     18 4E 85 F1 | 	sub	fp, #24
21224     05 18 66 F0 | 	shl	arg04, #5
21228     10 30 06 F1 | 	add	local10, #16
2122c     18 15 02 FB | 	rdlong	arg02, local10
21230     0C 15 82 F1 | 	sub	arg02, arg04
21234     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
21238     08 4E 05 F1 | 	add	fp, #8
2123c     A7 FA 61 FC | 	wrlong	result1, fp
21240     08 4E 85 F1 | 	sub	fp, #8
21244     00 FA 0D F2 | 	cmp	result1, #0 wz
21248     E0 00 90 5D |  if_ne	jmp	#LR__3581
2124c     04 4E 05 F1 | 	add	fp, #4
21250     A7 12 02 FB | 	rdlong	arg01, fp
21254     04 4E 85 F1 | 	sub	fp, #4
21258     20 12 06 F1 | 	add	arg01, #32
2125c     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
21260     FD 30 02 F6 | 	mov	local10, result1
21264     28 4E 05 F1 | 	add	fp, #40
21268     A7 30 42 FC | 	wrbyte	local10, fp
2126c     28 4E 85 F1 | 	sub	fp, #40
21270                 | ' 			sum = sum_sfn(dp->fn);
21270                 | ' 			do {
21270                 | LR__3578
21270     0C 4E 05 F1 | 	add	fp, #12
21274     A7 12 02 FB | 	rdlong	arg01, fp
21278     08 4E 85 F1 | 	sub	fp, #8
2127c     A7 1E 02 FB | 	rdlong	local01, fp
21280     04 4E 85 F1 | 	sub	fp, #4
21284     18 1E 06 F1 | 	add	local01, #24
21288     0F 15 02 FB | 	rdlong	arg02, local01
2128c     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
21290     08 4E 05 F1 | 	add	fp, #8
21294     A7 FA 61 FC | 	wrlong	result1, fp
21298     00 FA 4D F2 | 	cmps	result1, #0 wz
2129c     08 4E 85 F1 | 	sub	fp, #8
212a0     88 00 90 5D |  if_ne	jmp	#LR__3580
212a4     0C 4E 05 F1 | 	add	fp, #12
212a8     A7 20 02 FB | 	rdlong	local02, fp
212ac     0C 20 06 F1 | 	add	local02, #12
212b0     10 13 02 FB | 	rdlong	arg01, local02
212b4     08 4E 85 F1 | 	sub	fp, #8
212b8     A7 1E 02 FB | 	rdlong	local01, fp
212bc     1C 1E 06 F1 | 	add	local01, #28
212c0     0F 15 02 FB | 	rdlong	arg02, local01
212c4     14 4E 05 F1 | 	add	fp, #20
212c8     A7 16 02 FB | 	rdlong	arg03, fp
212cc     10 4E 05 F1 | 	add	fp, #16
212d0     A7 18 C2 FA | 	rdbyte	arg04, fp
212d4     28 4E 85 F1 | 	sub	fp, #40
212d8     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
212dc     0C 4E 05 F1 | 	add	fp, #12
212e0     A7 30 02 FB | 	rdlong	local10, fp
212e4     03 30 06 F1 | 	add	local10, #3
212e8     18 03 48 FC | 	wrbyte	#1, local10
212ec     08 4E 85 F1 | 	sub	fp, #8
212f0     A7 12 02 FB | 	rdlong	arg01, fp
212f4     04 4E 85 F1 | 	sub	fp, #4
212f8     00 14 06 F6 | 	mov	arg02, #0
212fc     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
21300     08 4E 05 F1 | 	add	fp, #8
21304     A7 FA 61 FC | 	wrlong	result1, fp
21308     00 FA 4D F2 | 	cmps	result1, #0 wz
2130c     08 4E 85 F1 | 	sub	fp, #8
21310     18 00 90 5D |  if_ne	jmp	#LR__3579
21314     18 4E 05 F1 | 	add	fp, #24
21318     A7 30 02 FB | 	rdlong	local10, fp
2131c     01 30 8E F1 | 	sub	local10, #1 wz
21320     A7 30 62 FC | 	wrlong	local10, fp
21324     18 4E 85 F1 | 	sub	fp, #24
21328     44 FF 9F 5D |  if_ne	jmp	#LR__3578
2132c                 | LR__3579
2132c                 | LR__3580
2132c                 | LR__3581
2132c                 | LR__3582
2132c     08 4E 05 F1 | 	add	fp, #8
21330     A7 30 0A FB | 	rdlong	local10, fp wz
21334     08 4E 85 F1 | 	sub	fp, #8
21338     B4 00 90 5D |  if_ne	jmp	#LR__3584
2133c     0C 4E 05 F1 | 	add	fp, #12
21340     A7 12 02 FB | 	rdlong	arg01, fp
21344     08 4E 85 F1 | 	sub	fp, #8
21348     A7 1E 02 FB | 	rdlong	local01, fp
2134c     04 4E 85 F1 | 	sub	fp, #4
21350     18 1E 06 F1 | 	add	local01, #24
21354     0F 15 02 FB | 	rdlong	arg02, local01
21358     18 E6 BF FD | 	call	#_fatfs_cc_move_window
2135c     08 4E 05 F1 | 	add	fp, #8
21360     A7 FA 61 FC | 	wrlong	result1, fp
21364     08 4E 85 F1 | 	sub	fp, #8
21368     00 FA 0D F2 | 	cmp	result1, #0 wz
2136c     80 00 90 5D |  if_ne	jmp	#LR__3583
21370     04 4E 05 F1 | 	add	fp, #4
21374     A7 20 02 FB | 	rdlong	local02, fp
21378     04 4E 85 F1 | 	sub	fp, #4
2137c     1C 20 06 F1 | 	add	local02, #28
21380     10 13 02 FB | 	rdlong	arg01, local02
21384     00 14 06 F6 | 	mov	arg02, #0
21388     20 16 06 F6 | 	mov	arg03, #32
2138c     98 00 A0 FD | 	call	#\builtin_bytefill_
21390     04 4E 05 F1 | 	add	fp, #4
21394     A7 14 02 FB | 	rdlong	arg02, fp
21398     0A 1F 02 F6 | 	mov	local01, arg02
2139c     1C 1E 06 F1 | 	add	local01, #28
213a0     0F 13 02 FB | 	rdlong	arg01, local01
213a4     04 4E 85 F1 | 	sub	fp, #4
213a8     20 14 06 F1 | 	add	arg02, #32
213ac     0B 16 06 F6 | 	mov	arg03, #11
213b0     C8 70 BF FD | 	call	#__system____builtin_memmove
213b4     04 4E 05 F1 | 	add	fp, #4
213b8     A7 2E 02 FB | 	rdlong	local09, fp
213bc     17 31 02 F6 | 	mov	local10, local09
213c0     1C 30 06 F1 | 	add	local10, #28
213c4     18 1F 02 FB | 	rdlong	local01, local10
213c8     2B 2E 06 F1 | 	add	local09, #43
213cc     17 31 C2 FA | 	rdbyte	local10, local09
213d0     18 30 06 F5 | 	and	local10, #24
213d4     0C 1E 06 F1 | 	add	local01, #12
213d8     0F 31 42 FC | 	wrbyte	local10, local01
213dc     08 4E 05 F1 | 	add	fp, #8
213e0     A7 30 02 FB | 	rdlong	local10, fp
213e4     0C 4E 85 F1 | 	sub	fp, #12
213e8     03 30 06 F1 | 	add	local10, #3
213ec     18 03 48 FC | 	wrbyte	#1, local10
213f0                 | LR__3583
213f0                 | LR__3584
213f0                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
213f0                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
213f0                 | ' 
213f0                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
213f0                 | ' 
213f0                 | ' 			fs->wflag = 1;
213f0                 | ' 		}
213f0                 | ' 	}
213f0                 | ' 
213f0                 | ' 	return res;
213f0     08 4E 05 F1 | 	add	fp, #8
213f4     A7 FA 01 FB | 	rdlong	result1, fp
213f8     08 4E 85 F1 | 	sub	fp, #8
213fc                 | LR__3585
213fc     A7 F0 03 F6 | 	mov	ptra, fp
21400     B2 00 A0 FD | 	call	#popregs_
21404                 | _fatfs_cc_dir_register_ret
21404     2D 00 64 FD | 	ret
21408                 | 
21408                 | _fatfs_cc_dir_remove
21408     05 4A 05 F6 | 	mov	COUNT_, #5
2140c     A8 00 A0 FD | 	call	#pushregs_
21410     09 1F 02 F6 | 	mov	local01, arg01
21414     0F 21 02 FB | 	rdlong	local02, local01
21418     10 1E 06 F1 | 	add	local01, #16
2141c     0F 23 02 FB | 	rdlong	local03, local01
21420     1C 1E 06 F1 | 	add	local01, #28
21424     0F 15 02 FB | 	rdlong	arg02, local01
21428     2C 1E 86 F1 | 	sub	local01, #44
2142c     FF FF 7F FF 
21430     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
21434     00 24 06 A6 |  if_e	mov	local04, #0
21438     18 00 90 AD |  if_e	jmp	#LR__3590
2143c     0F 13 02 F6 | 	mov	arg01, local01
21440     2C 1E 06 F1 | 	add	local01, #44
21444     0F 15 02 FB | 	rdlong	arg02, local01
21448     2C 1E 86 F1 | 	sub	local01, #44
2144c     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
21450     FD 24 02 F6 | 	mov	local04, result1
21454                 | LR__3590
21454     12 27 0A F6 | 	mov	local05, local04 wz
21458     64 00 90 5D |  if_ne	jmp	#LR__3593
2145c                 | ' 		do {
2145c                 | LR__3591
2145c     18 1E 06 F1 | 	add	local01, #24
21460     0F 15 02 FB | 	rdlong	arg02, local01
21464     18 1E 86 F1 | 	sub	local01, #24
21468     10 13 02 F6 | 	mov	arg01, local02
2146c     04 E5 BF FD | 	call	#_fatfs_cc_move_window
21470     FD 26 0A F6 | 	mov	local05, result1 wz
21474     40 00 90 5D |  if_ne	jmp	#LR__3592
21478     1C 1E 06 F1 | 	add	local01, #28
2147c     0F 25 02 FB | 	rdlong	local04, local01
21480     12 CB 49 FC | 	wrbyte	#229, local04
21484     03 20 06 F1 | 	add	local02, #3
21488     10 03 48 FC | 	wrbyte	#1, local02
2148c     03 20 86 F1 | 	sub	local02, #3
21490     0C 1E 86 F1 | 	sub	local01, #12
21494     0F 25 02 FB | 	rdlong	local04, local01
21498     10 1E 86 F1 | 	sub	local01, #16
2149c     11 25 12 F2 | 	cmp	local04, local03 wc
214a0     14 00 90 3D |  if_ae	jmp	#LR__3592
214a4     0F 13 02 F6 | 	mov	arg01, local01
214a8     00 14 06 F6 | 	mov	arg02, #0
214ac     90 EF BF FD | 	call	#_fatfs_cc_dir_next
214b0     FD 26 0A F6 | 	mov	local05, result1 wz
214b4     A4 FF 9F AD |  if_e	jmp	#LR__3591
214b8                 | LR__3592
214b8     04 26 0E F2 | 	cmp	local05, #4 wz
214bc     02 26 06 A6 |  if_e	mov	local05, #2
214c0                 | LR__3593
214c0                 | ' 	}
214c0                 | ' #line 2590 "ff.c"
214c0                 | ' 	return res;
214c0     13 FB 01 F6 | 	mov	result1, local05
214c4     A7 F0 03 F6 | 	mov	ptra, fp
214c8     B2 00 A0 FD | 	call	#popregs_
214cc                 | _fatfs_cc_dir_remove_ret
214cc     2D 00 64 FD | 	ret
214d0                 | 
214d0                 | _fatfs_cc_get_fileinfo
214d0     0F 4A 05 F6 | 	mov	COUNT_, #15
214d4     A8 00 A0 FD | 	call	#pushregs_
214d8     09 1F 02 F6 | 	mov	local01, arg01
214dc     0A 21 02 F6 | 	mov	local02, arg02
214e0     0F 23 02 FB | 	rdlong	local03, local01
214e4     1C 20 06 F1 | 	add	local02, #28
214e8     10 01 48 FC | 	wrbyte	#0, local02
214ec     1C 20 86 F1 | 	sub	local02, #28
214f0     18 1E 06 F1 | 	add	local01, #24
214f4     0F 25 0A FB | 	rdlong	local04, local01 wz
214f8     18 1E 86 F1 | 	sub	local01, #24
214fc     90 03 90 AD |  if_e	jmp	#LR__3614
21500     2C 1E 06 F1 | 	add	local01, #44
21504     0F 25 02 FB | 	rdlong	local04, local01
21508     2C 1E 86 F1 | 	sub	local01, #44
2150c     FF FF 7F FF 
21510     FF 25 0E F2 | 	cmp	local04, ##-1 wz
21514     D8 00 90 AD |  if_e	jmp	#LR__3603
21518     00 26 06 F6 | 	mov	local05, #0
2151c     00 28 06 F6 | 	mov	local06, #0
21520     00 2A 06 F6 | 	mov	local07, #0
21524                 | ' 			si = di = 0;
21524                 | ' 			hs = 0;
21524                 | ' 			while (fs->lfnbuf[si] != 0) {
21524                 | LR__3600
21524     0C 22 06 F1 | 	add	local03, #12
21528     11 25 02 FB | 	rdlong	local04, local03
2152c     0C 22 86 F1 | 	sub	local03, #12
21530     14 2D 02 F6 | 	mov	local08, local06
21534     01 2C 66 F0 | 	shl	local08, #1
21538     12 2D 02 F1 | 	add	local08, local04
2153c     16 25 EA FA | 	rdword	local04, local08 wz
21540     90 00 90 AD |  if_e	jmp	#LR__3602
21544     0C 22 06 F1 | 	add	local03, #12
21548     11 2F 02 FB | 	rdlong	local09, local03
2154c     0C 22 86 F1 | 	sub	local03, #12
21550     14 31 02 F6 | 	mov	local10, local06
21554     01 30 66 F0 | 	shl	local10, #1
21558     17 31 02 F1 | 	add	local10, local09
2155c     18 33 E2 FA | 	rdword	local11, local10
21560     15 25 02 F6 | 	mov	local04, local07
21564     0F 24 4E F7 | 	zerox	local04, #15 wz
21568     01 28 06 F1 | 	add	local06, #1
2156c     24 00 90 5D |  if_ne	jmp	#LR__3601
21570     19 35 32 F9 | 	getword	local12, local11, #0
21574     6C 00 00 FF 
21578     00 34 16 F2 | 	cmp	local12, ##55296 wc
2157c     14 00 90 CD |  if_b	jmp	#LR__3601
21580     19 37 32 F9 | 	getword	local13, local11, #0
21584     70 00 00 FF 
21588     00 36 16 F2 | 	cmp	local13, ##57344 wc
2158c     19 2B 02 C6 |  if_b	mov	local07, local11
21590                 | ' 					hs = wc; continue;
21590     90 FF 9F CD |  if_b	jmp	#LR__3600
21594                 | LR__3601
21594     15 13 32 F9 | 	getword	arg01, local07, #0
21598     10 12 66 F0 | 	shl	arg01, #16
2159c     19 33 32 F9 | 	getword	local11, local11, #0
215a0     19 13 42 F5 | 	or	arg01, local11
215a4     13 15 02 F6 | 	mov	arg02, local05
215a8     1C 20 06 F1 | 	add	local02, #28
215ac     10 15 02 F1 | 	add	arg02, local02
215b0     FF 16 06 F6 | 	mov	arg03, #255
215b4     13 17 82 F1 | 	sub	arg03, local05
215b8     1C 20 86 F1 | 	sub	local02, #28
215bc     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
215c0     FD 38 0A F6 | 	mov	local14, result1 wz
215c4     00 26 06 A6 |  if_e	mov	local05, #0
215c8     1C 27 02 51 |  if_ne	add	local05, local14
215cc     00 2A 06 56 |  if_ne	mov	local07, #0
215d0     50 FF 9F 5D |  if_ne	jmp	#LR__3600
215d4                 | LR__3602
215d4     15 25 02 F6 | 	mov	local04, local07
215d8     0F 24 4E F7 | 	zerox	local04, #15 wz
215dc     00 26 06 56 |  if_ne	mov	local05, #0
215e0     1C 20 06 F1 | 	add	local02, #28
215e4     10 27 02 F1 | 	add	local05, local02
215e8     13 01 48 FC | 	wrbyte	#0, local05
215ec     1C 20 86 F1 | 	sub	local02, #28
215f0                 | LR__3603
215f0     00 26 06 F6 | 	mov	local05, #0
215f4     00 28 06 F6 | 	mov	local06, #0
215f8                 | ' 			fno->fname[di] = 0;
215f8                 | ' 		}
215f8                 | ' 	}
215f8                 | ' 
215f8                 | ' 	si = di = 0;
215f8                 | ' 	while (si < 11) {
215f8                 | LR__3604
215f8     0B 28 16 F2 | 	cmp	local06, #11 wc
215fc     20 01 90 3D |  if_ae	jmp	#LR__3607
21600     1C 1E 06 F1 | 	add	local01, #28
21604     0F 2F 02 FB | 	rdlong	local09, local01
21608     1C 1E 86 F1 | 	sub	local01, #28
2160c     14 31 02 F6 | 	mov	local10, local06
21610     17 31 02 F1 | 	add	local10, local09
21614     18 33 C2 FA | 	rdbyte	local11, local10
21618     19 25 32 F9 | 	getword	local04, local11, #0
2161c     20 24 0E F2 | 	cmp	local04, #32 wz
21620     01 28 06 F1 | 	add	local06, #1
21624     D0 FF 9F AD |  if_e	jmp	#LR__3604
21628     19 25 32 F9 | 	getword	local04, local11, #0
2162c     05 24 0E F2 | 	cmp	local04, #5 wz
21630     E5 32 06 A6 |  if_e	mov	local11, #229
21634     09 28 0E F2 | 	cmp	local06, #9 wz
21638     20 00 90 5D |  if_ne	jmp	#LR__3605
2163c     0C 26 16 F2 | 	cmp	local05, #12 wc
21640     18 00 90 3D |  if_ae	jmp	#LR__3605
21644     13 37 02 F6 | 	mov	local13, local05
21648     0C 20 06 F1 | 	add	local02, #12
2164c     10 37 02 F1 | 	add	local13, local02
21650     1B 5D 48 FC | 	wrbyte	#46, local13
21654     01 26 06 F1 | 	add	local05, #1
21658     0C 20 86 F1 | 	sub	local02, #12
2165c                 | LR__3605
2165c     19 13 32 F9 | 	getword	arg01, local11, #0
21660     07 12 4E F7 | 	zerox	arg01, #7 wz
21664     00 FA 05 56 |  if_ne	mov	result1, #0
21668                 | ' 
21668                 | ' 	return 0;
21668     00 FA 05 A6 |  if_e	mov	result1, #0
2166c     00 FA 0D F2 | 	cmp	result1, #0 wz
21670     08 28 0E 52 |  if_ne	cmp	local06, #8 wz
21674     0B 28 0E 52 |  if_ne	cmp	local06, #11 wz
21678     50 00 90 AD |  if_e	jmp	#LR__3606
2167c     1C 1E 06 F1 | 	add	local01, #28
21680     0F 31 02 FB | 	rdlong	local10, local01
21684     1C 1E 86 F1 | 	sub	local01, #28
21688     14 2D 02 F6 | 	mov	local08, local06
2168c     18 2D 02 F1 | 	add	local08, local10
21690     16 13 CA FA | 	rdbyte	arg01, local08 wz
21694     00 FA 05 56 |  if_ne	mov	result1, #0
21698                 | ' 
21698                 | ' 	return 0;
21698     00 FA 05 A6 |  if_e	mov	result1, #0
2169c     00 FA 0D F2 | 	cmp	result1, #0 wz
216a0     28 00 90 AD |  if_e	jmp	#LR__3606
216a4     19 33 32 F9 | 	getword	local11, local11, #0
216a8     08 32 66 F0 | 	shl	local11, #8
216ac     1C 1E 06 F1 | 	add	local01, #28
216b0     0F 39 02 FB | 	rdlong	local14, local01
216b4     1C 1E 86 F1 | 	sub	local01, #28
216b8     14 2F 02 F6 | 	mov	local09, local06
216bc     1C 2F 02 F1 | 	add	local09, local14
216c0     17 35 C2 FA | 	rdbyte	local12, local09
216c4     1A 33 42 F5 | 	or	local11, local12
216c8     01 28 06 F1 | 	add	local06, #1
216cc                 | LR__3606
216cc     19 13 02 F6 | 	mov	arg01, local11
216d0     01 00 00 FF 
216d4     52 15 06 F6 | 	mov	arg02, ##850
216d8     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
216dc     FD 32 02 F6 | 	mov	local11, result1
216e0     19 25 02 F6 | 	mov	local04, local11
216e4     0F 24 4E F7 | 	zerox	local04, #15 wz
216e8     00 26 06 A6 |  if_e	mov	local05, #0
216ec     30 00 90 AD |  if_e	jmp	#LR__3607
216f0     19 13 32 F9 | 	getword	arg01, local11, #0
216f4     13 15 02 F6 | 	mov	arg02, local05
216f8     0C 20 06 F1 | 	add	local02, #12
216fc     10 15 02 F1 | 	add	arg02, local02
21700     0C 16 06 F6 | 	mov	arg03, #12
21704     13 17 82 F1 | 	sub	arg03, local05
21708     0C 20 86 F1 | 	sub	local02, #12
2170c     EC DF BF FD | 	call	#_fatfs_cc_put_utf
21710     FD 38 0A F6 | 	mov	local14, result1 wz
21714     00 26 06 A6 |  if_e	mov	local05, #0
21718     1C 27 02 51 |  if_ne	add	local05, local14
2171c     D8 FE 9F 5D |  if_ne	jmp	#LR__3604
21720                 | LR__3607
21720     13 25 02 F6 | 	mov	local04, local05
21724     0C 20 06 F1 | 	add	local02, #12
21728     10 25 02 F1 | 	add	local04, local02
2172c     12 01 48 FC | 	wrbyte	#0, local04
21730     10 20 06 F1 | 	add	local02, #16
21734     10 25 CA FA | 	rdbyte	local04, local02 wz
21738     1C 20 86 F1 | 	sub	local02, #28
2173c     F8 00 90 5D |  if_ne	jmp	#LR__3613
21740     00 26 0E F2 | 	cmp	local05, #0 wz
21744     1C 00 90 5D |  if_ne	jmp	#LR__3608
21748     13 37 02 F6 | 	mov	local13, local05
2174c     1C 20 06 F1 | 	add	local02, #28
21750     10 37 02 F1 | 	add	local13, local02
21754     1B 7F 48 FC | 	wrbyte	#63, local13
21758     01 26 06 F1 | 	add	local05, #1
2175c     1C 20 86 F1 | 	sub	local02, #28
21760     A4 00 90 FD | 	jmp	#LR__3612
21764                 | LR__3608
21764                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
21764     00 26 06 F6 | 	mov	local05, #0
21768     00 28 06 F6 | 	mov	local06, #0
2176c     08 3A 06 F6 | 	mov	local15, #8
21770                 | LR__3609
21770     14 25 02 F6 | 	mov	local04, local06
21774     0C 20 06 F1 | 	add	local02, #12
21778     10 25 02 F1 | 	add	local04, local02
2177c     12 37 CA FA | 	rdbyte	local13, local04 wz
21780     0C 20 86 F1 | 	sub	local02, #12
21784     80 00 90 AD |  if_e	jmp	#LR__3611
21788     14 2D 02 F6 | 	mov	local08, local06
2178c     0C 20 06 F1 | 	add	local02, #12
21790     10 2D 02 F1 | 	add	local08, local02
21794     16 33 C2 FA | 	rdbyte	local11, local08
21798     19 39 32 F9 | 	getword	local14, local11, #0
2179c     2E 38 0E F2 | 	cmp	local14, #46 wz
217a0     0C 20 86 F1 | 	sub	local02, #12
217a4     10 3A 06 A6 |  if_e	mov	local15, #16
217a8     19 39 32 F9 | 	getword	local14, local11, #0
217ac     41 38 16 F2 | 	cmp	local14, #65 wc
217b0     30 00 90 CD |  if_b	jmp	#LR__3610
217b4     19 2D 32 F9 | 	getword	local08, local11, #0
217b8     5B 2C 16 F2 | 	cmp	local08, #91 wc
217bc     24 00 90 3D |  if_ae	jmp	#LR__3610
217c0     1C 1E 06 F1 | 	add	local01, #28
217c4     0F 2F 02 FB | 	rdlong	local09, local01
217c8     1C 1E 86 F1 | 	sub	local01, #28
217cc     0C 2E 06 F1 | 	add	local09, #12
217d0     17 31 C2 FA | 	rdbyte	local10, local09
217d4     1D 39 E2 F8 | 	getbyte	local14, local15, #0
217d8     1C 31 CA F7 | 	test	local10, local14 wz
217dc     19 33 32 59 |  if_ne	getword	local11, local11, #0
217e0     20 32 06 51 |  if_ne	add	local11, #32
217e4                 | LR__3610
217e4     13 39 02 F6 | 	mov	local14, local05
217e8     1C 20 06 F1 | 	add	local02, #28
217ec     10 39 02 F1 | 	add	local14, local02
217f0     19 33 32 F9 | 	getword	local11, local11, #0
217f4     1C 33 42 FC | 	wrbyte	local11, local14
217f8     01 28 06 F1 | 	add	local06, #1
217fc     01 26 06 F1 | 	add	local05, #1
21800     1C 20 86 F1 | 	sub	local02, #28
21804     68 FF 9F FD | 	jmp	#LR__3609
21808                 | LR__3611
21808                 | LR__3612
21808     1C 20 06 F1 | 	add	local02, #28
2180c     10 27 02 F1 | 	add	local05, local02
21810     13 01 48 FC | 	wrbyte	#0, local05
21814     1C 1E 06 F1 | 	add	local01, #28
21818     0F 25 02 FB | 	rdlong	local04, local01
2181c     1C 1E 86 F1 | 	sub	local01, #28
21820     0C 24 06 F1 | 	add	local04, #12
21824     12 37 CA FA | 	rdbyte	local13, local04 wz
21828     1C 20 86 F1 | 	sub	local02, #28
2182c     0C 20 06 A1 |  if_e	add	local02, #12
21830     10 01 48 AC |  if_e	wrbyte	#0, local02
21834     0C 20 86 A1 |  if_e	sub	local02, #12
21838                 | LR__3613
21838     1C 1E 06 F1 | 	add	local01, #28
2183c     0F 35 02 FB | 	rdlong	local12, local01
21840     0B 34 06 F1 | 	add	local12, #11
21844     1A 25 C2 FA | 	rdbyte	local04, local12
21848     3F 24 06 F5 | 	and	local04, #63
2184c     08 20 06 F1 | 	add	local02, #8
21850     10 25 42 FC | 	wrbyte	local04, local02
21854     08 20 86 F1 | 	sub	local02, #8
21858     0F 13 02 FB | 	rdlong	arg01, local01
2185c     1C 12 06 F1 | 	add	arg01, #28
21860                 | ' {
21860                 | ' 
21860                 | ' 	return *((DWORD*)ptr);
21860     09 FB 01 FB | 	rdlong	result1, arg01
21864     10 FB 61 FC | 	wrlong	result1, local02
21868     0F 13 02 FB | 	rdlong	arg01, local01
2186c     16 12 06 F1 | 	add	arg01, #22
21870                 | ' {
21870                 | ' 
21870                 | ' 	return *((WORD*)ptr);
21870     09 FB E1 FA | 	rdword	result1, arg01
21874     06 20 06 F1 | 	add	local02, #6
21878     10 FB 51 FC | 	wrword	result1, local02
2187c     0F 13 02 FB | 	rdlong	arg01, local01
21880     18 12 06 F1 | 	add	arg01, #24
21884                 | ' {
21884                 | ' 
21884                 | ' 	return *((WORD*)ptr);
21884     09 FB E1 FA | 	rdword	result1, arg01
21888     02 20 86 F1 | 	sub	local02, #2
2188c     10 FB 51 FC | 	wrword	result1, local02
21890                 | LR__3614
21890     A7 F0 03 F6 | 	mov	ptra, fp
21894     B2 00 A0 FD | 	call	#popregs_
21898                 | _fatfs_cc_get_fileinfo_ret
21898     2D 00 64 FD | 	ret
2189c                 | 
2189c                 | _fatfs_cc_create_name
2189c     0D 4A 05 F6 | 	mov	COUNT_, #13
218a0     A8 00 A0 FD | 	call	#pushregs_
218a4     34 F0 07 F1 | 	add	ptra, #52
218a8     04 4E 05 F1 | 	add	fp, #4
218ac     A7 12 62 FC | 	wrlong	arg01, fp
218b0     04 4E 05 F1 | 	add	fp, #4
218b4     A7 14 62 FC | 	wrlong	arg02, fp
218b8     0A FB 01 FB | 	rdlong	result1, arg02
218bc     28 4E 05 F1 | 	add	fp, #40
218c0     A7 FA 61 FC | 	wrlong	result1, fp
218c4     2C 4E 85 F1 | 	sub	fp, #44
218c8     A7 FA 01 FB | 	rdlong	result1, fp
218cc     FD 1E 02 FB | 	rdlong	local01, result1
218d0     0C 1E 06 F1 | 	add	local01, #12
218d4     0F 21 02 FB | 	rdlong	local02, local01
218d8     14 4E 05 F1 | 	add	fp, #20
218dc     A7 20 62 FC | 	wrlong	local02, fp
218e0     14 4E 05 F1 | 	add	fp, #20
218e4     A7 00 68 FC | 	wrlong	#0, fp
218e8     2C 4E 85 F1 | 	sub	fp, #44
218ec                 | ' 
218ec                 | ' 
218ec                 | ' 
218ec                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
218ec                 | ' 	for (;;) {
218ec                 | LR__3620
218ec     30 4E 05 F1 | 	add	fp, #48
218f0     A7 12 02 F6 | 	mov	arg01, fp
218f4     30 4E 85 F1 | 	sub	fp, #48
218f8     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
218fc     1C 4E 05 F1 | 	add	fp, #28
21900     A7 FA 61 FC | 	wrlong	result1, fp
21904     1C 4E 85 F1 | 	sub	fp, #28
21908     FF FF 7F FF 
2190c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
21910     06 FA 05 A6 |  if_e	mov	result1, #6
21914     74 08 90 AD |  if_e	jmp	#LR__3660
21918     1C 4E 05 F1 | 	add	fp, #28
2191c     A7 1E 02 FB | 	rdlong	local01, fp
21920     1C 4E 85 F1 | 	sub	fp, #28
21924     80 00 00 FF 
21928     00 1E 16 F2 | 	cmp	local01, ##65536 wc
2192c     3C 00 90 CD |  if_b	jmp	#LR__3621
21930     18 4E 05 F1 | 	add	fp, #24
21934     A7 22 02 FB | 	rdlong	local03, fp
21938     14 4E 05 F1 | 	add	fp, #20
2193c     A7 1E 02 FB | 	rdlong	local01, fp
21940     0F 25 02 F6 | 	mov	local04, local01
21944     01 24 06 F1 | 	add	local04, #1
21948     A7 24 62 FC | 	wrlong	local04, fp
2194c     01 1E 66 F0 | 	shl	local01, #1
21950     11 1F 02 F1 | 	add	local01, local03
21954     10 4E 85 F1 | 	sub	fp, #16
21958     A7 26 02 FB | 	rdlong	local05, fp
2195c     1C 4E 85 F1 | 	sub	fp, #28
21960     13 29 02 F6 | 	mov	local06, local05
21964     10 28 46 F0 | 	shr	local06, #16
21968     0F 29 52 FC | 	wrword	local06, local01
2196c                 | LR__3621
2196c     1C 4E 05 F1 | 	add	fp, #28
21970     A7 1E 02 FB | 	rdlong	local01, fp
21974     08 4E 85 F1 | 	sub	fp, #8
21978     A7 1E 52 FC | 	wrword	local01, fp
2197c     A7 1E E2 FA | 	rdword	local01, fp
21980     14 4E 85 F1 | 	sub	fp, #20
21984     20 1E 16 F2 | 	cmp	local01, #32 wc
21988     B0 00 90 CD |  if_b	jmp	#LR__3623
2198c     14 4E 05 F1 | 	add	fp, #20
21990     A7 1E E2 FA | 	rdword	local01, fp
21994     14 4E 85 F1 | 	sub	fp, #20
21998     2F 1E 0E F2 | 	cmp	local01, #47 wz
2199c     14 4E 05 51 |  if_ne	add	fp, #20
219a0     A7 24 E2 5A |  if_ne	rdword	local04, fp
219a4     14 4E 85 51 |  if_ne	sub	fp, #20
219a8     5C 24 0E 52 |  if_ne	cmp	local04, #92 wz
219ac     8C 00 90 AD |  if_e	jmp	#LR__3623
219b0     14 4E 05 F1 | 	add	fp, #20
219b4     A7 12 E2 FA | 	rdword	arg01, fp
219b8     14 4E 85 F1 | 	sub	fp, #20
219bc     80 12 16 F2 | 	cmp	arg01, #128 wc
219c0     24 00 90 3D |  if_ae	jmp	#LR__3622
219c4     3C 01 00 FF 
219c8     F4 12 06 F6 | 	mov	arg01, ##@LR__4282
219cc     14 4E 05 F1 | 	add	fp, #20
219d0     A7 14 E2 FA | 	rdword	arg02, fp
219d4     14 4E 85 F1 | 	sub	fp, #20
219d8     FC D0 BF FD | 	call	#_fatfs_cc_strchr
219dc     00 FA 0D F2 | 	cmp	result1, #0 wz
219e0     06 FA 05 56 |  if_ne	mov	result1, #6
219e4     A4 07 90 5D |  if_ne	jmp	#LR__3660
219e8                 | LR__3622
219e8     2C 4E 05 F1 | 	add	fp, #44
219ec     A7 28 02 FB | 	rdlong	local06, fp
219f0     2C 4E 85 F1 | 	sub	fp, #44
219f4     FF 28 16 F2 | 	cmp	local06, #255 wc
219f8     06 FA 05 36 |  if_ae	mov	result1, #6
219fc     8C 07 90 3D |  if_ae	jmp	#LR__3660
21a00     18 4E 05 F1 | 	add	fp, #24
21a04     A7 22 02 FB | 	rdlong	local03, fp
21a08     14 4E 05 F1 | 	add	fp, #20
21a0c     A7 20 02 FB | 	rdlong	local02, fp
21a10     10 25 02 F6 | 	mov	local04, local02
21a14     01 24 06 F1 | 	add	local04, #1
21a18     A7 24 62 FC | 	wrlong	local04, fp
21a1c     10 1F 02 F6 | 	mov	local01, local02
21a20     01 1E 66 F0 | 	shl	local01, #1
21a24     11 1F 02 F1 | 	add	local01, local03
21a28     18 4E 85 F1 | 	sub	fp, #24
21a2c     A7 28 E2 FA | 	rdword	local06, fp
21a30     14 4E 85 F1 | 	sub	fp, #20
21a34     0F 29 52 FC | 	wrword	local06, local01
21a38     B0 FE 9F FD | 	jmp	#LR__3620
21a3c                 | LR__3623
21a3c     14 4E 05 F1 | 	add	fp, #20
21a40     A7 2A E2 FA | 	rdword	local07, fp
21a44     14 4E 85 F1 | 	sub	fp, #20
21a48     20 2A 16 F2 | 	cmp	local07, #32 wc
21a4c     10 4E 05 C1 |  if_b	add	fp, #16
21a50     A7 08 48 CC |  if_b	wrbyte	#4, fp
21a54     10 4E 85 C1 |  if_b	sub	fp, #16
21a58     74 00 90 CD |  if_b	jmp	#LR__3628
21a5c     97 24 48 FB | 	callpa	#(@LR__3626-@LR__3624)>>2,fcache_load_ptr_
21a60                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
21a60                 | LR__3624
21a60     30 4E 05 F1 | 	add	fp, #48
21a64     A7 24 02 FB | 	rdlong	local04, fp
21a68     30 4E 85 F1 | 	sub	fp, #48
21a6c     12 2B C2 FA | 	rdbyte	local07, local04
21a70     2F 2A 0E F2 | 	cmp	local07, #47 wz
21a74     18 00 90 AD |  if_e	jmp	#LR__3625
21a78     30 4E 05 F1 | 	add	fp, #48
21a7c     A7 24 02 FB | 	rdlong	local04, fp
21a80     30 4E 85 F1 | 	sub	fp, #48
21a84     12 21 C2 FA | 	rdbyte	local02, local04
21a88     5C 20 0E F2 | 	cmp	local02, #92 wz
21a8c     18 00 90 5D |  if_ne	jmp	#LR__3627
21a90                 | LR__3625
21a90     30 4E 05 F1 | 	add	fp, #48
21a94     A7 1E 02 FB | 	rdlong	local01, fp
21a98     01 1E 06 F1 | 	add	local01, #1
21a9c     A7 1E 62 FC | 	wrlong	local01, fp
21aa0     30 4E 85 F1 | 	sub	fp, #48
21aa4     B8 FF 9F FD | 	jmp	#LR__3624
21aa8                 | LR__3626
21aa8                 | LR__3627
21aa8     10 4E 05 F1 | 	add	fp, #16
21aac     A7 00 48 FC | 	wrbyte	#0, fp
21ab0     20 4E 05 F1 | 	add	fp, #32
21ab4     A7 28 02 FB | 	rdlong	local06, fp
21ab8     30 4E 85 F1 | 	sub	fp, #48
21abc     14 2B C2 FA | 	rdbyte	local07, local06
21ac0     20 2A 16 F2 | 	cmp	local07, #32 wc
21ac4     10 4E 05 C1 |  if_b	add	fp, #16
21ac8     A7 08 48 CC |  if_b	wrbyte	#4, fp
21acc     10 4E 85 C1 |  if_b	sub	fp, #16
21ad0                 | LR__3628
21ad0     08 4E 05 F1 | 	add	fp, #8
21ad4     A7 2A 02 FB | 	rdlong	local07, fp
21ad8     28 4E 05 F1 | 	add	fp, #40
21adc     A7 1E 02 FB | 	rdlong	local01, fp
21ae0     30 4E 85 F1 | 	sub	fp, #48
21ae4     15 1F 62 FC | 	wrlong	local01, local07
21ae8     97 38 48 FB | 	callpa	#(@LR__3630-@LR__3629)>>2,fcache_load_ptr_
21aec                 | ' 	}
21aec                 | ' 	*path = p;
21aec                 | ' #line 2862 "ff.c"
21aec                 | ' 	while (di) {
21aec                 | LR__3629
21aec     2C 4E 05 F1 | 	add	fp, #44
21af0     A7 2A 0A FB | 	rdlong	local07, fp wz
21af4     2C 4E 85 F1 | 	sub	fp, #44
21af8     60 00 90 AD |  if_e	jmp	#LR__3631
21afc     18 4E 05 F1 | 	add	fp, #24
21b00     A7 28 02 FB | 	rdlong	local06, fp
21b04     14 4E 05 F1 | 	add	fp, #20
21b08     A7 24 02 FB | 	rdlong	local04, fp
21b0c     01 24 86 F1 | 	sub	local04, #1
21b10     01 24 66 F0 | 	shl	local04, #1
21b14     14 25 02 F1 | 	add	local04, local06
21b18     12 29 E2 FA | 	rdword	local06, local04
21b1c     18 4E 85 F1 | 	sub	fp, #24
21b20     A7 28 52 FC | 	wrword	local06, fp
21b24     A7 2A E2 FA | 	rdword	local07, fp
21b28     14 4E 85 F1 | 	sub	fp, #20
21b2c     20 2A 0E F2 | 	cmp	local07, #32 wz
21b30     14 4E 05 51 |  if_ne	add	fp, #20
21b34     A7 1E E2 5A |  if_ne	rdword	local01, fp
21b38     14 4E 85 51 |  if_ne	sub	fp, #20
21b3c     2E 1E 0E 52 |  if_ne	cmp	local01, #46 wz
21b40     18 00 90 5D |  if_ne	jmp	#LR__3631
21b44     2C 4E 05 F1 | 	add	fp, #44
21b48     A7 1E 02 FB | 	rdlong	local01, fp
21b4c     01 1E 86 F1 | 	sub	local01, #1
21b50     A7 1E 62 FC | 	wrlong	local01, fp
21b54     2C 4E 85 F1 | 	sub	fp, #44
21b58     90 FF 9F FD | 	jmp	#LR__3629
21b5c                 | LR__3630
21b5c                 | LR__3631
21b5c     18 4E 05 F1 | 	add	fp, #24
21b60     A7 2C 02 FB | 	rdlong	local08, fp
21b64     14 4E 05 F1 | 	add	fp, #20
21b68     A7 24 02 FB | 	rdlong	local04, fp
21b6c     01 24 66 F0 | 	shl	local04, #1
21b70     16 25 02 F1 | 	add	local04, local08
21b74     12 01 58 FC | 	wrword	#0, local04
21b78     A7 2A 0A FB | 	rdlong	local07, fp wz
21b7c     2C 4E 85 F1 | 	sub	fp, #44
21b80     06 FA 05 A6 |  if_e	mov	result1, #6
21b84     04 06 90 AD |  if_e	jmp	#LR__3660
21b88                 | ' 
21b88                 | ' 
21b88                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
21b88     28 4E 05 F1 | 	add	fp, #40
21b8c     A7 00 68 FC | 	wrlong	#0, fp
21b90     28 4E 85 F1 | 	sub	fp, #40
21b94     97 22 48 FB | 	callpa	#(@LR__3633-@LR__3632)>>2,fcache_load_ptr_
21b98                 | LR__3632
21b98     18 4E 05 F1 | 	add	fp, #24
21b9c     A7 2E 02 FB | 	rdlong	local09, fp
21ba0     10 4E 05 F1 | 	add	fp, #16
21ba4     A7 30 02 FB | 	rdlong	local10, fp
21ba8     28 4E 85 F1 | 	sub	fp, #40
21bac     01 30 66 F0 | 	shl	local10, #1
21bb0     17 31 02 F1 | 	add	local10, local09
21bb4     18 33 E2 FA | 	rdword	local11, local10
21bb8     20 32 0E F2 | 	cmp	local11, #32 wz
21bbc     1C 00 90 5D |  if_ne	jmp	#LR__3634
21bc0     28 4E 05 F1 | 	add	fp, #40
21bc4     A7 34 02 FB | 	rdlong	local12, fp
21bc8     1A 27 02 F6 | 	mov	local05, local12
21bcc     01 26 06 F1 | 	add	local05, #1
21bd0     A7 26 62 FC | 	wrlong	local05, fp
21bd4     28 4E 85 F1 | 	sub	fp, #40
21bd8     BC FF 9F FD | 	jmp	#LR__3632
21bdc                 | LR__3633
21bdc                 | LR__3634
21bdc     28 4E 05 F1 | 	add	fp, #40
21be0     A7 2A 02 FB | 	rdlong	local07, fp
21be4     28 4E 85 F1 | 	sub	fp, #40
21be8     01 2A 16 F2 | 	cmp	local07, #1 wc
21bec     28 00 90 3D |  if_ae	jmp	#LR__3635
21bf0     18 4E 05 F1 | 	add	fp, #24
21bf4     A7 22 02 FB | 	rdlong	local03, fp
21bf8     10 4E 05 F1 | 	add	fp, #16
21bfc     A7 2E 02 FB | 	rdlong	local09, fp
21c00     28 4E 85 F1 | 	sub	fp, #40
21c04     01 2E 66 F0 | 	shl	local09, #1
21c08     11 2F 02 F1 | 	add	local09, local03
21c0c     17 1F E2 FA | 	rdword	local01, local09
21c10     2E 1E 0E F2 | 	cmp	local01, #46 wz
21c14     14 00 90 5D |  if_ne	jmp	#LR__3636
21c18                 | LR__3635
21c18     10 4E 05 F1 | 	add	fp, #16
21c1c     A7 2A C2 FA | 	rdbyte	local07, fp
21c20     03 2A 46 F5 | 	or	local07, #3
21c24     A7 2A 42 FC | 	wrbyte	local07, fp
21c28     10 4E 85 F1 | 	sub	fp, #16
21c2c                 | LR__3636
21c2c     97 2C 48 FB | 	callpa	#(@LR__3638-@LR__3637)>>2,fcache_load_ptr_
21c30                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
21c30                 | LR__3637
21c30     2C 4E 05 F1 | 	add	fp, #44
21c34     A7 2A 02 FB | 	rdlong	local07, fp
21c38     2C 4E 85 F1 | 	sub	fp, #44
21c3c     01 2A 16 F2 | 	cmp	local07, #1 wc
21c40     44 00 90 CD |  if_b	jmp	#LR__3639
21c44     18 4E 05 F1 | 	add	fp, #24
21c48     A7 28 02 FB | 	rdlong	local06, fp
21c4c     14 4E 05 F1 | 	add	fp, #20
21c50     A7 22 02 FB | 	rdlong	local03, fp
21c54     2C 4E 85 F1 | 	sub	fp, #44
21c58     01 22 86 F1 | 	sub	local03, #1
21c5c     01 22 66 F0 | 	shl	local03, #1
21c60     14 23 02 F1 | 	add	local03, local06
21c64     11 1F E2 FA | 	rdword	local01, local03
21c68     2E 1E 0E F2 | 	cmp	local01, #46 wz
21c6c     18 00 90 AD |  if_e	jmp	#LR__3639
21c70     2C 4E 05 F1 | 	add	fp, #44
21c74     A7 1E 02 FB | 	rdlong	local01, fp
21c78     01 1E 86 F1 | 	sub	local01, #1
21c7c     A7 1E 62 FC | 	wrlong	local01, fp
21c80     2C 4E 85 F1 | 	sub	fp, #44
21c84     A8 FF 9F FD | 	jmp	#LR__3637
21c88                 | LR__3638
21c88                 | LR__3639
21c88     04 4E 05 F1 | 	add	fp, #4
21c8c     A7 12 02 FB | 	rdlong	arg01, fp
21c90     04 4E 85 F1 | 	sub	fp, #4
21c94     20 12 06 F1 | 	add	arg01, #32
21c98     20 14 06 F6 | 	mov	arg02, #32
21c9c     0B 16 06 F6 | 	mov	arg03, #11
21ca0     09 37 02 F6 | 	mov	local13, arg01
21ca4     98 00 A0 FD | 	call	#\builtin_bytefill_
21ca8     1B FB 01 F6 | 	mov	result1, local13
21cac     0C 4E 05 F1 | 	add	fp, #12
21cb0     A7 00 48 FC | 	wrbyte	#0, fp
21cb4     A7 2A C2 FA | 	rdbyte	local07, fp
21cb8     14 4E 05 F1 | 	add	fp, #20
21cbc     A7 2A 62 FC | 	wrlong	local07, fp
21cc0     04 4E 05 F1 | 	add	fp, #4
21cc4     A7 10 68 FC | 	wrlong	#8, fp
21cc8     24 4E 85 F1 | 	sub	fp, #36
21ccc                 | ' 
21ccc                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
21ccc                 | ' 	i = b = 0; ni = 8;
21ccc                 | ' 	for (;;) {
21ccc                 | LR__3640
21ccc     18 4E 05 F1 | 	add	fp, #24
21cd0     A7 22 02 FB | 	rdlong	local03, fp
21cd4     10 4E 05 F1 | 	add	fp, #16
21cd8     A7 2E 02 FB | 	rdlong	local09, fp
21cdc     17 25 02 F6 | 	mov	local04, local09
21ce0     01 24 06 F1 | 	add	local04, #1
21ce4     A7 24 62 FC | 	wrlong	local04, fp
21ce8     01 2E 66 F0 | 	shl	local09, #1
21cec     11 2F 02 F1 | 	add	local09, local03
21cf0     17 29 E2 FA | 	rdword	local06, local09
21cf4     14 4E 85 F1 | 	sub	fp, #20
21cf8     A7 28 52 FC | 	wrword	local06, fp
21cfc     A7 2A EA FA | 	rdword	local07, fp wz
21d00     14 4E 85 F1 | 	sub	fp, #20
21d04     74 03 90 AD |  if_e	jmp	#LR__3656
21d08     14 4E 05 F1 | 	add	fp, #20
21d0c     A7 2A E2 FA | 	rdword	local07, fp
21d10     14 4E 85 F1 | 	sub	fp, #20
21d14     20 2A 0E F2 | 	cmp	local07, #32 wz
21d18     30 00 90 AD |  if_e	jmp	#LR__3641
21d1c     14 4E 05 F1 | 	add	fp, #20
21d20     A7 1E E2 FA | 	rdword	local01, fp
21d24     14 4E 85 F1 | 	sub	fp, #20
21d28     2E 1E 0E F2 | 	cmp	local01, #46 wz
21d2c     34 00 90 5D |  if_ne	jmp	#LR__3642
21d30     28 4E 05 F1 | 	add	fp, #40
21d34     A7 24 02 FB | 	rdlong	local04, fp
21d38     04 4E 05 F1 | 	add	fp, #4
21d3c     A7 30 02 FB | 	rdlong	local10, fp
21d40     2C 4E 85 F1 | 	sub	fp, #44
21d44     18 25 0A F2 | 	cmp	local04, local10 wz
21d48     18 00 90 AD |  if_e	jmp	#LR__3642
21d4c                 | LR__3641
21d4c     10 4E 05 F1 | 	add	fp, #16
21d50     A7 2A C2 FA | 	rdbyte	local07, fp
21d54     03 2A 46 F5 | 	or	local07, #3
21d58     A7 2A 42 FC | 	wrbyte	local07, fp
21d5c     10 4E 85 F1 | 	sub	fp, #16
21d60                 | ' 			cf |=  0x01  |  0x02 ;
21d60                 | ' 			continue;
21d60     68 FF 9F FD | 	jmp	#LR__3640
21d64                 | LR__3642
21d64     20 4E 05 F1 | 	add	fp, #32
21d68     A7 2A 02 FB | 	rdlong	local07, fp
21d6c     04 4E 05 F1 | 	add	fp, #4
21d70     A7 1E 02 FB | 	rdlong	local01, fp
21d74     24 4E 85 F1 | 	sub	fp, #36
21d78     0F 2B 12 F2 | 	cmp	local07, local01 wc
21d7c     1C 00 90 3D |  if_ae	jmp	#LR__3643
21d80     28 4E 05 F1 | 	add	fp, #40
21d84     A7 2C 02 FB | 	rdlong	local08, fp
21d88     04 4E 05 F1 | 	add	fp, #4
21d8c     A7 30 02 FB | 	rdlong	local10, fp
21d90     2C 4E 85 F1 | 	sub	fp, #44
21d94     18 2D 0A F2 | 	cmp	local08, local10 wz
21d98     B0 00 90 5D |  if_ne	jmp	#LR__3645
21d9c                 | LR__3643
21d9c     24 4E 05 F1 | 	add	fp, #36
21da0     A7 2A 02 FB | 	rdlong	local07, fp
21da4     24 4E 85 F1 | 	sub	fp, #36
21da8     0B 2A 0E F2 | 	cmp	local07, #11 wz
21dac     18 00 90 5D |  if_ne	jmp	#LR__3644
21db0     10 4E 05 F1 | 	add	fp, #16
21db4     A7 2A C2 FA | 	rdbyte	local07, fp
21db8     03 2A 46 F5 | 	or	local07, #3
21dbc     A7 2A 42 FC | 	wrbyte	local07, fp
21dc0     10 4E 85 F1 | 	sub	fp, #16
21dc4                 | ' 				cf |=  0x01  |  0x02 ;
21dc4                 | ' 				break;
21dc4     B4 02 90 FD | 	jmp	#LR__3656
21dc8                 | LR__3644
21dc8     28 4E 05 F1 | 	add	fp, #40
21dcc     A7 2A 02 FB | 	rdlong	local07, fp
21dd0     04 4E 05 F1 | 	add	fp, #4
21dd4     A7 1E 02 FB | 	rdlong	local01, fp
21dd8     2C 4E 85 F1 | 	sub	fp, #44
21ddc     0F 2B 0A F2 | 	cmp	local07, local01 wz
21de0     10 4E 05 51 |  if_ne	add	fp, #16
21de4     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
21de8     03 2A 46 55 |  if_ne	or	local07, #3
21dec     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
21df0     10 4E 85 51 |  if_ne	sub	fp, #16
21df4     28 4E 05 F1 | 	add	fp, #40
21df8     A7 2A 02 FB | 	rdlong	local07, fp
21dfc     04 4E 05 F1 | 	add	fp, #4
21e00     A7 20 02 FB | 	rdlong	local02, fp
21e04     2C 4E 85 F1 | 	sub	fp, #44
21e08     10 2B 1A F2 | 	cmp	local07, local02 wcz
21e0c     6C 02 90 1D |  if_a	jmp	#LR__3656
21e10     2C 4E 05 F1 | 	add	fp, #44
21e14     A7 2A 02 FB | 	rdlong	local07, fp
21e18     04 4E 85 F1 | 	sub	fp, #4
21e1c     A7 2A 62 FC | 	wrlong	local07, fp
21e20     08 4E 85 F1 | 	sub	fp, #8
21e24     A7 10 68 FC | 	wrlong	#8, fp
21e28     04 4E 05 F1 | 	add	fp, #4
21e2c     A7 16 68 FC | 	wrlong	#11, fp
21e30     18 4E 85 F1 | 	sub	fp, #24
21e34     A7 32 C2 FA | 	rdbyte	local11, fp
21e38     19 2B E2 F8 | 	getbyte	local07, local11, #0
21e3c     02 2A 66 F0 | 	shl	local07, #2
21e40     A7 2A 42 FC | 	wrbyte	local07, fp
21e44     0C 4E 85 F1 | 	sub	fp, #12
21e48                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
21e48                 | ' 			continue;
21e48     80 FE 9F FD | 	jmp	#LR__3640
21e4c                 | LR__3645
21e4c     14 4E 05 F1 | 	add	fp, #20
21e50     A7 2A E2 FA | 	rdword	local07, fp
21e54     14 4E 85 F1 | 	sub	fp, #20
21e58     80 2A 16 F2 | 	cmp	local07, #128 wc
21e5c     6C 00 90 CD |  if_b	jmp	#LR__3647
21e60     10 4E 05 F1 | 	add	fp, #16
21e64     A7 2A C2 FA | 	rdbyte	local07, fp
21e68     02 2A 46 F5 | 	or	local07, #2
21e6c     A7 2A 42 FC | 	wrbyte	local07, fp
21e70     04 4E 05 F1 | 	add	fp, #4
21e74     A7 12 E2 FA | 	rdword	arg01, fp
21e78     14 4E 85 F1 | 	sub	fp, #20
21e7c     01 00 00 FF 
21e80     52 15 06 F6 | 	mov	arg02, ##850
21e84     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
21e88     14 4E 05 F1 | 	add	fp, #20
21e8c     A7 FA 51 FC | 	wrword	result1, fp
21e90     A7 2A E2 FA | 	rdword	local07, fp
21e94     14 4E 85 F1 | 	sub	fp, #20
21e98     80 2A CE F7 | 	test	local07, #128 wz
21e9c     2C 00 90 AD |  if_e	jmp	#LR__3646
21ea0     14 4E 05 F1 | 	add	fp, #20
21ea4     A7 20 E2 FA | 	rdword	local02, fp
21ea8     7F 20 06 F5 | 	and	local02, #127
21eac     01 00 00 FF 
21eb0     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
21eb4     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
21eb8     10 2B C2 FA | 	rdbyte	local07, local02
21ebc     A7 2A 52 FC | 	wrword	local07, fp
21ec0     14 4E 85 F1 | 	sub	fp, #20
21ec4     01 00 00 FF 
21ec8     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
21ecc                 | LR__3646
21ecc                 | LR__3647
21ecc     14 4E 05 F1 | 	add	fp, #20
21ed0     A7 2A E2 FA | 	rdword	local07, fp
21ed4     14 4E 85 F1 | 	sub	fp, #20
21ed8     00 2B 16 F2 | 	cmp	local07, #256 wc
21edc     88 00 90 CD |  if_b	jmp	#LR__3649
21ee0     24 4E 05 F1 | 	add	fp, #36
21ee4     A7 2A 02 FB | 	rdlong	local07, fp
21ee8     01 2A 86 F1 | 	sub	local07, #1
21eec     04 4E 85 F1 | 	sub	fp, #4
21ef0     A7 20 02 FB | 	rdlong	local02, fp
21ef4     20 4E 85 F1 | 	sub	fp, #32
21ef8     15 21 12 F2 | 	cmp	local02, local07 wc
21efc     2C 00 90 CD |  if_b	jmp	#LR__3648
21f00     10 4E 05 F1 | 	add	fp, #16
21f04     A7 32 C2 FA | 	rdbyte	local11, fp
21f08     19 2B E2 F8 | 	getbyte	local07, local11, #0
21f0c     03 2A 46 F5 | 	or	local07, #3
21f10     A7 2A 42 FC | 	wrbyte	local07, fp
21f14     14 4E 05 F1 | 	add	fp, #20
21f18     A7 2A 02 FB | 	rdlong	local07, fp
21f1c     04 4E 85 F1 | 	sub	fp, #4
21f20     A7 2A 62 FC | 	wrlong	local07, fp
21f24     20 4E 85 F1 | 	sub	fp, #32
21f28                 | ' 				cf |=  0x01  |  0x02 ;
21f28                 | ' 				i = ni; continue;
21f28     A0 FD 9F FD | 	jmp	#LR__3640
21f2c                 | LR__3648
21f2c     04 4E 05 F1 | 	add	fp, #4
21f30     A7 2E 02 FB | 	rdlong	local09, fp
21f34     1C 4E 05 F1 | 	add	fp, #28
21f38     A7 30 02 FB | 	rdlong	local10, fp
21f3c     18 25 02 F6 | 	mov	local04, local10
21f40     01 24 06 F1 | 	add	local04, #1
21f44     A7 24 62 FC | 	wrlong	local04, fp
21f48     20 2E 06 F1 | 	add	local09, #32
21f4c     17 31 02 F1 | 	add	local10, local09
21f50     0C 4E 85 F1 | 	sub	fp, #12
21f54     A7 22 E2 FA | 	rdword	local03, fp
21f58     14 4E 85 F1 | 	sub	fp, #20
21f5c     08 22 46 F0 | 	shr	local03, #8
21f60     18 23 42 FC | 	wrbyte	local03, local10
21f64     D4 00 90 FD | 	jmp	#LR__3655
21f68                 | LR__3649
21f68     14 4E 05 F1 | 	add	fp, #20
21f6c     A7 2A EA FA | 	rdword	local07, fp wz
21f70     14 4E 85 F1 | 	sub	fp, #20
21f74     20 00 90 AD |  if_e	jmp	#LR__3650
21f78     3C 01 00 FF 
21f7c     FD 12 06 F6 | 	mov	arg01, ##@LR__4283
21f80     14 4E 05 F1 | 	add	fp, #20
21f84     A7 14 E2 FA | 	rdword	arg02, fp
21f88     14 4E 85 F1 | 	sub	fp, #20
21f8c     48 CB BF FD | 	call	#_fatfs_cc_strchr
21f90     00 FA 0D F2 | 	cmp	result1, #0 wz
21f94     20 00 90 AD |  if_e	jmp	#LR__3651
21f98                 | LR__3650
21f98     14 4E 05 F1 | 	add	fp, #20
21f9c     A7 BE 58 FC | 	wrword	#95, fp
21fa0     04 4E 85 F1 | 	sub	fp, #4
21fa4     A7 2A C2 FA | 	rdbyte	local07, fp
21fa8     03 2A 46 F5 | 	or	local07, #3
21fac     A7 2A 42 FC | 	wrbyte	local07, fp
21fb0     10 4E 85 F1 | 	sub	fp, #16
21fb4     84 00 90 FD | 	jmp	#LR__3654
21fb8                 | LR__3651
21fb8     14 4E 05 F1 | 	add	fp, #20
21fbc     A7 2A E2 FA | 	rdword	local07, fp
21fc0     14 4E 85 F1 | 	sub	fp, #20
21fc4     41 2A 16 F2 | 	cmp	local07, #65 wc
21fc8     24 00 90 CD |  if_b	jmp	#LR__3652
21fcc     14 4E 05 F1 | 	add	fp, #20
21fd0     A7 1E E2 FA | 	rdword	local01, fp
21fd4     14 4E 85 F1 | 	sub	fp, #20
21fd8     5B 1E 16 F2 | 	cmp	local01, #91 wc
21fdc     0C 4E 05 C1 |  if_b	add	fp, #12
21fe0     A7 2A C2 CA |  if_b	rdbyte	local07, fp
21fe4     02 2A 46 C5 |  if_b	or	local07, #2
21fe8     A7 2A 42 CC |  if_b	wrbyte	local07, fp
21fec     0C 4E 85 C1 |  if_b	sub	fp, #12
21ff0                 | LR__3652
21ff0     14 4E 05 F1 | 	add	fp, #20
21ff4     A7 2A E2 FA | 	rdword	local07, fp
21ff8     14 4E 85 F1 | 	sub	fp, #20
21ffc     61 2A 16 F2 | 	cmp	local07, #97 wc
22000     38 00 90 CD |  if_b	jmp	#LR__3653
22004     14 4E 05 F1 | 	add	fp, #20
22008     A7 1E E2 FA | 	rdword	local01, fp
2200c     14 4E 85 F1 | 	sub	fp, #20
22010     7B 1E 16 F2 | 	cmp	local01, #123 wc
22014     24 00 90 3D |  if_ae	jmp	#LR__3653
22018     0C 4E 05 F1 | 	add	fp, #12
2201c     A7 2A C2 FA | 	rdbyte	local07, fp
22020     01 2A 46 F5 | 	or	local07, #1
22024     A7 2A 42 FC | 	wrbyte	local07, fp
22028     08 4E 05 F1 | 	add	fp, #8
2202c     A7 2A E2 FA | 	rdword	local07, fp
22030     20 2A 86 F1 | 	sub	local07, #32
22034     A7 2A 52 FC | 	wrword	local07, fp
22038     14 4E 85 F1 | 	sub	fp, #20
2203c                 | LR__3653
2203c                 | LR__3654
2203c                 | LR__3655
2203c     04 4E 05 F1 | 	add	fp, #4
22040     A7 32 02 FB | 	rdlong	local11, fp
22044     19 2F 02 F6 | 	mov	local09, local11
22048     1C 4E 05 F1 | 	add	fp, #28
2204c     A7 20 02 FB | 	rdlong	local02, fp
22050     10 25 02 F6 | 	mov	local04, local02
22054     01 24 06 F1 | 	add	local04, #1
22058     A7 24 62 FC | 	wrlong	local04, fp
2205c     10 31 02 F6 | 	mov	local10, local02
22060     20 2E 06 F1 | 	add	local09, #32
22064     17 31 02 F1 | 	add	local10, local09
22068     0C 4E 85 F1 | 	sub	fp, #12
2206c     A7 22 E2 FA | 	rdword	local03, fp
22070     14 4E 85 F1 | 	sub	fp, #20
22074     18 23 42 FC | 	wrbyte	local03, local10
22078     50 FC 9F FD | 	jmp	#LR__3640
2207c                 | LR__3656
2207c     04 4E 05 F1 | 	add	fp, #4
22080     A7 32 02 FB | 	rdlong	local11, fp
22084     04 4E 85 F1 | 	sub	fp, #4
22088     20 32 06 F1 | 	add	local11, #32
2208c     19 2B C2 FA | 	rdbyte	local07, local11
22090     E5 2A 0E F2 | 	cmp	local07, #229 wz
22094     04 4E 05 A1 |  if_e	add	fp, #4
22098     A7 2A 02 AB |  if_e	rdlong	local07, fp
2209c     04 4E 85 A1 |  if_e	sub	fp, #4
220a0     20 2A 06 A1 |  if_e	add	local07, #32
220a4     15 0B 48 AC |  if_e	wrbyte	#5, local07
220a8     24 4E 05 F1 | 	add	fp, #36
220ac     A7 2A 02 FB | 	rdlong	local07, fp
220b0     24 4E 85 F1 | 	sub	fp, #36
220b4     08 2A 0E F2 | 	cmp	local07, #8 wz
220b8     0C 4E 05 A1 |  if_e	add	fp, #12
220bc     A7 2A C2 AA |  if_e	rdbyte	local07, fp
220c0     02 2A 66 A0 |  if_e	shl	local07, #2
220c4     A7 2A 42 AC |  if_e	wrbyte	local07, fp
220c8     0C 4E 85 A1 |  if_e	sub	fp, #12
220cc     0C 4E 05 F1 | 	add	fp, #12
220d0     A7 2A C2 FA | 	rdbyte	local07, fp
220d4     0C 4E 85 F1 | 	sub	fp, #12
220d8     0C 2A 06 F5 | 	and	local07, #12
220dc     0C 2A 0E F2 | 	cmp	local07, #12 wz
220e0     18 00 90 AD |  if_e	jmp	#LR__3657
220e4     0C 4E 05 F1 | 	add	fp, #12
220e8     A7 1E C2 FA | 	rdbyte	local01, fp
220ec     0C 4E 85 F1 | 	sub	fp, #12
220f0     03 1E 06 F5 | 	and	local01, #3
220f4     03 1E 0E F2 | 	cmp	local01, #3 wz
220f8     14 00 90 5D |  if_ne	jmp	#LR__3658
220fc                 | LR__3657
220fc     10 4E 05 F1 | 	add	fp, #16
22100     A7 2A C2 FA | 	rdbyte	local07, fp
22104     02 2A 46 F5 | 	or	local07, #2
22108     A7 2A 42 FC | 	wrbyte	local07, fp
2210c     10 4E 85 F1 | 	sub	fp, #16
22110                 | LR__3658
22110     10 4E 05 F1 | 	add	fp, #16
22114     A7 2A C2 FA | 	rdbyte	local07, fp
22118     10 4E 85 F1 | 	sub	fp, #16
2211c     02 2A CE F7 | 	test	local07, #2 wz
22120     48 00 90 5D |  if_ne	jmp	#LR__3659
22124     0C 4E 05 F1 | 	add	fp, #12
22128     A7 2A C2 FA | 	rdbyte	local07, fp
2212c     0C 4E 85 F1 | 	sub	fp, #12
22130     01 2A CE F7 | 	test	local07, #1 wz
22134     10 4E 05 51 |  if_ne	add	fp, #16
22138     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
2213c     10 2A 46 55 |  if_ne	or	local07, #16
22140     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
22144     10 4E 85 51 |  if_ne	sub	fp, #16
22148     0C 4E 05 F1 | 	add	fp, #12
2214c     A7 2A C2 FA | 	rdbyte	local07, fp
22150     0C 4E 85 F1 | 	sub	fp, #12
22154     04 2A CE F7 | 	test	local07, #4 wz
22158     10 4E 05 51 |  if_ne	add	fp, #16
2215c     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
22160     08 2A 46 55 |  if_ne	or	local07, #8
22164     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
22168     10 4E 85 51 |  if_ne	sub	fp, #16
2216c                 | LR__3659
2216c     04 4E 05 F1 | 	add	fp, #4
22170     A7 2A 02 FB | 	rdlong	local07, fp
22174     0C 4E 05 F1 | 	add	fp, #12
22178     A7 1E C2 FA | 	rdbyte	local01, fp
2217c     10 4E 85 F1 | 	sub	fp, #16
22180     2B 2A 06 F1 | 	add	local07, #43
22184     15 1F 42 FC | 	wrbyte	local01, local07
22188                 | ' 	}
22188                 | ' 
22188                 | ' 	dp->fn[ 11 ] = cf;
22188                 | ' 
22188                 | ' 	return FR_OK;
22188     00 FA 05 F6 | 	mov	result1, #0
2218c                 | LR__3660
2218c     A7 F0 03 F6 | 	mov	ptra, fp
22190     B2 00 A0 FD | 	call	#popregs_
22194                 | _fatfs_cc_create_name_ret
22194     2D 00 64 FD | 	ret
22198                 | 
22198                 | _fatfs_cc_follow_path
22198     02 4A 05 F6 | 	mov	COUNT_, #2
2219c     A8 00 A0 FD | 	call	#pushregs_
221a0     18 F0 07 F1 | 	add	ptra, #24
221a4     04 4E 05 F1 | 	add	fp, #4
221a8     A7 12 62 FC | 	wrlong	arg01, fp
221ac     04 4E 05 F1 | 	add	fp, #4
221b0     A7 14 62 FC | 	wrlong	arg02, fp
221b4     04 4E 85 F1 | 	sub	fp, #4
221b8     A7 FA 01 FB | 	rdlong	result1, fp
221bc     FD 1E 02 FB | 	rdlong	local01, result1
221c0     10 4E 05 F1 | 	add	fp, #16
221c4     A7 1E 62 FC | 	wrlong	local01, fp
221c8     14 4E 85 F1 | 	sub	fp, #20
221cc     97 24 48 FB | 	callpa	#(@LR__3672-@LR__3670)>>2,fcache_load_ptr_
221d0                 | ' )
221d0                 | ' {
221d0                 | ' 	FRESULT res;
221d0                 | ' 	BYTE ns;
221d0                 | ' 	FATFS *fs = dp->obj.fs;
221d0                 | ' #line 3034 "ff.c"
221d0                 | ' 	{
221d0                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
221d0                 | LR__3670
221d0     08 4E 05 F1 | 	add	fp, #8
221d4     A7 1E 02 FB | 	rdlong	local01, fp
221d8     08 4E 85 F1 | 	sub	fp, #8
221dc     0F 1F C2 FA | 	rdbyte	local01, local01
221e0     2F 1E 0E F2 | 	cmp	local01, #47 wz
221e4     18 00 90 AD |  if_e	jmp	#LR__3671
221e8     08 4E 05 F1 | 	add	fp, #8
221ec     A7 1E 02 FB | 	rdlong	local01, fp
221f0     08 4E 85 F1 | 	sub	fp, #8
221f4     0F 1F C2 FA | 	rdbyte	local01, local01
221f8     5C 1E 0E F2 | 	cmp	local01, #92 wz
221fc     18 00 90 5D |  if_ne	jmp	#LR__3673
22200                 | LR__3671
22200     08 4E 05 F1 | 	add	fp, #8
22204     A7 1E 02 FB | 	rdlong	local01, fp
22208     01 1E 06 F1 | 	add	local01, #1
2220c     A7 1E 62 FC | 	wrlong	local01, fp
22210     08 4E 85 F1 | 	sub	fp, #8
22214     B8 FF 9F FD | 	jmp	#LR__3670
22218                 | LR__3672
22218                 | LR__3673
22218     04 4E 05 F1 | 	add	fp, #4
2221c     A7 1E 02 FB | 	rdlong	local01, fp
22220     08 1E 06 F1 | 	add	local01, #8
22224     0F 01 68 FC | 	wrlong	#0, local01
22228     04 4E 05 F1 | 	add	fp, #4
2222c     A7 1E 02 FB | 	rdlong	local01, fp
22230     08 4E 85 F1 | 	sub	fp, #8
22234     0F 1F C2 FA | 	rdbyte	local01, local01
22238     20 1E 16 F2 | 	cmp	local01, #32 wc
2223c     30 00 90 3D |  if_ae	jmp	#LR__3674
22240     04 4E 05 F1 | 	add	fp, #4
22244     A7 1E 02 FB | 	rdlong	local01, fp
22248     2B 1E 06 F1 | 	add	local01, #43
2224c     0F 01 49 FC | 	wrbyte	#128, local01
22250     A7 12 02 FB | 	rdlong	arg01, fp
22254     04 4E 85 F1 | 	sub	fp, #4
22258     00 14 06 F6 | 	mov	arg02, #0
2225c     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
22260     0C 4E 05 F1 | 	add	fp, #12
22264     A7 FA 61 FC | 	wrlong	result1, fp
22268     0C 4E 85 F1 | 	sub	fp, #12
2226c     1C 01 90 FD | 	jmp	#LR__3678
22270                 | LR__3674
22270                 | ' 		for (;;) {
22270                 | LR__3675
22270     04 4E 05 F1 | 	add	fp, #4
22274     A7 12 02 FB | 	rdlong	arg01, fp
22278     04 4E 05 F1 | 	add	fp, #4
2227c     A7 14 02 F6 | 	mov	arg02, fp
22280     08 4E 85 F1 | 	sub	fp, #8
22284     14 F6 BF FD | 	call	#_fatfs_cc_create_name
22288     0C 4E 05 F1 | 	add	fp, #12
2228c     A7 FA 61 FC | 	wrlong	result1, fp
22290     00 FA 4D F2 | 	cmps	result1, #0 wz
22294     0C 4E 85 F1 | 	sub	fp, #12
22298     F0 00 90 5D |  if_ne	jmp	#LR__3677
2229c     04 4E 05 F1 | 	add	fp, #4
222a0     A7 12 02 FB | 	rdlong	arg01, fp
222a4     04 4E 85 F1 | 	sub	fp, #4
222a8     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
222ac     0C 4E 05 F1 | 	add	fp, #12
222b0     A7 FA 61 FC | 	wrlong	result1, fp
222b4     08 4E 85 F1 | 	sub	fp, #8
222b8     A7 1E 02 FB | 	rdlong	local01, fp
222bc     2B 1E 06 F1 | 	add	local01, #43
222c0     0F 1F C2 FA | 	rdbyte	local01, local01
222c4     0C 4E 05 F1 | 	add	fp, #12
222c8     A7 1E 42 FC | 	wrbyte	local01, fp
222cc     04 4E 85 F1 | 	sub	fp, #4
222d0     A7 1E 0A FB | 	rdlong	local01, fp wz
222d4     0C 4E 85 F1 | 	sub	fp, #12
222d8     34 00 90 AD |  if_e	jmp	#LR__3676
222dc     0C 4E 05 F1 | 	add	fp, #12
222e0     A7 1E 02 FB | 	rdlong	local01, fp
222e4     0C 4E 85 F1 | 	sub	fp, #12
222e8     04 1E 0E F2 | 	cmp	local01, #4 wz
222ec     9C 00 90 5D |  if_ne	jmp	#LR__3677
222f0     10 4E 05 F1 | 	add	fp, #16
222f4     A7 1E C2 FA | 	rdbyte	local01, fp
222f8     10 4E 85 F1 | 	sub	fp, #16
222fc     04 1E CE F7 | 	test	local01, #4 wz
22300     0C 4E 05 A1 |  if_e	add	fp, #12
22304     A7 0A 68 AC |  if_e	wrlong	#5, fp
22308     0C 4E 85 A1 |  if_e	sub	fp, #12
2230c                 | ' 					}
2230c                 | ' 				}
2230c                 | ' 				break;
2230c     7C 00 90 FD | 	jmp	#LR__3677
22310                 | LR__3676
22310     10 4E 05 F1 | 	add	fp, #16
22314     A7 1E C2 FA | 	rdbyte	local01, fp
22318     10 4E 85 F1 | 	sub	fp, #16
2231c     04 1E CE F7 | 	test	local01, #4 wz
22320     68 00 90 5D |  if_ne	jmp	#LR__3677
22324     04 4E 05 F1 | 	add	fp, #4
22328     A7 1E 02 FB | 	rdlong	local01, fp
2232c     04 4E 85 F1 | 	sub	fp, #4
22330     06 1E 06 F1 | 	add	local01, #6
22334     0F 1F C2 FA | 	rdbyte	local01, local01
22338     10 1E CE F7 | 	test	local01, #16 wz
2233c     0C 4E 05 A1 |  if_e	add	fp, #12
22340     A7 0A 68 AC |  if_e	wrlong	#5, fp
22344     0C 4E 85 A1 |  if_e	sub	fp, #12
22348                 | ' 				res = FR_NO_PATH; break;
22348     40 00 90 AD |  if_e	jmp	#LR__3677
2234c     04 4E 05 F1 | 	add	fp, #4
22350     A7 20 02 FB | 	rdlong	local02, fp
22354     10 1F 02 F6 | 	mov	local01, local02
22358     10 4E 05 F1 | 	add	fp, #16
2235c     A7 14 02 FB | 	rdlong	arg02, fp
22360     0A 13 02 F6 | 	mov	arg01, arg02
22364     34 14 06 F1 | 	add	arg02, #52
22368     14 4E 85 F1 | 	sub	fp, #20
2236c     10 20 06 F1 | 	add	local02, #16
22370     10 21 02 FB | 	rdlong	local02, local02
22374     FF 21 06 F5 | 	and	local02, #511
22378     10 15 02 F1 | 	add	arg02, local02
2237c     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
22380     08 1E 06 F1 | 	add	local01, #8
22384     0F FB 61 FC | 	wrlong	result1, local01
22388     E4 FE 9F FD | 	jmp	#LR__3675
2238c                 | LR__3677
2238c                 | LR__3678
2238c                 | ' 			}
2238c                 | ' #line 3090 "ff.c"
2238c                 | ' 			{
2238c                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
2238c                 | ' 			}
2238c                 | ' 		}
2238c                 | ' 	}
2238c                 | ' 
2238c                 | ' 	return res;
2238c     0C 4E 05 F1 | 	add	fp, #12
22390     A7 FA 01 FB | 	rdlong	result1, fp
22394     0C 4E 85 F1 | 	sub	fp, #12
22398     A7 F0 03 F6 | 	mov	ptra, fp
2239c     B2 00 A0 FD | 	call	#popregs_
223a0                 | _fatfs_cc_follow_path_ret
223a0     2D 00 64 FD | 	ret
223a4                 | 
223a4                 | _fatfs_cc_get_ldnumber
223a4     01 00 66 F6 | 	neg	_var01, #1
223a8     09 03 0A FB | 	rdlong	_var02, arg01 wz
223ac     01 05 02 F6 | 	mov	_var03, _var02
223b0     01 FA 65 A6 |  if_e	neg	result1, #1
223b4     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
223b8     97 10 48 FB | 	callpa	#(@LR__3681-@LR__3680)>>2,fcache_load_ptr_
223bc                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
223bc                 | LR__3680
223bc     02 07 C2 FA | 	rdbyte	_var04, _var03
223c0     03 FB E1 F8 | 	getbyte	result1, _var04, #0
223c4     20 FA 15 F2 | 	cmp	result1, #32 wc
223c8     01 04 06 F1 | 	add	_var03, #1
223cc     03 09 02 36 |  if_ae	mov	_var05, _var04
223d0     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
223d4     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
223d8     E0 FF 9F 1D |  if_a	jmp	#LR__3680
223dc                 | LR__3681
223dc     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
223e0     3A 06 0E F2 | 	cmp	_var04, #58 wz
223e4     40 00 90 5D |  if_ne	jmp	#LR__3683
223e8     01 0A 06 F6 | 	mov	_var06, #1
223ec     01 09 C2 FA | 	rdbyte	_var05, _var02
223f0     30 08 16 F2 | 	cmp	_var05, #48 wc
223f4     1C 00 90 CD |  if_b	jmp	#LR__3682
223f8     01 09 C2 FA | 	rdbyte	_var05, _var02
223fc     3A 08 16 F2 | 	cmp	_var05, #58 wc
22400     01 0D 02 C6 |  if_b	mov	_var07, _var02
22404     02 0C 06 C1 |  if_b	add	_var07, #2
22408     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
2240c     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
22410     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
22414                 | LR__3682
22414     01 0A 56 F2 | 	cmps	_var06, #1 wc
22418     05 01 02 C6 |  if_b	mov	_var01, _var06
2241c     09 05 62 CC |  if_b	wrlong	_var03, arg01
22420                 | ' 			vol = i;
22420                 | ' 			*path = tt;
22420                 | ' 		}
22420                 | ' 		return vol;
22420     00 FB 01 F6 | 	mov	result1, _var01
22424     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
22428                 | LR__3683
22428                 | ' 	}
22428                 | ' #line 3170 "ff.c"
22428                 | ' 	vol = 0;
22428                 | ' 
22428                 | ' 	return vol;
22428     00 FA 05 F6 | 	mov	result1, #0
2242c                 | _fatfs_cc_get_ldnumber_ret
2242c     2D 00 64 FD | 	ret
22430                 | 
22430                 | _fatfs_cc_check_fs
22430     04 4A 05 F6 | 	mov	COUNT_, #4
22434     A8 00 A0 FD | 	call	#pushregs_
22438     09 1F 02 F6 | 	mov	local01, arg01
2243c     03 1E 06 F1 | 	add	local01, #3
22440     0F 01 48 FC | 	wrbyte	#0, local01
22444     2D 1E 06 F1 | 	add	local01, #45
22448     FF FF FF FF 
2244c     0F FF 6B FC | 	wrlong	##-1, local01
22450     30 1E 86 F1 | 	sub	local01, #48
22454     0F 13 02 F6 | 	mov	arg01, local01
22458     18 D5 BF FD | 	call	#_fatfs_cc_move_window
2245c     00 FA 0D F2 | 	cmp	result1, #0 wz
22460     04 FA 05 56 |  if_ne	mov	result1, #4
22464     94 01 90 5D |  if_ne	jmp	#LR__3694
22468     34 1E 06 F1 | 	add	local01, #52
2246c     0F 13 02 F6 | 	mov	arg01, local01
22470     FE 13 06 F1 | 	add	arg01, #510
22474                 | ' {
22474                 | ' 
22474                 | ' 	return *((WORD*)ptr);
22474     09 21 E2 FA | 	rdword	local02, arg01
22478     0F 23 C2 FA | 	rdbyte	local03, local01
2247c     34 1E 86 F1 | 	sub	local01, #52
22480     11 25 E2 F8 | 	getbyte	local04, local03, #0
22484     EB 24 0E F2 | 	cmp	local04, #235 wz
22488     11 17 02 56 |  if_ne	mov	arg03, local03
2248c     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
22490     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
22494     11 23 E2 58 |  if_ne	getbyte	local03, local03, #0
22498     E8 22 0E 52 |  if_ne	cmp	local03, #232 wz
2249c     44 01 90 5D |  if_ne	jmp	#LR__3693
224a0     10 25 32 F9 | 	getword	local04, local02, #0
224a4     55 00 00 FF 
224a8     55 24 0E F2 | 	cmp	local04, ##43605 wz
224ac     2C 00 90 5D |  if_ne	jmp	#LR__3690
224b0     34 1E 06 F1 | 	add	local01, #52
224b4     0F 13 02 F6 | 	mov	arg01, local01
224b8     34 1E 86 F1 | 	sub	local01, #52
224bc     52 12 06 F1 | 	add	arg01, #82
224c0     3C 01 00 FF 
224c4     04 15 06 F6 | 	mov	arg02, ##@LR__4284
224c8     08 16 06 F6 | 	mov	arg03, #8
224cc     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
224d0     00 FA 0D F2 | 	cmp	result1, #0 wz
224d4                 | ' 			return 0;
224d4     00 FA 05 A6 |  if_e	mov	result1, #0
224d8     20 01 90 AD |  if_e	jmp	#LR__3694
224dc                 | LR__3690
224dc     34 1E 06 F1 | 	add	local01, #52
224e0     0F 13 02 F6 | 	mov	arg01, local01
224e4     0B 12 06 F1 | 	add	arg01, #11
224e8                 | ' {
224e8                 | ' 
224e8                 | ' 	return *((WORD*)ptr);
224e8     09 FB E1 FA | 	rdword	result1, arg01
224ec     0D 1E 06 F1 | 	add	local01, #13
224f0     0F 23 C2 FA | 	rdbyte	local03, local01
224f4     41 1E 86 F1 | 	sub	local01, #65
224f8     FD 24 32 F9 | 	getword	local04, result1, #0
224fc     FD 14 32 F9 | 	getword	arg02, result1, #0
22500     01 14 86 F1 | 	sub	arg02, #1
22504     0A 25 CA F7 | 	test	local04, arg02 wz
22508     D8 00 90 5D |  if_ne	jmp	#LR__3692
2250c     FD 14 32 F9 | 	getword	arg02, result1, #0
22510     01 00 00 FF 
22514     00 14 16 F2 | 	cmp	arg02, ##512 wc
22518     C8 00 90 CD |  if_b	jmp	#LR__3692
2251c     FD 14 32 F9 | 	getword	arg02, result1, #0
22520     01 00 00 FF 
22524     01 14 16 F2 | 	cmp	arg02, ##513 wc
22528     B8 00 90 3D |  if_ae	jmp	#LR__3692
2252c     11 13 02 F6 | 	mov	arg01, local03
22530     07 12 4E F7 | 	zerox	arg01, #7 wz
22534     AC 00 90 AD |  if_e	jmp	#LR__3692
22538     11 13 E2 F8 | 	getbyte	arg01, local03, #0
2253c     11 23 E2 F8 | 	getbyte	local03, local03, #0
22540     01 22 86 F1 | 	sub	local03, #1
22544     11 13 CA F7 | 	test	arg01, local03 wz
22548     98 00 90 5D |  if_ne	jmp	#LR__3692
2254c     34 1E 06 F1 | 	add	local01, #52
22550     0F 13 02 F6 | 	mov	arg01, local01
22554     34 1E 86 F1 | 	sub	local01, #52
22558     0E 12 06 F1 | 	add	arg01, #14
2255c                 | ' {
2255c                 | ' 
2255c                 | ' 	return *((WORD*)ptr);
2255c     09 FB E9 FA | 	rdword	result1, arg01 wz
22560     80 00 90 AD |  if_e	jmp	#LR__3692
22564     44 1E 06 F1 | 	add	local01, #68
22568     0F 13 C2 FA | 	rdbyte	arg01, local01
2256c     44 1E 86 F1 | 	sub	local01, #68
22570     01 12 86 F1 | 	sub	arg01, #1
22574     02 12 16 F2 | 	cmp	arg01, #2 wc
22578     68 00 90 3D |  if_ae	jmp	#LR__3692
2257c     34 1E 06 F1 | 	add	local01, #52
22580     0F 13 02 F6 | 	mov	arg01, local01
22584     34 1E 86 F1 | 	sub	local01, #52
22588     11 12 06 F1 | 	add	arg01, #17
2258c                 | ' {
2258c                 | ' 
2258c                 | ' 	return *((WORD*)ptr);
2258c     09 FB E9 FA | 	rdword	result1, arg01 wz
22590     50 00 90 AD |  if_e	jmp	#LR__3692
22594     34 1E 06 F1 | 	add	local01, #52
22598     0F 13 02 F6 | 	mov	arg01, local01
2259c     34 1E 86 F1 | 	sub	local01, #52
225a0     13 12 06 F1 | 	add	arg01, #19
225a4                 | ' {
225a4                 | ' 
225a4                 | ' 	return *((WORD*)ptr);
225a4     09 FB E1 FA | 	rdword	result1, arg01
225a8     FD 22 32 F9 | 	getword	local03, result1, #0
225ac     80 22 16 F2 | 	cmp	local03, #128 wc
225b0     20 00 90 3D |  if_ae	jmp	#LR__3691
225b4     34 1E 06 F1 | 	add	local01, #52
225b8     0F 13 02 F6 | 	mov	arg01, local01
225bc     34 1E 86 F1 | 	sub	local01, #52
225c0     20 12 06 F1 | 	add	arg01, #32
225c4                 | ' {
225c4                 | ' 
225c4                 | ' 	return *((DWORD*)ptr);
225c4     09 FB 01 FB | 	rdlong	result1, arg01
225c8     80 00 00 FF 
225cc     00 FA 15 F2 | 	cmp	result1, ##65536 wc
225d0     10 00 90 CD |  if_b	jmp	#LR__3692
225d4                 | LR__3691
225d4     4A 1E 06 F1 | 	add	local01, #74
225d8                 | ' {
225d8                 | ' 
225d8                 | ' 	return *((WORD*)ptr);
225d8     0F FB E9 FA | 	rdword	result1, local01 wz
225dc                 | ' 			&& b != 0 && (b & (b - 1)) == 0
225dc                 | ' 			&& ld_word(fs->win +  14 ) != 0
225dc                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
225dc                 | ' 			&& ld_word(fs->win +  17 ) != 0
225dc                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
225dc                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
225dc                 | ' 				return 0;
225dc     00 FA 05 56 |  if_ne	mov	result1, #0
225e0     18 00 90 5D |  if_ne	jmp	#LR__3694
225e4                 | LR__3692
225e4                 | LR__3693
225e4                 | ' 		}
225e4                 | ' 	}
225e4                 | ' 	return sign == 0xAA55 ? 2 : 3;
225e4     10 23 32 F9 | 	getword	local03, local02, #0
225e8     55 00 00 FF 
225ec     55 22 0E F2 | 	cmp	local03, ##43605 wz
225f0     02 24 06 A6 |  if_e	mov	local04, #2
225f4     03 24 06 56 |  if_ne	mov	local04, #3
225f8     12 FB 01 F6 | 	mov	result1, local04
225fc                 | LR__3694
225fc     A7 F0 03 F6 | 	mov	ptra, fp
22600     B2 00 A0 FD | 	call	#popregs_
22604                 | _fatfs_cc_check_fs_ret
22604     2D 00 64 FD | 	ret
22608                 | 
22608                 | _fatfs_cc_find_volume
22608     05 4A 05 F6 | 	mov	COUNT_, #5
2260c     A8 00 A0 FD | 	call	#pushregs_
22610     24 F0 07 F1 | 	add	ptra, #36
22614     09 1F 02 F6 | 	mov	local01, arg01
22618     0A 21 02 F6 | 	mov	local02, arg02
2261c     0F 13 02 F6 | 	mov	arg01, local01
22620     00 14 06 F6 | 	mov	arg02, #0
22624     08 FE BF FD | 	call	#_fatfs_cc_check_fs
22628     02 FA 0D F2 | 	cmp	result1, #2 wz
2262c     0C 00 90 AD |  if_e	jmp	#LR__3700
22630     03 FA 15 F2 | 	cmp	result1, #3 wc
22634     00 20 0E C2 |  if_b	cmp	local02, #0 wz
22638     D0 00 90 BD |  if_nc_or_z	jmp	#LR__3708
2263c                 | LR__3700
2263c                 | ' 	for (i = 0; i < 4; i++) {
2263c     00 22 06 F6 | 	mov	local03, #0
22640     97 26 48 FB | 	callpa	#(@LR__3702-@LR__3701)>>2,fcache_load_ptr_
22644                 | LR__3701
22644     04 22 16 F2 | 	cmp	local03, #4 wc
22648     44 00 90 3D |  if_ae	jmp	#LR__3703
2264c     11 25 02 F6 | 	mov	local04, local03
22650     02 24 66 F0 | 	shl	local04, #2
22654     14 4E 05 F1 | 	add	fp, #20
22658     A7 24 02 F1 | 	add	local04, fp
2265c     34 1E 06 F1 | 	add	local01, #52
22660     0F 13 02 F6 | 	mov	arg01, local01
22664     34 1E 86 F1 | 	sub	local01, #52
22668     BE 13 06 F1 | 	add	arg01, #446
2266c     11 15 02 F6 | 	mov	arg02, local03
22670     04 14 66 F0 | 	shl	arg02, #4
22674     0A 13 02 F1 | 	add	arg01, arg02
22678     08 12 06 F1 | 	add	arg01, #8
2267c                 | ' {
2267c                 | ' 
2267c                 | ' 	return *((DWORD*)ptr);
2267c     09 FB 01 FB | 	rdlong	result1, arg01
22680     14 4E 85 F1 | 	sub	fp, #20
22684     12 FB 61 FC | 	wrlong	result1, local04
22688     01 22 06 F1 | 	add	local03, #1
2268c     B4 FF 9F FD | 	jmp	#LR__3701
22690                 | LR__3702
22690                 | LR__3703
22690     00 20 0E F2 | 	cmp	local02, #0 wz
22694     10 25 02 56 |  if_ne	mov	local04, local02
22698     01 24 86 51 |  if_ne	sub	local04, #1
2269c     00 24 06 A6 |  if_e	mov	local04, #0
226a0     12 23 02 F6 | 	mov	local03, local04
226a4                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
226a4                 | ' 	}
226a4                 | ' 	i = part ? part - 1 : 0;
226a4                 | ' 	do {
226a4                 | LR__3704
226a4     11 25 02 F6 | 	mov	local04, local03
226a8     02 24 66 F0 | 	shl	local04, #2
226ac     14 4E 05 F1 | 	add	fp, #20
226b0     A7 24 02 F1 | 	add	local04, fp
226b4     12 25 0A FB | 	rdlong	local04, local04 wz
226b8     14 4E 85 F1 | 	sub	fp, #20
226bc     28 00 90 AD |  if_e	jmp	#LR__3705
226c0     11 25 02 F6 | 	mov	local04, local03
226c4     02 24 66 F0 | 	shl	local04, #2
226c8     14 4E 05 F1 | 	add	fp, #20
226cc     A7 24 02 F1 | 	add	local04, fp
226d0     12 15 02 FB | 	rdlong	arg02, local04
226d4     0F 13 02 F6 | 	mov	arg01, local01
226d8     14 4E 85 F1 | 	sub	fp, #20
226dc     50 FD BF FD | 	call	#_fatfs_cc_check_fs
226e0     FD 24 02 F6 | 	mov	local04, result1
226e4     04 00 90 FD | 	jmp	#LR__3706
226e8                 | LR__3705
226e8     03 24 06 F6 | 	mov	local04, #3
226ec                 | LR__3706
226ec     12 27 02 F6 | 	mov	local05, local04
226f0     00 20 0E F2 | 	cmp	local02, #0 wz
226f4     02 26 16 A2 |  if_e	cmp	local05, #2 wc
226f8     0C 00 90 8D |  if_c_and_z	jmp	#LR__3707
226fc     01 22 06 A1 |  if_e	add	local03, #1
22700     04 22 16 A2 |  if_e	cmp	local03, #4 wc
22704     9C FF 9F 8D |  if_c_and_z	jmp	#LR__3704
22708                 | LR__3707
22708                 | ' 	return fmt;
22708     13 FB 01 F6 | 	mov	result1, local05
2270c                 | LR__3708
2270c     A7 F0 03 F6 | 	mov	ptra, fp
22710     B2 00 A0 FD | 	call	#popregs_
22714                 | _fatfs_cc_find_volume_ret
22714     2D 00 64 FD | 	ret
22718                 | 
22718                 | _fatfs_cc_mount_volume
22718     0B 4A 05 F6 | 	mov	COUNT_, #11
2271c     A8 00 A0 FD | 	call	#pushregs_
22720     0A 1F 02 F6 | 	mov	local01, arg02
22724     0B 21 02 F6 | 	mov	local02, arg03
22728     0F 01 68 FC | 	wrlong	#0, local01
2272c     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
22730     FD 22 02 F6 | 	mov	local03, result1
22734     00 22 56 F2 | 	cmps	local03, #0 wc
22738     0B FA 05 C6 |  if_b	mov	result1, #11
2273c     3C 05 90 CD |  if_b	jmp	#LR__3720
22740     11 17 02 F6 | 	mov	arg03, local03
22744     02 16 66 F0 | 	shl	arg03, #2
22748     F2 16 02 F1 | 	add	arg03, objptr
2274c     0B 25 0A FB | 	rdlong	local04, arg03 wz
22750     0C FA 05 A6 |  if_e	mov	result1, #12
22754     24 05 90 AD |  if_e	jmp	#LR__3720
22758     0F 25 62 FC | 	wrlong	local04, local01
2275c     10 21 E2 F8 | 	getbyte	local02, local02, #0
22760     FE 20 06 F5 | 	and	local02, #254
22764     12 17 CA FA | 	rdbyte	arg03, local04 wz
22768     4C 00 90 AD |  if_e	jmp	#LR__3711
2276c     01 24 06 F1 | 	add	local04, #1
22770     12 13 CA FA | 	rdbyte	arg01, local04 wz
22774     01 24 86 F1 | 	sub	local04, #1
22778     01 FA 05 56 |  if_ne	mov	result1, #1
2277c                 | ' 
2277c                 | ' 	return Stat;
2277c     01 00 00 AF 
22780     20 E4 05 A1 |  if_e	add	objptr, ##544
22784     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
22788     01 00 00 AF 
2278c     20 E4 85 A1 |  if_e	sub	objptr, ##544
22790     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
22794     01 16 CE F7 | 	test	arg03, #1 wz
22798     1C 00 90 5D |  if_ne	jmp	#LR__3710
2279c     00 20 0E F2 | 	cmp	local02, #0 wz
227a0     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
227a4     04 FA CD 57 |  if_ne	test	result1, #4 wz
227a8                 | ' 				return FR_WRITE_PROTECTED;
227a8     0A FA 05 56 |  if_ne	mov	result1, #10
227ac     CC 04 90 5D |  if_ne	jmp	#LR__3720
227b0                 | ' 			}
227b0                 | ' 			return FR_OK;
227b0     00 FA 05 F6 | 	mov	result1, #0
227b4     C4 04 90 FD | 	jmp	#LR__3720
227b8                 | LR__3710
227b8                 | LR__3711
227b8     12 01 48 FC | 	wrbyte	#0, local04
227bc     01 24 06 F1 | 	add	local04, #1
227c0     12 23 42 FC | 	wrbyte	local03, local04
227c4     12 13 C2 FA | 	rdbyte	arg01, local04
227c8     01 24 86 F1 | 	sub	local04, #1
227cc     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
227d0     FD 16 02 F6 | 	mov	arg03, result1
227d4     0B 27 E2 F8 | 	getbyte	local05, arg03, #0
227d8     01 26 CE F7 | 	test	local05, #1 wz
227dc                 | ' 		return FR_NOT_READY;
227dc     03 FA 05 56 |  if_ne	mov	result1, #3
227e0     98 04 90 5D |  if_ne	jmp	#LR__3720
227e4     00 20 0E F2 | 	cmp	local02, #0 wz
227e8     0B 27 02 56 |  if_ne	mov	local05, arg03
227ec     13 27 E2 58 |  if_ne	getbyte	local05, local05, #0
227f0     04 26 CE 57 |  if_ne	test	local05, #4 wz
227f4                 | ' 		return FR_WRITE_PROTECTED;
227f4     0A FA 05 56 |  if_ne	mov	result1, #10
227f8     80 04 90 5D |  if_ne	jmp	#LR__3720
227fc     12 13 02 F6 | 	mov	arg01, local04
22800     00 14 06 F6 | 	mov	arg02, #0
22804     00 FE BF FD | 	call	#_fatfs_cc_find_volume
22808     FD 12 02 F6 | 	mov	arg01, result1
2280c     04 12 0E F2 | 	cmp	arg01, #4 wz
22810     01 FA 05 A6 |  if_e	mov	result1, #1
22814     64 04 90 AD |  if_e	jmp	#LR__3720
22818     02 12 16 F2 | 	cmp	arg01, #2 wc
2281c     0D FA 05 36 |  if_ae	mov	result1, #13
22820     58 04 90 3D |  if_ae	jmp	#LR__3720
22824     30 24 06 F1 | 	add	local04, #48
22828     12 29 02 FB | 	rdlong	local06, local04
2282c     04 24 06 F1 | 	add	local04, #4
22830     12 13 02 F6 | 	mov	arg01, local04
22834     34 24 86 F1 | 	sub	local04, #52
22838     0B 12 06 F1 | 	add	arg01, #11
2283c                 | ' {
2283c                 | ' 
2283c                 | ' 	return *((WORD*)ptr);
2283c     09 FB E1 FA | 	rdword	result1, arg01
22840     01 00 00 FF 
22844     00 FA 0D F2 | 	cmp	result1, ##512 wz
22848     0D FA 05 56 |  if_ne	mov	result1, #13
2284c     2C 04 90 5D |  if_ne	jmp	#LR__3720
22850     34 24 06 F1 | 	add	local04, #52
22854     12 13 02 F6 | 	mov	arg01, local04
22858     34 24 86 F1 | 	sub	local04, #52
2285c     16 12 06 F1 | 	add	arg01, #22
22860                 | ' {
22860                 | ' 
22860                 | ' 	return *((WORD*)ptr);
22860     09 FB E1 FA | 	rdword	result1, arg01
22864     FD 2A 0A F6 | 	mov	local07, result1 wz
22868     18 00 90 5D |  if_ne	jmp	#LR__3712
2286c     34 24 06 F1 | 	add	local04, #52
22870     12 13 02 F6 | 	mov	arg01, local04
22874     34 24 86 F1 | 	sub	local04, #52
22878     24 12 06 F1 | 	add	arg01, #36
2287c                 | ' {
2287c                 | ' 
2287c                 | ' 	return *((DWORD*)ptr);
2287c     09 FB 01 FB | 	rdlong	result1, arg01
22880     FD 2A 02 F6 | 	mov	local07, result1
22884                 | LR__3712
22884     1C 24 06 F1 | 	add	local04, #28
22888     12 2B 62 FC | 	wrlong	local07, local04
2288c     28 24 06 F1 | 	add	local04, #40
22890     12 27 C2 FA | 	rdbyte	local05, local04
22894     42 24 86 F1 | 	sub	local04, #66
22898     12 27 42 FC | 	wrbyte	local05, local04
2289c     12 27 C2 FA | 	rdbyte	local05, local04
228a0     02 24 86 F1 | 	sub	local04, #2
228a4     01 26 0E F2 | 	cmp	local05, #1 wz
228a8     02 24 06 51 |  if_ne	add	local04, #2
228ac     12 27 C2 5A |  if_ne	rdbyte	local05, local04
228b0     02 24 86 51 |  if_ne	sub	local04, #2
228b4     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
228b8     0D FA 05 56 |  if_ne	mov	result1, #13
228bc     BC 03 90 5D |  if_ne	jmp	#LR__3720
228c0     02 24 06 F1 | 	add	local04, #2
228c4     12 27 C2 FA | 	rdbyte	local05, local04
228c8     13 2B 02 FD | 	qmul	local07, local05
228cc     3F 24 06 F1 | 	add	local04, #63
228d0     12 27 C2 FA | 	rdbyte	local05, local04
228d4     37 24 86 F1 | 	sub	local04, #55
228d8     12 27 52 FC | 	wrword	local05, local04
228dc     12 27 EA FA | 	rdword	local05, local04 wz
228e0     0A 24 86 F1 | 	sub	local04, #10
228e4     18 2A 62 FD | 	getqx	local07
228e8     20 00 90 AD |  if_e	jmp	#LR__3713
228ec     0A 24 06 F1 | 	add	local04, #10
228f0     12 27 E2 FA | 	rdword	local05, local04
228f4     13 23 32 F9 | 	getword	local03, local05, #0
228f8     0A 24 86 F1 | 	sub	local04, #10
228fc     13 27 32 F9 | 	getword	local05, local05, #0
22900     01 26 86 F1 | 	sub	local05, #1
22904     13 23 CA F7 | 	test	local03, local05 wz
22908     08 00 90 AD |  if_e	jmp	#LR__3714
2290c                 | LR__3713
2290c     0D FA 05 F6 | 	mov	result1, #13
22910     68 03 90 FD | 	jmp	#LR__3720
22914                 | LR__3714
22914     34 24 06 F1 | 	add	local04, #52
22918     12 13 02 F6 | 	mov	arg01, local04
2291c     11 12 06 F1 | 	add	arg01, #17
22920                 | ' {
22920                 | ' 
22920                 | ' 	return *((WORD*)ptr);
22920     09 FB E1 FA | 	rdword	result1, arg01
22924     2C 24 86 F1 | 	sub	local04, #44
22928     12 FB 51 FC | 	wrword	result1, local04
2292c     12 27 E2 FA | 	rdword	local05, local04
22930     08 24 86 F1 | 	sub	local04, #8
22934     13 13 52 F6 | 	abs	arg01, local05 wc
22938     09 13 42 F8 | 	getnib	arg01, arg01, #0
2293c     09 13 8A F6 | 	negc	arg01, arg01 wz
22940     0D FA 05 56 |  if_ne	mov	result1, #13
22944     34 03 90 5D |  if_ne	jmp	#LR__3720
22948     34 24 06 F1 | 	add	local04, #52
2294c     12 13 02 F6 | 	mov	arg01, local04
22950     34 24 86 F1 | 	sub	local04, #52
22954     13 12 06 F1 | 	add	arg01, #19
22958                 | ' {
22958                 | ' 
22958                 | ' 	return *((WORD*)ptr);
22958     09 FB E1 FA | 	rdword	result1, arg01
2295c     FD 2C 0A F6 | 	mov	local08, result1 wz
22960     34 24 06 A1 |  if_e	add	local04, #52
22964     12 13 02 A6 |  if_e	mov	arg01, local04
22968     34 24 86 A1 |  if_e	sub	local04, #52
2296c     20 12 06 A1 |  if_e	add	arg01, #32
22970                 | ' {
22970                 | ' 
22970                 | ' 	return *((DWORD*)ptr);
22970     09 2D 02 AB |  if_e	rdlong	local08, arg01
22974     34 24 06 F1 | 	add	local04, #52
22978     12 13 02 F6 | 	mov	arg01, local04
2297c     34 24 86 F1 | 	sub	local04, #52
22980     0E 12 06 F1 | 	add	arg01, #14
22984                 | ' {
22984                 | ' 
22984                 | ' 	return *((WORD*)ptr);
22984     09 FB E1 FA | 	rdword	result1, arg01
22988     FD 12 02 F6 | 	mov	arg01, result1
2298c     09 27 02 F6 | 	mov	local05, arg01
22990     0F 26 4E F7 | 	zerox	local05, #15 wz
22994     0D FA 05 A6 |  if_e	mov	result1, #13
22998     E0 02 90 AD |  if_e	jmp	#LR__3720
2299c     09 2F 32 F9 | 	getword	local09, arg01, #0
229a0     15 2F 02 F1 | 	add	local09, local07
229a4     08 24 06 F1 | 	add	local04, #8
229a8     12 27 E2 FA | 	rdword	local05, local04
229ac     08 24 86 F1 | 	sub	local04, #8
229b0     13 27 52 F6 | 	abs	local05, local05 wc
229b4     04 26 46 F0 | 	shr	local05, #4
229b8     13 2F 82 F3 | 	sumc	local09, local05
229bc     17 2D 12 F2 | 	cmp	local08, local09 wc
229c0     0D FA 05 C6 |  if_b	mov	result1, #13
229c4     B4 02 90 CD |  if_b	jmp	#LR__3720
229c8     17 2D 82 F1 | 	sub	local08, local09
229cc     0A 24 06 F1 | 	add	local04, #10
229d0     12 27 E2 FA | 	rdword	local05, local04
229d4     13 2D 12 FD | 	qdiv	local08, local05
229d8     0A 24 86 F1 | 	sub	local04, #10
229dc     18 26 62 FD | 	getqx	local05
229e0     00 26 0E F2 | 	cmp	local05, #0 wz
229e4     0D FA 05 A6 |  if_e	mov	result1, #13
229e8     90 02 90 AD |  if_e	jmp	#LR__3720
229ec     00 30 06 F6 | 	mov	local10, #0
229f0     FF FF 07 FF 
229f4     F6 27 16 F2 | 	cmp	local05, ##268435446 wc
229f8     03 30 06 C6 |  if_b	mov	local10, #3
229fc     7F 00 00 FF 
22a00     F6 27 16 F2 | 	cmp	local05, ##65526 wc
22a04     02 30 06 C6 |  if_b	mov	local10, #2
22a08     07 00 00 FF 
22a0c     F6 27 16 F2 | 	cmp	local05, ##4086 wc
22a10     01 30 06 C6 |  if_b	mov	local10, #1
22a14     00 30 0E F2 | 	cmp	local10, #0 wz
22a18     0D FA 05 A6 |  if_e	mov	result1, #13
22a1c     5C 02 90 AD |  if_e	jmp	#LR__3720
22a20     02 26 06 F1 | 	add	local05, #2
22a24     18 24 06 F1 | 	add	local04, #24
22a28     12 27 62 FC | 	wrlong	local05, local04
22a2c     08 24 06 F1 | 	add	local04, #8
22a30     12 29 62 FC | 	wrlong	local06, local04
22a34     14 27 02 F6 | 	mov	local05, local06
22a38     09 13 32 F9 | 	getword	arg01, arg01, #0
22a3c     09 27 02 F1 | 	add	local05, arg01
22a40     04 24 06 F1 | 	add	local04, #4
22a44     12 27 62 FC | 	wrlong	local05, local04
22a48     14 27 02 F6 | 	mov	local05, local06
22a4c     17 27 02 F1 | 	add	local05, local09
22a50     08 24 06 F1 | 	add	local04, #8
22a54     12 27 62 FC | 	wrlong	local05, local04
22a58     2C 24 86 F1 | 	sub	local04, #44
22a5c     03 30 0E F2 | 	cmp	local10, #3 wz
22a60     5C 00 90 5D |  if_ne	jmp	#LR__3715
22a64     34 24 06 F1 | 	add	local04, #52
22a68     12 13 02 F6 | 	mov	arg01, local04
22a6c     34 24 86 F1 | 	sub	local04, #52
22a70     2A 12 06 F1 | 	add	arg01, #42
22a74                 | ' {
22a74                 | ' 
22a74                 | ' 	return *((WORD*)ptr);
22a74     09 FB E9 FA | 	rdword	result1, arg01 wz
22a78     0D FA 05 56 |  if_ne	mov	result1, #13
22a7c     FC 01 90 5D |  if_ne	jmp	#LR__3720
22a80     08 24 06 F1 | 	add	local04, #8
22a84     12 27 EA FA | 	rdword	local05, local04 wz
22a88     08 24 86 F1 | 	sub	local04, #8
22a8c     0D FA 05 56 |  if_ne	mov	result1, #13
22a90     E8 01 90 5D |  if_ne	jmp	#LR__3720
22a94     34 24 06 F1 | 	add	local04, #52
22a98     12 13 02 F6 | 	mov	arg01, local04
22a9c     2C 12 06 F1 | 	add	arg01, #44
22aa0                 | ' {
22aa0                 | ' 
22aa0                 | ' 	return *((DWORD*)ptr);
22aa0     09 FB 01 FB | 	rdlong	result1, arg01
22aa4     0C 24 86 F1 | 	sub	local04, #12
22aa8     12 FB 61 FC | 	wrlong	result1, local04
22aac     10 24 86 F1 | 	sub	local04, #16
22ab0     12 33 02 FB | 	rdlong	local11, local04
22ab4     18 24 86 F1 | 	sub	local04, #24
22ab8     02 32 66 F0 | 	shl	local11, #2
22abc     6C 00 90 FD | 	jmp	#LR__3717
22ac0                 | LR__3715
22ac0     08 24 06 F1 | 	add	local04, #8
22ac4     12 27 EA FA | 	rdword	local05, local04 wz
22ac8     08 24 86 F1 | 	sub	local04, #8
22acc     0D FA 05 A6 |  if_e	mov	result1, #13
22ad0     A8 01 90 AD |  if_e	jmp	#LR__3720
22ad4     24 24 06 F1 | 	add	local04, #36
22ad8     12 27 02 FB | 	rdlong	local05, local04
22adc     15 27 02 F1 | 	add	local05, local07
22ae0     04 24 06 F1 | 	add	local04, #4
22ae4     12 27 62 FC | 	wrlong	local05, local04
22ae8     28 24 86 F1 | 	sub	local04, #40
22aec     02 30 0E F2 | 	cmp	local10, #2 wz
22af0     18 24 06 A1 |  if_e	add	local04, #24
22af4     12 27 02 AB |  if_e	rdlong	local05, local04
22af8     18 24 86 A1 |  if_e	sub	local04, #24
22afc     01 26 66 A0 |  if_e	shl	local05, #1
22b00     24 00 90 AD |  if_e	jmp	#LR__3716
22b04     18 24 06 F1 | 	add	local04, #24
22b08     12 33 02 FB | 	rdlong	local11, local04
22b0c     19 27 02 F6 | 	mov	local05, local11
22b10     01 26 66 F0 | 	shl	local05, #1
22b14     19 27 02 F1 | 	add	local05, local11
22b18     01 26 46 F0 | 	shr	local05, #1
22b1c     18 24 86 F1 | 	sub	local04, #24
22b20     01 32 06 F5 | 	and	local11, #1
22b24     19 27 02 F1 | 	add	local05, local11
22b28                 | LR__3716
22b28     13 33 02 F6 | 	mov	local11, local05
22b2c                 | LR__3717
22b2c     FF 33 06 F1 | 	add	local11, #511
22b30     09 32 46 F0 | 	shr	local11, #9
22b34     1C 24 06 F1 | 	add	local04, #28
22b38     12 17 02 FB | 	rdlong	arg03, local04
22b3c     1C 24 86 F1 | 	sub	local04, #28
22b40     19 17 12 F2 | 	cmp	arg03, local11 wc
22b44     0D FA 05 C6 |  if_b	mov	result1, #13
22b48     30 01 90 CD |  if_b	jmp	#LR__3720
22b4c     14 24 06 F1 | 	add	local04, #20
22b50     FF FF FF FF 
22b54     12 FF 6B FC | 	wrlong	##-1, local04
22b58     04 24 86 F1 | 	sub	local04, #4
22b5c     FF FF FF FF 
22b60     12 FF 6B FC | 	wrlong	##-1, local04
22b64     0C 24 86 F1 | 	sub	local04, #12
22b68     12 01 49 FC | 	wrbyte	#128, local04
22b6c     04 24 86 F1 | 	sub	local04, #4
22b70     03 30 0E F2 | 	cmp	local10, #3 wz
22b74     D0 00 90 5D |  if_ne	jmp	#LR__3719
22b78     34 24 06 F1 | 	add	local04, #52
22b7c     12 13 02 F6 | 	mov	arg01, local04
22b80     34 24 86 F1 | 	sub	local04, #52
22b84     30 12 06 F1 | 	add	arg01, #48
22b88                 | ' {
22b88                 | ' 
22b88                 | ' 	return *((WORD*)ptr);
22b88     09 FB E1 FA | 	rdword	result1, arg01
22b8c     FD 26 32 F9 | 	getword	local05, result1, #0
22b90     01 26 0E F2 | 	cmp	local05, #1 wz
22b94     B0 00 90 5D |  if_ne	jmp	#LR__3719
22b98     01 28 06 F1 | 	add	local06, #1
22b9c     12 13 02 F6 | 	mov	arg01, local04
22ba0     14 15 02 F6 | 	mov	arg02, local06
22ba4     CC CD BF FD | 	call	#_fatfs_cc_move_window
22ba8     00 FA 0D F2 | 	cmp	result1, #0 wz
22bac     98 00 90 5D |  if_ne	jmp	#LR__3719
22bb0     04 24 06 F1 | 	add	local04, #4
22bb4     12 01 48 FC | 	wrbyte	#0, local04
22bb8     30 24 06 F1 | 	add	local04, #48
22bbc     12 13 02 F6 | 	mov	arg01, local04
22bc0     34 24 86 F1 | 	sub	local04, #52
22bc4     FE 13 06 F1 | 	add	arg01, #510
22bc8                 | ' {
22bc8                 | ' 
22bc8                 | ' 	return *((WORD*)ptr);
22bc8     09 FB E1 FA | 	rdword	result1, arg01
22bcc     FD 26 32 F9 | 	getword	local05, result1, #0
22bd0     55 00 00 FF 
22bd4     55 26 0E F2 | 	cmp	local05, ##43605 wz
22bd8     34 24 06 A1 |  if_e	add	local04, #52
22bdc     12 13 02 A6 |  if_e	mov	arg01, local04
22be0     34 24 86 A1 |  if_e	sub	local04, #52
22be4                 | ' {
22be4                 | ' 
22be4                 | ' 	return *((DWORD*)ptr);
22be4     09 FB 01 AB |  if_e	rdlong	result1, arg01
22be8     A9 B0 20 AF 
22bec     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
22bf0     54 00 90 5D |  if_ne	jmp	#LR__3718
22bf4     34 24 06 F1 | 	add	local04, #52
22bf8     12 13 02 F6 | 	mov	arg01, local04
22bfc     34 24 86 F1 | 	sub	local04, #52
22c00     E4 13 06 F1 | 	add	arg01, #484
22c04                 | ' {
22c04                 | ' 
22c04                 | ' 	return *((DWORD*)ptr);
22c04     09 FB 01 FB | 	rdlong	result1, arg01
22c08     B9 A0 30 FF 
22c0c     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
22c10     34 00 90 5D |  if_ne	jmp	#LR__3718
22c14     34 24 06 F1 | 	add	local04, #52
22c18     12 13 02 F6 | 	mov	arg01, local04
22c1c     E8 13 06 F1 | 	add	arg01, #488
22c20                 | ' {
22c20                 | ' 
22c20                 | ' 	return *((DWORD*)ptr);
22c20     09 FB 01 FB | 	rdlong	result1, arg01
22c24     20 24 86 F1 | 	sub	local04, #32
22c28     12 FB 61 FC | 	wrlong	result1, local04
22c2c     20 24 06 F1 | 	add	local04, #32
22c30     12 13 02 F6 | 	mov	arg01, local04
22c34     EC 13 06 F1 | 	add	arg01, #492
22c38                 | ' {
22c38                 | ' 
22c38                 | ' 	return *((DWORD*)ptr);
22c38     09 FB 01 FB | 	rdlong	result1, arg01
22c3c     24 24 86 F1 | 	sub	local04, #36
22c40     12 FB 61 FC | 	wrlong	result1, local04
22c44     10 24 86 F1 | 	sub	local04, #16
22c48                 | LR__3718
22c48                 | LR__3719
22c48     12 31 42 FC | 	wrbyte	local10, local04
22c4c     04 E4 05 F1 | 	add	objptr, #4
22c50     F2 26 E2 FA | 	rdword	local05, objptr
22c54     01 26 06 F1 | 	add	local05, #1
22c58     F2 26 52 FC | 	wrword	local05, objptr
22c5c     F2 32 E2 FA | 	rdword	local11, objptr
22c60     06 24 06 F1 | 	add	local04, #6
22c64     12 33 52 FC | 	wrword	local11, local04
22c68     04 E4 05 F1 | 	add	objptr, #4
22c6c     06 24 06 F1 | 	add	local04, #6
22c70     12 E5 61 FC | 	wrlong	objptr, local04
22c74                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
22c74                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
22c74                 | ' 			{
22c74                 | ' 
22c74                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
22c74                 | ' 
22c74                 | ' 
22c74                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
22c74                 | ' 
22c74                 | ' 			}
22c74                 | ' 		}
22c74                 | ' 
22c74                 | ' 
22c74                 | ' 	}
22c74                 | ' 
22c74                 | ' 	fs->fs_type = (BYTE)fmt;
22c74                 | ' 	fs->id = ++Fsid;
22c74                 | ' 
22c74                 | ' 	fs->lfnbuf = LfnBuf;
22c74                 | ' #line 3567 "ff.c"
22c74                 | ' 	return FR_OK;
22c74     00 FA 05 F6 | 	mov	result1, #0
22c78     08 E4 85 F1 | 	sub	objptr, #8
22c7c                 | LR__3720
22c7c     A7 F0 03 F6 | 	mov	ptra, fp
22c80     B2 00 A0 FD | 	call	#popregs_
22c84                 | _fatfs_cc_mount_volume_ret
22c84     2D 00 64 FD | 	ret
22c88                 | 
22c88                 | _fatfs_cc_validate
22c88     09 01 0A F6 | 	mov	_var01, arg01 wz
22c8c     09 02 06 F6 | 	mov	_var02, #9
22c90     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
22c94     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
22c98     50 00 90 AD |  if_e	jmp	#LR__3730
22c9c     04 00 06 F1 | 	add	_var01, #4
22ca0     00 07 E2 FA | 	rdword	_var04, _var01
22ca4     04 00 86 F1 | 	sub	_var01, #4
22ca8     00 13 02 FB | 	rdlong	arg01, _var01
22cac     06 12 06 F1 | 	add	arg01, #6
22cb0     09 FB E1 FA | 	rdword	result1, arg01
22cb4     FD 06 0A F2 | 	cmp	_var04, result1 wz
22cb8     30 00 90 5D |  if_ne	jmp	#LR__3730
22cbc     00 07 02 FB | 	rdlong	_var04, _var01
22cc0     01 06 06 F1 | 	add	_var04, #1
22cc4     03 13 CA FA | 	rdbyte	arg01, _var04 wz
22cc8     01 FA 05 56 |  if_ne	mov	result1, #1
22ccc                 | ' 
22ccc                 | ' 	return Stat;
22ccc     01 00 00 AF 
22cd0     20 E4 05 A1 |  if_e	add	objptr, ##544
22cd4     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
22cd8     01 00 00 AF 
22cdc     20 E4 85 A1 |  if_e	sub	objptr, ##544
22ce0     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
22ce4     01 04 CE F7 | 	test	_var03, #1 wz
22ce8     00 02 06 A6 |  if_e	mov	_var02, #0
22cec                 | LR__3730
22cec     00 02 0E F2 | 	cmp	_var02, #0 wz
22cf0     00 05 02 AB |  if_e	rdlong	_var03, _var01
22cf4     00 04 06 56 |  if_ne	mov	_var03, #0
22cf8     0A 05 62 FC | 	wrlong	_var03, arg02
22cfc                 | ' 			res = FR_OK;
22cfc                 | ' 		}
22cfc                 | ' 
22cfc                 | ' 	}
22cfc                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
22cfc                 | ' 	return res;
22cfc     01 FB 01 F6 | 	mov	result1, _var02
22d00                 | _fatfs_cc_validate_ret
22d00     2D 00 64 FD | 	ret
22d04                 | 
22d04                 | _fatfs_cc_f_mount
22d04     01 4A 05 F6 | 	mov	COUNT_, #1
22d08     A8 00 A0 FD | 	call	#pushregs_
22d0c     20 F0 07 F1 | 	add	ptra, #32
22d10     04 4E 05 F1 | 	add	fp, #4
22d14     A7 12 62 FC | 	wrlong	arg01, fp
22d18     04 4E 05 F1 | 	add	fp, #4
22d1c     A7 14 62 FC | 	wrlong	arg02, fp
22d20     04 4E 05 F1 | 	add	fp, #4
22d24     A7 16 42 FC | 	wrbyte	arg03, fp
22d28     04 4E 85 F1 | 	sub	fp, #4
22d2c     A7 16 02 FB | 	rdlong	arg03, fp
22d30     14 4E 05 F1 | 	add	fp, #20
22d34     A7 16 62 FC | 	wrlong	arg03, fp
22d38     A7 12 02 F6 | 	mov	arg01, fp
22d3c     1C 4E 85 F1 | 	sub	fp, #28
22d40     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
22d44     14 4E 05 F1 | 	add	fp, #20
22d48     A7 FA 61 FC | 	wrlong	result1, fp
22d4c     14 4E 85 F1 | 	sub	fp, #20
22d50     00 FA 55 F2 | 	cmps	result1, #0 wc
22d54     0B FA 05 C6 |  if_b	mov	result1, #11
22d58     C0 00 90 CD |  if_b	jmp	#LR__3741
22d5c     14 4E 05 F1 | 	add	fp, #20
22d60     A7 16 02 FB | 	rdlong	arg03, fp
22d64     02 16 66 F0 | 	shl	arg03, #2
22d68     F2 16 02 F1 | 	add	arg03, objptr
22d6c     0B 17 0A FB | 	rdlong	arg03, arg03 wz
22d70     04 4E 85 F1 | 	sub	fp, #4
22d74     A7 16 62 FC | 	wrlong	arg03, fp
22d78     10 4E 85 F1 | 	sub	fp, #16
22d7c     28 00 90 AD |  if_e	jmp	#LR__3740
22d80     10 4E 05 F1 | 	add	fp, #16
22d84     A7 16 02 FB | 	rdlong	arg03, fp
22d88     10 4E 85 F1 | 	sub	fp, #16
22d8c     01 16 06 F1 | 	add	arg03, #1
22d90     0B 13 C2 FA | 	rdbyte	arg01, arg03
22d94     28 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
22d98     10 4E 05 F1 | 	add	fp, #16
22d9c     A7 16 02 FB | 	rdlong	arg03, fp
22da0     10 4E 85 F1 | 	sub	fp, #16
22da4     0B 01 48 FC | 	wrbyte	#0, arg03
22da8                 | LR__3740
22da8     04 4E 05 F1 | 	add	fp, #4
22dac     A7 1E 0A FB | 	rdlong	local01, fp wz
22db0     04 4E 85 F1 | 	sub	fp, #4
22db4     04 4E 05 51 |  if_ne	add	fp, #4
22db8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
22dbc     04 4E 85 51 |  if_ne	sub	fp, #4
22dc0     0F 01 48 5C |  if_ne	wrbyte	#0, local01
22dc4     14 4E 05 F1 | 	add	fp, #20
22dc8     A7 1E 02 FB | 	rdlong	local01, fp
22dcc     02 1E 66 F0 | 	shl	local01, #2
22dd0     F2 1E 02 F1 | 	add	local01, objptr
22dd4     10 4E 85 F1 | 	sub	fp, #16
22dd8     A7 16 02 FB | 	rdlong	arg03, fp
22ddc     0F 17 62 FC | 	wrlong	arg03, local01
22de0     08 4E 05 F1 | 	add	fp, #8
22de4     A7 1E CA FA | 	rdbyte	local01, fp wz
22de8     0C 4E 85 F1 | 	sub	fp, #12
22dec     00 FA 05 A6 |  if_e	mov	result1, #0
22df0     28 00 90 AD |  if_e	jmp	#LR__3741
22df4     08 4E 05 F1 | 	add	fp, #8
22df8     A7 12 02 F6 | 	mov	arg01, fp
22dfc     04 4E 85 F1 | 	sub	fp, #4
22e00     A7 14 02 F6 | 	mov	arg02, fp
22e04     04 4E 85 F1 | 	sub	fp, #4
22e08     00 16 06 F6 | 	mov	arg03, #0
22e0c     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
22e10     18 4E 05 F1 | 	add	fp, #24
22e14     A7 FA 61 FC | 	wrlong	result1, fp
22e18                 | ' 
22e18                 | ' 	res = mount_volume(&path, &fs, 0);
22e18                 | ' 	return res ;
22e18     18 4E 85 F1 | 	sub	fp, #24
22e1c                 | LR__3741
22e1c     A7 F0 03 F6 | 	mov	ptra, fp
22e20     B2 00 A0 FD | 	call	#popregs_
22e24                 | _fatfs_cc_f_mount_ret
22e24     2D 00 64 FD | 	ret
22e28                 | 
22e28                 | _fatfs_cc_f_open
22e28     02 4A 05 F6 | 	mov	COUNT_, #2
22e2c     A8 00 A0 FD | 	call	#pushregs_
22e30     60 F0 07 F1 | 	add	ptra, #96
22e34     04 4E 05 F1 | 	add	fp, #4
22e38     A7 12 62 FC | 	wrlong	arg01, fp
22e3c     04 4E 05 F1 | 	add	fp, #4
22e40     A7 14 62 FC | 	wrlong	arg02, fp
22e44     04 4E 05 F1 | 	add	fp, #4
22e48     A7 16 42 FC | 	wrbyte	arg03, fp
22e4c     08 4E 85 F1 | 	sub	fp, #8
22e50     A7 18 0A FB | 	rdlong	arg04, fp wz
22e54     04 4E 85 F1 | 	sub	fp, #4
22e58     09 FA 05 A6 |  if_e	mov	result1, #9
22e5c     98 06 90 AD |  if_e	jmp	#LR__3767
22e60     0C 4E 05 F1 | 	add	fp, #12
22e64     A7 18 C2 FA | 	rdbyte	arg04, fp
22e68     3F 18 06 F5 | 	and	arg04, #63
22e6c     A7 18 42 FC | 	wrbyte	arg04, fp
22e70     04 4E 85 F1 | 	sub	fp, #4
22e74     A7 12 02 F6 | 	mov	arg01, fp
22e78     3C 4E 05 F1 | 	add	fp, #60
22e7c     A7 14 02 F6 | 	mov	arg02, fp
22e80     38 4E 85 F1 | 	sub	fp, #56
22e84     A7 16 C2 FA | 	rdbyte	arg03, fp
22e88     0C 4E 85 F1 | 	sub	fp, #12
22e8c     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
22e90     10 4E 05 F1 | 	add	fp, #16
22e94     A7 FA 61 FC | 	wrlong	result1, fp
22e98     10 4E 85 F1 | 	sub	fp, #16
22e9c     00 FA 0D F2 | 	cmp	result1, #0 wz
22ea0     2C 06 90 5D |  if_ne	jmp	#LR__3766
22ea4     44 4E 05 F1 | 	add	fp, #68
22ea8     A7 18 02 FB | 	rdlong	arg04, fp
22eac     30 4E 85 F1 | 	sub	fp, #48
22eb0     A7 18 62 FC | 	wrlong	arg04, fp
22eb4     A7 12 02 F6 | 	mov	arg01, fp
22eb8     0C 4E 85 F1 | 	sub	fp, #12
22ebc     A7 1E 02 FB | 	rdlong	local01, fp
22ec0     08 4E 85 F1 | 	sub	fp, #8
22ec4     0F 15 02 F6 | 	mov	arg02, local01
22ec8     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
22ecc     10 4E 05 F1 | 	add	fp, #16
22ed0     A7 FA 61 FC | 	wrlong	result1, fp
22ed4     10 4E 85 F1 | 	sub	fp, #16
22ed8     00 FA 0D F2 | 	cmp	result1, #0 wz
22edc     1C 00 90 5D |  if_ne	jmp	#LR__3750
22ee0     3F 4E 05 F1 | 	add	fp, #63
22ee4     A7 18 C2 FA | 	rdbyte	arg04, fp
22ee8     3F 4E 85 F1 | 	sub	fp, #63
22eec     80 18 CE F7 | 	test	arg04, #128 wz
22ef0     10 4E 05 51 |  if_ne	add	fp, #16
22ef4     A7 0C 68 5C |  if_ne	wrlong	#6, fp
22ef8     10 4E 85 51 |  if_ne	sub	fp, #16
22efc                 | LR__3750
22efc     0C 4E 05 F1 | 	add	fp, #12
22f00     A7 18 C2 FA | 	rdbyte	arg04, fp
22f04     0C 4E 85 F1 | 	sub	fp, #12
22f08     1C 18 CE F7 | 	test	arg04, #28 wz
22f0c     F0 01 90 AD |  if_e	jmp	#LR__3755
22f10     10 4E 05 F1 | 	add	fp, #16
22f14     A7 1E 0A FB | 	rdlong	local01, fp wz
22f18     10 4E 85 F1 | 	sub	fp, #16
22f1c     48 00 90 AD |  if_e	jmp	#LR__3752
22f20     10 4E 05 F1 | 	add	fp, #16
22f24     A7 18 02 FB | 	rdlong	arg04, fp
22f28     10 4E 85 F1 | 	sub	fp, #16
22f2c     04 18 0E F2 | 	cmp	arg04, #4 wz
22f30     1C 00 90 5D |  if_ne	jmp	#LR__3751
22f34     14 4E 05 F1 | 	add	fp, #20
22f38     A7 12 02 F6 | 	mov	arg01, fp
22f3c     14 4E 85 F1 | 	sub	fp, #20
22f40     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
22f44     10 4E 05 F1 | 	add	fp, #16
22f48     A7 FA 61 FC | 	wrlong	result1, fp
22f4c     10 4E 85 F1 | 	sub	fp, #16
22f50                 | LR__3751
22f50     0C 4E 05 F1 | 	add	fp, #12
22f54     A7 1E C2 FA | 	rdbyte	local01, fp
22f58     08 1E 46 F5 | 	or	local01, #8
22f5c     A7 1E 42 FC | 	wrbyte	local01, fp
22f60     0C 4E 85 F1 | 	sub	fp, #12
22f64     3C 00 90 FD | 	jmp	#LR__3754
22f68                 | LR__3752
22f68     1A 4E 05 F1 | 	add	fp, #26
22f6c     A7 1E C2 FA | 	rdbyte	local01, fp
22f70     1A 4E 85 F1 | 	sub	fp, #26
22f74     11 1E CE F7 | 	test	local01, #17 wz
22f78     10 4E 05 51 |  if_ne	add	fp, #16
22f7c     A7 0E 68 5C |  if_ne	wrlong	#7, fp
22f80     10 4E 85 51 |  if_ne	sub	fp, #16
22f84     1C 00 90 5D |  if_ne	jmp	#LR__3753
22f88     0C 4E 05 F1 | 	add	fp, #12
22f8c     A7 1E C2 FA | 	rdbyte	local01, fp
22f90     0C 4E 85 F1 | 	sub	fp, #12
22f94     04 1E CE F7 | 	test	local01, #4 wz
22f98     10 4E 05 51 |  if_ne	add	fp, #16
22f9c     A7 10 68 5C |  if_ne	wrlong	#8, fp
22fa0     10 4E 85 51 |  if_ne	sub	fp, #16
22fa4                 | LR__3753
22fa4                 | LR__3754
22fa4     10 4E 05 F1 | 	add	fp, #16
22fa8     A7 1E 0A FB | 	rdlong	local01, fp wz
22fac     10 4E 85 F1 | 	sub	fp, #16
22fb0     A8 01 90 5D |  if_ne	jmp	#LR__3758
22fb4     0C 4E 05 F1 | 	add	fp, #12
22fb8     A7 1E C2 FA | 	rdbyte	local01, fp
22fbc     0C 4E 85 F1 | 	sub	fp, #12
22fc0     08 1E CE F7 | 	test	local01, #8 wz
22fc4     94 01 90 AD |  if_e	jmp	#LR__3758
22fc8     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
22fcc     54 4E 05 F1 | 	add	fp, #84
22fd0     A7 FA 61 FC | 	wrlong	result1, fp
22fd4     24 4E 85 F1 | 	sub	fp, #36
22fd8     A7 12 02 FB | 	rdlong	arg01, fp
22fdc     0E 12 06 F1 | 	add	arg01, #14
22fe0     09 FB 61 FC | 	wrlong	result1, arg01
22fe4     A7 12 02 FB | 	rdlong	arg01, fp
22fe8     16 12 06 F1 | 	add	arg01, #22
22fec     24 4E 05 F1 | 	add	fp, #36
22ff0     A7 14 02 FB | 	rdlong	arg02, fp
22ff4     09 15 62 FC | 	wrlong	arg02, arg01
22ff8     10 4E 85 F1 | 	sub	fp, #16
22ffc     A7 12 02 FB | 	rdlong	arg01, fp
23000     14 4E 85 F1 | 	sub	fp, #20
23004     A7 14 02 FB | 	rdlong	arg02, fp
23008     30 4E 85 F1 | 	sub	fp, #48
2300c     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
23010     48 4E 05 F1 | 	add	fp, #72
23014     A7 FA 61 FC | 	wrlong	result1, fp
23018     18 4E 85 F1 | 	sub	fp, #24
2301c     A7 1E 02 FB | 	rdlong	local01, fp
23020     0B 1E 06 F1 | 	add	local01, #11
23024     0F 41 48 FC | 	wrbyte	#32, local01
23028     14 4E 05 F1 | 	add	fp, #20
2302c     A7 12 02 FB | 	rdlong	arg01, fp
23030     14 4E 85 F1 | 	sub	fp, #20
23034     A7 14 02 FB | 	rdlong	arg02, fp
23038     30 4E 85 F1 | 	sub	fp, #48
2303c     00 16 06 F6 | 	mov	arg03, #0
23040     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
23044     30 4E 05 F1 | 	add	fp, #48
23048     A7 12 02 FB | 	rdlong	arg01, fp
2304c     1C 12 06 F1 | 	add	arg01, #28
23050     09 01 68 FC | 	wrlong	#0, arg01
23054     14 4E 05 F1 | 	add	fp, #20
23058     A7 1E 02 FB | 	rdlong	local01, fp
2305c     03 1E 06 F1 | 	add	local01, #3
23060     0F 03 48 FC | 	wrbyte	#1, local01
23064     04 4E 05 F1 | 	add	fp, #4
23068     A7 1E 0A FB | 	rdlong	local01, fp wz
2306c     48 4E 85 F1 | 	sub	fp, #72
23070     E8 00 90 AD |  if_e	jmp	#LR__3758
23074     44 4E 05 F1 | 	add	fp, #68
23078     A7 1E 02 FB | 	rdlong	local01, fp
2307c     30 1E 06 F1 | 	add	local01, #48
23080     0F 1F 02 FB | 	rdlong	local01, local01
23084     14 4E 05 F1 | 	add	fp, #20
23088     A7 1E 62 FC | 	wrlong	local01, fp
2308c     44 4E 85 F1 | 	sub	fp, #68
23090     A7 12 02 F6 | 	mov	arg01, fp
23094     34 4E 05 F1 | 	add	fp, #52
23098     A7 14 02 FB | 	rdlong	arg02, fp
2309c     48 4E 85 F1 | 	sub	fp, #72
230a0     00 16 06 F6 | 	mov	arg03, #0
230a4     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
230a8     10 4E 05 F1 | 	add	fp, #16
230ac     A7 FA 61 FC | 	wrlong	result1, fp
230b0     10 4E 85 F1 | 	sub	fp, #16
230b4     00 FA 0D F2 | 	cmp	result1, #0 wz
230b8     A0 00 90 5D |  if_ne	jmp	#LR__3758
230bc     44 4E 05 F1 | 	add	fp, #68
230c0     A7 12 02 FB | 	rdlong	arg01, fp
230c4     14 4E 05 F1 | 	add	fp, #20
230c8     A7 14 02 FB | 	rdlong	arg02, fp
230cc     58 4E 85 F1 | 	sub	fp, #88
230d0     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
230d4     10 4E 05 F1 | 	add	fp, #16
230d8     A7 FA 61 FC | 	wrlong	result1, fp
230dc     34 4E 05 F1 | 	add	fp, #52
230e0     A7 18 02 FB | 	rdlong	arg04, fp
230e4     04 4E 05 F1 | 	add	fp, #4
230e8     A7 1E 02 FB | 	rdlong	local01, fp
230ec     48 4E 85 F1 | 	sub	fp, #72
230f0     01 1E 86 F1 | 	sub	local01, #1
230f4     10 18 06 F1 | 	add	arg04, #16
230f8     0C 1F 62 FC | 	wrlong	local01, arg04
230fc     5C 00 90 FD | 	jmp	#LR__3758
23100                 | LR__3755
23100     10 4E 05 F1 | 	add	fp, #16
23104     A7 18 0A FB | 	rdlong	arg04, fp wz
23108     10 4E 85 F1 | 	sub	fp, #16
2310c     4C 00 90 5D |  if_ne	jmp	#LR__3757
23110     1A 4E 05 F1 | 	add	fp, #26
23114     A7 18 C2 FA | 	rdbyte	arg04, fp
23118     1A 4E 85 F1 | 	sub	fp, #26
2311c     10 18 CE F7 | 	test	arg04, #16 wz
23120     10 4E 05 51 |  if_ne	add	fp, #16
23124     A7 08 68 5C |  if_ne	wrlong	#4, fp
23128     10 4E 85 51 |  if_ne	sub	fp, #16
2312c     2C 00 90 5D |  if_ne	jmp	#LR__3756
23130     0C 4E 05 F1 | 	add	fp, #12
23134     A7 18 C2 FA | 	rdbyte	arg04, fp
23138     0C 4E 85 F1 | 	sub	fp, #12
2313c     02 18 CE F7 | 	test	arg04, #2 wz
23140     1A 4E 05 51 |  if_ne	add	fp, #26
23144     A7 1E C2 5A |  if_ne	rdbyte	local01, fp
23148     1A 4E 85 51 |  if_ne	sub	fp, #26
2314c     01 1E CE 57 |  if_ne	test	local01, #1 wz
23150     10 4E 05 51 |  if_ne	add	fp, #16
23154     A7 0E 68 5C |  if_ne	wrlong	#7, fp
23158     10 4E 85 51 |  if_ne	sub	fp, #16
2315c                 | LR__3756
2315c                 | LR__3757
2315c                 | LR__3758
2315c     10 4E 05 F1 | 	add	fp, #16
23160     A7 1E 0A FB | 	rdlong	local01, fp wz
23164     10 4E 85 F1 | 	sub	fp, #16
23168     60 00 90 5D |  if_ne	jmp	#LR__3759
2316c     0C 4E 05 F1 | 	add	fp, #12
23170     A7 20 C2 FA | 	rdbyte	local02, fp
23174     0C 4E 85 F1 | 	sub	fp, #12
23178     08 20 CE F7 | 	test	local02, #8 wz
2317c     0C 4E 05 51 |  if_ne	add	fp, #12
23180     A7 20 C2 5A |  if_ne	rdbyte	local02, fp
23184     40 20 46 55 |  if_ne	or	local02, #64
23188     A7 20 42 5C |  if_ne	wrbyte	local02, fp
2318c     0C 4E 85 51 |  if_ne	sub	fp, #12
23190     04 4E 05 F1 | 	add	fp, #4
23194     A7 20 02 FB | 	rdlong	local02, fp
23198     40 4E 05 F1 | 	add	fp, #64
2319c     A7 1E 02 FB | 	rdlong	local01, fp
231a0     30 1E 06 F1 | 	add	local01, #48
231a4     0F 1F 02 FB | 	rdlong	local01, local01
231a8     20 20 06 F1 | 	add	local02, #32
231ac     10 1F 62 FC | 	wrlong	local01, local02
231b0     40 4E 85 F1 | 	sub	fp, #64
231b4     A7 20 02 FB | 	rdlong	local02, fp
231b8     2C 4E 05 F1 | 	add	fp, #44
231bc     A7 1E 02 FB | 	rdlong	local01, fp
231c0     30 4E 85 F1 | 	sub	fp, #48
231c4     24 20 06 F1 | 	add	local02, #36
231c8     10 1F 62 FC | 	wrlong	local01, local02
231cc                 | LR__3759
231cc     10 4E 05 F1 | 	add	fp, #16
231d0     A7 20 0A FB | 	rdlong	local02, fp wz
231d4     10 4E 85 F1 | 	sub	fp, #16
231d8     F4 02 90 5D |  if_ne	jmp	#LR__3765
231dc     04 4E 05 F1 | 	add	fp, #4
231e0     A7 20 02 FB | 	rdlong	local02, fp
231e4     40 4E 05 F1 | 	add	fp, #64
231e8     A7 12 02 FB | 	rdlong	arg01, fp
231ec     14 4E 85 F1 | 	sub	fp, #20
231f0     A7 14 02 FB | 	rdlong	arg02, fp
231f4     30 4E 85 F1 | 	sub	fp, #48
231f8     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
231fc     08 20 06 F1 | 	add	local02, #8
23200     10 FB 61 FC | 	wrlong	result1, local02
23204     04 4E 05 F1 | 	add	fp, #4
23208     A7 20 02 FB | 	rdlong	local02, fp
2320c     2C 4E 05 F1 | 	add	fp, #44
23210     A7 12 02 FB | 	rdlong	arg01, fp
23214     1C 12 06 F1 | 	add	arg01, #28
23218                 | ' {
23218                 | ' 
23218                 | ' 	return *((DWORD*)ptr);
23218     09 FB 01 FB | 	rdlong	result1, arg01
2321c     0C 20 06 F1 | 	add	local02, #12
23220     10 FB 61 FC | 	wrlong	result1, local02
23224     2C 4E 85 F1 | 	sub	fp, #44
23228     A7 20 02 FB | 	rdlong	local02, fp
2322c     40 4E 05 F1 | 	add	fp, #64
23230     A7 1E 02 FB | 	rdlong	local01, fp
23234     10 1F 62 FC | 	wrlong	local01, local02
23238     40 4E 85 F1 | 	sub	fp, #64
2323c     A7 20 02 FB | 	rdlong	local02, fp
23240     40 4E 05 F1 | 	add	fp, #64
23244     A7 1E 02 FB | 	rdlong	local01, fp
23248     06 1E 06 F1 | 	add	local01, #6
2324c     0F 1F E2 FA | 	rdword	local01, local01
23250     04 20 06 F1 | 	add	local02, #4
23254     10 1F 52 FC | 	wrword	local01, local02
23258     40 4E 85 F1 | 	sub	fp, #64
2325c     A7 20 02 FB | 	rdlong	local02, fp
23260     08 4E 05 F1 | 	add	fp, #8
23264     A7 1E C2 FA | 	rdbyte	local01, fp
23268     10 20 06 F1 | 	add	local02, #16
2326c     10 1F 42 FC | 	wrbyte	local01, local02
23270     08 4E 85 F1 | 	sub	fp, #8
23274     A7 20 02 FB | 	rdlong	local02, fp
23278     11 20 06 F1 | 	add	local02, #17
2327c     10 01 48 FC | 	wrbyte	#0, local02
23280     A7 20 02 FB | 	rdlong	local02, fp
23284     1C 20 06 F1 | 	add	local02, #28
23288     10 01 68 FC | 	wrlong	#0, local02
2328c     A7 20 02 FB | 	rdlong	local02, fp
23290     14 20 06 F1 | 	add	local02, #20
23294     10 01 68 FC | 	wrlong	#0, local02
23298     A7 12 02 FB | 	rdlong	arg01, fp
2329c     04 4E 85 F1 | 	sub	fp, #4
232a0     28 12 06 F1 | 	add	arg01, #40
232a4     00 14 06 F6 | 	mov	arg02, #0
232a8     09 16 C6 F9 | 	decod	arg03, #9
232ac     98 00 A0 FD | 	call	#\builtin_bytefill_
232b0     0C 4E 05 F1 | 	add	fp, #12
232b4     A7 20 C2 FA | 	rdbyte	local02, fp
232b8     0C 4E 85 F1 | 	sub	fp, #12
232bc     20 20 CE F7 | 	test	local02, #32 wz
232c0     0C 02 90 AD |  if_e	jmp	#LR__3764
232c4     04 4E 05 F1 | 	add	fp, #4
232c8     A7 1E 02 FB | 	rdlong	local01, fp
232cc     04 4E 85 F1 | 	sub	fp, #4
232d0     0C 1E 06 F1 | 	add	local01, #12
232d4     0F 21 02 FB | 	rdlong	local02, local01
232d8     01 20 16 F2 | 	cmp	local02, #1 wc
232dc     F0 01 90 CD |  if_b	jmp	#LR__3764
232e0     04 4E 05 F1 | 	add	fp, #4
232e4     A7 1E 02 FB | 	rdlong	local01, fp
232e8     0F 21 02 F6 | 	mov	local02, local01
232ec     0C 1E 06 F1 | 	add	local01, #12
232f0     0F 1F 02 FB | 	rdlong	local01, local01
232f4     14 20 06 F1 | 	add	local02, #20
232f8     10 1F 62 FC | 	wrlong	local01, local02
232fc     40 4E 05 F1 | 	add	fp, #64
23300     A7 20 02 FB | 	rdlong	local02, fp
23304     0A 20 06 F1 | 	add	local02, #10
23308     10 21 E2 FA | 	rdword	local02, local02
2330c     09 20 66 F0 | 	shl	local02, #9
23310     08 4E 05 F1 | 	add	fp, #8
23314     A7 20 62 FC | 	wrlong	local02, fp
23318     48 4E 85 F1 | 	sub	fp, #72
2331c     A7 20 02 FB | 	rdlong	local02, fp
23320     08 20 06 F1 | 	add	local02, #8
23324     10 1F 02 FB | 	rdlong	local01, local02
23328     4C 4E 05 F1 | 	add	fp, #76
2332c     A7 1E 62 FC | 	wrlong	local01, fp
23330                 | ' 				fp->fptr = fp->obj.objsize;
23330                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
23330                 | ' 				clst = fp->obj.sclust;
23330                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
23330     4C 4E 85 F1 | 	sub	fp, #76
23334     A7 20 02 FB | 	rdlong	local02, fp
23338     0C 20 06 F1 | 	add	local02, #12
2333c     10 1F 02 FB | 	rdlong	local01, local02
23340     58 4E 05 F1 | 	add	fp, #88
23344     A7 1E 62 FC | 	wrlong	local01, fp
23348     5C 4E 85 F1 | 	sub	fp, #92
2334c                 | LR__3760
2334c     10 4E 05 F1 | 	add	fp, #16
23350     A7 20 0A FB | 	rdlong	local02, fp wz
23354     10 4E 85 F1 | 	sub	fp, #16
23358     94 00 90 5D |  if_ne	jmp	#LR__3761
2335c     5C 4E 05 F1 | 	add	fp, #92
23360     A7 20 02 FB | 	rdlong	local02, fp
23364     10 4E 85 F1 | 	sub	fp, #16
23368     A7 1E 02 FB | 	rdlong	local01, fp
2336c     4C 4E 85 F1 | 	sub	fp, #76
23370     0F 21 1A F2 | 	cmp	local02, local01 wcz
23374     78 00 90 ED |  if_be	jmp	#LR__3761
23378     04 4E 05 F1 | 	add	fp, #4
2337c     A7 12 02 FB | 	rdlong	arg01, fp
23380     4C 4E 05 F1 | 	add	fp, #76
23384     A7 14 02 FB | 	rdlong	arg02, fp
23388     50 4E 85 F1 | 	sub	fp, #80
2338c     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
23390     50 4E 05 F1 | 	add	fp, #80
23394     A7 FA 61 FC | 	wrlong	result1, fp
23398     50 4E 85 F1 | 	sub	fp, #80
2339c     02 FA 15 F2 | 	cmp	result1, #2 wc
233a0     10 4E 05 C1 |  if_b	add	fp, #16
233a4     A7 04 68 CC |  if_b	wrlong	#2, fp
233a8     10 4E 85 C1 |  if_b	sub	fp, #16
233ac     50 4E 05 F1 | 	add	fp, #80
233b0     A7 20 02 FB | 	rdlong	local02, fp
233b4     50 4E 85 F1 | 	sub	fp, #80
233b8     FF FF 7F FF 
233bc     FF 21 0E F2 | 	cmp	local02, ##-1 wz
233c0     10 4E 05 A1 |  if_e	add	fp, #16
233c4     A7 02 68 AC |  if_e	wrlong	#1, fp
233c8     10 4E 85 A1 |  if_e	sub	fp, #16
233cc     5C 4E 05 F1 | 	add	fp, #92
233d0     A7 20 02 FB | 	rdlong	local02, fp
233d4     10 4E 85 F1 | 	sub	fp, #16
233d8     A7 1E 02 FB | 	rdlong	local01, fp
233dc     0F 21 82 F1 | 	sub	local02, local01
233e0     10 4E 05 F1 | 	add	fp, #16
233e4     A7 20 62 FC | 	wrlong	local02, fp
233e8     5C 4E 85 F1 | 	sub	fp, #92
233ec     5C FF 9F FD | 	jmp	#LR__3760
233f0                 | LR__3761
233f0     04 4E 05 F1 | 	add	fp, #4
233f4     A7 20 02 FB | 	rdlong	local02, fp
233f8     4C 4E 05 F1 | 	add	fp, #76
233fc     A7 1E 02 FB | 	rdlong	local01, fp
23400     18 20 06 F1 | 	add	local02, #24
23404     10 1F 62 FC | 	wrlong	local01, local02
23408     40 4E 85 F1 | 	sub	fp, #64
2340c     A7 20 0A FB | 	rdlong	local02, fp wz
23410     10 4E 85 F1 | 	sub	fp, #16
23414     B8 00 90 5D |  if_ne	jmp	#LR__3763
23418     5C 4E 05 F1 | 	add	fp, #92
2341c     A7 1E 02 FB | 	rdlong	local01, fp
23420     5C 4E 85 F1 | 	sub	fp, #92
23424     FF 1F CE F7 | 	test	local01, #511 wz
23428     A4 00 90 AD |  if_e	jmp	#LR__3763
2342c     44 4E 05 F1 | 	add	fp, #68
23430     A7 12 02 FB | 	rdlong	arg01, fp
23434     0C 4E 05 F1 | 	add	fp, #12
23438     A7 14 02 FB | 	rdlong	arg02, fp
2343c     50 4E 85 F1 | 	sub	fp, #80
23440     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
23444     58 4E 05 F1 | 	add	fp, #88
23448     A7 FA 61 FC | 	wrlong	result1, fp
2344c     00 FA 4D F2 | 	cmps	result1, #0 wz
23450     58 4E 85 F1 | 	sub	fp, #88
23454     10 4E 05 A1 |  if_e	add	fp, #16
23458     A7 04 68 AC |  if_e	wrlong	#2, fp
2345c     10 4E 85 A1 |  if_e	sub	fp, #16
23460     6C 00 90 AD |  if_e	jmp	#LR__3762
23464     04 4E 05 F1 | 	add	fp, #4
23468     A7 20 02 FB | 	rdlong	local02, fp
2346c     54 4E 05 F1 | 	add	fp, #84
23470     A7 1E 02 FB | 	rdlong	local01, fp
23474     04 4E 05 F1 | 	add	fp, #4
23478     A7 18 02 FB | 	rdlong	arg04, fp
2347c     09 18 46 F0 | 	shr	arg04, #9
23480     0C 1F 02 F1 | 	add	local01, arg04
23484     1C 20 06 F1 | 	add	local02, #28
23488     10 1F 62 FC | 	wrlong	local01, local02
2348c     18 4E 85 F1 | 	sub	fp, #24
23490     A7 20 02 FB | 	rdlong	local02, fp
23494     01 20 06 F1 | 	add	local02, #1
23498     10 13 C2 FA | 	rdbyte	arg01, local02
2349c     40 4E 85 F1 | 	sub	fp, #64
234a0     A7 20 02 FB | 	rdlong	local02, fp
234a4     10 15 02 F6 | 	mov	arg02, local02
234a8     28 14 06 F1 | 	add	arg02, #40
234ac     04 4E 85 F1 | 	sub	fp, #4
234b0     1C 20 06 F1 | 	add	local02, #28
234b4     10 17 02 FB | 	rdlong	arg03, local02
234b8     01 18 06 F6 | 	mov	arg04, #1
234bc     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
234c0     00 FA 0D F2 | 	cmp	result1, #0 wz
234c4     10 4E 05 51 |  if_ne	add	fp, #16
234c8     A7 02 68 5C |  if_ne	wrlong	#1, fp
234cc     10 4E 85 51 |  if_ne	sub	fp, #16
234d0                 | LR__3762
234d0                 | LR__3763
234d0                 | LR__3764
234d0                 | LR__3765
234d0                 | LR__3766
234d0     10 4E 05 F1 | 	add	fp, #16
234d4     A7 20 0A FB | 	rdlong	local02, fp wz
234d8     10 4E 85 F1 | 	sub	fp, #16
234dc     04 4E 05 51 |  if_ne	add	fp, #4
234e0     A7 20 02 5B |  if_ne	rdlong	local02, fp
234e4     04 4E 85 51 |  if_ne	sub	fp, #4
234e8     10 01 68 5C |  if_ne	wrlong	#0, local02
234ec                 | ' 
234ec                 | ' 	return res ;
234ec     10 4E 05 F1 | 	add	fp, #16
234f0     A7 FA 01 FB | 	rdlong	result1, fp
234f4     10 4E 85 F1 | 	sub	fp, #16
234f8                 | LR__3767
234f8     A7 F0 03 F6 | 	mov	ptra, fp
234fc     B2 00 A0 FD | 	call	#popregs_
23500                 | _fatfs_cc_f_open_ret
23500     2D 00 64 FD | 	ret
23504                 | 
23504                 | _fatfs_cc_f_read
23504     0E 4A 05 F6 | 	mov	COUNT_, #14
23508     A8 00 A0 FD | 	call	#pushregs_
2350c     38 F0 07 F1 | 	add	ptra, #56
23510     04 4E 05 F1 | 	add	fp, #4
23514     A7 12 62 FC | 	wrlong	arg01, fp
23518     04 4E 05 F1 | 	add	fp, #4
2351c     A7 14 62 FC | 	wrlong	arg02, fp
23520     04 4E 05 F1 | 	add	fp, #4
23524     A7 16 62 FC | 	wrlong	arg03, fp
23528     04 4E 05 F1 | 	add	fp, #4
2352c     A7 18 62 FC | 	wrlong	arg04, fp
23530     08 4E 85 F1 | 	sub	fp, #8
23534     A7 FA 01 FB | 	rdlong	result1, fp
23538     2C 4E 05 F1 | 	add	fp, #44
2353c     A7 FA 61 FC | 	wrlong	result1, fp
23540     24 4E 85 F1 | 	sub	fp, #36
23544     A7 FA 01 FB | 	rdlong	result1, fp
23548     FD 00 68 FC | 	wrlong	#0, result1
2354c     0C 4E 85 F1 | 	sub	fp, #12
23550     A7 12 02 FB | 	rdlong	arg01, fp
23554     14 4E 05 F1 | 	add	fp, #20
23558     A7 14 02 F6 | 	mov	arg02, fp
2355c     18 4E 85 F1 | 	sub	fp, #24
23560     24 F7 BF FD | 	call	#_fatfs_cc_validate
23564     14 4E 05 F1 | 	add	fp, #20
23568     A7 FA 61 FC | 	wrlong	result1, fp
2356c     00 FA 4D F2 | 	cmps	result1, #0 wz
23570     14 4E 85 F1 | 	sub	fp, #20
23574     20 00 90 5D |  if_ne	jmp	#LR__3770
23578     04 4E 05 F1 | 	add	fp, #4
2357c     A7 14 02 FB | 	rdlong	arg02, fp
23580     11 14 06 F1 | 	add	arg02, #17
23584     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
23588     10 4E 05 F1 | 	add	fp, #16
2358c     A7 14 62 FC | 	wrlong	arg02, fp
23590     14 4E 85 F1 | 	sub	fp, #20
23594     10 00 90 AD |  if_e	jmp	#LR__3771
23598                 | LR__3770
23598     14 4E 05 F1 | 	add	fp, #20
2359c     A7 FA 01 FB | 	rdlong	result1, fp
235a0     14 4E 85 F1 | 	sub	fp, #20
235a4     EC 05 90 FD | 	jmp	#LR__3790
235a8                 | LR__3771
235a8     04 4E 05 F1 | 	add	fp, #4
235ac     A7 18 02 FB | 	rdlong	arg04, fp
235b0     04 4E 85 F1 | 	sub	fp, #4
235b4     10 18 06 F1 | 	add	arg04, #16
235b8     0C 19 C2 FA | 	rdbyte	arg04, arg04
235bc     01 18 CE F7 | 	test	arg04, #1 wz
235c0     07 FA 05 A6 |  if_e	mov	result1, #7
235c4     CC 05 90 AD |  if_e	jmp	#LR__3790
235c8     04 4E 05 F1 | 	add	fp, #4
235cc     A7 1E 02 FB | 	rdlong	local01, fp
235d0     0F 21 02 F6 | 	mov	local02, local01
235d4     0C 20 06 F1 | 	add	local02, #12
235d8     10 23 02 FB | 	rdlong	local03, local02
235dc     14 1E 06 F1 | 	add	local01, #20
235e0     0F 1F 02 FB | 	rdlong	local01, local01
235e4     0F 23 82 F1 | 	sub	local03, local01
235e8     20 4E 05 F1 | 	add	fp, #32
235ec     A7 22 62 FC | 	wrlong	local03, fp
235f0     18 4E 85 F1 | 	sub	fp, #24
235f4     A7 24 02 FB | 	rdlong	local04, fp
235f8     0C 4E 85 F1 | 	sub	fp, #12
235fc     11 25 1A F2 | 	cmp	local04, local03 wcz
23600     24 4E 05 11 |  if_a	add	fp, #36
23604     A7 24 02 1B |  if_a	rdlong	local04, fp
23608     18 4E 85 11 |  if_a	sub	fp, #24
2360c     A7 24 62 1C |  if_a	wrlong	local04, fp
23610     0C 4E 85 11 |  if_a	sub	fp, #12
23614                 | ' 
23614                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
23614                 | LR__3772
23614     0C 4E 05 F1 | 	add	fp, #12
23618     A7 20 02 FB | 	rdlong	local02, fp
2361c     0C 4E 85 F1 | 	sub	fp, #12
23620     10 25 02 F6 | 	mov	local04, local02
23624     01 24 16 F2 | 	cmp	local04, #1 wc
23628     64 05 90 CD |  if_b	jmp	#LR__3789
2362c     04 4E 05 F1 | 	add	fp, #4
23630     A7 22 02 FB | 	rdlong	local03, fp
23634     04 4E 85 F1 | 	sub	fp, #4
23638     14 22 06 F1 | 	add	local03, #20
2363c     11 23 02 FB | 	rdlong	local03, local03
23640     FF 23 CE F7 | 	test	local03, #511 wz
23644     3C 04 90 5D |  if_ne	jmp	#LR__3787
23648     04 4E 05 F1 | 	add	fp, #4
2364c     A7 1E 02 FB | 	rdlong	local01, fp
23650     14 1E 06 F1 | 	add	local01, #20
23654     0F 23 02 FB | 	rdlong	local03, local01
23658     09 22 46 F0 | 	shr	local03, #9
2365c     14 4E 05 F1 | 	add	fp, #20
23660     A7 26 02 FB | 	rdlong	local05, fp
23664     13 29 02 F6 | 	mov	local06, local05
23668     0A 28 06 F1 | 	add	local06, #10
2366c     14 2B E2 FA | 	rdword	local07, local06
23670     0A 28 86 F1 | 	sub	local06, #10
23674     15 2D 32 F9 | 	getword	local08, local07, #0
23678     01 2C 86 F1 | 	sub	local08, #1
2367c     16 23 0A F5 | 	and	local03, local08 wz
23680     18 4E 05 F1 | 	add	fp, #24
23684     A7 22 62 FC | 	wrlong	local03, fp
23688     30 4E 85 F1 | 	sub	fp, #48
2368c     E0 00 90 5D |  if_ne	jmp	#LR__3777
23690     04 4E 05 F1 | 	add	fp, #4
23694     A7 22 02 FB | 	rdlong	local03, fp
23698     04 4E 85 F1 | 	sub	fp, #4
2369c     14 22 06 F1 | 	add	local03, #20
236a0     11 23 0A FB | 	rdlong	local03, local03 wz
236a4     20 00 90 5D |  if_ne	jmp	#LR__3773
236a8     04 4E 05 F1 | 	add	fp, #4
236ac     A7 22 02 FB | 	rdlong	local03, fp
236b0     08 22 06 F1 | 	add	local03, #8
236b4     11 23 02 FB | 	rdlong	local03, local03
236b8     18 4E 05 F1 | 	add	fp, #24
236bc     A7 22 62 FC | 	wrlong	local03, fp
236c0     1C 4E 85 F1 | 	sub	fp, #28
236c4     28 00 90 FD | 	jmp	#LR__3774
236c8                 | LR__3773
236c8     04 4E 05 F1 | 	add	fp, #4
236cc     A7 2C 02 FB | 	rdlong	local08, fp
236d0     16 13 02 F6 | 	mov	arg01, local08
236d4     04 4E 85 F1 | 	sub	fp, #4
236d8     18 2C 06 F1 | 	add	local08, #24
236dc     16 15 02 FB | 	rdlong	arg02, local08
236e0     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
236e4     1C 4E 05 F1 | 	add	fp, #28
236e8     A7 FA 61 FC | 	wrlong	result1, fp
236ec     1C 4E 85 F1 | 	sub	fp, #28
236f0                 | LR__3774
236f0     1C 4E 05 F1 | 	add	fp, #28
236f4     A7 22 02 FB | 	rdlong	local03, fp
236f8     1C 4E 85 F1 | 	sub	fp, #28
236fc     02 22 16 F2 | 	cmp	local03, #2 wc
23700     1C 00 90 3D |  if_ae	jmp	#LR__3775
23704     04 4E 05 F1 | 	add	fp, #4
23708     A7 22 02 FB | 	rdlong	local03, fp
2370c     04 4E 85 F1 | 	sub	fp, #4
23710     11 22 06 F1 | 	add	local03, #17
23714     11 05 48 FC | 	wrbyte	#2, local03
23718     02 FA 05 F6 | 	mov	result1, #2
2371c     74 04 90 FD | 	jmp	#LR__3790
23720                 | LR__3775
23720     1C 4E 05 F1 | 	add	fp, #28
23724     A7 22 02 FB | 	rdlong	local03, fp
23728     1C 4E 85 F1 | 	sub	fp, #28
2372c     FF FF 7F FF 
23730     FF 23 0E F2 | 	cmp	local03, ##-1 wz
23734     1C 00 90 5D |  if_ne	jmp	#LR__3776
23738     04 4E 05 F1 | 	add	fp, #4
2373c     A7 22 02 FB | 	rdlong	local03, fp
23740     04 4E 85 F1 | 	sub	fp, #4
23744     11 22 06 F1 | 	add	local03, #17
23748     11 03 48 FC | 	wrbyte	#1, local03
2374c     01 FA 05 F6 | 	mov	result1, #1
23750     40 04 90 FD | 	jmp	#LR__3790
23754                 | LR__3776
23754     04 4E 05 F1 | 	add	fp, #4
23758     A7 22 02 FB | 	rdlong	local03, fp
2375c     18 4E 05 F1 | 	add	fp, #24
23760     A7 2C 02 FB | 	rdlong	local08, fp
23764     1C 4E 85 F1 | 	sub	fp, #28
23768     18 22 06 F1 | 	add	local03, #24
2376c     11 2D 62 FC | 	wrlong	local08, local03
23770                 | LR__3777
23770     18 4E 05 F1 | 	add	fp, #24
23774     A7 12 02 FB | 	rdlong	arg01, fp
23778     14 4E 85 F1 | 	sub	fp, #20
2377c     A7 22 02 FB | 	rdlong	local03, fp
23780     04 4E 85 F1 | 	sub	fp, #4
23784     18 22 06 F1 | 	add	local03, #24
23788     11 15 02 FB | 	rdlong	arg02, local03
2378c     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
23790     20 4E 05 F1 | 	add	fp, #32
23794     A7 FA 61 FC | 	wrlong	result1, fp
23798     20 4E 85 F1 | 	sub	fp, #32
2379c     00 FA 0D F2 | 	cmp	result1, #0 wz
237a0     1C 00 90 5D |  if_ne	jmp	#LR__3778
237a4     04 4E 05 F1 | 	add	fp, #4
237a8     A7 22 02 FB | 	rdlong	local03, fp
237ac     04 4E 85 F1 | 	sub	fp, #4
237b0     11 22 06 F1 | 	add	local03, #17
237b4     11 05 48 FC | 	wrbyte	#2, local03
237b8     02 FA 05 F6 | 	mov	result1, #2
237bc     D4 03 90 FD | 	jmp	#LR__3790
237c0                 | LR__3778
237c0     20 4E 05 F1 | 	add	fp, #32
237c4     A7 22 02 FB | 	rdlong	local03, fp
237c8     10 4E 05 F1 | 	add	fp, #16
237cc     A7 2C 02 FB | 	rdlong	local08, fp
237d0     16 23 02 F1 | 	add	local03, local08
237d4     10 4E 85 F1 | 	sub	fp, #16
237d8     A7 22 62 FC | 	wrlong	local03, fp
237dc     14 4E 85 F1 | 	sub	fp, #20
237e0     A7 22 02 FB | 	rdlong	local03, fp
237e4     09 22 46 F0 | 	shr	local03, #9
237e8     20 4E 05 F1 | 	add	fp, #32
237ec     A7 22 62 FC | 	wrlong	local03, fp
237f0     2C 4E 85 F1 | 	sub	fp, #44
237f4     01 22 16 F2 | 	cmp	local03, #1 wc
237f8     5C 01 90 CD |  if_b	jmp	#LR__3782
237fc     30 4E 05 F1 | 	add	fp, #48
23800     A7 22 02 FB | 	rdlong	local03, fp
23804     04 4E 85 F1 | 	sub	fp, #4
23808     A7 2C 02 FB | 	rdlong	local08, fp
2380c     16 23 02 F1 | 	add	local03, local08
23810     14 4E 85 F1 | 	sub	fp, #20
23814     A7 2C 02 FB | 	rdlong	local08, fp
23818     18 4E 85 F1 | 	sub	fp, #24
2381c     0A 2C 06 F1 | 	add	local08, #10
23820     16 2D E2 FA | 	rdword	local08, local08
23824     16 23 1A F2 | 	cmp	local03, local08 wcz
23828     28 00 90 ED |  if_be	jmp	#LR__3779
2382c     18 4E 05 F1 | 	add	fp, #24
23830     A7 1E 02 FB | 	rdlong	local01, fp
23834     0A 1E 06 F1 | 	add	local01, #10
23838     0F 23 E2 FA | 	rdword	local03, local01
2383c     18 4E 05 F1 | 	add	fp, #24
23840     A7 2C 02 FB | 	rdlong	local08, fp
23844     16 23 82 F1 | 	sub	local03, local08
23848     04 4E 85 F1 | 	sub	fp, #4
2384c     A7 22 62 FC | 	wrlong	local03, fp
23850     2C 4E 85 F1 | 	sub	fp, #44
23854                 | LR__3779
23854     18 4E 05 F1 | 	add	fp, #24
23858     A7 1E 02 FB | 	rdlong	local01, fp
2385c     01 1E 06 F1 | 	add	local01, #1
23860     0F 13 C2 FA | 	rdbyte	arg01, local01
23864     1C 4E 05 F1 | 	add	fp, #28
23868     A7 14 02 FB | 	rdlong	arg02, fp
2386c     14 4E 85 F1 | 	sub	fp, #20
23870     A7 16 02 FB | 	rdlong	arg03, fp
23874     0C 4E 05 F1 | 	add	fp, #12
23878     A7 18 02 FB | 	rdlong	arg04, fp
2387c     2C 4E 85 F1 | 	sub	fp, #44
23880     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
23884     00 FA 0D F2 | 	cmp	result1, #0 wz
23888     1C 00 90 AD |  if_e	jmp	#LR__3780
2388c     04 4E 05 F1 | 	add	fp, #4
23890     A7 22 02 FB | 	rdlong	local03, fp
23894     04 4E 85 F1 | 	sub	fp, #4
23898     11 22 06 F1 | 	add	local03, #17
2389c     11 03 48 FC | 	wrbyte	#1, local03
238a0     01 FA 05 F6 | 	mov	result1, #1
238a4     EC 02 90 FD | 	jmp	#LR__3790
238a8                 | LR__3780
238a8     04 4E 05 F1 | 	add	fp, #4
238ac     A7 1E 02 FB | 	rdlong	local01, fp
238b0     04 4E 85 F1 | 	sub	fp, #4
238b4     10 1E 06 F1 | 	add	local01, #16
238b8     0F 23 C2 FA | 	rdbyte	local03, local01
238bc     80 22 CE F7 | 	test	local03, #128 wz
238c0     78 00 90 AD |  if_e	jmp	#LR__3781
238c4     04 4E 05 F1 | 	add	fp, #4
238c8     A7 2C 02 FB | 	rdlong	local08, fp
238cc     1C 2C 06 F1 | 	add	local08, #28
238d0     16 2D 02 FB | 	rdlong	local08, local08
238d4     1C 4E 05 F1 | 	add	fp, #28
238d8     A7 2E 02 FB | 	rdlong	local09, fp
238dc     17 2D 82 F1 | 	sub	local08, local09
238e0     0C 4E 05 F1 | 	add	fp, #12
238e4     A7 30 02 FB | 	rdlong	local10, fp
238e8     2C 4E 85 F1 | 	sub	fp, #44
238ec     18 33 02 F6 | 	mov	local11, local10
238f0     19 2D 12 F2 | 	cmp	local08, local11 wc
238f4     44 00 90 3D |  if_ae	jmp	#LR__3781
238f8     34 4E 05 F1 | 	add	fp, #52
238fc     A7 12 02 FB | 	rdlong	arg01, fp
23900     30 4E 85 F1 | 	sub	fp, #48
23904     A7 14 02 FB | 	rdlong	arg02, fp
23908     0A 33 02 F6 | 	mov	local11, arg02
2390c     1C 32 06 F1 | 	add	local11, #28
23910     19 2F 02 FB | 	rdlong	local09, local11
23914     1C 4E 05 F1 | 	add	fp, #28
23918     A7 26 02 FB | 	rdlong	local05, fp
2391c     13 2F 82 F1 | 	sub	local09, local05
23920     09 2E 66 F0 | 	shl	local09, #9
23924     17 33 02 F6 | 	mov	local11, local09
23928     17 13 02 F1 | 	add	arg01, local09
2392c     20 4E 85 F1 | 	sub	fp, #32
23930     28 14 06 F1 | 	add	arg02, #40
23934     09 16 C6 F9 | 	decod	arg03, #9
23938     40 4B BF FD | 	call	#__system____builtin_memmove
2393c                 | LR__3781
2393c     2C 4E 05 F1 | 	add	fp, #44
23940     A7 22 02 FB | 	rdlong	local03, fp
23944     09 22 66 F0 | 	shl	local03, #9
23948     04 4E 85 F1 | 	sub	fp, #4
2394c     A7 22 62 FC | 	wrlong	local03, fp
23950     28 4E 85 F1 | 	sub	fp, #40
23954                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
23954                 | ' 				}
23954                 | ' 
23954                 | ' 
23954                 | ' 				rcnt =  ((UINT) 512 )  * cc;
23954                 | ' 				continue;
23954     B4 01 90 FD | 	jmp	#LR__3788
23958                 | LR__3782
23958     04 4E 05 F1 | 	add	fp, #4
2395c     A7 22 02 FB | 	rdlong	local03, fp
23960     1C 22 06 F1 | 	add	local03, #28
23964     11 23 02 FB | 	rdlong	local03, local03
23968     1C 4E 05 F1 | 	add	fp, #28
2396c     A7 1E 02 FB | 	rdlong	local01, fp
23970     20 4E 85 F1 | 	sub	fp, #32
23974     0F 23 0A F2 | 	cmp	local03, local01 wz
23978     EC 00 90 AD |  if_e	jmp	#LR__3786
2397c     04 4E 05 F1 | 	add	fp, #4
23980     A7 1E 02 FB | 	rdlong	local01, fp
23984     04 4E 85 F1 | 	sub	fp, #4
23988     10 1E 06 F1 | 	add	local01, #16
2398c     0F 23 C2 FA | 	rdbyte	local03, local01
23990     80 22 CE F7 | 	test	local03, #128 wz
23994     7C 00 90 AD |  if_e	jmp	#LR__3784
23998     18 4E 05 F1 | 	add	fp, #24
2399c     A7 1E 02 FB | 	rdlong	local01, fp
239a0     01 1E 06 F1 | 	add	local01, #1
239a4     0F 13 C2 FA | 	rdbyte	arg01, local01
239a8     14 4E 85 F1 | 	sub	fp, #20
239ac     A7 22 02 FB | 	rdlong	local03, fp
239b0     11 15 02 F6 | 	mov	arg02, local03
239b4     28 14 06 F1 | 	add	arg02, #40
239b8     04 4E 85 F1 | 	sub	fp, #4
239bc     1C 22 06 F1 | 	add	local03, #28
239c0     11 17 02 FB | 	rdlong	arg03, local03
239c4     01 18 06 F6 | 	mov	arg04, #1
239c8     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
239cc     00 FA 0D F2 | 	cmp	result1, #0 wz
239d0     1C 00 90 AD |  if_e	jmp	#LR__3783
239d4     04 4E 05 F1 | 	add	fp, #4
239d8     A7 22 02 FB | 	rdlong	local03, fp
239dc     04 4E 85 F1 | 	sub	fp, #4
239e0     11 22 06 F1 | 	add	local03, #17
239e4     11 03 48 FC | 	wrbyte	#1, local03
239e8     01 FA 05 F6 | 	mov	result1, #1
239ec     A4 01 90 FD | 	jmp	#LR__3790
239f0                 | LR__3783
239f0     04 4E 05 F1 | 	add	fp, #4
239f4     A7 32 02 FB | 	rdlong	local11, fp
239f8     19 23 02 F6 | 	mov	local03, local11
239fc     04 4E 85 F1 | 	sub	fp, #4
23a00     10 32 06 F1 | 	add	local11, #16
23a04     19 33 C2 FA | 	rdbyte	local11, local11
23a08     7F 32 06 F5 | 	and	local11, #127
23a0c     10 22 06 F1 | 	add	local03, #16
23a10     11 33 42 FC | 	wrbyte	local11, local03
23a14                 | LR__3784
23a14     18 4E 05 F1 | 	add	fp, #24
23a18     A7 1E 02 FB | 	rdlong	local01, fp
23a1c     01 1E 06 F1 | 	add	local01, #1
23a20     0F 13 C2 FA | 	rdbyte	arg01, local01
23a24     14 4E 85 F1 | 	sub	fp, #20
23a28     A7 14 02 FB | 	rdlong	arg02, fp
23a2c     28 14 06 F1 | 	add	arg02, #40
23a30     1C 4E 05 F1 | 	add	fp, #28
23a34     A7 16 02 FB | 	rdlong	arg03, fp
23a38     20 4E 85 F1 | 	sub	fp, #32
23a3c     01 18 06 F6 | 	mov	arg04, #1
23a40     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
23a44     00 FA 0D F2 | 	cmp	result1, #0 wz
23a48     1C 00 90 AD |  if_e	jmp	#LR__3785
23a4c     04 4E 05 F1 | 	add	fp, #4
23a50     A7 22 02 FB | 	rdlong	local03, fp
23a54     04 4E 85 F1 | 	sub	fp, #4
23a58     11 22 06 F1 | 	add	local03, #17
23a5c     11 03 48 FC | 	wrbyte	#1, local03
23a60     01 FA 05 F6 | 	mov	result1, #1
23a64     2C 01 90 FD | 	jmp	#LR__3790
23a68                 | LR__3785
23a68                 | LR__3786
23a68     04 4E 05 F1 | 	add	fp, #4
23a6c     A7 22 02 FB | 	rdlong	local03, fp
23a70     1C 4E 05 F1 | 	add	fp, #28
23a74     A7 32 02 FB | 	rdlong	local11, fp
23a78     20 4E 85 F1 | 	sub	fp, #32
23a7c     1C 22 06 F1 | 	add	local03, #28
23a80     11 33 62 FC | 	wrlong	local11, local03
23a84                 | LR__3787
23a84     04 4E 05 F1 | 	add	fp, #4
23a88     A7 1E 02 FB | 	rdlong	local01, fp
23a8c     14 1E 06 F1 | 	add	local01, #20
23a90     0F 33 02 FB | 	rdlong	local11, local01
23a94     FF 33 06 F5 | 	and	local11, #511
23a98     09 22 C6 F9 | 	decod	local03, #9
23a9c     19 23 82 F1 | 	sub	local03, local11
23aa0     24 4E 05 F1 | 	add	fp, #36
23aa4     A7 22 62 FC | 	wrlong	local03, fp
23aa8     1C 4E 85 F1 | 	sub	fp, #28
23aac     A7 32 02 FB | 	rdlong	local11, fp
23ab0     0C 4E 85 F1 | 	sub	fp, #12
23ab4     19 23 1A F2 | 	cmp	local03, local11 wcz
23ab8     0C 4E 05 11 |  if_a	add	fp, #12
23abc     A7 22 02 1B |  if_a	rdlong	local03, fp
23ac0     1C 4E 05 11 |  if_a	add	fp, #28
23ac4     A7 22 62 1C |  if_a	wrlong	local03, fp
23ac8     28 4E 85 11 |  if_a	sub	fp, #40
23acc     34 4E 05 F1 | 	add	fp, #52
23ad0     A7 12 02 FB | 	rdlong	arg01, fp
23ad4     30 4E 85 F1 | 	sub	fp, #48
23ad8     A7 28 02 FB | 	rdlong	local06, fp
23adc     14 15 02 F6 | 	mov	arg02, local06
23ae0     28 14 06 F1 | 	add	arg02, #40
23ae4     14 28 06 F1 | 	add	local06, #20
23ae8     14 33 02 FB | 	rdlong	local11, local06
23aec     19 2F 02 F6 | 	mov	local09, local11
23af0     17 31 02 F6 | 	mov	local10, local09
23af4     FF 31 06 F5 | 	and	local10, #511
23af8     18 15 02 F1 | 	add	arg02, local10
23afc     24 4E 05 F1 | 	add	fp, #36
23b00     A7 16 02 FB | 	rdlong	arg03, fp
23b04     28 4E 85 F1 | 	sub	fp, #40
23b08     70 49 BF FD | 	call	#__system____builtin_memmove
23b0c                 | LR__3788
23b0c     0C 4E 05 F1 | 	add	fp, #12
23b10     A7 22 02 FB | 	rdlong	local03, fp
23b14     1C 4E 05 F1 | 	add	fp, #28
23b18     A7 2C 02 FB | 	rdlong	local08, fp
23b1c     16 23 82 F1 | 	sub	local03, local08
23b20     1C 4E 85 F1 | 	sub	fp, #28
23b24     A7 22 62 FC | 	wrlong	local03, fp
23b28     04 4E 05 F1 | 	add	fp, #4
23b2c     A7 1E 02 FB | 	rdlong	local01, fp
23b30     0F 2B 02 FB | 	rdlong	local07, local01
23b34     18 4E 05 F1 | 	add	fp, #24
23b38     A7 2C 02 FB | 	rdlong	local08, fp
23b3c     16 2B 02 F1 | 	add	local07, local08
23b40     0F 2B 62 FC | 	wrlong	local07, local01
23b44     0C 4E 05 F1 | 	add	fp, #12
23b48     A7 22 02 FB | 	rdlong	local03, fp
23b4c     0C 4E 85 F1 | 	sub	fp, #12
23b50     A7 34 02 FB | 	rdlong	local12, fp
23b54     1A 23 02 F1 | 	add	local03, local12
23b58     0C 4E 05 F1 | 	add	fp, #12
23b5c     A7 22 62 FC | 	wrlong	local03, fp
23b60     30 4E 85 F1 | 	sub	fp, #48
23b64     A7 36 02 FB | 	rdlong	local13, fp
23b68     1B 23 02 F6 | 	mov	local03, local13
23b6c     14 36 06 F1 | 	add	local13, #20
23b70     1B 39 02 FB | 	rdlong	local14, local13
23b74     24 4E 05 F1 | 	add	fp, #36
23b78     A7 28 02 FB | 	rdlong	local06, fp
23b7c     28 4E 85 F1 | 	sub	fp, #40
23b80     14 39 02 F1 | 	add	local14, local06
23b84     14 22 06 F1 | 	add	local03, #20
23b88     11 39 62 FC | 	wrlong	local14, local03
23b8c     84 FA 9F FD | 	jmp	#LR__3772
23b90                 | LR__3789
23b90                 | ' 
23b90                 | ' 
23b90                 | ' 
23b90                 | ' 
23b90                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
23b90                 | ' 
23b90                 | ' 	}
23b90                 | ' 
23b90                 | ' 	return FR_OK ;
23b90     00 FA 05 F6 | 	mov	result1, #0
23b94                 | LR__3790
23b94     A7 F0 03 F6 | 	mov	ptra, fp
23b98     B2 00 A0 FD | 	call	#popregs_
23b9c                 | _fatfs_cc_f_read_ret
23b9c     2D 00 64 FD | 	ret
23ba0                 | 
23ba0                 | _fatfs_cc_f_write
23ba0     15 4A 05 F6 | 	mov	COUNT_, #21
23ba4     A8 00 A0 FD | 	call	#pushregs_
23ba8     34 F0 07 F1 | 	add	ptra, #52
23bac     04 4E 05 F1 | 	add	fp, #4
23bb0     A7 12 62 FC | 	wrlong	arg01, fp
23bb4     04 4E 05 F1 | 	add	fp, #4
23bb8     A7 14 62 FC | 	wrlong	arg02, fp
23bbc     04 4E 05 F1 | 	add	fp, #4
23bc0     A7 16 62 FC | 	wrlong	arg03, fp
23bc4     04 4E 05 F1 | 	add	fp, #4
23bc8     A7 18 62 FC | 	wrlong	arg04, fp
23bcc     08 4E 85 F1 | 	sub	fp, #8
23bd0     A7 FA 01 FB | 	rdlong	result1, fp
23bd4     28 4E 05 F1 | 	add	fp, #40
23bd8     A7 FA 61 FC | 	wrlong	result1, fp
23bdc     20 4E 85 F1 | 	sub	fp, #32
23be0     A7 FA 01 FB | 	rdlong	result1, fp
23be4     FD 00 68 FC | 	wrlong	#0, result1
23be8     0C 4E 85 F1 | 	sub	fp, #12
23bec     A7 12 02 FB | 	rdlong	arg01, fp
23bf0     14 4E 05 F1 | 	add	fp, #20
23bf4     A7 14 02 F6 | 	mov	arg02, fp
23bf8     18 4E 85 F1 | 	sub	fp, #24
23bfc     88 F0 BF FD | 	call	#_fatfs_cc_validate
23c00     14 4E 05 F1 | 	add	fp, #20
23c04     A7 FA 61 FC | 	wrlong	result1, fp
23c08     00 FA 4D F2 | 	cmps	result1, #0 wz
23c0c     14 4E 85 F1 | 	sub	fp, #20
23c10     20 00 90 5D |  if_ne	jmp	#LR__3800
23c14     04 4E 05 F1 | 	add	fp, #4
23c18     A7 14 02 FB | 	rdlong	arg02, fp
23c1c     11 14 06 F1 | 	add	arg02, #17
23c20     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
23c24     10 4E 05 F1 | 	add	fp, #16
23c28     A7 14 62 FC | 	wrlong	arg02, fp
23c2c     14 4E 85 F1 | 	sub	fp, #20
23c30     10 00 90 AD |  if_e	jmp	#LR__3801
23c34                 | LR__3800
23c34     14 4E 05 F1 | 	add	fp, #20
23c38     A7 FA 01 FB | 	rdlong	result1, fp
23c3c     14 4E 85 F1 | 	sub	fp, #20
23c40     44 07 90 FD | 	jmp	#LR__3823
23c44                 | LR__3801
23c44     04 4E 05 F1 | 	add	fp, #4
23c48     A7 14 02 FB | 	rdlong	arg02, fp
23c4c     04 4E 85 F1 | 	sub	fp, #4
23c50     10 14 06 F1 | 	add	arg02, #16
23c54     0A 15 C2 FA | 	rdbyte	arg02, arg02
23c58     02 14 CE F7 | 	test	arg02, #2 wz
23c5c     07 FA 05 A6 |  if_e	mov	result1, #7
23c60     24 07 90 AD |  if_e	jmp	#LR__3823
23c64     04 4E 05 F1 | 	add	fp, #4
23c68     A7 14 02 FB | 	rdlong	arg02, fp
23c6c     0A 13 02 F6 | 	mov	arg01, arg02
23c70     14 12 06 F1 | 	add	arg01, #20
23c74     09 13 02 FB | 	rdlong	arg01, arg01
23c78     08 4E 05 F1 | 	add	fp, #8
23c7c     A7 FA 01 FB | 	rdlong	result1, fp
23c80     FD 12 02 F1 | 	add	arg01, result1
23c84     0C 4E 85 F1 | 	sub	fp, #12
23c88     14 14 06 F1 | 	add	arg02, #20
23c8c     0A FB 01 FB | 	rdlong	result1, arg02
23c90     FD 12 12 F2 | 	cmp	arg01, result1 wc
23c94     24 00 90 3D |  if_ae	jmp	#LR__3802
23c98     04 4E 05 F1 | 	add	fp, #4
23c9c     A7 14 02 FB | 	rdlong	arg02, fp
23ca0     01 FA 65 F6 | 	neg	result1, #1
23ca4     14 14 06 F1 | 	add	arg02, #20
23ca8     0A 15 02 FB | 	rdlong	arg02, arg02
23cac     0A FB 81 F1 | 	sub	result1, arg02
23cb0     08 4E 05 F1 | 	add	fp, #8
23cb4     A7 FA 61 FC | 	wrlong	result1, fp
23cb8     0C 4E 85 F1 | 	sub	fp, #12
23cbc                 | LR__3802
23cbc                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
23cbc                 | ' 	}
23cbc                 | ' 
23cbc                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
23cbc                 | LR__3803
23cbc     0C 4E 05 F1 | 	add	fp, #12
23cc0     A7 FA 01 FB | 	rdlong	result1, fp
23cc4     0C 4E 85 F1 | 	sub	fp, #12
23cc8     01 FA 15 F2 | 	cmp	result1, #1 wc
23ccc     90 06 90 CD |  if_b	jmp	#LR__3822
23cd0     04 4E 05 F1 | 	add	fp, #4
23cd4     A7 FA 01 FB | 	rdlong	result1, fp
23cd8     04 4E 85 F1 | 	sub	fp, #4
23cdc     14 FA 05 F1 | 	add	result1, #20
23ce0     FD FA 01 FB | 	rdlong	result1, result1
23ce4     FF FB CD F7 | 	test	result1, #511 wz
23ce8     D8 04 90 5D |  if_ne	jmp	#LR__3818
23cec     04 4E 05 F1 | 	add	fp, #4
23cf0     A7 FA 01 FB | 	rdlong	result1, fp
23cf4     14 FA 05 F1 | 	add	result1, #20
23cf8     FD FA 01 FB | 	rdlong	result1, result1
23cfc     09 FA 45 F0 | 	shr	result1, #9
23d00     14 4E 05 F1 | 	add	fp, #20
23d04     A7 14 02 FB | 	rdlong	arg02, fp
23d08     0A 14 06 F1 | 	add	arg02, #10
23d0c     0A 19 E2 FA | 	rdword	arg04, arg02
23d10     0C 15 32 F9 | 	getword	arg02, arg04, #0
23d14     01 14 86 F1 | 	sub	arg02, #1
23d18     0A FB 09 F5 | 	and	result1, arg02 wz
23d1c     14 4E 05 F1 | 	add	fp, #20
23d20     A7 FA 61 FC | 	wrlong	result1, fp
23d24     2C 4E 85 F1 | 	sub	fp, #44
23d28     44 01 90 5D |  if_ne	jmp	#LR__3809
23d2c     04 4E 05 F1 | 	add	fp, #4
23d30     A7 FA 01 FB | 	rdlong	result1, fp
23d34     04 4E 85 F1 | 	sub	fp, #4
23d38     14 FA 05 F1 | 	add	result1, #20
23d3c     FD 14 0A FB | 	rdlong	arg02, result1 wz
23d40     44 00 90 5D |  if_ne	jmp	#LR__3804
23d44     04 4E 05 F1 | 	add	fp, #4
23d48     A7 14 02 FB | 	rdlong	arg02, fp
23d4c     08 14 06 F1 | 	add	arg02, #8
23d50     0A 15 0A FB | 	rdlong	arg02, arg02 wz
23d54     18 4E 05 F1 | 	add	fp, #24
23d58     A7 14 62 FC | 	wrlong	arg02, fp
23d5c     1C 4E 85 F1 | 	sub	fp, #28
23d60     4C 00 90 5D |  if_ne	jmp	#LR__3805
23d64     04 4E 05 F1 | 	add	fp, #4
23d68     A7 12 02 FB | 	rdlong	arg01, fp
23d6c     04 4E 85 F1 | 	sub	fp, #4
23d70     00 14 06 F6 | 	mov	arg02, #0
23d74     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
23d78     1C 4E 05 F1 | 	add	fp, #28
23d7c     A7 FA 61 FC | 	wrlong	result1, fp
23d80     1C 4E 85 F1 | 	sub	fp, #28
23d84     28 00 90 FD | 	jmp	#LR__3805
23d88                 | LR__3804
23d88     04 4E 05 F1 | 	add	fp, #4
23d8c     A7 18 02 FB | 	rdlong	arg04, fp
23d90     0C 13 02 F6 | 	mov	arg01, arg04
23d94     04 4E 85 F1 | 	sub	fp, #4
23d98     18 18 06 F1 | 	add	arg04, #24
23d9c     0C 15 02 FB | 	rdlong	arg02, arg04
23da0     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
23da4     1C 4E 05 F1 | 	add	fp, #28
23da8     A7 FA 61 FC | 	wrlong	result1, fp
23dac     1C 4E 85 F1 | 	sub	fp, #28
23db0                 | LR__3805
23db0     1C 4E 05 F1 | 	add	fp, #28
23db4     A7 FA 09 FB | 	rdlong	result1, fp wz
23db8     1C 4E 85 F1 | 	sub	fp, #28
23dbc     A0 05 90 AD |  if_e	jmp	#LR__3822
23dc0     1C 4E 05 F1 | 	add	fp, #28
23dc4     A7 FA 01 FB | 	rdlong	result1, fp
23dc8     1C 4E 85 F1 | 	sub	fp, #28
23dcc     01 FA 0D F2 | 	cmp	result1, #1 wz
23dd0     1C 00 90 5D |  if_ne	jmp	#LR__3806
23dd4     04 4E 05 F1 | 	add	fp, #4
23dd8     A7 FA 01 FB | 	rdlong	result1, fp
23ddc     04 4E 85 F1 | 	sub	fp, #4
23de0     11 FA 05 F1 | 	add	result1, #17
23de4     FD 04 48 FC | 	wrbyte	#2, result1
23de8     02 FA 05 F6 | 	mov	result1, #2
23dec     98 05 90 FD | 	jmp	#LR__3823
23df0                 | LR__3806
23df0     1C 4E 05 F1 | 	add	fp, #28
23df4     A7 FA 01 FB | 	rdlong	result1, fp
23df8     1C 4E 85 F1 | 	sub	fp, #28
23dfc     FF FF 7F FF 
23e00     FF FB 0D F2 | 	cmp	result1, ##-1 wz
23e04     1C 00 90 5D |  if_ne	jmp	#LR__3807
23e08     04 4E 05 F1 | 	add	fp, #4
23e0c     A7 FA 01 FB | 	rdlong	result1, fp
23e10     04 4E 85 F1 | 	sub	fp, #4
23e14     11 FA 05 F1 | 	add	result1, #17
23e18     FD 02 48 FC | 	wrbyte	#1, result1
23e1c     01 FA 05 F6 | 	mov	result1, #1
23e20     64 05 90 FD | 	jmp	#LR__3823
23e24                 | LR__3807
23e24     04 4E 05 F1 | 	add	fp, #4
23e28     A7 FA 01 FB | 	rdlong	result1, fp
23e2c     18 4E 05 F1 | 	add	fp, #24
23e30     A7 18 02 FB | 	rdlong	arg04, fp
23e34     18 FA 05 F1 | 	add	result1, #24
23e38     FD 18 62 FC | 	wrlong	arg04, result1
23e3c     18 4E 85 F1 | 	sub	fp, #24
23e40     A7 FA 01 FB | 	rdlong	result1, fp
23e44     04 4E 85 F1 | 	sub	fp, #4
23e48     08 FA 05 F1 | 	add	result1, #8
23e4c     FD FA 09 FB | 	rdlong	result1, result1 wz
23e50     1C 00 90 5D |  if_ne	jmp	#LR__3808
23e54     04 4E 05 F1 | 	add	fp, #4
23e58     A7 18 02 FB | 	rdlong	arg04, fp
23e5c     18 4E 05 F1 | 	add	fp, #24
23e60     A7 FA 01 FB | 	rdlong	result1, fp
23e64     1C 4E 85 F1 | 	sub	fp, #28
23e68     08 18 06 F1 | 	add	arg04, #8
23e6c     0C FB 61 FC | 	wrlong	result1, arg04
23e70                 | LR__3808
23e70                 | LR__3809
23e70     04 4E 05 F1 | 	add	fp, #4
23e74     A7 18 02 FB | 	rdlong	arg04, fp
23e78     04 4E 85 F1 | 	sub	fp, #4
23e7c     10 18 06 F1 | 	add	arg04, #16
23e80     0C 19 C2 FA | 	rdbyte	arg04, arg04
23e84     80 18 CE F7 | 	test	arg04, #128 wz
23e88     7C 00 90 AD |  if_e	jmp	#LR__3811
23e8c     18 4E 05 F1 | 	add	fp, #24
23e90     A7 18 02 FB | 	rdlong	arg04, fp
23e94     01 18 06 F1 | 	add	arg04, #1
23e98     0C 13 C2 FA | 	rdbyte	arg01, arg04
23e9c     14 4E 85 F1 | 	sub	fp, #20
23ea0     A7 18 02 FB | 	rdlong	arg04, fp
23ea4     0C 15 02 F6 | 	mov	arg02, arg04
23ea8     28 14 06 F1 | 	add	arg02, #40
23eac     04 4E 85 F1 | 	sub	fp, #4
23eb0     1C 18 06 F1 | 	add	arg04, #28
23eb4     0C 17 02 FB | 	rdlong	arg03, arg04
23eb8     01 18 06 F6 | 	mov	arg04, #1
23ebc     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
23ec0     00 FA 0D F2 | 	cmp	result1, #0 wz
23ec4     1C 00 90 AD |  if_e	jmp	#LR__3810
23ec8     04 4E 05 F1 | 	add	fp, #4
23ecc     A7 FA 01 FB | 	rdlong	result1, fp
23ed0     04 4E 85 F1 | 	sub	fp, #4
23ed4     11 FA 05 F1 | 	add	result1, #17
23ed8     FD 02 48 FC | 	wrbyte	#1, result1
23edc     01 FA 05 F6 | 	mov	result1, #1
23ee0     A4 04 90 FD | 	jmp	#LR__3823
23ee4                 | LR__3810
23ee4     04 4E 05 F1 | 	add	fp, #4
23ee8     A7 18 02 FB | 	rdlong	arg04, fp
23eec     0C FB 01 F6 | 	mov	result1, arg04
23ef0     04 4E 85 F1 | 	sub	fp, #4
23ef4     10 18 06 F1 | 	add	arg04, #16
23ef8     0C 19 C2 FA | 	rdbyte	arg04, arg04
23efc     7F 18 06 F5 | 	and	arg04, #127
23f00     10 FA 05 F1 | 	add	result1, #16
23f04     FD 18 42 FC | 	wrbyte	arg04, result1
23f08                 | LR__3811
23f08     18 4E 05 F1 | 	add	fp, #24
23f0c     A7 12 02 FB | 	rdlong	arg01, fp
23f10     14 4E 85 F1 | 	sub	fp, #20
23f14     A7 14 02 FB | 	rdlong	arg02, fp
23f18     04 4E 85 F1 | 	sub	fp, #4
23f1c     18 14 06 F1 | 	add	arg02, #24
23f20     0A 15 02 FB | 	rdlong	arg02, arg02
23f24     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
23f28     20 4E 05 F1 | 	add	fp, #32
23f2c     A7 FA 61 FC | 	wrlong	result1, fp
23f30     20 4E 85 F1 | 	sub	fp, #32
23f34     00 FA 0D F2 | 	cmp	result1, #0 wz
23f38     1C 00 90 5D |  if_ne	jmp	#LR__3812
23f3c     04 4E 05 F1 | 	add	fp, #4
23f40     A7 FA 01 FB | 	rdlong	result1, fp
23f44     04 4E 85 F1 | 	sub	fp, #4
23f48     11 FA 05 F1 | 	add	result1, #17
23f4c     FD 04 48 FC | 	wrbyte	#2, result1
23f50     02 FA 05 F6 | 	mov	result1, #2
23f54     30 04 90 FD | 	jmp	#LR__3823
23f58                 | LR__3812
23f58     20 4E 05 F1 | 	add	fp, #32
23f5c     A7 FA 01 FB | 	rdlong	result1, fp
23f60     0C 4E 05 F1 | 	add	fp, #12
23f64     A7 1E 02 FB | 	rdlong	local01, fp
23f68     0F FB 01 F1 | 	add	result1, local01
23f6c     0C 4E 85 F1 | 	sub	fp, #12
23f70     A7 FA 61 FC | 	wrlong	result1, fp
23f74     14 4E 85 F1 | 	sub	fp, #20
23f78     A7 FA 01 FB | 	rdlong	result1, fp
23f7c     09 FA 45 F0 | 	shr	result1, #9
23f80     1C 4E 05 F1 | 	add	fp, #28
23f84     A7 FA 61 FC | 	wrlong	result1, fp
23f88     28 4E 85 F1 | 	sub	fp, #40
23f8c     01 FA 15 F2 | 	cmp	result1, #1 wc
23f90     60 01 90 CD |  if_b	jmp	#LR__3816
23f94     2C 4E 05 F1 | 	add	fp, #44
23f98     A7 FA 01 FB | 	rdlong	result1, fp
23f9c     04 4E 85 F1 | 	sub	fp, #4
23fa0     A7 18 02 FB | 	rdlong	arg04, fp
23fa4     0C FB 01 F1 | 	add	result1, arg04
23fa8     10 4E 85 F1 | 	sub	fp, #16
23fac     A7 18 02 FB | 	rdlong	arg04, fp
23fb0     18 4E 85 F1 | 	sub	fp, #24
23fb4     0A 18 06 F1 | 	add	arg04, #10
23fb8     0C 19 E2 FA | 	rdword	arg04, arg04
23fbc     0C FB 19 F2 | 	cmp	result1, arg04 wcz
23fc0     28 00 90 ED |  if_be	jmp	#LR__3813
23fc4     18 4E 05 F1 | 	add	fp, #24
23fc8     A7 FA 01 FB | 	rdlong	result1, fp
23fcc     0A FA 05 F1 | 	add	result1, #10
23fd0     FD FA E1 FA | 	rdword	result1, result1
23fd4     14 4E 05 F1 | 	add	fp, #20
23fd8     A7 18 02 FB | 	rdlong	arg04, fp
23fdc     0C FB 81 F1 | 	sub	result1, arg04
23fe0     04 4E 85 F1 | 	sub	fp, #4
23fe4     A7 FA 61 FC | 	wrlong	result1, fp
23fe8     28 4E 85 F1 | 	sub	fp, #40
23fec                 | LR__3813
23fec     18 4E 05 F1 | 	add	fp, #24
23ff0     A7 18 02 FB | 	rdlong	arg04, fp
23ff4     01 18 06 F1 | 	add	arg04, #1
23ff8     0C 13 C2 FA | 	rdbyte	arg01, arg04
23ffc     18 4E 05 F1 | 	add	fp, #24
24000     A7 14 02 FB | 	rdlong	arg02, fp
24004     10 4E 85 F1 | 	sub	fp, #16
24008     A7 16 02 FB | 	rdlong	arg03, fp
2400c     08 4E 05 F1 | 	add	fp, #8
24010     A7 18 02 FB | 	rdlong	arg04, fp
24014     28 4E 85 F1 | 	sub	fp, #40
24018     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
2401c     00 FA 0D F2 | 	cmp	result1, #0 wz
24020     1C 00 90 AD |  if_e	jmp	#LR__3814
24024     04 4E 05 F1 | 	add	fp, #4
24028     A7 1E 02 FB | 	rdlong	local01, fp
2402c     04 4E 85 F1 | 	sub	fp, #4
24030     11 1E 06 F1 | 	add	local01, #17
24034     0F 03 48 FC | 	wrbyte	#1, local01
24038     01 FA 05 F6 | 	mov	result1, #1
2403c     48 03 90 FD | 	jmp	#LR__3823
24040                 | LR__3814
24040     04 4E 05 F1 | 	add	fp, #4
24044     A7 FA 01 FB | 	rdlong	result1, fp
24048     1C FA 05 F1 | 	add	result1, #28
2404c     FD FA 01 FB | 	rdlong	result1, result1
24050     1C 4E 05 F1 | 	add	fp, #28
24054     A7 20 02 FB | 	rdlong	local02, fp
24058     10 FB 81 F1 | 	sub	result1, local02
2405c     08 4E 05 F1 | 	add	fp, #8
24060     A7 18 02 FB | 	rdlong	arg04, fp
24064     28 4E 85 F1 | 	sub	fp, #40
24068     0C FB 11 F2 | 	cmp	result1, arg04 wc
2406c     68 00 90 3D |  if_ae	jmp	#LR__3815
24070     04 4E 05 F1 | 	add	fp, #4
24074     A7 12 02 FB | 	rdlong	arg01, fp
24078     28 12 06 F1 | 	add	arg01, #40
2407c     2C 4E 05 F1 | 	add	fp, #44
24080     A7 14 02 FB | 	rdlong	arg02, fp
24084     2C 4E 85 F1 | 	sub	fp, #44
24088     A7 FA 01 FB | 	rdlong	result1, fp
2408c     1C FA 05 F1 | 	add	result1, #28
24090     FD 22 02 FB | 	rdlong	local03, result1
24094     1C 4E 05 F1 | 	add	fp, #28
24098     A7 18 02 FB | 	rdlong	arg04, fp
2409c     20 4E 85 F1 | 	sub	fp, #32
240a0     0C 23 82 F1 | 	sub	local03, arg04
240a4     09 22 66 F0 | 	shl	local03, #9
240a8     11 15 02 F1 | 	add	arg02, local03
240ac     09 16 C6 F9 | 	decod	arg03, #9
240b0     C8 43 BF FD | 	call	#__system____builtin_memmove
240b4     04 4E 05 F1 | 	add	fp, #4
240b8     A7 18 02 FB | 	rdlong	arg04, fp
240bc     0C FB 01 F6 | 	mov	result1, arg04
240c0     04 4E 85 F1 | 	sub	fp, #4
240c4     10 18 06 F1 | 	add	arg04, #16
240c8     0C 19 C2 FA | 	rdbyte	arg04, arg04
240cc     7F 18 06 F5 | 	and	arg04, #127
240d0     10 FA 05 F1 | 	add	result1, #16
240d4     FD 18 42 FC | 	wrbyte	arg04, result1
240d8                 | LR__3815
240d8     28 4E 05 F1 | 	add	fp, #40
240dc     A7 FA 01 FB | 	rdlong	result1, fp
240e0     09 FA 65 F0 | 	shl	result1, #9
240e4     04 4E 85 F1 | 	sub	fp, #4
240e8     A7 FA 61 FC | 	wrlong	result1, fp
240ec     24 4E 85 F1 | 	sub	fp, #36
240f0                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
240f0                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
240f0                 | ' 				}
240f0                 | ' 
240f0                 | ' 
240f0                 | ' 				wcnt =  ((UINT) 512 )  * cc;
240f0                 | ' 				continue;
240f0     74 01 90 FD | 	jmp	#LR__3819
240f4                 | LR__3816
240f4     04 4E 05 F1 | 	add	fp, #4
240f8     A7 20 02 FB | 	rdlong	local02, fp
240fc     1C 20 06 F1 | 	add	local02, #28
24100     10 FB 01 FB | 	rdlong	result1, local02
24104     1C 4E 05 F1 | 	add	fp, #28
24108     A7 20 02 FB | 	rdlong	local02, fp
2410c     20 4E 85 F1 | 	sub	fp, #32
24110     10 FB 09 F2 | 	cmp	result1, local02 wz
24114     90 00 90 AD |  if_e	jmp	#LR__3817
24118     04 4E 05 F1 | 	add	fp, #4
2411c     A7 FA 01 FB | 	rdlong	result1, fp
24120     FD 22 02 F6 | 	mov	local03, result1
24124     04 4E 85 F1 | 	sub	fp, #4
24128     14 22 06 F1 | 	add	local03, #20
2412c     11 23 02 FB | 	rdlong	local03, local03
24130     0C FA 05 F1 | 	add	result1, #12
24134     FD 24 02 FB | 	rdlong	local04, result1
24138     12 27 02 F6 | 	mov	local05, local04
2413c     13 23 12 F2 | 	cmp	local03, local05 wc
24140     64 00 90 3D |  if_ae	jmp	#LR__3817
24144     18 4E 05 F1 | 	add	fp, #24
24148     A7 18 02 FB | 	rdlong	arg04, fp
2414c     01 18 06 F1 | 	add	arg04, #1
24150     0C 13 C2 FA | 	rdbyte	arg01, arg04
24154     14 4E 85 F1 | 	sub	fp, #20
24158     A7 28 02 FB | 	rdlong	local06, fp
2415c     28 28 06 F1 | 	add	local06, #40
24160     14 2B 02 F6 | 	mov	local07, local06
24164     1C 4E 05 F1 | 	add	fp, #28
24168     A7 2C 02 FB | 	rdlong	local08, fp
2416c     20 4E 85 F1 | 	sub	fp, #32
24170     01 2E 06 F6 | 	mov	local09, #1
24174     15 15 02 F6 | 	mov	arg02, local07
24178     16 17 02 F6 | 	mov	arg03, local08
2417c     01 18 06 F6 | 	mov	arg04, #1
24180     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
24184     FD 30 0A F6 | 	mov	local10, result1 wz
24188     1C 00 90 AD |  if_e	jmp	#LR__3817
2418c     04 4E 05 F1 | 	add	fp, #4
24190     A7 30 02 FB | 	rdlong	local10, fp
24194     04 4E 85 F1 | 	sub	fp, #4
24198     11 30 06 F1 | 	add	local10, #17
2419c     18 03 48 FC | 	wrbyte	#1, local10
241a0                 | ' 				fp->fptr < fp->obj.objsize &&
241a0                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
241a0                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
241a0     01 FA 05 F6 | 	mov	result1, #1
241a4     E0 01 90 FD | 	jmp	#LR__3823
241a8                 | LR__3817
241a8     04 4E 05 F1 | 	add	fp, #4
241ac     A7 18 02 FB | 	rdlong	arg04, fp
241b0     1C 4E 05 F1 | 	add	fp, #28
241b4     A7 FA 01 FB | 	rdlong	result1, fp
241b8     20 4E 85 F1 | 	sub	fp, #32
241bc     1C 18 06 F1 | 	add	arg04, #28
241c0     0C FB 61 FC | 	wrlong	result1, arg04
241c4                 | LR__3818
241c4     04 4E 05 F1 | 	add	fp, #4
241c8     A7 FA 01 FB | 	rdlong	result1, fp
241cc     14 FA 05 F1 | 	add	result1, #20
241d0     FD FA 01 FB | 	rdlong	result1, result1
241d4     FF FB 05 F5 | 	and	result1, #511
241d8     09 32 C6 F9 | 	decod	local11, #9
241dc     FD 32 82 F1 | 	sub	local11, result1
241e0     20 4E 05 F1 | 	add	fp, #32
241e4     A7 32 62 FC | 	wrlong	local11, fp
241e8     18 4E 85 F1 | 	sub	fp, #24
241ec     A7 FA 01 FB | 	rdlong	result1, fp
241f0     0C 4E 85 F1 | 	sub	fp, #12
241f4     FD 32 1A F2 | 	cmp	local11, result1 wcz
241f8     0C 4E 05 11 |  if_a	add	fp, #12
241fc     A7 32 02 1B |  if_a	rdlong	local11, fp
24200     18 4E 05 11 |  if_a	add	fp, #24
24204     A7 32 62 1C |  if_a	wrlong	local11, fp
24208     24 4E 85 11 |  if_a	sub	fp, #36
2420c     04 4E 05 F1 | 	add	fp, #4
24210     A7 32 02 FB | 	rdlong	local11, fp
24214     19 13 02 F6 | 	mov	arg01, local11
24218     28 12 06 F1 | 	add	arg01, #40
2421c     14 32 06 F1 | 	add	local11, #20
24220     19 33 02 FB | 	rdlong	local11, local11
24224     FF 33 06 F5 | 	and	local11, #511
24228     19 13 02 F1 | 	add	arg01, local11
2422c     2C 4E 05 F1 | 	add	fp, #44
24230     A7 14 02 FB | 	rdlong	arg02, fp
24234     0C 4E 85 F1 | 	sub	fp, #12
24238     A7 16 02 FB | 	rdlong	arg03, fp
2423c     24 4E 85 F1 | 	sub	fp, #36
24240     38 42 BF FD | 	call	#__system____builtin_memmove
24244     04 4E 05 F1 | 	add	fp, #4
24248     A7 FA 01 FB | 	rdlong	result1, fp
2424c     FD 32 02 F6 | 	mov	local11, result1
24250     04 4E 85 F1 | 	sub	fp, #4
24254     10 FA 05 F1 | 	add	result1, #16
24258     FD FA C1 FA | 	rdbyte	result1, result1
2425c     80 FA 45 F5 | 	or	result1, #128
24260     10 32 06 F1 | 	add	local11, #16
24264     19 FB 41 FC | 	wrbyte	result1, local11
24268                 | LR__3819
24268     0C 4E 05 F1 | 	add	fp, #12
2426c     A7 32 02 FB | 	rdlong	local11, fp
24270     18 4E 05 F1 | 	add	fp, #24
24274     A7 FA 01 FB | 	rdlong	result1, fp
24278     FD 32 82 F1 | 	sub	local11, result1
2427c     18 4E 85 F1 | 	sub	fp, #24
24280     A7 32 62 FC | 	wrlong	local11, fp
24284     04 4E 05 F1 | 	add	fp, #4
24288     A7 34 02 FB | 	rdlong	local12, fp
2428c     1A 33 02 FB | 	rdlong	local11, local12
24290     14 4E 05 F1 | 	add	fp, #20
24294     A7 36 02 FB | 	rdlong	local13, fp
24298     1B 33 02 F1 | 	add	local11, local13
2429c     1A 33 62 FC | 	wrlong	local11, local12
242a0     0C 4E 05 F1 | 	add	fp, #12
242a4     A7 32 02 FB | 	rdlong	local11, fp
242a8     0C 4E 85 F1 | 	sub	fp, #12
242ac     A7 38 02 FB | 	rdlong	local14, fp
242b0     1C 33 02 F1 | 	add	local11, local14
242b4     0C 4E 05 F1 | 	add	fp, #12
242b8     A7 32 62 FC | 	wrlong	local11, fp
242bc     2C 4E 85 F1 | 	sub	fp, #44
242c0     A7 3A 02 FB | 	rdlong	local15, fp
242c4     1D 33 02 F6 | 	mov	local11, local15
242c8     14 3A 06 F1 | 	add	local15, #20
242cc     1D 3B 02 FB | 	rdlong	local15, local15
242d0     20 4E 05 F1 | 	add	fp, #32
242d4     A7 3C 02 FB | 	rdlong	local16, fp
242d8     1E 3B 02 F1 | 	add	local15, local16
242dc     14 32 06 F1 | 	add	local11, #20
242e0     19 3B 62 FC | 	wrlong	local15, local11
242e4     20 4E 85 F1 | 	sub	fp, #32
242e8     A7 3E 02 FB | 	rdlong	local17, fp
242ec     1F 33 02 F6 | 	mov	local11, local17
242f0     1F 41 02 F6 | 	mov	local18, local17
242f4     04 4E 85 F1 | 	sub	fp, #4
242f8     14 3E 06 F1 | 	add	local17, #20
242fc     1F 43 02 FB | 	rdlong	local19, local17
24300     0C 40 06 F1 | 	add	local18, #12
24304     20 45 02 FB | 	rdlong	local20, local18
24308     22 43 1A F2 | 	cmp	local19, local20 wcz
2430c     24 00 90 ED |  if_be	jmp	#LR__3820
24310     04 4E 05 F1 | 	add	fp, #4
24314     A7 26 02 FB | 	rdlong	local05, fp
24318     04 4E 85 F1 | 	sub	fp, #4
2431c     13 23 02 F6 | 	mov	local03, local05
24320     14 22 06 F1 | 	add	local03, #20
24324     11 25 02 FB | 	rdlong	local04, local03
24328     14 22 86 F1 | 	sub	local03, #20
2432c     12 47 02 F6 | 	mov	local21, local04
24330     20 00 90 FD | 	jmp	#LR__3821
24334                 | LR__3820
24334     04 4E 05 F1 | 	add	fp, #4
24338     A7 2A 02 FB | 	rdlong	local07, fp
2433c     04 4E 85 F1 | 	sub	fp, #4
24340     15 31 02 F6 | 	mov	local10, local07
24344     0C 30 06 F1 | 	add	local10, #12
24348     18 2D 02 FB | 	rdlong	local08, local10
2434c     0C 30 86 F1 | 	sub	local10, #12
24350     16 47 02 F6 | 	mov	local21, local08
24354                 | LR__3821
24354     0C 32 06 F1 | 	add	local11, #12
24358     19 47 62 FC | 	wrlong	local21, local11
2435c     5C F9 9F FD | 	jmp	#LR__3803
24360                 | LR__3822
24360     04 4E 05 F1 | 	add	fp, #4
24364     A7 34 02 FB | 	rdlong	local12, fp
24368     1A 1F 02 F6 | 	mov	local01, local12
2436c     04 4E 85 F1 | 	sub	fp, #4
24370     10 34 06 F1 | 	add	local12, #16
24374     1A 33 C2 FA | 	rdbyte	local11, local12
24378     40 32 46 F5 | 	or	local11, #64
2437c     10 1E 06 F1 | 	add	local01, #16
24380     0F 33 42 FC | 	wrbyte	local11, local01
24384                 | ' 
24384                 | ' 
24384                 | ' 
24384                 | ' 
24384                 | ' 
24384                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
24384                 | ' 		fp->flag |=  0x80 ;
24384                 | ' 
24384                 | ' 	}
24384                 | ' 
24384                 | ' 	fp->flag |=  0x40 ;
24384                 | ' 
24384                 | ' 	return FR_OK ;
24384     00 FA 05 F6 | 	mov	result1, #0
24388                 | LR__3823
24388     A7 F0 03 F6 | 	mov	ptra, fp
2438c     B2 00 A0 FD | 	call	#popregs_
24390                 | _fatfs_cc_f_write_ret
24390     2D 00 64 FD | 	ret
24394                 | 
24394                 | _fatfs_cc_f_sync
24394     00 4A 05 F6 | 	mov	COUNT_, #0
24398     A8 00 A0 FD | 	call	#pushregs_
2439c     18 F0 07 F1 | 	add	ptra, #24
243a0     04 4E 05 F1 | 	add	fp, #4
243a4     A7 12 62 FC | 	wrlong	arg01, fp
243a8     08 4E 05 F1 | 	add	fp, #8
243ac     A7 14 02 F6 | 	mov	arg02, fp
243b0     0C 4E 85 F1 | 	sub	fp, #12
243b4     D0 E8 BF FD | 	call	#_fatfs_cc_validate
243b8     08 4E 05 F1 | 	add	fp, #8
243bc     A7 FA 61 FC | 	wrlong	result1, fp
243c0     08 4E 85 F1 | 	sub	fp, #8
243c4     00 FA 0D F2 | 	cmp	result1, #0 wz
243c8     C0 01 90 5D |  if_ne	jmp	#LR__3833
243cc     04 4E 05 F1 | 	add	fp, #4
243d0     A7 18 02 FB | 	rdlong	arg04, fp
243d4     04 4E 85 F1 | 	sub	fp, #4
243d8     10 18 06 F1 | 	add	arg04, #16
243dc     0C 19 C2 FA | 	rdbyte	arg04, arg04
243e0     40 18 CE F7 | 	test	arg04, #64 wz
243e4     A4 01 90 AD |  if_e	jmp	#LR__3832
243e8     04 4E 05 F1 | 	add	fp, #4
243ec     A7 18 02 FB | 	rdlong	arg04, fp
243f0     04 4E 85 F1 | 	sub	fp, #4
243f4     10 18 06 F1 | 	add	arg04, #16
243f8     0C 19 C2 FA | 	rdbyte	arg04, arg04
243fc     80 18 CE F7 | 	test	arg04, #128 wz
24400     64 00 90 AD |  if_e	jmp	#LR__3830
24404     0C 4E 05 F1 | 	add	fp, #12
24408     A7 18 02 FB | 	rdlong	arg04, fp
2440c     01 18 06 F1 | 	add	arg04, #1
24410     0C 13 C2 FA | 	rdbyte	arg01, arg04
24414     08 4E 85 F1 | 	sub	fp, #8
24418     A7 18 02 FB | 	rdlong	arg04, fp
2441c     0C 15 02 F6 | 	mov	arg02, arg04
24420     28 14 06 F1 | 	add	arg02, #40
24424     04 4E 85 F1 | 	sub	fp, #4
24428     1C 18 06 F1 | 	add	arg04, #28
2442c     0C 17 02 FB | 	rdlong	arg03, arg04
24430     01 18 06 F6 | 	mov	arg04, #1
24434     0C AE BF FD | 	call	#_fatfs_cc_disk_write
24438     00 FA 0D F2 | 	cmp	result1, #0 wz
2443c     01 FA 05 56 |  if_ne	mov	result1, #1
24440     54 01 90 5D |  if_ne	jmp	#LR__3834
24444     04 4E 05 F1 | 	add	fp, #4
24448     A7 18 02 FB | 	rdlong	arg04, fp
2444c     0C 17 02 F6 | 	mov	arg03, arg04
24450     04 4E 85 F1 | 	sub	fp, #4
24454     10 18 06 F1 | 	add	arg04, #16
24458     0C 19 C2 FA | 	rdbyte	arg04, arg04
2445c     7F 18 06 F5 | 	and	arg04, #127
24460     10 16 06 F1 | 	add	arg03, #16
24464     0B 19 42 FC | 	wrbyte	arg04, arg03
24468                 | LR__3830
24468     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
2446c     10 4E 05 F1 | 	add	fp, #16
24470     A7 FA 61 FC | 	wrlong	result1, fp
24474     04 4E 85 F1 | 	sub	fp, #4
24478     A7 12 02 FB | 	rdlong	arg01, fp
2447c     08 4E 85 F1 | 	sub	fp, #8
24480     A7 18 02 FB | 	rdlong	arg04, fp
24484     04 4E 85 F1 | 	sub	fp, #4
24488     20 18 06 F1 | 	add	arg04, #32
2448c     0C 15 02 FB | 	rdlong	arg02, arg04
24490     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
24494     08 4E 05 F1 | 	add	fp, #8
24498     A7 FA 61 FC | 	wrlong	result1, fp
2449c     08 4E 85 F1 | 	sub	fp, #8
244a0     00 FA 0D F2 | 	cmp	result1, #0 wz
244a4     E4 00 90 5D |  if_ne	jmp	#LR__3831
244a8     04 4E 05 F1 | 	add	fp, #4
244ac     A7 18 02 FB | 	rdlong	arg04, fp
244b0     24 18 06 F1 | 	add	arg04, #36
244b4     0C 19 02 FB | 	rdlong	arg04, arg04
244b8     10 4E 05 F1 | 	add	fp, #16
244bc     A7 18 62 FC | 	wrlong	arg04, fp
244c0     0C 17 02 F6 | 	mov	arg03, arg04
244c4     0B 16 06 F1 | 	add	arg03, #11
244c8     0B 17 C2 FA | 	rdbyte	arg03, arg03
244cc     20 16 46 F5 | 	or	arg03, #32
244d0     0B 18 06 F1 | 	add	arg04, #11
244d4     0C 17 42 FC | 	wrbyte	arg03, arg04
244d8     10 4E 85 F1 | 	sub	fp, #16
244dc     A7 18 02 FB | 	rdlong	arg04, fp
244e0     0C 13 02 FB | 	rdlong	arg01, arg04
244e4     10 4E 05 F1 | 	add	fp, #16
244e8     A7 14 02 FB | 	rdlong	arg02, fp
244ec     14 4E 85 F1 | 	sub	fp, #20
244f0     08 18 06 F1 | 	add	arg04, #8
244f4     0C 17 02 FB | 	rdlong	arg03, arg04
244f8     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
244fc     14 4E 05 F1 | 	add	fp, #20
24500     A7 12 02 FB | 	rdlong	arg01, fp
24504     1C 12 06 F1 | 	add	arg01, #28
24508     10 4E 85 F1 | 	sub	fp, #16
2450c     A7 18 02 FB | 	rdlong	arg04, fp
24510     0C 18 06 F1 | 	add	arg04, #12
24514     0C 15 02 FB | 	rdlong	arg02, arg04
24518     09 15 62 FC | 	wrlong	arg02, arg01
2451c     10 4E 05 F1 | 	add	fp, #16
24520     A7 12 02 FB | 	rdlong	arg01, fp
24524     16 12 06 F1 | 	add	arg01, #22
24528     04 4E 85 F1 | 	sub	fp, #4
2452c     A7 14 02 FB | 	rdlong	arg02, fp
24530     09 15 62 FC | 	wrlong	arg02, arg01
24534     04 4E 05 F1 | 	add	fp, #4
24538     A7 12 02 FB | 	rdlong	arg01, fp
2453c     12 12 06 F1 | 	add	arg01, #18
24540     09 01 58 FC | 	wrword	#0, arg01
24544     08 4E 85 F1 | 	sub	fp, #8
24548     A7 18 02 FB | 	rdlong	arg04, fp
2454c     03 18 06 F1 | 	add	arg04, #3
24550     0C 03 48 FC | 	wrbyte	#1, arg04
24554     A7 12 02 FB | 	rdlong	arg01, fp
24558     0C 4E 85 F1 | 	sub	fp, #12
2455c     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
24560     08 4E 05 F1 | 	add	fp, #8
24564     A7 FA 61 FC | 	wrlong	result1, fp
24568     04 4E 85 F1 | 	sub	fp, #4
2456c     A7 18 02 FB | 	rdlong	arg04, fp
24570     0C 17 02 F6 | 	mov	arg03, arg04
24574     04 4E 85 F1 | 	sub	fp, #4
24578     10 18 06 F1 | 	add	arg04, #16
2457c     0C 19 C2 FA | 	rdbyte	arg04, arg04
24580     BF 18 06 F5 | 	and	arg04, #191
24584     10 16 06 F1 | 	add	arg03, #16
24588     0B 19 42 FC | 	wrbyte	arg04, arg03
2458c                 | LR__3831
2458c                 | LR__3832
2458c                 | LR__3833
2458c                 | ' 					dir = fp->dir_ptr;
2458c                 | ' 					dir[ 11 ] |=  0x20 ;
2458c                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
2458c                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
2458c                 | ' 					st_dword(dir +  22 , tm);
2458c                 | ' 					st_word(dir +  18 , 0);
2458c                 | ' 					fs->wflag = 1;
2458c                 | ' 					res = sync_fs(fs);
2458c                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
2458c                 | ' 				}
2458c                 | ' 			}
2458c                 | ' 		}
2458c                 | ' 	}
2458c                 | ' 
2458c                 | ' 	return res ;
2458c     08 4E 05 F1 | 	add	fp, #8
24590     A7 FA 01 FB | 	rdlong	result1, fp
24594     08 4E 85 F1 | 	sub	fp, #8
24598                 | LR__3834
24598     A7 F0 03 F6 | 	mov	ptra, fp
2459c     B2 00 A0 FD | 	call	#popregs_
245a0                 | _fatfs_cc_f_sync_ret
245a0     2D 00 64 FD | 	ret
245a4                 | 
245a4                 | _fatfs_cc_f_close
245a4     01 4A 05 F6 | 	mov	COUNT_, #1
245a8     A8 00 A0 FD | 	call	#pushregs_
245ac     10 F0 07 F1 | 	add	ptra, #16
245b0     04 4E 05 F1 | 	add	fp, #4
245b4     A7 12 62 FC | 	wrlong	arg01, fp
245b8     04 4E 85 F1 | 	sub	fp, #4
245bc     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
245c0     08 4E 05 F1 | 	add	fp, #8
245c4     A7 FA 61 FC | 	wrlong	result1, fp
245c8     08 4E 85 F1 | 	sub	fp, #8
245cc     00 FA 0D F2 | 	cmp	result1, #0 wz
245d0     38 00 90 5D |  if_ne	jmp	#LR__3840
245d4     04 4E 05 F1 | 	add	fp, #4
245d8     A7 12 02 FB | 	rdlong	arg01, fp
245dc     08 4E 05 F1 | 	add	fp, #8
245e0     A7 14 02 F6 | 	mov	arg02, fp
245e4     0C 4E 85 F1 | 	sub	fp, #12
245e8     9C E6 BF FD | 	call	#_fatfs_cc_validate
245ec     08 4E 05 F1 | 	add	fp, #8
245f0     A7 FA 61 FC | 	wrlong	result1, fp
245f4     08 4E 85 F1 | 	sub	fp, #8
245f8     00 FA 0D F2 | 	cmp	result1, #0 wz
245fc     04 4E 05 A1 |  if_e	add	fp, #4
24600     A7 1E 02 AB |  if_e	rdlong	local01, fp
24604     04 4E 85 A1 |  if_e	sub	fp, #4
24608     0F 01 68 AC |  if_e	wrlong	#0, local01
2460c                 | LR__3840
2460c                 | ' 
2460c                 | ' 
2460c                 | ' 
2460c                 | ' 
2460c                 | ' 			fp->obj.fs = 0;
2460c                 | ' #line 4192 "ff.c"
2460c                 | ' 		}
2460c                 | ' 	}
2460c                 | ' 	return res;
2460c     08 4E 05 F1 | 	add	fp, #8
24610     A7 FA 01 FB | 	rdlong	result1, fp
24614     08 4E 85 F1 | 	sub	fp, #8
24618     A7 F0 03 F6 | 	mov	ptra, fp
2461c     B2 00 A0 FD | 	call	#popregs_
24620                 | _fatfs_cc_f_close_ret
24620     2D 00 64 FD | 	ret
24624                 | 
24624                 | _fatfs_cc_f_lseek
24624     00 4A 05 F6 | 	mov	COUNT_, #0
24628     A8 00 A0 FD | 	call	#pushregs_
2462c     24 F0 07 F1 | 	add	ptra, #36
24630     04 4E 05 F1 | 	add	fp, #4
24634     A7 12 62 FC | 	wrlong	arg01, fp
24638     04 4E 05 F1 | 	add	fp, #4
2463c     A7 14 62 FC | 	wrlong	arg02, fp
24640     04 4E 85 F1 | 	sub	fp, #4
24644     A7 12 02 FB | 	rdlong	arg01, fp
24648     0C 4E 05 F1 | 	add	fp, #12
2464c     A7 14 02 F6 | 	mov	arg02, fp
24650     10 4E 85 F1 | 	sub	fp, #16
24654     30 E6 BF FD | 	call	#_fatfs_cc_validate
24658     0C 4E 05 F1 | 	add	fp, #12
2465c     A7 FA 61 FC | 	wrlong	result1, fp
24660     0C 4E 85 F1 | 	sub	fp, #12
24664     00 FA 0D F2 | 	cmp	result1, #0 wz
24668     1C 00 90 5D |  if_ne	jmp	#LR__3850
2466c     04 4E 05 F1 | 	add	fp, #4
24670     A7 18 02 FB | 	rdlong	arg04, fp
24674     11 18 06 F1 | 	add	arg04, #17
24678     0C 19 C2 FA | 	rdbyte	arg04, arg04
2467c     08 4E 05 F1 | 	add	fp, #8
24680     A7 18 62 FC | 	wrlong	arg04, fp
24684     0C 4E 85 F1 | 	sub	fp, #12
24688                 | LR__3850
24688     0C 4E 05 F1 | 	add	fp, #12
2468c     A7 18 0A FB | 	rdlong	arg04, fp wz
24690     0C 4E 85 F1 | 	sub	fp, #12
24694     0C 4E 05 51 |  if_ne	add	fp, #12
24698     A7 FA 01 5B |  if_ne	rdlong	result1, fp
2469c     0C 4E 85 51 |  if_ne	sub	fp, #12
246a0     40 06 90 5D |  if_ne	jmp	#LR__3873
246a4     04 4E 05 F1 | 	add	fp, #4
246a8     A7 18 02 FB | 	rdlong	arg04, fp
246ac     04 4E 05 F1 | 	add	fp, #4
246b0     A7 16 02 FB | 	rdlong	arg03, fp
246b4     08 4E 85 F1 | 	sub	fp, #8
246b8     0C 18 06 F1 | 	add	arg04, #12
246bc     0C 19 02 FB | 	rdlong	arg04, arg04
246c0     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
246c4     3C 00 90 ED |  if_be	jmp	#LR__3851
246c8     04 4E 05 F1 | 	add	fp, #4
246cc     A7 16 02 FB | 	rdlong	arg03, fp
246d0     04 4E 85 F1 | 	sub	fp, #4
246d4     10 16 06 F1 | 	add	arg03, #16
246d8     0B 17 C2 FA | 	rdbyte	arg03, arg03
246dc     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
246e0     02 16 CE F7 | 	test	arg03, #2 wz
246e4     1C 00 90 5D |  if_ne	jmp	#LR__3851
246e8     04 4E 05 F1 | 	add	fp, #4
246ec     A7 16 02 FB | 	rdlong	arg03, fp
246f0     0C 16 06 F1 | 	add	arg03, #12
246f4     0B 17 02 FB | 	rdlong	arg03, arg03
246f8     04 4E 05 F1 | 	add	fp, #4
246fc     A7 16 62 FC | 	wrlong	arg03, fp
24700     08 4E 85 F1 | 	sub	fp, #8
24704                 | LR__3851
24704     04 4E 05 F1 | 	add	fp, #4
24708     A7 16 02 FB | 	rdlong	arg03, fp
2470c     14 16 06 F1 | 	add	arg03, #20
24710     0B 17 02 FB | 	rdlong	arg03, arg03
24714     1C 4E 05 F1 | 	add	fp, #28
24718     A7 16 62 FC | 	wrlong	arg03, fp
2471c     1C 4E 85 F1 | 	sub	fp, #28
24720     A7 16 02 FB | 	rdlong	arg03, fp
24724     18 4E 05 F1 | 	add	fp, #24
24728     A7 00 68 FC | 	wrlong	#0, fp
2472c     14 16 06 F1 | 	add	arg03, #20
24730     0B 01 68 FC | 	wrlong	#0, arg03
24734     14 4E 85 F1 | 	sub	fp, #20
24738     A7 16 02 FB | 	rdlong	arg03, fp
2473c     08 4E 85 F1 | 	sub	fp, #8
24740     01 16 16 F2 | 	cmp	arg03, #1 wc
24744     E4 03 90 CD |  if_b	jmp	#LR__3867
24748     10 4E 05 F1 | 	add	fp, #16
2474c     A7 16 02 FB | 	rdlong	arg03, fp
24750     0A 16 06 F1 | 	add	arg03, #10
24754     0B 19 E2 FA | 	rdword	arg04, arg03
24758     09 18 66 F0 | 	shl	arg04, #9
2475c     08 4E 05 F1 | 	add	fp, #8
24760     A7 18 62 FC | 	wrlong	arg04, fp
24764     08 4E 05 F1 | 	add	fp, #8
24768     A7 18 02 FB | 	rdlong	arg04, fp
2476c     20 4E 85 F1 | 	sub	fp, #32
24770     01 18 16 F2 | 	cmp	arg04, #1 wc
24774     AC 00 90 CD |  if_b	jmp	#LR__3852
24778     08 4E 05 F1 | 	add	fp, #8
2477c     A7 18 02 FB | 	rdlong	arg04, fp
24780     01 18 86 F1 | 	sub	arg04, #1
24784     10 4E 05 F1 | 	add	fp, #16
24788     A7 16 02 FB | 	rdlong	arg03, fp
2478c     0B 19 12 FD | 	qdiv	arg04, arg03
24790     08 4E 05 F1 | 	add	fp, #8
24794     A7 FA 01 FB | 	rdlong	result1, fp
24798     01 FA 85 F1 | 	sub	result1, #1
2479c     18 18 62 FD | 	getqx	arg04
247a0     0B FB 11 FD | 	qdiv	result1, arg03
247a4     20 4E 85 F1 | 	sub	fp, #32
247a8     18 16 62 FD | 	getqx	arg03
247ac     0B 19 12 F2 | 	cmp	arg04, arg03 wc
247b0     70 00 90 CD |  if_b	jmp	#LR__3852
247b4     04 4E 05 F1 | 	add	fp, #4
247b8     A7 16 02 FB | 	rdlong	arg03, fp
247bc     1C 4E 05 F1 | 	add	fp, #28
247c0     A7 FA 01 FB | 	rdlong	result1, fp
247c4     01 FA 85 F1 | 	sub	result1, #1
247c8     08 4E 85 F1 | 	sub	fp, #8
247cc     A7 18 02 FB | 	rdlong	arg04, fp
247d0     01 18 86 F1 | 	sub	arg04, #1
247d4     0C FB 21 F5 | 	andn	result1, arg04
247d8     14 16 06 F1 | 	add	arg03, #20
247dc     0B FB 61 FC | 	wrlong	result1, arg03
247e0     10 4E 85 F1 | 	sub	fp, #16
247e4     A7 16 02 FB | 	rdlong	arg03, fp
247e8     04 4E 85 F1 | 	sub	fp, #4
247ec     A7 18 02 FB | 	rdlong	arg04, fp
247f0     14 18 06 F1 | 	add	arg04, #20
247f4     0C 19 02 FB | 	rdlong	arg04, arg04
247f8     0C 17 82 F1 | 	sub	arg03, arg04
247fc     04 4E 05 F1 | 	add	fp, #4
24800     A7 16 62 FC | 	wrlong	arg03, fp
24804     04 4E 85 F1 | 	sub	fp, #4
24808     A7 16 02 FB | 	rdlong	arg03, fp
2480c     18 16 06 F1 | 	add	arg03, #24
24810     0B 17 02 FB | 	rdlong	arg03, arg03
24814     10 4E 05 F1 | 	add	fp, #16
24818     A7 16 62 FC | 	wrlong	arg03, fp
2481c     14 4E 85 F1 | 	sub	fp, #20
24820     D0 00 90 FD | 	jmp	#LR__3856
24824                 | LR__3852
24824     04 4E 05 F1 | 	add	fp, #4
24828     A7 16 02 FB | 	rdlong	arg03, fp
2482c     08 16 06 F1 | 	add	arg03, #8
24830     0B 17 0A FB | 	rdlong	arg03, arg03 wz
24834     10 4E 05 F1 | 	add	fp, #16
24838     A7 16 62 FC | 	wrlong	arg03, fp
2483c     14 4E 85 F1 | 	sub	fp, #20
24840     94 00 90 5D |  if_ne	jmp	#LR__3855
24844     04 4E 05 F1 | 	add	fp, #4
24848     A7 12 02 FB | 	rdlong	arg01, fp
2484c     04 4E 85 F1 | 	sub	fp, #4
24850     00 14 06 F6 | 	mov	arg02, #0
24854     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
24858     14 4E 05 F1 | 	add	fp, #20
2485c     A7 FA 61 FC | 	wrlong	result1, fp
24860     14 4E 85 F1 | 	sub	fp, #20
24864     01 FA 0D F2 | 	cmp	result1, #1 wz
24868     1C 00 90 5D |  if_ne	jmp	#LR__3853
2486c     04 4E 05 F1 | 	add	fp, #4
24870     A7 16 02 FB | 	rdlong	arg03, fp
24874     04 4E 85 F1 | 	sub	fp, #4
24878     11 16 06 F1 | 	add	arg03, #17
2487c     0B 05 48 FC | 	wrbyte	#2, arg03
24880     02 FA 05 F6 | 	mov	result1, #2
24884     5C 04 90 FD | 	jmp	#LR__3873
24888                 | LR__3853
24888     14 4E 05 F1 | 	add	fp, #20
2488c     A7 FA 01 FB | 	rdlong	result1, fp
24890     14 4E 85 F1 | 	sub	fp, #20
24894     FF FF 7F FF 
24898     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2489c     1C 00 90 5D |  if_ne	jmp	#LR__3854
248a0     04 4E 05 F1 | 	add	fp, #4
248a4     A7 16 02 FB | 	rdlong	arg03, fp
248a8     04 4E 85 F1 | 	sub	fp, #4
248ac     11 16 06 F1 | 	add	arg03, #17
248b0     0B 03 48 FC | 	wrbyte	#1, arg03
248b4     01 FA 05 F6 | 	mov	result1, #1
248b8     28 04 90 FD | 	jmp	#LR__3873
248bc                 | LR__3854
248bc     04 4E 05 F1 | 	add	fp, #4
248c0     A7 16 02 FB | 	rdlong	arg03, fp
248c4     10 4E 05 F1 | 	add	fp, #16
248c8     A7 18 02 FB | 	rdlong	arg04, fp
248cc     14 4E 85 F1 | 	sub	fp, #20
248d0     08 16 06 F1 | 	add	arg03, #8
248d4     0B 19 62 FC | 	wrlong	arg04, arg03
248d8                 | LR__3855
248d8     04 4E 05 F1 | 	add	fp, #4
248dc     A7 16 02 FB | 	rdlong	arg03, fp
248e0     10 4E 05 F1 | 	add	fp, #16
248e4     A7 18 02 FB | 	rdlong	arg04, fp
248e8     14 4E 85 F1 | 	sub	fp, #20
248ec     18 16 06 F1 | 	add	arg03, #24
248f0     0B 19 62 FC | 	wrlong	arg04, arg03
248f4                 | LR__3856
248f4     14 4E 05 F1 | 	add	fp, #20
248f8     A7 16 0A FB | 	rdlong	arg03, fp wz
248fc     14 4E 85 F1 | 	sub	fp, #20
24900     28 02 90 AD |  if_e	jmp	#LR__3866
24904                 | ' 				while (ofs > bcs) {
24904                 | LR__3857
24904     08 4E 05 F1 | 	add	fp, #8
24908     A7 18 02 FB | 	rdlong	arg04, fp
2490c     10 4E 05 F1 | 	add	fp, #16
24910     A7 16 02 FB | 	rdlong	arg03, fp
24914     18 4E 85 F1 | 	sub	fp, #24
24918     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
2491c     68 01 90 ED |  if_be	jmp	#LR__3863
24920     08 4E 05 F1 | 	add	fp, #8
24924     A7 18 02 FB | 	rdlong	arg04, fp
24928     10 4E 05 F1 | 	add	fp, #16
2492c     A7 16 02 FB | 	rdlong	arg03, fp
24930     0B 19 82 F1 | 	sub	arg04, arg03
24934     10 4E 85 F1 | 	sub	fp, #16
24938     A7 18 62 FC | 	wrlong	arg04, fp
2493c     04 4E 85 F1 | 	sub	fp, #4
24940     A7 18 02 FB | 	rdlong	arg04, fp
24944     0C FB 01 F6 | 	mov	result1, arg04
24948     14 18 06 F1 | 	add	arg04, #20
2494c     0C 19 02 FB | 	rdlong	arg04, arg04
24950     14 4E 05 F1 | 	add	fp, #20
24954     A7 16 02 FB | 	rdlong	arg03, fp
24958     0B 19 02 F1 | 	add	arg04, arg03
2495c     14 FA 05 F1 | 	add	result1, #20
24960     FD 18 62 FC | 	wrlong	arg04, result1
24964     14 4E 85 F1 | 	sub	fp, #20
24968     A7 16 02 FB | 	rdlong	arg03, fp
2496c     04 4E 85 F1 | 	sub	fp, #4
24970     10 16 06 F1 | 	add	arg03, #16
24974     0B 17 C2 FA | 	rdbyte	arg03, arg03
24978     02 16 CE F7 | 	test	arg03, #2 wz
2497c     3C 00 90 AD |  if_e	jmp	#LR__3858
24980     04 4E 05 F1 | 	add	fp, #4
24984     A7 12 02 FB | 	rdlong	arg01, fp
24988     10 4E 05 F1 | 	add	fp, #16
2498c     A7 14 02 FB | 	rdlong	arg02, fp
24990     14 4E 85 F1 | 	sub	fp, #20
24994     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
24998     14 4E 05 F1 | 	add	fp, #20
2499c     A7 FA 61 FC | 	wrlong	result1, fp
249a0     00 FA 4D F2 | 	cmps	result1, #0 wz
249a4     14 4E 85 F1 | 	sub	fp, #20
249a8     08 4E 05 A1 |  if_e	add	fp, #8
249ac     A7 00 68 AC |  if_e	wrlong	#0, fp
249b0     08 4E 85 A1 |  if_e	sub	fp, #8
249b4                 | ' 							ofs = 0; break;
249b4     D0 00 90 AD |  if_e	jmp	#LR__3863
249b8     24 00 90 FD | 	jmp	#LR__3859
249bc                 | LR__3858
249bc     04 4E 05 F1 | 	add	fp, #4
249c0     A7 12 02 FB | 	rdlong	arg01, fp
249c4     10 4E 05 F1 | 	add	fp, #16
249c8     A7 14 02 FB | 	rdlong	arg02, fp
249cc     14 4E 85 F1 | 	sub	fp, #20
249d0     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
249d4     14 4E 05 F1 | 	add	fp, #20
249d8     A7 FA 61 FC | 	wrlong	result1, fp
249dc     14 4E 85 F1 | 	sub	fp, #20
249e0                 | LR__3859
249e0     14 4E 05 F1 | 	add	fp, #20
249e4     A7 16 02 FB | 	rdlong	arg03, fp
249e8     14 4E 85 F1 | 	sub	fp, #20
249ec     FF FF 7F FF 
249f0     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
249f4     1C 00 90 5D |  if_ne	jmp	#LR__3860
249f8     04 4E 05 F1 | 	add	fp, #4
249fc     A7 16 02 FB | 	rdlong	arg03, fp
24a00     04 4E 85 F1 | 	sub	fp, #4
24a04     11 16 06 F1 | 	add	arg03, #17
24a08     0B 03 48 FC | 	wrbyte	#1, arg03
24a0c     01 FA 05 F6 | 	mov	result1, #1
24a10     D0 02 90 FD | 	jmp	#LR__3873
24a14                 | LR__3860
24a14     14 4E 05 F1 | 	add	fp, #20
24a18     A7 16 02 FB | 	rdlong	arg03, fp
24a1c     14 4E 85 F1 | 	sub	fp, #20
24a20     02 16 16 F2 | 	cmp	arg03, #2 wc
24a24     24 00 90 CD |  if_b	jmp	#LR__3861
24a28     10 4E 05 F1 | 	add	fp, #16
24a2c     A7 18 02 FB | 	rdlong	arg04, fp
24a30     04 4E 05 F1 | 	add	fp, #4
24a34     A7 16 02 FB | 	rdlong	arg03, fp
24a38     14 4E 85 F1 | 	sub	fp, #20
24a3c     18 18 06 F1 | 	add	arg04, #24
24a40     0C 19 02 FB | 	rdlong	arg04, arg04
24a44     0C 17 12 F2 | 	cmp	arg03, arg04 wc
24a48     1C 00 90 CD |  if_b	jmp	#LR__3862
24a4c                 | LR__3861
24a4c     04 4E 05 F1 | 	add	fp, #4
24a50     A7 16 02 FB | 	rdlong	arg03, fp
24a54     04 4E 85 F1 | 	sub	fp, #4
24a58     11 16 06 F1 | 	add	arg03, #17
24a5c     0B 05 48 FC | 	wrbyte	#2, arg03
24a60     02 FA 05 F6 | 	mov	result1, #2
24a64     7C 02 90 FD | 	jmp	#LR__3873
24a68                 | LR__3862
24a68     04 4E 05 F1 | 	add	fp, #4
24a6c     A7 18 02 FB | 	rdlong	arg04, fp
24a70     10 4E 05 F1 | 	add	fp, #16
24a74     A7 16 02 FB | 	rdlong	arg03, fp
24a78     14 4E 85 F1 | 	sub	fp, #20
24a7c     18 18 06 F1 | 	add	arg04, #24
24a80     0C 17 62 FC | 	wrlong	arg03, arg04
24a84     7C FE 9F FD | 	jmp	#LR__3857
24a88                 | LR__3863
24a88     04 4E 05 F1 | 	add	fp, #4
24a8c     A7 16 02 FB | 	rdlong	arg03, fp
24a90     0B 13 02 F6 | 	mov	arg01, arg03
24a94     14 16 06 F1 | 	add	arg03, #20
24a98     0B 15 02 FB | 	rdlong	arg02, arg03
24a9c     04 4E 05 F1 | 	add	fp, #4
24aa0     A7 16 02 FB | 	rdlong	arg03, fp
24aa4     0B 15 02 F1 | 	add	arg02, arg03
24aa8     14 12 06 F1 | 	add	arg01, #20
24aac     09 15 62 FC | 	wrlong	arg02, arg01
24ab0     A7 16 02 FB | 	rdlong	arg03, fp
24ab4     08 4E 85 F1 | 	sub	fp, #8
24ab8     FF 17 CE F7 | 	test	arg03, #511 wz
24abc     6C 00 90 AD |  if_e	jmp	#LR__3865
24ac0     10 4E 05 F1 | 	add	fp, #16
24ac4     A7 12 02 FB | 	rdlong	arg01, fp
24ac8     04 4E 05 F1 | 	add	fp, #4
24acc     A7 14 02 FB | 	rdlong	arg02, fp
24ad0     14 4E 85 F1 | 	sub	fp, #20
24ad4     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
24ad8     1C 4E 05 F1 | 	add	fp, #28
24adc     A7 FA 61 FC | 	wrlong	result1, fp
24ae0     1C 4E 85 F1 | 	sub	fp, #28
24ae4     00 FA 0D F2 | 	cmp	result1, #0 wz
24ae8     1C 00 90 5D |  if_ne	jmp	#LR__3864
24aec     04 4E 05 F1 | 	add	fp, #4
24af0     A7 16 02 FB | 	rdlong	arg03, fp
24af4     04 4E 85 F1 | 	sub	fp, #4
24af8     11 16 06 F1 | 	add	arg03, #17
24afc     0B 05 48 FC | 	wrbyte	#2, arg03
24b00     02 FA 05 F6 | 	mov	result1, #2
24b04     DC 01 90 FD | 	jmp	#LR__3873
24b08                 | LR__3864
24b08     1C 4E 05 F1 | 	add	fp, #28
24b0c     A7 18 02 FB | 	rdlong	arg04, fp
24b10     14 4E 85 F1 | 	sub	fp, #20
24b14     A7 16 02 FB | 	rdlong	arg03, fp
24b18     09 16 46 F0 | 	shr	arg03, #9
24b1c     0B 19 02 F1 | 	add	arg04, arg03
24b20     14 4E 05 F1 | 	add	fp, #20
24b24     A7 18 62 FC | 	wrlong	arg04, fp
24b28     1C 4E 85 F1 | 	sub	fp, #28
24b2c                 | LR__3865
24b2c                 | LR__3866
24b2c                 | LR__3867
24b2c     04 4E 05 F1 | 	add	fp, #4
24b30     A7 18 02 FB | 	rdlong	arg04, fp
24b34     0C 17 02 F6 | 	mov	arg03, arg04
24b38     04 4E 85 F1 | 	sub	fp, #4
24b3c     14 16 06 F1 | 	add	arg03, #20
24b40     0B 17 02 FB | 	rdlong	arg03, arg03
24b44     0C 18 06 F1 | 	add	arg04, #12
24b48     0C 19 02 FB | 	rdlong	arg04, arg04
24b4c     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
24b50     3C 00 90 ED |  if_be	jmp	#LR__3868
24b54     04 4E 05 F1 | 	add	fp, #4
24b58     A7 18 02 FB | 	rdlong	arg04, fp
24b5c     0C 17 02 F6 | 	mov	arg03, arg04
24b60     14 18 06 F1 | 	add	arg04, #20
24b64     0C 19 02 FB | 	rdlong	arg04, arg04
24b68     0C 16 06 F1 | 	add	arg03, #12
24b6c     0B 19 62 FC | 	wrlong	arg04, arg03
24b70     A7 18 02 FB | 	rdlong	arg04, fp
24b74     0C 17 02 F6 | 	mov	arg03, arg04
24b78     04 4E 85 F1 | 	sub	fp, #4
24b7c     10 18 06 F1 | 	add	arg04, #16
24b80     0C 19 C2 FA | 	rdbyte	arg04, arg04
24b84     40 18 46 F5 | 	or	arg04, #64
24b88     10 16 06 F1 | 	add	arg03, #16
24b8c     0B 19 42 FC | 	wrbyte	arg04, arg03
24b90                 | LR__3868
24b90     04 4E 05 F1 | 	add	fp, #4
24b94     A7 16 02 FB | 	rdlong	arg03, fp
24b98     04 4E 85 F1 | 	sub	fp, #4
24b9c     14 16 06 F1 | 	add	arg03, #20
24ba0     0B 17 02 FB | 	rdlong	arg03, arg03
24ba4     FF 17 CE F7 | 	test	arg03, #511 wz
24ba8     2C 01 90 AD |  if_e	jmp	#LR__3872
24bac     04 4E 05 F1 | 	add	fp, #4
24bb0     A7 18 02 FB | 	rdlong	arg04, fp
24bb4     18 4E 05 F1 | 	add	fp, #24
24bb8     A7 16 02 FB | 	rdlong	arg03, fp
24bbc     1C 4E 85 F1 | 	sub	fp, #28
24bc0     1C 18 06 F1 | 	add	arg04, #28
24bc4     0C 19 02 FB | 	rdlong	arg04, arg04
24bc8     0C 17 0A F2 | 	cmp	arg03, arg04 wz
24bcc     08 01 90 AD |  if_e	jmp	#LR__3872
24bd0     04 4E 05 F1 | 	add	fp, #4
24bd4     A7 16 02 FB | 	rdlong	arg03, fp
24bd8     04 4E 85 F1 | 	sub	fp, #4
24bdc     10 16 06 F1 | 	add	arg03, #16
24be0     0B 17 C2 FA | 	rdbyte	arg03, arg03
24be4     80 16 CE F7 | 	test	arg03, #128 wz
24be8     7C 00 90 AD |  if_e	jmp	#LR__3870
24bec     10 4E 05 F1 | 	add	fp, #16
24bf0     A7 16 02 FB | 	rdlong	arg03, fp
24bf4     01 16 06 F1 | 	add	arg03, #1
24bf8     0B 13 C2 FA | 	rdbyte	arg01, arg03
24bfc     0C 4E 85 F1 | 	sub	fp, #12
24c00     A7 16 02 FB | 	rdlong	arg03, fp
24c04     0B 15 02 F6 | 	mov	arg02, arg03
24c08     28 14 06 F1 | 	add	arg02, #40
24c0c     04 4E 85 F1 | 	sub	fp, #4
24c10     1C 16 06 F1 | 	add	arg03, #28
24c14     0B 17 02 FB | 	rdlong	arg03, arg03
24c18     01 18 06 F6 | 	mov	arg04, #1
24c1c     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
24c20     00 FA 0D F2 | 	cmp	result1, #0 wz
24c24     1C 00 90 AD |  if_e	jmp	#LR__3869
24c28     04 4E 05 F1 | 	add	fp, #4
24c2c     A7 16 02 FB | 	rdlong	arg03, fp
24c30     04 4E 85 F1 | 	sub	fp, #4
24c34     11 16 06 F1 | 	add	arg03, #17
24c38     0B 03 48 FC | 	wrbyte	#1, arg03
24c3c     01 FA 05 F6 | 	mov	result1, #1
24c40     A0 00 90 FD | 	jmp	#LR__3873
24c44                 | LR__3869
24c44     04 4E 05 F1 | 	add	fp, #4
24c48     A7 18 02 FB | 	rdlong	arg04, fp
24c4c     0C 17 02 F6 | 	mov	arg03, arg04
24c50     04 4E 85 F1 | 	sub	fp, #4
24c54     10 18 06 F1 | 	add	arg04, #16
24c58     0C 19 C2 FA | 	rdbyte	arg04, arg04
24c5c     7F 18 06 F5 | 	and	arg04, #127
24c60     10 16 06 F1 | 	add	arg03, #16
24c64     0B 19 42 FC | 	wrbyte	arg04, arg03
24c68                 | LR__3870
24c68     10 4E 05 F1 | 	add	fp, #16
24c6c     A7 16 02 FB | 	rdlong	arg03, fp
24c70     01 16 06 F1 | 	add	arg03, #1
24c74     0B 13 C2 FA | 	rdbyte	arg01, arg03
24c78     0C 4E 85 F1 | 	sub	fp, #12
24c7c     A7 14 02 FB | 	rdlong	arg02, fp
24c80     28 14 06 F1 | 	add	arg02, #40
24c84     18 4E 05 F1 | 	add	fp, #24
24c88     A7 16 02 FB | 	rdlong	arg03, fp
24c8c     1C 4E 85 F1 | 	sub	fp, #28
24c90     01 18 06 F6 | 	mov	arg04, #1
24c94     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
24c98     00 FA 0D F2 | 	cmp	result1, #0 wz
24c9c     1C 00 90 AD |  if_e	jmp	#LR__3871
24ca0     04 4E 05 F1 | 	add	fp, #4
24ca4     A7 16 02 FB | 	rdlong	arg03, fp
24ca8     04 4E 85 F1 | 	sub	fp, #4
24cac     11 16 06 F1 | 	add	arg03, #17
24cb0     0B 03 48 FC | 	wrbyte	#1, arg03
24cb4     01 FA 05 F6 | 	mov	result1, #1
24cb8     28 00 90 FD | 	jmp	#LR__3873
24cbc                 | LR__3871
24cbc     04 4E 05 F1 | 	add	fp, #4
24cc0     A7 18 02 FB | 	rdlong	arg04, fp
24cc4     18 4E 05 F1 | 	add	fp, #24
24cc8     A7 16 02 FB | 	rdlong	arg03, fp
24ccc     1C 4E 85 F1 | 	sub	fp, #28
24cd0     1C 18 06 F1 | 	add	arg04, #28
24cd4     0C 17 62 FC | 	wrlong	arg03, arg04
24cd8                 | LR__3872
24cd8                 | ' 
24cd8                 | ' 			fp->sect = nsect;
24cd8                 | ' 		}
24cd8                 | ' 	}
24cd8                 | ' 
24cd8                 | ' 	return res ;
24cd8     0C 4E 05 F1 | 	add	fp, #12
24cdc     A7 FA 01 FB | 	rdlong	result1, fp
24ce0     0C 4E 85 F1 | 	sub	fp, #12
24ce4                 | LR__3873
24ce4     A7 F0 03 F6 | 	mov	ptra, fp
24ce8     B2 00 A0 FD | 	call	#popregs_
24cec                 | _fatfs_cc_f_lseek_ret
24cec     2D 00 64 FD | 	ret
24cf0                 | 
24cf0                 | _fatfs_cc_f_opendir
24cf0     01 4A 05 F6 | 	mov	COUNT_, #1
24cf4     A8 00 A0 FD | 	call	#pushregs_
24cf8     14 F0 07 F1 | 	add	ptra, #20
24cfc     04 4E 05 F1 | 	add	fp, #4
24d00     A7 12 62 FC | 	wrlong	arg01, fp
24d04     04 4E 05 F1 | 	add	fp, #4
24d08     A7 14 62 FC | 	wrlong	arg02, fp
24d0c     04 4E 85 F1 | 	sub	fp, #4
24d10     A7 16 0A FB | 	rdlong	arg03, fp wz
24d14     04 4E 85 F1 | 	sub	fp, #4
24d18     09 FA 05 A6 |  if_e	mov	result1, #9
24d1c     78 01 90 AD |  if_e	jmp	#LR__3886
24d20     08 4E 05 F1 | 	add	fp, #8
24d24     A7 12 02 F6 | 	mov	arg01, fp
24d28     08 4E 05 F1 | 	add	fp, #8
24d2c     A7 14 02 F6 | 	mov	arg02, fp
24d30     10 4E 85 F1 | 	sub	fp, #16
24d34     00 16 06 F6 | 	mov	arg03, #0
24d38     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
24d3c     0C 4E 05 F1 | 	add	fp, #12
24d40     A7 FA 61 FC | 	wrlong	result1, fp
24d44     0C 4E 85 F1 | 	sub	fp, #12
24d48     00 FA 0D F2 | 	cmp	result1, #0 wz
24d4c     20 01 90 5D |  if_ne	jmp	#LR__3885
24d50     04 4E 05 F1 | 	add	fp, #4
24d54     A7 16 02 FB | 	rdlong	arg03, fp
24d58     0C 4E 05 F1 | 	add	fp, #12
24d5c     A7 FA 01 FB | 	rdlong	result1, fp
24d60     0B FB 61 FC | 	wrlong	result1, arg03
24d64     0C 4E 85 F1 | 	sub	fp, #12
24d68     A7 12 02 FB | 	rdlong	arg01, fp
24d6c     04 4E 05 F1 | 	add	fp, #4
24d70     A7 14 02 FB | 	rdlong	arg02, fp
24d74     08 4E 85 F1 | 	sub	fp, #8
24d78     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
24d7c     0C 4E 05 F1 | 	add	fp, #12
24d80     A7 FA 61 FC | 	wrlong	result1, fp
24d84     0C 4E 85 F1 | 	sub	fp, #12
24d88     00 FA 0D F2 | 	cmp	result1, #0 wz
24d8c     C4 00 90 5D |  if_ne	jmp	#LR__3884
24d90     04 4E 05 F1 | 	add	fp, #4
24d94     A7 16 02 FB | 	rdlong	arg03, fp
24d98     04 4E 85 F1 | 	sub	fp, #4
24d9c     2B 16 06 F1 | 	add	arg03, #43
24da0     0B 17 C2 FA | 	rdbyte	arg03, arg03
24da4     80 16 CE F7 | 	test	arg03, #128 wz
24da8     58 00 90 5D |  if_ne	jmp	#LR__3882
24dac     04 4E 05 F1 | 	add	fp, #4
24db0     A7 16 02 FB | 	rdlong	arg03, fp
24db4     04 4E 85 F1 | 	sub	fp, #4
24db8     06 16 06 F1 | 	add	arg03, #6
24dbc     0B 17 C2 FA | 	rdbyte	arg03, arg03
24dc0     10 16 CE F7 | 	test	arg03, #16 wz
24dc4     30 00 90 AD |  if_e	jmp	#LR__3880
24dc8     04 4E 05 F1 | 	add	fp, #4
24dcc     A7 16 02 FB | 	rdlong	arg03, fp
24dd0     0B 1F 02 F6 | 	mov	local01, arg03
24dd4     0C 4E 05 F1 | 	add	fp, #12
24dd8     A7 12 02 FB | 	rdlong	arg01, fp
24ddc     10 4E 85 F1 | 	sub	fp, #16
24de0     1C 16 06 F1 | 	add	arg03, #28
24de4     0B 15 02 FB | 	rdlong	arg02, arg03
24de8     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
24dec     08 1E 06 F1 | 	add	local01, #8
24df0     0F FB 61 FC | 	wrlong	result1, local01
24df4     0C 00 90 FD | 	jmp	#LR__3881
24df8                 | LR__3880
24df8     0C 4E 05 F1 | 	add	fp, #12
24dfc     A7 0A 68 FC | 	wrlong	#5, fp
24e00     0C 4E 85 F1 | 	sub	fp, #12
24e04                 | LR__3881
24e04                 | LR__3882
24e04     0C 4E 05 F1 | 	add	fp, #12
24e08     A7 1E 0A FB | 	rdlong	local01, fp wz
24e0c     0C 4E 85 F1 | 	sub	fp, #12
24e10     40 00 90 5D |  if_ne	jmp	#LR__3883
24e14     04 4E 05 F1 | 	add	fp, #4
24e18     A7 1E 02 FB | 	rdlong	local01, fp
24e1c     0C 4E 05 F1 | 	add	fp, #12
24e20     A7 16 02 FB | 	rdlong	arg03, fp
24e24     06 16 06 F1 | 	add	arg03, #6
24e28     0B 17 E2 FA | 	rdword	arg03, arg03
24e2c     04 1E 06 F1 | 	add	local01, #4
24e30     0F 17 52 FC | 	wrword	arg03, local01
24e34     0C 4E 85 F1 | 	sub	fp, #12
24e38     A7 12 02 FB | 	rdlong	arg01, fp
24e3c     04 4E 85 F1 | 	sub	fp, #4
24e40     00 14 06 F6 | 	mov	arg02, #0
24e44     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
24e48     0C 4E 05 F1 | 	add	fp, #12
24e4c     A7 FA 61 FC | 	wrlong	result1, fp
24e50     0C 4E 85 F1 | 	sub	fp, #12
24e54                 | LR__3883
24e54                 | LR__3884
24e54     0C 4E 05 F1 | 	add	fp, #12
24e58     A7 1E 02 FB | 	rdlong	local01, fp
24e5c     0C 4E 85 F1 | 	sub	fp, #12
24e60     04 1E 0E F2 | 	cmp	local01, #4 wz
24e64     0C 4E 05 A1 |  if_e	add	fp, #12
24e68     A7 0A 68 AC |  if_e	wrlong	#5, fp
24e6c     0C 4E 85 A1 |  if_e	sub	fp, #12
24e70                 | LR__3885
24e70     0C 4E 05 F1 | 	add	fp, #12
24e74     A7 1E 0A FB | 	rdlong	local01, fp wz
24e78     0C 4E 85 F1 | 	sub	fp, #12
24e7c     04 4E 05 51 |  if_ne	add	fp, #4
24e80     A7 1E 02 5B |  if_ne	rdlong	local01, fp
24e84     04 4E 85 51 |  if_ne	sub	fp, #4
24e88     0F 01 68 5C |  if_ne	wrlong	#0, local01
24e8c                 | ' 
24e8c                 | ' 	return res ;
24e8c     0C 4E 05 F1 | 	add	fp, #12
24e90     A7 FA 01 FB | 	rdlong	result1, fp
24e94     0C 4E 85 F1 | 	sub	fp, #12
24e98                 | LR__3886
24e98     A7 F0 03 F6 | 	mov	ptra, fp
24e9c     B2 00 A0 FD | 	call	#popregs_
24ea0                 | _fatfs_cc_f_opendir_ret
24ea0     2D 00 64 FD | 	ret
24ea4                 | 
24ea4                 | _fatfs_cc_f_closedir
24ea4     00 4A 05 F6 | 	mov	COUNT_, #0
24ea8     A8 00 A0 FD | 	call	#pushregs_
24eac     10 F0 07 F1 | 	add	ptra, #16
24eb0     04 4E 05 F1 | 	add	fp, #4
24eb4     A7 12 62 FC | 	wrlong	arg01, fp
24eb8     08 4E 05 F1 | 	add	fp, #8
24ebc     A7 14 02 F6 | 	mov	arg02, fp
24ec0     0C 4E 85 F1 | 	sub	fp, #12
24ec4     C0 DD BF FD | 	call	#_fatfs_cc_validate
24ec8     08 4E 05 F1 | 	add	fp, #8
24ecc     A7 FA 61 FC | 	wrlong	result1, fp
24ed0     08 4E 85 F1 | 	sub	fp, #8
24ed4     00 FA 0D F2 | 	cmp	result1, #0 wz
24ed8     04 4E 05 A1 |  if_e	add	fp, #4
24edc     A7 FA 01 AB |  if_e	rdlong	result1, fp
24ee0     04 4E 85 A1 |  if_e	sub	fp, #4
24ee4     FD 00 68 AC |  if_e	wrlong	#0, result1
24ee8                 | ' 
24ee8                 | ' 
24ee8                 | ' 
24ee8                 | ' 
24ee8                 | ' 		dp->obj.fs = 0;
24ee8                 | ' #line 4633 "ff.c"
24ee8                 | ' 	}
24ee8                 | ' 	return res;
24ee8     08 4E 05 F1 | 	add	fp, #8
24eec     A7 FA 01 FB | 	rdlong	result1, fp
24ef0     08 4E 85 F1 | 	sub	fp, #8
24ef4     A7 F0 03 F6 | 	mov	ptra, fp
24ef8     B2 00 A0 FD | 	call	#popregs_
24efc                 | _fatfs_cc_f_closedir_ret
24efc     2D 00 64 FD | 	ret
24f00                 | 
24f00                 | _fatfs_cc_f_readdir
24f00     00 4A 05 F6 | 	mov	COUNT_, #0
24f04     A8 00 A0 FD | 	call	#pushregs_
24f08     14 F0 07 F1 | 	add	ptra, #20
24f0c     04 4E 05 F1 | 	add	fp, #4
24f10     A7 12 62 FC | 	wrlong	arg01, fp
24f14     04 4E 05 F1 | 	add	fp, #4
24f18     A7 14 62 FC | 	wrlong	arg02, fp
24f1c     04 4E 85 F1 | 	sub	fp, #4
24f20     A7 12 02 FB | 	rdlong	arg01, fp
24f24     0C 4E 05 F1 | 	add	fp, #12
24f28     A7 14 02 F6 | 	mov	arg02, fp
24f2c     10 4E 85 F1 | 	sub	fp, #16
24f30     54 DD BF FD | 	call	#_fatfs_cc_validate
24f34     0C 4E 05 F1 | 	add	fp, #12
24f38     A7 FA 61 FC | 	wrlong	result1, fp
24f3c     0C 4E 85 F1 | 	sub	fp, #12
24f40     00 FA 0D F2 | 	cmp	result1, #0 wz
24f44     BC 00 90 5D |  if_ne	jmp	#LR__3893
24f48     08 4E 05 F1 | 	add	fp, #8
24f4c     A7 FA 09 FB | 	rdlong	result1, fp wz
24f50     08 4E 85 F1 | 	sub	fp, #8
24f54     24 00 90 5D |  if_ne	jmp	#LR__3890
24f58     04 4E 05 F1 | 	add	fp, #4
24f5c     A7 12 02 FB | 	rdlong	arg01, fp
24f60     04 4E 85 F1 | 	sub	fp, #4
24f64     00 14 06 F6 | 	mov	arg02, #0
24f68     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
24f6c     0C 4E 05 F1 | 	add	fp, #12
24f70     A7 FA 61 FC | 	wrlong	result1, fp
24f74     0C 4E 85 F1 | 	sub	fp, #12
24f78     88 00 90 FD | 	jmp	#LR__3892
24f7c                 | LR__3890
24f7c     04 4E 05 F1 | 	add	fp, #4
24f80     A7 12 02 FB | 	rdlong	arg01, fp
24f84     04 4E 85 F1 | 	sub	fp, #4
24f88     00 14 06 F6 | 	mov	arg02, #0
24f8c     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
24f90     0C 4E 05 F1 | 	add	fp, #12
24f94     A7 FA 61 FC | 	wrlong	result1, fp
24f98     0C 4E 85 F1 | 	sub	fp, #12
24f9c     04 FA 0D F2 | 	cmp	result1, #4 wz
24fa0     0C 4E 05 A1 |  if_e	add	fp, #12
24fa4     A7 00 68 AC |  if_e	wrlong	#0, fp
24fa8     0C 4E 85 A1 |  if_e	sub	fp, #12
24fac     0C 4E 05 F1 | 	add	fp, #12
24fb0     A7 FA 09 FB | 	rdlong	result1, fp wz
24fb4     0C 4E 85 F1 | 	sub	fp, #12
24fb8     48 00 90 5D |  if_ne	jmp	#LR__3891
24fbc     04 4E 05 F1 | 	add	fp, #4
24fc0     A7 12 02 FB | 	rdlong	arg01, fp
24fc4     04 4E 05 F1 | 	add	fp, #4
24fc8     A7 14 02 FB | 	rdlong	arg02, fp
24fcc     08 4E 85 F1 | 	sub	fp, #8
24fd0     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
24fd4     04 4E 05 F1 | 	add	fp, #4
24fd8     A7 12 02 FB | 	rdlong	arg01, fp
24fdc     04 4E 85 F1 | 	sub	fp, #4
24fe0     00 14 06 F6 | 	mov	arg02, #0
24fe4     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
24fe8     0C 4E 05 F1 | 	add	fp, #12
24fec     A7 FA 61 FC | 	wrlong	result1, fp
24ff0     0C 4E 85 F1 | 	sub	fp, #12
24ff4     04 FA 0D F2 | 	cmp	result1, #4 wz
24ff8     0C 4E 05 A1 |  if_e	add	fp, #12
24ffc     A7 00 68 AC |  if_e	wrlong	#0, fp
25000     0C 4E 85 A1 |  if_e	sub	fp, #12
25004                 | LR__3891
25004                 | LR__3892
25004                 | LR__3893
25004                 | ' 			}
25004                 | ' 			;
25004                 | ' 		}
25004                 | ' 	}
25004                 | ' 	return res ;
25004     0C 4E 05 F1 | 	add	fp, #12
25008     A7 FA 01 FB | 	rdlong	result1, fp
2500c     0C 4E 85 F1 | 	sub	fp, #12
25010     A7 F0 03 F6 | 	mov	ptra, fp
25014     B2 00 A0 FD | 	call	#popregs_
25018                 | _fatfs_cc_f_readdir_ret
25018     2D 00 64 FD | 	ret
2501c                 | 
2501c                 | _fatfs_cc_f_stat
2501c     00 4A 05 F6 | 	mov	COUNT_, #0
25020     A8 00 A0 FD | 	call	#pushregs_
25024     40 F0 07 F1 | 	add	ptra, #64
25028     04 4E 05 F1 | 	add	fp, #4
2502c     A7 12 62 FC | 	wrlong	arg01, fp
25030     04 4E 05 F1 | 	add	fp, #4
25034     A7 14 62 FC | 	wrlong	arg02, fp
25038     04 4E 85 F1 | 	sub	fp, #4
2503c     A7 12 02 F6 | 	mov	arg01, fp
25040     0C 4E 05 F1 | 	add	fp, #12
25044     A7 14 02 F6 | 	mov	arg02, fp
25048     10 4E 85 F1 | 	sub	fp, #16
2504c     00 16 06 F6 | 	mov	arg03, #0
25050     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
25054     0C 4E 05 F1 | 	add	fp, #12
25058     A7 FA 61 FC | 	wrlong	result1, fp
2505c     0C 4E 85 F1 | 	sub	fp, #12
25060     00 FA 0D F2 | 	cmp	result1, #0 wz
25064     74 00 90 5D |  if_ne	jmp	#LR__3903
25068     10 4E 05 F1 | 	add	fp, #16
2506c     A7 12 02 F6 | 	mov	arg01, fp
25070     0C 4E 85 F1 | 	sub	fp, #12
25074     A7 14 02 FB | 	rdlong	arg02, fp
25078     04 4E 85 F1 | 	sub	fp, #4
2507c     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
25080     0C 4E 05 F1 | 	add	fp, #12
25084     A7 FA 61 FC | 	wrlong	result1, fp
25088     0C 4E 85 F1 | 	sub	fp, #12
2508c     00 FA 0D F2 | 	cmp	result1, #0 wz
25090     48 00 90 5D |  if_ne	jmp	#LR__3902
25094     3B 4E 05 F1 | 	add	fp, #59
25098     A7 FA C1 FA | 	rdbyte	result1, fp
2509c     3B 4E 85 F1 | 	sub	fp, #59
250a0     80 FA CD F7 | 	test	result1, #128 wz
250a4     0C 4E 05 51 |  if_ne	add	fp, #12
250a8     A7 0C 68 5C |  if_ne	wrlong	#6, fp
250ac     0C 4E 85 51 |  if_ne	sub	fp, #12
250b0     28 00 90 5D |  if_ne	jmp	#LR__3901
250b4     08 4E 05 F1 | 	add	fp, #8
250b8     A7 FA 09 FB | 	rdlong	result1, fp wz
250bc     08 4E 85 F1 | 	sub	fp, #8
250c0     18 00 90 AD |  if_e	jmp	#LR__3900
250c4     10 4E 05 F1 | 	add	fp, #16
250c8     A7 12 02 F6 | 	mov	arg01, fp
250cc     08 4E 85 F1 | 	sub	fp, #8
250d0     A7 14 02 FB | 	rdlong	arg02, fp
250d4     08 4E 85 F1 | 	sub	fp, #8
250d8     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
250dc                 | LR__3900
250dc                 | LR__3901
250dc                 | LR__3902
250dc                 | LR__3903
250dc                 | ' 			}
250dc                 | ' 		}
250dc                 | ' 		;
250dc                 | ' 	}
250dc                 | ' 
250dc                 | ' 	return res ;
250dc     0C 4E 05 F1 | 	add	fp, #12
250e0     A7 FA 01 FB | 	rdlong	result1, fp
250e4     0C 4E 85 F1 | 	sub	fp, #12
250e8     A7 F0 03 F6 | 	mov	ptra, fp
250ec     B2 00 A0 FD | 	call	#popregs_
250f0                 | _fatfs_cc_f_stat_ret
250f0     2D 00 64 FD | 	ret
250f4                 | 
250f4                 | _fatfs_cc_f_unlink
250f4     00 4A 05 F6 | 	mov	COUNT_, #0
250f8     A8 00 A0 FD | 	call	#pushregs_
250fc     74 F0 07 F1 | 	add	ptra, #116
25100     04 4E 05 F1 | 	add	fp, #4
25104     A7 12 62 FC | 	wrlong	arg01, fp
25108     68 4E 05 F1 | 	add	fp, #104
2510c     A7 00 68 FC | 	wrlong	#0, fp
25110     68 4E 85 F1 | 	sub	fp, #104
25114     A7 12 02 F6 | 	mov	arg01, fp
25118     6C 4E 05 F1 | 	add	fp, #108
2511c     A7 14 02 F6 | 	mov	arg02, fp
25120     70 4E 85 F1 | 	sub	fp, #112
25124     02 16 06 F6 | 	mov	arg03, #2
25128     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
2512c     08 4E 05 F1 | 	add	fp, #8
25130     A7 FA 61 FC | 	wrlong	result1, fp
25134     08 4E 85 F1 | 	sub	fp, #8
25138     00 FA 0D F2 | 	cmp	result1, #0 wz
2513c     E4 01 90 5D |  if_ne	jmp	#LR__3918
25140     70 4E 05 F1 | 	add	fp, #112
25144     A7 16 02 FB | 	rdlong	arg03, fp
25148     64 4E 85 F1 | 	sub	fp, #100
2514c     A7 16 62 FC | 	wrlong	arg03, fp
25150     A7 12 02 F6 | 	mov	arg01, fp
25154     08 4E 85 F1 | 	sub	fp, #8
25158     A7 14 02 FB | 	rdlong	arg02, fp
2515c     04 4E 85 F1 | 	sub	fp, #4
25160     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
25164     08 4E 05 F1 | 	add	fp, #8
25168     A7 FA 61 FC | 	wrlong	result1, fp
2516c     00 FA 4D F2 | 	cmps	result1, #0 wz
25170     08 4E 85 F1 | 	sub	fp, #8
25174     AC 01 90 5D |  if_ne	jmp	#LR__3917
25178     37 4E 05 F1 | 	add	fp, #55
2517c     A7 FA C1 FA | 	rdbyte	result1, fp
25180     37 4E 85 F1 | 	sub	fp, #55
25184     80 FA CD F7 | 	test	result1, #128 wz
25188     08 4E 05 51 |  if_ne	add	fp, #8
2518c     A7 0C 68 5C |  if_ne	wrlong	#6, fp
25190     08 4E 85 51 |  if_ne	sub	fp, #8
25194     1C 00 90 5D |  if_ne	jmp	#LR__3910
25198     12 4E 05 F1 | 	add	fp, #18
2519c     A7 FA C1 FA | 	rdbyte	result1, fp
251a0     12 4E 85 F1 | 	sub	fp, #18
251a4     01 FA CD F7 | 	test	result1, #1 wz
251a8     08 4E 05 51 |  if_ne	add	fp, #8
251ac     A7 0E 68 5C |  if_ne	wrlong	#7, fp
251b0     08 4E 85 51 |  if_ne	sub	fp, #8
251b4                 | LR__3910
251b4     08 4E 05 F1 | 	add	fp, #8
251b8     A7 FA 09 FB | 	rdlong	result1, fp wz
251bc     08 4E 85 F1 | 	sub	fp, #8
251c0     C8 00 90 5D |  if_ne	jmp	#LR__3913
251c4     70 4E 05 F1 | 	add	fp, #112
251c8     A7 12 02 FB | 	rdlong	arg01, fp
251cc     48 4E 85 F1 | 	sub	fp, #72
251d0     A7 14 02 FB | 	rdlong	arg02, fp
251d4     28 4E 85 F1 | 	sub	fp, #40
251d8     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
251dc     6C 4E 05 F1 | 	add	fp, #108
251e0     A7 FA 61 FC | 	wrlong	result1, fp
251e4     5A 4E 85 F1 | 	sub	fp, #90
251e8     A7 FA C1 FA | 	rdbyte	result1, fp
251ec     12 4E 85 F1 | 	sub	fp, #18
251f0     10 FA CD F7 | 	test	result1, #16 wz
251f4     94 00 90 AD |  if_e	jmp	#LR__3912
251f8     70 4E 05 F1 | 	add	fp, #112
251fc     A7 FA 01 FB | 	rdlong	result1, fp
25200     34 4E 85 F1 | 	sub	fp, #52
25204     A7 FA 61 FC | 	wrlong	result1, fp
25208     30 4E 05 F1 | 	add	fp, #48
2520c     A7 16 02 FB | 	rdlong	arg03, fp
25210     28 4E 85 F1 | 	sub	fp, #40
25214     A7 16 62 FC | 	wrlong	arg03, fp
25218     08 4E 85 F1 | 	sub	fp, #8
2521c     A7 12 02 F6 | 	mov	arg01, fp
25220     3C 4E 85 F1 | 	sub	fp, #60
25224     00 14 06 F6 | 	mov	arg02, #0
25228     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
2522c     08 4E 05 F1 | 	add	fp, #8
25230     A7 FA 61 FC | 	wrlong	result1, fp
25234     08 4E 85 F1 | 	sub	fp, #8
25238     00 FA 0D F2 | 	cmp	result1, #0 wz
2523c     4C 00 90 5D |  if_ne	jmp	#LR__3911
25240     3C 4E 05 F1 | 	add	fp, #60
25244     A7 12 02 F6 | 	mov	arg01, fp
25248     3C 4E 85 F1 | 	sub	fp, #60
2524c     00 14 06 F6 | 	mov	arg02, #0
25250     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
25254     08 4E 05 F1 | 	add	fp, #8
25258     A7 FA 61 FC | 	wrlong	result1, fp
2525c     00 FA 4D F2 | 	cmps	result1, #0 wz
25260     08 4E 85 F1 | 	sub	fp, #8
25264     08 4E 05 A1 |  if_e	add	fp, #8
25268     A7 0E 68 AC |  if_e	wrlong	#7, fp
2526c     08 4E 85 A1 |  if_e	sub	fp, #8
25270     08 4E 05 F1 | 	add	fp, #8
25274     A7 FA 01 FB | 	rdlong	result1, fp
25278     08 4E 85 F1 | 	sub	fp, #8
2527c     04 FA 0D F2 | 	cmp	result1, #4 wz
25280     08 4E 05 A1 |  if_e	add	fp, #8
25284     A7 00 68 AC |  if_e	wrlong	#0, fp
25288     08 4E 85 A1 |  if_e	sub	fp, #8
2528c                 | LR__3911
2528c                 | LR__3912
2528c                 | LR__3913
2528c     08 4E 05 F1 | 	add	fp, #8
25290     A7 FA 09 FB | 	rdlong	result1, fp wz
25294     08 4E 85 F1 | 	sub	fp, #8
25298     88 00 90 5D |  if_ne	jmp	#LR__3916
2529c     0C 4E 05 F1 | 	add	fp, #12
252a0     A7 12 02 F6 | 	mov	arg01, fp
252a4     0C 4E 85 F1 | 	sub	fp, #12
252a8     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
252ac     08 4E 05 F1 | 	add	fp, #8
252b0     A7 FA 61 FC | 	wrlong	result1, fp
252b4     08 4E 85 F1 | 	sub	fp, #8
252b8     00 FA 0D F2 | 	cmp	result1, #0 wz
252bc     38 00 90 5D |  if_ne	jmp	#LR__3914
252c0     6C 4E 05 F1 | 	add	fp, #108
252c4     A7 FA 09 FB | 	rdlong	result1, fp wz
252c8     6C 4E 85 F1 | 	sub	fp, #108
252cc     28 00 90 AD |  if_e	jmp	#LR__3914
252d0     0C 4E 05 F1 | 	add	fp, #12
252d4     A7 12 02 F6 | 	mov	arg01, fp
252d8     60 4E 05 F1 | 	add	fp, #96
252dc     A7 14 02 FB | 	rdlong	arg02, fp
252e0     6C 4E 85 F1 | 	sub	fp, #108
252e4     00 16 06 F6 | 	mov	arg03, #0
252e8     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
252ec     08 4E 05 F1 | 	add	fp, #8
252f0     A7 FA 61 FC | 	wrlong	result1, fp
252f4     08 4E 85 F1 | 	sub	fp, #8
252f8                 | LR__3914
252f8     08 4E 05 F1 | 	add	fp, #8
252fc     A7 FA 09 FB | 	rdlong	result1, fp wz
25300     08 4E 85 F1 | 	sub	fp, #8
25304     1C 00 90 5D |  if_ne	jmp	#LR__3915
25308     70 4E 05 F1 | 	add	fp, #112
2530c     A7 12 02 FB | 	rdlong	arg01, fp
25310     70 4E 85 F1 | 	sub	fp, #112
25314     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
25318     08 4E 05 F1 | 	add	fp, #8
2531c     A7 FA 61 FC | 	wrlong	result1, fp
25320     08 4E 85 F1 | 	sub	fp, #8
25324                 | LR__3915
25324                 | LR__3916
25324                 | LR__3917
25324                 | LR__3918
25324                 | ' 			}
25324                 | ' 		}
25324                 | ' 		;
25324                 | ' 	}
25324                 | ' 
25324                 | ' 	return res ;
25324     08 4E 05 F1 | 	add	fp, #8
25328     A7 FA 01 FB | 	rdlong	result1, fp
2532c     08 4E 85 F1 | 	sub	fp, #8
25330     A7 F0 03 F6 | 	mov	ptra, fp
25334     B2 00 A0 FD | 	call	#popregs_
25338                 | _fatfs_cc_f_unlink_ret
25338     2D 00 64 FD | 	ret
2533c                 | 
2533c                 | _fatfs_cc_f_mkdir
2533c     00 4A 05 F6 | 	mov	COUNT_, #0
25340     A8 00 A0 FD | 	call	#pushregs_
25344     5C F0 07 F1 | 	add	ptra, #92
25348     04 4E 05 F1 | 	add	fp, #4
2534c     A7 12 62 FC | 	wrlong	arg01, fp
25350     A7 12 02 F6 | 	mov	arg01, fp
25354     48 4E 05 F1 | 	add	fp, #72
25358     A7 14 02 F6 | 	mov	arg02, fp
2535c     4C 4E 85 F1 | 	sub	fp, #76
25360     02 16 06 F6 | 	mov	arg03, #2
25364     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
25368     08 4E 05 F1 | 	add	fp, #8
2536c     A7 FA 61 FC | 	wrlong	result1, fp
25370     08 4E 85 F1 | 	sub	fp, #8
25374     00 FA 0D F2 | 	cmp	result1, #0 wz
25378     C4 02 90 5D |  if_ne	jmp	#LR__3925
2537c     4C 4E 05 F1 | 	add	fp, #76
25380     A7 16 02 FB | 	rdlong	arg03, fp
25384     40 4E 85 F1 | 	sub	fp, #64
25388     A7 16 62 FC | 	wrlong	arg03, fp
2538c     A7 12 02 F6 | 	mov	arg01, fp
25390     08 4E 85 F1 | 	sub	fp, #8
25394     A7 14 02 FB | 	rdlong	arg02, fp
25398     04 4E 85 F1 | 	sub	fp, #4
2539c     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
253a0     08 4E 05 F1 | 	add	fp, #8
253a4     A7 FA 61 FC | 	wrlong	result1, fp
253a8     00 FA 4D F2 | 	cmps	result1, #0 wz
253ac     08 4E 85 F1 | 	sub	fp, #8
253b0     08 4E 05 A1 |  if_e	add	fp, #8
253b4     A7 10 68 AC |  if_e	wrlong	#8, fp
253b8     08 4E 85 A1 |  if_e	sub	fp, #8
253bc     08 4E 05 F1 | 	add	fp, #8
253c0     A7 FA 01 FB | 	rdlong	result1, fp
253c4     08 4E 85 F1 | 	sub	fp, #8
253c8     04 FA 0D F2 | 	cmp	result1, #4 wz
253cc     70 02 90 5D |  if_ne	jmp	#LR__3924
253d0     4C 4E 05 F1 | 	add	fp, #76
253d4     A7 16 02 FB | 	rdlong	arg03, fp
253d8     10 4E 85 F1 | 	sub	fp, #16
253dc     A7 16 62 FC | 	wrlong	arg03, fp
253e0     A7 12 02 F6 | 	mov	arg01, fp
253e4     3C 4E 85 F1 | 	sub	fp, #60
253e8     00 14 06 F6 | 	mov	arg02, #0
253ec     04 AC BF FD | 	call	#_fatfs_cc_create_chain
253f0     50 4E 05 F1 | 	add	fp, #80
253f4     A7 FA 61 FC | 	wrlong	result1, fp
253f8     48 4E 85 F1 | 	sub	fp, #72
253fc     A7 00 68 FC | 	wrlong	#0, fp
25400     48 4E 05 F1 | 	add	fp, #72
25404     A7 FA 09 FB | 	rdlong	result1, fp wz
25408     50 4E 85 F1 | 	sub	fp, #80
2540c     08 4E 05 A1 |  if_e	add	fp, #8
25410     A7 0E 68 AC |  if_e	wrlong	#7, fp
25414     08 4E 85 A1 |  if_e	sub	fp, #8
25418     50 4E 05 F1 | 	add	fp, #80
2541c     A7 FA 01 FB | 	rdlong	result1, fp
25420     50 4E 85 F1 | 	sub	fp, #80
25424     01 FA 0D F2 | 	cmp	result1, #1 wz
25428     08 4E 05 A1 |  if_e	add	fp, #8
2542c     A7 04 68 AC |  if_e	wrlong	#2, fp
25430     08 4E 85 A1 |  if_e	sub	fp, #8
25434     50 4E 05 F1 | 	add	fp, #80
25438     A7 16 02 FB | 	rdlong	arg03, fp
2543c     50 4E 85 F1 | 	sub	fp, #80
25440     FF FF 7F FF 
25444     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
25448     08 4E 05 A1 |  if_e	add	fp, #8
2544c     A7 02 68 AC |  if_e	wrlong	#1, fp
25450     08 4E 85 A1 |  if_e	sub	fp, #8
25454     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
25458     58 4E 05 F1 | 	add	fp, #88
2545c     A7 FA 61 FC | 	wrlong	result1, fp
25460     50 4E 85 F1 | 	sub	fp, #80
25464     A7 FA 09 FB | 	rdlong	result1, fp wz
25468     08 4E 85 F1 | 	sub	fp, #8
2546c     1C 01 90 5D |  if_ne	jmp	#LR__3921
25470     4C 4E 05 F1 | 	add	fp, #76
25474     A7 12 02 FB | 	rdlong	arg01, fp
25478     04 4E 05 F1 | 	add	fp, #4
2547c     A7 14 02 FB | 	rdlong	arg02, fp
25480     50 4E 85 F1 | 	sub	fp, #80
25484     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
25488     08 4E 05 F1 | 	add	fp, #8
2548c     A7 FA 61 FC | 	wrlong	result1, fp
25490     00 FA 4D F2 | 	cmps	result1, #0 wz
25494     08 4E 85 F1 | 	sub	fp, #8
25498     F0 00 90 5D |  if_ne	jmp	#LR__3920
2549c     4C 4E 05 F1 | 	add	fp, #76
254a0     A7 12 02 FB | 	rdlong	arg01, fp
254a4     4C 4E 85 F1 | 	sub	fp, #76
254a8     34 12 06 F1 | 	add	arg01, #52
254ac     20 14 06 F6 | 	mov	arg02, #32
254b0     0B 16 06 F6 | 	mov	arg03, #11
254b4     98 00 A0 FD | 	call	#\builtin_bytefill_
254b8     4C 4E 05 F1 | 	add	fp, #76
254bc     A7 FA 01 FB | 	rdlong	result1, fp
254c0     34 FA 05 F1 | 	add	result1, #52
254c4     FD 5C 48 FC | 	wrbyte	#46, result1
254c8     A7 16 02 FB | 	rdlong	arg03, fp
254cc     3F 16 06 F1 | 	add	arg03, #63
254d0     0B 21 48 FC | 	wrbyte	#16, arg03
254d4     A7 12 02 FB | 	rdlong	arg01, fp
254d8     4A 12 06 F1 | 	add	arg01, #74
254dc     0C 4E 05 F1 | 	add	fp, #12
254e0     A7 14 02 FB | 	rdlong	arg02, fp
254e4     09 15 62 FC | 	wrlong	arg02, arg01
254e8     0C 4E 85 F1 | 	sub	fp, #12
254ec     A7 14 02 FB | 	rdlong	arg02, fp
254f0     0A 13 02 F6 | 	mov	arg01, arg02
254f4     34 14 06 F1 | 	add	arg02, #52
254f8     04 4E 05 F1 | 	add	fp, #4
254fc     A7 16 02 FB | 	rdlong	arg03, fp
25500     50 4E 85 F1 | 	sub	fp, #80
25504     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
25508     4C 4E 05 F1 | 	add	fp, #76
2550c     A7 14 02 FB | 	rdlong	arg02, fp
25510     0A 13 02 F6 | 	mov	arg01, arg02
25514     54 12 06 F1 | 	add	arg01, #84
25518     4C 4E 85 F1 | 	sub	fp, #76
2551c     34 14 06 F1 | 	add	arg02, #52
25520     20 16 06 F6 | 	mov	arg03, #32
25524     54 2F BF FD | 	call	#__system____builtin_memmove
25528     4C 4E 05 F1 | 	add	fp, #76
2552c     A7 16 02 FB | 	rdlong	arg03, fp
25530     55 16 06 F1 | 	add	arg03, #85
25534     0B 5D 48 FC | 	wrbyte	#46, arg03
25538     38 4E 85 F1 | 	sub	fp, #56
2553c     A7 16 02 FB | 	rdlong	arg03, fp
25540     40 4E 05 F1 | 	add	fp, #64
25544     A7 16 62 FC | 	wrlong	arg03, fp
25548     08 4E 85 F1 | 	sub	fp, #8
2554c     A7 14 02 FB | 	rdlong	arg02, fp
25550     0A 13 02 F6 | 	mov	arg01, arg02
25554     54 14 06 F1 | 	add	arg02, #84
25558     4C 4E 85 F1 | 	sub	fp, #76
2555c     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
25560     4C 4E 05 F1 | 	add	fp, #76
25564     A7 16 02 FB | 	rdlong	arg03, fp
25568     03 16 06 F1 | 	add	arg03, #3
2556c     0B 03 48 FC | 	wrbyte	#1, arg03
25570     40 4E 85 F1 | 	sub	fp, #64
25574     A7 12 02 F6 | 	mov	arg01, fp
25578     0C 4E 85 F1 | 	sub	fp, #12
2557c     44 BA BF FD | 	call	#_fatfs_cc_dir_register
25580     08 4E 05 F1 | 	add	fp, #8
25584     A7 FA 61 FC | 	wrlong	result1, fp
25588     08 4E 85 F1 | 	sub	fp, #8
2558c                 | LR__3920
2558c                 | LR__3921
2558c     08 4E 05 F1 | 	add	fp, #8
25590     A7 FA 09 FB | 	rdlong	result1, fp wz
25594     08 4E 85 F1 | 	sub	fp, #8
25598     88 00 90 5D |  if_ne	jmp	#LR__3922
2559c     28 4E 05 F1 | 	add	fp, #40
255a0     A7 12 02 FB | 	rdlong	arg01, fp
255a4     16 12 06 F1 | 	add	arg01, #22
255a8     30 4E 05 F1 | 	add	fp, #48
255ac     A7 14 02 FB | 	rdlong	arg02, fp
255b0     09 15 62 FC | 	wrlong	arg02, arg01
255b4     0C 4E 85 F1 | 	sub	fp, #12
255b8     A7 12 02 FB | 	rdlong	arg01, fp
255bc     24 4E 85 F1 | 	sub	fp, #36
255c0     A7 14 02 FB | 	rdlong	arg02, fp
255c4     28 4E 05 F1 | 	add	fp, #40
255c8     A7 16 02 FB | 	rdlong	arg03, fp
255cc     50 4E 85 F1 | 	sub	fp, #80
255d0     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
255d4     28 4E 05 F1 | 	add	fp, #40
255d8     A7 FA 01 FB | 	rdlong	result1, fp
255dc     0B FA 05 F1 | 	add	result1, #11
255e0     FD 20 48 FC | 	wrbyte	#16, result1
255e4     24 4E 05 F1 | 	add	fp, #36
255e8     A7 FA 01 FB | 	rdlong	result1, fp
255ec     03 FA 05 F1 | 	add	result1, #3
255f0     FD 02 48 FC | 	wrbyte	#1, result1
255f4     44 4E 85 F1 | 	sub	fp, #68
255f8     A7 FA 09 FB | 	rdlong	result1, fp wz
255fc     08 4E 85 F1 | 	sub	fp, #8
25600     3C 00 90 5D |  if_ne	jmp	#LR__3923
25604     4C 4E 05 F1 | 	add	fp, #76
25608     A7 12 02 FB | 	rdlong	arg01, fp
2560c     4C 4E 85 F1 | 	sub	fp, #76
25610     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
25614     08 4E 05 F1 | 	add	fp, #8
25618     A7 FA 61 FC | 	wrlong	result1, fp
2561c     08 4E 85 F1 | 	sub	fp, #8
25620     1C 00 90 FD | 	jmp	#LR__3923
25624                 | LR__3922
25624     3C 4E 05 F1 | 	add	fp, #60
25628     A7 12 02 F6 | 	mov	arg01, fp
2562c     14 4E 05 F1 | 	add	fp, #20
25630     A7 14 02 FB | 	rdlong	arg02, fp
25634     50 4E 85 F1 | 	sub	fp, #80
25638     00 16 06 F6 | 	mov	arg03, #0
2563c     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
25640                 | LR__3923
25640                 | LR__3924
25640                 | LR__3925
25640                 | ' 				remove_chain(&sobj, dcl, 0);
25640                 | ' 			}
25640                 | ' 		}
25640                 | ' 		;
25640                 | ' 	}
25640                 | ' 
25640                 | ' 	return res ;
25640     08 4E 05 F1 | 	add	fp, #8
25644     A7 FA 01 FB | 	rdlong	result1, fp
25648     08 4E 85 F1 | 	sub	fp, #8
2564c     A7 F0 03 F6 | 	mov	ptra, fp
25650     B2 00 A0 FD | 	call	#popregs_
25654                 | _fatfs_cc_f_mkdir_ret
25654     2D 00 64 FD | 	ret
25658                 | 
25658                 | _fatfs_cc_f_rename
25658     01 4A 05 F6 | 	mov	COUNT_, #1
2565c     A8 00 A0 FD | 	call	#pushregs_
25660     9C F0 07 F1 | 	add	ptra, #156
25664     04 4E 05 F1 | 	add	fp, #4
25668     A7 12 62 FC | 	wrlong	arg01, fp
2566c     04 4E 05 F1 | 	add	fp, #4
25670     A7 14 62 FC | 	wrlong	arg02, fp
25674     A7 12 02 F6 | 	mov	arg01, fp
25678     08 4E 85 F1 | 	sub	fp, #8
2567c     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
25680     04 4E 05 F1 | 	add	fp, #4
25684     A7 12 02 F6 | 	mov	arg01, fp
25688     6C 4E 05 F1 | 	add	fp, #108
2568c     A7 14 02 F6 | 	mov	arg02, fp
25690     70 4E 85 F1 | 	sub	fp, #112
25694     02 16 06 F6 | 	mov	arg03, #2
25698     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
2569c     0C 4E 05 F1 | 	add	fp, #12
256a0     A7 FA 61 FC | 	wrlong	result1, fp
256a4     0C 4E 85 F1 | 	sub	fp, #12
256a8     00 FA 0D F2 | 	cmp	result1, #0 wz
256ac     44 03 90 5D |  if_ne	jmp	#LR__3943
256b0     70 4E 05 F1 | 	add	fp, #112
256b4     A7 16 02 FB | 	rdlong	arg03, fp
256b8     60 4E 85 F1 | 	sub	fp, #96
256bc     A7 16 62 FC | 	wrlong	arg03, fp
256c0     A7 12 02 F6 | 	mov	arg01, fp
256c4     0C 4E 85 F1 | 	sub	fp, #12
256c8     A7 14 02 FB | 	rdlong	arg02, fp
256cc     04 4E 85 F1 | 	sub	fp, #4
256d0     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
256d4     0C 4E 05 F1 | 	add	fp, #12
256d8     A7 FA 61 FC | 	wrlong	result1, fp
256dc     00 FA 4D F2 | 	cmps	result1, #0 wz
256e0     0C 4E 85 F1 | 	sub	fp, #12
256e4     1C 00 90 5D |  if_ne	jmp	#LR__3930
256e8     3B 4E 05 F1 | 	add	fp, #59
256ec     A7 FA C1 FA | 	rdbyte	result1, fp
256f0     3B 4E 85 F1 | 	sub	fp, #59
256f4     A0 FA CD F7 | 	test	result1, #160 wz
256f8     0C 4E 05 51 |  if_ne	add	fp, #12
256fc     A7 0C 68 5C |  if_ne	wrlong	#6, fp
25700     0C 4E 85 51 |  if_ne	sub	fp, #12
25704                 | LR__3930
25704     0C 4E 05 F1 | 	add	fp, #12
25708     A7 1E 0A FB | 	rdlong	local01, fp wz
2570c     0C 4E 85 F1 | 	sub	fp, #12
25710     E0 02 90 5D |  if_ne	jmp	#LR__3942
25714     74 4E 05 F1 | 	add	fp, #116
25718     A7 12 02 F6 | 	mov	arg01, fp
2571c     48 4E 85 F1 | 	sub	fp, #72
25720     A7 14 02 FB | 	rdlong	arg02, fp
25724     2C 4E 85 F1 | 	sub	fp, #44
25728     20 16 06 F6 | 	mov	arg03, #32
2572c     4C 2D BF FD | 	call	#__system____builtin_memmove
25730     40 4E 05 F1 | 	add	fp, #64
25734     A7 12 02 F6 | 	mov	arg01, fp
25738     30 4E 85 F1 | 	sub	fp, #48
2573c     A7 14 02 F6 | 	mov	arg02, fp
25740     10 4E 85 F1 | 	sub	fp, #16
25744     30 16 06 F6 | 	mov	arg03, #48
25748     30 2D BF FD | 	call	#__system____builtin_memmove
2574c     40 4E 05 F1 | 	add	fp, #64
25750     A7 12 02 F6 | 	mov	arg01, fp
25754     38 4E 85 F1 | 	sub	fp, #56
25758     A7 14 02 FB | 	rdlong	arg02, fp
2575c     08 4E 85 F1 | 	sub	fp, #8
25760     34 CA BF FD | 	call	#_fatfs_cc_follow_path
25764     0C 4E 05 F1 | 	add	fp, #12
25768     A7 FA 61 FC | 	wrlong	result1, fp
2576c     0C 4E 85 F1 | 	sub	fp, #12
25770     00 FA 0D F2 | 	cmp	result1, #0 wz
25774     4C 00 90 5D |  if_ne	jmp	#LR__3933
25778     48 4E 05 F1 | 	add	fp, #72
2577c     A7 FA 01 FB | 	rdlong	result1, fp
25780     30 4E 85 F1 | 	sub	fp, #48
25784     A7 16 02 FB | 	rdlong	arg03, fp
25788     18 4E 85 F1 | 	sub	fp, #24
2578c     0B FB 09 F2 | 	cmp	result1, arg03 wz
25790     20 00 90 5D |  if_ne	jmp	#LR__3931
25794     50 4E 05 F1 | 	add	fp, #80
25798     A7 FA 01 FB | 	rdlong	result1, fp
2579c     30 4E 85 F1 | 	sub	fp, #48
257a0     A7 16 02 FB | 	rdlong	arg03, fp
257a4     20 4E 85 F1 | 	sub	fp, #32
257a8     0B FB 09 F2 | 	cmp	result1, arg03 wz
257ac     04 1E 06 A6 |  if_e	mov	local01, #4
257b0     04 00 90 AD |  if_e	jmp	#LR__3932
257b4                 | LR__3931
257b4     08 1E 06 F6 | 	mov	local01, #8
257b8                 | LR__3932
257b8     0C 4E 05 F1 | 	add	fp, #12
257bc     A7 1E 62 FC | 	wrlong	local01, fp
257c0     0C 4E 85 F1 | 	sub	fp, #12
257c4                 | LR__3933
257c4     0C 4E 05 F1 | 	add	fp, #12
257c8     A7 1E 02 FB | 	rdlong	local01, fp
257cc     0C 4E 85 F1 | 	sub	fp, #12
257d0     04 1E 0E F2 | 	cmp	local01, #4 wz
257d4     CC 01 90 5D |  if_ne	jmp	#LR__3939
257d8     40 4E 05 F1 | 	add	fp, #64
257dc     A7 12 02 F6 | 	mov	arg01, fp
257e0     40 4E 85 F1 | 	sub	fp, #64
257e4     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
257e8     0C 4E 05 F1 | 	add	fp, #12
257ec     A7 FA 61 FC | 	wrlong	result1, fp
257f0     0C 4E 85 F1 | 	sub	fp, #12
257f4     00 FA 0D F2 | 	cmp	result1, #0 wz
257f8     A8 01 90 5D |  if_ne	jmp	#LR__3938
257fc     5C 4E 05 F1 | 	add	fp, #92
25800     A7 12 02 FB | 	rdlong	arg01, fp
25804     38 4E 05 F1 | 	add	fp, #56
25808     A7 12 62 FC | 	wrlong	arg01, fp
2580c     0D 12 06 F1 | 	add	arg01, #13
25810     20 4E 85 F1 | 	sub	fp, #32
25814     A7 14 02 F6 | 	mov	arg02, fp
25818     74 4E 85 F1 | 	sub	fp, #116
2581c     0D 14 06 F1 | 	add	arg02, #13
25820     13 16 06 F6 | 	mov	arg03, #19
25824     54 2C BF FD | 	call	#__system____builtin_memmove
25828     94 4E 05 F1 | 	add	fp, #148
2582c     A7 1E 02 FB | 	rdlong	local01, fp
25830     15 4E 85 F1 | 	sub	fp, #21
25834     A7 FA C1 FA | 	rdbyte	result1, fp
25838     0B 1E 06 F1 | 	add	local01, #11
2583c     0F FB 41 FC | 	wrbyte	result1, local01
25840     15 4E 05 F1 | 	add	fp, #21
25844     A7 1E 02 FB | 	rdlong	local01, fp
25848     94 4E 85 F1 | 	sub	fp, #148
2584c     0B 1E 06 F1 | 	add	local01, #11
25850     0F 1F C2 FA | 	rdbyte	local01, local01
25854     10 1E CE F7 | 	test	local01, #16 wz
25858     24 00 90 5D |  if_ne	jmp	#LR__3934
2585c     94 4E 05 F1 | 	add	fp, #148
25860     A7 FA 01 FB | 	rdlong	result1, fp
25864     FD 1E 02 F6 | 	mov	local01, result1
25868     94 4E 85 F1 | 	sub	fp, #148
2586c     0B FA 05 F1 | 	add	result1, #11
25870     FD FA C1 FA | 	rdbyte	result1, result1
25874     20 FA 45 F5 | 	or	result1, #32
25878     0B 1E 06 F1 | 	add	local01, #11
2587c     0F FB 41 FC | 	wrbyte	result1, local01
25880                 | LR__3934
25880     70 4E 05 F1 | 	add	fp, #112
25884     A7 1E 02 FB | 	rdlong	local01, fp
25888     03 1E 06 F1 | 	add	local01, #3
2588c     0F 03 48 FC | 	wrbyte	#1, local01
25890     24 4E 05 F1 | 	add	fp, #36
25894     A7 1E 02 FB | 	rdlong	local01, fp
25898     94 4E 85 F1 | 	sub	fp, #148
2589c     0B 1E 06 F1 | 	add	local01, #11
258a0     0F 1F C2 FA | 	rdbyte	local01, local01
258a4     10 1E CE F7 | 	test	local01, #16 wz
258a8     F8 00 90 AD |  if_e	jmp	#LR__3937
258ac     18 4E 05 F1 | 	add	fp, #24
258b0     A7 16 02 FB | 	rdlong	arg03, fp
258b4     30 4E 05 F1 | 	add	fp, #48
258b8     A7 1E 02 FB | 	rdlong	local01, fp
258bc     48 4E 85 F1 | 	sub	fp, #72
258c0     0F 17 0A F2 | 	cmp	arg03, local01 wz
258c4     DC 00 90 AD |  if_e	jmp	#LR__3937
258c8     70 4E 05 F1 | 	add	fp, #112
258cc     A7 12 02 FB | 	rdlong	arg01, fp
258d0     09 1F 02 F6 | 	mov	local01, arg01
258d4     24 4E 05 F1 | 	add	fp, #36
258d8     A7 14 02 FB | 	rdlong	arg02, fp
258dc     94 4E 85 F1 | 	sub	fp, #148
258e0     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
258e4     FD 14 02 F6 | 	mov	arg02, result1
258e8     0F 13 02 F6 | 	mov	arg01, local01
258ec     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
258f0     98 4E 05 F1 | 	add	fp, #152
258f4     A7 FA 61 FC | 	wrlong	result1, fp
258f8     00 FA 4D F2 | 	cmps	result1, #0 wz
258fc     98 4E 85 F1 | 	sub	fp, #152
25900     0C 4E 05 A1 |  if_e	add	fp, #12
25904     A7 04 68 AC |  if_e	wrlong	#2, fp
25908     0C 4E 85 A1 |  if_e	sub	fp, #12
2590c     94 00 90 AD |  if_e	jmp	#LR__3936
25910     70 4E 05 F1 | 	add	fp, #112
25914     A7 12 02 FB | 	rdlong	arg01, fp
25918     28 4E 05 F1 | 	add	fp, #40
2591c     A7 14 02 FB | 	rdlong	arg02, fp
25920     98 4E 85 F1 | 	sub	fp, #152
25924     4C A0 BF FD | 	call	#_fatfs_cc_move_window
25928     0C 4E 05 F1 | 	add	fp, #12
2592c     A7 FA 61 FC | 	wrlong	result1, fp
25930     64 4E 05 F1 | 	add	fp, #100
25934     A7 1E 02 FB | 	rdlong	local01, fp
25938     54 1E 06 F1 | 	add	local01, #84
2593c     24 4E 05 F1 | 	add	fp, #36
25940     A7 1E 62 FC | 	wrlong	local01, fp
25944     88 4E 85 F1 | 	sub	fp, #136
25948     A7 1E 0A FB | 	rdlong	local01, fp wz
2594c     0C 4E 85 F1 | 	sub	fp, #12
25950     50 00 90 5D |  if_ne	jmp	#LR__3935
25954     94 4E 05 F1 | 	add	fp, #148
25958     A7 1E 02 FB | 	rdlong	local01, fp
2595c     94 4E 85 F1 | 	sub	fp, #148
25960     01 1E 06 F1 | 	add	local01, #1
25964     0F 1F C2 FA | 	rdbyte	local01, local01
25968     2E 1E 0E F2 | 	cmp	local01, #46 wz
2596c     34 00 90 5D |  if_ne	jmp	#LR__3935
25970     70 4E 05 F1 | 	add	fp, #112
25974     A7 12 02 FB | 	rdlong	arg01, fp
25978     24 4E 05 F1 | 	add	fp, #36
2597c     A7 14 02 FB | 	rdlong	arg02, fp
25980     4C 4E 85 F1 | 	sub	fp, #76
25984     A7 16 02 FB | 	rdlong	arg03, fp
25988     48 4E 85 F1 | 	sub	fp, #72
2598c     50 AD BF FD | 	call	#_fatfs_cc_st_clust
25990     70 4E 05 F1 | 	add	fp, #112
25994     A7 1E 02 FB | 	rdlong	local01, fp
25998     70 4E 85 F1 | 	sub	fp, #112
2599c     03 1E 06 F1 | 	add	local01, #3
259a0     0F 03 48 FC | 	wrbyte	#1, local01
259a4                 | LR__3935
259a4                 | LR__3936
259a4                 | LR__3937
259a4                 | LR__3938
259a4                 | LR__3939
259a4     0C 4E 05 F1 | 	add	fp, #12
259a8     A7 1E 0A FB | 	rdlong	local01, fp wz
259ac     0C 4E 85 F1 | 	sub	fp, #12
259b0     40 00 90 5D |  if_ne	jmp	#LR__3941
259b4     10 4E 05 F1 | 	add	fp, #16
259b8     A7 12 02 F6 | 	mov	arg01, fp
259bc     10 4E 85 F1 | 	sub	fp, #16
259c0     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
259c4     0C 4E 05 F1 | 	add	fp, #12
259c8     A7 FA 61 FC | 	wrlong	result1, fp
259cc     0C 4E 85 F1 | 	sub	fp, #12
259d0     00 FA 0D F2 | 	cmp	result1, #0 wz
259d4     1C 00 90 5D |  if_ne	jmp	#LR__3940
259d8     70 4E 05 F1 | 	add	fp, #112
259dc     A7 12 02 FB | 	rdlong	arg01, fp
259e0     70 4E 85 F1 | 	sub	fp, #112
259e4     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
259e8     0C 4E 05 F1 | 	add	fp, #12
259ec     A7 FA 61 FC | 	wrlong	result1, fp
259f0     0C 4E 85 F1 | 	sub	fp, #12
259f4                 | LR__3940
259f4                 | LR__3941
259f4                 | LR__3942
259f4                 | LR__3943
259f4                 | ' 					res = sync_fs(fs);
259f4                 | ' 				}
259f4                 | ' 			}
259f4                 | ' 
259f4                 | ' 		}
259f4                 | ' 		;
259f4                 | ' 	}
259f4                 | ' 
259f4                 | ' 	return res ;
259f4     0C 4E 05 F1 | 	add	fp, #12
259f8     A7 FA 01 FB | 	rdlong	result1, fp
259fc     0C 4E 85 F1 | 	sub	fp, #12
25a00     A7 F0 03 F6 | 	mov	ptra, fp
25a04     B2 00 A0 FD | 	call	#popregs_
25a08                 | _fatfs_cc_f_rename_ret
25a08     2D 00 64 FD | 	ret
25a0c                 | 
25a0c                 | _fatfs_cc_time
25a0c     00 4A 05 F6 | 	mov	COUNT_, #0
25a10     A8 00 A0 FD | 	call	#pushregs_
25a14     14 F0 07 F1 | 	add	ptra, #20
25a18     04 4E 05 F1 | 	add	fp, #4
25a1c     A7 12 62 FC | 	wrlong	arg01, fp
25a20     04 4E 05 F1 | 	add	fp, #4
25a24     A7 12 02 F6 | 	mov	arg01, fp
25a28     08 4E 85 F1 | 	sub	fp, #8
25a2c     00 14 06 F6 | 	mov	arg02, #0
25a30     04 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
25a34     08 4E 05 F1 | 	add	fp, #8
25a38     A7 FA 01 FB | 	rdlong	result1, fp
25a3c     08 4E 05 F1 | 	add	fp, #8
25a40     A7 FA 61 FC | 	wrlong	result1, fp
25a44     0C 4E 85 F1 | 	sub	fp, #12
25a48     A7 FA 09 FB | 	rdlong	result1, fp wz
25a4c     04 4E 85 F1 | 	sub	fp, #4
25a50     18 00 90 AD |  if_e	jmp	#LR__3950
25a54     04 4E 05 F1 | 	add	fp, #4
25a58     A7 FA 01 FB | 	rdlong	result1, fp
25a5c     0C 4E 05 F1 | 	add	fp, #12
25a60     A7 14 02 FB | 	rdlong	arg02, fp
25a64     10 4E 85 F1 | 	sub	fp, #16
25a68     FD 14 62 FC | 	wrlong	arg02, result1
25a6c                 | LR__3950
25a6c                 | '         *tp = now;
25a6c                 | '     return now;
25a6c     10 4E 05 F1 | 	add	fp, #16
25a70     A7 FA 01 FB | 	rdlong	result1, fp
25a74     10 4E 85 F1 | 	sub	fp, #16
25a78     A7 F0 03 F6 | 	mov	ptra, fp
25a7c     B2 00 A0 FD | 	call	#popregs_
25a80                 | _fatfs_cc_time_ret
25a80     2D 00 64 FD | 	ret
25a84                 | 
25a84                 | _fatfs_cc_mktime
25a84     06 4A 05 F6 | 	mov	COUNT_, #6
25a88     A8 00 A0 FD | 	call	#pushregs_
25a8c     09 1F 02 F6 | 	mov	local01, arg01
25a90     14 1E 06 F1 | 	add	local01, #20
25a94     0F 13 02 FB | 	rdlong	arg01, local01
25a98     14 1E 86 F1 | 	sub	local01, #20
25a9c     46 12 56 F2 | 	cmps	arg01, #70 wc
25aa0                 | '                 return (time_t) -1;
25aa0     01 FA 65 C6 |  if_b	neg	result1, #1
25aa4     7C 01 90 CD |  if_b	jmp	#LR__3964
25aa8     03 00 00 FF 
25aac     6C 21 06 F6 | 	mov	local02, ##1900
25ab0     14 1E 06 F1 | 	add	local01, #20
25ab4     0F FB 01 FB | 	rdlong	result1, local01
25ab8     FD 20 02 F1 | 	add	local02, result1
25abc     08 1E 86 F1 | 	sub	local01, #8
25ac0     0F 23 02 FB | 	rdlong	local03, local01
25ac4     01 22 86 F1 | 	sub	local03, #1
25ac8     04 1E 06 F1 | 	add	local01, #4
25acc     0F 13 02 FB | 	rdlong	arg01, local01
25ad0     10 1E 86 F1 | 	sub	local01, #16
25ad4     02 12 66 F0 | 	shl	arg01, #2
25ad8     02 00 00 FF 
25adc     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
25ae0     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
25ae4     09 FB 01 FB | 	rdlong	result1, arg01
25ae8     FD 22 02 F1 | 	add	local03, result1
25aec     10 13 02 F6 | 	mov	arg01, local02
25af0     02 00 00 FF 
25af4     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
25af8     E4 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
25afc     00 FA 0D F2 | 	cmp	result1, #0 wz
25b00     1C 00 90 AD |  if_e	jmp	#LR__3960
25b04     00 24 06 F6 | 	mov	local04, #0
25b08     10 1E 06 F1 | 	add	local01, #16
25b0c     0F FB 01 FB | 	rdlong	result1, local01
25b10     10 1E 86 F1 | 	sub	local01, #16
25b14     02 FA 55 F2 | 	cmps	result1, #2 wc
25b18     01 24 06 36 |  if_ae	mov	local04, #1
25b1c     04 00 90 FD | 	jmp	#LR__3961
25b20                 | LR__3960
25b20     00 24 06 F6 | 	mov	local04, #0
25b24                 | LR__3961
25b24     04 1E 06 F1 | 	add	local01, #4
25b28     0F FB 01 FB | 	rdlong	result1, local01
25b2c     04 1E 86 F1 | 	sub	local01, #4
25b30     0F 27 02 FB | 	rdlong	local05, local01
25b34     08 1E 06 F1 | 	add	local01, #8
25b38     0F 13 02 FB | 	rdlong	arg01, local01
25b3c     07 00 00 FF 
25b40     10 12 06 FD | 	qmul	arg01, ##3600
25b44     12 23 02 F1 | 	add	local03, local04
25b48     FD 24 02 F6 | 	mov	local04, result1
25b4c     04 24 66 F0 | 	shl	local04, #4
25b50     FD 24 82 F1 | 	sub	local04, result1
25b54     02 24 66 F0 | 	shl	local04, #2
25b58     12 27 02 F1 | 	add	local05, local04
25b5c     08 1E 86 F1 | 	sub	local01, #8
25b60     18 24 62 FD | 	getqx	local04
25b64     A8 00 00 FF 
25b68     80 23 06 FD | 	qmul	local03, ##86400
25b6c     12 27 02 F1 | 	add	local05, local04
25b70     10 23 02 F6 | 	mov	local03, local02
25b74     03 00 00 FF 
25b78     B2 23 86 F1 | 	sub	local03, ##1970
25b7c     18 24 62 FD | 	getqx	local04
25b80     99 F0 00 FF 
25b84     80 23 06 FD | 	qmul	local03, ##31536000
25b88     12 27 02 F1 | 	add	local05, local04
25b8c     10 23 02 F6 | 	mov	local03, local02
25b90     03 00 00 FF 
25b94     B1 23 86 F1 | 	sub	local03, ##1969
25b98     11 29 52 F6 | 	abs	local06, local03 wc
25b9c     02 28 46 F0 | 	shr	local06, #2
25ba0     14 29 82 F6 | 	negc	local06, local06
25ba4     03 00 00 FF 
25ba8     D1 21 56 F2 | 	cmps	local02, ##2001 wc
25bac     18 24 62 FD | 	getqx	local04
25bb0     12 27 02 F1 | 	add	local05, local04
25bb4     18 00 90 CD |  if_b	jmp	#LR__3962
25bb8     03 00 00 FF 
25bbc     D0 21 86 F1 | 	sub	local02, ##2000
25bc0     10 25 52 F6 | 	abs	local04, local02 wc
25bc4     64 24 16 FD | 	qdiv	local04, #100
25bc8     18 24 62 FD | 	getqx	local04
25bcc     12 29 A2 F3 | 	sumnc	local06, local04
25bd0                 | LR__3962
25bd0     A8 00 00 FF 
25bd4     80 29 06 FD | 	qmul	local06, ##86400
25bd8     18 28 62 FD | 	getqx	local06
25bdc     14 27 02 F1 | 	add	local05, local06
25be0     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
25be4     02 00 00 FF 
25be8     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
25bec     F6 28 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
25bf0     14 27 02 F1 | 	add	local05, local06
25bf4     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
25bf8     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
25bfc     02 00 00 FF 
25c00     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
25c04     01 22 0E F2 | 	cmp	local03, #1 wz
25c08     14 00 90 5D |  if_ne	jmp	#LR__3963
25c0c     0F 13 02 F6 | 	mov	arg01, local01
25c10     D0 19 B0 FD | 	call	#_fatfs_cc___indst
25c14     00 FA 0D F2 | 	cmp	result1, #0 wz
25c18     07 00 00 5F 
25c1c     10 26 86 51 |  if_ne	sub	local05, ##3600
25c20                 | LR__3963
25c20                 | '                 s -=  (3600L) ;
25c20                 | ' 
25c20                 | '         return s;
25c20     13 FB 01 F6 | 	mov	result1, local05
25c24                 | LR__3964
25c24     A7 F0 03 F6 | 	mov	ptra, fp
25c28     B2 00 A0 FD | 	call	#popregs_
25c2c                 | _fatfs_cc_mktime_ret
25c2c     2D 00 64 FD | 	ret
25c30                 | 
25c30                 | _fatfs_cc__gmtime_r
25c30     03 4A 05 F6 | 	mov	COUNT_, #3
25c34     A8 00 A0 FD | 	call	#pushregs_
25c38     09 1F 02 FB | 	rdlong	local01, arg01
25c3c     A8 00 00 FF 
25c40     80 1F 16 FD | 	qdiv	local01, ##86400
25c44     18 FA 61 FD | 	getqx	result1
25c48     04 FA 05 F1 | 	add	result1, #4
25c4c     07 FA 15 FD | 	qdiv	result1, #7
25c50     18 14 06 F1 | 	add	arg02, #24
25c54     D1 7F 27 FF 
25c58     00 1E 16 F2 | 	cmp	local01, ##1325376000 wc
25c5c     D1 7F 27 3F 
25c60     00 1E 86 31 |  if_ae	sub	local01, ##1325376000
25c64     03 00 00 3F 
25c68     DC 21 06 36 |  if_ae	mov	local02, ##2012
25c6c     03 00 00 CF 
25c70     B2 21 06 C6 |  if_b	mov	local02, ##1970
25c74                 | ' 	  year = 1970;
25c74                 | ' 	}
25c74                 | ' 
25c74                 | ' 	for(;;) {
25c74     19 FA 61 FD | 	getqy	result1
25c78     0A FB 61 FC | 	wrlong	result1, arg02
25c7c     18 14 86 F1 | 	sub	arg02, #24
25c80                 | LR__3970
25c80     10 13 02 F6 | 	mov	arg01, local02
25c84     58 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
25c88     00 FA 0D F2 | 	cmp	result1, #0 wz
25c8c     42 F1 00 5F 
25c90     00 23 06 56 |  if_ne	mov	local03, ##31622400
25c94     99 F0 00 AF 
25c98     80 23 06 A6 |  if_e	mov	local03, ##31536000
25c9c     11 1F 12 F2 | 	cmp	local01, local03 wc
25ca0                 | ' 	    break;
25ca0     01 20 06 31 |  if_ae	add	local02, #1
25ca4     11 1F 82 31 |  if_ae	sub	local01, local03
25ca8     D4 FF 9F 3D |  if_ae	jmp	#LR__3970
25cac     A8 00 00 FF 
25cb0     80 1F 16 FD | 	qdiv	local01, ##86400
25cb4     10 23 02 F6 | 	mov	local03, local02
25cb8     03 00 00 FF 
25cbc     6C 23 86 F1 | 	sub	local03, ##1900
25cc0     14 14 06 F1 | 	add	arg02, #20
25cc4     0A 23 62 FC | 	wrlong	local03, arg02
25cc8     08 14 06 F1 | 	add	arg02, #8
25ccc     10 13 02 F6 | 	mov	arg01, local02
25cd0     18 20 62 FD | 	getqx	local02
25cd4     0A 21 62 FC | 	wrlong	local02, arg02
25cd8     1C 14 86 F1 | 	sub	arg02, #28
25cdc     00 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
25ce0     00 FA 0D F2 | 	cmp	result1, #0 wz
25ce4     1D 22 06 56 |  if_ne	mov	local03, #29
25ce8     1C 22 06 A6 |  if_e	mov	local03, #28
25cec     02 00 00 FF 
25cf0     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
25cf4     F6 22 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
25cf8     02 00 00 FF 
25cfc     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
25d00                 | ' 
25d00                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
25d00                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
25d00     00 12 06 F6 | 	mov	arg01, #0
25d04     97 2A 48 FB | 	callpa	#(@LR__3972-@LR__3971)>>2,fcache_load_ptr_
25d08                 | LR__3971
25d08     09 23 02 F6 | 	mov	local03, arg01
25d0c     02 22 66 F0 | 	shl	local03, #2
25d10     02 00 00 FF 
25d14     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
25d18     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
25d1c     11 23 02 FB | 	rdlong	local03, local03
25d20     11 21 52 F2 | 	cmps	local02, local03 wc
25d24     02 00 00 FF 
25d28     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
25d2c     2C 00 90 CD |  if_b	jmp	#LR__3973
25d30     09 23 02 F6 | 	mov	local03, arg01
25d34     02 22 66 F0 | 	shl	local03, #2
25d38     02 00 00 FF 
25d3c     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
25d40     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
25d44     11 23 02 FB | 	rdlong	local03, local03
25d48     11 21 82 F1 | 	sub	local02, local03
25d4c     01 12 06 F1 | 	add	arg01, #1
25d50     02 00 00 FF 
25d54     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
25d58     AC FF 9F FD | 	jmp	#LR__3971
25d5c                 | LR__3972
25d5c                 | LR__3973
25d5c     A8 00 00 FF 
25d60     80 1F 16 FD | 	qdiv	local01, ##86400
25d64     10 14 06 F1 | 	add	arg02, #16
25d68     0A 13 62 FC | 	wrlong	arg01, arg02
25d6c     01 20 06 F1 | 	add	local02, #1
25d70     04 14 86 F1 | 	sub	arg02, #4
25d74     0A 21 62 FC | 	wrlong	local02, arg02
25d78     19 1E 62 FD | 	getqy	local01
25d7c     07 00 00 FF 
25d80     10 1E 16 FD | 	qdiv	local01, ##3600
25d84     18 22 62 FD | 	getqx	local03
25d88     07 00 00 FF 
25d8c     10 1E 16 FD | 	qdiv	local01, ##3600
25d90     04 14 86 F1 | 	sub	arg02, #4
25d94     0A 23 62 FC | 	wrlong	local03, arg02
25d98     19 1E 62 FD | 	getqy	local01
25d9c     3C 1E 16 FD | 	qdiv	local01, #60
25da0     18 22 62 FD | 	getqx	local03
25da4     3C 1E 16 FD | 	qdiv	local01, #60
25da8     04 14 86 F1 | 	sub	arg02, #4
25dac     0A 23 62 FC | 	wrlong	local03, arg02
25db0     04 14 86 F1 | 	sub	arg02, #4
25db4                 | '         stm->tm_isdst = 0;
25db4                 | ' 
25db4                 | ' ;
25db4                 | '         return stm;
25db4     0A FB 01 F6 | 	mov	result1, arg02
25db8     19 22 62 FD | 	getqy	local03
25dbc     0A 23 62 FC | 	wrlong	local03, arg02
25dc0     20 14 06 F1 | 	add	arg02, #32
25dc4     0A 01 68 FC | 	wrlong	#0, arg02
25dc8     A7 F0 03 F6 | 	mov	ptra, fp
25dcc     B2 00 A0 FD | 	call	#popregs_
25dd0                 | _fatfs_cc__gmtime_r_ret
25dd0     2D 00 64 FD | 	ret
25dd4                 | 
25dd4                 | _fatfs_cc__tzset
25dd4     3C 01 00 FF 
25dd8     0D 13 06 F6 | 	mov	arg01, ##@LR__4285
25ddc     34 00 B0 FD | 	call	#_fatfs_cc_getenv
25de0     FD 12 02 F6 | 	mov	arg01, result1
25de4     02 00 00 FF 
25de8     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
25dec     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
25df0     02 00 00 FF 
25df4     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
25df8     34 15 B0 FD | 	call	#_fatfs_cc___tzoffset
25dfc     02 00 00 FF 
25e00     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
25e04     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
25e08     02 00 00 FF 
25e0c     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
25e10                 | _fatfs_cc__tzset_ret
25e10     2D 00 64 FD | 	ret
25e14                 | 
25e14                 | _fatfs_cc_getenv
25e14     06 4A 05 F6 | 	mov	COUNT_, #6
25e18     A8 00 A0 FD | 	call	#pushregs_
25e1c     09 1F 02 F6 | 	mov	local01, arg01
25e20     09 21 02 F6 | 	mov	local02, arg01
25e24     97 06 48 FB | 	callpa	#(@LR__3981-@LR__3980)>>2,fcache_load_ptr_
25e28                 | LR__3980
25e28     10 FB C9 FA | 	rdbyte	result1, local02 wz
25e2c     01 20 06 51 |  if_ne	add	local02, #1
25e30     F4 FF 9F 5D |  if_ne	jmp	#LR__3980
25e34                 | LR__3981
25e34     09 21 82 F1 | 	sub	local02, arg01
25e38     10 FB 01 F6 | 	mov	result1, local02
25e3c     02 00 00 FF 
25e40     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
25e44     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
25e48     02 00 00 FF 
25e4c     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
25e50                 | '             return 0;
25e50     00 FA 05 A6 |  if_e	mov	result1, #0
25e54     5C 00 90 AD |  if_e	jmp	#LR__3984
25e58                 | ' 
25e58                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
25e58     02 00 00 FF 
25e5c     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
25e60     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
25e64     02 00 00 FF 
25e68     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
25e6c                 | LR__3982
25e6c     11 25 0A FB | 	rdlong	local04, local03 wz
25e70     3C 00 90 AD |  if_e	jmp	#LR__3983
25e74     12 13 02 F6 | 	mov	arg01, local04
25e78     0F 15 02 F6 | 	mov	arg02, local01
25e7c     10 17 02 F6 | 	mov	arg03, local02
25e80     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
25e84     00 FA 0D F2 | 	cmp	result1, #0 wz
25e88     10 27 02 A6 |  if_e	mov	local05, local02
25e8c     12 27 02 A1 |  if_e	add	local05, local04
25e90     13 29 C2 AA |  if_e	rdbyte	local06, local05
25e94     3D 28 0E A2 |  if_e	cmp	local06, #61 wz
25e98                 | ' 			return name+len+1;
25e98     10 25 02 A1 |  if_e	add	local04, local02
25e9c     01 24 06 A1 |  if_e	add	local04, #1
25ea0     12 FB 01 A6 |  if_e	mov	result1, local04
25ea4     0C 00 90 AD |  if_e	jmp	#LR__3984
25ea8     04 22 06 F1 | 	add	local03, #4
25eac     BC FF 9F FD | 	jmp	#LR__3982
25eb0                 | LR__3983
25eb0                 | ' 	}
25eb0                 | ' 	return 0;
25eb0     00 FA 05 F6 | 	mov	result1, #0
25eb4                 | LR__3984
25eb4     A7 F0 03 F6 | 	mov	ptra, fp
25eb8     B2 00 A0 FD | 	call	#popregs_
25ebc                 | _fatfs_cc_getenv_ret
25ebc     2D 00 64 FD | 	ret
25ec0                 | 
25ec0                 | _fatfs_cc__get_fattime
25ec0     00 4A 05 F6 | 	mov	COUNT_, #0
25ec4     A8 00 A0 FD | 	call	#pushregs_
25ec8     34 F0 07 F1 | 	add	ptra, #52
25ecc     00 12 06 F6 | 	mov	arg01, #0
25ed0     38 FB BF FD | 	call	#_fatfs_cc_time
25ed4     04 4E 05 F1 | 	add	fp, #4
25ed8     A7 FA 61 FC | 	wrlong	result1, fp
25edc     A7 12 02 F6 | 	mov	arg01, fp
25ee0     0C 4E 05 F1 | 	add	fp, #12
25ee4     A7 14 02 F6 | 	mov	arg02, fp
25ee8     10 4E 85 F1 | 	sub	fp, #16
25eec     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
25ef0     24 4E 05 F1 | 	add	fp, #36
25ef4     A7 14 02 FB | 	rdlong	arg02, fp
25ef8     50 14 86 F1 | 	sub	arg02, #80
25efc     09 14 66 F0 | 	shl	arg02, #9
25f00     04 4E 85 F1 | 	sub	fp, #4
25f04     A7 FA 01 FB | 	rdlong	result1, fp
25f08     01 FA 05 F1 | 	add	result1, #1
25f0c     05 FA 65 F0 | 	shl	result1, #5
25f10     FD 14 42 F5 | 	or	arg02, result1
25f14     04 4E 85 F1 | 	sub	fp, #4
25f18     A7 FA 01 FB | 	rdlong	result1, fp
25f1c     FD 14 42 F5 | 	or	arg02, result1
25f20     14 4E 85 F1 | 	sub	fp, #20
25f24     A7 14 62 FC | 	wrlong	arg02, fp
25f28     10 4E 05 F1 | 	add	fp, #16
25f2c     A7 14 02 FB | 	rdlong	arg02, fp
25f30     0B 14 66 F0 | 	shl	arg02, #11
25f34     04 4E 85 F1 | 	sub	fp, #4
25f38     A7 FA 01 FB | 	rdlong	result1, fp
25f3c     05 FA 65 F0 | 	shl	result1, #5
25f40     FD 14 42 F5 | 	or	arg02, result1
25f44     04 4E 85 F1 | 	sub	fp, #4
25f48     A7 FA 01 FB | 	rdlong	result1, fp
25f4c     FD 14 42 F5 | 	or	arg02, result1
25f50     04 4E 85 F1 | 	sub	fp, #4
25f54     A7 14 62 FC | 	wrlong	arg02, fp
25f58                 | ' 
25f58                 | '     now = time(0);
25f58                 | '     _gmtime_r (&now, &date);
25f58                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
25f58                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
25f58                 | '     return (ffdate << 16) | fftime;
25f58     04 4E 85 F1 | 	sub	fp, #4
25f5c     A7 FA 01 FB | 	rdlong	result1, fp
25f60     10 FA 65 F0 | 	shl	result1, #16
25f64     08 4E 85 F1 | 	sub	fp, #8
25f68     0A FB 41 F5 | 	or	result1, arg02
25f6c     A7 F0 03 F6 | 	mov	ptra, fp
25f70     B2 00 A0 FD | 	call	#popregs_
25f74                 | _fatfs_cc__get_fattime_ret
25f74     2D 00 64 FD | 	ret
25f78                 | 
25f78                 | _fatfs_cc_unixtime_0836
25f78     00 4A 05 F6 | 	mov	COUNT_, #0
25f7c     A8 00 A0 FD | 	call	#pushregs_
25f80     34 F0 07 F1 | 	add	ptra, #52
25f84     04 4E 05 F1 | 	add	fp, #4
25f88     A7 12 62 FC | 	wrlong	arg01, fp
25f8c     04 4E 05 F1 | 	add	fp, #4
25f90     A7 14 62 FC | 	wrlong	arg02, fp
25f94     04 4E 85 F1 | 	sub	fp, #4
25f98     A7 14 02 FB | 	rdlong	arg02, fp
25f9c     09 14 46 F0 | 	shr	arg02, #9
25fa0     7F 14 06 F5 | 	and	arg02, #127
25fa4     50 FA 05 F6 | 	mov	result1, #80
25fa8     0A FB 01 F1 | 	add	result1, arg02
25fac     20 4E 05 F1 | 	add	fp, #32
25fb0     A7 FA 61 FC | 	wrlong	result1, fp
25fb4     20 4E 85 F1 | 	sub	fp, #32
25fb8     A7 FA 01 FB | 	rdlong	result1, fp
25fbc     05 FA 45 F0 | 	shr	result1, #5
25fc0     FD FA 41 F8 | 	getnib	result1, result1, #0
25fc4     01 FA 85 F1 | 	sub	result1, #1
25fc8     1C 4E 05 F1 | 	add	fp, #28
25fcc     A7 FA 61 FC | 	wrlong	result1, fp
25fd0     1C 4E 85 F1 | 	sub	fp, #28
25fd4     A7 FA 01 FB | 	rdlong	result1, fp
25fd8     1F FA 05 F5 | 	and	result1, #31
25fdc     18 4E 05 F1 | 	add	fp, #24
25fe0     A7 FA 61 FC | 	wrlong	result1, fp
25fe4     14 4E 85 F1 | 	sub	fp, #20
25fe8     A7 FA 01 FB | 	rdlong	result1, fp
25fec     0B FA 45 F0 | 	shr	result1, #11
25ff0     1F FA 05 F5 | 	and	result1, #31
25ff4     10 4E 05 F1 | 	add	fp, #16
25ff8     A7 FA 61 FC | 	wrlong	result1, fp
25ffc     10 4E 85 F1 | 	sub	fp, #16
26000     A7 FA 01 FB | 	rdlong	result1, fp
26004     05 FA 45 F0 | 	shr	result1, #5
26008     3F FA 05 F5 | 	and	result1, #63
2600c     0C 4E 05 F1 | 	add	fp, #12
26010     A7 FA 61 FC | 	wrlong	result1, fp
26014     0C 4E 85 F1 | 	sub	fp, #12
26018     A7 14 02 FB | 	rdlong	arg02, fp
2601c     1F 14 06 F5 | 	and	arg02, #31
26020     01 14 66 F0 | 	shl	arg02, #1
26024     08 4E 05 F1 | 	add	fp, #8
26028     A7 14 62 FC | 	wrlong	arg02, fp
2602c     A7 12 02 F6 | 	mov	arg01, fp
26030     10 4E 85 F1 | 	sub	fp, #16
26034     4C FA BF FD | 	call	#_fatfs_cc_mktime
26038     0C 4E 05 F1 | 	add	fp, #12
2603c     A7 FA 61 FC | 	wrlong	result1, fp
26040                 | ' 
26040                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
26040                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
26040                 | '     date.tm_mday = (dosdate & 0x1f);
26040                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
26040                 | '     date.tm_min = (dostime >> 5) & 0x3f;
26040                 | '     date.tm_sec = (dostime & 0x1f) << 1;
26040                 | ' 
26040                 | '     t = mktime(&date);
26040                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
26040                 | '     return t;
26040     0C 4E 85 F1 | 	sub	fp, #12
26044     A7 F0 03 F6 | 	mov	ptra, fp
26048     B2 00 A0 FD | 	call	#popregs_
2604c                 | _fatfs_cc_unixtime_0836_ret
2604c     2D 00 64 FD | 	ret
26050                 | 
26050                 | _fatfs_cc__set_dos_error_0838
26050     09 01 02 F6 | 	mov	_var01, arg01
26054                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
26054                 | '     switch (derr) {
26054     14 00 26 F3 | 	fle	_var01, #20
26058     30 00 62 FD | 	jmprel	_var01
2605c                 | LR__3990
2605c     50 00 90 FD | 	jmp	#LR__3991
26060     84 00 90 FD | 	jmp	#LR__4005
26064     80 00 90 FD | 	jmp	#LR__4006
26068     7C 00 90 FD | 	jmp	#LR__4007
2606c     48 00 90 FD | 	jmp	#LR__3992
26070     44 00 90 FD | 	jmp	#LR__3993
26074     40 00 90 FD | 	jmp	#LR__3994
26078     44 00 90 FD | 	jmp	#LR__3995
2607c     48 00 90 FD | 	jmp	#LR__3997
26080     54 00 90 FD | 	jmp	#LR__4000
26084     38 00 90 FD | 	jmp	#LR__3996
26088     4C 00 90 FD | 	jmp	#LR__4001
2608c     48 00 90 FD | 	jmp	#LR__4002
26090     44 00 90 FD | 	jmp	#LR__4003
26094     50 00 90 FD | 	jmp	#LR__4008
26098     4C 00 90 FD | 	jmp	#LR__4008
2609c     48 00 90 FD | 	jmp	#LR__4008
260a0     2C 00 90 FD | 	jmp	#LR__3998
260a4     38 00 90 FD | 	jmp	#LR__4004
260a8     2C 00 90 FD | 	jmp	#LR__3999
260ac     38 00 90 FD | 	jmp	#LR__4008
260b0                 | LR__3991
260b0     00 02 06 F6 | 	mov	_var02, #0
260b4                 | '         r = 0;
260b4                 | '         break;
260b4     34 00 90 FD | 	jmp	#LR__4009
260b8                 | LR__3992
260b8                 | LR__3993
260b8                 | LR__3994
260b8     04 02 06 F6 | 	mov	_var02, #4
260bc                 | '         r =  4 ;
260bc                 | '         break;
260bc     2C 00 90 FD | 	jmp	#LR__4009
260c0                 | LR__3995
260c0                 | LR__3996
260c0     06 02 06 F6 | 	mov	_var02, #6
260c4                 | '         r =  6 ;
260c4                 | '         break;
260c4     24 00 90 FD | 	jmp	#LR__4009
260c8                 | LR__3997
260c8     09 02 06 F6 | 	mov	_var02, #9
260cc                 | '         r =  9 ;
260cc                 | '         break;
260cc     1C 00 90 FD | 	jmp	#LR__4009
260d0                 | LR__3998
260d0     07 02 06 F6 | 	mov	_var02, #7
260d4                 | '         r =  7 ;
260d4                 | '         break;
260d4     14 00 90 FD | 	jmp	#LR__4009
260d8                 | LR__3999
260d8                 | LR__4000
260d8                 | LR__4001
260d8                 | LR__4002
260d8                 | LR__4003
260d8     0A 02 06 F6 | 	mov	_var02, #10
260dc                 | '         r =  10 ;
260dc                 | '         break;
260dc     0C 00 90 FD | 	jmp	#LR__4009
260e0                 | LR__4004
260e0     0B 02 06 F6 | 	mov	_var02, #11
260e4                 | '         r =  11 ;
260e4                 | '         break;
260e4     04 00 90 FD | 	jmp	#LR__4009
260e8                 | LR__4005
260e8                 | LR__4006
260e8                 | LR__4007
260e8                 | LR__4008
260e8     0C 02 06 F6 | 	mov	_var02, #12
260ec                 | '         r =  12 ;
260ec                 | '         break;
260ec                 | LR__4009
260ec                 | '     }
260ec                 | '     return _seterror(r);
260ec     00 02 4E F2 | 	cmps	_var02, #0 wz
260f0     20 E8 05 F1 | 	add	ptr___system__dat__, #32
260f4     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
260f8     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
260fc     01 FA 65 56 |  if_ne	neg	result1, #1
26100     00 FA 05 A6 |  if_e	mov	result1, #0
26104                 | _fatfs_cc__set_dos_error_0838_ret
26104     2D 00 64 FD | 	ret
26108                 | 
26108                 | _fatfs_cc_v_creat
26108     04 4A 05 F6 | 	mov	COUNT_, #4
2610c     A8 00 A0 FD | 	call	#pushregs_
26110     09 1F 02 F6 | 	mov	local01, arg01
26114     0A 21 02 F6 | 	mov	local02, arg02
26118     03 00 00 FF 
2611c     3C 12 06 F6 | 	mov	arg01, ##1596
26120                 | '     return _gc_alloc(size);
26120     10 14 06 F6 | 	mov	arg02, #16
26124     14 61 BF FD | 	call	#__system___gc_doalloc
26128     FD 22 0A F6 | 	mov	local03, result1 wz
2612c                 | '       return _seterror( 7 );
2612c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
26130     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
26134     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
26138     01 FA 65 A6 |  if_e	neg	result1, #1
2613c     58 00 90 AD |  if_e	jmp	#LR__4011
26140     11 13 02 F6 | 	mov	arg01, local03
26144     00 14 06 F6 | 	mov	arg02, #0
26148     03 00 00 FF 
2614c     3C 16 06 F6 | 	mov	arg03, ##1596
26150     98 00 A0 FD | 	call	#\builtin_bytefill_
26154     02 00 00 FF 
26158     14 22 06 F1 | 	add	local03, ##1044
2615c     11 13 02 F6 | 	mov	arg01, local03
26160     02 00 00 FF 
26164     14 22 86 F1 | 	sub	local03, ##1044
26168     10 15 02 F6 | 	mov	arg02, local02
2616c     07 16 06 F6 | 	mov	arg03, #7
26170     B4 CC BF FD | 	call	#_fatfs_cc_f_open
26174     FD 24 0A F6 | 	mov	local04, result1 wz
26178     14 00 90 AD |  if_e	jmp	#LR__4010
2617c     11 13 02 F6 | 	mov	arg01, local03
26180                 | '     return _gc_free(ptr);
26180     C4 61 BF FD | 	call	#__system___gc_free
26184                 | '     free(f);
26184                 | '     return _set_dos_error(r);
26184     12 13 02 F6 | 	mov	arg01, local04
26188     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0838
2618c     08 00 90 FD | 	jmp	#LR__4011
26190                 | LR__4010
26190     0F 23 62 FC | 	wrlong	local03, local01
26194                 | '   }
26194                 | '   fil->vfsdata = f;
26194                 | '   return 0;
26194     00 FA 05 F6 | 	mov	result1, #0
26198                 | LR__4011
26198     A7 F0 03 F6 | 	mov	ptra, fp
2619c     B2 00 A0 FD | 	call	#popregs_
261a0                 | _fatfs_cc_v_creat_ret
261a0     2D 00 64 FD | 	ret
261a4                 | 
261a4                 | _fatfs_cc_v_close
261a4     02 4A 05 F6 | 	mov	COUNT_, #2
261a8     A8 00 A0 FD | 	call	#pushregs_
261ac     09 1F 02 FB | 	rdlong	local01, arg01
261b0     02 00 00 FF 
261b4     14 1E 06 F1 | 	add	local01, ##1044
261b8     0F 13 02 F6 | 	mov	arg01, local01
261bc     02 00 00 FF 
261c0     14 1E 86 F1 | 	sub	local01, ##1044
261c4     DC E3 BF FD | 	call	#_fatfs_cc_f_close
261c8     FD 20 02 F6 | 	mov	local02, result1
261cc     0F 13 02 F6 | 	mov	arg01, local01
261d0                 | '     return _gc_free(ptr);
261d0     74 61 BF FD | 	call	#__system___gc_free
261d4                 | '     FAT_FIL *f = fil->vfsdata;
261d4                 | '     r=f_close(&f->fil);
261d4                 | '     free(f);
261d4                 | '     return _set_dos_error(r);
261d4     10 13 02 F6 | 	mov	arg01, local02
261d8     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0838
261dc     A7 F0 03 F6 | 	mov	ptra, fp
261e0     B2 00 A0 FD | 	call	#popregs_
261e4                 | _fatfs_cc_v_close_ret
261e4     2D 00 64 FD | 	ret
261e8                 | 
261e8                 | _fatfs_cc_v_opendir
261e8     04 4A 05 F6 | 	mov	COUNT_, #4
261ec     A8 00 A0 FD | 	call	#pushregs_
261f0     09 1F 02 F6 | 	mov	local01, arg01
261f4     0A 21 02 F6 | 	mov	local02, arg02
261f8     30 12 06 F6 | 	mov	arg01, #48
261fc                 | '     return _gc_alloc(size);
261fc     10 14 06 F6 | 	mov	arg02, #16
26200     38 60 BF FD | 	call	#__system___gc_doalloc
26204     FD 22 0A F6 | 	mov	local03, result1 wz
26208                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
26208                 | '       return _seterror( 7 );
26208     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
2620c     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
26210     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
26214     01 FA 65 A6 |  if_e	neg	result1, #1
26218     34 00 90 AD |  if_e	jmp	#LR__4021
2621c     10 15 02 F6 | 	mov	arg02, local02
26220     11 13 02 F6 | 	mov	arg01, local03
26224     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
26228     FD 24 0A F6 | 	mov	local04, result1 wz
2622c     14 00 90 AD |  if_e	jmp	#LR__4020
26230     11 13 02 F6 | 	mov	arg01, local03
26234                 | '     return _gc_free(ptr);
26234     10 61 BF FD | 	call	#__system___gc_free
26238                 | '         free(f);
26238                 | '         return _set_dos_error(r);
26238     12 13 02 F6 | 	mov	arg01, local04
2623c     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0838
26240     0C 00 90 FD | 	jmp	#LR__4021
26244                 | LR__4020
26244     04 1E 06 F1 | 	add	local01, #4
26248     0F 23 62 FC | 	wrlong	local03, local01
2624c                 | '     }
2624c                 | '     dir->vfsdata = f;
2624c                 | '     return 0;
2624c     00 FA 05 F6 | 	mov	result1, #0
26250                 | LR__4021
26250     A7 F0 03 F6 | 	mov	ptra, fp
26254     B2 00 A0 FD | 	call	#popregs_
26258                 | _fatfs_cc_v_opendir_ret
26258     2D 00 64 FD | 	ret
2625c                 | 
2625c                 | _fatfs_cc_v_closedir
2625c     02 4A 05 F6 | 	mov	COUNT_, #2
26260     A8 00 A0 FD | 	call	#pushregs_
26264     04 12 06 F1 | 	add	arg01, #4
26268     09 1F 02 FB | 	rdlong	local01, arg01
2626c     0F 13 02 F6 | 	mov	arg01, local01
26270     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
26274     FD 20 02 F6 | 	mov	local02, result1
26278     0F 13 02 F6 | 	mov	arg01, local01
2627c                 | '     return _gc_free(ptr);
2627c     C8 60 BF FD | 	call	#__system___gc_free
26280     00 20 0E F2 | 	cmp	local02, #0 wz
26284     10 13 02 56 |  if_ne	mov	arg01, local02
26288     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0838
2628c                 | '     return r;
2628c     10 FB 01 F6 | 	mov	result1, local02
26290     A7 F0 03 F6 | 	mov	ptra, fp
26294     B2 00 A0 FD | 	call	#popregs_
26298                 | _fatfs_cc_v_closedir_ret
26298     2D 00 64 FD | 	ret
2629c                 | 
2629c                 | _fatfs_cc_v_readdir
2629c     01 4A 05 F6 | 	mov	COUNT_, #1
262a0     A8 00 A0 FD | 	call	#pushregs_
262a4     2C F1 07 F1 | 	add	ptra, #300
262a8     04 4E 05 F1 | 	add	fp, #4
262ac     A7 12 62 FC | 	wrlong	arg01, fp
262b0     04 4E 05 F1 | 	add	fp, #4
262b4     A7 14 62 FC | 	wrlong	arg02, fp
262b8     04 4E 85 F1 | 	sub	fp, #4
262bc     A7 16 02 FB | 	rdlong	arg03, fp
262c0     04 16 06 F1 | 	add	arg03, #4
262c4     0B 13 02 FB | 	rdlong	arg01, arg03
262c8     08 4E 05 F1 | 	add	fp, #8
262cc     A7 14 02 F6 | 	mov	arg02, fp
262d0     0C 4E 85 F1 | 	sub	fp, #12
262d4     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
262d8     28 4F 05 F1 | 	add	fp, #296
262dc     A7 FA 61 FC | 	wrlong	result1, fp
262e0     28 4F 85 F1 | 	sub	fp, #296
262e4     00 FA 0D F2 | 	cmp	result1, #0 wz
262e8     14 00 90 AD |  if_e	jmp	#LR__4030
262ec                 | '         return _set_dos_error(r);
262ec     28 4F 05 F1 | 	add	fp, #296
262f0     A7 12 02 FB | 	rdlong	arg01, fp
262f4     28 4F 85 F1 | 	sub	fp, #296
262f8     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0838
262fc     C4 00 90 FD | 	jmp	#LR__4033
26300                 | LR__4030
26300     28 4E 05 F1 | 	add	fp, #40
26304     A7 16 CA FA | 	rdbyte	arg03, fp wz
26308     28 4E 85 F1 | 	sub	fp, #40
2630c                 | '         return -1;
2630c     01 FA 65 A6 |  if_e	neg	result1, #1
26310     B0 00 90 AD |  if_e	jmp	#LR__4033
26314     08 4E 05 F1 | 	add	fp, #8
26318     A7 12 02 FB | 	rdlong	arg01, fp
2631c     20 4E 05 F1 | 	add	fp, #32
26320     A7 14 02 F6 | 	mov	arg02, fp
26324     28 4E 85 F1 | 	sub	fp, #40
26328     3F 16 06 F6 | 	mov	arg03, #63
2632c     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
26330     08 4E 05 F1 | 	add	fp, #8
26334     A7 16 02 FB | 	rdlong	arg03, fp
26338     3F 16 06 F1 | 	add	arg03, #63
2633c     0B 01 48 FC | 	wrbyte	#0, arg03
26340     0C 4E 05 F1 | 	add	fp, #12
26344     A7 16 C2 FA | 	rdbyte	arg03, fp
26348     14 4E 85 F1 | 	sub	fp, #20
2634c     10 16 CE F7 | 	test	arg03, #16 wz
26350     18 00 90 AD |  if_e	jmp	#LR__4031
26354     08 4E 05 F1 | 	add	fp, #8
26358     A7 16 02 FB | 	rdlong	arg03, fp
2635c     08 4E 85 F1 | 	sub	fp, #8
26360     50 16 06 F1 | 	add	arg03, #80
26364     0B 03 48 FC | 	wrbyte	#1, arg03
26368     14 00 90 FD | 	jmp	#LR__4032
2636c                 | LR__4031
2636c     08 4E 05 F1 | 	add	fp, #8
26370     A7 16 02 FB | 	rdlong	arg03, fp
26374     08 4E 85 F1 | 	sub	fp, #8
26378     50 16 06 F1 | 	add	arg03, #80
2637c     0B 01 48 FC | 	wrbyte	#0, arg03
26380                 | LR__4032
26380     08 4E 05 F1 | 	add	fp, #8
26384     A7 16 02 FB | 	rdlong	arg03, fp
26388     04 4E 05 F1 | 	add	fp, #4
2638c     A7 14 02 FB | 	rdlong	arg02, fp
26390     48 16 06 F1 | 	add	arg03, #72
26394     0B 15 62 FC | 	wrlong	arg02, arg03
26398     04 4E 85 F1 | 	sub	fp, #4
2639c     A7 1E 02 FB | 	rdlong	local01, fp
263a0     08 4E 05 F1 | 	add	fp, #8
263a4     A7 12 E2 FA | 	rdword	arg01, fp
263a8     02 4E 05 F1 | 	add	fp, #2
263ac     A7 14 E2 FA | 	rdword	arg02, fp
263b0     12 4E 85 F1 | 	sub	fp, #18
263b4     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0836
263b8     4C 1E 06 F1 | 	add	local01, #76
263bc     0F FB 61 FC | 	wrlong	result1, local01
263c0                 | '         ent->d_type =  (0) ;
263c0                 | '     }
263c0                 | '     ent->d_size = finfo.fsize;
263c0                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
263c0                 | '     return 0;
263c0     00 FA 05 F6 | 	mov	result1, #0
263c4                 | LR__4033
263c4     A7 F0 03 F6 | 	mov	ptra, fp
263c8     B2 00 A0 FD | 	call	#popregs_
263cc                 | _fatfs_cc_v_readdir_ret
263cc     2D 00 64 FD | 	ret
263d0                 | 
263d0                 | _fatfs_cc_v_stat
263d0     03 4A 05 F6 | 	mov	COUNT_, #3
263d4     A8 00 A0 FD | 	call	#pushregs_
263d8     30 F1 07 F1 | 	add	ptra, #304
263dc     04 4E 05 F1 | 	add	fp, #4
263e0     A7 12 62 FC | 	wrlong	arg01, fp
263e4     04 4E 05 F1 | 	add	fp, #4
263e8     A7 14 62 FC | 	wrlong	arg02, fp
263ec     08 4E 85 F1 | 	sub	fp, #8
263f0     0A 13 02 F6 | 	mov	arg01, arg02
263f4     00 14 06 F6 | 	mov	arg02, #0
263f8     30 16 06 F6 | 	mov	arg03, #48
263fc     98 00 A0 FD | 	call	#\builtin_bytefill_
26400     04 4E 05 F1 | 	add	fp, #4
26404     A7 FA 01 FB | 	rdlong	result1, fp
26408     04 4E 85 F1 | 	sub	fp, #4
2640c     FD FA C9 FA | 	rdbyte	result1, result1 wz
26410     2C 00 90 AD |  if_e	jmp	#LR__4040
26414     04 4E 05 F1 | 	add	fp, #4
26418     A7 FA 01 FB | 	rdlong	result1, fp
2641c     04 4E 85 F1 | 	sub	fp, #4
26420     FD FA C1 FA | 	rdbyte	result1, result1
26424     2E FA 0D F2 | 	cmp	result1, #46 wz
26428     04 4E 05 A1 |  if_e	add	fp, #4
2642c     A7 1E 02 AB |  if_e	rdlong	local01, fp
26430     04 4E 85 A1 |  if_e	sub	fp, #4
26434     01 1E 06 A1 |  if_e	add	local01, #1
26438     0F 21 CA AA |  if_e	rdbyte	local02, local01 wz
2643c     18 00 90 5D |  if_ne	jmp	#LR__4041
26440                 | LR__4040
26440     18 4E 05 F1 | 	add	fp, #24
26444     A7 20 48 FC | 	wrbyte	#16, fp
26448     0C 4E 85 F1 | 	sub	fp, #12
2644c     A7 00 68 FC | 	wrlong	#0, fp
26450     0C 4E 85 F1 | 	sub	fp, #12
26454     24 00 90 FD | 	jmp	#LR__4042
26458                 | LR__4041
26458     04 4E 05 F1 | 	add	fp, #4
2645c     A7 12 02 FB | 	rdlong	arg01, fp
26460     0C 4E 05 F1 | 	add	fp, #12
26464     A7 14 02 F6 | 	mov	arg02, fp
26468     10 4E 85 F1 | 	sub	fp, #16
2646c     AC EB BF FD | 	call	#_fatfs_cc_f_stat
26470     0C 4E 05 F1 | 	add	fp, #12
26474     A7 FA 61 FC | 	wrlong	result1, fp
26478     0C 4E 85 F1 | 	sub	fp, #12
2647c                 | LR__4042
2647c     0C 4E 05 F1 | 	add	fp, #12
26480     A7 20 0A FB | 	rdlong	local02, fp wz
26484     0C 4E 85 F1 | 	sub	fp, #12
26488     14 00 90 AD |  if_e	jmp	#LR__4043
2648c                 | '         return _set_dos_error(r);
2648c     0C 4E 05 F1 | 	add	fp, #12
26490     A7 12 02 FB | 	rdlong	arg01, fp
26494     0C 4E 85 F1 | 	sub	fp, #12
26498     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0838
2649c     14 01 90 FD | 	jmp	#LR__4044
264a0                 | LR__4043
264a0     2C 4F 05 F1 | 	add	fp, #300
264a4     A7 48 6A FC | 	wrlong	#292, fp
264a8     14 4F 85 F1 | 	sub	fp, #276
264ac     A7 22 C2 FA | 	rdbyte	local03, fp
264b0     18 4E 85 F1 | 	sub	fp, #24
264b4     01 22 CE F7 | 	test	local03, #1 wz
264b8     2C 4F 05 A1 |  if_e	add	fp, #300
264bc     A7 22 02 AB |  if_e	rdlong	local03, fp
264c0     92 22 46 A5 |  if_e	or	local03, #146
264c4     A7 22 62 AC |  if_e	wrlong	local03, fp
264c8     2C 4F 85 A1 |  if_e	sub	fp, #300
264cc     18 4E 05 F1 | 	add	fp, #24
264d0     A7 22 C2 FA | 	rdbyte	local03, fp
264d4     18 4E 85 F1 | 	sub	fp, #24
264d8     10 22 CE F7 | 	test	local03, #16 wz
264dc     2C 4F 05 51 |  if_ne	add	fp, #300
264e0     A7 22 02 5B |  if_ne	rdlong	local03, fp
264e4     08 00 00 5F 
264e8     49 22 46 55 |  if_ne	or	local03, ##4169
264ec     A7 22 62 5C |  if_ne	wrlong	local03, fp
264f0     2C 4F 85 51 |  if_ne	sub	fp, #300
264f4     08 4E 05 F1 | 	add	fp, #8
264f8     A7 22 02 FB | 	rdlong	local03, fp
264fc     24 4F 05 F1 | 	add	fp, #292
26500     A7 20 02 FB | 	rdlong	local02, fp
26504     08 22 06 F1 | 	add	local03, #8
26508     11 21 62 FC | 	wrlong	local02, local03
2650c     24 4F 85 F1 | 	sub	fp, #292
26510     A7 22 02 FB | 	rdlong	local03, fp
26514     0C 22 06 F1 | 	add	local03, #12
26518     11 03 68 FC | 	wrlong	#1, local03
2651c     A7 22 02 FB | 	rdlong	local03, fp
26520     08 4E 05 F1 | 	add	fp, #8
26524     A7 20 02 FB | 	rdlong	local02, fp
26528     18 22 06 F1 | 	add	local03, #24
2652c     11 21 62 FC | 	wrlong	local02, local03
26530     08 4E 85 F1 | 	sub	fp, #8
26534     A7 22 02 FB | 	rdlong	local03, fp
26538     1C 22 06 F1 | 	add	local03, #28
2653c     01 00 80 FF 
26540     11 01 68 FC | 	wrlong	##512, local03
26544     A7 20 02 FB | 	rdlong	local02, fp
26548     10 23 02 F6 | 	mov	local03, local02
2654c     18 20 06 F1 | 	add	local02, #24
26550     10 21 02 FB | 	rdlong	local02, local02
26554     FF 21 06 F1 | 	add	local02, #511
26558     10 21 52 F6 | 	abs	local02, local02 wc
2655c     09 20 46 F0 | 	shr	local02, #9
26560     10 21 82 F6 | 	negc	local02, local02
26564     20 22 06 F1 | 	add	local03, #32
26568     11 21 62 FC | 	wrlong	local02, local03
2656c     A7 20 02 FB | 	rdlong	local02, fp
26570     10 23 02 F6 | 	mov	local03, local02
26574     10 1F 02 F6 | 	mov	local01, local02
26578     0C 4E 05 F1 | 	add	fp, #12
2657c     A7 12 E2 FA | 	rdword	arg01, fp
26580     02 4E 05 F1 | 	add	fp, #2
26584     A7 14 E2 FA | 	rdword	arg02, fp
26588     16 4E 85 F1 | 	sub	fp, #22
2658c     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0836
26590     2C 1E 06 F1 | 	add	local01, #44
26594     0F FB 61 FC | 	wrlong	result1, local01
26598     28 20 06 F1 | 	add	local02, #40
2659c     10 FB 61 FC | 	wrlong	result1, local02
265a0     24 22 06 F1 | 	add	local03, #36
265a4     11 FB 61 FC | 	wrlong	result1, local03
265a8                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
265a8                 | '     }
265a8                 | '     buf->st_mode = mode;
265a8                 | '     buf->st_nlink = 1;
265a8                 | '     buf->st_size = finfo.fsize;
265a8                 | '     buf->st_blksize = 512;
265a8                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
265a8                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
265a8                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
265a8                 | '     return r;
265a8     0C 4E 05 F1 | 	add	fp, #12
265ac     A7 FA 01 FB | 	rdlong	result1, fp
265b0     0C 4E 85 F1 | 	sub	fp, #12
265b4                 | LR__4044
265b4     A7 F0 03 F6 | 	mov	ptra, fp
265b8     B2 00 A0 FD | 	call	#popregs_
265bc                 | _fatfs_cc_v_stat_ret
265bc     2D 00 64 FD | 	ret
265c0                 | 
265c0                 | _fatfs_cc_v_read
265c0     00 4A 05 F6 | 	mov	COUNT_, #0
265c4     A8 00 A0 FD | 	call	#pushregs_
265c8     1C F0 07 F1 | 	add	ptra, #28
265cc     04 4E 05 F1 | 	add	fp, #4
265d0     A7 12 62 FC | 	wrlong	arg01, fp
265d4     04 4E 05 F1 | 	add	fp, #4
265d8     A7 14 62 FC | 	wrlong	arg02, fp
265dc     04 4E 05 F1 | 	add	fp, #4
265e0     A7 16 62 FC | 	wrlong	arg03, fp
265e4     08 4E 85 F1 | 	sub	fp, #8
265e8     A7 12 02 FB | 	rdlong	arg01, fp
265ec     09 13 0A FB | 	rdlong	arg01, arg01 wz
265f0     0C 4E 05 F1 | 	add	fp, #12
265f4     A7 12 62 FC | 	wrlong	arg01, fp
265f8     10 4E 85 F1 | 	sub	fp, #16
265fc                 | '         return _seterror( 5 );
265fc     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
26600     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
26604     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
26608     01 FA 65 A6 |  if_e	neg	result1, #1
2660c     B8 00 90 AD |  if_e	jmp	#LR__4052
26610     10 4E 05 F1 | 	add	fp, #16
26614     A7 12 02 FB | 	rdlong	arg01, fp
26618     02 00 00 FF 
2661c     14 12 06 F1 | 	add	arg01, ##1044
26620     08 4E 85 F1 | 	sub	fp, #8
26624     A7 14 02 FB | 	rdlong	arg02, fp
26628     04 4E 05 F1 | 	add	fp, #4
2662c     A7 16 02 FB | 	rdlong	arg03, fp
26630     0C 4E 05 F1 | 	add	fp, #12
26634     A7 18 02 F6 | 	mov	arg04, fp
26638     18 4E 85 F1 | 	sub	fp, #24
2663c     C4 CE BF FD | 	call	#_fatfs_cc_f_read
26640     14 4E 05 F1 | 	add	fp, #20
26644     A7 FA 61 FC | 	wrlong	result1, fp
26648     14 4E 85 F1 | 	sub	fp, #20
2664c     00 FA 0D F2 | 	cmp	result1, #0 wz
26650     34 00 90 AD |  if_e	jmp	#LR__4050
26654     04 4E 05 F1 | 	add	fp, #4
26658     A7 18 02 FB | 	rdlong	arg04, fp
2665c     0C 17 02 F6 | 	mov	arg03, arg04
26660     08 18 06 F1 | 	add	arg04, #8
26664     0C 19 02 FB | 	rdlong	arg04, arg04
26668     20 18 46 F5 | 	or	arg04, #32
2666c     08 16 06 F1 | 	add	arg03, #8
26670     0B 19 62 FC | 	wrlong	arg04, arg03
26674                 | '         fil->state |=  (0x20) ;
26674                 | '         return _set_dos_error(r);
26674     10 4E 05 F1 | 	add	fp, #16
26678     A7 12 02 FB | 	rdlong	arg01, fp
2667c     14 4E 85 F1 | 	sub	fp, #20
26680     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0838
26684     40 00 90 FD | 	jmp	#LR__4052
26688                 | LR__4050
26688     18 4E 05 F1 | 	add	fp, #24
2668c     A7 FA 09 FB | 	rdlong	result1, fp wz
26690     18 4E 85 F1 | 	sub	fp, #24
26694     24 00 90 5D |  if_ne	jmp	#LR__4051
26698     04 4E 05 F1 | 	add	fp, #4
2669c     A7 FA 01 FB | 	rdlong	result1, fp
266a0     FD 18 02 F6 | 	mov	arg04, result1
266a4     04 4E 85 F1 | 	sub	fp, #4
266a8     08 FA 05 F1 | 	add	result1, #8
266ac     FD FA 01 FB | 	rdlong	result1, result1
266b0     10 FA 45 F5 | 	or	result1, #16
266b4     08 18 06 F1 | 	add	arg04, #8
266b8     0C FB 61 FC | 	wrlong	result1, arg04
266bc                 | LR__4051
266bc                 | '         fil->state |=  (0x10) ;
266bc                 | '     }
266bc                 | '     return x;
266bc     18 4E 05 F1 | 	add	fp, #24
266c0     A7 FA 01 FB | 	rdlong	result1, fp
266c4     18 4E 85 F1 | 	sub	fp, #24
266c8                 | LR__4052
266c8     A7 F0 03 F6 | 	mov	ptra, fp
266cc     B2 00 A0 FD | 	call	#popregs_
266d0                 | _fatfs_cc_v_read_ret
266d0     2D 00 64 FD | 	ret
266d4                 | 
266d4                 | _fatfs_cc_v_write
266d4     00 4A 05 F6 | 	mov	COUNT_, #0
266d8     A8 00 A0 FD | 	call	#pushregs_
266dc     1C F0 07 F1 | 	add	ptra, #28
266e0     04 4E 05 F1 | 	add	fp, #4
266e4     A7 12 62 FC | 	wrlong	arg01, fp
266e8     04 4E 05 F1 | 	add	fp, #4
266ec     A7 14 62 FC | 	wrlong	arg02, fp
266f0     04 4E 05 F1 | 	add	fp, #4
266f4     A7 16 62 FC | 	wrlong	arg03, fp
266f8     08 4E 85 F1 | 	sub	fp, #8
266fc     A7 12 02 FB | 	rdlong	arg01, fp
26700     09 13 0A FB | 	rdlong	arg01, arg01 wz
26704     0C 4E 05 F1 | 	add	fp, #12
26708     A7 12 62 FC | 	wrlong	arg01, fp
2670c     10 4E 85 F1 | 	sub	fp, #16
26710                 | '         return _seterror( 5 );
26710     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
26714     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
26718     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
2671c     01 FA 65 A6 |  if_e	neg	result1, #1
26720     84 00 90 AD |  if_e	jmp	#LR__4061
26724     10 4E 05 F1 | 	add	fp, #16
26728     A7 12 02 FB | 	rdlong	arg01, fp
2672c     02 00 00 FF 
26730     14 12 06 F1 | 	add	arg01, ##1044
26734     08 4E 85 F1 | 	sub	fp, #8
26738     A7 14 02 FB | 	rdlong	arg02, fp
2673c     04 4E 05 F1 | 	add	fp, #4
26740     A7 16 02 FB | 	rdlong	arg03, fp
26744     0C 4E 05 F1 | 	add	fp, #12
26748     A7 18 02 F6 | 	mov	arg04, fp
2674c     18 4E 85 F1 | 	sub	fp, #24
26750     4C D4 BF FD | 	call	#_fatfs_cc_f_write
26754     14 4E 05 F1 | 	add	fp, #20
26758     A7 FA 61 FC | 	wrlong	result1, fp
2675c     14 4E 85 F1 | 	sub	fp, #20
26760     00 FA 0D F2 | 	cmp	result1, #0 wz
26764     34 00 90 AD |  if_e	jmp	#LR__4060
26768     04 4E 05 F1 | 	add	fp, #4
2676c     A7 18 02 FB | 	rdlong	arg04, fp
26770     0C 17 02 F6 | 	mov	arg03, arg04
26774     08 18 06 F1 | 	add	arg04, #8
26778     0C 19 02 FB | 	rdlong	arg04, arg04
2677c     20 18 46 F5 | 	or	arg04, #32
26780     08 16 06 F1 | 	add	arg03, #8
26784     0B 19 62 FC | 	wrlong	arg04, arg03
26788                 | '         fil->state |=  (0x20) ;
26788                 | '         return _set_dos_error(r);
26788     10 4E 05 F1 | 	add	fp, #16
2678c     A7 12 02 FB | 	rdlong	arg01, fp
26790     14 4E 85 F1 | 	sub	fp, #20
26794     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0838
26798     0C 00 90 FD | 	jmp	#LR__4061
2679c                 | LR__4060
2679c                 | '     }
2679c                 | '     return x;
2679c     18 4E 05 F1 | 	add	fp, #24
267a0     A7 FA 01 FB | 	rdlong	result1, fp
267a4     18 4E 85 F1 | 	sub	fp, #24
267a8                 | LR__4061
267a8     A7 F0 03 F6 | 	mov	ptra, fp
267ac     B2 00 A0 FD | 	call	#popregs_
267b0                 | _fatfs_cc_v_write_ret
267b0     2D 00 64 FD | 	ret
267b4                 | 
267b4                 | _fatfs_cc_v_lseek
267b4     04 4A 05 F6 | 	mov	COUNT_, #4
267b8     A8 00 A0 FD | 	call	#pushregs_
267bc     0A 1F 02 F6 | 	mov	local01, arg02
267c0     0B 21 02 F6 | 	mov	local02, arg03
267c4     09 23 02 FB | 	rdlong	local03, arg01
267c8     02 00 00 FF 
267cc     14 22 0E F1 | 	add	local03, ##1044 wz
267d0                 | '         return _seterror( 5 );
267d0     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
267d4     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
267d8     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
267dc     01 FA 65 A6 |  if_e	neg	result1, #1
267e0     4C 00 90 AD |  if_e	jmp	#LR__4072
267e4     00 20 0E F2 | 	cmp	local02, #0 wz
267e8     24 00 90 AD |  if_e	jmp	#LR__4070
267ec     01 20 0E F2 | 	cmp	local02, #1 wz
267f0     14 22 06 A1 |  if_e	add	local03, #20
267f4     11 25 02 AB |  if_e	rdlong	local04, local03
267f8     14 22 86 A1 |  if_e	sub	local03, #20
267fc     12 1F 02 A1 |  if_e	add	local01, local04
26800     0C 22 06 51 |  if_ne	add	local03, #12
26804     11 25 02 5B |  if_ne	rdlong	local04, local03
26808     0C 22 86 51 |  if_ne	sub	local03, #12
2680c     12 1F 02 51 |  if_ne	add	local01, local04
26810                 | LR__4070
26810     0F 15 02 F6 | 	mov	arg02, local01
26814     11 13 02 F6 | 	mov	arg01, local03
26818     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
2681c     FD 12 0A F6 | 	mov	arg01, result1 wz
26820     08 00 90 AD |  if_e	jmp	#LR__4071
26824                 | '         return _set_dos_error(result);
26824     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0838
26828     04 00 90 FD | 	jmp	#LR__4072
2682c                 | LR__4071
2682c                 | '     }
2682c                 | '     return offset;
2682c     0F FB 01 F6 | 	mov	result1, local01
26830                 | LR__4072
26830     A7 F0 03 F6 | 	mov	ptra, fp
26834     B2 00 A0 FD | 	call	#popregs_
26838                 | _fatfs_cc_v_lseek_ret
26838     2D 00 64 FD | 	ret
2683c                 | 
2683c                 | _fatfs_cc_v_ioctl
2683c                 | ' {
2683c                 | '     return _seterror( 10 );
2683c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
26840     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
26844     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
26848     01 FA 65 F6 | 	neg	result1, #1
2684c                 | _fatfs_cc_v_ioctl_ret
2684c     2D 00 64 FD | 	ret
26850                 | 
26850                 | _fatfs_cc_v_mkdir
26850     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
26854     FD 12 02 F6 | 	mov	arg01, result1
26858                 | ' 
26858                 | '     r = f_mkdir(name);
26858                 | '     return _set_dos_error(r);
26858     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0838
2685c                 | _fatfs_cc_v_mkdir_ret
2685c     2D 00 64 FD | 	ret
26860                 | 
26860                 | _fatfs_cc_v_remove
26860     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
26864     FD 12 02 F6 | 	mov	arg01, result1
26868                 | ' 
26868                 | '     r = f_unlink(name);
26868                 | '     return _set_dos_error(r);
26868     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0838
2686c                 | _fatfs_cc_v_remove_ret
2686c     2D 00 64 FD | 	ret
26870                 | 
26870                 | _fatfs_cc_v_rmdir
26870     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
26874     FD 12 02 F6 | 	mov	arg01, result1
26878                 | ' 
26878                 | '     r = f_unlink(name);
26878                 | '     return _set_dos_error(r);
26878     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0838
2687c                 | _fatfs_cc_v_rmdir_ret
2687c     2D 00 64 FD | 	ret
26880                 | 
26880                 | _fatfs_cc_v_rename
26880     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
26884     FD 12 02 F6 | 	mov	arg01, result1
26888                 | '     return _set_dos_error(r);
26888     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0838
2688c                 | _fatfs_cc_v_rename_ret
2688c     2D 00 64 FD | 	ret
26890                 | 
26890                 | _fatfs_cc_v_open
26890     07 4A 05 F6 | 	mov	COUNT_, #7
26894     A8 00 A0 FD | 	call	#pushregs_
26898     09 1F 02 F6 | 	mov	local01, arg01
2689c     0A 21 02 F6 | 	mov	local02, arg02
268a0     0B 23 02 F6 | 	mov	local03, arg03
268a4     03 00 00 FF 
268a8     3C 12 06 F6 | 	mov	arg01, ##1596
268ac                 | '     return _gc_alloc(size);
268ac     10 14 06 F6 | 	mov	arg02, #16
268b0     88 59 BF FD | 	call	#__system___gc_doalloc
268b4     FD 24 0A F6 | 	mov	local04, result1 wz
268b8                 | '       return _seterror( 7 );
268b8     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
268bc     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
268c0     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
268c4     01 FA 65 A6 |  if_e	neg	result1, #1
268c8     98 00 90 AD |  if_e	jmp	#LR__4086
268cc     12 13 02 F6 | 	mov	arg01, local04
268d0     00 14 06 F6 | 	mov	arg02, #0
268d4     03 00 00 FF 
268d8     3C 16 06 F6 | 	mov	arg03, ##1596
268dc     98 00 A0 FD | 	call	#\builtin_bytefill_
268e0                 | '   switch (flags & 3) {
268e0     11 27 02 F6 | 	mov	local05, local03
268e4     03 26 0E F5 | 	and	local05, #3 wz
268e8     0C 00 90 AD |  if_e	jmp	#LR__4080
268ec     01 26 0E F2 | 	cmp	local05, #1 wz
268f0     0C 00 90 AD |  if_e	jmp	#LR__4081
268f4     10 00 90 FD | 	jmp	#LR__4082
268f8                 | LR__4080
268f8     01 28 06 F6 | 	mov	local06, #1
268fc                 | '       fs_flags =  0x01 ;
268fc                 | '       break;
268fc     0C 00 90 FD | 	jmp	#LR__4083
26900                 | LR__4081
26900     02 28 06 F6 | 	mov	local06, #2
26904                 | '       fs_flags =  0x02 ;
26904                 | '       break;
26904     04 00 90 FD | 	jmp	#LR__4083
26908                 | LR__4082
26908     03 28 06 F6 | 	mov	local06, #3
2690c                 | '       fs_flags =  0x01  |  0x02 ;
2690c                 | '       break;
2690c                 | LR__4083
2690c     08 22 CE F7 | 	test	local03, #8 wz
26910     18 28 46 55 |  if_ne	or	local06, #24
26914     08 00 90 5D |  if_ne	jmp	#LR__4084
26918     20 22 CE F7 | 	test	local03, #32 wz
2691c     30 28 46 55 |  if_ne	or	local06, #48
26920                 | LR__4084
26920     02 00 00 FF 
26924     14 24 06 F1 | 	add	local04, ##1044
26928     12 13 02 F6 | 	mov	arg01, local04
2692c     02 00 00 FF 
26930     14 24 86 F1 | 	sub	local04, ##1044
26934     10 15 02 F6 | 	mov	arg02, local02
26938     14 17 02 F6 | 	mov	arg03, local06
2693c     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
26940     FD 2A 0A F6 | 	mov	local07, result1 wz
26944     14 00 90 AD |  if_e	jmp	#LR__4085
26948     12 13 02 F6 | 	mov	arg01, local04
2694c                 | '     return _gc_free(ptr);
2694c     F8 59 BF FD | 	call	#__system___gc_free
26950                 | '     free(f);
26950                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
26950                 | '     return _set_dos_error(r);
26950     15 13 02 F6 | 	mov	arg01, local07
26954     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0838
26958     08 00 90 FD | 	jmp	#LR__4086
2695c                 | LR__4085
2695c     0F 25 62 FC | 	wrlong	local04, local01
26960                 | '   }
26960                 | '   fil->vfsdata = f;
26960                 | '   return 0;
26960     00 FA 05 F6 | 	mov	result1, #0
26964                 | LR__4086
26964     A7 F0 03 F6 | 	mov	ptra, fp
26968     B2 00 A0 FD | 	call	#popregs_
2696c                 | _fatfs_cc_v_open_ret
2696c     2D 00 64 FD | 	ret
26970                 | 
26970                 | _fatfs_cc_v_flush
26970     09 13 02 FB | 	rdlong	arg01, arg01
26974     02 00 00 FF 
26978     14 12 0E F1 | 	add	arg01, ##1044 wz
2697c                 | '         return _seterror( 5 );
2697c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
26980     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
26984     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
26988     01 FA 65 A6 |  if_e	neg	result1, #1
2698c     0C 00 90 AD |  if_e	jmp	#LR__4090
26990     00 DA BF FD | 	call	#_fatfs_cc_f_sync
26994     FD 12 02 F6 | 	mov	arg01, result1
26998                 | '     }
26998                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
26998                 | '     result = f_sync(f);
26998                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
26998                 | '     return _set_dos_error(result);
26998     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0838
2699c                 | LR__4090
2699c                 | _fatfs_cc_v_flush_ret
2699c     2D 00 64 FD | 	ret
269a0                 | 
269a0                 | _fatfs_cc_v_init
269a0                 | ' {
269a0                 | '     return 0;
269a0     00 FA 05 F6 | 	mov	result1, #0
269a4                 | _fatfs_cc_v_init_ret
269a4     2D 00 64 FD | 	ret
269a8                 | 
269a8                 | _fatfs_cc_v_deinit
269a8     3C 01 00 FF 
269ac     10 15 06 F6 | 	mov	arg02, ##@LR__4286
269b0     00 12 06 F6 | 	mov	arg01, #0
269b4     00 16 06 F6 | 	mov	arg03, #0
269b8     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
269bc     01 00 00 FF 
269c0     08 E4 05 F1 | 	add	objptr, ##520
269c4     F2 12 02 FB | 	rdlong	arg01, objptr
269c8     04 E4 05 F1 | 	add	objptr, #4
269cc     F2 14 02 FB | 	rdlong	arg02, objptr
269d0     01 00 00 FF 
269d4     0C E4 85 F1 | 	sub	objptr, ##524
269d8     38 41 BF FD | 	call	#__system___freepins
269dc                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
269dc                 | '     _freepins(f_pinmask);
269dc                 | '     return 0;
269dc     00 FA 05 F6 | 	mov	result1, #0
269e0                 | _fatfs_cc_v_deinit_ret
269e0     2D 00 64 FD | 	ret
269e4                 | 
269e4                 | _fatfs_cc_get_vfs
269e4     01 4A 05 F6 | 	mov	COUNT_, #1
269e8     A8 00 A0 FD | 	call	#pushregs_
269ec     09 1F 02 F6 | 	mov	local01, arg01
269f0     50 12 06 F6 | 	mov	arg01, #80
269f4     14 58 BF FD | 	call	#__system___gc_alloc_managed
269f8     FD 12 02 F6 | 	mov	arg01, result1
269fc     F2 FA 01 F6 | 	mov	result1, objptr
26a00     00 60 03 FF 
26a04     00 FA 45 F5 | 	or	result1, ##113246208
26a08     09 FB 61 FC | 	wrlong	result1, arg01
26a0c     F2 FA 01 F6 | 	mov	result1, objptr
26a10     00 68 03 FF 
26a14     00 FA 45 F5 | 	or	result1, ##114294784
26a18     04 12 06 F1 | 	add	arg01, #4
26a1c     09 FB 61 FC | 	wrlong	result1, arg01
26a20     F2 FA 01 F6 | 	mov	result1, objptr
26a24     00 70 03 FF 
26a28     00 FA 45 F5 | 	or	result1, ##115343360
26a2c     04 12 06 F1 | 	add	arg01, #4
26a30     09 FB 61 FC | 	wrlong	result1, arg01
26a34     F2 FA 01 F6 | 	mov	result1, objptr
26a38     00 78 03 FF 
26a3c     00 FA 45 F5 | 	or	result1, ##116391936
26a40     04 12 06 F1 | 	add	arg01, #4
26a44     09 FB 61 FC | 	wrlong	result1, arg01
26a48     F2 FA 01 F6 | 	mov	result1, objptr
26a4c     58 FA 25 F4 | 	bith	result1, #88
26a50     04 12 06 F1 | 	add	arg01, #4
26a54     09 FB 61 FC | 	wrlong	result1, arg01
26a58     04 12 06 F1 | 	add	arg01, #4
26a5c     09 01 68 FC | 	wrlong	#0, arg01
26a60     04 12 06 F1 | 	add	arg01, #4
26a64     09 1F 62 FC | 	wrlong	local01, arg01
26a68     04 12 06 F1 | 	add	arg01, #4
26a6c     09 01 68 FC | 	wrlong	#0, arg01
26a70     F2 FA 01 F6 | 	mov	result1, objptr
26a74     00 88 03 FF 
26a78     00 FA 45 F5 | 	or	result1, ##118489088
26a7c     04 12 06 F1 | 	add	arg01, #4
26a80     09 FB 61 FC | 	wrlong	result1, arg01
26a84     F2 FA 01 F6 | 	mov	result1, objptr
26a88     00 90 03 FF 
26a8c     00 FA 45 F5 | 	or	result1, ##119537664
26a90     04 12 06 F1 | 	add	arg01, #4
26a94     09 FB 61 FC | 	wrlong	result1, arg01
26a98     F2 FA 01 F6 | 	mov	result1, objptr
26a9c     00 98 03 FF 
26aa0     00 FA 45 F5 | 	or	result1, ##120586240
26aa4     04 12 06 F1 | 	add	arg01, #4
26aa8     09 FB 61 FC | 	wrlong	result1, arg01
26aac     F2 FA 01 F6 | 	mov	result1, objptr
26ab0     00 A0 03 FF 
26ab4     00 FA 45 F5 | 	or	result1, ##121634816
26ab8     04 12 06 F1 | 	add	arg01, #4
26abc     09 FB 61 FC | 	wrlong	result1, arg01
26ac0     F2 FA 01 F6 | 	mov	result1, objptr
26ac4     00 A8 03 FF 
26ac8     00 FA 45 F5 | 	or	result1, ##122683392
26acc     04 12 06 F1 | 	add	arg01, #4
26ad0     09 FB 61 FC | 	wrlong	result1, arg01
26ad4     F2 FA 01 F6 | 	mov	result1, objptr
26ad8     00 B0 03 FF 
26adc     00 FA 45 F5 | 	or	result1, ##123731968
26ae0     04 12 06 F1 | 	add	arg01, #4
26ae4     09 FB 61 FC | 	wrlong	result1, arg01
26ae8     F2 FA 01 F6 | 	mov	result1, objptr
26aec     00 B8 03 FF 
26af0     00 FA 45 F5 | 	or	result1, ##124780544
26af4     04 12 06 F1 | 	add	arg01, #4
26af8     09 FB 61 FC | 	wrlong	result1, arg01
26afc     F2 FA 01 F6 | 	mov	result1, objptr
26b00     77 FA 25 F4 | 	bith	result1, #119
26b04     04 12 06 F1 | 	add	arg01, #4
26b08     09 FB 61 FC | 	wrlong	result1, arg01
26b0c     F2 FA 01 F6 | 	mov	result1, objptr
26b10     00 C8 03 FF 
26b14     00 FA 45 F5 | 	or	result1, ##126877696
26b18     04 12 06 F1 | 	add	arg01, #4
26b1c     09 FB 61 FC | 	wrlong	result1, arg01
26b20     F2 FA 01 F6 | 	mov	result1, objptr
26b24     00 D0 03 FF 
26b28     00 FA 45 F5 | 	or	result1, ##127926272
26b2c     04 12 06 F1 | 	add	arg01, #4
26b30     09 FB 61 FC | 	wrlong	result1, arg01
26b34     F2 FA 01 F6 | 	mov	result1, objptr
26b38     00 D8 03 FF 
26b3c     00 FA 45 F5 | 	or	result1, ##128974848
26b40     04 12 06 F1 | 	add	arg01, #4
26b44     09 FB 61 FC | 	wrlong	result1, arg01
26b48     F2 FA 01 F6 | 	mov	result1, objptr
26b4c     96 FA 25 F4 | 	bith	result1, #150
26b50     04 12 06 F1 | 	add	arg01, #4
26b54     09 FB 61 FC | 	wrlong	result1, arg01
26b58     4C 12 86 F1 | 	sub	arg01, #76
26b5c                 | ' 
26b5c                 | '     v->close = &v_close;
26b5c                 | '     v->read = &v_read;
26b5c                 | '     v->write = &v_write;
26b5c                 | '     v->lseek = &v_lseek;
26b5c                 | '     v->ioctl = &v_ioctl;
26b5c                 | '     v->flush = 0;
26b5c                 | '     v->vfs_data = ptr;
26b5c                 | '     v->reserved = 0;
26b5c                 | ' 
26b5c                 | '     v->open = &v_open;
26b5c                 | '     v->creat = &v_creat;
26b5c                 | '     v->opendir = &v_opendir;
26b5c                 | '     v->closedir = &v_closedir;
26b5c                 | '     v->readdir = &v_readdir;
26b5c                 | '     v->stat = &v_stat;
26b5c                 | ' 
26b5c                 | '     v->mkdir = &v_mkdir;
26b5c                 | '     v->rmdir = &v_rmdir;
26b5c                 | ' 
26b5c                 | '     v->remove = &v_remove;
26b5c                 | '     v->rename = &v_rename;
26b5c                 | ' 
26b5c                 | '     v->init = &v_init;
26b5c                 | '     v->deinit = &v_deinit;
26b5c                 | ' 
26b5c                 | '     return v;
26b5c     09 FB 01 F6 | 	mov	result1, arg01
26b60     A7 F0 03 F6 | 	mov	ptra, fp
26b64     B2 00 A0 FD | 	call	#popregs_
26b68                 | _fatfs_cc_get_vfs_ret
26b68     2D 00 64 FD | 	ret
26b6c                 | 
26b6c                 | _fatfs_cc_xmit_mmc_0985
26b6c     01 00 00 FF 
26b70     10 E4 05 F1 | 	add	objptr, ##528
26b74     F2 00 02 FB | 	rdlong	_var01, objptr
26b78     08 E4 05 F1 | 	add	objptr, #8
26b7c     F2 02 02 FB | 	rdlong	_var02, objptr
26b80     01 00 00 FF 
26b84     18 E4 85 F1 | 	sub	objptr, ##536
26b88     40 02 62 FD | 	dirl	_var02
26b8c     28 02 64 FD | 	setq	#1
26b90     09 05 02 FB | 	rdlong	_var03, arg01
26b94     69 04 62 FD | 	rev	_var03
26b98     1B 04 FE F9 | 	movbyts	_var03, #27
26b9c     01 05 22 FC | 	wypin	_var03, _var02
26ba0     0A 05 02 F6 | 	mov	_var03, arg02
26ba4     02 14 4E F0 | 	shr	arg02, #2 wz
26ba8     03 04 66 F0 | 	shl	_var03, #3
26bac     00 05 22 FC | 	wypin	_var03, _var01
26bb0     41 02 62 FD | 	dirh	_var02
26bb4     08 12 06 F1 | 	add	arg01, #8
26bb8     69 06 62 FD | 	rev	_var04
26bbc     1B 06 FE F9 | 	movbyts	_var04, #27
26bc0                 | LR__4100
26bc0     01 07 22 5C |  if_ne	wypin	_var04, _var02
26bc4     09 07 02 5B |  if_ne	rdlong	_var04, arg01
26bc8     04 12 06 51 |  if_ne	add	arg01, #4
26bcc     69 06 62 5D |  if_ne	rev	_var04
26bd0     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
26bd4                 | LR__4101
26bd4     40 02 72 5D |  if_ne	testp	_var02 wc
26bd8     F8 FF 9F 1D |  if_a	jmp	#LR__4101
26bdc     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__4100
26be0                 | LR__4102
26be0     40 00 72 FD | 	testp	_var01 wc
26be4     F8 FF 9F 3D |  if_ae	jmp	#LR__4102
26be8     40 02 62 FD | 	dirl	_var02
26bec     FF FF FF FF 
26bf0     01 FF 2B FC | 	wypin	##-1, _var02
26bf4     41 02 62 FD | 	dirh	_var02
26bf8                 | _fatfs_cc_xmit_mmc_0985_ret
26bf8     2D 00 64 FD | 	ret
26bfc                 | 
26bfc                 | _fatfs_cc_rcvr_mmc_0992
26bfc     01 00 00 FF 
26c00     10 E4 05 F1 | 	add	objptr, ##528
26c04     F2 00 02 FB | 	rdlong	_var01, objptr
26c08     0C E4 05 F1 | 	add	objptr, #12
26c0c     F2 02 02 FB | 	rdlong	_var02, objptr
26c10     01 00 00 FF 
26c14     1C E4 85 F1 | 	sub	objptr, ##540
26c18     01 03 08 FC | 	akpin	_var02
26c1c     0A 05 0A F6 | 	mov	_var03, arg02 wz
26c20     02 04 4E F0 | 	shr	_var03, #2 wz
26c24     30 00 90 AD |  if_e	jmp	#LR__4112
26c28     02 07 02 F6 | 	mov	_var04, _var03
26c2c     05 06 66 F0 | 	shl	_var04, #5
26c30     00 07 22 FC | 	wypin	_var04, _var01
26c34     01 7F 18 FC | 	wxpin	#63, _var02
26c38                 | LR__4110
26c38                 | LR__4111
26c38     40 02 72 FD | 	testp	_var02 wc
26c3c     F8 FF 9F 3D |  if_ae	jmp	#LR__4111
26c40     01 07 8A FA | 	rdpin	_var04, _var02
26c44     69 06 62 FD | 	rev	_var04
26c48     1B 06 FE F9 | 	movbyts	_var04, #27
26c4c     09 07 62 FC | 	wrlong	_var04, arg01
26c50     04 12 06 F1 | 	add	arg01, #4
26c54     F8 05 6E FB | 	djnz	_var03, #LR__4110
26c58                 | LR__4112
26c58     03 14 0E F5 | 	and	arg02, #3 wz
26c5c     24 00 90 AD |  if_e	jmp	#LR__4115
26c60     01 4F 18 FC | 	wxpin	#39, _var02
26c64                 | LR__4113
26c64     00 11 28 FC | 	wypin	#8, _var01
26c68                 | LR__4114
26c68     40 02 72 FD | 	testp	_var02 wc
26c6c     F8 FF 9F 3D |  if_ae	jmp	#LR__4114
26c70     01 07 8A FA | 	rdpin	_var04, _var02
26c74     69 06 62 FD | 	rev	_var04
26c78     09 07 42 FC | 	wrbyte	_var04, arg01
26c7c     01 12 06 F1 | 	add	arg01, #1
26c80     F8 15 6E FB | 	djnz	arg02, #LR__4113
26c84                 | LR__4115
26c84                 | _fatfs_cc_rcvr_mmc_0992_ret
26c84     2D 00 64 FD | 	ret
26c88                 | 
26c88                 | _fatfs_cc_wait_ready_0996
26c88     01 4A 05 F6 | 	mov	COUNT_, #1
26c8c     A8 00 A0 FD | 	call	#pushregs_
26c90     10 F0 07 F1 | 	add	ptra, #16
26c94     1A FA 61 FD | 	getct	result1
26c98     08 4E 05 F1 | 	add	fp, #8
26c9c     A7 FA 61 FC | 	wrlong	result1, fp
26ca0     14 1E 06 FB | 	rdlong	local01, #20
26ca4     01 1E 46 F0 | 	shr	local01, #1
26ca8     04 4E 05 F1 | 	add	fp, #4
26cac     A7 1E 62 FC | 	wrlong	local01, fp
26cb0     0C 4E 85 F1 | 	sub	fp, #12
26cb4                 | ' {
26cb4                 | ' 	BYTE d;
26cb4                 | ' 	UINT tmr, tmout;
26cb4                 | ' 
26cb4                 | ' 	tmr = _cnt();
26cb4                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
26cb4                 | ' 	for(;;) {
26cb4                 | LR__4120
26cb4     04 4E 05 F1 | 	add	fp, #4
26cb8     A7 12 02 F6 | 	mov	arg01, fp
26cbc     04 4E 85 F1 | 	sub	fp, #4
26cc0     01 14 06 F6 | 	mov	arg02, #1
26cc4     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_0992
26cc8     04 4E 05 F1 | 	add	fp, #4
26ccc     A7 1E C2 FA | 	rdbyte	local01, fp
26cd0     04 4E 85 F1 | 	sub	fp, #4
26cd4     FF 1E 0E F2 | 	cmp	local01, #255 wz
26cd8     01 FA 05 A6 |  if_e	mov	result1, #1
26cdc     28 00 90 AD |  if_e	jmp	#LR__4121
26ce0     1A FA 61 FD | 	getct	result1
26ce4     08 4E 05 F1 | 	add	fp, #8
26ce8     A7 1E 02 FB | 	rdlong	local01, fp
26cec     0F FB 81 F1 | 	sub	result1, local01
26cf0     04 4E 05 F1 | 	add	fp, #4
26cf4     A7 1E 02 FB | 	rdlong	local01, fp
26cf8     0C 4E 85 F1 | 	sub	fp, #12
26cfc     0F FB 11 F2 | 	cmp	result1, local01 wc
26d00     00 FA 05 36 |  if_ae	mov	result1, #0
26d04     AC FF 9F CD |  if_b	jmp	#LR__4120
26d08                 | LR__4121
26d08     A7 F0 03 F6 | 	mov	ptra, fp
26d0c     B2 00 A0 FD | 	call	#popregs_
26d10                 | _fatfs_cc_wait_ready_0996_ret
26d10     2D 00 64 FD | 	ret
26d14                 | 
26d14                 | _fatfs_cc_deselect_1002
26d14     00 4A 05 F6 | 	mov	COUNT_, #0
26d18     A8 00 A0 FD | 	call	#pushregs_
26d1c     14 F0 07 F1 | 	add	ptra, #20
26d20     01 00 00 FF 
26d24     14 E4 05 F1 | 	add	objptr, ##532
26d28     F2 14 02 FB | 	rdlong	arg02, objptr
26d2c     04 4E 05 F1 | 	add	fp, #4
26d30     A7 14 62 FC | 	wrlong	arg02, fp
26d34     04 E4 85 F1 | 	sub	objptr, #4
26d38     F2 14 02 FB | 	rdlong	arg02, objptr
26d3c     04 4E 05 F1 | 	add	fp, #4
26d40     A7 14 62 FC | 	wrlong	arg02, fp
26d44     08 E4 05 F1 | 	add	objptr, #8
26d48     F2 14 02 FB | 	rdlong	arg02, objptr
26d4c     04 4E 05 F1 | 	add	fp, #4
26d50     A7 14 62 FC | 	wrlong	arg02, fp
26d54     04 E4 05 F1 | 	add	objptr, #4
26d58     F2 14 02 FB | 	rdlong	arg02, objptr
26d5c     01 00 00 FF 
26d60     1C E4 85 F1 | 	sub	objptr, ##540
26d64     04 4E 05 F1 | 	add	fp, #4
26d68     A7 14 62 FC | 	wrlong	arg02, fp
26d6c     0C 4E 85 F1 | 	sub	fp, #12
26d70     A7 12 02 FB | 	rdlong	arg01, fp
26d74     04 4E 85 F1 | 	sub	fp, #4
26d78     59 12 62 FD | 	drvh	arg01
26d7c     1F 20 64 FD | 	waitx	#16
26d80     A7 12 02 F6 | 	mov	arg01, fp
26d84     01 14 06 F6 | 	mov	arg02, #1
26d88     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_0992
26d8c     A7 F0 03 F6 | 	mov	ptra, fp
26d90     B2 00 A0 FD | 	call	#popregs_
26d94                 | _fatfs_cc_deselect_1002_ret
26d94     2D 00 64 FD | 	ret
26d98                 | 
26d98                 | _fatfs_cc_select_1006
26d98     00 4A 05 F6 | 	mov	COUNT_, #0
26d9c     A8 00 A0 FD | 	call	#pushregs_
26da0     10 F0 07 F1 | 	add	ptra, #16
26da4     01 00 00 FF 
26da8     14 E4 05 F1 | 	add	objptr, ##532
26dac     F2 14 02 FB | 	rdlong	arg02, objptr
26db0     08 4E 05 F1 | 	add	fp, #8
26db4     A7 14 62 FC | 	wrlong	arg02, fp
26db8     08 E4 05 F1 | 	add	objptr, #8
26dbc     F2 12 02 FB | 	rdlong	arg01, objptr
26dc0     01 00 00 FF 
26dc4     1C E4 85 F1 | 	sub	objptr, ##540
26dc8     04 4E 05 F1 | 	add	fp, #4
26dcc     A7 12 62 FC | 	wrlong	arg01, fp
26dd0     50 12 62 FD | 	fltl	arg01
26dd4     04 4E 85 F1 | 	sub	fp, #4
26dd8     A7 12 02 FB | 	rdlong	arg01, fp
26ddc     58 12 62 FD | 	drvl	arg01
26de0     1F 20 64 FD | 	waitx	#16
26de4     04 4E 05 F1 | 	add	fp, #4
26de8     A7 12 02 FB | 	rdlong	arg01, fp
26dec     41 12 62 FD | 	dirh	arg01
26df0     08 4E 85 F1 | 	sub	fp, #8
26df4     A7 12 02 F6 | 	mov	arg01, fp
26df8     04 4E 85 F1 | 	sub	fp, #4
26dfc     01 14 06 F6 | 	mov	arg02, #1
26e00     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0992
26e04     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_0996
26e08     00 FA 0D F2 | 	cmp	result1, #0 wz
26e0c     01 FA 05 56 |  if_ne	mov	result1, #1
26e10     08 00 90 5D |  if_ne	jmp	#LR__4130
26e14     FC FE BF FD | 	call	#_fatfs_cc_deselect_1002
26e18                 | ' 
26e18                 | ' 	deselect();
26e18                 | ' 	return 0;
26e18     00 FA 05 F6 | 	mov	result1, #0
26e1c                 | LR__4130
26e1c     A7 F0 03 F6 | 	mov	ptra, fp
26e20     B2 00 A0 FD | 	call	#popregs_
26e24                 | _fatfs_cc_select_1006_ret
26e24     2D 00 64 FD | 	ret
26e28                 | 
26e28                 | _fatfs_cc_rcvr_datablock_1010
26e28     01 4A 05 F6 | 	mov	COUNT_, #1
26e2c     A8 00 A0 FD | 	call	#pushregs_
26e30     18 F0 07 F1 | 	add	ptra, #24
26e34     04 4E 05 F1 | 	add	fp, #4
26e38     A7 12 62 FC | 	wrlong	arg01, fp
26e3c     04 4E 05 F1 | 	add	fp, #4
26e40     A7 14 62 FC | 	wrlong	arg02, fp
26e44     1A FA 61 FD | 	getct	result1
26e48     08 4E 05 F1 | 	add	fp, #8
26e4c     A7 FA 61 FC | 	wrlong	result1, fp
26e50     14 1E 06 FB | 	rdlong	local01, #20
26e54     03 1E 46 F0 | 	shr	local01, #3
26e58     04 4E 05 F1 | 	add	fp, #4
26e5c     A7 1E 62 FC | 	wrlong	local01, fp
26e60     14 4E 85 F1 | 	sub	fp, #20
26e64                 | ' 	BYTE *buff,
26e64                 | ' 	UINT btr
26e64                 | ' )
26e64                 | ' {
26e64                 | ' 	BYTE d[2];
26e64                 | ' 	UINT tmr, tmout;
26e64                 | ' 
26e64                 | ' 	tmr = _cnt();
26e64                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
26e64                 | ' 	for(;;) {
26e64                 | LR__4140
26e64     0C 4E 05 F1 | 	add	fp, #12
26e68     A7 12 02 F6 | 	mov	arg01, fp
26e6c     0C 4E 85 F1 | 	sub	fp, #12
26e70     01 14 06 F6 | 	mov	arg02, #1
26e74     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0992
26e78     0C 4E 05 F1 | 	add	fp, #12
26e7c     A7 1E C2 FA | 	rdbyte	local01, fp
26e80     0C 4E 85 F1 | 	sub	fp, #12
26e84     FF 1E 0E F2 | 	cmp	local01, #255 wz
26e88     28 00 90 5D |  if_ne	jmp	#LR__4141
26e8c     1A FA 61 FD | 	getct	result1
26e90     FD 1E 02 F6 | 	mov	local01, result1
26e94     10 4E 05 F1 | 	add	fp, #16
26e98     A7 14 02 FB | 	rdlong	arg02, fp
26e9c     0A 1F 82 F1 | 	sub	local01, arg02
26ea0     04 4E 05 F1 | 	add	fp, #4
26ea4     A7 14 02 FB | 	rdlong	arg02, fp
26ea8     14 4E 85 F1 | 	sub	fp, #20
26eac     0A 1F 12 F2 | 	cmp	local01, arg02 wc
26eb0     B0 FF 9F CD |  if_b	jmp	#LR__4140
26eb4                 | LR__4141
26eb4     0C 4E 05 F1 | 	add	fp, #12
26eb8     A7 1E C2 FA | 	rdbyte	local01, fp
26ebc     0C 4E 85 F1 | 	sub	fp, #12
26ec0     FE 1E 0E F2 | 	cmp	local01, #254 wz
26ec4     00 FA 05 56 |  if_ne	mov	result1, #0
26ec8     30 00 90 5D |  if_ne	jmp	#LR__4142
26ecc     04 4E 05 F1 | 	add	fp, #4
26ed0     A7 12 02 FB | 	rdlong	arg01, fp
26ed4     04 4E 05 F1 | 	add	fp, #4
26ed8     A7 14 02 FB | 	rdlong	arg02, fp
26edc     08 4E 85 F1 | 	sub	fp, #8
26ee0     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0992
26ee4     0C 4E 05 F1 | 	add	fp, #12
26ee8     A7 12 02 F6 | 	mov	arg01, fp
26eec     0C 4E 85 F1 | 	sub	fp, #12
26ef0     02 14 06 F6 | 	mov	arg02, #2
26ef4     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0992
26ef8                 | ' 
26ef8                 | ' 	rcvr_mmc(buff, btr);
26ef8                 | ' 	rcvr_mmc(d, 2);
26ef8                 | ' 
26ef8                 | ' 	return 1;
26ef8     01 FA 05 F6 | 	mov	result1, #1
26efc                 | LR__4142
26efc     A7 F0 03 F6 | 	mov	ptra, fp
26f00     B2 00 A0 FD | 	call	#popregs_
26f04                 | _fatfs_cc_rcvr_datablock_1010_ret
26f04     2D 00 64 FD | 	ret
26f08                 | 
26f08                 | _fatfs_cc_xmit_datablock_1012
26f08     00 4A 05 F6 | 	mov	COUNT_, #0
26f0c     A8 00 A0 FD | 	call	#pushregs_
26f10     10 F0 07 F1 | 	add	ptra, #16
26f14     04 4E 05 F1 | 	add	fp, #4
26f18     A7 12 62 FC | 	wrlong	arg01, fp
26f1c     04 4E 05 F1 | 	add	fp, #4
26f20     A7 14 42 FC | 	wrbyte	arg02, fp
26f24     08 4E 85 F1 | 	sub	fp, #8
26f28     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_0996
26f2c     00 FA 0D F2 | 	cmp	result1, #0 wz
26f30     00 FA 05 A6 |  if_e	mov	result1, #0
26f34     90 00 90 AD |  if_e	jmp	#LR__4151
26f38     08 4E 05 F1 | 	add	fp, #8
26f3c     A7 14 C2 FA | 	rdbyte	arg02, fp
26f40     04 4E 05 F1 | 	add	fp, #4
26f44     A7 14 42 FC | 	wrbyte	arg02, fp
26f48     A7 12 02 F6 | 	mov	arg01, fp
26f4c     0C 4E 85 F1 | 	sub	fp, #12
26f50     01 14 06 F6 | 	mov	arg02, #1
26f54     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_0985
26f58     08 4E 05 F1 | 	add	fp, #8
26f5c     A7 14 C2 FA | 	rdbyte	arg02, fp
26f60     08 4E 85 F1 | 	sub	fp, #8
26f64     FD 14 0E F2 | 	cmp	arg02, #253 wz
26f68     58 00 90 AD |  if_e	jmp	#LR__4150
26f6c     04 4E 05 F1 | 	add	fp, #4
26f70     A7 12 02 FB | 	rdlong	arg01, fp
26f74     04 4E 85 F1 | 	sub	fp, #4
26f78     09 14 C6 F9 | 	decod	arg02, #9
26f7c     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_0985
26f80     0C 4E 05 F1 | 	add	fp, #12
26f84     A7 12 02 F6 | 	mov	arg01, fp
26f88     0C 4E 85 F1 | 	sub	fp, #12
26f8c     02 14 06 F6 | 	mov	arg02, #2
26f90     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_0992
26f94     0C 4E 05 F1 | 	add	fp, #12
26f98     A7 12 02 F6 | 	mov	arg01, fp
26f9c     0C 4E 85 F1 | 	sub	fp, #12
26fa0     01 14 06 F6 | 	mov	arg02, #1
26fa4     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_0992
26fa8     0C 4E 05 F1 | 	add	fp, #12
26fac     A7 14 C2 FA | 	rdbyte	arg02, fp
26fb0     0C 4E 85 F1 | 	sub	fp, #12
26fb4     1F 14 06 F5 | 	and	arg02, #31
26fb8     05 14 0E F2 | 	cmp	arg02, #5 wz
26fbc                 | ' 			return 0;
26fbc     00 FA 05 56 |  if_ne	mov	result1, #0
26fc0     04 00 90 5D |  if_ne	jmp	#LR__4151
26fc4                 | LR__4150
26fc4                 | ' 	}
26fc4                 | ' 
26fc4                 | ' 	return 1;
26fc4     01 FA 05 F6 | 	mov	result1, #1
26fc8                 | LR__4151
26fc8     A7 F0 03 F6 | 	mov	ptra, fp
26fcc     B2 00 A0 FD | 	call	#popregs_
26fd0                 | _fatfs_cc_xmit_datablock_1012_ret
26fd0     2D 00 64 FD | 	ret
26fd4                 | 
26fd4                 | _fatfs_cc_send_cmd_1016
26fd4     01 4A 05 F6 | 	mov	COUNT_, #1
26fd8     A8 00 A0 FD | 	call	#pushregs_
26fdc     1C F0 07 F1 | 	add	ptra, #28
26fe0                 | _fatfs_cc_send_cmd_1016_enter
26fe0     04 4E 05 F1 | 	add	fp, #4
26fe4     A7 12 42 FC | 	wrbyte	arg01, fp
26fe8     04 4E 05 F1 | 	add	fp, #4
26fec     A7 14 62 FC | 	wrlong	arg02, fp
26ff0     04 4E 85 F1 | 	sub	fp, #4
26ff4     A7 FA C1 FA | 	rdbyte	result1, fp
26ff8     04 4E 85 F1 | 	sub	fp, #4
26ffc     80 FA CD F7 | 	test	result1, #128 wz
27000     44 00 90 AD |  if_e	jmp	#LR__4160
27004     04 4E 05 F1 | 	add	fp, #4
27008     A7 14 C2 FA | 	rdbyte	arg02, fp
2700c     7F 14 06 F5 | 	and	arg02, #127
27010     A7 14 42 FC | 	wrbyte	arg02, fp
27014     04 4E 85 F1 | 	sub	fp, #4
27018     37 12 06 F6 | 	mov	arg01, #55
2701c     00 14 06 F6 | 	mov	arg02, #0
27020     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1016
27024     0C 4E 05 F1 | 	add	fp, #12
27028     A7 FA 41 FC | 	wrbyte	result1, fp
2702c     A7 14 C2 FA | 	rdbyte	arg02, fp
27030     0C 4E 85 F1 | 	sub	fp, #12
27034     02 14 16 F2 | 	cmp	arg02, #2 wc
27038     0C 4E 05 31 |  if_ae	add	fp, #12
2703c     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
27040     0C 4E 85 31 |  if_ae	sub	fp, #12
27044     6C 01 90 3D |  if_ae	jmp	#LR__4164
27048                 | LR__4160
27048     04 4E 05 F1 | 	add	fp, #4
2704c     A7 14 C2 FA | 	rdbyte	arg02, fp
27050     04 4E 85 F1 | 	sub	fp, #4
27054     0C 14 0E F2 | 	cmp	arg02, #12 wz
27058     14 00 90 AD |  if_e	jmp	#LR__4161
2705c     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1002
27060     34 FD BF FD | 	call	#_fatfs_cc_select_1006
27064     00 FA 0D F2 | 	cmp	result1, #0 wz
27068     FF FA 05 A6 |  if_e	mov	result1, #255
2706c     44 01 90 AD |  if_e	jmp	#LR__4164
27070                 | LR__4161
27070     04 4E 05 F1 | 	add	fp, #4
27074     A7 14 C2 FA | 	rdbyte	arg02, fp
27078     40 FA 05 F6 | 	mov	result1, #64
2707c     0A FB 41 F5 | 	or	result1, arg02
27080     10 4E 05 F1 | 	add	fp, #16
27084     A7 FA 41 FC | 	wrbyte	result1, fp
27088     0C 4E 85 F1 | 	sub	fp, #12
2708c     A7 FA 01 FB | 	rdlong	result1, fp
27090     18 FA 45 F0 | 	shr	result1, #24
27094     0D 4E 05 F1 | 	add	fp, #13
27098     A7 FA 41 FC | 	wrbyte	result1, fp
2709c     0D 4E 85 F1 | 	sub	fp, #13
270a0     A7 FA 01 FB | 	rdlong	result1, fp
270a4     10 FA 45 F0 | 	shr	result1, #16
270a8     0E 4E 05 F1 | 	add	fp, #14
270ac     A7 FA 41 FC | 	wrbyte	result1, fp
270b0     0E 4E 85 F1 | 	sub	fp, #14
270b4     A7 FA 01 FB | 	rdlong	result1, fp
270b8     08 FA 45 F0 | 	shr	result1, #8
270bc     0F 4E 05 F1 | 	add	fp, #15
270c0     A7 FA 41 FC | 	wrbyte	result1, fp
270c4     0F 4E 85 F1 | 	sub	fp, #15
270c8     A7 FA 01 FB | 	rdlong	result1, fp
270cc     10 4E 05 F1 | 	add	fp, #16
270d0     A7 FA 41 FC | 	wrbyte	result1, fp
270d4     0C 4E 85 F1 | 	sub	fp, #12
270d8     A7 02 48 FC | 	wrbyte	#1, fp
270dc     08 4E 85 F1 | 	sub	fp, #8
270e0     A7 FA C9 FA | 	rdbyte	result1, fp wz
270e4     04 4E 85 F1 | 	sub	fp, #4
270e8     0C 4E 05 A1 |  if_e	add	fp, #12
270ec     A7 2A 49 AC |  if_e	wrbyte	#149, fp
270f0     0C 4E 85 A1 |  if_e	sub	fp, #12
270f4     04 4E 05 F1 | 	add	fp, #4
270f8     A7 FA C1 FA | 	rdbyte	result1, fp
270fc     04 4E 85 F1 | 	sub	fp, #4
27100     08 FA 0D F2 | 	cmp	result1, #8 wz
27104     0C 4E 05 A1 |  if_e	add	fp, #12
27108     A7 0E 49 AC |  if_e	wrbyte	#135, fp
2710c     0C 4E 85 A1 |  if_e	sub	fp, #12
27110     0C 4E 05 F1 | 	add	fp, #12
27114     A7 14 C2 FA | 	rdbyte	arg02, fp
27118     0D 4E 05 F1 | 	add	fp, #13
2711c     A7 14 42 FC | 	wrbyte	arg02, fp
27120     05 4E 85 F1 | 	sub	fp, #5
27124     A7 12 02 F6 | 	mov	arg01, fp
27128     14 4E 85 F1 | 	sub	fp, #20
2712c     06 14 06 F6 | 	mov	arg02, #6
27130     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_0985
27134     04 4E 05 F1 | 	add	fp, #4
27138     A7 1E C2 FA | 	rdbyte	local01, fp
2713c     04 4E 85 F1 | 	sub	fp, #4
27140     0C 1E 0E F2 | 	cmp	local01, #12 wz
27144     10 4E 05 A1 |  if_e	add	fp, #16
27148     A7 12 02 A6 |  if_e	mov	arg01, fp
2714c     10 4E 85 A1 |  if_e	sub	fp, #16
27150     01 14 06 A6 |  if_e	mov	arg02, #1
27154     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_0992
27158     0C 4E 05 F1 | 	add	fp, #12
2715c     A7 14 48 FC | 	wrbyte	#10, fp
27160     0C 4E 85 F1 | 	sub	fp, #12
27164                 | ' 	n = 10;
27164                 | ' 	do
27164                 | LR__4162
27164     10 4E 05 F1 | 	add	fp, #16
27168     A7 12 02 F6 | 	mov	arg01, fp
2716c     10 4E 85 F1 | 	sub	fp, #16
27170     01 14 06 F6 | 	mov	arg02, #1
27174     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_0992
27178     10 4E 05 F1 | 	add	fp, #16
2717c     A7 1E C2 FA | 	rdbyte	local01, fp
27180     10 4E 85 F1 | 	sub	fp, #16
27184     80 1E CE F7 | 	test	local01, #128 wz
27188     1C 00 90 AD |  if_e	jmp	#LR__4163
2718c     0C 4E 05 F1 | 	add	fp, #12
27190     A7 1E C2 FA | 	rdbyte	local01, fp
27194     01 1E 86 F1 | 	sub	local01, #1
27198     A7 1E 42 FC | 	wrbyte	local01, fp
2719c     A7 1E CA FA | 	rdbyte	local01, fp wz
271a0     0C 4E 85 F1 | 	sub	fp, #12
271a4     BC FF 9F 5D |  if_ne	jmp	#LR__4162
271a8                 | LR__4163
271a8                 | ' 
271a8                 | ' 	return d;
271a8     10 4E 05 F1 | 	add	fp, #16
271ac     A7 FA C1 FA | 	rdbyte	result1, fp
271b0     10 4E 85 F1 | 	sub	fp, #16
271b4                 | LR__4164
271b4     A7 F0 03 F6 | 	mov	ptra, fp
271b8     B2 00 A0 FD | 	call	#popregs_
271bc                 | _fatfs_cc_send_cmd_1016_ret
271bc     2D 00 64 FD | 	ret
271c0                 | 
271c0                 | _fatfs_cc_disk_deinitialize
271c0     03 4A 05 F6 | 	mov	COUNT_, #3
271c4     A8 00 A0 FD | 	call	#pushregs_
271c8     00 12 4E F2 | 	cmps	arg01, #0 wz
271cc     01 00 00 FF 
271d0     14 E4 05 F1 | 	add	objptr, ##532
271d4     F2 12 02 FB | 	rdlong	arg01, objptr
271d8     04 E4 85 F1 | 	sub	objptr, #4
271dc     F2 1E 02 FB | 	rdlong	local01, objptr
271e0     08 E4 05 F1 | 	add	objptr, #8
271e4     F2 20 02 FB | 	rdlong	local02, objptr
271e8     04 E4 05 F1 | 	add	objptr, #4
271ec     F2 22 02 FB | 	rdlong	local03, objptr
271f0     01 00 00 FF 
271f4     1C E4 85 F1 | 	sub	objptr, ##540
271f8                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
271f8                 | '         return RES_NOTRDY;
271f8     03 FA 05 56 |  if_ne	mov	result1, #3
271fc     2C 00 90 5D |  if_ne	jmp	#LR__4170
27200     50 12 62 FD | 	fltl	arg01
27204     09 01 08 FC | 	wrpin	#0, arg01
27208     50 1E 62 FD | 	fltl	local01
2720c     0F 01 08 FC | 	wrpin	#0, local01
27210     50 20 62 FD | 	fltl	local02
27214     10 01 08 FC | 	wrpin	#0, local02
27218     50 22 62 FD | 	fltl	local03
2721c     11 01 08 FC | 	wrpin	#0, local03
27220     0A 12 06 F6 | 	mov	arg01, #10
27224     28 16 BF FD | 	call	#__system___waitms
27228                 | '     }
27228                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
27228                 | '     _pinclear(PIN_SS);
27228                 | '     _pinclear(PIN_CLK);
27228                 | '     _pinclear(PIN_DI);
27228                 | '     _pinclear(PIN_DO);
27228                 | ' 
27228                 | '     _waitms(10);
27228                 | ' 
27228                 | '     return 0;
27228     00 FA 05 F6 | 	mov	result1, #0
2722c                 | LR__4170
2722c     A7 F0 03 F6 | 	mov	ptra, fp
27230     B2 00 A0 FD | 	call	#popregs_
27234                 | _fatfs_cc_disk_deinitialize_ret
27234     2D 00 64 FD | 	ret
27238                 | 
27238                 | _fatfs_cc_gettimeofday
27238     04 4A 05 F6 | 	mov	COUNT_, #4
2723c     A8 00 A0 FD | 	call	#pushregs_
27240     09 1F 02 F6 | 	mov	local01, arg01
27244     E4 11 BF FD | 	call	#__system___getus
27248     FD 12 02 F6 | 	mov	arg01, result1
2724c     02 00 00 FF 
27250     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
27254     F6 20 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
27258     09 FB 01 F6 | 	mov	result1, arg01
2725c     10 FB 81 F1 | 	sub	result1, local02
27260     A1 07 00 FF 
27264     40 FA 15 FD | 	qdiv	result1, ##1000000
27268     02 00 00 FF 
2726c     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
27270     18 20 62 FD | 	getqx	local02
27274     A1 07 00 FF 
27278     40 FA 15 FD | 	qdiv	result1, ##1000000
2727c     00 20 0E F2 | 	cmp	local02, #0 wz
27280     19 22 62 FD | 	getqy	local03
27284     28 00 90 AD |  if_e	jmp	#LR__4180
27288     02 00 00 FF 
2728c     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
27290     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
27294     10 25 02 F1 | 	add	local04, local02
27298     F6 24 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
2729c     11 13 82 F1 | 	sub	arg01, local03
272a0     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
272a4     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
272a8     02 00 00 FF 
272ac     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
272b0                 | LR__4180
272b0     02 00 00 FF 
272b4     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
272b8     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
272bc     02 00 00 FF 
272c0     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
272c4     0F 25 62 FC | 	wrlong	local04, local01
272c8     04 1E 06 F1 | 	add	local01, #4
272cc     0F 23 62 FC | 	wrlong	local03, local01
272d0                 | '         lastsec += secs;
272d0                 | '         lastus = now - leftover;
272d0                 | '     }
272d0                 | '     tv->tv_sec = lastsec;
272d0                 | '     tv->tv_usec = leftover;
272d0                 | '     return 0;
272d0     00 FA 05 F6 | 	mov	result1, #0
272d4     A7 F0 03 F6 | 	mov	ptra, fp
272d8     B2 00 A0 FD | 	call	#popregs_
272dc                 | _fatfs_cc_gettimeofday_ret
272dc     2D 00 64 FD | 	ret
272e0                 | 
272e0                 | _fatfs_cc__is_leap_year
272e0     09 FB 51 F6 | 	abs	result1, arg01 wc
272e4     03 FA 05 F5 | 	and	result1, #3
272e8     FD FA 89 F6 | 	negc	result1, result1 wz
272ec     38 00 90 5D |  if_ne	jmp	#LR__4191
272f0     09 FB 51 F6 | 	abs	result1, arg01 wc
272f4     64 FA 15 FD | 	qdiv	result1, #100
272f8     19 FA 61 FD | 	getqy	result1
272fc     FD FA 89 F6 | 	negc	result1, result1 wz
27300     1C 00 90 5D |  if_ne	jmp	#LR__4190
27304     09 FB 51 F6 | 	abs	result1, arg01 wc
27308     90 FB 15 FD | 	qdiv	result1, #400
2730c                 | '       return (0 == y % 400);
2730c     00 FA 05 F6 | 	mov	result1, #0
27310     19 00 62 FD | 	getqy	_var01
27314     00 01 8A F6 | 	negc	_var01, _var01 wz
27318     01 FA 05 A6 |  if_e	mov	result1, #1
2731c     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
27320                 | LR__4190
27320                 | '     return 1;
27320     01 FA 05 F6 | 	mov	result1, #1
27324     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
27328                 | LR__4191
27328                 | '   }
27328                 | '   return 0;
27328     00 FA 05 F6 | 	mov	result1, #0
2732c                 | _fatfs_cc__is_leap_year_ret
2732c     2D 00 64 FD | 	ret
27330                 | 
27330                 | _fatfs_cc___tzoffset
27330     09 01 0A F6 | 	mov	_var01, arg01 wz
27334     FF FF FF FF 
27338     0A FF 6B FC | 	wrlong	##-1, arg02
2733c     01 02 06 F6 | 	mov	_var02, #1
27340     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
27344                 | '                 return 0;
27344     00 FA 05 A6 |  if_e	mov	result1, #0
27348     94 02 90 AD |  if_e	jmp	#LR__4217
2734c     0A 01 68 FC | 	wrlong	#0, arg02
27350     02 00 00 FF 
27354     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
27358     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
2735c                 | ' 
2735c                 | '        *hasdst = 0;
2735c                 | ' 
2735c                 | ' 	n = stdname;
2735c                 | '         while (*s && isalpha(*s)) {
2735c     02 00 00 FF 
27360     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
27364     97 28 48 FB | 	callpa	#(@LR__4201-@LR__4200)>>2,fcache_load_ptr_
27368                 | LR__4200
27368     00 05 CA FA | 	rdbyte	_var03, _var01 wz
2736c     48 00 90 AD |  if_e	jmp	#LR__4202
27370     00 13 C2 FA | 	rdbyte	arg01, _var01
27374                 | ' {
27374                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
27374     80 12 36 F3 | 	fle	arg01, #128 wc
27378                 | '     return __ctype[c];
27378     02 00 00 FF 
2737c     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
27380     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
27384     09 FB C1 FA | 	rdbyte	result1, arg01
27388     02 00 00 FF 
2738c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
27390     0C FA CD F7 | 	test	result1, #12 wz
27394     20 00 90 AD |  if_e	jmp	#LR__4202
27398     00 09 02 F6 | 	mov	_var05, _var01
2739c     00 0B 02 F6 | 	mov	_var06, _var01
273a0     01 0A 06 F1 | 	add	_var06, #1
273a4     04 0D C2 FA | 	rdbyte	_var07, _var05
273a8     05 01 02 F6 | 	mov	_var01, _var06
273ac     03 0D 42 FC | 	wrbyte	_var07, _var04
273b0     01 06 06 F1 | 	add	_var04, #1
273b4     B0 FF 9F FD | 	jmp	#LR__4200
273b8                 | LR__4201
273b8                 | LR__4202
273b8     03 01 48 FC | 	wrbyte	#0, _var04
273bc     00 0E 06 F6 | 	mov	_var08, #0
273c0     00 05 C2 FA | 	rdbyte	_var03, _var01
273c4     2D 04 0E F2 | 	cmp	_var03, #45 wz
273c8     01 02 66 A6 |  if_e	neg	_var02, #1
273cc     01 00 06 A1 |  if_e	add	_var01, #1
273d0     97 28 48 FB | 	callpa	#(@LR__4204-@LR__4203)>>2,fcache_load_ptr_
273d4                 | '                 sgn = -1;
273d4                 | '                 s++;
273d4                 | '         }
273d4                 | '         while (isdigit(*s)) {
273d4                 | LR__4203
273d4     00 13 C2 FA | 	rdbyte	arg01, _var01
273d8                 | ' {
273d8                 | '   return  (__ctype_get(c) & 0x02 ) ;
273d8     80 12 36 F3 | 	fle	arg01, #128 wc
273dc                 | '     return __ctype[c];
273dc     02 00 00 FF 
273e0     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
273e4     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
273e8     09 FB C1 FA | 	rdbyte	result1, arg01
273ec     02 00 00 FF 
273f0     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
273f4     02 FA CD F7 | 	test	result1, #2 wz
273f8     28 00 90 AD |  if_e	jmp	#LR__4205
273fc     07 05 02 F6 | 	mov	_var03, _var08
27400     02 04 66 F0 | 	shl	_var03, #2
27404     07 05 02 F1 | 	add	_var03, _var08
27408     01 04 66 F0 | 	shl	_var03, #1
2740c     00 09 C2 FA | 	rdbyte	_var05, _var01
27410     30 08 86 F1 | 	sub	_var05, #48
27414     04 05 02 F1 | 	add	_var03, _var05
27418     02 0F 02 F6 | 	mov	_var08, _var03
2741c     01 00 06 F1 | 	add	_var01, #1
27420     B0 FF 9F FD | 	jmp	#LR__4203
27424                 | LR__4204
27424                 | LR__4205
27424     07 00 00 FF 
27428     10 0E 06 FD | 	qmul	_var08, ##3600
2742c     00 05 C2 FA | 	rdbyte	_var03, _var01
27430     3A 04 0E F2 | 	cmp	_var03, #58 wz
27434     18 10 62 FD | 	getqx	_var09
27438     70 00 90 5D |  if_ne	jmp	#LR__4209
2743c     00 0E 06 F6 | 	mov	_var08, #0
27440     01 00 06 F1 | 	add	_var01, #1
27444     97 28 48 FB | 	callpa	#(@LR__4207-@LR__4206)>>2,fcache_load_ptr_
27448                 | '                 x = 0;
27448                 | '                 s++;
27448                 | '                 while (isdigit(*s)) {
27448                 | LR__4206
27448     00 13 C2 FA | 	rdbyte	arg01, _var01
2744c                 | ' {
2744c                 | '   return  (__ctype_get(c) & 0x02 ) ;
2744c     80 12 36 F3 | 	fle	arg01, #128 wc
27450                 | '     return __ctype[c];
27450     02 00 00 FF 
27454     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
27458     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2745c     09 FB C1 FA | 	rdbyte	result1, arg01
27460     02 00 00 FF 
27464     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
27468     02 FA CD F7 | 	test	result1, #2 wz
2746c     28 00 90 AD |  if_e	jmp	#LR__4208
27470     07 05 02 F6 | 	mov	_var03, _var08
27474     02 04 66 F0 | 	shl	_var03, #2
27478     07 05 02 F1 | 	add	_var03, _var08
2747c     01 04 66 F0 | 	shl	_var03, #1
27480     00 09 C2 FA | 	rdbyte	_var05, _var01
27484     30 08 86 F1 | 	sub	_var05, #48
27488     04 05 02 F1 | 	add	_var03, _var05
2748c     02 0F 02 F6 | 	mov	_var08, _var03
27490     01 00 06 F1 | 	add	_var01, #1
27494     B0 FF 9F FD | 	jmp	#LR__4206
27498                 | LR__4207
27498                 | LR__4208
27498     07 0D 02 F6 | 	mov	_var07, _var08
2749c     04 0C 66 F0 | 	shl	_var07, #4
274a0     07 0D 82 F1 | 	sub	_var07, _var08
274a4     02 0C 66 F0 | 	shl	_var07, #2
274a8     06 11 02 F1 | 	add	_var09, _var07
274ac                 | LR__4209
274ac     02 00 00 FF 
274b0     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
274b4     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
274b8     00 13 C2 FA | 	rdbyte	arg01, _var01
274bc                 | ' {
274bc                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
274bc     80 12 36 F3 | 	fle	arg01, #128 wc
274c0                 | '     return __ctype[c];
274c0     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
274c4     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
274c8     09 FB C1 FA | 	rdbyte	result1, arg01
274cc     02 00 00 FF 
274d0     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
274d4     0C FA CD F7 | 	test	result1, #12 wz
274d8     50 00 90 AD |  if_e	jmp	#LR__4212
274dc     0A 03 68 FC | 	wrlong	#1, arg02
274e0                 | '                 *hasdst = 1;
274e0                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
274e0                 | LR__4210
274e0     00 05 CA FA | 	rdbyte	_var03, _var01 wz
274e4     44 00 90 AD |  if_e	jmp	#LR__4211
274e8     00 13 C2 FA | 	rdbyte	arg01, _var01
274ec                 | ' {
274ec                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
274ec     80 12 36 F3 | 	fle	arg01, #128 wc
274f0                 | '     return __ctype[c];
274f0     02 00 00 FF 
274f4     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
274f8     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
274fc     09 FB C1 FA | 	rdbyte	result1, arg01
27500     02 00 00 FF 
27504     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
27508     0C FA CD F7 | 	test	result1, #12 wz
2750c     1C 00 90 AD |  if_e	jmp	#LR__4211
27510     00 0B 02 F6 | 	mov	_var06, _var01
27514     01 0A 06 F1 | 	add	_var06, #1
27518     00 0D C2 FA | 	rdbyte	_var07, _var01
2751c     05 01 02 F6 | 	mov	_var01, _var06
27520     03 0D 42 FC | 	wrbyte	_var07, _var04
27524     01 06 06 F1 | 	add	_var04, #1
27528     B4 FF 9F FD | 	jmp	#LR__4210
2752c                 | LR__4211
2752c                 | LR__4212
2752c     03 01 48 FC | 	wrbyte	#0, _var04
27530     02 00 00 FF 
27534     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
27538     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
2753c     02 00 00 FF 
27540     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
27544     20 00 90 AD |  if_e	jmp	#LR__4213
27548     02 00 00 FF 
2754c     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
27550     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
27554     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
27558     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2755c     02 00 00 FF 
27560     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
27564     1C 00 90 FD | 	jmp	#LR__4214
27568                 | LR__4213
27568     02 00 00 FF 
2756c     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
27570     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
27574     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
27578     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2757c     02 00 00 FF 
27580     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
27584                 | LR__4214
27584     02 00 00 FF 
27588     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2758c     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
27590     02 00 00 FF 
27594     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
27598     20 00 90 AD |  if_e	jmp	#LR__4215
2759c     02 00 00 FF 
275a0     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
275a4     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
275a8     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
275ac     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
275b0     02 00 00 FF 
275b4     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
275b8     1C 00 90 FD | 	jmp	#LR__4216
275bc                 | LR__4215
275bc     02 00 00 FF 
275c0     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
275c4     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
275c8     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
275cc     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
275d0     02 00 00 FF 
275d4     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
275d8                 | LR__4216
275d8     08 03 02 FD | 	qmul	_var02, _var09
275dc                 | ' 		_tzname[1] = stdname;
275dc                 | ' 
275dc                 | '         return sgn * off;
275dc     18 FA 61 FD | 	getqx	result1
275e0                 | LR__4217
275e0                 | _fatfs_cc___tzoffset_ret
275e0     2D 00 64 FD | 	ret
275e4                 | 
275e4                 | _fatfs_cc___indst
275e4     10 12 06 F1 | 	add	arg01, #16
275e8     09 01 02 FB | 	rdlong	_var01, arg01
275ec     10 12 86 F1 | 	sub	arg01, #16
275f0     02 00 0E F2 | 	cmp	_var01, #2 wz
275f4     30 00 90 5D |  if_ne	jmp	#LR__4220
275f8     07 00 06 F6 | 	mov	_var01, #7
275fc     18 12 06 F1 | 	add	arg01, #24
27600     09 03 02 FB | 	rdlong	_var02, arg01
27604     01 01 02 F1 | 	add	_var01, _var02
27608     0C 12 86 F1 | 	sub	arg01, #12
2760c     09 05 02 FB | 	rdlong	_var03, arg01
27610     02 01 82 F1 | 	sub	_var01, _var03
27614     00 00 56 F2 | 	cmps	_var01, #0 wc
27618                 | '                         return 1;
27618     01 FA 05 C6 |  if_b	mov	result1, #1
2761c     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
27620                 | '                 return 0;
27620     00 FA 05 F6 | 	mov	result1, #0
27624     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
27628                 | LR__4220
27628     10 12 06 F1 | 	add	arg01, #16
2762c     09 01 02 FB | 	rdlong	_var01, arg01
27630     10 12 86 F1 | 	sub	arg01, #16
27634     0A 00 0E F2 | 	cmp	_var01, #10 wz
27638     28 00 90 5D |  if_ne	jmp	#LR__4221
2763c     18 12 06 F1 | 	add	arg01, #24
27640     09 01 02 FB | 	rdlong	_var01, arg01
27644     0C 12 86 F1 | 	sub	arg01, #12
27648     09 07 02 FB | 	rdlong	_var04, arg01
2764c     03 01 82 F1 | 	sub	_var01, _var04
27650     00 00 56 F2 | 	cmps	_var01, #0 wc
27654                 | '                         return 0;
27654     00 FA 05 C6 |  if_b	mov	result1, #0
27658     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
2765c                 | '                 return 1;
2765c     01 FA 05 F6 | 	mov	result1, #1
27660     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
27664                 | LR__4221
27664                 | '         }
27664                 | ' 
27664                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
27664     00 00 06 F6 | 	mov	_var01, #0
27668     10 12 06 F1 | 	add	arg01, #16
2766c     09 03 02 FB | 	rdlong	_var02, arg01
27670     10 12 86 F1 | 	sub	arg01, #16
27674     03 02 56 F2 | 	cmps	_var02, #3 wc
27678     10 00 90 CD |  if_b	jmp	#LR__4222
2767c     10 12 06 F1 | 	add	arg01, #16
27680     09 05 02 FB | 	rdlong	_var03, arg01
27684     0A 04 56 F2 | 	cmps	_var03, #10 wc
27688     01 00 06 C6 |  if_b	mov	_var01, #1
2768c                 | LR__4222
2768c     00 FB 01 F6 | 	mov	result1, _var01
27690                 | _fatfs_cc___indst_ret
27690     2D 00 64 FD | 	ret
27694                 | 
27694                 | ' 	
27694                 | ' 	FUNCTION pfunc(c as integer) as integer
27694                 | ___strs_cl_pfunc
27694                 | ' 		if (i < 16) then
27694     04 E4 05 F1 | 	add	objptr, #4
27698     F2 FA 01 FB | 	rdlong	result1, objptr
2769c     04 E4 85 F1 | 	sub	objptr, #4
276a0     10 FA 55 F2 | 	cmps	result1, #16 wc
276a4     2C 00 90 3D |  if_ae	jmp	#LR__4230
276a8     F2 FA 01 FB | 	rdlong	result1, objptr
276ac     04 E4 05 F1 | 	add	objptr, #4
276b0     F2 00 02 FB | 	rdlong	_var01, objptr
276b4     FD 00 02 F1 | 	add	_var01, result1
276b8     00 13 42 FC | 	wrbyte	arg01, _var01
276bc     F2 FA 01 FB | 	rdlong	result1, objptr
276c0     01 FA 05 F1 | 	add	result1, #1
276c4     F2 FA 61 FC | 	wrlong	result1, objptr
276c8     04 E4 85 F1 | 	sub	objptr, #4
276cc                 | ' 			p(i) = c
276cc                 | ' 			i = i+1
276cc                 | ' 			return 1
276cc     01 FA 05 F6 | 	mov	result1, #1
276d0     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
276d4                 | LR__4230
276d4                 | ' 			return -1
276d4     01 FA 65 F6 | 	neg	result1, #1
276d8                 | ___strs_cl_pfunc_ret
276d8     2D 00 64 FD | 	ret
276dc                 | 
276dc                 | __struct__s_vfs_file_t_putchar
276dc     04 4A 05 F6 | 	mov	COUNT_, #4
276e0     A8 00 A0 FD | 	call	#pushregs_
276e4     1C E4 05 F1 | 	add	objptr, #28
276e8     F2 1E 0A FB | 	rdlong	local01, objptr wz
276ec     1C E4 85 F1 | 	sub	objptr, #28
276f0     00 FA 05 A6 |  if_e	mov	result1, #0
276f4     48 00 90 AD |  if_e	jmp	#LR__4240
276f8     1C E4 05 F1 | 	add	objptr, #28
276fc     F2 20 02 FB | 	rdlong	local02, objptr
27700     10 23 02 F6 | 	mov	local03, local02
27704     1C E4 85 F1 | 	sub	objptr, #28
27708     13 22 46 F7 | 	zerox	local03, #19
2770c     14 20 46 F0 | 	shr	local02, #20
27710     02 20 66 F0 | 	shl	local02, #2
27714     ED 20 02 F1 | 	add	local02, __methods__
27718     10 21 02 FB | 	rdlong	local02, local02
2771c     F2 14 02 F6 | 	mov	arg02, objptr
27720     F2 24 02 F6 | 	mov	local04, objptr
27724     11 E5 01 F6 | 	mov	objptr, local03
27728     2D 20 62 FD | 	call	local02
2772c     12 E5 01 F6 | 	mov	objptr, local04
27730                 | '     return (i < 0) ? 0 : 1;
27730     00 FA 55 F2 | 	cmps	result1, #0 wc
27734     00 1E 06 C6 |  if_b	mov	local01, #0
27738     01 1E 06 36 |  if_ae	mov	local01, #1
2773c     0F FB 01 F6 | 	mov	result1, local01
27740                 | LR__4240
27740     A7 F0 03 F6 | 	mov	ptra, fp
27744     B2 00 A0 FD | 	call	#popregs_
27748                 | __struct__s_vfs_file_t_putchar_ret
27748     2D 00 64 FD | 	ret
2774c                 | 
2774c                 | __struct__s_vfs_file_t_getchar
2774c     03 4A 05 F6 | 	mov	COUNT_, #3
27750     A8 00 A0 FD | 	call	#pushregs_
27754     20 E4 05 F1 | 	add	objptr, #32
27758     F2 12 0A FB | 	rdlong	arg01, objptr wz
2775c     20 E4 85 F1 | 	sub	objptr, #32
27760     01 FA 65 A6 |  if_e	neg	result1, #1
27764     38 00 90 AD |  if_e	jmp	#LR__4250
27768                 | '     return getcf(__this);
27768     20 E4 05 F1 | 	add	objptr, #32
2776c     F2 1E 02 FB | 	rdlong	local01, objptr
27770     0F 21 02 F6 | 	mov	local02, local01
27774     20 E4 85 F1 | 	sub	objptr, #32
27778     13 20 46 F7 | 	zerox	local02, #19
2777c     14 1E 46 F0 | 	shr	local01, #20
27780     02 1E 66 F0 | 	shl	local01, #2
27784     ED 1E 02 F1 | 	add	local01, __methods__
27788     0F 1F 02 FB | 	rdlong	local01, local01
2778c     F2 12 02 F6 | 	mov	arg01, objptr
27790     F2 22 02 F6 | 	mov	local03, objptr
27794     10 E5 01 F6 | 	mov	objptr, local02
27798     2D 1E 62 FD | 	call	local01
2779c     11 E5 01 F6 | 	mov	objptr, local03
277a0                 | LR__4250
277a0     A7 F0 03 F6 | 	mov	ptra, fp
277a4     B2 00 A0 FD | 	call	#popregs_
277a8                 | __struct__s_vfs_file_t_getchar_ret
277a8     2D 00 64 FD | 	ret
277ac                 | 
277ac                 | __struct___bas_wrap_sender_tx
277ac     03 4A 05 F6 | 	mov	COUNT_, #3
277b0     A8 00 A0 FD | 	call	#pushregs_
277b4     F2 1E 02 FB | 	rdlong	local01, objptr
277b8     0F 21 02 F6 | 	mov	local02, local01
277bc     13 1E 46 F7 | 	zerox	local01, #19
277c0     14 20 46 F0 | 	shr	local02, #20
277c4     02 20 66 F0 | 	shl	local02, #2
277c8     ED 20 02 F1 | 	add	local02, __methods__
277cc     10 21 02 FB | 	rdlong	local02, local02
277d0     F2 22 02 F6 | 	mov	local03, objptr
277d4     0F E5 01 F6 | 	mov	objptr, local01
277d8     2D 20 62 FD | 	call	local02
277dc     11 E5 01 F6 | 	mov	objptr, local03
277e0     01 FA 05 F6 | 	mov	result1, #1
277e4     A7 F0 03 F6 | 	mov	ptra, fp
277e8     B2 00 A0 FD | 	call	#popregs_
277ec                 | __struct___bas_wrap_sender_tx_ret
277ec     2D 00 64 FD | 	ret
277f0                 | 
277f0                 | __struct___bas_wrap_sender_rx
277f0     03 4A 05 F6 | 	mov	COUNT_, #3
277f4     A8 00 A0 FD | 	call	#pushregs_
277f8     04 E4 05 F1 | 	add	objptr, #4
277fc     F2 1E 02 FB | 	rdlong	local01, objptr
27800     0F 21 02 F6 | 	mov	local02, local01
27804     04 E4 85 F1 | 	sub	objptr, #4
27808     13 20 46 F7 | 	zerox	local02, #19
2780c     14 1E 46 F0 | 	shr	local01, #20
27810     02 1E 66 F0 | 	shl	local01, #2
27814     ED 1E 02 F1 | 	add	local01, __methods__
27818     0F 1F 02 FB | 	rdlong	local01, local01
2781c     F2 22 02 F6 | 	mov	local03, objptr
27820     10 E5 01 F6 | 	mov	objptr, local02
27824     2D 1E 62 FD | 	call	local01
27828     11 E5 01 F6 | 	mov	objptr, local03
2782c     A7 F0 03 F6 | 	mov	ptra, fp
27830     B2 00 A0 FD | 	call	#popregs_
27834                 | __struct___bas_wrap_sender_rx_ret
27834     2D 00 64 FD | 	ret
27838                 | 
27838                 | __struct___bas_wrap_sender_close
27838     03 4A 05 F6 | 	mov	COUNT_, #3
2783c     A8 00 A0 FD | 	call	#pushregs_
27840     08 E4 05 F1 | 	add	objptr, #8
27844     F2 1E 02 FB | 	rdlong	local01, objptr
27848     0F 21 02 F6 | 	mov	local02, local01
2784c     08 E4 85 F1 | 	sub	objptr, #8
27850     13 20 46 F7 | 	zerox	local02, #19
27854     14 1E 46 F0 | 	shr	local01, #20
27858     02 1E 66 F0 | 	shl	local01, #2
2785c     ED 1E 02 F1 | 	add	local01, __methods__
27860     0F 1F 02 FB | 	rdlong	local01, local01
27864     F2 22 02 F6 | 	mov	local03, objptr
27868     10 E5 01 F6 | 	mov	objptr, local02
2786c     2D 1E 62 FD | 	call	local01
27870     11 E5 01 F6 | 	mov	objptr, local03
27874     A7 F0 03 F6 | 	mov	ptra, fp
27878     B2 00 A0 FD | 	call	#popregs_
2787c                 | __struct___bas_wrap_sender_close_ret
2787c     2D 00 64 FD | 	ret
27880                 | 
27880                 | LR__4260
27880     2F          | 	byte	"/"
27881     00          | 	byte	0
27882                 | LR__4261
27882     69 6E 66    | 	byte	"inf"
27885     00          | 	byte	0
27886                 | LR__4262
27886     6E 61 6E    | 	byte	"nan"
27889     00          | 	byte	0
2788a                 | LR__4263
2788a                 | 	byte	
2788a     00          | 	byte	0
2788b                 | LR__4264
2788b                 | 	byte	
2788b     00          | 	byte	0
2788c                 | LR__4265
2788c                 | 	byte	
2788c     00          | 	byte	0
2788d                 | LR__4266
2788d                 | 	byte	
2788d     00          | 	byte	0
2788e                 | LR__4267
2788e                 | 	byte	
2788e     00          | 	byte	0
2788f                 | LR__4268
2788f                 | 	byte	
2788f     00          | 	byte	0
27890                 | LR__4269
27890                 | 	byte	
27890     00          | 	byte	0
27891                 | LR__4270
27891                 | 	byte	
27891     00          | 	byte	0
27892                 | LR__4271
27892     00          | 	byte	0
27893     00          | 	byte	0
27894                 | LR__4272
27894     00          | 	byte	0
27895     00          | 	byte	0
27896                 | LR__4273
27896     00          | 	byte	0
27897     00          | 	byte	0
27898                 | LR__4274
27898     20 21 21 21 
2789c     20 63 6F 72 
278a0     72 75 70 74 
278a4     65 64 20 68 
278a8     65 61 70 3F 
278ac     3F 3F 20 21 
278b0     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
278b3     00          | 	byte	0
278b4                 | LR__4275
278b4     20 21 21 21 
278b8     20 6F 75 74 
278bc     20 6F 66 20 
278c0     68 65 61 70 
278c4     20 6D 65 6D 
278c8     6F 72 79 20 
278cc     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
278d0     00          | 	byte	0
278d1                 | LR__4276
278d1     20 21 21 21 
278d5     20 63 6F 72 
278d9     72 75 70 74 
278dd     65 64 20 68 
278e1     65 61 70 20 
278e5     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
278e9     00          | 	byte	0
278ea                 | LR__4277
278ea     00          | 	byte	0
278eb     00          | 	byte	0
278ec                 | LR__4278
278ec     2E          | 	byte	"."
278ed     00          | 	byte	0
278ee                 | LR__4279
278ee     00          | 	byte	0
278ef     00          | 	byte	0
278f0                 | LR__4280
278f0     00          | 	byte	0
278f1     00          | 	byte	0
278f2                 | LR__4281
278f2     00          | 	byte	0
278f3     00          | 	byte	0
278f4                 | LR__4282
278f4     2A 3A 3C 3E 
278f8     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
278fc     00          | 	byte	0
278fd                 | LR__4283
278fd     2B 2C 3B 3D 
27901     5B 5D       | 	byte	"+,;=[]"
27903     00          | 	byte	0
27904                 | LR__4284
27904     46 41 54 33 
27908     32 20 20 20 | 	byte	"FAT32   "
2790c     00          | 	byte	0
2790d                 | LR__4285
2790d     54 5A       | 	byte	"TZ"
2790f     00          | 	byte	0
27910                 | LR__4286
27910     00          | 	byte	0
27911     00          | 	byte	0
27912                 | LR__4287
27912                 | 	byte	
27912     00          | 	byte	0
27913                 | LR__4288
27913                 | 	byte	
27913     00          | 	byte	0
27914                 | LR__4289
27914     22          | 	byte	34
27915     00          | 	byte	0
27916                 | LR__4290
27916     22          | 	byte	34
27917     00          | 	byte	0
27918                 | LR__4291
27918     3A          | 	byte	":"
27919     00          | 	byte	0
2791a                 | LR__4292
2791a                 | 	byte	
2791a     00          | 	byte	0
2791b                 | LR__4293
2791b                 | 	byte	
2791b     00          | 	byte	0
2791c                 | LR__4294
2791c                 | 	byte	
2791c     00          | 	byte	0
2791d                 | LR__4295
2791d                 | 	byte	
2791d     00          | 	byte	0
2791e                 | LR__4296
2791e                 | 	byte	
2791e     00          | 	byte	0
2791f                 | LR__4297
2791f                 | 	byte	
2791f     00          | 	byte	0
27920                 | LR__4298
27920                 | 	byte	
27920     00          | 	byte	0
27921                 | LR__4299
27921     22          | 	byte	34
27922     00          | 	byte	0
27923                 | LR__4300
27923     22          | 	byte	34
27924     00          | 	byte	0
27925                 | LR__4301
27925     22          | 	byte	34
27926     00          | 	byte	0
27927                 | LR__4302
27927     22          | 	byte	34
27928     00          | 	byte	0
27929                 | LR__4303
27929     22          | 	byte	34
2792a     00          | 	byte	0
2792b                 | LR__4304
2792b     3E          | 	byte	">"
2792c     00          | 	byte	0
2792d                 | LR__4305
2792d     3E          | 	byte	">"
2792e     00          | 	byte	0
2792f                 | LR__4306
2792f     2B          | 	byte	"+"
27930     00          | 	byte	0
27931                 | LR__4307
27931     2D          | 	byte	"-"
27932     00          | 	byte	0
27933                 | LR__4308
27933     2A          | 	byte	"*"
27934     00          | 	byte	0
27935                 | LR__4309
27935     2F          | 	byte	"/"
27936     00          | 	byte	0
27937                 | LR__4310
27937     5E          | 	byte	"^"
27938     00          | 	byte	0
27939                 | LR__4311
27939     3D          | 	byte	"="
2793a     00          | 	byte	0
2793b                 | LR__4312
2793b     2B          | 	byte	"+"
2793c     00          | 	byte	0
2793d                 | LR__4313
2793d     2B          | 	byte	"+"
2793e     00          | 	byte	0
2793f                 | LR__4314
2793f     2D          | 	byte	"-"
27940     00          | 	byte	0
27941                 | LR__4315
27941     2D          | 	byte	"-"
27942     00          | 	byte	0
27943                 | LR__4316
27943     3C          | 	byte	"<"
27944     00          | 	byte	0
27945                 | LR__4317
27945     3E          | 	byte	">"
27946     00          | 	byte	0
27947                 | LR__4318
27947     22          | 	byte	34
27948     00          | 	byte	0
27949                 | LR__4319
27949     22          | 	byte	34
2794a     00          | 	byte	0
2794b                 | LR__4320
2794b                 | 	byte	
2794b     00          | 	byte	0
2794c                 | LR__4321
2794c     6C 6F 61 64 | 	byte	"load"
27950     00          | 	byte	0
27951                 | LR__4322
27951     73 61 76 65 | 	byte	"save"
27955     00          | 	byte	0
27956                 | LR__4323
27956     62 72 75 6E | 	byte	"brun"
2795a     00          | 	byte	0
2795b                 | LR__4324
2795b     6C 6F 2E    | 	byte	"lo."
2795e     00          | 	byte	0
2795f                 | LR__4325
2795f     73 2E       | 	byte	"s."
27961     00          | 	byte	0
27962                 | LR__4326
27962     62 72 2E    | 	byte	"br."
27965     00          | 	byte	0
27966                 | LR__4327
27966     6D 6F 75 73 
2796a     65          | 	byte	"mouse"
2796b     00          | 	byte	0
2796c                 | LR__4328
2796c     63 75 72 73 
27970     6F 72       | 	byte	"cursor"
27972     00          | 	byte	0
27973                 | LR__4329
27973     63 6C 69 63 
27977     6B          | 	byte	"click"
27978     00          | 	byte	0
27979                 | LR__4330
27979     6F 6E       | 	byte	"on"
2797b     00          | 	byte	0
2797c                 | LR__4331
2797c     31          | 	byte	"1"
2797d     00          | 	byte	0
2797e                 | LR__4332
2797e     6F 66 66    | 	byte	"off"
27981     00          | 	byte	0
27982                 | LR__4333
27982     30          | 	byte	"0"
27983     00          | 	byte	0
27984                 | LR__4334
27984     6D 6F 64 65 | 	byte	"mode"
27988     00          | 	byte	0
27989                 | LR__4335
27989     6D 2E       | 	byte	"m."
2798b     00          | 	byte	0
2798c                 | LR__4336
2798c     61 74 61 72 
27990     69          | 	byte	"atari"
27991     00          | 	byte	0
27992                 | LR__4337
27992     30          | 	byte	"0"
27993     00          | 	byte	0
27994                 | LR__4338
27994     70 63 5F 61 
27998     6D 62 65 72 | 	byte	"pc_amber"
2799c     00          | 	byte	0
2799d                 | LR__4339
2799d     31          | 	byte	"1"
2799e     00          | 	byte	0
2799f                 | LR__4340
2799f     70 63 5F 67 
279a3     72 65 65 6E | 	byte	"pc_green"
279a7     00          | 	byte	0
279a8                 | LR__4341
279a8     32          | 	byte	"2"
279a9     00          | 	byte	0
279aa                 | LR__4342
279aa     70 63 5F 77 
279ae     68 69 74 65 | 	byte	"pc_white"
279b2     00          | 	byte	0
279b3                 | LR__4343
279b3     33          | 	byte	"3"
279b4     00          | 	byte	0
279b5                 | LR__4344
279b5     73 74       | 	byte	"st"
279b7     00          | 	byte	0
279b8                 | LR__4345
279b8     34          | 	byte	"4"
279b9     00          | 	byte	0
279ba                 | LR__4346
279ba                 | 	byte	
279ba     00          | 	byte	0
279bb                 | LR__4347
279bb                 | 	byte	
279bb     00          | 	byte	0
279bc                 | LR__4348
279bc                 | 	byte	
279bc     00          | 	byte	0
279bd                 | LR__4349
279bd                 | 	byte	
279bd     00          | 	byte	0
279be                 | LR__4350
279be     20 55 73 65 
279c2     72 20 66 75 
279c6     6E 63 74 69 
279ca     6F 6E 73 20 
279ce     61 6E 64 20 
279d2     61 72 72 61 
279d6     79 73 20 6E 
279da     6F 74 20 79 
279de     65 74 20 69 
279e2     6D 70 6C 65 
279e6     6D 65 6E 74 
279ea     65 64       | 	byte	" User functions and arrays not yet implemented"
279ec     00          | 	byte	0
279ed                 | LR__4351
279ed                 | 	byte	
279ed     00          | 	byte	0
279ee                 | LR__4352
279ee                 | 	byte	
279ee     00          | 	byte	0
279ef                 | LR__4353
279ef     52 65 61 64 
279f3     79          | 	byte	"Ready"
279f4     00          | 	byte	0
279f5                 | LR__4354
279f5     2B          | 	byte	"+"
279f6     00          | 	byte	0
279f7                 | LR__4355
279f7     2D          | 	byte	"-"
279f8     00          | 	byte	0
279f9                 | LR__4356
279f9     6F 72       | 	byte	"or"
279fb     00          | 	byte	0
279fc                 | LR__4357
279fc     78 6F 72    | 	byte	"xor"
279ff     00          | 	byte	0
27a00                 | LR__4358
27a00     2A          | 	byte	"*"
27a01     00          | 	byte	0
27a02                 | LR__4359
27a02     2F          | 	byte	"/"
27a03     00          | 	byte	0
27a04                 | LR__4360
27a04     61 6E 64    | 	byte	"and"
27a07     00          | 	byte	0
27a08                 | LR__4361
27a08     64 69 76    | 	byte	"div"
27a0b     00          | 	byte	0
27a0c                 | LR__4362
27a0c     6D 6F 64    | 	byte	"mod"
27a0f     00          | 	byte	0
27a10                 | LR__4363
27a10     73 68 6C    | 	byte	"shl"
27a13     00          | 	byte	0
27a14                 | LR__4364
27a14     73 68 72    | 	byte	"shr"
27a17     00          | 	byte	0
27a18                 | LR__4365
27a18     5E          | 	byte	"^"
27a19     00          | 	byte	0
27a1a                 | LR__4366
27a1a     6E 6F 74    | 	byte	"not"
27a1d     00          | 	byte	0
27a1e                 | LR__4367
27a1e     40          | 	byte	"@"
27a1f     00          | 	byte	0
27a20                 | LR__4368
27a20     3D          | 	byte	"="
27a21     00          | 	byte	0
27a22                 | LR__4369
27a22     3E 3D       | 	byte	">="
27a24     00          | 	byte	0
27a25                 | LR__4370
27a25     3C 3D       | 	byte	"<="
27a27     00          | 	byte	0
27a28                 | LR__4371
27a28     3C          | 	byte	"<"
27a29     00          | 	byte	0
27a2a                 | LR__4372
27a2a     3E          | 	byte	">"
27a2b     00          | 	byte	0
27a2c                 | LR__4373
27a2c     3C 3E       | 	byte	"<>"
27a2e     00          | 	byte	0
27a2f                 | LR__4374
27a2f     2B 2B       | 	byte	"++"
27a31     00          | 	byte	0
27a32                 | LR__4375
27a32     2D 2D       | 	byte	"--"
27a34     00          | 	byte	0
27a35                 | LR__4376
27a35     2B          | 	byte	"+"
27a36     00          | 	byte	0
27a37                 | LR__4377
27a37     2D          | 	byte	"-"
27a38     00          | 	byte	0
27a39                 | LR__4378
27a39     3D          | 	byte	"="
27a3a     00          | 	byte	0
27a3b                 | LR__4379
27a3b     2C          | 	byte	","
27a3c     00          | 	byte	0
27a3d                 | LR__4380
27a3d     2A          | 	byte	"*"
27a3e     00          | 	byte	0
27a3f                 | LR__4381
27a3f     2F          | 	byte	"/"
27a40     00          | 	byte	0
27a41                 | LR__4382
27a41     3B          | 	byte	";"
27a42     00          | 	byte	0
27a43                 | LR__4383
27a43     22          | 	byte	34
27a44     00          | 	byte	0
27a45                 | LR__4384
27a45     5E          | 	byte	"^"
27a46     00          | 	byte	0
27a47                 | LR__4385
27a47     29          | 	byte	")"
27a48     00          | 	byte	0
27a49                 | LR__4386
27a49     28          | 	byte	"("
27a4a     00          | 	byte	0
27a4b                 | LR__4387
27a4b     3A          | 	byte	":"
27a4c     00          | 	byte	0
27a4d                 | LR__4388
27a4d     20          | 	byte	" "
27a4e     00          | 	byte	0
27a4f                 | LR__4389
27a4f     3E          | 	byte	">"
27a50     00          | 	byte	0
27a51                 | LR__4390
27a51     3C          | 	byte	"<"
27a52     00          | 	byte	0
27a53                 | LR__4391
27a53     3D          | 	byte	"="
27a54     00          | 	byte	0
27a55                 | LR__4392
27a55     62 65 65 70 | 	byte	"beep"
27a59     00          | 	byte	0
27a5a                 | LR__4393
27a5a     62 2E       | 	byte	"b."
27a5c     00          | 	byte	0
27a5d                 | LR__4394
27a5d     62 6F 78    | 	byte	"box"
27a60     00          | 	byte	0
27a61                 | LR__4395
27a61     62 72 75 6E | 	byte	"brun"
27a65     00          | 	byte	0
27a66                 | LR__4396
27a66     62 72 2E    | 	byte	"br."
27a69     00          | 	byte	0
27a6a                 | LR__4397
27a6a     63 69 72 63 
27a6e     6C 65       | 	byte	"circle"
27a70     00          | 	byte	0
27a71                 | LR__4398
27a71     63 69 2E    | 	byte	"ci."
27a74     00          | 	byte	0
27a75                 | LR__4399
27a75     63 6C 69 63 
27a79     6B          | 	byte	"click"
27a7a     00          | 	byte	0
27a7b                 | LR__4400
27a7b     63 6C 73    | 	byte	"cls"
27a7e     00          | 	byte	0
27a7f                 | LR__4401
27a7f     63 6F 6C 6F 
27a83     72          | 	byte	"color"
27a84     00          | 	byte	0
27a85                 | LR__4402
27a85     63 2E       | 	byte	"c."
27a87     00          | 	byte	0
27a88                 | LR__4403
27a88     63 73 61 76 
27a8c     65          | 	byte	"csave"
27a8d     00          | 	byte	0
27a8e                 | LR__4404
27a8e     63 73 2E    | 	byte	"cs."
27a91     00          | 	byte	0
27a92                 | LR__4405
27a92     63 75 72 73 
27a96     6F 72       | 	byte	"cursor"
27a98     00          | 	byte	0
27a99                 | LR__4406
27a99     64 65 66 73 
27a9d     6E 64       | 	byte	"defsnd"
27a9f     00          | 	byte	0
27aa0                 | LR__4407
27aa0     64 65 66 65 
27aa4     6E 76       | 	byte	"defenv"
27aa6     00          | 	byte	0
27aa7                 | LR__4408
27aa7     64 65 66 73 
27aab     70 72 69 74 
27aaf     65          | 	byte	"defsprite"
27ab0     00          | 	byte	0
27ab1                 | LR__4409
27ab1     64 73 2E    | 	byte	"ds."
27ab4     00          | 	byte	0
27ab5                 | LR__4410
27ab5     64 69 6D    | 	byte	"dim"
27ab8     00          | 	byte	0
27ab9                 | LR__4411
27ab9     64 69 72    | 	byte	"dir"
27abc     00          | 	byte	0
27abd                 | LR__4412
27abd     64 72 61 77 | 	byte	"draw"
27ac1     00          | 	byte	0
27ac2                 | LR__4413
27ac2     64 72 2E    | 	byte	"dr."
27ac5     00          | 	byte	0
27ac6                 | LR__4414
27ac6     65 6C 73 65 | 	byte	"else"
27aca     00          | 	byte	0
27acb                 | LR__4415
27acb     66 63 69 72 
27acf     63 6C 65    | 	byte	"fcircle"
27ad2     00          | 	byte	0
27ad3                 | LR__4416
27ad3     66 63 2E    | 	byte	"fc."
27ad6     00          | 	byte	0
27ad7                 | LR__4417
27ad7     66 69 6C 6C | 	byte	"fill"
27adb     00          | 	byte	0
27adc                 | LR__4418
27adc     66 69 2E    | 	byte	"fi."
27adf     00          | 	byte	0
27ae0                 | LR__4419
27ae0     66 6F 6E 74 | 	byte	"font"
27ae4     00          | 	byte	0
27ae5                 | LR__4420
27ae5     66 6F 72    | 	byte	"for"
27ae8     00          | 	byte	0
27ae9                 | LR__4421
27ae9     66 2E       | 	byte	"f."
27aeb     00          | 	byte	0
27aec                 | LR__4422
27aec     66 72 61 6D 
27af0     65          | 	byte	"frame"
27af1     00          | 	byte	0
27af2                 | LR__4423
27af2     66 72 2E    | 	byte	"fr."
27af5     00          | 	byte	0
27af6                 | LR__4424
27af6     67 6F 74 6F | 	byte	"goto"
27afa     00          | 	byte	0
27afb                 | LR__4425
27afb     67 2E       | 	byte	"g."
27afd     00          | 	byte	0
27afe                 | LR__4426
27afe     69 66       | 	byte	"if"
27b00     00          | 	byte	0
27b01                 | LR__4427
27b01     69 6E 6B    | 	byte	"ink"
27b04     00          | 	byte	0
27b05                 | LR__4428
27b05     69 2E       | 	byte	"i."
27b07     00          | 	byte	0
27b08                 | LR__4429
27b08     6C 69 73 74 | 	byte	"list"
27b0c     00          | 	byte	0
27b0d                 | LR__4430
27b0d     6C 2E       | 	byte	"l."
27b0f     00          | 	byte	0
27b10                 | LR__4431
27b10     6C 6F 61 64 | 	byte	"load"
27b14     00          | 	byte	0
27b15                 | LR__4432
27b15     6C 6F 2E    | 	byte	"lo."
27b18     00          | 	byte	0
27b19                 | LR__4433
27b19     6D 6F 64 65 | 	byte	"mode"
27b1d     00          | 	byte	0
27b1e                 | LR__4434
27b1e     6D 2E       | 	byte	"m."
27b20     00          | 	byte	0
27b21                 | LR__4435
27b21     6D 6F 75 73 
27b25     65          | 	byte	"mouse"
27b26     00          | 	byte	0
27b27                 | LR__4436
27b27     6E 65 77    | 	byte	"new"
27b2a     00          | 	byte	0
27b2b                 | LR__4437
27b2b     6E 65 78 74 | 	byte	"next"
27b2f     00          | 	byte	0
27b30                 | LR__4438
27b30     6E 2E       | 	byte	"n."
27b32     00          | 	byte	0
27b33                 | LR__4439
27b33     70 61 70 65 
27b37     72          | 	byte	"paper"
27b38     00          | 	byte	0
27b39                 | LR__4440
27b39     70 2E       | 	byte	"p."
27b3b     00          | 	byte	0
27b3c                 | LR__4441
27b3c     70 69 6E 66 
27b40     6C 6F 61 74 | 	byte	"pinfloat"
27b44     00          | 	byte	0
27b45                 | LR__4442
27b45     70 69 6E 68 
27b49     69          | 	byte	"pinhi"
27b4a     00          | 	byte	0
27b4b                 | LR__4443
27b4b     70 69 6E 6C 
27b4f     6F          | 	byte	"pinlo"
27b50     00          | 	byte	0
27b51                 | LR__4444
27b51     70 69 6E 73 
27b55     74 61 72 74 | 	byte	"pinstart"
27b59     00          | 	byte	0
27b5a                 | LR__4445
27b5a     70 69 6E 74 
27b5e     6F 67 67 6C 
27b62     65          | 	byte	"pintoggle"
27b63     00          | 	byte	0
27b64                 | LR__4446
27b64     70 69 6E 77 
27b68     72 69 74 65 | 	byte	"pinwrite"
27b6c     00          | 	byte	0
27b6d                 | LR__4447
27b6d     70 6C 61 79 | 	byte	"play"
27b71     00          | 	byte	0
27b72                 | LR__4448
27b72     70 6C 6F 74 | 	byte	"plot"
27b76     00          | 	byte	0
27b77                 | LR__4449
27b77     70 6C 2E    | 	byte	"pl."
27b7a     00          | 	byte	0
27b7b                 | LR__4450
27b7b     70 6F 73 69 
27b7f     74 69 6F 6E | 	byte	"position"
27b83     00          | 	byte	0
27b84                 | LR__4451
27b84     70 6F 73 2E 
27b88     09          | 	byte	"pos.",9
27b89     00          | 	byte	0
27b8a                 | LR__4452
27b8a     70 72 69 6E 
27b8e     74          | 	byte	"print"
27b8f     00          | 	byte	0
27b90                 | LR__4453
27b90     3F          | 	byte	"?"
27b91     00          | 	byte	0
27b92                 | LR__4454
27b92     72 75 6E    | 	byte	"run"
27b95     00          | 	byte	0
27b96                 | LR__4455
27b96     73 61 76 65 | 	byte	"save"
27b9a     00          | 	byte	0
27b9b                 | LR__4456
27b9b     73 2E       | 	byte	"s."
27b9d     00          | 	byte	0
27b9e                 | LR__4457
27b9e     73 70 72 69 
27ba2     74 65       | 	byte	"sprite"
27ba4     00          | 	byte	0
27ba5                 | LR__4458
27ba5     73 70 2E    | 	byte	"sp."
27ba8     00          | 	byte	0
27ba9                 | LR__4459
27ba9     74 68 65 6E | 	byte	"then"
27bad     00          | 	byte	0
27bae                 | LR__4460
27bae     77 61 69 74 
27bb2     6D 73       | 	byte	"waitms"
27bb4     00          | 	byte	0
27bb5                 | LR__4461
27bb5     77 61 69 74 
27bb9     63 6C 6F 63 
27bbd     6B          | 	byte	"waitclock"
27bbe     00          | 	byte	0
27bbf                 | LR__4462
27bbf     77 63 2E    | 	byte	"wc."
27bc2     00          | 	byte	0
27bc3                 | LR__4463
27bc3     77 61 69 74 
27bc7     76 62 6C    | 	byte	"waitvbl"
27bca     00          | 	byte	0
27bcb                 | LR__4464
27bcb     77 76 2E    | 	byte	"wv."
27bce     00          | 	byte	0
27bcf                 | LR__4465
27bcf     77 78 70 69 
27bd3     6E          | 	byte	"wxpin"
27bd4     00          | 	byte	0
27bd5                 | LR__4466
27bd5     77 79 70 69 
27bd9     6E          | 	byte	"wypin"
27bda     00          | 	byte	0
27bdb                 | LR__4467
27bdb     61 63 6F 73 | 	byte	"acos"
27bdf     00          | 	byte	0
27be0                 | LR__4468
27be0     61 73 69 6E | 	byte	"asin"
27be4     00          | 	byte	0
27be5                 | LR__4469
27be5     61 74 6E    | 	byte	"atn"
27be8     00          | 	byte	0
27be9                 | LR__4470
27be9     63 6F 73    | 	byte	"cos"
27bec     00          | 	byte	0
27bed                 | LR__4471
27bed     67 65 74 70 
27bf1     69 78 65 6C | 	byte	"getpixel"
27bf5     00          | 	byte	0
27bf6                 | LR__4472
27bf6     67 65 74 74 
27bfa     69 6D 65    | 	byte	"gettime"
27bfd     00          | 	byte	0
27bfe                 | LR__4473
27bfe     6D 6F 75 73 
27c02     65 6B       | 	byte	"mousek"
27c04     00          | 	byte	0
27c05                 | LR__4474
27c05     6D 6F 75 73 
27c09     65 77       | 	byte	"mousew"
27c0b     00          | 	byte	0
27c0c                 | LR__4475
27c0c     6D 6F 75 73 
27c10     65 78       | 	byte	"mousex"
27c12     00          | 	byte	0
27c13                 | LR__4476
27c13     6D 6F 75 73 
27c17     65 79       | 	byte	"mousey"
27c19     00          | 	byte	0
27c1a                 | LR__4477
27c1a     70 69 6E 72 
27c1e     65 61 64    | 	byte	"pinread"
27c21     00          | 	byte	0
27c22                 | LR__4478
27c22     72 64 70 69 
27c26     6E          | 	byte	"rdpin"
27c27     00          | 	byte	0
27c28                 | LR__4479
27c28     72 71 70 69 
27c2c     6E          | 	byte	"rqpin"
27c2d     00          | 	byte	0
27c2e                 | LR__4480
27c2e     72 6E 64    | 	byte	"rnd"
27c31     00          | 	byte	0
27c32                 | LR__4481
27c32     73 69 6E    | 	byte	"sin"
27c35     00          | 	byte	0
27c36                 | LR__4482
27c36     73 71 72    | 	byte	"sqr"
27c39     00          | 	byte	0
27c3a                 | LR__4483
27c3a     73 74 69 63 
27c3e     6B          | 	byte	"stick"
27c3f     00          | 	byte	0
27c40                 | LR__4484
27c40     73 74 72 69 
27c44     67          | 	byte	"strig"
27c45     00          | 	byte	0
27c46                 | LR__4485
27c46     74 61 6E    | 	byte	"tan"
27c49     00          | 	byte	0
27c4a                 | LR__4486
27c4a     61          | 	byte	"a"
27c4b     00          | 	byte	0
27c4c                 | LR__4487
27c4c     7A          | 	byte	"z"
27c4d     00          | 	byte	0
27c4e                 | LR__4488
27c4e     5F          | 	byte	"_"
27c4f     00          | 	byte	0
27c50                 | LR__4489
27c50     61          | 	byte	"a"
27c51     00          | 	byte	0
27c52                 | LR__4490
27c52     7A          | 	byte	"z"
27c53     00          | 	byte	0
27c54                 | LR__4491
27c54     30          | 	byte	"0"
27c55     00          | 	byte	0
27c56                 | LR__4492
27c56     39          | 	byte	"9"
27c57     00          | 	byte	0
27c58                 | LR__4493
27c58     5F          | 	byte	"_"
27c59     00          | 	byte	0
27c5a                 | LR__4494
27c5a     2E          | 	byte	"."
27c5b     00          | 	byte	0
27c5c                 | LR__4495
27c5c     61          | 	byte	"a"
27c5d     00          | 	byte	0
27c5e                 | LR__4496
27c5e     7A          | 	byte	"z"
27c5f     00          | 	byte	0
27c60                 | LR__4497
27c60     30          | 	byte	"0"
27c61     00          | 	byte	0
27c62                 | LR__4498
27c62     39          | 	byte	"9"
27c63     00          | 	byte	0
27c64                 | LR__4499
27c64     5F          | 	byte	"_"
27c65     00          | 	byte	0
27c66                 | LR__4500
27c66     24          | 	byte	"$"
27c67     00          | 	byte	0
27c68                 | LR__4501
27c68     25          | 	byte	"%"
27c69     00          | 	byte	0
27c6a                 | LR__4502
27c6a     21          | 	byte	"!"
27c6b     00          | 	byte	0
27c6c                 | LR__4503
27c6c     30          | 	byte	"0"
27c6d     00          | 	byte	0
27c6e                 | LR__4504
27c6e     39          | 	byte	"9"
27c6f     00          | 	byte	0
27c70                 | LR__4505
27c70     2E          | 	byte	"."
27c71     00          | 	byte	0
27c72                 | LR__4506
27c72     24          | 	byte	"$"
27c73     00          | 	byte	0
27c74                 | LR__4507
27c74     25          | 	byte	"%"
27c75     00          | 	byte	0
27c76                 | LR__4508
27c76     2D          | 	byte	"-"
27c77     00          | 	byte	0
27c78                 | LR__4509
27c78     2E          | 	byte	"."
27c79     00          | 	byte	0
27c7a                 | LR__4510
27c7a     30          | 	byte	"0"
27c7b     00          | 	byte	0
27c7c                 | LR__4511
27c7c     39          | 	byte	"9"
27c7d     00          | 	byte	0
27c7e                 | LR__4512
27c7e     5F          | 	byte	"_"
27c7f     00          | 	byte	0
27c80                 | LR__4513
27c80     2E          | 	byte	"."
27c81     00          | 	byte	0
27c82                 | LR__4514
27c82     45          | 	byte	"E"
27c83     00          | 	byte	0
27c84                 | LR__4515
27c84     65          | 	byte	"e"
27c85     00          | 	byte	0
27c86                 | LR__4516
27c86     2D          | 	byte	"-"
27c87     00          | 	byte	0
27c88                 | LR__4517
27c88     2D          | 	byte	"-"
27c89     00          | 	byte	0
27c8a                 | LR__4518
27c8a     65          | 	byte	"e"
27c8b     00          | 	byte	0
27c8c                 | LR__4519
27c8c     2E          | 	byte	"."
27c8d     00          | 	byte	0
27c8e                 | LR__4520
27c8e     45          | 	byte	"E"
27c8f     00          | 	byte	0
27c90                 | LR__4521
27c90     65          | 	byte	"e"
27c91     00          | 	byte	0
27c92                 | LR__4522
27c92     30          | 	byte	"0"
27c93     00          | 	byte	0
27c94                 | LR__4523
27c94     39          | 	byte	"9"
27c95     00          | 	byte	0
27c96                 | LR__4524
27c96     24          | 	byte	"$"
27c97     00          | 	byte	0
27c98                 | LR__4525
27c98     25          | 	byte	"%"
27c99     00          | 	byte	0
27c9a                 | LR__4526
27c9a     2D          | 	byte	"-"
27c9b     00          | 	byte	0
27c9c                 | LR__4527
27c9c     30          | 	byte	"0"
27c9d     00          | 	byte	0
27c9e                 | LR__4528
27c9e     39          | 	byte	"9"
27c9f     00          | 	byte	0
27ca0                 | LR__4529
27ca0     5F          | 	byte	"_"
27ca1     00          | 	byte	0
27ca2                 | LR__4530
27ca2     30          | 	byte	"0"
27ca3     00          | 	byte	0
27ca4                 | LR__4531
27ca4     39          | 	byte	"9"
27ca5     00          | 	byte	0
27ca6                 | LR__4532
27ca6     5F          | 	byte	"_"
27ca7     00          | 	byte	0
27ca8                 | LR__4533
27ca8     22          | 	byte	34
27ca9     00          | 	byte	0
27caa                 | LR__4534
27caa     22          | 	byte	34
27cab     00          | 	byte	0
27cac                 | LR__4535
27cac     28          | 	byte	"("
27cad     00          | 	byte	0
27cae                 | LR__4536
27cae     61 73       | 	byte	"as"
27cb0     00          | 	byte	0
27cb1                 | LR__4537
27cb1     61 73       | 	byte	"as"
27cb3     00          | 	byte	0
27cb4                 | LR__4538
27cb4     2C          | 	byte	","
27cb5     00          | 	byte	0
27cb6                 | LR__4539
27cb6     29          | 	byte	")"
27cb7     00          | 	byte	0
27cb8                 | LR__4540
27cb8     29          | 	byte	")"
27cb9     00          | 	byte	0
27cba                 | LR__4541
27cba     61 73       | 	byte	"as"
27cbc     00          | 	byte	0
27cbd                 | LR__4542
27cbd     62 79 74 65 | 	byte	"byte"
27cc1     00          | 	byte	0
27cc2                 | LR__4543
27cc2     75 62 79 74 
27cc6     65          | 	byte	"ubyte"
27cc7     00          | 	byte	0
27cc8                 | LR__4544
27cc8     73 68 6F 72 
27ccc     74          | 	byte	"short"
27ccd     00          | 	byte	0
27cce                 | LR__4545
27cce     75 73 68 6F 
27cd2     72 74       | 	byte	"ushort"
27cd4     00          | 	byte	0
27cd5                 | LR__4546
27cd5     6C 6F 6E 67 | 	byte	"long"
27cd9     00          | 	byte	0
27cda                 | LR__4547
27cda     69 6E 74 65 
27cde     67 65 72    | 	byte	"integer"
27ce1     00          | 	byte	0
27ce2                 | LR__4548
27ce2     75 6C 6F 6E 
27ce6     67          | 	byte	"ulong"
27ce7     00          | 	byte	0
27ce8                 | LR__4549
27ce8     69 6E 74 36 
27cec     34          | 	byte	"int64"
27ced     00          | 	byte	0
27cee                 | LR__4550
27cee     75 69 6E 74 
27cf2     36 34       | 	byte	"uint64"
27cf4     00          | 	byte	0
27cf5                 | LR__4551
27cf5     73 69 6E 67 
27cf9     6C 65       | 	byte	"single"
27cfb     00          | 	byte	0
27cfc                 | LR__4552
27cfc     64 6F 75 62 
27d00     6C 65       | 	byte	"double"
27d02     00          | 	byte	0
27d03                 | LR__4553
27d03     73 74 72 69 
27d07     6E 67       | 	byte	"string"
27d09     00          | 	byte	0
27d0a                 | LR__4554
27d0a     74 6F       | 	byte	"to"
27d0c     00          | 	byte	0
27d0d                 | LR__4555
27d0d     73 74 65 70 | 	byte	"step"
27d11     00          | 	byte	0
27d12                 | LR__4556
27d12     57 65 20 68 
27d16     61 76 65 20 
27d1a     61 20 73 6C 
27d1e     6F 77 20 67 
27d22     6F 74 6F 2C 
27d26     20 74 6F 64 
27d2a     6F 20 20    | 	byte	"We have a slow goto, todo  "
27d2d     00          | 	byte	0
27d2e                 | LR__4557
27d2e     6E 6F 6E 61 
27d32     6D 65 2E 62 
27d36     61 73       | 	byte	"noname.bas"
27d38     00          | 	byte	0
27d39                 | LR__4558
27d39                 | 	byte	
27d39     00          | 	byte	0
27d3a                 | LR__4559
27d3a     6E 6F 6E 61 
27d3e     6D 65 2E 62 
27d42     61 73       | 	byte	"noname.bas"
27d44     00          | 	byte	0
27d45                 | LR__4560
27d45     2F          | 	byte	"/"
27d46     00          | 	byte	0
27d47                 | LR__4561
27d47                 | 	byte	
27d47     00          | 	byte	0
27d48                 | LR__4562
27d48                 | 	byte	
27d48     00          | 	byte	0
27d49                 | LR__4563
27d49     6E 6F 6E 61 
27d4d     6D 65 2E 62 
27d51     61 73       | 	byte	"noname.bas"
27d53     00          | 	byte	0
27d54                 | LR__4564
27d54     2F          | 	byte	"/"
27d55     00          | 	byte	0
27d56                 | LR__4565
27d56     53 79 73 74 
27d5a     65 6D 20 65 
27d5e     72 72 6F 72 
27d62     20          | 	byte	"System error "
27d63     00          | 	byte	0
27d64                 | LR__4566
27d64     3A 20       | 	byte	": "
27d66     00          | 	byte	0
27d67                 | LR__4567
27d67     2F          | 	byte	"/"
27d68     00          | 	byte	0
27d69                 | LR__4568
27d69     30          | 	byte	"0"
27d6a     00          | 	byte	0
27d6b                 | LR__4569
27d6b     39          | 	byte	"9"
27d6c     00          | 	byte	0
27d6d                 | LR__4570
27d6d                 | 	byte	
27d6d     00          | 	byte	0
27d6e                 | LR__4571
27d6e     53 74 6F 70 
27d72     70 65 64 20 
27d76     61 74 20 6C 
27d7a     69 6E 65 20 | 	byte	"Stopped at line "
27d7e     00          | 	byte	0
27d7f                 | LR__4572
27d7f                 | 	byte	
27d7f     00          | 	byte	0
27d80                 | LR__4573
27d80                 | 	byte	
27d80     00          | 	byte	0
27d81                 | LR__4574
27d81     2F 73 64 2F 
27d85     6D 65 64 69 
27d89     61 2F 68 2F | 	byte	"/sd/media/h/"
27d8d     00          | 	byte	0
27d8e                 | LR__4575
27d8e     53 79 73 74 
27d92     65 6D 20 65 
27d96     72 72 6F 72 
27d9a     20          | 	byte	"System error "
27d9b     00          | 	byte	0
27d9c                 | LR__4576
27d9c     3A 20       | 	byte	": "
27d9e     00          | 	byte	0
27d9f                 | LR__4577
27d9f                 | 	byte	
27d9f     00          | 	byte	0
27da0                 | LR__4578
27da0                 | 	byte	
27da0     00          | 	byte	0
27da1                 | LR__4579
27da1     2F 73 64 2F 
27da5     6D 65 64 69 
27da9     61 2F 73 2F | 	byte	"/sd/media/s/"
27dad     00          | 	byte	0
27dae                 | LR__4580
27dae     53 79 73 74 
27db2     65 6D 20 65 
27db6     72 72 6F 72 
27dba     20          | 	byte	"System error "
27dbb     00          | 	byte	0
27dbc                 | LR__4581
27dbc     3A 20       | 	byte	": "
27dbe     00          | 	byte	0
27dbf                 | LR__4582
27dbf     45 72 72 6F 
27dc3     72 20       | 	byte	"Error "
27dc5     00          | 	byte	0
27dc6                 | LR__4583
27dc6     3A 20       | 	byte	": "
27dc8     00          | 	byte	0
27dc9                 | LR__4584
27dc9                 | 	byte	
27dc9     00          | 	byte	0
27dca                 | LR__4585
27dca     72 6E 64 3A 
27dce     20          | 	byte	"rnd: "
27dcf     00          | 	byte	0
27dd0                 | LR__4586
27dd0     72 6E 64 3A 
27dd4     20          | 	byte	"rnd: "
27dd5     00          | 	byte	0
27dd6                 | LR__4587
27dd6     73 69 6E 3A 
27dda     20          | 	byte	"sin: "
27ddb     00          | 	byte	0
27ddc                 | LR__4588
27ddc     63 6F 73 3A 
27de0     20          | 	byte	"cos: "
27de1     00          | 	byte	0
27de2                 | LR__4589
27de2     74 61 6E 3A 
27de6     20          | 	byte	"tan: "
27de7     00          | 	byte	0
27de8                 | LR__4590
27de8     61 73 69 6E 
27dec     3A 20       | 	byte	"asin: "
27dee     00          | 	byte	0
27def                 | LR__4591
27def     61 63 6F 73 
27df3     3A 20       | 	byte	"acos: "
27df5     00          | 	byte	0
27df6                 | LR__4592
27df6     61 74 6E 3A 
27dfa     20          | 	byte	"atn: "
27dfb     00          | 	byte	0
27dfc                 | LR__4593
27dfc     73 71 72 3A 
27e00     20          | 	byte	"sqr: "
27e01     00          | 	byte	0
27e02                 | LR__4594
27e02     73 74 69 63 
27e06     6B 3A 20    | 	byte	"stick: "
27e09     00          | 	byte	0
27e0a                 | LR__4595
27e0a     73 74 72 69 
27e0e     67 3A 20    | 	byte	"strig: "
27e11     00          | 	byte	0
27e12                 | LR__4596
27e12     67 65 74 70 
27e16     69 78 65 6C 
27e1a     3A 20       | 	byte	"getpixel: "
27e1c     00          | 	byte	0
27e1d                 | LR__4597
27e1d                 | 	byte	
27e1d     00          | 	byte	0
27e1e                 | LR__4598
27e1e     2F 73 64 2F 
27e22     62 61 73    | 	byte	"/sd/bas"
27e25     00          | 	byte	0
27e26                 | LR__4599
27e26     57 6F 72 6B 
27e2a     69 6E 67 20 
27e2e     64 69 72 65 
27e32     63 74 6F 72 
27e36     79 3A 20    | 	byte	"Working directory: "
27e39     00          | 	byte	0
27e3a                 | LR__4600
27e3a     2A          | 	byte	"*"
27e3b     00          | 	byte	0
27e3c                 | LR__4601
27e3c                 | 	byte	
27e3c     00          | 	byte	0
27e3d                 | LR__4602
27e3d     5B 64 69 72 
27e41     5D 20       | 	byte	"[dir] "
27e43     00          | 	byte	0
27e44                 | LR__4603
27e44     2A          | 	byte	"*"
27e45     00          | 	byte	0
27e46                 | LR__4604
27e46                 | 	byte	
27e46     00          | 	byte	0
27e47                 | LR__4605
27e47     2D 2D 2D 2D 
27e4b     2D 6D 6F 72 
27e4f     65 2C 20 70 
27e53     72 65 73 73 
27e57     20 61 6E 79 
27e5b     20 6B 65 79 | 	byte	"-----more, press any key"
27e5f     00          | 	byte	0
27e60                 | LR__4606
27e60     20 20 20 20 
      ...             
27e78     20 20 20 20 
27e7c     20          | 	byte	"                             "
27e7d     00          | 	byte	0
27e7e                 | LR__4607
27e7e     2F          | 	byte	"/"
27e7f     00          | 	byte	0
27e80                 | LR__4608
27e80     2F 73 64 2F 
27e84     62 69 6E 2F | 	byte	"/sd/bin/"
27e88     00          | 	byte	0
27e89                 | LR__4609
27e89     53 79 73 74 
27e8d     65 6D 20 65 
27e91     72 72 6F 72 
27e95     20          | 	byte	"System error "
27e96     00          | 	byte	0
27e97                 | LR__4610
27e97     3A 20       | 	byte	": "
27e99     00          | 	byte	0
27e9a                 | LR__4611
27e9a                 | 	byte	
27e9a     00          | 	byte	0
27e9b                 | LR__4612
27e9b     45 78 70 65 
27e9f     63 74 65 64 
27ea3     20 6E 75 6D 
27ea7     62 65 72 2C 
27eab     20 67 6F 74 
27eaf     20 73 6F 6D 
27eb3     65 74 68 69 
27eb7     6E 67 20 65 
27ebb     6C 73 65 2E | 	byte	"Expected number, got something else."
27ebf     00          | 	byte	0
27ec0                 | LR__4613
27ec0     43 61 6E 6E 
27ec4     6F 74 20 61 
27ec8     64 64 20 61 
27ecc     20 6E 75 6D 
27ed0     62 65 72 20 
27ed4     74 6F 20 61 
27ed8     20 73 74 72 
27edc     69 6E 67 2E | 	byte	"Cannot add a number to a string."
27ee0     00          | 	byte	0
27ee1                 | LR__4614
27ee1     43 61 6E 6E 
27ee5     6F 74 20 73 
27ee9     75 62 73 74 
27eed     72 61 63 74 
27ef1     20 73 74 72 
27ef5     69 6E 67 73 
27ef9     2E          | 	byte	"Cannot substract strings."
27efa     00          | 	byte	0
27efb                 | LR__4615
27efb     55 6E 6B 6E 
27eff     6F 77 6E 20 
27f03     65 72 72 6F 
27f07     72 20 77 68 
27f0b     69 6C 65 20 
27f0f     61 64 64 69 
27f13     6E 67 2E    | 	byte	"Unknown error while adding."
27f16     00          | 	byte	0
27f17                 | LR__4616
27f17     55 6E 6B 6E 
27f1b     6F 77 6E 20 
27f1f     65 72 72 6F 
27f23     72 20 77 68 
27f27     69 6C 65 20 
27f2b     73 75 62 73 
27f2f     74 72 61 63 
27f33     74 69 6E 67 
27f37     2E          | 	byte	"Unknown error while substracting."
27f38     00          | 	byte	0
27f39                 | LR__4617
27f39     43 61 6E 6E 
27f3d     6F 74 20 64 
27f41     6F 20 6C 6F 
27f45     67 69 63 20 
27f49     6F 70 65 72 
27f4d     61 74 69 6F 
27f51     6E 20 6F 6E 
27f55     20 73 74 72 
27f59     69 6E 67 20 
27f5d     6F 72 20 66 
27f61     6C 6F 61 74 
27f65     2E          | 	byte	"Cannot do logic operation on string or float."
27f66     00          | 	byte	0
27f67                 | LR__4618
27f67     55 6E 6B 6E 
27f6b     6F 77 6E 20 
27f6f     65 72 72 6F 
27f73     72 20 77 68 
27f77     69 6C 65 20 
27f7b     64 6F 69 6E 
27f7f     67 20 6C 6F 
27f83     67 69 63 20 
27f87     6F 70 65 72 
27f8b     61 74 69 6F 
27f8f     6E 2E       | 	byte	"Unknown error while doing logic operation."
27f91     00          | 	byte	0
27f92                 | LR__4619
27f92     43 61 6E 6E 
27f96     6F 74 20 6D 
27f9a     75 6C 74 69 
27f9e     70 6C 79 20 
27fa2     73 74 72 69 
27fa6     6E 67 73 2E | 	byte	"Cannot multiply strings."
27faa     00          | 	byte	0
27fab                 | LR__4620
27fab     55 6E 6B 6E 
27faf     6F 77 6E 20 
27fb3     65 72 72 6F 
27fb7     72 20 77 68 
27fbb     69 6C 65 20 
27fbf     6D 75 6C 74 
27fc3     69 70 6C 79 
27fc7     69 6E 67 2E | 	byte	"Unknown error while multiplying."
27fcb     00          | 	byte	0
27fcc                 | LR__4621
27fcc     43 61 6E 6E 
27fd0     6F 74 20 64 
27fd4     69 76 69 64 
27fd8     65 20 73 74 
27fdc     72 69 6E 67 
27fe0     73 2E       | 	byte	"Cannot divide strings."
27fe2     00          | 	byte	0
27fe3                 | LR__4622
27fe3     55 6E 6B 6E 
27fe7     6F 77 6E 20 
27feb     65 72 72 6F 
27fef     72 20 77 68 
27ff3     69 6C 65 20 
27ff7     64 69 76 69 
27ffb     64 69 6E 67 
27fff     2E          | 	byte	"Unknown error while dividing."
28000     00          | 	byte	0
28001                 | LR__4623
28001     43 61 6E 6E 
28005     6F 74 20 63 
28009     6F 6D 70 75 
2800d     74 65 20 61 
28011     20 70 6F 77 
28015     65 72 20 6F 
28019     66 20 61 20 
2801d     73 74 72 69 
28021     6E 67 2E    | 	byte	"Cannot compute a power of a string."
28024     00          | 	byte	0
28025                 | LR__4624
28025     55 6E 6B 6E 
28029     6F 77 6E 20 
2802d     65 72 72 6F 
28031     72 20 77 68 
28035     69 6C 65 20 
28039     63 6F 6D 70 
2803d     75 74 69 6E 
28041     67 20 61 20 
28045     70 6F 77 65 
28049     72 2E       | 	byte	"Unknown error while computing a power."
2804b     00          | 	byte	0
2804c                 | LR__4625
2804c     52 69 67 68 
28050     74 20 70 61 
28054     72 65 6E 74 
28058     68 65 73 69 
2805c     73 20 65 78 
28060     70 65 63 74 
28064     65 64 2E    | 	byte	"Right parenthesis expected."
28067     00          | 	byte	0
28068                 | LR__4626
28068     45 78 70 65 
2806c     63 74 65 64 
28070     20 73 74 72 
28074     69 6E 67 2E | 	byte	"Expected string."
28078     00          | 	byte	0
28079                 | LR__4627
28079     45 78 70 65 
2807d     63 74 65 64 
28081     20 66 6C 6F 
28085     61 74 2E    | 	byte	"Expected float."
28088     00          | 	byte	0
28089                 | LR__4628
28089     45 78 70 65 
2808d     63 74 65 64 
28091     20 75 6E 73 
28095     69 67 6E 65 
28099     64 20 69 6E 
2809d     74 65 67 65 
280a1     72 2E       | 	byte	"Expected unsigned integer."
280a3     00          | 	byte	0
280a4                 | LR__4629
280a4     45 78 70 65 
280a8     63 74 65 64 
280ac     20 69 6E 74 
280b0     65 67 65 72 
280b4     2E          | 	byte	"Expected integer."
280b5     00          | 	byte	0
280b6                 | LR__4630
280b6     4E 6F 20 6D 
280ba     6F 72 65 20 
280be     76 61 72 69 
280c2     61 62 6C 65 
280c6     20 73 6C 6F 
280ca     74 73 2E    | 	byte	"No more variable slots."
280cd     00          | 	byte	0
280ce                 | LR__4631
280ce     56 61 72 69 
280d2     61 62 6C 65 
280d6     20 6E 6F 74 
280da     20 66 6F 75 
280de     6E 64 2E    | 	byte	"Variable not found."
280e1     00          | 	byte	0
280e2                 | LR__4632
280e2     43 6F 6D 6D 
280e6     61 20 65 78 
280ea     70 65 63 74 
280ee     65 64 2E    | 	byte	"Comma expected."
280f1     00          | 	byte	0
280f2                 | LR__4633
280f2     43 6F 6D 6D 
280f6     61 20 6F 72 
280fa     20 73 65 6D 
280fe     69 63 6F 6C 
28102     6F 6E 20 65 
28106     78 70 65 63 
2810a     74 65 64 2E | 	byte	"Comma or semicolon expected."
2810e     00          | 	byte	0
2810f                 | LR__4634
2810f     55 6E 6B 6E 
28113     6F 77 6E 20 
28117     63 6F 6D 6D 
2811b     61 6E 64 2E | 	byte	"Unknown command."
2811f     00          | 	byte	0
28120                 | LR__4635
28120     53 74 61 63 
28124     6B 20 75 6E 
28128     64 65 72 66 
2812c     6C 6F 77 2E | 	byte	"Stack underflow."
28130     00          | 	byte	0
28131                 | LR__4636
28131     43 61 6E 6E 
28135     6F 74 20 65 
28139     78 65 63 75 
2813d     74 65 20 67 
28141     6F 74 6F 20 
28145     69 6E 20 74 
28149     68 65 20 69 
2814d     6D 6D 65 64 
28151     69 61 74 65 
28155     20 6D 6F 64 
28159     65 2E       | 	byte	"Cannot execute goto in the immediate mode."
2815b     00          | 	byte	0
2815c                 | LR__4637
2815c     43 61 6E 6E 
28160     6F 74 20 6C 
28164     6F 61 64 20 
28168     66 72 6F 6D 
2816c     20 74 68 69 
28170     73 20 66 69 
28174     6C 65 2E    | 	byte	"Cannot load from this file."
28177     00          | 	byte	0
28178                 | LR__4638
28178     54 68 65 20 
2817c     70 72 6F 67 
28180     72 61 6D 20 
28184     69 73 20 65 
28188     6D 70 74 79 
2818c     2E          | 	byte	"The program is empty."
2818d     00          | 	byte	0
2818e                 | LR__4639
2818e     49 66 20 61 
28192     66 74 65 72 
28196     20 69 66 2E | 	byte	"If after if."
2819a     00          | 	byte	0
2819b                 | LR__4640
2819b     45 6D 70 74 
2819f     79 20 65 78 
281a3     70 72 65 73 
281a7     73 69 6F 6E 
281ab     2E          | 	byte	"Empty expression."
281ac     00          | 	byte	0
281ad                 | LR__4641
281ad     53 74 72 69 
281b1     6E 67 20 65 
281b5     78 70 65 63 
281b9     74 65 64 2E | 	byte	"String expected."
281bd     00          | 	byte	0
281be                 | LR__4642
281be     49 6E 74 65 
281c2     72 70 72 65 
281c6     74 65 72 20 
281ca     69 6E 74 65 
281ce     72 6E 61 6C 
281d2     20 65 72 72 
281d6     6F 72 2E    | 	byte	"Interpreter internal error."
281d9     00          | 	byte	0
281da                 | LR__4643
281da     45 78 70 65 
281de     63 74 65 64 
281e2     20 61 73 73 
281e6     69 67 6E 2E | 	byte	"Expected assign."
281ea     00          | 	byte	0
281eb                 | LR__4644
281eb     45 78 70 65 
281ef     63 74 65 64 
281f3     20 27 74 6F 
281f7     27 2E       | 	byte	"Expected 'to'."
281f9     00          | 	byte	0
281fa                 | LR__4645
281fa     45 78 70 65 
281fe     63 74 65 64 
28202     20 69 6E 74 
28206     65 67 65 72 
2820a     20 76 61 72 
2820e     69 61 62 6C 
28212     65 2E       | 	byte	"Expected integer variable."
28214     00          | 	byte	0
28215                 | LR__4646
28215     55 6E 69 6E 
28219     69 74 69 61 
2821d     6C 69 7A 65 
28221     64 20 76 61 
28225     72 69 61 62 
28229     6C 65 20 69 
2822d     6E 20 27 6E 
28231     65 78 74 27 
28235     2C 20 75 73 
28239     65 20 27 66 
2823d     6F 72 27 20 
28241     62 65 66 6F 
28245     72 65 2E    | 	byte	"Uninitialized variable in 'next', use 'for' before."
28248     00          | 	byte	0
28249                 | LR__4647
28249     4E 6F 20 6D 
2824d     6F 72 65 20 
28251     73 6C 6F 74 
28255     73 20 66 6F 
28259     72 20 27 66 
2825d     6F 72 27 2E | 	byte	"No more slots for 'for'."
28261     00          | 	byte	0
28262                 | LR__4648
28262     27 4E 65 78 
28266     74 27 20 64 
2826a     6F 65 73 6E 
2826e     27 74 20 6D 
28272     61 74 63 68 
28276     20 27 66 6F 
2827a     72 27 2E    | 	byte	"'Next' doesn't match 'for'."
2827d     00          | 	byte	0
2827e                 | LR__4649
2827e     27 47 6F 74 
28282     6F 27 20 74 
28286     61 72 67 65 
2828a     74 20 6C 69 
2828e     6E 65 20 6E 
28292     6F 74 20 66 
28296     6F 75 6E 64 
2829a     2E          | 	byte	"'Goto' target line not found."
2829b     00          | 	byte	0
2829c                 | LR__4650
2829c     42 61 64 20 
282a0     6E 75 6D 62 
282a4     65 72 20 6F 
282a8     66 20 70 61 
282ac     72 61 6D 65 
282b0     74 65 72 73 | 	byte	"Bad number of parameters"
282b4     00          | 	byte	0
282b5                 | LR__4651
282b5     46 75 6E 63 
282b9     74 69 6F 6E 
282bd     20 75 6E 64 
282c1     65 66 69 6E 
282c5     65 64 20 66 
282c9     6F 72 20 73 
282cd     74 72 69 6E 
282d1     67 73       | 	byte	"Function undefined for strings"
282d3     00          | 	byte	0
282d4                 | LR__4652
282d4     42 61 64 20 
282d8     70 61 72 61 
282dc     6D 65 74 65 
282e0     72 2E       | 	byte	"Bad parameter."
282e2     00          | 	byte	0
282e3                 | LR__4653
282e3     43 61 6E 6E 
282e7     6F 74 20 64 
282eb     65 63 6C 61 
282ef     72 65 20 61 
282f3     6E 20 61 72 
282f7     72 61 79 3A 
282fb     20 74 68 65 
282ff     20 76 61 72 
28303     69 61 62 6C 
28307     65 20 65 78 
2830b     69 73 74 73 
2830f     2E          | 	byte	"Cannot declare an array: the variable exists."
28310     00          | 	byte	0
28311                 | LR__4654
28311     45 78 70 65 
28315     63 74 65 64 
28319     20 27 28 27 
2831d     2E          | 	byte	"Expected '('."
2831e     00          | 	byte	0
2831f                 | LR__4655
2831f     45 78 70 65 
28323     63 74 65 64 
28327     20 27 29 27 
2832b     20 6F 72 20 
2832f     27 2C 27 2E | 	byte	"Expected ')' or ','."
28333     00          | 	byte	0
28334                 | LR__4656
28334     4E 6F 20 6D 
28338     6F 72 65 20 
2833c     74 68 61 6E 
28340     20 33 20 64 
28344     69 6D 65 6E 
28348     73 69 6F 6E 
2834c     73 20 73 75 
28350     70 70 6F 72 
28354     74 65 64    | 	byte	"No more than 3 dimensions supported"
28357     00          | 	byte	0
28358                 | LR__4657
28358     56 61 72 69 
2835c     61 62 6C 65 
28360     20 6E 61 6D 
28364     65 20 65 78 
28368     70 65 63 74 
2836c     65 64       | 	byte	"Variable name expected"
2836e     00          | 	byte	0
2836f                 | LR__4658
2836f     54 79 70 65 
28373     20 6E 61 6D 
28377     65 20 65 78 
2837b     70 65 63 74 
2837f     65 64       | 	byte	"Type name expected"
28381     00          | 	byte	0
28382                 | LR__4659
28382     54 79 70 65 
28386     20 6E 6F 74 
2838a     20 73 75 70 
2838e     70 6F 72 74 
28392     65 64 20 79 
28396     65 74       | 	byte	"Type not supported yet"
28398     00          | 	byte	0
28399                 | LR__4660
28399     45 72 72 6F 
2839d     72 20       | 	byte	"Error "
2839f     00          | 	byte	0
283a0                 | LR__4661
283a0     3A 20       | 	byte	": "
283a2     00          | 	byte	0
283a3                 | LR__4662
283a3     2F 73 64    | 	byte	"/sd"
283a6     00          | 	byte	0
283a7                 | LR__4663
283a7     2F 73 64 2F 
283ab     62 61 73    | 	byte	"/sd/bas"
283ae     00          | 	byte	0
283af                 | LR__4664
283af     2F 73 64 2F 
283b3     62 61 73    | 	byte	"/sd/bas"
283b6     00          | 	byte	0
283b7                 | LR__4665
283b7     20 42 41 53 
283bb     49 43 20 62 
283bf     79 74 65 73 
283c3     20 66 72 65 
283c7     65          | 	byte	" BASIC bytes free"
283c8     00          | 	byte	0
283c9                 | LR__4666
283c9     52 65 61 64 
283cd     79          | 	byte	"Ready"
283ce     00          | 	byte	0
283cf                 | LR__4667
283cf     20          | 	byte	" "
283d0     00          | 	byte	0
283d1                 | LR__4668
283d1     20          | 	byte	" "
283d2     00          | 	byte	0
283d3                 | LR__4669
283d3                 | 	byte	
283d3     00          | 	byte	0
283d4                 | LR__4670
283d4                 | 	byte	
283d4     00          | 	byte	0
283d5     00 00 00    | 	alignl
283d8                 | _dat_
283d8     00 00 00 00 
283dc     00 00 00 00 
283e0     00 00 00 00 
283e4     00 00 00 00 | 	byte	$00[16]
283e8     61 41 17 0E 
283ec     62 42 00 00 
283f0     63 43 19 10 
283f4     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
283f8     65 45 18 0F 
283fc     66 46 00 00 
28400     67 47 00 00 
28404     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
28408     69 49 00 00 
2840c     6A 4A 00 00 
28410     6B 4B 00 00 
28414     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
28418     6D 4D 00 00 
2841c     6E 4E 1A 11 
28420     6F 4F 1E 15 
28424     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
28428     71 51 00 00 
2842c     72 52 00 00 
28430     73 53 1B 12 
28434     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
28438     75 55 00 00 
2843c     76 56 00 00 
28440     77 57 00 00 
28444     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
28448     79 59 00 00 
2844c     7A 5A 1D 14 
28450     31 21 04 00 
28454     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
28458     33 23 06 00 
2845c     34 24 07 00 
28460     35 25 08 00 
28464     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
28468     37 26 0A 00 
2846c     38 2A 0B 00 
28470     39 28 0C 00 
28474     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
28478     8D 8D 00 00 
2847c     9B 9B 00 00 
28480     88 88 00 00 
28484     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
28488     20 20 00 00 
2848c     2D 5F 00 00 
28490     3D 2B 00 00 
28494     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
28498     5D 7D 00 00 
2849c     5C 7C 00 00 
284a0     23 7E 00 00 
284a4     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
284a8     27 22 00 00 
284ac     60 7E 03 00 
284b0     2C 3C 00 00 
284b4     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
284b8     2F 3F 00 00 
284bc     B9 B9 00 00 
284c0     BA 00 00 00 
284c4     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
284c8     BC 00 00 00 
284cc     BD 00 00 00 
284d0     BE 00 00 00 
284d4     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
284d8     C0 00 00 00 
284dc     C1 00 00 00 
284e0     C2 00 00 00 
284e4     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
284e8     C4 00 00 00 
284ec     C5 00 00 00 
284f0     C6 00 00 00 
284f4     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
284f8     C8 00 00 00 
284fc     C9 00 00 00 
28500     CA 00 00 00 
28504     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
28508     7F 7F 00 00 
2850c     CC 00 00 00 
28510     CD 00 00 00 
28514     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
28518     CF 00 00 00 
2851c     D0 00 00 00 
28520     D1 00 00 00 
28524     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
28528     2F 2F 00 00 
2852c     2A 2A 00 00 
28530     2D 2D 00 00 
28534     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
28538     8D 8D 00 00 
2853c     31 31 00 00 
28540     32 32 00 00 
28544     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
28548     34 34 00 00 
2854c     35 35 00 00 
28550     36 36 00 00 
28554     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
28558     38 38 00 00 
2855c     39 39 00 00 
28560     30 30 00 00 
28564     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
28568     5C 7C 00 00 
2856c     00 00 00 00 
28570     00 00 00 00 
28574     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
28578     00 00 00 00 
      ...             
285d0     00 00 00 00 
285d4     00 00 00 00 | 	byte	$00[96]
285d8     2B 00 A6 F2 
285dc     24 A7 09 80 
285e0     5B 88 4D 89 
285e4     80 88 A5 88 | atari_spl file "atari.spl"
285e8     6D 88 B8 88 
285ec     80 88 CB 88 
285f0     92 88 A5 88 
285f4     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
285f8     A5 88 CA 88 
285fc     A6 88 DD 88 
28600     B8 88 AB 89 
28604     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
28608     C8 AD C6 F1 
2860c     91 06 B6 FF 
28610     13 00 4A 00 
28614     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
28618     5D 00 5E 00 
2861c     5D 00 5E 00 
28620     5E 00 5D 00 
28624     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
28628     38 00 83 00 
2862c     25 00 83 00 
28630     C3 FE D1 04 
28634     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
28638     48 88 38 85 
2863c     41 8A CB 88 
28640     28 89 B8 88 
28644     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
28648     15 89 03 89 
2864c     02 89 15 89 
28650     16 89 15 89 
28654     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
28658     15 89 3A 89 
2865c     72 89 E3 89 
28660     52 83 AD 97 
28664     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
28668     0C 02 B6 FF 
2866c     E1 00 A8 00 
28670     F3 00 A8 00 
28674     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
28678     CE 00 CD 00 
2867c     CD 00 BA 00 
28680     E1 00 BB 00 
28684     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
28688     DF 00 C9 FF 
2868c     E6 01 B6 06 
28690     EE DD 8D 98 
28694     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
28698     97 89 73 89 
2869c     3B 89 60 89 
286a0     60 89 60 89 
286a4     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
286a8     73 89 72 89 
286ac     85 89 73 89 
286b0     AA 89 60 89 
286b4     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
286b8     E8 8A 18 86 
286bc     92 88 A5 C2 
286c0     E0 00 C3 05 
286c4     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
286c8     F2 00 64 01 
286cc     06 01 3E 01 
286d0     2B 01 2B 01 
286d4     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
286d8     2B 01 2A 01 
286dc     2B 01 2B 01 
286e0     2B 01 18 01 
286e4     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
286e8     39 07 61 F3 
286ec     C0 AF 37 85 
286f0     0F 88 8B 8A 
286f4     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
286f8     AB 89 D0 89 
286fc     AB 89 D0 89 
28700     D0 89 CF 89 
28704     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
28708     D0 89 F5 89 
2870c     BD 89 08 8A 
28710     CF 89 E8 8A 
28714     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
28718     53 B3 0D F8 
2871c     F4 07 38 00 
28720     63 01 63 01 
28724     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
28728     88 01 88 01 
2872c     76 01 88 01 
28730     88 01 89 01 
28734     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
28738     75 01 AE 01 
2873c     76 01 88 01 
28740     4A 00 46 06 
28744     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
28748     08 8A 9A 86 
2874c     33 8B 08 8A 
28750     2D 8A F5 89 
28754     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
28758     2D 8A 2D 8A 
2875c     2E 8A 1B 8A 
28760     40 8A 2D 8A 
28764     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
28768     2E 8A 79 8A 
2876c     66 8A C8 8B 
28770     72 82 2B 97 
28774     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
28778     1D 02 05 01 
2877c     F8 01 C0 01 
28780     0B 02 C0 01 
28784     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
28788     F9 01 D3 01 
2878c     F8 01 D3 01 
28790     F8 01 D2 01 
28794     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
28798     E6 01 2B 01 
2879c     8E 02 5F 07 
287a0     F7 E2 ED 9C 
287a4     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
287a8     E8 8A 78 8A 
287ac     78 8A 65 8A 
287b0     8B 8A 78 8A 
287b4     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
287b8     8B 8A 9D 8A 
287bc     9D 8A 8B 8A 
287c0     C2 8A 78 8A 
287c4     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
287c8     70 8C 18 86 
287cc     8B 8A 23 C9 
287d0     CB 03 C4 05 
287d4     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
287d8     0B 02 7B 02 
287dc     1E 02 55 02 
287e0     30 02 43 02 
287e4     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
287e8     43 02 44 02 
287ec     43 02 30 02 
287f0     68 02 31 02 
287f4     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
287f8     07 08 3F F7 
287fc     73 B2 13 85 
28800     15 89 ED 8B 
28804     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
28808     B0 8A FB 8A 
2880c     D5 8A FA 8A 
28810     E8 8A FB 8A 
28814     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
28818     E8 8A 21 8B 
2881c     E7 8A 33 8B 
28820     E8 8A 26 8C 
28824     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
28828     8D B0 27 F6 
2882c     9C 08 AD 01 
28830     7B 02 8D 02 
28834     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
28838     A1 02 A0 02 
2883c     A1 02 A0 02 
28840     A0 02 A0 02 
28844     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
28848     7B 02 D8 02 
2884c     7B 02 C6 02 
28850     3E 01 C3 05 
28854     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
28858     00 8C 2A 86 
2885c     E0 8C FA 8A 
28860     6A 8B FB 8A 
28864     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
28868     45 8B 45 8B 
2886c     45 8B 6B 8B 
28870     46 8B 59 8B 
28874     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
28878     6B 8B 6B 8B 
2887c     6B 8B 6B 8B 
28880     7D 8B 7D 8B 
28884     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
28888     90 8B 91 8B 
2888c     90 8B 90 8B 
28890     A3 8B A3 8B 
28894     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
28898     B5 8B B6 8B 
2889c     B5 8B B5 8B 
288a0     B6 8B C8 8B 
288a4     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
288a8     C8 8B DA 8B 
288ac     DB 8B DB 8B 
288b0     DB 8B DC 8B 
288b4     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
288b8     EE 8B EE 8B 
288bc     00 8C 01 8C 
288c0     00 8C 01 8C 
288c4     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
288c8     12 8C 13 8C 
288cc     13 8C 26 8C 
288d0     26 8C 26 8C 
288d4     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
288d8     38 8C 38 8C 
288dc     38 8C 38 8C 
288e0     4B 8C 4B 8C 
288e4     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
288e8     5E 8C 5E 8C 
288ec     5E 8C 5E 8C 
288f0     70 8C 70 8C 
288f4     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
288f8     70 8C 83 8C 
288fc     83 8C 83 8C 
28900     83 8C 96 8C 
28904     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
28908     95 8C A9 8C 
2890c     A9 8C A8 8C 
28910     A8 8C A8 8C 
28914     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
28918     BB 8C BB 8C 
2891c     BB 8C CE 8C 
28920     CE 8C CE 8C 
28924     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
28928     E0 8C E1 8C 
2892c     E1 8C E0 8C 
28930     F4 8C F2 8C 
28934     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
28938     05 8D 05 8D 
2893c     06 8D 06 8D 
28940     19 8D 19 8D 
28944     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
28948     18 8D 2B 8D 
2894c     2B 8D 2B 8D 
28950     2A 8D 3E 8D 
28954     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
28958     3E 8D 51 8D 
2895c     50 8D 50 8D 
28960     50 8D 51 8D 
28964     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
28968     63 8D 64 8D 
2896c     76 8D 75 8D 
28970     75 8D 76 8D 
28974     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
28978     88 8D 88 8D 
2897c     89 8D 9B 8D 
28980     9A 8D 9B 8D 
28984     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
28988     AD 8D AE 8D 
2898c     AD 8D AE 8D 
28990     C1 8D C1 8D 
28994     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
28998     D3 8D D3 8D 
2899c     D3 8D D3 8D 
289a0     D3 8D E6 8D 
289a4     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
289a8     E6 8D E6 8D 
289ac     F9 8D F9 8D 
289b0     F9 8D F8 8D 
289b4     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
289b8     0B 8E 0B 8E 
289bc     1D 8E 1D 8E 
289c0     1E 8E 1E 8E 
289c4     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
289c8     31 8E 31 8E 
289cc     31 8E 42 8E 
289d0     43 8E 43 8E 
289d4     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
289d8     56 8E 56 8E 
289dc     55 8E 56 8E 
289e0     68 8E 69 8E 
289e4     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
289e8     69 8E 7B 8E 
289ec     7C 8E 7B 8E 
289f0     7B 8E 8D 8E 
289f4     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
289f8     8D 8E A1 8E 
289fc     A0 8E A1 8E 
28a00     A1 8E A0 8E 
28a04     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
28a08     B3 8E B3 8E 
28a0c     C6 8E C5 8E 
28a10     C6 8E C6 8E 
28a14     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
28a18     D8 8E D9 8E 
28a1c     D8 8E EC 8E 
28a20     EB 8E EC 8E 
28a24     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
28a28     FE 8E FE 8E 
28a2c     FE 8E FE 8E 
28a30     10 8F 10 8F 
28a34     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
28a38     11 8F 23 8F 
28a3c     24 8F 23 8F 
28a40     24 8F 37 8F 
28a44     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
28a48     36 8F 36 8F 
28a4c     48 8F 49 8F 
28a50     49 8F 49 8F 
28a54     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
28a58     5B 8F 5C 8F 
28a5c     5B 8F 6E 8F 
28a60     6E 8F 6E 8F 
28a64     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
28a68     81 8F 81 8F 
28a6c     81 8F 81 8F 
28a70     93 8F 93 8F 
28a74     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
28a78     93 8F A6 8F 
28a7c     A6 8F A6 8F 
28a80     A6 8F B9 8F 
28a84     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
28a88     B9 8F B9 8F 
28a8c     CC 8F CB 8F 
28a90     CB 8F CC 8F 
28a94     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
28a98     DF 8F DE 8F 
28a9c     DE 8F F1 8F 
28aa0     F1 8F F1 8F 
28aa4     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
28aa8     03 90 04 90 
28aac     04 90 04 90 
28ab0     16 90 17 90 
28ab4     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
28ab8     29 90 28 90 
28abc     29 90 28 90 
28ac0     29 90 3C 90 
28ac4     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
28ac8     3C 90 4F 90 
28acc     4E 90 4E 90 
28ad0     4E 90 4E 90 
28ad4     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
28ad8     61 90 61 90 
28adc     73 90 74 90 
28ae0     74 90 74 90 
28ae4     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
28ae8     87 90 86 90 
28aec     87 90 86 90 
28af0     99 90 99 90 
28af4     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
28af8     AB 90 AB 90 
28afc     AC 90 AB 90 
28b00     AB 90 BF 90 
28b04     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
28b08     BE 90 D1 90 
28b0c     D0 90 D1 90 
28b10     D1 90 D1 90 
28b14     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
28b18     E3 90 E4 90 
28b1c     F6 90 F6 90 
28b20     F6 90 F6 90 
28b24     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
28b28     09 91 0A 91 
28b2c     0A 91 1C 91 
28b30     1C 91 1C 91 
28b34     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
28b38     2F 91 2E 91 
28b3c     2F 91 2F 91 
28b40     2E 91 41 91 
28b44     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
28b48     41 91 53 91 
28b4c     54 91 54 91 
28b50     53 91 54 91 
28b54     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
28b58     67 91 67 91 
28b5c     79 91 7A 91 
28b60     79 91 78 91 
28b64     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
28b68     8C 91 8B 91 
28b6c     8C 91 8C 91 
28b70     9E 91 9E 91 
28b74     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
28b78     B1 91 B1 91 
28b7c     B2 91 B1 91 
28b80     B1 91 C4 91 
28b84     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
28b88     C4 91 D6 91 
28b8c     D7 91 D7 91 
28b90     D7 91 D6 91 
28b94     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
28b98     EA 91 EA 91 
28b9c     EA 91 FC 91 
28ba0     FC 91 FB 91 
28ba4     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
28ba8     0E 92 0F 92 
28bac     0F 92 0E 92 
28bb0     21 92 21 92 
28bb4     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
28bb8     21 92 34 92 
28bbc     33 92 34 92 
28bc0     34 92 47 92 
28bc4     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
28bc8     46 92 47 92 
28bcc     59 92 59 92 
28bd0     59 92 59 92 
28bd4     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
28bd8     6C 92 6C 92 
28bdc     6B 92 7E 92 
28be0     7E 92 7E 92 
28be4     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
28be8     92 92 91 92 
28bec     91 92 90 92 
28bf0     91 92 A4 92 
28bf4     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
28bf8     A3 92 B6 92 
28bfc     B6 92 B7 92 
28c00     B7 92 B6 92 
28c04     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
28c08     CA 92 C9 92 
28c0c     CA 92 DC 92 
28c10     DC 92 DC 92 
28c14     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
28c18     EF 92 EF 92 
28c1c     EF 92 EF 92 
28c20     01 93 01 93 
28c24     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
28c28     15 93 14 93 
28c2c     14 93 14 93 
28c30     14 93 27 93 
28c34     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
28c38     27 93 39 93 
28c3c     3A 93 39 93 
28c40     39 93 39 93 
28c44     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
28c48     4B 93 4C 93 
28c4c     5F 93 5F 93 
28c50     5F 93 5E 93 
28c54     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
28c58     5F 93 84 93 
28c5c     4C 93 96 93 
28c60     5F 93 AE 94 
28c64     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
28c68     7B C1 00 00 | 	byte	$7b, $c1, $00, $00
28c6c     7A D7 00 80 
28c70     87 8A 48 8F 
28c74     EC 8C 76 8D 
28c78     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
28c7c     3C 8D 82 8D 
28c80     42 8D 88 8D 
28c84     8C 8D 8E 8D 
28c88     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
28c8c     97 8D DE 8D 
28c90     E1 8D F1 8E 
28c94     D8 8C A3 83 
28c98     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
28c9c     65 71 C9 65 
28ca0     FC 64 C4 65 
28ca4     C1 65 BF 65 
28ca8     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
28cac     B6 65 B4 65 
28cb0     B2 65 AE 65 
28cb4     AC 65 ED 65 
28cb8     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
28cbc     5E 65 25 66 
28cc0     FA 62 23 6B 
28cc4     B5 6C 61 0A 
28cc8     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
28ccc     5D 90 BE 8D 
28cd0     47 8E C3 8D 
28cd4     09 8E C9 8D 
28cd8     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
28cdc     15 8E 19 8E 
28ce0     1B 8E 62 8E 
28ce4     64 8E 68 8E 
28ce8     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
28cec     B5 8E 4C 90 
28cf0     FA 84 3C 9D 
28cf4     98 13 79 6D 
28cf8     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
28cfc     D9 66 50 66 
28d00     D4 66 4B 66 
28d04     8C 66 46 66 
28d08     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
28d0c     81 66 3A 66 
28d10     7C 66 36 66 
28d14     76 66 30 66 
28d18     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
28d1c     6B 66 88 72 
28d20     BF 37 E7 B7 
28d24     75 83 8B 8E 
28d28     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
28d2c     94 8E 96 8E 
28d30     DD 8E 9C 8E 
28d34     E2 8E A2 8E 
28d38     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
28d3c     EE 8E AE 8E 
28d40     38 8F B5 8E 
28d44     3F 8F FD 8E 
28d48     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
28d4c     A5 87 1E E3 
28d50     6D 5D FA 71 
28d54     41 64 25 67 
28d58     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
28d5c     D9 66 1A 67 
28d60     18 67 15 67 
28d64     12 67 0F 67 
28d68     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
28d6c     07 67 C0 66 
28d70     01 67 BC 66 
28d74     B8 66 DE 64 
28d78     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
28d7c     43 E5 1F 8B 
28d80     14 8A F1 90 
28d84     1C 8F 63 8F 
28d88     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
28d8c     29 8F 6E 8F 
28d90     72 8F 75 8F 
28d94     34 8F BE 8F 
28d98     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
28d9c     84 8F 87 8F 
28da0     CC 8F 56 90 
28da4     67 91 49 80 
28da8     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
28dac     46 77 A6 66 
28db0     E8 66 B0 67 
28db4     AD 67 ED 67 
28db8     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
28dbc     A2 67 E3 67 
28dc0     9D 67 9A 67 
28dc4     98 67 94 67 
28dc8     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
28dcc     49 67 CD 67 
28dd0     28 65 5F 6E 
28dd4     82 67 3A 01 
28dd8     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
28ddc     C2 91 A9 8F 
28de0     EF 8F AE 8F 
28de4     F4 8F B5 8F 
28de8     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
28dec     01 90 03 90 
28df0     07 90 09 90 
28df4     0C 90 53 90 
28df8     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
28dfc     18 90 44 93 
28e00     85 84 D6 9D 
28e04     87 1F 2F 75 
28e08     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
28e0c     C4 68 F6 67 
28e10     BE 68 F1 67 
28e14     76 68 2E 68 
28e18     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
28e1c     27 68 24 68 
28e20     64 68 1E 68 
28e24     5F 68 19 68 
28e28     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
28e2c     DC 68 56 72 
28e30     7E 36 C2 B8 
28e34     D7 84 73 90 
28e38     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
28e3c     7B 90 7F 90 
28e40     82 90 84 90 
28e44     CB 90 8B 90 
28e48     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
28e4c     D7 90 96 90 
28e50     20 91 59 90 
28e54     25 91 A2 90 
28e58     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
28e5c     D0 89 40 EE 
28e60     12 64 C4 71 
28e64     29 66 0C 69 
28e68     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
28e6c     C0 68 02 69 
28e70     FE 68 FB 68 
28e74     F9 68 F6 68 
28e78     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
28e7c     EE 68 A8 68 
28e80     2C 69 5F 68 
28e84     E2 68 81 66 
28e88     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
28e8c     1E EB A6 8A 
28e90     73 8B 5E 93 
28e94     7B 90 48 91 
28e98     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
28e9c     0D 91 11 91 
28ea0     14 91 16 91 
28ea4     5C 91 1C 91 
28ea8     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
28eac     68 91 AF 91 
28eb0     2A 91 B5 91 
28eb4     75 91 1A 94 
28eb8     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
28ebc     70 0E CB 6C 
28ec0     5D 6E C4 67 
28ec4     99 69 54 69 
28ec8     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
28ecc     D2 69 49 69 
28ed0     89 69 86 69 
28ed4     40 69 C4 69 
28ed8     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
28edc     35 69 76 69 
28ee0     58 67 EB 6D 
28ee4     E9 6D 89 0F 
28ee8     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
28eec     33 94 94 91 
28ef0     D9 91 56 91 
28ef4     E0 91 9F 91 
28ef8     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
28efc     EC 91 EE 91 
28f00     F1 91 F4 91 
28f04     F7 91 3D 92 
28f08     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
28f0c     46 92 21 94 
28f10     11 89 A4 9D 
28f14     FD 0E 8F 6C 
28f18     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
28f1c     28 6A E1 69 
28f20     65 6A 1F 6A 
28f24     5F 6A 1A 6A 
28f28     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
28f2c     54 6A 0F 6A 
28f30     4F 6A 09 6A 
28f34     06 6A 03 6A 
28f38     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
28f3c     23 68 69 77 
28f40     3A 4D 38 CA 
28f44     38 86 4E 91 
28f48     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
28f4c     64 92 24 92 
28f50     6A 92 2A 92 
28f54     70 92 30 92 
28f58     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
28f5c     7B 92 7E 92 
28f60     C5 92 84 92 
28f64     CB 92 8A 92 
28f68     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
28f6c     4D 8D F9 E2 
28f70     97 59 FE 74 
28f74     DB 68 6D 6A 
28f78     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
28f7c     A8 6A A5 6A 
28f80     A3 6A 9F 6A 
28f84     9D 6A 9B 6A 
28f88     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
28f8c     D6 6A 8F 6A 
28f90     CF 6A 46 6A 
28f94     CA 6A E1 67 
28f98     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
28f9c     D3 F7 15 92 
28fa0     90 8C BF 94 
28fa4     A6 92 EB 92 
28fa8     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
28fac     B1 92 F7 92 
28fb0     FA 92 FD 92 
28fb4     00 93 02 93 
28fb8     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
28fbc     4F 93 52 93 
28fc0     54 93 22 94 
28fc4     5A 93 8F 88 
28fc8     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
28fcc     1C 77 07 6C 
28fd0     E8 69 7A 6B 
28fd4     34 6B 75 6B 
28fd8     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
28fdc     29 6B 26 6B 
28fe0     24 6B 21 6B 
28fe4     1D 6B 5E 6B 
28fe8     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
28fec     12 6B 52 6B 
28ff0     34 69 34 6E 
28ff4     BA 73 A4 24 
28ff8     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
28ffc     7A 94 B3 93 
29000     72 93 31 93 
29004     78 93 7A 93 
29008     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
2900c     83 93 86 93 
29010     89 93 D0 93 
29014     D2 93 D5 93 
29018     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
2901c     DD 93 40 96 
29020     30 8B 99 9C 
29024     52 10 94 71 
29028     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
2902c     46 6C 79 6B 
29030     40 6C B7 6B 
29034     F7 6B B1 6B 
29038     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
2903c     EC 6B A5 6B 
29040     A2 6B 9F 6B 
29044     9D 6B 9A 6B 
29048     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
2904c     C8 6A E4 76 
29050     20 4B F9 CE 
29054     2E 8A 1A 92 
29058     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
2905c     FB 93 BA 93 
29060     01 94 03 94 
29064     4A 94 09 94 
29068     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
2906c     55 94 14 94 
29070     9E 94 1A 94 
29074     61 94 20 94 
29078     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
2907c     3E 87 E5 CD 
29080     5F 50 6C 78 
29084     B5 6A 04 6C 
29088     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
2908c     83 6C 7F 6C 
29090     7C 6C 36 6C 
29094     76 6C 74 6C 
29098     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
2909c     6B 6C 25 6C 
290a0     66 6C 1F 6C 
290a4     1D 6C 41 6A 
290a8     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
290ac     BA FA FC 94 
290b0     5B 8D 97 96 
290b4     3B 94 C5 94 
290b8     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
290bc     89 94 8C 94 
290c0     8F 94 92 94 
290c4     94 94 DB 94 
290c8     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
290cc     E4 94 E7 94 
290d0     2D 95 74 95 
290d4     C8 96 15 89 
290d8     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
290dc     CB 75 31 6F 
290e0     7E 6B 10 6D 
290e4     C9 6C 0A 6D 
290e8     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
290ec     BD 6C FF 6C 
290f0     FB 6C F9 6C 
290f4     B2 6C F3 6C 
290f8     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
290fc     A7 6C E8 6C 
29100     0D 6B 85 6F 
29104     C7 74 10 28 
29108     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
2910c     96 96 47 95 
29110     06 95 0A 95 
29114     0C 95 0F 95 
29118     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
2911c     17 95 5E 95 
29120     61 95 63 95 
29124     22 95 AC 95 
29128     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
2912c     72 95 17 98 
29130     59 8E 01 96 
29134     CF FC 5A 68 
29138     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
2913c     96 6D 50 6D 
29140     D5 6D 4A 6D 
29144     8C 6D 89 6D 
29148     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
2914c     80 6D 3A 6D 
29150     7A 6D 77 6D 
29154     75 6D 71 6D 
29158     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
2915c     18 6C BC 78 
29160     9A 4F 7E CF 
29164     1F 89 F1 93 
29168     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
2916c     D2 95 4E 95 
29170     D7 95 53 95 
29174     DD 95 E0 95 
29178     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
2917c     A5 95 EB 95 
29180     EE 95 F0 95 
29184     37 96 B3 95 
29188     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
2918c     1A 98 D5 8D 
29190     C5 9F CD 0F 
29194     0F 71 F3 73 
29198     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
2919c     D9 6D 5E 6E 
291a0     D3 6D 58 6E 
291a4     12 6E 0F 6E 
291a8     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
291ac     49 6E BF 6D 
291b0     87 6E 76 6D 
291b4     81 6E 11 6B 
291b8     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
291bc     3F 09 44 95 
291c0     E5 8D 3F 99 
291c4     D4 95 A2 96 
291c8     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
291cc     23 96 69 96 
291d0     6B 96 6E 96 
291d4     71 96 74 96 
291d8     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
291dc     BF 96 3C 96 
291e0     C6 96 C8 96 
291e4     A3 98 51 8D 
291e8     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
291ec     CF 75 29 73 
291f0     90 6C EC 6E 
291f4     62 6E E7 6E 
291f8     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
291fc     9A 6E 98 6E 
29200     95 6E 91 6E 
29204     8E 6E CF 6E 
29208     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
2920c     40 6E C3 6E 
29210     E8 6C 45 6F 
29214     A5 7B C9 35 
29218     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
2921c     2D 98 23 97 
29220     E1 96 A0 96 
29224     A4 96 EA 96 
29228     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
2922c     AF 96 F4 96 
29230     F8 96 3E 97 
29234     FD 96 43 97 
29238     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
2923c     08 97 6B 99 
29240     D6 92 88 91 
29244     D8 EE 84 66 
29248     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
2924c     2E 6F E7 6E 
29250     6C 6F 24 6F 
29254     21 6F 1F 6F 
29258     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
2925c     17 6F 13 6F 
29260     54 6F 0E 6F 
29264     0B 6F 4B 6F 
29268     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
2926c     27 6D 1C 7B 
29270     19 59 9F DB 
29274     66 8E BC 94 
29278     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
2927c     67 97 26 97 
29280     6D 97 2B 97 
29284     72 97 32 97 
29288     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
2928c     C1 97 7F 97 
29290     C6 97 85 97 
29294     CB 97 CE 97 
29298     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
2929c     EC 8A C4 C6 
292a0     68 4C F4 7D 
292a4     63 6E E8 6E 
292a8     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
292ac     ED 6F A7 6F 
292b0     E7 6F A0 6F 
292b4     E1 6F 9B 6F 
292b8     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
292bc     D5 6F 8F 6F 
292c0     CE 6F 45 6F 
292c4     86 6F 68 6D 
292c8     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
292cc     C0 13 AD A2 
292d0     A7 8E 79 99 
292d4     E6 97 E8 97 
292d8     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
292dc     F1 97 F3 97 
292e0     F6 97 F9 97 
292e4     FB 97 FE 97 
292e8     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
292ec     4A 98 0A 98 
292f0     93 98 0F 98 
292f4     7F 9B BF 8C 
292f8     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
292fc     91 7B 62 73 
29300     1A 6E B9 70 
29304     EB 6F B3 70 
29308     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
2930c     25 70 20 70 
29310     1E 70 1B 70 
29314     18 70 15 70 
29318     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
2931c     0D 70 09 70 
29320     07 70 03 70 
29324     01 70 FD 6F 
29328     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
2932c     F6 6F F2 6F 
29330     EF 6F EC 6F 
29334     2C 70 E6 6F 
29338     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
2933c     DD 6F 97 6F 
29340     D7 6F 84 6E 
29344     8F 6F 3F 7D 
29348     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
2934a     FF FF FF FF 
2934e     FF FF       | atarist_spl file "atarist.spl" '512
29350     00 00 00 00 
29354     00 00 00 00 
29358     00 00       | 	byte	$00[10]
2935a     17 7F F2 7F 
2935e     B2 7F 72 7F 
29362     33 7F F4 7E 
29366     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
2936a     36 7E F5 7D 
2936e     E9 51 F2 0D 
29372     8E 00 F3 FD 
29376     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
2937a     57 FD 58 FD 
2937e     5B FD 5C FD 
29382     5C FD 60 7D 
29386     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
2938a     D6 7C 98 7C 
2938e     59 7C 1A 7C 
29392     DC 7B 9E 7B 
29396     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
2939a     F3 05 00 FD 
2939e     41 FB EA FA 
293a2     D9 FA DB FA 
293a6     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
293aa     E4 FA 9B 36 
293ae     F8 7A C0 7A 
293b2     84 7A 45 7A 
293b6     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
293ba     8E 79 51 79 
293be     15 79 D7 78 
293c2     3C 1F EB FF 
293c6     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
293ca     6D F8 65 F8 
293ce     68 F8 6D F8 
293d2     70 F8 74 F8 
293d6     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
293da     AB 60 79 60 
293de     4B 60 1A 60 
293e2     E9 5F B9 5F 
293e6     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
293ea     FB 59 B2 0B 
293ee     92 FA 3A F7 
293f2     96 F6 79 F6 
293f6     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
293fa     82 F6 86 F6 
293fe     8C F6 DB 5D 
29402     F1 5E C1 5E 
29406     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
2940a     34 5E 04 5E 
2940e     D6 5D A6 5D 
29412     78 5D D4 3E 
29416     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
2941a     27 F5 BA F4 
2941e     AB F4 AD F4 
29422     B2 F4 B8 F4 
29426     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
2942a     26 5D 2B 5D 
2942e     FC 5C CD 5C 
29432     9F 5C 70 5C 
29436     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
2943a     E5 5B B8 5B 
2943e     DB 24 A7 FC 
29442     D1 F4 4D F3 
29446     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
2944a     04 F3 0B F3 
2944e     11 F3 16 F3 
29452     DE 18 98 5B 
29456     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
2945a     4E 4A 29 48 
2945e     A0 47 6A 47 
29462     43 47 20 47 
29466     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
2946a     E2 F6 98 F2 
2946e     C5 F1 A3 F1 
29472     A3 F1 A8 F1 
29476     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
2947a     BF F1 00 3D 
2947e     EF 46 CD 46 
29482     AA 46 86 46 
29486     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
2948a     1C 46 F9 45 
2948e     D7 45 EE 43 
29492     DE 02 E8 F3 
29496     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
2949a     61 F0 65 F0 
2949e     6D F0 74 F0 
294a2     7C F0 84 F0 
294a6     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
294aa     8E 45 6D 45 
294ae     49 45 27 45 
294b2     05 45 E1 44 
294b6     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
294ba     F1 2F A9 FB 
294be     8B F1 9B EF 
294c2     40 EF 36 EF 
294c6     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
294ca     4D EF 56 EF 
294ce     5E EF 7B 44 
294d2     8C 44 69 44 
294d6     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
294da     03 44 E1 43 
294de     C0 43 F5 37 
294e2     69 33 0F 11 
294e6     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
294ea     66 EE 37 EE 
294ee     38 EE 40 EE 
294f2     48 EE 51 EE 
294f6     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
294fa     7D 32 6A 32 
294fe     51 32 37 32 
29502     1F 32 05 32 
29506     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
2950a     B9 31 A1 31 
2950e     F1 04 F4 F1 
29512     50 EE A0 ED 
29516     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
2951a     93 ED 9A ED 
2951e     A4 ED AD ED 
29522     F4 27 C1 31 
29526     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
2952a     78 31 5F 31 
2952e     46 31 2E 31 
29532     15 31 FC 30 
29536     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
2953a     C4 EF 4A ED 
2953e     DC EC CB EC 
29542     D2 EC DA EC 
29546     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
2954a     F9 EC 64 2F 
2954e     0A 31 F1 30 
29552     D9 30 C0 30 
29556     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
2955a     78 30 5F 30 
2955e     46 30 38 23 
29562     A6 F6 19 EE 
29566     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
2956a     20 EC 28 EC 
2956e     32 EC 3C EC 
29572     47 EC 51 EC 
29576     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
2957a     A3 22 93 22 
2957e     7F 22 6E 22 
29582     5D 22 4C 22 
29586     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
2958a     77 09 76 F1 
2958e     CC EC F0 EB 
29592     CD EB CE EB 
29596     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
2959a     ED EB F5 EB 
2959e     3E F6 6B 22 
295a2     5F 22 4E 22 
295a6     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
295aa     1B 22 0B 22 
295ae     FA 21 E9 21 
295b2     D8 21 4D FF 
295b6     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
295ba     92 EB 7B EB 
295be     82 EB 8C EB 
295c2     97 EB A1 EB 
295c6     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
295ca     15 22 04 22 
295ce     F3 21 E3 21 
295d2     D2 21 C0 21 
295d6     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
295da     8E 21 7D 21 
295de     9A F8 A4 ED 
295e2     8E EB 2F EB 
295e6     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
295ea     37 EB 42 EB 
295ee     4C EB 57 EB 
295f2     B2 17 22 19 
295f6     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
295fa     FD 18 EF 18 
295fe     E3 18 D6 18 
29602     CA 18 BD 18 
29606     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
2960a     60 EC 35 EB 
2960e     01 EB 01 EB 
29612     0C EB 16 EB 
29616     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
2961a     34 EB D0 18 
2961e     00 19 F4 18 
29622     E8 18 DA 18 
29626     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
2962a     B6 18 A9 18 
2962e     9D 18 91 05 
29632     F0 EF CA EB 
29636     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
2963a     E8 EA F2 EA 
2963e     FE EA 07 EB 
29642     12 EB C2 EF 
29646     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
2964a     D9 18 CD 18 
2964e     C0 18 B3 18 
29652     A7 18 9B 18 
29656     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
2965a     B8 FC 30 EE 
2965e     61 EB DC EA 
29662     CD EA D2 EA 
29666     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
2966a     F3 EA FE EA 
2966e     D2 09 D1 18 
29672     C3 18 17 18 
29676     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
2967a     66 11 52 11 
2967e     49 11 41 11 
29682     38 11 E0 F4 
29686     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
2968a     C9 EA C5 EA 
2968e     CF EA DB EA 
29692     E6 EA EF EA 
29696     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
2969a     89 11 80 11 
2969e     78 11 6E 11 
296a2     67 11 5D 11 
296a6     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
296aa     43 11 32 0D 
296ae     9C F1 07 EC 
296b2     F8 EA CD EA 
296b6     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
296ba     E4 EA ED EA 
296be     F8 EA 02 EB 
296c2     55 11 91 11 
296c6     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
296ca     75 11 6E 11 
296ce     64 11 5E 11 
296d2     54 11 4A 11 
296d6     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
296da     A8 EB F1 EA 
296de     D9 EA DC EA 
296e2     E8 EA F1 EA 
296e6     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
296ea     A6 EB 9E 11 
296ee     A0 11 96 11 
296f2     8D 11 85 11 
296f6     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
296fa     6A 11 CA 0D 
296fe     36 0B 57 F8 
29702     6C ED 57 EB 
29706     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
2970a     F4 EA FF EA 
2970e     09 EB 15 EB 
29712     1E EB 1A FD 
29716     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
2971a     ED 0A E8 0A 
2971e     E2 0A DC 0A 
29722     D6 0A D1 0A 
29726     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
2972a     F8 F3 BC EC 
2972e     57 EB 1E EB 
29732     18 EB 24 EB 
29736     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
2973a     42 EB 4D EB 
2973e     08 09 20 0B 
29742     1A 0B 14 0B 
29746     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
2974a     04 0B FE 0A 
2974e     F9 0A F2 0A 
29752     84 08 3A F1 
29756     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
2975a     42 EB 42 EB 
2975e     4E EB 57 EB 
29762     62 EB 6B EB 
29766     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
2976a     48 0B 43 0B 
2976e     3C 0B 36 0B 
29772     31 0B 2C 0B 
29776     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
2977a     1B 0B 5C 00 
2977e     6A EF 1B EC 
29782     81 EB 6A EB 
29786     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
2978a     85 EB 8E EB 
2978e     99 EB A3 EB 
29792     DD 05 E5 05 
29796     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
2979a     DB 05 D8 05 
2979e     D5 05 D1 05 
297a2     D0 05 CB 05 
297a6     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
297aa     0C EC BB EB 
297ae     B3 EB BB EB 
297b2     C5 EB D0 EB 
297b6     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
297ba     E4 F7 2C 06 
297be     28 06 24 06 
297c2     22 06 1F 06 
297c6     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
297ca     16 06 14 06 
297ce     0F 06 D0 F3 
297d2     65 ED 2D EC 
297d6     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
297da     01 EC 0A EC 
297de     14 EC 1E EC 
297e2     29 EC FB 03 
297e6     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
297ea     63 06 60 06 
297ee     5E 06 59 06 
297f2     58 06 54 06 
297f6     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
297fa     69 F1 21 ED 
297fe     55 EC 33 EC 
29802     36 EC 40 EC 
29806     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
2980a     5C EC 68 EC 
2980e     92 02 D9 02 
29812     D7 02 D7 02 
29816     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
2981a     D1 02 D1 02 
2981e     CE 02 CD 02 
29822     5D FC 80 EF 
29826     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
2982a     83 EC 8A EC 
2982e     93 EC 9C EC 
29832     A5 EC B1 EC 
29836     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
2983a     2B 03 2A 03 
2983e     29 03 26 03 
29842     25 03 24 03 
29846     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
2984a     1F 03 70 F7 
2984e     D0 EE 27 ED 
29852     DB EC D4 EC 
29856     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
2985a     F0 EC FA EC 
2985e     02 ED F9 F4 
29862     7B 03 7C 03 
29866     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
2986a     75 03 73 03 
2986e     72 03 70 03 
29872     6D 03 6C 03 
29876     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
2987a     54 ED 22 ED 
2987e     22 ED 2C ED 
29882     35 ED 3F ED 
29886     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
2988a     14 01 C3 03 
2988e     C1 03 C0 03 
29892     5F 01 A5 00 
29896     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
2989a     7B 00 7C 00 
2989e     20 00 85 F1 
298a2     2A EE 89 ED 
298a6     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
298aa     80 ED 87 ED 
298ae     90 ED 9A ED 
298b2     A3 ED 73 00 
298b6     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
298ba     D0 00 D0 00 
298be     D0 00 D0 00 
298c2     D0 00 CF 00 
298c6     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
298ca     80 F0 3D EE 
298ce     D5 ED C7 ED 
298d2     CD ED D6 ED 
298d6     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
298da     F2 ED FA ED 
298de     1D 01 29 01 
298e2     27 01 27 01 
298e6     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
298ea     25 01 26 01 
298ee     26 01 23 01 
298f2     D0 F7 EC EF 
298f6     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
298fa     1C EE 24 EE 
298fe     2D EE 37 EE 
29902     40 EE 47 EE 
29906     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
2990a     7D 01 7B 01 
2990e     7A 01 7A 01 
29912     79 01 78 01 
29916     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
2991a     84 FE DE F3 
2991e     6C EF 93 EE 
29922     72 EE 72 EE 
29926     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
2992a     8B EE 95 EE 
2992e     9E EE 15 FC 
29932     67 FE 67 FE 
29936     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
2993a     6B FE 6B FE 
2993e     6D FE 6D FE 
29942     6D FE 6F FE 
29946     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
2994a     DF EE CC EE 
2994e     CF EE D9 EE 
29952     E1 EE EA EE 
29956     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
2995a     5A FE C4 FE 
2995e     C3 FE C5 FE 
29962     C6 FE C6 FE 
29966     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
2996a     C8 FE C7 FE 
2996e     DA FB 85 F1 
29972     8D EF 31 EF 
29976     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
2997a     34 EF 3E EF 
2997e     46 EF 4F EF 
29982     57 EF 0D FF 
29986     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
2998a     1F FF 1F FF 
2998e     21 FF 21 FF 
29992     21 FF 21 FF 
29996     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
2999a     15 F1 BE EF 
2999e     84 EF 7E EF 
299a2     88 EF 8F EF 
299a6     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
299aa     A9 EF 06 F2 
299ae     A6 FC AB FC 
299b2     AD FC AE FC 
299b6     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
299ba     B2 FC B4 FC 
299be     B6 FC B7 FC 
299c2     8B F4 BD F0 
299c6     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
299ca     E4 EF EE EF 
299ce     F6 EF FD EF 
299d2     04 F0 0E F0 
299d6     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
299da     0B FD 0D FD 
299de     0F FD 11 FD 
299e2     11 FD 13 FD 
299e6     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
299ea     17 FD 64 F3 
299ee     CD F0 52 F0 
299f2     41 F0 45 F0 
299f6     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
299fa     5B F0 64 F0 
299fe     6D F0 FB FC 
29a02     65 FD 68 FD 
29a06     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
29a0a     6C FD 6D FD 
29a0e     6F FD 70 FD 
29a12     72 FD B3 FB 
29a16     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
29a1a     A4 F0 99 F0 
29a1e     A0 F0 A8 F0 
29a22     AE F0 B9 F0 
29a26     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
29a2a     CB FB DD FB 
29a2e     DE FB E0 FB 
29a32     E3 FB E3 FB 
29a36     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
29a3a     E9 FB EC FB 
29a3e     62 F7 27 F2 
29a42     2A F1 FF F0 
29a46     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
29a4a     0C F1 13 F1 
29a4e     1B F1 23 F1 
29a52     33 F2 3C FC 
29a56     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
29a5a     42 FC 45 FC 
29a5e     47 FC 48 FC 
29a62     4A FC 4C FC 
29a66     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
29a6a     20 F2 77 F1 
29a6e     5C F1 5F F1 
29a72     64 F1 6C F1 
29a76     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
29a7a     83 F1 DC F8 
29a7e     9A FC 9A FC 
29a82     9B FC 9E FC 
29a86     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
29a8a     A3 FC A4 FC 
29a8e     A6 FC A9 FC 
29a92     90 F4 33 F2 
29a96     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
29a9a     BA F1 BF F1 
29a9e     C7 F1 CE F1 
29aa2     D6 F1 DC F1 
29aa6     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
29aaa     F3 FC F5 FC 
29aae     FE FB 79 FB 
29ab2     62 FB 5F FB 
29ab6     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
29aba     6F FA AF F3 
29abe     53 F2 12 F2 
29ac2     0F F2 15 F2 
29ac6     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
29aca     2A F2 32 F2 
29ace     38 F2 9A FB 
29ad2     AF FB B1 FB 
29ad6     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
29ada     B7 FB B8 FB 
29ade     BA FB BC FB 
29ae2     C1 FB 3B F8 
29ae6     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
29aea     6E F2 6C F2 
29aee     74 F2 7A F2 
29af2     81 F2 87 F2 
29af6     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
29afa     06 FC 09 FC 
29afe     0C FC 0E FC 
29b02     0F FC 12 FC 
29b06     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
29b0a     17 FC 1A FC 
29b0e     B2 F6 7B F3 
29b12     DD F2 C5 F2 
29b16     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
29b1a     D4 F2 DB F2 
29b1e     E0 F2 E8 F2 
29b22     28 F8 60 FC 
29b26     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
29b2a     64 FC 66 FC 
29b2e     68 FC 6A FC 
29b32     6D FC 52 FC 
29b36     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
29b3a     78 F3 24 F3 
29b3e     1A F3 1E F3 
29b42     24 F3 2A F3 
29b46     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
29b4a     3D F3 80 FA 
29b4e     0C FB 0F FB 
29b52     10 FB 14 FB 
29b56     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
29b5a     1B FB 1D FB 
29b5e     1F FB 92 FA 
29b62     DE F4 AE F3 
29b66     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
29b6a     79 F3 7E F3 
29b6e     84 F3 8C F3 
29b72     92 F3 97 F3 
29b76     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
29b7a     67 FB 69 FB 
29b7e     6B FB 6F FB 
29b82     71 FB 72 FB 
29b86     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
29b8a     E3 F8 BA F4 
29b8e     EE F3 CC F3 
29b92     CA F3 CF F3 
29b96     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
29b9a     E2 F3 E8 F3 
29b9e     ED F3 B7 FB 
29ba2     BC FB BE FB 
29ba6     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
29baa     C4 FB C6 FB 
29bae     C8 FB C9 FB 
29bb2     CC FB 8F F7 
29bb6     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
29bba     1E F4 1E F4 
29bbe     24 F4 2A F4 
29bc2     30 F4 38 F4 
29bc6     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
29bca     AD FA B1 FA 
29bce     B4 FA B6 FA 
29bd2     BA FA BB FA 
29bd6     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
29bda     C2 FA C6 FA 
29bde     55 F6 C6 F4 
29be2     7D F4 72 F4 
29be6     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
29bea     83 F4 89 F4 
29bee     8F F4 94 F4 
29bf2     66 FA 03 FB 
29bf6     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
29bfa     0A FB 0E FB 
29bfe     10 FB 11 FB 
29c02     16 FB 18 FB 
29c06     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
29c0a     F9 F4 CA F4 
29c0e     C5 F4 CB F4 
29c12     D1 F4 D7 F4 
29c16     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
29c1a     E8 F4 3F FB 
29c1e     56 FB 58 FB 
29c22     5A FB 5E FB 
29c26     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
29c2a     64 FB 64 FB 
29c2e     69 FB 99 F9 
29c32     E9 F5 33 F5 
29c36     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
29c3a     1D F5 22 F5 
29c3e     27 F5 2E F5 
29c42     32 F5 37 F5 
29c46     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
29c4a     BC FA BC FA 
29c4e     C1 FA C2 FA 
29c52     C4 FA C8 FA 
29c56     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
29c5a     F9 F7 DB F5 
29c5e     78 F5 69 F5 
29c62     6A F5 70 F5 
29c66     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
29c6a     7F F5 85 F5 
29c6e     6E F7 06 FB 
29c72     0A FB 0B FB 
29c76     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
29c7a     14 FB 15 FB 
29c7e     18 FB 1B FB 
29c82     1D FB 70 F7 
29c86     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
29c8a     B6 F5 BB F5 
29c8e     C0 F5 C6 F5 
29c92     CA F5 CF F5 
29c96     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
29c9a     54 FB 56 FB 
29c9e     5A FB 5B FB 
29ca2     5E FB 5F FB 
29ca6     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
29caa     67 FB 52 FB 
29cae     29 F7 33 F6 
29cb2     06 F6 02 F6 
29cb6     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
29cba     10 F6 16 F6 
29cbe     1A F6 1F F6 
29cc2     81 FB 9F FB 
29cc6     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
29cca     51 FB F2 FA 
29cce     E3 FA E3 FA 
29cd2     E5 FA E9 FA 
29cd6     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
29cda     64 F6 4D F6 
29cde     4D F6 53 F6 
29ce2     57 F6 5C F6 
29ce6     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
29cea     6A F6 19 FB 
29cee     1E FB 22 FB 
29cf2     23 FB 24 FB 
29cf6     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
29cfa     2C FB 2E FB 
29cfe     32 FB F0 F8 
29d02     01 F7 A5 F6 
29d06     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
29d0a     9F F6 A3 F6 
29d0e     A6 F6 AC F6 
29d12     B0 F6 EB F7 
29d16     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
29d1a     68 FB 6C FB 
29d1e     6E FB 71 FB 
29d22     72 FB 74 FB 
29d26     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
29d2a     71 F8 21 F7 
29d2e     E5 F6 DD F6 
29d32     E1 F6 E6 F6 
29d36     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
29d3a     F5 F6 F7 F6 
29d3e     F7 FA AB FB 
29d42     AD FB AF FB 
29d46     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
29d4a     B6 FB B9 FB 
29d4e     BB FB BC FB 
29d52     21 FB 07 F8 
29d56     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
29d5a     22 F7 26 F7 
29d5e     2B F7 2E F7 
29d62     34 F7 38 F7 
29d66     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
29d6a     13 FB 16 FB 
29d6e     17 FB 1B FB 
29d72     1E FB 20 FB 
29d76     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
29d7a     26 FB 77 FA 
29d7e     F3 F7 7C F7 
29d82     67 F7 6A F7 
29d86     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
29d8a     74 F7 7A F7 
29d8e     7E F7 82 F7 
29d92     53 FB 5A FB 
29d96     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
29d9a     5F FB 63 FB 
29d9e     65 FB 67 FB 
29da2     69 FB 6A FB 
29da6     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
29daa     B5 F7 A9 F7 
29dae     AD F7 B0 F7 
29db2     B5 F7 B8 F7 
29db6     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
29dba     6E F8 99 FB 
29dbe     9C FB 9D FB 
29dc2     9F FB A4 FB 
29dc6     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
29dca     A9 FB AB FB 
29dce     AD FB 46 F9 
29dd2     26 F8 F0 F7 
29dd6     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
29dda     F4 F7 F8 F7 
29dde     FB F7 FF F7 
29de2     03 F8 65 FA 
29de6     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
29dea     2B FB 2F FB 
29dee     30 FB 32 FB 
29df2     34 FB 38 FB 
29df6     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
29dfa     E9 F8 4A F8 
29dfe     2E F8 2C F8 
29e02     2F F8 36 F8 
29e06     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
29e0a     41 F8 44 F8 
29e0e     4A FB 67 FB 
29e12     68 FB 6B FB 
29e16     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
29e1a     73 FB 74 FB 
29e1e     78 FB 7A FB 
29e22     14 FB E7 F8 
29e26     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
29e2a     6D F8 70 F8 
29e2e     73 F8 78 F8 
29e32     7C F8 80 F8 
29e36     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
29e3a     A6 FB A7 FB 
29e3e     A9 FB AC FB 
29e42     AF FB B1 FB 
29e46     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
29e4a     B7 FB 73 FA 
29e4e     F8 F8 B4 F8 
29e52     A9 F8 AB F8 
29e56     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
29e5a     B4 F8 B8 F8 
29e5e     BB F8 FA F8 
29e62     64 FB 65 FB 
29e66     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
29e6a     6D FB 6F FB 
29e6e     70 FB 74 FB 
29e72     77 FB 77 FB 
29e76     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
29e7a     E9 F8 E4 F8 
29e7e     E8 F8 EB F8 
29e82     EE F8 F2 F8 
29e86     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
29e8a     B5 FA 9F FB 
29e8e     A1 FB A4 FB 
29e92     A5 FB A9 FB 
29e96     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
29e9a     AE FB B1 FB 
29e9e     B2 FB C7 F9 
29ea2     39 F9 22 F9 
29ea6     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
29eaa     26 F9 2A F9 
29eae     2E F9 32 F9 
29eb2     33 F9 BA FB 
29eb6     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
29eba     DE FB E1 FB 
29ebe     E2 FB E4 FB 
29ec2     E5 FB E7 FB 
29ec6     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
29eca     C5 F9 67 F9 
29ece     57 F9 56 F9 
29ed2     5B F9 5F F9 
29ed6     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
29eda     68 F9 6C F9 
29ede     0B FC 11 FC 
29ee2     14 FC 15 FC 
29ee6     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
29eea     B5 FB B5 FB 
29eee     B6 FB B8 FB 
29ef2     E9 FA C8 F9 
29ef6     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
29efa     90 F9 94 F9 
29efe     95 F9 99 F9 
29f02     9D F9 9F F9 
29f06     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
29f0a     DE FB DF FB 
29f0e     E2 FB E4 FB 
29f12     E6 FB E8 FB 
29f16     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
29f1a     EF FB AC FA 
29f1e     E9 F9 C7 F9 
29f22     C3 F9 C8 F9 
29f26     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
29f2a     D0 F9 D4 F9 
29f2e     D6 F9 0E FB 
29f32     11 FC 13 FC 
29f36     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
29f3a     19 FC 1B FC 
29f3e     1D FC 1E FC 
29f42     21 FC 22 FC 
29f46     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
29f4a     F7 F9 F7 F9 
29f4e     FB F9 FE F9 
29f52     00 FA 03 FA 
29f56     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
29f5a     1B FC 45 FC 
29f5e     46 FC 48 FC 
29f62     4A FC 4B FC 
29f66     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
29f6a     52 FC 54 FC 
29f6e     F3 FB 82 FA 
29f72     35 FA 28 FA 
29f76     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
29f7a     31 FA 32 FA 
29f7e     37 FA 37 FA 
29f82     3C FA 00 FC 
29f86     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
29f8a     09 FC 0B FC 
29f8e     0F FC 12 FC 
29f92     12 FC 15 FC 
29f96     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
29f9a     8D FA 60 FA 
29f9e     5B FA 5C FA 
29fa2     60 FA 61 FA 
29fa6     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
29faa     6C FA 6D FA 
29fae     37 FC 3A FC 
29fb2     3B FC 3D FC 
29fb6     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
29fba     43 FC 44 FC 
29fbe     45 FC 47 FC 
29fc2     51 FB AB FA 
29fc6     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
29fca     8E FA 91 FA 
29fce     93 FA 95 FA 
29fd2     98 FA 9B FA 
29fd6     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
29fda     68 FC 6A FC 
29fde     6C FC 6E FC 
29fe2     70 FC 72 FC 
29fe6     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
29fea     76 FC 3B FB 
29fee     D0 FA BB FA 
29ff2     B9 FA BD FA 
29ff6     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
29ffa     C4 FA C6 FA 
29ffe     CA FA 13 FC 
2a002     3A FC 3A FC 
2a006     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
2a00a     41 FC 43 FC 
2a00e     44 FC 47 FC 
2a012     48 FC 3C FC 
2a016     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
2a01a     E6 FA E8 FA 
2a01e     EB FA EE FA 
2a022     F0 FA F2 FA 
2a026     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
2a02a     61 FC 66 FC 
2a02e     68 FC 6B FC 
2a032     6C FC 6E FC 
2a036     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
2a03a     73 FC 75 FC 
2a03e     13 FC 3F FB 
2a042     17 FB 12 FB 
2a046     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
2a04a     1A FB 1D FB 
2a04e     1F FB 20 FB 
2a052     23 FB 92 FC 
2a056     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
2a05a     96 FC 97 FC 
2a05e     9A FC 9C FC 
2a062     9E FC 9F FC 
2a066     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
2a06a     5A FB 41 FB 
2a06e     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
2a072     01 00 00 00 
2a076     00 00 00 00 
2a07a     00 00 00 00 
2a07e     00 00 00 00 | mouse  file "mouse2.def"
2a082     00 00 00 00 
2a086     00 00 00 00 
2a08a     00 00 00 00 
2a08e     00 00 00 00 | 	byte	$00[16]
2a092     01 01 00 00 
2a096     00 00 00 00 
2a09a     00 00 00 00 
2a09e     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2a0a2     00 00 00 00 
2a0a6     00 00 00 00 
2a0aa     00 00 00 00 
2a0ae     00 00 00 00 | 	byte	$00[16]
2a0b2     01 0D 01 00 
2a0b6     00 00 00 00 
2a0ba     00 00 00 00 
2a0be     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2a0c2     00 00 00 00 
2a0c6     00 00 00 00 
2a0ca     00 00 00 00 
2a0ce     00 00 00 00 | 	byte	$00[16]
2a0d2     01 0D 0D 01 
2a0d6     00 00 00 00 
2a0da     00 00 00 00 
2a0de     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2a0e2     00 00 00 00 
2a0e6     00 00 00 00 
2a0ea     00 00 00 00 
2a0ee     00 00 00 00 | 	byte	$00[16]
2a0f2     01 0D 0D 0D 
2a0f6     01 00 00 00 
2a0fa     00 00 00 00 
2a0fe     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2a102     00 00 00 00 
2a106     00 00 00 00 
2a10a     00 00 00 00 
2a10e     00 00 00 00 | 	byte	$00[16]
2a112     01 0D 0D 0D 
2a116     0D 01 00 00 
2a11a     00 00 00 00 
2a11e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2a122     00 00 00 00 
2a126     00 00 00 00 
2a12a     00 00 00 00 
2a12e     00 00 00 00 | 	byte	$00[16]
2a132     01 0D 0D 0D 
2a136     0D 0D 01 00 
2a13a     00 00 00 00 
2a13e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
2a142     00 00 00 00 
2a146     00 00 00 00 
2a14a     00 00 00 00 
2a14e     00 00 00 00 | 	byte	$00[16]
2a152     01 0D 0D 0D 
2a156     0D 0D 0D 01 
2a15a     00 00 00 00 
2a15e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
2a162     00 00 00 00 
2a166     00 00 00 00 
2a16a     00 00 00 00 
2a16e     00 00 00 00 | 	byte	$00[16]
2a172     01 0D 0D 0D 
2a176     0D 0D 0D 0C 
2a17a     01 00 00 00 
2a17e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
2a182     00 00 00 00 
2a186     00 00 00 00 
2a18a     00 00 00 00 
2a18e     00 00 00 00 | 	byte	$00[16]
2a192     01 0D 0D 0D 
2a196     0D 0D 0D 0D 
2a19a     0C 01 00 00 
2a19e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
2a1a2     00 00 00 00 
2a1a6     00 00 00 00 
2a1aa     00 00 00 00 
2a1ae     00 00 00 00 | 	byte	$00[16]
2a1b2     01 0D 0D 0D 
2a1b6     0D 0D 0D 0D 
2a1ba     0D 0C 01 00 
2a1be     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
2a1c2     00 00 00 00 
2a1c6     00 00 00 00 
2a1ca     00 00 00 00 
2a1ce     00 00 00 00 | 	byte	$00[16]
2a1d2     01 0D 0D 0D 
2a1d6     0D 0D 0D 0D 
2a1da     0D 0D 0B 01 
2a1de     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
2a1e2     00 00 00 00 
2a1e6     00 00 00 00 
2a1ea     00 00 00 00 
2a1ee     00 00 00 00 | 	byte	$00[16]
2a1f2     01 0D 0D 0D 
2a1f6     0C 0D 0D 03 
2a1fa     01 01 01 01 
2a1fe     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
2a202     00 00 00 00 
2a206     00 00 00 00 
2a20a     00 00 00 00 
2a20e     00 00 00 00 | 	byte	$00[16]
2a212     01 0D 0D 0C 
2a216     01 09 0D 03 
2a21a     00 00 00 00 
2a21e     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
2a222     00 00 00 00 
2a226     00 00 00 00 
2a22a     00 00 00 00 
2a22e     00 00 00 00 | 	byte	$00[16]
2a232     01 0D 0C 01 
2a236     00 01 0D 0B 
2a23a     01 00 00 00 
2a23e     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
2a242     00 00 00 00 
2a246     00 00 00 00 
2a24a     00 00 00 00 
2a24e     00 00 00 00 | 	byte	$00[16]
2a252     01 0C 01 00 
2a256     00 01 0A 0D 
2a25a     01 00 00 00 
2a25e     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
2a262     00 00 00 00 
2a266     00 00 00 00 
2a26a     00 00 00 00 
2a26e     00 00 00 00 | 	byte	$00[16]
2a272     01 01 00 00 
2a276     00 00 01 0D 
2a27a     0B 01 00 00 
2a27e     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
2a282     00 00 00 00 
2a286     00 00 00 00 
2a28a     00 00 00 00 
2a28e     00 00 00 00 
2a292     00 00 00 00 
2a296     00 00       | 	byte	$00[22]
2a298     01 0B 0D 01 
2a29c     00 00 00 00 
2a2a0     00 00 00 00 
2a2a4     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2a2a8     00 00 00 00 
2a2ac     00 00 00 00 
2a2b0     00 00 00 00 
2a2b4     00 00 00 00 
2a2b8     00          | 	byte	$00[17]
2a2b9     01 01 00 00 
2a2bd     00 00 00 00 
2a2c1     00 00 00 00 
2a2c5     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2a2c9     00 00 00 00 
      ...             
2a46d     00 00 00 00 
2a471     00          | 	byte	$00[425]
2a472                 | 
2a472     00 00       |              	org
2a474 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
2a478 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
2a47c 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
2a480 003             | 
2a480 003 00 30 04 F6 |                 mov     psramaddr,#0
2a484 004             | 
2a484 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
2a488 005 20 00 00 FF 
2a48c 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
2a490 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
2a494 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
2a498 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
2a49c 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
2a4a0 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
2a4a4 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
2a4a8 00d             | 
2a4a8 00d 20 00 00 FF 
2a4ac 00e 00 30 04 F1 |                 add 	psramaddr,##16384
2a4b0 00f E0 03 00 FF 
2a4b4 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
2a4b8 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
2a4bc 012             | 
2a4bc 012             |                 
2a4bc 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
2a4c0 013             |     
2a4c0 013 01 2C 60 FD |                 cogid 	t11				' get id
2a4c4 014 00 00 EC FC |                 coginit #0,#0				' start the new program
2a4c8 015 03 2C 60 FD |                 cogstop t11				' stop the loader
2a4cc 016             | 
2a4cc 016 00 00 00 00 | t11 		long 	0
2a4d0 017 00 FF 07 00 | mailbox 	long 	$7FF00
2a4d4 018 00 00 00 00 | psramaddr 	long 	0
2a4d8 019 00 00 00 00 | pslockval	long 	0
2a4dc 01a 00 00 00 00 | cmd             long    0
2a4e0 01b 00 00 00 00 | buf1            long    0
2a4e4 01c 00 40 00 00 | buf2            long    16384
2a4e8 01d EC A4 02 00 | 	long	@@@_dat_ + 8468
2a4ec 01e 50 32 20 52 
2a4f0 01f 65 74 72 6F 
2a4f4 020 6D 61 63 68 
2a4f8 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
2a4fc 022 42 41 53 49 
2a500 023 43 20 76 65 
2a504 024 72 73 69 6F 
2a508 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
2a50c 026 32 34 00 00 | 	byte	$32, $34, $00, $00
2a510 027             | 	alignl
2a510 027             | _hg010b_spin2_dat_
2a510 027             | 
2a510 027 00 00 00 00 
2a514 028 00 00 00 00 
2a518 029 00 00 00 00 
2a51c 02a 00 00 00 00 
2a520 02b 00 00 00    | vga_font       file "vgafont.def"
2a523 02b 7E 81 A5 81 
2a527 02c 81 BD 99 81 
2a52b 02d 81 7E 00 00 
2a52f 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
2a533 02f 7E FF DB FF 
2a537 030 FF C3 E7 FF 
2a53b 031 FF 7E 00 00 
2a53f 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
2a543 033 00 36 7F 7F 
2a547 034 7F 7F 3E 1C 
2a54b 035 08 00 00 00 
2a54f 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
2a553 037 00 08 1C 3E 
2a557 038 7F 3E 1C 08 
2a55b 039 00 00 00 00 
2a55f 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
2a563 03b 18 3C 3C E7 
2a567 03c E7 E7 18 18 
2a56b 03d 3C 00 00 00 
2a56f 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
2a573 03f 18 3C 7E FF 
2a577 040 FF 7E 18 18 
2a57b 041 3C 00 00 00 
2a57f 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
2a583 043 00 00 00 18 
2a587 044 3C 3C 18 00 
2a58b 045 00 00 00 00 
2a58f 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
2a593 047 FF FF FF E7 
2a597 048 C3 C3 E7 FF 
2a59b 049 FF FF FF FF 
2a59f 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
2a5a3 04b 00 00 3C 66 
2a5a7 04c 42 42 66 3C 
2a5ab 04d 00 00 00 00 
2a5af 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
2a5b3 04f FF FF C3 99 
2a5b7 050 BD BD 99 C3 
2a5bb 051 FF FF FF FF 
2a5bf 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
2a5c3 053 78 70 58 4C 
2a5c7 054 1E 33 33 33 
2a5cb 055 33 1E 00 00 
2a5cf 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
2a5d3 057 3C 66 66 66 
2a5d7 058 66 3C 18 7E 
2a5db 059 18 18 00 00 
2a5df 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
2a5e3 05b FC CC FC 0C 
2a5e7 05c 0C 0C 0C 0E 
2a5eb 05d 0F 07 00 00 
2a5ef 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
2a5f3 05f FE C6 FE C6 
2a5f7 060 C6 C6 C6 E6 
2a5fb 061 E7 67 03 00 
2a5ff 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
2a603 063 18 18 DB 3C 
2a607 064 E7 3C DB 18 
2a60b 065 18 00 00 00 
2a60f 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
2a613 067 03 07 0F 1F 
2a617 068 7F 1F 0F 07 
2a61b 069 03 01 00 00 
2a61f 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
2a623 06b 60 70 78 7C 
2a627 06c 7F 7C 78 70 
2a62b 06d 60 40 00 00 
2a62f 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
2a633 06f 18 3C 7E 18 
2a637 070 18 18 7E 3C 
2a63b 071 18 00 00 00 
2a63f 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
2a643 073 66 66 66 66 
2a647 074 66 66 66    | 	byte	$66[7]
2a64a 075 00 66 66 00 
2a64e 076 00 00 00 00 
2a652 077 00 FE DB DB 
2a656 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
2a65a 079 D8 D8 D8 00 
2a65e 07a 00 00 00 3E 
2a662 07b 63 06 1C 36 
2a666 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
2a66a 07d 30 63 3E 00 
2a66e 07e 00 00 00 00 
2a672 07f 00 00 00 00 
2a676 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
2a67a 081 7F 7F 7F 00 
2a67e 082 00 00 00 00 
2a682 083 00 18 3C 7E 
2a686 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
2a68a 085 3C 18 7E 00 
2a68e 086 00 00 00 00 
2a692 087 00 18 3C 7E 
2a696 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
2a69a 089 18 18 18 00 
2a69e 08a 00 00 00 00 
2a6a2 08b 00 18 18 18 
2a6a6 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2a6aa 08d 7E 3C 18 00 
2a6ae 08e 00 00 00 00 
2a6b2 08f 00 00 00 18 
2a6b6 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
2a6ba 091 00 00 00 00 
2a6be 092 00 00 00 00 
2a6c2 093 00 00 00    | 	byte	$00[11]
2a6c5 094 0C 06 7F 06 
2a6c9 095 0C 00 00 00 
2a6cd 096 00 00 00 00 
2a6d1 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2a6d5 098 00 03 03 03 
2a6d9 099 7F 00 00 00 
2a6dd 09a 00 00 00 00 
2a6e1 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2a6e5 09c 14 36 7F 36 
2a6e9 09d 14 00 00 00 
2a6ed 09e 00 00 00 00 
2a6f1 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
2a6f5 0a0 1C 1C 3E 3E 
2a6f9 0a1 7F 7F 00 00 
2a6fd 0a2 00 00 00 00 
2a701 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
2a705 0a4 7F 3E 3E 1C 
2a709 0a5 1C 08 00 00 
2a70d 0a6 00 00 00 00 
2a711 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2a715 0a8 00 00 00 00 
2a719 0a9 00 00 00 00 
2a71d 0aa 00 00 00 00 
2a721 0ab 00 00       | 	byte	$00[14]
2a723 0ab 18 3C 3C 3C 
2a727 0ac 18 18 18 00 
2a72b 0ad 18 18 00 00 
2a72f 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
2a733 0af 66 24 00 00 
2a737 0b0 00 00 00 00 
2a73b 0b1 00 00 00 00 
2a73f 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2a743 0b3 00 36 36 7F 
2a747 0b4 36 36 36 7F 
2a74b 0b5 36 36 00 00 
2a74f 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
2a753 0b7 3E 63 43 03 
2a757 0b8 3E 60 60 61 
2a75b 0b9 63 3E 18 18 
2a75f 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
2a763 0bb 00 00 43 63 
2a767 0bc 30 18 0C 06 
2a76b 0bd 63 61 00 00 
2a76f 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
2a773 0bf 1C 36 36 1C 
2a777 0c0 6E 3B 33 33 
2a77b 0c1 33 6E 00 00 
2a77f 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
2a783 0c3 0C 0C 0C 06 
2a787 0c4 00 00 00 00 
2a78b 0c5 00 00 00 00 
2a78f 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2a793 0c7 30 18 0C 0C 
2a797 0c8 0C 0C 0C 0C 
2a79b 0c9 18 30 00 00 
2a79f 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
2a7a3 0cb 0C 18 30 30 
2a7a7 0cc 30 30 30 30 
2a7ab 0cd 18 0C 00 00 
2a7af 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
2a7b3 0cf 00 00 00 66 
2a7b7 0d0 3C FF 3C 66 
2a7bb 0d1 00 00 00 00 
2a7bf 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
2a7c3 0d3 00 00 00 18 
2a7c7 0d4 18 7E 18 18 
2a7cb 0d5 00 00 00 00 
2a7cf 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
2a7d3 0d7 00 00 00 00 
2a7d7 0d8 00 00 00 00 | 	byte	$00[8]
2a7db 0d9 18 18 18 0C 
2a7df 0da 00 00 00 00 
2a7e3 0db 00 00 00 00 
2a7e7 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
2a7eb 0dd 00 00 00 00 
2a7ef 0de 00 00 00 00 
2a7f3 0df 00 00 00 00 
2a7f7 0e0 00 00 00 00 | 	byte	$00[16]
2a7fb 0e1 18 18 00 00 
2a7ff 0e2 00 00 00 00 
2a803 0e3 00 00 40 60 
2a807 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
2a80b 0e5 03 01 00 00 
2a80f 0e6 00 00 00 00 
2a813 0e7 1C 36 63 63 
2a817 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
2a81b 0e9 36 1C 00 00 
2a81f 0ea 00 00 00 00 
2a823 0eb 18 1C 1E 18 
2a827 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
2a82b 0ed 18 7E 00 00 
2a82f 0ee 00 00 00 00 
2a833 0ef 3E 63 60 30 
2a837 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
2a83b 0f1 63 7F 00 00 
2a83f 0f2 00 00 00 00 
2a843 0f3 3E 63 60 60 
2a847 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
2a84b 0f5 63 3E 00 00 
2a84f 0f6 00 00 00 00 
2a853 0f7 30 38 3C 36 
2a857 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
2a85b 0f9 30 78 00 00 
2a85f 0fa 00 00 00 00 
2a863 0fb 7F 03 03 03 
2a867 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
2a86b 0fd 63 3E 00 00 
2a86f 0fe 00 00 00 00 
2a873 0ff 1C 06 03 03 
2a877 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
2a87b 101 63 3E 00 00 
2a87f 102 00 00 00 00 
2a883 103 7F 63 60 60 
2a887 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
2a88b 105 0C 0C 00 00 
2a88f 106 00 00 00 00 
2a893 107 3E 63 63 63 
2a897 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
2a89b 109 63 3E 00 00 
2a89f 10a 00 00 00 00 
2a8a3 10b 3E 63 63 63 
2a8a7 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
2a8ab 10d 30 1E 00 00 
2a8af 10e 00 00 00 00 
2a8b3 10f 00 00 00 18 
2a8b7 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
2a8bb 111 18 18 00 00 
2a8bf 112 00 00 00 00 
2a8c3 113 00 00 00 18 
2a8c7 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
2a8cb 115 18 18 0C 00 
2a8cf 116 00 00 00 00 
2a8d3 117 00 60 30 18 
2a8d7 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
2a8db 119 30 60 00 00 
2a8df 11a 00 00 00 00 
2a8e3 11b 00 00 00 7E 
2a8e7 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
2a8eb 11d 00 00 00 00 
2a8ef 11e 00 00 00 00 
2a8f3 11f 00          | 	byte	$00[9]
2a8f4 120 06 0C 18 30 
2a8f8 121 60 30 18 0C 
2a8fc 122 06 00 00 00 
2a900 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
2a904 124 63 63 30 18 
2a908 125 18 18 00 18 
2a90c 126 18 00 00 00 
2a910 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
2a914 128 3E 63 63 7B 
2a918 129 7B 7B 3B 03 
2a91c 12a 3E 00 00 00 
2a920 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
2a924 12c 1C 36 63 63 
2a928 12d 7F 63 63 63 
2a92c 12e 63 00 00 00 
2a930 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
2a934 130 66 66 66 3E 
2a938 131 66 66 66 66 
2a93c 132 3F 00 00 00 
2a940 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
2a944 134 66 43 03 03 
2a948 135 03 03 43 66 
2a94c 136 3C 00 00 00 
2a950 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
2a954 138 36 66 66 66 
2a958 139 66 66 66 36 
2a95c 13a 1F 00 00 00 
2a960 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
2a964 13c 66 46 16 1E 
2a968 13d 16 06 46 66 
2a96c 13e 7F 00 00 00 
2a970 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
2a974 140 66 46 16 1E 
2a978 141 16 06 06 06 
2a97c 142 0F 00 00 00 
2a980 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
2a984 144 66 43 03 03 
2a988 145 7B 63 63 66 
2a98c 146 5C 00 00 00 
2a990 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
2a994 148 63 63 63 7F 
2a998 149 63 63 63 63 
2a99c 14a 63 00 00 00 
2a9a0 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
2a9a4 14c 18 18 18 18 
2a9a8 14d 18 18 18 18 | 	byte	$18[8]
2a9ac 14e 3C 00 00 00 
2a9b0 14f 00 00 00 78 
2a9b4 150 30 30 30 30 
2a9b8 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
2a9bc 152 1E 00 00 00 
2a9c0 153 00 00 00 67 
2a9c4 154 66 66 36 1E 
2a9c8 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
2a9cc 156 67 00 00 00 
2a9d0 157 00 00 00 0F 
2a9d4 158 06 06 06 06 
2a9d8 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
2a9dc 15a 7F 00 00 00 
2a9e0 15b 00 00 00 63 
2a9e4 15c 77 7F 7F 6B 
2a9e8 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
2a9ec 15e 63 00 00 00 
2a9f0 15f 00 00 00 63 
2a9f4 160 67 6F 7F 7B 
2a9f8 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
2a9fc 162 63 00 00 00 
2aa00 163 00 00 00 3E 
2aa04 164 63 63 63 63 
2aa08 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
2aa0c 166 3E 00 00 00 
2aa10 167 00 00 00 3F 
2aa14 168 66 66 66 3E 
2aa18 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
2aa1c 16a 0F 00 00 00 
2aa20 16b 00 00 00 3E 
2aa24 16c 63 63 63 63 
2aa28 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
2aa2c 16e 3E 30 70 00 
2aa30 16f 00 00 00 3F 
2aa34 170 66 66 66 3E 
2aa38 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
2aa3c 172 67 00 00 00 
2aa40 173 00 00 00 3E 
2aa44 174 63 63 06 1C 
2aa48 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
2aa4c 176 3E 00 00 00 
2aa50 177 00 00 00 7E 
2aa54 178 7E 5A 18 18 
2aa58 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
2aa5c 17a 3C 00 00 00 
2aa60 17b 00 00 00 63 
2aa64 17c 63 63 63 63 
2aa68 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
2aa6c 17e 3E 00 00 00 
2aa70 17f 00 00 00 63 
2aa74 180 63 63 63 63 
2aa78 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
2aa7c 182 08 00 00 00 
2aa80 183 00 00 00 63 
2aa84 184 63 63 63 6B 
2aa88 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
2aa8c 186 36 00 00 00 
2aa90 187 00 00 00 63 
2aa94 188 63 36 3E 1C 
2aa98 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
2aa9c 18a 63 00 00 00 
2aaa0 18b 00 00 00 66 
2aaa4 18c 66 66 66 3C 
2aaa8 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
2aaac 18e 3C 00 00 00 
2aab0 18f 00 00 00 7F 
2aab4 190 63 61 30 18 
2aab8 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
2aabc 192 7F 00 00 00 
2aac0 193 00 00 00 3C 
2aac4 194 0C 0C 0C 0C 
2aac8 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
2aacc 196 3C 00 00 00 
2aad0 197 00 00 00 00 
2aad4 198 01 03 07 0E 
2aad8 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
2aadc 19a 40 00 00 00 
2aae0 19b 00 00 00 3C 
2aae4 19c 30 30 30 30 
2aae8 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
2aaec 19e 3C 00 00 00 
2aaf0 19f 1C 36 00 00 
2aaf4 1a0 00 00 00 00 
2aaf8 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2aafc 1a2 00 00 00 00 
2ab00 1a3 00 00 00 00 
2ab04 1a4 00 00 00 00 
2ab08 1a5 00 00 00 00 
2ab0c 1a6 00          | 	byte	$00[17]
2ab0d 1a6 FF 00 00 0C 
2ab11 1a7 18 00 00 00 
2ab15 1a8 00 00 00 00 
2ab19 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ab1d 1aa 00 00 00 00 
2ab21 1ab 00 00 00 00 
2ab25 1ac 00          | 	byte	$00[9]
2ab26 1ac 1E 30 3E 33 
2ab2a 1ad 33 33 6E 00 
2ab2e 1ae 00 00 00 00 
2ab32 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
2ab36 1b0 1E 36 66 66 
2ab3a 1b1 66 66 3E 00 
2ab3e 1b2 00 00 00 00 
2ab42 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ab46 1b4 3E 63 03 03 
2ab4a 1b5 03 63 3E 00 
2ab4e 1b6 00 00 00 00 
2ab52 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
2ab56 1b8 3C 36 33 33 
2ab5a 1b9 33 33 6E 00 
2ab5e 1ba 00 00 00 00 
2ab62 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ab66 1bc 3E 63 7F 03 
2ab6a 1bd 03 63 3E 00 
2ab6e 1be 00 00 00 00 
2ab72 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
2ab76 1c0 0C 1E 0C 0C 
2ab7a 1c1 0C 0C 1E 00 
2ab7e 1c2 00 00 00 00 
2ab82 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ab86 1c4 6E 33 33 33 
2ab8a 1c5 33 33 3E 30 
2ab8e 1c6 33 1E 00 00 
2ab92 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
2ab96 1c8 36 6E 66 66 
2ab9a 1c9 66 66 67 00 
2ab9e 1ca 00 00 00 00 
2aba2 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
2aba6 1cc 1C 18 18 18 
2abaa 1cd 18 18 3C 00 
2abae 1ce 00 00 00 00 
2abb2 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
2abb6 1d0 70 60 60 60 
2abba 1d1 60 60 60 66 
2abbe 1d2 66 3C 00 00 
2abc2 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
2abc6 1d4 66 36 1E 1E 
2abca 1d5 36 66 67 00 
2abce 1d6 00 00 00 00 
2abd2 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
2abd6 1d8 18 18 18 18 
2abda 1d9 18 18       | 	byte	$18[6]
2abdc 1da 3C 00 00 00 
2abe0 1db 00 00 00 00 
2abe4 1dc 00 00 37 7F 
2abe8 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
2abec 1de 63 00 00 00 
2abf0 1df 00 00 00 00 
2abf4 1e0 00 00 3B 66 
2abf8 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
2abfc 1e2 66 00 00 00 
2ac00 1e3 00 00 00 00 
2ac04 1e4 00 00 3E 63 
2ac08 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
2ac0c 1e6 3E 00 00 00 
2ac10 1e7 00 00 00 00 
2ac14 1e8 00 00 3B 66 
2ac18 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
2ac1c 1ea 3E 06 06 0F 
2ac20 1eb 00 00 00 00 
2ac24 1ec 00 00 6E 33 
2ac28 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
2ac2c 1ee 3E 30 30 78 
2ac30 1ef 00 00 00 00 
2ac34 1f0 00 00 3B 6E 
2ac38 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
2ac3c 1f2 0F 00 00 00 
2ac40 1f3 00 00 00 00 
2ac44 1f4 00 00 3E 63 
2ac48 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
2ac4c 1f6 3E 00 00 00 
2ac50 1f7 00 00 00 08 
2ac54 1f8 0C 0C 3F 0C 
2ac58 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
2ac5c 1fa 38 00 00 00 
2ac60 1fb 00 00 00 00 
2ac64 1fc 00 00 33 33 
2ac68 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
2ac6c 1fe 6E 00 00 00 
2ac70 1ff 00 00 00 00 
2ac74 200 00 00 63 63 
2ac78 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
2ac7c 202 1C 00 00 00 
2ac80 203 00 00 00 00 
2ac84 204 00 00 63 63 
2ac88 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
2ac8c 206 36 00 00 00 
2ac90 207 00 00 00 00 
2ac94 208 00 00 63 36 
2ac98 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
2ac9c 20a 63 00 00 00 
2aca0 20b 00 00 00 00 
2aca4 20c 00 00 63 63 
2aca8 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
2acac 20e 7E 60 30 1F 
2acb0 20f 00 00 00 00 
2acb4 210 00 00 7F 33 
2acb8 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
2acbc 212 7F 00 00 00 
2acc0 213 00 00 00 70 
2acc4 214 18 18 18 0E 
2acc8 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
2accc 216 70 00 00 00 
2acd0 217 00 00 00 18 
2acd4 218 18 18 18 18 
2acd8 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
2acdc 21a 18 00 00 00 
2ace0 21b 00 00 00 0E 
2ace4 21c 18 18 18 70 
2ace8 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
2acec 21e 0E 00 00 00 
2acf0 21f 6E 3B 00 00 
2acf4 220 00 00 00 00 
2acf8 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2acfc 222 00 00 00 00 
2ad00 223 00 00 00 00 
2ad04 224 00 00       | 	byte	$00[10]
2ad06 224 08 1C 36 63 
2ad0a 225 63 63 7F 00 
2ad0e 226 00 00 00 00 
2ad12 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
2ad16 228 03 03 03 03 
2ad1a 229 43 66 3C 18 
2ad1e 22a 30 1E 00 00 
2ad22 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
2ad26 22c 33 33 33 33 
2ad2a 22d 33 33       | 	byte	$33[6]
2ad2c 22e 6E 00 00 00 
2ad30 22f 00 00 60 30 
2ad34 230 18 00 3E 63 
2ad38 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
2ad3c 232 3E 00 00 00 
2ad40 233 00 00 08 1C 
2ad44 234 36 00 1E 30 
2ad48 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
2ad4c 236 6E 00 00 00 
2ad50 237 00 00 00 00 
2ad54 238 33 00 1E 30 
2ad58 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
2ad5c 23a 6E 00 00 00 
2ad60 23b 00 00 1C 36 
2ad64 23c 1C 00 33 33 
2ad68 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
2ad6c 23e 6E 00 00 00 
2ad70 23f 00 00 60 30 
2ad74 240 18 00 3E 63 
2ad78 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
2ad7c 242 3E 00 00 00 
2ad80 243 00 00 00 00 
2ad84 244 00 00 3E 63 
2ad88 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
2ad8c 246 3E 18 30 1E 
2ad90 247 00 00 00 1C 
2ad94 248 58 78 38 18 
2ad98 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
2ad9c 24a 3C 00 00 00 
2ada0 24b 00 00 00 00 
2ada4 24c 63 00 3E 63 
2ada8 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
2adac 24e 3E 00 00 00 
2adb0 24f 66 33 00 3E 
2adb4 250 63 63 63 63 
2adb8 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
2adbc 252 3E 00 00 00 
2adc0 253 00 00 CC 66 
2adc4 254 33 00 3E 63 
2adc8 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
2adcc 256 3E 00 00 00 
2add0 257 00 00 18 3C 
2add4 258 66 00 1C 18 
2add8 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
2addc 25a 3C 00 00 00 
2ade0 25b 30 18 00 7F 
2ade4 25c 63 61 30 18 
2ade8 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
2adec 25e 7F 00 00 00 
2adf0 25f 00 63 00 08 
2adf4 260 1C 36 63 63 
2adf8 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
2adfc 262 63 00 00 00 
2ae00 263 30 18 00 3C 
2ae04 264 66 43 03 03 
2ae08 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
2ae0c 266 3C 00 00 00 
2ae10 267 30 18 00 7F 
2ae14 268 66 46 16 1E 
2ae18 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
2ae1c 26a 7F 00 00 00 
2ae20 26b 0C 06 00 0F 
2ae24 26c 06 06 06 06 
2ae28 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
2ae2c 26e 7F 00 00 00 
2ae30 26f 30 18 00 1C 
2ae34 270 18 18 18 18 
2ae38 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
2ae3c 272 3C 00 00 00 
2ae40 273 00 00 08 1C 
2ae44 274 36 00 3E 63 
2ae48 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
2ae4c 276 3E 00 00 00 
2ae50 277 00 00 00 00 
2ae54 278 63 00 3E 63 
2ae58 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
2ae5c 27a 3E 00 00 00 
2ae60 27b 00 00 00 6F 
2ae64 27c 46 26 06 06 
2ae68 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
2ae6c 27e 7F 00 00 00 
2ae70 27f 00 00 00 6E 
2ae74 280 4C 2C 0C 0C 
2ae78 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
2ae7c 282 1E 00 00 00 
2ae80 283 30 18 00 3E 
2ae84 284 63 63 06 1C 
2ae88 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
2ae8c 286 3E 00 00 00 
2ae90 287 00 00 60 30 
2ae94 288 18 00 3E 63 
2ae98 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
2ae9c 28a 3E 00 00 00 
2aea0 28b 00 63 00 3E 
2aea4 28c 63 63 63 63 
2aea8 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
2aeac 28e 3E 00 00 00 
2aeb0 28f 00 63 00 63 
2aeb4 290 63 63 63 63 
2aeb8 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
2aebc 292 3E 00 00 00 
2aec0 293 6C 38 00 7E 
2aec4 294 7E 5A 18 18 
2aec8 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
2aecc 296 3C 00 00 00 
2aed0 297 00 00 60 48 
2aed4 298 2C 0C 3F 0C 
2aed8 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
2aedc 29a 38 00 00 00 
2aee0 29b 00 00 00 0F 
2aee4 29c 26 36 1E 0E 
2aee8 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
2aeec 29e 7F 00 00 00 
2aef0 29f 00 00 00 00 
2aef4 2a0 00 63 36 1C 
2aef8 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
2aefc 2a2 00 00 00 00 
2af00 2a3 00 00       | 	byte	$00[6]
2af02 2a3 36 1C 08 00 
2af06 2a4 3E 63 03 03 
2af0a 2a5 03 63 3E 00 
2af0e 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
2af12 2a7 30 18 0C 00 
2af16 2a8 1E 30 3E 33 
2af1a 2a9 33 33 6E 00 
2af1e 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
2af22 2ab 60 30 18 00 
2af26 2ac 1C 18 18 18 
2af2a 2ad 18 18 3C 00 
2af2e 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
2af32 2af 60 30 18 00 
2af36 2b0 3E 63 63 63 
2af3a 2b1 63 63 3E 00 
2af3e 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
2af42 2b3 30 18 0C 00 
2af46 2b4 33 33 33 33 
2af4a 2b5 33 33 6E 00 
2af4e 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
2af52 2b7 00 08 1C 36 
2af56 2b8 63 63 7F 63 
2af5a 2b9 63 63 63 18 
2af5e 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
2af62 2bb 00 00 00 00 
2af66 2bc 1E 30 3E 33 
2af6a 2bd 33 33 6E 18 
2af6e 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
2af72 2bf 00 7F 63 61 
2af76 2c0 30 18 0C 06 
2af7a 2c1 43 63 7F 00 
2af7e 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
2af82 2c3 36 1C 08 00 
2af86 2c4 7F 33 18 0C 
2af8a 2c5 06 63 7F 00 
2af8e 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
2af92 2c7 00 7F 66 46 
2af96 2c8 16 1E 16 06 
2af9a 2c9 46 66 7F 18 
2af9e 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
2afa2 2cb 00 00 00 00 
2afa6 2cc 3E 63 7F 03 
2afaa 2cd 03 63 3E 18 
2afae 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
2afb2 2cf 00 3C 66 03 
2afb6 2d0 1F 03 0F 03 
2afba 2d1 03 66 3C 00 
2afbe 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
2afc2 2d3 60 30 18 00 
2afc6 2d4 7F 33 18 0C 
2afca 2d5 06 63 7F 00 
2afce 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
2afd2 2d7 00 3C 66 43 
2afd6 2d8 03 03 03 03 
2afda 2d9 43 66 3C 00 
2afde 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
2afe2 2db 00 00 00 00 
2afe6 2dc 3E 63 06 1C 
2afea 2dd 30 63 3E 18 
2afee 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
2aff2 2df 00 00 00 00 
2aff6 2e0 00 00       | 	byte	$00[6]
2aff8 2e1 6C 36 1B 36 
2affc 2e2 6C 00 00 00 
2b000 2e3 00 00 00 00 
2b004 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b008 2e5 1B 36 6C 36 
2b00c 2e6 1B 00 00 00 
2b010 2e7 88 22 88 22 
2b014 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
2b018 2e9 88 22 88 22 
2b01c 2ea 88 22 88 22 
2b020 2eb AA 55 AA 55 
2b024 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
2b028 2ed AA 55 AA 55 
2b02c 2ee AA 55 AA 55 
2b030 2ef BB EE BB EE 
2b034 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
2b038 2f1 BB EE BB EE 
2b03c 2f2 BB EE BB EE 
2b040 2f3 18 18 18 18 
2b044 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
2b048 2f5 18 18 18 18 
2b04c 2f6 18 18 18 18 
2b050 2f7 18 18 18 18 
2b054 2f8 18 18 18    | 	byte	$18[15]
2b057 2f8 1F 18 18 18 
2b05b 2f9 18 18 18 18 
2b05f 2fa 18 30 18 00 
2b063 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
2b067 2fc 63 7F 63 63 
2b06b 2fd 63 63 00 00 
2b06f 2fe 00 1C 36 00 
2b073 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
2b077 300 63 7F 63 63 
2b07b 301 63 63 00 00 
2b07f 302 00 36 1C 00 
2b083 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
2b087 304 1E 16 06 46 
2b08b 305 66 7F 00 00 
2b08f 306 00 00 00 00 
2b093 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
2b097 308 1C 30 60 63 
2b09b 309 63 3E 18 30 
2b09f 30a 1E 6C 6C 6C 
2b0a3 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
2b0a7 30c 6F 6C 6C 6C 
2b0ab 30d 6C 6C 6C 6C 
2b0af 30e 6C 6C 6C 6C 
2b0b3 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2b0b7 310 6C 6C 6C 6C 
2b0bb 311 6C 6C 6C 6C 
2b0bf 312 6C          | 	byte	$6c[9]
2b0c0 313 00 00 00 00 
2b0c4 314 00          | 	byte	$00[5]
2b0c5 314 7F 60 6F 6C 
2b0c9 315 6C 6C 6C 6C 
2b0cd 316 6C 6C 6C 6C 
2b0d1 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2b0d5 318 6F 60 7F 00 
2b0d9 319 00 00 00 00 
2b0dd 31a 00 00 00 18 
2b0e1 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
2b0e5 31c 61 30 18 0C 
2b0e9 31d 06 43 63 7F 
2b0ed 31e 00 00 00 00 
2b0f1 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
2b0f5 320 00 7F 33 18 
2b0f9 321 0C 06 63 7F 
2b0fd 322 00 00 00 00 
2b101 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
2b105 324 00 00 1F 18 
2b109 325 18 18 18 18 
2b10d 326 18 18 18 18 
2b111 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2b115 328 18 18 F8 00 
2b119 329 00 00 00 00 
2b11d 32a 00 00 00 18 
2b121 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
2b125 32c 18 18 FF 00 
2b129 32d 00 00 00 00 
2b12d 32e 00 00 00 00 
2b131 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b135 330 00 00 FF 18 
2b139 331 18 18 18 18 
2b13d 332 18 18 18 18 
2b141 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2b145 334 18 18 F8 18 
2b149 335 18 18 18 18 
2b14d 336 18 18 18 00 
2b151 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
2b155 338 00 00 FF 00 
2b159 339 00 00 00 00 
2b15d 33a 00 00 00 18 
2b161 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
2b165 33c 18 18 FF 18 
2b169 33d 18 18 18 18 
2b16d 33e 18 18 18 63 
2b171 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
2b175 340 36 63 63 7F 
2b179 341 63 63 63 63 
2b17d 342 00 00 00 00 
2b181 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
2b185 344 00 1E 30 3E 
2b189 345 33 33 33 6E 
2b18d 346 00 00 00 6C 
2b191 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
2b195 348 EC 0C FC 00 
2b199 349 00 00 00 00 
2b19d 34a 00 00 00 00 
2b1a1 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b1a5 34c FC 0C EC 6C 
2b1a9 34d 6C 6C 6C 6C 
2b1ad 34e 6C 6C 6C 6C 
2b1b1 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2b1b5 350 EF 00 FF 00 
2b1b9 351 00 00 00 00 
2b1bd 352 00 00 00 00 
2b1c1 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b1c5 354 FF 00 EF 6C 
2b1c9 355 6C 6C 6C 6C 
2b1cd 356 6C 6C 6C 6C 
2b1d1 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2b1d5 358 EC 0C EC 6C 
2b1d9 359 6C 6C 6C 6C 
2b1dd 35a 6C 6C 6C 00 
2b1e1 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
2b1e5 35c FF 00 FF 00 
2b1e9 35d 00 00 00 00 
2b1ed 35e 00 00 00 6C 
2b1f1 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
2b1f5 360 EF 00 EF 6C 
2b1f9 361 6C 6C 6C 6C 
2b1fd 362 6C 6C 6C 00 
2b201 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
2b205 364 63 3E 63 63 
2b209 365 63 63 3E 63 
2b20d 366 00 00 00 00 
2b211 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
2b215 368 30 3C 36 33 
2b219 369 33 33 33 6E 
2b21d 36a 00 00 00 00 
2b221 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
2b225 36c 66 66 6F 66 
2b229 36d 66 66 36 1F 
2b22d 36e 00 00 00 36 
2b231 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
2b235 370 66 66 66 66 
2b239 371 66 66       | 	byte	$66[6]
2b23b 371 36 1F 00 00 
2b23f 372 00 00 63 00 
2b243 373 7F 66 46 16 
2b247 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
2b24b 375 66 7F 00 00 
2b24f 376 00 6C 38 00 
2b253 377 38 30 30 3C 
2b257 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
2b25b 379 33 6E 00 00 
2b25f 37a 00 36 1C 00 
2b263 37b 63 67 6F 7F 
2b267 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
2b26b 37d 63 63 00 00 
2b26f 37e 00 30 18 00 
2b273 37f 3C 18 18 18 
2b277 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
2b27b 381 18 3C 00 00 
2b27f 382 00 3C 66 00 
2b283 383 3C 18 18 18 
2b287 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
2b28b 385 18 3C 00 00 
2b28f 386 00 00 00 36 
2b293 387 1C 08 00 3E 
2b297 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
2b29b 389 63 3E 00 00 
2b29f 38a 00 18 18 18 
2b2a3 38b 18 18 18 18 
2b2a7 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
2b2ab 38d 00 00 00 00 
2b2af 38e 00 00 00 00 
2b2b3 38f 00 00 00 00 | 	byte	$00[12]
2b2b7 390 F8 18 18 18 
2b2bb 391 18 18 18 18 
2b2bf 392 18 FF FF FF 
2b2c3 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
2b2c7 394 FF FF FF FF 
2b2cb 395 FF FF FF FF 
2b2cf 396 FF          | 	byte	$ff[9]
2b2d0 397 00 00 00 00 
2b2d4 398 00 00 00    | 	byte	$00[7]
2b2d7 398 FF FF FF FF 
2b2db 399 FF FF FF FF 
2b2df 39a FF          | 	byte	$ff[9]
2b2e0 39b 00 00 00 7E 
2b2e4 39c 7E 5A 18 18 
2b2e8 39d 18 18 18 18 
2b2ec 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
2b2f0 39f 1C 36 1C 63 
2b2f4 3a0 63 63 63 63 
2b2f8 3a1 63 63 63 63 
2b2fc 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2b300 3a3 FF FF FF FF 
2b304 3a4 FF FF FF    | 	byte	$ff[7]
2b307 3a4 00 00 00 00 
2b30b 3a5 00 00 00 00 
2b30f 3a6 00          | 	byte	$00[9]
2b310 3a7 30 18 00 3E 
2b314 3a8 63 63 63 63 
2b318 3a9 63 63 63 63 
2b31c 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2b320 3ab 00 00 00 1E 
2b324 3ac 33 33 33 1B 
2b328 3ad 33 63 63 63 
2b32c 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
2b330 3af 1C 36 00 3E 
2b334 3b0 63 63 63 63 
2b338 3b1 63 63 63 63 
2b33c 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2b340 3b3 30 18 00 63 
2b344 3b4 67 6F 7F 7B 
2b348 3b5 73 63 63 63 
2b34c 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
2b350 3b7 00 00 60 30 
2b354 3b8 18 00 3B 66 
2b358 3b9 66 66 66 66 
2b35c 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
2b360 3bb 00 00 36 1C 
2b364 3bc 08 00 3B 66 
2b368 3bd 66 66 66 66 
2b36c 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
2b370 3bf 36 1C 00 3E 
2b374 3c0 63 63 06 1C 
2b378 3c1 30 60 63 63 
2b37c 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
2b380 3c3 00 00 36 1C 
2b384 3c4 08 00 3E 63 
2b388 3c5 06 1C 30 63 
2b38c 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
2b390 3c7 30 18 00 3F 
2b394 3c8 66 66 66 3E 
2b398 3c9 36 66 66 66 
2b39c 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
2b3a0 3cb 30 18 00 63 
2b3a4 3cc 63 63 63 63 
2b3a8 3cd 63 63 63 63 
2b3ac 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2b3b0 3cf 00 00 60 30 
2b3b4 3d0 18 00 3B 6E 
2b3b8 3d1 66 06 06 06 
2b3bc 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
2b3c0 3d3 66 33 00 63 
2b3c4 3d4 63 63 63 63 
2b3c8 3d5 63 63 63 63 
2b3cc 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2b3d0 3d7 00 00 60 30 
2b3d4 3d8 18 00 63 63 
2b3d8 3d9 63 63 63 63 
2b3dc 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
2b3e0 3db 30 18 00 66 
2b3e4 3dc 66 66 66 3C 
2b3e8 3dd 18 18 18 18 
2b3ec 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
2b3f0 3df 00 00 00 08 
2b3f4 3e0 0C 0C 3F 0C 
2b3f8 3e1 0C 0C 0C 6C 
2b3fc 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
2b400 3e3 30 18 00 00 
2b404 3e4 00 00 00 00 
2b408 3e5 00 00 00 00 
2b40c 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b410 3e7 00 00 00 00 
2b414 3e8 00 00 00 00 | 	byte	$00[8]
2b418 3e9 7F 00 00 00 
2b41c 3ea 00 00 00 00 
2b420 3eb 66 33 00 00 
2b424 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
2b428 3ed 00 00 00 00 
2b42c 3ee 00 00 00 00 
2b430 3ef 00 00 00 00 
2b434 3f0 00 00 00 00 
2b438 3f1 00 00 00 00 
2b43c 3f2 00          | 	byte	$00[21]
2b43d 3f2 0C 06 3C 36 
2b441 3f3 1C 00 00 00 
2b445 3f4 00 00 00 00 
2b449 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b44d 3f6 00 00 00 63 
2b451 3f7 3E 00 00 00 
2b455 3f8 00 00 00 00 
2b459 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b45d 3fa 00 00 00 00 
2b461 3fb 3E 63 06 1C 
2b465 3fc 36 63 63 36 
2b469 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
2b46d 3fe 00 00 00 00 
2b471 3ff 00 00 00 00 | 	byte	$00[8]
2b475 400 18 00 7E 00 
2b479 401 18 00 00 00 
2b47d 402 00 00 00 00 
2b481 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b485 404 00 00 00 00 
2b489 405 00 00 00 00 | 	byte	$00[8]
2b48d 406 18 30 1E 00 
2b491 407 00 00 1C 36 
2b495 408 36 1C 00 00 
2b499 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
2b49d 40a 00 00 00 00 
2b4a1 40b 63 00 00 00 
2b4a5 40c 00 00 00 00 
2b4a9 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b4ad 40e 00 00 00 18 
2b4b1 40f 18 00 00 00 
2b4b5 410 00 00 00 00 
2b4b9 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b4bd 412 00 00 00 00 
2b4c1 413 00          | 	byte	$00[5]
2b4c2 413 CC 66 33 00 
2b4c6 414 33 33 33 33 
2b4ca 415 33 33 6E 00 
2b4ce 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
2b4d2 417 00 3F 66 66 
2b4d6 418 66 3E 36 66 
2b4da 419 66 66 6F 00 
2b4de 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
2b4e2 41b 36 1C 08 00 
2b4e6 41c 3B 6E 66 06 
2b4ea 41d 06 06 0F 00 
2b4ee 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
2b4f2 41f 00 00 00 7E 
2b4f6 420 7E 7E 7E 7E 
2b4fa 421 7E 7E 00 00 
2b4fe 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
2b502 423 00 00 00 00 
2b506 424 00 00 00 00 
2b50a 425 00 00 00 00 
2b50e 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b510 427             | 'vga_font       file "vgafont.def"
2b510 427 00 00 00 00 
      ...             
2b540 433 00 00 00 00 
2b544 434 00 00 00    | st_font        file "st4font.def"
2b547 434 FF FF 00 00 
2b54b 435 00 00 00 00 
2b54f 436 00 18 18 18 
2b553 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2b557 438 18 18 18 18 
2b55b 439 18 18 18 18 
2b55f 43a 18          | 	byte	$18[9]
2b560 43b 00 00 00 00 
2b564 43c 00 00 00    | 	byte	$00[7]
2b567 43c FF FF 18 18 
2b56b 43d 18 18 18 18 
2b56f 43e 18 18 18 18 
2b573 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2b577 440 FF FF 00 00 
2b57b 441 00 00 00 00 
2b57f 442 00 18 18 18 
2b583 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2b587 444 1F 1F 18 18 
2b58b 445 18 18 18 18 
2b58f 446 18 18 18 18 
2b593 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2b597 448 F8 F8 18 18 
2b59b 449 18 18 18 18 
2b59f 44a 18 00 00 00 
2b5a3 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2b5a7 44c 1F 1F 18 18 
2b5ab 44d 18 18 18 18 
2b5af 44e 18 00 00 00 
2b5b3 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2b5b7 450 F8 F8 18 18 
2b5bb 451 18 18 18 18 
2b5bf 452 18 18 18 18 
2b5c3 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2b5c7 454 1F 1F 00 00 
2b5cb 455 00 00 00 00 
2b5cf 456 00 18 18 18 
2b5d3 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2b5d7 458 F8 F8 00 00 
2b5db 459 00 00 00 00 
2b5df 45a 00 18 18 18 
2b5e3 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2b5e7 45c FF FF 18 18 
2b5eb 45d 18 18 18 18 
2b5ef 45e 18 00 00 18 
2b5f3 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
2b5f7 460 66 7E 7E 66 
2b5fb 461 66 66 66 30 
2b5ff 462 18 00 00 7E 
2b603 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
2b607 464 3E 06 06 06 
2b60b 465 06 7E 7E 18 
2b60f 466 0C 30 18 3C 
2b613 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
2b617 468 06 06 06 66 
2b61b 469 66 7E 3C 00 
2b61f 46a 00 30 18 66 
2b623 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
2b627 46c 7E 7E 76 76 
2b62b 46d 66 66 66 00 
2b62f 46e 00 30 18 7C 
2b633 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
2b637 470 1C 38 70 60 
2b63b 471 60 7E 3E 00 
2b63f 472 00 30 18 7E 
2b643 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
2b647 474 18 0C 0C 06 
2b64b 475 06 7E 7E 00 
2b64f 476 00 18 18 00 
2b653 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
2b657 478 18 18 0C 0C 
2b65b 479 06 7E 7E 00 
2b65f 47a 00 30 18 3C 
2b663 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
2b667 47c 66 66 66 66 
2b66b 47d 66          | 	byte	$66[5]
2b66c 47e 7E 3C 00 00 
2b670 47f 00 00 06 06 
2b674 480 06 06 16 1E 
2b678 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
2b67c 482 7E 7E 00 00 
2b680 483 00 00 00 00 
2b684 484 00 3C 7C 60 
2b688 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
2b68c 486 7E 7C 30 18 
2b690 487 00 00 00 00 
2b694 488 00 3C 7E 66 
2b698 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
2b69c 48a 7E 7C 18 0C 
2b6a0 48b 00 00 30 18 
2b6a4 48c 00 3C 3E 06 
2b6a8 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
2b6ac 48e 7E 7C 00 00 
2b6b0 48f 00 00 30 18 
2b6b4 490 00 3E 7E 66 
2b6b8 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
2b6bc 492 66 66 00 00 
2b6c0 493 00 00 30 18 
2b6c4 494 00 7C 7E 06 
2b6c8 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
2b6cc 496 7E 3E 00 00 
2b6d0 497 00 00 30 18 
2b6d4 498 00 7E 7E 30 
2b6d8 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
2b6dc 49a 7E 7E 00 00 
2b6e0 49b 00 00 18 18 
2b6e4 49c 00 7E 7E 30 
2b6e8 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
2b6ec 49e 7E 7E 00 00 
2b6f0 49f 00 00 30 18 
2b6f4 4a0 00 3C 7E 66 
2b6f8 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
2b6fc 4a2 7E 3C 00 00 
2b700 4a3 00 00 1C 1C 
2b704 4a4 18 18 38 3C 
2b708 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
2b70c 4a6 3C 3C 00 00 
2b710 4a7 00 00 00 00 
2b714 4a8 00 00 00 00 
2b718 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b71c 4aa 00 00 00 00 
2b720 4ab 00 00       | 	byte	$00[6]
2b722 4ab 18 18 18 18 
2b726 4ac 18 18 18 18 | 	byte	$18[8]
2b72a 4ad 00 00 18 18 
2b72e 4ae 00 00 00 00 
2b732 4af 66 66 66 66 
2b736 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
2b73a 4b1 00 00 00 00 
2b73e 4b2 00 00 00 00 
2b742 4b3 00          | 	byte	$00[9]
2b743 4b3 66 66 FF FF 
2b747 4b4 66 66 FF FF 
2b74b 4b5 66 66 00 00 
2b74f 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
2b753 4b7 7C 7E 06 06 
2b757 4b8 3E 7C 60 60 
2b75b 4b9 7E 3E 18 18 
2b75f 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
2b763 4bb 66 30 30 18 
2b767 4bc 18 0C 0C 66 
2b76b 4bd 66 00 00 00 
2b76f 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
2b773 4bf 66 66 3C 1C 
2b777 4c0 1C FC FE 66 
2b77b 4c1 66 FE FC 00 
2b77f 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
2b783 4c3 18 18 18 18 
2b787 4c4 00 00 00 00 
2b78b 4c5 00 00 00 00 
2b78f 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
2b793 4c7 18 1C 0C 0C 
2b797 4c8 0C 0C 0C 0C 
2b79b 4c9 1C 18 30 00 
2b79f 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
2b7a3 4cb 18 38 30 30 
2b7a7 4cc 30 30 30 30 
2b7ab 4cd 38 18 0C 00 
2b7af 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
2b7b3 4cf 66 66 3C 3C 
2b7b7 4d0 FF FF 3C 3C 
2b7bb 4d1 66 66 00 00 
2b7bf 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
2b7c3 4d3 00 18 18 18 
2b7c7 4d4 7E 7E 18 18 
2b7cb 4d5 18 00 00 00 
2b7cf 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2b7d3 4d7 00 00 00 00 
2b7d7 4d8 00 00       | 	byte	$00[6]
2b7d9 4d9 18 18 18 18 
2b7dd 4da 18          | 	byte	$18[5]
2b7de 4da 0C 04 00 00 
2b7e2 4db 00 00 00 00 
2b7e6 4dc 7E 7E 00 00 
2b7ea 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
2b7ee 4de 00 00 00 00 
2b7f2 4df 00 00 00 00 
2b7f6 4e0 00 00 00 00 
2b7fa 4e1 00          | 	byte	$00[13]
2b7fb 4e1 18 18 18 00 
2b7ff 4e2 00 00 00 60 
2b803 4e3 60 60 30 30 
2b807 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
2b80b 4e5 06 06 06 00 
2b80f 4e6 00 00 00 3C 
2b813 4e7 7E 66 66 66 
2b817 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
2b81b 4e9 66 7E 3C 00 
2b81f 4ea 00 00 00 18 
2b823 4eb 18 1C 1C 18 
2b827 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
2b82b 4ed 18 7E 7E 00 
2b82f 4ee 00 00 00 3C 
2b833 4ef 7E 66 66 30 
2b837 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
2b83b 4f1 0C 7E 7E 00 
2b83f 4f2 00 00 00 7E 
2b843 4f3 7E 30 30 18 
2b847 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
2b84b 4f5 66 7E 3C 00 
2b84f 4f6 00 00 00 30 
2b853 4f7 30 38 38 3C 
2b857 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
2b85b 4f9 7E 30 30 00 
2b85f 4fa 00 00 00 7E 
2b863 4fb 7E 06 06 3E 
2b867 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
2b86b 4fd 66 7E 3C 00 
2b86f 4fe 00 00 00 38 
2b873 4ff 3C 0E 06 06 
2b877 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
2b87b 501 66 7E 3C 00 
2b87f 502 00 00 00 7E 
2b883 503 7E 60 60 30 
2b887 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
2b88b 505 0C 0C 0C 00 
2b88f 506 00 00 00 3C 
2b893 507 7E 66 66 3C 
2b897 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
2b89b 509 66 7E 3C 00 
2b89f 50a 00 00 00 3C 
2b8a3 50b 7E 66 66 7E 
2b8a7 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
2b8ab 50d 70 3C 1C 00 
2b8af 50e 00 00 00 00 
2b8b3 50f 00 00 18 18 
2b8b7 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
2b8bb 511 18 18 18 00 
2b8bf 512 00 00 00 00 
2b8c3 513 00 00 18 18 
2b8c7 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
2b8cb 515 18 18 18 0C 
2b8cf 516 04 00 00 00 
2b8d3 517 70 38 1C 0E 
2b8d7 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
2b8db 519 70 00 00 00 
2b8df 51a 00 00 00 00 
2b8e3 51b 00 00 7E 7E 
2b8e7 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
2b8eb 51d 00 00 00 00 
2b8ef 51e 00 00 00 00 | 	byte	$00[8]
2b8f3 51f 0E 1C 38 70 
2b8f7 520 E0 70 38 1C 
2b8fb 521 0E 00 00 00 
2b8ff 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
2b903 523 7E 66 66 30 
2b907 524 30 18 18 18 
2b90b 525 00 18 18 00 
2b90f 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
2b913 527 7E 66 66 66 
2b917 528 66 36 06 66 
2b91b 529 66 7E 3C 00 
2b91f 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
2b923 52b 3C 7E 66 66 
2b927 52c 66 7E 7E 66 
2b92b 52d 66 66 66 00 
2b92f 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
2b933 52f 7E 66 66 7E 
2b937 530 3E 66 66 66 
2b93b 531 66 7E 3E 00 
2b93f 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
2b943 533 7E 66 66 06 
2b947 534 06 06 06 66 
2b94b 535 66 7E 3C 00 
2b94f 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
2b953 537 7E 66 66 66 
2b957 538 66 66 66 66 
2b95b 539 66 7E 3E 00 
2b95f 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
2b963 53b 7E 06 06 3E 
2b967 53c 3E 06 06 06 
2b96b 53d 06 7E 7E 00 
2b96f 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
2b973 53f 7E 06 06 3E 
2b977 540 3E 06 06 06 
2b97b 541 06 06 06 00 
2b97f 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
2b983 543 7E 06 06 76 
2b987 544 76 66 66 66 
2b98b 545 66 7E 3C 00 
2b98f 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
2b993 547 66 66 66 7E 
2b997 548 7E 66 66 66 
2b99b 549 66 66 66 00 
2b99f 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
2b9a3 54b 7E 18 18 18 
2b9a7 54c 18 18 18 18 
2b9ab 54d 18 7E 7E 00 
2b9af 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
2b9b3 54f 60 60 60 60 
2b9b7 550 60 60 60    | 	byte	$60[7]
2b9ba 551 66 66 7E 3C 
2b9be 552 00 00 00 00 
2b9c2 553 66 66 36 36 
2b9c6 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
2b9ca 555 66 66 C6 C6 
2b9ce 556 00 00 00 00 
2b9d2 557 06 06 06 06 
2b9d6 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
2b9da 559 06 06 7E 7E 
2b9de 55a 00 00 00 00 
2b9e2 55b C6 C6 EE EE 
2b9e6 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
2b9ea 55d C6 C6 C6 C6 
2b9ee 55e 00 00 00 00 
2b9f2 55f 66 66 66 6E 
2b9f6 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
2b9fa 561 76 66 66 66 
2b9fe 562 00 00 00 00 
2ba02 563 3C 7E 66 66 
2ba06 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
2ba0a 565 66 66 7E 3C 
2ba0e 566 00 00 00 00 
2ba12 567 3E 7E 66 66 
2ba16 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
2ba1a 569 06 06 06 06 
2ba1e 56a 00 00 00 00 
2ba22 56b 3C 7E 66 66 
2ba26 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
2ba2a 56d 66 56 3E 6C 
2ba2e 56e 00 00 00 00 
2ba32 56f 3E 7E 66 66 
2ba36 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
2ba3a 571 66 66 C6 C6 
2ba3e 572 00 00 00 00 
2ba42 573 7C 7E 06 06 
2ba46 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
2ba4a 575 60 60 7E 3E 
2ba4e 576 00 00 00 00 
2ba52 577 7E 7E 18 18 
2ba56 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
2ba5a 579 18 18 18 18 
2ba5e 57a 00 00 00 00 
2ba62 57b 66 66 66 66 
2ba66 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
2ba6a 57d 66 66 7E 3C 
2ba6e 57e 00 00 00 00 
2ba72 57f 66 66 66 66 
2ba76 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
2ba7a 581 3C 3C 18 18 
2ba7e 582 00 00 00 00 
2ba82 583 C6 C6 C6 C6 
2ba86 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
2ba8a 585 FE EE C6 82 
2ba8e 586 00 00 00 00 
2ba92 587 66 66 66 3C 
2ba96 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
2ba9a 589 3C 66 66 66 
2ba9e 58a 00 00 00 00 
2baa2 58b 66 66 66 66 
2baa6 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
2baaa 58d 18 18 18 18 
2baae 58e 00 00 00 00 
2bab2 58f 7E 7E 30 30 
2bab6 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
2baba 591 06 06 7E 7E 
2babe 592 00 00 00 00 
2bac2 593 3C 3C 0C 0C 
2bac6 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
2baca 595 0C 0C 3C 3C 
2bace 596 00 00 00 00 
2bad2 597 06 06 0C 0C 
2bad6 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
2bada 599 60 60 C0 C0 
2bade 59a 00 00 00 00 
2bae2 59b 3C 3C 30 30 
2bae6 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
2baea 59d 30 30 3C 3C 
2baee 59e 00 00 00 00 
2baf2 59f 18 18 3C 3C 
2baf6 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
2bafa 5a1 00 00 00 00 
2bafe 5a2 00 00 00 00 
2bb02 5a3 00 00 00 00 
2bb06 5a4 00 00 00 00 
2bb0a 5a5 00 00       | 	byte	$00[18]
2bb0c 5a6 FE FE 00 00 
2bb10 5a7 00 00 0C 0C 
2bb14 5a8 18 18 00 00 
2bb18 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
2bb1c 5aa 00 00 00 00 
2bb20 5ab 00 00 00 00 
2bb24 5ac 00          | 	byte	$00[9]
2bb25 5ac 3C 7C 60 7C 
2bb29 5ad 7E 66 66 7E 
2bb2d 5ae 7C 00 00 00 
2bb31 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
2bb35 5b0 3E 7E 66 66 
2bb39 5b1 66 66 66 7E 
2bb3d 5b2 3E 00 00 00 
2bb41 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
2bb45 5b4 3C 3E 06 06 
2bb49 5b5 06 06 06 7E 
2bb4d 5b6 7C 00 00 00 
2bb51 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
2bb55 5b8 7C 7E 66 66 
2bb59 5b9 66 66 66 7E 
2bb5d 5ba 7C 00 00 00 
2bb61 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
2bb65 5bc 3C 7E 66 66 
2bb69 5bd 7E 06 06 7E 
2bb6d 5be 7C 00 00 00 
2bb71 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
2bb75 5c0 18 7E 7E 18 
2bb79 5c1 18 18 18 18 
2bb7d 5c2 18 00 00 00 
2bb81 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2bb85 5c4 7C 7E 66 66 
2bb89 5c5 66 66 7E 7C 
2bb8d 5c6 60 7E 3E 00 
2bb91 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
2bb95 5c8 3E 7E 66 66 
2bb99 5c9 66 66 66 66 
2bb9d 5ca 66 00 00 00 
2bba1 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
2bba5 5cc 1C 1C 18 18 
2bba9 5cd 18 18 18 3C 
2bbad 5ce 3C 00 00 00 
2bbb1 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
2bbb5 5d0 30 30 30 30 
2bbb9 5d1 30 30 30 30 
2bbbd 5d2 30          | 	byte	$30[9]
2bbbe 5d2 3E 1E 00 00 
2bbc2 5d3 06 06 06 36 
2bbc6 5d4 36 1E 1E 1E 
2bbca 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
2bbce 5d6 00 00 00 00 
2bbd2 5d7 1C 1C 18 18 
2bbd6 5d8 18 18 18 18 
2bbda 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
2bbde 5da 00 00 00 00 
2bbe2 5db 00 00 00    | 	byte	$00[7]
2bbe5 5dc 6C FE FE D6 
2bbe9 5dd D6 C6 C6 C6 
2bbed 5de C6 00 00 00 
2bbf1 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
2bbf5 5e0 3E 7E 66 66 
2bbf9 5e1 66 66 66 66 
2bbfd 5e2 66 00 00 00 
2bc01 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
2bc05 5e4 3C 7E 66 66 
2bc09 5e5 66 66 66 7E 
2bc0d 5e6 3C 00 00 00 
2bc11 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
2bc15 5e8 3E 7E 66 66 
2bc19 5e9 66 66 66 7E 
2bc1d 5ea 3E 06 06 00 
2bc21 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
2bc25 5ec 7C 7E 66 66 
2bc29 5ed 66 66 66 7E 
2bc2d 5ee 7C 60 60 00 
2bc31 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
2bc35 5f0 3E 7E 66 06 
2bc39 5f1 06 06 06 06 
2bc3d 5f2 06 00 00 00 
2bc41 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
2bc45 5f4 7C 7E 06 0E 
2bc49 5f5 3C 70 60 7E 
2bc4d 5f6 3E 00 00 00 
2bc51 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
2bc55 5f8 7E 7E 18 18 
2bc59 5f9 18 18 18 78 
2bc5d 5fa 70 00 00 00 
2bc61 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
2bc65 5fc 66 66 66 66 
2bc69 5fd 66 66 66    | 	byte	$66[7]
2bc6c 5fe 7E 7C 00 00 
2bc70 5ff 00 00 00 00 
2bc74 600 00 66 66 66 
2bc78 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
2bc7c 602 18 18 00 00 
2bc80 603 00 00 00 00 
2bc84 604 00 C6 C6 D6 
2bc88 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
2bc8c 606 C6 82 00 00 
2bc90 607 00 00 00 00 
2bc94 608 00 66 66 3C 
2bc98 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
2bc9c 60a 66 66 00 00 
2bca0 60b 00 00 00 00 
2bca4 60c 00 66 66 66 
2bca8 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
2bcac 60e 7C 60 7E 3E 
2bcb0 60f 00 00 00 00 
2bcb4 610 00 7E 7E 30 
2bcb8 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
2bcbc 612 7E 7E 00 00 
2bcc0 613 00 00 30 18 
2bcc4 614 18 18 18 0C 
2bcc8 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
2bccc 616 18 30 00 00 
2bcd0 617 00 00 18 18 
2bcd4 618 18 18 18 18 
2bcd8 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2bcdc 61a 18 18 00 00 
2bce0 61b 00 00 0C 18 
2bce4 61c 18 18 18 30 
2bce8 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
2bcec 61e 18 0C 00 00 
2bcf0 61f 00 00 6C 7E 
2bcf4 620 36 00 00 00 
2bcf8 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
2bcfc 622 00 00 00 00 
2bd00 623 00 00 00 00 
2bd04 624 00          | 	byte	$00[9]
2bd05 624 18 18 18 18 
2bd09 625 18 18 00 00 
2bd0d 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
2bd10 627             | 'amiga_font     file "amigafont.def"
2bd10 627 00 6C FE FE 
2bd14 628 7C 38 10 00 
2bd18 629 18 18 18 F8 
2bd1c 62a F8 18 18 18 | a8_font        file "atari8.fnt"
2bd20 62b C0 C0 C0 C0 
2bd24 62c C0 C0 C0 C0 | 	byte	$c0[8]
2bd28 62d 18 18 18 1F 
2bd2c 62e 1F 00 00 00 
2bd30 62f 18 18 18 1F 
2bd34 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
2bd38 631 00 00 00 1F 
2bd3c 632 1F 18 18 18 
2bd40 633 C0 E0 70 38 
2bd44 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
2bd48 635 03 07 0E 1C 
2bd4c 636 38 70 E0 C0 
2bd50 637 80 C0 E0 F0 
2bd54 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
2bd58 639 00 00 00 00 
2bd5c 63a F0 F0 F0 F0 
2bd60 63b 01 03 07 0F 
2bd64 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
2bd68 63d F0 F0 F0 F0 
2bd6c 63e 00 00 00 00 
2bd70 63f 0F 0F 0F 0F 
2bd74 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
2bd78 641 FF FF 00 00 
2bd7c 642 00 00 00 00 
2bd80 643 00 00 00 00 
2bd84 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
2bd88 645 00 00 00 00 
2bd8c 646 0F 0F 0F 0F 
2bd90 647 00 38 38 EE 
2bd94 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
2bd98 649 00 00 00 F8 
2bd9c 64a F8 18 18 18 
2bda0 64b 00 00 00 FF 
2bda4 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
2bda8 64d 18 18 18 FF 
2bdac 64e FF 18 18 18 
2bdb0 64f 00 00 3C 7E 
2bdb4 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
2bdb8 651 00 00 00 00 
2bdbc 652 FF FF FF FF 
2bdc0 653 03 03 03 03 
2bdc4 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
2bdc8 655 00 00 00 FF 
2bdcc 656 FF 18 18 18 
2bdd0 657 18 18 18 FF 
2bdd4 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
2bdd8 659 0F 0F 0F 0F 
2bddc 65a 0F 0F 0F 0F | 	byte	$0f[8]
2bde0 65b 18 18 18 F8 
2bde4 65c F8 00 00 00 
2bde8 65d 1E 06 1E 06 
2bdec 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
2bdf0 65f 00 18 3C 7E 
2bdf4 660 18 18 18 00 
2bdf8 661 00 18 18 18 
2bdfc 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
2be00 663 00 18 0C 7E 
2be04 664 0C 18 00 00 
2be08 665 00 18 30 7E 
2be0c 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
2be10 667 00 00 00 00 
2be14 668 00 00 00 00 
2be18 669 00          | 	byte	$00[9]
2be19 669 18 18 18 18 
2be1d 66a 00 18 00 00 
2be21 66b 66 66 66 00 
2be25 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
2be29 66d 66 FF 66 66 
2be2d 66e FF 66 00 18 
2be31 66f 7C 06 3C 60 
2be35 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
2be39 671 66 36 18 0C 
2be3d 672 66 62 00 38 
2be41 673 6C 38 1C F6 
2be45 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
2be49 675 18 18 18 00 
2be4d 676 00 00 00 00 
2be51 677 70 38 18 18 
2be55 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
2be59 679 0E 1C 18 18 
2be5d 67a 1C 0E 00 00 
2be61 67b 66 3C FF 3C 
2be65 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
2be69 67d 18 18 7E 18 
2be6d 67e 18 00 00 00 
2be71 67f 00 00 00 00 
2be75 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
2be79 681 00 00 7E 00 
2be7d 682 00 00 00 00 
2be81 683 00 00 00 00 
2be85 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
2be89 685 60 30 18 0C 
2be8d 686 06 02 00 00 
2be91 687 3C 66 76 6E 
2be95 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
2be99 689 18 1C 18 18 
2be9d 68a 18 7E 00 00 
2bea1 68b 3C 66 30 18 
2bea5 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
2bea9 68d 7E 30 18 30 
2bead 68e 66 3C 00 00 
2beb1 68f 30 38 3C 36 
2beb5 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
2beb9 691 7E 06 3E 60 
2bebd 692 66 3C 00 00 
2bec1 693 3C 06 3E 66 
2bec5 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
2bec9 695 7E 60 30 18 
2becd 696 0C 0C 00 00 
2bed1 697 3C 66 3C 66 
2bed5 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
2bed9 699 3C 66 7C 60 
2bedd 69a 30 1C 00 00 
2bee1 69b 00 18 18 00 
2bee5 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
2bee9 69d 00 18 18 00 
2beed 69e 18 18 0C 60 
2bef1 69f 30 18 0C 18 
2bef5 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
2bef9 6a1 00 7E 00 00 
2befd 6a2 7E 00 00 06 
2bf01 6a3 0C 18 30 18 
2bf05 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
2bf09 6a5 3C 66 30 18 
2bf0d 6a6 00 18 00 00 
2bf11 6a7 3C 66 76 76 
2bf15 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
2bf19 6a9 18 3C 66 66 
2bf1d 6aa 7E 66 00 00 
2bf21 6ab 3E 66 3E 66 
2bf25 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
2bf29 6ad 3C 66 06 06 
2bf2d 6ae 66 3C 00 00 
2bf31 6af 1E 36 66 66 
2bf35 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
2bf39 6b1 7E 06 3E 06 
2bf3d 6b2 06 7E 00 00 
2bf41 6b3 7E 06 3E 06 
2bf45 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
2bf49 6b5 7C 06 06 76 
2bf4d 6b6 66 7C 00 00 
2bf51 6b7 66 66 7E 66 
2bf55 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
2bf59 6b9 7E 18 18 18 
2bf5d 6ba 18 7E 00 00 
2bf61 6bb 60 60 60 60 
2bf65 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
2bf69 6bd 66 36 1E 1E 
2bf6d 6be 36 66 00 00 
2bf71 6bf 06 06 06 06 
2bf75 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
2bf79 6c1 C6 EE FE D6 
2bf7d 6c2 C6 C6 00 00 
2bf81 6c3 66 6E 7E 7E 
2bf85 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
2bf89 6c5 3C 66 66 66 
2bf8d 6c6 66 3C 00 00 
2bf91 6c7 3E 66 66 3E 
2bf95 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
2bf99 6c9 3C 66 66 66 
2bf9d 6ca 36 6C 00 00 
2bfa1 6cb 3E 66 66 3E 
2bfa5 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
2bfa9 6cd 3C 06 3C 60 
2bfad 6ce 60 3C 00 00 
2bfb1 6cf 7E 18 18 18 
2bfb5 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
2bfb9 6d1 66 66 66 66 
2bfbd 6d2 66          | 	byte	$66[5]
2bfbe 6d2 7E 00 00 66 
2bfc2 6d3 66 66 66 3C 
2bfc6 6d4 18 00 00 C6 
2bfca 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
2bfce 6d6 C6 00 00 66 
2bfd2 6d7 66 3C 3C 66 
2bfd6 6d8 66 00 00 66 
2bfda 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
2bfde 6da 18 00 00 7E 
2bfe2 6db 30 18 0C 06 
2bfe6 6dc 7E 00 00 78 
2bfea 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
2bfee 6de 78 00 00 02 
2bff2 6df 06 0C 18 30 
2bff6 6e0 60 00 00 1E 
2bffa 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
2bffe 6e2 1E 00 00 10 
2c002 6e3 38 6C C6 00 
2c006 6e4 00 00 00 00 
2c00a 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
2c00e 6e6 FF 00 00 18 
2c012 6e7 3C 7E 7E 3C 
2c016 6e8 18 00 00 00 
2c01a 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
2c01e 6ea 7C 00 00 06 
2c022 6eb 06 3E 66 66 
2c026 6ec 3E 00 00 00 
2c02a 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
2c02e 6ee 3C 00 00 60 
2c032 6ef 60 7C 66 66 
2c036 6f0 7C 00 00 00 
2c03a 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
2c03e 6f2 3C 00 00 70 
2c042 6f3 18 7C 18 18 
2c046 6f4 18 00 00 00 
2c04a 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
2c04e 6f6 60 3E 00 06 
2c052 6f7 06 3E 66 66 
2c056 6f8 66 00 00 18 
2c05a 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
2c05e 6fa 3C 00 00 60 
2c062 6fb 00 60 60 60 
2c066 6fc 60 3C 00 06 
2c06a 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
2c06e 6fe 66 00 00 1C 
2c072 6ff 18 18 18 18 
2c076 700 3C 00 00 00 
2c07a 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
2c07e 702 C6 00 00 00 
2c082 703 3E 66 66 66 
2c086 704 66 00 00 00 
2c08a 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
2c08e 706 3C 00 00 00 
2c092 707 3E 66 66 3E 
2c096 708 06 06 00 00 
2c09a 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
2c09e 70a 60 60 00 00 
2c0a2 70b 3E 66 06 06 
2c0a6 70c 06 00 00 00 
2c0aa 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
2c0ae 70e 3E 00 00 18 
2c0b2 70f 7E 18 18 18 
2c0b6 710 70 00 00 00 
2c0ba 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
2c0be 712 7C 00 00 00 
2c0c2 713 66 66 66 3C 
2c0c6 714 18 00 00 00 
2c0ca 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
2c0ce 716 6C 00 00 00 
2c0d2 717 66 3C 18 3C 
2c0d6 718 66 00 00 00 
2c0da 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
2c0de 71a 30 1E 00 00 
2c0e2 71b 7E 30 18 0C 
2c0e6 71c 7E 00 00 18 
2c0ea 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
2c0ee 71e 3C 00 18 18 
2c0f2 71f 18 18 18 18 
2c0f6 720 18 18 00 7E 
2c0fa 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
2c0fe 722 60 00 10 18 
2c102 723 1C 1E 1C 18 
2c106 724 10 00 08 18 
2c10a 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
2c10e 726 08 00       | 	byte	$08, $00
2c110 727 00 00 00 00 
2c114 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
2c115 728 80 00 00 00 
2c119 729 00 80 00 00 
2c11d 72a 80 80 00 00 
2c121 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
2c125 72c 80 00 80 00 
2c129 72d 00 40 80 00 
2c12d 72e AA AA AA 00 
2c131 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
2c135 730 FF 00 00 00 
2c139 731 00 FF 00 00 
2c13d 732 FF FF 00 00 
2c141 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
2c145 734 FF 00 FF 00 
2c149 735 00 FF FF 00 
2c14d 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
2c150 737 00 00 00 00 
2c154 738 00          | ataripalette   file "ataripalettep2.def"
2c155 738 11 11 11 00 
2c159 739 22 22 22 00 
2c15d 73a 33 33 33 00 
2c161 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
2c165 73c 55 55 55 00 
2c169 73d 66 66 66 00 
2c16d 73e 77 77 77 00 
2c171 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
2c175 740 99 99 99 00 
2c179 741 AA AA AA 00 
2c17d 742 BB BB BB 00 
2c181 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
2c185 744 DD DD DD 00 
2c189 745 EE EE EE 00 
2c18d 746 FF FF FF 00 
2c191 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
2c195 748 00 14 40 00 
2c199 749 00 1E 60 00 
2c19d 74a 00 28 80 00 
2c1a1 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
2c1a5 74c 00 3C BF 00 
2c1a9 74d 00 46 DF 00 
2c1ad 74e 00 50 FF 00 
2c1b1 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
2c1b5 750 39 77 FF 00 
2c1b9 751 55 8A FF 00 
2c1bd 752 71 9E FF 00 
2c1c1 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
2c1c5 754 AA C5 FF 00 
2c1c9 755 C6 D8 FF 00 
2c1cd 756 E3 EC FF 00 
2c1d1 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
2c1d5 758 00 00 40 00 
2c1d9 759 00 00 60 00 
2c1dd 75a 00 00 80 00 
2c1e1 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
2c1e5 75c 00 00 BF 00 
2c1e9 75d 00 00 DF 00 
2c1ed 75e 00 00 FF 00 
2c1f1 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
2c1f5 760 39 39 FF 00 
2c1f9 761 55 55 FF 00 
2c1fd 762 71 71 FF 00 
2c201 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
2c205 764 AA AA FF 00 
2c209 765 C6 C6 FF 00 
2c20d 766 E3 E3 FF 00 
2c211 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
2c215 768 20 00 40 00 
2c219 769 30 00 60 00 
2c21d 76a 40 00 80 00 
2c221 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
2c225 76c 60 00 BF 00 
2c229 76d 70 00 DF 00 
2c22d 76e 80 00 FF 00 
2c231 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
2c235 770 9C 39 FF 00 
2c239 771 AA 55 FF 00 
2c23d 772 B8 71 FF 00 
2c241 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
2c245 774 D5 AA FF 00 
2c249 775 E3 C6 FF 00 
2c24d 776 F1 E3 FF 00 
2c251 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
2c255 778 40 00 40 00 
2c259 779 60 00 60 00 
2c25d 77a 80 00 80 00 
2c261 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
2c265 77c BF 00 BF 00 
2c269 77d DF 00 DF 00 
2c26d 77e FF 00 FF 00 
2c271 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
2c275 780 FF 39 FF 00 
2c279 781 FF 55 FF 00 
2c27d 782 FF 71 FF 00 
2c281 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
2c285 784 FF AA FF 00 
2c289 785 FF C6 FF 00 
2c28d 786 FF E3 FF 00 
2c291 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
2c295 788 40 00 20 00 
2c299 789 60 00 30 00 
2c29d 78a 80 00 40 00 
2c2a1 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
2c2a5 78c BF 00 60 00 
2c2a9 78d DF 00 70 00 
2c2ad 78e FF 00 80 00 
2c2b1 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
2c2b5 790 FF 39 9C 00 
2c2b9 791 FF 55 AA 00 
2c2bd 792 FF 71 B8 00 
2c2c1 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
2c2c5 794 FF AA D5 00 
2c2c9 795 FF C6 E3 00 
2c2cd 796 FF E3 F1 00 
2c2d1 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
2c2d5 798 40 00 00 00 
2c2d9 799 60 00 00 00 
2c2dd 79a 80 00 00 00 
2c2e1 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
2c2e5 79c BF 00 00 00 
2c2e9 79d DF 00 00 00 
2c2ed 79e FF 00 00 00 
2c2f1 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
2c2f5 7a0 FF 39 39 00 
2c2f9 7a1 FF 55 55 00 
2c2fd 7a2 FF 71 71 00 
2c301 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
2c305 7a4 FF AA AA 00 
2c309 7a5 FF C6 C6 00 
2c30d 7a6 FF E3 E3 00 
2c311 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
2c315 7a8 40 10 00 00 
2c319 7a9 60 18 00 00 
2c31d 7aa 80 20 00 00 
2c321 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
2c325 7ac BF 30 00 00 
2c329 7ad DF 38 00 00 
2c32d 7ae FF 40 00 00 
2c331 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
2c335 7b0 FF 6A 39 00 
2c339 7b1 FF 80 55 00 
2c33d 7b2 FF 95 71 00 
2c341 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
2c345 7b4 FF BF AA 00 
2c349 7b5 FF D5 C6 00 
2c34d 7b6 FF EA E3 00 
2c351 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
2c355 7b8 40 20 00 00 
2c359 7b9 60 30 00 00 
2c35d 7ba 80 40 00 00 
2c361 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
2c365 7bc BF 60 00 00 
2c369 7bd DF 70 00 00 
2c36d 7be FF 80 00 00 
2c371 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
2c375 7c0 FF 9C 39 00 
2c379 7c1 FF AA 55 00 
2c37d 7c2 FF B8 71 00 
2c381 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
2c385 7c4 FF D5 AA 00 
2c389 7c5 FF E3 C6 00 
2c38d 7c6 FF F1 E3 00 
2c391 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
2c395 7c8 40 30 00 00 
2c399 7c9 60 48 00 00 
2c39d 7ca 80 60 00 00 
2c3a1 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
2c3a5 7cc BF 90 00 00 
2c3a9 7cd DF A8 00 00 
2c3ad 7ce FF C0 00 00 
2c3b1 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
2c3b5 7d0 FF CE 39 00 
2c3b9 7d1 FF D5 55 00 
2c3bd 7d2 FF DC 71 00 
2c3c1 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
2c3c5 7d4 FF EA AA 00 
2c3c9 7d5 FF F1 C6 00 
2c3cd 7d6 FF F8 E3 00 
2c3d1 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
2c3d5 7d8 30 40 00 00 
2c3d9 7d9 48 60 00 00 
2c3dd 7da 60 80 00 00 
2c3e1 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
2c3e5 7dc 90 BF 00 00 
2c3e9 7dd A8 DF 00 00 
2c3ed 7de C0 FF 00 00 
2c3f1 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
2c3f5 7e0 CE FF 39 00 
2c3f9 7e1 D5 FF 55 00 
2c3fd 7e2 DC FF 71 00 
2c401 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
2c405 7e4 EA FF AA 00 
2c409 7e5 F1 FF C6 00 
2c40d 7e6 F8 FF E3 00 
2c411 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
2c415 7e8 00 40 00 00 
2c419 7e9 00 60 00 00 
2c41d 7ea 00 80 00 00 
2c421 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
2c425 7ec 00 BF 00 00 
2c429 7ed 00 DF 00 00 
2c42d 7ee 00 FF 00 00 
2c431 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
2c435 7f0 39 FF 39 00 
2c439 7f1 55 FF 55 00 
2c43d 7f2 71 FF 71 00 
2c441 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
2c445 7f4 AA FF AA 00 
2c449 7f5 C6 FF C6 00 
2c44d 7f6 E3 FF E3 00 
2c451 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
2c455 7f8 00 40 14 00 
2c459 7f9 00 60 1E 00 
2c45d 7fa 00 80 28 00 
2c461 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
2c465 7fc 00 BF 3C 00 
2c469 7fd 00 DF 46 00 
2c46d 7fe 00 FF 50 00 
2c471 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
2c475 800 39 FF 77 00 
2c479 801 55 FF 8A 00 
2c47d 802 71 FF 9E 00 
2c481 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
2c485 804 AA FF C5 00 
2c489 805 C6 FF D8 00 
2c48d 806 E3 FF EC 00 
2c491 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
2c495 808 00 40 28 00 
2c499 809 00 60 3C 00 
2c49d 80a 00 80 50 00 
2c4a1 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
2c4a5 80c 00 BF 78 00 
2c4a9 80d 00 DF 8C 00 
2c4ad 80e 00 FF A0 00 
2c4b1 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
2c4b5 810 39 FF B5 00 
2c4b9 811 55 FF C0 00 
2c4bd 812 71 FF CA 00 
2c4c1 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
2c4c5 814 AA FF DF 00 
2c4c9 815 C6 FF EA 00 
2c4cd 816 E3 FF F4 00 
2c4d1 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
2c4d5 818 00 40 40 00 
2c4d9 819 00 60 60 00 
2c4dd 81a 00 80 80 00 
2c4e1 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
2c4e5 81c 00 BF BF 00 
2c4e9 81d 00 DF DF 00 
2c4ed 81e 00 FF FF 00 
2c4f1 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
2c4f5 820 39 FF FF 00 
2c4f9 821 55 FF FF 00 
2c4fd 822 71 FF FF 00 
2c501 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
2c505 824 AA FF FF 00 
2c509 825 C6 FF FF 00 
2c50d 826 E3 FF FF 00 
2c511 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
2c515 828 00 28 40 00 
2c519 829 00 3C 60 00 
2c51d 82a 00 50 80 00 
2c521 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
2c525 82c 00 78 BF 00 
2c529 82d 00 8C DF 00 
2c52d 82e 00 A0 FF 00 
2c531 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
2c535 830 39 B5 FF 00 
2c539 831 55 C0 FF 00 
2c53d 832 71 CA FF 00 
2c541 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
2c545 834 AA DF FF 00 
2c549 835 C6 EA FF 00 
2c54d 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
2c550 837             | 
2c550 837             | '**********************************************************************************
2c550 837             | '
2c550 837             | '        Timings and colors definitions
2c550 837             | '
2c550 837             | '**********************************************************************************
2c550 837             | 
2c550 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
2c550 837 10 00 00 00 
2c554 838 50 00 00 00 
2c558 839 0C 00 00 00 
2c55c 83a 00 04 00 00 | timings         long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
2c560 83b 08 00 00 00 
2c564 83c 04 00 00 00 
2c568 83d 08 00 00 00 
2c56c 83e 80 00 00 00 | 	byte	$08, $00, $00, $00, $04, $00, $00, $00, $08, $00, $00, $00, $80, $00, $00, $00
2c570 83f 40 02 00 00 
2c574 840 6A 8C 15 14 
2c578 841 FB 06 B7 01 
2c57c 842 40 02 00 00 | 	byte	$40, $02, $00, $00, $6a, $8c, $15, $14, $fb, $06, $b7, $01, $40, $02, $00, $00
2c580 843 00 00 00 00 
2c584 844 C0 00 00 00 
2c588 845 00 00 00 00 
2c58c 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2c590 847 00 75 C7 97 
2c594 848 27 47 F6 0A 
2c598 849 05 79 CB 9B 
2c59c 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
2c5a0 84b             | 
2c5a0 84b             | ''--------  Initialization  ----------------------------------------------------------------
2c5a0 84b             | 
2c5a0 84b 28 0C 64 FD | hdmi            setq    #6
2c5a4 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
2c5a8 84d 28 10 64 FD |                 setq    #8
2c5ac 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
2c5b0 84f             | 
2c5b0 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
2c5b4 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
2c5b8 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
2c5bc 852 D6 C6 01 F1 |                 add     t1,hbase
2c5c0 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
2c5c4 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
2c5c8 855 7B 0B 80 5F 
2c5cc 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
2c5d0 857 66 66 86 FF 
2c5d4 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
2c5d8 859             | '
2c5d8 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
2c5dc 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
2c5e0 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
2c5e4 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
2c5e8 85d             | 
2c5e8 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
2c5ec 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
2c5f0 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
2c5f4 860             | 
2c5f4 860             | ''--------  frame rendering main loop  ---------------------------------------------------
2c5f4 860             | 
2c5f4 860 28 06 64 FD | p101            setq 	#3
2c5f8 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
2c5fc 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
2c600 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
2c604 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
2c608 865 00 A0 05 F6 |                 mov     dlinum, #0
2c60c 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
2c610 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
2c614 868             | 
2c614 868             | 
2c614 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
2c618 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
2c61c 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
2c620 86b             |                 
2c620 86b             | 
2c620 86b             | 
2c620 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
2c620 86b             |   
2c620 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
2c624 86c 29 FE 65 3D |          if_nc  setq2   #255
2c628 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
2c62c 86e             | 
2c62c 86e             | '' -----   up porch (before the picture)
2c62c 86e             | 
2c62c 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
2c630 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
2c634 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
2c638 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
2c63c 872             |  
2c63c 872             |    
2c63c 872             |  
2c63c 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
2c640 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
2c644 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
2c648 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
2c64c 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
2c650 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
2c654 878             | 
2c654 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
2c658 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
2c65c 87a 48 00 B0 FD | 		call    #dli
2c660 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
2c664 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
2c668 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
2c66c 87e             |                 	
2c66c 87e             |                 
2c66c 87e             | 
2c66c 87e             |  
2c66c 87e             | '' ------- the main screen drawing starts here
2c66c 87e             | 
2c66c 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
2c670 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
2c674 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
2c678 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
2c67c 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
2c680 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
2c684 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
2c688 885             |               
2c688 885             | 
2c688 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
2c68c 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
2c690 887             | 
2c690 887             | ' ---------------- All visible lines displayed now, start vblank  
2c690 887             | 
2c690 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
2c694 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
2c698 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
2c69c 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
2c6a0 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
2c6a4 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
2c6a8 88d             | 
2c6a8 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
2c6a8 88d             | 
2c6a8 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
2c6a8 88d             | 
2c6a8 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
2c6ac 88e             | 
2c6ac 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
2c6b0 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
2c6b4 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
2c6b8 891             | 
2c6b8 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
2c6bc 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
2c6c0 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
2c6c4 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
2c6c8 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
2c6cc 896             | 
2c6cc 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
2c6d0 897 DD C6 41 F8 |                 getnib  t1,dl,#0
2c6d4 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
2c6d8 899 70 00 90 AD |     if_z        jmp     #preload
2c6dc 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
2c6e0 89b 94 00 90 AD |     if_z        jmp     #preload2
2c6e4 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
2c6e8 89d 0C 00 90 AD |     if_z        jmp     #p390
2c6ec 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
2c6f0 89f 28 00 90 AD |     if_z        jmp     #p391  
2c6f4 8a0             | 
2c6f4 8a0 2D 00 64 FD | p308            ret
2c6f8 8a1             |    
2c6f8 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
2c6fc 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
2c700 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
2c704 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
2c708 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
2c70c 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
2c710 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
2c714 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
2c718 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
2c71c 8aa             |  
2c71c 8aa             | '' --------  Reload palette. To do 
2c71c 8aa             | 
2c71c 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
2c720 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
2c724 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
2c728 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
2c72c 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
2c730 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
2c734 8b0 70 FF 9F FD |         	jmp     #dli                
2c738 8b1             |       
2c738 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
2c738 8b1             | 
2c738 8b1             | 
2c738 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
2c738 8b1             | 
2c738 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
2c73c 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
2c740 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
2c744 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
2c748 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
2c74c 8b6             |         
2c74c 8b6             | '' -------------- Preload a line from PSRAM        
2c74c 8b6             |         
2c74c 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
2c750 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
2c754 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
2c758 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
2c75c 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
2c760 8bb             | 
2c760 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
2c764 8bc 32 B7 01 F6 |                 mov     buf2,a1024
2c768 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
2c76c 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
2c770 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
2c774 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
2c778 8c1             |  
2c778 8c1             |  
2c778 8c1             | preload2      '  incmod  dlinum,#3
2c778 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
2c77c 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
2c780 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
2c784 8c4 28 02 64 FD |                 setq	#1
2c788 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
2c78c 8c6             |                 
2c78c 8c6             | 
2c78c 8c6             | '' -------------- Draw sprites
2c78c 8c6             | 
2c78c 8c6 CF 5C 02 F6 | sprite          mov t8,frames
2c790 8c7 10 5C 0E F5 | 		and t8,#16 wz
2c794 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
2c798 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
2c79c 8ca             | 		
2c79c 8ca             | 
2c79c 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
2c7a0 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
2c7a4 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
2c7a8 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
2c7ac 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
2c7b0 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
2c7b4 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
2c7b8 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
2c7bc 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
2c7c0 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
2c7c4 8d4 01 52 86 F1 |                 sub     sprite_h,#1
2c7c8 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
2c7cc 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
2c7d0 8d7             | 
2c7d0 8d7             | 
2c7d0 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
2c7d4 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
2c7d8 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
2c7dc 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
2c7e0 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
2c7e4 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
2c7e8 8dd 00 5E 06 F6 |                 mov 	t9,#0
2c7ec 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
2c7f0 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
2c7f4 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
2c7f8 8e1             |      
2c7f8 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
2c7fc 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
2c800 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
2c804 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
2c808 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
2c80c 8e6             |                 
2c80c 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
2c810 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
2c814 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
2c818 8e9             |   		
2c818 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
2c81c 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
2c820 8eb             | 
2c820 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
2c824 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
2c828 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
2c82c 8ee             |  
2c82c 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
2c830 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
2c834 8f0 10 00 90 CD |      if_c 	jmp     #p899		
2c838 8f1             | 	
2c838 8f1             | 	
2c838 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
2c83c 8f2 28 CD 01 F1 | 		add	t4,sprite_w
2c840 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
2c844 8f4             | 
2c844 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
2c848 8f5             | 
2c848 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
2c84c 8f6 01 58 86 F1 | 	 	sub     t6,#1
2c850 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
2c854 8f8             | 
2c854 8f8 28 58 62 FD |                 setq   	t6
2c858 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
2c85c 8fa 28 5D 02 F6 |                 mov t8,sprite_w
2c860 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
2c864 8fc 24 00 90 AD |         if_z    jmp #p898
2c868 8fd             |          
2c868 8fd             |         
2c868 8fd 70 5F 06 F6 |                 mov  t9,#368
2c86c 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
2c870 8ff             | 
2c870 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
2c874 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
2c878 901 FF FF 7F FF 
2c87c 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
2c880 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
2c884 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
2c888 905 2D 01 00 F5 |                 and 0-0, t7
2c88c 906             |                
2c88c 906             | 
2c88c 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
2c890 907 E5 E0 7A FA |                 wmlong 368,t3				
2c894 908             |                 
2c894 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
2c898 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
2c89c 90a 2D 00 64 FD |                 ret
2c8a0 90b             | 	
2c8a0 90b             | 	
2c8a0 90b             |                
2c8a0 90b             |  
2c8a0 90b             | '' -------------- Graphics line ------------------------------------------------------------
2c8a0 90b             |  
2c8a0 90b             | 
2c8a0 90b             | '' consts and vars
2c8a0 90b             | 
2c8a0 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
2c8a4 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
2c8a8 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
2c8ac 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
2c8b0 90f             | 
2c8b0 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
2c8b4 910             | 
2c8b4 910             | '------ these longs will be set by setmode function
2c8b4 910             | 
2c8b4 910 00 00 00 00 | m_bs            long    0        'blanks before sync
2c8b8 911 00 00 00 00 | m_sn            long    0        'sync
2c8bc 912 00 00 00 00 | m_bv            long    0        'blanks before visible
2c8c0 913 00 00 00 00 | m_vi            long    0        'visible pixels #
2c8c4 914             | 'm_border        long    0        'left/right borders
2c8c4 914 00 00 00 00 | i_upporch       long    0        'up porch lines
2c8c8 915 00 00 00 00 | i_vsync         long    0        'vsync lines
2c8cc 916 00 00 00 00 | i_downporch     long    0        'down porch lines
2c8d0 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
2c8d4 918 00 00 00 00 | i_totalvis      long    0
2c8d8 919             | 
2c8d8 919             | '-------------------------------------
2c8d8 919             |  
2c8d8 919 00 00 00 00 | linenum         long    0
2c8dc 91a 00 00 00 00 | frames          long    0
2c8e0 91b 00 00 00 00 | dlinum long 0
2c8e4 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
2c8e8 91d             | 
2c8e8 91d 00 00 00 00 | vblankptr       long    0
2c8ec 91e 00 00 00 00 | modeptr         long    0
2c8f0 91f 00 00 00 00 | paletteptr      long    0
2c8f4 920 00 00 00 00 | dlptr           long    0
2c8f8 921 01 00 00 00 | hbase           long    1
2c8fc 922 00 00 00 00 | mailbox         long    0
2c900 923 00 00 00 00 | spriteptr          long 0
2c904 924             | 
2c904 924 00 00 00 00 | cmd             long    0
2c908 925 00 B0 07 00 | buf1            long    $80000-16384-4096
2c90c 926 00 04 00 00 | buf2            long    1024
2c910 927 01 00 00 00 | dlptr2          long    1
2c914 928 01 00 00 00 | dl              long    1
2c918 929             | 
2c918 929 00 00 00 00 | buf1c long 0
2c91c 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
2c920 92b 01 00 00 00 | framebuf2       long    1
2c924 92c 01 00 00 00 | hsync0          long    1
2c928 92d 01 00 00 00 | hsync1          long    1
2c92c 92e             | 
2c92c 92e 01 00 00 00 | t1              long    1
2c930 92f 00 00 00 00 | t2 long 0
2c934 930 00 00 00 00 | t3 long 0
2c938 931 00 00 00 00 | t4 long 0
2c93c 932             | 
2c93c 932 00 00 00 00 | rcnt            long    0  'dl repeat count
2c940 933 00 00 00 00 | rcnt2           long    0
2c944 934 00 00 00 00 | rcnt2a          long    0
2c948 935 00 00 00 00 | roffset         long    0
2c94c 936 00 00 00 00 | rdl             long    0  'dl repeat line
2c950 937 00 00 00 00 | dlc             long    0  'dl command
2c954 938             | 
2c954 938 FF FF FF FF | affffffff       long    $ffffffff
2c958 939 00 00 00 00 | sprite1pointer long 0
2c95c 93a 00 00 00 00 | sprite1xy      long 0
2c960 93b 00 00 00 00 | sprite1wh      long 0
2c964 93c 00 00 00 00 | sprite2pointer long 0
2c968 93d 00 00 00 00 | sprite2xy      long 0
2c96c 93e 00 00 00 00 | sprite2wh      long 0
2c970 93f 00 00 00 00 | sprite3pointer long 0
2c974 940 00 00 00 00 | sprite3xy      long 0
2c978 941 00 00 00 00 | sprite3wh      long 0
2c97c 942 00 00 00 00 | sprite4pointer long 0
2c980 943 00 00 00 00 | sprite4xy      long 0
2c984 944 00 00 00 00 | sprite4wh      long 0
2c988 945 00 00 00 00 | sprite5pointer long 0
2c98c 946 00 00 00 00 | sprite5xy      long 0
2c990 947 00 00 00 00 | sprite5wh      long 0
2c994 948 00 00 00 00 | sprite6pointer long 0
2c998 949 00 00 00 00 | sprite6xy      long 0
2c99c 94a 00 00 00 00 | sprite6wh      long 0
2c9a0 94b 00 00 00 00 | sprite7pointer long 0
2c9a4 94c 00 00 00 00 | sprite7xy      long 0
2c9a8 94d 00 00 00 00 | sprite7wh      long 0
2c9ac 94e 00 00 00 00 | sprite8pointer long 0
2c9b0 94f 00 00 00 00 | sprite8xy      long 0
2c9b4 950 00 00 00 00 | sprite8wh      long 0
2c9b8 951 00 00 00 00 | sprite9pointer long 0
2c9bc 952 00 00 00 00 | sprite9xy      long 0
2c9c0 953 00 00 00 00 | sprite9wh      long 0
2c9c4 954 00 00 00 00 | sprite10pointer long 0
2c9c8 955 00 00 00 00 | sprite10xy      long 0
2c9cc 956 00 00 00 00 | sprite10wh      long 0
2c9d0 957 00 00 00 00 | sprite11pointer long 0
2c9d4 958 00 00 00 00 | sprite11xy      long 0
2c9d8 959 00 00 00 00 | sprite11wh      long 0
2c9dc 95a 00 00 00 00 | sprite12pointer long 0
2c9e0 95b 00 00 00 00 | sprite12xy      long 0
2c9e4 95c 00 00 00 00 | sprite12wh      long 0
2c9e8 95d 00 00 00 00 | sprite13pointer long 0
2c9ec 95e 00 00 00 00 | sprite13xy      long 0
2c9f0 95f 00 00 00 00 | sprite13wh      long 0
2c9f4 960 00 00 00 00 | sprite14pointer long 0
2c9f8 961 00 00 00 00 | sprite14xy      long 0
2c9fc 962 00 00 00 00 | sprite14wh      long 0
2ca00 963 00 00 00 00 | sprite15pointer long 0
2ca04 964 00 00 00 00 | sprite15xy      long 0
2ca08 965 00 00 00 00 | sprite15wh      long 0
2ca0c 966 00 00 00 00 | sprite16pointer long 0
2ca10 967 00 00 00 00 | sprite16xy      long 0
2ca14 968 00 00 00 00 | sprite16wh      long 0
2ca18 969 00 00 00 00 | sprite17pointer long 0
2ca1c 96a 00 00 00 00 | sprite17xy      long 0
2ca20 96b 00 00 00 00 | sprite17wh      long 0
2ca24 96c 00 00 00 00 | sprite18pointer long 0
2ca28 96d 00 00 00 00 | sprite18xy      long 0
2ca2c 96e 00 00 00 00 | sprite18wh      long 0
2ca30 96f 00 00 00 00 | spritenum long 0
2ca34 970             | 
2ca34 970 00 00 00 00 | spriteline long 0
2ca38 971 84 03 00 00 | sprite_x long 900
2ca3c 972 00 00 00 00 | sprite_y long 0
2ca40 973 10 00 00 00 | sprite_w long 16
2ca44 974 40 00 00 00 | sprite_h long 64
2ca48 975 00 00 00 00 | l2 long 0
2ca4c 976 00 00 00 00 | t5 long 0
2ca50 977 00 00 00 00 | t6 long 0
2ca54 978 00 00 00 00 | t7 long 0
2ca58 979 00 00 00 00 | t8 long 0
2ca5c 97a 00 00 00 00 | t9 long 0
2ca60 97b 00 00 00 00 | preloadaddr long 0
2ca64 97c 00 00 00 00 | preloadlineaddr long 0
2ca68 97d 00 04 00 00 | a1024 long 1024
2ca6c 97e             | 
2ca6c 97e E0 03 00 00 | aa long 992
2ca70 97f FF 03 00 00 | a1023 long 1023
2ca74 980 00 10 00 00 | a4096 long 4096
2ca78 981             |  fit 368
2ca78 981             | _psram_spin2_dat_
2ca78 981 00 00 00 00 
      ...             
2cb70 9bf 00 00 00 00 
2cb74 9c0 00 00 00 00 |     listdata long 0[8*8]
2cb78 9c1             |             orgh
2cb78                 | 
2cb78                 | ' driver state
2cb78     FF FF FF FF | drivercog   long    -1  ' COG id of driver
2cb7c     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
2cb80                 | 
2cb80                 | ' delay profile
2cb80     07 00 00 00 
2cb84     00 CF 7B 05 
2cb88     80 D1 F0 08 
2cb8c     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
2cb90     80 C4 60 0F 
2cb94     80 39 7A 12 
2cb98     40 2D D9 13 
2cb9c     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
2cba0                 | 
2cba0                 | ' data to be passed to driver when starting it
2cba0                 | startupData
2cba0     00 00 00 00 |     long    0           ' current frequency
2cba4     00 00 00 00 |     long    FLAGS       ' optional flags for driver
2cba8     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
2cbac     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
2cbb0     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
2cbb4     C0 CB 02 00 |     long    deviceData  ' address of devices data structure in HUBRAM
2cbb8     40 CC 02 00 |     long    qosData     ' address of QoS data structure in HUBRAM
2cbbc     60 CC 02 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
2cbc0                 | 
2cbc0                 | ' data for memory
2cbc0                 | deviceData
2cbc0                 |     ' 16 bank parameters follow (16MB per bank)
2cbc0     00 00 00 00 
      ...             
2cbf8     00 00 00 00 
2cbfc     00 00 00 00 |     long    0[16]                               ' banks 0-15
2cc00                 |     ' 16 banks of pin parameters follow
2cc00     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
2cc04     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
2cc08     FF FF FF FF 
      ...             
2cc38     FF FF FF FF 
2cc3c     FF FF FF FF |     long    -1[14]                              ' banks 2-15
2cc40                 | 
2cc40                 | ' data for COG polling
2cc40                 | qosData 
2cc40     00 00 FF FF 
2cc44     00 00 FF FF 
2cc48     00 00 FF FF 
2cc4c     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
2cc50     00 00 FF FF 
2cc54     00 00 FF FF 
2cc58     00 00 FF FF 
2cc5c     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
2cc60                 |     
2cc60                 | ' mailbox storage
2cc60                 | 
2cc60                 | mailboxes
2cc60     00 00 00 00 
      ...             
2ccb8     00 00 00 00 
2ccbc     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
2ccc0                 | 	alignl
2ccc0                 | _psram16drv_spin2_dat_
2ccc0                 |                             orgh
2ccc0     00 00 00 00 
      ...             
2ccd8     00 00 00 00 
2ccdc     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
2cce0                 | 
2cce0                 | driver_start
2cce0                 |                             org
2cce0 000             | '..................................................................................................
2cce0 000             | ' Memory layout for COG RAM once operational:
2cce0 000             | '
2cce0 000             | '  COG RAM address      Usage
2cce0 000             | '  ---------------      ----
2cce0 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
2cce0 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
2cce0 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
2cce0 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
2cce0 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
2cce0 000             | '  ~$198-$1F3           State and register variables
2cce0 000             | '
2cce0 000             | ' Also during driver COG startup:
2cce0 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
2cce0 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
2cce0 000             | '..................................................................................................
2cce0 000             |                             
2cce0 000             | ' Mailbox storage after vector initialization
2cce0 000             | 
2cce0 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
2cce4 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
2cce8 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
2ccec 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
2ccf0 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
2ccf4 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
2ccf8 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
2ccfc 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
2cd00 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
2cd04 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
2cd08 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
2cd0c 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
2cd10 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
2cd14 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
2cd18 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
2cd1c 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
2cd20 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
2cd24 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
2cd28 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
2cd2c 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
2cd30 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
2cd34 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
2cd38 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
2cd3c 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
2cd40 018             | 
2cd40 018             | ' Mailbox parameter addresses per COG once patched
2cd40 018             |                             
2cd40 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
2cd44 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
2cd48 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
2cd4c 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
2cd50 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
2cd54 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
2cd58 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
2cd5c 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
2cd60 020             | 
2cd60 020             | '..................................................................................................
2cd60 020             | ' Per COG request and state setup and service branching
2cd60 020             |         
2cd60 020             | cog0                 
2cd60 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
2cd64 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
2cd68 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
2cd6c 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
2cd70 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2cd74 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2cd78 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
2cd7c 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
2cd80 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
2cd84 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2cd88 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2cd8c 02b 33 CA 63 FD |                             execf   request-0               'jump to service
2cd90 02c             | cog1                        
2cd90 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
2cd94 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
2cd98 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
2cd9c 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
2cda0 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2cda4 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2cda8 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
2cdac 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
2cdb0 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
2cdb4 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2cdb8 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2cdbc 037 33 CA 63 FD |                             execf   request-0               'jump to service
2cdc0 038             | cog2                         
2cdc0 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
2cdc4 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
2cdc8 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
2cdcc 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
2cdd0 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2cdd4 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2cdd8 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
2cddc 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
2cde0 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
2cde4 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2cde8 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2cdec 043 33 CA 63 FD |                             execf   request-0               'jump to service
2cdf0 044             | cog3                        
2cdf0 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
2cdf4 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
2cdf8 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
2cdfc 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
2ce00 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2ce04 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2ce08 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
2ce0c 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
2ce10 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
2ce14 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2ce18 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2ce1c 04f 33 CA 63 FD |                             execf   request-0               'jump to service
2ce20 050             | cog4                        
2ce20 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
2ce24 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
2ce28 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
2ce2c 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
2ce30 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2ce34 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2ce38 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
2ce3c 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
2ce40 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
2ce44 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2ce48 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2ce4c 05b 33 CA 63 FD |                             execf   request-0               'jump to service
2ce50 05c             | cog5                        
2ce50 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
2ce54 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
2ce58 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
2ce5c 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
2ce60 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2ce64 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2ce68 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
2ce6c 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
2ce70 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
2ce74 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2ce78 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2ce7c 067 33 CA 63 FD |                             execf   request-0               'jump to service
2ce80 068             | cog6                        
2ce80 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
2ce84 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
2ce88 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
2ce8c 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
2ce90 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2ce94 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2ce98 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
2ce9c 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
2cea0 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
2cea4 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2cea8 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2ceac 073 33 CA 63 FD |                             execf   request-0               'jump to service
2ceb0 074             | cog7                        
2ceb0 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
2ceb4 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
2ceb8 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
2cebc 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
2cec0 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2cec4 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2cec8 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
2cecc 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
2ced0 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
2ced4 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2ced8 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2cedc 07f 33 CA 63 FD |                             execf   request-0               'jump to service
2cee0 080             |                             fit     128
2cee0 080             | 
2cee0 080             |                             fit     128
2cee0 080             | pad                         long    0[128-$]                'align init code to $80
2cee0 080             | 
2cee0 080             | '..................................................................................................
2cee0 080             | 
2cee0 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
2cee0 080             | 
2cee0 080             | init                        
2cee0 080             |                             ' get driver scratch long address in hub
2cee0 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
2cee4 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
2cee8 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
2ceec 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
2cef0 084             |                     
2cef0 084             |                             ' read in the additional LUT RAM code
2cef0 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
2cef4 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
2cef8 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
2cefc 087             | 
2cefc 087             |                             ' read the startup parameters
2cefc 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
2cf00 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
2cf04 089             | 
2cf04 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
2cf04 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
2cf08 08a             | 
2cf08 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
2cf0c 08b 01 00 00 5F 
2cf10 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
2cf14 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
2cf18 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
2cf1c 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
2cf20 090             | 
2cf20 090             |                             ' setup data pin modes and data bus pin group in streamer commands
2cf20 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
2cf24 091 01 00 00 FF 
2cf28 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
2cf2c 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
2cf30 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
2cf34 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
2cf38 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
2cf3c 097 08 DE 47 F5 |                             or      a, #8
2cf40 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
2cf44 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
2cf48 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
2cf4c 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
2cf50 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
2cf54 09d 01 DE 07 F1 |                             add     a, #1
2cf58 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
2cf5c 09f             |  
2cf5c 09f             |                             ' setup device control pin states
2cf5c 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
2cf60 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
2cf64 0a1 01 00 00 FF 
2cf68 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
2cf6c 0a3             | 
2cf6c 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
2cf70 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
2cf74 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
2cf78 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
2cf7c 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
2cf80 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
2cf84 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
2cf88 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
2cf8c 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
2cf90 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
2cf94 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
2cf98 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
2cf9c 0af             | pinloop
2cf9c 0af             |                             ' generate minimum CE high time before access
2cf9c 0af A1 07 00 FF 
2cfa0 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
2cfa4 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
2cfa8 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
2cfac 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
2cfb0 0b4 1F DE 63 FD |                             waitx   a                       'delay
2cfb4 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
2cfb8 0b6             | 
2cfb8 0b6             |                             ' setup the COG mailboxes and addresses 
2cfb8 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
2cfbc 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
2cfc0 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
2cfc4 0b9             | 
2cfc4 0b9 28 2E 64 FD |                             setq    #24-1
2cfc8 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
2cfcc 0bb             | 
2cfcc 0bb             |                             ' setup the polling loop for active COGs 
2cfcc 0bb 01 C2 63 FD |                             cogid   id
2cfd0 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
2cfd4 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
2cfd8 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
2cfdc 0bf 0A F0 07 F6 |                             mov     ptra, #10
2cfe0 0c0 E1 F1 03 FA |                             mul     ptra, id
2cfe4 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
2cfe8 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
2cfec 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
2cff0 0c4 03 C2 07 FA |                             mul     id, #3
2cff4 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
2cff8 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
2cffc 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
2d000 0c8 D8 01 B0 FD |                             call    #reloadcogs
2d004 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
2d008 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
2d00c 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
2d00c 0cb D8 E5 B7 F9 |                             setd    d, #addr1
2d010 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
2d014 0cd 08 04 DC FC |                             rep     #2, #8
2d018 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
2d01c 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
2d020 0d0             | 
2d020 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
2d020 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
2d020 0d0 01 C2 63 FD |                             cogid   id
2d024 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
2d028 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
2d02c 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
2d030 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
2d034 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
2d038 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
2d03c 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
2d040 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
2d044 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
2d048 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
2d04c 0db 3F E4 A7 F9 |                             alti    d, #%111_111
2d050 0dc 00 00 00 F6 |                             mov     0-0, 0-0
2d054 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
2d058 0de A5 E5 03 F1 |                             add     d, const512
2d05c 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
2d060 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
2d064 0e1 00 00 00 F6 |                             mov     0-0, 0-0
2d068 0e2             |                             
2d068 0e2             |                             ' setup register values for control vector loop setup after we return
2d068 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
2d06c 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
2d070 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
2d074 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
2d078 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
2d07c 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
2d080 0e8 D0 C3 8F F9 |                             altd    id, #id0
2d084 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
2d088 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
2d08c 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
2d090 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
2d094 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
2d098 0ee             |  
2d098 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
2d09c 0ef 07 CA 07 F5 |                             and     request, #7
2d0a0 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
2d0a4 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
2d0a8 0f2             |                             fit     $100                    'ensure all init code fits this space
2d0a8 0f2             | 
2d0a8 0f2             |                             fit     $100                    'ensure all init code fits this space
2d0a8 0f2             | 
2d0a8 0f2 00 00 00 00 
      ...             
2d0d8 0fe 00 00 00 00 
2d0dc 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
2d0e0 100             | 
2d0e0 100             | '..................................................................................................
2d0e0 100             | ' Error result handling and COG notification of request completion
2d0e0 100             | 
2d0e0 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
2d0e4 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
2d0e8 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
2d0ec 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
2d0f0 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
2d0f4 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
2d0f8 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
2d0fc 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
2d100 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
2d104 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
2d108 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
2d10c 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
2d110 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
2d114 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
2d118 10e             | ' Poller re-starts here after a COG is serviced
2d118 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
2d11c 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
2d120 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
2d124 111             | ' Main dynamic polling loop repeats until a request arrives
2d124 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
2d128 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
2d12c 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
2d130 114             | 
2d130 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
2d134 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
2d138 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
2d13c 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
2d140 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
2d144 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
2d148 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
2d14c 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
2d150 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
2d154 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
2d158 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
2d15c 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
2d160 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
2d164 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
2d168 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
2d16c 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
2d170 124             | 
2d170 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
2d174 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
2d178 126             |  
2d178 126             | '..................................................................................................
2d178 126             | ' List handler                               
2d178 126             | 
2d178 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
2d17c 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
2d180 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
2d184 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
2d188 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
2d18c 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
2d190 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
2d194 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
2d198 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
2d19c 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
2d1a0 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
2d1a4 131 33 00 60 FD |                             execf   0-0                     'process the request 
2d1a8 132             | 
2d1a8 132             | '..................................................................................................
2d1a8 132             | ' Restoring per COG state and resuming where we left off
2d1a8 132             | 
2d1a8 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
2d1ac 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
2d1b0 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
2d1b4 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
2d1b8 136 D8 CB FB F8 |                             getbyte request, addr1, #3
2d1bc 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
2d1c0 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
2d1c4 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
2d1c8 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
2d1cc 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
2d1d0 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
2d1d4 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
2d1d8 13e             |                    
2d1d8 13e             | '..................................................................................................
2d1d8 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
2d1d8 13e             | 
2d1d8 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
2d1dc 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
2d1e0 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
2d1e4 141 D0 DF B7 F9 |                             setd    a, #id0
2d1e8 142 D8 DF BF F9 |                             sets    a, #addr1
2d1ec 143 FE FF FF FF 
2d1f0 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
2d1f4 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
2d1f8 146 3F DE A7 F9 |                             alti    a, #%111_111 
2d1fc 147 00 00 F0 F9 |                             muxq    0-0, 0-0
2d200 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
2d204 149 01 E2 63 FD |                             cogid   c
2d208 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
2d20c 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
2d210 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
2d214 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
2d218 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
2d21c 14f 00 E0 03 F6 |                             mov     b, 0-0
2d220 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
2d224 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
2d228 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
2d22c 153 0C 00 90 AD |             if_z            jmp     #excluded               
2d230 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
2d234 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
2d238 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
2d23c 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
2d240 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
2d244 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
2d248 15a             | 
2d248 15a             | 'determine priority cogs and build instructions for the polling sequence
2d248 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
2d24c 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
2d250 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
2d254 15d             | 
2d254 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
2d258 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
2d25c 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
2d260 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
2d264 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
2d268 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
2d26c 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
2d270 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
2d274 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
2d278 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
2d27c 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
2d280 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
2d284 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
2d288 16a             | endprioloop
2d288 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
2d28c 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
2d290 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
2d294 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
2d298 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
2d29c 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
2d2a0 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
2d2a4 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
2d2a8 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
2d2ac 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
2d2b0 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
2d2b4 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
2d2b8 176             | 
2d2b8 176             | ' populate the round robin COG polling instructions
2d2b8 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
2d2bc 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
2d2c0 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
2d2c4 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
2d2c8 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
2d2cc 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
2d2d0 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
2d2d4 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
2d2d8 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
2d2dc 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
2d2e0 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
2d2e4 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
2d2e8 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
2d2ec 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
2d2f0 184             | '..................................................................................................
2d2f0 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
2d2f0 184             | 
2d2f0 184             | set_latency                                                 '            (a) set latency
2d2f0 184             | get_latency                                                 '            (b) get latency
2d2f0 184             | set_burst                                                   '            (c) set burst size of bank
2d2f0 184             | get_burst                                                   '            (d) get burst size of bank
2d2f0 184             |                                                             '            (e) dump state
2d2f0 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
2d2f4 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
2d2f8 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
2d2fc 187             |                                                             ' | | | | e  account for following AUGS
2d2fc 187 04 00 00 FF 
2d300 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
2d304 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
2d308 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
2d30c 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
2d310 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
2d314 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
2d318 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
2d31c 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
2d320 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
2d324 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
2d328 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
2d32c 193             | 
2d32c 193             | '..................................................................................................
2d32c 193             | ' Misc EXECF code
2d32c 193             | 
2d32c 193 33 72 63 FD | start_read_exec             execf   newburstr
2d330 194 33 7C 63 FD | start_write_exec            execf   resumewrites
2d334 195 33 78 63 FD | continue_read_exec          execf   lockedreads
2d338 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
2d33c 197             | 
2d33c 197             | '..................................................................................................
2d33c 197             | ' Variables
2d33c 197             | 
2d33c 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
2d340 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
2d344 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
2d348 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
2d34c 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
2d350 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
2d354 19d             | 
2d354 19d 00 00 00 80 | xfreq1          long    $80000000
2d358 19e 00 00 00 40 | xfreq2          long    $40000000
2d35c 19f 03 00 00 00 | delay           long    3
2d360 1a0             | 
2d360 1a0             | lutcodeaddr                 
2d360 1a0             | startupparams
2d360 1a0             | excludedcogs                                    'careful: shared register use!
2d360 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
2d364 1a1 00 00 00 00 | flags           long    0
2d368 1a2             | mask                                            'careful: shared register use!
2d368 1a2 00 00 00 00 | resetmaskA      long    0
2d36c 1a3             | limit                                           'careful: shared register use!
2d36c 1a3 00 00 00 00 | resetmaskB      long    0
2d370 1a4 00 00 00 00 | datapins        long    0
2d374 1a5             | const512                                        'careful: shared register use!
2d374 1a5 00 00 00 00 | devicelist      long    0
2d378 1a6 00 00 00 00 | coglist         long    0
2d37c 1a7 00 00 00 00 | mbox            long    0 
2d380 1a8             | 
2d380 1a8             | clkpin                                          'shared with code patched during init
2d380 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
2d384 1a9             | cspin                                           'shared with code patched during init
2d384 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
2d388 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
2d38c 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
2d390 1ac 01 00 00 00 | clkdelay        long    1
2d394 1ad 00 00 00 00 | regdatabus      long    0
2d398 1ae             | 
2d398 1ae 10 00 00 00 | deviceaddr      long    $10
2d39c 1af             | rrcounter
2d39c 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
2d3a0 1b0             | 
2d3a0 1b0             | ' jump addresses for the per COG handlers
2d3a0 1b0 20 00 00 00 | cog0_handler    long    cog0
2d3a4 1b1 2C 00 00 00 | cog1_handler    long    cog1
2d3a8 1b2 38 00 00 00 | cog2_handler    long    cog2
2d3ac 1b3 44 00 00 00 | cog3_handler    long    cog3
2d3b0 1b4 50 00 00 00 | cog4_handler    long    cog4
2d3b4 1b5 5C 00 00 00 | cog5_handler    long    cog5
2d3b8 1b6 68 00 00 00 | cog6_handler    long    cog6
2d3bc 1b7 74 00 00 00 | cog7_handler    long    cog7
2d3c0 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
2d3c4 1b9             | 
2d3c4 1b9             | ' EXECF sequences
2d3c4 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
2d3c8 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
2d3cc 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
2d3d0 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
2d3d4 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
2d3d8 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
2d3dc 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
2d3e0 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
2d3e0 1c0             | 
2d3e0 1c0             | 
2d3e0 1c0             | ' SKIPF sequences
2d3e0 1c0             | skiptable
2d3e0 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
2d3e4 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
2d3e8 1c2 00 00 00 00 |                 long    0                      ' read modify write long
2d3ec 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
2d3f0 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
2d3f4 1c5 00 00 00 00 | pattern2        long    0
2d3f8 1c6 00 00 00 00 | pattern3        long    0
2d3fc 1c7 77 02 00 00 | singlelong      long    %1001110111  
2d400 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
2d404 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
2d408 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
2d40c 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
2d410 1cc             | 
2d410 1cc             | ' LUT RAM address values
2d410 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
2d414 1cd DD 02 00 00 | continue_read   long    continue_read_lut
2d418 1ce DB 02 00 00 | continue_write  long    continue_write_lut
2d41c 1cf F6 02 00 00 | noread          long    noread_lut
2d420 1d0             | 
2d420 1d0 00 00 00 00 | id0             long    0
2d424 1d1 01 00 00 00 | id1             long    1
2d428 1d2 02 00 00 00 | id2             long    2
2d42c 1d3 03 00 00 00 | id3             long    3
2d430 1d4 04 00 00 00 | id4             long    4
2d434 1d5 05 00 00 00 | id5             long    5
2d438 1d6 06 00 00 00 | id6             long    6
2d43c 1d7 07 00 00 00 | id7             long    7
2d440 1d8             | 
2d440 1d8             | 'These next 10 request registers below are also temporarily reused during init 
2d440 1d8             | 'and COG updates and need to follow immediately after id0-id7
2d440 1d8 00 00 00 00 | addr1           long    0
2d444 1d9 00 00 00 00 | hubdata         long    0
2d448 1da 00 00 00 00 | count           long    0
2d44c 1db 00 00 00 00 | addr2           long    0
2d450 1dc 00 00 00 00 | total           long    0
2d454 1dd 00 00 00 00 | offset1         long    0
2d458 1de 00 00 00 00 | offset2         long    0
2d45c 1df 00 00 00 00 | link            long    0
2d460 1e0             | 
2d460 1e0             | burstwrite                                      'note shared register use during init
2d460 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
2d464 1e1 00 00 00 00 | id              long    0
2d468 1e2             | 
2d468 1e2 00 00 00 00 | header          long    0
2d46c 1e3 00 00 00 00 | trailer         long    0
2d470 1e4 00 00 00 00 | cmdaddr         long    0
2d474 1e5 00 00 00 00 | request         long    0
2d478 1e6 00 00 00 00 | rrlimit         long    0
2d47c 1e7 00 00 00 00 | pinconfig       long    0
2d480 1e8 00 00 00 00 | clks            long    0
2d484 1e9 00 00 00 00 | resume          long    0
2d488 1ea 00 00 00 00 | orighubsize     long    0
2d48c 1eb 00 00 00 00 | wrclks          long    0
2d490 1ec             | 
2d490 1ec 00 00 00 00 | pattern         long    0
2d494 1ed 00 00 00 00 | hubscratch      long    0
2d498 1ee 00 10 00 00 | val4k           long    4096
2d49c 1ef             | 
2d49c 1ef             | ' temporary general purpose regs
2d49c 1ef 00 00 00 00 | a               long    0
2d4a0 1f0 00 00 00 00 | b               long    0
2d4a4 1f1 00 00 00 00 | c               long    0
2d4a8 1f2 00 00 00 00 | d               long    0
2d4ac 1f3             |                 fit     502
2d4ac 1f3             | 
2d4ac 1f3             |                 fit     502
2d4ac 1f3             | 
2d4ac 1f3             | '..................................................................................................
2d4ac 1f3             | 
2d4ac 1f3             |             orgh
2d4ac                 | 
2d4ac                 | lut_code
2d4ac                 | 'HW init code up to 80 longs
2d4ac                 | 
2d4ac                 | '..................................................................................................
2d4ac                 | ' Memory layout for LUT RAM once operational:
2d4ac                 | '
2d4ac                 | '  LUT RAM address      Usage
2d4ac                 | '  ---------------      ----
2d4ac                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
2d4ac                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
2d4ac                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
2d4ac                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
2d4ac                 | '
2d4ac                 | ' Also during driver COG startup:
2d4ac                 | ' $230-$24F is used for HW init setup
2d4ac                 | ' $250-$26F is used as temporary vector storage 
2d4ac                 | '..................................................................................................
2d4ac                 | 
2d4ac                 |                 org $230    
2d4ac 230             | 
2d4ac 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
2d4ac 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
2d4b0 231 24 16 60 FD |                             pollxfi
2d4b4 232 FF AA 2A FF 
2d4b8 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
2d4bc 234 28 00 B0 FD |                             call    #sendqspi
2d4c0 235 07 F8 07 FF 
2d4c4 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
2d4c8 237 28 00 B0 FD |                             call    #sendspi
2d4cc 238 F8 07 78 FF 
2d4d0 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
2d4d4 23a 1C 00 B0 FD |                             call    #sendspi
2d4d8 23b 7F 78 78 FF 
2d4dc 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
2d4e0 23d 10 00 B0 FD |                             call    #sendspi 
2d4e4 23e 2D 00 64 FD |                             ret
2d4e8 23f             | 
2d4e8 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
2d4ec 240 32 0C 64 FD |                             skipf   #%110
2d4f0 241 9C EF 03 F6 |                             mov     pb, xsendimm
2d4f4 242             | 
2d4f4 242 10 D0 07 F6 | sendspi                     mov     clks, #16
2d4f8 243 97 EF 03 F6 |                             mov     pb, ximm8lut
2d4fc 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
2d500 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
2d504 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
2d508 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
2d50c 248 24 36 60 FD |                             waitxfi                         'wait for the completion
2d510 249 50 48 63 FD |                             fltl    datapins                'float data bus
2d514 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
2d518 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
2d51c 24c             | 
2d51c 24c 00 00 00 00 
2d520 24d 00 00 00 00 
2d524 24e 00 00 00 00 
2d528 24f 00 00 00 00 |                 long    0[$270-32-$]
2d52c 250             |                 fit     $270-32  ' keep room for 32 vector longs
2d52c 250             |     
2d52c 250             |                 fit     $270-32  ' keep room for 32 vector longs
2d52c 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
2d52c 250             | rw_vect ' PSRAM jump vectors
2d52c 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
2d530 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
2d534 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
2d538 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
2d53c 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
2d540 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
2d544 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
2d548 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
2d54c 258             | ro_vect ' R/O PSRAM jump vectors
2d54c 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
2d550 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
2d554 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
2d558 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
2d55c 25c 00 01 00 00 |                 long    unsupported
2d560 25d 00 01 00 00 |                 long    unsupported
2d564 25e 00 01 00 00 |                 long    unsupported
2d568 25f 00 01 00 00 |                 long    unsupported
2d56c 260             | ctrl_vect ' Control jump vectors
2d56c 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
2d570 261 00 01 00 00 |                 long    unsupported
2d574 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
2d578 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
2d57c 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
2d580 265 00 01 00 00 |                 long    unsupported
2d584 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
2d588 267 3E 01 00 00 |                 long    reconfig 
2d58c 268             | no_vect ' Invalid bank jump vectors
2d58c 268 01 01 00 00 |                 long    invalidbank
2d590 269 01 01 00 00 |                 long    invalidbank
2d594 26a 01 01 00 00 |                 long    invalidbank
2d598 26b 01 01 00 00 |                 long    invalidbank
2d59c 26c 01 01 00 00 |                 long    invalidbank
2d5a0 26d 01 01 00 00 |                 long    invalidbank
2d5a4 26e 01 01 00 00 |                 long    invalidbank
2d5a8 26f 01 01 00 00 |                 long    invalidbank
2d5ac 270             |                 fit     $270
2d5ac 270             | 
2d5ac 270             |                 fit     $270
2d5ac 270             | '..................................................................................................
2d5ac 270             | ' PSRAM READS
2d5ac 270             |                                                             ' a b c d e f
2d5ac 270             |                                                             ' B W L B R L  (a) byte read
2d5ac 270             |                                                             ' Y O O U E O  (b) word read
2d5ac 270             |                                                             ' T R N R S C  (c) long read
2d5ac 270             |                                                             ' E D G S U K  (d) new burst read
2d5ac 270             |                                                             '       T M E  (e) resumed sub-burst
2d5ac 270             |                                                             '         E D  (f) locked sub-burst
2d5ac 270             | 
2d5ac 270             | 
2d5ac 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
2d5b0 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
2d5b4 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
2d5b8 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
2d5bc 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
2d5c0 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
2d5c4 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
2d5c8 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
2d5cc 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
2d5d0 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
2d5d4 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
2d5d8 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
2d5dc 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
2d5e0 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
2d5e4 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
2d5e8 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
2d5ec 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
2d5f0 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
2d5f4 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
2d5f8 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
2d5fc 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
2d600 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
2d604 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
2d608 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
2d60c 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
2d610 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
2d614 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
2d618 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
2d61c 28c             | 
2d61c 28c             |                             ' fall through to read bursts
2d61c 28c             |                         
2d61c 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
2d61c 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
2d620 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
2d624 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
2d628 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
2d62c 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
2d630 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
2d634 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
2d638 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
2d63c 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
2d640 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
2d644 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
2d648 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
2d64c 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
2d650 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
2d654 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
2d658 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
2d65c 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
2d660 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
2d664 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
2d668 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
2d66c 2a0 E8 D1 03 F1 |                             add     clks, clks
2d670 2a1             | readcommon
2d670 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
2d674 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
2d678 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
2d67c 2a4             | 
2d67c 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
2d680 2a5 69 C8 63 FD |                             rev     cmdaddr
2d684 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
2d688 2a7 61 C8 63 FD |                             mergeb  cmdaddr
2d68c 2a8             | 
2d68c 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
2d690 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
2d694 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
2d694 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
2d698 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
2d69c 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
2d6a0 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
2d6a4 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
2d6a4 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
2d6a8 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
2d6ac 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
2d6b0 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
2d6b4 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
2d6b8 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
2d6bc 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
2d6bc 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
2d6c0 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
2d6c4 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
2d6c8 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
2d6cc 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
2d6d0 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
2d6d4 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
2d6d8 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
2d6dc 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
2d6e0 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
2d6e4 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
2d6e8 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
2d6ec 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
2d6f0 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
2d6f4 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
2d6f4 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
2d6f8 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
2d6fc 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
2d700 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
2d704 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
2d708 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
2d70c 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
2d710 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
2d714 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
2d718 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
2d71c 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
2d720 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
2d724 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
2d728 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
2d72c 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
2d730 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
2d734 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
2d738 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
2d73c 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
2d740 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
2d744 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
2d748 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
2d74c 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
2d750 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
2d754 2da 10 03 90 FD |                             jmp     #writecommon
2d758 2db             | 
2d758 2db             | '..................................................................................................
2d758 2db             | ' Burst continuation testing
2d758 2db             | 
2d758 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
2d75c 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
2d760 2dd             | continue_read_lut          
2d760 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
2d764 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
2d768 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
2d76c 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
2d770 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
2d774 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
2d778 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
2d77c 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
2d780 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
2d784 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
2d788 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
2d78c 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
2d790 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
2d794 2ea             | 
2d794 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
2d798 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
2d79c 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
2d7a0 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
2d7a4 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
2d7a8 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
2d7ac 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
2d7b0 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
2d7b4 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
2d7b8 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
2d7bc 2f4 2A 1C 66 0D |             _ret_           push    #poller
2d7c0 2f5             | 
2d7c0 2f5             | 
2d7c0 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
2d7c4 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
2d7c4 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
2d7c8 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
2d7cc 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
2d7d0 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
2d7d4 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
2d7d8 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
2d7dc 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
2d7e0 2fd 2D 00 64 FD |                             ret                             ' | continue processing
2d7e4 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
2d7e8 2ff             | '..................................................................................................
2d7e8 2ff             | ' Completion of requests
2d7e8 2ff             | 
2d7e8 2ff             | complete_rw_lut             
2d7e8 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
2d7ec 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
2d7f0 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
2d7f4 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
2d7f8 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
2d7fc 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
2d800 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
2d804 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
2d808 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
2d80c 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
2d810 309 32 62 64 AD |             if_z            skipf   #%110001
2d814 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
2d818 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
2d81c 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
2d820 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
2d824 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
2d828 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
2d82c 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
2d830 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
2d834 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
2d838 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
2d83c 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
2d840 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
2d844 316             |                                                             ' skipcase (a) gfx copy to/from hub
2d844 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
2d844 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
2d844 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
2d848 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
2d84c 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
2d850 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
2d854 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
2d858 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
2d85c 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
2d860 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
2d864 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
2d868 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
2d86c 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
2d870 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
2d874 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
2d878 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
2d87c 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
2d880 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
2d884 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
2d888 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
2d88c 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
2d890 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
2d894 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
2d898 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
2d89c 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
2d8a0 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
2d8a4 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
2d8a8 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
2d8ac 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
2d8b0 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
2d8b4 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
2d8b8 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
2d8bc 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
2d8c0 335 DF B7 03 A6 |             if_z            mov     addr2, link
2d8c4 336 34 FF 9F AD |             if_z            jmp     #checknext
2d8c8 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
2d8cc 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
2d8d0 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
2d8d4 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
2d8d8 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
2d8dc 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
2d8e0 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
2d8e4 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
2d8e8 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
2d8ec 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
2d8f0 341             | 
2d8f0 341             | '..................................................................................................
2d8f0 341             | ' PSRAM WRITES
2d8f0 341             |                                                             '  a b c d e f g h
2d8f0 341             | 
2d8f0 341             |                                                             '  B W L F B R L L (a) byte write(s)
2d8f0 341             |                                                             '  Y O O I U E O O (b) word write(s)
2d8f0 341             |                                                             '  T R N L R S C C (c) long write(s)
2d8f0 341             |                                                             '  E D G L S U K K (d) resumed fill
2d8f0 341             |                                                             '          T M E E (e) new burst write
2d8f0 341             |                                                             '            E D D (f) resumed burst
2d8f0 341             |                                                             '              F B (g) locked fill
2d8f0 341             |                                                             '              I U (h) locked burst write
2d8f0 341             |                                                             '              L R 
2d8f0 341             |                                                             '              L S 
2d8f0 341             |                                                             '                T 
2d8f0 341             | 
2d8f0 341             | w_single                   
2d8f0 341             | w_fill_cont           
2d8f0 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
2d8f4 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
2d8f8 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
2d8fc 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
2d900 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
2d904 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
2d908 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
2d90c 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
2d910 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
2d914 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
2d918 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
2d91c 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
2d920 34d             |                ' disable call to r_resume_burst for single longs when z=0
2d920 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
2d924 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
2d928 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
2d92c 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
2d930 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
2d934 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
2d938 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
2d93c 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
2d940 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
2d944 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
2d948 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
2d94c 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
2d950 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
2d954 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
2d958 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
2d95c 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
2d960 35d             |         
2d960 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
2d960 35d             |             '
2d960 35d             |             '  At least one of these 3 optional components will be sent
2d960 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
2d960 35d             |             '     body - N x full longs of data
2d960 35d             |             '     trailer - last partial long of data
2d960 35d             |             '
2d960 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
2d960 35d             |             '
2d960 35d             |             'Case    Type                           Sends
2d960 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
2d960 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
2d960 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
2d960 35d             |             ' 4)     Multiple long fill             body only
2d960 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
2d960 35d             | 
2d960 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
2d960 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
2d964 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
2d968 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
2d96c 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
2d970 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
2d974 362 13 8C 07 F6 |                             mov     pattern3, #%10011
2d978 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
2d97c 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
2d980 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
2d984 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
2d988 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
2d98c 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
2d990 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
2d994 36a             |                             
2d994 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
2d998 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
2d99c 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
2d9a0 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
2d9a4 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
2d9a8 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
2d9ac 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
2d9b0 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
2d9b4 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
2d9b8 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
2d9bc 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
2d9c0 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
2d9c4 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
2d9c8 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
2d9cc 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
2d9d0 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
2d9d4 37a             | 
2d9d4 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
2d9d8 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
2d9dc 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
2d9e0 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
2d9e4 37e             |                  
2d9e4 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
2d9e8 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
2d9ec 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
2d9f0 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
2d9f4 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
2d9f8 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
2d9fc 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
2da00 385             | 
2da00 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
2da04 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
2da08 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
2da0c 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
2da10 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
2da14 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
2da18 38b             | 
2da18 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
2da18 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
2da1c 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
2da20 38d 2A B0 63 FD |                             push    addr1                   'save address
2da24 38e             | 
2da24 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
2da24 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
2da28 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
2da2c 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
2da30 391             |             
2da30 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
2da34 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
2da38 393 2B B0 63 FD |                             pop     addr1                   'restore address
2da3c 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
2da40 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
2da44 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
2da48 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
2da4c 398             | 
2da4c 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
2da50 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
2da54 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
2da58 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
2da5c 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
2da60 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
2da64 39e             | 
2da64 39e             |                             'trailer is done
2da64 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
2da68 39f             | 
2da68 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
2da6c 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
2da70 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
2da74 3a2             | 
2da74 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
2da78 3a3 69 C8 63 FD |                             rev     cmdaddr                 
2da7c 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
2da80 3a5 61 C8 63 FD |                             mergeb  cmdaddr
2da84 3a6             |                             
2da84 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
2da88 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
2da8c 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
2da90 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
2da94 3aa             |                                                          
2da94 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
2da98 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
2da9c 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
2daa0 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
2daa4 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
2daa8 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
2daac 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
2dab0 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
2dab4 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
2dab8 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
2dabc 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
2dac0 3b5             |  
2dac0 3b5 59 52 63 FD |                             drvh    cspin
2dac4 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
2dac8 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
2dacc 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
2dad0 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
2dad4 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
2dad8 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
2dadc 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
2dae0 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
2dae4 3be EA E5 03 F6 |                             mov     d, orighubsize
2dae8 3bf EF E5 63 F0 |                             shl     d, a
2daec 3c0 F2 E3 83 F1 |                             sub     c, d
2daf0 3c1 DD E3 03 F1 |                             add     c, offset1
2daf4 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
2daf8 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
2dafc 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
2db00 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
2db04 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
2db08 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
2db0c 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
2db10 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
2db14 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
2db18 3cb BB D3 03 F6 |                             mov     resume, restorefill
2db1c 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
2db20 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
2db24 3ce 6C FC BF CD |             if_c            call    #yield
2db28 3cf 2D 00 64 FD |                             ret
2db2c 3d0             |                            
2db2c 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
2db2c 3d0             |                       '     rczl    pa                      'rotate left into address offset
2db2c 3d0             |                       '     rczl    c wcz                   'restore count and flags
2db2c 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
2db30 3d1 02 EC 67 F0 |                             shl     pa, #2
2db34 3d2 28 06 64 AD |             if_z            setq    #3
2db38 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
2db3c 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
2db40 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
2db44 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
2db48 3d7             | 
2db48 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
2db4c 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
2db50 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
2db54 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
2db58 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
2db5c 3dc             |                 fit 1024-32
2db5c 3dc             |         
2db5c 3dc             | 
2db5c 3dc             | '..................................................................................................
2db5c 3dc             | 
2db5c 3dc             |                 fit 1024-32
2db5c 3dc 00 00 00 00 
2db60 3dd 00 00 00 00 
2db64 3de 00 00 00 00 
2db68 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
2db6c 3e0             |                 org 1024-32
2db6c 000             | 
2db6c 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
2db6c 000 00 00 00 00 |                 long $0000
2db70 001 11 11 00 00 |                 long $1111
2db74 002 22 22 00 00 |                 long $2222
2db78 003 33 33 00 00 |                 long $3333
2db7c 004 44 44 00 00 |                 long $4444
2db80 005 55 55 00 00 |                 long $5555
2db84 006 66 66 00 00 |                 long $6666
2db88 007 77 77 00 00 |                 long $7777
2db8c 008 88 88 00 00 |                 long $8888
2db90 009 99 99 00 00 |                 long $9999
2db94 00a AA AA 00 00 |                 long $aaaa
2db98 00b BB BB 00 00 |                 long $bbbb
2db9c 00c CC CC 00 00 |                 long $cccc
2dba0 00d DD DD 00 00 |                 long $dddd
2dba4 00e EE EE 00 00 |                 long $eeee
2dba8 00f FF FF 00 00 |                 long $ffff
2dbac 010             | 
2dbac 010             | 'masks
2dbac 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
2dbb0 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
2dbb4 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
2dbb8 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
2dbbc 014             | 
2dbbc 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
2dbc0 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
2dbc4 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
2dbc8 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
2dbcc 018             | 
2dbcc 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
2dbd0 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
2dbd4 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
2dbd8 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
2dbdc 01c             | 
2dbdc 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
2dbe0 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
2dbe4 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
2dbe8 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
2dbec 020             |         fit 1024
2dbec 020             | 
2dbec 020             |         fit 1024
2dbec 020             | 
2dbec 020             | '--------------------------------------------------------------------------------------------------
2dbec 020             |         orgh
2dbec                 | 
2dbec                 | gfxexpansion
2dbec                 |                             'simple line drawing graphics expansion of memory driver
2dbec                 |                             'jmp     #donerepeats                'just return for now
2dbec                 | 
2dbec     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
2dbf0     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
2dbf4     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
2dbf8     DD E1 03 F6 |                             mov     b, offset1              'get error term
2dbfc     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
2dc00     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
2dc04     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
2dc08     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
2dc0c     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
2dc10     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
2dc14     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
2dc18     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
2dc1c     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
2dc20     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
2dc24     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
2dc28     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
2dc2c     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
2dc30     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
2dc34     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
2dc38     DC E5 33 F9 |                             getword d, total, #0            'get line width
2dc3c     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
2dc40     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
2dc44     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
2dc48     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
2dc4c     C3 03 80 FD |                             jmp     #readmask               'continue filling
2dc50                 | 	alignl
2dc50                 | _usbnew_spin2_dat_
2dc50                 |                 org     $000
2dc50 000             | 
2dc50 000             | usb_host_start
2dc50 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
2dc54 001             | 
2dc54 001 03 00 00 FF 
2dc58 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
2dc5c 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
2dc60 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
2dc64 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
2dc68 006 29 70 63 FD |                 setq2   htmp
2dc6c 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
2dc70 008             | 
2dc70 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
2dc74 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
2dc78 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
2dc7c 00b             | 
2dc7c 00b             | '------------------------------------------------------------------------------
2dc7c 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
2dc7c 00b             | ' special because the receiving function must not respond with either STALL or
2dc7c 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
2dc7c 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
2dc7c 00b             | ' corrupt packet, it must ignore the transaction
2dc7c 00b             | '------------------------------------------------------------------------------
2dc7c 00b             | ' On entry:
2dc7c 00b             | '   PTRA - start address of the SETUP data struct.
2dc7c 00b             | ' On exit:
2dc7c 00b             | '   retval - PID_ACK on success, otherwise error code.
2dc7c 00b             | '------------------------------------------------------------------------------
2dc7c 00b             | txn_setup
2dc7c 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
2dc80 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
2dc84 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
2dc88 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
2dc8c 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
2dc90 010             | .setup
2dc90 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
2dc94 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2dc98 012 2D 00 64 AD |         if_z    ret
2dc9c 013 7C 0B B0 FD |                 call    #retry_wait
2dca0 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2dca4 015 2D 00 64 AD |         if_z    ret
2dca8 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
2dcac 017 E0 FF 9F FD |                 jmp     #.setup
2dcb0 018             | 
2dcb0 018             | '------------------------------------------------------------------------------
2dcb0 018             | ' IN/INTERRUPT transaction.
2dcb0 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
2dcb0 018             | '------------------------------------------------------------------------------
2dcb0 018             | ' On entry:
2dcb0 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
2dcb0 018             | '     CRC(b19..23).
2dcb0 018             | ' On exit:
2dcb0 018             | '------------------------------------------------------------------------------
2dcb0 018             | txn_in
2dcb0 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
2dcb4 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
2dcb8 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
2dcbc 01b             | 
2dcbc 01b             |                 ' Fall through to urx_packet
2dcbc 01b             | 
2dcbc 01b             | '------------------------------------------------------------------------------
2dcbc 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
2dcbc 01b             | ' received are handshakes and IN DATAx.
2dcbc 01b             | '------------------------------------------------------------------------------
2dcbc 01b             | ' On entry:
2dcbc 01b             | ' On exit:
2dcbc 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
2dcbc 01b             | '     returned.
2dcbc 01b             | '------------------------------------------------------------------------------
2dcbc 01b             | urx_packet
2dcbc 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
2dcc0 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2dcc4 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
2dcc8 01e 1A 92 63 FD |                 getct   hct2
2dccc 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
2dcd0 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
2dcd4 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
2dcd8 022             | .wait_sop
2dcd8 022 22 A7 8A FA |                 rdpin   urx, dm
2dcdc 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2dce0 024 08 00 90 CD |         if_c    jmp     #.get_pid
2dce4 025 FC 25 CC FB |                 jnct2   #.wait_sop
2dce8 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
2dcec 027             | .get_pid
2dcec 027 28 02 B0 FD |                 call    #urx_next
2dcf0 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
2dcf4 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
2dcf8 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
2dcfc 02b             | .chk_pid
2dcfc 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2dd00 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
2dd04 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
2dd08 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
2dd0c 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
2dd10 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
2dd14 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
2dd18 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
2dd1c 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
2dd20 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
2dd24 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
2dd28 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
2dd2c 037             | .ack_resend
2dd2c 037 22 A7 82 FA |                 rqpin   urx, dm
2dd30 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
2dd34 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
2dd38 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
2dd3c 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
2dd40 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
2dd44 03d             | .chk_eop
2dd44 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2dd48 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
2dd4c 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
2dd50 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
2dd54 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
2dd58 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
2dd5c 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
2dd60 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
2dd64 045 2D 00 64 FD |                 ret
2dd68 046             | .idle
2dd68 046 22 A7 82 FA |                 rqpin   urx, dm
2dd6c 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
2dd70 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
2dd74 049 2D 00 64 FD |                 ret
2dd78 04a             | 
2dd78 04a             | '------------------------------------------------------------------------------
2dd78 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
2dd78 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
2dd78 04a             | ' if one is required.
2dd78 04a             | '------------------------------------------------------------------------------
2dd78 04a             | ' On entry:
2dd78 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
2dd78 04a             | ' On exit:
2dd78 04a             | '------------------------------------------------------------------------------
2dd78 04a             | utx_token
2dd78 04a 22 A7 82 FA |                 rqpin   urx, dm
2dd7c 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
2dd80 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
2dd84 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
2dd88 04e 34 0D B0 CD |         if_c    call    #utx_pre
2dd8c 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
2dd90 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
2dd94 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
2dd98 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
2dd9c 053             | .next_byte
2dd9c 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
2dda0 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
2dda4 055             | .wait
2dda4 055 40 46 72 FD |                 testp   dp                      wc
2dda8 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
2ddac 057 23 03 08 FC |                 akpin   dp
2ddb0 058 22 A5 22 FC |                 wypin   utx, dm
2ddb4 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
2ddb8 05a             | 
2ddb8 05a             | '------------------------------------------------------------------------------
2ddb8 05a             | ' SETUP/OUT/INTERRUPT transaction.
2ddb8 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
2ddb8 05a             | '------------------------------------------------------------------------------
2ddb8 05a             | ' On entry:
2ddb8 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
2ddb8 05a             | '     CRC(b19..23).
2ddb8 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
2ddb8 05a             | '   pkt_data - count of DATAx payload bytes to send.
2ddb8 05a             | ' On exit:
2ddb8 05a             | '------------------------------------------------------------------------------
2ddb8 05a             | txn_out
2ddb8 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
2ddbc 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
2ddc0 05c 00 00 C0 FF 
2ddc4 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
2ddc8 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
2ddcc 05f             | 
2ddcc 05f             |                 ' Fall through to utx_data
2ddcc 05f             | 
2ddcc 05f             | '------------------------------------------------------------------------------
2ddcc 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
2ddcc 05f             | ' calculated while the data byte is being shifted out. Since data stage
2ddcc 05f             | ' success/fail is not determined until the status stage of the transaction,
2ddcc 05f             | ' this routine is only concerned about the current DATAx packet.
2ddcc 05f             | '------------------------------------------------------------------------------
2ddcc 05f             | ' On entry:
2ddcc 05f             | '   PTRA - hub start address of the data to read.
2ddcc 05f             | '   pkt_cnt - data payload size.
2ddcc 05f             | ' On exit:
2ddcc 05f             | '------------------------------------------------------------------------------
2ddcc 05f             | utx_data
2ddcc 05f 22 A7 82 FA |                 rqpin   urx, dm
2ddd0 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2ddd4 061 F4 FF 9F CD |         if_c    jmp     #utx_data
2ddd8 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
2dddc 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
2dde0 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
2dde4 065 D8 0C B0 CD |         if_c    call    #utx_pre
2dde8 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
2ddec 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
2ddf0 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
2ddf4 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
2ddf8 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
2ddfc 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
2de00 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
2de04 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
2de08 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
2de0c 06f             | .read_byte
2de0c 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
2de10 070 F0 00 B0 FD |                 call    #utx_byte
2de14 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
2de18 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
2de1c 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
2de20 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
2de24 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
2de28 076             | .send_crc
2de28 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
2de2c 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
2de30 078 D0 00 B0 FD |                 call    #utx_byte
2de34 079 5D A5 EA F8 |                 getbyte utx, crc, #1
2de38 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
2de3c 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
2de40 07c             | 
2de40 07c             | '------------------------------------------------------------------------------
2de40 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
2de40 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
2de40 07c             | ' expects that the packet includes at least the CRC word.
2de40 07c             | '
2de40 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
2de40 07c             | ' was requested, which makes it difficult to determine where the data stops
2de40 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
2de40 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
2de40 07c             | ' USB-16 expected residual value of 0xB001.
2de40 07c             | '
2de40 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
2de40 07c             | ' so the caller can verify IN success before writing the data to its final
2de40 07c             | ' destination.
2de40 07c             | '------------------------------------------------------------------------------
2de40 07c             | ' On entry:
2de40 07c             | '   pkt_data - max byte count expected to be in the packet.
2de40 07c             | '   newb_flg - signals new byte ready when toggled.
2de40 07c             | ' On exit:
2de40 07c             | '   pkt_cnt - actual number of bytes read.
2de40 07c             | '------------------------------------------------------------------------------
2de40 07c             | urx_data
2de40 07c F7 75 03 F6 |                 mov     htmp2, pb
2de44 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
2de48 07e 00 00 C0 FF 
2de4c 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
2de50 080 BA EF 03 F6 |                 mov     pb, htmp2
2de54 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
2de58 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
2de5c 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
2de60 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
2de64 085             | .wait_byte
2de64 085             | ' In-line rx for max speed
2de64 085 22 A7 82 FA |                 rqpin   urx, dm
2de68 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
2de6c 087 53 A5 02 F5 |                 and     utx, urx
2de70 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
2de74 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
2de78 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
2de7c 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
2de80 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
2de84 08d DC FF 9F FD |                 jmp     #.wait_byte
2de88 08e             | .get_byte
2de88 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
2de8c 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
2de90 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
2de94 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
2de98 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
2de9c 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
2dea0 094             | .end_crc
2dea0 094 01 B8 06 F1 |                 add     pkt_cnt, #1
2dea4 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
2dea8 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
2deac 097 2D 00 64 1D |         if_a    ret
2deb0 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
2deb0 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
2deb0 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
2deb0 098             | ' to miss it, so cheat a bit and look for SOP clear here.
2deb0 098 22 A7 82 FA |                 rqpin   urx, dm
2deb4 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
2deb8 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
2debc 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
2debc 09b             | .chk_crc
2debc 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
2dec0 09c 58 00 00 FF 
2dec4 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
2dec8 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
2decc 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
2ded0 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
2ded4 0a1 34 09 B0 FD |                 call    #poll_waitx
2ded8 0a2             | 
2ded8 0a2             |                 ' Fall through to utx_handshake
2ded8 0a2             | 
2ded8 0a2             | '------------------------------------------------------------------------------
2ded8 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
2ded8 0a2             | ' the appropriate IP delay has been inserted.
2ded8 0a2             | '------------------------------------------------------------------------------
2ded8 0a2             | ' On entry:
2ded8 0a2             | '   retval - handshake PID to send.
2ded8 0a2             | ' On exit:
2ded8 0a2             | '   retval unchanged.
2ded8 0a2             | '------------------------------------------------------------------------------
2ded8 0a2             | utx_handshake
2ded8 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
2dedc 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
2dee0 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
2dee4 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
2dee8 0a6 5F A5 02 F6 |                 mov     utx, retval
2deec 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
2def0 0a8             | .idle
2def0 0a8 22 A7 82 FA |                 rqpin   urx, dm
2def4 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
2def8 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
2defc 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
2df00 0ac 08 09 90 FD |                 jmp     #poll_waitx
2df04 0ad             | 
2df04 0ad             | '------------------------------------------------------------------------------
2df04 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
2df04 0ad             | '------------------------------------------------------------------------------
2df04 0ad             | ' On entry:
2df04 0ad             | '   utx - byte to transmit.
2df04 0ad             | ' On exit:
2df04 0ad             | '------------------------------------------------------------------------------
2df04 0ad             | utx_byte
2df04 0ad 40 46 72 FD |                 testp   dp                      wc
2df08 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
2df0c 0af 23 03 08 FC |                 akpin   dp
2df10 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
2df14 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
2df18 0b2             | 
2df18 0b2             | '------------------------------------------------------------------------------
2df18 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
2df18 0b2             | '------------------------------------------------------------------------------
2df18 0b2             | ' On entry:
2df18 0b2             | ' On exit:
2df18 0b2             | '   retval - the byte read.
2df18 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
2df18 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
2df18 0b2             | '     received.
2df18 0b2             | '------------------------------------------------------------------------------
2df18 0b2             | urx_next
2df18 0b2 22 A7 8A FA |                 rdpin   urx, dm
2df1c 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
2df20 0b4 53 A5 02 F5 |                 and     utx, urx
2df24 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
2df28 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
2df2c 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
2df30 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
2df34 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2df38 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
2df3c 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
2df40 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
2df44 0bd 2D 00 64 FD |                 ret
2df48 0be             | 
2df48 0be             | '------------------------------------------------------------------------------
2df48 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
2df48 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
2df48 0be             | ' length, and the PID is not included in the CRC calculation:
2df48 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
2df48 0be             | '  CRC5  ENDP ADDRESS PID
2df48 0be             | ' %00000_1111_1111111_xxxxxxxx
2df48 0be             | '------------------------------------------------------------------------------
2df48 0be             | ' On entry:
2df48 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
2df48 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
2df48 0be             | ' On exit:
2df48 0be             | '   ep_addr_pid - CRC value appended to the packet.
2df48 0be             | '------------------------------------------------------------------------------
2df48 0be             | calc_crc5
2df48 0be FF 03 00 FF 
2df4c 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
2df50 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
2df54 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
2df58 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
2df5c 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
2df60 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
2df64 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
2df68 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
2df6c 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
2df70 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
2df74 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
2df78 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
2df7c 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
2df80 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
2df84 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
2df88 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
2df8c 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
2df90 0d0             | 
2df90 0d0             | '------------------------------------------------------------------------------
2df90 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
2df90 0d0             | '------------------------------------------------------------------------------
2df90 0d0             | isr1_fsframe
2df90 0d0 1A 92 62 FD |                 getct   iframe_ct_base
2df94 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2df98 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2df9c 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
2dfa0 0d4             | .wait
2dfa0 0d4 40 46 72 FD |                 testp   dp                      wc
2dfa4 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
2dfa8 0d6 23 03 08 FC |                 akpin   dp
2dfac 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
2dfb0 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
2dfb4 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
2dfb8 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
2dfbc 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
2dfc0 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
2dfc4 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
2dfc8 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
2dfcc 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
2dfd0 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
2dfd4 0e1 2C FF BF FD |                 call    #utx_byte
2dfd8 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
2dfdc 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
2dfe0 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
2dfe4 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
2dfe8 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
2dfec 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
2dff0 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
2dff4 0e9 5B A5 42 F5 |                 or      utx, icrc
2dff8 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
2dffc 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
2e000 0ec 20 00 90 FD |                 jmp     #isr1_wait
2e004 0ed             | isr1_lsframe
2e004 0ed 1A 92 62 FD |                 getct   iframe_ct_base
2e008 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2e00c 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2e010 0f0             | .wait
2e010 0f0 40 46 72 FD |                 testp   dp                      wc
2e014 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
2e018 0f2 23 03 08 FC |                 akpin   dp
2e01c 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
2e020 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
2e024 0f5             | isr1_wait
2e024 0f5 22 A5 82 FA |                 rqpin   utx, dm
2e028 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
2e02c 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
2e030 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
2e034 0f9 03 00 00 FF 
2e038 0fa FF B3 06 F5 |                 and     frame, ##$7ff
2e03c 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
2e040 0fc F5 FF 3B FB |                 reti1
2e044 0fd             | 
2e044 0fd             | '------------------------------------------------------------------------------
2e044 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
2e044 0fd             | ' transaction will complete before the next frame is triggered.
2e044 0fd             | '------------------------------------------------------------------------------
2e044 0fd             | ' On entry:
2e044 0fd             | ' On exit:
2e044 0fd             | '------------------------------------------------------------------------------
2e044 0fd             | wait_txn_ok
2e044 0fd 1A 74 63 FD |                 getct   htmp2
2e048 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
2e04c 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2e050 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
2e054 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
2e058 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
2e05c 103 2D 00 64 FD |                 ret
2e060 104             | 
2e060 104             | '------------------------------------------------------------------------------
2e060 104             | ' A device connection was detected, or a bus reset was requested by the USB
2e060 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
2e060 104             | ' and perform a reset sequence prior to device enumeration.
2e060 104             | '------------------------------------------------------------------------------
2e060 104             | dev_reset
2e060 104 22 A7 82 FA |                 rqpin   urx, dm
2e064 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
2e068 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
2e06c 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
2e070 108             | reset
2e070 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
2e074 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
2e078 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
2e07c 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2e080 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
2e084 10d 1A 92 62 FD |                 getct   iframe_ct_base
2e088 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2e08c 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2e090 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
2e094 111 24 70 07 F1 |                 add     htmp, #36
2e098 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
2e09c 113             | .framewait
2e09c 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
2e0a0 114 F8 FF 9F CD |         if_b    jmp     #.framewait
2e0a4 115 2D 00 64 FD |                 ret
2e0a8 116             | 
2e0a8 116             | '------------------------------------------------------------------------------
2e0a8 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
2e0a8 116             | '------------------------------------------------------------------------------
2e0a8 116             | ' On entry:
2e0a8 116             | '   PTRA - source address.
2e0a8 116             | '   PB - destination address.
2e0a8 116             | '   hr0 - length of copy, in bytes.
2e0a8 116             | ' On exit:
2e0a8 116             | '------------------------------------------------------------------------------
2e0a8 116             | hmemcpy
2e0a8 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
2e0ac 117 F7 71 43 FC |                 wrbyte  htmp, pb
2e0b0 118 01 EE 07 F1 |                 add     pb, #1
2e0b4 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
2e0b8 11a             | 
2e0b8 11a             | '------------------------------------------------------------------------------
2e0b8 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
2e0b8 11a             | ' loop until the errant device is disconnected.
2e0b8 11a             | '------------------------------------------------------------------------------
2e0b8 11a             | ' On entry:
2e0b8 11a             | ' On exit:
2e0b8 11a             | '------------------------------------------------------------------------------
2e0b8 11a             | host_error
2e0b8 11a             |           if ERROR_LED >= 0
2e0b8 11a             |           end
2e0b8 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
2e0bc 11b             | 
2e0bc 11b             | '------------------------------------------------------------------------------
2e0bc 11b             | ' Get HID descriptor buffer for current port
2e0bc 11b             | '------------------------------------------------------------------------------
2e0bc 11b             | ' On entry:
2e0bc 11b             | ' On exit:
2e0bc 11b             | '   PB - HID descriptor buffer pointer
2e0bc 11b             | '------------------------------------------------------------------------------
2e0bc 11b             | get_hid_descr_buffer
2e0bc 11b 2D EF 03 F6 |                 mov     pb, hdev_port
2e0c0 11c 01 EE E7 F2 |                 cmpsub  pb, #1
2e0c4 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
2e0c8 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
2e0cc 11f             | 
2e0cc 11f             | 
2e0cc 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
2e0d0 120             | 
2e0d0 120             | ' USB commands and error codes
2e0d0 120 00 00 00 00 | cmd_data        long    0
2e0d4 121 00 00 00 00 | usb_err_code    long    ERR_NONE
2e0d8 122             | 
2e0d8 122             | ' Parameters block assigned at cog startup
2e0d8 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
2e0dc 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
2e0e0 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
2e0e4 125             | if ACTIVITY_LED >= 0
2e0e4 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
2e0e4 125             | end
2e0e4 125             | if ERROR_LED >= 0
2e0e4 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
2e0e4 125             | end
2e0e4 125 00 00 00 00 | hid_descr_p     long    0
2e0e8 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
2e0e8 126             | 'hkbd_report_p   long    0
2e0e8 126 00 00 00 00 | hub_descr_p     long    0
2e0ec 127 00 00 00 00 | urx_buff_p      long    0
2e0f0 128 00 00 00 00 | dev_desc_buff_p long    0
2e0f4 129 00 00 00 00 | con_desc_buff_p long    0
2e0f8 12a 00 00 00 00 | cache_start_p   long    0
2e0fc 12b 00 00 00 00 | cache_end_p     long    0
2e100 12c             | if EMUPAD_MAX_PLAYER > 0
2e100 12c             | emupad_out_ptr  long    0
2e100 12c             | end
2e100 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
2e104 12d             | 
2e104 12d             | hdev_init_start
2e104 12d             | hdev_port       res     1
2e104 12d             | hdev_port       res     1
2e104 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
2e104 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
2e104 12d             | kbm_next_datax  res     1
2e104 12d             | kbm_next_datax  res     1
2e104 12d             | hub_intf_num    res     1
2e104 12d             | hub_intf_num    res     1
2e104 12d             | hub_next_datax  res     1
2e104 12d             | hub_next_datax  res     1
2e104 12d             | hub_status_chg  res     1
2e104 12d             | hub_status_chg  res     1
2e104 12d             | hub_port_status res     1
2e104 12d             | hub_port_status res     1
2e104 12d             | if HAVE_MOUSE
2e104 12d             | ms_intf_num     res     1
2e104 12d             | ms_intf_num     res     1
2e104 12d             | ms_in_max_pkt   res     1
2e104 12d             | ms_in_max_pkt   res     1
2e104 12d             | end
2e104 12d             | kb_intf_num     res     1
2e104 12d             | kb_intf_num     res     1
2e104 12d             | kb_interval     res     1
2e104 12d             | kb_interval     res     1
2e104 12d             | kb_in_max_pkt   res     1
2e104 12d             | kb_in_max_pkt   res     1
2e104 12d             | kb_max_index    res     1
2e104 12d             | kb_max_index    res     1
2e104 12d             | kb_led_states   res     1
2e104 12d             | kb_led_states   res     1
2e104 12d             | gp_intf_num     res     1
2e104 12d             | gp_intf_num     res     1
2e104 12d             | gp_interval     res     1
2e104 12d             | gp_interval     res     1
2e104 12d             | gp_max_index    res     1
2e104 12d             | gp_max_index    res     1
2e104 12d             | gp_descr_len    res     1+MAX_DEVICES
2e104 12d             | gp_descr_len    res     1+MAX_DEVICES
2e104 12d             | hdev_init_end
2e104 12d             | 
2e104 12d             | ' Initialized at cog startup:
2e104 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
2e104 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
2e104 12d             | iframe_ct_new   res     1
2e104 12d             | iframe_ct_new   res     1
2e104 12d             | iframe_ct_base  res     1
2e104 12d             | iframe_ct_base  res     1
2e104 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
2e104 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
2e104 12d             | 
2e104 12d             | ' This register block is reset to zero when a USB device connects
2e104 12d             | hreg_init_start
2e104 12d             | hstatus         res     1         ' Host status flags
2e104 12d             | hstatus         res     1         ' Host status flags
2e104 12d             | hctwait         res     1         ' Poll-based wait clocks
2e104 12d             | hctwait         res     1         ' Poll-based wait clocks
2e104 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
2e104 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
2e104 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
2e104 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
2e104 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
2e104 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
2e104 12d             | xfer_retry      res     1         ' Control transfer retry count
2e104 12d             | xfer_retry      res     1         ' Control transfer retry count
2e104 12d             | retry           res     1         ' Transaction retry count
2e104 12d             | retry           res     1         ' Transaction retry count
2e104 12d             | utx             res     1         ' Byte to transmit on USB
2e104 12d             | utx             res     1         ' Byte to transmit on USB
2e104 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
2e104 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
2e104 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
2e104 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
2e104 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
2e104 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
2e104 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
2e104 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
2e104 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
2e104 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
2e104 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
2e104 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
2e104 12d             | frame           res     1         ' USB 1ms frame counter value
2e104 12d             | frame           res     1         ' USB 1ms frame counter value
2e104 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
2e104 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
2e104 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
2e104 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
2e104 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
2e104 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
2e104 12d             | crc             res     1         ' Used for CRC16 calculation
2e104 12d             | crc             res     1         ' Used for CRC16 calculation
2e104 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
2e104 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
2e104 12d             | retval          res     1         ' Global success/fail return parameter
2e104 12d             | retval          res     1         ' Global success/fail return parameter
2e104 12d             | context_retval  res     1         ' Operation contextual return parameter
2e104 12d             | context_retval  res     1         ' Operation contextual return parameter
2e104 12d             | ' Device stuff
2e104 12d             | hdev_id         res     1+MAX_DEVICES
2e104 12d             | hdev_id         res     1+MAX_DEVICES
2e104 12d             | hdev_bcd        res     1
2e104 12d             | hdev_bcd        res     1
2e104 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
2e104 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
2e104 12d             | ' Keyboard/mouse stuff
2e104 12d             | hctrl_ep_addr   res     1
2e104 12d             | hctrl_ep_addr   res     1
2e104 12d             | hctrl_max_pkt   res     1
2e104 12d             | hctrl_max_pkt   res     1
2e104 12d             | hconfig_base    res     1
2e104 12d             | hconfig_base    res     1
2e104 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
2e104 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
2e104 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
2e104 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
2e104 12d             | hdev_class      res     1
2e104 12d             | hdev_class      res     1
2e104 12d             | hdev_subclass   res     1
2e104 12d             | hdev_subclass   res     1
2e104 12d             | hdev_protocol   res     1
2e104 12d             | hdev_protocol   res     1
2e104 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
2e104 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
2e104 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
2e104 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
2e104 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
2e104 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
2e104 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
2e104 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
2e104 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
2e104 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
2e104 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
2e104 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
2e104 12d             | if HAVE_MOUSE
2e104 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
2e104 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
2e104 12d             | end
2e104 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
2e104 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
2e104 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
2e104 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
2e104 12d             | hdev_ep_addr    res     1+MAX_DEVICES
2e104 12d             | hdev_ep_addr    res     1+MAX_DEVICES
2e104 12d             | hdev_out_addr   res     1
2e104 12d             | hdev_out_addr   res     1
2e104 12d             | 
2e104 12d             | if EMUPAD_MAX_PLAYER > 0
2e104 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
2e104 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
2e104 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
2e104 12d             | end
2e104 12d             | 
2e104 12d             | hreg_init_end
2e104 12d             | 
2e104 12d             | hidr_start
2e104 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
2e104 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
2e104 12d             | hidr_flags      res     1
2e104 12d             | hidr_flags      res     1
2e104 12d             | hidr_axis       res     3
2e104 12d             | hidr_axis       res     3
2e104 12d             | hidr_buttons    res     1
2e104 12d             | hidr_buttons    res     1
2e104 12d             | hidr_hats       res     1
2e104 12d             | hidr_hats       res     1
2e104 12d             | '' Above are actually useful values, 6 longs
2e104 12d             | hidr_id         res     1
2e104 12d             | hidr_id         res     1
2e104 12d             | hidr_state      res     1
2e104 12d             | hidr_state      res     1
2e104 12d             | hidr_size       res     1
2e104 12d             | hidr_size       res     1
2e104 12d             | hidr_count      res     1
2e104 12d             | hidr_count      res     1
2e104 12d             | hidr_offset     res     1
2e104 12d             | hidr_offset     res     1
2e104 12d             | hidr_usage_idx  res     1
2e104 12d             | hidr_usage_idx  res     1
2e104 12d             | hidr_lminmax    res     1
2e104 12d             | hidr_lminmax    res     1
2e104 12d             | hidr_pminmax    res     1
2e104 12d             | hidr_pminmax    res     1
2e104 12d             | hidr_type       res     1
2e104 12d             | hidr_type       res     1
2e104 12d             | hidr_end
2e104 12d             | 
2e104 12d             | ' Variables dependent on the system freqency
2e104 12d             | _var_64_lower_  res     1
2e104 12d             | _var_64_lower_  res     1
2e104 12d             | _var_64_upper_  res     1
2e104 12d             | _var_64_upper_  res     1
2e104 12d             | _12Mbps_        res     1
2e104 12d             | _12Mbps_        res     1
2e104 12d             | _1_5Mbps_       res     1
2e104 12d             | _1_5Mbps_       res     1
2e104 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
2e104 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
2e104 12d             | _1us_           res     1         ' 1us
2e104 12d             | _1us_           res     1         ' 1us
2e104 12d             | _10us_          res     1         ' 10us
2e104 12d             | _10us_          res     1         ' 10us
2e104 12d             | _33us_          res     1         ' 33us
2e104 12d             | _33us_          res     1         ' 33us
2e104 12d             | _txn_err_       res     1         ' 250us
2e104 12d             | _txn_err_       res     1         ' 250us
2e104 12d             | _500us_         res     1         ' 500us
2e104 12d             | _500us_         res     1         ' 500us
2e104 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
2e104 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
2e104 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
2e104 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
2e104 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
2e104 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
2e104 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
2e104 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
2e104 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
2e104 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
2e104 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
2e104 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
2e104 12d             | _preamble_wait_ res     1
2e104 12d             | _preamble_wait_ res     1
2e104 12d             | _1ms_           res     1         ' 1ms
2e104 12d             | _1ms_           res     1         ' 1ms
2e104 12d             | _2ms_           res     1         ' 2ms
2e104 12d             | _2ms_           res     1         ' 2ms
2e104 12d             | _suspend_wait_  res     1         ' 3ms
2e104 12d             | _suspend_wait_  res     1         ' 3ms
2e104 12d             | _4ms_           res     1         ' 4ms
2e104 12d             | _4ms_           res     1         ' 4ms
2e104 12d             | _xfer_wait_     res     1         ' 5ms
2e104 12d             | _xfer_wait_     res     1         ' 5ms
2e104 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
2e104 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
2e104 12d             | _reset_hold_    res     1         ' 15ms
2e104 12d             | _reset_hold_    res     1         ' 15ms
2e104 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
2e104 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
2e104 12d             | _21ms_          res     1         ' 21ms
2e104 12d             | _21ms_          res     1         ' 21ms
2e104 12d             | _100ms_         res     1         ' 100ms
2e104 12d             | _100ms_         res     1         ' 100ms
2e104 12d             | _500ms_         res     1         ' 500ms
2e104 12d             | _500ms_         res     1         ' 500ms
2e104 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
2e104 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
2e104 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
2e104 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
2e104 12d             | '------------------------------------------------------------------------------
2e104 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
2e104 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
2e104 12d             | _usb_d_ls_nco_  res     1
2e104 12d             | _usb_d_ls_nco_  res     1
2e104 12d             | _usb_h_fs_nco_  res     1
2e104 12d             | _usb_h_fs_nco_  res     1
2e104 12d             | _usb_d_fs_nco_  res     1
2e104 12d             | _usb_d_fs_nco_  res     1
2e104 12d             | '------------------------------------------------------------------------------
2e104 12d             | ' Scratch registers
2e104 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
2e104 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
2e104 12d             | htmp1           res     1
2e104 12d             | htmp1           res     1
2e104 12d             | htmp2           res     1
2e104 12d             | htmp2           res     1
2e104 12d             | htmp3           res     1
2e104 12d             | htmp3           res     1
2e104 12d             | hrep            res     1         ' Repeat count
2e104 12d             | hrep            res     1         ' Repeat count
2e104 12d             | hsave0          res     1         ' Subroutine parameter saves
2e104 12d             | hsave0          res     1         ' Subroutine parameter saves
2e104 12d             | hsave1          res     1
2e104 12d             | hsave1          res     1
2e104 12d             | hsave2          res     1
2e104 12d             | hsave2          res     1
2e104 12d             | isrtmp1         res     1
2e104 12d             | isrtmp1         res     1
2e104 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
2e104 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
2e104 12d             | hr0             res     1         ' Multi-purpose registers
2e104 12d             | hr0             res     1         ' Multi-purpose registers
2e104 12d             | hr1             res     1
2e104 12d             | hr1             res     1
2e104 12d             | hr2             res     1
2e104 12d             | hr2             res     1
2e104 12d             | hr3             res     1
2e104 12d             | hr3             res     1
2e104 12d             | hpar1           res     1         ' Routine entry/exit parameters
2e104 12d             | hpar1           res     1         ' Routine entry/exit parameters
2e104 12d             | hpar2           res     1
2e104 12d             | hpar2           res     1
2e104 12d             | hpar3           res     1
2e104 12d             | hpar3           res     1
2e104 12d             | hct2            res     1         ' Function response bus turn-around timer
2e104 12d             | hct2            res     1         ' Function response bus turn-around timer
2e104 12d             | hct3            res     1         ' Keyboard/mouse poll timer
2e104 12d             | hct3            res     1         ' Keyboard/mouse poll timer
2e104 12d             | mod_cnt         res     1         ' Used in idle loops
2e104 12d             | mod_cnt         res     1         ' Used in idle loops
2e104 12d             |                 fit     $1F0
2e104 12d             |                 org     $200
2e104 200             | hlut_start
2e104 200             | 
2e104 200             | '------------------------------------------------------------------------------
2e104 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
2e104 200             | ' settings to startup defaults.
2e104 200             | '------------------------------------------------------------------------------
2e104 200             | ' On entry:
2e104 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
2e104 200             | '------------------------------------------------------------------------------
2e104 200             | set_speed_full
2e104 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
2e108 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
2e10c 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
2e110 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
2e114 204             | '                ret                             wcz     ' Restore caller flags on exit
2e114 204             | 
2e114 204             | '------------------------------------------------------------------------------
2e114 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
2e114 204             | ' is a downstream hub connected (not yet implemented), the baud generator
2e114 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
2e114 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
2e114 204             | ' putting the smart pins into reset.
2e114 204             | '------------------------------------------------------------------------------
2e114 204             | ' On entry:
2e114 204             | ' On exit: CZ flags restored to caller states
2e114 204             | '------------------------------------------------------------------------------
2e114 204             | set_speed_low
2e114 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
2e118 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
2e11c 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
2e120 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
2e124 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
2e128 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
2e12c 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
2e130 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
2e134 20c             | 
2e134 20c             | '------------------------------------------------------------------------------
2e134 20c             | ' Perform configuration stuff required when a device intitially connects.
2e134 20c             | '------------------------------------------------------------------------------
2e134 20c             | ' On entry:
2e134 20c             | ' On exit:
2e134 20c             | '------------------------------------------------------------------------------
2e134 20c             | on_connect
2e134 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
2e138 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
2e13c 20e             | .retry
2e13c 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2e140 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
2e144 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
2e148 211 00 08 00 FF 
2e14c 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
2e150 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
2e154 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2e158 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
2e15c 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
2e160 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
2e164 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2e168 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
2e16c 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
2e170 21b 4C 03 B0 FD |                 call    #poll_waitx
2e174 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
2e178 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
2e17c 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
2e180 21f B8 FF 9F FD |                 jmp     #.retry
2e184 220             | .get_dev_desc
2e184 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
2e188 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
2e18c 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
2e190 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
2e194 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
2e198 225 88 FB BF FD |                 call    #reset
2e19c 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
2e1a0 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2e1a4 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
2e1a8 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
2e1ac 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2e1b0 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
2e1b4 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
2e1b8 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
2e1bc 22e 04 00 00 FF 
2e1c0 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
2e1c4 230 34 FA BF FD |                 call    #calc_crc5
2e1c8 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
2e1cc 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2e1d0 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
2e1d4 234 F7 AD C2 FA |                 rdbyte  total_data, pb
2e1d8 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
2e1dc 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
2e1e0 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2e1e4 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
2e1e8 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
2e1ec 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
2e1f0 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
2e1f4 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
2e1f8 23d C4 02 B0 FD |                 call    #poll_waitx
2e1fc 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
2e200 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2e204 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
2e208 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
2e20c 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
2e210 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2e214 244 2D 00 64 5D |         if_nz   ret
2e218 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
2e21c 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
2e220 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
2e224 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
2e228 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
2e22c 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
2e230 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
2e234 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
2e238 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
2e23c 24e 2C FB 9F CD |         if_b    jmp     #host_error
2e240 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
2e244 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
2e248 251 2D EC 63 FD |                 call    pa
2e24c 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
2e250 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
2e254 254 2C EC 63 FD |                 jmp     pa
2e258 255             | 
2e258 255             | '------------------------------------------------------------------------------
2e258 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
2e258 255             | ' Status reporting is always in the function-to-host direction.
2e258 255             | '------------------------------------------------------------------------------
2e258 255             | ' On entry:
2e258 255             | '   PTRA - start address of the SETUP data in hub.
2e258 255             | '   PB - start address of the buffer/struct to be written to during the IN data
2e258 255             | '     stage.
2e258 255             | '   ep_addr_pid - device address, endpoint and CRC5.
2e258 255             | ' On exit:
2e258 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
2e258 255             | '     contains the count of data stage bytes actually received, which must
2e258 255             | '     always be <= the count requested.
2e258 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
2e258 255             | '     more specific USB operation error code.
2e258 255             | '------------------------------------------------------------------------------
2e258 255             | control_read
2e258 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
2e25c 256 F8 8F 03 F6 |                 mov     hpar2, ptra
2e260 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
2e264 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
2e268 259             | .xfer_start
2e268 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
2e26c 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
2e270 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2e274 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
2e278 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
2e27c 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
2e280 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
2e284 260 61 00 00 FF 
2e288 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
2e28c 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
2e290 263             | .data
2e290 263 56 B1 02 F6 |                 mov     pkt_data, total_data
2e294 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
2e298 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
2e29c 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
2e2a0 267             | .nak_retry
2e2a0 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
2e2a4 268             | .in_retry
2e2a4 268 BC F6 BF FD |                 call    #txn_in
2e2a8 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
2e2ac 26a 28 00 90 AD |         if_z    jmp     #.commit
2e2b0 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
2e2b4 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
2e2b8 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
2e2bc 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
2e2c0 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
2e2c4 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
2e2c8 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
2e2cc 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2e2d0 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
2e2d4 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
2e2d8 275             | .commit
2e2d8 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
2e2dc 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
2e2e0 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
2e2e4 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
2e2e8 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
2e2ec 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
2e2f0 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
2e2f4 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
2e2f8 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
2e2fc 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
2e300 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
2e304 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
2e308 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
2e30c 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
2e310 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
2e314 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
2e318 285             | .pre_status
2e318 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
2e31c 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
2e320 287 00 B0 06 F6 |                 mov     pkt_data, #0
2e324 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
2e328 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
2e32c 28a 61 00 00 FF 
2e330 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
2e334 28c             | .out_retry
2e334 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
2e338 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2e33c 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
2e340 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
2e344 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
2e348 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
2e34c 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
2e350 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
2e354 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2e358 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
2e35c 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
2e360 297             | ' I've encountered transfer STALL, even though the data looks correct, and
2e360 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
2e360 297             | ' ControlRead() transfer gets things unstuck most of the time...
2e360 297             | .xfer_retry
2e360 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
2e364 298 58 01 B0 FD |                 call    #poll_waitx
2e368 299 8C F9 BF FD |                 call    #wait_txn_ok
2e36c 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
2e370 29b C7 F1 03 F6 |                 mov     ptra, hpar2
2e374 29c C8 EF 03 F6 |                 mov     pb, hpar3
2e378 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
2e37c 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
2e380 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
2e384 2a0             | 
2e384 2a0             | '------------------------------------------------------------------------------
2e384 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
2e384 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
2e384 2a0             | ' the SETUP data struct is filled with the required values.
2e384 2a0             | '------------------------------------------------------------------------------
2e384 2a0             | ' On entry:
2e384 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
2e384 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
2e384 2a0             | '     stage.
2e384 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
2e384 2a0             | ' On exit:
2e384 2a0             | '   retval - used to convey the success/failure of each stage.
2e384 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
2e384 2a0             | '     more specific USB operation error code.
2e384 2a0             | '------------------------------------------------------------------------------
2e384 2a0             | control_write
2e384 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
2e388 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
2e38c 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
2e390 2a3             | 
2e390 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
2e394 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
2e398 2a5 F7 91 03 F6 |                 mov     hpar3, pb
2e39c 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
2e3a0 2a7             | .xfer_start
2e3a0 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
2e3a4 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
2e3a8 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
2e3ac 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2e3b0 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
2e3b4 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
2e3b8 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
2e3bc 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
2e3c0 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
2e3c4 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
2e3c8 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
2e3cc 2b2             | .data
2e3cc 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
2e3d0 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
2e3d4 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
2e3d8 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
2e3dc 2b6             | .out_retry
2e3dc 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
2e3e0 2b7 88 F6 BF FD |                 call    #txn_out
2e3e4 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2e3e8 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
2e3ec 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
2e3f0 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
2e3f4 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
2e3f8 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
2e3fc 2be             | .commit
2e3fc 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
2e400 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
2e404 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
2e408 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
2e40c 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
2e410 2c3             | pre_status_in
2e410 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
2e414 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
2e418 2c5             | .status_retry
2e418 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
2e41c 2c6 44 F5 BF FD |                 call    #txn_in
2e420 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
2e424 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
2e428 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
2e42c 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
2e430 2cb 2D 00 64 AD |         if_z    ret
2e434 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
2e438 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2e43c 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
2e440 2cf             | '               ret                                     ' Caller must handle transfer retirement
2e440 2cf             | 
2e440 2cf             | '------------------------------------------------------------------------------
2e440 2cf             | ' Execute an IN interrupt transaction.
2e440 2cf             | '------------------------------------------------------------------------------
2e440 2cf             | ' On entry:
2e440 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
2e440 2cf             | '   hpar2 - Address of the IN data buffer
2e440 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
2e440 2cf             | ' On exit:
2e440 2cf             | '   retval - the result of the operation.
2e440 2cf             | '   hpar3 - the count of IN data bytes actually received.
2e440 2cf             | '------------------------------------------------------------------------------
2e440 2cf             | do_int_in
2e440 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
2e444 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
2e448 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
2e44c 2d2             | 
2e44c 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
2e450 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
2e454 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
2e458 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
2e45c 2d6             | .retry
2e45c 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
2e460 2d7 00 F5 BF FD |                 call    #txn_in
2e464 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
2e468 2d9 1C 00 90 AD |         if_z    jmp     #.commit
2e46c 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
2e470 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
2e474 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
2e478 2dd 54 00 B0 FD |                 call    #retry_wait
2e47c 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2e480 2df 18 00 90 AD |         if_z    jmp     #.post_ret
2e484 2e0 D4 FF 9F FD |                 jmp     #.retry
2e488 2e1             | .commit
2e488 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
2e48c 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
2e490 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
2e494 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
2e498 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
2e49c 2e6             | .post_ret
2e49c 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
2e4a0 2e7             | 
2e4a0 2e7             | 
2e4a0 2e7             | '------------------------------------------------------------------------------
2e4a0 2e7             | ' Resets the downstream hub port to FS
2e4a0 2e7             | '------------------------------------------------------------------------------
2e4a0 2e7             | dwnstream_reset
2e4a0 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
2e4a4 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
2e4a8 2e9             | 
2e4a8 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
2e4ac 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
2e4b0 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
2e4b4 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
2e4b8 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
2e4bc 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
2e4c0 2ef             | 
2e4c0 2ef             | '------------------------------------------------------------------------------
2e4c0 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
2e4c0 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
2e4c0 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
2e4c0 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
2e4c0 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
2e4c0 2ef             | '------------------------------------------------------------------------------
2e4c0 2ef             | ' On entry:
2e4c0 2ef             | '   hctwait - wait interval in sysclocks.
2e4c0 2ef             | ' On exit:
2e4c0 2ef             | '------------------------------------------------------------------------------
2e4c0 2ef             | poll_waitx
2e4c0 2ef 1A 92 63 FD |                 getct   hct2
2e4c4 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
2e4c8 2f1             | .wait
2e4c8 2f1 FF 25 CC FB |                 jnct2   #.wait
2e4cc 2f2 2D 00 64 FD |                 ret
2e4d0 2f3             | 
2e4d0 2f3             | '------------------------------------------------------------------------------
2e4d0 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
2e4d0 2f3             | '------------------------------------------------------------------------------
2e4d0 2f3             | ' On entry:
2e4d0 2f3             | '   retval - transaction response PID or error code.
2e4d0 2f3             | ' On exit:
2e4d0 2f3             | '------------------------------------------------------------------------------
2e4d0 2f3             | retry_wait
2e4d0 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
2e4d4 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
2e4d8 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
2e4dc 2f6 14 00 90 AD |         if_z    jmp     #.nak
2e4e0 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
2e4e4 2f8 D8 FF BF FD |                 call    #poll_waitx
2e4e8 2f9             | .dec
2e4e8 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
2e4ec 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
2e4f0 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
2e4f4 2fc             | .nak
2e4f4 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
2e4f8 2fd C4 FF BF FD |                 call    #poll_waitx
2e4fc 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
2e500 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
2e504 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
2e508 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
2e50c 302 2D 00 64 FD |                 ret
2e510 303             | 
2e510 303             | host_reset
2e510 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
2e514 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
2e518 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
2e518 305 BD 01 05 FF 
2e51c 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
2e520 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
2e524 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
2e528 309             | ' Check to see if the system clock has been changed.
2e528 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
2e52c 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
2e530 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
2e534 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
2e538 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
2e53c 30e 40 46 62 FD |                 dirl    dp
2e540 30f             | 
2e540 30f 28 02 64 FD |                 setq    #1
2e544 310 80 00 80 FF 
2e548 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
2e54c 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
2e550 313             | .enable
2e550 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
2e554 314 41 46 62 FD |                 dirh    dp
2e558 315 1F 36 63 FD |                 waitx   _1us_
2e55c 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2e560 317             | 
2e560 317             |                 ' Handle Port protection enable and startup delay
2e560 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
2e564 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
2e568 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
2e56c 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
2e570 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
2e574 31c             | 
2e574 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
2e578 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
2e57c 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
2e580 31f 00 00 04 F6 |                 mov     0-0, #0
2e584 320             | .regloop
2e584 320             | 
2e584 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
2e584 320             | 
2e584 320             | discon_entry
2e584 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
2e588 321             | 
2e588 321             |               
2e588 321             |         if HAVE_HIDPAD
2e588 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
2e58c 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
2e590 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
2e594 324 F7 01 68 FC |                 wrlong  #0,pb
2e598 325             |         end
2e598 325             |         if EMUPAD_MAX_PLAYER > 0
2e598 325             |         end
2e598 325             | 
2e598 325             |                 ' Fall through to disconnected loop
2e598 325             | 
2e598 325             | '-----------------------------------------------------------------------------------------------------------------
2e598 325             | ' Device connect handling (Section 7.1.7.3).
2e598 325             | '-----------------------------------------------------------------------------------------------------------------
2e598 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
2e598 325             | ' device to connect (Section 7.1.7.3).
2e598 325             | '-----------------------------------------------------------------------------------------------------------------
2e598 325             | disconnected
2e598 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
2e59c 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
2e5a0 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
2e5a4 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
2e5a8 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
2e5ac 32a             |         if ACTIVITY_LED >= 0
2e5ac 32a             |         end
2e5ac 32a 22 A7 82 FA |                 rqpin   urx, dm
2e5b0 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
2e5b4 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
2e5b8 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
2e5bc 32e             | .se1_test
2e5bc 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
2e5c0 32f FC FE BF FD |                 call    #poll_waitx
2e5c4 330 22 A7 82 FA |                 rqpin   urx, dm
2e5c8 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
2e5cc 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
2e5d0 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
2e5d4 334             | .se1            'SE1 is a fatal error condition
2e5d4 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
2e5d8 335 E4 FE BF FD |                 call    #poll_waitx
2e5dc 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
2e5e0 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
2e5e4 338             | .connect_test                                           ' Test lines until stable J/K state seen
2e5e4 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
2e5e8 339 22 A7 82 FA |                 rqpin   urx, dm
2e5ec 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
2e5f0 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
2e5f4 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
2e5f8 33d             | connected
2e5f8 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
2e5fc 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
2e600 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
2e604 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
2e608 341             | .set_pulse
2e608 341 1A 64 63 FD |                 getct   _pulse_time_
2e60c 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
2e610 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
2e610 343             | ' of 1ms and make a correction, if necessary.
2e610 343             | '                mov     htmp, _1ms_
2e610 343             | '                subs    htmp, iframe_delta
2e610 343             | '                adds    _frame1ms_clks_, htmp
2e610 343             | '                debug(udec(_frame1ms_clks_))
2e610 343             | 
2e610 343             |                 ' Fall through to idle/processing loop
2e610 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
2e614 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
2e618 345             | 
2e618 345             | hidle
2e618 345 22 A7 82 FA |                 rqpin   urx, dm
2e61c 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
2e620 347 98 00 90 CD |         if_c    jmp     #.se0_test
2e624 348 24 06 70 FD |                 pollct3                         wc
2e628 349 68 00 90 3D |         if_nc   jmp     #.nopoll
2e62c 34a 1A 94 63 FD |                 getct   hct3
2e630 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
2e634 34c             | 
2e634 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
2e638 34d 00 70 E3 F8 |                 getbyte htmp
2e63c 34e             | 
2e63c 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
2e640 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
2e644 350 40 00 90 AD |         if_z    jmp     #.poll
2e648 351             | 
2e648 351             |         if _HAVE_GAMEPAD
2e648 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
2e64c 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
2e650 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
2e654 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
2e658 355 2C 00 90 AD |         if_z    jmp     #.poll
2e65c 356             |         end
2e65c 356             | 
2e65c 356             |         if HAVE_MOUSE
2e65c 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
2e660 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
2e664 358 20 00 90 AD |         if_z    jmp     #.poll
2e668 359             |         end
2e668 359             | 
2e668 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
2e66c 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
2e670 35b 14 00 90 AD |         if_z    jmp     #.poll
2e674 35c             | 
2e674 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
2e678 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
2e67c 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
2e680 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
2e684 360             |         if HAVE_MOUSE
2e684 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
2e688 361             |         else
2e688 361             |         end
2e688 361             | 
2e688 361             | .poll
2e688 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
2e68c 362 2D EC 63 FD |                 call    pa
2e690 363             | .skip_poll
2e690 363             | 
2e690 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
2e694 364             | 
2e694 364             | .nopoll
2e694 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
2e698 365 44 00 90 AD |         if_z    jmp     #hsuspend
2e69c 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
2e6a0 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
2e6a4 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
2e6a8 369 1A 84 63 FD |                 getct   hr0
2e6ac 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
2e6b0 36b             |         if ACTIVITY_LED >= 0
2e6b0 36b             |         end
2e6b0 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
2e6b4 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
2e6b8 36d 5C FF 9F FD |                 jmp     #hidle
2e6bc 36e             | ' Check for extended SE0 state on the bus
2e6bc 36e             | .se0_test
2e6bc 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
2e6c0 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
2e6c4 370 22 A7 82 FA |                 rqpin   urx, dm
2e6c8 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
2e6cc 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
2e6d0 373 24 F6 BF FD |                 call    #wait_txn_ok
2e6d4 374 00 00 80 FF 
2e6d8 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
2e6dc 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
2e6dc 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
2e6e0 377             | 
2e6e0 377             | hsuspend
2e6e0 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
2e6e4 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
2e6e8 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
2e6ec 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
2e6f0 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
2e6f4 37c 00 96 07 F6 |                 mov     mod_cnt, #0
2e6f8 37d             | 
2e6f8 37d             |                 ' Fall through to resume wait loop
2e6f8 37d             | 
2e6f8 37d             | hwait_resume
2e6f8 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
2e6fc 37e 02 86 47 F0 |                 shr     hr1, #2
2e700 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
2e704 380             |         if ACTIVITY_LED >= 0
2e704 380             |         end
2e704 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
2e708 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
2e70c 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
2e710 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
2e714 384 18 00 90 AD |         if_z    jmp     #.resume
2e718 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
2e71c 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
2e720 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
2e724 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2e728 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
2e72c 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
2e730 38b             | .resume
2e730 38b 22 05 28 FC |                 wypin   #OUT_K, dm
2e734 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
2e738 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
2e73c 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
2e740 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
2e744 390 1F 70 63 FD |                 waitx   htmp
2e748 391 22 07 28 FC |                 wypin   #OUT_J, dm
2e74c 392 01 70 47 F0 |                 shr     htmp, #1
2e750 393 1F 70 63 FD |                 waitx   htmp
2e754 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2e758 395 1A 92 62 FD |                 getct   iframe_ct_base
2e75c 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2e760 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2e764 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
2e768 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
2e76c 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
2e770 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
2e774 39c             | 
2e774 39c             | '------------------------------------------------------------------------------
2e774 39c             | ' Send preamble to enable low-speed HUB ports
2e774 39c             | '------------------------------------------------------------------------------
2e774 39c             | ' On entry:
2e774 39c             | ' On exit:
2e774 39c             | '   USB baud rate set to low-speed
2e774 39c             | '------------------------------------------------------------------------------
2e774 39c             | utx_pre
2e774 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
2e778 39d 40 46 62 FD |                 dirl    dp
2e77c 39e 28 02 64 FD |                 setq    #1
2e780 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
2e784 3a0 58 44 62 FD |                 drvl    dm
2e788 3a1 59 46 62 FD |                 drvh    dp
2e78c 3a2             | 
2e78c 3a2 1E 00 00 FF 
2e790 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
2e794 3a4             | 
2e794 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
2e798 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
2e79c 3a6 28 02 64 3D |         if_nc   setq    #1
2e7a0 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
2e7a4 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
2e7a8 3a9             | .l1
2e7a8 3a9             | 
2e7a8 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
2e7ac 3aa 40 46 62 FD |                 dirl    dp
2e7b0 3ab 28 02 64 FD |                 setq    #1
2e7b4 3ac 80 00 80 FF 
2e7b8 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
2e7bc 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
2e7c0 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
2e7c4 3b0 41 46 62 FD |                 dirh    dp
2e7c8 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2e7cc 3b2             | 
2e7cc 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
2e7d0 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
2e7d4 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
2e7d8 3b5             | 
2e7d8 3b5             | hlut_end
2e7d8 3b5             |                 fit     $400
2e7d8 3b5             |                 orgh
2e7d8                 | if OVERLAP_MEMORY
2e7d8                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
2e7d8                 | end
2e7d8                 | '------------------------------------------------------------------------------
2e7d8                 | ' Routines called from cog space.
2e7d8                 | '------------------------------------------------------------------------------
2e7d8                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
2e7d8                 | '------------------------------------------------------------------------------
2e7d8                 | 
2e7d8                 | '------------------------------------------------------------------------------
2e7d8                 | ' USB host cog initialization.
2e7d8                 | '------------------------------------------------------------------------------
2e7d8                 | usb_host_init
2e7d8                 |                 ' Initialize buffer pointers
2e7d8                 |         if OVERLAP_MEMORY
2e7d8                 |         else
2e7d8     40 15 B0 FE |                 loc     pb, #hid_descr
2e7dc                 |         end
2e7dc     F7 4B 02 F6 |                 mov     hid_descr_p, pb
2e7e0                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
2e7e0                 |                 {
2e7e0                 |                 }
2e7e0                 |         
2e7e0                 |                 {
2e7e0                 |                 }
2e7e0                 |                 'loc     pb,#hkbd_report
2e7e0                 |                 'mov     hkbd_report_p,pb
2e7e0                 | 
2e7e0     08 1D B0 FE |                 loc     pb, #hub_descr
2e7e4     F7 4D 02 F6 |                 mov     hub_descr_p, pb
2e7e8     1D 1D B0 FE |                 loc     pb, #urx_buff
2e7ec     F7 4F 02 F6 |                 mov     urx_buff_p, pb
2e7f0     95 1D B0 FE |                 loc     pb, #dev_desc_buff
2e7f4     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
2e7f8     9F 1D B0 FE |                 loc     pb, #con_desc_buff
2e7fc     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
2e800     18 15 B0 FE |                 loc     pb, #usb_cache_start
2e804     F7 55 02 F6 |                 mov     cache_start_p, pb
2e808     E9 1C B0 FE |                 loc     pb, #usb_cache_end
2e80c     F7 57 02 F6 |                 mov     cache_end_p, pb
2e810                 | 
2e810                 |         if ERROR_LED >= 0
2e810                 |         end
2e810                 | 
2e810                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
2e810                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
2e810                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
2e810                 | ' Configure and enable the Serial Host USB port.
2e810     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
2e814                 | 
2e814                 | '------------------------------------------------------------------------------
2e814                 | ' Timing calculations happen before any interrupt(s) are enabled.
2e814                 | '------------------------------------------------------------------------------
2e814                 | ' On entry:
2e814                 | '   htmp - current CLKFREQ value.
2e814                 | '------------------------------------------------------------------------------
2e814                 | hinit_usb_timings
2e814                 | '                getct   htmp2
2e814     B8 59 02 F6 |                 mov     save_sysclk, htmp
2e818     8D 5B 80 FF 
2e81c     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
2e820     18 30 63 FD |                 getqx   _12Mbps_
2e824     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
2e828     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
2e82c     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
2e830     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
2e834     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
2e838     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
2e83c     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
2e840     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
2e844     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
2e848     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
2e84c     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
2e850     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
2e854     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
2e858     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
2e85c     80 00 00 FF 
2e860     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
2e864     18 2C 63 FD |                 getqx   _var_64_lower_
2e868     19 2E 63 FD |                 getqy   _var_64_upper_
2e86c     28 2C 63 FD |                 setq    _var_64_lower_
2e870     65 CD 1D FF 
2e874     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
2e878     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
2e87c     01 00 00 FF 
2e880     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
2e884     18 2C 63 FD |                 getqx   _var_64_lower_
2e888     19 2E 63 FD |                 getqy   _var_64_upper_
2e88c     28 2C 63 FD |                 setq    _var_64_lower_
2e890     A1 07 00 FF 
2e894     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
2e898     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
2e89c     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
2e8a0     09 36 57 F0 |                 shr     _1us_, #9               wc
2e8a4     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
2e8a8     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
2e8ac     18 38 63 FD |                 getqx   _10us_
2e8b0     09 38 57 F0 |                 shr     _10us_, #9              wc
2e8b4     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
2e8b8     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
2e8bc     18 3A 63 FD |                 getqx   _33us_
2e8c0     09 3A 57 F0 |                 shr     _33us_, #9              wc
2e8c4     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
2e8c8     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
2e8cc     18 3C 63 FD |                 getqx   _txn_err_
2e8d0     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
2e8d4     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
2e8d8     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
2e8dc     18 3E 63 FD |                 getqx   _500us_
2e8e0     09 3E 57 F0 |                 shr     _500us_, #9             wc
2e8e4     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
2e8e8     01 00 00 FF 
2e8ec     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
2e8f0     18 40 63 FD |                 getqx   _txn_ok_ls_
2e8f4     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
2e8f8     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
2e8fc     01 00 00 FF 
2e900     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
2e904     18 42 63 FD |                 getqx   _txn_ok_fs_
2e908     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
2e90c     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
2e910     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
2e914     05 00 00 FF 
2e918     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
2e91c     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
2e920     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
2e924     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
2e928     1C 00 00 FF 
2e92c     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
2e930     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
2e934     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
2e938     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
2e93c     00 00 00 FF 
2e940     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
2e944     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
2e948     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
2e94c     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
2e950     04 00 00 FF 
2e954     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
2e958     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
2e95c     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
2e960     8D 5B 00 FF 
2e964     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
2e968     18 4C 63 FD |                 getqx   _preamble_wait_
2e96c     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
2e970     01 00 00 FF 
2e974     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
2e978     18 2C 63 FD |                 getqx   _var_64_lower_
2e97c     19 2E 63 FD |                 getqy   _var_64_upper_
2e980     28 2C 63 FD |                 setq    _var_64_lower_
2e984     01 00 00 FF 
2e988     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
2e98c     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
2e990     09 4E 57 F0 |                 shr     _1ms_, #9               wc
2e994     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
2e998     FF FF 7F FF 
2e99c     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
2e9a0     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
2e9a4     A7 51 03 F6 |                 mov     _2ms_, _1ms_
2e9a8     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
2e9ac     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
2e9b0     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
2e9b4     A7 55 03 F6 |                 mov     _4ms_, _1ms_
2e9b8     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
2e9bc     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
2e9c0     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
2e9c4     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
2e9c8     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
2e9cc     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
2e9d0     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
2e9d4     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
2e9d8     A7 59 03 F6 |                 mov     _8ms_, _1ms_
2e9dc     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
2e9e0     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
2e9e4     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
2e9e8     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
2e9ec     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
2e9f0     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
2e9f4     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
2e9f8     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
2e9fc     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
2ea00     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
2ea04     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
2ea08                 | '        _ret_   mov     _1sec_, save_sysclk
2ea08                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
2ea08                 | '                ret
2ea08                 | {
2ea08                 | }
2ea08                 | 
2ea08                 | '------------------------------------------------------------------------------
2ea08                 | ' Parse a configuration descriptor chain to see if the device is a recognized
2ea08                 | ' one. If it is, start the task progression that will configure the device for
2ea08                 | ' use.
2ea08                 | '------------------------------------------------------------------------------
2ea08                 | ' On entry:
2ea08                 | '   hconfig_base - start address of the cached config descriptor chain.
2ea08                 | ' On exit:
2ea08                 | '------------------------------------------------------------------------------
2ea08                 | hparse_con_desc
2ea08     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
2ea0c     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
2ea10     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
2ea14     4E 70 FF F9 |                 movbyts htmp,#%%1032
2ea18     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
2ea1c                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
2ea1c                 | 
2ea1c     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
2ea20     6E ED 03 F1 |                 add     pa, hconfig_base
2ea24     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
2ea28                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
2ea28                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
2ea28                 | ' that defines a keyboard and/or mouse.
2ea28     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
2ea2c                 | .next_intf
2ea2c     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
2ea30     BC 01 90 3D |         if_ae   jmp     #hset_config
2ea34     6E F3 03 F6 |                 mov     ptrb, hconfig_base
2ea38     75 F3 03 F1 |                 add     ptrb, hnext_desc
2ea3c     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
2ea40     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
2ea44     0C 00 90 AD |         if_z    jmp     #.intf
2ea48     80 71 C7 FA |                 rdbyte  htmp, ptrb
2ea4c     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
2ea50     D8 FF 9F FD |                 jmp     #.next_intf
2ea54                 | .intf
2ea54     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
2ea58     00 90 07 F6 |                 mov     hpar3, #0
2ea5c     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
2ea60     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
2ea64     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
2ea68     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
2ea6c                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
2ea6c                 | 
2ea6c                 | .endp
2ea6c     80 71 C7 FA |                 rdbyte  htmp, ptrb
2ea70     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
2ea74     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
2ea78     78 00 90 3D |         if_ae   jmp     #.get_device
2ea7c     6E F3 03 F6 |                 mov     ptrb, hconfig_base
2ea80     75 F3 03 F1 |                 add     ptrb, hnext_desc
2ea84     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
2ea88     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
2ea8c     64 00 90 AD |         if_z    jmp     #.get_device
2ea90     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
2ea94     04 00 90 AD |         if_z    jmp     #.get_ep
2ea98     D0 FF 9F FD |                 jmp     #.endp
2ea9c                 | .get_ep
2ea9c     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
2eaa0     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
2eaa4     0F 86 67 F0 |                 shl     hr1, #8 + 7
2eaa8     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
2eaac     3F 00 00 FF 
2eab0     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
2eab4     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
2eab8     00 8E 0F F2 |                 cmp     hpar2, #0               wz
2eabc     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
2eac0     00 90 0F F2 |                 cmp     hpar3, #0               wz
2eac4     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
2eac8     A0 FF 9F FD |                 jmp     #.endp
2eacc                 | .in_ep
2eacc     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
2ead0     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
2ead4                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
2ead4     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
2ead8     C2 89 DB F8 |                 setbyte hr2, hr0, #3
2eadc     8C FF 9F FD |                 jmp     #.endp
2eae0                 | .out_ep
2eae0     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
2eae4     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
2eae8                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
2eae8     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
2eaec     C2 8B DB F8 |                 setbyte hr3, hr0, #3
2eaf0     78 FF 9F FD |                 jmp     #.endp
2eaf4                 | 
2eaf4                 | .get_device
2eaf4     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
2eaf8     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
2eafc     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
2eb00     68 00 90 AD |         if_z    jmp     #.gamepad
2eb04     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
2eb08     AC 00 90 AD |         if_z    jmp     #.hub
2eb0c     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
2eb10     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
2eb14     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
2eb18     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
2eb1c     4C 00 90 AD |         if_z    jmp     #.gamepad
2eb20     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
2eb24     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
2eb28                 | .keyboard
2eb28     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
2eb2c                 |         if HAVE_MOUSE
2eb2c     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
2eb30                 |         else
2eb30                 |         end
2eb30     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
2eb34     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
2eb38     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2eb3c     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
2eb40     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
2eb44     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
2eb48                 |                 'debug(udec(kb_intf_num))
2eb48                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
2eb48     E0 FE 9F FD |                 jmp     #.next_intf
2eb4c                 | if HAVE_MOUSE
2eb4c                 | .mouse
2eb4c     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
2eb50     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
2eb54     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
2eb58     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
2eb5c     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2eb60                 |                 'getbyte ms_interval, hr2, #3
2eb60     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
2eb64     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
2eb68                 |                 'debug(udec(kb_intf_num))
2eb68                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
2eb68     C0 FE 9F FD |                 jmp     #.next_intf
2eb6c                 | end
2eb6c                 | .gamepad
2eb6c     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
2eb70     C7 71 63 F5 |                 xor     htmp, hpar2
2eb74     3F 00 00 FF 
2eb78     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2eb7c     AC FE 9F AD |         if_z    jmp     #.next_intf
2eb80                 |         if HAVE_MOUSE
2eb80     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
2eb84     C7 71 63 F5 |                 xor     htmp, hpar2
2eb88     3F 00 00 FF 
2eb8c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2eb90     98 FE 9F AD |         if_z    jmp     #.next_intf
2eb94                 |         end
2eb94     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
2eb98     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
2eb9c     8C FE 9F 5D |         if_nz   jmp     #.next_intf
2eba0                 | 
2eba0     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2eba4     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
2eba8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2ebac     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
2ebb0     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
2ebb4                 |                 'debug(udec(gp_intf_num))
2ebb4                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
2ebb4     74 FE 9F FD |                 jmp     #.next_intf
2ebb8                 | .hub
2ebb8     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
2ebbc     6C FE 9F 5D |         if_nz   jmp     #.next_intf
2ebc0     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
2ebc4     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
2ebc8     60 FE 9F 5D |         if_nz   jmp     #.next_intf
2ebcc     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
2ebd0     58 FE 9F 5D |         if_nz   jmp     #.next_intf
2ebd4     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
2ebd8     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
2ebdc     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
2ebe0     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2ebe4     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
2ebe8     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
2ebec                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
2ebec     3C FE 9F FD |                 jmp     #.next_intf
2ebf0                 | 
2ebf0                 | '------------------------------------------------------------------------------
2ebf0                 | ' If a newly-connected device is recognized, do whatever is needed to configure
2ebf0                 | ' it according to its function, or functions. In the case of this boot protocol
2ebf0                 | ' keyboard/mouse class driver:
2ebf0                 | ' - SetConfiguration(config_num)
2ebf0                 | ' - SetProtocol(boot)
2ebf0                 | ' - SetIdle(indefinite)
2ebf0                 | ' - Enter the device interrupt IN polling task stage.
2ebf0                 | '------------------------------------------------------------------------------
2ebf0                 | ' On entry:
2ebf0                 | ' On exit:
2ebf0                 | '------------------------------------------------------------------------------
2ebf0                 | hset_config
2ebf0                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
2ebf0                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
2ebf0     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
2ebf4     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2ebf8     00 00 0C F2 |                 cmp     0-0, #0                 wz
2ebfc     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
2ec00                 |         if HAVE_MOUSE
2ec00     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
2ec04                 |         end
2ec04     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
2ec08     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
2ec0c                 | .set_config
2ec0c     6C 0E D0 FE |                 loc     ptra, #set_config
2ec10     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
2ec14     6E ED 03 F1 |                 add     pa, hconfig_base
2ec18     F6 8D C3 FA |                 rdbyte  hpar1, pa
2ec1c     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
2ec20     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
2ec24     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
2ec28     A0 02 A0 FD |                 call    #control_write
2ec2c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2ec30     2D 00 64 5D |         if_nz   ret
2ec34                 | .kbd_config
2ec34     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
2ec38     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
2ec3c                 | 
2ec3c     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
2ec40     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2ec44     3F 00 00 FF 
2ec48     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2ec4c     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
2ec50                 | 
2ec50     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
2ec54     34 0E D0 FE |                 loc     ptra, #set_protocol
2ec58     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
2ec5c     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2ec60     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
2ec64     A0 02 A0 FD |                 call    #control_write
2ec68     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2ec6c     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
2ec70     E4 02 90 5D |         if_nz   jmp     #.notify_client
2ec74     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
2ec78     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
2ec7c     30 03 B0 FD |                 call    #hset_idle
2ec80                 |                 'cmp     retval, #PID_ACK        wz
2ec80                 |         'if_nz   mov     hkbd_ep_addr, #0
2ec80                 |         'if_nz   jmp     #.notify_client
2ec80     A8 99 02 F6 |                 mov     hctwait, _2ms_
2ec84     EF 02 A0 FD |                 call    #poll_waitx
2ec88     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
2ec8c     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
2ec90     90 17 90 FE |                 loc     pa, #hkbd_led_rep
2ec94     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
2ec98     2C 03 B0 FD |                 call    #hset_kbdled_report
2ec9c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2eca0     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
2eca4     B0 02 90 5D |         if_nz   jmp     #.notify_client
2eca8     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
2ecac     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2ecb0     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2ecb4     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2ecb8     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
2ecbc     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
2ecc0     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
2ecc4     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2ecc8     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
2eccc     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
2ecd0     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
2ecd4                 |         if !!HAVE_MOUSE
2ecd4                 |         end
2ecd4                 | 
2ecd4                 | .mouse_config
2ecd4                 | if HAVE_MOUSE
2ecd4     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
2ecd8     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
2ecdc     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
2ece0     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2ece4     3F 00 00 FF 
2ece8     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2ecec     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
2ecf0                 | 
2ecf0                 |                 debug("mouse passed addr check")
2ecf0                 | 
2ecf0     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
2ecf4     00 00 80 FF 
2ecf8     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
2ecfc     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
2ed00     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2ed04     55 02 A0 FD |                 call    #control_read
2ed08     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2ed0c     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
2ed10     44 02 90 5D |         if_nz   jmp     #.notify_client
2ed14     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
2ed18     56 01 00 F6 |                 mov     0-0, total_data
2ed1c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2ed20                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
2ed20                 | 
2ed20     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
2ed24     64 0D D0 FE |                 loc     ptra, #set_protocol
2ed28     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
2ed2c     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2ed30     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
2ed34     A0 02 A0 FD |                 call    #control_write
2ed38     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2ed3c     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
2ed40     14 02 90 5D |         if_nz   jmp     #.notify_client
2ed44                 |                 debug("mouse passed SetProtocol")
2ed44     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
2ed48     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
2ed4c     60 02 B0 FD |                 call    #hset_idle
2ed50                 |                 'cmp     retval, #PID_ACK        wz
2ed50                 |         'if_nz   mov     hmouse_ep_addr, #0
2ed50                 |         'if_nz   jmp     #.notify_client
2ed50                 |                 debug("mouse passed SetIdle")
2ed50     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
2ed54     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2ed58     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2ed5c     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2ed60     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
2ed64     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2ed68     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
2ed6c     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
2ed70     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
2ed74     3F 00 00 FF 
2ed78     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
2ed7c     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
2ed80     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
2ed84     D0 01 90 FD |                 jmp     #.notify_client
2ed88                 | end
2ed88                 | .gamepad_config
2ed88                 | if _HAVE_GAMEPAD
2ed88     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2ed8c     00 00 0C F2 |                 cmp     0-0, #0                 wz
2ed90     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
2ed94     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2ed98     00 70 03 F6 |                 mov     htmp, 0-0
2ed9c     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2eda0     3F 00 00 FF 
2eda4     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2eda8     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
2edac                 | 
2edac     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2edb0     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
2edb4     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2edb8     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2edbc     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2edc0     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2edc4     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
2edc8     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
2edcc     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
2edd0     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2edd4     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2edd8     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
2eddc     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
2ede0     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2ede4                 | 
2ede4                 |                 if EMUPAD_MAX_PLAYER > 0
2ede4                 |                 
2ede4                 | .rule_loop           
2ede4                 |                 end
2ede4                 | 
2ede4     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
2ede8     5C 00 90 AD |         if_e    jmp     #.xinput
2edec     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
2edf0     00 70 03 F6 |                 mov     htmp,0-0
2edf4     01 A6 02 FF 
2edf8     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
2edfc     7C 00 90 AD |         if_e    jmp     #.ps3
2ee00                 | 
2ee00     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
2ee04     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
2ee08     00 00 80 5F 
2ee0c     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
2ee10     03 00 80 AF 
2ee14     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
2ee18     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
2ee1c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2ee20     55 02 A0 FD |                 call    #control_read
2ee24     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2ee28     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
2ee2c     00 00 04 56 |         if_nz   mov     0-0, #0
2ee30     24 01 90 5D |         if_nz   jmp     #.notify_client
2ee34     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
2ee38     56 01 00 F6 |                 mov     0-0, total_data
2ee3c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2ee40                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
2ee40                 | 
2ee40     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
2ee44     10 01 90 FD |                 jmp     #.notify_client
2ee48                 | .xinput
2ee48     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
2ee4c     2D EF 03 F6 |                 mov     pb,hdev_port
2ee50     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
2ee54     03 EE 27 F3 |                 fle     pb,#3
2ee58     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
2ee5c     02 EF 47 FC |                 wrbyte  pb, ptra[2]
2ee60                 | 
2ee60     03 B0 06 F6 |                 mov     pkt_data, #3
2ee64     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
2ee68     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
2ee6c     5A 00 A0 FD |                 call    #txn_out
2ee70     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
2ee74                 | 
2ee74     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
2ee78     DC 00 90 FD |                 jmp     #.notify_client
2ee7c                 | .ps3
2ee7c     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
2ee80     2D EF 03 F6 |                 mov     pb,hdev_port
2ee84     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
2ee88     04 EE 27 F3 |                 fle     pb,#4
2ee8c     F7 EF C3 F9 |                 decod   pb
2ee90     09 EF 47 FC |                 wrbyte  pb, ptra[9]
2ee94                 | 
2ee94     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
2ee98     00 0C D0 FE |                 loc     ptra, #set_report
2ee9c     01 00 80 FF 
2eea0     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
2eea4     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2eea8     03 61 5C FC |                 wrword  #48, ptra[wLength]
2eeac     20 0C B0 FE |                 loc     pb, #ps3_command_buff
2eeb0     A0 02 A0 FD |                 call    #control_write
2eeb4                 | 
2eeb4     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
2eeb8     E0 0B D0 FE |                 loc     ptra, #set_report
2eebc     01 00 80 FF 
2eec0     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
2eec4     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2eec8     03 09 5C FC |                 wrword  #4, ptra[wLength]
2eecc     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
2eed0     A0 02 A0 FD |                 call    #control_write
2eed4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
2eed8     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
2eedc     00 00 04 56 |         if_nz   mov     0-0, #0
2eee0     74 00 90 5D |         if_nz   jmp     #.notify_client
2eee4                 | 
2eee4     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
2eee8     6C 00 90 FD |                 jmp     #.notify_client
2eeec                 | end
2eeec                 | 
2eeec                 | .hub_config
2eeec     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
2eef0     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
2eef4     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
2eef8     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2eefc     3F 00 00 FF 
2ef00     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2ef04     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
2ef08                 | 
2ef08     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
2ef0c     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
2ef10     26 EF 03 F6 |                 mov     pb, hub_descr_p
2ef14     55 02 A0 FD |                 call    #control_read
2ef18     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2ef1c     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
2ef20     34 00 90 5D |         if_nz   jmp     #.notify_client
2ef24                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
2ef24                 | 
2ef24     26 F1 03 F6 |                 mov     ptra, hub_descr_p
2ef28     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
2ef2c     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
2ef30                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
2ef30                 | .pwr_loop
2ef30     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
2ef34     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
2ef38     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
2ef3c     A0 02 A0 FD |                 call    #control_write
2ef40     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
2ef44                 | 
2ef44     B1 99 02 F6 |                 mov     hctwait, _500ms_
2ef48     B0 99 02 F1 |                 add     hctwait, _100ms_
2ef4c     EF 02 A0 FD |                 call    #poll_waitx
2ef50                 | 
2ef50     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
2ef54     00 00 90 FD |                 jmp     #.notify_client
2ef58                 | 
2ef58                 | .notify_client
2ef58     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
2ef5c     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
2ef60                 |                 debug(uhex_long(hdev_type,hdev_type+1))
2ef60                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
2ef60     2D 00 64 FD |                 ret
2ef64                 | 
2ef64                 | '------------------------------------------------------------------------------
2ef64                 | ' Initialize the keyboard/mouse data area to start-up values.
2ef64                 | '------------------------------------------------------------------------------
2ef64                 | ' On entry:
2ef64                 | ' On exit:
2ef64                 | '------------------------------------------------------------------------------
2ef64                 | init_kbdm_data
2ef64     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
2ef68     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
2ef6c                 | 
2ef6c     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
2ef70     2B ED 03 F6 |                 mov     pa, cache_end_p
2ef74                 | .loop
2ef74     61 01 4C FC |                 wrbyte  #0, ptra++
2ef78     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
2ef7c     F4 FF 9F CD |         if_b    jmp     #.loop
2ef80                 |         
2ef80                 |         if EMUPAD_MAX_PLAYER > 0
2ef80                 |         end
2ef80                 | 
2ef80                 | 
2ef80     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
2ef84                 | .regloop
2ef84     00 EC 8F F9 |                 altd    pa
2ef88     00 00 04 F6 |                 mov     0-0, #0
2ef8c     01 EC 07 F1 |                 add     pa, #1
2ef90     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
2ef94     EC FF 9F 5D |         if_nz   jmp     #.regloop
2ef98                 | 
2ef98     E1 E1 61 FF 
2ef9c     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
2efa0     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
2efa4     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
2efa8     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
2efac                 | 
2efac     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
2efb0                 | 
2efb0                 | '------------------------------------------------------------------------------
2efb0                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
2efb0                 | ' function.
2efb0                 | '------------------------------------------------------------------------------
2efb0                 | ' On entry:
2efb0                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
2efb0                 | '   hpar2 - index number of the target interface.
2efb0                 | ' On exit:
2efb0                 | '------------------------------------------------------------------------------
2efb0                 | hset_idle
2efb0     A8 99 02 F6 |                 mov     hctwait, _2ms_
2efb4     EF 02 A0 FD |                 call    #poll_waitx
2efb8     D8 0A D0 FE |                 loc     ptra, #set_idle
2efbc     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
2efc0     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
2efc4     A0 02 80 FD |                 jmp     #control_write
2efc8                 | 
2efc8                 | '------------------------------------------------------------------------------
2efc8                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
2efc8                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
2efc8                 | '------------------------------------------------------------------------------
2efc8                 | ' On entry:
2efc8                 | '   ep_addr_pid - device address and enpoint for the request.
2efc8                 | ' On exit:
2efc8                 | '   retval - transaction result.
2efc8                 | '------------------------------------------------------------------------------
2efc8                 | hset_kbdled_report
2efc8     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
2efcc     CC 0A D0 FE |                 loc     ptra, #set_report
2efd0     01 00 80 FF 
2efd4     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
2efd8     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2efdc     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
2efe0     27 EF 03 F6 |                 mov     pb, urx_buff_p
2efe4     F7 77 42 FC |                 wrbyte  kb_led_states, pb
2efe8     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
2efec                 | 
2efec                 | '------------------------------------------------------------------------------
2efec                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
2efec                 | '------------------------------------------------------------------------------
2efec                 | ' On entry:
2efec                 | ' On exit:
2efec                 | '------------------------------------------------------------------------------
2efec                 | hget_kbd_in_report
2efec     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
2eff0     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2eff4     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
2eff8     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
2effc     CF 02 A0 FD |                 call    #do_int_in
2f000     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f004     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2f008                 | 
2f008     00 90 0F F2 |                 cmp     hpar3, #0               wz
2f00c     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2f010                 | 
2f010     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
2f014     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2f018     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
2f01c     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
2f020                 | 
2f020     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
2f024     18 00 B0 FD |                 call    #hkbd_compare
2f028                 |         if EMUPAD_MAX_PLAYER > 0
2f028                 |         end
2f028                 | 
2f028                 | .led_check
2f028     3B 71 03 F6 |                 mov     htmp, kb_led_states
2f02c     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
2f030     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
2f034     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
2f038     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
2f03c     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
2f040                 | 
2f040                 | '------------------------------------------------------------------------------
2f040                 | ' Compare current and previous keyboard data buffers for keypress changes.
2f040                 | '------------------------------------------------------------------------------
2f040                 | hkbd_compare
2f040     27 F1 03 F6 |                 mov     ptra, urx_buff_p
2f044     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
2f048     61 73 07 FB |                 rdlong  htmp1, ptra++
2f04c     E1 75 07 FB |                 rdlong  htmp2, ptrb++
2f050     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
2f054     61 73 07 FB |                 rdlong  htmp1, ptra++
2f058     E1 75 07 FB |                 rdlong  htmp2, ptrb++
2f05c     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
2f060     2D 00 64 AD |         if_z    ret
2f064                 | 
2f064     B4 13 D0 FE |                 loc     ptra, #hkbd_report
2f068                 | 
2f068                 |                 ' Handle modifiers
2f068     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
2f06c     00 87 C7 FA |                 rdbyte  hr1, ptra
2f070     C7 87 43 F9 |                 rolword hr1,hpar2,#0
2f074     63 86 63 FD |                 mergew  hr1
2f078     08 EC 07 F6 |                 mov     pa,#8
2f07c                 | .modloop
2f07c     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
2f080     E8 8C 07 F6 |                 mov     hpar1,#$E8
2f084     F6 8D 83 F1 |                 sub     hpar1,pa
2f088     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
2f08c     FB ED 6F FB |                 djnz    pa,#.modloop
2f090                 | 
2f090     6F E0 75 FD | .release        modc    _set    wc
2f094                 |                 'alts    hdev_port, #hid_report_p
2f094                 |                 'mov     ptra, hid_report_p
2f094     02 F0 07 F1 |                 add     ptra, #2
2f098     06 EC 07 F6 |                 mov     pa, #6
2f09c     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
2f0a0     20 00 90 AD |         if_z    jmp     #.rl3
2f0a4     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
2f0a8     02 F2 07 F1 |                 add     ptrb, #2
2f0ac     06 EE 07 F6 |                 mov     pb, #6
2f0b0     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
2f0b4     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
2f0b8     08 00 90 AD |         if_z    jmp     #.rl3
2f0bc     FC EF 6F FB |                 djnz    pb, #.rl2
2f0c0     68 00 B0 FD |                 call    #hkbd_translate
2f0c4     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
2f0c8                 | 
2f0c8     00 90 07 F6 |                 mov     hpar3, #0
2f0cc     1F 90 27 F4 |                 bith    hpar3, #31
2f0d0                 | 
2f0d0     6F 00 74 FD | .press          modc    _clr    wc
2f0d4     27 F1 03 F6 |                 mov     ptra, urx_buff_p
2f0d8     02 F0 07 F1 |                 add     ptra, #2
2f0dc     06 EC 07 F6 |                 mov     pa, #6
2f0e0     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
2f0e4     20 00 90 AD |         if_z    jmp     #.pl3
2f0e8     30 13 F0 FE |                 loc     ptrb, #hkbd_report
2f0ec     02 F2 07 F1 |                 add     ptrb, #2
2f0f0     06 EE 07 F6 |                 mov     pb, #6
2f0f4     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
2f0f8     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
2f0fc     08 00 90 AD |         if_z    jmp     #.pl3
2f100     FC EF 6F FB |                 djnz    pb, #.pl2
2f104     24 00 B0 FD |                 call    #hkbd_translate
2f108     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
2f10c                 | 
2f10c     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
2f110     08 13 F0 FE |                 loc     ptrb, #hkbd_report
2f114     28 02 64 FD |                 setq #1
2f118     61 73 07 FB |                 rdlong  htmp1, ptra++
2f11c     28 02 64 FD |                 setq #1
2f120     E1 73 67 FC |                 wrlong  htmp1, ptrb++
2f124     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
2f128                 | 
2f128     2D 00 64 FD |                 ret
2f12c                 | 
2f12c                 | '------------------------------------------------------------------------------
2f12c                 | ' Translate keyboard scancode to ASCII
2f12c                 | '------------------------------------------------------------------------------
2f12c                 | ' On entry:
2f12c                 | '   hpar1 - scancode
2f12c                 | '   hpar2 - key modifiers state
2f12c                 | '       c - pressed (0) or released (1) flag
2f12c                 | ' On exit:
2f12c                 | '   hpar1 - bit     31 = 0 pressed, 1 released
2f12c                 | '               30..17 = unused
2f12c                 | '                   18 = scroll-lock state 
2f12c                 | '                   17 = caps-lock state
2f12c                 | '                   16 = num-lock state 
2f12c                 | '                15..8 = key modifiers state
2f12c                 | '                 7..0 = scancode
2f12c                 | '------------------------------------------------------------------------------
2f12c                 | hkbd_translate
2f12c     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
2f130     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
2f134     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
2f138     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
2f13c     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
2f140     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
2f144                 | 
2f144                 |         if EMUPAD_MAX_PLAYER > 0
2f144                 | 
2f144                 |         if EMUPAD_BT0_BIT >= 0
2f144                 |         end
2f144                 |         if EMUPAD_BT1_BIT >= 0
2f144                 |         end
2f144                 |         if EMUPAD_BT2_BIT >= 0
2f144                 |         end
2f144                 |         if EMUPAD_BT3_BIT >= 0
2f144                 |         end
2f144                 |         if EMUPAD_BT4_BIT >= 0
2f144                 |         end
2f144                 |         if EMUPAD_BT5_BIT >= 0
2f144                 |         end
2f144                 |         if EMUPAD_BT6_BIT >= 0
2f144                 |         end
2f144                 |         if EMUPAD_BT7_BIT >= 0
2f144                 |         end
2f144                 |         if EMUPAD_BT8_BIT >= 0
2f144                 |         end
2f144                 |         if EMUPAD_BT9_BIT >= 0
2f144                 |         end
2f144                 | 
2f144                 |         end
2f144     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
2f148     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
2f14c     1F 8C 47 F4 |                 bitc    hpar1, #31
2f150                 |         if KEYQUEUE_SIZE > 0
2f150     C4 09 B0 FE |                 loc pb,#keyq_head
2f154     F7 71 E3 FA |                 rdword htmp,pb
2f158     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
2f15c     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
2f160     B8 75 03 F6 |                 mov htmp2,htmp
2f164     04 74 07 FA |                 mul htmp2,#4
2f168     F7 75 03 F1 |                 add htmp2,pb
2f16c     02 74 07 F1 |                 add htmp2,#2
2f170     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
2f174     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
2f178     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
2f17c     F7 71 43 5C |         if_nz   wrbyte htmp,pb
2f180                 |         end
2f180     2D 00 7C FD |                 ret wcz
2f184                 | 
2f184                 | if HAVE_MOUSE
2f184                 | '------------------------------------------------------------------------------
2f184                 | ' Execute an IN interrupt transaction to poll for mouse activity.
2f184                 | '------------------------------------------------------------------------------
2f184                 | ' On entry:
2f184                 | ' On exit:
2f184                 | '------------------------------------------------------------------------------
2f184                 | hget_mouse_in_report
2f184     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
2f188     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2f18c     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
2f190     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
2f194     CF 02 A0 FD |                 call    #do_int_in
2f198     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f19c     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2f1a0                 | 
2f1a0     00 90 0F F2 |                 cmp     hpar3, #0               wz
2f1a4     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2f1a8                 | 
2f1a8     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
2f1ac     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2f1b0     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
2f1b4     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
2f1b8                 | 
2f1b8     27 F1 03 F6 |                 mov     ptra, urx_buff_p
2f1bc     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
2f1c0     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
2f1c4     01 90 87 31 |         if_ae   sub     hpar3, #1
2f1c8                 | 
2f1c8     40 09 90 FE |                 loc     pa, #mouse_limits
2f1cc     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
2f1d0                 | 
2f1d0                 |                 ' load xacc,yacc,zacc
2f1d0     28 04 64 FD |                 setq    #3-1
2f1d4     80 87 07 FB |                 rdlong  hr1,ptrb
2f1d8                 |                 ' load limits and outptr
2f1d8     28 04 64 FD |                 setq    #3-1
2f1dc     F6 73 03 FB |                 rdlong  htmp1,pa
2f1e0                 | 
2f1e0     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
2f1e4     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
2f1e8     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
2f1ec     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
2f1f0     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
2f1f4     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
2f1f8     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
2f1fc     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
2f200                 |               
2f200                 | 
2f200     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
2f204     07 70 67 F7 |                 signx   htmp, #7
2f208     B8 87 03 F1 |                 add     hr1,htmp
2f20c     00 72 0F F2 |                 cmp     htmp1,#0 wz
2f210     B9 87 63 53 |         if_ne   fles    hr1,htmp1
2f214     00 86 47 53 |         if_ne   fges    hr1,#0
2f218                 | 
2f218     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
2f21c     07 70 67 F7 |                 signx   htmp, #7
2f220     B8 89 03 F1 |                 add     hr2,htmp
2f224     00 74 0F F2 |                 cmp     htmp2,#0 wz
2f228     BA 89 63 53 |         if_ne   fles    hr2,htmp2
2f22c     00 88 47 53 |         if_ne   fges    hr2,#0
2f230                 |                 
2f230                 | 
2f230     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
2f234     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
2f238     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
2f23c     B8 8B 03 A1 |         if_z    add     hr3,htmp
2f240                 | 
2f240     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
2f244     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
2f248                 | 
2f248                 |                 ' write back accumulators
2f248     28 04 64 FD |                 setq    #3-1
2f24c     80 87 67 FC |                 wrlong  hr1,ptrb
2f250                 |                 ' if outptr set, write X/Y words
2f250     00 76 0F F2 |                 cmp htmp3,#0                    wz
2f254     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
2f258     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
2f25c     2D 00 64 FD |                 ret
2f260                 | end
2f260                 | 
2f260                 | '------------------------------------------------------------------------------
2f260                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
2f260                 | '------------------------------------------------------------------------------
2f260                 | ' On entry:
2f260                 | ' On exit:
2f260                 | '------------------------------------------------------------------------------
2f260                 | if _HAVE_GAMEPAD
2f260                 | hget_gp_in_report
2f260     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2f264     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
2f268                 | 
2f268     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2f26c     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
2f270     00 90 E3 F8 |                 getbyte hpar3
2f274     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
2f278     CF 02 A0 FD |                 call    #do_int_in
2f27c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f280     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2f284                 | 
2f284     00 90 0F F2 |                 cmp     hpar3, #0               wz
2f288     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2f28c                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
2f28c                 | 
2f28c     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
2f290     00 70 E3 F8 |                 getbyte htmp                            ' |
2f294     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2f298     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
2f29c     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
2f2a0     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
2f2a4     B8 01 C0 F8 |                 setbyte htmp                            ' |
2f2a8                 | 
2f2a8                 | ' Note: the following code compares the current and previous reports
2f2a8                 | ' and process the data if there are changes to ease the debug output.
2f2a8                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
2f2a8                 | ' gpPreReport buffer.
2f2a8                 | 
2f2a8                 |                 ' ----- start of block to remove
2f2a8                 |                 {
2f2a8                 |                 }
2f2a8                 |                 ' ----- end of block to remove
2f2a8     F4 04 90 FE |                 loc pa,#hpad_translate
2f2ac     2A EC 63 FD |                 push pa
2f2b0                 | 
2f2b0                 |                 ' FALL THROUGH !!!!
2f2b0                 | 
2f2b0                 | '------------------------------------------------------------------------------
2f2b0                 | ' Decode controller report
2f2b0                 | '------------------------------------------------------------------------------
2f2b0                 | hid_decode
2f2b0                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
2f2b0     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
2f2b4     00 04 00 FF 
2f2b8     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
2f2bc                 | 
2f2bc     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
2f2c0                 | 
2f2c0     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
2f2c4     00 2A E3 F8 |                 getbyte hidr_type
2f2c8     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
2f2cc     34 02 90 AD |         if_z    jmp     #hpad_xinput
2f2d0     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
2f2d4     1C 03 90 AD |         if_z    jmp     #hpad_ps3
2f2d8     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
2f2dc     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
2f2e0     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
2f2e4                 |                 
2f2e4                 | 
2f2e4                 | '------------------------------------------------------------------------------
2f2e4                 | ' Handle HID controller (or mouse now
2f2e4                 | ' On entry:
2f2e4                 | '   ptrb - controller report
2f2e4                 | '------------------------------------------------------------------------------
2f2e4                 | hpad_hid
2f2e4     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2f2e8     F7 F1 03 F6 |                 mov     ptra, pb
2f2ec     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
2f2f0     00 EC 03 F6 |                 mov     pa, 0-0
2f2f4                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
2f2f4     19 2A 3B FF 
2f2f8     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
2f2fc                 | 
2f2fc                 | .next
2f2fc     00 EC 5F F2 |                 cmps    pa, #0      wcz
2f300     2D 00 7C ED |         if_be   ret     wcz
2f304                 | 
2f304     61 8D C7 FA |                 rdbyte  hpar1, ptra++
2f308     01 EC 87 F1 |                 sub     pa, #1
2f30c     00 8E 07 F6 |                 mov     hpar2, #0
2f310                 | 
2f310     C6 71 03 F6 |                 mov     htmp, hpar1
2f314     03 70 07 F5 |                 and     htmp, #$03
2f318     01 70 0F F2 |                 cmp     htmp, #1    wz
2f31c     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
2f320     07 8E 67 A7 |         if_z    signx   hpar2,#7
2f324     01 EC 87 A1 |         if_z    sub     pa, #1
2f328     02 70 0F F2 |                 cmp     htmp, #2    wz
2f32c     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
2f330     0F 8E 67 A7 |         if_z    signx   hpar2,#15
2f334     02 EC 87 A1 |         if_z    sub     pa, #2
2f338     03 70 0F F2 |                 cmp     htmp, #3    wz
2f33c     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
2f340     04 EC 87 A1 |         if_z    sub     pa, #4
2f344                 | 
2f344     FC 8C 07 F5 |                 and     hpar1, #$FC
2f348                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
2f348                 | 
2f348     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
2f34c     0C 01 90 AD |         if_z    jmp     #.report_id
2f350     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
2f354     24 01 90 AD |         if_z    jmp     #.usage_page
2f358     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
2f35c     2C 01 90 AD |         if_z    jmp     #.usage
2f360     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
2f364     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
2f368     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
2f36c     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
2f370     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
2f374     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
2f378     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
2f37c     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
2f380     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
2f384     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
2f388     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
2f38c     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
2f390     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
2f394     64 FF 9F 5D |         if_nz   jmp     #.next
2f398                 | 
2f398     D8 1D A7 FB |                 tjf     hidr_state,#.next
2f39c                 | 
2f39c     03 8E 07 F5 |                 and     hpar2, #$03
2f3a0     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
2f3a4     18 00 90 5D |         if_nz   jmp     #.skip
2f3a8                 | 
2f3a8     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
2f3ac     20 00 90 AD |         if_z    jmp     #.axes
2f3b0     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
2f3b4     5C 00 90 AD |         if_z    jmp     #.hats
2f3b8     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
2f3bc     70 00 90 AD |         if_z    jmp     #.buttons
2f3c0                 | .skip
2f3c0     8F 71 03 F6 |                 mov     htmp, hidr_size
2f3c4     90 71 03 FA |                 mul     htmp, hidr_count
2f3c8     B8 23 03 F1 |                 add     hidr_offset, htmp
2f3cc     2C FF 9F FD |                 jmp     #.next
2f3d0                 | .axes
2f3d0                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
2f3d0     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
2f3d4     90 87 03 F6 |                 mov     hr1, hidr_count
2f3d8                 | .l1
2f3d8     91 8D 03 F6 |                 mov     hpar1, hidr_offset
2f3dc     8F 8F 03 F6 |                 mov     hpar2, hidr_size
2f3e0     04 03 B0 FD |                 call    #hpad_getbits
2f3e4     64 03 B0 FD |                 call    #hpad_normalize
2f3e8     06 84 1F F2 |                 cmp     hr0, #6         wcz
2f3ec     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
2f3f0     00 88 43 C8 |         if_b    getnib  hr2
2f3f4     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
2f3f8     5F 01 20 C9 |         if_b    setword retval
2f3fc     01 84 07 C1 |         if_b    add     hr0, #1
2f400     8F 23 03 F1 |                 add     hidr_offset, hidr_size
2f404     F4 87 6F FB |                 djnz    hr1, #.l1
2f408                 | 
2f408     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
2f40c     01 1C 07 F6 |                 mov     hidr_state, #1
2f410     E8 FE 9F FD |                 jmp     #.next
2f414                 | .hats
2f414                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
2f414     91 8D 03 F6 |                 mov     hpar1, hidr_offset
2f418     8F 8F 03 F6 |                 mov     hpar2, hidr_size
2f41c     C8 02 B0 FD |                 call    #hpad_getbits
2f420     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
2f424     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
2f428     01 1C 07 F6 |                 mov     hidr_state, #1
2f42c     90 FF 9F FD |                 jmp     #.skip
2f430                 | .buttons
2f430                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
2f430     91 8D 03 F6 |                 mov     hpar1, hidr_offset
2f434     8F 8F 03 F6 |                 mov     hpar2, hidr_size
2f438     90 8F 03 FA |                 mul     hpar2, hidr_count
2f43c     A8 02 B0 FD |                 call    #hpad_getbits
2f440     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
2f444     B8 BF 62 F0 |                 shl     retval, htmp
2f448     5F 17 43 F5 |                 or      hidr_buttons, retval
2f44c     90 71 03 F1 |                 add     htmp, hidr_count
2f450     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
2f454     01 1C 07 F6 |                 mov     hidr_state, #1
2f458     64 FF 9F FD |                 jmp     #.skip
2f45c                 | .report_id
2f45c     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
2f460     2D 00 7C 5D |         if_nz   ret     wcz
2f464     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
2f468     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
2f46c     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
2f470     01 1C 67 56 |         if_nz   neg     hidr_state,#1
2f474     01 F2 87 51 |         if_nz   sub     ptrb,#1
2f478     80 FE 9F FD |                 jmp     #.next
2f47c                 | .usage_page
2f47c     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
2f480     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
2f484     04 1C 07 A6 |         if_z    mov     hidr_state, #4
2f488     70 FE 9F FD |                 jmp     #.next
2f48c                 | .usage
2f48c     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
2f490     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
2f494     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
2f498     01 1C 07 A6 |         if_z    mov     hidr_state, #1
2f49c     5C FE 9F AD |         if_z    jmp     #.next
2f4a0     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
2f4a4     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
2f4a8     01 1C 07 A6 |         if_z    mov     hidr_state, #1
2f4ac     4C FE 9F AD |         if_z    jmp     #.next
2f4b0     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
2f4b4     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
2f4b8     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
2f4bc     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
2f4c0     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
2f4c4     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
2f4c8     10 00 90 AD |         if_z    jmp     #.usage_axis
2f4cc     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
2f4d0     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
2f4d4     03 1C 07 A6 |         if_z    mov     hidr_state, #3
2f4d8     20 FE 9F FD |                 jmp     #.next
2f4dc                 | .usage_axis
2f4dc     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
2f4e0     18 FE 9F CD |         if_b    jmp     #.next
2f4e4     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
2f4e8     C7 01 00 F8 |                 setnib  hpar2
2f4ec                 | 
2f4ec     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
2f4f0     C7 8F C3 F9 |                 decod   hpar2
2f4f4     C7 0F 43 F5 |                 or      hidr_flags, hpar2
2f4f8                 | 
2f4f8     01 24 07 F1 |                 add     hidr_usage_idx, #1
2f4fc     02 1C 07 F6 |                 mov     hidr_state, #2
2f500     F8 FD 9F FD |                 jmp     #.next
2f504                 | 
2f504                 | '------------------------------------------------------------------------------
2f504                 | ' Handle XInput controller
2f504                 | ' On entry:
2f504                 | '   ptrb - controller report
2f504                 | '------------------------------------------------------------------------------
2f504                 | '   Default implementation translates the report to a pseudo-defacto hid
2f504                 | '   standard and jumps to hpad_translate for actions.
2f504                 | '   Implementors may take specific actions for this kind of controller.
2f504                 | '------------------------------------------------------------------------------
2f504                 | hpad_xinput
2f504     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
2f508     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
2f50c     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
2f510     14 70 0F F2 |                 cmp     htmp, #$14      wz
2f514     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
2f518                 | 
2f518                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
2f518                 | 
2f518     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
2f51c     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
2f520                 | 
2f520     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
2f524     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
2f528     5F BF 22 F6 |                 not     retval
2f52c     5F 11 2B F9 |                 setword hidr_axis, retval, #1
2f530     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
2f534     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
2f538     5F BF 22 F6 |                 not     retval
2f53c     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
2f540                 | 
2f540     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
2f544     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
2f548     C0 BE 1E F2 |                 cmp     retval, #192    wcz
2f54c     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
2f550     F8 01 B0 FD |                 call    #hpad_normalize
2f554     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
2f558     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
2f55c     C0 BE 1E F2 |                 cmp     retval, #192    wcz
2f560     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
2f564     E4 01 B0 FD |                 call    #hpad_normalize
2f568     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
2f56c                 | 
2f56c     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
2f570     81 BF E6 FA |                 rdword  retval, ptrb[1]
2f574     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
2f578     00 16 47 F4 |                 bitc    hidr_buttons, #0
2f57c     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
2f580     01 16 47 F4 |                 bitc    hidr_buttons, #1
2f584     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
2f588     02 16 47 F4 |                 bitc    hidr_buttons, #2
2f58c     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
2f590     03 16 47 F4 |                 bitc    hidr_buttons, #3
2f594     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
2f598     04 16 47 F4 |                 bitc    hidr_buttons, #4
2f59c     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
2f5a0     05 16 47 F4 |                 bitc    hidr_buttons, #5
2f5a4     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
2f5a8     08 16 47 F4 |                 bitc    hidr_buttons, #8
2f5ac     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
2f5b0     09 16 47 F4 |                 bitc    hidr_buttons, #9
2f5b4     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
2f5b8     0A 16 47 F4 |                 bitc    hidr_buttons, #10
2f5bc     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
2f5c0     0B 16 47 F4 |                 bitc    hidr_buttons, #11
2f5c4     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
2f5c8     0C 16 47 F4 |                 bitc    hidr_buttons, #12
2f5cc                 | 
2f5cc     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
2f5d0     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
2f5d4     7A BB 7A FF 
2f5d8     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
2f5dc     F9 FF 7F FF 
2f5e0     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
2f5e4     B9 71 5F F9 |                 altgn   htmp, #htmp1
2f5e8     00 70 43 F8 |                 getnib  htmp
2f5ec     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
2f5f0                 | 
2f5f0     AC 01 90 FD |                 jmp     #hpad_translate
2f5f4                 | 
2f5f4                 | '------------------------------------------------------------------------------
2f5f4                 | ' Handle PS3 controller
2f5f4                 | ' On entry:
2f5f4                 | '   ptrb - controller report
2f5f4                 | '------------------------------------------------------------------------------
2f5f4                 | '   Default implementation translates the report to a pseudo-defacto hid
2f5f4                 | '   standard and jumps to hpad_translate for actions.
2f5f4                 | '   Implementors may take specific actions for this kind of controller.
2f5f4                 | '------------------------------------------------------------------------------
2f5f4                 | hpad_ps3
2f5f4     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
2f5f8     01 70 0F F2 |                 cmp     htmp, #$01      wz
2f5fc     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
2f600                 | 
2f600                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
2f600                 | 
2f600     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
2f604     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
2f608     40 01 B0 FD |                 call    #hpad_normalize
2f60c     5F 11 23 F9 |                 setword hidr_axis, retval, #0
2f610     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
2f614     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
2f618     30 01 B0 FD |                 call    #hpad_normalize
2f61c     5F 11 2B F9 |                 setword hidr_axis, retval, #1
2f620     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
2f624     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
2f628     20 01 B0 FD |                 call    #hpad_normalize
2f62c     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
2f630     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
2f634     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
2f638     10 01 B0 FD |                 call    #hpad_normalize
2f63c     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
2f640     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
2f644     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
2f648                 | 
2f648     08 8C 07 F6 |                 mov     hpar1, #8
2f64c     13 8E 07 F6 |                 mov     hpar2, #19
2f650     94 00 B0 FD |                 call    #hpad_getbits
2f654                 | 
2f654     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
2f658     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
2f65c     00 16 47 F4 |                 bitc    hidr_buttons, #0
2f660     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
2f664     01 16 47 F4 |                 bitc    hidr_buttons, #1
2f668     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
2f66c     02 16 47 F4 |                 bitc    hidr_buttons, #2
2f670     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
2f674     03 16 47 F4 |                 bitc    hidr_buttons, #3
2f678     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
2f67c     04 16 47 F4 |                 bitc    hidr_buttons, #4
2f680     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
2f684     05 16 47 F4 |                 bitc    hidr_buttons, #5
2f688     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
2f68c     06 16 47 F4 |                 bitc    hidr_buttons, #6
2f690     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
2f694     07 16 47 F4 |                 bitc    hidr_buttons, #7
2f698     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
2f69c     08 16 47 F4 |                 bitc    hidr_buttons, #8
2f6a0     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
2f6a4     09 16 47 F4 |                 bitc    hidr_buttons, #9
2f6a8     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
2f6ac     0A 16 47 F4 |                 bitc    hidr_buttons, #10
2f6b0     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
2f6b4     0B 16 47 F4 |                 bitc    hidr_buttons, #11
2f6b8     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
2f6bc     0C 16 47 F4 |                 bitc    hidr_buttons, #12
2f6c0                 | 
2f6c0     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
2f6c4     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
2f6c8     09 FA 79 FF 
2f6cc     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
2f6d0     FF FA 7F FF 
2f6d4     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
2f6d8     B9 71 5F F9 |                 altgn   htmp, #htmp1
2f6dc     00 70 43 F8 |                 getnib  htmp
2f6e0     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
2f6e4                 | 
2f6e4     B8 00 90 FD |                 jmp     #hpad_translate
2f6e8                 | 
2f6e8                 | '------------------------------------------------------------------------------
2f6e8                 | ' Read bits from report data buffer
2f6e8                 | '------------------------------------------------------------------------------
2f6e8                 | ' On entry:
2f6e8                 | '   PTRB - report buffer
2f6e8                 | '   hpar1 - start bit
2f6e8                 | '   hpar2 - number of bits
2f6e8                 | ' On exit:
2f6e8                 | '   retval - bits
2f6e8                 | '------------------------------------------------------------------------------
2f6e8                 | hpad_getbits
2f6e8     C6 71 03 F6 |                 mov     htmp, hpar1
2f6ec     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
2f6f0     F9 71 03 F1 |                 add     htmp, ptrb
2f6f4     B8 BF 02 FB |                 rdlong  retval, htmp
2f6f8                 | 
2f6f8     C6 73 03 F6 |                 mov     htmp1, hpar1
2f6fc     07 72 07 F5 |                 and     htmp1, #$07     ' shift
2f700     B9 BF 42 F0 |                 shr     retval, htmp1
2f704                 | 
2f704     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
2f708     10 00 90 1D |         if_a    jmp     #.l1
2f70c                 | 
2f70c     C7 8F C3 F9 |                 decod   hpar2
2f710     01 8E 87 F1 |                 sub     hpar2, #1
2f714     C7 BF 02 F5 |                 and     retval, hpar2
2f718     2D 00 64 FD |                 ret
2f71c                 | .l1
2f71c     FF 7F 00 FF 
2f720     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
2f724     03 70 07 F1 |                 add     htmp, #3
2f728     B8 75 03 FB |                 rdlong  htmp2, htmp
2f72c     18 8E 87 F1 |                 sub     hpar2, #24
2f730     C7 8F C3 F9 |                 decod   hpar2
2f734     01 8E 87 F1 |                 sub     hpar2, #1
2f738     B9 75 43 F0 |                 shr     htmp2, htmp1
2f73c     C7 75 03 F5 |                 and     htmp2, hpar2
2f740     18 74 67 F0 |                 shl     htmp2, #24
2f744     BA BF 42 F5 |                 or      retval, htmp2
2f748     2D 00 64 FD |                 ret
2f74c                 | 
2f74c                 | '------------------------------------------------------------------------------
2f74c                 | ' Normalize value to signed word (-32768 / 32767)
2f74c                 | '------------------------------------------------------------------------------
2f74c                 | ' On entry:
2f74c                 | '   retval - value to normalize
2f74c                 | '   hidr_lminmax - min (word 1) max (word 0) value range
2f74c                 | '   - or -
2f74c                 | '   hidr_pminmax - min (word 1) max (word 0) value range
2f74c                 | '   hidr_size - value bits length
2f74c                 | ' On exit:
2f74c                 | '   retval - normalized value
2f74c                 | '------------------------------------------------------------------------------
2f74c                 | hpad_normalize
2f74c     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
2f750     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
2f754     2D 00 64 AD |         if_z    ret
2f758     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
2f75c     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
2f760     0F 72 77 F7 |                 signx   htmp1, #15      wc
2f764     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
2f768     00 BE 66 C7 |         if_c    signx   retval, #0-0
2f76c     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
2f770     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
2f774     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
2f778     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
2f77c     B8 71 53 F6 |                 abs     htmp            wc
2f780     1F BE 0E F4 |                 testb   retval, #31     wz
2f784     5F BF 42 F6 |                 abs     retval
2f788     B8 BF 12 FD |                 qdiv    retval, htmp
2f78c     18 BE 62 FD |                 getqx   retval
2f790     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
2f794     C0 FF 7F FF 
2f798     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
2f79c     2D 00 64 FD |                 ret
2f7a0                 | 
2f7a0                 | '------------------------------------------------------------------------------
2f7a0                 | ' Perform controller actions
2f7a0                 | ' On entry:
2f7a0                 | '    hidr_id        report id
2f7a0                 | '    hidr_axis      axis value (signed word, 2 axes per long)
2f7a0                 | '                      X = hidr_axis+0, #0
2f7a0                 | '                      Y = hidr_axis+0, #1
2f7a0                 | '                      Z = hidr_axis+1, #0
2f7a0                 | '                     RX = hidr_axis+1, #1
2f7a0                 | '                     RY = hidr_axis+2, #0
2f7a0                 | '                     RZ = hidr_axis+2, #1
2f7a0                 | '    hidr_buttons   buttons state (bits 0 to 31)
2f7a0                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
2f7a0                 | '
2f7a0                 | '                     -------3 -------2 -------1 -------0 byte
2f7a0                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
2f7a0                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
2f7a0                 | '                                zyx||| |||||||| ++++++++ n. buttons
2f7a0                 | '                                |||||| ||||++++--------- n. axes
2f7a0                 | '                                |||||| ++++------------- n. hats
2f7a0                 | '                                ++++++------------------ valid axes
2f7a0                 | '------------------------------------------------------------------------------
2f7a0                 | hpad_translate
2f7a0                 | 
2f7a0                 | 
2f7a0                 |         if HAVE_HIDPAD
2f7a0     84 0C F0 FE |                 loc     ptrb,#hidpad_report
2f7a4     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
2f7a8     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
2f7ac     01 70 E7 F2 |                 cmpsub  htmp,#1
2f7b0     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
2f7b4     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
2f7b8     2D 00 7C 3D |         if_ae   ret     wcz
2f7bc     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
2f7c0     B8 F3 03 F1 |                 add     ptrb,htmp
2f7c4     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
2f7c8     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
2f7cc     28 0C 64 FD |                 setq    #7-1
2f7d0     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
2f7d4                 |         end
2f7d4                 | 
2f7d4                 | 
2f7d4                 |         if EMUPAD_MAX_PLAYER > 0
2f7d4                 | .emupad_no_hat
2f7d4                 |         if EMUPAD_BT0_BIT >= 0
2f7d4                 |         end
2f7d4                 |         if EMUPAD_BT1_BIT >= 0
2f7d4                 |         end
2f7d4                 |         if EMUPAD_BT2_BIT >= 0
2f7d4                 |         end
2f7d4                 |         if EMUPAD_BT3_BIT >= 0
2f7d4                 |         end
2f7d4                 |         if EMUPAD_BT4_BIT >= 0
2f7d4                 |         end
2f7d4                 |         if EMUPAD_BT5_BIT >= 0
2f7d4                 |         end
2f7d4                 |         if EMUPAD_BT6_BIT >= 0
2f7d4                 |         end
2f7d4                 |         if EMUPAD_BT7_BIT >= 0
2f7d4                 |         end
2f7d4                 |         if EMUPAD_BT8_BIT >= 0
2f7d4                 |         end
2f7d4                 |         if EMUPAD_BT9_BIT >= 0
2f7d4                 |         end
2f7d4                 | .emupad_slot_over
2f7d4                 |         end
2f7d4                 | 
2f7d4                 |         if 0
2f7d4                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
2f7d4                 | 
2f7d4                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
2f7d4                 | 
2f7d4                 |         end
2f7d4     2D 00 64 FD |                 ret
2f7d8                 | end
2f7d8                 | 
2f7d8                 | if EMUPAD_MAX_PLAYER > 0
2f7d8                 | '------------------------------------------------------------------------------
2f7d8                 | ' Clear EmuPad state
2f7d8                 | '------------------------------------------------------------------------------
2f7d8                 | emupad_reset
2f7d8                 | 
2f7d8                 | '------------------------------------------------------------------------------
2f7d8                 | ' Get EmuPad Player number for current device (into retval)
2f7d8                 | ' Z flag is also set if current device is valid
2f7d8                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
2f7d8                 | '------------------------------------------------------------------------------
2f7d8                 | emupad_getnum
2f7d8                 | .loop
2f7d8                 | '------------------------------------------------------------------------------
2f7d8                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
2f7d8                 | '------------------------------------------------------------------------------
2f7d8                 | emupad_discon
2f7d8                 | .loop         
2f7d8                 |         
2f7d8                 |         ' FALL THROUGH!!!
2f7d8                 | 
2f7d8                 | '------------------------------------------------------------------------------
2f7d8                 | ' Update EmuPad reports (all of them...)
2f7d8                 | '------------------------------------------------------------------------------
2f7d8                 | emupad_write_reports
2f7d8                 | .devloop
2f7d8                 | 
2f7d8                 | end
2f7d8                 | 
2f7d8                 | 
2f7d8                 | '------------------------------------------------------------------------------
2f7d8                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
2f7d8                 | '------------------------------------------------------------------------------
2f7d8                 | ' On entry:
2f7d8                 | ' On exit:
2f7d8                 | '------------------------------------------------------------------------------
2f7d8                 | hget_hub_status
2f7d8     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
2f7dc     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2f7e0     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
2f7e4     01 90 2F F9 |                 setword hpar3, #1, #1
2f7e8     CF 02 A0 FD |                 call    #do_int_in
2f7ec     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f7f0     0C 00 90 AD |         if_z    jmp     #.data
2f7f4     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
2f7f8     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
2f7fc     2D 00 64 FD |                 ret
2f800                 | .data
2f800     00 90 0F F2 |                 cmp     hpar3, #0               wz
2f804     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2f808                 | 
2f808     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
2f80c     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
2f810     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
2f814     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
2f818                 |                 debug(ubin_long(hub_status_chg))
2f818                 | 
2f818     01 5A 06 F6 |                 mov     hdev_port, #1
2f81c                 | .loop
2f81c     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
2f820     0C 00 B0 AD |         if_x1   call    #hub_port_handler
2f824     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
2f828     F0 FF 9F 3D |         if_nc   jmp     #.loop
2f82c     2D 00 64 FD |                 ret
2f830                 | 
2f830                 | hub_port_handler
2f830     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
2f834     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
2f838     27 EF 03 F6 |                 mov     pb, urx_buff_p
2f83c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2f840     55 02 A0 FD |                 call    #control_read
2f844     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
2f848                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
2f848                 | 
2f848     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
2f84c     50 01 90 5D |         if_x0   jmp     #.other
2f850     68 02 D0 FE |                 loc     ptra, #clr_port_feat
2f854     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
2f858     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2f85c     A0 02 A0 FD |                 call    #control_write
2f860     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
2f864     7C 01 90 5D |         if_x0   jmp     #.disconnect
2f868     B0 99 02 F6 |                 mov     hctwait, _100ms_
2f86c     EF 02 A0 FD |                 call    #poll_waitx
2f870                 | 
2f870     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
2f874     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
2f878     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2f87c     A0 02 A0 FD |                 call    #control_write
2f880                 | 
2f880     02 76 07 F6 |                 mov     htmp3, #2
2f884                 | .wait_reset
2f884     AC 99 02 F6 |                 mov     hctwait, _8ms_
2f888     EF 02 A0 FD |                 call    #poll_waitx
2f88c     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
2f890     27 EF 03 F6 |                 mov     pb, urx_buff_p
2f894     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2f898     55 02 A0 FD |                 call    #control_read
2f89c     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
2f8a0     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
2f8a4     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
2f8a8                 | 
2f8a8     10 02 D0 FE |                 loc     ptra, #clr_port_feat
2f8ac     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
2f8b0     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2f8b4     A0 02 A0 FD |                 call    #control_write
2f8b8                 | 
2f8b8     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
2f8bc                 | .wait_recover
2f8bc     A7 99 02 F6 |                 mov     hctwait, _1ms_
2f8c0     EF 02 A0 FD |                 call    #poll_waitx
2f8c4     FD 71 6F FB |                 djnz    htmp,#.wait_recover
2f8c8                 | 
2f8c8     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2f8cc     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
2f8d0     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
2f8d4                 | 
2f8d4     00 08 00 FF 
2f8d8     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
2f8dc     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
2f8e0     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
2f8e4     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
2f8e8     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
2f8ec     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f8f0     48 01 90 5D |         if_nz   jmp     #.done
2f8f4                 | .get_dev_desc
2f8f4     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
2f8f8     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
2f8fc     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
2f900     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
2f904     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
2f908     01 71 57 FC |                 wrword  htmp, ptra[wValue]
2f90c     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
2f910     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f914     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
2f918     AC 99 02 F6 |                 mov     hctwait, _8ms_
2f91c     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
2f920     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
2f924     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
2f928     BE 00 A0 FD |                 call    #calc_crc5
2f92c     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
2f930     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
2f934     F7 AD C2 FA |                 rdbyte  total_data, pb
2f938     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
2f93c     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
2f940     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f944     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
2f948     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
2f94c     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
2f950                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
2f950     9F 99 02 F6 |                 mov     hctwait, _500us_
2f954     EF 02 A0 FD |                 call    #poll_waitx
2f958     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
2f95c     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
2f960     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
2f964     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
2f968     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f96c     CC 00 90 5D |         if_nz   jmp     #.done
2f970     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
2f974     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
2f978     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
2f97c     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
2f980     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
2f984     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
2f988     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
2f98c     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
2f990     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
2f994     A4 00 90 CD |         if_b    jmp     #.done
2f998     6C F0 BF FD |                 call    #hparse_con_desc
2f99c     9C 00 90 FD |                 jmp     #.done
2f9a0                 | 
2f9a0                 | .other
2f9a0     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
2f9a4     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
2f9a8     28 00 90 AD |         if_x1   jmp     #.reset_feature
2f9ac     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
2f9b0     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
2f9b4     1C 00 90 AD |         if_x1   jmp     #.reset_feature
2f9b8     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
2f9bc     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
2f9c0     10 00 90 AD |         if_x1   jmp     #.reset_feature
2f9c4     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
2f9c8     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
2f9cc     04 00 90 AD |         if_x1   jmp     #.reset_feature
2f9d0     68 00 90 FD |                 jmp     #.done
2f9d4                 | .reset_feature
2f9d4     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
2f9d8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2f9dc     A0 02 A0 FD |                 call    #control_write
2f9e0     58 00 90 FD |                 jmp     #.done
2f9e4                 | .disconnect
2f9e4                 | 
2f9e4     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
2f9e8     00 70 E3 F8 |                 getbyte htmp
2f9ec     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
2f9f0     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
2f9f4     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
2f9f8     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
2f9fc     00 76 06 A6 |         if_z    mov     kb_led_states, #0
2fa00     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
2fa04                 |         if EMUPAD_MAX_PLAYER > 0
2fa04                 |         end
2fa04                 |         if HAVE_MOUSE
2fa04     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
2fa08     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
2fa0c     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
2fa10                 |         end
2fa10                 |         if HAVE_HIDPAD
2fa10     14 0A F0 FE |                 loc ptrb,#hidpad_report
2fa14     2D 71 03 F6 |                 mov htmp,hdev_port
2fa18     01 70 E7 F2 |                 cmpsub htmp,#1
2fa1c     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
2fa20     B8 F3 03 F1 |                 add ptrb,htmp
2fa24     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
2fa28     80 01 6C FC |                 wrlong #0,ptrb
2fa2c                 |         end
2fa2c                 | 
2fa2c     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
2fa30     00 00 C4 F8 |                 setbyte #0
2fa34     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2fa38     00 00 04 F6 |                 mov     0-0, #0
2fa3c                 | 
2fa3c                 | .done
2fa3c     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
2fa40     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
2fa44     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
2fa48     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
2fa4c     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
2fa50     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
2fa54                 | 
2fa54     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
2fa58     27 EF 03 F6 |                 mov     pb, urx_buff_p
2fa5c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2fa60     55 02 A0 FD |                 call    #control_read
2fa64     00 69 06 FB |                 rdlong  hub_port_status, ptra
2fa68                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
2fa68     2D 00 64 FD |                 ret
2fa6c                 | 
2fa6c                 | '------------------------------------------------------------------------------
2fa6c                 | ' Partially populated SETUP packets
2fa6c                 | '------------------------------------------------------------------------------
2fa6c     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
2fa6d     06          |                 byte    REQ_GET_DESC
2fa6e     00 01       |                 word    TYPE_DEVICE << 8
2fa70     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
2fa72     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2fa74     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
2fa75     06          |                 byte    REQ_GET_DESC
2fa76     00 02       |                 word    TYPE_CONFIG << 8
2fa78     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
2fa7a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2fa7c     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
2fa7d     09          |                 byte    REQ_SET_CONFIG
2fa7e     00 00       |                 word    0       ' Configuration value
2fa80     00 00       |                 word    0       ' Zero
2fa82     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
2fa84     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
2fa85     05          |                 byte    REQ_SET_ADDR
2fa86     00 00       |                 word    0       ' Zero
2fa88     00 00       |                 word    0       ' Zero
2fa8a     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
2fa8c                 | '------------------------------------------------------------------------------
2fa8c                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
2fa8c                 | ' wValue field dictates which protocol should be used.
2fa8c                 | '
2fa8c                 | ' When initialized, all devices default to report protocol. However the host
2fa8c                 | ' should not make any assumptions about the device state and should set the
2fa8c                 | ' desired protocol whenever initializing a device.
2fa8c                 | '------------------------------------------------------------------------------
2fa8c     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
2fa8d     0B          |                 byte    HID_SET_PROTO
2fa8e     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
2fa90                 |                                                 ' (HID 1.11 Section 7.2.6).
2fa90     00 00       |                 word    0               ' Interface index number.
2fa92     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
2fa94                 | '------------------------------------------------------------------------------
2fa94     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
2fa95     0A          |                 byte    HID_SET_IDLE
2fa96     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
2fa98                 |                                         ' reporting until a change is detected in the report data
2fa98                 | 
2fa98                 |                                         ' (HID 1.11 Section 7.2.4).
2fa98     00 00       |                 word    0       ' Interface index number.
2fa9a     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
2fa9c     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
2fa9d     09          |                 byte    HID_SET_REPORT
2fa9e     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
2faa0                 |                                         ' (HID 1.11 Section 7.2.2).
2faa0     00 00       |                 word    0       ' Interface index number.
2faa2     00 00       |                 word    0       ' Size of the report, in bytes.
2faa4     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
2faa5     06          |                 byte    REQ_GET_DESC
2faa6     00 22       |                 word    TYPE_REPORT << 8
2faa8     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
2faaa     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2faac                 | '------------------------------------------------------------------------------
2faac     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
2faad     06          |                 byte    REQ_GET_DESC
2faae     00 29       |                 word    TYPE_HUB << 8
2fab0     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
2fab2     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2fab4     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
2fab5     03          |                 byte    REQ_SET_FEATURE
2fab6     00 00       |                 word    0       ' port power
2fab8     01 00       |                 word    1       ' Port index number (1+)
2faba     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2fabc     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
2fabd     01          |                 byte    REQ_CLEAR_FEATURE
2fabe     00 00       |                 word    0       ' port power
2fac0     01 00       |                 word    1       ' Port index number (1+)
2fac2     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2fac4     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
2fac5     00          |                 byte    REQ_GET_STATUS
2fac6     00 00       |                 word    0
2fac8     01 00       |                 word    1       ' Port index number (1+)
2faca     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
2facc                 | '------------------------------------------------------------------------------
2facc                 | if _HAVE_GAMEPAD
2facc     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
2fad0                 | ps3_command_buff
2fad0     00 00 00 00 
2fad4     00          |                 byte    $00, $00, $00, $00, $00
2fad5     00 00 00 00 
2fad9     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
2fada     FF 27 10 00 
2fade     32          |                 byte    $FF, $27, $10, $00, $32
2fadf     FF 27 10 00 
2fae3     32          |                 byte    $FF, $27, $10, $00, $32
2fae4     FF 27 10 00 
2fae8     32          |                 byte    $FF, $27, $10, $00, $32
2fae9     FF 27 10 00 
2faed     32          |                 byte    $FF, $27, $10, $00, $32
2faee     00 00 00 00 
2faf2     00          |                 byte    $00, $00, $00, $00, $00
2faf3     00 00 00 00 
2faf7     00          |                 byte    $00, $00, $00, $00, $00
2faf8     00 00 00 00 
2fafc     00          |                 byte    $00, $00, $00, $00, $00
2fafd     00 00 00    |                 byte    $00, $00, $00
2fb00                 | '------------------------------------------------------------------------------
2fb00     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
2fb03                 |                                         ' 0x01 All blinking
2fb03                 |                                         ' 0x02 1 flashes, then on
2fb03                 |                                         ' 0x03 2 flashes, then on
2fb03                 |                                         ' 0x04 3 flashes, then on
2fb03                 |                                         ' 0x05 4 flashes, then on
2fb03                 |                                         ' 0x06 1 on
2fb03                 |                                         ' 0x07 2 on
2fb03                 |                                         ' 0x08 3 on
2fb03                 |                                         ' 0x09 4 on
2fb03                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
2fb03                 |                                         ' 0x0B Blinking*
2fb03                 |                                         ' 0x0C Slow blinking*
2fb03                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
2fb03     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
2fb06     00          |                 byte    $00             ' Left rumble
2fb07     00          |                 byte    $00             ' Right rumble
2fb08     00 00 00    |                 byte    $00, $00, $00
2fb0b     00          | end
2fb0c                 | alignl
2fb0c                 | 
2fb0c                 | if HAVE_MOUSE
2fb0c     00 00 00 00 
2fb10     00 00 00 00 | mouse_limits long 0[2]
2fb14     00 00 00 00 | mouse_outptr long 0
2fb18                 | end
2fb18                 | 
2fb18                 | if KEYQUEUE_SIZE > 0
2fb18     00          | keyq_head byte 0
2fb19     00          | keyq_tail byte 0
2fb1a     00 00 00 00 
      ...             
2fd16     00 00 00 00 
2fd1a     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
2fd1c                 | alignl
2fd1c                 | end
2fd1c                 | 
2fd1c                 | if EMUPAD_MAX_PLAYER > 0
2fd1c                 | emupad_rule_buffer
2fd1c                 | if EMUPAD_BUILTIN_RULES
2fd1c                 | file "padmap_builtin.dat"
2fd1c                 | end
2fd1c                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
2fd1c                 | '' Default rule directly follows!
2fd1c                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
2fd1c                 | end
2fd1c                 | 
2fd1c                 | '------------------------------------------------------------------------------
2fd1c                 | ' The USB data cache area gets zero-filled at every device disconnect
2fd1c                 | '------------------------------------------------------------------------------
2fd1c                 | usb_cache_start
2fd1c                 | 
2fd1c                 | ' HID descriptor and report buffers
2fd1c                 | if !!OVERLAP_MEMORY
2fd1c     00 00 00 00 
      ...             
30414     00 00 00 00 
30418     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
3041c                 | end
3041c     00 00 00 00 
30420     00 00 00 00 | hkbd_report     byte    0[8]
30424     00 00 00 00 | hkbd_led_rep    byte    0
30428                 | alignl
30428                 | 
30428                 | if HAVE_HIDPAD
30428     00 00 00 00 
      ...             
304e4     00 00 00 00 
304e8     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
304ec                 | end
304ec                 | 
304ec                 | ' HUB descriptor
304ec     00          | hub_descr       byte    0   ' bDescLength
304ed     00          |                 byte    0   ' bDescriptorType
304ee     00          |                 byte    0   ' bNbrPorts
304ef     00 00       |                 word    0   ' wHubCharacteristics
304f1     00          |                 byte    0   ' bPwrOn2PwrGood
304f2     00          |                 byte    0   ' bHubContrCurrent
304f3     00          |                 byte    0   ' DeviceRemoveable
304f4     00          |                 byte    0   ' PortPwrCtrlMask
304f5                 | 
304f5                 | usb_cache_end
304f5                 | 
304f5                 | if HAVE_MOUSE
304f5     00 00 00 00 | mouse_xacc      long 0
304f9     00 00 00 00 | mouse_yacc      long 0
304fd     00 00 00 00 | mouse_zacc      long 0
30501     00          | mouse_bstate    byte 0
30502     00          | mouse_lpending  byte 0
30503     00          | mouse_rpending  byte 0
30504     00          | mouse_mpending  byte 0
30505     00          | mouse_lock      byte 0
30506     00 00 00    |                 byte 0[3] ' padding
30509                 | end
30509                 | 
30509     00 00 00 00 
      ...             
30581     00 00 00 00 
30585     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
30589     00 00 00 00 
3058d     00 00 00 00 
30591     00 00 00 00 
30595     00 00 00 00 
30599     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
3059b     00 00 00 00 
      ...             
30693     00 00 00 00 
30697     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
3069b                 | 
3069b     00          | driver_cog      byte    0                       ' Current driver cog + 1
3069c                 | 	alignl
3069c                 | _Audio093b_8_sc_spin2_dat_
3069c                 | 
3069c                 | audio       org     0
3069c                 | 
3069c     61 85 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
306a0     61 C3 05 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
306a4     61 CF 05 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
306a8                 | 
306a8     01 EC 63 FD |             cogid   pa                   ' compute cogid
306ac     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
306b0     F6 85 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
306b4     C2 82 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
306b8                 | 
306b8     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
306bc     0E CA 05 FC |             wrpin   dac,#left            ' Noise dither DACs at clk/100
306c0     0E BE 1C FC |             wxpin   #95,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
306c4     0F CA 05 FC |             wrpin   dac,#right
306c8     0F BE 1C FC |             wxpin   #95,#right    
306cc     41 9C 64 FD |             dirh    #left addpins 1
306d0     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
306d4     A9 E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
306d8     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
306dc                 |             
306dc                 | '---------------------------------------------------------------------------------        
306dc                 | '----------------- The main loop -------------------------------------------------
306dc                 | '---------------------------------------------------------------------------------
306dc                 | 
306dc     B2 66 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
306e0     10 00 90 CD |       if_c  jmp     #loop1
306e4                 |   
306e4     09 A8 05 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
306e8     B2 A8 8D F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
306ec     B1 00 80 F1 |             sub     0-0,a40000000
306f0     FD A9 6D FB |             djnz    cn,#p402
306f4                 |     
306f4     00 A8 05 F6 | loop1       mov     cn,#0               ' Find the channel to compute
306f8     B4 AA 01 F6 |             mov     ct,time1            ' with the lowest next sample time
306fc     B5 AA 39 F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
30700     01 A8 05 C6 |     if_c    mov     cn,#1
30704     B6 AA 39 F3 |             fle     ct,time3 wcz
30708     02 A8 05 C6 |     if_c    mov     cn,#2     
3070c     B7 AA 39 F3 |             fle     ct,time4 wcz
30710     03 A8 05 C6 |     if_c    mov     cn,#3
30714     B8 AA 39 F3 |             fle     ct,time5 wcz
30718     04 A8 05 C6 |     if_c    mov     cn,#4
3071c     B9 AA 39 F3 |             fle     ct,time6 wcz
30720     05 A8 05 C6 |     if_c    mov     cn,#5
30724     BA AA 39 F3 |             fle     ct,time7 wcz
30728     06 A8 05 C6 |     if_c    mov     cn,#6
3072c     BB AA 39 F3 |             fle     ct,time8 wcz
30730     07 A8 05 C6 |     if_c    mov     cn,#7
30734                 | 
30734                 | 
30734                 | '----------------------------------------------------------------------------------
30734                 | '------------- Compute channel samples --------------------------------------------
30734                 | '----------------------------------------------------------------------------------
30734                 | 
30734                 | 
30734     D4 78 01 F6 | p401        mov     channeladd,cn             ' compute the pointer to channel parameters block
30738     05 78 65 F0 |             shl     channeladd,#5
3073c     BC F0 03 F1 |             add     ptra,channeladd
30740                 | 
30740     28 0E 64 FD |             setq    #7                        ' read parameters
30744     00 8F 05 FB |             rdlong  pointer0,ptra
30748                 | '            testb   command0,#29 wz
30748                 | '    if_nz   jmp     #p408
30748                 | '    	    getword envptr,command0,#0
30748                 | '    	    getbyte envspeed,command0,#2
30748                 | '    	    jmp     #p404                     'if envelope then no sample rate
30748                 |     	    
30748     1F 9C 0D F4 | p408        testb   command0,#31 wz	      ' bit #31 command - set the DAC sample rate
3074c     18 00 90 5D |     if_nz   jmp     #p404                     ' if not set, proceed
30750     CE 7C 31 F9 |             getword qq,command0,#0            ' get the new rate
30754     4E 7C 15 FC |             wxpin   qq,#left addpins 1        ' and program the pins
30758     BE 7C E1 F8 |             getbyte qq,qq,#0 		      ' check if the rate is n*256
3075c     00 7C 0D F2 |             cmp     qq,#0 wz                         
30760     4E CC 05 AC |     if_z    wrpin   dac2,#left addpins 1      ' if yes, set PWM DAC mode
30764     4E CA 05 5C |     if_nz   wrpin   dac,#left addpins 1       ' else set noise DAC mode
30768                 |             
30768     1E 9C 1D F4 | p404        bitl    command0,#30 wcz             ' bit #30: select PSRAM/HUB
3076c     C2 82 01 56 |     if_nz   mov     mailbox,mailbox2             ' if not set, use PSRAM
30770     00 82 05 A6 |     if_z    mov     mailbox,#0                   ' if set, use HUB : TODO: this can be done at a channel level!
30774                 | 
30774                 | 
30774     C8 AE 31 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
30778     C8 B0 39 F9 |             getword oldrs,sample0,#1
3077c     CC A4 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
30780     CC A2 31 F9 |     	    getword avol0,volpan0,#0
30784     CD A0 39 F9 |             getword askip0,freqskip0,#1    	    
30788     CD 9E 31 F9 |             getword afreq0,freqskip0,#0
3078c                 | 
3078c     B4 A8 95 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
30790     00 AC 01 F6 |             mov     dt0,0-0    
30794     B3 AC 81 F1 |             sub     dt0,time0
30798                 |             
30798     B4 A8 8D F9 |             altd    cn, #time1                ' add channel period to channel time
3079c     CF 00 00 F1 |             add     0-0,afreq0  	
307a0                 | 
307a0     D0 8E 01 F1 |             add     pointer0,askip0           ' compute the pointer to the next sample       
307a4     C7 EA C1 F8 |             setbyte pointer00,pointer0,#0
307a8     08 8E 45 F0 |             shr     pointer0,#8
307ac                 |          
307ac     1F 92 0D F4 |             testb   sstart0,#31 wz            
307b0     01 8E 65 A0 |     if_z    shl     pointer0,#1        
307b4     1C 92 0D F4 |             testb   sstart0,#28 wz            
307b8     01 8E 65 A0 |     if_z    shl     pointer0,#1        
307bc                 |             
307bc     CB 8E 19 F2 |             cmp     pointer0,lend0 wcz
307c0     CB 8E 81 31 |     if_ge   sub     pointer0,lend0	      ' and loop if needed     
307c4     CA 8E 01 31 |     if_ge   add     pointer0,lstart0       
307c8                 |             
307c8     C7 7C 01 F6 |             mov     qq,pointer0               ' compute place in the memory from where the sample will be loaded
307cc     C9 7C 01 F1 |             add     qq,sstart0            
307d0                 | 
307d0                 | 
307d0                 | 
307d0     FF 83 5D F2 |             cmps    mailbox,#$1FF wcz            ' the mailbox has to point somewhere not at the start of HUB RAM
307d4     BE 7E E1 EA |     if_le   rdword  spl,qq                     ' if not, use HUB RAM for samples
307d8     04 01 B0 1D |     if_gt   call    #cache_read
307dc                 |          
307dc                 |          
307dc                 |  
307dc                 |          
307dc     1F 92 0D F4 |             testb   sstart0,#31 wz 
307e0     08 7E 65 50 |     if_nz   shl     spl,#8
307e4     08 8E 65 50 |     if_nz   shl     pointer0,#8
307e8     07 8E 65 A0 |     if_z    shl     pointer0,#7
307ec     1C 92 0D F4 |             testb   sstart0,#28 wz            
307f0     01 8E 45 A0 |     if_z    shr     pointer0,#1    
307f4     F5 8E C1 F8 | 	    setbyte pointer0,pointer00,#0       
307f8                 |     
307f8                 | 
307f8     D1 7E 31 FA | p406        scas    spl,avol0                 ' apply volume
307fc     00 7E 01 F6 |             mov     spl,0-0
30800                 |  
30800     D2 7E 31 FA |             scas    spl,apan0                 ' apply pan
30804     00 B2 01 F6 |             mov     ls0,0-0
30808     20 00 00 FF 
3080c     00 7C 05 F6 |             mov     qq,##16384
30810     D2 7C 81 F1 |             sub     qq,apan0
30814     BE 7E 31 FA |             scas    spl,qq
30818     00 B4 01 F6 |             mov     rs0, 0-0
3081c                 | 
3081c     D8 B8 81 F1 |             sub     rs,oldrs 		      ' replace the old sample with the new one in the mix
30820     DA B8 01 F1 |             add     rs,rs0
30824     D7 B6 81 F1 |             sub     ls,oldls
30828     D9 B6 01 F1 |             add     ls,ls0
3082c                 |    
3082c     DA 90 29 F9 |             setword sample0,rs0,#1           ' pack samples into long
30830     D9 90 21 F9 |             setword sample0,ls0,#0
30834                 |             
30834     1E 92 1D F4 |             bitl    sstart0, #30 wcz          ' if bit #30 of start pointer is set, the current pointer needs resetting  
30838     00 8E 05 A6 |     if_z    mov     pointer0, #0  
3083c     02 93 65 AC |     if_z    wrlong  sstart0, ptra[2]          ' reset bit #30 in hub
30840     1D 92 1D F4 |             bitl    sstart0, #29 wcz	      ' if bit #29 is set, synchronize stereo at channels 1 and 2
30844     04 00 00 AF 
30848     00 68 05 A1 |     if_z    add     time1,##2048
3084c     B4 6A 01 A6 |     if_z    mov     time2,time1
30850     02 93 65 AC |     if_z    wrlong  sstart0,ptra[2]
30854                 |             
30854     28 02 64 FD | p403        setq #1                          ' write new pointer and sample value to the hub
30858     00 8F 65 FC |             wrlong  pointer0,ptra
3085c     BC F0 83 F1 |             sub     ptra, channeladd         ' reset the pointer to channel parameters
30860                 |                       
30860     B3 A6 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
30864     FF 7B 25 A7 |     if_z    decmod  front, #511          
30868                 |          
30868     DB AE 31 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
3086c     DC B0 31 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
30870     0F AE E5 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
30874     0F B0 E5 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
30878                 | 	    
30878                 | 		    
30878     D7 B0 29 F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
3087c     DE BA 01 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
30880     D8 BC 01 F6 |             mov     newsample, oldrs       
30884                 | 
30884     B3 A6 01 F6 |             mov     oldt0,time0              ' update global time
30888     D6 66 01 F1 |             add     time0,dt0    
3088c                 |                                      
3088c     00 AC 0D F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
30890     60 FE 9F AD |     if_z    jmp     #loop1
30894     D6 7C 01 F6 |             mov     qq,dt0
30898                 |   
30898     FF F3 97 F9 | p301        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
3089c     00 7A 9D F2 |             cmpr    front, #0-0 wcz
308a0     F4 FF 9F AD |     if_e    jmp     #p301    
308a4                 | 		
308a4     00 C2 0D F2 | 	    cmp     scbase,#0 wz
308a8     20 00 90 AD |     if_z    jmp #p302	   
308ac                 |  
308ac                 |  
308ac     3F C8 15 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
308b0     E2 C6 01 C6 |     if_c    mov scptr2,scptr
308b4     02 C6 65 C0 |     if_c    shl scptr2,#2
308b8     E1 C6 01 C1 |     if_c    add scptr2,scbase     
308bc     60 C6 65 FC |             wrlong scptr2,#$60
308c0     E3 BA 61 CC |     if_c    wrlong oldsample,scptr2
308c4     01 00 00 CF 
308c8     7F C4 05 C7 |     if_c    incmod scptr,##639
308cc                 | 			    
308cc     BD BA 31 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
308d0     00 00 00 FF 
308d4     FF 7B 05 F7 |             incmod  front, ##511
308d8     EF 7D 6D FB |             djnz    qq,#p301
308dc                 |             
308dc     FC FD 9F FD |             jmp     #loop            'loop
308e0                 | 
308e0                 | '----------------------------------------------------------------------------------
308e0                 | '------------- This is the end of the main loop -----------------------------------
308e0                 | '----------------------------------------------------------------------------------
308e0                 | 
308e0                 | '----------------------------------------------------------------------------------
308e0                 | '------------- PSRAM cache ----------- --------------------------------------------
308e0                 | '----------------------------------------------------------------------------------
308e0                 | 
308e0                 | ' There are 8 cache pointers for 8 channels
308e0                 | ' if 24 higher bits of address=cache, then ger a word from the cache
308e0                 | ' else load the cache from PSRAM, update the pointer, then read a sample
308e0                 | 
308e0                 | 
308e0     BE E6 E1 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
308e4                 |             
308e4     BE E8 01 F6 | 	    mov     addrhi,qq		
308e8     08 E8 45 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
308ec     E8 A8 95 F9 | 	    alts    cn,#cache1            
308f0     00 E8 09 F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
308f4     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
308f8                 | 	
308f8     E8 A8 8D F9 | p702	    altd    cn,#cache1			' cache miss. 
308fc     F4 00 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
30900     F4 E0 01 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
30904     08 E0 65 F0 | 	    shl     cmd,#8
30908     0B E0 3D F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
3090c     D4 E2 01 F6 |             mov     hubaddr,cn                  ' to the channel cache
30910     08 E2 65 F0 |             shl     hubaddr,#8                  '
30914     E7 E2 01 F1 |             add     hubaddr,hubptr 
30918     00 E5 05 F6 |             mov     count,#256                  ' 256 bytes
3091c     28 04 64 FD |             setq    #2                          ' write 3 longs
30920     C1 E0 61 FC |             wrlong  cmd, mailbox                ' run it
30924     C1 E0 01 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
30928     FE E1 B5 FB |             tjs     cmd, #poll1                 ' retry until valid 
3092c                 |             
3092c                 | 	
3092c     D4 7C 01 F6 | p701	    mov     qq,cn			' cache hit
30930     08 7C 65 F0 | 	    shl     qq,#8			' compute the cache start
30934     E7 7C 01 F1 | 	    add     qq,hubptr
30938     F3 7C 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
3093c     BE 7E E1 0A |     _ret_   rdword  spl,qq                      ' read a word
30940                 |           
30940                 | 
30940                 | '--------------------------------------------------------------------------
30940                 | '------ Interrupt service -------------------------------------------------
30940                 | '------ Output the sample, get the next one if exists ---------------------
30940                 | '--------------------------------------------------------------------------
30940                 | 
30940     0E 86 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 100 cycles     
30944     0F 88 25 FC |             wypin   rsample,#right       '4
30948     BD F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
3094c     80 8B A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
30950     FF F3 07 57 |     if_ne   incmod  ptrb,#511
30954     C5 88 39 59 |     if_ne   getword rsample,lsnext,#1    '13
30958     C5 86 31 59 |     if_ne   getword lsample,lsnext,#0    '15
3095c                 |     
3095c     F5 FF 3B FB |             reti1                        '17/19 
30960                 |           
30960                 | '---------------------------------------------------------------------------
30960                 | '-------- End of interrupt -------------------------------------------------
30960                 | '---------------------------------------------------------------------------    
30960                 | 
30960                 | 
30960                 | '---------------------------------------------------------------------------
30960                 | '------- Variables ---------------------------------------------------------
30960                 | '---------------------------------------------------------------------------
30960                 | 
30960                 | ' constants
30960                 | 
30960     00 00 00 40 | a40000000   long $40000000
30964     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
30968                 | 
30968                 | ' Time variables
30968                 | 
30968     00 00 00 00 | time0       long 0    ' Global sample computing time
3096c     01 00 00 00 | time1       long 1    ' Local channels time
30970     02 00 00 00 | time2       long 2
30974     03 00 00 00 | time3       long 3
30978     04 00 00 00 | time4       long 4
3097c     05 00 00 00 | time5       long 5
30980     06 00 00 00 | time6       long 6
30984     07 00 00 00 | time7       long 7
30988     08 00 00 00 | time8       long 8
3098c                 | 
3098c     00 00 00 00 | channeladd long 0
30990                 | 
30990     00 00 00 00 | front       long 0
30994                 | 
30994                 | ' temporary variables 
30994     00 00 00 00 | qq          long 0
30998     00 00 00 00 | spl         long 0
3099c     00 00 00 00 | zero        long 0
309a0     00 00 00 00 | mailbox     long 0
309a4     00 00 00 00 | mailbox2 long 0
309a8                 | 
309a8                 | ' Interrupt ISR variables
309a8                 | 
309a8     00 00 00 00 | lsample     long 0
309ac     00 00 00 00 | rsample     long 0
309b0     00 00 00 00 | lsnext      long 0
309b4     00 00 00 00 | rsnext      long 0 
309b8                 | 
309b8                 | ' channel parameter block
309b8                 | 
309b8     00 00 00 00 | pointer0    long 0     
309bc     00 00 00 00 | sample0     long 0
309c0     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
309c4     00 00 00 00 | lstart0     long 0
309c8     00 00 00 00 | lend0       long 0
309cc     00 00 00 00 | volpan0     long 0
309d0     00 00 00 00 | freqskip0   long 0
309d4     00 00 00 00 | command0    long 0
309d8                 | 
309d8     00 00 00 00 | afreq0      long 0
309dc     00 00 00 00 | askip0      long 0
309e0     00 00 00 00 | avol0       long 0
309e4     00 00 00 00 | apan0       long 0
309e8                 | 
309e8     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
309ec     00 00 00 00 | cn          long 0
309f0     00 00 00 00 | ct          long 0
309f4     00 00 00 00 | dt0         long 0
309f8                 | 
309f8                 | ' Samples
309f8     00 00 00 00 | oldls       long 0
309fc     00 00 00 00 | oldrs       long 0
30a00                 | 
30a00     00 00 00 00 | ls0         long 0
30a04     00 00 00 00 | rs0         long 0
30a08                 | 
30a08     00 00 00 00 | ls          long 0    
30a0c     00 00 00 00 | rs          long 0
30a10                 | 
30a10     00 00 00 00 | oldsample   long 0
30a14     00 00 00 00 | newsample   long 0
30a18                 | 
30a18     00 00 00 00 | nrsample    long 0
30a1c     00 00 00 00 | nlsample    long 0
30a20                 | 
30a20     00 00 00 00 | scbase long 0
30a24     00 00 00 00 | scptr long 0
30a28     00 00 00 00 | scptr2 long 0
30a2c     00 00 00 00 | scope long 0
30a30                 | 
30a30     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
30a34     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
30a38                 | 
30a38     00 18 07 00 | hubptr      long $71800
30a3c     00 00 00 00 | cache1      long 0
30a40     00 00 00 00 | cache2      long 0
30a44     00 00 00 00 | cache3      long 0
30a48     00 00 00 00 | cache4      long 0
30a4c     00 00 00 00 | cache5      long 0
30a50     00 00 00 00 | cache6      long 0
30a54     00 00 00 00 | cache7      long 0
30a58     00 00 00 00 | cache8      long 0
30a5c                 | 
30a5c                 | 
30a5c     00 00 00 00 | cmd         long 0
30a60     00 00 00 00 | hubaddr     long 0
30a64     00 01 00 00 | count       long 256
30a68     00 00 00 00 | addrlo long 0
30a6c     00 00 00 00 | addrhi long 0
30a70     00 00 00 00 | pointer00 long 0
30a74     00 00 00 00 
30a78     00 00 00 00 | null  			long 	0,0           ' for channel reset
30a7c                 | 	alignl
30a7c                 | __system__dat_
30a7c     00 00 00 00 
30a80     00 00 00 00 | 	byte	$00[8]
30a84     03 00 00 00 
30a88     00 00 00 00 
30a8c     00 00 00 00 
30a90     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30a94     00 00 00 00 
      ...             
30d20     00 00 00 00 
30d24     00 00 00 00 | 	byte	$00[660]
30d28     00 00 50 06 | 	long	(101 {__system____root_opendir})<<20
30d2c     00 00 60 06 | 	long	(102 {__system____root_closedir})<<20
30d30     00 00 70 06 | 	long	(103 {__system____root_readdir})<<20
30d34     00 00 80 06 | 	long	(104 {__system____root_stat})<<20
30d38     00 00 00 00 
30d3c     00 00 00 00 
30d40     00 00 00 00 
30d44     00 00 00 00 
30d48     00 00 00 00 
30d4c     00 00 00 00 
30d50     00 00 00 00 | 	byte	$00[28]
30d54     BC 0D 03 00 | 	long	@@@__system__dat_ + 832
30d58     BF 0D 03 00 | 	long	@@@__system__dat_ + 835
30d5c     E0 0D 03 00 | 	long	@@@__system__dat_ + 868
30d60     F9 0D 03 00 | 	long	@@@__system__dat_ + 893
30d64     14 0E 03 00 | 	long	@@@__system__dat_ + 920
30d68     2E 0E 03 00 | 	long	@@@__system__dat_ + 946
30d6c     3E 0E 03 00 | 	long	@@@__system__dat_ + 962
30d70     50 0E 03 00 | 	long	@@@__system__dat_ + 980
30d74     62 0E 03 00 | 	long	@@@__system__dat_ + 998
30d78     74 0E 03 00 | 	long	@@@__system__dat_ + 1016
30d7c     80 0E 03 00 | 	long	@@@__system__dat_ + 1028
30d80     91 0E 03 00 | 	long	@@@__system__dat_ + 1045
30d84     A5 0E 03 00 | 	long	@@@__system__dat_ + 1065
30d88     AF 0E 03 00 | 	long	@@@__system__dat_ + 1075
30d8c     BF 0E 03 00 | 	long	@@@__system__dat_ + 1091
30d90     CE 0E 03 00 | 	long	@@@__system__dat_ + 1106
30d94     E4 0E 03 00 | 	long	@@@__system__dat_ + 1128
30d98     FD 0E 03 00 | 	long	@@@__system__dat_ + 1153
30d9c     11 0F 03 00 | 	long	@@@__system__dat_ + 1173
30da0     1F 0F 03 00 | 	long	@@@__system__dat_ + 1187
30da4     33 0F 03 00 | 	long	@@@__system__dat_ + 1207
30da8     3F 0F 03 00 | 	long	@@@__system__dat_ + 1219
30dac     51 0F 03 00 | 	long	@@@__system__dat_ + 1237
30db0     69 0F 03 00 | 	long	@@@__system__dat_ + 1261
30db4     7B 0F 03 00 | 	long	@@@__system__dat_ + 1279
30db8     8E 0F 03 00 | 	long	@@@__system__dat_ + 1298
30dbc     4F 4B 00 4E 
30dc0     75 6D 65 72 
30dc4     69 63 61 6C 
30dc8     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
30dcc     75 6D 65 6E 
30dd0     74 20 6F 75 
30dd4     74 20 6F 66 
30dd8     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
30ddc     61 69 6E 00 
30de0     52 65 73 75 
30de4     6C 74 20 6E 
30de8     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
30dec     65 70 72 65 
30df0     73 65 6E 74 
30df4     61 62 6C 65 
30df8     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
30dfc     65 67 61 6C 
30e00     20 6D 75 6C 
30e04     74 69 62 79 
30e08     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
30e0c     65 71 75 65 
30e10     6E 63 65 00 
30e14     4E 6F 20 73 
30e18     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
30e1c     66 69 6C 65 
30e20     20 6F 72 20 
30e24     64 69 72 65 
30e28     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
30e2c     79 00 42 61 
30e30     64 20 66 69 
30e34     6C 65 20 6E 
30e38     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
30e3c     72 00 50 65 
30e40     72 6D 69 73 
30e44     73 69 6F 6E 
30e48     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
30e4c     69 65 64 00 
30e50     4E 6F 74 20 
30e54     65 6E 6F 75 
30e58     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
30e5c     65 6D 6F 72 
30e60     79 00 54 65 
30e64     6D 70 6F 72 
30e68     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
30e6c     66 61 69 6C 
30e70     75 72 65 00 
30e74     46 69 6C 65 
30e78     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
30e7c     73 74 73 00 
30e80     49 6E 76 61 
30e84     6C 69 64 20 
30e88     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
30e8c     6D 65 6E 74 
30e90     00 54 6F 6F 
30e94     20 6D 61 6E 
30e98     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
30e9c     65 6E 20 66 
30ea0     69 6C 65 73 
30ea4     00 49 2F 4F 
30ea8     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
30eac     6F 72 00 4E 
30eb0     6F 74 20 61 
30eb4     20 64 69 72 
30eb8     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
30ebc     72 79 00 49 
30ec0     73 20 61 20 
30ec4     64 69 72 65 
30ec8     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
30ecc     79 00 52 65 
30ed0     61 64 20 6F 
30ed4     6E 6C 79 20 
30ed8     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
30edc     20 73 79 73 
30ee0     74 65 6D 00 
30ee4     46 75 6E 63 
30ee8     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
30eec     20 6E 6F 74 
30ef0     20 69 6D 70 
30ef4     6C 65 6D 65 
30ef8     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
30efc     00 44 69 72 
30f00     65 63 74 6F 
30f04     72 79 20 6E 
30f08     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
30f0c     6D 70 74 79 
30f10     00 4E 61 6D 
30f14     65 20 74 6F 
30f18     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
30f1c     6E 67 00 44 
30f20     65 76 69 63 
30f24     65 20 6E 6F 
30f28     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
30f2c     65 6B 61 62 
30f30     6C 65 00 42 
30f34     61 64 20 61 
30f38     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
30f3c     73 73 00 42 
30f40     72 6F 6B 65 
30f44     6E 20 63 6F 
30f48     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
30f4c     74 69 6F 6E 
30f50     00 44 65 76 
30f54     69 63 65 20 
30f58     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
30f5c     65 73 6F 75 
30f60     72 63 65 20 
30f64     62 75 73 79 
30f68     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
30f6c     73 73 20 64 
30f70     65 76 69 63 
30f74     65 20 6C 69 
30f78     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
30f7c     6F 20 73 70 
30f80     61 63 65 20 
30f84     6F 6E 20 64 
30f88     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
30f8c     65 00 55 6E 
30f90     6B 6E 6F 77 
30f94     6E 20 65 72 
30f98     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
30f9c     00 00 00 00 
30fa0     00 00 00 00 | 	byte	$00[8]
30fa4     05 00 00 00 
30fa8     00 00 00 00 
30fac     00 00 00 00 
30fb0     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30fb4     00 00 00 00 | 	byte	$00, $00, $00, $00
30fb8     00 00 D0 07 | 	long	(125 {__system___tx})<<20
30fbc     00 00 E0 07 | 	long	(126 {__system___rx})<<20
30fc0     00 00 00 00 | 	byte	$00, $00, $00, $00
30fc4     00 00 F0 07 | 	long	(127 {__system___rxtxioctl_0572})<<20
30fc8     00 00 00 08 | 	long	(128 {__system____dummy_flush_0573})<<20
30fcc     00 00 00 00 
30fd0     00 00 00 00 | 	byte	$00[8]
30fd4     01 00 00 00 
30fd8     06 00 00 00 
30fdc     00 00 00 00 
30fe0     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30fe4     00 00 00 00 
30fe8     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
30fec     00 00 D0 07 | 	long	(125 {__system___tx})<<20
30ff0     00 00 E0 07 | 	long	(126 {__system___rx})<<20
30ff4     00 00 00 00 | 	byte	$00, $00, $00, $00
30ff8     00 00 F0 07 | 	long	(127 {__system___rxtxioctl_0572})<<20
30ffc     00 00 00 08 | 	long	(128 {__system____dummy_flush_0573})<<20
31000     00 00 00 00 
31004     00 00 00 00 | 	byte	$00[8]
31008     01 00 00 00 
3100c     06 00 00 00 
31010     00 00 00 00 
31014     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31018     00 00 00 00 
3101c     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
31020     00 00 D0 07 | 	long	(125 {__system___tx})<<20
31024     00 00 E0 07 | 	long	(126 {__system___rx})<<20
31028     00 00 00 00 | 	byte	$00, $00, $00, $00
3102c     00 00 F0 07 | 	long	(127 {__system___rxtxioctl_0572})<<20
31030     00 00 00 08 | 	long	(128 {__system____dummy_flush_0573})<<20
31034     00 00 00 00 
      ...             
311a4     00 00 00 00 
311a8     00 00 00 00 | 	byte	$00[376]
311ac     B0 11 03 00 | 	long	@@@__system__dat_ + 1844
311b0     00 00 00 00 
311b4     00 00 00 00 
311b8     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
311bc                 | 	alignl
311bc                 | _fatfs_cc_dat_
311bc     C7 00 FC 00 
311c0     E9 00 E2 00 
311c4     E4 00 E0 00 
311c8     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
311cc     EA 00 EB 00 
311d0     E8 00 EF 00 
311d4     EE 00 EC 00 
311d8     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
311dc     C9 00 E6 00 
311e0     C6 00 F4 00 
311e4     F6 00 F2 00 
311e8     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
311ec     FF 00 D6 00 
311f0     DC 00 F8 00 
311f4     A3 00 D8 00 
311f8     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
311fc     E1 00 ED 00 
31200     F3 00 FA 00 
31204     F1 00 D1 00 
31208     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
3120c     BF 00 AE 00 
31210     AC 00 BD 00 
31214     BC 00 A1 00 
31218     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
3121c     91 25 92 25 
31220     93 25 02 25 
31224     24 25 C1 00 
31228     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
3122c     A9 00 63 25 
31230     51 25 57 25 
31234     5D 25 A2 00 
31238     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
3123c     14 25 34 25 
31240     2C 25 1C 25 
31244     00 25 3C 25 
31248     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
3124c     5A 25 54 25 
31250     69 25 66 25 
31254     60 25 50 25 
31258     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
3125c     F0 00 D0 00 
31260     CA 00 CB 00 
31264     C8 00 31 01 
31268     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
3126c     CF 00 18 25 
31270     0C 25 88 25 
31274     84 25 A6 00 
31278     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
3127c     D3 00 DF 00 
31280     D4 00 D2 00 
31284     F5 00 D5 00 
31288     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
3128c     DE 00 DA 00 
31290     DB 00 D9 00 
31294     FD 00 DD 00 
31298     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
3129c     AD 00 B1 00 
312a0     17 20 BE 00 
312a4     B6 00 A7 00 
312a8     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
312ac     B0 00 A8 00 
312b0     B7 00 B9 00 
312b4     B3 00 B2 00 
312b8     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
312bc     61 00 1A 03 
312c0     E0 00 17 03 
312c4     F8 00 07 03 
312c8     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
312cc     78 01 00 01 
312d0     30 01 32 01 
312d4     06 01 39 01 
312d8     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
312dc     2E 01 79 01 
312e0     06 01 80 01 
312e4     4D 00 43 02 
312e8     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
312ec     82 01 84 01 
312f0     84 01 86 01 
312f4     87 01 87 01 
312f8     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
312fc     8B 01 8B 01 
31300     8D 01 8E 01 
31304     8F 01 90 01 
31308     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
3130c     93 01 94 01 
31310     F6 01 96 01 
31314     97 01 98 01 
31318     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
3131c     9B 01 9C 01 
31320     9D 01 20 02 
31324     9F 01 A0 01 
31328     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
3132c     A2 01 A4 01 
31330     A4 01 A6 01 
31334     A7 01 A7 01 
31338     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
3133c     AB 01 AC 01 
31340     AC 01 AE 01 
31344     AF 01 AF 01 
31348     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
3134c     B3 01 B3 01 
31350     B5 01 B5 01 
31354     B7 01 B8 01 
31358     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
3135c     BB 01 BC 01 
31360     BC 01 BE 01 
31364     F7 01 C0 01 
31368     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
3136c     C3 01 C4 01 
31370     C5 01 C4 01 
31374     C7 01 C8 01 
31378     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
3137c     CB 01 CA 01 
31380     CD 01 10 01 
31384     DD 01 01 00 
31388     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
3138c     12 01 F3 01 
31390     03 00 F1 01 
31394     F4 01 F4 01 
31398     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
3139c     22 02 12 01 
313a0     3A 02 09 00 
313a4     65 2C 3B 02 
313a8     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
313ac     66 2C 3F 02 
313b0     40 02 41 02 
313b4     41 02 46 02 
313b8     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
313bc     40 00 81 01 
313c0     86 01 55 02 
313c4     89 01 8A 01 
313c8     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
313cc     5A 02 90 01 
313d0     5C 02 5D 02 
313d4     5E 02 5F 02 
313d8     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
313dc     62 02 94 01 
313e0     64 02 65 02 
313e4     66 02 67 02 
313e8     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
313ec     6A 02 62 2C 
313f0     6C 02 6D 02 
313f4     6E 02 9C 01 
313f8     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
313fc     9D 01 73 02 
31400     74 02 9F 01 
31404     76 02 77 02 
31408     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
3140c     7A 02 7B 02 
31410     7C 02 64 2C 
31414     7E 02 7F 02 
31418     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
3141c     82 02 A9 01 
31420     84 02 85 02 
31424     86 02 87 02 
31428     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
3142c     B1 01 B2 01 
31430     45 02 8D 02 
31434     8E 02 8F 02 
31438     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
3143c     B7 01 7B 03 
31440     03 00 FD 03 
31444     FE 03 FF 03 
31448     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
3144c     86 03 88 03 
31450     89 03 8A 03 
31454     B1 03 11 03 
31458     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
3145c     A3 03 A3 03 
31460     C4 03 08 03 
31464     CC 03 03 00 
31468     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
3146c     8F 03 D8 03 
31470     18 01 F2 03 
31474     0A 00 F9 03 
31478     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
3147c     F5 03 F6 03 
31480     F7 03 F7 03 
31484     F9 03 FA 03 
31488     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
3148c     20 03 50 04 
31490     10 07 60 04 
31494     22 01 8A 04 
31498     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
3149c     0E 01 CF 04 
314a0     01 00 C0 04 
314a4     D0 04 44 01 
314a8     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
314ac     00 00 7D 1D 
314b0     01 00 63 2C 
314b4     00 1E 96 01 
314b8     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
314bc     00 1F 08 06 
314c0     10 1F 06 06 
314c4     20 1F 08 06 
314c8     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
314cc     40 1F 06 06 
314d0     51 1F 07 00 
314d4     59 1F 52 1F 
314d8     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
314dc     5D 1F 56 1F 
314e0     5F 1F 60 1F 
314e4     08 06 70 1F 
314e8     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
314ec     BB 1F C8 1F 
314f0     C9 1F CA 1F 
314f4     CB 1F DA 1F 
314f8     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
314fc     F9 1F EA 1F 
31500     EB 1F FA 1F 
31504     FB 1F 80 1F 
31508     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
3150c     08 06 A0 1F 
31510     08 06 B0 1F 
31514     04 00 B8 1F 
31518     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
3151c     BC 1F CC 1F 
31520     01 00 C3 1F 
31524     D0 1F 02 06 
31528     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
3152c     E5 1F 01 00 
31530     EC 1F F3 1F 
31534     01 00 FC 1F 
31538     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
3153c     32 21 70 21 
31540     10 02 84 21 
31544     01 00 83 21 
31548     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
3154c     30 2C 2F 04 
31550     60 2C 02 01 
31554     67 2C 06 01 
31558     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
3155c     80 2C 64 01 
31560     00 2D 26 08 
31564     41 FF 1A 03 
31568     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
3156c     05 07 09 0E 
31570     10 12 14 16 
31574     18 1C 1E 43 
31578     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
3157c     41 41 43 45 
31580     45 45 49 49 
31584     49 41 41 45 
31588     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
3158c     4F 55 55 59 
31590     4F 55 4F 9C 
31594     4F 9E 9F 41 
31598     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
3159c     A5 A6 A7 A8 
315a0     A9 AA AB AC 
315a4     AD AE AF B0 
315a8     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
315ac     41 41 41 B8 
315b0     B9 BA BB BC 
315b4     BD BE BF C0 
315b8     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
315bc     C5 41 41 C8 
315c0     C9 CA CB CC 
315c4     CD CE CF D1 
315c8     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
315cc     49 49 49 49 
315d0     D9 DA DB DC 
315d4     DD 49 DF 4F 
315d8     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
315dc     4F E6 E8 E8 
315e0     55 55 55 59 
315e4     59 EE EF F0 
315e8     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
315ec     F5 F6 F7 F8 
315f0     F9 FA FB FC 
315f4     FD FE FF 00 
315f8     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
315fc     00 00 00 00 | 	byte	$00, $00, $00, $00
31600     00 00 C0 06 | 	long	(108 {_fatfs_cc_v_close})<<20
31604     00 00 D0 06 | 	long	(109 {_fatfs_cc_v_read})<<20
31608     00 00 E0 06 | 	long	(110 {_fatfs_cc_v_write})<<20
3160c     00 00 F0 06 | 	long	(111 {_fatfs_cc_v_lseek})<<20
31610     00 00 00 07 | 	long	(112 {_fatfs_cc_v_ioctl})<<20
31614     00 00 10 08 | 	long	(129 {_fatfs_cc_v_flush})<<20
31618     00 00 00 00 
3161c     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
31620     00 00 10 07 | 	long	(113 {_fatfs_cc_v_open})<<20
31624     00 00 20 07 | 	long	(114 {_fatfs_cc_v_creat})<<20
31628     00 00 30 07 | 	long	(115 {_fatfs_cc_v_opendir})<<20
3162c     00 00 40 07 | 	long	(116 {_fatfs_cc_v_closedir})<<20
31630     00 00 50 07 | 	long	(117 {_fatfs_cc_v_readdir})<<20
31634     00 00 60 07 | 	long	(118 {_fatfs_cc_v_stat})<<20
31638     00 00 70 07 | 	long	(119 {_fatfs_cc_v_mkdir})<<20
3163c     00 00 80 07 | 	long	(120 {_fatfs_cc_v_rmdir})<<20
31640     00 00 90 07 | 	long	(121 {_fatfs_cc_v_remove})<<20
31644     00 00 A0 07 | 	long	(122 {_fatfs_cc_v_rename})<<20
31648     00 00 B0 07 | 	long	(123 {_fatfs_cc_v_init})<<20
3164c     00 00 C0 07 | 	long	(124 {_fatfs_cc_v_deinit})<<20
31650     FF FF FF FF 
31654     1F 00 00 00 
31658     1C 00 00 00 
3165c     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
31660     1E 00 00 00 
31664     1F 00 00 00 
31668     1E 00 00 00 
3166c     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
31670     1F 00 00 00 
31674     1E 00 00 00 
31678     1F 00 00 00 
3167c     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
31680     1F 00 00 00 
31684     00 00 00 00 
31688     1F 00 00 00 
3168c     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
31690     5A 00 00 00 
31694     78 00 00 00 
31698     97 00 00 00 
3169c     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
316a0     D4 00 00 00 
316a4     F3 00 00 00 
316a8     11 01 00 00 
316ac     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
316b0     4E 01 00 00 
316b4     6D 01 00 00 
316b8     FF FF FF FF 
316bc     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
316c0     00 00 00 00 
      ...             
316d8     00 00 00 00 
316dc     00 00 00 00 | 	byte	$00[32]
316e0     FE 16 03 00 | 	long	@@@_fatfs_cc_dat_ + 1346
316e4     02 17 03 00 | 	long	@@@_fatfs_cc_dat_ + 1350
316e8     00 00 00 00 
316ec     00 00 00 00 
316f0     00 00 00 00 
316f4     00 00 00 00 
316f8     00 00       | 	byte	$00[18]
316fa     3F 3F 3F 00 
316fe     55 43 54 00 
31702     55 43 54 00 
31706     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
3170a     00 00 00 00 
3170e     00 00 00    | 	byte	$00[7]
31711     CA 9A 3B 00 
31715     00 00 00 01 
31719     01 01 01 01 
3171d     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
31721     91 11 11 11 
31725     11 01 01 01 
31729     01 01 01 01 
3172d     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
31731     01 01 01 01 
31735     01 01 01    | 	byte	$01[7]
31738     90 20 20 20 
3173c     20 20 20 20 
31740     20 20 20 20 
31744     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
31748     42 42 42 42 
3174c     42 42 42 42 
31750     42 42       | 	byte	$42[10]
31752     20 20 20 20 
31756     20 20 20    | 	byte	$20[7]
31759     44 44 44 44 
3175d     44 44       | 	byte	$44[6]
3175f     04 04 04 04 
31763     04 04 04 04 
31767     04 04 04 04 
3176b     04 04 04 04 
3176f     04 04 04 04 | 	byte	$04[20]
31773     20 20 20 20 
31777     20 20       | 	byte	$20[6]
31779     48 48 48 48 
3177d     48 48       | 	byte	$48[6]
3177f     08 08 08 08 
31783     08 08 08 08 
31787     08 08 08 08 
3178b     08 08 08 08 
3178f     08 08 08 08 | 	byte	$08[20]
31793     20 20 20 20 
31797     01 00 00 00 
3179b     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
3179c                 | __methodtable__
3179c     E0 3F 01 00 | 	long	@_do_no_command
317a0     90 CF 00 00 | 	long	@_do_plus
317a4     7C D4 00 00 | 	long	@_do_minus
317a8     44 D9 00 00 | 	long	@_do_or
317ac     5C DA 00 00 | 	long	@_do_mul
317b0     E8 DF 00 00 | 	long	@_do_fdiv
317b4     2C D8 00 00 | 	long	@_do_and
317b8     C8 DD 00 00 | 	long	@_do_div
317bc     B0 E1 00 00 | 	long	@_do_mod
317c0     D0 E3 00 00 | 	long	@_do_shl
317c4     E8 E4 00 00 | 	long	@_do_shr
317c8     00 E6 00 00 | 	long	@_do_power
317cc     F0 C9 00 00 | 	long	@_do_getvar
317d0     3C 93 00 00 | 	long	@_do_push
317d4     38 C3 00 00 | 	long	@_do_assign
317d8     88 1C 01 00 | 	long	@_do_cls
317dc     68 BD 00 00 | 	long	@_do_new
317e0     2C 1D 01 00 | 	long	@_do_plot
317e4     64 1E 01 00 | 	long	@_do_draw
317e8     4C 28 01 00 | 	long	@_do_print
317ec     44 21 01 00 | 	long	@_do_circle
317f0     CC 1F 01 00 | 	long	@_do_fcircle
317f4     BC 22 01 00 | 	long	@_do_box
317f8     64 26 01 00 | 	long	@_do_frame
317fc     F4 1C 01 00 | 	long	@_do_color
31800     40 73 00 00 | 	long	@_do_for
31804     6C 75 00 00 | 	long	@_do_next
31808     CC BA 00 00 | 	long	@_do_list
3180c     8C A3 00 00 | 	long	@_do_run
31810     F4 C1 00 00 | 	long	@_do_error
31814     F0 BE 00 00 | 	long	@_do_fast_goto
31818     E0 BF 00 00 | 	long	@_do_find_goto
3181c     F0 C1 00 00 | 	long	@_do_slow_goto
31820     C8 04 01 00 | 	long	@_do_converttoint
31824     80 99 00 00 | 	long	@_test_csave
31828     D4 9C 00 00 | 	long	@_do_save
3182c     C0 9F 00 00 | 	long	@_do_load
31830     18 32 01 00 | 	long	@_do_pinwrite
31834     B8 36 01 00 | 	long	@_do_waitms
31838     F4 37 01 00 | 	long	@_do_waitvbl
3183c     F4 3A 01 00 | 	long	@_do_if
31840     D8 3B 01 00 | 	long	@_do_else
31844     FC 3B 01 00 | 	long	@_do_nothing
31848     C8 E7 00 00 | 	long	@_do_eq
3184c     40 F6 00 00 | 	long	@_do_ge
31850     18 FB 00 00 | 	long	@_do_le
31854     A0 EC 00 00 | 	long	@_do_gt
31858     78 F1 00 00 | 	long	@_do_lt
3185c     F0 FF 00 00 | 	long	@_do_ne
31860     A4 07 01 00 | 	long	@_do_rnd
31864     00 3C 01 00 | 	long	@_do_brun
31868     CC 3E 01 00 | 	long	@_do_beep
3186c     24 38 01 00 | 	long	@_do_dir
31870     14 2D 01 00 | 	long	@_do_paper
31874     9C 2D 01 00 | 	long	@_do_ink
31878     38 2E 01 00 | 	long	@_do_font
3187c     B4 2E 01 00 | 	long	@_do_mode
31880     38 3E 01 00 | 	long	@_do_mouse
31884     20 1C 01 00 | 	long	@_do_gettime
31888     6C 3E 01 00 | 	long	@_do_cursor
3188c     A0 3E 01 00 | 	long	@_do_click
31890     AC 19 01 00 | 	long	@_do_mousex
31894     F0 19 01 00 | 	long	@_do_mousey
31898     78 1A 01 00 | 	long	@_do_mousek
3189c     34 1A 01 00 | 	long	@_do_mousew
318a0     6C 09 01 00 | 	long	@_do_sin
318a4     D8 10 01 00 | 	long	@_do_stick
318a8     5C 12 01 00 | 	long	@_do_strig
318ac     C0 18 01 00 | 	long	@_do_sprite
318b0     30 15 01 00 | 	long	@_do_defsprite
318b4     E0 13 01 00 | 	long	@_do_getpixel
318b8     00 38 01 00 | 	long	@_do_waitclock
318bc     EC 3F 01 00 | 	long	@_do_negative
318c0     BC 1A 01 00 | 	long	@_do_rdpin
318c4     28 1B 01 00 | 	long	@_do_rqpin
318c8     9C 1B 01 00 | 	long	@_do_pinread
318cc     B0 34 01 00 | 	long	@_do_wrpin
318d0     30 35 01 00 | 	long	@_do_wxpin
318d4     B0 35 01 00 | 	long	@_do_wypin
318d8     A0 32 01 00 | 	long	@_do_pinfloat
318dc     E0 32 01 00 | 	long	@_do_pinlo
318e0     20 33 01 00 | 	long	@_do_pinhi
318e4     A0 33 01 00 | 	long	@_do_pinstart
318e8     60 33 01 00 | 	long	@_do_pintoggle
318ec     30 36 01 00 | 	long	@_do_position
318f0     7C 0A 01 00 | 	long	@_do_cos
318f4     A0 0B 01 00 | 	long	@_do_tan
318f8     D0 0E 01 00 | 	long	@_do_atn
318fc     B0 0C 01 00 | 	long	@_do_asin
31900     C0 0D 01 00 | 	long	@_do_acos
31904     E8 0F 01 00 | 	long	@_do_sqr
31908     A4 24 01 00 | 	long	@_do_fill
3190c     48 B1 00 00 | 	long	@_do_defsnd
31910     B0 A6 00 00 | 	long	@_do_defenv
31914     18 73 01 00 | 	long	@_hg010b_spin2_putchar
31918     AC 77 02 00 | 	long	@__struct___bas_wrap_sender_tx
3191c     F0 77 02 00 | 	long	@__struct___bas_wrap_sender_rx
31920     38 78 02 00 | 	long	@__struct___bas_wrap_sender_close
31924     DC 76 02 00 | 	long	@__struct__s_vfs_file_t_putchar
31928     4C 77 02 00 | 	long	@__struct__s_vfs_file_t_getchar
3192c     94 76 02 00 | 	long	@___strs_cl_pfunc
31930     E4 D6 01 00 | 	long	@__system____root_opendir
31934     80 D7 01 00 | 	long	@__system____root_closedir
31938     FC D6 01 00 | 	long	@__system____root_readdir
3193c     88 D7 01 00 | 	long	@__system____root_stat
31940     10 D0 01 00 | 	long	@__system____default_putc
31944     94 CF 01 00 | 	long	@__system____default_getc
31948     B8 D0 01 00 | 	long	@__system____default_flush
3194c     A4 61 02 00 | 	long	@_fatfs_cc_v_close
31950     C0 65 02 00 | 	long	@_fatfs_cc_v_read
31954     D4 66 02 00 | 	long	@_fatfs_cc_v_write
31958     B4 67 02 00 | 	long	@_fatfs_cc_v_lseek
3195c     3C 68 02 00 | 	long	@_fatfs_cc_v_ioctl
31960     90 68 02 00 | 	long	@_fatfs_cc_v_open
31964     08 61 02 00 | 	long	@_fatfs_cc_v_creat
31968     E8 61 02 00 | 	long	@_fatfs_cc_v_opendir
3196c     5C 62 02 00 | 	long	@_fatfs_cc_v_closedir
31970     9C 62 02 00 | 	long	@_fatfs_cc_v_readdir
31974     D0 63 02 00 | 	long	@_fatfs_cc_v_stat
31978     50 68 02 00 | 	long	@_fatfs_cc_v_mkdir
3197c     70 68 02 00 | 	long	@_fatfs_cc_v_rmdir
31980     60 68 02 00 | 	long	@_fatfs_cc_v_remove
31984     80 68 02 00 | 	long	@_fatfs_cc_v_rename
31988     A0 69 02 00 | 	long	@_fatfs_cc_v_init
3198c     A8 69 02 00 | 	long	@_fatfs_cc_v_deinit
31990     54 86 01 00 | 	long	@__system___tx
31994     94 86 01 00 | 	long	@__system___rx
31998     0C E2 01 00 | 	long	@__system___rxtxioctl_0572
3199c     64 E2 01 00 | 	long	@__system____dummy_flush_0573
319a0     70 69 02 00 | 	long	@_fatfs_cc_v_flush
319a4                 | __heap_base
319a4     00 00 00 00 
      ...             
607a4     00 00 00 00 
607a8     00 00 00 00 | 	long	0[48002]
607ac                 | objmem
607ac     00 00 00 00 
      ...             
6fc74     00 00 00 00 
6fc78     00 00 00 00 | 	long	0[15668]
6fc7c                 | stackspace
6fc7c     00 00 00 00 | 	long	0[1]
6fc80 100             | 	org	COG_BSS_START
6fc80 100             | _var01
6fc80 100             | 	res	1
6fc80 101             | _var02
6fc80 101             | 	res	1
6fc80 102             | _var03
6fc80 102             | 	res	1
6fc80 103             | _var04
6fc80 103             | 	res	1
6fc80 104             | _var05
6fc80 104             | 	res	1
6fc80 105             | _var06
6fc80 105             | 	res	1
6fc80 106             | _var07
6fc80 106             | 	res	1
6fc80 107             | _var08
6fc80 107             | 	res	1
6fc80 108             | _var09
6fc80 108             | 	res	1
6fc80 109             | arg01
6fc80 109             | 	res	1
6fc80 10a             | arg02
6fc80 10a             | 	res	1
6fc80 10b             | arg03
6fc80 10b             | 	res	1
6fc80 10c             | arg04
6fc80 10c             | 	res	1
6fc80 10d             | arg05
6fc80 10d             | 	res	1
6fc80 10e             | arg06
6fc80 10e             | 	res	1
6fc80 10f             | local01
6fc80 10f             | 	res	1
6fc80 110             | local02
6fc80 110             | 	res	1
6fc80 111             | local03
6fc80 111             | 	res	1
6fc80 112             | local04
6fc80 112             | 	res	1
6fc80 113             | local05
6fc80 113             | 	res	1
6fc80 114             | local06
6fc80 114             | 	res	1
6fc80 115             | local07
6fc80 115             | 	res	1
6fc80 116             | local08
6fc80 116             | 	res	1
6fc80 117             | local09
6fc80 117             | 	res	1
6fc80 118             | local10
6fc80 118             | 	res	1
6fc80 119             | local11
6fc80 119             | 	res	1
6fc80 11a             | local12
6fc80 11a             | 	res	1
6fc80 11b             | local13
6fc80 11b             | 	res	1
6fc80 11c             | local14
6fc80 11c             | 	res	1
6fc80 11d             | local15
6fc80 11d             | 	res	1
6fc80 11e             | local16
6fc80 11e             | 	res	1
6fc80 11f             | local17
6fc80 11f             | 	res	1
6fc80 120             | local18
6fc80 120             | 	res	1
6fc80 121             | local19
6fc80 121             | 	res	1
6fc80 122             | local20
6fc80 122             | 	res	1
6fc80 123             | local21
6fc80 123             | 	res	1
6fc80 124             | local22
6fc80 124             | 	res	1
6fc80 125             | local23
6fc80 125             | 	res	1
6fc80 126             | local24
6fc80 126             | 	res	1
6fc80 127             | local25
6fc80 127             | 	res	1
6fc80 128             | local26
6fc80 128             | 	res	1
6fc80 129             | local27
6fc80 129             | 	res	1
6fc80 12a             | local28
6fc80 12a             | 	res	1
6fc80 12b             | local29
6fc80 12b             | 	res	1
6fc80 12c             | local30
6fc80 12c             | 	res	1
6fc80 12d             | local31
6fc80 12d             | 	res	1
6fc80 12e             | local32
6fc80 12e             | 	res	1
6fc80 12f             | local33
6fc80 12f             | 	res	1
6fc80 130             | muldiva_
6fc80 130             | 	res	1
6fc80 131             | muldivb_
6fc80 131             | 	res	1
6fc80 132             | 	fit	480
6fc80 132             | 
