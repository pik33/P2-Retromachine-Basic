00000                 | 
00000                 | #line 1 "D:/programowanie/P2-Retromachine-Basic/basic024.p2asm"
00000                 | con
00000                 | 	_clkfreq = 337000000
00000                 | 	_clkmode = 21844219
00000                 | 	HEAPSIZE = 192000
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	ver = 24
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getivar = 17
00000                 | 	fun_getuvar = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1023
00000                 | 	maxstack = 512
00000                 | 	maxfor = 128
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 337000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $14d50fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 A8 A6 80 FF 
00420 007 00 F0 65 FD | 	hubset	##21844216
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a A8 A6 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##21844219
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 1B 0B 8A FF 
00440 00f 14 80 6C FC | 	wrlong	##337000000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 48 5A A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 1F 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 1F 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 33 67 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 32 65 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 33 65 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 66 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 64 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 32 65 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 33 67 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec 08 23 03 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed F4 20 03 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 10 11 06 00 | 	long	@objmem
007d0 0f3             | ptr__Audio093b_8_sc_spin2_dat__
007d0 0f3 F4 0F 03 00 | 	long	@_Audio093b_8_sc_spin2_dat_
007d4 0f4             | ptr___system__dat__
007d4 0f4 D4 13 03 00 | 	long	@__system__dat_
007d8 0f5             | ptr__dat__
007d8 0f5 30 8D 02 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 14 1B 03 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 68 AE 02 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 04 08 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 18 D6 02 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa D0 D3 02 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb A8 E5 02 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc F0 05 07 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' 
00804                 | ' 
00804                 | ' '----------------------------------- this is the end of the main loop ------------------------------------------------------------------
00804                 | ' 
00804                 | ' sub housekeeper
00804                 | _housekeeper
00804                 | ' 
00804                 | ' do
00804                 | LR__0001
00804                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
00804     45 E4 05 F1 | 	add	objptr, #69
00808                 | LR__0002
00808     F2 12 02 FB | 	rdlong	arg01, objptr
0080c     01 12 0E F2 | 	cmp	arg01, #1 wz
00810     F4 FF 9F 5D |  if_ne	jmp	#LR__0002
00814     7A 00 00 FF 
00818     03 E4 05 F1 | 	add	objptr, ##62467
0081c     F2 12 02 FB | 	rdlong	arg01, objptr
00820     01 12 06 F1 | 	add	arg01, #1
00824     F2 12 62 FC | 	wrlong	arg01, objptr
00828     7A 00 00 FF 
0082c     48 E4 85 F1 | 	sub	objptr, ##62536
00830     80 00 B0 FD | 	call	#_gethdi
00834     05 12 06 F6 | 	mov	arg01, #5
00838     6C 87 B1 FD | 	call	#__system___waitms
0083c     7A 00 00 FF 
00840     48 E4 05 F1 | 	add	objptr, ##62536
00844     F2 12 02 FB | 	rdlong	arg01, objptr
00848     01 12 06 F1 | 	add	arg01, #1
0084c     F2 12 62 FC | 	wrlong	arg01, objptr
00850     7A 00 00 FF 
00854     48 E4 85 F1 | 	sub	objptr, ##62536
00858     58 00 B0 FD | 	call	#_gethdi
0085c     05 12 06 F6 | 	mov	arg01, #5
00860     44 87 B1 FD | 	call	#__system___waitms
00864     7A 00 00 FF 
00868     48 E4 05 F1 | 	add	objptr, ##62536
0086c     F2 12 02 FB | 	rdlong	arg01, objptr
00870     01 12 06 F1 | 	add	arg01, #1
00874     F2 12 62 FC | 	wrlong	arg01, objptr
00878     7A 00 00 FF 
0087c     48 E4 85 F1 | 	sub	objptr, ##62536
00880     30 00 B0 FD | 	call	#_gethdi
00884     05 12 06 F6 | 	mov	arg01, #5
00888     1C 87 B1 FD | 	call	#__system___waitms
0088c     7A 00 00 FF 
00890     48 E4 05 F1 | 	add	objptr, ##62536
00894     F2 12 02 FB | 	rdlong	arg01, objptr
00898     01 12 06 F1 | 	add	arg01, #1
0089c     F2 12 62 FC | 	wrlong	arg01, objptr
008a0     7A 00 00 FF 
008a4     48 E4 85 F1 | 	sub	objptr, ##62536
008a8     08 00 B0 FD | 	call	#_gethdi
008ac     54 FF 9F FD | 	jmp	#LR__0001
008b0                 | _housekeeper_ret
008b0     2D 00 64 FD | 	ret
008b4                 | 
008b4                 | ' 
008b4                 | ' 
008b4                 | ' sub gethdi
008b4                 | _gethdi
008b4     03 4A 05 F6 | 	mov	COUNT_, #3
008b8     A8 00 A0 FD | 	call	#pushregs_
008bc                 | '   x := mouse_xacc
008bc     14 00 00 FF 
008c0     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
008c4     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
008c8                 | '   y := mouse_yacc
008c8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008cc     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
008d0     79 00 00 FF 
008d4     C0 E5 05 F1 | 	add	objptr, ##62400
008d8     F2 14 62 FC | 	wrlong	arg02, objptr
008dc     04 E4 05 F1 | 	add	objptr, #4
008e0     F2 12 62 FC | 	wrlong	arg01, objptr
008e4                 | '   x := 0
008e4                 | '   y := mouse_zacc
008e4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008e8     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
008ec     08 E4 05 F1 | 	add	objptr, #8
008f0     F2 FA 61 FC | 	wrlong	result1, objptr
008f4                 | '   return mouse_bstate&7
008f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008f8     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
008fc     14 00 00 FF 
00900     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
00904     07 FA 05 F5 | 	and	result1, #7
00908     04 E4 85 F1 | 	sub	objptr, #4
0090c     F2 FA 61 FC | 	wrlong	result1, objptr
00910     79 00 00 FF 
00914     C8 E5 85 F1 | 	sub	objptr, ##62408
00918     00 1E 06 F6 | 	mov	local01, #0
0091c                 | ' 
0091c                 | '   mousex,mousey=kbm.mouse_xy()
0091c                 | '   dummy,mousew=kbm.mouse_scroll()
0091c                 | '   mousek=kbm.mouse_buttons()
0091c                 | '   
0091c                 | '   i=0:
0091c                 | '   for j=0 to 6
0091c     00 20 06 F6 | 	mov	local02, #0
00920                 | LR__0010
00920                 | '     if kbm.hidpad_id(j)>0 then
00920     10 13 02 F6 | 	mov	arg01, local02
00924     28 7D B1 FD | 	call	#_usbnew_spin2_hidpad_id
00928     01 FA 55 F2 | 	cmps	result1, #1 wc
0092c     8C 00 90 CD |  if_b	jmp	#LR__0011
00930     10 13 02 F6 | 	mov	arg01, local02
00934     00 14 06 F6 | 	mov	arg02, #0
00938     78 7D B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0093c     FD 22 02 F6 | 	mov	local03, result1
00940     10 13 02 F6 | 	mov	arg01, local02
00944     01 14 06 F6 | 	mov	arg02, #1
00948     68 7D B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0094c     60 00 00 FF 
00950     00 22 06 F1 | 	add	local03, ##49152
00954     0F 22 46 F0 | 	shr	local03, #15
00958     01 14 06 F6 | 	mov	arg02, #1
0095c     11 15 02 F1 | 	add	arg02, local03
00960     60 00 00 FF 
00964     00 FA 05 F1 | 	add	result1, ##49152
00968     0F FA 45 F0 | 	shr	result1, #15
0096c     01 12 06 F6 | 	mov	arg01, #1
00970     FD 12 02 F1 | 	add	arg01, result1
00974     0F 23 02 F6 | 	mov	local03, local01
00978     02 22 66 F0 | 	shl	local03, #2
0097c     79 00 00 FF 
00980     D0 E5 05 F1 | 	add	objptr, ##62416
00984     F2 22 02 F1 | 	add	local03, objptr
00988     02 12 66 F0 | 	shl	arg01, #2
0098c     09 15 02 F1 | 	add	arg02, arg01
00990     11 15 62 FC | 	wrlong	arg02, local03
00994     0F 23 02 F6 | 	mov	local03, local01
00998     02 22 66 F0 | 	shl	local03, #2
0099c     1C E4 05 F1 | 	add	objptr, #28
009a0     F2 22 02 F1 | 	add	local03, objptr
009a4     10 13 02 F6 | 	mov	arg01, local02
009a8     79 00 00 FF 
009ac     EC E5 85 F1 | 	sub	objptr, ##62444
009b0     CC 7C B1 FD | 	call	#_usbnew_spin2_hidpad_buttons
009b4     11 FB 61 FC | 	wrlong	result1, local03
009b8     01 1E 06 F1 | 	add	local01, #1
009bc                 | LR__0011
009bc     01 20 06 F1 | 	add	local02, #1
009c0     07 20 16 F2 | 	cmp	local02, #7 wc
009c4     58 FF 9F CD |  if_b	jmp	#LR__0010
009c8     97 22 48 FB | 	callpa	#(@LR__0013-@LR__0012)>>2,fcache_load_ptr_
009cc                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
009cc                 | LR__0012
009cc     07 1E 16 F2 | 	cmp	local01, #7 wc
009d0     3C 00 90 3D |  if_ae	jmp	#LR__0014
009d4     0F 23 02 F6 | 	mov	local03, local01
009d8     02 22 66 F0 | 	shl	local03, #2
009dc     79 00 00 FF 
009e0     D0 E5 05 F1 | 	add	objptr, ##62416
009e4     F2 22 02 F1 | 	add	local03, objptr
009e8     11 01 68 FC | 	wrlong	#0, local03
009ec     0F 23 02 F6 | 	mov	local03, local01
009f0     02 22 66 F0 | 	shl	local03, #2
009f4     1C E4 05 F1 | 	add	objptr, #28
009f8     F2 22 02 F1 | 	add	local03, objptr
009fc     11 01 68 FC | 	wrlong	#0, local03
00a00     01 1E 06 F1 | 	add	local01, #1
00a04     79 00 00 FF 
00a08     EC E5 85 F1 | 	sub	objptr, ##62444
00a0c     BC FF 9F FD | 	jmp	#LR__0012
00a10                 | LR__0013
00a10                 | LR__0014
00a10     A7 F0 03 F6 | 	mov	ptra, fp
00a14     B2 00 A0 FD | 	call	#popregs_
00a18                 | _gethdi_ret
00a18     2D 00 64 FD | 	ret
00a1c                 | 
00a1c                 | ' 
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' '----------------------------------- The line interpreter/tokenizer --------------------------------------------------------------------
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' 
00a1c                 | ' sub interpret
00a1c                 | _interpret
00a1c     23 4A 05 F6 | 	mov	COUNT_, #35
00a20     A8 00 A0 FD | 	call	#pushregs_
00a24     01 00 00 FF 
00a28     50 F0 07 F1 | 	add	ptra, ##592
00a2c     55 00 00 FF 
00a30     F0 E5 05 F1 | 	add	objptr, ##44016
00a34     F2 1E 02 FB | 	rdlong	local01, objptr
00a38     04 E4 05 F1 | 	add	objptr, #4
00a3c     F2 1E 62 FC | 	wrlong	local01, objptr
00a40     04 E4 05 F1 | 	add	objptr, #4
00a44     FF FF FF FF 
00a48     F2 FE 6B FC | 	wrlong	##-1, objptr
00a4c     00 20 06 F6 | 	mov	local02, #0
00a50     13 00 00 FF 
00a54     58 E4 05 F1 | 	add	objptr, ##9816
00a58     F2 00 68 FC | 	wrlong	#0, objptr
00a5c     69 00 00 FF 
00a60     50 E4 85 F1 | 	sub	objptr, ##53840
00a64     00 22 06 F6 | 	mov	local03, #0
00a68                 | LR__0020
00a68                 | ' 
00a68                 | ' ' ---------------------------------------------------  Pass 1: Split the line to parts, detect and concatenate strings
00a68                 | ' 
00a68                 | ' fullline$=line$: cont=-1  : linenum=0 : lineptr=0 : err=0
00a68                 | ' 
00a68                 | ' 108 for i=0 to 125: separators(i)=0 :next i
00a68     00 24 06 F6 | 	mov	local04, #0
00a6c     20 4E 05 F1 | 	add	fp, #32
00a70     97 0E 48 FB | 	callpa	#(@LR__0022-@LR__0021)>>2,fcache_load_ptr_
00a74                 | LR__0021
00a74     12 27 02 F6 | 	mov	local05, local04
00a78     02 26 66 F0 | 	shl	local05, #2
00a7c     A7 26 02 F1 | 	add	local05, fp
00a80     13 01 68 FC | 	wrlong	#0, local05
00a84     01 24 06 F1 | 	add	local04, #1
00a88     7E 24 56 F2 | 	cmps	local04, #126 wc
00a8c     E4 FF 9F CD |  if_b	jmp	#LR__0021
00a90                 | LR__0022
00a90     20 4E 85 F1 | 	sub	fp, #32
00a94                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
00a94     00 24 06 F6 | 	mov	local04, #0
00a98     53 00 00 FF 
00a9c     E0 E5 05 F1 | 	add	objptr, ##42976
00aa0     97 20 48 FB | 	callpa	#(@LR__0024-@LR__0023)>>2,fcache_load_ptr_
00aa4                 | LR__0023
00aa4     12 1F 02 F6 | 	mov	local01, local04
00aa8     03 1E 66 F0 | 	shl	local01, #3
00aac     F2 1E 02 F1 | 	add	local01, objptr
00ab0     41 01 00 FF 
00ab4     52 16 06 F6 | 	mov	arg03, ##@LR__4297
00ab8     0F 17 62 FC | 	wrlong	arg03, local01
00abc     12 1F 02 F6 | 	mov	local01, local04
00ac0     03 1E 66 F0 | 	shl	local01, #3
00ac4     F2 28 02 F6 | 	mov	local06, objptr
00ac8     F2 1E 02 F1 | 	add	local01, objptr
00acc     00 2A 06 F6 | 	mov	local07, #0
00ad0     04 1E 06 F1 | 	add	local01, #4
00ad4     0F 01 68 FC | 	wrlong	#0, local01
00ad8     01 24 06 F1 | 	add	local04, #1
00adc     7E 24 56 F2 | 	cmps	local04, #126 wc
00ae0     C0 FF 9F CD |  if_b	jmp	#LR__0023
00ae4                 | LR__0024
00ae4     02 00 00 FF 
00ae8     10 E4 05 F1 | 	add	objptr, ##1040
00aec     F2 12 02 FB | 	rdlong	arg01, objptr
00af0     55 00 00 FF 
00af4     F0 E5 85 F1 | 	sub	objptr, ##44016
00af8     FC A5 B1 FD | 	call	#__system__RTrim_S
00afc     FD 12 02 F6 | 	mov	arg01, result1
00b00     34 A5 B1 FD | 	call	#__system__LTrim_S
00b04     55 00 00 FF 
00b08     F0 E5 05 F1 | 	add	objptr, ##44016
00b0c     F2 FA 61 FC | 	wrlong	result1, objptr
00b10     41 01 00 FF 
00b14     53 1E 06 F6 | 	mov	local01, ##@LR__4298
00b18     24 00 00 FF 
00b1c     90 E4 05 F1 | 	add	objptr, ##18576
00b20     F2 1E 62 FC | 	wrlong	local01, objptr
00b24     24 00 00 FF 
00b28     90 E4 85 F1 | 	sub	objptr, ##18576
00b2c     F2 12 02 FB | 	rdlong	arg01, objptr
00b30     55 00 00 FF 
00b34     F0 E5 85 F1 | 	sub	objptr, ##44016
00b38     09 2D 02 F6 | 	mov	local08, arg01
00b3c     97 06 48 FB | 	callpa	#(@LR__0026-@LR__0025)>>2,fcache_load_ptr_
00b40                 | LR__0025
00b40     16 FB C9 FA | 	rdbyte	result1, local08 wz
00b44     01 2C 06 51 |  if_ne	add	local08, #1
00b48     F4 FF 9F 5D |  if_ne	jmp	#LR__0025
00b4c                 | LR__0026
00b4c     09 2D 8A F1 | 	sub	local08, arg01 wz
00b50     7A 00 00 FF 
00b54     84 E4 05 F1 | 	add	objptr, ##62596
00b58     F2 2C 62 FC | 	wrlong	local08, objptr
00b5c                 | ' if l=0 then goto 101
00b5c     7A 00 00 FF 
00b60     84 E4 85 F1 | 	sub	objptr, ##62596
00b64     1C 26 90 AD |  if_e	jmp	#LR__0147
00b68     7A 00 00 FF 
00b6c     88 E4 05 F1 | 	add	objptr, ##62600
00b70     F2 00 68 FC | 	wrlong	#0, objptr
00b74                 | ' ' before we split the line, we have to find colons that are inside a string,,,,
00b74                 | ' for i=1 to len(line$)
00b74     01 24 06 F6 | 	mov	local04, #1
00b78     24 00 00 FF 
00b7c     98 E4 85 F1 | 	sub	objptr, ##18584
00b80     F2 12 02 FB | 	rdlong	arg01, objptr
00b84     55 00 00 FF 
00b88     F0 E5 85 F1 | 	sub	objptr, ##44016
00b8c     09 2D 02 F6 | 	mov	local08, arg01
00b90     97 06 48 FB | 	callpa	#(@LR__0028-@LR__0027)>>2,fcache_load_ptr_
00b94                 | LR__0027
00b94     16 FB C9 FA | 	rdbyte	result1, local08 wz
00b98     01 2C 06 51 |  if_ne	add	local08, #1
00b9c     F4 FF 9F 5D |  if_ne	jmp	#LR__0027
00ba0                 | LR__0028
00ba0     09 2D 82 F1 | 	sub	local08, arg01
00ba4     16 2F 02 F6 | 	mov	local09, local08
00ba8     01 2E 06 F1 | 	add	local09, #1
00bac                 | LR__0029
00bac     17 25 52 F2 | 	cmps	local04, local09 wc
00bb0     00 01 90 3D |  if_ae	jmp	#LR__0032
00bb4                 | ' 
00bb4                 | '   if mid$(line$,i,1)="""" andalso d=0 then 
00bb4     55 00 00 FF 
00bb8     F0 E5 05 F1 | 	add	objptr, ##44016
00bbc     F2 12 02 FB | 	rdlong	arg01, objptr
00bc0     55 00 00 FF 
00bc4     F0 E5 85 F1 | 	sub	objptr, ##44016
00bc8     12 15 02 F6 | 	mov	arg02, local04
00bcc     01 16 06 F6 | 	mov	arg03, #1
00bd0     08 A2 B1 FD | 	call	#__system__Mid_S
00bd4     FD 12 02 F6 | 	mov	arg01, result1
00bd8     41 01 00 FF 
00bdc     54 14 06 F6 | 	mov	arg02, ##@LR__4299
00be0     F8 80 B1 FD | 	call	#__system___string_cmp
00be4     00 FA 0D F2 | 	cmp	result1, #0 wz
00be8     2C 00 90 5D |  if_ne	jmp	#LR__0030
00bec     7A 00 00 FF 
00bf0     88 E4 05 F1 | 	add	objptr, ##62600
00bf4     F2 26 0A FB | 	rdlong	local05, objptr wz
00bf8     7A 00 00 FF 
00bfc     88 E4 85 F1 | 	sub	objptr, ##62600
00c00     7A 00 00 AF 
00c04     88 E4 05 A1 |  if_e	add	objptr, ##62600
00c08     F2 02 68 AC |  if_e	wrlong	#1, objptr
00c0c     7A 00 00 AF 
00c10     88 E4 85 A1 |  if_e	sub	objptr, ##62600
00c14     60 00 90 AD |  if_e	jmp	#LR__0031
00c18                 | LR__0030
00c18     55 00 00 FF 
00c1c     F0 E5 05 F1 | 	add	objptr, ##44016
00c20     F2 12 02 FB | 	rdlong	arg01, objptr
00c24     55 00 00 FF 
00c28     F0 E5 85 F1 | 	sub	objptr, ##44016
00c2c     12 15 02 F6 | 	mov	arg02, local04
00c30     01 16 06 F6 | 	mov	arg03, #1
00c34     A4 A1 B1 FD | 	call	#__system__Mid_S
00c38     FD 12 02 F6 | 	mov	arg01, result1
00c3c     41 01 00 FF 
00c40     56 14 06 F6 | 	mov	arg02, ##@LR__4300
00c44     94 80 B1 FD | 	call	#__system___string_cmp
00c48     00 FA 0D F2 | 	cmp	result1, #0 wz
00c4c     7A 00 00 AF 
00c50     88 E4 05 A1 |  if_e	add	objptr, ##62600
00c54     F2 26 02 AB |  if_e	rdlong	local05, objptr
00c58     7A 00 00 AF 
00c5c     88 E4 85 A1 |  if_e	sub	objptr, ##62600
00c60     01 26 0E A2 |  if_e	cmp	local05, #1 wz
00c64     7A 00 00 AF 
00c68     88 E4 05 A1 |  if_e	add	objptr, ##62600
00c6c     F2 00 68 AC |  if_e	wrlong	#0, objptr
00c70     7A 00 00 AF 
00c74     88 E4 85 A1 |  if_e	sub	objptr, ##62600
00c78                 | LR__0031
00c78     12 1F 02 F6 | 	mov	local01, local04
00c7c     03 1E 66 F0 | 	shl	local01, #3
00c80     53 00 00 FF 
00c84     E0 E5 05 F1 | 	add	objptr, ##42976
00c88     F2 28 02 F6 | 	mov	local06, objptr
00c8c     F2 1E 02 F1 | 	add	local01, objptr
00c90     26 00 00 FF 
00c94     A8 E4 05 F1 | 	add	objptr, ##19624
00c98     F2 2A 02 FB | 	rdlong	local07, objptr
00c9c     7A 00 00 FF 
00ca0     88 E4 85 F1 | 	sub	objptr, ##62600
00ca4     04 1E 06 F1 | 	add	local01, #4
00ca8     0F 2B 62 FC | 	wrlong	local07, local01
00cac     01 24 06 F1 | 	add	local04, #1
00cb0     F8 FE 9F FD | 	jmp	#LR__0029
00cb4                 | LR__0032
00cb4     01 24 06 F6 | 	mov	local04, #1
00cb8                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop
00cb8                 | LR__0033
00cb8     55 00 00 FF 
00cbc     F0 E5 05 F1 | 	add	objptr, ##44016
00cc0     F2 12 02 FB | 	rdlong	arg01, objptr
00cc4     55 00 00 FF 
00cc8     F0 E5 85 F1 | 	sub	objptr, ##44016
00ccc     12 15 02 F6 | 	mov	arg02, local04
00cd0     01 16 06 F6 | 	mov	arg03, #1
00cd4     04 A1 B1 FD | 	call	#__system__Mid_S
00cd8     FD 12 02 F6 | 	mov	arg01, result1
00cdc     41 01 00 FF 
00ce0     58 30 06 F6 | 	mov	local10, ##@LR__4301
00ce4     18 15 02 F6 | 	mov	arg02, local10
00ce8     F0 7F B1 FD | 	call	#__system___string_cmp
00cec     00 FA 0D F2 | 	cmp	result1, #0 wz
00cf0     34 00 90 5D |  if_ne	jmp	#LR__0034
00cf4     12 29 02 F6 | 	mov	local06, local04
00cf8     03 28 66 F0 | 	shl	local06, #3
00cfc     53 00 00 FF 
00d00     E0 E5 05 F1 | 	add	objptr, ##42976
00d04     F2 2A 02 F6 | 	mov	local07, objptr
00d08     F2 28 02 F1 | 	add	local06, objptr
00d0c     04 28 06 F1 | 	add	local06, #4
00d10     14 33 02 FB | 	rdlong	local11, local06
00d14     04 28 86 F1 | 	sub	local06, #4
00d18     19 35 0A F6 | 	mov	local12, local11 wz
00d1c     53 00 00 FF 
00d20     E0 E5 85 F1 | 	sub	objptr, ##42976
00d24     24 00 90 AD |  if_e	jmp	#LR__0035
00d28                 | LR__0034
00d28     7A 00 00 FF 
00d2c     84 E4 05 F1 | 	add	objptr, ##62596
00d30     F2 36 02 FB | 	rdlong	local13, objptr
00d34     7A 00 00 FF 
00d38     84 E4 85 F1 | 	sub	objptr, ##62596
00d3c     1B 39 02 F6 | 	mov	local14, local13
00d40     1C 25 52 F2 | 	cmps	local04, local14 wc
00d44     01 24 06 C1 |  if_b	add	local04, #1
00d48     6C FF 9F CD |  if_b	jmp	#LR__0033
00d4c                 | LR__0035
00d4c                 | ' 
00d4c                 | ' 'let d=instr(1,line$,":"): if d>0 andalso d<len(line$) andalso lparts(d).token=0  then let rest$=trim$(right$(line$,len(line$)-d)):line$=trim$(left$(line$,d-1)) else rest$=""  
00d4c                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 
00d4c     7A 00 00 FF 
00d50     84 E4 05 F1 | 	add	objptr, ##62596
00d54     F2 1E 02 FB | 	rdlong	local01, objptr
00d58     7A 00 00 FF 
00d5c     84 E4 85 F1 | 	sub	objptr, ##62596
00d60     0F 25 52 F2 | 	cmps	local04, local01 wc
00d64     A4 00 90 3D |  if_ae	jmp	#LR__0038
00d68     55 00 00 FF 
00d6c     F0 E5 05 F1 | 	add	objptr, ##44016
00d70     F2 2A 02 FB | 	rdlong	local07, objptr
00d74     55 00 00 FF 
00d78     F0 E5 85 F1 | 	sub	objptr, ##44016
00d7c     15 13 02 F6 | 	mov	arg01, local07
00d80     09 2D 02 F6 | 	mov	local08, arg01
00d84     97 06 48 FB | 	callpa	#(@LR__0037-@LR__0036)>>2,fcache_load_ptr_
00d88                 | LR__0036
00d88     16 FB C9 FA | 	rdbyte	result1, local08 wz
00d8c     01 2C 06 51 |  if_ne	add	local08, #1
00d90     F4 FF 9F 5D |  if_ne	jmp	#LR__0036
00d94                 | LR__0037
00d94     09 2D 82 F1 | 	sub	local08, arg01
00d98     16 15 02 F6 | 	mov	arg02, local08
00d9c     12 15 82 F1 | 	sub	arg02, local04
00da0     15 13 02 F6 | 	mov	arg01, local07
00da4     A4 9F B1 FD | 	call	#__system__Right_S
00da8     FD 12 02 F6 | 	mov	arg01, result1
00dac     48 A3 B1 FD | 	call	#__system__RTrim_S
00db0     FD 12 02 F6 | 	mov	arg01, result1
00db4     80 A2 B1 FD | 	call	#__system__LTrim_S
00db8     7A 00 00 FF 
00dbc     8C E4 05 F1 | 	add	objptr, ##62604
00dc0     F2 FA 61 FC | 	wrlong	result1, objptr
00dc4     24 00 00 FF 
00dc8     9C E4 85 F1 | 	sub	objptr, ##18588
00dcc     F2 12 02 FB | 	rdlong	arg01, objptr
00dd0     55 00 00 FF 
00dd4     F0 E5 85 F1 | 	sub	objptr, ##44016
00dd8     01 24 86 F1 | 	sub	local04, #1
00ddc     12 15 02 F6 | 	mov	arg02, local04
00de0     E0 9E B1 FD | 	call	#__system__Left_S
00de4     FD 12 02 F6 | 	mov	arg01, result1
00de8     0C A3 B1 FD | 	call	#__system__RTrim_S
00dec     FD 12 02 F6 | 	mov	arg01, result1
00df0     44 A2 B1 FD | 	call	#__system__LTrim_S
00df4     55 00 00 FF 
00df8     F0 E5 05 F1 | 	add	objptr, ##44016
00dfc     F2 FA 61 FC | 	wrlong	result1, objptr
00e00     55 00 00 FF 
00e04     F0 E5 85 F1 | 	sub	objptr, ##44016
00e08     1C 00 90 FD | 	jmp	#LR__0039
00e0c                 | LR__0038
00e0c     41 01 00 FF 
00e10     5A 1E 06 F6 | 	mov	local01, ##@LR__4302
00e14     7A 00 00 FF 
00e18     8C E4 05 F1 | 	add	objptr, ##62604
00e1c     F2 1E 62 FC | 	wrlong	local01, objptr
00e20     7A 00 00 FF 
00e24     8C E4 85 F1 | 	sub	objptr, ##62604
00e28                 | LR__0039
00e28                 | ' 'print "line$=";line$
00e28                 | ' 'print "rest$=";rest$
00e28                 | ' 
00e28                 | ' 
00e28                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not last part
00e28     55 00 00 FF 
00e2c     F8 E5 05 F1 | 	add	objptr, ##44024
00e30     F2 1E 02 FB | 	rdlong	local01, objptr
00e34     55 00 00 FF 
00e38     F8 E5 85 F1 | 	sub	objptr, ##44024
00e3c     FF FF 7F FF 
00e40     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00e44     3C 00 90 5D |  if_ne	jmp	#LR__0040
00e48     7A 00 00 FF 
00e4c     8C E4 05 F1 | 	add	objptr, ##62604
00e50     F2 12 02 FB | 	rdlong	arg01, objptr
00e54     7A 00 00 FF 
00e58     8C E4 85 F1 | 	sub	objptr, ##62604
00e5c     41 01 00 FF 
00e60     5B 14 06 F6 | 	mov	arg02, ##@LR__4303
00e64     74 7E B1 FD | 	call	#__system___string_cmp
00e68     00 FA 0D F2 | 	cmp	result1, #0 wz
00e6c     55 00 00 5F 
00e70     F8 E5 05 51 |  if_ne	add	objptr, ##44024
00e74     F2 00 68 5C |  if_ne	wrlong	#0, objptr
00e78     55 00 00 5F 
00e7c     F8 E5 85 51 |  if_ne	sub	objptr, ##44024
00e80     08 01 90 5D |  if_ne	jmp	#LR__0044
00e84                 | LR__0040
00e84                 | ' if cont=-1 andalso rest$="" then cont=3 : goto 107		' this is the first AND last part
00e84     55 00 00 FF 
00e88     F8 E5 05 F1 | 	add	objptr, ##44024
00e8c     F2 1E 02 FB | 	rdlong	local01, objptr
00e90     55 00 00 FF 
00e94     F8 E5 85 F1 | 	sub	objptr, ##44024
00e98     FF FF 7F FF 
00e9c     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00ea0     3C 00 90 5D |  if_ne	jmp	#LR__0041
00ea4     7A 00 00 FF 
00ea8     8C E4 05 F1 | 	add	objptr, ##62604
00eac     F2 12 02 FB | 	rdlong	arg01, objptr
00eb0     7A 00 00 FF 
00eb4     8C E4 85 F1 | 	sub	objptr, ##62604
00eb8     41 01 00 FF 
00ebc     5C 14 06 F6 | 	mov	arg02, ##@LR__4304
00ec0     18 7E B1 FD | 	call	#__system___string_cmp
00ec4     00 FA 0D F2 | 	cmp	result1, #0 wz
00ec8     55 00 00 AF 
00ecc     F8 E5 05 A1 |  if_e	add	objptr, ##44024
00ed0     F2 06 68 AC |  if_e	wrlong	#3, objptr
00ed4     55 00 00 AF 
00ed8     F8 E5 85 A1 |  if_e	sub	objptr, ##44024
00edc     AC 00 90 AD |  if_e	jmp	#LR__0044
00ee0                 | LR__0041
00ee0                 | ' if cont=4 andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
00ee0     55 00 00 FF 
00ee4     F8 E5 05 F1 | 	add	objptr, ##44024
00ee8     F2 1E 02 FB | 	rdlong	local01, objptr
00eec     55 00 00 FF 
00ef0     F8 E5 85 F1 | 	sub	objptr, ##44024
00ef4     04 1E 0E F2 | 	cmp	local01, #4 wz
00ef8     3C 00 90 5D |  if_ne	jmp	#LR__0042
00efc     7A 00 00 FF 
00f00     8C E4 05 F1 | 	add	objptr, ##62604
00f04     F2 12 02 FB | 	rdlong	arg01, objptr
00f08     7A 00 00 FF 
00f0c     8C E4 85 F1 | 	sub	objptr, ##62604
00f10     41 01 00 FF 
00f14     5D 14 06 F6 | 	mov	arg02, ##@LR__4305
00f18     C0 7D B1 FD | 	call	#__system___string_cmp
00f1c     00 FA 0D F2 | 	cmp	result1, #0 wz
00f20     55 00 00 5F 
00f24     F8 E5 05 51 |  if_ne	add	objptr, ##44024
00f28     F2 02 68 5C |  if_ne	wrlong	#1, objptr
00f2c     55 00 00 5F 
00f30     F8 E5 85 51 |  if_ne	sub	objptr, ##44024
00f34     54 00 90 5D |  if_ne	jmp	#LR__0044
00f38                 | LR__0042
00f38                 | ' if cont=4 andalso rest$="" then cont=2 :goto 107		' this is the last, and not the first, part
00f38     55 00 00 FF 
00f3c     F8 E5 05 F1 | 	add	objptr, ##44024
00f40     F2 1E 02 FB | 	rdlong	local01, objptr
00f44     55 00 00 FF 
00f48     F8 E5 85 F1 | 	sub	objptr, ##44024
00f4c     04 1E 0E F2 | 	cmp	local01, #4 wz
00f50     38 00 90 5D |  if_ne	jmp	#LR__0043
00f54     7A 00 00 FF 
00f58     8C E4 05 F1 | 	add	objptr, ##62604
00f5c     F2 12 02 FB | 	rdlong	arg01, objptr
00f60     7A 00 00 FF 
00f64     8C E4 85 F1 | 	sub	objptr, ##62604
00f68     41 01 00 FF 
00f6c     5E 14 06 F6 | 	mov	arg02, ##@LR__4306
00f70     68 7D B1 FD | 	call	#__system___string_cmp
00f74     00 FA 0D F2 | 	cmp	result1, #0 wz
00f78     55 00 00 AF 
00f7c     F8 E5 05 A1 |  if_e	add	objptr, ##44024
00f80     F2 04 68 AC |  if_e	wrlong	#2, objptr
00f84     55 00 00 AF 
00f88     F8 E5 85 A1 |  if_e	sub	objptr, ##44024
00f8c                 | LR__0043
00f8c                 | LR__0044
00f8c     20 4E 05 F1 | 	add	fp, #32
00f90     A7 00 68 FC | 	wrlong	#0, fp
00f94     20 4E 85 F1 | 	sub	fp, #32
00f98     00 24 06 F6 | 	mov	local04, #0
00f9c     01 3A 06 F6 | 	mov	local15, #1
00fa0                 | ' 
00fa0                 | ' ' 1b: find separators
00fa0                 | ' 
00fa0                 | ' 107
00fa0                 | ' separators(0)=0
00fa0                 | ' i=0: j=1 : do: i+=1 : let c$=mid$(line$,i,1) 
00fa0                 | LR__0045
00fa0     01 24 06 F1 | 	add	local04, #1
00fa4     55 00 00 FF 
00fa8     F0 E5 05 F1 | 	add	objptr, ##44016
00fac     F2 12 02 FB | 	rdlong	arg01, objptr
00fb0     55 00 00 FF 
00fb4     F0 E5 85 F1 | 	sub	objptr, ##44016
00fb8     12 15 02 F6 | 	mov	arg02, local04
00fbc     01 16 06 F6 | 	mov	arg03, #1
00fc0     18 9E B1 FD | 	call	#__system__Mid_S
00fc4     7A 00 00 FF 
00fc8     90 E4 05 F1 | 	add	objptr, ##62608
00fcc     F2 FA 61 FC | 	wrlong	result1, objptr
00fd0                 | ' if isseparator(c$) then separators(j)=i: j+=1 
00fd0     FD 12 02 F6 | 	mov	arg01, result1
00fd4     7A 00 00 FF 
00fd8     90 E4 85 F1 | 	sub	objptr, ##62608
00fdc     B0 24 B0 FD | 	call	#_isseparator
00fe0     00 FA 0D F2 | 	cmp	result1, #0 wz
00fe4     1C 00 90 AD |  if_e	jmp	#LR__0046
00fe8     1D 27 02 F6 | 	mov	local05, local15
00fec     02 26 66 F0 | 	shl	local05, #2
00ff0     20 4E 05 F1 | 	add	fp, #32
00ff4     A7 26 02 F1 | 	add	local05, fp
00ff8     13 25 62 FC | 	wrlong	local04, local05
00ffc     01 3A 06 F1 | 	add	local15, #1
01000     20 4E 85 F1 | 	sub	fp, #32
01004                 | LR__0046
01004     7A 00 00 FF 
01008     84 E4 05 F1 | 	add	objptr, ##62596
0100c     F2 1E 02 FB | 	rdlong	local01, objptr
01010     7A 00 00 FF 
01014     84 E4 85 F1 | 	sub	objptr, ##62596
01018     0F 25 5A F2 | 	cmps	local04, local01 wcz
0101c     80 FF 9F ED |  if_be	jmp	#LR__0045
01020     1D 27 02 F6 | 	mov	local05, local15
01024     02 26 66 F0 | 	shl	local05, #2
01028     20 4E 05 F1 | 	add	fp, #32
0102c     A7 26 02 F1 | 	add	local05, fp
01030     13 25 62 FC | 	wrlong	local04, local05
01034     00 3C 06 F6 | 	mov	local16, #0
01038                 | ' for i=0 to j-1 
01038     00 24 06 F6 | 	mov	local04, #0
0103c     1D 3F 02 F6 | 	mov	local17, local15
01040     20 4E 85 F1 | 	sub	fp, #32
01044                 | LR__0047
01044     1F 25 52 F2 | 	cmps	local04, local17 wc
01048     88 01 90 3D |  if_ae	jmp	#LR__0051
0104c     12 27 02 F6 | 	mov	local05, local04
01050     02 26 66 F0 | 	shl	local05, #2
01054     20 4E 05 F1 | 	add	fp, #32
01058     A7 26 02 F1 | 	add	local05, fp
0105c     13 29 02 FB | 	rdlong	local06, local05
01060     7A 00 00 FF 
01064     98 E4 05 F1 | 	add	objptr, ##62616
01068     F2 28 62 FC | 	wrlong	local06, objptr
0106c     12 27 02 F6 | 	mov	local05, local04
01070     01 26 06 F1 | 	add	local05, #1
01074     02 26 66 F0 | 	shl	local05, #2
01078     A7 30 02 F6 | 	mov	local10, fp
0107c     A7 26 02 F1 | 	add	local05, fp
01080     13 29 02 FB | 	rdlong	local06, local05
01084     04 E4 05 F1 | 	add	objptr, #4
01088     F2 28 62 FC | 	wrlong	local06, objptr
0108c                 | '   if p1>0 then let p$=mid$(line$,p1,1):  if   p$<>"" then lparts(k).part$=p$ : k+=1 
0108c     04 E4 85 F1 | 	sub	objptr, #4
01090     F2 1E 02 FB | 	rdlong	local01, objptr
01094     7A 00 00 FF 
01098     98 E4 85 F1 | 	sub	objptr, ##62616
0109c     01 1E 56 F2 | 	cmps	local01, #1 wc
010a0     20 4E 85 F1 | 	sub	fp, #32
010a4     84 00 90 CD |  if_b	jmp	#LR__0049
010a8     55 00 00 FF 
010ac     F0 E5 05 F1 | 	add	objptr, ##44016
010b0     F2 12 02 FB | 	rdlong	arg01, objptr
010b4     24 00 00 FF 
010b8     A8 E4 05 F1 | 	add	objptr, ##18600
010bc     F2 14 02 FB | 	rdlong	arg02, objptr
010c0     7A 00 00 FF 
010c4     98 E4 85 F1 | 	sub	objptr, ##62616
010c8     01 16 06 F6 | 	mov	arg03, #1
010cc     0C 9D B1 FD | 	call	#__system__Mid_S
010d0     7A 00 00 FF 
010d4     A0 E4 05 F1 | 	add	objptr, ##62624
010d8     F2 FA 61 FC | 	wrlong	result1, objptr
010dc     7A 00 00 FF 
010e0     A0 E4 85 F1 | 	sub	objptr, ##62624
010e4     FD 12 02 F6 | 	mov	arg01, result1
010e8     41 01 00 FF 
010ec     5F 14 06 F6 | 	mov	arg02, ##@LR__4307
010f0     E8 7B B1 FD | 	call	#__system___string_cmp
010f4     00 FA 0D F2 | 	cmp	result1, #0 wz
010f8     30 00 90 AD |  if_e	jmp	#LR__0048
010fc     1E 31 02 F6 | 	mov	local10, local16
01100     03 30 66 F0 | 	shl	local10, #3
01104     53 00 00 FF 
01108     E0 E5 05 F1 | 	add	objptr, ##42976
0110c     F2 30 02 F1 | 	add	local10, objptr
01110     26 00 00 FF 
01114     C0 E4 05 F1 | 	add	objptr, ##19648
01118     F2 2A 02 FB | 	rdlong	local07, objptr
0111c     7A 00 00 FF 
01120     A0 E4 85 F1 | 	sub	objptr, ##62624
01124     18 2B 62 FC | 	wrlong	local07, local10
01128     01 3C 06 F1 | 	add	local16, #1
0112c                 | LR__0048
0112c                 | LR__0049
0112c     55 00 00 FF 
01130     F0 E5 05 F1 | 	add	objptr, ##44016
01134     F2 12 02 FB | 	rdlong	arg01, objptr
01138     24 00 00 FF 
0113c     A8 E4 05 F1 | 	add	objptr, ##18600
01140     F2 14 02 FB | 	rdlong	arg02, objptr
01144     01 14 06 F1 | 	add	arg02, #1
01148     04 E4 05 F1 | 	add	objptr, #4
0114c     F2 16 02 FB | 	rdlong	arg03, objptr
01150     04 E4 85 F1 | 	sub	objptr, #4
01154     F2 32 02 FB | 	rdlong	local11, objptr
01158     7A 00 00 FF 
0115c     98 E4 85 F1 | 	sub	objptr, ##62616
01160     19 35 02 F6 | 	mov	local12, local11
01164     1A 17 82 F1 | 	sub	arg03, local12
01168     01 16 86 F1 | 	sub	arg03, #1
0116c     6C 9C B1 FD | 	call	#__system__Mid_S
01170     7A 00 00 FF 
01174     A0 E4 05 F1 | 	add	objptr, ##62624
01178     F2 FA 61 FC | 	wrlong	result1, objptr
0117c     7A 00 00 FF 
01180     A0 E4 85 F1 | 	sub	objptr, ##62624
01184     FD 12 02 F6 | 	mov	arg01, result1
01188     41 01 00 FF 
0118c     60 14 06 F6 | 	mov	arg02, ##@LR__4308
01190     48 7B B1 FD | 	call	#__system___string_cmp
01194     00 FA 0D F2 | 	cmp	result1, #0 wz
01198     30 00 90 AD |  if_e	jmp	#LR__0050
0119c     1E 31 02 F6 | 	mov	local10, local16
011a0     03 30 66 F0 | 	shl	local10, #3
011a4     53 00 00 FF 
011a8     E0 E5 05 F1 | 	add	objptr, ##42976
011ac     F2 30 02 F1 | 	add	local10, objptr
011b0     26 00 00 FF 
011b4     C0 E4 05 F1 | 	add	objptr, ##19648
011b8     F2 2A 02 FB | 	rdlong	local07, objptr
011bc     7A 00 00 FF 
011c0     A0 E4 85 F1 | 	sub	objptr, ##62624
011c4     18 2B 62 FC | 	wrlong	local07, local10
011c8     01 3C 06 F1 | 	add	local16, #1
011cc                 | LR__0050
011cc     01 24 06 F1 | 	add	local04, #1
011d0     70 FE 9F FD | 	jmp	#LR__0047
011d4                 | LR__0051
011d4     00 24 06 F6 | 	mov	local04, #0
011d8                 | ' 
011d8                 | ' ' 1d : find strings
011d8                 | ' 
011d8                 | ' i=0
011d8                 | ' do
011d8                 | LR__0052
011d8                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
011d8     12 29 02 F6 | 	mov	local06, local04
011dc     03 28 66 F0 | 	shl	local06, #3
011e0     53 00 00 FF 
011e4     E0 E5 05 F1 | 	add	objptr, ##42976
011e8     F2 28 02 F1 | 	add	local06, objptr
011ec     14 13 02 FB | 	rdlong	arg01, local06
011f0     41 01 00 FF 
011f4     61 14 06 F6 | 	mov	arg02, ##@LR__4309
011f8     53 00 00 FF 
011fc     E0 E5 85 F1 | 	sub	objptr, ##42976
01200     D8 7A B1 FD | 	call	#__system___string_cmp
01204     00 FA 0D F2 | 	cmp	result1, #0 wz
01208     01 24 06 51 |  if_ne	add	local04, #1
0120c     50 01 90 5D |  if_ne	jmp	#LR__0057
01210     12 41 02 F6 | 	mov	local18, local04
01214                 | LR__0053
01214     12 31 02 F6 | 	mov	local10, local04
01218     01 30 06 F1 | 	add	local10, #1
0121c     03 30 66 F0 | 	shl	local10, #3
01220     53 00 00 FF 
01224     E0 E5 05 F1 | 	add	objptr, ##42976
01228     F2 30 02 F1 | 	add	local10, objptr
0122c     18 33 02 FB | 	rdlong	local11, local10
01230     26 00 00 FF 
01234     C0 E4 05 F1 | 	add	objptr, ##19648
01238     F2 32 62 FC | 	wrlong	local11, objptr
0123c     20 31 02 F6 | 	mov	local10, local18
01240     03 30 66 F0 | 	shl	local10, #3
01244     26 00 00 FF 
01248     C0 E4 85 F1 | 	sub	objptr, ##19648
0124c     F2 30 02 F1 | 	add	local10, objptr
01250     20 39 02 F6 | 	mov	local14, local18
01254     03 38 66 F0 | 	shl	local14, #3
01258     F2 38 02 F1 | 	add	local14, objptr
0125c     1C 13 02 FB | 	rdlong	arg01, local14
01260     53 00 00 FF 
01264     E0 E5 85 F1 | 	sub	objptr, ##42976
01268     19 35 02 F6 | 	mov	local12, local11
0126c     1A 15 02 F6 | 	mov	arg02, local12
01270     9C 7A B1 FD | 	call	#__system___string_concat
01274     18 FB 61 FC | 	wrlong	result1, local10
01278     12 3B 02 F6 | 	mov	local15, local04
0127c     01 3A 06 F1 | 	add	local15, #1
01280     1E 43 02 F6 | 	mov	local19, local16
01284     01 42 06 F1 | 	add	local19, #1
01288     97 3C 48 FB | 	callpa	#(@LR__0055-@LR__0054)>>2,fcache_load_ptr_
0128c                 | LR__0054
0128c     21 3B 52 F2 | 	cmps	local15, local19 wc
01290     70 00 90 3D |  if_ae	jmp	#LR__0056
01294     1D 29 02 F6 | 	mov	local06, local15
01298     01 28 06 F1 | 	add	local06, #1
0129c     03 28 66 F0 | 	shl	local06, #3
012a0     53 00 00 FF 
012a4     E0 E5 05 F1 | 	add	objptr, ##42976
012a8     F2 28 02 F1 | 	add	local06, objptr
012ac     14 1F 02 FB | 	rdlong	local01, local06
012b0     1D 2B 02 F6 | 	mov	local07, local15
012b4     01 2A 06 F1 | 	add	local07, #1
012b8     03 2A 66 F0 | 	shl	local07, #3
012bc     F2 2A 02 F1 | 	add	local07, objptr
012c0     04 2A 06 F1 | 	add	local07, #4
012c4     15 27 02 FB | 	rdlong	local05, local07
012c8     1D 2B 02 F6 | 	mov	local07, local15
012cc     03 2A 66 F0 | 	shl	local07, #3
012d0     F2 34 02 F6 | 	mov	local12, objptr
012d4     F2 2A 02 F1 | 	add	local07, objptr
012d8     15 1F 62 FC | 	wrlong	local01, local07
012dc     1D 33 02 F6 | 	mov	local11, local15
012e0     19 37 02 F6 | 	mov	local13, local11
012e4     03 36 66 F0 | 	shl	local13, #3
012e8     F2 36 02 F1 | 	add	local13, objptr
012ec     04 36 06 F1 | 	add	local13, #4
012f0     1B 27 62 FC | 	wrlong	local05, local13
012f4     01 3A 06 F1 | 	add	local15, #1
012f8     53 00 00 FF 
012fc     E0 E5 85 F1 | 	sub	objptr, ##42976
01300     88 FF 9F FD | 	jmp	#LR__0054
01304                 | LR__0055
01304                 | LR__0056
01304     01 3C 86 F1 | 	sub	local16, #1
01308     7A 00 00 FF 
0130c     A0 E4 05 F1 | 	add	objptr, ##62624
01310     F2 12 02 FB | 	rdlong	arg01, objptr
01314     7A 00 00 FF 
01318     A0 E4 85 F1 | 	sub	objptr, ##62624
0131c     41 01 00 FF 
01320     63 14 06 F6 | 	mov	arg02, ##@LR__4310
01324     B4 79 B1 FD | 	call	#__system___string_cmp
01328     00 FA 0D F2 | 	cmp	result1, #0 wz
0132c     1E 25 52 52 |  if_ne	cmps	local04, local16 wc
01330     E0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0053
01334                 | '   if p$<>"""" then k+=1:i+=1
01334     7A 00 00 FF 
01338     A0 E4 05 F1 | 	add	objptr, ##62624
0133c     F2 12 02 FB | 	rdlong	arg01, objptr
01340     7A 00 00 FF 
01344     A0 E4 85 F1 | 	sub	objptr, ##62624
01348     41 01 00 FF 
0134c     65 14 06 F6 | 	mov	arg02, ##@LR__4311
01350     88 79 B1 FD | 	call	#__system___string_cmp
01354     00 FA 0D F2 | 	cmp	result1, #0 wz
01358     01 3C 06 51 |  if_ne	add	local16, #1
0135c     01 24 06 51 |  if_ne	add	local04, #1
01360                 | LR__0057
01360     1E 25 52 F2 | 	cmps	local04, local16 wc
01364     70 FE 9F CD |  if_b	jmp	#LR__0052
01368     00 24 06 F6 | 	mov	local04, #0
0136c                 | ' 
0136c                 | ' ' 1e : concatenate strings if "" detected between
0136c                 | '  
0136c                 | ' i=0 : do
0136c                 | LR__0058
0136c                 | '  if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
0136c     12 29 02 F6 | 	mov	local06, local04
01370     03 28 66 F0 | 	shl	local06, #3
01374     53 00 00 FF 
01378     E0 E5 05 F1 | 	add	objptr, ##42976
0137c     F2 28 02 F1 | 	add	local06, objptr
01380     14 13 02 FB | 	rdlong	arg01, local06
01384     01 14 06 F6 | 	mov	arg02, #1
01388     53 00 00 FF 
0138c     E0 E5 85 F1 | 	sub	objptr, ##42976
01390     B8 99 B1 FD | 	call	#__system__Right_S
01394     FD 12 02 F6 | 	mov	arg01, result1
01398     41 01 00 FF 
0139c     67 14 06 F6 | 	mov	arg02, ##@LR__4312
013a0     38 79 B1 FD | 	call	#__system___string_cmp
013a4     00 FA 0D F2 | 	cmp	result1, #0 wz
013a8     78 01 90 5D |  if_ne	jmp	#LR__0064
013ac     12 2B 02 F6 | 	mov	local07, local04
013b0     01 2A 06 F1 | 	add	local07, #1
013b4     03 2A 66 F0 | 	shl	local07, #3
013b8     53 00 00 FF 
013bc     E0 E5 05 F1 | 	add	objptr, ##42976
013c0     F2 34 02 F6 | 	mov	local12, objptr
013c4     F2 2A 02 F1 | 	add	local07, objptr
013c8     15 13 02 FB | 	rdlong	arg01, local07
013cc     01 14 06 F6 | 	mov	arg02, #1
013d0     53 00 00 FF 
013d4     E0 E5 85 F1 | 	sub	objptr, ##42976
013d8     E8 98 B1 FD | 	call	#__system__Left_S
013dc     FD 12 02 F6 | 	mov	arg01, result1
013e0     41 01 00 FF 
013e4     69 14 06 F6 | 	mov	arg02, ##@LR__4313
013e8     F0 78 B1 FD | 	call	#__system___string_cmp
013ec     00 FA 0D F2 | 	cmp	result1, #0 wz
013f0     30 01 90 5D |  if_ne	jmp	#LR__0064
013f4     12 31 02 F6 | 	mov	local10, local04
013f8     03 30 66 F0 | 	shl	local10, #3
013fc     53 00 00 FF 
01400     E0 E5 05 F1 | 	add	objptr, ##42976
01404     F2 30 02 F1 | 	add	local10, objptr
01408     12 39 02 F6 | 	mov	local14, local04
0140c     03 38 66 F0 | 	shl	local14, #3
01410     F2 38 02 F1 | 	add	local14, objptr
01414     1C 2B 02 FB | 	rdlong	local07, local14
01418     12 37 02 F6 | 	mov	local13, local04
0141c     01 36 06 F1 | 	add	local13, #1
01420     03 36 66 F0 | 	shl	local13, #3
01424     F2 36 02 F1 | 	add	local13, objptr
01428     1B 35 02 FB | 	rdlong	local12, local13
0142c     12 45 02 F6 | 	mov	local20, local04
01430     01 44 06 F1 | 	add	local20, #1
01434     22 47 02 F6 | 	mov	local21, local20
01438     03 46 66 F0 | 	shl	local21, #3
0143c     F2 48 02 F6 | 	mov	local22, objptr
01440     F2 46 02 F1 | 	add	local21, objptr
01444     23 13 02 FB | 	rdlong	arg01, local21
01448     53 00 00 FF 
0144c     E0 E5 85 F1 | 	sub	objptr, ##42976
01450     09 2D 02 F6 | 	mov	local08, arg01
01454     97 06 48 FB | 	callpa	#(@LR__0060-@LR__0059)>>2,fcache_load_ptr_
01458                 | LR__0059
01458     16 FB C9 FA | 	rdbyte	result1, local08 wz
0145c     01 2C 06 51 |  if_ne	add	local08, #1
01460     F4 FF 9F 5D |  if_ne	jmp	#LR__0059
01464                 | LR__0060
01464     09 2D 82 F1 | 	sub	local08, arg01
01468     16 33 02 F6 | 	mov	local11, local08
0146c     01 32 86 F1 | 	sub	local11, #1
01470     1A 13 02 F6 | 	mov	arg01, local12
01474     19 15 02 F6 | 	mov	arg02, local11
01478     D0 98 B1 FD | 	call	#__system__Right_S
0147c     FD 34 02 F6 | 	mov	local12, result1
01480     15 13 02 F6 | 	mov	arg01, local07
01484     1A 15 02 F6 | 	mov	arg02, local12
01488     84 78 B1 FD | 	call	#__system___string_concat
0148c     18 FB 61 FC | 	wrlong	result1, local10
01490                 | '    for j=i+1 to k: lparts(j)=lparts(j+1): next j  
01490     12 3B 02 F6 | 	mov	local15, local04
01494     01 3A 06 F1 | 	add	local15, #1
01498     1E 4B 02 F6 | 	mov	local23, local16
0149c     01 4A 06 F1 | 	add	local23, #1
014a0     97 3C 48 FB | 	callpa	#(@LR__0062-@LR__0061)>>2,fcache_load_ptr_
014a4                 | LR__0061
014a4     25 3B 52 F2 | 	cmps	local15, local23 wc
014a8     70 00 90 3D |  if_ae	jmp	#LR__0063
014ac     1D 29 02 F6 | 	mov	local06, local15
014b0     01 28 06 F1 | 	add	local06, #1
014b4     03 28 66 F0 | 	shl	local06, #3
014b8     53 00 00 FF 
014bc     E0 E5 05 F1 | 	add	objptr, ##42976
014c0     F2 28 02 F1 | 	add	local06, objptr
014c4     14 1F 02 FB | 	rdlong	local01, local06
014c8     1D 2B 02 F6 | 	mov	local07, local15
014cc     01 2A 06 F1 | 	add	local07, #1
014d0     03 2A 66 F0 | 	shl	local07, #3
014d4     F2 2A 02 F1 | 	add	local07, objptr
014d8     04 2A 06 F1 | 	add	local07, #4
014dc     15 27 02 FB | 	rdlong	local05, local07
014e0     1D 2B 02 F6 | 	mov	local07, local15
014e4     03 2A 66 F0 | 	shl	local07, #3
014e8     F2 34 02 F6 | 	mov	local12, objptr
014ec     F2 2A 02 F1 | 	add	local07, objptr
014f0     15 1F 62 FC | 	wrlong	local01, local07
014f4     1D 33 02 F6 | 	mov	local11, local15
014f8     19 37 02 F6 | 	mov	local13, local11
014fc     03 36 66 F0 | 	shl	local13, #3
01500     F2 36 02 F1 | 	add	local13, objptr
01504     04 36 06 F1 | 	add	local13, #4
01508     1B 27 62 FC | 	wrlong	local05, local13
0150c     01 3A 06 F1 | 	add	local15, #1
01510     53 00 00 FF 
01514     E0 E5 85 F1 | 	sub	objptr, ##42976
01518     88 FF 9F FD | 	jmp	#LR__0061
0151c                 | LR__0062
0151c                 | LR__0063
0151c     01 24 86 F1 | 	sub	local04, #1
01520     01 3C 86 F1 | 	sub	local16, #1
01524                 | LR__0064
01524     01 24 06 F1 | 	add	local04, #1
01528     1E 25 52 F2 | 	cmps	local04, local16 wc
0152c     3C FE 9F CD |  if_b	jmp	#LR__0058
01530     00 24 06 F6 | 	mov	local04, #0
01534                 | '  
01534                 | ' ' 1e2: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
01534                 | '  
01534                 | ' i=0 : do
01534                 | LR__0065
01534     12 31 02 F6 | 	mov	local10, local04
01538     03 30 66 F0 | 	shl	local10, #3
0153c     53 00 00 FF 
01540     E0 E5 05 F1 | 	add	objptr, ##42976
01544     F2 30 02 F1 | 	add	local10, objptr
01548     18 2B 02 FB | 	rdlong	local07, local10
0154c     26 00 00 FF 
01550     C8 E4 05 F1 | 	add	objptr, ##19656
01554     F2 2A 62 FC | 	wrlong	local07, objptr
01558     12 31 02 F6 | 	mov	local10, local04
0155c     01 30 06 F1 | 	add	local10, #1
01560     03 30 66 F0 | 	shl	local10, #3
01564     26 00 00 FF 
01568     C8 E4 85 F1 | 	sub	objptr, ##19656
0156c     F2 30 02 F1 | 	add	local10, objptr
01570     18 2B 02 FB | 	rdlong	local07, local10
01574     26 00 00 FF 
01578     CC E4 05 F1 | 	add	objptr, ##19660
0157c     F2 2A 62 FC | 	wrlong	local07, objptr
01580                 | '   if ((s1$=">" orelse s1$=">" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
01580     04 E4 85 F1 | 	sub	objptr, #4
01584     F2 12 02 FB | 	rdlong	arg01, objptr
01588     7A 00 00 FF 
0158c     A8 E4 85 F1 | 	sub	objptr, ##62632
01590     41 01 00 FF 
01594     6B 14 06 F6 | 	mov	arg02, ##@LR__4314
01598     40 77 B1 FD | 	call	#__system___string_cmp
0159c     00 FA 0D F2 | 	cmp	result1, #0 wz
015a0     04 01 90 AD |  if_e	jmp	#LR__0066
015a4     7A 00 00 FF 
015a8     A8 E4 05 F1 | 	add	objptr, ##62632
015ac     F2 12 02 FB | 	rdlong	arg01, objptr
015b0     7A 00 00 FF 
015b4     A8 E4 85 F1 | 	sub	objptr, ##62632
015b8     41 01 00 FF 
015bc     6D 14 06 F6 | 	mov	arg02, ##@LR__4315
015c0     18 77 B1 FD | 	call	#__system___string_cmp
015c4     FD 26 0A F6 | 	mov	local05, result1 wz
015c8     DC 00 90 AD |  if_e	jmp	#LR__0066
015cc     7A 00 00 FF 
015d0     A8 E4 05 F1 | 	add	objptr, ##62632
015d4     F2 12 02 FB | 	rdlong	arg01, objptr
015d8     7A 00 00 FF 
015dc     A8 E4 85 F1 | 	sub	objptr, ##62632
015e0     41 01 00 FF 
015e4     6F 14 06 F6 | 	mov	arg02, ##@LR__4316
015e8     F0 76 B1 FD | 	call	#__system___string_cmp
015ec     00 FA 0D F2 | 	cmp	result1, #0 wz
015f0     B4 00 90 AD |  if_e	jmp	#LR__0066
015f4     7A 00 00 FF 
015f8     A8 E4 05 F1 | 	add	objptr, ##62632
015fc     F2 12 02 FB | 	rdlong	arg01, objptr
01600     7A 00 00 FF 
01604     A8 E4 85 F1 | 	sub	objptr, ##62632
01608     41 01 00 FF 
0160c     71 34 06 F6 | 	mov	local12, ##@LR__4317
01610     1A 15 02 F6 | 	mov	arg02, local12
01614     C4 76 B1 FD | 	call	#__system___string_cmp
01618     00 FA 0D F2 | 	cmp	result1, #0 wz
0161c     88 00 90 AD |  if_e	jmp	#LR__0066
01620     7A 00 00 FF 
01624     A8 E4 05 F1 | 	add	objptr, ##62632
01628     F2 12 02 FB | 	rdlong	arg01, objptr
0162c     7A 00 00 FF 
01630     A8 E4 85 F1 | 	sub	objptr, ##62632
01634     41 01 00 FF 
01638     73 32 06 F6 | 	mov	local11, ##@LR__4318
0163c     19 35 02 F6 | 	mov	local12, local11
01640     1A 15 02 F6 | 	mov	arg02, local12
01644     94 76 B1 FD | 	call	#__system___string_cmp
01648     00 FA 0D F2 | 	cmp	result1, #0 wz
0164c     58 00 90 AD |  if_e	jmp	#LR__0066
01650     7A 00 00 FF 
01654     A8 E4 05 F1 | 	add	objptr, ##62632
01658     F2 12 02 FB | 	rdlong	arg01, objptr
0165c     7A 00 00 FF 
01660     A8 E4 85 F1 | 	sub	objptr, ##62632
01664     41 01 00 FF 
01668     75 32 06 F6 | 	mov	local11, ##@LR__4319
0166c     19 15 02 F6 | 	mov	arg02, local11
01670     68 76 B1 FD | 	call	#__system___string_cmp
01674     FD 34 0A F6 | 	mov	local12, result1 wz
01678     2C 00 90 AD |  if_e	jmp	#LR__0066
0167c     7A 00 00 FF 
01680     A8 E4 05 F1 | 	add	objptr, ##62632
01684     F2 12 02 FB | 	rdlong	arg01, objptr
01688     7A 00 00 FF 
0168c     A8 E4 85 F1 | 	sub	objptr, ##62632
01690     41 01 00 FF 
01694     77 38 06 F6 | 	mov	local14, ##@LR__4320
01698     1C 15 02 F6 | 	mov	arg02, local14
0169c     3C 76 B1 FD | 	call	#__system___string_cmp
016a0     FD 32 0A F6 | 	mov	local11, result1 wz
016a4     30 00 90 5D |  if_ne	jmp	#LR__0067
016a8                 | LR__0066
016a8     7A 00 00 FF 
016ac     AC E4 05 F1 | 	add	objptr, ##62636
016b0     F2 12 02 FB | 	rdlong	arg01, objptr
016b4     7A 00 00 FF 
016b8     AC E4 85 F1 | 	sub	objptr, ##62636
016bc     41 01 00 FF 
016c0     79 4C 06 F6 | 	mov	local24, ##@LR__4321
016c4     26 37 02 F6 | 	mov	local13, local24
016c8     1B 15 02 F6 | 	mov	arg02, local13
016cc     0C 76 B1 FD | 	call	#__system___string_cmp
016d0     FD 38 0A F6 | 	mov	local14, result1 wz
016d4     18 01 90 AD |  if_e	jmp	#LR__0070
016d8                 | LR__0067
016d8     7A 00 00 FF 
016dc     A8 E4 05 F1 | 	add	objptr, ##62632
016e0     F2 12 02 FB | 	rdlong	arg01, objptr
016e4     7A 00 00 FF 
016e8     A8 E4 85 F1 | 	sub	objptr, ##62632
016ec     41 01 00 FF 
016f0     7B 4C 06 F6 | 	mov	local24, ##@LR__4322
016f4     26 15 02 F6 | 	mov	arg02, local24
016f8     E0 75 B1 FD | 	call	#__system___string_cmp
016fc     FD 36 0A F6 | 	mov	local13, result1 wz
01700     30 00 90 5D |  if_ne	jmp	#LR__0068
01704     7A 00 00 FF 
01708     AC E4 05 F1 | 	add	objptr, ##62636
0170c     F2 12 02 FB | 	rdlong	arg01, objptr
01710     7A 00 00 FF 
01714     AC E4 85 F1 | 	sub	objptr, ##62636
01718     41 01 00 FF 
0171c     7D 46 06 F6 | 	mov	local21, ##@LR__4323
01720     23 45 02 F6 | 	mov	local20, local21
01724     22 15 02 F6 | 	mov	arg02, local20
01728     B0 75 B1 FD | 	call	#__system___string_cmp
0172c     FD 4C 0A F6 | 	mov	local24, result1 wz
01730     BC 00 90 AD |  if_e	jmp	#LR__0070
01734                 | LR__0068
01734     7A 00 00 FF 
01738     A8 E4 05 F1 | 	add	objptr, ##62632
0173c     F2 12 02 FB | 	rdlong	arg01, objptr
01740     7A 00 00 FF 
01744     A8 E4 85 F1 | 	sub	objptr, ##62632
01748     41 01 00 FF 
0174c     7F 46 06 F6 | 	mov	local21, ##@LR__4324
01750     23 15 02 F6 | 	mov	arg02, local21
01754     84 75 B1 FD | 	call	#__system___string_cmp
01758     FD 44 0A F6 | 	mov	local20, result1 wz
0175c     30 00 90 5D |  if_ne	jmp	#LR__0069
01760     7A 00 00 FF 
01764     AC E4 05 F1 | 	add	objptr, ##62636
01768     F2 12 02 FB | 	rdlong	arg01, objptr
0176c     7A 00 00 FF 
01770     AC E4 85 F1 | 	sub	objptr, ##62636
01774     41 01 00 FF 
01778     81 4E 06 F6 | 	mov	local25, ##@LR__4325
0177c     27 49 02 F6 | 	mov	local22, local25
01780     24 15 02 F6 | 	mov	arg02, local22
01784     54 75 B1 FD | 	call	#__system___string_cmp
01788     FD 46 0A F6 | 	mov	local21, result1 wz
0178c     60 00 90 AD |  if_e	jmp	#LR__0070
01790                 | LR__0069
01790     7A 00 00 FF 
01794     A8 E4 05 F1 | 	add	objptr, ##62632
01798     F2 12 02 FB | 	rdlong	arg01, objptr
0179c     7A 00 00 FF 
017a0     A8 E4 85 F1 | 	sub	objptr, ##62632
017a4     41 01 00 FF 
017a8     83 50 06 F6 | 	mov	local26, ##@LR__4326
017ac     28 4F 02 F6 | 	mov	local25, local26
017b0     27 15 02 F6 | 	mov	arg02, local25
017b4     24 75 B1 FD | 	call	#__system___string_cmp
017b8     FD 48 0A F6 | 	mov	local22, result1 wz
017bc     10 01 90 5D |  if_ne	jmp	#LR__0074
017c0     7A 00 00 FF 
017c4     AC E4 05 F1 | 	add	objptr, ##62636
017c8     F2 12 02 FB | 	rdlong	arg01, objptr
017cc     7A 00 00 FF 
017d0     AC E4 85 F1 | 	sub	objptr, ##62636
017d4     41 01 00 FF 
017d8     85 52 06 F6 | 	mov	local27, ##@LR__4327
017dc     29 51 02 F6 | 	mov	local26, local27
017e0     28 15 02 F6 | 	mov	arg02, local26
017e4     F4 74 B1 FD | 	call	#__system___string_cmp
017e8     FD 4E 0A F6 | 	mov	local25, result1 wz
017ec     E0 00 90 5D |  if_ne	jmp	#LR__0074
017f0                 | LR__0070
017f0     12 31 02 F6 | 	mov	local10, local04
017f4     03 30 66 F0 | 	shl	local10, #3
017f8     53 00 00 FF 
017fc     E0 E5 05 F1 | 	add	objptr, ##42976
01800     F2 30 02 F1 | 	add	local10, objptr
01804     26 00 00 FF 
01808     C8 E4 05 F1 | 	add	objptr, ##19656
0180c     F2 12 02 FB | 	rdlong	arg01, objptr
01810     04 E4 05 F1 | 	add	objptr, #4
01814     F2 32 02 FB | 	rdlong	local11, objptr
01818     7A 00 00 FF 
0181c     AC E4 85 F1 | 	sub	objptr, ##62636
01820     19 35 02 F6 | 	mov	local12, local11
01824     1A 15 02 F6 | 	mov	arg02, local12
01828     E4 74 B1 FD | 	call	#__system___string_concat
0182c     18 FB 61 FC | 	wrlong	result1, local10
01830                 | '     lparts(i).part$=s1$+s2$
01830                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
01830     12 3B 02 F6 | 	mov	local15, local04
01834     01 3A 06 F1 | 	add	local15, #1
01838     1E 55 02 F6 | 	mov	local28, local16
0183c     01 54 06 F1 | 	add	local28, #1
01840     97 42 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
01844                 | LR__0071
01844     2A 3B 52 F2 | 	cmps	local15, local28 wc
01848     7C 00 90 3D |  if_ae	jmp	#LR__0073
0184c     1D 29 02 F6 | 	mov	local06, local15
01850     01 28 06 F1 | 	add	local06, #1
01854     03 28 66 F0 | 	shl	local06, #3
01858     53 00 00 FF 
0185c     E0 E5 05 F1 | 	add	objptr, ##42976
01860     F2 28 02 F1 | 	add	local06, objptr
01864     14 1F 02 FB | 	rdlong	local01, local06
01868     1D 2B 02 F6 | 	mov	local07, local15
0186c     01 2A 06 F1 | 	add	local07, #1
01870     03 2A 66 F0 | 	shl	local07, #3
01874     F2 2A 02 F1 | 	add	local07, objptr
01878     04 2A 06 F1 | 	add	local07, #4
0187c     15 27 02 FB | 	rdlong	local05, local07
01880     1D 2B 02 F6 | 	mov	local07, local15
01884     03 2A 66 F0 | 	shl	local07, #3
01888     F2 34 02 F6 | 	mov	local12, objptr
0188c     F2 2A 02 F1 | 	add	local07, objptr
01890     15 1F 62 FC | 	wrlong	local01, local07
01894     1D 33 02 F6 | 	mov	local11, local15
01898     19 39 02 F6 | 	mov	local14, local11
0189c     1C 37 02 F6 | 	mov	local13, local14
018a0     03 36 66 F0 | 	shl	local13, #3
018a4     F2 4C 02 F6 | 	mov	local24, objptr
018a8     F2 36 02 F1 | 	add	local13, objptr
018ac     04 36 06 F1 | 	add	local13, #4
018b0     1B 27 62 FC | 	wrlong	local05, local13
018b4     04 36 86 F1 | 	sub	local13, #4
018b8     01 3A 06 F1 | 	add	local15, #1
018bc     53 00 00 FF 
018c0     E0 E5 85 F1 | 	sub	objptr, ##42976
018c4     7C FF 9F FD | 	jmp	#LR__0071
018c8                 | LR__0072
018c8                 | LR__0073
018c8     01 24 86 F1 | 	sub	local04, #1
018cc     01 3C 86 F1 | 	sub	local16, #1
018d0                 | LR__0074
018d0     01 24 06 F1 | 	add	local04, #1
018d4     1E 25 52 F2 | 	cmps	local04, local16 wc
018d8     58 FC 9F CD |  if_b	jmp	#LR__0065
018dc                 | '  
018dc                 | ' ' 1f : now remove parts that are spaces
018dc                 | ' 
018dc                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
018dc     00 24 06 F6 | 	mov	local04, #0
018e0     1E 57 02 F6 | 	mov	local29, local16
018e4     01 56 06 F1 | 	add	local29, #1
018e8                 | LR__0075
018e8     2B 25 52 F2 | 	cmps	local04, local29 wc
018ec     50 00 90 3D |  if_ae	jmp	#LR__0076
018f0     12 31 02 F6 | 	mov	local10, local04
018f4     03 30 66 F0 | 	shl	local10, #3
018f8     53 00 00 FF 
018fc     E0 E5 05 F1 | 	add	objptr, ##42976
01900     F2 30 02 F1 | 	add	local10, objptr
01904     12 35 02 F6 | 	mov	local12, local04
01908     1A 33 02 F6 | 	mov	local11, local12
0190c     19 39 02 F6 | 	mov	local14, local11
01910     03 38 66 F0 | 	shl	local14, #3
01914     F2 36 02 F6 | 	mov	local13, objptr
01918     F2 38 02 F1 | 	add	local14, objptr
0191c     1C 13 02 FB | 	rdlong	arg01, local14
01920     53 00 00 FF 
01924     E0 E5 85 F1 | 	sub	objptr, ##42976
01928     CC 97 B1 FD | 	call	#__system__RTrim_S
0192c     FD 12 02 F6 | 	mov	arg01, result1
01930     04 97 B1 FD | 	call	#__system__LTrim_S
01934     18 FB 61 FC | 	wrlong	result1, local10
01938     01 24 06 F1 | 	add	local04, #1
0193c     A8 FF 9F FD | 	jmp	#LR__0075
01940                 | LR__0076
01940     00 24 06 F6 | 	mov	local04, #0
01944     97 8A 48 FB | 	callpa	#(@LR__0083-@LR__0077)>>2,fcache_load_ptr_
01948                 | ' 
01948                 | ' i=0
01948                 | ' do 
01948                 | LR__0077
01948                 | '   if len(lparts(i).part$)=0 then 
01948     12 31 02 F6 | 	mov	local10, local04
0194c     18 29 02 F6 | 	mov	local06, local10
01950     03 28 66 F0 | 	shl	local06, #3
01954     53 00 00 FF 
01958     E0 E5 05 F1 | 	add	objptr, ##42976
0195c     F2 28 02 F1 | 	add	local06, objptr
01960     14 13 02 FB | 	rdlong	arg01, local06
01964     53 00 00 FF 
01968     E0 E5 85 F1 | 	sub	objptr, ##42976
0196c     09 2D 02 F6 | 	mov	local08, arg01
01970                 | LR__0078
01970     16 FB C9 FA | 	rdbyte	result1, local08 wz
01974     01 2C 06 51 |  if_ne	add	local08, #1
01978     F4 FF 9F 5D |  if_ne	jmp	#LR__0078
0197c     09 2D 8A F1 | 	sub	local08, arg01 wz
01980     C4 00 90 5D |  if_ne	jmp	#LR__0082
01984                 | '     if i=k-1 then k-=1  :  exit
01984     1E 1F 02 F6 | 	mov	local01, local16
01988     01 1E 86 F1 | 	sub	local01, #1
0198c     0F 25 0A F2 | 	cmp	local04, local01 wz
01990     01 3C 86 A1 |  if_e	sub	local16, #1
01994     C4 00 90 AD |  if_e	jmp	#LR__0084
01998                 | '     if i<k-1 then 
01998     1E 1F 02 F6 | 	mov	local01, local16
0199c     01 1E 86 F1 | 	sub	local01, #1
019a0     0F 25 52 F2 | 	cmps	local04, local01 wc
019a4     A0 00 90 3D |  if_ae	jmp	#LR__0081
019a8                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
019a8     12 3B 02 F6 | 	mov	local15, local04
019ac     1E 59 02 F6 | 	mov	local30, local16
019b0     01 58 86 F1 | 	sub	local30, #1
019b4                 | LR__0079
019b4     2C 3B 52 F2 | 	cmps	local15, local30 wc
019b8     80 00 90 3D |  if_ae	jmp	#LR__0080
019bc     1D 29 02 F6 | 	mov	local06, local15
019c0     01 28 06 F1 | 	add	local06, #1
019c4     03 28 66 F0 | 	shl	local06, #3
019c8     53 00 00 FF 
019cc     E0 E5 05 F1 | 	add	objptr, ##42976
019d0     F2 28 02 F1 | 	add	local06, objptr
019d4     14 1F 02 FB | 	rdlong	local01, local06
019d8     1D 2B 02 F6 | 	mov	local07, local15
019dc     01 2A 06 F1 | 	add	local07, #1
019e0     03 2A 66 F0 | 	shl	local07, #3
019e4     F2 2A 02 F1 | 	add	local07, objptr
019e8     04 2A 06 F1 | 	add	local07, #4
019ec     15 27 02 FB | 	rdlong	local05, local07
019f0     1D 31 02 F6 | 	mov	local10, local15
019f4     18 2B 02 F6 | 	mov	local07, local10
019f8     03 2A 66 F0 | 	shl	local07, #3
019fc     F2 34 02 F6 | 	mov	local12, objptr
01a00     F2 2A 02 F1 | 	add	local07, objptr
01a04     15 1F 62 FC | 	wrlong	local01, local07
01a08     1D 33 02 F6 | 	mov	local11, local15
01a0c     19 39 02 F6 | 	mov	local14, local11
01a10     1C 37 02 F6 | 	mov	local13, local14
01a14     03 36 66 F0 | 	shl	local13, #3
01a18     F2 4C 02 F6 | 	mov	local24, objptr
01a1c     F2 36 02 F1 | 	add	local13, objptr
01a20     04 36 06 F1 | 	add	local13, #4
01a24     1B 27 62 FC | 	wrlong	local05, local13
01a28     04 36 86 F1 | 	sub	local13, #4
01a2c     01 3A 06 F1 | 	add	local15, #1
01a30     53 00 00 FF 
01a34     E0 E5 85 F1 | 	sub	objptr, ##42976
01a38     78 FF 9F FD | 	jmp	#LR__0079
01a3c                 | LR__0080
01a3c     01 3C 86 F1 | 	sub	local16, #1
01a40                 | '       if i>0 then i-=1 
01a40     01 24 56 F2 | 	cmps	local04, #1 wc
01a44     01 24 86 31 |  if_ae	sub	local04, #1
01a48                 | LR__0081
01a48                 | LR__0082
01a48     01 24 06 F1 | 	add	local04, #1
01a4c     1E 1F 02 F6 | 	mov	local01, local16
01a50     01 1E 86 F1 | 	sub	local01, #1
01a54     0F 25 5A F2 | 	cmps	local04, local01 wcz
01a58     EC FE 9F ED |  if_be	jmp	#LR__0077
01a5c                 | LR__0083
01a5c                 | LR__0084
01a5c                 | ' 
01a5c                 | ' ' 1g: lowercase all that is not a string
01a5c                 | ' 
01a5c                 | ' for j=0 to k-1
01a5c     00 3A 06 F6 | 	mov	local15, #0
01a60     1E 5B 02 F6 | 	mov	local31, local16
01a64                 | LR__0085
01a64     2D 3B 52 F2 | 	cmps	local15, local31 wc
01a68     C0 00 90 3D |  if_ae	jmp	#LR__0088
01a6c                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
01a6c     1D 29 02 F6 | 	mov	local06, local15
01a70     03 28 66 F0 | 	shl	local06, #3
01a74     53 00 00 FF 
01a78     E0 E5 05 F1 | 	add	objptr, ##42976
01a7c     F2 28 02 F1 | 	add	local06, objptr
01a80     14 13 02 FB | 	rdlong	arg01, local06
01a84     01 14 06 F6 | 	mov	arg02, #1
01a88     53 00 00 FF 
01a8c     E0 E5 85 F1 | 	sub	objptr, ##42976
01a90     30 92 B1 FD | 	call	#__system__Left_S
01a94     FD 12 02 F6 | 	mov	arg01, result1
01a98     41 01 00 FF 
01a9c     87 14 06 F6 | 	mov	arg02, ##@LR__4328
01aa0     38 72 B1 FD | 	call	#__system___string_cmp
01aa4     00 FA 0D F2 | 	cmp	result1, #0 wz
01aa8     40 00 90 5D |  if_ne	jmp	#LR__0086
01aac     1D 2B 02 F6 | 	mov	local07, local15
01ab0     03 2A 66 F0 | 	shl	local07, #3
01ab4     53 00 00 FF 
01ab8     E0 E5 05 F1 | 	add	objptr, ##42976
01abc     F2 2A 02 F1 | 	add	local07, objptr
01ac0     15 13 02 FB | 	rdlong	arg01, local07
01ac4     01 14 06 F6 | 	mov	arg02, #1
01ac8     53 00 00 FF 
01acc     E0 E5 85 F1 | 	sub	objptr, ##42976
01ad0     78 92 B1 FD | 	call	#__system__Right_S
01ad4     FD 12 02 F6 | 	mov	arg01, result1
01ad8     41 01 00 FF 
01adc     89 14 06 F6 | 	mov	arg02, ##@LR__4329
01ae0     F8 71 B1 FD | 	call	#__system___string_cmp
01ae4     00 FA 0D F2 | 	cmp	result1, #0 wz
01ae8     38 00 90 AD |  if_e	jmp	#LR__0087
01aec                 | LR__0086
01aec     1D 31 02 F6 | 	mov	local10, local15
01af0     03 30 66 F0 | 	shl	local10, #3
01af4     53 00 00 FF 
01af8     E0 E5 05 F1 | 	add	objptr, ##42976
01afc     F2 30 02 F1 | 	add	local10, objptr
01b00     1D 39 02 F6 | 	mov	local14, local15
01b04     03 38 66 F0 | 	shl	local14, #3
01b08     F2 36 02 F6 | 	mov	local13, objptr
01b0c     F2 38 02 F1 | 	add	local14, objptr
01b10     1C 13 02 FB | 	rdlong	arg01, local14
01b14     53 00 00 FF 
01b18     E0 E5 85 F1 | 	sub	objptr, ##42976
01b1c     58 94 B1 FD | 	call	#__system__LCase_S
01b20     18 FB 61 FC | 	wrlong	result1, local10
01b24                 | LR__0087
01b24     01 3A 06 F1 | 	add	local15, #1
01b28     38 FF 9F FD | 	jmp	#LR__0085
01b2c                 | LR__0088
01b2c                 | ' 
01b2c                 | ' '                                                         for i=0 to k-1 : print lparts(i).part$,: next i : print
01b2c                 | ' 
01b2c                 | ' for i=0 to k: lparts(i).token=-1: next i
01b2c     00 24 06 F6 | 	mov	local04, #0
01b30     1E 5D 02 F6 | 	mov	local32, local16
01b34     01 5C 06 F1 | 	add	local32, #1
01b38     97 1C 48 FB | 	callpa	#(@LR__0090-@LR__0089)>>2,fcache_load_ptr_
01b3c                 | LR__0089
01b3c     2E 25 52 F2 | 	cmps	local04, local32 wc
01b40     30 00 90 3D |  if_ae	jmp	#LR__0091
01b44     12 31 02 F6 | 	mov	local10, local04
01b48     03 30 66 F0 | 	shl	local10, #3
01b4c     53 00 00 FF 
01b50     E0 E5 05 F1 | 	add	objptr, ##42976
01b54     F2 30 02 F1 | 	add	local10, objptr
01b58     04 30 06 F1 | 	add	local10, #4
01b5c     FF FF FF FF 
01b60     18 FF 6B FC | 	wrlong	##-1, local10
01b64     01 24 06 F1 | 	add	local04, #1
01b68     53 00 00 FF 
01b6c     E0 E5 85 F1 | 	sub	objptr, ##42976
01b70     C8 FF 9F FD | 	jmp	#LR__0089
01b74                 | LR__0090
01b74                 | LR__0091
01b74                 | ' 
01b74                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
01b74                 | ' 
01b74                 | ' if len(lparts(0).part$)=0 then goto 101				' empty line, nothing to do
01b74     53 00 00 FF 
01b78     E0 E5 05 F1 | 	add	objptr, ##42976
01b7c     F2 12 02 FB | 	rdlong	arg01, objptr
01b80     53 00 00 FF 
01b84     E0 E5 85 F1 | 	sub	objptr, ##42976
01b88     09 2D 02 F6 | 	mov	local08, arg01
01b8c     97 06 48 FB | 	callpa	#(@LR__0093-@LR__0092)>>2,fcache_load_ptr_
01b90                 | LR__0092
01b90     16 FB C9 FA | 	rdbyte	result1, local08 wz
01b94     01 2C 06 51 |  if_ne	add	local08, #1
01b98     F4 FF 9F 5D |  if_ne	jmp	#LR__0092
01b9c                 | LR__0093
01b9c     09 2D 8A F1 | 	sub	local08, arg01 wz
01ba0     E0 15 90 AD |  if_e	jmp	#LR__0147
01ba4                 | ' 
01ba4                 | ' 
01ba4                 | ' if isdec(lparts(0).part$) then let addptr=1 else let addptr=0
01ba4     53 00 00 FF 
01ba8     E0 E5 05 F1 | 	add	objptr, ##42976
01bac     F2 12 02 FB | 	rdlong	arg01, objptr
01bb0     53 00 00 FF 
01bb4     E0 E5 85 F1 | 	sub	objptr, ##42976
01bb8     F8 2D B0 FD | 	call	#_isdec
01bbc     00 FA 0D F2 | 	cmp	result1, #0 wz
01bc0     7A 00 00 5F 
01bc4     B0 E4 05 51 |  if_ne	add	objptr, ##62640
01bc8     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01bcc     7A 00 00 FF 
01bd0     B0 E4 E5 F3 | 	sumnz	objptr, ##62640
01bd4     F2 00 68 AC |  if_e	wrlong	#0, objptr
01bd8     7A 00 00 AF 
01bdc     B0 E4 85 A1 |  if_e	sub	objptr, ##62640
01be0     7A 00 00 FF 
01be4     B0 E4 05 F1 | 	add	objptr, ##62640
01be8     F2 28 02 FB | 	rdlong	local06, objptr
01bec     03 28 66 F0 | 	shl	local06, #3
01bf0     26 00 00 FF 
01bf4     D0 E4 85 F1 | 	sub	objptr, ##19664
01bf8     F2 28 02 F1 | 	add	local06, objptr
01bfc     14 35 02 FB | 	rdlong	local12, local06
01c00     26 00 00 FF 
01c04     D4 E4 05 F1 | 	add	objptr, ##19668
01c08     F2 34 62 FC | 	wrlong	local12, objptr
01c0c     04 E4 85 F1 | 	sub	objptr, #4
01c10     F2 34 02 FB | 	rdlong	local12, objptr
01c14     03 34 66 F0 | 	shl	local12, #3
01c18     26 00 00 FF 
01c1c     D0 E4 85 F1 | 	sub	objptr, ##19664
01c20     F2 32 02 F6 | 	mov	local11, objptr
01c24     F2 34 02 F1 | 	add	local12, objptr
01c28     1A 15 02 FB | 	rdlong	arg02, local12
01c2c     41 01 00 FF 
01c30     8B 16 06 F6 | 	mov	arg03, ##@LR__4330
01c34     01 12 06 F6 | 	mov	arg01, #1
01c38     53 00 00 FF 
01c3c     E0 E5 85 F1 | 	sub	objptr, ##42976
01c40     6C 95 B1 FD | 	call	#__system__Instr
01c44     7A 00 00 FF 
01c48     B8 E4 05 F1 | 	add	objptr, ##62648
01c4c     F2 FA 61 FC | 	wrlong	result1, objptr
01c50                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 
01c50     FD 1E 02 F6 | 	mov	local01, result1
01c54     7A 00 00 FF 
01c58     B8 E4 85 F1 | 	sub	objptr, ##62648
01c5c     01 1E 56 F2 | 	cmps	local01, #1 wc
01c60     DC 01 90 CD |  if_b	jmp	#LR__0100
01c64     7A 00 00 FF 
01c68     B0 E4 05 F1 | 	add	objptr, ##62640
01c6c     F2 32 02 FB | 	rdlong	local11, objptr
01c70     03 32 66 F0 | 	shl	local11, #3
01c74     26 00 00 FF 
01c78     D0 E4 85 F1 | 	sub	objptr, ##19664
01c7c     F2 38 02 F6 | 	mov	local14, objptr
01c80     F2 32 02 F1 | 	add	local11, objptr
01c84     19 13 02 FB | 	rdlong	arg01, local11
01c88     53 00 00 FF 
01c8c     E0 E5 85 F1 | 	sub	objptr, ##42976
01c90     09 2D 02 F6 | 	mov	local08, arg01
01c94     97 06 48 FB | 	callpa	#(@LR__0095-@LR__0094)>>2,fcache_load_ptr_
01c98                 | LR__0094
01c98     16 FB C9 FA | 	rdbyte	result1, local08 wz
01c9c     01 2C 06 51 |  if_ne	add	local08, #1
01ca0     F4 FF 9F 5D |  if_ne	jmp	#LR__0094
01ca4                 | LR__0095
01ca4     09 2D 82 F1 | 	sub	local08, arg01
01ca8     16 31 02 F6 | 	mov	local10, local08
01cac     7A 00 00 FF 
01cb0     B8 E4 05 F1 | 	add	objptr, ##62648
01cb4     F2 28 02 FB | 	rdlong	local06, objptr
01cb8     7A 00 00 FF 
01cbc     B8 E4 85 F1 | 	sub	objptr, ##62648
01cc0     18 29 52 F2 | 	cmps	local06, local10 wc
01cc4     78 01 90 3D |  if_ae	jmp	#LR__0100
01cc8     01 3C 06 F1 | 	add	local16, #1
01ccc                 | '   k+=1
01ccc                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
01ccc     1E 25 02 F6 | 	mov	local04, local16
01cd0     7A 00 00 FF 
01cd4     B0 E4 05 F1 | 	add	objptr, ##62640
01cd8     F2 5E 02 FB | 	rdlong	local33, objptr
01cdc     01 5E 06 F1 | 	add	local33, #1
01ce0     26 00 00 FF 
01ce4     D0 E4 85 F1 | 	sub	objptr, ##19664
01ce8     97 2E 48 FB | 	callpa	#(@LR__0097-@LR__0096)>>2,fcache_load_ptr_
01cec                 | LR__0096
01cec     12 2B 02 F6 | 	mov	local07, local04
01cf0     01 2A 86 F1 | 	sub	local07, #1
01cf4     03 2A 66 F0 | 	shl	local07, #3
01cf8     F2 2A 02 F1 | 	add	local07, objptr
01cfc     15 27 02 FB | 	rdlong	local05, local07
01d00     12 35 02 F6 | 	mov	local12, local04
01d04     01 34 86 F1 | 	sub	local12, #1
01d08     03 34 66 F0 | 	shl	local12, #3
01d0c     F2 34 02 F1 | 	add	local12, objptr
01d10     04 34 06 F1 | 	add	local12, #4
01d14     1A 31 02 FB | 	rdlong	local10, local12
01d18     12 35 02 F6 | 	mov	local12, local04
01d1c     03 34 66 F0 | 	shl	local12, #3
01d20     F2 34 02 F1 | 	add	local12, objptr
01d24     1A 27 62 FC | 	wrlong	local05, local12
01d28     12 4D 02 F6 | 	mov	local24, local04
01d2c     03 4C 66 F0 | 	shl	local24, #3
01d30     F2 4C 02 F1 | 	add	local24, objptr
01d34     04 4C 06 F1 | 	add	local24, #4
01d38     26 31 62 FC | 	wrlong	local10, local24
01d3c     01 24 86 F1 | 	sub	local04, #1
01d40     2F 25 52 F2 | 	cmps	local04, local33 wc
01d44     A4 FF 9F 3D |  if_ae	jmp	#LR__0096
01d48                 | LR__0097
01d48     26 00 00 FF 
01d4c     D0 E4 05 F1 | 	add	objptr, ##19664
01d50     F2 4C 02 FB | 	rdlong	local24, objptr
01d54     26 29 02 F6 | 	mov	local06, local24
01d58     01 28 06 F1 | 	add	local06, #1
01d5c     03 28 66 F0 | 	shl	local06, #3
01d60     26 00 00 FF 
01d64     D0 E4 85 F1 | 	sub	objptr, ##19664
01d68     F2 28 02 F1 | 	add	local06, objptr
01d6c     03 4C 66 F0 | 	shl	local24, #3
01d70     F2 4C 02 F1 | 	add	local24, objptr
01d74     26 35 02 FB | 	rdlong	local12, local24
01d78     26 00 00 FF 
01d7c     D0 E4 05 F1 | 	add	objptr, ##19664
01d80     F2 46 02 FB | 	rdlong	local21, objptr
01d84     23 49 02 F6 | 	mov	local22, local21
01d88     03 48 66 F0 | 	shl	local22, #3
01d8c     26 00 00 FF 
01d90     D0 E4 85 F1 | 	sub	objptr, ##19664
01d94     F2 4E 02 F6 | 	mov	local25, objptr
01d98     F2 48 02 F1 | 	add	local22, objptr
01d9c     24 13 02 FB | 	rdlong	arg01, local22
01da0     53 00 00 FF 
01da4     E0 E5 85 F1 | 	sub	objptr, ##42976
01da8     09 2D 02 F6 | 	mov	local08, arg01
01dac     97 06 48 FB | 	callpa	#(@LR__0099-@LR__0098)>>2,fcache_load_ptr_
01db0                 | LR__0098
01db0     16 FB C9 FA | 	rdbyte	result1, local08 wz
01db4     01 2C 06 51 |  if_ne	add	local08, #1
01db8     F4 FF 9F 5D |  if_ne	jmp	#LR__0098
01dbc                 | LR__0099
01dbc     09 2D 82 F1 | 	sub	local08, arg01
01dc0     16 15 02 F6 | 	mov	arg02, local08
01dc4     7A 00 00 FF 
01dc8     B8 E4 05 F1 | 	add	objptr, ##62648
01dcc     F2 4C 02 FB | 	rdlong	local24, objptr
01dd0     7A 00 00 FF 
01dd4     B8 E4 85 F1 | 	sub	objptr, ##62648
01dd8     26 15 82 F1 | 	sub	arg02, local24
01ddc     1A 13 02 F6 | 	mov	arg01, local12
01de0     68 8F B1 FD | 	call	#__system__Right_S
01de4     14 FB 61 FC | 	wrlong	result1, local06
01de8     7A 00 00 FF 
01dec     B0 E4 05 F1 | 	add	objptr, ##62640
01df0     F2 36 02 FB | 	rdlong	local13, objptr
01df4     1B 29 02 F6 | 	mov	local06, local13
01df8     03 28 66 F0 | 	shl	local06, #3
01dfc     26 00 00 FF 
01e00     D0 E4 85 F1 | 	sub	objptr, ##19664
01e04     F2 28 02 F1 | 	add	local06, objptr
01e08     1B 4D 02 F6 | 	mov	local24, local13
01e0c     03 4C 66 F0 | 	shl	local24, #3
01e10     F2 44 02 F6 | 	mov	local20, objptr
01e14     F2 4C 02 F1 | 	add	local24, objptr
01e18     26 13 02 FB | 	rdlong	arg01, local24
01e1c     26 00 00 FF 
01e20     D8 E4 05 F1 | 	add	objptr, ##19672
01e24     F2 38 02 FB | 	rdlong	local14, objptr
01e28     7A 00 00 FF 
01e2c     B8 E4 85 F1 | 	sub	objptr, ##62648
01e30     1C 33 02 F6 | 	mov	local11, local14
01e34     19 15 02 F6 | 	mov	arg02, local11
01e38     88 8E B1 FD | 	call	#__system__Left_S
01e3c     14 FB 61 FC | 	wrlong	result1, local06
01e40                 | LR__0100
01e40                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then
01e40     7A 00 00 FF 
01e44     B0 E4 05 F1 | 	add	objptr, ##62640
01e48     F2 2A 02 FB | 	rdlong	local07, objptr
01e4c     03 2A 66 F0 | 	shl	local07, #3
01e50     26 00 00 FF 
01e54     D0 E4 85 F1 | 	sub	objptr, ##19664
01e58     F2 2A 02 F1 | 	add	local07, objptr
01e5c     15 13 02 FB | 	rdlong	arg01, local07
01e60     01 14 06 F6 | 	mov	arg02, #1
01e64     53 00 00 FF 
01e68     E0 E5 85 F1 | 	sub	objptr, ##42976
01e6c     54 8E B1 FD | 	call	#__system__Left_S
01e70     FD 12 02 F6 | 	mov	arg01, result1
01e74     41 01 00 FF 
01e78     8D 14 06 F6 | 	mov	arg02, ##@LR__4331
01e7c     5C 6E B1 FD | 	call	#__system___string_cmp
01e80     00 FA 0D F2 | 	cmp	result1, #0 wz
01e84     9C 01 90 5D |  if_ne	jmp	#LR__0107
01e88     7A 00 00 FF 
01e8c     B0 E4 05 F1 | 	add	objptr, ##62640
01e90     F2 34 02 FB | 	rdlong	local12, objptr
01e94     03 34 66 F0 | 	shl	local12, #3
01e98     26 00 00 FF 
01e9c     D0 E4 85 F1 | 	sub	objptr, ##19664
01ea0     F2 32 02 F6 | 	mov	local11, objptr
01ea4     F2 34 02 F1 | 	add	local12, objptr
01ea8     1A 13 02 FB | 	rdlong	arg01, local12
01eac     53 00 00 FF 
01eb0     E0 E5 85 F1 | 	sub	objptr, ##42976
01eb4     09 2D 02 F6 | 	mov	local08, arg01
01eb8     97 06 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01ebc                 | LR__0101
01ebc     16 FB C9 FA | 	rdbyte	result1, local08 wz
01ec0     01 2C 06 51 |  if_ne	add	local08, #1
01ec4     F4 FF 9F 5D |  if_ne	jmp	#LR__0101
01ec8                 | LR__0102
01ec8     09 2D 82 F1 | 	sub	local08, arg01
01ecc     02 2C 56 F2 | 	cmps	local08, #2 wc
01ed0     50 01 90 CD |  if_b	jmp	#LR__0107
01ed4     01 3C 06 F1 | 	add	local16, #1
01ed8                 | '   k+=1
01ed8                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
01ed8     1E 25 02 F6 | 	mov	local04, local16
01edc     7A 00 00 FF 
01ee0     B0 E4 05 F1 | 	add	objptr, ##62640
01ee4     F2 60 02 FB | 	rdlong	local34, objptr
01ee8     01 60 06 F1 | 	add	local34, #1
01eec     26 00 00 FF 
01ef0     D0 E4 85 F1 | 	sub	objptr, ##19664
01ef4     97 2E 48 FB | 	callpa	#(@LR__0104-@LR__0103)>>2,fcache_load_ptr_
01ef8                 | LR__0103
01ef8     12 2B 02 F6 | 	mov	local07, local04
01efc     01 2A 86 F1 | 	sub	local07, #1
01f00     03 2A 66 F0 | 	shl	local07, #3
01f04     F2 2A 02 F1 | 	add	local07, objptr
01f08     15 27 02 FB | 	rdlong	local05, local07
01f0c     12 35 02 F6 | 	mov	local12, local04
01f10     01 34 86 F1 | 	sub	local12, #1
01f14     03 34 66 F0 | 	shl	local12, #3
01f18     F2 34 02 F1 | 	add	local12, objptr
01f1c     04 34 06 F1 | 	add	local12, #4
01f20     1A 31 02 FB | 	rdlong	local10, local12
01f24     12 35 02 F6 | 	mov	local12, local04
01f28     03 34 66 F0 | 	shl	local12, #3
01f2c     F2 34 02 F1 | 	add	local12, objptr
01f30     1A 27 62 FC | 	wrlong	local05, local12
01f34     12 4D 02 F6 | 	mov	local24, local04
01f38     03 4C 66 F0 | 	shl	local24, #3
01f3c     F2 4C 02 F1 | 	add	local24, objptr
01f40     04 4C 06 F1 | 	add	local24, #4
01f44     26 31 62 FC | 	wrlong	local10, local24
01f48     01 24 86 F1 | 	sub	local04, #1
01f4c     30 25 52 F2 | 	cmps	local04, local34 wc
01f50     A4 FF 9F 3D |  if_ae	jmp	#LR__0103
01f54                 | LR__0104
01f54     26 00 00 FF 
01f58     D0 E4 05 F1 | 	add	objptr, ##19664
01f5c     F2 4C 02 FB | 	rdlong	local24, objptr
01f60     26 29 02 F6 | 	mov	local06, local24
01f64     01 28 06 F1 | 	add	local06, #1
01f68     03 28 66 F0 | 	shl	local06, #3
01f6c     26 00 00 FF 
01f70     D0 E4 85 F1 | 	sub	objptr, ##19664
01f74     F2 28 02 F1 | 	add	local06, objptr
01f78     03 4C 66 F0 | 	shl	local24, #3
01f7c     F2 4C 02 F1 | 	add	local24, objptr
01f80     26 35 02 FB | 	rdlong	local12, local24
01f84     26 00 00 FF 
01f88     D0 E4 05 F1 | 	add	objptr, ##19664
01f8c     F2 44 02 FB | 	rdlong	local20, objptr
01f90     22 4D 02 F6 | 	mov	local24, local20
01f94     26 47 02 F6 | 	mov	local21, local24
01f98     23 49 02 F6 | 	mov	local22, local21
01f9c     03 48 66 F0 | 	shl	local22, #3
01fa0     26 00 00 FF 
01fa4     D0 E4 85 F1 | 	sub	objptr, ##19664
01fa8     F2 4E 02 F6 | 	mov	local25, objptr
01fac     F2 48 02 F1 | 	add	local22, objptr
01fb0     24 13 02 FB | 	rdlong	arg01, local22
01fb4     53 00 00 FF 
01fb8     E0 E5 85 F1 | 	sub	objptr, ##42976
01fbc     09 2D 02 F6 | 	mov	local08, arg01
01fc0     97 06 48 FB | 	callpa	#(@LR__0106-@LR__0105)>>2,fcache_load_ptr_
01fc4                 | LR__0105
01fc4     16 FB C9 FA | 	rdbyte	result1, local08 wz
01fc8     01 2C 06 51 |  if_ne	add	local08, #1
01fcc     F4 FF 9F 5D |  if_ne	jmp	#LR__0105
01fd0                 | LR__0106
01fd0     09 2D 82 F1 | 	sub	local08, arg01
01fd4     16 37 02 F6 | 	mov	local13, local08
01fd8     1B 39 02 F6 | 	mov	local14, local13
01fdc     01 38 86 F1 | 	sub	local14, #1
01fe0     1C 33 02 F6 | 	mov	local11, local14
01fe4     1A 13 02 F6 | 	mov	arg01, local12
01fe8     19 15 02 F6 | 	mov	arg02, local11
01fec     5C 8D B1 FD | 	call	#__system__Right_S
01ff0     14 FB 61 FC | 	wrlong	result1, local06
01ff4     7A 00 00 FF 
01ff8     B0 E4 05 F1 | 	add	objptr, ##62640
01ffc     F2 28 02 FB | 	rdlong	local06, objptr
02000     03 28 66 F0 | 	shl	local06, #3
02004     26 00 00 FF 
02008     D0 E4 85 F1 | 	sub	objptr, ##19664
0200c     F2 28 02 F1 | 	add	local06, objptr
02010     41 01 00 FF 
02014     8F 34 06 F6 | 	mov	local12, ##@LR__4332
02018     14 35 62 FC | 	wrlong	local12, local06
0201c     53 00 00 FF 
02020     E0 E5 85 F1 | 	sub	objptr, ##42976
02024                 | LR__0107
02024     7A 00 00 FF 
02028     B0 E4 05 F1 | 	add	objptr, ##62640
0202c     F2 28 02 FB | 	rdlong	local06, objptr
02030     03 28 66 F0 | 	shl	local06, #3
02034     26 00 00 FF 
02038     D0 E4 85 F1 | 	sub	objptr, ##19664
0203c     F2 28 02 F1 | 	add	local06, objptr
02040     14 35 02 FB | 	rdlong	local12, local06
02044     26 00 00 FF 
02048     D4 E4 05 F1 | 	add	objptr, ##19668
0204c     F2 34 62 FC | 	wrlong	local12, objptr
02050                 | ' 
02050                 | ' ' process the case when simple load or save is called without ""
02050                 | ' 
02050                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") andalso lparts(addptr+1).token=token_name then 
02050     7A 00 00 FF 
02054     B4 E4 85 F1 | 	sub	objptr, ##62644
02058     41 01 00 FF 
0205c     91 14 06 F6 | 	mov	arg02, ##@LR__4333
02060     1A 13 02 F6 | 	mov	arg01, local12
02064     74 6C B1 FD | 	call	#__system___string_cmp
02068     00 FA 0D F2 | 	cmp	result1, #0 wz
0206c     50 00 90 AD |  if_e	jmp	#LR__0108
02070     7A 00 00 FF 
02074     B4 E4 05 F1 | 	add	objptr, ##62644
02078     F2 12 02 FB | 	rdlong	arg01, objptr
0207c     7A 00 00 FF 
02080     B4 E4 85 F1 | 	sub	objptr, ##62644
02084     41 01 00 FF 
02088     97 14 06 F6 | 	mov	arg02, ##@LR__4334
0208c     4C 6C B1 FD | 	call	#__system___string_cmp
02090     00 FA 0D F2 | 	cmp	result1, #0 wz
02094     28 00 90 AD |  if_e	jmp	#LR__0108
02098     7A 00 00 FF 
0209c     B4 E4 05 F1 | 	add	objptr, ##62644
020a0     F2 12 02 FB | 	rdlong	arg01, objptr
020a4     7A 00 00 FF 
020a8     B4 E4 85 F1 | 	sub	objptr, ##62644
020ac     41 01 00 FF 
020b0     9E 14 06 F6 | 	mov	arg02, ##@LR__4335
020b4     24 6C B1 FD | 	call	#__system___string_cmp
020b8     00 FA 0D F2 | 	cmp	result1, #0 wz
020bc     94 01 90 5D |  if_ne	jmp	#LR__0111
020c0                 | LR__0108
020c0     7A 00 00 FF 
020c4     B0 E4 05 F1 | 	add	objptr, ##62640
020c8     F2 34 02 FB | 	rdlong	local12, objptr
020cc     01 34 06 F1 | 	add	local12, #1
020d0     1A 33 02 F6 | 	mov	local11, local12
020d4     03 32 66 F0 | 	shl	local11, #3
020d8     26 00 00 FF 
020dc     D0 E4 85 F1 | 	sub	objptr, ##19664
020e0     F2 38 02 F6 | 	mov	local14, objptr
020e4     F2 32 02 F1 | 	add	local11, objptr
020e8     04 32 06 F1 | 	add	local11, #4
020ec     19 4D 02 FB | 	rdlong	local24, local11
020f0     04 32 86 F1 | 	sub	local11, #4
020f4     26 37 02 F6 | 	mov	local13, local24
020f8     01 00 00 FF 
020fc     04 36 0E F2 | 	cmp	local13, ##516 wz
02100     53 00 00 FF 
02104     E0 E5 85 F1 | 	sub	objptr, ##42976
02108     48 01 90 5D |  if_ne	jmp	#LR__0111
0210c                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(addptr+1).token=token_decimal
0210c     7A 00 00 FF 
02110     B0 E4 05 F1 | 	add	objptr, ##62640
02114     F2 2A 02 FB | 	rdlong	local07, objptr
02118     01 2A 06 F1 | 	add	local07, #1
0211c     03 2A 66 F0 | 	shl	local07, #3
02120     26 00 00 FF 
02124     D0 E4 85 F1 | 	sub	objptr, ##19664
02128     F2 2A 02 F1 | 	add	local07, objptr
0212c     15 13 02 FB | 	rdlong	arg01, local07
02130     41 01 00 FF 
02134     A4 14 06 F6 | 	mov	arg02, ##@LR__4336
02138     53 00 00 FF 
0213c     E0 E5 85 F1 | 	sub	objptr, ##42976
02140     98 6B B1 FD | 	call	#__system___string_cmp
02144     00 FA 0D F2 | 	cmp	result1, #0 wz
02148     60 00 90 5D |  if_ne	jmp	#LR__0109
0214c     7A 00 00 FF 
02150     B0 E4 05 F1 | 	add	objptr, ##62640
02154     F2 28 02 FB | 	rdlong	local06, objptr
02158     01 28 06 F1 | 	add	local06, #1
0215c     03 28 66 F0 | 	shl	local06, #3
02160     26 00 00 FF 
02164     D0 E4 85 F1 | 	sub	objptr, ##19664
02168     F2 28 02 F1 | 	add	local06, objptr
0216c     41 01 00 FF 
02170     A7 34 06 F6 | 	mov	local12, ##@LR__4337
02174     14 35 62 FC | 	wrlong	local12, local06
02178     26 00 00 FF 
0217c     D0 E4 05 F1 | 	add	objptr, ##19664
02180     F2 28 02 FB | 	rdlong	local06, objptr
02184     01 28 06 F1 | 	add	local06, #1
02188     03 28 66 F0 | 	shl	local06, #3
0218c     26 00 00 FF 
02190     D0 E4 85 F1 | 	sub	objptr, ##19664
02194     F2 28 02 F1 | 	add	local06, objptr
02198     04 28 06 F1 | 	add	local06, #4
0219c     01 00 80 FF 
021a0     14 01 68 FC | 	wrlong	##512, local06
021a4     53 00 00 FF 
021a8     E0 E5 85 F1 | 	sub	objptr, ##42976
021ac                 | LR__0109
021ac                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(addptr+1).token=token_decimal
021ac     7A 00 00 FF 
021b0     B0 E4 05 F1 | 	add	objptr, ##62640
021b4     F2 2A 02 FB | 	rdlong	local07, objptr
021b8     01 2A 06 F1 | 	add	local07, #1
021bc     03 2A 66 F0 | 	shl	local07, #3
021c0     26 00 00 FF 
021c4     D0 E4 85 F1 | 	sub	objptr, ##19664
021c8     F2 34 02 F6 | 	mov	local12, objptr
021cc     F2 2A 02 F1 | 	add	local07, objptr
021d0     15 13 02 FB | 	rdlong	arg01, local07
021d4     41 01 00 FF 
021d8     A9 14 06 F6 | 	mov	arg02, ##@LR__4338
021dc     53 00 00 FF 
021e0     E0 E5 85 F1 | 	sub	objptr, ##42976
021e4     F4 6A B1 FD | 	call	#__system___string_cmp
021e8     00 FA 0D F2 | 	cmp	result1, #0 wz
021ec     64 00 90 5D |  if_ne	jmp	#LR__0110
021f0     7A 00 00 FF 
021f4     B0 E4 05 F1 | 	add	objptr, ##62640
021f8     F2 28 02 FB | 	rdlong	local06, objptr
021fc     01 28 06 F1 | 	add	local06, #1
02200     03 28 66 F0 | 	shl	local06, #3
02204     26 00 00 FF 
02208     D0 E4 85 F1 | 	sub	objptr, ##19664
0220c     F2 28 02 F1 | 	add	local06, objptr
02210     41 01 00 FF 
02214     AD 34 06 F6 | 	mov	local12, ##@LR__4339
02218     14 35 62 FC | 	wrlong	local12, local06
0221c     26 00 00 FF 
02220     D0 E4 05 F1 | 	add	objptr, ##19664
02224     F2 28 02 FB | 	rdlong	local06, objptr
02228     01 28 06 F1 | 	add	local06, #1
0222c     03 28 66 F0 | 	shl	local06, #3
02230     26 00 00 FF 
02234     D0 E4 85 F1 | 	sub	objptr, ##19664
02238     F2 28 02 F1 | 	add	local06, objptr
0223c     09 34 C6 F9 | 	decod	local12, #9
02240     04 28 06 F1 | 	add	local06, #4
02244     01 00 80 FF 
02248     14 01 68 FC | 	wrlong	##512, local06
0224c     53 00 00 FF 
02250     E0 E5 85 F1 | 	sub	objptr, ##42976
02254                 | LR__0110
02254                 | LR__0111
02254                 | ' if (lp$="mode" orelse lp$="m.") then 
02254     7A 00 00 FF 
02258     B4 E4 05 F1 | 	add	objptr, ##62644
0225c     F2 12 02 FB | 	rdlong	arg01, objptr
02260     7A 00 00 FF 
02264     B4 E4 85 F1 | 	sub	objptr, ##62644
02268     41 01 00 FF 
0226c     AF 14 06 F6 | 	mov	arg02, ##@LR__4340
02270     68 6A B1 FD | 	call	#__system___string_cmp
02274     00 FA 0D F2 | 	cmp	result1, #0 wz
02278     28 00 90 AD |  if_e	jmp	#LR__0112
0227c     7A 00 00 FF 
02280     B4 E4 05 F1 | 	add	objptr, ##62644
02284     F2 12 02 FB | 	rdlong	arg01, objptr
02288     7A 00 00 FF 
0228c     B4 E4 85 F1 | 	sub	objptr, ##62644
02290     41 01 00 FF 
02294     B4 14 06 F6 | 	mov	arg02, ##@LR__4341
02298     40 6A B1 FD | 	call	#__system___string_cmp
0229c     00 FA 0D F2 | 	cmp	result1, #0 wz
022a0     48 02 90 5D |  if_ne	jmp	#LR__0118
022a4                 | LR__0112
022a4                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"  
022a4     7A 00 00 FF 
022a8     B0 E4 05 F1 | 	add	objptr, ##62640
022ac     F2 2A 02 FB | 	rdlong	local07, objptr
022b0     01 2A 06 F1 | 	add	local07, #1
022b4     03 2A 66 F0 | 	shl	local07, #3
022b8     26 00 00 FF 
022bc     D0 E4 85 F1 | 	sub	objptr, ##19664
022c0     F2 2A 02 F1 | 	add	local07, objptr
022c4     15 13 02 FB | 	rdlong	arg01, local07
022c8     41 01 00 FF 
022cc     B7 14 06 F6 | 	mov	arg02, ##@LR__4342
022d0     53 00 00 FF 
022d4     E0 E5 85 F1 | 	sub	objptr, ##42976
022d8     00 6A B1 FD | 	call	#__system___string_cmp
022dc     00 FA 0D F2 | 	cmp	result1, #0 wz
022e0     34 00 90 5D |  if_ne	jmp	#LR__0113
022e4     7A 00 00 FF 
022e8     B0 E4 05 F1 | 	add	objptr, ##62640
022ec     F2 28 02 FB | 	rdlong	local06, objptr
022f0     01 28 06 F1 | 	add	local06, #1
022f4     03 28 66 F0 | 	shl	local06, #3
022f8     26 00 00 FF 
022fc     D0 E4 85 F1 | 	sub	objptr, ##19664
02300     F2 28 02 F1 | 	add	local06, objptr
02304     41 01 00 FF 
02308     BD 34 06 F6 | 	mov	local12, ##@LR__4343
0230c     14 35 62 FC | 	wrlong	local12, local06
02310     53 00 00 FF 
02314     E0 E5 85 F1 | 	sub	objptr, ##42976
02318                 | LR__0113
02318                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02318     7A 00 00 FF 
0231c     B0 E4 05 F1 | 	add	objptr, ##62640
02320     F2 2A 02 FB | 	rdlong	local07, objptr
02324     01 2A 06 F1 | 	add	local07, #1
02328     03 2A 66 F0 | 	shl	local07, #3
0232c     26 00 00 FF 
02330     D0 E4 85 F1 | 	sub	objptr, ##19664
02334     F2 2A 02 F1 | 	add	local07, objptr
02338     15 13 02 FB | 	rdlong	arg01, local07
0233c     41 01 00 FF 
02340     BF 14 06 F6 | 	mov	arg02, ##@LR__4344
02344     53 00 00 FF 
02348     E0 E5 85 F1 | 	sub	objptr, ##42976
0234c     8C 69 B1 FD | 	call	#__system___string_cmp
02350     00 FA 0D F2 | 	cmp	result1, #0 wz
02354     34 00 90 5D |  if_ne	jmp	#LR__0114
02358     7A 00 00 FF 
0235c     B0 E4 05 F1 | 	add	objptr, ##62640
02360     F2 28 02 FB | 	rdlong	local06, objptr
02364     01 28 06 F1 | 	add	local06, #1
02368     03 28 66 F0 | 	shl	local06, #3
0236c     26 00 00 FF 
02370     D0 E4 85 F1 | 	sub	objptr, ##19664
02374     F2 28 02 F1 | 	add	local06, objptr
02378     41 01 00 FF 
0237c     C8 34 06 F6 | 	mov	local12, ##@LR__4345
02380     14 35 62 FC | 	wrlong	local12, local06
02384     53 00 00 FF 
02388     E0 E5 85 F1 | 	sub	objptr, ##42976
0238c                 | LR__0114
0238c                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
0238c     7A 00 00 FF 
02390     B0 E4 05 F1 | 	add	objptr, ##62640
02394     F2 2A 02 FB | 	rdlong	local07, objptr
02398     01 2A 06 F1 | 	add	local07, #1
0239c     03 2A 66 F0 | 	shl	local07, #3
023a0     26 00 00 FF 
023a4     D0 E4 85 F1 | 	sub	objptr, ##19664
023a8     F2 2A 02 F1 | 	add	local07, objptr
023ac     15 13 02 FB | 	rdlong	arg01, local07
023b0     41 01 00 FF 
023b4     CA 14 06 F6 | 	mov	arg02, ##@LR__4346
023b8     53 00 00 FF 
023bc     E0 E5 85 F1 | 	sub	objptr, ##42976
023c0     18 69 B1 FD | 	call	#__system___string_cmp
023c4     00 FA 0D F2 | 	cmp	result1, #0 wz
023c8     34 00 90 5D |  if_ne	jmp	#LR__0115
023cc     7A 00 00 FF 
023d0     B0 E4 05 F1 | 	add	objptr, ##62640
023d4     F2 28 02 FB | 	rdlong	local06, objptr
023d8     01 28 06 F1 | 	add	local06, #1
023dc     03 28 66 F0 | 	shl	local06, #3
023e0     26 00 00 FF 
023e4     D0 E4 85 F1 | 	sub	objptr, ##19664
023e8     F2 28 02 F1 | 	add	local06, objptr
023ec     41 01 00 FF 
023f0     D3 34 06 F6 | 	mov	local12, ##@LR__4347
023f4     14 35 62 FC | 	wrlong	local12, local06
023f8     53 00 00 FF 
023fc     E0 E5 85 F1 | 	sub	objptr, ##42976
02400                 | LR__0115
02400                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02400     7A 00 00 FF 
02404     B0 E4 05 F1 | 	add	objptr, ##62640
02408     F2 2A 02 FB | 	rdlong	local07, objptr
0240c     01 2A 06 F1 | 	add	local07, #1
02410     03 2A 66 F0 | 	shl	local07, #3
02414     26 00 00 FF 
02418     D0 E4 85 F1 | 	sub	objptr, ##19664
0241c     F2 2A 02 F1 | 	add	local07, objptr
02420     15 13 02 FB | 	rdlong	arg01, local07
02424     41 01 00 FF 
02428     D5 14 06 F6 | 	mov	arg02, ##@LR__4348
0242c     53 00 00 FF 
02430     E0 E5 85 F1 | 	sub	objptr, ##42976
02434     A4 68 B1 FD | 	call	#__system___string_cmp
02438     00 FA 0D F2 | 	cmp	result1, #0 wz
0243c     34 00 90 5D |  if_ne	jmp	#LR__0116
02440     7A 00 00 FF 
02444     B0 E4 05 F1 | 	add	objptr, ##62640
02448     F2 28 02 FB | 	rdlong	local06, objptr
0244c     01 28 06 F1 | 	add	local06, #1
02450     03 28 66 F0 | 	shl	local06, #3
02454     26 00 00 FF 
02458     D0 E4 85 F1 | 	sub	objptr, ##19664
0245c     F2 28 02 F1 | 	add	local06, objptr
02460     41 01 00 FF 
02464     DE 34 06 F6 | 	mov	local12, ##@LR__4349
02468     14 35 62 FC | 	wrlong	local12, local06
0246c     53 00 00 FF 
02470     E0 E5 85 F1 | 	sub	objptr, ##42976
02474                 | LR__0116
02474                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
02474     7A 00 00 FF 
02478     B0 E4 05 F1 | 	add	objptr, ##62640
0247c     F2 2A 02 FB | 	rdlong	local07, objptr
02480     01 2A 06 F1 | 	add	local07, #1
02484     03 2A 66 F0 | 	shl	local07, #3
02488     26 00 00 FF 
0248c     D0 E4 85 F1 | 	sub	objptr, ##19664
02490     F2 34 02 F6 | 	mov	local12, objptr
02494     F2 2A 02 F1 | 	add	local07, objptr
02498     15 13 02 FB | 	rdlong	arg01, local07
0249c     41 01 00 FF 
024a0     E0 14 06 F6 | 	mov	arg02, ##@LR__4350
024a4     53 00 00 FF 
024a8     E0 E5 85 F1 | 	sub	objptr, ##42976
024ac     2C 68 B1 FD | 	call	#__system___string_cmp
024b0     00 FA 0D F2 | 	cmp	result1, #0 wz
024b4     34 00 90 5D |  if_ne	jmp	#LR__0117
024b8     7A 00 00 FF 
024bc     B0 E4 05 F1 | 	add	objptr, ##62640
024c0     F2 28 02 FB | 	rdlong	local06, objptr
024c4     01 28 06 F1 | 	add	local06, #1
024c8     03 28 66 F0 | 	shl	local06, #3
024cc     26 00 00 FF 
024d0     D0 E4 85 F1 | 	sub	objptr, ##19664
024d4     F2 28 02 F1 | 	add	local06, objptr
024d8     41 01 00 FF 
024dc     E3 34 06 F6 | 	mov	local12, ##@LR__4351
024e0     14 35 62 FC | 	wrlong	local12, local06
024e4     53 00 00 FF 
024e8     E0 E5 85 F1 | 	sub	objptr, ##42976
024ec                 | LR__0117
024ec                 | LR__0118
024ec                 | ' 
024ec                 | ' 
024ec                 | ' 
024ec                 | ' 
024ec                 | ' 
024ec                 | ' 
024ec                 | ' ' 2a find part types 
024ec                 | ' 
024ec                 | ' for i=0 to k-1
024ec     00 24 06 F6 | 	mov	local04, #0
024f0     1E 63 02 F6 | 	mov	local35, local16
024f4                 | LR__0119
024f4     31 25 52 F2 | 	cmps	local04, local35 wc
024f8     74 05 90 3D |  if_ae	jmp	#LR__0128
024fc     12 31 02 F6 | 	mov	local10, local04
02500     03 30 66 F0 | 	shl	local10, #3
02504     53 00 00 FF 
02508     E0 E5 05 F1 | 	add	objptr, ##42976
0250c     F2 30 02 F1 | 	add	local10, objptr
02510     12 37 02 F6 | 	mov	local13, local04
02514     03 36 66 F0 | 	shl	local13, #3
02518     F2 4C 02 F6 | 	mov	local24, objptr
0251c     F2 36 02 F1 | 	add	local13, objptr
02520     1B 13 02 FB | 	rdlong	arg01, local13
02524     53 00 00 FF 
02528     E0 E5 85 F1 | 	sub	objptr, ##42976
0252c     60 0F B0 FD | 	call	#_isseparator
02530     FD FA E1 F8 | 	getbyte	result1, result1, #0
02534     04 30 06 F1 | 	add	local10, #4
02538     18 FB 61 FC | 	wrlong	result1, local10
0253c                 | ' lparts(i).token=isseparator(lparts(i).part$): if lparts(i).token>0 then goto 102
0253c     12 31 02 F6 | 	mov	local10, local04
02540     03 30 66 F0 | 	shl	local10, #3
02544     53 00 00 FF 
02548     E0 E5 05 F1 | 	add	objptr, ##42976
0254c     F2 30 02 F1 | 	add	local10, objptr
02550     04 30 06 F1 | 	add	local10, #4
02554     18 35 02 FB | 	rdlong	local12, local10
02558     01 34 56 F2 | 	cmps	local12, #1 wc
0255c     53 00 00 FF 
02560     E0 E5 85 F1 | 	sub	objptr, ##42976
02564     00 05 90 3D |  if_ae	jmp	#LR__0127
02568     12 31 02 F6 | 	mov	local10, local04
0256c     03 30 66 F0 | 	shl	local10, #3
02570     53 00 00 FF 
02574     E0 E5 05 F1 | 	add	objptr, ##42976
02578     F2 30 02 F1 | 	add	local10, objptr
0257c     12 37 02 F6 | 	mov	local13, local04
02580     03 36 66 F0 | 	shl	local13, #3
02584     F2 4C 02 F6 | 	mov	local24, objptr
02588     F2 36 02 F1 | 	add	local13, objptr
0258c     1B 13 02 FB | 	rdlong	arg01, local13
02590     53 00 00 FF 
02594     E0 E5 85 F1 | 	sub	objptr, ##42976
02598     14 0C B0 FD | 	call	#_isoperator
0259c     FD FA E1 F8 | 	getbyte	result1, result1, #0
025a0     04 30 06 F1 | 	add	local10, #4
025a4     18 FB 61 FC | 	wrlong	result1, local10
025a8                 | ' lparts(i).token=isoperator(lparts(i).part$): if lparts(i).token>0 then goto 102
025a8     12 31 02 F6 | 	mov	local10, local04
025ac     03 30 66 F0 | 	shl	local10, #3
025b0     53 00 00 FF 
025b4     E0 E5 05 F1 | 	add	objptr, ##42976
025b8     F2 30 02 F1 | 	add	local10, objptr
025bc     04 30 06 F1 | 	add	local10, #4
025c0     18 35 02 FB | 	rdlong	local12, local10
025c4     01 34 56 F2 | 	cmps	local12, #1 wc
025c8     53 00 00 FF 
025cc     E0 E5 85 F1 | 	sub	objptr, ##42976
025d0     94 04 90 3D |  if_ae	jmp	#LR__0127
025d4     12 31 02 F6 | 	mov	local10, local04
025d8     03 30 66 F0 | 	shl	local10, #3
025dc     53 00 00 FF 
025e0     E0 E5 05 F1 | 	add	objptr, ##42976
025e4     F2 30 02 F1 | 	add	local10, objptr
025e8     12 37 02 F6 | 	mov	local13, local04
025ec     03 36 66 F0 | 	shl	local13, #3
025f0     F2 4C 02 F6 | 	mov	local24, objptr
025f4     F2 36 02 F1 | 	add	local13, objptr
025f8     1B 13 02 FB | 	rdlong	arg01, local13
025fc     53 00 00 FF 
02600     E0 E5 85 F1 | 	sub	objptr, ##42976
02604                 | ' 
02604                 | ' select case s
02604     41 01 00 FF 
02608     99 15 06 F6 | 	mov	arg02, ##@LR__4404
0260c     CC 66 B1 FD | 	call	#__system___string_cmp
02610     00 FA 0D F2 | 	cmp	result1, #0 wz
02614     1B FA 05 A6 |  if_e	mov	result1, #27
02618     00 FA 05 56 |  if_ne	mov	result1, #0
0261c     FD FA E1 F8 | 	getbyte	result1, result1, #0
02620     04 30 06 F1 | 	add	local10, #4
02624     18 FB 61 FC | 	wrlong	result1, local10
02628                 | ' lparts(i).token=isassign(lparts(i).part$) : if lparts(i).token>0 then goto 102
02628     12 31 02 F6 | 	mov	local10, local04
0262c     03 30 66 F0 | 	shl	local10, #3
02630     53 00 00 FF 
02634     E0 E5 05 F1 | 	add	objptr, ##42976
02638     F2 30 02 F1 | 	add	local10, objptr
0263c     04 30 06 F1 | 	add	local10, #4
02640     18 35 02 FB | 	rdlong	local12, local10
02644     01 34 56 F2 | 	cmps	local12, #1 wc
02648     53 00 00 FF 
0264c     E0 E5 85 F1 | 	sub	objptr, ##42976
02650     14 04 90 3D |  if_ae	jmp	#LR__0127
02654     12 31 02 F6 | 	mov	local10, local04
02658     03 30 66 F0 | 	shl	local10, #3
0265c     53 00 00 FF 
02660     E0 E5 05 F1 | 	add	objptr, ##42976
02664     F2 30 02 F1 | 	add	local10, objptr
02668     12 37 02 F6 | 	mov	local13, local04
0266c     03 36 66 F0 | 	shl	local13, #3
02670     F2 4C 02 F6 | 	mov	local24, objptr
02674     F2 36 02 F1 | 	add	local13, objptr
02678     1B 13 02 FB | 	rdlong	arg01, local13
0267c     53 00 00 FF 
02680     E0 E5 85 F1 | 	sub	objptr, ##42976
02684     08 10 B0 FD | 	call	#_iscommand
02688     FD FA E1 F8 | 	getbyte	result1, result1, #0
0268c     04 30 06 F1 | 	add	local10, #4
02690     18 FB 61 FC | 	wrlong	result1, local10
02694                 | ' lparts(i).token=iscommand(lparts(i).part$): if lparts(i).token>0 then goto 102
02694     12 31 02 F6 | 	mov	local10, local04
02698     03 30 66 F0 | 	shl	local10, #3
0269c     53 00 00 FF 
026a0     E0 E5 05 F1 | 	add	objptr, ##42976
026a4     F2 30 02 F1 | 	add	local10, objptr
026a8     04 30 06 F1 | 	add	local10, #4
026ac     18 35 02 FB | 	rdlong	local12, local10
026b0     01 34 56 F2 | 	cmps	local12, #1 wc
026b4     53 00 00 FF 
026b8     E0 E5 85 F1 | 	sub	objptr, ##42976
026bc     A8 03 90 3D |  if_ae	jmp	#LR__0127
026c0     12 31 02 F6 | 	mov	local10, local04
026c4     03 30 66 F0 | 	shl	local10, #3
026c8     53 00 00 FF 
026cc     E0 E5 05 F1 | 	add	objptr, ##42976
026d0     F2 30 02 F1 | 	add	local10, objptr
026d4     12 33 02 F6 | 	mov	local11, local04
026d8     19 39 02 F6 | 	mov	local14, local11
026dc     1C 37 02 F6 | 	mov	local13, local14
026e0     03 36 66 F0 | 	shl	local13, #3
026e4     F2 4C 02 F6 | 	mov	local24, objptr
026e8     F2 36 02 F1 | 	add	local13, objptr
026ec     1B 13 02 FB | 	rdlong	arg01, local13
026f0     53 00 00 FF 
026f4     E0 E5 85 F1 | 	sub	objptr, ##42976
026f8     74 19 B0 FD | 	call	#_isfunction
026fc     FD FA E1 F8 | 	getbyte	result1, result1, #0
02700     04 30 06 F1 | 	add	local10, #4
02704     18 FB 61 FC | 	wrlong	result1, local10
02708                 | ' lparts(i).token=isfunction(lparts(i).part$): if lparts(i).token>0 then goto 102
02708     12 31 02 F6 | 	mov	local10, local04
0270c     03 30 66 F0 | 	shl	local10, #3
02710     53 00 00 FF 
02714     E0 E5 05 F1 | 	add	objptr, ##42976
02718     F2 30 02 F1 | 	add	local10, objptr
0271c     04 30 06 F1 | 	add	local10, #4
02720     18 35 02 FB | 	rdlong	local12, local10
02724     01 34 56 F2 | 	cmps	local12, #1 wc
02728     53 00 00 FF 
0272c     E0 E5 85 F1 | 	sub	objptr, ##42976
02730     34 03 90 3D |  if_ae	jmp	#LR__0127
02734     12 29 02 F6 | 	mov	local06, local04
02738     03 28 66 F0 | 	shl	local06, #3
0273c     53 00 00 FF 
02740     E0 E5 05 F1 | 	add	objptr, ##42976
02744     F2 28 02 F1 | 	add	local06, objptr
02748     14 13 02 FB | 	rdlong	arg01, local06
0274c     53 00 00 FF 
02750     E0 E5 85 F1 | 	sub	objptr, ##42976
02754     2C 1E B0 FD | 	call	#_isnum
02758     FD 1E 02 F6 | 	mov	local01, result1
0275c     7A 00 00 FF 
02760     BC E4 05 F1 | 	add	objptr, ##62652
02764     F2 1E 62 FC | 	wrlong	local01, objptr
02768     12 29 02 F6 | 	mov	local06, local04
0276c     03 28 66 F0 | 	shl	local06, #3
02770     26 00 00 FF 
02774     DC E4 85 F1 | 	sub	objptr, ##19676
02778     F2 28 02 F1 | 	add	local06, objptr
0277c     14 13 02 FB | 	rdlong	arg01, local06
02780     53 00 00 FF 
02784     E0 E5 85 F1 | 	sub	objptr, ##42976
02788     D0 20 B0 FD | 	call	#_isint
0278c     FD 1E 02 F6 | 	mov	local01, result1
02790     7A 00 00 FF 
02794     C0 E4 05 F1 | 	add	objptr, ##62656
02798     F2 1E 62 FC | 	wrlong	local01, objptr
0279c     12 29 02 F6 | 	mov	local06, local04
027a0     03 28 66 F0 | 	shl	local06, #3
027a4     26 00 00 FF 
027a8     E0 E4 85 F1 | 	sub	objptr, ##19680
027ac     F2 2A 02 F6 | 	mov	local07, objptr
027b0     F2 28 02 F1 | 	add	local06, objptr
027b4     14 13 02 FB | 	rdlong	arg01, local06
027b8     53 00 00 FF 
027bc     E0 E5 85 F1 | 	sub	objptr, ##42976
027c0     F0 21 B0 FD | 	call	#_isdec
027c4     7A 00 00 FF 
027c8     C4 E4 05 F1 | 	add	objptr, ##62660
027cc     F2 FA 61 FC | 	wrlong	result1, objptr
027d0                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal : goto 102 					' pure decimal for line num
027d0     08 E4 85 F1 | 	sub	objptr, #8
027d4     F2 1E 0A FB | 	rdlong	local01, objptr wz
027d8     7A 00 00 FF 
027dc     BC E4 85 F1 | 	sub	objptr, ##62652
027e0     60 00 90 AD |  if_e	jmp	#LR__0120
027e4     7A 00 00 FF 
027e8     C0 E4 05 F1 | 	add	objptr, ##62656
027ec     F2 30 0A FB | 	rdlong	local10, objptr wz
027f0     7A 00 00 FF 
027f4     C0 E4 85 F1 | 	sub	objptr, ##62656
027f8     48 00 90 AD |  if_e	jmp	#LR__0120
027fc     7A 00 00 FF 
02800     C4 E4 05 F1 | 	add	objptr, ##62660
02804     F2 34 0A FB | 	rdlong	local12, objptr wz
02808     7A 00 00 FF 
0280c     C4 E4 85 F1 | 	sub	objptr, ##62660
02810     30 00 90 AD |  if_e	jmp	#LR__0120
02814     12 27 02 F6 | 	mov	local05, local04
02818     13 31 02 F6 | 	mov	local10, local05
0281c     03 30 66 F0 | 	shl	local10, #3
02820     53 00 00 FF 
02824     E0 E5 05 F1 | 	add	objptr, ##42976
02828     F2 30 02 F1 | 	add	local10, objptr
0282c     04 30 06 F1 | 	add	local10, #4
02830     01 00 80 FF 
02834     18 01 68 FC | 	wrlong	##512, local10
02838     53 00 00 FF 
0283c     E0 E5 85 F1 | 	sub	objptr, ##42976
02840     24 02 90 FD | 	jmp	#LR__0127
02844                 | LR__0120
02844                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer : goto 102 				' integer
02844     7A 00 00 FF 
02848     BC E4 05 F1 | 	add	objptr, ##62652
0284c     F2 1E 0A FB | 	rdlong	local01, objptr wz
02850     7A 00 00 FF 
02854     BC E4 85 F1 | 	sub	objptr, ##62652
02858     64 00 90 AD |  if_e	jmp	#LR__0121
0285c     7A 00 00 FF 
02860     C0 E4 05 F1 | 	add	objptr, ##62656
02864     F2 30 0A FB | 	rdlong	local10, objptr wz
02868     7A 00 00 FF 
0286c     C0 E4 85 F1 | 	sub	objptr, ##62656
02870     7A 00 00 5F 
02874     C4 E4 05 51 |  if_ne	add	objptr, ##62660
02878     F2 34 02 5B |  if_ne	rdlong	local12, objptr
0287c     7A 00 00 5F 
02880     C4 E4 85 51 |  if_ne	sub	objptr, ##62660
02884     1A 2B 22 56 |  if_ne	not	local07, local12
02888     00 2A 0E 52 |  if_ne	cmp	local07, #0 wz
0288c     30 00 90 AD |  if_e	jmp	#LR__0121
02890     12 27 02 F6 | 	mov	local05, local04
02894     13 31 02 F6 | 	mov	local10, local05
02898     03 30 66 F0 | 	shl	local10, #3
0289c     53 00 00 FF 
028a0     E0 E5 05 F1 | 	add	objptr, ##42976
028a4     F2 30 02 F1 | 	add	local10, objptr
028a8     04 30 06 F1 | 	add	local10, #4
028ac     01 00 80 FF 
028b0     18 03 68 FC | 	wrlong	##513, local10
028b4     53 00 00 FF 
028b8     E0 E5 85 F1 | 	sub	objptr, ##42976
028bc     A8 01 90 FD | 	jmp	#LR__0127
028c0                 | LR__0121
028c0                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float :goto 102 				' float
028c0     7A 00 00 FF 
028c4     BC E4 05 F1 | 	add	objptr, ##62652
028c8     F2 1E 0A FB | 	rdlong	local01, objptr wz
028cc     7A 00 00 FF 
028d0     BC E4 85 F1 | 	sub	objptr, ##62652
028d4     7A 00 00 5F 
028d8     C0 E4 05 51 |  if_ne	add	objptr, ##62656
028dc     F2 30 02 5B |  if_ne	rdlong	local10, objptr
028e0     7A 00 00 5F 
028e4     C0 E4 85 51 |  if_ne	sub	objptr, ##62656
028e8     18 31 22 56 |  if_ne	not	local10, local10
028ec     00 30 0E 52 |  if_ne	cmp	local10, #0 wz
028f0     7A 00 00 5F 
028f4     C4 E4 05 51 |  if_ne	add	objptr, ##62660
028f8     F2 34 02 5B |  if_ne	rdlong	local12, objptr
028fc     7A 00 00 5F 
02900     C4 E4 85 51 |  if_ne	sub	objptr, ##62660
02904     1A 2B 22 56 |  if_ne	not	local07, local12
02908     00 2A 0E 52 |  if_ne	cmp	local07, #0 wz
0290c     30 00 90 AD |  if_e	jmp	#LR__0122
02910     12 27 02 F6 | 	mov	local05, local04
02914     13 31 02 F6 | 	mov	local10, local05
02918     03 30 66 F0 | 	shl	local10, #3
0291c     53 00 00 FF 
02920     E0 E5 05 F1 | 	add	objptr, ##42976
02924     F2 30 02 F1 | 	add	local10, objptr
02928     04 30 06 F1 | 	add	local10, #4
0292c     01 00 80 FF 
02930     18 05 68 FC | 	wrlong	##514, local10
02934     53 00 00 FF 
02938     E0 E5 85 F1 | 	sub	objptr, ##42976
0293c     28 01 90 FD | 	jmp	#LR__0127
02940                 | LR__0122
02940                 | ' 
02940                 | ' if isstring(lparts(i).part$) then 
02940     12 29 02 F6 | 	mov	local06, local04
02944     03 28 66 F0 | 	shl	local06, #3
02948     53 00 00 FF 
0294c     E0 E5 05 F1 | 	add	objptr, ##42976
02950     F2 28 02 F1 | 	add	local06, objptr
02954     14 13 02 FB | 	rdlong	arg01, local06
02958     53 00 00 FF 
0295c     E0 E5 85 F1 | 	sub	objptr, ##42976
02960     10 21 B0 FD | 	call	#_isstring
02964     00 FA 0D F2 | 	cmp	result1, #0 wz
02968     A0 00 90 AD |  if_e	jmp	#LR__0125
0296c     12 31 02 F6 | 	mov	local10, local04
02970     03 30 66 F0 | 	shl	local10, #3
02974     53 00 00 FF 
02978     E0 E5 05 F1 | 	add	objptr, ##42976
0297c     F2 30 02 F1 | 	add	local10, objptr
02980     04 30 06 F1 | 	add	local10, #4
02984     01 00 80 FF 
02988     18 07 68 FC | 	wrlong	##515, local10
0298c     12 27 02 F6 | 	mov	local05, local04
02990     13 31 02 F6 | 	mov	local10, local05
02994     03 30 66 F0 | 	shl	local10, #3
02998     F2 30 02 F1 | 	add	local10, objptr
0299c     12 39 02 F6 | 	mov	local14, local04
029a0     03 38 66 F0 | 	shl	local14, #3
029a4     F2 38 02 F1 | 	add	local14, objptr
029a8     1C 2B 02 FB | 	rdlong	local07, local14
029ac     02 34 06 F6 | 	mov	local12, #2
029b0     12 4D 02 F6 | 	mov	local24, local04
029b4     26 45 02 F6 | 	mov	local20, local24
029b8     22 47 02 F6 | 	mov	local21, local20
029bc     03 46 66 F0 | 	shl	local21, #3
029c0     F2 48 02 F6 | 	mov	local22, objptr
029c4     F2 46 02 F1 | 	add	local21, objptr
029c8     23 13 02 FB | 	rdlong	arg01, local21
029cc     53 00 00 FF 
029d0     E0 E5 85 F1 | 	sub	objptr, ##42976
029d4     09 2D 02 F6 | 	mov	local08, arg01
029d8     97 06 48 FB | 	callpa	#(@LR__0124-@LR__0123)>>2,fcache_load_ptr_
029dc                 | LR__0123
029dc     16 FB C9 FA | 	rdbyte	result1, local08 wz
029e0     01 2C 06 51 |  if_ne	add	local08, #1
029e4     F4 FF 9F 5D |  if_ne	jmp	#LR__0123
029e8                 | LR__0124
029e8     09 2D 82 F1 | 	sub	local08, arg01
029ec     16 37 02 F6 | 	mov	local13, local08
029f0     1B 17 02 F6 | 	mov	arg03, local13
029f4     02 16 86 F1 | 	sub	arg03, #2
029f8     15 13 02 F6 | 	mov	arg01, local07
029fc     1A 15 02 F6 | 	mov	arg02, local12
02a00     D8 83 B1 FD | 	call	#__system__Mid_S
02a04     18 FB 61 FC | 	wrlong	result1, local10
02a08     5C 00 90 FD | 	jmp	#LR__0127
02a0c                 | LR__0125
02a0c                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
02a0c     12 27 02 F6 | 	mov	local05, local04
02a10     13 29 02 F6 | 	mov	local06, local05
02a14     03 28 66 F0 | 	shl	local06, #3
02a18     53 00 00 FF 
02a1c     E0 E5 05 F1 | 	add	objptr, ##42976
02a20     F2 28 02 F1 | 	add	local06, objptr
02a24     14 13 02 FB | 	rdlong	arg01, local06
02a28     53 00 00 FF 
02a2c     E0 E5 85 F1 | 	sub	objptr, ##42976
02a30     DC 18 B0 FD | 	call	#_isname
02a34     00 FA 0D F2 | 	cmp	result1, #0 wz
02a38     2C 00 90 AD |  if_e	jmp	#LR__0126
02a3c     12 27 02 F6 | 	mov	local05, local04
02a40     13 31 02 F6 | 	mov	local10, local05
02a44     03 30 66 F0 | 	shl	local10, #3
02a48     53 00 00 FF 
02a4c     E0 E5 05 F1 | 	add	objptr, ##42976
02a50     F2 30 02 F1 | 	add	local10, objptr
02a54     04 30 06 F1 | 	add	local10, #4
02a58     01 00 80 FF 
02a5c     18 09 68 FC | 	wrlong	##516, local10
02a60     53 00 00 FF 
02a64     E0 E5 85 F1 | 	sub	objptr, ##42976
02a68                 | LR__0126
02a68                 | LR__0127
02a68     01 24 06 F1 | 	add	local04, #1
02a6c     84 FA 9F FD | 	jmp	#LR__0119
02a70                 | LR__0128
02a70     1E 31 02 F6 | 	mov	local10, local16
02a74     03 30 66 F0 | 	shl	local10, #3
02a78     53 00 00 FF 
02a7c     E0 E5 05 F1 | 	add	objptr, ##42976
02a80     F2 30 02 F1 | 	add	local10, objptr
02a84     04 30 06 F1 | 	add	local10, #4
02a88     18 FD 6B FC | 	wrlong	#510, local10
02a8c     1E 31 02 F6 | 	mov	local10, local16
02a90     03 30 66 F0 | 	shl	local10, #3
02a94     F2 28 02 F6 | 	mov	local06, objptr
02a98     F2 30 02 F1 | 	add	local10, objptr
02a9c     41 01 00 FF 
02aa0     E5 2A 06 F6 | 	mov	local07, ##@LR__4352
02aa4     18 2B 62 FC | 	wrlong	local07, local10
02aa8     10 00 00 FF 
02aac     54 E4 05 F1 | 	add	objptr, ##8276
02ab0     F2 3C 62 FC | 	wrlong	local16, objptr
02ab4                 | ' 
02ab4                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
02ab4                 | ' 
02ab4                 | '  '                                      					 	for i=0 to k: print lparts(i).token,lparts(i).part$ : next i
02ab4                 | '  
02ab4                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="lo." orelse lp$="s." orelse lp$="br.") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
02ab4     16 00 00 FF 
02ab8     80 E4 05 F1 | 	add	objptr, ##11392
02abc     F2 12 02 FB | 	rdlong	arg01, objptr
02ac0     7A 00 00 FF 
02ac4     B4 E4 85 F1 | 	sub	objptr, ##62644
02ac8     41 01 00 FF 
02acc     E6 30 06 F6 | 	mov	local10, ##@LR__4353
02ad0     18 15 02 F6 | 	mov	arg02, local10
02ad4     04 62 B1 FD | 	call	#__system___string_cmp
02ad8     00 FA 0D F2 | 	cmp	result1, #0 wz
02adc     EC 00 90 AD |  if_e	jmp	#LR__0129
02ae0     7A 00 00 FF 
02ae4     B4 E4 05 F1 | 	add	objptr, ##62644
02ae8     F2 12 02 FB | 	rdlong	arg01, objptr
02aec     7A 00 00 FF 
02af0     B4 E4 85 F1 | 	sub	objptr, ##62644
02af4     41 01 00 FF 
02af8     EB 28 06 F6 | 	mov	local06, ##@LR__4354
02afc     14 31 02 F6 | 	mov	local10, local06
02b00     18 15 02 F6 | 	mov	arg02, local10
02b04     D4 61 B1 FD | 	call	#__system___string_cmp
02b08     00 FA 0D F2 | 	cmp	result1, #0 wz
02b0c     BC 00 90 AD |  if_e	jmp	#LR__0129
02b10     7A 00 00 FF 
02b14     B4 E4 05 F1 | 	add	objptr, ##62644
02b18     F2 12 02 FB | 	rdlong	arg01, objptr
02b1c     7A 00 00 FF 
02b20     B4 E4 85 F1 | 	sub	objptr, ##62644
02b24     41 01 00 FF 
02b28     F0 2A 06 F6 | 	mov	local07, ##@LR__4355
02b2c     15 29 02 F6 | 	mov	local06, local07
02b30     14 15 02 F6 | 	mov	arg02, local06
02b34     A4 61 B1 FD | 	call	#__system___string_cmp
02b38     FD 30 0A F6 | 	mov	local10, result1 wz
02b3c     8C 00 90 AD |  if_e	jmp	#LR__0129
02b40     7A 00 00 FF 
02b44     B4 E4 05 F1 | 	add	objptr, ##62644
02b48     F2 12 02 FB | 	rdlong	arg01, objptr
02b4c     7A 00 00 FF 
02b50     B4 E4 85 F1 | 	sub	objptr, ##62644
02b54     41 01 00 FF 
02b58     F5 34 06 F6 | 	mov	local12, ##@LR__4356
02b5c     1A 2B 02 F6 | 	mov	local07, local12
02b60     15 15 02 F6 | 	mov	arg02, local07
02b64     74 61 B1 FD | 	call	#__system___string_cmp
02b68     FD 28 0A F6 | 	mov	local06, result1 wz
02b6c     5C 00 90 AD |  if_e	jmp	#LR__0129
02b70     7A 00 00 FF 
02b74     B4 E4 05 F1 | 	add	objptr, ##62644
02b78     F2 12 02 FB | 	rdlong	arg01, objptr
02b7c     7A 00 00 FF 
02b80     B4 E4 85 F1 | 	sub	objptr, ##62644
02b84     41 01 00 FF 
02b88     F9 34 06 F6 | 	mov	local12, ##@LR__4357
02b8c     1A 15 02 F6 | 	mov	arg02, local12
02b90     48 61 B1 FD | 	call	#__system___string_cmp
02b94     FD 2A 0A F6 | 	mov	local07, result1 wz
02b98     30 00 90 AD |  if_e	jmp	#LR__0129
02b9c     7A 00 00 FF 
02ba0     B4 E4 05 F1 | 	add	objptr, ##62644
02ba4     F2 12 02 FB | 	rdlong	arg01, objptr
02ba8     7A 00 00 FF 
02bac     B4 E4 85 F1 | 	sub	objptr, ##62644
02bb0     41 01 00 FF 
02bb4     FC 38 06 F6 | 	mov	local14, ##@LR__4358
02bb8     1C 33 02 F6 | 	mov	local11, local14
02bbc     19 15 02 F6 | 	mov	arg02, local11
02bc0     18 61 B1 FD | 	call	#__system___string_cmp
02bc4     FD 34 0A F6 | 	mov	local12, result1 wz
02bc8     9C 00 90 5D |  if_ne	jmp	#LR__0130
02bcc                 | LR__0129
02bcc     7A 00 00 FF 
02bd0     B0 E4 05 F1 | 	add	objptr, ##62640
02bd4     F2 38 02 FB | 	rdlong	local14, objptr
02bd8     1C 33 02 F6 | 	mov	local11, local14
02bdc     01 32 06 F1 | 	add	local11, #1
02be0     19 37 02 F6 | 	mov	local13, local11
02be4     1B 4D 02 F6 | 	mov	local24, local13
02be8     03 4C 66 F0 | 	shl	local24, #3
02bec     26 00 00 FF 
02bf0     D0 E4 85 F1 | 	sub	objptr, ##19664
02bf4     F2 44 02 F6 | 	mov	local20, objptr
02bf8     F2 4C 02 F1 | 	add	local24, objptr
02bfc     04 4C 06 F1 | 	add	local24, #4
02c00     26 49 02 FB | 	rdlong	local22, local24
02c04     04 4C 86 F1 | 	sub	local24, #4
02c08     24 47 02 F6 | 	mov	local21, local22
02c0c     01 00 00 FF 
02c10     04 46 0E F2 | 	cmp	local21, ##516 wz
02c14     53 00 00 FF 
02c18     E0 E5 85 F1 | 	sub	objptr, ##42976
02c1c     48 00 90 5D |  if_ne	jmp	#LR__0130
02c20     7A 00 00 FF 
02c24     B0 E4 05 F1 | 	add	objptr, ##62640
02c28     F2 30 02 FB | 	rdlong	local10, objptr
02c2c     01 30 06 F1 | 	add	local10, #1
02c30     18 29 02 F6 | 	mov	local06, local10
02c34     03 28 66 F0 | 	shl	local06, #3
02c38     26 00 00 FF 
02c3c     D0 E4 85 F1 | 	sub	objptr, ##19664
02c40     F2 2A 02 F6 | 	mov	local07, objptr
02c44     F2 28 02 F1 | 	add	local06, objptr
02c48     01 00 00 FF 
02c4c     03 34 06 F6 | 	mov	local12, ##515
02c50     04 28 06 F1 | 	add	local06, #4
02c54     01 00 80 FF 
02c58     14 07 68 FC | 	wrlong	##515, local06
02c5c     04 28 86 F1 | 	sub	local06, #4
02c60     53 00 00 FF 
02c64     E0 E5 85 F1 | 	sub	objptr, ##42976
02c68                 | LR__0130
02c68                 | ' 
02c68                 | ' ' abbreviated command has to be at the position addptr
02c68                 | ' 
02c68                 | ' 
02c68                 | ' 
02c68                 | ' '2b determine a type of the line
02c68                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
02c68     53 00 00 FF 
02c6c     E0 E5 05 F1 | 	add	objptr, ##42976
02c70     F2 12 02 FB | 	rdlong	arg01, objptr
02c74     53 00 00 FF 
02c78     E0 E5 85 F1 | 	sub	objptr, ##42976
02c7c     34 1D B0 FD | 	call	#_isdec
02c80     00 FA 0D F2 | 	cmp	result1, #0 wz
02c84     20 00 90 AD |  if_e	jmp	#LR__0131
02c88     53 00 00 FF 
02c8c     E0 E5 05 F1 | 	add	objptr, ##42976
02c90     F2 12 02 FB | 	rdlong	arg01, objptr
02c94     53 00 00 FF 
02c98     E0 E5 85 F1 | 	sub	objptr, ##42976
02c9c     00 14 06 F6 | 	mov	arg02, #0
02ca0     74 91 B1 FD | 	call	#__system____builtin_atoi
02ca4     FD 20 02 F6 | 	mov	local02, result1
02ca8                 | LR__0131
02ca8                 | ' 
02ca8                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104
02ca8     01 20 16 F2 | 	cmp	local02, #1 wc
02cac     2C 00 90 CD |  if_b	jmp	#LR__0132
02cb0     01 3C 0E F2 | 	cmp	local16, #1 wz
02cb4     55 00 00 AF 
02cb8     F8 E5 05 A1 |  if_e	add	objptr, ##44024
02cbc     F2 1E 02 AB |  if_e	rdlong	local01, objptr
02cc0     55 00 00 AF 
02cc4     F8 E5 85 A1 |  if_e	sub	objptr, ##44024
02cc8     03 1E 0E A2 |  if_e	cmp	local01, #3 wz
02ccc     0C 00 90 5D |  if_ne	jmp	#LR__0132
02cd0     10 13 02 F6 | 	mov	arg01, local02
02cd4     00 1E B0 FD | 	call	#_deleteline
02cd8     C8 04 90 FD | 	jmp	#LR__0148
02cdc                 | LR__0132
02cdc                 | ' 
02cdc                 | ' if linenum>0  andalso (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  
02cdc     01 20 16 F2 | 	cmp	local02, #1 wc
02ce0     E0 00 90 CD |  if_b	jmp	#LR__0135
02ce4     55 00 00 FF 
02ce8     F8 E5 05 F1 | 	add	objptr, ##44024
02cec     F2 1E 0A FB | 	rdlong	local01, objptr wz
02cf0     55 00 00 FF 
02cf4     F8 E5 85 F1 | 	sub	objptr, ##44024
02cf8     20 00 90 AD |  if_e	jmp	#LR__0133
02cfc     55 00 00 FF 
02d00     F8 E5 05 F1 | 	add	objptr, ##44024
02d04     F2 28 02 FB | 	rdlong	local06, objptr
02d08     55 00 00 FF 
02d0c     F8 E5 85 F1 | 	sub	objptr, ##44024
02d10     14 31 02 F6 | 	mov	local10, local06
02d14     03 30 0E F2 | 	cmp	local10, #3 wz
02d18     A8 00 90 5D |  if_ne	jmp	#LR__0135
02d1c                 | LR__0133
02d1c     53 00 00 FF 
02d20     F4 E5 05 F1 | 	add	objptr, ##42996
02d24     F2 34 02 FB | 	rdlong	local12, objptr
02d28     53 00 00 FF 
02d2c     F4 E5 85 F1 | 	sub	objptr, ##42996
02d30     1A 2B 02 F6 | 	mov	local07, local12
02d34     1B 2A 0E F2 | 	cmp	local07, #27 wz
02d38     88 00 90 AD |  if_e	jmp	#LR__0135
02d3c     55 00 00 FF 
02d40     F8 E5 05 F1 | 	add	objptr, ##44024
02d44     F2 16 02 FB | 	rdlong	arg03, objptr
02d48     55 00 00 FF 
02d4c     F8 E5 85 F1 | 	sub	objptr, ##44024
02d50     10 13 02 F6 | 	mov	arg01, local02
02d54     00 14 06 F6 | 	mov	arg02, #0
02d58     60 30 B0 FD | 	call	#_compile
02d5c     FD 22 0A F6 | 	mov	local03, result1 wz
02d60                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02d60                 | '   if err<>0 then printerror(err): goto 104
02d60     0C 00 90 AD |  if_e	jmp	#LR__0134
02d64     11 13 02 F6 | 	mov	arg01, local03
02d68     24 2A B1 FD | 	call	#_printerror
02d6c     34 04 90 FD | 	jmp	#LR__0148
02d70                 | LR__0134
02d70                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
02d70     7A 00 00 FF 
02d74     8C E4 05 F1 | 	add	objptr, ##62604
02d78     F2 12 02 FB | 	rdlong	arg01, objptr
02d7c     7A 00 00 FF 
02d80     8C E4 85 F1 | 	sub	objptr, ##62604
02d84     41 01 00 FF 
02d88     00 15 06 F6 | 	mov	arg02, ##@LR__4359
02d8c     4C 5F B1 FD | 	call	#__system___string_cmp
02d90     00 FA 0D F2 | 	cmp	result1, #0 wz
02d94     0C 04 90 AD |  if_e	jmp	#LR__0148
02d98     7A 00 00 FF 
02d9c     8C E4 05 F1 | 	add	objptr, ##62604
02da0     F2 1E 02 FB | 	rdlong	local01, objptr
02da4     24 00 00 FF 
02da8     9C E4 85 F1 | 	sub	objptr, ##18588
02dac     F2 1E 62 FC | 	wrlong	local01, objptr
02db0     08 E4 05 F1 | 	add	objptr, #8
02db4     F2 08 68 FC | 	wrlong	#4, objptr
02db8     55 00 00 FF 
02dbc     F8 E5 85 F1 | 	sub	objptr, ##44024
02dc0     A4 DC 9F FD | 	jmp	#LR__0020
02dc4                 | LR__0135
02dc4                 | '       							
02dc4                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 
02dc4     01 20 16 F2 | 	cmp	local02, #1 wc
02dc8     E4 00 90 CD |  if_b	jmp	#LR__0138
02dcc     55 00 00 FF 
02dd0     F8 E5 05 F1 | 	add	objptr, ##44024
02dd4     F2 1E 02 FB | 	rdlong	local01, objptr
02dd8     55 00 00 FF 
02ddc     F8 E5 85 F1 | 	sub	objptr, ##44024
02de0     01 1E 0E F2 | 	cmp	local01, #1 wz
02de4     20 00 90 AD |  if_e	jmp	#LR__0136
02de8     55 00 00 FF 
02dec     F8 E5 05 F1 | 	add	objptr, ##44024
02df0     F2 28 02 FB | 	rdlong	local06, objptr
02df4     55 00 00 FF 
02df8     F8 E5 85 F1 | 	sub	objptr, ##44024
02dfc     14 31 02 F6 | 	mov	local10, local06
02e00     02 30 0E F2 | 	cmp	local10, #2 wz
02e04     A8 00 90 5D |  if_ne	jmp	#LR__0138
02e08                 | LR__0136
02e08     53 00 00 FF 
02e0c     EC E5 05 F1 | 	add	objptr, ##42988
02e10     F2 34 02 FB | 	rdlong	local12, objptr
02e14     53 00 00 FF 
02e18     EC E5 85 F1 | 	sub	objptr, ##42988
02e1c     1A 2B 02 F6 | 	mov	local07, local12
02e20     1B 2A 0E F2 | 	cmp	local07, #27 wz
02e24     88 00 90 AD |  if_e	jmp	#LR__0138
02e28     55 00 00 FF 
02e2c     F8 E5 05 F1 | 	add	objptr, ##44024
02e30     F2 16 02 FB | 	rdlong	arg03, objptr
02e34     55 00 00 FF 
02e38     F8 E5 85 F1 | 	sub	objptr, ##44024
02e3c     10 13 02 F6 | 	mov	arg01, local02
02e40     00 14 06 F6 | 	mov	arg02, #0
02e44     74 2F B0 FD | 	call	#_compile
02e48     FD 22 0A F6 | 	mov	local03, result1 wz
02e4c                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02e4c                 | '   if err<>0 then printerror(err): goto 104
02e4c     0C 00 90 AD |  if_e	jmp	#LR__0137
02e50     11 13 02 F6 | 	mov	arg01, local03
02e54     38 29 B1 FD | 	call	#_printerror
02e58     48 03 90 FD | 	jmp	#LR__0148
02e5c                 | LR__0137
02e5c                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
02e5c     7A 00 00 FF 
02e60     8C E4 05 F1 | 	add	objptr, ##62604
02e64     F2 12 02 FB | 	rdlong	arg01, objptr
02e68     7A 00 00 FF 
02e6c     8C E4 85 F1 | 	sub	objptr, ##62604
02e70     41 01 00 FF 
02e74     01 15 06 F6 | 	mov	arg02, ##@LR__4360
02e78     60 5E B1 FD | 	call	#__system___string_cmp
02e7c     00 FA 0D F2 | 	cmp	result1, #0 wz
02e80     20 03 90 AD |  if_e	jmp	#LR__0148
02e84     7A 00 00 FF 
02e88     8C E4 05 F1 | 	add	objptr, ##62604
02e8c     F2 1E 02 FB | 	rdlong	local01, objptr
02e90     24 00 00 FF 
02e94     9C E4 85 F1 | 	sub	objptr, ##18588
02e98     F2 1E 62 FC | 	wrlong	local01, objptr
02e9c     08 E4 05 F1 | 	add	objptr, #8
02ea0     F2 08 68 FC | 	wrlong	#4, objptr
02ea4     55 00 00 FF 
02ea8     F8 E5 85 F1 | 	sub	objptr, ##44024
02eac     B8 DB 9F FD | 	jmp	#LR__0020
02eb0                 | LR__0138
02eb0                 | ' 							 
02eb0                 | ' if linenum>0 andalso (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  
02eb0     01 20 16 F2 | 	cmp	local02, #1 wc
02eb4     C0 00 90 CD |  if_b	jmp	#LR__0139
02eb8     55 00 00 FF 
02ebc     F8 E5 05 F1 | 	add	objptr, ##44024
02ec0     F2 1E 0A FB | 	rdlong	local01, objptr wz
02ec4     55 00 00 FF 
02ec8     F8 E5 85 F1 | 	sub	objptr, ##44024
02ecc     55 00 00 5F 
02ed0     F8 E5 05 51 |  if_ne	add	objptr, ##44024
02ed4     F2 28 02 5B |  if_ne	rdlong	local06, objptr
02ed8     55 00 00 5F 
02edc     F8 E5 85 51 |  if_ne	sub	objptr, ##44024
02ee0     03 28 0E 52 |  if_ne	cmp	local06, #3 wz
02ee4     53 00 00 AF 
02ee8     F4 E5 05 A1 |  if_e	add	objptr, ##42996
02eec     F2 34 02 AB |  if_e	rdlong	local12, objptr
02ef0     53 00 00 AF 
02ef4     F4 E5 85 A1 |  if_e	sub	objptr, ##42996
02ef8     1A 2B 02 A6 |  if_e	mov	local07, local12
02efc     1B 2A 0E A2 |  if_e	cmp	local07, #27 wz
02f00     74 00 90 5D |  if_ne	jmp	#LR__0139
02f04     55 00 00 FF 
02f08     F8 E5 05 F1 | 	add	objptr, ##44024
02f0c     F2 16 02 FB | 	rdlong	arg03, objptr
02f10     55 00 00 FF 
02f14     F8 E5 85 F1 | 	sub	objptr, ##44024
02f18     10 13 02 F6 | 	mov	arg01, local02
02f1c     00 14 06 F6 | 	mov	arg02, #0
02f20     68 2F B0 FD | 	call	#_compile_assign
02f24                 | '   compile_assign(linenum,0,cont)': print "called compile_assign with cont=";cont, "line$=";line$
02f24                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
02f24     7A 00 00 FF 
02f28     8C E4 05 F1 | 	add	objptr, ##62604
02f2c     F2 12 02 FB | 	rdlong	arg01, objptr
02f30     7A 00 00 FF 
02f34     8C E4 85 F1 | 	sub	objptr, ##62604
02f38     41 01 00 FF 
02f3c     02 15 06 F6 | 	mov	arg02, ##@LR__4361
02f40     98 5D B1 FD | 	call	#__system___string_cmp
02f44     00 FA 0D F2 | 	cmp	result1, #0 wz
02f48     58 02 90 AD |  if_e	jmp	#LR__0148
02f4c     7A 00 00 FF 
02f50     8C E4 05 F1 | 	add	objptr, ##62604
02f54     F2 1E 02 FB | 	rdlong	local01, objptr
02f58     24 00 00 FF 
02f5c     9C E4 85 F1 | 	sub	objptr, ##18588
02f60     F2 1E 62 FC | 	wrlong	local01, objptr
02f64     08 E4 05 F1 | 	add	objptr, #8
02f68     F2 08 68 FC | 	wrlong	#4, objptr
02f6c     55 00 00 FF 
02f70     F8 E5 85 F1 | 	sub	objptr, ##44024
02f74     F0 DA 9F FD | 	jmp	#LR__0020
02f78                 | LR__0139
02f78                 | '     							 
02f78                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 
02f78     01 20 16 F2 | 	cmp	local02, #1 wc
02f7c     C0 00 90 CD |  if_b	jmp	#LR__0140
02f80     55 00 00 FF 
02f84     F8 E5 05 F1 | 	add	objptr, ##44024
02f88     F2 1E 02 FB | 	rdlong	local01, objptr
02f8c     55 00 00 FF 
02f90     F8 E5 85 F1 | 	sub	objptr, ##44024
02f94     01 1E 0E F2 | 	cmp	local01, #1 wz
02f98     55 00 00 5F 
02f9c     F8 E5 05 51 |  if_ne	add	objptr, ##44024
02fa0     F2 30 02 5B |  if_ne	rdlong	local10, objptr
02fa4     55 00 00 5F 
02fa8     F8 E5 85 51 |  if_ne	sub	objptr, ##44024
02fac     02 30 0E 52 |  if_ne	cmp	local10, #2 wz
02fb0     53 00 00 AF 
02fb4     EC E5 05 A1 |  if_e	add	objptr, ##42988
02fb8     F2 34 02 AB |  if_e	rdlong	local12, objptr
02fbc     53 00 00 AF 
02fc0     EC E5 85 A1 |  if_e	sub	objptr, ##42988
02fc4     1B 34 0E A2 |  if_e	cmp	local12, #27 wz
02fc8     74 00 90 5D |  if_ne	jmp	#LR__0140
02fcc     55 00 00 FF 
02fd0     F8 E5 05 F1 | 	add	objptr, ##44024
02fd4     F2 16 02 FB | 	rdlong	arg03, objptr
02fd8     55 00 00 FF 
02fdc     F8 E5 85 F1 | 	sub	objptr, ##44024
02fe0     10 13 02 F6 | 	mov	arg01, local02
02fe4     00 14 06 F6 | 	mov	arg02, #0
02fe8     A0 2E B0 FD | 	call	#_compile_assign
02fec                 | '   compile_assign(linenum,0,cont) ': print "called compile_assign with cont=";cont, "line$=";line$
02fec                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								'<-- TODO: add a line to a program
02fec     7A 00 00 FF 
02ff0     8C E4 05 F1 | 	add	objptr, ##62604
02ff4     F2 12 02 FB | 	rdlong	arg01, objptr
02ff8     7A 00 00 FF 
02ffc     8C E4 85 F1 | 	sub	objptr, ##62604
03000     41 01 00 FF 
03004     03 15 06 F6 | 	mov	arg02, ##@LR__4362
03008     D0 5C B1 FD | 	call	#__system___string_cmp
0300c     00 FA 0D F2 | 	cmp	result1, #0 wz
03010     90 01 90 AD |  if_e	jmp	#LR__0148
03014     7A 00 00 FF 
03018     8C E4 05 F1 | 	add	objptr, ##62604
0301c     F2 1E 02 FB | 	rdlong	local01, objptr
03020     24 00 00 FF 
03024     9C E4 85 F1 | 	sub	objptr, ##18588
03028     F2 1E 62 FC | 	wrlong	local01, objptr
0302c     08 E4 05 F1 | 	add	objptr, #8
03030     F2 08 68 FC | 	wrlong	#4, objptr
03034     55 00 00 FF 
03038     F8 E5 85 F1 | 	sub	objptr, ##44024
0303c     28 DA 9F FD | 	jmp	#LR__0020
03040                 | LR__0140
03040                 | ' 
03040                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_eq then compile_assign(0) : goto 103    					' assign a variable
03040     53 00 00 FF 
03044     E4 E5 05 F1 | 	add	objptr, ##42980
03048     F2 1E 02 FB | 	rdlong	local01, objptr
0304c     53 00 00 FF 
03050     E4 E5 85 F1 | 	sub	objptr, ##42980
03054     01 00 00 FF 
03058     04 1E 0E F2 | 	cmp	local01, ##516 wz
0305c     53 00 00 AF 
03060     EC E5 05 A1 |  if_e	add	objptr, ##42988
03064     F2 30 02 AB |  if_e	rdlong	local10, objptr
03068     53 00 00 AF 
0306c     EC E5 85 A1 |  if_e	sub	objptr, ##42988
03070     1B 30 0E A2 |  if_e	cmp	local10, #27 wz
03074     14 00 90 5D |  if_ne	jmp	#LR__0141
03078     00 12 06 F6 | 	mov	arg01, #0
0307c     00 14 06 F6 | 	mov	arg02, #0
03080     00 16 06 F6 | 	mov	arg03, #0
03084     04 2E B0 FD | 	call	#_compile_assign
03088     90 00 90 FD | 	jmp	#LR__0143
0308c                 | LR__0141
0308c                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_rpar then print " User functions and arrays not yet implemented" : goto 101
0308c     53 00 00 FF 
03090     E4 E5 05 F1 | 	add	objptr, ##42980
03094     F2 1E 02 FB | 	rdlong	local01, objptr
03098     53 00 00 FF 
0309c     E4 E5 85 F1 | 	sub	objptr, ##42980
030a0     01 00 00 FF 
030a4     04 1E 0E F2 | 	cmp	local01, ##516 wz
030a8     53 00 00 AF 
030ac     EC E5 05 A1 |  if_e	add	objptr, ##42988
030b0     F2 30 02 AB |  if_e	rdlong	local10, objptr
030b4     53 00 00 AF 
030b8     EC E5 85 A1 |  if_e	sub	objptr, ##42988
030bc     14 30 0E A2 |  if_e	cmp	local10, #20 wz
030c0     44 00 90 5D |  if_ne	jmp	#LR__0142
030c4     00 12 06 F6 | 	mov	arg01, #0
030c8     EC B4 B1 FD | 	call	#__system___getiolock_0423
030cc     FD 12 02 F6 | 	mov	arg01, result1
030d0     E0 5B B1 FD | 	call	#__system___lockmem
030d4     41 01 00 FF 
030d8     04 15 06 F6 | 	mov	arg02, ##@LR__4363
030dc     00 12 06 F6 | 	mov	arg01, #0
030e0     00 16 06 F6 | 	mov	arg03, #0
030e4     C0 68 B1 FD | 	call	#__system___basic_print_string
030e8     00 12 06 F6 | 	mov	arg01, #0
030ec     0A 14 06 F6 | 	mov	arg02, #10
030f0     00 16 06 F6 | 	mov	arg03, #0
030f4     58 68 B1 FD | 	call	#__system___basic_print_char
030f8     00 12 06 F6 | 	mov	arg01, #0
030fc     B8 B4 B1 FD | 	call	#__system___getiolock_0423
03100     FD 00 68 FC | 	wrlong	#0, result1
03104     7C 00 90 FD | 	jmp	#LR__0147
03108                 | LR__0142
03108     00 12 06 F6 | 	mov	arg01, #0
0310c     00 14 06 F6 | 	mov	arg02, #0
03110     00 16 06 F6 | 	mov	arg03, #0
03114     A4 2C B0 FD | 	call	#_compile
03118     FD 22 02 F6 | 	mov	local03, result1
0311c                 | LR__0143
0311c                 | ' 
0311c                 | ' ' if we are here, this is not a program line to add, so try to execute this
0311c                 | ' 
0311c                 | ' err=compile(0) : '' execute(0) ' print "  this is a command to execute"  ''' param=line to compile
0311c                 | ' 103  'for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, : next i
0311c                 | ' if err=0 then execute_line() else printerror(err)
0311c     00 22 0E F2 | 	cmp	local03, #0 wz
03120     0C 00 90 5D |  if_ne	jmp	#LR__0144
03124     00 12 06 F6 | 	mov	arg01, #0
03128     8C 66 B0 FD | 	call	#_execute_line
0312c     08 00 90 FD | 	jmp	#LR__0145
03130                 | LR__0144
03130     11 13 02 F6 | 	mov	arg01, local03
03134     58 26 B1 FD | 	call	#_printerror
03138                 | LR__0145
03138                 | ' if rest$<>"" then line$=rest$:  goto 108 
03138     7A 00 00 FF 
0313c     8C E4 05 F1 | 	add	objptr, ##62604
03140     F2 12 02 FB | 	rdlong	arg01, objptr
03144     7A 00 00 FF 
03148     8C E4 85 F1 | 	sub	objptr, ##62604
0314c     41 01 00 FF 
03150     33 15 06 F6 | 	mov	arg02, ##@LR__4364
03154     84 5B B1 FD | 	call	#__system___string_cmp
03158     00 FA 0D F2 | 	cmp	result1, #0 wz
0315c     24 00 90 AD |  if_e	jmp	#LR__0146
03160     7A 00 00 FF 
03164     8C E4 05 F1 | 	add	objptr, ##62604
03168     F2 1E 02 FB | 	rdlong	local01, objptr
0316c     24 00 00 FF 
03170     9C E4 85 F1 | 	sub	objptr, ##18588
03174     F2 1E 62 FC | 	wrlong	local01, objptr
03178     55 00 00 FF 
0317c     F0 E5 85 F1 | 	sub	objptr, ##44016
03180     E4 D8 9F FD | 	jmp	#LR__0020
03184                 | LR__0146
03184                 | LR__0147
03184     41 01 00 FF 
03188     34 13 06 F6 | 	mov	arg01, ##@LR__4365
0318c                 | ' 
0318c                 | ' write(text)
0318c     FC 4A B1 FD | 	call	#_hg010b_spin2_write
03190                 | ' crlf
03190     58 4C B1 FD | 	call	#_hg010b_spin2_crlf
03194     41 01 00 FF 
03198     35 13 06 F6 | 	mov	arg01, ##@LR__4366
0319c                 | ' 
0319c                 | ' write(text)
0319c     EC 4A B1 FD | 	call	#_hg010b_spin2_write
031a0                 | ' crlf
031a0     48 4C B1 FD | 	call	#_hg010b_spin2_crlf
031a4                 | LR__0148
031a4     A7 F0 03 F6 | 	mov	ptra, fp
031a8     B2 00 A0 FD | 	call	#popregs_
031ac                 | _interpret_ret
031ac     2D 00 64 FD | 	ret
031b0                 | 
031b0                 | ' 
031b0                 | ' 
031b0                 | ' '------------------------------ Helper functions for the tokenizer -------------------------------------------
031b0                 | ' 
031b0                 | ' function isoperator(s as string) as ubyte
031b0                 | _isoperator
031b0     01 4A 05 F6 | 	mov	COUNT_, #1
031b4     A8 00 A0 FD | 	call	#pushregs_
031b8                 | ' 
031b8                 | ' select case s
031b8     09 1F 02 F6 | 	mov	local01, arg01
031bc     41 01 00 FF 
031c0     3B 15 06 F6 | 	mov	arg02, ##@LR__4367
031c4     0F 13 02 F6 | 	mov	arg01, local01
031c8     10 5B B1 FD | 	call	#__system___string_cmp
031cc     00 FA 0D F2 | 	cmp	result1, #0 wz
031d0     FC 01 90 AD |  if_e	jmp	#LR__0150
031d4     41 01 00 FF 
031d8     3D 15 06 F6 | 	mov	arg02, ##@LR__4368
031dc     0F 13 02 F6 | 	mov	arg01, local01
031e0     F8 5A B1 FD | 	call	#__system___string_cmp
031e4     00 FA 0D F2 | 	cmp	result1, #0 wz
031e8     EC 01 90 AD |  if_e	jmp	#LR__0151
031ec     41 01 00 FF 
031f0     3F 15 06 F6 | 	mov	arg02, ##@LR__4369
031f4     0F 13 02 F6 | 	mov	arg01, local01
031f8     E0 5A B1 FD | 	call	#__system___string_cmp
031fc     00 FA 0D F2 | 	cmp	result1, #0 wz
03200     DC 01 90 AD |  if_e	jmp	#LR__0152
03204     41 01 00 FF 
03208     42 15 06 F6 | 	mov	arg02, ##@LR__4370
0320c     0F 13 02 F6 | 	mov	arg01, local01
03210     C8 5A B1 FD | 	call	#__system___string_cmp
03214     00 FA 0D F2 | 	cmp	result1, #0 wz
03218     CC 01 90 AD |  if_e	jmp	#LR__0153
0321c     41 01 00 FF 
03220     46 15 06 F6 | 	mov	arg02, ##@LR__4371
03224     0F 13 02 F6 | 	mov	arg01, local01
03228     B0 5A B1 FD | 	call	#__system___string_cmp
0322c     00 FA 0D F2 | 	cmp	result1, #0 wz
03230     BC 01 90 AD |  if_e	jmp	#LR__0154
03234     41 01 00 FF 
03238     48 15 06 F6 | 	mov	arg02, ##@LR__4372
0323c     0F 13 02 F6 | 	mov	arg01, local01
03240     98 5A B1 FD | 	call	#__system___string_cmp
03244     00 FA 0D F2 | 	cmp	result1, #0 wz
03248     AC 01 90 AD |  if_e	jmp	#LR__0155
0324c     41 01 00 FF 
03250     4A 15 06 F6 | 	mov	arg02, ##@LR__4373
03254     0F 13 02 F6 | 	mov	arg01, local01
03258     80 5A B1 FD | 	call	#__system___string_cmp
0325c     00 FA 0D F2 | 	cmp	result1, #0 wz
03260     9C 01 90 AD |  if_e	jmp	#LR__0156
03264     41 01 00 FF 
03268     4E 15 06 F6 | 	mov	arg02, ##@LR__4374
0326c     0F 13 02 F6 | 	mov	arg01, local01
03270     68 5A B1 FD | 	call	#__system___string_cmp
03274     00 FA 0D F2 | 	cmp	result1, #0 wz
03278     8C 01 90 AD |  if_e	jmp	#LR__0157
0327c     41 01 00 FF 
03280     52 15 06 F6 | 	mov	arg02, ##@LR__4375
03284     0F 13 02 F6 | 	mov	arg01, local01
03288     50 5A B1 FD | 	call	#__system___string_cmp
0328c     00 FA 0D F2 | 	cmp	result1, #0 wz
03290     7C 01 90 AD |  if_e	jmp	#LR__0158
03294     41 01 00 FF 
03298     56 15 06 F6 | 	mov	arg02, ##@LR__4376
0329c     0F 13 02 F6 | 	mov	arg01, local01
032a0     38 5A B1 FD | 	call	#__system___string_cmp
032a4     00 FA 0D F2 | 	cmp	result1, #0 wz
032a8     6C 01 90 AD |  if_e	jmp	#LR__0159
032ac     41 01 00 FF 
032b0     5A 15 06 F6 | 	mov	arg02, ##@LR__4377
032b4     0F 13 02 F6 | 	mov	arg01, local01
032b8     20 5A B1 FD | 	call	#__system___string_cmp
032bc     00 FA 0D F2 | 	cmp	result1, #0 wz
032c0     5C 01 90 AD |  if_e	jmp	#LR__0160
032c4     41 01 00 FF 
032c8     5E 15 06 F6 | 	mov	arg02, ##@LR__4378
032cc     0F 13 02 F6 | 	mov	arg01, local01
032d0     08 5A B1 FD | 	call	#__system___string_cmp
032d4     00 FA 0D F2 | 	cmp	result1, #0 wz
032d8     4C 01 90 AD |  if_e	jmp	#LR__0161
032dc     41 01 00 FF 
032e0     60 15 06 F6 | 	mov	arg02, ##@LR__4379
032e4     0F 13 02 F6 | 	mov	arg01, local01
032e8     F0 59 B1 FD | 	call	#__system___string_cmp
032ec     00 FA 0D F2 | 	cmp	result1, #0 wz
032f0     3C 01 90 AD |  if_e	jmp	#LR__0162
032f4     41 01 00 FF 
032f8     64 15 06 F6 | 	mov	arg02, ##@LR__4380
032fc     0F 13 02 F6 | 	mov	arg01, local01
03300     D8 59 B1 FD | 	call	#__system___string_cmp
03304     00 FA 0D F2 | 	cmp	result1, #0 wz
03308     2C 01 90 AD |  if_e	jmp	#LR__0163
0330c     41 01 00 FF 
03310     66 15 06 F6 | 	mov	arg02, ##@LR__4381
03314     0F 13 02 F6 | 	mov	arg01, local01
03318     C0 59 B1 FD | 	call	#__system___string_cmp
0331c     00 FA 0D F2 | 	cmp	result1, #0 wz
03320     1C 01 90 AD |  if_e	jmp	#LR__0164
03324     41 01 00 FF 
03328     68 15 06 F6 | 	mov	arg02, ##@LR__4382
0332c     0F 13 02 F6 | 	mov	arg01, local01
03330     A8 59 B1 FD | 	call	#__system___string_cmp
03334     00 FA 0D F2 | 	cmp	result1, #0 wz
03338     0C 01 90 AD |  if_e	jmp	#LR__0165
0333c     41 01 00 FF 
03340     6B 15 06 F6 | 	mov	arg02, ##@LR__4383
03344     0F 13 02 F6 | 	mov	arg01, local01
03348     90 59 B1 FD | 	call	#__system___string_cmp
0334c     00 FA 0D F2 | 	cmp	result1, #0 wz
03350     FC 00 90 AD |  if_e	jmp	#LR__0166
03354     41 01 00 FF 
03358     6E 15 06 F6 | 	mov	arg02, ##@LR__4384
0335c     0F 13 02 F6 | 	mov	arg01, local01
03360     78 59 B1 FD | 	call	#__system___string_cmp
03364     00 FA 0D F2 | 	cmp	result1, #0 wz
03368     EC 00 90 AD |  if_e	jmp	#LR__0167
0336c     41 01 00 FF 
03370     70 15 06 F6 | 	mov	arg02, ##@LR__4385
03374     0F 13 02 F6 | 	mov	arg01, local01
03378     60 59 B1 FD | 	call	#__system___string_cmp
0337c     00 FA 0D F2 | 	cmp	result1, #0 wz
03380     DC 00 90 AD |  if_e	jmp	#LR__0168
03384     41 01 00 FF 
03388     72 15 06 F6 | 	mov	arg02, ##@LR__4386
0338c     0F 13 02 F6 | 	mov	arg01, local01
03390     48 59 B1 FD | 	call	#__system___string_cmp
03394     00 FA 0D F2 | 	cmp	result1, #0 wz
03398     CC 00 90 AD |  if_e	jmp	#LR__0169
0339c     41 01 00 FF 
033a0     75 15 06 F6 | 	mov	arg02, ##@LR__4387
033a4     0F 13 02 F6 | 	mov	arg01, local01
033a8     30 59 B1 FD | 	call	#__system___string_cmp
033ac     00 FA 0D F2 | 	cmp	result1, #0 wz
033b0     BC 00 90 AD |  if_e	jmp	#LR__0170
033b4     41 01 00 FF 
033b8     78 15 06 F6 | 	mov	arg02, ##@LR__4388
033bc     0F 13 02 F6 | 	mov	arg01, local01
033c0     18 59 B1 FD | 	call	#__system___string_cmp
033c4     00 FA 0D F2 | 	cmp	result1, #0 wz
033c8     AC 00 90 AD |  if_e	jmp	#LR__0171
033cc     B0 00 90 FD | 	jmp	#LR__0172
033d0                 | LR__0150
033d0     01 FA 05 F6 | 	mov	result1, #1
033d4     AC 00 90 FD | 	jmp	#LR__0173
033d8                 | LR__0151
033d8     02 FA 05 F6 | 	mov	result1, #2
033dc     A4 00 90 FD | 	jmp	#LR__0173
033e0                 | LR__0152
033e0     03 FA 05 F6 | 	mov	result1, #3
033e4     9C 00 90 FD | 	jmp	#LR__0173
033e8                 | LR__0153
033e8     04 FA 05 F6 | 	mov	result1, #4
033ec     94 00 90 FD | 	jmp	#LR__0173
033f0                 | LR__0154
033f0     05 FA 05 F6 | 	mov	result1, #5
033f4     8C 00 90 FD | 	jmp	#LR__0173
033f8                 | LR__0155
033f8     06 FA 05 F6 | 	mov	result1, #6
033fc     84 00 90 FD | 	jmp	#LR__0173
03400                 | LR__0156
03400     07 FA 05 F6 | 	mov	result1, #7
03404     7C 00 90 FD | 	jmp	#LR__0173
03408                 | LR__0157
03408     08 FA 05 F6 | 	mov	result1, #8
0340c     74 00 90 FD | 	jmp	#LR__0173
03410                 | LR__0158
03410     09 FA 05 F6 | 	mov	result1, #9
03414     6C 00 90 FD | 	jmp	#LR__0173
03418                 | LR__0159
03418     0A FA 05 F6 | 	mov	result1, #10
0341c     64 00 90 FD | 	jmp	#LR__0173
03420                 | LR__0160
03420     0B FA 05 F6 | 	mov	result1, #11
03424     5C 00 90 FD | 	jmp	#LR__0173
03428                 | LR__0161
03428     0C FA 05 F6 | 	mov	result1, #12
0342c     54 00 90 FD | 	jmp	#LR__0173
03430                 | LR__0162
03430     0D FA 05 F6 | 	mov	result1, #13
03434     4C 00 90 FD | 	jmp	#LR__0173
03438                 | LR__0163
03438     0E FA 05 F6 | 	mov	result1, #14
0343c     44 00 90 FD | 	jmp	#LR__0173
03440                 | LR__0164
03440     1B FA 05 F6 | 	mov	result1, #27
03444     3C 00 90 FD | 	jmp	#LR__0173
03448                 | LR__0165
03448     27 FA 05 F6 | 	mov	result1, #39
0344c     34 00 90 FD | 	jmp	#LR__0173
03450                 | LR__0166
03450     26 FA 05 F6 | 	mov	result1, #38
03454     2C 00 90 FD | 	jmp	#LR__0173
03458                 | LR__0167
03458     10 FA 05 F6 | 	mov	result1, #16
0345c     24 00 90 FD | 	jmp	#LR__0173
03460                 | LR__0168
03460     0F FA 05 F6 | 	mov	result1, #15
03464     1C 00 90 FD | 	jmp	#LR__0173
03468                 | LR__0169
03468     2A FA 05 F6 | 	mov	result1, #42
0346c     14 00 90 FD | 	jmp	#LR__0173
03470                 | LR__0170
03470     28 FA 05 F6 | 	mov	result1, #40
03474     0C 00 90 FD | 	jmp	#LR__0173
03478                 | LR__0171
03478     29 FA 05 F6 | 	mov	result1, #41
0347c     04 00 90 FD | 	jmp	#LR__0173
03480                 | LR__0172
03480     00 FA 05 F6 | 	mov	result1, #0
03484                 | LR__0173
03484     A7 F0 03 F6 | 	mov	ptra, fp
03488     B2 00 A0 FD | 	call	#popregs_
0348c                 | _isoperator_ret
0348c     2D 00 64 FD | 	ret
03490                 | 
03490                 | ' 
03490                 | ' function isseparator(s as string) as ubyte
03490                 | _isseparator
03490     01 4A 05 F6 | 	mov	COUNT_, #1
03494     A8 00 A0 FD | 	call	#pushregs_
03498                 | ' 
03498                 | ' select case s
03498     09 1F 02 F6 | 	mov	local01, arg01
0349c     41 01 00 FF 
034a0     7B 15 06 F6 | 	mov	arg02, ##@LR__4389
034a4     0F 13 02 F6 | 	mov	arg01, local01
034a8     30 58 B1 FD | 	call	#__system___string_cmp
034ac     00 FA 0D F2 | 	cmp	result1, #0 wz
034b0     54 01 90 AD |  if_e	jmp	#LR__0180
034b4     41 01 00 FF 
034b8     7D 15 06 F6 | 	mov	arg02, ##@LR__4390
034bc     0F 13 02 F6 | 	mov	arg01, local01
034c0     18 58 B1 FD | 	call	#__system___string_cmp
034c4     00 FA 0D F2 | 	cmp	result1, #0 wz
034c8     44 01 90 AD |  if_e	jmp	#LR__0181
034cc     41 01 00 FF 
034d0     7F 15 06 F6 | 	mov	arg02, ##@LR__4391
034d4     0F 13 02 F6 | 	mov	arg01, local01
034d8     00 58 B1 FD | 	call	#__system___string_cmp
034dc     00 FA 0D F2 | 	cmp	result1, #0 wz
034e0     34 01 90 AD |  if_e	jmp	#LR__0182
034e4     41 01 00 FF 
034e8     81 15 06 F6 | 	mov	arg02, ##@LR__4392
034ec     0F 13 02 F6 | 	mov	arg01, local01
034f0     E8 57 B1 FD | 	call	#__system___string_cmp
034f4     00 FA 0D F2 | 	cmp	result1, #0 wz
034f8     24 01 90 AD |  if_e	jmp	#LR__0183
034fc     41 01 00 FF 
03500     83 15 06 F6 | 	mov	arg02, ##@LR__4393
03504     0F 13 02 F6 | 	mov	arg01, local01
03508     D0 57 B1 FD | 	call	#__system___string_cmp
0350c     00 FA 0D F2 | 	cmp	result1, #0 wz
03510     14 01 90 AD |  if_e	jmp	#LR__0184
03514     41 01 00 FF 
03518     85 15 06 F6 | 	mov	arg02, ##@LR__4394
0351c     0F 13 02 F6 | 	mov	arg01, local01
03520     B8 57 B1 FD | 	call	#__system___string_cmp
03524     00 FA 0D F2 | 	cmp	result1, #0 wz
03528     04 01 90 AD |  if_e	jmp	#LR__0185
0352c     41 01 00 FF 
03530     87 15 06 F6 | 	mov	arg02, ##@LR__4395
03534     0F 13 02 F6 | 	mov	arg01, local01
03538     A0 57 B1 FD | 	call	#__system___string_cmp
0353c     00 FA 0D F2 | 	cmp	result1, #0 wz
03540     F4 00 90 AD |  if_e	jmp	#LR__0186
03544     41 01 00 FF 
03548     89 15 06 F6 | 	mov	arg02, ##@LR__4396
0354c     0F 13 02 F6 | 	mov	arg01, local01
03550     88 57 B1 FD | 	call	#__system___string_cmp
03554     00 FA 0D F2 | 	cmp	result1, #0 wz
03558     E4 00 90 AD |  if_e	jmp	#LR__0187
0355c     41 01 00 FF 
03560     8B 15 06 F6 | 	mov	arg02, ##@LR__4397
03564     0F 13 02 F6 | 	mov	arg01, local01
03568     70 57 B1 FD | 	call	#__system___string_cmp
0356c     00 FA 0D F2 | 	cmp	result1, #0 wz
03570     D4 00 90 AD |  if_e	jmp	#LR__0188
03574     41 01 00 FF 
03578     8D 15 06 F6 | 	mov	arg02, ##@LR__4398
0357c     0F 13 02 F6 | 	mov	arg01, local01
03580     58 57 B1 FD | 	call	#__system___string_cmp
03584     00 FA 0D F2 | 	cmp	result1, #0 wz
03588     C4 00 90 AD |  if_e	jmp	#LR__0189
0358c     41 01 00 FF 
03590     8F 15 06 F6 | 	mov	arg02, ##@LR__4399
03594     0F 13 02 F6 | 	mov	arg01, local01
03598     40 57 B1 FD | 	call	#__system___string_cmp
0359c     00 FA 0D F2 | 	cmp	result1, #0 wz
035a0     B4 00 90 AD |  if_e	jmp	#LR__0190
035a4     41 01 00 FF 
035a8     91 15 06 F6 | 	mov	arg02, ##@LR__4400
035ac     0F 13 02 F6 | 	mov	arg01, local01
035b0     28 57 B1 FD | 	call	#__system___string_cmp
035b4     00 FA 0D F2 | 	cmp	result1, #0 wz
035b8     A4 00 90 AD |  if_e	jmp	#LR__0191
035bc     41 01 00 FF 
035c0     93 15 06 F6 | 	mov	arg02, ##@LR__4401
035c4     0F 13 02 F6 | 	mov	arg01, local01
035c8     10 57 B1 FD | 	call	#__system___string_cmp
035cc     00 FA 0D F2 | 	cmp	result1, #0 wz
035d0     94 00 90 AD |  if_e	jmp	#LR__0192
035d4     41 01 00 FF 
035d8     95 15 06 F6 | 	mov	arg02, ##@LR__4402
035dc     0F 13 02 F6 | 	mov	arg01, local01
035e0     F8 56 B1 FD | 	call	#__system___string_cmp
035e4     00 FA 0D F2 | 	cmp	result1, #0 wz
035e8     84 00 90 AD |  if_e	jmp	#LR__0193
035ec     41 01 00 FF 
035f0     97 15 06 F6 | 	mov	arg02, ##@LR__4403
035f4     0F 13 02 F6 | 	mov	arg01, local01
035f8     E0 56 B1 FD | 	call	#__system___string_cmp
035fc     00 FA 0D F2 | 	cmp	result1, #0 wz
03600     74 00 90 AD |  if_e	jmp	#LR__0194
03604     78 00 90 FD | 	jmp	#LR__0195
03608                 | LR__0180
03608     01 FA 05 F6 | 	mov	result1, #1
0360c     74 00 90 FD | 	jmp	#LR__0196
03610                 | LR__0181
03610     02 FA 05 F6 | 	mov	result1, #2
03614     6C 00 90 FD | 	jmp	#LR__0196
03618                 | LR__0182
03618     1B FA 05 F6 | 	mov	result1, #27
0361c     64 00 90 FD | 	jmp	#LR__0196
03620                 | LR__0183
03620     11 FA 05 F6 | 	mov	result1, #17
03624     5C 00 90 FD | 	jmp	#LR__0196
03628                 | LR__0184
03628     05 FA 05 F6 | 	mov	result1, #5
0362c     54 00 90 FD | 	jmp	#LR__0196
03630                 | LR__0185
03630     06 FA 05 F6 | 	mov	result1, #6
03634     4C 00 90 FD | 	jmp	#LR__0196
03638                 | LR__0186
03638     12 FA 05 F6 | 	mov	result1, #18
0363c     44 00 90 FD | 	jmp	#LR__0196
03640                 | LR__0187
03640     13 FA 05 F6 | 	mov	result1, #19
03644     3C 00 90 FD | 	jmp	#LR__0196
03648                 | LR__0188
03648     0C FA 05 F6 | 	mov	result1, #12
0364c     34 00 90 FD | 	jmp	#LR__0196
03650                 | LR__0189
03650     14 FA 05 F6 | 	mov	result1, #20
03654     2C 00 90 FD | 	jmp	#LR__0196
03658                 | LR__0190
03658     15 FA 05 F6 | 	mov	result1, #21
0365c     24 00 90 FD | 	jmp	#LR__0196
03660                 | LR__0191
03660     16 FA 05 F6 | 	mov	result1, #22
03664     1C 00 90 FD | 	jmp	#LR__0196
03668                 | LR__0192
03668     FF FB 05 F6 | 	mov	result1, #511
0366c     14 00 90 FD | 	jmp	#LR__0196
03670                 | LR__0193
03670     0F FA 05 F6 | 	mov	result1, #15
03674     0C 00 90 FD | 	jmp	#LR__0196
03678                 | LR__0194
03678     10 FA 05 F6 | 	mov	result1, #16
0367c     04 00 90 FD | 	jmp	#LR__0196
03680                 | LR__0195
03680     00 FA 05 F6 | 	mov	result1, #0
03684                 | LR__0196
03684     A7 F0 03 F6 | 	mov	ptra, fp
03688     B2 00 A0 FD | 	call	#popregs_
0368c                 | _isseparator_ret
0368c     2D 00 64 FD | 	ret
03690                 | 
03690                 | ' 
03690                 | ' 
03690                 | ' function iscommand(s as string) as ubyte
03690                 | _iscommand
03690     01 4A 05 F6 | 	mov	COUNT_, #1
03694     A8 00 A0 FD | 	call	#pushregs_
03698                 | ' 
03698                 | ' select case s
03698     09 1F 02 F6 | 	mov	local01, arg01
0369c     41 01 00 FF 
036a0     9B 15 06 F6 | 	mov	arg02, ##@LR__4405
036a4     0F 13 02 F6 | 	mov	arg01, local01
036a8     30 56 B1 FD | 	call	#__system___string_cmp
036ac     00 FA 0D F2 | 	cmp	result1, #0 wz
036b0     3C 07 90 AD |  if_e	jmp	#LR__0200
036b4     41 01 00 FF 
036b8     A0 15 06 F6 | 	mov	arg02, ##@LR__4406
036bc     0F 13 02 F6 | 	mov	arg01, local01
036c0     18 56 B1 FD | 	call	#__system___string_cmp
036c4     00 FA 0D F2 | 	cmp	result1, #0 wz
036c8     2C 07 90 AD |  if_e	jmp	#LR__0201
036cc     41 01 00 FF 
036d0     A3 15 06 F6 | 	mov	arg02, ##@LR__4407
036d4     0F 13 02 F6 | 	mov	arg01, local01
036d8     00 56 B1 FD | 	call	#__system___string_cmp
036dc     00 FA 0D F2 | 	cmp	result1, #0 wz
036e0     1C 07 90 AD |  if_e	jmp	#LR__0202
036e4     41 01 00 FF 
036e8     A7 15 06 F6 | 	mov	arg02, ##@LR__4408
036ec     0F 13 02 F6 | 	mov	arg01, local01
036f0     E8 55 B1 FD | 	call	#__system___string_cmp
036f4     00 FA 0D F2 | 	cmp	result1, #0 wz
036f8     0C 07 90 AD |  if_e	jmp	#LR__0203
036fc     41 01 00 FF 
03700     AC 15 06 F6 | 	mov	arg02, ##@LR__4409
03704     0F 13 02 F6 | 	mov	arg01, local01
03708     D0 55 B1 FD | 	call	#__system___string_cmp
0370c     00 FA 0D F2 | 	cmp	result1, #0 wz
03710     FC 06 90 AD |  if_e	jmp	#LR__0204
03714     41 01 00 FF 
03718     B0 15 06 F6 | 	mov	arg02, ##@LR__4410
0371c     0F 13 02 F6 | 	mov	arg01, local01
03720     B8 55 B1 FD | 	call	#__system___string_cmp
03724     00 FA 0D F2 | 	cmp	result1, #0 wz
03728     EC 06 90 AD |  if_e	jmp	#LR__0205
0372c     41 01 00 FF 
03730     B7 15 06 F6 | 	mov	arg02, ##@LR__4411
03734     0F 13 02 F6 | 	mov	arg01, local01
03738     A0 55 B1 FD | 	call	#__system___string_cmp
0373c     00 FA 0D F2 | 	cmp	result1, #0 wz
03740     DC 06 90 AD |  if_e	jmp	#LR__0206
03744     41 01 00 FF 
03748     BB 15 06 F6 | 	mov	arg02, ##@LR__4412
0374c     0F 13 02 F6 | 	mov	arg01, local01
03750     88 55 B1 FD | 	call	#__system___string_cmp
03754     00 FA 0D F2 | 	cmp	result1, #0 wz
03758     CC 06 90 AD |  if_e	jmp	#LR__0207
0375c     41 01 00 FF 
03760     C1 15 06 F6 | 	mov	arg02, ##@LR__4413
03764     0F 13 02 F6 | 	mov	arg01, local01
03768     70 55 B1 FD | 	call	#__system___string_cmp
0376c     00 FA 0D F2 | 	cmp	result1, #0 wz
03770     BC 06 90 AD |  if_e	jmp	#LR__0208
03774     41 01 00 FF 
03778     C5 15 06 F6 | 	mov	arg02, ##@LR__4414
0377c     0F 13 02 F6 | 	mov	arg01, local01
03780     58 55 B1 FD | 	call	#__system___string_cmp
03784     00 FA 0D F2 | 	cmp	result1, #0 wz
03788     AC 06 90 AD |  if_e	jmp	#LR__0209
0378c     41 01 00 FF 
03790     CB 15 06 F6 | 	mov	arg02, ##@LR__4415
03794     0F 13 02 F6 | 	mov	arg01, local01
03798     40 55 B1 FD | 	call	#__system___string_cmp
0379c     00 FA 0D F2 | 	cmp	result1, #0 wz
037a0     9C 06 90 AD |  if_e	jmp	#LR__0210
037a4     41 01 00 FF 
037a8     CE 15 06 F6 | 	mov	arg02, ##@LR__4416
037ac     0F 13 02 F6 | 	mov	arg01, local01
037b0     28 55 B1 FD | 	call	#__system___string_cmp
037b4     00 FA 0D F2 | 	cmp	result1, #0 wz
037b8     8C 06 90 AD |  if_e	jmp	#LR__0211
037bc     41 01 00 FF 
037c0     D4 15 06 F6 | 	mov	arg02, ##@LR__4417
037c4     0F 13 02 F6 | 	mov	arg01, local01
037c8     10 55 B1 FD | 	call	#__system___string_cmp
037cc     00 FA 0D F2 | 	cmp	result1, #0 wz
037d0     7C 06 90 AD |  if_e	jmp	#LR__0212
037d4     41 01 00 FF 
037d8     D8 15 06 F6 | 	mov	arg02, ##@LR__4418
037dc     0F 13 02 F6 | 	mov	arg01, local01
037e0     F8 54 B1 FD | 	call	#__system___string_cmp
037e4     00 FA 0D F2 | 	cmp	result1, #0 wz
037e8     6C 06 90 AD |  if_e	jmp	#LR__0213
037ec     41 01 00 FF 
037f0     DF 15 06 F6 | 	mov	arg02, ##@LR__4419
037f4     0F 13 02 F6 | 	mov	arg01, local01
037f8     E0 54 B1 FD | 	call	#__system___string_cmp
037fc     00 FA 0D F2 | 	cmp	result1, #0 wz
03800     5C 06 90 AD |  if_e	jmp	#LR__0214
03804     41 01 00 FF 
03808     E6 15 06 F6 | 	mov	arg02, ##@LR__4420
0380c     0F 13 02 F6 | 	mov	arg01, local01
03810     C8 54 B1 FD | 	call	#__system___string_cmp
03814     00 FA 0D F2 | 	cmp	result1, #0 wz
03818     4C 06 90 AD |  if_e	jmp	#LR__0215
0381c     41 01 00 FF 
03820     ED 15 06 F6 | 	mov	arg02, ##@LR__4421
03824     0F 13 02 F6 | 	mov	arg01, local01
03828     B0 54 B1 FD | 	call	#__system___string_cmp
0382c     00 FA 0D F2 | 	cmp	result1, #0 wz
03830     3C 06 90 AD |  if_e	jmp	#LR__0216
03834     41 01 00 FF 
03838     F7 15 06 F6 | 	mov	arg02, ##@LR__4422
0383c     0F 13 02 F6 | 	mov	arg01, local01
03840     98 54 B1 FD | 	call	#__system___string_cmp
03844     00 FA 0D F2 | 	cmp	result1, #0 wz
03848     2C 06 90 AD |  if_e	jmp	#LR__0217
0384c     41 01 00 FF 
03850     FB 15 06 F6 | 	mov	arg02, ##@LR__4423
03854     0F 13 02 F6 | 	mov	arg01, local01
03858     80 54 B1 FD | 	call	#__system___string_cmp
0385c     00 FA 0D F2 | 	cmp	result1, #0 wz
03860     1C 06 90 AD |  if_e	jmp	#LR__0218
03864     41 01 00 FF 
03868     FF 15 06 F6 | 	mov	arg02, ##@LR__4424
0386c     0F 13 02 F6 | 	mov	arg01, local01
03870     68 54 B1 FD | 	call	#__system___string_cmp
03874     00 FA 0D F2 | 	cmp	result1, #0 wz
03878     0C 06 90 AD |  if_e	jmp	#LR__0219
0387c     42 01 00 FF 
03880     03 14 06 F6 | 	mov	arg02, ##@LR__4425
03884     0F 13 02 F6 | 	mov	arg01, local01
03888     50 54 B1 FD | 	call	#__system___string_cmp
0388c     00 FA 0D F2 | 	cmp	result1, #0 wz
03890     FC 05 90 AD |  if_e	jmp	#LR__0220
03894     42 01 00 FF 
03898     07 14 06 F6 | 	mov	arg02, ##@LR__4426
0389c     0F 13 02 F6 | 	mov	arg01, local01
038a0     38 54 B1 FD | 	call	#__system___string_cmp
038a4     00 FA 0D F2 | 	cmp	result1, #0 wz
038a8     EC 05 90 AD |  if_e	jmp	#LR__0221
038ac     42 01 00 FF 
038b0     0C 14 06 F6 | 	mov	arg02, ##@LR__4427
038b4     0F 13 02 F6 | 	mov	arg01, local01
038b8     20 54 B1 FD | 	call	#__system___string_cmp
038bc     00 FA 0D F2 | 	cmp	result1, #0 wz
038c0     DC 05 90 AD |  if_e	jmp	#LR__0222
038c4     42 01 00 FF 
038c8     10 14 06 F6 | 	mov	arg02, ##@LR__4428
038cc     0F 13 02 F6 | 	mov	arg01, local01
038d0     08 54 B1 FD | 	call	#__system___string_cmp
038d4     00 FA 0D F2 | 	cmp	result1, #0 wz
038d8     CC 05 90 AD |  if_e	jmp	#LR__0223
038dc     42 01 00 FF 
038e0     15 14 06 F6 | 	mov	arg02, ##@LR__4429
038e4     0F 13 02 F6 | 	mov	arg01, local01
038e8     F0 53 B1 FD | 	call	#__system___string_cmp
038ec     00 FA 0D F2 | 	cmp	result1, #0 wz
038f0     BC 05 90 AD |  if_e	jmp	#LR__0224
038f4     42 01 00 FF 
038f8     1D 14 06 F6 | 	mov	arg02, ##@LR__4430
038fc     0F 13 02 F6 | 	mov	arg01, local01
03900     D8 53 B1 FD | 	call	#__system___string_cmp
03904     00 FA 0D F2 | 	cmp	result1, #0 wz
03908     AC 05 90 AD |  if_e	jmp	#LR__0225
0390c     42 01 00 FF 
03910     21 14 06 F6 | 	mov	arg02, ##@LR__4431
03914     0F 13 02 F6 | 	mov	arg01, local01
03918     C0 53 B1 FD | 	call	#__system___string_cmp
0391c     00 FA 0D F2 | 	cmp	result1, #0 wz
03920     9C 05 90 AD |  if_e	jmp	#LR__0226
03924     42 01 00 FF 
03928     26 14 06 F6 | 	mov	arg02, ##@LR__4432
0392c     0F 13 02 F6 | 	mov	arg01, local01
03930     A8 53 B1 FD | 	call	#__system___string_cmp
03934     00 FA 0D F2 | 	cmp	result1, #0 wz
03938     8C 05 90 AD |  if_e	jmp	#LR__0227
0393c     42 01 00 FF 
03940     2A 14 06 F6 | 	mov	arg02, ##@LR__4433
03944     0F 13 02 F6 | 	mov	arg01, local01
03948     90 53 B1 FD | 	call	#__system___string_cmp
0394c     00 FA 0D F2 | 	cmp	result1, #0 wz
03950     7C 05 90 AD |  if_e	jmp	#LR__0228
03954     42 01 00 FF 
03958     2F 14 06 F6 | 	mov	arg02, ##@LR__4434
0395c     0F 13 02 F6 | 	mov	arg01, local01
03960     78 53 B1 FD | 	call	#__system___string_cmp
03964     00 FA 0D F2 | 	cmp	result1, #0 wz
03968     6C 05 90 AD |  if_e	jmp	#LR__0229
0396c     42 01 00 FF 
03970     33 14 06 F6 | 	mov	arg02, ##@LR__4435
03974     0F 13 02 F6 | 	mov	arg01, local01
03978     60 53 B1 FD | 	call	#__system___string_cmp
0397c     00 FA 0D F2 | 	cmp	result1, #0 wz
03980     5C 05 90 AD |  if_e	jmp	#LR__0230
03984     42 01 00 FF 
03988     36 14 06 F6 | 	mov	arg02, ##@LR__4436
0398c     0F 13 02 F6 | 	mov	arg01, local01
03990     48 53 B1 FD | 	call	#__system___string_cmp
03994     00 FA 0D F2 | 	cmp	result1, #0 wz
03998     4C 05 90 AD |  if_e	jmp	#LR__0231
0399c     42 01 00 FF 
039a0     3C 14 06 F6 | 	mov	arg02, ##@LR__4437
039a4     0F 13 02 F6 | 	mov	arg01, local01
039a8     30 53 B1 FD | 	call	#__system___string_cmp
039ac     00 FA 0D F2 | 	cmp	result1, #0 wz
039b0     3C 05 90 AD |  if_e	jmp	#LR__0232
039b4     42 01 00 FF 
039b8     40 14 06 F6 | 	mov	arg02, ##@LR__4438
039bc     0F 13 02 F6 | 	mov	arg01, local01
039c0     18 53 B1 FD | 	call	#__system___string_cmp
039c4     00 FA 0D F2 | 	cmp	result1, #0 wz
039c8     2C 05 90 AD |  if_e	jmp	#LR__0233
039cc     42 01 00 FF 
039d0     45 14 06 F6 | 	mov	arg02, ##@LR__4439
039d4     0F 13 02 F6 | 	mov	arg01, local01
039d8     00 53 B1 FD | 	call	#__system___string_cmp
039dc     00 FA 0D F2 | 	cmp	result1, #0 wz
039e0     1C 05 90 AD |  if_e	jmp	#LR__0234
039e4     42 01 00 FF 
039e8     48 14 06 F6 | 	mov	arg02, ##@LR__4440
039ec     0F 13 02 F6 | 	mov	arg01, local01
039f0     E8 52 B1 FD | 	call	#__system___string_cmp
039f4     00 FA 0D F2 | 	cmp	result1, #0 wz
039f8     0C 05 90 AD |  if_e	jmp	#LR__0235
039fc     42 01 00 FF 
03a00     4B 14 06 F6 | 	mov	arg02, ##@LR__4441
03a04     0F 13 02 F6 | 	mov	arg01, local01
03a08     D0 52 B1 FD | 	call	#__system___string_cmp
03a0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a10     FC 04 90 AD |  if_e	jmp	#LR__0236
03a14     42 01 00 FF 
03a18     4F 14 06 F6 | 	mov	arg02, ##@LR__4442
03a1c     0F 13 02 F6 | 	mov	arg01, local01
03a20     B8 52 B1 FD | 	call	#__system___string_cmp
03a24     00 FA 0D F2 | 	cmp	result1, #0 wz
03a28     EC 04 90 AD |  if_e	jmp	#LR__0237
03a2c     42 01 00 FF 
03a30     52 14 06 F6 | 	mov	arg02, ##@LR__4443
03a34     0F 13 02 F6 | 	mov	arg01, local01
03a38     A0 52 B1 FD | 	call	#__system___string_cmp
03a3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a40     DC 04 90 AD |  if_e	jmp	#LR__0238
03a44     42 01 00 FF 
03a48     56 14 06 F6 | 	mov	arg02, ##@LR__4444
03a4c     0F 13 02 F6 | 	mov	arg01, local01
03a50     88 52 B1 FD | 	call	#__system___string_cmp
03a54     00 FA 0D F2 | 	cmp	result1, #0 wz
03a58     CC 04 90 AD |  if_e	jmp	#LR__0239
03a5c     42 01 00 FF 
03a60     5B 14 06 F6 | 	mov	arg02, ##@LR__4445
03a64     0F 13 02 F6 | 	mov	arg01, local01
03a68     70 52 B1 FD | 	call	#__system___string_cmp
03a6c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a70     BC 04 90 AD |  if_e	jmp	#LR__0240
03a74     42 01 00 FF 
03a78     5E 14 06 F6 | 	mov	arg02, ##@LR__4446
03a7c     0F 13 02 F6 | 	mov	arg01, local01
03a80     58 52 B1 FD | 	call	#__system___string_cmp
03a84     00 FA 0D F2 | 	cmp	result1, #0 wz
03a88     AC 04 90 AD |  if_e	jmp	#LR__0241
03a8c     42 01 00 FF 
03a90     63 14 06 F6 | 	mov	arg02, ##@LR__4447
03a94     0F 13 02 F6 | 	mov	arg01, local01
03a98     40 52 B1 FD | 	call	#__system___string_cmp
03a9c     00 FA 0D F2 | 	cmp	result1, #0 wz
03aa0     9C 04 90 AD |  if_e	jmp	#LR__0242
03aa4     42 01 00 FF 
03aa8     67 14 06 F6 | 	mov	arg02, ##@LR__4448
03aac     0F 13 02 F6 | 	mov	arg01, local01
03ab0     28 52 B1 FD | 	call	#__system___string_cmp
03ab4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ab8     8C 04 90 AD |  if_e	jmp	#LR__0243
03abc     42 01 00 FF 
03ac0     6C 14 06 F6 | 	mov	arg02, ##@LR__4449
03ac4     0F 13 02 F6 | 	mov	arg01, local01
03ac8     10 52 B1 FD | 	call	#__system___string_cmp
03acc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ad0     7C 04 90 AD |  if_e	jmp	#LR__0244
03ad4     42 01 00 FF 
03ad8     6F 14 06 F6 | 	mov	arg02, ##@LR__4450
03adc     0F 13 02 F6 | 	mov	arg01, local01
03ae0     F8 51 B1 FD | 	call	#__system___string_cmp
03ae4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ae8     6C 04 90 AD |  if_e	jmp	#LR__0245
03aec     42 01 00 FF 
03af0     75 14 06 F6 | 	mov	arg02, ##@LR__4451
03af4     0F 13 02 F6 | 	mov	arg01, local01
03af8     E0 51 B1 FD | 	call	#__system___string_cmp
03afc     00 FA 0D F2 | 	cmp	result1, #0 wz
03b00     5C 04 90 AD |  if_e	jmp	#LR__0246
03b04     42 01 00 FF 
03b08     79 14 06 F6 | 	mov	arg02, ##@LR__4452
03b0c     0F 13 02 F6 | 	mov	arg01, local01
03b10     C8 51 B1 FD | 	call	#__system___string_cmp
03b14     00 FA 0D F2 | 	cmp	result1, #0 wz
03b18     4C 04 90 AD |  if_e	jmp	#LR__0247
03b1c     42 01 00 FF 
03b20     7E 14 06 F6 | 	mov	arg02, ##@LR__4453
03b24     0F 13 02 F6 | 	mov	arg01, local01
03b28     B0 51 B1 FD | 	call	#__system___string_cmp
03b2c     00 FA 0D F2 | 	cmp	result1, #0 wz
03b30     3C 04 90 AD |  if_e	jmp	#LR__0248
03b34     42 01 00 FF 
03b38     81 14 06 F6 | 	mov	arg02, ##@LR__4454
03b3c     0F 13 02 F6 | 	mov	arg01, local01
03b40     98 51 B1 FD | 	call	#__system___string_cmp
03b44     00 FA 0D F2 | 	cmp	result1, #0 wz
03b48     2C 04 90 AD |  if_e	jmp	#LR__0249
03b4c     42 01 00 FF 
03b50     87 14 06 F6 | 	mov	arg02, ##@LR__4455
03b54     0F 13 02 F6 | 	mov	arg01, local01
03b58     80 51 B1 FD | 	call	#__system___string_cmp
03b5c     00 FA 0D F2 | 	cmp	result1, #0 wz
03b60     1C 04 90 AD |  if_e	jmp	#LR__0250
03b64     42 01 00 FF 
03b68     8A 14 06 F6 | 	mov	arg02, ##@LR__4456
03b6c     0F 13 02 F6 | 	mov	arg01, local01
03b70     68 51 B1 FD | 	call	#__system___string_cmp
03b74     00 FA 0D F2 | 	cmp	result1, #0 wz
03b78     0C 04 90 AD |  if_e	jmp	#LR__0251
03b7c     42 01 00 FF 
03b80     93 14 06 F6 | 	mov	arg02, ##@LR__4457
03b84     0F 13 02 F6 | 	mov	arg01, local01
03b88     50 51 B1 FD | 	call	#__system___string_cmp
03b8c     00 FA 0D F2 | 	cmp	result1, #0 wz
03b90     FC 03 90 AD |  if_e	jmp	#LR__0252
03b94     42 01 00 FF 
03b98     99 14 06 F6 | 	mov	arg02, ##@LR__4458
03b9c     0F 13 02 F6 | 	mov	arg01, local01
03ba0     38 51 B1 FD | 	call	#__system___string_cmp
03ba4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ba8     EC 03 90 AD |  if_e	jmp	#LR__0253
03bac     42 01 00 FF 
03bb0     9F 14 06 F6 | 	mov	arg02, ##@LR__4459
03bb4     0F 13 02 F6 | 	mov	arg01, local01
03bb8     20 51 B1 FD | 	call	#__system___string_cmp
03bbc     00 FA 0D F2 | 	cmp	result1, #0 wz
03bc0     DC 03 90 AD |  if_e	jmp	#LR__0254
03bc4     42 01 00 FF 
03bc8     A8 14 06 F6 | 	mov	arg02, ##@LR__4460
03bcc     0F 13 02 F6 | 	mov	arg01, local01
03bd0     08 51 B1 FD | 	call	#__system___string_cmp
03bd4     00 FA 0D F2 | 	cmp	result1, #0 wz
03bd8     CC 03 90 AD |  if_e	jmp	#LR__0255
03bdc     42 01 00 FF 
03be0     B2 14 06 F6 | 	mov	arg02, ##@LR__4461
03be4     0F 13 02 F6 | 	mov	arg01, local01
03be8     F0 50 B1 FD | 	call	#__system___string_cmp
03bec     00 FA 0D F2 | 	cmp	result1, #0 wz
03bf0     BC 03 90 AD |  if_e	jmp	#LR__0256
03bf4     42 01 00 FF 
03bf8     BB 14 06 F6 | 	mov	arg02, ##@LR__4462
03bfc     0F 13 02 F6 | 	mov	arg01, local01
03c00     D8 50 B1 FD | 	call	#__system___string_cmp
03c04     00 FA 0D F2 | 	cmp	result1, #0 wz
03c08     AC 03 90 AD |  if_e	jmp	#LR__0257
03c0c     42 01 00 FF 
03c10     C0 14 06 F6 | 	mov	arg02, ##@LR__4463
03c14     0F 13 02 F6 | 	mov	arg01, local01
03c18     C0 50 B1 FD | 	call	#__system___string_cmp
03c1c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c20     9C 03 90 AD |  if_e	jmp	#LR__0258
03c24     42 01 00 FF 
03c28     C5 14 06 F6 | 	mov	arg02, ##@LR__4464
03c2c     0F 13 02 F6 | 	mov	arg01, local01
03c30     A8 50 B1 FD | 	call	#__system___string_cmp
03c34     00 FA 0D F2 | 	cmp	result1, #0 wz
03c38     8C 03 90 AD |  if_e	jmp	#LR__0259
03c3c     42 01 00 FF 
03c40     C9 14 06 F6 | 	mov	arg02, ##@LR__4465
03c44     0F 13 02 F6 | 	mov	arg01, local01
03c48     90 50 B1 FD | 	call	#__system___string_cmp
03c4c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c50     7C 03 90 AD |  if_e	jmp	#LR__0260
03c54     42 01 00 FF 
03c58     D2 14 06 F6 | 	mov	arg02, ##@LR__4466
03c5c     0F 13 02 F6 | 	mov	arg01, local01
03c60     78 50 B1 FD | 	call	#__system___string_cmp
03c64     00 FA 0D F2 | 	cmp	result1, #0 wz
03c68     6C 03 90 AD |  if_e	jmp	#LR__0261
03c6c     42 01 00 FF 
03c70     D7 14 06 F6 | 	mov	arg02, ##@LR__4467
03c74     0F 13 02 F6 | 	mov	arg01, local01
03c78     60 50 B1 FD | 	call	#__system___string_cmp
03c7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c80     5C 03 90 AD |  if_e	jmp	#LR__0262
03c84     42 01 00 FF 
03c88     DD 14 06 F6 | 	mov	arg02, ##@LR__4468
03c8c     0F 13 02 F6 | 	mov	arg01, local01
03c90     48 50 B1 FD | 	call	#__system___string_cmp
03c94     00 FA 0D F2 | 	cmp	result1, #0 wz
03c98     4C 03 90 AD |  if_e	jmp	#LR__0263
03c9c     42 01 00 FF 
03ca0     DF 14 06 F6 | 	mov	arg02, ##@LR__4469
03ca4     0F 13 02 F6 | 	mov	arg01, local01
03ca8     30 50 B1 FD | 	call	#__system___string_cmp
03cac     00 FA 0D F2 | 	cmp	result1, #0 wz
03cb0     3C 03 90 AD |  if_e	jmp	#LR__0264
03cb4     42 01 00 FF 
03cb8     E3 14 06 F6 | 	mov	arg02, ##@LR__4470
03cbc     0F 13 02 F6 | 	mov	arg01, local01
03cc0     18 50 B1 FD | 	call	#__system___string_cmp
03cc4     00 FA 0D F2 | 	cmp	result1, #0 wz
03cc8     2C 03 90 AD |  if_e	jmp	#LR__0265
03ccc     42 01 00 FF 
03cd0     E7 14 06 F6 | 	mov	arg02, ##@LR__4471
03cd4     0F 13 02 F6 | 	mov	arg01, local01
03cd8     00 50 B1 FD | 	call	#__system___string_cmp
03cdc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ce0     1C 03 90 AD |  if_e	jmp	#LR__0266
03ce4     42 01 00 FF 
03ce8     EC 14 06 F6 | 	mov	arg02, ##@LR__4472
03cec     0F 13 02 F6 | 	mov	arg01, local01
03cf0     E8 4F B1 FD | 	call	#__system___string_cmp
03cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
03cf8     0C 03 90 AD |  if_e	jmp	#LR__0267
03cfc     42 01 00 FF 
03d00     EF 14 06 F6 | 	mov	arg02, ##@LR__4473
03d04     0F 13 02 F6 | 	mov	arg01, local01
03d08     D0 4F B1 FD | 	call	#__system___string_cmp
03d0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d10     FC 02 90 AD |  if_e	jmp	#LR__0268
03d14     42 01 00 FF 
03d18     F6 14 06 F6 | 	mov	arg02, ##@LR__4474
03d1c     0F 13 02 F6 | 	mov	arg01, local01
03d20     B8 4F B1 FD | 	call	#__system___string_cmp
03d24     00 FA 0D F2 | 	cmp	result1, #0 wz
03d28     EC 02 90 AD |  if_e	jmp	#LR__0269
03d2c     42 01 00 FF 
03d30     FA 14 06 F6 | 	mov	arg02, ##@LR__4475
03d34     0F 13 02 F6 | 	mov	arg01, local01
03d38     A0 4F B1 FD | 	call	#__system___string_cmp
03d3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d40     DC 02 90 AD |  if_e	jmp	#LR__0270
03d44     42 01 00 FF 
03d48     FF 14 06 F6 | 	mov	arg02, ##@LR__4476
03d4c     0F 13 02 F6 | 	mov	arg01, local01
03d50     88 4F B1 FD | 	call	#__system___string_cmp
03d54     00 FA 0D F2 | 	cmp	result1, #0 wz
03d58     CC 02 90 AD |  if_e	jmp	#LR__0271
03d5c     42 01 00 FF 
03d60     06 15 06 F6 | 	mov	arg02, ##@LR__4477
03d64     0F 13 02 F6 | 	mov	arg01, local01
03d68     70 4F B1 FD | 	call	#__system___string_cmp
03d6c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d70     BC 02 90 AD |  if_e	jmp	#LR__0272
03d74     42 01 00 FF 
03d78     10 15 06 F6 | 	mov	arg02, ##@LR__4478
03d7c     0F 13 02 F6 | 	mov	arg01, local01
03d80     58 4F B1 FD | 	call	#__system___string_cmp
03d84     00 FA 0D F2 | 	cmp	result1, #0 wz
03d88     AC 02 90 AD |  if_e	jmp	#LR__0273
03d8c     42 01 00 FF 
03d90     14 15 06 F6 | 	mov	arg02, ##@LR__4479
03d94     0F 13 02 F6 | 	mov	arg01, local01
03d98     40 4F B1 FD | 	call	#__system___string_cmp
03d9c     00 FA 0D F2 | 	cmp	result1, #0 wz
03da0     9C 02 90 AD |  if_e	jmp	#LR__0274
03da4     42 01 00 FF 
03da8     1C 15 06 F6 | 	mov	arg02, ##@LR__4480
03dac     0F 13 02 F6 | 	mov	arg01, local01
03db0     28 4F B1 FD | 	call	#__system___string_cmp
03db4     00 FA 0D F2 | 	cmp	result1, #0 wz
03db8     8C 02 90 AD |  if_e	jmp	#LR__0275
03dbc     42 01 00 FF 
03dc0     20 15 06 F6 | 	mov	arg02, ##@LR__4481
03dc4     0F 13 02 F6 | 	mov	arg01, local01
03dc8     10 4F B1 FD | 	call	#__system___string_cmp
03dcc     00 FA 0D F2 | 	cmp	result1, #0 wz
03dd0     7C 02 90 AD |  if_e	jmp	#LR__0276
03dd4     42 01 00 FF 
03dd8     26 15 06 F6 | 	mov	arg02, ##@LR__4482
03ddc     0F 13 02 F6 | 	mov	arg01, local01
03de0     F8 4E B1 FD | 	call	#__system___string_cmp
03de4     00 FA 0D F2 | 	cmp	result1, #0 wz
03de8     6C 02 90 AD |  if_e	jmp	#LR__0277
03dec     70 02 90 FD | 	jmp	#LR__0278
03df0                 | LR__0200
03df0     5C FA 05 F6 | 	mov	result1, #92
03df4     6C 02 90 FD | 	jmp	#LR__0279
03df8                 | LR__0201
03df8     5C FA 05 F6 | 	mov	result1, #92
03dfc     64 02 90 FD | 	jmp	#LR__0279
03e00                 | LR__0202
03e00     47 FA 05 F6 | 	mov	result1, #71
03e04     5C 02 90 FD | 	jmp	#LR__0279
03e08                 | LR__0203
03e08     59 FA 05 F6 | 	mov	result1, #89
03e0c     54 02 90 FD | 	jmp	#LR__0279
03e10                 | LR__0204
03e10     59 FA 05 F6 | 	mov	result1, #89
03e14     4C 02 90 FD | 	jmp	#LR__0279
03e18                 | LR__0205
03e18     45 FA 05 F6 | 	mov	result1, #69
03e1c     44 02 90 FD | 	jmp	#LR__0279
03e20                 | LR__0206
03e20     45 FA 05 F6 | 	mov	result1, #69
03e24     3C 02 90 FD | 	jmp	#LR__0279
03e28                 | LR__0207
03e28     69 FA 05 F6 | 	mov	result1, #105
03e2c     34 02 90 FD | 	jmp	#LR__0279
03e30                 | LR__0208
03e30     40 FA 05 F6 | 	mov	result1, #64
03e34     2C 02 90 FD | 	jmp	#LR__0279
03e38                 | LR__0209
03e38     49 FA 05 F6 | 	mov	result1, #73
03e3c     24 02 90 FD | 	jmp	#LR__0279
03e40                 | LR__0210
03e40     49 FA 05 F6 | 	mov	result1, #73
03e44     1C 02 90 FD | 	jmp	#LR__0279
03e48                 | LR__0211
03e48     50 FA 05 F6 | 	mov	result1, #80
03e4c     14 02 90 FD | 	jmp	#LR__0279
03e50                 | LR__0212
03e50     50 FA 05 F6 | 	mov	result1, #80
03e54     0C 02 90 FD | 	jmp	#LR__0279
03e58                 | LR__0213
03e58     68 FA 05 F6 | 	mov	result1, #104
03e5c     04 02 90 FD | 	jmp	#LR__0279
03e60                 | LR__0214
03e60     73 FA 05 F6 | 	mov	result1, #115
03e64     FC 01 90 FD | 	jmp	#LR__0279
03e68                 | LR__0215
03e68     74 FA 05 F6 | 	mov	result1, #116
03e6c     F4 01 90 FD | 	jmp	#LR__0279
03e70                 | LR__0216
03e70     6C FA 05 F6 | 	mov	result1, #108
03e74     EC 01 90 FD | 	jmp	#LR__0279
03e78                 | LR__0217
03e78     6C FA 05 F6 | 	mov	result1, #108
03e7c     E4 01 90 FD | 	jmp	#LR__0279
03e80                 | LR__0218
03e80     89 FA 05 F6 | 	mov	result1, #137
03e84     DC 01 90 FD | 	jmp	#LR__0279
03e88                 | LR__0219
03e88     72 FA 05 F6 | 	mov	result1, #114
03e8c     D4 01 90 FD | 	jmp	#LR__0279
03e90                 | LR__0220
03e90     5D FA 05 F6 | 	mov	result1, #93
03e94     CC 01 90 FD | 	jmp	#LR__0279
03e98                 | LR__0221
03e98     43 FA 05 F6 | 	mov	result1, #67
03e9c     C4 01 90 FD | 	jmp	#LR__0279
03ea0                 | LR__0222
03ea0     43 FA 05 F6 | 	mov	result1, #67
03ea4     BC 01 90 FD | 	jmp	#LR__0279
03ea8                 | LR__0223
03ea8     5A FA 05 F6 | 	mov	result1, #90
03eac     B4 01 90 FD | 	jmp	#LR__0279
03eb0                 | LR__0224
03eb0     46 FA 05 F6 | 	mov	result1, #70
03eb4     AC 01 90 FD | 	jmp	#LR__0279
03eb8                 | LR__0225
03eb8     46 FA 05 F6 | 	mov	result1, #70
03ebc     A4 01 90 FD | 	jmp	#LR__0279
03ec0                 | LR__0226
03ec0     71 FA 05 F6 | 	mov	result1, #113
03ec4     9C 01 90 FD | 	jmp	#LR__0279
03ec8                 | LR__0227
03ec8     71 FA 05 F6 | 	mov	result1, #113
03ecc     94 01 90 FD | 	jmp	#LR__0279
03ed0                 | LR__0228
03ed0     60 FA 05 F6 | 	mov	result1, #96
03ed4     8C 01 90 FD | 	jmp	#LR__0279
03ed8                 | LR__0229
03ed8     4A FA 05 F6 | 	mov	result1, #74
03edc     84 01 90 FD | 	jmp	#LR__0279
03ee0                 | LR__0230
03ee0     4A FA 05 F6 | 	mov	result1, #74
03ee4     7C 01 90 FD | 	jmp	#LR__0279
03ee8                 | LR__0231
03ee8     48 FA 05 F6 | 	mov	result1, #72
03eec     74 01 90 FD | 	jmp	#LR__0279
03ef0                 | LR__0232
03ef0     48 FA 05 F6 | 	mov	result1, #72
03ef4     6C 01 90 FD | 	jmp	#LR__0279
03ef8                 | LR__0233
03ef8     4E FA 05 F6 | 	mov	result1, #78
03efc     64 01 90 FD | 	jmp	#LR__0279
03f00                 | LR__0234
03f00     4E FA 05 F6 | 	mov	result1, #78
03f04     5C 01 90 FD | 	jmp	#LR__0279
03f08                 | LR__0235
03f08     58 FA 05 F6 | 	mov	result1, #88
03f0c     54 01 90 FD | 	jmp	#LR__0279
03f10                 | LR__0236
03f10     5F FA 05 F6 | 	mov	result1, #95
03f14     4C 01 90 FD | 	jmp	#LR__0279
03f18                 | LR__0237
03f18     5F FA 05 F6 | 	mov	result1, #95
03f1c     44 01 90 FD | 	jmp	#LR__0279
03f20                 | LR__0238
03f20     8A FA 05 F6 | 	mov	result1, #138
03f24     3C 01 90 FD | 	jmp	#LR__0279
03f28                 | LR__0239
03f28     4C FA 05 F6 | 	mov	result1, #76
03f2c     34 01 90 FD | 	jmp	#LR__0279
03f30                 | LR__0240
03f30     4C FA 05 F6 | 	mov	result1, #76
03f34     2C 01 90 FD | 	jmp	#LR__0279
03f38                 | LR__0241
03f38     52 FA 05 F6 | 	mov	result1, #82
03f3c     24 01 90 FD | 	jmp	#LR__0279
03f40                 | LR__0242
03f40     52 FA 05 F6 | 	mov	result1, #82
03f44     1C 01 90 FD | 	jmp	#LR__0279
03f48                 | LR__0243
03f48     61 FA 05 F6 | 	mov	result1, #97
03f4c     14 01 90 FD | 	jmp	#LR__0279
03f50                 | LR__0244
03f50     61 FA 05 F6 | 	mov	result1, #97
03f54     0C 01 90 FD | 	jmp	#LR__0279
03f58                 | LR__0245
03f58     63 FA 05 F6 | 	mov	result1, #99
03f5c     04 01 90 FD | 	jmp	#LR__0279
03f60                 | LR__0246
03f60     41 FA 05 F6 | 	mov	result1, #65
03f64     FC 00 90 FD | 	jmp	#LR__0279
03f68                 | LR__0247
03f68     4B FA 05 F6 | 	mov	result1, #75
03f6c     F4 00 90 FD | 	jmp	#LR__0279
03f70                 | LR__0248
03f70     4B FA 05 F6 | 	mov	result1, #75
03f74     EC 00 90 FD | 	jmp	#LR__0279
03f78                 | LR__0249
03f78     5E FA 05 F6 | 	mov	result1, #94
03f7c     E4 00 90 FD | 	jmp	#LR__0279
03f80                 | LR__0250
03f80     5E FA 05 F6 | 	mov	result1, #94
03f84     DC 00 90 FD | 	jmp	#LR__0279
03f88                 | LR__0251
03f88     7C FA 05 F6 | 	mov	result1, #124
03f8c     D4 00 90 FD | 	jmp	#LR__0279
03f90                 | LR__0252
03f90     7E FA 05 F6 | 	mov	result1, #126
03f94     CC 00 90 FD | 	jmp	#LR__0279
03f98                 | LR__0253
03f98     7D FA 05 F6 | 	mov	result1, #125
03f9c     C4 00 90 FD | 	jmp	#LR__0279
03fa0                 | LR__0254
03fa0     7F FA 05 F6 | 	mov	result1, #127
03fa4     BC 00 90 FD | 	jmp	#LR__0279
03fa8                 | LR__0255
03fa8     80 FA 05 F6 | 	mov	result1, #128
03fac     B4 00 90 FD | 	jmp	#LR__0279
03fb0                 | LR__0256
03fb0     55 FA 05 F6 | 	mov	result1, #85
03fb4     AC 00 90 FD | 	jmp	#LR__0279
03fb8                 | LR__0257
03fb8     75 FA 05 F6 | 	mov	result1, #117
03fbc     A4 00 90 FD | 	jmp	#LR__0279
03fc0                 | LR__0258
03fc0     42 FA 05 F6 | 	mov	result1, #66
03fc4     9C 00 90 FD | 	jmp	#LR__0279
03fc8                 | LR__0259
03fc8     42 FA 05 F6 | 	mov	result1, #66
03fcc     94 00 90 FD | 	jmp	#LR__0279
03fd0                 | LR__0260
03fd0     81 FA 05 F6 | 	mov	result1, #129
03fd4     8C 00 90 FD | 	jmp	#LR__0279
03fd8                 | LR__0261
03fd8     81 FA 05 F6 | 	mov	result1, #129
03fdc     84 00 90 FD | 	jmp	#LR__0279
03fe0                 | LR__0262
03fe0     44 FA 05 F6 | 	mov	result1, #68
03fe4     7C 00 90 FD | 	jmp	#LR__0279
03fe8                 | LR__0263
03fe8     44 FA 05 F6 | 	mov	result1, #68
03fec     74 00 90 FD | 	jmp	#LR__0279
03ff0                 | LR__0264
03ff0     88 FA 05 F6 | 	mov	result1, #136
03ff4     6C 00 90 FD | 	jmp	#LR__0279
03ff8                 | LR__0265
03ff8     4D FA 05 F6 | 	mov	result1, #77
03ffc     64 00 90 FD | 	jmp	#LR__0279
04000                 | LR__0266
04000     51 FA 05 F6 | 	mov	result1, #81
04004     5C 00 90 FD | 	jmp	#LR__0279
04008                 | LR__0267
04008     51 FA 05 F6 | 	mov	result1, #81
0400c     54 00 90 FD | 	jmp	#LR__0279
04010                 | LR__0268
04010     6D FA 05 F6 | 	mov	result1, #109
04014     4C 00 90 FD | 	jmp	#LR__0279
04018                 | LR__0269
04018     6D FA 05 F6 | 	mov	result1, #109
0401c     44 00 90 FD | 	jmp	#LR__0279
04020                 | LR__0270
04020     5B FA 05 F6 | 	mov	result1, #91
04024     3C 00 90 FD | 	jmp	#LR__0279
04028                 | LR__0271
04028     56 FA 05 F6 | 	mov	result1, #86
0402c     34 00 90 FD | 	jmp	#LR__0279
04030                 | LR__0272
04030     70 FA 05 F6 | 	mov	result1, #112
04034     2C 00 90 FD | 	jmp	#LR__0279
04038                 | LR__0273
04038     70 FA 05 F6 | 	mov	result1, #112
0403c     24 00 90 FD | 	jmp	#LR__0279
04040                 | LR__0274
04040     57 FA 05 F6 | 	mov	result1, #87
04044     1C 00 90 FD | 	jmp	#LR__0279
04048                 | LR__0275
04048     57 FA 05 F6 | 	mov	result1, #87
0404c     14 00 90 FD | 	jmp	#LR__0279
04050                 | LR__0276
04050     77 FA 05 F6 | 	mov	result1, #119
04054     0C 00 90 FD | 	jmp	#LR__0279
04058                 | LR__0277
04058     78 FA 05 F6 | 	mov	result1, #120
0405c     04 00 90 FD | 	jmp	#LR__0279
04060                 | LR__0278
04060     00 FA 05 F6 | 	mov	result1, #0
04064                 | LR__0279
04064     A7 F0 03 F6 | 	mov	ptra, fp
04068     B2 00 A0 FD | 	call	#popregs_
0406c                 | _iscommand_ret
0406c     2D 00 64 FD | 	ret
04070                 | 
04070                 | ' 
04070                 | ' function isfunction(s as string) as ubyte
04070                 | _isfunction
04070     01 4A 05 F6 | 	mov	COUNT_, #1
04074     A8 00 A0 FD | 	call	#pushregs_
04078                 | ' 
04078                 | ' select case s
04078     09 1F 02 F6 | 	mov	local01, arg01
0407c     42 01 00 FF 
04080     2C 15 06 F6 | 	mov	arg02, ##@LR__4483
04084     0F 13 02 F6 | 	mov	arg01, local01
04088     50 4C B1 FD | 	call	#__system___string_cmp
0408c     00 FA 0D F2 | 	cmp	result1, #0 wz
04090     CC 01 90 AD |  if_e	jmp	#LR__0280
04094     42 01 00 FF 
04098     31 15 06 F6 | 	mov	arg02, ##@LR__4484
0409c     0F 13 02 F6 | 	mov	arg01, local01
040a0     38 4C B1 FD | 	call	#__system___string_cmp
040a4     00 FA 0D F2 | 	cmp	result1, #0 wz
040a8     BC 01 90 AD |  if_e	jmp	#LR__0281
040ac     42 01 00 FF 
040b0     36 15 06 F6 | 	mov	arg02, ##@LR__4485
040b4     0F 13 02 F6 | 	mov	arg01, local01
040b8     20 4C B1 FD | 	call	#__system___string_cmp
040bc     00 FA 0D F2 | 	cmp	result1, #0 wz
040c0     AC 01 90 AD |  if_e	jmp	#LR__0282
040c4     42 01 00 FF 
040c8     3A 15 06 F6 | 	mov	arg02, ##@LR__4486
040cc     0F 13 02 F6 | 	mov	arg01, local01
040d0     08 4C B1 FD | 	call	#__system___string_cmp
040d4     00 FA 0D F2 | 	cmp	result1, #0 wz
040d8     9C 01 90 AD |  if_e	jmp	#LR__0283
040dc     42 01 00 FF 
040e0     3E 15 06 F6 | 	mov	arg02, ##@LR__4487
040e4     0F 13 02 F6 | 	mov	arg01, local01
040e8     F0 4B B1 FD | 	call	#__system___string_cmp
040ec     00 FA 0D F2 | 	cmp	result1, #0 wz
040f0     8C 01 90 AD |  if_e	jmp	#LR__0284
040f4     42 01 00 FF 
040f8     47 15 06 F6 | 	mov	arg02, ##@LR__4488
040fc     0F 13 02 F6 | 	mov	arg01, local01
04100     D8 4B B1 FD | 	call	#__system___string_cmp
04104     00 FA 0D F2 | 	cmp	result1, #0 wz
04108     7C 01 90 AD |  if_e	jmp	#LR__0285
0410c     42 01 00 FF 
04110     4B 15 06 F6 | 	mov	arg02, ##@LR__4489
04114     0F 13 02 F6 | 	mov	arg01, local01
04118     C0 4B B1 FD | 	call	#__system___string_cmp
0411c     00 FA 0D F2 | 	cmp	result1, #0 wz
04120     6C 01 90 AD |  if_e	jmp	#LR__0286
04124     42 01 00 FF 
04128     53 15 06 F6 | 	mov	arg02, ##@LR__4490
0412c     0F 13 02 F6 | 	mov	arg01, local01
04130     A8 4B B1 FD | 	call	#__system___string_cmp
04134     00 FA 0D F2 | 	cmp	result1, #0 wz
04138     5C 01 90 AD |  if_e	jmp	#LR__0287
0413c     42 01 00 FF 
04140     5A 15 06 F6 | 	mov	arg02, ##@LR__4491
04144     0F 13 02 F6 | 	mov	arg01, local01
04148     90 4B B1 FD | 	call	#__system___string_cmp
0414c     00 FA 0D F2 | 	cmp	result1, #0 wz
04150     4C 01 90 AD |  if_e	jmp	#LR__0288
04154     42 01 00 FF 
04158     61 15 06 F6 | 	mov	arg02, ##@LR__4492
0415c     0F 13 02 F6 | 	mov	arg01, local01
04160     78 4B B1 FD | 	call	#__system___string_cmp
04164     00 FA 0D F2 | 	cmp	result1, #0 wz
04168     3C 01 90 AD |  if_e	jmp	#LR__0289
0416c     42 01 00 FF 
04170     68 15 06 F6 | 	mov	arg02, ##@LR__4493
04174     0F 13 02 F6 | 	mov	arg01, local01
04178     60 4B B1 FD | 	call	#__system___string_cmp
0417c     00 FA 0D F2 | 	cmp	result1, #0 wz
04180     2C 01 90 AD |  if_e	jmp	#LR__0290
04184     42 01 00 FF 
04188     6F 15 06 F6 | 	mov	arg02, ##@LR__4494
0418c     0F 13 02 F6 | 	mov	arg01, local01
04190     48 4B B1 FD | 	call	#__system___string_cmp
04194     00 FA 0D F2 | 	cmp	result1, #0 wz
04198     1C 01 90 AD |  if_e	jmp	#LR__0291
0419c     42 01 00 FF 
041a0     77 15 06 F6 | 	mov	arg02, ##@LR__4495
041a4     0F 13 02 F6 | 	mov	arg01, local01
041a8     30 4B B1 FD | 	call	#__system___string_cmp
041ac     00 FA 0D F2 | 	cmp	result1, #0 wz
041b0     0C 01 90 AD |  if_e	jmp	#LR__0292
041b4     42 01 00 FF 
041b8     7D 15 06 F6 | 	mov	arg02, ##@LR__4496
041bc     0F 13 02 F6 | 	mov	arg01, local01
041c0     18 4B B1 FD | 	call	#__system___string_cmp
041c4     00 FA 0D F2 | 	cmp	result1, #0 wz
041c8     FC 00 90 AD |  if_e	jmp	#LR__0293
041cc     42 01 00 FF 
041d0     83 15 06 F6 | 	mov	arg02, ##@LR__4497
041d4     0F 13 02 F6 | 	mov	arg01, local01
041d8     00 4B B1 FD | 	call	#__system___string_cmp
041dc     00 FA 0D F2 | 	cmp	result1, #0 wz
041e0     EC 00 90 AD |  if_e	jmp	#LR__0294
041e4     42 01 00 FF 
041e8     87 15 06 F6 | 	mov	arg02, ##@LR__4498
041ec     0F 13 02 F6 | 	mov	arg01, local01
041f0     E8 4A B1 FD | 	call	#__system___string_cmp
041f4     00 FA 0D F2 | 	cmp	result1, #0 wz
041f8     DC 00 90 AD |  if_e	jmp	#LR__0295
041fc     42 01 00 FF 
04200     8B 15 06 F6 | 	mov	arg02, ##@LR__4499
04204     0F 13 02 F6 | 	mov	arg01, local01
04208     D0 4A B1 FD | 	call	#__system___string_cmp
0420c     00 FA 0D F2 | 	cmp	result1, #0 wz
04210     CC 00 90 AD |  if_e	jmp	#LR__0296
04214     42 01 00 FF 
04218     8F 15 06 F6 | 	mov	arg02, ##@LR__4500
0421c     0F 13 02 F6 | 	mov	arg01, local01
04220     B8 4A B1 FD | 	call	#__system___string_cmp
04224     00 FA 0D F2 | 	cmp	result1, #0 wz
04228     BC 00 90 AD |  if_e	jmp	#LR__0297
0422c     42 01 00 FF 
04230     95 15 06 F6 | 	mov	arg02, ##@LR__4501
04234     0F 13 02 F6 | 	mov	arg01, local01
04238     A0 4A B1 FD | 	call	#__system___string_cmp
0423c     00 FA 0D F2 | 	cmp	result1, #0 wz
04240     AC 00 90 AD |  if_e	jmp	#LR__0298
04244     42 01 00 FF 
04248     9B 15 06 F6 | 	mov	arg02, ##@LR__4502
0424c     0F 13 02 F6 | 	mov	arg01, local01
04250     88 4A B1 FD | 	call	#__system___string_cmp
04254     00 FA 0D F2 | 	cmp	result1, #0 wz
04258     9C 00 90 AD |  if_e	jmp	#LR__0299
0425c     A0 00 90 FD | 	jmp	#LR__0300
04260                 | LR__0280
04260     85 FA 05 F6 | 	mov	result1, #133
04264     9C 00 90 FD | 	jmp	#LR__0301
04268                 | LR__0281
04268     84 FA 05 F6 | 	mov	result1, #132
0426c     94 00 90 FD | 	jmp	#LR__0301
04270                 | LR__0282
04270     86 FA 05 F6 | 	mov	result1, #134
04274     8C 00 90 FD | 	jmp	#LR__0301
04278                 | LR__0283
04278     82 FA 05 F6 | 	mov	result1, #130
0427c     84 00 90 FD | 	jmp	#LR__0301
04280                 | LR__0284
04280     6F FA 05 F6 | 	mov	result1, #111
04284     7C 00 90 FD | 	jmp	#LR__0301
04288                 | LR__0285
04288     6F FA 05 F6 | 	mov	result1, #111
0428c     74 00 90 FD | 	jmp	#LR__0301
04290                 | LR__0286
04290     62 FA 05 F6 | 	mov	result1, #98
04294     6C 00 90 FD | 	jmp	#LR__0301
04298                 | LR__0287
04298     66 FA 05 F6 | 	mov	result1, #102
0429c     64 00 90 FD | 	jmp	#LR__0301
042a0                 | LR__0288
042a0     67 FA 05 F6 | 	mov	result1, #103
042a4     5C 00 90 FD | 	jmp	#LR__0301
042a8                 | LR__0289
042a8     64 FA 05 F6 | 	mov	result1, #100
042ac     54 00 90 FD | 	jmp	#LR__0301
042b0                 | LR__0290
042b0     65 FA 05 F6 | 	mov	result1, #101
042b4     4C 00 90 FD | 	jmp	#LR__0301
042b8                 | LR__0291
042b8     7B FA 05 F6 | 	mov	result1, #123
042bc     44 00 90 FD | 	jmp	#LR__0301
042c0                 | LR__0292
042c0     76 FA 05 F6 | 	mov	result1, #118
042c4     3C 00 90 FD | 	jmp	#LR__0301
042c8                 | LR__0293
042c8     7A FA 05 F6 | 	mov	result1, #122
042cc     34 00 90 FD | 	jmp	#LR__0301
042d0                 | LR__0294
042d0     54 FA 05 F6 | 	mov	result1, #84
042d4     2C 00 90 FD | 	jmp	#LR__0301
042d8                 | LR__0295
042d8     6B FA 05 F6 | 	mov	result1, #107
042dc     24 00 90 FD | 	jmp	#LR__0301
042e0                 | LR__0296
042e0     87 FA 05 F6 | 	mov	result1, #135
042e4     1C 00 90 FD | 	jmp	#LR__0301
042e8                 | LR__0297
042e8     6A FA 05 F6 | 	mov	result1, #106
042ec     14 00 90 FD | 	jmp	#LR__0301
042f0                 | LR__0298
042f0     6E FA 05 F6 | 	mov	result1, #110
042f4     0C 00 90 FD | 	jmp	#LR__0301
042f8                 | LR__0299
042f8     83 FA 05 F6 | 	mov	result1, #131
042fc     04 00 90 FD | 	jmp	#LR__0301
04300                 | LR__0300
04300     00 FA 05 F6 | 	mov	result1, #0
04304                 | LR__0301
04304     A7 F0 03 F6 | 	mov	ptra, fp
04308     B2 00 A0 FD | 	call	#popregs_
0430c                 | _isfunction_ret
0430c     2D 00 64 FD | 	ret
04310                 | 
04310                 | ' 
04310                 | ' function isname(s as string) as boolean
04310                 | _isname
04310     0D 4A 05 F6 | 	mov	COUNT_, #13
04314     A8 00 A0 FD | 	call	#pushregs_
04318     09 1F 02 F6 | 	mov	local01, arg01
0431c     09 21 02 F6 | 	mov	local02, arg01
04320     97 06 48 FB | 	callpa	#(@LR__0311-@LR__0310)>>2,fcache_load_ptr_
04324                 | LR__0310
04324     10 FB C9 FA | 	rdbyte	result1, local02 wz
04328     01 20 06 51 |  if_ne	add	local02, #1
0432c     F4 FF 9F 5D |  if_ne	jmp	#LR__0310
04330                 | LR__0311
04330     09 21 82 F1 | 	sub	local02, arg01
04334     10 FB 01 F6 | 	mov	result1, local02
04338     FD 22 0A F6 | 	mov	local03, result1 wz
0433c     00 FA 05 A6 |  if_e	mov	result1, #0
04340     34 02 90 AD |  if_e	jmp	#LR__0323
04344     0F 13 02 F6 | 	mov	arg01, local01
04348     01 14 06 F6 | 	mov	arg02, #1
0434c     01 16 06 F6 | 	mov	arg03, #1
04350     88 6A B1 FD | 	call	#__system__Mid_S
04354     FD 24 02 F6 | 	mov	local04, result1
04358                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
04358     42 01 00 FF 
0435c     9F 15 06 F6 | 	mov	arg02, ##@LR__4503
04360     12 13 02 F6 | 	mov	arg01, local04
04364     74 49 B1 FD | 	call	#__system___string_cmp
04368     00 FA 55 F2 | 	cmps	result1, #0 wc
0436c     18 00 90 CD |  if_b	jmp	#LR__0312
04370     42 01 00 FF 
04374     A1 15 06 F6 | 	mov	arg02, ##@LR__4504
04378     12 13 02 F6 | 	mov	arg01, local04
0437c     5C 49 B1 FD | 	call	#__system___string_cmp
04380     01 FA 55 F2 | 	cmps	result1, #1 wc
04384     1C 00 90 CD |  if_b	jmp	#LR__0313
04388                 | LR__0312
04388     42 01 00 FF 
0438c     A3 15 06 F6 | 	mov	arg02, ##@LR__4505
04390     12 13 02 F6 | 	mov	arg01, local04
04394     44 49 B1 FD | 	call	#__system___string_cmp
04398     00 FA 0D F2 | 	cmp	result1, #0 wz
0439c     00 FA 05 56 |  if_ne	mov	result1, #0
043a0     D4 01 90 5D |  if_ne	jmp	#LR__0323
043a4                 | LR__0313
043a4                 | ' if l>2 then 
043a4     03 22 56 F2 | 	cmps	local03, #3 wc
043a8     C8 01 90 CD |  if_b	jmp	#LR__0322
043ac                 | '   for i=2 to l
043ac     02 26 06 F6 | 	mov	local05, #2
043b0     11 29 02 F6 | 	mov	local06, local03
043b4     01 28 06 F1 | 	add	local06, #1
043b8                 | LR__0314
043b8     14 27 52 F2 | 	cmps	local05, local06 wc
043bc     B4 01 90 3D |  if_ae	jmp	#LR__0321
043c0     0F 13 02 F6 | 	mov	arg01, local01
043c4     13 15 02 F6 | 	mov	arg02, local05
043c8     01 16 06 F6 | 	mov	arg03, #1
043cc     0C 6A B1 FD | 	call	#__system__Mid_S
043d0     FD 24 02 F6 | 	mov	local04, result1
043d4                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false
043d4     11 27 52 F2 | 	cmps	local05, local03 wc
043d8     9C 00 90 3D |  if_ae	jmp	#LR__0317
043dc     42 01 00 FF 
043e0     A5 15 06 F6 | 	mov	arg02, ##@LR__4506
043e4     12 13 02 F6 | 	mov	arg01, local04
043e8     F0 48 B1 FD | 	call	#__system___string_cmp
043ec     00 FA 55 F2 | 	cmps	result1, #0 wc
043f0     18 00 90 CD |  if_b	jmp	#LR__0315
043f4     42 01 00 FF 
043f8     A7 15 06 F6 | 	mov	arg02, ##@LR__4507
043fc     12 13 02 F6 | 	mov	arg01, local04
04400     D8 48 B1 FD | 	call	#__system___string_cmp
04404     01 FA 55 F2 | 	cmps	result1, #1 wc
04408     6C 00 90 CD |  if_b	jmp	#LR__0317
0440c                 | LR__0315
0440c     42 01 00 FF 
04410     A9 15 06 F6 | 	mov	arg02, ##@LR__4508
04414     12 13 02 F6 | 	mov	arg01, local04
04418     C0 48 B1 FD | 	call	#__system___string_cmp
0441c     00 FA 55 F2 | 	cmps	result1, #0 wc
04420     18 00 90 CD |  if_b	jmp	#LR__0316
04424     42 01 00 FF 
04428     AB 15 06 F6 | 	mov	arg02, ##@LR__4509
0442c     12 13 02 F6 | 	mov	arg01, local04
04430     A8 48 B1 FD | 	call	#__system___string_cmp
04434     01 FA 55 F2 | 	cmps	result1, #1 wc
04438     3C 00 90 CD |  if_b	jmp	#LR__0317
0443c                 | LR__0316
0443c     42 01 00 FF 
04440     AD 2B 06 F6 | 	mov	local07, ##@LR__4510
04444     12 13 02 F6 | 	mov	arg01, local04
04448     15 15 02 F6 | 	mov	arg02, local07
0444c     8C 48 B1 FD | 	call	#__system___string_cmp
04450     00 FA 0D F2 | 	cmp	result1, #0 wz
04454     20 00 90 AD |  if_e	jmp	#LR__0317
04458     42 01 00 FF 
0445c     AF 2D 06 F6 | 	mov	local08, ##@LR__4511
04460     12 13 02 F6 | 	mov	arg01, local04
04464     16 15 02 F6 | 	mov	arg02, local08
04468     70 48 B1 FD | 	call	#__system___string_cmp
0446c     FD 2E 0A F6 | 	mov	local09, result1 wz
04470     00 FA 05 56 |  if_ne	mov	result1, #0
04474     00 01 90 5D |  if_ne	jmp	#LR__0323
04478                 | LR__0317
04478                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
04478     11 27 0A F2 | 	cmp	local05, local03 wz
0447c     EC 00 90 5D |  if_ne	jmp	#LR__0320
04480     42 01 00 FF 
04484     B1 31 06 F6 | 	mov	local10, ##@LR__4512
04488     12 13 02 F6 | 	mov	arg01, local04
0448c     18 15 02 F6 | 	mov	arg02, local10
04490     48 48 B1 FD | 	call	#__system___string_cmp
04494     FD 32 02 F6 | 	mov	local11, result1
04498     00 32 56 F2 | 	cmps	local11, #0 wc
0449c     1C 00 90 CD |  if_b	jmp	#LR__0318
044a0     42 01 00 FF 
044a4     B3 15 06 F6 | 	mov	arg02, ##@LR__4513
044a8     12 13 02 F6 | 	mov	arg01, local04
044ac     2C 48 B1 FD | 	call	#__system___string_cmp
044b0     FD 30 02 F6 | 	mov	local10, result1
044b4     01 30 56 F2 | 	cmps	local10, #1 wc
044b8     B0 00 90 CD |  if_b	jmp	#LR__0320
044bc                 | LR__0318
044bc     42 01 00 FF 
044c0     B5 15 06 F6 | 	mov	arg02, ##@LR__4514
044c4     12 13 02 F6 | 	mov	arg01, local04
044c8     10 48 B1 FD | 	call	#__system___string_cmp
044cc     00 FA 55 F2 | 	cmps	result1, #0 wc
044d0     1C 00 90 CD |  if_b	jmp	#LR__0319
044d4     42 01 00 FF 
044d8     B7 2F 06 F6 | 	mov	local09, ##@LR__4515
044dc     12 13 02 F6 | 	mov	arg01, local04
044e0     17 15 02 F6 | 	mov	arg02, local09
044e4     F4 47 B1 FD | 	call	#__system___string_cmp
044e8     01 FA 55 F2 | 	cmps	result1, #1 wc
044ec     7C 00 90 CD |  if_b	jmp	#LR__0320
044f0                 | LR__0319
044f0     42 01 00 FF 
044f4     B9 2F 06 F6 | 	mov	local09, ##@LR__4516
044f8     12 13 02 F6 | 	mov	arg01, local04
044fc     17 15 02 F6 | 	mov	arg02, local09
04500     D8 47 B1 FD | 	call	#__system___string_cmp
04504     00 FA 4D F2 | 	cmps	result1, #0 wz
04508     60 00 90 AD |  if_e	jmp	#LR__0320
0450c     42 01 00 FF 
04510     BB 2D 06 F6 | 	mov	local08, ##@LR__4517
04514     12 13 02 F6 | 	mov	arg01, local04
04518     16 15 02 F6 | 	mov	arg02, local08
0451c     BC 47 B1 FD | 	call	#__system___string_cmp
04520     FD 2E 0A F6 | 	mov	local09, result1 wz
04524     44 00 90 AD |  if_e	jmp	#LR__0320
04528     42 01 00 FF 
0452c     BD 35 06 F6 | 	mov	local12, ##@LR__4518
04530     1A 2D 02 F6 | 	mov	local08, local12
04534     12 13 02 F6 | 	mov	arg01, local04
04538     16 15 02 F6 | 	mov	arg02, local08
0453c     9C 47 B1 FD | 	call	#__system___string_cmp
04540     FD 2A 0A F6 | 	mov	local07, result1 wz
04544     24 00 90 AD |  if_e	jmp	#LR__0320
04548     42 01 00 FF 
0454c     BF 37 06 F6 | 	mov	local13, ##@LR__4519
04550     1B 35 02 F6 | 	mov	local12, local13
04554     12 13 02 F6 | 	mov	arg01, local04
04558     1A 15 02 F6 | 	mov	arg02, local12
0455c     7C 47 B1 FD | 	call	#__system___string_cmp
04560     FD 2C 0A F6 | 	mov	local08, result1 wz
04564     00 FA 05 56 |  if_ne	mov	result1, #0
04568     0C 00 90 5D |  if_ne	jmp	#LR__0323
0456c                 | LR__0320
0456c     01 26 06 F1 | 	add	local05, #1
04570     44 FE 9F FD | 	jmp	#LR__0314
04574                 | LR__0321
04574                 | LR__0322
04574                 | ' return true
04574     01 FA 65 F6 | 	neg	result1, #1
04578                 | LR__0323
04578     A7 F0 03 F6 | 	mov	ptra, fp
0457c     B2 00 A0 FD | 	call	#popregs_
04580                 | _isname_ret
04580     2D 00 64 FD | 	ret
04584                 | 
04584                 | ' 
04584                 | ' function isnum(s as string) as boolean
04584                 | _isnum
04584     0D 4A 05 F6 | 	mov	COUNT_, #13
04588     A8 00 A0 FD | 	call	#pushregs_
0458c     09 1F 02 F6 | 	mov	local01, arg01
04590     00 20 06 F6 | 	mov	local02, #0
04594     00 22 06 F6 | 	mov	local03, #0
04598     0F 13 02 F6 | 	mov	arg01, local01
0459c     09 25 02 F6 | 	mov	local04, arg01
045a0     97 06 48 FB | 	callpa	#(@LR__0331-@LR__0330)>>2,fcache_load_ptr_
045a4                 | LR__0330
045a4     12 FB C9 FA | 	rdbyte	result1, local04 wz
045a8     01 24 06 51 |  if_ne	add	local04, #1
045ac     F4 FF 9F 5D |  if_ne	jmp	#LR__0330
045b0                 | LR__0331
045b0     09 25 82 F1 | 	sub	local04, arg01
045b4     12 FB 01 F6 | 	mov	result1, local04
045b8     FD 26 0A F6 | 	mov	local05, result1 wz
045bc     00 FA 05 A6 |  if_e	mov	result1, #0
045c0     8C 02 90 AD |  if_e	jmp	#LR__0342
045c4     0F 13 02 F6 | 	mov	arg01, local01
045c8     01 14 06 F6 | 	mov	arg02, #1
045cc     01 16 06 F6 | 	mov	arg03, #1
045d0     08 68 B1 FD | 	call	#__system__Mid_S
045d4     FD 28 02 F6 | 	mov	local06, result1
045d8                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
045d8     42 01 00 FF 
045dc     C1 15 06 F6 | 	mov	arg02, ##@LR__4520
045e0     14 13 02 F6 | 	mov	arg01, local06
045e4     F4 46 B1 FD | 	call	#__system___string_cmp
045e8     00 FA 55 F2 | 	cmps	result1, #0 wc
045ec     18 00 90 CD |  if_b	jmp	#LR__0332
045f0     42 01 00 FF 
045f4     C3 15 06 F6 | 	mov	arg02, ##@LR__4521
045f8     14 13 02 F6 | 	mov	arg01, local06
045fc     DC 46 B1 FD | 	call	#__system___string_cmp
04600     01 FA 55 F2 | 	cmps	result1, #1 wc
04604     78 00 90 CD |  if_b	jmp	#LR__0333
04608                 | LR__0332
04608     42 01 00 FF 
0460c     C5 15 06 F6 | 	mov	arg02, ##@LR__4522
04610     14 13 02 F6 | 	mov	arg01, local06
04614     C4 46 B1 FD | 	call	#__system___string_cmp
04618     00 FA 0D F2 | 	cmp	result1, #0 wz
0461c     60 00 90 AD |  if_e	jmp	#LR__0333
04620     42 01 00 FF 
04624     C7 2B 06 F6 | 	mov	local07, ##@LR__4523
04628     14 13 02 F6 | 	mov	arg01, local06
0462c     15 15 02 F6 | 	mov	arg02, local07
04630     A8 46 B1 FD | 	call	#__system___string_cmp
04634     00 FA 0D F2 | 	cmp	result1, #0 wz
04638     44 00 90 AD |  if_e	jmp	#LR__0333
0463c     42 01 00 FF 
04640     C9 2D 06 F6 | 	mov	local08, ##@LR__4524
04644     16 2B 02 F6 | 	mov	local07, local08
04648     14 13 02 F6 | 	mov	arg01, local06
0464c     15 15 02 F6 | 	mov	arg02, local07
04650     88 46 B1 FD | 	call	#__system___string_cmp
04654     00 FA 4D F2 | 	cmps	result1, #0 wz
04658     24 00 90 AD |  if_e	jmp	#LR__0333
0465c     42 01 00 FF 
04660     CB 2F 06 F6 | 	mov	local09, ##@LR__4525
04664     17 2D 02 F6 | 	mov	local08, local09
04668     14 13 02 F6 | 	mov	arg01, local06
0466c     16 15 02 F6 | 	mov	arg02, local08
04670     68 46 B1 FD | 	call	#__system___string_cmp
04674     FD 2A 0A F6 | 	mov	local07, result1 wz
04678     00 FA 05 56 |  if_ne	mov	result1, #0
0467c     D0 01 90 5D |  if_ne	jmp	#LR__0342
04680                 | LR__0333
04680                 | ' if m$="." then ds=1
04680     42 01 00 FF 
04684     CD 15 06 F6 | 	mov	arg02, ##@LR__4526
04688     14 13 02 F6 | 	mov	arg01, local06
0468c     4C 46 B1 FD | 	call	#__system___string_cmp
04690     00 FA 0D F2 | 	cmp	result1, #0 wz
04694     01 20 06 A6 |  if_e	mov	local02, #1
04698                 | ' if l>1 then 
04698     02 26 56 F2 | 	cmps	local05, #2 wc
0469c     AC 01 90 CD |  if_b	jmp	#LR__0341
046a0                 | '   for i=2 to l
046a0     02 30 06 F6 | 	mov	local10, #2
046a4     13 33 02 F6 | 	mov	local11, local05
046a8     01 32 06 F1 | 	add	local11, #1
046ac                 | LR__0334
046ac     19 31 52 F2 | 	cmps	local10, local11 wc
046b0     98 01 90 3D |  if_ae	jmp	#LR__0340
046b4     0F 13 02 F6 | 	mov	arg01, local01
046b8     18 15 02 F6 | 	mov	arg02, local10
046bc     01 16 06 F6 | 	mov	arg03, #1
046c0     18 67 B1 FD | 	call	#__system__Mid_S
046c4     FD 28 02 F6 | 	mov	local06, result1
046c8                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." andalso m$<>"E" andalso m$<>"e" andalso m$<>"-" then return false
046c8     42 01 00 FF 
046cc     CF 15 06 F6 | 	mov	arg02, ##@LR__4527
046d0     14 13 02 F6 | 	mov	arg01, local06
046d4     04 46 B1 FD | 	call	#__system___string_cmp
046d8     00 FA 55 F2 | 	cmps	result1, #0 wc
046dc     18 00 90 CD |  if_b	jmp	#LR__0335
046e0     42 01 00 FF 
046e4     D1 15 06 F6 | 	mov	arg02, ##@LR__4528
046e8     14 13 02 F6 | 	mov	arg01, local06
046ec     EC 45 B1 FD | 	call	#__system___string_cmp
046f0     01 FA 55 F2 | 	cmps	result1, #1 wc
046f4     98 00 90 CD |  if_b	jmp	#LR__0336
046f8                 | LR__0335
046f8     42 01 00 FF 
046fc     D3 15 06 F6 | 	mov	arg02, ##@LR__4529
04700     14 13 02 F6 | 	mov	arg01, local06
04704     D4 45 B1 FD | 	call	#__system___string_cmp
04708     00 FA 0D F2 | 	cmp	result1, #0 wz
0470c     80 00 90 AD |  if_e	jmp	#LR__0336
04710     42 01 00 FF 
04714     D5 2B 06 F6 | 	mov	local07, ##@LR__4530
04718     14 13 02 F6 | 	mov	arg01, local06
0471c     15 15 02 F6 | 	mov	arg02, local07
04720     B8 45 B1 FD | 	call	#__system___string_cmp
04724     00 FA 4D F2 | 	cmps	result1, #0 wz
04728     64 00 90 AD |  if_e	jmp	#LR__0336
0472c     42 01 00 FF 
04730     D7 2D 06 F6 | 	mov	local08, ##@LR__4531
04734     16 2B 02 F6 | 	mov	local07, local08
04738     14 13 02 F6 | 	mov	arg01, local06
0473c     15 15 02 F6 | 	mov	arg02, local07
04740     98 45 B1 FD | 	call	#__system___string_cmp
04744     FD 34 0A F6 | 	mov	local12, result1 wz
04748     44 00 90 AD |  if_e	jmp	#LR__0336
0474c     42 01 00 FF 
04750     D9 2F 06 F6 | 	mov	local09, ##@LR__4532
04754     17 2D 02 F6 | 	mov	local08, local09
04758     14 13 02 F6 | 	mov	arg01, local06
0475c     16 15 02 F6 | 	mov	arg02, local08
04760     78 45 B1 FD | 	call	#__system___string_cmp
04764     FD 2A 0A F6 | 	mov	local07, result1 wz
04768     24 00 90 AD |  if_e	jmp	#LR__0336
0476c     42 01 00 FF 
04770     DB 37 06 F6 | 	mov	local13, ##@LR__4533
04774     1B 2F 02 F6 | 	mov	local09, local13
04778     14 13 02 F6 | 	mov	arg01, local06
0477c     17 15 02 F6 | 	mov	arg02, local09
04780     58 45 B1 FD | 	call	#__system___string_cmp
04784     FD 2C 0A F6 | 	mov	local08, result1 wz
04788     00 FA 05 56 |  if_ne	mov	result1, #0
0478c     C0 00 90 5D |  if_ne	jmp	#LR__0342
04790                 | LR__0336
04790                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
04790     42 01 00 FF 
04794     DD 15 06 F6 | 	mov	arg02, ##@LR__4534
04798     14 13 02 F6 | 	mov	arg01, local06
0479c     3C 45 B1 FD | 	call	#__system___string_cmp
047a0     00 FA 0D F2 | 	cmp	result1, #0 wz
047a4     38 00 90 5D |  if_ne	jmp	#LR__0337
047a8     18 15 02 F6 | 	mov	arg02, local10
047ac     01 14 86 F1 | 	sub	arg02, #1
047b0     0F 13 02 F6 | 	mov	arg01, local01
047b4     01 16 06 F6 | 	mov	arg03, #1
047b8     20 66 B1 FD | 	call	#__system__Mid_S
047bc     FD 12 02 F6 | 	mov	arg01, result1
047c0     B4 67 B1 FD | 	call	#__system__LCase_S
047c4     FD 12 02 F6 | 	mov	arg01, result1
047c8     42 01 00 FF 
047cc     DF 15 06 F6 | 	mov	arg02, ##@LR__4535
047d0     08 45 B1 FD | 	call	#__system___string_cmp
047d4     00 FA 0D F2 | 	cmp	result1, #0 wz
047d8     00 FA 05 56 |  if_ne	mov	result1, #0
047dc     70 00 90 5D |  if_ne	jmp	#LR__0342
047e0                 | LR__0337
047e0                 | '     if m$="." then ds+=1: if ds>1 then return false
047e0     42 01 00 FF 
047e4     E1 15 06 F6 | 	mov	arg02, ##@LR__4536
047e8     14 13 02 F6 | 	mov	arg01, local06
047ec     EC 44 B1 FD | 	call	#__system___string_cmp
047f0     00 FA 0D F2 | 	cmp	result1, #0 wz
047f4     01 20 06 A1 |  if_e	add	local02, #1
047f8     02 20 56 A2 |  if_e	cmps	local02, #2 wc
047fc     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
04800     4C 00 90 2D |  if_nc_and_z	jmp	#LR__0342
04804                 | '     if m$="E" orelse m$="e" then es+=1: if es>1 then return false
04804     42 01 00 FF 
04808     E3 15 06 F6 | 	mov	arg02, ##@LR__4537
0480c     14 13 02 F6 | 	mov	arg01, local06
04810     C8 44 B1 FD | 	call	#__system___string_cmp
04814     00 FA 4D F2 | 	cmps	result1, #0 wz
04818     18 00 90 AD |  if_e	jmp	#LR__0338
0481c     42 01 00 FF 
04820     E5 15 06 F6 | 	mov	arg02, ##@LR__4538
04824     14 13 02 F6 | 	mov	arg01, local06
04828     B0 44 B1 FD | 	call	#__system___string_cmp
0482c     00 FA 4D F2 | 	cmps	result1, #0 wz
04830     10 00 90 5D |  if_ne	jmp	#LR__0339
04834                 | LR__0338
04834     01 22 06 F1 | 	add	local03, #1
04838     02 22 56 F2 | 	cmps	local03, #2 wc
0483c     00 FA 05 36 |  if_ae	mov	result1, #0
04840     0C 00 90 3D |  if_ae	jmp	#LR__0342
04844                 | LR__0339
04844     01 30 06 F1 | 	add	local10, #1
04848     60 FE 9F FD | 	jmp	#LR__0334
0484c                 | LR__0340
0484c                 | LR__0341
0484c                 | ' return true
0484c     01 FA 65 F6 | 	neg	result1, #1
04850                 | LR__0342
04850     A7 F0 03 F6 | 	mov	ptra, fp
04854     B2 00 A0 FD | 	call	#popregs_
04858                 | _isnum_ret
04858     2D 00 64 FD | 	ret
0485c                 | 
0485c                 | '   
0485c                 | ' function isint(s as string) as boolean
0485c                 | _isint
0485c     05 4A 05 F6 | 	mov	COUNT_, #5
04860     A8 00 A0 FD | 	call	#pushregs_
04864     09 1F 02 F6 | 	mov	local01, arg01
04868     09 21 02 F6 | 	mov	local02, arg01
0486c     97 06 48 FB | 	callpa	#(@LR__0351-@LR__0350)>>2,fcache_load_ptr_
04870                 | LR__0350
04870     10 FB C9 FA | 	rdbyte	result1, local02 wz
04874     01 20 06 51 |  if_ne	add	local02, #1
04878     F4 FF 9F 5D |  if_ne	jmp	#LR__0350
0487c                 | LR__0351
0487c     09 21 82 F1 | 	sub	local02, arg01
04880     10 FB 01 F6 | 	mov	result1, local02
04884     FD 20 0A F6 | 	mov	local02, result1 wz
04888     00 FA 05 A6 |  if_e	mov	result1, #0
0488c     18 01 90 AD |  if_e	jmp	#LR__0359
04890     0F 13 02 F6 | 	mov	arg01, local01
04894     01 14 06 F6 | 	mov	arg02, #1
04898     01 16 06 F6 | 	mov	arg03, #1
0489c     3C 65 B1 FD | 	call	#__system__Mid_S
048a0     FD 22 02 F6 | 	mov	local03, result1
048a4                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
048a4     42 01 00 FF 
048a8     E7 15 06 F6 | 	mov	arg02, ##@LR__4539
048ac     11 13 02 F6 | 	mov	arg01, local03
048b0     28 44 B1 FD | 	call	#__system___string_cmp
048b4     00 FA 55 F2 | 	cmps	result1, #0 wc
048b8     18 00 90 CD |  if_b	jmp	#LR__0352
048bc     42 01 00 FF 
048c0     E9 15 06 F6 | 	mov	arg02, ##@LR__4540
048c4     11 13 02 F6 | 	mov	arg01, local03
048c8     10 44 B1 FD | 	call	#__system___string_cmp
048cc     01 FA 55 F2 | 	cmps	result1, #1 wc
048d0     4C 00 90 CD |  if_b	jmp	#LR__0353
048d4                 | LR__0352
048d4     42 01 00 FF 
048d8     EB 15 06 F6 | 	mov	arg02, ##@LR__4541
048dc     11 13 02 F6 | 	mov	arg01, local03
048e0     F8 43 B1 FD | 	call	#__system___string_cmp
048e4     00 FA 0D F2 | 	cmp	result1, #0 wz
048e8     34 00 90 AD |  if_e	jmp	#LR__0353
048ec     42 01 00 FF 
048f0     ED 15 06 F6 | 	mov	arg02, ##@LR__4542
048f4     11 13 02 F6 | 	mov	arg01, local03
048f8     E0 43 B1 FD | 	call	#__system___string_cmp
048fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04900     1C 00 90 AD |  if_e	jmp	#LR__0353
04904     42 01 00 FF 
04908     EF 15 06 F6 | 	mov	arg02, ##@LR__4543
0490c     11 13 02 F6 | 	mov	arg01, local03
04910     C8 43 B1 FD | 	call	#__system___string_cmp
04914     00 FA 0D F2 | 	cmp	result1, #0 wz
04918     00 FA 05 56 |  if_ne	mov	result1, #0
0491c     88 00 90 5D |  if_ne	jmp	#LR__0359
04920                 | LR__0353
04920                 | ' 
04920                 | ' if l>1 then 
04920     02 20 56 F2 | 	cmps	local02, #2 wc
04924     7C 00 90 CD |  if_b	jmp	#LR__0358
04928                 | '   for i=2 to l
04928     02 24 06 F6 | 	mov	local04, #2
0492c     10 27 02 F6 | 	mov	local05, local02
04930     01 26 06 F1 | 	add	local05, #1
04934                 | LR__0354
04934     13 25 52 F2 | 	cmps	local04, local05 wc
04938     68 00 90 3D |  if_ae	jmp	#LR__0357
0493c     0F 13 02 F6 | 	mov	arg01, local01
04940     12 15 02 F6 | 	mov	arg02, local04
04944     01 16 06 F6 | 	mov	arg03, #1
04948     90 64 B1 FD | 	call	#__system__Mid_S
0494c     FD 22 02 F6 | 	mov	local03, result1
04950                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
04950     42 01 00 FF 
04954     F1 15 06 F6 | 	mov	arg02, ##@LR__4544
04958     11 13 02 F6 | 	mov	arg01, local03
0495c     7C 43 B1 FD | 	call	#__system___string_cmp
04960     00 FA 55 F2 | 	cmps	result1, #0 wc
04964     18 00 90 CD |  if_b	jmp	#LR__0355
04968     42 01 00 FF 
0496c     F3 15 06 F6 | 	mov	arg02, ##@LR__4545
04970     11 13 02 F6 | 	mov	arg01, local03
04974     64 43 B1 FD | 	call	#__system___string_cmp
04978     01 FA 55 F2 | 	cmps	result1, #1 wc
0497c     1C 00 90 CD |  if_b	jmp	#LR__0356
04980                 | LR__0355
04980     42 01 00 FF 
04984     F5 15 06 F6 | 	mov	arg02, ##@LR__4546
04988     11 13 02 F6 | 	mov	arg01, local03
0498c     4C 43 B1 FD | 	call	#__system___string_cmp
04990     00 FA 0D F2 | 	cmp	result1, #0 wz
04994     00 FA 05 56 |  if_ne	mov	result1, #0
04998     0C 00 90 5D |  if_ne	jmp	#LR__0359
0499c                 | LR__0356
0499c     01 24 06 F1 | 	add	local04, #1
049a0     90 FF 9F FD | 	jmp	#LR__0354
049a4                 | LR__0357
049a4                 | LR__0358
049a4                 | ' return true
049a4     01 FA 65 F6 | 	neg	result1, #1
049a8                 | LR__0359
049a8     A7 F0 03 F6 | 	mov	ptra, fp
049ac     B2 00 A0 FD | 	call	#popregs_
049b0                 | _isint_ret
049b0     2D 00 64 FD | 	ret
049b4                 | 
049b4                 | ' 
049b4                 | ' function isdec(s as string) as boolean
049b4                 | _isdec
049b4     05 4A 05 F6 | 	mov	COUNT_, #5
049b8     A8 00 A0 FD | 	call	#pushregs_
049bc     09 1F 02 F6 | 	mov	local01, arg01
049c0     09 21 02 F6 | 	mov	local02, arg01
049c4     97 06 48 FB | 	callpa	#(@LR__0361-@LR__0360)>>2,fcache_load_ptr_
049c8                 | LR__0360
049c8     10 FB C9 FA | 	rdbyte	result1, local02 wz
049cc     01 20 06 51 |  if_ne	add	local02, #1
049d0     F4 FF 9F 5D |  if_ne	jmp	#LR__0360
049d4                 | LR__0361
049d4     09 21 82 F1 | 	sub	local02, arg01
049d8     10 FB 01 F6 | 	mov	result1, local02
049dc     FD 20 0A F6 | 	mov	local02, result1 wz
049e0     00 FA 05 A6 |  if_e	mov	result1, #0
049e4     80 00 90 AD |  if_e	jmp	#LR__0366
049e8                 | ' for i=1 to l
049e8     01 22 06 F6 | 	mov	local03, #1
049ec     10 25 02 F6 | 	mov	local04, local02
049f0     01 24 06 F1 | 	add	local04, #1
049f4                 | LR__0362
049f4     12 23 52 F2 | 	cmps	local03, local04 wc
049f8     68 00 90 3D |  if_ae	jmp	#LR__0365
049fc     0F 13 02 F6 | 	mov	arg01, local01
04a00     11 15 02 F6 | 	mov	arg02, local03
04a04     01 16 06 F6 | 	mov	arg03, #1
04a08     D0 63 B1 FD | 	call	#__system__Mid_S
04a0c     FD 26 02 F6 | 	mov	local05, result1
04a10                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
04a10     42 01 00 FF 
04a14     F7 15 06 F6 | 	mov	arg02, ##@LR__4547
04a18     13 13 02 F6 | 	mov	arg01, local05
04a1c     BC 42 B1 FD | 	call	#__system___string_cmp
04a20     00 FA 55 F2 | 	cmps	result1, #0 wc
04a24     18 00 90 CD |  if_b	jmp	#LR__0363
04a28     42 01 00 FF 
04a2c     F9 15 06 F6 | 	mov	arg02, ##@LR__4548
04a30     13 13 02 F6 | 	mov	arg01, local05
04a34     A4 42 B1 FD | 	call	#__system___string_cmp
04a38     01 FA 55 F2 | 	cmps	result1, #1 wc
04a3c     1C 00 90 CD |  if_b	jmp	#LR__0364
04a40                 | LR__0363
04a40     42 01 00 FF 
04a44     FB 15 06 F6 | 	mov	arg02, ##@LR__4549
04a48     13 13 02 F6 | 	mov	arg01, local05
04a4c     8C 42 B1 FD | 	call	#__system___string_cmp
04a50     00 FA 0D F2 | 	cmp	result1, #0 wz
04a54     00 FA 05 56 |  if_ne	mov	result1, #0
04a58     0C 00 90 5D |  if_ne	jmp	#LR__0366
04a5c                 | LR__0364
04a5c     01 22 06 F1 | 	add	local03, #1
04a60     90 FF 9F FD | 	jmp	#LR__0362
04a64                 | LR__0365
04a64                 | ' return true
04a64     01 FA 65 F6 | 	neg	result1, #1
04a68                 | LR__0366
04a68     A7 F0 03 F6 | 	mov	ptra, fp
04a6c     B2 00 A0 FD | 	call	#popregs_
04a70                 | _isdec_ret
04a70     2D 00 64 FD | 	ret
04a74                 | 
04a74                 | ' 
04a74                 | ' function isstring(s as string) as boolean
04a74                 | _isstring
04a74     01 4A 05 F6 | 	mov	COUNT_, #1
04a78     A8 00 A0 FD | 	call	#pushregs_
04a7c                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
04a7c     09 1F 02 F6 | 	mov	local01, arg01
04a80     01 14 06 F6 | 	mov	arg02, #1
04a84     3C 62 B1 FD | 	call	#__system__Left_S
04a88     FD 12 02 F6 | 	mov	arg01, result1
04a8c     42 01 00 FF 
04a90     FD 15 06 F6 | 	mov	arg02, ##@LR__4550
04a94     44 42 B1 FD | 	call	#__system___string_cmp
04a98     00 FA 4D F2 | 	cmps	result1, #0 wz
04a9c     28 00 90 5D |  if_ne	jmp	#LR__0370
04aa0     0F 13 02 F6 | 	mov	arg01, local01
04aa4     01 14 06 F6 | 	mov	arg02, #1
04aa8     A0 62 B1 FD | 	call	#__system__Right_S
04aac     FD 12 02 F6 | 	mov	arg01, result1
04ab0     42 01 00 FF 
04ab4     FF 15 06 F6 | 	mov	arg02, ##@LR__4551
04ab8     20 42 B1 FD | 	call	#__system___string_cmp
04abc     00 FA 4D F2 | 	cmps	result1, #0 wz
04ac0     01 FA 65 A6 |  if_e	neg	result1, #1
04ac4     04 00 90 AD |  if_e	jmp	#LR__0371
04ac8                 | LR__0370
04ac8     00 FA 05 F6 | 	mov	result1, #0
04acc                 | LR__0371
04acc     A7 F0 03 F6 | 	mov	ptra, fp
04ad0     B2 00 A0 FD | 	call	#popregs_
04ad4                 | _isstring_ret
04ad4     2D 00 64 FD | 	ret
04ad8                 | 
04ad8                 | ' 
04ad8                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
04ad8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
04ad8                 | ' 
04ad8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
04ad8                 | ' '----------------------Reverse Polish notation precompiler -----------------------------------------------------------------------------
04ad8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
04ad8                 | ' 
04ad8                 | ' '----- delete a line from a program
04ad8                 | ' 
04ad8                 | ' function deleteline(aline as ulong) as integer
04ad8                 | _deleteline
04ad8     03 4A 05 F6 | 	mov	COUNT_, #3
04adc     A8 00 A0 FD | 	call	#pushregs_
04ae0     2C F0 07 F1 | 	add	ptra, #44
04ae4     04 4E 05 F1 | 	add	fp, #4
04ae8     A7 12 62 FC | 	wrlong	arg01, fp
04aec     69 00 00 FF 
04af0     58 E4 05 F1 | 	add	objptr, ##53848
04af4     F2 1E 02 FB | 	rdlong	local01, objptr
04af8     0C 4E 05 F1 | 	add	fp, #12
04afc     A7 1E 62 FC | 	wrlong	local01, fp
04b00     10 4E 85 F1 | 	sub	fp, #16
04b04                 | ' 
04b04                 | ' 
04b04                 | ' searchptr=programstart
04b04                 | ' 
04b04                 | ' do
04b04     5D 00 00 FF 
04b08     98 E5 85 F1 | 	sub	objptr, ##48024
04b0c                 | LR__0380
04b0c     14 4E 05 F1 | 	add	fp, #20
04b10     A7 12 02 F6 | 	mov	arg01, fp
04b14     04 4E 85 F1 | 	sub	fp, #4
04b18     A7 14 02 FB | 	rdlong	arg02, fp
04b1c     10 4E 85 F1 | 	sub	fp, #16
04b20     18 16 06 F6 | 	mov	arg03, #24
04b24     9C 36 B1 FD | 	call	#_psram_spin2_read1
04b28     10 4E 05 F1 | 	add	fp, #16
04b2c     A7 1E 02 FB | 	rdlong	local01, fp
04b30     08 4E 85 F1 | 	sub	fp, #8
04b34     A7 1E 62 FC | 	wrlong	local01, fp
04b38     20 4E 05 F1 | 	add	fp, #32
04b3c     A7 1E 02 FB | 	rdlong	local01, fp
04b40     18 4E 85 F1 | 	sub	fp, #24
04b44     A7 1E 62 FC | 	wrlong	local01, fp
04b48     04 4E 05 F1 | 	add	fp, #4
04b4c     A7 1E 02 FB | 	rdlong	local01, fp
04b50     10 4E 85 F1 | 	sub	fp, #16
04b54     A7 16 02 FB | 	rdlong	arg03, fp
04b58     04 4E 85 F1 | 	sub	fp, #4
04b5c     0B 1F 12 F2 | 	cmp	local01, arg03 wc
04b60     28 4E 05 C1 |  if_b	add	fp, #40
04b64     A7 20 02 CB |  if_b	rdlong	local02, fp
04b68     28 4E 85 C1 |  if_b	sub	fp, #40
04b6c     FF FF 3F CF 
04b70     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
04b74     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0380
04b78     0B 00 00 FF 
04b7c     C0 E4 85 F1 | 	sub	objptr, ##5824
04b80                 | ' 
04b80                 | ' 
04b80                 | ' if header(0)<>aline then return -1
04b80     14 4E 05 F1 | 	add	fp, #20
04b84     A7 1E 02 FB | 	rdlong	local01, fp
04b88     10 4E 85 F1 | 	sub	fp, #16
04b8c     A7 22 02 FB | 	rdlong	local03, fp
04b90     04 4E 85 F1 | 	sub	fp, #4
04b94     11 1F 0A F2 | 	cmp	local01, local03 wz
04b98     01 FA 65 56 |  if_ne	neg	result1, #1
04b9c     4C 03 90 5D |  if_ne	jmp	#LR__0386
04ba0     08 4E 05 F1 | 	add	fp, #8
04ba4     A7 12 02 FB | 	rdlong	arg01, fp
04ba8     08 4E 85 F1 | 	sub	fp, #8
04bac     01 14 66 F6 | 	neg	arg02, #1
04bb0     01 16 06 F6 | 	mov	arg03, #1
04bb4     00 18 06 F6 | 	mov	arg04, #0
04bb8     0B 00 00 FF 
04bbc     C0 E4 05 F1 | 	add	objptr, ##5824
04bc0                 | '     return fill(addr, pattern, count, listPtr, 4)
04bc0     04 1A 06 F6 | 	mov	arg05, #4
04bc4     34 37 B1 FD | 	call	#_psram_spin2_fill
04bc8     0B 00 00 FF 
04bcc     C0 E4 85 F1 | 	sub	objptr, ##5824
04bd0                 | ' 
04bd0                 | ' pslpoke(lineptr2,$FFFF_FFFF) ' flag the deleted line
04bd0                 | ' 
04bd0                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is one and only line in the program
04bd0     28 4E 05 F1 | 	add	fp, #40
04bd4     A7 1E 02 FB | 	rdlong	local01, fp
04bd8     28 4E 85 F1 | 	sub	fp, #40
04bdc     FF FF 3F FF 
04be0     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
04be4     24 4E 05 A1 |  if_e	add	fp, #36
04be8     A7 22 02 AB |  if_e	rdlong	local03, fp
04bec     24 4E 85 A1 |  if_e	sub	fp, #36
04bf0     FF FF 7F AF 
04bf4     FF 23 0E A2 |  if_e	cmp	local03, ##-1 wz
04bf8     90 00 90 5D |  if_ne	jmp	#LR__0381
04bfc     69 00 00 FF 
04c00     58 E4 05 F1 | 	add	objptr, ##53848
04c04     F2 00 68 FC | 	wrlong	#0, objptr
04c08     07 00 00 FF 
04c0c     28 E4 85 F1 | 	sub	objptr, ##3624
04c10     F2 00 68 FC | 	wrlong	#0, objptr
04c14     07 00 00 FF 
04c18     2C E4 05 F1 | 	add	objptr, ##3628
04c1c     F2 00 68 FC | 	wrlong	#0, objptr
04c20     04 E4 05 F1 | 	add	objptr, #4
04c24     FF FF FF FF 
04c28     F2 FE 6B FC | 	wrlong	##-1, objptr
04c2c     00 12 06 F6 | 	mov	arg01, #0
04c30     10 E4 85 F1 | 	sub	objptr, #16
04c34     F2 00 68 FC | 	wrlong	#0, objptr
04c38     01 14 66 F6 | 	neg	arg02, #1
04c3c     01 16 06 F6 | 	mov	arg03, #1
04c40     00 18 06 F6 | 	mov	arg04, #0
04c44     5D 00 00 FF 
04c48     90 E5 85 F1 | 	sub	objptr, ##48016
04c4c                 | '     return fill(addr, pattern, count, listPtr, 4)
04c4c     04 1A 06 F6 | 	mov	arg05, #4
04c50     A8 36 B1 FD | 	call	#_psram_spin2_fill
04c54     10 12 06 F6 | 	mov	arg01, #16
04c58     01 14 66 F6 | 	neg	arg02, #1
04c5c     01 16 06 F6 | 	mov	arg03, #1
04c60     00 18 06 F6 | 	mov	arg04, #0
04c64                 | '     return fill(addr, pattern, count, listPtr, 4)
04c64     04 1A 06 F6 | 	mov	arg05, #4
04c68     90 36 B1 FD | 	call	#_psram_spin2_fill
04c6c     14 12 06 F6 | 	mov	arg01, #20
04c70     1E 14 CE F9 | 	bmask	arg02, #30
04c74     01 16 06 F6 | 	mov	arg03, #1
04c78     00 18 06 F6 | 	mov	arg04, #0
04c7c                 | '     return fill(addr, pattern, count, listPtr, 4)
04c7c     04 1A 06 F6 | 	mov	arg05, #4
04c80     78 36 B1 FD | 	call	#_psram_spin2_fill
04c84     0B 00 00 FF 
04c88     C0 E4 85 F1 | 	sub	objptr, ##5824
04c8c                 | LR__0381
04c8c                 | ' 
04c8c                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' this is the last, and not first, line of the program
04c8c     28 4E 05 F1 | 	add	fp, #40
04c90     A7 1E 02 FB | 	rdlong	local01, fp
04c94     28 4E 85 F1 | 	sub	fp, #40
04c98     FF FF 3F FF 
04c9c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
04ca0     88 00 90 5D |  if_ne	jmp	#LR__0382
04ca4     24 4E 05 F1 | 	add	fp, #36
04ca8     A7 22 02 FB | 	rdlong	local03, fp
04cac     24 4E 85 F1 | 	sub	fp, #36
04cb0     FF FF 7F FF 
04cb4     FF 23 0E F2 | 	cmp	local03, ##-1 wz
04cb8     70 00 90 AD |  if_e	jmp	#LR__0382
04cbc     24 4E 05 F1 | 	add	fp, #36
04cc0     A7 12 02 FB | 	rdlong	arg01, fp
04cc4     24 4E 85 F1 | 	sub	fp, #36
04cc8     14 12 06 F1 | 	add	arg01, #20
04ccc     1E 14 CE F9 | 	bmask	arg02, #30
04cd0     01 16 06 F6 | 	mov	arg03, #1
04cd4     00 18 06 F6 | 	mov	arg04, #0
04cd8     0B 00 00 FF 
04cdc     C0 E4 05 F1 | 	add	objptr, ##5824
04ce0                 | '     return fill(addr, pattern, count, listPtr, 4)
04ce0     04 1A 06 F6 | 	mov	arg05, #4
04ce4     14 36 B1 FD | 	call	#_psram_spin2_fill
04ce8     24 4E 05 F1 | 	add	fp, #36
04cec     A7 1E 02 FB | 	rdlong	local01, fp
04cf0     5D 00 00 FF 
04cf4     A0 E5 05 F1 | 	add	objptr, ##48032
04cf8     F2 1E 62 FC | 	wrlong	local01, objptr
04cfc     69 00 00 FF 
04d00     60 E4 85 F1 | 	sub	objptr, ##53856
04d04     A7 12 02 FB | 	rdlong	arg01, fp
04d08     24 4E 85 F1 | 	sub	fp, #36
04d0c     3C 0C B1 FD | 	call	#_pslpeek
04d10     69 00 00 FF 
04d14     5C E4 05 F1 | 	add	objptr, ##53852
04d18     F2 FA 61 FC | 	wrlong	result1, objptr
04d1c     69 00 00 FF 
04d20     5C E4 85 F1 | 	sub	objptr, ##53852
04d24                 | '   pslpoke(header(4)+20,$7FFF_FFFF) ' unlink the previous line
04d24                 | '   lastlineptr=header(4)            ' keep last line pointer to avoid searching while sequentially adding a new line
04d24                 | '   lastline=pslpeek(header(4))
04d24                 | '   return 0
04d24     00 FA 05 F6 | 	mov	result1, #0
04d28     C0 01 90 FD | 	jmp	#LR__0386
04d2c                 | LR__0382
04d2c                 | ' 
04d2c                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is the first line, but not the last
04d2c     28 4E 05 F1 | 	add	fp, #40
04d30     A7 1E 02 FB | 	rdlong	local01, fp
04d34     28 4E 85 F1 | 	sub	fp, #40
04d38     FF FF 3F FF 
04d3c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
04d40     6C 00 90 AD |  if_e	jmp	#LR__0383
04d44     24 4E 05 F1 | 	add	fp, #36
04d48     A7 22 02 FB | 	rdlong	local03, fp
04d4c     24 4E 85 F1 | 	sub	fp, #36
04d50     FF FF 7F FF 
04d54     FF 23 0E F2 | 	cmp	local03, ##-1 wz
04d58     54 00 90 5D |  if_ne	jmp	#LR__0383
04d5c     28 4E 05 F1 | 	add	fp, #40
04d60     A7 12 02 FB | 	rdlong	arg01, fp
04d64     28 4E 85 F1 | 	sub	fp, #40
04d68     10 12 06 F1 | 	add	arg01, #16
04d6c     01 14 66 F6 | 	neg	arg02, #1
04d70     01 16 06 F6 | 	mov	arg03, #1
04d74     00 18 06 F6 | 	mov	arg04, #0
04d78     0B 00 00 FF 
04d7c     C0 E4 05 F1 | 	add	objptr, ##5824
04d80                 | '     return fill(addr, pattern, count, listPtr, 4)
04d80     04 1A 06 F6 | 	mov	arg05, #4
04d84     74 35 B1 FD | 	call	#_psram_spin2_fill
04d88     28 4E 05 F1 | 	add	fp, #40
04d8c     A7 1E 02 FB | 	rdlong	local01, fp
04d90     28 4E 85 F1 | 	sub	fp, #40
04d94     5D 00 00 FF 
04d98     98 E5 05 F1 | 	add	objptr, ##48024
04d9c     F2 1E 62 FC | 	wrlong	local01, objptr
04da0     69 00 00 FF 
04da4     58 E4 85 F1 | 	sub	objptr, ##53848
04da8                 | ' '   print "deleted first line"
04da8                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
04da8                 | '   programstart=header(5) ' adjust the program start to point on the first new line
04da8                 | '   return 0
04da8     00 FA 05 F6 | 	mov	result1, #0
04dac     3C 01 90 FD | 	jmp	#LR__0386
04db0                 | LR__0383
04db0                 | ' 
04db0                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' the line is not first and not last
04db0     28 4E 05 F1 | 	add	fp, #40
04db4     A7 1E 02 FB | 	rdlong	local01, fp
04db8     28 4E 85 F1 | 	sub	fp, #40
04dbc     FF FF 3F FF 
04dc0     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
04dc4     24 4E 05 51 |  if_ne	add	fp, #36
04dc8     A7 22 02 5B |  if_ne	rdlong	local03, fp
04dcc     24 4E 85 51 |  if_ne	sub	fp, #36
04dd0     FF FF 7F 5F 
04dd4     FF 23 0E 52 |  if_ne	cmp	local03, ##-1 wz
04dd8     68 00 90 AD |  if_e	jmp	#LR__0384
04ddc     28 4E 05 F1 | 	add	fp, #40
04de0     A7 12 02 FB | 	rdlong	arg01, fp
04de4     10 12 06 F1 | 	add	arg01, #16
04de8     04 4E 85 F1 | 	sub	fp, #4
04dec     A7 14 02 FB | 	rdlong	arg02, fp
04df0     24 4E 85 F1 | 	sub	fp, #36
04df4     01 16 06 F6 | 	mov	arg03, #1
04df8     00 18 06 F6 | 	mov	arg04, #0
04dfc     0B 00 00 FF 
04e00     C0 E4 05 F1 | 	add	objptr, ##5824
04e04                 | '     return fill(addr, pattern, count, listPtr, 4)
04e04     04 1A 06 F6 | 	mov	arg05, #4
04e08     F0 34 B1 FD | 	call	#_psram_spin2_fill
04e0c     24 4E 05 F1 | 	add	fp, #36
04e10     A7 12 02 FB | 	rdlong	arg01, fp
04e14     14 12 06 F1 | 	add	arg01, #20
04e18     04 4E 05 F1 | 	add	fp, #4
04e1c     A7 14 02 FB | 	rdlong	arg02, fp
04e20     28 4E 85 F1 | 	sub	fp, #40
04e24     01 16 06 F6 | 	mov	arg03, #1
04e28     00 18 06 F6 | 	mov	arg04, #0
04e2c                 | '     return fill(addr, pattern, count, listPtr, 4)
04e2c     04 1A 06 F6 | 	mov	arg05, #4
04e30     C8 34 B1 FD | 	call	#_psram_spin2_fill
04e34     0B 00 00 FF 
04e38     C0 E4 85 F1 | 	sub	objptr, ##5824
04e3c                 | '    pslpoke(header(5)+16,header(4))  
04e3c                 | '    pslpoke(header(4)+20, header(5))
04e3c                 | '    return 0
04e3c     00 FA 05 F6 | 	mov	result1, #0
04e40     A8 00 90 FD | 	jmp	#LR__0386
04e44                 | LR__0384
04e44     10 4E 05 F1 | 	add	fp, #16
04e48     A7 1E 02 FB | 	rdlong	local01, fp
04e4c     08 4E 85 F1 | 	sub	fp, #8
04e50     A7 1E 62 FC | 	wrlong	local01, fp
04e54     69 00 00 FF 
04e58     58 E4 05 F1 | 	add	objptr, ##53848
04e5c     F2 1E 02 FB | 	rdlong	local01, objptr
04e60     08 4E 05 F1 | 	add	fp, #8
04e64     A7 1E 62 FC | 	wrlong	local01, fp
04e68     10 4E 85 F1 | 	sub	fp, #16
04e6c                 | ' 
04e6c                 | ' 
04e6c                 | ' 
04e6c                 | ' ' now find if the deleted line was a target for goto and replace fast_goto with find_goto
04e6c                 | ' 
04e6c                 | ' lineptr2=searchptr
04e6c                 | ' searchptr=programstart
04e6c                 | ' 
04e6c                 | ' do
04e6c     5D 00 00 FF 
04e70     98 E5 85 F1 | 	sub	objptr, ##48024
04e74                 | LR__0385
04e74     14 4E 05 F1 | 	add	fp, #20
04e78     A7 12 02 F6 | 	mov	arg01, fp
04e7c     04 4E 85 F1 | 	sub	fp, #4
04e80     A7 14 02 FB | 	rdlong	arg02, fp
04e84     10 4E 85 F1 | 	sub	fp, #16
04e88     18 16 06 F6 | 	mov	arg03, #24
04e8c     34 33 B1 FD | 	call	#_psram_spin2_read1
04e90     10 4E 05 F1 | 	add	fp, #16
04e94     A7 1E 02 FB | 	rdlong	local01, fp
04e98     08 4E 85 F1 | 	sub	fp, #8
04e9c     A7 1E 62 FC | 	wrlong	local01, fp
04ea0     20 4E 05 F1 | 	add	fp, #32
04ea4     A7 1E 02 FB | 	rdlong	local01, fp
04ea8     18 4E 85 F1 | 	sub	fp, #24
04eac     A7 1E 62 FC | 	wrlong	local01, fp
04eb0     04 4E 05 F1 | 	add	fp, #4
04eb4     A7 1E 02 FB | 	rdlong	local01, fp
04eb8     10 4E 85 F1 | 	sub	fp, #16
04ebc     A7 22 02 FB | 	rdlong	local03, fp
04ec0     04 4E 85 F1 | 	sub	fp, #4
04ec4     11 1F 12 F2 | 	cmp	local01, local03 wc
04ec8     28 4E 05 C1 |  if_b	add	fp, #40
04ecc     A7 20 02 CB |  if_b	rdlong	local02, fp
04ed0     28 4E 85 C1 |  if_b	sub	fp, #40
04ed4     FF FF 3F CF 
04ed8     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
04edc     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0385
04ee0     0B 00 00 FF 
04ee4     C0 E4 85 F1 | 	sub	objptr, ##5824
04ee8     00 FA 05 F6 | 	mov	result1, #0
04eec                 | LR__0386
04eec     A7 F0 03 F6 | 	mov	ptra, fp
04ef0     B2 00 A0 FD | 	call	#popregs_
04ef4                 | _deleteline_ret
04ef4     2D 00 64 FD | 	ret
04ef8                 | 
04ef8                 | ' 
04ef8                 | ' sub save_line
04ef8                 | _save_line
04ef8     03 4A 05 F6 | 	mov	COUNT_, #3
04efc     A8 00 A0 FD | 	call	#pushregs_
04f00     69 00 00 FF 
04f04     50 E4 05 F1 | 	add	objptr, ##53840
04f08     F2 16 02 FB | 	rdlong	arg03, objptr
04f0c     01 16 06 F1 | 	add	arg03, #1
04f10     05 00 00 FF 
04f14     18 E4 85 F1 | 	sub	objptr, ##2584
04f18     F2 14 02 FB | 	rdlong	arg02, objptr
04f1c     0B 15 02 FD | 	qmul	arg02, arg03
04f20     0E 00 00 FF 
04f24     44 E4 85 F1 | 	sub	objptr, ##7236
04f28     F2 12 02 FB | 	rdlong	arg01, objptr
04f2c     55 00 00 FF 
04f30     F4 E5 85 F1 | 	sub	objptr, ##44020
04f34     09 1F 02 F6 | 	mov	local01, arg01
04f38     18 20 62 FD | 	getqx	local02
04f3c     97 06 48 FB | 	callpa	#(@LR__0391-@LR__0390)>>2,fcache_load_ptr_
04f40                 | LR__0390
04f40     0F FB C9 FA | 	rdbyte	result1, local01 wz
04f44     01 1E 06 51 |  if_ne	add	local01, #1
04f48     F4 FF 9F 5D |  if_ne	jmp	#LR__0390
04f4c                 | LR__0391
04f4c     09 1F 82 F1 | 	sub	local01, arg01
04f50     03 1E CE F7 | 	test	local01, #3 wz
04f54     02 1E 46 50 |  if_ne	shr	local01, #2
04f58     01 1E 06 51 |  if_ne	add	local01, #1
04f5c     02 1E 66 50 |  if_ne	shl	local01, #2
04f60     10 23 02 F6 | 	mov	local03, local02
04f64     0F 23 02 F1 | 	add	local03, local01
04f68     62 00 00 FF 
04f6c     30 E4 05 F1 | 	add	objptr, ##50224
04f70     F2 16 02 FB | 	rdlong	arg03, objptr
04f74     10 17 02 F1 | 	add	arg03, local02
04f78     04 00 00 FF 
04f7c     28 E4 05 F1 | 	add	objptr, ##2088
04f80     F2 16 62 FC | 	wrlong	arg03, objptr
04f84     04 E4 05 F1 | 	add	objptr, #4
04f88     F2 1E 62 FC | 	wrlong	local01, objptr
04f8c     0C E4 85 F1 | 	sub	objptr, #12
04f90     F2 12 02 F6 | 	mov	arg01, objptr
04f94     04 00 00 FF 
04f98     20 E4 85 F1 | 	sub	objptr, ##2080
04f9c     F2 14 02 FB | 	rdlong	arg02, objptr
04fa0     10 17 02 F6 | 	mov	arg03, local02
04fa4     56 00 00 FF 
04fa8     70 E5 85 F1 | 	sub	objptr, ##44400
04fac     B0 32 B1 FD | 	call	#_psram_spin2_write
04fb0     4A 00 00 FF 
04fb4     34 E5 05 F1 | 	add	objptr, ##38196
04fb8     F2 12 02 FB | 	rdlong	arg01, objptr
04fbc     0C 00 00 FF 
04fc0     3C E4 05 F1 | 	add	objptr, ##6204
04fc4     F2 14 02 FB | 	rdlong	arg02, objptr
04fc8     10 15 02 F1 | 	add	arg02, local02
04fcc     0F 17 02 F6 | 	mov	arg03, local01
04fd0     56 00 00 FF 
04fd4     70 E5 85 F1 | 	sub	objptr, ##44400
04fd8     84 32 B1 FD | 	call	#_psram_spin2_write
04fdc     56 00 00 FF 
04fe0     70 E5 05 F1 | 	add	objptr, ##44400
04fe4     F2 1E 02 FB | 	rdlong	local01, objptr
04fe8     11 1F 02 F1 | 	add	local01, local03
04fec     F2 1E 62 FC | 	wrlong	local01, objptr
04ff0     62 00 00 FF 
04ff4     30 E4 85 F1 | 	sub	objptr, ##50224
04ff8     A7 F0 03 F6 | 	mov	ptra, fp
04ffc     B2 00 A0 FD | 	call	#popregs_
05000                 | _save_line_ret
05000     2D 00 64 FD | 	ret
05004                 | 
05004                 | ' 
05004                 | ' 
05004                 | ' function insertline(aline as ulong) as integer
05004                 | _insertline
05004     02 4A 05 F6 | 	mov	COUNT_, #2
05008     A8 00 A0 FD | 	call	#pushregs_
0500c     28 F0 07 F1 | 	add	ptra, #40
05010     04 4E 05 F1 | 	add	fp, #4
05014     A7 12 62 FC | 	wrlong	arg01, fp
05018     69 00 00 FF 
0501c     58 E4 05 F1 | 	add	objptr, ##53848
05020     F2 1E 02 FB | 	rdlong	local01, objptr
05024     04 4E 05 F1 | 	add	fp, #4
05028     A7 1E 62 FC | 	wrlong	local01, fp
0502c     08 4E 85 F1 | 	sub	fp, #8
05030                 | ' 
05030                 | ' do
05030     5D 00 00 FF 
05034     98 E5 85 F1 | 	sub	objptr, ##48024
05038                 | LR__0400
05038     10 4E 05 F1 | 	add	fp, #16
0503c     A7 12 02 F6 | 	mov	arg01, fp
05040     08 4E 85 F1 | 	sub	fp, #8
05044     A7 14 02 FB | 	rdlong	arg02, fp
05048     08 4E 85 F1 | 	sub	fp, #8
0504c     18 16 06 F6 | 	mov	arg03, #24
05050     70 31 B1 FD | 	call	#_psram_spin2_read1
05054     08 4E 05 F1 | 	add	fp, #8
05058     A7 1E 02 FB | 	rdlong	local01, fp
0505c     04 4E 05 F1 | 	add	fp, #4
05060     A7 1E 62 FC | 	wrlong	local01, fp
05064     18 4E 05 F1 | 	add	fp, #24
05068     A7 1E 02 FB | 	rdlong	local01, fp
0506c     1C 4E 85 F1 | 	sub	fp, #28
05070     A7 1E 62 FC | 	wrlong	local01, fp
05074     08 4E 05 F1 | 	add	fp, #8
05078     A7 1E 02 FB | 	rdlong	local01, fp
0507c     0C 4E 85 F1 | 	sub	fp, #12
05080     A7 16 02 FB | 	rdlong	arg03, fp
05084     04 4E 85 F1 | 	sub	fp, #4
05088     0B 1F 12 F2 | 	cmp	local01, arg03 wc
0508c     24 4E 05 C1 |  if_b	add	fp, #36
05090     A7 20 02 CB |  if_b	rdlong	local02, fp
05094     24 4E 85 C1 |  if_b	sub	fp, #36
05098     FF FF 3F CF 
0509c     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
050a0     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0400
050a4     0B 00 00 FF 
050a8     C0 E4 85 F1 | 	sub	objptr, ##5824
050ac                 | ' 
050ac                 | ' if header(0)=aline then return -1 ' delete it first
050ac     10 4E 05 F1 | 	add	fp, #16
050b0     A7 1E 02 FB | 	rdlong	local01, fp
050b4     0C 4E 85 F1 | 	sub	fp, #12
050b8     A7 20 02 FB | 	rdlong	local02, fp
050bc     04 4E 85 F1 | 	sub	fp, #4
050c0     10 1F 0A F2 | 	cmp	local01, local02 wz
050c4     01 FA 65 A6 |  if_e	neg	result1, #1
050c8     74 01 90 AD |  if_e	jmp	#LR__0403
050cc                 | ' if header(0)<aline then return -2 ' end of program reached
050cc     10 4E 05 F1 | 	add	fp, #16
050d0     A7 1E 02 FB | 	rdlong	local01, fp
050d4     0C 4E 85 F1 | 	sub	fp, #12
050d8     A7 16 02 FB | 	rdlong	arg03, fp
050dc     04 4E 85 F1 | 	sub	fp, #4
050e0     0B 1F 12 F2 | 	cmp	local01, arg03 wc
050e4     02 FA 65 C6 |  if_b	neg	result1, #2
050e8     54 01 90 CD |  if_b	jmp	#LR__0403
050ec                 | ' 
050ec                 | ' if  header(4)=$FFFF_FFFF then ' this is one first line in the program so the inserted line will be new first
050ec     20 4E 05 F1 | 	add	fp, #32
050f0     A7 1E 02 FB | 	rdlong	local01, fp
050f4     20 4E 85 F1 | 	sub	fp, #32
050f8     FF FF 7F FF 
050fc     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
05100     84 00 90 5D |  if_ne	jmp	#LR__0401
05104     62 00 00 FF 
05108     30 E4 05 F1 | 	add	objptr, ##50224
0510c     F2 1E 02 FB | 	rdlong	local01, objptr
05110     07 00 00 FF 
05114     28 E4 05 F1 | 	add	objptr, ##3624
05118     F2 1E 62 FC | 	wrlong	local01, objptr
0511c     0C 4E 05 F1 | 	add	fp, #12
05120     A7 12 02 FB | 	rdlong	arg01, fp
05124     0C 4E 85 F1 | 	sub	fp, #12
05128     10 12 06 F1 | 	add	arg01, #16
0512c     07 00 00 FF 
05130     28 E4 85 F1 | 	sub	objptr, ##3624
05134     F2 14 02 FB | 	rdlong	arg02, objptr
05138     01 16 06 F6 | 	mov	arg03, #1
0513c     00 18 06 F6 | 	mov	arg04, #0
05140     56 00 00 FF 
05144     70 E5 85 F1 | 	sub	objptr, ##44400
05148                 | '     return fill(addr, pattern, count, listPtr, 4)
05148     04 1A 06 F6 | 	mov	arg05, #4
0514c     AC 31 B1 FD | 	call	#_psram_spin2_fill
05150     5A 00 00 FF 
05154     A0 E5 05 F1 | 	add	objptr, ##46496
05158     FF FF FF FF 
0515c     F2 FE 6B FC | 	wrlong	##-1, objptr
05160     0C 4E 05 F1 | 	add	fp, #12
05164     A7 1E 02 FB | 	rdlong	local01, fp
05168     0C 4E 85 F1 | 	sub	fp, #12
0516c     04 E4 05 F1 | 	add	objptr, #4
05170     F2 1E 62 FC | 	wrlong	local01, objptr
05174     66 00 00 FF 
05178     64 E4 85 F1 | 	sub	objptr, ##52324
0517c     78 FD BF FD | 	call	#_save_line
05180                 | '   programstart=programptr
05180                 | '   pslpoke(lineptr2+16,programptr)
05180                 | '   ucompiledline(4)=$FFFF_FFFF
05180                 | '   ucompiledline(5)=lineptr2
05180                 | '   save_line
05180                 | '   return 0
05180     00 FA 05 F6 | 	mov	result1, #0
05184     B8 00 90 FD | 	jmp	#LR__0403
05188                 | LR__0401
05188                 | ' 
05188                 | ' if header(4)<>$FFFF_FFFF then ' this is not first line of the program. It doesn't matter if it is last as we will insert it before
05188     20 4E 05 F1 | 	add	fp, #32
0518c     A7 1E 02 FB | 	rdlong	local01, fp
05190     20 4E 85 F1 | 	sub	fp, #32
05194     FF FF 7F FF 
05198     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
0519c     9C 00 90 AD |  if_e	jmp	#LR__0402
051a0     20 4E 05 F1 | 	add	fp, #32
051a4     A7 1E 02 FB | 	rdlong	local01, fp
051a8     66 00 00 FF 
051ac     60 E4 05 F1 | 	add	objptr, ##52320
051b0     F2 1E 62 FC | 	wrlong	local01, objptr
051b4     14 4E 85 F1 | 	sub	fp, #20
051b8     A7 1E 02 FB | 	rdlong	local01, fp
051bc     04 E4 05 F1 | 	add	objptr, #4
051c0     F2 1E 62 FC | 	wrlong	local01, objptr
051c4     A7 12 02 FB | 	rdlong	arg01, fp
051c8     0C 4E 85 F1 | 	sub	fp, #12
051cc     10 12 06 F1 | 	add	arg01, #16
051d0     04 00 00 FF 
051d4     34 E4 85 F1 | 	sub	objptr, ##2100
051d8     F2 14 02 FB | 	rdlong	arg02, objptr
051dc     01 16 06 F6 | 	mov	arg03, #1
051e0     00 18 06 F6 | 	mov	arg04, #0
051e4     56 00 00 FF 
051e8     70 E5 85 F1 | 	sub	objptr, ##44400
051ec                 | '     return fill(addr, pattern, count, listPtr, 4)
051ec     04 1A 06 F6 | 	mov	arg05, #4
051f0     08 31 B1 FD | 	call	#_psram_spin2_fill
051f4     20 4E 05 F1 | 	add	fp, #32
051f8     A7 12 02 FB | 	rdlong	arg01, fp
051fc     20 4E 85 F1 | 	sub	fp, #32
05200     14 12 06 F1 | 	add	arg01, #20
05204     56 00 00 FF 
05208     70 E5 05 F1 | 	add	objptr, ##44400
0520c     F2 14 02 FB | 	rdlong	arg02, objptr
05210     01 16 06 F6 | 	mov	arg03, #1
05214     00 18 06 F6 | 	mov	arg04, #0
05218     56 00 00 FF 
0521c     70 E5 85 F1 | 	sub	objptr, ##44400
05220                 | '     return fill(addr, pattern, count, listPtr, 4)
05220     04 1A 06 F6 | 	mov	arg05, #4
05224     D4 30 B1 FD | 	call	#_psram_spin2_fill
05228     0B 00 00 FF 
0522c     C0 E4 85 F1 | 	sub	objptr, ##5824
05230     C4 FC BF FD | 	call	#_save_line
05234                 | '   ucompiledline(4)=header(4)
05234                 | '   ucompiledline(5)=lineptr2
05234                 | '   pslpoke(lineptr2+16,programptr)
05234                 | '   pslpoke(header(4)+20,programptr)
05234                 | '   save_line
05234                 | '   return 0
05234     00 FA 05 F6 | 	mov	result1, #0
05238     04 00 90 FD | 	jmp	#LR__0403
0523c                 | LR__0402
0523c     00 FA 05 F6 | 	mov	result1, #0
05240                 | LR__0403
05240     A7 F0 03 F6 | 	mov	ptra, fp
05244     B2 00 A0 FD | 	call	#popregs_
05248                 | _insertline_ret
05248     2D 00 64 FD | 	ret
0524c                 | 
0524c                 | ' 
0524c                 | ' sub add_line_at_end(aline) 
0524c                 | _add_line_at_end
0524c     69 00 00 FF 
05250     5C E4 05 F1 | 	add	objptr, ##53852
05254     F2 12 62 FC | 	wrlong	arg01, objptr
05258     04 E4 05 F1 | 	add	objptr, #4
0525c     F2 14 02 FB | 	rdlong	arg02, objptr
05260     03 00 00 FF 
05264     00 E4 85 F1 | 	sub	objptr, ##1536
05268     F2 14 62 FC | 	wrlong	arg02, objptr
0526c     03 00 00 FF 
05270     00 E4 05 F1 | 	add	objptr, ##1536
05274     F2 12 02 FB | 	rdlong	arg01, objptr
05278     14 12 06 F1 | 	add	arg01, #20
0527c     07 00 00 FF 
05280     30 E4 85 F1 | 	sub	objptr, ##3632
05284     F2 14 02 FB | 	rdlong	arg02, objptr
05288     01 16 06 F6 | 	mov	arg03, #1
0528c     00 18 06 F6 | 	mov	arg04, #0
05290     56 00 00 FF 
05294     70 E5 85 F1 | 	sub	objptr, ##44400
05298                 | '     return fill(addr, pattern, count, listPtr, 4)
05298     04 1A 06 F6 | 	mov	arg05, #4
0529c     5C 30 B1 FD | 	call	#_psram_spin2_fill
052a0     56 00 00 FF 
052a4     70 E5 05 F1 | 	add	objptr, ##44400
052a8     F2 14 02 FB | 	rdlong	arg02, objptr
052ac     07 00 00 FF 
052b0     30 E4 05 F1 | 	add	objptr, ##3632
052b4     F2 14 62 FC | 	wrlong	arg02, objptr
052b8     02 00 00 FF 
052bc     FC E5 85 F1 | 	sub	objptr, ##1532
052c0     FF FF BF FF 
052c4     F2 FE 6B FC | 	wrlong	##2147483647, objptr
052c8                 | ' 
052c8                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
052c8                 | ' if programptr=0 then ucompiledline(4)=$FFFFFFFF ' that is the first line
052c8     04 00 00 FF 
052cc     34 E4 85 F1 | 	sub	objptr, ##2100
052d0     F2 14 0A FB | 	rdlong	arg02, objptr wz
052d4     62 00 00 FF 
052d8     30 E4 85 F1 | 	sub	objptr, ##50224
052dc     66 00 00 AF 
052e0     60 E4 05 A1 |  if_e	add	objptr, ##52320
052e4     FF FF FF AF 
052e8     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
052ec     66 00 00 AF 
052f0     60 E4 85 A1 |  if_e	sub	objptr, ##52320
052f4     00 FC BF FD | 	call	#_save_line
052f8     62 00 00 FF 
052fc     30 E4 05 F1 | 	add	objptr, ##50224
05300     F2 12 02 FB | 	rdlong	arg01, objptr
05304     01 14 66 F6 | 	neg	arg02, #1
05308     01 16 06 F6 | 	mov	arg03, #1
0530c     00 18 06 F6 | 	mov	arg04, #0
05310     56 00 00 FF 
05314     70 E5 85 F1 | 	sub	objptr, ##44400
05318                 | '     return fill(addr, pattern, count, listPtr, 4)
05318     04 1A 06 F6 | 	mov	arg05, #4
0531c     DC 2F B1 FD | 	call	#_psram_spin2_fill
05320     0B 00 00 FF 
05324     C0 E4 85 F1 | 	sub	objptr, ##5824
05328                 | _add_line_at_end_ret
05328     2D 00 64 FD | 	ret
0532c                 | 
0532c                 | ' 
0532c                 | ' function compile_immediate(linetype as ulong) as integer
0532c                 | _compile_immediate
0532c     09 4A 05 F6 | 	mov	COUNT_, #9
05330     A8 00 A0 FD | 	call	#pushregs_
05334                 | _compile_immediate_enter
05334     09 25 0A F6 | 	mov	local04, arg01 wz
05338     00 26 06 F6 | 	mov	local05, #0
0533c     00 28 06 F6 | 	mov	local06, #0
05340                 | ' 
05340                 | ' ' linetype=cont+1, linetype=0 immediate
05340                 | ' '  : 1: this is the first part of the line that will continue
05340                 | ' ' 2 - this is the continuation of the line
05340                 | ' ' 3 - this is the last continued line
05340                 | ' ' 4 - this is the one and only part
05340                 | ' 
05340                 | ' err=0
05340                 | ' cmd=0
05340                 | ' if linetype=0 then cmd=lparts(0).token : ct=1 : lineptr=0 
05340     2C 00 90 5D |  if_ne	jmp	#LR__0410
05344     53 00 00 FF 
05348     E4 E5 05 F1 | 	add	objptr, ##42980
0534c     F2 28 02 FB | 	rdlong	local06, objptr
05350     02 00 00 FF 
05354     34 E4 05 F1 | 	add	objptr, ##1076
05358     F2 02 68 FC | 	wrlong	#1, objptr
0535c     13 00 00 FF 
05360     38 E4 05 F1 | 	add	objptr, ##9784
05364     F2 00 68 FC | 	wrlong	#0, objptr
05368     69 00 00 FF 
0536c     50 E4 85 F1 | 	sub	objptr, ##53840
05370                 | LR__0410
05370                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 ' don't set lineptr
05370     02 24 0E F2 | 	cmp	local04, #2 wz
05374     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
05378     53 00 00 AF 
0537c     E4 E5 05 A1 |  if_e	add	objptr, ##42980
05380     F2 28 02 AB |  if_e	rdlong	local06, objptr
05384     02 00 00 AF 
05388     34 E4 05 A1 |  if_e	add	objptr, ##1076
0538c     F2 02 68 AC |  if_e	wrlong	#1, objptr
05390     56 00 00 AF 
05394     18 E4 85 A1 |  if_e	sub	objptr, ##44056
05398                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
05398     04 24 0E F2 | 	cmp	local04, #4 wz
0539c     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
053a0     2C 00 90 5D |  if_ne	jmp	#LR__0411
053a4     53 00 00 FF 
053a8     EC E5 05 F1 | 	add	objptr, ##42988
053ac     F2 28 02 FB | 	rdlong	local06, objptr
053b0     02 00 00 FF 
053b4     2C E4 05 F1 | 	add	objptr, ##1068
053b8     F2 04 68 FC | 	wrlong	#2, objptr
053bc     13 00 00 FF 
053c0     38 E4 05 F1 | 	add	objptr, ##9784
053c4     F2 04 68 FC | 	wrlong	#2, objptr
053c8     69 00 00 FF 
053cc     50 E4 85 F1 | 	sub	objptr, ##53840
053d0                 | LR__0411
053d0                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 ' continued after if/else
053d0     05 24 0E F2 | 	cmp	local04, #5 wz
053d4     40 00 90 5D |  if_ne	jmp	#LR__0412
053d8     56 00 00 FF 
053dc     18 E4 05 F1 | 	add	objptr, ##44056
053e0     F2 2A 02 FB | 	rdlong	local07, objptr
053e4     15 29 02 F6 | 	mov	local06, local07
053e8     03 28 66 F0 | 	shl	local06, #3
053ec     02 00 00 FF 
053f0     38 E4 85 F1 | 	sub	objptr, ##1080
053f4     F2 28 02 F1 | 	add	local06, objptr
053f8     04 28 06 F1 | 	add	local06, #4
053fc     14 29 02 FB | 	rdlong	local06, local06
05400     01 2A 06 F1 | 	add	local07, #1
05404     02 00 00 FF 
05408     38 E4 05 F1 | 	add	objptr, ##1080
0540c     F2 2A 62 FC | 	wrlong	local07, objptr
05410     56 00 00 FF 
05414     18 E4 85 F1 | 	sub	objptr, ##44056
05418                 | LR__0412
05418     00 2C 06 F6 | 	mov	local08, #0
0541c                 | ' vars=0
0541c                 | ' 'print  "In compile_immediate cmd=:", cmd
0541c                 | ' 451 select case cmd
0541c     40 28 0E F2 | 	cmp	local06, #64 wz
05420     41 28 0E 52 |  if_ne	cmp	local06, #65 wz
05424     64 03 90 AD |  if_e	jmp	#LR__0461
05428     4C 28 0E F2 | 	cmp	local06, #76 wz
0542c     98 01 90 AD |  if_e	jmp	#LR__0413
05430     73 28 0E F2 | 	cmp	local06, #115 wz
05434     9C 01 90 AD |  if_e	jmp	#LR__0414
05438     74 28 0E F2 | 	cmp	local06, #116 wz
0543c     A0 01 90 AD |  if_e	jmp	#LR__0415
05440     75 28 0E F2 | 	cmp	local06, #117 wz
05444     A4 01 90 AD |  if_e	jmp	#LR__0416
05448     4D 28 0E F2 | 	cmp	local06, #77 wz
0544c     3C 03 90 AD |  if_e	jmp	#LR__0461
05450     42 28 0E F2 | 	cmp	local06, #66 wz
05454     A0 01 90 AD |  if_e	jmp	#LR__0417
05458     43 28 0E F2 | 	cmp	local06, #67 wz
0545c     A4 01 90 AD |  if_e	jmp	#LR__0418
05460     45 28 0E F2 | 	cmp	local06, #69 wz
05464     A8 01 90 AD |  if_e	jmp	#LR__0419
05468     46 28 0E F2 | 	cmp	local06, #70 wz
0546c     AC 01 90 AD |  if_e	jmp	#LR__0420
05470     47 28 0E F2 | 	cmp	local06, #71 wz
05474     B0 01 90 AD |  if_e	jmp	#LR__0421
05478     48 28 0E F2 | 	cmp	local06, #72 wz
0547c     B4 01 90 AD |  if_e	jmp	#LR__0422
05480     49 28 0E F2 | 	cmp	local06, #73 wz
05484     B8 01 90 AD |  if_e	jmp	#LR__0423
05488     44 28 0E F2 | 	cmp	local06, #68 wz
0548c     BC 01 90 AD |  if_e	jmp	#LR__0424
05490     4E 28 0E F2 | 	cmp	local06, #78 wz
05494     C0 01 90 AD |  if_e	jmp	#LR__0425
05498     50 28 0E F2 | 	cmp	local06, #80 wz
0549c     D4 01 90 AD |  if_e	jmp	#LR__0427
054a0     51 28 0E F2 | 	cmp	local06, #81 wz
054a4     D4 01 90 AD |  if_e	jmp	#LR__0428
054a8     52 28 0E F2 | 	cmp	local06, #82 wz
054ac     D4 01 90 AD |  if_e	jmp	#LR__0429
054b0     59 28 0E F2 | 	cmp	local06, #89 wz
054b4     D4 01 90 AD |  if_e	jmp	#LR__0430
054b8     55 28 0E F2 | 	cmp	local06, #85 wz
054bc     D4 01 90 AD |  if_e	jmp	#LR__0431
054c0     56 28 0E F2 | 	cmp	local06, #86 wz
054c4     D4 01 90 AD |  if_e	jmp	#LR__0432
054c8     57 28 0E F2 | 	cmp	local06, #87 wz
054cc     70 28 0E 52 |  if_ne	cmp	local06, #112 wz
054d0     B8 02 90 AD |  if_e	jmp	#LR__0461
054d4     58 28 0E F2 | 	cmp	local06, #88 wz
054d8     C8 01 90 AD |  if_e	jmp	#LR__0433
054dc     4A 28 0E F2 | 	cmp	local06, #74 wz
054e0     C8 01 90 AD |  if_e	jmp	#LR__0434
054e4     4B 28 0E F2 | 	cmp	local06, #75 wz
054e8     C8 01 90 AD |  if_e	jmp	#LR__0435
054ec     89 28 0E F2 | 	cmp	local06, #137 wz
054f0     88 28 0E 52 |  if_ne	cmp	local06, #136 wz
054f4     94 02 90 AD |  if_e	jmp	#LR__0461
054f8     8A 28 0E F2 | 	cmp	local06, #138 wz
054fc     BC 01 90 AD |  if_e	jmp	#LR__0436
05500     5A 28 0E F2 | 	cmp	local06, #90 wz
05504     C0 01 90 AD |  if_e	jmp	#LR__0437
05508     5C 28 0E F2 | 	cmp	local06, #92 wz
0550c     C0 01 90 AD |  if_e	jmp	#LR__0438
05510     5D 28 0E F2 | 	cmp	local06, #93 wz
05514     74 02 90 AD |  if_e	jmp	#LR__0461
05518     5E 28 0E F2 | 	cmp	local06, #94 wz
0551c     BC 01 90 AD |  if_e	jmp	#LR__0439
05520     5F 28 0E F2 | 	cmp	local06, #95 wz
05524     BC 01 90 AD |  if_e	jmp	#LR__0440
05528     60 28 0E F2 | 	cmp	local06, #96 wz
0552c     BC 01 90 AD |  if_e	jmp	#LR__0441
05530     61 28 0E F2 | 	cmp	local06, #97 wz
05534     BC 01 90 AD |  if_e	jmp	#LR__0442
05538     63 28 0E F2 | 	cmp	local06, #99 wz
0553c     BC 01 90 AD |  if_e	jmp	#LR__0443
05540     68 28 0E F2 | 	cmp	local06, #104 wz
05544     BC 01 90 AD |  if_e	jmp	#LR__0444
05548     69 28 0E F2 | 	cmp	local06, #105 wz
0554c     BC 01 90 AD |  if_e	jmp	#LR__0445
05550     6D 28 0E F2 | 	cmp	local06, #109 wz
05554     BC 01 90 AD |  if_e	jmp	#LR__0446
05558     6C 28 0E F2 | 	cmp	local06, #108 wz
0555c     BC 01 90 AD |  if_e	jmp	#LR__0447
05560     71 28 0E F2 | 	cmp	local06, #113 wz
05564     BC 01 90 AD |  if_e	jmp	#LR__0448
05568     79 28 0E F2 | 	cmp	local06, #121 wz
0556c     BC 01 90 AD |  if_e	jmp	#LR__0449
05570     77 28 0E F2 | 	cmp	local06, #119 wz
05574     BC 01 90 AD |  if_e	jmp	#LR__0450
05578     78 28 0E F2 | 	cmp	local06, #120 wz
0557c     BC 01 90 AD |  if_e	jmp	#LR__0451
05580     7C 28 0E F2 | 	cmp	local06, #124 wz
05584     BC 01 90 AD |  if_e	jmp	#LR__0452
05588     7D 28 0E F2 | 	cmp	local06, #125 wz
0558c     BC 01 90 AD |  if_e	jmp	#LR__0453
05590     7E 28 0E F2 | 	cmp	local06, #126 wz
05594     BC 01 90 AD |  if_e	jmp	#LR__0454
05598     7F 28 0E F2 | 	cmp	local06, #127 wz
0559c     BC 01 90 AD |  if_e	jmp	#LR__0455
055a0     80 28 0E F2 | 	cmp	local06, #128 wz
055a4     BC 01 90 AD |  if_e	jmp	#LR__0456
055a8     72 28 0E F2 | 	cmp	local06, #114 wz
055ac     BC 01 90 AD |  if_e	jmp	#LR__0457
055b0     81 28 0E F2 | 	cmp	local06, #129 wz
055b4     BC 01 90 AD |  if_e	jmp	#LR__0458
055b8     01 00 00 FF 
055bc     04 28 0E F2 | 	cmp	local06, ##516 wz
055c0     B8 01 90 AD |  if_e	jmp	#LR__0459
055c4     BC 01 90 FD | 	jmp	#LR__0460
055c8                 | LR__0413
055c8     C0 0F B0 FD | 	call	#_compile_fun_varp
055cc     FD 2C 02 F6 | 	mov	local08, result1
055d0     B8 01 90 FD | 	jmp	#LR__0461
055d4                 | LR__0414
055d4     B4 0F B0 FD | 	call	#_compile_fun_varp
055d8     FD 2C 02 F6 | 	mov	local08, result1
055dc     AC 01 90 FD | 	jmp	#LR__0461
055e0                 | LR__0415
055e0     A8 0F B0 FD | 	call	#_compile_fun_varp
055e4     FD 2C 02 F6 | 	mov	local08, result1
055e8     A0 01 90 FD | 	jmp	#LR__0461
055ec                 | LR__0416
055ec     9C 0F B0 FD | 	call	#_compile_fun_varp
055f0     FD 2C 02 F6 | 	mov	local08, result1
055f4     94 01 90 FD | 	jmp	#LR__0461
055f8                 | LR__0417
055f8     B0 0B B0 FD | 	call	#_compile_fun_2p
055fc     FD 26 02 F6 | 	mov	local05, result1
05600     88 01 90 FD | 	jmp	#LR__0461
05604                 | LR__0418
05604     A4 0B B0 FD | 	call	#_compile_fun_2p
05608     FD 26 02 F6 | 	mov	local05, result1
0560c     7C 01 90 FD | 	jmp	#LR__0461
05610                 | LR__0419
05610     0C 0C B0 FD | 	call	#_compile_fun_3p
05614     FD 26 02 F6 | 	mov	local05, result1
05618     70 01 90 FD | 	jmp	#LR__0461
0561c                 | LR__0420
0561c     00 0C B0 FD | 	call	#_compile_fun_3p
05620     FD 26 02 F6 | 	mov	local05, result1
05624     64 01 90 FD | 	jmp	#LR__0461
05628                 | LR__0421
05628     C0 0C B0 FD | 	call	#_compile_fun_4p
0562c     FD 26 02 F6 | 	mov	local05, result1
05630     58 01 90 FD | 	jmp	#LR__0461
05634                 | LR__0422
05634     B4 0C B0 FD | 	call	#_compile_fun_4p
05638     FD 26 02 F6 | 	mov	local05, result1
0563c     4C 01 90 FD | 	jmp	#LR__0461
05640                 | LR__0423
05640     C8 2D B0 FD | 	call	#_expr
05644                 | ' 
05644                 | ' 
05644                 | ' expr()
05644                 | ' return 0
05644     00 26 06 F6 | 	mov	local05, #0
05648     40 01 90 FD | 	jmp	#LR__0461
0564c                 | LR__0424
0564c     68 10 B0 FD | 	call	#_compile_print
05650     FD 26 02 F6 | 	mov	local05, result1
05654     F0 01 90 FD | 	jmp	#LR__0462
05658                 | LR__0425
05658     01 24 16 F2 | 	cmp	local04, #1 wc
0565c     08 00 90 CD |  if_b	jmp	#LR__0426
05660     48 2A B0 FD | 	call	#_compile_goto
05664     E0 01 90 FD | 	jmp	#LR__0462
05668                 | LR__0426
05668     19 12 06 F6 | 	mov	arg01, #25
0566c     20 01 B1 FD | 	call	#_printerror
05670     D4 01 90 FD | 	jmp	#LR__0462
05674                 | LR__0427
05674     94 2D B0 FD | 	call	#_expr
05678                 | ' 
05678                 | ' 
05678                 | ' expr()
05678                 | ' return 0
05678     10 01 90 FD | 	jmp	#LR__0461
0567c                 | LR__0428
0567c     8C 2D B0 FD | 	call	#_expr
05680                 | ' 
05680                 | ' 
05680                 | ' expr()
05680                 | ' return 0
05680     08 01 90 FD | 	jmp	#LR__0461
05684                 | LR__0429
05684     84 2D B0 FD | 	call	#_expr
05688                 | ' 
05688                 | ' 
05688                 | ' expr()
05688                 | ' return 0
05688     00 01 90 FD | 	jmp	#LR__0461
0568c                 | LR__0430
0568c     7C 2D B0 FD | 	call	#_expr
05690                 | ' 
05690                 | ' 
05690                 | ' expr()
05690                 | ' return 0
05690     F8 00 90 FD | 	jmp	#LR__0461
05694                 | LR__0431
05694     A0 0F B0 FD | 	call	#_compile_int_fun_2p
05698     F0 00 90 FD | 	jmp	#LR__0461
0569c                 | LR__0432
0569c     24 0A B0 FD | 	call	#_compile_converttoint
056a0                 | ' return err
056a0     E8 00 90 FD | 	jmp	#LR__0461
056a4                 | LR__0433
056a4     E8 16 B0 FD | 	call	#_compile_if
056a8     9C 01 90 FD | 	jmp	#LR__0462
056ac                 | LR__0434
056ac     24 20 B0 FD | 	call	#_compile_for
056b0     94 01 90 FD | 	jmp	#LR__0462
056b4                 | LR__0435
056b4     44 28 B0 FD | 	call	#_compile_next
056b8     8C 01 90 FD | 	jmp	#LR__0462
056bc                 | LR__0436
056bc     4C 2D B0 FD | 	call	#_expr
056c0                 | ' 
056c0                 | ' 
056c0                 | ' expr()
056c0                 | ' return 0
056c0     00 26 06 F6 | 	mov	local05, #0
056c4     C4 00 90 FD | 	jmp	#LR__0461
056c8                 | LR__0437
056c8     04 18 B0 FD | 	call	#_compile_else
056cc     78 01 90 FD | 	jmp	#LR__0462
056d0                 | LR__0438
056d0     D8 0A B0 FD | 	call	#_compile_fun_2p
056d4     FD 26 02 F6 | 	mov	local05, result1
056d8     B0 00 90 FD | 	jmp	#LR__0461
056dc                 | LR__0439
056dc     2C 2D B0 FD | 	call	#_expr
056e0                 | ' 
056e0                 | ' 
056e0                 | ' expr()
056e0                 | ' return 0
056e0     A8 00 90 FD | 	jmp	#LR__0461
056e4                 | LR__0440
056e4     24 2D B0 FD | 	call	#_expr
056e8                 | ' 
056e8                 | ' 
056e8                 | ' expr()
056e8                 | ' return 0
056e8     A0 00 90 FD | 	jmp	#LR__0461
056ec                 | LR__0441
056ec     1C 2D B0 FD | 	call	#_expr
056f0                 | ' 
056f0                 | ' 
056f0                 | ' expr()
056f0                 | ' return 0
056f0     98 00 90 FD | 	jmp	#LR__0461
056f4                 | LR__0442
056f4     14 2D B0 FD | 	call	#_expr
056f8                 | ' 
056f8                 | ' 
056f8                 | ' expr()
056f8                 | ' return 0
056f8     90 00 90 FD | 	jmp	#LR__0461
056fc                 | LR__0443
056fc     0C 2D B0 FD | 	call	#_expr
05700                 | ' 
05700                 | ' 
05700                 | ' expr()
05700                 | ' return 0
05700     88 00 90 FD | 	jmp	#LR__0461
05704                 | LR__0444
05704     04 2D B0 FD | 	call	#_expr
05708                 | ' 
05708                 | ' 
05708                 | ' expr()
05708                 | ' return 0
05708     80 00 90 FD | 	jmp	#LR__0461
0570c                 | LR__0445
0570c     FC 2C B0 FD | 	call	#_expr
05710                 | ' 
05710                 | ' 
05710                 | ' expr()
05710                 | ' return 0
05710     78 00 90 FD | 	jmp	#LR__0461
05714                 | LR__0446
05714     08 0B B0 FD | 	call	#_compile_fun_3p
05718     70 00 90 FD | 	jmp	#LR__0461
0571c                 | LR__0447
0571c     F0 0C B0 FD | 	call	#_compile_fun_5p
05720     68 00 90 FD | 	jmp	#LR__0461
05724                 | LR__0448
05724     C4 0B B0 FD | 	call	#_compile_fun_4p
05728     60 00 90 FD | 	jmp	#LR__0461
0572c                 | LR__0449
0572c     7C 0A B0 FD | 	call	#_compile_fun_2p
05730     58 00 90 FD | 	jmp	#LR__0461
05734                 | LR__0450
05734     74 0A B0 FD | 	call	#_compile_fun_2p
05738     50 00 90 FD | 	jmp	#LR__0461
0573c                 | LR__0451
0573c     6C 0A B0 FD | 	call	#_compile_fun_2p
05740     48 00 90 FD | 	jmp	#LR__0461
05744                 | LR__0452
05744     C4 2C B0 FD | 	call	#_expr
05748                 | ' 
05748                 | ' 
05748                 | ' expr()
05748                 | ' return 0
05748     40 00 90 FD | 	jmp	#LR__0461
0574c                 | LR__0453
0574c     BC 2C B0 FD | 	call	#_expr
05750                 | ' 
05750                 | ' 
05750                 | ' expr()
05750                 | ' return 0
05750     38 00 90 FD | 	jmp	#LR__0461
05754                 | LR__0454
05754     B4 2C B0 FD | 	call	#_expr
05758                 | ' 
05758                 | ' 
05758                 | ' expr()
05758                 | ' return 0
05758     30 00 90 FD | 	jmp	#LR__0461
0575c                 | LR__0455
0575c     8C 0B B0 FD | 	call	#_compile_fun_4p
05760     28 00 90 FD | 	jmp	#LR__0461
05764                 | LR__0456
05764     A4 2C B0 FD | 	call	#_expr
05768                 | ' 
05768                 | ' 
05768                 | ' expr()
05768                 | ' return 0
05768     20 00 90 FD | 	jmp	#LR__0461
0576c                 | LR__0457
0576c     88 18 B0 FD | 	call	#_compile_dim
05770     D4 00 90 FD | 	jmp	#LR__0462
05774                 | LR__0458
05774     34 0A B0 FD | 	call	#_compile_fun_2p
05778     10 00 90 FD | 	jmp	#LR__0461
0577c                 | LR__0459
0577c     20 01 B0 FD | 	call	#_compile_array_assign
05780     C4 00 90 FD | 	jmp	#LR__0462
05784                 | LR__0460
05784     80 08 B0 FD | 	call	#_compile_unknown
05788     BC 00 90 FD | 	jmp	#LR__0462
0578c                 | LR__0461
0578c     14 23 02 F6 | 	mov	local03, local06
05790     16 1F 02 F6 | 	mov	local01, local08
05794     0F 2B 02 F6 | 	mov	local07, local01
05798     10 2F 02 F6 | 	mov	local09, local02
0579c     11 1F 02 F6 | 	mov	local01, local03
057a0     69 00 00 FF 
057a4     50 E4 05 F1 | 	add	objptr, ##53840
057a8     F2 2C 02 FB | 	rdlong	local08, objptr
057ac     16 29 02 F6 | 	mov	local06, local08
057b0     01 28 66 F0 | 	shl	local06, #1
057b4     16 29 02 F1 | 	add	local06, local08
057b8     02 28 66 F0 | 	shl	local06, #2
057bc     03 00 00 FF 
057c0     00 E4 85 F1 | 	sub	objptr, ##1536
057c4     F2 28 02 F1 | 	add	local06, objptr
057c8     14 2B 62 FC | 	wrlong	local07, local06
057cc     03 00 00 FF 
057d0     00 E4 05 F1 | 	add	objptr, ##1536
057d4     F2 2C 02 FB | 	rdlong	local08, objptr
057d8     16 2B 02 F6 | 	mov	local07, local08
057dc     01 2A 66 F0 | 	shl	local07, #1
057e0     16 2B 02 F1 | 	add	local07, local08
057e4     02 2A 66 F0 | 	shl	local07, #2
057e8     03 00 00 FF 
057ec     00 E4 85 F1 | 	sub	objptr, ##1536
057f0     F2 2A 02 F1 | 	add	local07, objptr
057f4     04 2A 06 F1 | 	add	local07, #4
057f8     15 2F 62 FC | 	wrlong	local09, local07
057fc     03 00 00 FF 
05800     00 E4 05 F1 | 	add	objptr, ##1536
05804     F2 2E 02 FB | 	rdlong	local09, objptr
05808     17 2D 02 F6 | 	mov	local08, local09
0580c     01 2C 66 F0 | 	shl	local08, #1
05810     17 2D 02 F1 | 	add	local08, local09
05814     02 2C 66 F0 | 	shl	local08, #2
05818     03 00 00 FF 
0581c     00 E4 85 F1 | 	sub	objptr, ##1536
05820     F2 2C 02 F1 | 	add	local08, objptr
05824     08 2C 06 F1 | 	add	local08, #8
05828     16 1F 62 FC | 	wrlong	local01, local08
0582c     03 00 00 FF 
05830     00 E4 05 F1 | 	add	objptr, ##1536
05834     F2 2A 02 FB | 	rdlong	local07, objptr
05838     01 2A 06 F1 | 	add	local07, #1
0583c     F2 2A 62 FC | 	wrlong	local07, objptr
05840     69 00 00 FF 
05844     50 E4 85 F1 | 	sub	objptr, ##53840
05848                 | LR__0462
05848                 | ' 
05848                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
05848                 | ' 450 if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end ' end token if the last part or imm
05848     00 24 0E F2 | 	cmp	local04, #0 wz
0584c     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
05850     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
05854     38 00 90 5D |  if_ne	jmp	#LR__0463
05858     69 00 00 FF 
0585c     50 E4 05 F1 | 	add	objptr, ##53840
05860     F2 2E 02 FB | 	rdlong	local09, objptr
05864     17 1F 02 F6 | 	mov	local01, local09
05868     01 1E 66 F0 | 	shl	local01, #1
0586c     17 1F 02 F1 | 	add	local01, local09
05870     02 1E 66 F0 | 	shl	local01, #2
05874     03 00 00 FF 
05878     00 E4 85 F1 | 	sub	objptr, ##1536
0587c     F2 1E 02 F1 | 	add	local01, objptr
05880     08 1E 06 F1 | 	add	local01, #8
05884     0F FD 6B FC | 	wrlong	#510, local01
05888     66 00 00 FF 
0588c     50 E4 85 F1 | 	sub	objptr, ##52304
05890                 | LR__0463
05890                 | ' 
05890                 | ' ' print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
05890                 | ' return err
05890     13 FB 01 F6 | 	mov	result1, local05
05894     A7 F0 03 F6 | 	mov	ptra, fp
05898     B2 00 A0 FD | 	call	#popregs_
0589c                 | _compile_immediate_ret
0589c     2D 00 64 FD | 	ret
058a0                 | 
058a0                 | ' 
058a0                 | ' sub compile_array_assign
058a0                 | _compile_array_assign
058a0     0A 4A 05 F6 | 	mov	COUNT_, #10
058a4     A8 00 A0 FD | 	call	#pushregs_
058a8     00 24 06 F6 | 	mov	local04, #0
058ac     56 00 00 FF 
058b0     18 E4 05 F1 | 	add	objptr, ##44056
058b4     F2 26 02 FB | 	rdlong	local05, objptr
058b8     13 FB 01 F6 | 	mov	result1, local05
058bc     01 FA 85 F1 | 	sub	result1, #1
058c0     03 FA 65 F0 | 	shl	result1, #3
058c4     02 00 00 FF 
058c8     38 E4 85 F1 | 	sub	objptr, ##1080
058cc     F2 FA 01 F1 | 	add	result1, objptr
058d0     FD 28 02 FB | 	rdlong	local06, result1
058d4                 | ' numpar=0
058d4                 | ' 'print "In array_assign, lparts(ct).token=",lparts(ct).token,lparts(ct).part$
058d4                 | ' ' todo here: recognize params and t1.result.twowords=numpar
058d4                 | ' varname$=lparts(ct-1).part$' : print "In array_assign, varname$=";varname$
058d4                 | ' if lparts(ct).token=token_lpar then
058d4     03 26 66 F0 | 	shl	local05, #3
058d8     F2 26 02 F1 | 	add	local05, objptr
058dc     04 26 06 F1 | 	add	local05, #4
058e0     13 27 02 FB | 	rdlong	local05, local05
058e4     15 26 0E F2 | 	cmp	local05, #21 wz
058e8     53 00 00 FF 
058ec     E0 E5 85 F1 | 	sub	objptr, ##42976
058f0     D4 01 90 5D |  if_ne	jmp	#LR__0474
058f4     56 00 00 FF 
058f8     18 E4 05 F1 | 	add	objptr, ##44056
058fc     F2 2A 02 FB | 	rdlong	local07, objptr
05900     01 2A 06 F1 | 	add	local07, #1
05904     F2 2A 62 FC | 	wrlong	local07, objptr
05908     56 00 00 FF 
0590c     18 E4 85 F1 | 	sub	objptr, ##44056
05910                 | '   ct+=1 											' omit this lpar, this is for expr list
05910                 | '   do
05910                 | LR__0470
05910     F8 2A B0 FD | 	call	#_expr
05914     56 00 00 FF 
05918     18 E4 05 F1 | 	add	objptr, ##44056
0591c     F2 26 02 FB | 	rdlong	local05, objptr
05920     01 26 06 F1 | 	add	local05, #1
05924     F2 26 62 FC | 	wrlong	local05, objptr
05928     01 24 06 F1 | 	add	local04, #1
0592c     01 26 86 F1 | 	sub	local05, #1
05930     03 26 66 F0 | 	shl	local05, #3
05934     02 00 00 FF 
05938     38 E4 85 F1 | 	sub	objptr, ##1080
0593c     F2 26 02 F1 | 	add	local05, objptr
05940     04 26 06 F1 | 	add	local05, #4
05944     13 2B 02 FB | 	rdlong	local07, local05
05948     14 2A 0E F2 | 	cmp	local07, #20 wz
0594c     53 00 00 FF 
05950     E0 E5 85 F1 | 	sub	objptr, ##42976
05954     34 00 90 AD |  if_e	jmp	#LR__0471
05958     56 00 00 FF 
0595c     18 E4 05 F1 | 	add	objptr, ##44056
05960     F2 2A 02 FB | 	rdlong	local07, objptr
05964     03 2A 66 F0 | 	shl	local07, #3
05968     02 00 00 FF 
0596c     38 E4 85 F1 | 	sub	objptr, ##1080
05970     F2 2A 02 F1 | 	add	local07, objptr
05974     04 2A 06 F1 | 	add	local07, #4
05978     15 2B 02 FB | 	rdlong	local07, local07
0597c     FE 2B 0E F2 | 	cmp	local07, #510 wz
05980     53 00 00 FF 
05984     E0 E5 85 F1 | 	sub	objptr, ##42976
05988     84 FF 9F 5D |  if_ne	jmp	#LR__0470
0598c                 | LR__0471
0598c     56 00 00 FF 
05990     18 E4 05 F1 | 	add	objptr, ##44056
05994     F2 2A 02 FB | 	rdlong	local07, objptr
05998     01 2A 06 F1 | 	add	local07, #1
0599c     F2 2A 62 FC | 	wrlong	local07, objptr
059a0     56 00 00 FF 
059a4     18 E4 85 F1 | 	sub	objptr, ##44056
059a8     60 2A B0 FD | 	call	#_expr
059ac     01 2C 66 F6 | 	neg	local08, #1
059b0     00 2E 06 F6 | 	mov	local09, #0
059b4                 | ' '   print "in array_assign, rpar found, numpar=",numpar
059b4                 | '  'if lparts(ct).token=token_end then print "in getfun, end found, numpar=",numpar
059b4                 | ' 'if lparts(ct).token<>token_eq then print "in array_assign,= expected" else print "in array_assign,= found"
059b4                 | ' ct+=1 : expr()
059b4                 | ' ' now find the vae
059b4                 | ' 
059b4                 | ' j=-1 : i=0 : do : 
059b4                 | LR__0472
059b4                 | '   if variables(i).name=varname$ then j=i: exit loop
059b4     17 27 02 F6 | 	mov	local05, local09
059b8     04 26 66 F0 | 	shl	local05, #4
059bc     33 00 00 FF 
059c0     DC E5 05 F1 | 	add	objptr, ##26588
059c4     F2 26 02 F1 | 	add	local05, objptr
059c8     13 13 02 FB | 	rdlong	arg01, local05
059cc     14 15 02 F6 | 	mov	arg02, local06
059d0     33 00 00 FF 
059d4     DC E5 85 F1 | 	sub	objptr, ##26588
059d8     00 33 B1 FD | 	call	#__system___string_cmp
059dc     00 FA 0D F2 | 	cmp	result1, #0 wz
059e0     17 2D 02 A6 |  if_e	mov	local08, local09
059e4     20 00 90 AD |  if_e	jmp	#LR__0473
059e8     01 2E 06 F1 | 	add	local09, #1
059ec     53 00 00 FF 
059f0     DC E5 05 F1 | 	add	objptr, ##42972
059f4     F2 2A 02 FB | 	rdlong	local07, objptr
059f8     53 00 00 FF 
059fc     DC E5 85 F1 | 	sub	objptr, ##42972
05a00     15 2F 5A F2 | 	cmps	local09, local07 wcz
05a04     AC FF 9F ED |  if_be	jmp	#LR__0472
05a08                 | LR__0473
05a08     16 1F 02 F6 | 	mov	local01, local08
05a0c     12 21 02 F6 | 	mov	local02, local04
05a10     17 22 06 F6 | 	mov	local03, #23
05a14     0F 2B 02 F6 | 	mov	local07, local01
05a18     10 31 02 F6 | 	mov	local10, local02
05a1c     11 2D 02 F6 | 	mov	local08, local03
05a20     69 00 00 FF 
05a24     50 E4 05 F1 | 	add	objptr, ##53840
05a28     F2 1E 02 FB | 	rdlong	local01, objptr
05a2c     0F 2F 02 F6 | 	mov	local09, local01
05a30     01 2E 66 F0 | 	shl	local09, #1
05a34     0F 2F 02 F1 | 	add	local09, local01
05a38     02 2E 66 F0 | 	shl	local09, #2
05a3c     03 00 00 FF 
05a40     00 E4 85 F1 | 	sub	objptr, ##1536
05a44     F2 2E 02 F1 | 	add	local09, objptr
05a48     17 2B 62 FC | 	wrlong	local07, local09
05a4c     03 00 00 FF 
05a50     00 E4 05 F1 | 	add	objptr, ##1536
05a54     F2 1E 02 FB | 	rdlong	local01, objptr
05a58     0F 2F 02 F6 | 	mov	local09, local01
05a5c     01 2E 66 F0 | 	shl	local09, #1
05a60     0F 2F 02 F1 | 	add	local09, local01
05a64     02 2E 66 F0 | 	shl	local09, #2
05a68     03 00 00 FF 
05a6c     00 E4 85 F1 | 	sub	objptr, ##1536
05a70     F2 2E 02 F1 | 	add	local09, objptr
05a74     04 2E 06 F1 | 	add	local09, #4
05a78     17 31 62 FC | 	wrlong	local10, local09
05a7c     03 00 00 FF 
05a80     00 E4 05 F1 | 	add	objptr, ##1536
05a84     F2 30 02 FB | 	rdlong	local10, objptr
05a88     18 1F 02 F6 | 	mov	local01, local10
05a8c     01 1E 66 F0 | 	shl	local01, #1
05a90     18 1F 02 F1 | 	add	local01, local10
05a94     02 1E 66 F0 | 	shl	local01, #2
05a98     03 00 00 FF 
05a9c     00 E4 85 F1 | 	sub	objptr, ##1536
05aa0     F2 1E 02 F1 | 	add	local01, objptr
05aa4     08 1E 06 F1 | 	add	local01, #8
05aa8     0F 2D 62 FC | 	wrlong	local08, local01
05aac     03 00 00 FF 
05ab0     00 E4 05 F1 | 	add	objptr, ##1536
05ab4     F2 2A 02 FB | 	rdlong	local07, objptr
05ab8     01 2A 06 F1 | 	add	local07, #1
05abc     F2 2A 62 FC | 	wrlong	local07, objptr
05ac0     69 00 00 FF 
05ac4     50 E4 85 F1 | 	sub	objptr, ##53840
05ac8                 | LR__0474
05ac8     A7 F0 03 F6 | 	mov	ptra, fp
05acc     B2 00 A0 FD | 	call	#popregs_
05ad0                 | _compile_array_assign_ret
05ad0     2D 00 64 FD | 	ret
05ad4                 | 
05ad4                 | ' 
05ad4                 | ' 
05ad4                 | ' sub compile_immediate_assign(linetype as ulong)
05ad4                 | _compile_immediate_assign
05ad4     09 4A 05 F6 | 	mov	COUNT_, #9
05ad8     A8 00 A0 FD | 	call	#pushregs_
05adc     09 25 0A F6 | 	mov	local04, arg01 wz
05ae0     FF 22 06 F6 | 	mov	local03, #255
05ae4     01 26 66 F6 | 	neg	local05, #1
05ae8                 | ' 
05ae8                 | ' t1.result_type=result_error : t1.result.uresult=0
05ae8                 | ' i=-1: j=-1
05ae8                 | ' 
05ae8                 | ' if linetype=0 then varname2$=lparts(0).part$: ct=2 : lineptr=0 
05ae8     2C 00 90 5D |  if_ne	jmp	#LR__0480
05aec     53 00 00 FF 
05af0     E0 E5 05 F1 | 	add	objptr, ##42976
05af4     F2 28 02 FB | 	rdlong	local06, objptr
05af8     02 00 00 FF 
05afc     38 E4 05 F1 | 	add	objptr, ##1080
05b00     F2 04 68 FC | 	wrlong	#2, objptr
05b04     13 00 00 FF 
05b08     38 E4 05 F1 | 	add	objptr, ##9784
05b0c     F2 00 68 FC | 	wrlong	#0, objptr
05b10     69 00 00 FF 
05b14     50 E4 85 F1 | 	sub	objptr, ##53840
05b18                 | LR__0480
05b18                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
05b18     02 24 0E F2 | 	cmp	local04, #2 wz
05b1c     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
05b20     53 00 00 AF 
05b24     E0 E5 05 A1 |  if_e	add	objptr, ##42976
05b28     F2 28 02 AB |  if_e	rdlong	local06, objptr
05b2c     02 00 00 AF 
05b30     38 E4 05 A1 |  if_e	add	objptr, ##1080
05b34     F2 04 68 AC |  if_e	wrlong	#2, objptr
05b38     56 00 00 AF 
05b3c     18 E4 85 A1 |  if_e	sub	objptr, ##44056
05b40                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
05b40     04 24 0E F2 | 	cmp	local04, #4 wz
05b44     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
05b48     2C 00 90 5D |  if_ne	jmp	#LR__0481
05b4c     53 00 00 FF 
05b50     E8 E5 05 F1 | 	add	objptr, ##42984
05b54     F2 28 02 FB | 	rdlong	local06, objptr
05b58     02 00 00 FF 
05b5c     30 E4 05 F1 | 	add	objptr, ##1072
05b60     F2 06 68 FC | 	wrlong	#3, objptr
05b64     13 00 00 FF 
05b68     38 E4 05 F1 | 	add	objptr, ##9784
05b6c     F2 04 68 FC | 	wrlong	#2, objptr
05b70     69 00 00 FF 
05b74     50 E4 85 F1 | 	sub	objptr, ##53840
05b78                 | LR__0481
05b78                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
05b78     05 24 0E F2 | 	cmp	local04, #5 wz
05b7c     3C 00 90 5D |  if_ne	jmp	#LR__0482
05b80     56 00 00 FF 
05b84     18 E4 05 F1 | 	add	objptr, ##44056
05b88     F2 FA 01 FB | 	rdlong	result1, objptr
05b8c     FD 28 02 F6 | 	mov	local06, result1
05b90     03 28 66 F0 | 	shl	local06, #3
05b94     02 00 00 FF 
05b98     38 E4 85 F1 | 	sub	objptr, ##1080
05b9c     F2 28 02 F1 | 	add	local06, objptr
05ba0     14 29 02 FB | 	rdlong	local06, local06
05ba4     02 FA 05 F1 | 	add	result1, #2
05ba8     02 00 00 FF 
05bac     38 E4 05 F1 | 	add	objptr, ##1080
05bb0     F2 FA 61 FC | 	wrlong	result1, objptr
05bb4     56 00 00 FF 
05bb8     18 E4 85 F1 | 	sub	objptr, ##44056
05bbc                 | LR__0482
05bbc     14 13 02 F6 | 	mov	arg01, local06
05bc0     01 14 06 F6 | 	mov	arg02, #1
05bc4     84 51 B1 FD | 	call	#__system__Right_S
05bc8     40 28 B0 FD | 	call	#_expr
05bcc                 | '  
05bcc                 | ' 'print "Called compile immediate assign with linetype",linetype, "varname=",varname2$, "lineptr=", lineptr
05bcc                 | ' 
05bcc                 | ' suffix2$=right$(varname2$,1)
05bcc                 | ' expr()
05bcc                 | ' 
05bcc                 | ' 
05bcc                 | ' if varnum>0 then
05bcc     53 00 00 FF 
05bd0     DC E5 05 F1 | 	add	objptr, ##42972
05bd4     F2 2A 02 FB | 	rdlong	local07, objptr
05bd8     53 00 00 FF 
05bdc     DC E5 85 F1 | 	sub	objptr, ##42972
05be0     01 2A 56 F2 | 	cmps	local07, #1 wc
05be4     58 00 90 CD |  if_b	jmp	#LR__0485
05be8                 | '   for i=0 to varnum-1
05be8     00 2C 06 F6 | 	mov	local08, #0
05bec     53 00 00 FF 
05bf0     DC E5 05 F1 | 	add	objptr, ##42972
05bf4     F2 2E 02 FB | 	rdlong	local09, objptr
05bf8     53 00 00 FF 
05bfc     DC E5 85 F1 | 	sub	objptr, ##42972
05c00                 | LR__0483
05c00     17 2D 52 F2 | 	cmps	local08, local09 wc
05c04     38 00 90 3D |  if_ae	jmp	#LR__0484
05c08                 | '     if variables(i).name=varname2$ then j=i : exit
05c08     16 2B 02 F6 | 	mov	local07, local08
05c0c     04 2A 66 F0 | 	shl	local07, #4
05c10     33 00 00 FF 
05c14     DC E5 05 F1 | 	add	objptr, ##26588
05c18     F2 2A 02 F1 | 	add	local07, objptr
05c1c     15 13 02 FB | 	rdlong	arg01, local07
05c20     14 15 02 F6 | 	mov	arg02, local06
05c24     33 00 00 FF 
05c28     DC E5 85 F1 | 	sub	objptr, ##26588
05c2c     AC 30 B1 FD | 	call	#__system___string_cmp
05c30     00 FA 0D F2 | 	cmp	result1, #0 wz
05c34     16 27 02 A6 |  if_e	mov	local05, local08
05c38     01 2C 06 51 |  if_ne	add	local08, #1
05c3c     C0 FF 9F 5D |  if_ne	jmp	#LR__0483
05c40                 | LR__0484
05c40                 | LR__0485
05c40                 | ' if  j=-1 andalso varnum<maxvars then   
05c40     FF FF 7F FF 
05c44     FF 27 0E F2 | 	cmp	local05, ##-1 wz
05c48     60 00 90 5D |  if_ne	jmp	#LR__0486
05c4c     53 00 00 FF 
05c50     DC E5 05 F1 | 	add	objptr, ##42972
05c54     F2 2A 02 FB | 	rdlong	local07, objptr
05c58     53 00 00 FF 
05c5c     DC E5 85 F1 | 	sub	objptr, ##42972
05c60     01 00 00 FF 
05c64     FF 2B 56 F2 | 	cmps	local07, ##1023 wc
05c68     40 00 90 3D |  if_ae	jmp	#LR__0486
05c6c     53 00 00 FF 
05c70     DC E5 05 F1 | 	add	objptr, ##42972
05c74     F2 2E 02 FB | 	rdlong	local09, objptr
05c78     04 2E 66 F0 | 	shl	local09, #4
05c7c     20 00 00 FF 
05c80     00 E4 85 F1 | 	sub	objptr, ##16384
05c84     F2 2E 02 F1 | 	add	local09, objptr
05c88     17 29 62 FC | 	wrlong	local06, local09
05c8c     20 00 00 FF 
05c90     00 E4 05 F1 | 	add	objptr, ##16384
05c94     F2 2A 02 FB | 	rdlong	local07, objptr
05c98     15 27 02 F6 | 	mov	local05, local07
05c9c     01 2A 06 F1 | 	add	local07, #1
05ca0     F2 2A 62 FC | 	wrlong	local07, objptr
05ca4     53 00 00 FF 
05ca8     DC E5 85 F1 | 	sub	objptr, ##42972
05cac                 | LR__0486
05cac     13 1F 02 F6 | 	mov	local01, local05
05cb0     17 22 06 F6 | 	mov	local03, #23
05cb4     0F 2B 02 F6 | 	mov	local07, local01
05cb8     10 2F 02 F6 | 	mov	local09, local02
05cbc     11 1F 02 F6 | 	mov	local01, local03
05cc0     69 00 00 FF 
05cc4     50 E4 05 F1 | 	add	objptr, ##53840
05cc8     F2 2C 02 FB | 	rdlong	local08, objptr
05ccc     16 29 02 F6 | 	mov	local06, local08
05cd0     01 28 66 F0 | 	shl	local06, #1
05cd4     16 29 02 F1 | 	add	local06, local08
05cd8     02 28 66 F0 | 	shl	local06, #2
05cdc     03 00 00 FF 
05ce0     00 E4 85 F1 | 	sub	objptr, ##1536
05ce4     F2 28 02 F1 | 	add	local06, objptr
05ce8     14 2B 62 FC | 	wrlong	local07, local06
05cec     03 00 00 FF 
05cf0     00 E4 05 F1 | 	add	objptr, ##1536
05cf4     F2 2C 02 FB | 	rdlong	local08, objptr
05cf8     16 2B 02 F6 | 	mov	local07, local08
05cfc     01 2A 66 F0 | 	shl	local07, #1
05d00     16 2B 02 F1 | 	add	local07, local08
05d04     02 2A 66 F0 | 	shl	local07, #2
05d08     03 00 00 FF 
05d0c     00 E4 85 F1 | 	sub	objptr, ##1536
05d10     F2 2A 02 F1 | 	add	local07, objptr
05d14     04 2A 06 F1 | 	add	local07, #4
05d18     15 2F 62 FC | 	wrlong	local09, local07
05d1c     03 00 00 FF 
05d20     00 E4 05 F1 | 	add	objptr, ##1536
05d24     F2 2E 02 FB | 	rdlong	local09, objptr
05d28     17 2D 02 F6 | 	mov	local08, local09
05d2c     01 2C 66 F0 | 	shl	local08, #1
05d30     17 2D 02 F1 | 	add	local08, local09
05d34     02 2C 66 F0 | 	shl	local08, #2
05d38     03 00 00 FF 
05d3c     00 E4 85 F1 | 	sub	objptr, ##1536
05d40     F2 2C 02 F1 | 	add	local08, objptr
05d44     08 2C 06 F1 | 	add	local08, #8
05d48     16 1F 62 FC | 	wrlong	local01, local08
05d4c     03 00 00 FF 
05d50     00 E4 05 F1 | 	add	objptr, ##1536
05d54     F2 2A 02 FB | 	rdlong	local07, objptr
05d58     01 2A 06 F1 | 	add	local07, #1
05d5c     F2 2A 62 FC | 	wrlong	local07, objptr
05d60     69 00 00 FF 
05d64     50 E4 85 F1 | 	sub	objptr, ##53840
05d68                 | ' t1.result.uresult=j: t1.result_type=fun_assign  
05d68                 | ' 
05d68                 | ' 
05d68                 | ' 
05d68                 | ' 
05d68                 | ' 
05d68                 | ' 
05d68                 | ' compiledline(lineptr)=t1:  lineptr+=1 
05d68                 | '  if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
05d68     00 24 0E F2 | 	cmp	local04, #0 wz
05d6c     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
05d70     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
05d74     38 00 90 5D |  if_ne	jmp	#LR__0487
05d78     69 00 00 FF 
05d7c     50 E4 05 F1 | 	add	objptr, ##53840
05d80     F2 1E 02 FB | 	rdlong	local01, objptr
05d84     0F 2F 02 F6 | 	mov	local09, local01
05d88     01 2E 66 F0 | 	shl	local09, #1
05d8c     0F 2F 02 F1 | 	add	local09, local01
05d90     02 2E 66 F0 | 	shl	local09, #2
05d94     03 00 00 FF 
05d98     00 E4 85 F1 | 	sub	objptr, ##1536
05d9c     F2 2E 02 F1 | 	add	local09, objptr
05da0     08 2E 06 F1 | 	add	local09, #8
05da4     17 FD 6B FC | 	wrlong	#510, local09
05da8     66 00 00 FF 
05dac     50 E4 85 F1 | 	sub	objptr, ##52304
05db0                 | LR__0487
05db0     A7 F0 03 F6 | 	mov	ptra, fp
05db4     B2 00 A0 FD | 	call	#popregs_
05db8                 | _compile_immediate_assign_ret
05db8     2D 00 64 FD | 	ret
05dbc                 | 
05dbc                 | ' 
05dbc                 | ' ' ------------------ compile the line that is calling a command 
05dbc                 | ' 
05dbc                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)
05dbc                 | _compile
05dbc     04 4A 05 F6 | 	mov	COUNT_, #4
05dc0     A8 00 A0 FD | 	call	#pushregs_
05dc4     09 1F 0A F6 | 	mov	local01, arg01 wz
05dc8     0A 21 02 F6 | 	mov	local02, arg02
05dcc     0B 23 02 F6 | 	mov	local03, arg03
05dd0                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
05dd0                 | ' ' num_minor bit 31: the line is goto target. If deleted, a proper record(s) has to be added to goto list
05dd0                 | '  
05dd0                 | ' '  print "called compile with line= "; alinemajor;" and cont= "; cont 
05dd0                 | ' if alinemajor=0 then err=compile_immediate(0) : return err  
05dd0     0C 00 90 5D |  if_ne	jmp	#LR__0490
05dd4     00 12 06 F6 | 	mov	arg01, #0
05dd8     50 F5 BF FD | 	call	#_compile_immediate
05ddc     A0 00 90 FD | 	jmp	#LR__0497
05de0                 | LR__0490
05de0     66 00 00 FF 
05de4     50 E4 05 F1 | 	add	objptr, ##52304
05de8     F2 1E 62 FC | 	wrlong	local01, objptr
05dec     04 E4 05 F1 | 	add	objptr, #4
05df0     F2 20 62 FC | 	wrlong	local02, objptr
05df4     66 00 00 FF 
05df8     54 E4 85 F1 | 	sub	objptr, ##52308
05dfc     11 13 02 F6 | 	mov	arg01, local03
05e00     01 12 06 F1 | 	add	arg01, #1
05e04     24 F5 BF FD | 	call	#_compile_immediate
05e08     FD 24 0A F6 | 	mov	local04, result1 wz
05e0c                 | ' 
05e0c                 | ' ucompiledline(0)=alinemajor
05e0c                 | ' ucompiledline(1)=alineminor
05e0c                 | ' 
05e0c                 | ' 
05e0c                 | ' ' cont: 0: this is the first part of the line that will continue
05e0c                 | ' ' 1 - this is the continuation of the line
05e0c                 | ' ' 2 - this is the last continued line
05e0c                 | ' ' 3 - this is the ome and only part
05e0c                 | ' 
05e0c                 | ' 
05e0c                 | ' err=compile_immediate(cont+1) 
05e0c                 | ' if err=0 then
05e0c     6C 00 90 5D |  if_ne	jmp	#LR__0496
05e10                 | '   if cont=3 orelse cont=2 then 
05e10     03 22 0E F2 | 	cmp	local03, #3 wz
05e14     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
05e18     60 00 90 5D |  if_ne	jmp	#LR__0495
05e1c                 | '     if alinemajor >lastline then 
05e1c     69 00 00 FF 
05e20     5C E4 05 F1 | 	add	objptr, ##53852
05e24     F2 16 02 FB | 	rdlong	arg03, objptr
05e28     69 00 00 FF 
05e2c     5C E4 85 F1 | 	sub	objptr, ##53852
05e30     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
05e34     0C 00 90 ED |  if_be	jmp	#LR__0491
05e38     0F 13 02 F6 | 	mov	arg01, local01
05e3c     0C F4 BF FD | 	call	#_add_line_at_end
05e40     38 00 90 FD | 	jmp	#LR__0494
05e44                 | LR__0491
05e44     0F 13 02 F6 | 	mov	arg01, local01
05e48     8C EC BF FD | 	call	#_deleteline
05e4c                 | '       deleteline(alinemajor)  
05e4c                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor) ' yes I know that's not optimal    
05e4c     69 00 00 FF 
05e50     5C E4 05 F1 | 	add	objptr, ##53852
05e54     F2 16 02 FB | 	rdlong	arg03, objptr
05e58     69 00 00 FF 
05e5c     5C E4 85 F1 | 	sub	objptr, ##53852
05e60     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
05e64     0C 00 90 ED |  if_be	jmp	#LR__0492
05e68     0F 13 02 F6 | 	mov	arg01, local01
05e6c     DC F3 BF FD | 	call	#_add_line_at_end
05e70     08 00 90 FD | 	jmp	#LR__0493
05e74                 | LR__0492
05e74     0F 13 02 F6 | 	mov	arg01, local01
05e78     88 F1 BF FD | 	call	#_insertline
05e7c                 | LR__0493
05e7c                 | LR__0494
05e7c                 | LR__0495
05e7c                 | LR__0496
05e7c                 | ' return err
05e7c     12 FB 01 F6 | 	mov	result1, local04
05e80                 | LR__0497
05e80     A7 F0 03 F6 | 	mov	ptra, fp
05e84     B2 00 A0 FD | 	call	#popregs_
05e88                 | _compile_ret
05e88     2D 00 64 FD | 	ret
05e8c                 | 
05e8c                 | ' 
05e8c                 | ' ' ------------------ compile the line that is assigning to a variable
05e8c                 | ' 
05e8c                 | ' sub compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  
05e8c                 | _compile_assign
05e8c     03 4A 05 F6 | 	mov	COUNT_, #3
05e90     A8 00 A0 FD | 	call	#pushregs_
05e94     09 1F 0A F6 | 	mov	local01, arg01 wz
05e98     0A 21 02 F6 | 	mov	local02, arg02
05e9c     0B 23 02 F6 | 	mov	local03, arg03
05ea0                 | ' 
05ea0                 | ' '  print "called compile_assign  with line= "; alinemajor;" and cont= "; cont 
05ea0                 | ' if alinemajor=0 then compile_immediate_assign(0) : return  
05ea0     0C 00 90 5D |  if_ne	jmp	#LR__0500
05ea4     00 12 06 F6 | 	mov	arg01, #0
05ea8     28 FC BF FD | 	call	#_compile_immediate_assign
05eac     94 00 90 FD | 	jmp	#LR__0506
05eb0                 | LR__0500
05eb0     66 00 00 FF 
05eb4     50 E4 05 F1 | 	add	objptr, ##52304
05eb8     F2 1E 62 FC | 	wrlong	local01, objptr
05ebc     04 E4 05 F1 | 	add	objptr, #4
05ec0     F2 20 62 FC | 	wrlong	local02, objptr
05ec4     66 00 00 FF 
05ec8     54 E4 85 F1 | 	sub	objptr, ##52308
05ecc     11 13 02 F6 | 	mov	arg01, local03
05ed0     01 12 06 F1 | 	add	arg01, #1
05ed4     FC FB BF FD | 	call	#_compile_immediate_assign
05ed8                 | ' 
05ed8                 | ' ucompiledline(0)=alinemajor
05ed8                 | ' ucompiledline(1)=alineminor
05ed8                 | ' 
05ed8                 | ' compile_immediate_assign(cont+1) 
05ed8                 | ' 
05ed8                 | ' if cont=3 orelse cont=2 then 
05ed8     03 22 0E F2 | 	cmp	local03, #3 wz
05edc     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
05ee0     60 00 90 5D |  if_ne	jmp	#LR__0505
05ee4                 | '   if alinemajor >lastline then 
05ee4     69 00 00 FF 
05ee8     5C E4 05 F1 | 	add	objptr, ##53852
05eec     F2 16 02 FB | 	rdlong	arg03, objptr
05ef0     69 00 00 FF 
05ef4     5C E4 85 F1 | 	sub	objptr, ##53852
05ef8     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
05efc     0C 00 90 ED |  if_be	jmp	#LR__0501
05f00     0F 13 02 F6 | 	mov	arg01, local01
05f04     44 F3 BF FD | 	call	#_add_line_at_end
05f08     38 00 90 FD | 	jmp	#LR__0504
05f0c                 | LR__0501
05f0c     0F 13 02 F6 | 	mov	arg01, local01
05f10     C4 EB BF FD | 	call	#_deleteline
05f14                 | '     deleteline(alinemajor)  
05f14                 | '     if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
05f14     69 00 00 FF 
05f18     5C E4 05 F1 | 	add	objptr, ##53852
05f1c     F2 16 02 FB | 	rdlong	arg03, objptr
05f20     69 00 00 FF 
05f24     5C E4 85 F1 | 	sub	objptr, ##53852
05f28     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
05f2c     0C 00 90 ED |  if_be	jmp	#LR__0502
05f30     0F 13 02 F6 | 	mov	arg01, local01
05f34     14 F3 BF FD | 	call	#_add_line_at_end
05f38     08 00 90 FD | 	jmp	#LR__0503
05f3c                 | LR__0502
05f3c     0F 13 02 F6 | 	mov	arg01, local01
05f40     C0 F0 BF FD | 	call	#_insertline
05f44                 | LR__0503
05f44                 | LR__0504
05f44                 | LR__0505
05f44                 | LR__0506
05f44     A7 F0 03 F6 | 	mov	ptra, fp
05f48     B2 00 A0 FD | 	call	#popregs_
05f4c                 | _compile_assign_ret
05f4c     2D 00 64 FD | 	ret
05f50                 | 
05f50                 | ' 
05f50                 | ' sub compile_error(errno)
05f50                 | _compile_error
05f50     FF 04 06 F6 | 	mov	_var03, #255
05f54     01 07 02 F6 | 	mov	_var04, _var02
05f58     02 09 02 F6 | 	mov	_var05, _var03
05f5c     69 00 00 FF 
05f60     50 E4 05 F1 | 	add	objptr, ##53840
05f64     F2 0A 02 FB | 	rdlong	_var06, objptr
05f68     05 0D 02 F6 | 	mov	_var07, _var06
05f6c     01 0C 66 F0 | 	shl	_var07, #1
05f70     05 0D 02 F1 | 	add	_var07, _var06
05f74     02 0C 66 F0 | 	shl	_var07, #2
05f78     03 00 00 FF 
05f7c     00 E4 85 F1 | 	sub	objptr, ##1536
05f80     F2 0C 02 F1 | 	add	_var07, objptr
05f84     06 13 62 FC | 	wrlong	arg01, _var07
05f88     03 00 00 FF 
05f8c     00 E4 05 F1 | 	add	objptr, ##1536
05f90     F2 0C 02 FB | 	rdlong	_var07, objptr
05f94     06 0B 02 F6 | 	mov	_var06, _var07
05f98     01 0A 66 F0 | 	shl	_var06, #1
05f9c     06 0B 02 F1 | 	add	_var06, _var07
05fa0     02 0A 66 F0 | 	shl	_var06, #2
05fa4     03 00 00 FF 
05fa8     00 E4 85 F1 | 	sub	objptr, ##1536
05fac     F2 0A 02 F1 | 	add	_var06, objptr
05fb0     04 0A 06 F1 | 	add	_var06, #4
05fb4     05 07 62 FC | 	wrlong	_var04, _var06
05fb8     03 00 00 FF 
05fbc     00 E4 05 F1 | 	add	objptr, ##1536
05fc0     F2 0C 02 FB | 	rdlong	_var07, objptr
05fc4     06 0B 02 F6 | 	mov	_var06, _var07
05fc8     01 0A 66 F0 | 	shl	_var06, #1
05fcc     06 0B 02 F1 | 	add	_var06, _var07
05fd0     02 0A 66 F0 | 	shl	_var06, #2
05fd4     03 00 00 FF 
05fd8     00 E4 85 F1 | 	sub	objptr, ##1536
05fdc     F2 0A 02 F1 | 	add	_var06, objptr
05fe0     08 0A 06 F1 | 	add	_var06, #8
05fe4     05 09 62 FC | 	wrlong	_var05, _var06
05fe8     03 00 00 FF 
05fec     00 E4 05 F1 | 	add	objptr, ##1536
05ff0     F2 12 02 FB | 	rdlong	arg01, objptr
05ff4     01 12 06 F1 | 	add	arg01, #1
05ff8     F2 12 62 FC | 	wrlong	arg01, objptr
05ffc     69 00 00 FF 
06000     50 E4 85 F1 | 	sub	objptr, ##53840
06004                 | _compile_error_ret
06004     2D 00 64 FD | 	ret
06008                 | 
06008                 | ' 
06008                 | ' 
06008                 | ' sub compile_unknown() 
06008                 | _compile_unknown
06008     FF 04 06 F6 | 	mov	_var03, #255
0600c     17 00 06 F6 | 	mov	_var01, #23
06010     01 07 02 F6 | 	mov	_var04, _var02
06014     02 01 02 F6 | 	mov	_var01, _var03
06018     69 00 00 FF 
0601c     50 E4 05 F1 | 	add	objptr, ##53840
06020     F2 08 02 FB | 	rdlong	_var05, objptr
06024     04 0B 02 F6 | 	mov	_var06, _var05
06028     01 0A 66 F0 | 	shl	_var06, #1
0602c     04 0B 02 F1 | 	add	_var06, _var05
06030     02 0A 66 F0 | 	shl	_var06, #2
06034     03 00 00 FF 
06038     00 E4 85 F1 | 	sub	objptr, ##1536
0603c     F2 0A 02 F1 | 	add	_var06, objptr
06040     05 2F 68 FC | 	wrlong	#23, _var06
06044     03 00 00 FF 
06048     00 E4 05 F1 | 	add	objptr, ##1536
0604c     F2 0A 02 FB | 	rdlong	_var06, objptr
06050     05 09 02 F6 | 	mov	_var05, _var06
06054     01 08 66 F0 | 	shl	_var05, #1
06058     05 09 02 F1 | 	add	_var05, _var06
0605c     02 08 66 F0 | 	shl	_var05, #2
06060     03 00 00 FF 
06064     00 E4 85 F1 | 	sub	objptr, ##1536
06068     F2 08 02 F1 | 	add	_var05, objptr
0606c     04 08 06 F1 | 	add	_var05, #4
06070     04 07 62 FC | 	wrlong	_var04, _var05
06074     03 00 00 FF 
06078     00 E4 05 F1 | 	add	objptr, ##1536
0607c     F2 0A 02 FB | 	rdlong	_var06, objptr
06080     05 09 02 F6 | 	mov	_var05, _var06
06084     01 08 66 F0 | 	shl	_var05, #1
06088     05 09 02 F1 | 	add	_var05, _var06
0608c     02 08 66 F0 | 	shl	_var05, #2
06090     03 00 00 FF 
06094     00 E4 85 F1 | 	sub	objptr, ##1536
06098     F2 08 02 F1 | 	add	_var05, objptr
0609c     08 08 06 F1 | 	add	_var05, #8
060a0     04 01 62 FC | 	wrlong	_var01, _var05
060a4     03 00 00 FF 
060a8     00 E4 05 F1 | 	add	objptr, ##1536
060ac     F2 0A 02 FB | 	rdlong	_var06, objptr
060b0     01 0A 06 F1 | 	add	_var06, #1
060b4     F2 0A 62 FC | 	wrlong	_var06, objptr
060b8     69 00 00 FF 
060bc     50 E4 85 F1 | 	sub	objptr, ##53840
060c0                 | _compile_unknown_ret
060c0     2D 00 64 FD | 	ret
060c4                 | 
060c4                 | ' 
060c4                 | ' function compile_converttoint() as integer
060c4                 | _compile_converttoint
060c4     06 4A 05 F6 | 	mov	COUNT_, #6
060c8     A8 00 A0 FD | 	call	#pushregs_
060cc     00 1E 06 F6 | 	mov	local01, #0
060d0     38 23 B0 FD | 	call	#_expr
060d4     FD 24 0A F6 | 	mov	local04, result1 wz
060d8                 | ' err=0
060d8                 | ' t1.result.uresult=0
060d8                 | ' err=expr()
060d8                 | ' if err=0 then
060d8     C0 00 90 5D |  if_ne	jmp	#LR__0510
060dc     16 22 06 F6 | 	mov	local03, #22
060e0     0F 27 02 F6 | 	mov	local05, local01
060e4     10 29 02 F6 | 	mov	local06, local02
060e8     11 25 02 F6 | 	mov	local04, local03
060ec     69 00 00 FF 
060f0     50 E4 05 F1 | 	add	objptr, ##53840
060f4     F2 1E 02 FB | 	rdlong	local01, objptr
060f8     0F FB 01 F6 | 	mov	result1, local01
060fc     01 FA 65 F0 | 	shl	result1, #1
06100     0F FB 01 F1 | 	add	result1, local01
06104     02 FA 65 F0 | 	shl	result1, #2
06108     03 00 00 FF 
0610c     00 E4 85 F1 | 	sub	objptr, ##1536
06110     F2 FA 01 F1 | 	add	result1, objptr
06114     FD 26 62 FC | 	wrlong	local05, result1
06118     03 00 00 FF 
0611c     00 E4 05 F1 | 	add	objptr, ##1536
06120     F2 26 02 FB | 	rdlong	local05, objptr
06124     13 1F 02 F6 | 	mov	local01, local05
06128     01 1E 66 F0 | 	shl	local01, #1
0612c     13 1F 02 F1 | 	add	local01, local05
06130     02 1E 66 F0 | 	shl	local01, #2
06134     03 00 00 FF 
06138     00 E4 85 F1 | 	sub	objptr, ##1536
0613c     F2 1E 02 F1 | 	add	local01, objptr
06140     04 1E 06 F1 | 	add	local01, #4
06144     0F 29 62 FC | 	wrlong	local06, local01
06148     03 00 00 FF 
0614c     00 E4 05 F1 | 	add	objptr, ##1536
06150     F2 28 02 FB | 	rdlong	local06, objptr
06154     14 27 02 F6 | 	mov	local05, local06
06158     01 26 66 F0 | 	shl	local05, #1
0615c     14 27 02 F1 | 	add	local05, local06
06160     02 26 66 F0 | 	shl	local05, #2
06164     03 00 00 FF 
06168     00 E4 85 F1 | 	sub	objptr, ##1536
0616c     F2 26 02 F1 | 	add	local05, objptr
06170     08 26 06 F1 | 	add	local05, #8
06174     13 25 62 FC | 	wrlong	local04, local05
06178     03 00 00 FF 
0617c     00 E4 05 F1 | 	add	objptr, ##1536
06180     F2 26 02 FB | 	rdlong	local05, objptr
06184     01 26 06 F1 | 	add	local05, #1
06188     F2 26 62 FC | 	wrlong	local05, objptr
0618c     69 00 00 FF 
06190     50 E4 85 F1 | 	sub	objptr, ##53840
06194                 | '   t1.result_type=fun_converttoint
06194                 | '   compiledline(lineptr)=t1: lineptr+=1 
06194                 | '   return 0
06194     00 FA 05 F6 | 	mov	result1, #0
06198     04 00 90 FD | 	jmp	#LR__0511
0619c                 | LR__0510
0619c                 | '   return err
0619c     12 FB 01 F6 | 	mov	result1, local04
061a0                 | LR__0511
061a0     A7 F0 03 F6 | 	mov	ptra, fp
061a4     B2 00 A0 FD | 	call	#popregs_
061a8                 | _compile_converttoint_ret
061a8     2D 00 64 FD | 	ret
061ac                 | 
061ac                 | ' 
061ac                 | ' 
061ac                 | ' function compile_fun_2p() as ulong
061ac                 | _compile_fun_2p
061ac     01 4A 05 F6 | 	mov	COUNT_, #1
061b0     A8 00 A0 FD | 	call	#pushregs_
061b4     54 22 B0 FD | 	call	#_expr
061b8                 | ' 
061b8                 | ' expr()
061b8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
061b8     56 00 00 FF 
061bc     18 E4 05 F1 | 	add	objptr, ##44056
061c0     F2 1E 02 FB | 	rdlong	local01, objptr
061c4     03 1E 66 F0 | 	shl	local01, #3
061c8     02 00 00 FF 
061cc     38 E4 85 F1 | 	sub	objptr, ##1080
061d0     F2 1E 02 F1 | 	add	local01, objptr
061d4     04 1E 06 F1 | 	add	local01, #4
061d8     0F 1F 02 FB | 	rdlong	local01, local01
061dc     11 1E 0E F2 | 	cmp	local01, #17 wz
061e0     53 00 00 FF 
061e4     E0 E5 85 F1 | 	sub	objptr, ##42976
061e8     15 FA 05 56 |  if_ne	mov	result1, #21
061ec     24 00 90 5D |  if_ne	jmp	#LR__0520
061f0     56 00 00 FF 
061f4     18 E4 05 F1 | 	add	objptr, ##44056
061f8     F2 1E 02 FB | 	rdlong	local01, objptr
061fc     01 1E 06 F1 | 	add	local01, #1
06200     F2 1E 62 FC | 	wrlong	local01, objptr
06204     56 00 00 FF 
06208     18 E4 85 F1 | 	sub	objptr, ##44056
0620c     FC 21 B0 FD | 	call	#_expr
06210     00 FA 05 F6 | 	mov	result1, #0
06214                 | LR__0520
06214     A7 F0 03 F6 | 	mov	ptra, fp
06218     B2 00 A0 FD | 	call	#popregs_
0621c                 | _compile_fun_2p_ret
0621c     2D 00 64 FD | 	ret
06220                 | 
06220                 | ' 
06220                 | ' function compile_fun_3p() as ulong
06220                 | _compile_fun_3p
06220     01 4A 05 F6 | 	mov	COUNT_, #1
06224     A8 00 A0 FD | 	call	#pushregs_
06228     E0 21 B0 FD | 	call	#_expr
0622c                 | ' 
0622c                 | ' expr()
0622c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
0622c     56 00 00 FF 
06230     18 E4 05 F1 | 	add	objptr, ##44056
06234     F2 1E 02 FB | 	rdlong	local01, objptr
06238     03 1E 66 F0 | 	shl	local01, #3
0623c     02 00 00 FF 
06240     38 E4 85 F1 | 	sub	objptr, ##1080
06244     F2 1E 02 F1 | 	add	local01, objptr
06248     04 1E 06 F1 | 	add	local01, #4
0624c     0F 1F 02 FB | 	rdlong	local01, local01
06250     11 1E 0E F2 | 	cmp	local01, #17 wz
06254     53 00 00 FF 
06258     E0 E5 85 F1 | 	sub	objptr, ##42976
0625c     15 FA 05 56 |  if_ne	mov	result1, #21
06260     7C 00 90 5D |  if_ne	jmp	#LR__0530
06264     56 00 00 FF 
06268     18 E4 05 F1 | 	add	objptr, ##44056
0626c     F2 1E 02 FB | 	rdlong	local01, objptr
06270     01 1E 06 F1 | 	add	local01, #1
06274     F2 1E 62 FC | 	wrlong	local01, objptr
06278     56 00 00 FF 
0627c     18 E4 85 F1 | 	sub	objptr, ##44056
06280     88 21 B0 FD | 	call	#_expr
06284                 | ' expr()
06284                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06284     56 00 00 FF 
06288     18 E4 05 F1 | 	add	objptr, ##44056
0628c     F2 1E 02 FB | 	rdlong	local01, objptr
06290     03 1E 66 F0 | 	shl	local01, #3
06294     02 00 00 FF 
06298     38 E4 85 F1 | 	sub	objptr, ##1080
0629c     F2 1E 02 F1 | 	add	local01, objptr
062a0     04 1E 06 F1 | 	add	local01, #4
062a4     0F 1F 02 FB | 	rdlong	local01, local01
062a8     11 1E 0E F2 | 	cmp	local01, #17 wz
062ac     53 00 00 FF 
062b0     E0 E5 85 F1 | 	sub	objptr, ##42976
062b4     15 FA 05 56 |  if_ne	mov	result1, #21
062b8     24 00 90 5D |  if_ne	jmp	#LR__0530
062bc     56 00 00 FF 
062c0     18 E4 05 F1 | 	add	objptr, ##44056
062c4     F2 1E 02 FB | 	rdlong	local01, objptr
062c8     01 1E 06 F1 | 	add	local01, #1
062cc     F2 1E 62 FC | 	wrlong	local01, objptr
062d0     56 00 00 FF 
062d4     18 E4 85 F1 | 	sub	objptr, ##44056
062d8     30 21 B0 FD | 	call	#_expr
062dc     00 FA 05 F6 | 	mov	result1, #0
062e0                 | LR__0530
062e0     A7 F0 03 F6 | 	mov	ptra, fp
062e4     B2 00 A0 FD | 	call	#popregs_
062e8                 | _compile_fun_3p_ret
062e8     2D 00 64 FD | 	ret
062ec                 | 
062ec                 | ' 
062ec                 | ' function compile_fun_4p() as ulong
062ec                 | _compile_fun_4p
062ec     01 4A 05 F6 | 	mov	COUNT_, #1
062f0     A8 00 A0 FD | 	call	#pushregs_
062f4     14 21 B0 FD | 	call	#_expr
062f8                 | ' 
062f8                 | ' expr()
062f8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
062f8     56 00 00 FF 
062fc     18 E4 05 F1 | 	add	objptr, ##44056
06300     F2 1E 02 FB | 	rdlong	local01, objptr
06304     03 1E 66 F0 | 	shl	local01, #3
06308     02 00 00 FF 
0630c     38 E4 85 F1 | 	sub	objptr, ##1080
06310     F2 1E 02 F1 | 	add	local01, objptr
06314     04 1E 06 F1 | 	add	local01, #4
06318     0F 1F 02 FB | 	rdlong	local01, local01
0631c     11 1E 0E F2 | 	cmp	local01, #17 wz
06320     53 00 00 FF 
06324     E0 E5 85 F1 | 	sub	objptr, ##42976
06328     15 FA 05 56 |  if_ne	mov	result1, #21
0632c     D4 00 90 5D |  if_ne	jmp	#LR__0540
06330     56 00 00 FF 
06334     18 E4 05 F1 | 	add	objptr, ##44056
06338     F2 1E 02 FB | 	rdlong	local01, objptr
0633c     01 1E 06 F1 | 	add	local01, #1
06340     F2 1E 62 FC | 	wrlong	local01, objptr
06344     56 00 00 FF 
06348     18 E4 85 F1 | 	sub	objptr, ##44056
0634c     BC 20 B0 FD | 	call	#_expr
06350                 | ' expr()
06350                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06350     56 00 00 FF 
06354     18 E4 05 F1 | 	add	objptr, ##44056
06358     F2 1E 02 FB | 	rdlong	local01, objptr
0635c     03 1E 66 F0 | 	shl	local01, #3
06360     02 00 00 FF 
06364     38 E4 85 F1 | 	sub	objptr, ##1080
06368     F2 1E 02 F1 | 	add	local01, objptr
0636c     04 1E 06 F1 | 	add	local01, #4
06370     0F 1F 02 FB | 	rdlong	local01, local01
06374     11 1E 0E F2 | 	cmp	local01, #17 wz
06378     53 00 00 FF 
0637c     E0 E5 85 F1 | 	sub	objptr, ##42976
06380     15 FA 05 56 |  if_ne	mov	result1, #21
06384     7C 00 90 5D |  if_ne	jmp	#LR__0540
06388     56 00 00 FF 
0638c     18 E4 05 F1 | 	add	objptr, ##44056
06390     F2 1E 02 FB | 	rdlong	local01, objptr
06394     01 1E 06 F1 | 	add	local01, #1
06398     F2 1E 62 FC | 	wrlong	local01, objptr
0639c     56 00 00 FF 
063a0     18 E4 85 F1 | 	sub	objptr, ##44056
063a4     64 20 B0 FD | 	call	#_expr
063a8                 | ' expr()
063a8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
063a8     56 00 00 FF 
063ac     18 E4 05 F1 | 	add	objptr, ##44056
063b0     F2 1E 02 FB | 	rdlong	local01, objptr
063b4     03 1E 66 F0 | 	shl	local01, #3
063b8     02 00 00 FF 
063bc     38 E4 85 F1 | 	sub	objptr, ##1080
063c0     F2 1E 02 F1 | 	add	local01, objptr
063c4     04 1E 06 F1 | 	add	local01, #4
063c8     0F 1F 02 FB | 	rdlong	local01, local01
063cc     11 1E 0E F2 | 	cmp	local01, #17 wz
063d0     53 00 00 FF 
063d4     E0 E5 85 F1 | 	sub	objptr, ##42976
063d8     15 FA 05 56 |  if_ne	mov	result1, #21
063dc     24 00 90 5D |  if_ne	jmp	#LR__0540
063e0     56 00 00 FF 
063e4     18 E4 05 F1 | 	add	objptr, ##44056
063e8     F2 1E 02 FB | 	rdlong	local01, objptr
063ec     01 1E 06 F1 | 	add	local01, #1
063f0     F2 1E 62 FC | 	wrlong	local01, objptr
063f4     56 00 00 FF 
063f8     18 E4 85 F1 | 	sub	objptr, ##44056
063fc     0C 20 B0 FD | 	call	#_expr
06400     00 FA 05 F6 | 	mov	result1, #0
06404                 | LR__0540
06404     A7 F0 03 F6 | 	mov	ptra, fp
06408     B2 00 A0 FD | 	call	#popregs_
0640c                 | _compile_fun_4p_ret
0640c     2D 00 64 FD | 	ret
06410                 | 
06410                 | ' 
06410                 | ' 
06410                 | ' function compile_fun_5p() as ulong
06410                 | _compile_fun_5p
06410     01 4A 05 F6 | 	mov	COUNT_, #1
06414     A8 00 A0 FD | 	call	#pushregs_
06418     F0 1F B0 FD | 	call	#_expr
0641c                 | ' 
0641c                 | ' expr()
0641c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
0641c     56 00 00 FF 
06420     18 E4 05 F1 | 	add	objptr, ##44056
06424     F2 1E 02 FB | 	rdlong	local01, objptr
06428     03 1E 66 F0 | 	shl	local01, #3
0642c     02 00 00 FF 
06430     38 E4 85 F1 | 	sub	objptr, ##1080
06434     F2 1E 02 F1 | 	add	local01, objptr
06438     04 1E 06 F1 | 	add	local01, #4
0643c     0F 1F 02 FB | 	rdlong	local01, local01
06440     11 1E 0E F2 | 	cmp	local01, #17 wz
06444     53 00 00 FF 
06448     E0 E5 85 F1 | 	sub	objptr, ##42976
0644c     15 FA 05 56 |  if_ne	mov	result1, #21
06450     2C 01 90 5D |  if_ne	jmp	#LR__0550
06454     56 00 00 FF 
06458     18 E4 05 F1 | 	add	objptr, ##44056
0645c     F2 1E 02 FB | 	rdlong	local01, objptr
06460     01 1E 06 F1 | 	add	local01, #1
06464     F2 1E 62 FC | 	wrlong	local01, objptr
06468     56 00 00 FF 
0646c     18 E4 85 F1 | 	sub	objptr, ##44056
06470     98 1F B0 FD | 	call	#_expr
06474                 | ' expr()
06474                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06474     56 00 00 FF 
06478     18 E4 05 F1 | 	add	objptr, ##44056
0647c     F2 1E 02 FB | 	rdlong	local01, objptr
06480     03 1E 66 F0 | 	shl	local01, #3
06484     02 00 00 FF 
06488     38 E4 85 F1 | 	sub	objptr, ##1080
0648c     F2 1E 02 F1 | 	add	local01, objptr
06490     04 1E 06 F1 | 	add	local01, #4
06494     0F 1F 02 FB | 	rdlong	local01, local01
06498     11 1E 0E F2 | 	cmp	local01, #17 wz
0649c     53 00 00 FF 
064a0     E0 E5 85 F1 | 	sub	objptr, ##42976
064a4     15 FA 05 56 |  if_ne	mov	result1, #21
064a8     D4 00 90 5D |  if_ne	jmp	#LR__0550
064ac     56 00 00 FF 
064b0     18 E4 05 F1 | 	add	objptr, ##44056
064b4     F2 1E 02 FB | 	rdlong	local01, objptr
064b8     01 1E 06 F1 | 	add	local01, #1
064bc     F2 1E 62 FC | 	wrlong	local01, objptr
064c0     56 00 00 FF 
064c4     18 E4 85 F1 | 	sub	objptr, ##44056
064c8     40 1F B0 FD | 	call	#_expr
064cc                 | ' expr()
064cc                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
064cc     56 00 00 FF 
064d0     18 E4 05 F1 | 	add	objptr, ##44056
064d4     F2 1E 02 FB | 	rdlong	local01, objptr
064d8     03 1E 66 F0 | 	shl	local01, #3
064dc     02 00 00 FF 
064e0     38 E4 85 F1 | 	sub	objptr, ##1080
064e4     F2 1E 02 F1 | 	add	local01, objptr
064e8     04 1E 06 F1 | 	add	local01, #4
064ec     0F 1F 02 FB | 	rdlong	local01, local01
064f0     11 1E 0E F2 | 	cmp	local01, #17 wz
064f4     53 00 00 FF 
064f8     E0 E5 85 F1 | 	sub	objptr, ##42976
064fc     15 FA 05 56 |  if_ne	mov	result1, #21
06500     7C 00 90 5D |  if_ne	jmp	#LR__0550
06504     56 00 00 FF 
06508     18 E4 05 F1 | 	add	objptr, ##44056
0650c     F2 1E 02 FB | 	rdlong	local01, objptr
06510     01 1E 06 F1 | 	add	local01, #1
06514     F2 1E 62 FC | 	wrlong	local01, objptr
06518     56 00 00 FF 
0651c     18 E4 85 F1 | 	sub	objptr, ##44056
06520     E8 1E B0 FD | 	call	#_expr
06524                 | ' expr()
06524                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06524     56 00 00 FF 
06528     18 E4 05 F1 | 	add	objptr, ##44056
0652c     F2 1E 02 FB | 	rdlong	local01, objptr
06530     03 1E 66 F0 | 	shl	local01, #3
06534     02 00 00 FF 
06538     38 E4 85 F1 | 	sub	objptr, ##1080
0653c     F2 1E 02 F1 | 	add	local01, objptr
06540     04 1E 06 F1 | 	add	local01, #4
06544     0F 1F 02 FB | 	rdlong	local01, local01
06548     11 1E 0E F2 | 	cmp	local01, #17 wz
0654c     53 00 00 FF 
06550     E0 E5 85 F1 | 	sub	objptr, ##42976
06554     15 FA 05 56 |  if_ne	mov	result1, #21
06558     24 00 90 5D |  if_ne	jmp	#LR__0550
0655c     56 00 00 FF 
06560     18 E4 05 F1 | 	add	objptr, ##44056
06564     F2 1E 02 FB | 	rdlong	local01, objptr
06568     01 1E 06 F1 | 	add	local01, #1
0656c     F2 1E 62 FC | 	wrlong	local01, objptr
06570     56 00 00 FF 
06574     18 E4 85 F1 | 	sub	objptr, ##44056
06578     90 1E B0 FD | 	call	#_expr
0657c     00 FA 05 F6 | 	mov	result1, #0
06580                 | LR__0550
06580     A7 F0 03 F6 | 	mov	ptra, fp
06584     B2 00 A0 FD | 	call	#popregs_
06588                 | _compile_fun_5p_ret
06588     2D 00 64 FD | 	ret
0658c                 | 
0658c                 | ' 
0658c                 | ' function compile_fun_varp() as ulong ' parameter # on top of the stack
0658c                 | _compile_fun_varp
0658c     02 4A 05 F6 | 	mov	COUNT_, #2
06590     A8 00 A0 FD | 	call	#pushregs_
06594     00 1E 06 F6 | 	mov	local01, #0
06598                 | ' i=0
06598                 | ' if lparts(ct).token<>token_end then
06598     56 00 00 FF 
0659c     18 E4 05 F1 | 	add	objptr, ##44056
065a0     F2 20 02 FB | 	rdlong	local02, objptr
065a4     03 20 66 F0 | 	shl	local02, #3
065a8     02 00 00 FF 
065ac     38 E4 85 F1 | 	sub	objptr, ##1080
065b0     F2 20 02 F1 | 	add	local02, objptr
065b4     04 20 06 F1 | 	add	local02, #4
065b8     10 21 02 FB | 	rdlong	local02, local02
065bc     FE 21 0E F2 | 	cmp	local02, #510 wz
065c0     53 00 00 FF 
065c4     E0 E5 85 F1 | 	sub	objptr, ##42976
065c8     5C 00 90 AD |  if_e	jmp	#LR__0562
065cc                 | '   do
065cc                 | LR__0560
065cc     3C 1E B0 FD | 	call	#_expr
065d0     01 1E 06 F1 | 	add	local01, #1
065d4                 | '   expr()
065d4                 | '    i+=1
065d4                 | '    if lparts(ct).token<> token_comma then exit loop else ct+=1
065d4     56 00 00 FF 
065d8     18 E4 05 F1 | 	add	objptr, ##44056
065dc     F2 20 02 FB | 	rdlong	local02, objptr
065e0     03 20 66 F0 | 	shl	local02, #3
065e4     02 00 00 FF 
065e8     38 E4 85 F1 | 	sub	objptr, ##1080
065ec     F2 20 02 F1 | 	add	local02, objptr
065f0     04 20 06 F1 | 	add	local02, #4
065f4     10 21 02 FB | 	rdlong	local02, local02
065f8     11 20 0E F2 | 	cmp	local02, #17 wz
065fc     53 00 00 FF 
06600     E0 E5 85 F1 | 	sub	objptr, ##42976
06604     20 00 90 5D |  if_ne	jmp	#LR__0561
06608     56 00 00 FF 
0660c     18 E4 05 F1 | 	add	objptr, ##44056
06610     F2 20 02 FB | 	rdlong	local02, objptr
06614     01 20 06 F1 | 	add	local02, #1
06618     F2 20 62 FC | 	wrlong	local02, objptr
0661c     56 00 00 FF 
06620     18 E4 85 F1 | 	sub	objptr, ##44056
06624     A4 FF 9F FD | 	jmp	#LR__0560
06628                 | LR__0561
06628                 | LR__0562
06628                 | ' return i
06628     0F FB 01 F6 | 	mov	result1, local01
0662c     A7 F0 03 F6 | 	mov	ptra, fp
06630     B2 00 A0 FD | 	call	#popregs_
06634                 | _compile_fun_varp_ret
06634     2D 00 64 FD | 	ret
06638                 | 
06638                 | ' 
06638                 | ' 
06638                 | ' function compile_int_fun_2p() as ulong
06638                 | _compile_int_fun_2p
06638     01 4A 05 F6 | 	mov	COUNT_, #1
0663c     A8 00 A0 FD | 	call	#pushregs_
06640     80 FA BF FD | 	call	#_compile_converttoint
06644     FD 1E 02 F6 | 	mov	local01, result1
06648                 | ' err=compile_converttoint() : if err>0 then return err
06648     01 1E 56 F2 | 	cmps	local01, #1 wc
0664c     0F FB 01 36 |  if_ae	mov	result1, local01
06650     58 00 90 3D |  if_ae	jmp	#LR__0570
06654                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06654     56 00 00 FF 
06658     18 E4 05 F1 | 	add	objptr, ##44056
0665c     F2 1E 02 FB | 	rdlong	local01, objptr
06660     03 1E 66 F0 | 	shl	local01, #3
06664     02 00 00 FF 
06668     38 E4 85 F1 | 	sub	objptr, ##1080
0666c     F2 1E 02 F1 | 	add	local01, objptr
06670     04 1E 06 F1 | 	add	local01, #4
06674     0F 1F 02 FB | 	rdlong	local01, local01
06678     11 1E 0E F2 | 	cmp	local01, #17 wz
0667c     53 00 00 FF 
06680     E0 E5 85 F1 | 	sub	objptr, ##42976
06684     15 FA 05 56 |  if_ne	mov	result1, #21
06688     20 00 90 5D |  if_ne	jmp	#LR__0570
0668c     56 00 00 FF 
06690     18 E4 05 F1 | 	add	objptr, ##44056
06694     F2 1E 02 FB | 	rdlong	local01, objptr
06698     01 1E 06 F1 | 	add	local01, #1
0669c     F2 1E 62 FC | 	wrlong	local01, objptr
066a0     56 00 00 FF 
066a4     18 E4 85 F1 | 	sub	objptr, ##44056
066a8     18 FA BF FD | 	call	#_compile_converttoint
066ac                 | ' err=compile_converttoint() 
066ac                 | ' return err
066ac                 | LR__0570
066ac     A7 F0 03 F6 | 	mov	ptra, fp
066b0     B2 00 A0 FD | 	call	#popregs_
066b4                 | _compile_int_fun_2p_ret
066b4     2D 00 64 FD | 	ret
066b8                 | 
066b8                 | ' 
066b8                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
066b8                 | _compile_print
066b8     0B 4A 05 F6 | 	mov	COUNT_, #11
066bc     A8 00 A0 FD | 	call	#pushregs_
066c0     00 1E 06 F6 | 	mov	local01, #0
066c4     1D 22 06 F6 | 	mov	local03, #29
066c8                 | ' t1.result.uresult=0 : t1.result_type=result_uint
066c8                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
066c8     56 00 00 FF 
066cc     18 E4 05 F1 | 	add	objptr, ##44056
066d0     F2 24 02 FB | 	rdlong	local04, objptr
066d4     03 24 66 F0 | 	shl	local04, #3
066d8     02 00 00 FF 
066dc     38 E4 85 F1 | 	sub	objptr, ##1080
066e0     F2 24 02 F1 | 	add	local04, objptr
066e4     04 24 06 F1 | 	add	local04, #4
066e8     12 25 02 FB | 	rdlong	local04, local04
066ec     FE 25 0E F2 | 	cmp	local04, #510 wz
066f0     53 00 00 FF 
066f4     E0 E5 85 F1 | 	sub	objptr, ##42976
066f8     68 01 90 5D |  if_ne	jmp	#LR__0580
066fc     20 22 06 F6 | 	mov	local03, #32
06700     0F 27 02 F6 | 	mov	local05, local01
06704     10 29 02 F6 | 	mov	local06, local02
06708     11 2B 02 F6 | 	mov	local07, local03
0670c     69 00 00 FF 
06710     50 E4 05 F1 | 	add	objptr, ##53840
06714     F2 2C 02 FB | 	rdlong	local08, objptr
06718     16 2F 02 F6 | 	mov	local09, local08
0671c     01 2E 66 F0 | 	shl	local09, #1
06720     16 2F 02 F1 | 	add	local09, local08
06724     02 2E 66 F0 | 	shl	local09, #2
06728     03 00 00 FF 
0672c     00 E4 85 F1 | 	sub	objptr, ##1536
06730     F2 2E 02 F1 | 	add	local09, objptr
06734     17 27 62 FC | 	wrlong	local05, local09
06738     03 00 00 FF 
0673c     00 E4 05 F1 | 	add	objptr, ##1536
06740     F2 26 02 FB | 	rdlong	local05, objptr
06744     13 31 02 F6 | 	mov	local10, local05
06748     01 30 66 F0 | 	shl	local10, #1
0674c     13 31 02 F1 | 	add	local10, local05
06750     02 30 66 F0 | 	shl	local10, #2
06754     03 00 00 FF 
06758     00 E4 85 F1 | 	sub	objptr, ##1536
0675c     F2 30 02 F1 | 	add	local10, objptr
06760     04 30 06 F1 | 	add	local10, #4
06764     18 29 62 FC | 	wrlong	local06, local10
06768     03 00 00 FF 
0676c     00 E4 05 F1 | 	add	objptr, ##1536
06770     F2 26 02 FB | 	rdlong	local05, objptr
06774     13 33 02 F6 | 	mov	local11, local05
06778     01 32 66 F0 | 	shl	local11, #1
0677c     13 33 02 F1 | 	add	local11, local05
06780     02 32 66 F0 | 	shl	local11, #2
06784     03 00 00 FF 
06788     00 E4 85 F1 | 	sub	objptr, ##1536
0678c     F2 32 02 F1 | 	add	local11, objptr
06790     08 32 06 F1 | 	add	local11, #8
06794     19 2B 62 FC | 	wrlong	local07, local11
06798     03 00 00 FF 
0679c     00 E4 05 F1 | 	add	objptr, ##1536
067a0     F2 26 02 FB | 	rdlong	local05, objptr
067a4     01 26 06 F1 | 	add	local05, #1
067a8     F2 26 62 FC | 	wrlong	local05, objptr
067ac     44 22 06 F6 | 	mov	local03, #68
067b0     0F 27 02 F6 | 	mov	local05, local01
067b4     10 29 02 F6 | 	mov	local06, local02
067b8     11 2B 02 F6 | 	mov	local07, local03
067bc     F2 2C 02 FB | 	rdlong	local08, objptr
067c0     16 2F 02 F6 | 	mov	local09, local08
067c4     01 2E 66 F0 | 	shl	local09, #1
067c8     16 2F 02 F1 | 	add	local09, local08
067cc     02 2E 66 F0 | 	shl	local09, #2
067d0     03 00 00 FF 
067d4     00 E4 85 F1 | 	sub	objptr, ##1536
067d8     F2 2E 02 F1 | 	add	local09, objptr
067dc     17 27 62 FC | 	wrlong	local05, local09
067e0     03 00 00 FF 
067e4     00 E4 05 F1 | 	add	objptr, ##1536
067e8     F2 32 02 FB | 	rdlong	local11, objptr
067ec     19 31 02 F6 | 	mov	local10, local11
067f0     01 30 66 F0 | 	shl	local10, #1
067f4     19 31 02 F1 | 	add	local10, local11
067f8     02 30 66 F0 | 	shl	local10, #2
067fc     03 00 00 FF 
06800     00 E4 85 F1 | 	sub	objptr, ##1536
06804     F2 30 02 F1 | 	add	local10, objptr
06808     04 30 06 F1 | 	add	local10, #4
0680c     18 29 62 FC | 	wrlong	local06, local10
06810     03 00 00 FF 
06814     00 E4 05 F1 | 	add	objptr, ##1536
06818     F2 30 02 FB | 	rdlong	local10, objptr
0681c     18 33 02 F6 | 	mov	local11, local10
06820     01 32 66 F0 | 	shl	local11, #1
06824     18 33 02 F1 | 	add	local11, local10
06828     02 32 66 F0 | 	shl	local11, #2
0682c     03 00 00 FF 
06830     00 E4 85 F1 | 	sub	objptr, ##1536
06834     F2 32 02 F1 | 	add	local11, objptr
06838     08 32 06 F1 | 	add	local11, #8
0683c     19 2B 62 FC | 	wrlong	local07, local11
06840     03 00 00 FF 
06844     00 E4 05 F1 | 	add	objptr, ##1536
06848     F2 26 02 FB | 	rdlong	local05, objptr
0684c     01 26 06 F1 | 	add	local05, #1
06850     F2 26 62 FC | 	wrlong	local05, objptr
06854     69 00 00 FF 
06858     50 E4 85 F1 | 	sub	objptr, ##53840
0685c     00 FA 05 F6 | 	mov	result1, #0
06860     20 05 90 FD | 	jmp	#LR__0587
06864                 | LR__0580
06864                 | ' do
06864                 | LR__0581
06864     A4 1B B0 FD | 	call	#_expr
06868                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
06868                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
06868     56 00 00 FF 
0686c     18 E4 05 F1 | 	add	objptr, ##44056
06870     F2 24 02 FB | 	rdlong	local04, objptr
06874     03 24 66 F0 | 	shl	local04, #3
06878     02 00 00 FF 
0687c     38 E4 85 F1 | 	sub	objptr, ##1080
06880     F2 24 02 F1 | 	add	local04, objptr
06884     04 24 06 F1 | 	add	local04, #4
06888     12 2D 02 FB | 	rdlong	local08, local04
0688c     11 2C 0E F2 | 	cmp	local08, #17 wz
06890     53 00 00 FF 
06894     E0 E5 85 F1 | 	sub	objptr, ##42976
06898     60 01 90 5D |  if_ne	jmp	#LR__0582
0689c     21 22 06 F6 | 	mov	local03, #33
068a0     0F 27 02 F6 | 	mov	local05, local01
068a4     10 29 02 F6 | 	mov	local06, local02
068a8     11 2B 02 F6 | 	mov	local07, local03
068ac     69 00 00 FF 
068b0     50 E4 05 F1 | 	add	objptr, ##53840
068b4     F2 2C 02 FB | 	rdlong	local08, objptr
068b8     16 2F 02 F6 | 	mov	local09, local08
068bc     01 2E 66 F0 | 	shl	local09, #1
068c0     16 2F 02 F1 | 	add	local09, local08
068c4     02 2E 66 F0 | 	shl	local09, #2
068c8     03 00 00 FF 
068cc     00 E4 85 F1 | 	sub	objptr, ##1536
068d0     F2 2E 02 F1 | 	add	local09, objptr
068d4     17 27 62 FC | 	wrlong	local05, local09
068d8     03 00 00 FF 
068dc     00 E4 05 F1 | 	add	objptr, ##1536
068e0     F2 32 02 FB | 	rdlong	local11, objptr
068e4     19 31 02 F6 | 	mov	local10, local11
068e8     01 30 66 F0 | 	shl	local10, #1
068ec     19 31 02 F1 | 	add	local10, local11
068f0     02 30 66 F0 | 	shl	local10, #2
068f4     03 00 00 FF 
068f8     00 E4 85 F1 | 	sub	objptr, ##1536
068fc     F2 30 02 F1 | 	add	local10, objptr
06900     04 30 06 F1 | 	add	local10, #4
06904     18 29 62 FC | 	wrlong	local06, local10
06908     03 00 00 FF 
0690c     00 E4 05 F1 | 	add	objptr, ##1536
06910     F2 26 02 FB | 	rdlong	local05, objptr
06914     13 33 02 F6 | 	mov	local11, local05
06918     01 32 66 F0 | 	shl	local11, #1
0691c     13 33 02 F1 | 	add	local11, local05
06920     02 32 66 F0 | 	shl	local11, #2
06924     03 00 00 FF 
06928     00 E4 85 F1 | 	sub	objptr, ##1536
0692c     F2 32 02 F1 | 	add	local11, objptr
06930     08 32 06 F1 | 	add	local11, #8
06934     19 2B 62 FC | 	wrlong	local07, local11
06938     03 00 00 FF 
0693c     00 E4 05 F1 | 	add	objptr, ##1536
06940     F2 26 02 FB | 	rdlong	local05, objptr
06944     01 26 06 F1 | 	add	local05, #1
06948     F2 26 62 FC | 	wrlong	local05, objptr
0694c     44 22 06 F6 | 	mov	local03, #68
06950     0F 27 02 F6 | 	mov	local05, local01
06954     10 29 02 F6 | 	mov	local06, local02
06958     11 2B 02 F6 | 	mov	local07, local03
0695c     F2 2C 02 FB | 	rdlong	local08, objptr
06960     16 2F 02 F6 | 	mov	local09, local08
06964     01 2E 66 F0 | 	shl	local09, #1
06968     16 2F 02 F1 | 	add	local09, local08
0696c     02 2E 66 F0 | 	shl	local09, #2
06970     03 00 00 FF 
06974     00 E4 85 F1 | 	sub	objptr, ##1536
06978     F2 2E 02 F1 | 	add	local09, objptr
0697c     17 27 62 FC | 	wrlong	local05, local09
06980     03 00 00 FF 
06984     00 E4 05 F1 | 	add	objptr, ##1536
06988     F2 32 02 FB | 	rdlong	local11, objptr
0698c     19 31 02 F6 | 	mov	local10, local11
06990     01 30 66 F0 | 	shl	local10, #1
06994     19 31 02 F1 | 	add	local10, local11
06998     02 30 66 F0 | 	shl	local10, #2
0699c     03 00 00 FF 
069a0     00 E4 85 F1 | 	sub	objptr, ##1536
069a4     F2 30 02 F1 | 	add	local10, objptr
069a8     04 30 06 F1 | 	add	local10, #4
069ac     18 29 62 FC | 	wrlong	local06, local10
069b0     03 00 00 FF 
069b4     00 E4 05 F1 | 	add	objptr, ##1536
069b8     F2 30 02 FB | 	rdlong	local10, objptr
069bc     18 33 02 F6 | 	mov	local11, local10
069c0     01 32 66 F0 | 	shl	local11, #1
069c4     18 33 02 F1 | 	add	local11, local10
069c8     02 32 66 F0 | 	shl	local11, #2
069cc     03 00 00 FF 
069d0     00 E4 85 F1 | 	sub	objptr, ##1536
069d4     F2 32 02 F1 | 	add	local11, objptr
069d8     08 32 06 F1 | 	add	local11, #8
069dc     19 2B 62 FC | 	wrlong	local07, local11
069e0     03 00 00 FF 
069e4     00 E4 05 F1 | 	add	objptr, ##1536
069e8     F2 26 02 FB | 	rdlong	local05, objptr
069ec     01 26 06 F1 | 	add	local05, #1
069f0     F2 26 62 FC | 	wrlong	local05, objptr
069f4     69 00 00 FF 
069f8     50 E4 85 F1 | 	sub	objptr, ##53840
069fc                 | LR__0582
069fc                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
069fc     56 00 00 FF 
06a00     18 E4 05 F1 | 	add	objptr, ##44056
06a04     F2 24 02 FB | 	rdlong	local04, objptr
06a08     03 24 66 F0 | 	shl	local04, #3
06a0c     02 00 00 FF 
06a10     38 E4 85 F1 | 	sub	objptr, ##1080
06a14     F2 24 02 F1 | 	add	local04, objptr
06a18     04 24 06 F1 | 	add	local04, #4
06a1c     12 2D 02 FB | 	rdlong	local08, local04
06a20     12 2C 0E F2 | 	cmp	local08, #18 wz
06a24     53 00 00 FF 
06a28     E0 E5 85 F1 | 	sub	objptr, ##42976
06a2c     60 01 90 5D |  if_ne	jmp	#LR__0583
06a30     22 22 06 F6 | 	mov	local03, #34
06a34     0F 27 02 F6 | 	mov	local05, local01
06a38     10 29 02 F6 | 	mov	local06, local02
06a3c     11 2B 02 F6 | 	mov	local07, local03
06a40     69 00 00 FF 
06a44     50 E4 05 F1 | 	add	objptr, ##53840
06a48     F2 2C 02 FB | 	rdlong	local08, objptr
06a4c     16 2F 02 F6 | 	mov	local09, local08
06a50     01 2E 66 F0 | 	shl	local09, #1
06a54     16 2F 02 F1 | 	add	local09, local08
06a58     02 2E 66 F0 | 	shl	local09, #2
06a5c     03 00 00 FF 
06a60     00 E4 85 F1 | 	sub	objptr, ##1536
06a64     F2 2E 02 F1 | 	add	local09, objptr
06a68     17 27 62 FC | 	wrlong	local05, local09
06a6c     03 00 00 FF 
06a70     00 E4 05 F1 | 	add	objptr, ##1536
06a74     F2 32 02 FB | 	rdlong	local11, objptr
06a78     19 31 02 F6 | 	mov	local10, local11
06a7c     01 30 66 F0 | 	shl	local10, #1
06a80     19 31 02 F1 | 	add	local10, local11
06a84     02 30 66 F0 | 	shl	local10, #2
06a88     03 00 00 FF 
06a8c     00 E4 85 F1 | 	sub	objptr, ##1536
06a90     F2 30 02 F1 | 	add	local10, objptr
06a94     04 30 06 F1 | 	add	local10, #4
06a98     18 29 62 FC | 	wrlong	local06, local10
06a9c     03 00 00 FF 
06aa0     00 E4 05 F1 | 	add	objptr, ##1536
06aa4     F2 26 02 FB | 	rdlong	local05, objptr
06aa8     13 33 02 F6 | 	mov	local11, local05
06aac     01 32 66 F0 | 	shl	local11, #1
06ab0     13 33 02 F1 | 	add	local11, local05
06ab4     02 32 66 F0 | 	shl	local11, #2
06ab8     03 00 00 FF 
06abc     00 E4 85 F1 | 	sub	objptr, ##1536
06ac0     F2 32 02 F1 | 	add	local11, objptr
06ac4     08 32 06 F1 | 	add	local11, #8
06ac8     19 2B 62 FC | 	wrlong	local07, local11
06acc     03 00 00 FF 
06ad0     00 E4 05 F1 | 	add	objptr, ##1536
06ad4     F2 26 02 FB | 	rdlong	local05, objptr
06ad8     01 26 06 F1 | 	add	local05, #1
06adc     F2 26 62 FC | 	wrlong	local05, objptr
06ae0     44 22 06 F6 | 	mov	local03, #68
06ae4     0F 27 02 F6 | 	mov	local05, local01
06ae8     10 29 02 F6 | 	mov	local06, local02
06aec     11 2B 02 F6 | 	mov	local07, local03
06af0     F2 2C 02 FB | 	rdlong	local08, objptr
06af4     16 2F 02 F6 | 	mov	local09, local08
06af8     01 2E 66 F0 | 	shl	local09, #1
06afc     16 2F 02 F1 | 	add	local09, local08
06b00     02 2E 66 F0 | 	shl	local09, #2
06b04     03 00 00 FF 
06b08     00 E4 85 F1 | 	sub	objptr, ##1536
06b0c     F2 2E 02 F1 | 	add	local09, objptr
06b10     17 27 62 FC | 	wrlong	local05, local09
06b14     03 00 00 FF 
06b18     00 E4 05 F1 | 	add	objptr, ##1536
06b1c     F2 32 02 FB | 	rdlong	local11, objptr
06b20     19 31 02 F6 | 	mov	local10, local11
06b24     01 30 66 F0 | 	shl	local10, #1
06b28     19 31 02 F1 | 	add	local10, local11
06b2c     02 30 66 F0 | 	shl	local10, #2
06b30     03 00 00 FF 
06b34     00 E4 85 F1 | 	sub	objptr, ##1536
06b38     F2 30 02 F1 | 	add	local10, objptr
06b3c     04 30 06 F1 | 	add	local10, #4
06b40     18 29 62 FC | 	wrlong	local06, local10
06b44     03 00 00 FF 
06b48     00 E4 05 F1 | 	add	objptr, ##1536
06b4c     F2 30 02 FB | 	rdlong	local10, objptr
06b50     18 33 02 F6 | 	mov	local11, local10
06b54     01 32 66 F0 | 	shl	local11, #1
06b58     18 33 02 F1 | 	add	local11, local10
06b5c     02 32 66 F0 | 	shl	local11, #2
06b60     03 00 00 FF 
06b64     00 E4 85 F1 | 	sub	objptr, ##1536
06b68     F2 32 02 F1 | 	add	local11, objptr
06b6c     08 32 06 F1 | 	add	local11, #8
06b70     19 2B 62 FC | 	wrlong	local07, local11
06b74     03 00 00 FF 
06b78     00 E4 05 F1 | 	add	objptr, ##1536
06b7c     F2 26 02 FB | 	rdlong	local05, objptr
06b80     01 26 06 F1 | 	add	local05, #1
06b84     F2 26 62 FC | 	wrlong	local05, objptr
06b88     69 00 00 FF 
06b8c     50 E4 85 F1 | 	sub	objptr, ##53840
06b90                 | LR__0583
06b90                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
06b90     56 00 00 FF 
06b94     18 E4 05 F1 | 	add	objptr, ##44056
06b98     F2 24 02 FB | 	rdlong	local04, objptr
06b9c     03 24 66 F0 | 	shl	local04, #3
06ba0     02 00 00 FF 
06ba4     38 E4 85 F1 | 	sub	objptr, ##1080
06ba8     F2 24 02 F1 | 	add	local04, objptr
06bac     04 24 06 F1 | 	add	local04, #4
06bb0     12 2D 02 FB | 	rdlong	local08, local04
06bb4     FE 2D 0E F2 | 	cmp	local08, #510 wz
06bb8     53 00 00 FF 
06bbc     E0 E5 85 F1 | 	sub	objptr, ##42976
06bc0     B8 00 90 5D |  if_ne	jmp	#LR__0584
06bc4     44 22 06 F6 | 	mov	local03, #68
06bc8     0F 27 02 F6 | 	mov	local05, local01
06bcc     10 29 02 F6 | 	mov	local06, local02
06bd0     11 2B 02 F6 | 	mov	local07, local03
06bd4     69 00 00 FF 
06bd8     50 E4 05 F1 | 	add	objptr, ##53840
06bdc     F2 2C 02 FB | 	rdlong	local08, objptr
06be0     16 2F 02 F6 | 	mov	local09, local08
06be4     01 2E 66 F0 | 	shl	local09, #1
06be8     16 2F 02 F1 | 	add	local09, local08
06bec     02 2E 66 F0 | 	shl	local09, #2
06bf0     03 00 00 FF 
06bf4     00 E4 85 F1 | 	sub	objptr, ##1536
06bf8     F2 2E 02 F1 | 	add	local09, objptr
06bfc     17 27 62 FC | 	wrlong	local05, local09
06c00     03 00 00 FF 
06c04     00 E4 05 F1 | 	add	objptr, ##1536
06c08     F2 32 02 FB | 	rdlong	local11, objptr
06c0c     19 31 02 F6 | 	mov	local10, local11
06c10     01 30 66 F0 | 	shl	local10, #1
06c14     19 31 02 F1 | 	add	local10, local11
06c18     02 30 66 F0 | 	shl	local10, #2
06c1c     03 00 00 FF 
06c20     00 E4 85 F1 | 	sub	objptr, ##1536
06c24     F2 30 02 F1 | 	add	local10, objptr
06c28     04 30 06 F1 | 	add	local10, #4
06c2c     18 29 62 FC | 	wrlong	local06, local10
06c30     03 00 00 FF 
06c34     00 E4 05 F1 | 	add	objptr, ##1536
06c38     F2 30 02 FB | 	rdlong	local10, objptr
06c3c     18 33 02 F6 | 	mov	local11, local10
06c40     01 32 66 F0 | 	shl	local11, #1
06c44     18 33 02 F1 | 	add	local11, local10
06c48     02 32 66 F0 | 	shl	local11, #2
06c4c     03 00 00 FF 
06c50     00 E4 85 F1 | 	sub	objptr, ##1536
06c54     F2 32 02 F1 | 	add	local11, objptr
06c58     08 32 06 F1 | 	add	local11, #8
06c5c     19 2B 62 FC | 	wrlong	local07, local11
06c60     03 00 00 FF 
06c64     00 E4 05 F1 | 	add	objptr, ##1536
06c68     F2 26 02 FB | 	rdlong	local05, objptr
06c6c     01 26 06 F1 | 	add	local05, #1
06c70     F2 26 62 FC | 	wrlong	local05, objptr
06c74     69 00 00 FF 
06c78     50 E4 85 F1 | 	sub	objptr, ##53840
06c7c                 | LR__0584
06c7c                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then  return 22
06c7c     56 00 00 FF 
06c80     18 E4 05 F1 | 	add	objptr, ##44056
06c84     F2 24 02 FB | 	rdlong	local04, objptr
06c88     03 24 66 F0 | 	shl	local04, #3
06c8c     02 00 00 FF 
06c90     38 E4 85 F1 | 	sub	objptr, ##1080
06c94     F2 24 02 F1 | 	add	local04, objptr
06c98     04 24 06 F1 | 	add	local04, #4
06c9c     12 2D 02 FB | 	rdlong	local08, local04
06ca0     11 2C 0E F2 | 	cmp	local08, #17 wz
06ca4     53 00 00 FF 
06ca8     E0 E5 85 F1 | 	sub	objptr, ##42976
06cac     6C 00 90 AD |  if_e	jmp	#LR__0585
06cb0     56 00 00 FF 
06cb4     18 E4 05 F1 | 	add	objptr, ##44056
06cb8     F2 2C 02 FB | 	rdlong	local08, objptr
06cbc     03 2C 66 F0 | 	shl	local08, #3
06cc0     02 00 00 FF 
06cc4     38 E4 85 F1 | 	sub	objptr, ##1080
06cc8     F2 2C 02 F1 | 	add	local08, objptr
06ccc     04 2C 06 F1 | 	add	local08, #4
06cd0     16 2D 02 FB | 	rdlong	local08, local08
06cd4     12 2C 0E F2 | 	cmp	local08, #18 wz
06cd8     53 00 00 FF 
06cdc     E0 E5 85 F1 | 	sub	objptr, ##42976
06ce0     38 00 90 AD |  if_e	jmp	#LR__0585
06ce4     56 00 00 FF 
06ce8     18 E4 05 F1 | 	add	objptr, ##44056
06cec     F2 32 02 FB | 	rdlong	local11, objptr
06cf0     03 32 66 F0 | 	shl	local11, #3
06cf4     02 00 00 FF 
06cf8     38 E4 85 F1 | 	sub	objptr, ##1080
06cfc     F2 32 02 F1 | 	add	local11, objptr
06d00     04 32 06 F1 | 	add	local11, #4
06d04     19 33 02 FB | 	rdlong	local11, local11
06d08     FE 33 0E F2 | 	cmp	local11, #510 wz
06d0c     53 00 00 FF 
06d10     E0 E5 85 F1 | 	sub	objptr, ##42976
06d14     16 FA 05 56 |  if_ne	mov	result1, #22
06d18     68 00 90 5D |  if_ne	jmp	#LR__0587
06d1c                 | LR__0585
06d1c     56 00 00 FF 
06d20     18 E4 05 F1 | 	add	objptr, ##44056
06d24     F2 24 02 FB | 	rdlong	local04, objptr
06d28     01 24 06 F1 | 	add	local04, #1
06d2c     F2 24 62 FC | 	wrlong	local04, objptr
06d30     03 24 66 F0 | 	shl	local04, #3
06d34     02 00 00 FF 
06d38     38 E4 85 F1 | 	sub	objptr, ##1080
06d3c     F2 24 02 F1 | 	add	local04, objptr
06d40     04 24 06 F1 | 	add	local04, #4
06d44     12 2D 02 FB | 	rdlong	local08, local04
06d48     FE 2D 0E F2 | 	cmp	local08, #510 wz
06d4c     53 00 00 FF 
06d50     E0 E5 85 F1 | 	sub	objptr, ##42976
06d54     28 00 90 AD |  if_e	jmp	#LR__0586
06d58     56 00 00 FF 
06d5c     18 E4 05 F1 | 	add	objptr, ##44056
06d60     F2 32 02 FB | 	rdlong	local11, objptr
06d64     0E 00 00 FF 
06d68     1C E4 05 F1 | 	add	objptr, ##7196
06d6c     F2 30 02 FB | 	rdlong	local10, objptr
06d70     64 00 00 FF 
06d74     34 E4 85 F1 | 	sub	objptr, ##51252
06d78     18 33 52 F2 | 	cmps	local11, local10 wc
06d7c     E4 FA 9F CD |  if_b	jmp	#LR__0581
06d80                 | LR__0586
06d80                 | ' return 0
06d80     00 FA 05 F6 | 	mov	result1, #0
06d84                 | LR__0587
06d84     A7 F0 03 F6 | 	mov	ptra, fp
06d88     B2 00 A0 FD | 	call	#popregs_
06d8c                 | _compile_print_ret
06d8c     2D 00 64 FD | 	ret
06d90                 | 
06d90                 | ' 
06d90                 | ' function compile_if() as ulong  
06d90                 | _compile_if
06d90     05 4A 05 F6 | 	mov	COUNT_, #5
06d94     A8 00 A0 FD | 	call	#pushregs_
06d98                 | _compile_if_enter
06d98     28 F3 BF FD | 	call	#_compile_converttoint
06d9c                 | ' return err
06d9c     56 00 00 FF 
06da0     18 E4 05 F1 | 	add	objptr, ##44056
06da4     F2 FA 01 FB | 	rdlong	result1, objptr
06da8     01 FA 05 F1 | 	add	result1, #1
06dac     F2 FA 61 FC | 	wrlong	result1, objptr
06db0     58 22 06 F6 | 	mov	local03, #88
06db4     0F 25 02 F6 | 	mov	local04, local01
06db8     10 27 02 F6 | 	mov	local05, local02
06dbc     11 1F 02 F6 | 	mov	local01, local03
06dc0     13 00 00 FF 
06dc4     38 E4 05 F1 | 	add	objptr, ##9784
06dc8     F2 12 02 FB | 	rdlong	arg01, objptr
06dcc     09 FB 01 F6 | 	mov	result1, arg01
06dd0     01 FA 65 F0 | 	shl	result1, #1
06dd4     09 FB 01 F1 | 	add	result1, arg01
06dd8     02 FA 65 F0 | 	shl	result1, #2
06ddc     03 00 00 FF 
06de0     00 E4 85 F1 | 	sub	objptr, ##1536
06de4     F2 FA 01 F1 | 	add	result1, objptr
06de8     FD 24 62 FC | 	wrlong	local04, result1
06dec     03 00 00 FF 
06df0     00 E4 05 F1 | 	add	objptr, ##1536
06df4     F2 12 02 FB | 	rdlong	arg01, objptr
06df8     09 25 02 F6 | 	mov	local04, arg01
06dfc     01 24 66 F0 | 	shl	local04, #1
06e00     09 25 02 F1 | 	add	local04, arg01
06e04     02 24 66 F0 | 	shl	local04, #2
06e08     03 00 00 FF 
06e0c     00 E4 85 F1 | 	sub	objptr, ##1536
06e10     F2 24 02 F1 | 	add	local04, objptr
06e14     04 24 06 F1 | 	add	local04, #4
06e18     12 27 62 FC | 	wrlong	local05, local04
06e1c     03 00 00 FF 
06e20     00 E4 05 F1 | 	add	objptr, ##1536
06e24     F2 24 02 FB | 	rdlong	local04, objptr
06e28     12 27 02 F6 | 	mov	local05, local04
06e2c     01 26 66 F0 | 	shl	local05, #1
06e30     12 27 02 F1 | 	add	local05, local04
06e34     02 26 66 F0 | 	shl	local05, #2
06e38     03 00 00 FF 
06e3c     00 E4 85 F1 | 	sub	objptr, ##1536
06e40     F2 26 02 F1 | 	add	local05, objptr
06e44     08 26 06 F1 | 	add	local05, #8
06e48     13 1F 62 FC | 	wrlong	local01, local05
06e4c     03 00 00 FF 
06e50     00 E4 05 F1 | 	add	objptr, ##1536
06e54     F2 24 02 FB | 	rdlong	local04, objptr
06e58     01 24 06 F1 | 	add	local04, #1
06e5c     F2 24 62 FC | 	wrlong	local04, objptr
06e60                 | ' 
06e60                 | ' 'print "In compile_if"
06e60                 | ' compile_int_fun_1p()
06e60                 | ' cmd=lparts(ct).token : ct+=1
06e60                 | ' 'print cmd ' : if cmd<> token_then then print "Expected then" else print "Found then"
06e60                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
06e60                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
06e60     13 00 00 FF 
06e64     38 E4 85 F1 | 	sub	objptr, ##9784
06e68     F2 26 02 FB | 	rdlong	local05, objptr
06e6c     01 26 06 F1 | 	add	local05, #1
06e70     03 26 66 F0 | 	shl	local05, #3
06e74     02 00 00 FF 
06e78     38 E4 85 F1 | 	sub	objptr, ##1080
06e7c     F2 26 02 F1 | 	add	local05, objptr
06e80     13 13 02 FB | 	rdlong	arg01, local05
06e84     53 00 00 FF 
06e88     E0 E5 85 F1 | 	sub	objptr, ##42976
06e8c                 | ' 
06e8c                 | ' select case s
06e8c     41 01 00 FF 
06e90     99 15 06 F6 | 	mov	arg02, ##@LR__4404
06e94     44 1E B1 FD | 	call	#__system___string_cmp
06e98     00 FA 0D F2 | 	cmp	result1, #0 wz
06e9c     1B FA 05 A6 |  if_e	mov	result1, #27
06ea0     00 FA 05 56 |  if_ne	mov	result1, #0
06ea4     00 FA 0D F2 | 	cmp	result1, #0 wz
06ea8     0C 00 90 AD |  if_e	jmp	#LR__0590
06eac     05 12 06 F6 | 	mov	arg01, #5
06eb0     20 EC BF FD | 	call	#_compile_immediate_assign
06eb4     08 00 90 FD | 	jmp	#LR__0591
06eb8                 | LR__0590
06eb8     05 12 06 F6 | 	mov	arg01, #5
06ebc     6C E4 BF FD | 	call	#_compile_immediate
06ec0                 | LR__0591
06ec0                 | ' 
06ec0                 | ' 
06ec0                 | ' return 0
06ec0     00 FA 05 F6 | 	mov	result1, #0
06ec4     A7 F0 03 F6 | 	mov	ptra, fp
06ec8     B2 00 A0 FD | 	call	#popregs_
06ecc                 | _compile_if_ret
06ecc     2D 00 64 FD | 	ret
06ed0                 | 
06ed0                 | ' 
06ed0                 | ' function compile_else() as ulong  
06ed0                 | _compile_else
06ed0     05 4A 05 F6 | 	mov	COUNT_, #5
06ed4     A8 00 A0 FD | 	call	#pushregs_
06ed8                 | _compile_else_enter
06ed8     5A 22 06 F6 | 	mov	local03, #90
06edc     0F 25 02 F6 | 	mov	local04, local01
06ee0     10 27 02 F6 | 	mov	local05, local02
06ee4     11 1F 02 F6 | 	mov	local01, local03
06ee8     69 00 00 FF 
06eec     50 E4 05 F1 | 	add	objptr, ##53840
06ef0     F2 12 02 FB | 	rdlong	arg01, objptr
06ef4     09 FB 01 F6 | 	mov	result1, arg01
06ef8     01 FA 65 F0 | 	shl	result1, #1
06efc     09 FB 01 F1 | 	add	result1, arg01
06f00     02 FA 65 F0 | 	shl	result1, #2
06f04     03 00 00 FF 
06f08     00 E4 85 F1 | 	sub	objptr, ##1536
06f0c     F2 FA 01 F1 | 	add	result1, objptr
06f10     FD 24 62 FC | 	wrlong	local04, result1
06f14     03 00 00 FF 
06f18     00 E4 05 F1 | 	add	objptr, ##1536
06f1c     F2 FA 01 FB | 	rdlong	result1, objptr
06f20     FD 24 02 F6 | 	mov	local04, result1
06f24     01 24 66 F0 | 	shl	local04, #1
06f28     FD 24 02 F1 | 	add	local04, result1
06f2c     02 24 66 F0 | 	shl	local04, #2
06f30     03 00 00 FF 
06f34     00 E4 85 F1 | 	sub	objptr, ##1536
06f38     F2 24 02 F1 | 	add	local04, objptr
06f3c     04 24 06 F1 | 	add	local04, #4
06f40     12 27 62 FC | 	wrlong	local05, local04
06f44     03 00 00 FF 
06f48     00 E4 05 F1 | 	add	objptr, ##1536
06f4c     F2 24 02 FB | 	rdlong	local04, objptr
06f50     12 27 02 F6 | 	mov	local05, local04
06f54     01 26 66 F0 | 	shl	local05, #1
06f58     12 27 02 F1 | 	add	local05, local04
06f5c     02 26 66 F0 | 	shl	local05, #2
06f60     03 00 00 FF 
06f64     00 E4 85 F1 | 	sub	objptr, ##1536
06f68     F2 26 02 F1 | 	add	local05, objptr
06f6c     08 26 06 F1 | 	add	local05, #8
06f70     13 1F 62 FC | 	wrlong	local01, local05
06f74     03 00 00 FF 
06f78     00 E4 05 F1 | 	add	objptr, ##1536
06f7c     F2 24 02 FB | 	rdlong	local04, objptr
06f80     01 24 06 F1 | 	add	local04, #1
06f84     F2 24 62 FC | 	wrlong	local04, objptr
06f88                 | ' 
06f88                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
06f88                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
06f88     13 00 00 FF 
06f8c     38 E4 85 F1 | 	sub	objptr, ##9784
06f90     F2 26 02 FB | 	rdlong	local05, objptr
06f94     01 26 06 F1 | 	add	local05, #1
06f98     03 26 66 F0 | 	shl	local05, #3
06f9c     02 00 00 FF 
06fa0     38 E4 85 F1 | 	sub	objptr, ##1080
06fa4     F2 26 02 F1 | 	add	local05, objptr
06fa8     13 13 02 FB | 	rdlong	arg01, local05
06fac     53 00 00 FF 
06fb0     E0 E5 85 F1 | 	sub	objptr, ##42976
06fb4                 | ' 
06fb4                 | ' select case s
06fb4     41 01 00 FF 
06fb8     99 15 06 F6 | 	mov	arg02, ##@LR__4404
06fbc     1C 1D B1 FD | 	call	#__system___string_cmp
06fc0     00 FA 0D F2 | 	cmp	result1, #0 wz
06fc4     1B FA 05 A6 |  if_e	mov	result1, #27
06fc8     00 FA 05 56 |  if_ne	mov	result1, #0
06fcc     00 FA 0D F2 | 	cmp	result1, #0 wz
06fd0     0C 00 90 AD |  if_e	jmp	#LR__0600
06fd4     05 12 06 F6 | 	mov	arg01, #5
06fd8     F8 EA BF FD | 	call	#_compile_immediate_assign
06fdc     08 00 90 FD | 	jmp	#LR__0601
06fe0                 | LR__0600
06fe0     05 12 06 F6 | 	mov	arg01, #5
06fe4     44 E3 BF FD | 	call	#_compile_immediate
06fe8                 | LR__0601
06fe8                 | ' 
06fe8                 | ' 
06fe8                 | ' return 0
06fe8     00 FA 05 F6 | 	mov	result1, #0
06fec     A7 F0 03 F6 | 	mov	ptra, fp
06ff0     B2 00 A0 FD | 	call	#popregs_
06ff4                 | _compile_else_ret
06ff4     2D 00 64 FD | 	ret
06ff8                 | 
06ff8                 | ' 
06ff8                 | ' 
06ff8                 | ' function compile_dim() as ulong  
06ff8                 | _compile_dim
06ff8     11 4A 05 F6 | 	mov	COUNT_, #17
06ffc     A8 00 A0 FD | 	call	#pushregs_
07000     01 1E 06 F6 | 	mov	local01, #1
07004     01 20 06 F6 | 	mov	local02, #1
07008     01 22 06 F6 | 	mov	local03, #1
0700c                 | ' 
0700c                 | ' dims(0)=1: dims(1)=1: dims(2)=1
0700c                 | ' 
0700c                 | ' if isname(lparts(ct).part$) then 
0700c     56 00 00 FF 
07010     18 E4 05 F1 | 	add	objptr, ##44056
07014     F2 14 02 FB | 	rdlong	arg02, objptr
07018     03 14 66 F0 | 	shl	arg02, #3
0701c     02 00 00 FF 
07020     38 E4 85 F1 | 	sub	objptr, ##1080
07024     F2 14 02 F1 | 	add	arg02, objptr
07028     0A 13 02 FB | 	rdlong	arg01, arg02
0702c     53 00 00 FF 
07030     E0 E5 85 F1 | 	sub	objptr, ##42976
07034     D8 D2 BF FD | 	call	#_isname
07038     00 FA 0D F2 | 	cmp	result1, #0 wz
0703c     30 05 90 AD |  if_e	jmp	#LR__0634
07040     56 00 00 FF 
07044     18 E4 05 F1 | 	add	objptr, ##44056
07048     F2 24 02 FB | 	rdlong	local04, objptr
0704c     03 24 66 F0 | 	shl	local04, #3
07050     02 00 00 FF 
07054     38 E4 85 F1 | 	sub	objptr, ##1080
07058     F2 24 02 F1 | 	add	local04, objptr
0705c     12 27 02 FB | 	rdlong	local05, local04
07060     01 28 66 F6 | 	neg	local06, #1
07064                 | '   varname2$=lparts(ct).part$ 
07064                 | '   j=-1
07064                 | '   if varnum>0 then
07064     04 E4 85 F1 | 	sub	objptr, #4
07068     F2 2A 02 FB | 	rdlong	local07, objptr
0706c     53 00 00 FF 
07070     DC E5 85 F1 | 	sub	objptr, ##42972
07074     01 2A 56 F2 | 	cmps	local07, #1 wc
07078     58 00 90 CD |  if_b	jmp	#LR__0612
0707c                 | '  '   print "in dim, varnum=";varnum
0707c                 | '     for i=0 to varnum-1
0707c     00 2C 06 F6 | 	mov	local08, #0
07080     53 00 00 FF 
07084     DC E5 05 F1 | 	add	objptr, ##42972
07088     F2 2E 02 FB | 	rdlong	local09, objptr
0708c     53 00 00 FF 
07090     DC E5 85 F1 | 	sub	objptr, ##42972
07094                 | LR__0610
07094     17 2D 52 F2 | 	cmps	local08, local09 wc
07098     38 00 90 3D |  if_ae	jmp	#LR__0611
0709c                 | '       if variables(i).name=varname2$ then j=i : exit
0709c     16 25 02 F6 | 	mov	local04, local08
070a0     04 24 66 F0 | 	shl	local04, #4
070a4     33 00 00 FF 
070a8     DC E5 05 F1 | 	add	objptr, ##26588
070ac     F2 24 02 F1 | 	add	local04, objptr
070b0     12 13 02 FB | 	rdlong	arg01, local04
070b4     13 15 02 F6 | 	mov	arg02, local05
070b8     33 00 00 FF 
070bc     DC E5 85 F1 | 	sub	objptr, ##26588
070c0     18 1C B1 FD | 	call	#__system___string_cmp
070c4     00 FA 0D F2 | 	cmp	result1, #0 wz
070c8     16 29 02 A6 |  if_e	mov	local06, local08
070cc     01 2C 06 51 |  if_ne	add	local08, #1
070d0     C0 FF 9F 5D |  if_ne	jmp	#LR__0610
070d4                 | LR__0611
070d4                 | LR__0612
070d4                 | '   if j<>-1 then printerror (42) : return 42
070d4     FF FF 7F FF 
070d8     FF 29 0E F2 | 	cmp	local06, ##-1 wz
070dc     10 00 90 AD |  if_e	jmp	#LR__0613
070e0     2A 12 06 F6 | 	mov	arg01, #42
070e4     A8 E6 B0 FD | 	call	#_printerror
070e8     2A FA 05 F6 | 	mov	result1, #42
070ec     D8 05 90 FD | 	jmp	#LR__0636
070f0                 | LR__0613
070f0                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then printerror(43) : return 43
070f0     56 00 00 FF 
070f4     18 E4 05 F1 | 	add	objptr, ##44056
070f8     F2 14 02 FB | 	rdlong	arg02, objptr
070fc     01 14 06 F1 | 	add	arg02, #1
07100     03 14 66 F0 | 	shl	arg02, #3
07104     02 00 00 FF 
07108     38 E4 85 F1 | 	sub	objptr, ##1080
0710c     F2 14 02 F1 | 	add	arg02, objptr
07110     0A 13 02 FB | 	rdlong	arg01, arg02
07114     43 01 00 FF 
07118     01 14 06 F6 | 	mov	arg02, ##@LR__4552
0711c     53 00 00 FF 
07120     E0 E5 85 F1 | 	sub	objptr, ##42976
07124     B4 1B B1 FD | 	call	#__system___string_cmp
07128     00 FA 0D F2 | 	cmp	result1, #0 wz
0712c     50 00 90 AD |  if_e	jmp	#LR__0614
07130     56 00 00 FF 
07134     18 E4 05 F1 | 	add	objptr, ##44056
07138     F2 2E 02 FB | 	rdlong	local09, objptr
0713c     01 2E 06 F1 | 	add	local09, #1
07140     03 2E 66 F0 | 	shl	local09, #3
07144     02 00 00 FF 
07148     38 E4 85 F1 | 	sub	objptr, ##1080
0714c     F2 2E 02 F1 | 	add	local09, objptr
07150     17 13 02 FB | 	rdlong	arg01, local09
07154     43 01 00 FF 
07158     03 14 06 F6 | 	mov	arg02, ##@LR__4553
0715c     53 00 00 FF 
07160     E0 E5 85 F1 | 	sub	objptr, ##42976
07164     74 1B B1 FD | 	call	#__system___string_cmp
07168     00 FA 0D F2 | 	cmp	result1, #0 wz
0716c     10 00 90 AD |  if_e	jmp	#LR__0614
07170     2B 12 06 F6 | 	mov	arg01, #43
07174     18 E6 B0 FD | 	call	#_printerror
07178     2B FA 05 F6 | 	mov	result1, #43
0717c     48 05 90 FD | 	jmp	#LR__0636
07180                 | LR__0614
07180                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350
07180     56 00 00 FF 
07184     18 E4 05 F1 | 	add	objptr, ##44056
07188     F2 14 02 FB | 	rdlong	arg02, objptr
0718c     01 14 06 F1 | 	add	arg02, #1
07190     03 14 66 F0 | 	shl	arg02, #3
07194     02 00 00 FF 
07198     38 E4 85 F1 | 	sub	objptr, ##1080
0719c     F2 14 02 F1 | 	add	arg02, objptr
071a0     0A 13 02 FB | 	rdlong	arg01, arg02
071a4     43 01 00 FF 
071a8     06 14 06 F6 | 	mov	arg02, ##@LR__4554
071ac     53 00 00 FF 
071b0     E0 E5 85 F1 | 	sub	objptr, ##42976
071b4     24 1B B1 FD | 	call	#__system___string_cmp
071b8     00 FA 0D F2 | 	cmp	result1, #0 wz
071bc     56 00 00 AF 
071c0     18 E4 05 A1 |  if_e	add	objptr, ##44056
071c4     F2 30 02 AB |  if_e	rdlong	local10, objptr
071c8     56 00 00 AF 
071cc     18 E4 85 A1 |  if_e	sub	objptr, ##44056
071d0     01 30 06 A1 |  if_e	add	local10, #1
071d4     7C 01 90 AD |  if_e	jmp	#LR__0620
071d8     56 00 00 FF 
071dc     18 E4 05 F1 | 	add	objptr, ##44056
071e0     F2 30 02 FB | 	rdlong	local10, objptr
071e4     56 00 00 FF 
071e8     18 E4 85 F1 | 	sub	objptr, ##44056
071ec     02 30 06 F1 | 	add	local10, #2
071f0     00 32 06 F6 | 	mov	local11, #0
071f4                 | '   l=ct+2 : m=0 : do
071f4                 | LR__0615
071f4                 | '    ' print "in dim, lparts: ";lparts(l).part$, isdec(lparts(l).part$)
071f4                 | '     if isdec(lparts(l).part$) then 
071f4     18 25 02 F6 | 	mov	local04, local10
071f8     03 24 66 F0 | 	shl	local04, #3
071fc     53 00 00 FF 
07200     E0 E5 05 F1 | 	add	objptr, ##42976
07204     F2 24 02 F1 | 	add	local04, objptr
07208     12 13 02 FB | 	rdlong	arg01, local04
0720c     53 00 00 FF 
07210     E0 E5 85 F1 | 	sub	objptr, ##42976
07214     9C D7 BF FD | 	call	#_isdec
07218     00 FA 0D F2 | 	cmp	result1, #0 wz
0721c     44 00 90 AD |  if_e	jmp	#LR__0616
07220     19 35 02 F6 | 	mov	local12, local11
07224     0F 35 06 F1 | 	add	local12, #local01
07228     18 2F 02 F6 | 	mov	local09, local10
0722c     03 2E 66 F0 | 	shl	local09, #3
07230     53 00 00 FF 
07234     E0 E5 05 F1 | 	add	objptr, ##42976
07238     F2 2E 02 F1 | 	add	local09, objptr
0723c     17 13 02 FB | 	rdlong	arg01, local09
07240     00 14 06 F6 | 	mov	arg02, #0
07244     53 00 00 FF 
07248     E0 E5 85 F1 | 	sub	objptr, ##42976
0724c     C8 4B B1 FD | 	call	#__system____builtin_atoi
07250     FD 36 02 F6 | 	mov	local13, result1
07254                 | 	'.live	local13
07254                 | 	'.live	local12
07254     00 34 8E F9 | 	altd	local12, #0
07258     1B 35 02 F6 | 	mov	local12, local13
0725c     01 32 06 F1 | 	add	local11, #1
07260     10 00 90 FD | 	jmp	#LR__0617
07264                 | LR__0616
07264     11 12 06 F6 | 	mov	arg01, #17
07268     24 E5 B0 FD | 	call	#_printerror
0726c                 | '       printerror (17)  : return(17)
0726c     11 FA 05 F6 | 	mov	result1, #17
07270     54 04 90 FD | 	jmp	#LR__0636
07274                 | LR__0617
07274                 | '     if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then printerror (44)  : return(44)
07274     18 25 02 F6 | 	mov	local04, local10
07278     01 24 06 F1 | 	add	local04, #1
0727c     03 24 66 F0 | 	shl	local04, #3
07280     53 00 00 FF 
07284     E0 E5 05 F1 | 	add	objptr, ##42976
07288     F2 24 02 F1 | 	add	local04, objptr
0728c     12 13 02 FB | 	rdlong	arg01, local04
07290     43 01 00 FF 
07294     09 14 06 F6 | 	mov	arg02, ##@LR__4555
07298     53 00 00 FF 
0729c     E0 E5 85 F1 | 	sub	objptr, ##42976
072a0     38 1A B1 FD | 	call	#__system___string_cmp
072a4     00 FA 0D F2 | 	cmp	result1, #0 wz
072a8     48 00 90 AD |  if_e	jmp	#LR__0618
072ac     18 37 02 F6 | 	mov	local13, local10
072b0     01 36 06 F1 | 	add	local13, #1
072b4     03 36 66 F0 | 	shl	local13, #3
072b8     53 00 00 FF 
072bc     E0 E5 05 F1 | 	add	objptr, ##42976
072c0     F2 36 02 F1 | 	add	local13, objptr
072c4     1B 13 02 FB | 	rdlong	arg01, local13
072c8     43 01 00 FF 
072cc     0B 14 06 F6 | 	mov	arg02, ##@LR__4556
072d0     53 00 00 FF 
072d4     E0 E5 85 F1 | 	sub	objptr, ##42976
072d8     00 1A B1 FD | 	call	#__system___string_cmp
072dc     00 FA 0D F2 | 	cmp	result1, #0 wz
072e0     10 00 90 AD |  if_e	jmp	#LR__0618
072e4     2C 12 06 F6 | 	mov	arg01, #44
072e8     A4 E4 B0 FD | 	call	#_printerror
072ec     2C FA 05 F6 | 	mov	result1, #44
072f0     D4 03 90 FD | 	jmp	#LR__0636
072f4                 | LR__0618
072f4     02 30 06 F1 | 	add	local10, #2
072f8     18 25 02 F6 | 	mov	local04, local10
072fc     01 24 86 F1 | 	sub	local04, #1
07300     03 24 66 F0 | 	shl	local04, #3
07304     53 00 00 FF 
07308     E0 E5 05 F1 | 	add	objptr, ##42976
0730c     F2 24 02 F1 | 	add	local04, objptr
07310     12 13 02 FB | 	rdlong	arg01, local04
07314     43 01 00 FF 
07318     0D 14 06 F6 | 	mov	arg02, ##@LR__4557
0731c     53 00 00 FF 
07320     E0 E5 85 F1 | 	sub	objptr, ##42976
07324     B4 19 B1 FD | 	call	#__system___string_cmp
07328     00 FA 0D F2 | 	cmp	result1, #0 wz
0732c     03 32 56 52 |  if_ne	cmps	local11, #3 wc
07330     C0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0615
07334                 | '   if m>3 then printerror(45): return(45)
07334     04 32 56 F2 | 	cmps	local11, #4 wc
07338     10 00 90 CD |  if_b	jmp	#LR__0619
0733c     2D 12 06 F6 | 	mov	arg01, #45
07340     4C E4 B0 FD | 	call	#_printerror
07344     2D FA 05 F6 | 	mov	result1, #45
07348     7C 03 90 FD | 	jmp	#LR__0636
0734c                 | LR__0619
0734c     00 39 06 F6 | 	mov	local14, #256
07350     0C 3A 06 F6 | 	mov	local15, #12
07354                 | LR__0620
07354                 | '  ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' print lparts(l-1).part$,lparts(l).part$, lparts(l+1).part$
07354                 | '   arraytype=array_no_type : esize=12
07354                 | ' 1350 
07354                 | '   if lparts(l).part$="as" then
07354     18 25 02 F6 | 	mov	local04, local10
07358     03 24 66 F0 | 	shl	local04, #3
0735c     53 00 00 FF 
07360     E0 E5 05 F1 | 	add	objptr, ##42976
07364     F2 24 02 F1 | 	add	local04, objptr
07368     12 13 02 FB | 	rdlong	arg01, local04
0736c     43 01 00 FF 
07370     0F 14 06 F6 | 	mov	arg02, ##@LR__4558
07374     53 00 00 FF 
07378     E0 E5 85 F1 | 	sub	objptr, ##42976
0737c     5C 19 B1 FD | 	call	#__system___string_cmp
07380     00 FA 0D F2 | 	cmp	result1, #0 wz
07384     F8 01 90 5D |  if_ne	jmp	#LR__0635
07388                 | '     select case lparts(l+1).part$
07388     18 35 02 F6 | 	mov	local12, local10
0738c     01 34 06 F1 | 	add	local12, #1
07390     03 34 66 F0 | 	shl	local12, #3
07394     53 00 00 FF 
07398     E0 E5 05 F1 | 	add	objptr, ##42976
0739c     F2 34 02 F1 | 	add	local12, objptr
073a0     1A 3D 02 FB | 	rdlong	local16, local12
073a4     43 01 00 FF 
073a8     12 14 06 F6 | 	mov	arg02, ##@LR__4559
073ac     1E 13 02 F6 | 	mov	arg01, local16
073b0     53 00 00 FF 
073b4     E0 E5 85 F1 | 	sub	objptr, ##42976
073b8     20 19 B1 FD | 	call	#__system___string_cmp
073bc     00 FA 0D F2 | 	cmp	result1, #0 wz
073c0     0C 01 90 AD |  if_e	jmp	#LR__0621
073c4     43 01 00 FF 
073c8     17 14 06 F6 | 	mov	arg02, ##@LR__4560
073cc     1E 13 02 F6 | 	mov	arg01, local16
073d0     08 19 B1 FD | 	call	#__system___string_cmp
073d4     00 FA 0D F2 | 	cmp	result1, #0 wz
073d8     00 01 90 AD |  if_e	jmp	#LR__0622
073dc     43 01 00 FF 
073e0     1D 14 06 F6 | 	mov	arg02, ##@LR__4561
073e4     1E 13 02 F6 | 	mov	arg01, local16
073e8     F0 18 B1 FD | 	call	#__system___string_cmp
073ec     00 FA 0D F2 | 	cmp	result1, #0 wz
073f0     F4 00 90 AD |  if_e	jmp	#LR__0623
073f4     43 01 00 FF 
073f8     23 14 06 F6 | 	mov	arg02, ##@LR__4562
073fc     1E 13 02 F6 | 	mov	arg01, local16
07400     D8 18 B1 FD | 	call	#__system___string_cmp
07404     00 FA 0D F2 | 	cmp	result1, #0 wz
07408     E8 00 90 AD |  if_e	jmp	#LR__0624
0740c     43 01 00 FF 
07410     2A 14 06 F6 | 	mov	arg02, ##@LR__4563
07414     1E 13 02 F6 | 	mov	arg01, local16
07418     C0 18 B1 FD | 	call	#__system___string_cmp
0741c     00 FA 0D F2 | 	cmp	result1, #0 wz
07420     DC 00 90 AD |  if_e	jmp	#LR__0625
07424     43 01 00 FF 
07428     2F 14 06 F6 | 	mov	arg02, ##@LR__4564
0742c     1E 13 02 F6 | 	mov	arg01, local16
07430     A8 18 B1 FD | 	call	#__system___string_cmp
07434     00 FA 0D F2 | 	cmp	result1, #0 wz
07438     D0 00 90 AD |  if_e	jmp	#LR__0626
0743c     43 01 00 FF 
07440     37 14 06 F6 | 	mov	arg02, ##@LR__4565
07444     1E 13 02 F6 | 	mov	arg01, local16
07448     90 18 B1 FD | 	call	#__system___string_cmp
0744c     00 FA 0D F2 | 	cmp	result1, #0 wz
07450     C4 00 90 AD |  if_e	jmp	#LR__0627
07454     43 01 00 FF 
07458     3D 14 06 F6 | 	mov	arg02, ##@LR__4566
0745c     1E 13 02 F6 | 	mov	arg01, local16
07460     78 18 B1 FD | 	call	#__system___string_cmp
07464     00 FA 0D F2 | 	cmp	result1, #0 wz
07468     B8 00 90 AD |  if_e	jmp	#LR__0628
0746c     43 01 00 FF 
07470     43 14 06 F6 | 	mov	arg02, ##@LR__4567
07474     1E 13 02 F6 | 	mov	arg01, local16
07478     60 18 B1 FD | 	call	#__system___string_cmp
0747c     00 FA 0D F2 | 	cmp	result1, #0 wz
07480     AC 00 90 AD |  if_e	jmp	#LR__0629
07484     43 01 00 FF 
07488     4A 14 06 F6 | 	mov	arg02, ##@LR__4568
0748c     1E 13 02 F6 | 	mov	arg01, local16
07490     48 18 B1 FD | 	call	#__system___string_cmp
07494     00 FA 0D F2 | 	cmp	result1, #0 wz
07498     A0 00 90 AD |  if_e	jmp	#LR__0630
0749c     43 01 00 FF 
074a0     51 14 06 F6 | 	mov	arg02, ##@LR__4569
074a4     1E 13 02 F6 | 	mov	arg01, local16
074a8     30 18 B1 FD | 	call	#__system___string_cmp
074ac     00 FA 0D F2 | 	cmp	result1, #0 wz
074b0     94 00 90 AD |  if_e	jmp	#LR__0631
074b4     43 01 00 FF 
074b8     58 14 06 F6 | 	mov	arg02, ##@LR__4570
074bc     1E 13 02 F6 | 	mov	arg01, local16
074c0     18 18 B1 FD | 	call	#__system___string_cmp
074c4     00 FA 0D F2 | 	cmp	result1, #0 wz
074c8     88 00 90 AD |  if_e	jmp	#LR__0632
074cc     90 00 90 FD | 	jmp	#LR__0633
074d0                 | LR__0621
074d0     01 39 06 F6 | 	mov	local14, #257
074d4     01 3A 06 F6 | 	mov	local15, #1
074d8     A4 00 90 FD | 	jmp	#LR__0635
074dc                 | LR__0622
074dc     02 39 06 F6 | 	mov	local14, #258
074e0     01 3A 06 F6 | 	mov	local15, #1
074e4     98 00 90 FD | 	jmp	#LR__0635
074e8                 | LR__0623
074e8     03 39 06 F6 | 	mov	local14, #259
074ec     02 3A 06 F6 | 	mov	local15, #2
074f0     8C 00 90 FD | 	jmp	#LR__0635
074f4                 | LR__0624
074f4     04 39 06 F6 | 	mov	local14, #260
074f8     02 3A 06 F6 | 	mov	local15, #2
074fc     80 00 90 FD | 	jmp	#LR__0635
07500                 | LR__0625
07500     05 39 06 F6 | 	mov	local14, #261
07504     04 3A 06 F6 | 	mov	local15, #4
07508     74 00 90 FD | 	jmp	#LR__0635
0750c                 | LR__0626
0750c     05 39 06 F6 | 	mov	local14, #261
07510     04 3A 06 F6 | 	mov	local15, #4
07514     68 00 90 FD | 	jmp	#LR__0635
07518                 | LR__0627
07518     06 39 06 F6 | 	mov	local14, #262
0751c     04 3A 06 F6 | 	mov	local15, #4
07520     5C 00 90 FD | 	jmp	#LR__0635
07524                 | LR__0628
07524     07 39 06 F6 | 	mov	local14, #263
07528     08 3A 06 F6 | 	mov	local15, #8
0752c     50 00 90 FD | 	jmp	#LR__0635
07530                 | LR__0629
07530     08 39 06 F6 | 	mov	local14, #264
07534     08 3A 06 F6 | 	mov	local15, #8
07538     44 00 90 FD | 	jmp	#LR__0635
0753c                 | LR__0630
0753c     09 39 06 F6 | 	mov	local14, #265
07540     04 3A 06 F6 | 	mov	local15, #4
07544     38 00 90 FD | 	jmp	#LR__0635
07548                 | LR__0631
07548     0A 39 06 F6 | 	mov	local14, #266
0754c     08 3A 06 F6 | 	mov	local15, #8
07550     2C 00 90 FD | 	jmp	#LR__0635
07554                 | LR__0632
07554     0B 39 06 F6 | 	mov	local14, #267
07558     04 3A 06 F6 | 	mov	local15, #4
0755c     20 00 90 FD | 	jmp	#LR__0635
07560                 | LR__0633
07560     2F 12 06 F6 | 	mov	arg01, #47
07564     28 E2 B0 FD | 	call	#_printerror
07568     2F FA 05 F6 | 	mov	result1, #47
0756c     58 01 90 FD | 	jmp	#LR__0636
07570                 | LR__0634
07570     2E 12 06 F6 | 	mov	arg01, #46
07574     18 E2 B0 FD | 	call	#_printerror
07578                 | '   printerror(46): return 46
07578     2E FA 05 F6 | 	mov	result1, #46
0757c     48 01 90 FD | 	jmp	#LR__0636
07580                 | LR__0635
07580     0F 3B 02 FD | 	qmul	local15, local01
07584     18 2A 62 FD | 	getqx	local07
07588     10 2B 02 FD | 	qmul	local07, local02
0758c     18 3C 62 FD | 	getqx	local16
07590     11 3D 02 FD | 	qmul	local16, local03
07594     7A 00 00 FF 
07598     4C E4 05 F1 | 	add	objptr, ##62540
0759c     F2 3E 02 FB | 	rdlong	local17, objptr
075a0     1C 15 02 F6 | 	mov	arg02, local14
075a4     01 16 06 F6 | 	mov	arg03, #1
075a8     00 18 06 F6 | 	mov	arg04, #0
075ac                 | '     return fill(addr, pattern, count, listPtr, 4)
075ac     04 1A 06 F6 | 	mov	arg05, #4
075b0     18 3C 62 FD | 	getqx	local16
075b4     1E 3F 82 F1 | 	sub	local17, local16
075b8     10 3E 86 F1 | 	sub	local17, #16
075bc     F2 3E 62 FC | 	wrlong	local17, objptr
075c0     1F 13 02 F6 | 	mov	arg01, local17
075c4     6E 00 00 FF 
075c8     8C E5 85 F1 | 	sub	objptr, ##56716
075cc     2C 0D B1 FD | 	call	#_psram_spin2_fill
075d0     1F 13 02 F6 | 	mov	arg01, local17
075d4     02 12 06 F1 | 	add	arg01, #2
075d8     1D 15 02 F6 | 	mov	arg02, local15
075dc     01 16 06 F6 | 	mov	arg03, #1
075e0     00 18 06 F6 | 	mov	arg04, #0
075e4                 | '     return fill(addr, pattern, count, listPtr, 1)
075e4     01 1A 06 F6 | 	mov	arg05, #1
075e8     10 0D B1 FD | 	call	#_psram_spin2_fill
075ec     1F 13 02 F6 | 	mov	arg01, local17
075f0     04 12 06 F1 | 	add	arg01, #4
075f4     0F 15 02 F6 | 	mov	arg02, local01
075f8     01 16 06 F6 | 	mov	arg03, #1
075fc     00 18 06 F6 | 	mov	arg04, #0
07600                 | '     return fill(addr, pattern, count, listPtr, 4)
07600     04 1A 06 F6 | 	mov	arg05, #4
07604     F4 0C B1 FD | 	call	#_psram_spin2_fill
07608     1F 13 02 F6 | 	mov	arg01, local17
0760c     08 12 06 F1 | 	add	arg01, #8
07610     10 15 02 F6 | 	mov	arg02, local02
07614     01 16 06 F6 | 	mov	arg03, #1
07618     00 18 06 F6 | 	mov	arg04, #0
0761c                 | '     return fill(addr, pattern, count, listPtr, 4)
0761c     04 1A 06 F6 | 	mov	arg05, #4
07620     D8 0C B1 FD | 	call	#_psram_spin2_fill
07624     1F 13 02 F6 | 	mov	arg01, local17
07628     0C 12 06 F1 | 	add	arg01, #12
0762c     11 15 02 F6 | 	mov	arg02, local03
07630     01 16 06 F6 | 	mov	arg03, #1
07634     00 18 06 F6 | 	mov	arg04, #0
07638                 | '     return fill(addr, pattern, count, listPtr, 4)
07638     04 1A 06 F6 | 	mov	arg05, #4
0763c     BC 0C B1 FD | 	call	#_psram_spin2_fill
07640     48 00 00 FF 
07644     1C E5 05 F1 | 	add	objptr, ##37148
07648     F2 24 02 FB | 	rdlong	local04, objptr
0764c     04 24 66 F0 | 	shl	local04, #4
07650     20 00 00 FF 
07654     00 E4 85 F1 | 	sub	objptr, ##16384
07658     F2 24 02 F1 | 	add	local04, objptr
0765c     12 27 62 FC | 	wrlong	local05, local04
07660     20 00 00 FF 
07664     00 E4 05 F1 | 	add	objptr, ##16384
07668     F2 24 02 FB | 	rdlong	local04, objptr
0766c     04 24 66 F0 | 	shl	local04, #4
07670     20 00 00 FF 
07674     00 E4 85 F1 | 	sub	objptr, ##16384
07678     F2 24 02 F1 | 	add	local04, objptr
0767c     04 24 06 F1 | 	add	local04, #4
07680     12 3F 62 FC | 	wrlong	local17, local04
07684     20 00 00 FF 
07688     00 E4 05 F1 | 	add	objptr, ##16384
0768c     F2 24 02 FB | 	rdlong	local04, objptr
07690     04 24 66 F0 | 	shl	local04, #4
07694     20 00 00 FF 
07698     00 E4 85 F1 | 	sub	objptr, ##16384
0769c     F2 24 02 F1 | 	add	local04, objptr
076a0     0C 24 06 F1 | 	add	local04, #12
076a4     12 39 62 FC | 	wrlong	local14, local04
076a8     20 00 00 FF 
076ac     00 E4 05 F1 | 	add	objptr, ##16384
076b0     F2 2A 02 FB | 	rdlong	local07, objptr
076b4     01 2A 06 F1 | 	add	local07, #1
076b8     F2 2A 62 FC | 	wrlong	local07, objptr
076bc     53 00 00 FF 
076c0     DC E5 85 F1 | 	sub	objptr, ##42972
076c4                 | ' 'print dims(0),dims(1),dims(2),arraytype
076c4                 | ' 
076c4                 | ' arraysize=esize*dims(0)*dims(1)*dims(2)
076c4                 | ' arrayptr=memtop-arraysize-16
076c4                 | ' memtop=arrayptr
076c4                 | ' 
076c4                 | ' pslpoke arrayptr,arraytype
076c4                 | ' pspoke arrayptr+2,esize
076c4                 | ' pslpoke arrayptr+4,dims(0)
076c4                 | ' pslpoke arrayptr+8,dims(1)
076c4                 | ' pslpoke arrayptr+12,dims(2)
076c4                 | ' 
076c4                 | ' variables(varnum).name=varname2$
076c4                 | ' variables(varnum).value.uresult=arrayptr
076c4                 | ' variables(varnum).vartype=arraytype
076c4                 | ' varnum+=1
076c4                 | ' 
076c4                 | ' return 0
076c4     00 FA 05 F6 | 	mov	result1, #0
076c8                 | LR__0636
076c8     A7 F0 03 F6 | 	mov	ptra, fp
076cc     B2 00 A0 FD | 	call	#popregs_
076d0                 | _compile_dim_ret
076d0     2D 00 64 FD | 	ret
076d4                 | 
076d4                 | ' 
076d4                 | ' 
076d4                 | ' function compile_for() as ulong  
076d4                 | _compile_for
076d4     07 4A 05 F6 | 	mov	COUNT_, #7
076d8     A8 00 A0 FD | 	call	#pushregs_
076dc                 | ' 
076dc                 | ' 
076dc                 | ' 
076dc                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_error(32) : return 32
076dc     56 00 00 FF 
076e0     18 E4 05 F1 | 	add	objptr, ##44056
076e4     F2 14 02 FB | 	rdlong	arg02, objptr
076e8     01 14 06 F1 | 	add	arg02, #1
076ec     03 14 66 F0 | 	shl	arg02, #3
076f0     02 00 00 FF 
076f4     38 E4 85 F1 | 	sub	objptr, ##1080
076f8     F2 14 02 F1 | 	add	arg02, objptr
076fc     0A 13 02 FB | 	rdlong	arg01, arg02
07700     53 00 00 FF 
07704     E0 E5 85 F1 | 	sub	objptr, ##42976
07708                 | ' 
07708                 | ' select case s
07708     41 01 00 FF 
0770c     99 15 06 F6 | 	mov	arg02, ##@LR__4404
07710     C8 15 B1 FD | 	call	#__system___string_cmp
07714     00 FA 0D F2 | 	cmp	result1, #0 wz
07718     1B FA 05 A6 |  if_e	mov	result1, #27
0771c     00 FA 05 56 |  if_ne	mov	result1, #0
07720     00 FA 0D F2 | 	cmp	result1, #0 wz
07724     0C 00 90 AD |  if_e	jmp	#LR__0640
07728     05 12 06 F6 | 	mov	arg01, #5
0772c     A4 E3 BF FD | 	call	#_compile_immediate_assign
07730     10 00 90 FD | 	jmp	#LR__0641
07734                 | LR__0640
07734     20 12 06 F6 | 	mov	arg01, #32
07738     14 E8 BF FD | 	call	#_compile_error
0773c     20 FA 05 F6 | 	mov	result1, #32
07740     E8 02 90 FD | 	jmp	#LR__0647
07744                 | LR__0641
07744     69 00 00 FF 
07748     50 E4 05 F1 | 	add	objptr, ##53840
0774c     F2 12 02 FB | 	rdlong	arg01, objptr
07750     09 25 02 F6 | 	mov	local04, arg01
07754     01 24 86 F1 | 	sub	local04, #1
07758     12 15 02 F6 | 	mov	arg02, local04
0775c     01 14 66 F0 | 	shl	arg02, #1
07760     12 15 02 F1 | 	add	arg02, local04
07764     02 14 66 F0 | 	shl	arg02, #2
07768     03 00 00 FF 
0776c     00 E4 85 F1 | 	sub	objptr, ##1536
07770     F2 14 02 F1 | 	add	arg02, objptr
07774     0A 1F 02 FB | 	rdlong	local01, arg02
07778     04 14 06 F1 | 	add	arg02, #4
0777c     0A 27 02 FB | 	rdlong	local05, arg02
07780     01 12 86 F1 | 	sub	arg01, #1
07784     09 29 02 F6 | 	mov	local06, arg01
07788     01 28 66 F0 | 	shl	local06, #1
0778c     09 29 02 F1 | 	add	local06, arg01
07790     02 28 66 F0 | 	shl	local06, #2
07794     F2 28 02 F1 | 	add	local06, objptr
07798     08 28 06 F1 | 	add	local06, #8
0779c     14 13 02 FB | 	rdlong	arg01, local06
077a0     13 21 02 F6 | 	mov	local02, local05
077a4     09 23 02 F6 | 	mov	local03, arg01
077a8                 | ' '' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
077a8                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then compile_error(34) : return 34
077a8     17 22 0E F2 | 	cmp	local03, #23 wz
077ac     66 00 00 FF 
077b0     50 E4 85 F1 | 	sub	objptr, ##52304
077b4     10 00 90 AD |  if_e	jmp	#LR__0642
077b8     22 12 06 F6 | 	mov	arg01, #34
077bc     90 E7 BF FD | 	call	#_compile_error
077c0     22 FA 05 F6 | 	mov	result1, #34
077c4     64 02 90 FD | 	jmp	#LR__0647
077c8                 | LR__0642
077c8     0F 2B 02 F6 | 	mov	local07, local01
077cc                 | ' varnum=t1.result.uresult
077cc                 | ' if lparts(ct).part$<>"to" then  compile_error(33) : return 33
077cc     56 00 00 FF 
077d0     18 E4 05 F1 | 	add	objptr, ##44056
077d4     F2 24 02 FB | 	rdlong	local04, objptr
077d8     03 24 66 F0 | 	shl	local04, #3
077dc     02 00 00 FF 
077e0     38 E4 85 F1 | 	sub	objptr, ##1080
077e4     F2 24 02 F1 | 	add	local04, objptr
077e8     12 13 02 FB | 	rdlong	arg01, local04
077ec     43 01 00 FF 
077f0     5F 14 06 F6 | 	mov	arg02, ##@LR__4571
077f4     53 00 00 FF 
077f8     E0 E5 85 F1 | 	sub	objptr, ##42976
077fc     DC 14 B1 FD | 	call	#__system___string_cmp
07800     00 FA 0D F2 | 	cmp	result1, #0 wz
07804     10 00 90 AD |  if_e	jmp	#LR__0643
07808     21 12 06 F6 | 	mov	arg01, #33
0780c     40 E7 BF FD | 	call	#_compile_error
07810     21 FA 05 F6 | 	mov	result1, #33
07814     14 02 90 FD | 	jmp	#LR__0647
07818                 | LR__0643
07818     56 00 00 FF 
0781c     18 E4 05 F1 | 	add	objptr, ##44056
07820     F2 24 02 FB | 	rdlong	local04, objptr
07824     01 24 06 F1 | 	add	local04, #1
07828     F2 24 62 FC | 	wrlong	local04, objptr
0782c     56 00 00 FF 
07830     18 E4 85 F1 | 	sub	objptr, ##44056
07834     D4 0B B0 FD | 	call	#_expr
07838                 | ' ct+=1
07838                 | ' expr()  ' there is "to" value pushed on the stack
07838                 | ' if lparts(ct).part$="step" orelse lparts(ct).part$="st."then 
07838     56 00 00 FF 
0783c     18 E4 05 F1 | 	add	objptr, ##44056
07840     F2 24 02 FB | 	rdlong	local04, objptr
07844     03 24 66 F0 | 	shl	local04, #3
07848     02 00 00 FF 
0784c     38 E4 85 F1 | 	sub	objptr, ##1080
07850     F2 24 02 F1 | 	add	local04, objptr
07854     12 13 02 FB | 	rdlong	arg01, local04
07858     43 01 00 FF 
0785c     62 14 06 F6 | 	mov	arg02, ##@LR__4572
07860     53 00 00 FF 
07864     E0 E5 85 F1 | 	sub	objptr, ##42976
07868     70 14 B1 FD | 	call	#__system___string_cmp
0786c     00 FA 0D F2 | 	cmp	result1, #0 wz
07870     3C 00 90 AD |  if_e	jmp	#LR__0644
07874     56 00 00 FF 
07878     18 E4 05 F1 | 	add	objptr, ##44056
0787c     F2 28 02 FB | 	rdlong	local06, objptr
07880     03 28 66 F0 | 	shl	local06, #3
07884     02 00 00 FF 
07888     38 E4 85 F1 | 	sub	objptr, ##1080
0788c     F2 28 02 F1 | 	add	local06, objptr
07890     14 13 02 FB | 	rdlong	arg01, local06
07894     43 01 00 FF 
07898     67 14 06 F6 | 	mov	arg02, ##@LR__4573
0789c     53 00 00 FF 
078a0     E0 E5 85 F1 | 	sub	objptr, ##42976
078a4     34 14 B1 FD | 	call	#__system___string_cmp
078a8     00 FA 0D F2 | 	cmp	result1, #0 wz
078ac     24 00 90 5D |  if_ne	jmp	#LR__0645
078b0                 | LR__0644
078b0     56 00 00 FF 
078b4     18 E4 05 F1 | 	add	objptr, ##44056
078b8     F2 28 02 FB | 	rdlong	local06, objptr
078bc     01 28 06 F1 | 	add	local06, #1
078c0     F2 28 62 FC | 	wrlong	local06, objptr
078c4     56 00 00 FF 
078c8     18 E4 85 F1 | 	sub	objptr, ##44056
078cc     3C 0B B0 FD | 	call	#_expr
078d0     78 00 90 FD | 	jmp	#LR__0646
078d4                 | LR__0645
078d4     69 00 00 FF 
078d8     50 E4 05 F1 | 	add	objptr, ##53840
078dc     F2 28 02 FB | 	rdlong	local06, objptr
078e0     14 27 02 F6 | 	mov	local05, local06
078e4     01 26 66 F0 | 	shl	local05, #1
078e8     14 27 02 F1 | 	add	local05, local06
078ec     02 26 66 F0 | 	shl	local05, #2
078f0     03 00 00 FF 
078f4     00 E4 85 F1 | 	sub	objptr, ##1536
078f8     F2 26 02 F1 | 	add	local05, objptr
078fc     08 26 06 F1 | 	add	local05, #8
07900     13 39 68 FC | 	wrlong	#28, local05
07904     03 00 00 FF 
07908     00 E4 05 F1 | 	add	objptr, ##1536
0790c     F2 28 02 FB | 	rdlong	local06, objptr
07910     14 27 02 F6 | 	mov	local05, local06
07914     01 26 66 F0 | 	shl	local05, #1
07918     14 27 02 F1 | 	add	local05, local06
0791c     02 26 66 F0 | 	shl	local05, #2
07920     03 00 00 FF 
07924     00 E4 85 F1 | 	sub	objptr, ##1536
07928     F2 26 02 F1 | 	add	local05, objptr
0792c     13 03 68 FC | 	wrlong	#1, local05
07930     03 00 00 FF 
07934     00 E4 05 F1 | 	add	objptr, ##1536
07938     F2 28 02 FB | 	rdlong	local06, objptr
0793c     01 28 06 F1 | 	add	local06, #1
07940     F2 28 62 FC | 	wrlong	local06, objptr
07944     69 00 00 FF 
07948     50 E4 85 F1 | 	sub	objptr, ##53840
0794c                 | LR__0646
0794c     69 00 00 FF 
07950     50 E4 05 F1 | 	add	objptr, ##53840
07954     F2 28 02 FB | 	rdlong	local06, objptr
07958     14 27 02 F6 | 	mov	local05, local06
0795c     01 26 66 F0 | 	shl	local05, #1
07960     14 27 02 F1 | 	add	local05, local06
07964     02 26 66 F0 | 	shl	local05, #2
07968     03 00 00 FF 
0796c     00 E4 85 F1 | 	sub	objptr, ##1536
07970     F2 26 02 F1 | 	add	local05, objptr
07974     08 26 06 F1 | 	add	local05, #8
07978     13 39 68 FC | 	wrlong	#28, local05
0797c     03 00 00 FF 
07980     00 E4 05 F1 | 	add	objptr, ##1536
07984     F2 28 02 FB | 	rdlong	local06, objptr
07988     14 27 02 F6 | 	mov	local05, local06
0798c     01 26 66 F0 | 	shl	local05, #1
07990     14 27 02 F1 | 	add	local05, local06
07994     02 26 66 F0 | 	shl	local05, #2
07998     03 00 00 FF 
0799c     00 E4 85 F1 | 	sub	objptr, ##1536
079a0     F2 26 02 F1 | 	add	local05, objptr
079a4     13 2B 62 FC | 	wrlong	local07, local05
079a8     03 00 00 FF 
079ac     00 E4 05 F1 | 	add	objptr, ##1536
079b0     F2 2A 02 FB | 	rdlong	local07, objptr
079b4     01 2A 06 F1 | 	add	local07, #1
079b8     F2 2A 62 FC | 	wrlong	local07, objptr
079bc     15 29 02 F6 | 	mov	local06, local07
079c0     01 28 66 F0 | 	shl	local06, #1
079c4     15 29 02 F1 | 	add	local06, local07
079c8     02 28 66 F0 | 	shl	local06, #2
079cc     03 00 00 FF 
079d0     00 E4 85 F1 | 	sub	objptr, ##1536
079d4     F2 28 02 F1 | 	add	local06, objptr
079d8     08 28 06 F1 | 	add	local06, #8
079dc     14 95 68 FC | 	wrlong	#74, local06
079e0     03 00 00 FF 
079e4     00 E4 05 F1 | 	add	objptr, ##1536
079e8     F2 2A 02 FB | 	rdlong	local07, objptr
079ec     15 29 02 F6 | 	mov	local06, local07
079f0     01 28 66 F0 | 	shl	local06, #1
079f4     15 29 02 F1 | 	add	local06, local07
079f8     02 28 66 F0 | 	shl	local06, #2
079fc     03 00 00 FF 
07a00     00 E4 85 F1 | 	sub	objptr, ##1536
07a04     F2 28 02 F1 | 	add	local06, objptr
07a08     14 01 68 FC | 	wrlong	#0, local06
07a0c     03 00 00 FF 
07a10     00 E4 05 F1 | 	add	objptr, ##1536
07a14     F2 2A 02 FB | 	rdlong	local07, objptr
07a18     01 2A 06 F1 | 	add	local07, #1
07a1c     F2 2A 62 FC | 	wrlong	local07, objptr
07a20     69 00 00 FF 
07a24     50 E4 85 F1 | 	sub	objptr, ##53840
07a28                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
07a28                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
07a28                 | ' 
07a28                 | ' 
07a28                 | ' return 0
07a28     00 FA 05 F6 | 	mov	result1, #0
07a2c                 | LR__0647
07a2c     A7 F0 03 F6 | 	mov	ptra, fp
07a30     B2 00 A0 FD | 	call	#popregs_
07a34                 | _compile_for_ret
07a34     2D 00 64 FD | 	ret
07a38                 | 
07a38                 | ' 
07a38                 | ' 
07a38                 | ' sub do_for()
07a38                 | _do_for
07a38     05 4A 05 F6 | 	mov	COUNT_, #5
07a3c     A8 00 A0 FD | 	call	#pushregs_
07a40     78 00 00 FF 
07a44     AC E5 05 F1 | 	add	objptr, ##61868
07a48     F2 24 02 FB | 	rdlong	local04, objptr
07a4c     01 24 06 F1 | 	add	local04, #1
07a50     F2 24 62 FC | 	wrlong	local04, objptr
07a54     78 00 00 FF 
07a58     AC E5 85 F1 | 	sub	objptr, ##61868
07a5c     5C 1E B0 FD | 	call	#_pop
07a60     FD 1E 02 F6 | 	mov	local01, result1
07a64     FE 20 02 F6 | 	mov	local02, result2
07a68     FF 22 02 F6 | 	mov	local03, result3
07a6c     78 00 00 FF 
07a70     AC E5 05 F1 | 	add	objptr, ##61868
07a74     F2 24 02 FB | 	rdlong	local04, objptr
07a78     12 27 02 F6 | 	mov	local05, local04
07a7c     02 26 66 F0 | 	shl	local05, #2
07a80     12 27 02 F1 | 	add	local05, local04
07a84     02 26 66 F0 | 	shl	local05, #2
07a88     07 00 00 FF 
07a8c     40 E5 85 F1 | 	sub	objptr, ##3904
07a90     F2 26 02 F1 | 	add	local05, objptr
07a94     08 26 06 F1 | 	add	local05, #8
07a98     13 1F 62 FC | 	wrlong	local01, local05
07a9c     71 00 00 FF 
07aa0     6C E4 85 F1 | 	sub	objptr, ##57964
07aa4     14 1E B0 FD | 	call	#_pop
07aa8     FD 1E 02 F6 | 	mov	local01, result1
07aac     FE 20 02 F6 | 	mov	local02, result2
07ab0     FF 22 02 F6 | 	mov	local03, result3
07ab4     78 00 00 FF 
07ab8     AC E5 05 F1 | 	add	objptr, ##61868
07abc     F2 24 02 FB | 	rdlong	local04, objptr
07ac0     12 27 02 F6 | 	mov	local05, local04
07ac4     02 26 66 F0 | 	shl	local05, #2
07ac8     12 27 02 F1 | 	add	local05, local04
07acc     02 26 66 F0 | 	shl	local05, #2
07ad0     07 00 00 FF 
07ad4     40 E5 85 F1 | 	sub	objptr, ##3904
07ad8     F2 26 02 F1 | 	add	local05, objptr
07adc     0C 26 06 F1 | 	add	local05, #12
07ae0     13 1F 62 FC | 	wrlong	local01, local05
07ae4     71 00 00 FF 
07ae8     6C E4 85 F1 | 	sub	objptr, ##57964
07aec     CC 1D B0 FD | 	call	#_pop
07af0     FD 1E 02 F6 | 	mov	local01, result1
07af4     FE 20 02 F6 | 	mov	local02, result2
07af8     FF 22 02 F6 | 	mov	local03, result3
07afc     78 00 00 FF 
07b00     AC E5 05 F1 | 	add	objptr, ##61868
07b04     F2 24 02 FB | 	rdlong	local04, objptr
07b08     12 27 02 F6 | 	mov	local05, local04
07b0c     02 26 66 F0 | 	shl	local05, #2
07b10     12 27 02 F1 | 	add	local05, local04
07b14     02 26 66 F0 | 	shl	local05, #2
07b18     07 00 00 FF 
07b1c     40 E5 85 F1 | 	sub	objptr, ##3904
07b20     F2 26 02 F1 | 	add	local05, objptr
07b24     10 26 06 F1 | 	add	local05, #16
07b28     13 1F 62 FC | 	wrlong	local01, local05
07b2c                 | ' fortop+=1
07b2c                 | ' 'i=-1: do: i+=1 : loop until fortable(i).varnum= -1 orelse i>= maxfor
07b2c                 | ' 'if i> maxfor then printerror(36) : return
07b2c                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
07b2c                 | ' t1=pop() : fortable(fortop).stepval=t1.result.iresult
07b2c                 | ' t1=pop() : fortable(fortop).endval=t1.result.iresult
07b2c                 | ' if compiledline(lineptr_e).result_type=token_end then
07b2c     08 00 00 FF 
07b30     18 E4 85 F1 | 	sub	objptr, ##4120
07b34     F2 1E 02 FB | 	rdlong	local01, objptr
07b38     0F 27 02 F6 | 	mov	local05, local01
07b3c     01 26 66 F0 | 	shl	local05, #1
07b40     0F 27 02 F1 | 	add	local05, local01
07b44     02 26 66 F0 | 	shl	local05, #2
07b48     03 00 00 FF 
07b4c     04 E4 85 F1 | 	sub	objptr, ##1540
07b50     F2 26 02 F1 | 	add	local05, objptr
07b54     08 26 06 F1 | 	add	local05, #8
07b58     13 27 02 FB | 	rdlong	local05, local05
07b5c     FE 27 0E F2 | 	cmp	local05, #510 wz
07b60     66 00 00 FF 
07b64     50 E4 85 F1 | 	sub	objptr, ##52304
07b68     70 00 90 5D |  if_ne	jmp	#LR__0650
07b6c     78 00 00 FF 
07b70     AC E5 05 F1 | 	add	objptr, ##61868
07b74     F2 1E 02 FB | 	rdlong	local01, objptr
07b78     0F 27 02 F6 | 	mov	local05, local01
07b7c     02 26 66 F0 | 	shl	local05, #2
07b80     0F 27 02 F1 | 	add	local05, local01
07b84     02 26 66 F0 | 	shl	local05, #2
07b88     07 00 00 FF 
07b8c     40 E5 85 F1 | 	sub	objptr, ##3904
07b90     F2 26 02 F1 | 	add	local05, objptr
07b94     07 00 00 FF 
07b98     18 E5 05 F1 | 	add	objptr, ##3864
07b9c     F2 1E 02 FB | 	rdlong	local01, objptr
07ba0     13 1F 62 FC | 	wrlong	local01, local05
07ba4     28 E4 05 F1 | 	add	objptr, #40
07ba8     F2 1E 02 FB | 	rdlong	local01, objptr
07bac     0F 27 02 F6 | 	mov	local05, local01
07bb0     02 26 66 F0 | 	shl	local05, #2
07bb4     0F 27 02 F1 | 	add	local05, local01
07bb8     02 26 66 F0 | 	shl	local05, #2
07bbc     07 00 00 FF 
07bc0     40 E5 85 F1 | 	sub	objptr, ##3904
07bc4     F2 26 02 F1 | 	add	local05, objptr
07bc8     04 26 06 F1 | 	add	local05, #4
07bcc     13 01 68 FC | 	wrlong	#0, local05
07bd0     71 00 00 FF 
07bd4     6C E4 85 F1 | 	sub	objptr, ##57964
07bd8     7C 00 90 FD | 	jmp	#LR__0651
07bdc                 | LR__0650
07bdc     78 00 00 FF 
07be0     AC E5 05 F1 | 	add	objptr, ##61868
07be4     F2 1E 02 FB | 	rdlong	local01, objptr
07be8     0F 27 02 F6 | 	mov	local05, local01
07bec     02 26 66 F0 | 	shl	local05, #2
07bf0     0F 27 02 F1 | 	add	local05, local01
07bf4     02 26 66 F0 | 	shl	local05, #2
07bf8     07 00 00 FF 
07bfc     40 E5 85 F1 | 	sub	objptr, ##3904
07c00     F2 26 02 F1 | 	add	local05, objptr
07c04     07 00 00 FF 
07c08     20 E5 05 F1 | 	add	objptr, ##3872
07c0c     F2 1E 02 FB | 	rdlong	local01, objptr
07c10     13 1F 62 FC | 	wrlong	local01, local05
07c14     20 E4 05 F1 | 	add	objptr, #32
07c18     F2 1E 02 FB | 	rdlong	local01, objptr
07c1c     0F 27 02 F6 | 	mov	local05, local01
07c20     02 26 66 F0 | 	shl	local05, #2
07c24     0F 27 02 F1 | 	add	local05, local01
07c28     02 26 66 F0 | 	shl	local05, #2
07c2c     07 00 00 FF 
07c30     40 E5 85 F1 | 	sub	objptr, ##3904
07c34     F2 26 02 F1 | 	add	local05, objptr
07c38     08 00 00 FF 
07c3c     18 E4 85 F1 | 	sub	objptr, ##4120
07c40     F2 1E 02 FB | 	rdlong	local01, objptr
07c44     69 00 00 FF 
07c48     54 E4 85 F1 | 	sub	objptr, ##53844
07c4c     01 1E 06 F1 | 	add	local01, #1
07c50     04 26 06 F1 | 	add	local05, #4
07c54     13 1F 62 FC | 	wrlong	local01, local05
07c58                 | LR__0651
07c58     A7 F0 03 F6 | 	mov	ptra, fp
07c5c     B2 00 A0 FD | 	call	#popregs_
07c60                 | _do_for_ret
07c60     2D 00 64 FD | 	ret
07c64                 | 
07c64                 | ' 
07c64                 | ' ' now do_next todo
07c64                 | ' 
07c64                 | ' sub do_next()
07c64                 | _do_next
07c64     04 4A 05 F6 | 	mov	COUNT_, #4
07c68     A8 00 A0 FD | 	call	#pushregs_
07c6c     4C 1C B0 FD | 	call	#_pop
07c70     FD 1E 02 F6 | 	mov	local01, result1
07c74     FE 20 02 F6 | 	mov	local02, result2
07c78     FF 22 02 F6 | 	mov	local03, result3
07c7c                 | ' 
07c7c                 | ' t1=pop() :varnum=t1.result.uresult
07c7c                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
07c7c     78 00 00 FF 
07c80     AC E5 05 F1 | 	add	objptr, ##61868
07c84     F2 12 02 FB | 	rdlong	arg01, objptr
07c88     09 25 02 F6 | 	mov	local04, arg01
07c8c     02 24 66 F0 | 	shl	local04, #2
07c90     09 25 02 F1 | 	add	local04, arg01
07c94     02 24 66 F0 | 	shl	local04, #2
07c98     07 00 00 FF 
07c9c     40 E5 85 F1 | 	sub	objptr, ##3904
07ca0     F2 24 02 F1 | 	add	local04, objptr
07ca4     08 24 06 F1 | 	add	local04, #8
07ca8     12 25 02 FB | 	rdlong	local04, local04
07cac     0F 25 0A F2 | 	cmp	local04, local01 wz
07cb0     71 00 00 FF 
07cb4     6C E4 85 F1 | 	sub	objptr, ##57964
07cb8     0C 00 90 AD |  if_e	jmp	#LR__0660
07cbc     25 12 06 F6 | 	mov	arg01, #37
07cc0     CC DA B0 FD | 	call	#_printerror
07cc4     28 02 90 FD | 	jmp	#LR__0664
07cc8                 | LR__0660
07cc8     78 00 00 FF 
07ccc     AC E5 05 F1 | 	add	objptr, ##61868
07cd0     F2 12 02 FB | 	rdlong	arg01, objptr
07cd4     09 25 02 F6 | 	mov	local04, arg01
07cd8     02 24 66 F0 | 	shl	local04, #2
07cdc     09 25 02 F1 | 	add	local04, arg01
07ce0     02 24 66 F0 | 	shl	local04, #2
07ce4     07 00 00 FF 
07ce8     40 E5 85 F1 | 	sub	objptr, ##3904
07cec     F2 24 02 F1 | 	add	local04, objptr
07cf0     0C 24 06 F1 | 	add	local04, #12
07cf4     12 25 02 FB | 	rdlong	local04, local04
07cf8     0F 13 02 F6 | 	mov	arg01, local01
07cfc     04 12 66 F0 | 	shl	arg01, #4
07d00     3D 00 00 FF 
07d04     90 E4 85 F1 | 	sub	objptr, ##31376
07d08     F2 12 02 F1 | 	add	arg01, objptr
07d0c     0F FF 01 F6 | 	mov	result3, local01
07d10     04 FE 65 F0 | 	shl	result3, #4
07d14     F2 FE 01 F1 | 	add	result3, objptr
07d18     04 FE 05 F1 | 	add	result3, #4
07d1c     FF FE 01 FB | 	rdlong	result3, result3
07d20     12 FF 01 F1 | 	add	result3, local04
07d24     04 12 06 F1 | 	add	arg01, #4
07d28     09 FF 61 FC | 	wrlong	result3, arg01
07d2c                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
07d2c                 | ' if fortable(fortop).stepval>=0 then
07d2c     44 00 00 FF 
07d30     D0 E5 05 F1 | 	add	objptr, ##35280
07d34     F2 12 02 FB | 	rdlong	arg01, objptr
07d38     09 25 02 F6 | 	mov	local04, arg01
07d3c     02 24 66 F0 | 	shl	local04, #2
07d40     09 25 02 F1 | 	add	local04, arg01
07d44     02 24 66 F0 | 	shl	local04, #2
07d48     07 00 00 FF 
07d4c     40 E5 85 F1 | 	sub	objptr, ##3904
07d50     F2 24 02 F1 | 	add	local04, objptr
07d54     0C 24 06 F1 | 	add	local04, #12
07d58     12 25 02 FB | 	rdlong	local04, local04
07d5c     00 24 56 F2 | 	cmps	local04, #0 wc
07d60     71 00 00 FF 
07d64     6C E4 85 F1 | 	sub	objptr, ##57964
07d68     78 00 90 CD |  if_b	jmp	#LR__0661
07d6c                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
07d6c     04 1E 66 F0 | 	shl	local01, #4
07d70     33 00 00 FF 
07d74     DC E5 05 F1 | 	add	objptr, ##26588
07d78     F2 1E 02 F1 | 	add	local01, objptr
07d7c     44 00 00 FF 
07d80     D0 E5 05 F1 | 	add	objptr, ##35280
07d84     F2 24 02 FB | 	rdlong	local04, objptr
07d88     12 13 02 F6 | 	mov	arg01, local04
07d8c     02 12 66 F0 | 	shl	arg01, #2
07d90     12 13 02 F1 | 	add	arg01, local04
07d94     02 12 66 F0 | 	shl	arg01, #2
07d98     07 00 00 FF 
07d9c     40 E5 85 F1 | 	sub	objptr, ##3904
07da0     F2 12 02 F1 | 	add	arg01, objptr
07da4     04 1E 06 F1 | 	add	local01, #4
07da8     0F 25 02 FB | 	rdlong	local04, local01
07dac     10 12 06 F1 | 	add	arg01, #16
07db0     09 13 02 FB | 	rdlong	arg01, arg01
07db4     09 25 5A F2 | 	cmps	local04, arg01 wcz
07db8     71 00 00 FF 
07dbc     6C E4 85 F1 | 	sub	objptr, ##57964
07dc0     9C 00 90 ED |  if_be	jmp	#LR__0663
07dc4     78 00 00 FF 
07dc8     AC E5 05 F1 | 	add	objptr, ##61868
07dcc     F2 24 02 FB | 	rdlong	local04, objptr
07dd0     01 24 86 F1 | 	sub	local04, #1
07dd4     F2 24 62 FC | 	wrlong	local04, objptr
07dd8     78 00 00 FF 
07ddc     AC E5 85 F1 | 	sub	objptr, ##61868
07de0     0C 01 90 FD | 	jmp	#LR__0664
07de4                 | LR__0661
07de4                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
07de4     0F 13 02 F6 | 	mov	arg01, local01
07de8     04 12 66 F0 | 	shl	arg01, #4
07dec     33 00 00 FF 
07df0     DC E5 05 F1 | 	add	objptr, ##26588
07df4     F2 12 02 F1 | 	add	arg01, objptr
07df8     44 00 00 FF 
07dfc     D0 E5 05 F1 | 	add	objptr, ##35280
07e00     F2 24 02 FB | 	rdlong	local04, objptr
07e04     12 1F 02 F6 | 	mov	local01, local04
07e08     02 1E 66 F0 | 	shl	local01, #2
07e0c     12 1F 02 F1 | 	add	local01, local04
07e10     02 1E 66 F0 | 	shl	local01, #2
07e14     07 00 00 FF 
07e18     40 E5 85 F1 | 	sub	objptr, ##3904
07e1c     F2 1E 02 F1 | 	add	local01, objptr
07e20     04 12 06 F1 | 	add	arg01, #4
07e24     09 13 02 FB | 	rdlong	arg01, arg01
07e28     10 1E 06 F1 | 	add	local01, #16
07e2c     0F 1F 02 FB | 	rdlong	local01, local01
07e30     0F 13 52 F2 | 	cmps	arg01, local01 wc
07e34     71 00 00 FF 
07e38     6C E4 85 F1 | 	sub	objptr, ##57964
07e3c     20 00 90 3D |  if_ae	jmp	#LR__0662
07e40     78 00 00 FF 
07e44     AC E5 05 F1 | 	add	objptr, ##61868
07e48     F2 24 02 FB | 	rdlong	local04, objptr
07e4c     01 24 86 F1 | 	sub	local04, #1
07e50     F2 24 62 FC | 	wrlong	local04, objptr
07e54     78 00 00 FF 
07e58     AC E5 85 F1 | 	sub	objptr, ##61868
07e5c     90 00 90 FD | 	jmp	#LR__0664
07e60                 | LR__0662
07e60                 | LR__0663
07e60     78 00 00 FF 
07e64     AC E5 05 F1 | 	add	objptr, ##61868
07e68     F2 1E 02 FB | 	rdlong	local01, objptr
07e6c     0F 25 02 F6 | 	mov	local04, local01
07e70     02 24 66 F0 | 	shl	local04, #2
07e74     0F 25 02 F1 | 	add	local04, local01
07e78     02 24 66 F0 | 	shl	local04, #2
07e7c     07 00 00 FF 
07e80     40 E5 85 F1 | 	sub	objptr, ##3904
07e84     F2 24 02 F1 | 	add	local04, objptr
07e88     12 25 02 FB | 	rdlong	local04, local04
07e8c     07 00 00 FF 
07e90     18 E5 05 F1 | 	add	objptr, ##3864
07e94     F2 24 62 FC | 	wrlong	local04, objptr
07e98     28 E4 05 F1 | 	add	objptr, #40
07e9c     F2 1E 02 FB | 	rdlong	local01, objptr
07ea0     0F 25 02 F6 | 	mov	local04, local01
07ea4     02 24 66 F0 | 	shl	local04, #2
07ea8     0F 25 02 F1 | 	add	local04, local01
07eac     02 24 66 F0 | 	shl	local04, #2
07eb0     07 00 00 FF 
07eb4     40 E5 85 F1 | 	sub	objptr, ##3904
07eb8     F2 24 02 F1 | 	add	local04, objptr
07ebc     04 24 06 F1 | 	add	local04, #4
07ec0     12 25 02 FB | 	rdlong	local04, local04
07ec4     07 00 00 FF 
07ec8     1C E5 05 F1 | 	add	objptr, ##3868
07ecc     F2 24 62 FC | 	wrlong	local04, objptr
07ed0     0F 00 00 FF 
07ed4     38 E5 85 F1 | 	sub	objptr, ##7992
07ed8     F2 24 02 FB | 	rdlong	local04, objptr
07edc     01 24 86 F1 | 	sub	local04, #1
07ee0     04 E4 05 F1 | 	add	objptr, #4
07ee4     F2 24 62 FC | 	wrlong	local04, objptr
07ee8     69 00 00 FF 
07eec     54 E4 85 F1 | 	sub	objptr, ##53844
07ef0                 | LR__0664
07ef0     A7 F0 03 F6 | 	mov	ptra, fp
07ef4     B2 00 A0 FD | 	call	#popregs_
07ef8                 | _do_next_ret
07ef8     2D 00 64 FD | 	ret
07efc                 | 
07efc                 | ' 
07efc                 | ' 
07efc                 | ' function compile_next() as ulong
07efc                 | _compile_next
07efc     04 4A 05 F6 | 	mov	COUNT_, #4
07f00     A8 00 A0 FD | 	call	#pushregs_
07f04     56 00 00 FF 
07f08     18 E4 05 F1 | 	add	objptr, ##44056
07f0c     F2 12 02 FB | 	rdlong	arg01, objptr
07f10     03 12 66 F0 | 	shl	arg01, #3
07f14     02 00 00 FF 
07f18     38 E4 85 F1 | 	sub	objptr, ##1080
07f1c     F2 12 02 F1 | 	add	arg01, objptr
07f20     09 1F 02 FB | 	rdlong	local01, arg01
07f24                 | ' 
07f24                 | ' varname$=lparts(ct).part$ 
07f24                 | ' 'suffix$=right$(varname$,1)
07f24                 | ' 'if varname$="" orelse suffix$="$" orelse suffix$="!" orelse suffix$="#" then  compile_error(34) : printerror(34) : return 34
07f24                 | ' if varnum=0 then compile_error(35)  : return 35
07f24     04 E4 85 F1 | 	sub	objptr, #4
07f28     F2 14 0A FB | 	rdlong	arg02, objptr wz
07f2c     53 00 00 FF 
07f30     DC E5 85 F1 | 	sub	objptr, ##42972
07f34     10 00 90 5D |  if_ne	jmp	#LR__0670
07f38     23 12 06 F6 | 	mov	arg01, #35
07f3c     10 E0 BF FD | 	call	#_compile_error
07f40     23 FA 05 F6 | 	mov	result1, #35
07f44     58 01 90 FD | 	jmp	#LR__0674
07f48                 | LR__0670
07f48     01 20 66 F6 | 	neg	local02, #1
07f4c                 | ' j=-1
07f4c                 | ' for i=0 to varnum-1
07f4c     00 22 06 F6 | 	mov	local03, #0
07f50     53 00 00 FF 
07f54     DC E5 05 F1 | 	add	objptr, ##42972
07f58     F2 24 02 FB | 	rdlong	local04, objptr
07f5c     53 00 00 FF 
07f60     DC E5 85 F1 | 	sub	objptr, ##42972
07f64                 | LR__0671
07f64     12 23 12 F2 | 	cmp	local03, local04 wc
07f68     38 00 90 3D |  if_ae	jmp	#LR__0672
07f6c                 | '   if variables(i).name=varname$ then j=i : exit
07f6c     11 15 02 F6 | 	mov	arg02, local03
07f70     04 14 66 F0 | 	shl	arg02, #4
07f74     33 00 00 FF 
07f78     DC E5 05 F1 | 	add	objptr, ##26588
07f7c     F2 14 02 F1 | 	add	arg02, objptr
07f80     0A 13 02 FB | 	rdlong	arg01, arg02
07f84     0F 15 02 F6 | 	mov	arg02, local01
07f88     33 00 00 FF 
07f8c     DC E5 85 F1 | 	sub	objptr, ##26588
07f90     48 0D B1 FD | 	call	#__system___string_cmp
07f94     00 FA 0D F2 | 	cmp	result1, #0 wz
07f98     11 21 02 A6 |  if_e	mov	local02, local03
07f9c     01 22 06 51 |  if_ne	add	local03, #1
07fa0     C0 FF 9F 5D |  if_ne	jmp	#LR__0671
07fa4                 | LR__0672
07fa4                 | ' if j=-1 then compile_error(35) : return 35
07fa4     FF FF 7F FF 
07fa8     FF 21 0E F2 | 	cmp	local02, ##-1 wz
07fac     10 00 90 5D |  if_ne	jmp	#LR__0673
07fb0     23 12 06 F6 | 	mov	arg01, #35
07fb4     98 DF BF FD | 	call	#_compile_error
07fb8     23 FA 05 F6 | 	mov	result1, #35
07fbc     E0 00 90 FD | 	jmp	#LR__0674
07fc0                 | LR__0673
07fc0     69 00 00 FF 
07fc4     50 E4 05 F1 | 	add	objptr, ##53840
07fc8     F2 24 02 FB | 	rdlong	local04, objptr
07fcc     12 23 02 F6 | 	mov	local03, local04
07fd0     01 22 66 F0 | 	shl	local03, #1
07fd4     12 23 02 F1 | 	add	local03, local04
07fd8     02 22 66 F0 | 	shl	local03, #2
07fdc     03 00 00 FF 
07fe0     00 E4 85 F1 | 	sub	objptr, ##1536
07fe4     F2 22 02 F1 | 	add	local03, objptr
07fe8     08 22 06 F1 | 	add	local03, #8
07fec     11 39 68 FC | 	wrlong	#28, local03
07ff0     03 00 00 FF 
07ff4     00 E4 05 F1 | 	add	objptr, ##1536
07ff8     F2 24 02 FB | 	rdlong	local04, objptr
07ffc     12 23 02 F6 | 	mov	local03, local04
08000     01 22 66 F0 | 	shl	local03, #1
08004     12 23 02 F1 | 	add	local03, local04
08008     02 22 66 F0 | 	shl	local03, #2
0800c     03 00 00 FF 
08010     00 E4 85 F1 | 	sub	objptr, ##1536
08014     F2 22 02 F1 | 	add	local03, objptr
08018     11 21 62 FC | 	wrlong	local02, local03
0801c     03 00 00 FF 
08020     00 E4 05 F1 | 	add	objptr, ##1536
08024     F2 24 02 FB | 	rdlong	local04, objptr
08028     01 24 06 F1 | 	add	local04, #1
0802c     F2 24 62 FC | 	wrlong	local04, objptr
08030     12 23 02 F6 | 	mov	local03, local04
08034     01 22 66 F0 | 	shl	local03, #1
08038     12 23 02 F1 | 	add	local03, local04
0803c     02 22 66 F0 | 	shl	local03, #2
08040     03 00 00 FF 
08044     00 E4 85 F1 | 	sub	objptr, ##1536
08048     F2 22 02 F1 | 	add	local03, objptr
0804c     08 22 06 F1 | 	add	local03, #8
08050     11 97 68 FC | 	wrlong	#75, local03
08054     03 00 00 FF 
08058     00 E4 05 F1 | 	add	objptr, ##1536
0805c     F2 24 02 FB | 	rdlong	local04, objptr
08060     12 23 02 F6 | 	mov	local03, local04
08064     01 22 66 F0 | 	shl	local03, #1
08068     12 23 02 F1 | 	add	local03, local04
0806c     02 22 66 F0 | 	shl	local03, #2
08070     03 00 00 FF 
08074     00 E4 85 F1 | 	sub	objptr, ##1536
08078     F2 22 02 F1 | 	add	local03, objptr
0807c     11 01 68 FC | 	wrlong	#0, local03
08080     03 00 00 FF 
08084     00 E4 05 F1 | 	add	objptr, ##1536
08088     F2 24 02 FB | 	rdlong	local04, objptr
0808c     01 24 06 F1 | 	add	local04, #1
08090     F2 24 62 FC | 	wrlong	local04, objptr
08094     69 00 00 FF 
08098     50 E4 85 F1 | 	sub	objptr, ##53840
0809c                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
0809c                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
0809c                 | ' return 0
0809c     00 FA 05 F6 | 	mov	result1, #0
080a0                 | LR__0674
080a0     A7 F0 03 F6 | 	mov	ptra, fp
080a4     B2 00 A0 FD | 	call	#popregs_
080a8                 | _compile_next_ret
080a8     2D 00 64 FD | 	ret
080ac                 | 
080ac                 | ' 
080ac                 | ' 
080ac                 | ' ' next: we  have to find the variable in the table, compile pushvar, then next
080ac                 | ' ' do_for: push its own pointer, varnum, step, end on the for stack. var init is already compiled before
080ac                 | ' ' do_next: find the entry with the varnum. Add step to varnum. Compare to the end. If step>0, check >, else check <. If not end, goto forptr (how?) 
080ac                 | ' 
080ac                 | ' 
080ac                 | ' function compile_goto( ) as ulong
080ac                 | _compile_goto
080ac     03 4A 05 F6 | 	mov	COUNT_, #3
080b0     A8 00 A0 FD | 	call	#pushregs_
080b4     28 F0 07 F1 | 	add	ptra, #40
080b8                 | ' 
080b8                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 
080b8     56 00 00 FF 
080bc     18 E4 05 F1 | 	add	objptr, ##44056
080c0     F2 16 02 FB | 	rdlong	arg03, objptr
080c4     03 16 66 F0 | 	shl	arg03, #3
080c8     02 00 00 FF 
080cc     38 E4 85 F1 | 	sub	objptr, ##1080
080d0     F2 16 02 F1 | 	add	arg03, objptr
080d4     04 16 06 F1 | 	add	arg03, #4
080d8     0B 17 02 FB | 	rdlong	arg03, arg03
080dc     01 00 00 FF 
080e0     00 16 0E F2 | 	cmp	arg03, ##512 wz
080e4     53 00 00 FF 
080e8     E0 E5 85 F1 | 	sub	objptr, ##42976
080ec     CC 02 90 5D |  if_ne	jmp	#LR__0685
080f0     56 00 00 FF 
080f4     18 E4 05 F1 | 	add	objptr, ##44056
080f8     F2 16 02 FB | 	rdlong	arg03, objptr
080fc     01 16 06 F1 | 	add	arg03, #1
08100     03 16 66 F0 | 	shl	arg03, #3
08104     02 00 00 FF 
08108     38 E4 85 F1 | 	sub	objptr, ##1080
0810c     F2 16 02 F1 | 	add	arg03, objptr
08110     04 16 06 F1 | 	add	arg03, #4
08114     0B 17 02 FB | 	rdlong	arg03, arg03
08118     FE 17 0E F2 | 	cmp	arg03, #510 wz
0811c     53 00 00 FF 
08120     E0 E5 85 F1 | 	sub	objptr, ##42976
08124     94 02 90 5D |  if_ne	jmp	#LR__0685
08128     56 00 00 FF 
0812c     18 E4 05 F1 | 	add	objptr, ##44056
08130     F2 16 02 FB | 	rdlong	arg03, objptr
08134     03 16 66 F0 | 	shl	arg03, #3
08138     02 00 00 FF 
0813c     38 E4 85 F1 | 	sub	objptr, ##1080
08140     F2 16 02 F1 | 	add	arg03, objptr
08144     0B 13 02 FB | 	rdlong	arg01, arg03
08148     00 14 06 F6 | 	mov	arg02, #0
0814c     53 00 00 FF 
08150     E0 E5 85 F1 | 	sub	objptr, ##42976
08154     C0 3C B1 FD | 	call	#__system____builtin_atoi
08158     04 4E 05 F1 | 	add	fp, #4
0815c     A7 FA 61 FC | 	wrlong	result1, fp
08160     69 00 00 FF 
08164     50 E4 05 F1 | 	add	objptr, ##53840
08168     F2 1E 02 FB | 	rdlong	local01, objptr
0816c     0F 21 02 F6 | 	mov	local02, local01
08170     01 20 66 F0 | 	shl	local02, #1
08174     0F 21 02 F1 | 	add	local02, local01
08178     02 20 66 F0 | 	shl	local02, #2
0817c     03 00 00 FF 
08180     00 E4 85 F1 | 	sub	objptr, ##1536
08184     F2 20 02 F1 | 	add	local02, objptr
08188     08 20 06 F1 | 	add	local02, #8
0818c     10 9D 68 FC | 	wrlong	#78, local02
08190     03 00 00 FF 
08194     08 E4 05 F1 | 	add	objptr, ##1544
08198     F2 22 02 FB | 	rdlong	local03, objptr
0819c     69 00 00 FF 
081a0     58 E4 85 F1 | 	sub	objptr, ##53848
081a4     04 4E 05 F1 | 	add	fp, #4
081a8     A7 22 62 FC | 	wrlong	local03, fp
081ac     08 4E 85 F1 | 	sub	fp, #8
081b0                 | ' 
081b0                 | '   gotoline=val%(lparts(ct).part$) 
081b0                 | '   compiledline(lineptr).result_type=token_fast_goto
081b0                 | ' ' now find a pointer to goto
081b0                 | '   gotoptr=programstart
081b0                 | '   do
081b0                 | LR__0680
081b0     10 4E 05 F1 | 	add	fp, #16
081b4     A7 12 02 F6 | 	mov	arg01, fp
081b8     08 4E 85 F1 | 	sub	fp, #8
081bc     A7 14 02 FB | 	rdlong	arg02, fp
081c0     08 4E 85 F1 | 	sub	fp, #8
081c4     18 16 06 F6 | 	mov	arg03, #24
081c8     0B 00 00 FF 
081cc     C0 E4 05 F1 | 	add	objptr, ##5824
081d0     F0 FF B0 FD | 	call	#_psram_spin2_read1
081d4     0B 00 00 FF 
081d8     C0 E4 85 F1 | 	sub	objptr, ##5824
081dc                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
081dc                 | '     if gotoheader(0)<>$FFFFFFFF then
081dc     10 4E 05 F1 | 	add	fp, #16
081e0     A7 22 02 FB | 	rdlong	local03, fp
081e4     10 4E 85 F1 | 	sub	fp, #16
081e8     FF FF 7F FF 
081ec     FF 23 0E F2 | 	cmp	local03, ##-1 wz
081f0     24 00 90 AD |  if_e	jmp	#LR__0681
081f4     08 4E 05 F1 | 	add	fp, #8
081f8     A7 22 02 FB | 	rdlong	local03, fp
081fc     04 4E 05 F1 | 	add	fp, #4
08200     A7 22 62 FC | 	wrlong	local03, fp
08204     18 4E 05 F1 | 	add	fp, #24
08208     A7 22 02 FB | 	rdlong	local03, fp
0820c     1C 4E 85 F1 | 	sub	fp, #28
08210     A7 22 62 FC | 	wrlong	local03, fp
08214     08 4E 85 F1 | 	sub	fp, #8
08218                 | LR__0681
08218     24 4E 05 F1 | 	add	fp, #36
0821c     A7 22 02 FB | 	rdlong	local03, fp
08220     24 4E 85 F1 | 	sub	fp, #36
08224     FF FF 3F FF 
08228     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0822c     10 4E 05 51 |  if_ne	add	fp, #16
08230     A7 1E 02 5B |  if_ne	rdlong	local01, fp
08234     10 4E 85 51 |  if_ne	sub	fp, #16
08238     FF FF 7F 5F 
0823c     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
08240     1C 00 90 AD |  if_e	jmp	#LR__0682
08244     10 4E 05 F1 | 	add	fp, #16
08248     A7 22 02 FB | 	rdlong	local03, fp
0824c     0C 4E 85 F1 | 	sub	fp, #12
08250     A7 20 02 FB | 	rdlong	local02, fp
08254     04 4E 85 F1 | 	sub	fp, #4
08258     10 23 0A F2 | 	cmp	local03, local02 wz
0825c     50 FF 9F 5D |  if_ne	jmp	#LR__0680
08260                 | LR__0682
08260                 | '   if gotoheader(0)=gotoline then
08260     10 4E 05 F1 | 	add	fp, #16
08264     A7 22 02 FB | 	rdlong	local03, fp
08268     0C 4E 85 F1 | 	sub	fp, #12
0826c     A7 1E 02 FB | 	rdlong	local01, fp
08270     04 4E 85 F1 | 	sub	fp, #4
08274     0F 23 0A F2 | 	cmp	local03, local01 wz
08278     7C 00 90 5D |  if_ne	jmp	#LR__0683
0827c     69 00 00 FF 
08280     50 E4 05 F1 | 	add	objptr, ##53840
08284     F2 1E 02 FB | 	rdlong	local01, objptr
08288     0F 21 02 F6 | 	mov	local02, local01
0828c     01 20 66 F0 | 	shl	local02, #1
08290     0F 21 02 F1 | 	add	local02, local01
08294     02 20 66 F0 | 	shl	local02, #2
08298     03 00 00 FF 
0829c     00 E4 85 F1 | 	sub	objptr, ##1536
082a0     F2 20 02 F1 | 	add	local02, objptr
082a4     0C 4E 05 F1 | 	add	fp, #12
082a8     A7 22 02 FB | 	rdlong	local03, fp
082ac     10 23 62 FC | 	wrlong	local03, local02
082b0     03 00 00 FF 
082b4     00 E4 05 F1 | 	add	objptr, ##1536
082b8     F2 1E 02 FB | 	rdlong	local01, objptr
082bc     0F 21 02 F6 | 	mov	local02, local01
082c0     01 20 66 F0 | 	shl	local02, #1
082c4     0F 21 02 F1 | 	add	local02, local01
082c8     02 20 66 F0 | 	shl	local02, #2
082cc     03 00 00 FF 
082d0     00 E4 85 F1 | 	sub	objptr, ##1536
082d4     F2 20 02 F1 | 	add	local02, objptr
082d8     08 4E 85 F1 | 	sub	fp, #8
082dc     A7 22 02 FB | 	rdlong	local03, fp
082e0     04 4E 85 F1 | 	sub	fp, #4
082e4     04 20 06 F1 | 	add	local02, #4
082e8     10 23 62 FC | 	wrlong	local03, local02
082ec     66 00 00 FF 
082f0     50 E4 85 F1 | 	sub	objptr, ##52304
082f4     A4 00 90 FD | 	jmp	#LR__0684
082f8                 | LR__0683
082f8     69 00 00 FF 
082fc     50 E4 05 F1 | 	add	objptr, ##53840
08300     F2 1E 02 FB | 	rdlong	local01, objptr
08304     0F 21 02 F6 | 	mov	local02, local01
08308     01 20 66 F0 | 	shl	local02, #1
0830c     0F 21 02 F1 | 	add	local02, local01
08310     02 20 66 F0 | 	shl	local02, #2
08314     03 00 00 FF 
08318     00 E4 85 F1 | 	sub	objptr, ##1536
0831c     F2 20 02 F1 | 	add	local02, objptr
08320     00 00 C0 FF 
08324     10 01 68 FC | 	wrlong	##-2147483648, local02
08328     03 00 00 FF 
0832c     00 E4 05 F1 | 	add	objptr, ##1536
08330     F2 1E 02 FB | 	rdlong	local01, objptr
08334     0F 21 02 F6 | 	mov	local02, local01
08338     01 20 66 F0 | 	shl	local02, #1
0833c     0F 21 02 F1 | 	add	local02, local01
08340     02 20 66 F0 | 	shl	local02, #2
08344     03 00 00 FF 
08348     00 E4 85 F1 | 	sub	objptr, ##1536
0834c     F2 20 02 F1 | 	add	local02, objptr
08350     04 4E 05 F1 | 	add	fp, #4
08354     A7 22 02 FB | 	rdlong	local03, fp
08358     04 4E 85 F1 | 	sub	fp, #4
0835c     04 20 06 F1 | 	add	local02, #4
08360     10 23 62 FC | 	wrlong	local03, local02
08364     03 00 00 FF 
08368     00 E4 05 F1 | 	add	objptr, ##1536
0836c     F2 1E 02 FB | 	rdlong	local01, objptr
08370     0F 21 02 F6 | 	mov	local02, local01
08374     01 20 66 F0 | 	shl	local02, #1
08378     0F 21 02 F1 | 	add	local02, local01
0837c     02 20 66 F0 | 	shl	local02, #2
08380     03 00 00 FF 
08384     00 E4 85 F1 | 	sub	objptr, ##1536
08388     F2 20 02 F1 | 	add	local02, objptr
0838c     08 20 06 F1 | 	add	local02, #8
08390     10 A7 68 FC | 	wrlong	#83, local02
08394     66 00 00 FF 
08398     50 E4 85 F1 | 	sub	objptr, ##52304
0839c                 | LR__0684
0839c     69 00 00 FF 
083a0     50 E4 05 F1 | 	add	objptr, ##53840
083a4     F2 22 02 FB | 	rdlong	local03, objptr
083a8     01 22 06 F1 | 	add	local03, #1
083ac     F2 22 62 FC | 	wrlong	local03, objptr
083b0     69 00 00 FF 
083b4     50 E4 85 F1 | 	sub	objptr, ##53840
083b8     40 00 90 FD | 	jmp	#LR__0686
083bc                 | LR__0685
083bc                 | '    print "We have a slow goto, todo  "
083bc     00 12 06 F6 | 	mov	arg01, #0
083c0     F4 61 B1 FD | 	call	#__system___getiolock_0423
083c4     FD 12 02 F6 | 	mov	arg01, result1
083c8     E8 08 B1 FD | 	call	#__system___lockmem
083cc     43 01 00 FF 
083d0     6B 14 06 F6 | 	mov	arg02, ##@LR__4574
083d4     00 12 06 F6 | 	mov	arg01, #0
083d8     00 16 06 F6 | 	mov	arg03, #0
083dc     C8 15 B1 FD | 	call	#__system___basic_print_string
083e0     00 12 06 F6 | 	mov	arg01, #0
083e4     0A 14 06 F6 | 	mov	arg02, #10
083e8     00 16 06 F6 | 	mov	arg03, #0
083ec     60 15 B1 FD | 	call	#__system___basic_print_char
083f0     00 12 06 F6 | 	mov	arg01, #0
083f4     C0 61 B1 FD | 	call	#__system___getiolock_0423
083f8     FD 00 68 FC | 	wrlong	#0, result1
083fc                 | LR__0686
083fc                 | ' ' if not, there is a slow goto. Call converttoint to get an int value from expression, then do_slow_goto
083fc                 | ' ' Do_slow_goto searches a line pointer list to find the linenum and pointer, then do the goto  
083fc                 | ' return 0
083fc     00 FA 05 F6 | 	mov	result1, #0
08400     A7 F0 03 F6 | 	mov	ptra, fp
08404     B2 00 A0 FD | 	call	#popregs_
08408                 | _compile_goto_ret
08408     2D 00 64 FD | 	ret
0840c                 | 
0840c                 | ' 
0840c                 | ' 
0840c                 | ' 
0840c                 | ' 
0840c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0840c                 | ' '------------------------------ End of the precompiler  --------------------------------------------------------------------------------
0840c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0840c                 | ' 
0840c                 | ' 
0840c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0840c                 | ' '---------------------------- Compile time expression decoder/evaluator ----------------------------------------------------------------
0840c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0840c                 | ' 
0840c                 | ' 
0840c                 | ' function expr() as integer 
0840c                 | _expr
0840c     07 4A 05 F6 | 	mov	COUNT_, #7
08410     A8 00 A0 FD | 	call	#pushregs_
08414                 | _expr_enter
08414     56 00 00 FF 
08418     18 E4 05 F1 | 	add	objptr, ##44056
0841c     F2 24 02 FB | 	rdlong	local04, objptr
08420     03 24 66 F0 | 	shl	local04, #3
08424     02 00 00 FF 
08428     38 E4 85 F1 | 	sub	objptr, ##1080
0842c     F2 24 02 F1 | 	add	local04, objptr
08430     04 24 06 F1 | 	add	local04, #4
08434     12 27 02 FB | 	rdlong	local05, local04
08438                 | ' 
08438                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
08438     FE 27 0E F2 | 	cmp	local05, #510 wz
0843c     53 00 00 FF 
08440     E0 E5 85 F1 | 	sub	objptr, ##42976
08444     C4 00 90 5D |  if_ne	jmp	#LR__0690
08448     1D 1E 06 F6 | 	mov	local01, #29
0844c     FF 22 06 F6 | 	mov	local03, #255
08450     0F 29 02 F6 | 	mov	local06, local01
08454     10 2B 02 F6 | 	mov	local07, local02
08458     11 1F 02 F6 | 	mov	local01, local03
0845c     69 00 00 FF 
08460     50 E4 05 F1 | 	add	objptr, ##53840
08464     F2 26 02 FB | 	rdlong	local05, objptr
08468     13 25 02 F6 | 	mov	local04, local05
0846c     01 24 66 F0 | 	shl	local04, #1
08470     13 25 02 F1 | 	add	local04, local05
08474     02 24 66 F0 | 	shl	local04, #2
08478     03 00 00 FF 
0847c     00 E4 85 F1 | 	sub	objptr, ##1536
08480     F2 24 02 F1 | 	add	local04, objptr
08484     12 29 62 FC | 	wrlong	local06, local04
08488     03 00 00 FF 
0848c     00 E4 05 F1 | 	add	objptr, ##1536
08490     F2 28 02 FB | 	rdlong	local06, objptr
08494     14 27 02 F6 | 	mov	local05, local06
08498     01 26 66 F0 | 	shl	local05, #1
0849c     14 27 02 F1 | 	add	local05, local06
084a0     02 26 66 F0 | 	shl	local05, #2
084a4     03 00 00 FF 
084a8     00 E4 85 F1 | 	sub	objptr, ##1536
084ac     F2 26 02 F1 | 	add	local05, objptr
084b0     04 26 06 F1 | 	add	local05, #4
084b4     13 2B 62 FC | 	wrlong	local07, local05
084b8     03 00 00 FF 
084bc     00 E4 05 F1 | 	add	objptr, ##1536
084c0     F2 2A 02 FB | 	rdlong	local07, objptr
084c4     15 29 02 F6 | 	mov	local06, local07
084c8     01 28 66 F0 | 	shl	local06, #1
084cc     15 29 02 F1 | 	add	local06, local07
084d0     02 28 66 F0 | 	shl	local06, #2
084d4     03 00 00 FF 
084d8     00 E4 85 F1 | 	sub	objptr, ##1536
084dc     F2 28 02 F1 | 	add	local06, objptr
084e0     08 28 06 F1 | 	add	local06, #8
084e4     14 1F 62 FC | 	wrlong	local01, local06
084e8     03 00 00 FF 
084ec     00 E4 05 F1 | 	add	objptr, ##1536
084f0     F2 28 02 FB | 	rdlong	local06, objptr
084f4     01 28 06 F1 | 	add	local06, #1
084f8     F2 28 62 FC | 	wrlong	local06, objptr
084fc     69 00 00 FF 
08500     50 E4 85 F1 | 	sub	objptr, ##53840
08504     1D FA 05 F6 | 	mov	result1, #29
08508     54 01 90 FD | 	jmp	#LR__0693
0850c                 | LR__0690
0850c     00 1E 06 F6 | 	mov	local01, #0
08510     58 01 B0 FD | 	call	#_addsub
08514     56 00 00 FF 
08518     18 E4 05 F1 | 	add	objptr, ##44056
0851c     F2 24 02 FB | 	rdlong	local04, objptr
08520     03 24 66 F0 | 	shl	local04, #3
08524     02 00 00 FF 
08528     38 E4 85 F1 | 	sub	objptr, ##1080
0852c     F2 24 02 F1 | 	add	local04, objptr
08530     04 24 06 F1 | 	add	local04, #4
08534     12 27 02 FB | 	rdlong	local05, local04
08538                 | ' t3.result.uresult=0
08538                 | ' rt=addsub()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
08538                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
08538                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
08538     53 00 00 FF 
0853c     E0 E5 85 F1 | 	sub	objptr, ##42976
08540                 | LR__0691
08540     1B 26 0E F2 | 	cmp	local05, #27 wz
08544     0F 26 0E 52 |  if_ne	cmp	local05, #15 wz
08548     10 26 0E 52 |  if_ne	cmp	local05, #16 wz
0854c     27 26 0E 52 |  if_ne	cmp	local05, #39 wz
08550     26 26 0E 52 |  if_ne	cmp	local05, #38 wz
08554     2A 26 0E 52 |  if_ne	cmp	local05, #42 wz
08558     00 01 90 5D |  if_ne	jmp	#LR__0692
0855c     56 00 00 FF 
08560     18 E4 05 F1 | 	add	objptr, ##44056
08564     F2 28 02 FB | 	rdlong	local06, objptr
08568     01 28 06 F1 | 	add	local06, #1
0856c     F2 28 62 FC | 	wrlong	local06, objptr
08570     56 00 00 FF 
08574     18 E4 85 F1 | 	sub	objptr, ##44056
08578     F0 00 B0 FD | 	call	#_addsub
0857c     13 23 02 F6 | 	mov	local03, local05
08580     0F 29 02 F6 | 	mov	local06, local01
08584     10 2B 02 F6 | 	mov	local07, local02
08588     11 27 02 F6 | 	mov	local05, local03
0858c     69 00 00 FF 
08590     50 E4 05 F1 | 	add	objptr, ##53840
08594     F2 24 02 FB | 	rdlong	local04, objptr
08598     12 FB 01 F6 | 	mov	result1, local04
0859c     01 FA 65 F0 | 	shl	result1, #1
085a0     12 FB 01 F1 | 	add	result1, local04
085a4     02 FA 65 F0 | 	shl	result1, #2
085a8     03 00 00 FF 
085ac     00 E4 85 F1 | 	sub	objptr, ##1536
085b0     F2 FA 01 F1 | 	add	result1, objptr
085b4     FD 28 62 FC | 	wrlong	local06, result1
085b8     03 00 00 FF 
085bc     00 E4 05 F1 | 	add	objptr, ##1536
085c0     F2 28 02 FB | 	rdlong	local06, objptr
085c4     14 25 02 F6 | 	mov	local04, local06
085c8     01 24 66 F0 | 	shl	local04, #1
085cc     14 25 02 F1 | 	add	local04, local06
085d0     02 24 66 F0 | 	shl	local04, #2
085d4     03 00 00 FF 
085d8     00 E4 85 F1 | 	sub	objptr, ##1536
085dc     F2 24 02 F1 | 	add	local04, objptr
085e0     04 24 06 F1 | 	add	local04, #4
085e4     12 2B 62 FC | 	wrlong	local07, local04
085e8     03 00 00 FF 
085ec     00 E4 05 F1 | 	add	objptr, ##1536
085f0     F2 2A 02 FB | 	rdlong	local07, objptr
085f4     15 29 02 F6 | 	mov	local06, local07
085f8     01 28 66 F0 | 	shl	local06, #1
085fc     15 29 02 F1 | 	add	local06, local07
08600     02 28 66 F0 | 	shl	local06, #2
08604     03 00 00 FF 
08608     00 E4 85 F1 | 	sub	objptr, ##1536
0860c     F2 28 02 F1 | 	add	local06, objptr
08610     08 28 06 F1 | 	add	local06, #8
08614     14 27 62 FC | 	wrlong	local05, local06
08618     03 00 00 FF 
0861c     00 E4 05 F1 | 	add	objptr, ##1536
08620     F2 28 02 FB | 	rdlong	local06, objptr
08624     01 28 06 F1 | 	add	local06, #1
08628     F2 28 62 FC | 	wrlong	local06, objptr
0862c     13 00 00 FF 
08630     38 E4 85 F1 | 	sub	objptr, ##9784
08634     F2 24 02 FB | 	rdlong	local04, objptr
08638     03 24 66 F0 | 	shl	local04, #3
0863c     02 00 00 FF 
08640     38 E4 85 F1 | 	sub	objptr, ##1080
08644     F2 24 02 F1 | 	add	local04, objptr
08648     04 24 06 F1 | 	add	local04, #4
0864c     12 27 02 FB | 	rdlong	local05, local04
08650     53 00 00 FF 
08654     E0 E5 85 F1 | 	sub	objptr, ##42976
08658     E4 FE 9F FD | 	jmp	#LR__0691
0865c                 | LR__0692
0865c                 | ' return 0  
0865c     00 FA 05 F6 | 	mov	result1, #0
08660                 | LR__0693
08660     A7 F0 03 F6 | 	mov	ptra, fp
08664     B2 00 A0 FD | 	call	#popregs_
08668                 | _expr_ret
08668     2D 00 64 FD | 	ret
0866c                 | 
0866c                 | ' 
0866c                 | ' 
0866c                 | ' '' todo: use propre ops. At getvar and getconst level we know the rt. If both are ints, do int op. If one are float, compile converttofloat, do float op. If both strings, call string op. If string ant int combined, compile err
0866c                 | ' 
0866c                 | ' function addsub() as integer 
0866c                 | _addsub
0866c     07 4A 05 F6 | 	mov	COUNT_, #7
08670     A8 00 A0 FD | 	call	#pushregs_
08674                 | _addsub_enter
08674     00 1E 06 F6 | 	mov	local01, #0
08678     50 01 B0 FD | 	call	#_muldiv
0867c     56 00 00 FF 
08680     18 E4 05 F1 | 	add	objptr, ##44056
08684     F2 24 02 FB | 	rdlong	local04, objptr
08688     03 24 66 F0 | 	shl	local04, #3
0868c     02 00 00 FF 
08690     38 E4 85 F1 | 	sub	objptr, ##1080
08694     F2 24 02 F1 | 	add	local04, objptr
08698     04 24 06 F1 | 	add	local04, #4
0869c     12 27 02 FB | 	rdlong	local05, local04
086a0                 | ' t3.result.uresult=0
086a0                 | ' muldiv()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
086a0                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
086a0                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
086a0     53 00 00 FF 
086a4     E0 E5 85 F1 | 	sub	objptr, ##42976
086a8                 | LR__0700
086a8     01 26 0E F2 | 	cmp	local05, #1 wz
086ac     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
086b0     07 26 0E 52 |  if_ne	cmp	local05, #7 wz
086b4     03 26 0E 52 |  if_ne	cmp	local05, #3 wz
086b8     00 01 90 5D |  if_ne	jmp	#LR__0701
086bc     56 00 00 FF 
086c0     18 E4 05 F1 | 	add	objptr, ##44056
086c4     F2 24 02 FB | 	rdlong	local04, objptr
086c8     01 24 06 F1 | 	add	local04, #1
086cc     F2 24 62 FC | 	wrlong	local04, objptr
086d0     56 00 00 FF 
086d4     18 E4 85 F1 | 	sub	objptr, ##44056
086d8     F0 00 B0 FD | 	call	#_muldiv
086dc     13 23 02 F6 | 	mov	local03, local05
086e0     0F 29 02 F6 | 	mov	local06, local01
086e4     10 2B 02 F6 | 	mov	local07, local02
086e8     11 27 02 F6 | 	mov	local05, local03
086ec     69 00 00 FF 
086f0     50 E4 05 F1 | 	add	objptr, ##53840
086f4     F2 24 02 FB | 	rdlong	local04, objptr
086f8     12 FB 01 F6 | 	mov	result1, local04
086fc     01 FA 65 F0 | 	shl	result1, #1
08700     12 FB 01 F1 | 	add	result1, local04
08704     02 FA 65 F0 | 	shl	result1, #2
08708     03 00 00 FF 
0870c     00 E4 85 F1 | 	sub	objptr, ##1536
08710     F2 FA 01 F1 | 	add	result1, objptr
08714     FD 28 62 FC | 	wrlong	local06, result1
08718     03 00 00 FF 
0871c     00 E4 05 F1 | 	add	objptr, ##1536
08720     F2 28 02 FB | 	rdlong	local06, objptr
08724     14 25 02 F6 | 	mov	local04, local06
08728     01 24 66 F0 | 	shl	local04, #1
0872c     14 25 02 F1 | 	add	local04, local06
08730     02 24 66 F0 | 	shl	local04, #2
08734     03 00 00 FF 
08738     00 E4 85 F1 | 	sub	objptr, ##1536
0873c     F2 24 02 F1 | 	add	local04, objptr
08740     04 24 06 F1 | 	add	local04, #4
08744     12 2B 62 FC | 	wrlong	local07, local04
08748     03 00 00 FF 
0874c     00 E4 05 F1 | 	add	objptr, ##1536
08750     F2 2A 02 FB | 	rdlong	local07, objptr
08754     15 29 02 F6 | 	mov	local06, local07
08758     01 28 66 F0 | 	shl	local06, #1
0875c     15 29 02 F1 | 	add	local06, local07
08760     02 28 66 F0 | 	shl	local06, #2
08764     03 00 00 FF 
08768     00 E4 85 F1 | 	sub	objptr, ##1536
0876c     F2 28 02 F1 | 	add	local06, objptr
08770     08 28 06 F1 | 	add	local06, #8
08774     14 27 62 FC | 	wrlong	local05, local06
08778     03 00 00 FF 
0877c     00 E4 05 F1 | 	add	objptr, ##1536
08780     F2 28 02 FB | 	rdlong	local06, objptr
08784     01 28 06 F1 | 	add	local06, #1
08788     F2 28 62 FC | 	wrlong	local06, objptr
0878c     13 00 00 FF 
08790     38 E4 85 F1 | 	sub	objptr, ##9784
08794     F2 24 02 FB | 	rdlong	local04, objptr
08798     03 24 66 F0 | 	shl	local04, #3
0879c     02 00 00 FF 
087a0     38 E4 85 F1 | 	sub	objptr, ##1080
087a4     F2 24 02 F1 | 	add	local04, objptr
087a8     04 24 06 F1 | 	add	local04, #4
087ac     12 27 02 FB | 	rdlong	local05, local04
087b0     53 00 00 FF 
087b4     E0 E5 85 F1 | 	sub	objptr, ##42976
087b8     EC FE 9F FD | 	jmp	#LR__0700
087bc                 | LR__0701
087bc                 | '   return 0
087bc     00 FA 05 F6 | 	mov	result1, #0
087c0     A7 F0 03 F6 | 	mov	ptra, fp
087c4     B2 00 A0 FD | 	call	#popregs_
087c8                 | _addsub_ret
087c8     2D 00 64 FD | 	ret
087cc                 | 
087cc                 | ' 
087cc                 | ' sub muldiv()
087cc                 | _muldiv
087cc     08 4A 05 F6 | 	mov	COUNT_, #8
087d0     A8 00 A0 FD | 	call	#pushregs_
087d4                 | _muldiv_enter
087d4     00 1E 06 F6 | 	mov	local01, #0
087d8     58 01 B0 FD | 	call	#_getvalue
087dc     56 00 00 FF 
087e0     18 E4 05 F1 | 	add	objptr, ##44056
087e4     F2 24 02 FB | 	rdlong	local04, objptr
087e8     03 24 66 F0 | 	shl	local04, #3
087ec     02 00 00 FF 
087f0     38 E4 85 F1 | 	sub	objptr, ##1080
087f4     F2 24 02 F1 | 	add	local04, objptr
087f8     04 24 06 F1 | 	add	local04, #4
087fc     12 27 02 FB | 	rdlong	local05, local04
08800                 | ' t3.result.uresult=0
08800                 | ' getvalue()    
08800                 | ' op = lparts(ct).token
08800                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
08800     53 00 00 FF 
08804     E0 E5 85 F1 | 	sub	objptr, ##42976
08808                 | LR__0710
08808     05 26 0E F2 | 	cmp	local05, #5 wz
0880c     08 26 0E 52 |  if_ne	cmp	local05, #8 wz
08810     06 26 0E 52 |  if_ne	cmp	local05, #6 wz
08814     09 26 0E 52 |  if_ne	cmp	local05, #9 wz
08818     0A 26 0E 52 |  if_ne	cmp	local05, #10 wz
0881c     0B 26 0E 52 |  if_ne	cmp	local05, #11 wz
08820     0C 26 0E 52 |  if_ne	cmp	local05, #12 wz
08824     00 01 90 5D |  if_ne	jmp	#LR__0711
08828     56 00 00 FF 
0882c     18 E4 05 F1 | 	add	objptr, ##44056
08830     F2 24 02 FB | 	rdlong	local04, objptr
08834     01 24 06 F1 | 	add	local04, #1
08838     F2 24 62 FC | 	wrlong	local04, objptr
0883c     56 00 00 FF 
08840     18 E4 85 F1 | 	sub	objptr, ##44056
08844     EC 00 B0 FD | 	call	#_getvalue
08848     13 23 02 F6 | 	mov	local03, local05
0884c     0F 29 02 F6 | 	mov	local06, local01
08850     10 2B 02 F6 | 	mov	local07, local02
08854     11 27 02 F6 | 	mov	local05, local03
08858     69 00 00 FF 
0885c     50 E4 05 F1 | 	add	objptr, ##53840
08860     F2 24 02 FB | 	rdlong	local04, objptr
08864     12 2D 02 F6 | 	mov	local08, local04
08868     01 2C 66 F0 | 	shl	local08, #1
0886c     12 2D 02 F1 | 	add	local08, local04
08870     02 2C 66 F0 | 	shl	local08, #2
08874     03 00 00 FF 
08878     00 E4 85 F1 | 	sub	objptr, ##1536
0887c     F2 2C 02 F1 | 	add	local08, objptr
08880     16 29 62 FC | 	wrlong	local06, local08
08884     03 00 00 FF 
08888     00 E4 05 F1 | 	add	objptr, ##1536
0888c     F2 2C 02 FB | 	rdlong	local08, objptr
08890     16 29 02 F6 | 	mov	local06, local08
08894     01 28 66 F0 | 	shl	local06, #1
08898     16 29 02 F1 | 	add	local06, local08
0889c     02 28 66 F0 | 	shl	local06, #2
088a0     03 00 00 FF 
088a4     00 E4 85 F1 | 	sub	objptr, ##1536
088a8     F2 28 02 F1 | 	add	local06, objptr
088ac     04 28 06 F1 | 	add	local06, #4
088b0     14 2B 62 FC | 	wrlong	local07, local06
088b4     03 00 00 FF 
088b8     00 E4 05 F1 | 	add	objptr, ##1536
088bc     F2 2C 02 FB | 	rdlong	local08, objptr
088c0     16 2B 02 F6 | 	mov	local07, local08
088c4     01 2A 66 F0 | 	shl	local07, #1
088c8     16 2B 02 F1 | 	add	local07, local08
088cc     02 2A 66 F0 | 	shl	local07, #2
088d0     03 00 00 FF 
088d4     00 E4 85 F1 | 	sub	objptr, ##1536
088d8     F2 2A 02 F1 | 	add	local07, objptr
088dc     08 2A 06 F1 | 	add	local07, #8
088e0     15 27 62 FC | 	wrlong	local05, local07
088e4     03 00 00 FF 
088e8     00 E4 05 F1 | 	add	objptr, ##1536
088ec     F2 28 02 FB | 	rdlong	local06, objptr
088f0     01 28 06 F1 | 	add	local06, #1
088f4     F2 28 62 FC | 	wrlong	local06, objptr
088f8     13 00 00 FF 
088fc     38 E4 85 F1 | 	sub	objptr, ##9784
08900     F2 24 02 FB | 	rdlong	local04, objptr
08904     03 24 66 F0 | 	shl	local04, #3
08908     02 00 00 FF 
0890c     38 E4 85 F1 | 	sub	objptr, ##1080
08910     F2 24 02 F1 | 	add	local04, objptr
08914     04 24 06 F1 | 	add	local04, #4
08918     12 27 02 FB | 	rdlong	local05, local04
0891c     53 00 00 FF 
08920     E0 E5 85 F1 | 	sub	objptr, ##42976
08924     E0 FE 9F FD | 	jmp	#LR__0710
08928                 | LR__0711
08928     A7 F0 03 F6 | 	mov	ptra, fp
0892c     B2 00 A0 FD | 	call	#popregs_
08930                 | _muldiv_ret
08930     2D 00 64 FD | 	ret
08934                 | 
08934                 | ' 
08934                 | ' sub getvalue() 
08934                 | _getvalue
08934     0B 4A 05 F6 | 	mov	COUNT_, #11
08938     A8 00 A0 FD | 	call	#pushregs_
0893c                 | _getvalue_enter
0893c     01 24 06 F6 | 	mov	local04, #1
08940     00 1E 06 F6 | 	mov	local01, #0
08944     1D 22 06 F6 | 	mov	local03, #29
08948     56 00 00 FF 
0894c     18 E4 05 F1 | 	add	objptr, ##44056
08950     F2 16 02 FB | 	rdlong	arg03, objptr
08954     03 16 66 F0 | 	shl	arg03, #3
08958     02 00 00 FF 
0895c     38 E4 85 F1 | 	sub	objptr, ##1080
08960     F2 16 02 F1 | 	add	arg03, objptr
08964     04 16 06 F1 | 	add	arg03, #4
08968     0B 27 02 FB | 	rdlong	local05, arg03
0896c                 | ' m=1
0896c                 | ' t1.result.uresult=0: t1.result_type=result_uint
0896c                 | ' op=lparts(ct).token
0896c                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token
0896c     02 26 0E F2 | 	cmp	local05, #2 wz
08970     53 00 00 FF 
08974     E0 E5 85 F1 | 	sub	objptr, ##42976
08978     38 00 90 5D |  if_ne	jmp	#LR__0720
0897c     01 24 66 F6 | 	neg	local04, #1
08980     56 00 00 FF 
08984     18 E4 05 F1 | 	add	objptr, ##44056
08988     F2 26 02 FB | 	rdlong	local05, objptr
0898c     01 26 06 F1 | 	add	local05, #1
08990     F2 26 62 FC | 	wrlong	local05, objptr
08994     03 26 66 F0 | 	shl	local05, #3
08998     02 00 00 FF 
0899c     38 E4 85 F1 | 	sub	objptr, ##1080
089a0     F2 26 02 F1 | 	add	local05, objptr
089a4     04 26 06 F1 | 	add	local05, #4
089a8     13 27 02 FB | 	rdlong	local05, local05
089ac     53 00 00 FF 
089b0     E0 E5 85 F1 | 	sub	objptr, ##42976
089b4                 | LR__0720
089b4                 | ' select case op
089b4     01 00 00 FF 
089b8     00 26 0E F2 | 	cmp	local05, ##512 wz
089bc     3C 00 90 AD |  if_e	jmp	#LR__0721
089c0     01 00 00 FF 
089c4     01 26 0E F2 | 	cmp	local05, ##513 wz
089c8     88 01 90 AD |  if_e	jmp	#LR__0724
089cc     01 00 00 FF 
089d0     02 26 0E F2 | 	cmp	local05, ##514 wz
089d4     84 02 90 AD |  if_e	jmp	#LR__0725
089d8     01 00 00 FF 
089dc     03 26 0E F2 | 	cmp	local05, ##515 wz
089e0     E8 03 90 AD |  if_e	jmp	#LR__0728
089e4     01 00 00 FF 
089e8     04 26 0E F2 | 	cmp	local05, ##516 wz
089ec     E0 05 90 AD |  if_e	jmp	#LR__0733
089f0     15 26 0E F2 | 	cmp	local05, #21 wz
089f4     00 06 90 AD |  if_e	jmp	#LR__0734
089f8     70 06 90 FD | 	jmp	#LR__0735
089fc                 | LR__0721
089fc                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
089fc     01 24 0E F2 | 	cmp	local04, #1 wz
08a00     3C 00 90 5D |  if_ne	jmp	#LR__0722
08a04     56 00 00 FF 
08a08     18 E4 05 F1 | 	add	objptr, ##44056
08a0c     F2 26 02 FB | 	rdlong	local05, objptr
08a10     03 26 66 F0 | 	shl	local05, #3
08a14     02 00 00 FF 
08a18     38 E4 85 F1 | 	sub	objptr, ##1080
08a1c     F2 26 02 F1 | 	add	local05, objptr
08a20     13 13 02 FB | 	rdlong	arg01, local05
08a24     00 14 06 F6 | 	mov	arg02, #0
08a28     53 00 00 FF 
08a2c     E0 E5 85 F1 | 	sub	objptr, ##42976
08a30     E4 33 B1 FD | 	call	#__system____builtin_atoi
08a34     FD 24 02 FD | 	qmul	local04, result1
08a38     18 1E 62 FD | 	getqx	local01
08a3c     1C 22 06 F6 | 	mov	local03, #28
08a40                 | LR__0722
08a40                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
08a40     FF FF 7F FF 
08a44     FF 25 0E F2 | 	cmp	local04, ##-1 wz
08a48     3C 00 90 5D |  if_ne	jmp	#LR__0723
08a4c     56 00 00 FF 
08a50     18 E4 05 F1 | 	add	objptr, ##44056
08a54     F2 26 02 FB | 	rdlong	local05, objptr
08a58     03 26 66 F0 | 	shl	local05, #3
08a5c     02 00 00 FF 
08a60     38 E4 85 F1 | 	sub	objptr, ##1080
08a64     F2 26 02 F1 | 	add	local05, objptr
08a68     13 13 02 FB | 	rdlong	arg01, local05
08a6c     00 14 06 F6 | 	mov	arg02, #0
08a70     53 00 00 FF 
08a74     E0 E5 85 F1 | 	sub	objptr, ##42976
08a78     9C 33 B1 FD | 	call	#__system____builtin_atoi
08a7c     FD 24 02 FD | 	qmul	local04, result1
08a80     18 1E 62 FD | 	getqx	local01
08a84     1C 22 06 F6 | 	mov	local03, #28
08a88                 | LR__0723
08a88     0F 29 02 F6 | 	mov	local06, local01
08a8c     10 2B 02 F6 | 	mov	local07, local02
08a90     11 27 02 F6 | 	mov	local05, local03
08a94     69 00 00 FF 
08a98     50 E4 05 F1 | 	add	objptr, ##53840
08a9c     F2 1E 02 FB | 	rdlong	local01, objptr
08aa0     0F 25 02 F6 | 	mov	local04, local01
08aa4     01 24 66 F0 | 	shl	local04, #1
08aa8     0F 25 02 F1 | 	add	local04, local01
08aac     02 24 66 F0 | 	shl	local04, #2
08ab0     03 00 00 FF 
08ab4     00 E4 85 F1 | 	sub	objptr, ##1536
08ab8     F2 24 02 F1 | 	add	local04, objptr
08abc     12 29 62 FC | 	wrlong	local06, local04
08ac0     03 00 00 FF 
08ac4     00 E4 05 F1 | 	add	objptr, ##1536
08ac8     F2 28 02 FB | 	rdlong	local06, objptr
08acc     14 1F 02 F6 | 	mov	local01, local06
08ad0     01 1E 66 F0 | 	shl	local01, #1
08ad4     14 1F 02 F1 | 	add	local01, local06
08ad8     02 1E 66 F0 | 	shl	local01, #2
08adc     03 00 00 FF 
08ae0     00 E4 85 F1 | 	sub	objptr, ##1536
08ae4     F2 1E 02 F1 | 	add	local01, objptr
08ae8     04 1E 06 F1 | 	add	local01, #4
08aec     0F 2B 62 FC | 	wrlong	local07, local01
08af0     03 00 00 FF 
08af4     00 E4 05 F1 | 	add	objptr, ##1536
08af8     F2 2A 02 FB | 	rdlong	local07, objptr
08afc     15 29 02 F6 | 	mov	local06, local07
08b00     01 28 66 F0 | 	shl	local06, #1
08b04     15 29 02 F1 | 	add	local06, local07
08b08     02 28 66 F0 | 	shl	local06, #2
08b0c     03 00 00 FF 
08b10     00 E4 85 F1 | 	sub	objptr, ##1536
08b14     F2 28 02 F1 | 	add	local06, objptr
08b18     08 28 06 F1 | 	add	local06, #8
08b1c     14 27 62 FC | 	wrlong	local05, local06
08b20     03 00 00 FF 
08b24     00 E4 05 F1 | 	add	objptr, ##1536
08b28     F2 28 02 FB | 	rdlong	local06, objptr
08b2c     01 28 06 F1 | 	add	local06, #1
08b30     F2 28 62 FC | 	wrlong	local06, objptr
08b34     13 00 00 FF 
08b38     38 E4 85 F1 | 	sub	objptr, ##9784
08b3c     F2 28 02 FB | 	rdlong	local06, objptr
08b40     01 28 06 F1 | 	add	local06, #1
08b44     F2 28 62 FC | 	wrlong	local06, objptr
08b48     56 00 00 FF 
08b4c     18 E4 85 F1 | 	sub	objptr, ##44056
08b50     3C 05 90 FD | 	jmp	#LR__0736
08b54                 | LR__0724
08b54     56 00 00 FF 
08b58     18 E4 05 F1 | 	add	objptr, ##44056
08b5c     F2 28 02 FB | 	rdlong	local06, objptr
08b60     03 28 66 F0 | 	shl	local06, #3
08b64     02 00 00 FF 
08b68     38 E4 85 F1 | 	sub	objptr, ##1080
08b6c     F2 28 02 F1 | 	add	local06, objptr
08b70     14 13 02 FB | 	rdlong	arg01, local06
08b74     00 14 06 F6 | 	mov	arg02, #0
08b78     53 00 00 FF 
08b7c     E0 E5 85 F1 | 	sub	objptr, ##42976
08b80     94 32 B1 FD | 	call	#__system____builtin_atoi
08b84     FD 24 02 FD | 	qmul	local04, result1
08b88     69 00 00 FF 
08b8c     50 E4 05 F1 | 	add	objptr, ##53840
08b90     F2 28 02 FB | 	rdlong	local06, objptr
08b94     14 2D 02 F6 | 	mov	local08, local06
08b98     01 2C 66 F0 | 	shl	local08, #1
08b9c     14 2D 02 F1 | 	add	local08, local06
08ba0     02 2C 66 F0 | 	shl	local08, #2
08ba4     03 00 00 FF 
08ba8     00 E4 85 F1 | 	sub	objptr, ##1536
08bac     F2 2C 02 F1 | 	add	local08, objptr
08bb0     03 00 00 FF 
08bb4     00 E4 05 F1 | 	add	objptr, ##1536
08bb8     18 1E 62 FD | 	getqx	local01
08bbc     1C 22 06 F6 | 	mov	local03, #28
08bc0     0F 29 02 F6 | 	mov	local06, local01
08bc4     10 2B 02 F6 | 	mov	local07, local02
08bc8     16 29 62 FC | 	wrlong	local06, local08
08bcc     11 2D 02 F6 | 	mov	local08, local03
08bd0     F2 28 02 FB | 	rdlong	local06, objptr
08bd4     14 27 02 F6 | 	mov	local05, local06
08bd8     01 26 66 F0 | 	shl	local05, #1
08bdc     14 27 02 F1 | 	add	local05, local06
08be0     02 26 66 F0 | 	shl	local05, #2
08be4     03 00 00 FF 
08be8     00 E4 85 F1 | 	sub	objptr, ##1536
08bec     F2 26 02 F1 | 	add	local05, objptr
08bf0     04 26 06 F1 | 	add	local05, #4
08bf4     13 2B 62 FC | 	wrlong	local07, local05
08bf8     03 00 00 FF 
08bfc     00 E4 05 F1 | 	add	objptr, ##1536
08c00     F2 2A 02 FB | 	rdlong	local07, objptr
08c04     15 29 02 F6 | 	mov	local06, local07
08c08     01 28 66 F0 | 	shl	local06, #1
08c0c     15 29 02 F1 | 	add	local06, local07
08c10     02 28 66 F0 | 	shl	local06, #2
08c14     03 00 00 FF 
08c18     00 E4 85 F1 | 	sub	objptr, ##1536
08c1c     F2 28 02 F1 | 	add	local06, objptr
08c20     08 28 06 F1 | 	add	local06, #8
08c24     14 2D 62 FC | 	wrlong	local08, local06
08c28     03 00 00 FF 
08c2c     00 E4 05 F1 | 	add	objptr, ##1536
08c30     F2 28 02 FB | 	rdlong	local06, objptr
08c34     01 28 06 F1 | 	add	local06, #1
08c38     F2 28 62 FC | 	wrlong	local06, objptr
08c3c     13 00 00 FF 
08c40     38 E4 85 F1 | 	sub	objptr, ##9784
08c44     F2 28 02 FB | 	rdlong	local06, objptr
08c48     01 28 06 F1 | 	add	local06, #1
08c4c     F2 28 62 FC | 	wrlong	local06, objptr
08c50     56 00 00 FF 
08c54     18 E4 85 F1 | 	sub	objptr, ##44056
08c58     34 04 90 FD | 	jmp	#LR__0736
08c5c                 | LR__0725
08c5c                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
08c5c     01 24 0E F2 | 	cmp	local04, #1 wz
08c60     48 00 90 5D |  if_ne	jmp	#LR__0726
08c64     00 C0 1F FF 
08c68     00 28 06 F6 | 	mov	local06, ##1065353216
08c6c     56 00 00 FF 
08c70     18 E4 05 F1 | 	add	objptr, ##44056
08c74     F2 2C 02 FB | 	rdlong	local08, objptr
08c78     03 2C 66 F0 | 	shl	local08, #3
08c7c     02 00 00 FF 
08c80     38 E4 85 F1 | 	sub	objptr, ##1080
08c84     F2 2C 02 F1 | 	add	local08, objptr
08c88     16 13 02 FB | 	rdlong	arg01, local08
08c8c     53 00 00 FF 
08c90     E0 E5 85 F1 | 	sub	objptr, ##42976
08c94     F0 32 B1 FD | 	call	#__system____builtin_atof
08c98     FD 14 02 F6 | 	mov	arg02, result1
08c9c     14 13 02 F6 | 	mov	arg01, local06
08ca0     FC 2A B1 FD | 	call	#__system___float_mul
08ca4     FD 1E 02 F6 | 	mov	local01, result1
08ca8     1E 22 06 F6 | 	mov	local03, #30
08cac                 | LR__0726
08cac                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
08cac     FF FF 7F FF 
08cb0     FF 25 0E F2 | 	cmp	local04, ##-1 wz
08cb4     48 00 90 5D |  if_ne	jmp	#LR__0727
08cb8     00 C0 5F FF 
08cbc     00 28 06 F6 | 	mov	local06, ##-1082130432
08cc0     56 00 00 FF 
08cc4     18 E4 05 F1 | 	add	objptr, ##44056
08cc8     F2 2C 02 FB | 	rdlong	local08, objptr
08ccc     03 2C 66 F0 | 	shl	local08, #3
08cd0     02 00 00 FF 
08cd4     38 E4 85 F1 | 	sub	objptr, ##1080
08cd8     F2 2C 02 F1 | 	add	local08, objptr
08cdc     16 13 02 FB | 	rdlong	arg01, local08
08ce0     53 00 00 FF 
08ce4     E0 E5 85 F1 | 	sub	objptr, ##42976
08ce8     9C 32 B1 FD | 	call	#__system____builtin_atof
08cec     FD 14 02 F6 | 	mov	arg02, result1
08cf0     14 13 02 F6 | 	mov	arg01, local06
08cf4     A8 2A B1 FD | 	call	#__system___float_mul
08cf8     FD 1E 02 F6 | 	mov	local01, result1
08cfc     1E 22 06 F6 | 	mov	local03, #30
08d00                 | LR__0727
08d00     0F 29 02 F6 | 	mov	local06, local01
08d04     10 2B 02 F6 | 	mov	local07, local02
08d08     11 27 02 F6 | 	mov	local05, local03
08d0c     69 00 00 FF 
08d10     50 E4 05 F1 | 	add	objptr, ##53840
08d14     F2 1E 02 FB | 	rdlong	local01, objptr
08d18     0F 2D 02 F6 | 	mov	local08, local01
08d1c     01 2C 66 F0 | 	shl	local08, #1
08d20     0F 2D 02 F1 | 	add	local08, local01
08d24     02 2C 66 F0 | 	shl	local08, #2
08d28     03 00 00 FF 
08d2c     00 E4 85 F1 | 	sub	objptr, ##1536
08d30     F2 2C 02 F1 | 	add	local08, objptr
08d34     16 29 62 FC | 	wrlong	local06, local08
08d38     03 00 00 FF 
08d3c     00 E4 05 F1 | 	add	objptr, ##1536
08d40     F2 2C 02 FB | 	rdlong	local08, objptr
08d44     16 29 02 F6 | 	mov	local06, local08
08d48     01 28 66 F0 | 	shl	local06, #1
08d4c     16 29 02 F1 | 	add	local06, local08
08d50     02 28 66 F0 | 	shl	local06, #2
08d54     03 00 00 FF 
08d58     00 E4 85 F1 | 	sub	objptr, ##1536
08d5c     F2 28 02 F1 | 	add	local06, objptr
08d60     04 28 06 F1 | 	add	local06, #4
08d64     14 2B 62 FC | 	wrlong	local07, local06
08d68     03 00 00 FF 
08d6c     00 E4 05 F1 | 	add	objptr, ##1536
08d70     F2 2C 02 FB | 	rdlong	local08, objptr
08d74     16 2B 02 F6 | 	mov	local07, local08
08d78     01 2A 66 F0 | 	shl	local07, #1
08d7c     16 2B 02 F1 | 	add	local07, local08
08d80     02 2A 66 F0 | 	shl	local07, #2
08d84     03 00 00 FF 
08d88     00 E4 85 F1 | 	sub	objptr, ##1536
08d8c     F2 2A 02 F1 | 	add	local07, objptr
08d90     08 2A 06 F1 | 	add	local07, #8
08d94     15 27 62 FC | 	wrlong	local05, local07
08d98     03 00 00 FF 
08d9c     00 E4 05 F1 | 	add	objptr, ##1536
08da0     F2 28 02 FB | 	rdlong	local06, objptr
08da4     01 28 06 F1 | 	add	local06, #1
08da8     F2 28 62 FC | 	wrlong	local06, objptr
08dac     13 00 00 FF 
08db0     38 E4 85 F1 | 	sub	objptr, ##9784
08db4     F2 28 02 FB | 	rdlong	local06, objptr
08db8     01 28 06 F1 | 	add	local06, #1
08dbc     F2 28 62 FC | 	wrlong	local06, objptr
08dc0     56 00 00 FF 
08dc4     18 E4 85 F1 | 	sub	objptr, ##44056
08dc8     C4 02 90 FD | 	jmp	#LR__0736
08dcc                 | LR__0728
08dcc     1F 22 06 F6 | 	mov	local03, #31
08dd0     56 00 00 FF 
08dd4     18 E4 05 F1 | 	add	objptr, ##44056
08dd8     F2 16 02 FB | 	rdlong	arg03, objptr
08ddc     03 16 66 F0 | 	shl	arg03, #3
08de0     02 00 00 FF 
08de4     38 E4 85 F1 | 	sub	objptr, ##1080
08de8     F2 16 02 F1 | 	add	arg03, objptr
08dec     0B 13 02 FB | 	rdlong	arg01, arg03
08df0     53 00 00 FF 
08df4     E0 E5 85 F1 | 	sub	objptr, ##42976
08df8     09 2F 02 F6 | 	mov	local09, arg01
08dfc     97 06 48 FB | 	callpa	#(@LR__0730-@LR__0729)>>2,fcache_load_ptr_
08e00                 | LR__0729
08e00     17 FB C9 FA | 	rdbyte	result1, local09 wz
08e04     01 2E 06 51 |  if_ne	add	local09, #1
08e08     F4 FF 9F 5D |  if_ne	jmp	#LR__0729
08e0c                 | LR__0730
08e0c     09 2F 82 F1 | 	sub	local09, arg01
08e10     17 FB 01 F6 | 	mov	result1, local09
08e14     7A 00 00 FF 
08e18     84 E4 05 F1 | 	add	objptr, ##62596
08e1c     F2 FA 61 FC | 	wrlong	result1, objptr
08e20     38 E4 85 F1 | 	sub	objptr, #56
08e24     F2 12 02 FB | 	rdlong	arg01, objptr
08e28     FD 12 82 F1 | 	sub	arg01, result1
08e2c     04 12 86 F1 | 	sub	arg01, #4
08e30     03 12 26 F5 | 	andn	arg01, #3
08e34     F2 12 62 FC | 	wrlong	arg01, objptr
08e38     38 E4 05 F1 | 	add	objptr, #56
08e3c     F2 14 02 FB | 	rdlong	arg02, objptr
08e40     01 16 06 F6 | 	mov	arg03, #1
08e44     00 18 06 F6 | 	mov	arg04, #0
08e48     6E 00 00 FF 
08e4c     C4 E5 85 F1 | 	sub	objptr, ##56772
08e50                 | '     return fill(addr, pattern, count, listPtr, 4)
08e50     04 1A 06 F6 | 	mov	arg05, #4
08e54     A4 F4 B0 FD | 	call	#_psram_spin2_fill
08e58                 | '     pslpoke memtop,l
08e58                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
08e58     01 30 06 F6 | 	mov	local10, #1
08e5c     6E 00 00 FF 
08e60     C4 E5 05 F1 | 	add	objptr, ##56772
08e64     F2 32 02 FB | 	rdlong	local11, objptr
08e68     7A 00 00 FF 
08e6c     84 E4 85 F1 | 	sub	objptr, ##62596
08e70     01 32 06 F1 | 	add	local11, #1
08e74                 | LR__0731
08e74     19 31 52 F2 | 	cmps	local10, local11 wc
08e78     78 00 90 3D |  if_ae	jmp	#LR__0732
08e7c     7A 00 00 FF 
08e80     4C E4 05 F1 | 	add	objptr, ##62540
08e84     F2 2A 02 FB | 	rdlong	local07, objptr
08e88     03 2A 06 F1 | 	add	local07, #3
08e8c     18 2B 02 F1 | 	add	local07, local10
08e90     24 00 00 FF 
08e94     34 E4 85 F1 | 	sub	objptr, ##18484
08e98     F2 2C 02 FB | 	rdlong	local08, objptr
08e9c     03 2C 66 F0 | 	shl	local08, #3
08ea0     02 00 00 FF 
08ea4     38 E4 85 F1 | 	sub	objptr, ##1080
08ea8     F2 2C 02 F1 | 	add	local08, objptr
08eac     16 13 02 FB | 	rdlong	arg01, local08
08eb0     18 15 02 F6 | 	mov	arg02, local10
08eb4     01 16 06 F6 | 	mov	arg03, #1
08eb8     53 00 00 FF 
08ebc     E0 E5 85 F1 | 	sub	objptr, ##42976
08ec0     18 1F B1 FD | 	call	#__system__Mid_S
08ec4     FD 14 C2 FA | 	rdbyte	arg02, result1
08ec8     15 13 02 F6 | 	mov	arg01, local07
08ecc     01 16 06 F6 | 	mov	arg03, #1
08ed0     00 18 06 F6 | 	mov	arg04, #0
08ed4     0B 00 00 FF 
08ed8     C0 E4 05 F1 | 	add	objptr, ##5824
08edc                 | '     return fill(addr, pattern, count, listPtr, 1)
08edc     01 1A 06 F6 | 	mov	arg05, #1
08ee0     18 F4 B0 FD | 	call	#_psram_spin2_fill
08ee4     0B 00 00 FF 
08ee8     C0 E4 85 F1 | 	sub	objptr, ##5824
08eec     01 30 06 F1 | 	add	local10, #1
08ef0     80 FF 9F FD | 	jmp	#LR__0731
08ef4                 | LR__0732
08ef4     7A 00 00 FF 
08ef8     4C E4 05 F1 | 	add	objptr, ##62540
08efc     F2 1E 02 FB | 	rdlong	local01, objptr
08f00     2B 22 06 F6 | 	mov	local03, #43
08f04     0F 29 02 F6 | 	mov	local06, local01
08f08     10 2B 02 F6 | 	mov	local07, local02
08f0c     11 33 02 F6 | 	mov	local11, local03
08f10     10 00 00 FF 
08f14     FC E5 85 F1 | 	sub	objptr, ##8700
08f18     F2 30 02 FB | 	rdlong	local10, objptr
08f1c     18 2D 02 F6 | 	mov	local08, local10
08f20     01 2C 66 F0 | 	shl	local08, #1
08f24     18 2D 02 F1 | 	add	local08, local10
08f28     02 2C 66 F0 | 	shl	local08, #2
08f2c     03 00 00 FF 
08f30     00 E4 85 F1 | 	sub	objptr, ##1536
08f34     F2 2C 02 F1 | 	add	local08, objptr
08f38     16 29 62 FC | 	wrlong	local06, local08
08f3c     03 00 00 FF 
08f40     00 E4 05 F1 | 	add	objptr, ##1536
08f44     F2 30 02 FB | 	rdlong	local10, objptr
08f48     18 2D 02 F6 | 	mov	local08, local10
08f4c     01 2C 66 F0 | 	shl	local08, #1
08f50     18 2D 02 F1 | 	add	local08, local10
08f54     02 2C 66 F0 | 	shl	local08, #2
08f58     03 00 00 FF 
08f5c     00 E4 85 F1 | 	sub	objptr, ##1536
08f60     F2 2C 02 F1 | 	add	local08, objptr
08f64     04 2C 06 F1 | 	add	local08, #4
08f68     16 2B 62 FC | 	wrlong	local07, local08
08f6c     03 00 00 FF 
08f70     00 E4 05 F1 | 	add	objptr, ##1536
08f74     F2 30 02 FB | 	rdlong	local10, objptr
08f78     18 2D 02 F6 | 	mov	local08, local10
08f7c     01 2C 66 F0 | 	shl	local08, #1
08f80     18 2D 02 F1 | 	add	local08, local10
08f84     02 2C 66 F0 | 	shl	local08, #2
08f88     03 00 00 FF 
08f8c     00 E4 85 F1 | 	sub	objptr, ##1536
08f90     F2 2C 02 F1 | 	add	local08, objptr
08f94     08 2C 06 F1 | 	add	local08, #8
08f98     16 33 62 FC | 	wrlong	local11, local08
08f9c     03 00 00 FF 
08fa0     00 E4 05 F1 | 	add	objptr, ##1536
08fa4     F2 28 02 FB | 	rdlong	local06, objptr
08fa8     01 28 06 F1 | 	add	local06, #1
08fac     F2 28 62 FC | 	wrlong	local06, objptr
08fb0     13 00 00 FF 
08fb4     38 E4 85 F1 | 	sub	objptr, ##9784
08fb8     F2 28 02 FB | 	rdlong	local06, objptr
08fbc     01 28 06 F1 | 	add	local06, #1
08fc0     F2 28 62 FC | 	wrlong	local06, objptr
08fc4     56 00 00 FF 
08fc8     18 E4 85 F1 | 	sub	objptr, ##44056
08fcc     C0 00 90 FD | 	jmp	#LR__0736
08fd0                 | LR__0733
08fd0     12 13 02 F6 | 	mov	arg01, local04
08fd4     B8 03 B0 FD | 	call	#_getvar
08fd8     56 00 00 FF 
08fdc     18 E4 05 F1 | 	add	objptr, ##44056
08fe0     F2 28 02 FB | 	rdlong	local06, objptr
08fe4     01 28 06 F1 | 	add	local06, #1
08fe8     F2 28 62 FC | 	wrlong	local06, objptr
08fec     56 00 00 FF 
08ff0     18 E4 85 F1 | 	sub	objptr, ##44056
08ff4     98 00 90 FD | 	jmp	#LR__0736
08ff8                 | LR__0734
08ff8     56 00 00 FF 
08ffc     18 E4 05 F1 | 	add	objptr, ##44056
09000     F2 28 02 FB | 	rdlong	local06, objptr
09004     01 28 06 F1 | 	add	local06, #1
09008     F2 28 62 FC | 	wrlong	local06, objptr
0900c     56 00 00 FF 
09010     18 E4 85 F1 | 	sub	objptr, ##44056
09014     F4 F3 BF FD | 	call	#_expr
09018                 | '     ct+=1
09018                 | '     expr() 
09018                 | '     if lparts(ct).token=token_rpar then ct+=1
09018     56 00 00 FF 
0901c     18 E4 05 F1 | 	add	objptr, ##44056
09020     F2 32 02 FB | 	rdlong	local11, objptr
09024     03 32 66 F0 | 	shl	local11, #3
09028     02 00 00 FF 
0902c     38 E4 85 F1 | 	sub	objptr, ##1080
09030     F2 32 02 F1 | 	add	local11, objptr
09034     04 32 06 F1 | 	add	local11, #4
09038     19 33 02 FB | 	rdlong	local11, local11
0903c     14 32 0E F2 | 	cmp	local11, #20 wz
09040     53 00 00 FF 
09044     E0 E5 85 F1 | 	sub	objptr, ##42976
09048     44 00 90 5D |  if_ne	jmp	#LR__0736
0904c     56 00 00 FF 
09050     18 E4 05 F1 | 	add	objptr, ##44056
09054     F2 28 02 FB | 	rdlong	local06, objptr
09058     01 28 06 F1 | 	add	local06, #1
0905c     F2 28 62 FC | 	wrlong	local06, objptr
09060     56 00 00 FF 
09064     18 E4 85 F1 | 	sub	objptr, ##44056
09068     24 00 90 FD | 	jmp	#LR__0736
0906c                 | LR__0735
0906c     12 13 02 F6 | 	mov	arg01, local04
09070     28 00 B0 FD | 	call	#_getfun
09074     56 00 00 FF 
09078     18 E4 05 F1 | 	add	objptr, ##44056
0907c     F2 28 02 FB | 	rdlong	local06, objptr
09080     01 28 06 F1 | 	add	local06, #1
09084     F2 28 62 FC | 	wrlong	local06, objptr
09088     56 00 00 FF 
0908c     18 E4 85 F1 | 	sub	objptr, ##44056
09090                 | LR__0736
09090     A7 F0 03 F6 | 	mov	ptra, fp
09094     B2 00 A0 FD | 	call	#popregs_
09098                 | _getvalue_ret
09098     2D 00 64 FD | 	ret
0909c                 | 
0909c                 | ' 
0909c                 | ' sub getfun(m as integer) ' todo - functions return type, todo" fun can have expr list after it
0909c                 | _getfun
0909c     0A 4A 05 F6 | 	mov	COUNT_, #10
090a0     A8 00 A0 FD | 	call	#pushregs_
090a4                 | _getfun_enter
090a4     09 25 02 F6 | 	mov	local04, arg01
090a8     56 00 00 FF 
090ac     18 E4 05 F1 | 	add	objptr, ##44056
090b0     F2 26 02 FB | 	rdlong	local05, objptr
090b4     13 29 02 F6 | 	mov	local06, local05
090b8     00 2A 06 F6 | 	mov	local07, #0
090bc                 | '  ' if lparts(ct+1).token=token_lpar then oldct=ct: ct+=1: expr()
090bc                 | ' oldct=ct
090bc                 | ' numpar=0
090bc                 | '   
090bc                 | ' if lparts(ct+1).token=token_lpar then
090bc     01 26 06 F1 | 	add	local05, #1
090c0     03 26 66 F0 | 	shl	local05, #3
090c4     02 00 00 FF 
090c8     38 E4 85 F1 | 	sub	objptr, ##1080
090cc     F2 26 02 F1 | 	add	local05, objptr
090d0     04 26 06 F1 | 	add	local05, #4
090d4     13 27 02 FB | 	rdlong	local05, local05
090d8     15 26 0E F2 | 	cmp	local05, #21 wz
090dc     53 00 00 FF 
090e0     E0 E5 85 F1 | 	sub	objptr, ##42976
090e4     08 01 90 5D |  if_ne	jmp	#LR__0744
090e8     56 00 00 FF 
090ec     18 E4 05 F1 | 	add	objptr, ##44056
090f0     F2 2C 02 FB | 	rdlong	local08, objptr
090f4     01 2C 06 F1 | 	add	local08, #1
090f8     F2 2C 62 FC | 	wrlong	local08, objptr
090fc     56 00 00 FF 
09100     18 E4 85 F1 | 	sub	objptr, ##44056
09104                 | '   ct+=1 											' omit this lpar, this is for expr list
09104                 | '   do
09104                 | LR__0740
09104     56 00 00 FF 
09108     18 E4 05 F1 | 	add	objptr, ##44056
0910c     F2 26 02 FB | 	rdlong	local05, objptr
09110     01 26 06 F1 | 	add	local05, #1
09114     F2 26 62 FC | 	wrlong	local05, objptr
09118                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
09118                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
09118     03 26 66 F0 | 	shl	local05, #3
0911c     02 00 00 FF 
09120     38 E4 85 F1 | 	sub	objptr, ##1080
09124     F2 26 02 F1 | 	add	local05, objptr
09128     04 26 06 F1 | 	add	local05, #4
0912c     13 2D 02 FB | 	rdlong	local08, local05
09130     15 2C 0E F2 | 	cmp	local08, #21 wz
09134     53 00 00 FF 
09138     E0 E5 85 F1 | 	sub	objptr, ##42976
0913c     40 00 90 5D |  if_ne	jmp	#LR__0741
09140     56 00 00 FF 
09144     18 E4 05 F1 | 	add	objptr, ##44056
09148     F2 2C 02 FB | 	rdlong	local08, objptr
0914c     01 2C 06 F1 | 	add	local08, #1
09150     F2 2C 62 FC | 	wrlong	local08, objptr
09154     56 00 00 FF 
09158     18 E4 85 F1 | 	sub	objptr, ##44056
0915c     AC F2 BF FD | 	call	#_expr
09160     56 00 00 FF 
09164     18 E4 05 F1 | 	add	objptr, ##44056
09168     F2 2C 02 FB | 	rdlong	local08, objptr
0916c     01 2C 06 F1 | 	add	local08, #1
09170     F2 2C 62 FC | 	wrlong	local08, objptr
09174     56 00 00 FF 
09178     18 E4 85 F1 | 	sub	objptr, ##44056
0917c     04 00 90 FD | 	jmp	#LR__0742
09180                 | LR__0741
09180     88 F2 BF FD | 	call	#_expr
09184                 | LR__0742
09184     01 2A 06 F1 | 	add	local07, #1
09188     56 00 00 FF 
0918c     18 E4 05 F1 | 	add	objptr, ##44056
09190     F2 26 02 FB | 	rdlong	local05, objptr
09194     03 26 66 F0 | 	shl	local05, #3
09198     02 00 00 FF 
0919c     38 E4 85 F1 | 	sub	objptr, ##1080
091a0     F2 26 02 F1 | 	add	local05, objptr
091a4     04 26 06 F1 | 	add	local05, #4
091a8     13 2D 02 FB | 	rdlong	local08, local05
091ac     14 2C 0E F2 | 	cmp	local08, #20 wz
091b0     53 00 00 FF 
091b4     E0 E5 85 F1 | 	sub	objptr, ##42976
091b8     34 00 90 AD |  if_e	jmp	#LR__0743
091bc     56 00 00 FF 
091c0     18 E4 05 F1 | 	add	objptr, ##44056
091c4     F2 2C 02 FB | 	rdlong	local08, objptr
091c8     03 2C 66 F0 | 	shl	local08, #3
091cc     02 00 00 FF 
091d0     38 E4 85 F1 | 	sub	objptr, ##1080
091d4     F2 2C 02 F1 | 	add	local08, objptr
091d8     04 2C 06 F1 | 	add	local08, #4
091dc     16 2D 02 FB | 	rdlong	local08, local08
091e0     FE 2D 0E F2 | 	cmp	local08, #510 wz
091e4     53 00 00 FF 
091e8     E0 E5 85 F1 | 	sub	objptr, ##42976
091ec     14 FF 9F 5D |  if_ne	jmp	#LR__0740
091f0                 | LR__0743
091f0                 | LR__0744
091f0     15 1F 02 F6 | 	mov	local01, local07
091f4     03 28 66 F0 | 	shl	local06, #3
091f8     53 00 00 FF 
091fc     E0 E5 05 F1 | 	add	objptr, ##42976
09200     F2 28 02 F1 | 	add	local06, objptr
09204     04 28 06 F1 | 	add	local06, #4
09208     14 23 02 FB | 	rdlong	local03, local06
0920c     0F 2D 02 F6 | 	mov	local08, local01
09210     10 2B 02 F6 | 	mov	local07, local02
09214     11 29 02 F6 | 	mov	local06, local03
09218     15 00 00 FF 
0921c     70 E4 05 F1 | 	add	objptr, ##10864
09220     F2 26 02 FB | 	rdlong	local05, objptr
09224     13 13 02 F6 | 	mov	arg01, local05
09228     01 12 66 F0 | 	shl	arg01, #1
0922c     13 13 02 F1 | 	add	arg01, local05
09230     02 12 66 F0 | 	shl	arg01, #2
09234     03 00 00 FF 
09238     00 E4 85 F1 | 	sub	objptr, ##1536
0923c     F2 12 02 F1 | 	add	arg01, objptr
09240     09 2D 62 FC | 	wrlong	local08, arg01
09244     03 00 00 FF 
09248     00 E4 05 F1 | 	add	objptr, ##1536
0924c     F2 2C 02 FB | 	rdlong	local08, objptr
09250     16 2F 02 F6 | 	mov	local09, local08
09254     01 2E 66 F0 | 	shl	local09, #1
09258     16 2F 02 F1 | 	add	local09, local08
0925c     02 2E 66 F0 | 	shl	local09, #2
09260     03 00 00 FF 
09264     00 E4 85 F1 | 	sub	objptr, ##1536
09268     F2 2E 02 F1 | 	add	local09, objptr
0926c     04 2E 06 F1 | 	add	local09, #4
09270     17 2B 62 FC | 	wrlong	local07, local09
09274     03 00 00 FF 
09278     00 E4 05 F1 | 	add	objptr, ##1536
0927c     F2 2C 02 FB | 	rdlong	local08, objptr
09280     16 31 02 F6 | 	mov	local10, local08
09284     01 30 66 F0 | 	shl	local10, #1
09288     16 31 02 F1 | 	add	local10, local08
0928c     02 30 66 F0 | 	shl	local10, #2
09290     03 00 00 FF 
09294     00 E4 85 F1 | 	sub	objptr, ##1536
09298     F2 30 02 F1 | 	add	local10, objptr
0929c     08 30 06 F1 | 	add	local10, #8
092a0     18 29 62 FC | 	wrlong	local06, local10
092a4     03 00 00 FF 
092a8     00 E4 05 F1 | 	add	objptr, ##1536
092ac     F2 2C 02 FB | 	rdlong	local08, objptr
092b0     01 2C 06 F1 | 	add	local08, #1
092b4     F2 2C 62 FC | 	wrlong	local08, objptr
092b8     69 00 00 FF 
092bc     50 E4 85 F1 | 	sub	objptr, ##53840
092c0                 | ' 
092c0                 | ' t2.result.uresult=numpar
092c0                 | ' 
092c0                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
092c0                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
092c0                 | ' 
092c0                 | '   
092c0                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
092c0     FF FF 7F FF 
092c4     FF 25 0E F2 | 	cmp	local04, ##-1 wz
092c8     B8 00 90 5D |  if_ne	jmp	#LR__0745
092cc     15 22 06 F6 | 	mov	local03, #21
092d0     0F 2D 02 F6 | 	mov	local08, local01
092d4     10 2B 02 F6 | 	mov	local07, local02
092d8     11 29 02 F6 | 	mov	local06, local03
092dc     69 00 00 FF 
092e0     50 E4 05 F1 | 	add	objptr, ##53840
092e4     F2 26 02 FB | 	rdlong	local05, objptr
092e8     13 13 02 F6 | 	mov	arg01, local05
092ec     01 12 66 F0 | 	shl	arg01, #1
092f0     13 13 02 F1 | 	add	arg01, local05
092f4     02 12 66 F0 | 	shl	arg01, #2
092f8     03 00 00 FF 
092fc     00 E4 85 F1 | 	sub	objptr, ##1536
09300     F2 12 02 F1 | 	add	arg01, objptr
09304     09 2D 62 FC | 	wrlong	local08, arg01
09308     03 00 00 FF 
0930c     00 E4 05 F1 | 	add	objptr, ##1536
09310     F2 30 02 FB | 	rdlong	local10, objptr
09314     18 2F 02 F6 | 	mov	local09, local10
09318     01 2E 66 F0 | 	shl	local09, #1
0931c     18 2F 02 F1 | 	add	local09, local10
09320     02 2E 66 F0 | 	shl	local09, #2
09324     03 00 00 FF 
09328     00 E4 85 F1 | 	sub	objptr, ##1536
0932c     F2 2E 02 F1 | 	add	local09, objptr
09330     04 2E 06 F1 | 	add	local09, #4
09334     17 2B 62 FC | 	wrlong	local07, local09
09338     03 00 00 FF 
0933c     00 E4 05 F1 | 	add	objptr, ##1536
09340     F2 2E 02 FB | 	rdlong	local09, objptr
09344     17 31 02 F6 | 	mov	local10, local09
09348     01 30 66 F0 | 	shl	local10, #1
0934c     17 31 02 F1 | 	add	local10, local09
09350     02 30 66 F0 | 	shl	local10, #2
09354     03 00 00 FF 
09358     00 E4 85 F1 | 	sub	objptr, ##1536
0935c     F2 30 02 F1 | 	add	local10, objptr
09360     08 30 06 F1 | 	add	local10, #8
09364     18 29 62 FC | 	wrlong	local06, local10
09368     03 00 00 FF 
0936c     00 E4 05 F1 | 	add	objptr, ##1536
09370     F2 2C 02 FB | 	rdlong	local08, objptr
09374     01 2C 06 F1 | 	add	local08, #1
09378     F2 2C 62 FC | 	wrlong	local08, objptr
0937c     69 00 00 FF 
09380     50 E4 85 F1 | 	sub	objptr, ##53840
09384                 | LR__0745
09384     A7 F0 03 F6 | 	mov	ptra, fp
09388     B2 00 A0 FD | 	call	#popregs_
0938c                 | _getfun_ret
0938c     2D 00 64 FD | 	ret
09390                 | 
09390                 | '   
09390                 | '   
09390                 | ' sub getvar(m as integer) 
09390                 | _getvar
09390     0A 4A 05 F6 | 	mov	COUNT_, #10
09394     A8 00 A0 FD | 	call	#pushregs_
09398                 | _getvar_enter
09398     09 25 02 F6 | 	mov	local04, arg01
0939c     56 00 00 FF 
093a0     18 E4 05 F1 | 	add	objptr, ##44056
093a4     F2 14 02 FB | 	rdlong	arg02, objptr
093a8     03 14 66 F0 | 	shl	arg02, #3
093ac     02 00 00 FF 
093b0     38 E4 85 F1 | 	sub	objptr, ##1080
093b4     F2 14 02 F1 | 	add	arg02, objptr
093b8     0A 27 02 FB | 	rdlong	local05, arg02
093bc     13 13 02 F6 | 	mov	arg01, local05
093c0     01 14 06 F6 | 	mov	arg02, #1
093c4     53 00 00 FF 
093c8     E0 E5 85 F1 | 	sub	objptr, ##42976
093cc     7C 19 B1 FD | 	call	#__system__Right_S
093d0     FD 28 02 F6 | 	mov	local06, result1
093d4     01 2A 66 F6 | 	neg	local07, #1
093d8                 | ' 
093d8                 | ' varname$=lparts(ct).part$
093d8                 | ' suffix$=right$(varname$,1)
093d8                 | ' j=-1
093d8                 | ' 
093d8                 | ' for i=0 to varnum-1
093d8     00 2C 06 F6 | 	mov	local08, #0
093dc     53 00 00 FF 
093e0     DC E5 05 F1 | 	add	objptr, ##42972
093e4     F2 2E 02 FB | 	rdlong	local09, objptr
093e8     53 00 00 FF 
093ec     DC E5 85 F1 | 	sub	objptr, ##42972
093f0                 | LR__0750
093f0     17 2D 52 F2 | 	cmps	local08, local09 wc
093f4     38 00 90 3D |  if_ae	jmp	#LR__0751
093f8                 | '   if variables(i).name=varname$ then j=i : exit
093f8     16 15 02 F6 | 	mov	arg02, local08
093fc     04 14 66 F0 | 	shl	arg02, #4
09400     33 00 00 FF 
09404     DC E5 05 F1 | 	add	objptr, ##26588
09408     F2 14 02 F1 | 	add	arg02, objptr
0940c     0A 13 02 FB | 	rdlong	arg01, arg02
09410     13 15 02 F6 | 	mov	arg02, local05
09414     33 00 00 FF 
09418     DC E5 85 F1 | 	sub	objptr, ##26588
0941c     BC F8 B0 FD | 	call	#__system___string_cmp
09420     00 FA 0D F2 | 	cmp	result1, #0 wz
09424     16 2B 02 A6 |  if_e	mov	local07, local08
09428     01 2C 06 51 |  if_ne	add	local08, #1
0942c     C0 FF 9F 5D |  if_ne	jmp	#LR__0750
09430                 | LR__0751
09430                 | ' if  j=-1 andalso varnum<maxvars then   
09430     FF FF 7F FF 
09434     FF 2B 0E F2 | 	cmp	local07, ##-1 wz
09438     A8 00 90 5D |  if_ne	jmp	#LR__0752
0943c     53 00 00 FF 
09440     DC E5 05 F1 | 	add	objptr, ##42972
09444     F2 2E 02 FB | 	rdlong	local09, objptr
09448     53 00 00 FF 
0944c     DC E5 85 F1 | 	sub	objptr, ##42972
09450     01 00 00 FF 
09454     FF 2F 56 F2 | 	cmps	local09, ##1023 wc
09458     88 00 90 3D |  if_ae	jmp	#LR__0752
0945c     53 00 00 FF 
09460     DC E5 05 F1 | 	add	objptr, ##42972
09464     F2 2E 02 FB | 	rdlong	local09, objptr
09468     04 2E 66 F0 | 	shl	local09, #4
0946c     20 00 00 FF 
09470     00 E4 85 F1 | 	sub	objptr, ##16384
09474     F2 2E 02 F1 | 	add	local09, objptr
09478     17 27 62 FC | 	wrlong	local05, local09
0947c     20 00 00 FF 
09480     00 E4 05 F1 | 	add	objptr, ##16384
09484     F2 2E 02 FB | 	rdlong	local09, objptr
09488     04 2E 66 F0 | 	shl	local09, #4
0948c     20 00 00 FF 
09490     00 E4 85 F1 | 	sub	objptr, ##16384
09494     F2 2E 02 F1 | 	add	local09, objptr
09498     04 2E 06 F1 | 	add	local09, #4
0949c     17 01 68 FC | 	wrlong	#0, local09
094a0     20 00 00 FF 
094a4     00 E4 05 F1 | 	add	objptr, ##16384
094a8     F2 2E 02 FB | 	rdlong	local09, objptr
094ac     04 2E 66 F0 | 	shl	local09, #4
094b0     20 00 00 FF 
094b4     00 E4 85 F1 | 	sub	objptr, ##16384
094b8     F2 2E 02 F1 | 	add	local09, objptr
094bc     0C 2E 06 F1 | 	add	local09, #12
094c0     17 39 68 FC | 	wrlong	#28, local09
094c4     20 00 00 FF 
094c8     00 E4 05 F1 | 	add	objptr, ##16384
094cc     F2 2E 02 FB | 	rdlong	local09, objptr
094d0     17 2B 02 F6 | 	mov	local07, local09
094d4     01 2E 06 F1 | 	add	local09, #1
094d8     F2 2E 62 FC | 	wrlong	local09, objptr
094dc     53 00 00 FF 
094e0     DC E5 85 F1 | 	sub	objptr, ##42972
094e4                 | LR__0752
094e4     00 2E 06 F6 | 	mov	local09, #0
094e8                 | ' numpar=0
094e8                 | ' ' check if it is an array
094e8                 | ' 
094e8                 | ' if lparts(ct+1).token=token_lpar then
094e8     56 00 00 FF 
094ec     18 E4 05 F1 | 	add	objptr, ##44056
094f0     F2 2C 02 FB | 	rdlong	local08, objptr
094f4     01 2C 06 F1 | 	add	local08, #1
094f8     03 2C 66 F0 | 	shl	local08, #3
094fc     02 00 00 FF 
09500     38 E4 85 F1 | 	sub	objptr, ##1080
09504     F2 2C 02 F1 | 	add	local08, objptr
09508     04 2C 06 F1 | 	add	local08, #4
0950c     16 2D 02 FB | 	rdlong	local08, local08
09510     15 2C 0E F2 | 	cmp	local08, #21 wz
09514     53 00 00 FF 
09518     E0 E5 85 F1 | 	sub	objptr, ##42976
0951c     08 01 90 5D |  if_ne	jmp	#LR__0757
09520     56 00 00 FF 
09524     18 E4 05 F1 | 	add	objptr, ##44056
09528     F2 30 02 FB | 	rdlong	local10, objptr
0952c     01 30 06 F1 | 	add	local10, #1
09530     F2 30 62 FC | 	wrlong	local10, objptr
09534     56 00 00 FF 
09538     18 E4 85 F1 | 	sub	objptr, ##44056
0953c                 | '   ct+=1 											' omit this lpar, this is for expr list
0953c                 | '   do
0953c                 | LR__0753
0953c     56 00 00 FF 
09540     18 E4 05 F1 | 	add	objptr, ##44056
09544     F2 2C 02 FB | 	rdlong	local08, objptr
09548     01 2C 06 F1 | 	add	local08, #1
0954c     F2 2C 62 FC | 	wrlong	local08, objptr
09550                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
09550                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
09550     03 2C 66 F0 | 	shl	local08, #3
09554     02 00 00 FF 
09558     38 E4 85 F1 | 	sub	objptr, ##1080
0955c     F2 2C 02 F1 | 	add	local08, objptr
09560     04 2C 06 F1 | 	add	local08, #4
09564     16 31 02 FB | 	rdlong	local10, local08
09568     15 30 0E F2 | 	cmp	local10, #21 wz
0956c     53 00 00 FF 
09570     E0 E5 85 F1 | 	sub	objptr, ##42976
09574     40 00 90 5D |  if_ne	jmp	#LR__0754
09578     56 00 00 FF 
0957c     18 E4 05 F1 | 	add	objptr, ##44056
09580     F2 30 02 FB | 	rdlong	local10, objptr
09584     01 30 06 F1 | 	add	local10, #1
09588     F2 30 62 FC | 	wrlong	local10, objptr
0958c     56 00 00 FF 
09590     18 E4 85 F1 | 	sub	objptr, ##44056
09594     74 EE BF FD | 	call	#_expr
09598     56 00 00 FF 
0959c     18 E4 05 F1 | 	add	objptr, ##44056
095a0     F2 30 02 FB | 	rdlong	local10, objptr
095a4     01 30 06 F1 | 	add	local10, #1
095a8     F2 30 62 FC | 	wrlong	local10, objptr
095ac     56 00 00 FF 
095b0     18 E4 85 F1 | 	sub	objptr, ##44056
095b4     04 00 90 FD | 	jmp	#LR__0755
095b8                 | LR__0754
095b8     50 EE BF FD | 	call	#_expr
095bc                 | LR__0755
095bc     01 2E 06 F1 | 	add	local09, #1
095c0     56 00 00 FF 
095c4     18 E4 05 F1 | 	add	objptr, ##44056
095c8     F2 2C 02 FB | 	rdlong	local08, objptr
095cc     03 2C 66 F0 | 	shl	local08, #3
095d0     02 00 00 FF 
095d4     38 E4 85 F1 | 	sub	objptr, ##1080
095d8     F2 2C 02 F1 | 	add	local08, objptr
095dc     04 2C 06 F1 | 	add	local08, #4
095e0     16 31 02 FB | 	rdlong	local10, local08
095e4     14 30 0E F2 | 	cmp	local10, #20 wz
095e8     53 00 00 FF 
095ec     E0 E5 85 F1 | 	sub	objptr, ##42976
095f0     34 00 90 AD |  if_e	jmp	#LR__0756
095f4     56 00 00 FF 
095f8     18 E4 05 F1 | 	add	objptr, ##44056
095fc     F2 30 02 FB | 	rdlong	local10, objptr
09600     03 30 66 F0 | 	shl	local10, #3
09604     02 00 00 FF 
09608     38 E4 85 F1 | 	sub	objptr, ##1080
0960c     F2 30 02 F1 | 	add	local10, objptr
09610     04 30 06 F1 | 	add	local10, #4
09614     18 31 02 FB | 	rdlong	local10, local10
09618     FE 31 0E F2 | 	cmp	local10, #510 wz
0961c     53 00 00 FF 
09620     E0 E5 85 F1 | 	sub	objptr, ##42976
09624     14 FF 9F 5D |  if_ne	jmp	#LR__0753
09628                 | LR__0756
09628                 | LR__0757
09628     17 21 02 F6 | 	mov	local02, local09
0962c     11 22 06 F6 | 	mov	local03, #17
09630     15 1F 02 F6 | 	mov	local01, local07
09634     0F 31 02 F6 | 	mov	local10, local01
09638     10 2F 02 F6 | 	mov	local09, local02
0963c     11 2D 02 F6 | 	mov	local08, local03
09640     69 00 00 FF 
09644     50 E4 05 F1 | 	add	objptr, ##53840
09648     F2 2A 02 FB | 	rdlong	local07, objptr
0964c     15 29 02 F6 | 	mov	local06, local07
09650     01 28 66 F0 | 	shl	local06, #1
09654     15 29 02 F1 | 	add	local06, local07
09658     02 28 66 F0 | 	shl	local06, #2
0965c     03 00 00 FF 
09660     00 E4 85 F1 | 	sub	objptr, ##1536
09664     F2 28 02 F1 | 	add	local06, objptr
09668     14 31 62 FC | 	wrlong	local10, local06
0966c     03 00 00 FF 
09670     00 E4 05 F1 | 	add	objptr, ##1536
09674     F2 30 02 FB | 	rdlong	local10, objptr
09678     18 27 02 F6 | 	mov	local05, local10
0967c     01 26 66 F0 | 	shl	local05, #1
09680     18 27 02 F1 | 	add	local05, local10
09684     02 26 66 F0 | 	shl	local05, #2
09688     03 00 00 FF 
0968c     00 E4 85 F1 | 	sub	objptr, ##1536
09690     F2 26 02 F1 | 	add	local05, objptr
09694     04 26 06 F1 | 	add	local05, #4
09698     13 2F 62 FC | 	wrlong	local09, local05
0969c     03 00 00 FF 
096a0     00 E4 05 F1 | 	add	objptr, ##1536
096a4     F2 30 02 FB | 	rdlong	local10, objptr
096a8     18 FB 01 F6 | 	mov	result1, local10
096ac     01 FA 65 F0 | 	shl	result1, #1
096b0     18 FB 01 F1 | 	add	result1, local10
096b4     02 FA 65 F0 | 	shl	result1, #2
096b8     03 00 00 FF 
096bc     00 E4 85 F1 | 	sub	objptr, ##1536
096c0     F2 FA 01 F1 | 	add	result1, objptr
096c4     08 FA 05 F1 | 	add	result1, #8
096c8     FD 2C 62 FC | 	wrlong	local08, result1
096cc     03 00 00 FF 
096d0     00 E4 05 F1 | 	add	objptr, ##1536
096d4     F2 30 02 FB | 	rdlong	local10, objptr
096d8     01 30 06 F1 | 	add	local10, #1
096dc     F2 30 62 FC | 	wrlong	local10, objptr
096e0     69 00 00 FF 
096e4     50 E4 85 F1 | 	sub	objptr, ##53840
096e8                 | ' 
096e8                 | ' t2.result.twowords(1)=numpar
096e8                 | ' 
096e8                 | ' 
096e8                 | ' 
096e8                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
096e8                 | ' 
096e8                 | ' 
096e8                 | '  
096e8                 | ' 
096e8                 | ' 701 
096e8                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
096e8                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
096e8     FF FF 7F FF 
096ec     FF 25 0E F2 | 	cmp	local04, ##-1 wz
096f0     B8 00 90 5D |  if_ne	jmp	#LR__0758
096f4     15 22 06 F6 | 	mov	local03, #21
096f8     0F 31 02 F6 | 	mov	local10, local01
096fc     10 2F 02 F6 | 	mov	local09, local02
09700     11 2D 02 F6 | 	mov	local08, local03
09704     69 00 00 FF 
09708     50 E4 05 F1 | 	add	objptr, ##53840
0970c     F2 2A 02 FB | 	rdlong	local07, objptr
09710     15 29 02 F6 | 	mov	local06, local07
09714     01 28 66 F0 | 	shl	local06, #1
09718     15 29 02 F1 | 	add	local06, local07
0971c     02 28 66 F0 | 	shl	local06, #2
09720     03 00 00 FF 
09724     00 E4 85 F1 | 	sub	objptr, ##1536
09728     F2 28 02 F1 | 	add	local06, objptr
0972c     14 31 62 FC | 	wrlong	local10, local06
09730     03 00 00 FF 
09734     00 E4 05 F1 | 	add	objptr, ##1536
09738     F2 1E 02 FB | 	rdlong	local01, objptr
0973c     0F 27 02 F6 | 	mov	local05, local01
09740     01 26 66 F0 | 	shl	local05, #1
09744     0F 27 02 F1 | 	add	local05, local01
09748     02 26 66 F0 | 	shl	local05, #2
0974c     03 00 00 FF 
09750     00 E4 85 F1 | 	sub	objptr, ##1536
09754     F2 26 02 F1 | 	add	local05, objptr
09758     04 26 06 F1 | 	add	local05, #4
0975c     13 2F 62 FC | 	wrlong	local09, local05
09760     03 00 00 FF 
09764     00 E4 05 F1 | 	add	objptr, ##1536
09768     F2 1E 02 FB | 	rdlong	local01, objptr
0976c     0F FB 01 F6 | 	mov	result1, local01
09770     01 FA 65 F0 | 	shl	result1, #1
09774     0F FB 01 F1 | 	add	result1, local01
09778     02 FA 65 F0 | 	shl	result1, #2
0977c     03 00 00 FF 
09780     00 E4 85 F1 | 	sub	objptr, ##1536
09784     F2 FA 01 F1 | 	add	result1, objptr
09788     08 FA 05 F1 | 	add	result1, #8
0978c     FD 2C 62 FC | 	wrlong	local08, result1
09790     03 00 00 FF 
09794     00 E4 05 F1 | 	add	objptr, ##1536
09798     F2 30 02 FB | 	rdlong	local10, objptr
0979c     01 30 06 F1 | 	add	local10, #1
097a0     F2 30 62 FC | 	wrlong	local10, objptr
097a4     69 00 00 FF 
097a8     50 E4 85 F1 | 	sub	objptr, ##53840
097ac                 | LR__0758
097ac     A7 F0 03 F6 | 	mov	ptra, fp
097b0     B2 00 A0 FD | 	call	#popregs_
097b4                 | _getvar_ret
097b4     2D 00 64 FD | 	ret
097b8                 | 
097b8                 | ' 
097b8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
097b8                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
097b8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
097b8                 | ' 
097b8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
097b8                 | ' '--------------------------------------------- Runtime functions ------------------------------------------------------------------------ 
097b8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
097b8                 | ' 
097b8                 | ' function execute_line (astart=0 as integer) as integer
097b8                 | _execute_line
097b8     04 4A 05 F6 | 	mov	COUNT_, #4
097bc     A8 00 A0 FD | 	call	#pushregs_
097c0     78 00 00 FF 
097c4     88 E5 05 F1 | 	add	objptr, ##61832
097c8     F2 00 68 FC | 	wrlong	#0, objptr
097cc                 | ' runptr2=0
097cc                 | ' for lineptr_e=astart to lineptr-1
097cc     0F 00 00 FF 
097d0     34 E5 85 F1 | 	sub	objptr, ##7988
097d4     F2 12 62 FC | 	wrlong	arg01, objptr
097d8     04 E4 85 F1 | 	sub	objptr, #4
097dc     F2 1E 02 FB | 	rdlong	local01, objptr
097e0     69 00 00 FF 
097e4     50 E4 85 F1 | 	sub	objptr, ##53840
097e8                 | LR__0760
097e8     69 00 00 FF 
097ec     54 E4 05 F1 | 	add	objptr, ##53844
097f0     F2 FA 01 FB | 	rdlong	result1, objptr
097f4     69 00 00 FF 
097f8     54 E4 85 F1 | 	sub	objptr, ##53844
097fc     0F FB 51 F2 | 	cmps	result1, local01 wc
09800     98 00 90 3D |  if_ae	jmp	#LR__0761
09804     69 00 00 FF 
09808     54 E4 05 F1 | 	add	objptr, ##53844
0980c     F2 FA 01 FB | 	rdlong	result1, objptr
09810     FD 20 02 F6 | 	mov	local02, result1
09814     01 20 66 F0 | 	shl	local02, #1
09818     FD 20 02 F1 | 	add	local02, result1
0981c     02 20 66 F0 | 	shl	local02, #2
09820     03 00 00 FF 
09824     04 E4 85 F1 | 	sub	objptr, ##1540
09828     F2 20 02 F1 | 	add	local02, objptr
0982c     08 20 06 F1 | 	add	local02, #8
09830     10 21 02 FB | 	rdlong	local02, local02
09834     10 21 E2 F8 | 	getbyte	local02, local02, #0
09838     02 20 66 F0 | 	shl	local02, #2
0983c     04 00 00 FF 
09840     1C E4 85 F1 | 	sub	objptr, ##2076
09844     F2 20 02 F1 | 	add	local02, objptr
09848     10 21 02 FB | 	rdlong	local02, local02
0984c     10 23 02 F6 | 	mov	local03, local02
09850     13 20 46 F7 | 	zerox	local02, #19
09854     14 22 46 F0 | 	shr	local03, #20
09858     02 22 66 F0 | 	shl	local03, #2
0985c     ED 22 02 F1 | 	add	local03, __methods__
09860     11 23 02 FB | 	rdlong	local03, local03
09864     62 00 00 FF 
09868     34 E4 85 F1 | 	sub	objptr, ##50228
0986c     F2 24 02 F6 | 	mov	local04, objptr
09870     10 E5 01 F6 | 	mov	objptr, local02
09874     2D 22 62 FD | 	call	local03
09878     12 E5 01 F6 | 	mov	objptr, local04
0987c     69 00 00 FF 
09880     54 E4 05 F1 | 	add	objptr, ##53844
09884     F2 24 02 FB | 	rdlong	local04, objptr
09888     01 24 06 F1 | 	add	local04, #1
0988c     F2 24 62 FC | 	wrlong	local04, objptr
09890     69 00 00 FF 
09894     54 E4 85 F1 | 	sub	objptr, ##53844
09898     4C FF 9F FD | 	jmp	#LR__0760
0989c                 | LR__0761
0989c                 | ' return runptr2
0989c     78 00 00 FF 
098a0     88 E5 05 F1 | 	add	objptr, ##61832
098a4     F2 FA 01 FB | 	rdlong	result1, objptr
098a8     78 00 00 FF 
098ac     88 E5 85 F1 | 	sub	objptr, ##61832
098b0     A7 F0 03 F6 | 	mov	ptra, fp
098b4     B2 00 A0 FD | 	call	#popregs_
098b8                 | _execute_line_ret
098b8     2D 00 64 FD | 	ret
098bc                 | 
098bc                 | ' 
098bc                 | ' 
098bc                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
098bc                 | ' 
098bc                 | ' function pop() as expr_result
098bc                 | _pop
098bc                 | ' 
098bc                 | ' if stackpointer=0 then
098bc     62 00 00 FF 
098c0     2C E4 05 F1 | 	add	objptr, ##50220
098c4     F2 FA 09 FB | 	rdlong	result1, objptr wz
098c8     62 00 00 FF 
098cc     2C E4 85 F1 | 	sub	objptr, ##50220
098d0     FF 04 06 A6 |  if_e	mov	_var03, #255
098d4     18 00 06 A6 |  if_e	mov	_var01, #24
098d8     68 00 90 AD |  if_e	jmp	#LR__0770
098dc     62 00 00 FF 
098e0     2C E4 05 F1 | 	add	objptr, ##50220
098e4     F2 FA 01 FB | 	rdlong	result1, objptr
098e8     01 FA 85 F1 | 	sub	result1, #1
098ec     F2 FA 61 FC | 	wrlong	result1, objptr
098f0     FD FE 01 F6 | 	mov	result3, result1
098f4     01 FE 65 F0 | 	shl	result3, #1
098f8     FD FE 01 F1 | 	add	result3, result1
098fc     02 FE 65 F0 | 	shl	result3, #2
09900     0C 00 00 FF 
09904     0C E4 85 F1 | 	sub	objptr, ##6156
09908     F2 FE 01 F1 | 	add	result3, objptr
0990c     FF 00 02 FB | 	rdlong	_var01, result3
09910     04 FE 05 F1 | 	add	result3, #4
09914     FF FE 01 FB | 	rdlong	result3, result3
09918     FD FC 01 F6 | 	mov	result2, result1
0991c     01 FC 65 F0 | 	shl	result2, #1
09920     FD FC 01 F1 | 	add	result2, result1
09924     02 FC 65 F0 | 	shl	result2, #2
09928     F2 FC 01 F1 | 	add	result2, objptr
0992c     08 FC 05 F1 | 	add	result2, #8
09930     FE FA 01 FB | 	rdlong	result1, result2
09934     FF 02 02 F6 | 	mov	_var02, result3
09938     FD 04 02 F6 | 	mov	_var03, result1
0993c     56 00 00 FF 
09940     20 E4 85 F1 | 	sub	objptr, ##44064
09944                 | LR__0770
09944                 | ' return t1
09944     01 FD 01 F6 | 	mov	result2, _var02
09948     02 FF 01 F6 | 	mov	result3, _var03
0994c     00 FB 01 F6 | 	mov	result1, _var01
09950                 | _pop_ret
09950     2D 00 64 FD | 	ret
09954                 | 
09954                 | ' 
09954                 | ' sub push(t1 as expr_result )
09954                 | _push
09954                 | ' 
09954                 | ' 'print "In push: "; t1.result_type
09954                 | ' 'print "In push: "; t1.result.uresult
09954                 | ' 
09954                 | ' if stackpointer<maxstack then 
09954     62 00 00 FF 
09958     2C E4 05 F1 | 	add	objptr, ##50220
0995c     F2 00 02 FB | 	rdlong	_var01, objptr
09960     62 00 00 FF 
09964     2C E4 85 F1 | 	sub	objptr, ##50220
09968     01 00 00 FF 
0996c     00 00 56 F2 | 	cmps	_var01, ##512 wc
09970     BC 00 90 3D |  if_ae	jmp	#LR__0780
09974     09 01 02 FB | 	rdlong	_var01, arg01
09978     04 12 06 F1 | 	add	arg01, #4
0997c     09 03 02 FB | 	rdlong	_var02, arg01
09980     04 12 06 F1 | 	add	arg01, #4
09984     09 13 02 FB | 	rdlong	arg01, arg01
09988     62 00 00 FF 
0998c     2C E4 05 F1 | 	add	objptr, ##50220
09990     F2 04 02 FB | 	rdlong	_var03, objptr
09994     02 07 02 F6 | 	mov	_var04, _var03
09998     01 06 66 F0 | 	shl	_var04, #1
0999c     02 07 02 F1 | 	add	_var04, _var03
099a0     02 06 66 F0 | 	shl	_var04, #2
099a4     0C 00 00 FF 
099a8     0C E4 85 F1 | 	sub	objptr, ##6156
099ac     F2 06 02 F1 | 	add	_var04, objptr
099b0     03 01 62 FC | 	wrlong	_var01, _var04
099b4     0C 00 00 FF 
099b8     0C E4 05 F1 | 	add	objptr, ##6156
099bc     F2 06 02 FB | 	rdlong	_var04, objptr
099c0     03 05 02 F6 | 	mov	_var03, _var04
099c4     01 04 66 F0 | 	shl	_var03, #1
099c8     03 05 02 F1 | 	add	_var03, _var04
099cc     02 04 66 F0 | 	shl	_var03, #2
099d0     0C 00 00 FF 
099d4     0C E4 85 F1 | 	sub	objptr, ##6156
099d8     F2 04 02 F1 | 	add	_var03, objptr
099dc     04 04 06 F1 | 	add	_var03, #4
099e0     02 03 62 FC | 	wrlong	_var02, _var03
099e4     0C 00 00 FF 
099e8     0C E4 05 F1 | 	add	objptr, ##6156
099ec     F2 06 02 FB | 	rdlong	_var04, objptr
099f0     03 05 02 F6 | 	mov	_var03, _var04
099f4     01 04 66 F0 | 	shl	_var03, #1
099f8     03 05 02 F1 | 	add	_var03, _var04
099fc     02 04 66 F0 | 	shl	_var03, #2
09a00     0C 00 00 FF 
09a04     0C E4 85 F1 | 	sub	objptr, ##6156
09a08     F2 04 02 F1 | 	add	_var03, objptr
09a0c     08 04 06 F1 | 	add	_var03, #8
09a10     02 13 62 FC | 	wrlong	arg01, _var03
09a14     0C 00 00 FF 
09a18     0C E4 05 F1 | 	add	objptr, ##6156
09a1c     F2 00 02 FB | 	rdlong	_var01, objptr
09a20     01 00 06 F1 | 	add	_var01, #1
09a24     F2 00 62 FC | 	wrlong	_var01, objptr
09a28     62 00 00 FF 
09a2c     2C E4 85 F1 | 	sub	objptr, ##50220
09a30                 | LR__0780
09a30                 | _push_ret
09a30     2D 00 64 FD | 	ret
09a34                 | 
09a34                 | ' 
09a34                 | ' ' ------------------ push a variable on the stack as an independent operation called by execute_line 
09a34                 | ' 
09a34                 | ' sub do_push
09a34                 | _do_push
09a34                 | ' if stackpointer<maxstack then 
09a34     62 00 00 FF 
09a38     2C E4 05 F1 | 	add	objptr, ##50220
09a3c     F2 00 02 FB | 	rdlong	_var01, objptr
09a40     62 00 00 FF 
09a44     2C E4 85 F1 | 	sub	objptr, ##50220
09a48     01 00 00 FF 
09a4c     00 00 56 F2 | 	cmps	_var01, ##512 wc
09a50     F8 00 90 3D |  if_ae	jmp	#LR__0790
09a54     69 00 00 FF 
09a58     54 E4 05 F1 | 	add	objptr, ##53844
09a5c     F2 02 02 FB | 	rdlong	_var02, objptr
09a60     01 05 02 F6 | 	mov	_var03, _var02
09a64     01 04 66 F0 | 	shl	_var03, #1
09a68     01 05 02 F1 | 	add	_var03, _var02
09a6c     02 04 66 F0 | 	shl	_var03, #2
09a70     03 00 00 FF 
09a74     04 E4 85 F1 | 	sub	objptr, ##1540
09a78     F2 04 02 F1 | 	add	_var03, objptr
09a7c     02 01 02 FB | 	rdlong	_var01, _var03
09a80     04 04 06 F1 | 	add	_var03, #4
09a84     02 07 02 FB | 	rdlong	_var04, _var03
09a88     01 05 02 F6 | 	mov	_var03, _var02
09a8c     01 04 66 F0 | 	shl	_var03, #1
09a90     01 05 02 F1 | 	add	_var03, _var02
09a94     02 04 66 F0 | 	shl	_var03, #2
09a98     F2 04 02 F1 | 	add	_var03, objptr
09a9c     08 04 06 F1 | 	add	_var03, #8
09aa0     02 03 02 FB | 	rdlong	_var02, _var03
09aa4     04 00 00 FF 
09aa8     24 E4 85 F1 | 	sub	objptr, ##2084
09aac     F2 04 02 FB | 	rdlong	_var03, objptr
09ab0     02 09 02 F6 | 	mov	_var05, _var03
09ab4     01 08 66 F0 | 	shl	_var05, #1
09ab8     02 09 02 F1 | 	add	_var05, _var03
09abc     02 08 66 F0 | 	shl	_var05, #2
09ac0     0C 00 00 FF 
09ac4     0C E4 85 F1 | 	sub	objptr, ##6156
09ac8     F2 08 02 F1 | 	add	_var05, objptr
09acc     04 01 62 FC | 	wrlong	_var01, _var05
09ad0     0C 00 00 FF 
09ad4     0C E4 05 F1 | 	add	objptr, ##6156
09ad8     F2 08 02 FB | 	rdlong	_var05, objptr
09adc     04 05 02 F6 | 	mov	_var03, _var05
09ae0     01 04 66 F0 | 	shl	_var03, #1
09ae4     04 05 02 F1 | 	add	_var03, _var05
09ae8     02 04 66 F0 | 	shl	_var03, #2
09aec     0C 00 00 FF 
09af0     0C E4 85 F1 | 	sub	objptr, ##6156
09af4     F2 04 02 F1 | 	add	_var03, objptr
09af8     04 04 06 F1 | 	add	_var03, #4
09afc     02 07 62 FC | 	wrlong	_var04, _var03
09b00     0C 00 00 FF 
09b04     0C E4 05 F1 | 	add	objptr, ##6156
09b08     F2 08 02 FB | 	rdlong	_var05, objptr
09b0c     04 07 02 F6 | 	mov	_var04, _var05
09b10     01 06 66 F0 | 	shl	_var04, #1
09b14     04 07 02 F1 | 	add	_var04, _var05
09b18     02 06 66 F0 | 	shl	_var04, #2
09b1c     0C 00 00 FF 
09b20     0C E4 85 F1 | 	sub	objptr, ##6156
09b24     F2 06 02 F1 | 	add	_var04, objptr
09b28     08 06 06 F1 | 	add	_var04, #8
09b2c     03 03 62 FC | 	wrlong	_var02, _var04
09b30     0C 00 00 FF 
09b34     0C E4 05 F1 | 	add	objptr, ##6156
09b38     F2 00 02 FB | 	rdlong	_var01, objptr
09b3c     01 00 06 F1 | 	add	_var01, #1
09b40     F2 00 62 FC | 	wrlong	_var01, objptr
09b44     62 00 00 FF 
09b48     2C E4 85 F1 | 	sub	objptr, ##50220
09b4c                 | LR__0790
09b4c                 | _do_push_ret
09b4c     2D 00 64 FD | 	ret
09b50                 | 
09b50                 | ' 
09b50                 | '   
09b50                 | ' sub csave_block(address as ulong)
09b50                 | _csave_block
09b50     09 01 02 F6 | 	mov	_var01, arg01
09b54                 | ' 
09b54                 | ' ' let it be 1k blocks=256 longs=8 kbits=32 k samples
09b54                 | ' ' we enter it at the state of playing 1 kHz header tone
09b54                 | ' 
09b54                 | ' for i=0 to 63 step 2
09b54     00 02 06 F6 | 	mov	_var02, #0
09b58                 | LR__0800
09b58                 | '   do: loop until lpeek(base+32*7)>32768
09b58     55 00 00 FF 
09b5c     E4 E5 05 F1 | 	add	objptr, ##44004
09b60     97 0C 48 FB | 	callpa	#(@LR__0802-@LR__0801)>>2,fcache_load_ptr_
09b64                 | LR__0801
09b64     F2 12 02 FB | 	rdlong	arg01, objptr
09b68     E0 12 06 F1 | 	add	arg01, #224
09b6c     09 FB 01 FB | 	rdlong	result1, arg01
09b70     40 00 00 FF 
09b74     01 FA 55 F2 | 	cmps	result1, ##32769 wc
09b78     E8 FF 9F CD |  if_b	jmp	#LR__0801
09b7c                 | LR__0802
09b7c     00 13 02 F6 | 	mov	arg01, _var01
09b80     01 05 02 F6 | 	mov	_var03, _var02
09b84     02 04 66 F0 | 	shl	_var03, #2
09b88     02 13 02 F1 | 	add	arg01, _var03
09b8c     09 07 02 FB | 	rdlong	_var04, arg01
09b90     24 00 00 FF 
09b94     C0 E4 05 F1 | 	add	objptr, ##18624
09b98     F2 06 62 FC | 	wrlong	_var04, objptr
09b9c     7A 00 00 FF 
09ba0     A4 E4 85 F1 | 	sub	objptr, ##62628
09ba4                 | '   q=lpeek(address+4*i)
09ba4                 | '      for bit=0 to 31
09ba4     00 08 06 F6 | 	mov	_var05, #0
09ba8     97 84 48 FB | 	callpa	#(@LR__0807-@LR__0803)>>2,fcache_load_ptr_
09bac                 | LR__0803
09bac                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
09bac     7A 00 00 FF 
09bb0     A4 E4 05 F1 | 	add	objptr, ##62628
09bb4     F2 06 02 FB | 	rdlong	_var04, objptr
09bb8     7A 00 00 FF 
09bbc     A4 E4 85 F1 | 	sub	objptr, ##62628
09bc0     04 05 C2 F9 | 	decod	_var03, _var05
09bc4     02 07 CA F7 | 	test	_var04, _var03 wz
09bc8     60 00 90 AD |  if_e	jmp	#LR__0804
09bcc     04 05 02 F6 | 	mov	_var03, _var05
09bd0     02 04 66 F0 | 	shl	_var03, #2
09bd4     76 00 00 FF 
09bd8     80 E4 05 F1 | 	add	objptr, ##60544
09bdc     F2 04 02 F1 | 	add	_var03, objptr
09be0     02 FF 48 FC | 	wrbyte	#127, _var03
09be4     04 05 02 F6 | 	mov	_var03, _var05
09be8     02 04 66 F0 | 	shl	_var03, #2
09bec     01 04 06 F1 | 	add	_var03, #1
09bf0     F2 04 02 F1 | 	add	_var03, objptr
09bf4     02 01 49 FC | 	wrbyte	#128, _var03
09bf8     04 05 02 F6 | 	mov	_var03, _var05
09bfc     02 04 66 F0 | 	shl	_var03, #2
09c00     02 04 06 F1 | 	add	_var03, #2
09c04     F2 04 02 F1 | 	add	_var03, objptr
09c08     02 FF 48 FC | 	wrbyte	#127, _var03
09c0c     04 05 02 F6 | 	mov	_var03, _var05
09c10     02 04 66 F0 | 	shl	_var03, #2
09c14     03 04 06 F1 | 	add	_var03, #3
09c18     F2 04 02 F1 | 	add	_var03, objptr
09c1c     02 01 49 FC | 	wrbyte	#128, _var03
09c20     76 00 00 FF 
09c24     80 E4 85 F1 | 	sub	objptr, ##60544
09c28     5C 00 90 FD | 	jmp	#LR__0805
09c2c                 | LR__0804
09c2c     04 05 02 F6 | 	mov	_var03, _var05
09c30     02 04 66 F0 | 	shl	_var03, #2
09c34     76 00 00 FF 
09c38     80 E4 05 F1 | 	add	objptr, ##60544
09c3c     F2 04 02 F1 | 	add	_var03, objptr
09c40     02 01 49 FC | 	wrbyte	#128, _var03
09c44     04 05 02 F6 | 	mov	_var03, _var05
09c48     02 04 66 F0 | 	shl	_var03, #2
09c4c     01 04 06 F1 | 	add	_var03, #1
09c50     F2 04 02 F1 | 	add	_var03, objptr
09c54     02 01 49 FC | 	wrbyte	#128, _var03
09c58     04 05 02 F6 | 	mov	_var03, _var05
09c5c     02 04 66 F0 | 	shl	_var03, #2
09c60     02 04 06 F1 | 	add	_var03, #2
09c64     F2 04 02 F1 | 	add	_var03, objptr
09c68     02 FF 48 FC | 	wrbyte	#127, _var03
09c6c     04 05 02 F6 | 	mov	_var03, _var05
09c70     02 04 66 F0 | 	shl	_var03, #2
09c74     03 04 06 F1 | 	add	_var03, #3
09c78     F2 04 02 F1 | 	add	_var03, objptr
09c7c     02 FF 48 FC | 	wrbyte	#127, _var03
09c80     76 00 00 FF 
09c84     80 E4 85 F1 | 	sub	objptr, ##60544
09c88                 | LR__0805
09c88     01 08 06 F1 | 	add	_var05, #1
09c8c     20 08 56 F2 | 	cmps	_var05, #32 wc
09c90     18 FF 9F CD |  if_b	jmp	#LR__0803
09c94                 | '   do: loop until lpeek(base+32*7)<32768
09c94     55 00 00 FF 
09c98     E4 E5 05 F1 | 	add	objptr, ##44004
09c9c                 | LR__0806
09c9c     F2 12 02 FB | 	rdlong	arg01, objptr
09ca0     E0 12 06 F1 | 	add	arg01, #224
09ca4     09 FB 01 FB | 	rdlong	result1, arg01
09ca8     40 00 00 FF 
09cac     00 FA 55 F2 | 	cmps	result1, ##32768 wc
09cb0     E8 FF 9F 3D |  if_ae	jmp	#LR__0806
09cb4                 | LR__0807
09cb4     00 13 02 F6 | 	mov	arg01, _var01
09cb8     04 12 06 F1 | 	add	arg01, #4
09cbc     01 05 02 F6 | 	mov	_var03, _var02
09cc0     02 04 66 F0 | 	shl	_var03, #2
09cc4     02 13 02 F1 | 	add	arg01, _var03
09cc8     09 07 02 FB | 	rdlong	_var04, arg01
09ccc     24 00 00 FF 
09cd0     C0 E4 05 F1 | 	add	objptr, ##18624
09cd4     F2 06 62 FC | 	wrlong	_var04, objptr
09cd8     7A 00 00 FF 
09cdc     A4 E4 85 F1 | 	sub	objptr, ##62628
09ce0                 | '   q=lpeek(address+4+4*i)
09ce0                 | '      for bit=0 to 31
09ce0     00 08 06 F6 | 	mov	_var05, #0
09ce4     97 94 48 FB | 	callpa	#(@LR__0811-@LR__0808)>>2,fcache_load_ptr_
09ce8                 | LR__0808
09ce8                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
09ce8     7A 00 00 FF 
09cec     A4 E4 05 F1 | 	add	objptr, ##62628
09cf0     F2 06 02 FB | 	rdlong	_var04, objptr
09cf4     7A 00 00 FF 
09cf8     A4 E4 85 F1 | 	sub	objptr, ##62628
09cfc     04 05 C2 F9 | 	decod	_var03, _var05
09d00     02 07 CA F7 | 	test	_var04, _var03 wz
09d04     80 00 90 AD |  if_e	jmp	#LR__0809
09d08     04 0B 02 F6 | 	mov	_var06, _var05
09d0c     02 0A 66 F0 | 	shl	_var06, #2
09d10     80 04 06 F6 | 	mov	_var03, #128
09d14     05 05 02 F1 | 	add	_var03, _var06
09d18     76 00 00 FF 
09d1c     80 E4 05 F1 | 	add	objptr, ##60544
09d20     F2 04 02 F1 | 	add	_var03, objptr
09d24     02 FF 48 FC | 	wrbyte	#127, _var03
09d28     04 0B 02 F6 | 	mov	_var06, _var05
09d2c     02 0A 66 F0 | 	shl	_var06, #2
09d30     80 04 06 F6 | 	mov	_var03, #128
09d34     05 05 02 F1 | 	add	_var03, _var06
09d38     01 04 06 F1 | 	add	_var03, #1
09d3c     F2 04 02 F1 | 	add	_var03, objptr
09d40     02 01 49 FC | 	wrbyte	#128, _var03
09d44     04 0B 02 F6 | 	mov	_var06, _var05
09d48     02 0A 66 F0 | 	shl	_var06, #2
09d4c     80 04 06 F6 | 	mov	_var03, #128
09d50     05 05 02 F1 | 	add	_var03, _var06
09d54     02 04 06 F1 | 	add	_var03, #2
09d58     F2 04 02 F1 | 	add	_var03, objptr
09d5c     02 FF 48 FC | 	wrbyte	#127, _var03
09d60     04 0B 02 F6 | 	mov	_var06, _var05
09d64     02 0A 66 F0 | 	shl	_var06, #2
09d68     80 04 06 F6 | 	mov	_var03, #128
09d6c     05 05 02 F1 | 	add	_var03, _var06
09d70     03 04 06 F1 | 	add	_var03, #3
09d74     F2 04 02 F1 | 	add	_var03, objptr
09d78     02 01 49 FC | 	wrbyte	#128, _var03
09d7c     76 00 00 FF 
09d80     80 E4 85 F1 | 	sub	objptr, ##60544
09d84     7C 00 90 FD | 	jmp	#LR__0810
09d88                 | LR__0809
09d88     04 0B 02 F6 | 	mov	_var06, _var05
09d8c     02 0A 66 F0 | 	shl	_var06, #2
09d90     80 04 06 F6 | 	mov	_var03, #128
09d94     05 05 02 F1 | 	add	_var03, _var06
09d98     76 00 00 FF 
09d9c     80 E4 05 F1 | 	add	objptr, ##60544
09da0     F2 04 02 F1 | 	add	_var03, objptr
09da4     02 01 49 FC | 	wrbyte	#128, _var03
09da8     04 0B 02 F6 | 	mov	_var06, _var05
09dac     02 0A 66 F0 | 	shl	_var06, #2
09db0     80 04 06 F6 | 	mov	_var03, #128
09db4     05 05 02 F1 | 	add	_var03, _var06
09db8     01 04 06 F1 | 	add	_var03, #1
09dbc     F2 04 02 F1 | 	add	_var03, objptr
09dc0     02 01 49 FC | 	wrbyte	#128, _var03
09dc4     04 0B 02 F6 | 	mov	_var06, _var05
09dc8     02 0A 66 F0 | 	shl	_var06, #2
09dcc     80 04 06 F6 | 	mov	_var03, #128
09dd0     05 05 02 F1 | 	add	_var03, _var06
09dd4     02 04 06 F1 | 	add	_var03, #2
09dd8     F2 04 02 F1 | 	add	_var03, objptr
09ddc     02 FF 48 FC | 	wrbyte	#127, _var03
09de0     04 0B 02 F6 | 	mov	_var06, _var05
09de4     02 0A 66 F0 | 	shl	_var06, #2
09de8     80 04 06 F6 | 	mov	_var03, #128
09dec     05 05 02 F1 | 	add	_var03, _var06
09df0     03 04 06 F1 | 	add	_var03, #3
09df4     F2 04 02 F1 | 	add	_var03, objptr
09df8     02 FF 48 FC | 	wrbyte	#127, _var03
09dfc     76 00 00 FF 
09e00     80 E4 85 F1 | 	sub	objptr, ##60544
09e04                 | LR__0810
09e04     01 08 06 F1 | 	add	_var05, #1
09e08     20 08 56 F2 | 	cmps	_var05, #32 wc
09e0c     D8 FE 9F CD |  if_b	jmp	#LR__0808
09e10                 | LR__0811
09e10     02 02 06 F1 | 	add	_var02, #2
09e14     40 02 56 F2 | 	cmps	_var02, #64 wc
09e18     3C FD 9F CD |  if_b	jmp	#LR__0800
09e1c                 | ' do: loop until lpeek(base+32*7)>32768
09e1c     55 00 00 FF 
09e20     E4 E5 05 F1 | 	add	objptr, ##44004
09e24     97 84 48 FB | 	callpa	#(@LR__0820-@LR__0812)>>2,fcache_load_ptr_
09e28                 | LR__0812
09e28     F2 12 02 FB | 	rdlong	arg01, objptr
09e2c     E0 12 06 F1 | 	add	arg01, #224
09e30     09 FB 01 FB | 	rdlong	result1, arg01
09e34     40 00 00 FF 
09e38     01 FA 55 F2 | 	cmps	result1, ##32769 wc
09e3c     E8 FF 9F CD |  if_b	jmp	#LR__0812
09e40     55 00 00 FF 
09e44     E4 E5 85 F1 | 	sub	objptr, ##44004
09e48                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
09e48     00 02 06 F6 | 	mov	_var02, #0
09e4c                 | LR__0813
09e4c     01 07 52 F6 | 	abs	_var04, _var02 wc
09e50     07 06 06 F5 | 	and	_var04, #7
09e54     03 07 82 F6 | 	negc	_var04, _var04
09e58     04 06 56 F2 | 	cmps	_var04, #4 wc
09e5c     20 00 90 3D |  if_ae	jmp	#LR__0814
09e60     01 0B 02 F6 | 	mov	_var06, _var02
09e64     76 00 00 FF 
09e68     80 E4 05 F1 | 	add	objptr, ##60544
09e6c     F2 0A 02 F1 | 	add	_var06, objptr
09e70     05 FF 48 FC | 	wrbyte	#127, _var06
09e74     76 00 00 FF 
09e78     80 E4 85 F1 | 	sub	objptr, ##60544
09e7c     1C 00 90 FD | 	jmp	#LR__0815
09e80                 | LR__0814
09e80     01 0B 02 F6 | 	mov	_var06, _var02
09e84     76 00 00 FF 
09e88     80 E4 05 F1 | 	add	objptr, ##60544
09e8c     F2 0A 02 F1 | 	add	_var06, objptr
09e90     05 01 49 FC | 	wrbyte	#128, _var06
09e94     76 00 00 FF 
09e98     80 E4 85 F1 | 	sub	objptr, ##60544
09e9c                 | LR__0815
09e9c     01 02 06 F1 | 	add	_var02, #1
09ea0     80 02 56 F2 | 	cmps	_var02, #128 wc
09ea4     A4 FF 9F CD |  if_b	jmp	#LR__0813
09ea8                 | ' 
09ea8                 | ' do: loop until lpeek(base+32*7)<32768
09ea8     55 00 00 FF 
09eac     E4 E5 05 F1 | 	add	objptr, ##44004
09eb0                 | LR__0816
09eb0     F2 12 02 FB | 	rdlong	arg01, objptr
09eb4     E0 12 06 F1 | 	add	arg01, #224
09eb8     09 FB 01 FB | 	rdlong	result1, arg01
09ebc     40 00 00 FF 
09ec0     00 FA 55 F2 | 	cmps	result1, ##32768 wc
09ec4     E8 FF 9F 3D |  if_ae	jmp	#LR__0816
09ec8     55 00 00 FF 
09ecc     E4 E5 85 F1 | 	sub	objptr, ##44004
09ed0                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
09ed0     80 02 06 F6 | 	mov	_var02, #128
09ed4                 | LR__0817
09ed4     01 07 52 F6 | 	abs	_var04, _var02 wc
09ed8     07 06 06 F5 | 	and	_var04, #7
09edc     03 07 82 F6 | 	negc	_var04, _var04
09ee0     04 06 56 F2 | 	cmps	_var04, #4 wc
09ee4     20 00 90 3D |  if_ae	jmp	#LR__0818
09ee8     01 0B 02 F6 | 	mov	_var06, _var02
09eec     76 00 00 FF 
09ef0     80 E4 05 F1 | 	add	objptr, ##60544
09ef4     F2 0A 02 F1 | 	add	_var06, objptr
09ef8     05 FF 48 FC | 	wrbyte	#127, _var06
09efc     76 00 00 FF 
09f00     80 E4 85 F1 | 	sub	objptr, ##60544
09f04     1C 00 90 FD | 	jmp	#LR__0819
09f08                 | LR__0818
09f08     01 0B 02 F6 | 	mov	_var06, _var02
09f0c     76 00 00 FF 
09f10     80 E4 05 F1 | 	add	objptr, ##60544
09f14     F2 0A 02 F1 | 	add	_var06, objptr
09f18     05 01 49 FC | 	wrbyte	#128, _var06
09f1c     76 00 00 FF 
09f20     80 E4 85 F1 | 	sub	objptr, ##60544
09f24                 | LR__0819
09f24     01 02 06 F1 | 	add	_var02, #1
09f28     00 03 16 F2 | 	cmp	_var02, #256 wc
09f2c     A4 FF 9F CD |  if_b	jmp	#LR__0817
09f30                 | LR__0820
09f30                 | _csave_block_ret
09f30     2D 00 64 FD | 	ret
09f34                 | 
09f34                 | ' 
09f34                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
09f34                 | _csave_addtoblock
09f34     04 4A 05 F6 | 	mov	COUNT_, #4
09f38     A8 00 A0 FD | 	call	#pushregs_
09f3c     09 1F 02 F6 | 	mov	local01, arg01
09f40                 | ' 
09f40                 | ' 
09f40                 | ' if force=0 then
09f40     07 14 4E F7 | 	zerox	arg02, #7 wz
09f44     78 00 90 5D |  if_ne	jmp	#LR__0830
09f48     78 00 00 FF 
09f4c     80 E5 05 F1 | 	add	objptr, ##61824
09f50     F2 14 02 FB | 	rdlong	arg02, objptr
09f54     02 00 00 FF 
09f58     00 E4 85 F1 | 	sub	objptr, ##1024
09f5c     F2 14 02 F1 | 	add	arg02, objptr
09f60     0A 1F 42 FC | 	wrbyte	local01, arg02
09f64     02 00 00 FF 
09f68     00 E4 05 F1 | 	add	objptr, ##1024
09f6c     F2 1E 02 FB | 	rdlong	local01, objptr
09f70     01 1E 06 F1 | 	add	local01, #1
09f74     F2 1E 62 FC | 	wrlong	local01, objptr
09f78                 | '   block(blockptr)=d
09f78                 | '   blockptr+=1
09f78                 | '   if blockptr>=255 then
09f78     78 00 00 FF 
09f7c     80 E5 85 F1 | 	sub	objptr, ##61824
09f80     FF 1E 16 F2 | 	cmp	local01, #255 wc
09f84     E4 00 90 CD |  if_b	jmp	#LR__0834
09f88     76 00 00 FF 
09f8c     80 E5 05 F1 | 	add	objptr, ##60800
09f90     F2 12 02 F6 | 	mov	arg01, objptr
09f94     76 00 00 FF 
09f98     80 E5 85 F1 | 	sub	objptr, ##60800
09f9c     B0 FB BF FD | 	call	#_csave_block
09fa0     78 00 00 FF 
09fa4     80 E5 05 F1 | 	add	objptr, ##61824
09fa8     F2 00 68 FC | 	wrlong	#0, objptr
09fac     78 00 00 FF 
09fb0     80 E5 85 F1 | 	sub	objptr, ##61824
09fb4     2C 13 06 F6 | 	mov	arg01, #300
09fb8     EC EF B0 FD | 	call	#__system___waitms
09fbc     AC 00 90 FD | 	jmp	#LR__0834
09fc0                 | LR__0830
09fc0     78 00 00 FF 
09fc4     80 E5 05 F1 | 	add	objptr, ##61824
09fc8     F2 20 02 FB | 	rdlong	local02, objptr
09fcc     02 00 00 FF 
09fd0     00 E4 85 F1 | 	sub	objptr, ##1024
09fd4     F2 20 02 F1 | 	add	local02, objptr
09fd8     10 1F 42 FC | 	wrbyte	local01, local02
09fdc                 | '   block(blockptr)=d
09fdc                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
09fdc     02 00 00 FF 
09fe0     00 E4 05 F1 | 	add	objptr, ##1024
09fe4     F2 22 02 FB | 	rdlong	local03, objptr
09fe8     78 00 00 FF 
09fec     80 E5 85 F1 | 	sub	objptr, ##61824
09ff0     FF 22 16 F2 | 	cmp	local03, #255 wc
09ff4     40 00 90 3D |  if_ae	jmp	#LR__0833
09ff8     78 00 00 FF 
09ffc     80 E5 05 F1 | 	add	objptr, ##61824
0a000     F2 24 02 FB | 	rdlong	local04, objptr
0a004     78 00 00 FF 
0a008     80 E5 85 F1 | 	sub	objptr, ##61824
0a00c                 | LR__0831
0a00c     00 25 56 F2 | 	cmps	local04, #256 wc
0a010     24 00 90 3D |  if_ae	jmp	#LR__0832
0a014     12 21 02 F6 | 	mov	local02, local04
0a018     76 00 00 FF 
0a01c     80 E5 05 F1 | 	add	objptr, ##60800
0a020     F2 20 02 F1 | 	add	local02, objptr
0a024     10 01 48 FC | 	wrbyte	#0, local02
0a028     01 24 06 F1 | 	add	local04, #1
0a02c     76 00 00 FF 
0a030     80 E5 85 F1 | 	sub	objptr, ##60800
0a034     D4 FF 9F FD | 	jmp	#LR__0831
0a038                 | LR__0832
0a038                 | LR__0833
0a038     76 00 00 FF 
0a03c     80 E5 05 F1 | 	add	objptr, ##60800
0a040     F2 12 02 F6 | 	mov	arg01, objptr
0a044     76 00 00 FF 
0a048     80 E5 85 F1 | 	sub	objptr, ##60800
0a04c     00 FB BF FD | 	call	#_csave_block
0a050     78 00 00 FF 
0a054     80 E5 05 F1 | 	add	objptr, ##61824
0a058     F2 00 68 FC | 	wrlong	#0, objptr
0a05c     78 00 00 FF 
0a060     80 E5 85 F1 | 	sub	objptr, ##61824
0a064     2C 13 06 F6 | 	mov	arg01, #300
0a068     3C EF B0 FD | 	call	#__system___waitms
0a06c                 | LR__0834
0a06c     A7 F0 03 F6 | 	mov	ptra, fp
0a070     B2 00 A0 FD | 	call	#popregs_
0a074                 | _csave_addtoblock_ret
0a074     2D 00 64 FD | 	ret
0a078                 | 
0a078                 | ' 
0a078                 | ' sub test_csave
0a078                 | _test_csave
0a078     04 4A 05 F6 | 	mov	COUNT_, #4
0a07c     A8 00 A0 FD | 	call	#pushregs_
0a080     C0 F0 07 F1 | 	add	ptra, #192
0a084                 | ' 'dim fileheader,savestart, saveptr as ulong
0a084                 | ' 
0a084                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0a084     69 00 00 FF 
0a088     58 E4 05 F1 | 	add	objptr, ##53848
0a08c     F2 12 02 FB | 	rdlong	arg01, objptr
0a090     69 00 00 FF 
0a094     58 E4 85 F1 | 	sub	objptr, ##53848
0a098     B0 B8 B0 FD | 	call	#_pslpeek
0a09c     FF FF 7F FF 
0a0a0     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0a0a4     0C 00 90 5D |  if_ne	jmp	#LR__0840
0a0a8     1B 12 06 F6 | 	mov	arg01, #27
0a0ac     E0 B6 B0 FD | 	call	#_printerror
0a0b0     0C 03 90 FD | 	jmp	#LR__0852
0a0b4                 | LR__0840
0a0b4     04 F8 BF FD | 	call	#_pop
0a0b8     FF 1E 02 F6 | 	mov	local01, result3
0a0bc     90 4E 05 F1 | 	add	fp, #144
0a0c0     A7 FA 61 FC | 	wrlong	result1, fp
0a0c4     04 4E 05 F1 | 	add	fp, #4
0a0c8     A7 FC 61 FC | 	wrlong	result2, fp
0a0cc     04 4E 05 F1 | 	add	fp, #4
0a0d0     A7 1E 62 FC | 	wrlong	local01, fp
0a0d4                 | ' t1=pop()
0a0d4                 | ' if t1.result_type<>result_string then name$="noname.bas" else name$=t1.result.sresult
0a0d4     98 4E 85 F1 | 	sub	fp, #152
0a0d8     1F 1E 0E F2 | 	cmp	local01, #31 wz
0a0dc     43 01 00 5F 
0a0e0     87 1E 06 56 |  if_ne	mov	local01, ##@LR__4575
0a0e4     8C 4E 05 51 |  if_ne	add	fp, #140
0a0e8     A7 1E 62 5C |  if_ne	wrlong	local01, fp
0a0ec     8C 4E 85 51 |  if_ne	sub	fp, #140
0a0f0     90 4E 05 A1 |  if_e	add	fp, #144
0a0f4     A7 1E 02 AB |  if_e	rdlong	local01, fp
0a0f8     04 4E 85 A1 |  if_e	sub	fp, #4
0a0fc     A7 1E 62 AC |  if_e	wrlong	local01, fp
0a100     8C 4E 85 A1 |  if_e	sub	fp, #140
0a104                 | ' 
0a104                 | ' ' prepare 1 kHz header wave
0a104                 | ' 
0a104                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0a104     A7 00 68 FC | 	wrlong	#0, fp
0a108     97 34 48 FB | 	callpa	#(@LR__0844-@LR__0841)>>2,fcache_load_ptr_
0a10c                 | LR__0841
0a10c     A7 1E 02 FB | 	rdlong	local01, fp
0a110     0F 1F 52 F6 | 	abs	local01, local01 wc
0a114     07 1E 06 F5 | 	and	local01, #7
0a118     0F 1F 82 F6 | 	negc	local01, local01
0a11c     04 1E 56 F2 | 	cmps	local01, #4 wc
0a120     20 00 90 3D |  if_ae	jmp	#LR__0842
0a124     A7 1E 02 FB | 	rdlong	local01, fp
0a128     76 00 00 FF 
0a12c     80 E4 05 F1 | 	add	objptr, ##60544
0a130     F2 1E 02 F1 | 	add	local01, objptr
0a134     0F FF 48 FC | 	wrbyte	#127, local01
0a138     76 00 00 FF 
0a13c     80 E4 85 F1 | 	sub	objptr, ##60544
0a140     1C 00 90 FD | 	jmp	#LR__0843
0a144                 | LR__0842
0a144     A7 1E 02 FB | 	rdlong	local01, fp
0a148     76 00 00 FF 
0a14c     80 E4 05 F1 | 	add	objptr, ##60544
0a150     F2 1E 02 F1 | 	add	local01, objptr
0a154     0F 01 49 FC | 	wrbyte	#128, local01
0a158     76 00 00 FF 
0a15c     80 E4 85 F1 | 	sub	objptr, ##60544
0a160                 | LR__0843
0a160     A7 1E 02 FB | 	rdlong	local01, fp
0a164     01 1E 06 F1 | 	add	local01, #1
0a168     A7 1E 62 FC | 	wrlong	local01, fp
0a16c     00 1F 56 F2 | 	cmps	local01, #256 wc
0a170     98 FF 9F CD |  if_b	jmp	#LR__0841
0a174                 | LR__0844
0a174     76 00 00 FF 
0a178     80 E4 05 F1 | 	add	objptr, ##60544
0a17c     F2 14 02 F6 | 	mov	arg02, objptr
0a180     07 12 06 F6 | 	mov	arg01, #7
0a184     0F 00 00 FF 
0a188     40 17 06 F6 | 	mov	arg03, ##8000
0a18c     0E 18 C6 F9 | 	decod	arg04, #14
0a190     00 1B 06 F6 | 	mov	arg05, #256
0a194     00 1C 06 F6 | 	mov	arg06, #0
0a198     6A 00 00 FF 
0a19c     C0 E5 85 F1 | 	sub	objptr, ##54720
0a1a0     74 E7 B0 FD | 	call	#_Audio093b_8_sc_spin2_play8
0a1a4     0B 00 00 FF 
0a1a8     C0 E4 85 F1 | 	sub	objptr, ##5824
0a1ac     05 00 00 FF 
0a1b0     B8 13 06 F6 | 	mov	arg01, ##3000
0a1b4     F0 ED B0 FD | 	call	#__system___waitms
0a1b8     78 00 00 FF 
0a1bc     80 E5 05 F1 | 	add	objptr, ##61824
0a1c0     F2 00 68 FC | 	wrlong	#0, objptr
0a1c4     78 00 00 FF 
0a1c8     80 E5 85 F1 | 	sub	objptr, ##61824
0a1cc     72 12 06 F6 | 	mov	arg01, #114
0a1d0     00 14 06 F6 | 	mov	arg02, #0
0a1d4     5C FD BF FD | 	call	#_csave_addtoblock
0a1d8     62 12 06 F6 | 	mov	arg01, #98
0a1dc     00 14 06 F6 | 	mov	arg02, #0
0a1e0     50 FD BF FD | 	call	#_csave_addtoblock
0a1e4     61 12 06 F6 | 	mov	arg01, #97
0a1e8     00 14 06 F6 | 	mov	arg02, #0
0a1ec     44 FD BF FD | 	call	#_csave_addtoblock
0a1f0     0D 12 06 F6 | 	mov	arg01, #13
0a1f4     00 14 06 F6 | 	mov	arg02, #0
0a1f8     38 FD BF FD | 	call	#_csave_addtoblock
0a1fc                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
0a1fc                 | ' waitms 3000 
0a1fc                 | ' 
0a1fc                 | ' blockptr=0
0a1fc                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
0a1fc                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
0a1fc     A7 02 68 FC | 	wrlong	#1, fp
0a200     8C 4E 05 F1 | 	add	fp, #140
0a204     A7 12 02 FB | 	rdlong	arg01, fp
0a208     8C 4E 85 F1 | 	sub	fp, #140
0a20c     09 21 02 F6 | 	mov	local02, arg01
0a210     97 06 48 FB | 	callpa	#(@LR__0846-@LR__0845)>>2,fcache_load_ptr_
0a214                 | LR__0845
0a214     10 FB C9 FA | 	rdbyte	result1, local02 wz
0a218     01 20 06 51 |  if_ne	add	local02, #1
0a21c     F4 FF 9F 5D |  if_ne	jmp	#LR__0845
0a220                 | LR__0846
0a220     09 21 82 F1 | 	sub	local02, arg01
0a224     10 23 02 F6 | 	mov	local03, local02
0a228     01 22 06 F1 | 	add	local03, #1
0a22c                 | LR__0847
0a22c     A7 1E 02 FB | 	rdlong	local01, fp
0a230     11 1F 52 F2 | 	cmps	local01, local03 wc
0a234     34 00 90 3D |  if_ae	jmp	#LR__0848
0a238     8C 4E 05 F1 | 	add	fp, #140
0a23c     A7 12 02 FB | 	rdlong	arg01, fp
0a240     8C 4E 85 F1 | 	sub	fp, #140
0a244     A7 14 02 FB | 	rdlong	arg02, fp
0a248     01 16 06 F6 | 	mov	arg03, #1
0a24c     8C 0B B1 FD | 	call	#__system__Mid_S
0a250     FD 12 C2 FA | 	rdbyte	arg01, result1
0a254     00 14 06 F6 | 	mov	arg02, #0
0a258     D8 FC BF FD | 	call	#_csave_addtoblock
0a25c     A7 1E 02 FB | 	rdlong	local01, fp
0a260     01 1E 06 F1 | 	add	local01, #1
0a264     A7 1E 62 FC | 	wrlong	local01, fp
0a268     C0 FF 9F FD | 	jmp	#LR__0847
0a26c                 | LR__0848
0a26c     00 12 06 F6 | 	mov	arg01, #0
0a270     00 14 06 F6 | 	mov	arg02, #0
0a274     BC FC BF FD | 	call	#_csave_addtoblock
0a278     72 12 06 F6 | 	mov	arg01, #114
0a27c     00 14 06 F6 | 	mov	arg02, #0
0a280     B0 FC BF FD | 	call	#_csave_addtoblock
0a284     62 12 06 F6 | 	mov	arg01, #98
0a288     00 14 06 F6 | 	mov	arg02, #0
0a28c     A4 FC BF FD | 	call	#_csave_addtoblock
0a290     73 12 06 F6 | 	mov	arg01, #115
0a294     00 14 06 F6 | 	mov	arg02, #0
0a298     98 FC BF FD | 	call	#_csave_addtoblock
0a29c     0D 12 06 F6 | 	mov	arg01, #13
0a2a0     00 14 06 F6 | 	mov	arg02, #0
0a2a4     8C FC BF FD | 	call	#_csave_addtoblock
0a2a8     69 00 00 FF 
0a2ac     58 E4 05 F1 | 	add	objptr, ##53848
0a2b0     F2 1E 02 FB | 	rdlong	local01, objptr
0a2b4     69 00 00 FF 
0a2b8     58 E4 85 F1 | 	sub	objptr, ##53848
0a2bc     9C 4E 05 F1 | 	add	fp, #156
0a2c0     A7 1E 62 FC | 	wrlong	local01, fp
0a2c4     9C 4E 85 F1 | 	sub	fp, #156
0a2c8                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
0a2c8                 | ' 
0a2c8                 | ' saveptr=programstart
0a2c8                 | ' do
0a2c8                 | LR__0849
0a2c8     A0 4E 05 F1 | 	add	fp, #160
0a2cc     A7 12 02 F6 | 	mov	arg01, fp
0a2d0     04 4E 85 F1 | 	sub	fp, #4
0a2d4     A7 14 02 FB | 	rdlong	arg02, fp
0a2d8     9C 4E 85 F1 | 	sub	fp, #156
0a2dc     18 16 06 F6 | 	mov	arg03, #24
0a2e0     0B 00 00 FF 
0a2e4     C0 E4 05 F1 | 	add	objptr, ##5824
0a2e8     D8 DE B0 FD | 	call	#_psram_spin2_read1
0a2ec     0C 4E 05 F1 | 	add	fp, #12
0a2f0     A7 12 02 F6 | 	mov	arg01, fp
0a2f4     9C 4E 05 F1 | 	add	fp, #156
0a2f8     A7 14 02 FB | 	rdlong	arg02, fp
0a2fc     04 4E 05 F1 | 	add	fp, #4
0a300     A7 16 02 FB | 	rdlong	arg03, fp
0a304     AC 4E 85 F1 | 	sub	fp, #172
0a308     B8 DE B0 FD | 	call	#_psram_spin2_read1
0a30c     0B 00 00 FF 
0a310     C0 E4 85 F1 | 	sub	objptr, ##5824
0a314     AC 4E 05 F1 | 	add	fp, #172
0a318     A7 12 02 FB | 	rdlong	arg01, fp
0a31c     AC 4E 85 F1 | 	sub	fp, #172
0a320     00 14 06 F6 | 	mov	arg02, #0
0a324     0C FC BF FD | 	call	#_csave_addtoblock
0a328                 | '   psram.read1(varptr(header(0)),saveptr,24)
0a328                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
0a328                 | '   csave_addtoblock(header(3),0) ' that's always <255
0a328                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)    :next i
0a328     A7 00 68 FC | 	wrlong	#0, fp
0a32c     AC 4E 05 F1 | 	add	fp, #172
0a330     A7 24 02 FB | 	rdlong	local04, fp
0a334     AC 4E 85 F1 | 	sub	fp, #172
0a338                 | LR__0850
0a338     A7 1E 02 FB | 	rdlong	local01, fp
0a33c     12 1F 52 F2 | 	cmps	local01, local04 wc
0a340     2C 00 90 3D |  if_ae	jmp	#LR__0851
0a344     A7 22 02 FB | 	rdlong	local03, fp
0a348     0C 4E 05 F1 | 	add	fp, #12
0a34c     A7 22 02 F1 | 	add	local03, fp
0a350     11 13 C2 FA | 	rdbyte	arg01, local03
0a354     00 14 06 F6 | 	mov	arg02, #0
0a358     0C 4E 85 F1 | 	sub	fp, #12
0a35c     D4 FB BF FD | 	call	#_csave_addtoblock
0a360     A7 22 02 FB | 	rdlong	local03, fp
0a364     01 22 06 F1 | 	add	local03, #1
0a368     A7 22 62 FC | 	wrlong	local03, fp
0a36c     C8 FF 9F FD | 	jmp	#LR__0850
0a370                 | LR__0851
0a370     B4 4E 05 F1 | 	add	fp, #180
0a374     A7 1E 02 FB | 	rdlong	local01, fp
0a378     18 4E 85 F1 | 	sub	fp, #24
0a37c     A7 1E 62 FC | 	wrlong	local01, fp
0a380     18 4E 05 F1 | 	add	fp, #24
0a384     A7 1E 02 FB | 	rdlong	local01, fp
0a388     B4 4E 85 F1 | 	sub	fp, #180
0a38c     FF FF 3F FF 
0a390     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0a394     30 FF 9F 5D |  if_ne	jmp	#LR__0849
0a398     00 12 06 F6 | 	mov	arg01, #0
0a39c     01 14 06 F6 | 	mov	arg02, #1
0a3a0     90 FB BF FD | 	call	#_csave_addtoblock
0a3a4     55 00 00 FF 
0a3a8     E4 E5 05 F1 | 	add	objptr, ##44004
0a3ac     F2 12 02 FB | 	rdlong	arg01, objptr
0a3b0     55 00 00 FF 
0a3b4     E4 E5 85 F1 | 	sub	objptr, ##44004
0a3b8     F4 12 06 F1 | 	add	arg01, #244
0a3bc     09 01 58 FC | 	wrword	#0, arg01
0a3c0                 | LR__0852
0a3c0     A7 F0 03 F6 | 	mov	ptra, fp
0a3c4     B2 00 A0 FD | 	call	#popregs_
0a3c8                 | _test_csave_ret
0a3c8     2D 00 64 FD | 	ret
0a3cc                 | 
0a3cc                 | ' 
0a3cc                 | ' ' ----------------- Save the program
0a3cc                 | ' 
0a3cc                 | ' sub do_save                           ''' <------------------------ TODO vartables has to be saved too! Or maybe o
0a3cc                 | _do_save
0a3cc     02 4A 05 F6 | 	mov	COUNT_, #2
0a3d0     A8 00 A0 FD | 	call	#pushregs_
0a3d4     01 00 00 FF 
0a3d8     BC F0 07 F1 | 	add	ptra, ##700
0a3dc     01 00 00 FF 
0a3e0     10 4E 05 F1 | 	add	fp, ##528
0a3e4     B1 B0 86 FF 
0a3e8     A7 E4 68 FC | 	wrlong	##224486002, fp
0a3ec     01 00 00 FF 
0a3f0     10 4E 85 F1 | 	sub	fp, ##528
0a3f4     C4 F4 BF FD | 	call	#_pop
0a3f8     FF 16 02 F6 | 	mov	arg03, result3
0a3fc     A7 FA 61 FC | 	wrlong	result1, fp
0a400     04 4E 05 F1 | 	add	fp, #4
0a404     A7 FC 61 FC | 	wrlong	result2, fp
0a408     04 4E 05 F1 | 	add	fp, #4
0a40c     A7 16 62 FC | 	wrlong	arg03, fp
0a410     08 4E 85 F1 | 	sub	fp, #8
0a414                 | ' 
0a414                 | ' fileheader=$0D616272' rba+ver'
0a414                 | ' 
0a414                 | ' t1=pop() 
0a414                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0a414     69 00 00 FF 
0a418     58 E4 05 F1 | 	add	objptr, ##53848
0a41c     F2 12 02 FB | 	rdlong	arg01, objptr
0a420     69 00 00 FF 
0a424     58 E4 85 F1 | 	sub	objptr, ##53848
0a428     20 B5 B0 FD | 	call	#_pslpeek
0a42c     FF FF 7F FF 
0a430     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0a434     0C 00 90 5D |  if_ne	jmp	#LR__0860
0a438     1B 12 06 F6 | 	mov	arg01, #27
0a43c     50 B3 B0 FD | 	call	#_printerror
0a440     68 02 90 FD | 	jmp	#LR__0866
0a444                 | LR__0860
0a444                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0a444     08 4E 05 F1 | 	add	fp, #8
0a448     A7 16 02 FB | 	rdlong	arg03, fp
0a44c     08 4E 85 F1 | 	sub	fp, #8
0a450     2B 16 0E F2 | 	cmp	arg03, #43 wz
0a454     18 00 90 5D |  if_ne	jmp	#LR__0861
0a458     A7 12 02 FB | 	rdlong	arg01, fp
0a45c     98 25 B0 FD | 	call	#_convertstring
0a460     A7 FA 61 FC | 	wrlong	result1, fp
0a464     08 4E 05 F1 | 	add	fp, #8
0a468     A7 3E 68 FC | 	wrlong	#31, fp
0a46c     08 4E 85 F1 | 	sub	fp, #8
0a470                 | LR__0861
0a470                 | ' if t1.result_type=result_string then
0a470     08 4E 05 F1 | 	add	fp, #8
0a474     A7 1E 02 FB | 	rdlong	local01, fp
0a478     08 4E 85 F1 | 	sub	fp, #8
0a47c     1F 1E 0E F2 | 	cmp	local01, #31 wz
0a480     28 02 90 5D |  if_ne	jmp	#LR__0865
0a484                 | '   if t1.result.sresult="" then t1.result.sresult="noname.bas"
0a484     A7 12 02 FB | 	rdlong	arg01, fp
0a488     43 01 00 FF 
0a48c     92 14 06 F6 | 	mov	arg02, ##@LR__4576
0a490     48 E8 B0 FD | 	call	#__system___string_cmp
0a494     00 FA 0D F2 | 	cmp	result1, #0 wz
0a498     43 01 00 AF 
0a49c     93 1E 06 A6 |  if_e	mov	local01, ##@LR__4577
0a4a0     A7 1E 62 AC |  if_e	wrlong	local01, fp
0a4a4                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
0a4a4     09 12 06 F6 | 	mov	arg01, #9
0a4a8     3C 37 B1 FD | 	call	#__system__close
0a4ac     09 1E 06 F6 | 	mov	local01, #9
0a4b0     71 00 00 FF 
0a4b4     68 E4 05 F1 | 	add	objptr, ##57960
0a4b8     F2 12 02 FB | 	rdlong	arg01, objptr
0a4bc     71 00 00 FF 
0a4c0     68 E4 85 F1 | 	sub	objptr, ##57960
0a4c4     43 01 00 FF 
0a4c8     9E 14 06 F6 | 	mov	arg02, ##@LR__4578
0a4cc     40 E8 B0 FD | 	call	#__system___string_concat
0a4d0     FD 12 02 F6 | 	mov	arg01, result1
0a4d4     A7 14 02 FB | 	rdlong	arg02, fp
0a4d8     34 E8 B0 FD | 	call	#__system___string_concat
0a4dc     FD 14 02 F6 | 	mov	arg02, result1
0a4e0     0F 13 02 F6 | 	mov	arg01, local01
0a4e4     0D 16 06 F6 | 	mov	arg03, #13
0a4e8     CC F3 B0 FD | 	call	#__system___basic_open_string
0a4ec     01 00 00 FF 
0a4f0     0C 4E 05 F1 | 	add	fp, ##524
0a4f4     A7 0A 68 FC | 	wrlong	#5, fp
0a4f8     69 00 00 FF 
0a4fc     58 E4 05 F1 | 	add	objptr, ##53848
0a500     F2 1E 02 FB | 	rdlong	local01, objptr
0a504     69 00 00 FF 
0a508     58 E4 85 F1 | 	sub	objptr, ##53848
0a50c     0C 4E 05 F1 | 	add	fp, #12
0a510     A7 1E 62 FC | 	wrlong	local01, fp
0a514     01 00 00 FF 
0a518     18 4E 85 F1 | 	sub	fp, ##536
0a51c                 | ' '  put #9,1,fileheader,1
0a51c                 | '   i=5
0a51c                 | '   saveptr=programstart
0a51c                 | '   do
0a51c                 | LR__0862
0a51c     01 00 00 FF 
0a520     1C 4E 05 F1 | 	add	fp, ##540
0a524     A7 12 02 F6 | 	mov	arg01, fp
0a528     04 4E 85 F1 | 	sub	fp, #4
0a52c     A7 14 02 FB | 	rdlong	arg02, fp
0a530     01 00 00 FF 
0a534     18 4E 85 F1 | 	sub	fp, ##536
0a538     18 16 06 F6 | 	mov	arg03, #24
0a53c     0B 00 00 FF 
0a540     C0 E4 05 F1 | 	add	objptr, ##5824
0a544     7C DC B0 FD | 	call	#_psram_spin2_read1
0a548     01 00 00 FF 
0a54c     34 4E 05 F1 | 	add	fp, ##564
0a550     A7 12 02 F6 | 	mov	arg01, fp
0a554     10 4E 85 F1 | 	sub	fp, #16
0a558     A7 14 02 FB | 	rdlong	arg02, fp
0a55c     04 4E 05 F1 | 	add	fp, #4
0a560     A7 16 02 FB | 	rdlong	arg03, fp
0a564     01 00 00 FF 
0a568     28 4E 85 F1 | 	sub	fp, ##552
0a56c     54 DC B0 FD | 	call	#_psram_spin2_read1
0a570     0B 00 00 FF 
0a574     C0 E4 85 F1 | 	sub	objptr, ##5824
0a578     43 01 00 FF 
0a57c     A0 1E 06 F6 | 	mov	local01, ##@LR__4579
0a580     01 00 00 FF 
0a584     B4 4E 05 F1 | 	add	fp, ##692
0a588     A7 1E 62 FC | 	wrlong	local01, fp
0a58c                 | '     psram.read1(varptr(header(0)),saveptr,24)
0a58c                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
0a58c                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
0a58c     A8 4E 85 F1 | 	sub	fp, #168
0a590     A7 02 68 FC | 	wrlong	#1, fp
0a594     1C 4E 05 F1 | 	add	fp, #28
0a598     A7 20 02 FB | 	rdlong	local02, fp
0a59c     01 00 00 FF 
0a5a0     28 4E 85 F1 | 	sub	fp, ##552
0a5a4     01 20 06 F1 | 	add	local02, #1
0a5a8                 | LR__0863
0a5a8     01 00 00 FF 
0a5ac     0C 4E 05 F1 | 	add	fp, ##524
0a5b0     A7 1E 02 FB | 	rdlong	local01, fp
0a5b4     01 00 00 FF 
0a5b8     0C 4E 85 F1 | 	sub	fp, ##524
0a5bc     10 1F 52 F2 | 	cmps	local01, local02 wc
0a5c0     64 00 90 3D |  if_ae	jmp	#LR__0864
0a5c4     01 00 00 FF 
0a5c8     B4 4E 05 F1 | 	add	fp, ##692
0a5cc     A7 1E 02 FB | 	rdlong	local01, fp
0a5d0     A8 4E 85 F1 | 	sub	fp, #168
0a5d4     A7 16 02 FB | 	rdlong	arg03, fp
0a5d8     01 16 86 F1 | 	sub	arg03, #1
0a5dc     28 4E 05 F1 | 	add	fp, #40
0a5e0     A7 16 02 F1 | 	add	arg03, fp
0a5e4     0B 13 C2 FA | 	rdbyte	arg01, arg03
0a5e8     01 00 00 FF 
0a5ec     34 4E 85 F1 | 	sub	fp, ##564
0a5f0     94 08 B1 FD | 	call	#__system__Chr_S
0a5f4     FD 14 02 F6 | 	mov	arg02, result1
0a5f8     0F 13 02 F6 | 	mov	arg01, local01
0a5fc     10 E7 B0 FD | 	call	#__system___string_concat
0a600     01 00 00 FF 
0a604     B4 4E 05 F1 | 	add	fp, ##692
0a608     A7 FA 61 FC | 	wrlong	result1, fp
0a60c     A8 4E 85 F1 | 	sub	fp, #168
0a610     A7 1E 02 FB | 	rdlong	local01, fp
0a614     01 1E 06 F1 | 	add	local01, #1
0a618     A7 1E 62 FC | 	wrlong	local01, fp
0a61c     01 00 00 FF 
0a620     0C 4E 85 F1 | 	sub	fp, ##524
0a624     80 FF 9F FD | 	jmp	#LR__0863
0a628                 | LR__0864
0a628                 | '  '   put #9,i,header(3),1 : i+=4
0a628                 | '  '   put #9,i,linebuf(0),header(3) : i+=header(3)
0a628                 | '      print #9, saveline$
0a628     09 12 06 F6 | 	mov	arg01, #9
0a62c     88 3F B1 FD | 	call	#__system___getiolock_0423
0a630     FD 12 02 F6 | 	mov	arg01, result1
0a634     7C E6 B0 FD | 	call	#__system___lockmem
0a638     01 00 00 FF 
0a63c     B4 4E 05 F1 | 	add	fp, ##692
0a640     A7 14 02 FB | 	rdlong	arg02, fp
0a644     01 00 00 FF 
0a648     B4 4E 85 F1 | 	sub	fp, ##692
0a64c     09 12 06 F6 | 	mov	arg01, #9
0a650     00 16 06 F6 | 	mov	arg03, #0
0a654     50 F3 B0 FD | 	call	#__system___basic_print_string
0a658     09 12 06 F6 | 	mov	arg01, #9
0a65c     0A 14 06 F6 | 	mov	arg02, #10
0a660     00 16 06 F6 | 	mov	arg03, #0
0a664     E8 F2 B0 FD | 	call	#__system___basic_print_char
0a668     09 12 06 F6 | 	mov	arg01, #9
0a66c     48 3F B1 FD | 	call	#__system___getiolock_0423
0a670     FD 00 68 FC | 	wrlong	#0, result1
0a674     01 00 00 FF 
0a678     30 4E 05 F1 | 	add	fp, ##560
0a67c     A7 1E 02 FB | 	rdlong	local01, fp
0a680     18 4E 85 F1 | 	sub	fp, #24
0a684     A7 1E 62 FC | 	wrlong	local01, fp
0a688     18 4E 05 F1 | 	add	fp, #24
0a68c     A7 1E 02 FB | 	rdlong	local01, fp
0a690     01 00 00 FF 
0a694     30 4E 85 F1 | 	sub	fp, ##560
0a698     FF FF 3F FF 
0a69c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0a6a0     78 FE 9F 5D |  if_ne	jmp	#LR__0862
0a6a4                 | '   close #9  
0a6a4     09 12 06 F6 | 	mov	arg01, #9
0a6a8     3C 35 B1 FD | 	call	#__system__close
0a6ac                 | LR__0865
0a6ac                 | LR__0866
0a6ac     A7 F0 03 F6 | 	mov	ptra, fp
0a6b0     B2 00 A0 FD | 	call	#popregs_
0a6b4                 | _do_save_ret
0a6b4     2D 00 64 FD | 	ret
0a6b8                 | 
0a6b8                 | ' 
0a6b8                 | ' '----------------- Load the program
0a6b8                 | ' 'lo todo: errors while loading
0a6b8                 | ' sub do_load
0a6b8                 | _do_load
0a6b8     01 4A 05 F6 | 	mov	COUNT_, #1
0a6bc     A8 00 A0 FD | 	call	#pushregs_
0a6c0     A4 F0 07 F1 | 	add	ptra, #164
0a6c4     A0 4E 05 F1 | 	add	fp, #160
0a6c8     A7 12 02 F6 | 	mov	arg01, fp
0a6cc     80 4E 85 F1 | 	sub	fp, #128
0a6d0     A7 14 02 F6 | 	mov	arg02, fp
0a6d4     20 4E 85 F1 | 	sub	fp, #32
0a6d8     09 15 62 FC | 	wrlong	arg02, arg01
0a6dc     DC F1 BF FD | 	call	#_pop
0a6e0     FF 1A 02 F6 | 	mov	arg05, result3
0a6e4     A7 FA 61 FC | 	wrlong	result1, fp
0a6e8     04 4E 05 F1 | 	add	fp, #4
0a6ec     A7 FC 61 FC | 	wrlong	result2, fp
0a6f0     04 4E 05 F1 | 	add	fp, #4
0a6f4     A7 1A 62 FC | 	wrlong	arg05, fp
0a6f8                 | ' 
0a6f8                 | ' lpoke varptr(line2$),varptr(line2)
0a6f8                 | ' t1=pop() 
0a6f8                 | ' 'print "popped "; t1.result.uresult, t1.result_type
0a6f8                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
0a6f8     08 4E 85 F1 | 	sub	fp, #8
0a6fc     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0a700     18 00 90 5D |  if_ne	jmp	#LR__0870
0a704     A7 12 02 FB | 	rdlong	arg01, fp
0a708     EC 22 B0 FD | 	call	#_convertstring
0a70c     A7 FA 61 FC | 	wrlong	result1, fp
0a710     08 4E 05 F1 | 	add	fp, #8
0a714     A7 3E 68 FC | 	wrlong	#31, fp
0a718     08 4E 85 F1 | 	sub	fp, #8
0a71c                 | LR__0870
0a71c                 | ' if t1.result_type=result_string then
0a71c     08 4E 05 F1 | 	add	fp, #8
0a720     A7 1E 02 FB | 	rdlong	local01, fp
0a724     08 4E 85 F1 | 	sub	fp, #8
0a728     1F 1E 0E F2 | 	cmp	local01, #31 wz
0a72c     40 03 90 5D |  if_ne	jmp	#LR__0877
0a730     2C 1D B0 FD | 	call	#_do_new
0a734                 | '   do_new
0a734                 | '   if t1.result.sresult="" then t1.result.sresult="noname.bas" 
0a734     A7 12 02 FB | 	rdlong	arg01, fp
0a738     43 01 00 FF 
0a73c     A1 14 06 F6 | 	mov	arg02, ##@LR__4580
0a740     98 E5 B0 FD | 	call	#__system___string_cmp
0a744     00 FA 0D F2 | 	cmp	result1, #0 wz
0a748     43 01 00 AF 
0a74c     A2 1E 06 A6 |  if_e	mov	local01, ##@LR__4581
0a750     A7 1E 62 AC |  if_e	wrlong	local01, fp
0a754                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
0a754     09 12 06 F6 | 	mov	arg01, #9
0a758     8C 34 B1 FD | 	call	#__system__close
0a75c     09 1E 06 F6 | 	mov	local01, #9
0a760     71 00 00 FF 
0a764     68 E4 05 F1 | 	add	objptr, ##57960
0a768     F2 12 02 FB | 	rdlong	arg01, objptr
0a76c     71 00 00 FF 
0a770     68 E4 85 F1 | 	sub	objptr, ##57960
0a774     43 01 00 FF 
0a778     AD 14 06 F6 | 	mov	arg02, ##@LR__4582
0a77c     90 E5 B0 FD | 	call	#__system___string_concat
0a780     FD 12 02 F6 | 	mov	arg01, result1
0a784     A7 14 02 FB | 	rdlong	arg02, fp
0a788     84 E5 B0 FD | 	call	#__system___string_concat
0a78c     FD 14 02 F6 | 	mov	arg02, result1
0a790     0F 13 02 F6 | 	mov	arg01, local01
0a794     00 16 06 F6 | 	mov	arg03, #0
0a798     1C F1 B0 FD | 	call	#__system___basic_open_string
0a79c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
0a7a0     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0a7a4     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
0a7a8     10 4E 05 F1 | 	add	fp, #16
0a7ac     A7 FA 61 FC | 	wrlong	result1, fp
0a7b0                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0a7b0     10 4E 85 F1 | 	sub	fp, #16
0a7b4     9C 00 90 AD |  if_e	jmp	#LR__0871
0a7b8     00 12 06 F6 | 	mov	arg01, #0
0a7bc     F8 3D B1 FD | 	call	#__system___getiolock_0423
0a7c0     FD 12 02 F6 | 	mov	arg01, result1
0a7c4     EC E4 B0 FD | 	call	#__system___lockmem
0a7c8     43 01 00 FF 
0a7cc     AF 14 06 F6 | 	mov	arg02, ##@LR__4583
0a7d0     00 12 06 F6 | 	mov	arg01, #0
0a7d4     00 16 06 F6 | 	mov	arg03, #0
0a7d8     CC F1 B0 FD | 	call	#__system___basic_print_string
0a7dc     10 4E 05 F1 | 	add	fp, #16
0a7e0     A7 14 02 FB | 	rdlong	arg02, fp
0a7e4     10 4E 85 F1 | 	sub	fp, #16
0a7e8     00 12 06 F6 | 	mov	arg01, #0
0a7ec     00 16 06 F6 | 	mov	arg03, #0
0a7f0     0A 18 06 F6 | 	mov	arg04, #10
0a7f4     F4 F1 B0 FD | 	call	#__system___basic_print_integer
0a7f8     43 01 00 FF 
0a7fc     BD 14 06 F6 | 	mov	arg02, ##@LR__4584
0a800     00 12 06 F6 | 	mov	arg01, #0
0a804     00 16 06 F6 | 	mov	arg03, #0
0a808     9C F1 B0 FD | 	call	#__system___basic_print_string
0a80c     10 4E 05 F1 | 	add	fp, #16
0a810     A7 12 02 FB | 	rdlong	arg01, fp
0a814     10 4E 85 F1 | 	sub	fp, #16
0a818     98 0A B1 FD | 	call	#__system___strerror
0a81c     FD 14 02 F6 | 	mov	arg02, result1
0a820     00 12 06 F6 | 	mov	arg01, #0
0a824     00 16 06 F6 | 	mov	arg03, #0
0a828     7C F1 B0 FD | 	call	#__system___basic_print_string
0a82c     00 12 06 F6 | 	mov	arg01, #0
0a830     0A 14 06 F6 | 	mov	arg02, #10
0a834     00 16 06 F6 | 	mov	arg03, #0
0a838     14 F1 B0 FD | 	call	#__system___basic_print_char
0a83c     00 12 06 F6 | 	mov	arg01, #0
0a840     74 3D B1 FD | 	call	#__system___getiolock_0423
0a844     FD 00 68 FC | 	wrlong	#0, result1
0a848     09 12 06 F6 | 	mov	arg01, #9
0a84c     98 33 B1 FD | 	call	#__system__close
0a850     24 02 90 FD | 	jmp	#LR__0879
0a854                 | LR__0871
0a854     0C 4E 05 F1 | 	add	fp, #12
0a858     A7 0A 68 FC | 	wrlong	#5, fp
0a85c                 | '   i=5
0a85c                 | '   get #9,1,header,1
0a85c     0C 4E 05 F1 | 	add	fp, #12
0a860     A7 16 02 F6 | 	mov	arg03, fp
0a864     18 4E 85 F1 | 	sub	fp, #24
0a868     09 12 06 F6 | 	mov	arg01, #9
0a86c     01 14 06 F6 | 	mov	arg02, #1
0a870     01 18 06 F6 | 	mov	arg04, #1
0a874     04 1A 06 F6 | 	mov	arg05, #4
0a878     3C F2 B0 FD | 	call	#__system___basic_get
0a87c                 | '   
0a87c                 | '   if header<>$0D616272 then 
0a87c     18 4E 05 F1 | 	add	fp, #24
0a880     A7 1E 02 FB | 	rdlong	local01, fp
0a884     18 4E 85 F1 | 	sub	fp, #24
0a888     B1 B0 06 FF 
0a88c     72 1E 0E F2 | 	cmp	local01, ##224486002 wz
0a890     F0 00 90 AD |  if_e	jmp	#LR__0874
0a894                 | '     close #9: open currentdir$+"/"+t1.result.sresult for input as #9
0a894     09 12 06 F6 | 	mov	arg01, #9
0a898     4C 33 B1 FD | 	call	#__system__close
0a89c     09 1E 06 F6 | 	mov	local01, #9
0a8a0     71 00 00 FF 
0a8a4     68 E4 05 F1 | 	add	objptr, ##57960
0a8a8     F2 12 02 FB | 	rdlong	arg01, objptr
0a8ac     71 00 00 FF 
0a8b0     68 E4 85 F1 | 	sub	objptr, ##57960
0a8b4     43 01 00 FF 
0a8b8     C0 14 06 F6 | 	mov	arg02, ##@LR__4585
0a8bc     50 E4 B0 FD | 	call	#__system___string_concat
0a8c0     FD 12 02 F6 | 	mov	arg01, result1
0a8c4     A7 14 02 FB | 	rdlong	arg02, fp
0a8c8     44 E4 B0 FD | 	call	#__system___string_concat
0a8cc     FD 14 02 F6 | 	mov	arg02, result1
0a8d0     0F 13 02 F6 | 	mov	arg01, local01
0a8d4     00 16 06 F6 | 	mov	arg03, #0
0a8d8     DC EF B0 FD | 	call	#__system___basic_open_string
0a8dc                 | '     do
0a8dc                 | LR__0872
0a8dc     09 12 06 F6 | 	mov	arg01, #9
0a8e0     DC E5 B0 FD | 	call	#__system___basic_read_line
0a8e4     55 00 00 FF 
0a8e8     F0 E5 05 F1 | 	add	objptr, ##44016
0a8ec     F2 FA 61 FC | 	wrlong	result1, objptr
0a8f0                 | '       if left$(line$,1) >="0" andalso left$(line$,1)<="9" then interpret
0a8f0     55 00 00 FF 
0a8f4     F0 E5 85 F1 | 	sub	objptr, ##44016
0a8f8     FD 12 02 F6 | 	mov	arg01, result1
0a8fc     01 14 06 F6 | 	mov	arg02, #1
0a900     C0 03 B1 FD | 	call	#__system__Left_S
0a904     FD 12 02 F6 | 	mov	arg01, result1
0a908     43 01 00 FF 
0a90c     C2 14 06 F6 | 	mov	arg02, ##@LR__4586
0a910     C8 E3 B0 FD | 	call	#__system___string_cmp
0a914     00 FA 55 F2 | 	cmps	result1, #0 wc
0a918     34 00 90 CD |  if_b	jmp	#LR__0873
0a91c     55 00 00 FF 
0a920     F0 E5 05 F1 | 	add	objptr, ##44016
0a924     F2 12 02 FB | 	rdlong	arg01, objptr
0a928     55 00 00 FF 
0a92c     F0 E5 85 F1 | 	sub	objptr, ##44016
0a930     01 14 06 F6 | 	mov	arg02, #1
0a934     8C 03 B1 FD | 	call	#__system__Left_S
0a938     FD 12 02 F6 | 	mov	arg01, result1
0a93c     43 01 00 FF 
0a940     C4 14 06 F6 | 	mov	arg02, ##@LR__4587
0a944     94 E3 B0 FD | 	call	#__system___string_cmp
0a948     01 FA 55 F2 | 	cmps	result1, #1 wc
0a94c     CC 60 BF CD |  if_b	call	#_interpret
0a950                 | LR__0873
0a950     55 00 00 FF 
0a954     F0 E5 05 F1 | 	add	objptr, ##44016
0a958     F2 12 02 FB | 	rdlong	arg01, objptr
0a95c     55 00 00 FF 
0a960     F0 E5 85 F1 | 	sub	objptr, ##44016
0a964     43 01 00 FF 
0a968     C6 14 06 F6 | 	mov	arg02, ##@LR__4588
0a96c     6C E3 B0 FD | 	call	#__system___string_cmp
0a970     00 FA 0D F2 | 	cmp	result1, #0 wz
0a974     64 FF 9F 5D |  if_ne	jmp	#LR__0872
0a978                 | '     close #9
0a978     09 12 06 F6 | 	mov	arg01, #9
0a97c     68 32 B1 FD | 	call	#__system__close
0a980     F4 00 90 FD | 	jmp	#LR__0878
0a984                 | LR__0874
0a984                 | '   'printerror(26) : close #9 : return
0a984                 | '     do
0a984                 | LR__0875
0a984                 | '       get #9,i,linelength,1,amount : i+=4 : line2(linelength)=0
0a984     0C 4E 05 F1 | 	add	fp, #12
0a988     A7 14 02 FB | 	rdlong	arg02, fp
0a98c     10 4E 05 F1 | 	add	fp, #16
0a990     A7 16 02 F6 | 	mov	arg03, fp
0a994     1C 4E 85 F1 | 	sub	fp, #28
0a998     09 12 06 F6 | 	mov	arg01, #9
0a99c     01 18 06 F6 | 	mov	arg04, #1
0a9a0     04 1A 06 F6 | 	mov	arg05, #4
0a9a4     10 F1 B0 FD | 	call	#__system___basic_get
0a9a8     14 4E 05 F1 | 	add	fp, #20
0a9ac     A7 FA 61 FC | 	wrlong	result1, fp
0a9b0     08 4E 85 F1 | 	sub	fp, #8
0a9b4     A7 1E 02 FB | 	rdlong	local01, fp
0a9b8     04 1E 06 F1 | 	add	local01, #4
0a9bc     A7 1E 62 FC | 	wrlong	local01, fp
0a9c0     10 4E 05 F1 | 	add	fp, #16
0a9c4     A7 1E 02 FB | 	rdlong	local01, fp
0a9c8     04 4E 05 F1 | 	add	fp, #4
0a9cc     A7 1E 02 F1 | 	add	local01, fp
0a9d0     0F 01 48 FC | 	wrbyte	#0, local01
0a9d4                 | '       if amount=1 then  
0a9d4     0C 4E 85 F1 | 	sub	fp, #12
0a9d8     A7 1E 02 FB | 	rdlong	local01, fp
0a9dc     14 4E 85 F1 | 	sub	fp, #20
0a9e0     01 1E 0E F2 | 	cmp	local01, #1 wz
0a9e4     68 00 90 5D |  if_ne	jmp	#LR__0876
0a9e8                 | '         get #9,i,line2(0),linelength : i+=linelength
0a9e8     0C 4E 05 F1 | 	add	fp, #12
0a9ec     A7 14 02 FB | 	rdlong	arg02, fp
0a9f0     14 4E 05 F1 | 	add	fp, #20
0a9f4     A7 16 02 F6 | 	mov	arg03, fp
0a9f8     04 4E 85 F1 | 	sub	fp, #4
0a9fc     A7 18 02 FB | 	rdlong	arg04, fp
0aa00     1C 4E 85 F1 | 	sub	fp, #28
0aa04     09 12 06 F6 | 	mov	arg01, #9
0aa08     01 1A 06 F6 | 	mov	arg05, #1
0aa0c     A8 F0 B0 FD | 	call	#__system___basic_get
0aa10     0C 4E 05 F1 | 	add	fp, #12
0aa14     A7 1E 02 FB | 	rdlong	local01, fp
0aa18     10 4E 05 F1 | 	add	fp, #16
0aa1c     A7 1A 02 FB | 	rdlong	arg05, fp
0aa20     0D 1F 02 F1 | 	add	local01, arg05
0aa24     10 4E 85 F1 | 	sub	fp, #16
0aa28     A7 1E 62 FC | 	wrlong	local01, fp
0aa2c     94 4E 05 F1 | 	add	fp, #148
0aa30     A7 1E 02 FB | 	rdlong	local01, fp
0aa34     A0 4E 85 F1 | 	sub	fp, #160
0aa38     55 00 00 FF 
0aa3c     F0 E5 05 F1 | 	add	objptr, ##44016
0aa40     F2 1E 62 FC | 	wrlong	local01, objptr
0aa44     55 00 00 FF 
0aa48     F0 E5 85 F1 | 	sub	objptr, ##44016
0aa4c     CC 5F BF FD | 	call	#_interpret
0aa50                 | LR__0876
0aa50     14 4E 05 F1 | 	add	fp, #20
0aa54     A7 1E 02 FB | 	rdlong	local01, fp
0aa58     14 4E 85 F1 | 	sub	fp, #20
0aa5c     01 1E 56 F2 | 	cmps	local01, #1 wc
0aa60     20 FF 9F 3D |  if_ae	jmp	#LR__0875
0aa64                 | '     close #9 
0aa64     09 12 06 F6 | 	mov	arg01, #9
0aa68     7C 31 B1 FD | 	call	#__system__close
0aa6c     08 00 90 FD | 	jmp	#LR__0878
0aa70                 | LR__0877
0aa70     1E 12 06 F6 | 	mov	arg01, #30
0aa74     18 AD B0 FD | 	call	#_printerror
0aa78                 | LR__0878
0aa78                 | LR__0879
0aa78     A7 F0 03 F6 | 	mov	ptra, fp
0aa7c     B2 00 A0 FD | 	call	#popregs_
0aa80                 | _do_load_ret
0aa80     2D 00 64 FD | 	ret
0aa84                 | 
0aa84                 | ' 
0aa84                 | ' '----------------- Run the program 
0aa84                 | ' 
0aa84                 | ' '' line header: linenum major, linenum minor, list start, list length, prev ptr, next ptr
0aa84                 | ' 
0aa84                 | ' sub do_run
0aa84                 | _do_run
0aa84     01 4A 05 F6 | 	mov	COUNT_, #1
0aa88     A8 00 A0 FD | 	call	#pushregs_
0aa8c     69 00 00 FF 
0aa90     58 E4 05 F1 | 	add	objptr, ##53848
0aa94     F2 1C 02 FB | 	rdlong	arg06, objptr
0aa98     0F 00 00 FF 
0aa9c     2C E5 05 F1 | 	add	objptr, ##7980
0aaa0     F2 1C 62 FC | 	wrlong	arg06, objptr
0aaa4     04 E4 05 F1 | 	add	objptr, #4
0aaa8     F2 00 68 FC | 	wrlong	#0, objptr
0aaac     04 E4 05 F1 | 	add	objptr, #4
0aab0     FF FF FF FF 
0aab4     F2 FE 6B FC | 	wrlong	##-1, objptr
0aab8                 | ' if inrun>0 then 
0aab8     04 E4 05 F1 | 	add	objptr, #4
0aabc     F2 1C 02 FB | 	rdlong	arg06, objptr
0aac0     78 00 00 FF 
0aac4     90 E5 85 F1 | 	sub	objptr, ##61840
0aac8     01 1C 16 F2 | 	cmp	arg06, #1 wc
0aacc     30 00 90 CD |  if_b	jmp	#LR__0880
0aad0     78 00 00 FF 
0aad4     94 E5 05 F1 | 	add	objptr, ##61844
0aad8     F2 12 02 F6 | 	mov	arg01, objptr
0aadc     10 E4 85 F1 | 	sub	objptr, #16
0aae0     F2 14 02 FB | 	rdlong	arg02, objptr
0aae4     18 16 06 F6 | 	mov	arg03, #24
0aae8     6D 00 00 FF 
0aaec     C4 E4 85 F1 | 	sub	objptr, ##56004
0aaf0     D0 D6 B0 FD | 	call	#_psram_spin2_read1
0aaf4     0B 00 00 FF 
0aaf8     C0 E4 85 F1 | 	sub	objptr, ##5824
0aafc                 | '   psram.read1(varptr(runheader),runptr,24)  
0aafc                 | '   return
0aafc     9C 02 90 FD | 	jmp	#LR__0886
0ab00                 | LR__0880
0ab00     78 00 00 FF 
0ab04     90 E5 05 F1 | 	add	objptr, ##61840
0ab08     F2 02 68 FC | 	wrlong	#1, objptr
0ab0c     04 E4 05 F1 | 	add	objptr, #4
0ab10     F2 12 02 F6 | 	mov	arg01, objptr
0ab14     10 E4 85 F1 | 	sub	objptr, #16
0ab18     F2 14 02 FB | 	rdlong	arg02, objptr
0ab1c     18 16 06 F6 | 	mov	arg03, #24
0ab20     6D 00 00 FF 
0ab24     C4 E4 85 F1 | 	sub	objptr, ##56004
0ab28     98 D6 B0 FD | 	call	#_psram_spin2_read1
0ab2c                 | ' inrun=1
0ab2c                 | ' psram.read1(varptr(runheader),runptr,24) 
0ab2c                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
0ab2c     6D 00 00 FF 
0ab30     D4 E4 05 F1 | 	add	objptr, ##56020
0ab34     F2 1E 02 FB | 	rdlong	local01, objptr
0ab38     78 00 00 FF 
0ab3c     94 E5 85 F1 | 	sub	objptr, ##61844
0ab40     FF FF 7F FF 
0ab44     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
0ab48     78 00 00 AF 
0ab4c     90 E5 05 A1 |  if_e	add	objptr, ##61840
0ab50     F2 00 68 AC |  if_e	wrlong	#0, objptr
0ab54     78 00 00 AF 
0ab58     90 E5 85 A1 |  if_e	sub	objptr, ##61840
0ab5c     3C 02 90 AD |  if_e	jmp	#LR__0886
0ab60                 | ' do 
0ab60                 | LR__0881
0ab60                 | '   if runptr<>oldrunptr then
0ab60     78 00 00 FF 
0ab64     84 E5 05 F1 | 	add	objptr, ##61828
0ab68     F2 1E 02 FB | 	rdlong	local01, objptr
0ab6c     08 E4 05 F1 | 	add	objptr, #8
0ab70     F2 1C 02 FB | 	rdlong	arg06, objptr
0ab74     78 00 00 FF 
0ab78     8C E5 85 F1 | 	sub	objptr, ##61836
0ab7c     0E 1F 0A F2 | 	cmp	local01, arg06 wz
0ab80     CC 00 90 AD |  if_e	jmp	#LR__0882
0ab84     78 00 00 FF 
0ab88     94 E5 05 F1 | 	add	objptr, ##61844
0ab8c     F2 12 02 F6 | 	mov	arg01, objptr
0ab90     10 E4 85 F1 | 	sub	objptr, #16
0ab94     F2 14 02 FB | 	rdlong	arg02, objptr
0ab98     18 16 06 F6 | 	mov	arg03, #24
0ab9c     6D 00 00 FF 
0aba0     C4 E4 85 F1 | 	sub	objptr, ##56004
0aba4     1C D6 B0 FD | 	call	#_psram_spin2_read1
0aba8     5A 00 00 FF 
0abac     90 E5 05 F1 | 	add	objptr, ##46480
0abb0     F2 12 02 F6 | 	mov	arg01, objptr
0abb4     12 00 00 FF 
0abb8     34 E5 05 F1 | 	add	objptr, ##9524
0abbc     F2 14 02 FB | 	rdlong	arg02, objptr
0abc0     14 00 00 FF 
0abc4     4C E5 85 F1 | 	sub	objptr, ##10572
0abc8     F2 1E 02 FB | 	rdlong	local01, objptr
0abcc     01 1E 66 F0 | 	shl	local01, #1
0abd0     0F 15 02 F1 | 	add	arg02, local01
0abd4     14 00 00 FF 
0abd8     64 E5 05 F1 | 	add	objptr, ##10596
0abdc     F2 16 02 FB | 	rdlong	arg03, objptr
0abe0     18 E4 85 F1 | 	sub	objptr, #24
0abe4     F2 1E 02 FB | 	rdlong	local01, objptr
0abe8     0F 17 82 F1 | 	sub	arg03, local01
0abec     6D 00 00 FF 
0abf0     C4 E4 85 F1 | 	sub	objptr, ##56004
0abf4     CC D5 B0 FD | 	call	#_psram_spin2_read1
0abf8     6D 00 00 FF 
0abfc     DC E4 05 F1 | 	add	objptr, ##56028
0ac00     F2 1E 02 FB | 	rdlong	local01, objptr
0ac04     18 E4 85 F1 | 	sub	objptr, #24
0ac08     F2 1C 02 FB | 	rdlong	arg06, objptr
0ac0c     0E 1F 82 F1 | 	sub	local01, arg06
0ac10     14 00 00 FF 
0ac14     4C E5 85 F1 | 	sub	objptr, ##10572
0ac18     F2 1C 02 FB | 	rdlong	arg06, objptr
0ac1c     0E 1F 12 FD | 	qdiv	local01, arg06
0ac20     05 00 00 FF 
0ac24     18 E4 05 F1 | 	add	objptr, ##2584
0ac28     18 1E 62 FD | 	getqx	local01
0ac2c     03 1E 86 F1 | 	sub	local01, #3
0ac30     F2 1E 62 FC | 	wrlong	local01, objptr
0ac34     0F 00 00 FF 
0ac38     34 E5 05 F1 | 	add	objptr, ##7988
0ac3c     F2 1E 02 FB | 	rdlong	local01, objptr
0ac40     08 E4 05 F1 | 	add	objptr, #8
0ac44     F2 1E 62 FC | 	wrlong	local01, objptr
0ac48     78 00 00 FF 
0ac4c     8C E5 85 F1 | 	sub	objptr, ##61836
0ac50                 | LR__0882
0ac50     78 00 00 FF 
0ac54     A8 E5 05 F1 | 	add	objptr, ##61864
0ac58     F2 1E 02 FB | 	rdlong	local01, objptr
0ac5c     24 E4 85 F1 | 	sub	objptr, #36
0ac60     F2 1E 62 FC | 	wrlong	local01, objptr
0ac64     04 E4 05 F1 | 	add	objptr, #4
0ac68     F2 12 02 FB | 	rdlong	arg01, objptr
0ac6c     78 00 00 FF 
0ac70     88 E5 85 F1 | 	sub	objptr, ##61832
0ac74     40 EB BF FD | 	call	#_execute_line
0ac78     78 00 00 FF 
0ac7c     88 E5 05 F1 | 	add	objptr, ##61832
0ac80     F2 FA 61 FC | 	wrlong	result1, objptr
0ac84     04 E4 85 F1 | 	sub	objptr, #4
0ac88     F2 1E 02 FB | 	rdlong	local01, objptr
0ac8c     78 00 00 FF 
0ac90     84 E5 85 F1 | 	sub	objptr, ##61828
0ac94     FF FF 3F FF 
0ac98     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0ac9c     0C 00 90 AD |  if_e	jmp	#LR__0883
0aca0     B0 D8 B0 FD | 	call	#_usbnew_spin2_get_key
0aca4     06 FB 0D F2 | 	cmp	result1, #262 wz
0aca8     B4 FE 9F 5D |  if_ne	jmp	#LR__0881
0acac                 | LR__0883
0acac                 | ' if runheader(5)<>$7FFF_FFFF then 
0acac     78 00 00 FF 
0acb0     A8 E5 05 F1 | 	add	objptr, ##61864
0acb4     F2 1E 02 FB | 	rdlong	local01, objptr
0acb8     78 00 00 FF 
0acbc     A8 E5 85 F1 | 	sub	objptr, ##61864
0acc0     FF FF 3F FF 
0acc4     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0acc8     BC 00 90 AD |  if_e	jmp	#LR__0885
0accc                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,16384,spl_len)  
0accc     78 00 00 FF 
0acd0     B4 E5 05 F1 | 	add	objptr, ##61876
0acd4     F2 1E 02 FB | 	rdlong	local01, objptr
0acd8     78 00 00 FF 
0acdc     B4 E5 85 F1 | 	sub	objptr, ##61876
0ace0     01 1E 0E F2 | 	cmp	local01, #1 wz
0ace4     3C 00 90 5D |  if_ne	jmp	#LR__0884
0ace8     7A 00 00 FF 
0acec     58 E4 05 F1 | 	add	objptr, ##62552
0acf0     F2 14 02 FB | 	rdlong	arg02, objptr
0acf4     04 E4 85 F1 | 	sub	objptr, #4
0acf8     F2 1A 02 FB | 	rdlong	arg05, objptr
0acfc     07 12 06 F6 | 	mov	arg01, #7
0ad00     56 00 00 FF 
0ad04     44 16 06 F6 | 	mov	arg03, ##44100
0ad08     0E 18 C6 F9 | 	decod	arg04, #14
0ad0c     01 1C 66 F6 | 	neg	arg06, #1
0ad10     6E 00 00 FF 
0ad14     94 E5 85 F1 | 	sub	objptr, ##56724
0ad18     60 DB B0 FD | 	call	#_Audio093b_8_sc_spin2_play
0ad1c     0B 00 00 FF 
0ad20     C0 E4 85 F1 | 	sub	objptr, ##5824
0ad24                 | LR__0884
0ad24                 | '   print "Stopped at line ";runheader(0)
0ad24     00 12 06 F6 | 	mov	arg01, #0
0ad28     8C 38 B1 FD | 	call	#__system___getiolock_0423
0ad2c     FD 12 02 F6 | 	mov	arg01, result1
0ad30     80 DF B0 FD | 	call	#__system___lockmem
0ad34     43 01 00 FF 
0ad38     C7 14 06 F6 | 	mov	arg02, ##@LR__4589
0ad3c     00 12 06 F6 | 	mov	arg01, #0
0ad40     00 16 06 F6 | 	mov	arg03, #0
0ad44     60 EC B0 FD | 	call	#__system___basic_print_string
0ad48     78 00 00 FF 
0ad4c     94 E5 05 F1 | 	add	objptr, ##61844
0ad50     F2 14 02 FB | 	rdlong	arg02, objptr
0ad54     78 00 00 FF 
0ad58     94 E5 85 F1 | 	sub	objptr, ##61844
0ad5c     00 12 06 F6 | 	mov	arg01, #0
0ad60     00 16 06 F6 | 	mov	arg03, #0
0ad64     0A 18 06 F6 | 	mov	arg04, #10
0ad68     C0 EC B0 FD | 	call	#__system___basic_print_unsigned
0ad6c     00 12 06 F6 | 	mov	arg01, #0
0ad70     0A 14 06 F6 | 	mov	arg02, #10
0ad74     00 16 06 F6 | 	mov	arg03, #0
0ad78     D4 EB B0 FD | 	call	#__system___basic_print_char
0ad7c     00 12 06 F6 | 	mov	arg01, #0
0ad80     34 38 B1 FD | 	call	#__system___getiolock_0423
0ad84     FD 00 68 FC | 	wrlong	#0, result1
0ad88                 | LR__0885
0ad88     78 00 00 FF 
0ad8c     90 E5 05 F1 | 	add	objptr, ##61840
0ad90     F2 00 68 FC | 	wrlong	#0, objptr
0ad94     78 00 00 FF 
0ad98     90 E5 85 F1 | 	sub	objptr, ##61840
0ad9c                 | LR__0886
0ad9c     A7 F0 03 F6 | 	mov	ptra, fp
0ada0     B2 00 A0 FD | 	call	#popregs_
0ada4                 | _do_run_ret
0ada4     2D 00 64 FD | 	ret
0ada8                 | 
0ada8                 | ' 
0ada8                 | ' sub do_defenv
0ada8                 | _do_defenv
0ada8     05 4A 05 F6 | 	mov	COUNT_, #5
0adac     A8 00 A0 FD | 	call	#pushregs_
0adb0     84 F0 07 F1 | 	add	ptra, #132
0adb4     69 00 00 FF 
0adb8     54 E4 05 F1 | 	add	objptr, ##53844
0adbc     F2 1A 02 FB | 	rdlong	arg05, objptr
0adc0     0D 19 02 F6 | 	mov	arg04, arg05
0adc4     01 18 66 F0 | 	shl	arg04, #1
0adc8     0D 19 02 F1 | 	add	arg04, arg05
0adcc     02 18 66 F0 | 	shl	arg04, #2
0add0     03 00 00 FF 
0add4     04 E4 85 F1 | 	sub	objptr, ##1540
0add8     F2 18 02 F1 | 	add	arg04, objptr
0addc     0C 1B 02 FB | 	rdlong	arg05, arg04
0ade0     A7 1A 62 FC | 	wrlong	arg05, fp
0ade4                 | ' 
0ade4                 | ' numpar=compiledline(lineptr_e).result.uresult
0ade4                 | ' 
0ade4                 | ' 
0ade4                 | ' ' defenv channel, string - tries to load from /media/h a h2 file from PC-Softsynth
0ade4                 | ' ' defenv channel, l1,r1,l2,r2,l3,r3,l4,r4 - defines ADSR in Yamaha DX  style, except these are linear values
0ade4                 | ' ' Every 5 ms added 
0ade4                 | ' ' defsnd channel, a,d,s,r - defines ADSR as in SID 
0ade4                 | ' 
0ade4                 | ' 
0ade4                 | ' if numpar<2 then return
0ade4     02 1A 56 F2 | 	cmps	arg05, #2 wc
0ade8     66 00 00 FF 
0adec     50 E4 85 F1 | 	sub	objptr, ##52304
0adf0     40 0A 90 CD |  if_b	jmp	#LR__0917
0adf4                 | ' 
0adf4                 | '  
0adf4                 | ' if numpar=2 then
0adf4     A7 1A 02 FB | 	rdlong	arg05, fp
0adf8     02 1A 0E F2 | 	cmp	arg05, #2 wz
0adfc     AC 04 90 5D |  if_ne	jmp	#LR__0900
0ae00     B8 EA BF FD | 	call	#_pop
0ae04     FF 1A 02 F6 | 	mov	arg05, result3
0ae08     28 4E 05 F1 | 	add	fp, #40
0ae0c     A7 FA 61 FC | 	wrlong	result1, fp
0ae10     04 4E 05 F1 | 	add	fp, #4
0ae14     A7 FC 61 FC | 	wrlong	result2, fp
0ae18     04 4E 05 F1 | 	add	fp, #4
0ae1c     A7 1A 62 FC | 	wrlong	arg05, fp
0ae20                 | '   t1=pop()
0ae20                 | '   if t1.result_type=result_string2 then 
0ae20     30 4E 85 F1 | 	sub	fp, #48
0ae24     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0ae28     20 00 90 5D |  if_ne	jmp	#LR__0890
0ae2c     28 4E 05 F1 | 	add	fp, #40
0ae30     A7 12 02 FB | 	rdlong	arg01, fp
0ae34     28 4E 85 F1 | 	sub	fp, #40
0ae38     BC 1B B0 FD | 	call	#_convertstring
0ae3c     34 4E 05 F1 | 	add	fp, #52
0ae40     A7 FA 61 FC | 	wrlong	result1, fp
0ae44     34 4E 85 F1 | 	sub	fp, #52
0ae48     40 00 90 FD | 	jmp	#LR__0893
0ae4c                 | LR__0890
0ae4c     30 4E 05 F1 | 	add	fp, #48
0ae50     A7 1A 02 FB | 	rdlong	arg05, fp
0ae54     30 4E 85 F1 | 	sub	fp, #48
0ae58     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0ae5c     18 00 90 5D |  if_ne	jmp	#LR__0891
0ae60     28 4E 05 F1 | 	add	fp, #40
0ae64     A7 1A 02 FB | 	rdlong	arg05, fp
0ae68     0C 4E 05 F1 | 	add	fp, #12
0ae6c     A7 1A 62 FC | 	wrlong	arg05, fp
0ae70     34 4E 85 F1 | 	sub	fp, #52
0ae74     14 00 90 FD | 	jmp	#LR__0892
0ae78                 | LR__0891
0ae78     43 01 00 FF 
0ae7c     D8 1A 06 F6 | 	mov	arg05, ##@LR__4590
0ae80     34 4E 05 F1 | 	add	fp, #52
0ae84     A7 1A 62 FC | 	wrlong	arg05, fp
0ae88     34 4E 85 F1 | 	sub	fp, #52
0ae8c                 | LR__0892
0ae8c                 | LR__0893
0ae8c                 | ' 
0ae8c                 | '     
0ae8c                 | '   if s<>"" then 
0ae8c     34 4E 05 F1 | 	add	fp, #52
0ae90     A7 12 02 FB | 	rdlong	arg01, fp
0ae94     34 4E 85 F1 | 	sub	fp, #52
0ae98     43 01 00 FF 
0ae9c     D9 14 06 F6 | 	mov	arg02, ##@LR__4591
0aea0     38 DE B0 FD | 	call	#__system___string_cmp
0aea4     00 FA 0D F2 | 	cmp	result1, #0 wz
0aea8     9C 02 90 AD |  if_e	jmp	#LR__0898
0aeac     0C EA BF FD | 	call	#_pop
0aeb0     FF 1A 02 F6 | 	mov	arg05, result3
0aeb4     28 4E 05 F1 | 	add	fp, #40
0aeb8     A7 FA 61 FC | 	wrlong	result1, fp
0aebc     04 4E 05 F1 | 	add	fp, #4
0aec0     A7 FC 61 FC | 	wrlong	result2, fp
0aec4     04 4E 05 F1 | 	add	fp, #4
0aec8     A7 1A 62 FC | 	wrlong	arg05, fp
0aecc     08 4E 85 F1 | 	sub	fp, #8
0aed0     A7 12 02 F6 | 	mov	arg01, fp
0aed4     28 4E 85 F1 | 	sub	fp, #40
0aed8     C4 5E B0 FD | 	call	#_converttoint
0aedc     10 4E 05 F1 | 	add	fp, #16
0aee0     A7 FA 61 FC | 	wrlong	result1, fp
0aee4     10 4E 85 F1 | 	sub	fp, #16
0aee8                 | '     t1=pop()
0aee8                 | '     channel=converttoint(t1) 
0aee8                 | '     close #9 : open "/sd/media/h/"+s for input as #9
0aee8     09 12 06 F6 | 	mov	arg01, #9
0aeec     F8 2C B1 FD | 	call	#__system__close
0aef0     09 1E 06 F6 | 	mov	local01, #9
0aef4     43 01 00 FF 
0aef8     DA 12 06 F6 | 	mov	arg01, ##@LR__4592
0aefc     34 4E 05 F1 | 	add	fp, #52
0af00     A7 14 02 FB | 	rdlong	arg02, fp
0af04     34 4E 85 F1 | 	sub	fp, #52
0af08     04 DE B0 FD | 	call	#__system___string_concat
0af0c     FD 14 02 F6 | 	mov	arg02, result1
0af10     0F 13 02 F6 | 	mov	arg01, local01
0af14     00 16 06 F6 | 	mov	arg03, #0
0af18     9C E9 B0 FD | 	call	#__system___basic_open_string
0af1c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
0af20     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0af24     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
0af28     7A 00 00 FF 
0af2c     D4 E4 05 F1 | 	add	objptr, ##62676
0af30     F2 FA 61 FC | 	wrlong	result1, objptr
0af34                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0af34     7A 00 00 FF 
0af38     D4 E4 85 F1 | 	sub	objptr, ##62676
0af3c     B0 00 90 AD |  if_e	jmp	#LR__0894
0af40     00 12 06 F6 | 	mov	arg01, #0
0af44     70 36 B1 FD | 	call	#__system___getiolock_0423
0af48     FD 12 02 F6 | 	mov	arg01, result1
0af4c     64 DD B0 FD | 	call	#__system___lockmem
0af50     43 01 00 FF 
0af54     E7 14 06 F6 | 	mov	arg02, ##@LR__4593
0af58     00 12 06 F6 | 	mov	arg01, #0
0af5c     00 16 06 F6 | 	mov	arg03, #0
0af60     44 EA B0 FD | 	call	#__system___basic_print_string
0af64     7A 00 00 FF 
0af68     D4 E4 05 F1 | 	add	objptr, ##62676
0af6c     F2 14 02 FB | 	rdlong	arg02, objptr
0af70     7A 00 00 FF 
0af74     D4 E4 85 F1 | 	sub	objptr, ##62676
0af78     00 12 06 F6 | 	mov	arg01, #0
0af7c     00 16 06 F6 | 	mov	arg03, #0
0af80     0A 18 06 F6 | 	mov	arg04, #10
0af84     64 EA B0 FD | 	call	#__system___basic_print_integer
0af88     43 01 00 FF 
0af8c     F5 14 06 F6 | 	mov	arg02, ##@LR__4594
0af90     00 12 06 F6 | 	mov	arg01, #0
0af94     00 16 06 F6 | 	mov	arg03, #0
0af98     0C EA B0 FD | 	call	#__system___basic_print_string
0af9c     00 1E 06 F6 | 	mov	local01, #0
0afa0     7A 00 00 FF 
0afa4     D4 E4 05 F1 | 	add	objptr, ##62676
0afa8     F2 12 02 FB | 	rdlong	arg01, objptr
0afac     7A 00 00 FF 
0afb0     D4 E4 85 F1 | 	sub	objptr, ##62676
0afb4     FC 02 B1 FD | 	call	#__system___strerror
0afb8     FD 14 02 F6 | 	mov	arg02, result1
0afbc     0F 13 02 F6 | 	mov	arg01, local01
0afc0     00 16 06 F6 | 	mov	arg03, #0
0afc4     E0 E9 B0 FD | 	call	#__system___basic_print_string
0afc8     00 12 06 F6 | 	mov	arg01, #0
0afcc     0A 14 06 F6 | 	mov	arg02, #10
0afd0     00 16 06 F6 | 	mov	arg03, #0
0afd4     78 E9 B0 FD | 	call	#__system___basic_print_char
0afd8     00 12 06 F6 | 	mov	arg01, #0
0afdc     D8 35 B1 FD | 	call	#__system___getiolock_0423
0afe0     FD 00 68 FC | 	wrlong	#0, result1
0afe4     09 12 06 F6 | 	mov	arg01, #9
0afe8     FC 2B B1 FD | 	call	#__system__close
0afec     44 08 90 FD | 	jmp	#LR__0917
0aff0                 | LR__0894
0aff0                 | '     get #9,17,envbuf8(channel,0),256
0aff0     10 4E 05 F1 | 	add	fp, #16
0aff4     A7 1A 02 FB | 	rdlong	arg05, fp
0aff8     10 4E 85 F1 | 	sub	fp, #16
0affc     0D 17 02 F6 | 	mov	arg03, arg05
0b000     09 16 66 F0 | 	shl	arg03, #9
0b004     0D 17 02 F1 | 	add	arg03, arg05
0b008     2B 00 00 FF 
0b00c     CC E5 05 F1 | 	add	objptr, ##22476
0b010     F2 16 02 F1 | 	add	arg03, objptr
0b014     09 12 06 F6 | 	mov	arg01, #9
0b018     11 14 06 F6 | 	mov	arg02, #17
0b01c     00 19 06 F6 | 	mov	arg04, #256
0b020     01 1A 06 F6 | 	mov	arg05, #1
0b024     2B 00 00 FF 
0b028     CC E5 85 F1 | 	sub	objptr, ##22476
0b02c     88 EA B0 FD | 	call	#__system___basic_get
0b030                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0b030     04 4E 05 F1 | 	add	fp, #4
0b034     A7 FE 69 FC | 	wrlong	#255, fp
0b038     04 4E 85 F1 | 	sub	fp, #4
0b03c     2B 00 00 FF 
0b040     CC E5 05 F1 | 	add	objptr, ##22476
0b044     97 34 48 FB | 	callpa	#(@LR__0896-@LR__0895)>>2,fcache_load_ptr_
0b048                 | LR__0895
0b048     10 4E 05 F1 | 	add	fp, #16
0b04c     A7 1A 02 FB | 	rdlong	arg05, fp
0b050     0D 19 02 F6 | 	mov	arg04, arg05
0b054     08 18 66 F0 | 	shl	arg04, #8
0b058     0D 19 02 F1 | 	add	arg04, arg05
0b05c     01 18 66 F0 | 	shl	arg04, #1
0b060     F2 18 02 F1 | 	add	arg04, objptr
0b064     0C 4E 85 F1 | 	sub	fp, #12
0b068     A7 16 02 FB | 	rdlong	arg03, fp
0b06c     0B 15 02 F6 | 	mov	arg02, arg03
0b070     01 14 66 F0 | 	shl	arg02, #1
0b074     0C 15 02 F1 | 	add	arg02, arg04
0b078     0D 19 02 F6 | 	mov	arg04, arg05
0b07c     09 18 66 F0 | 	shl	arg04, #9
0b080     0D 19 02 F1 | 	add	arg04, arg05
0b084     F2 18 02 F1 | 	add	arg04, objptr
0b088     0C 17 02 F1 | 	add	arg03, arg04
0b08c     0B 1B C2 FA | 	rdbyte	arg05, arg03
0b090     00 1B 06 FA | 	mul	arg05, #256
0b094     0A 1B 52 FC | 	wrword	arg05, arg02
0b098     A7 1A 02 FB | 	rdlong	arg05, fp
0b09c     01 1A 86 F1 | 	sub	arg05, #1
0b0a0     A7 1A 62 FC | 	wrlong	arg05, fp
0b0a4     04 4E 85 F1 | 	sub	fp, #4
0b0a8     00 1A 56 F2 | 	cmps	arg05, #0 wc
0b0ac     98 FF 9F 3D |  if_ae	jmp	#LR__0895
0b0b0                 | LR__0896
0b0b0     2B 00 00 FF 
0b0b4     CC E5 85 F1 | 	sub	objptr, ##22476
0b0b8                 | '     close #9
0b0b8     09 12 06 F6 | 	mov	arg01, #9
0b0bc     28 2B B1 FD | 	call	#__system__close
0b0c0                 | '                                                                       for i=0 to 255: v.putpixel(i,288-envbuf(channel,i)/400,40) : next i
0b0c0     04 4E 05 F1 | 	add	fp, #4
0b0c4     A7 00 68 FC | 	wrlong	#0, fp
0b0c8                 | LR__0897
0b0c8     A7 1E 02 FB | 	rdlong	local01, fp
0b0cc     0F 13 02 F6 | 	mov	arg01, local01
0b0d0     0C 4E 05 F1 | 	add	fp, #12
0b0d4     A7 1A 02 FB | 	rdlong	arg05, fp
0b0d8     0D 19 02 F6 | 	mov	arg04, arg05
0b0dc     08 18 66 F0 | 	shl	arg04, #8
0b0e0     0D 19 02 F1 | 	add	arg04, arg05
0b0e4     01 18 66 F0 | 	shl	arg04, #1
0b0e8     2B 00 00 FF 
0b0ec     CC E5 05 F1 | 	add	objptr, ##22476
0b0f0     F2 18 02 F1 | 	add	arg04, objptr
0b0f4     01 1E 66 F0 | 	shl	local01, #1
0b0f8     0C 1F 02 F1 | 	add	local01, arg04
0b0fc     0F 1F E2 FA | 	rdword	local01, local01
0b100     0F 1F 52 F6 | 	abs	local01, local01 wc
0b104     90 1F 16 FD | 	qdiv	local01, #400
0b108     10 4E 85 F1 | 	sub	fp, #16
0b10c     2B 00 00 FF 
0b110     CC E5 85 F1 | 	sub	objptr, ##22476
0b114     20 15 06 F6 | 	mov	arg02, #288
0b118     28 16 06 F6 | 	mov	arg03, #40
0b11c     18 1E 62 FD | 	getqx	local01
0b120     0F 15 A2 F3 | 	sumnc	arg02, local01
0b124     3C BC B0 FD | 	call	#_hg010b_spin2_putpixel
0b128     04 4E 05 F1 | 	add	fp, #4
0b12c     A7 1E 02 FB | 	rdlong	local01, fp
0b130     01 1E 06 F1 | 	add	local01, #1
0b134     A7 1E 62 FC | 	wrlong	local01, fp
0b138     00 1F 56 F2 | 	cmps	local01, #256 wc
0b13c     88 FF 9F CD |  if_b	jmp	#LR__0897
0b140     04 4E 85 F1 | 	sub	fp, #4
0b144                 | '     return
0b144     EC 06 90 FD | 	jmp	#LR__0917
0b148                 | LR__0898
0b148     28 4E 05 F1 | 	add	fp, #40
0b14c     A7 12 02 F6 | 	mov	arg01, fp
0b150     28 4E 85 F1 | 	sub	fp, #40
0b154     48 5C B0 FD | 	call	#_converttoint
0b158     FD 1E 02 F6 | 	mov	local01, result1
0b15c     0C 4E 05 F1 | 	add	fp, #12
0b160     A7 1E 62 FC | 	wrlong	local01, fp
0b164     0C 4E 85 F1 | 	sub	fp, #12
0b168                 | '   
0b168                 | '   par=converttoint(t1)  : print par
0b168     00 12 06 F6 | 	mov	arg01, #0
0b16c     48 34 B1 FD | 	call	#__system___getiolock_0423
0b170     FD 12 02 F6 | 	mov	arg01, result1
0b174     3C DB B0 FD | 	call	#__system___lockmem
0b178     0C 4E 05 F1 | 	add	fp, #12
0b17c     A7 14 02 FB | 	rdlong	arg02, fp
0b180     0C 4E 85 F1 | 	sub	fp, #12
0b184     00 12 06 F6 | 	mov	arg01, #0
0b188     00 16 06 F6 | 	mov	arg03, #0
0b18c     0A 18 06 F6 | 	mov	arg04, #10
0b190     58 E8 B0 FD | 	call	#__system___basic_print_integer
0b194     00 12 06 F6 | 	mov	arg01, #0
0b198     0A 14 06 F6 | 	mov	arg02, #10
0b19c     00 16 06 F6 | 	mov	arg03, #0
0b1a0     AC E7 B0 FD | 	call	#__system___basic_print_char
0b1a4     00 12 06 F6 | 	mov	arg01, #0
0b1a8     0C 34 B1 FD | 	call	#__system___getiolock_0423
0b1ac     FD 00 68 FC | 	wrlong	#0, result1
0b1b0     08 E7 BF FD | 	call	#_pop
0b1b4     FF 1E 02 F6 | 	mov	local01, result3
0b1b8     28 4E 05 F1 | 	add	fp, #40
0b1bc     A7 FA 61 FC | 	wrlong	result1, fp
0b1c0     04 4E 05 F1 | 	add	fp, #4
0b1c4     A7 FC 61 FC | 	wrlong	result2, fp
0b1c8     04 4E 05 F1 | 	add	fp, #4
0b1cc     A7 1E 62 FC | 	wrlong	local01, fp
0b1d0     08 4E 85 F1 | 	sub	fp, #8
0b1d4     A7 12 02 F6 | 	mov	arg01, fp
0b1d8     28 4E 85 F1 | 	sub	fp, #40
0b1dc     C0 5B B0 FD | 	call	#_converttoint
0b1e0     10 4E 05 F1 | 	add	fp, #16
0b1e4     A7 FA 61 FC | 	wrlong	result1, fp
0b1e8                 | '   t1=pop()
0b1e8                 | '   channel=converttoint(t1)  
0b1e8                 | '   if par=0 then for i=0 to 1023: samplebuf(channel,i)=round(32600*sin(1.0/512*3.14159265359*i)) : next i
0b1e8     04 4E 85 F1 | 	sub	fp, #4
0b1ec     A7 1E 0A FB | 	rdlong	local01, fp wz
0b1f0     0C 4E 85 F1 | 	sub	fp, #12
0b1f4     3C 06 90 5D |  if_ne	jmp	#LR__0917
0b1f8     04 4E 05 F1 | 	add	fp, #4
0b1fc     A7 00 68 FC | 	wrlong	#0, fp
0b200     04 4E 85 F1 | 	sub	fp, #4
0b204                 | LR__0899
0b204     10 4E 05 F1 | 	add	fp, #16
0b208     A7 1E 02 FB | 	rdlong	local01, fp
0b20c     0B 1E 66 F0 | 	shl	local01, #11
0b210     0B 00 00 FF 
0b214     CC E5 05 F1 | 	add	objptr, ##6092
0b218     F2 1E 02 F1 | 	add	local01, objptr
0b21c     0C 4E 85 F1 | 	sub	fp, #12
0b220     A7 12 02 FB | 	rdlong	arg01, fp
0b224     09 21 02 F6 | 	mov	local02, arg01
0b228     01 20 66 F0 | 	shl	local02, #1
0b22c     0F 21 02 F1 | 	add	local02, local01
0b230     04 4E 85 F1 | 	sub	fp, #4
0b234     0B 00 00 FF 
0b238     CC E5 85 F1 | 	sub	objptr, ##6092
0b23c     09 13 52 F6 | 	abs	arg01, arg01 wc
0b240     1F 22 C6 C9 |  if_b	decod	local03, #31
0b244     00 22 06 36 |  if_ae	mov	local03, #0
0b248     50 01 B1 FD | 	call	#__system___float_fromuns
0b24c     11 FB 61 F5 | 	xor	result1, local03
0b250     FD 14 02 F6 | 	mov	arg02, result1
0b254     87 E4 1D FF 
0b258     DB 13 06 F6 | 	mov	arg01, ##1003032539
0b25c     40 05 B1 FD | 	call	#__system___float_mul
0b260     FD 12 02 F6 | 	mov	arg01, result1
0b264     74 0E B1 FD | 	call	#__system____builtin_sinf
0b268     FD 14 02 F6 | 	mov	arg02, result1
0b26c     58 7F 23 FF 
0b270     00 12 06 F6 | 	mov	arg01, ##1191096320
0b274     28 05 B1 FD | 	call	#__system___float_mul
0b278     FD 12 02 F6 | 	mov	arg01, result1
0b27c     01 14 06 F6 | 	mov	arg02, #1
0b280     E4 09 B1 FD | 	call	#__system___float_tointeger
0b284     10 FB 51 FC | 	wrword	result1, local02
0b288     04 4E 05 F1 | 	add	fp, #4
0b28c     A7 20 02 FB | 	rdlong	local02, fp
0b290     01 20 06 F1 | 	add	local02, #1
0b294     A7 20 62 FC | 	wrlong	local02, fp
0b298     04 4E 85 F1 | 	sub	fp, #4
0b29c     02 00 00 FF 
0b2a0     00 20 56 F2 | 	cmps	local02, ##1024 wc
0b2a4     5C FF 9F CD |  if_b	jmp	#LR__0899
0b2a8                 | '                                                                            '  for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0b2a8                 | '   return
0b2a8     88 05 90 FD | 	jmp	#LR__0917
0b2ac                 | LR__0900
0b2ac                 | ' for i=0 to 15 : harm(i)=0: next i  
0b2ac     04 4E 05 F1 | 	add	fp, #4
0b2b0     A7 00 68 FC | 	wrlong	#0, fp
0b2b4     97 16 48 FB | 	callpa	#(@LR__0902-@LR__0901)>>2,fcache_load_ptr_
0b2b8                 | LR__0901
0b2b8     A7 1E 02 FB | 	rdlong	local01, fp
0b2bc     02 1E 66 F0 | 	shl	local01, #2
0b2c0     34 4E 05 F1 | 	add	fp, #52
0b2c4     A7 1E 02 F1 | 	add	local01, fp
0b2c8     0F 01 68 FC | 	wrlong	#0, local01
0b2cc     34 4E 85 F1 | 	sub	fp, #52
0b2d0     A7 1E 02 FB | 	rdlong	local01, fp
0b2d4     01 1E 06 F1 | 	add	local01, #1
0b2d8     A7 1E 62 FC | 	wrlong	local01, fp
0b2dc     10 1E 56 F2 | 	cmps	local01, #16 wc
0b2e0     D4 FF 9F CD |  if_b	jmp	#LR__0901
0b2e4                 | LR__0902
0b2e4     04 4E 85 F1 | 	sub	fp, #4
0b2e8                 | ' for i=numpar to 2 step -1 
0b2e8     A7 1E 02 FB | 	rdlong	local01, fp
0b2ec     04 4E 05 F1 | 	add	fp, #4
0b2f0     A7 1E 62 FC | 	wrlong	local01, fp
0b2f4     04 4E 85 F1 | 	sub	fp, #4
0b2f8                 | LR__0903
0b2f8     C0 E5 BF FD | 	call	#_pop
0b2fc     28 4E 05 F1 | 	add	fp, #40
0b300     A7 FA 61 FC | 	wrlong	result1, fp
0b304     04 4E 05 F1 | 	add	fp, #4
0b308     A7 FC 61 FC | 	wrlong	result2, fp
0b30c     04 4E 05 F1 | 	add	fp, #4
0b310     A7 FE 61 FC | 	wrlong	result3, fp
0b314     2C 4E 85 F1 | 	sub	fp, #44
0b318     A7 1E 02 FB | 	rdlong	local01, fp
0b31c     02 1E 86 F1 | 	sub	local01, #2
0b320     02 1E 66 F0 | 	shl	local01, #2
0b324     34 4E 05 F1 | 	add	fp, #52
0b328     A7 1E 02 F1 | 	add	local01, fp
0b32c     10 4E 85 F1 | 	sub	fp, #16
0b330     A7 12 02 F6 | 	mov	arg01, fp
0b334     28 4E 85 F1 | 	sub	fp, #40
0b338     10 5B B0 FD | 	call	#_converttofloat
0b33c     0F FB 61 FC | 	wrlong	result1, local01
0b340     04 4E 05 F1 | 	add	fp, #4
0b344     A7 1E 02 FB | 	rdlong	local01, fp
0b348     01 1E 86 F1 | 	sub	local01, #1
0b34c     A7 1E 62 FC | 	wrlong	local01, fp
0b350     04 4E 85 F1 | 	sub	fp, #4
0b354     02 1E 56 F2 | 	cmps	local01, #2 wc
0b358     9C FF 9F 3D |  if_ae	jmp	#LR__0903
0b35c     5C E5 BF FD | 	call	#_pop
0b360     FF 1E 02 F6 | 	mov	local01, result3
0b364     28 4E 05 F1 | 	add	fp, #40
0b368     A7 FA 61 FC | 	wrlong	result1, fp
0b36c     04 4E 05 F1 | 	add	fp, #4
0b370     A7 FC 61 FC | 	wrlong	result2, fp
0b374     04 4E 05 F1 | 	add	fp, #4
0b378     A7 1E 62 FC | 	wrlong	local01, fp
0b37c     08 4E 85 F1 | 	sub	fp, #8
0b380     A7 12 02 F6 | 	mov	arg01, fp
0b384     28 4E 85 F1 | 	sub	fp, #40
0b388     14 5A B0 FD | 	call	#_converttoint
0b38c     FD 1E 02 F6 | 	mov	local01, result1
0b390     10 4E 05 F1 | 	add	fp, #16
0b394     A7 1E 62 FC | 	wrlong	local01, fp
0b398     10 4E 85 F1 | 	sub	fp, #16
0b39c                 | ' t1=pop()
0b39c                 | ' channel=converttoint(t1) : print channel
0b39c     00 12 06 F6 | 	mov	arg01, #0
0b3a0     14 32 B1 FD | 	call	#__system___getiolock_0423
0b3a4     FD 12 02 F6 | 	mov	arg01, result1
0b3a8     08 D9 B0 FD | 	call	#__system___lockmem
0b3ac     10 4E 05 F1 | 	add	fp, #16
0b3b0     A7 14 02 FB | 	rdlong	arg02, fp
0b3b4     10 4E 85 F1 | 	sub	fp, #16
0b3b8     00 12 06 F6 | 	mov	arg01, #0
0b3bc     00 16 06 F6 | 	mov	arg03, #0
0b3c0     0A 18 06 F6 | 	mov	arg04, #10
0b3c4     24 E6 B0 FD | 	call	#__system___basic_print_integer
0b3c8     00 12 06 F6 | 	mov	arg01, #0
0b3cc     0A 14 06 F6 | 	mov	arg02, #10
0b3d0     00 16 06 F6 | 	mov	arg03, #0
0b3d4     78 E5 B0 FD | 	call	#__system___basic_print_char
0b3d8     00 12 06 F6 | 	mov	arg01, #0
0b3dc     D8 31 B1 FD | 	call	#__system___getiolock_0423
0b3e0     FD 00 68 FC | 	wrlong	#0, result1
0b3e4                 | ' for j=0 to 1023: samplebuf(channel, i) =0 : next j
0b3e4     08 4E 05 F1 | 	add	fp, #8
0b3e8     02 00 80 FF 
0b3ec     A7 00 68 FC | 	wrlong	##1024, fp
0b3f0     08 4E 85 F1 | 	sub	fp, #8
0b3f4     0B 00 00 FF 
0b3f8     CC E5 05 F1 | 	add	objptr, ##6092
0b3fc     97 18 48 FB | 	callpa	#(@LR__0906-@LR__0904)>>2,fcache_load_ptr_
0b400                 | LR__0904
0b400     02 00 00 FF 
0b404     00 14 DC FC | 	rep	@LR__0907, ##1024
0b408                 | LR__0905
0b408     10 4E 05 F1 | 	add	fp, #16
0b40c     A7 20 02 FB | 	rdlong	local02, fp
0b410     0B 20 66 F0 | 	shl	local02, #11
0b414     F2 20 02 F1 | 	add	local02, objptr
0b418     0C 4E 85 F1 | 	sub	fp, #12
0b41c     A7 1E 02 FB | 	rdlong	local01, fp
0b420     04 4E 85 F1 | 	sub	fp, #4
0b424     01 1E 66 F0 | 	shl	local01, #1
0b428     10 1F 02 F1 | 	add	local01, local02
0b42c     0F 01 58 FC | 	wrword	#0, local01
0b430                 | LR__0906
0b430                 | LR__0907
0b430     0B 00 00 FF 
0b434     CC E5 85 F1 | 	sub	objptr, ##6092
0b438     1C 4E 05 F1 | 	add	fp, #28
0b43c     A7 00 68 FC | 	wrlong	#0, fp
0b440                 | ' max=0
0b440                 | ' if harm(0)<0 then
0b440     1C 4E 05 F1 | 	add	fp, #28
0b444     A7 12 02 FB | 	rdlong	arg01, fp
0b448     38 4E 85 F1 | 	sub	fp, #56
0b44c     00 14 06 F6 | 	mov	arg02, #0
0b450     01 16 06 F6 | 	mov	arg03, #1
0b454     7C 07 B1 FD | 	call	#__system___float_cmp
0b458     00 FA 55 F2 | 	cmps	result1, #0 wc
0b45c     04 01 90 3D |  if_ae	jmp	#LR__0910
0b460     38 4E 05 F1 | 	add	fp, #56
0b464     A7 FA 01 FB | 	rdlong	result1, fp
0b468     1F FA 05 F4 | 	bitl	result1, #31
0b46c     24 4E 85 F1 | 	sub	fp, #36
0b470     A7 FA 61 FC | 	wrlong	result1, fp
0b474     28 4E 05 F1 | 	add	fp, #40
0b478     A7 FA 01 FB | 	rdlong	result1, fp
0b47c     1F FA 05 F4 | 	bitl	result1, #31
0b480     24 4E 85 F1 | 	sub	fp, #36
0b484     A7 FA 61 FC | 	wrlong	result1, fp
0b488     20 4E 05 F1 | 	add	fp, #32
0b48c     00 C0 9F FF 
0b490     A7 00 68 FC | 	wrlong	##1065353216, fp
0b494     24 4E 85 F1 | 	sub	fp, #36
0b498     A7 1E 02 FB | 	rdlong	local01, fp
0b49c     28 4E 05 F1 | 	add	fp, #40
0b4a0     A7 1E 62 FC | 	wrlong	local01, fp
0b4a4     24 4E 85 F1 | 	sub	fp, #36
0b4a8     A7 1E 02 FB | 	rdlong	local01, fp
0b4ac     28 4E 05 F1 | 	add	fp, #40
0b4b0     A7 1E 62 FC | 	wrlong	local01, fp
0b4b4                 | '   harm(0)=1
0b4b4                 | '   harm(1)=even
0b4b4                 | '   harm(2)=odd
0b4b4                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0b4b4     3C 4E 85 F1 | 	sub	fp, #60
0b4b8     A7 06 68 FC | 	wrlong	#3, fp
0b4bc                 | LR__0908
0b4bc     A7 1A 02 FB | 	rdlong	arg05, fp
0b4c0     0D 25 02 F6 | 	mov	local04, arg05
0b4c4     02 24 66 F0 | 	shl	local04, #2
0b4c8     34 4E 05 F1 | 	add	fp, #52
0b4cc     A7 24 02 F1 | 	add	local04, fp
0b4d0     02 1A 86 F1 | 	sub	arg05, #2
0b4d4     02 1A 66 F0 | 	shl	arg05, #2
0b4d8     A7 1A 02 F1 | 	add	arg05, fp
0b4dc     0D 13 02 FB | 	rdlong	arg01, arg05
0b4e0     24 4E 85 F1 | 	sub	fp, #36
0b4e4     A7 14 02 FB | 	rdlong	arg02, fp
0b4e8     14 4E 85 F1 | 	sub	fp, #20
0b4ec     B0 02 B1 FD | 	call	#__system___float_mul
0b4f0     12 FB 61 FC | 	wrlong	result1, local04
0b4f4     04 4E 05 F1 | 	add	fp, #4
0b4f8     A7 26 02 FB | 	rdlong	local05, fp
0b4fc     02 26 06 F1 | 	add	local05, #2
0b500     A7 26 62 FC | 	wrlong	local05, fp
0b504     10 26 56 F2 | 	cmps	local05, #16 wc
0b508     B0 FF 9F CD |  if_b	jmp	#LR__0908
0b50c                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0b50c     A7 08 68 FC | 	wrlong	#4, fp
0b510                 | LR__0909
0b510     A7 26 02 FB | 	rdlong	local05, fp
0b514     13 25 02 F6 | 	mov	local04, local05
0b518     02 24 66 F0 | 	shl	local04, #2
0b51c     34 4E 05 F1 | 	add	fp, #52
0b520     A7 24 02 F1 | 	add	local04, fp
0b524     02 26 86 F1 | 	sub	local05, #2
0b528     02 26 66 F0 | 	shl	local05, #2
0b52c     A7 26 02 F1 | 	add	local05, fp
0b530     13 13 02 FB | 	rdlong	arg01, local05
0b534     20 4E 85 F1 | 	sub	fp, #32
0b538     A7 14 02 FB | 	rdlong	arg02, fp
0b53c     18 4E 85 F1 | 	sub	fp, #24
0b540     5C 02 B1 FD | 	call	#__system___float_mul
0b544     12 FB 61 FC | 	wrlong	result1, local04
0b548     04 4E 05 F1 | 	add	fp, #4
0b54c     A7 26 02 FB | 	rdlong	local05, fp
0b550     02 26 06 F1 | 	add	local05, #2
0b554     A7 26 62 FC | 	wrlong	local05, fp
0b558     0F 26 56 F2 | 	cmps	local05, #15 wc
0b55c     B0 FF 9F CD |  if_b	jmp	#LR__0909
0b560     04 4E 85 F1 | 	sub	fp, #4
0b564                 | LR__0910
0b564                 | ' if harm(0)>=0 then ' synthesize with harmonics
0b564     38 4E 05 F1 | 	add	fp, #56
0b568     A7 12 02 FB | 	rdlong	arg01, fp
0b56c     38 4E 85 F1 | 	sub	fp, #56
0b570     00 14 06 F6 | 	mov	arg02, #0
0b574     01 16 66 F6 | 	neg	arg03, #1
0b578     58 06 B1 FD | 	call	#__system___float_cmp
0b57c     00 FA 55 F2 | 	cmps	result1, #0 wc
0b580     B0 02 90 CD |  if_b	jmp	#LR__0916
0b584                 | '   for i=0 to 1023
0b584     04 4E 05 F1 | 	add	fp, #4
0b588     A7 00 68 FC | 	wrlong	#0, fp
0b58c     04 4E 85 F1 | 	sub	fp, #4
0b590                 | LR__0911
0b590     20 4E 05 F1 | 	add	fp, #32
0b594     A7 00 68 FC | 	wrlong	#0, fp
0b598                 | '     spl=0
0b598                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
0b598     18 4E 85 F1 | 	sub	fp, #24
0b59c     A7 00 68 FC | 	wrlong	#0, fp
0b5a0                 | LR__0912
0b5a0     A7 24 02 FB | 	rdlong	local04, fp
0b5a4     02 24 66 F0 | 	shl	local04, #2
0b5a8     30 4E 05 F1 | 	add	fp, #48
0b5ac     A7 24 02 F1 | 	add	local04, fp
0b5b0     12 27 02 FB | 	rdlong	local05, local04
0b5b4     87 E4 1D FF 
0b5b8     DB 25 06 F6 | 	mov	local04, ##1003032539
0b5bc     34 4E 85 F1 | 	sub	fp, #52
0b5c0     A7 12 02 FB | 	rdlong	arg01, fp
0b5c4     04 4E 85 F1 | 	sub	fp, #4
0b5c8     09 13 52 F6 | 	abs	arg01, arg01 wc
0b5cc     1F 22 C6 C9 |  if_b	decod	local03, #31
0b5d0     00 22 06 36 |  if_ae	mov	local03, #0
0b5d4     C4 FD B0 FD | 	call	#__system___float_fromuns
0b5d8     11 FB 61 F5 | 	xor	result1, local03
0b5dc     FD 14 02 F6 | 	mov	arg02, result1
0b5e0     12 13 02 F6 | 	mov	arg01, local04
0b5e4     B8 01 B1 FD | 	call	#__system___float_mul
0b5e8     FD 24 02 F6 | 	mov	local04, result1
0b5ec     08 4E 05 F1 | 	add	fp, #8
0b5f0     A7 12 02 FB | 	rdlong	arg01, fp
0b5f4     08 4E 85 F1 | 	sub	fp, #8
0b5f8     01 12 06 F1 | 	add	arg01, #1
0b5fc     09 13 52 F6 | 	abs	arg01, arg01 wc
0b600     1F 22 C6 C9 |  if_b	decod	local03, #31
0b604     00 22 06 36 |  if_ae	mov	local03, #0
0b608     90 FD B0 FD | 	call	#__system___float_fromuns
0b60c     11 FB 61 F5 | 	xor	result1, local03
0b610     FD 14 02 F6 | 	mov	arg02, result1
0b614     12 13 02 F6 | 	mov	arg01, local04
0b618     84 01 B1 FD | 	call	#__system___float_mul
0b61c     FD 12 02 F6 | 	mov	arg01, result1
0b620     B8 0A B1 FD | 	call	#__system____builtin_sinf
0b624     FD 14 02 F6 | 	mov	arg02, result1
0b628     13 13 02 F6 | 	mov	arg01, local05
0b62c     70 01 B1 FD | 	call	#__system___float_mul
0b630     FD 14 02 F6 | 	mov	arg02, result1
0b634     20 4E 05 F1 | 	add	fp, #32
0b638     A7 12 02 FB | 	rdlong	arg01, fp
0b63c     20 4E 85 F1 | 	sub	fp, #32
0b640     8C FD B0 FD | 	call	#__system___float_add
0b644     20 4E 05 F1 | 	add	fp, #32
0b648     A7 FA 61 FC | 	wrlong	result1, fp
0b64c     18 4E 85 F1 | 	sub	fp, #24
0b650     A7 16 02 FB | 	rdlong	arg03, fp
0b654     01 16 06 F1 | 	add	arg03, #1
0b658     A7 16 62 FC | 	wrlong	arg03, fp
0b65c     10 16 56 F2 | 	cmps	arg03, #16 wc
0b660     3C FF 9F CD |  if_b	jmp	#LR__0912
0b664                 | '     if abs(spl)>max then max=abs(spl)  ': print max 
0b664     18 4E 05 F1 | 	add	fp, #24
0b668     A7 12 02 FB | 	rdlong	arg01, fp
0b66c     1F 12 06 F4 | 	bitl	arg01, #31
0b670     04 4E 85 F1 | 	sub	fp, #4
0b674     A7 14 02 FB | 	rdlong	arg02, fp
0b678     1C 4E 85 F1 | 	sub	fp, #28
0b67c     01 16 66 F6 | 	neg	arg03, #1
0b680     50 05 B1 FD | 	call	#__system___float_cmp
0b684     01 FA 55 F2 | 	cmps	result1, #1 wc
0b688     18 00 90 CD |  if_b	jmp	#LR__0913
0b68c     20 4E 05 F1 | 	add	fp, #32
0b690     A7 FA 01 FB | 	rdlong	result1, fp
0b694     1F FA 05 F4 | 	bitl	result1, #31
0b698     04 4E 85 F1 | 	sub	fp, #4
0b69c     A7 FA 61 FC | 	wrlong	result1, fp
0b6a0     1C 4E 85 F1 | 	sub	fp, #28
0b6a4                 | LR__0913
0b6a4     04 4E 05 F1 | 	add	fp, #4
0b6a8     A7 26 02 FB | 	rdlong	local05, fp
0b6ac     01 26 06 F1 | 	add	local05, #1
0b6b0     A7 26 62 FC | 	wrlong	local05, fp
0b6b4     04 4E 85 F1 | 	sub	fp, #4
0b6b8     02 00 00 FF 
0b6bc     00 26 56 F2 | 	cmps	local05, ##1024 wc
0b6c0     CC FE 9F CD |  if_b	jmp	#LR__0911
0b6c4                 | '   for i=0 to 1023
0b6c4     04 4E 05 F1 | 	add	fp, #4
0b6c8     A7 00 68 FC | 	wrlong	#0, fp
0b6cc     04 4E 85 F1 | 	sub	fp, #4
0b6d0                 | LR__0914
0b6d0     20 4E 05 F1 | 	add	fp, #32
0b6d4     A7 00 68 FC | 	wrlong	#0, fp
0b6d8                 | '     spl=0
0b6d8                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j ':' print spl
0b6d8     18 4E 85 F1 | 	sub	fp, #24
0b6dc     A7 00 68 FC | 	wrlong	#0, fp
0b6e0                 | LR__0915
0b6e0     A7 26 02 FB | 	rdlong	local05, fp
0b6e4     02 26 66 F0 | 	shl	local05, #2
0b6e8     30 4E 05 F1 | 	add	fp, #48
0b6ec     A7 26 02 F1 | 	add	local05, fp
0b6f0     13 27 02 FB | 	rdlong	local05, local05
0b6f4     1C 4E 85 F1 | 	sub	fp, #28
0b6f8     A7 14 02 FB | 	rdlong	arg02, fp
0b6fc     1C 4E 85 F1 | 	sub	fp, #28
0b700     58 7F 23 FF 
0b704     00 12 06 F6 | 	mov	arg01, ##1191096320
0b708     98 02 B1 FD | 	call	#__system___float_div
0b70c     FD 14 02 F6 | 	mov	arg02, result1
0b710     13 13 02 F6 | 	mov	arg01, local05
0b714     88 00 B1 FD | 	call	#__system___float_mul
0b718     FD 26 02 F6 | 	mov	local05, result1
0b71c     87 E4 1D FF 
0b720     DB 25 06 F6 | 	mov	local04, ##1003032539
0b724     04 4E 05 F1 | 	add	fp, #4
0b728     A7 12 02 FB | 	rdlong	arg01, fp
0b72c     04 4E 85 F1 | 	sub	fp, #4
0b730     09 13 52 F6 | 	abs	arg01, arg01 wc
0b734     1F 22 C6 C9 |  if_b	decod	local03, #31
0b738     00 22 06 36 |  if_ae	mov	local03, #0
0b73c     5C FC B0 FD | 	call	#__system___float_fromuns
0b740     11 FB 61 F5 | 	xor	result1, local03
0b744     FD 14 02 F6 | 	mov	arg02, result1
0b748     12 13 02 F6 | 	mov	arg01, local04
0b74c     50 00 B1 FD | 	call	#__system___float_mul
0b750     FD 24 02 F6 | 	mov	local04, result1
0b754     08 4E 05 F1 | 	add	fp, #8
0b758     A7 12 02 FB | 	rdlong	arg01, fp
0b75c     08 4E 85 F1 | 	sub	fp, #8
0b760     01 12 06 F1 | 	add	arg01, #1
0b764     09 13 52 F6 | 	abs	arg01, arg01 wc
0b768     1F 22 C6 C9 |  if_b	decod	local03, #31
0b76c     00 22 06 36 |  if_ae	mov	local03, #0
0b770     28 FC B0 FD | 	call	#__system___float_fromuns
0b774     11 FB 61 F5 | 	xor	result1, local03
0b778     FD 14 02 F6 | 	mov	arg02, result1
0b77c     12 13 02 F6 | 	mov	arg01, local04
0b780     1C 00 B1 FD | 	call	#__system___float_mul
0b784     FD 12 02 F6 | 	mov	arg01, result1
0b788     50 09 B1 FD | 	call	#__system____builtin_sinf
0b78c     FD 14 02 F6 | 	mov	arg02, result1
0b790     13 13 02 F6 | 	mov	arg01, local05
0b794     08 00 B1 FD | 	call	#__system___float_mul
0b798     FD 14 02 F6 | 	mov	arg02, result1
0b79c     20 4E 05 F1 | 	add	fp, #32
0b7a0     A7 12 02 FB | 	rdlong	arg01, fp
0b7a4     20 4E 85 F1 | 	sub	fp, #32
0b7a8     24 FC B0 FD | 	call	#__system___float_add
0b7ac     20 4E 05 F1 | 	add	fp, #32
0b7b0     A7 FA 61 FC | 	wrlong	result1, fp
0b7b4     18 4E 85 F1 | 	sub	fp, #24
0b7b8     A7 26 02 FB | 	rdlong	local05, fp
0b7bc     01 26 06 F1 | 	add	local05, #1
0b7c0     A7 26 62 FC | 	wrlong	local05, fp
0b7c4     10 26 56 F2 | 	cmps	local05, #16 wc
0b7c8     14 FF 9F CD |  if_b	jmp	#LR__0915
0b7cc     08 4E 05 F1 | 	add	fp, #8
0b7d0     A7 26 02 FB | 	rdlong	local05, fp
0b7d4     0B 26 66 F0 | 	shl	local05, #11
0b7d8     0B 00 00 FF 
0b7dc     CC E5 05 F1 | 	add	objptr, ##6092
0b7e0     F2 26 02 F1 | 	add	local05, objptr
0b7e4     0C 4E 85 F1 | 	sub	fp, #12
0b7e8     A7 20 02 FB | 	rdlong	local02, fp
0b7ec     01 20 66 F0 | 	shl	local02, #1
0b7f0     13 21 02 F1 | 	add	local02, local05
0b7f4     1C 4E 05 F1 | 	add	fp, #28
0b7f8     A7 12 02 FB | 	rdlong	arg01, fp
0b7fc     20 4E 85 F1 | 	sub	fp, #32
0b800     0B 00 00 FF 
0b804     CC E5 85 F1 | 	sub	objptr, ##6092
0b808     01 14 06 F6 | 	mov	arg02, #1
0b80c     58 04 B1 FD | 	call	#__system___float_tointeger
0b810     10 FB 51 FC | 	wrword	result1, local02
0b814     04 4E 05 F1 | 	add	fp, #4
0b818     A7 26 02 FB | 	rdlong	local05, fp
0b81c     01 26 06 F1 | 	add	local05, #1
0b820     A7 26 62 FC | 	wrlong	local05, fp
0b824     04 4E 85 F1 | 	sub	fp, #4
0b828     02 00 00 FF 
0b82c     00 26 56 F2 | 	cmps	local05, ##1024 wc
0b830     9C FE 9F CD |  if_b	jmp	#LR__0914
0b834                 | LR__0916
0b834                 | LR__0917
0b834     A7 F0 03 F6 | 	mov	ptra, fp
0b838     B2 00 A0 FD | 	call	#popregs_
0b83c                 | _do_defenv_ret
0b83c     2D 00 64 FD | 	ret
0b840                 | 
0b840                 | ' 
0b840                 | ' sub do_defsnd
0b840                 | _do_defsnd
0b840     05 4A 05 F6 | 	mov	COUNT_, #5
0b844     A8 00 A0 FD | 	call	#pushregs_
0b848     84 F0 07 F1 | 	add	ptra, #132
0b84c     69 00 00 FF 
0b850     54 E4 05 F1 | 	add	objptr, ##53844
0b854     F2 1A 02 FB | 	rdlong	arg05, objptr
0b858     0D 19 02 F6 | 	mov	arg04, arg05
0b85c     01 18 66 F0 | 	shl	arg04, #1
0b860     0D 19 02 F1 | 	add	arg04, arg05
0b864     02 18 66 F0 | 	shl	arg04, #2
0b868     03 00 00 FF 
0b86c     04 E4 85 F1 | 	sub	objptr, ##1540
0b870     F2 18 02 F1 | 	add	arg04, objptr
0b874     0C 1B 02 FB | 	rdlong	arg05, arg04
0b878     A7 1A 62 FC | 	wrlong	arg05, fp
0b87c                 | ' 
0b87c                 | ' numpar=compiledline(lineptr_e).result.uresult
0b87c                 | ' 
0b87c                 | ' 
0b87c                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
0b87c                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
0b87c                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
0b87c                 | ' ' defsnd channel, oneint - defines waveshape as in SID and 0=sinewave
0b87c                 | ' 
0b87c                 | ' if numpar<2 then return
0b87c     02 1A 56 F2 | 	cmps	arg05, #2 wc
0b880     66 00 00 FF 
0b884     50 E4 85 F1 | 	sub	objptr, ##52304
0b888     2C 09 90 CD |  if_b	jmp	#LR__0944
0b88c                 | ' 
0b88c                 | '  
0b88c                 | ' if numpar=2 then
0b88c     A7 1A 02 FB | 	rdlong	arg05, fp
0b890     02 1A 0E F2 | 	cmp	arg05, #2 wz
0b894     98 03 90 5D |  if_ne	jmp	#LR__0927
0b898     20 E0 BF FD | 	call	#_pop
0b89c     FF 1A 02 F6 | 	mov	arg05, result3
0b8a0     28 4E 05 F1 | 	add	fp, #40
0b8a4     A7 FA 61 FC | 	wrlong	result1, fp
0b8a8     04 4E 05 F1 | 	add	fp, #4
0b8ac     A7 FC 61 FC | 	wrlong	result2, fp
0b8b0     04 4E 05 F1 | 	add	fp, #4
0b8b4     A7 1A 62 FC | 	wrlong	arg05, fp
0b8b8                 | '   t1=pop()
0b8b8                 | '   if t1.result_type=result_string2 then 
0b8b8     30 4E 85 F1 | 	sub	fp, #48
0b8bc     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0b8c0     20 00 90 5D |  if_ne	jmp	#LR__0920
0b8c4     28 4E 05 F1 | 	add	fp, #40
0b8c8     A7 12 02 FB | 	rdlong	arg01, fp
0b8cc     28 4E 85 F1 | 	sub	fp, #40
0b8d0     24 11 B0 FD | 	call	#_convertstring
0b8d4     34 4E 05 F1 | 	add	fp, #52
0b8d8     A7 FA 61 FC | 	wrlong	result1, fp
0b8dc     34 4E 85 F1 | 	sub	fp, #52
0b8e0     40 00 90 FD | 	jmp	#LR__0923
0b8e4                 | LR__0920
0b8e4     30 4E 05 F1 | 	add	fp, #48
0b8e8     A7 1A 02 FB | 	rdlong	arg05, fp
0b8ec     30 4E 85 F1 | 	sub	fp, #48
0b8f0     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0b8f4     18 00 90 5D |  if_ne	jmp	#LR__0921
0b8f8     28 4E 05 F1 | 	add	fp, #40
0b8fc     A7 1A 02 FB | 	rdlong	arg05, fp
0b900     0C 4E 05 F1 | 	add	fp, #12
0b904     A7 1A 62 FC | 	wrlong	arg05, fp
0b908     34 4E 85 F1 | 	sub	fp, #52
0b90c     14 00 90 FD | 	jmp	#LR__0922
0b910                 | LR__0921
0b910     43 01 00 FF 
0b914     F8 1A 06 F6 | 	mov	arg05, ##@LR__4595
0b918     34 4E 05 F1 | 	add	fp, #52
0b91c     A7 1A 62 FC | 	wrlong	arg05, fp
0b920     34 4E 85 F1 | 	sub	fp, #52
0b924                 | LR__0922
0b924                 | LR__0923
0b924                 | ' 
0b924                 | '     
0b924                 | '   if s<>"" then 
0b924     34 4E 05 F1 | 	add	fp, #52
0b928     A7 12 02 FB | 	rdlong	arg01, fp
0b92c     34 4E 85 F1 | 	sub	fp, #52
0b930     43 01 00 FF 
0b934     F9 14 06 F6 | 	mov	arg02, ##@LR__4596
0b938     A0 D3 B0 FD | 	call	#__system___string_cmp
0b93c     00 FA 0D F2 | 	cmp	result1, #0 wz
0b940     88 01 90 AD |  if_e	jmp	#LR__0925
0b944     74 DF BF FD | 	call	#_pop
0b948     FF 1A 02 F6 | 	mov	arg05, result3
0b94c     28 4E 05 F1 | 	add	fp, #40
0b950     A7 FA 61 FC | 	wrlong	result1, fp
0b954     04 4E 05 F1 | 	add	fp, #4
0b958     A7 FC 61 FC | 	wrlong	result2, fp
0b95c     04 4E 05 F1 | 	add	fp, #4
0b960     A7 1A 62 FC | 	wrlong	arg05, fp
0b964     08 4E 85 F1 | 	sub	fp, #8
0b968     A7 12 02 F6 | 	mov	arg01, fp
0b96c     28 4E 85 F1 | 	sub	fp, #40
0b970     2C 54 B0 FD | 	call	#_converttoint
0b974     10 4E 05 F1 | 	add	fp, #16
0b978     A7 FA 61 FC | 	wrlong	result1, fp
0b97c     10 4E 85 F1 | 	sub	fp, #16
0b980                 | '     t1=pop()
0b980                 | '     channel=converttoint(t1) 
0b980                 | '     close #9 : open "/sd/media/s/"+s for input as #9
0b980     09 12 06 F6 | 	mov	arg01, #9
0b984     60 22 B1 FD | 	call	#__system__close
0b988     09 1E 06 F6 | 	mov	local01, #9
0b98c     43 01 00 FF 
0b990     FA 12 06 F6 | 	mov	arg01, ##@LR__4597
0b994     34 4E 05 F1 | 	add	fp, #52
0b998     A7 14 02 FB | 	rdlong	arg02, fp
0b99c     34 4E 85 F1 | 	sub	fp, #52
0b9a0     6C D3 B0 FD | 	call	#__system___string_concat
0b9a4     FD 14 02 F6 | 	mov	arg02, result1
0b9a8     0F 13 02 F6 | 	mov	arg01, local01
0b9ac     00 16 06 F6 | 	mov	arg03, #0
0b9b0     04 DF B0 FD | 	call	#__system___basic_open_string
0b9b4     20 E8 05 F1 | 	add	ptr___system__dat__, #32
0b9b8     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0b9bc     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
0b9c0     7A 00 00 FF 
0b9c4     D4 E4 05 F1 | 	add	objptr, ##62676
0b9c8     F2 FA 61 FC | 	wrlong	result1, objptr
0b9cc                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0b9cc     7A 00 00 FF 
0b9d0     D4 E4 85 F1 | 	sub	objptr, ##62676
0b9d4     B0 00 90 AD |  if_e	jmp	#LR__0924
0b9d8     00 12 06 F6 | 	mov	arg01, #0
0b9dc     D8 2B B1 FD | 	call	#__system___getiolock_0423
0b9e0     FD 12 02 F6 | 	mov	arg01, result1
0b9e4     CC D2 B0 FD | 	call	#__system___lockmem
0b9e8     43 01 00 FF 
0b9ec     07 15 06 F6 | 	mov	arg02, ##@LR__4598
0b9f0     00 12 06 F6 | 	mov	arg01, #0
0b9f4     00 16 06 F6 | 	mov	arg03, #0
0b9f8     AC DF B0 FD | 	call	#__system___basic_print_string
0b9fc     7A 00 00 FF 
0ba00     D4 E4 05 F1 | 	add	objptr, ##62676
0ba04     F2 14 02 FB | 	rdlong	arg02, objptr
0ba08     7A 00 00 FF 
0ba0c     D4 E4 85 F1 | 	sub	objptr, ##62676
0ba10     00 12 06 F6 | 	mov	arg01, #0
0ba14     00 16 06 F6 | 	mov	arg03, #0
0ba18     0A 18 06 F6 | 	mov	arg04, #10
0ba1c     CC DF B0 FD | 	call	#__system___basic_print_integer
0ba20     43 01 00 FF 
0ba24     15 15 06 F6 | 	mov	arg02, ##@LR__4599
0ba28     00 12 06 F6 | 	mov	arg01, #0
0ba2c     00 16 06 F6 | 	mov	arg03, #0
0ba30     74 DF B0 FD | 	call	#__system___basic_print_string
0ba34     00 1E 06 F6 | 	mov	local01, #0
0ba38     7A 00 00 FF 
0ba3c     D4 E4 05 F1 | 	add	objptr, ##62676
0ba40     F2 12 02 FB | 	rdlong	arg01, objptr
0ba44     7A 00 00 FF 
0ba48     D4 E4 85 F1 | 	sub	objptr, ##62676
0ba4c     64 F8 B0 FD | 	call	#__system___strerror
0ba50     FD 14 02 F6 | 	mov	arg02, result1
0ba54     0F 13 02 F6 | 	mov	arg01, local01
0ba58     00 16 06 F6 | 	mov	arg03, #0
0ba5c     48 DF B0 FD | 	call	#__system___basic_print_string
0ba60     00 12 06 F6 | 	mov	arg01, #0
0ba64     0A 14 06 F6 | 	mov	arg02, #10
0ba68     00 16 06 F6 | 	mov	arg03, #0
0ba6c     E0 DE B0 FD | 	call	#__system___basic_print_char
0ba70     00 12 06 F6 | 	mov	arg01, #0
0ba74     40 2B B1 FD | 	call	#__system___getiolock_0423
0ba78     FD 00 68 FC | 	wrlong	#0, result1
0ba7c     09 12 06 F6 | 	mov	arg01, #9
0ba80     64 21 B1 FD | 	call	#__system__close
0ba84     30 07 90 FD | 	jmp	#LR__0944
0ba88                 | LR__0924
0ba88                 | '     get #9,17,samplebuf(channel,0),1024
0ba88     10 4E 05 F1 | 	add	fp, #16
0ba8c     A7 16 02 FB | 	rdlong	arg03, fp
0ba90     10 4E 85 F1 | 	sub	fp, #16
0ba94     0B 16 66 F0 | 	shl	arg03, #11
0ba98     0B 00 00 FF 
0ba9c     CC E5 05 F1 | 	add	objptr, ##6092
0baa0     F2 16 02 F1 | 	add	arg03, objptr
0baa4     09 12 06 F6 | 	mov	arg01, #9
0baa8     11 14 06 F6 | 	mov	arg02, #17
0baac     0A 18 C6 F9 | 	decod	arg04, #10
0bab0     02 1A 06 F6 | 	mov	arg05, #2
0bab4     0B 00 00 FF 
0bab8     CC E5 85 F1 | 	sub	objptr, ##6092
0babc     F8 DF B0 FD | 	call	#__system___basic_get
0bac0                 | '     close #9
0bac0     09 12 06 F6 | 	mov	arg01, #9
0bac4     20 21 B1 FD | 	call	#__system__close
0bac8                 | '                                                                       '  for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0bac8                 | '     return
0bac8     EC 06 90 FD | 	jmp	#LR__0944
0bacc                 | LR__0925
0bacc     28 4E 05 F1 | 	add	fp, #40
0bad0     A7 12 02 F6 | 	mov	arg01, fp
0bad4     28 4E 85 F1 | 	sub	fp, #40
0bad8     C4 52 B0 FD | 	call	#_converttoint
0badc     FD 1E 02 F6 | 	mov	local01, result1
0bae0     0C 4E 05 F1 | 	add	fp, #12
0bae4     A7 1E 62 FC | 	wrlong	local01, fp
0bae8     0C 4E 85 F1 | 	sub	fp, #12
0baec                 | '   
0baec                 | '   par=converttoint(t1)  : print par
0baec     00 12 06 F6 | 	mov	arg01, #0
0baf0     C4 2A B1 FD | 	call	#__system___getiolock_0423
0baf4     FD 12 02 F6 | 	mov	arg01, result1
0baf8     B8 D1 B0 FD | 	call	#__system___lockmem
0bafc     0C 4E 05 F1 | 	add	fp, #12
0bb00     A7 14 02 FB | 	rdlong	arg02, fp
0bb04     0C 4E 85 F1 | 	sub	fp, #12
0bb08     00 12 06 F6 | 	mov	arg01, #0
0bb0c     00 16 06 F6 | 	mov	arg03, #0
0bb10     0A 18 06 F6 | 	mov	arg04, #10
0bb14     D4 DE B0 FD | 	call	#__system___basic_print_integer
0bb18     00 12 06 F6 | 	mov	arg01, #0
0bb1c     0A 14 06 F6 | 	mov	arg02, #10
0bb20     00 16 06 F6 | 	mov	arg03, #0
0bb24     28 DE B0 FD | 	call	#__system___basic_print_char
0bb28     00 12 06 F6 | 	mov	arg01, #0
0bb2c     88 2A B1 FD | 	call	#__system___getiolock_0423
0bb30     FD 00 68 FC | 	wrlong	#0, result1
0bb34     84 DD BF FD | 	call	#_pop
0bb38     FF 1E 02 F6 | 	mov	local01, result3
0bb3c     28 4E 05 F1 | 	add	fp, #40
0bb40     A7 FA 61 FC | 	wrlong	result1, fp
0bb44     04 4E 05 F1 | 	add	fp, #4
0bb48     A7 FC 61 FC | 	wrlong	result2, fp
0bb4c     04 4E 05 F1 | 	add	fp, #4
0bb50     A7 1E 62 FC | 	wrlong	local01, fp
0bb54     08 4E 85 F1 | 	sub	fp, #8
0bb58     A7 12 02 F6 | 	mov	arg01, fp
0bb5c     28 4E 85 F1 | 	sub	fp, #40
0bb60     3C 52 B0 FD | 	call	#_converttoint
0bb64     10 4E 05 F1 | 	add	fp, #16
0bb68     A7 FA 61 FC | 	wrlong	result1, fp
0bb6c                 | '   t1=pop()
0bb6c                 | '   channel=converttoint(t1)  
0bb6c                 | '   if par=0 then for i=0 to 1023: samplebuf(channel,i)=round(32600*sin(1.0/512*3.14159265359*i)) : next i
0bb6c     04 4E 85 F1 | 	sub	fp, #4
0bb70     A7 1E 0A FB | 	rdlong	local01, fp wz
0bb74     0C 4E 85 F1 | 	sub	fp, #12
0bb78     3C 06 90 5D |  if_ne	jmp	#LR__0944
0bb7c     04 4E 05 F1 | 	add	fp, #4
0bb80     A7 00 68 FC | 	wrlong	#0, fp
0bb84     04 4E 85 F1 | 	sub	fp, #4
0bb88                 | LR__0926
0bb88     10 4E 05 F1 | 	add	fp, #16
0bb8c     A7 1E 02 FB | 	rdlong	local01, fp
0bb90     0B 1E 66 F0 | 	shl	local01, #11
0bb94     0B 00 00 FF 
0bb98     CC E5 05 F1 | 	add	objptr, ##6092
0bb9c     F2 1E 02 F1 | 	add	local01, objptr
0bba0     0C 4E 85 F1 | 	sub	fp, #12
0bba4     A7 12 02 FB | 	rdlong	arg01, fp
0bba8     09 21 02 F6 | 	mov	local02, arg01
0bbac     01 20 66 F0 | 	shl	local02, #1
0bbb0     0F 21 02 F1 | 	add	local02, local01
0bbb4     04 4E 85 F1 | 	sub	fp, #4
0bbb8     0B 00 00 FF 
0bbbc     CC E5 85 F1 | 	sub	objptr, ##6092
0bbc0     09 13 52 F6 | 	abs	arg01, arg01 wc
0bbc4     1F 22 C6 C9 |  if_b	decod	local03, #31
0bbc8     00 22 06 36 |  if_ae	mov	local03, #0
0bbcc     CC F7 B0 FD | 	call	#__system___float_fromuns
0bbd0     11 FB 61 F5 | 	xor	result1, local03
0bbd4     FD 14 02 F6 | 	mov	arg02, result1
0bbd8     87 E4 1D FF 
0bbdc     DB 13 06 F6 | 	mov	arg01, ##1003032539
0bbe0     BC FB B0 FD | 	call	#__system___float_mul
0bbe4     FD 12 02 F6 | 	mov	arg01, result1
0bbe8     F0 04 B1 FD | 	call	#__system____builtin_sinf
0bbec     FD 14 02 F6 | 	mov	arg02, result1
0bbf0     58 7F 23 FF 
0bbf4     00 12 06 F6 | 	mov	arg01, ##1191096320
0bbf8     A4 FB B0 FD | 	call	#__system___float_mul
0bbfc     FD 12 02 F6 | 	mov	arg01, result1
0bc00     01 14 06 F6 | 	mov	arg02, #1
0bc04     60 00 B1 FD | 	call	#__system___float_tointeger
0bc08     10 FB 51 FC | 	wrword	result1, local02
0bc0c     04 4E 05 F1 | 	add	fp, #4
0bc10     A7 20 02 FB | 	rdlong	local02, fp
0bc14     01 20 06 F1 | 	add	local02, #1
0bc18     A7 20 62 FC | 	wrlong	local02, fp
0bc1c     04 4E 85 F1 | 	sub	fp, #4
0bc20     02 00 00 FF 
0bc24     00 20 56 F2 | 	cmps	local02, ##1024 wc
0bc28     5C FF 9F CD |  if_b	jmp	#LR__0926
0bc2c                 | '                                                                            '  for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0bc2c                 | '   return
0bc2c     88 05 90 FD | 	jmp	#LR__0944
0bc30                 | LR__0927
0bc30                 | ' for i=0 to 15 : harm(i)=0: next i  
0bc30     04 4E 05 F1 | 	add	fp, #4
0bc34     A7 00 68 FC | 	wrlong	#0, fp
0bc38     97 16 48 FB | 	callpa	#(@LR__0929-@LR__0928)>>2,fcache_load_ptr_
0bc3c                 | LR__0928
0bc3c     A7 1E 02 FB | 	rdlong	local01, fp
0bc40     02 1E 66 F0 | 	shl	local01, #2
0bc44     34 4E 05 F1 | 	add	fp, #52
0bc48     A7 1E 02 F1 | 	add	local01, fp
0bc4c     0F 01 68 FC | 	wrlong	#0, local01
0bc50     34 4E 85 F1 | 	sub	fp, #52
0bc54     A7 1E 02 FB | 	rdlong	local01, fp
0bc58     01 1E 06 F1 | 	add	local01, #1
0bc5c     A7 1E 62 FC | 	wrlong	local01, fp
0bc60     10 1E 56 F2 | 	cmps	local01, #16 wc
0bc64     D4 FF 9F CD |  if_b	jmp	#LR__0928
0bc68                 | LR__0929
0bc68     04 4E 85 F1 | 	sub	fp, #4
0bc6c                 | ' for i=numpar to 2 step -1 
0bc6c     A7 1E 02 FB | 	rdlong	local01, fp
0bc70     04 4E 05 F1 | 	add	fp, #4
0bc74     A7 1E 62 FC | 	wrlong	local01, fp
0bc78     04 4E 85 F1 | 	sub	fp, #4
0bc7c                 | LR__0930
0bc7c     3C DC BF FD | 	call	#_pop
0bc80     28 4E 05 F1 | 	add	fp, #40
0bc84     A7 FA 61 FC | 	wrlong	result1, fp
0bc88     04 4E 05 F1 | 	add	fp, #4
0bc8c     A7 FC 61 FC | 	wrlong	result2, fp
0bc90     04 4E 05 F1 | 	add	fp, #4
0bc94     A7 FE 61 FC | 	wrlong	result3, fp
0bc98     2C 4E 85 F1 | 	sub	fp, #44
0bc9c     A7 1E 02 FB | 	rdlong	local01, fp
0bca0     02 1E 86 F1 | 	sub	local01, #2
0bca4     02 1E 66 F0 | 	shl	local01, #2
0bca8     34 4E 05 F1 | 	add	fp, #52
0bcac     A7 1E 02 F1 | 	add	local01, fp
0bcb0     10 4E 85 F1 | 	sub	fp, #16
0bcb4     A7 12 02 F6 | 	mov	arg01, fp
0bcb8     28 4E 85 F1 | 	sub	fp, #40
0bcbc     8C 51 B0 FD | 	call	#_converttofloat
0bcc0     0F FB 61 FC | 	wrlong	result1, local01
0bcc4     04 4E 05 F1 | 	add	fp, #4
0bcc8     A7 1E 02 FB | 	rdlong	local01, fp
0bccc     01 1E 86 F1 | 	sub	local01, #1
0bcd0     A7 1E 62 FC | 	wrlong	local01, fp
0bcd4     04 4E 85 F1 | 	sub	fp, #4
0bcd8     02 1E 56 F2 | 	cmps	local01, #2 wc
0bcdc     9C FF 9F 3D |  if_ae	jmp	#LR__0930
0bce0     D8 DB BF FD | 	call	#_pop
0bce4     FF 1E 02 F6 | 	mov	local01, result3
0bce8     28 4E 05 F1 | 	add	fp, #40
0bcec     A7 FA 61 FC | 	wrlong	result1, fp
0bcf0     04 4E 05 F1 | 	add	fp, #4
0bcf4     A7 FC 61 FC | 	wrlong	result2, fp
0bcf8     04 4E 05 F1 | 	add	fp, #4
0bcfc     A7 1E 62 FC | 	wrlong	local01, fp
0bd00     08 4E 85 F1 | 	sub	fp, #8
0bd04     A7 12 02 F6 | 	mov	arg01, fp
0bd08     28 4E 85 F1 | 	sub	fp, #40
0bd0c     90 50 B0 FD | 	call	#_converttoint
0bd10     FD 1E 02 F6 | 	mov	local01, result1
0bd14     10 4E 05 F1 | 	add	fp, #16
0bd18     A7 1E 62 FC | 	wrlong	local01, fp
0bd1c     10 4E 85 F1 | 	sub	fp, #16
0bd20                 | ' t1=pop()
0bd20                 | ' channel=converttoint(t1) : print channel
0bd20     00 12 06 F6 | 	mov	arg01, #0
0bd24     90 28 B1 FD | 	call	#__system___getiolock_0423
0bd28     FD 12 02 F6 | 	mov	arg01, result1
0bd2c     84 CF B0 FD | 	call	#__system___lockmem
0bd30     10 4E 05 F1 | 	add	fp, #16
0bd34     A7 14 02 FB | 	rdlong	arg02, fp
0bd38     10 4E 85 F1 | 	sub	fp, #16
0bd3c     00 12 06 F6 | 	mov	arg01, #0
0bd40     00 16 06 F6 | 	mov	arg03, #0
0bd44     0A 18 06 F6 | 	mov	arg04, #10
0bd48     A0 DC B0 FD | 	call	#__system___basic_print_integer
0bd4c     00 12 06 F6 | 	mov	arg01, #0
0bd50     0A 14 06 F6 | 	mov	arg02, #10
0bd54     00 16 06 F6 | 	mov	arg03, #0
0bd58     F4 DB B0 FD | 	call	#__system___basic_print_char
0bd5c     00 12 06 F6 | 	mov	arg01, #0
0bd60     54 28 B1 FD | 	call	#__system___getiolock_0423
0bd64     FD 00 68 FC | 	wrlong	#0, result1
0bd68                 | ' for j=0 to 1023: samplebuf(channel, i) =0 : next j
0bd68     08 4E 05 F1 | 	add	fp, #8
0bd6c     02 00 80 FF 
0bd70     A7 00 68 FC | 	wrlong	##1024, fp
0bd74     08 4E 85 F1 | 	sub	fp, #8
0bd78     0B 00 00 FF 
0bd7c     CC E5 05 F1 | 	add	objptr, ##6092
0bd80     97 18 48 FB | 	callpa	#(@LR__0933-@LR__0931)>>2,fcache_load_ptr_
0bd84                 | LR__0931
0bd84     02 00 00 FF 
0bd88     00 14 DC FC | 	rep	@LR__0934, ##1024
0bd8c                 | LR__0932
0bd8c     10 4E 05 F1 | 	add	fp, #16
0bd90     A7 20 02 FB | 	rdlong	local02, fp
0bd94     0B 20 66 F0 | 	shl	local02, #11
0bd98     F2 20 02 F1 | 	add	local02, objptr
0bd9c     0C 4E 85 F1 | 	sub	fp, #12
0bda0     A7 1E 02 FB | 	rdlong	local01, fp
0bda4     04 4E 85 F1 | 	sub	fp, #4
0bda8     01 1E 66 F0 | 	shl	local01, #1
0bdac     10 1F 02 F1 | 	add	local01, local02
0bdb0     0F 01 58 FC | 	wrword	#0, local01
0bdb4                 | LR__0933
0bdb4                 | LR__0934
0bdb4     0B 00 00 FF 
0bdb8     CC E5 85 F1 | 	sub	objptr, ##6092
0bdbc     1C 4E 05 F1 | 	add	fp, #28
0bdc0     A7 00 68 FC | 	wrlong	#0, fp
0bdc4                 | ' max=0
0bdc4                 | ' if harm(0)<0 then
0bdc4     1C 4E 05 F1 | 	add	fp, #28
0bdc8     A7 12 02 FB | 	rdlong	arg01, fp
0bdcc     38 4E 85 F1 | 	sub	fp, #56
0bdd0     00 14 06 F6 | 	mov	arg02, #0
0bdd4     01 16 06 F6 | 	mov	arg03, #1
0bdd8     F8 FD B0 FD | 	call	#__system___float_cmp
0bddc     00 FA 55 F2 | 	cmps	result1, #0 wc
0bde0     04 01 90 3D |  if_ae	jmp	#LR__0937
0bde4     38 4E 05 F1 | 	add	fp, #56
0bde8     A7 FA 01 FB | 	rdlong	result1, fp
0bdec     1F FA 05 F4 | 	bitl	result1, #31
0bdf0     24 4E 85 F1 | 	sub	fp, #36
0bdf4     A7 FA 61 FC | 	wrlong	result1, fp
0bdf8     28 4E 05 F1 | 	add	fp, #40
0bdfc     A7 FA 01 FB | 	rdlong	result1, fp
0be00     1F FA 05 F4 | 	bitl	result1, #31
0be04     24 4E 85 F1 | 	sub	fp, #36
0be08     A7 FA 61 FC | 	wrlong	result1, fp
0be0c     20 4E 05 F1 | 	add	fp, #32
0be10     00 C0 9F FF 
0be14     A7 00 68 FC | 	wrlong	##1065353216, fp
0be18     24 4E 85 F1 | 	sub	fp, #36
0be1c     A7 1E 02 FB | 	rdlong	local01, fp
0be20     28 4E 05 F1 | 	add	fp, #40
0be24     A7 1E 62 FC | 	wrlong	local01, fp
0be28     24 4E 85 F1 | 	sub	fp, #36
0be2c     A7 1E 02 FB | 	rdlong	local01, fp
0be30     28 4E 05 F1 | 	add	fp, #40
0be34     A7 1E 62 FC | 	wrlong	local01, fp
0be38                 | '   harm(0)=1
0be38                 | '   harm(1)=even
0be38                 | '   harm(2)=odd
0be38                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0be38     3C 4E 85 F1 | 	sub	fp, #60
0be3c     A7 06 68 FC | 	wrlong	#3, fp
0be40                 | LR__0935
0be40     A7 1A 02 FB | 	rdlong	arg05, fp
0be44     0D 25 02 F6 | 	mov	local04, arg05
0be48     02 24 66 F0 | 	shl	local04, #2
0be4c     34 4E 05 F1 | 	add	fp, #52
0be50     A7 24 02 F1 | 	add	local04, fp
0be54     02 1A 86 F1 | 	sub	arg05, #2
0be58     02 1A 66 F0 | 	shl	arg05, #2
0be5c     A7 1A 02 F1 | 	add	arg05, fp
0be60     0D 13 02 FB | 	rdlong	arg01, arg05
0be64     24 4E 85 F1 | 	sub	fp, #36
0be68     A7 14 02 FB | 	rdlong	arg02, fp
0be6c     14 4E 85 F1 | 	sub	fp, #20
0be70     2C F9 B0 FD | 	call	#__system___float_mul
0be74     12 FB 61 FC | 	wrlong	result1, local04
0be78     04 4E 05 F1 | 	add	fp, #4
0be7c     A7 26 02 FB | 	rdlong	local05, fp
0be80     02 26 06 F1 | 	add	local05, #2
0be84     A7 26 62 FC | 	wrlong	local05, fp
0be88     10 26 56 F2 | 	cmps	local05, #16 wc
0be8c     B0 FF 9F CD |  if_b	jmp	#LR__0935
0be90                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0be90     A7 08 68 FC | 	wrlong	#4, fp
0be94                 | LR__0936
0be94     A7 26 02 FB | 	rdlong	local05, fp
0be98     13 25 02 F6 | 	mov	local04, local05
0be9c     02 24 66 F0 | 	shl	local04, #2
0bea0     34 4E 05 F1 | 	add	fp, #52
0bea4     A7 24 02 F1 | 	add	local04, fp
0bea8     02 26 86 F1 | 	sub	local05, #2
0beac     02 26 66 F0 | 	shl	local05, #2
0beb0     A7 26 02 F1 | 	add	local05, fp
0beb4     13 13 02 FB | 	rdlong	arg01, local05
0beb8     20 4E 85 F1 | 	sub	fp, #32
0bebc     A7 14 02 FB | 	rdlong	arg02, fp
0bec0     18 4E 85 F1 | 	sub	fp, #24
0bec4     D8 F8 B0 FD | 	call	#__system___float_mul
0bec8     12 FB 61 FC | 	wrlong	result1, local04
0becc     04 4E 05 F1 | 	add	fp, #4
0bed0     A7 26 02 FB | 	rdlong	local05, fp
0bed4     02 26 06 F1 | 	add	local05, #2
0bed8     A7 26 62 FC | 	wrlong	local05, fp
0bedc     0F 26 56 F2 | 	cmps	local05, #15 wc
0bee0     B0 FF 9F CD |  if_b	jmp	#LR__0936
0bee4     04 4E 85 F1 | 	sub	fp, #4
0bee8                 | LR__0937
0bee8                 | ' if harm(0)>=0 then ' synthesize with harmonics
0bee8     38 4E 05 F1 | 	add	fp, #56
0beec     A7 12 02 FB | 	rdlong	arg01, fp
0bef0     38 4E 85 F1 | 	sub	fp, #56
0bef4     00 14 06 F6 | 	mov	arg02, #0
0bef8     01 16 66 F6 | 	neg	arg03, #1
0befc     D4 FC B0 FD | 	call	#__system___float_cmp
0bf00     00 FA 55 F2 | 	cmps	result1, #0 wc
0bf04     B0 02 90 CD |  if_b	jmp	#LR__0943
0bf08                 | '   for i=0 to 1023
0bf08     04 4E 05 F1 | 	add	fp, #4
0bf0c     A7 00 68 FC | 	wrlong	#0, fp
0bf10     04 4E 85 F1 | 	sub	fp, #4
0bf14                 | LR__0938
0bf14     20 4E 05 F1 | 	add	fp, #32
0bf18     A7 00 68 FC | 	wrlong	#0, fp
0bf1c                 | '     spl=0
0bf1c                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
0bf1c     18 4E 85 F1 | 	sub	fp, #24
0bf20     A7 00 68 FC | 	wrlong	#0, fp
0bf24                 | LR__0939
0bf24     A7 24 02 FB | 	rdlong	local04, fp
0bf28     02 24 66 F0 | 	shl	local04, #2
0bf2c     30 4E 05 F1 | 	add	fp, #48
0bf30     A7 24 02 F1 | 	add	local04, fp
0bf34     12 27 02 FB | 	rdlong	local05, local04
0bf38     87 E4 1D FF 
0bf3c     DB 25 06 F6 | 	mov	local04, ##1003032539
0bf40     34 4E 85 F1 | 	sub	fp, #52
0bf44     A7 12 02 FB | 	rdlong	arg01, fp
0bf48     04 4E 85 F1 | 	sub	fp, #4
0bf4c     09 13 52 F6 | 	abs	arg01, arg01 wc
0bf50     1F 22 C6 C9 |  if_b	decod	local03, #31
0bf54     00 22 06 36 |  if_ae	mov	local03, #0
0bf58     40 F4 B0 FD | 	call	#__system___float_fromuns
0bf5c     11 FB 61 F5 | 	xor	result1, local03
0bf60     FD 14 02 F6 | 	mov	arg02, result1
0bf64     12 13 02 F6 | 	mov	arg01, local04
0bf68     34 F8 B0 FD | 	call	#__system___float_mul
0bf6c     FD 24 02 F6 | 	mov	local04, result1
0bf70     08 4E 05 F1 | 	add	fp, #8
0bf74     A7 12 02 FB | 	rdlong	arg01, fp
0bf78     08 4E 85 F1 | 	sub	fp, #8
0bf7c     01 12 06 F1 | 	add	arg01, #1
0bf80     09 13 52 F6 | 	abs	arg01, arg01 wc
0bf84     1F 22 C6 C9 |  if_b	decod	local03, #31
0bf88     00 22 06 36 |  if_ae	mov	local03, #0
0bf8c     0C F4 B0 FD | 	call	#__system___float_fromuns
0bf90     11 FB 61 F5 | 	xor	result1, local03
0bf94     FD 14 02 F6 | 	mov	arg02, result1
0bf98     12 13 02 F6 | 	mov	arg01, local04
0bf9c     00 F8 B0 FD | 	call	#__system___float_mul
0bfa0     FD 12 02 F6 | 	mov	arg01, result1
0bfa4     34 01 B1 FD | 	call	#__system____builtin_sinf
0bfa8     FD 14 02 F6 | 	mov	arg02, result1
0bfac     13 13 02 F6 | 	mov	arg01, local05
0bfb0     EC F7 B0 FD | 	call	#__system___float_mul
0bfb4     FD 14 02 F6 | 	mov	arg02, result1
0bfb8     20 4E 05 F1 | 	add	fp, #32
0bfbc     A7 12 02 FB | 	rdlong	arg01, fp
0bfc0     20 4E 85 F1 | 	sub	fp, #32
0bfc4     08 F4 B0 FD | 	call	#__system___float_add
0bfc8     20 4E 05 F1 | 	add	fp, #32
0bfcc     A7 FA 61 FC | 	wrlong	result1, fp
0bfd0     18 4E 85 F1 | 	sub	fp, #24
0bfd4     A7 16 02 FB | 	rdlong	arg03, fp
0bfd8     01 16 06 F1 | 	add	arg03, #1
0bfdc     A7 16 62 FC | 	wrlong	arg03, fp
0bfe0     10 16 56 F2 | 	cmps	arg03, #16 wc
0bfe4     3C FF 9F CD |  if_b	jmp	#LR__0939
0bfe8                 | '     if abs(spl)>max then max=abs(spl)  ': print max 
0bfe8     18 4E 05 F1 | 	add	fp, #24
0bfec     A7 12 02 FB | 	rdlong	arg01, fp
0bff0     1F 12 06 F4 | 	bitl	arg01, #31
0bff4     04 4E 85 F1 | 	sub	fp, #4
0bff8     A7 14 02 FB | 	rdlong	arg02, fp
0bffc     1C 4E 85 F1 | 	sub	fp, #28
0c000     01 16 66 F6 | 	neg	arg03, #1
0c004     CC FB B0 FD | 	call	#__system___float_cmp
0c008     01 FA 55 F2 | 	cmps	result1, #1 wc
0c00c     18 00 90 CD |  if_b	jmp	#LR__0940
0c010     20 4E 05 F1 | 	add	fp, #32
0c014     A7 FA 01 FB | 	rdlong	result1, fp
0c018     1F FA 05 F4 | 	bitl	result1, #31
0c01c     04 4E 85 F1 | 	sub	fp, #4
0c020     A7 FA 61 FC | 	wrlong	result1, fp
0c024     1C 4E 85 F1 | 	sub	fp, #28
0c028                 | LR__0940
0c028     04 4E 05 F1 | 	add	fp, #4
0c02c     A7 26 02 FB | 	rdlong	local05, fp
0c030     01 26 06 F1 | 	add	local05, #1
0c034     A7 26 62 FC | 	wrlong	local05, fp
0c038     04 4E 85 F1 | 	sub	fp, #4
0c03c     02 00 00 FF 
0c040     00 26 56 F2 | 	cmps	local05, ##1024 wc
0c044     CC FE 9F CD |  if_b	jmp	#LR__0938
0c048                 | '   for i=0 to 1023
0c048     04 4E 05 F1 | 	add	fp, #4
0c04c     A7 00 68 FC | 	wrlong	#0, fp
0c050     04 4E 85 F1 | 	sub	fp, #4
0c054                 | LR__0941
0c054     20 4E 05 F1 | 	add	fp, #32
0c058     A7 00 68 FC | 	wrlong	#0, fp
0c05c                 | '     spl=0
0c05c                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j ':' print spl
0c05c     18 4E 85 F1 | 	sub	fp, #24
0c060     A7 00 68 FC | 	wrlong	#0, fp
0c064                 | LR__0942
0c064     A7 26 02 FB | 	rdlong	local05, fp
0c068     02 26 66 F0 | 	shl	local05, #2
0c06c     30 4E 05 F1 | 	add	fp, #48
0c070     A7 26 02 F1 | 	add	local05, fp
0c074     13 27 02 FB | 	rdlong	local05, local05
0c078     1C 4E 85 F1 | 	sub	fp, #28
0c07c     A7 14 02 FB | 	rdlong	arg02, fp
0c080     1C 4E 85 F1 | 	sub	fp, #28
0c084     58 7F 23 FF 
0c088     00 12 06 F6 | 	mov	arg01, ##1191096320
0c08c     14 F9 B0 FD | 	call	#__system___float_div
0c090     FD 14 02 F6 | 	mov	arg02, result1
0c094     13 13 02 F6 | 	mov	arg01, local05
0c098     04 F7 B0 FD | 	call	#__system___float_mul
0c09c     FD 26 02 F6 | 	mov	local05, result1
0c0a0     87 E4 1D FF 
0c0a4     DB 25 06 F6 | 	mov	local04, ##1003032539
0c0a8     04 4E 05 F1 | 	add	fp, #4
0c0ac     A7 12 02 FB | 	rdlong	arg01, fp
0c0b0     04 4E 85 F1 | 	sub	fp, #4
0c0b4     09 13 52 F6 | 	abs	arg01, arg01 wc
0c0b8     1F 22 C6 C9 |  if_b	decod	local03, #31
0c0bc     00 22 06 36 |  if_ae	mov	local03, #0
0c0c0     D8 F2 B0 FD | 	call	#__system___float_fromuns
0c0c4     11 FB 61 F5 | 	xor	result1, local03
0c0c8     FD 14 02 F6 | 	mov	arg02, result1
0c0cc     12 13 02 F6 | 	mov	arg01, local04
0c0d0     CC F6 B0 FD | 	call	#__system___float_mul
0c0d4     FD 24 02 F6 | 	mov	local04, result1
0c0d8     08 4E 05 F1 | 	add	fp, #8
0c0dc     A7 12 02 FB | 	rdlong	arg01, fp
0c0e0     08 4E 85 F1 | 	sub	fp, #8
0c0e4     01 12 06 F1 | 	add	arg01, #1
0c0e8     09 13 52 F6 | 	abs	arg01, arg01 wc
0c0ec     1F 22 C6 C9 |  if_b	decod	local03, #31
0c0f0     00 22 06 36 |  if_ae	mov	local03, #0
0c0f4     A4 F2 B0 FD | 	call	#__system___float_fromuns
0c0f8     11 FB 61 F5 | 	xor	result1, local03
0c0fc     FD 14 02 F6 | 	mov	arg02, result1
0c100     12 13 02 F6 | 	mov	arg01, local04
0c104     98 F6 B0 FD | 	call	#__system___float_mul
0c108     FD 12 02 F6 | 	mov	arg01, result1
0c10c     CC FF B0 FD | 	call	#__system____builtin_sinf
0c110     FD 14 02 F6 | 	mov	arg02, result1
0c114     13 13 02 F6 | 	mov	arg01, local05
0c118     84 F6 B0 FD | 	call	#__system___float_mul
0c11c     FD 14 02 F6 | 	mov	arg02, result1
0c120     20 4E 05 F1 | 	add	fp, #32
0c124     A7 12 02 FB | 	rdlong	arg01, fp
0c128     20 4E 85 F1 | 	sub	fp, #32
0c12c     A0 F2 B0 FD | 	call	#__system___float_add
0c130     20 4E 05 F1 | 	add	fp, #32
0c134     A7 FA 61 FC | 	wrlong	result1, fp
0c138     18 4E 85 F1 | 	sub	fp, #24
0c13c     A7 26 02 FB | 	rdlong	local05, fp
0c140     01 26 06 F1 | 	add	local05, #1
0c144     A7 26 62 FC | 	wrlong	local05, fp
0c148     10 26 56 F2 | 	cmps	local05, #16 wc
0c14c     14 FF 9F CD |  if_b	jmp	#LR__0942
0c150     08 4E 05 F1 | 	add	fp, #8
0c154     A7 26 02 FB | 	rdlong	local05, fp
0c158     0B 26 66 F0 | 	shl	local05, #11
0c15c     0B 00 00 FF 
0c160     CC E5 05 F1 | 	add	objptr, ##6092
0c164     F2 26 02 F1 | 	add	local05, objptr
0c168     0C 4E 85 F1 | 	sub	fp, #12
0c16c     A7 20 02 FB | 	rdlong	local02, fp
0c170     01 20 66 F0 | 	shl	local02, #1
0c174     13 21 02 F1 | 	add	local02, local05
0c178     1C 4E 05 F1 | 	add	fp, #28
0c17c     A7 12 02 FB | 	rdlong	arg01, fp
0c180     20 4E 85 F1 | 	sub	fp, #32
0c184     0B 00 00 FF 
0c188     CC E5 85 F1 | 	sub	objptr, ##6092
0c18c     01 14 06 F6 | 	mov	arg02, #1
0c190     D4 FA B0 FD | 	call	#__system___float_tointeger
0c194     10 FB 51 FC | 	wrword	result1, local02
0c198     04 4E 05 F1 | 	add	fp, #4
0c19c     A7 26 02 FB | 	rdlong	local05, fp
0c1a0     01 26 06 F1 | 	add	local05, #1
0c1a4     A7 26 62 FC | 	wrlong	local05, fp
0c1a8     04 4E 85 F1 | 	sub	fp, #4
0c1ac     02 00 00 FF 
0c1b0     00 26 56 F2 | 	cmps	local05, ##1024 wc
0c1b4     9C FE 9F CD |  if_b	jmp	#LR__0941
0c1b8                 | LR__0943
0c1b8                 | LR__0944
0c1b8     A7 F0 03 F6 | 	mov	ptra, fp
0c1bc     B2 00 A0 FD | 	call	#popregs_
0c1c0                 | _do_defsnd_ret
0c1c0     2D 00 64 FD | 	ret
0c1c4                 | 
0c1c4                 | ' 
0c1c4                 | ' ' ---------------  List the program. 
0c1c4                 | ' 
0c1c4                 | ' sub do_list
0c1c4                 | _do_list
0c1c4     02 4A 05 F6 | 	mov	COUNT_, #2
0c1c8     A8 00 A0 FD | 	call	#pushregs_
0c1cc     B8 F0 07 F1 | 	add	ptra, #184
0c1d0     04 4E 05 F1 | 	add	fp, #4
0c1d4     A7 00 68 FC | 	wrlong	#0, fp
0c1d8     04 4E 05 F1 | 	add	fp, #4
0c1dc     FF FF BF FF 
0c1e0     A7 FE 6B FC | 	wrlong	##2147483647, fp
0c1e4     08 4E 85 F1 | 	sub	fp, #8
0c1e8     69 00 00 FF 
0c1ec     54 E4 05 F1 | 	add	objptr, ##53844
0c1f0     F2 1E 02 FB | 	rdlong	local01, objptr
0c1f4     0F 17 02 F6 | 	mov	arg03, local01
0c1f8     01 16 66 F0 | 	shl	arg03, #1
0c1fc     0F 17 02 F1 | 	add	arg03, local01
0c200     02 16 66 F0 | 	shl	arg03, #2
0c204     03 00 00 FF 
0c208     04 E4 85 F1 | 	sub	objptr, ##1540
0c20c     F2 16 02 F1 | 	add	arg03, objptr
0c210     0B 17 02 FB | 	rdlong	arg03, arg03
0c214     A7 16 62 FC | 	wrlong	arg03, fp
0c218                 | ' 
0c218                 | ' startline=0 : endline=$7FFFFFFF
0c218                 | ' numpar=compiledline(lineptr_e).result.uresult
0c218                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
0c218     01 16 0E F2 | 	cmp	arg03, #1 wz
0c21c     66 00 00 FF 
0c220     50 E4 85 F1 | 	sub	objptr, ##52304
0c224     3C 00 90 5D |  if_ne	jmp	#LR__0950
0c228     90 D6 BF FD | 	call	#_pop
0c22c     FF 1E 02 F6 | 	mov	local01, result3
0c230     0C 4E 05 F1 | 	add	fp, #12
0c234     A7 FA 61 FC | 	wrlong	result1, fp
0c238     04 4E 05 F1 | 	add	fp, #4
0c23c     A7 FC 61 FC | 	wrlong	result2, fp
0c240     04 4E 05 F1 | 	add	fp, #4
0c244     A7 1E 62 FC | 	wrlong	local01, fp
0c248     08 4E 85 F1 | 	sub	fp, #8
0c24c     A7 12 02 F6 | 	mov	arg01, fp
0c250     0C 4E 85 F1 | 	sub	fp, #12
0c254     48 4B B0 FD | 	call	#_converttoint
0c258     04 4E 05 F1 | 	add	fp, #4
0c25c     A7 FA 61 FC | 	wrlong	result1, fp
0c260     04 4E 85 F1 | 	sub	fp, #4
0c264                 | LR__0950
0c264                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
0c264     A7 16 02 FB | 	rdlong	arg03, fp
0c268     02 16 0E F2 | 	cmp	arg03, #2 wz
0c26c     7C 00 90 5D |  if_ne	jmp	#LR__0951
0c270     48 D6 BF FD | 	call	#_pop
0c274     FF 1E 02 F6 | 	mov	local01, result3
0c278     0C 4E 05 F1 | 	add	fp, #12
0c27c     A7 FA 61 FC | 	wrlong	result1, fp
0c280     04 4E 05 F1 | 	add	fp, #4
0c284     A7 FC 61 FC | 	wrlong	result2, fp
0c288     04 4E 05 F1 | 	add	fp, #4
0c28c     A7 1E 62 FC | 	wrlong	local01, fp
0c290     08 4E 85 F1 | 	sub	fp, #8
0c294     A7 12 02 F6 | 	mov	arg01, fp
0c298     0C 4E 85 F1 | 	sub	fp, #12
0c29c     00 4B B0 FD | 	call	#_converttoint
0c2a0     FD 1E 02 F6 | 	mov	local01, result1
0c2a4     08 4E 05 F1 | 	add	fp, #8
0c2a8     A7 1E 62 FC | 	wrlong	local01, fp
0c2ac     08 4E 85 F1 | 	sub	fp, #8
0c2b0     08 D6 BF FD | 	call	#_pop
0c2b4     FF 1E 02 F6 | 	mov	local01, result3
0c2b8     0C 4E 05 F1 | 	add	fp, #12
0c2bc     A7 FA 61 FC | 	wrlong	result1, fp
0c2c0     04 4E 05 F1 | 	add	fp, #4
0c2c4     A7 FC 61 FC | 	wrlong	result2, fp
0c2c8     04 4E 05 F1 | 	add	fp, #4
0c2cc     A7 1E 62 FC | 	wrlong	local01, fp
0c2d0     08 4E 85 F1 | 	sub	fp, #8
0c2d4     A7 12 02 F6 | 	mov	arg01, fp
0c2d8     0C 4E 85 F1 | 	sub	fp, #12
0c2dc     C0 4A B0 FD | 	call	#_converttoint
0c2e0     04 4E 05 F1 | 	add	fp, #4
0c2e4     A7 FA 61 FC | 	wrlong	result1, fp
0c2e8     04 4E 85 F1 | 	sub	fp, #4
0c2ec                 | LR__0951
0c2ec                 | ' 
0c2ec                 | ' 
0c2ec                 | ' print
0c2ec     00 12 06 F6 | 	mov	arg01, #0
0c2f0     C4 22 B1 FD | 	call	#__system___getiolock_0423
0c2f4     FD 12 02 F6 | 	mov	arg01, result1
0c2f8     B8 C9 B0 FD | 	call	#__system___lockmem
0c2fc     00 12 06 F6 | 	mov	arg01, #0
0c300     0A 14 06 F6 | 	mov	arg02, #10
0c304     00 16 06 F6 | 	mov	arg03, #0
0c308     44 D6 B0 FD | 	call	#__system___basic_print_char
0c30c     00 12 06 F6 | 	mov	arg01, #0
0c310     A4 22 B1 FD | 	call	#__system___getiolock_0423
0c314     FD 00 68 FC | 	wrlong	#0, result1
0c318     69 00 00 FF 
0c31c     58 E4 05 F1 | 	add	objptr, ##53848
0c320     F2 20 02 FB | 	rdlong	local02, objptr
0c324     11 00 00 FF 
0c328     74 E4 05 F1 | 	add	objptr, ##8820
0c32c     F2 20 62 FC | 	wrlong	local02, objptr
0c330     7A 00 00 FF 
0c334     CC E4 85 F1 | 	sub	objptr, ##62668
0c338                 | ' do 
0c338                 | LR__0952
0c338     20 4E 05 F1 | 	add	fp, #32
0c33c     A7 12 02 F6 | 	mov	arg01, fp
0c340     20 4E 85 F1 | 	sub	fp, #32
0c344     7A 00 00 FF 
0c348     CC E4 05 F1 | 	add	objptr, ##62668
0c34c     F2 14 02 FB | 	rdlong	arg02, objptr
0c350     18 16 06 F6 | 	mov	arg03, #24
0c354     6F 00 00 FF 
0c358     0C E4 85 F1 | 	sub	objptr, ##56844
0c35c     64 BE B0 FD | 	call	#_psram_spin2_read1
0c360     0B 00 00 FF 
0c364     C0 E4 85 F1 | 	sub	objptr, ##5824
0c368                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart
0c368                 | '   if header(0)<> $FFFFFFFF then
0c368     20 4E 05 F1 | 	add	fp, #32
0c36c     A7 20 02 FB | 	rdlong	local02, fp
0c370     20 4E 85 F1 | 	sub	fp, #32
0c374     FF FF 7F FF 
0c378     FF 21 0E F2 | 	cmp	local02, ##-1 wz
0c37c     A8 00 90 AD |  if_e	jmp	#LR__0954
0c380     38 4E 05 F1 | 	add	fp, #56
0c384     3F 16 06 F6 | 	mov	arg03, #63
0c388     28 16 62 FD | 	setq	arg03
0c38c     A7 00 68 FC | 	wrlong	#0, fp
0c390     A7 12 02 F6 | 	mov	arg01, fp
0c394     10 4E 85 F1 | 	sub	fp, #16
0c398     A7 14 02 FB | 	rdlong	arg02, fp
0c39c     04 4E 05 F1 | 	add	fp, #4
0c3a0     A7 16 02 FB | 	rdlong	arg03, fp
0c3a4     2C 4E 85 F1 | 	sub	fp, #44
0c3a8     0B 00 00 FF 
0c3ac     C0 E4 05 F1 | 	add	objptr, ##5824
0c3b0     10 BE B0 FD | 	call	#_psram_spin2_read1
0c3b4     0B 00 00 FF 
0c3b8     C0 E4 85 F1 | 	sub	objptr, ##5824
0c3bc                 | '     longfill(linebuf,0,64)
0c3bc                 | '     psram.read1(varptr(linebuf),header(2),header(3))
0c3bc                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
0c3bc     20 4E 05 F1 | 	add	fp, #32
0c3c0     A7 20 02 FB | 	rdlong	local02, fp
0c3c4     1C 4E 85 F1 | 	sub	fp, #28
0c3c8     A7 1E 02 FB | 	rdlong	local01, fp
0c3cc     04 4E 85 F1 | 	sub	fp, #4
0c3d0     0F 21 52 F2 | 	cmps	local02, local01 wc
0c3d4     30 00 90 CD |  if_b	jmp	#LR__0953
0c3d8     20 4E 05 F1 | 	add	fp, #32
0c3dc     A7 20 02 FB | 	rdlong	local02, fp
0c3e0     18 4E 85 F1 | 	sub	fp, #24
0c3e4     A7 16 02 FB | 	rdlong	arg03, fp
0c3e8     08 4E 85 F1 | 	sub	fp, #8
0c3ec     0B 21 5A F2 | 	cmps	local02, arg03 wcz
0c3f0     14 00 90 1D |  if_a	jmp	#LR__0953
0c3f4     38 4E 05 F1 | 	add	fp, #56
0c3f8     A7 12 02 F6 | 	mov	arg01, fp
0c3fc     38 4E 85 F1 | 	sub	fp, #56
0c400                 | ' 
0c400                 | ' write(text)
0c400     88 B8 B0 FD | 	call	#_hg010b_spin2_write
0c404                 | ' crlf
0c404     E4 B9 B0 FD | 	call	#_hg010b_spin2_crlf
0c408                 | LR__0953
0c408     34 4E 05 F1 | 	add	fp, #52
0c40c     A7 20 02 FB | 	rdlong	local02, fp
0c410     34 4E 85 F1 | 	sub	fp, #52
0c414     7A 00 00 FF 
0c418     CC E4 05 F1 | 	add	objptr, ##62668
0c41c     F2 20 62 FC | 	wrlong	local02, objptr
0c420     7A 00 00 FF 
0c424     CC E4 85 F1 | 	sub	objptr, ##62668
0c428                 | LR__0954
0c428     34 4E 05 F1 | 	add	fp, #52
0c42c     A7 20 02 FB | 	rdlong	local02, fp
0c430     34 4E 85 F1 | 	sub	fp, #52
0c434     FF FF 3F FF 
0c438     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0c43c     20 4E 05 51 |  if_ne	add	fp, #32
0c440     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0c444     20 4E 85 51 |  if_ne	sub	fp, #32
0c448     FF FF 7F 5F 
0c44c     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0c450     E4 FE 9F 5D |  if_ne	jmp	#LR__0952
0c454     A7 F0 03 F6 | 	mov	ptra, fp
0c458     B2 00 A0 FD | 	call	#popregs_
0c45c                 | _do_list_ret
0c45c     2D 00 64 FD | 	ret
0c460                 | 
0c460                 | ' 
0c460                 | ' '---------------- Clear the program
0c460                 | ' 
0c460                 | ' sub do_new
0c460                 | _do_new
0c460     03 4A 05 F6 | 	mov	COUNT_, #3
0c464     A8 00 A0 FD | 	call	#pushregs_
0c468     00 12 06 F6 | 	mov	arg01, #0
0c46c     01 14 66 F6 | 	neg	arg02, #1
0c470     01 16 06 F6 | 	mov	arg03, #1
0c474     00 18 06 F6 | 	mov	arg04, #0
0c478     0B 00 00 FF 
0c47c     C0 E4 05 F1 | 	add	objptr, ##5824
0c480                 | '     return fill(addr, pattern, count, listPtr, 4)
0c480     04 1A 06 F6 | 	mov	arg05, #4
0c484     74 BE B0 FD | 	call	#_psram_spin2_fill
0c488     48 00 00 FF 
0c48c     1C E5 05 F1 | 	add	objptr, ##37148
0c490     F2 00 68 FC | 	wrlong	#0, objptr
0c494     15 00 00 FF 
0c498     7C E4 05 F1 | 	add	objptr, ##10876
0c49c     F2 00 68 FC | 	wrlong	#0, objptr
0c4a0     0F 00 00 FF 
0c4a4     2C E5 05 F1 | 	add	objptr, ##7980
0c4a8     F2 00 68 FC | 	wrlong	#0, objptr
0c4ac     04 E4 05 F1 | 	add	objptr, #4
0c4b0     F2 00 68 FC | 	wrlong	#0, objptr
0c4b4     16 00 00 FF 
0c4b8     5C E5 85 F1 | 	sub	objptr, ##11612
0c4bc     F2 00 68 FC | 	wrlong	#0, objptr
0c4c0     07 00 00 FF 
0c4c4     24 E4 05 F1 | 	add	objptr, ##3620
0c4c8     F2 00 68 FC | 	wrlong	#0, objptr
0c4cc     07 00 00 FF 
0c4d0     20 E4 85 F1 | 	sub	objptr, ##3616
0c4d4     F2 00 68 FC | 	wrlong	#0, objptr
0c4d8     0F 00 00 FF 
0c4dc     34 E4 05 F1 | 	add	objptr, ##7732
0c4e0     F2 00 68 FC | 	wrlong	#0, objptr
0c4e4     08 00 00 FF 
0c4e8     08 E4 85 F1 | 	sub	objptr, ##4104
0c4ec     F2 00 68 FC | 	wrlong	#0, objptr
0c4f0     04 E4 05 F1 | 	add	objptr, #4
0c4f4     FF FF FF FF 
0c4f8     F2 FE 6B FC | 	wrlong	##-1, objptr
0c4fc     0F 00 00 FF 
0c500     4C E5 05 F1 | 	add	objptr, ##8012
0c504     F2 00 68 FC | 	wrlong	#0, objptr
0c508                 | ' 
0c508                 | ' pslpoke(0,$FFFFFFFF)
0c508                 | ' varnum=0
0c508                 | ' programstart=0 :runptr=0 : runptr2=0
0c508                 | ' stackpointer=0
0c508                 | ' lineptr=0 
0c508                 | ' programptr=0 : stringptr=0
0c508                 | ' lastline=0 : lastlineptr=-1 :fortop=0
0c508                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
0c508     00 1E 06 F6 | 	mov	local01, #0
0c50c     07 00 00 FF 
0c510     40 E5 85 F1 | 	sub	objptr, ##3904
0c514     97 16 48 FB | 	callpa	#(@LR__0961-@LR__0960)>>2,fcache_load_ptr_
0c518                 | LR__0960
0c518     0F 21 02 F6 | 	mov	local02, local01
0c51c     02 20 66 F0 | 	shl	local02, #2
0c520     0F 21 02 F1 | 	add	local02, local01
0c524     02 20 66 F0 | 	shl	local02, #2
0c528     F2 20 02 F1 | 	add	local02, objptr
0c52c     08 20 06 F1 | 	add	local02, #8
0c530     FF FF FF FF 
0c534     10 FF 6B FC | 	wrlong	##-1, local02
0c538     01 1E 06 F1 | 	add	local01, #1
0c53c     81 1E 56 F2 | 	cmps	local01, #129 wc
0c540     D4 FF 9F CD |  if_b	jmp	#LR__0960
0c544                 | LR__0961
0c544     71 00 00 FF 
0c548     6C E4 85 F1 | 	sub	objptr, ##57964
0c54c                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i))
0c54c     00 1E 06 F6 | 	mov	local01, #0
0c550                 | LR__0962
0c550     0F 21 02 F6 | 	mov	local02, local01
0c554     02 20 66 F0 | 	shl	local02, #2
0c558     7A 00 00 FF 
0c55c     08 E4 05 F1 | 	add	objptr, ##62472
0c560     F2 20 02 F1 | 	add	local02, objptr
0c564     10 21 0A FB | 	rdlong	local02, local02 wz
0c568     7A 00 00 FF 
0c56c     08 E4 85 F1 | 	sub	objptr, ##62472
0c570     34 00 90 AD |  if_e	jmp	#LR__0963
0c574     0F 13 02 F6 | 	mov	arg01, local01
0c578     00 14 06 F6 | 	mov	arg02, #0
0c57c     00 16 06 F6 | 	mov	arg03, #0
0c580     94 A7 B0 FD | 	call	#_hg010b_spin2_setspritesize
0c584     0F 21 02 F6 | 	mov	local02, local01
0c588     02 20 66 F0 | 	shl	local02, #2
0c58c     7A 00 00 FF 
0c590     08 E4 05 F1 | 	add	objptr, ##62472
0c594     F2 20 02 F1 | 	add	local02, objptr
0c598     10 13 02 FB | 	rdlong	arg01, local02
0c59c     7A 00 00 FF 
0c5a0     08 E4 85 F1 | 	sub	objptr, ##62472
0c5a4     00 06 B1 FD | 	call	#__system___gc_free
0c5a8                 | LR__0963
0c5a8     7A 00 00 FF 
0c5ac     5C E4 05 F1 | 	add	objptr, ##62556
0c5b0     00 C0 9F FF 
0c5b4     F2 00 68 FC | 	wrlong	##1065353216, objptr
0c5b8     04 E4 05 F1 | 	add	objptr, #4
0c5bc     00 C0 9F FF 
0c5c0     F2 00 68 FC | 	wrlong	##1065353216, objptr
0c5c4     7A 00 00 FF 
0c5c8     60 E4 85 F1 | 	sub	objptr, ##62560
0c5cc     F2 22 02 FB | 	rdlong	local03, objptr
0c5d0     7A 00 00 FF 
0c5d4     4C E4 05 F1 | 	add	objptr, ##62540
0c5d8     F2 22 62 FC | 	wrlong	local03, objptr
0c5dc     7A 00 00 FF 
0c5e0     4C E4 85 F1 | 	sub	objptr, ##62540
0c5e4     11 12 06 F6 | 	mov	arg01, #17
0c5e8     08 14 06 F6 | 	mov	arg02, #8
0c5ec     10 16 06 F6 | 	mov	arg03, #16
0c5f0     24 A7 B0 FD | 	call	#_hg010b_spin2_setspritesize
0c5f4     10 12 06 F6 | 	mov	arg01, #16
0c5f8     20 14 06 F6 | 	mov	arg02, #32
0c5fc     20 16 06 F6 | 	mov	arg03, #32
0c600     14 A7 B0 FD | 	call	#_hg010b_spin2_setspritesize
0c604     01 1E 06 F1 | 	add	local01, #1
0c608     10 1E 56 F2 | 	cmps	local01, #16 wc
0c60c     40 FF 9F CD |  if_b	jmp	#LR__0962
0c610     A7 F0 03 F6 | 	mov	ptra, fp
0c614     B2 00 A0 FD | 	call	#popregs_
0c618                 | _do_new_ret
0c618     2D 00 64 FD | 	ret
0c61c                 | 
0c61c                 | ' 
0c61c                 | ' '----------------------- goto
0c61c                 | ' sub do_fast_goto
0c61c                 | _do_fast_goto
0c61c     02 4A 05 F6 | 	mov	COUNT_, #2
0c620     A8 00 A0 FD | 	call	#pushregs_
0c624                 | _do_fast_goto_enter
0c624     69 00 00 FF 
0c628     54 E4 05 F1 | 	add	objptr, ##53844
0c62c     F2 12 02 FB | 	rdlong	arg01, objptr
0c630     09 1F 02 F6 | 	mov	local01, arg01
0c634     01 1E 66 F0 | 	shl	local01, #1
0c638     09 1F 02 F1 | 	add	local01, arg01
0c63c     02 1E 66 F0 | 	shl	local01, #2
0c640     03 00 00 FF 
0c644     04 E4 85 F1 | 	sub	objptr, ##1540
0c648     F2 1E 02 F1 | 	add	local01, objptr
0c64c     0F 21 02 FB | 	rdlong	local02, local01
0c650     10 13 02 F6 | 	mov	arg01, local02
0c654     66 00 00 FF 
0c658     50 E4 85 F1 | 	sub	objptr, ##52304
0c65c     EC 92 B0 FD | 	call	#_pslpeek
0c660     FD 12 02 F6 | 	mov	arg01, result1
0c664                 | ' 
0c664                 | ' testptr=compiledline(lineptr_e).result.uresult
0c664                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
0c664                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
0c664     69 00 00 FF 
0c668     54 E4 05 F1 | 	add	objptr, ##53844
0c66c     F2 FA 01 FB | 	rdlong	result1, objptr
0c670     FD 1E 02 F6 | 	mov	local01, result1
0c674     01 1E 66 F0 | 	shl	local01, #1
0c678     FD 1E 02 F1 | 	add	local01, result1
0c67c     02 1E 66 F0 | 	shl	local01, #2
0c680     03 00 00 FF 
0c684     04 E4 85 F1 | 	sub	objptr, ##1540
0c688     F2 1E 02 F1 | 	add	local01, objptr
0c68c     04 1E 06 F1 | 	add	local01, #4
0c690     0F 1F 02 FB | 	rdlong	local01, local01
0c694     0F 13 0A F2 | 	cmp	arg01, local01 wz
0c698     66 00 00 FF 
0c69c     50 E4 85 F1 | 	sub	objptr, ##52304
0c6a0     58 00 90 5D |  if_ne	jmp	#LR__0970
0c6a4     78 00 00 FF 
0c6a8     84 E5 05 F1 | 	add	objptr, ##61828
0c6ac     F2 20 62 FC | 	wrlong	local02, objptr
0c6b0     0F 00 00 FF 
0c6b4     34 E5 85 F1 | 	sub	objptr, ##7988
0c6b8     F2 20 02 FB | 	rdlong	local02, objptr
0c6bc     01 20 86 F1 | 	sub	local02, #1
0c6c0     04 E4 05 F1 | 	add	objptr, #4
0c6c4     F2 20 62 FC | 	wrlong	local02, objptr
0c6c8                 | '   runptr=testptr
0c6c8                 | '   lineptr_e=lineptr-1
0c6c8                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
0c6c8     0F 00 00 FF 
0c6cc     54 E5 05 F1 | 	add	objptr, ##8020
0c6d0     F2 20 02 FB | 	rdlong	local02, objptr
0c6d4     78 00 00 FF 
0c6d8     A8 E5 85 F1 | 	sub	objptr, ##61864
0c6dc     FF FF 3F FF 
0c6e0     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0c6e4     78 00 00 AF 
0c6e8     A8 E5 05 A1 |  if_e	add	objptr, ##61864
0c6ec     F2 00 68 AC |  if_e	wrlong	#0, objptr
0c6f0     78 00 00 AF 
0c6f4     A8 E5 85 A1 |  if_e	sub	objptr, ##61864
0c6f8     04 00 90 FD | 	jmp	#LR__0971
0c6fc                 | LR__0970
0c6fc     0C 00 B0 FD | 	call	#_do_find_goto
0c700                 | LR__0971
0c700     A7 F0 03 F6 | 	mov	ptra, fp
0c704     B2 00 A0 FD | 	call	#popregs_
0c708                 | _do_fast_goto_ret
0c708     2D 00 64 FD | 	ret
0c70c                 | 
0c70c                 | ' 
0c70c                 | ' 
0c70c                 | ' 
0c70c                 | ' 
0c70c                 | ' sub do_find_goto
0c70c                 | _do_find_goto
0c70c     03 4A 05 F6 | 	mov	COUNT_, #3
0c710     A8 00 A0 FD | 	call	#pushregs_
0c714     24 F0 07 F1 | 	add	ptra, #36
0c718                 | _do_find_goto_enter
0c718     69 00 00 FF 
0c71c     54 E4 05 F1 | 	add	objptr, ##53844
0c720     F2 1E 02 FB | 	rdlong	local01, objptr
0c724     0F 21 02 F6 | 	mov	local02, local01
0c728     01 20 66 F0 | 	shl	local02, #1
0c72c     0F 21 02 F1 | 	add	local02, local01
0c730     02 20 66 F0 | 	shl	local02, #2
0c734     03 00 00 FF 
0c738     04 E4 85 F1 | 	sub	objptr, ##1540
0c73c     F2 20 02 F1 | 	add	local02, objptr
0c740     04 20 06 F1 | 	add	local02, #4
0c744     10 21 02 FB | 	rdlong	local02, local02
0c748     A7 20 62 FC | 	wrlong	local02, fp
0c74c     03 00 00 FF 
0c750     08 E4 05 F1 | 	add	objptr, ##1544
0c754     F2 22 02 FB | 	rdlong	local03, objptr
0c758     69 00 00 FF 
0c75c     58 E4 85 F1 | 	sub	objptr, ##53848
0c760     04 4E 05 F1 | 	add	fp, #4
0c764     A7 22 62 FC | 	wrlong	local03, fp
0c768     04 4E 85 F1 | 	sub	fp, #4
0c76c                 | ' 
0c76c                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
0c76c                 | '  ' print "find goto"                                                                     'print gotoline 
0c76c                 | ' gotoptr=programstart
0c76c                 | ' do
0c76c                 | LR__0980
0c76c     0C 4E 05 F1 | 	add	fp, #12
0c770     A7 12 02 F6 | 	mov	arg01, fp
0c774     08 4E 85 F1 | 	sub	fp, #8
0c778     A7 14 02 FB | 	rdlong	arg02, fp
0c77c     04 4E 85 F1 | 	sub	fp, #4
0c780     18 16 06 F6 | 	mov	arg03, #24
0c784     0B 00 00 FF 
0c788     C0 E4 05 F1 | 	add	objptr, ##5824
0c78c     34 BA B0 FD | 	call	#_psram_spin2_read1
0c790     0B 00 00 FF 
0c794     C0 E4 85 F1 | 	sub	objptr, ##5824
0c798                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
0c798                 | '   if gotoheader(0)<>$FFFFFFFF then
0c798     0C 4E 05 F1 | 	add	fp, #12
0c79c     A7 22 02 FB | 	rdlong	local03, fp
0c7a0     0C 4E 85 F1 | 	sub	fp, #12
0c7a4     FF FF 7F FF 
0c7a8     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0c7ac     24 00 90 AD |  if_e	jmp	#LR__0981
0c7b0     04 4E 05 F1 | 	add	fp, #4
0c7b4     A7 22 02 FB | 	rdlong	local03, fp
0c7b8     04 4E 05 F1 | 	add	fp, #4
0c7bc     A7 22 62 FC | 	wrlong	local03, fp
0c7c0     18 4E 05 F1 | 	add	fp, #24
0c7c4     A7 22 02 FB | 	rdlong	local03, fp
0c7c8     1C 4E 85 F1 | 	sub	fp, #28
0c7cc     A7 22 62 FC | 	wrlong	local03, fp
0c7d0     04 4E 85 F1 | 	sub	fp, #4
0c7d4                 | LR__0981
0c7d4     20 4E 05 F1 | 	add	fp, #32
0c7d8     A7 22 02 FB | 	rdlong	local03, fp
0c7dc     20 4E 85 F1 | 	sub	fp, #32
0c7e0     FF FF 3F FF 
0c7e4     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0c7e8     0C 4E 05 51 |  if_ne	add	fp, #12
0c7ec     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0c7f0     0C 4E 85 51 |  if_ne	sub	fp, #12
0c7f4     FF FF 7F 5F 
0c7f8     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0c7fc     18 00 90 AD |  if_e	jmp	#LR__0982
0c800     0C 4E 05 F1 | 	add	fp, #12
0c804     A7 22 02 FB | 	rdlong	local03, fp
0c808     0C 4E 85 F1 | 	sub	fp, #12
0c80c     A7 20 02 FB | 	rdlong	local02, fp
0c810     10 23 0A F2 | 	cmp	local03, local02 wz
0c814     54 FF 9F 5D |  if_ne	jmp	#LR__0980
0c818                 | LR__0982
0c818                 | ' 
0c818                 | ' if gotoheader(0)=gotoline then
0c818     0C 4E 05 F1 | 	add	fp, #12
0c81c     A7 22 02 FB | 	rdlong	local03, fp
0c820     0C 4E 85 F1 | 	sub	fp, #12
0c824     A7 1E 02 FB | 	rdlong	local01, fp
0c828     0F 23 0A F2 | 	cmp	local03, local01 wz
0c82c     D8 00 90 5D |  if_ne	jmp	#LR__0983
0c830     69 00 00 FF 
0c834     54 E4 05 F1 | 	add	objptr, ##53844
0c838     F2 1E 02 FB | 	rdlong	local01, objptr
0c83c     0F 21 02 F6 | 	mov	local02, local01
0c840     01 20 66 F0 | 	shl	local02, #1
0c844     0F 21 02 F1 | 	add	local02, local01
0c848     02 20 66 F0 | 	shl	local02, #2
0c84c     03 00 00 FF 
0c850     04 E4 85 F1 | 	sub	objptr, ##1540
0c854     F2 20 02 F1 | 	add	local02, objptr
0c858     08 4E 05 F1 | 	add	fp, #8
0c85c     A7 22 02 FB | 	rdlong	local03, fp
0c860     10 23 62 FC | 	wrlong	local03, local02
0c864     03 00 00 FF 
0c868     04 E4 05 F1 | 	add	objptr, ##1540
0c86c     F2 1E 02 FB | 	rdlong	local01, objptr
0c870     0F 21 02 F6 | 	mov	local02, local01
0c874     01 20 66 F0 | 	shl	local02, #1
0c878     0F 21 02 F1 | 	add	local02, local01
0c87c     02 20 66 F0 | 	shl	local02, #2
0c880     03 00 00 FF 
0c884     04 E4 85 F1 | 	sub	objptr, ##1540
0c888     F2 20 02 F1 | 	add	local02, objptr
0c88c     08 20 06 F1 | 	add	local02, #8
0c890     10 9D 68 FC | 	wrlong	#78, local02
0c894     03 00 00 FF 
0c898     04 E4 05 F1 | 	add	objptr, ##1540
0c89c     F2 20 02 FB | 	rdlong	local02, objptr
0c8a0     10 13 02 F6 | 	mov	arg01, local02
0c8a4     01 12 66 F0 | 	shl	arg01, #1
0c8a8     10 13 02 F1 | 	add	arg01, local02
0c8ac     02 12 66 F0 | 	shl	arg01, #2
0c8b0     03 00 00 FF 
0c8b4     04 E4 85 F1 | 	sub	objptr, ##1540
0c8b8     F2 12 02 F1 | 	add	arg01, objptr
0c8bc     12 00 00 FF 
0c8c0     3C E5 05 F1 | 	add	objptr, ##9532
0c8c4     F2 14 02 FB | 	rdlong	arg02, objptr
0c8c8     02 22 06 F6 | 	mov	local03, #2
0c8cc     10 23 02 F1 | 	add	local03, local02
0c8d0     14 00 00 FF 
0c8d4     54 E5 85 F1 | 	sub	objptr, ##10580
0c8d8     F2 16 02 FB | 	rdlong	arg03, objptr
0c8dc     0B 23 02 FD | 	qmul	local03, arg03
0c8e0     08 4E 85 F1 | 	sub	fp, #8
0c8e4     58 00 00 FF 
0c8e8     78 E5 85 F1 | 	sub	objptr, ##45432
0c8ec     18 22 62 FD | 	getqx	local03
0c8f0     11 15 02 F1 | 	add	arg02, local03
0c8f4     68 B9 B0 FD | 	call	#_psram_spin2_write
0c8f8     0B 00 00 FF 
0c8fc     C0 E4 85 F1 | 	sub	objptr, ##5824
0c900     18 FD BF FD | 	call	#_do_fast_goto
0c904     08 00 90 FD | 	jmp	#LR__0984
0c908                 | LR__0983
0c908     26 12 06 F6 | 	mov	arg01, #38
0c90c     80 8E B0 FD | 	call	#_printerror
0c910                 | LR__0984
0c910     A7 F0 03 F6 | 	mov	ptra, fp
0c914     B2 00 A0 FD | 	call	#popregs_
0c918                 | _do_find_goto_ret
0c918     2D 00 64 FD | 	ret
0c91c                 | 
0c91c                 | ' 
0c91c                 | ' sub do_slow_goto
0c91c                 | _do_slow_goto
0c91c                 | _do_slow_goto_ret
0c91c     2D 00 64 FD | 	ret
0c920                 | 
0c920                 | ' 
0c920                 | ' '----------------------- Error processing
0c920                 | ' 
0c920                 | ' sub do_error
0c920                 | _do_error
0c920     01 4A 05 F6 | 	mov	COUNT_, #1
0c924     A8 00 A0 FD | 	call	#pushregs_
0c928     69 00 00 FF 
0c92c     54 E4 05 F1 | 	add	objptr, ##53844
0c930     F2 18 02 FB | 	rdlong	arg04, objptr
0c934     0C 17 02 F6 | 	mov	arg03, arg04
0c938     01 16 66 F0 | 	shl	arg03, #1
0c93c     0C 17 02 F1 | 	add	arg03, arg04
0c940     02 16 66 F0 | 	shl	arg03, #2
0c944     03 00 00 FF 
0c948     04 E4 85 F1 | 	sub	objptr, ##1540
0c94c     F2 16 02 F1 | 	add	arg03, objptr
0c950     0B 1F 02 FB | 	rdlong	local01, arg03
0c954                 | ' r=compiledline(lineptr_e).result.uresult
0c954                 | ' print "Error ";r;": ";errors$(r)
0c954     00 12 06 F6 | 	mov	arg01, #0
0c958     66 00 00 FF 
0c95c     50 E4 85 F1 | 	sub	objptr, ##52304
0c960     54 1C B1 FD | 	call	#__system___getiolock_0423
0c964     FD 12 02 F6 | 	mov	arg01, result1
0c968     48 C3 B0 FD | 	call	#__system___lockmem
0c96c     43 01 00 FF 
0c970     18 15 06 F6 | 	mov	arg02, ##@LR__4600
0c974     00 12 06 F6 | 	mov	arg01, #0
0c978     00 16 06 F6 | 	mov	arg03, #0
0c97c     28 D0 B0 FD | 	call	#__system___basic_print_string
0c980     00 12 06 F6 | 	mov	arg01, #0
0c984     0F 15 02 F6 | 	mov	arg02, local01
0c988     00 16 06 F6 | 	mov	arg03, #0
0c98c     0A 18 06 F6 | 	mov	arg04, #10
0c990     98 D0 B0 FD | 	call	#__system___basic_print_unsigned
0c994     43 01 00 FF 
0c998     1F 15 06 F6 | 	mov	arg02, ##@LR__4601
0c99c     00 12 06 F6 | 	mov	arg01, #0
0c9a0     00 16 06 F6 | 	mov	arg03, #0
0c9a4     00 D0 B0 FD | 	call	#__system___basic_print_string
0c9a8     02 1E 66 F0 | 	shl	local01, #2
0c9ac     64 00 00 FF 
0c9b0     50 E4 05 F1 | 	add	objptr, ##51280
0c9b4     F2 1E 02 F1 | 	add	local01, objptr
0c9b8     0F 15 02 FB | 	rdlong	arg02, local01
0c9bc     00 12 06 F6 | 	mov	arg01, #0
0c9c0     00 16 06 F6 | 	mov	arg03, #0
0c9c4     64 00 00 FF 
0c9c8     50 E4 85 F1 | 	sub	objptr, ##51280
0c9cc     D8 CF B0 FD | 	call	#__system___basic_print_string
0c9d0     00 12 06 F6 | 	mov	arg01, #0
0c9d4     0A 14 06 F6 | 	mov	arg02, #10
0c9d8     00 16 06 F6 | 	mov	arg03, #0
0c9dc     70 CF B0 FD | 	call	#__system___basic_print_char
0c9e0     00 12 06 F6 | 	mov	arg01, #0
0c9e4     D0 1B B1 FD | 	call	#__system___getiolock_0423
0c9e8     FD 00 68 FC | 	wrlong	#0, result1
0c9ec     A7 F0 03 F6 | 	mov	ptra, fp
0c9f0     B2 00 A0 FD | 	call	#popregs_
0c9f4                 | _do_error_ret
0c9f4     2D 00 64 FD | 	ret
0c9f8                 | 
0c9f8                 | ' 
0c9f8                 | ' 
0c9f8                 | ' '------------------ Assigning to a variable  
0c9f8                 | ' 
0c9f8                 | ' function  convertstring(psaddr as ulong) as string
0c9f8                 | _convertstring
0c9f8     04 4A 05 F6 | 	mov	COUNT_, #4
0c9fc     A8 00 A0 FD | 	call	#pushregs_
0ca00     09 1F 02 F6 | 	mov	local01, arg01
0ca04     44 8F B0 FD | 	call	#_pslpeek
0ca08     FD 20 02 F6 | 	mov	local02, result1
0ca0c     43 01 00 FF 
0ca10     22 23 06 F6 | 	mov	local03, ##@LR__4602
0ca14                 | ' 'print "in convertstring: psaddr=";psaddr
0ca14                 | ' l=pslpeek(psaddr)
0ca14                 | ' 'print "in convertstring: len=";l
0ca14                 | ' s="" 
0ca14                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0ca14     01 24 06 F6 | 	mov	local04, #1
0ca18     01 20 06 F1 | 	add	local02, #1
0ca1c                 | LR__0990
0ca1c     10 25 52 F2 | 	cmps	local04, local02 wc
0ca20     30 00 90 3D |  if_ae	jmp	#LR__0991
0ca24     0F 13 02 F6 | 	mov	arg01, local01
0ca28     03 12 06 F1 | 	add	arg01, #3
0ca2c     12 13 02 F1 | 	add	arg01, local04
0ca30     C0 8E B0 FD | 	call	#_pspeek
0ca34     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0ca38     4C E4 B0 FD | 	call	#__system__Chr_S
0ca3c     FD 14 02 F6 | 	mov	arg02, result1
0ca40     11 13 02 F6 | 	mov	arg01, local03
0ca44     C8 C2 B0 FD | 	call	#__system___string_concat
0ca48     FD 22 02 F6 | 	mov	local03, result1
0ca4c     01 24 06 F1 | 	add	local04, #1
0ca50     C8 FF 9F FD | 	jmp	#LR__0990
0ca54                 | LR__0991
0ca54                 | ' 'print "in convertstring: str=";s
0ca54                 | ' return s
0ca54     11 FB 01 F6 | 	mov	result1, local03
0ca58     A7 F0 03 F6 | 	mov	ptra, fp
0ca5c     B2 00 A0 FD | 	call	#popregs_
0ca60                 | _convertstring_ret
0ca60     2D 00 64 FD | 	ret
0ca64                 | 
0ca64                 | ' 
0ca64                 | ' sub do_assign
0ca64                 | _do_assign
0ca64     05 4A 05 F6 | 	mov	COUNT_, #5
0ca68     A8 00 A0 FD | 	call	#pushregs_
0ca6c     44 F0 07 F1 | 	add	ptra, #68
0ca70     69 00 00 FF 
0ca74     54 E4 05 F1 | 	add	objptr, ##53844
0ca78     F2 16 02 FB | 	rdlong	arg03, objptr
0ca7c     0B 15 02 F6 | 	mov	arg02, arg03
0ca80     01 14 66 F0 | 	shl	arg02, #1
0ca84     0B 15 02 F1 | 	add	arg02, arg03
0ca88     02 14 66 F0 | 	shl	arg02, #2
0ca8c     03 00 00 FF 
0ca90     04 E4 85 F1 | 	sub	objptr, ##1540
0ca94     F2 14 02 F1 | 	add	arg02, objptr
0ca98     0A 15 02 FB | 	rdlong	arg02, arg02
0ca9c     18 4E 05 F1 | 	add	fp, #24
0caa0     A7 14 62 FC | 	wrlong	arg02, fp
0caa4                 | ' 
0caa4                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
0caa4                 | ' 
0caa4                 | ' if variables(varnum).vartype<array_no_type then 
0caa4     18 4E 85 F1 | 	sub	fp, #24
0caa8     04 14 66 F0 | 	shl	arg02, #4
0caac     32 00 00 FF 
0cab0     74 E4 85 F1 | 	sub	objptr, ##25716
0cab4     F2 14 02 F1 | 	add	arg02, objptr
0cab8     0C 14 06 F1 | 	add	arg02, #12
0cabc     0A 17 02 FB | 	rdlong	arg03, arg02
0cac0     00 17 16 F2 | 	cmp	arg03, #256 wc
0cac4     33 00 00 FF 
0cac8     DC E5 85 F1 | 	sub	objptr, ##26588
0cacc     18 01 90 3D |  if_ae	jmp	#LR__1000
0cad0     E8 CD BF FD | 	call	#_pop
0cad4     A7 FA 61 FC | 	wrlong	result1, fp
0cad8     04 4E 05 F1 | 	add	fp, #4
0cadc     A7 FC 61 FC | 	wrlong	result2, fp
0cae0     04 4E 05 F1 | 	add	fp, #4
0cae4     A7 FE 61 FC | 	wrlong	result3, fp
0cae8     08 4E 85 F1 | 	sub	fp, #8
0caec     A7 16 02 FB | 	rdlong	arg03, fp
0caf0     04 4E 05 F1 | 	add	fp, #4
0caf4     A7 14 02 FB | 	rdlong	arg02, fp
0caf8     14 4E 05 F1 | 	add	fp, #20
0cafc     A7 12 02 FB | 	rdlong	arg01, fp
0cb00     04 12 66 F0 | 	shl	arg01, #4
0cb04     33 00 00 FF 
0cb08     DC E5 05 F1 | 	add	objptr, ##26588
0cb0c     F2 12 02 F1 | 	add	arg01, objptr
0cb10     04 12 06 F1 | 	add	arg01, #4
0cb14     09 17 62 FC | 	wrlong	arg03, arg01
0cb18     A7 16 02 FB | 	rdlong	arg03, fp
0cb1c     04 16 66 F0 | 	shl	arg03, #4
0cb20     F2 16 02 F1 | 	add	arg03, objptr
0cb24     08 16 06 F1 | 	add	arg03, #8
0cb28     0B 15 62 FC | 	wrlong	arg02, arg03
0cb2c     A7 16 02 FB | 	rdlong	arg03, fp
0cb30     04 16 66 F0 | 	shl	arg03, #4
0cb34     F2 16 02 F1 | 	add	arg03, objptr
0cb38     10 4E 85 F1 | 	sub	fp, #16
0cb3c     A7 14 02 FB | 	rdlong	arg02, fp
0cb40     0C 16 06 F1 | 	add	arg03, #12
0cb44     0B 15 62 FC | 	wrlong	arg02, arg03
0cb48                 | '   t1=pop() 
0cb48                 | ' 'print "In do_assign value to assign=";t1.result.uresult, "type to assign=";t1.result_type  
0cb48                 | '    variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
0cb48                 | '   if variables(varnum).vartype<>result_string2 then return
0cb48     10 4E 05 F1 | 	add	fp, #16
0cb4c     A7 16 02 FB | 	rdlong	arg03, fp
0cb50     18 4E 85 F1 | 	sub	fp, #24
0cb54     04 16 66 F0 | 	shl	arg03, #4
0cb58     F2 16 02 F1 | 	add	arg03, objptr
0cb5c     0C 16 06 F1 | 	add	arg03, #12
0cb60     0B 17 02 FB | 	rdlong	arg03, arg03
0cb64     2B 16 0E F2 | 	cmp	arg03, #43 wz
0cb68     33 00 00 FF 
0cb6c     DC E5 85 F1 | 	sub	objptr, ##26588
0cb70     A4 05 90 5D |  if_ne	jmp	#LR__1021
0cb74     18 4E 05 F1 | 	add	fp, #24
0cb78     A7 16 02 FB | 	rdlong	arg03, fp
0cb7c     0B 1F 02 F6 | 	mov	local01, arg03
0cb80     04 1E 66 F0 | 	shl	local01, #4
0cb84     33 00 00 FF 
0cb88     DC E5 05 F1 | 	add	objptr, ##26588
0cb8c     F2 1E 02 F1 | 	add	local01, objptr
0cb90     18 4E 85 F1 | 	sub	fp, #24
0cb94     04 16 66 F0 | 	shl	arg03, #4
0cb98     F2 16 02 F1 | 	add	arg03, objptr
0cb9c     04 16 06 F1 | 	add	arg03, #4
0cba0     0B 13 02 FB | 	rdlong	arg01, arg03
0cba4     33 00 00 FF 
0cba8     DC E5 85 F1 | 	sub	objptr, ##26588
0cbac     48 FE BF FD | 	call	#_convertstring
0cbb0     04 1E 06 F1 | 	add	local01, #4
0cbb4     0F FB 61 FC | 	wrlong	result1, local01
0cbb8     18 4E 05 F1 | 	add	fp, #24
0cbbc     A7 1E 02 FB | 	rdlong	local01, fp
0cbc0     18 4E 85 F1 | 	sub	fp, #24
0cbc4     04 1E 66 F0 | 	shl	local01, #4
0cbc8     33 00 00 FF 
0cbcc     DC E5 05 F1 | 	add	objptr, ##26588
0cbd0     F2 1E 02 F1 | 	add	local01, objptr
0cbd4     0C 1E 06 F1 | 	add	local01, #12
0cbd8     0F 3F 68 FC | 	wrlong	#31, local01
0cbdc                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
0cbdc                 | '   variables(varnum).vartype=result_string
0cbdc                 | '   return
0cbdc     33 00 00 FF 
0cbe0     DC E5 85 F1 | 	sub	objptr, ##26588
0cbe4     30 05 90 FD | 	jmp	#LR__1021
0cbe8                 | LR__1000
0cbe8                 | ' for i=0 to 2 : arrid(i)=0 : next i
0cbe8     1C 4E 05 F1 | 	add	fp, #28
0cbec     A7 00 68 FC | 	wrlong	#0, fp
0cbf0     97 16 48 FB | 	callpa	#(@LR__1002-@LR__1001)>>2,fcache_load_ptr_
0cbf4                 | LR__1001
0cbf4     A7 1E 02 FB | 	rdlong	local01, fp
0cbf8     02 1E 66 F0 | 	shl	local01, #2
0cbfc     18 4E 05 F1 | 	add	fp, #24
0cc00     A7 1E 02 F1 | 	add	local01, fp
0cc04     0F 01 68 FC | 	wrlong	#0, local01
0cc08     18 4E 85 F1 | 	sub	fp, #24
0cc0c     A7 1E 02 FB | 	rdlong	local01, fp
0cc10     01 1E 06 F1 | 	add	local01, #1
0cc14     A7 1E 62 FC | 	wrlong	local01, fp
0cc18     03 1E 16 F2 | 	cmp	local01, #3 wc
0cc1c     D4 FF 9F CD |  if_b	jmp	#LR__1001
0cc20                 | LR__1002
0cc20     69 00 00 FF 
0cc24     54 E4 05 F1 | 	add	objptr, ##53844
0cc28     F2 16 02 FB | 	rdlong	arg03, objptr
0cc2c     0B 1F 02 F6 | 	mov	local01, arg03
0cc30     01 1E 66 F0 | 	shl	local01, #1
0cc34     0B 1F 02 F1 | 	add	local01, arg03
0cc38     02 1E 66 F0 | 	shl	local01, #2
0cc3c     03 00 00 FF 
0cc40     04 E4 85 F1 | 	sub	objptr, ##1540
0cc44     F2 1E 02 F1 | 	add	local01, objptr
0cc48     04 1E 06 F1 | 	add	local01, #4
0cc4c     0F 21 02 FB | 	rdlong	local02, local01
0cc50     04 4E 05 F1 | 	add	fp, #4
0cc54     A7 20 62 FC | 	wrlong	local02, fp
0cc58     20 4E 85 F1 | 	sub	fp, #32
0cc5c     66 00 00 FF 
0cc60     50 E4 85 F1 | 	sub	objptr, ##52304
0cc64     54 CC BF FD | 	call	#_pop
0cc68     A7 FA 61 FC | 	wrlong	result1, fp
0cc6c     04 4E 05 F1 | 	add	fp, #4
0cc70     A7 FC 61 FC | 	wrlong	result2, fp
0cc74     04 4E 05 F1 | 	add	fp, #4
0cc78     A7 FE 61 FC | 	wrlong	result3, fp
0cc7c                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
0cc7c                 | ' t1=pop() ' var value
0cc7c                 | ' if numpar>0 then
0cc7c     18 4E 05 F1 | 	add	fp, #24
0cc80     A7 22 02 FB | 	rdlong	local03, fp
0cc84     20 4E 85 F1 | 	sub	fp, #32
0cc88     01 22 16 F2 | 	cmp	local03, #1 wc
0cc8c     78 00 90 CD |  if_b	jmp	#LR__1005
0cc90                 | '   for i=numpar to 1 step -1
0cc90     20 4E 05 F1 | 	add	fp, #32
0cc94     A7 24 0A FB | 	rdlong	local04, fp wz
0cc98     04 4E 85 F1 | 	sub	fp, #4
0cc9c     A7 24 62 FC | 	wrlong	local04, fp
0cca0     1C 4E 85 F1 | 	sub	fp, #28
0cca4     60 00 90 AD |  if_e	jmp	#LR__1004
0cca8                 | LR__1003
0cca8     10 CC BF FD | 	call	#_pop
0ccac     0C 4E 05 F1 | 	add	fp, #12
0ccb0     A7 FA 61 FC | 	wrlong	result1, fp
0ccb4     04 4E 05 F1 | 	add	fp, #4
0ccb8     A7 FC 61 FC | 	wrlong	result2, fp
0ccbc     04 4E 05 F1 | 	add	fp, #4
0ccc0     A7 FE 61 FC | 	wrlong	result3, fp
0ccc4     08 4E 05 F1 | 	add	fp, #8
0ccc8     A7 22 02 FB | 	rdlong	local03, fp
0cccc     01 22 86 F1 | 	sub	local03, #1
0ccd0     02 22 66 F0 | 	shl	local03, #2
0ccd4     18 4E 05 F1 | 	add	fp, #24
0ccd8     A7 22 02 F1 | 	add	local03, fp
0ccdc     28 4E 85 F1 | 	sub	fp, #40
0cce0     A7 12 02 F6 | 	mov	arg01, fp
0cce4     0C 4E 85 F1 | 	sub	fp, #12
0cce8     B4 40 B0 FD | 	call	#_converttoint
0ccec     11 FB 61 FC | 	wrlong	result1, local03
0ccf0     1C 4E 05 F1 | 	add	fp, #28
0ccf4     A7 24 02 FB | 	rdlong	local04, fp
0ccf8     01 24 8E F1 | 	sub	local04, #1 wz
0ccfc     A7 24 62 FC | 	wrlong	local04, fp
0cd00     1C 4E 85 F1 | 	sub	fp, #28
0cd04     A0 FF 9F 5D |  if_ne	jmp	#LR__1003
0cd08                 | LR__1004
0cd08                 | LR__1005
0cd08     18 4E 05 F1 | 	add	fp, #24
0cd0c     A7 1E 02 FB | 	rdlong	local01, fp
0cd10     04 1E 66 F0 | 	shl	local01, #4
0cd14     33 00 00 FF 
0cd18     DC E5 05 F1 | 	add	objptr, ##26588
0cd1c     F2 1E 02 F1 | 	add	local01, objptr
0cd20     04 1E 06 F1 | 	add	local01, #4
0cd24     0F 13 02 FB | 	rdlong	arg01, local01
0cd28     0C 4E 05 F1 | 	add	fp, #12
0cd2c     A7 12 62 FC | 	wrlong	arg01, fp
0cd30     24 4E 85 F1 | 	sub	fp, #36
0cd34     33 00 00 FF 
0cd38     DC E5 85 F1 | 	sub	objptr, ##26588
0cd3c     0C 8C B0 FD | 	call	#_pslpeek
0cd40     FD 24 32 F9 | 	getword	local04, result1, #0
0cd44     28 4E 05 F1 | 	add	fp, #40
0cd48     A7 24 62 FC | 	wrlong	local04, fp
0cd4c     04 4E 85 F1 | 	sub	fp, #4
0cd50     A7 12 02 FB | 	rdlong	arg01, fp
0cd54     24 4E 85 F1 | 	sub	fp, #36
0cd58     02 12 06 F1 | 	add	arg01, #2
0cd5c     94 8B B0 FD | 	call	#_pspeek
0cd60     FD FA E1 F8 | 	getbyte	result1, result1, #0
0cd64     2C 4E 05 F1 | 	add	fp, #44
0cd68     A7 FA 61 FC | 	wrlong	result1, fp
0cd6c     08 4E 85 F1 | 	sub	fp, #8
0cd70     A7 12 02 FB | 	rdlong	arg01, fp
0cd74     09 25 02 F6 | 	mov	local04, arg01
0cd78     10 24 06 F1 | 	add	local04, #16
0cd7c     24 4E 85 F1 | 	sub	fp, #36
0cd80     04 12 06 F1 | 	add	arg01, #4
0cd84     C4 8B B0 FD | 	call	#_pslpeek
0cd88     FD 1E 02 F6 | 	mov	local01, result1
0cd8c     38 4E 05 F1 | 	add	fp, #56
0cd90     A7 20 02 FB | 	rdlong	local02, fp
0cd94     10 1F 02 FD | 	qmul	local01, local02
0cd98     04 4E 85 F1 | 	sub	fp, #4
0cd9c     A7 22 02 FB | 	rdlong	local03, fp
0cda0     10 4E 85 F1 | 	sub	fp, #16
0cda4     A7 12 02 FB | 	rdlong	arg01, fp
0cda8     24 4E 85 F1 | 	sub	fp, #36
0cdac     08 12 06 F1 | 	add	arg01, #8
0cdb0     18 20 62 FD | 	getqx	local02
0cdb4     10 23 02 F1 | 	add	local03, local02
0cdb8     90 8B B0 FD | 	call	#_pslpeek
0cdbc     FD 20 02 F6 | 	mov	local02, result1
0cdc0     24 4E 05 F1 | 	add	fp, #36
0cdc4     A7 12 02 FB | 	rdlong	arg01, fp
0cdc8     24 4E 85 F1 | 	sub	fp, #36
0cdcc     04 12 06 F1 | 	add	arg01, #4
0cdd0     78 8B B0 FD | 	call	#_pslpeek
0cdd4     FD 20 02 FD | 	qmul	local02, result1
0cdd8     3C 4E 05 F1 | 	add	fp, #60
0cddc     A7 20 02 FB | 	rdlong	local02, fp
0cde0     18 1E 62 FD | 	getqx	local01
0cde4     10 1F 02 FD | 	qmul	local01, local02
0cde8     10 4E 85 F1 | 	sub	fp, #16
0cdec     A7 20 02 FB | 	rdlong	local02, fp
0cdf0     18 1E 62 FD | 	getqx	local01
0cdf4     0F 23 02 F1 | 	add	local03, local01
0cdf8     11 21 02 FD | 	qmul	local02, local03
0cdfc     04 4E 05 F1 | 	add	fp, #4
0ce00                 | ' esize=pspeek(arrptr+2)
0ce00                 | ' 'print " in do_assign, pslpeek(arrptr+4)="; pslpeek(arrptr+4)
0ce00                 | ' 'print " in do_assign, pslpeek(arrptr+8)="; pslpeek(arrptr+8)
0ce00                 | ' 'print " in do_assign, pslpeek(arrptr+12)="; pslpeek(arrptr+12)
0ce00                 | ' 
0ce00                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
0ce00                 | ' select case arrtype
0ce00     18 22 62 FD | 	getqx	local03
0ce04     11 25 02 F1 | 	add	local04, local03
0ce08     A7 24 62 FC | 	wrlong	local04, fp
0ce0c     08 4E 85 F1 | 	sub	fp, #8
0ce10     A7 26 02 FB | 	rdlong	local05, fp
0ce14     28 4E 85 F1 | 	sub	fp, #40
0ce18     00 27 86 F1 | 	sub	local05, #256
0ce1c     0C 26 26 F3 | 	fle	local05, #12
0ce20     30 26 62 FD | 	jmprel	local05
0ce24                 | LR__1006
0ce24     30 00 90 FD | 	jmp	#LR__1007
0ce28     58 00 90 FD | 	jmp	#LR__1008
0ce2c     88 00 90 FD | 	jmp	#LR__1009
0ce30     B8 00 90 FD | 	jmp	#LR__1010
0ce34     10 01 90 FD | 	jmp	#LR__1011
0ce38     68 01 90 FD | 	jmp	#LR__1012
0ce3c     98 01 90 FD | 	jmp	#LR__1013
0ce40     C8 01 90 FD | 	jmp	#LR__1014
0ce44     F8 01 90 FD | 	jmp	#LR__1015
0ce48     28 02 90 FD | 	jmp	#LR__1016
0ce4c     58 02 90 FD | 	jmp	#LR__1017
0ce50     88 02 90 FD | 	jmp	#LR__1018
0ce54     B8 02 90 FD | 	jmp	#LR__1019
0ce58                 | LR__1007
0ce58     A7 12 02 F6 | 	mov	arg01, fp
0ce5c     30 4E 05 F1 | 	add	fp, #48
0ce60     A7 14 02 FB | 	rdlong	arg02, fp
0ce64     30 4E 85 F1 | 	sub	fp, #48
0ce68     0C 16 06 F6 | 	mov	arg03, #12
0ce6c     0B 00 00 FF 
0ce70     C0 E4 05 F1 | 	add	objptr, ##5824
0ce74     E8 B3 B0 FD | 	call	#_psram_spin2_write
0ce78     0B 00 00 FF 
0ce7c     C0 E4 85 F1 | 	sub	objptr, ##5824
0ce80     94 02 90 FD | 	jmp	#LR__1020
0ce84                 | LR__1008
0ce84     30 4E 05 F1 | 	add	fp, #48
0ce88     A7 12 02 FB | 	rdlong	arg01, fp
0ce8c     30 4E 85 F1 | 	sub	fp, #48
0ce90     A7 14 02 FB | 	rdlong	arg02, fp
0ce94     01 16 06 F6 | 	mov	arg03, #1
0ce98     00 18 06 F6 | 	mov	arg04, #0
0ce9c     0B 00 00 FF 
0cea0     C0 E4 05 F1 | 	add	objptr, ##5824
0cea4                 | '     return fill(addr, pattern, count, listPtr, 1)
0cea4     01 1A 06 F6 | 	mov	arg05, #1
0cea8     50 B4 B0 FD | 	call	#_psram_spin2_fill
0ceac     0B 00 00 FF 
0ceb0     C0 E4 85 F1 | 	sub	objptr, ##5824
0ceb4     60 02 90 FD | 	jmp	#LR__1020
0ceb8                 | LR__1009
0ceb8     30 4E 05 F1 | 	add	fp, #48
0cebc     A7 12 02 FB | 	rdlong	arg01, fp
0cec0     30 4E 85 F1 | 	sub	fp, #48
0cec4     A7 14 02 FB | 	rdlong	arg02, fp
0cec8     01 16 06 F6 | 	mov	arg03, #1
0cecc     00 18 06 F6 | 	mov	arg04, #0
0ced0     0B 00 00 FF 
0ced4     C0 E4 05 F1 | 	add	objptr, ##5824
0ced8                 | '     return fill(addr, pattern, count, listPtr, 1)
0ced8     01 1A 06 F6 | 	mov	arg05, #1
0cedc     1C B4 B0 FD | 	call	#_psram_spin2_fill
0cee0     0B 00 00 FF 
0cee4     C0 E4 85 F1 | 	sub	objptr, ##5824
0cee8     2C 02 90 FD | 	jmp	#LR__1020
0ceec                 | LR__1010
0ceec     30 4E 05 F1 | 	add	fp, #48
0cef0     A7 12 02 FB | 	rdlong	arg01, fp
0cef4     30 4E 85 F1 | 	sub	fp, #48
0cef8     A7 14 02 FB | 	rdlong	arg02, fp
0cefc     01 16 06 F6 | 	mov	arg03, #1
0cf00     00 18 06 F6 | 	mov	arg04, #0
0cf04     0B 00 00 FF 
0cf08     C0 E4 05 F1 | 	add	objptr, ##5824
0cf0c                 | '     return fill(addr, pattern, count, listPtr, 1)
0cf0c     01 1A 06 F6 | 	mov	arg05, #1
0cf10     E8 B3 B0 FD | 	call	#_psram_spin2_fill
0cf14     30 4E 05 F1 | 	add	fp, #48
0cf18     A7 12 02 FB | 	rdlong	arg01, fp
0cf1c     30 4E 85 F1 | 	sub	fp, #48
0cf20     01 12 06 F1 | 	add	arg01, #1
0cf24     A7 14 02 FB | 	rdlong	arg02, fp
0cf28     08 14 46 F0 | 	shr	arg02, #8
0cf2c     01 16 06 F6 | 	mov	arg03, #1
0cf30     00 18 06 F6 | 	mov	arg04, #0
0cf34                 | '     return fill(addr, pattern, count, listPtr, 1)
0cf34     01 1A 06 F6 | 	mov	arg05, #1
0cf38     C0 B3 B0 FD | 	call	#_psram_spin2_fill
0cf3c     0B 00 00 FF 
0cf40     C0 E4 85 F1 | 	sub	objptr, ##5824
0cf44     D0 01 90 FD | 	jmp	#LR__1020
0cf48                 | LR__1011
0cf48     30 4E 05 F1 | 	add	fp, #48
0cf4c     A7 12 02 FB | 	rdlong	arg01, fp
0cf50     30 4E 85 F1 | 	sub	fp, #48
0cf54     A7 14 02 FB | 	rdlong	arg02, fp
0cf58     01 16 06 F6 | 	mov	arg03, #1
0cf5c     00 18 06 F6 | 	mov	arg04, #0
0cf60     0B 00 00 FF 
0cf64     C0 E4 05 F1 | 	add	objptr, ##5824
0cf68                 | '     return fill(addr, pattern, count, listPtr, 1)
0cf68     01 1A 06 F6 | 	mov	arg05, #1
0cf6c     8C B3 B0 FD | 	call	#_psram_spin2_fill
0cf70     30 4E 05 F1 | 	add	fp, #48
0cf74     A7 12 02 FB | 	rdlong	arg01, fp
0cf78     30 4E 85 F1 | 	sub	fp, #48
0cf7c     01 12 06 F1 | 	add	arg01, #1
0cf80     A7 14 02 FB | 	rdlong	arg02, fp
0cf84     08 14 46 F0 | 	shr	arg02, #8
0cf88     01 16 06 F6 | 	mov	arg03, #1
0cf8c     00 18 06 F6 | 	mov	arg04, #0
0cf90                 | '     return fill(addr, pattern, count, listPtr, 1)
0cf90     01 1A 06 F6 | 	mov	arg05, #1
0cf94     64 B3 B0 FD | 	call	#_psram_spin2_fill
0cf98     0B 00 00 FF 
0cf9c     C0 E4 85 F1 | 	sub	objptr, ##5824
0cfa0     74 01 90 FD | 	jmp	#LR__1020
0cfa4                 | LR__1012
0cfa4     30 4E 05 F1 | 	add	fp, #48
0cfa8     A7 12 02 FB | 	rdlong	arg01, fp
0cfac     30 4E 85 F1 | 	sub	fp, #48
0cfb0     A7 14 02 FB | 	rdlong	arg02, fp
0cfb4     01 16 06 F6 | 	mov	arg03, #1
0cfb8     00 18 06 F6 | 	mov	arg04, #0
0cfbc     0B 00 00 FF 
0cfc0     C0 E4 05 F1 | 	add	objptr, ##5824
0cfc4                 | '     return fill(addr, pattern, count, listPtr, 4)
0cfc4     04 1A 06 F6 | 	mov	arg05, #4
0cfc8     30 B3 B0 FD | 	call	#_psram_spin2_fill
0cfcc     0B 00 00 FF 
0cfd0     C0 E4 85 F1 | 	sub	objptr, ##5824
0cfd4     40 01 90 FD | 	jmp	#LR__1020
0cfd8                 | LR__1013
0cfd8     30 4E 05 F1 | 	add	fp, #48
0cfdc     A7 12 02 FB | 	rdlong	arg01, fp
0cfe0     30 4E 85 F1 | 	sub	fp, #48
0cfe4     A7 14 02 FB | 	rdlong	arg02, fp
0cfe8     01 16 06 F6 | 	mov	arg03, #1
0cfec     00 18 06 F6 | 	mov	arg04, #0
0cff0     0B 00 00 FF 
0cff4     C0 E4 05 F1 | 	add	objptr, ##5824
0cff8                 | '     return fill(addr, pattern, count, listPtr, 4)
0cff8     04 1A 06 F6 | 	mov	arg05, #4
0cffc     FC B2 B0 FD | 	call	#_psram_spin2_fill
0d000     0B 00 00 FF 
0d004     C0 E4 85 F1 | 	sub	objptr, ##5824
0d008     0C 01 90 FD | 	jmp	#LR__1020
0d00c                 | LR__1014
0d00c     30 4E 05 F1 | 	add	fp, #48
0d010     A7 12 02 FB | 	rdlong	arg01, fp
0d014     30 4E 85 F1 | 	sub	fp, #48
0d018     A7 14 02 FB | 	rdlong	arg02, fp
0d01c     01 16 06 F6 | 	mov	arg03, #1
0d020     00 18 06 F6 | 	mov	arg04, #0
0d024     0B 00 00 FF 
0d028     C0 E4 05 F1 | 	add	objptr, ##5824
0d02c                 | '     return fill(addr, pattern, count, listPtr, 4)
0d02c     04 1A 06 F6 | 	mov	arg05, #4
0d030     C8 B2 B0 FD | 	call	#_psram_spin2_fill
0d034     0B 00 00 FF 
0d038     C0 E4 85 F1 | 	sub	objptr, ##5824
0d03c     D8 00 90 FD | 	jmp	#LR__1020
0d040                 | LR__1015
0d040     30 4E 05 F1 | 	add	fp, #48
0d044     A7 12 02 FB | 	rdlong	arg01, fp
0d048     30 4E 85 F1 | 	sub	fp, #48
0d04c     A7 14 02 FB | 	rdlong	arg02, fp
0d050     01 16 06 F6 | 	mov	arg03, #1
0d054     00 18 06 F6 | 	mov	arg04, #0
0d058     0B 00 00 FF 
0d05c     C0 E4 05 F1 | 	add	objptr, ##5824
0d060                 | '     return fill(addr, pattern, count, listPtr, 4)
0d060     04 1A 06 F6 | 	mov	arg05, #4
0d064     94 B2 B0 FD | 	call	#_psram_spin2_fill
0d068     0B 00 00 FF 
0d06c     C0 E4 85 F1 | 	sub	objptr, ##5824
0d070     A4 00 90 FD | 	jmp	#LR__1020
0d074                 | LR__1016
0d074     30 4E 05 F1 | 	add	fp, #48
0d078     A7 12 02 FB | 	rdlong	arg01, fp
0d07c     30 4E 85 F1 | 	sub	fp, #48
0d080     A7 14 02 FB | 	rdlong	arg02, fp
0d084     01 16 06 F6 | 	mov	arg03, #1
0d088     00 18 06 F6 | 	mov	arg04, #0
0d08c     0B 00 00 FF 
0d090     C0 E4 05 F1 | 	add	objptr, ##5824
0d094                 | '     return fill(addr, pattern, count, listPtr, 4)
0d094     04 1A 06 F6 | 	mov	arg05, #4
0d098     60 B2 B0 FD | 	call	#_psram_spin2_fill
0d09c     0B 00 00 FF 
0d0a0     C0 E4 85 F1 | 	sub	objptr, ##5824
0d0a4     70 00 90 FD | 	jmp	#LR__1020
0d0a8                 | LR__1017
0d0a8     30 4E 05 F1 | 	add	fp, #48
0d0ac     A7 12 02 FB | 	rdlong	arg01, fp
0d0b0     30 4E 85 F1 | 	sub	fp, #48
0d0b4     A7 14 02 FB | 	rdlong	arg02, fp
0d0b8     01 16 06 F6 | 	mov	arg03, #1
0d0bc     00 18 06 F6 | 	mov	arg04, #0
0d0c0     0B 00 00 FF 
0d0c4     C0 E4 05 F1 | 	add	objptr, ##5824
0d0c8                 | '     return fill(addr, pattern, count, listPtr, 4)
0d0c8     04 1A 06 F6 | 	mov	arg05, #4
0d0cc     2C B2 B0 FD | 	call	#_psram_spin2_fill
0d0d0     0B 00 00 FF 
0d0d4     C0 E4 85 F1 | 	sub	objptr, ##5824
0d0d8     3C 00 90 FD | 	jmp	#LR__1020
0d0dc                 | LR__1018
0d0dc     30 4E 05 F1 | 	add	fp, #48
0d0e0     A7 12 02 FB | 	rdlong	arg01, fp
0d0e4     30 4E 85 F1 | 	sub	fp, #48
0d0e8     A7 14 02 FB | 	rdlong	arg02, fp
0d0ec     01 16 06 F6 | 	mov	arg03, #1
0d0f0     00 18 06 F6 | 	mov	arg04, #0
0d0f4     0B 00 00 FF 
0d0f8     C0 E4 05 F1 | 	add	objptr, ##5824
0d0fc                 | '     return fill(addr, pattern, count, listPtr, 4)
0d0fc     04 1A 06 F6 | 	mov	arg05, #4
0d100     F8 B1 B0 FD | 	call	#_psram_spin2_fill
0d104     0B 00 00 FF 
0d108     C0 E4 85 F1 | 	sub	objptr, ##5824
0d10c     08 00 90 FD | 	jmp	#LR__1020
0d110                 | LR__1019
0d110     2F 12 06 F6 | 	mov	arg01, #47
0d114     78 86 B0 FD | 	call	#_printerror
0d118                 | LR__1020
0d118                 | LR__1021
0d118     A7 F0 03 F6 | 	mov	ptra, fp
0d11c     B2 00 A0 FD | 	call	#popregs_
0d120                 | _do_assign_ret
0d120     2D 00 64 FD | 	ret
0d124                 | 
0d124                 | ' 
0d124                 | ' 
0d124                 | ' ' --------------------- Read a variable and push to the stack
0d124                 | ' 
0d124                 | ' ' getvar : fun_getvar, var#, numpar. Var, if array, has array type and a pointer
0d124                 | ' 
0d124                 | ' sub do_getvar
0d124                 | _do_getvar
0d124     04 4A 05 F6 | 	mov	COUNT_, #4
0d128     A8 00 A0 FD | 	call	#pushregs_
0d12c     3C F0 07 F1 | 	add	ptra, #60
0d130                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
0d130                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
0d130     69 00 00 FF 
0d134     54 E4 05 F1 | 	add	objptr, ##53844
0d138     F2 1E 02 FB | 	rdlong	local01, objptr
0d13c     0F 17 02 F6 | 	mov	arg03, local01
0d140     01 16 66 F0 | 	shl	arg03, #1
0d144     0F 17 02 F1 | 	add	arg03, local01
0d148     02 16 66 F0 | 	shl	arg03, #2
0d14c     03 00 00 FF 
0d150     04 E4 85 F1 | 	sub	objptr, ##1540
0d154     F2 16 02 F1 | 	add	arg03, objptr
0d158     04 16 06 F1 | 	add	arg03, #4
0d15c     0B 17 0A FB | 	rdlong	arg03, arg03 wz
0d160     66 00 00 FF 
0d164     50 E4 85 F1 | 	sub	objptr, ##52304
0d168     C4 00 90 5D |  if_ne	jmp	#LR__1031
0d16c     69 00 00 FF 
0d170     54 E4 05 F1 | 	add	objptr, ##53844
0d174     F2 1E 02 FB | 	rdlong	local01, objptr
0d178     0F 13 02 F6 | 	mov	arg01, local01
0d17c     01 12 66 F0 | 	shl	arg01, #1
0d180     0F 13 02 F1 | 	add	arg01, local01
0d184     02 12 66 F0 | 	shl	arg01, #2
0d188     03 00 00 FF 
0d18c     04 E4 85 F1 | 	sub	objptr, ##1540
0d190     F2 12 02 F1 | 	add	arg01, objptr
0d194     09 1F 02 FB | 	rdlong	local01, arg01
0d198     04 1E 66 F0 | 	shl	local01, #4
0d19c     32 00 00 FF 
0d1a0     74 E4 85 F1 | 	sub	objptr, ##25716
0d1a4     F2 1E 02 F1 | 	add	local01, objptr
0d1a8     04 1E 06 F1 | 	add	local01, #4
0d1ac     0F 13 02 FB | 	rdlong	arg01, local01
0d1b0     04 1E 06 F1 | 	add	local01, #4
0d1b4     0F 1F 02 FB | 	rdlong	local01, local01
0d1b8     A7 12 62 FC | 	wrlong	arg01, fp
0d1bc     04 4E 05 F1 | 	add	fp, #4
0d1c0     A7 1E 62 FC | 	wrlong	local01, fp
0d1c4     35 00 00 FF 
0d1c8     78 E4 05 F1 | 	add	objptr, ##27256
0d1cc     F2 1E 02 FB | 	rdlong	local01, objptr
0d1d0     0F 13 02 F6 | 	mov	arg01, local01
0d1d4     01 12 66 F0 | 	shl	arg01, #1
0d1d8     0F 13 02 F1 | 	add	arg01, local01
0d1dc     02 12 66 F0 | 	shl	arg01, #2
0d1e0     03 00 00 FF 
0d1e4     04 E4 85 F1 | 	sub	objptr, ##1540
0d1e8     F2 12 02 F1 | 	add	arg01, objptr
0d1ec     09 1F 02 FB | 	rdlong	local01, arg01
0d1f0     04 1E 66 F0 | 	shl	local01, #4
0d1f4     32 00 00 FF 
0d1f8     74 E4 85 F1 | 	sub	objptr, ##25716
0d1fc     F2 1E 02 F1 | 	add	local01, objptr
0d200     0C 1E 06 F1 | 	add	local01, #12
0d204     0F 1F 02 FB | 	rdlong	local01, local01
0d208     04 4E 05 F1 | 	add	fp, #4
0d20c     A7 1E 62 FC | 	wrlong	local01, fp
0d210                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
0d210                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
0d210                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
0d210     08 4E 85 F1 | 	sub	fp, #8
0d214     00 1F 16 F2 | 	cmp	local01, #256 wc
0d218     33 00 00 FF 
0d21c     DC E5 85 F1 | 	sub	objptr, ##26588
0d220     0C 00 90 3D |  if_ae	jmp	#LR__1030
0d224     A7 12 02 F6 | 	mov	arg01, fp
0d228     28 C7 BF FD | 	call	#_push
0d22c     A0 04 90 FD | 	jmp	#LR__1052
0d230                 | LR__1030
0d230                 | LR__1031
0d230     69 00 00 FF 
0d234     54 E4 05 F1 | 	add	objptr, ##53844
0d238     F2 16 02 FB | 	rdlong	arg03, objptr
0d23c     0B 15 02 F6 | 	mov	arg02, arg03
0d240     01 14 66 F0 | 	shl	arg02, #1
0d244     0B 15 02 F1 | 	add	arg02, arg03
0d248     02 14 66 F0 | 	shl	arg02, #2
0d24c     03 00 00 FF 
0d250     04 E4 85 F1 | 	sub	objptr, ##1540
0d254     F2 14 02 F1 | 	add	arg02, objptr
0d258     0A 17 02 FB | 	rdlong	arg03, arg02
0d25c     04 16 66 F0 | 	shl	arg03, #4
0d260     32 00 00 FF 
0d264     74 E4 85 F1 | 	sub	objptr, ##25716
0d268     F2 16 02 F1 | 	add	arg03, objptr
0d26c     04 16 06 F1 | 	add	arg03, #4
0d270     0B 13 02 FB | 	rdlong	arg01, arg03
0d274     0C 4E 05 F1 | 	add	fp, #12
0d278     A7 12 62 FC | 	wrlong	arg01, fp
0d27c     0C 4E 85 F1 | 	sub	fp, #12
0d280     33 00 00 FF 
0d284     DC E5 85 F1 | 	sub	objptr, ##26588
0d288     C0 86 B0 FD | 	call	#_pslpeek
0d28c     FD FA 31 F9 | 	getword	result1, result1, #0
0d290     10 4E 05 F1 | 	add	fp, #16
0d294     A7 FA 61 FC | 	wrlong	result1, fp
0d298     69 00 00 FF 
0d29c     54 E4 05 F1 | 	add	objptr, ##53844
0d2a0     F2 16 02 FB | 	rdlong	arg03, objptr
0d2a4     0B 15 02 F6 | 	mov	arg02, arg03
0d2a8     01 14 66 F0 | 	shl	arg02, #1
0d2ac     0B 15 02 F1 | 	add	arg02, arg03
0d2b0     02 14 66 F0 | 	shl	arg02, #2
0d2b4     03 00 00 FF 
0d2b8     04 E4 85 F1 | 	sub	objptr, ##1540
0d2bc     F2 14 02 F1 | 	add	arg02, objptr
0d2c0     04 14 06 F1 | 	add	arg02, #4
0d2c4     0A 17 02 FB | 	rdlong	arg03, arg02
0d2c8     04 4E 05 F1 | 	add	fp, #4
0d2cc     A7 16 62 FC | 	wrlong	arg03, fp
0d2d0     08 4E 85 F1 | 	sub	fp, #8
0d2d4     A7 12 02 FB | 	rdlong	arg01, fp
0d2d8     0C 4E 85 F1 | 	sub	fp, #12
0d2dc     02 12 06 F1 | 	add	arg01, #2
0d2e0     66 00 00 FF 
0d2e4     50 E4 85 F1 | 	sub	objptr, ##52304
0d2e8     08 86 B0 FD | 	call	#_pspeek
0d2ec     FD FA E1 F8 | 	getbyte	result1, result1, #0
0d2f0     18 4E 05 F1 | 	add	fp, #24
0d2f4     A7 FA 61 FC | 	wrlong	result1, fp
0d2f8     0C 4E 85 F1 | 	sub	fp, #12
0d2fc     A7 12 02 FB | 	rdlong	arg01, fp
0d300     0C 4E 85 F1 | 	sub	fp, #12
0d304     04 12 06 F1 | 	add	arg01, #4
0d308     40 86 B0 FD | 	call	#_pslpeek
0d30c     1C 4E 05 F1 | 	add	fp, #28
0d310     A7 FA 61 FC | 	wrlong	result1, fp
0d314     10 4E 85 F1 | 	sub	fp, #16
0d318     A7 12 02 FB | 	rdlong	arg01, fp
0d31c     0C 4E 85 F1 | 	sub	fp, #12
0d320     08 12 06 F1 | 	add	arg01, #8
0d324     24 86 B0 FD | 	call	#_pslpeek
0d328     20 4E 05 F1 | 	add	fp, #32
0d32c     A7 FA 61 FC | 	wrlong	result1, fp
0d330     14 4E 85 F1 | 	sub	fp, #20
0d334     A7 12 02 FB | 	rdlong	arg01, fp
0d338     0C 4E 85 F1 | 	sub	fp, #12
0d33c     0C 12 06 F1 | 	add	arg01, #12
0d340     08 86 B0 FD | 	call	#_pslpeek
0d344     24 4E 05 F1 | 	add	fp, #36
0d348     A7 FA 61 FC | 	wrlong	result1, fp
0d34c                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
0d34c                 | ' esize=pspeek(arrptr+2)
0d34c                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
0d34c                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
0d34c                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
0d34c                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
0d34c     10 4E 85 F1 | 	sub	fp, #16
0d350     A7 16 02 FB | 	rdlong	arg03, fp
0d354     14 4E 85 F1 | 	sub	fp, #20
0d358     03 16 16 F2 | 	cmp	arg03, #3 wc
0d35c     38 00 90 CD |  if_b	jmp	#LR__1032
0d360     58 C5 BF FD | 	call	#_pop
0d364     FF 16 02 F6 | 	mov	arg03, result3
0d368     A7 FA 61 FC | 	wrlong	result1, fp
0d36c     04 4E 05 F1 | 	add	fp, #4
0d370     A7 FC 61 FC | 	wrlong	result2, fp
0d374     04 4E 05 F1 | 	add	fp, #4
0d378     A7 16 62 FC | 	wrlong	arg03, fp
0d37c     08 4E 85 F1 | 	sub	fp, #8
0d380     A7 12 02 F6 | 	mov	arg01, fp
0d384     18 3A B0 FD | 	call	#_converttoint
0d388     30 4E 05 F1 | 	add	fp, #48
0d38c     A7 FA 61 FC | 	wrlong	result1, fp
0d390     30 4E 85 F1 | 	sub	fp, #48
0d394     0C 00 90 FD | 	jmp	#LR__1033
0d398                 | LR__1032
0d398     30 4E 05 F1 | 	add	fp, #48
0d39c     A7 00 68 FC | 	wrlong	#0, fp
0d3a0     30 4E 85 F1 | 	sub	fp, #48
0d3a4                 | LR__1033
0d3a4                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
0d3a4     14 4E 05 F1 | 	add	fp, #20
0d3a8     A7 16 02 FB | 	rdlong	arg03, fp
0d3ac     14 4E 85 F1 | 	sub	fp, #20
0d3b0     02 16 16 F2 | 	cmp	arg03, #2 wc
0d3b4     38 00 90 CD |  if_b	jmp	#LR__1034
0d3b8     00 C5 BF FD | 	call	#_pop
0d3bc     FF 16 02 F6 | 	mov	arg03, result3
0d3c0     A7 FA 61 FC | 	wrlong	result1, fp
0d3c4     04 4E 05 F1 | 	add	fp, #4
0d3c8     A7 FC 61 FC | 	wrlong	result2, fp
0d3cc     04 4E 05 F1 | 	add	fp, #4
0d3d0     A7 16 62 FC | 	wrlong	arg03, fp
0d3d4     08 4E 85 F1 | 	sub	fp, #8
0d3d8     A7 12 02 F6 | 	mov	arg01, fp
0d3dc     C0 39 B0 FD | 	call	#_converttoint
0d3e0     2C 4E 05 F1 | 	add	fp, #44
0d3e4     A7 FA 61 FC | 	wrlong	result1, fp
0d3e8     2C 4E 85 F1 | 	sub	fp, #44
0d3ec     0C 00 90 FD | 	jmp	#LR__1035
0d3f0                 | LR__1034
0d3f0     2C 4E 05 F1 | 	add	fp, #44
0d3f4     A7 00 68 FC | 	wrlong	#0, fp
0d3f8     2C 4E 85 F1 | 	sub	fp, #44
0d3fc                 | LR__1035
0d3fc                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
0d3fc     14 4E 05 F1 | 	add	fp, #20
0d400     A7 16 02 FB | 	rdlong	arg03, fp
0d404     14 4E 85 F1 | 	sub	fp, #20
0d408     01 16 16 F2 | 	cmp	arg03, #1 wc
0d40c     38 00 90 CD |  if_b	jmp	#LR__1036
0d410     A8 C4 BF FD | 	call	#_pop
0d414     FF 16 02 F6 | 	mov	arg03, result3
0d418     A7 FA 61 FC | 	wrlong	result1, fp
0d41c     04 4E 05 F1 | 	add	fp, #4
0d420     A7 FC 61 FC | 	wrlong	result2, fp
0d424     04 4E 05 F1 | 	add	fp, #4
0d428     A7 16 62 FC | 	wrlong	arg03, fp
0d42c     08 4E 85 F1 | 	sub	fp, #8
0d430     A7 12 02 F6 | 	mov	arg01, fp
0d434     68 39 B0 FD | 	call	#_converttoint
0d438     28 4E 05 F1 | 	add	fp, #40
0d43c     A7 FA 61 FC | 	wrlong	result1, fp
0d440     28 4E 85 F1 | 	sub	fp, #40
0d444     0C 00 90 FD | 	jmp	#LR__1037
0d448                 | LR__1036
0d448     28 4E 05 F1 | 	add	fp, #40
0d44c     A7 00 68 FC | 	wrlong	#0, fp
0d450     28 4E 85 F1 | 	sub	fp, #40
0d454                 | LR__1037
0d454     0C 4E 05 F1 | 	add	fp, #12
0d458     A7 20 02 FB | 	rdlong	local02, fp
0d45c     1C 4E 05 F1 | 	add	fp, #28
0d460     A7 22 02 FB | 	rdlong	local03, fp
0d464     04 4E 05 F1 | 	add	fp, #4
0d468     A7 FC 01 FB | 	rdlong	result2, fp
0d46c     10 4E 85 F1 | 	sub	fp, #16
0d470     A7 FE 01 FB | 	rdlong	result3, fp
0d474     FF FC 01 FD | 	qmul	result2, result3
0d478     10 20 06 F1 | 	add	local02, #16
0d47c     14 4E 05 F1 | 	add	fp, #20
0d480     A7 FC 01 FB | 	rdlong	result2, fp
0d484     18 FA 61 FD | 	getqx	result1
0d488     FF FC 01 FD | 	qmul	result2, result3
0d48c     FD 22 02 F1 | 	add	local03, result1
0d490     10 4E 85 F1 | 	sub	fp, #16
0d494     A7 FE 01 FB | 	rdlong	result3, fp
0d498     18 FC 61 FD | 	getqx	result2
0d49c     FF FC 01 FD | 	qmul	result2, result3
0d4a0     08 4E 85 F1 | 	sub	fp, #8
0d4a4     A7 FE 01 FB | 	rdlong	result3, fp
0d4a8     18 FC 61 FD | 	getqx	result2
0d4ac     FE 22 02 F1 | 	add	local03, result2
0d4b0     FF 22 02 FD | 	qmul	local03, result3
0d4b4     1C 4E 05 F1 | 	add	fp, #28
0d4b8                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
0d4b8                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize ': print "arrptr=",arrptr,"varidx=",varidx,"memtop=",memtop,"bufptr=",v.buf_ptr
0d4b8                 | ' 
0d4b8                 | ' select case vartype
0d4b8     18 FC 61 FD | 	getqx	result2
0d4bc     FE 20 02 F1 | 	add	local02, result2
0d4c0     A7 20 62 FC | 	wrlong	local02, fp
0d4c4     24 4E 85 F1 | 	sub	fp, #36
0d4c8     A7 24 02 FB | 	rdlong	local04, fp
0d4cc     10 4E 85 F1 | 	sub	fp, #16
0d4d0     00 25 86 F1 | 	sub	local04, #256
0d4d4     0C 24 26 F3 | 	fle	local04, #12
0d4d8     30 24 62 FD | 	jmprel	local04
0d4dc                 | LR__1038
0d4dc     30 00 90 FD | 	jmp	#LR__1039
0d4e0     58 00 90 FD | 	jmp	#LR__1040
0d4e4     8C 00 90 FD | 	jmp	#LR__1041
0d4e8     AC 00 90 FD | 	jmp	#LR__1042
0d4ec     E8 00 90 FD | 	jmp	#LR__1043
0d4f0     08 01 90 FD | 	jmp	#LR__1044
0d4f4     24 01 90 FD | 	jmp	#LR__1045
0d4f8     40 01 90 FD | 	jmp	#LR__1046
0d4fc     50 01 90 FD | 	jmp	#LR__1047
0d500     60 01 90 FD | 	jmp	#LR__1048
0d504     7C 01 90 FD | 	jmp	#LR__1049
0d508     8C 01 90 FD | 	jmp	#LR__1050
0d50c     B8 01 90 FD | 	jmp	#LR__1051
0d510                 | LR__1039
0d510     A7 12 02 F6 | 	mov	arg01, fp
0d514     34 4E 05 F1 | 	add	fp, #52
0d518     A7 14 02 FB | 	rdlong	arg02, fp
0d51c     34 4E 85 F1 | 	sub	fp, #52
0d520     0C 16 06 F6 | 	mov	arg03, #12
0d524     0B 00 00 FF 
0d528     C0 E4 05 F1 | 	add	objptr, ##5824
0d52c     94 AC B0 FD | 	call	#_psram_spin2_read1
0d530     0B 00 00 FF 
0d534     C0 E4 85 F1 | 	sub	objptr, ##5824
0d538     8C 01 90 FD | 	jmp	#LR__1051
0d53c                 | LR__1040
0d53c     08 4E 05 F1 | 	add	fp, #8
0d540     A7 38 68 FC | 	wrlong	#28, fp
0d544     2C 4E 05 F1 | 	add	fp, #44
0d548     A7 12 02 FB | 	rdlong	arg01, fp
0d54c     34 4E 85 F1 | 	sub	fp, #52
0d550     A0 83 B0 FD | 	call	#_pspeek
0d554     FD FA E1 F8 | 	getbyte	result1, result1, #0
0d558     A7 FA 61 FC | 	wrlong	result1, fp
0d55c     80 FA 15 F2 | 	cmp	result1, #128 wc
0d560     00 1F 66 36 |  if_ae	neg	local01, #256
0d564     A7 22 02 3B |  if_ae	rdlong	local03, fp
0d568     11 1F 42 35 |  if_ae	or	local01, local03
0d56c     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0d570     54 01 90 FD | 	jmp	#LR__1051
0d574                 | LR__1041
0d574     08 4E 05 F1 | 	add	fp, #8
0d578     A7 3A 68 FC | 	wrlong	#29, fp
0d57c     2C 4E 05 F1 | 	add	fp, #44
0d580     A7 12 02 FB | 	rdlong	arg01, fp
0d584     34 4E 85 F1 | 	sub	fp, #52
0d588     68 83 B0 FD | 	call	#_pspeek
0d58c     FD FA E1 F8 | 	getbyte	result1, result1, #0
0d590     A7 FA 61 FC | 	wrlong	result1, fp
0d594     30 01 90 FD | 	jmp	#LR__1051
0d598                 | LR__1042
0d598     08 4E 05 F1 | 	add	fp, #8
0d59c     A7 38 68 FC | 	wrlong	#28, fp
0d5a0     2C 4E 05 F1 | 	add	fp, #44
0d5a4     A7 12 02 FB | 	rdlong	arg01, fp
0d5a8     34 4E 85 F1 | 	sub	fp, #52
0d5ac     9C 83 B0 FD | 	call	#_pslpeek
0d5b0     FD FA 31 F9 | 	getword	result1, result1, #0
0d5b4     A7 FA 61 FC | 	wrlong	result1, fp
0d5b8     40 00 00 FF 
0d5bc     00 FA 15 F2 | 	cmp	result1, ##32768 wc
0d5c0     FF 7F 00 3F 
0d5c4     00 1F 06 36 |  if_ae	mov	local01, ##16776960
0d5c8     A7 22 02 3B |  if_ae	rdlong	local03, fp
0d5cc     11 1F 42 35 |  if_ae	or	local01, local03
0d5d0     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0d5d4     F0 00 90 FD | 	jmp	#LR__1051
0d5d8                 | LR__1043
0d5d8     08 4E 05 F1 | 	add	fp, #8
0d5dc     A7 3A 68 FC | 	wrlong	#29, fp
0d5e0     2C 4E 05 F1 | 	add	fp, #44
0d5e4     A7 12 02 FB | 	rdlong	arg01, fp
0d5e8     34 4E 85 F1 | 	sub	fp, #52
0d5ec     5C 83 B0 FD | 	call	#_pslpeek
0d5f0     FD FA 31 F9 | 	getword	result1, result1, #0
0d5f4     A7 FA 61 FC | 	wrlong	result1, fp
0d5f8     CC 00 90 FD | 	jmp	#LR__1051
0d5fc                 | LR__1044
0d5fc     08 4E 05 F1 | 	add	fp, #8
0d600     A7 38 68 FC | 	wrlong	#28, fp
0d604     2C 4E 05 F1 | 	add	fp, #44
0d608     A7 12 02 FB | 	rdlong	arg01, fp
0d60c     34 4E 85 F1 | 	sub	fp, #52
0d610     38 83 B0 FD | 	call	#_pslpeek
0d614     A7 FA 61 FC | 	wrlong	result1, fp
0d618     AC 00 90 FD | 	jmp	#LR__1051
0d61c                 | LR__1045
0d61c     08 4E 05 F1 | 	add	fp, #8
0d620     A7 3A 68 FC | 	wrlong	#29, fp
0d624     2C 4E 05 F1 | 	add	fp, #44
0d628     A7 12 02 FB | 	rdlong	arg01, fp
0d62c     34 4E 85 F1 | 	sub	fp, #52
0d630     18 83 B0 FD | 	call	#_pslpeek
0d634     A7 FA 61 FC | 	wrlong	result1, fp
0d638     8C 00 90 FD | 	jmp	#LR__1051
0d63c                 | LR__1046
0d63c     08 4E 05 F1 | 	add	fp, #8
0d640     A7 FE 69 FC | 	wrlong	#255, fp
0d644     08 4E 85 F1 | 	sub	fp, #8
0d648     A7 60 68 FC | 	wrlong	#48, fp
0d64c     78 00 90 FD | 	jmp	#LR__1051
0d650                 | LR__1047
0d650     08 4E 05 F1 | 	add	fp, #8
0d654     A7 FE 69 FC | 	wrlong	#255, fp
0d658     08 4E 85 F1 | 	sub	fp, #8
0d65c     A7 60 68 FC | 	wrlong	#48, fp
0d660     64 00 90 FD | 	jmp	#LR__1051
0d664                 | LR__1048
0d664     08 4E 05 F1 | 	add	fp, #8
0d668     A7 3C 68 FC | 	wrlong	#30, fp
0d66c     2C 4E 05 F1 | 	add	fp, #44
0d670     A7 12 02 FB | 	rdlong	arg01, fp
0d674     34 4E 85 F1 | 	sub	fp, #52
0d678     D0 82 B0 FD | 	call	#_pslpeek
0d67c     A7 FA 61 FC | 	wrlong	result1, fp
0d680     44 00 90 FD | 	jmp	#LR__1051
0d684                 | LR__1049
0d684     08 4E 05 F1 | 	add	fp, #8
0d688     A7 FE 69 FC | 	wrlong	#255, fp
0d68c     08 4E 85 F1 | 	sub	fp, #8
0d690     A7 60 68 FC | 	wrlong	#48, fp
0d694     30 00 90 FD | 	jmp	#LR__1051
0d698                 | LR__1050
0d698     08 4E 05 F1 | 	add	fp, #8
0d69c     A7 3E 68 FC | 	wrlong	#31, fp
0d6a0     2C 4E 05 F1 | 	add	fp, #44
0d6a4     A7 12 02 FB | 	rdlong	arg01, fp
0d6a8     34 4E 85 F1 | 	sub	fp, #52
0d6ac     9C 82 B0 FD | 	call	#_pslpeek
0d6b0     A7 FA 61 FC | 	wrlong	result1, fp
0d6b4     00 04 00 FF 
0d6b8     00 FA 15 F2 | 	cmp	result1, ##524288 wc
0d6bc     08 4E 05 31 |  if_ae	add	fp, #8
0d6c0     A7 56 68 3C |  if_ae	wrlong	#43, fp
0d6c4     08 4E 85 31 |  if_ae	sub	fp, #8
0d6c8                 | LR__1051
0d6c8     A7 12 02 F6 | 	mov	arg01, fp
0d6cc     84 C2 BF FD | 	call	#_push
0d6d0                 | LR__1052
0d6d0     A7 F0 03 F6 | 	mov	ptra, fp
0d6d4     B2 00 A0 FD | 	call	#popregs_
0d6d8                 | _do_getvar_ret
0d6d8     2D 00 64 FD | 	ret
0d6dc                 | 
0d6dc                 | ' 
0d6dc                 | ' '------------------------ Operators 
0d6dc                 | ' 
0d6dc                 | ' sub do_plus 
0d6dc                 | _do_plus
0d6dc     05 4A 05 F6 | 	mov	COUNT_, #5
0d6e0     A8 00 A0 FD | 	call	#pushregs_
0d6e4     18 F0 07 F1 | 	add	ptra, #24
0d6e8     D0 C1 BF FD | 	call	#_pop
0d6ec     FD 1E 02 F6 | 	mov	local01, result1
0d6f0     FE 20 02 F6 | 	mov	local02, result2
0d6f4     FF 22 02 F6 | 	mov	local03, result3
0d6f8     0C 4E 05 F1 | 	add	fp, #12
0d6fc     A7 1E 62 FC | 	wrlong	local01, fp
0d700     04 4E 05 F1 | 	add	fp, #4
0d704     A7 20 62 FC | 	wrlong	local02, fp
0d708     04 4E 05 F1 | 	add	fp, #4
0d70c     A7 22 62 FC | 	wrlong	local03, fp
0d710     14 4E 85 F1 | 	sub	fp, #20
0d714     A4 C1 BF FD | 	call	#_pop
0d718     FF 22 02 F6 | 	mov	local03, result3
0d71c     A7 FA 61 FC | 	wrlong	result1, fp
0d720     04 4E 05 F1 | 	add	fp, #4
0d724     A7 FC 61 FC | 	wrlong	result2, fp
0d728     04 4E 05 F1 | 	add	fp, #4
0d72c     A7 22 62 FC | 	wrlong	local03, fp
0d730                 | ' 
0d730                 | ' t2=pop()
0d730                 | ' t1=pop()
0d730                 | ' 
0d730                 | ' 
0d730                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
0d730     08 4E 85 F1 | 	sub	fp, #8
0d734     1D 22 0E F2 | 	cmp	local03, #29 wz
0d738     14 4E 05 A1 |  if_e	add	fp, #20
0d73c     A7 24 02 AB |  if_e	rdlong	local04, fp
0d740     14 4E 85 A1 |  if_e	sub	fp, #20
0d744     12 23 02 A6 |  if_e	mov	local03, local04
0d748     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d74c     1C 00 90 5D |  if_ne	jmp	#LR__1060
0d750     A7 1E 02 FB | 	rdlong	local01, fp
0d754     0C 4E 05 F1 | 	add	fp, #12
0d758     A7 20 02 FB | 	rdlong	local02, fp
0d75c     0C 4E 85 F1 | 	sub	fp, #12
0d760     10 1F 02 F1 | 	add	local01, local02
0d764     A7 1E 62 FC | 	wrlong	local01, fp
0d768     48 04 90 FD | 	jmp	#LR__1075
0d76c                 | LR__1060
0d76c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
0d76c     08 4E 05 F1 | 	add	fp, #8
0d770     A7 1E 02 FB | 	rdlong	local01, fp
0d774     08 4E 85 F1 | 	sub	fp, #8
0d778     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d77c     14 4E 05 A1 |  if_e	add	fp, #20
0d780     A7 24 02 AB |  if_e	rdlong	local04, fp
0d784     14 4E 85 A1 |  if_e	sub	fp, #20
0d788     12 23 02 A6 |  if_e	mov	local03, local04
0d78c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d790     28 00 90 5D |  if_ne	jmp	#LR__1061
0d794     A7 1E 02 FB | 	rdlong	local01, fp
0d798     0C 4E 05 F1 | 	add	fp, #12
0d79c     A7 20 02 FB | 	rdlong	local02, fp
0d7a0     0C 4E 85 F1 | 	sub	fp, #12
0d7a4     10 1F 02 F1 | 	add	local01, local02
0d7a8     A7 1E 62 FC | 	wrlong	local01, fp
0d7ac     08 4E 05 F1 | 	add	fp, #8
0d7b0     A7 38 68 FC | 	wrlong	#28, fp
0d7b4     08 4E 85 F1 | 	sub	fp, #8
0d7b8     F8 03 90 FD | 	jmp	#LR__1075
0d7bc                 | LR__1061
0d7bc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0d7bc     08 4E 05 F1 | 	add	fp, #8
0d7c0     A7 1E 02 FB | 	rdlong	local01, fp
0d7c4     08 4E 85 F1 | 	sub	fp, #8
0d7c8     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d7cc     14 4E 05 A1 |  if_e	add	fp, #20
0d7d0     A7 24 02 AB |  if_e	rdlong	local04, fp
0d7d4     14 4E 85 A1 |  if_e	sub	fp, #20
0d7d8     12 23 02 A6 |  if_e	mov	local03, local04
0d7dc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d7e0     30 00 90 5D |  if_ne	jmp	#LR__1062
0d7e4     A7 12 02 FB | 	rdlong	arg01, fp
0d7e8     B0 DB B0 FD | 	call	#__system___float_fromuns
0d7ec     FD 12 02 F6 | 	mov	arg01, result1
0d7f0     0C 4E 05 F1 | 	add	fp, #12
0d7f4     A7 14 02 FB | 	rdlong	arg02, fp
0d7f8     0C 4E 85 F1 | 	sub	fp, #12
0d7fc     D0 DB B0 FD | 	call	#__system___float_add
0d800     A7 FA 61 FC | 	wrlong	result1, fp
0d804     08 4E 05 F1 | 	add	fp, #8
0d808     A7 3C 68 FC | 	wrlong	#30, fp
0d80c     08 4E 85 F1 | 	sub	fp, #8
0d810     A0 03 90 FD | 	jmp	#LR__1075
0d814                 | LR__1062
0d814                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
0d814     08 4E 05 F1 | 	add	fp, #8
0d818     A7 1E 02 FB | 	rdlong	local01, fp
0d81c     08 4E 85 F1 | 	sub	fp, #8
0d820     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d824     14 4E 05 A1 |  if_e	add	fp, #20
0d828     A7 24 02 AB |  if_e	rdlong	local04, fp
0d82c     14 4E 85 A1 |  if_e	sub	fp, #20
0d830     12 23 02 A6 |  if_e	mov	local03, local04
0d834     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d838     1C 00 90 5D |  if_ne	jmp	#LR__1063
0d83c     A7 1E 02 FB | 	rdlong	local01, fp
0d840     0C 4E 05 F1 | 	add	fp, #12
0d844     A7 20 02 FB | 	rdlong	local02, fp
0d848     0C 4E 85 F1 | 	sub	fp, #12
0d84c     10 1F 02 F1 | 	add	local01, local02
0d850     A7 1E 62 FC | 	wrlong	local01, fp
0d854     5C 03 90 FD | 	jmp	#LR__1075
0d858                 | LR__1063
0d858                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
0d858     08 4E 05 F1 | 	add	fp, #8
0d85c     A7 1E 02 FB | 	rdlong	local01, fp
0d860     08 4E 85 F1 | 	sub	fp, #8
0d864     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d868     14 4E 05 A1 |  if_e	add	fp, #20
0d86c     A7 24 02 AB |  if_e	rdlong	local04, fp
0d870     14 4E 85 A1 |  if_e	sub	fp, #20
0d874     12 23 02 A6 |  if_e	mov	local03, local04
0d878     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d87c     1C 00 90 5D |  if_ne	jmp	#LR__1064
0d880     A7 1E 02 FB | 	rdlong	local01, fp
0d884     0C 4E 05 F1 | 	add	fp, #12
0d888     A7 20 02 FB | 	rdlong	local02, fp
0d88c     0C 4E 85 F1 | 	sub	fp, #12
0d890     10 1F 02 F1 | 	add	local01, local02
0d894     A7 1E 62 FC | 	wrlong	local01, fp
0d898     18 03 90 FD | 	jmp	#LR__1075
0d89c                 | LR__1064
0d89c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0d89c     08 4E 05 F1 | 	add	fp, #8
0d8a0     A7 1E 02 FB | 	rdlong	local01, fp
0d8a4     08 4E 85 F1 | 	sub	fp, #8
0d8a8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d8ac     14 4E 05 A1 |  if_e	add	fp, #20
0d8b0     A7 24 02 AB |  if_e	rdlong	local04, fp
0d8b4     14 4E 85 A1 |  if_e	sub	fp, #20
0d8b8     12 23 02 A6 |  if_e	mov	local03, local04
0d8bc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d8c0     40 00 90 5D |  if_ne	jmp	#LR__1065
0d8c4     A7 12 02 FB | 	rdlong	arg01, fp
0d8c8     09 13 52 F6 | 	abs	arg01, arg01 wc
0d8cc     1F 26 C6 C9 |  if_b	decod	local05, #31
0d8d0     00 26 06 36 |  if_ae	mov	local05, #0
0d8d4     C4 DA B0 FD | 	call	#__system___float_fromuns
0d8d8     13 FB 61 F5 | 	xor	result1, local05
0d8dc     FD 12 02 F6 | 	mov	arg01, result1
0d8e0     0C 4E 05 F1 | 	add	fp, #12
0d8e4     A7 14 02 FB | 	rdlong	arg02, fp
0d8e8     0C 4E 85 F1 | 	sub	fp, #12
0d8ec     E0 DA B0 FD | 	call	#__system___float_add
0d8f0     A7 FA 61 FC | 	wrlong	result1, fp
0d8f4     08 4E 05 F1 | 	add	fp, #8
0d8f8     A7 3C 68 FC | 	wrlong	#30, fp
0d8fc     08 4E 85 F1 | 	sub	fp, #8
0d900     B0 02 90 FD | 	jmp	#LR__1075
0d904                 | LR__1065
0d904                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
0d904     08 4E 05 F1 | 	add	fp, #8
0d908     A7 1E 02 FB | 	rdlong	local01, fp
0d90c     08 4E 85 F1 | 	sub	fp, #8
0d910     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d914     14 4E 05 A1 |  if_e	add	fp, #20
0d918     A7 24 02 AB |  if_e	rdlong	local04, fp
0d91c     14 4E 85 A1 |  if_e	sub	fp, #20
0d920     12 23 02 A6 |  if_e	mov	local03, local04
0d924     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d928     28 00 90 5D |  if_ne	jmp	#LR__1066
0d92c     A7 1E 02 FB | 	rdlong	local01, fp
0d930     0C 4E 05 F1 | 	add	fp, #12
0d934     A7 12 02 FB | 	rdlong	arg01, fp
0d938     0C 4E 85 F1 | 	sub	fp, #12
0d93c     5C DA B0 FD | 	call	#__system___float_fromuns
0d940     FD 14 02 F6 | 	mov	arg02, result1
0d944     0F 13 02 F6 | 	mov	arg01, local01
0d948     84 DA B0 FD | 	call	#__system___float_add
0d94c     A7 FA 61 FC | 	wrlong	result1, fp
0d950     60 02 90 FD | 	jmp	#LR__1075
0d954                 | LR__1066
0d954                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
0d954     08 4E 05 F1 | 	add	fp, #8
0d958     A7 1E 02 FB | 	rdlong	local01, fp
0d95c     08 4E 85 F1 | 	sub	fp, #8
0d960     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d964     14 4E 05 A1 |  if_e	add	fp, #20
0d968     A7 24 02 AB |  if_e	rdlong	local04, fp
0d96c     14 4E 85 A1 |  if_e	sub	fp, #20
0d970     12 23 02 A6 |  if_e	mov	local03, local04
0d974     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d978     38 00 90 5D |  if_ne	jmp	#LR__1067
0d97c     A7 1E 02 FB | 	rdlong	local01, fp
0d980     0C 4E 05 F1 | 	add	fp, #12
0d984     A7 12 02 FB | 	rdlong	arg01, fp
0d988     0C 4E 85 F1 | 	sub	fp, #12
0d98c     09 13 52 F6 | 	abs	arg01, arg01 wc
0d990     1F 26 C6 C9 |  if_b	decod	local05, #31
0d994     00 26 06 36 |  if_ae	mov	local05, #0
0d998     00 DA B0 FD | 	call	#__system___float_fromuns
0d99c     13 FB 61 F5 | 	xor	result1, local05
0d9a0     FD 14 02 F6 | 	mov	arg02, result1
0d9a4     0F 13 02 F6 | 	mov	arg01, local01
0d9a8     24 DA B0 FD | 	call	#__system___float_add
0d9ac     A7 FA 61 FC | 	wrlong	result1, fp
0d9b0     00 02 90 FD | 	jmp	#LR__1075
0d9b4                 | LR__1067
0d9b4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
0d9b4     08 4E 05 F1 | 	add	fp, #8
0d9b8     A7 1E 02 FB | 	rdlong	local01, fp
0d9bc     08 4E 85 F1 | 	sub	fp, #8
0d9c0     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d9c4     14 4E 05 A1 |  if_e	add	fp, #20
0d9c8     A7 24 02 AB |  if_e	rdlong	local04, fp
0d9cc     14 4E 85 A1 |  if_e	sub	fp, #20
0d9d0     1E 24 0E A2 |  if_e	cmp	local04, #30 wz
0d9d4     1C 00 90 5D |  if_ne	jmp	#LR__1068
0d9d8     A7 12 02 FB | 	rdlong	arg01, fp
0d9dc     0C 4E 05 F1 | 	add	fp, #12
0d9e0     A7 14 02 FB | 	rdlong	arg02, fp
0d9e4     0C 4E 85 F1 | 	sub	fp, #12
0d9e8     E4 D9 B0 FD | 	call	#__system___float_add
0d9ec     A7 FA 61 FC | 	wrlong	result1, fp
0d9f0     C0 01 90 FD | 	jmp	#LR__1075
0d9f4                 | LR__1068
0d9f4                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0d9f4     08 4E 05 F1 | 	add	fp, #8
0d9f8     A7 1E 02 FB | 	rdlong	local01, fp
0d9fc     08 4E 85 F1 | 	sub	fp, #8
0da00     1F 1E 0E F2 | 	cmp	local01, #31 wz
0da04     24 00 90 5D |  if_ne	jmp	#LR__1069
0da08     14 4E 05 F1 | 	add	fp, #20
0da0c     A7 22 02 FB | 	rdlong	local03, fp
0da10     14 4E 85 F1 | 	sub	fp, #20
0da14     1F 22 0E F2 | 	cmp	local03, #31 wz
0da18     A7 04 68 5C |  if_ne	wrlong	#2, fp
0da1c     08 4E 05 51 |  if_ne	add	fp, #8
0da20     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0da24     08 4E 85 51 |  if_ne	sub	fp, #8
0da28     88 01 90 5D |  if_ne	jmp	#LR__1075
0da2c                 | LR__1069
0da2c                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0da2c     14 4E 05 F1 | 	add	fp, #20
0da30     A7 1E 02 FB | 	rdlong	local01, fp
0da34     14 4E 85 F1 | 	sub	fp, #20
0da38     1F 1E 0E F2 | 	cmp	local01, #31 wz
0da3c     24 00 90 5D |  if_ne	jmp	#LR__1070
0da40     08 4E 05 F1 | 	add	fp, #8
0da44     A7 22 02 FB | 	rdlong	local03, fp
0da48     08 4E 85 F1 | 	sub	fp, #8
0da4c     1F 22 0E F2 | 	cmp	local03, #31 wz
0da50     A7 04 68 5C |  if_ne	wrlong	#2, fp
0da54     08 4E 05 51 |  if_ne	add	fp, #8
0da58     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0da5c     08 4E 85 51 |  if_ne	sub	fp, #8
0da60     50 01 90 5D |  if_ne	jmp	#LR__1075
0da64                 | LR__1070
0da64                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
0da64     08 4E 05 F1 | 	add	fp, #8
0da68     A7 1E 02 FB | 	rdlong	local01, fp
0da6c     08 4E 85 F1 | 	sub	fp, #8
0da70     1F 1E 0E F2 | 	cmp	local01, #31 wz
0da74     14 4E 05 A1 |  if_e	add	fp, #20
0da78     A7 22 02 AB |  if_e	rdlong	local03, fp
0da7c     14 4E 85 A1 |  if_e	sub	fp, #20
0da80     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0da84     1C 00 90 5D |  if_ne	jmp	#LR__1071
0da88     A7 12 02 FB | 	rdlong	arg01, fp
0da8c     0C 4E 05 F1 | 	add	fp, #12
0da90     A7 14 02 FB | 	rdlong	arg02, fp
0da94     0C 4E 85 F1 | 	sub	fp, #12
0da98     74 B2 B0 FD | 	call	#__system___string_concat
0da9c     A7 FA 61 FC | 	wrlong	result1, fp
0daa0     10 01 90 FD | 	jmp	#LR__1075
0daa4                 | LR__1071
0daa4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
0daa4     08 4E 05 F1 | 	add	fp, #8
0daa8     A7 1E 02 FB | 	rdlong	local01, fp
0daac     08 4E 85 F1 | 	sub	fp, #8
0dab0     2B 1E 0E F2 | 	cmp	local01, #43 wz
0dab4     14 4E 05 A1 |  if_e	add	fp, #20
0dab8     A7 22 02 AB |  if_e	rdlong	local03, fp
0dabc     14 4E 85 A1 |  if_e	sub	fp, #20
0dac0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0dac4     30 00 90 5D |  if_ne	jmp	#LR__1072
0dac8     A7 12 02 FB | 	rdlong	arg01, fp
0dacc     28 EF BF FD | 	call	#_convertstring
0dad0     FD 12 02 F6 | 	mov	arg01, result1
0dad4     0C 4E 05 F1 | 	add	fp, #12
0dad8     A7 14 02 FB | 	rdlong	arg02, fp
0dadc     0C 4E 85 F1 | 	sub	fp, #12
0dae0     2C B2 B0 FD | 	call	#__system___string_concat
0dae4     A7 FA 61 FC | 	wrlong	result1, fp
0dae8     08 4E 05 F1 | 	add	fp, #8
0daec     A7 3E 68 FC | 	wrlong	#31, fp
0daf0     08 4E 85 F1 | 	sub	fp, #8
0daf4     BC 00 90 FD | 	jmp	#LR__1075
0daf8                 | LR__1072
0daf8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
0daf8     08 4E 05 F1 | 	add	fp, #8
0dafc     A7 1E 02 FB | 	rdlong	local01, fp
0db00     08 4E 85 F1 | 	sub	fp, #8
0db04     1F 1E 0E F2 | 	cmp	local01, #31 wz
0db08     14 4E 05 A1 |  if_e	add	fp, #20
0db0c     A7 22 02 AB |  if_e	rdlong	local03, fp
0db10     14 4E 85 A1 |  if_e	sub	fp, #20
0db14     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0db18     28 00 90 5D |  if_ne	jmp	#LR__1073
0db1c     A7 1E 02 FB | 	rdlong	local01, fp
0db20     0C 4E 05 F1 | 	add	fp, #12
0db24     A7 12 02 FB | 	rdlong	arg01, fp
0db28     0C 4E 85 F1 | 	sub	fp, #12
0db2c     C8 EE BF FD | 	call	#_convertstring
0db30     FD 14 02 F6 | 	mov	arg02, result1
0db34     0F 13 02 F6 | 	mov	arg01, local01
0db38     D4 B1 B0 FD | 	call	#__system___string_concat
0db3c     A7 FA 61 FC | 	wrlong	result1, fp
0db40     70 00 90 FD | 	jmp	#LR__1075
0db44                 | LR__1073
0db44                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
0db44     08 4E 05 F1 | 	add	fp, #8
0db48     A7 1E 02 FB | 	rdlong	local01, fp
0db4c     08 4E 85 F1 | 	sub	fp, #8
0db50     2B 1E 0E F2 | 	cmp	local01, #43 wz
0db54     14 4E 05 A1 |  if_e	add	fp, #20
0db58     A7 22 02 AB |  if_e	rdlong	local03, fp
0db5c     14 4E 85 A1 |  if_e	sub	fp, #20
0db60     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0db64     3C 00 90 5D |  if_ne	jmp	#LR__1074
0db68     A7 12 02 FB | 	rdlong	arg01, fp
0db6c     88 EE BF FD | 	call	#_convertstring
0db70     FD 1E 02 F6 | 	mov	local01, result1
0db74     0C 4E 05 F1 | 	add	fp, #12
0db78     A7 12 02 FB | 	rdlong	arg01, fp
0db7c     0C 4E 85 F1 | 	sub	fp, #12
0db80     74 EE BF FD | 	call	#_convertstring
0db84     FD 14 02 F6 | 	mov	arg02, result1
0db88     0F 13 02 F6 | 	mov	arg01, local01
0db8c     80 B1 B0 FD | 	call	#__system___string_concat
0db90     A7 FA 61 FC | 	wrlong	result1, fp
0db94     08 4E 05 F1 | 	add	fp, #8
0db98     A7 3E 68 FC | 	wrlong	#31, fp
0db9c     08 4E 85 F1 | 	sub	fp, #8
0dba0     10 00 90 FD | 	jmp	#LR__1075
0dba4                 | LR__1074
0dba4     A7 08 68 FC | 	wrlong	#4, fp
0dba8     08 4E 05 F1 | 	add	fp, #8
0dbac     A7 FE 69 FC | 	wrlong	#255, fp
0dbb0     08 4E 85 F1 | 	sub	fp, #8
0dbb4                 | LR__1075
0dbb4     A7 12 02 F6 | 	mov	arg01, fp
0dbb8     98 BD BF FD | 	call	#_push
0dbbc     A7 F0 03 F6 | 	mov	ptra, fp
0dbc0     B2 00 A0 FD | 	call	#popregs_
0dbc4                 | _do_plus_ret
0dbc4     2D 00 64 FD | 	ret
0dbc8                 | 
0dbc8                 | ' 
0dbc8                 | ' sub do_minus
0dbc8                 | _do_minus
0dbc8     05 4A 05 F6 | 	mov	COUNT_, #5
0dbcc     A8 00 A0 FD | 	call	#pushregs_
0dbd0     18 F0 07 F1 | 	add	ptra, #24
0dbd4     E4 BC BF FD | 	call	#_pop
0dbd8     FD 1E 02 F6 | 	mov	local01, result1
0dbdc     FE 20 02 F6 | 	mov	local02, result2
0dbe0     FF 22 02 F6 | 	mov	local03, result3
0dbe4     0C 4E 05 F1 | 	add	fp, #12
0dbe8     A7 1E 62 FC | 	wrlong	local01, fp
0dbec     04 4E 05 F1 | 	add	fp, #4
0dbf0     A7 20 62 FC | 	wrlong	local02, fp
0dbf4     04 4E 05 F1 | 	add	fp, #4
0dbf8     A7 22 62 FC | 	wrlong	local03, fp
0dbfc     14 4E 85 F1 | 	sub	fp, #20
0dc00     B8 BC BF FD | 	call	#_pop
0dc04     FF 22 02 F6 | 	mov	local03, result3
0dc08     A7 FA 61 FC | 	wrlong	result1, fp
0dc0c     04 4E 05 F1 | 	add	fp, #4
0dc10     A7 FC 61 FC | 	wrlong	result2, fp
0dc14     04 4E 05 F1 | 	add	fp, #4
0dc18     A7 22 62 FC | 	wrlong	local03, fp
0dc1c                 | ' 
0dc1c                 | ' t2=pop()
0dc1c                 | ' t1=pop()
0dc1c                 | ' 
0dc1c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
0dc1c     08 4E 85 F1 | 	sub	fp, #8
0dc20     1D 22 0E F2 | 	cmp	local03, #29 wz
0dc24     14 4E 05 A1 |  if_e	add	fp, #20
0dc28     A7 24 02 AB |  if_e	rdlong	local04, fp
0dc2c     14 4E 85 A1 |  if_e	sub	fp, #20
0dc30     12 23 02 A6 |  if_e	mov	local03, local04
0dc34     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0dc38     5C 00 90 5D |  if_ne	jmp	#LR__1081
0dc3c                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
0dc3c     0C 4E 05 F1 | 	add	fp, #12
0dc40     A7 1E 02 FB | 	rdlong	local01, fp
0dc44     0C 4E 85 F1 | 	sub	fp, #12
0dc48     A7 22 02 FB | 	rdlong	local03, fp
0dc4c     11 1F 12 F2 | 	cmp	local01, local03 wc
0dc50     1C 00 90 3D |  if_ae	jmp	#LR__1080
0dc54     A7 1E 02 FB | 	rdlong	local01, fp
0dc58     0C 4E 05 F1 | 	add	fp, #12
0dc5c     A7 20 02 FB | 	rdlong	local02, fp
0dc60     0C 4E 85 F1 | 	sub	fp, #12
0dc64     10 1F 82 F1 | 	sub	local01, local02
0dc68     A7 1E 62 FC | 	wrlong	local01, fp
0dc6c     F4 02 90 FD | 	jmp	#LR__1090
0dc70                 | LR__1080
0dc70     A7 1E 02 FB | 	rdlong	local01, fp
0dc74     0C 4E 05 F1 | 	add	fp, #12
0dc78     A7 20 02 FB | 	rdlong	local02, fp
0dc7c     0C 4E 85 F1 | 	sub	fp, #12
0dc80     10 1F 82 F1 | 	sub	local01, local02
0dc84     A7 1E 62 FC | 	wrlong	local01, fp
0dc88     08 4E 05 F1 | 	add	fp, #8
0dc8c     A7 38 68 FC | 	wrlong	#28, fp
0dc90     08 4E 85 F1 | 	sub	fp, #8
0dc94     CC 02 90 FD | 	jmp	#LR__1090
0dc98                 | LR__1081
0dc98                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
0dc98     08 4E 05 F1 | 	add	fp, #8
0dc9c     A7 1E 02 FB | 	rdlong	local01, fp
0dca0     08 4E 85 F1 | 	sub	fp, #8
0dca4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0dca8     14 4E 05 A1 |  if_e	add	fp, #20
0dcac     A7 24 02 AB |  if_e	rdlong	local04, fp
0dcb0     14 4E 85 A1 |  if_e	sub	fp, #20
0dcb4     12 23 02 A6 |  if_e	mov	local03, local04
0dcb8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0dcbc     28 00 90 5D |  if_ne	jmp	#LR__1082
0dcc0     A7 1E 02 FB | 	rdlong	local01, fp
0dcc4     0C 4E 05 F1 | 	add	fp, #12
0dcc8     A7 20 02 FB | 	rdlong	local02, fp
0dccc     0C 4E 85 F1 | 	sub	fp, #12
0dcd0     10 1F 82 F1 | 	sub	local01, local02
0dcd4     A7 1E 62 FC | 	wrlong	local01, fp
0dcd8     08 4E 05 F1 | 	add	fp, #8
0dcdc     A7 38 68 FC | 	wrlong	#28, fp
0dce0     08 4E 85 F1 | 	sub	fp, #8
0dce4     7C 02 90 FD | 	jmp	#LR__1090
0dce8                 | LR__1082
0dce8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0dce8     08 4E 05 F1 | 	add	fp, #8
0dcec     A7 1E 02 FB | 	rdlong	local01, fp
0dcf0     08 4E 85 F1 | 	sub	fp, #8
0dcf4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0dcf8     14 4E 05 A1 |  if_e	add	fp, #20
0dcfc     A7 24 02 AB |  if_e	rdlong	local04, fp
0dd00     14 4E 85 A1 |  if_e	sub	fp, #20
0dd04     12 23 02 A6 |  if_e	mov	local03, local04
0dd08     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0dd0c     34 00 90 5D |  if_ne	jmp	#LR__1083
0dd10     A7 12 02 FB | 	rdlong	arg01, fp
0dd14     84 D6 B0 FD | 	call	#__system___float_fromuns
0dd18     FD 12 02 F6 | 	mov	arg01, result1
0dd1c     0C 4E 05 F1 | 	add	fp, #12
0dd20     A7 14 02 FB | 	rdlong	arg02, fp
0dd24     0C 4E 85 F1 | 	sub	fp, #12
0dd28     1F 14 E6 F4 | 	bitnot	arg02, #31
0dd2c     A0 D6 B0 FD | 	call	#__system___float_add
0dd30     A7 FA 61 FC | 	wrlong	result1, fp
0dd34     08 4E 05 F1 | 	add	fp, #8
0dd38     A7 3C 68 FC | 	wrlong	#30, fp
0dd3c     08 4E 85 F1 | 	sub	fp, #8
0dd40     20 02 90 FD | 	jmp	#LR__1090
0dd44                 | LR__1083
0dd44                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
0dd44     08 4E 05 F1 | 	add	fp, #8
0dd48     A7 1E 02 FB | 	rdlong	local01, fp
0dd4c     08 4E 85 F1 | 	sub	fp, #8
0dd50     1C 1E 0E F2 | 	cmp	local01, #28 wz
0dd54     14 4E 05 A1 |  if_e	add	fp, #20
0dd58     A7 24 02 AB |  if_e	rdlong	local04, fp
0dd5c     14 4E 85 A1 |  if_e	sub	fp, #20
0dd60     12 23 02 A6 |  if_e	mov	local03, local04
0dd64     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0dd68     1C 00 90 5D |  if_ne	jmp	#LR__1084
0dd6c     A7 1E 02 FB | 	rdlong	local01, fp
0dd70     0C 4E 05 F1 | 	add	fp, #12
0dd74     A7 20 02 FB | 	rdlong	local02, fp
0dd78     0C 4E 85 F1 | 	sub	fp, #12
0dd7c     10 1F 82 F1 | 	sub	local01, local02
0dd80     A7 1E 62 FC | 	wrlong	local01, fp
0dd84     DC 01 90 FD | 	jmp	#LR__1090
0dd88                 | LR__1084
0dd88                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
0dd88     08 4E 05 F1 | 	add	fp, #8
0dd8c     A7 1E 02 FB | 	rdlong	local01, fp
0dd90     08 4E 85 F1 | 	sub	fp, #8
0dd94     1C 1E 0E F2 | 	cmp	local01, #28 wz
0dd98     14 4E 05 A1 |  if_e	add	fp, #20
0dd9c     A7 24 02 AB |  if_e	rdlong	local04, fp
0dda0     14 4E 85 A1 |  if_e	sub	fp, #20
0dda4     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0dda8     1C 00 90 5D |  if_ne	jmp	#LR__1085
0ddac     A7 1E 02 FB | 	rdlong	local01, fp
0ddb0     0C 4E 05 F1 | 	add	fp, #12
0ddb4     A7 20 02 FB | 	rdlong	local02, fp
0ddb8     0C 4E 85 F1 | 	sub	fp, #12
0ddbc     10 1F 82 F1 | 	sub	local01, local02
0ddc0     A7 1E 62 FC | 	wrlong	local01, fp
0ddc4     9C 01 90 FD | 	jmp	#LR__1090
0ddc8                 | LR__1085
0ddc8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0ddc8     08 4E 05 F1 | 	add	fp, #8
0ddcc     A7 1E 02 FB | 	rdlong	local01, fp
0ddd0     08 4E 85 F1 | 	sub	fp, #8
0ddd4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0ddd8     14 4E 05 A1 |  if_e	add	fp, #20
0dddc     A7 22 02 AB |  if_e	rdlong	local03, fp
0dde0     14 4E 85 A1 |  if_e	sub	fp, #20
0dde4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0dde8     44 00 90 5D |  if_ne	jmp	#LR__1086
0ddec     A7 12 02 FB | 	rdlong	arg01, fp
0ddf0     09 13 52 F6 | 	abs	arg01, arg01 wc
0ddf4     1F 26 C6 C9 |  if_b	decod	local05, #31
0ddf8     00 26 06 36 |  if_ae	mov	local05, #0
0ddfc     9C D5 B0 FD | 	call	#__system___float_fromuns
0de00     13 FB 61 F5 | 	xor	result1, local05
0de04     FD 12 02 F6 | 	mov	arg01, result1
0de08     0C 4E 05 F1 | 	add	fp, #12
0de0c     A7 14 02 FB | 	rdlong	arg02, fp
0de10     0C 4E 85 F1 | 	sub	fp, #12
0de14     1F 14 E6 F4 | 	bitnot	arg02, #31
0de18     B4 D5 B0 FD | 	call	#__system___float_add
0de1c     A7 FA 61 FC | 	wrlong	result1, fp
0de20     08 4E 05 F1 | 	add	fp, #8
0de24     A7 3C 68 FC | 	wrlong	#30, fp
0de28     08 4E 85 F1 | 	sub	fp, #8
0de2c     34 01 90 FD | 	jmp	#LR__1090
0de30                 | LR__1086
0de30                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
0de30     08 4E 05 F1 | 	add	fp, #8
0de34     A7 1E 02 FB | 	rdlong	local01, fp
0de38     08 4E 85 F1 | 	sub	fp, #8
0de3c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0de40     14 4E 05 A1 |  if_e	add	fp, #20
0de44     A7 22 02 AB |  if_e	rdlong	local03, fp
0de48     14 4E 85 A1 |  if_e	sub	fp, #20
0de4c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0de50     2C 00 90 5D |  if_ne	jmp	#LR__1087
0de54     A7 1E 02 FB | 	rdlong	local01, fp
0de58     0C 4E 05 F1 | 	add	fp, #12
0de5c     A7 12 02 FB | 	rdlong	arg01, fp
0de60     0C 4E 85 F1 | 	sub	fp, #12
0de64     34 D5 B0 FD | 	call	#__system___float_fromuns
0de68     FD 14 02 F6 | 	mov	arg02, result1
0de6c     0F 13 02 F6 | 	mov	arg01, local01
0de70     1F 14 E6 F4 | 	bitnot	arg02, #31
0de74     58 D5 B0 FD | 	call	#__system___float_add
0de78     A7 FA 61 FC | 	wrlong	result1, fp
0de7c     E4 00 90 FD | 	jmp	#LR__1090
0de80                 | LR__1087
0de80                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
0de80     08 4E 05 F1 | 	add	fp, #8
0de84     A7 1E 02 FB | 	rdlong	local01, fp
0de88     08 4E 85 F1 | 	sub	fp, #8
0de8c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0de90     14 4E 05 A1 |  if_e	add	fp, #20
0de94     A7 22 02 AB |  if_e	rdlong	local03, fp
0de98     14 4E 85 A1 |  if_e	sub	fp, #20
0de9c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0dea0     3C 00 90 5D |  if_ne	jmp	#LR__1088
0dea4     A7 1E 02 FB | 	rdlong	local01, fp
0dea8     0C 4E 05 F1 | 	add	fp, #12
0deac     A7 12 02 FB | 	rdlong	arg01, fp
0deb0     0C 4E 85 F1 | 	sub	fp, #12
0deb4     09 13 52 F6 | 	abs	arg01, arg01 wc
0deb8     1F 26 C6 C9 |  if_b	decod	local05, #31
0debc     00 26 06 36 |  if_ae	mov	local05, #0
0dec0     D8 D4 B0 FD | 	call	#__system___float_fromuns
0dec4     13 FB 61 F5 | 	xor	result1, local05
0dec8     FD 14 02 F6 | 	mov	arg02, result1
0decc     0F 13 02 F6 | 	mov	arg01, local01
0ded0     1F 14 E6 F4 | 	bitnot	arg02, #31
0ded4     F8 D4 B0 FD | 	call	#__system___float_add
0ded8     A7 FA 61 FC | 	wrlong	result1, fp
0dedc     84 00 90 FD | 	jmp	#LR__1090
0dee0                 | LR__1088
0dee0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
0dee0     08 4E 05 F1 | 	add	fp, #8
0dee4     A7 1E 02 FB | 	rdlong	local01, fp
0dee8     08 4E 85 F1 | 	sub	fp, #8
0deec     1E 1E 0E F2 | 	cmp	local01, #30 wz
0def0     14 4E 05 A1 |  if_e	add	fp, #20
0def4     A7 22 02 AB |  if_e	rdlong	local03, fp
0def8     14 4E 85 A1 |  if_e	sub	fp, #20
0defc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0df00     20 00 90 5D |  if_ne	jmp	#LR__1089
0df04     A7 12 02 FB | 	rdlong	arg01, fp
0df08     0C 4E 05 F1 | 	add	fp, #12
0df0c     A7 14 02 FB | 	rdlong	arg02, fp
0df10     0C 4E 85 F1 | 	sub	fp, #12
0df14     1F 14 E6 F4 | 	bitnot	arg02, #31
0df18     B4 D4 B0 FD | 	call	#__system___float_add
0df1c     A7 FA 61 FC | 	wrlong	result1, fp
0df20     40 00 90 FD | 	jmp	#LR__1090
0df24                 | LR__1089
0df24                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
0df24     08 4E 05 F1 | 	add	fp, #8
0df28     A7 1E 02 FB | 	rdlong	local01, fp
0df2c     08 4E 85 F1 | 	sub	fp, #8
0df30     1F 1E 0E F2 | 	cmp	local01, #31 wz
0df34     14 4E 05 51 |  if_ne	add	fp, #20
0df38     A7 22 02 5B |  if_ne	rdlong	local03, fp
0df3c     14 4E 85 51 |  if_ne	sub	fp, #20
0df40     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
0df44     A7 06 68 AC |  if_e	wrlong	#3, fp
0df48     08 4E 05 A1 |  if_e	add	fp, #8
0df4c     A7 FE 69 AC |  if_e	wrlong	#255, fp
0df50     08 4E 85 A1 |  if_e	sub	fp, #8
0df54     A7 0A 68 5C |  if_ne	wrlong	#5, fp
0df58     08 4E 05 51 |  if_ne	add	fp, #8
0df5c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0df60     08 4E 85 51 |  if_ne	sub	fp, #8
0df64                 | LR__1090
0df64     A7 12 02 F6 | 	mov	arg01, fp
0df68     E8 B9 BF FD | 	call	#_push
0df6c     A7 F0 03 F6 | 	mov	ptra, fp
0df70     B2 00 A0 FD | 	call	#popregs_
0df74                 | _do_minus_ret
0df74     2D 00 64 FD | 	ret
0df78                 | 
0df78                 | ' 
0df78                 | ' sub do_and 
0df78                 | _do_and
0df78     03 4A 05 F6 | 	mov	COUNT_, #3
0df7c     A8 00 A0 FD | 	call	#pushregs_
0df80     18 F0 07 F1 | 	add	ptra, #24
0df84     34 B9 BF FD | 	call	#_pop
0df88     FD 12 02 F6 | 	mov	arg01, result1
0df8c     FE 1E 02 F6 | 	mov	local01, result2
0df90     FF 20 02 F6 | 	mov	local02, result3
0df94     0C 4E 05 F1 | 	add	fp, #12
0df98     A7 12 62 FC | 	wrlong	arg01, fp
0df9c     04 4E 05 F1 | 	add	fp, #4
0dfa0     A7 1E 62 FC | 	wrlong	local01, fp
0dfa4     04 4E 05 F1 | 	add	fp, #4
0dfa8     A7 20 62 FC | 	wrlong	local02, fp
0dfac     14 4E 85 F1 | 	sub	fp, #20
0dfb0     08 B9 BF FD | 	call	#_pop
0dfb4     FF 22 02 F6 | 	mov	local03, result3
0dfb8     A7 FA 61 FC | 	wrlong	result1, fp
0dfbc     04 4E 05 F1 | 	add	fp, #4
0dfc0     A7 FC 61 FC | 	wrlong	result2, fp
0dfc4     04 4E 05 F1 | 	add	fp, #4
0dfc8     A7 22 62 FC | 	wrlong	local03, fp
0dfcc                 | ' 
0dfcc                 | ' t2=pop()
0dfcc                 | ' t1=pop()
0dfcc                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0dfcc     08 4E 85 F1 | 	sub	fp, #8
0dfd0     1C 22 0E F2 | 	cmp	local03, #28 wz
0dfd4     A7 22 02 AB |  if_e	rdlong	local03, fp
0dfd8     A7 22 62 AC |  if_e	wrlong	local03, fp
0dfdc     08 4E 05 A1 |  if_e	add	fp, #8
0dfe0     A7 3A 68 AC |  if_e	wrlong	#29, fp
0dfe4     08 4E 85 A1 |  if_e	sub	fp, #8
0dfe8                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0dfe8     14 4E 05 F1 | 	add	fp, #20
0dfec     A7 22 02 FB | 	rdlong	local03, fp
0dff0     14 4E 85 F1 | 	sub	fp, #20
0dff4     1C 22 0E F2 | 	cmp	local03, #28 wz
0dff8     18 00 90 5D |  if_ne	jmp	#LR__1100
0dffc     0C 4E 05 F1 | 	add	fp, #12
0e000     A7 22 02 FB | 	rdlong	local03, fp
0e004     A7 22 62 FC | 	wrlong	local03, fp
0e008     08 4E 05 F1 | 	add	fp, #8
0e00c     A7 3A 68 FC | 	wrlong	#29, fp
0e010     14 4E 85 F1 | 	sub	fp, #20
0e014                 | LR__1100
0e014                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
0e014     08 4E 05 F1 | 	add	fp, #8
0e018     A7 22 02 FB | 	rdlong	local03, fp
0e01c     08 4E 85 F1 | 	sub	fp, #8
0e020     1F 22 0E F2 | 	cmp	local03, #31 wz
0e024     14 4E 05 51 |  if_ne	add	fp, #20
0e028     A7 20 02 5B |  if_ne	rdlong	local02, fp
0e02c     14 4E 85 51 |  if_ne	sub	fp, #20
0e030     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0e034     08 4E 05 51 |  if_ne	add	fp, #8
0e038     A7 22 02 5B |  if_ne	rdlong	local03, fp
0e03c     08 4E 85 51 |  if_ne	sub	fp, #8
0e040     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0e044     14 4E 05 51 |  if_ne	add	fp, #20
0e048     14 4E 85 51 |  if_ne	sub	fp, #20
0e04c     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0e050     A7 0C 68 AC |  if_e	wrlong	#6, fp
0e054     08 4E 05 A1 |  if_e	add	fp, #8
0e058     A7 FE 69 AC |  if_e	wrlong	#255, fp
0e05c     08 4E 85 A1 |  if_e	sub	fp, #8
0e060     18 00 90 AD |  if_e	jmp	#LR__1101
0e064     A7 22 02 FB | 	rdlong	local03, fp
0e068     0C 4E 05 F1 | 	add	fp, #12
0e06c     A7 1E 02 FB | 	rdlong	local01, fp
0e070     0C 4E 85 F1 | 	sub	fp, #12
0e074     0F 23 02 F5 | 	and	local03, local01
0e078     A7 22 62 FC | 	wrlong	local03, fp
0e07c                 | LR__1101
0e07c     A7 12 02 F6 | 	mov	arg01, fp
0e080     D0 B8 BF FD | 	call	#_push
0e084     A7 F0 03 F6 | 	mov	ptra, fp
0e088     B2 00 A0 FD | 	call	#popregs_
0e08c                 | _do_and_ret
0e08c     2D 00 64 FD | 	ret
0e090                 | 
0e090                 | ' 
0e090                 | ' sub do_or 
0e090                 | _do_or
0e090     03 4A 05 F6 | 	mov	COUNT_, #3
0e094     A8 00 A0 FD | 	call	#pushregs_
0e098     18 F0 07 F1 | 	add	ptra, #24
0e09c     1C B8 BF FD | 	call	#_pop
0e0a0     FD 12 02 F6 | 	mov	arg01, result1
0e0a4     FE 1E 02 F6 | 	mov	local01, result2
0e0a8     FF 20 02 F6 | 	mov	local02, result3
0e0ac     0C 4E 05 F1 | 	add	fp, #12
0e0b0     A7 12 62 FC | 	wrlong	arg01, fp
0e0b4     04 4E 05 F1 | 	add	fp, #4
0e0b8     A7 1E 62 FC | 	wrlong	local01, fp
0e0bc     04 4E 05 F1 | 	add	fp, #4
0e0c0     A7 20 62 FC | 	wrlong	local02, fp
0e0c4     14 4E 85 F1 | 	sub	fp, #20
0e0c8     F0 B7 BF FD | 	call	#_pop
0e0cc     FF 22 02 F6 | 	mov	local03, result3
0e0d0     A7 FA 61 FC | 	wrlong	result1, fp
0e0d4     04 4E 05 F1 | 	add	fp, #4
0e0d8     A7 FC 61 FC | 	wrlong	result2, fp
0e0dc     04 4E 05 F1 | 	add	fp, #4
0e0e0     A7 22 62 FC | 	wrlong	local03, fp
0e0e4                 | ' 
0e0e4                 | ' t2=pop()
0e0e4                 | ' t1=pop()
0e0e4                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0e0e4     08 4E 85 F1 | 	sub	fp, #8
0e0e8     1C 22 0E F2 | 	cmp	local03, #28 wz
0e0ec     A7 22 02 AB |  if_e	rdlong	local03, fp
0e0f0     A7 22 62 AC |  if_e	wrlong	local03, fp
0e0f4     08 4E 05 A1 |  if_e	add	fp, #8
0e0f8     A7 3A 68 AC |  if_e	wrlong	#29, fp
0e0fc     08 4E 85 A1 |  if_e	sub	fp, #8
0e100                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0e100     14 4E 05 F1 | 	add	fp, #20
0e104     A7 22 02 FB | 	rdlong	local03, fp
0e108     14 4E 85 F1 | 	sub	fp, #20
0e10c     1C 22 0E F2 | 	cmp	local03, #28 wz
0e110     18 00 90 5D |  if_ne	jmp	#LR__1110
0e114     0C 4E 05 F1 | 	add	fp, #12
0e118     A7 22 02 FB | 	rdlong	local03, fp
0e11c     A7 22 62 FC | 	wrlong	local03, fp
0e120     08 4E 05 F1 | 	add	fp, #8
0e124     A7 3A 68 FC | 	wrlong	#29, fp
0e128     14 4E 85 F1 | 	sub	fp, #20
0e12c                 | LR__1110
0e12c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
0e12c     08 4E 05 F1 | 	add	fp, #8
0e130     A7 22 02 FB | 	rdlong	local03, fp
0e134     08 4E 85 F1 | 	sub	fp, #8
0e138     1F 22 0E F2 | 	cmp	local03, #31 wz
0e13c     14 4E 05 51 |  if_ne	add	fp, #20
0e140     A7 20 02 5B |  if_ne	rdlong	local02, fp
0e144     14 4E 85 51 |  if_ne	sub	fp, #20
0e148     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0e14c     08 4E 05 51 |  if_ne	add	fp, #8
0e150     A7 22 02 5B |  if_ne	rdlong	local03, fp
0e154     08 4E 85 51 |  if_ne	sub	fp, #8
0e158     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0e15c     14 4E 05 51 |  if_ne	add	fp, #20
0e160     14 4E 85 51 |  if_ne	sub	fp, #20
0e164     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0e168     A7 0C 68 AC |  if_e	wrlong	#6, fp
0e16c     08 4E 05 A1 |  if_e	add	fp, #8
0e170     A7 FE 69 AC |  if_e	wrlong	#255, fp
0e174     08 4E 85 A1 |  if_e	sub	fp, #8
0e178     18 00 90 AD |  if_e	jmp	#LR__1111
0e17c     A7 22 02 FB | 	rdlong	local03, fp
0e180     0C 4E 05 F1 | 	add	fp, #12
0e184     A7 1E 02 FB | 	rdlong	local01, fp
0e188     0C 4E 85 F1 | 	sub	fp, #12
0e18c     0F 23 42 F5 | 	or	local03, local01
0e190     A7 22 62 FC | 	wrlong	local03, fp
0e194                 | LR__1111
0e194     A7 12 02 F6 | 	mov	arg01, fp
0e198     B8 B7 BF FD | 	call	#_push
0e19c     A7 F0 03 F6 | 	mov	ptra, fp
0e1a0     B2 00 A0 FD | 	call	#popregs_
0e1a4                 | _do_or_ret
0e1a4     2D 00 64 FD | 	ret
0e1a8                 | 
0e1a8                 | ' 
0e1a8                 | ' sub do_mul
0e1a8                 | _do_mul
0e1a8     05 4A 05 F6 | 	mov	COUNT_, #5
0e1ac     A8 00 A0 FD | 	call	#pushregs_
0e1b0     18 F0 07 F1 | 	add	ptra, #24
0e1b4     04 B7 BF FD | 	call	#_pop
0e1b8     FD 1E 02 F6 | 	mov	local01, result1
0e1bc     FE 20 02 F6 | 	mov	local02, result2
0e1c0     FF 22 02 F6 | 	mov	local03, result3
0e1c4     0C 4E 05 F1 | 	add	fp, #12
0e1c8     A7 1E 62 FC | 	wrlong	local01, fp
0e1cc     04 4E 05 F1 | 	add	fp, #4
0e1d0     A7 20 62 FC | 	wrlong	local02, fp
0e1d4     04 4E 05 F1 | 	add	fp, #4
0e1d8     A7 22 62 FC | 	wrlong	local03, fp
0e1dc     14 4E 85 F1 | 	sub	fp, #20
0e1e0     D8 B6 BF FD | 	call	#_pop
0e1e4     FF 22 02 F6 | 	mov	local03, result3
0e1e8     A7 FA 61 FC | 	wrlong	result1, fp
0e1ec     04 4E 05 F1 | 	add	fp, #4
0e1f0     A7 FC 61 FC | 	wrlong	result2, fp
0e1f4     04 4E 05 F1 | 	add	fp, #4
0e1f8     A7 22 62 FC | 	wrlong	local03, fp
0e1fc                 | ' 
0e1fc                 | ' t2=pop()
0e1fc                 | ' t1=pop()
0e1fc                 | ' 
0e1fc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
0e1fc     08 4E 85 F1 | 	sub	fp, #8
0e200     1D 22 0E F2 | 	cmp	local03, #29 wz
0e204     14 4E 05 A1 |  if_e	add	fp, #20
0e208     A7 24 02 AB |  if_e	rdlong	local04, fp
0e20c     14 4E 85 A1 |  if_e	sub	fp, #20
0e210     12 23 02 A6 |  if_e	mov	local03, local04
0e214     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e218     20 00 90 5D |  if_ne	jmp	#LR__1120
0e21c     A7 20 02 FB | 	rdlong	local02, fp
0e220     0C 4E 05 F1 | 	add	fp, #12
0e224     A7 22 02 FB | 	rdlong	local03, fp
0e228     11 21 02 FD | 	qmul	local02, local03
0e22c     0C 4E 85 F1 | 	sub	fp, #12
0e230     18 1E 62 FD | 	getqx	local01
0e234     A7 1E 62 FC | 	wrlong	local01, fp
0e238     C4 02 90 FD | 	jmp	#LR__1129
0e23c                 | LR__1120
0e23c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
0e23c     08 4E 05 F1 | 	add	fp, #8
0e240     A7 1E 02 FB | 	rdlong	local01, fp
0e244     08 4E 85 F1 | 	sub	fp, #8
0e248     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e24c     14 4E 05 A1 |  if_e	add	fp, #20
0e250     A7 24 02 AB |  if_e	rdlong	local04, fp
0e254     14 4E 85 A1 |  if_e	sub	fp, #20
0e258     12 23 02 A6 |  if_e	mov	local03, local04
0e25c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0e260     2C 00 90 5D |  if_ne	jmp	#LR__1121
0e264     A7 20 02 FB | 	rdlong	local02, fp
0e268     0C 4E 05 F1 | 	add	fp, #12
0e26c     A7 22 02 FB | 	rdlong	local03, fp
0e270     11 21 02 FD | 	qmul	local02, local03
0e274     0C 4E 85 F1 | 	sub	fp, #12
0e278     18 1E 62 FD | 	getqx	local01
0e27c     A7 1E 62 FC | 	wrlong	local01, fp
0e280     08 4E 05 F1 | 	add	fp, #8
0e284     A7 38 68 FC | 	wrlong	#28, fp
0e288     08 4E 85 F1 | 	sub	fp, #8
0e28c     70 02 90 FD | 	jmp	#LR__1129
0e290                 | LR__1121
0e290                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
0e290     08 4E 05 F1 | 	add	fp, #8
0e294     A7 1E 02 FB | 	rdlong	local01, fp
0e298     08 4E 85 F1 | 	sub	fp, #8
0e29c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e2a0     14 4E 05 A1 |  if_e	add	fp, #20
0e2a4     A7 24 02 AB |  if_e	rdlong	local04, fp
0e2a8     14 4E 85 A1 |  if_e	sub	fp, #20
0e2ac     12 23 02 A6 |  if_e	mov	local03, local04
0e2b0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e2b4     30 00 90 5D |  if_ne	jmp	#LR__1122
0e2b8     A7 12 02 FB | 	rdlong	arg01, fp
0e2bc     DC D0 B0 FD | 	call	#__system___float_fromuns
0e2c0     FD 12 02 F6 | 	mov	arg01, result1
0e2c4     0C 4E 05 F1 | 	add	fp, #12
0e2c8     A7 14 02 FB | 	rdlong	arg02, fp
0e2cc     0C 4E 85 F1 | 	sub	fp, #12
0e2d0     CC D4 B0 FD | 	call	#__system___float_mul
0e2d4     A7 FA 61 FC | 	wrlong	result1, fp
0e2d8     08 4E 05 F1 | 	add	fp, #8
0e2dc     A7 3C 68 FC | 	wrlong	#30, fp
0e2e0     08 4E 85 F1 | 	sub	fp, #8
0e2e4     18 02 90 FD | 	jmp	#LR__1129
0e2e8                 | LR__1122
0e2e8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
0e2e8     08 4E 05 F1 | 	add	fp, #8
0e2ec     A7 1E 02 FB | 	rdlong	local01, fp
0e2f0     08 4E 85 F1 | 	sub	fp, #8
0e2f4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e2f8     14 4E 05 A1 |  if_e	add	fp, #20
0e2fc     A7 24 02 AB |  if_e	rdlong	local04, fp
0e300     14 4E 85 A1 |  if_e	sub	fp, #20
0e304     12 23 02 A6 |  if_e	mov	local03, local04
0e308     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e30c     20 00 90 5D |  if_ne	jmp	#LR__1123
0e310     A7 20 02 FB | 	rdlong	local02, fp
0e314     0C 4E 05 F1 | 	add	fp, #12
0e318     A7 22 02 FB | 	rdlong	local03, fp
0e31c     11 21 02 FD | 	qmul	local02, local03
0e320     0C 4E 85 F1 | 	sub	fp, #12
0e324     18 1E 62 FD | 	getqx	local01
0e328     A7 1E 62 FC | 	wrlong	local01, fp
0e32c     D0 01 90 FD | 	jmp	#LR__1129
0e330                 | LR__1123
0e330                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
0e330     08 4E 05 F1 | 	add	fp, #8
0e334     A7 1E 02 FB | 	rdlong	local01, fp
0e338     08 4E 85 F1 | 	sub	fp, #8
0e33c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e340     14 4E 05 A1 |  if_e	add	fp, #20
0e344     A7 24 02 AB |  if_e	rdlong	local04, fp
0e348     14 4E 85 A1 |  if_e	sub	fp, #20
0e34c     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0e350     20 00 90 5D |  if_ne	jmp	#LR__1124
0e354     A7 20 02 FB | 	rdlong	local02, fp
0e358     0C 4E 05 F1 | 	add	fp, #12
0e35c     A7 22 02 FB | 	rdlong	local03, fp
0e360     11 21 02 FD | 	qmul	local02, local03
0e364     0C 4E 85 F1 | 	sub	fp, #12
0e368     18 1E 62 FD | 	getqx	local01
0e36c     A7 1E 62 FC | 	wrlong	local01, fp
0e370     8C 01 90 FD | 	jmp	#LR__1129
0e374                 | LR__1124
0e374                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
0e374     08 4E 05 F1 | 	add	fp, #8
0e378     A7 1E 02 FB | 	rdlong	local01, fp
0e37c     08 4E 85 F1 | 	sub	fp, #8
0e380     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e384     14 4E 05 A1 |  if_e	add	fp, #20
0e388     A7 22 02 AB |  if_e	rdlong	local03, fp
0e38c     14 4E 85 A1 |  if_e	sub	fp, #20
0e390     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e394     40 00 90 5D |  if_ne	jmp	#LR__1125
0e398     A7 12 02 FB | 	rdlong	arg01, fp
0e39c     09 13 52 F6 | 	abs	arg01, arg01 wc
0e3a0     1F 26 C6 C9 |  if_b	decod	local05, #31
0e3a4     00 26 06 36 |  if_ae	mov	local05, #0
0e3a8     F0 CF B0 FD | 	call	#__system___float_fromuns
0e3ac     13 FB 61 F5 | 	xor	result1, local05
0e3b0     FD 12 02 F6 | 	mov	arg01, result1
0e3b4     0C 4E 05 F1 | 	add	fp, #12
0e3b8     A7 14 02 FB | 	rdlong	arg02, fp
0e3bc     0C 4E 85 F1 | 	sub	fp, #12
0e3c0     DC D3 B0 FD | 	call	#__system___float_mul
0e3c4     A7 FA 61 FC | 	wrlong	result1, fp
0e3c8     08 4E 05 F1 | 	add	fp, #8
0e3cc     A7 3C 68 FC | 	wrlong	#30, fp
0e3d0     08 4E 85 F1 | 	sub	fp, #8
0e3d4     28 01 90 FD | 	jmp	#LR__1129
0e3d8                 | LR__1125
0e3d8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
0e3d8     08 4E 05 F1 | 	add	fp, #8
0e3dc     A7 1E 02 FB | 	rdlong	local01, fp
0e3e0     08 4E 85 F1 | 	sub	fp, #8
0e3e4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e3e8     14 4E 05 A1 |  if_e	add	fp, #20
0e3ec     A7 22 02 AB |  if_e	rdlong	local03, fp
0e3f0     14 4E 85 A1 |  if_e	sub	fp, #20
0e3f4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e3f8     28 00 90 5D |  if_ne	jmp	#LR__1126
0e3fc     A7 1E 02 FB | 	rdlong	local01, fp
0e400     0C 4E 05 F1 | 	add	fp, #12
0e404     A7 12 02 FB | 	rdlong	arg01, fp
0e408     0C 4E 85 F1 | 	sub	fp, #12
0e40c     8C CF B0 FD | 	call	#__system___float_fromuns
0e410     FD 14 02 F6 | 	mov	arg02, result1
0e414     0F 13 02 F6 | 	mov	arg01, local01
0e418     84 D3 B0 FD | 	call	#__system___float_mul
0e41c     A7 FA 61 FC | 	wrlong	result1, fp
0e420     DC 00 90 FD | 	jmp	#LR__1129
0e424                 | LR__1126
0e424                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
0e424     08 4E 05 F1 | 	add	fp, #8
0e428     A7 1E 02 FB | 	rdlong	local01, fp
0e42c     08 4E 85 F1 | 	sub	fp, #8
0e430     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e434     14 4E 05 A1 |  if_e	add	fp, #20
0e438     A7 22 02 AB |  if_e	rdlong	local03, fp
0e43c     14 4E 85 A1 |  if_e	sub	fp, #20
0e440     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0e444     38 00 90 5D |  if_ne	jmp	#LR__1127
0e448     A7 1E 02 FB | 	rdlong	local01, fp
0e44c     0C 4E 05 F1 | 	add	fp, #12
0e450     A7 12 02 FB | 	rdlong	arg01, fp
0e454     0C 4E 85 F1 | 	sub	fp, #12
0e458     09 13 52 F6 | 	abs	arg01, arg01 wc
0e45c     1F 26 C6 C9 |  if_b	decod	local05, #31
0e460     00 26 06 36 |  if_ae	mov	local05, #0
0e464     34 CF B0 FD | 	call	#__system___float_fromuns
0e468     13 FB 61 F5 | 	xor	result1, local05
0e46c     FD 14 02 F6 | 	mov	arg02, result1
0e470     0F 13 02 F6 | 	mov	arg01, local01
0e474     28 D3 B0 FD | 	call	#__system___float_mul
0e478     A7 FA 61 FC | 	wrlong	result1, fp
0e47c     80 00 90 FD | 	jmp	#LR__1129
0e480                 | LR__1127
0e480                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
0e480     08 4E 05 F1 | 	add	fp, #8
0e484     A7 1E 02 FB | 	rdlong	local01, fp
0e488     08 4E 85 F1 | 	sub	fp, #8
0e48c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e490     14 4E 05 A1 |  if_e	add	fp, #20
0e494     A7 22 02 AB |  if_e	rdlong	local03, fp
0e498     14 4E 85 A1 |  if_e	sub	fp, #20
0e49c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e4a0     1C 00 90 5D |  if_ne	jmp	#LR__1128
0e4a4     A7 12 02 FB | 	rdlong	arg01, fp
0e4a8     0C 4E 05 F1 | 	add	fp, #12
0e4ac     A7 14 02 FB | 	rdlong	arg02, fp
0e4b0     0C 4E 85 F1 | 	sub	fp, #12
0e4b4     E8 D2 B0 FD | 	call	#__system___float_mul
0e4b8     A7 FA 61 FC | 	wrlong	result1, fp
0e4bc     40 00 90 FD | 	jmp	#LR__1129
0e4c0                 | LR__1128
0e4c0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
0e4c0     08 4E 05 F1 | 	add	fp, #8
0e4c4     A7 1E 02 FB | 	rdlong	local01, fp
0e4c8     08 4E 85 F1 | 	sub	fp, #8
0e4cc     1F 1E 0E F2 | 	cmp	local01, #31 wz
0e4d0     14 4E 05 51 |  if_ne	add	fp, #20
0e4d4     A7 22 02 5B |  if_ne	rdlong	local03, fp
0e4d8     14 4E 85 51 |  if_ne	sub	fp, #20
0e4dc     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
0e4e0     A7 10 68 AC |  if_e	wrlong	#8, fp
0e4e4     08 4E 05 A1 |  if_e	add	fp, #8
0e4e8     A7 FE 69 AC |  if_e	wrlong	#255, fp
0e4ec     08 4E 85 A1 |  if_e	sub	fp, #8
0e4f0     A7 12 68 5C |  if_ne	wrlong	#9, fp
0e4f4     08 4E 05 51 |  if_ne	add	fp, #8
0e4f8     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0e4fc     08 4E 85 51 |  if_ne	sub	fp, #8
0e500                 | LR__1129
0e500     A7 12 02 F6 | 	mov	arg01, fp
0e504     4C B4 BF FD | 	call	#_push
0e508     A7 F0 03 F6 | 	mov	ptra, fp
0e50c     B2 00 A0 FD | 	call	#popregs_
0e510                 | _do_mul_ret
0e510     2D 00 64 FD | 	ret
0e514                 | 
0e514                 | ' 
0e514                 | ' sub do_div 
0e514                 | _do_div
0e514     01 4A 05 F6 | 	mov	COUNT_, #1
0e518     A8 00 A0 FD | 	call	#pushregs_
0e51c     18 F0 07 F1 | 	add	ptra, #24
0e520     98 B3 BF FD | 	call	#_pop
0e524     FD 66 02 F6 | 	mov	muldivb_, result1
0e528     FE 64 02 F6 | 	mov	muldiva_, result2
0e52c     FF 1E 02 F6 | 	mov	local01, result3
0e530     0C 4E 05 F1 | 	add	fp, #12
0e534     A7 66 62 FC | 	wrlong	muldivb_, fp
0e538     04 4E 05 F1 | 	add	fp, #4
0e53c     A7 64 62 FC | 	wrlong	muldiva_, fp
0e540     04 4E 05 F1 | 	add	fp, #4
0e544     A7 1E 62 FC | 	wrlong	local01, fp
0e548     14 4E 85 F1 | 	sub	fp, #20
0e54c     6C B3 BF FD | 	call	#_pop
0e550     A7 FA 61 FC | 	wrlong	result1, fp
0e554     04 4E 05 F1 | 	add	fp, #4
0e558     A7 FC 61 FC | 	wrlong	result2, fp
0e55c     04 4E 05 F1 | 	add	fp, #4
0e560     A7 FE 61 FC | 	wrlong	result3, fp
0e564                 | ' 
0e564                 | ' t2=pop()
0e564                 | ' t1=pop()
0e564                 | ' 
0e564                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
0e564     08 4E 85 F1 | 	sub	fp, #8
0e568     1F FE 0D F2 | 	cmp	result3, #31 wz
0e56c     14 4E 05 51 |  if_ne	add	fp, #20
0e570     A7 12 02 5B |  if_ne	rdlong	arg01, fp
0e574     14 4E 85 51 |  if_ne	sub	fp, #20
0e578     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
0e57c     A7 14 68 AC |  if_e	wrlong	#10, fp
0e580     08 4E 05 A1 |  if_e	add	fp, #8
0e584     A7 FE 69 AC |  if_e	wrlong	#255, fp
0e588     08 4E 85 A1 |  if_e	sub	fp, #8
0e58c     90 01 90 AD |  if_e	jmp	#LR__1136
0e590                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
0e590     08 4E 05 F1 | 	add	fp, #8
0e594     A7 66 02 FB | 	rdlong	muldivb_, fp
0e598     08 4E 85 F1 | 	sub	fp, #8
0e59c     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
0e5a0     1C 00 90 5D |  if_ne	jmp	#LR__1130
0e5a4     08 4E 05 F1 | 	add	fp, #8
0e5a8     A7 38 68 FC | 	wrlong	#28, fp
0e5ac     08 4E 85 F1 | 	sub	fp, #8
0e5b0     A7 12 02 FB | 	rdlong	arg01, fp
0e5b4     00 14 06 F6 | 	mov	arg02, #0
0e5b8     AC D6 B0 FD | 	call	#__system___float_tointeger
0e5bc     A7 FA 61 FC | 	wrlong	result1, fp
0e5c0                 | LR__1130
0e5c0                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
0e5c0     14 4E 05 F1 | 	add	fp, #20
0e5c4     A7 66 02 FB | 	rdlong	muldivb_, fp
0e5c8     14 4E 85 F1 | 	sub	fp, #20
0e5cc     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
0e5d0     28 00 90 5D |  if_ne	jmp	#LR__1131
0e5d4     14 4E 05 F1 | 	add	fp, #20
0e5d8     A7 38 68 FC | 	wrlong	#28, fp
0e5dc     08 4E 85 F1 | 	sub	fp, #8
0e5e0     A7 12 02 FB | 	rdlong	arg01, fp
0e5e4     0C 4E 85 F1 | 	sub	fp, #12
0e5e8     00 14 06 F6 | 	mov	arg02, #0
0e5ec     78 D6 B0 FD | 	call	#__system___float_tointeger
0e5f0     0C 4E 05 F1 | 	add	fp, #12
0e5f4     A7 FA 61 FC | 	wrlong	result1, fp
0e5f8     0C 4E 85 F1 | 	sub	fp, #12
0e5fc                 | LR__1131
0e5fc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
0e5fc     08 4E 05 F1 | 	add	fp, #8
0e600     A7 66 02 FB | 	rdlong	muldivb_, fp
0e604     08 4E 85 F1 | 	sub	fp, #8
0e608     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
0e60c     14 4E 05 A1 |  if_e	add	fp, #20
0e610     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e614     14 4E 85 A1 |  if_e	sub	fp, #20
0e618     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0e61c     20 00 90 5D |  if_ne	jmp	#LR__1132
0e620     0C 4E 05 F1 | 	add	fp, #12
0e624     A7 1E 02 FB | 	rdlong	local01, fp
0e628     0C 4E 85 F1 | 	sub	fp, #12
0e62c     A7 66 02 FB | 	rdlong	muldivb_, fp
0e630     0F 67 12 FD | 	qdiv	muldivb_, local01
0e634     18 1E 62 FD | 	getqx	local01
0e638     A7 1E 62 FC | 	wrlong	local01, fp
0e63c     E0 00 90 FD | 	jmp	#LR__1136
0e640                 | LR__1132
0e640                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
0e640     08 4E 05 F1 | 	add	fp, #8
0e644     A7 66 02 FB | 	rdlong	muldivb_, fp
0e648     08 4E 85 F1 | 	sub	fp, #8
0e64c     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
0e650     14 4E 05 A1 |  if_e	add	fp, #20
0e654     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e658     14 4E 85 A1 |  if_e	sub	fp, #20
0e65c     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0e660     2C 00 90 5D |  if_ne	jmp	#LR__1133
0e664     0C 4E 05 F1 | 	add	fp, #12
0e668     A7 1E 02 FB | 	rdlong	local01, fp
0e66c     0C 4E 85 F1 | 	sub	fp, #12
0e670     A7 66 02 FB | 	rdlong	muldivb_, fp
0e674     0F 67 12 FD | 	qdiv	muldivb_, local01
0e678     18 1E 62 FD | 	getqx	local01
0e67c     A7 1E 62 FC | 	wrlong	local01, fp
0e680     08 4E 05 F1 | 	add	fp, #8
0e684     A7 38 68 FC | 	wrlong	#28, fp
0e688     08 4E 85 F1 | 	sub	fp, #8
0e68c     90 00 90 FD | 	jmp	#LR__1136
0e690                 | LR__1133
0e690                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
0e690     08 4E 05 F1 | 	add	fp, #8
0e694     A7 66 02 FB | 	rdlong	muldivb_, fp
0e698     08 4E 85 F1 | 	sub	fp, #8
0e69c     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
0e6a0     14 4E 05 A1 |  if_e	add	fp, #20
0e6a4     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e6a8     14 4E 85 A1 |  if_e	sub	fp, #20
0e6ac     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0e6b0     1C 00 90 5D |  if_ne	jmp	#LR__1134
0e6b4     A7 64 02 FB | 	rdlong	muldiva_, fp
0e6b8     0C 4E 05 F1 | 	add	fp, #12
0e6bc     A7 66 02 FB | 	rdlong	muldivb_, fp
0e6c0     0C 4E 85 F1 | 	sub	fp, #12
0e6c4     BA 00 A0 FD | 	call	#divide_
0e6c8     A7 66 62 FC | 	wrlong	muldivb_, fp
0e6cc     50 00 90 FD | 	jmp	#LR__1136
0e6d0                 | LR__1134
0e6d0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
0e6d0     08 4E 05 F1 | 	add	fp, #8
0e6d4     A7 66 02 FB | 	rdlong	muldivb_, fp
0e6d8     08 4E 85 F1 | 	sub	fp, #8
0e6dc     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
0e6e0     14 4E 05 A1 |  if_e	add	fp, #20
0e6e4     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e6e8     14 4E 85 A1 |  if_e	sub	fp, #20
0e6ec     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0e6f0     1C 00 90 5D |  if_ne	jmp	#LR__1135
0e6f4     A7 64 02 FB | 	rdlong	muldiva_, fp
0e6f8     0C 4E 05 F1 | 	add	fp, #12
0e6fc     A7 66 02 FB | 	rdlong	muldivb_, fp
0e700     0C 4E 85 F1 | 	sub	fp, #12
0e704     BA 00 A0 FD | 	call	#divide_
0e708     A7 66 62 FC | 	wrlong	muldivb_, fp
0e70c     10 00 90 FD | 	jmp	#LR__1136
0e710                 | LR__1135
0e710     A7 16 68 FC | 	wrlong	#11, fp
0e714     08 4E 05 F1 | 	add	fp, #8
0e718     A7 FE 69 FC | 	wrlong	#255, fp
0e71c     08 4E 85 F1 | 	sub	fp, #8
0e720                 | LR__1136
0e720     A7 12 02 F6 | 	mov	arg01, fp
0e724     2C B2 BF FD | 	call	#_push
0e728     A7 F0 03 F6 | 	mov	ptra, fp
0e72c     B2 00 A0 FD | 	call	#popregs_
0e730                 | _do_div_ret
0e730     2D 00 64 FD | 	ret
0e734                 | 
0e734                 | ' 
0e734                 | ' sub do_fdiv 
0e734                 | _do_fdiv
0e734     02 4A 05 F6 | 	mov	COUNT_, #2
0e738     A8 00 A0 FD | 	call	#pushregs_
0e73c     18 F0 07 F1 | 	add	ptra, #24
0e740     78 B1 BF FD | 	call	#_pop
0e744     FD 14 02 F6 | 	mov	arg02, result1
0e748     FE 12 02 F6 | 	mov	arg01, result2
0e74c     FF 1E 02 F6 | 	mov	local01, result3
0e750     0C 4E 05 F1 | 	add	fp, #12
0e754     A7 14 62 FC | 	wrlong	arg02, fp
0e758     04 4E 05 F1 | 	add	fp, #4
0e75c     A7 12 62 FC | 	wrlong	arg01, fp
0e760     04 4E 05 F1 | 	add	fp, #4
0e764     A7 1E 62 FC | 	wrlong	local01, fp
0e768     14 4E 85 F1 | 	sub	fp, #20
0e76c     4C B1 BF FD | 	call	#_pop
0e770     A7 FA 61 FC | 	wrlong	result1, fp
0e774     04 4E 05 F1 | 	add	fp, #4
0e778     A7 FC 61 FC | 	wrlong	result2, fp
0e77c     04 4E 05 F1 | 	add	fp, #4
0e780     A7 FE 61 FC | 	wrlong	result3, fp
0e784                 | ' 
0e784                 | ' t2=pop()
0e784                 | ' t1=pop()
0e784                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
0e784     08 4E 85 F1 | 	sub	fp, #8
0e788     1F FE 0D F2 | 	cmp	result3, #31 wz
0e78c     14 4E 05 51 |  if_ne	add	fp, #20
0e790     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e794     14 4E 85 51 |  if_ne	sub	fp, #20
0e798     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
0e79c     A7 14 68 AC |  if_e	wrlong	#10, fp
0e7a0     08 4E 05 A1 |  if_e	add	fp, #8
0e7a4     A7 FE 69 AC |  if_e	wrlong	#255, fp
0e7a8     08 4E 85 A1 |  if_e	sub	fp, #8
0e7ac     38 01 90 AD |  if_e	jmp	#LR__1145
0e7b0                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
0e7b0     08 4E 05 F1 | 	add	fp, #8
0e7b4     A7 14 02 FB | 	rdlong	arg02, fp
0e7b8     08 4E 85 F1 | 	sub	fp, #8
0e7bc     1C 14 0E F2 | 	cmp	arg02, #28 wz
0e7c0     28 00 90 5D |  if_ne	jmp	#LR__1140
0e7c4     08 4E 05 F1 | 	add	fp, #8
0e7c8     A7 3C 68 FC | 	wrlong	#30, fp
0e7cc     08 4E 85 F1 | 	sub	fp, #8
0e7d0     A7 12 02 FB | 	rdlong	arg01, fp
0e7d4     09 13 52 F6 | 	abs	arg01, arg01 wc
0e7d8     1F 20 C6 C9 |  if_b	decod	local02, #31
0e7dc     00 20 06 36 |  if_ae	mov	local02, #0
0e7e0     B8 CB B0 FD | 	call	#__system___float_fromuns
0e7e4     10 FB 61 F5 | 	xor	result1, local02
0e7e8     A7 FA 61 FC | 	wrlong	result1, fp
0e7ec                 | LR__1140
0e7ec                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
0e7ec     08 4E 05 F1 | 	add	fp, #8
0e7f0     A7 14 02 FB | 	rdlong	arg02, fp
0e7f4     08 4E 85 F1 | 	sub	fp, #8
0e7f8     1D 14 0E F2 | 	cmp	arg02, #29 wz
0e7fc     18 00 90 5D |  if_ne	jmp	#LR__1141
0e800     08 4E 05 F1 | 	add	fp, #8
0e804     A7 3C 68 FC | 	wrlong	#30, fp
0e808     08 4E 85 F1 | 	sub	fp, #8
0e80c     A7 12 02 FB | 	rdlong	arg01, fp
0e810     88 CB B0 FD | 	call	#__system___float_fromuns
0e814     A7 FA 61 FC | 	wrlong	result1, fp
0e818                 | LR__1141
0e818                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
0e818     14 4E 05 F1 | 	add	fp, #20
0e81c     A7 14 02 FB | 	rdlong	arg02, fp
0e820     14 4E 85 F1 | 	sub	fp, #20
0e824     1C 14 0E F2 | 	cmp	arg02, #28 wz
0e828     34 00 90 5D |  if_ne	jmp	#LR__1142
0e82c     14 4E 05 F1 | 	add	fp, #20
0e830     A7 3C 68 FC | 	wrlong	#30, fp
0e834     08 4E 85 F1 | 	sub	fp, #8
0e838     A7 12 02 FB | 	rdlong	arg01, fp
0e83c     0C 4E 85 F1 | 	sub	fp, #12
0e840     09 13 52 F6 | 	abs	arg01, arg01 wc
0e844     1F 20 C6 C9 |  if_b	decod	local02, #31
0e848     00 20 06 36 |  if_ae	mov	local02, #0
0e84c     4C CB B0 FD | 	call	#__system___float_fromuns
0e850     10 FB 61 F5 | 	xor	result1, local02
0e854     0C 4E 05 F1 | 	add	fp, #12
0e858     A7 FA 61 FC | 	wrlong	result1, fp
0e85c     0C 4E 85 F1 | 	sub	fp, #12
0e860                 | LR__1142
0e860                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
0e860     14 4E 05 F1 | 	add	fp, #20
0e864     A7 14 02 FB | 	rdlong	arg02, fp
0e868     14 4E 85 F1 | 	sub	fp, #20
0e86c     1D 14 0E F2 | 	cmp	arg02, #29 wz
0e870     24 00 90 5D |  if_ne	jmp	#LR__1143
0e874     14 4E 05 F1 | 	add	fp, #20
0e878     A7 3C 68 FC | 	wrlong	#30, fp
0e87c     08 4E 85 F1 | 	sub	fp, #8
0e880     A7 12 02 FB | 	rdlong	arg01, fp
0e884     0C 4E 85 F1 | 	sub	fp, #12
0e888     10 CB B0 FD | 	call	#__system___float_fromuns
0e88c     0C 4E 05 F1 | 	add	fp, #12
0e890     A7 FA 61 FC | 	wrlong	result1, fp
0e894     0C 4E 85 F1 | 	sub	fp, #12
0e898                 | LR__1143
0e898                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
0e898     08 4E 05 F1 | 	add	fp, #8
0e89c     A7 14 02 FB | 	rdlong	arg02, fp
0e8a0     08 4E 85 F1 | 	sub	fp, #8
0e8a4     1E 14 0E F2 | 	cmp	arg02, #30 wz
0e8a8     14 4E 05 A1 |  if_e	add	fp, #20
0e8ac     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e8b0     14 4E 85 A1 |  if_e	sub	fp, #20
0e8b4     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
0e8b8     1C 00 90 5D |  if_ne	jmp	#LR__1144
0e8bc     A7 12 02 FB | 	rdlong	arg01, fp
0e8c0     0C 4E 05 F1 | 	add	fp, #12
0e8c4     A7 14 02 FB | 	rdlong	arg02, fp
0e8c8     0C 4E 85 F1 | 	sub	fp, #12
0e8cc     D4 D0 B0 FD | 	call	#__system___float_div
0e8d0     A7 FA 61 FC | 	wrlong	result1, fp
0e8d4     10 00 90 FD | 	jmp	#LR__1145
0e8d8                 | LR__1144
0e8d8     A7 16 68 FC | 	wrlong	#11, fp
0e8dc     08 4E 05 F1 | 	add	fp, #8
0e8e0     A7 FE 69 FC | 	wrlong	#255, fp
0e8e4     08 4E 85 F1 | 	sub	fp, #8
0e8e8                 | LR__1145
0e8e8     A7 12 02 F6 | 	mov	arg01, fp
0e8ec     64 B0 BF FD | 	call	#_push
0e8f0     A7 F0 03 F6 | 	mov	ptra, fp
0e8f4     B2 00 A0 FD | 	call	#popregs_
0e8f8                 | _do_fdiv_ret
0e8f8     2D 00 64 FD | 	ret
0e8fc                 | 
0e8fc                 | ' 
0e8fc                 | ' 
0e8fc                 | ' sub do_mod 
0e8fc                 | _do_mod
0e8fc     01 4A 05 F6 | 	mov	COUNT_, #1
0e900     A8 00 A0 FD | 	call	#pushregs_
0e904     18 F0 07 F1 | 	add	ptra, #24
0e908     B0 AF BF FD | 	call	#_pop
0e90c     FD 66 02 F6 | 	mov	muldivb_, result1
0e910     FE 64 02 F6 | 	mov	muldiva_, result2
0e914     FF 1E 02 F6 | 	mov	local01, result3
0e918     0C 4E 05 F1 | 	add	fp, #12
0e91c     A7 66 62 FC | 	wrlong	muldivb_, fp
0e920     04 4E 05 F1 | 	add	fp, #4
0e924     A7 64 62 FC | 	wrlong	muldiva_, fp
0e928     04 4E 05 F1 | 	add	fp, #4
0e92c     A7 1E 62 FC | 	wrlong	local01, fp
0e930     14 4E 85 F1 | 	sub	fp, #20
0e934     84 AF BF FD | 	call	#_pop
0e938     A7 FA 61 FC | 	wrlong	result1, fp
0e93c     04 4E 05 F1 | 	add	fp, #4
0e940     A7 FC 61 FC | 	wrlong	result2, fp
0e944     04 4E 05 F1 | 	add	fp, #4
0e948     A7 FE 61 FC | 	wrlong	result3, fp
0e94c                 | ' 
0e94c                 | ' t2=pop()
0e94c                 | ' t1=pop()
0e94c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
0e94c     08 4E 85 F1 | 	sub	fp, #8
0e950     1F FE 0D F2 | 	cmp	result3, #31 wz
0e954     14 4E 05 51 |  if_ne	add	fp, #20
0e958     A7 12 02 5B |  if_ne	rdlong	arg01, fp
0e95c     14 4E 85 51 |  if_ne	sub	fp, #20
0e960     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
0e964     A7 14 68 AC |  if_e	wrlong	#10, fp
0e968     08 4E 05 A1 |  if_e	add	fp, #8
0e96c     A7 FE 69 AC |  if_e	wrlong	#255, fp
0e970     08 4E 85 A1 |  if_e	sub	fp, #8
0e974     90 01 90 AD |  if_e	jmp	#LR__1156
0e978                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
0e978     08 4E 05 F1 | 	add	fp, #8
0e97c     A7 66 02 FB | 	rdlong	muldivb_, fp
0e980     08 4E 85 F1 | 	sub	fp, #8
0e984     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
0e988     1C 00 90 5D |  if_ne	jmp	#LR__1150
0e98c     08 4E 05 F1 | 	add	fp, #8
0e990     A7 38 68 FC | 	wrlong	#28, fp
0e994     08 4E 85 F1 | 	sub	fp, #8
0e998     A7 12 02 FB | 	rdlong	arg01, fp
0e99c     00 14 06 F6 | 	mov	arg02, #0
0e9a0     C4 D2 B0 FD | 	call	#__system___float_tointeger
0e9a4     A7 FA 61 FC | 	wrlong	result1, fp
0e9a8                 | LR__1150
0e9a8                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
0e9a8     14 4E 05 F1 | 	add	fp, #20
0e9ac     A7 66 02 FB | 	rdlong	muldivb_, fp
0e9b0     14 4E 85 F1 | 	sub	fp, #20
0e9b4     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
0e9b8     28 00 90 5D |  if_ne	jmp	#LR__1151
0e9bc     14 4E 05 F1 | 	add	fp, #20
0e9c0     A7 38 68 FC | 	wrlong	#28, fp
0e9c4     08 4E 85 F1 | 	sub	fp, #8
0e9c8     A7 12 02 FB | 	rdlong	arg01, fp
0e9cc     0C 4E 85 F1 | 	sub	fp, #12
0e9d0     00 14 06 F6 | 	mov	arg02, #0
0e9d4     90 D2 B0 FD | 	call	#__system___float_tointeger
0e9d8     0C 4E 05 F1 | 	add	fp, #12
0e9dc     A7 FA 61 FC | 	wrlong	result1, fp
0e9e0     0C 4E 85 F1 | 	sub	fp, #12
0e9e4                 | LR__1151
0e9e4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
0e9e4     08 4E 05 F1 | 	add	fp, #8
0e9e8     A7 66 02 FB | 	rdlong	muldivb_, fp
0e9ec     08 4E 85 F1 | 	sub	fp, #8
0e9f0     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
0e9f4     14 4E 05 A1 |  if_e	add	fp, #20
0e9f8     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e9fc     14 4E 85 A1 |  if_e	sub	fp, #20
0ea00     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0ea04     20 00 90 5D |  if_ne	jmp	#LR__1152
0ea08     0C 4E 05 F1 | 	add	fp, #12
0ea0c     A7 1E 02 FB | 	rdlong	local01, fp
0ea10     0C 4E 85 F1 | 	sub	fp, #12
0ea14     A7 66 02 FB | 	rdlong	muldivb_, fp
0ea18     0F 67 12 FD | 	qdiv	muldivb_, local01
0ea1c     19 1E 62 FD | 	getqy	local01
0ea20     A7 1E 62 FC | 	wrlong	local01, fp
0ea24     E0 00 90 FD | 	jmp	#LR__1156
0ea28                 | LR__1152
0ea28                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
0ea28     08 4E 05 F1 | 	add	fp, #8
0ea2c     A7 66 02 FB | 	rdlong	muldivb_, fp
0ea30     08 4E 85 F1 | 	sub	fp, #8
0ea34     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
0ea38     14 4E 05 A1 |  if_e	add	fp, #20
0ea3c     A7 1E 02 AB |  if_e	rdlong	local01, fp
0ea40     14 4E 85 A1 |  if_e	sub	fp, #20
0ea44     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0ea48     2C 00 90 5D |  if_ne	jmp	#LR__1153
0ea4c     0C 4E 05 F1 | 	add	fp, #12
0ea50     A7 1E 02 FB | 	rdlong	local01, fp
0ea54     0C 4E 85 F1 | 	sub	fp, #12
0ea58     A7 66 02 FB | 	rdlong	muldivb_, fp
0ea5c     0F 67 12 FD | 	qdiv	muldivb_, local01
0ea60     19 1E 62 FD | 	getqy	local01
0ea64     A7 1E 62 FC | 	wrlong	local01, fp
0ea68     08 4E 05 F1 | 	add	fp, #8
0ea6c     A7 38 68 FC | 	wrlong	#28, fp
0ea70     08 4E 85 F1 | 	sub	fp, #8
0ea74     90 00 90 FD | 	jmp	#LR__1156
0ea78                 | LR__1153
0ea78                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
0ea78     08 4E 05 F1 | 	add	fp, #8
0ea7c     A7 66 02 FB | 	rdlong	muldivb_, fp
0ea80     08 4E 85 F1 | 	sub	fp, #8
0ea84     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
0ea88     14 4E 05 A1 |  if_e	add	fp, #20
0ea8c     A7 1E 02 AB |  if_e	rdlong	local01, fp
0ea90     14 4E 85 A1 |  if_e	sub	fp, #20
0ea94     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0ea98     1C 00 90 5D |  if_ne	jmp	#LR__1154
0ea9c     A7 64 02 FB | 	rdlong	muldiva_, fp
0eaa0     0C 4E 05 F1 | 	add	fp, #12
0eaa4     A7 66 02 FB | 	rdlong	muldivb_, fp
0eaa8     0C 4E 85 F1 | 	sub	fp, #12
0eaac     BA 00 A0 FD | 	call	#divide_
0eab0     A7 64 62 FC | 	wrlong	muldiva_, fp
0eab4     50 00 90 FD | 	jmp	#LR__1156
0eab8                 | LR__1154
0eab8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
0eab8     08 4E 05 F1 | 	add	fp, #8
0eabc     A7 66 02 FB | 	rdlong	muldivb_, fp
0eac0     08 4E 85 F1 | 	sub	fp, #8
0eac4     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
0eac8     14 4E 05 A1 |  if_e	add	fp, #20
0eacc     A7 1E 02 AB |  if_e	rdlong	local01, fp
0ead0     14 4E 85 A1 |  if_e	sub	fp, #20
0ead4     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0ead8     1C 00 90 5D |  if_ne	jmp	#LR__1155
0eadc     A7 64 02 FB | 	rdlong	muldiva_, fp
0eae0     0C 4E 05 F1 | 	add	fp, #12
0eae4     A7 66 02 FB | 	rdlong	muldivb_, fp
0eae8     0C 4E 85 F1 | 	sub	fp, #12
0eaec     BA 00 A0 FD | 	call	#divide_
0eaf0     A7 64 62 FC | 	wrlong	muldiva_, fp
0eaf4     10 00 90 FD | 	jmp	#LR__1156
0eaf8                 | LR__1155
0eaf8     A7 16 68 FC | 	wrlong	#11, fp
0eafc     08 4E 05 F1 | 	add	fp, #8
0eb00     A7 FE 69 FC | 	wrlong	#255, fp
0eb04     08 4E 85 F1 | 	sub	fp, #8
0eb08                 | LR__1156
0eb08     A7 12 02 F6 | 	mov	arg01, fp
0eb0c     44 AE BF FD | 	call	#_push
0eb10     A7 F0 03 F6 | 	mov	ptra, fp
0eb14     B2 00 A0 FD | 	call	#popregs_
0eb18                 | _do_mod_ret
0eb18     2D 00 64 FD | 	ret
0eb1c                 | 
0eb1c                 | ' 
0eb1c                 | ' sub do_shl 
0eb1c                 | _do_shl
0eb1c     03 4A 05 F6 | 	mov	COUNT_, #3
0eb20     A8 00 A0 FD | 	call	#pushregs_
0eb24     18 F0 07 F1 | 	add	ptra, #24
0eb28     90 AD BF FD | 	call	#_pop
0eb2c     FD 12 02 F6 | 	mov	arg01, result1
0eb30     FE 1E 02 F6 | 	mov	local01, result2
0eb34     FF 20 02 F6 | 	mov	local02, result3
0eb38     0C 4E 05 F1 | 	add	fp, #12
0eb3c     A7 12 62 FC | 	wrlong	arg01, fp
0eb40     04 4E 05 F1 | 	add	fp, #4
0eb44     A7 1E 62 FC | 	wrlong	local01, fp
0eb48     04 4E 05 F1 | 	add	fp, #4
0eb4c     A7 20 62 FC | 	wrlong	local02, fp
0eb50     14 4E 85 F1 | 	sub	fp, #20
0eb54     64 AD BF FD | 	call	#_pop
0eb58     FF 22 02 F6 | 	mov	local03, result3
0eb5c     A7 FA 61 FC | 	wrlong	result1, fp
0eb60     04 4E 05 F1 | 	add	fp, #4
0eb64     A7 FC 61 FC | 	wrlong	result2, fp
0eb68     04 4E 05 F1 | 	add	fp, #4
0eb6c     A7 22 62 FC | 	wrlong	local03, fp
0eb70                 | ' 
0eb70                 | ' t2=pop()
0eb70                 | ' t1=pop()
0eb70                 | ' 
0eb70                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0eb70     08 4E 85 F1 | 	sub	fp, #8
0eb74     1C 22 0E F2 | 	cmp	local03, #28 wz
0eb78     A7 22 02 AB |  if_e	rdlong	local03, fp
0eb7c     A7 22 62 AC |  if_e	wrlong	local03, fp
0eb80     08 4E 05 A1 |  if_e	add	fp, #8
0eb84     A7 3A 68 AC |  if_e	wrlong	#29, fp
0eb88     08 4E 85 A1 |  if_e	sub	fp, #8
0eb8c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0eb8c     14 4E 05 F1 | 	add	fp, #20
0eb90     A7 22 02 FB | 	rdlong	local03, fp
0eb94     14 4E 85 F1 | 	sub	fp, #20
0eb98     1C 22 0E F2 | 	cmp	local03, #28 wz
0eb9c     18 00 90 5D |  if_ne	jmp	#LR__1160
0eba0     0C 4E 05 F1 | 	add	fp, #12
0eba4     A7 22 02 FB | 	rdlong	local03, fp
0eba8     A7 22 62 FC | 	wrlong	local03, fp
0ebac     08 4E 05 F1 | 	add	fp, #8
0ebb0     A7 3A 68 FC | 	wrlong	#29, fp
0ebb4     14 4E 85 F1 | 	sub	fp, #20
0ebb8                 | LR__1160
0ebb8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
0ebb8     08 4E 05 F1 | 	add	fp, #8
0ebbc     A7 22 02 FB | 	rdlong	local03, fp
0ebc0     08 4E 85 F1 | 	sub	fp, #8
0ebc4     1F 22 0E F2 | 	cmp	local03, #31 wz
0ebc8     14 4E 05 51 |  if_ne	add	fp, #20
0ebcc     A7 20 02 5B |  if_ne	rdlong	local02, fp
0ebd0     14 4E 85 51 |  if_ne	sub	fp, #20
0ebd4     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0ebd8     08 4E 05 51 |  if_ne	add	fp, #8
0ebdc     A7 22 02 5B |  if_ne	rdlong	local03, fp
0ebe0     08 4E 85 51 |  if_ne	sub	fp, #8
0ebe4     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0ebe8     14 4E 05 51 |  if_ne	add	fp, #20
0ebec     14 4E 85 51 |  if_ne	sub	fp, #20
0ebf0     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0ebf4     A7 0C 68 AC |  if_e	wrlong	#6, fp
0ebf8     08 4E 05 A1 |  if_e	add	fp, #8
0ebfc     A7 FE 69 AC |  if_e	wrlong	#255, fp
0ec00     08 4E 85 A1 |  if_e	sub	fp, #8
0ec04     18 00 90 AD |  if_e	jmp	#LR__1161
0ec08     A7 22 02 FB | 	rdlong	local03, fp
0ec0c     0C 4E 05 F1 | 	add	fp, #12
0ec10     A7 1E 02 FB | 	rdlong	local01, fp
0ec14     0C 4E 85 F1 | 	sub	fp, #12
0ec18     0F 23 62 F0 | 	shl	local03, local01
0ec1c     A7 22 62 FC | 	wrlong	local03, fp
0ec20                 | LR__1161
0ec20     A7 12 02 F6 | 	mov	arg01, fp
0ec24     2C AD BF FD | 	call	#_push
0ec28     A7 F0 03 F6 | 	mov	ptra, fp
0ec2c     B2 00 A0 FD | 	call	#popregs_
0ec30                 | _do_shl_ret
0ec30     2D 00 64 FD | 	ret
0ec34                 | 
0ec34                 | ' 
0ec34                 | ' sub do_shr 
0ec34                 | _do_shr
0ec34     03 4A 05 F6 | 	mov	COUNT_, #3
0ec38     A8 00 A0 FD | 	call	#pushregs_
0ec3c     18 F0 07 F1 | 	add	ptra, #24
0ec40     78 AC BF FD | 	call	#_pop
0ec44     FD 12 02 F6 | 	mov	arg01, result1
0ec48     FE 1E 02 F6 | 	mov	local01, result2
0ec4c     FF 20 02 F6 | 	mov	local02, result3
0ec50     0C 4E 05 F1 | 	add	fp, #12
0ec54     A7 12 62 FC | 	wrlong	arg01, fp
0ec58     04 4E 05 F1 | 	add	fp, #4
0ec5c     A7 1E 62 FC | 	wrlong	local01, fp
0ec60     04 4E 05 F1 | 	add	fp, #4
0ec64     A7 20 62 FC | 	wrlong	local02, fp
0ec68     14 4E 85 F1 | 	sub	fp, #20
0ec6c     4C AC BF FD | 	call	#_pop
0ec70     FF 22 02 F6 | 	mov	local03, result3
0ec74     A7 FA 61 FC | 	wrlong	result1, fp
0ec78     04 4E 05 F1 | 	add	fp, #4
0ec7c     A7 FC 61 FC | 	wrlong	result2, fp
0ec80     04 4E 05 F1 | 	add	fp, #4
0ec84     A7 22 62 FC | 	wrlong	local03, fp
0ec88                 | ' t2=pop()
0ec88                 | ' t1=pop()
0ec88                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0ec88     08 4E 85 F1 | 	sub	fp, #8
0ec8c     1C 22 0E F2 | 	cmp	local03, #28 wz
0ec90     A7 22 02 AB |  if_e	rdlong	local03, fp
0ec94     A7 22 62 AC |  if_e	wrlong	local03, fp
0ec98     08 4E 05 A1 |  if_e	add	fp, #8
0ec9c     A7 3A 68 AC |  if_e	wrlong	#29, fp
0eca0     08 4E 85 A1 |  if_e	sub	fp, #8
0eca4                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0eca4     14 4E 05 F1 | 	add	fp, #20
0eca8     A7 22 02 FB | 	rdlong	local03, fp
0ecac     14 4E 85 F1 | 	sub	fp, #20
0ecb0     1C 22 0E F2 | 	cmp	local03, #28 wz
0ecb4     18 00 90 5D |  if_ne	jmp	#LR__1170
0ecb8     0C 4E 05 F1 | 	add	fp, #12
0ecbc     A7 22 02 FB | 	rdlong	local03, fp
0ecc0     A7 22 62 FC | 	wrlong	local03, fp
0ecc4     08 4E 05 F1 | 	add	fp, #8
0ecc8     A7 3A 68 FC | 	wrlong	#29, fp
0eccc     14 4E 85 F1 | 	sub	fp, #20
0ecd0                 | LR__1170
0ecd0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
0ecd0     08 4E 05 F1 | 	add	fp, #8
0ecd4     A7 22 02 FB | 	rdlong	local03, fp
0ecd8     08 4E 85 F1 | 	sub	fp, #8
0ecdc     1F 22 0E F2 | 	cmp	local03, #31 wz
0ece0     14 4E 05 51 |  if_ne	add	fp, #20
0ece4     A7 20 02 5B |  if_ne	rdlong	local02, fp
0ece8     14 4E 85 51 |  if_ne	sub	fp, #20
0ecec     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0ecf0     08 4E 05 51 |  if_ne	add	fp, #8
0ecf4     A7 22 02 5B |  if_ne	rdlong	local03, fp
0ecf8     08 4E 85 51 |  if_ne	sub	fp, #8
0ecfc     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0ed00     14 4E 05 51 |  if_ne	add	fp, #20
0ed04     14 4E 85 51 |  if_ne	sub	fp, #20
0ed08     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0ed0c     A7 0C 68 AC |  if_e	wrlong	#6, fp
0ed10     08 4E 05 A1 |  if_e	add	fp, #8
0ed14     A7 FE 69 AC |  if_e	wrlong	#255, fp
0ed18     08 4E 85 A1 |  if_e	sub	fp, #8
0ed1c     18 00 90 AD |  if_e	jmp	#LR__1171
0ed20     A7 22 02 FB | 	rdlong	local03, fp
0ed24     0C 4E 05 F1 | 	add	fp, #12
0ed28     A7 1E 02 FB | 	rdlong	local01, fp
0ed2c     0C 4E 85 F1 | 	sub	fp, #12
0ed30     0F 23 42 F0 | 	shr	local03, local01
0ed34     A7 22 62 FC | 	wrlong	local03, fp
0ed38                 | LR__1171
0ed38     A7 12 02 F6 | 	mov	arg01, fp
0ed3c     14 AC BF FD | 	call	#_push
0ed40     A7 F0 03 F6 | 	mov	ptra, fp
0ed44     B2 00 A0 FD | 	call	#popregs_
0ed48                 | _do_shr_ret
0ed48     2D 00 64 FD | 	ret
0ed4c                 | 
0ed4c                 | ' 
0ed4c                 | ' sub do_power 
0ed4c                 | _do_power
0ed4c     02 4A 05 F6 | 	mov	COUNT_, #2
0ed50     A8 00 A0 FD | 	call	#pushregs_
0ed54     18 F0 07 F1 | 	add	ptra, #24
0ed58     60 AB BF FD | 	call	#_pop
0ed5c     FD 14 02 F6 | 	mov	arg02, result1
0ed60     FE 12 02 F6 | 	mov	arg01, result2
0ed64     FF 1E 02 F6 | 	mov	local01, result3
0ed68     0C 4E 05 F1 | 	add	fp, #12
0ed6c     A7 14 62 FC | 	wrlong	arg02, fp
0ed70     04 4E 05 F1 | 	add	fp, #4
0ed74     A7 12 62 FC | 	wrlong	arg01, fp
0ed78     04 4E 05 F1 | 	add	fp, #4
0ed7c     A7 1E 62 FC | 	wrlong	local01, fp
0ed80     14 4E 85 F1 | 	sub	fp, #20
0ed84     34 AB BF FD | 	call	#_pop
0ed88     A7 FA 61 FC | 	wrlong	result1, fp
0ed8c     04 4E 05 F1 | 	add	fp, #4
0ed90     A7 FC 61 FC | 	wrlong	result2, fp
0ed94     04 4E 05 F1 | 	add	fp, #4
0ed98     A7 FE 61 FC | 	wrlong	result3, fp
0ed9c                 | ' t2=pop()
0ed9c                 | ' t1=pop()
0ed9c                 | ' 
0ed9c                 | ' 
0ed9c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
0ed9c     08 4E 85 F1 | 	sub	fp, #8
0eda0     1F FE 0D F2 | 	cmp	result3, #31 wz
0eda4     14 4E 05 51 |  if_ne	add	fp, #20
0eda8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0edac     14 4E 85 51 |  if_ne	sub	fp, #20
0edb0     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
0edb4     A7 18 68 AC |  if_e	wrlong	#12, fp
0edb8     08 4E 05 A1 |  if_e	add	fp, #8
0edbc     A7 FE 69 AC |  if_e	wrlong	#255, fp
0edc0     08 4E 85 A1 |  if_e	sub	fp, #8
0edc4     38 01 90 AD |  if_e	jmp	#LR__1185
0edc8                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
0edc8     08 4E 05 F1 | 	add	fp, #8
0edcc     A7 14 02 FB | 	rdlong	arg02, fp
0edd0     08 4E 85 F1 | 	sub	fp, #8
0edd4     1C 14 0E F2 | 	cmp	arg02, #28 wz
0edd8     28 00 90 5D |  if_ne	jmp	#LR__1180
0eddc     08 4E 05 F1 | 	add	fp, #8
0ede0     A7 3C 68 FC | 	wrlong	#30, fp
0ede4     08 4E 85 F1 | 	sub	fp, #8
0ede8     A7 12 02 FB | 	rdlong	arg01, fp
0edec     09 13 52 F6 | 	abs	arg01, arg01 wc
0edf0     1F 20 C6 C9 |  if_b	decod	local02, #31
0edf4     00 20 06 36 |  if_ae	mov	local02, #0
0edf8     A0 C5 B0 FD | 	call	#__system___float_fromuns
0edfc     10 FB 61 F5 | 	xor	result1, local02
0ee00     A7 FA 61 FC | 	wrlong	result1, fp
0ee04                 | LR__1180
0ee04                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
0ee04     08 4E 05 F1 | 	add	fp, #8
0ee08     A7 14 02 FB | 	rdlong	arg02, fp
0ee0c     08 4E 85 F1 | 	sub	fp, #8
0ee10     1D 14 0E F2 | 	cmp	arg02, #29 wz
0ee14     18 00 90 5D |  if_ne	jmp	#LR__1181
0ee18     08 4E 05 F1 | 	add	fp, #8
0ee1c     A7 3C 68 FC | 	wrlong	#30, fp
0ee20     08 4E 85 F1 | 	sub	fp, #8
0ee24     A7 12 02 FB | 	rdlong	arg01, fp
0ee28     70 C5 B0 FD | 	call	#__system___float_fromuns
0ee2c     A7 FA 61 FC | 	wrlong	result1, fp
0ee30                 | LR__1181
0ee30                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
0ee30     14 4E 05 F1 | 	add	fp, #20
0ee34     A7 14 02 FB | 	rdlong	arg02, fp
0ee38     14 4E 85 F1 | 	sub	fp, #20
0ee3c     1C 14 0E F2 | 	cmp	arg02, #28 wz
0ee40     34 00 90 5D |  if_ne	jmp	#LR__1182
0ee44     14 4E 05 F1 | 	add	fp, #20
0ee48     A7 3C 68 FC | 	wrlong	#30, fp
0ee4c     08 4E 85 F1 | 	sub	fp, #8
0ee50     A7 12 02 FB | 	rdlong	arg01, fp
0ee54     0C 4E 85 F1 | 	sub	fp, #12
0ee58     09 13 52 F6 | 	abs	arg01, arg01 wc
0ee5c     1F 20 C6 C9 |  if_b	decod	local02, #31
0ee60     00 20 06 36 |  if_ae	mov	local02, #0
0ee64     34 C5 B0 FD | 	call	#__system___float_fromuns
0ee68     10 FB 61 F5 | 	xor	result1, local02
0ee6c     0C 4E 05 F1 | 	add	fp, #12
0ee70     A7 FA 61 FC | 	wrlong	result1, fp
0ee74     0C 4E 85 F1 | 	sub	fp, #12
0ee78                 | LR__1182
0ee78                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
0ee78     14 4E 05 F1 | 	add	fp, #20
0ee7c     A7 14 02 FB | 	rdlong	arg02, fp
0ee80     14 4E 85 F1 | 	sub	fp, #20
0ee84     1D 14 0E F2 | 	cmp	arg02, #29 wz
0ee88     24 00 90 5D |  if_ne	jmp	#LR__1183
0ee8c     14 4E 05 F1 | 	add	fp, #20
0ee90     A7 3C 68 FC | 	wrlong	#30, fp
0ee94     08 4E 85 F1 | 	sub	fp, #8
0ee98     A7 12 02 FB | 	rdlong	arg01, fp
0ee9c     0C 4E 85 F1 | 	sub	fp, #12
0eea0     F8 C4 B0 FD | 	call	#__system___float_fromuns
0eea4     0C 4E 05 F1 | 	add	fp, #12
0eea8     A7 FA 61 FC | 	wrlong	result1, fp
0eeac     0C 4E 85 F1 | 	sub	fp, #12
0eeb0                 | LR__1183
0eeb0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
0eeb0     08 4E 05 F1 | 	add	fp, #8
0eeb4     A7 14 02 FB | 	rdlong	arg02, fp
0eeb8     08 4E 85 F1 | 	sub	fp, #8
0eebc     1E 14 0E F2 | 	cmp	arg02, #30 wz
0eec0     14 4E 05 A1 |  if_e	add	fp, #20
0eec4     A7 1E 02 AB |  if_e	rdlong	local01, fp
0eec8     14 4E 85 A1 |  if_e	sub	fp, #20
0eecc     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
0eed0     1C 00 90 5D |  if_ne	jmp	#LR__1184
0eed4     A7 12 02 FB | 	rdlong	arg01, fp
0eed8     0C 4E 05 F1 | 	add	fp, #12
0eedc     A7 14 02 FB | 	rdlong	arg02, fp
0eee0     0C 4E 85 F1 | 	sub	fp, #12
0eee4     9C D7 B0 FD | 	call	#__system____builtin_powf
0eee8     A7 FA 61 FC | 	wrlong	result1, fp
0eeec     10 00 90 FD | 	jmp	#LR__1185
0eef0                 | LR__1184
0eef0     A7 1A 68 FC | 	wrlong	#13, fp
0eef4     08 4E 05 F1 | 	add	fp, #8
0eef8     A7 FE 69 FC | 	wrlong	#255, fp
0eefc     08 4E 85 F1 | 	sub	fp, #8
0ef00                 | LR__1185
0ef00     A7 12 02 F6 | 	mov	arg01, fp
0ef04     4C AA BF FD | 	call	#_push
0ef08     A7 F0 03 F6 | 	mov	ptra, fp
0ef0c     B2 00 A0 FD | 	call	#popregs_
0ef10                 | _do_power_ret
0ef10     2D 00 64 FD | 	ret
0ef14                 | 
0ef14                 | ' 
0ef14                 | ' 
0ef14                 | ' sub do_eq
0ef14                 | _do_eq
0ef14     05 4A 05 F6 | 	mov	COUNT_, #5
0ef18     A8 00 A0 FD | 	call	#pushregs_
0ef1c     18 F0 07 F1 | 	add	ptra, #24
0ef20     98 A9 BF FD | 	call	#_pop
0ef24     FD 1E 02 F6 | 	mov	local01, result1
0ef28     FE 20 02 F6 | 	mov	local02, result2
0ef2c     FF 22 02 F6 | 	mov	local03, result3
0ef30     0C 4E 05 F1 | 	add	fp, #12
0ef34     A7 1E 62 FC | 	wrlong	local01, fp
0ef38     04 4E 05 F1 | 	add	fp, #4
0ef3c     A7 20 62 FC | 	wrlong	local02, fp
0ef40     04 4E 05 F1 | 	add	fp, #4
0ef44     A7 22 62 FC | 	wrlong	local03, fp
0ef48     14 4E 85 F1 | 	sub	fp, #20
0ef4c     6C A9 BF FD | 	call	#_pop
0ef50     FF 22 02 F6 | 	mov	local03, result3
0ef54     A7 FA 61 FC | 	wrlong	result1, fp
0ef58     04 4E 05 F1 | 	add	fp, #4
0ef5c     A7 FC 61 FC | 	wrlong	result2, fp
0ef60     04 4E 05 F1 | 	add	fp, #4
0ef64     A7 22 62 FC | 	wrlong	local03, fp
0ef68                 | ' t2=pop()
0ef68                 | ' t1=pop()
0ef68                 | ' 
0ef68                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
0ef68     08 4E 85 F1 | 	sub	fp, #8
0ef6c     1F 22 0E F2 | 	cmp	local03, #31 wz
0ef70     14 4E 05 A1 |  if_e	add	fp, #20
0ef74     A7 24 02 AB |  if_e	rdlong	local04, fp
0ef78     14 4E 85 A1 |  if_e	sub	fp, #20
0ef7c     12 23 02 A6 |  if_e	mov	local03, local04
0ef80     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0ef84     28 00 90 5D |  if_ne	jmp	#LR__1190
0ef88     00 1E 06 F6 | 	mov	local01, #0
0ef8c     A7 12 02 FB | 	rdlong	arg01, fp
0ef90     0C 4E 05 F1 | 	add	fp, #12
0ef94     A7 14 02 FB | 	rdlong	arg02, fp
0ef98     0C 4E 85 F1 | 	sub	fp, #12
0ef9c     3C 9D B0 FD | 	call	#__system___string_cmp
0efa0     00 FA 0D F2 | 	cmp	result1, #0 wz
0efa4     00 1E 26 A6 |  if_e	not	local01, #0
0efa8     A7 1E 62 FC | 	wrlong	local01, fp
0efac     1C 04 90 FD | 	jmp	#LR__1203
0efb0                 | LR__1190
0efb0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
0efb0     08 4E 05 F1 | 	add	fp, #8
0efb4     A7 1E 02 FB | 	rdlong	local01, fp
0efb8     08 4E 85 F1 | 	sub	fp, #8
0efbc     1E 1E 0E F2 | 	cmp	local01, #30 wz
0efc0     14 4E 05 A1 |  if_e	add	fp, #20
0efc4     A7 24 02 AB |  if_e	rdlong	local04, fp
0efc8     14 4E 85 A1 |  if_e	sub	fp, #20
0efcc     12 23 02 A6 |  if_e	mov	local03, local04
0efd0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0efd4     2C 00 90 5D |  if_ne	jmp	#LR__1191
0efd8     00 1E 06 F6 | 	mov	local01, #0
0efdc     A7 12 02 FB | 	rdlong	arg01, fp
0efe0     0C 4E 05 F1 | 	add	fp, #12
0efe4     A7 14 02 FB | 	rdlong	arg02, fp
0efe8     0C 4E 85 F1 | 	sub	fp, #12
0efec     01 16 06 F6 | 	mov	arg03, #1
0eff0     E0 CB B0 FD | 	call	#__system___float_cmp
0eff4     00 FA 0D F2 | 	cmp	result1, #0 wz
0eff8     00 1E 26 A6 |  if_e	not	local01, #0
0effc     A7 1E 62 FC | 	wrlong	local01, fp
0f000     C8 03 90 FD | 	jmp	#LR__1203
0f004                 | LR__1191
0f004                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
0f004     08 4E 05 F1 | 	add	fp, #8
0f008     A7 1E 02 FB | 	rdlong	local01, fp
0f00c     08 4E 85 F1 | 	sub	fp, #8
0f010     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f014     14 4E 05 A1 |  if_e	add	fp, #20
0f018     A7 24 02 AB |  if_e	rdlong	local04, fp
0f01c     14 4E 85 A1 |  if_e	sub	fp, #20
0f020     12 23 02 A6 |  if_e	mov	local03, local04
0f024     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f028     48 00 90 5D |  if_ne	jmp	#LR__1192
0f02c     00 1E 06 F6 | 	mov	local01, #0
0f030     A7 20 02 FB | 	rdlong	local02, fp
0f034     0C 4E 05 F1 | 	add	fp, #12
0f038     A7 12 02 FB | 	rdlong	arg01, fp
0f03c     0C 4E 85 F1 | 	sub	fp, #12
0f040     09 13 52 F6 | 	abs	arg01, arg01 wc
0f044     1F 26 C6 C9 |  if_b	decod	local05, #31
0f048     00 26 06 36 |  if_ae	mov	local05, #0
0f04c     4C C3 B0 FD | 	call	#__system___float_fromuns
0f050     13 FB 61 F5 | 	xor	result1, local05
0f054     FD 14 02 F6 | 	mov	arg02, result1
0f058     10 13 02 F6 | 	mov	arg01, local02
0f05c     01 16 06 F6 | 	mov	arg03, #1
0f060     70 CB B0 FD | 	call	#__system___float_cmp
0f064     00 FA 0D F2 | 	cmp	result1, #0 wz
0f068     00 1E 26 A6 |  if_e	not	local01, #0
0f06c     A7 1E 62 FC | 	wrlong	local01, fp
0f070     58 03 90 FD | 	jmp	#LR__1203
0f074                 | LR__1192
0f074                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
0f074     08 4E 05 F1 | 	add	fp, #8
0f078     A7 1E 02 FB | 	rdlong	local01, fp
0f07c     08 4E 85 F1 | 	sub	fp, #8
0f080     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f084     14 4E 05 A1 |  if_e	add	fp, #20
0f088     A7 24 02 AB |  if_e	rdlong	local04, fp
0f08c     14 4E 85 A1 |  if_e	sub	fp, #20
0f090     12 23 02 A6 |  if_e	mov	local03, local04
0f094     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f098     38 00 90 5D |  if_ne	jmp	#LR__1193
0f09c     00 1E 06 F6 | 	mov	local01, #0
0f0a0     A7 20 02 FB | 	rdlong	local02, fp
0f0a4     0C 4E 05 F1 | 	add	fp, #12
0f0a8     A7 12 02 FB | 	rdlong	arg01, fp
0f0ac     0C 4E 85 F1 | 	sub	fp, #12
0f0b0     E8 C2 B0 FD | 	call	#__system___float_fromuns
0f0b4     FD 14 02 F6 | 	mov	arg02, result1
0f0b8     10 13 02 F6 | 	mov	arg01, local02
0f0bc     01 16 06 F6 | 	mov	arg03, #1
0f0c0     10 CB B0 FD | 	call	#__system___float_cmp
0f0c4     00 FA 0D F2 | 	cmp	result1, #0 wz
0f0c8     00 1E 26 A6 |  if_e	not	local01, #0
0f0cc     A7 1E 62 FC | 	wrlong	local01, fp
0f0d0     F8 02 90 FD | 	jmp	#LR__1203
0f0d4                 | LR__1193
0f0d4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
0f0d4     08 4E 05 F1 | 	add	fp, #8
0f0d8     A7 1E 02 FB | 	rdlong	local01, fp
0f0dc     08 4E 85 F1 | 	sub	fp, #8
0f0e0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f0e4     14 4E 05 A1 |  if_e	add	fp, #20
0f0e8     A7 24 02 AB |  if_e	rdlong	local04, fp
0f0ec     14 4E 85 A1 |  if_e	sub	fp, #20
0f0f0     12 23 02 A6 |  if_e	mov	local03, local04
0f0f4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f0f8     44 00 90 5D |  if_ne	jmp	#LR__1194
0f0fc     00 1E 06 F6 | 	mov	local01, #0
0f100     A7 12 02 FB | 	rdlong	arg01, fp
0f104     09 13 52 F6 | 	abs	arg01, arg01 wc
0f108     1F 26 C6 C9 |  if_b	decod	local05, #31
0f10c     00 26 06 36 |  if_ae	mov	local05, #0
0f110     88 C2 B0 FD | 	call	#__system___float_fromuns
0f114     13 FB 61 F5 | 	xor	result1, local05
0f118     FD 12 02 F6 | 	mov	arg01, result1
0f11c     0C 4E 05 F1 | 	add	fp, #12
0f120     A7 14 02 FB | 	rdlong	arg02, fp
0f124     0C 4E 85 F1 | 	sub	fp, #12
0f128     01 16 06 F6 | 	mov	arg03, #1
0f12c     A4 CA B0 FD | 	call	#__system___float_cmp
0f130     00 FA 0D F2 | 	cmp	result1, #0 wz
0f134     00 1E 26 A6 |  if_e	not	local01, #0
0f138     A7 1E 62 FC | 	wrlong	local01, fp
0f13c     8C 02 90 FD | 	jmp	#LR__1203
0f140                 | LR__1194
0f140                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
0f140     08 4E 05 F1 | 	add	fp, #8
0f144     A7 1E 02 FB | 	rdlong	local01, fp
0f148     08 4E 85 F1 | 	sub	fp, #8
0f14c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f150     14 4E 05 A1 |  if_e	add	fp, #20
0f154     A7 24 02 AB |  if_e	rdlong	local04, fp
0f158     14 4E 85 A1 |  if_e	sub	fp, #20
0f15c     12 23 02 A6 |  if_e	mov	local03, local04
0f160     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f164     24 00 90 5D |  if_ne	jmp	#LR__1195
0f168     00 1E 06 F6 | 	mov	local01, #0
0f16c     A7 20 02 FB | 	rdlong	local02, fp
0f170     0C 4E 05 F1 | 	add	fp, #12
0f174     A7 22 02 FB | 	rdlong	local03, fp
0f178     0C 4E 85 F1 | 	sub	fp, #12
0f17c     11 21 0A F2 | 	cmp	local02, local03 wz
0f180     01 1E 66 A6 |  if_e	neg	local01, #1
0f184     A7 1E 62 FC | 	wrlong	local01, fp
0f188     40 02 90 FD | 	jmp	#LR__1203
0f18c                 | LR__1195
0f18c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
0f18c     08 4E 05 F1 | 	add	fp, #8
0f190     A7 1E 02 FB | 	rdlong	local01, fp
0f194     08 4E 85 F1 | 	sub	fp, #8
0f198     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f19c     14 4E 05 A1 |  if_e	add	fp, #20
0f1a0     A7 24 02 AB |  if_e	rdlong	local04, fp
0f1a4     14 4E 85 A1 |  if_e	sub	fp, #20
0f1a8     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0f1ac     24 00 90 5D |  if_ne	jmp	#LR__1196
0f1b0     00 1E 06 F6 | 	mov	local01, #0
0f1b4     A7 20 02 FB | 	rdlong	local02, fp
0f1b8     0C 4E 05 F1 | 	add	fp, #12
0f1bc     A7 22 02 FB | 	rdlong	local03, fp
0f1c0     0C 4E 85 F1 | 	sub	fp, #12
0f1c4     11 21 0A F2 | 	cmp	local02, local03 wz
0f1c8     01 1E 66 A6 |  if_e	neg	local01, #1
0f1cc     A7 1E 62 FC | 	wrlong	local01, fp
0f1d0     F8 01 90 FD | 	jmp	#LR__1203
0f1d4                 | LR__1196
0f1d4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
0f1d4     08 4E 05 F1 | 	add	fp, #8
0f1d8     A7 1E 02 FB | 	rdlong	local01, fp
0f1dc     08 4E 85 F1 | 	sub	fp, #8
0f1e0     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f1e4     14 4E 05 A1 |  if_e	add	fp, #20
0f1e8     A7 22 02 AB |  if_e	rdlong	local03, fp
0f1ec     14 4E 85 A1 |  if_e	sub	fp, #20
0f1f0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f1f4     34 00 90 5D |  if_ne	jmp	#LR__1197
0f1f8     00 1E 06 F6 | 	mov	local01, #0
0f1fc     A7 12 02 FB | 	rdlong	arg01, fp
0f200     98 C1 B0 FD | 	call	#__system___float_fromuns
0f204     FD 12 02 F6 | 	mov	arg01, result1
0f208     0C 4E 05 F1 | 	add	fp, #12
0f20c     A7 14 02 FB | 	rdlong	arg02, fp
0f210     0C 4E 85 F1 | 	sub	fp, #12
0f214     01 16 06 F6 | 	mov	arg03, #1
0f218     B8 C9 B0 FD | 	call	#__system___float_cmp
0f21c     00 FA 0D F2 | 	cmp	result1, #0 wz
0f220     00 1E 26 A6 |  if_e	not	local01, #0
0f224     A7 1E 62 FC | 	wrlong	local01, fp
0f228     A0 01 90 FD | 	jmp	#LR__1203
0f22c                 | LR__1197
0f22c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
0f22c     08 4E 05 F1 | 	add	fp, #8
0f230     A7 1E 02 FB | 	rdlong	local01, fp
0f234     08 4E 85 F1 | 	sub	fp, #8
0f238     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f23c     14 4E 05 A1 |  if_e	add	fp, #20
0f240     A7 22 02 AB |  if_e	rdlong	local03, fp
0f244     14 4E 85 A1 |  if_e	sub	fp, #20
0f248     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f24c     24 00 90 5D |  if_ne	jmp	#LR__1198
0f250     00 1E 06 F6 | 	mov	local01, #0
0f254     A7 20 02 FB | 	rdlong	local02, fp
0f258     0C 4E 05 F1 | 	add	fp, #12
0f25c     A7 22 02 FB | 	rdlong	local03, fp
0f260     0C 4E 85 F1 | 	sub	fp, #12
0f264     11 21 0A F2 | 	cmp	local02, local03 wz
0f268     01 1E 66 A6 |  if_e	neg	local01, #1
0f26c     A7 1E 62 FC | 	wrlong	local01, fp
0f270     58 01 90 FD | 	jmp	#LR__1203
0f274                 | LR__1198
0f274                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
0f274     08 4E 05 F1 | 	add	fp, #8
0f278     A7 1E 02 FB | 	rdlong	local01, fp
0f27c     08 4E 85 F1 | 	sub	fp, #8
0f280     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f284     14 4E 05 A1 |  if_e	add	fp, #20
0f288     A7 22 02 AB |  if_e	rdlong	local03, fp
0f28c     14 4E 85 A1 |  if_e	sub	fp, #20
0f290     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f294     24 00 90 5D |  if_ne	jmp	#LR__1199
0f298     00 1E 06 F6 | 	mov	local01, #0
0f29c     A7 20 02 FB | 	rdlong	local02, fp
0f2a0     0C 4E 05 F1 | 	add	fp, #12
0f2a4     A7 22 02 FB | 	rdlong	local03, fp
0f2a8     0C 4E 85 F1 | 	sub	fp, #12
0f2ac     11 21 0A F2 | 	cmp	local02, local03 wz
0f2b0     01 1E 66 A6 |  if_e	neg	local01, #1
0f2b4     A7 1E 62 FC | 	wrlong	local01, fp
0f2b8     10 01 90 FD | 	jmp	#LR__1203
0f2bc                 | LR__1199
0f2bc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
0f2bc     08 4E 05 F1 | 	add	fp, #8
0f2c0     A7 1E 02 FB | 	rdlong	local01, fp
0f2c4     08 4E 85 F1 | 	sub	fp, #8
0f2c8     2B 1E 0E F2 | 	cmp	local01, #43 wz
0f2cc     14 4E 05 A1 |  if_e	add	fp, #20
0f2d0     A7 22 02 AB |  if_e	rdlong	local03, fp
0f2d4     14 4E 85 A1 |  if_e	sub	fp, #20
0f2d8     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0f2dc     30 00 90 5D |  if_ne	jmp	#LR__1200
0f2e0     00 1E 06 F6 | 	mov	local01, #0
0f2e4     A7 12 02 FB | 	rdlong	arg01, fp
0f2e8     0C D7 BF FD | 	call	#_convertstring
0f2ec     FD 12 02 F6 | 	mov	arg01, result1
0f2f0     0C 4E 05 F1 | 	add	fp, #12
0f2f4     A7 14 02 FB | 	rdlong	arg02, fp
0f2f8     0C 4E 85 F1 | 	sub	fp, #12
0f2fc     DC 99 B0 FD | 	call	#__system___string_cmp
0f300     00 FA 0D F2 | 	cmp	result1, #0 wz
0f304     00 1E 26 A6 |  if_e	not	local01, #0
0f308     A7 1E 62 FC | 	wrlong	local01, fp
0f30c     BC 00 90 FD | 	jmp	#LR__1203
0f310                 | LR__1200
0f310                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
0f310     08 4E 05 F1 | 	add	fp, #8
0f314     A7 1E 02 FB | 	rdlong	local01, fp
0f318     08 4E 85 F1 | 	sub	fp, #8
0f31c     1F 1E 0E F2 | 	cmp	local01, #31 wz
0f320     14 4E 05 A1 |  if_e	add	fp, #20
0f324     A7 22 02 AB |  if_e	rdlong	local03, fp
0f328     14 4E 85 A1 |  if_e	sub	fp, #20
0f32c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0f330     34 00 90 5D |  if_ne	jmp	#LR__1201
0f334     00 1E 06 F6 | 	mov	local01, #0
0f338     A7 20 02 FB | 	rdlong	local02, fp
0f33c     0C 4E 05 F1 | 	add	fp, #12
0f340     A7 12 02 FB | 	rdlong	arg01, fp
0f344     0C 4E 85 F1 | 	sub	fp, #12
0f348     AC D6 BF FD | 	call	#_convertstring
0f34c     FD 14 02 F6 | 	mov	arg02, result1
0f350     10 13 02 F6 | 	mov	arg01, local02
0f354     84 99 B0 FD | 	call	#__system___string_cmp
0f358     00 FA 0D F2 | 	cmp	result1, #0 wz
0f35c     00 1E 26 A6 |  if_e	not	local01, #0
0f360     A7 1E 62 FC | 	wrlong	local01, fp
0f364     64 00 90 FD | 	jmp	#LR__1203
0f368                 | LR__1201
0f368                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
0f368     08 4E 05 F1 | 	add	fp, #8
0f36c     A7 1E 02 FB | 	rdlong	local01, fp
0f370     08 4E 85 F1 | 	sub	fp, #8
0f374     2B 1E 0E F2 | 	cmp	local01, #43 wz
0f378     14 4E 05 A1 |  if_e	add	fp, #20
0f37c     A7 22 02 AB |  if_e	rdlong	local03, fp
0f380     14 4E 85 A1 |  if_e	sub	fp, #20
0f384     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0f388     3C 00 90 5D |  if_ne	jmp	#LR__1202
0f38c     00 1E 06 F6 | 	mov	local01, #0
0f390     A7 12 02 FB | 	rdlong	arg01, fp
0f394     60 D6 BF FD | 	call	#_convertstring
0f398     FD 20 02 F6 | 	mov	local02, result1
0f39c     0C 4E 05 F1 | 	add	fp, #12
0f3a0     A7 12 02 FB | 	rdlong	arg01, fp
0f3a4     0C 4E 85 F1 | 	sub	fp, #12
0f3a8     4C D6 BF FD | 	call	#_convertstring
0f3ac     FD 14 02 F6 | 	mov	arg02, result1
0f3b0     10 13 02 F6 | 	mov	arg01, local02
0f3b4     24 99 B0 FD | 	call	#__system___string_cmp
0f3b8     00 FA 0D F2 | 	cmp	result1, #0 wz
0f3bc     00 1E 26 A6 |  if_e	not	local01, #0
0f3c0     A7 1E 62 FC | 	wrlong	local01, fp
0f3c4     04 00 90 FD | 	jmp	#LR__1203
0f3c8                 | LR__1202
0f3c8     A7 00 68 FC | 	wrlong	#0, fp
0f3cc                 | LR__1203
0f3cc     08 4E 05 F1 | 	add	fp, #8
0f3d0     A7 38 68 FC | 	wrlong	#28, fp
0f3d4     08 4E 85 F1 | 	sub	fp, #8
0f3d8     A7 12 02 F6 | 	mov	arg01, fp
0f3dc     74 A5 BF FD | 	call	#_push
0f3e0     A7 F0 03 F6 | 	mov	ptra, fp
0f3e4     B2 00 A0 FD | 	call	#popregs_
0f3e8                 | _do_eq_ret
0f3e8     2D 00 64 FD | 	ret
0f3ec                 | 
0f3ec                 | ' 
0f3ec                 | ' sub do_gt
0f3ec                 | _do_gt
0f3ec     05 4A 05 F6 | 	mov	COUNT_, #5
0f3f0     A8 00 A0 FD | 	call	#pushregs_
0f3f4     18 F0 07 F1 | 	add	ptra, #24
0f3f8     C0 A4 BF FD | 	call	#_pop
0f3fc     FD 1E 02 F6 | 	mov	local01, result1
0f400     FE 20 02 F6 | 	mov	local02, result2
0f404     FF 22 02 F6 | 	mov	local03, result3
0f408     0C 4E 05 F1 | 	add	fp, #12
0f40c     A7 1E 62 FC | 	wrlong	local01, fp
0f410     04 4E 05 F1 | 	add	fp, #4
0f414     A7 20 62 FC | 	wrlong	local02, fp
0f418     04 4E 05 F1 | 	add	fp, #4
0f41c     A7 22 62 FC | 	wrlong	local03, fp
0f420     14 4E 85 F1 | 	sub	fp, #20
0f424     94 A4 BF FD | 	call	#_pop
0f428     FF 22 02 F6 | 	mov	local03, result3
0f42c     A7 FA 61 FC | 	wrlong	result1, fp
0f430     04 4E 05 F1 | 	add	fp, #4
0f434     A7 FC 61 FC | 	wrlong	result2, fp
0f438     04 4E 05 F1 | 	add	fp, #4
0f43c     A7 22 62 FC | 	wrlong	local03, fp
0f440                 | ' t2=pop()
0f440                 | ' t1=pop()
0f440                 | ' 
0f440                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
0f440     08 4E 85 F1 | 	sub	fp, #8
0f444     1F 22 0E F2 | 	cmp	local03, #31 wz
0f448     14 4E 05 A1 |  if_e	add	fp, #20
0f44c     A7 24 02 AB |  if_e	rdlong	local04, fp
0f450     14 4E 85 A1 |  if_e	sub	fp, #20
0f454     12 23 02 A6 |  if_e	mov	local03, local04
0f458     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0f45c     28 00 90 5D |  if_ne	jmp	#LR__1210
0f460     00 1E 06 F6 | 	mov	local01, #0
0f464     A7 12 02 FB | 	rdlong	arg01, fp
0f468     0C 4E 05 F1 | 	add	fp, #12
0f46c     A7 14 02 FB | 	rdlong	arg02, fp
0f470     0C 4E 85 F1 | 	sub	fp, #12
0f474     64 98 B0 FD | 	call	#__system___string_cmp
0f478     01 FA 55 F2 | 	cmps	result1, #1 wc
0f47c     00 1E 26 36 |  if_ae	not	local01, #0
0f480     A7 1E 62 FC | 	wrlong	local01, fp
0f484     1C 04 90 FD | 	jmp	#LR__1223
0f488                 | LR__1210
0f488                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
0f488     08 4E 05 F1 | 	add	fp, #8
0f48c     A7 1E 02 FB | 	rdlong	local01, fp
0f490     08 4E 85 F1 | 	sub	fp, #8
0f494     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f498     14 4E 05 A1 |  if_e	add	fp, #20
0f49c     A7 24 02 AB |  if_e	rdlong	local04, fp
0f4a0     14 4E 85 A1 |  if_e	sub	fp, #20
0f4a4     12 23 02 A6 |  if_e	mov	local03, local04
0f4a8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f4ac     2C 00 90 5D |  if_ne	jmp	#LR__1211
0f4b0     00 1E 06 F6 | 	mov	local01, #0
0f4b4     A7 12 02 FB | 	rdlong	arg01, fp
0f4b8     0C 4E 05 F1 | 	add	fp, #12
0f4bc     A7 14 02 FB | 	rdlong	arg02, fp
0f4c0     0C 4E 85 F1 | 	sub	fp, #12
0f4c4     01 16 66 F6 | 	neg	arg03, #1
0f4c8     08 C7 B0 FD | 	call	#__system___float_cmp
0f4cc     01 FA 55 F2 | 	cmps	result1, #1 wc
0f4d0     00 1E 26 36 |  if_ae	not	local01, #0
0f4d4     A7 1E 62 FC | 	wrlong	local01, fp
0f4d8     C8 03 90 FD | 	jmp	#LR__1223
0f4dc                 | LR__1211
0f4dc                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
0f4dc     08 4E 05 F1 | 	add	fp, #8
0f4e0     A7 1E 02 FB | 	rdlong	local01, fp
0f4e4     08 4E 85 F1 | 	sub	fp, #8
0f4e8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f4ec     14 4E 05 A1 |  if_e	add	fp, #20
0f4f0     A7 24 02 AB |  if_e	rdlong	local04, fp
0f4f4     14 4E 85 A1 |  if_e	sub	fp, #20
0f4f8     12 23 02 A6 |  if_e	mov	local03, local04
0f4fc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f500     48 00 90 5D |  if_ne	jmp	#LR__1212
0f504     00 1E 06 F6 | 	mov	local01, #0
0f508     A7 20 02 FB | 	rdlong	local02, fp
0f50c     0C 4E 05 F1 | 	add	fp, #12
0f510     A7 12 02 FB | 	rdlong	arg01, fp
0f514     0C 4E 85 F1 | 	sub	fp, #12
0f518     09 13 52 F6 | 	abs	arg01, arg01 wc
0f51c     1F 26 C6 C9 |  if_b	decod	local05, #31
0f520     00 26 06 36 |  if_ae	mov	local05, #0
0f524     74 BE B0 FD | 	call	#__system___float_fromuns
0f528     13 FB 61 F5 | 	xor	result1, local05
0f52c     FD 14 02 F6 | 	mov	arg02, result1
0f530     10 13 02 F6 | 	mov	arg01, local02
0f534     01 16 66 F6 | 	neg	arg03, #1
0f538     98 C6 B0 FD | 	call	#__system___float_cmp
0f53c     01 FA 55 F2 | 	cmps	result1, #1 wc
0f540     00 1E 26 36 |  if_ae	not	local01, #0
0f544     A7 1E 62 FC | 	wrlong	local01, fp
0f548     58 03 90 FD | 	jmp	#LR__1223
0f54c                 | LR__1212
0f54c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
0f54c     08 4E 05 F1 | 	add	fp, #8
0f550     A7 1E 02 FB | 	rdlong	local01, fp
0f554     08 4E 85 F1 | 	sub	fp, #8
0f558     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f55c     14 4E 05 A1 |  if_e	add	fp, #20
0f560     A7 24 02 AB |  if_e	rdlong	local04, fp
0f564     14 4E 85 A1 |  if_e	sub	fp, #20
0f568     12 23 02 A6 |  if_e	mov	local03, local04
0f56c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f570     38 00 90 5D |  if_ne	jmp	#LR__1213
0f574     00 1E 06 F6 | 	mov	local01, #0
0f578     A7 20 02 FB | 	rdlong	local02, fp
0f57c     0C 4E 05 F1 | 	add	fp, #12
0f580     A7 12 02 FB | 	rdlong	arg01, fp
0f584     0C 4E 85 F1 | 	sub	fp, #12
0f588     10 BE B0 FD | 	call	#__system___float_fromuns
0f58c     FD 14 02 F6 | 	mov	arg02, result1
0f590     10 13 02 F6 | 	mov	arg01, local02
0f594     01 16 66 F6 | 	neg	arg03, #1
0f598     38 C6 B0 FD | 	call	#__system___float_cmp
0f59c     01 FA 55 F2 | 	cmps	result1, #1 wc
0f5a0     00 1E 26 36 |  if_ae	not	local01, #0
0f5a4     A7 1E 62 FC | 	wrlong	local01, fp
0f5a8     F8 02 90 FD | 	jmp	#LR__1223
0f5ac                 | LR__1213
0f5ac                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
0f5ac     08 4E 05 F1 | 	add	fp, #8
0f5b0     A7 1E 02 FB | 	rdlong	local01, fp
0f5b4     08 4E 85 F1 | 	sub	fp, #8
0f5b8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f5bc     14 4E 05 A1 |  if_e	add	fp, #20
0f5c0     A7 24 02 AB |  if_e	rdlong	local04, fp
0f5c4     14 4E 85 A1 |  if_e	sub	fp, #20
0f5c8     12 23 02 A6 |  if_e	mov	local03, local04
0f5cc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f5d0     44 00 90 5D |  if_ne	jmp	#LR__1214
0f5d4     00 1E 06 F6 | 	mov	local01, #0
0f5d8     A7 12 02 FB | 	rdlong	arg01, fp
0f5dc     09 13 52 F6 | 	abs	arg01, arg01 wc
0f5e0     1F 26 C6 C9 |  if_b	decod	local05, #31
0f5e4     00 26 06 36 |  if_ae	mov	local05, #0
0f5e8     B0 BD B0 FD | 	call	#__system___float_fromuns
0f5ec     13 FB 61 F5 | 	xor	result1, local05
0f5f0     FD 12 02 F6 | 	mov	arg01, result1
0f5f4     0C 4E 05 F1 | 	add	fp, #12
0f5f8     A7 14 02 FB | 	rdlong	arg02, fp
0f5fc     0C 4E 85 F1 | 	sub	fp, #12
0f600     01 16 66 F6 | 	neg	arg03, #1
0f604     CC C5 B0 FD | 	call	#__system___float_cmp
0f608     01 FA 55 F2 | 	cmps	result1, #1 wc
0f60c     00 1E 26 36 |  if_ae	not	local01, #0
0f610     A7 1E 62 FC | 	wrlong	local01, fp
0f614     8C 02 90 FD | 	jmp	#LR__1223
0f618                 | LR__1214
0f618                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
0f618     08 4E 05 F1 | 	add	fp, #8
0f61c     A7 1E 02 FB | 	rdlong	local01, fp
0f620     08 4E 85 F1 | 	sub	fp, #8
0f624     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f628     14 4E 05 A1 |  if_e	add	fp, #20
0f62c     A7 24 02 AB |  if_e	rdlong	local04, fp
0f630     14 4E 85 A1 |  if_e	sub	fp, #20
0f634     12 23 02 A6 |  if_e	mov	local03, local04
0f638     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f63c     24 00 90 5D |  if_ne	jmp	#LR__1215
0f640     00 1E 06 F6 | 	mov	local01, #0
0f644     A7 20 02 FB | 	rdlong	local02, fp
0f648     0C 4E 05 F1 | 	add	fp, #12
0f64c     A7 22 02 FB | 	rdlong	local03, fp
0f650     0C 4E 85 F1 | 	sub	fp, #12
0f654     11 21 5A F2 | 	cmps	local02, local03 wcz
0f658     01 1E 66 16 |  if_a	neg	local01, #1
0f65c     A7 1E 62 FC | 	wrlong	local01, fp
0f660     40 02 90 FD | 	jmp	#LR__1223
0f664                 | LR__1215
0f664                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
0f664     08 4E 05 F1 | 	add	fp, #8
0f668     A7 1E 02 FB | 	rdlong	local01, fp
0f66c     08 4E 85 F1 | 	sub	fp, #8
0f670     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f674     14 4E 05 A1 |  if_e	add	fp, #20
0f678     A7 24 02 AB |  if_e	rdlong	local04, fp
0f67c     14 4E 85 A1 |  if_e	sub	fp, #20
0f680     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0f684     24 00 90 5D |  if_ne	jmp	#LR__1216
0f688     00 1E 06 F6 | 	mov	local01, #0
0f68c     A7 20 02 FB | 	rdlong	local02, fp
0f690     0C 4E 05 F1 | 	add	fp, #12
0f694     A7 22 02 FB | 	rdlong	local03, fp
0f698     0C 4E 85 F1 | 	sub	fp, #12
0f69c     11 21 5A F2 | 	cmps	local02, local03 wcz
0f6a0     01 1E 66 16 |  if_a	neg	local01, #1
0f6a4     A7 1E 62 FC | 	wrlong	local01, fp
0f6a8     F8 01 90 FD | 	jmp	#LR__1223
0f6ac                 | LR__1216
0f6ac                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
0f6ac     08 4E 05 F1 | 	add	fp, #8
0f6b0     A7 1E 02 FB | 	rdlong	local01, fp
0f6b4     08 4E 85 F1 | 	sub	fp, #8
0f6b8     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f6bc     14 4E 05 A1 |  if_e	add	fp, #20
0f6c0     A7 22 02 AB |  if_e	rdlong	local03, fp
0f6c4     14 4E 85 A1 |  if_e	sub	fp, #20
0f6c8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f6cc     34 00 90 5D |  if_ne	jmp	#LR__1217
0f6d0     00 1E 06 F6 | 	mov	local01, #0
0f6d4     A7 12 02 FB | 	rdlong	arg01, fp
0f6d8     C0 BC B0 FD | 	call	#__system___float_fromuns
0f6dc     FD 12 02 F6 | 	mov	arg01, result1
0f6e0     0C 4E 05 F1 | 	add	fp, #12
0f6e4     A7 14 02 FB | 	rdlong	arg02, fp
0f6e8     0C 4E 85 F1 | 	sub	fp, #12
0f6ec     01 16 66 F6 | 	neg	arg03, #1
0f6f0     E0 C4 B0 FD | 	call	#__system___float_cmp
0f6f4     01 FA 55 F2 | 	cmps	result1, #1 wc
0f6f8     00 1E 26 36 |  if_ae	not	local01, #0
0f6fc     A7 1E 62 FC | 	wrlong	local01, fp
0f700     A0 01 90 FD | 	jmp	#LR__1223
0f704                 | LR__1217
0f704                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
0f704     08 4E 05 F1 | 	add	fp, #8
0f708     A7 1E 02 FB | 	rdlong	local01, fp
0f70c     08 4E 85 F1 | 	sub	fp, #8
0f710     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f714     14 4E 05 A1 |  if_e	add	fp, #20
0f718     A7 22 02 AB |  if_e	rdlong	local03, fp
0f71c     14 4E 85 A1 |  if_e	sub	fp, #20
0f720     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f724     24 00 90 5D |  if_ne	jmp	#LR__1218
0f728     00 1E 06 F6 | 	mov	local01, #0
0f72c     A7 20 02 FB | 	rdlong	local02, fp
0f730     0C 4E 05 F1 | 	add	fp, #12
0f734     A7 22 02 FB | 	rdlong	local03, fp
0f738     0C 4E 85 F1 | 	sub	fp, #12
0f73c     11 21 5A F2 | 	cmps	local02, local03 wcz
0f740     01 1E 66 16 |  if_a	neg	local01, #1
0f744     A7 1E 62 FC | 	wrlong	local01, fp
0f748     58 01 90 FD | 	jmp	#LR__1223
0f74c                 | LR__1218
0f74c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
0f74c     08 4E 05 F1 | 	add	fp, #8
0f750     A7 1E 02 FB | 	rdlong	local01, fp
0f754     08 4E 85 F1 | 	sub	fp, #8
0f758     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f75c     14 4E 05 A1 |  if_e	add	fp, #20
0f760     A7 22 02 AB |  if_e	rdlong	local03, fp
0f764     14 4E 85 A1 |  if_e	sub	fp, #20
0f768     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f76c     24 00 90 5D |  if_ne	jmp	#LR__1219
0f770     00 1E 06 F6 | 	mov	local01, #0
0f774     A7 20 02 FB | 	rdlong	local02, fp
0f778     0C 4E 05 F1 | 	add	fp, #12
0f77c     A7 22 02 FB | 	rdlong	local03, fp
0f780     0C 4E 85 F1 | 	sub	fp, #12
0f784     11 21 1A F2 | 	cmp	local02, local03 wcz
0f788     01 1E 66 16 |  if_a	neg	local01, #1
0f78c     A7 1E 62 FC | 	wrlong	local01, fp
0f790     10 01 90 FD | 	jmp	#LR__1223
0f794                 | LR__1219
0f794                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
0f794     08 4E 05 F1 | 	add	fp, #8
0f798     A7 1E 02 FB | 	rdlong	local01, fp
0f79c     08 4E 85 F1 | 	sub	fp, #8
0f7a0     2B 1E 0E F2 | 	cmp	local01, #43 wz
0f7a4     14 4E 05 A1 |  if_e	add	fp, #20
0f7a8     A7 22 02 AB |  if_e	rdlong	local03, fp
0f7ac     14 4E 85 A1 |  if_e	sub	fp, #20
0f7b0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0f7b4     30 00 90 5D |  if_ne	jmp	#LR__1220
0f7b8     00 1E 06 F6 | 	mov	local01, #0
0f7bc     A7 12 02 FB | 	rdlong	arg01, fp
0f7c0     34 D2 BF FD | 	call	#_convertstring
0f7c4     FD 12 02 F6 | 	mov	arg01, result1
0f7c8     0C 4E 05 F1 | 	add	fp, #12
0f7cc     A7 14 02 FB | 	rdlong	arg02, fp
0f7d0     0C 4E 85 F1 | 	sub	fp, #12
0f7d4     04 95 B0 FD | 	call	#__system___string_cmp
0f7d8     01 FA 55 F2 | 	cmps	result1, #1 wc
0f7dc     00 1E 26 36 |  if_ae	not	local01, #0
0f7e0     A7 1E 62 FC | 	wrlong	local01, fp
0f7e4     BC 00 90 FD | 	jmp	#LR__1223
0f7e8                 | LR__1220
0f7e8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
0f7e8     08 4E 05 F1 | 	add	fp, #8
0f7ec     A7 1E 02 FB | 	rdlong	local01, fp
0f7f0     08 4E 85 F1 | 	sub	fp, #8
0f7f4     1F 1E 0E F2 | 	cmp	local01, #31 wz
0f7f8     14 4E 05 A1 |  if_e	add	fp, #20
0f7fc     A7 22 02 AB |  if_e	rdlong	local03, fp
0f800     14 4E 85 A1 |  if_e	sub	fp, #20
0f804     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0f808     34 00 90 5D |  if_ne	jmp	#LR__1221
0f80c     00 1E 06 F6 | 	mov	local01, #0
0f810     A7 20 02 FB | 	rdlong	local02, fp
0f814     0C 4E 05 F1 | 	add	fp, #12
0f818     A7 12 02 FB | 	rdlong	arg01, fp
0f81c     0C 4E 85 F1 | 	sub	fp, #12
0f820     D4 D1 BF FD | 	call	#_convertstring
0f824     FD 14 02 F6 | 	mov	arg02, result1
0f828     10 13 02 F6 | 	mov	arg01, local02
0f82c     AC 94 B0 FD | 	call	#__system___string_cmp
0f830     01 FA 55 F2 | 	cmps	result1, #1 wc
0f834     00 1E 26 36 |  if_ae	not	local01, #0
0f838     A7 1E 62 FC | 	wrlong	local01, fp
0f83c     64 00 90 FD | 	jmp	#LR__1223
0f840                 | LR__1221
0f840                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
0f840     08 4E 05 F1 | 	add	fp, #8
0f844     A7 1E 02 FB | 	rdlong	local01, fp
0f848     08 4E 85 F1 | 	sub	fp, #8
0f84c     2B 1E 0E F2 | 	cmp	local01, #43 wz
0f850     14 4E 05 A1 |  if_e	add	fp, #20
0f854     A7 22 02 AB |  if_e	rdlong	local03, fp
0f858     14 4E 85 A1 |  if_e	sub	fp, #20
0f85c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0f860     3C 00 90 5D |  if_ne	jmp	#LR__1222
0f864     00 1E 06 F6 | 	mov	local01, #0
0f868     A7 12 02 FB | 	rdlong	arg01, fp
0f86c     88 D1 BF FD | 	call	#_convertstring
0f870     FD 20 02 F6 | 	mov	local02, result1
0f874     0C 4E 05 F1 | 	add	fp, #12
0f878     A7 12 02 FB | 	rdlong	arg01, fp
0f87c     0C 4E 85 F1 | 	sub	fp, #12
0f880     74 D1 BF FD | 	call	#_convertstring
0f884     FD 14 02 F6 | 	mov	arg02, result1
0f888     10 13 02 F6 | 	mov	arg01, local02
0f88c     4C 94 B0 FD | 	call	#__system___string_cmp
0f890     01 FA 55 F2 | 	cmps	result1, #1 wc
0f894     00 1E 26 36 |  if_ae	not	local01, #0
0f898     A7 1E 62 FC | 	wrlong	local01, fp
0f89c     04 00 90 FD | 	jmp	#LR__1223
0f8a0                 | LR__1222
0f8a0     A7 00 68 FC | 	wrlong	#0, fp
0f8a4                 | LR__1223
0f8a4     08 4E 05 F1 | 	add	fp, #8
0f8a8     A7 38 68 FC | 	wrlong	#28, fp
0f8ac     08 4E 85 F1 | 	sub	fp, #8
0f8b0     A7 12 02 F6 | 	mov	arg01, fp
0f8b4     9C A0 BF FD | 	call	#_push
0f8b8     A7 F0 03 F6 | 	mov	ptra, fp
0f8bc     B2 00 A0 FD | 	call	#popregs_
0f8c0                 | _do_gt_ret
0f8c0     2D 00 64 FD | 	ret
0f8c4                 | 
0f8c4                 | ' 
0f8c4                 | ' sub do_lt
0f8c4                 | _do_lt
0f8c4     05 4A 05 F6 | 	mov	COUNT_, #5
0f8c8     A8 00 A0 FD | 	call	#pushregs_
0f8cc     18 F0 07 F1 | 	add	ptra, #24
0f8d0     E8 9F BF FD | 	call	#_pop
0f8d4     FD 1E 02 F6 | 	mov	local01, result1
0f8d8     FE 20 02 F6 | 	mov	local02, result2
0f8dc     FF 22 02 F6 | 	mov	local03, result3
0f8e0     0C 4E 05 F1 | 	add	fp, #12
0f8e4     A7 1E 62 FC | 	wrlong	local01, fp
0f8e8     04 4E 05 F1 | 	add	fp, #4
0f8ec     A7 20 62 FC | 	wrlong	local02, fp
0f8f0     04 4E 05 F1 | 	add	fp, #4
0f8f4     A7 22 62 FC | 	wrlong	local03, fp
0f8f8     14 4E 85 F1 | 	sub	fp, #20
0f8fc     BC 9F BF FD | 	call	#_pop
0f900     FF 22 02 F6 | 	mov	local03, result3
0f904     A7 FA 61 FC | 	wrlong	result1, fp
0f908     04 4E 05 F1 | 	add	fp, #4
0f90c     A7 FC 61 FC | 	wrlong	result2, fp
0f910     04 4E 05 F1 | 	add	fp, #4
0f914     A7 22 62 FC | 	wrlong	local03, fp
0f918                 | ' t2=pop()
0f918                 | ' t1=pop()
0f918                 | ' 
0f918                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
0f918     08 4E 85 F1 | 	sub	fp, #8
0f91c     1F 22 0E F2 | 	cmp	local03, #31 wz
0f920     14 4E 05 A1 |  if_e	add	fp, #20
0f924     A7 24 02 AB |  if_e	rdlong	local04, fp
0f928     14 4E 85 A1 |  if_e	sub	fp, #20
0f92c     12 23 02 A6 |  if_e	mov	local03, local04
0f930     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0f934     28 00 90 5D |  if_ne	jmp	#LR__1230
0f938     00 1E 06 F6 | 	mov	local01, #0
0f93c     A7 12 02 FB | 	rdlong	arg01, fp
0f940     0C 4E 05 F1 | 	add	fp, #12
0f944     A7 14 02 FB | 	rdlong	arg02, fp
0f948     0C 4E 85 F1 | 	sub	fp, #12
0f94c     8C 93 B0 FD | 	call	#__system___string_cmp
0f950     00 FA 55 F2 | 	cmps	result1, #0 wc
0f954     00 1E 26 C6 |  if_b	not	local01, #0
0f958     A7 1E 62 FC | 	wrlong	local01, fp
0f95c     0C 04 90 FD | 	jmp	#LR__1243
0f960                 | LR__1230
0f960                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
0f960     08 4E 05 F1 | 	add	fp, #8
0f964     A7 1E 02 FB | 	rdlong	local01, fp
0f968     08 4E 85 F1 | 	sub	fp, #8
0f96c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f970     14 4E 05 A1 |  if_e	add	fp, #20
0f974     A7 24 02 AB |  if_e	rdlong	local04, fp
0f978     14 4E 85 A1 |  if_e	sub	fp, #20
0f97c     12 23 02 A6 |  if_e	mov	local03, local04
0f980     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f984     2C 00 90 5D |  if_ne	jmp	#LR__1231
0f988     00 1E 06 F6 | 	mov	local01, #0
0f98c     A7 12 02 FB | 	rdlong	arg01, fp
0f990     0C 4E 05 F1 | 	add	fp, #12
0f994     A7 14 02 FB | 	rdlong	arg02, fp
0f998     0C 4E 85 F1 | 	sub	fp, #12
0f99c     01 16 06 F6 | 	mov	arg03, #1
0f9a0     30 C2 B0 FD | 	call	#__system___float_cmp
0f9a4     00 FA 55 F2 | 	cmps	result1, #0 wc
0f9a8     00 1E 26 C6 |  if_b	not	local01, #0
0f9ac     A7 1E 62 FC | 	wrlong	local01, fp
0f9b0     B8 03 90 FD | 	jmp	#LR__1243
0f9b4                 | LR__1231
0f9b4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
0f9b4     08 4E 05 F1 | 	add	fp, #8
0f9b8     A7 1E 02 FB | 	rdlong	local01, fp
0f9bc     08 4E 85 F1 | 	sub	fp, #8
0f9c0     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f9c4     14 4E 05 A1 |  if_e	add	fp, #20
0f9c8     A7 24 02 AB |  if_e	rdlong	local04, fp
0f9cc     14 4E 85 A1 |  if_e	sub	fp, #20
0f9d0     12 23 02 A6 |  if_e	mov	local03, local04
0f9d4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f9d8     48 00 90 5D |  if_ne	jmp	#LR__1232
0f9dc     00 1E 06 F6 | 	mov	local01, #0
0f9e0     A7 20 02 FB | 	rdlong	local02, fp
0f9e4     0C 4E 05 F1 | 	add	fp, #12
0f9e8     A7 12 02 FB | 	rdlong	arg01, fp
0f9ec     0C 4E 85 F1 | 	sub	fp, #12
0f9f0     09 13 52 F6 | 	abs	arg01, arg01 wc
0f9f4     1F 26 C6 C9 |  if_b	decod	local05, #31
0f9f8     00 26 06 36 |  if_ae	mov	local05, #0
0f9fc     9C B9 B0 FD | 	call	#__system___float_fromuns
0fa00     13 FB 61 F5 | 	xor	result1, local05
0fa04     FD 14 02 F6 | 	mov	arg02, result1
0fa08     10 13 02 F6 | 	mov	arg01, local02
0fa0c     01 16 06 F6 | 	mov	arg03, #1
0fa10     C0 C1 B0 FD | 	call	#__system___float_cmp
0fa14     00 FA 55 F2 | 	cmps	result1, #0 wc
0fa18     00 1E 26 C6 |  if_b	not	local01, #0
0fa1c     A7 1E 62 FC | 	wrlong	local01, fp
0fa20     48 03 90 FD | 	jmp	#LR__1243
0fa24                 | LR__1232
0fa24                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
0fa24     08 4E 05 F1 | 	add	fp, #8
0fa28     A7 1E 02 FB | 	rdlong	local01, fp
0fa2c     08 4E 85 F1 | 	sub	fp, #8
0fa30     1E 1E 0E F2 | 	cmp	local01, #30 wz
0fa34     14 4E 05 A1 |  if_e	add	fp, #20
0fa38     A7 24 02 AB |  if_e	rdlong	local04, fp
0fa3c     14 4E 85 A1 |  if_e	sub	fp, #20
0fa40     12 23 02 A6 |  if_e	mov	local03, local04
0fa44     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0fa48     38 00 90 5D |  if_ne	jmp	#LR__1233
0fa4c     00 1E 06 F6 | 	mov	local01, #0
0fa50     A7 20 02 FB | 	rdlong	local02, fp
0fa54     0C 4E 05 F1 | 	add	fp, #12
0fa58     A7 12 02 FB | 	rdlong	arg01, fp
0fa5c     0C 4E 85 F1 | 	sub	fp, #12
0fa60     38 B9 B0 FD | 	call	#__system___float_fromuns
0fa64     FD 14 02 F6 | 	mov	arg02, result1
0fa68     10 13 02 F6 | 	mov	arg01, local02
0fa6c     01 16 06 F6 | 	mov	arg03, #1
0fa70     60 C1 B0 FD | 	call	#__system___float_cmp
0fa74     00 FA 55 F2 | 	cmps	result1, #0 wc
0fa78     00 1E 26 C6 |  if_b	not	local01, #0
0fa7c     A7 1E 62 FC | 	wrlong	local01, fp
0fa80     E8 02 90 FD | 	jmp	#LR__1243
0fa84                 | LR__1233
0fa84                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
0fa84     08 4E 05 F1 | 	add	fp, #8
0fa88     A7 1E 02 FB | 	rdlong	local01, fp
0fa8c     08 4E 85 F1 | 	sub	fp, #8
0fa90     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fa94     14 4E 05 A1 |  if_e	add	fp, #20
0fa98     A7 24 02 AB |  if_e	rdlong	local04, fp
0fa9c     14 4E 85 A1 |  if_e	sub	fp, #20
0faa0     12 23 02 A6 |  if_e	mov	local03, local04
0faa4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0faa8     44 00 90 5D |  if_ne	jmp	#LR__1234
0faac     00 1E 06 F6 | 	mov	local01, #0
0fab0     A7 12 02 FB | 	rdlong	arg01, fp
0fab4     09 13 52 F6 | 	abs	arg01, arg01 wc
0fab8     1F 26 C6 C9 |  if_b	decod	local05, #31
0fabc     00 26 06 36 |  if_ae	mov	local05, #0
0fac0     D8 B8 B0 FD | 	call	#__system___float_fromuns
0fac4     13 FB 61 F5 | 	xor	result1, local05
0fac8     FD 12 02 F6 | 	mov	arg01, result1
0facc     0C 4E 05 F1 | 	add	fp, #12
0fad0     A7 14 02 FB | 	rdlong	arg02, fp
0fad4     0C 4E 85 F1 | 	sub	fp, #12
0fad8     01 16 06 F6 | 	mov	arg03, #1
0fadc     F4 C0 B0 FD | 	call	#__system___float_cmp
0fae0     00 FA 55 F2 | 	cmps	result1, #0 wc
0fae4     00 1E 26 C6 |  if_b	not	local01, #0
0fae8     A7 1E 62 FC | 	wrlong	local01, fp
0faec     7C 02 90 FD | 	jmp	#LR__1243
0faf0                 | LR__1234
0faf0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
0faf0     08 4E 05 F1 | 	add	fp, #8
0faf4     A7 1E 02 FB | 	rdlong	local01, fp
0faf8     08 4E 85 F1 | 	sub	fp, #8
0fafc     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fb00     14 4E 05 A1 |  if_e	add	fp, #20
0fb04     A7 24 02 AB |  if_e	rdlong	local04, fp
0fb08     14 4E 85 A1 |  if_e	sub	fp, #20
0fb0c     12 23 02 A6 |  if_e	mov	local03, local04
0fb10     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0fb14     20 00 90 5D |  if_ne	jmp	#LR__1235
0fb18     A7 20 02 FB | 	rdlong	local02, fp
0fb1c     0C 4E 05 F1 | 	add	fp, #12
0fb20     A7 22 02 FB | 	rdlong	local03, fp
0fb24     0C 4E 85 F1 | 	sub	fp, #12
0fb28     11 21 52 F2 | 	cmps	local02, local03 wc
0fb2c     0F 1F A2 F1 | 	subx	local01, local01
0fb30     A7 1E 62 FC | 	wrlong	local01, fp
0fb34     34 02 90 FD | 	jmp	#LR__1243
0fb38                 | LR__1235
0fb38                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
0fb38     08 4E 05 F1 | 	add	fp, #8
0fb3c     A7 1E 02 FB | 	rdlong	local01, fp
0fb40     08 4E 85 F1 | 	sub	fp, #8
0fb44     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fb48     14 4E 05 A1 |  if_e	add	fp, #20
0fb4c     A7 24 02 AB |  if_e	rdlong	local04, fp
0fb50     14 4E 85 A1 |  if_e	sub	fp, #20
0fb54     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0fb58     20 00 90 5D |  if_ne	jmp	#LR__1236
0fb5c     A7 20 02 FB | 	rdlong	local02, fp
0fb60     0C 4E 05 F1 | 	add	fp, #12
0fb64     A7 22 02 FB | 	rdlong	local03, fp
0fb68     0C 4E 85 F1 | 	sub	fp, #12
0fb6c     11 21 52 F2 | 	cmps	local02, local03 wc
0fb70     0F 1F A2 F1 | 	subx	local01, local01
0fb74     A7 1E 62 FC | 	wrlong	local01, fp
0fb78     F0 01 90 FD | 	jmp	#LR__1243
0fb7c                 | LR__1236
0fb7c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
0fb7c     08 4E 05 F1 | 	add	fp, #8
0fb80     A7 1E 02 FB | 	rdlong	local01, fp
0fb84     08 4E 85 F1 | 	sub	fp, #8
0fb88     1D 1E 0E F2 | 	cmp	local01, #29 wz
0fb8c     14 4E 05 A1 |  if_e	add	fp, #20
0fb90     A7 22 02 AB |  if_e	rdlong	local03, fp
0fb94     14 4E 85 A1 |  if_e	sub	fp, #20
0fb98     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0fb9c     34 00 90 5D |  if_ne	jmp	#LR__1237
0fba0     00 1E 06 F6 | 	mov	local01, #0
0fba4     A7 12 02 FB | 	rdlong	arg01, fp
0fba8     F0 B7 B0 FD | 	call	#__system___float_fromuns
0fbac     FD 12 02 F6 | 	mov	arg01, result1
0fbb0     0C 4E 05 F1 | 	add	fp, #12
0fbb4     A7 14 02 FB | 	rdlong	arg02, fp
0fbb8     0C 4E 85 F1 | 	sub	fp, #12
0fbbc     01 16 06 F6 | 	mov	arg03, #1
0fbc0     10 C0 B0 FD | 	call	#__system___float_cmp
0fbc4     00 FA 55 F2 | 	cmps	result1, #0 wc
0fbc8     00 1E 26 C6 |  if_b	not	local01, #0
0fbcc     A7 1E 62 FC | 	wrlong	local01, fp
0fbd0     98 01 90 FD | 	jmp	#LR__1243
0fbd4                 | LR__1237
0fbd4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
0fbd4     08 4E 05 F1 | 	add	fp, #8
0fbd8     A7 1E 02 FB | 	rdlong	local01, fp
0fbdc     08 4E 85 F1 | 	sub	fp, #8
0fbe0     1D 1E 0E F2 | 	cmp	local01, #29 wz
0fbe4     14 4E 05 A1 |  if_e	add	fp, #20
0fbe8     A7 22 02 AB |  if_e	rdlong	local03, fp
0fbec     14 4E 85 A1 |  if_e	sub	fp, #20
0fbf0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0fbf4     20 00 90 5D |  if_ne	jmp	#LR__1238
0fbf8     A7 20 02 FB | 	rdlong	local02, fp
0fbfc     0C 4E 05 F1 | 	add	fp, #12
0fc00     A7 22 02 FB | 	rdlong	local03, fp
0fc04     0C 4E 85 F1 | 	sub	fp, #12
0fc08     11 21 52 F2 | 	cmps	local02, local03 wc
0fc0c     0F 1F A2 F1 | 	subx	local01, local01
0fc10     A7 1E 62 FC | 	wrlong	local01, fp
0fc14     54 01 90 FD | 	jmp	#LR__1243
0fc18                 | LR__1238
0fc18                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
0fc18     08 4E 05 F1 | 	add	fp, #8
0fc1c     A7 1E 02 FB | 	rdlong	local01, fp
0fc20     08 4E 85 F1 | 	sub	fp, #8
0fc24     1D 1E 0E F2 | 	cmp	local01, #29 wz
0fc28     14 4E 05 A1 |  if_e	add	fp, #20
0fc2c     A7 22 02 AB |  if_e	rdlong	local03, fp
0fc30     14 4E 85 A1 |  if_e	sub	fp, #20
0fc34     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0fc38     20 00 90 5D |  if_ne	jmp	#LR__1239
0fc3c     A7 20 02 FB | 	rdlong	local02, fp
0fc40     0C 4E 05 F1 | 	add	fp, #12
0fc44     A7 22 02 FB | 	rdlong	local03, fp
0fc48     0C 4E 85 F1 | 	sub	fp, #12
0fc4c     11 21 12 F2 | 	cmp	local02, local03 wc
0fc50     0F 1F A2 F1 | 	subx	local01, local01
0fc54     A7 1E 62 FC | 	wrlong	local01, fp
0fc58     10 01 90 FD | 	jmp	#LR__1243
0fc5c                 | LR__1239
0fc5c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
0fc5c     08 4E 05 F1 | 	add	fp, #8
0fc60     A7 1E 02 FB | 	rdlong	local01, fp
0fc64     08 4E 85 F1 | 	sub	fp, #8
0fc68     2B 1E 0E F2 | 	cmp	local01, #43 wz
0fc6c     14 4E 05 A1 |  if_e	add	fp, #20
0fc70     A7 22 02 AB |  if_e	rdlong	local03, fp
0fc74     14 4E 85 A1 |  if_e	sub	fp, #20
0fc78     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0fc7c     30 00 90 5D |  if_ne	jmp	#LR__1240
0fc80     00 1E 06 F6 | 	mov	local01, #0
0fc84     A7 12 02 FB | 	rdlong	arg01, fp
0fc88     6C CD BF FD | 	call	#_convertstring
0fc8c     FD 12 02 F6 | 	mov	arg01, result1
0fc90     0C 4E 05 F1 | 	add	fp, #12
0fc94     A7 14 02 FB | 	rdlong	arg02, fp
0fc98     0C 4E 85 F1 | 	sub	fp, #12
0fc9c     3C 90 B0 FD | 	call	#__system___string_cmp
0fca0     00 FA 55 F2 | 	cmps	result1, #0 wc
0fca4     00 1E 26 C6 |  if_b	not	local01, #0
0fca8     A7 1E 62 FC | 	wrlong	local01, fp
0fcac     BC 00 90 FD | 	jmp	#LR__1243
0fcb0                 | LR__1240
0fcb0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
0fcb0     08 4E 05 F1 | 	add	fp, #8
0fcb4     A7 1E 02 FB | 	rdlong	local01, fp
0fcb8     08 4E 85 F1 | 	sub	fp, #8
0fcbc     1F 1E 0E F2 | 	cmp	local01, #31 wz
0fcc0     14 4E 05 A1 |  if_e	add	fp, #20
0fcc4     A7 22 02 AB |  if_e	rdlong	local03, fp
0fcc8     14 4E 85 A1 |  if_e	sub	fp, #20
0fccc     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0fcd0     34 00 90 5D |  if_ne	jmp	#LR__1241
0fcd4     00 1E 06 F6 | 	mov	local01, #0
0fcd8     A7 20 02 FB | 	rdlong	local02, fp
0fcdc     0C 4E 05 F1 | 	add	fp, #12
0fce0     A7 12 02 FB | 	rdlong	arg01, fp
0fce4     0C 4E 85 F1 | 	sub	fp, #12
0fce8     0C CD BF FD | 	call	#_convertstring
0fcec     FD 14 02 F6 | 	mov	arg02, result1
0fcf0     10 13 02 F6 | 	mov	arg01, local02
0fcf4     E4 8F B0 FD | 	call	#__system___string_cmp
0fcf8     00 FA 55 F2 | 	cmps	result1, #0 wc
0fcfc     00 1E 26 C6 |  if_b	not	local01, #0
0fd00     A7 1E 62 FC | 	wrlong	local01, fp
0fd04     64 00 90 FD | 	jmp	#LR__1243
0fd08                 | LR__1241
0fd08                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
0fd08     08 4E 05 F1 | 	add	fp, #8
0fd0c     A7 1E 02 FB | 	rdlong	local01, fp
0fd10     08 4E 85 F1 | 	sub	fp, #8
0fd14     2B 1E 0E F2 | 	cmp	local01, #43 wz
0fd18     14 4E 05 A1 |  if_e	add	fp, #20
0fd1c     A7 22 02 AB |  if_e	rdlong	local03, fp
0fd20     14 4E 85 A1 |  if_e	sub	fp, #20
0fd24     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0fd28     3C 00 90 5D |  if_ne	jmp	#LR__1242
0fd2c     00 1E 06 F6 | 	mov	local01, #0
0fd30     A7 12 02 FB | 	rdlong	arg01, fp
0fd34     C0 CC BF FD | 	call	#_convertstring
0fd38     FD 20 02 F6 | 	mov	local02, result1
0fd3c     0C 4E 05 F1 | 	add	fp, #12
0fd40     A7 12 02 FB | 	rdlong	arg01, fp
0fd44     0C 4E 85 F1 | 	sub	fp, #12
0fd48     AC CC BF FD | 	call	#_convertstring
0fd4c     FD 14 02 F6 | 	mov	arg02, result1
0fd50     10 13 02 F6 | 	mov	arg01, local02
0fd54     84 8F B0 FD | 	call	#__system___string_cmp
0fd58     00 FA 55 F2 | 	cmps	result1, #0 wc
0fd5c     00 1E 26 C6 |  if_b	not	local01, #0
0fd60     A7 1E 62 FC | 	wrlong	local01, fp
0fd64     04 00 90 FD | 	jmp	#LR__1243
0fd68                 | LR__1242
0fd68     A7 00 68 FC | 	wrlong	#0, fp
0fd6c                 | LR__1243
0fd6c     08 4E 05 F1 | 	add	fp, #8
0fd70     A7 38 68 FC | 	wrlong	#28, fp
0fd74     08 4E 85 F1 | 	sub	fp, #8
0fd78     A7 12 02 F6 | 	mov	arg01, fp
0fd7c     D4 9B BF FD | 	call	#_push
0fd80     A7 F0 03 F6 | 	mov	ptra, fp
0fd84     B2 00 A0 FD | 	call	#popregs_
0fd88                 | _do_lt_ret
0fd88     2D 00 64 FD | 	ret
0fd8c                 | 
0fd8c                 | ' 
0fd8c                 | ' sub do_ge
0fd8c                 | _do_ge
0fd8c     05 4A 05 F6 | 	mov	COUNT_, #5
0fd90     A8 00 A0 FD | 	call	#pushregs_
0fd94     18 F0 07 F1 | 	add	ptra, #24
0fd98     20 9B BF FD | 	call	#_pop
0fd9c     FD 1E 02 F6 | 	mov	local01, result1
0fda0     FE 20 02 F6 | 	mov	local02, result2
0fda4     FF 22 02 F6 | 	mov	local03, result3
0fda8     0C 4E 05 F1 | 	add	fp, #12
0fdac     A7 1E 62 FC | 	wrlong	local01, fp
0fdb0     04 4E 05 F1 | 	add	fp, #4
0fdb4     A7 20 62 FC | 	wrlong	local02, fp
0fdb8     04 4E 05 F1 | 	add	fp, #4
0fdbc     A7 22 62 FC | 	wrlong	local03, fp
0fdc0     14 4E 85 F1 | 	sub	fp, #20
0fdc4     F4 9A BF FD | 	call	#_pop
0fdc8     FF 22 02 F6 | 	mov	local03, result3
0fdcc     A7 FA 61 FC | 	wrlong	result1, fp
0fdd0     04 4E 05 F1 | 	add	fp, #4
0fdd4     A7 FC 61 FC | 	wrlong	result2, fp
0fdd8     04 4E 05 F1 | 	add	fp, #4
0fddc     A7 22 62 FC | 	wrlong	local03, fp
0fde0                 | ' t2=pop()
0fde0                 | ' t1=pop()
0fde0                 | ' 
0fde0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
0fde0     08 4E 85 F1 | 	sub	fp, #8
0fde4     1F 22 0E F2 | 	cmp	local03, #31 wz
0fde8     14 4E 05 A1 |  if_e	add	fp, #20
0fdec     A7 24 02 AB |  if_e	rdlong	local04, fp
0fdf0     14 4E 85 A1 |  if_e	sub	fp, #20
0fdf4     12 23 02 A6 |  if_e	mov	local03, local04
0fdf8     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0fdfc     28 00 90 5D |  if_ne	jmp	#LR__1250
0fe00     00 1E 06 F6 | 	mov	local01, #0
0fe04     A7 12 02 FB | 	rdlong	arg01, fp
0fe08     0C 4E 05 F1 | 	add	fp, #12
0fe0c     A7 14 02 FB | 	rdlong	arg02, fp
0fe10     0C 4E 85 F1 | 	sub	fp, #12
0fe14     C4 8E B0 FD | 	call	#__system___string_cmp
0fe18     00 FA 55 F2 | 	cmps	result1, #0 wc
0fe1c     00 1E 26 36 |  if_ae	not	local01, #0
0fe20     A7 1E 62 FC | 	wrlong	local01, fp
0fe24     1C 04 90 FD | 	jmp	#LR__1263
0fe28                 | LR__1250
0fe28                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
0fe28     08 4E 05 F1 | 	add	fp, #8
0fe2c     A7 1E 02 FB | 	rdlong	local01, fp
0fe30     08 4E 85 F1 | 	sub	fp, #8
0fe34     1E 1E 0E F2 | 	cmp	local01, #30 wz
0fe38     14 4E 05 A1 |  if_e	add	fp, #20
0fe3c     A7 24 02 AB |  if_e	rdlong	local04, fp
0fe40     14 4E 85 A1 |  if_e	sub	fp, #20
0fe44     12 23 02 A6 |  if_e	mov	local03, local04
0fe48     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0fe4c     2C 00 90 5D |  if_ne	jmp	#LR__1251
0fe50     00 1E 06 F6 | 	mov	local01, #0
0fe54     A7 12 02 FB | 	rdlong	arg01, fp
0fe58     0C 4E 05 F1 | 	add	fp, #12
0fe5c     A7 14 02 FB | 	rdlong	arg02, fp
0fe60     0C 4E 85 F1 | 	sub	fp, #12
0fe64     01 16 66 F6 | 	neg	arg03, #1
0fe68     68 BD B0 FD | 	call	#__system___float_cmp
0fe6c     00 FA 55 F2 | 	cmps	result1, #0 wc
0fe70     00 1E 26 36 |  if_ae	not	local01, #0
0fe74     A7 1E 62 FC | 	wrlong	local01, fp
0fe78     C8 03 90 FD | 	jmp	#LR__1263
0fe7c                 | LR__1251
0fe7c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
0fe7c     08 4E 05 F1 | 	add	fp, #8
0fe80     A7 1E 02 FB | 	rdlong	local01, fp
0fe84     08 4E 85 F1 | 	sub	fp, #8
0fe88     1E 1E 0E F2 | 	cmp	local01, #30 wz
0fe8c     14 4E 05 A1 |  if_e	add	fp, #20
0fe90     A7 24 02 AB |  if_e	rdlong	local04, fp
0fe94     14 4E 85 A1 |  if_e	sub	fp, #20
0fe98     12 23 02 A6 |  if_e	mov	local03, local04
0fe9c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0fea0     48 00 90 5D |  if_ne	jmp	#LR__1252
0fea4     00 1E 06 F6 | 	mov	local01, #0
0fea8     A7 20 02 FB | 	rdlong	local02, fp
0feac     0C 4E 05 F1 | 	add	fp, #12
0feb0     A7 12 02 FB | 	rdlong	arg01, fp
0feb4     0C 4E 85 F1 | 	sub	fp, #12
0feb8     09 13 52 F6 | 	abs	arg01, arg01 wc
0febc     1F 26 C6 C9 |  if_b	decod	local05, #31
0fec0     00 26 06 36 |  if_ae	mov	local05, #0
0fec4     D4 B4 B0 FD | 	call	#__system___float_fromuns
0fec8     13 FB 61 F5 | 	xor	result1, local05
0fecc     FD 14 02 F6 | 	mov	arg02, result1
0fed0     10 13 02 F6 | 	mov	arg01, local02
0fed4     01 16 66 F6 | 	neg	arg03, #1
0fed8     F8 BC B0 FD | 	call	#__system___float_cmp
0fedc     00 FA 55 F2 | 	cmps	result1, #0 wc
0fee0     00 1E 26 36 |  if_ae	not	local01, #0
0fee4     A7 1E 62 FC | 	wrlong	local01, fp
0fee8     58 03 90 FD | 	jmp	#LR__1263
0feec                 | LR__1252
0feec                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
0feec     08 4E 05 F1 | 	add	fp, #8
0fef0     A7 1E 02 FB | 	rdlong	local01, fp
0fef4     08 4E 85 F1 | 	sub	fp, #8
0fef8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0fefc     14 4E 05 A1 |  if_e	add	fp, #20
0ff00     A7 24 02 AB |  if_e	rdlong	local04, fp
0ff04     14 4E 85 A1 |  if_e	sub	fp, #20
0ff08     12 23 02 A6 |  if_e	mov	local03, local04
0ff0c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0ff10     38 00 90 5D |  if_ne	jmp	#LR__1253
0ff14     00 1E 06 F6 | 	mov	local01, #0
0ff18     A7 20 02 FB | 	rdlong	local02, fp
0ff1c     0C 4E 05 F1 | 	add	fp, #12
0ff20     A7 12 02 FB | 	rdlong	arg01, fp
0ff24     0C 4E 85 F1 | 	sub	fp, #12
0ff28     70 B4 B0 FD | 	call	#__system___float_fromuns
0ff2c     FD 14 02 F6 | 	mov	arg02, result1
0ff30     10 13 02 F6 | 	mov	arg01, local02
0ff34     01 16 66 F6 | 	neg	arg03, #1
0ff38     98 BC B0 FD | 	call	#__system___float_cmp
0ff3c     00 FA 55 F2 | 	cmps	result1, #0 wc
0ff40     00 1E 26 36 |  if_ae	not	local01, #0
0ff44     A7 1E 62 FC | 	wrlong	local01, fp
0ff48     F8 02 90 FD | 	jmp	#LR__1263
0ff4c                 | LR__1253
0ff4c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
0ff4c     08 4E 05 F1 | 	add	fp, #8
0ff50     A7 1E 02 FB | 	rdlong	local01, fp
0ff54     08 4E 85 F1 | 	sub	fp, #8
0ff58     1C 1E 0E F2 | 	cmp	local01, #28 wz
0ff5c     14 4E 05 A1 |  if_e	add	fp, #20
0ff60     A7 24 02 AB |  if_e	rdlong	local04, fp
0ff64     14 4E 85 A1 |  if_e	sub	fp, #20
0ff68     12 23 02 A6 |  if_e	mov	local03, local04
0ff6c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0ff70     44 00 90 5D |  if_ne	jmp	#LR__1254
0ff74     00 1E 06 F6 | 	mov	local01, #0
0ff78     A7 12 02 FB | 	rdlong	arg01, fp
0ff7c     09 13 52 F6 | 	abs	arg01, arg01 wc
0ff80     1F 26 C6 C9 |  if_b	decod	local05, #31
0ff84     00 26 06 36 |  if_ae	mov	local05, #0
0ff88     10 B4 B0 FD | 	call	#__system___float_fromuns
0ff8c     13 FB 61 F5 | 	xor	result1, local05
0ff90     FD 12 02 F6 | 	mov	arg01, result1
0ff94     0C 4E 05 F1 | 	add	fp, #12
0ff98     A7 14 02 FB | 	rdlong	arg02, fp
0ff9c     0C 4E 85 F1 | 	sub	fp, #12
0ffa0     01 16 66 F6 | 	neg	arg03, #1
0ffa4     2C BC B0 FD | 	call	#__system___float_cmp
0ffa8     00 FA 55 F2 | 	cmps	result1, #0 wc
0ffac     00 1E 26 36 |  if_ae	not	local01, #0
0ffb0     A7 1E 62 FC | 	wrlong	local01, fp
0ffb4     8C 02 90 FD | 	jmp	#LR__1263
0ffb8                 | LR__1254
0ffb8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
0ffb8     08 4E 05 F1 | 	add	fp, #8
0ffbc     A7 1E 02 FB | 	rdlong	local01, fp
0ffc0     08 4E 85 F1 | 	sub	fp, #8
0ffc4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0ffc8     14 4E 05 A1 |  if_e	add	fp, #20
0ffcc     A7 24 02 AB |  if_e	rdlong	local04, fp
0ffd0     14 4E 85 A1 |  if_e	sub	fp, #20
0ffd4     12 23 02 A6 |  if_e	mov	local03, local04
0ffd8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0ffdc     24 00 90 5D |  if_ne	jmp	#LR__1255
0ffe0     00 1E 06 F6 | 	mov	local01, #0
0ffe4     A7 20 02 FB | 	rdlong	local02, fp
0ffe8     0C 4E 05 F1 | 	add	fp, #12
0ffec     A7 22 02 FB | 	rdlong	local03, fp
0fff0     0C 4E 85 F1 | 	sub	fp, #12
0fff4     11 21 52 F2 | 	cmps	local02, local03 wc
0fff8     01 1E 66 36 |  if_ae	neg	local01, #1
0fffc     A7 1E 62 FC | 	wrlong	local01, fp
10000     40 02 90 FD | 	jmp	#LR__1263
10004                 | LR__1255
10004                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
10004     08 4E 05 F1 | 	add	fp, #8
10008     A7 1E 02 FB | 	rdlong	local01, fp
1000c     08 4E 85 F1 | 	sub	fp, #8
10010     1C 1E 0E F2 | 	cmp	local01, #28 wz
10014     14 4E 05 A1 |  if_e	add	fp, #20
10018     A7 24 02 AB |  if_e	rdlong	local04, fp
1001c     14 4E 85 A1 |  if_e	sub	fp, #20
10020     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
10024     24 00 90 5D |  if_ne	jmp	#LR__1256
10028     00 1E 06 F6 | 	mov	local01, #0
1002c     A7 20 02 FB | 	rdlong	local02, fp
10030     0C 4E 05 F1 | 	add	fp, #12
10034     A7 22 02 FB | 	rdlong	local03, fp
10038     0C 4E 85 F1 | 	sub	fp, #12
1003c     11 21 52 F2 | 	cmps	local02, local03 wc
10040     01 1E 66 36 |  if_ae	neg	local01, #1
10044     A7 1E 62 FC | 	wrlong	local01, fp
10048     F8 01 90 FD | 	jmp	#LR__1263
1004c                 | LR__1256
1004c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
1004c     08 4E 05 F1 | 	add	fp, #8
10050     A7 1E 02 FB | 	rdlong	local01, fp
10054     08 4E 85 F1 | 	sub	fp, #8
10058     1D 1E 0E F2 | 	cmp	local01, #29 wz
1005c     14 4E 05 A1 |  if_e	add	fp, #20
10060     A7 22 02 AB |  if_e	rdlong	local03, fp
10064     14 4E 85 A1 |  if_e	sub	fp, #20
10068     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1006c     34 00 90 5D |  if_ne	jmp	#LR__1257
10070     00 1E 06 F6 | 	mov	local01, #0
10074     A7 12 02 FB | 	rdlong	arg01, fp
10078     20 B3 B0 FD | 	call	#__system___float_fromuns
1007c     FD 12 02 F6 | 	mov	arg01, result1
10080     0C 4E 05 F1 | 	add	fp, #12
10084     A7 14 02 FB | 	rdlong	arg02, fp
10088     0C 4E 85 F1 | 	sub	fp, #12
1008c     01 16 66 F6 | 	neg	arg03, #1
10090     40 BB B0 FD | 	call	#__system___float_cmp
10094     00 FA 55 F2 | 	cmps	result1, #0 wc
10098     00 1E 26 36 |  if_ae	not	local01, #0
1009c     A7 1E 62 FC | 	wrlong	local01, fp
100a0     A0 01 90 FD | 	jmp	#LR__1263
100a4                 | LR__1257
100a4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
100a4     08 4E 05 F1 | 	add	fp, #8
100a8     A7 1E 02 FB | 	rdlong	local01, fp
100ac     08 4E 85 F1 | 	sub	fp, #8
100b0     1D 1E 0E F2 | 	cmp	local01, #29 wz
100b4     14 4E 05 A1 |  if_e	add	fp, #20
100b8     A7 22 02 AB |  if_e	rdlong	local03, fp
100bc     14 4E 85 A1 |  if_e	sub	fp, #20
100c0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
100c4     24 00 90 5D |  if_ne	jmp	#LR__1258
100c8     00 1E 06 F6 | 	mov	local01, #0
100cc     A7 20 02 FB | 	rdlong	local02, fp
100d0     0C 4E 05 F1 | 	add	fp, #12
100d4     A7 22 02 FB | 	rdlong	local03, fp
100d8     0C 4E 85 F1 | 	sub	fp, #12
100dc     11 21 52 F2 | 	cmps	local02, local03 wc
100e0     01 1E 66 36 |  if_ae	neg	local01, #1
100e4     A7 1E 62 FC | 	wrlong	local01, fp
100e8     58 01 90 FD | 	jmp	#LR__1263
100ec                 | LR__1258
100ec                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
100ec     08 4E 05 F1 | 	add	fp, #8
100f0     A7 1E 02 FB | 	rdlong	local01, fp
100f4     08 4E 85 F1 | 	sub	fp, #8
100f8     1D 1E 0E F2 | 	cmp	local01, #29 wz
100fc     14 4E 05 A1 |  if_e	add	fp, #20
10100     A7 22 02 AB |  if_e	rdlong	local03, fp
10104     14 4E 85 A1 |  if_e	sub	fp, #20
10108     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1010c     24 00 90 5D |  if_ne	jmp	#LR__1259
10110     00 1E 06 F6 | 	mov	local01, #0
10114     A7 20 02 FB | 	rdlong	local02, fp
10118     0C 4E 05 F1 | 	add	fp, #12
1011c     A7 22 02 FB | 	rdlong	local03, fp
10120     0C 4E 85 F1 | 	sub	fp, #12
10124     11 21 12 F2 | 	cmp	local02, local03 wc
10128     01 1E 66 36 |  if_ae	neg	local01, #1
1012c     A7 1E 62 FC | 	wrlong	local01, fp
10130     10 01 90 FD | 	jmp	#LR__1263
10134                 | LR__1259
10134                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
10134     08 4E 05 F1 | 	add	fp, #8
10138     A7 1E 02 FB | 	rdlong	local01, fp
1013c     08 4E 85 F1 | 	sub	fp, #8
10140     2B 1E 0E F2 | 	cmp	local01, #43 wz
10144     14 4E 05 A1 |  if_e	add	fp, #20
10148     A7 22 02 AB |  if_e	rdlong	local03, fp
1014c     14 4E 85 A1 |  if_e	sub	fp, #20
10150     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
10154     30 00 90 5D |  if_ne	jmp	#LR__1260
10158     00 1E 06 F6 | 	mov	local01, #0
1015c     A7 12 02 FB | 	rdlong	arg01, fp
10160     94 C8 BF FD | 	call	#_convertstring
10164     FD 12 02 F6 | 	mov	arg01, result1
10168     0C 4E 05 F1 | 	add	fp, #12
1016c     A7 14 02 FB | 	rdlong	arg02, fp
10170     0C 4E 85 F1 | 	sub	fp, #12
10174     64 8B B0 FD | 	call	#__system___string_cmp
10178     00 FA 55 F2 | 	cmps	result1, #0 wc
1017c     00 1E 26 36 |  if_ae	not	local01, #0
10180     A7 1E 62 FC | 	wrlong	local01, fp
10184     BC 00 90 FD | 	jmp	#LR__1263
10188                 | LR__1260
10188                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
10188     08 4E 05 F1 | 	add	fp, #8
1018c     A7 1E 02 FB | 	rdlong	local01, fp
10190     08 4E 85 F1 | 	sub	fp, #8
10194     1F 1E 0E F2 | 	cmp	local01, #31 wz
10198     14 4E 05 A1 |  if_e	add	fp, #20
1019c     A7 22 02 AB |  if_e	rdlong	local03, fp
101a0     14 4E 85 A1 |  if_e	sub	fp, #20
101a4     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
101a8     34 00 90 5D |  if_ne	jmp	#LR__1261
101ac     00 1E 06 F6 | 	mov	local01, #0
101b0     A7 20 02 FB | 	rdlong	local02, fp
101b4     0C 4E 05 F1 | 	add	fp, #12
101b8     A7 12 02 FB | 	rdlong	arg01, fp
101bc     0C 4E 85 F1 | 	sub	fp, #12
101c0     34 C8 BF FD | 	call	#_convertstring
101c4     FD 14 02 F6 | 	mov	arg02, result1
101c8     10 13 02 F6 | 	mov	arg01, local02
101cc     0C 8B B0 FD | 	call	#__system___string_cmp
101d0     00 FA 55 F2 | 	cmps	result1, #0 wc
101d4     00 1E 26 36 |  if_ae	not	local01, #0
101d8     A7 1E 62 FC | 	wrlong	local01, fp
101dc     64 00 90 FD | 	jmp	#LR__1263
101e0                 | LR__1261
101e0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
101e0     08 4E 05 F1 | 	add	fp, #8
101e4     A7 1E 02 FB | 	rdlong	local01, fp
101e8     08 4E 85 F1 | 	sub	fp, #8
101ec     2B 1E 0E F2 | 	cmp	local01, #43 wz
101f0     14 4E 05 A1 |  if_e	add	fp, #20
101f4     A7 22 02 AB |  if_e	rdlong	local03, fp
101f8     14 4E 85 A1 |  if_e	sub	fp, #20
101fc     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
10200     3C 00 90 5D |  if_ne	jmp	#LR__1262
10204     00 1E 06 F6 | 	mov	local01, #0
10208     A7 12 02 FB | 	rdlong	arg01, fp
1020c     E8 C7 BF FD | 	call	#_convertstring
10210     FD 20 02 F6 | 	mov	local02, result1
10214     0C 4E 05 F1 | 	add	fp, #12
10218     A7 12 02 FB | 	rdlong	arg01, fp
1021c     0C 4E 85 F1 | 	sub	fp, #12
10220     D4 C7 BF FD | 	call	#_convertstring
10224     FD 14 02 F6 | 	mov	arg02, result1
10228     10 13 02 F6 | 	mov	arg01, local02
1022c     AC 8A B0 FD | 	call	#__system___string_cmp
10230     00 FA 55 F2 | 	cmps	result1, #0 wc
10234     00 1E 26 36 |  if_ae	not	local01, #0
10238     A7 1E 62 FC | 	wrlong	local01, fp
1023c     04 00 90 FD | 	jmp	#LR__1263
10240                 | LR__1262
10240     A7 00 68 FC | 	wrlong	#0, fp
10244                 | LR__1263
10244     08 4E 05 F1 | 	add	fp, #8
10248     A7 38 68 FC | 	wrlong	#28, fp
1024c     08 4E 85 F1 | 	sub	fp, #8
10250     A7 12 02 F6 | 	mov	arg01, fp
10254     FC 96 BF FD | 	call	#_push
10258     A7 F0 03 F6 | 	mov	ptra, fp
1025c     B2 00 A0 FD | 	call	#popregs_
10260                 | _do_ge_ret
10260     2D 00 64 FD | 	ret
10264                 | 
10264                 | ' 
10264                 | ' sub do_le
10264                 | _do_le
10264     05 4A 05 F6 | 	mov	COUNT_, #5
10268     A8 00 A0 FD | 	call	#pushregs_
1026c     18 F0 07 F1 | 	add	ptra, #24
10270     48 96 BF FD | 	call	#_pop
10274     FD 1E 02 F6 | 	mov	local01, result1
10278     FE 20 02 F6 | 	mov	local02, result2
1027c     FF 22 02 F6 | 	mov	local03, result3
10280     0C 4E 05 F1 | 	add	fp, #12
10284     A7 1E 62 FC | 	wrlong	local01, fp
10288     04 4E 05 F1 | 	add	fp, #4
1028c     A7 20 62 FC | 	wrlong	local02, fp
10290     04 4E 05 F1 | 	add	fp, #4
10294     A7 22 62 FC | 	wrlong	local03, fp
10298     14 4E 85 F1 | 	sub	fp, #20
1029c     1C 96 BF FD | 	call	#_pop
102a0     FF 22 02 F6 | 	mov	local03, result3
102a4     A7 FA 61 FC | 	wrlong	result1, fp
102a8     04 4E 05 F1 | 	add	fp, #4
102ac     A7 FC 61 FC | 	wrlong	result2, fp
102b0     04 4E 05 F1 | 	add	fp, #4
102b4     A7 22 62 FC | 	wrlong	local03, fp
102b8                 | ' t2=pop()
102b8                 | ' t1=pop()
102b8                 | ' 
102b8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
102b8     08 4E 85 F1 | 	sub	fp, #8
102bc     1F 22 0E F2 | 	cmp	local03, #31 wz
102c0     14 4E 05 A1 |  if_e	add	fp, #20
102c4     A7 24 02 AB |  if_e	rdlong	local04, fp
102c8     14 4E 85 A1 |  if_e	sub	fp, #20
102cc     12 23 02 A6 |  if_e	mov	local03, local04
102d0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
102d4     28 00 90 5D |  if_ne	jmp	#LR__1270
102d8     00 1E 06 F6 | 	mov	local01, #0
102dc     A7 12 02 FB | 	rdlong	arg01, fp
102e0     0C 4E 05 F1 | 	add	fp, #12
102e4     A7 14 02 FB | 	rdlong	arg02, fp
102e8     0C 4E 85 F1 | 	sub	fp, #12
102ec     EC 89 B0 FD | 	call	#__system___string_cmp
102f0     01 FA 55 F2 | 	cmps	result1, #1 wc
102f4     00 1E 26 C6 |  if_b	not	local01, #0
102f8     A7 1E 62 FC | 	wrlong	local01, fp
102fc     1C 04 90 FD | 	jmp	#LR__1283
10300                 | LR__1270
10300                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
10300     08 4E 05 F1 | 	add	fp, #8
10304     A7 1E 02 FB | 	rdlong	local01, fp
10308     08 4E 85 F1 | 	sub	fp, #8
1030c     1E 1E 0E F2 | 	cmp	local01, #30 wz
10310     14 4E 05 A1 |  if_e	add	fp, #20
10314     A7 24 02 AB |  if_e	rdlong	local04, fp
10318     14 4E 85 A1 |  if_e	sub	fp, #20
1031c     12 23 02 A6 |  if_e	mov	local03, local04
10320     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10324     2C 00 90 5D |  if_ne	jmp	#LR__1271
10328     00 1E 06 F6 | 	mov	local01, #0
1032c     A7 12 02 FB | 	rdlong	arg01, fp
10330     0C 4E 05 F1 | 	add	fp, #12
10334     A7 14 02 FB | 	rdlong	arg02, fp
10338     0C 4E 85 F1 | 	sub	fp, #12
1033c     01 16 06 F6 | 	mov	arg03, #1
10340     90 B8 B0 FD | 	call	#__system___float_cmp
10344     01 FA 55 F2 | 	cmps	result1, #1 wc
10348     00 1E 26 C6 |  if_b	not	local01, #0
1034c     A7 1E 62 FC | 	wrlong	local01, fp
10350     C8 03 90 FD | 	jmp	#LR__1283
10354                 | LR__1271
10354                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
10354     08 4E 05 F1 | 	add	fp, #8
10358     A7 1E 02 FB | 	rdlong	local01, fp
1035c     08 4E 85 F1 | 	sub	fp, #8
10360     1E 1E 0E F2 | 	cmp	local01, #30 wz
10364     14 4E 05 A1 |  if_e	add	fp, #20
10368     A7 24 02 AB |  if_e	rdlong	local04, fp
1036c     14 4E 85 A1 |  if_e	sub	fp, #20
10370     12 23 02 A6 |  if_e	mov	local03, local04
10374     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10378     48 00 90 5D |  if_ne	jmp	#LR__1272
1037c     00 1E 06 F6 | 	mov	local01, #0
10380     A7 20 02 FB | 	rdlong	local02, fp
10384     0C 4E 05 F1 | 	add	fp, #12
10388     A7 12 02 FB | 	rdlong	arg01, fp
1038c     0C 4E 85 F1 | 	sub	fp, #12
10390     09 13 52 F6 | 	abs	arg01, arg01 wc
10394     1F 26 C6 C9 |  if_b	decod	local05, #31
10398     00 26 06 36 |  if_ae	mov	local05, #0
1039c     FC AF B0 FD | 	call	#__system___float_fromuns
103a0     13 FB 61 F5 | 	xor	result1, local05
103a4     FD 14 02 F6 | 	mov	arg02, result1
103a8     10 13 02 F6 | 	mov	arg01, local02
103ac     01 16 06 F6 | 	mov	arg03, #1
103b0     20 B8 B0 FD | 	call	#__system___float_cmp
103b4     01 FA 55 F2 | 	cmps	result1, #1 wc
103b8     00 1E 26 C6 |  if_b	not	local01, #0
103bc     A7 1E 62 FC | 	wrlong	local01, fp
103c0     58 03 90 FD | 	jmp	#LR__1283
103c4                 | LR__1272
103c4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
103c4     08 4E 05 F1 | 	add	fp, #8
103c8     A7 1E 02 FB | 	rdlong	local01, fp
103cc     08 4E 85 F1 | 	sub	fp, #8
103d0     1E 1E 0E F2 | 	cmp	local01, #30 wz
103d4     14 4E 05 A1 |  if_e	add	fp, #20
103d8     A7 24 02 AB |  if_e	rdlong	local04, fp
103dc     14 4E 85 A1 |  if_e	sub	fp, #20
103e0     12 23 02 A6 |  if_e	mov	local03, local04
103e4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
103e8     38 00 90 5D |  if_ne	jmp	#LR__1273
103ec     00 1E 06 F6 | 	mov	local01, #0
103f0     A7 20 02 FB | 	rdlong	local02, fp
103f4     0C 4E 05 F1 | 	add	fp, #12
103f8     A7 12 02 FB | 	rdlong	arg01, fp
103fc     0C 4E 85 F1 | 	sub	fp, #12
10400     98 AF B0 FD | 	call	#__system___float_fromuns
10404     FD 14 02 F6 | 	mov	arg02, result1
10408     10 13 02 F6 | 	mov	arg01, local02
1040c     01 16 06 F6 | 	mov	arg03, #1
10410     C0 B7 B0 FD | 	call	#__system___float_cmp
10414     01 FA 55 F2 | 	cmps	result1, #1 wc
10418     00 1E 26 C6 |  if_b	not	local01, #0
1041c     A7 1E 62 FC | 	wrlong	local01, fp
10420     F8 02 90 FD | 	jmp	#LR__1283
10424                 | LR__1273
10424                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
10424     08 4E 05 F1 | 	add	fp, #8
10428     A7 1E 02 FB | 	rdlong	local01, fp
1042c     08 4E 85 F1 | 	sub	fp, #8
10430     1C 1E 0E F2 | 	cmp	local01, #28 wz
10434     14 4E 05 A1 |  if_e	add	fp, #20
10438     A7 24 02 AB |  if_e	rdlong	local04, fp
1043c     14 4E 85 A1 |  if_e	sub	fp, #20
10440     12 23 02 A6 |  if_e	mov	local03, local04
10444     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10448     44 00 90 5D |  if_ne	jmp	#LR__1274
1044c     00 1E 06 F6 | 	mov	local01, #0
10450     A7 12 02 FB | 	rdlong	arg01, fp
10454     09 13 52 F6 | 	abs	arg01, arg01 wc
10458     1F 26 C6 C9 |  if_b	decod	local05, #31
1045c     00 26 06 36 |  if_ae	mov	local05, #0
10460     38 AF B0 FD | 	call	#__system___float_fromuns
10464     13 FB 61 F5 | 	xor	result1, local05
10468     FD 12 02 F6 | 	mov	arg01, result1
1046c     0C 4E 05 F1 | 	add	fp, #12
10470     A7 14 02 FB | 	rdlong	arg02, fp
10474     0C 4E 85 F1 | 	sub	fp, #12
10478     01 16 06 F6 | 	mov	arg03, #1
1047c     54 B7 B0 FD | 	call	#__system___float_cmp
10480     01 FA 55 F2 | 	cmps	result1, #1 wc
10484     00 1E 26 C6 |  if_b	not	local01, #0
10488     A7 1E 62 FC | 	wrlong	local01, fp
1048c     8C 02 90 FD | 	jmp	#LR__1283
10490                 | LR__1274
10490                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
10490     08 4E 05 F1 | 	add	fp, #8
10494     A7 1E 02 FB | 	rdlong	local01, fp
10498     08 4E 85 F1 | 	sub	fp, #8
1049c     1C 1E 0E F2 | 	cmp	local01, #28 wz
104a0     14 4E 05 A1 |  if_e	add	fp, #20
104a4     A7 24 02 AB |  if_e	rdlong	local04, fp
104a8     14 4E 85 A1 |  if_e	sub	fp, #20
104ac     12 23 02 A6 |  if_e	mov	local03, local04
104b0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
104b4     24 00 90 5D |  if_ne	jmp	#LR__1275
104b8     00 1E 06 F6 | 	mov	local01, #0
104bc     A7 20 02 FB | 	rdlong	local02, fp
104c0     0C 4E 05 F1 | 	add	fp, #12
104c4     A7 22 02 FB | 	rdlong	local03, fp
104c8     0C 4E 85 F1 | 	sub	fp, #12
104cc     11 21 5A F2 | 	cmps	local02, local03 wcz
104d0     01 1E 66 E6 |  if_be	neg	local01, #1
104d4     A7 1E 62 FC | 	wrlong	local01, fp
104d8     40 02 90 FD | 	jmp	#LR__1283
104dc                 | LR__1275
104dc                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
104dc     08 4E 05 F1 | 	add	fp, #8
104e0     A7 1E 02 FB | 	rdlong	local01, fp
104e4     08 4E 85 F1 | 	sub	fp, #8
104e8     1C 1E 0E F2 | 	cmp	local01, #28 wz
104ec     14 4E 05 A1 |  if_e	add	fp, #20
104f0     A7 24 02 AB |  if_e	rdlong	local04, fp
104f4     14 4E 85 A1 |  if_e	sub	fp, #20
104f8     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
104fc     24 00 90 5D |  if_ne	jmp	#LR__1276
10500     00 1E 06 F6 | 	mov	local01, #0
10504     A7 20 02 FB | 	rdlong	local02, fp
10508     0C 4E 05 F1 | 	add	fp, #12
1050c     A7 22 02 FB | 	rdlong	local03, fp
10510     0C 4E 85 F1 | 	sub	fp, #12
10514     11 21 5A F2 | 	cmps	local02, local03 wcz
10518     01 1E 66 E6 |  if_be	neg	local01, #1
1051c     A7 1E 62 FC | 	wrlong	local01, fp
10520     F8 01 90 FD | 	jmp	#LR__1283
10524                 | LR__1276
10524                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
10524     08 4E 05 F1 | 	add	fp, #8
10528     A7 1E 02 FB | 	rdlong	local01, fp
1052c     08 4E 85 F1 | 	sub	fp, #8
10530     1D 1E 0E F2 | 	cmp	local01, #29 wz
10534     14 4E 05 A1 |  if_e	add	fp, #20
10538     A7 22 02 AB |  if_e	rdlong	local03, fp
1053c     14 4E 85 A1 |  if_e	sub	fp, #20
10540     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10544     34 00 90 5D |  if_ne	jmp	#LR__1277
10548     00 1E 06 F6 | 	mov	local01, #0
1054c     A7 12 02 FB | 	rdlong	arg01, fp
10550     48 AE B0 FD | 	call	#__system___float_fromuns
10554     FD 12 02 F6 | 	mov	arg01, result1
10558     0C 4E 05 F1 | 	add	fp, #12
1055c     A7 14 02 FB | 	rdlong	arg02, fp
10560     0C 4E 85 F1 | 	sub	fp, #12
10564     01 16 06 F6 | 	mov	arg03, #1
10568     68 B6 B0 FD | 	call	#__system___float_cmp
1056c     01 FA 55 F2 | 	cmps	result1, #1 wc
10570     00 1E 26 C6 |  if_b	not	local01, #0
10574     A7 1E 62 FC | 	wrlong	local01, fp
10578     A0 01 90 FD | 	jmp	#LR__1283
1057c                 | LR__1277
1057c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
1057c     08 4E 05 F1 | 	add	fp, #8
10580     A7 1E 02 FB | 	rdlong	local01, fp
10584     08 4E 85 F1 | 	sub	fp, #8
10588     1D 1E 0E F2 | 	cmp	local01, #29 wz
1058c     14 4E 05 A1 |  if_e	add	fp, #20
10590     A7 22 02 AB |  if_e	rdlong	local03, fp
10594     14 4E 85 A1 |  if_e	sub	fp, #20
10598     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1059c     24 00 90 5D |  if_ne	jmp	#LR__1278
105a0     00 1E 06 F6 | 	mov	local01, #0
105a4     A7 20 02 FB | 	rdlong	local02, fp
105a8     0C 4E 05 F1 | 	add	fp, #12
105ac     A7 22 02 FB | 	rdlong	local03, fp
105b0     0C 4E 85 F1 | 	sub	fp, #12
105b4     11 21 5A F2 | 	cmps	local02, local03 wcz
105b8     01 1E 66 E6 |  if_be	neg	local01, #1
105bc     A7 1E 62 FC | 	wrlong	local01, fp
105c0     58 01 90 FD | 	jmp	#LR__1283
105c4                 | LR__1278
105c4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
105c4     08 4E 05 F1 | 	add	fp, #8
105c8     A7 1E 02 FB | 	rdlong	local01, fp
105cc     08 4E 85 F1 | 	sub	fp, #8
105d0     1D 1E 0E F2 | 	cmp	local01, #29 wz
105d4     14 4E 05 A1 |  if_e	add	fp, #20
105d8     A7 22 02 AB |  if_e	rdlong	local03, fp
105dc     14 4E 85 A1 |  if_e	sub	fp, #20
105e0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
105e4     24 00 90 5D |  if_ne	jmp	#LR__1279
105e8     00 1E 06 F6 | 	mov	local01, #0
105ec     A7 20 02 FB | 	rdlong	local02, fp
105f0     0C 4E 05 F1 | 	add	fp, #12
105f4     A7 22 02 FB | 	rdlong	local03, fp
105f8     0C 4E 85 F1 | 	sub	fp, #12
105fc     11 21 1A F2 | 	cmp	local02, local03 wcz
10600     01 1E 66 E6 |  if_be	neg	local01, #1
10604     A7 1E 62 FC | 	wrlong	local01, fp
10608     10 01 90 FD | 	jmp	#LR__1283
1060c                 | LR__1279
1060c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
1060c     08 4E 05 F1 | 	add	fp, #8
10610     A7 1E 02 FB | 	rdlong	local01, fp
10614     08 4E 85 F1 | 	sub	fp, #8
10618     2B 1E 0E F2 | 	cmp	local01, #43 wz
1061c     14 4E 05 A1 |  if_e	add	fp, #20
10620     A7 22 02 AB |  if_e	rdlong	local03, fp
10624     14 4E 85 A1 |  if_e	sub	fp, #20
10628     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1062c     30 00 90 5D |  if_ne	jmp	#LR__1280
10630     00 1E 06 F6 | 	mov	local01, #0
10634     A7 12 02 FB | 	rdlong	arg01, fp
10638     BC C3 BF FD | 	call	#_convertstring
1063c     FD 12 02 F6 | 	mov	arg01, result1
10640     0C 4E 05 F1 | 	add	fp, #12
10644     A7 14 02 FB | 	rdlong	arg02, fp
10648     0C 4E 85 F1 | 	sub	fp, #12
1064c     8C 86 B0 FD | 	call	#__system___string_cmp
10650     01 FA 55 F2 | 	cmps	result1, #1 wc
10654     00 1E 26 C6 |  if_b	not	local01, #0
10658     A7 1E 62 FC | 	wrlong	local01, fp
1065c     BC 00 90 FD | 	jmp	#LR__1283
10660                 | LR__1280
10660                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
10660     08 4E 05 F1 | 	add	fp, #8
10664     A7 1E 02 FB | 	rdlong	local01, fp
10668     08 4E 85 F1 | 	sub	fp, #8
1066c     1F 1E 0E F2 | 	cmp	local01, #31 wz
10670     14 4E 05 A1 |  if_e	add	fp, #20
10674     A7 22 02 AB |  if_e	rdlong	local03, fp
10678     14 4E 85 A1 |  if_e	sub	fp, #20
1067c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
10680     34 00 90 5D |  if_ne	jmp	#LR__1281
10684     00 1E 06 F6 | 	mov	local01, #0
10688     A7 20 02 FB | 	rdlong	local02, fp
1068c     0C 4E 05 F1 | 	add	fp, #12
10690     A7 12 02 FB | 	rdlong	arg01, fp
10694     0C 4E 85 F1 | 	sub	fp, #12
10698     5C C3 BF FD | 	call	#_convertstring
1069c     FD 14 02 F6 | 	mov	arg02, result1
106a0     10 13 02 F6 | 	mov	arg01, local02
106a4     34 86 B0 FD | 	call	#__system___string_cmp
106a8     01 FA 55 F2 | 	cmps	result1, #1 wc
106ac     00 1E 26 C6 |  if_b	not	local01, #0
106b0     A7 1E 62 FC | 	wrlong	local01, fp
106b4     64 00 90 FD | 	jmp	#LR__1283
106b8                 | LR__1281
106b8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
106b8     08 4E 05 F1 | 	add	fp, #8
106bc     A7 1E 02 FB | 	rdlong	local01, fp
106c0     08 4E 85 F1 | 	sub	fp, #8
106c4     2B 1E 0E F2 | 	cmp	local01, #43 wz
106c8     14 4E 05 A1 |  if_e	add	fp, #20
106cc     A7 22 02 AB |  if_e	rdlong	local03, fp
106d0     14 4E 85 A1 |  if_e	sub	fp, #20
106d4     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
106d8     3C 00 90 5D |  if_ne	jmp	#LR__1282
106dc     00 1E 06 F6 | 	mov	local01, #0
106e0     A7 12 02 FB | 	rdlong	arg01, fp
106e4     10 C3 BF FD | 	call	#_convertstring
106e8     FD 20 02 F6 | 	mov	local02, result1
106ec     0C 4E 05 F1 | 	add	fp, #12
106f0     A7 12 02 FB | 	rdlong	arg01, fp
106f4     0C 4E 85 F1 | 	sub	fp, #12
106f8     FC C2 BF FD | 	call	#_convertstring
106fc     FD 14 02 F6 | 	mov	arg02, result1
10700     10 13 02 F6 | 	mov	arg01, local02
10704     D4 85 B0 FD | 	call	#__system___string_cmp
10708     01 FA 55 F2 | 	cmps	result1, #1 wc
1070c     00 1E 26 C6 |  if_b	not	local01, #0
10710     A7 1E 62 FC | 	wrlong	local01, fp
10714     04 00 90 FD | 	jmp	#LR__1283
10718                 | LR__1282
10718     A7 00 68 FC | 	wrlong	#0, fp
1071c                 | LR__1283
1071c     08 4E 05 F1 | 	add	fp, #8
10720     A7 38 68 FC | 	wrlong	#28, fp
10724     08 4E 85 F1 | 	sub	fp, #8
10728     A7 12 02 F6 | 	mov	arg01, fp
1072c     24 92 BF FD | 	call	#_push
10730     A7 F0 03 F6 | 	mov	ptra, fp
10734     B2 00 A0 FD | 	call	#popregs_
10738                 | _do_le_ret
10738     2D 00 64 FD | 	ret
1073c                 | 
1073c                 | ' 
1073c                 | ' 
1073c                 | ' sub do_ne
1073c                 | _do_ne
1073c     05 4A 05 F6 | 	mov	COUNT_, #5
10740     A8 00 A0 FD | 	call	#pushregs_
10744     18 F0 07 F1 | 	add	ptra, #24
10748     70 91 BF FD | 	call	#_pop
1074c     FD 1E 02 F6 | 	mov	local01, result1
10750     FE 20 02 F6 | 	mov	local02, result2
10754     FF 22 02 F6 | 	mov	local03, result3
10758     0C 4E 05 F1 | 	add	fp, #12
1075c     A7 1E 62 FC | 	wrlong	local01, fp
10760     04 4E 05 F1 | 	add	fp, #4
10764     A7 20 62 FC | 	wrlong	local02, fp
10768     04 4E 05 F1 | 	add	fp, #4
1076c     A7 22 62 FC | 	wrlong	local03, fp
10770     14 4E 85 F1 | 	sub	fp, #20
10774     44 91 BF FD | 	call	#_pop
10778     FF 22 02 F6 | 	mov	local03, result3
1077c     A7 FA 61 FC | 	wrlong	result1, fp
10780     04 4E 05 F1 | 	add	fp, #4
10784     A7 FC 61 FC | 	wrlong	result2, fp
10788     04 4E 05 F1 | 	add	fp, #4
1078c     A7 22 62 FC | 	wrlong	local03, fp
10790                 | ' t2=pop()
10790                 | ' t1=pop()
10790                 | ' 
10790                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
10790     08 4E 85 F1 | 	sub	fp, #8
10794     1F 22 0E F2 | 	cmp	local03, #31 wz
10798     14 4E 05 A1 |  if_e	add	fp, #20
1079c     A7 24 02 AB |  if_e	rdlong	local04, fp
107a0     14 4E 85 A1 |  if_e	sub	fp, #20
107a4     12 23 02 A6 |  if_e	mov	local03, local04
107a8     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
107ac     28 00 90 5D |  if_ne	jmp	#LR__1290
107b0     00 1E 06 F6 | 	mov	local01, #0
107b4     A7 12 02 FB | 	rdlong	arg01, fp
107b8     0C 4E 05 F1 | 	add	fp, #12
107bc     A7 14 02 FB | 	rdlong	arg02, fp
107c0     0C 4E 85 F1 | 	sub	fp, #12
107c4     14 85 B0 FD | 	call	#__system___string_cmp
107c8     00 FA 0D F2 | 	cmp	result1, #0 wz
107cc     00 1E 26 56 |  if_ne	not	local01, #0
107d0     A7 1E 62 FC | 	wrlong	local01, fp
107d4     1C 04 90 FD | 	jmp	#LR__1303
107d8                 | LR__1290
107d8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
107d8     08 4E 05 F1 | 	add	fp, #8
107dc     A7 1E 02 FB | 	rdlong	local01, fp
107e0     08 4E 85 F1 | 	sub	fp, #8
107e4     1E 1E 0E F2 | 	cmp	local01, #30 wz
107e8     14 4E 05 A1 |  if_e	add	fp, #20
107ec     A7 24 02 AB |  if_e	rdlong	local04, fp
107f0     14 4E 85 A1 |  if_e	sub	fp, #20
107f4     12 23 02 A6 |  if_e	mov	local03, local04
107f8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
107fc     2C 00 90 5D |  if_ne	jmp	#LR__1291
10800     00 1E 06 F6 | 	mov	local01, #0
10804     A7 12 02 FB | 	rdlong	arg01, fp
10808     0C 4E 05 F1 | 	add	fp, #12
1080c     A7 14 02 FB | 	rdlong	arg02, fp
10810     0C 4E 85 F1 | 	sub	fp, #12
10814     01 16 06 F6 | 	mov	arg03, #1
10818     B8 B3 B0 FD | 	call	#__system___float_cmp
1081c     00 FA 0D F2 | 	cmp	result1, #0 wz
10820     00 1E 26 56 |  if_ne	not	local01, #0
10824     A7 1E 62 FC | 	wrlong	local01, fp
10828     C8 03 90 FD | 	jmp	#LR__1303
1082c                 | LR__1291
1082c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
1082c     08 4E 05 F1 | 	add	fp, #8
10830     A7 1E 02 FB | 	rdlong	local01, fp
10834     08 4E 85 F1 | 	sub	fp, #8
10838     1E 1E 0E F2 | 	cmp	local01, #30 wz
1083c     14 4E 05 A1 |  if_e	add	fp, #20
10840     A7 24 02 AB |  if_e	rdlong	local04, fp
10844     14 4E 85 A1 |  if_e	sub	fp, #20
10848     12 23 02 A6 |  if_e	mov	local03, local04
1084c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10850     48 00 90 5D |  if_ne	jmp	#LR__1292
10854     00 1E 06 F6 | 	mov	local01, #0
10858     A7 20 02 FB | 	rdlong	local02, fp
1085c     0C 4E 05 F1 | 	add	fp, #12
10860     A7 12 02 FB | 	rdlong	arg01, fp
10864     0C 4E 85 F1 | 	sub	fp, #12
10868     09 13 52 F6 | 	abs	arg01, arg01 wc
1086c     1F 26 C6 C9 |  if_b	decod	local05, #31
10870     00 26 06 36 |  if_ae	mov	local05, #0
10874     24 AB B0 FD | 	call	#__system___float_fromuns
10878     13 FB 61 F5 | 	xor	result1, local05
1087c     FD 14 02 F6 | 	mov	arg02, result1
10880     10 13 02 F6 | 	mov	arg01, local02
10884     01 16 06 F6 | 	mov	arg03, #1
10888     48 B3 B0 FD | 	call	#__system___float_cmp
1088c     00 FA 0D F2 | 	cmp	result1, #0 wz
10890     00 1E 26 56 |  if_ne	not	local01, #0
10894     A7 1E 62 FC | 	wrlong	local01, fp
10898     58 03 90 FD | 	jmp	#LR__1303
1089c                 | LR__1292
1089c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
1089c     08 4E 05 F1 | 	add	fp, #8
108a0     A7 1E 02 FB | 	rdlong	local01, fp
108a4     08 4E 85 F1 | 	sub	fp, #8
108a8     1E 1E 0E F2 | 	cmp	local01, #30 wz
108ac     14 4E 05 A1 |  if_e	add	fp, #20
108b0     A7 24 02 AB |  if_e	rdlong	local04, fp
108b4     14 4E 85 A1 |  if_e	sub	fp, #20
108b8     12 23 02 A6 |  if_e	mov	local03, local04
108bc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
108c0     38 00 90 5D |  if_ne	jmp	#LR__1293
108c4     00 1E 06 F6 | 	mov	local01, #0
108c8     A7 20 02 FB | 	rdlong	local02, fp
108cc     0C 4E 05 F1 | 	add	fp, #12
108d0     A7 12 02 FB | 	rdlong	arg01, fp
108d4     0C 4E 85 F1 | 	sub	fp, #12
108d8     C0 AA B0 FD | 	call	#__system___float_fromuns
108dc     FD 14 02 F6 | 	mov	arg02, result1
108e0     10 13 02 F6 | 	mov	arg01, local02
108e4     01 16 06 F6 | 	mov	arg03, #1
108e8     E8 B2 B0 FD | 	call	#__system___float_cmp
108ec     00 FA 0D F2 | 	cmp	result1, #0 wz
108f0     00 1E 26 56 |  if_ne	not	local01, #0
108f4     A7 1E 62 FC | 	wrlong	local01, fp
108f8     F8 02 90 FD | 	jmp	#LR__1303
108fc                 | LR__1293
108fc                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
108fc     08 4E 05 F1 | 	add	fp, #8
10900     A7 1E 02 FB | 	rdlong	local01, fp
10904     08 4E 85 F1 | 	sub	fp, #8
10908     1C 1E 0E F2 | 	cmp	local01, #28 wz
1090c     14 4E 05 A1 |  if_e	add	fp, #20
10910     A7 24 02 AB |  if_e	rdlong	local04, fp
10914     14 4E 85 A1 |  if_e	sub	fp, #20
10918     12 23 02 A6 |  if_e	mov	local03, local04
1091c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10920     44 00 90 5D |  if_ne	jmp	#LR__1294
10924     00 1E 06 F6 | 	mov	local01, #0
10928     A7 12 02 FB | 	rdlong	arg01, fp
1092c     09 13 52 F6 | 	abs	arg01, arg01 wc
10930     1F 26 C6 C9 |  if_b	decod	local05, #31
10934     00 26 06 36 |  if_ae	mov	local05, #0
10938     60 AA B0 FD | 	call	#__system___float_fromuns
1093c     13 FB 61 F5 | 	xor	result1, local05
10940     FD 12 02 F6 | 	mov	arg01, result1
10944     0C 4E 05 F1 | 	add	fp, #12
10948     A7 14 02 FB | 	rdlong	arg02, fp
1094c     0C 4E 85 F1 | 	sub	fp, #12
10950     01 16 06 F6 | 	mov	arg03, #1
10954     7C B2 B0 FD | 	call	#__system___float_cmp
10958     00 FA 0D F2 | 	cmp	result1, #0 wz
1095c     00 1E 26 56 |  if_ne	not	local01, #0
10960     A7 1E 62 FC | 	wrlong	local01, fp
10964     8C 02 90 FD | 	jmp	#LR__1303
10968                 | LR__1294
10968                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
10968     08 4E 05 F1 | 	add	fp, #8
1096c     A7 1E 02 FB | 	rdlong	local01, fp
10970     08 4E 85 F1 | 	sub	fp, #8
10974     1C 1E 0E F2 | 	cmp	local01, #28 wz
10978     14 4E 05 A1 |  if_e	add	fp, #20
1097c     A7 24 02 AB |  if_e	rdlong	local04, fp
10980     14 4E 85 A1 |  if_e	sub	fp, #20
10984     12 23 02 A6 |  if_e	mov	local03, local04
10988     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1098c     24 00 90 5D |  if_ne	jmp	#LR__1295
10990     00 1E 06 F6 | 	mov	local01, #0
10994     A7 20 02 FB | 	rdlong	local02, fp
10998     0C 4E 05 F1 | 	add	fp, #12
1099c     A7 22 02 FB | 	rdlong	local03, fp
109a0     0C 4E 85 F1 | 	sub	fp, #12
109a4     11 21 0A F2 | 	cmp	local02, local03 wz
109a8     01 1E 66 56 |  if_ne	neg	local01, #1
109ac     A7 1E 62 FC | 	wrlong	local01, fp
109b0     40 02 90 FD | 	jmp	#LR__1303
109b4                 | LR__1295
109b4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
109b4     08 4E 05 F1 | 	add	fp, #8
109b8     A7 1E 02 FB | 	rdlong	local01, fp
109bc     08 4E 85 F1 | 	sub	fp, #8
109c0     1C 1E 0E F2 | 	cmp	local01, #28 wz
109c4     14 4E 05 A1 |  if_e	add	fp, #20
109c8     A7 24 02 AB |  if_e	rdlong	local04, fp
109cc     14 4E 85 A1 |  if_e	sub	fp, #20
109d0     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
109d4     24 00 90 5D |  if_ne	jmp	#LR__1296
109d8     00 1E 06 F6 | 	mov	local01, #0
109dc     A7 20 02 FB | 	rdlong	local02, fp
109e0     0C 4E 05 F1 | 	add	fp, #12
109e4     A7 22 02 FB | 	rdlong	local03, fp
109e8     0C 4E 85 F1 | 	sub	fp, #12
109ec     11 21 0A F2 | 	cmp	local02, local03 wz
109f0     01 1E 66 56 |  if_ne	neg	local01, #1
109f4     A7 1E 62 FC | 	wrlong	local01, fp
109f8     F8 01 90 FD | 	jmp	#LR__1303
109fc                 | LR__1296
109fc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
109fc     08 4E 05 F1 | 	add	fp, #8
10a00     A7 1E 02 FB | 	rdlong	local01, fp
10a04     08 4E 85 F1 | 	sub	fp, #8
10a08     1D 1E 0E F2 | 	cmp	local01, #29 wz
10a0c     14 4E 05 A1 |  if_e	add	fp, #20
10a10     A7 22 02 AB |  if_e	rdlong	local03, fp
10a14     14 4E 85 A1 |  if_e	sub	fp, #20
10a18     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10a1c     34 00 90 5D |  if_ne	jmp	#LR__1297
10a20     00 1E 06 F6 | 	mov	local01, #0
10a24     A7 12 02 FB | 	rdlong	arg01, fp
10a28     70 A9 B0 FD | 	call	#__system___float_fromuns
10a2c     FD 12 02 F6 | 	mov	arg01, result1
10a30     0C 4E 05 F1 | 	add	fp, #12
10a34     A7 14 02 FB | 	rdlong	arg02, fp
10a38     0C 4E 85 F1 | 	sub	fp, #12
10a3c     01 16 06 F6 | 	mov	arg03, #1
10a40     90 B1 B0 FD | 	call	#__system___float_cmp
10a44     00 FA 0D F2 | 	cmp	result1, #0 wz
10a48     00 1E 26 56 |  if_ne	not	local01, #0
10a4c     A7 1E 62 FC | 	wrlong	local01, fp
10a50     A0 01 90 FD | 	jmp	#LR__1303
10a54                 | LR__1297
10a54                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
10a54     08 4E 05 F1 | 	add	fp, #8
10a58     A7 1E 02 FB | 	rdlong	local01, fp
10a5c     08 4E 85 F1 | 	sub	fp, #8
10a60     1D 1E 0E F2 | 	cmp	local01, #29 wz
10a64     14 4E 05 A1 |  if_e	add	fp, #20
10a68     A7 22 02 AB |  if_e	rdlong	local03, fp
10a6c     14 4E 85 A1 |  if_e	sub	fp, #20
10a70     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10a74     24 00 90 5D |  if_ne	jmp	#LR__1298
10a78     00 1E 06 F6 | 	mov	local01, #0
10a7c     A7 20 02 FB | 	rdlong	local02, fp
10a80     0C 4E 05 F1 | 	add	fp, #12
10a84     A7 22 02 FB | 	rdlong	local03, fp
10a88     0C 4E 85 F1 | 	sub	fp, #12
10a8c     11 21 0A F2 | 	cmp	local02, local03 wz
10a90     01 1E 66 56 |  if_ne	neg	local01, #1
10a94     A7 1E 62 FC | 	wrlong	local01, fp
10a98     58 01 90 FD | 	jmp	#LR__1303
10a9c                 | LR__1298
10a9c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
10a9c     08 4E 05 F1 | 	add	fp, #8
10aa0     A7 1E 02 FB | 	rdlong	local01, fp
10aa4     08 4E 85 F1 | 	sub	fp, #8
10aa8     1D 1E 0E F2 | 	cmp	local01, #29 wz
10aac     14 4E 05 A1 |  if_e	add	fp, #20
10ab0     A7 22 02 AB |  if_e	rdlong	local03, fp
10ab4     14 4E 85 A1 |  if_e	sub	fp, #20
10ab8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10abc     24 00 90 5D |  if_ne	jmp	#LR__1299
10ac0     00 1E 06 F6 | 	mov	local01, #0
10ac4     A7 20 02 FB | 	rdlong	local02, fp
10ac8     0C 4E 05 F1 | 	add	fp, #12
10acc     A7 22 02 FB | 	rdlong	local03, fp
10ad0     0C 4E 85 F1 | 	sub	fp, #12
10ad4     11 21 0A F2 | 	cmp	local02, local03 wz
10ad8     01 1E 66 56 |  if_ne	neg	local01, #1
10adc     A7 1E 62 FC | 	wrlong	local01, fp
10ae0     10 01 90 FD | 	jmp	#LR__1303
10ae4                 | LR__1299
10ae4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
10ae4     08 4E 05 F1 | 	add	fp, #8
10ae8     A7 1E 02 FB | 	rdlong	local01, fp
10aec     08 4E 85 F1 | 	sub	fp, #8
10af0     2B 1E 0E F2 | 	cmp	local01, #43 wz
10af4     14 4E 05 A1 |  if_e	add	fp, #20
10af8     A7 22 02 AB |  if_e	rdlong	local03, fp
10afc     14 4E 85 A1 |  if_e	sub	fp, #20
10b00     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
10b04     30 00 90 5D |  if_ne	jmp	#LR__1300
10b08     00 1E 06 F6 | 	mov	local01, #0
10b0c     A7 12 02 FB | 	rdlong	arg01, fp
10b10     E4 BE BF FD | 	call	#_convertstring
10b14     FD 12 02 F6 | 	mov	arg01, result1
10b18     0C 4E 05 F1 | 	add	fp, #12
10b1c     A7 14 02 FB | 	rdlong	arg02, fp
10b20     0C 4E 85 F1 | 	sub	fp, #12
10b24     B4 81 B0 FD | 	call	#__system___string_cmp
10b28     00 FA 0D F2 | 	cmp	result1, #0 wz
10b2c     00 1E 26 56 |  if_ne	not	local01, #0
10b30     A7 1E 62 FC | 	wrlong	local01, fp
10b34     BC 00 90 FD | 	jmp	#LR__1303
10b38                 | LR__1300
10b38                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
10b38     08 4E 05 F1 | 	add	fp, #8
10b3c     A7 1E 02 FB | 	rdlong	local01, fp
10b40     08 4E 85 F1 | 	sub	fp, #8
10b44     1F 1E 0E F2 | 	cmp	local01, #31 wz
10b48     14 4E 05 A1 |  if_e	add	fp, #20
10b4c     A7 22 02 AB |  if_e	rdlong	local03, fp
10b50     14 4E 85 A1 |  if_e	sub	fp, #20
10b54     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
10b58     34 00 90 5D |  if_ne	jmp	#LR__1301
10b5c     00 1E 06 F6 | 	mov	local01, #0
10b60     A7 20 02 FB | 	rdlong	local02, fp
10b64     0C 4E 05 F1 | 	add	fp, #12
10b68     A7 12 02 FB | 	rdlong	arg01, fp
10b6c     0C 4E 85 F1 | 	sub	fp, #12
10b70     84 BE BF FD | 	call	#_convertstring
10b74     FD 14 02 F6 | 	mov	arg02, result1
10b78     10 13 02 F6 | 	mov	arg01, local02
10b7c     5C 81 B0 FD | 	call	#__system___string_cmp
10b80     00 FA 0D F2 | 	cmp	result1, #0 wz
10b84     00 1E 26 56 |  if_ne	not	local01, #0
10b88     A7 1E 62 FC | 	wrlong	local01, fp
10b8c     64 00 90 FD | 	jmp	#LR__1303
10b90                 | LR__1301
10b90                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
10b90     08 4E 05 F1 | 	add	fp, #8
10b94     A7 1E 02 FB | 	rdlong	local01, fp
10b98     08 4E 85 F1 | 	sub	fp, #8
10b9c     2B 1E 0E F2 | 	cmp	local01, #43 wz
10ba0     14 4E 05 A1 |  if_e	add	fp, #20
10ba4     A7 22 02 AB |  if_e	rdlong	local03, fp
10ba8     14 4E 85 A1 |  if_e	sub	fp, #20
10bac     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
10bb0     3C 00 90 5D |  if_ne	jmp	#LR__1302
10bb4     00 1E 06 F6 | 	mov	local01, #0
10bb8     A7 12 02 FB | 	rdlong	arg01, fp
10bbc     38 BE BF FD | 	call	#_convertstring
10bc0     FD 20 02 F6 | 	mov	local02, result1
10bc4     0C 4E 05 F1 | 	add	fp, #12
10bc8     A7 12 02 FB | 	rdlong	arg01, fp
10bcc     0C 4E 85 F1 | 	sub	fp, #12
10bd0     24 BE BF FD | 	call	#_convertstring
10bd4     FD 14 02 F6 | 	mov	arg02, result1
10bd8     10 13 02 F6 | 	mov	arg01, local02
10bdc     FC 80 B0 FD | 	call	#__system___string_cmp
10be0     00 FA 0D F2 | 	cmp	result1, #0 wz
10be4     00 1E 26 56 |  if_ne	not	local01, #0
10be8     A7 1E 62 FC | 	wrlong	local01, fp
10bec     04 00 90 FD | 	jmp	#LR__1303
10bf0                 | LR__1302
10bf0     A7 00 68 FC | 	wrlong	#0, fp
10bf4                 | LR__1303
10bf4     08 4E 05 F1 | 	add	fp, #8
10bf8     A7 38 68 FC | 	wrlong	#28, fp
10bfc     08 4E 85 F1 | 	sub	fp, #8
10c00     A7 12 02 F6 | 	mov	arg01, fp
10c04     4C 8D BF FD | 	call	#_push
10c08     A7 F0 03 F6 | 	mov	ptra, fp
10c0c     B2 00 A0 FD | 	call	#popregs_
10c10                 | _do_ne_ret
10c10     2D 00 64 FD | 	ret
10c14                 | 
10c14                 | ' 
10c14                 | ' 
10c14                 | ' 
10c14                 | ' ' -------------------   convert a variable on the top of stack to integer
10c14                 | ' 
10c14                 | ' sub do_converttoint
10c14                 | _do_converttoint
10c14     02 4A 05 F6 | 	mov	COUNT_, #2
10c18     A8 00 A0 FD | 	call	#pushregs_
10c1c     18 F0 07 F1 | 	add	ptra, #24
10c20     98 8C BF FD | 	call	#_pop
10c24     FE 1E 02 F6 | 	mov	local01, result2
10c28     FF 20 02 F6 | 	mov	local02, result3
10c2c     A7 FA 61 FC | 	wrlong	result1, fp
10c30     04 4E 05 F1 | 	add	fp, #4
10c34     A7 1E 62 FC | 	wrlong	local01, fp
10c38     04 4E 05 F1 | 	add	fp, #4
10c3c     A7 20 62 FC | 	wrlong	local02, fp
10c40                 | ' t1=pop() 
10c40                 | ' select case t1.result_type
10c40     08 4E 85 F1 | 	sub	fp, #8
10c44     1C 20 0E F2 | 	cmp	local02, #28 wz
10c48     2C 00 90 AD |  if_e	jmp	#LR__1310
10c4c     1D 20 0E F2 | 	cmp	local02, #29 wz
10c50     40 00 90 AD |  if_e	jmp	#LR__1311
10c54     1E 20 0E F2 | 	cmp	local02, #30 wz
10c58     54 00 90 AD |  if_e	jmp	#LR__1312
10c5c     1F 20 0E F2 | 	cmp	local02, #31 wz
10c60     70 00 90 AD |  if_e	jmp	#LR__1313
10c64     2B 20 0E F2 | 	cmp	local02, #43 wz
10c68     94 00 90 AD |  if_e	jmp	#LR__1314
10c6c     FF 20 0E F2 | 	cmp	local02, #255 wz
10c70     C0 00 90 AD |  if_e	jmp	#LR__1315
10c74     DC 00 90 FD | 	jmp	#LR__1316
10c78                 | LR__1310
10c78     A7 20 02 FB | 	rdlong	local02, fp
10c7c     0C 4E 05 F1 | 	add	fp, #12
10c80     A7 20 62 FC | 	wrlong	local02, fp
10c84     04 4E 05 F1 | 	add	fp, #4
10c88     A7 38 68 FC | 	wrlong	#28, fp
10c8c     10 4E 85 F1 | 	sub	fp, #16
10c90     D4 00 90 FD | 	jmp	#LR__1317
10c94                 | LR__1311
10c94     A7 20 02 FB | 	rdlong	local02, fp
10c98     0C 4E 05 F1 | 	add	fp, #12
10c9c     A7 20 62 FC | 	wrlong	local02, fp
10ca0     04 4E 05 F1 | 	add	fp, #4
10ca4     A7 38 68 FC | 	wrlong	#28, fp
10ca8     10 4E 85 F1 | 	sub	fp, #16
10cac     B8 00 90 FD | 	jmp	#LR__1317
10cb0                 | LR__1312
10cb0     A7 12 02 FB | 	rdlong	arg01, fp
10cb4     01 14 06 F6 | 	mov	arg02, #1
10cb8     AC AF B0 FD | 	call	#__system___float_tointeger
10cbc     0C 4E 05 F1 | 	add	fp, #12
10cc0     A7 FA 61 FC | 	wrlong	result1, fp
10cc4     04 4E 05 F1 | 	add	fp, #4
10cc8     A7 38 68 FC | 	wrlong	#28, fp
10ccc     10 4E 85 F1 | 	sub	fp, #16
10cd0     94 00 90 FD | 	jmp	#LR__1317
10cd4                 | LR__1313
10cd4     A7 12 02 FB | 	rdlong	arg01, fp
10cd8     AC B2 B0 FD | 	call	#__system____builtin_atof
10cdc     FD 12 02 F6 | 	mov	arg01, result1
10ce0     00 14 06 F6 | 	mov	arg02, #0
10ce4     80 AF B0 FD | 	call	#__system___float_tointeger
10ce8     0C 4E 05 F1 | 	add	fp, #12
10cec     A7 FA 61 FC | 	wrlong	result1, fp
10cf0     04 4E 05 F1 | 	add	fp, #4
10cf4     A7 38 68 FC | 	wrlong	#28, fp
10cf8     10 4E 85 F1 | 	sub	fp, #16
10cfc     68 00 90 FD | 	jmp	#LR__1317
10d00                 | LR__1314
10d00     A7 12 02 FB | 	rdlong	arg01, fp
10d04     F0 BC BF FD | 	call	#_convertstring
10d08     FD 12 02 F6 | 	mov	arg01, result1
10d0c     78 B2 B0 FD | 	call	#__system____builtin_atof
10d10     FD 12 02 F6 | 	mov	arg01, result1
10d14     00 14 06 F6 | 	mov	arg02, #0
10d18     4C AF B0 FD | 	call	#__system___float_tointeger
10d1c     0C 4E 05 F1 | 	add	fp, #12
10d20     A7 FA 61 FC | 	wrlong	result1, fp
10d24     04 4E 05 F1 | 	add	fp, #4
10d28     A7 38 68 FC | 	wrlong	#28, fp
10d2c     10 4E 85 F1 | 	sub	fp, #16
10d30     34 00 90 FD | 	jmp	#LR__1317
10d34                 | LR__1315
10d34     0C 4E 05 F1 | 	add	fp, #12
10d38     A7 00 68 FC | 	wrlong	#0, fp
10d3c     0C 4E 85 F1 | 	sub	fp, #12
10d40     A7 20 02 FB | 	rdlong	local02, fp
10d44     10 4E 05 F1 | 	add	fp, #16
10d48     A7 20 62 FC | 	wrlong	local02, fp
10d4c     10 4E 85 F1 | 	sub	fp, #16
10d50     14 00 90 FD | 	jmp	#LR__1317
10d54                 | LR__1316
10d54     0C 4E 05 F1 | 	add	fp, #12
10d58     A7 00 68 FC | 	wrlong	#0, fp
10d5c     04 4E 05 F1 | 	add	fp, #4
10d60     A7 02 68 FC | 	wrlong	#1, fp
10d64     10 4E 85 F1 | 	sub	fp, #16
10d68                 | LR__1317
10d68     0C 4E 05 F1 | 	add	fp, #12
10d6c     A7 20 02 FB | 	rdlong	local02, fp
10d70     0C 4E 85 F1 | 	sub	fp, #12
10d74     A7 20 62 FC | 	wrlong	local02, fp
10d78     10 4E 05 F1 | 	add	fp, #16
10d7c     A7 20 02 FB | 	rdlong	local02, fp
10d80     08 4E 85 F1 | 	sub	fp, #8
10d84     A7 20 62 FC | 	wrlong	local02, fp
10d88     08 4E 85 F1 | 	sub	fp, #8
10d8c     A7 12 02 F6 | 	mov	arg01, fp
10d90     C0 8B BF FD | 	call	#_push
10d94     A7 F0 03 F6 | 	mov	ptra, fp
10d98     B2 00 A0 FD | 	call	#popregs_
10d9c                 | _do_converttoint_ret
10d9c     2D 00 64 FD | 	ret
10da0                 | 
10da0                 | ' 
10da0                 | ' function converttoint (t1 as expr_result) as integer
10da0                 | _converttoint
10da0     02 4A 05 F6 | 	mov	COUNT_, #2
10da4     A8 00 A0 FD | 	call	#pushregs_
10da8     09 1F 02 F6 | 	mov	local01, arg01
10dac                 | ' 
10dac                 | ' select case t1.result_type
10dac     08 1E 06 F1 | 	add	local01, #8
10db0     0F 21 02 FB | 	rdlong	local02, local01
10db4     08 1E 86 F1 | 	sub	local01, #8
10db8     1C 20 0E F2 | 	cmp	local02, #28 wz
10dbc     24 00 90 AD |  if_e	jmp	#LR__1320
10dc0     1D 20 0E F2 | 	cmp	local02, #29 wz
10dc4     24 00 90 AD |  if_e	jmp	#LR__1321
10dc8     1E 20 0E F2 | 	cmp	local02, #30 wz
10dcc     24 00 90 AD |  if_e	jmp	#LR__1322
10dd0     1F 20 0E F2 | 	cmp	local02, #31 wz
10dd4     2C 00 90 AD |  if_e	jmp	#LR__1323
10dd8     2B 20 0E F2 | 	cmp	local02, #43 wz
10ddc     3C 00 90 AD |  if_e	jmp	#LR__1324
10de0     58 00 90 FD | 	jmp	#LR__1325
10de4                 | LR__1320
10de4     0F FB 01 FB | 	rdlong	result1, local01
10de8     54 00 90 FD | 	jmp	#LR__1326
10dec                 | LR__1321
10dec     0F FB 01 FB | 	rdlong	result1, local01
10df0     4C 00 90 FD | 	jmp	#LR__1326
10df4                 | LR__1322
10df4     0F 13 02 FB | 	rdlong	arg01, local01
10df8     01 14 06 F6 | 	mov	arg02, #1
10dfc     68 AE B0 FD | 	call	#__system___float_tointeger
10e00     3C 00 90 FD | 	jmp	#LR__1326
10e04                 | LR__1323
10e04     0F 13 02 FB | 	rdlong	arg01, local01
10e08     7C B1 B0 FD | 	call	#__system____builtin_atof
10e0c     FD 12 02 F6 | 	mov	arg01, result1
10e10     00 14 06 F6 | 	mov	arg02, #0
10e14     50 AE B0 FD | 	call	#__system___float_tointeger
10e18     24 00 90 FD | 	jmp	#LR__1326
10e1c                 | LR__1324
10e1c     0F 13 02 FB | 	rdlong	arg01, local01
10e20     D4 BB BF FD | 	call	#_convertstring
10e24     FD 12 02 F6 | 	mov	arg01, result1
10e28     5C B1 B0 FD | 	call	#__system____builtin_atof
10e2c     FD 12 02 F6 | 	mov	arg01, result1
10e30     00 14 06 F6 | 	mov	arg02, #0
10e34     30 AE B0 FD | 	call	#__system___float_tointeger
10e38     04 00 90 FD | 	jmp	#LR__1326
10e3c                 | LR__1325
10e3c     00 FA 05 F6 | 	mov	result1, #0
10e40                 | LR__1326
10e40     A7 F0 03 F6 | 	mov	ptra, fp
10e44     B2 00 A0 FD | 	call	#popregs_
10e48                 | _converttoint_ret
10e48     2D 00 64 FD | 	ret
10e4c                 | 
10e4c                 | ' 
10e4c                 | ' function converttofloat (t1 as expr_result) as single
10e4c                 | _converttofloat
10e4c     03 4A 05 F6 | 	mov	COUNT_, #3
10e50     A8 00 A0 FD | 	call	#pushregs_
10e54     09 1F 02 F6 | 	mov	local01, arg01
10e58                 | ' 
10e58                 | ' select case t1.result_type
10e58     08 1E 06 F1 | 	add	local01, #8
10e5c     0F 21 02 FB | 	rdlong	local02, local01
10e60     08 1E 86 F1 | 	sub	local01, #8
10e64     1C 20 0E F2 | 	cmp	local02, #28 wz
10e68     24 00 90 AD |  if_e	jmp	#LR__1330
10e6c     1D 20 0E F2 | 	cmp	local02, #29 wz
10e70     38 00 90 AD |  if_e	jmp	#LR__1331
10e74     1E 20 0E F2 | 	cmp	local02, #30 wz
10e78     3C 00 90 AD |  if_e	jmp	#LR__1332
10e7c     1F 20 0E F2 | 	cmp	local02, #31 wz
10e80     3C 00 90 AD |  if_e	jmp	#LR__1333
10e84     2B 20 0E F2 | 	cmp	local02, #43 wz
10e88     40 00 90 AD |  if_e	jmp	#LR__1334
10e8c     50 00 90 FD | 	jmp	#LR__1335
10e90                 | LR__1330
10e90     0F 13 02 FB | 	rdlong	arg01, local01
10e94     09 13 52 F6 | 	abs	arg01, arg01 wc
10e98     1F 22 C6 C9 |  if_b	decod	local03, #31
10e9c     00 22 06 36 |  if_ae	mov	local03, #0
10ea0     F8 A4 B0 FD | 	call	#__system___float_fromuns
10ea4     11 FB 61 F5 | 	xor	result1, local03
10ea8     38 00 90 FD | 	jmp	#LR__1336
10eac                 | LR__1331
10eac     0F 13 02 FB | 	rdlong	arg01, local01
10eb0     E8 A4 B0 FD | 	call	#__system___float_fromuns
10eb4     2C 00 90 FD | 	jmp	#LR__1336
10eb8                 | LR__1332
10eb8     0F FB 01 FB | 	rdlong	result1, local01
10ebc     24 00 90 FD | 	jmp	#LR__1336
10ec0                 | LR__1333
10ec0     0F 13 02 FB | 	rdlong	arg01, local01
10ec4     C0 B0 B0 FD | 	call	#__system____builtin_atof
10ec8     18 00 90 FD | 	jmp	#LR__1336
10ecc                 | LR__1334
10ecc     0F 13 02 FB | 	rdlong	arg01, local01
10ed0     24 BB BF FD | 	call	#_convertstring
10ed4     FD 12 02 F6 | 	mov	arg01, result1
10ed8     AC B0 B0 FD | 	call	#__system____builtin_atof
10edc     04 00 90 FD | 	jmp	#LR__1336
10ee0                 | LR__1335
10ee0     00 FA 05 F6 | 	mov	result1, #0
10ee4                 | LR__1336
10ee4     A7 F0 03 F6 | 	mov	ptra, fp
10ee8     B2 00 A0 FD | 	call	#popregs_
10eec                 | _converttofloat_ret
10eec     2D 00 64 FD | 	ret
10ef0                 | 
10ef0                 | ' 
10ef0                 | ' sub do_rnd
10ef0                 | _do_rnd
10ef0     01 4A 05 F6 | 	mov	COUNT_, #1
10ef4     A8 00 A0 FD | 	call	#pushregs_
10ef8     10 F0 07 F1 | 	add	ptra, #16
10efc     69 00 00 FF 
10f00     54 E4 05 F1 | 	add	objptr, ##53844
10f04     F2 1E 02 FB | 	rdlong	local01, objptr
10f08     0F 17 02 F6 | 	mov	arg03, local01
10f0c     01 16 66 F0 | 	shl	arg03, #1
10f10     0F 17 02 F1 | 	add	arg03, local01
10f14     02 16 66 F0 | 	shl	arg03, #2
10f18     03 00 00 FF 
10f1c     04 E4 85 F1 | 	sub	objptr, ##1540
10f20     F2 16 02 F1 | 	add	arg03, objptr
10f24     0B 17 02 FB | 	rdlong	arg03, arg03
10f28     0C 4E 05 F1 | 	add	fp, #12
10f2c     A7 16 62 FC | 	wrlong	arg03, fp
10f30                 | ' 
10f30                 | ' numpar=compiledline(lineptr_e).result.uresult
10f30                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
10f30     0C 4E 85 F1 | 	sub	fp, #12
10f34     02 16 16 F2 | 	cmp	arg03, #2 wc
10f38     66 00 00 FF 
10f3c     50 E4 85 F1 | 	sub	objptr, ##52304
10f40     3C 00 90 CD |  if_b	jmp	#LR__1340
10f44     00 12 06 F6 | 	mov	arg01, #0
10f48     6C D6 B0 FD | 	call	#__system___getiolock_0423
10f4c     FD 12 02 F6 | 	mov	arg01, result1
10f50     60 7D B0 FD | 	call	#__system___lockmem
10f54     43 01 00 FF 
10f58     23 15 06 F6 | 	mov	arg02, ##@LR__4603
10f5c     00 12 06 F6 | 	mov	arg01, #0
10f60     00 16 06 F6 | 	mov	arg03, #0
10f64     40 8A B0 FD | 	call	#__system___basic_print_string
10f68     00 12 06 F6 | 	mov	arg01, #0
10f6c     48 D6 B0 FD | 	call	#__system___getiolock_0423
10f70     FD 00 68 FC | 	wrlong	#0, result1
10f74     27 12 06 F6 | 	mov	arg01, #39
10f78     14 48 B0 FD | 	call	#_printerror
10f7c     2C 01 90 FD | 	jmp	#LR__1347
10f80                 | LR__1340
10f80                 | ' if numpar=0 then
10f80     0C 4E 05 F1 | 	add	fp, #12
10f84     A7 FE 09 FB | 	rdlong	result3, fp wz
10f88     0C 4E 85 F1 | 	sub	fp, #12
10f8c     20 00 90 5D |  if_ne	jmp	#LR__1341
10f90     08 4E 05 F1 | 	add	fp, #8
10f94     A7 3A 68 FC | 	wrlong	#29, fp
10f98     08 4E 85 F1 | 	sub	fp, #8
10f9c     1B FA 61 FD | 	getrnd	result1
10fa0     A7 FA 61 FC | 	wrlong	result1, fp
10fa4     A7 12 02 F6 | 	mov	arg01, fp
10fa8     A8 89 BF FD | 	call	#_push
10fac     FC 00 90 FD | 	jmp	#LR__1346
10fb0                 | LR__1341
10fb0     08 89 BF FD | 	call	#_pop
10fb4     A7 FA 61 FC | 	wrlong	result1, fp
10fb8     04 4E 05 F1 | 	add	fp, #4
10fbc     A7 FC 61 FC | 	wrlong	result2, fp
10fc0     04 4E 05 F1 | 	add	fp, #4
10fc4     A7 FE 61 FC | 	wrlong	result3, fp
10fc8                 | '   t1=pop()
10fc8                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
10fc8     08 4E 85 F1 | 	sub	fp, #8
10fcc     1C FE 0D F2 | 	cmp	result3, #28 wz
10fd0     08 4E 05 51 |  if_ne	add	fp, #8
10fd4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
10fd8     08 4E 85 51 |  if_ne	sub	fp, #8
10fdc     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
10fe0     2C 00 90 5D |  if_ne	jmp	#LR__1342
10fe4     1B FA 61 FD | 	getrnd	result1
10fe8     A7 1E 02 FB | 	rdlong	local01, fp
10fec     0F FB 11 FD | 	qdiv	result1, local01
10ff0     A7 12 02 F6 | 	mov	arg01, fp
10ff4     19 1E 62 FD | 	getqy	local01
10ff8     A7 1E 62 FC | 	wrlong	local01, fp
10ffc     08 4E 05 F1 | 	add	fp, #8
11000     A7 3A 68 FC | 	wrlong	#29, fp
11004     08 4E 85 F1 | 	sub	fp, #8
11008     48 89 BF FD | 	call	#_push
1100c     9C 00 90 FD | 	jmp	#LR__1345
11010                 | LR__1342
11010     08 4E 05 F1 | 	add	fp, #8
11014     A7 1E 02 FB | 	rdlong	local01, fp
11018     08 4E 85 F1 | 	sub	fp, #8
1101c     1E 1E 0E F2 | 	cmp	local01, #30 wz
11020     48 00 90 5D |  if_ne	jmp	#LR__1343
11024     A7 12 02 FB | 	rdlong	arg01, fp
11028     00 C0 24 FF 
1102c     00 14 06 F6 | 	mov	arg02, ##1233125376
11030     70 A9 B0 FD | 	call	#__system___float_div
11034     FD 1E 02 F6 | 	mov	local01, result1
11038     1B 12 62 FD | 	getrnd	arg01
1103c     74 13 06 F4 | 	bitl	arg01, #372
11040     58 A3 B0 FD | 	call	#__system___float_fromuns
11044     FD 14 02 F6 | 	mov	arg02, result1
11048     0F 13 02 F6 | 	mov	arg01, local01
1104c     50 A7 B0 FD | 	call	#__system___float_mul
11050     A7 FA 61 FC | 	wrlong	result1, fp
11054     08 4E 05 F1 | 	add	fp, #8
11058     A7 3C 68 FC | 	wrlong	#30, fp
1105c     08 4E 85 F1 | 	sub	fp, #8
11060     A7 12 02 F6 | 	mov	arg01, fp
11064     EC 88 BF FD | 	call	#_push
11068     40 00 90 FD | 	jmp	#LR__1344
1106c                 | LR__1343
1106c                 | '     print "rnd: "; : printerror(40) 
1106c     00 12 06 F6 | 	mov	arg01, #0
11070     44 D5 B0 FD | 	call	#__system___getiolock_0423
11074     FD 12 02 F6 | 	mov	arg01, result1
11078     38 7C B0 FD | 	call	#__system___lockmem
1107c     43 01 00 FF 
11080     29 15 06 F6 | 	mov	arg02, ##@LR__4604
11084     00 12 06 F6 | 	mov	arg01, #0
11088     00 16 06 F6 | 	mov	arg03, #0
1108c     18 89 B0 FD | 	call	#__system___basic_print_string
11090     00 12 06 F6 | 	mov	arg01, #0
11094     20 D5 B0 FD | 	call	#__system___getiolock_0423
11098     FD 00 68 FC | 	wrlong	#0, result1
1109c     28 12 06 F6 | 	mov	arg01, #40
110a0     EC 46 B0 FD | 	call	#_printerror
110a4     A7 12 02 F6 | 	mov	arg01, fp
110a8     A8 88 BF FD | 	call	#_push
110ac                 | LR__1344
110ac                 | LR__1345
110ac                 | LR__1346
110ac                 | LR__1347
110ac     A7 F0 03 F6 | 	mov	ptra, fp
110b0     B2 00 A0 FD | 	call	#popregs_
110b4                 | _do_rnd_ret
110b4     2D 00 64 FD | 	ret
110b8                 | 
110b8                 | ' 
110b8                 | ' sub do_sin
110b8                 | _do_sin
110b8     01 4A 05 F6 | 	mov	COUNT_, #1
110bc     A8 00 A0 FD | 	call	#pushregs_
110c0     10 F0 07 F1 | 	add	ptra, #16
110c4     69 00 00 FF 
110c8     54 E4 05 F1 | 	add	objptr, ##53844
110cc     F2 1E 02 FB | 	rdlong	local01, objptr
110d0     0F 17 02 F6 | 	mov	arg03, local01
110d4     01 16 66 F0 | 	shl	arg03, #1
110d8     0F 17 02 F1 | 	add	arg03, local01
110dc     02 16 66 F0 | 	shl	arg03, #2
110e0     03 00 00 FF 
110e4     04 E4 85 F1 | 	sub	objptr, ##1540
110e8     F2 16 02 F1 | 	add	arg03, objptr
110ec     0B 17 02 FB | 	rdlong	arg03, arg03
110f0     0C 4E 05 F1 | 	add	fp, #12
110f4     A7 16 62 FC | 	wrlong	arg03, fp
110f8                 | ' 
110f8                 | ' numpar=compiledline(lineptr_e).result.uresult
110f8                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
110f8     0C 4E 85 F1 | 	sub	fp, #12
110fc     02 16 16 F2 | 	cmp	arg03, #2 wc
11100     66 00 00 FF 
11104     50 E4 85 F1 | 	sub	objptr, ##52304
11108     0C 4E 05 C1 |  if_b	add	fp, #12
1110c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
11110     0C 4E 85 C1 |  if_b	sub	fp, #12
11114     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1350
11118     00 12 06 F6 | 	mov	arg01, #0
1111c     98 D4 B0 FD | 	call	#__system___getiolock_0423
11120     FD 12 02 F6 | 	mov	arg01, result1
11124     8C 7B B0 FD | 	call	#__system___lockmem
11128     43 01 00 FF 
1112c     2F 15 06 F6 | 	mov	arg02, ##@LR__4605
11130     00 12 06 F6 | 	mov	arg01, #0
11134     00 16 06 F6 | 	mov	arg03, #0
11138     6C 88 B0 FD | 	call	#__system___basic_print_string
1113c     00 12 06 F6 | 	mov	arg01, #0
11140     74 D4 B0 FD | 	call	#__system___getiolock_0423
11144     FD 00 68 FC | 	wrlong	#0, result1
11148     27 12 06 F6 | 	mov	arg01, #39
1114c     40 46 B0 FD | 	call	#_printerror
11150     64 00 90 FD | 	jmp	#LR__1351
11154                 | LR__1350
11154     64 87 BF FD | 	call	#_pop
11158     A7 FA 61 FC | 	wrlong	result1, fp
1115c     04 4E 05 F1 | 	add	fp, #4
11160     A7 FC 61 FC | 	wrlong	result2, fp
11164     04 4E 05 F1 | 	add	fp, #4
11168     A7 FE 61 FC | 	wrlong	result3, fp
1116c     08 4E 85 F1 | 	sub	fp, #8
11170     7A 00 00 FF 
11174     5C E4 05 F1 | 	add	objptr, ##62556
11178     F2 1E 02 FB | 	rdlong	local01, objptr
1117c     7A 00 00 FF 
11180     5C E4 85 F1 | 	sub	objptr, ##62556
11184     A7 12 02 F6 | 	mov	arg01, fp
11188     C0 FC BF FD | 	call	#_converttofloat
1118c     FD 14 02 F6 | 	mov	arg02, result1
11190     0F 13 02 F6 | 	mov	arg01, local01
11194     08 A6 B0 FD | 	call	#__system___float_mul
11198     FD 12 02 F6 | 	mov	arg01, result1
1119c     3C AF B0 FD | 	call	#__system____builtin_sinf
111a0     A7 FA 61 FC | 	wrlong	result1, fp
111a4     08 4E 05 F1 | 	add	fp, #8
111a8     A7 3C 68 FC | 	wrlong	#30, fp
111ac     08 4E 85 F1 | 	sub	fp, #8
111b0     A7 12 02 F6 | 	mov	arg01, fp
111b4     9C 87 BF FD | 	call	#_push
111b8                 | LR__1351
111b8     A7 F0 03 F6 | 	mov	ptra, fp
111bc     B2 00 A0 FD | 	call	#popregs_
111c0                 | _do_sin_ret
111c0     2D 00 64 FD | 	ret
111c4                 | 
111c4                 | ' 
111c4                 | ' sub do_cos
111c4                 | _do_cos
111c4     01 4A 05 F6 | 	mov	COUNT_, #1
111c8     A8 00 A0 FD | 	call	#pushregs_
111cc     10 F0 07 F1 | 	add	ptra, #16
111d0     69 00 00 FF 
111d4     54 E4 05 F1 | 	add	objptr, ##53844
111d8     F2 1E 02 FB | 	rdlong	local01, objptr
111dc     0F 17 02 F6 | 	mov	arg03, local01
111e0     01 16 66 F0 | 	shl	arg03, #1
111e4     0F 17 02 F1 | 	add	arg03, local01
111e8     02 16 66 F0 | 	shl	arg03, #2
111ec     03 00 00 FF 
111f0     04 E4 85 F1 | 	sub	objptr, ##1540
111f4     F2 16 02 F1 | 	add	arg03, objptr
111f8     0B 17 02 FB | 	rdlong	arg03, arg03
111fc     0C 4E 05 F1 | 	add	fp, #12
11200     A7 16 62 FC | 	wrlong	arg03, fp
11204                 | ' 
11204                 | ' numpar=compiledline(lineptr_e).result.uresult
11204                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
11204     0C 4E 85 F1 | 	sub	fp, #12
11208     02 16 16 F2 | 	cmp	arg03, #2 wc
1120c     66 00 00 FF 
11210     50 E4 85 F1 | 	sub	objptr, ##52304
11214     0C 4E 05 C1 |  if_b	add	fp, #12
11218     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
1121c     0C 4E 85 C1 |  if_b	sub	fp, #12
11220     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1360
11224     00 12 06 F6 | 	mov	arg01, #0
11228     8C D3 B0 FD | 	call	#__system___getiolock_0423
1122c     FD 12 02 F6 | 	mov	arg01, result1
11230     80 7A B0 FD | 	call	#__system___lockmem
11234     43 01 00 FF 
11238     35 15 06 F6 | 	mov	arg02, ##@LR__4606
1123c     00 12 06 F6 | 	mov	arg01, #0
11240     00 16 06 F6 | 	mov	arg03, #0
11244     60 87 B0 FD | 	call	#__system___basic_print_string
11248     00 12 06 F6 | 	mov	arg01, #0
1124c     68 D3 B0 FD | 	call	#__system___getiolock_0423
11250     FD 00 68 FC | 	wrlong	#0, result1
11254     27 12 06 F6 | 	mov	arg01, #39
11258     34 45 B0 FD | 	call	#_printerror
1125c     78 00 90 FD | 	jmp	#LR__1361
11260                 | LR__1360
11260     58 86 BF FD | 	call	#_pop
11264     A7 FA 61 FC | 	wrlong	result1, fp
11268     04 4E 05 F1 | 	add	fp, #4
1126c     A7 FC 61 FC | 	wrlong	result2, fp
11270     04 4E 05 F1 | 	add	fp, #4
11274     A7 FE 61 FC | 	wrlong	result3, fp
11278     08 4E 85 F1 | 	sub	fp, #8
1127c     7A 00 00 FF 
11280     5C E4 05 F1 | 	add	objptr, ##62556
11284     F2 1E 02 FB | 	rdlong	local01, objptr
11288     7A 00 00 FF 
1128c     5C E4 85 F1 | 	sub	objptr, ##62556
11290     A7 12 02 F6 | 	mov	arg01, fp
11294     B4 FB BF FD | 	call	#_converttofloat
11298     FD 14 02 F6 | 	mov	arg02, result1
1129c     0F 13 02 F6 | 	mov	arg01, local01
112a0     FC A4 B0 FD | 	call	#__system___float_mul
112a4     FD 14 02 F6 | 	mov	arg02, result1
112a8     87 E4 1F FF 
112ac     DB 13 06 F6 | 	mov	arg01, ##1070141403
112b0     1F 14 E6 F4 | 	bitnot	arg02, #31
112b4     18 A1 B0 FD | 	call	#__system___float_add
112b8     FD 12 02 F6 | 	mov	arg01, result1
112bc     1C AE B0 FD | 	call	#__system____builtin_sinf
112c0     A7 FA 61 FC | 	wrlong	result1, fp
112c4     08 4E 05 F1 | 	add	fp, #8
112c8     A7 3C 68 FC | 	wrlong	#30, fp
112cc     08 4E 85 F1 | 	sub	fp, #8
112d0     A7 12 02 F6 | 	mov	arg01, fp
112d4     7C 86 BF FD | 	call	#_push
112d8                 | LR__1361
112d8     A7 F0 03 F6 | 	mov	ptra, fp
112dc     B2 00 A0 FD | 	call	#popregs_
112e0                 | _do_cos_ret
112e0     2D 00 64 FD | 	ret
112e4                 | 
112e4                 | ' 
112e4                 | ' sub do_tan
112e4                 | _do_tan
112e4     01 4A 05 F6 | 	mov	COUNT_, #1
112e8     A8 00 A0 FD | 	call	#pushregs_
112ec     10 F0 07 F1 | 	add	ptra, #16
112f0     69 00 00 FF 
112f4     54 E4 05 F1 | 	add	objptr, ##53844
112f8     F2 1E 02 FB | 	rdlong	local01, objptr
112fc     0F 17 02 F6 | 	mov	arg03, local01
11300     01 16 66 F0 | 	shl	arg03, #1
11304     0F 17 02 F1 | 	add	arg03, local01
11308     02 16 66 F0 | 	shl	arg03, #2
1130c     03 00 00 FF 
11310     04 E4 85 F1 | 	sub	objptr, ##1540
11314     F2 16 02 F1 | 	add	arg03, objptr
11318     0B 17 02 FB | 	rdlong	arg03, arg03
1131c     0C 4E 05 F1 | 	add	fp, #12
11320     A7 16 62 FC | 	wrlong	arg03, fp
11324                 | ' 
11324                 | ' numpar=compiledline(lineptr_e).result.uresult
11324                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
11324     0C 4E 85 F1 | 	sub	fp, #12
11328     02 16 16 F2 | 	cmp	arg03, #2 wc
1132c     66 00 00 FF 
11330     50 E4 85 F1 | 	sub	objptr, ##52304
11334     0C 4E 05 C1 |  if_b	add	fp, #12
11338     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
1133c     0C 4E 85 C1 |  if_b	sub	fp, #12
11340     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1370
11344     00 12 06 F6 | 	mov	arg01, #0
11348     6C D2 B0 FD | 	call	#__system___getiolock_0423
1134c     FD 12 02 F6 | 	mov	arg01, result1
11350     60 79 B0 FD | 	call	#__system___lockmem
11354     43 01 00 FF 
11358     3B 15 06 F6 | 	mov	arg02, ##@LR__4607
1135c     00 12 06 F6 | 	mov	arg01, #0
11360     00 16 06 F6 | 	mov	arg03, #0
11364     40 86 B0 FD | 	call	#__system___basic_print_string
11368     00 12 06 F6 | 	mov	arg01, #0
1136c     48 D2 B0 FD | 	call	#__system___getiolock_0423
11370     FD 00 68 FC | 	wrlong	#0, result1
11374     27 12 06 F6 | 	mov	arg01, #39
11378     14 44 B0 FD | 	call	#_printerror
1137c     64 00 90 FD | 	jmp	#LR__1371
11380                 | LR__1370
11380     38 85 BF FD | 	call	#_pop
11384     A7 FA 61 FC | 	wrlong	result1, fp
11388     04 4E 05 F1 | 	add	fp, #4
1138c     A7 FC 61 FC | 	wrlong	result2, fp
11390     04 4E 05 F1 | 	add	fp, #4
11394     A7 FE 61 FC | 	wrlong	result3, fp
11398     08 4E 85 F1 | 	sub	fp, #8
1139c     7A 00 00 FF 
113a0     5C E4 05 F1 | 	add	objptr, ##62556
113a4     F2 1E 02 FB | 	rdlong	local01, objptr
113a8     7A 00 00 FF 
113ac     5C E4 85 F1 | 	sub	objptr, ##62556
113b0     A7 12 02 F6 | 	mov	arg01, fp
113b4     94 FA BF FD | 	call	#_converttofloat
113b8     FD 14 02 F6 | 	mov	arg02, result1
113bc     0F 13 02 F6 | 	mov	arg01, local01
113c0     DC A3 B0 FD | 	call	#__system___float_mul
113c4     FD 12 02 F6 | 	mov	arg01, result1
113c8     5C AE B0 FD | 	call	#__system____builtin_tanf
113cc     A7 FA 61 FC | 	wrlong	result1, fp
113d0     08 4E 05 F1 | 	add	fp, #8
113d4     A7 3C 68 FC | 	wrlong	#30, fp
113d8     08 4E 85 F1 | 	sub	fp, #8
113dc     A7 12 02 F6 | 	mov	arg01, fp
113e0     70 85 BF FD | 	call	#_push
113e4                 | LR__1371
113e4     A7 F0 03 F6 | 	mov	ptra, fp
113e8     B2 00 A0 FD | 	call	#popregs_
113ec                 | _do_tan_ret
113ec     2D 00 64 FD | 	ret
113f0                 | 
113f0                 | ' 
113f0                 | ' sub do_asin
113f0                 | _do_asin
113f0     01 4A 05 F6 | 	mov	COUNT_, #1
113f4     A8 00 A0 FD | 	call	#pushregs_
113f8     10 F0 07 F1 | 	add	ptra, #16
113fc     69 00 00 FF 
11400     54 E4 05 F1 | 	add	objptr, ##53844
11404     F2 1E 02 FB | 	rdlong	local01, objptr
11408     0F 17 02 F6 | 	mov	arg03, local01
1140c     01 16 66 F0 | 	shl	arg03, #1
11410     0F 17 02 F1 | 	add	arg03, local01
11414     02 16 66 F0 | 	shl	arg03, #2
11418     03 00 00 FF 
1141c     04 E4 85 F1 | 	sub	objptr, ##1540
11420     F2 16 02 F1 | 	add	arg03, objptr
11424     0B 17 02 FB | 	rdlong	arg03, arg03
11428     0C 4E 05 F1 | 	add	fp, #12
1142c     A7 16 62 FC | 	wrlong	arg03, fp
11430                 | ' 
11430                 | ' numpar=compiledline(lineptr_e).result.uresult
11430                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
11430     0C 4E 85 F1 | 	sub	fp, #12
11434     02 16 16 F2 | 	cmp	arg03, #2 wc
11438     66 00 00 FF 
1143c     50 E4 85 F1 | 	sub	objptr, ##52304
11440     0C 4E 05 C1 |  if_b	add	fp, #12
11444     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
11448     0C 4E 85 C1 |  if_b	sub	fp, #12
1144c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1380
11450     00 12 06 F6 | 	mov	arg01, #0
11454     60 D1 B0 FD | 	call	#__system___getiolock_0423
11458     FD 12 02 F6 | 	mov	arg01, result1
1145c     54 78 B0 FD | 	call	#__system___lockmem
11460     43 01 00 FF 
11464     41 15 06 F6 | 	mov	arg02, ##@LR__4608
11468     00 12 06 F6 | 	mov	arg01, #0
1146c     00 16 06 F6 | 	mov	arg03, #0
11470     34 85 B0 FD | 	call	#__system___basic_print_string
11474     00 12 06 F6 | 	mov	arg01, #0
11478     3C D1 B0 FD | 	call	#__system___getiolock_0423
1147c     FD 00 68 FC | 	wrlong	#0, result1
11480     27 12 06 F6 | 	mov	arg01, #39
11484     08 43 B0 FD | 	call	#_printerror
11488     64 00 90 FD | 	jmp	#LR__1381
1148c                 | LR__1380
1148c     2C 84 BF FD | 	call	#_pop
11490     FF 1E 02 F6 | 	mov	local01, result3
11494     A7 FA 61 FC | 	wrlong	result1, fp
11498     04 4E 05 F1 | 	add	fp, #4
1149c     A7 FC 61 FC | 	wrlong	result2, fp
114a0     04 4E 05 F1 | 	add	fp, #4
114a4     A7 1E 62 FC | 	wrlong	local01, fp
114a8     08 4E 85 F1 | 	sub	fp, #8
114ac     A7 12 02 F6 | 	mov	arg01, fp
114b0     98 F9 BF FD | 	call	#_converttofloat
114b4     FD 12 02 F6 | 	mov	arg01, result1
114b8     B4 AD B0 FD | 	call	#__system____builtin_asinf
114bc     FD 12 02 F6 | 	mov	arg01, result1
114c0     7A 00 00 FF 
114c4     60 E4 05 F1 | 	add	objptr, ##62560
114c8     F2 14 02 FB | 	rdlong	arg02, objptr
114cc     7A 00 00 FF 
114d0     60 E4 85 F1 | 	sub	objptr, ##62560
114d4     C8 A2 B0 FD | 	call	#__system___float_mul
114d8     A7 FA 61 FC | 	wrlong	result1, fp
114dc     08 4E 05 F1 | 	add	fp, #8
114e0     A7 3C 68 FC | 	wrlong	#30, fp
114e4     08 4E 85 F1 | 	sub	fp, #8
114e8     A7 12 02 F6 | 	mov	arg01, fp
114ec     64 84 BF FD | 	call	#_push
114f0                 | LR__1381
114f0     A7 F0 03 F6 | 	mov	ptra, fp
114f4     B2 00 A0 FD | 	call	#popregs_
114f8                 | _do_asin_ret
114f8     2D 00 64 FD | 	ret
114fc                 | 
114fc                 | ' 
114fc                 | ' sub do_acos
114fc                 | _do_acos
114fc     01 4A 05 F6 | 	mov	COUNT_, #1
11500     A8 00 A0 FD | 	call	#pushregs_
11504     10 F0 07 F1 | 	add	ptra, #16
11508     69 00 00 FF 
1150c     54 E4 05 F1 | 	add	objptr, ##53844
11510     F2 1E 02 FB | 	rdlong	local01, objptr
11514     0F 17 02 F6 | 	mov	arg03, local01
11518     01 16 66 F0 | 	shl	arg03, #1
1151c     0F 17 02 F1 | 	add	arg03, local01
11520     02 16 66 F0 | 	shl	arg03, #2
11524     03 00 00 FF 
11528     04 E4 85 F1 | 	sub	objptr, ##1540
1152c     F2 16 02 F1 | 	add	arg03, objptr
11530     0B 17 02 FB | 	rdlong	arg03, arg03
11534     0C 4E 05 F1 | 	add	fp, #12
11538     A7 16 62 FC | 	wrlong	arg03, fp
1153c                 | ' 
1153c                 | ' numpar=compiledline(lineptr_e).result.uresult
1153c                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
1153c     0C 4E 85 F1 | 	sub	fp, #12
11540     02 16 16 F2 | 	cmp	arg03, #2 wc
11544     66 00 00 FF 
11548     50 E4 85 F1 | 	sub	objptr, ##52304
1154c     0C 4E 05 C1 |  if_b	add	fp, #12
11550     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
11554     0C 4E 85 C1 |  if_b	sub	fp, #12
11558     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1390
1155c     00 12 06 F6 | 	mov	arg01, #0
11560     54 D0 B0 FD | 	call	#__system___getiolock_0423
11564     FD 12 02 F6 | 	mov	arg01, result1
11568     48 77 B0 FD | 	call	#__system___lockmem
1156c     43 01 00 FF 
11570     48 15 06 F6 | 	mov	arg02, ##@LR__4609
11574     00 12 06 F6 | 	mov	arg01, #0
11578     00 16 06 F6 | 	mov	arg03, #0
1157c     28 84 B0 FD | 	call	#__system___basic_print_string
11580     00 12 06 F6 | 	mov	arg01, #0
11584     30 D0 B0 FD | 	call	#__system___getiolock_0423
11588     FD 00 68 FC | 	wrlong	#0, result1
1158c     27 12 06 F6 | 	mov	arg01, #39
11590     FC 41 B0 FD | 	call	#_printerror
11594     64 00 90 FD | 	jmp	#LR__1391
11598                 | LR__1390
11598     20 83 BF FD | 	call	#_pop
1159c     FF 1E 02 F6 | 	mov	local01, result3
115a0     A7 FA 61 FC | 	wrlong	result1, fp
115a4     04 4E 05 F1 | 	add	fp, #4
115a8     A7 FC 61 FC | 	wrlong	result2, fp
115ac     04 4E 05 F1 | 	add	fp, #4
115b0     A7 1E 62 FC | 	wrlong	local01, fp
115b4     08 4E 85 F1 | 	sub	fp, #8
115b8     A7 12 02 F6 | 	mov	arg01, fp
115bc     8C F8 BF FD | 	call	#_converttofloat
115c0     FD 12 02 F6 | 	mov	arg01, result1
115c4     F4 AC B0 FD | 	call	#__system____builtin_acosf
115c8     FD 12 02 F6 | 	mov	arg01, result1
115cc     7A 00 00 FF 
115d0     60 E4 05 F1 | 	add	objptr, ##62560
115d4     F2 14 02 FB | 	rdlong	arg02, objptr
115d8     7A 00 00 FF 
115dc     60 E4 85 F1 | 	sub	objptr, ##62560
115e0     BC A1 B0 FD | 	call	#__system___float_mul
115e4     A7 FA 61 FC | 	wrlong	result1, fp
115e8     08 4E 05 F1 | 	add	fp, #8
115ec     A7 3C 68 FC | 	wrlong	#30, fp
115f0     08 4E 85 F1 | 	sub	fp, #8
115f4     A7 12 02 F6 | 	mov	arg01, fp
115f8     58 83 BF FD | 	call	#_push
115fc                 | LR__1391
115fc     A7 F0 03 F6 | 	mov	ptra, fp
11600     B2 00 A0 FD | 	call	#popregs_
11604                 | _do_acos_ret
11604     2D 00 64 FD | 	ret
11608                 | 
11608                 | ' 
11608                 | ' sub do_atn
11608                 | _do_atn
11608     01 4A 05 F6 | 	mov	COUNT_, #1
1160c     A8 00 A0 FD | 	call	#pushregs_
11610     10 F0 07 F1 | 	add	ptra, #16
11614     69 00 00 FF 
11618     54 E4 05 F1 | 	add	objptr, ##53844
1161c     F2 1E 02 FB | 	rdlong	local01, objptr
11620     0F 17 02 F6 | 	mov	arg03, local01
11624     01 16 66 F0 | 	shl	arg03, #1
11628     0F 17 02 F1 | 	add	arg03, local01
1162c     02 16 66 F0 | 	shl	arg03, #2
11630     03 00 00 FF 
11634     04 E4 85 F1 | 	sub	objptr, ##1540
11638     F2 16 02 F1 | 	add	arg03, objptr
1163c     0B 17 02 FB | 	rdlong	arg03, arg03
11640     0C 4E 05 F1 | 	add	fp, #12
11644     A7 16 62 FC | 	wrlong	arg03, fp
11648                 | ' 
11648                 | ' numpar=compiledline(lineptr_e).result.uresult
11648                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
11648     0C 4E 85 F1 | 	sub	fp, #12
1164c     02 16 16 F2 | 	cmp	arg03, #2 wc
11650     66 00 00 FF 
11654     50 E4 85 F1 | 	sub	objptr, ##52304
11658     0C 4E 05 C1 |  if_b	add	fp, #12
1165c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
11660     0C 4E 85 C1 |  if_b	sub	fp, #12
11664     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1400
11668     00 12 06 F6 | 	mov	arg01, #0
1166c     48 CF B0 FD | 	call	#__system___getiolock_0423
11670     FD 12 02 F6 | 	mov	arg01, result1
11674     3C 76 B0 FD | 	call	#__system___lockmem
11678     43 01 00 FF 
1167c     4F 15 06 F6 | 	mov	arg02, ##@LR__4610
11680     00 12 06 F6 | 	mov	arg01, #0
11684     00 16 06 F6 | 	mov	arg03, #0
11688     1C 83 B0 FD | 	call	#__system___basic_print_string
1168c     00 12 06 F6 | 	mov	arg01, #0
11690     24 CF B0 FD | 	call	#__system___getiolock_0423
11694     FD 00 68 FC | 	wrlong	#0, result1
11698     27 12 06 F6 | 	mov	arg01, #39
1169c     F0 40 B0 FD | 	call	#_printerror
116a0     6C 00 90 FD | 	jmp	#LR__1401
116a4                 | LR__1400
116a4     14 82 BF FD | 	call	#_pop
116a8     FF 1E 02 F6 | 	mov	local01, result3
116ac     A7 FA 61 FC | 	wrlong	result1, fp
116b0     04 4E 05 F1 | 	add	fp, #4
116b4     A7 FC 61 FC | 	wrlong	result2, fp
116b8     04 4E 05 F1 | 	add	fp, #4
116bc     A7 1E 62 FC | 	wrlong	local01, fp
116c0     08 4E 85 F1 | 	sub	fp, #8
116c4     A7 12 02 F6 | 	mov	arg01, fp
116c8     80 F7 BF FD | 	call	#_converttofloat
116cc     FD 12 02 F6 | 	mov	arg01, result1
116d0     00 C0 1F FF 
116d4     00 14 06 F6 | 	mov	arg02, ##1065353216
116d8     2C AC B0 FD | 	call	#__system____builtin_atan2f
116dc     FD 12 02 F6 | 	mov	arg01, result1
116e0     7A 00 00 FF 
116e4     60 E4 05 F1 | 	add	objptr, ##62560
116e8     F2 14 02 FB | 	rdlong	arg02, objptr
116ec     7A 00 00 FF 
116f0     60 E4 85 F1 | 	sub	objptr, ##62560
116f4     A8 A0 B0 FD | 	call	#__system___float_mul
116f8     A7 FA 61 FC | 	wrlong	result1, fp
116fc     08 4E 05 F1 | 	add	fp, #8
11700     A7 3C 68 FC | 	wrlong	#30, fp
11704     08 4E 85 F1 | 	sub	fp, #8
11708     A7 12 02 F6 | 	mov	arg01, fp
1170c     44 82 BF FD | 	call	#_push
11710                 | LR__1401
11710     A7 F0 03 F6 | 	mov	ptra, fp
11714     B2 00 A0 FD | 	call	#popregs_
11718                 | _do_atn_ret
11718     2D 00 64 FD | 	ret
1171c                 | 
1171c                 | ' 
1171c                 | ' sub do_sqr
1171c                 | _do_sqr
1171c     01 4A 05 F6 | 	mov	COUNT_, #1
11720     A8 00 A0 FD | 	call	#pushregs_
11724     10 F0 07 F1 | 	add	ptra, #16
11728     69 00 00 FF 
1172c     54 E4 05 F1 | 	add	objptr, ##53844
11730     F2 1E 02 FB | 	rdlong	local01, objptr
11734     0F 17 02 F6 | 	mov	arg03, local01
11738     01 16 66 F0 | 	shl	arg03, #1
1173c     0F 17 02 F1 | 	add	arg03, local01
11740     02 16 66 F0 | 	shl	arg03, #2
11744     03 00 00 FF 
11748     04 E4 85 F1 | 	sub	objptr, ##1540
1174c     F2 16 02 F1 | 	add	arg03, objptr
11750     0B 17 02 FB | 	rdlong	arg03, arg03
11754     0C 4E 05 F1 | 	add	fp, #12
11758     A7 16 62 FC | 	wrlong	arg03, fp
1175c                 | ' 
1175c                 | ' numpar=compiledline(lineptr_e).result.uresult
1175c                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
1175c     0C 4E 85 F1 | 	sub	fp, #12
11760     02 16 16 F2 | 	cmp	arg03, #2 wc
11764     66 00 00 FF 
11768     50 E4 85 F1 | 	sub	objptr, ##52304
1176c     0C 4E 05 C1 |  if_b	add	fp, #12
11770     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
11774     0C 4E 85 C1 |  if_b	sub	fp, #12
11778     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1410
1177c     00 12 06 F6 | 	mov	arg01, #0
11780     34 CE B0 FD | 	call	#__system___getiolock_0423
11784     FD 12 02 F6 | 	mov	arg01, result1
11788     28 75 B0 FD | 	call	#__system___lockmem
1178c     43 01 00 FF 
11790     55 15 06 F6 | 	mov	arg02, ##@LR__4611
11794     00 12 06 F6 | 	mov	arg01, #0
11798     00 16 06 F6 | 	mov	arg03, #0
1179c     08 82 B0 FD | 	call	#__system___basic_print_string
117a0     00 12 06 F6 | 	mov	arg01, #0
117a4     10 CE B0 FD | 	call	#__system___getiolock_0423
117a8     FD 00 68 FC | 	wrlong	#0, result1
117ac     27 12 06 F6 | 	mov	arg01, #39
117b0     DC 3F B0 FD | 	call	#_printerror
117b4     48 00 90 FD | 	jmp	#LR__1411
117b8                 | LR__1410
117b8     00 81 BF FD | 	call	#_pop
117bc     FF 1E 02 F6 | 	mov	local01, result3
117c0     A7 FA 61 FC | 	wrlong	result1, fp
117c4     04 4E 05 F1 | 	add	fp, #4
117c8     A7 FC 61 FC | 	wrlong	result2, fp
117cc     04 4E 05 F1 | 	add	fp, #4
117d0     A7 1E 62 FC | 	wrlong	local01, fp
117d4     08 4E 85 F1 | 	sub	fp, #8
117d8     A7 12 02 F6 | 	mov	arg01, fp
117dc     6C F6 BF FD | 	call	#_converttofloat
117e0     FD 12 02 F6 | 	mov	arg01, result1
117e4     E0 9E B0 FD | 	call	#__system___float_sqrt
117e8     A7 FA 61 FC | 	wrlong	result1, fp
117ec     08 4E 05 F1 | 	add	fp, #8
117f0     A7 3C 68 FC | 	wrlong	#30, fp
117f4     08 4E 85 F1 | 	sub	fp, #8
117f8     A7 12 02 F6 | 	mov	arg01, fp
117fc     54 81 BF FD | 	call	#_push
11800                 | LR__1411
11800     A7 F0 03 F6 | 	mov	ptra, fp
11804     B2 00 A0 FD | 	call	#popregs_
11808                 | _do_sqr_ret
11808     2D 00 64 FD | 	ret
1180c                 | 
1180c                 | ' 
1180c                 | ' sub do_stick
1180c                 | _do_stick
1180c     01 4A 05 F6 | 	mov	COUNT_, #1
11810     A8 00 A0 FD | 	call	#pushregs_
11814     10 F0 07 F1 | 	add	ptra, #16
11818     69 00 00 FF 
1181c     54 E4 05 F1 | 	add	objptr, ##53844
11820     F2 1E 02 FB | 	rdlong	local01, objptr
11824     0F 17 02 F6 | 	mov	arg03, local01
11828     01 16 66 F0 | 	shl	arg03, #1
1182c     0F 17 02 F1 | 	add	arg03, local01
11830     02 16 66 F0 | 	shl	arg03, #2
11834     03 00 00 FF 
11838     04 E4 85 F1 | 	sub	objptr, ##1540
1183c     F2 16 02 F1 | 	add	arg03, objptr
11840     0B 17 02 FB | 	rdlong	arg03, arg03
11844     0C 4E 05 F1 | 	add	fp, #12
11848     A7 16 62 FC | 	wrlong	arg03, fp
1184c                 | ' 
1184c                 | ' numpar=compiledline(lineptr_e).result.uresult
1184c                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
1184c     0C 4E 85 F1 | 	sub	fp, #12
11850     02 16 16 F2 | 	cmp	arg03, #2 wc
11854     66 00 00 FF 
11858     50 E4 85 F1 | 	sub	objptr, ##52304
1185c     3C 00 90 CD |  if_b	jmp	#LR__1420
11860     00 12 06 F6 | 	mov	arg01, #0
11864     50 CD B0 FD | 	call	#__system___getiolock_0423
11868     FD 12 02 F6 | 	mov	arg01, result1
1186c     44 74 B0 FD | 	call	#__system___lockmem
11870     43 01 00 FF 
11874     5B 15 06 F6 | 	mov	arg02, ##@LR__4612
11878     00 12 06 F6 | 	mov	arg01, #0
1187c     00 16 06 F6 | 	mov	arg03, #0
11880     24 81 B0 FD | 	call	#__system___basic_print_string
11884     00 12 06 F6 | 	mov	arg01, #0
11888     2C CD B0 FD | 	call	#__system___getiolock_0423
1188c     FD 00 68 FC | 	wrlong	#0, result1
11890     27 12 06 F6 | 	mov	arg01, #39
11894     F8 3E B0 FD | 	call	#_printerror
11898     E8 00 90 FD | 	jmp	#LR__1424
1189c                 | LR__1420
1189c                 | ' 
1189c                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
1189c     0C 4E 05 F1 | 	add	fp, #12
118a0     A7 FE 09 FB | 	rdlong	result3, fp wz
118a4     0C 4E 85 F1 | 	sub	fp, #12
118a8     30 00 90 5D |  if_ne	jmp	#LR__1421
118ac     79 00 00 FF 
118b0     D0 E5 05 F1 | 	add	objptr, ##62416
118b4     F2 1E 02 FB | 	rdlong	local01, objptr
118b8     79 00 00 FF 
118bc     D0 E5 85 F1 | 	sub	objptr, ##62416
118c0     A7 1E 62 FC | 	wrlong	local01, fp
118c4     08 4E 05 F1 | 	add	fp, #8
118c8     A7 3A 68 FC | 	wrlong	#29, fp
118cc     08 4E 85 F1 | 	sub	fp, #8
118d0     A7 12 02 F6 | 	mov	arg01, fp
118d4     7C 80 BF FD | 	call	#_push
118d8     A8 00 90 FD | 	jmp	#LR__1424
118dc                 | LR__1421
118dc     DC 7F BF FD | 	call	#_pop
118e0     A7 FA 61 FC | 	wrlong	result1, fp
118e4     04 4E 05 F1 | 	add	fp, #4
118e8     A7 FC 61 FC | 	wrlong	result2, fp
118ec     04 4E 05 F1 | 	add	fp, #4
118f0     A7 FE 61 FC | 	wrlong	result3, fp
118f4                 | ' 
118f4                 | ' t1=pop()
118f4                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
118f4     08 4E 85 F1 | 	sub	fp, #8
118f8     1C FE 0D F2 | 	cmp	result3, #28 wz
118fc     08 4E 05 51 |  if_ne	add	fp, #8
11900     A7 1E 02 5B |  if_ne	rdlong	local01, fp
11904     08 4E 85 51 |  if_ne	sub	fp, #8
11908     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
1190c     6C 00 90 5D |  if_ne	jmp	#LR__1423
11910     A7 1E 02 FB | 	rdlong	local01, fp
11914     7A 00 00 FF 
11918     A4 E4 05 F1 | 	add	objptr, ##62628
1191c     F2 1E 62 FC | 	wrlong	local01, objptr
11920                 | '   q=t1.result.uresult
11920                 | '   if q<7 then 
11920     7A 00 00 FF 
11924     A4 E4 85 F1 | 	sub	objptr, ##62628
11928     07 1E 56 F2 | 	cmps	local01, #7 wc
1192c     40 00 90 3D |  if_ae	jmp	#LR__1422
11930     7A 00 00 FF 
11934     A4 E4 05 F1 | 	add	objptr, ##62628
11938     F2 1E 02 FB | 	rdlong	local01, objptr
1193c     02 1E 66 F0 | 	shl	local01, #2
11940     D4 E4 85 F1 | 	sub	objptr, #212
11944     F2 1E 02 F1 | 	add	local01, objptr
11948     0F 1F 02 FB | 	rdlong	local01, local01
1194c     A7 1E 62 FC | 	wrlong	local01, fp
11950     08 4E 05 F1 | 	add	fp, #8
11954     A7 3A 68 FC | 	wrlong	#29, fp
11958     08 4E 85 F1 | 	sub	fp, #8
1195c     A7 12 02 F6 | 	mov	arg01, fp
11960     79 00 00 FF 
11964     D0 E5 85 F1 | 	sub	objptr, ##62416
11968     E8 7F BF FD | 	call	#_push
1196c                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
1196c     14 00 90 FD | 	jmp	#LR__1424
11970                 | LR__1422
11970     29 12 06 F6 | 	mov	arg01, #41
11974     18 3E B0 FD | 	call	#_printerror
11978                 | '      printerror(41) : return
11978     08 00 90 FD | 	jmp	#LR__1424
1197c                 | LR__1423
1197c     29 12 06 F6 | 	mov	arg01, #41
11980     0C 3E B0 FD | 	call	#_printerror
11984                 | LR__1424
11984     A7 F0 03 F6 | 	mov	ptra, fp
11988     B2 00 A0 FD | 	call	#popregs_
1198c                 | _do_stick_ret
1198c     2D 00 64 FD | 	ret
11990                 | 
11990                 | ' 
11990                 | ' sub do_strig
11990                 | _do_strig
11990     01 4A 05 F6 | 	mov	COUNT_, #1
11994     A8 00 A0 FD | 	call	#pushregs_
11998     10 F0 07 F1 | 	add	ptra, #16
1199c     69 00 00 FF 
119a0     54 E4 05 F1 | 	add	objptr, ##53844
119a4     F2 1E 02 FB | 	rdlong	local01, objptr
119a8     0F 17 02 F6 | 	mov	arg03, local01
119ac     01 16 66 F0 | 	shl	arg03, #1
119b0     0F 17 02 F1 | 	add	arg03, local01
119b4     02 16 66 F0 | 	shl	arg03, #2
119b8     03 00 00 FF 
119bc     04 E4 85 F1 | 	sub	objptr, ##1540
119c0     F2 16 02 F1 | 	add	arg03, objptr
119c4     0B 17 02 FB | 	rdlong	arg03, arg03
119c8     0C 4E 05 F1 | 	add	fp, #12
119cc     A7 16 62 FC | 	wrlong	arg03, fp
119d0                 | ' 
119d0                 | ' numpar=compiledline(lineptr_e).result.uresult
119d0                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
119d0     0C 4E 85 F1 | 	sub	fp, #12
119d4     02 16 16 F2 | 	cmp	arg03, #2 wc
119d8     66 00 00 FF 
119dc     50 E4 85 F1 | 	sub	objptr, ##52304
119e0     3C 00 90 CD |  if_b	jmp	#LR__1430
119e4     00 12 06 F6 | 	mov	arg01, #0
119e8     CC CB B0 FD | 	call	#__system___getiolock_0423
119ec     FD 12 02 F6 | 	mov	arg01, result1
119f0     C0 72 B0 FD | 	call	#__system___lockmem
119f4     43 01 00 FF 
119f8     63 15 06 F6 | 	mov	arg02, ##@LR__4613
119fc     00 12 06 F6 | 	mov	arg01, #0
11a00     00 16 06 F6 | 	mov	arg03, #0
11a04     A0 7F B0 FD | 	call	#__system___basic_print_string
11a08     00 12 06 F6 | 	mov	arg01, #0
11a0c     A8 CB B0 FD | 	call	#__system___getiolock_0423
11a10     FD 00 68 FC | 	wrlong	#0, result1
11a14     27 12 06 F6 | 	mov	arg01, #39
11a18     74 3D B0 FD | 	call	#_printerror
11a1c     E8 00 90 FD | 	jmp	#LR__1434
11a20                 | LR__1430
11a20                 | ' 
11a20                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
11a20     0C 4E 05 F1 | 	add	fp, #12
11a24     A7 FE 09 FB | 	rdlong	result3, fp wz
11a28     0C 4E 85 F1 | 	sub	fp, #12
11a2c     30 00 90 5D |  if_ne	jmp	#LR__1431
11a30     79 00 00 FF 
11a34     EC E5 05 F1 | 	add	objptr, ##62444
11a38     F2 1E 02 FB | 	rdlong	local01, objptr
11a3c     79 00 00 FF 
11a40     EC E5 85 F1 | 	sub	objptr, ##62444
11a44     A7 1E 62 FC | 	wrlong	local01, fp
11a48     08 4E 05 F1 | 	add	fp, #8
11a4c     A7 3A 68 FC | 	wrlong	#29, fp
11a50     08 4E 85 F1 | 	sub	fp, #8
11a54     A7 12 02 F6 | 	mov	arg01, fp
11a58     F8 7E BF FD | 	call	#_push
11a5c     A8 00 90 FD | 	jmp	#LR__1434
11a60                 | LR__1431
11a60     58 7E BF FD | 	call	#_pop
11a64     A7 FA 61 FC | 	wrlong	result1, fp
11a68     04 4E 05 F1 | 	add	fp, #4
11a6c     A7 FC 61 FC | 	wrlong	result2, fp
11a70     04 4E 05 F1 | 	add	fp, #4
11a74     A7 FE 61 FC | 	wrlong	result3, fp
11a78                 | ' 
11a78                 | ' t1=pop()
11a78                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
11a78     08 4E 85 F1 | 	sub	fp, #8
11a7c     1C FE 0D F2 | 	cmp	result3, #28 wz
11a80     08 4E 05 51 |  if_ne	add	fp, #8
11a84     A7 1E 02 5B |  if_ne	rdlong	local01, fp
11a88     08 4E 85 51 |  if_ne	sub	fp, #8
11a8c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
11a90     6C 00 90 5D |  if_ne	jmp	#LR__1433
11a94     A7 1E 02 FB | 	rdlong	local01, fp
11a98     7A 00 00 FF 
11a9c     A4 E4 05 F1 | 	add	objptr, ##62628
11aa0     F2 1E 62 FC | 	wrlong	local01, objptr
11aa4                 | '   q=t1.result.uresult
11aa4                 | '   if q<7 then 
11aa4     7A 00 00 FF 
11aa8     A4 E4 85 F1 | 	sub	objptr, ##62628
11aac     07 1E 56 F2 | 	cmps	local01, #7 wc
11ab0     40 00 90 3D |  if_ae	jmp	#LR__1432
11ab4     7A 00 00 FF 
11ab8     A4 E4 05 F1 | 	add	objptr, ##62628
11abc     F2 1E 02 FB | 	rdlong	local01, objptr
11ac0     02 1E 66 F0 | 	shl	local01, #2
11ac4     B8 E4 85 F1 | 	sub	objptr, #184
11ac8     F2 1E 02 F1 | 	add	local01, objptr
11acc     0F 1F 02 FB | 	rdlong	local01, local01
11ad0     A7 1E 62 FC | 	wrlong	local01, fp
11ad4     08 4E 05 F1 | 	add	fp, #8
11ad8     A7 3A 68 FC | 	wrlong	#29, fp
11adc     08 4E 85 F1 | 	sub	fp, #8
11ae0     A7 12 02 F6 | 	mov	arg01, fp
11ae4     79 00 00 FF 
11ae8     EC E5 85 F1 | 	sub	objptr, ##62444
11aec     64 7E BF FD | 	call	#_push
11af0                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
11af0     14 00 90 FD | 	jmp	#LR__1434
11af4                 | LR__1432
11af4     29 12 06 F6 | 	mov	arg01, #41
11af8     94 3C B0 FD | 	call	#_printerror
11afc                 | '      printerror(41) : return
11afc     08 00 90 FD | 	jmp	#LR__1434
11b00                 | LR__1433
11b00     29 12 06 F6 | 	mov	arg01, #41
11b04     88 3C B0 FD | 	call	#_printerror
11b08                 | LR__1434
11b08     A7 F0 03 F6 | 	mov	ptra, fp
11b0c     B2 00 A0 FD | 	call	#popregs_
11b10                 | _do_strig_ret
11b10     2D 00 64 FD | 	ret
11b14                 | 
11b14                 | ' 
11b14                 | ' sub do_getpixel
11b14                 | _do_getpixel
11b14     00 4A 05 F6 | 	mov	COUNT_, #0
11b18     A8 00 A0 FD | 	call	#pushregs_
11b1c     24 F0 07 F1 | 	add	ptra, #36
11b20     69 00 00 FF 
11b24     54 E4 05 F1 | 	add	objptr, ##53844
11b28     F2 16 02 FB | 	rdlong	arg03, objptr
11b2c     0B 15 02 F6 | 	mov	arg02, arg03
11b30     01 14 66 F0 | 	shl	arg02, #1
11b34     0B 15 02 F1 | 	add	arg02, arg03
11b38     02 14 66 F0 | 	shl	arg02, #2
11b3c     03 00 00 FF 
11b40     04 E4 85 F1 | 	sub	objptr, ##1540
11b44     F2 14 02 F1 | 	add	arg02, objptr
11b48     0A 17 02 FB | 	rdlong	arg03, arg02
11b4c     18 4E 05 F1 | 	add	fp, #24
11b50     A7 16 62 FC | 	wrlong	arg03, fp
11b54                 | ' 
11b54                 | ' numpar=compiledline(lineptr_e).result.uresult
11b54                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
11b54     18 4E 85 F1 | 	sub	fp, #24
11b58     02 16 0E F2 | 	cmp	arg03, #2 wz
11b5c     66 00 00 FF 
11b60     50 E4 85 F1 | 	sub	objptr, ##52304
11b64     3C 00 90 AD |  if_e	jmp	#LR__1440
11b68     00 12 06 F6 | 	mov	arg01, #0
11b6c     48 CA B0 FD | 	call	#__system___getiolock_0423
11b70     FD 12 02 F6 | 	mov	arg01, result1
11b74     3C 71 B0 FD | 	call	#__system___lockmem
11b78     43 01 00 FF 
11b7c     6B 15 06 F6 | 	mov	arg02, ##@LR__4614
11b80     00 12 06 F6 | 	mov	arg01, #0
11b84     00 16 06 F6 | 	mov	arg03, #0
11b88     1C 7E B0 FD | 	call	#__system___basic_print_string
11b8c     00 12 06 F6 | 	mov	arg01, #0
11b90     24 CA B0 FD | 	call	#__system___getiolock_0423
11b94     FD 00 68 FC | 	wrlong	#0, result1
11b98     27 12 06 F6 | 	mov	arg01, #39
11b9c     F0 3B B0 FD | 	call	#_printerror
11ba0     B4 00 90 FD | 	jmp	#LR__1441
11ba4                 | LR__1440
11ba4     14 7D BF FD | 	call	#_pop
11ba8     FD 16 02 F6 | 	mov	arg03, result1
11bac     FE 14 02 F6 | 	mov	arg02, result2
11bb0     FF 12 02 F6 | 	mov	arg01, result3
11bb4     0C 4E 05 F1 | 	add	fp, #12
11bb8     A7 16 62 FC | 	wrlong	arg03, fp
11bbc     04 4E 05 F1 | 	add	fp, #4
11bc0     A7 14 62 FC | 	wrlong	arg02, fp
11bc4     04 4E 05 F1 | 	add	fp, #4
11bc8     A7 12 62 FC | 	wrlong	arg01, fp
11bcc     14 4E 85 F1 | 	sub	fp, #20
11bd0     E8 7C BF FD | 	call	#_pop
11bd4     FF 16 02 F6 | 	mov	arg03, result3
11bd8     A7 FA 61 FC | 	wrlong	result1, fp
11bdc     04 4E 05 F1 | 	add	fp, #4
11be0     A7 FC 61 FC | 	wrlong	result2, fp
11be4     04 4E 05 F1 | 	add	fp, #4
11be8     A7 16 62 FC | 	wrlong	arg03, fp
11bec     08 4E 85 F1 | 	sub	fp, #8
11bf0     A7 12 02 F6 | 	mov	arg01, fp
11bf4     A8 F1 BF FD | 	call	#_converttoint
11bf8     1C 4E 05 F1 | 	add	fp, #28
11bfc     A7 FA 61 FC | 	wrlong	result1, fp
11c00     10 4E 85 F1 | 	sub	fp, #16
11c04     A7 12 02 F6 | 	mov	arg01, fp
11c08     0C 4E 85 F1 | 	sub	fp, #12
11c0c     90 F1 BF FD | 	call	#_converttoint
11c10     FD 16 02 F6 | 	mov	arg03, result1
11c14     20 4E 05 F1 | 	add	fp, #32
11c18     A7 16 62 FC | 	wrlong	arg03, fp
11c1c     F2 12 02 FB | 	rdlong	arg01, objptr
11c20     04 4E 85 F1 | 	sub	fp, #4
11c24     A7 FE 01 FB | 	rdlong	result3, fp
11c28     FF 12 02 F1 | 	add	arg01, result3
11c2c     1C 4E 85 F1 | 	sub	fp, #28
11c30     0A 16 66 F0 | 	shl	arg03, #10
11c34     0B 13 02 F1 | 	add	arg01, arg03
11c38     B8 3C B0 FD | 	call	#_pspeek
11c3c     FD FA E1 F8 | 	getbyte	result1, result1, #0
11c40     A7 FA 61 FC | 	wrlong	result1, fp
11c44     08 4E 05 F1 | 	add	fp, #8
11c48     A7 3A 68 FC | 	wrlong	#29, fp
11c4c     08 4E 85 F1 | 	sub	fp, #8
11c50     A7 12 02 F6 | 	mov	arg01, fp
11c54     FC 7C BF FD | 	call	#_push
11c58                 | LR__1441
11c58     A7 F0 03 F6 | 	mov	ptra, fp
11c5c     B2 00 A0 FD | 	call	#popregs_
11c60                 | _do_getpixel_ret
11c60     2D 00 64 FD | 	ret
11c64                 | 
11c64                 | ' 
11c64                 | ' 
11c64                 | ' 
11c64                 | ' sub do_defsprite
11c64                 | _do_defsprite
11c64     07 4A 05 F6 | 	mov	COUNT_, #7
11c68     A8 00 A0 FD | 	call	#pushregs_
11c6c     5C F0 07 F1 | 	add	ptra, #92
11c70     48 7C BF FD | 	call	#_pop
11c74     FD 16 02 F6 | 	mov	arg03, result1
11c78     FE 14 02 F6 | 	mov	arg02, result2
11c7c     FF 12 02 F6 | 	mov	arg01, result3
11c80     30 4E 05 F1 | 	add	fp, #48
11c84     A7 16 62 FC | 	wrlong	arg03, fp
11c88     04 4E 05 F1 | 	add	fp, #4
11c8c     A7 14 62 FC | 	wrlong	arg02, fp
11c90     04 4E 05 F1 | 	add	fp, #4
11c94     A7 12 62 FC | 	wrlong	arg01, fp
11c98     38 4E 85 F1 | 	sub	fp, #56
11c9c     1C 7C BF FD | 	call	#_pop
11ca0     FD 16 02 F6 | 	mov	arg03, result1
11ca4     FE 14 02 F6 | 	mov	arg02, result2
11ca8     FF 12 02 F6 | 	mov	arg01, result3
11cac     24 4E 05 F1 | 	add	fp, #36
11cb0     A7 16 62 FC | 	wrlong	arg03, fp
11cb4     04 4E 05 F1 | 	add	fp, #4
11cb8     A7 14 62 FC | 	wrlong	arg02, fp
11cbc     04 4E 05 F1 | 	add	fp, #4
11cc0     A7 12 62 FC | 	wrlong	arg01, fp
11cc4     2C 4E 85 F1 | 	sub	fp, #44
11cc8     F0 7B BF FD | 	call	#_pop
11ccc     FD 16 02 F6 | 	mov	arg03, result1
11cd0     FE 14 02 F6 | 	mov	arg02, result2
11cd4     FF 12 02 F6 | 	mov	arg01, result3
11cd8     18 4E 05 F1 | 	add	fp, #24
11cdc     A7 16 62 FC | 	wrlong	arg03, fp
11ce0     04 4E 05 F1 | 	add	fp, #4
11ce4     A7 14 62 FC | 	wrlong	arg02, fp
11ce8     04 4E 05 F1 | 	add	fp, #4
11cec     A7 12 62 FC | 	wrlong	arg01, fp
11cf0     20 4E 85 F1 | 	sub	fp, #32
11cf4     C4 7B BF FD | 	call	#_pop
11cf8     FD 16 02 F6 | 	mov	arg03, result1
11cfc     FE 14 02 F6 | 	mov	arg02, result2
11d00     FF 12 02 F6 | 	mov	arg01, result3
11d04     0C 4E 05 F1 | 	add	fp, #12
11d08     A7 16 62 FC | 	wrlong	arg03, fp
11d0c     04 4E 05 F1 | 	add	fp, #4
11d10     A7 14 62 FC | 	wrlong	arg02, fp
11d14     04 4E 05 F1 | 	add	fp, #4
11d18     A7 12 62 FC | 	wrlong	arg01, fp
11d1c     14 4E 85 F1 | 	sub	fp, #20
11d20     98 7B BF FD | 	call	#_pop
11d24     FF 16 02 F6 | 	mov	arg03, result3
11d28     A7 FA 61 FC | 	wrlong	result1, fp
11d2c     04 4E 05 F1 | 	add	fp, #4
11d30     A7 FC 61 FC | 	wrlong	result2, fp
11d34     04 4E 05 F1 | 	add	fp, #4
11d38     A7 16 62 FC | 	wrlong	arg03, fp
11d3c     08 4E 85 F1 | 	sub	fp, #8
11d40     A7 12 02 F6 | 	mov	arg01, fp
11d44     58 F0 BF FD | 	call	#_converttoint
11d48     3C 4E 05 F1 | 	add	fp, #60
11d4c     A7 FA 61 FC | 	wrlong	result1, fp
11d50     30 4E 85 F1 | 	sub	fp, #48
11d54     A7 12 02 F6 | 	mov	arg01, fp
11d58     0C 4E 85 F1 | 	sub	fp, #12
11d5c     40 F0 BF FD | 	call	#_converttoint
11d60     40 4E 05 F1 | 	add	fp, #64
11d64     A7 FA 61 FC | 	wrlong	result1, fp
11d68     28 4E 85 F1 | 	sub	fp, #40
11d6c     A7 12 02 F6 | 	mov	arg01, fp
11d70     18 4E 85 F1 | 	sub	fp, #24
11d74     28 F0 BF FD | 	call	#_converttoint
11d78     44 4E 05 F1 | 	add	fp, #68
11d7c     A7 FA 61 FC | 	wrlong	result1, fp
11d80     20 4E 85 F1 | 	sub	fp, #32
11d84     A7 12 02 F6 | 	mov	arg01, fp
11d88     24 4E 85 F1 | 	sub	fp, #36
11d8c     10 F0 BF FD | 	call	#_converttoint
11d90     48 4E 05 F1 | 	add	fp, #72
11d94     A7 FA 61 FC | 	wrlong	result1, fp
11d98     18 4E 85 F1 | 	sub	fp, #24
11d9c     A7 12 02 F6 | 	mov	arg01, fp
11da0     30 4E 85 F1 | 	sub	fp, #48
11da4     F8 EF BF FD | 	call	#_converttoint
11da8     4C 4E 05 F1 | 	add	fp, #76
11dac     A7 FA 61 FC | 	wrlong	result1, fp
11db0                 | ' 
11db0                 | ' t5=pop()
11db0                 | ' t4=pop()
11db0                 | ' t3=pop()
11db0                 | ' t2=pop()
11db0                 | ' t1=pop()
11db0                 | ' 
11db0                 | ' ' do convert, defsprite is not a racing command
11db0                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5)
11db0                 | '  
11db0                 | ' ' todo: check parameters for linits
11db0                 | ' if sprite(a1)<> nil then delete(sprite(a1))
11db0     10 4E 85 F1 | 	sub	fp, #16
11db4     A7 16 02 FB | 	rdlong	arg03, fp
11db8     3C 4E 85 F1 | 	sub	fp, #60
11dbc     02 16 66 F0 | 	shl	arg03, #2
11dc0     7A 00 00 FF 
11dc4     08 E4 05 F1 | 	add	objptr, ##62472
11dc8     F2 16 02 F1 | 	add	arg03, objptr
11dcc     0B 17 0A FB | 	rdlong	arg03, arg03 wz
11dd0     7A 00 00 FF 
11dd4     08 E4 85 F1 | 	sub	objptr, ##62472
11dd8     2C 00 90 AD |  if_e	jmp	#LR__1450
11ddc     3C 4E 05 F1 | 	add	fp, #60
11de0     A7 16 02 FB | 	rdlong	arg03, fp
11de4     3C 4E 85 F1 | 	sub	fp, #60
11de8     02 16 66 F0 | 	shl	arg03, #2
11dec     7A 00 00 FF 
11df0     08 E4 05 F1 | 	add	objptr, ##62472
11df4     F2 16 02 F1 | 	add	arg03, objptr
11df8     0B 13 02 FB | 	rdlong	arg01, arg03
11dfc     7A 00 00 FF 
11e00     08 E4 85 F1 | 	sub	objptr, ##62472
11e04     A0 AD B0 FD | 	call	#__system___gc_free
11e08                 | LR__1450
11e08     3C 4E 05 F1 | 	add	fp, #60
11e0c     A7 1E 02 FB | 	rdlong	local01, fp
11e10     0C 4E 05 F1 | 	add	fp, #12
11e14     A7 16 02 FB | 	rdlong	arg03, fp
11e18     04 4E 05 F1 | 	add	fp, #4
11e1c     A7 14 02 FB | 	rdlong	arg02, fp
11e20     0A 17 02 FD | 	qmul	arg03, arg02
11e24     02 1E 66 F0 | 	shl	local01, #2
11e28     7A 00 00 FF 
11e2c     08 E4 05 F1 | 	add	objptr, ##62472
11e30     F2 1E 02 F1 | 	add	local01, objptr
11e34     4C 4E 85 F1 | 	sub	fp, #76
11e38     7A 00 00 FF 
11e3c     08 E4 85 F1 | 	sub	objptr, ##62472
11e40     18 12 62 FD | 	getqx	arg01
11e44     24 AC B0 FD | 	call	#__system___gc_alloc_managed
11e48     0F FB 61 FC | 	wrlong	result1, local01
11e4c                 | ' for y=a3 to a3+a5-1
11e4c     44 4E 05 F1 | 	add	fp, #68
11e50     A7 20 02 FB | 	rdlong	local02, fp
11e54     0C 4E 05 F1 | 	add	fp, #12
11e58     A7 20 62 FC | 	wrlong	local02, fp
11e5c     0C 4E 85 F1 | 	sub	fp, #12
11e60     A7 22 02 FB | 	rdlong	local03, fp
11e64     08 4E 05 F1 | 	add	fp, #8
11e68     A7 24 02 FB | 	rdlong	local04, fp
11e6c     4C 4E 85 F1 | 	sub	fp, #76
11e70     12 23 02 F1 | 	add	local03, local04
11e74                 | LR__1451
11e74     50 4E 05 F1 | 	add	fp, #80
11e78     A7 20 02 FB | 	rdlong	local02, fp
11e7c     50 4E 85 F1 | 	sub	fp, #80
11e80     11 21 52 F2 | 	cmps	local02, local03 wc
11e84     10 01 90 3D |  if_ae	jmp	#LR__1454
11e88                 | '   for x=a2 to a4+a2-1
11e88     40 4E 05 F1 | 	add	fp, #64
11e8c     A7 1E 02 FB | 	rdlong	local01, fp
11e90     7A 00 00 FF 
11e94     78 E4 05 F1 | 	add	objptr, ##62584
11e98     F2 1E 62 FC | 	wrlong	local01, objptr
11e9c     7A 00 00 FF 
11ea0     78 E4 85 F1 | 	sub	objptr, ##62584
11ea4     08 4E 05 F1 | 	add	fp, #8
11ea8     A7 26 02 FB | 	rdlong	local05, fp
11eac     08 4E 85 F1 | 	sub	fp, #8
11eb0     A7 28 02 FB | 	rdlong	local06, fp
11eb4     40 4E 85 F1 | 	sub	fp, #64
11eb8     14 27 02 F1 | 	add	local05, local06
11ebc                 | LR__1452
11ebc     7A 00 00 FF 
11ec0     78 E4 05 F1 | 	add	objptr, ##62584
11ec4     F2 1E 02 FB | 	rdlong	local01, objptr
11ec8     7A 00 00 FF 
11ecc     78 E4 85 F1 | 	sub	objptr, ##62584
11ed0     13 1F 52 F2 | 	cmps	local01, local05 wc
11ed4     A8 00 90 3D |  if_ae	jmp	#LR__1453
11ed8     3C 4E 05 F1 | 	add	fp, #60
11edc     A7 28 02 FB | 	rdlong	local06, fp
11ee0     04 4E 05 F1 | 	add	fp, #4
11ee4     A7 24 02 FB | 	rdlong	local04, fp
11ee8     10 4E 05 F1 | 	add	fp, #16
11eec     A7 20 02 FB | 	rdlong	local02, fp
11ef0     10 1F 02 F6 | 	mov	local01, local02
11ef4     0C 4E 85 F1 | 	sub	fp, #12
11ef8     A7 16 02 FB | 	rdlong	arg03, fp
11efc     0B 1F 82 F1 | 	sub	local01, arg03
11f00     04 4E 05 F1 | 	add	fp, #4
11f04     A7 16 02 FB | 	rdlong	arg03, fp
11f08     0B 1F 02 FD | 	qmul	local01, arg03
11f0c     02 28 66 F0 | 	shl	local06, #2
11f10     7A 00 00 FF 
11f14     08 E4 05 F1 | 	add	objptr, ##62472
11f18     F2 28 02 F1 | 	add	local06, objptr
11f1c     14 29 02 FB | 	rdlong	local06, local06
11f20     70 E4 05 F1 | 	add	objptr, #112
11f24     F2 1E 02 FB | 	rdlong	local01, objptr
11f28     7A 00 00 FF 
11f2c     78 E4 85 F1 | 	sub	objptr, ##62584
11f30     0F 2B 02 F6 | 	mov	local07, local01
11f34     12 2B 82 F1 | 	sub	local07, local04
11f38     F2 12 02 FB | 	rdlong	arg01, objptr
11f3c     0F 13 02 F1 | 	add	arg01, local01
11f40     48 4E 85 F1 | 	sub	fp, #72
11f44     0A 20 66 F0 | 	shl	local02, #10
11f48     10 13 02 F1 | 	add	arg01, local02
11f4c     18 24 62 FD | 	getqx	local04
11f50     12 2B 02 F1 | 	add	local07, local04
11f54     14 2B 02 F1 | 	add	local07, local06
11f58     98 39 B0 FD | 	call	#_pspeek
11f5c     15 FB 41 FC | 	wrbyte	result1, local07
11f60     7A 00 00 FF 
11f64     78 E4 05 F1 | 	add	objptr, ##62584
11f68     F2 2A 02 FB | 	rdlong	local07, objptr
11f6c     01 2A 06 F1 | 	add	local07, #1
11f70     F2 2A 62 FC | 	wrlong	local07, objptr
11f74     7A 00 00 FF 
11f78     78 E4 85 F1 | 	sub	objptr, ##62584
11f7c     3C FF 9F FD | 	jmp	#LR__1452
11f80                 | LR__1453
11f80     50 4E 05 F1 | 	add	fp, #80
11f84     A7 2A 02 FB | 	rdlong	local07, fp
11f88     01 2A 06 F1 | 	add	local07, #1
11f8c     A7 2A 62 FC | 	wrlong	local07, fp
11f90     50 4E 85 F1 | 	sub	fp, #80
11f94     DC FE 9F FD | 	jmp	#LR__1451
11f98                 | LR__1454
11f98     3C 4E 05 F1 | 	add	fp, #60
11f9c     A7 2A 02 FB | 	rdlong	local07, fp
11fa0     15 13 02 F6 | 	mov	arg01, local07
11fa4     3C 4E 85 F1 | 	sub	fp, #60
11fa8     02 2A 66 F0 | 	shl	local07, #2
11fac     7A 00 00 FF 
11fb0     08 E4 05 F1 | 	add	objptr, ##62472
11fb4     F2 2A 02 F1 | 	add	local07, objptr
11fb8     15 15 02 FB | 	rdlong	arg02, local07
11fbc     7A 00 00 FF 
11fc0     08 E4 85 F1 | 	sub	objptr, ##62472
11fc4     DC 4C B0 FD | 	call	#_hg010b_spin2_setspriteptr
11fc8     3C 4E 05 F1 | 	add	fp, #60
11fcc     A7 12 02 FB | 	rdlong	arg01, fp
11fd0     0C 4E 05 F1 | 	add	fp, #12
11fd4     A7 14 02 FB | 	rdlong	arg02, fp
11fd8     04 4E 05 F1 | 	add	fp, #4
11fdc     A7 16 02 FB | 	rdlong	arg03, fp
11fe0     4C 4E 85 F1 | 	sub	fp, #76
11fe4     30 4D B0 FD | 	call	#_hg010b_spin2_setspritesize
11fe8     A7 F0 03 F6 | 	mov	ptra, fp
11fec     B2 00 A0 FD | 	call	#popregs_
11ff0                 | _do_defsprite_ret
11ff0     2D 00 64 FD | 	ret
11ff4                 | 
11ff4                 | ' 
11ff4                 | ' sub do_sprite
11ff4                 | _do_sprite
11ff4     00 4A 05 F6 | 	mov	COUNT_, #0
11ff8     A8 00 A0 FD | 	call	#pushregs_
11ffc     30 F0 07 F1 | 	add	ptra, #48
12000     B8 78 BF FD | 	call	#_pop
12004     FD 16 02 F6 | 	mov	arg03, result1
12008     FE 14 02 F6 | 	mov	arg02, result2
1200c     FF 12 02 F6 | 	mov	arg01, result3
12010     18 4E 05 F1 | 	add	fp, #24
12014     A7 16 62 FC | 	wrlong	arg03, fp
12018     04 4E 05 F1 | 	add	fp, #4
1201c     A7 14 62 FC | 	wrlong	arg02, fp
12020     04 4E 05 F1 | 	add	fp, #4
12024     A7 12 62 FC | 	wrlong	arg01, fp
12028     20 4E 85 F1 | 	sub	fp, #32
1202c     8C 78 BF FD | 	call	#_pop
12030     FD 16 02 F6 | 	mov	arg03, result1
12034     FE 14 02 F6 | 	mov	arg02, result2
12038     FF 12 02 F6 | 	mov	arg01, result3
1203c     0C 4E 05 F1 | 	add	fp, #12
12040     A7 16 62 FC | 	wrlong	arg03, fp
12044     04 4E 05 F1 | 	add	fp, #4
12048     A7 14 62 FC | 	wrlong	arg02, fp
1204c     04 4E 05 F1 | 	add	fp, #4
12050     A7 12 62 FC | 	wrlong	arg01, fp
12054     14 4E 85 F1 | 	sub	fp, #20
12058     60 78 BF FD | 	call	#_pop
1205c     FF 16 02 F6 | 	mov	arg03, result3
12060     A7 FA 61 FC | 	wrlong	result1, fp
12064     04 4E 05 F1 | 	add	fp, #4
12068     A7 FC 61 FC | 	wrlong	result2, fp
1206c     04 4E 05 F1 | 	add	fp, #4
12070     A7 16 62 FC | 	wrlong	arg03, fp
12074     08 4E 85 F1 | 	sub	fp, #8
12078     A7 12 02 F6 | 	mov	arg01, fp
1207c     20 ED BF FD | 	call	#_converttoint
12080     24 4E 05 F1 | 	add	fp, #36
12084     A7 FA 61 FC | 	wrlong	result1, fp
12088     18 4E 85 F1 | 	sub	fp, #24
1208c     A7 12 02 F6 | 	mov	arg01, fp
12090     0C 4E 85 F1 | 	sub	fp, #12
12094     08 ED BF FD | 	call	#_converttoint
12098     28 4E 05 F1 | 	add	fp, #40
1209c     A7 FA 61 FC | 	wrlong	result1, fp
120a0     10 4E 85 F1 | 	sub	fp, #16
120a4     A7 12 02 F6 | 	mov	arg01, fp
120a8     18 4E 85 F1 | 	sub	fp, #24
120ac     F0 EC BF FD | 	call	#_converttoint
120b0     2C 4E 05 F1 | 	add	fp, #44
120b4     A7 FA 61 FC | 	wrlong	result1, fp
120b8     08 4E 85 F1 | 	sub	fp, #8
120bc     A7 12 02 FB | 	rdlong	arg01, fp
120c0     04 4E 05 F1 | 	add	fp, #4
120c4     A7 14 02 FB | 	rdlong	arg02, fp
120c8     FD 16 02 F6 | 	mov	arg03, result1
120cc     28 4E 85 F1 | 	sub	fp, #40
120d0     F8 4B B0 FD | 	call	#_hg010b_spin2_setspritepos
120d4     A7 F0 03 F6 | 	mov	ptra, fp
120d8     B2 00 A0 FD | 	call	#popregs_
120dc                 | _do_sprite_ret
120dc     2D 00 64 FD | 	ret
120e0                 | 
120e0                 | ' 
120e0                 | ' sub do_mousex
120e0                 | _do_mousex
120e0     00 4A 05 F6 | 	mov	COUNT_, #0
120e4     A8 00 A0 FD | 	call	#pushregs_
120e8     0C F0 07 F1 | 	add	ptra, #12
120ec     08 4E 05 F1 | 	add	fp, #8
120f0     A7 3A 68 FC | 	wrlong	#29, fp
120f4     08 4E 85 F1 | 	sub	fp, #8
120f8     79 00 00 FF 
120fc     C0 E5 05 F1 | 	add	objptr, ##62400
12100     F2 12 02 FB | 	rdlong	arg01, objptr
12104     79 00 00 FF 
12108     C0 E5 85 F1 | 	sub	objptr, ##62400
1210c     A7 12 62 FC | 	wrlong	arg01, fp
12110     A7 12 02 F6 | 	mov	arg01, fp
12114     3C 78 BF FD | 	call	#_push
12118     A7 F0 03 F6 | 	mov	ptra, fp
1211c     B2 00 A0 FD | 	call	#popregs_
12120                 | _do_mousex_ret
12120     2D 00 64 FD | 	ret
12124                 | 
12124                 | ' 
12124                 | ' sub do_mousey
12124                 | _do_mousey
12124     00 4A 05 F6 | 	mov	COUNT_, #0
12128     A8 00 A0 FD | 	call	#pushregs_
1212c     0C F0 07 F1 | 	add	ptra, #12
12130     08 4E 05 F1 | 	add	fp, #8
12134     A7 3A 68 FC | 	wrlong	#29, fp
12138     08 4E 85 F1 | 	sub	fp, #8
1213c     79 00 00 FF 
12140     C4 E5 05 F1 | 	add	objptr, ##62404
12144     F2 12 02 FB | 	rdlong	arg01, objptr
12148     79 00 00 FF 
1214c     C4 E5 85 F1 | 	sub	objptr, ##62404
12150     A7 12 62 FC | 	wrlong	arg01, fp
12154     A7 12 02 F6 | 	mov	arg01, fp
12158     F8 77 BF FD | 	call	#_push
1215c     A7 F0 03 F6 | 	mov	ptra, fp
12160     B2 00 A0 FD | 	call	#popregs_
12164                 | _do_mousey_ret
12164     2D 00 64 FD | 	ret
12168                 | 
12168                 | ' 
12168                 | ' sub do_mousew
12168                 | _do_mousew
12168     00 4A 05 F6 | 	mov	COUNT_, #0
1216c     A8 00 A0 FD | 	call	#pushregs_
12170     0C F0 07 F1 | 	add	ptra, #12
12174     08 4E 05 F1 | 	add	fp, #8
12178     A7 38 68 FC | 	wrlong	#28, fp
1217c     08 4E 85 F1 | 	sub	fp, #8
12180     79 00 00 FF 
12184     CC E5 05 F1 | 	add	objptr, ##62412
12188     F2 12 02 FB | 	rdlong	arg01, objptr
1218c     79 00 00 FF 
12190     CC E5 85 F1 | 	sub	objptr, ##62412
12194     A7 12 62 FC | 	wrlong	arg01, fp
12198     A7 12 02 F6 | 	mov	arg01, fp
1219c     B4 77 BF FD | 	call	#_push
121a0     A7 F0 03 F6 | 	mov	ptra, fp
121a4     B2 00 A0 FD | 	call	#popregs_
121a8                 | _do_mousew_ret
121a8     2D 00 64 FD | 	ret
121ac                 | 
121ac                 | ' 
121ac                 | ' sub do_mousek
121ac                 | _do_mousek
121ac     00 4A 05 F6 | 	mov	COUNT_, #0
121b0     A8 00 A0 FD | 	call	#pushregs_
121b4     0C F0 07 F1 | 	add	ptra, #12
121b8     08 4E 05 F1 | 	add	fp, #8
121bc     A7 3A 68 FC | 	wrlong	#29, fp
121c0     08 4E 85 F1 | 	sub	fp, #8
121c4     79 00 00 FF 
121c8     C8 E5 05 F1 | 	add	objptr, ##62408
121cc     F2 12 02 FB | 	rdlong	arg01, objptr
121d0     79 00 00 FF 
121d4     C8 E5 85 F1 | 	sub	objptr, ##62408
121d8     A7 12 62 FC | 	wrlong	arg01, fp
121dc     A7 12 02 F6 | 	mov	arg01, fp
121e0     70 77 BF FD | 	call	#_push
121e4     A7 F0 03 F6 | 	mov	ptra, fp
121e8     B2 00 A0 FD | 	call	#popregs_
121ec                 | _do_mousek_ret
121ec     2D 00 64 FD | 	ret
121f0                 | 
121f0                 | ' 
121f0                 | ' 
121f0                 | ' sub do_rdpin
121f0                 | _do_rdpin
121f0     00 4A 05 F6 | 	mov	COUNT_, #0
121f4     A8 00 A0 FD | 	call	#pushregs_
121f8     0C F0 07 F1 | 	add	ptra, #12
121fc     BC 76 BF FD | 	call	#_pop
12200     A7 FA 61 FC | 	wrlong	result1, fp
12204     04 4E 05 F1 | 	add	fp, #4
12208     A7 FC 61 FC | 	wrlong	result2, fp
1220c     04 4E 05 F1 | 	add	fp, #4
12210     A7 FE 61 FC | 	wrlong	result3, fp
12214     08 4E 85 F1 | 	sub	fp, #8
12218     A7 12 02 F6 | 	mov	arg01, fp
1221c     80 EB BF FD | 	call	#_converttoint
12220     FD FA 89 FA | 	rdpin	result1, result1
12224     7A 00 00 FF 
12228     D4 E4 05 F1 | 	add	objptr, ##62676
1222c     F2 FA 61 FC | 	wrlong	result1, objptr
12230     7A 00 00 FF 
12234     D4 E4 85 F1 | 	sub	objptr, ##62676
12238     08 4E 05 F1 | 	add	fp, #8
1223c     A7 3A 68 FC | 	wrlong	#29, fp
12240     08 4E 85 F1 | 	sub	fp, #8
12244     A7 08 68 FC | 	wrlong	#4, fp
12248     A7 12 02 F6 | 	mov	arg01, fp
1224c     04 77 BF FD | 	call	#_push
12250     A7 F0 03 F6 | 	mov	ptra, fp
12254     B2 00 A0 FD | 	call	#popregs_
12258                 | _do_rdpin_ret
12258     2D 00 64 FD | 	ret
1225c                 | 
1225c                 | ' 
1225c                 | ' sub do_rqpin
1225c                 | _do_rqpin
1225c     00 4A 05 F6 | 	mov	COUNT_, #0
12260     A8 00 A0 FD | 	call	#pushregs_
12264     0C F0 07 F1 | 	add	ptra, #12
12268     50 76 BF FD | 	call	#_pop
1226c     A7 FA 61 FC | 	wrlong	result1, fp
12270     04 4E 05 F1 | 	add	fp, #4
12274     A7 FC 61 FC | 	wrlong	result2, fp
12278     04 4E 05 F1 | 	add	fp, #4
1227c     A7 FE 61 FC | 	wrlong	result3, fp
12280     08 4E 85 F1 | 	sub	fp, #8
12284     A7 12 02 F6 | 	mov	arg01, fp
12288     14 EB BF FD | 	call	#_converttoint
1228c     FD 12 02 F6 | 	mov	arg01, result1
12290     00 FA 05 F6 | 	mov	result1, #0
12294     09 FB 81 FA | 	rqpin	result1, arg01
12298     7A 00 00 FF 
1229c     D4 E4 05 F1 | 	add	objptr, ##62676
122a0     F2 FA 61 FC | 	wrlong	result1, objptr
122a4     7A 00 00 FF 
122a8     D4 E4 85 F1 | 	sub	objptr, ##62676
122ac     08 4E 05 F1 | 	add	fp, #8
122b0     A7 3A 68 FC | 	wrlong	#29, fp
122b4     08 4E 85 F1 | 	sub	fp, #8
122b8     A7 08 68 FC | 	wrlong	#4, fp
122bc     A7 12 02 F6 | 	mov	arg01, fp
122c0     90 76 BF FD | 	call	#_push
122c4     A7 F0 03 F6 | 	mov	ptra, fp
122c8     B2 00 A0 FD | 	call	#popregs_
122cc                 | _do_rqpin_ret
122cc     2D 00 64 FD | 	ret
122d0                 | 
122d0                 | ' 
122d0                 | ' sub do_pinread
122d0                 | _do_pinread
122d0     00 4A 05 F6 | 	mov	COUNT_, #0
122d4     A8 00 A0 FD | 	call	#pushregs_
122d8     0C F0 07 F1 | 	add	ptra, #12
122dc     DC 75 BF FD | 	call	#_pop
122e0     A7 FA 61 FC | 	wrlong	result1, fp
122e4     04 4E 05 F1 | 	add	fp, #4
122e8     A7 FC 61 FC | 	wrlong	result2, fp
122ec     04 4E 05 F1 | 	add	fp, #4
122f0     A7 FE 61 FC | 	wrlong	result3, fp
122f4     08 4E 85 F1 | 	sub	fp, #8
122f8     A7 12 02 F6 | 	mov	arg01, fp
122fc     A0 EA BF FD | 	call	#_converttoint
12300     FD 12 02 F6 | 	mov	arg01, result1
12304     20 12 CE F7 | 	test	arg01, #32 wz
12308     FF FB 01 56 |  if_ne	mov	result1, inb
1230c     FE FB 01 A6 |  if_e	mov	result1, ina
12310     09 FB 41 F0 | 	shr	result1, arg01
12314     06 12 46 F0 | 	shr	arg01, #6
12318     09 FB 41 F7 | 	zerox	result1, arg01
1231c     7A 00 00 FF 
12320     D4 E4 05 F1 | 	add	objptr, ##62676
12324     F2 FA 61 FC | 	wrlong	result1, objptr
12328     7A 00 00 FF 
1232c     D4 E4 85 F1 | 	sub	objptr, ##62676
12330     08 4E 05 F1 | 	add	fp, #8
12334     A7 3A 68 FC | 	wrlong	#29, fp
12338     08 4E 85 F1 | 	sub	fp, #8
1233c     A7 08 68 FC | 	wrlong	#4, fp
12340     A7 12 02 F6 | 	mov	arg01, fp
12344     0C 76 BF FD | 	call	#_push
12348     A7 F0 03 F6 | 	mov	ptra, fp
1234c     B2 00 A0 FD | 	call	#popregs_
12350                 | _do_pinread_ret
12350     2D 00 64 FD | 	ret
12354                 | 
12354                 | ' 
12354                 | ' sub do_gettime
12354                 | _do_gettime
12354     02 4A 05 F6 | 	mov	COUNT_, #2
12358     A8 00 A0 FD | 	call	#pushregs_
1235c     14 F0 07 F1 | 	add	ptra, #20
12360                 | ' 
12360                 | ' const asm 
12360     1A 1E 72 FD | 	getct	local01 wc
12364     1A 20 62 FD | 	getct	local02
12368                 | ' 
12368                 | ' return hi1, lo1
12368     10 FD 01 F6 | 	mov	result2, local02
1236c     A7 1E 62 FC | 	wrlong	local01, fp
12370     04 4E 05 F1 | 	add	fp, #4
12374     A7 FC 61 FC | 	wrlong	result2, fp
12378     0C 4E 05 F1 | 	add	fp, #12
1237c     A7 3A 68 FC | 	wrlong	#29, fp
12380     0C 4E 85 F1 | 	sub	fp, #12
12384     A7 12 02 FB | 	rdlong	arg01, fp
12388     04 4E 05 F1 | 	add	fp, #4
1238c     A7 12 62 FC | 	wrlong	arg01, fp
12390     08 4E 85 F1 | 	sub	fp, #8
12394     A7 12 02 FB | 	rdlong	arg01, fp
12398     0C 4E 05 F1 | 	add	fp, #12
1239c     A7 12 62 FC | 	wrlong	arg01, fp
123a0     04 4E 85 F1 | 	sub	fp, #4
123a4     A7 12 02 F6 | 	mov	arg01, fp
123a8     08 4E 85 F1 | 	sub	fp, #8
123ac     A4 75 BF FD | 	call	#_push
123b0     A7 F0 03 F6 | 	mov	ptra, fp
123b4     B2 00 A0 FD | 	call	#popregs_
123b8                 | _do_gettime_ret
123b8     2D 00 64 FD | 	ret
123bc                 | 
123bc                 | '    
123bc                 | ' 
123bc                 | ' '' ----------------------------- Graphics related runtime procedures --------------------------------------
123bc                 | ' 
123bc                 | ' '' ----------------------------- Clear the screen
123bc                 | ' 
123bc                 | ' sub do_cls
123bc                 | _do_cls
123bc     56 00 00 FF 
123c0     10 E4 05 F1 | 	add	objptr, ##44048
123c4     F2 12 02 FB | 	rdlong	arg01, objptr
123c8     04 E4 85 F1 | 	sub	objptr, #4
123cc     F2 14 02 FB | 	rdlong	arg02, objptr
123d0     56 00 00 FF 
123d4     0C E4 85 F1 | 	sub	objptr, ##44044
123d8     F4 55 B0 FD | 	call	#_hg010b_spin2_cls
123dc     56 00 00 FF 
123e0     10 E4 05 F1 | 	add	objptr, ##44048
123e4     F2 14 02 FB | 	rdlong	arg02, objptr
123e8     14 E4 85 F1 | 	sub	objptr, #20
123ec     F2 14 62 FC | 	wrlong	arg02, objptr
123f0     55 00 00 FF 
123f4     FC E5 85 F1 | 	sub	objptr, ##44028
123f8                 | ' cls(ink,paper): plot_color=ink: print
123f8     00 12 06 F6 | 	mov	arg01, #0
123fc     B8 C1 B0 FD | 	call	#__system___getiolock_0423
12400     FD 12 02 F6 | 	mov	arg01, result1
12404     AC 68 B0 FD | 	call	#__system___lockmem
12408     00 12 06 F6 | 	mov	arg01, #0
1240c     0A 14 06 F6 | 	mov	arg02, #10
12410     00 16 06 F6 | 	mov	arg03, #0
12414     38 75 B0 FD | 	call	#__system___basic_print_char
12418     00 12 06 F6 | 	mov	arg01, #0
1241c     98 C1 B0 FD | 	call	#__system___getiolock_0423
12420     FD 00 68 FC | 	wrlong	#0, result1
12424                 | _do_cls_ret
12424     2D 00 64 FD | 	ret
12428                 | 
12428                 | ' 
12428                 | ' '' ----------------------------- Set a color # from the palette to plot/draw
12428                 | ' 
12428                 | ' sub do_color
12428                 | _do_color
12428     03 4A 05 F6 | 	mov	COUNT_, #3
1242c     A8 00 A0 FD | 	call	#pushregs_
12430     88 74 BF FD | 	call	#_pop
12434     FD 1E 02 F6 | 	mov	local01, result1
12438     FE 20 02 F6 | 	mov	local02, result2
1243c     FF 22 02 F6 | 	mov	local03, result3
12440     55 00 00 FF 
12444     FC E5 05 F1 | 	add	objptr, ##44028
12448     F2 1E 62 FC | 	wrlong	local01, objptr
1244c     55 00 00 FF 
12450     FC E5 85 F1 | 	sub	objptr, ##44028
12454     A7 F0 03 F6 | 	mov	ptra, fp
12458     B2 00 A0 FD | 	call	#popregs_
1245c                 | _do_color_ret
1245c     2D 00 64 FD | 	ret
12460                 | 
12460                 | ' 
12460                 | ' ' ----------------------------- Plot a point, set starting point to draw a line
12460                 | ' 
12460                 | ' sub do_plot
12460                 | _do_plot
12460     00 4A 05 F6 | 	mov	COUNT_, #0
12464     A8 00 A0 FD | 	call	#pushregs_
12468     20 F0 07 F1 | 	add	ptra, #32
1246c     4C 74 BF FD | 	call	#_pop
12470     FD 16 02 F6 | 	mov	arg03, result1
12474     FE 14 02 F6 | 	mov	arg02, result2
12478     FF 12 02 F6 | 	mov	arg01, result3
1247c     0C 4E 05 F1 | 	add	fp, #12
12480     A7 16 62 FC | 	wrlong	arg03, fp
12484     04 4E 05 F1 | 	add	fp, #4
12488     A7 14 62 FC | 	wrlong	arg02, fp
1248c     04 4E 05 F1 | 	add	fp, #4
12490     A7 12 62 FC | 	wrlong	arg01, fp
12494     14 4E 85 F1 | 	sub	fp, #20
12498     20 74 BF FD | 	call	#_pop
1249c     FF 16 02 F6 | 	mov	arg03, result3
124a0     A7 FA 61 FC | 	wrlong	result1, fp
124a4     04 4E 05 F1 | 	add	fp, #4
124a8     A7 FC 61 FC | 	wrlong	result2, fp
124ac     04 4E 05 F1 | 	add	fp, #4
124b0     A7 16 62 FC | 	wrlong	arg03, fp
124b4     08 4E 85 F1 | 	sub	fp, #8
124b8     A7 12 02 F6 | 	mov	arg01, fp
124bc     E0 E8 BF FD | 	call	#_converttoint
124c0     18 4E 05 F1 | 	add	fp, #24
124c4     A7 FA 61 FC | 	wrlong	result1, fp
124c8     0C 4E 85 F1 | 	sub	fp, #12
124cc     A7 12 02 F6 | 	mov	arg01, fp
124d0     0C 4E 85 F1 | 	sub	fp, #12
124d4     C8 E8 BF FD | 	call	#_converttoint
124d8     1C 4E 05 F1 | 	add	fp, #28
124dc     A7 FA 61 FC | 	wrlong	result1, fp
124e0     04 4E 85 F1 | 	sub	fp, #4
124e4     A7 16 02 FB | 	rdlong	arg03, fp
124e8     56 00 00 FF 
124ec     00 E4 05 F1 | 	add	objptr, ##44032
124f0     F2 16 62 FC | 	wrlong	arg03, objptr
124f4     04 4E 05 F1 | 	add	fp, #4
124f8     A7 14 02 FB | 	rdlong	arg02, fp
124fc     1C 4E 85 F1 | 	sub	fp, #28
12500     04 E4 05 F1 | 	add	objptr, #4
12504     F2 14 62 FC | 	wrlong	arg02, objptr
12508     04 E4 85 F1 | 	sub	objptr, #4
1250c     F2 12 02 FB | 	rdlong	arg01, objptr
12510     04 E4 85 F1 | 	sub	objptr, #4
12514     F2 16 02 FB | 	rdlong	arg03, objptr
12518     55 00 00 FF 
1251c     FC E5 85 F1 | 	sub	objptr, ##44028
12520     40 48 B0 FD | 	call	#_hg010b_spin2_putpixel
12524     A7 F0 03 F6 | 	mov	ptra, fp
12528     B2 00 A0 FD | 	call	#popregs_
1252c                 | _do_plot_ret
1252c     2D 00 64 FD | 	ret
12530                 | 
12530                 | ' 
12530                 | ' ' --------------------------- Draw a line to point set by plot or previous draw, set a new starting point
12530                 | ' 
12530                 | ' sub do_draw
12530                 | _do_draw
12530     00 4A 05 F6 | 	mov	COUNT_, #0
12534     A8 00 A0 FD | 	call	#pushregs_
12538     20 F0 07 F1 | 	add	ptra, #32
1253c     7C 73 BF FD | 	call	#_pop
12540     FD 1A 02 F6 | 	mov	arg05, result1
12544     FE 18 02 F6 | 	mov	arg04, result2
12548     FF 16 02 F6 | 	mov	arg03, result3
1254c     0C 4E 05 F1 | 	add	fp, #12
12550     A7 1A 62 FC | 	wrlong	arg05, fp
12554     04 4E 05 F1 | 	add	fp, #4
12558     A7 18 62 FC | 	wrlong	arg04, fp
1255c     04 4E 05 F1 | 	add	fp, #4
12560     A7 16 62 FC | 	wrlong	arg03, fp
12564     14 4E 85 F1 | 	sub	fp, #20
12568     50 73 BF FD | 	call	#_pop
1256c     FF 1A 02 F6 | 	mov	arg05, result3
12570     A7 FA 61 FC | 	wrlong	result1, fp
12574     04 4E 05 F1 | 	add	fp, #4
12578     A7 FC 61 FC | 	wrlong	result2, fp
1257c     04 4E 05 F1 | 	add	fp, #4
12580     A7 1A 62 FC | 	wrlong	arg05, fp
12584     08 4E 85 F1 | 	sub	fp, #8
12588     A7 12 02 F6 | 	mov	arg01, fp
1258c     10 E8 BF FD | 	call	#_converttoint
12590     18 4E 05 F1 | 	add	fp, #24
12594     A7 FA 61 FC | 	wrlong	result1, fp
12598     0C 4E 85 F1 | 	sub	fp, #12
1259c     A7 12 02 F6 | 	mov	arg01, fp
125a0     0C 4E 85 F1 | 	sub	fp, #12
125a4     F8 E7 BF FD | 	call	#_converttoint
125a8     1C 4E 05 F1 | 	add	fp, #28
125ac     A7 FA 61 FC | 	wrlong	result1, fp
125b0     56 00 00 FF 
125b4     00 E4 05 F1 | 	add	objptr, ##44032
125b8     F2 12 02 FB | 	rdlong	arg01, objptr
125bc     04 E4 05 F1 | 	add	objptr, #4
125c0     F2 14 02 FB | 	rdlong	arg02, objptr
125c4     04 4E 85 F1 | 	sub	fp, #4
125c8     A7 16 02 FB | 	rdlong	arg03, fp
125cc     FD 18 02 F6 | 	mov	arg04, result1
125d0     18 4E 85 F1 | 	sub	fp, #24
125d4     08 E4 85 F1 | 	sub	objptr, #8
125d8     F2 1A 02 FB | 	rdlong	arg05, objptr
125dc     55 00 00 FF 
125e0     FC E5 85 F1 | 	sub	objptr, ##44028
125e4     2C 4A B0 FD | 	call	#_hg010b_spin2_draw
125e8     18 4E 05 F1 | 	add	fp, #24
125ec     A7 1A 02 FB | 	rdlong	arg05, fp
125f0     56 00 00 FF 
125f4     00 E4 05 F1 | 	add	objptr, ##44032
125f8     F2 1A 62 FC | 	wrlong	arg05, objptr
125fc     04 4E 05 F1 | 	add	fp, #4
12600     A7 1A 02 FB | 	rdlong	arg05, fp
12604     1C 4E 85 F1 | 	sub	fp, #28
12608     04 E4 05 F1 | 	add	objptr, #4
1260c     F2 1A 62 FC | 	wrlong	arg05, objptr
12610     56 00 00 FF 
12614     04 E4 85 F1 | 	sub	objptr, ##44036
12618     A7 F0 03 F6 | 	mov	ptra, fp
1261c     B2 00 A0 FD | 	call	#popregs_
12620                 | _do_draw_ret
12620     2D 00 64 FD | 	ret
12624                 | 
12624                 | ' 
12624                 | ' ' -------------------------- Draw a filled circle at x,y and radius r
12624                 | ' 
12624                 | ' sub do_fcircle
12624                 | _do_fcircle
12624     02 4A 05 F6 | 	mov	COUNT_, #2
12628     A8 00 A0 FD | 	call	#pushregs_
1262c     24 F0 07 F1 | 	add	ptra, #36
12630     88 72 BF FD | 	call	#_pop
12634     FD 18 02 F6 | 	mov	arg04, result1
12638     FE 16 02 F6 | 	mov	arg03, result2
1263c     FF 14 02 F6 | 	mov	arg02, result3
12640     18 4E 05 F1 | 	add	fp, #24
12644     A7 18 62 FC | 	wrlong	arg04, fp
12648     04 4E 05 F1 | 	add	fp, #4
1264c     A7 16 62 FC | 	wrlong	arg03, fp
12650     04 4E 05 F1 | 	add	fp, #4
12654     A7 14 62 FC | 	wrlong	arg02, fp
12658     20 4E 85 F1 | 	sub	fp, #32
1265c     5C 72 BF FD | 	call	#_pop
12660     FD 18 02 F6 | 	mov	arg04, result1
12664     FE 16 02 F6 | 	mov	arg03, result2
12668     FF 1E 02 F6 | 	mov	local01, result3
1266c     0C 4E 05 F1 | 	add	fp, #12
12670     A7 18 62 FC | 	wrlong	arg04, fp
12674     04 4E 05 F1 | 	add	fp, #4
12678     A7 16 62 FC | 	wrlong	arg03, fp
1267c     04 4E 05 F1 | 	add	fp, #4
12680     A7 1E 62 FC | 	wrlong	local01, fp
12684     14 4E 85 F1 | 	sub	fp, #20
12688     30 72 BF FD | 	call	#_pop
1268c     A7 FA 61 FC | 	wrlong	result1, fp
12690     04 4E 05 F1 | 	add	fp, #4
12694     A7 FC 61 FC | 	wrlong	result2, fp
12698     04 4E 05 F1 | 	add	fp, #4
1269c     A7 FE 61 FC | 	wrlong	result3, fp
126a0                 | ' 
126a0                 | ' t3=pop()
126a0                 | ' t2=pop()
126a0                 | ' t1=pop()
126a0                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
126a0     FF 18 02 F6 | 	mov	arg04, result3
126a4     08 4E 85 F1 | 	sub	fp, #8
126a8     1C 18 0E F2 | 	cmp	arg04, #28 wz
126ac     08 4E 05 51 |  if_ne	add	fp, #8
126b0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
126b4     08 4E 85 51 |  if_ne	sub	fp, #8
126b8     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
126bc     7C 00 90 5D |  if_ne	jmp	#LR__1460
126c0     14 4E 05 F1 | 	add	fp, #20
126c4     A7 1E 02 FB | 	rdlong	local01, fp
126c8     14 4E 85 F1 | 	sub	fp, #20
126cc     1C 1E 0E F2 | 	cmp	local01, #28 wz
126d0     14 4E 05 51 |  if_ne	add	fp, #20
126d4     A7 18 02 5B |  if_ne	rdlong	arg04, fp
126d8     14 4E 85 51 |  if_ne	sub	fp, #20
126dc     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
126e0     58 00 90 5D |  if_ne	jmp	#LR__1460
126e4     20 4E 05 F1 | 	add	fp, #32
126e8     A7 1E 02 FB | 	rdlong	local01, fp
126ec     20 4E 85 F1 | 	sub	fp, #32
126f0     1C 1E 0E F2 | 	cmp	local01, #28 wz
126f4     20 4E 05 51 |  if_ne	add	fp, #32
126f8     A7 18 02 5B |  if_ne	rdlong	arg04, fp
126fc     20 4E 85 51 |  if_ne	sub	fp, #32
12700     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
12704     34 00 90 5D |  if_ne	jmp	#LR__1460
12708     A7 12 02 FB | 	rdlong	arg01, fp
1270c     0C 4E 05 F1 | 	add	fp, #12
12710     A7 14 02 FB | 	rdlong	arg02, fp
12714     0C 4E 05 F1 | 	add	fp, #12
12718     A7 16 02 FB | 	rdlong	arg03, fp
1271c     18 4E 85 F1 | 	sub	fp, #24
12720     55 00 00 FF 
12724     FC E5 05 F1 | 	add	objptr, ##44028
12728     F2 18 02 FB | 	rdlong	arg04, objptr
1272c     55 00 00 FF 
12730     FC E5 85 F1 | 	sub	objptr, ##44028
12734     60 4D B0 FD | 	call	#_hg010b_spin2_fcircle
12738                 | '    v.fcircle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
12738     54 00 90 FD | 	jmp	#LR__1461
1273c                 | LR__1460
1273c     A7 12 02 F6 | 	mov	arg01, fp
12740     5C E6 BF FD | 	call	#_converttoint
12744     FD 1E 02 F6 | 	mov	local01, result1
12748     0C 4E 05 F1 | 	add	fp, #12
1274c     A7 12 02 F6 | 	mov	arg01, fp
12750     0C 4E 85 F1 | 	sub	fp, #12
12754     48 E6 BF FD | 	call	#_converttoint
12758     FD 20 02 F6 | 	mov	local02, result1
1275c     18 4E 05 F1 | 	add	fp, #24
12760     A7 12 02 F6 | 	mov	arg01, fp
12764     18 4E 85 F1 | 	sub	fp, #24
12768     34 E6 BF FD | 	call	#_converttoint
1276c     FD 16 02 F6 | 	mov	arg03, result1
12770     55 00 00 FF 
12774     FC E5 05 F1 | 	add	objptr, ##44028
12778     F2 18 02 FB | 	rdlong	arg04, objptr
1277c     55 00 00 FF 
12780     FC E5 85 F1 | 	sub	objptr, ##44028
12784     0F 13 02 F6 | 	mov	arg01, local01
12788     10 15 02 F6 | 	mov	arg02, local02
1278c     08 4D B0 FD | 	call	#_hg010b_spin2_fcircle
12790                 | LR__1461
12790     A7 F0 03 F6 | 	mov	ptra, fp
12794     B2 00 A0 FD | 	call	#popregs_
12798                 | _do_fcircle_ret
12798     2D 00 64 FD | 	ret
1279c                 | 
1279c                 | ' 
1279c                 | ' ' -------------------------- Draw an empty circle at x,y and radius r
1279c                 | ' 
1279c                 | ' sub do_circle
1279c                 | _do_circle
1279c     02 4A 05 F6 | 	mov	COUNT_, #2
127a0     A8 00 A0 FD | 	call	#pushregs_
127a4     24 F0 07 F1 | 	add	ptra, #36
127a8     10 71 BF FD | 	call	#_pop
127ac     FD 18 02 F6 | 	mov	arg04, result1
127b0     FE 16 02 F6 | 	mov	arg03, result2
127b4     FF 14 02 F6 | 	mov	arg02, result3
127b8     18 4E 05 F1 | 	add	fp, #24
127bc     A7 18 62 FC | 	wrlong	arg04, fp
127c0     04 4E 05 F1 | 	add	fp, #4
127c4     A7 16 62 FC | 	wrlong	arg03, fp
127c8     04 4E 05 F1 | 	add	fp, #4
127cc     A7 14 62 FC | 	wrlong	arg02, fp
127d0     20 4E 85 F1 | 	sub	fp, #32
127d4     E4 70 BF FD | 	call	#_pop
127d8     FD 18 02 F6 | 	mov	arg04, result1
127dc     FE 16 02 F6 | 	mov	arg03, result2
127e0     FF 1E 02 F6 | 	mov	local01, result3
127e4     0C 4E 05 F1 | 	add	fp, #12
127e8     A7 18 62 FC | 	wrlong	arg04, fp
127ec     04 4E 05 F1 | 	add	fp, #4
127f0     A7 16 62 FC | 	wrlong	arg03, fp
127f4     04 4E 05 F1 | 	add	fp, #4
127f8     A7 1E 62 FC | 	wrlong	local01, fp
127fc     14 4E 85 F1 | 	sub	fp, #20
12800     B8 70 BF FD | 	call	#_pop
12804     A7 FA 61 FC | 	wrlong	result1, fp
12808     04 4E 05 F1 | 	add	fp, #4
1280c     A7 FC 61 FC | 	wrlong	result2, fp
12810     04 4E 05 F1 | 	add	fp, #4
12814     A7 FE 61 FC | 	wrlong	result3, fp
12818                 | ' 
12818                 | ' t3=pop()
12818                 | ' t2=pop()
12818                 | ' t1=pop()
12818                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
12818     FF 18 02 F6 | 	mov	arg04, result3
1281c     08 4E 85 F1 | 	sub	fp, #8
12820     1C 18 0E F2 | 	cmp	arg04, #28 wz
12824     08 4E 05 51 |  if_ne	add	fp, #8
12828     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1282c     08 4E 85 51 |  if_ne	sub	fp, #8
12830     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
12834     7C 00 90 5D |  if_ne	jmp	#LR__1470
12838     14 4E 05 F1 | 	add	fp, #20
1283c     A7 1E 02 FB | 	rdlong	local01, fp
12840     14 4E 85 F1 | 	sub	fp, #20
12844     1C 1E 0E F2 | 	cmp	local01, #28 wz
12848     14 4E 05 51 |  if_ne	add	fp, #20
1284c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
12850     14 4E 85 51 |  if_ne	sub	fp, #20
12854     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
12858     58 00 90 5D |  if_ne	jmp	#LR__1470
1285c     20 4E 05 F1 | 	add	fp, #32
12860     A7 1E 02 FB | 	rdlong	local01, fp
12864     20 4E 85 F1 | 	sub	fp, #32
12868     1C 1E 0E F2 | 	cmp	local01, #28 wz
1286c     20 4E 05 51 |  if_ne	add	fp, #32
12870     A7 18 02 5B |  if_ne	rdlong	arg04, fp
12874     20 4E 85 51 |  if_ne	sub	fp, #32
12878     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
1287c     34 00 90 5D |  if_ne	jmp	#LR__1470
12880     A7 12 02 FB | 	rdlong	arg01, fp
12884     0C 4E 05 F1 | 	add	fp, #12
12888     A7 14 02 FB | 	rdlong	arg02, fp
1288c     0C 4E 05 F1 | 	add	fp, #12
12890     A7 16 02 FB | 	rdlong	arg03, fp
12894     18 4E 85 F1 | 	sub	fp, #24
12898     55 00 00 FF 
1289c     FC E5 05 F1 | 	add	objptr, ##44028
128a0     F2 18 02 FB | 	rdlong	arg04, objptr
128a4     55 00 00 FF 
128a8     FC E5 85 F1 | 	sub	objptr, ##44028
128ac     F4 4C B0 FD | 	call	#_hg010b_spin2_circle
128b0                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
128b0     54 00 90 FD | 	jmp	#LR__1471
128b4                 | LR__1470
128b4     A7 12 02 F6 | 	mov	arg01, fp
128b8     E4 E4 BF FD | 	call	#_converttoint
128bc     FD 1E 02 F6 | 	mov	local01, result1
128c0     0C 4E 05 F1 | 	add	fp, #12
128c4     A7 12 02 F6 | 	mov	arg01, fp
128c8     0C 4E 85 F1 | 	sub	fp, #12
128cc     D0 E4 BF FD | 	call	#_converttoint
128d0     FD 20 02 F6 | 	mov	local02, result1
128d4     18 4E 05 F1 | 	add	fp, #24
128d8     A7 12 02 F6 | 	mov	arg01, fp
128dc     18 4E 85 F1 | 	sub	fp, #24
128e0     BC E4 BF FD | 	call	#_converttoint
128e4     FD 16 02 F6 | 	mov	arg03, result1
128e8     55 00 00 FF 
128ec     FC E5 05 F1 | 	add	objptr, ##44028
128f0     F2 18 02 FB | 	rdlong	arg04, objptr
128f4     55 00 00 FF 
128f8     FC E5 85 F1 | 	sub	objptr, ##44028
128fc     0F 13 02 F6 | 	mov	arg01, local01
12900     10 15 02 F6 | 	mov	arg02, local02
12904     9C 4C B0 FD | 	call	#_hg010b_spin2_circle
12908                 | LR__1471
12908     A7 F0 03 F6 | 	mov	ptra, fp
1290c     B2 00 A0 FD | 	call	#popregs_
12910                 | _do_circle_ret
12910     2D 00 64 FD | 	ret
12914                 | 
12914                 | ' 
12914                 | ' ' -------------------------- Draw a rectangle
12914                 | ' 
12914                 | ' sub do_box
12914                 | _do_box
12914     03 4A 05 F6 | 	mov	COUNT_, #3
12918     A8 00 A0 FD | 	call	#pushregs_
1291c     30 F0 07 F1 | 	add	ptra, #48
12920     98 6F BF FD | 	call	#_pop
12924     FD 1A 02 F6 | 	mov	arg05, result1
12928     FE 18 02 F6 | 	mov	arg04, result2
1292c     FF 16 02 F6 | 	mov	arg03, result3
12930     24 4E 05 F1 | 	add	fp, #36
12934     A7 1A 62 FC | 	wrlong	arg05, fp
12938     04 4E 05 F1 | 	add	fp, #4
1293c     A7 18 62 FC | 	wrlong	arg04, fp
12940     04 4E 05 F1 | 	add	fp, #4
12944     A7 16 62 FC | 	wrlong	arg03, fp
12948     2C 4E 85 F1 | 	sub	fp, #44
1294c     6C 6F BF FD | 	call	#_pop
12950     FD 1A 02 F6 | 	mov	arg05, result1
12954     FE 18 02 F6 | 	mov	arg04, result2
12958     FF 16 02 F6 | 	mov	arg03, result3
1295c     18 4E 05 F1 | 	add	fp, #24
12960     A7 1A 62 FC | 	wrlong	arg05, fp
12964     04 4E 05 F1 | 	add	fp, #4
12968     A7 18 62 FC | 	wrlong	arg04, fp
1296c     04 4E 05 F1 | 	add	fp, #4
12970     A7 16 62 FC | 	wrlong	arg03, fp
12974     20 4E 85 F1 | 	sub	fp, #32
12978     40 6F BF FD | 	call	#_pop
1297c     FD 1A 02 F6 | 	mov	arg05, result1
12980     FE 18 02 F6 | 	mov	arg04, result2
12984     FF 1E 02 F6 | 	mov	local01, result3
12988     0C 4E 05 F1 | 	add	fp, #12
1298c     A7 1A 62 FC | 	wrlong	arg05, fp
12990     04 4E 05 F1 | 	add	fp, #4
12994     A7 18 62 FC | 	wrlong	arg04, fp
12998     04 4E 05 F1 | 	add	fp, #4
1299c     A7 1E 62 FC | 	wrlong	local01, fp
129a0     14 4E 85 F1 | 	sub	fp, #20
129a4     14 6F BF FD | 	call	#_pop
129a8     A7 FA 61 FC | 	wrlong	result1, fp
129ac     04 4E 05 F1 | 	add	fp, #4
129b0     A7 FC 61 FC | 	wrlong	result2, fp
129b4     04 4E 05 F1 | 	add	fp, #4
129b8     A7 FE 61 FC | 	wrlong	result3, fp
129bc                 | ' 
129bc                 | ' t4=pop()
129bc                 | ' t3=pop()
129bc                 | ' t2=pop()
129bc                 | ' t1=pop()
129bc                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
129bc     FF 1A 02 F6 | 	mov	arg05, result3
129c0     08 4E 85 F1 | 	sub	fp, #8
129c4     1C 1A 0E F2 | 	cmp	arg05, #28 wz
129c8     08 4E 05 51 |  if_ne	add	fp, #8
129cc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
129d0     08 4E 85 51 |  if_ne	sub	fp, #8
129d4     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
129d8     A8 00 90 5D |  if_ne	jmp	#LR__1480
129dc     14 4E 05 F1 | 	add	fp, #20
129e0     A7 1E 02 FB | 	rdlong	local01, fp
129e4     14 4E 85 F1 | 	sub	fp, #20
129e8     1C 1E 0E F2 | 	cmp	local01, #28 wz
129ec     14 4E 05 51 |  if_ne	add	fp, #20
129f0     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
129f4     14 4E 85 51 |  if_ne	sub	fp, #20
129f8     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
129fc     84 00 90 5D |  if_ne	jmp	#LR__1480
12a00     20 4E 05 F1 | 	add	fp, #32
12a04     A7 1E 02 FB | 	rdlong	local01, fp
12a08     20 4E 85 F1 | 	sub	fp, #32
12a0c     1C 1E 0E F2 | 	cmp	local01, #28 wz
12a10     20 4E 05 51 |  if_ne	add	fp, #32
12a14     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
12a18     20 4E 85 51 |  if_ne	sub	fp, #32
12a1c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
12a20     60 00 90 5D |  if_ne	jmp	#LR__1480
12a24     2C 4E 05 F1 | 	add	fp, #44
12a28     A7 1E 02 FB | 	rdlong	local01, fp
12a2c     2C 4E 85 F1 | 	sub	fp, #44
12a30     1C 1E 0E F2 | 	cmp	local01, #28 wz
12a34     2C 4E 05 51 |  if_ne	add	fp, #44
12a38     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
12a3c     2C 4E 85 51 |  if_ne	sub	fp, #44
12a40     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
12a44     3C 00 90 5D |  if_ne	jmp	#LR__1480
12a48     A7 12 02 FB | 	rdlong	arg01, fp
12a4c     0C 4E 05 F1 | 	add	fp, #12
12a50     A7 14 02 FB | 	rdlong	arg02, fp
12a54     0C 4E 05 F1 | 	add	fp, #12
12a58     A7 16 02 FB | 	rdlong	arg03, fp
12a5c     0C 4E 05 F1 | 	add	fp, #12
12a60     A7 18 02 FB | 	rdlong	arg04, fp
12a64     24 4E 85 F1 | 	sub	fp, #36
12a68     55 00 00 FF 
12a6c     FC E5 05 F1 | 	add	objptr, ##44028
12a70     F2 1A 02 FB | 	rdlong	arg05, objptr
12a74     55 00 00 FF 
12a78     FC E5 85 F1 | 	sub	objptr, ##44028
12a7c     F0 4C B0 FD | 	call	#_hg010b_spin2_box
12a80                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
12a80     6C 00 90 FD | 	jmp	#LR__1481
12a84                 | LR__1480
12a84     A7 12 02 F6 | 	mov	arg01, fp
12a88     14 E3 BF FD | 	call	#_converttoint
12a8c     FD 20 02 F6 | 	mov	local02, result1
12a90     0C 4E 05 F1 | 	add	fp, #12
12a94     A7 12 02 F6 | 	mov	arg01, fp
12a98     0C 4E 85 F1 | 	sub	fp, #12
12a9c     00 E3 BF FD | 	call	#_converttoint
12aa0     FD 22 02 F6 | 	mov	local03, result1
12aa4     18 4E 05 F1 | 	add	fp, #24
12aa8     A7 12 02 F6 | 	mov	arg01, fp
12aac     18 4E 85 F1 | 	sub	fp, #24
12ab0     EC E2 BF FD | 	call	#_converttoint
12ab4     FD 1E 02 F6 | 	mov	local01, result1
12ab8     24 4E 05 F1 | 	add	fp, #36
12abc     A7 12 02 F6 | 	mov	arg01, fp
12ac0     24 4E 85 F1 | 	sub	fp, #36
12ac4     D8 E2 BF FD | 	call	#_converttoint
12ac8     FD 18 02 F6 | 	mov	arg04, result1
12acc     55 00 00 FF 
12ad0     FC E5 05 F1 | 	add	objptr, ##44028
12ad4     F2 1A 02 FB | 	rdlong	arg05, objptr
12ad8     55 00 00 FF 
12adc     FC E5 85 F1 | 	sub	objptr, ##44028
12ae0     10 13 02 F6 | 	mov	arg01, local02
12ae4     11 15 02 F6 | 	mov	arg02, local03
12ae8     0F 17 02 F6 | 	mov	arg03, local01
12aec     80 4C B0 FD | 	call	#_hg010b_spin2_box
12af0                 | LR__1481
12af0     A7 F0 03 F6 | 	mov	ptra, fp
12af4     B2 00 A0 FD | 	call	#popregs_
12af8                 | _do_box_ret
12af8     2D 00 64 FD | 	ret
12afc                 | 
12afc                 | ' 
12afc                 | ' sub do_fill
12afc                 | _do_fill
12afc     03 4A 05 F6 | 	mov	COUNT_, #3
12b00     A8 00 A0 FD | 	call	#pushregs_
12b04     30 F0 07 F1 | 	add	ptra, #48
12b08     B0 6D BF FD | 	call	#_pop
12b0c     FD 18 02 F6 | 	mov	arg04, result1
12b10     FE 16 02 F6 | 	mov	arg03, result2
12b14     FF 14 02 F6 | 	mov	arg02, result3
12b18     24 4E 05 F1 | 	add	fp, #36
12b1c     A7 18 62 FC | 	wrlong	arg04, fp
12b20     04 4E 05 F1 | 	add	fp, #4
12b24     A7 16 62 FC | 	wrlong	arg03, fp
12b28     04 4E 05 F1 | 	add	fp, #4
12b2c     A7 14 62 FC | 	wrlong	arg02, fp
12b30     2C 4E 85 F1 | 	sub	fp, #44
12b34     84 6D BF FD | 	call	#_pop
12b38     FD 18 02 F6 | 	mov	arg04, result1
12b3c     FE 16 02 F6 | 	mov	arg03, result2
12b40     FF 14 02 F6 | 	mov	arg02, result3
12b44     18 4E 05 F1 | 	add	fp, #24
12b48     A7 18 62 FC | 	wrlong	arg04, fp
12b4c     04 4E 05 F1 | 	add	fp, #4
12b50     A7 16 62 FC | 	wrlong	arg03, fp
12b54     04 4E 05 F1 | 	add	fp, #4
12b58     A7 14 62 FC | 	wrlong	arg02, fp
12b5c     20 4E 85 F1 | 	sub	fp, #32
12b60     58 6D BF FD | 	call	#_pop
12b64     FD 18 02 F6 | 	mov	arg04, result1
12b68     FE 16 02 F6 | 	mov	arg03, result2
12b6c     FF 1E 02 F6 | 	mov	local01, result3
12b70     0C 4E 05 F1 | 	add	fp, #12
12b74     A7 18 62 FC | 	wrlong	arg04, fp
12b78     04 4E 05 F1 | 	add	fp, #4
12b7c     A7 16 62 FC | 	wrlong	arg03, fp
12b80     04 4E 05 F1 | 	add	fp, #4
12b84     A7 1E 62 FC | 	wrlong	local01, fp
12b88     14 4E 85 F1 | 	sub	fp, #20
12b8c     2C 6D BF FD | 	call	#_pop
12b90     A7 FA 61 FC | 	wrlong	result1, fp
12b94     04 4E 05 F1 | 	add	fp, #4
12b98     A7 FC 61 FC | 	wrlong	result2, fp
12b9c     04 4E 05 F1 | 	add	fp, #4
12ba0     A7 FE 61 FC | 	wrlong	result3, fp
12ba4                 | ' 
12ba4                 | ' t4=pop()
12ba4                 | ' t3=pop()
12ba4                 | ' t2=pop()
12ba4                 | ' t1=pop()
12ba4                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
12ba4     FF 18 02 F6 | 	mov	arg04, result3
12ba8     08 4E 85 F1 | 	sub	fp, #8
12bac     1C 18 0E F2 | 	cmp	arg04, #28 wz
12bb0     08 4E 05 51 |  if_ne	add	fp, #8
12bb4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
12bb8     08 4E 85 51 |  if_ne	sub	fp, #8
12bbc     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
12bc0     94 00 90 5D |  if_ne	jmp	#LR__1490
12bc4     14 4E 05 F1 | 	add	fp, #20
12bc8     A7 1E 02 FB | 	rdlong	local01, fp
12bcc     14 4E 85 F1 | 	sub	fp, #20
12bd0     1C 1E 0E F2 | 	cmp	local01, #28 wz
12bd4     14 4E 05 51 |  if_ne	add	fp, #20
12bd8     A7 18 02 5B |  if_ne	rdlong	arg04, fp
12bdc     14 4E 85 51 |  if_ne	sub	fp, #20
12be0     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
12be4     70 00 90 5D |  if_ne	jmp	#LR__1490
12be8     20 4E 05 F1 | 	add	fp, #32
12bec     A7 1E 02 FB | 	rdlong	local01, fp
12bf0     20 4E 85 F1 | 	sub	fp, #32
12bf4     1C 1E 0E F2 | 	cmp	local01, #28 wz
12bf8     20 4E 05 51 |  if_ne	add	fp, #32
12bfc     A7 18 02 5B |  if_ne	rdlong	arg04, fp
12c00     20 4E 85 51 |  if_ne	sub	fp, #32
12c04     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
12c08     4C 00 90 5D |  if_ne	jmp	#LR__1490
12c0c     2C 4E 05 F1 | 	add	fp, #44
12c10     A7 1E 02 FB | 	rdlong	local01, fp
12c14     2C 4E 85 F1 | 	sub	fp, #44
12c18     1C 1E 0E F2 | 	cmp	local01, #28 wz
12c1c     2C 4E 05 51 |  if_ne	add	fp, #44
12c20     A7 18 02 5B |  if_ne	rdlong	arg04, fp
12c24     2C 4E 85 51 |  if_ne	sub	fp, #44
12c28     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
12c2c     28 00 90 5D |  if_ne	jmp	#LR__1490
12c30     A7 12 02 FB | 	rdlong	arg01, fp
12c34     0C 4E 05 F1 | 	add	fp, #12
12c38     A7 14 02 FB | 	rdlong	arg02, fp
12c3c     0C 4E 05 F1 | 	add	fp, #12
12c40     A7 16 02 FB | 	rdlong	arg03, fp
12c44     0C 4E 05 F1 | 	add	fp, #12
12c48     A7 18 02 FB | 	rdlong	arg04, fp
12c4c     24 4E 85 F1 | 	sub	fp, #36
12c50     B0 45 B0 FD | 	call	#_hg010b_spin2_fill
12c54                 | '    v.fill(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult) : return
12c54     58 00 90 FD | 	jmp	#LR__1491
12c58                 | LR__1490
12c58     A7 12 02 F6 | 	mov	arg01, fp
12c5c     40 E1 BF FD | 	call	#_converttoint
12c60     FD 20 02 F6 | 	mov	local02, result1
12c64     0C 4E 05 F1 | 	add	fp, #12
12c68     A7 12 02 F6 | 	mov	arg01, fp
12c6c     0C 4E 85 F1 | 	sub	fp, #12
12c70     2C E1 BF FD | 	call	#_converttoint
12c74     FD 22 02 F6 | 	mov	local03, result1
12c78     18 4E 05 F1 | 	add	fp, #24
12c7c     A7 12 02 F6 | 	mov	arg01, fp
12c80     18 4E 85 F1 | 	sub	fp, #24
12c84     18 E1 BF FD | 	call	#_converttoint
12c88     FD 1E 02 F6 | 	mov	local01, result1
12c8c     24 4E 05 F1 | 	add	fp, #36
12c90     A7 12 02 F6 | 	mov	arg01, fp
12c94     24 4E 85 F1 | 	sub	fp, #36
12c98     04 E1 BF FD | 	call	#_converttoint
12c9c     FD 18 02 F6 | 	mov	arg04, result1
12ca0     10 13 02 F6 | 	mov	arg01, local02
12ca4     11 15 02 F6 | 	mov	arg02, local03
12ca8     0F 17 02 F6 | 	mov	arg03, local01
12cac     54 45 B0 FD | 	call	#_hg010b_spin2_fill
12cb0                 | LR__1491
12cb0     A7 F0 03 F6 | 	mov	ptra, fp
12cb4     B2 00 A0 FD | 	call	#popregs_
12cb8                 | _do_fill_ret
12cb8     2D 00 64 FD | 	ret
12cbc                 | 
12cbc                 | ' 
12cbc                 | ' ' -------------------------- Draw a frane
12cbc                 | ' 
12cbc                 | ' sub do_frame
12cbc                 | _do_frame
12cbc     03 4A 05 F6 | 	mov	COUNT_, #3
12cc0     A8 00 A0 FD | 	call	#pushregs_
12cc4     30 F0 07 F1 | 	add	ptra, #48
12cc8     F0 6B BF FD | 	call	#_pop
12ccc     FD 1A 02 F6 | 	mov	arg05, result1
12cd0     FE 18 02 F6 | 	mov	arg04, result2
12cd4     FF 16 02 F6 | 	mov	arg03, result3
12cd8     24 4E 05 F1 | 	add	fp, #36
12cdc     A7 1A 62 FC | 	wrlong	arg05, fp
12ce0     04 4E 05 F1 | 	add	fp, #4
12ce4     A7 18 62 FC | 	wrlong	arg04, fp
12ce8     04 4E 05 F1 | 	add	fp, #4
12cec     A7 16 62 FC | 	wrlong	arg03, fp
12cf0     2C 4E 85 F1 | 	sub	fp, #44
12cf4     C4 6B BF FD | 	call	#_pop
12cf8     FD 1A 02 F6 | 	mov	arg05, result1
12cfc     FE 18 02 F6 | 	mov	arg04, result2
12d00     FF 16 02 F6 | 	mov	arg03, result3
12d04     18 4E 05 F1 | 	add	fp, #24
12d08     A7 1A 62 FC | 	wrlong	arg05, fp
12d0c     04 4E 05 F1 | 	add	fp, #4
12d10     A7 18 62 FC | 	wrlong	arg04, fp
12d14     04 4E 05 F1 | 	add	fp, #4
12d18     A7 16 62 FC | 	wrlong	arg03, fp
12d1c     20 4E 85 F1 | 	sub	fp, #32
12d20     98 6B BF FD | 	call	#_pop
12d24     FD 1A 02 F6 | 	mov	arg05, result1
12d28     FE 18 02 F6 | 	mov	arg04, result2
12d2c     FF 1E 02 F6 | 	mov	local01, result3
12d30     0C 4E 05 F1 | 	add	fp, #12
12d34     A7 1A 62 FC | 	wrlong	arg05, fp
12d38     04 4E 05 F1 | 	add	fp, #4
12d3c     A7 18 62 FC | 	wrlong	arg04, fp
12d40     04 4E 05 F1 | 	add	fp, #4
12d44     A7 1E 62 FC | 	wrlong	local01, fp
12d48     14 4E 85 F1 | 	sub	fp, #20
12d4c     6C 6B BF FD | 	call	#_pop
12d50     A7 FA 61 FC | 	wrlong	result1, fp
12d54     04 4E 05 F1 | 	add	fp, #4
12d58     A7 FC 61 FC | 	wrlong	result2, fp
12d5c     04 4E 05 F1 | 	add	fp, #4
12d60     A7 FE 61 FC | 	wrlong	result3, fp
12d64                 | ' 
12d64                 | ' t4=pop()
12d64                 | ' t3=pop()
12d64                 | ' t2=pop()
12d64                 | ' t1=pop()
12d64                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
12d64     FF 1A 02 F6 | 	mov	arg05, result3
12d68     08 4E 85 F1 | 	sub	fp, #8
12d6c     1C 1A 0E F2 | 	cmp	arg05, #28 wz
12d70     08 4E 05 51 |  if_ne	add	fp, #8
12d74     A7 1E 02 5B |  if_ne	rdlong	local01, fp
12d78     08 4E 85 51 |  if_ne	sub	fp, #8
12d7c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
12d80     A8 00 90 5D |  if_ne	jmp	#LR__1500
12d84     14 4E 05 F1 | 	add	fp, #20
12d88     A7 1E 02 FB | 	rdlong	local01, fp
12d8c     14 4E 85 F1 | 	sub	fp, #20
12d90     1C 1E 0E F2 | 	cmp	local01, #28 wz
12d94     14 4E 05 51 |  if_ne	add	fp, #20
12d98     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
12d9c     14 4E 85 51 |  if_ne	sub	fp, #20
12da0     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
12da4     84 00 90 5D |  if_ne	jmp	#LR__1500
12da8     20 4E 05 F1 | 	add	fp, #32
12dac     A7 1E 02 FB | 	rdlong	local01, fp
12db0     20 4E 85 F1 | 	sub	fp, #32
12db4     1C 1E 0E F2 | 	cmp	local01, #28 wz
12db8     20 4E 05 51 |  if_ne	add	fp, #32
12dbc     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
12dc0     20 4E 85 51 |  if_ne	sub	fp, #32
12dc4     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
12dc8     60 00 90 5D |  if_ne	jmp	#LR__1500
12dcc     2C 4E 05 F1 | 	add	fp, #44
12dd0     A7 1E 02 FB | 	rdlong	local01, fp
12dd4     2C 4E 85 F1 | 	sub	fp, #44
12dd8     1C 1E 0E F2 | 	cmp	local01, #28 wz
12ddc     2C 4E 05 51 |  if_ne	add	fp, #44
12de0     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
12de4     2C 4E 85 51 |  if_ne	sub	fp, #44
12de8     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
12dec     3C 00 90 5D |  if_ne	jmp	#LR__1500
12df0     A7 12 02 FB | 	rdlong	arg01, fp
12df4     0C 4E 05 F1 | 	add	fp, #12
12df8     A7 14 02 FB | 	rdlong	arg02, fp
12dfc     0C 4E 05 F1 | 	add	fp, #12
12e00     A7 16 02 FB | 	rdlong	arg03, fp
12e04     0C 4E 05 F1 | 	add	fp, #12
12e08     A7 18 02 FB | 	rdlong	arg04, fp
12e0c     24 4E 85 F1 | 	sub	fp, #36
12e10     55 00 00 FF 
12e14     FC E5 05 F1 | 	add	objptr, ##44028
12e18     F2 1A 02 FB | 	rdlong	arg05, objptr
12e1c     55 00 00 FF 
12e20     FC E5 85 F1 | 	sub	objptr, ##44028
12e24     C8 48 B0 FD | 	call	#_hg010b_spin2_frame
12e28                 | '    v.frame(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
12e28     6C 00 90 FD | 	jmp	#LR__1501
12e2c                 | LR__1500
12e2c     A7 12 02 F6 | 	mov	arg01, fp
12e30     6C DF BF FD | 	call	#_converttoint
12e34     FD 20 02 F6 | 	mov	local02, result1
12e38     0C 4E 05 F1 | 	add	fp, #12
12e3c     A7 12 02 F6 | 	mov	arg01, fp
12e40     0C 4E 85 F1 | 	sub	fp, #12
12e44     58 DF BF FD | 	call	#_converttoint
12e48     FD 22 02 F6 | 	mov	local03, result1
12e4c     18 4E 05 F1 | 	add	fp, #24
12e50     A7 12 02 F6 | 	mov	arg01, fp
12e54     18 4E 85 F1 | 	sub	fp, #24
12e58     44 DF BF FD | 	call	#_converttoint
12e5c     FD 1E 02 F6 | 	mov	local01, result1
12e60     24 4E 05 F1 | 	add	fp, #36
12e64     A7 12 02 F6 | 	mov	arg01, fp
12e68     24 4E 85 F1 | 	sub	fp, #36
12e6c     30 DF BF FD | 	call	#_converttoint
12e70     FD 18 02 F6 | 	mov	arg04, result1
12e74     55 00 00 FF 
12e78     FC E5 05 F1 | 	add	objptr, ##44028
12e7c     F2 1A 02 FB | 	rdlong	arg05, objptr
12e80     55 00 00 FF 
12e84     FC E5 85 F1 | 	sub	objptr, ##44028
12e88     10 13 02 F6 | 	mov	arg01, local02
12e8c     11 15 02 F6 | 	mov	arg02, local03
12e90     0F 17 02 F6 | 	mov	arg03, local01
12e94     58 48 B0 FD | 	call	#_hg010b_spin2_frame
12e98                 | LR__1501
12e98     A7 F0 03 F6 | 	mov	ptra, fp
12e9c     B2 00 A0 FD | 	call	#popregs_
12ea0                 | _do_frame_ret
12ea0     2D 00 64 FD | 	ret
12ea4                 | 
12ea4                 | ' 
12ea4                 | ' '' ----------------------------- Text related runtime procedures --------------------------------------
12ea4                 | ' 
12ea4                 | ' ' ------------------------- Print to the screem
12ea4                 | ' 
12ea4                 | ' sub do_print  
12ea4                 | _do_print
12ea4     0A 4A 05 F6 | 	mov	COUNT_, #10
12ea8     A8 00 A0 FD | 	call	#pushregs_
12eac     00 24 06 F6 | 	mov	local04, #0
12eb0     08 6A BF FD | 	call	#_pop
12eb4     FD 26 02 F6 | 	mov	local05, result1
12eb8     FE 28 02 F6 | 	mov	local06, result2
12ebc     FF 2A 02 F6 | 	mov	local07, result3
12ec0     13 1F 02 F6 | 	mov	local01, local05
12ec4     14 21 02 F6 | 	mov	local02, local06
12ec8     15 23 02 F6 | 	mov	local03, local07
12ecc                 | '  
12ecc                 | ' r=0
12ecc                 | ' t1=pop() 
12ecc                 | ' 'print t1.result_type,t1.result.uresult
12ecc                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
12ecc     2B 22 0E F2 | 	cmp	local03, #43 wz
12ed0     14 00 90 5D |  if_ne	jmp	#LR__1510
12ed4     0F 13 02 F6 | 	mov	arg01, local01
12ed8     1C 9B BF FD | 	call	#_convertstring
12edc     FD 26 02 F6 | 	mov	local05, result1
12ee0     13 1F 02 F6 | 	mov	local01, local05
12ee4     1F 22 06 F6 | 	mov	local03, #31
12ee8                 | LR__1510
12ee8                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
12ee8     21 22 0E F2 | 	cmp	local03, #33 wz
12eec     22 22 0E 52 |  if_ne	cmp	local03, #34 wz
12ef0     20 00 90 5D |  if_ne	jmp	#LR__1511
12ef4     11 25 02 F6 | 	mov	local04, local03
12ef8     C0 69 BF FD | 	call	#_pop
12efc     FD 26 02 F6 | 	mov	local05, result1
12f00     FE 28 02 F6 | 	mov	local06, result2
12f04     FF 2A 02 F6 | 	mov	local07, result3
12f08     13 1F 02 F6 | 	mov	local01, local05
12f0c     14 21 02 F6 | 	mov	local02, local06
12f10     15 23 02 F6 | 	mov	local03, local07
12f14                 | LR__1511
12f14                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
12f14     20 22 0E F2 | 	cmp	local03, #32 wz
12f18     11 25 02 A6 |  if_e	mov	local04, local03
12f1c                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
12f1c     FF 22 0E F2 | 	cmp	local03, #255 wz
12f20     0C 00 90 5D |  if_ne	jmp	#LR__1512
12f24     0F 13 02 F6 | 	mov	arg01, local01
12f28     64 28 B0 FD | 	call	#_printerror
12f2c     30 04 90 FD | 	jmp	#LR__1529
12f30                 | LR__1512
12f30                 | ' 
12f30                 | ' if r=print_mod_comma  then
12f30     21 24 0E F2 | 	cmp	local04, #33 wz
12f34     AC 01 90 5D |  if_ne	jmp	#LR__1517
12f38                 | '   if t1.result_type=result_int then print t1.result.iresult,
12f38     1C 22 0E F2 | 	cmp	local03, #28 wz
12f3c     64 00 90 5D |  if_ne	jmp	#LR__1513
12f40     00 12 06 F6 | 	mov	arg01, #0
12f44     70 B6 B0 FD | 	call	#__system___getiolock_0423
12f48     FD 12 02 F6 | 	mov	arg01, result1
12f4c     64 5D B0 FD | 	call	#__system___lockmem
12f50     00 28 06 F6 | 	mov	local06, #0
12f54     00 12 06 F6 | 	mov	arg01, #0
12f58     0F 15 02 F6 | 	mov	arg02, local01
12f5c     00 16 06 F6 | 	mov	arg03, #0
12f60     0A 18 06 F6 | 	mov	arg04, #10
12f64     84 6A B0 FD | 	call	#__system___basic_print_integer
12f68     FD 2A 02 F6 | 	mov	local07, result1
12f6c     14 27 02 F6 | 	mov	local05, local06
12f70     15 27 02 F1 | 	add	local05, local07
12f74     00 2C 06 F6 | 	mov	local08, #0
12f78     00 12 06 F6 | 	mov	arg01, #0
12f7c     09 14 06 F6 | 	mov	arg02, #9
12f80     00 16 06 F6 | 	mov	arg03, #0
12f84     C8 69 B0 FD | 	call	#__system___basic_print_char
12f88     FD 2E 02 F6 | 	mov	local09, result1
12f8c     FD 26 02 F1 | 	add	local05, result1
12f90     00 12 06 F6 | 	mov	arg01, #0
12f94     20 B6 B0 FD | 	call	#__system___getiolock_0423
12f98     FD 00 68 FC | 	wrlong	#0, result1
12f9c     00 FA 05 F6 | 	mov	result1, #0
12fa0     00 30 06 F6 | 	mov	local10, #0
12fa4                 | LR__1513
12fa4                 | '   if t1.result_type=result_uint then print t1.result.uresult,
12fa4     1D 22 0E F2 | 	cmp	local03, #29 wz
12fa8     64 00 90 5D |  if_ne	jmp	#LR__1514
12fac     00 12 06 F6 | 	mov	arg01, #0
12fb0     04 B6 B0 FD | 	call	#__system___getiolock_0423
12fb4     FD 12 02 F6 | 	mov	arg01, result1
12fb8     F8 5C B0 FD | 	call	#__system___lockmem
12fbc     00 28 06 F6 | 	mov	local06, #0
12fc0     00 12 06 F6 | 	mov	arg01, #0
12fc4     0F 15 02 F6 | 	mov	arg02, local01
12fc8     00 16 06 F6 | 	mov	arg03, #0
12fcc     0A 18 06 F6 | 	mov	arg04, #10
12fd0     58 6A B0 FD | 	call	#__system___basic_print_unsigned
12fd4     FD 2A 02 F6 | 	mov	local07, result1
12fd8     14 27 02 F6 | 	mov	local05, local06
12fdc     15 27 02 F1 | 	add	local05, local07
12fe0     00 2C 06 F6 | 	mov	local08, #0
12fe4     00 12 06 F6 | 	mov	arg01, #0
12fe8     09 14 06 F6 | 	mov	arg02, #9
12fec     00 16 06 F6 | 	mov	arg03, #0
12ff0     5C 69 B0 FD | 	call	#__system___basic_print_char
12ff4     FD 2E 02 F6 | 	mov	local09, result1
12ff8     FD 26 02 F1 | 	add	local05, result1
12ffc     00 12 06 F6 | 	mov	arg01, #0
13000     B4 B5 B0 FD | 	call	#__system___getiolock_0423
13004     FD 00 68 FC | 	wrlong	#0, result1
13008     00 FA 05 F6 | 	mov	result1, #0
1300c     00 30 06 F6 | 	mov	local10, #0
13010                 | LR__1514
13010                 | '   if t1.result_type=result_float then print t1.result.fresult,
13010     1E 22 0E F2 | 	cmp	local03, #30 wz
13014     64 00 90 5D |  if_ne	jmp	#LR__1515
13018     00 12 06 F6 | 	mov	arg01, #0
1301c     98 B5 B0 FD | 	call	#__system___getiolock_0423
13020     FD 12 02 F6 | 	mov	arg01, result1
13024     8C 5C B0 FD | 	call	#__system___lockmem
13028     00 28 06 F6 | 	mov	local06, #0
1302c     00 12 06 F6 | 	mov	arg01, #0
13030     0F 15 02 F6 | 	mov	arg02, local01
13034     00 16 06 F6 | 	mov	arg03, #0
13038     23 18 06 F6 | 	mov	arg04, #35
1303c     78 8D B0 FD | 	call	#__system___basic_print_float
13040     FD 2A 02 F6 | 	mov	local07, result1
13044     14 27 02 F6 | 	mov	local05, local06
13048     15 27 02 F1 | 	add	local05, local07
1304c     00 2C 06 F6 | 	mov	local08, #0
13050     00 12 06 F6 | 	mov	arg01, #0
13054     09 14 06 F6 | 	mov	arg02, #9
13058     00 16 06 F6 | 	mov	arg03, #0
1305c     F0 68 B0 FD | 	call	#__system___basic_print_char
13060     FD 2E 02 F6 | 	mov	local09, result1
13064     FD 26 02 F1 | 	add	local05, result1
13068     00 12 06 F6 | 	mov	arg01, #0
1306c     48 B5 B0 FD | 	call	#__system___getiolock_0423
13070     FD 00 68 FC | 	wrlong	#0, result1
13074     00 FA 05 F6 | 	mov	result1, #0
13078     00 30 06 F6 | 	mov	local10, #0
1307c                 | LR__1515
1307c                 | '   if t1.result_type=result_string then print t1.result.sresult,
1307c     1F 22 0E F2 | 	cmp	local03, #31 wz
13080     60 00 90 5D |  if_ne	jmp	#LR__1516
13084     00 12 06 F6 | 	mov	arg01, #0
13088     2C B5 B0 FD | 	call	#__system___getiolock_0423
1308c     FD 12 02 F6 | 	mov	arg01, result1
13090     20 5C B0 FD | 	call	#__system___lockmem
13094     00 28 06 F6 | 	mov	local06, #0
13098     00 12 06 F6 | 	mov	arg01, #0
1309c     0F 15 02 F6 | 	mov	arg02, local01
130a0     00 16 06 F6 | 	mov	arg03, #0
130a4     00 69 B0 FD | 	call	#__system___basic_print_string
130a8     FD 2A 02 F6 | 	mov	local07, result1
130ac     14 27 02 F6 | 	mov	local05, local06
130b0     15 27 02 F1 | 	add	local05, local07
130b4     00 2C 06 F6 | 	mov	local08, #0
130b8     00 12 06 F6 | 	mov	arg01, #0
130bc     09 14 06 F6 | 	mov	arg02, #9
130c0     00 16 06 F6 | 	mov	arg03, #0
130c4     88 68 B0 FD | 	call	#__system___basic_print_char
130c8     FD 2E 02 F6 | 	mov	local09, result1
130cc     FD 26 02 F1 | 	add	local05, result1
130d0     00 12 06 F6 | 	mov	arg01, #0
130d4     E0 B4 B0 FD | 	call	#__system___getiolock_0423
130d8     FD 00 68 FC | 	wrlong	#0, result1
130dc     00 FA 05 F6 | 	mov	result1, #0
130e0     00 30 06 F6 | 	mov	local10, #0
130e4                 | LR__1516
130e4                 | LR__1517
130e4                 | ' if r=print_mod_semicolon then 
130e4     22 24 0E F2 | 	cmp	local04, #34 wz
130e8     1C 01 90 5D |  if_ne	jmp	#LR__1522
130ec                 | '   if t1.result_type=result_int then print t1.result.iresult;
130ec     1C 22 0E F2 | 	cmp	local03, #28 wz
130f0     50 00 90 5D |  if_ne	jmp	#LR__1518
130f4     00 12 06 F6 | 	mov	arg01, #0
130f8     BC B4 B0 FD | 	call	#__system___getiolock_0423
130fc     FD 12 02 F6 | 	mov	arg01, result1
13100     B0 5B B0 FD | 	call	#__system___lockmem
13104     00 28 06 F6 | 	mov	local06, #0
13108     00 30 06 F6 | 	mov	local10, #0
1310c     0A 2C 06 F6 | 	mov	local08, #10
13110     00 12 06 F6 | 	mov	arg01, #0
13114     0F 15 02 F6 | 	mov	arg02, local01
13118     00 16 06 F6 | 	mov	arg03, #0
1311c     0A 18 06 F6 | 	mov	arg04, #10
13120     C8 68 B0 FD | 	call	#__system___basic_print_integer
13124     FD 2A 02 F6 | 	mov	local07, result1
13128     14 27 02 F6 | 	mov	local05, local06
1312c     15 27 02 F1 | 	add	local05, local07
13130     00 12 06 F6 | 	mov	arg01, #0
13134     80 B4 B0 FD | 	call	#__system___getiolock_0423
13138     FD 00 68 FC | 	wrlong	#0, result1
1313c     00 FA 05 F6 | 	mov	result1, #0
13140     00 2E 06 F6 | 	mov	local09, #0
13144                 | LR__1518
13144                 | '   if t1.result_type=result_uint then print t1.result.uresult;
13144     1D 22 0E F2 | 	cmp	local03, #29 wz
13148     50 00 90 5D |  if_ne	jmp	#LR__1519
1314c     00 12 06 F6 | 	mov	arg01, #0
13150     64 B4 B0 FD | 	call	#__system___getiolock_0423
13154     FD 12 02 F6 | 	mov	arg01, result1
13158     58 5B B0 FD | 	call	#__system___lockmem
1315c     00 28 06 F6 | 	mov	local06, #0
13160     00 30 06 F6 | 	mov	local10, #0
13164     0A 2C 06 F6 | 	mov	local08, #10
13168     00 12 06 F6 | 	mov	arg01, #0
1316c     0F 15 02 F6 | 	mov	arg02, local01
13170     00 16 06 F6 | 	mov	arg03, #0
13174     0A 18 06 F6 | 	mov	arg04, #10
13178     B0 68 B0 FD | 	call	#__system___basic_print_unsigned
1317c     FD 2A 02 F6 | 	mov	local07, result1
13180     14 27 02 F6 | 	mov	local05, local06
13184     15 27 02 F1 | 	add	local05, local07
13188     00 12 06 F6 | 	mov	arg01, #0
1318c     28 B4 B0 FD | 	call	#__system___getiolock_0423
13190     FD 00 68 FC | 	wrlong	#0, result1
13194     00 FA 05 F6 | 	mov	result1, #0
13198     00 2E 06 F6 | 	mov	local09, #0
1319c                 | LR__1519
1319c                 | '   if t1.result_type=result_float then print t1.result.fresult;
1319c     1E 22 0E F2 | 	cmp	local03, #30 wz
131a0     30 00 90 5D |  if_ne	jmp	#LR__1520
131a4     00 12 06 F6 | 	mov	arg01, #0
131a8     0C B4 B0 FD | 	call	#__system___getiolock_0423
131ac     FD 12 02 F6 | 	mov	arg01, result1
131b0     00 5B B0 FD | 	call	#__system___lockmem
131b4     00 12 06 F6 | 	mov	arg01, #0
131b8     0F 15 02 F6 | 	mov	arg02, local01
131bc     00 16 06 F6 | 	mov	arg03, #0
131c0     23 18 06 F6 | 	mov	arg04, #35
131c4     F0 8B B0 FD | 	call	#__system___basic_print_float
131c8     00 12 06 F6 | 	mov	arg01, #0
131cc     E8 B3 B0 FD | 	call	#__system___getiolock_0423
131d0     FD 00 68 FC | 	wrlong	#0, result1
131d4                 | LR__1520
131d4                 | '   if t1.result_type=result_string then print t1.result.sresult;
131d4     1F 22 0E F2 | 	cmp	local03, #31 wz
131d8     2C 00 90 5D |  if_ne	jmp	#LR__1521
131dc     00 12 06 F6 | 	mov	arg01, #0
131e0     D4 B3 B0 FD | 	call	#__system___getiolock_0423
131e4     FD 12 02 F6 | 	mov	arg01, result1
131e8     C8 5A B0 FD | 	call	#__system___lockmem
131ec     00 12 06 F6 | 	mov	arg01, #0
131f0     0F 15 02 F6 | 	mov	arg02, local01
131f4     00 16 06 F6 | 	mov	arg03, #0
131f8     AC 67 B0 FD | 	call	#__system___basic_print_string
131fc     00 12 06 F6 | 	mov	arg01, #0
13200     B4 B3 B0 FD | 	call	#__system___getiolock_0423
13204     FD 00 68 FC | 	wrlong	#0, result1
13208                 | LR__1521
13208                 | LR__1522
13208                 | ' if r=0 then 
13208     00 24 0E F2 | 	cmp	local04, #0 wz
1320c     1C 01 90 5D |  if_ne	jmp	#LR__1527
13210                 | '   if t1.result_type=result_int then print t1.result.iresult
13210     1C 22 0E F2 | 	cmp	local03, #28 wz
13214     40 00 90 5D |  if_ne	jmp	#LR__1523
13218     00 12 06 F6 | 	mov	arg01, #0
1321c     98 B3 B0 FD | 	call	#__system___getiolock_0423
13220     FD 12 02 F6 | 	mov	arg01, result1
13224     8C 5A B0 FD | 	call	#__system___lockmem
13228     00 12 06 F6 | 	mov	arg01, #0
1322c     0F 15 02 F6 | 	mov	arg02, local01
13230     00 16 06 F6 | 	mov	arg03, #0
13234     0A 18 06 F6 | 	mov	arg04, #10
13238     B0 67 B0 FD | 	call	#__system___basic_print_integer
1323c     00 12 06 F6 | 	mov	arg01, #0
13240     0A 14 06 F6 | 	mov	arg02, #10
13244     00 16 06 F6 | 	mov	arg03, #0
13248     04 67 B0 FD | 	call	#__system___basic_print_char
1324c     00 12 06 F6 | 	mov	arg01, #0
13250     64 B3 B0 FD | 	call	#__system___getiolock_0423
13254     FD 00 68 FC | 	wrlong	#0, result1
13258                 | LR__1523
13258                 | '   if t1.result_type=result_uint then print t1.result.uresult
13258     1D 22 0E F2 | 	cmp	local03, #29 wz
1325c     40 00 90 5D |  if_ne	jmp	#LR__1524
13260     00 12 06 F6 | 	mov	arg01, #0
13264     50 B3 B0 FD | 	call	#__system___getiolock_0423
13268     FD 12 02 F6 | 	mov	arg01, result1
1326c     44 5A B0 FD | 	call	#__system___lockmem
13270     00 12 06 F6 | 	mov	arg01, #0
13274     0F 15 02 F6 | 	mov	arg02, local01
13278     00 16 06 F6 | 	mov	arg03, #0
1327c     0A 18 06 F6 | 	mov	arg04, #10
13280     A8 67 B0 FD | 	call	#__system___basic_print_unsigned
13284     00 12 06 F6 | 	mov	arg01, #0
13288     0A 14 06 F6 | 	mov	arg02, #10
1328c     00 16 06 F6 | 	mov	arg03, #0
13290     BC 66 B0 FD | 	call	#__system___basic_print_char
13294     00 12 06 F6 | 	mov	arg01, #0
13298     1C B3 B0 FD | 	call	#__system___getiolock_0423
1329c     FD 00 68 FC | 	wrlong	#0, result1
132a0                 | LR__1524
132a0                 | '   if t1.result_type=result_float then print t1.result.fresult
132a0     1E 22 0E F2 | 	cmp	local03, #30 wz
132a4     40 00 90 5D |  if_ne	jmp	#LR__1525
132a8     00 12 06 F6 | 	mov	arg01, #0
132ac     08 B3 B0 FD | 	call	#__system___getiolock_0423
132b0     FD 12 02 F6 | 	mov	arg01, result1
132b4     FC 59 B0 FD | 	call	#__system___lockmem
132b8     00 12 06 F6 | 	mov	arg01, #0
132bc     0F 15 02 F6 | 	mov	arg02, local01
132c0     00 16 06 F6 | 	mov	arg03, #0
132c4     23 18 06 F6 | 	mov	arg04, #35
132c8     EC 8A B0 FD | 	call	#__system___basic_print_float
132cc     00 12 06 F6 | 	mov	arg01, #0
132d0     0A 14 06 F6 | 	mov	arg02, #10
132d4     00 16 06 F6 | 	mov	arg03, #0
132d8     74 66 B0 FD | 	call	#__system___basic_print_char
132dc     00 12 06 F6 | 	mov	arg01, #0
132e0     D4 B2 B0 FD | 	call	#__system___getiolock_0423
132e4     FD 00 68 FC | 	wrlong	#0, result1
132e8                 | LR__1525
132e8                 | '   if t1.result_type=result_string then print t1.result.sresult
132e8     1F 22 0E F2 | 	cmp	local03, #31 wz
132ec     3C 00 90 5D |  if_ne	jmp	#LR__1526
132f0     00 12 06 F6 | 	mov	arg01, #0
132f4     C0 B2 B0 FD | 	call	#__system___getiolock_0423
132f8     FD 12 02 F6 | 	mov	arg01, result1
132fc     B4 59 B0 FD | 	call	#__system___lockmem
13300     00 12 06 F6 | 	mov	arg01, #0
13304     0F 15 02 F6 | 	mov	arg02, local01
13308     00 16 06 F6 | 	mov	arg03, #0
1330c     98 66 B0 FD | 	call	#__system___basic_print_string
13310     00 12 06 F6 | 	mov	arg01, #0
13314     0A 14 06 F6 | 	mov	arg02, #10
13318     00 16 06 F6 | 	mov	arg03, #0
1331c     30 66 B0 FD | 	call	#__system___basic_print_char
13320     00 12 06 F6 | 	mov	arg01, #0
13324     90 B2 B0 FD | 	call	#__system___getiolock_0423
13328     FD 00 68 FC | 	wrlong	#0, result1
1332c                 | LR__1526
1332c                 | LR__1527
1332c                 | ' if r=print_mod_empty then print
1332c     20 24 0E F2 | 	cmp	local04, #32 wz
13330     2C 00 90 5D |  if_ne	jmp	#LR__1528
13334     00 12 06 F6 | 	mov	arg01, #0
13338     7C B2 B0 FD | 	call	#__system___getiolock_0423
1333c     FD 12 02 F6 | 	mov	arg01, result1
13340     70 59 B0 FD | 	call	#__system___lockmem
13344     00 12 06 F6 | 	mov	arg01, #0
13348     0A 14 06 F6 | 	mov	arg02, #10
1334c     00 16 06 F6 | 	mov	arg03, #0
13350     FC 65 B0 FD | 	call	#__system___basic_print_char
13354     00 12 06 F6 | 	mov	arg01, #0
13358     5C B2 B0 FD | 	call	#__system___getiolock_0423
1335c     FD 00 68 FC | 	wrlong	#0, result1
13360                 | LR__1528
13360                 | LR__1529
13360     A7 F0 03 F6 | 	mov	ptra, fp
13364     B2 00 A0 FD | 	call	#popregs_
13368                 | _do_print_ret
13368     2D 00 64 FD | 	ret
1336c                 | 
1336c                 | ' 
1336c                 | ' 
1336c                 | ' sub do_paper
1336c                 | _do_paper
1336c     03 4A 05 F6 | 	mov	COUNT_, #3
13370     A8 00 A0 FD | 	call	#pushregs_
13374     44 65 BF FD | 	call	#_pop
13378     FD 1E 02 F6 | 	mov	local01, result1
1337c     FE 20 02 F6 | 	mov	local02, result2
13380     FF 22 02 F6 | 	mov	local03, result3
13384                 | ' t1=pop() 
13384                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
13384     1E 22 0E F2 | 	cmp	local03, #30 wz
13388     10 00 90 5D |  if_ne	jmp	#LR__1530
1338c     0F 13 02 F6 | 	mov	arg01, local01
13390     00 14 06 F6 | 	mov	arg02, #0
13394     D0 88 B0 FD | 	call	#__system___float_tointeger
13398     FD 1E 02 F6 | 	mov	local01, result1
1339c                 | LR__1530
1339c                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
1339c     1F 22 0E F2 | 	cmp	local03, #31 wz
133a0     18 00 90 5D |  if_ne	jmp	#LR__1531
133a4     0F 13 02 F6 | 	mov	arg01, local01
133a8     DC 8B B0 FD | 	call	#__system____builtin_atof
133ac     FD 12 02 F6 | 	mov	arg01, result1
133b0     00 14 06 F6 | 	mov	arg02, #0
133b4     B0 88 B0 FD | 	call	#__system___float_tointeger
133b8     FD 1E 02 F6 | 	mov	local01, result1
133bc                 | LR__1531
133bc     56 00 00 FF 
133c0     0C E4 05 F1 | 	add	objptr, ##44044
133c4     F2 1E 62 FC | 	wrlong	local01, objptr
133c8     04 E4 05 F1 | 	add	objptr, #4
133cc     F2 12 02 FB | 	rdlong	arg01, objptr
133d0                 | ' 
133d0                 | ' write_color:=ff
133d0     55 00 00 FF 
133d4     D3 E5 85 F1 | 	sub	objptr, ##43987
133d8     F2 12 62 FC | 	wrlong	arg01, objptr
133dc                 | ' write_background:=bb
133dc     04 E4 05 F1 | 	add	objptr, #4
133e0     F2 1E 62 FC | 	wrlong	local01, objptr
133e4     41 E4 85 F1 | 	sub	objptr, #65
133e8     A7 F0 03 F6 | 	mov	ptra, fp
133ec     B2 00 A0 FD | 	call	#popregs_
133f0                 | _do_paper_ret
133f0     2D 00 64 FD | 	ret
133f4                 | 
133f4                 | ' 
133f4                 | ' sub do_ink
133f4                 | _do_ink
133f4     03 4A 05 F6 | 	mov	COUNT_, #3
133f8     A8 00 A0 FD | 	call	#pushregs_
133fc     BC 64 BF FD | 	call	#_pop
13400     FD 1E 02 F6 | 	mov	local01, result1
13404     FE 20 02 F6 | 	mov	local02, result2
13408     FF 22 02 F6 | 	mov	local03, result3
1340c                 | ' t1=pop() 
1340c                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
1340c     1E 22 0E F2 | 	cmp	local03, #30 wz
13410     10 00 90 5D |  if_ne	jmp	#LR__1540
13414     0F 13 02 F6 | 	mov	arg01, local01
13418     00 14 06 F6 | 	mov	arg02, #0
1341c     48 88 B0 FD | 	call	#__system___float_tointeger
13420     FD 1E 02 F6 | 	mov	local01, result1
13424                 | LR__1540
13424                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
13424     1F 22 0E F2 | 	cmp	local03, #31 wz
13428     18 00 90 5D |  if_ne	jmp	#LR__1541
1342c     0F 13 02 F6 | 	mov	arg01, local01
13430     54 8B B0 FD | 	call	#__system____builtin_atof
13434     FD 12 02 F6 | 	mov	arg01, result1
13438     00 14 06 F6 | 	mov	arg02, #0
1343c     28 88 B0 FD | 	call	#__system___float_tointeger
13440     FD 1E 02 F6 | 	mov	local01, result1
13444                 | LR__1541
13444     56 00 00 FF 
13448     10 E4 05 F1 | 	add	objptr, ##44048
1344c     F2 1E 62 FC | 	wrlong	local01, objptr
13450     04 E4 85 F1 | 	sub	objptr, #4
13454     F2 14 02 FB | 	rdlong	arg02, objptr
13458                 | ' 
13458                 | ' write_color:=ff
13458     55 00 00 FF 
1345c     CF E5 85 F1 | 	sub	objptr, ##43983
13460     F2 1E 62 FC | 	wrlong	local01, objptr
13464                 | ' write_background:=bb
13464     04 E4 05 F1 | 	add	objptr, #4
13468     F2 14 62 FC | 	wrlong	arg02, objptr
1346c     55 00 00 FF 
13470     CF E5 05 F1 | 	add	objptr, ##43983
13474     F2 12 02 FB | 	rdlong	arg01, objptr
13478     56 00 00 FF 
1347c     10 E4 85 F1 | 	sub	objptr, ##44048
13480     04 35 B0 FD | 	call	#_hg010b_spin2_setcursorcolor
13484     A7 F0 03 F6 | 	mov	ptra, fp
13488     B2 00 A0 FD | 	call	#popregs_
1348c                 | _do_ink_ret
1348c     2D 00 64 FD | 	ret
13490                 | 
13490                 | ' 
13490                 | ' 
13490                 | ' sub do_font
13490                 | _do_font
13490     03 4A 05 F6 | 	mov	COUNT_, #3
13494     A8 00 A0 FD | 	call	#pushregs_
13498     20 64 BF FD | 	call	#_pop
1349c     FD 1E 02 F6 | 	mov	local01, result1
134a0     FE 20 02 F6 | 	mov	local02, result2
134a4     FF 22 02 F6 | 	mov	local03, result3
134a8                 | ' t1=pop() 
134a8                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
134a8     1E 22 0E F2 | 	cmp	local03, #30 wz
134ac     10 00 90 5D |  if_ne	jmp	#LR__1550
134b0     0F 13 02 F6 | 	mov	arg01, local01
134b4     00 14 06 F6 | 	mov	arg02, #0
134b8     AC 87 B0 FD | 	call	#__system___float_tointeger
134bc     FD 1E 02 F6 | 	mov	local01, result1
134c0                 | LR__1550
134c0                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
134c0     1F 22 0E F2 | 	cmp	local03, #31 wz
134c4     18 00 90 5D |  if_ne	jmp	#LR__1551
134c8     0F 13 02 F6 | 	mov	arg01, local01
134cc     B8 8A B0 FD | 	call	#__system____builtin_atof
134d0     FD 12 02 F6 | 	mov	arg01, result1
134d4     00 14 06 F6 | 	mov	arg02, #0
134d8     8C 87 B0 FD | 	call	#__system___float_tointeger
134dc     FD 1E 02 F6 | 	mov	local01, result1
134e0                 | LR__1551
134e0     56 00 00 FF 
134e4     14 E4 05 F1 | 	add	objptr, ##44052
134e8     F2 1E 62 FC | 	wrlong	local01, objptr
134ec     56 00 00 FF 
134f0     14 E4 85 F1 | 	sub	objptr, ##44052
134f4     02 1E 66 F0 | 	shl	local01, #2
134f8     0F 13 02 F6 | 	mov	arg01, local01
134fc     E8 43 B0 FD | 	call	#_hg010b_spin2_setfontfamily
13500     A7 F0 03 F6 | 	mov	ptra, fp
13504     B2 00 A0 FD | 	call	#popregs_
13508                 | _do_font_ret
13508     2D 00 64 FD | 	ret
1350c                 | 
1350c                 | ' 
1350c                 | ' sub do_mode
1350c                 | _do_mode
1350c     04 4A 05 F6 | 	mov	COUNT_, #4
13510     A8 00 A0 FD | 	call	#pushregs_
13514     A4 63 BF FD | 	call	#_pop
13518     FD 1E 02 F6 | 	mov	local01, result1
1351c     FE 20 02 F6 | 	mov	local02, result2
13520     FF 22 02 F6 | 	mov	local03, result3
13524                 | ' t1=pop() 
13524                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
13524     1E 22 0E F2 | 	cmp	local03, #30 wz
13528     10 00 90 5D |  if_ne	jmp	#LR__1560
1352c     0F 13 02 F6 | 	mov	arg01, local01
13530     00 14 06 F6 | 	mov	arg02, #0
13534     30 87 B0 FD | 	call	#__system___float_tointeger
13538     FD 1E 02 F6 | 	mov	local01, result1
1353c                 | LR__1560
1353c                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
1353c     1F 22 0E F2 | 	cmp	local03, #31 wz
13540     18 00 90 5D |  if_ne	jmp	#LR__1561
13544     0F 13 02 F6 | 	mov	arg01, local01
13548     3C 8A B0 FD | 	call	#__system____builtin_atof
1354c     FD 12 02 F6 | 	mov	arg01, result1
13550     00 14 06 F6 | 	mov	arg02, #0
13554     10 87 B0 FD | 	call	#__system___float_tointeger
13558     FD 1E 02 F6 | 	mov	local01, result1
1355c                 | LR__1561
1355c                 | ' select case t1.result.iresult
1355c     0F 25 02 F6 | 	mov	local04, local01
13560     05 24 26 F3 | 	fle	local04, #5
13564     30 24 62 FD | 	jmprel	local04
13568                 | LR__1562
13568     14 00 90 FD | 	jmp	#LR__1563
1356c     A8 00 90 FD | 	jmp	#LR__1564
13570     10 01 90 FD | 	jmp	#LR__1565
13574     78 01 90 FD | 	jmp	#LR__1566
13578     E0 01 90 FD | 	jmp	#LR__1567
1357c     70 02 90 FD | 	jmp	#LR__1568
13580                 | LR__1563
13580     56 00 00 FF 
13584     14 E4 05 F1 | 	add	objptr, ##44052
13588     F2 02 68 FC | 	wrlong	#1, objptr
1358c     04 E4 85 F1 | 	sub	objptr, #4
13590     F2 34 69 FC | 	wrlong	#154, objptr
13594     22 00 00 FF 
13598     A4 E5 05 F1 | 	add	objptr, ##17828
1359c     F2 02 68 FC | 	wrlong	#1, objptr
135a0     22 00 00 FF 
135a4     A8 E5 85 F1 | 	sub	objptr, ##17832
135a8     F2 26 69 FC | 	wrlong	#147, objptr
135ac     56 00 00 FF 
135b0     0C E4 85 F1 | 	sub	objptr, ##44044
135b4     04 12 06 F6 | 	mov	arg01, #4
135b8     2C 43 B0 FD | 	call	#_hg010b_spin2_setfontfamily
135bc     56 00 00 FF 
135c0     10 E4 05 F1 | 	add	objptr, ##44048
135c4     F2 12 02 FB | 	rdlong	arg01, objptr
135c8     04 E4 85 F1 | 	sub	objptr, #4
135cc     F2 14 02 FB | 	rdlong	arg02, objptr
135d0                 | ' 
135d0                 | ' write_color:=ff
135d0     55 00 00 FF 
135d4     CF E5 85 F1 | 	sub	objptr, ##43983
135d8     F2 12 62 FC | 	wrlong	arg01, objptr
135dc                 | ' write_background:=bb
135dc     04 E4 05 F1 | 	add	objptr, #4
135e0     F2 14 62 FC | 	wrlong	arg02, objptr
135e4     01 00 00 FF 
135e8     00 EA 05 F1 | 	add	ptr__dat__, ##512
135ec     7A 00 00 FF 
135f0     17 E4 05 F1 | 	add	objptr, ##62487
135f4     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
135f8     04 E4 85 F1 | 	sub	objptr, #4
135fc     03 00 80 FF 
13600     F2 28 69 FC | 	wrlong	##1684, objptr
13604     7A 00 00 FF 
13608     54 E4 85 F1 | 	sub	objptr, ##62548
1360c     01 00 00 FF 
13610     00 EA 85 F1 | 	sub	ptr__dat__, ##512
13614     D8 01 90 FD | 	jmp	#LR__1568
13618                 | LR__1564
13618     56 00 00 FF 
1361c     14 E4 05 F1 | 	add	objptr, ##44052
13620     F2 00 68 FC | 	wrlong	#0, objptr
13624     04 E4 85 F1 | 	sub	objptr, #4
13628     F2 2E 68 FC | 	wrlong	#23, objptr
1362c     22 00 00 FF 
13630     A4 E5 05 F1 | 	add	objptr, ##17828
13634     F2 00 68 FC | 	wrlong	#0, objptr
13638     22 00 00 FF 
1363c     A8 E5 85 F1 | 	sub	objptr, ##17832
13640     F2 00 68 FC | 	wrlong	#0, objptr
13644     56 00 00 FF 
13648     0C E4 85 F1 | 	sub	objptr, ##44044
1364c     00 12 06 F6 | 	mov	arg01, #0
13650     94 42 B0 FD | 	call	#_hg010b_spin2_setfontfamily
13654     56 00 00 FF 
13658     10 E4 05 F1 | 	add	objptr, ##44048
1365c     F2 12 02 FB | 	rdlong	arg01, objptr
13660     04 E4 85 F1 | 	sub	objptr, #4
13664     F2 14 02 FB | 	rdlong	arg02, objptr
13668                 | ' 
13668                 | ' write_color:=ff
13668     55 00 00 FF 
1366c     CF E5 85 F1 | 	sub	objptr, ##43983
13670     F2 12 62 FC | 	wrlong	arg01, objptr
13674                 | ' write_background:=bb
13674     04 E4 05 F1 | 	add	objptr, #4
13678     F2 14 62 FC | 	wrlong	arg02, objptr
1367c     41 E4 85 F1 | 	sub	objptr, #65
13680     6C 01 90 FD | 	jmp	#LR__1568
13684                 | LR__1565
13684     56 00 00 FF 
13688     14 E4 05 F1 | 	add	objptr, ##44052
1368c     F2 00 68 FC | 	wrlong	#0, objptr
13690     04 E4 85 F1 | 	sub	objptr, #4
13694     F2 6A 69 FC | 	wrlong	#181, objptr
13698     22 00 00 FF 
1369c     A4 E5 05 F1 | 	add	objptr, ##17828
136a0     F2 00 68 FC | 	wrlong	#0, objptr
136a4     22 00 00 FF 
136a8     A8 E5 85 F1 | 	sub	objptr, ##17832
136ac     F2 00 68 FC | 	wrlong	#0, objptr
136b0     56 00 00 FF 
136b4     0C E4 85 F1 | 	sub	objptr, ##44044
136b8     00 12 06 F6 | 	mov	arg01, #0
136bc     28 42 B0 FD | 	call	#_hg010b_spin2_setfontfamily
136c0     56 00 00 FF 
136c4     10 E4 05 F1 | 	add	objptr, ##44048
136c8     F2 12 02 FB | 	rdlong	arg01, objptr
136cc     04 E4 85 F1 | 	sub	objptr, #4
136d0     F2 14 02 FB | 	rdlong	arg02, objptr
136d4                 | ' 
136d4                 | ' write_color:=ff
136d4     55 00 00 FF 
136d8     CF E5 85 F1 | 	sub	objptr, ##43983
136dc     F2 12 62 FC | 	wrlong	arg01, objptr
136e0                 | ' write_background:=bb
136e0     04 E4 05 F1 | 	add	objptr, #4
136e4     F2 14 62 FC | 	wrlong	arg02, objptr
136e8     41 E4 85 F1 | 	sub	objptr, #65
136ec     00 01 90 FD | 	jmp	#LR__1568
136f0                 | LR__1566
136f0     56 00 00 FF 
136f4     14 E4 05 F1 | 	add	objptr, ##44052
136f8     F2 00 68 FC | 	wrlong	#0, objptr
136fc     04 E4 85 F1 | 	sub	objptr, #4
13700     F2 1E 68 FC | 	wrlong	#15, objptr
13704     22 00 00 FF 
13708     A4 E5 05 F1 | 	add	objptr, ##17828
1370c     F2 00 68 FC | 	wrlong	#0, objptr
13710     22 00 00 FF 
13714     A8 E5 85 F1 | 	sub	objptr, ##17832
13718     F2 00 68 FC | 	wrlong	#0, objptr
1371c     56 00 00 FF 
13720     0C E4 85 F1 | 	sub	objptr, ##44044
13724     00 12 06 F6 | 	mov	arg01, #0
13728     BC 41 B0 FD | 	call	#_hg010b_spin2_setfontfamily
1372c     56 00 00 FF 
13730     10 E4 05 F1 | 	add	objptr, ##44048
13734     F2 12 02 FB | 	rdlong	arg01, objptr
13738     04 E4 85 F1 | 	sub	objptr, #4
1373c     F2 14 02 FB | 	rdlong	arg02, objptr
13740                 | ' 
13740                 | ' write_color:=ff
13740     55 00 00 FF 
13744     CF E5 85 F1 | 	sub	objptr, ##43983
13748     F2 12 62 FC | 	wrlong	arg01, objptr
1374c                 | ' write_background:=bb
1374c     04 E4 05 F1 | 	add	objptr, #4
13750     F2 14 62 FC | 	wrlong	arg02, objptr
13754     41 E4 85 F1 | 	sub	objptr, #65
13758     94 00 90 FD | 	jmp	#LR__1568
1375c                 | LR__1567
1375c     56 00 00 FF 
13760     14 E4 05 F1 | 	add	objptr, ##44052
13764     F2 02 68 FC | 	wrlong	#1, objptr
13768     04 E4 85 F1 | 	sub	objptr, #4
1376c     F2 02 68 FC | 	wrlong	#1, objptr
13770     22 00 00 FF 
13774     A4 E5 05 F1 | 	add	objptr, ##17828
13778     F2 02 68 FC | 	wrlong	#1, objptr
1377c     22 00 00 FF 
13780     A8 E5 85 F1 | 	sub	objptr, ##17832
13784     F2 1C 68 FC | 	wrlong	#14, objptr
13788     56 00 00 FF 
1378c     0C E4 85 F1 | 	sub	objptr, ##44044
13790     04 12 06 F6 | 	mov	arg01, #4
13794     50 41 B0 FD | 	call	#_hg010b_spin2_setfontfamily
13798     56 00 00 FF 
1379c     10 E4 05 F1 | 	add	objptr, ##44048
137a0     F2 12 02 FB | 	rdlong	arg01, objptr
137a4     04 E4 85 F1 | 	sub	objptr, #4
137a8     F2 14 02 FB | 	rdlong	arg02, objptr
137ac                 | ' 
137ac                 | ' write_color:=ff
137ac     55 00 00 FF 
137b0     CF E5 85 F1 | 	sub	objptr, ##43983
137b4     F2 12 62 FC | 	wrlong	arg01, objptr
137b8                 | ' write_background:=bb
137b8     04 E4 05 F1 | 	add	objptr, #4
137bc     F2 14 62 FC | 	wrlong	arg02, objptr
137c0     07 00 00 FF 
137c4     72 EB 05 F1 | 	add	ptr__dat__, ##3954
137c8     7A 00 00 FF 
137cc     17 E4 05 F1 | 	add	objptr, ##62487
137d0     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
137d4     04 E4 85 F1 | 	sub	objptr, #4
137d8     03 00 80 FF 
137dc     F2 28 69 FC | 	wrlong	##1684, objptr
137e0     7A 00 00 FF 
137e4     54 E4 85 F1 | 	sub	objptr, ##62548
137e8     07 00 00 FF 
137ec     72 EB 85 F1 | 	sub	ptr__dat__, ##3954
137f0                 | LR__1568
137f0     7A 00 00 FF 
137f4     50 E4 05 F1 | 	add	objptr, ##62544
137f8     F2 1E 62 FC | 	wrlong	local01, objptr
137fc     24 00 00 FF 
13800     40 E4 85 F1 | 	sub	objptr, ##18496
13804     F2 12 02 FB | 	rdlong	arg01, objptr
13808     04 E4 85 F1 | 	sub	objptr, #4
1380c     F2 14 02 FB | 	rdlong	arg02, objptr
13810     56 00 00 FF 
13814     0C E4 85 F1 | 	sub	objptr, ##44044
13818     B4 41 B0 FD | 	call	#_hg010b_spin2_cls
1381c     43 01 00 FF 
13820     76 13 06 F6 | 	mov	arg01, ##@LR__4615
13824                 | ' 
13824                 | ' write(text)
13824     64 44 B0 FD | 	call	#_hg010b_spin2_write
13828                 | ' crlf
13828     C0 45 B0 FD | 	call	#_hg010b_spin2_crlf
1382c     10 00 00 FF 
13830     10 EB 05 F1 | 	add	ptr__dat__, ##8464
13834     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
13838     10 00 00 FF 
1383c     10 EB 85 F1 | 	sub	ptr__dat__, ##8464
13840                 | ' 
13840                 | ' write(text)
13840     48 44 B0 FD | 	call	#_hg010b_spin2_write
13844                 | ' crlf
13844     A4 45 B0 FD | 	call	#_hg010b_spin2_crlf
13848     78 00 00 FF 
1384c     B0 E5 05 F1 | 	add	objptr, ##61872
13850     F2 12 02 FB | 	rdlong	arg01, objptr
13854     78 00 00 FF 
13858     B0 E5 85 F1 | 	sub	objptr, ##61872
1385c                 | ' 
1385c                 | ' write(text)
1385c     2C 44 B0 FD | 	call	#_hg010b_spin2_write
13860                 | ' crlf
13860     88 45 B0 FD | 	call	#_hg010b_spin2_crlf
13864     A7 F0 03 F6 | 	mov	ptra, fp
13868     B2 00 A0 FD | 	call	#popregs_
1386c                 | _do_mode_ret
1386c     2D 00 64 FD | 	ret
13870                 | 
13870                 | ' 
13870                 | ' 
13870                 | ' 
13870                 | ' sub do_pinwrite
13870                 | _do_pinwrite
13870     01 4A 05 F6 | 	mov	COUNT_, #1
13874     A8 00 A0 FD | 	call	#pushregs_
13878     18 F0 07 F1 | 	add	ptra, #24
1387c     3C 60 BF FD | 	call	#_pop
13880     FD 14 02 F6 | 	mov	arg02, result1
13884     FE 12 02 F6 | 	mov	arg01, result2
13888     FF 1E 02 F6 | 	mov	local01, result3
1388c     A7 14 62 FC | 	wrlong	arg02, fp
13890     04 4E 05 F1 | 	add	fp, #4
13894     A7 12 62 FC | 	wrlong	arg01, fp
13898     04 4E 05 F1 | 	add	fp, #4
1389c     A7 1E 62 FC | 	wrlong	local01, fp
138a0     08 4E 85 F1 | 	sub	fp, #8
138a4     14 60 BF FD | 	call	#_pop
138a8     FF 1E 02 F6 | 	mov	local01, result3
138ac     0C 4E 05 F1 | 	add	fp, #12
138b0     A7 FA 61 FC | 	wrlong	result1, fp
138b4     04 4E 05 F1 | 	add	fp, #4
138b8     A7 FC 61 FC | 	wrlong	result2, fp
138bc     04 4E 05 F1 | 	add	fp, #4
138c0     A7 1E 62 FC | 	wrlong	local01, fp
138c4     08 4E 85 F1 | 	sub	fp, #8
138c8     A7 12 02 F6 | 	mov	arg01, fp
138cc     0C 4E 85 F1 | 	sub	fp, #12
138d0     CC D4 BF FD | 	call	#_converttoint
138d4     FD 1E 02 F6 | 	mov	local01, result1
138d8     A7 12 02 F6 | 	mov	arg01, fp
138dc     C0 D4 BF FD | 	call	#_converttoint
138e0     FD 14 02 F6 | 	mov	arg02, result1
138e4     0F 13 02 F6 | 	mov	arg01, local01
138e8     7C 55 B0 FD | 	call	#__system___pinwrite
138ec     A7 F0 03 F6 | 	mov	ptra, fp
138f0     B2 00 A0 FD | 	call	#popregs_
138f4                 | _do_pinwrite_ret
138f4     2D 00 64 FD | 	ret
138f8                 | 
138f8                 | ' 
138f8                 | ' sub do_pinfloat
138f8                 | _do_pinfloat
138f8     00 4A 05 F6 | 	mov	COUNT_, #0
138fc     A8 00 A0 FD | 	call	#pushregs_
13900     0C F0 07 F1 | 	add	ptra, #12
13904     B4 5F BF FD | 	call	#_pop
13908     A7 FA 61 FC | 	wrlong	result1, fp
1390c     04 4E 05 F1 | 	add	fp, #4
13910     A7 FC 61 FC | 	wrlong	result2, fp
13914     04 4E 05 F1 | 	add	fp, #4
13918     A7 FE 61 FC | 	wrlong	result3, fp
1391c     08 4E 85 F1 | 	sub	fp, #8
13920     A7 12 02 F6 | 	mov	arg01, fp
13924     78 D4 BF FD | 	call	#_converttoint
13928     50 FA 61 FD | 	fltl	result1
1392c     A7 F0 03 F6 | 	mov	ptra, fp
13930     B2 00 A0 FD | 	call	#popregs_
13934                 | _do_pinfloat_ret
13934     2D 00 64 FD | 	ret
13938                 | 
13938                 | ' 
13938                 | ' sub do_pinlo
13938                 | _do_pinlo
13938     00 4A 05 F6 | 	mov	COUNT_, #0
1393c     A8 00 A0 FD | 	call	#pushregs_
13940     0C F0 07 F1 | 	add	ptra, #12
13944     74 5F BF FD | 	call	#_pop
13948     A7 FA 61 FC | 	wrlong	result1, fp
1394c     04 4E 05 F1 | 	add	fp, #4
13950     A7 FC 61 FC | 	wrlong	result2, fp
13954     04 4E 05 F1 | 	add	fp, #4
13958     A7 FE 61 FC | 	wrlong	result3, fp
1395c     08 4E 85 F1 | 	sub	fp, #8
13960     A7 12 02 F6 | 	mov	arg01, fp
13964     38 D4 BF FD | 	call	#_converttoint
13968     58 FA 61 FD | 	drvl	result1
1396c     A7 F0 03 F6 | 	mov	ptra, fp
13970     B2 00 A0 FD | 	call	#popregs_
13974                 | _do_pinlo_ret
13974     2D 00 64 FD | 	ret
13978                 | 
13978                 | ' 
13978                 | ' sub do_pinhi
13978                 | _do_pinhi
13978     00 4A 05 F6 | 	mov	COUNT_, #0
1397c     A8 00 A0 FD | 	call	#pushregs_
13980     0C F0 07 F1 | 	add	ptra, #12
13984     34 5F BF FD | 	call	#_pop
13988     A7 FA 61 FC | 	wrlong	result1, fp
1398c     04 4E 05 F1 | 	add	fp, #4
13990     A7 FC 61 FC | 	wrlong	result2, fp
13994     04 4E 05 F1 | 	add	fp, #4
13998     A7 FE 61 FC | 	wrlong	result3, fp
1399c     08 4E 85 F1 | 	sub	fp, #8
139a0     A7 12 02 F6 | 	mov	arg01, fp
139a4     F8 D3 BF FD | 	call	#_converttoint
139a8     59 FA 61 FD | 	drvh	result1
139ac     A7 F0 03 F6 | 	mov	ptra, fp
139b0     B2 00 A0 FD | 	call	#popregs_
139b4                 | _do_pinhi_ret
139b4     2D 00 64 FD | 	ret
139b8                 | 
139b8                 | ' 
139b8                 | ' sub do_pintoggle
139b8                 | _do_pintoggle
139b8     00 4A 05 F6 | 	mov	COUNT_, #0
139bc     A8 00 A0 FD | 	call	#pushregs_
139c0     0C F0 07 F1 | 	add	ptra, #12
139c4     F4 5E BF FD | 	call	#_pop
139c8     A7 FA 61 FC | 	wrlong	result1, fp
139cc     04 4E 05 F1 | 	add	fp, #4
139d0     A7 FC 61 FC | 	wrlong	result2, fp
139d4     04 4E 05 F1 | 	add	fp, #4
139d8     A7 FE 61 FC | 	wrlong	result3, fp
139dc     08 4E 85 F1 | 	sub	fp, #8
139e0     A7 12 02 F6 | 	mov	arg01, fp
139e4     B8 D3 BF FD | 	call	#_converttoint
139e8     5F FA 61 FD | 	drvnot	result1
139ec     A7 F0 03 F6 | 	mov	ptra, fp
139f0     B2 00 A0 FD | 	call	#popregs_
139f4                 | _do_pintoggle_ret
139f4     2D 00 64 FD | 	ret
139f8                 | 
139f8                 | ' 
139f8                 | ' 
139f8                 | ' sub do_pinstart
139f8                 | _do_pinstart
139f8     03 4A 05 F6 | 	mov	COUNT_, #3
139fc     A8 00 A0 FD | 	call	#pushregs_
13a00     30 F0 07 F1 | 	add	ptra, #48
13a04     B4 5E BF FD | 	call	#_pop
13a08     FD 16 02 F6 | 	mov	arg03, result1
13a0c     FE 14 02 F6 | 	mov	arg02, result2
13a10     FF 18 02 F6 | 	mov	arg04, result3
13a14     A7 16 62 FC | 	wrlong	arg03, fp
13a18     04 4E 05 F1 | 	add	fp, #4
13a1c     A7 14 62 FC | 	wrlong	arg02, fp
13a20     04 4E 05 F1 | 	add	fp, #4
13a24     A7 18 62 FC | 	wrlong	arg04, fp
13a28     08 4E 85 F1 | 	sub	fp, #8
13a2c     8C 5E BF FD | 	call	#_pop
13a30     FD 16 02 F6 | 	mov	arg03, result1
13a34     FE 14 02 F6 | 	mov	arg02, result2
13a38     FF 18 02 F6 | 	mov	arg04, result3
13a3c     0C 4E 05 F1 | 	add	fp, #12
13a40     A7 16 62 FC | 	wrlong	arg03, fp
13a44     04 4E 05 F1 | 	add	fp, #4
13a48     A7 14 62 FC | 	wrlong	arg02, fp
13a4c     04 4E 05 F1 | 	add	fp, #4
13a50     A7 18 62 FC | 	wrlong	arg04, fp
13a54     14 4E 85 F1 | 	sub	fp, #20
13a58     60 5E BF FD | 	call	#_pop
13a5c     FD 16 02 F6 | 	mov	arg03, result1
13a60     FE 14 02 F6 | 	mov	arg02, result2
13a64     FF 18 02 F6 | 	mov	arg04, result3
13a68     18 4E 05 F1 | 	add	fp, #24
13a6c     A7 16 62 FC | 	wrlong	arg03, fp
13a70     04 4E 05 F1 | 	add	fp, #4
13a74     A7 14 62 FC | 	wrlong	arg02, fp
13a78     04 4E 05 F1 | 	add	fp, #4
13a7c     A7 18 62 FC | 	wrlong	arg04, fp
13a80     20 4E 85 F1 | 	sub	fp, #32
13a84     34 5E BF FD | 	call	#_pop
13a88     FF 16 02 F6 | 	mov	arg03, result3
13a8c     24 4E 05 F1 | 	add	fp, #36
13a90     A7 FA 61 FC | 	wrlong	result1, fp
13a94     04 4E 05 F1 | 	add	fp, #4
13a98     A7 FC 61 FC | 	wrlong	result2, fp
13a9c     04 4E 05 F1 | 	add	fp, #4
13aa0     A7 16 62 FC | 	wrlong	arg03, fp
13aa4     08 4E 85 F1 | 	sub	fp, #8
13aa8     A7 12 02 F6 | 	mov	arg01, fp
13aac     24 4E 85 F1 | 	sub	fp, #36
13ab0     EC D2 BF FD | 	call	#_converttoint
13ab4     FD 1E 02 F6 | 	mov	local01, result1
13ab8     18 4E 05 F1 | 	add	fp, #24
13abc     A7 12 02 F6 | 	mov	arg01, fp
13ac0     18 4E 85 F1 | 	sub	fp, #24
13ac4     D8 D2 BF FD | 	call	#_converttoint
13ac8     FD 20 02 F6 | 	mov	local02, result1
13acc     0C 4E 05 F1 | 	add	fp, #12
13ad0     A7 12 02 F6 | 	mov	arg01, fp
13ad4     0C 4E 85 F1 | 	sub	fp, #12
13ad8     C4 D2 BF FD | 	call	#_converttoint
13adc     FD 22 02 F6 | 	mov	local03, result1
13ae0     A7 12 02 F6 | 	mov	arg01, fp
13ae4     B8 D2 BF FD | 	call	#_converttoint
13ae8     40 1E 62 FD | 	dirl	local01
13aec     0F 21 02 FC | 	wrpin	local02, local01
13af0     0F 23 12 FC | 	wxpin	local03, local01
13af4     0F FB 21 FC | 	wypin	result1, local01
13af8     41 1E 62 FD | 	dirh	local01
13afc     A7 F0 03 F6 | 	mov	ptra, fp
13b00     B2 00 A0 FD | 	call	#popregs_
13b04                 | _do_pinstart_ret
13b04     2D 00 64 FD | 	ret
13b08                 | 
13b08                 | ' 
13b08                 | ' 
13b08                 | ' sub do_wrpin
13b08                 | _do_wrpin
13b08     01 4A 05 F6 | 	mov	COUNT_, #1
13b0c     A8 00 A0 FD | 	call	#pushregs_
13b10     18 F0 07 F1 | 	add	ptra, #24
13b14     A4 5D BF FD | 	call	#_pop
13b18     FD 14 02 F6 | 	mov	arg02, result1
13b1c     FE 12 02 F6 | 	mov	arg01, result2
13b20     FF 1E 02 F6 | 	mov	local01, result3
13b24     A7 14 62 FC | 	wrlong	arg02, fp
13b28     04 4E 05 F1 | 	add	fp, #4
13b2c     A7 12 62 FC | 	wrlong	arg01, fp
13b30     04 4E 05 F1 | 	add	fp, #4
13b34     A7 1E 62 FC | 	wrlong	local01, fp
13b38     08 4E 85 F1 | 	sub	fp, #8
13b3c     7C 5D BF FD | 	call	#_pop
13b40     FF 1E 02 F6 | 	mov	local01, result3
13b44     0C 4E 05 F1 | 	add	fp, #12
13b48     A7 FA 61 FC | 	wrlong	result1, fp
13b4c     04 4E 05 F1 | 	add	fp, #4
13b50     A7 FC 61 FC | 	wrlong	result2, fp
13b54     04 4E 05 F1 | 	add	fp, #4
13b58     A7 1E 62 FC | 	wrlong	local01, fp
13b5c     08 4E 85 F1 | 	sub	fp, #8
13b60     A7 12 02 F6 | 	mov	arg01, fp
13b64     0C 4E 85 F1 | 	sub	fp, #12
13b68     34 D2 BF FD | 	call	#_converttoint
13b6c     FD 1E 02 F6 | 	mov	local01, result1
13b70     A7 12 02 F6 | 	mov	arg01, fp
13b74     28 D2 BF FD | 	call	#_converttoint
13b78     0F FB 01 FC | 	wrpin	result1, local01
13b7c     A7 F0 03 F6 | 	mov	ptra, fp
13b80     B2 00 A0 FD | 	call	#popregs_
13b84                 | _do_wrpin_ret
13b84     2D 00 64 FD | 	ret
13b88                 | 
13b88                 | ' 
13b88                 | ' sub do_wxpin
13b88                 | _do_wxpin
13b88     01 4A 05 F6 | 	mov	COUNT_, #1
13b8c     A8 00 A0 FD | 	call	#pushregs_
13b90     18 F0 07 F1 | 	add	ptra, #24
13b94     24 5D BF FD | 	call	#_pop
13b98     FD 14 02 F6 | 	mov	arg02, result1
13b9c     FE 12 02 F6 | 	mov	arg01, result2
13ba0     FF 1E 02 F6 | 	mov	local01, result3
13ba4     A7 14 62 FC | 	wrlong	arg02, fp
13ba8     04 4E 05 F1 | 	add	fp, #4
13bac     A7 12 62 FC | 	wrlong	arg01, fp
13bb0     04 4E 05 F1 | 	add	fp, #4
13bb4     A7 1E 62 FC | 	wrlong	local01, fp
13bb8     08 4E 85 F1 | 	sub	fp, #8
13bbc     FC 5C BF FD | 	call	#_pop
13bc0     FF 1E 02 F6 | 	mov	local01, result3
13bc4     0C 4E 05 F1 | 	add	fp, #12
13bc8     A7 FA 61 FC | 	wrlong	result1, fp
13bcc     04 4E 05 F1 | 	add	fp, #4
13bd0     A7 FC 61 FC | 	wrlong	result2, fp
13bd4     04 4E 05 F1 | 	add	fp, #4
13bd8     A7 1E 62 FC | 	wrlong	local01, fp
13bdc     08 4E 85 F1 | 	sub	fp, #8
13be0     A7 12 02 F6 | 	mov	arg01, fp
13be4     0C 4E 85 F1 | 	sub	fp, #12
13be8     B4 D1 BF FD | 	call	#_converttoint
13bec     FD 1E 02 F6 | 	mov	local01, result1
13bf0     A7 12 02 F6 | 	mov	arg01, fp
13bf4     A8 D1 BF FD | 	call	#_converttoint
13bf8     0F FB 11 FC | 	wxpin	result1, local01
13bfc     A7 F0 03 F6 | 	mov	ptra, fp
13c00     B2 00 A0 FD | 	call	#popregs_
13c04                 | _do_wxpin_ret
13c04     2D 00 64 FD | 	ret
13c08                 | 
13c08                 | ' 
13c08                 | ' sub do_wypin
13c08                 | _do_wypin
13c08     01 4A 05 F6 | 	mov	COUNT_, #1
13c0c     A8 00 A0 FD | 	call	#pushregs_
13c10     18 F0 07 F1 | 	add	ptra, #24
13c14     A4 5C BF FD | 	call	#_pop
13c18     FD 14 02 F6 | 	mov	arg02, result1
13c1c     FE 12 02 F6 | 	mov	arg01, result2
13c20     FF 1E 02 F6 | 	mov	local01, result3
13c24     A7 14 62 FC | 	wrlong	arg02, fp
13c28     04 4E 05 F1 | 	add	fp, #4
13c2c     A7 12 62 FC | 	wrlong	arg01, fp
13c30     04 4E 05 F1 | 	add	fp, #4
13c34     A7 1E 62 FC | 	wrlong	local01, fp
13c38     08 4E 85 F1 | 	sub	fp, #8
13c3c     7C 5C BF FD | 	call	#_pop
13c40     FF 1E 02 F6 | 	mov	local01, result3
13c44     0C 4E 05 F1 | 	add	fp, #12
13c48     A7 FA 61 FC | 	wrlong	result1, fp
13c4c     04 4E 05 F1 | 	add	fp, #4
13c50     A7 FC 61 FC | 	wrlong	result2, fp
13c54     04 4E 05 F1 | 	add	fp, #4
13c58     A7 1E 62 FC | 	wrlong	local01, fp
13c5c     08 4E 85 F1 | 	sub	fp, #8
13c60     A7 12 02 F6 | 	mov	arg01, fp
13c64     0C 4E 85 F1 | 	sub	fp, #12
13c68     34 D1 BF FD | 	call	#_converttoint
13c6c     FD 1E 02 F6 | 	mov	local01, result1
13c70     A7 12 02 F6 | 	mov	arg01, fp
13c74     28 D1 BF FD | 	call	#_converttoint
13c78     0F FB 21 FC | 	wypin	result1, local01
13c7c     A7 F0 03 F6 | 	mov	ptra, fp
13c80     B2 00 A0 FD | 	call	#popregs_
13c84                 | _do_wypin_ret
13c84     2D 00 64 FD | 	ret
13c88                 | 
13c88                 | ' 
13c88                 | ' sub do_position
13c88                 | _do_position
13c88     01 4A 05 F6 | 	mov	COUNT_, #1
13c8c     A8 00 A0 FD | 	call	#pushregs_
13c90     18 F0 07 F1 | 	add	ptra, #24
13c94     24 5C BF FD | 	call	#_pop
13c98     FD 14 02 F6 | 	mov	arg02, result1
13c9c     FE 12 02 F6 | 	mov	arg01, result2
13ca0     FF 1E 02 F6 | 	mov	local01, result3
13ca4     A7 14 62 FC | 	wrlong	arg02, fp
13ca8     04 4E 05 F1 | 	add	fp, #4
13cac     A7 12 62 FC | 	wrlong	arg01, fp
13cb0     04 4E 05 F1 | 	add	fp, #4
13cb4     A7 1E 62 FC | 	wrlong	local01, fp
13cb8     08 4E 85 F1 | 	sub	fp, #8
13cbc     FC 5B BF FD | 	call	#_pop
13cc0     FF 1E 02 F6 | 	mov	local01, result3
13cc4     0C 4E 05 F1 | 	add	fp, #12
13cc8     A7 FA 61 FC | 	wrlong	result1, fp
13ccc     04 4E 05 F1 | 	add	fp, #4
13cd0     A7 FC 61 FC | 	wrlong	result2, fp
13cd4     04 4E 05 F1 | 	add	fp, #4
13cd8     A7 1E 62 FC | 	wrlong	local01, fp
13cdc     08 4E 85 F1 | 	sub	fp, #8
13ce0     A7 12 02 F6 | 	mov	arg01, fp
13ce4     0C 4E 85 F1 | 	sub	fp, #12
13ce8     B4 D0 BF FD | 	call	#_converttoint
13cec     FD 1E 02 F6 | 	mov	local01, result1
13cf0     A7 12 02 F6 | 	mov	arg01, fp
13cf4     A8 D0 BF FD | 	call	#_converttoint
13cf8     FD 14 02 F6 | 	mov	arg02, result1
13cfc     0F 13 02 F6 | 	mov	arg01, local01
13d00     24 3C B0 FD | 	call	#_hg010b_spin2_setcursorpos
13d04     A7 F0 03 F6 | 	mov	ptra, fp
13d08     B2 00 A0 FD | 	call	#popregs_
13d0c                 | _do_position_ret
13d0c     2D 00 64 FD | 	ret
13d10                 | 
13d10                 | ' 
13d10                 | ' sub do_waitms
13d10                 | _do_waitms
13d10     01 4A 05 F6 | 	mov	COUNT_, #1
13d14     A8 00 A0 FD | 	call	#pushregs_
13d18     18 F0 07 F1 | 	add	ptra, #24
13d1c     9C 5B BF FD | 	call	#_pop
13d20     A7 FA 61 FC | 	wrlong	result1, fp
13d24     04 4E 05 F1 | 	add	fp, #4
13d28     A7 FC 61 FC | 	wrlong	result2, fp
13d2c     04 4E 05 F1 | 	add	fp, #4
13d30     A7 FE 61 FC | 	wrlong	result3, fp
13d34                 | ' 
13d34                 | ' t1=pop() 'value
13d34                 | ' 
13d34                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then t=t1.result.iresult else t=converttoint(t1)
13d34     08 4E 85 F1 | 	sub	fp, #8
13d38     1C FE 0D F2 | 	cmp	result3, #28 wz
13d3c     08 4E 05 51 |  if_ne	add	fp, #8
13d40     A7 12 02 5B |  if_ne	rdlong	arg01, fp
13d44     08 4E 85 51 |  if_ne	sub	fp, #8
13d48     1D 12 0E 52 |  if_ne	cmp	arg01, #29 wz
13d4c     A7 12 02 AB |  if_e	rdlong	arg01, fp
13d50     0C 4E 05 A1 |  if_e	add	fp, #12
13d54     A7 12 62 AC |  if_e	wrlong	arg01, fp
13d58     0C 4E 85 A1 |  if_e	sub	fp, #12
13d5c     14 00 90 AD |  if_e	jmp	#LR__1570
13d60     A7 12 02 F6 | 	mov	arg01, fp
13d64     38 D0 BF FD | 	call	#_converttoint
13d68     0C 4E 05 F1 | 	add	fp, #12
13d6c     A7 FA 61 FC | 	wrlong	result1, fp
13d70     0C 4E 85 F1 | 	sub	fp, #12
13d74                 | LR__1570
13d74                 | ' if t<0 then return
13d74     0C 4E 05 F1 | 	add	fp, #12
13d78     A7 12 02 FB | 	rdlong	arg01, fp
13d7c     0C 4E 85 F1 | 	sub	fp, #12
13d80     00 12 56 F2 | 	cmps	arg01, #0 wc
13d84     B8 00 90 CD |  if_b	jmp	#LR__1575
13d88                 | ' if t < 5000 then 
13d88     0C 4E 05 F1 | 	add	fp, #12
13d8c     A7 12 02 FB | 	rdlong	arg01, fp
13d90     0C 4E 85 F1 | 	sub	fp, #12
13d94     09 00 00 FF 
13d98     88 13 56 F2 | 	cmps	arg01, ##5000 wc
13d9c     14 00 90 3D |  if_ae	jmp	#LR__1571
13da0     0C 4E 05 F1 | 	add	fp, #12
13da4     A7 12 02 FB | 	rdlong	arg01, fp
13da8     0C 4E 85 F1 | 	sub	fp, #12
13dac     F8 51 B0 FD | 	call	#__system___waitms
13db0     8C 00 90 FD | 	jmp	#LR__1574
13db4                 | LR__1571
13db4     10 4E 05 F1 | 	add	fp, #16
13db8     A7 02 68 FC | 	wrlong	#1, fp
13dbc     04 4E 85 F1 | 	sub	fp, #4
13dc0     A7 12 02 FB | 	rdlong	arg01, fp
13dc4     09 13 52 F6 | 	abs	arg01, arg01 wc
13dc8     09 00 00 FF 
13dcc     88 13 16 FD | 	qdiv	arg01, ##5000
13dd0                 | '   for i=1 to t/5000
13dd0     0C 4E 85 F1 | 	sub	fp, #12
13dd4     18 1E 62 FD | 	getqx	local01
13dd8     0F 1F 82 F6 | 	negc	local01, local01
13ddc     01 1E 06 F1 | 	add	local01, #1
13de0                 | LR__1572
13de0     10 4E 05 F1 | 	add	fp, #16
13de4     A7 12 02 FB | 	rdlong	arg01, fp
13de8     10 4E 85 F1 | 	sub	fp, #16
13dec     0F 13 52 F2 | 	cmps	arg01, local01 wc
13df0     28 00 90 3D |  if_ae	jmp	#LR__1573
13df4     0C 4E 05 F1 | 	add	fp, #12
13df8     A7 12 02 FB | 	rdlong	arg01, fp
13dfc     0C 4E 85 F1 | 	sub	fp, #12
13e00     A4 51 B0 FD | 	call	#__system___waitms
13e04     10 4E 05 F1 | 	add	fp, #16
13e08     A7 12 02 FB | 	rdlong	arg01, fp
13e0c     01 12 06 F1 | 	add	arg01, #1
13e10     A7 12 62 FC | 	wrlong	arg01, fp
13e14     10 4E 85 F1 | 	sub	fp, #16
13e18     C4 FF 9F FD | 	jmp	#LR__1572
13e1c                 | LR__1573
13e1c     0C 4E 05 F1 | 	add	fp, #12
13e20     A7 1E 02 FB | 	rdlong	local01, fp
13e24     0F 1F 52 F6 | 	abs	local01, local01 wc
13e28     09 00 00 FF 
13e2c     88 1F 16 FD | 	qdiv	local01, ##5000
13e30     0C 4E 85 F1 | 	sub	fp, #12
13e34     19 1E 62 FD | 	getqy	local01
13e38     0F 13 82 F6 | 	negc	arg01, local01
13e3c     68 51 B0 FD | 	call	#__system___waitms
13e40                 | LR__1574
13e40                 | LR__1575
13e40     A7 F0 03 F6 | 	mov	ptra, fp
13e44     B2 00 A0 FD | 	call	#popregs_
13e48                 | _do_waitms_ret
13e48     2D 00 64 FD | 	ret
13e4c                 | 
13e4c                 | ' 
13e4c                 | ' sub do_waitvbl
13e4c                 | _do_waitvbl
13e4c     01 12 06 F6 | 	mov	arg01, #1
13e50     0C 3B B0 FD | 	call	#_hg010b_spin2_waitvbl
13e54                 | _do_waitvbl_ret
13e54     2D 00 64 FD | 	ret
13e58                 | 
13e58                 | ' 
13e58                 | ' sub do_waitclock
13e58                 | _do_waitclock
13e58     7A 00 00 FF 
13e5c     48 E4 05 F1 | 	add	objptr, ##62536
13e60     F2 00 02 FB | 	rdlong	_var01, objptr
13e64                 | ' c=hkcnt
13e64                 | ' do: loop until hkcnt<>c
13e64                 | LR__1580
13e64     F2 02 02 FB | 	rdlong	_var02, objptr
13e68     00 03 0A F2 | 	cmp	_var02, _var01 wz
13e6c     F4 FF 9F AD |  if_e	jmp	#LR__1580
13e70     7A 00 00 FF 
13e74     48 E4 85 F1 | 	sub	objptr, ##62536
13e78                 | _do_waitclock_ret
13e78     2D 00 64 FD | 	ret
13e7c                 | 
13e7c                 | ' 
13e7c                 | ' sub do_dir
13e7c                 | _do_dir
13e7c     03 4A 05 F6 | 	mov	COUNT_, #3
13e80     A8 00 A0 FD | 	call	#pushregs_
13e84     43 01 00 FF 
13e88     77 13 06 F6 | 	mov	arg01, ##@LR__4616
13e8c     B0 54 B0 FD | 	call	#__system___chdir
13e90                 | ' chdir("/sd/bas")       ' set working directory
13e90                 | ' print "Working directory: "; currentdir$ 
13e90     00 12 06 F6 | 	mov	arg01, #0
13e94     20 A7 B0 FD | 	call	#__system___getiolock_0423
13e98     FD 12 02 F6 | 	mov	arg01, result1
13e9c     14 4E B0 FD | 	call	#__system___lockmem
13ea0     43 01 00 FF 
13ea4     7F 15 06 F6 | 	mov	arg02, ##@LR__4617
13ea8     00 12 06 F6 | 	mov	arg01, #0
13eac     00 16 06 F6 | 	mov	arg03, #0
13eb0     F4 5A B0 FD | 	call	#__system___basic_print_string
13eb4     71 00 00 FF 
13eb8     68 E4 05 F1 | 	add	objptr, ##57960
13ebc     F2 14 02 FB | 	rdlong	arg02, objptr
13ec0     71 00 00 FF 
13ec4     68 E4 85 F1 | 	sub	objptr, ##57960
13ec8     00 12 06 F6 | 	mov	arg01, #0
13ecc     00 16 06 F6 | 	mov	arg03, #0
13ed0     D4 5A B0 FD | 	call	#__system___basic_print_string
13ed4     00 12 06 F6 | 	mov	arg01, #0
13ed8     0A 14 06 F6 | 	mov	arg02, #10
13edc     00 16 06 F6 | 	mov	arg03, #0
13ee0     6C 5A B0 FD | 	call	#__system___basic_print_char
13ee4     00 12 06 F6 | 	mov	arg01, #0
13ee8     CC A6 B0 FD | 	call	#__system___getiolock_0423
13eec     FD 00 68 FC | 	wrlong	#0, result1
13ef0     43 01 00 FF 
13ef4     93 13 06 F6 | 	mov	arg01, ##@LR__4618
13ef8     10 14 06 F6 | 	mov	arg02, #16
13efc     F0 A7 B0 FD | 	call	#__system___basic_dir
13f00     FD 1E 02 F6 | 	mov	local01, result1
13f04                 | ' 
13f04                 | ' filename=dir$("*", fbDirectory)
13f04                 | ' while filename <> "" and filename <> nil
13f04                 | LR__1590
13f04     00 20 06 F6 | 	mov	local02, #0
13f08     43 01 00 FF 
13f0c     95 15 06 F6 | 	mov	arg02, ##@LR__4619
13f10     0F 13 02 F6 | 	mov	arg01, local01
13f14     C4 4D B0 FD | 	call	#__system___string_cmp
13f18     00 FA 0D F2 | 	cmp	result1, #0 wz
13f1c     00 20 26 56 |  if_ne	not	local02, #0
13f20     00 22 06 F6 | 	mov	local03, #0
13f24     0F 13 02 F6 | 	mov	arg01, local01
13f28     00 14 06 F6 | 	mov	arg02, #0
13f2c     AC 4D B0 FD | 	call	#__system___string_cmp
13f30     00 FA 0D F2 | 	cmp	result1, #0 wz
13f34     00 22 26 56 |  if_ne	not	local03, #0
13f38     11 21 CA F7 | 	test	local02, local03 wz
13f3c     64 00 90 AD |  if_e	jmp	#LR__1591
13f40                 | '   print "[dir] ";filename
13f40     00 12 06 F6 | 	mov	arg01, #0
13f44     70 A6 B0 FD | 	call	#__system___getiolock_0423
13f48     FD 12 02 F6 | 	mov	arg01, result1
13f4c     64 4D B0 FD | 	call	#__system___lockmem
13f50     43 01 00 FF 
13f54     96 15 06 F6 | 	mov	arg02, ##@LR__4620
13f58     00 12 06 F6 | 	mov	arg01, #0
13f5c     00 16 06 F6 | 	mov	arg03, #0
13f60     44 5A B0 FD | 	call	#__system___basic_print_string
13f64     00 12 06 F6 | 	mov	arg01, #0
13f68     0F 15 02 F6 | 	mov	arg02, local01
13f6c     00 16 06 F6 | 	mov	arg03, #0
13f70     34 5A B0 FD | 	call	#__system___basic_print_string
13f74     00 12 06 F6 | 	mov	arg01, #0
13f78     0A 14 06 F6 | 	mov	arg02, #10
13f7c     00 16 06 F6 | 	mov	arg03, #0
13f80     CC 59 B0 FD | 	call	#__system___basic_print_char
13f84     00 12 06 F6 | 	mov	arg01, #0
13f88     2C A6 B0 FD | 	call	#__system___getiolock_0423
13f8c     FD 00 68 FC | 	wrlong	#0, result1
13f90     00 12 06 F6 | 	mov	arg01, #0
13f94     00 14 06 F6 | 	mov	arg02, #0
13f98     54 A7 B0 FD | 	call	#__system___basic_dir
13f9c     FD 1E 02 F6 | 	mov	local01, result1
13fa0     60 FF 9F FD | 	jmp	#LR__1590
13fa4                 | LR__1591
13fa4     43 01 00 FF 
13fa8     9D 13 06 F6 | 	mov	arg01, ##@LR__4621
13fac     21 14 06 F6 | 	mov	arg02, #33
13fb0     3C A7 B0 FD | 	call	#__system___basic_dir
13fb4     FD 1E 02 F6 | 	mov	local01, result1
13fb8                 | ' 
13fb8                 | ' filename = dir$("*", fbNormal )  ' start scan for all files and directories
13fb8                 | ' do while filename <> "" and filename <> nil
13fb8                 | LR__1592
13fb8     00 20 06 F6 | 	mov	local02, #0
13fbc     43 01 00 FF 
13fc0     9F 15 06 F6 | 	mov	arg02, ##@LR__4622
13fc4     0F 13 02 F6 | 	mov	arg01, local01
13fc8     10 4D B0 FD | 	call	#__system___string_cmp
13fcc     00 FA 0D F2 | 	cmp	result1, #0 wz
13fd0     00 20 26 56 |  if_ne	not	local02, #0
13fd4     00 22 06 F6 | 	mov	local03, #0
13fd8     0F 13 02 F6 | 	mov	arg01, local01
13fdc     00 14 06 F6 | 	mov	arg02, #0
13fe0     F8 4C B0 FD | 	call	#__system___string_cmp
13fe4     00 FA 0D F2 | 	cmp	result1, #0 wz
13fe8     00 22 26 56 |  if_ne	not	local03, #0
13fec     11 21 CA F7 | 	test	local02, local03 wz
13ff0     4C 01 90 AD |  if_e	jmp	#LR__1596
13ff4                 | '   print filename
13ff4     00 12 06 F6 | 	mov	arg01, #0
13ff8     BC A5 B0 FD | 	call	#__system___getiolock_0423
13ffc     FD 12 02 F6 | 	mov	arg01, result1
14000     B0 4C B0 FD | 	call	#__system___lockmem
14004     00 12 06 F6 | 	mov	arg01, #0
14008     0F 15 02 F6 | 	mov	arg02, local01
1400c     00 16 06 F6 | 	mov	arg03, #0
14010     94 59 B0 FD | 	call	#__system___basic_print_string
14014     00 12 06 F6 | 	mov	arg01, #0
14018     0A 14 06 F6 | 	mov	arg02, #10
1401c     00 16 06 F6 | 	mov	arg03, #0
14020     2C 59 B0 FD | 	call	#__system___basic_print_char
14024     00 12 06 F6 | 	mov	arg01, #0
14028     8C A5 B0 FD | 	call	#__system___getiolock_0423
1402c     FD 00 68 FC | 	wrlong	#0, result1
14030     00 12 06 F6 | 	mov	arg01, #0
14034     00 14 06 F6 | 	mov	arg02, #0
14038     B4 A6 B0 FD | 	call	#__system___basic_dir
1403c     FD 1E 02 F6 | 	mov	local01, result1
14040                 | '   filename = dir$()      ' continue scan
14040                 | '     if v.getcursory()=34 then    'bug, after first break, cursory is always 35
14040                 | ' return cursor_y
14040     3A E4 05 F1 | 	add	objptr, #58
14044     F2 FA C1 FA | 	rdbyte	result1, objptr
14048     3A E4 85 F1 | 	sub	objptr, #58
1404c     22 FA 0D F2 | 	cmp	result1, #34 wz
14050     64 FF 9F 5D |  if_ne	jmp	#LR__1592
14054                 | '     print "-----more, press any key";
14054     00 12 06 F6 | 	mov	arg01, #0
14058     5C A5 B0 FD | 	call	#__system___getiolock_0423
1405c     FD 12 02 F6 | 	mov	arg01, result1
14060     50 4C B0 FD | 	call	#__system___lockmem
14064     43 01 00 FF 
14068     A0 15 06 F6 | 	mov	arg02, ##@LR__4623
1406c     00 12 06 F6 | 	mov	arg01, #0
14070     00 16 06 F6 | 	mov	arg03, #0
14074     30 59 B0 FD | 	call	#__system___basic_print_string
14078     00 12 06 F6 | 	mov	arg01, #0
1407c     38 A5 B0 FD | 	call	#__system___getiolock_0423
14080     FD 00 68 FC | 	wrlong	#0, result1
14084                 | '     do 
14084                 | LR__1593
14084     CC 44 B0 FD | 	call	#_usbnew_spin2_get_key
14088     00 FA 0D F2 | 	cmp	result1, #0 wz
1408c     F4 FF 9F 5D |  if_ne	jmp	#LR__1593
14090                 | '     do
14090                 | LR__1594
14090     C0 44 B0 FD | 	call	#_usbnew_spin2_get_key
14094     00 FA 0D F2 | 	cmp	result1, #0 wz
14098     F4 FF 9F AD |  if_e	jmp	#LR__1594
1409c                 | '       if keyclick=1 then paula.play(7,keyclick_spl,44100,16384,spl_len) 
1409c     78 00 00 FF 
140a0     B4 E5 05 F1 | 	add	objptr, ##61876
140a4     F2 20 02 FB | 	rdlong	local02, objptr
140a8     78 00 00 FF 
140ac     B4 E5 85 F1 | 	sub	objptr, ##61876
140b0     01 20 0E F2 | 	cmp	local02, #1 wz
140b4     3C 00 90 5D |  if_ne	jmp	#LR__1595
140b8     7A 00 00 FF 
140bc     58 E4 05 F1 | 	add	objptr, ##62552
140c0     F2 14 02 FB | 	rdlong	arg02, objptr
140c4     04 E4 85 F1 | 	sub	objptr, #4
140c8     F2 1A 02 FB | 	rdlong	arg05, objptr
140cc     07 12 06 F6 | 	mov	arg01, #7
140d0     56 00 00 FF 
140d4     44 16 06 F6 | 	mov	arg03, ##44100
140d8     0E 18 C6 F9 | 	decod	arg04, #14
140dc     01 1C 66 F6 | 	neg	arg06, #1
140e0     6E 00 00 FF 
140e4     94 E5 85 F1 | 	sub	objptr, ##56724
140e8     90 47 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
140ec     0B 00 00 FF 
140f0     C0 E4 85 F1 | 	sub	objptr, ##5824
140f4                 | LR__1595
140f4     00 12 06 F6 | 	mov	arg01, #0
140f8     23 14 06 F6 | 	mov	arg02, #35
140fc     28 38 B0 FD | 	call	#_hg010b_spin2_setcursorpos
14100                 | '     position 0,35: print "                             ";: position 4,35  
14100     00 12 06 F6 | 	mov	arg01, #0
14104     B0 A4 B0 FD | 	call	#__system___getiolock_0423
14108     FD 12 02 F6 | 	mov	arg01, result1
1410c     A4 4B B0 FD | 	call	#__system___lockmem
14110     43 01 00 FF 
14114     B9 15 06 F6 | 	mov	arg02, ##@LR__4624
14118     00 12 06 F6 | 	mov	arg01, #0
1411c     00 16 06 F6 | 	mov	arg03, #0
14120     84 58 B0 FD | 	call	#__system___basic_print_string
14124     00 12 06 F6 | 	mov	arg01, #0
14128     8C A4 B0 FD | 	call	#__system___getiolock_0423
1412c     FD 00 68 FC | 	wrlong	#0, result1
14130     04 12 06 F6 | 	mov	arg01, #4
14134     23 14 06 F6 | 	mov	arg02, #35
14138     EC 37 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1413c     78 FE 9F FD | 	jmp	#LR__1592
14140                 | LR__1596
14140     A7 F0 03 F6 | 	mov	ptra, fp
14144     B2 00 A0 FD | 	call	#popregs_
14148                 | _do_dir_ret
14148     2D 00 64 FD | 	ret
1414c                 | 
1414c                 | ' 
1414c                 | ' sub do_if
1414c                 | _do_if
1414c     05 4A 05 F6 | 	mov	COUNT_, #5
14150     A8 00 A0 FD | 	call	#pushregs_
14154     64 57 BF FD | 	call	#_pop
14158     FD 1E 0A F6 | 	mov	local01, result1 wz
1415c     FE 20 02 F6 | 	mov	local02, result2
14160     FF 22 02 F6 | 	mov	local03, result3
14164                 | ' t1=pop()
14164                 | ' ' if uresult=0, jump over else
14164                 | ' if t1.result.uresult = 0 then 
14164     BC 00 90 5D |  if_ne	jmp	#LR__1602
14168                 | '   for i=lineptr_e to lineptr-1
14168     69 00 00 FF 
1416c     54 E4 05 F1 | 	add	objptr, ##53844
14170     F2 24 02 FB | 	rdlong	local04, objptr
14174     04 E4 85 F1 | 	sub	objptr, #4
14178     F2 26 02 FB | 	rdlong	local05, objptr
1417c     69 00 00 FF 
14180     50 E4 85 F1 | 	sub	objptr, ##53840
14184                 | LR__1600
14184     13 25 52 F2 | 	cmps	local04, local05 wc
14188     78 00 90 3D |  if_ae	jmp	#LR__1601
1418c     12 FF 01 F6 | 	mov	result3, local04
14190     01 FE 65 F0 | 	shl	result3, #1
14194     12 FF 01 F1 | 	add	result3, local04
14198     02 FE 65 F0 | 	shl	result3, #2
1419c     66 00 00 FF 
141a0     50 E4 05 F1 | 	add	objptr, ##52304
141a4     F2 FE 01 F1 | 	add	result3, objptr
141a8     FF 1E 02 FB | 	rdlong	local01, result3
141ac     04 FE 05 F1 | 	add	result3, #4
141b0     FF FC 01 FB | 	rdlong	result2, result3
141b4     12 FF 01 F6 | 	mov	result3, local04
141b8     01 FE 65 F0 | 	shl	result3, #1
141bc     12 FF 01 F1 | 	add	result3, local04
141c0     02 FE 65 F0 | 	shl	result3, #2
141c4     F2 FE 01 F1 | 	add	result3, objptr
141c8     08 FE 05 F1 | 	add	result3, #8
141cc     FF FE 01 FB | 	rdlong	result3, result3
141d0     FE 20 02 F6 | 	mov	local02, result2
141d4     FF 22 02 F6 | 	mov	local03, result3
141d8                 | '     t1=compiledline(i)
141d8                 | '     if t1.result_type=token_else then lineptr_e=i : return
141d8     5A 22 0E F2 | 	cmp	local03, #90 wz
141dc     66 00 00 FF 
141e0     50 E4 85 F1 | 	sub	objptr, ##52304
141e4     69 00 00 AF 
141e8     54 E4 05 A1 |  if_e	add	objptr, ##53844
141ec     F2 24 62 AC |  if_e	wrlong	local04, objptr
141f0     69 00 00 AF 
141f4     54 E4 85 A1 |  if_e	sub	objptr, ##53844
141f8     28 00 90 AD |  if_e	jmp	#LR__1603
141fc     01 24 06 F1 | 	add	local04, #1
14200     80 FF 9F FD | 	jmp	#LR__1600
14204                 | LR__1601
14204     69 00 00 FF 
14208     50 E4 05 F1 | 	add	objptr, ##53840
1420c     F2 26 02 FB | 	rdlong	local05, objptr
14210     01 26 86 F1 | 	sub	local05, #1
14214     04 E4 05 F1 | 	add	objptr, #4
14218     F2 26 62 FC | 	wrlong	local05, objptr
1421c     69 00 00 FF 
14220     54 E4 85 F1 | 	sub	objptr, ##53844
14224                 | LR__1602
14224                 | LR__1603
14224     A7 F0 03 F6 | 	mov	ptra, fp
14228     B2 00 A0 FD | 	call	#popregs_
1422c                 | _do_if_ret
1422c     2D 00 64 FD | 	ret
14230                 | 
14230                 | ' 
14230                 | ' sub do_else
14230                 | _do_else
14230     69 00 00 FF 
14234     50 E4 05 F1 | 	add	objptr, ##53840
14238     F2 00 02 FB | 	rdlong	_var01, objptr
1423c     01 00 86 F1 | 	sub	_var01, #1
14240     04 E4 05 F1 | 	add	objptr, #4
14244     F2 00 62 FC | 	wrlong	_var01, objptr
14248     69 00 00 FF 
1424c     54 E4 85 F1 | 	sub	objptr, ##53844
14250                 | _do_else_ret
14250     2D 00 64 FD | 	ret
14254                 | 
14254                 | ' 
14254                 | ' sub do_rad
14254                 | _do_rad
14254     7A 00 00 FF 
14258     5C E4 05 F1 | 	add	objptr, ##62556
1425c     00 C0 9F FF 
14260     F2 00 68 FC | 	wrlong	##1065353216, objptr
14264     04 E4 05 F1 | 	add	objptr, #4
14268     00 C0 9F FF 
1426c     F2 00 68 FC | 	wrlong	##1065353216, objptr
14270     7A 00 00 FF 
14274     60 E4 85 F1 | 	sub	objptr, ##62560
14278                 | _do_rad_ret
14278     2D 00 64 FD | 	ret
1427c                 | 
1427c                 | ' 
1427c                 | ' sub do_deg
1427c                 | _do_deg
1427c     7A 00 00 FF 
14280     5C E4 05 F1 | 	add	objptr, ##62556
14284     7D 47 9E FF 
14288     F2 6A 68 FC | 	wrlong	##1016003125, objptr
1428c     04 E4 05 F1 | 	add	objptr, #4
14290     97 32 A1 FF 
14294     F2 C2 69 FC | 	wrlong	##1113927393, objptr
14298     7A 00 00 FF 
1429c     60 E4 85 F1 | 	sub	objptr, ##62560
142a0                 | _do_deg_ret
142a0     2D 00 64 FD | 	ret
142a4                 | 
142a4                 | ' 
142a4                 | ' sub do_int
142a4                 | _do_int
142a4     00 4A 05 F6 | 	mov	COUNT_, #0
142a8     A8 00 A0 FD | 	call	#pushregs_
142ac     0C F0 07 F1 | 	add	ptra, #12
142b0     08 56 BF FD | 	call	#_pop
142b4     A7 FA 61 FC | 	wrlong	result1, fp
142b8     04 4E 05 F1 | 	add	fp, #4
142bc     A7 FC 61 FC | 	wrlong	result2, fp
142c0     04 4E 05 F1 | 	add	fp, #4
142c4     A7 FE 61 FC | 	wrlong	result3, fp
142c8     08 4E 85 F1 | 	sub	fp, #8
142cc     A7 12 02 F6 | 	mov	arg01, fp
142d0     CC CA BF FD | 	call	#_converttoint
142d4     A7 FA 61 FC | 	wrlong	result1, fp
142d8     08 4E 05 F1 | 	add	fp, #8
142dc     A7 38 68 FC | 	wrlong	#28, fp
142e0     08 4E 85 F1 | 	sub	fp, #8
142e4     A7 12 02 F6 | 	mov	arg01, fp
142e8     68 56 BF FD | 	call	#_push
142ec     A7 F0 03 F6 | 	mov	ptra, fp
142f0     B2 00 A0 FD | 	call	#popregs_
142f4                 | _do_int_ret
142f4     2D 00 64 FD | 	ret
142f8                 | 
142f8                 | ' 
142f8                 | ' sub do_nothing
142f8                 | _do_nothing
142f8                 | _do_nothing_ret
142f8     2D 00 64 FD | 	ret
142fc                 | 
142fc                 | ' 
142fc                 | ' sub do_brun
142fc                 | _do_brun
142fc     08 4A 05 F6 | 	mov	COUNT_, #8
14300     A8 00 A0 FD | 	call	#pushregs_
14304     B4 55 BF FD | 	call	#_pop
14308     FE 1A 02 F6 | 	mov	arg05, result2
1430c     FF 18 02 F6 | 	mov	arg04, result3
14310     FD 1E 02 F6 | 	mov	local01, result1
14314     0D 21 02 F6 | 	mov	local02, arg05
14318     0C 23 02 F6 | 	mov	local03, arg04
1431c                 | ' 
1431c                 | ' t1=pop() 
1431c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
1431c     2B 22 0E F2 | 	cmp	local03, #43 wz
14320     10 00 90 5D |  if_ne	jmp	#LR__1610
14324     0F 13 02 F6 | 	mov	arg01, local01
14328     CC 86 BF FD | 	call	#_convertstring
1432c     FD 1E 02 F6 | 	mov	local01, result1
14330     1F 22 06 F6 | 	mov	local03, #31
14334                 | LR__1610
14334                 | ' if t1.result_type=result_string then
14334     1F 22 0E F2 | 	cmp	local03, #31 wz
14338     EC 01 90 5D |  if_ne	jmp	#LR__1614
1433c     0F 25 02 F6 | 	mov	local04, local01
14340                 | '   filename=t1.result.sresult
14340                 | '   if left$(filename,1)="/" then 
14340     12 13 02 F6 | 	mov	arg01, local04
14344     01 14 06 F6 | 	mov	arg02, #1
14348     78 69 B0 FD | 	call	#__system__Left_S
1434c     FD 12 02 F6 | 	mov	arg01, result1
14350     43 01 00 FF 
14354     D7 15 06 F6 | 	mov	arg02, ##@LR__4625
14358     80 49 B0 FD | 	call	#__system___string_cmp
1435c     00 FA 0D F2 | 	cmp	result1, #0 wz
14360     12 27 02 A6 |  if_e	mov	local05, local04
14364     14 00 90 AD |  if_e	jmp	#LR__1611
14368     43 01 00 FF 
1436c     D9 13 06 F6 | 	mov	arg01, ##@LR__4626
14370     12 15 02 F6 | 	mov	arg02, local04
14374     98 49 B0 FD | 	call	#__system___string_concat
14378     FD 26 02 F6 | 	mov	local05, result1
1437c                 | LR__1611
1437c                 | ' '  if mid$(filename,2,1)=":" then fullfilename=right$(filename,len(filename-3)) ' todo for future: strip c:/
1437c                 | '   open fullfilename for input as #9
1437c     09 12 06 F6 | 	mov	arg01, #9
14380     13 15 02 F6 | 	mov	arg02, local05
14384     00 16 06 F6 | 	mov	arg03, #0
14388     2C 55 B0 FD | 	call	#__system___basic_open_string
1438c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
14390     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
14394     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
14398     FD 28 0A F6 | 	mov	local06, result1 wz
1439c                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
1439c     8C 00 90 AD |  if_e	jmp	#LR__1612
143a0     00 12 06 F6 | 	mov	arg01, #0
143a4     10 A2 B0 FD | 	call	#__system___getiolock_0423
143a8     FD 12 02 F6 | 	mov	arg01, result1
143ac     04 49 B0 FD | 	call	#__system___lockmem
143b0     43 01 00 FF 
143b4     E2 15 06 F6 | 	mov	arg02, ##@LR__4627
143b8     00 12 06 F6 | 	mov	arg01, #0
143bc     00 16 06 F6 | 	mov	arg03, #0
143c0     E4 55 B0 FD | 	call	#__system___basic_print_string
143c4     00 12 06 F6 | 	mov	arg01, #0
143c8     14 15 02 F6 | 	mov	arg02, local06
143cc     00 16 06 F6 | 	mov	arg03, #0
143d0     0A 18 06 F6 | 	mov	arg04, #10
143d4     14 56 B0 FD | 	call	#__system___basic_print_integer
143d8     43 01 00 FF 
143dc     F0 15 06 F6 | 	mov	arg02, ##@LR__4628
143e0     00 12 06 F6 | 	mov	arg01, #0
143e4     00 16 06 F6 | 	mov	arg03, #0
143e8     BC 55 B0 FD | 	call	#__system___basic_print_string
143ec     14 13 02 F6 | 	mov	arg01, local06
143f0     C0 6E B0 FD | 	call	#__system___strerror
143f4     FD 14 02 F6 | 	mov	arg02, result1
143f8     00 12 06 F6 | 	mov	arg01, #0
143fc     00 16 06 F6 | 	mov	arg03, #0
14400     A4 55 B0 FD | 	call	#__system___basic_print_string
14404     00 12 06 F6 | 	mov	arg01, #0
14408     0A 14 06 F6 | 	mov	arg02, #10
1440c     00 16 06 F6 | 	mov	arg03, #0
14410     3C 55 B0 FD | 	call	#__system___basic_print_char
14414     00 12 06 F6 | 	mov	arg01, #0
14418     9C A1 B0 FD | 	call	#__system___getiolock_0423
1441c     FD 00 68 FC | 	wrlong	#0, result1
14420     09 12 06 F6 | 	mov	arg01, #9
14424     C0 97 B0 FD | 	call	#__system__close
14428     FC 00 90 FD | 	jmp	#LR__1615
1442c                 | LR__1612
1442c     01 2A 06 F6 | 	mov	local07, #1
14430     00 2C 06 F6 | 	mov	local08, #0
14434                 | '   do
14434                 | LR__1613
14434                 | '     get #9,pos,block(0),1024,r : pos+=r	
14434     76 00 00 FF 
14438     80 E5 05 F1 | 	add	objptr, ##60800
1443c     F2 16 02 F6 | 	mov	arg03, objptr
14440     76 00 00 FF 
14444     80 E5 85 F1 | 	sub	objptr, ##60800
14448     09 12 06 F6 | 	mov	arg01, #9
1444c     15 15 02 F6 | 	mov	arg02, local07
14450     0A 18 C6 F9 | 	decod	arg04, #10
14454     01 1A 06 F6 | 	mov	arg05, #1
14458     5C 56 B0 FD | 	call	#__system___basic_get
1445c     FD 28 02 F6 | 	mov	local06, result1
14460     FD 2A 02 F1 | 	add	local07, result1
14464     76 00 00 FF 
14468     80 E5 05 F1 | 	add	objptr, ##60800
1446c     F2 12 02 F6 | 	mov	arg01, objptr
14470     16 15 02 F6 | 	mov	arg02, local08
14474     0A 16 C6 F9 | 	decod	arg03, #10
14478     6B 00 00 FF 
1447c     C0 E4 85 F1 | 	sub	objptr, ##54976
14480     DC 3D B0 FD | 	call	#_psram_spin2_write
14484     0B 00 00 FF 
14488     C0 E4 85 F1 | 	sub	objptr, ##5824
1448c     14 2D 02 F1 | 	add	local08, local06
14490     02 00 00 FF 
14494     00 28 0E F2 | 	cmp	local06, ##1024 wz
14498     E0 03 00 AF 
1449c     00 2C 56 A2 |  if_e	cmps	local08, ##507904 wc
144a0     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1613
144a4     55 00 00 FF 
144a8     D0 E5 05 F1 | 	add	objptr, ##43984
144ac     F2 12 02 FB | 	rdlong	arg01, objptr
144b0     03 12 62 FD | 	cogstop	arg01
144b4     04 E4 05 F1 | 	add	objptr, #4
144b8     F2 12 02 FB | 	rdlong	arg01, objptr
144bc     03 12 62 FD | 	cogstop	arg01
144c0     04 E4 05 F1 | 	add	objptr, #4
144c4     F2 12 02 FB | 	rdlong	arg01, objptr
144c8     03 12 62 FD | 	cogstop	arg01
144cc     22 00 00 FF 
144d0     E0 E5 05 F1 | 	add	objptr, ##17888
144d4     F2 12 02 FB | 	rdlong	arg01, objptr
144d8     03 12 62 FD | 	cogstop	arg01
144dc     10 00 00 FF 
144e0     9C EA 05 F1 | 	add	ptr__dat__, ##8348
144e4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
144e8     10 00 00 FF 
144ec     9C EA 85 F1 | 	sub	ptr__dat__, ##8348
144f0     22 00 00 FF 
144f4     D8 E5 85 F1 | 	sub	objptr, ##17880
144f8     1E 2C 06 F6 | 	mov	local08, #30
144fc     28 E4 61 FD | 	setq	objptr
14500     0A 2D F2 FC | 	coginit	local08, arg02 wc
14504     01 2C 66 C6 |  if_b	neg	local08, #1
14508     24 00 00 FF 
1450c     FC E4 05 F1 | 	add	objptr, ##18684
14510     F2 2C 62 FC | 	wrlong	local08, objptr
14514     7A 00 00 FF 
14518     DC E4 85 F1 | 	sub	objptr, ##62684
1451c     00 12 06 F6 | 	mov	arg01, #0
14520     01 12 62 FD | 	cogid	arg01
14524     03 12 62 FD | 	cogstop	arg01
14528                 | LR__1614
14528                 | LR__1615
14528     A7 F0 03 F6 | 	mov	ptra, fp
1452c     B2 00 A0 FD | 	call	#popregs_
14530                 | _do_brun_ret
14530     2D 00 64 FD | 	ret
14534                 | 
14534                 | ' 
14534                 | ' 
14534                 | ' sub do_mouse
14534                 | _do_mouse
14534     84 53 BF FD | 	call	#_pop
14538     00 FA 4D F2 | 	cmps	result1, #0 wz
1453c                 | ' 
1453c                 | ' t1=pop()
1453c                 | ' 
1453c                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
1453c     14 00 90 5D |  if_ne	jmp	#LR__1620
14540     10 12 06 F6 | 	mov	arg01, #16
14544     00 14 06 F6 | 	mov	arg02, #0
14548     00 16 06 F6 | 	mov	arg03, #0
1454c     C8 27 B0 FD | 	call	#_hg010b_spin2_setspritesize
14550     10 00 90 FD | 	jmp	#LR__1621
14554                 | LR__1620
14554     10 12 06 F6 | 	mov	arg01, #16
14558     20 14 06 F6 | 	mov	arg02, #32
1455c     20 16 06 F6 | 	mov	arg03, #32
14560     B4 27 B0 FD | 	call	#_hg010b_spin2_setspritesize
14564                 | LR__1621
14564                 | _do_mouse_ret
14564     2D 00 64 FD | 	ret
14568                 | 
14568                 | ' 
14568                 | ' sub do_cursor
14568                 | _do_cursor
14568     50 53 BF FD | 	call	#_pop
1456c     00 FA 4D F2 | 	cmps	result1, #0 wz
14570                 | ' 
14570                 | ' t1=pop()
14570                 | ' 
14570                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
14570     14 00 90 5D |  if_ne	jmp	#LR__1630
14574     11 12 06 F6 | 	mov	arg01, #17
14578     00 14 06 F6 | 	mov	arg02, #0
1457c     00 16 06 F6 | 	mov	arg03, #0
14580     94 27 B0 FD | 	call	#_hg010b_spin2_setspritesize
14584     10 00 90 FD | 	jmp	#LR__1631
14588                 | LR__1630
14588     11 12 06 F6 | 	mov	arg01, #17
1458c     08 14 06 F6 | 	mov	arg02, #8
14590     10 16 06 F6 | 	mov	arg03, #16
14594     80 27 B0 FD | 	call	#_hg010b_spin2_setspritesize
14598                 | LR__1631
14598                 | _do_cursor_ret
14598     2D 00 64 FD | 	ret
1459c                 | 
1459c                 | ' 
1459c                 | ' 
1459c                 | ' sub do_click
1459c                 | _do_click
1459c     1C 53 BF FD | 	call	#_pop
145a0     00 FA 4D F2 | 	cmps	result1, #0 wz
145a4                 | ' 
145a4                 | ' t1=pop()
145a4                 | ' 
145a4                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
145a4     78 00 00 AF 
145a8     B4 E5 05 A1 |  if_e	add	objptr, ##61876
145ac     F2 00 68 AC |  if_e	wrlong	#0, objptr
145b0     78 00 00 FF 
145b4     B4 E5 C5 F3 | 	sumz	objptr, ##61876
145b8     F2 02 68 5C |  if_ne	wrlong	#1, objptr
145bc     78 00 00 5F 
145c0     B4 E5 85 51 |  if_ne	sub	objptr, ##61876
145c4                 | _do_click_ret
145c4     2D 00 64 FD | 	ret
145c8                 | 
145c8                 | ' 
145c8                 | ' 
145c8                 | ' sub do_beep
145c8                 | _do_beep
145c8     02 4A 05 F6 | 	mov	COUNT_, #2
145cc     A8 00 A0 FD | 	call	#pushregs_
145d0     20 F0 07 F1 | 	add	ptra, #32
145d4     E4 52 BF FD | 	call	#_pop
145d8     FD 1E 02 F6 | 	mov	local01, result1
145dc     FE 1C 02 F6 | 	mov	arg06, result2
145e0     FF 20 02 F6 | 	mov	local02, result3
145e4     0C 4E 05 F1 | 	add	fp, #12
145e8     A7 1E 62 FC | 	wrlong	local01, fp
145ec     04 4E 05 F1 | 	add	fp, #4
145f0     A7 1C 62 FC | 	wrlong	arg06, fp
145f4     04 4E 05 F1 | 	add	fp, #4
145f8     A7 20 62 FC | 	wrlong	local02, fp
145fc     14 4E 85 F1 | 	sub	fp, #20
14600     B8 52 BF FD | 	call	#_pop
14604     A7 FA 61 FC | 	wrlong	result1, fp
14608     04 4E 05 F1 | 	add	fp, #4
1460c     A7 FC 61 FC | 	wrlong	result2, fp
14610     04 4E 05 F1 | 	add	fp, #4
14614     A7 FE 61 FC | 	wrlong	result3, fp
14618                 | ' 
14618                 | ' 
14618                 | ' 
14618                 | ' t2=pop()
14618                 | ' t1=pop()
14618                 | ' 
14618                 | ' 
14618                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
14618     08 4E 85 F1 | 	sub	fp, #8
1461c     1C FE 0D F2 | 	cmp	result3, #28 wz
14620     08 4E 05 51 |  if_ne	add	fp, #8
14624     A7 20 02 5B |  if_ne	rdlong	local02, fp
14628     08 4E 85 51 |  if_ne	sub	fp, #8
1462c     1D 20 0E 52 |  if_ne	cmp	local02, #29 wz
14630     A7 1E 02 AB |  if_e	rdlong	local01, fp
14634     18 4E 05 A1 |  if_e	add	fp, #24
14638     A7 1E 62 AC |  if_e	wrlong	local01, fp
1463c     18 4E 85 A1 |  if_e	sub	fp, #24
14640     14 00 90 AD |  if_e	jmp	#LR__1640
14644     A7 12 02 F6 | 	mov	arg01, fp
14648     54 C7 BF FD | 	call	#_converttoint
1464c     18 4E 05 F1 | 	add	fp, #24
14650     A7 FA 61 FC | 	wrlong	result1, fp
14654     18 4E 85 F1 | 	sub	fp, #24
14658                 | LR__1640
14658     1C 4E 05 F1 | 	add	fp, #28
1465c     A7 FE 48 FC | 	wrbyte	#127, fp
14660     01 4E 05 F1 | 	add	fp, #1
14664     A7 00 49 FC | 	wrbyte	#128, fp
14668     01 4E 85 F1 | 	sub	fp, #1
1466c     A7 14 02 F6 | 	mov	arg02, fp
14670     04 4E 85 F1 | 	sub	fp, #4
14674     A7 16 02 FB | 	rdlong	arg03, fp
14678     18 4E 85 F1 | 	sub	fp, #24
1467c     01 16 66 F0 | 	shl	arg03, #1
14680     07 12 06 F6 | 	mov	arg01, #7
14684     0E 18 C6 F9 | 	decod	arg04, #14
14688     02 1A 06 F6 | 	mov	arg05, #2
1468c     00 1C 06 F6 | 	mov	arg06, #0
14690     0B 00 00 FF 
14694     C0 E4 05 F1 | 	add	objptr, ##5824
14698     7C 42 B0 FD | 	call	#_Audio093b_8_sc_spin2_play8
1469c     0B 00 00 FF 
146a0     C0 E4 85 F1 | 	sub	objptr, ##5824
146a4     0C 4E 05 F1 | 	add	fp, #12
146a8     A7 12 02 F6 | 	mov	arg01, fp
146ac     0C 4E 85 F1 | 	sub	fp, #12
146b0     A0 52 BF FD | 	call	#_push
146b4     58 F6 BF FD | 	call	#_do_waitms
146b8     07 12 06 F6 | 	mov	arg01, #7
146bc     0B 00 00 FF 
146c0     C0 E4 05 F1 | 	add	objptr, ##5824
146c4     04 43 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
146c8     0B 00 00 FF 
146cc     C0 E4 85 F1 | 	sub	objptr, ##5824
146d0     A7 F0 03 F6 | 	mov	ptra, fp
146d4     B2 00 A0 FD | 	call	#popregs_
146d8                 | _do_beep_ret
146d8     2D 00 64 FD | 	ret
146dc                 | 
146dc                 | ' 
146dc                 | ' sub do_no_command
146dc                 | _do_no_command
146dc     17 12 06 F6 | 	mov	arg01, #23
146e0     AC 10 B0 FD | 	call	#_printerror
146e4                 | _do_no_command_ret
146e4     2D 00 64 FD | 	ret
146e8                 | 
146e8                 | ' 
146e8                 | ' sub do_negative
146e8                 | _do_negative
146e8     02 4A 05 F6 | 	mov	COUNT_, #2
146ec     A8 00 A0 FD | 	call	#pushregs_
146f0     0C F0 07 F1 | 	add	ptra, #12
146f4     C4 51 BF FD | 	call	#_pop
146f8     FF 1E 02 F6 | 	mov	local01, result3
146fc     A7 FA 61 FC | 	wrlong	result1, fp
14700     04 4E 05 F1 | 	add	fp, #4
14704     A7 FC 61 FC | 	wrlong	result2, fp
14708     04 4E 05 F1 | 	add	fp, #4
1470c     A7 1E 62 FC | 	wrlong	local01, fp
14710                 | ' t1=pop()
14710                 | ' if t1.result_type=result_int then 
14710     08 4E 85 F1 | 	sub	fp, #8
14714     1C 1E 0E F2 | 	cmp	local01, #28 wz
14718     A7 20 02 AB |  if_e	rdlong	local02, fp
1471c     10 1F 62 A6 |  if_e	neg	local01, local02
14720     A7 1E 62 AC |  if_e	wrlong	local01, fp
14724     5C 00 90 AD |  if_e	jmp	#LR__1652
14728     08 4E 05 F1 | 	add	fp, #8
1472c     A7 1E 02 FB | 	rdlong	local01, fp
14730     08 4E 85 F1 | 	sub	fp, #8
14734     1D 1E 0E F2 | 	cmp	local01, #29 wz
14738     1C 00 90 5D |  if_ne	jmp	#LR__1650
1473c     A7 20 02 FB | 	rdlong	local02, fp
14740     10 1F 62 F6 | 	neg	local01, local02
14744     A7 1E 62 FC | 	wrlong	local01, fp
14748     08 4E 05 F1 | 	add	fp, #8
1474c     A7 38 68 FC | 	wrlong	#28, fp
14750     08 4E 85 F1 | 	sub	fp, #8
14754     2C 00 90 FD | 	jmp	#LR__1651
14758                 | LR__1650
14758     08 4E 05 F1 | 	add	fp, #8
1475c     A7 1E 02 FB | 	rdlong	local01, fp
14760     08 4E 85 F1 | 	sub	fp, #8
14764     1E 1E 0E F2 | 	cmp	local01, #30 wz
14768     A7 FA 01 AB |  if_e	rdlong	result1, fp
1476c     1F FA E5 A4 |  if_e	bitnot	result1, #31
14770     A7 FA 61 AC |  if_e	wrlong	result1, fp
14774     08 4E 05 51 |  if_ne	add	fp, #8
14778     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1477c     08 4E 85 51 |  if_ne	sub	fp, #8
14780     A7 50 68 5C |  if_ne	wrlong	#40, fp
14784                 | LR__1651
14784                 | LR__1652
14784     A7 12 02 F6 | 	mov	arg01, fp
14788     C8 51 BF FD | 	call	#_push
1478c     A7 F0 03 F6 | 	mov	ptra, fp
14790     B2 00 A0 FD | 	call	#popregs_
14794                 | _do_negative_ret
14794     2D 00 64 FD | 	ret
14798                 | 
14798                 | ' 
14798                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
14798                 | ' 
14798                 | ' ''----------------------------------------------------------------------------------------------------
14798                 | ' ''------------------ Initialization procedures -------------------------------------------------------
14798                 | ' ''----------------------------------------------------------------------------------------------------
14798                 | ' 
14798                 | ' ''--------------------------- Command function pointers
14798                 | ' 
14798                 | ' sub init_commands
14798                 | _init_commands
14798                 | ' 
14798                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
14798     00 00 06 F6 | 	mov	_var01, #0
1479c     97 16 48 FB | 	callpa	#(@LR__1661-@LR__1660)>>2,fcache_load_ptr_
147a0                 | LR__1660
147a0     00 FB 01 F6 | 	mov	result1, _var01
147a4     02 FA 65 F0 | 	shl	result1, #2
147a8     62 00 00 FF 
147ac     34 E4 05 F1 | 	add	objptr, ##50228
147b0     F2 FA 01 F1 | 	add	result1, objptr
147b4     62 00 00 FF 
147b8     34 E4 85 F1 | 	sub	objptr, ##50228
147bc     FD E4 61 FC | 	wrlong	objptr, result1
147c0     01 00 06 F1 | 	add	_var01, #1
147c4     00 01 56 F2 | 	cmps	_var01, #256 wc
147c8     D4 FF 9F CD |  if_b	jmp	#LR__1660
147cc                 | LR__1661
147cc     F2 FA 01 F6 | 	mov	result1, objptr
147d0     14 FA 25 F4 | 	bith	result1, #20
147d4     62 00 00 FF 
147d8     38 E4 05 F1 | 	add	objptr, ##50232
147dc     F2 FA 61 FC | 	wrlong	result1, objptr
147e0     62 00 00 FF 
147e4     38 E4 85 F1 | 	sub	objptr, ##50232
147e8     F2 FA 01 F6 | 	mov	result1, objptr
147ec     15 FA 25 F4 | 	bith	result1, #21
147f0     62 00 00 FF 
147f4     3C E4 05 F1 | 	add	objptr, ##50236
147f8     F2 FA 61 FC | 	wrlong	result1, objptr
147fc     62 00 00 FF 
14800     3C E4 85 F1 | 	sub	objptr, ##50236
14804     F2 FA 01 F6 | 	mov	result1, objptr
14808     34 FA 25 F4 | 	bith	result1, #52
1480c     62 00 00 FF 
14810     40 E4 05 F1 | 	add	objptr, ##50240
14814     F2 FA 61 FC | 	wrlong	result1, objptr
14818     62 00 00 FF 
1481c     40 E4 85 F1 | 	sub	objptr, ##50240
14820     F2 FA 01 F6 | 	mov	result1, objptr
14824     16 FA 25 F4 | 	bith	result1, #22
14828     62 00 00 FF 
1482c     48 E4 05 F1 | 	add	objptr, ##50248
14830     F2 FA 61 FC | 	wrlong	result1, objptr
14834     62 00 00 FF 
14838     48 E4 85 F1 | 	sub	objptr, ##50248
1483c     F2 FA 01 F6 | 	mov	result1, objptr
14840     00 28 00 FF 
14844     00 FA 45 F5 | 	or	result1, ##5242880
14848     62 00 00 FF 
1484c     4C E4 05 F1 | 	add	objptr, ##50252
14850     F2 FA 61 FC | 	wrlong	result1, objptr
14854     62 00 00 FF 
14858     4C E4 85 F1 | 	sub	objptr, ##50252
1485c     F2 FA 01 F6 | 	mov	result1, objptr
14860     35 FA 25 F4 | 	bith	result1, #53
14864     62 00 00 FF 
14868     50 E4 05 F1 | 	add	objptr, ##50256
1486c     F2 FA 61 FC | 	wrlong	result1, objptr
14870     62 00 00 FF 
14874     50 E4 85 F1 | 	sub	objptr, ##50256
14878     F2 FA 01 F6 | 	mov	result1, objptr
1487c     54 FA 25 F4 | 	bith	result1, #84
14880     62 00 00 FF 
14884     54 E4 05 F1 | 	add	objptr, ##50260
14888     F2 FA 61 FC | 	wrlong	result1, objptr
1488c     62 00 00 FF 
14890     54 E4 85 F1 | 	sub	objptr, ##50260
14894     F2 FA 01 F6 | 	mov	result1, objptr
14898     17 FA 25 F4 | 	bith	result1, #23
1489c     62 00 00 FF 
148a0     58 E4 05 F1 | 	add	objptr, ##50264
148a4     F2 FA 61 FC | 	wrlong	result1, objptr
148a8     62 00 00 FF 
148ac     58 E4 85 F1 | 	sub	objptr, ##50264
148b0     F2 FA 01 F6 | 	mov	result1, objptr
148b4     00 48 00 FF 
148b8     00 FA 45 F5 | 	or	result1, ##9437184
148bc     62 00 00 FF 
148c0     5C E4 05 F1 | 	add	objptr, ##50268
148c4     F2 FA 61 FC | 	wrlong	result1, objptr
148c8     62 00 00 FF 
148cc     5C E4 85 F1 | 	sub	objptr, ##50268
148d0     F2 FA 01 F6 | 	mov	result1, objptr
148d4     00 50 00 FF 
148d8     00 FA 45 F5 | 	or	result1, ##10485760
148dc     62 00 00 FF 
148e0     60 E4 05 F1 | 	add	objptr, ##50272
148e4     F2 FA 61 FC | 	wrlong	result1, objptr
148e8     62 00 00 FF 
148ec     60 E4 85 F1 | 	sub	objptr, ##50272
148f0     F2 FA 01 F6 | 	mov	result1, objptr
148f4     00 58 00 FF 
148f8     00 FA 45 F5 | 	or	result1, ##11534336
148fc     62 00 00 FF 
14900     64 E4 05 F1 | 	add	objptr, ##50276
14904     F2 FA 61 FC | 	wrlong	result1, objptr
14908     62 00 00 FF 
1490c     64 E4 85 F1 | 	sub	objptr, ##50276
14910     F2 FA 01 F6 | 	mov	result1, objptr
14914     36 FA 25 F4 | 	bith	result1, #54
14918     62 00 00 FF 
1491c     78 E4 05 F1 | 	add	objptr, ##50296
14920     F2 FA 61 FC | 	wrlong	result1, objptr
14924     62 00 00 FF 
14928     78 E4 85 F1 | 	sub	objptr, ##50296
1492c     F2 FA 01 F6 | 	mov	result1, objptr
14930     00 68 00 FF 
14934     00 FA 45 F5 | 	or	result1, ##13631488
14938     62 00 00 FF 
1493c     A8 E4 05 F1 | 	add	objptr, ##50344
14940     F2 FA 61 FC | 	wrlong	result1, objptr
14944     62 00 00 FF 
14948     A8 E4 85 F1 | 	sub	objptr, ##50344
1494c     F2 FA 01 F6 | 	mov	result1, objptr
14950     00 68 00 FF 
14954     00 FA 45 F5 | 	or	result1, ##13631488
14958     62 00 00 FF 
1495c     A4 E4 05 F1 | 	add	objptr, ##50340
14960     F2 FA 61 FC | 	wrlong	result1, objptr
14964     62 00 00 FF 
14968     A4 E4 85 F1 | 	sub	objptr, ##50340
1496c     F2 FA 01 F6 | 	mov	result1, objptr
14970     00 68 00 FF 
14974     00 FA 45 F5 | 	or	result1, ##13631488
14978     62 00 00 FF 
1497c     AC E4 05 F1 | 	add	objptr, ##50348
14980     F2 FA 61 FC | 	wrlong	result1, objptr
14984     62 00 00 FF 
14988     AC E4 85 F1 | 	sub	objptr, ##50348
1498c     F2 FA 01 F6 | 	mov	result1, objptr
14990     00 68 00 FF 
14994     00 FA 45 F5 | 	or	result1, ##13631488
14998     62 00 00 FF 
1499c     B0 E4 05 F1 | 	add	objptr, ##50352
149a0     F2 FA 61 FC | 	wrlong	result1, objptr
149a4     62 00 00 FF 
149a8     B0 E4 85 F1 | 	sub	objptr, ##50352
149ac     F2 FA 01 F6 | 	mov	result1, objptr
149b0     00 68 00 FF 
149b4     00 FA 45 F5 | 	or	result1, ##13631488
149b8     62 00 00 FF 
149bc     E0 E4 05 F1 | 	add	objptr, ##50400
149c0     F2 FA 61 FC | 	wrlong	result1, objptr
149c4     62 00 00 FF 
149c8     E0 E4 85 F1 | 	sub	objptr, ##50400
149cc     F2 FA 01 F6 | 	mov	result1, objptr
149d0     55 FA 25 F4 | 	bith	result1, #85
149d4     62 00 00 FF 
149d8     90 E4 05 F1 | 	add	objptr, ##50320
149dc     F2 FA 61 FC | 	wrlong	result1, objptr
149e0     62 00 00 FF 
149e4     90 E4 85 F1 | 	sub	objptr, ##50320
149e8     F2 FA 01 F6 | 	mov	result1, objptr
149ec     00 68 00 FF 
149f0     00 FA 45 F5 | 	or	result1, ##13631488
149f4     62 00 00 FF 
149f8     B4 E4 05 F1 | 	add	objptr, ##50356
149fc     F2 FA 61 FC | 	wrlong	result1, objptr
14a00     62 00 00 FF 
14a04     B4 E4 85 F1 | 	sub	objptr, ##50356
14a08     F2 FA 01 F6 | 	mov	result1, objptr
14a0c     00 68 00 FF 
14a10     00 FA 45 F5 | 	or	result1, ##13631488
14a14     62 00 00 FF 
14a18     B8 E4 05 F1 | 	add	objptr, ##50360
14a1c     F2 FA 61 FC | 	wrlong	result1, objptr
14a20     62 00 00 FF 
14a24     B8 E4 85 F1 | 	sub	objptr, ##50360
14a28     F2 FA 01 F6 | 	mov	result1, objptr
14a2c     00 68 00 FF 
14a30     00 FA 45 F5 | 	or	result1, ##13631488
14a34     62 00 00 FF 
14a38     BC E4 05 F1 | 	add	objptr, ##50364
14a3c     F2 FA 61 FC | 	wrlong	result1, objptr
14a40     62 00 00 FF 
14a44     BC E4 85 F1 | 	sub	objptr, ##50364
14a48     F2 FA 01 F6 | 	mov	result1, objptr
14a4c     74 FA 25 F4 | 	bith	result1, #116
14a50     62 00 00 FF 
14a54     34 E5 05 F1 | 	add	objptr, ##50484
14a58     F2 FA 61 FC | 	wrlong	result1, objptr
14a5c     62 00 00 FF 
14a60     34 E5 85 F1 | 	sub	objptr, ##50484
14a64     F2 FA 01 F6 | 	mov	result1, objptr
14a68     18 FA 25 F4 | 	bith	result1, #24
14a6c     62 00 00 FF 
14a70     38 E5 05 F1 | 	add	objptr, ##50488
14a74     F2 FA 61 FC | 	wrlong	result1, objptr
14a78     62 00 00 FF 
14a7c     38 E5 85 F1 | 	sub	objptr, ##50488
14a80     F2 FA 01 F6 | 	mov	result1, objptr
14a84     00 88 00 FF 
14a88     00 FA 45 F5 | 	or	result1, ##17825792
14a8c     62 00 00 FF 
14a90     3C E5 05 F1 | 	add	objptr, ##50492
14a94     F2 FA 61 FC | 	wrlong	result1, objptr
14a98     62 00 00 FF 
14a9c     3C E5 85 F1 | 	sub	objptr, ##50492
14aa0     F2 FA 01 F6 | 	mov	result1, objptr
14aa4     00 90 00 FF 
14aa8     00 FA 45 F5 | 	or	result1, ##18874368
14aac     62 00 00 FF 
14ab0     40 E5 05 F1 | 	add	objptr, ##50496
14ab4     F2 FA 61 FC | 	wrlong	result1, objptr
14ab8     62 00 00 FF 
14abc     40 E5 85 F1 | 	sub	objptr, ##50496
14ac0     F2 FA 01 F6 | 	mov	result1, objptr
14ac4     00 98 00 FF 
14ac8     00 FA 45 F5 | 	or	result1, ##19922944
14acc     62 00 00 FF 
14ad0     44 E5 05 F1 | 	add	objptr, ##50500
14ad4     F2 FA 61 FC | 	wrlong	result1, objptr
14ad8     62 00 00 FF 
14adc     44 E5 85 F1 | 	sub	objptr, ##50500
14ae0     F2 FA 01 F6 | 	mov	result1, objptr
14ae4     00 A0 00 FF 
14ae8     00 FA 45 F5 | 	or	result1, ##20971520
14aec     62 00 00 FF 
14af0     48 E5 05 F1 | 	add	objptr, ##50504
14af4     F2 FA 61 FC | 	wrlong	result1, objptr
14af8     62 00 00 FF 
14afc     48 E5 85 F1 | 	sub	objptr, ##50504
14b00     F2 FA 01 F6 | 	mov	result1, objptr
14b04     00 A8 00 FF 
14b08     00 FA 45 F5 | 	or	result1, ##22020096
14b0c     62 00 00 FF 
14b10     4C E5 05 F1 | 	add	objptr, ##50508
14b14     F2 FA 61 FC | 	wrlong	result1, objptr
14b18     62 00 00 FF 
14b1c     4C E5 85 F1 | 	sub	objptr, ##50508
14b20     F2 FA 01 F6 | 	mov	result1, objptr
14b24     00 B0 00 FF 
14b28     00 FA 45 F5 | 	or	result1, ##23068672
14b2c     62 00 00 FF 
14b30     50 E5 05 F1 | 	add	objptr, ##50512
14b34     F2 FA 61 FC | 	wrlong	result1, objptr
14b38     62 00 00 FF 
14b3c     50 E5 85 F1 | 	sub	objptr, ##50512
14b40     F2 FA 01 F6 | 	mov	result1, objptr
14b44     00 B8 00 FF 
14b48     00 FA 45 F5 | 	or	result1, ##24117248
14b4c     62 00 00 FF 
14b50     54 E5 05 F1 | 	add	objptr, ##50516
14b54     F2 FA 61 FC | 	wrlong	result1, objptr
14b58     62 00 00 FF 
14b5c     54 E5 85 F1 | 	sub	objptr, ##50516
14b60     F2 FA 01 F6 | 	mov	result1, objptr
14b64     37 FA 25 F4 | 	bith	result1, #55
14b68     62 00 00 FF 
14b6c     58 E5 05 F1 | 	add	objptr, ##50520
14b70     F2 FA 61 FC | 	wrlong	result1, objptr
14b74     62 00 00 FF 
14b78     58 E5 85 F1 | 	sub	objptr, ##50520
14b7c     F2 FA 01 F6 | 	mov	result1, objptr
14b80     00 C8 00 FF 
14b84     00 FA 45 F5 | 	or	result1, ##26214400
14b88     62 00 00 FF 
14b8c     5C E5 05 F1 | 	add	objptr, ##50524
14b90     F2 FA 61 FC | 	wrlong	result1, objptr
14b94     62 00 00 FF 
14b98     5C E5 85 F1 | 	sub	objptr, ##50524
14b9c     F2 FA 01 F6 | 	mov	result1, objptr
14ba0     00 D0 00 FF 
14ba4     00 FA 45 F5 | 	or	result1, ##27262976
14ba8     62 00 00 FF 
14bac     60 E5 05 F1 | 	add	objptr, ##50528
14bb0     F2 FA 61 FC | 	wrlong	result1, objptr
14bb4     62 00 00 FF 
14bb8     60 E5 85 F1 | 	sub	objptr, ##50528
14bbc     F2 FA 01 F6 | 	mov	result1, objptr
14bc0     00 D8 00 FF 
14bc4     00 FA 45 F5 | 	or	result1, ##28311552
14bc8     62 00 00 FF 
14bcc     64 E5 05 F1 | 	add	objptr, ##50532
14bd0     F2 FA 61 FC | 	wrlong	result1, objptr
14bd4     62 00 00 FF 
14bd8     64 E5 85 F1 | 	sub	objptr, ##50532
14bdc     F2 FA 01 F6 | 	mov	result1, objptr
14be0     56 FA 25 F4 | 	bith	result1, #86
14be4     62 00 00 FF 
14be8     68 E5 05 F1 | 	add	objptr, ##50536
14bec     F2 FA 61 FC | 	wrlong	result1, objptr
14bf0     62 00 00 FF 
14bf4     68 E5 85 F1 | 	sub	objptr, ##50536
14bf8     F2 FA 01 F6 | 	mov	result1, objptr
14bfc     00 E8 00 FF 
14c00     00 FA 45 F5 | 	or	result1, ##30408704
14c04     64 00 00 FF 
14c08     30 E4 05 F1 | 	add	objptr, ##51248
14c0c     F2 FA 61 FC | 	wrlong	result1, objptr
14c10     64 00 00 FF 
14c14     30 E4 85 F1 | 	sub	objptr, ##51248
14c18     F2 FA 01 F6 | 	mov	result1, objptr
14c1c     75 FA 25 F4 | 	bith	result1, #117
14c20     62 00 00 FF 
14c24     6C E5 05 F1 | 	add	objptr, ##50540
14c28     F2 FA 61 FC | 	wrlong	result1, objptr
14c2c     62 00 00 FF 
14c30     6C E5 85 F1 | 	sub	objptr, ##50540
14c34     F2 FA 01 F6 | 	mov	result1, objptr
14c38     94 FA 25 F4 | 	bith	result1, #148
14c3c     62 00 00 FF 
14c40     80 E5 05 F1 | 	add	objptr, ##50560
14c44     F2 FA 61 FC | 	wrlong	result1, objptr
14c48     62 00 00 FF 
14c4c     80 E5 85 F1 | 	sub	objptr, ##50560
14c50     F2 FA 01 F6 | 	mov	result1, objptr
14c54     19 FA 25 F4 | 	bith	result1, #25
14c58     62 00 00 FF 
14c5c     70 E5 05 F1 | 	add	objptr, ##50544
14c60     F2 FA 61 FC | 	wrlong	result1, objptr
14c64     62 00 00 FF 
14c68     70 E5 85 F1 | 	sub	objptr, ##50544
14c6c     F2 FA 01 F6 | 	mov	result1, objptr
14c70     00 08 01 FF 
14c74     00 FA 45 F5 | 	or	result1, ##34603008
14c78     62 00 00 FF 
14c7c     8C E4 05 F1 | 	add	objptr, ##50316
14c80     F2 FA 61 FC | 	wrlong	result1, objptr
14c84     62 00 00 FF 
14c88     8C E4 85 F1 | 	sub	objptr, ##50316
14c8c     F2 FA 01 F6 | 	mov	result1, objptr
14c90     00 10 01 FF 
14c94     00 FA 45 F5 | 	or	result1, ##35651584
14c98     62 00 00 FF 
14c9c     74 E5 05 F1 | 	add	objptr, ##50548
14ca0     F2 FA 61 FC | 	wrlong	result1, objptr
14ca4     62 00 00 FF 
14ca8     74 E5 85 F1 | 	sub	objptr, ##50548
14cac     F2 FA 01 F6 | 	mov	result1, objptr
14cb0     00 18 01 FF 
14cb4     00 FA 45 F5 | 	or	result1, ##36700160
14cb8     62 00 00 FF 
14cbc     78 E5 05 F1 | 	add	objptr, ##50552
14cc0     F2 FA 61 FC | 	wrlong	result1, objptr
14cc4     62 00 00 FF 
14cc8     78 E5 85 F1 | 	sub	objptr, ##50552
14ccc     F2 FA 01 F6 | 	mov	result1, objptr
14cd0     00 20 01 FF 
14cd4     00 FA 45 F5 | 	or	result1, ##37748736
14cd8     62 00 00 FF 
14cdc     7C E5 05 F1 | 	add	objptr, ##50556
14ce0     F2 FA 61 FC | 	wrlong	result1, objptr
14ce4     62 00 00 FF 
14ce8     7C E5 85 F1 | 	sub	objptr, ##50556
14cec     F2 FA 01 F6 | 	mov	result1, objptr
14cf0     00 28 01 FF 
14cf4     00 FA 45 F5 | 	or	result1, ##38797312
14cf8     62 00 00 FF 
14cfc     88 E5 05 F1 | 	add	objptr, ##50568
14d00     F2 FA 61 FC | 	wrlong	result1, objptr
14d04     62 00 00 FF 
14d08     88 E5 85 F1 | 	sub	objptr, ##50568
14d0c     F2 FA 01 F6 | 	mov	result1, objptr
14d10     00 30 01 FF 
14d14     00 FA 45 F5 | 	or	result1, ##39845888
14d18     62 00 00 FF 
14d1c     8C E5 05 F1 | 	add	objptr, ##50572
14d20     F2 FA 61 FC | 	wrlong	result1, objptr
14d24     62 00 00 FF 
14d28     8C E5 85 F1 | 	sub	objptr, ##50572
14d2c     F2 FA 01 F6 | 	mov	result1, objptr
14d30     00 38 01 FF 
14d34     00 FA 45 F5 | 	or	result1, ##40894464
14d38     62 00 00 FF 
14d3c     90 E5 05 F1 | 	add	objptr, ##50576
14d40     F2 FA 61 FC | 	wrlong	result1, objptr
14d44     62 00 00 FF 
14d48     90 E5 85 F1 | 	sub	objptr, ##50576
14d4c     F2 FA 01 F6 | 	mov	result1, objptr
14d50     00 40 01 FF 
14d54     00 FA 45 F5 | 	or	result1, ##41943040
14d58     62 00 00 FF 
14d5c     94 E5 05 F1 | 	add	objptr, ##50580
14d60     F2 FA 61 FC | 	wrlong	result1, objptr
14d64     62 00 00 FF 
14d68     94 E5 85 F1 | 	sub	objptr, ##50580
14d6c     F2 FA 01 F6 | 	mov	result1, objptr
14d70     00 48 01 FF 
14d74     00 FA 45 F5 | 	or	result1, ##42991616
14d78     62 00 00 FF 
14d7c     9C E5 05 F1 | 	add	objptr, ##50588
14d80     F2 FA 61 FC | 	wrlong	result1, objptr
14d84     62 00 00 FF 
14d88     9C E5 85 F1 | 	sub	objptr, ##50588
14d8c     F2 FA 01 F6 | 	mov	result1, objptr
14d90     00 50 01 FF 
14d94     00 FA 45 F5 | 	or	result1, ##44040192
14d98     62 00 00 FF 
14d9c     A0 E5 05 F1 | 	add	objptr, ##50592
14da0     F2 FA 61 FC | 	wrlong	result1, objptr
14da4     62 00 00 FF 
14da8     A0 E5 85 F1 | 	sub	objptr, ##50592
14dac     F2 FA 01 F6 | 	mov	result1, objptr
14db0     00 58 01 FF 
14db4     00 FA 45 F5 | 	or	result1, ##45088768
14db8     62 00 00 FF 
14dbc     A0 E4 05 F1 | 	add	objptr, ##50336
14dc0     F2 FA 61 FC | 	wrlong	result1, objptr
14dc4     62 00 00 FF 
14dc8     A0 E4 85 F1 | 	sub	objptr, ##50336
14dcc     F2 FA 01 F6 | 	mov	result1, objptr
14dd0     00 60 01 FF 
14dd4     00 FA 45 F5 | 	or	result1, ##46137344
14dd8     62 00 00 FF 
14ddc     D0 E4 05 F1 | 	add	objptr, ##50384
14de0     F2 FA 61 FC | 	wrlong	result1, objptr
14de4     62 00 00 FF 
14de8     D0 E4 85 F1 | 	sub	objptr, ##50384
14dec     F2 FA 01 F6 | 	mov	result1, objptr
14df0     00 68 01 FF 
14df4     00 FA 45 F5 | 	or	result1, ##47185920
14df8     62 00 00 FF 
14dfc     CC E4 05 F1 | 	add	objptr, ##50380
14e00     F2 FA 61 FC | 	wrlong	result1, objptr
14e04     62 00 00 FF 
14e08     CC E4 85 F1 | 	sub	objptr, ##50380
14e0c     F2 FA 01 F6 | 	mov	result1, objptr
14e10     00 70 01 FF 
14e14     00 FA 45 F5 | 	or	result1, ##48234496
14e18     62 00 00 FF 
14e1c     70 E4 05 F1 | 	add	objptr, ##50288
14e20     F2 FA 61 FC | 	wrlong	result1, objptr
14e24     62 00 00 FF 
14e28     70 E4 85 F1 | 	sub	objptr, ##50288
14e2c     F2 FA 01 F6 | 	mov	result1, objptr
14e30     00 78 01 FF 
14e34     00 FA 45 F5 | 	or	result1, ##49283072
14e38     62 00 00 FF 
14e3c     74 E4 05 F1 | 	add	objptr, ##50292
14e40     F2 FA 61 FC | 	wrlong	result1, objptr
14e44     62 00 00 FF 
14e48     74 E4 85 F1 | 	sub	objptr, ##50292
14e4c     F2 FA 01 F6 | 	mov	result1, objptr
14e50     38 FA 25 F4 | 	bith	result1, #56
14e54     62 00 00 FF 
14e58     DC E4 05 F1 | 	add	objptr, ##50396
14e5c     F2 FA 61 FC | 	wrlong	result1, objptr
14e60     62 00 00 FF 
14e64     DC E4 85 F1 | 	sub	objptr, ##50396
14e68     F2 FA 01 F6 | 	mov	result1, objptr
14e6c     00 88 01 FF 
14e70     00 FA 45 F5 | 	or	result1, ##51380224
14e74     62 00 00 FF 
14e78     84 E5 05 F1 | 	add	objptr, ##50564
14e7c     F2 FA 61 FC | 	wrlong	result1, objptr
14e80     62 00 00 FF 
14e84     84 E5 85 F1 | 	sub	objptr, ##50564
14e88     F2 FA 01 F6 | 	mov	result1, objptr
14e8c     00 90 01 FF 
14e90     00 FA 45 F5 | 	or	result1, ##52428800
14e94     62 00 00 FF 
14e98     98 E5 05 F1 | 	add	objptr, ##50584
14e9c     F2 FA 61 FC | 	wrlong	result1, objptr
14ea0     62 00 00 FF 
14ea4     98 E5 85 F1 | 	sub	objptr, ##50584
14ea8     F2 FA 01 F6 | 	mov	result1, objptr
14eac     00 98 01 FF 
14eb0     00 FA 45 F5 | 	or	result1, ##53477376
14eb4     62 00 00 FF 
14eb8     A4 E5 05 F1 | 	add	objptr, ##50596
14ebc     F2 FA 61 FC | 	wrlong	result1, objptr
14ec0     62 00 00 FF 
14ec4     A4 E5 85 F1 | 	sub	objptr, ##50596
14ec8     F2 FA 01 F6 | 	mov	result1, objptr
14ecc     00 A0 01 FF 
14ed0     00 FA 45 F5 | 	or	result1, ##54525952
14ed4     62 00 00 FF 
14ed8     A8 E5 05 F1 | 	add	objptr, ##50600
14edc     F2 FA 61 FC | 	wrlong	result1, objptr
14ee0     62 00 00 FF 
14ee4     A8 E5 85 F1 | 	sub	objptr, ##50600
14ee8     F2 FA 01 F6 | 	mov	result1, objptr
14eec     00 A8 01 FF 
14ef0     00 FA 45 F5 | 	or	result1, ##55574528
14ef4     62 00 00 FF 
14ef8     AC E5 05 F1 | 	add	objptr, ##50604
14efc     F2 FA 61 FC | 	wrlong	result1, objptr
14f00     62 00 00 FF 
14f04     AC E5 85 F1 | 	sub	objptr, ##50604
14f08     F2 FA 01 F6 | 	mov	result1, objptr
14f0c     00 B0 01 FF 
14f10     00 FA 45 F5 | 	or	result1, ##56623104
14f14     62 00 00 FF 
14f18     B0 E5 05 F1 | 	add	objptr, ##50608
14f1c     F2 FA 61 FC | 	wrlong	result1, objptr
14f20     62 00 00 FF 
14f24     B0 E5 85 F1 | 	sub	objptr, ##50608
14f28     F2 FA 01 F6 | 	mov	result1, objptr
14f2c     00 B8 01 FF 
14f30     00 FA 45 F5 | 	or	result1, ##57671680
14f34     62 00 00 FF 
14f38     B4 E5 05 F1 | 	add	objptr, ##50612
14f3c     F2 FA 61 FC | 	wrlong	result1, objptr
14f40     62 00 00 FF 
14f44     B4 E5 85 F1 | 	sub	objptr, ##50612
14f48     F2 FA 01 F6 | 	mov	result1, objptr
14f4c     57 FA 25 F4 | 	bith	result1, #87
14f50     62 00 00 FF 
14f54     B8 E5 05 F1 | 	add	objptr, ##50616
14f58     F2 FA 61 FC | 	wrlong	result1, objptr
14f5c     62 00 00 FF 
14f60     B8 E5 85 F1 | 	sub	objptr, ##50616
14f64     F2 FA 01 F6 | 	mov	result1, objptr
14f68     94 FA 25 F4 | 	bith	result1, #148
14f6c     62 00 00 FF 
14f70     80 E5 05 F1 | 	add	objptr, ##50560
14f74     F2 FA 61 FC | 	wrlong	result1, objptr
14f78     62 00 00 FF 
14f7c     80 E5 85 F1 | 	sub	objptr, ##50560
14f80     F2 FA 01 F6 | 	mov	result1, objptr
14f84     00 C8 01 FF 
14f88     00 FA 45 F5 | 	or	result1, ##59768832
14f8c     62 00 00 FF 
14f90     C0 E5 05 F1 | 	add	objptr, ##50624
14f94     F2 FA 61 FC | 	wrlong	result1, objptr
14f98     62 00 00 FF 
14f9c     C0 E5 85 F1 | 	sub	objptr, ##50624
14fa0     F2 FA 01 F6 | 	mov	result1, objptr
14fa4     00 D0 01 FF 
14fa8     00 FA 45 F5 | 	or	result1, ##60817408
14fac     62 00 00 FF 
14fb0     BC E5 05 F1 | 	add	objptr, ##50620
14fb4     F2 FA 61 FC | 	wrlong	result1, objptr
14fb8     62 00 00 FF 
14fbc     BC E5 85 F1 | 	sub	objptr, ##50620
14fc0     F2 FA 01 F6 | 	mov	result1, objptr
14fc4     00 D8 01 FF 
14fc8     00 FA 45 F5 | 	or	result1, ##61865984
14fcc     62 00 00 FF 
14fd0     D4 E5 05 F1 | 	add	objptr, ##50644
14fd4     F2 FA 61 FC | 	wrlong	result1, objptr
14fd8     62 00 00 FF 
14fdc     D4 E5 85 F1 | 	sub	objptr, ##50644
14fe0     F2 FA 01 F6 | 	mov	result1, objptr
14fe4     76 FA 25 F4 | 	bith	result1, #118
14fe8     62 00 00 FF 
14fec     D8 E5 05 F1 | 	add	objptr, ##50648
14ff0     F2 FA 61 FC | 	wrlong	result1, objptr
14ff4     62 00 00 FF 
14ff8     D8 E5 85 F1 | 	sub	objptr, ##50648
14ffc     F2 FA 01 F6 | 	mov	result1, objptr
15000     00 E8 01 FF 
15004     00 FA 45 F5 | 	or	result1, ##63963136
15008     62 00 00 FF 
1500c     C4 E5 05 F1 | 	add	objptr, ##50628
15010     F2 FA 61 FC | 	wrlong	result1, objptr
15014     62 00 00 FF 
15018     C4 E5 85 F1 | 	sub	objptr, ##50628
1501c     F2 FA 01 F6 | 	mov	result1, objptr
15020     95 FA 25 F4 | 	bith	result1, #149
15024     62 00 00 FF 
15028     C8 E5 05 F1 | 	add	objptr, ##50632
1502c     F2 FA 61 FC | 	wrlong	result1, objptr
15030     62 00 00 FF 
15034     C8 E5 85 F1 | 	sub	objptr, ##50632
15038     F2 FA 01 F6 | 	mov	result1, objptr
1503c     B4 FA 25 F4 | 	bith	result1, #180
15040     62 00 00 FF 
15044     CC E5 05 F1 | 	add	objptr, ##50636
15048     F2 FA 61 FC | 	wrlong	result1, objptr
1504c     62 00 00 FF 
15050     CC E5 85 F1 | 	sub	objptr, ##50636
15054     F2 FA 01 F6 | 	mov	result1, objptr
15058     1A FA 25 F4 | 	bith	result1, #26
1505c     62 00 00 FF 
15060     D0 E5 05 F1 | 	add	objptr, ##50640
15064     F2 FA 61 FC | 	wrlong	result1, objptr
15068     62 00 00 FF 
1506c     D0 E5 85 F1 | 	sub	objptr, ##50640
15070     F2 FA 01 F6 | 	mov	result1, objptr
15074     00 08 02 FF 
15078     00 FA 45 F5 | 	or	result1, ##68157440
1507c     62 00 00 FF 
15080     E0 E5 05 F1 | 	add	objptr, ##50656
15084     F2 FA 61 FC | 	wrlong	result1, objptr
15088     62 00 00 FF 
1508c     E0 E5 85 F1 | 	sub	objptr, ##50656
15090     F2 FA 01 F6 | 	mov	result1, objptr
15094     00 10 02 FF 
15098     00 FA 45 F5 | 	or	result1, ##69206016
1509c     62 00 00 FF 
150a0     DC E5 05 F1 | 	add	objptr, ##50652
150a4     F2 FA 61 FC | 	wrlong	result1, objptr
150a8     62 00 00 FF 
150ac     DC E5 85 F1 | 	sub	objptr, ##50652
150b0     F2 FA 01 F6 | 	mov	result1, objptr
150b4     00 18 02 FF 
150b8     00 FA 45 F5 | 	or	result1, ##70254592
150bc     62 00 00 FF 
150c0     EC E5 05 F1 | 	add	objptr, ##50668
150c4     F2 FA 61 FC | 	wrlong	result1, objptr
150c8     62 00 00 FF 
150cc     EC E5 85 F1 | 	sub	objptr, ##50668
150d0     F2 FA 01 F6 | 	mov	result1, objptr
150d4     00 20 02 FF 
150d8     00 FA 45 F5 | 	or	result1, ##71303168
150dc     62 00 00 FF 
150e0     E8 E5 05 F1 | 	add	objptr, ##50664
150e4     F2 FA 61 FC | 	wrlong	result1, objptr
150e8     62 00 00 FF 
150ec     E8 E5 85 F1 | 	sub	objptr, ##50664
150f0     F2 FA 01 F6 | 	mov	result1, objptr
150f4     00 28 02 FF 
150f8     00 FA 45 F5 | 	or	result1, ##72351744
150fc     62 00 00 FF 
15100     E4 E5 05 F1 | 	add	objptr, ##50660
15104     F2 FA 61 FC | 	wrlong	result1, objptr
15108     62 00 00 FF 
1510c     E4 E5 85 F1 | 	sub	objptr, ##50660
15110     F2 FA 01 F6 | 	mov	result1, objptr
15114     00 30 02 FF 
15118     00 FA 45 F5 | 	or	result1, ##73400320
1511c     62 00 00 FF 
15120     F0 E5 05 F1 | 	add	objptr, ##50672
15124     F2 FA 61 FC | 	wrlong	result1, objptr
15128     62 00 00 FF 
1512c     F0 E5 85 F1 | 	sub	objptr, ##50672
15130     F2 FA 01 F6 | 	mov	result1, objptr
15134     00 38 02 FF 
15138     00 FA 45 F5 | 	or	result1, ##74448896
1513c     62 00 00 FF 
15140     F4 E5 05 F1 | 	add	objptr, ##50676
15144     F2 FA 61 FC | 	wrlong	result1, objptr
15148     62 00 00 FF 
1514c     F4 E5 85 F1 | 	sub	objptr, ##50676
15150     F2 FA 01 F6 | 	mov	result1, objptr
15154     00 40 02 FF 
15158     00 FA 45 F5 | 	or	result1, ##75497472
1515c     62 00 00 FF 
15160     88 E4 05 F1 | 	add	objptr, ##50312
15164     F2 FA 61 FC | 	wrlong	result1, objptr
15168     62 00 00 FF 
1516c     88 E4 85 F1 | 	sub	objptr, ##50312
15170     F2 FA 01 F6 | 	mov	result1, objptr
15174     00 48 02 FF 
15178     00 FA 45 F5 | 	or	result1, ##76546048
1517c     63 00 00 FF 
15180     0C E4 05 F1 | 	add	objptr, ##50700
15184     F2 FA 61 FC | 	wrlong	result1, objptr
15188     63 00 00 FF 
1518c     0C E4 85 F1 | 	sub	objptr, ##50700
15190     F2 FA 01 F6 | 	mov	result1, objptr
15194     00 50 02 FF 
15198     00 FA 45 F5 | 	or	result1, ##77594624
1519c     63 00 00 FF 
151a0     1C E4 05 F1 | 	add	objptr, ##50716
151a4     F2 FA 61 FC | 	wrlong	result1, objptr
151a8     63 00 00 FF 
151ac     1C E4 85 F1 | 	sub	objptr, ##50716
151b0     F2 FA 01 F6 | 	mov	result1, objptr
151b4     00 58 02 FF 
151b8     00 FA 45 F5 | 	or	result1, ##78643200
151bc     63 00 00 FF 
151c0     20 E4 05 F1 | 	add	objptr, ##50720
151c4     F2 FA 61 FC | 	wrlong	result1, objptr
151c8     63 00 00 FF 
151cc     20 E4 85 F1 | 	sub	objptr, ##50720
151d0     F2 FA 01 F6 | 	mov	result1, objptr
151d4     00 60 02 FF 
151d8     00 FA 45 F5 | 	or	result1, ##79691776
151dc     63 00 00 FF 
151e0     18 E4 05 F1 | 	add	objptr, ##50712
151e4     F2 FA 61 FC | 	wrlong	result1, objptr
151e8     63 00 00 FF 
151ec     18 E4 85 F1 | 	sub	objptr, ##50712
151f0     F2 FA 01 F6 | 	mov	result1, objptr
151f4     00 68 02 FF 
151f8     00 FA 45 F5 | 	or	result1, ##80740352
151fc     63 00 00 FF 
15200     10 E4 05 F1 | 	add	objptr, ##50704
15204     F2 FA 61 FC | 	wrlong	result1, objptr
15208     63 00 00 FF 
1520c     10 E4 85 F1 | 	sub	objptr, ##50704
15210     F2 FA 01 F6 | 	mov	result1, objptr
15214     00 70 02 FF 
15218     00 FA 45 F5 | 	or	result1, ##81788928
1521c     63 00 00 FF 
15220     14 E4 05 F1 | 	add	objptr, ##50708
15224     F2 FA 61 FC | 	wrlong	result1, objptr
15228     63 00 00 FF 
1522c     14 E4 85 F1 | 	sub	objptr, ##50708
15230     F2 FA 01 F6 | 	mov	result1, objptr
15234     00 78 02 FF 
15238     00 FA 45 F5 | 	or	result1, ##82837504
1523c     63 00 00 FF 
15240     24 E4 05 F1 | 	add	objptr, ##50724
15244     F2 FA 61 FC | 	wrlong	result1, objptr
15248     63 00 00 FF 
1524c     24 E4 85 F1 | 	sub	objptr, ##50724
15250     F2 FA 01 F6 | 	mov	result1, objptr
15254     00 80 02 FF 
15258     00 FA 45 F5 | 	or	result1, ##83886080
1525c     63 00 00 FF 
15260     28 E4 05 F1 | 	add	objptr, ##50728
15264     F2 FA 61 FC | 	wrlong	result1, objptr
15268     63 00 00 FF 
1526c     28 E4 85 F1 | 	sub	objptr, ##50728
15270     F2 FA 01 F6 | 	mov	result1, objptr
15274     00 88 02 FF 
15278     00 FA 45 F5 | 	or	result1, ##84934656
1527c     63 00 00 FF 
15280     2C E4 05 F1 | 	add	objptr, ##50732
15284     F2 FA 61 FC | 	wrlong	result1, objptr
15288     63 00 00 FF 
1528c     2C E4 85 F1 | 	sub	objptr, ##50732
15290     F2 FA 01 F6 | 	mov	result1, objptr
15294     00 90 02 FF 
15298     00 FA 45 F5 | 	or	result1, ##85983232
1529c     63 00 00 FF 
152a0     30 E4 05 F1 | 	add	objptr, ##50736
152a4     F2 FA 61 FC | 	wrlong	result1, objptr
152a8     63 00 00 FF 
152ac     30 E4 85 F1 | 	sub	objptr, ##50736
152b0     F2 FA 01 F6 | 	mov	result1, objptr
152b4     00 98 02 FF 
152b8     00 FA 45 F5 | 	or	result1, ##87031808
152bc     63 00 00 FF 
152c0     34 E4 05 F1 | 	add	objptr, ##50740
152c4     F2 FA 61 FC | 	wrlong	result1, objptr
152c8     63 00 00 FF 
152cc     34 E4 85 F1 | 	sub	objptr, ##50740
152d0     F2 FA 01 F6 | 	mov	result1, objptr
152d4     00 A0 02 FF 
152d8     00 FA 45 F5 | 	or	result1, ##88080384
152dc     63 00 00 FF 
152e0     38 E4 05 F1 | 	add	objptr, ##50744
152e4     F2 FA 61 FC | 	wrlong	result1, objptr
152e8     63 00 00 FF 
152ec     38 E4 85 F1 | 	sub	objptr, ##50744
152f0     F2 FA 01 F6 | 	mov	result1, objptr
152f4     00 A8 02 FF 
152f8     00 FA 45 F5 | 	or	result1, ##89128960
152fc     63 00 00 FF 
15300     3C E4 05 F1 | 	add	objptr, ##50748
15304     F2 FA 61 FC | 	wrlong	result1, objptr
15308     63 00 00 FF 
1530c     3C E4 85 F1 | 	sub	objptr, ##50748
15310     F2 FA 01 F6 | 	mov	result1, objptr
15314     00 B0 02 FF 
15318     00 FA 45 F5 | 	or	result1, ##90177536
1531c     63 00 00 FF 
15320     40 E4 05 F1 | 	add	objptr, ##50752
15324     F2 FA 61 FC | 	wrlong	result1, objptr
15328     63 00 00 FF 
1532c     40 E4 85 F1 | 	sub	objptr, ##50752
15330     F2 FA 01 F6 | 	mov	result1, objptr
15334     00 B8 02 FF 
15338     00 FA 45 F5 | 	or	result1, ##91226112
1533c     63 00 00 FF 
15340     4C E4 05 F1 | 	add	objptr, ##50764
15344     F2 FA 61 FC | 	wrlong	result1, objptr
15348     63 00 00 FF 
1534c     4C E4 85 F1 | 	sub	objptr, ##50764
15350     F2 FA 01 F6 | 	mov	result1, objptr
15354     00 C0 02 FF 
15358     00 FA 45 F5 | 	or	result1, ##92274688
1535c     63 00 00 FF 
15360     44 E4 05 F1 | 	add	objptr, ##50756
15364     F2 FA 61 FC | 	wrlong	result1, objptr
15368     63 00 00 FF 
1536c     44 E4 85 F1 | 	sub	objptr, ##50756
15370     F2 FA 01 F6 | 	mov	result1, objptr
15374     00 C8 02 FF 
15378     00 FA 45 F5 | 	or	result1, ##93323264
1537c     63 00 00 FF 
15380     48 E4 05 F1 | 	add	objptr, ##50760
15384     F2 FA 61 FC | 	wrlong	result1, objptr
15388     63 00 00 FF 
1538c     48 E4 85 F1 | 	sub	objptr, ##50760
15390     F2 FA 01 F6 | 	mov	result1, objptr
15394     00 D0 02 FF 
15398     00 FA 45 F5 | 	or	result1, ##94371840
1539c     63 00 00 FF 
153a0     50 E4 05 F1 | 	add	objptr, ##50768
153a4     F2 FA 61 FC | 	wrlong	result1, objptr
153a8     63 00 00 FF 
153ac     50 E4 85 F1 | 	sub	objptr, ##50768
153b0     F2 FA 01 F6 | 	mov	result1, objptr
153b4     00 D8 02 FF 
153b8     00 FA 45 F5 | 	or	result1, ##95420416
153bc     62 00 00 FF 
153c0     F8 E5 05 F1 | 	add	objptr, ##50680
153c4     F2 FA 61 FC | 	wrlong	result1, objptr
153c8     62 00 00 FF 
153cc     F8 E5 85 F1 | 	sub	objptr, ##50680
153d0     F2 FA 01 F6 | 	mov	result1, objptr
153d4     00 E0 02 FF 
153d8     00 FA 45 F5 | 	or	result1, ##96468992
153dc     63 00 00 FF 
153e0     00 E4 05 F1 | 	add	objptr, ##50688
153e4     F2 FA 61 FC | 	wrlong	result1, objptr
153e8     63 00 00 FF 
153ec     00 E4 85 F1 | 	sub	objptr, ##50688
153f0     F2 FA 01 F6 | 	mov	result1, objptr
153f4     00 E8 02 FF 
153f8     00 FA 45 F5 | 	or	result1, ##97517568
153fc     63 00 00 FF 
15400     04 E4 05 F1 | 	add	objptr, ##50692
15404     F2 FA 61 FC | 	wrlong	result1, objptr
15408     63 00 00 FF 
1540c     04 E4 85 F1 | 	sub	objptr, ##50692
15410     F2 FA 01 F6 | 	mov	result1, objptr
15414     00 F0 02 FF 
15418     00 FA 45 F5 | 	or	result1, ##98566144
1541c     63 00 00 FF 
15420     54 E4 05 F1 | 	add	objptr, ##50772
15424     F2 FA 61 FC | 	wrlong	result1, objptr
15428     63 00 00 FF 
1542c     54 E4 85 F1 | 	sub	objptr, ##50772
15430     F2 FA 01 F6 | 	mov	result1, objptr
15434     00 F8 02 FF 
15438     00 FA 45 F5 | 	or	result1, ##99614720
1543c     63 00 00 FF 
15440     58 E4 05 F1 | 	add	objptr, ##50776
15444     F2 FA 61 FC | 	wrlong	result1, objptr
15448     63 00 00 FF 
1544c     58 E4 85 F1 | 	sub	objptr, ##50776
15450     F2 FA 01 F6 | 	mov	result1, objptr
15454     39 FA 25 F4 | 	bith	result1, #57
15458     63 00 00 FF 
1545c     5C E4 05 F1 | 	add	objptr, ##50780
15460     F2 FA 61 FC | 	wrlong	result1, objptr
15464     63 00 00 FF 
15468     5C E4 85 F1 | 	sub	objptr, ##50780
1546c                 | _init_commands_ret
1546c     2D 00 64 FD | 	ret
15470                 | 
15470                 | ' 
15470                 | ' ''--------------------------------Error strings -------------------------------------
15470                 | ' 
15470                 | ' sub init_error_strings
15470                 | _init_error_strings
15470     43 01 00 FF 
15474     F3 01 06 F6 | 	mov	_var01, ##@LR__4629
15478     64 00 00 FF 
1547c     50 E4 05 F1 | 	add	objptr, ##51280
15480     F2 00 62 FC | 	wrlong	_var01, objptr
15484     43 01 00 FF 
15488     F4 01 06 F6 | 	mov	_var01, ##@LR__4630
1548c     04 E4 05 F1 | 	add	objptr, #4
15490     F2 00 62 FC | 	wrlong	_var01, objptr
15494     44 01 00 FF 
15498     19 00 06 F6 | 	mov	_var01, ##@LR__4631
1549c     04 E4 05 F1 | 	add	objptr, #4
154a0     F2 00 62 FC | 	wrlong	_var01, objptr
154a4     44 01 00 FF 
154a8     3A 00 06 F6 | 	mov	_var01, ##@LR__4632
154ac     04 E4 05 F1 | 	add	objptr, #4
154b0     F2 00 62 FC | 	wrlong	_var01, objptr
154b4     44 01 00 FF 
154b8     54 00 06 F6 | 	mov	_var01, ##@LR__4633
154bc     04 E4 05 F1 | 	add	objptr, #4
154c0     F2 00 62 FC | 	wrlong	_var01, objptr
154c4     44 01 00 FF 
154c8     70 00 06 F6 | 	mov	_var01, ##@LR__4634
154cc     04 E4 05 F1 | 	add	objptr, #4
154d0     F2 00 62 FC | 	wrlong	_var01, objptr
154d4     44 01 00 FF 
154d8     92 00 06 F6 | 	mov	_var01, ##@LR__4635
154dc     04 E4 05 F1 | 	add	objptr, #4
154e0     F2 00 62 FC | 	wrlong	_var01, objptr
154e4     44 01 00 FF 
154e8     C0 00 06 F6 | 	mov	_var01, ##@LR__4636
154ec     04 E4 05 F1 | 	add	objptr, #4
154f0     F2 00 62 FC | 	wrlong	_var01, objptr
154f4     44 01 00 FF 
154f8     EB 00 06 F6 | 	mov	_var01, ##@LR__4637
154fc     04 E4 05 F1 | 	add	objptr, #4
15500     F2 00 62 FC | 	wrlong	_var01, objptr
15504     44 01 00 FF 
15508     04 01 06 F6 | 	mov	_var01, ##@LR__4638
1550c     04 E4 05 F1 | 	add	objptr, #4
15510     F2 00 62 FC | 	wrlong	_var01, objptr
15514     44 01 00 FF 
15518     25 01 06 F6 | 	mov	_var01, ##@LR__4639
1551c     04 E4 05 F1 | 	add	objptr, #4
15520     F2 00 62 FC | 	wrlong	_var01, objptr
15524     44 01 00 FF 
15528     3C 01 06 F6 | 	mov	_var01, ##@LR__4640
1552c     04 E4 05 F1 | 	add	objptr, #4
15530     F2 00 62 FC | 	wrlong	_var01, objptr
15534     44 01 00 FF 
15538     5A 01 06 F6 | 	mov	_var01, ##@LR__4641
1553c     04 E4 05 F1 | 	add	objptr, #4
15540     F2 00 62 FC | 	wrlong	_var01, objptr
15544     44 01 00 FF 
15548     7E 01 06 F6 | 	mov	_var01, ##@LR__4642
1554c     04 E4 05 F1 | 	add	objptr, #4
15550     F2 00 62 FC | 	wrlong	_var01, objptr
15554     44 01 00 FF 
15558     A5 01 06 F6 | 	mov	_var01, ##@LR__4643
1555c     04 E4 05 F1 | 	add	objptr, #4
15560     F2 00 62 FC | 	wrlong	_var01, objptr
15564     44 01 00 FF 
15568     C1 01 06 F6 | 	mov	_var01, ##@LR__4644
1556c     04 E4 05 F1 | 	add	objptr, #4
15570     F2 00 62 FC | 	wrlong	_var01, objptr
15574     44 01 00 FF 
15578     D2 01 06 F6 | 	mov	_var01, ##@LR__4645
1557c     04 E4 05 F1 | 	add	objptr, #4
15580     F2 00 62 FC | 	wrlong	_var01, objptr
15584     44 01 00 FF 
15588     E2 01 06 F6 | 	mov	_var01, ##@LR__4646
1558c     04 E4 05 F1 | 	add	objptr, #4
15590     F2 00 62 FC | 	wrlong	_var01, objptr
15594     44 01 00 FF 
15598     FD 01 06 F6 | 	mov	_var01, ##@LR__4647
1559c     04 E4 05 F1 | 	add	objptr, #4
155a0     F2 00 62 FC | 	wrlong	_var01, objptr
155a4     45 01 00 FF 
155a8     0F 00 06 F6 | 	mov	_var01, ##@LR__4648
155ac     04 E4 05 F1 | 	add	objptr, #4
155b0     F2 00 62 FC | 	wrlong	_var01, objptr
155b4     45 01 00 FF 
155b8     27 00 06 F6 | 	mov	_var01, ##@LR__4649
155bc     04 E4 05 F1 | 	add	objptr, #4
155c0     F2 00 62 FC | 	wrlong	_var01, objptr
155c4     45 01 00 FF 
155c8     3B 00 06 F6 | 	mov	_var01, ##@LR__4650
155cc     04 E4 05 F1 | 	add	objptr, #4
155d0     F2 00 62 FC | 	wrlong	_var01, objptr
155d4     45 01 00 FF 
155d8     4B 00 06 F6 | 	mov	_var01, ##@LR__4651
155dc     04 E4 05 F1 | 	add	objptr, #4
155e0     F2 00 62 FC | 	wrlong	_var01, objptr
155e4     45 01 00 FF 
155e8     68 00 06 F6 | 	mov	_var01, ##@LR__4652
155ec     04 E4 05 F1 | 	add	objptr, #4
155f0     F2 00 62 FC | 	wrlong	_var01, objptr
155f4     45 01 00 FF 
155f8     79 00 06 F6 | 	mov	_var01, ##@LR__4653
155fc     04 E4 05 F1 | 	add	objptr, #4
15600     F2 00 62 FC | 	wrlong	_var01, objptr
15604     45 01 00 FF 
15608     8A 00 06 F6 | 	mov	_var01, ##@LR__4654
1560c     04 E4 05 F1 | 	add	objptr, #4
15610     F2 00 62 FC | 	wrlong	_var01, objptr
15614     45 01 00 FF 
15618     B5 00 06 F6 | 	mov	_var01, ##@LR__4655
1561c     04 E4 05 F1 | 	add	objptr, #4
15620     F2 00 62 FC | 	wrlong	_var01, objptr
15624     45 01 00 FF 
15628     D1 00 06 F6 | 	mov	_var01, ##@LR__4656
1562c     04 E4 05 F1 | 	add	objptr, #4
15630     F2 00 62 FC | 	wrlong	_var01, objptr
15634     45 01 00 FF 
15638     E7 00 06 F6 | 	mov	_var01, ##@LR__4657
1563c     04 E4 05 F1 | 	add	objptr, #4
15640     F2 00 62 FC | 	wrlong	_var01, objptr
15644     45 01 00 FF 
15648     F4 00 06 F6 | 	mov	_var01, ##@LR__4658
1564c     04 E4 05 F1 | 	add	objptr, #4
15650     F2 00 62 FC | 	wrlong	_var01, objptr
15654     45 01 00 FF 
15658     06 01 06 F6 | 	mov	_var01, ##@LR__4659
1565c     04 E4 05 F1 | 	add	objptr, #4
15660     F2 00 62 FC | 	wrlong	_var01, objptr
15664     45 01 00 FF 
15668     17 01 06 F6 | 	mov	_var01, ##@LR__4660
1566c     04 E4 05 F1 | 	add	objptr, #4
15670     F2 00 62 FC | 	wrlong	_var01, objptr
15674     45 01 00 FF 
15678     33 01 06 F6 | 	mov	_var01, ##@LR__4661
1567c     04 E4 05 F1 | 	add	objptr, #4
15680     F2 00 62 FC | 	wrlong	_var01, objptr
15684     45 01 00 FF 
15688     44 01 06 F6 | 	mov	_var01, ##@LR__4662
1568c     04 E4 05 F1 | 	add	objptr, #4
15690     F2 00 62 FC | 	wrlong	_var01, objptr
15694     45 01 00 FF 
15698     53 01 06 F6 | 	mov	_var01, ##@LR__4663
1569c     04 E4 05 F1 | 	add	objptr, #4
156a0     F2 00 62 FC | 	wrlong	_var01, objptr
156a4     45 01 00 FF 
156a8     6E 01 06 F6 | 	mov	_var01, ##@LR__4664
156ac     04 E4 05 F1 | 	add	objptr, #4
156b0     F2 00 62 FC | 	wrlong	_var01, objptr
156b4     45 01 00 FF 
156b8     A2 01 06 F6 | 	mov	_var01, ##@LR__4665
156bc     04 E4 05 F1 | 	add	objptr, #4
156c0     F2 00 62 FC | 	wrlong	_var01, objptr
156c4     45 01 00 FF 
156c8     BB 01 06 F6 | 	mov	_var01, ##@LR__4666
156cc     04 E4 05 F1 | 	add	objptr, #4
156d0     F2 00 62 FC | 	wrlong	_var01, objptr
156d4     45 01 00 FF 
156d8     D7 01 06 F6 | 	mov	_var01, ##@LR__4667
156dc     04 E4 05 F1 | 	add	objptr, #4
156e0     F2 00 62 FC | 	wrlong	_var01, objptr
156e4     45 01 00 FF 
156e8     F5 01 06 F6 | 	mov	_var01, ##@LR__4668
156ec     04 E4 05 F1 | 	add	objptr, #4
156f0     F2 00 62 FC | 	wrlong	_var01, objptr
156f4     46 01 00 FF 
156f8     0E 00 06 F6 | 	mov	_var01, ##@LR__4669
156fc     04 E4 05 F1 | 	add	objptr, #4
15700     F2 00 62 FC | 	wrlong	_var01, objptr
15704     46 01 00 FF 
15708     2D 00 06 F6 | 	mov	_var01, ##@LR__4670
1570c     04 E4 05 F1 | 	add	objptr, #4
15710     F2 00 62 FC | 	wrlong	_var01, objptr
15714     46 01 00 FF 
15718     3C 00 06 F6 | 	mov	_var01, ##@LR__4671
1571c     04 E4 05 F1 | 	add	objptr, #4
15720     F2 00 62 FC | 	wrlong	_var01, objptr
15724     46 01 00 FF 
15728     6A 00 06 F6 | 	mov	_var01, ##@LR__4672
1572c     04 E4 05 F1 | 	add	objptr, #4
15730     F2 00 62 FC | 	wrlong	_var01, objptr
15734     46 01 00 FF 
15738     78 00 06 F6 | 	mov	_var01, ##@LR__4673
1573c     04 E4 05 F1 | 	add	objptr, #4
15740     F2 00 62 FC | 	wrlong	_var01, objptr
15744     46 01 00 FF 
15748     8D 00 06 F6 | 	mov	_var01, ##@LR__4674
1574c     04 E4 05 F1 | 	add	objptr, #4
15750     F2 00 62 FC | 	wrlong	_var01, objptr
15754     46 01 00 FF 
15758     B1 00 06 F6 | 	mov	_var01, ##@LR__4675
1575c     04 E4 05 F1 | 	add	objptr, #4
15760     F2 00 62 FC | 	wrlong	_var01, objptr
15764     46 01 00 FF 
15768     C8 00 06 F6 | 	mov	_var01, ##@LR__4676
1576c     04 E4 05 F1 | 	add	objptr, #4
15770     F2 00 62 FC | 	wrlong	_var01, objptr
15774     46 01 00 FF 
15778     DB 00 06 F6 | 	mov	_var01, ##@LR__4677
1577c     04 E4 05 F1 | 	add	objptr, #4
15780     F2 00 62 FC | 	wrlong	_var01, objptr
15784     64 00 00 FF 
15788     10 E5 85 F1 | 	sub	objptr, ##51472
1578c                 | _init_error_strings_ret
1578c     2D 00 64 FD | 	ret
15790                 | 
15790                 | '         
15790                 | ' sub printerror(err as integer)
15790                 | _printerror
15790     01 4A 05 F6 | 	mov	COUNT_, #1
15794     A8 00 A0 FD | 	call	#pushregs_
15798     09 1F 02 F6 | 	mov	local01, arg01
1579c     46 01 00 FF 
157a0     F2 12 06 F6 | 	mov	arg01, ##@LR__4678
157a4     E4 24 B0 FD | 	call	#_hg010b_spin2_write
157a8     0F 13 02 F6 | 	mov	arg01, local01
157ac     DC 26 B0 FD | 	call	#_hg010b_spin2_inttostr
157b0     FD 12 02 F6 | 	mov	arg01, result1
157b4     D4 24 B0 FD | 	call	#_hg010b_spin2_write
157b8     46 01 00 FF 
157bc     F9 12 06 F6 | 	mov	arg01, ##@LR__4679
157c0     C8 24 B0 FD | 	call	#_hg010b_spin2_write
157c4     02 1E 66 F0 | 	shl	local01, #2
157c8     64 00 00 FF 
157cc     50 E4 05 F1 | 	add	objptr, ##51280
157d0     F2 1E 02 F1 | 	add	local01, objptr
157d4     0F 13 02 FB | 	rdlong	arg01, local01
157d8     64 00 00 FF 
157dc     50 E4 85 F1 | 	sub	objptr, ##51280
157e0                 | ' 
157e0                 | ' write(text)
157e0     A8 24 B0 FD | 	call	#_hg010b_spin2_write
157e4                 | ' crlf
157e4     04 26 B0 FD | 	call	#_hg010b_spin2_crlf
157e8     A7 F0 03 F6 | 	mov	ptra, fp
157ec     B2 00 A0 FD | 	call	#popregs_
157f0                 | _printerror_ret
157f0     2D 00 64 FD | 	ret
157f4                 | 
157f4                 | ' 
157f4                 | ' '' ------------------------------- Hardware start/stop/initialization 
157f4                 | ' 
157f4                 | ' sub startpsram
157f4                 | _startpsram
157f4     00 12 06 F6 | 	mov	arg01, #0
157f8     0A 14 C6 F9 | 	decod	arg02, #10
157fc     0B 16 06 F6 | 	mov	arg03, #11
15800     07 18 06 F6 | 	mov	arg04, #7
15804     0B 00 00 FF 
15808     C0 E4 05 F1 | 	add	objptr, ##5824
1580c     88 27 B0 FD | 	call	#_psram_spin2_startx
15810     4A 00 00 FF 
15814     1C E5 05 F1 | 	add	objptr, ##38172
15818     F2 FA 61 FC | 	wrlong	result1, objptr
1581c                 | '     return $7FF00 + cog*12
1581c     0C E4 05 F1 | 	add	objptr, #12
15820     FF 03 80 FF 
15824     F2 00 6A FC | 	wrlong	##524032, objptr
15828     55 00 00 FF 
1582c     E8 E5 85 F1 | 	sub	objptr, ##44008
15830                 | _startpsram_ret
15830     2D 00 64 FD | 	ret
15834                 | 
15834                 | ' 
15834                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
15834                 | _startvideo
15834     01 4A 05 F6 | 	mov	COUNT_, #1
15838     A8 00 A0 FD | 	call	#pushregs_
1583c     55 00 00 FF 
15840     E8 E5 05 F1 | 	add	objptr, ##44008
15844     F2 18 02 FB | 	rdlong	arg04, objptr
15848     55 00 00 FF 
1584c     E8 E5 85 F1 | 	sub	objptr, ##44008
15850     0A 13 02 F6 | 	mov	arg01, arg02
15854     0C 15 02 F6 | 	mov	arg02, arg04
15858     50 0F B0 FD | 	call	#_hg010b_spin2_start
1585c     55 00 00 FF 
15860     D4 E5 05 F1 | 	add	objptr, ##43988
15864     F2 FA 61 FC | 	wrlong	result1, objptr
15868                 | ' 
15868                 | ' videocog=v.start(pin,mbox)
15868                 | ' 
15868                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
15868     00 1E 06 F6 | 	mov	local01, #0
1586c     4A 00 00 FF 
15870     14 E5 85 F1 | 	sub	objptr, ##38164
15874                 | LR__1670
15874     0F 13 02 F6 | 	mov	arg01, local01
15878     00 28 00 FF 
1587c     00 14 06 F6 | 	mov	arg02, ##5242880
15880     6C 2B B0 FD | 	call	#_psram_spin2_setQos
15884     01 1E 06 F1 | 	add	local01, #1
15888     08 1E 56 F2 | 	cmps	local01, #8 wc
1588c     E4 FF 9F CD |  if_b	jmp	#LR__1670
15890     4A 00 00 FF 
15894     14 E5 05 F1 | 	add	objptr, ##38164
15898     F2 12 02 FB | 	rdlong	arg01, objptr
1589c     7A 00 02 FF 
158a0     00 14 06 F6 | 	mov	arg02, ##67171328
158a4     4A 00 00 FF 
158a8     14 E5 85 F1 | 	sub	objptr, ##38164
158ac     40 2B B0 FD | 	call	#_psram_spin2_setQos
158b0     0B 00 00 FF 
158b4     C0 E4 85 F1 | 	sub	objptr, ##5824
158b8                 | ' psram.setQoS(videocog, $0400f400) 
158b8                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
158b8     F2 14 02 F6 | 	mov	arg02, objptr
158bc     00 08 03 FF 
158c0     00 14 46 F5 | 	or	arg02, ##101711872
158c4     00 16 06 F6 | 	mov	arg03, #0
158c8     00 18 06 F6 | 	mov	arg04, #0
158cc     00 12 06 F6 | 	mov	arg01, #0
158d0     88 3E B0 FD | 	call	#__system___basic_open
158d4                 | ' return videocog
158d4     55 00 00 FF 
158d8     D4 E5 05 F1 | 	add	objptr, ##43988
158dc     F2 FA 01 FB | 	rdlong	result1, objptr
158e0     55 00 00 FF 
158e4     D4 E5 85 F1 | 	sub	objptr, ##43988
158e8     A7 F0 03 F6 | 	mov	ptra, fp
158ec     B2 00 A0 FD | 	call	#popregs_
158f0                 | _startvideo_ret
158f0     2D 00 64 FD | 	ret
158f4                 | 
158f4                 | ' 
158f4                 | ' function pspeek(adr as ulong) as ubyte
158f4                 | _pspeek
158f4     00 4A 05 F6 | 	mov	COUNT_, #0
158f8     A8 00 A0 FD | 	call	#pushregs_
158fc     0C F0 07 F1 | 	add	ptra, #12
15900     04 4E 05 F1 | 	add	fp, #4
15904     A7 12 62 FC | 	wrlong	arg01, fp
15908     04 4E 05 F1 | 	add	fp, #4
1590c     A7 12 02 F6 | 	mov	arg01, fp
15910     04 4E 85 F1 | 	sub	fp, #4
15914     A7 14 02 FB | 	rdlong	arg02, fp
15918     04 4E 85 F1 | 	sub	fp, #4
1591c     01 16 06 F6 | 	mov	arg03, #1
15920     0B 00 00 FF 
15924     C0 E4 05 F1 | 	add	objptr, ##5824
15928     98 28 B0 FD | 	call	#_psram_spin2_read1
1592c     0B 00 00 FF 
15930     C0 E4 85 F1 | 	sub	objptr, ##5824
15934                 | ' psram.read1(varptr(res),adr,1)
15934                 | ' return res
15934     08 4E 05 F1 | 	add	fp, #8
15938     A7 FA C1 FA | 	rdbyte	result1, fp
1593c     08 4E 85 F1 | 	sub	fp, #8
15940     A7 F0 03 F6 | 	mov	ptra, fp
15944     B2 00 A0 FD | 	call	#popregs_
15948                 | _pspeek_ret
15948     2D 00 64 FD | 	ret
1594c                 | 
1594c                 | ' 
1594c                 | ' function pslpeek(adr as ulong) as ulong
1594c                 | _pslpeek
1594c     00 4A 05 F6 | 	mov	COUNT_, #0
15950     A8 00 A0 FD | 	call	#pushregs_
15954     0C F0 07 F1 | 	add	ptra, #12
15958     04 4E 05 F1 | 	add	fp, #4
1595c     A7 12 62 FC | 	wrlong	arg01, fp
15960     04 4E 05 F1 | 	add	fp, #4
15964     A7 12 02 F6 | 	mov	arg01, fp
15968     04 4E 85 F1 | 	sub	fp, #4
1596c     A7 14 02 FB | 	rdlong	arg02, fp
15970     04 4E 85 F1 | 	sub	fp, #4
15974     04 16 06 F6 | 	mov	arg03, #4
15978     0B 00 00 FF 
1597c     C0 E4 05 F1 | 	add	objptr, ##5824
15980     40 28 B0 FD | 	call	#_psram_spin2_read1
15984     0B 00 00 FF 
15988     C0 E4 85 F1 | 	sub	objptr, ##5824
1598c                 | ' psram.read1(varptr(res),adr,4)
1598c                 | ' return res
1598c     08 4E 05 F1 | 	add	fp, #8
15990     A7 FA 01 FB | 	rdlong	result1, fp
15994     08 4E 85 F1 | 	sub	fp, #8
15998     A7 F0 03 F6 | 	mov	ptra, fp
1599c     B2 00 A0 FD | 	call	#popregs_
159a0                 | _pslpeek_ret
159a0     2D 00 64 FD | 	ret
159a4                 | 
159a4                 | ' 
159a4                 | ' '' ------------------------------- USB keyboard scan to char translator
159a4                 | ' 
159a4                 | ' function scantochar(key)
159a4                 | _scantochar
159a4                 | ' 
159a4                 | ' select case (key shr 8) and 255
159a4     09 01 02 F6 | 	mov	_var01, arg01
159a8     08 00 C6 F0 | 	sar	_var01, #8
159ac     FF 00 0E F5 | 	and	_var01, #255 wz
159b0     24 00 90 AD |  if_e	jmp	#LR__1680
159b4     02 00 0E F2 | 	cmp	_var01, #2 wz
159b8     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
159bc     30 00 90 AD |  if_e	jmp	#LR__1681
159c0     40 00 0E F2 | 	cmp	_var01, #64 wz
159c4     44 00 90 AD |  if_e	jmp	#LR__1682
159c8     42 00 0E F2 | 	cmp	_var01, #66 wz
159cc     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
159d0     70 00 90 5D |  if_ne	jmp	#LR__1684
159d4     50 00 90 FD | 	jmp	#LR__1683
159d8                 | LR__1680
159d8     09 FB 01 F6 | 	mov	result1, arg01
159dc     7F FA 05 F5 | 	and	result1, #127
159e0     02 FA 65 F0 | 	shl	result1, #2
159e4     F5 FA 01 F1 | 	add	result1, ptr__dat__
159e8     FD FA C1 FA | 	rdbyte	result1, result1
159ec     54 00 90 FD | 	jmp	#_scantochar_ret
159f0                 | LR__1681
159f0     09 FB 01 F6 | 	mov	result1, arg01
159f4     7F FA 05 F5 | 	and	result1, #127
159f8     02 FA 65 F0 | 	shl	result1, #2
159fc     01 FA 05 F1 | 	add	result1, #1
15a00     F5 FA 01 F1 | 	add	result1, ptr__dat__
15a04     FD FA C1 FA | 	rdbyte	result1, result1
15a08     38 00 90 FD | 	jmp	#_scantochar_ret
15a0c                 | LR__1682
15a0c     09 FB 01 F6 | 	mov	result1, arg01
15a10     7F FA 05 F5 | 	and	result1, #127
15a14     02 FA 65 F0 | 	shl	result1, #2
15a18     02 FA 05 F1 | 	add	result1, #2
15a1c     F5 FA 01 F1 | 	add	result1, ptr__dat__
15a20     FD FA C1 FA | 	rdbyte	result1, result1
15a24     1C 00 90 FD | 	jmp	#_scantochar_ret
15a28                 | LR__1683
15a28     09 FB 01 F6 | 	mov	result1, arg01
15a2c     7F FA 05 F5 | 	and	result1, #127
15a30     02 FA 65 F0 | 	shl	result1, #2
15a34     03 FA 05 F1 | 	add	result1, #3
15a38     F5 FA 01 F1 | 	add	result1, ptr__dat__
15a3c     FD FA C1 FA | 	rdbyte	result1, result1
15a40     00 00 90 FD | 	jmp	#_scantochar_ret
15a44                 | LR__1684
15a44                 | _scantochar_ret
15a44     2D 00 64 FD | 	ret
15a48                 | 
15a48                 | _program
15a48     0B 4A 05 F6 | 	mov	COUNT_, #11
15a4c     A8 00 A0 FD | 	call	#pushregs_
15a50     A0 FD BF FD | 	call	#_startpsram
15a54     40 12 06 F6 | 	mov	arg01, #64
15a58     00 14 06 F6 | 	mov	arg02, #0
15a5c     00 16 06 F6 | 	mov	arg03, #0
15a60     D0 FD BF FD | 	call	#_startvideo
15a64     00 12 06 F6 | 	mov	arg01, #0
15a68     00 14 06 F6 | 	mov	arg02, #0
15a6c     00 16 06 F6 | 	mov	arg03, #0
15a70     0B 00 00 FF 
15a74     C0 E4 05 F1 | 	add	objptr, ##5824
15a78     88 2C B0 FD | 	call	#_Audio093b_8_sc_spin2_start
15a7c     FE 1C 02 F6 | 	mov	arg06, result2
15a80     4A 00 00 FF 
15a84     10 E5 05 F1 | 	add	objptr, ##38160
15a88     F2 FA 61 FC | 	wrlong	result1, objptr
15a8c     14 E4 05 F1 | 	add	objptr, #20
15a90     F2 1C 62 FC | 	wrlong	arg06, objptr
15a94     55 00 00 FF 
15a98     E4 E5 85 F1 | 	sub	objptr, ##44004
15a9c     32 12 06 F6 | 	mov	arg01, #50
15aa0     04 35 B0 FD | 	call	#__system___waitms
15aa4     55 00 00 FF 
15aa8     E4 E5 05 F1 | 	add	objptr, ##44004
15aac     F2 12 02 FB | 	rdlong	arg01, objptr
15ab0     55 00 00 FF 
15ab4     E4 E5 85 F1 | 	sub	objptr, ##44004
15ab8     14 12 06 F1 | 	add	arg01, #20
15abc     20 00 80 FF 
15ac0     09 01 58 FC | 	wrword	##16384, arg01
15ac4     30 2A B0 FD | 	call	#_usbnew_spin2_start
15ac8     55 00 00 FF 
15acc     D8 E5 05 F1 | 	add	objptr, ##43992
15ad0     F2 FA 61 FC | 	wrlong	result1, objptr
15ad4                 | '   mouse_limits[0] := xlim
15ad4     0F 00 00 FF 
15ad8     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
15adc     01 00 80 FF 
15ae0     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
15ae4                 | '   mouse_limits[1] := ylim
15ae4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
15ae8     01 00 80 FF 
15aec     FB 7E 68 FC | 	wrlong	##575, ptr__usbnew_spin2_dat__
15af0     55 00 00 FF 
15af4     CB E4 85 F1 | 	sub	objptr, ##43723
15af8     F2 12 02 F6 | 	mov	arg01, objptr
15afc     0D E5 85 F1 | 	sub	objptr, #269
15b00     C4 12 06 F1 | 	add	arg01, #196
15b04                 | '   mouse_outptr := ptr
15b04     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
15b08     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
15b0c     0F 00 00 FF 
15b10     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
15b14     0E 00 00 FF 
15b18     9A EA 05 F1 | 	add	ptr__dat__, ##7322
15b1c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
15b20     0E 00 00 FF 
15b24     9A EA 85 F1 | 	sub	ptr__dat__, ##7322
15b28     10 12 06 F6 | 	mov	arg01, #16
15b2c     74 11 B0 FD | 	call	#_hg010b_spin2_setspriteptr
15b30     10 12 06 F6 | 	mov	arg01, #16
15b34     20 14 06 F6 | 	mov	arg02, #32
15b38     20 16 06 F6 | 	mov	arg03, #32
15b3c     D8 11 B0 FD | 	call	#_hg010b_spin2_setspritesize
15b40     09 12 C6 F9 | 	decod	arg01, #9
15b44     20 15 06 F6 | 	mov	arg02, #288
15b48     68 2A B0 FD | 	call	#_usbnew_spin2_mouse_move
15b4c     F2 1C 02 F6 | 	mov	arg06, objptr
15b50     78 00 00 FF 
15b54     BC E5 05 F1 | 	add	objptr, ##61884
15b58     F2 1A 02 F6 | 	mov	arg05, objptr
15b5c     0D 1D 62 FC | 	wrlong	arg06, arg05
15b60     04 1A 06 F1 | 	add	arg05, #4
15b64     0D F1 61 FC | 	wrlong	ptr__housekeeper_, arg05
15b68     EF 14 02 F6 | 	mov	arg02, entryptr__
15b6c     F2 1E 02 F6 | 	mov	local01, objptr
15b70     1E FA 05 F6 | 	mov	result1, #30
15b74     28 1E 62 FD | 	setq	local01
15b78     0A FB F1 FC | 	coginit	result1, arg02 wc
15b7c     01 FA 65 C6 |  if_b	neg	result1, #1
15b80     04 E4 85 F1 | 	sub	objptr, #4
15b84     F2 FA 61 FC | 	wrlong	result1, objptr
15b88     01 00 00 FF 
15b8c     90 E4 05 F1 | 	add	objptr, ##656
15b90     F2 00 68 FC | 	wrlong	#0, objptr
15b94     24 00 00 FF 
15b98     40 E4 85 F1 | 	sub	objptr, ##18496
15b9c     F2 04 68 FC | 	wrlong	#2, objptr
15ba0     04 E4 05 F1 | 	add	objptr, #4
15ba4     F2 26 69 FC | 	wrlong	#147, objptr
15ba8     04 E4 05 F1 | 	add	objptr, #4
15bac     F2 34 69 FC | 	wrlong	#154, objptr
15bb0     04 E4 05 F1 | 	add	objptr, #4
15bb4     F2 08 68 FC | 	wrlong	#4, objptr
15bb8     04 E4 85 F1 | 	sub	objptr, #4
15bbc     F2 1C 02 FB | 	rdlong	arg06, objptr
15bc0     14 E4 85 F1 | 	sub	objptr, #20
15bc4     F2 1C 62 FC | 	wrlong	arg06, objptr
15bc8     04 E4 05 F1 | 	add	objptr, #4
15bcc     F2 00 68 FC | 	wrlong	#0, objptr
15bd0     04 E4 05 F1 | 	add	objptr, #4
15bd4     F2 00 68 FC | 	wrlong	#0, objptr
15bd8     22 00 00 FF 
15bdc     B0 E5 05 F1 | 	add	objptr, ##17840
15be0     F2 02 68 FC | 	wrlong	#1, objptr
15be4     01 00 00 FF 
15be8     9C E4 05 F1 | 	add	objptr, ##668
15bec     F2 00 68 FC | 	wrlong	#0, objptr
15bf0     01 00 00 FF 
15bf4     00 EA 05 F1 | 	add	ptr__dat__, ##512
15bf8     08 E4 05 F1 | 	add	objptr, #8
15bfc     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
15c00     04 E4 85 F1 | 	sub	objptr, #4
15c04     03 00 80 FF 
15c08     F2 28 69 FC | 	wrlong	##1684, objptr
15c0c     16 00 00 FF 
15c10     1C E4 85 F1 | 	sub	objptr, ##11292
15c14     F2 18 68 FC | 	wrlong	#12, objptr
15c18     64 00 00 FF 
15c1c     38 E4 85 F1 | 	sub	objptr, ##51256
15c20     01 00 00 FF 
15c24     00 EA 85 F1 | 	sub	ptr__dat__, ##512
15c28     6C EB BF FD | 	call	#_init_commands
15c2c     40 F8 BF FD | 	call	#_init_error_strings
15c30     2C 68 BF FD | 	call	#_do_new
15c34     56 00 00 FF 
15c38     10 E4 05 F1 | 	add	objptr, ##44048
15c3c     F2 12 02 FB | 	rdlong	arg01, objptr
15c40     04 E4 85 F1 | 	sub	objptr, #4
15c44     F2 14 02 FB | 	rdlong	arg02, objptr
15c48     56 00 00 FF 
15c4c     0C E4 85 F1 | 	sub	objptr, ##44044
15c50     7C 1D B0 FD | 	call	#_hg010b_spin2_cls
15c54     56 00 00 FF 
15c58     14 E4 05 F1 | 	add	objptr, ##44052
15c5c     F2 12 02 FB | 	rdlong	arg01, objptr
15c60     56 00 00 FF 
15c64     14 E4 85 F1 | 	sub	objptr, ##44052
15c68     7C 1C B0 FD | 	call	#_hg010b_spin2_setfontfamily
15c6c                 | ' 
15c6c                 | ' leading_spaces:=amount
15c6c     01 00 00 FF 
15c70     B2 E4 05 F1 | 	add	objptr, ##690
15c74     F2 04 68 FC | 	wrlong	#2, objptr
15c78     01 00 00 FF 
15c7c     B2 E4 85 F1 | 	sub	objptr, ##690
15c80     46 01 00 FF 
15c84     FC 20 06 F6 | 	mov	local02, ##@LR__4680
15c88     3D 12 06 F6 | 	mov	arg01, #61
15c8c     3C 14 06 F6 | 	mov	arg02, #60
15c90     3B 16 06 F6 | 	mov	arg03, #59
15c94     3A 18 06 F6 | 	mov	arg04, #58
15c98     B4 79 B0 FD | 	call	#__system___vfs_open_sdcardx
15c9c     FD 14 02 F6 | 	mov	arg02, result1
15ca0     10 13 02 F6 | 	mov	arg01, local02
15ca4     D8 33 B0 FD | 	call	#__system___mount
15ca8     46 01 00 FF 
15cac     00 13 06 F6 | 	mov	arg01, ##@LR__4681
15cb0     8C 36 B0 FD | 	call	#__system___chdir
15cb4     46 01 00 FF 
15cb8     08 21 06 F6 | 	mov	local02, ##@LR__4682
15cbc     71 00 00 FF 
15cc0     68 E4 05 F1 | 	add	objptr, ##57960
15cc4     F2 20 62 FC | 	wrlong	local02, objptr
15cc8     1B 00 00 FF 
15ccc     60 E4 85 F1 | 	sub	objptr, ##13920
15cd0     F2 12 02 FB | 	rdlong	arg01, objptr
15cd4     56 00 00 FF 
15cd8     08 E4 85 F1 | 	sub	objptr, ##44040
15cdc     01 12 66 F0 | 	shl	arg01, #1
15ce0     01 14 06 F6 | 	mov	arg02, #1
15ce4     40 1C B0 FD | 	call	#_hg010b_spin2_setcursorpos
15ce8                 | ' 
15ce8                 | ' init_commands
15ce8                 | ' init_error_strings
15ce8                 | ' do_new
15ce8                 | ' 
15ce8                 | ' 
15ce8                 | ' cls(ink, paper)
15ce8                 | ' 'v.setfontfamily(4) 				' use ST Mono font
15ce8                 | ' v.setfontfamily(font) 				' use ST Mono font
15ce8                 | ' v.setleadingspaces(2)
15ce8                 | ' mount "/sd", _vfs_open_sdcard()
15ce8                 | ' chdir "/sd/bas"
15ce8                 | ' 
15ce8                 | ' currentdir$="/sd/bas"
15ce8                 | ' 
15ce8                 | ' position 2*editor_spaces,1 : print ver$
15ce8     00 12 06 F6 | 	mov	arg01, #0
15cec     C8 88 B0 FD | 	call	#__system___getiolock_0423
15cf0     FD 12 02 F6 | 	mov	arg01, result1
15cf4     BC 2F B0 FD | 	call	#__system___lockmem
15cf8     10 00 00 FF 
15cfc     10 EB 05 F1 | 	add	ptr__dat__, ##8464
15d00     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
15d04     10 00 00 FF 
15d08     10 EB 85 F1 | 	sub	ptr__dat__, ##8464
15d0c     00 12 06 F6 | 	mov	arg01, #0
15d10     00 16 06 F6 | 	mov	arg03, #0
15d14     90 3C B0 FD | 	call	#__system___basic_print_string
15d18     00 12 06 F6 | 	mov	arg01, #0
15d1c     0A 14 06 F6 | 	mov	arg02, #10
15d20     00 16 06 F6 | 	mov	arg03, #0
15d24     28 3C B0 FD | 	call	#__system___basic_print_char
15d28     00 12 06 F6 | 	mov	arg01, #0
15d2c     88 88 B0 FD | 	call	#__system___getiolock_0423
15d30     FD 00 68 FC | 	wrlong	#0, result1
15d34     F2 12 02 FB | 	rdlong	arg01, objptr
15d38     00 14 06 F6 | 	mov	arg02, #0
15d3c     0A 16 06 F6 | 	mov	arg03, #10
15d40     78 51 B0 FD | 	call	#__system__Number_S
15d44     FD 12 02 F6 | 	mov	arg01, result1
15d48     46 01 00 FF 
15d4c     10 15 06 F6 | 	mov	arg02, ##@LR__4683
15d50     BC 2F B0 FD | 	call	#__system___string_concat
15d54     FD 20 02 F6 | 	mov	local02, result1
15d58     78 00 00 FF 
15d5c     B0 E5 05 F1 | 	add	objptr, ##61872
15d60     F2 20 62 FC | 	wrlong	local02, objptr
15d64     78 00 00 FF 
15d68     B0 E5 85 F1 | 	sub	objptr, ##61872
15d6c                 | ' free$=decuns$(v.buf_ptr)+" BASIC bytes free" : print free$
15d6c     00 12 06 F6 | 	mov	arg01, #0
15d70     44 88 B0 FD | 	call	#__system___getiolock_0423
15d74     FD 12 02 F6 | 	mov	arg01, result1
15d78     38 2F B0 FD | 	call	#__system___lockmem
15d7c     78 00 00 FF 
15d80     B0 E5 05 F1 | 	add	objptr, ##61872
15d84     F2 14 02 FB | 	rdlong	arg02, objptr
15d88     78 00 00 FF 
15d8c     B0 E5 85 F1 | 	sub	objptr, ##61872
15d90     00 12 06 F6 | 	mov	arg01, #0
15d94     00 16 06 F6 | 	mov	arg03, #0
15d98     0C 3C B0 FD | 	call	#__system___basic_print_string
15d9c     00 12 06 F6 | 	mov	arg01, #0
15da0     0A 14 06 F6 | 	mov	arg02, #10
15da4     00 16 06 F6 | 	mov	arg03, #0
15da8     A4 3B B0 FD | 	call	#__system___basic_print_char
15dac     00 12 06 F6 | 	mov	arg01, #0
15db0     04 88 B0 FD | 	call	#__system___getiolock_0423
15db4     FD 00 68 FC | 	wrlong	#0, result1
15db8     56 00 00 FF 
15dbc     08 E4 05 F1 | 	add	objptr, ##44040
15dc0     F2 12 02 FB | 	rdlong	arg01, objptr
15dc4     56 00 00 FF 
15dc8     08 E4 85 F1 | 	sub	objptr, ##44040
15dcc     01 12 66 F0 | 	shl	arg01, #1
15dd0     04 14 06 F6 | 	mov	arg02, #4
15dd4     50 1B B0 FD | 	call	#_hg010b_spin2_setcursorpos
15dd8                 | ' position 2*editor_spaces,4 : print "Ready"
15dd8     00 12 06 F6 | 	mov	arg01, #0
15ddc     D8 87 B0 FD | 	call	#__system___getiolock_0423
15de0     FD 12 02 F6 | 	mov	arg01, result1
15de4     CC 2E B0 FD | 	call	#__system___lockmem
15de8     46 01 00 FF 
15dec     22 15 06 F6 | 	mov	arg02, ##@LR__4684
15df0     00 12 06 F6 | 	mov	arg01, #0
15df4     00 16 06 F6 | 	mov	arg03, #0
15df8     AC 3B B0 FD | 	call	#__system___basic_print_string
15dfc     FD 22 02 F6 | 	mov	local03, result1
15e00     00 12 06 F6 | 	mov	arg01, #0
15e04     0A 14 06 F6 | 	mov	arg02, #10
15e08     00 16 06 F6 | 	mov	arg03, #0
15e0c     40 3B B0 FD | 	call	#__system___basic_print_char
15e10     01 24 06 F6 | 	mov	local04, #1
15e14     00 12 06 F6 | 	mov	arg01, #0
15e18     9C 87 B0 FD | 	call	#__system___getiolock_0423
15e1c     FD 00 68 FC | 	wrlong	#0, result1
15e20     00 26 06 F6 | 	mov	local05, #0
15e24     00 14 06 F6 | 	mov	arg02, #0
15e28     01 14 D6 F7 | 	test	arg02, #1 wc
15e2c     5A 4C 64 FD | 	drvc	#38
15e30     01 14 D6 F7 | 	test	arg02, #1 wc
15e34     5A 4E 64 FD | 	drvc	#39
15e38                 | ' 'hubset( %1_000001__00_0001_1010__1111_1011)
15e38                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
15e38                 | ' 
15e38                 | ' '-------------------------------------------------------------------------------------------------------- 
15e38                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
15e38                 | ' '--------------------------------------------------------------------------------------------------------
15e38                 | ' 
15e38                 | ' do
15e38                 | LR__1690
15e38     01 12 06 F6 | 	mov	arg01, #1
15e3c     20 1B B0 FD | 	call	#_hg010b_spin2_waitvbl
15e40     10 27 B0 FD | 	call	#_usbnew_spin2_get_key
15e44     64 00 00 FF 
15e48     48 E4 05 F1 | 	add	objptr, ##51272
15e4c     F2 FA 61 FC | 	wrlong	result1, objptr
15e50                 | '   return hkbd_led_rep
15e50     13 00 00 FF 
15e54     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
15e58     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
15e5c     13 00 00 FF 
15e60     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
15e64     16 00 00 FF 
15e68     1C E4 05 F1 | 	add	objptr, ##11292
15e6c     F2 FA 61 FC | 	wrlong	result1, objptr
15e70                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,16384,0,1758): waitms(10): paula.stop(7)
15e70     16 00 00 FF 
15e74     1C E4 85 F1 | 	sub	objptr, ##11292
15e78     F2 20 02 FB | 	rdlong	local02, objptr
15e7c     64 00 00 FF 
15e80     48 E4 85 F1 | 	sub	objptr, ##51272
15e84     01 20 16 F2 | 	cmp	local02, #1 wc
15e88     BC 00 90 CD |  if_b	jmp	#LR__1691
15e8c     64 00 00 FF 
15e90     48 E4 05 F1 | 	add	objptr, ##51272
15e94     F2 24 02 FB | 	rdlong	local04, objptr
15e98     64 00 00 FF 
15e9c     48 E4 85 F1 | 	sub	objptr, ##51272
15ea0     12 23 02 F6 | 	mov	local03, local04
15ea4     04 22 16 F2 | 	cmp	local03, #4 wc
15ea8     9C 00 90 3D |  if_ae	jmp	#LR__1691
15eac     78 00 00 FF 
15eb0     B4 E5 05 F1 | 	add	objptr, ##61876
15eb4     F2 1E 02 FB | 	rdlong	local01, objptr
15eb8     78 00 00 FF 
15ebc     B4 E5 85 F1 | 	sub	objptr, ##61876
15ec0     0F 27 02 F6 | 	mov	local05, local01
15ec4     01 26 0E F2 | 	cmp	local05, #1 wz
15ec8     7C 00 90 5D |  if_ne	jmp	#LR__1691
15ecc     04 00 00 FF 
15ed0     94 EA 05 F1 | 	add	ptr__dat__, ##2196
15ed4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
15ed8     04 00 00 FF 
15edc     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
15ee0     56 00 00 FF 
15ee4     44 22 06 F6 | 	mov	local03, ##44100
15ee8     0E 24 C6 F9 | 	decod	local04, #14
15eec     00 26 06 F6 | 	mov	local05, #0
15ef0     03 00 00 FF 
15ef4     DE 1E 06 F6 | 	mov	local01, ##1758
15ef8     07 12 06 F6 | 	mov	arg01, #7
15efc     56 00 00 FF 
15f00     44 16 06 F6 | 	mov	arg03, ##44100
15f04     0E 18 C6 F9 | 	decod	arg04, #14
15f08     00 1A 06 F6 | 	mov	arg05, #0
15f0c     03 00 00 FF 
15f10     DE 1C 06 F6 | 	mov	arg06, ##1758
15f14     0B 00 00 FF 
15f18     C0 E4 05 F1 | 	add	objptr, ##5824
15f1c     5C 29 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
15f20     0B 00 00 FF 
15f24     C0 E4 85 F1 | 	sub	objptr, ##5824
15f28     0A 12 06 F6 | 	mov	arg01, #10
15f2c     78 30 B0 FD | 	call	#__system___waitms
15f30     07 12 06 F6 | 	mov	arg01, #7
15f34     0B 00 00 FF 
15f38     C0 E4 05 F1 | 	add	objptr, ##5824
15f3c     8C 2A B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
15f40     0B 00 00 FF 
15f44     C0 E4 85 F1 | 	sub	objptr, ##5824
15f48                 | LR__1691
15f48                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then let key2=key : let rpt=1 : let key3=key2
15f48     64 00 00 FF 
15f4c     48 E4 05 F1 | 	add	objptr, ##51272
15f50     F2 20 02 FB | 	rdlong	local02, objptr
15f54     64 00 00 FF 
15f58     48 E4 85 F1 | 	sub	objptr, ##51272
15f5c     04 20 16 F2 | 	cmp	local02, #4 wc
15f60     80 00 90 CD |  if_b	jmp	#LR__1692
15f64     64 00 00 FF 
15f68     48 E4 05 F1 | 	add	objptr, ##51272
15f6c     F2 24 02 FB | 	rdlong	local04, objptr
15f70     64 00 00 FF 
15f74     48 E4 85 F1 | 	sub	objptr, ##51272
15f78     12 23 02 F6 | 	mov	local03, local04
15f7c     00 00 40 FF 
15f80     00 22 16 F2 | 	cmp	local03, ##-2147483648 wc
15f84     64 00 00 CF 
15f88     48 E4 05 C1 |  if_b	add	objptr, ##51272
15f8c     F2 1E 02 CB |  if_b	rdlong	local01, objptr
15f90     64 00 00 CF 
15f94     48 E4 85 C1 |  if_b	sub	objptr, ##51272
15f98     0F 27 E2 C8 |  if_b	getbyte	local05, local01, #0
15f9c     E0 26 16 C2 |  if_b	cmp	local05, #224 wc
15fa0     40 00 90 3D |  if_ae	jmp	#LR__1692
15fa4     64 00 00 FF 
15fa8     48 E4 05 F1 | 	add	objptr, ##51272
15fac     F2 20 02 FB | 	rdlong	local02, objptr
15fb0     04 E4 05 F1 | 	add	objptr, #4
15fb4     F2 20 62 FC | 	wrlong	local02, objptr
15fb8     16 00 00 FF 
15fbc     1C E4 05 F1 | 	add	objptr, ##11292
15fc0     F2 02 68 FC | 	wrlong	#1, objptr
15fc4     16 00 00 FF 
15fc8     1C E4 85 F1 | 	sub	objptr, ##11292
15fcc     F2 20 02 FB | 	rdlong	local02, objptr
15fd0     16 00 00 FF 
15fd4     20 E4 05 F1 | 	add	objptr, ##11296
15fd8     F2 20 62 FC | 	wrlong	local02, objptr
15fdc     7A 00 00 FF 
15fe0     6C E4 85 F1 | 	sub	objptr, ##62572
15fe4                 | LR__1692
15fe4                 | ' if key>$80000000 then let rptcnt=0 : let rpt=0
15fe4     64 00 00 FF 
15fe8     48 E4 05 F1 | 	add	objptr, ##51272
15fec     F2 20 02 FB | 	rdlong	local02, objptr
15ff0     64 00 00 FF 
15ff4     48 E4 85 F1 | 	sub	objptr, ##51272
15ff8     00 00 40 FF 
15ffc     01 20 16 F2 | 	cmp	local02, ##-2147483647 wc
16000     7A 00 00 3F 
16004     70 E4 05 31 |  if_ae	add	objptr, ##62576
16008     F2 00 68 3C |  if_ae	wrlong	#0, objptr
1600c     08 E4 85 31 |  if_ae	sub	objptr, #8
16010     F2 00 68 3C |  if_ae	wrlong	#0, objptr
16014     7A 00 00 3F 
16018     68 E4 85 31 |  if_ae	sub	objptr, ##62568
1601c                 | ' if key=0 andalso rpt=1 then rptcnt+=1
1601c     64 00 00 FF 
16020     48 E4 05 F1 | 	add	objptr, ##51272
16024     F2 20 0A FB | 	rdlong	local02, objptr wz
16028     64 00 00 FF 
1602c     48 E4 85 F1 | 	sub	objptr, ##51272
16030     7A 00 00 AF 
16034     68 E4 05 A1 |  if_e	add	objptr, ##62568
16038     F2 24 02 AB |  if_e	rdlong	local04, objptr
1603c     7A 00 00 AF 
16040     68 E4 85 A1 |  if_e	sub	objptr, ##62568
16044     12 23 02 A6 |  if_e	mov	local03, local04
16048     01 22 0E A2 |  if_e	cmp	local03, #1 wz
1604c     7A 00 00 AF 
16050     70 E4 05 A1 |  if_e	add	objptr, ##62576
16054     F2 20 02 AB |  if_e	rdlong	local02, objptr
16058     01 20 06 A1 |  if_e	add	local02, #1
1605c     F2 20 62 AC |  if_e	wrlong	local02, objptr
16060     7A 00 00 AF 
16064     70 E4 85 A1 |  if_e	sub	objptr, ##62576
16068                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
16068     64 00 00 FF 
1606c     48 E4 05 F1 | 	add	objptr, ##51272
16070     F2 20 02 FB | 	rdlong	local02, objptr
16074     64 00 00 FF 
16078     48 E4 85 F1 | 	sub	objptr, ##51272
1607c     00 00 40 FF 
16080     00 20 16 F2 | 	cmp	local02, ##-2147483648 wc
16084     44 00 90 3D |  if_ae	jmp	#LR__1694
16088     7A 00 00 FF 
1608c     70 E4 05 F1 | 	add	objptr, ##62576
16090     F2 20 02 FB | 	rdlong	local02, objptr
16094     7A 00 00 FF 
16098     70 E4 85 F1 | 	sub	objptr, ##62576
1609c     19 20 0E F2 | 	cmp	local02, #25 wz
160a0     28 00 90 5D |  if_ne	jmp	#LR__1693
160a4     64 00 00 FF 
160a8     4C E4 05 F1 | 	add	objptr, ##51276
160ac     F2 20 02 FB | 	rdlong	local02, objptr
160b0     16 00 00 FF 
160b4     20 E4 05 F1 | 	add	objptr, ##11296
160b8     F2 20 62 FC | 	wrlong	local02, objptr
160bc     04 E4 05 F1 | 	add	objptr, #4
160c0     F2 2A 68 FC | 	wrlong	#21, objptr
160c4     7A 00 00 FF 
160c8     70 E4 85 F1 | 	sub	objptr, ##62576
160cc                 | LR__1693
160cc                 | LR__1694
160cc                 | ' 
160cc                 | ' 
160cc                 | ' if key3<>0 then
160cc     7A 00 00 FF 
160d0     6C E4 05 F1 | 	add	objptr, ##62572
160d4     F2 28 0A FB | 	rdlong	local06, objptr wz
160d8     7A 00 00 FF 
160dc     6C E4 85 F1 | 	sub	objptr, ##62572
160e0     54 FD 9F AD |  if_e	jmp	#LR__1690
160e4                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,16384,spl_len) 
160e4     78 00 00 FF 
160e8     B4 E5 05 F1 | 	add	objptr, ##61876
160ec     F2 20 02 FB | 	rdlong	local02, objptr
160f0     78 00 00 FF 
160f4     B4 E5 85 F1 | 	sub	objptr, ##61876
160f8     01 20 0E F2 | 	cmp	local02, #1 wz
160fc     50 00 90 5D |  if_ne	jmp	#LR__1695
16100     7A 00 00 FF 
16104     58 E4 05 F1 | 	add	objptr, ##62552
16108     F2 14 02 FB | 	rdlong	arg02, objptr
1610c     56 00 00 FF 
16110     44 22 06 F6 | 	mov	local03, ##44100
16114     0E 24 C6 F9 | 	decod	local04, #14
16118     04 E4 85 F1 | 	sub	objptr, #4
1611c     F2 26 02 FB | 	rdlong	local05, objptr
16120     01 1E 66 F6 | 	neg	local01, #1
16124     07 12 06 F6 | 	mov	arg01, #7
16128     56 00 00 FF 
1612c     44 16 06 F6 | 	mov	arg03, ##44100
16130     0E 18 C6 F9 | 	decod	arg04, #14
16134     13 1B 02 F6 | 	mov	arg05, local05
16138     01 1C 66 F6 | 	neg	arg06, #1
1613c     6E 00 00 FF 
16140     94 E5 85 F1 | 	sub	objptr, ##56724
16144     34 27 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
16148     0B 00 00 FF 
1614c     C0 E4 85 F1 | 	sub	objptr, ##5824
16150                 | LR__1695
16150     7A 00 00 FF 
16154     6C E4 05 F1 | 	add	objptr, ##62572
16158     F2 12 02 FB | 	rdlong	arg01, objptr
1615c     7A 00 00 FF 
16160     6C E4 85 F1 | 	sub	objptr, ##62572
16164     3C F8 BF FD | 	call	#_scantochar
16168     7A 00 00 FF 
1616c     74 E4 05 F1 | 	add	objptr, ##62580
16170     F2 FA 61 FC | 	wrlong	result1, objptr
16174                 | '   if leds and 2 = 2 then 
16174     10 E4 85 F1 | 	sub	objptr, #16
16178     F2 20 0A FB | 	rdlong	local02, objptr wz
1617c     7A 00 00 FF 
16180     64 E4 85 F1 | 	sub	objptr, ##62564
16184     68 01 90 AD |  if_e	jmp	#LR__1703
16188                 | '     if key4>96 andalso key4<123 then
16188     7A 00 00 FF 
1618c     74 E4 05 F1 | 	add	objptr, ##62580
16190     F2 20 02 FB | 	rdlong	local02, objptr
16194     7A 00 00 FF 
16198     74 E4 85 F1 | 	sub	objptr, ##62580
1619c     61 20 56 F2 | 	cmps	local02, #97 wc
161a0     40 00 90 CD |  if_b	jmp	#LR__1696
161a4     7A 00 00 FF 
161a8     74 E4 05 F1 | 	add	objptr, ##62580
161ac     F2 24 02 FB | 	rdlong	local04, objptr
161b0     7A 00 00 FF 
161b4     74 E4 85 F1 | 	sub	objptr, ##62580
161b8     12 23 02 F6 | 	mov	local03, local04
161bc     7B 22 56 F2 | 	cmps	local03, #123 wc
161c0     20 00 90 3D |  if_ae	jmp	#LR__1696
161c4     7A 00 00 FF 
161c8     74 E4 05 F1 | 	add	objptr, ##62580
161cc     F2 20 02 FB | 	rdlong	local02, objptr
161d0     20 20 86 F1 | 	sub	local02, #32
161d4     F2 20 62 FC | 	wrlong	local02, objptr
161d8     7A 00 00 FF 
161dc     74 E4 85 F1 | 	sub	objptr, ##62580
161e0     0C 01 90 FD | 	jmp	#LR__1702
161e4                 | LR__1696
161e4     7A 00 00 FF 
161e8     74 E4 05 F1 | 	add	objptr, ##62580
161ec     F2 20 02 FB | 	rdlong	local02, objptr
161f0     7A 00 00 FF 
161f4     74 E4 85 F1 | 	sub	objptr, ##62580
161f8     41 20 56 F2 | 	cmps	local02, #65 wc
161fc     40 00 90 CD |  if_b	jmp	#LR__1697
16200     7A 00 00 FF 
16204     74 E4 05 F1 | 	add	objptr, ##62580
16208     F2 24 02 FB | 	rdlong	local04, objptr
1620c     7A 00 00 FF 
16210     74 E4 85 F1 | 	sub	objptr, ##62580
16214     12 23 02 F6 | 	mov	local03, local04
16218     5B 22 56 F2 | 	cmps	local03, #91 wc
1621c     20 00 90 3D |  if_ae	jmp	#LR__1697
16220     7A 00 00 FF 
16224     74 E4 05 F1 | 	add	objptr, ##62580
16228     F2 20 02 FB | 	rdlong	local02, objptr
1622c     20 20 06 F1 | 	add	local02, #32
16230     F2 20 62 FC | 	wrlong	local02, objptr
16234     7A 00 00 FF 
16238     74 E4 85 F1 | 	sub	objptr, ##62580
1623c     B0 00 90 FD | 	jmp	#LR__1701
16240                 | LR__1697
16240     7A 00 00 FF 
16244     74 E4 05 F1 | 	add	objptr, ##62580
16248     F2 20 02 FB | 	rdlong	local02, objptr
1624c     7A 00 00 FF 
16250     74 E4 85 F1 | 	sub	objptr, ##62580
16254     17 20 56 F2 | 	cmps	local02, #23 wc
16258     40 00 90 CD |  if_b	jmp	#LR__1698
1625c     7A 00 00 FF 
16260     74 E4 05 F1 | 	add	objptr, ##62580
16264     F2 24 02 FB | 	rdlong	local04, objptr
16268     7A 00 00 FF 
1626c     74 E4 85 F1 | 	sub	objptr, ##62580
16270     12 23 02 F6 | 	mov	local03, local04
16274     20 22 56 F2 | 	cmps	local03, #32 wc
16278     20 00 90 3D |  if_ae	jmp	#LR__1698
1627c     7A 00 00 FF 
16280     74 E4 05 F1 | 	add	objptr, ##62580
16284     F2 20 02 FB | 	rdlong	local02, objptr
16288     09 20 86 F1 | 	sub	local02, #9
1628c     F2 20 62 FC | 	wrlong	local02, objptr
16290     7A 00 00 FF 
16294     74 E4 85 F1 | 	sub	objptr, ##62580
16298     54 00 90 FD | 	jmp	#LR__1700
1629c                 | LR__1698
1629c     7A 00 00 FF 
162a0     74 E4 05 F1 | 	add	objptr, ##62580
162a4     F2 20 02 FB | 	rdlong	local02, objptr
162a8     7A 00 00 FF 
162ac     74 E4 85 F1 | 	sub	objptr, ##62580
162b0     0E 20 56 F2 | 	cmps	local02, #14 wc
162b4     38 00 90 CD |  if_b	jmp	#LR__1699
162b8     7A 00 00 FF 
162bc     74 E4 05 F1 | 	add	objptr, ##62580
162c0     F2 24 02 FB | 	rdlong	local04, objptr
162c4     7A 00 00 FF 
162c8     74 E4 85 F1 | 	sub	objptr, ##62580
162cc     12 23 02 F6 | 	mov	local03, local04
162d0     17 22 56 F2 | 	cmps	local03, #23 wc
162d4     7A 00 00 CF 
162d8     74 E4 05 C1 |  if_b	add	objptr, ##62580
162dc     F2 20 02 CB |  if_b	rdlong	local02, objptr
162e0     27 20 06 C1 |  if_b	add	local02, #39
162e4     F2 20 62 CC |  if_b	wrlong	local02, objptr
162e8     7A 00 00 CF 
162ec     74 E4 85 C1 |  if_b	sub	objptr, ##62580
162f0                 | LR__1699
162f0                 | LR__1700
162f0                 | LR__1701
162f0                 | LR__1702
162f0                 | LR__1703
162f0                 | '  
162f0                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then line$+=chr$(key4): v.putchar(key4)
162f0     7A 00 00 FF 
162f4     74 E4 05 F1 | 	add	objptr, ##62580
162f8     F2 20 02 FB | 	rdlong	local02, objptr
162fc     7A 00 00 FF 
16300     74 E4 85 F1 | 	sub	objptr, ##62580
16304     01 20 56 F2 | 	cmps	local02, #1 wc
16308     90 00 90 CD |  if_b	jmp	#LR__1704
1630c     7A 00 00 FF 
16310     74 E4 05 F1 | 	add	objptr, ##62580
16314     F2 24 02 FB | 	rdlong	local04, objptr
16318     7A 00 00 FF 
1631c     74 E4 85 F1 | 	sub	objptr, ##62580
16320     12 23 02 F6 | 	mov	local03, local04
16324     7F 22 56 F2 | 	cmps	local03, #127 wc
16328     38 E4 05 C1 |  if_b	add	objptr, #56
1632c     F2 1E E2 CA |  if_b	rdword	local01, objptr
16330     38 E4 85 C1 |  if_b	sub	objptr, #56
16334     0F 27 32 C9 |  if_b	getword	local05, local01, #0
16338     FE 26 16 C2 |  if_b	cmp	local05, #254 wc
1633c     5C 00 90 3D |  if_ae	jmp	#LR__1704
16340     7A 00 00 FF 
16344     74 E4 05 F1 | 	add	objptr, ##62580
16348     F2 12 02 FB | 	rdlong	arg01, objptr
1634c     7A 00 00 FF 
16350     74 E4 85 F1 | 	sub	objptr, ##62580
16354     30 4B B0 FD | 	call	#__system__Chr_S
16358     FD 2A 02 F6 | 	mov	local07, result1
1635c     55 00 00 FF 
16360     F0 E5 05 F1 | 	add	objptr, ##44016
16364     F2 12 02 FB | 	rdlong	arg01, objptr
16368     55 00 00 FF 
1636c     F0 E5 85 F1 | 	sub	objptr, ##44016
16370     15 15 02 F6 | 	mov	arg02, local07
16374     98 29 B0 FD | 	call	#__system___string_concat
16378     55 00 00 FF 
1637c     F0 E5 05 F1 | 	add	objptr, ##44016
16380     F2 FA 61 FC | 	wrlong	result1, objptr
16384     24 00 00 FF 
16388     84 E4 05 F1 | 	add	objptr, ##18564
1638c     F2 12 02 FB | 	rdlong	arg01, objptr
16390     7A 00 00 FF 
16394     74 E4 85 F1 | 	sub	objptr, ##62580
16398     D4 16 B0 FD | 	call	#_hg010b_spin2_putchar
1639c                 | LR__1704
1639c                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(7) 'end of line reached
1639c     7A 00 00 FF 
163a0     74 E4 05 F1 | 	add	objptr, ##62580
163a4     F2 20 02 FB | 	rdlong	local02, objptr
163a8     7A 00 00 FF 
163ac     74 E4 85 F1 | 	sub	objptr, ##62580
163b0     01 20 56 F2 | 	cmps	local02, #1 wc
163b4     D0 00 90 CD |  if_b	jmp	#LR__1705
163b8     7A 00 00 FF 
163bc     74 E4 05 F1 | 	add	objptr, ##62580
163c0     F2 24 02 FB | 	rdlong	local04, objptr
163c4     7A 00 00 FF 
163c8     74 E4 85 F1 | 	sub	objptr, ##62580
163cc     12 23 02 F6 | 	mov	local03, local04
163d0     7F 22 56 F2 | 	cmps	local03, #127 wc
163d4     B0 00 90 3D |  if_ae	jmp	#LR__1705
163d8     38 E4 05 F1 | 	add	objptr, #56
163dc     F2 1E E2 FA | 	rdword	local01, objptr
163e0     38 E4 85 F1 | 	sub	objptr, #56
163e4     0F 27 32 F9 | 	getword	local05, local01, #0
163e8     FE 26 0E F2 | 	cmp	local05, #254 wz
163ec     78 00 00 AF 
163f0     B4 E5 05 A1 |  if_e	add	objptr, ##61876
163f4     F2 2C 02 AB |  if_e	rdlong	local08, objptr
163f8     78 00 00 AF 
163fc     B4 E5 85 A1 |  if_e	sub	objptr, ##61876
16400     16 2F 02 A6 |  if_e	mov	local09, local08
16404     01 2E 0E A2 |  if_e	cmp	local09, #1 wz
16408     7C 00 90 5D |  if_ne	jmp	#LR__1705
1640c     04 00 00 FF 
16410     94 EA 05 F1 | 	add	ptr__dat__, ##2196
16414     F5 14 02 F6 | 	mov	arg02, ptr__dat__
16418     04 00 00 FF 
1641c     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
16420     56 00 00 FF 
16424     44 22 06 F6 | 	mov	local03, ##44100
16428     0E 24 C6 F9 | 	decod	local04, #14
1642c     00 26 06 F6 | 	mov	local05, #0
16430     03 00 00 FF 
16434     DE 1E 06 F6 | 	mov	local01, ##1758
16438     07 12 06 F6 | 	mov	arg01, #7
1643c     56 00 00 FF 
16440     44 16 06 F6 | 	mov	arg03, ##44100
16444     0E 18 C6 F9 | 	decod	arg04, #14
16448     00 1A 06 F6 | 	mov	arg05, #0
1644c     03 00 00 FF 
16450     DE 1C 06 F6 | 	mov	arg06, ##1758
16454     0B 00 00 FF 
16458     C0 E4 05 F1 | 	add	objptr, ##5824
1645c     1C 24 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
16460     0B 00 00 FF 
16464     C0 E4 85 F1 | 	sub	objptr, ##5824
16468     2C 13 06 F6 | 	mov	arg01, #300
1646c     38 2B B0 FD | 	call	#__system___waitms
16470     07 12 06 F6 | 	mov	arg01, #7
16474     0B 00 00 FF 
16478     C0 E4 05 F1 | 	add	objptr, ##5824
1647c     4C 25 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
16480     0B 00 00 FF 
16484     C0 E4 85 F1 | 	sub	objptr, ##5824
16488                 | LR__1705
16488                 | '  
16488                 | '   'tab
16488                 | '   if (key3 and 255) = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)
16488     7A 00 00 FF 
1648c     6C E4 05 F1 | 	add	objptr, ##62572
16490     F2 20 02 FB | 	rdlong	local02, objptr
16494     7A 00 00 FF 
16498     6C E4 85 F1 | 	sub	objptr, ##62572
1649c     10 21 E2 F8 | 	getbyte	local02, local02, #0
164a0     2B 20 0E F2 | 	cmp	local02, #43 wz
164a4     B4 00 90 5D |  if_ne	jmp	#LR__1706
164a8     38 E4 05 F1 | 	add	objptr, #56
164ac     F2 24 E2 FA | 	rdword	local04, objptr
164b0     38 E4 85 F1 | 	sub	objptr, #56
164b4     12 23 32 F9 | 	getword	local03, local04, #0
164b8     F0 22 16 F2 | 	cmp	local03, #240 wc
164bc     9C 00 90 CD |  if_b	jmp	#LR__1706
164c0     78 00 00 FF 
164c4     B4 E5 05 F1 | 	add	objptr, ##61876
164c8     F2 1E 02 FB | 	rdlong	local01, objptr
164cc     78 00 00 FF 
164d0     B4 E5 85 F1 | 	sub	objptr, ##61876
164d4     0F 27 02 F6 | 	mov	local05, local01
164d8     01 26 0E F2 | 	cmp	local05, #1 wz
164dc     7C 00 90 5D |  if_ne	jmp	#LR__1706
164e0     04 00 00 FF 
164e4     94 EA 05 F1 | 	add	ptr__dat__, ##2196
164e8     F5 14 02 F6 | 	mov	arg02, ptr__dat__
164ec     04 00 00 FF 
164f0     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
164f4     56 00 00 FF 
164f8     44 22 06 F6 | 	mov	local03, ##44100
164fc     0E 24 C6 F9 | 	decod	local04, #14
16500     00 26 06 F6 | 	mov	local05, #0
16504     03 00 00 FF 
16508     DE 1E 06 F6 | 	mov	local01, ##1758
1650c     00 12 06 F6 | 	mov	arg01, #0
16510     56 00 00 FF 
16514     44 16 06 F6 | 	mov	arg03, ##44100
16518     0E 18 C6 F9 | 	decod	arg04, #14
1651c     00 1A 06 F6 | 	mov	arg05, #0
16520     03 00 00 FF 
16524     DE 1C 06 F6 | 	mov	arg06, ##1758
16528     0B 00 00 FF 
1652c     C0 E4 05 F1 | 	add	objptr, ##5824
16530     48 23 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
16534     0B 00 00 FF 
16538     C0 E4 85 F1 | 	sub	objptr, ##5824
1653c     2C 13 06 F6 | 	mov	arg01, #300
16540     64 2A B0 FD | 	call	#__system___waitms
16544     00 12 06 F6 | 	mov	arg01, #0
16548     0B 00 00 FF 
1654c     C0 E4 05 F1 | 	add	objptr, ##5824
16550     78 24 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
16554     0B 00 00 FF 
16558     C0 E4 85 F1 | 	sub	objptr, ##5824
1655c                 | LR__1706
1655c                 | '   if (key3 and 255) = 43 andalso v.cursor_x<240 then let x=(v.cursor_x mod 16)/2: for i=x to 7: line$+=" " :  v.write (" ") : next i  
1655c     7A 00 00 FF 
16560     6C E4 05 F1 | 	add	objptr, ##62572
16564     F2 20 02 FB | 	rdlong	local02, objptr
16568     7A 00 00 FF 
1656c     6C E4 85 F1 | 	sub	objptr, ##62572
16570     10 21 E2 F8 | 	getbyte	local02, local02, #0
16574     2B 20 0E F2 | 	cmp	local02, #43 wz
16578     AC 00 90 5D |  if_ne	jmp	#LR__1709
1657c     38 E4 05 F1 | 	add	objptr, #56
16580     F2 24 E2 FA | 	rdword	local04, objptr
16584     38 E4 85 F1 | 	sub	objptr, #56
16588     12 23 32 F9 | 	getword	local03, local04, #0
1658c     F0 22 16 F2 | 	cmp	local03, #240 wc
16590     94 00 90 3D |  if_ae	jmp	#LR__1709
16594     38 E4 05 F1 | 	add	objptr, #56
16598     F2 20 E2 FA | 	rdword	local02, objptr
1659c     10 23 52 F6 | 	abs	local03, local02 wc
165a0     11 23 42 F8 | 	getnib	local03, local03, #0
165a4     11 23 82 F6 | 	negc	local03, local03
165a8     11 25 52 F6 | 	abs	local04, local03 wc
165ac     01 24 46 F0 | 	shr	local04, #1
165b0     12 25 82 F6 | 	negc	local04, local04
165b4     7A 00 00 FF 
165b8     40 E4 05 F1 | 	add	objptr, ##62528
165bc     F2 24 62 FC | 	wrlong	local04, objptr
165c0     12 31 02 F6 | 	mov	local10, local04
165c4     7A 00 00 FF 
165c8     78 E4 85 F1 | 	sub	objptr, ##62584
165cc                 | LR__1707
165cc     08 30 56 F2 | 	cmps	local10, #8 wc
165d0     54 00 90 3D |  if_ae	jmp	#LR__1708
165d4     55 00 00 FF 
165d8     F0 E5 05 F1 | 	add	objptr, ##44016
165dc     F2 12 02 FB | 	rdlong	arg01, objptr
165e0     55 00 00 FF 
165e4     F0 E5 85 F1 | 	sub	objptr, ##44016
165e8     46 01 00 FF 
165ec     28 25 06 F6 | 	mov	local04, ##@LR__4685
165f0     12 15 02 F6 | 	mov	arg02, local04
165f4     18 27 B0 FD | 	call	#__system___string_concat
165f8     55 00 00 FF 
165fc     F0 E5 05 F1 | 	add	objptr, ##44016
16600     F2 FA 61 FC | 	wrlong	result1, objptr
16604     55 00 00 FF 
16608     F0 E5 85 F1 | 	sub	objptr, ##44016
1660c     46 01 00 FF 
16610     2A 13 06 F6 | 	mov	arg01, ##@LR__4686
16614     74 16 B0 FD | 	call	#_hg010b_spin2_write
16618     18 23 02 F6 | 	mov	local03, local10
1661c     01 22 06 F1 | 	add	local03, #1
16620     11 31 02 F6 | 	mov	local10, local03
16624     A4 FF 9F FD | 	jmp	#LR__1707
16628                 | LR__1708
16628                 | LR__1709
16628                 | '  
16628                 | '   'backspace
16628                 | '   if (key3 and 255) = 42 then 
16628     7A 00 00 FF 
1662c     6C E4 05 F1 | 	add	objptr, ##62572
16630     F2 20 02 FB | 	rdlong	local02, objptr
16634     7A 00 00 FF 
16638     6C E4 85 F1 | 	sub	objptr, ##62572
1663c     10 21 E2 F8 | 	getbyte	local02, local02, #0
16640     2A 20 0E F2 | 	cmp	local02, #42 wz
16644     D4 00 90 5D |  if_ne	jmp	#LR__1714
16648                 | '       if v.cursor_x>4 then 
16648     38 E4 05 F1 | 	add	objptr, #56
1664c     F2 20 E2 FA | 	rdword	local02, objptr
16650     38 E4 85 F1 | 	sub	objptr, #56
16654     05 20 16 F2 | 	cmp	local02, #5 wc
16658     9C 00 90 CD |  if_b	jmp	#LR__1712
1665c     55 00 00 FF 
16660     F0 E5 05 F1 | 	add	objptr, ##44016
16664     F2 26 02 FB | 	rdlong	local05, objptr
16668     55 00 00 FF 
1666c     F0 E5 85 F1 | 	sub	objptr, ##44016
16670     13 13 02 F6 | 	mov	arg01, local05
16674     09 33 02 F6 | 	mov	local11, arg01
16678     97 06 48 FB | 	callpa	#(@LR__1711-@LR__1710)>>2,fcache_load_ptr_
1667c                 | LR__1710
1667c     19 FB C9 FA | 	rdbyte	result1, local11 wz
16680     01 32 06 51 |  if_ne	add	local11, #1
16684     F4 FF 9F 5D |  if_ne	jmp	#LR__1710
16688                 | LR__1711
16688     09 33 82 F1 | 	sub	local11, arg01
1668c     19 15 02 F6 | 	mov	arg02, local11
16690     01 14 86 F1 | 	sub	arg02, #1
16694     13 13 02 F6 | 	mov	arg01, local05
16698     28 46 B0 FD | 	call	#__system__Left_S
1669c     55 00 00 FF 
166a0     F0 E5 05 F1 | 	add	objptr, ##44016
166a4     F2 FA 61 FC | 	wrlong	result1, objptr
166a8     55 00 00 FF 
166ac     B8 E5 85 F1 | 	sub	objptr, ##43960
166b0     F2 12 E2 FA | 	rdword	arg01, objptr
166b4     02 12 86 F1 | 	sub	arg01, #2
166b8     02 E4 05 F1 | 	add	objptr, #2
166bc     F2 14 C2 FA | 	rdbyte	arg02, objptr
166c0     3A E4 85 F1 | 	sub	objptr, #58
166c4     60 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
166c8     20 12 06 F6 | 	mov	arg01, #32
166cc     A0 13 B0 FD | 	call	#_hg010b_spin2_putchar
166d0     38 E4 05 F1 | 	add	objptr, #56
166d4     F2 12 E2 FA | 	rdword	arg01, objptr
166d8     02 12 86 F1 | 	sub	arg01, #2
166dc     02 E4 05 F1 | 	add	objptr, #2
166e0     F2 24 C2 FA | 	rdbyte	local04, objptr
166e4     3A E4 85 F1 | 	sub	objptr, #58
166e8     12 23 E2 F8 | 	getbyte	local03, local04, #0
166ec     11 15 02 F6 | 	mov	arg02, local03
166f0     34 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
166f4     24 00 90 FD | 	jmp	#LR__1713
166f8                 | LR__1712
166f8     46 01 00 FF 
166fc     2C 21 06 F6 | 	mov	local02, ##@LR__4687
16700     55 00 00 FF 
16704     F0 E5 05 F1 | 	add	objptr, ##44016
16708     F2 20 62 FC | 	wrlong	local02, objptr
1670c     55 00 00 FF 
16710     B8 E5 85 F1 | 	sub	objptr, ##43960
16714     F2 08 58 FC | 	wrword	#4, objptr
16718     38 E4 85 F1 | 	sub	objptr, #56
1671c                 | LR__1713
1671c                 | LR__1714
1671c                 | '    
1671c                 | '  ' To do: arrows and DEL; use textscreen array to implement fullscreen editing
1671c                 | '  
1671c                 | '   if key4=key_enter then 
1671c     7A 00 00 FF 
16720     74 E4 05 F1 | 	add	objptr, ##62580
16724     F2 28 02 FB | 	rdlong	local06, objptr
16728     7A 00 00 FF 
1672c     74 E4 85 F1 | 	sub	objptr, ##62580
16730     8D 28 0E F2 | 	cmp	local06, #141 wz
16734     50 00 90 5D |  if_ne	jmp	#LR__1715
16738     B0 16 B0 FD | 	call	#_hg010b_spin2_crlf
1673c     DC A2 BE FD | 	call	#_interpret
16740     46 01 00 FF 
16744     2D 21 06 F6 | 	mov	local02, ##@LR__4688
16748     55 00 00 FF 
1674c     F0 E5 05 F1 | 	add	objptr, ##44016
16750     F2 20 62 FC | 	wrlong	local02, objptr
16754     1A FA 61 FD | 	getct	result1
16758     24 00 00 FF 
1675c     8C E4 05 F1 | 	add	objptr, ##18572
16760     F2 24 02 FB | 	rdlong	local04, objptr
16764     12 23 02 F6 | 	mov	local03, local04
16768     11 FB 81 F1 | 	sub	result1, local03
1676c     F2 FA 61 FC | 	wrlong	result1, objptr
16770     14 E4 85 F1 | 	sub	objptr, #20
16774     F2 00 68 FC | 	wrlong	#0, objptr
16778     08 E4 05 F1 | 	add	objptr, #8
1677c     F2 00 68 FC | 	wrlong	#0, objptr
16780     7A 00 00 FF 
16784     70 E4 85 F1 | 	sub	objptr, ##62576
16788                 | LR__1715
16788     7A 00 00 FF 
1678c     6C E4 05 F1 | 	add	objptr, ##62572
16790     F2 00 68 FC | 	wrlong	#0, objptr
16794     7A 00 00 FF 
16798     6C E4 85 F1 | 	sub	objptr, ##62572
1679c     98 F6 9F FD | 	jmp	#LR__1690
167a0     A7 F0 03 F6 | 	mov	ptra, fp
167a4     B2 00 A0 FD | 	call	#popregs_
167a8                 | _program_ret
167a8     2D 00 64 FD | 	ret
167ac                 | 
167ac                 | ' '' this is not a main program.
167ac                 | ' 
167ac                 | ' '****************************************************************************************************************
167ac                 | ' '                                                                                                             	*
167ac                 | ' 'Start the driver with graphics mode 'mode' at pins 'base'                            		rev 20220320 	*
167ac                 | ' '                                                                                                            	*
167ac                 | ' ' mode - mode #, see below											*
167ac                 | ' ' base - HDMI base pin												*
167ac                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
167ac                 | ' '														*
167ac                 | ' '' mode number: :  %p_tn_bb_cc_vv_hh										*
167ac                 | ' '' set bit #15 for custom timings														*
167ac                 | ' '' p - 1 - psram, 0 - hub											*
167ac                 | ' '' t - 1 - graphics, 0 - text											*
167ac                 | ' '' n - 1 - 60 Hz,  0 - 50 Hz 											*
167ac                 | ' '' hh - h.zoom, vv-v.zoom, cc-color depth if graphic, unused in text,						*
167ac                 | ' '' bb - borders, 00-wide, 01 medium, 10 no border, 11 no border, extended resolution (1024x576/896x496)		*
167ac                 | ' '														*
167ac                 | ' '****************************************************************************************************************
167ac                 | ' 
167ac                 | ' pub start(base,mb):result |i
167ac                 | _hg010b_spin2_start
167ac                 | ' 
167ac                 | ' '--------------------------- initialize pointers and variables
167ac                 | ' 
167ac                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
167ac     30 E4 05 F1 | 	add	objptr, #48
167b0     F2 FA 01 F6 | 	mov	result1, objptr
167b4     28 E4 85 F1 | 	sub	objptr, #40
167b8     F2 FA 61 FC | 	wrlong	result1, objptr
167bc                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
167bc                 | ' hdmibase:=base							' HDMI base pin, 8*n
167bc     18 E4 05 F1 | 	add	objptr, #24
167c0     F2 12 62 FC | 	wrlong	arg01, objptr
167c4                 | ' mailbox_ptr:=mb		
167c4     04 E4 05 F1 | 	add	objptr, #4
167c8     F2 14 62 FC | 	wrlong	arg02, objptr
167cc                 | ' mailbox0:=mb				' PSRAM mailbox pointer
167cc     C1 E5 05 F1 | 	add	objptr, #449
167d0     F2 14 62 FC | 	wrlong	arg02, objptr
167d4                 | ' sprite_ptr:=@spr1ptr
167d4     D8 E4 85 F1 | 	sub	objptr, #216
167d8     F2 FA 01 F6 | 	mov	result1, objptr
167dc     E5 E4 85 F1 | 	sub	objptr, #229
167e0     F2 FA 61 FC | 	wrlong	result1, objptr
167e4                 | ' 
167e4                 | ' 		'
167e4                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
167e4     E5 E4 05 F1 | 	add	objptr, #229
167e8     F2 FA 01 FB | 	rdlong	result1, objptr
167ec     D0 FA 05 F1 | 	add	result1, #208
167f0     FD 10 58 FC | 	wrword	#8, result1
167f4                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
167f4     F2 16 02 FB | 	rdlong	arg03, objptr
167f8     D2 16 06 F1 | 	add	arg03, #210
167fc     0B 21 58 FC | 	wrword	#16, arg03
16800                 | ' leading_spaces:=0				'
16800     A5 E5 05 F1 | 	add	objptr, #421
16804     F2 00 68 FC | 	wrlong	#0, objptr
16808                 | ' 
16808                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
16808     99 E4 85 F1 | 	sub	objptr, #153
1680c     00 00 A0 FF 
16810     F2 0E 68 FC | 	wrlong	##1073741831, objptr
16814                 | ' emptydl[1]:=0
16814     04 E4 05 F1 | 	add	objptr, #4
16818     F2 00 68 FC | 	wrlong	#0, objptr
1681c                 | ' 
1681c                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
1681c                 | ' 
1681c                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
1681c     28 E5 85 F1 | 	sub	objptr, #296
16820     F2 02 68 FC | 	wrlong	#1, objptr
16824                 | ' if s_debug<>0
16824                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
16824     20 00 80 FF 
16828     F2 00 68 FC | 	wrlong	##16384, objptr
1682c     F5 E4 85 F1 | 	sub	objptr, #245
16830                 | ' setmode()							' set the mode, see below
16830     A4 01 B0 FD | 	call	#_hg010b_spin2_setmode
16834                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
16834     45 E4 05 F1 | 	add	objptr, #69
16838     F2 FA 01 F6 | 	mov	result1, objptr
1683c     35 E4 85 F1 | 	sub	objptr, #53
16840     F2 FA 61 FC | 	wrlong	result1, objptr
16844                 | ' cursor_ptr:=@cursor_x						
16844     28 E4 05 F1 | 	add	objptr, #40
16848     F2 16 02 F6 | 	mov	arg03, objptr
1684c     2C E4 85 F1 | 	sub	objptr, #44
16850     F2 16 62 FC | 	wrlong	arg03, objptr
16854                 | ' fontnum:=0  							' start with a PC type font 
16854     55 E4 05 F1 | 	add	objptr, #85
16858     F2 00 68 FC | 	wrlong	#0, objptr
1685c                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
1685c     1C E4 05 F1 | 	add	objptr, #28
16860     F2 12 02 F6 | 	mov	arg01, objptr
16864     7D E4 85 F1 | 	sub	objptr, #125
16868     10 00 00 FF 
1686c     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
16870     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
16874     10 00 00 FF 
16878     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
1687c     10 16 06 F6 | 	mov	arg03, #16
16880     50 23 B0 FD | 	call	#__system____builtin_memmove
16884                 | ' leading_spaces:=0
16884     01 00 00 FF 
16888     B2 E4 05 F1 | 	add	objptr, ##690
1688c     F2 00 68 FC | 	wrlong	#0, objptr
16890     01 00 00 FF 
16894     B2 E4 85 F1 | 	sub	objptr, ##690
16898                 | ' '---------------------------- initialize a cursor (MSDOS type)
16898                 | ' 
16898                 | ' initcursor(154)
16898     9A 12 06 F6 | 	mov	arg01, #154
1689c     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
168a0                 | ' 
168a0                 | ' '---------------------------- start the cog
168a0                 | ' 
168a0                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
168a0     10 00 00 FF 
168a4     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
168a8     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
168ac     10 00 00 FF 
168b0     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
168b4     10 E4 05 F1 | 	add	objptr, #16
168b8     10 FA 05 F6 | 	mov	result1, #16
168bc     28 E4 61 FD | 	setq	objptr
168c0     0A FB F1 FC | 	coginit	result1, arg02 wc
168c4     01 FA 65 C6 |  if_b	neg	result1, #1
168c8     1C E4 05 F1 | 	add	objptr, #28
168cc     F2 FA 61 FC | 	wrlong	result1, objptr
168d0     2C E4 85 F1 | 	sub	objptr, #44
168d4                 | ' waitms(40)							' wait for stabilize
168d4     28 12 06 F6 | 	mov	arg01, #40
168d8     CC 26 B0 FD | 	call	#__system___waitms
168dc                 | ' return cog							' return the driver's cog #
168dc     2C E4 05 F1 | 	add	objptr, #44
168e0     F2 FA 01 FB | 	rdlong	result1, objptr
168e4     2C E4 85 F1 | 	sub	objptr, #44
168e8                 | _hg010b_spin2_start_ret
168e8     2D 00 64 FD | 	ret
168ec                 | 
168ec                 | ' 
168ec                 | ' 
168ec                 | ' '**************************************************************************************************************** 
168ec                 | ' '                                                                                                             	*
168ec                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
168ec                 | ' '  Mode number - see start() above or bits below								*
168ec                 | ' '                                                                                                             	*
168ec                 | ' '****************************************************************************************************************
168ec                 | ' 
168ec                 | ' '---------------------------- initialize a cursor (MSDOS type)
168ec                 | ' pub initcursor(color) |i
168ec                 | _hg010b_spin2_initcursor
168ec     03 4A 05 F6 | 	mov	COUNT_, #3
168f0     A8 00 A0 FD | 	call	#pushregs_
168f4     09 1F 02 F6 | 	mov	local01, arg01
168f8                 | ' 
168f8                 | ' cursor_x:=0							' place the cursor at 0:0
168f8     38 E4 05 F1 | 	add	objptr, #56
168fc     F2 00 58 FC | 	wrword	#0, objptr
16900                 | ' cursor_y:=0
16900     02 E4 05 F1 | 	add	objptr, #2
16904     F2 00 48 FC | 	wrbyte	#0, objptr
16908                 | ' repeat i from 0 to 111
16908     00 20 06 F6 | 	mov	local02, #0
1690c     F8 E5 05 F1 | 	add	objptr, #504
16910     97 1A 48 FB | 	callpa	#(@LR__1722-@LR__1720)>>2,fcache_load_ptr_
16914                 | LR__1720
16914                 | '   cursor[i]:=0
16914     10 23 02 F6 | 	mov	local03, local02
16918     F2 22 02 F1 | 	add	local03, objptr
1691c     11 01 48 FC | 	wrbyte	#0, local03
16920     01 20 06 F1 | 	add	local02, #1
16924     70 20 56 F2 | 	cmps	local02, #112 wc
16928     E8 FF 9F CD |  if_b	jmp	#LR__1720
1692c                 | ' repeat i from 112 to 127
1692c     70 20 06 F6 | 	mov	local02, #112
16930                 | LR__1721
16930                 | '   cursor[i]:=color  
16930     10 23 02 F6 | 	mov	local03, local02
16934     F2 22 02 F1 | 	add	local03, objptr
16938     11 1F 42 FC | 	wrbyte	local01, local03
1693c     01 20 06 F1 | 	add	local02, #1
16940     80 20 16 F2 | 	cmp	local02, #128 wc
16944     E8 FF 9F CD |  if_b	jmp	#LR__1721
16948                 | LR__1722
16948                 | ' 'repeat i from 0 to 127
16948                 | ' '  if ((i/8)//2)
16948                 | ' '    cursor[i]:=15
16948                 | ' '  else
16948                 | ' '    cursor[i]:=0
16948                 | ' '  if i>=120    
16948                 | ' '    cursor[i]:=40
16948                 | ' setspriteptr(17,@cursor)
16948     F2 14 02 F6 | 	mov	arg02, objptr
1694c     01 00 00 FF 
16950     32 E4 85 F1 | 	sub	objptr, ##562
16954     11 12 06 F6 | 	mov	arg01, #17
16958     48 03 B0 FD | 	call	#_hg010b_spin2_setspriteptr
1695c                 | ' setspritesize(17,8,16)
1695c     11 12 06 F6 | 	mov	arg01, #17
16960     08 14 06 F6 | 	mov	arg02, #8
16964     10 16 06 F6 | 	mov	arg03, #16
16968     AC 03 B0 FD | 	call	#_hg010b_spin2_setspritesize
1696c                 | ' setspritepos(17,0,0)
1696c     11 12 06 F6 | 	mov	arg01, #17
16970     00 14 06 F6 | 	mov	arg02, #0
16974     00 16 06 F6 | 	mov	arg03, #0
16978     50 03 B0 FD | 	call	#_hg010b_spin2_setspritepos
1697c     A7 F0 03 F6 | 	mov	ptra, fp
16980     B2 00 A0 FD | 	call	#popregs_
16984                 | _hg010b_spin2_initcursor_ret
16984     2D 00 64 FD | 	ret
16988                 | 
16988                 | ' 
16988                 | '  
16988                 | ' pub setcursorcolor(color) |i
16988                 | _hg010b_spin2_setcursorcolor
16988                 | ' 
16988                 | ' 
16988                 | ' repeat i from 0 to 111
16988     00 00 06 F6 | 	mov	_var01, #0
1698c     01 00 00 FF 
16990     32 E4 05 F1 | 	add	objptr, ##562
16994     97 1A 48 FB | 	callpa	#(@LR__1732-@LR__1730)>>2,fcache_load_ptr_
16998                 | LR__1730
16998                 | '   cursor[i]:=0
16998     00 03 02 F6 | 	mov	_var02, _var01
1699c     F2 02 02 F1 | 	add	_var02, objptr
169a0     01 01 48 FC | 	wrbyte	#0, _var02
169a4     01 00 06 F1 | 	add	_var01, #1
169a8     70 00 56 F2 | 	cmps	_var01, #112 wc
169ac     E8 FF 9F CD |  if_b	jmp	#LR__1730
169b0                 | ' repeat i from 112 to 127
169b0     70 00 06 F6 | 	mov	_var01, #112
169b4                 | LR__1731
169b4                 | '   cursor[i]:=color  
169b4     00 03 02 F6 | 	mov	_var02, _var01
169b8     F2 02 02 F1 | 	add	_var02, objptr
169bc     01 13 42 FC | 	wrbyte	arg01, _var02
169c0     01 00 06 F1 | 	add	_var01, #1
169c4     80 00 16 F2 | 	cmp	_var01, #128 wc
169c8     E8 FF 9F CD |  if_b	jmp	#LR__1731
169cc                 | LR__1732
169cc     01 00 00 FF 
169d0     32 E4 85 F1 | 	sub	objptr, ##562
169d4                 | _hg010b_spin2_setcursorcolor_ret
169d4     2D 00 64 FD | 	ret
169d8                 | 
169d8                 | '  
169d8                 | ' 
169d8                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
169d8                 | _hg010b_spin2_setmode
169d8     02 4A 05 F6 | 	mov	COUNT_, #2
169dc     A8 00 A0 FD | 	call	#pushregs_
169e0                 | ' 
169e0                 | ' 
169e0                 | ' dl_ptr:=@emptydl[0]
169e0     01 00 00 FF 
169e4     19 E4 05 F1 | 	add	objptr, ##537
169e8     F2 66 02 F6 | 	mov	muldivb_, objptr
169ec     FD E5 85 F1 | 	sub	objptr, #509
169f0     F2 66 62 FC | 	wrlong	muldivb_, objptr
169f4                 | ' 
169f4                 | ' if cog>0 
169f4     10 E4 05 F1 | 	add	objptr, #16
169f8     F2 66 02 FB | 	rdlong	muldivb_, objptr
169fc     2C E4 85 F1 | 	sub	objptr, #44
16a00     01 66 56 F2 | 	cmps	muldivb_, #1 wc
16a04                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
16a04     01 12 06 36 |  if_ae	mov	arg01, #1
16a08     54 0F B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
16a0c                 | ' xres:=1024
16a0c     01 00 00 FF 
16a10     22 E4 05 F1 | 	add	objptr, ##546
16a14     02 00 80 FF 
16a18     F2 00 68 FC | 	wrlong	##1024, objptr
16a1c                 | ' yres:=576  
16a1c     04 E4 05 F1 | 	add	objptr, #4
16a20     01 00 80 FF 
16a24     F2 80 68 FC | 	wrlong	##576, objptr
16a28                 | ' ppl:=(timings[3])
16a28     10 00 00 FF 
16a2c     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
16a30     F7 66 02 FB | 	rdlong	muldivb_, ptr__hg010b_spin2_dat__
16a34     51 E5 85 F1 | 	sub	objptr, #337
16a38     F2 66 62 FC | 	wrlong	muldivb_, objptr
16a3c                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
16a3c     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
16a40     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
16a44     01 1E 66 F0 | 	shl	local01, #1
16a48     80 E4 85 F1 | 	sub	objptr, #128
16a4c     F2 1E 62 FC | 	wrlong	local01, objptr
16a50                 | ' cpl1:=cpl '' todo remove
16a50     04 E4 05 F1 | 	add	objptr, #4
16a54     F2 1E 62 FC | 	wrlong	local01, objptr
16a58                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
16a58     02 00 00 FF 
16a5c     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
16a60     41 E4 85 F1 | 	sub	objptr, #65
16a64     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
16a68                 | ' repeat i from 0 to 3
16a68     00 20 06 F6 | 	mov	local02, #0
16a6c     02 00 00 FF 
16a70     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
16a74     08 E4 05 F1 | 	add	objptr, #8
16a78     97 20 48 FB | 	callpa	#(@LR__1741-@LR__1740)>>2,fcache_load_ptr_
16a7c                 | LR__1740
16a7c                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
16a7c     10 1F 02 F6 | 	mov	local01, local02
16a80     02 1E 66 F0 | 	shl	local01, #2
16a84     F7 1E 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
16a88     F2 66 02 FB | 	rdlong	muldivb_, objptr
16a8c     11 66 66 F0 | 	shl	muldivb_, #17
16a90     0F 1F 02 FB | 	rdlong	local01, local01
16a94     33 1F 02 F1 | 	add	local01, muldivb_
16a98     80 40 38 FF 
16a9c     00 1E 06 F1 | 	add	local01, ##1887502336
16aa0     10 67 02 F6 | 	mov	muldivb_, local02
16aa4     02 66 66 F0 | 	shl	muldivb_, #2
16aa8     F7 66 02 F1 | 	add	muldivb_, ptr__hg010b_spin2_dat__
16aac     33 1F 62 FC | 	wrlong	local01, muldivb_
16ab0     01 20 06 F1 | 	add	local02, #1
16ab4     04 20 56 F2 | 	cmps	local02, #4 wc
16ab8     C0 FF 9F CD |  if_b	jmp	#LR__1740
16abc                 | LR__1741
16abc     20 E4 85 F1 | 	sub	objptr, #32
16ac0                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
16ac0     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
16ac4     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
16ac8     14 1E 66 FC | 	wrlong	local01, #20
16acc                 | ' hubset(timings[10])
16acc     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
16ad0     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
16ad4     10 00 00 FF 
16ad8     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
16adc     00 12 62 FD | 	hubset	arg01
16ae0                 | ' waitms(1)                                                   	' wait for stabilization
16ae0     01 12 06 F6 | 	mov	arg01, #1
16ae4     C0 24 B0 FD | 	call	#__system___waitms
16ae8     10 00 00 FF 
16aec     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
16af0     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
16af4     5D E4 05 F1 | 	add	objptr, #93
16af8     F2 20 62 FC | 	wrlong	local02, objptr
16afc     10 1F 52 F6 | 	abs	local01, local02 wc
16b00     04 1E 46 F0 | 	shr	local01, #4
16b04     0F 1F 82 F6 | 	negc	local01, local01
16b08     9C E4 05 F1 | 	add	objptr, #156
16b0c     F2 1E 62 FC | 	wrlong	local01, objptr
16b10     A4 E4 85 F1 | 	sub	objptr, #164
16b14     F2 20 02 FB | 	rdlong	local02, objptr
16b18     08 E4 05 F1 | 	add	objptr, #8
16b1c     F2 1E 02 FB | 	rdlong	local01, objptr
16b20     0F 21 02 FD | 	qmul	local02, local01
16b24                 | ' lines:=timings[11]
16b24                 | ' t_lines:=lines/16
16b24                 | ' buflen:=cpl*lines						' framebuffer length in longs
16b24     29 E4 85 F1 | 	sub	objptr, #41
16b28                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
16b28     19 1E C6 F9 | 	decod	local01, #25
16b2c                 | ' mode_ptr:=@timings						' set pointers to timings
16b2c     2C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #44
16b30                 | ' graphmode:=1024+512+192+48							' det global variable
16b30                 | ' makedl(graphmode)							' make a DL for the mode
16b30     03 00 00 FF 
16b34     F0 12 06 F6 | 	mov	arg01, ##1776
16b38     18 20 62 FD | 	getqx	local02
16b3c     F2 20 62 FC | 	wrlong	local02, objptr
16b40     34 E4 85 F1 | 	sub	objptr, #52
16b44     02 20 66 F0 | 	shl	local02, #2
16b48     10 1F 82 F1 | 	sub	local01, local02
16b4c     F2 1E 62 FC | 	wrlong	local01, objptr
16b50     14 E4 05 F1 | 	add	objptr, #20
16b54     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
16b58     79 E4 05 F1 | 	add	objptr, #121
16b5c     03 00 80 FF 
16b60     F2 E0 69 FC | 	wrlong	##1776, objptr
16b64     8D E4 85 F1 | 	sub	objptr, #141
16b68     10 00 00 FF 
16b6c     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
16b70     AC 00 B0 FD | 	call	#_hg010b_spin2_makedl
16b74                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
16b74     F2 1E 02 FB | 	rdlong	local01, objptr
16b78     D9 E4 05 F1 | 	add	objptr, #217
16b7c     F2 1E 62 FC | 	wrlong	local01, objptr
16b80                 | ' s_font_ptr:=font_ptr
16b80     D5 E4 85 F1 | 	sub	objptr, #213
16b84     F2 1E 02 FB | 	rdlong	local01, objptr
16b88     D9 E4 05 F1 | 	add	objptr, #217
16b8c     F2 1E 62 FC | 	wrlong	local01, objptr
16b90                 | ' s_lines:=lines
16b90     80 E4 85 F1 | 	sub	objptr, #128
16b94     F2 1E 02 FB | 	rdlong	local01, objptr
16b98     84 E4 05 F1 | 	add	objptr, #132
16b9c     F2 1E 62 FC | 	wrlong	local01, objptr
16ba0                 | ' s_buflen:=buflen
16ba0     AD E4 85 F1 | 	sub	objptr, #173
16ba4     F2 1E 02 FB | 	rdlong	local01, objptr
16ba8     B5 E4 05 F1 | 	add	objptr, #181
16bac     F2 1E 62 FC | 	wrlong	local01, objptr
16bb0                 | ' s_cpl:=cpl
16bb0     94 E4 85 F1 | 	sub	objptr, #148
16bb4     F2 1E 02 FB | 	rdlong	local01, objptr
16bb8     90 E4 05 F1 | 	add	objptr, #144
16bbc     F2 1E 62 FC | 	wrlong	local01, objptr
16bc0                 | ' s_cpl1:=cpl
16bc0     90 E4 85 F1 | 	sub	objptr, #144
16bc4     F2 1E 02 FB | 	rdlong	local01, objptr
16bc8     98 E4 05 F1 | 	add	objptr, #152
16bcc     F2 1E 62 FC | 	wrlong	local01, objptr
16bd0                 | ' st_lines:=t_lines
16bd0     0C E4 05 F1 | 	add	objptr, #12
16bd4     F2 1E 02 FB | 	rdlong	local01, objptr
16bd8     04 E4 05 F1 | 	add	objptr, #4
16bdc     F2 1E 62 FC | 	wrlong	local01, objptr
16be0                 | ' ppl:=ppl/xzoom  
16be0     28 E4 85 F1 | 	sub	objptr, #40
16be4     F2 64 02 FB | 	rdlong	muldiva_, objptr
16be8     2C E4 05 F1 | 	add	objptr, #44
16bec     F2 66 02 FB | 	rdlong	muldivb_, objptr
16bf0     01 E5 85 F1 | 	sub	objptr, #257
16bf4     BA 00 A0 FD | 	call	#divide_
16bf8     D5 E4 05 F1 | 	add	objptr, #213
16bfc     F2 66 62 FC | 	wrlong	muldivb_, objptr
16c00                 | ' s_ppl:=ppl
16c00     1C E4 05 F1 | 	add	objptr, #28
16c04     F2 66 62 FC | 	wrlong	muldivb_, objptr
16c08     F1 E4 85 F1 | 	sub	objptr, #241
16c0c                 | ' waitms(20)							' wait 
16c0c     14 12 06 F6 | 	mov	arg01, #20
16c10     94 23 B0 FD | 	call	#__system___waitms
16c14     A7 F0 03 F6 | 	mov	ptra, fp
16c18     B2 00 A0 FD | 	call	#popregs_
16c1c                 | _hg010b_spin2_setmode_ret
16c1c     2D 00 64 FD | 	ret
16c20                 | 
16c20                 | ' 
16c20                 | ' 
16c20                 | ' '****************************************************************************************************************
16c20                 | ' '                                                                                                             	*
16c20                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
16c20                 | ' '                                                                                                             	*
16c20                 | ' '****************************************************************************************************************
16c20                 | ' 
16c20                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
16c20                 | _hg010b_spin2_makedl
16c20                 | ' 
16c20                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
16c20                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
16c20                 | ' repeat i from 0 to 11                                                           ' clear DL
16c20     00 00 06 F6 | 	mov	_var01, #0
16c24     E9 E5 05 F1 | 	add	objptr, #489
16c28     97 0E 48 FB | 	callpa	#(@LR__1751-@LR__1750)>>2,fcache_load_ptr_
16c2c                 | LR__1750
16c2c                 | '   displaylist[i]:=0 
16c2c     00 03 02 F6 | 	mov	_var02, _var01
16c30     02 02 66 F0 | 	shl	_var02, #2
16c34     F2 02 02 F1 | 	add	_var02, objptr
16c38     01 01 68 FC | 	wrlong	#0, _var02
16c3c     01 00 06 F1 | 	add	_var01, #1
16c40     0C 00 56 F2 | 	cmps	_var01, #12 wc
16c44     E4 FF 9F CD |  if_b	jmp	#LR__1750
16c48                 | LR__1751
16c48                 | '                         ' 
16c48                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
16c48     8C E5 85 F1 | 	sub	objptr, #396
16c4c     F2 02 02 FB | 	rdlong	_var02, objptr
16c50     14 02 66 F0 | 	shl	_var02, #20
16c54     01 02 06 F1 | 	add	_var02, #1
16c58     04 E4 85 F1 | 	sub	objptr, #4
16c5c     F2 00 02 FB | 	rdlong	_var01, objptr
16c60     02 00 66 F0 | 	shl	_var01, #2
16c64     04 00 66 F0 | 	shl	_var01, #4
16c68     00 03 02 F1 | 	add	_var02, _var01
16c6c     90 E5 05 F1 | 	add	objptr, #400
16c70     F2 02 62 FC | 	wrlong	_var02, objptr
16c74     E9 E5 85 F1 | 	sub	objptr, #489
16c78                 | ' displaylist[1]:=buf_ptr<<4+%10  
16c78     F2 02 02 FB | 	rdlong	_var02, objptr
16c7c     04 02 66 F0 | 	shl	_var02, #4
16c80     02 02 06 F1 | 	add	_var02, #2
16c84     ED E5 05 F1 | 	add	objptr, #493
16c88     F2 02 62 FC | 	wrlong	_var02, objptr
16c8c                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
16c8c     04 E4 85 F1 | 	sub	objptr, #4
16c90     F2 02 02 F6 | 	mov	_var02, objptr
16c94     CD E5 85 F1 | 	sub	objptr, #461
16c98     F2 02 62 FC | 	wrlong	_var02, objptr
16c9c     1C E4 85 F1 | 	sub	objptr, #28
16ca0                 | _hg010b_spin2_makedl_ret
16ca0     2D 00 64 FD | 	ret
16ca4                 | 
16ca4                 | ' 
16ca4                 | ' 
16ca4                 | ' '****************************************************************************************************************
16ca4                 | ' '                                                                        					*
16ca4                 | ' '  Graphic primitives                                                    					*
16ca4                 | ' '                                                                        					*
16ca4                 | ' '****************************************************************************************************************
16ca4                 | ' 
16ca4                 | ' pub setspriteptr(num,ptr)
16ca4                 | _hg010b_spin2_setspriteptr
16ca4                 | ' long[@spr1ptr+12*num]:=ptr
16ca4     0D E5 05 F1 | 	add	objptr, #269
16ca8     F2 00 02 F6 | 	mov	_var01, objptr
16cac     09 03 02 F6 | 	mov	_var02, arg01
16cb0     01 02 66 F0 | 	shl	_var02, #1
16cb4     09 03 02 F1 | 	add	_var02, arg01
16cb8     02 02 66 F0 | 	shl	_var02, #2
16cbc     01 01 02 F1 | 	add	_var01, _var02
16cc0     00 15 62 FC | 	wrlong	arg02, _var01
16cc4     0D E5 85 F1 | 	sub	objptr, #269
16cc8                 | _hg010b_spin2_setspriteptr_ret
16cc8     2D 00 64 FD | 	ret
16ccc                 | 
16ccc                 | ' 
16ccc                 | ' pub setspritepos(num,x,y)
16ccc                 | _hg010b_spin2_setspritepos
16ccc                 | ' word[@spr1ptr+12*num+4]:=x
16ccc     0D E5 05 F1 | 	add	objptr, #269
16cd0     F2 00 02 F6 | 	mov	_var01, objptr
16cd4     09 03 02 F6 | 	mov	_var02, arg01
16cd8     01 02 66 F0 | 	shl	_var02, #1
16cdc     09 03 02 F1 | 	add	_var02, arg01
16ce0     02 02 66 F0 | 	shl	_var02, #2
16ce4     01 01 02 F1 | 	add	_var01, _var02
16ce8     04 00 06 F1 | 	add	_var01, #4
16cec     00 15 52 FC | 	wrword	arg02, _var01
16cf0                 | ' word[@spr1ptr+12*num+6]:=y
16cf0     F2 00 02 F6 | 	mov	_var01, objptr
16cf4     09 03 02 F6 | 	mov	_var02, arg01
16cf8     01 02 66 F0 | 	shl	_var02, #1
16cfc     09 03 02 F1 | 	add	_var02, arg01
16d00     02 02 66 F0 | 	shl	_var02, #2
16d04     01 01 02 F1 | 	add	_var01, _var02
16d08     06 00 06 F1 | 	add	_var01, #6
16d0c     00 17 52 FC | 	wrword	arg03, _var01
16d10     0D E5 85 F1 | 	sub	objptr, #269
16d14                 | _hg010b_spin2_setspritepos_ret
16d14     2D 00 64 FD | 	ret
16d18                 | 
16d18                 | ' 
16d18                 | ' pub setspritesize(num,w,h)
16d18                 | _hg010b_spin2_setspritesize
16d18                 | ' word[@spr1ptr+12*num+8]:=w
16d18     0D E5 05 F1 | 	add	objptr, #269
16d1c     F2 00 02 F6 | 	mov	_var01, objptr
16d20     09 03 02 F6 | 	mov	_var02, arg01
16d24     01 02 66 F0 | 	shl	_var02, #1
16d28     09 03 02 F1 | 	add	_var02, arg01
16d2c     02 02 66 F0 | 	shl	_var02, #2
16d30     01 01 02 F1 | 	add	_var01, _var02
16d34     08 00 06 F1 | 	add	_var01, #8
16d38     00 15 52 FC | 	wrword	arg02, _var01
16d3c                 | ' word[@spr1ptr+12*num+10]:=h
16d3c     F2 00 02 F6 | 	mov	_var01, objptr
16d40     09 03 02 F6 | 	mov	_var02, arg01
16d44     01 02 66 F0 | 	shl	_var02, #1
16d48     09 03 02 F1 | 	add	_var02, arg01
16d4c     02 02 66 F0 | 	shl	_var02, #2
16d50     01 01 02 F1 | 	add	_var01, _var02
16d54     0A 00 06 F1 | 	add	_var01, #10
16d58     00 17 52 FC | 	wrword	arg03, _var01
16d5c     0D E5 85 F1 | 	sub	objptr, #269
16d60                 | _hg010b_spin2_setspritesize_ret
16d60     2D 00 64 FD | 	ret
16d64                 | 
16d64                 | ' 
16d64                 | ' 
16d64                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
16d64                 | ' 
16d64                 | ' 
16d64                 | ' pub putpixel(x,y,c)
16d64                 | _hg010b_spin2_putpixel
16d64     04 4A 05 F6 | 	mov	COUNT_, #4
16d68     A8 00 A0 FD | 	call	#pushregs_
16d6c     09 1F 02 F6 | 	mov	local01, arg01
16d70                 | ' 
16d70                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
16d70     00 20 06 F6 | 	mov	local02, #0
16d74     00 1E 56 F2 | 	cmps	local01, #0 wc
16d78     01 20 66 36 |  if_ae	neg	local02, #1
16d7c     E5 E4 05 F1 | 	add	objptr, #229
16d80     F2 1A 02 FB | 	rdlong	arg05, objptr
16d84     02 1A 66 F0 | 	shl	arg05, #2
16d88     0D 1F 52 F2 | 	cmps	local01, arg05 wc
16d8c     11 23 A2 F1 | 	subx	local03, local03
16d90     11 21 02 F5 | 	and	local02, local03
16d94     00 22 06 F6 | 	mov	local03, #0
16d98     00 14 56 F2 | 	cmps	arg02, #0 wc
16d9c     01 22 66 36 |  if_ae	neg	local03, #1
16da0     11 21 02 F5 | 	and	local02, local03
16da4     04 E4 85 F1 | 	sub	objptr, #4
16da8     F2 22 02 FB | 	rdlong	local03, objptr
16dac     E1 E4 85 F1 | 	sub	objptr, #225
16db0     11 15 52 F2 | 	cmps	arg02, local03 wc
16db4     12 25 A2 F1 | 	subx	local04, local04
16db8     12 21 CA F7 | 	test	local02, local04 wz
16dbc     48 00 90 AD |  if_e	jmp	#LR__1760
16dc0     D9 E4 05 F1 | 	add	objptr, #217
16dc4     F2 12 02 FB | 	rdlong	arg01, objptr
16dc8     14 E4 05 F1 | 	add	objptr, #20
16dcc     F2 24 02 FB | 	rdlong	local04, objptr
16dd0     02 24 66 F0 | 	shl	local04, #2
16dd4     0A 25 02 FD | 	qmul	local04, arg02
16dd8                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
16dd8     0B 15 02 F6 | 	mov	arg02, arg03
16ddc     01 16 06 F6 | 	mov	arg03, #1
16de0     00 18 06 F6 | 	mov	arg04, #0
16de4     01 1A 06 F6 | 	mov	arg05, #1
16de8     0A 00 00 FF 
16dec     D3 E5 05 F1 | 	add	objptr, ##5587
16df0     18 24 62 FD | 	getqx	local04
16df4     0F 25 02 F1 | 	add	local04, local01
16df8     12 13 02 F1 | 	add	arg01, local04
16dfc     FC 14 B0 FD | 	call	#_psram_spin2_fill
16e00     0B 00 00 FF 
16e04     C0 E4 85 F1 | 	sub	objptr, ##5824
16e08                 | LR__1760
16e08     A7 F0 03 F6 | 	mov	ptra, fp
16e0c     B2 00 A0 FD | 	call	#popregs_
16e10                 | _hg010b_spin2_putpixel_ret
16e10     2D 00 64 FD | 	ret
16e14                 | 
16e14                 | ' 
16e14                 | ' pub putpixel2(x,y,c)
16e14                 | _hg010b_spin2_putpixel2
16e14     02 4A 05 F6 | 	mov	COUNT_, #2
16e18     A8 00 A0 FD | 	call	#pushregs_
16e1c     D9 E4 05 F1 | 	add	objptr, #217
16e20     F2 1E 02 FB | 	rdlong	local01, objptr
16e24     14 E4 05 F1 | 	add	objptr, #20
16e28     F2 1A 02 FB | 	rdlong	arg05, objptr
16e2c     02 1A 66 F0 | 	shl	arg05, #2
16e30     0A 1B 02 FD | 	qmul	arg05, arg02
16e34                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
16e34     0B 15 02 F6 | 	mov	arg02, arg03
16e38     01 16 06 F6 | 	mov	arg03, #1
16e3c     00 18 06 F6 | 	mov	arg04, #0
16e40     01 1A 06 F6 | 	mov	arg05, #1
16e44     0A 00 00 FF 
16e48     D3 E5 05 F1 | 	add	objptr, ##5587
16e4c     18 20 62 FD | 	getqx	local02
16e50     09 21 02 F1 | 	add	local02, arg01
16e54     10 1F 02 F1 | 	add	local01, local02
16e58     0F 13 02 F6 | 	mov	arg01, local01
16e5c     9C 14 B0 FD | 	call	#_psram_spin2_fill
16e60     0B 00 00 FF 
16e64     C0 E4 85 F1 | 	sub	objptr, ##5824
16e68     A7 F0 03 F6 | 	mov	ptra, fp
16e6c     B2 00 A0 FD | 	call	#popregs_
16e70                 | _hg010b_spin2_putpixel2_ret
16e70     2D 00 64 FD | 	ret
16e74                 | 
16e74                 | ' 
16e74                 | ' pub getpixel2(x,y): c 
16e74                 | _hg010b_spin2_getpixel2
16e74     02 4A 05 F6 | 	mov	COUNT_, #2
16e78     A8 00 A0 FD | 	call	#pushregs_
16e7c     0C F0 07 F1 | 	add	ptra, #12
16e80     04 4E 05 F1 | 	add	fp, #4
16e84     A7 12 62 FC | 	wrlong	arg01, fp
16e88     04 4E 05 F1 | 	add	fp, #4
16e8c     A7 14 62 FC | 	wrlong	arg02, fp
16e90     08 4E 85 F1 | 	sub	fp, #8
16e94     A7 00 68 FC | 	wrlong	#0, fp
16e98     A7 12 02 F6 | 	mov	arg01, fp
16e9c     D9 E4 05 F1 | 	add	objptr, #217
16ea0     F2 14 02 FB | 	rdlong	arg02, objptr
16ea4     14 E4 05 F1 | 	add	objptr, #20
16ea8     F2 16 02 FB | 	rdlong	arg03, objptr
16eac     02 16 66 F0 | 	shl	arg03, #2
16eb0     08 4E 05 F1 | 	add	fp, #8
16eb4     A7 FA 01 FB | 	rdlong	result1, fp
16eb8     FD 16 02 FD | 	qmul	arg03, result1
16ebc                 | ' 
16ebc                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
16ebc     04 4E 85 F1 | 	sub	fp, #4
16ec0     A7 1E 02 FB | 	rdlong	local01, fp
16ec4     04 4E 85 F1 | 	sub	fp, #4
16ec8     01 16 06 F6 | 	mov	arg03, #1
16ecc     0A 00 00 FF 
16ed0     D3 E5 05 F1 | 	add	objptr, ##5587
16ed4     18 20 62 FD | 	getqx	local02
16ed8     0F 21 02 F1 | 	add	local02, local01
16edc     10 15 02 F1 | 	add	arg02, local02
16ee0     E0 12 B0 FD | 	call	#_psram_spin2_read1
16ee4     0B 00 00 FF 
16ee8     C0 E4 85 F1 | 	sub	objptr, ##5824
16eec                 | ' return c
16eec     A7 FA 01 FB | 	rdlong	result1, fp
16ef0     A7 F0 03 F6 | 	mov	ptra, fp
16ef4     B2 00 A0 FD | 	call	#popregs_
16ef8                 | _hg010b_spin2_getpixel2_ret
16ef8     2D 00 64 FD | 	ret
16efc                 | 
16efc                 | '   
16efc                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
16efc                 | ' 
16efc                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
16efc                 | _hg010b_spin2_fastline
16efc     02 4A 05 F6 | 	mov	COUNT_, #2
16f00     A8 00 A0 FD | 	call	#pushregs_
16f04     09 1F 02 F6 | 	mov	local01, arg01
16f08     0A 21 02 F6 | 	mov	local02, arg02
16f0c                 | ' 
16f0c                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
16f0c     00 16 56 F2 | 	cmps	arg03, #0 wc
16f10     F4 00 90 CD |  if_b	jmp	#LR__1770
16f14     01 00 00 FF 
16f18     26 E4 05 F1 | 	add	objptr, ##550
16f1c     F2 1A 02 FB | 	rdlong	arg05, objptr
16f20     01 00 00 FF 
16f24     26 E4 85 F1 | 	sub	objptr, ##550
16f28     0D 17 52 F2 | 	cmps	arg03, arg05 wc
16f2c     D8 00 90 3D |  if_ae	jmp	#LR__1770
16f30     00 1E 56 F2 | 	cmps	local01, #0 wc
16f34     00 20 56 C2 |  if_b	cmps	local02, #0 wc
16f38     CC 00 90 CD |  if_b	jmp	#LR__1770
16f3c     01 00 00 FF 
16f40     22 E4 05 F1 | 	add	objptr, ##546
16f44     F2 1A 02 FB | 	rdlong	arg05, objptr
16f48     01 00 00 FF 
16f4c     22 E4 85 F1 | 	sub	objptr, ##546
16f50     0D 1F 5A F2 | 	cmps	local01, arg05 wcz
16f54     01 00 00 1F 
16f58     22 E4 05 11 |  if_a	add	objptr, ##546
16f5c     F2 12 02 1B |  if_a	rdlong	arg01, objptr
16f60     01 00 00 1F 
16f64     22 E4 85 11 |  if_a	sub	objptr, ##546
16f68     09 21 5A 12 |  if_a	cmps	local02, arg01 wcz
16f6c                 | '   return
16f6c     98 00 90 1D |  if_a	jmp	#LR__1770
16f70     10 1F 5A F2 | 	cmps	local01, local02 wcz
16f74     0F 1B 02 16 |  if_a	mov	arg05, local01
16f78     10 1F 02 16 |  if_a	mov	local01, local02
16f7c     0D 21 02 16 |  if_a	mov	local02, arg05
16f80     00 1E 56 F2 | 	cmps	local01, #0 wc
16f84     00 1E 06 C6 |  if_b	mov	local01, #0
16f88     01 00 00 FF 
16f8c     22 E4 05 F1 | 	add	objptr, ##546
16f90     F2 1A 02 FB | 	rdlong	arg05, objptr
16f94     01 00 00 FF 
16f98     22 E4 85 F1 | 	sub	objptr, ##546
16f9c     0D 21 52 F2 | 	cmps	local02, arg05 wc
16fa0     01 00 00 3F 
16fa4     22 E4 05 31 |  if_ae	add	objptr, ##546
16fa8     F2 20 02 3B |  if_ae	rdlong	local02, objptr
16fac     01 00 00 3F 
16fb0     22 E4 85 31 |  if_ae	sub	objptr, ##546
16fb4     D9 E4 05 F1 | 	add	objptr, #217
16fb8     F2 12 02 FB | 	rdlong	arg01, objptr
16fbc     14 E4 05 F1 | 	add	objptr, #20
16fc0     F2 1A 02 FB | 	rdlong	arg05, objptr
16fc4     02 1A 66 F0 | 	shl	arg05, #2
16fc8     0B 1B 02 FD | 	qmul	arg05, arg03
16fcc                 | ' if x1>x2
16fcc                 | '   x1,x2:=x2,x1
16fcc                 | ' if x1<0 
16fcc                 | '   x1:=0
16fcc                 | ' if x2>=xres
16fcc                 | '   x2:=xres-1  
16fcc     01 20 86 31 |  if_ae	sub	local02, #1
16fd0                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
16fd0     01 16 06 F6 | 	mov	arg03, #1
16fd4     10 17 02 F1 | 	add	arg03, local02
16fd8     0F 17 82 F1 | 	sub	arg03, local01
16fdc     0C 15 02 F6 | 	mov	arg02, arg04
16fe0     00 18 06 F6 | 	mov	arg04, #0
16fe4     01 1A 06 F6 | 	mov	arg05, #1
16fe8     0A 00 00 FF 
16fec     D3 E5 05 F1 | 	add	objptr, ##5587
16ff0     18 20 62 FD | 	getqx	local02
16ff4     0F 21 02 F1 | 	add	local02, local01
16ff8     10 13 02 F1 | 	add	arg01, local02
16ffc     FC 12 B0 FD | 	call	#_psram_spin2_fill
17000     0B 00 00 FF 
17004     C0 E4 85 F1 | 	sub	objptr, ##5824
17008                 | LR__1770
17008     A7 F0 03 F6 | 	mov	ptra, fp
1700c     B2 00 A0 FD | 	call	#popregs_
17010                 | _hg010b_spin2_fastline_ret
17010     2D 00 64 FD | 	ret
17014                 | 
17014                 | ' 
17014                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
17014                 | _hg010b_spin2_draw
17014     0E 4A 05 F6 | 	mov	COUNT_, #14
17018     A8 00 A0 FD | 	call	#pushregs_
1701c     09 1F 02 F6 | 	mov	local01, arg01
17020     0A 21 02 F6 | 	mov	local02, arg02
17024     0B 23 02 F6 | 	mov	local03, arg03
17028     0C 25 02 F6 | 	mov	local04, arg04
1702c     0D 27 02 F6 | 	mov	local05, arg05
17030                 | ' 
17030                 | ' if (y1==y2)
17030     12 21 0A F2 | 	cmp	local02, local04 wz
17034     18 00 90 5D |  if_ne	jmp	#LR__1780
17038                 | '   fastline(x1,x2,y1,c)
17038     0F 13 02 F6 | 	mov	arg01, local01
1703c     11 15 02 F6 | 	mov	arg02, local03
17040     10 17 02 F6 | 	mov	arg03, local02
17044     13 19 02 F6 | 	mov	arg04, local05
17048     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
1704c     F8 00 90 FD | 	jmp	#LR__1786
17050                 | LR__1780
17050                 | ' else  
17050                 | '   x:=x1
17050     0F 29 02 F6 | 	mov	local06, local01
17054                 | '   y:=y1
17054     10 2B 02 F6 | 	mov	local07, local02
17058                 | ' 
17058                 | '   if (x1<x2) 
17058     11 1F 52 F2 | 	cmps	local01, local03 wc
1705c                 | '     xi:=1
1705c     01 2C 06 C6 |  if_b	mov	local08, #1
17060                 | '     dx:=x2-x1
17060     11 2F 02 C6 |  if_b	mov	local09, local03
17064     0F 2F 82 C1 |  if_b	sub	local09, local01
17068                 | '   else
17068                 | '     xi:=-1
17068     01 2C 66 36 |  if_ae	neg	local08, #1
1706c                 | '     dx:=x1-x2
1706c     11 1F 82 31 |  if_ae	sub	local01, local03
17070     0F 2F 02 36 |  if_ae	mov	local09, local01
17074                 | '   
17074                 | '   if (y1<y2) 
17074     12 21 52 F2 | 	cmps	local02, local04 wc
17078                 | '     yi:=1
17078     01 30 06 C6 |  if_b	mov	local10, #1
1707c                 | '     dy:=y2-y1
1707c     12 33 02 C6 |  if_b	mov	local11, local04
17080     10 33 82 C1 |  if_b	sub	local11, local02
17084                 | '   else
17084                 | '     yi:=-1
17084     01 30 66 36 |  if_ae	neg	local10, #1
17088                 | '     dy:=y1-y2
17088     12 21 82 31 |  if_ae	sub	local02, local04
1708c     10 33 02 36 |  if_ae	mov	local11, local02
17090                 | ' 
17090                 | '   putpixel(x,y,c)
17090     13 17 02 F6 | 	mov	arg03, local05
17094     14 13 02 F6 | 	mov	arg01, local06
17098     15 15 02 F6 | 	mov	arg02, local07
1709c     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
170a0                 | ' 
170a0                 | '   if (dx>dy)
170a0     19 2F 5A F2 | 	cmps	local09, local11 wcz
170a4     50 00 90 ED |  if_be	jmp	#LR__1782
170a8                 | '     ai:=(dy-dx)*2
170a8     19 35 02 F6 | 	mov	local12, local11
170ac     17 35 82 F1 | 	sub	local12, local09
170b0     01 34 66 F0 | 	shl	local12, #1
170b4                 | '     bi:=dy*2
170b4     01 32 66 F0 | 	shl	local11, #1
170b8     19 37 02 F6 | 	mov	local13, local11
170bc                 | '     d:= bi-dx
170bc     1B 39 02 F6 | 	mov	local14, local13
170c0     17 39 82 F1 | 	sub	local14, local09
170c4                 | '     repeat while (x<>x2) 
170c4                 | LR__1781
170c4     11 29 0A F2 | 	cmp	local06, local03 wz
170c8     7C 00 90 AD |  if_e	jmp	#LR__1785
170cc                 | '       if (d>=0) 
170cc     00 38 56 F2 | 	cmps	local14, #0 wc
170d0                 | '         x+=xi
170d0     16 29 02 31 |  if_ae	add	local06, local08
170d4                 | '         y+=yi
170d4     18 2B 02 31 |  if_ae	add	local07, local10
170d8                 | '         d+=ai
170d8     1A 39 02 31 |  if_ae	add	local14, local12
170dc                 | '       else
170dc                 | '         d+=bi
170dc     1B 39 02 C1 |  if_b	add	local14, local13
170e0                 | '         x+=xi
170e0     16 29 02 C1 |  if_b	add	local06, local08
170e4                 | '       putpixel(x,y,c)
170e4     14 13 02 F6 | 	mov	arg01, local06
170e8     15 15 02 F6 | 	mov	arg02, local07
170ec     13 17 02 F6 | 	mov	arg03, local05
170f0     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
170f4     CC FF 9F FD | 	jmp	#LR__1781
170f8                 | LR__1782
170f8                 | '   else
170f8                 | '     ai:=(dx-dy)*2
170f8     17 35 02 F6 | 	mov	local12, local09
170fc     19 35 82 F1 | 	sub	local12, local11
17100     01 34 66 F0 | 	shl	local12, #1
17104                 | '     bi:=dx*2
17104     01 2E 66 F0 | 	shl	local09, #1
17108     17 37 02 F6 | 	mov	local13, local09
1710c                 | '     d:=bi-dy
1710c     1B 39 02 F6 | 	mov	local14, local13
17110     19 39 82 F1 | 	sub	local14, local11
17114                 | '     repeat while (y<>y2)
17114                 | LR__1783
17114     12 2B 0A F2 | 	cmp	local07, local04 wz
17118     2C 00 90 AD |  if_e	jmp	#LR__1784
1711c                 | '       if (d>=0)
1711c     00 38 56 F2 | 	cmps	local14, #0 wc
17120                 | '         x+=xi
17120     16 29 02 31 |  if_ae	add	local06, local08
17124                 | '         y+=yi
17124     18 2B 02 31 |  if_ae	add	local07, local10
17128                 | '         d+=ai
17128     1A 39 02 31 |  if_ae	add	local14, local12
1712c                 | '       else
1712c                 | '         d+=bi
1712c     1B 39 02 C1 |  if_b	add	local14, local13
17130                 | '         y+=yi
17130     18 2B 02 C1 |  if_b	add	local07, local10
17134                 | '       putpixel(x, y,c)
17134     14 13 02 F6 | 	mov	arg01, local06
17138     15 15 02 F6 | 	mov	arg02, local07
1713c     13 17 02 F6 | 	mov	arg03, local05
17140     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
17144     CC FF 9F FD | 	jmp	#LR__1783
17148                 | LR__1784
17148                 | LR__1785
17148                 | LR__1786
17148     A7 F0 03 F6 | 	mov	ptra, fp
1714c     B2 00 A0 FD | 	call	#popregs_
17150                 | _hg010b_spin2_draw_ret
17150     2D 00 64 FD | 	ret
17154                 | 
17154                 | '  
17154                 | ' pub fillpush(val) 
17154                 | _hg010b_spin2_fillpush
17154                 | ' fillstack[fillptr]:=val
17154     0B 00 00 FF 
17158     B6 E4 05 F1 | 	add	objptr, ##5814
1715c     F2 00 02 FB | 	rdlong	_var01, objptr
17160     02 00 66 F0 | 	shl	_var01, #2
17164     0A 00 00 FF 
17168     00 E4 85 F1 | 	sub	objptr, ##5120
1716c     F2 00 02 F1 | 	add	_var01, objptr
17170     00 13 62 FC | 	wrlong	arg01, _var01
17174                 | ' fillptr+=1   
17174     0A 00 00 FF 
17178     00 E4 05 F1 | 	add	objptr, ##5120
1717c     F2 00 02 FB | 	rdlong	_var01, objptr
17180     01 00 06 F1 | 	add	_var01, #1
17184     F2 00 62 FC | 	wrlong	_var01, objptr
17188     0B 00 00 FF 
1718c     B6 E4 85 F1 | 	sub	objptr, ##5814
17190                 | _hg010b_spin2_fillpush_ret
17190     2D 00 64 FD | 	ret
17194                 | 
17194                 | ' 
17194                 | '     
17194                 | ' pub fillpop() : val
17194                 | _hg010b_spin2_fillpop
17194                 | ' 
17194                 | ' fillptr-=1
17194     0B 00 00 FF 
17198     B6 E4 05 F1 | 	add	objptr, ##5814
1719c     F2 FA 01 FB | 	rdlong	result1, objptr
171a0     01 FA 85 F1 | 	sub	result1, #1
171a4     F2 FA 61 FC | 	wrlong	result1, objptr
171a8                 | ' if fillptr<0
171a8     0B 00 00 FF 
171ac     B6 E4 85 F1 | 	sub	objptr, ##5814
171b0     00 FA 55 F2 | 	cmps	result1, #0 wc
171b4                 | '   fillptr:=0
171b4     0B 00 00 CF 
171b8     B6 E4 05 C1 |  if_b	add	objptr, ##5814
171bc     F2 00 68 CC |  if_b	wrlong	#0, objptr
171c0     0B 00 00 CF 
171c4     B6 E4 85 C1 |  if_b	sub	objptr, ##5814
171c8                 | '   val:=-12345
171c8     E7 FF 7F CF 
171cc     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
171d0     28 00 90 CD |  if_b	jmp	#LR__1790
171d4                 | ' else 
171d4                 | '   val:=fillstack[fillptr]
171d4     0B 00 00 FF 
171d8     B6 E4 05 F1 | 	add	objptr, ##5814
171dc     F2 00 02 FB | 	rdlong	_var01, objptr
171e0     02 00 66 F0 | 	shl	_var01, #2
171e4     0A 00 00 FF 
171e8     00 E4 85 F1 | 	sub	objptr, ##5120
171ec     F2 00 02 F1 | 	add	_var01, objptr
171f0     00 01 02 FB | 	rdlong	_var01, _var01
171f4     01 00 00 FF 
171f8     B6 E4 85 F1 | 	sub	objptr, ##694
171fc                 | LR__1790
171fc                 | ' return val
171fc     00 FB 01 F6 | 	mov	result1, _var01
17200                 | _hg010b_spin2_fillpop_ret
17200     2D 00 64 FD | 	ret
17204                 | 
17204                 | ' 
17204                 | '       
17204                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
17204                 | _hg010b_spin2_fill
17204     0B 4A 05 F6 | 	mov	COUNT_, #11
17208     A8 00 A0 FD | 	call	#pushregs_
1720c                 | ' 
1720c                 | ' newcolor:=newcolor & 255
1720c     0B 1F E2 F8 | 	getbyte	local01, arg03, #0
17210                 | ' oldcolor:=oldcolor & 255
17210     0C 21 E2 F8 | 	getbyte	local02, arg04, #0
17214                 | ' 
17214                 | ' if (oldcolor == newcolor) 
17214     0F 21 0A F2 | 	cmp	local02, local01 wz
17218                 | '   return
17218     70 02 90 AD |  if_e	jmp	#LR__1809
1721c                 | ' 
1721c                 | ' fillptr:=0
1721c     0B 00 00 FF 
17220     B6 E4 05 F1 | 	add	objptr, ##5814
17224     F2 00 68 FC | 	wrlong	#0, objptr
17228                 | ' fillmax:=0
17228     04 E4 05 F1 | 	add	objptr, #4
1722c     F2 00 68 FC | 	wrlong	#0, objptr
17230     0B 00 00 FF 
17234     BA E4 85 F1 | 	sub	objptr, ##5818
17238                 | ' fillpush(x)
17238     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
1723c                 | ' fillpush(y)
1723c     0A 13 02 F6 | 	mov	arg01, arg02
17240     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
17244                 | ' y:=fillpop()
17244     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
17248     FD 22 02 F6 | 	mov	local03, result1
1724c                 | ' x:=fillpop()
1724c     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
17250     FD 24 02 F6 | 	mov	local04, result1
17254                 | ' 'pinhigh(38)
17254                 | ' repeat while (x>-1)       
17254                 | LR__1800
17254     00 24 56 F2 | 	cmps	local04, #0 wc
17258     30 02 90 CD |  if_b	jmp	#LR__1808
1725c                 | '  ' pintoggle(39)
1725c                 | '   x1 := x
1725c     12 27 02 F6 | 	mov	local05, local04
17260                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
17260                 | LR__1801
17260     00 28 06 F6 | 	mov	local06, #0
17264     00 2A 06 F6 | 	mov	local07, #0
17268     00 26 56 F2 | 	cmps	local05, #0 wc
1726c     01 2A 66 36 |  if_ae	neg	local07, #1
17270     00 2A 0E F2 | 	cmp	local07, #0 wz
17274     00 28 26 56 |  if_ne	not	local06, #0
17278     00 2C 06 F6 | 	mov	local08, #0
1727c     00 2E 06 F6 | 	mov	local09, #0
17280     11 15 02 F6 | 	mov	arg02, local03
17284     13 13 02 F6 | 	mov	arg01, local05
17288     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1728c     10 FB 09 F2 | 	cmp	result1, local02 wz
17290     00 2E 26 A6 |  if_e	not	local09, #0
17294     00 2E 0E F2 | 	cmp	local09, #0 wz
17298     00 2C 26 56 |  if_ne	not	local08, #0
1729c     16 29 CA F7 | 	test	local06, local08 wz
172a0                 | '     x1--
172a0     01 26 86 51 |  if_ne	sub	local05, #1
172a4     B8 FF 9F 5D |  if_ne	jmp	#LR__1801
172a8                 | '   x1++
172a8     01 26 06 F1 | 	add	local05, #1
172ac                 | '   spanabove := 0
172ac     00 30 06 F6 | 	mov	local10, #0
172b0                 | '   spanbelow := 0
172b0     00 32 06 F6 | 	mov	local11, #0
172b4                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
172b4                 | LR__1802
172b4     00 28 06 F6 | 	mov	local06, #0
172b8     02 00 00 FF 
172bc     00 26 56 F2 | 	cmps	local05, ##1024 wc
172c0     00 28 26 C6 |  if_b	not	local06, #0
172c4     00 2C 06 F6 | 	mov	local08, #0
172c8     00 2E 06 F6 | 	mov	local09, #0
172cc     11 15 02 F6 | 	mov	arg02, local03
172d0     13 13 02 F6 | 	mov	arg01, local05
172d4     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
172d8     10 FB 09 F2 | 	cmp	result1, local02 wz
172dc     00 2E 26 A6 |  if_e	not	local09, #0
172e0     00 2E 0E F2 | 	cmp	local09, #0 wz
172e4     00 2C 26 56 |  if_ne	not	local08, #0
172e8     16 29 CA F7 | 	test	local06, local08 wz
172ec     88 01 90 AD |  if_e	jmp	#LR__1807
172f0                 | '     putpixel2 (x1,y, newcolor & 255)
172f0     0F 17 E2 F8 | 	getbyte	arg03, local01, #0
172f4     13 13 02 F6 | 	mov	arg01, local05
172f8     11 15 02 F6 | 	mov	arg02, local03
172fc     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
17300                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
17300     00 28 06 F6 | 	mov	local06, #0
17304     00 2A 06 F6 | 	mov	local07, #0
17308     00 30 0E F2 | 	cmp	local10, #0 wz
1730c     01 22 56 A2 |  if_e	cmps	local03, #1 wc
17310     01 2A 66 26 |  if_nc_and_z	neg	local07, #1
17314     00 2A 0E F2 | 	cmp	local07, #0 wz
17318     00 28 26 56 |  if_ne	not	local06, #0
1731c     00 2C 06 F6 | 	mov	local08, #0
17320     00 2E 06 F6 | 	mov	local09, #0
17324     11 15 02 F6 | 	mov	arg02, local03
17328     01 14 86 F1 | 	sub	arg02, #1
1732c     13 13 02 F6 | 	mov	arg01, local05
17330     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
17334     10 FB 09 F2 | 	cmp	result1, local02 wz
17338     00 2E 26 A6 |  if_e	not	local09, #0
1733c     00 2E 0E F2 | 	cmp	local09, #0 wz
17340     00 2C 26 56 |  if_ne	not	local08, #0
17344     16 29 CA F7 | 	test	local06, local08 wz
17348     1C 00 90 AD |  if_e	jmp	#LR__1803
1734c                 | '       fillpush(x1)
1734c     13 13 02 F6 | 	mov	arg01, local05
17350     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
17354                 | '       fillpush(y-1)
17354     11 13 02 F6 | 	mov	arg01, local03
17358     01 12 86 F1 | 	sub	arg01, #1
1735c     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
17360                 | '       spanabove := 1 
17360     01 30 06 F6 | 	mov	local10, #1
17364     4C 00 90 FD | 	jmp	#LR__1804
17368                 | LR__1803
17368                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
17368     00 28 06 F6 | 	mov	local06, #0
1736c     00 2A 06 F6 | 	mov	local07, #0
17370     00 30 0E F2 | 	cmp	local10, #0 wz
17374     01 22 56 52 |  if_ne	cmps	local03, #1 wc
17378     01 2A 66 16 |  if_a	neg	local07, #1
1737c     00 2A 0E F2 | 	cmp	local07, #0 wz
17380     00 28 26 56 |  if_ne	not	local06, #0
17384     00 2C 06 F6 | 	mov	local08, #0
17388     00 2E 06 F6 | 	mov	local09, #0
1738c     11 15 02 F6 | 	mov	arg02, local03
17390     01 14 86 F1 | 	sub	arg02, #1
17394     13 13 02 F6 | 	mov	arg01, local05
17398     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1739c     10 FB 09 F2 | 	cmp	result1, local02 wz
173a0     00 2E 26 56 |  if_ne	not	local09, #0
173a4     00 2E 0E F2 | 	cmp	local09, #0 wz
173a8     00 2C 26 56 |  if_ne	not	local08, #0
173ac     16 29 CA F7 | 	test	local06, local08 wz
173b0                 | '       spanabove := 0 
173b0     00 30 06 56 |  if_ne	mov	local10, #0
173b4                 | LR__1804
173b4                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
173b4     00 28 06 F6 | 	mov	local06, #0
173b8     00 2A 06 F6 | 	mov	local07, #0
173bc     00 32 0E F2 | 	cmp	local11, #0 wz
173c0     01 00 00 AF 
173c4     3F 22 56 A2 |  if_e	cmps	local03, ##575 wc
173c8     01 2A 66 86 |  if_c_and_z	neg	local07, #1
173cc     00 2A 0E F2 | 	cmp	local07, #0 wz
173d0     00 28 26 56 |  if_ne	not	local06, #0
173d4     00 2C 06 F6 | 	mov	local08, #0
173d8     00 2E 06 F6 | 	mov	local09, #0
173dc     11 15 02 F6 | 	mov	arg02, local03
173e0     01 14 06 F1 | 	add	arg02, #1
173e4     13 13 02 F6 | 	mov	arg01, local05
173e8     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
173ec     10 FB 09 F2 | 	cmp	result1, local02 wz
173f0     00 2E 26 A6 |  if_e	not	local09, #0
173f4     00 2E 0E F2 | 	cmp	local09, #0 wz
173f8     00 2C 26 56 |  if_ne	not	local08, #0
173fc     16 29 CA F7 | 	test	local06, local08 wz
17400     1C 00 90 AD |  if_e	jmp	#LR__1805
17404                 | '       fillpush(x1)
17404     13 13 02 F6 | 	mov	arg01, local05
17408     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
1740c                 | '       fillpush(y + 1)
1740c     11 13 02 F6 | 	mov	arg01, local03
17410     01 12 06 F1 | 	add	arg01, #1
17414     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
17418                 | '       spanBelow := 1
17418     01 32 06 F6 | 	mov	local11, #1
1741c     50 00 90 FD | 	jmp	#LR__1806
17420                 | LR__1805
17420                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
17420     00 28 06 F6 | 	mov	local06, #0
17424     00 2A 06 F6 | 	mov	local07, #0
17428     00 32 0E F2 | 	cmp	local11, #0 wz
1742c     01 00 00 5F 
17430     3F 22 56 52 |  if_ne	cmps	local03, ##575 wc
17434     01 2A 66 46 |  if_c_and_nz	neg	local07, #1
17438     00 2A 0E F2 | 	cmp	local07, #0 wz
1743c     00 28 26 56 |  if_ne	not	local06, #0
17440     00 2C 06 F6 | 	mov	local08, #0
17444     00 2E 06 F6 | 	mov	local09, #0
17448     11 15 02 F6 | 	mov	arg02, local03
1744c     01 14 06 F1 | 	add	arg02, #1
17450     13 13 02 F6 | 	mov	arg01, local05
17454     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
17458     10 FB 09 F2 | 	cmp	result1, local02 wz
1745c     00 2E 26 56 |  if_ne	not	local09, #0
17460     00 2E 0E F2 | 	cmp	local09, #0 wz
17464     00 2C 26 56 |  if_ne	not	local08, #0
17468     16 29 CA F7 | 	test	local06, local08 wz
1746c                 | '       spanbelow := 0
1746c     00 32 06 56 |  if_ne	mov	local11, #0
17470                 | LR__1806
17470                 | '     x1++
17470     01 26 06 F1 | 	add	local05, #1
17474     3C FE 9F FD | 	jmp	#LR__1802
17478                 | LR__1807
17478                 | '   y:=fillpop()
17478     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
1747c     FD 22 02 F6 | 	mov	local03, result1
17480                 | '   x:=fillpop()
17480     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
17484     FD 24 02 F6 | 	mov	local04, result1
17488     C8 FD 9F FD | 	jmp	#LR__1800
1748c                 | LR__1808
1748c                 | LR__1809
1748c     A7 F0 03 F6 | 	mov	ptra, fp
17490     B2 00 A0 FD | 	call	#popregs_
17494                 | _hg010b_spin2_fill_ret
17494     2D 00 64 FD | 	ret
17498                 | 
17498                 | ' 'pinlow(38)    
17498                 | ' 
17498                 | ' '-- A filled circle -----------------------------------------------------
17498                 | ' 
17498                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
17498                 | _hg010b_spin2_fcircle
17498     08 4A 05 F6 | 	mov	COUNT_, #8
1749c     A8 00 A0 FD | 	call	#pushregs_
174a0     0B 1F 02 F6 | 	mov	local01, arg03
174a4     FF FF 7F FF 
174a8     FE 1F 06 FD | 	qmul	local01, ##-2
174ac     09 21 02 F6 | 	mov	local02, arg01
174b0     0A 23 02 F6 | 	mov	local03, arg02
174b4     0C 25 02 F6 | 	mov	local04, arg04
174b8                 | ' 
174b8                 | ' d:=5-4*r
174b8     0F 19 02 F6 | 	mov	arg04, local01
174bc     02 18 66 F0 | 	shl	arg04, #2
174c0     05 26 06 F6 | 	mov	local05, #5
174c4     0C 27 82 F1 | 	sub	local05, arg04
174c8                 | ' x:=0
174c8     00 28 06 F6 | 	mov	local06, #0
174cc                 | ' y:=r
174cc                 | ' da:=(-2*r+5)*4
174cc                 | ' db:=3*4
174cc     0C 2A 06 F6 | 	mov	local07, #12
174d0                 | ' repeat while (x<=y) 
174d0     18 2C 62 FD | 	getqx	local08
174d4     05 2C 06 F1 | 	add	local08, #5
174d8     02 2C 66 F0 | 	shl	local08, #2
174dc                 | LR__1810
174dc     0F 29 5A F2 | 	cmps	local06, local01 wcz
174e0     B4 00 90 1D |  if_a	jmp	#LR__1812
174e4                 | '   fastline(x0-x,x0+x,y0-y,c)
174e4     10 13 02 F6 | 	mov	arg01, local02
174e8     14 13 82 F1 | 	sub	arg01, local06
174ec     10 15 02 F6 | 	mov	arg02, local02
174f0     14 15 02 F1 | 	add	arg02, local06
174f4     11 17 02 F6 | 	mov	arg03, local03
174f8     0F 17 82 F1 | 	sub	arg03, local01
174fc     12 19 02 F6 | 	mov	arg04, local04
17500     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
17504                 | '   fastline(x0-x,x0+x,y0+y,c)
17504     10 13 02 F6 | 	mov	arg01, local02
17508     14 13 82 F1 | 	sub	arg01, local06
1750c     10 15 02 F6 | 	mov	arg02, local02
17510     14 15 02 F1 | 	add	arg02, local06
17514     11 17 02 F6 | 	mov	arg03, local03
17518     0F 17 02 F1 | 	add	arg03, local01
1751c     12 19 02 F6 | 	mov	arg04, local04
17520     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
17524                 | '   fastline(x0-y,x0+y,y0-x,c)
17524     10 13 02 F6 | 	mov	arg01, local02
17528     0F 13 82 F1 | 	sub	arg01, local01
1752c     10 15 02 F6 | 	mov	arg02, local02
17530     0F 15 02 F1 | 	add	arg02, local01
17534     11 17 02 F6 | 	mov	arg03, local03
17538     14 17 82 F1 | 	sub	arg03, local06
1753c     12 19 02 F6 | 	mov	arg04, local04
17540     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
17544                 | '   fastline(x0-y,x0+y,y0+x,c)
17544     10 13 02 F6 | 	mov	arg01, local02
17548     0F 13 82 F1 | 	sub	arg01, local01
1754c     10 15 02 F6 | 	mov	arg02, local02
17550     0F 15 02 F1 | 	add	arg02, local01
17554     11 17 02 F6 | 	mov	arg03, local03
17558     14 17 02 F1 | 	add	arg03, local06
1755c     12 19 02 F6 | 	mov	arg04, local04
17560     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
17564                 | '   if d>0 
17564     01 26 56 F2 | 	cmps	local05, #1 wc
17568     18 00 90 CD |  if_b	jmp	#LR__1811
1756c                 | '     d+=da
1756c     16 27 02 F1 | 	add	local05, local08
17570                 | '     y-=1
17570     01 1E 86 F1 | 	sub	local01, #1
17574                 | '     x+=1
17574     01 28 06 F1 | 	add	local06, #1
17578                 | '     da+=4*4
17578     10 2C 06 F1 | 	add	local08, #16
1757c                 | '     db+=2*4
1757c     08 2A 06 F1 | 	add	local07, #8
17580     58 FF 9F FD | 	jmp	#LR__1810
17584                 | LR__1811
17584                 | '   else
17584                 | '     d+=db
17584     15 27 02 F1 | 	add	local05, local07
17588                 | '     x+=1
17588     01 28 06 F1 | 	add	local06, #1
1758c                 | '     da+=2*4
1758c     08 2C 06 F1 | 	add	local08, #8
17590                 | '     db+=2*4
17590     08 2A 06 F1 | 	add	local07, #8
17594     44 FF 9F FD | 	jmp	#LR__1810
17598                 | LR__1812
17598     A7 F0 03 F6 | 	mov	ptra, fp
1759c     B2 00 A0 FD | 	call	#popregs_
175a0                 | _hg010b_spin2_fcircle_ret
175a0     2D 00 64 FD | 	ret
175a4                 | 
175a4                 | '  
175a4                 | ' '-- A circle ------------------------------------------------------------ 
175a4                 | '  
175a4                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
175a4                 | _hg010b_spin2_circle
175a4     08 4A 05 F6 | 	mov	COUNT_, #8
175a8     A8 00 A0 FD | 	call	#pushregs_
175ac     0B 1F 02 F6 | 	mov	local01, arg03
175b0     FF FF 7F FF 
175b4     FE 1F 06 FD | 	qmul	local01, ##-2
175b8     09 21 02 F6 | 	mov	local02, arg01
175bc     0A 23 02 F6 | 	mov	local03, arg02
175c0     0C 25 02 F6 | 	mov	local04, arg04
175c4                 | ' 
175c4                 | '  
175c4                 | ' d:=5-4*r
175c4     0F 19 02 F6 | 	mov	arg04, local01
175c8     02 18 66 F0 | 	shl	arg04, #2
175cc     05 26 06 F6 | 	mov	local05, #5
175d0     0C 27 82 F1 | 	sub	local05, arg04
175d4                 | ' x:=0
175d4     00 28 06 F6 | 	mov	local06, #0
175d8                 | ' y:=r
175d8                 | ' da:=(-2*r+5)*4
175d8                 | ' db:=3*4
175d8     0C 2A 06 F6 | 	mov	local07, #12
175dc                 | ' repeat while (x<=y) 
175dc     18 2C 62 FD | 	getqx	local08
175e0     05 2C 06 F1 | 	add	local08, #5
175e4     02 2C 66 F0 | 	shl	local08, #2
175e8                 | LR__1820
175e8     0F 29 5A F2 | 	cmps	local06, local01 wcz
175ec     F4 00 90 1D |  if_a	jmp	#LR__1822
175f0                 | '   putpixel(x0-x,y0-y,c)
175f0     10 13 02 F6 | 	mov	arg01, local02
175f4     14 13 82 F1 | 	sub	arg01, local06
175f8     11 15 02 F6 | 	mov	arg02, local03
175fc     0F 15 82 F1 | 	sub	arg02, local01
17600     12 17 02 F6 | 	mov	arg03, local04
17604     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
17608                 | '   putpixel(x0-x,y0+y,c)
17608     10 13 02 F6 | 	mov	arg01, local02
1760c     14 13 82 F1 | 	sub	arg01, local06
17610     11 15 02 F6 | 	mov	arg02, local03
17614     0F 15 02 F1 | 	add	arg02, local01
17618     12 17 02 F6 | 	mov	arg03, local04
1761c     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
17620                 | '   putpixel(x0+x,y0-y,c)
17620     10 13 02 F6 | 	mov	arg01, local02
17624     14 13 02 F1 | 	add	arg01, local06
17628     11 15 02 F6 | 	mov	arg02, local03
1762c     0F 15 82 F1 | 	sub	arg02, local01
17630     12 17 02 F6 | 	mov	arg03, local04
17634     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
17638                 | '   putpixel(x0+x,y0+y,c)
17638     10 13 02 F6 | 	mov	arg01, local02
1763c     14 13 02 F1 | 	add	arg01, local06
17640     11 15 02 F6 | 	mov	arg02, local03
17644     0F 15 02 F1 | 	add	arg02, local01
17648     12 17 02 F6 | 	mov	arg03, local04
1764c     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
17650                 | '   putpixel(x0-y,y0-x,c)
17650     10 13 02 F6 | 	mov	arg01, local02
17654     0F 13 82 F1 | 	sub	arg01, local01
17658     11 15 02 F6 | 	mov	arg02, local03
1765c     14 15 82 F1 | 	sub	arg02, local06
17660     12 17 02 F6 | 	mov	arg03, local04
17664     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
17668                 | '   putpixel(x0-y,y0+x,c)
17668     10 13 02 F6 | 	mov	arg01, local02
1766c     0F 13 82 F1 | 	sub	arg01, local01
17670     11 15 02 F6 | 	mov	arg02, local03
17674     14 15 02 F1 | 	add	arg02, local06
17678     12 17 02 F6 | 	mov	arg03, local04
1767c     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
17680                 | '   putpixel(x0+y,y0-x,c)
17680     10 13 02 F6 | 	mov	arg01, local02
17684     0F 13 02 F1 | 	add	arg01, local01
17688     11 15 02 F6 | 	mov	arg02, local03
1768c     14 15 82 F1 | 	sub	arg02, local06
17690     12 17 02 F6 | 	mov	arg03, local04
17694     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
17698                 | '   putpixel(x0+y,y0+x,c)
17698     10 13 02 F6 | 	mov	arg01, local02
1769c     0F 13 02 F1 | 	add	arg01, local01
176a0     11 15 02 F6 | 	mov	arg02, local03
176a4     14 15 02 F1 | 	add	arg02, local06
176a8     12 17 02 F6 | 	mov	arg03, local04
176ac     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
176b0                 | '   if d>0 
176b0     01 26 56 F2 | 	cmps	local05, #1 wc
176b4     18 00 90 CD |  if_b	jmp	#LR__1821
176b8                 | '     d+=da
176b8     16 27 02 F1 | 	add	local05, local08
176bc                 | '     y-=1
176bc     01 1E 86 F1 | 	sub	local01, #1
176c0                 | '     x+=1
176c0     01 28 06 F1 | 	add	local06, #1
176c4                 | '     da+=4*4
176c4     10 2C 06 F1 | 	add	local08, #16
176c8                 | '     db+=2*4
176c8     08 2A 06 F1 | 	add	local07, #8
176cc     18 FF 9F FD | 	jmp	#LR__1820
176d0                 | LR__1821
176d0                 | '   else
176d0                 | '     d+=db
176d0     15 27 02 F1 | 	add	local05, local07
176d4                 | '     x+=1
176d4     01 28 06 F1 | 	add	local06, #1
176d8                 | '     da+=2*4
176d8     08 2C 06 F1 | 	add	local08, #8
176dc                 | '     db+=2*4
176dc     08 2A 06 F1 | 	add	local07, #8
176e0     04 FF 9F FD | 	jmp	#LR__1820
176e4                 | LR__1822
176e4     A7 F0 03 F6 | 	mov	ptra, fp
176e8     B2 00 A0 FD | 	call	#popregs_
176ec                 | _hg010b_spin2_circle_ret
176ec     2D 00 64 FD | 	ret
176f0                 | 
176f0                 | '     
176f0                 | ' '-- A frame (an empty rectangle) ---------------------------------------
176f0                 | ' 
176f0                 | ' pub frame(x1,y1,x2,y2,c)
176f0                 | _hg010b_spin2_frame
176f0     05 4A 05 F6 | 	mov	COUNT_, #5
176f4     A8 00 A0 FD | 	call	#pushregs_
176f8     09 1F 02 F6 | 	mov	local01, arg01
176fc     0A 21 02 F6 | 	mov	local02, arg02
17700     0B 23 02 F6 | 	mov	local03, arg03
17704     0C 25 02 F6 | 	mov	local04, arg04
17708     0D 27 02 F6 | 	mov	local05, arg05
1770c                 | ' 
1770c                 | ' fastline(x1,x2,y1,c)
1770c     0F 13 02 F6 | 	mov	arg01, local01
17710     11 15 02 F6 | 	mov	arg02, local03
17714     10 17 02 F6 | 	mov	arg03, local02
17718     13 19 02 F6 | 	mov	arg04, local05
1771c     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
17720                 | ' fastline(x1,x2,y2,c)
17720     0F 13 02 F6 | 	mov	arg01, local01
17724     11 15 02 F6 | 	mov	arg02, local03
17728     12 17 02 F6 | 	mov	arg03, local04
1772c     13 19 02 F6 | 	mov	arg04, local05
17730     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
17734                 | ' line(x1,y1,x1,y2,c)
17734     0F 13 02 F6 | 	mov	arg01, local01
17738     10 15 02 F6 | 	mov	arg02, local02
1773c     0F 17 02 F6 | 	mov	arg03, local01
17740     12 19 02 F6 | 	mov	arg04, local04
17744     13 1B 02 F6 | 	mov	arg05, local05
17748                 | ' draw(x1,y1,x2,y2,c)
17748     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
1774c                 | ' line(x2,y1,x2,y2,c)
1774c     11 13 02 F6 | 	mov	arg01, local03
17750     10 15 02 F6 | 	mov	arg02, local02
17754     11 17 02 F6 | 	mov	arg03, local03
17758     12 19 02 F6 | 	mov	arg04, local04
1775c     13 1B 02 F6 | 	mov	arg05, local05
17760                 | ' draw(x1,y1,x2,y2,c)
17760     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
17764     A7 F0 03 F6 | 	mov	ptra, fp
17768     B2 00 A0 FD | 	call	#popregs_
1776c                 | _hg010b_spin2_frame_ret
1776c     2D 00 64 FD | 	ret
17770                 | 
17770                 | ' 
17770                 | ' '-- A box (a filled rectangle) ----------------------------------------
17770                 | ' 
17770                 | ' pub box(x1,y1,x2,y2,c) |yy
17770                 | _hg010b_spin2_box
17770     06 4A 05 F6 | 	mov	COUNT_, #6
17774     A8 00 A0 FD | 	call	#pushregs_
17778     09 1F 02 F6 | 	mov	local01, arg01
1777c     0A 21 02 F6 | 	mov	local02, arg02
17780     0B 23 02 F6 | 	mov	local03, arg03
17784     0C 25 02 F6 | 	mov	local04, arg04
17788     0D 27 02 F6 | 	mov	local05, arg05
1778c                 | ' 
1778c                 | ' repeat yy from y1 to y2
1778c     10 25 52 F2 | 	cmps	local04, local02 wc
17790     01 28 86 F6 | 	negc	local06, #1
17794     14 25 02 F1 | 	add	local04, local06
17798                 | LR__1830
17798                 | '   fastline(x1,x2,yy,c)
17798     0F 13 02 F6 | 	mov	arg01, local01
1779c     11 15 02 F6 | 	mov	arg02, local03
177a0     13 19 02 F6 | 	mov	arg04, local05
177a4     10 17 02 F6 | 	mov	arg03, local02
177a8     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
177ac     14 21 02 F1 | 	add	local02, local06
177b0     12 21 0A F2 | 	cmp	local02, local04 wz
177b4     E0 FF 9F 5D |  if_ne	jmp	#LR__1830
177b8     A7 F0 03 F6 | 	mov	ptra, fp
177bc     B2 00 A0 FD | 	call	#popregs_
177c0                 | _hg010b_spin2_box_ret
177c0     2D 00 64 FD | 	ret
177c4                 | 
177c4                 | '       
177c4                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
177c4                 | _hg010b_spin2_putcharxycgf
177c4                 | ' 
177c4                 | '  
177c4                 | ' repeat yy from 0 to 15
177c4     00 00 06 F6 | 	mov	_var01, #0
177c8     97 8C 48 FB | 	callpa	#(@LR__1842-@LR__1840)>>2,fcache_load_ptr_
177cc                 | LR__1840
177cc                 | ' 
177cc                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
177cc     91 E4 05 F1 | 	add	objptr, #145
177d0     F2 02 02 FB | 	rdlong	_var02, objptr
177d4     0A 02 66 F0 | 	shl	_var02, #10
177d8     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
177dc     01 05 02 F1 | 	add	_var03, _var02
177e0     0B 03 02 F6 | 	mov	_var02, arg03
177e4     04 02 66 F0 | 	shl	_var02, #4
177e8     01 05 02 F1 | 	add	_var03, _var02
177ec     00 05 02 F1 | 	add	_var03, _var01
177f0     02 05 C2 FA | 	rdbyte	_var03, _var03
177f4                 | '   asm
177f4     00 04 0E F4 | 	testb	_var03, #0 wz
177f8     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
177fc     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
17800     01 04 0E F4 | 	testb	_var03, #1 wz
17804     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
17808     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
1780c     02 04 0E F4 | 	testb	_var03, #2 wz
17810     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
17814     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
17818     03 04 0E F4 | 	testb	_var03, #3 wz
1781c     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
17820     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
17824     04 04 0E F4 | 	testb	_var03, #4 wz
17828     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
1782c     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
17830     05 04 0E F4 | 	testb	_var03, #5 wz
17834     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
17838     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
1783c     06 04 0E F4 | 	testb	_var03, #6 wz
17840     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
17844     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
17848     07 04 0E F4 | 	testb	_var03, #7 wz
1784c     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
17850     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
17854                 | '   
17854                 | '   ccc[0]:=c1
17854     99 E5 05 F1 | 	add	objptr, #409
17858     F2 06 62 FC | 	wrlong	_var04, objptr
1785c                 | '   ccc[1]:=c2 
1785c     04 E4 05 F1 | 	add	objptr, #4
17860     F2 08 62 FC | 	wrlong	_var05, objptr
17864                 | '   long[mailbox0][2]:=8
17864     49 E4 85 F1 | 	sub	objptr, #73
17868     F2 04 02 FB | 	rdlong	_var03, objptr
1786c     08 04 06 F1 | 	add	_var03, #8
17870     02 11 68 FC | 	wrlong	#8, _var03
17874                 | '   long[mailbox0][1]:=@ccc
17874     45 E4 05 F1 | 	add	objptr, #69
17878     F2 04 02 F6 | 	mov	_var03, objptr
1787c     45 E4 85 F1 | 	sub	objptr, #69
17880     F2 02 02 FB | 	rdlong	_var02, objptr
17884     04 02 06 F1 | 	add	_var02, #4
17888     01 05 62 FC | 	wrlong	_var03, _var02
1788c                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
1788c     0C E5 85 F1 | 	sub	objptr, #268
17890     F2 04 02 FB | 	rdlong	_var03, objptr
17894     0A 03 02 F6 | 	mov	_var02, arg02
17898     00 03 02 F1 | 	add	_var02, _var01
1789c     0A 02 66 F0 | 	shl	_var02, #10
178a0     09 0B 02 F6 | 	mov	_var06, arg01
178a4     02 0A 66 F0 | 	shl	_var06, #2
178a8     05 03 02 F1 | 	add	_var02, _var06
178ac     01 05 02 F1 | 	add	_var03, _var02
178b0     00 00 78 FF 
178b4     00 04 06 F1 | 	add	_var03, ##-268435456
178b8     0C E5 05 F1 | 	add	objptr, #268
178bc     F2 0A 02 FB | 	rdlong	_var06, objptr
178c0     05 05 62 FC | 	wrlong	_var03, _var06
178c4                 | '   repeat
178c4                 | LR__1841
178c4     F2 04 02 FB | 	rdlong	_var03, objptr
178c8     02 03 02 FB | 	rdlong	_var02, _var03
178cc     00 02 56 F2 | 	cmps	_var02, #0 wc
178d0     F0 FF 9F CD |  if_b	jmp	#LR__1841
178d4     E5 E5 85 F1 | 	sub	objptr, #485
178d8     01 00 06 F1 | 	add	_var01, #1
178dc     10 00 56 F2 | 	cmps	_var01, #16 wc
178e0     E8 FE 9F CD |  if_b	jmp	#LR__1840
178e4                 | LR__1842
178e4                 | _hg010b_spin2_putcharxycgf_ret
178e4     2D 00 64 FD | 	ret
178e8                 | 
178e8                 | ' 
178e8                 | ' 
178e8                 | ' '**********************************************************************r***
178e8                 | ' '                                                                        *
178e8                 | ' ' Font related functions                                                 *
178e8                 | ' '                                                                        *
178e8                 | ' '*************************************************************************
178e8                 | ' 
178e8                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
178e8                 | ' 
178e8                 | ' pub setfontfamily(afontnum)
178e8                 | _hg010b_spin2_setfontfamily
178e8                 | ' 
178e8                 | ' font_family:=afontnum
178e8     91 E4 05 F1 | 	add	objptr, #145
178ec     F2 12 62 FC | 	wrlong	arg01, objptr
178f0     91 E4 85 F1 | 	sub	objptr, #145
178f4                 | ' 'if afontnum==8
178f4                 | ' '  font_ptr:=@amiga_font
178f4                 | ' 
178f4                 | ' if afontnum==4
178f4     04 12 0E F2 | 	cmp	arg01, #4 wz
178f8                 | '   font_ptr:=@st_font
178f8     08 00 00 AF 
178fc     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
17900     04 E4 05 A1 |  if_e	add	objptr, #4
17904     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
17908     04 E4 85 A1 |  if_e	sub	objptr, #4
1790c     08 00 00 AF 
17910     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
17914                 | ' if afontnum==0
17914     00 12 0E F2 | 	cmp	arg01, #0 wz
17918                 | '   font_ptr:=@vga_font
17918     04 E4 05 A1 |  if_e	add	objptr, #4
1791c     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
17920     04 E4 85 A1 |  if_e	sub	objptr, #4
17924                 | _hg010b_spin2_setfontfamily_ret
17924     2D 00 64 FD | 	ret
17928                 | 
17928                 | ' 
17928                 | ' '*************************************************************************
17928                 | ' '                                                                        *
17928                 | ' '  Cursor functions                                                      *
17928                 | ' '                                                                        *
17928                 | ' '*************************************************************************
17928                 | ' 
17928                 | ' 
17928                 | ' pub setcursorpos(x,y)
17928                 | _hg010b_spin2_setcursorpos
17928                 | ' 
17928                 | ' ''---------- Set the (x,y) position of cursor
17928                 | ' 
17928                 | ' cursor_x:=x
17928     38 E4 05 F1 | 	add	objptr, #56
1792c     F2 12 52 FC | 	wrword	arg01, objptr
17930                 | ' cursor_y:=y
17930     02 E4 05 F1 | 	add	objptr, #2
17934     F2 14 42 FC | 	wrbyte	arg02, objptr
17938                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
17938     02 E4 85 F1 | 	sub	objptr, #2
1793c     F2 14 E2 FA | 	rdword	arg02, objptr
17940     02 14 66 F0 | 	shl	arg02, #2
17944     02 E4 05 F1 | 	add	objptr, #2
17948     F2 16 C2 FA | 	rdbyte	arg03, objptr
1794c     3A E4 85 F1 | 	sub	objptr, #58
17950     04 16 66 F0 | 	shl	arg03, #4
17954     11 12 06 F6 | 	mov	arg01, #17
17958     70 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1795c                 | _hg010b_spin2_setcursorpos_ret
1795c     2D 00 64 FD | 	ret
17960                 | 
17960                 | ' 
17960                 | ' '*************************************************************************
17960                 | ' '                                                                        *
17960                 | ' '  VBlank functions                                                      *
17960                 | ' '                                                                        *
17960                 | ' '*************************************************************************
17960                 | ' 
17960                 | ' pub waitvbl(amount) | i
17960                 | _hg010b_spin2_waitvbl
17960     03 4A 05 F6 | 	mov	COUNT_, #3
17964     A8 00 A0 FD | 	call	#pushregs_
17968     09 1F 02 F6 | 	mov	local01, arg01
1796c                 | ' 
1796c                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
1796c                 | ' 
1796c                 | ' repeat i from 1 to amount
1796c     01 20 06 F6 | 	mov	local02, #1
17970     01 1E 56 F2 | 	cmps	local01, #1 wc
17974     01 22 86 F6 | 	negc	local03, #1
17978     11 1F 02 F1 | 	add	local01, local03
1797c                 | LR__1850
1797c                 | '   repeat until vblank==0
1797c                 | LR__1851
1797c     45 E4 05 F1 | 	add	objptr, #69
17980     F2 12 0A FB | 	rdlong	arg01, objptr wz
17984     45 E4 85 F1 | 	sub	objptr, #69
17988     0C 00 90 AD |  if_e	jmp	#LR__1852
1798c                 | '     waitus(100)
1798c     64 12 06 F6 | 	mov	arg01, #100
17990     80 16 B0 FD | 	call	#__system___waitus
17994     E4 FF 9F FD | 	jmp	#LR__1851
17998                 | LR__1852
17998                 | '   repeat until vblank==1
17998                 | LR__1853
17998     45 E4 05 F1 | 	add	objptr, #69
1799c     F2 12 02 FB | 	rdlong	arg01, objptr
179a0     45 E4 85 F1 | 	sub	objptr, #69
179a4     01 12 0E F2 | 	cmp	arg01, #1 wz
179a8     0C 00 90 AD |  if_e	jmp	#LR__1854
179ac                 | '     waitus(100)
179ac     64 12 06 F6 | 	mov	arg01, #100
179b0     60 16 B0 FD | 	call	#__system___waitus
179b4     E0 FF 9F FD | 	jmp	#LR__1853
179b8                 | LR__1854
179b8     11 21 02 F1 | 	add	local02, local03
179bc     0F 21 0A F2 | 	cmp	local02, local01 wz
179c0     B8 FF 9F 5D |  if_ne	jmp	#LR__1850
179c4     A7 F0 03 F6 | 	mov	ptra, fp
179c8     B2 00 A0 FD | 	call	#popregs_
179cc                 | _hg010b_spin2_waitvbl_ret
179cc     2D 00 64 FD | 	ret
179d0                 | 
179d0                 | ' 
179d0                 | ' 
179d0                 | ' pub cls(fc,bc)   :c,i
179d0                 | _hg010b_spin2_cls
179d0     02 4A 05 F6 | 	mov	COUNT_, #2
179d4     A8 00 A0 FD | 	call	#pushregs_
179d8     09 1F 02 F6 | 	mov	local01, arg01
179dc     0A 21 02 F6 | 	mov	local02, arg02
179e0                 | ' 
179e0                 | ' c:=bc
179e0                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
179e0     D9 E4 05 F1 | 	add	objptr, #217
179e4     F2 12 02 FB | 	rdlong	arg01, objptr
179e8     A5 E4 85 F1 | 	sub	objptr, #165
179ec     F2 16 02 FB | 	rdlong	arg03, objptr
179f0     02 16 66 F0 | 	shl	arg03, #2
179f4     10 15 02 F6 | 	mov	arg02, local02
179f8     00 18 06 F6 | 	mov	arg04, #0
179fc     01 1A 06 F6 | 	mov	arg05, #1
17a00     0B 00 00 FF 
17a04     8C E4 05 F1 | 	add	objptr, ##5772
17a08     F0 08 B0 FD | 	call	#_psram_spin2_fill
17a0c                 | ' setwritecolors(fc,bc)
17a0c                 | ' 
17a0c                 | ' write_color:=ff
17a0c     0B 00 00 FF 
17a10     83 E4 85 F1 | 	sub	objptr, ##5763
17a14     F2 1E 62 FC | 	wrlong	local01, objptr
17a18                 | ' write_background:=bb
17a18     04 E4 05 F1 | 	add	objptr, #4
17a1c     F2 20 62 FC | 	wrlong	local02, objptr
17a20                 | ' cursor_x:=0
17a20     09 E4 85 F1 | 	sub	objptr, #9
17a24     F2 00 58 FC | 	wrword	#0, objptr
17a28                 | ' cursor_y:=0
17a28     02 E4 05 F1 | 	add	objptr, #2
17a2c     F2 00 48 FC | 	wrbyte	#0, objptr
17a30                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
17a30     02 E4 85 F1 | 	sub	objptr, #2
17a34     F2 14 E2 FA | 	rdword	arg02, objptr
17a38     02 14 66 F0 | 	shl	arg02, #2
17a3c     02 E4 05 F1 | 	add	objptr, #2
17a40     F2 16 C2 FA | 	rdbyte	arg03, objptr
17a44     3A E4 85 F1 | 	sub	objptr, #58
17a48     04 16 66 F0 | 	shl	arg03, #4
17a4c     11 12 06 F6 | 	mov	arg01, #17
17a50     78 F2 BF FD | 	call	#_hg010b_spin2_setspritepos
17a54                 | ' setcursorcolor(fc)
17a54     0F 13 02 F6 | 	mov	arg01, local01
17a58     2C EF BF FD | 	call	#_hg010b_spin2_setcursorcolor
17a5c     10 FB 01 F6 | 	mov	result1, local02
17a60     00 FC 05 F6 | 	mov	result2, #0
17a64     A7 F0 03 F6 | 	mov	ptra, fp
17a68     B2 00 A0 FD | 	call	#popregs_
17a6c                 | _hg010b_spin2_cls_ret
17a6c     2D 00 64 FD | 	ret
17a70                 | 
17a70                 | ' 
17a70                 | ' ''---------- Output a char at the cursor position, move the cursor 
17a70                 | ' 
17a70                 | ' pub putchar(achar) | c,x,y,l,newcpl
17a70                 | _hg010b_spin2_putchar
17a70     01 4A 05 F6 | 	mov	COUNT_, #1
17a74     A8 00 A0 FD | 	call	#pushregs_
17a78     09 1F 02 F6 | 	mov	local01, arg01
17a7c                 | ' 
17a7c                 | ' if achar==10
17a7c     0A 1E 0E F2 | 	cmp	local01, #10 wz
17a80                 | '   crlf()
17a80     68 03 B0 AD |  if_e	call	#_hg010b_spin2_crlf
17a84                 | ' if achar==9
17a84     09 1E 0E F2 | 	cmp	local01, #9 wz
17a88     18 00 90 5D |  if_ne	jmp	#LR__1860
17a8c                 | '   cursor_x:=(cursor_x& %11110000)+16
17a8c     38 E4 05 F1 | 	add	objptr, #56
17a90     F2 16 E2 FA | 	rdword	arg03, objptr
17a94     F0 16 06 F5 | 	and	arg03, #240
17a98     10 16 06 F1 | 	add	arg03, #16
17a9c     F2 16 52 FC | 	wrword	arg03, objptr
17aa0     38 E4 85 F1 | 	sub	objptr, #56
17aa4                 | LR__1860
17aa4                 | '   
17aa4                 | ' if (achar<>9) && (achar<>10) 
17aa4     09 1E 0E F2 | 	cmp	local01, #9 wz
17aa8     0A 1E 0E 52 |  if_ne	cmp	local01, #10 wz
17aac     44 00 90 AD |  if_e	jmp	#LR__1861
17ab0                 | '   putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
17ab0     38 E4 05 F1 | 	add	objptr, #56
17ab4     F2 12 E2 FA | 	rdword	arg01, objptr
17ab8     02 E4 05 F1 | 	add	objptr, #2
17abc     F2 14 C2 FA | 	rdbyte	arg02, objptr
17ac0     04 14 66 F0 | 	shl	arg02, #4
17ac4     03 E4 05 F1 | 	add	objptr, #3
17ac8     F2 18 02 FB | 	rdlong	arg04, objptr
17acc     04 E4 05 F1 | 	add	objptr, #4
17ad0     F2 1A 02 FB | 	rdlong	arg05, objptr
17ad4     41 E4 85 F1 | 	sub	objptr, #65
17ad8     0F 17 02 F6 | 	mov	arg03, local01
17adc     E4 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
17ae0                 | '   cursor_x+=2
17ae0     38 E4 05 F1 | 	add	objptr, #56
17ae4     F2 1E E2 FA | 	rdword	local01, objptr
17ae8     02 1E 06 F1 | 	add	local01, #2
17aec     F2 1E 52 FC | 	wrword	local01, objptr
17af0     38 E4 85 F1 | 	sub	objptr, #56
17af4                 | LR__1861
17af4                 | ' 
17af4                 | ' if cursor_x>=256
17af4     38 E4 05 F1 | 	add	objptr, #56
17af8     F2 1E E2 FA | 	rdword	local01, objptr
17afc     38 E4 85 F1 | 	sub	objptr, #56
17b00     00 1F 56 F2 | 	cmps	local01, #256 wc
17b04     64 00 90 CD |  if_b	jmp	#LR__1863
17b08                 | '   cursor_x:=0
17b08     38 E4 05 F1 | 	add	objptr, #56
17b0c     F2 00 58 FC | 	wrword	#0, objptr
17b10                 | '   cursor_y+=1
17b10     02 E4 05 F1 | 	add	objptr, #2
17b14     F2 1E C2 FA | 	rdbyte	local01, objptr
17b18     01 1E 06 F1 | 	add	local01, #1
17b1c     F2 1E 42 FC | 	wrbyte	local01, objptr
17b20                 | '   if cursor_y>st_lines-1
17b20     C3 E4 05 F1 | 	add	objptr, #195
17b24     F2 1E 02 FB | 	rdlong	local01, objptr
17b28     01 1E 86 F1 | 	sub	local01, #1
17b2c     C3 E4 85 F1 | 	sub	objptr, #195
17b30     F2 16 C2 FA | 	rdbyte	arg03, objptr
17b34     3A E4 85 F1 | 	sub	objptr, #58
17b38     0F 17 5A F2 | 	cmps	arg03, local01 wcz
17b3c     2C 00 90 ED |  if_be	jmp	#LR__1862
17b40                 | '     scrollup()
17b40     00 12 06 F6 | 	mov	arg01, #0
17b44     01 00 00 FF 
17b48     40 14 06 F6 | 	mov	arg02, ##576
17b4c     10 16 06 F6 | 	mov	arg03, #16
17b50     9C 01 B0 FD | 	call	#_hg010b_spin2_scrollup
17b54                 | '     cursor_y:=st_lines-1
17b54     FD E4 05 F1 | 	add	objptr, #253
17b58     F2 1E 02 FB | 	rdlong	local01, objptr
17b5c     01 1E 86 F1 | 	sub	local01, #1
17b60     C3 E4 85 F1 | 	sub	objptr, #195
17b64     F2 1E 42 FC | 	wrbyte	local01, objptr
17b68     3A E4 85 F1 | 	sub	objptr, #58
17b6c                 | LR__1862
17b6c                 | LR__1863
17b6c                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
17b6c     38 E4 05 F1 | 	add	objptr, #56
17b70     F2 14 E2 FA | 	rdword	arg02, objptr
17b74     02 14 66 F0 | 	shl	arg02, #2
17b78     02 E4 05 F1 | 	add	objptr, #2
17b7c     F2 16 C2 FA | 	rdbyte	arg03, objptr
17b80     3A E4 85 F1 | 	sub	objptr, #58
17b84     04 16 66 F0 | 	shl	arg03, #4
17b88     11 12 06 F6 | 	mov	arg01, #17
17b8c     3C F1 BF FD | 	call	#_hg010b_spin2_setspritepos
17b90     A7 F0 03 F6 | 	mov	ptra, fp
17b94     B2 00 A0 FD | 	call	#popregs_
17b98                 | _hg010b_spin2_putchar_ret
17b98     2D 00 64 FD | 	ret
17b9c                 | 
17b9c                 | '     
17b9c                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
17b9c                 | ' 
17b9c                 | ' pub putchar2(achar) | c,x,y,l,newcpl
17b9c                 | _hg010b_spin2_putchar2
17b9c     01 4A 05 F6 | 	mov	COUNT_, #1
17ba0     A8 00 A0 FD | 	call	#pushregs_
17ba4                 | ' 
17ba4                 | ' putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
17ba4     38 E4 05 F1 | 	add	objptr, #56
17ba8     F2 1E E2 FA | 	rdword	local01, objptr
17bac     02 E4 05 F1 | 	add	objptr, #2
17bb0     F2 14 C2 FA | 	rdbyte	arg02, objptr
17bb4     04 14 66 F0 | 	shl	arg02, #4
17bb8     09 17 02 F6 | 	mov	arg03, arg01
17bbc     03 E4 05 F1 | 	add	objptr, #3
17bc0     F2 18 02 FB | 	rdlong	arg04, objptr
17bc4     04 E4 05 F1 | 	add	objptr, #4
17bc8     F2 1A 02 FB | 	rdlong	arg05, objptr
17bcc     41 E4 85 F1 | 	sub	objptr, #65
17bd0     0F 13 02 F6 | 	mov	arg01, local01
17bd4     EC FB BF FD | 	call	#_hg010b_spin2_putcharxycgf
17bd8                 | ' cursor_x+=2
17bd8     38 E4 05 F1 | 	add	objptr, #56
17bdc     F2 1E E2 FA | 	rdword	local01, objptr
17be0     02 1E 06 F1 | 	add	local01, #2
17be4     F2 1E 52 FC | 	wrword	local01, objptr
17be8                 | ' if cursor_x>=256
17be8     F2 1E E2 FA | 	rdword	local01, objptr
17bec     38 E4 85 F1 | 	sub	objptr, #56
17bf0     00 1F 56 F2 | 	cmps	local01, #256 wc
17bf4     64 00 90 CD |  if_b	jmp	#LR__1871
17bf8                 | '   cursor_x:=0
17bf8     38 E4 05 F1 | 	add	objptr, #56
17bfc     F2 00 58 FC | 	wrword	#0, objptr
17c00                 | '   cursor_y+=1
17c00     02 E4 05 F1 | 	add	objptr, #2
17c04     F2 1E C2 FA | 	rdbyte	local01, objptr
17c08     01 1E 06 F1 | 	add	local01, #1
17c0c     F2 1E 42 FC | 	wrbyte	local01, objptr
17c10                 | '   if cursor_y>st_lines-1
17c10     C3 E4 05 F1 | 	add	objptr, #195
17c14     F2 1E 02 FB | 	rdlong	local01, objptr
17c18     01 1E 86 F1 | 	sub	local01, #1
17c1c     C3 E4 85 F1 | 	sub	objptr, #195
17c20     F2 1A C2 FA | 	rdbyte	arg05, objptr
17c24     3A E4 85 F1 | 	sub	objptr, #58
17c28     0F 1B 5A F2 | 	cmps	arg05, local01 wcz
17c2c     2C 00 90 ED |  if_be	jmp	#LR__1870
17c30                 | '     scrollup()
17c30     00 12 06 F6 | 	mov	arg01, #0
17c34     01 00 00 FF 
17c38     40 14 06 F6 | 	mov	arg02, ##576
17c3c     10 16 06 F6 | 	mov	arg03, #16
17c40     AC 00 B0 FD | 	call	#_hg010b_spin2_scrollup
17c44                 | '     cursor_y:=st_lines-1
17c44     FD E4 05 F1 | 	add	objptr, #253
17c48     F2 1E 02 FB | 	rdlong	local01, objptr
17c4c     01 1E 86 F1 | 	sub	local01, #1
17c50     C3 E4 85 F1 | 	sub	objptr, #195
17c54     F2 1E 42 FC | 	wrbyte	local01, objptr
17c58     3A E4 85 F1 | 	sub	objptr, #58
17c5c                 | LR__1870
17c5c                 | LR__1871
17c5c                 | ' setspritepos(17,4*cursor_x,16*cursor_y ) 
17c5c     38 E4 05 F1 | 	add	objptr, #56
17c60     F2 14 E2 FA | 	rdword	arg02, objptr
17c64     02 14 66 F0 | 	shl	arg02, #2
17c68     02 E4 05 F1 | 	add	objptr, #2
17c6c     F2 16 C2 FA | 	rdbyte	arg03, objptr
17c70     3A E4 85 F1 | 	sub	objptr, #58
17c74     04 16 66 F0 | 	shl	arg03, #4
17c78     11 12 06 F6 | 	mov	arg01, #17
17c7c     4C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
17c80     A7 F0 03 F6 | 	mov	ptra, fp
17c84     B2 00 A0 FD | 	call	#popregs_
17c88                 | _hg010b_spin2_putchar2_ret
17c88     2D 00 64 FD | 	ret
17c8c                 | 
17c8c                 | ' ''--------- Output a string at the cursor position, move the cursor  
17c8c                 | ' 
17c8c                 | ' pub write(text) | iii,c,ncx,ncy
17c8c                 | _hg010b_spin2_write
17c8c     04 4A 05 F6 | 	mov	COUNT_, #4
17c90     A8 00 A0 FD | 	call	#pushregs_
17c94     09 1F 02 F6 | 	mov	local01, arg01
17c98                 | ' 
17c98                 | ' repeat iii from 0 to strsize(text)-1
17c98     00 20 06 F6 | 	mov	local02, #0
17c9c     0F 13 02 F6 | 	mov	arg01, local01
17ca0     09 23 02 F6 | 	mov	local03, arg01
17ca4     97 06 48 FB | 	callpa	#(@LR__1881-@LR__1880)>>2,fcache_load_ptr_
17ca8                 | LR__1880
17ca8     11 FB C9 FA | 	rdbyte	result1, local03 wz
17cac     01 22 06 51 |  if_ne	add	local03, #1
17cb0     F4 FF 9F 5D |  if_ne	jmp	#LR__1880
17cb4                 | LR__1881
17cb4     09 23 82 F1 | 	sub	local03, arg01
17cb8     01 22 86 F1 | 	sub	local03, #1
17cbc     00 22 56 F2 | 	cmps	local03, #0 wc
17cc0     01 24 86 F6 | 	negc	local04, #1
17cc4     12 23 02 F1 | 	add	local03, local04
17cc8                 | LR__1882
17cc8                 | '   putchar2(byte[text+iii])
17cc8     0F 13 02 F6 | 	mov	arg01, local01
17ccc     10 13 02 F1 | 	add	arg01, local02
17cd0     09 13 C2 FA | 	rdbyte	arg01, arg01
17cd4     C4 FE BF FD | 	call	#_hg010b_spin2_putchar2
17cd8     12 21 02 F1 | 	add	local02, local04
17cdc     11 21 0A F2 | 	cmp	local02, local03 wz
17ce0     E4 FF 9F 5D |  if_ne	jmp	#LR__1882
17ce4     A7 F0 03 F6 | 	mov	ptra, fp
17ce8     B2 00 A0 FD | 	call	#popregs_
17cec                 | _hg010b_spin2_write_ret
17cec     2D 00 64 FD | 	ret
17cf0                 | 
17cf0                 | ' 
17cf0                 | ' ''-----------  Scroll the screen one line up
17cf0                 | ' 
17cf0                 | ' pub scrollup(start=0, end=576 , amount=16) | i
17cf0                 | _hg010b_spin2_scrollup
17cf0     01 4A 05 F6 | 	mov	COUNT_, #1
17cf4     A8 00 A0 FD | 	call	#pushregs_
17cf8                 | ' 	
17cf8                 | ' repeat i from 0 to 559 
17cf8     00 1E 06 F6 | 	mov	local01, #0
17cfc                 | LR__1890
17cfc     F5 E4 05 F1 | 	add	objptr, #245
17d00     F2 18 02 FB | 	rdlong	arg04, objptr
17d04     1C E4 85 F1 | 	sub	objptr, #28
17d08     F2 14 02 FB | 	rdlong	arg02, objptr
17d0c     0F 13 02 F6 | 	mov	arg01, local01
17d10     10 12 06 F1 | 	add	arg01, #16
17d14     02 12 66 F0 | 	shl	arg01, #2
17d18     14 E4 05 F1 | 	add	objptr, #20
17d1c     F2 16 02 FB | 	rdlong	arg03, objptr
17d20     0B 13 02 FD | 	qmul	arg01, arg03
17d24                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
17d24     F6 03 00 FF 
17d28     00 12 06 F6 | 	mov	arg01, ##519168
17d2c     0C 13 82 F1 | 	sub	arg01, arg04
17d30     02 16 66 F0 | 	shl	arg03, #2
17d34     0A 00 00 FF 
17d38     D3 E5 05 F1 | 	add	objptr, ##5587
17d3c     18 18 62 FD | 	getqx	arg04
17d40     0C 15 02 F1 | 	add	arg02, arg04
17d44     7C 04 B0 FD | 	call	#_psram_spin2_read1
17d48     0A 00 00 FF 
17d4c     CB E5 85 F1 | 	sub	objptr, ##5579
17d50     F2 18 02 FB | 	rdlong	arg04, objptr
17d54     1C E4 85 F1 | 	sub	objptr, #28
17d58     F2 14 02 FB | 	rdlong	arg02, objptr
17d5c     0F 13 02 F6 | 	mov	arg01, local01
17d60     02 12 66 F0 | 	shl	arg01, #2
17d64     14 E4 05 F1 | 	add	objptr, #20
17d68     F2 16 02 FB | 	rdlong	arg03, objptr
17d6c     0B 13 02 FD | 	qmul	arg01, arg03
17d70                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
17d70     F6 03 00 FF 
17d74     00 12 06 F6 | 	mov	arg01, ##519168
17d78     0C 13 82 F1 | 	sub	arg01, arg04
17d7c     02 16 66 F0 | 	shl	arg03, #2
17d80     0A 00 00 FF 
17d84     D3 E5 05 F1 | 	add	objptr, ##5587
17d88     18 18 62 FD | 	getqx	arg04
17d8c     0C 15 02 F1 | 	add	arg02, arg04
17d90     CC 04 B0 FD | 	call	#_psram_spin2_write
17d94     0B 00 00 FF 
17d98     C0 E4 85 F1 | 	sub	objptr, ##5824
17d9c     01 1E 06 F1 | 	add	local01, #1
17da0     01 00 00 FF 
17da4     30 1E 56 F2 | 	cmps	local01, ##560 wc
17da8     50 FF 9F CD |  if_b	jmp	#LR__1890
17dac                 | ' 
17dac                 | ' repeat i from 560 to 575
17dac     01 00 00 FF 
17db0     30 1E 06 F6 | 	mov	local01, ##560
17db4                 | LR__1891
17db4                 | '    fastline(0,1023,i,write_background)   
17db4     41 E4 05 F1 | 	add	objptr, #65
17db8     F2 18 02 FB | 	rdlong	arg04, objptr
17dbc     41 E4 85 F1 | 	sub	objptr, #65
17dc0     00 12 06 F6 | 	mov	arg01, #0
17dc4     09 14 CE F9 | 	bmask	arg02, #9
17dc8     0F 17 02 F6 | 	mov	arg03, local01
17dcc     2C F1 BF FD | 	call	#_hg010b_spin2_fastline
17dd0     01 1E 06 F1 | 	add	local01, #1
17dd4     01 00 00 FF 
17dd8     40 1E 16 F2 | 	cmp	local01, ##576 wc
17ddc     D4 FF 9F CD |  if_b	jmp	#LR__1891
17de0     A7 F0 03 F6 | 	mov	ptra, fp
17de4     B2 00 A0 FD | 	call	#popregs_
17de8                 | _hg010b_spin2_scrollup_ret
17de8     2D 00 64 FD | 	ret
17dec                 | 
17dec                 | ' 
17dec                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
17dec                 | ' 
17dec                 | ' pub crlf()
17dec                 | _hg010b_spin2_crlf
17dec                 | ' 
17dec                 | ' cursor_x:=leading_spaces*2
17dec     01 00 00 FF 
17df0     B2 E4 05 F1 | 	add	objptr, ##690
17df4     F2 16 02 FB | 	rdlong	arg03, objptr
17df8     01 16 66 F0 | 	shl	arg03, #1
17dfc     01 00 00 FF 
17e00     7A E4 85 F1 | 	sub	objptr, ##634
17e04     F2 16 52 FC | 	wrword	arg03, objptr
17e08                 | ' cursor_y+=1
17e08     02 E4 05 F1 | 	add	objptr, #2
17e0c     F2 16 C2 FA | 	rdbyte	arg03, objptr
17e10     01 16 06 F1 | 	add	arg03, #1
17e14     F2 16 42 FC | 	wrbyte	arg03, objptr
17e18                 | ' if cursor_y>st_lines-1
17e18     C3 E4 05 F1 | 	add	objptr, #195
17e1c     F2 16 02 FB | 	rdlong	arg03, objptr
17e20     01 16 86 F1 | 	sub	arg03, #1
17e24     C3 E4 85 F1 | 	sub	objptr, #195
17e28     F2 14 C2 FA | 	rdbyte	arg02, objptr
17e2c     3A E4 85 F1 | 	sub	objptr, #58
17e30     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
17e34     2C 00 90 ED |  if_be	jmp	#LR__1900
17e38                 | '   scrollup()
17e38     00 12 06 F6 | 	mov	arg01, #0
17e3c     01 00 00 FF 
17e40     40 14 06 F6 | 	mov	arg02, ##576
17e44     10 16 06 F6 | 	mov	arg03, #16
17e48     A4 FE BF FD | 	call	#_hg010b_spin2_scrollup
17e4c                 | '   cursor_y:=st_lines-1
17e4c     FD E4 05 F1 | 	add	objptr, #253
17e50     F2 16 02 FB | 	rdlong	arg03, objptr
17e54     01 16 86 F1 | 	sub	arg03, #1
17e58     C3 E4 85 F1 | 	sub	objptr, #195
17e5c     F2 16 42 FC | 	wrbyte	arg03, objptr
17e60     3A E4 85 F1 | 	sub	objptr, #58
17e64                 | LR__1900
17e64                 | ' setspritepos(17,4*cursor_x,16*cursor_y )  
17e64     38 E4 05 F1 | 	add	objptr, #56
17e68     F2 14 E2 FA | 	rdword	arg02, objptr
17e6c     02 14 66 F0 | 	shl	arg02, #2
17e70     02 E4 05 F1 | 	add	objptr, #2
17e74     F2 16 C2 FA | 	rdbyte	arg03, objptr
17e78     3A E4 85 F1 | 	sub	objptr, #58
17e7c     04 16 66 F0 | 	shl	arg03, #4
17e80     11 12 06 F6 | 	mov	arg01, #17
17e84     44 EE BF FD | 	call	#_hg010b_spin2_setspritepos
17e88                 | _hg010b_spin2_crlf_ret
17e88     2D 00 64 FD | 	ret
17e8c                 | 
17e8c                 | ' 
17e8c                 | ' 
17e8c                 | ' '*************************************************************************
17e8c                 | ' '                                                                        *
17e8c                 | ' '  Conversions                                                           *
17e8c                 | ' '                                                                        *
17e8c                 | ' '*************************************************************************
17e8c                 | ' 
17e8c                 | ' ''---------- Convert a integer to dec string, return a pointer
17e8c                 | ' 
17e8c                 | ' pub inttostr(i):result |q,pos,k,j
17e8c                 | _hg010b_spin2_inttostr
17e8c     03 4A 05 F6 | 	mov	COUNT_, #3
17e90     A8 00 A0 FD | 	call	#pushregs_
17e94     09 1F 0A F6 | 	mov	local01, arg01 wz
17e98                 | ' 
17e98                 | ' j:=i
17e98                 | ' pos:=10
17e98     0A 20 06 F6 | 	mov	local02, #10
17e9c                 | ' k:=0
17e9c     00 22 06 F6 | 	mov	local03, #0
17ea0                 | ' 
17ea0                 | ' if (j==0)
17ea0     18 00 90 5D |  if_ne	jmp	#LR__1910
17ea4                 | '   n_string[0]:=48
17ea4     49 E4 05 F1 | 	add	objptr, #73
17ea8     F2 60 48 FC | 	wrbyte	#48, objptr
17eac                 | '   n_string[1]:=0
17eac     01 E4 05 F1 | 	add	objptr, #1
17eb0     F2 00 48 FC | 	wrbyte	#0, objptr
17eb4     4A E4 85 F1 | 	sub	objptr, #74
17eb8     C4 00 90 FD | 	jmp	#LR__1917
17ebc                 | LR__1910
17ebc                 | ' 
17ebc                 | ' else
17ebc                 | '   if (j<0)
17ebc     0F 1F 52 F6 | 	abs	local01, local01 wc
17ec0                 | '     j:=0-j
17ec0                 | '     k:=45
17ec0     2D 22 06 C6 |  if_b	mov	local03, #45
17ec4                 | ' 
17ec4                 | '   n_string[11]:=0
17ec4     54 E4 05 F1 | 	add	objptr, #84
17ec8     F2 00 48 FC | 	wrbyte	#0, objptr
17ecc     54 E4 85 F1 | 	sub	objptr, #84
17ed0     97 24 48 FB | 	callpa	#(@LR__1912-@LR__1911)>>2,fcache_load_ptr_
17ed4                 | '   repeat while (pos>-1)
17ed4                 | LR__1911
17ed4     00 20 56 F2 | 	cmps	local02, #0 wc
17ed8     40 00 90 CD |  if_b	jmp	#LR__1913
17edc     0F FB 51 F6 | 	abs	result1, local01 wc
17ee0     0A FA 15 FD | 	qdiv	result1, #10
17ee4                 | '     q:=j//10
17ee4     19 FA 61 FD | 	getqy	result1
17ee8     FD FA 81 F6 | 	negc	result1, result1
17eec     0F 1F 52 F6 | 	abs	local01, local01 wc
17ef0     0A 1E 16 FD | 	qdiv	local01, #10
17ef4                 | '     q:=48+q
17ef4     30 FA 05 F1 | 	add	result1, #48
17ef8                 | '     n_string[pos]:=q
17ef8     10 1F 02 F6 | 	mov	local01, local02
17efc     49 E4 05 F1 | 	add	objptr, #73
17f00     F2 1E 02 F1 | 	add	local01, objptr
17f04     0F FB 41 FC | 	wrbyte	result1, local01
17f08                 | '     j:=j/10
17f08     49 E4 85 F1 | 	sub	objptr, #73
17f0c                 | '     pos-=1
17f0c     01 20 86 F1 | 	sub	local02, #1
17f10     18 1E 62 FD | 	getqx	local01
17f14     0F 1F 82 F6 | 	negc	local01, local01
17f18     B8 FF 9F FD | 	jmp	#LR__1911
17f1c                 | LR__1912
17f1c                 | LR__1913
17f1c                 | '   repeat while n_string[0]==48
17f1c                 | LR__1914
17f1c     49 E4 05 F1 | 	add	objptr, #73
17f20     F2 16 C2 FA | 	rdbyte	arg03, objptr
17f24     49 E4 85 F1 | 	sub	objptr, #73
17f28     30 16 0E F2 | 	cmp	arg03, #48 wz
17f2c     20 00 90 5D |  if_ne	jmp	#LR__1915
17f30                 | '     bytemove(@n_string,@n_string+1,12)
17f30     49 E4 05 F1 | 	add	objptr, #73
17f34     F2 12 02 F6 | 	mov	arg01, objptr
17f38     F2 14 02 F6 | 	mov	arg02, objptr
17f3c     49 E4 85 F1 | 	sub	objptr, #73
17f40     01 14 06 F1 | 	add	arg02, #1
17f44     0C 16 06 F6 | 	mov	arg03, #12
17f48     88 0C B0 FD | 	call	#__system____builtin_memmove
17f4c     CC FF 9F FD | 	jmp	#LR__1914
17f50                 | LR__1915
17f50                 | ' 
17f50                 | '   if k==45
17f50     2D 22 0E F2 | 	cmp	local03, #45 wz
17f54     28 00 90 5D |  if_ne	jmp	#LR__1916
17f58                 | '      bytemove(@n_string+1,@n_string,12)
17f58     49 E4 05 F1 | 	add	objptr, #73
17f5c     F2 12 02 F6 | 	mov	arg01, objptr
17f60     01 12 06 F1 | 	add	arg01, #1
17f64     F2 14 02 F6 | 	mov	arg02, objptr
17f68     49 E4 85 F1 | 	sub	objptr, #73
17f6c     0C 16 06 F6 | 	mov	arg03, #12
17f70     60 0C B0 FD | 	call	#__system____builtin_memmove
17f74                 | '      n_string[0]:=k
17f74     49 E4 05 F1 | 	add	objptr, #73
17f78     F2 22 42 FC | 	wrbyte	local03, objptr
17f7c     49 E4 85 F1 | 	sub	objptr, #73
17f80                 | LR__1916
17f80                 | LR__1917
17f80                 | ' 
17f80                 | ' q:=@n_string
17f80     49 E4 05 F1 | 	add	objptr, #73
17f84     F2 FA 01 F6 | 	mov	result1, objptr
17f88     49 E4 85 F1 | 	sub	objptr, #73
17f8c                 | ' return q
17f8c     A7 F0 03 F6 | 	mov	ptra, fp
17f90     B2 00 A0 FD | 	call	#popregs_
17f94                 | _hg010b_spin2_inttostr_ret
17f94     2D 00 64 FD | 	ret
17f98                 | 
17f98                 | ' 
17f98                 | ' '..............................................................................
17f98                 | ' 
17f98                 | ' {{
17f98                 | ' }}
17f98                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
17f98                 | _psram_spin2_startx
17f98     04 4A 05 F6 | 	mov	COUNT_, #4
17f9c     A8 00 A0 FD | 	call	#pushregs_
17fa0     09 1F 02 F6 | 	mov	local01, arg01
17fa4     0B 21 02 F6 | 	mov	local02, arg03
17fa8     0C 23 02 F6 | 	mov	local03, arg04
17fac                 | '     stop() ' restart driver if required
17fac     54 01 B0 FD | 	call	#_psram_spin2_stop
17fb0     00 1E 0E F2 | 	cmp	local01, #0 wz
17fb4     14 1E 06 AB |  if_e	rdlong	local01, #20
17fb8     0F 15 52 F6 | 	abs	arg02, local01 wc
17fbc     A1 07 00 FF 
17fc0     40 14 16 FD | 	qdiv	arg02, ##1000000
17fc4                 | ' 
17fc4                 | '     ' use current frequency if none specified
17fc4                 | ' 
17fc4                 | '     if freq == 0 
17fc4                 | '         freq := clkfreq 
17fc4                 | ' 
17fc4                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
17fc4                 | ' 
17fc4                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
17fc4                 | '     if burst < 0
17fc4                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
17fc4     18 14 62 FD | 	getqx	arg02
17fc8     0A 19 82 F6 | 	negc	arg04, arg02
17fcc     03 18 66 F0 | 	shl	arg04, #3
17fd0     84 18 86 F1 | 	sub	arg04, #132
17fd4     04 18 46 F0 | 	shr	arg04, #4
17fd8     04 18 66 F0 | 	shl	arg04, #4
17fdc     00 18 56 F2 | 	cmps	arg04, #0 wc
17fe0     0E FA 65 C6 |  if_b	neg	result1, #14
17fe4     10 01 90 CD |  if_b	jmp	#LR__1923
17fe8                 | ' 
17fe8                 | '     ' compute the input delay
17fe8                 | ' 
17fe8                 | '     if delay <= 0
17fe8     01 20 56 F2 | 	cmps	local02, #1 wc
17fec     10 00 90 3D |  if_ae	jmp	#LR__1920
17ff0                 | '         delay := lookupDelay(freq)
17ff0     0F 13 02 F6 | 	mov	arg01, local01
17ff4     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
17ff8     FD 20 02 F6 | 	mov	local02, result1
17ffc     04 00 90 FD | 	jmp	#LR__1921
18000                 | LR__1920
18000                 | '     else
18000                 | '         delay <#= $f ' limit to 15
18000     0F 20 66 F3 | 	fles	local02, #15
18004                 | LR__1921
18004                 | ' 
18004                 | '     ' create our lock
18004                 | ' 
18004                 | '     driverlock := LOCKNEW()  
18004     00 FA 05 F6 | 	mov	result1, #0
18008     04 FA 61 FD | 	locknew	result1
1800c     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
18010     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
18014                 | '     if driverlock == -1
18014     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
18018     FF FF 7F FF 
1801c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
18020                 | '         return ERR_NO_LOCK
18020     1A FA 65 A6 |  if_e	neg	result1, #26
18024     D0 00 90 AD |  if_e	jmp	#LR__1923
18028                 | ' 
18028                 | '     ' patch in the proper data and HUB addresses to the startup structure
18028                 | ' 
18028                 | '     long[@startupData][0]:=clkfreq
18028     14 1E 06 FB | 	rdlong	local01, #20
1802c     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
18030     FA 1E 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
18034                 | ' '    long[@startupData][1]:=$1000_0000
18034                 | '     long[@startupData][5]:=@deviceData
18034     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
18038     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1803c     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
18040     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
18044     14 14 06 F1 | 	add	arg02, #20
18048     0A 1F 62 FC | 	wrlong	local01, arg02
1804c                 | '     long[@startupData][6]:=@qosData
1804c     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
18050     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
18054     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
18058     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1805c     18 14 06 F1 | 	add	arg02, #24
18060     0A 1F 62 FC | 	wrlong	local01, arg02
18064                 | '     long[@startupData][7]:=$7FF00
18064     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
18068     1C 1E 06 F1 | 	add	local01, #28
1806c     FF 03 80 FF 
18070     0F 01 6A FC | 	wrlong	##524032, local01
18074                 | ' 
18074                 | '     ' setup some default bank and QoS parameter values
18074                 | ' 
18074                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
18074     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
18078     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
1807c     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
18080     10 18 66 F0 | 	shl	arg04, #16
18084     0C 20 66 F0 | 	shl	local02, #12
18088     10 19 42 F5 | 	or	arg04, local02
1808c     18 18 46 F5 | 	or	arg04, #24
18090     0C 15 02 F6 | 	mov	arg02, arg04
18094     02 16 06 F6 | 	mov	arg03, #2
18098     A0 00 A0 FD | 	call	#\builtin_longfill_
1809c                 | '     longfill(@qosData, $FFFF0000, 8)
1809c     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
180a0     07 16 06 F6 | 	mov	arg03, #7
180a4     28 16 62 FD | 	setq	arg03
180a8     80 FF FF FF 
180ac     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
180b0                 | ' 
180b0                 | '     ' get the address of the PSRAM memory driver so we can start it
180b0                 | ' 
180b0                 | '     driverAddr:= driver.getDriverAddr()
180b0                 | '     return @driver_start
180b0     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
180b4     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
180b8     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
180bc                 | ' 
180bc                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
180bc                 | ' 
180bc                 | '     if desiredcog < 0
180bc     00 22 56 F2 | 	cmps	local03, #0 wc
180c0                 | '         desiredcog := NEWCOG
180c0     10 22 06 C6 |  if_b	mov	local03, #16
180c4                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
180c4     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
180c8     11 25 02 F6 | 	mov	local04, local03
180cc     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
180d0     0A 25 F2 FC | 	coginit	local04, arg02 wc
180d4     01 24 66 C6 |  if_b	neg	local04, #1
180d8     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
180dc     FA 24 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
180e0                 | '     repeat until long[@startupData] == 0 
180e0     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
180e4                 | LR__1922
180e4     FA 24 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
180e8     F8 FF 9F 5D |  if_ne	jmp	#LR__1922
180ec                 | ' 
180ec                 | '     return drivercog
180ec     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
180f0     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
180f4     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
180f8                 | LR__1923
180f8     A7 F0 03 F6 | 	mov	ptra, fp
180fc     B2 00 A0 FD | 	call	#popregs_
18100                 | _psram_spin2_startx_ret
18100     2D 00 64 FD | 	ret
18104                 | 
18104                 | ' 
18104                 | ' '..............................................................................
18104                 | ' 
18104                 | ' {{
18104                 | ' }}
18104                 | ' PUB stop() : i
18104                 | _psram_spin2_stop
18104     00 00 06 F6 | 	mov	_var01, #0
18108                 | '     if drivercog <> -1
18108     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1810c     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
18110     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
18114     FF FF 7F FF 
18118     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
1811c     70 00 90 AD |  if_e	jmp	#LR__1933
18120                 | '         cogstop(drivercog) ' a rather brutal stop
18120     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
18124     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
18128     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1812c     03 12 62 FD | 	cogstop	arg01
18130     97 26 48 FB | 	callpa	#(@LR__1932-@LR__1930)>>2,fcache_load_ptr_
18134                 | '         repeat i from 0 to 7
18134                 | LR__1930
18134                 | '             if long[$7FF00][i*3] < 0
18134     00 FB 01 F6 | 	mov	result1, _var01
18138     01 FA 65 F0 | 	shl	result1, #1
1813c     00 FB 01 F1 | 	add	result1, _var01
18140     02 FA 65 F0 | 	shl	result1, #2
18144     FF 03 00 FF 
18148     00 FB 05 F1 | 	add	result1, ##524032
1814c     FD FA 01 FB | 	rdlong	result1, result1
18150     00 FA 55 F2 | 	cmps	result1, #0 wc
18154     1C 00 90 3D |  if_ae	jmp	#LR__1931
18158                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
18158     00 FB 01 F6 | 	mov	result1, _var01
1815c     01 FA 65 F0 | 	shl	result1, #1
18160     00 FB 01 F1 | 	add	result1, _var01
18164     02 FA 65 F0 | 	shl	result1, #2
18168     FF 03 00 FF 
1816c     00 FB 05 F1 | 	add	result1, ##524032
18170     FD 20 68 FC | 	wrlong	#16, result1
18174                 | LR__1931
18174     01 00 06 F1 | 	add	_var01, #1
18178     08 00 56 F2 | 	cmps	_var01, #8 wc
1817c     B4 FF 9F CD |  if_b	jmp	#LR__1930
18180                 | LR__1932
18180                 | '         drivercog := -1
18180     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
18184     FF FF FF FF 
18188     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
1818c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
18190                 | LR__1933
18190                 | '     if driverlock <> -1
18190     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
18194     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
18198     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1819c     FF FF 7F FF 
181a0     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
181a4                 | '         LOCKRET(driverlock)
181a4     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
181a8     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
181ac     05 12 62 5D |  if_ne	lockret	arg01
181b0                 | '         driverlock := -1
181b0     FF FF FF 5F 
181b4     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
181b8     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
181bc     00 FB 01 F6 | 	mov	result1, _var01
181c0                 | _psram_spin2_stop_ret
181c0     2D 00 64 FD | 	ret
181c4                 | 
181c4                 | ' 
181c4                 | ' '..............................................................................
181c4                 | ' 
181c4                 | ' {{
181c4                 | ' }}
181c4                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
181c4                 | _psram_spin2_read1
181c4                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
181c4                 | '     if drivercog == -1 ' driver must be running
181c4     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
181c8     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
181cc     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
181d0     FF FF 7F FF 
181d4     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
181d8                 | '         return ERR_INACTIVE
181d8     0F FA 65 A6 |  if_e	neg	result1, #15
181dc     7C 00 90 AD |  if_e	jmp	#LR__1941
181e0                 | '     if count == 0 ' don't even bother reading
181e0     00 16 0E F2 | 	cmp	arg03, #0 wz
181e4                 | '         return 0
181e4     00 FA 05 A6 |  if_e	mov	result1, #0
181e8     70 00 90 AD |  if_e	jmp	#LR__1941
181ec                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
181ec     00 FA 05 F6 | 	mov	result1, #0
181f0     01 FA 61 FD | 	cogid	result1
181f4     FD 00 02 F6 | 	mov	_var01, result1
181f8     01 00 66 F0 | 	shl	_var01, #1
181fc     FD 00 02 F1 | 	add	_var01, result1
18200     02 00 66 F0 | 	shl	_var01, #2
18204     FF 03 00 FF 
18208     00 03 06 F6 | 	mov	_var02, ##524032
1820c     00 03 02 F1 | 	add	_var02, _var01
18210                 | '     if long[mailbox] < 0
18210     01 01 02 FB | 	rdlong	_var01, _var02
18214     00 00 56 F2 | 	cmps	_var01, #0 wc
18218                 | '         return ERR_MAILBOX_BUSY
18218     1C FA 65 C6 |  if_b	neg	result1, #28
1821c     3C 00 90 CD |  if_b	jmp	#LR__1941
18220                 | '     long[mailbox][2] := count
18220     08 02 06 F1 | 	add	_var02, #8
18224     01 17 62 FC | 	wrlong	arg03, _var02
18228                 | '     long[mailbox][1] := dstHubAddr
18228     04 02 86 F1 | 	sub	_var02, #4
1822c     01 13 62 FC | 	wrlong	arg01, _var02
18230     04 02 86 F1 | 	sub	_var02, #4
18234                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
18234     0A 05 02 F6 | 	mov	_var03, arg02
18238     D9 04 06 F4 | 	bitl	_var03, #217
1823c     00 00 58 FF 
18240     00 00 06 F6 | 	mov	_var01, ##-1342177280
18244     02 01 02 F1 | 	add	_var01, _var03
18248     01 01 62 FC | 	wrlong	_var01, _var02
1824c                 | '     repeat
1824c                 | LR__1940
1824c                 | '         result := long[mailbox]    
1824c     01 05 02 FB | 	rdlong	_var03, _var02
18250     00 04 56 F2 | 	cmps	_var03, #0 wc
18254     F4 FF 9F CD |  if_b	jmp	#LR__1940
18258                 | '     while result < 0   
18258                 | '     return -result                       'return success or error
18258     02 FB 61 F6 | 	neg	result1, _var03
1825c                 | LR__1941
1825c                 | _psram_spin2_read1_ret
1825c     2D 00 64 FD | 	ret
18260                 | 
18260                 | ' 
18260                 | ' '..............................................................................
18260                 | ' 
18260                 | ' {{
18260                 | ' }}
18260                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
18260                 | _psram_spin2_write
18260                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
18260                 | '     if drivercog == -1 ' driver must be running
18260     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
18264     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
18268     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1826c     FF FF 7F FF 
18270     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
18274                 | '         return ERR_INACTIVE
18274     0F FA 65 A6 |  if_e	neg	result1, #15
18278     7C 00 90 AD |  if_e	jmp	#LR__1951
1827c                 | '     if count == 0 ' don't even bother writing
1827c     00 16 0E F2 | 	cmp	arg03, #0 wz
18280                 | '         return 0
18280     00 FA 05 A6 |  if_e	mov	result1, #0
18284     70 00 90 AD |  if_e	jmp	#LR__1951
18288                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
18288     00 FA 05 F6 | 	mov	result1, #0
1828c     01 FA 61 FD | 	cogid	result1
18290     FD 00 02 F6 | 	mov	_var01, result1
18294     01 00 66 F0 | 	shl	_var01, #1
18298     FD 00 02 F1 | 	add	_var01, result1
1829c     02 00 66 F0 | 	shl	_var01, #2
182a0     FF 03 00 FF 
182a4     00 03 06 F6 | 	mov	_var02, ##524032
182a8     00 03 02 F1 | 	add	_var02, _var01
182ac                 | '     if long[mailbox] < 0
182ac     01 01 02 FB | 	rdlong	_var01, _var02
182b0     00 00 56 F2 | 	cmps	_var01, #0 wc
182b4                 | '         return ERR_MAILBOX_BUSY
182b4     1C FA 65 C6 |  if_b	neg	result1, #28
182b8     3C 00 90 CD |  if_b	jmp	#LR__1951
182bc                 | '     long[mailbox][2] := count
182bc     08 02 06 F1 | 	add	_var02, #8
182c0     01 17 62 FC | 	wrlong	arg03, _var02
182c4                 | '     long[mailbox][1] := srcHubAddr
182c4     04 02 86 F1 | 	sub	_var02, #4
182c8     01 13 62 FC | 	wrlong	arg01, _var02
182cc     04 02 86 F1 | 	sub	_var02, #4
182d0                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
182d0     0A 05 02 F6 | 	mov	_var03, arg02
182d4     D9 04 06 F4 | 	bitl	_var03, #217
182d8     00 00 78 FF 
182dc     00 00 06 F6 | 	mov	_var01, ##-268435456
182e0     02 01 02 F1 | 	add	_var01, _var03
182e4     01 01 62 FC | 	wrlong	_var01, _var02
182e8                 | '     repeat
182e8                 | LR__1950
182e8                 | '         result := long[mailbox]    
182e8     01 05 02 FB | 	rdlong	_var03, _var02
182ec     00 04 56 F2 | 	cmps	_var03, #0 wc
182f0     F4 FF 9F CD |  if_b	jmp	#LR__1950
182f4                 | '     while result < 0   
182f4                 | '     return -result                       'return success or error
182f4     02 FB 61 F6 | 	neg	result1, _var03
182f8                 | LR__1951
182f8                 | _psram_spin2_write_ret
182f8     2D 00 64 FD | 	ret
182fc                 | 
182fc                 | ' 
182fc                 | ' ' generalized fill
182fc                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
182fc                 | _psram_spin2_fill
182fc     09 01 02 F6 | 	mov	_var01, arg01
18300     0A 03 02 F6 | 	mov	_var02, arg02
18304     0B 05 02 F6 | 	mov	_var03, arg03
18308     0D 07 02 F6 | 	mov	_var04, arg05
1830c                 | '     case datasize 
1830c     01 06 86 F1 | 	sub	_var04, #1
18310     04 06 26 F3 | 	fle	_var04, #4
18314     30 06 62 FD | 	jmprel	_var04
18318                 | LR__1960
18318     10 00 90 FD | 	jmp	#LR__1961
1831c     18 00 90 FD | 	jmp	#LR__1962
18320     2C 00 90 FD | 	jmp	#LR__1964
18324     1C 00 90 FD | 	jmp	#LR__1963
18328     24 00 90 FD | 	jmp	#LR__1964
1832c                 | LR__1961
1832c                 | '         1: req := driver.R_WRITEBYTE
1832c     00 00 60 FF 
18330     00 08 06 F6 | 	mov	_var05, ##-1073741824
18334     20 00 90 FD | 	jmp	#LR__1965
18338                 | LR__1962
18338                 | '         2: req := driver.R_WRITEWORD
18338     00 00 68 FF 
1833c     00 08 06 F6 | 	mov	_var05, ##-805306368
18340     14 00 90 FD | 	jmp	#LR__1965
18344                 | LR__1963
18344                 | '         4: req := driver.R_WRITELONG
18344     00 00 70 FF 
18348     00 08 06 F6 | 	mov	_var05, ##-536870912
1834c     08 00 90 FD | 	jmp	#LR__1965
18350                 | LR__1964
18350                 | '         other : return ERR_INVALID
18350     06 FA 65 F6 | 	neg	result1, #6
18354     94 00 90 FD | 	jmp	#LR__1967
18358                 | LR__1965
18358                 | '     if count == 0   ' nothing to do
18358     00 04 0E F2 | 	cmp	_var03, #0 wz
1835c                 | '         return 0
1835c     00 FA 05 A6 |  if_e	mov	result1, #0
18360     88 00 90 AD |  if_e	jmp	#LR__1967
18364                 | '     if drivercog == -1
18364     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
18368     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
1836c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
18370     FF FF 7F FF 
18374     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
18378                 | '         return ERR_INACTIVE
18378     0F FA 65 A6 |  if_e	neg	result1, #15
1837c     6C 00 90 AD |  if_e	jmp	#LR__1967
18380                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
18380     00 FA 05 F6 | 	mov	result1, #0
18384     01 FA 61 FD | 	cogid	result1
18388     FD 06 02 F6 | 	mov	_var04, result1
1838c     01 06 66 F0 | 	shl	_var04, #1
18390     FD 06 02 F1 | 	add	_var04, result1
18394     02 06 66 F0 | 	shl	_var04, #2
18398     FF 03 00 FF 
1839c     00 0B 06 F6 | 	mov	_var06, ##524032
183a0     03 0B 02 F1 | 	add	_var06, _var04
183a4                 | '     if long[mailbox] < 0
183a4     05 07 02 FB | 	rdlong	_var04, _var06
183a8     00 06 56 F2 | 	cmps	_var04, #0 wc
183ac                 | '         return ERR_MAILBOX_BUSY
183ac     1C FA 65 C6 |  if_b	neg	result1, #28
183b0     38 00 90 CD |  if_b	jmp	#LR__1967
183b4                 | '     long[mailbox][2] := count
183b4     08 0A 06 F1 | 	add	_var06, #8
183b8     05 05 62 FC | 	wrlong	_var03, _var06
183bc                 | '     long[mailbox][1] := pattern
183bc     04 0A 86 F1 | 	sub	_var06, #4
183c0     05 03 62 FC | 	wrlong	_var02, _var06
183c4     04 0A 86 F1 | 	sub	_var06, #4
183c8                 | '     long[mailbox] := req + (addr & $fffffff)
183c8     04 0D 02 F6 | 	mov	_var07, _var05
183cc     00 0F 02 F6 | 	mov	_var08, _var01
183d0     7C 0E 06 F4 | 	bitl	_var08, #124
183d4     07 0D 02 F1 | 	add	_var07, _var08
183d8     05 0D 62 FC | 	wrlong	_var07, _var06
183dc                 | '     repeat
183dc                 | LR__1966
183dc                 | '         r := long[mailbox]
183dc     05 0F 02 FB | 	rdlong	_var08, _var06
183e0     00 0E 56 F2 | 	cmps	_var08, #0 wc
183e4     F4 FF 9F CD |  if_b	jmp	#LR__1966
183e8                 | '     while r < 0
183e8                 | '     return -r                  ' return 0 for success or negated error code
183e8     07 FB 61 F6 | 	neg	result1, _var08
183ec                 | LR__1967
183ec                 | _psram_spin2_fill_ret
183ec     2D 00 64 FD | 	ret
183f0                 | 
183f0                 | ' 
183f0                 | ' '..............................................................................
183f0                 | ' 
183f0                 | ' {{
183f0                 | ' }}
183f0                 | ' PUB setQos(cog, qos) : result | mailbox
183f0                 | _psram_spin2_setQos
183f0     09 01 02 F6 | 	mov	_var01, arg01
183f4                 | '     if drivercog == -1 ' driver must be running
183f4     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
183f8     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
183fc     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
18400     FF FF 7F FF 
18404     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
18408                 | '         return ERR_INACTIVE
18408     0F FA 65 A6 |  if_e	neg	result1, #15
1840c     9C 00 90 AD |  if_e	jmp	#LR__1974
18410                 | '     if cog < 0 or cog > 7 ' enforce cog id range
18410     00 00 56 F2 | 	cmps	_var01, #0 wc
18414     08 00 90 CD |  if_b	jmp	#LR__1970
18418     08 00 56 F2 | 	cmps	_var01, #8 wc
1841c     08 00 90 CD |  if_b	jmp	#LR__1971
18420                 | LR__1970
18420                 | '         return ERR_INVALID
18420     06 FA 65 F6 | 	neg	result1, #6
18424     84 00 90 FD | 	jmp	#LR__1974
18428                 | LR__1971
18428                 | '     long[@qosData][cog] := qos & !$1ff
18428     FF 15 26 F5 | 	andn	arg02, #511
1842c     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
18430     02 00 66 F0 | 	shl	_var01, #2
18434     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
18438     00 15 62 FC | 	wrlong	arg02, _var01
1843c                 | '     mailbox := $7FF00 + drivercog*12
1843c     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
18440     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
18444     02 07 02 F6 | 	mov	_var04, _var03
18448     01 06 66 F0 | 	shl	_var04, #1
1844c     02 07 02 F1 | 	add	_var04, _var03
18450     02 06 66 F0 | 	shl	_var04, #2
18454     FF 03 00 FF 
18458     00 09 06 F6 | 	mov	_var05, ##524032
1845c     03 09 02 F1 | 	add	_var05, _var04
18460                 | '     repeat until LOCKTRY(driverlock)
18460     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
18464                 | LR__1972
18464     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
18468     06 12 72 FD | 	locktry	arg01 wc
1846c     F4 FF 9F 3D |  if_ae	jmp	#LR__1972
18470     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
18474                 | '     long[mailbox] := driver.R_CONFIG + cogid()
18474     00 06 06 F6 | 	mov	_var04, #0
18478     01 06 62 FD | 	cogid	_var04
1847c     00 00 78 FF 
18480     00 02 06 F6 | 	mov	_var02, ##-268435456
18484     03 03 02 F1 | 	add	_var02, _var04
18488     04 03 62 FC | 	wrlong	_var02, _var05
1848c                 | '     repeat while long[mailbox] < 0
1848c                 | LR__1973
1848c     04 03 02 FB | 	rdlong	_var02, _var05
18490     00 02 56 F2 | 	cmps	_var02, #0 wc
18494     F4 FF 9F CD |  if_b	jmp	#LR__1973
18498                 | '     LOCKREL(driverlock)
18498     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1849c     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
184a0     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
184a4     07 12 72 FD | 	lockrel	arg01 wc
184a8     00 FA 05 F6 | 	mov	result1, #0
184ac                 | LR__1974
184ac                 | _psram_spin2_setQos_ret
184ac     2D 00 64 FD | 	ret
184b0                 | 
184b0                 | ' 
184b0                 | ' '..............................................................................
184b0                 | ' 
184b0                 | ' {{
184b0                 | ' }}
184b0                 | ' PRI lookupDelay(freq) : delay | profile
184b0                 | _psram_spin2_lookupDelay
184b0                 | '     profile := @delayTable
184b0     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
184b4     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
184b8                 | '     delay := long[profile][0]
184b8     00 03 02 FB | 	rdlong	_var02, _var01
184bc                 | '     repeat while long[profile][1] 
184bc     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
184c0     97 16 48 FB | 	callpa	#(@LR__1981-@LR__1980)>>2,fcache_load_ptr_
184c4                 | LR__1980
184c4     04 00 06 F1 | 	add	_var01, #4
184c8     00 FB 09 FB | 	rdlong	result1, _var01 wz
184cc     04 00 86 F1 | 	sub	_var01, #4
184d0     1C 00 90 AD |  if_e	jmp	#LR__1982
184d4                 | '         if freq +< long[profile][1] 
184d4     04 00 06 F1 | 	add	_var01, #4
184d8     00 FB 01 FB | 	rdlong	result1, _var01
184dc     04 00 86 F1 | 	sub	_var01, #4
184e0     FD 12 12 F2 | 	cmp	arg01, result1 wc
184e4                 | '             quit
184e4                 | '         profile += 4
184e4     04 00 06 31 |  if_ae	add	_var01, #4
184e8                 | '         delay++
184e8     01 02 06 31 |  if_ae	add	_var02, #1
184ec     D4 FF 9F 3D |  if_ae	jmp	#LR__1980
184f0                 | LR__1981
184f0                 | LR__1982
184f0     01 FB 01 F6 | 	mov	result1, _var02
184f4                 | _psram_spin2_lookupDelay_ret
184f4     2D 00 64 FD | 	ret
184f8                 | 
184f8                 | ' 
184f8                 | ' PUB start() : r
184f8                 | _usbnew_spin2_start
184f8     00 00 06 F6 | 	mov	_var01, #0
184fc                 | '   ifnot driver_cog
184fc     15 00 00 FF 
18500     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
18504     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
18508     15 00 00 FF 
1850c     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
18510     38 00 90 5D |  if_ne	jmp	#LR__1990
18514                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
18514     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
18518     10 00 06 F6 | 	mov	_var01, #16
1851c     00 16 06 F6 | 	mov	arg03, #0
18520     28 16 62 FD | 	setq	arg03
18524     0A 01 F2 FC | 	coginit	_var01, arg02 wc
18528     01 00 66 C6 |  if_b	neg	_var01, #1
1852c                 | '     if r >= 0
1852c     00 00 56 F2 | 	cmps	_var01, #0 wc
18530                 | '       driver_cog := r+1
18530     00 03 02 36 |  if_ae	mov	_var02, _var01
18534     01 02 06 31 |  if_ae	add	_var02, #1
18538     15 00 00 3F 
1853c     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
18540     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
18544     15 00 00 3F 
18548     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
1854c                 | LR__1990
1854c     00 FB 01 F6 | 	mov	result1, _var01
18550                 | _usbnew_spin2_start_ret
18550     2D 00 64 FD | 	ret
18554                 | 
18554                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
18554                 | ' 
18554                 | ' '' Return key event from buffer if there is one
18554                 | ' PUB get_key() : r | tail
18554                 | _usbnew_spin2_get_key
18554                 | '   tail := keyq_tail
18554     0F 00 00 FF 
18558     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
1855c     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
18560                 | '   if keyq_head == tail
18560     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
18564     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
18568     0F 00 00 FF 
1856c     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
18570     00 03 0A F2 | 	cmp	_var02, _var01 wz
18574                 | '     return 0 ' No event
18574     00 FA 05 A6 |  if_e	mov	result1, #0
18578     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
1857c                 | '   r := keyq_data[tail]
1857c     00 03 02 F6 | 	mov	_var02, _var01
18580     02 02 66 F0 | 	shl	_var02, #2
18584     0F 00 00 FF 
18588     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
1858c     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
18590     01 FB 01 FB | 	rdlong	result1, _var02
18594                 | '   if ++tail == KEYQUEUE_SIZE
18594     01 00 06 F1 | 	add	_var01, #1
18598     80 00 0E F2 | 	cmp	_var01, #128 wz
1859c                 | '     tail := 0
1859c     00 00 06 A6 |  if_e	mov	_var01, #0
185a0                 | '   keyq_tail := tail
185a0     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
185a4     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
185a8     0F 00 00 FF 
185ac     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
185b0                 | _usbnew_spin2_get_key_ret
185b0     2D 00 64 FD | 	ret
185b4                 | 
185b4                 | ' 
185b4                 | ' '' Emulate mouse movement
185b4                 | ' PUB mouse_move(x,y)
185b4                 | _usbnew_spin2_mouse_move
185b4     02 4A 05 F6 | 	mov	COUNT_, #2
185b8     A8 00 A0 FD | 	call	#pushregs_
185bc     09 1F 02 F6 | 	mov	local01, arg01
185c0     0A 21 02 F6 | 	mov	local02, arg02
185c4                 | '   mouse_lock := 1
185c4     14 00 00 FF 
185c8     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
185cc     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
185d0     14 00 00 FF 
185d4     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
185d8                 | '   waitus(2) ' hope driver is now done
185d8     02 12 06 F6 | 	mov	arg01, #2
185dc     34 0A B0 FD | 	call	#__system___waitus
185e0                 | '   mouse_xacc := x
185e0     14 00 00 FF 
185e4     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
185e8     FB 1E 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
185ec                 | '   mouse_yacc := y
185ec     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
185f0     FB 20 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
185f4                 | '   if mouse_outptr
185f4     04 00 00 FF 
185f8     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
185fc     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
18600     0F 00 00 FF 
18604     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
18608     24 00 90 AD |  if_e	jmp	#LR__2000
1860c                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
1860c     10 20 66 F0 | 	shl	local02, #16
18610     0F 1F 32 F9 | 	getword	local01, local01, #0
18614     0F 21 42 F5 | 	or	local02, local01
18618     0F 00 00 FF 
1861c     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
18620     FB 1E 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
18624     0F 00 00 FF 
18628     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1862c     0F 21 62 FC | 	wrlong	local02, local01
18630                 | LR__2000
18630                 | '   mouse_lock := 0
18630     14 00 00 FF 
18634     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
18638     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
1863c     14 00 00 FF 
18640     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
18644     A7 F0 03 F6 | 	mov	ptra, fp
18648     B2 00 A0 FD | 	call	#popregs_
1864c                 | _usbnew_spin2_mouse_move_ret
1864c     2D 00 64 FD | 	ret
18650                 | 
18650                 | '     '' Set HAVE_HIDPAD to enable.
18650                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
18650                 | ' 
18650                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
18650                 | ' PUB hidpad_id(dev) : r
18650                 | _usbnew_spin2_hidpad_id
18650                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
18650     13 00 00 FF 
18654     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
18658     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1865c     09 01 02 F6 | 	mov	_var01, arg01
18660     03 00 66 F0 | 	shl	_var01, #3
18664     09 01 82 F1 | 	sub	_var01, arg01
18668     02 00 66 F0 | 	shl	_var01, #2
1866c     00 FB 01 F1 | 	add	result1, _var01
18670     FD FA 01 FB | 	rdlong	result1, result1
18674     13 00 00 FF 
18678     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
1867c                 | _usbnew_spin2_hidpad_id_ret
1867c     2D 00 64 FD | 	ret
18680                 | 
18680                 | ' 
18680                 | ' '' Get all button states for a device
18680                 | ' PUB hidpad_buttons(dev) : r 
18680                 | _usbnew_spin2_hidpad_buttons
18680                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
18680     13 00 00 FF 
18684     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
18688     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1868c     09 01 02 F6 | 	mov	_var01, arg01
18690     03 00 66 F0 | 	shl	_var01, #3
18694     09 01 82 F1 | 	sub	_var01, arg01
18698     02 00 66 F0 | 	shl	_var01, #2
1869c     00 FB 01 F1 | 	add	result1, _var01
186a0     14 FA 05 F1 | 	add	result1, #20
186a4     FD FA 01 FB | 	rdlong	result1, result1
186a8     13 00 00 FF 
186ac     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
186b0                 | _usbnew_spin2_hidpad_buttons_ret
186b0     2D 00 64 FD | 	ret
186b4                 | 
186b4                 | ' 
186b4                 | ' '' Get state of an axis (normalized between -32768 and 32767)
186b4                 | ' PUB hidpad_axis(dev,axnum) : r
186b4                 | _usbnew_spin2_hidpad_axis
186b4                 | '   if axnum +>= 6
186b4     06 14 16 F2 | 	cmp	arg02, #6 wc
186b8                 | '     return 0
186b8     00 FA 05 36 |  if_ae	mov	result1, #0
186bc     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
186c0                 | '   else 
186c0                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
186c0     13 00 00 FF 
186c4     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
186c8     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
186cc     09 01 02 F6 | 	mov	_var01, arg01
186d0     03 00 66 F0 | 	shl	_var01, #3
186d4     09 01 82 F1 | 	sub	_var01, arg01
186d8     02 00 66 F0 | 	shl	_var01, #2
186dc     00 FB 01 F1 | 	add	result1, _var01
186e0     04 00 06 F6 | 	mov	_var01, #4
186e4     0A 01 02 F1 | 	add	_var01, arg02
186e8     01 00 66 F0 | 	shl	_var01, #1
186ec     FD 00 02 F1 | 	add	_var01, result1
186f0     00 FB E1 FA | 	rdword	result1, _var01
186f4     0F FA 65 F7 | 	signx	result1, #15
186f8     13 00 00 FF 
186fc     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
18700                 | _usbnew_spin2_hidpad_axis_ret
18700     2D 00 64 FD | 	ret
18704                 | 
18704                 | ' 
18704                 | ' 
18704                 | ' '--------------------------------------------------------------
18704                 | ' '---------- Init the variables, start the cog. ----------------
18704                 | ' '--------------------------------------------------------------
18704                 | ' 
18704                 | ' pub start(mbox,scope,cache) :cog,base | iii
18704                 | _Audio093b_8_sc_spin2_start
18704     04 4A 05 F6 | 	mov	COUNT_, #4
18708     A8 00 A0 FD | 	call	#pushregs_
1870c     09 1F 02 F6 | 	mov	local01, arg01
18710                 | ' 
18710                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
18710                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
18710                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
18710                 | ' 
18710                 | ' mailboxaddr:=mbox 
18710     F2 1E 62 FC | 	wrlong	local01, objptr
18714                 | ' scope_ptr:=scope
18714     04 E4 05 F1 | 	add	objptr, #4
18718     F2 14 62 FC | 	wrlong	arg02, objptr
1871c                 | ' cache_ptr:=cache
1871c     04 E4 05 F1 | 	add	objptr, #4
18720     F2 16 62 FC | 	wrlong	arg03, objptr
18724                 | ' base:=@channel1[0]
18724     04 E4 05 F1 | 	add	objptr, #4
18728     F2 20 02 F6 | 	mov	local02, objptr
1872c                 | ' 
1872c                 | ' repeat iii from 0 to 7
1872c     00 22 06 F6 | 	mov	local03, #0
18730     01 00 00 FF 
18734     D8 E7 05 F1 | 	add	ptr__Audio093b_8_sc_spin2_dat__, ##984
18738     0C E4 85 F1 | 	sub	objptr, #12
1873c     97 80 48 FB | 	callpa	#(@LR__2011-@LR__2010)>>2,fcache_load_ptr_
18740                 | LR__2010
18740                 | '   long[base+32*iii]:=0
18740     10 1F 02 F6 | 	mov	local01, local02
18744     11 FD 01 F6 | 	mov	result2, local03
18748     05 FC 65 F0 | 	shl	result2, #5
1874c     FE 1E 02 F1 | 	add	local01, result2
18750     0F 01 68 FC | 	wrlong	#0, local01
18754                 | '   long[base+32*iii+4]:=0
18754     10 1F 02 F6 | 	mov	local01, local02
18758     11 FD 01 F6 | 	mov	result2, local03
1875c     05 FC 65 F0 | 	shl	result2, #5
18760     FE 1E 02 F1 | 	add	local01, result2
18764     04 1E 06 F1 | 	add	local01, #4
18768     0F 01 68 FC | 	wrlong	#0, local01
1876c                 | '   long[base+32*iii+12]:=0
1876c     10 25 02 F6 | 	mov	local04, local02
18770     11 1F 02 F6 | 	mov	local01, local03
18774     05 1E 66 F0 | 	shl	local01, #5
18778     0F 25 02 F1 | 	add	local04, local01
1877c     0C 24 06 F1 | 	add	local04, #12
18780     12 01 68 FC | 	wrlong	#0, local04
18784                 | '   long[base+32*iii+16]:=2 
18784     10 25 02 F6 | 	mov	local04, local02
18788     11 1F 02 F6 | 	mov	local01, local03
1878c     05 1E 66 F0 | 	shl	local01, #5
18790     0F 25 02 F1 | 	add	local04, local01
18794     10 24 06 F1 | 	add	local04, #16
18798     12 05 68 FC | 	wrlong	#2, local04
1879c                 | '   word[base+32*iii+20]:=0
1879c     10 25 02 F6 | 	mov	local04, local02
187a0     11 1F 02 F6 | 	mov	local01, local03
187a4     05 1E 66 F0 | 	shl	local01, #5
187a8     0F 25 02 F1 | 	add	local04, local01
187ac     14 24 06 F1 | 	add	local04, #20
187b0     12 01 58 FC | 	wrword	#0, local04
187b4                 | '   word[base+32*iii+22]:=8192
187b4     10 25 02 F6 | 	mov	local04, local02
187b8     11 1F 02 F6 | 	mov	local01, local03
187bc     05 1E 66 F0 | 	shl	local01, #5
187c0     0F 25 02 F1 | 	add	local04, local01
187c4     16 24 06 F1 | 	add	local04, #22
187c8     10 00 80 FF 
187cc     12 01 58 FC | 	wrword	##8192, local04
187d0                 | '   word[base+32*iii+24]:=4000+2*iii
187d0     11 25 02 F6 | 	mov	local04, local03
187d4     01 24 66 F0 | 	shl	local04, #1
187d8     07 00 00 FF 
187dc     A0 1F 06 F6 | 	mov	local01, ##4000
187e0     12 1F 02 F1 | 	add	local01, local04
187e4     10 25 02 F6 | 	mov	local04, local02
187e8     11 FD 01 F6 | 	mov	result2, local03
187ec     05 FC 65 F0 | 	shl	result2, #5
187f0     FE 24 02 F1 | 	add	local04, result2
187f4     18 24 06 F1 | 	add	local04, #24
187f8     12 1F 52 FC | 	wrword	local01, local04
187fc                 | '   word[base+32*iii+26]:=2
187fc     10 25 02 F6 | 	mov	local04, local02
18800     11 1F 02 F6 | 	mov	local01, local03
18804     05 1E 66 F0 | 	shl	local01, #5
18808     0F 25 02 F1 | 	add	local04, local01
1880c     1A 24 06 F1 | 	add	local04, #26
18810     12 05 58 FC | 	wrword	#2, local04
18814                 | '   long [base+32*iii+8]:=@null | $C0000000
18814     F3 1E 02 F6 | 	mov	local01, ptr__Audio093b_8_sc_spin2_dat__
18818     3E 1E 26 F4 | 	bith	local01, #62
1881c     10 25 02 F6 | 	mov	local04, local02
18820     11 17 02 F6 | 	mov	arg03, local03
18824     05 16 66 F0 | 	shl	arg03, #5
18828     0B 25 02 F1 | 	add	local04, arg03
1882c     08 24 06 F1 | 	add	local04, #8
18830     12 1F 62 FC | 	wrlong	local01, local04
18834     01 22 06 F1 | 	add	local03, #1
18838     08 22 56 F2 | 	cmps	local03, #8 wc
1883c     00 FF 9F CD |  if_b	jmp	#LR__2010
18840                 | LR__2011
18840     01 00 00 FF 
18844     D8 E7 85 F1 | 	sub	ptr__Audio093b_8_sc_spin2_dat__, ##984
18848                 | '   
18848                 | ' cog:=coginit(16,@audio,@mailboxaddr)
18848     F3 14 02 F6 | 	mov	arg02, ptr__Audio093b_8_sc_spin2_dat__
1884c     F2 16 02 F6 | 	mov	arg03, objptr
18850     10 24 06 F6 | 	mov	local04, #16
18854     28 16 62 FD | 	setq	arg03
18858     0A 25 F2 FC | 	coginit	local04, arg02 wc
1885c     01 24 66 C6 |  if_b	neg	local04, #1
18860                 | ' waitms(100)
18860     64 12 06 F6 | 	mov	arg01, #100
18864     40 07 B0 FD | 	call	#__system___waitms
18868                 | ' return cog,base
18868     10 FD 01 F6 | 	mov	result2, local02
1886c     12 FB 01 F6 | 	mov	result1, local04
18870     A7 F0 03 F6 | 	mov	ptra, fp
18874     B2 00 A0 FD | 	call	#popregs_
18878                 | _Audio093b_8_sc_spin2_start_ret
18878     2D 00 64 FD | 	ret
1887c                 | 
1887c                 | ' 
1887c                 | ' ' a simple play procedure to not poke everything. 
1887c                 | ' 
1887c                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
1887c                 | _Audio093b_8_sc_spin2_play
1887c     0C E4 05 F1 | 	add	objptr, #12
18880     F2 00 02 F6 | 	mov	_var01, objptr
18884     05 12 66 F0 | 	shl	arg01, #5
18888     09 01 02 F1 | 	add	_var01, arg01
1888c     00 00 60 FF 
18890     00 14 06 F1 | 	add	arg02, ##-1073741824
18894     00 13 02 F6 | 	mov	arg01, _var01
18898     08 12 06 F1 | 	add	arg01, #8
1889c     09 15 62 FC | 	wrlong	arg02, arg01
188a0     00 15 02 F6 | 	mov	arg02, _var01
188a4     0C 14 06 F1 | 	add	arg02, #12
188a8     0A 1B 62 FC | 	wrlong	arg05, arg02
188ac     00 1C 56 F2 | 	cmps	arg06, #0 wc
188b0     00 15 02 36 |  if_ae	mov	arg02, _var01
188b4     10 14 06 31 |  if_ae	add	arg02, #16
188b8     0A 1D 62 3C |  if_ae	wrlong	arg06, arg02
188bc     02 1A 06 C1 |  if_b	add	arg05, #2
188c0     00 13 02 C6 |  if_b	mov	arg01, _var01
188c4     10 12 06 C1 |  if_b	add	arg01, #16
188c8     09 1B 62 CC |  if_b	wrlong	arg05, arg01
188cc     0B 15 52 F6 | 	abs	arg02, arg03 wc
188d0     0F 1B 80 FF 
188d4     0A 3F 1A FD | 	qdiv	##3546911, arg02
188d8                 | ' 
188d8                 | ' base2:=@channel1[0]+32*channel
188d8                 | ' long[base2+8]:=sample+$C0000000 
188d8                 | ' long[base2+12]:= len
188d8                 | ' if loop >=0 
188d8                 | '   long[base2+16]:= loop
188d8     0C E4 85 F1 | 	sub	objptr, #12
188dc                 | ' else
188dc                 | '   long[base2+16]:= len+2
188dc                 | ' word[base2+20]:=vol
188dc     00 15 02 F6 | 	mov	arg02, _var01
188e0     14 14 06 F1 | 	add	arg02, #20
188e4     0A 19 52 FC | 	wrword	arg04, arg02
188e8                 | ' word[base2+24]:= 3546911/splfreq 
188e8     00 13 02 F6 | 	mov	arg01, _var01
188ec     18 12 06 F1 | 	add	arg01, #24
188f0                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
188f0                 | ' long[base2+28]:=$40000000
188f0     18 14 62 FD | 	getqx	arg02
188f4     0A 15 82 F6 | 	negc	arg02, arg02
188f8     09 15 52 FC | 	wrword	arg02, arg01
188fc     00 15 02 F6 | 	mov	arg02, _var01
18900     1A 14 06 F1 | 	add	arg02, #26
18904     0A 01 5A FC | 	wrword	#256, arg02
18908     1C 00 06 F1 | 	add	_var01, #28
1890c     00 00 A0 FF 
18910     00 01 68 FC | 	wrlong	##1073741824, _var01
18914                 | _Audio093b_8_sc_spin2_play_ret
18914     2D 00 64 FD | 	ret
18918                 | 
18918                 | ' until (i >>8) >=len
18918                 | ' 
18918                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
18918                 | _Audio093b_8_sc_spin2_play8
18918                 | ' 
18918                 | ' base2:=@channel1[0]+32*channel
18918     0C E4 05 F1 | 	add	objptr, #12
1891c     F2 00 02 F6 | 	mov	_var01, objptr
18920     05 12 66 F0 | 	shl	arg01, #5
18924     09 01 02 F1 | 	add	_var01, arg01
18928                 | ' long[base2]:=0
18928     00 01 68 FC | 	wrlong	#0, _var01
1892c                 | ' long[base2+8]:=sample+$40000000 
1892c     00 00 20 FF 
18930     00 14 06 F1 | 	add	arg02, ##1073741824
18934     00 13 02 F6 | 	mov	arg01, _var01
18938     08 12 06 F1 | 	add	arg01, #8
1893c     09 15 62 FC | 	wrlong	arg02, arg01
18940                 | ' if loop>=0
18940     00 1C 56 F2 | 	cmps	arg06, #0 wc
18944     0C E4 85 F1 | 	sub	objptr, #12
18948     1C 00 90 CD |  if_b	jmp	#LR__2020
1894c                 | '   long[base2+12]:=loop
1894c     00 15 02 F6 | 	mov	arg02, _var01
18950     0C 14 06 F1 | 	add	arg02, #12
18954     0A 1D 62 FC | 	wrlong	arg06, arg02
18958                 | '   long[base2+16]:= len
18958     00 1D 02 F6 | 	mov	arg06, _var01
1895c     10 1C 06 F1 | 	add	arg06, #16
18960     0E 1B 62 FC | 	wrlong	arg05, arg06
18964     1C 00 90 FD | 	jmp	#LR__2021
18968                 | LR__2020
18968                 | ' else
18968                 | '   long[base2+12]:= len
18968     00 1D 02 F6 | 	mov	arg06, _var01
1896c     0C 1C 06 F1 | 	add	arg06, #12
18970     0E 1B 62 FC | 	wrlong	arg05, arg06
18974                 | '   long[base2+16]:= len+1
18974     01 1A 06 F1 | 	add	arg05, #1
18978     00 13 02 F6 | 	mov	arg01, _var01
1897c     10 12 06 F1 | 	add	arg01, #16
18980     09 1B 62 FC | 	wrlong	arg05, arg01
18984                 | LR__2021
18984     0B 17 52 F6 | 	abs	arg03, arg03 wc
18988     0F 1B 80 FF 
1898c     0B 3F 1A FD | 	qdiv	##3546911, arg03
18990                 | ' word[base2+20]:=vol
18990     00 17 02 F6 | 	mov	arg03, _var01
18994     14 16 06 F1 | 	add	arg03, #20
18998     0B 19 52 FC | 	wrword	arg04, arg03
1899c                 | ' word[base2+24]:= 3546911/splfreq 
1899c     00 13 02 F6 | 	mov	arg01, _var01
189a0     18 12 06 F1 | 	add	arg01, #24
189a4                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
189a4                 | ' long[base2+28]:=$40000000
189a4     18 18 62 FD | 	getqx	arg04
189a8     0C 19 82 F6 | 	negc	arg04, arg04
189ac     09 19 52 FC | 	wrword	arg04, arg01
189b0     00 19 02 F6 | 	mov	arg04, _var01
189b4     1A 18 06 F1 | 	add	arg04, #26
189b8     0C 01 5A FC | 	wrword	#256, arg04
189bc     1C 00 06 F1 | 	add	_var01, #28
189c0     00 00 A0 FF 
189c4     00 01 68 FC | 	wrlong	##1073741824, _var01
189c8                 | _Audio093b_8_sc_spin2_play8_ret
189c8     2D 00 64 FD | 	ret
189cc                 | 
189cc                 | ' 
189cc                 | '     
189cc                 | ' pub stop(channel) 'silence it
189cc                 | _Audio093b_8_sc_spin2_stop
189cc                 | ' 
189cc                 | ' word[@channel1[0]+32*channel+20]:=0
189cc     0C E4 05 F1 | 	add	objptr, #12
189d0     F2 00 02 F6 | 	mov	_var01, objptr
189d4     05 12 66 F0 | 	shl	arg01, #5
189d8     09 01 02 F1 | 	add	_var01, arg01
189dc     14 00 06 F1 | 	add	_var01, #20
189e0     00 01 58 FC | 	wrword	#0, _var01
189e4     0C E4 85 F1 | 	sub	objptr, #12
189e8                 | _Audio093b_8_sc_spin2_stop_ret
189e8     2D 00 64 FD | 	ret
189ec                 | hubexit
189ec     81 00 80 FD | 	jmp	#cogexit
189f0                 | 
189f0                 | __system___setbaud
189f0     14 64 06 FB | 	rdlong	muldiva_, #20
189f4     09 67 02 F6 | 	mov	muldivb_, arg01
189f8     BA 00 A0 FD | 	call	#divide_
189fc     97 06 48 FB | 	callpa	#(@LR__2031-@LR__2030)>>2,fcache_load_ptr_
18a00                 | LR__2030
18a00     3E FA 9D FA | 	rdpin	result1, #62 wc
18a04     FE FC A1 F1 | 	subx	result2, result2
18a08     F4 FF 9F CD |  if_b	jmp	#LR__2030
18a0c                 | LR__2031
18a0c     40 7C 64 FD | 	dirl	#62
18a10     40 7E 64 FD | 	dirl	#63
18a14     F4 66 62 FC | 	wrlong	muldivb_, ptr___system__dat__
18a18     10 66 66 F0 | 	shl	muldivb_, #16
18a1c     07 14 06 F6 | 	mov	arg02, #7
18a20     33 15 02 F1 | 	add	arg02, muldivb_
18a24     3E F8 0C FC | 	wrpin	#124, #62
18a28     3E 14 16 FC | 	wxpin	arg02, #62
18a2c     3F 7C 0C FC | 	wrpin	#62, #63
18a30     14 14 06 F1 | 	add	arg02, #20
18a34     3F 14 16 FC | 	wxpin	arg02, #63
18a38     41 7C 64 FD | 	dirh	#62
18a3c     41 7E 64 FD | 	dirh	#63
18a40                 | __system___setbaud_ret
18a40     2D 00 64 FD | 	ret
18a44                 | 
18a44                 | __system___txraw
18a44     01 4A 05 F6 | 	mov	COUNT_, #1
18a48     A8 00 A0 FD | 	call	#pushregs_
18a4c     09 1F 02 F6 | 	mov	local01, arg01
18a50     97 06 48 FB | 	callpa	#(@LR__2041-@LR__2040)>>2,fcache_load_ptr_
18a54                 | LR__2040
18a54     3E FA 9D FA | 	rdpin	result1, #62 wc
18a58     FE FC A1 F1 | 	subx	result2, result2
18a5c     F4 FF 9F CD |  if_b	jmp	#LR__2040
18a60                 | LR__2041
18a60     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
18a64     C2 01 00 AF 
18a68     00 12 06 A6 |  if_e	mov	arg01, ##230400
18a6c     80 FF BF AD |  if_e	call	#__system___setbaud
18a70     58 7C 64 FD | 	drvl	#62
18a74     3E 1E 26 FC | 	wypin	local01, #62
18a78     01 FA 05 F6 | 	mov	result1, #1
18a7c     A7 F0 03 F6 | 	mov	ptra, fp
18a80     B2 00 A0 FD | 	call	#popregs_
18a84                 | __system___txraw_ret
18a84     2D 00 64 FD | 	ret
18a88                 | 
18a88                 | __system___rxraw
18a88     0D 4A 05 F6 | 	mov	COUNT_, #13
18a8c     A8 00 A0 FD | 	call	#pushregs_
18a90     09 1F 02 F6 | 	mov	local01, arg01
18a94     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
18a98     C2 01 00 AF 
18a9c     00 12 06 A6 |  if_e	mov	arg01, ##230400
18aa0     4C FF BF AD |  if_e	call	#__system___setbaud
18aa4     00 1E 0E F2 | 	cmp	local01, #0 wz
18aa8     20 00 90 AD |  if_e	jmp	#LR__2050
18aac     14 22 06 FB | 	rdlong	local03, #20
18ab0     0A 22 46 F0 | 	shr	local03, #10
18ab4     11 1F 02 FD | 	qmul	local01, local03
18ab8     1A FA 61 FD | 	getct	result1
18abc     18 24 62 FD | 	getqx	local04
18ac0     12 FB 01 F1 | 	add	result1, local04
18ac4     FD 26 02 F6 | 	mov	local05, result1
18ac8     04 00 90 FD | 	jmp	#LR__2051
18acc                 | LR__2050
18acc     00 26 06 F6 | 	mov	local05, #0
18ad0                 | LR__2051
18ad0     01 28 66 F6 | 	neg	local06, #1
18ad4     3F 2A 06 F6 | 	mov	local07, #63
18ad8     00 2C 06 F6 | 	mov	local08, #0
18adc     04 E8 05 F1 | 	add	ptr___system__dat__, #4
18ae0     F4 2E 02 FB | 	rdlong	local09, ptr___system__dat__
18ae4     04 E8 85 F1 | 	sub	ptr___system__dat__, #4
18ae8                 | LR__2052
18ae8     08 2E 16 F4 | 	testb	local09, #8 wc
18aec     09 2E 76 F4 | 	testbn	local09, #9 andc
18af0     0A 2E 46 F0 | 	shr	local09, #10
18af4     01 2C 06 C6 |  if_b	mov	local08, #1
18af8     40 7E 6C 3D |  if_ae	testp	#63 wz
18afc     01 2C 06 26 |  if_nc_and_z	mov	local08, #1
18b00     3F 2E 8E 2A |  if_nc_and_z	rdpin	local09, #63
18b04     04 2E 46 20 |  if_nc_and_z	shr	local09, #4
18b08                 | LR__2053
18b08     00 20 06 F6 | 	mov	local02, #0
18b0c     00 2C 0E F2 | 	cmp	local08, #0 wz
18b10     01 20 66 56 |  if_ne	neg	local02, #1
18b14     00 30 06 F6 | 	mov	local10, #0
18b18     00 22 06 F6 | 	mov	local03, #0
18b1c     00 1E 0E F2 | 	cmp	local01, #0 wz
18b20     01 22 66 56 |  if_ne	neg	local03, #1
18b24     00 24 06 F6 | 	mov	local04, #0
18b28     00 32 06 F6 | 	mov	local11, #0
18b2c     1A FA 61 FD | 	getct	result1
18b30     FD 34 02 F6 | 	mov	local12, result1
18b34     1A 37 02 F6 | 	mov	local13, local12
18b38     13 37 82 F1 | 	sub	local13, local05
18b3c     00 36 56 F2 | 	cmps	local13, #0 wc
18b40     00 32 26 C6 |  if_b	not	local11, #0
18b44     00 32 0E F2 | 	cmp	local11, #0 wz
18b48     00 24 26 56 |  if_ne	not	local04, #0
18b4c     12 23 CA F7 | 	test	local03, local04 wz
18b50     00 30 26 56 |  if_ne	not	local10, #0
18b54     18 21 4A F5 | 	or	local02, local10 wz
18b58     8C FF 9F AD |  if_e	jmp	#LR__2052
18b5c     00 2C 0E F2 | 	cmp	local08, #0 wz
18b60     17 29 02 56 |  if_ne	mov	local06, local09
18b64     14 29 E2 58 |  if_ne	getbyte	local06, local06, #0
18b68     04 E8 05 F1 | 	add	ptr___system__dat__, #4
18b6c     F4 2E 62 FC | 	wrlong	local09, ptr___system__dat__
18b70     04 E8 85 F1 | 	sub	ptr___system__dat__, #4
18b74     14 FB 01 F6 | 	mov	result1, local06
18b78     A7 F0 03 F6 | 	mov	ptra, fp
18b7c     B2 00 A0 FD | 	call	#popregs_
18b80                 | __system___rxraw_ret
18b80     2D 00 64 FD | 	ret
18b84                 | 
18b84                 | __system___getus
18b84     1A FC 71 FD | 	getct	result2 wc
18b88     1A 00 62 FD | 	getct	_var01
18b8c     10 E8 05 F1 | 	add	ptr___system__dat__, #16
18b90     F4 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
18b94     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
18b98     20 00 90 5D |  if_ne	jmp	#LR__2060
18b9c     14 02 06 FB | 	rdlong	_var02, #20
18ba0     A1 07 00 FF 
18ba4     40 02 16 FD | 	qdiv	_var02, ##1000000
18ba8     10 E8 05 F1 | 	add	ptr___system__dat__, #16
18bac     18 FA 61 FD | 	getqx	result1
18bb0     FD 02 02 F6 | 	mov	_var02, result1
18bb4     F4 FA 61 FC | 	wrlong	result1, ptr___system__dat__
18bb8     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
18bbc                 | LR__2060
18bbc     01 FD 11 FD | 	qdiv	result2, _var02
18bc0     19 FC 61 FD | 	getqy	result2
18bc4     28 FC 61 FD | 	setq	result2
18bc8     01 01 12 FD | 	qdiv	_var01, _var02
18bcc     18 FA 61 FD | 	getqx	result1
18bd0                 | __system___getus_ret
18bd0     2D 00 64 FD | 	ret
18bd4                 | 
18bd4                 | __system____builtin_memmove
18bd4     09 01 02 F6 | 	mov	_var01, arg01
18bd8     0A 13 52 F2 | 	cmps	arg01, arg02 wc
18bdc     10 00 90 CD |  if_b	jmp	#LR__2070
18be0     0A 03 02 F6 | 	mov	_var02, arg02
18be4     0B 03 02 F1 | 	add	_var02, arg03
18be8     01 13 52 F2 | 	cmps	arg01, _var02 wc
18bec     48 00 90 CD |  if_b	jmp	#LR__2076
18bf0                 | LR__2070
18bf0     0B 05 02 F6 | 	mov	_var03, arg03
18bf4     02 04 4E F0 | 	shr	_var03, #2 wz
18bf8     18 00 90 AD |  if_e	jmp	#LR__2075
18bfc     97 0A 48 FB | 	callpa	#(@LR__2073-@LR__2071)>>2,fcache_load_ptr_
18c00                 | LR__2071
18c00     02 09 D8 FC | 	rep	@LR__2074, _var03
18c04                 | LR__2072
18c04     0A 05 02 FB | 	rdlong	_var03, arg02
18c08     09 05 62 FC | 	wrlong	_var03, arg01
18c0c     04 12 06 F1 | 	add	arg01, #4
18c10     04 14 06 F1 | 	add	arg02, #4
18c14                 | LR__2073
18c14                 | LR__2074
18c14                 | LR__2075
18c14     02 16 CE F7 | 	test	arg03, #2 wz
18c18     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
18c1c     09 03 52 5C |  if_ne	wrword	_var02, arg01
18c20     02 12 06 51 |  if_ne	add	arg01, #2
18c24     02 14 06 51 |  if_ne	add	arg02, #2
18c28     01 16 CE F7 | 	test	arg03, #1 wz
18c2c     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
18c30     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
18c34     28 00 90 FD | 	jmp	#LR__2082
18c38                 | LR__2076
18c38     0B 13 02 F1 | 	add	arg01, arg03
18c3c     0B 15 02 F1 | 	add	arg02, arg03
18c40     0B 07 0A F6 | 	mov	_var04, arg03 wz
18c44     18 00 90 AD |  if_e	jmp	#LR__2081
18c48     97 0A 48 FB | 	callpa	#(@LR__2079-@LR__2077)>>2,fcache_load_ptr_
18c4c                 | LR__2077
18c4c     03 09 D8 FC | 	rep	@LR__2080, _var04
18c50                 | LR__2078
18c50     01 12 86 F1 | 	sub	arg01, #1
18c54     01 14 86 F1 | 	sub	arg02, #1
18c58     0A 03 C2 FA | 	rdbyte	_var02, arg02
18c5c     09 03 42 FC | 	wrbyte	_var02, arg01
18c60                 | LR__2079
18c60                 | LR__2080
18c60                 | LR__2081
18c60                 | LR__2082
18c60     00 FB 01 F6 | 	mov	result1, _var01
18c64                 | __system____builtin_memmove_ret
18c64     2D 00 64 FD | 	ret
18c68                 | 
18c68                 | __system____builtin_strcpy
18c68     09 01 02 F6 | 	mov	_var01, arg01
18c6c     97 0A 48 FB | 	callpa	#(@LR__2091-@LR__2090)>>2,fcache_load_ptr_
18c70                 | LR__2090
18c70     0A FB C9 FA | 	rdbyte	result1, arg02 wz
18c74     09 FB 41 FC | 	wrbyte	result1, arg01
18c78     01 14 06 F1 | 	add	arg02, #1
18c7c     01 12 06 F1 | 	add	arg01, #1
18c80     EC FF 9F 5D |  if_ne	jmp	#LR__2090
18c84                 | LR__2091
18c84     00 FB 01 F6 | 	mov	result1, _var01
18c88                 | __system____builtin_strcpy_ret
18c88     2D 00 64 FD | 	ret
18c8c                 | 
18c8c                 | __system____topofstack
18c8c     00 4A 05 F6 | 	mov	COUNT_, #0
18c90     A8 00 A0 FD | 	call	#pushregs_
18c94     08 F0 07 F1 | 	add	ptra, #8
18c98     04 4E 05 F1 | 	add	fp, #4
18c9c     A7 12 62 FC | 	wrlong	arg01, fp
18ca0     A7 FA 01 F6 | 	mov	result1, fp
18ca4     04 4E 85 F1 | 	sub	fp, #4
18ca8     A7 F0 03 F6 | 	mov	ptra, fp
18cac     B2 00 A0 FD | 	call	#popregs_
18cb0                 | __system____topofstack_ret
18cb0     2D 00 64 FD | 	ret
18cb4                 | 
18cb4                 | __system___lockmem
18cb4     00 FA 05 F6 | 	mov	result1, #0
18cb8     01 FA 61 FD | 	cogid	result1
18cbc     00 FB 05 F1 | 	add	result1, #256
18cc0                 | LR__2100
18cc0     09 01 0A FB | 	rdlong	_var01, arg01 wz
18cc4     09 FB 61 AC |  if_e	wrlong	result1, arg01
18cc8     09 01 02 AB |  if_e	rdlong	_var01, arg01
18ccc     09 01 02 AB |  if_e	rdlong	_var01, arg01
18cd0     FD 00 0A F2 | 	cmp	_var01, result1 wz
18cd4     E8 FF 9F 5D |  if_ne	jmp	#LR__2100
18cd8                 | __system___lockmem_ret
18cd8     2D 00 64 FD | 	ret
18cdc                 | 
18cdc                 | __system___string_cmp
18cdc     97 14 48 FB | 	callpa	#(@LR__2111-@LR__2110)>>2,fcache_load_ptr_
18ce0                 | LR__2110
18ce0     09 01 C2 FA | 	rdbyte	_var01, arg01
18ce4     0A 03 C2 FA | 	rdbyte	_var02, arg02
18ce8     00 05 02 F6 | 	mov	_var03, _var01
18cec     01 05 8A F1 | 	sub	_var03, _var02 wz
18cf0     01 12 06 F1 | 	add	arg01, #1
18cf4     01 14 06 F1 | 	add	arg02, #1
18cf8     0C 00 90 5D |  if_ne	jmp	#LR__2112
18cfc     00 00 0E F2 | 	cmp	_var01, #0 wz
18d00     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
18d04     D8 FF 9F 5D |  if_ne	jmp	#LR__2110
18d08                 | LR__2111
18d08                 | LR__2112
18d08     02 FB 01 F6 | 	mov	result1, _var03
18d0c                 | __system___string_cmp_ret
18d0c     2D 00 64 FD | 	ret
18d10                 | 
18d10                 | __system___string_concat
18d10     05 4A 05 F6 | 	mov	COUNT_, #5
18d14     A8 00 A0 FD | 	call	#pushregs_
18d18     09 1F 02 F6 | 	mov	local01, arg01
18d1c     0A 21 02 F6 | 	mov	local02, arg02
18d20     0F 13 02 F6 | 	mov	arg01, local01
18d24     09 23 02 F6 | 	mov	local03, arg01
18d28     97 06 48 FB | 	callpa	#(@LR__2121-@LR__2120)>>2,fcache_load_ptr_
18d2c                 | LR__2120
18d2c     11 FB C9 FA | 	rdbyte	result1, local03 wz
18d30     01 22 06 51 |  if_ne	add	local03, #1
18d34     F4 FF 9F 5D |  if_ne	jmp	#LR__2120
18d38                 | LR__2121
18d38     09 23 82 F1 | 	sub	local03, arg01
18d3c     11 25 02 F6 | 	mov	local04, local03
18d40     10 13 02 F6 | 	mov	arg01, local02
18d44     09 23 02 F6 | 	mov	local03, arg01
18d48     97 06 48 FB | 	callpa	#(@LR__2123-@LR__2122)>>2,fcache_load_ptr_
18d4c                 | LR__2122
18d4c     11 FB C9 FA | 	rdbyte	result1, local03 wz
18d50     01 22 06 51 |  if_ne	add	local03, #1
18d54     F4 FF 9F 5D |  if_ne	jmp	#LR__2122
18d58                 | LR__2123
18d58     09 23 82 F1 | 	sub	local03, arg01
18d5c     12 13 02 F6 | 	mov	arg01, local04
18d60     11 13 02 F1 | 	add	arg01, local03
18d64     01 12 06 F1 | 	add	arg01, #1
18d68     00 3D B0 FD | 	call	#__system___gc_alloc_managed
18d6c     FD 26 0A F6 | 	mov	local05, result1 wz
18d70     28 00 90 AD |  if_e	jmp	#LR__2124
18d74     13 13 02 F6 | 	mov	arg01, local05
18d78     0F 15 02 F6 | 	mov	arg02, local01
18d7c     12 17 02 F6 | 	mov	arg03, local04
18d80     50 FE BF FD | 	call	#__system____builtin_memmove
18d84     13 13 02 F6 | 	mov	arg01, local05
18d88     12 13 02 F1 | 	add	arg01, local04
18d8c     01 22 06 F1 | 	add	local03, #1
18d90     10 15 02 F6 | 	mov	arg02, local02
18d94     11 17 02 F6 | 	mov	arg03, local03
18d98     38 FE BF FD | 	call	#__system____builtin_memmove
18d9c                 | LR__2124
18d9c     13 FB 01 F6 | 	mov	result1, local05
18da0     A7 F0 03 F6 | 	mov	ptra, fp
18da4     B2 00 A0 FD | 	call	#popregs_
18da8                 | __system___string_concat_ret
18da8     2D 00 64 FD | 	ret
18dac                 | 
18dac                 | __system___tx
18dac     02 4A 05 F6 | 	mov	COUNT_, #2
18db0     A8 00 A0 FD | 	call	#pushregs_
18db4     09 1F 02 F6 | 	mov	local01, arg01
18db8     0A 1E 0E F2 | 	cmp	local01, #10 wz
18dbc     18 00 90 5D |  if_ne	jmp	#LR__2130
18dc0     08 E8 05 F1 | 	add	ptr___system__dat__, #8
18dc4     F4 20 02 FB | 	rdlong	local02, ptr___system__dat__
18dc8     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
18dcc     02 20 CE F7 | 	test	local02, #2 wz
18dd0     0D 12 06 56 |  if_ne	mov	arg01, #13
18dd4     6C FC BF 5D |  if_ne	call	#__system___txraw
18dd8                 | LR__2130
18dd8     0F 13 02 F6 | 	mov	arg01, local01
18ddc     64 FC BF FD | 	call	#__system___txraw
18de0     A7 F0 03 F6 | 	mov	ptra, fp
18de4     B2 00 A0 FD | 	call	#popregs_
18de8                 | __system___tx_ret
18de8     2D 00 64 FD | 	ret
18dec                 | 
18dec                 | __system___rx
18dec     01 4A 05 F6 | 	mov	COUNT_, #1
18df0     A8 00 A0 FD | 	call	#pushregs_
18df4                 | LR__2140
18df4     00 12 06 F6 | 	mov	arg01, #0
18df8     8C FC BF FD | 	call	#__system___rxraw
18dfc     FD 1E 02 F6 | 	mov	local01, result1
18e00     FF FF 7F FF 
18e04     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
18e08     E8 FF 9F AD |  if_e	jmp	#LR__2140
18e0c     0D 1E 0E F2 | 	cmp	local01, #13 wz
18e10     14 00 90 5D |  if_ne	jmp	#LR__2141
18e14     08 E8 05 F1 | 	add	ptr___system__dat__, #8
18e18     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
18e1c     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
18e20     02 FA CD F7 | 	test	result1, #2 wz
18e24     0A 1E 06 56 |  if_ne	mov	local01, #10
18e28                 | LR__2141
18e28     08 E8 05 F1 | 	add	ptr___system__dat__, #8
18e2c     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
18e30     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
18e34     01 12 CE F7 | 	test	arg01, #1 wz
18e38     1C 00 90 AD |  if_e	jmp	#LR__2144
18e3c     7F 1E 0E F2 | 	cmp	local01, #127 wz
18e40     0C 00 90 5D |  if_ne	jmp	#LR__2142
18e44     08 12 06 F6 | 	mov	arg01, #8
18e48     60 FF BF FD | 	call	#__system___tx
18e4c     08 00 90 FD | 	jmp	#LR__2143
18e50                 | LR__2142
18e50     0F 13 02 F6 | 	mov	arg01, local01
18e54     54 FF BF FD | 	call	#__system___tx
18e58                 | LR__2143
18e58                 | LR__2144
18e58     0F FB 01 F6 | 	mov	result1, local01
18e5c     A7 F0 03 F6 | 	mov	ptra, fp
18e60     B2 00 A0 FD | 	call	#popregs_
18e64                 | __system___rx_ret
18e64     2D 00 64 FD | 	ret
18e68                 | 
18e68                 | __system___pinwrite
18e68     09 01 02 F6 | 	mov	_var01, arg01
18e6c     1F 00 06 F5 | 	and	_var01, #31
18e70     20 12 CE F7 | 	test	arg01, #32 wz
18e74     06 12 46 F0 | 	shr	arg01, #6
18e78     09 13 CA F9 | 	bmask	arg01, arg01
18e7c     00 13 62 F0 | 	shl	arg01, _var01
18e80     00 15 62 F0 | 	shl	arg02, _var01
18e84     1C 00 90 AD |  if_e	jmp	#LR__2150
18e88     09 F7 43 F5 | 	or	dirb, arg01
18e8c     FD 01 02 F6 | 	mov	_var01, outb
18e90     09 01 22 F5 | 	andn	_var01, arg01
18e94     09 15 02 F5 | 	and	arg02, arg01
18e98     0A 01 42 F5 | 	or	_var01, arg02
18e9c     00 FB 03 F6 | 	mov	outb, _var01
18ea0     18 00 90 FD | 	jmp	#LR__2151
18ea4                 | LR__2150
18ea4     09 F5 43 F5 | 	or	dira, arg01
18ea8     FC 01 02 F6 | 	mov	_var01, outa
18eac     09 01 22 F5 | 	andn	_var01, arg01
18eb0     09 15 02 F5 | 	and	arg02, arg01
18eb4     0A 01 42 F5 | 	or	_var01, arg02
18eb8     00 F9 03 F6 | 	mov	outa, _var01
18ebc                 | LR__2151
18ebc                 | __system___pinwrite_ret
18ebc     2D 00 64 FD | 	ret
18ec0                 | 
18ec0                 | __system___basic_read_line
18ec0     06 4A 05 F6 | 	mov	COUNT_, #6
18ec4     A8 00 A0 FD | 	call	#pushregs_
18ec8     09 1F 02 F6 | 	mov	local01, arg01
18ecc     00 20 06 F6 | 	mov	local02, #0
18ed0     18 22 06 F6 | 	mov	local03, #24
18ed4     00 24 06 F6 | 	mov	local04, #0
18ed8     18 12 06 F6 | 	mov	arg01, #24
18edc     8C 3B B0 FD | 	call	#__system___gc_alloc_managed
18ee0     FD 26 0A F6 | 	mov	local05, result1 wz
18ee4     13 FB 01 A6 |  if_e	mov	result1, local05
18ee8     B0 00 90 AD |  if_e	jmp	#LR__2163
18eec                 | LR__2160
18eec     0F 13 02 F6 | 	mov	arg01, local01
18ef0     78 0B B0 FD | 	call	#__system___basic_get_char
18ef4     FD 28 02 F6 | 	mov	local06, result1
18ef8     01 28 56 F2 | 	cmps	local06, #1 wc
18efc     8C 00 90 CD |  if_b	jmp	#LR__2162
18f00     0A 28 0E F2 | 	cmp	local06, #10 wz
18f04     10 00 90 5D |  if_ne	jmp	#LR__2161
18f08     00 24 0E F2 | 	cmp	local04, #0 wz
18f0c     01 20 56 52 |  if_ne	cmps	local02, #1 wc
18f10     01 20 86 11 |  if_a	sub	local02, #1
18f14     74 00 90 FD | 	jmp	#LR__2162
18f18                 | LR__2161
18f18     0D 28 0E F2 | 	cmp	local06, #13 wz
18f1c     01 24 06 A6 |  if_e	mov	local04, #1
18f20     00 24 06 56 |  if_ne	mov	local04, #0
18f24     08 28 0E F2 | 	cmp	local06, #8 wz
18f28     7F 28 0E 52 |  if_ne	cmp	local06, #127 wz
18f2c     01 20 56 A2 |  if_e	cmps	local02, #1 wc
18f30     01 20 86 21 |  if_nc_and_z	sub	local02, #1
18f34     B4 FF 9F AD |  if_e	jmp	#LR__2160
18f38     13 17 02 F6 | 	mov	arg03, local05
18f3c     10 17 02 F1 | 	add	arg03, local02
18f40     0B 29 42 FC | 	wrbyte	local06, arg03
18f44     01 20 06 F1 | 	add	local02, #1
18f48     11 21 0A F2 | 	cmp	local02, local03 wz
18f4c     9C FF 9F 5D |  if_ne	jmp	#LR__2160
18f50     11 13 02 F6 | 	mov	arg01, local03
18f54     20 12 06 F1 | 	add	arg01, #32
18f58     10 3B B0 FD | 	call	#__system___gc_alloc_managed
18f5c     FD 28 0A F6 | 	mov	local06, result1 wz
18f60     14 FB 01 A6 |  if_e	mov	result1, local06
18f64     34 00 90 AD |  if_e	jmp	#LR__2163
18f68     14 13 02 F6 | 	mov	arg01, local06
18f6c     13 15 02 F6 | 	mov	arg02, local05
18f70     11 17 02 F6 | 	mov	arg03, local03
18f74     5C FC BF FD | 	call	#__system____builtin_memmove
18f78     20 22 06 F1 | 	add	local03, #32
18f7c     13 13 02 F6 | 	mov	arg01, local05
18f80     24 3C B0 FD | 	call	#__system___gc_free
18f84     14 27 02 F6 | 	mov	local05, local06
18f88     60 FF 9F FD | 	jmp	#LR__2160
18f8c                 | LR__2162
18f8c     13 29 02 F6 | 	mov	local06, local05
18f90     10 29 02 F1 | 	add	local06, local02
18f94     14 01 48 FC | 	wrbyte	#0, local06
18f98     13 FB 01 F6 | 	mov	result1, local05
18f9c                 | LR__2163
18f9c     A7 F0 03 F6 | 	mov	ptra, fp
18fa0     B2 00 A0 FD | 	call	#popregs_
18fa4                 | __system___basic_read_line_ret
18fa4     2D 00 64 FD | 	ret
18fa8                 | 
18fa8                 | __system___waitms
18fa8     09 01 02 F6 | 	mov	_var01, arg01
18fac     1A 02 62 FD | 	getct	_var02
18fb0     14 04 06 FB | 	rdlong	_var03, #20
18fb4     97 14 48 FB | 	callpa	#(@LR__2171-@LR__2170)>>2,fcache_load_ptr_
18fb8                 | LR__2170
18fb8     01 00 00 FF 
18fbc     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
18fc0     1C 00 90 CD |  if_b	jmp	#LR__2172
18fc4     02 03 02 F1 | 	add	_var02, _var03
18fc8     01 13 02 F6 | 	mov	arg01, _var02
18fcc     00 12 66 FA | 	addct1	arg01, #0
18fd0     24 22 60 FD | 	waitct1
18fd4     01 00 00 FF 
18fd8     E8 01 86 F1 | 	sub	_var01, ##1000
18fdc     D8 FF 9F FD | 	jmp	#LR__2170
18fe0                 | LR__2171
18fe0                 | LR__2172
18fe0     01 00 56 F2 | 	cmps	_var01, #1 wc
18fe4     28 00 90 CD |  if_b	jmp	#LR__2173
18fe8     02 01 02 FD | 	qmul	_var01, _var03
18fec     01 00 00 FF 
18ff0     E8 17 06 F6 | 	mov	arg03, ##1000
18ff4     19 FA 61 FD | 	getqy	result1
18ff8     18 12 62 FD | 	getqx	arg01
18ffc     28 FA 61 FD | 	setq	result1
19000     0B 13 12 FD | 	qdiv	arg01, arg03
19004     18 12 62 FD | 	getqx	arg01
19008     01 13 62 FA | 	addct1	arg01, _var02
1900c     24 22 60 FD | 	waitct1
19010                 | LR__2173
19010                 | __system___waitms_ret
19010     2D 00 64 FD | 	ret
19014                 | 
19014                 | __system___waitus
19014     09 01 02 F6 | 	mov	_var01, arg01
19018     1A 02 62 FD | 	getct	_var02
1901c     14 04 06 FB | 	rdlong	_var03, #20
19020     97 14 48 FB | 	callpa	#(@LR__2181-@LR__2180)>>2,fcache_load_ptr_
19024                 | LR__2180
19024     A1 07 00 FF 
19028     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
1902c     1C 00 90 CD |  if_b	jmp	#LR__2182
19030     02 03 02 F1 | 	add	_var02, _var03
19034     01 13 02 F6 | 	mov	arg01, _var02
19038     00 12 66 FA | 	addct1	arg01, #0
1903c     24 22 60 FD | 	waitct1
19040     A1 07 00 FF 
19044     40 00 86 F1 | 	sub	_var01, ##1000000
19048     D8 FF 9F FD | 	jmp	#LR__2180
1904c                 | LR__2181
1904c                 | LR__2182
1904c     01 00 56 F2 | 	cmps	_var01, #1 wc
19050     28 00 90 CD |  if_b	jmp	#LR__2183
19054     02 01 02 FD | 	qmul	_var01, _var03
19058     A1 07 00 FF 
1905c     40 16 06 F6 | 	mov	arg03, ##1000000
19060     19 FA 61 FD | 	getqy	result1
19064     18 12 62 FD | 	getqx	arg01
19068     28 FA 61 FD | 	setq	result1
1906c     0B 13 12 FD | 	qdiv	arg01, arg03
19070     18 FA 61 FD | 	getqx	result1
19074     FD 02 62 FA | 	addct1	_var02, result1
19078     24 22 60 FD | 	waitct1
1907c                 | LR__2183
1907c                 | __system___waitus_ret
1907c     2D 00 64 FD | 	ret
19080                 | 
19080                 | __system___mount
19080     0B 4A 05 F6 | 	mov	COUNT_, #11
19084     A8 00 A0 FD | 	call	#pushregs_
19088     09 1F 02 F6 | 	mov	local01, arg01
1908c     0A 21 0A F6 | 	mov	local02, arg02 wz
19090     01 22 66 F6 | 	neg	local03, #1
19094     01 FA 65 A6 |  if_e	neg	result1, #1
19098     98 02 90 AD |  if_e	jmp	#LR__2205
1909c     0F FB C1 FA | 	rdbyte	result1, local01
190a0     2F FA 0D F2 | 	cmp	result1, #47 wz
190a4     28 00 90 5D |  if_ne	jmp	#LR__2192
190a8     0F 13 02 F6 | 	mov	arg01, local01
190ac     09 25 02 F6 | 	mov	local04, arg01
190b0     97 06 48 FB | 	callpa	#(@LR__2191-@LR__2190)>>2,fcache_load_ptr_
190b4                 | LR__2190
190b4     12 FB C9 FA | 	rdbyte	result1, local04 wz
190b8     01 24 06 51 |  if_ne	add	local04, #1
190bc     F4 FF 9F 5D |  if_ne	jmp	#LR__2190
190c0                 | LR__2191
190c0     09 25 82 F1 | 	sub	local04, arg01
190c4     12 FB 01 F6 | 	mov	result1, local04
190c8     10 FA 55 F2 | 	cmps	result1, #16 wc
190cc     14 00 90 CD |  if_b	jmp	#LR__2193
190d0                 | LR__2192
190d0     20 E8 05 F1 | 	add	ptr___system__dat__, #32
190d4     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
190d8     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
190dc     01 FA 65 F6 | 	neg	result1, #1
190e0     50 02 90 FD | 	jmp	#LR__2205
190e4                 | LR__2193
190e4     00 26 06 F6 | 	mov	local05, #0
190e8                 | LR__2194
190e8     04 26 56 F2 | 	cmps	local05, #4 wc
190ec     B0 00 90 3D |  if_ae	jmp	#LR__2199
190f0     13 13 02 F6 | 	mov	arg01, local05
190f4     02 12 66 F0 | 	shl	arg01, #2
190f8     64 E8 05 F1 | 	add	ptr___system__dat__, #100
190fc     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
19100     09 FB 09 FB | 	rdlong	result1, arg01 wz
19104     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
19108     00 22 56 A2 |  if_e	cmps	local03, #0 wc
1910c     13 23 02 86 |  if_c_and_z	mov	local03, local05
19110     84 00 90 8D |  if_c_and_z	jmp	#LR__2198
19114     13 13 02 F6 | 	mov	arg01, local05
19118     02 12 66 F0 | 	shl	arg01, #2
1911c     64 E8 05 F1 | 	add	ptr___system__dat__, #100
19120     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
19124     09 13 02 FB | 	rdlong	arg01, arg01
19128     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
1912c     09 25 02 F6 | 	mov	local04, arg01
19130     97 06 48 FB | 	callpa	#(@LR__2196-@LR__2195)>>2,fcache_load_ptr_
19134                 | LR__2195
19134     12 FB C9 FA | 	rdbyte	result1, local04 wz
19138     01 24 06 51 |  if_ne	add	local04, #1
1913c     F4 FF 9F 5D |  if_ne	jmp	#LR__2195
19140                 | LR__2196
19140     09 25 82 F1 | 	sub	local04, arg01
19144     12 29 02 F6 | 	mov	local06, local04
19148     14 13 02 F6 | 	mov	arg01, local06
1914c     0F 13 02 F1 | 	add	arg01, local01
19150     09 FB C1 FA | 	rdbyte	result1, arg01
19154     2F FA 0D F2 | 	cmp	result1, #47 wz
19158     14 2B 02 56 |  if_ne	mov	local07, local06
1915c     0F 2B 02 51 |  if_ne	add	local07, local01
19160     15 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
19164     30 00 90 5D |  if_ne	jmp	#LR__2197
19168     13 17 02 F6 | 	mov	arg03, local05
1916c     02 16 66 F0 | 	shl	arg03, #2
19170     64 E8 05 F1 | 	add	ptr___system__dat__, #100
19174     F4 16 02 F1 | 	add	arg03, ptr___system__dat__
19178     0B 15 02 FB | 	rdlong	arg02, arg03
1917c     0F 13 02 F6 | 	mov	arg01, local01
19180     14 17 02 F6 | 	mov	arg03, local06
19184     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
19188     24 4D B0 FD | 	call	#__system__strncmp
1918c     00 FA 0D F2 | 	cmp	result1, #0 wz
19190     13 23 02 A6 |  if_e	mov	local03, local05
19194     08 00 90 AD |  if_e	jmp	#LR__2199
19198                 | LR__2197
19198                 | LR__2198
19198     01 26 06 F1 | 	add	local05, #1
1919c     48 FF 9F FD | 	jmp	#LR__2194
191a0                 | LR__2199
191a0     FF FF 7F FF 
191a4     FF 23 0E F2 | 	cmp	local03, ##-1 wz
191a8     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
191ac     F4 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
191b0     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
191b4     01 FA 65 A6 |  if_e	neg	result1, #1
191b8     78 01 90 AD |  if_e	jmp	#LR__2205
191bc     11 27 02 F6 | 	mov	local05, local03
191c0     13 2B 02 F6 | 	mov	local07, local05
191c4     02 2A 66 F0 | 	shl	local07, #2
191c8     74 E8 05 F1 | 	add	ptr___system__dat__, #116
191cc     F4 2A 02 F1 | 	add	local07, ptr___system__dat__
191d0     15 29 0A FB | 	rdlong	local06, local07 wz
191d4     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
191d8     58 00 90 AD |  if_e	jmp	#LR__2200
191dc     4C 28 06 F1 | 	add	local06, #76
191e0     14 2B 0A FB | 	rdlong	local07, local06 wz
191e4     4C 28 86 F1 | 	sub	local06, #76
191e8     48 00 90 AD |  if_e	jmp	#LR__2200
191ec     4C 28 06 F1 | 	add	local06, #76
191f0     14 2B 02 FB | 	rdlong	local07, local06
191f4     15 23 02 F6 | 	mov	local03, local07
191f8     13 2A 46 F7 | 	zerox	local07, #19
191fc     14 22 46 F0 | 	shr	local03, #20
19200     02 22 66 F0 | 	shl	local03, #2
19204     ED 22 02 F1 | 	add	local03, __methods__
19208     11 23 02 FB | 	rdlong	local03, local03
1920c     13 29 02 F6 | 	mov	local06, local05
19210     02 28 66 F0 | 	shl	local06, #2
19214     64 E8 05 F1 | 	add	ptr___system__dat__, #100
19218     F4 28 02 F1 | 	add	local06, ptr___system__dat__
1921c     14 13 02 FB | 	rdlong	arg01, local06
19220     F2 28 02 F6 | 	mov	local06, objptr
19224     15 E5 01 F6 | 	mov	objptr, local07
19228     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
1922c     2D 22 62 FD | 	call	local03
19230     14 E5 01 F6 | 	mov	objptr, local06
19234                 | LR__2200
19234     13 2D 02 F6 | 	mov	local08, local05
19238     02 2C 66 F0 | 	shl	local08, #2
1923c     74 E8 05 F1 | 	add	ptr___system__dat__, #116
19240     F4 2C 02 F1 | 	add	local08, ptr___system__dat__
19244     16 21 62 FC | 	wrlong	local02, local08
19248     00 20 0E F2 | 	cmp	local02, #0 wz
1924c     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
19250     18 00 90 5D |  if_ne	jmp	#LR__2201
19254     02 26 66 F0 | 	shl	local05, #2
19258     64 E8 05 F1 | 	add	ptr___system__dat__, #100
1925c     F4 26 02 F1 | 	add	local05, ptr___system__dat__
19260     13 01 68 FC | 	wrlong	#0, local05
19264     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
19268     C4 00 90 FD | 	jmp	#LR__2204
1926c                 | LR__2201
1926c     13 2F 02 F6 | 	mov	local09, local05
19270     04 2E 66 F0 | 	shl	local09, #4
19274     24 E8 05 F1 | 	add	ptr___system__dat__, #36
19278     F4 2E 02 F1 | 	add	local09, ptr___system__dat__
1927c     17 13 02 F6 | 	mov	arg01, local09
19280     0F 15 02 F6 | 	mov	arg02, local01
19284     10 16 06 F6 | 	mov	arg03, #16
19288     24 E8 85 F1 | 	sub	ptr___system__dat__, #36
1928c     74 4B B0 FD | 	call	#__system__strncpy
19290     48 20 06 F1 | 	add	local02, #72
19294     10 2D 0A FB | 	rdlong	local08, local02 wz
19298     48 20 86 F1 | 	sub	local02, #72
1929c     7C 00 90 AD |  if_e	jmp	#LR__2203
192a0     48 20 06 F1 | 	add	local02, #72
192a4     10 2D 02 FB | 	rdlong	local08, local02
192a8     16 31 02 F6 | 	mov	local10, local08
192ac     13 2C 46 F7 | 	zerox	local08, #19
192b0     14 30 46 F0 | 	shr	local10, #20
192b4     02 30 66 F0 | 	shl	local10, #2
192b8     ED 30 02 F1 | 	add	local10, __methods__
192bc     18 31 02 FB | 	rdlong	local10, local10
192c0     17 13 02 F6 | 	mov	arg01, local09
192c4     F2 32 02 F6 | 	mov	local11, objptr
192c8     16 E5 01 F6 | 	mov	objptr, local08
192cc     2D 30 62 FD | 	call	local10
192d0     19 E5 01 F6 | 	mov	objptr, local11
192d4     FD 12 0A F6 | 	mov	arg01, result1 wz
192d8     40 00 90 AD |  if_e	jmp	#LR__2202
192dc     13 2D 02 F6 | 	mov	local08, local05
192e0     02 2C 66 F0 | 	shl	local08, #2
192e4     74 E8 05 F1 | 	add	ptr___system__dat__, #116
192e8     F4 2C 02 F1 | 	add	local08, ptr___system__dat__
192ec     16 01 68 FC | 	wrlong	#0, local08
192f0     02 26 66 F0 | 	shl	local05, #2
192f4     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
192f8     F4 26 02 F1 | 	add	local05, ptr___system__dat__
192fc     13 01 68 FC | 	wrlong	#0, local05
19300     09 13 6A F6 | 	neg	arg01, arg01 wz
19304     44 E8 85 F1 | 	sub	ptr___system__dat__, #68
19308     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1930c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
19310     01 FA 65 56 |  if_ne	neg	result1, #1
19314     00 FA 05 A6 |  if_e	mov	result1, #0
19318     18 00 90 FD | 	jmp	#LR__2205
1931c                 | LR__2202
1931c                 | LR__2203
1931c     02 26 66 F0 | 	shl	local05, #2
19320     64 E8 05 F1 | 	add	ptr___system__dat__, #100
19324     F4 26 02 F1 | 	add	local05, ptr___system__dat__
19328     13 2F 62 FC | 	wrlong	local09, local05
1932c     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
19330                 | LR__2204
19330     00 FA 05 F6 | 	mov	result1, #0
19334                 | LR__2205
19334     A7 F0 03 F6 | 	mov	ptra, fp
19338     B2 00 A0 FD | 	call	#popregs_
1933c                 | __system___mount_ret
1933c     2D 00 64 FD | 	ret
19340                 | 
19340                 | __system___chdir
19340     00 4A 05 F6 | 	mov	COUNT_, #0
19344     A8 00 A0 FD | 	call	#pushregs_
19348     40 F0 07 F1 | 	add	ptra, #64
1934c     04 4E 05 F1 | 	add	fp, #4
19350     A7 12 62 FC | 	wrlong	arg01, fp
19354     04 4E 05 F1 | 	add	fp, #4
19358     A7 14 02 F6 | 	mov	arg02, fp
1935c     08 4E 85 F1 | 	sub	fp, #8
19360     80 47 B0 FD | 	call	#__system__stat
19364     3C 4E 05 F1 | 	add	fp, #60
19368     A7 FA 61 FC | 	wrlong	result1, fp
1936c     3C 4E 85 F1 | 	sub	fp, #60
19370     00 FA 0D F2 | 	cmp	result1, #0 wz
19374     3C 4E 05 51 |  if_ne	add	fp, #60
19378     A7 FA 01 5B |  if_ne	rdlong	result1, fp
1937c     3C 4E 85 51 |  if_ne	sub	fp, #60
19380     BC 00 90 5D |  if_ne	jmp	#LR__2212
19384     10 4E 05 F1 | 	add	fp, #16
19388     A7 12 02 FB | 	rdlong	arg01, fp
1938c     10 4E 85 F1 | 	sub	fp, #16
19390     78 00 00 FF 
19394     00 12 06 F5 | 	and	arg01, ##61440
19398     08 00 00 FF 
1939c     00 12 0E F2 | 	cmp	arg01, ##4096 wz
193a0     20 E8 05 51 |  if_ne	add	ptr___system__dat__, #32
193a4     F4 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
193a8     20 E8 85 51 |  if_ne	sub	ptr___system__dat__, #32
193ac     01 FA 65 56 |  if_ne	neg	result1, #1
193b0     8C 00 90 5D |  if_ne	jmp	#LR__2212
193b4     04 4E 05 F1 | 	add	fp, #4
193b8     A7 16 02 FB | 	rdlong	arg03, fp
193bc     04 4E 85 F1 | 	sub	fp, #4
193c0     0B 17 C2 FA | 	rdbyte	arg03, arg03
193c4     2F 16 0E F2 | 	cmp	arg03, #47 wz
193c8     24 00 90 5D |  if_ne	jmp	#LR__2210
193cc     84 E8 05 F1 | 	add	ptr___system__dat__, #132
193d0     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
193d4     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
193d8     04 4E 05 F1 | 	add	fp, #4
193dc     A7 14 02 FB | 	rdlong	arg02, fp
193e0     04 4E 85 F1 | 	sub	fp, #4
193e4     00 17 06 F6 | 	mov	arg03, #256
193e8     18 4A B0 FD | 	call	#__system__strncpy
193ec     4C 00 90 FD | 	jmp	#LR__2211
193f0                 | LR__2210
193f0     84 E9 05 F1 | 	add	ptr___system__dat__, #388
193f4     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
193f8     38 4E 05 F1 | 	add	fp, #56
193fc     A7 12 62 FC | 	wrlong	arg01, fp
19400     38 4E 85 F1 | 	sub	fp, #56
19404     00 E9 85 F1 | 	sub	ptr___system__dat__, #256
19408     F4 14 02 F6 | 	mov	arg02, ptr___system__dat__
1940c     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
19410     00 17 06 F6 | 	mov	arg03, #256
19414     EC 49 B0 FD | 	call	#__system__strncpy
19418     38 4E 05 F1 | 	add	fp, #56
1941c     A7 12 02 FB | 	rdlong	arg01, fp
19420     34 4E 85 F1 | 	sub	fp, #52
19424     A7 14 02 FB | 	rdlong	arg02, fp
19428     04 4E 85 F1 | 	sub	fp, #4
1942c     84 E8 05 F1 | 	add	ptr___system__dat__, #132
19430     F4 16 02 F6 | 	mov	arg03, ptr___system__dat__
19434     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
19438     10 00 B0 FD | 	call	#__system____getvfsforfile
1943c                 | LR__2211
1943c     00 FA 05 F6 | 	mov	result1, #0
19440                 | LR__2212
19440     A7 F0 03 F6 | 	mov	ptra, fp
19444     B2 00 A0 FD | 	call	#popregs_
19448                 | __system___chdir_ret
19448     2D 00 64 FD | 	ret
1944c                 | 
1944c                 | __system____getvfsforfile
1944c     0E 4A 05 F6 | 	mov	COUNT_, #14
19450     A8 00 A0 FD | 	call	#pushregs_
19454     09 1F 02 F6 | 	mov	local01, arg01
19458     0A 21 02 F6 | 	mov	local02, arg02
1945c     0B 23 02 F6 | 	mov	local03, arg03
19460     97 10 48 FB | 	callpa	#(@LR__2221-@LR__2220)>>2,fcache_load_ptr_
19464                 | LR__2220
19464     10 FB C1 FA | 	rdbyte	result1, local02
19468     2F FA 0D F2 | 	cmp	result1, #47 wz
1946c     01 20 06 A1 |  if_e	add	local02, #1
19470     10 25 C2 AA |  if_e	rdbyte	local04, local02
19474     01 20 86 A1 |  if_e	sub	local02, #1
19478     2F 24 0E A2 |  if_e	cmp	local04, #47 wz
1947c     01 20 06 A1 |  if_e	add	local02, #1
19480     E0 FF 9F AD |  if_e	jmp	#LR__2220
19484                 | LR__2221
19484     10 25 C2 FA | 	rdbyte	local04, local02
19488     2F 24 0E F2 | 	cmp	local04, #47 wz
1948c     14 00 90 5D |  if_ne	jmp	#LR__2222
19490     0F 13 02 F6 | 	mov	arg01, local01
19494     10 15 02 F6 | 	mov	arg02, local02
19498     00 17 06 F6 | 	mov	arg03, #256
1949c     64 49 B0 FD | 	call	#__system__strncpy
194a0     7C 00 90 FD | 	jmp	#LR__2224
194a4                 | LR__2222
194a4     84 E8 05 F1 | 	add	ptr___system__dat__, #132
194a8     F4 14 02 F6 | 	mov	arg02, ptr___system__dat__
194ac     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
194b0     0F 13 02 F6 | 	mov	arg01, local01
194b4     00 17 06 F6 | 	mov	arg03, #256
194b8     48 49 B0 FD | 	call	#__system__strncpy
194bc     10 25 CA FA | 	rdbyte	local04, local02 wz
194c0     5C 00 90 AD |  if_e	jmp	#LR__2223
194c4     10 25 C2 FA | 	rdbyte	local04, local02
194c8     2E 24 0E F2 | 	cmp	local04, #46 wz
194cc     01 20 06 A1 |  if_e	add	local02, #1
194d0     10 27 C2 AA |  if_e	rdbyte	local05, local02
194d4     01 20 86 A1 |  if_e	sub	local02, #1
194d8     13 29 02 A6 |  if_e	mov	local06, local05
194dc     07 28 4E A7 |  if_e	zerox	local06, #7 wz
194e0     3C 00 90 AD |  if_e	jmp	#LR__2223
194e4     0F 27 C2 FA | 	rdbyte	local05, local01
194e8     2F 26 0E F2 | 	cmp	local05, #47 wz
194ec     01 1E 06 A1 |  if_e	add	local01, #1
194f0     0F 25 C2 AA |  if_e	rdbyte	local04, local01
194f4     01 1E 86 A1 |  if_e	sub	local01, #1
194f8     00 24 4E A2 |  if_e	cmps	local04, #0 wz
194fc     40 01 00 5F 
19500     C0 15 06 56 |  if_ne	mov	arg02, ##@LR__4270
19504     0F 13 02 56 |  if_ne	mov	arg01, local01
19508     00 17 06 56 |  if_ne	mov	arg03, #256
1950c     40 49 B0 5D |  if_ne	call	#__system__strncat
19510     0F 13 02 F6 | 	mov	arg01, local01
19514     10 15 02 F6 | 	mov	arg02, local02
19518     00 17 06 F6 | 	mov	arg03, #256
1951c     30 49 B0 FD | 	call	#__system__strncat
19520                 | LR__2223
19520                 | LR__2224
19520     0F 13 02 F6 | 	mov	arg01, local01
19524     E8 4A B0 FD | 	call	#__system___normalizeName
19528     0F 25 CA FA | 	rdbyte	local04, local01 wz
1952c     1C 00 90 AD |  if_e	jmp	#LR__2225
19530     0F 25 C2 FA | 	rdbyte	local04, local01
19534     2F 24 0E F2 | 	cmp	local04, #47 wz
19538     01 1E 06 A1 |  if_e	add	local01, #1
1953c     0F 29 C2 AA |  if_e	rdbyte	local06, local01
19540     01 1E 86 A1 |  if_e	sub	local01, #1
19544     00 28 4E A2 |  if_e	cmps	local06, #0 wz
19548     18 00 90 5D |  if_ne	jmp	#LR__2226
1954c                 | LR__2225
1954c     01 00 00 FF 
19550     84 E8 05 F1 | 	add	ptr___system__dat__, ##644
19554     F4 FA 01 F6 | 	mov	result1, ptr___system__dat__
19558     01 00 00 FF 
1955c     84 E8 85 F1 | 	sub	ptr___system__dat__, ##644
19560     EC 01 90 FD | 	jmp	#LR__2240
19564                 | LR__2226
19564     00 2A 06 F6 | 	mov	local07, #0
19568                 | LR__2227
19568     04 2A 56 F2 | 	cmps	local07, #4 wc
1956c     CC 01 90 3D |  if_ae	jmp	#LR__2239
19570     15 29 02 F6 | 	mov	local06, local07
19574     02 28 66 F0 | 	shl	local06, #2
19578     64 E8 05 F1 | 	add	ptr___system__dat__, #100
1957c     F4 28 02 F1 | 	add	local06, ptr___system__dat__
19580     14 29 0A FB | 	rdlong	local06, local06 wz
19584     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
19588     A8 01 90 AD |  if_e	jmp	#LR__2238
1958c     15 25 02 F6 | 	mov	local04, local07
19590     02 24 66 F0 | 	shl	local04, #2
19594     64 E8 05 F1 | 	add	ptr___system__dat__, #100
19598     F4 24 02 F1 | 	add	local04, ptr___system__dat__
1959c     12 13 02 FB | 	rdlong	arg01, local04
195a0     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
195a4     09 2D 02 F6 | 	mov	local08, arg01
195a8     97 06 48 FB | 	callpa	#(@LR__2229-@LR__2228)>>2,fcache_load_ptr_
195ac                 | LR__2228
195ac     16 FB C9 FA | 	rdbyte	result1, local08 wz
195b0     01 2C 06 51 |  if_ne	add	local08, #1
195b4     F4 FF 9F 5D |  if_ne	jmp	#LR__2228
195b8                 | LR__2229
195b8     09 2D 82 F1 | 	sub	local08, arg01
195bc     16 2F 02 F6 | 	mov	local09, local08
195c0     17 25 02 F6 | 	mov	local04, local09
195c4     0F 25 02 F1 | 	add	local04, local01
195c8     12 29 C2 FA | 	rdbyte	local06, local04
195cc     2F 28 0E F2 | 	cmp	local06, #47 wz
195d0     17 31 02 56 |  if_ne	mov	local10, local09
195d4     0F 31 02 51 |  if_ne	add	local10, local01
195d8     18 27 CA 5A |  if_ne	rdbyte	local05, local10 wz
195dc     54 01 90 5D |  if_ne	jmp	#LR__2237
195e0     15 17 02 F6 | 	mov	arg03, local07
195e4     02 16 66 F0 | 	shl	arg03, #2
195e8     64 E8 05 F1 | 	add	ptr___system__dat__, #100
195ec     F4 16 02 F1 | 	add	arg03, ptr___system__dat__
195f0     0B 15 02 FB | 	rdlong	arg02, arg03
195f4     17 17 02 F6 | 	mov	arg03, local09
195f8     0F 13 02 F6 | 	mov	arg01, local01
195fc     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
19600     AC 48 B0 FD | 	call	#__system__strncmp
19604     00 FA 4D F2 | 	cmps	result1, #0 wz
19608     28 01 90 5D |  if_ne	jmp	#LR__2237
1960c     15 33 02 F6 | 	mov	local11, local07
19610     02 32 66 F0 | 	shl	local11, #2
19614     74 E8 05 F1 | 	add	ptr___system__dat__, #116
19618     F4 32 02 F1 | 	add	local11, ptr___system__dat__
1961c     19 35 02 FB | 	rdlong	local12, local11
19620     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
19624     97 22 48 FB | 	callpa	#(@LR__2231-@LR__2230)>>2,fcache_load_ptr_
19628                 | LR__2230
19628     17 29 02 F6 | 	mov	local06, local09
1962c     01 28 06 F1 | 	add	local06, #1
19630     0F 29 02 F1 | 	add	local06, local01
19634     14 33 C2 FA | 	rdbyte	local11, local06
19638     2E 32 0E F2 | 	cmp	local11, #46 wz
1963c     2C 00 90 5D |  if_ne	jmp	#LR__2232
19640     17 33 02 F6 | 	mov	local11, local09
19644     02 32 06 F1 | 	add	local11, #2
19648     0F 33 02 F1 | 	add	local11, local01
1964c     19 31 C2 FA | 	rdbyte	local10, local11
19650     2F 30 0E F2 | 	cmp	local10, #47 wz
19654     17 37 02 56 |  if_ne	mov	local13, local09
19658     02 36 06 51 |  if_ne	add	local13, #2
1965c     0F 37 02 51 |  if_ne	add	local13, local01
19660     1B 39 CA 5A |  if_ne	rdbyte	local14, local13 wz
19664     01 2E 06 A1 |  if_e	add	local09, #1
19668     BC FF 9F AD |  if_e	jmp	#LR__2230
1966c                 | LR__2231
1966c                 | LR__2232
1966c     00 22 0E F2 | 	cmp	local03, #0 wz
19670     11 13 02 56 |  if_ne	mov	arg01, local03
19674     0F 15 02 56 |  if_ne	mov	arg02, local01
19678     00 17 06 56 |  if_ne	mov	arg03, #256
1967c     84 47 B0 5D |  if_ne	call	#__system__strncpy
19680     0F 15 02 F6 | 	mov	arg02, local01
19684     17 15 02 F1 | 	add	arg02, local09
19688     01 14 06 F1 | 	add	arg02, #1
1968c     0F 13 02 F6 | 	mov	arg01, local01
19690     D4 F5 BF FD | 	call	#__system____builtin_strcpy
19694     0F 13 02 F6 | 	mov	arg01, local01
19698     09 2D 02 F6 | 	mov	local08, arg01
1969c     97 06 48 FB | 	callpa	#(@LR__2234-@LR__2233)>>2,fcache_load_ptr_
196a0                 | LR__2233
196a0     16 FB C9 FA | 	rdbyte	result1, local08 wz
196a4     01 2C 06 51 |  if_ne	add	local08, #1
196a8     F4 FF 9F 5D |  if_ne	jmp	#LR__2233
196ac                 | LR__2234
196ac     09 2D 82 F1 | 	sub	local08, arg01
196b0     16 2F 02 F6 | 	mov	local09, local08
196b4                 | LR__2235
196b4     01 2E 56 F2 | 	cmps	local09, #1 wc
196b8     70 00 90 CD |  if_b	jmp	#LR__2236
196bc     17 25 02 F6 | 	mov	local04, local09
196c0     0F 25 02 F1 | 	add	local04, local01
196c4     12 33 C2 FA | 	rdbyte	local11, local04
196c8     2F 32 0E F2 | 	cmp	local11, #47 wz
196cc     17 33 02 A6 |  if_e	mov	local11, local09
196d0     0F 33 02 A1 |  if_e	add	local11, local01
196d4     19 01 48 AC |  if_e	wrbyte	#0, local11
196d8     01 2E 86 A1 |  if_e	sub	local09, #1
196dc     D4 FF 9F AD |  if_e	jmp	#LR__2235
196e0     17 25 02 F6 | 	mov	local04, local09
196e4     0F 25 02 F1 | 	add	local04, local01
196e8     12 33 C2 FA | 	rdbyte	local11, local04
196ec     2E 32 0E F2 | 	cmp	local11, #46 wz
196f0     38 00 90 5D |  if_ne	jmp	#LR__2236
196f4     02 2E 56 F2 | 	cmps	local09, #2 wc
196f8     30 00 90 CD |  if_b	jmp	#LR__2236
196fc     17 39 02 F6 | 	mov	local14, local09
19700     01 38 86 F1 | 	sub	local14, #1
19704     0F 39 02 F1 | 	add	local14, local01
19708     1C 27 C2 FA | 	rdbyte	local05, local14
1970c     2F 26 0E F2 | 	cmp	local05, #47 wz
19710     18 00 90 5D |  if_ne	jmp	#LR__2236
19714     17 25 02 F6 | 	mov	local04, local09
19718     01 24 86 F1 | 	sub	local04, #1
1971c     0F 25 02 F1 | 	add	local04, local01
19720     12 01 48 FC | 	wrbyte	#0, local04
19724     02 2E 86 F1 | 	sub	local09, #2
19728     88 FF 9F FD | 	jmp	#LR__2235
1972c                 | LR__2236
1972c     1A FB 01 F6 | 	mov	result1, local12
19730     1C 00 90 FD | 	jmp	#LR__2240
19734                 | LR__2237
19734                 | LR__2238
19734     01 2A 06 F1 | 	add	local07, #1
19738     2C FE 9F FD | 	jmp	#LR__2227
1973c                 | LR__2239
1973c     03 00 00 FF 
19740     38 E9 05 F1 | 	add	ptr___system__dat__, ##1848
19744     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
19748     03 00 00 FF 
1974c     38 E9 85 F1 | 	sub	ptr___system__dat__, ##1848
19750                 | LR__2240
19750     A7 F0 03 F6 | 	mov	ptra, fp
19754     B2 00 A0 FD | 	call	#popregs_
19758                 | __system____getvfsforfile_ret
19758     2D 00 64 FD | 	ret
1975c                 | 
1975c                 | __system___basic_open
1975c     05 4A 05 F6 | 	mov	COUNT_, #5
19760     A8 00 A0 FD | 	call	#pushregs_
19764     0A 1F 02 F6 | 	mov	local01, arg02
19768     0B 21 02 F6 | 	mov	local02, arg03
1976c     0C 23 02 F6 | 	mov	local03, arg04
19770     00 24 06 F6 | 	mov	local04, #0
19774     64 46 B0 FD | 	call	#__system____getftab
19778     FD 26 0A F6 | 	mov	local05, result1 wz
1977c     18 00 90 5D |  if_ne	jmp	#LR__2250
19780     EE 12 02 F6 | 	mov	arg01, abortchain
19784     0C 14 06 F6 | 	mov	arg02, #12
19788     01 16 06 F6 | 	mov	arg03, #1
1978c     DA 00 A0 FD | 	call	#__longjmp
19790     01 FA 65 F6 | 	neg	result1, #1
19794     14 01 90 FD | 	jmp	#LR__2259
19798                 | LR__2250
19798     08 26 06 F1 | 	add	local05, #8
1979c     13 FB 09 FB | 	rdlong	result1, local05 wz
197a0     08 26 86 F1 | 	sub	local05, #8
197a4     13 13 02 56 |  if_ne	mov	arg01, local05
197a8     C0 3D B0 5D |  if_ne	call	#__system___closeraw
197ac     00 1E 0E F2 | 	cmp	local01, #0 wz
197b0     00 20 0E A2 |  if_e	cmp	local02, #0 wz
197b4     00 22 0E A2 |  if_e	cmp	local03, #0 wz
197b8     3C 00 90 AD |  if_e	jmp	#LR__2252
197bc     0C 12 06 F6 | 	mov	arg01, #12
197c0     A8 32 B0 FD | 	call	#__system___gc_alloc_managed
197c4     FD 24 0A F6 | 	mov	local04, result1 wz
197c8     18 00 90 5D |  if_ne	jmp	#LR__2251
197cc     EE 12 02 F6 | 	mov	arg01, abortchain
197d0     07 14 06 F6 | 	mov	arg02, #7
197d4     01 16 06 F6 | 	mov	arg03, #1
197d8     DA 00 A0 FD | 	call	#__longjmp
197dc     01 FA 65 F6 | 	neg	result1, #1
197e0     C8 00 90 FD | 	jmp	#LR__2259
197e4                 | LR__2251
197e4     12 01 68 FC | 	wrlong	#0, local04
197e8     04 24 06 F1 | 	add	local04, #4
197ec     12 01 68 FC | 	wrlong	#0, local04
197f0     04 24 86 F1 | 	sub	local04, #4
197f4     13 25 62 FC | 	wrlong	local04, local05
197f8                 | LR__2252
197f8     00 1E 0E F2 | 	cmp	local01, #0 wz
197fc     20 00 90 AD |  if_e	jmp	#LR__2253
19800     12 1F 62 FC | 	wrlong	local01, local04
19804     12 FB 01 F6 | 	mov	result1, local04
19808     00 10 03 FF 
1980c     00 FA 45 F5 | 	or	result1, ##102760448
19810     1C 26 06 F1 | 	add	local05, #28
19814     13 FB 61 FC | 	wrlong	result1, local05
19818     1C 26 86 F1 | 	sub	local05, #28
1981c     0C 00 90 FD | 	jmp	#LR__2254
19820                 | LR__2253
19820     1C 26 06 F1 | 	add	local05, #28
19824     13 01 68 FC | 	wrlong	#0, local05
19828     1C 26 86 F1 | 	sub	local05, #28
1982c                 | LR__2254
1982c     00 20 0E F2 | 	cmp	local02, #0 wz
19830     28 00 90 AD |  if_e	jmp	#LR__2255
19834     04 24 06 F1 | 	add	local04, #4
19838     12 21 62 FC | 	wrlong	local02, local04
1983c     04 24 86 F1 | 	sub	local04, #4
19840     12 FB 01 F6 | 	mov	result1, local04
19844     00 18 03 FF 
19848     00 FA 45 F5 | 	or	result1, ##103809024
1984c     20 26 06 F1 | 	add	local05, #32
19850     13 FB 61 FC | 	wrlong	result1, local05
19854     20 26 86 F1 | 	sub	local05, #32
19858     0C 00 90 FD | 	jmp	#LR__2256
1985c                 | LR__2255
1985c     20 26 06 F1 | 	add	local05, #32
19860     13 01 68 FC | 	wrlong	#0, local05
19864     20 26 86 F1 | 	sub	local05, #32
19868                 | LR__2256
19868     00 22 0E F2 | 	cmp	local03, #0 wz
1986c     24 00 90 AD |  if_e	jmp	#LR__2257
19870     08 24 06 F1 | 	add	local04, #8
19874     12 23 62 FC | 	wrlong	local03, local04
19878     08 24 86 F1 | 	sub	local04, #8
1987c     00 20 03 FF 
19880     00 24 46 F5 | 	or	local04, ##104857600
19884     24 26 06 F1 | 	add	local05, #36
19888     13 25 62 FC | 	wrlong	local04, local05
1988c     24 26 86 F1 | 	sub	local05, #36
19890     0C 00 90 FD | 	jmp	#LR__2258
19894                 | LR__2257
19894     24 26 06 F1 | 	add	local05, #36
19898     13 01 68 FC | 	wrlong	#0, local05
1989c     24 26 86 F1 | 	sub	local05, #36
198a0                 | LR__2258
198a0     08 26 06 F1 | 	add	local05, #8
198a4     13 0F 68 FC | 	wrlong	#7, local05
198a8     00 FA 05 F6 | 	mov	result1, #0
198ac                 | LR__2259
198ac     A7 F0 03 F6 | 	mov	ptra, fp
198b0     B2 00 A0 FD | 	call	#popregs_
198b4                 | __system___basic_open_ret
198b4     2D 00 64 FD | 	ret
198b8                 | 
198b8                 | __system___basic_open_string
198b8     04 4A 05 F6 | 	mov	COUNT_, #4
198bc     A8 00 A0 FD | 	call	#pushregs_
198c0     0A 1F 02 F6 | 	mov	local01, arg02
198c4     0B 21 02 F6 | 	mov	local02, arg03
198c8     10 45 B0 FD | 	call	#__system____getftab
198cc     FD 22 0A F6 | 	mov	local03, result1 wz
198d0     18 00 90 5D |  if_ne	jmp	#LR__2260
198d4     EE 12 02 F6 | 	mov	arg01, abortchain
198d8     0C 14 06 F6 | 	mov	arg02, #12
198dc     01 16 06 F6 | 	mov	arg03, #1
198e0     DA 00 A0 FD | 	call	#__longjmp
198e4     01 FA 65 F6 | 	neg	result1, #1
198e8     58 00 90 FD | 	jmp	#LR__2262
198ec                 | LR__2260
198ec     08 22 06 F1 | 	add	local03, #8
198f0     11 19 0A FB | 	rdlong	arg04, local03 wz
198f4     08 22 86 F1 | 	sub	local03, #8
198f8     11 13 02 56 |  if_ne	mov	arg01, local03
198fc     6C 3C B0 5D |  if_ne	call	#__system___closeraw
19900     0F 15 02 F6 | 	mov	arg02, local01
19904     10 17 02 F6 | 	mov	arg03, local02
19908     11 13 02 F6 | 	mov	arg01, local03
1990c     B6 19 06 F6 | 	mov	arg04, #438
19910     54 39 B0 FD | 	call	#__system___openraw
19914     FD 24 02 F6 | 	mov	local04, result1
19918     00 24 56 F2 | 	cmps	local04, #0 wc
1991c     20 00 90 3D |  if_ae	jmp	#LR__2261
19920     20 E8 05 F1 | 	add	ptr___system__dat__, #32
19924     F4 14 02 FB | 	rdlong	arg02, ptr___system__dat__
19928     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1992c     EE 12 02 F6 | 	mov	arg01, abortchain
19930     01 16 06 F6 | 	mov	arg03, #1
19934     DA 00 A0 FD | 	call	#__longjmp
19938     01 FA 65 F6 | 	neg	result1, #1
1993c     04 00 90 FD | 	jmp	#LR__2262
19940                 | LR__2261
19940     12 FB 01 F6 | 	mov	result1, local04
19944                 | LR__2262
19944     A7 F0 03 F6 | 	mov	ptra, fp
19948     B2 00 A0 FD | 	call	#popregs_
1994c                 | __system___basic_open_string_ret
1994c     2D 00 64 FD | 	ret
19950                 | 
19950                 | __system___basic_print_char
19950     03 4A 05 F6 | 	mov	COUNT_, #3
19954     A8 00 A0 FD | 	call	#pushregs_
19958     0A 1F 02 F6 | 	mov	local01, arg02
1995c     D0 4B B0 FD | 	call	#__system___gettxfunc
19960     FD 20 0A F6 | 	mov	local02, result1 wz
19964     00 FA 05 A6 |  if_e	mov	result1, #0
19968     30 00 90 AD |  if_e	jmp	#LR__2270
1996c     10 23 02 F6 | 	mov	local03, local02
19970     13 20 46 F7 | 	zerox	local02, #19
19974     14 22 46 F0 | 	shr	local03, #20
19978     02 22 66 F0 | 	shl	local03, #2
1997c     ED 22 02 F1 | 	add	local03, __methods__
19980     11 23 02 FB | 	rdlong	local03, local03
19984     0F 13 02 F6 | 	mov	arg01, local01
19988     F2 1E 02 F6 | 	mov	local01, objptr
1998c     10 E5 01 F6 | 	mov	objptr, local02
19990     2D 22 62 FD | 	call	local03
19994     0F E5 01 F6 | 	mov	objptr, local01
19998     01 FA 05 F6 | 	mov	result1, #1
1999c                 | LR__2270
1999c     A7 F0 03 F6 | 	mov	ptra, fp
199a0     B2 00 A0 FD | 	call	#popregs_
199a4                 | __system___basic_print_char_ret
199a4     2D 00 64 FD | 	ret
199a8                 | 
199a8                 | __system___basic_print_string
199a8     03 4A 05 F6 | 	mov	COUNT_, #3
199ac     A8 00 A0 FD | 	call	#pushregs_
199b0     0A 1F 02 F6 | 	mov	local01, arg02
199b4     0B 21 02 F6 | 	mov	local02, arg03
199b8     74 4B B0 FD | 	call	#__system___gettxfunc
199bc     FD 22 0A F6 | 	mov	local03, result1 wz
199c0     00 FA 05 A6 |  if_e	mov	result1, #0
199c4     18 00 90 AD |  if_e	jmp	#LR__2280
199c8     00 1E 0E F2 | 	cmp	local01, #0 wz
199cc     00 FA 05 A6 |  if_e	mov	result1, #0
199d0     11 13 02 56 |  if_ne	mov	arg01, local03
199d4     10 15 02 56 |  if_ne	mov	arg02, local02
199d8     0F 17 02 56 |  if_ne	mov	arg03, local01
199dc     9C 01 B0 5D |  if_ne	call	#__system___fmtstr
199e0                 | LR__2280
199e0     A7 F0 03 F6 | 	mov	ptra, fp
199e4     B2 00 A0 FD | 	call	#popregs_
199e8                 | __system___basic_print_string_ret
199e8     2D 00 64 FD | 	ret
199ec                 | 
199ec                 | __system___basic_print_integer
199ec     04 4A 05 F6 | 	mov	COUNT_, #4
199f0     A8 00 A0 FD | 	call	#pushregs_
199f4     0A 1F 02 F6 | 	mov	local01, arg02
199f8     0B 21 02 F6 | 	mov	local02, arg03
199fc     0C 23 02 F6 | 	mov	local03, arg04
19a00     2C 4B B0 FD | 	call	#__system___gettxfunc
19a04     FD 24 0A F6 | 	mov	local04, result1 wz
19a08     00 FA 05 A6 |  if_e	mov	result1, #0
19a0c     12 13 02 56 |  if_ne	mov	arg01, local04
19a10     10 15 02 56 |  if_ne	mov	arg02, local02
19a14     0F 17 02 56 |  if_ne	mov	arg03, local01
19a18     11 19 02 56 |  if_ne	mov	arg04, local03
19a1c     48 02 B0 5D |  if_ne	call	#__system___fmtnum
19a20     A7 F0 03 F6 | 	mov	ptra, fp
19a24     B2 00 A0 FD | 	call	#popregs_
19a28                 | __system___basic_print_integer_ret
19a28     2D 00 64 FD | 	ret
19a2c                 | 
19a2c                 | __system___basic_print_unsigned
19a2c     03 4A 05 F6 | 	mov	COUNT_, #3
19a30     A8 00 A0 FD | 	call	#pushregs_
19a34     0A 1F 02 F6 | 	mov	local01, arg02
19a38     0B 21 02 F6 | 	mov	local02, arg03
19a3c     0C 23 02 F6 | 	mov	local03, arg04
19a40     EC 4A B0 FD | 	call	#__system___gettxfunc
19a44     FD 12 0A F6 | 	mov	arg01, result1 wz
19a48     00 FA 05 A6 |  if_e	mov	result1, #0
19a4c     3A 20 26 54 |  if_ne	bith	local02, #58
19a50     10 15 02 56 |  if_ne	mov	arg02, local02
19a54     0F 17 02 56 |  if_ne	mov	arg03, local01
19a58     11 19 02 56 |  if_ne	mov	arg04, local03
19a5c     08 02 B0 5D |  if_ne	call	#__system___fmtnum
19a60     A7 F0 03 F6 | 	mov	ptra, fp
19a64     B2 00 A0 FD | 	call	#popregs_
19a68                 | __system___basic_print_unsigned_ret
19a68     2D 00 64 FD | 	ret
19a6c                 | 
19a6c                 | __system___basic_get_char
19a6c     03 4A 05 F6 | 	mov	COUNT_, #3
19a70     A8 00 A0 FD | 	call	#pushregs_
19a74     FC 4A B0 FD | 	call	#__system___getrxfunc
19a78     FD 1E 0A F6 | 	mov	local01, result1 wz
19a7c     01 FA 65 A6 |  if_e	neg	result1, #1
19a80     28 00 90 AD |  if_e	jmp	#LR__2290
19a84     0F 21 02 F6 | 	mov	local02, local01
19a88     13 1E 46 F7 | 	zerox	local01, #19
19a8c     14 20 46 F0 | 	shr	local02, #20
19a90     02 20 66 F0 | 	shl	local02, #2
19a94     ED 20 02 F1 | 	add	local02, __methods__
19a98     10 21 02 FB | 	rdlong	local02, local02
19a9c     F2 22 02 F6 | 	mov	local03, objptr
19aa0     0F E5 01 F6 | 	mov	objptr, local01
19aa4     2D 20 62 FD | 	call	local02
19aa8     11 E5 01 F6 | 	mov	objptr, local03
19aac                 | LR__2290
19aac     A7 F0 03 F6 | 	mov	ptra, fp
19ab0     B2 00 A0 FD | 	call	#popregs_
19ab4                 | __system___basic_get_char_ret
19ab4     2D 00 64 FD | 	ret
19ab8                 | 
19ab8                 | __system___basic_get
19ab8     04 4A 05 F6 | 	mov	COUNT_, #4
19abc     A8 00 A0 FD | 	call	#pushregs_
19ac0     0D 1F 02 F6 | 	mov	local01, arg05
19ac4     0F 19 02 FD | 	qmul	arg04, local01
19ac8     09 21 02 F6 | 	mov	local02, arg01
19acc     0B 23 02 F6 | 	mov	local03, arg03
19ad0     00 14 0E F2 | 	cmp	arg02, #0 wz
19ad4     01 14 86 51 |  if_ne	sub	arg02, #1
19ad8     10 13 02 56 |  if_ne	mov	arg01, local02
19adc     00 16 06 56 |  if_ne	mov	arg03, #0
19ae0     18 24 62 FD | 	getqx	local04
19ae4     3C 41 B0 5D |  if_ne	call	#__system__lseek
19ae8     11 15 02 F6 | 	mov	arg02, local03
19aec     12 17 02 F6 | 	mov	arg03, local04
19af0     10 13 02 F6 | 	mov	arg01, local02
19af4     B4 40 B0 FD | 	call	#__system__read
19af8     FD 24 02 F6 | 	mov	local04, result1
19afc     01 24 56 F2 | 	cmps	local04, #1 wc
19b00     10 00 90 CD |  if_b	jmp	#LR__2300
19b04     12 65 02 F6 | 	mov	muldiva_, local04
19b08     0F 67 02 F6 | 	mov	muldivb_, local01
19b0c     BA 00 A0 FD | 	call	#divide_
19b10     33 25 02 F6 | 	mov	local04, muldivb_
19b14                 | LR__2300
19b14     12 FB 01 F6 | 	mov	result1, local04
19b18     A7 F0 03 F6 | 	mov	ptra, fp
19b1c     B2 00 A0 FD | 	call	#popregs_
19b20                 | __system___basic_get_ret
19b20     2D 00 64 FD | 	ret
19b24                 | 
19b24                 | __system___fmtchar
19b24     00 4A 05 F6 | 	mov	COUNT_, #0
19b28     A8 00 A0 FD | 	call	#pushregs_
19b2c     10 F0 07 F1 | 	add	ptra, #16
19b30     04 4E 05 F1 | 	add	fp, #4
19b34     A7 12 62 FC | 	wrlong	arg01, fp
19b38     04 4E 05 F1 | 	add	fp, #4
19b3c     A7 14 62 FC | 	wrlong	arg02, fp
19b40     04 4E 05 F1 | 	add	fp, #4
19b44     A7 16 62 FC | 	wrlong	arg03, fp
19b48     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
19b4c     A7 16 62 FC | 	wrlong	arg03, fp
19b50     08 4E 85 F1 | 	sub	fp, #8
19b54     A7 12 02 FB | 	rdlong	arg01, fp
19b58     04 4E 05 F1 | 	add	fp, #4
19b5c     A7 14 02 FB | 	rdlong	arg02, fp
19b60     04 4E 05 F1 | 	add	fp, #4
19b64     A7 16 02 F6 | 	mov	arg03, fp
19b68     0C 4E 85 F1 | 	sub	fp, #12
19b6c     0C 00 B0 FD | 	call	#__system___fmtstr
19b70     A7 F0 03 F6 | 	mov	ptra, fp
19b74     B2 00 A0 FD | 	call	#popregs_
19b78                 | __system___fmtchar_ret
19b78     2D 00 64 FD | 	ret
19b7c                 | 
19b7c                 | __system___fmtstr
19b7c     09 4A 05 F6 | 	mov	COUNT_, #9
19b80     A8 00 A0 FD | 	call	#pushregs_
19b84     09 1F 02 F6 | 	mov	local01, arg01
19b88     0A 21 02 F6 | 	mov	local02, arg02
19b8c     0B 23 02 F6 | 	mov	local03, arg03
19b90     10 19 E2 F8 | 	getbyte	arg04, local02, #0
19b94     11 13 02 F6 | 	mov	arg01, local03
19b98     09 25 02 F6 | 	mov	local04, arg01
19b9c     97 06 48 FB | 	callpa	#(@LR__2311-@LR__2310)>>2,fcache_load_ptr_
19ba0                 | LR__2310
19ba0     12 FB C9 FA | 	rdbyte	result1, local04 wz
19ba4     01 24 06 51 |  if_ne	add	local04, #1
19ba8     F4 FF 9F 5D |  if_ne	jmp	#LR__2310
19bac                 | LR__2311
19bac     09 25 82 F1 | 	sub	local04, arg01
19bb0     00 18 0E F2 | 	cmp	arg04, #0 wz
19bb4     0C 25 7A 53 |  if_ne	fles	local04, arg04 wcz
19bb8     10 15 02 F6 | 	mov	arg02, local02
19bbc     12 17 02 F6 | 	mov	arg03, local04
19bc0     0F 13 02 F6 | 	mov	arg01, local01
19bc4     02 18 06 F6 | 	mov	arg04, #2
19bc8     04 46 B0 FD | 	call	#__system___fmtpad
19bcc     FD 26 02 F6 | 	mov	local05, result1
19bd0     00 26 56 F2 | 	cmps	local05, #0 wc
19bd4     13 FB 01 C6 |  if_b	mov	result1, local05
19bd8     80 00 90 CD |  if_b	jmp	#LR__2314
19bdc     01 24 56 F2 | 	cmps	local04, #1 wc
19be0     50 00 90 CD |  if_b	jmp	#LR__2313
19be4     12 29 02 F6 | 	mov	local06, local04
19be8                 | LR__2312
19be8     0F 2B 02 F6 | 	mov	local07, local01
19bec     0F 2D 02 F6 | 	mov	local08, local01
19bf0     13 2A 46 F7 | 	zerox	local07, #19
19bf4     14 2C 46 F0 | 	shr	local08, #20
19bf8     02 2C 66 F0 | 	shl	local08, #2
19bfc     ED 2C 02 F1 | 	add	local08, __methods__
19c00     16 2D 02 FB | 	rdlong	local08, local08
19c04     11 13 C2 FA | 	rdbyte	arg01, local03
19c08     F2 2E 02 F6 | 	mov	local09, objptr
19c0c     15 E5 01 F6 | 	mov	objptr, local07
19c10     01 22 06 F1 | 	add	local03, #1
19c14     2D 2C 62 FD | 	call	local08
19c18     17 E5 01 F6 | 	mov	objptr, local09
19c1c     FD 2E 02 F6 | 	mov	local09, result1
19c20     00 2E 56 F2 | 	cmps	local09, #0 wc
19c24     17 FB 01 C6 |  if_b	mov	result1, local09
19c28     30 00 90 CD |  if_b	jmp	#LR__2314
19c2c     17 27 02 F1 | 	add	local05, local09
19c30     ED 29 6E FB | 	djnz	local06, #LR__2312
19c34                 | LR__2313
19c34     10 15 02 F6 | 	mov	arg02, local02
19c38     12 17 02 F6 | 	mov	arg03, local04
19c3c     0F 13 02 F6 | 	mov	arg01, local01
19c40     01 18 06 F6 | 	mov	arg04, #1
19c44     88 45 B0 FD | 	call	#__system___fmtpad
19c48     FD 2E 02 F6 | 	mov	local09, result1
19c4c     00 2E 56 F2 | 	cmps	local09, #0 wc
19c50     17 FB 01 C6 |  if_b	mov	result1, local09
19c54     17 27 02 31 |  if_ae	add	local05, local09
19c58     13 FB 01 36 |  if_ae	mov	result1, local05
19c5c                 | LR__2314
19c5c     A7 F0 03 F6 | 	mov	ptra, fp
19c60     B2 00 A0 FD | 	call	#popregs_
19c64                 | __system___fmtstr_ret
19c64     2D 00 64 FD | 	ret
19c68                 | 
19c68                 | __system___fmtnum
19c68     0B 4A 05 F6 | 	mov	COUNT_, #11
19c6c     A8 00 A0 FD | 	call	#pushregs_
19c70     09 1F 02 F6 | 	mov	local01, arg01
19c74     0A 21 02 F6 | 	mov	local02, arg02
19c78     0B 23 02 F6 | 	mov	local03, arg03
19c7c     0C 25 02 F6 | 	mov	local04, arg04
19c80     F8 27 02 F6 | 	mov	local05, ptra
19c84     13 29 02 F6 | 	mov	local06, local05
19c88     00 2A 06 F6 | 	mov	local07, #0
19c8c     10 2D 02 F6 | 	mov	local08, local02
19c90     10 2C 46 F0 | 	shr	local08, #16
19c94     3F 2C 06 F5 | 	and	local08, #63
19c98     10 2F E2 F8 | 	getbyte	local09, local02, #0
19c9c     10 31 02 F6 | 	mov	local10, local02
19ca0     1A 30 46 F0 | 	shr	local10, #26
19ca4     03 30 06 F5 | 	and	local10, #3
19ca8     18 33 02 F6 | 	mov	local11, local10
19cac     01 2C 56 F2 | 	cmps	local08, #1 wc
19cb0     44 F0 07 F1 | 	add	ptra, #68
19cb4     01 2C 86 31 |  if_ae	sub	local08, #1
19cb8     41 2E 56 F2 | 	cmps	local09, #65 wc
19cbc     00 2E 0E C2 |  if_b	cmp	local09, #0 wz
19cc0     40 2E 06 B6 |  if_nc_or_z	mov	local09, #64
19cc4     03 32 0E F2 | 	cmp	local11, #3 wz
19cc8     00 32 06 A6 |  if_e	mov	local11, #0
19ccc     00 22 56 52 |  if_ne	cmps	local03, #0 wc
19cd0     04 32 06 46 |  if_c_and_nz	mov	local11, #4
19cd4     11 23 62 46 |  if_c_and_nz	neg	local03, local03
19cd8     00 32 0E F2 | 	cmp	local11, #0 wz
19cdc     4C 00 90 AD |  if_e	jmp	#LR__2323
19ce0     01 2A 06 F6 | 	mov	local07, #1
19ce4     17 2D 0A F2 | 	cmp	local08, local09 wz
19ce8     18 00 90 5D |  if_ne	jmp	#LR__2321
19cec     05 2C 6E FB | 	djnz	local08, #LR__2320
19cf0     0F 13 02 F6 | 	mov	arg01, local01
19cf4     10 15 02 F6 | 	mov	arg02, local02
19cf8     23 16 06 F6 | 	mov	arg03, #35
19cfc     24 FE BF FD | 	call	#__system___fmtchar
19d00     88 00 90 FD | 	jmp	#LR__2327
19d04                 | LR__2320
19d04                 | LR__2321
19d04     02 32 0E F2 | 	cmp	local11, #2 wz
19d08     14 31 02 A6 |  if_e	mov	local10, local06
19d0c     01 28 06 A1 |  if_e	add	local06, #1
19d10     18 41 48 AC |  if_e	wrbyte	#32, local10
19d14     14 00 90 AD |  if_e	jmp	#LR__2322
19d18     04 32 0E F2 | 	cmp	local11, #4 wz
19d1c     14 5B 48 AC |  if_e	wrbyte	#45, local06
19d20     01 28 06 A1 |  if_e	add	local06, #1
19d24     14 57 48 5C |  if_ne	wrbyte	#43, local06
19d28     01 28 06 51 |  if_ne	add	local06, #1
19d2c                 | LR__2322
19d2c                 | LR__2323
19d2c     14 13 02 F6 | 	mov	arg01, local06
19d30     11 15 02 F6 | 	mov	arg02, local03
19d34     12 17 02 F6 | 	mov	arg03, local04
19d38     16 19 02 F6 | 	mov	arg04, local08
19d3c     00 1A 06 F6 | 	mov	arg05, #0
19d40     1D 20 2E F4 | 	testbn	local02, #29 wz
19d44     01 1A 06 56 |  if_ne	mov	arg05, #1
19d48     4C 45 B0 FD | 	call	#__system___uitoa
19d4c     FD 2A 02 F1 | 	add	local07, result1
19d50     17 2B 5A F2 | 	cmps	local07, local09 wcz
19d54     24 00 90 ED |  if_be	jmp	#LR__2326
19d58     97 0E 48 FB | 	callpa	#(@LR__2325-@LR__2324)>>2,fcache_load_ptr_
19d5c                 | LR__2324
19d5c     17 31 02 F6 | 	mov	local10, local09
19d60     01 30 56 F2 | 	cmps	local10, #1 wc
19d64     01 2E 86 F1 | 	sub	local09, #1
19d68     14 31 02 36 |  if_ae	mov	local10, local06
19d6c     01 28 06 31 |  if_ae	add	local06, #1
19d70     18 47 48 3C |  if_ae	wrbyte	#35, local10
19d74     E4 FF 9F 3D |  if_ae	jmp	#LR__2324
19d78                 | LR__2325
19d78     14 01 48 FC | 	wrbyte	#0, local06
19d7c                 | LR__2326
19d7c     0F 13 02 F6 | 	mov	arg01, local01
19d80     10 15 02 F6 | 	mov	arg02, local02
19d84     13 17 02 F6 | 	mov	arg03, local05
19d88     F0 FD BF FD | 	call	#__system___fmtstr
19d8c                 | LR__2327
19d8c     A7 F0 03 F6 | 	mov	ptra, fp
19d90     B2 00 A0 FD | 	call	#popregs_
19d94                 | __system___fmtnum_ret
19d94     2D 00 64 FD | 	ret
19d98                 | 
19d98                 | __system___fmtfloat
19d98     10 4A 05 F6 | 	mov	COUNT_, #16
19d9c     A8 00 A0 FD | 	call	#pushregs_
19da0     24 F1 07 F1 | 	add	ptra, #292
19da4     04 4E 05 F1 | 	add	fp, #4
19da8     A7 12 62 FC | 	wrlong	arg01, fp
19dac     04 4E 05 F1 | 	add	fp, #4
19db0     A7 14 62 FC | 	wrlong	arg02, fp
19db4     04 4E 05 F1 | 	add	fp, #4
19db8     A7 16 62 FC | 	wrlong	arg03, fp
19dbc     04 4E 05 F1 | 	add	fp, #4
19dc0     A7 18 62 FC | 	wrlong	arg04, fp
19dc4     0C 4E 05 F1 | 	add	fp, #12
19dc8     A7 14 68 FC | 	wrlong	#10, fp
19dcc     08 4E 05 F1 | 	add	fp, #8
19dd0     A7 00 68 FC | 	wrlong	#0, fp
19dd4     08 4E 05 F1 | 	add	fp, #8
19dd8     A7 00 68 FC | 	wrlong	#0, fp
19ddc     08 4E 05 F1 | 	add	fp, #8
19de0     A7 00 68 FC | 	wrlong	#0, fp
19de4     04 4E 05 F1 | 	add	fp, #4
19de8     A7 04 68 FC | 	wrlong	#2, fp
19dec     04 4E 05 F1 | 	add	fp, #4
19df0     A7 00 68 FC | 	wrlong	#0, fp
19df4     04 4E 05 F1 | 	add	fp, #4
19df8     A7 00 68 FC | 	wrlong	#0, fp
19dfc     04 4E 05 F1 | 	add	fp, #4
19e00     A7 00 68 FC | 	wrlong	#0, fp
19e04     04 4E 05 F1 | 	add	fp, #4
19e08     A7 00 68 FC | 	wrlong	#0, fp
19e0c     18 4E 05 F1 | 	add	fp, #24
19e10     A7 00 68 FC | 	wrlong	#0, fp
19e14     68 4E 05 F1 | 	add	fp, #104
19e18     A7 1E 02 F6 | 	mov	local01, fp
19e1c     08 4E 85 F1 | 	sub	fp, #8
19e20     A7 1E 62 FC | 	wrlong	local01, fp
19e24     04 4E 05 F1 | 	add	fp, #4
19e28     A7 1E 62 FC | 	wrlong	local01, fp
19e2c     BC 4E 85 F1 | 	sub	fp, #188
19e30     A7 1E 02 FB | 	rdlong	local01, fp
19e34     10 1E 46 F0 | 	shr	local01, #16
19e38     3F 1E 06 F5 | 	and	local01, #63
19e3c     B0 4E 05 F1 | 	add	fp, #176
19e40     A7 1E 62 FC | 	wrlong	local01, fp
19e44     B0 4E 85 F1 | 	sub	fp, #176
19e48     A7 1E 02 FB | 	rdlong	local01, fp
19e4c     1C 1E 46 F0 | 	shr	local01, #28
19e50     01 1E 06 F5 | 	and	local01, #1
19e54     08 4F 05 F1 | 	add	fp, #264
19e58     A7 1E 62 FC | 	wrlong	local01, fp
19e5c     58 4E 85 F1 | 	sub	fp, #88
19e60     A7 1E 0A FB | 	rdlong	local01, fp wz
19e64     B8 4E 85 F1 | 	sub	fp, #184
19e68     3C 00 90 5D |  if_ne	jmp	#LR__2331
19e6c     10 4E 05 F1 | 	add	fp, #16
19e70     A7 1E 02 FB | 	rdlong	local01, fp
19e74     10 4E 85 F1 | 	sub	fp, #16
19e78     61 1E 0E F2 | 	cmp	local01, #97 wz
19e7c     18 00 90 5D |  if_ne	jmp	#LR__2330
19e80     B8 4E 05 F1 | 	add	fp, #184
19e84     A7 1A 68 FC | 	wrlong	#13, fp
19e88     84 4E 85 F1 | 	sub	fp, #132
19e8c     A7 02 68 FC | 	wrlong	#1, fp
19e90     34 4E 85 F1 | 	sub	fp, #52
19e94     24 00 90 FD | 	jmp	#LR__2332
19e98                 | LR__2330
19e98     B8 4E 05 F1 | 	add	fp, #184
19e9c     A7 0C 68 FC | 	wrlong	#6, fp
19ea0     B8 4E 85 F1 | 	sub	fp, #184
19ea4     14 00 90 FD | 	jmp	#LR__2332
19ea8                 | LR__2331
19ea8     B8 4E 05 F1 | 	add	fp, #184
19eac     A7 1E 02 FB | 	rdlong	local01, fp
19eb0     01 1E 86 F1 | 	sub	local01, #1
19eb4     A7 1E 62 FC | 	wrlong	local01, fp
19eb8     B8 4E 85 F1 | 	sub	fp, #184
19ebc                 | LR__2332
19ebc     08 4E 05 F1 | 	add	fp, #8
19ec0     A7 1E 02 FB | 	rdlong	local01, fp
19ec4     16 1E 46 F0 | 	shr	local01, #22
19ec8     03 1E 06 F5 | 	and	local01, #3
19ecc     04 4F 05 F1 | 	add	fp, #260
19ed0     A7 1E 62 FC | 	wrlong	local01, fp
19ed4     04 4F 85 F1 | 	sub	fp, #260
19ed8     A7 1E 02 FB | 	rdlong	local01, fp
19edc     1D 1E 46 F0 | 	shr	local01, #29
19ee0     01 1E 06 F5 | 	and	local01, #1
19ee4     B4 4E 05 F1 | 	add	fp, #180
19ee8     A7 1E 62 FC | 	wrlong	local01, fp
19eec     B4 4E 85 F1 | 	sub	fp, #180
19ef0     A7 1E 02 FB | 	rdlong	local01, fp
19ef4     0F 1F EA F8 | 	getbyte	local01, local01, #1
19ef8     60 4E 05 F1 | 	add	fp, #96
19efc     A7 1E 62 FC | 	wrlong	local01, fp
19f00     60 4E 85 F1 | 	sub	fp, #96
19f04     A7 1E 02 FB | 	rdlong	local01, fp
19f08     0F 1F E2 F8 | 	getbyte	local01, local01, #0
19f0c     64 4E 05 F1 | 	add	fp, #100
19f10     A7 1E 62 FC | 	wrlong	local01, fp
19f14     00 1E 06 F6 | 	mov	local01, #0
19f18     5C 4E 85 F1 | 	sub	fp, #92
19f1c     A7 1A 02 FB | 	rdlong	arg05, fp
19f20     65 1A 0E F2 | 	cmp	arg05, #101 wz
19f24     01 1E 06 A6 |  if_e	mov	local01, #1
19f28     14 4E 05 F1 | 	add	fp, #20
19f2c     A7 1E 62 FC | 	wrlong	local01, fp
19f30     98 4E 05 F1 | 	add	fp, #152
19f34     A7 20 0A FB | 	rdlong	local02, fp wz
19f38     45 1E 06 56 |  if_ne	mov	local01, #69
19f3c     65 1E 06 A6 |  if_e	mov	local01, #101
19f40     8C 4E 85 F1 | 	sub	fp, #140
19f44     A7 1E 62 FC | 	wrlong	local01, fp
19f48     20 4E 85 F1 | 	sub	fp, #32
19f4c     A7 1E 02 FB | 	rdlong	local01, fp
19f50     10 4E 85 F1 | 	sub	fp, #16
19f54     61 1E 0E F2 | 	cmp	local01, #97 wz
19f58     4C 00 90 5D |  if_ne	jmp	#LR__2333
19f5c     24 4E 05 F1 | 	add	fp, #36
19f60     A7 02 68 FC | 	wrlong	#1, fp
19f64     98 4E 05 F1 | 	add	fp, #152
19f68     A7 20 0A FB | 	rdlong	local02, fp wz
19f6c     50 1E 06 56 |  if_ne	mov	local01, #80
19f70     70 1E 06 A6 |  if_e	mov	local01, #112
19f74     8C 4E 85 F1 | 	sub	fp, #140
19f78     A7 1E 62 FC | 	wrlong	local01, fp
19f7c     14 4E 85 F1 | 	sub	fp, #20
19f80     A7 04 68 FC | 	wrlong	#2, fp
19f84     1C 4E 05 F1 | 	add	fp, #28
19f88     A7 02 68 FC | 	wrlong	#1, fp
19f8c     84 4E 05 F1 | 	add	fp, #132
19f90     A7 20 0A FB | 	rdlong	local02, fp wz
19f94     58 1E 06 56 |  if_ne	mov	local01, #88
19f98     78 1E 06 A6 |  if_e	mov	local01, #120
19f9c     7C 4E 85 F1 | 	sub	fp, #124
19fa0     A7 1E 62 FC | 	wrlong	local01, fp
19fa4     40 4E 85 F1 | 	sub	fp, #64
19fa8                 | LR__2333
19fa8     10 4E 05 F1 | 	add	fp, #16
19fac     A7 1E 02 FB | 	rdlong	local01, fp
19fb0     10 4E 85 F1 | 	sub	fp, #16
19fb4     23 1E 0E F2 | 	cmp	local01, #35 wz
19fb8     3C 00 90 5D |  if_ne	jmp	#LR__2336
19fbc     48 4E 05 F1 | 	add	fp, #72
19fc0     A7 02 68 FC | 	wrlong	#1, fp
19fc4     C8 4E 05 F1 | 	add	fp, #200
19fc8     A7 1E 0A FB | 	rdlong	local01, fp wz
19fcc     10 4F 85 F1 | 	sub	fp, #272
19fd0     18 00 90 AD |  if_e	jmp	#LR__2334
19fd4     10 4E 05 F1 | 	add	fp, #16
19fd8     A7 CC 68 FC | 	wrlong	#102, fp
19fdc     00 4F 05 F1 | 	add	fp, #256
19fe0     A7 00 68 FC | 	wrlong	#0, fp
19fe4     10 4F 85 F1 | 	sub	fp, #272
19fe8     0C 00 90 FD | 	jmp	#LR__2335
19fec                 | LR__2334
19fec     10 4F 05 F1 | 	add	fp, #272
19ff0     A7 02 68 FC | 	wrlong	#1, fp
19ff4     10 4F 85 F1 | 	sub	fp, #272
19ff8                 | LR__2335
19ff8                 | LR__2336
19ff8     08 4E 05 F1 | 	add	fp, #8
19ffc     A7 1E 02 FB | 	rdlong	local01, fp
1a000     1A 1E 46 F0 | 	shr	local01, #26
1a004     03 1E 06 F5 | 	and	local01, #3
1a008     5C 4E 05 F1 | 	add	fp, #92
1a00c     A7 1E 62 FC | 	wrlong	local01, fp
1a010     58 4E 85 F1 | 	sub	fp, #88
1a014     A7 FA 01 FB | 	rdlong	result1, fp
1a018     0C 4E 85 F1 | 	sub	fp, #12
1a01c     1F FA 4D F0 | 	shr	result1, #31 wz
1a020     20 00 90 AD |  if_e	jmp	#LR__2337
1a024     2C 4E 05 F1 | 	add	fp, #44
1a028     A7 5A 68 FC | 	wrlong	#45, fp
1a02c     20 4E 85 F1 | 	sub	fp, #32
1a030     A7 FA 01 FB | 	rdlong	result1, fp
1a034     1F FA E5 F4 | 	bitnot	result1, #31
1a038     A7 FA 61 FC | 	wrlong	result1, fp
1a03c     0C 4E 85 F1 | 	sub	fp, #12
1a040     3C 00 90 FD | 	jmp	#LR__2339
1a044                 | LR__2337
1a044     64 4E 05 F1 | 	add	fp, #100
1a048     A7 1E 02 FB | 	rdlong	local01, fp
1a04c     64 4E 85 F1 | 	sub	fp, #100
1a050     01 1E 0E F2 | 	cmp	local01, #1 wz
1a054     2C 4E 05 A1 |  if_e	add	fp, #44
1a058     A7 56 68 AC |  if_e	wrlong	#43, fp
1a05c     2C 4E 85 A1 |  if_e	sub	fp, #44
1a060     1C 00 90 AD |  if_e	jmp	#LR__2338
1a064     64 4E 05 F1 | 	add	fp, #100
1a068     A7 1E 02 FB | 	rdlong	local01, fp
1a06c     64 4E 85 F1 | 	sub	fp, #100
1a070     02 1E 0E F2 | 	cmp	local01, #2 wz
1a074     2C 4E 05 A1 |  if_e	add	fp, #44
1a078     A7 40 68 AC |  if_e	wrlong	#32, fp
1a07c     2C 4E 85 A1 |  if_e	sub	fp, #44
1a080                 | LR__2338
1a080                 | LR__2339
1a080     08 4E 05 F1 | 	add	fp, #8
1a084     A7 1E 02 FB | 	rdlong	local01, fp
1a088     18 1E 46 F0 | 	shr	local01, #24
1a08c     03 1E 06 F5 | 	and	local01, #3
1a090     3C 4E 05 F1 | 	add	fp, #60
1a094     A7 1E 62 FC | 	wrlong	local01, fp
1a098     00 1E 06 F6 | 	mov	local01, #0
1a09c     18 4E 85 F1 | 	sub	fp, #24
1a0a0     A7 22 0A FB | 	rdlong	local03, fp wz
1a0a4     2C 4E 85 F1 | 	sub	fp, #44
1a0a8     18 00 90 5D |  if_ne	jmp	#LR__2340
1a0ac     1C 4E 05 F1 | 	add	fp, #28
1a0b0     A7 24 02 FB | 	rdlong	local04, fp
1a0b4     1C 4E 85 F1 | 	sub	fp, #28
1a0b8     12 27 02 F6 | 	mov	local05, local04
1a0bc     0A 26 0E F2 | 	cmp	local05, #10 wz
1a0c0     04 00 90 AD |  if_e	jmp	#LR__2341
1a0c4                 | LR__2340
1a0c4     01 1E 66 F5 | 	xor	local01, #1
1a0c8                 | LR__2341
1a0c8     3C 4E 05 F1 | 	add	fp, #60
1a0cc     A7 1E 62 FC | 	wrlong	local01, fp
1a0d0     3C 4E 85 F1 | 	sub	fp, #60
1a0d4     00 1E 0E F2 | 	cmp	local01, #0 wz
1a0d8     0C 01 90 AD |  if_e	jmp	#LR__2343
1a0dc     44 4E 05 F1 | 	add	fp, #68
1a0e0     A7 26 02 FB | 	rdlong	local05, fp
1a0e4     44 4E 85 F1 | 	sub	fp, #68
1a0e8     13 23 02 F6 | 	mov	local03, local05
1a0ec     02 22 0E F2 | 	cmp	local03, #2 wz
1a0f0     F4 00 90 5D |  if_ne	jmp	#LR__2343
1a0f4     0C 4F 05 F1 | 	add	fp, #268
1a0f8     A7 28 02 FB | 	rdlong	local06, fp
1a0fc     0C 4F 85 F1 | 	sub	fp, #268
1a100     14 25 02 F6 | 	mov	local04, local06
1a104     02 24 0E F2 | 	cmp	local04, #2 wz
1a108     DC 00 90 AD |  if_e	jmp	#LR__2343
1a10c     C0 4E 05 F1 | 	add	fp, #192
1a110     A7 12 02 FB | 	rdlong	arg01, fp
1a114     94 4E 85 F1 | 	sub	fp, #148
1a118     A7 14 02 FB | 	rdlong	arg02, fp
1a11c     14 4E 05 F1 | 	add	fp, #20
1a120     A7 16 02 FB | 	rdlong	arg03, fp
1a124     40 4E 85 F1 | 	sub	fp, #64
1a128     D4 43 B0 FD | 	call	#__system__emitsign_0383
1a12c     14 4F 05 F1 | 	add	fp, #276
1a130     A7 FA 61 FC | 	wrlong	result1, fp
1a134     14 4F 85 F1 | 	sub	fp, #276
1a138     00 FA 55 F2 | 	cmps	result1, #0 wc
1a13c     14 4F 05 C1 |  if_b	add	fp, #276
1a140     A7 FA 01 CB |  if_b	rdlong	result1, fp
1a144     14 4F 85 C1 |  if_b	sub	fp, #276
1a148     6C 0B 90 CD |  if_b	jmp	#LR__2393
1a14c     C0 4E 05 F1 | 	add	fp, #192
1a150     A7 1E 02 FB | 	rdlong	local01, fp
1a154     54 4E 05 F1 | 	add	fp, #84
1a158     A7 26 02 FB | 	rdlong	local05, fp
1a15c     13 23 02 F6 | 	mov	local03, local05
1a160     13 1F 02 F1 | 	add	local01, local05
1a164     54 4E 85 F1 | 	sub	fp, #84
1a168     A7 1E 62 FC | 	wrlong	local01, fp
1a16c     58 4E 85 F1 | 	sub	fp, #88
1a170     A7 1E 0A FB | 	rdlong	local01, fp wz
1a174     68 4E 85 F1 | 	sub	fp, #104
1a178     60 00 90 AD |  if_e	jmp	#LR__2342
1a17c     68 4E 05 F1 | 	add	fp, #104
1a180     A7 1E 02 FB | 	rdlong	local01, fp
1a184     AC 4E 05 F1 | 	add	fp, #172
1a188     A7 22 02 FB | 	rdlong	local03, fp
1a18c     11 1F 82 F1 | 	sub	local01, local03
1a190     AC 4E 85 F1 | 	sub	fp, #172
1a194     A7 1E 62 FC | 	wrlong	local01, fp
1a198     68 4E 85 F1 | 	sub	fp, #104
1a19c     00 1E 56 F2 | 	cmps	local01, #0 wc
1a1a0     68 4E 05 C1 |  if_b	add	fp, #104
1a1a4     A7 00 68 CC |  if_b	wrlong	#0, fp
1a1a8     68 4E 85 C1 |  if_b	sub	fp, #104
1a1ac     08 4E 05 F1 | 	add	fp, #8
1a1b0     A7 1E 02 FB | 	rdlong	local01, fp
1a1b4     E8 1E 06 F4 | 	bitl	local01, #232
1a1b8     A7 1E 62 FC | 	wrlong	local01, fp
1a1bc     60 4E 05 F1 | 	add	fp, #96
1a1c0     A7 26 02 FB | 	rdlong	local05, fp
1a1c4     13 23 02 F6 | 	mov	local03, local05
1a1c8     08 22 66 F0 | 	shl	local03, #8
1a1cc     11 1F 42 F5 | 	or	local01, local03
1a1d0     60 4E 85 F1 | 	sub	fp, #96
1a1d4     A7 1E 62 FC | 	wrlong	local01, fp
1a1d8     08 4E 85 F1 | 	sub	fp, #8
1a1dc                 | LR__2342
1a1dc     3C 4E 05 F1 | 	add	fp, #60
1a1e0     A7 00 68 FC | 	wrlong	#0, fp
1a1e4     3C 4E 85 F1 | 	sub	fp, #60
1a1e8                 | LR__2343
1a1e8     0C 4E 05 F1 | 	add	fp, #12
1a1ec     A7 12 02 FB | 	rdlong	arg01, fp
1a1f0     0C 4E 85 F1 | 	sub	fp, #12
1a1f4     A8 1E B0 FD | 	call	#__system____builtin_ilogb
1a1f8     FF FF 3F FF 
1a1fc     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
1a200     50 00 90 5D |  if_ne	jmp	#LR__2345
1a204     2C 4E 05 F1 | 	add	fp, #44
1a208     A7 1E 0A FB | 	rdlong	local01, fp wz
1a20c     2C 4E 85 F1 | 	sub	fp, #44
1a210     24 00 90 AD |  if_e	jmp	#LR__2344
1a214     C0 4E 05 F1 | 	add	fp, #192
1a218     A7 20 02 FB | 	rdlong	local02, fp
1a21c     10 23 02 F6 | 	mov	local03, local02
1a220     01 22 06 F1 | 	add	local03, #1
1a224     A7 22 62 FC | 	wrlong	local03, fp
1a228     94 4E 85 F1 | 	sub	fp, #148
1a22c     A7 24 02 FB | 	rdlong	local04, fp
1a230     2C 4E 85 F1 | 	sub	fp, #44
1a234     10 25 42 FC | 	wrbyte	local04, local02
1a238                 | LR__2344
1a238     C0 4E 05 F1 | 	add	fp, #192
1a23c     A7 12 02 FB | 	rdlong	arg01, fp
1a240     C0 4E 85 F1 | 	sub	fp, #192
1a244     40 01 00 FF 
1a248     C2 15 06 F6 | 	mov	arg02, ##@LR__4271
1a24c     18 EA BF FD | 	call	#__system____builtin_strcpy
1a250     A4 08 90 FD | 	jmp	#LR__2381
1a254                 | LR__2345
1a254     0C 4E 05 F1 | 	add	fp, #12
1a258     A7 20 02 FB | 	rdlong	local02, fp
1a25c     0C 4E 85 F1 | 	sub	fp, #12
1a260     10 13 02 F6 | 	mov	arg01, local02
1a264     38 1E B0 FD | 	call	#__system____builtin_ilogb
1a268     00 00 40 FF 
1a26c     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
1a270     50 00 90 5D |  if_ne	jmp	#LR__2347
1a274     2C 4E 05 F1 | 	add	fp, #44
1a278     A7 1E 0A FB | 	rdlong	local01, fp wz
1a27c     2C 4E 85 F1 | 	sub	fp, #44
1a280     24 00 90 AD |  if_e	jmp	#LR__2346
1a284     C0 4E 05 F1 | 	add	fp, #192
1a288     A7 20 02 FB | 	rdlong	local02, fp
1a28c     10 23 02 F6 | 	mov	local03, local02
1a290     01 22 06 F1 | 	add	local03, #1
1a294     A7 22 62 FC | 	wrlong	local03, fp
1a298     94 4E 85 F1 | 	sub	fp, #148
1a29c     A7 24 02 FB | 	rdlong	local04, fp
1a2a0     2C 4E 85 F1 | 	sub	fp, #44
1a2a4     10 25 42 FC | 	wrbyte	local04, local02
1a2a8                 | LR__2346
1a2a8     C0 4E 05 F1 | 	add	fp, #192
1a2ac     A7 12 02 FB | 	rdlong	arg01, fp
1a2b0     C0 4E 85 F1 | 	sub	fp, #192
1a2b4     40 01 00 FF 
1a2b8     C6 15 06 F6 | 	mov	arg02, ##@LR__4272
1a2bc     A8 E9 BF FD | 	call	#__system____builtin_strcpy
1a2c0     34 08 90 FD | 	jmp	#LR__2381
1a2c4                 | LR__2347
1a2c4     10 4E 05 F1 | 	add	fp, #16
1a2c8     A7 1E 02 FB | 	rdlong	local01, fp
1a2cc     10 4E 85 F1 | 	sub	fp, #16
1a2d0     67 1E 0E F2 | 	cmp	local01, #103 wz
1a2d4     10 4E 05 51 |  if_ne	add	fp, #16
1a2d8     A7 22 02 5B |  if_ne	rdlong	local03, fp
1a2dc     10 4E 85 51 |  if_ne	sub	fp, #16
1a2e0     23 22 0E 52 |  if_ne	cmp	local03, #35 wz
1a2e4     94 01 90 5D |  if_ne	jmp	#LR__2352
1a2e8     0C 4E 05 F1 | 	add	fp, #12
1a2ec     A7 12 02 FB | 	rdlong	arg01, fp
1a2f0     08 4E 05 F1 | 	add	fp, #8
1a2f4     A7 14 02 F6 | 	mov	arg02, fp
1a2f8     0C 4E 05 F1 | 	add	fp, #12
1a2fc     A7 16 02 F6 | 	mov	arg03, fp
1a300     98 4E 05 F1 | 	add	fp, #152
1a304     A7 18 02 FB | 	rdlong	arg04, fp
1a308     9C 4E 85 F1 | 	sub	fp, #156
1a30c     A7 1A 02 FB | 	rdlong	arg05, fp
1a310     1C 4E 85 F1 | 	sub	fp, #28
1a314     F4 3F B0 FD | 	call	#__system__disassemble_0381
1a318     10 4E 05 F1 | 	add	fp, #16
1a31c     A7 1E 02 FB | 	rdlong	local01, fp
1a320     10 4E 85 F1 | 	sub	fp, #16
1a324     23 1E 0E F2 | 	cmp	local01, #35 wz
1a328     A0 00 90 5D |  if_ne	jmp	#LR__2349
1a32c     20 4E 05 F1 | 	add	fp, #32
1a330     A7 1E 02 FB | 	rdlong	local01, fp
1a334     98 4E 05 F1 | 	add	fp, #152
1a338     A7 22 02 FB | 	rdlong	local03, fp
1a33c     B8 4E 85 F1 | 	sub	fp, #184
1a340     11 1F 5A F2 | 	cmps	local01, local03 wcz
1a344     24 4E 05 11 |  if_a	add	fp, #36
1a348     A7 02 68 1C |  if_a	wrlong	#1, fp
1a34c     24 4E 85 11 |  if_a	sub	fp, #36
1a350     A4 01 90 1D |  if_a	jmp	#LR__2355
1a354     20 4E 05 F1 | 	add	fp, #32
1a358     A7 1E 02 FB | 	rdlong	local01, fp
1a35c     20 4E 85 F1 | 	sub	fp, #32
1a360     00 1E 56 F2 | 	cmps	local01, #0 wc
1a364     2C 00 90 3D |  if_ae	jmp	#LR__2348
1a368     B8 4E 05 F1 | 	add	fp, #184
1a36c     A7 1E 02 FB | 	rdlong	local01, fp
1a370     0F 1F 62 F6 | 	neg	local01, local01
1a374     98 4E 85 F1 | 	sub	fp, #152
1a378     A7 22 02 FB | 	rdlong	local03, fp
1a37c     20 4E 85 F1 | 	sub	fp, #32
1a380     0F 23 5A F2 | 	cmps	local03, local01 wcz
1a384     24 4E 05 E1 |  if_be	add	fp, #36
1a388     A7 02 68 EC |  if_be	wrlong	#1, fp
1a38c     24 4E 85 E1 |  if_be	sub	fp, #36
1a390     64 01 90 FD | 	jmp	#LR__2355
1a394                 | LR__2348
1a394     20 4E 05 F1 | 	add	fp, #32
1a398     A7 1E 02 FB | 	rdlong	local01, fp
1a39c     20 4E 85 F1 | 	sub	fp, #32
1a3a0     01 1E 56 F2 | 	cmps	local01, #1 wc
1a3a4     50 01 90 CD |  if_b	jmp	#LR__2355
1a3a8     B8 4E 05 F1 | 	add	fp, #184
1a3ac     A7 1E 02 FB | 	rdlong	local01, fp
1a3b0     98 4E 85 F1 | 	sub	fp, #152
1a3b4     A7 22 02 FB | 	rdlong	local03, fp
1a3b8     11 1F 82 F1 | 	sub	local01, local03
1a3bc     98 4E 05 F1 | 	add	fp, #152
1a3c0     A7 1E 62 FC | 	wrlong	local01, fp
1a3c4     B8 4E 85 F1 | 	sub	fp, #184
1a3c8     2C 01 90 FD | 	jmp	#LR__2355
1a3cc                 | LR__2349
1a3cc     00 1E 06 F6 | 	mov	local01, #0
1a3d0     08 4E 05 F1 | 	add	fp, #8
1a3d4     A7 20 02 FB | 	rdlong	local02, fp
1a3d8     1C 20 46 F0 | 	shr	local02, #28
1a3dc     01 20 0E F5 | 	and	local02, #1 wz
1a3e0     01 1E 06 A6 |  if_e	mov	local01, #1
1a3e4     2C 4E 05 F1 | 	add	fp, #44
1a3e8     A7 1E 62 FC | 	wrlong	local01, fp
1a3ec     14 4E 85 F1 | 	sub	fp, #20
1a3f0     A7 1E 02 FB | 	rdlong	local01, fp
1a3f4     98 4E 05 F1 | 	add	fp, #152
1a3f8     A7 22 02 FB | 	rdlong	local03, fp
1a3fc     B8 4E 85 F1 | 	sub	fp, #184
1a400     11 1F 52 F2 | 	cmps	local01, local03 wc
1a404     18 00 90 3D |  if_ae	jmp	#LR__2350
1a408     20 4E 05 F1 | 	add	fp, #32
1a40c     A7 24 02 FB | 	rdlong	local04, fp
1a410     20 4E 85 F1 | 	sub	fp, #32
1a414     FF FF 7F FF 
1a418     FC 25 56 F2 | 	cmps	local04, ##-4 wc
1a41c     10 00 90 3D |  if_ae	jmp	#LR__2351
1a420                 | LR__2350
1a420     24 4E 05 F1 | 	add	fp, #36
1a424     A7 02 68 FC | 	wrlong	#1, fp
1a428     24 4E 85 F1 | 	sub	fp, #36
1a42c     C8 00 90 FD | 	jmp	#LR__2355
1a430                 | LR__2351
1a430     B8 4E 05 F1 | 	add	fp, #184
1a434     A7 24 02 FB | 	rdlong	local04, fp
1a438     98 4E 85 F1 | 	sub	fp, #152
1a43c     A7 22 02 FB | 	rdlong	local03, fp
1a440     11 25 82 F1 | 	sub	local04, local03
1a444     98 4E 05 F1 | 	add	fp, #152
1a448     A7 24 62 FC | 	wrlong	local04, fp
1a44c     AC 4E 85 F1 | 	sub	fp, #172
1a450     A7 12 02 FB | 	rdlong	arg01, fp
1a454     08 4E 05 F1 | 	add	fp, #8
1a458     A7 14 02 F6 | 	mov	arg02, fp
1a45c     0C 4E 05 F1 | 	add	fp, #12
1a460     A7 16 02 F6 | 	mov	arg03, fp
1a464     12 19 62 F6 | 	neg	arg04, local04
1a468     04 4E 85 F1 | 	sub	fp, #4
1a46c     A7 1A 02 FB | 	rdlong	arg05, fp
1a470     1C 4E 85 F1 | 	sub	fp, #28
1a474     94 3E B0 FD | 	call	#__system__disassemble_0381
1a478     7C 00 90 FD | 	jmp	#LR__2355
1a47c                 | LR__2352
1a47c     24 4E 05 F1 | 	add	fp, #36
1a480     A7 1E 0A FB | 	rdlong	local01, fp wz
1a484     24 4E 85 F1 | 	sub	fp, #36
1a488     34 00 90 AD |  if_e	jmp	#LR__2353
1a48c     0C 4E 05 F1 | 	add	fp, #12
1a490     A7 12 02 FB | 	rdlong	arg01, fp
1a494     08 4E 05 F1 | 	add	fp, #8
1a498     A7 14 02 F6 | 	mov	arg02, fp
1a49c     0C 4E 05 F1 | 	add	fp, #12
1a4a0     A7 16 02 F6 | 	mov	arg03, fp
1a4a4     98 4E 05 F1 | 	add	fp, #152
1a4a8     A7 18 02 FB | 	rdlong	arg04, fp
1a4ac     9C 4E 85 F1 | 	sub	fp, #156
1a4b0     A7 1A 02 FB | 	rdlong	arg05, fp
1a4b4     1C 4E 85 F1 | 	sub	fp, #28
1a4b8     50 3E B0 FD | 	call	#__system__disassemble_0381
1a4bc     38 00 90 FD | 	jmp	#LR__2354
1a4c0                 | LR__2353
1a4c0     0C 4E 05 F1 | 	add	fp, #12
1a4c4     A7 12 02 FB | 	rdlong	arg01, fp
1a4c8     08 4E 05 F1 | 	add	fp, #8
1a4cc     A7 14 02 F6 | 	mov	arg02, fp
1a4d0     0C 4E 05 F1 | 	add	fp, #12
1a4d4     A7 16 02 F6 | 	mov	arg03, fp
1a4d8     98 4E 05 F1 | 	add	fp, #152
1a4dc     A7 24 02 FB | 	rdlong	local04, fp
1a4e0     01 24 06 F1 | 	add	local04, #1
1a4e4     12 19 62 F6 | 	neg	arg04, local04
1a4e8     9C 4E 85 F1 | 	sub	fp, #156
1a4ec     A7 1A 02 FB | 	rdlong	arg05, fp
1a4f0     1C 4E 85 F1 | 	sub	fp, #28
1a4f4     14 3E B0 FD | 	call	#__system__disassemble_0381
1a4f8                 | LR__2354
1a4f8                 | LR__2355
1a4f8     1C 4E 05 F1 | 	add	fp, #28
1a4fc     A7 1E 02 FB | 	rdlong	local01, fp
1a500     1C 4E 85 F1 | 	sub	fp, #28
1a504     02 1E 0E F2 | 	cmp	local01, #2 wz
1a508     4C 00 90 5D |  if_ne	jmp	#LR__2358
1a50c     1C 4E 05 F1 | 	add	fp, #28
1a510     A7 20 68 FC | 	wrlong	#16, fp
1a514     1C 4E 85 F1 | 	sub	fp, #28
1a518                 | LR__2356
1a518     14 4E 05 F1 | 	add	fp, #20
1a51c     A7 1E 0A FB | 	rdlong	local01, fp wz
1a520     14 4E 85 F1 | 	sub	fp, #20
1a524     30 00 90 AD |  if_e	jmp	#LR__2357
1a528     14 4E 05 F1 | 	add	fp, #20
1a52c     A7 22 02 FB | 	rdlong	local03, fp
1a530     14 4E 85 F1 | 	sub	fp, #20
1a534     00 80 00 FF 
1a538     00 22 16 F2 | 	cmp	local03, ##16777216 wc
1a53c     18 00 90 3D |  if_ae	jmp	#LR__2357
1a540     14 4E 05 F1 | 	add	fp, #20
1a544     A7 1E 02 FB | 	rdlong	local01, fp
1a548     01 1E 66 F0 | 	shl	local01, #1
1a54c     A7 1E 62 FC | 	wrlong	local01, fp
1a550     14 4E 85 F1 | 	sub	fp, #20
1a554     C0 FF 9F FD | 	jmp	#LR__2356
1a558                 | LR__2357
1a558                 | LR__2358
1a558     70 4E 05 F1 | 	add	fp, #112
1a55c     A7 12 02 F6 | 	mov	arg01, fp
1a560     5C 4E 85 F1 | 	sub	fp, #92
1a564     A7 14 02 FB | 	rdlong	arg02, fp
1a568     08 4E 05 F1 | 	add	fp, #8
1a56c     A7 16 02 FB | 	rdlong	arg03, fp
1a570     A0 4E 05 F1 | 	add	fp, #160
1a574     A7 1A 02 FB | 	rdlong	arg05, fp
1a578     BC 4E 85 F1 | 	sub	fp, #188
1a57c     01 18 06 F6 | 	mov	arg04, #1
1a580     14 3D B0 FD | 	call	#__system___uitoa
1a584     58 4E 05 F1 | 	add	fp, #88
1a588     A7 FA 61 FC | 	wrlong	result1, fp
1a58c     38 4E 85 F1 | 	sub	fp, #56
1a590     A7 1E 02 FB | 	rdlong	local01, fp
1a594     20 4E 85 F1 | 	sub	fp, #32
1a598     00 1E 56 F2 | 	cmps	local01, #0 wc
1a59c     50 00 90 3D |  if_ae	jmp	#LR__2359
1a5a0     60 4E 05 F1 | 	add	fp, #96
1a5a4     A7 5A 68 FC | 	wrlong	#45, fp
1a5a8     50 4E 05 F1 | 	add	fp, #80
1a5ac     A7 12 02 F6 | 	mov	arg01, fp
1a5b0     90 4E 85 F1 | 	sub	fp, #144
1a5b4     A7 22 02 FB | 	rdlong	local03, fp
1a5b8     11 15 62 F6 | 	neg	arg02, local03
1a5bc     18 4E 05 F1 | 	add	fp, #24
1a5c0     A7 18 02 FB | 	rdlong	arg04, fp
1a5c4     84 4E 05 F1 | 	add	fp, #132
1a5c8     A7 28 02 FB | 	rdlong	local06, fp
1a5cc     BC 4E 85 F1 | 	sub	fp, #188
1a5d0     14 25 02 F6 | 	mov	local04, local06
1a5d4     0A 16 06 F6 | 	mov	arg03, #10
1a5d8     12 1B 02 F6 | 	mov	arg05, local04
1a5dc     B8 3C B0 FD | 	call	#__system___uitoa
1a5e0     5C 4E 05 F1 | 	add	fp, #92
1a5e4     A7 FA 61 FC | 	wrlong	result1, fp
1a5e8     5C 4E 85 F1 | 	sub	fp, #92
1a5ec     48 00 90 FD | 	jmp	#LR__2360
1a5f0                 | LR__2359
1a5f0     60 4E 05 F1 | 	add	fp, #96
1a5f4     A7 56 68 FC | 	wrlong	#43, fp
1a5f8     50 4E 05 F1 | 	add	fp, #80
1a5fc     A7 12 02 F6 | 	mov	arg01, fp
1a600     90 4E 85 F1 | 	sub	fp, #144
1a604     A7 14 02 FB | 	rdlong	arg02, fp
1a608     18 4E 05 F1 | 	add	fp, #24
1a60c     A7 18 02 FB | 	rdlong	arg04, fp
1a610     84 4E 05 F1 | 	add	fp, #132
1a614     A7 28 02 FB | 	rdlong	local06, fp
1a618     BC 4E 85 F1 | 	sub	fp, #188
1a61c     14 25 02 F6 | 	mov	local04, local06
1a620     0A 16 06 F6 | 	mov	arg03, #10
1a624     12 1B 02 F6 | 	mov	arg05, local04
1a628     6C 3C B0 FD | 	call	#__system___uitoa
1a62c     5C 4E 05 F1 | 	add	fp, #92
1a630     A7 FA 61 FC | 	wrlong	result1, fp
1a634     5C 4E 85 F1 | 	sub	fp, #92
1a638                 | LR__2360
1a638     24 4E 05 F1 | 	add	fp, #36
1a63c     A7 1E 0A FB | 	rdlong	local01, fp wz
1a640     24 4E 85 F1 | 	sub	fp, #36
1a644     2C 00 90 AD |  if_e	jmp	#LR__2361
1a648     50 4E 05 F1 | 	add	fp, #80
1a64c     A7 00 68 FC | 	wrlong	#0, fp
1a650     04 4E 85 F1 | 	sub	fp, #4
1a654     A7 00 68 FC | 	wrlong	#0, fp
1a658     6C 4E 05 F1 | 	add	fp, #108
1a65c     A7 1E 02 FB | 	rdlong	local01, fp
1a660     01 1E 06 F1 | 	add	local01, #1
1a664     64 4E 85 F1 | 	sub	fp, #100
1a668     A7 1E 62 FC | 	wrlong	local01, fp
1a66c     54 4E 85 F1 | 	sub	fp, #84
1a670     88 00 90 FD | 	jmp	#LR__2364
1a674                 | LR__2361
1a674     20 4E 05 F1 | 	add	fp, #32
1a678     A7 1E 02 FB | 	rdlong	local01, fp
1a67c     20 4E 85 F1 | 	sub	fp, #32
1a680     00 1E 56 F2 | 	cmps	local01, #0 wc
1a684     40 00 90 3D |  if_ae	jmp	#LR__2362
1a688     20 4E 05 F1 | 	add	fp, #32
1a68c     A7 20 02 FB | 	rdlong	local02, fp
1a690     30 4E 05 F1 | 	add	fp, #48
1a694     A7 20 62 FC | 	wrlong	local02, fp
1a698     04 4E 85 F1 | 	sub	fp, #4
1a69c     A7 20 62 FC | 	wrlong	local02, fp
1a6a0     2C 4E 85 F1 | 	sub	fp, #44
1a6a4     A7 1E 02 FB | 	rdlong	local01, fp
1a6a8     98 4E 05 F1 | 	add	fp, #152
1a6ac     A7 22 02 FB | 	rdlong	local03, fp
1a6b0     11 1F 02 F1 | 	add	local01, local03
1a6b4     01 1E 06 F1 | 	add	local01, #1
1a6b8     64 4E 85 F1 | 	sub	fp, #100
1a6bc     A7 1E 62 FC | 	wrlong	local01, fp
1a6c0     54 4E 85 F1 | 	sub	fp, #84
1a6c4     34 00 90 FD | 	jmp	#LR__2363
1a6c8                 | LR__2362
1a6c8     4C 4E 05 F1 | 	add	fp, #76
1a6cc     A7 00 68 FC | 	wrlong	#0, fp
1a6d0     2C 4E 85 F1 | 	sub	fp, #44
1a6d4     A7 1E 02 FB | 	rdlong	local01, fp
1a6d8     30 4E 05 F1 | 	add	fp, #48
1a6dc     A7 1E 62 FC | 	wrlong	local01, fp
1a6e0     68 4E 05 F1 | 	add	fp, #104
1a6e4     A7 22 02 FB | 	rdlong	local03, fp
1a6e8     11 1F 02 F1 | 	add	local01, local03
1a6ec     01 1E 06 F1 | 	add	local01, #1
1a6f0     64 4E 85 F1 | 	sub	fp, #100
1a6f4     A7 1E 62 FC | 	wrlong	local01, fp
1a6f8     54 4E 85 F1 | 	sub	fp, #84
1a6fc                 | LR__2363
1a6fc                 | LR__2364
1a6fc     54 4E 05 F1 | 	add	fp, #84
1a700     A7 1E 02 FB | 	rdlong	local01, fp
1a704     08 4E 85 F1 | 	sub	fp, #8
1a708     A7 22 02 FB | 	rdlong	local03, fp
1a70c     11 1F 82 F1 | 	sub	local01, local03
1a710     01 1E 06 F1 | 	add	local01, #1
1a714     24 4E 85 F1 | 	sub	fp, #36
1a718     A7 1E 62 FC | 	wrlong	local01, fp
1a71c     04 4E 05 F1 | 	add	fp, #4
1a720     A7 1E 0A FB | 	rdlong	local01, fp wz
1a724     2C 4E 85 F1 | 	sub	fp, #44
1a728     28 4E 05 51 |  if_ne	add	fp, #40
1a72c     A7 22 02 5B |  if_ne	rdlong	local03, fp
1a730     01 22 06 51 |  if_ne	add	local03, #1
1a734     A7 22 62 5C |  if_ne	wrlong	local03, fp
1a738     28 4E 85 51 |  if_ne	sub	fp, #40
1a73c     1C 4E 05 F1 | 	add	fp, #28
1a740     A7 1E 02 FB | 	rdlong	local01, fp
1a744     1C 4E 85 F1 | 	sub	fp, #28
1a748     10 1E 0E F2 | 	cmp	local01, #16 wz
1a74c     28 4E 05 A1 |  if_e	add	fp, #40
1a750     A7 1E 02 AB |  if_e	rdlong	local01, fp
1a754     02 1E 06 A1 |  if_e	add	local01, #2
1a758     A7 1E 62 AC |  if_e	wrlong	local01, fp
1a75c     28 4E 85 A1 |  if_e	sub	fp, #40
1a760     24 4E 05 F1 | 	add	fp, #36
1a764     A7 1E 0A FB | 	rdlong	local01, fp wz
1a768     24 4E 85 F1 | 	sub	fp, #36
1a76c     28 00 90 AD |  if_e	jmp	#LR__2365
1a770     28 4E 05 F1 | 	add	fp, #40
1a774     A7 1E 02 FB | 	rdlong	local01, fp
1a778     02 22 06 F6 | 	mov	local03, #2
1a77c     34 4E 05 F1 | 	add	fp, #52
1a780     A7 26 02 FB | 	rdlong	local05, fp
1a784     13 23 02 F1 | 	add	local03, local05
1a788     11 1F 02 F1 | 	add	local01, local03
1a78c     34 4E 85 F1 | 	sub	fp, #52
1a790     A7 1E 62 FC | 	wrlong	local01, fp
1a794     28 4E 85 F1 | 	sub	fp, #40
1a798                 | LR__2365
1a798     28 4E 05 F1 | 	add	fp, #40
1a79c     A7 1E 02 FB | 	rdlong	local01, fp
1a7a0     28 4E 85 F1 | 	sub	fp, #40
1a7a4     41 1E 56 F2 | 	cmps	local01, #65 wc
1a7a8     01 FA 65 36 |  if_ae	neg	result1, #1
1a7ac     08 05 90 3D |  if_ae	jmp	#LR__2393
1a7b0     3C 4E 05 F1 | 	add	fp, #60
1a7b4     A7 1E 0A FB | 	rdlong	local01, fp wz
1a7b8     3C 4E 85 F1 | 	sub	fp, #60
1a7bc     60 00 90 AD |  if_e	jmp	#LR__2366
1a7c0     C0 4E 05 F1 | 	add	fp, #192
1a7c4     A7 12 02 FB | 	rdlong	arg01, fp
1a7c8     94 4E 85 F1 | 	sub	fp, #148
1a7cc     A7 14 02 FB | 	rdlong	arg02, fp
1a7d0     14 4E 05 F1 | 	add	fp, #20
1a7d4     A7 16 02 FB | 	rdlong	arg03, fp
1a7d8     40 4E 85 F1 | 	sub	fp, #64
1a7dc     20 3D B0 FD | 	call	#__system__emitsign_0383
1a7e0     18 4F 05 F1 | 	add	fp, #280
1a7e4     A7 FA 61 FC | 	wrlong	result1, fp
1a7e8     18 4F 85 F1 | 	sub	fp, #280
1a7ec     00 FA 55 F2 | 	cmps	result1, #0 wc
1a7f0     18 4F 05 C1 |  if_b	add	fp, #280
1a7f4     A7 FA 01 CB |  if_b	rdlong	result1, fp
1a7f8     18 4F 85 C1 |  if_b	sub	fp, #280
1a7fc     B8 04 90 CD |  if_b	jmp	#LR__2393
1a800     C0 4E 05 F1 | 	add	fp, #192
1a804     A7 1E 02 FB | 	rdlong	local01, fp
1a808     58 4E 05 F1 | 	add	fp, #88
1a80c     A7 22 02 FB | 	rdlong	local03, fp
1a810     11 1F 02 F1 | 	add	local01, local03
1a814     58 4E 85 F1 | 	sub	fp, #88
1a818     A7 1E 62 FC | 	wrlong	local01, fp
1a81c     C0 4E 85 F1 | 	sub	fp, #192
1a820                 | LR__2366
1a820     4C 4E 05 F1 | 	add	fp, #76
1a824     A7 1E 02 FB | 	rdlong	local01, fp
1a828     34 4E 85 F1 | 	sub	fp, #52
1a82c     A7 1E 62 FC | 	wrlong	local01, fp
1a830     18 4E 85 F1 | 	sub	fp, #24
1a834     97 9E 48 FB | 	callpa	#(@LR__2372-@LR__2367)>>2,fcache_load_ptr_
1a838                 | LR__2367
1a838     18 4E 05 F1 | 	add	fp, #24
1a83c     A7 20 02 FB | 	rdlong	local02, fp
1a840     3C 4E 05 F1 | 	add	fp, #60
1a844     A7 26 02 FB | 	rdlong	local05, fp
1a848     54 4E 85 F1 | 	sub	fp, #84
1a84c     13 21 52 F2 | 	cmps	local02, local05 wc
1a850     20 01 90 3D |  if_ae	jmp	#LR__2373
1a854     18 4E 05 F1 | 	add	fp, #24
1a858     A7 28 02 FB | 	rdlong	local06, fp
1a85c     18 4E 85 F1 | 	sub	fp, #24
1a860     00 28 56 F2 | 	cmps	local06, #0 wc
1a864     58 00 90 CD |  if_b	jmp	#LR__2368
1a868     18 4E 05 F1 | 	add	fp, #24
1a86c     A7 28 02 FB | 	rdlong	local06, fp
1a870     40 4E 05 F1 | 	add	fp, #64
1a874     A7 2A 02 FB | 	rdlong	local07, fp
1a878     58 4E 85 F1 | 	sub	fp, #88
1a87c     15 29 52 F2 | 	cmps	local06, local07 wc
1a880     3C 00 90 3D |  if_ae	jmp	#LR__2368
1a884     C0 4E 05 F1 | 	add	fp, #192
1a888     A7 2C 02 FB | 	rdlong	local08, fp
1a88c     16 2B 02 F6 | 	mov	local07, local08
1a890     01 2A 06 F1 | 	add	local07, #1
1a894     A7 2A 62 FC | 	wrlong	local07, fp
1a898     A8 4E 85 F1 | 	sub	fp, #168
1a89c     A7 2A 02 FB | 	rdlong	local07, fp
1a8a0     15 2F 02 F6 | 	mov	local09, local07
1a8a4     58 4E 05 F1 | 	add	fp, #88
1a8a8     A7 30 02 F6 | 	mov	local10, fp
1a8ac     A7 2E 02 F1 | 	add	local09, fp
1a8b0     17 33 C2 FA | 	rdbyte	local11, local09
1a8b4     16 33 42 FC | 	wrbyte	local11, local08
1a8b8     70 4E 85 F1 | 	sub	fp, #112
1a8bc     20 00 90 FD | 	jmp	#LR__2369
1a8c0                 | LR__2368
1a8c0     C0 4E 05 F1 | 	add	fp, #192
1a8c4     A7 2C 02 FB | 	rdlong	local08, fp
1a8c8     16 2F 02 F6 | 	mov	local09, local08
1a8cc     01 2E 06 F1 | 	add	local09, #1
1a8d0     A7 2E 62 FC | 	wrlong	local09, fp
1a8d4     C0 4E 85 F1 | 	sub	fp, #192
1a8d8     30 2E 06 F6 | 	mov	local09, #48
1a8dc     16 61 48 FC | 	wrbyte	#48, local08
1a8e0                 | LR__2369
1a8e0     18 4E 05 F1 | 	add	fp, #24
1a8e4     A7 28 02 FB | 	rdlong	local06, fp
1a8e8     38 4E 05 F1 | 	add	fp, #56
1a8ec     A7 34 02 FB | 	rdlong	local12, fp
1a8f0     50 4E 85 F1 | 	sub	fp, #80
1a8f4     1A 29 0A F2 | 	cmp	local06, local12 wz
1a8f8     5C 00 90 5D |  if_ne	jmp	#LR__2371
1a8fc     10 4F 05 F1 | 	add	fp, #272
1a900     A7 2A 02 FB | 	rdlong	local07, fp
1a904     10 4F 85 F1 | 	sub	fp, #272
1a908     15 2F 0A F6 | 	mov	local09, local07 wz
1a90c     28 00 90 5D |  if_ne	jmp	#LR__2370
1a910     54 4E 05 F1 | 	add	fp, #84
1a914     A7 32 02 FB | 	rdlong	local11, fp
1a918     19 31 02 F6 | 	mov	local10, local11
1a91c     01 30 86 F1 | 	sub	local10, #1
1a920     3C 4E 85 F1 | 	sub	fp, #60
1a924     A7 36 02 FB | 	rdlong	local13, fp
1a928     18 4E 85 F1 | 	sub	fp, #24
1a92c     1B 39 02 F6 | 	mov	local14, local13
1a930     18 39 52 F2 | 	cmps	local14, local10 wc
1a934     20 00 90 3D |  if_ae	jmp	#LR__2371
1a938                 | LR__2370
1a938     C0 4E 05 F1 | 	add	fp, #192
1a93c     A7 2C 02 FB | 	rdlong	local08, fp
1a940     16 35 02 F6 | 	mov	local12, local08
1a944     01 34 06 F1 | 	add	local12, #1
1a948     A7 34 62 FC | 	wrlong	local12, fp
1a94c     C0 4E 85 F1 | 	sub	fp, #192
1a950     2E 2E 06 F6 | 	mov	local09, #46
1a954     16 5D 48 FC | 	wrbyte	#46, local08
1a958                 | LR__2371
1a958     18 4E 05 F1 | 	add	fp, #24
1a95c     A7 3A 02 FB | 	rdlong	local15, fp
1a960     1D 35 02 F6 | 	mov	local12, local15
1a964     01 34 06 F1 | 	add	local12, #1
1a968     A7 34 62 FC | 	wrlong	local12, fp
1a96c     18 4E 85 F1 | 	sub	fp, #24
1a970     C4 FE 9F FD | 	jmp	#LR__2367
1a974                 | LR__2372
1a974                 | LR__2373
1a974     34 4E 05 F1 | 	add	fp, #52
1a978     A7 1E 0A FB | 	rdlong	local01, fp wz
1a97c     34 4E 85 F1 | 	sub	fp, #52
1a980     A0 00 90 AD |  if_e	jmp	#LR__2377
1a984     C0 4E 05 F1 | 	add	fp, #192
1a988     A7 1E 02 FB | 	rdlong	local01, fp
1a98c     01 1E 86 F1 | 	sub	local01, #1
1a990     A7 1E 62 FC | 	wrlong	local01, fp
1a994     C0 4E 85 F1 | 	sub	fp, #192
1a998     97 26 48 FB | 	callpa	#(@LR__2375-@LR__2374)>>2,fcache_load_ptr_
1a99c                 | LR__2374
1a99c     C0 4E 05 F1 | 	add	fp, #192
1a9a0     A7 1E 02 FB | 	rdlong	local01, fp
1a9a4     04 4E 05 F1 | 	add	fp, #4
1a9a8     A7 22 02 FB | 	rdlong	local03, fp
1a9ac     C4 4E 85 F1 | 	sub	fp, #196
1a9b0     11 1F 5A F2 | 	cmps	local01, local03 wcz
1a9b4     30 00 90 ED |  if_be	jmp	#LR__2376
1a9b8     C0 4E 05 F1 | 	add	fp, #192
1a9bc     A7 28 02 FB | 	rdlong	local06, fp
1a9c0     C0 4E 85 F1 | 	sub	fp, #192
1a9c4     14 25 C2 FA | 	rdbyte	local04, local06
1a9c8     30 24 0E F2 | 	cmp	local04, #48 wz
1a9cc     18 00 90 5D |  if_ne	jmp	#LR__2376
1a9d0     C0 4E 05 F1 | 	add	fp, #192
1a9d4     A7 1E 02 FB | 	rdlong	local01, fp
1a9d8     01 1E 86 F1 | 	sub	local01, #1
1a9dc     A7 1E 62 FC | 	wrlong	local01, fp
1a9e0     C0 4E 85 F1 | 	sub	fp, #192
1a9e4     B4 FF 9F FD | 	jmp	#LR__2374
1a9e8                 | LR__2375
1a9e8                 | LR__2376
1a9e8     C0 4E 05 F1 | 	add	fp, #192
1a9ec     A7 20 02 FB | 	rdlong	local02, fp
1a9f0     C0 4E 85 F1 | 	sub	fp, #192
1a9f4     10 1F C2 FA | 	rdbyte	local01, local02
1a9f8     2E 1E 0E F2 | 	cmp	local01, #46 wz
1a9fc     C0 4E 05 A1 |  if_e	add	fp, #192
1aa00     A7 1E 02 AB |  if_e	rdlong	local01, fp
1aa04     01 1E 86 A1 |  if_e	sub	local01, #1
1aa08     A7 1E 62 AC |  if_e	wrlong	local01, fp
1aa0c     C0 4E 85 A1 |  if_e	sub	fp, #192
1aa10     C0 4E 05 F1 | 	add	fp, #192
1aa14     A7 22 02 FB | 	rdlong	local03, fp
1aa18     01 22 06 F1 | 	add	local03, #1
1aa1c     A7 22 62 FC | 	wrlong	local03, fp
1aa20     C0 4E 85 F1 | 	sub	fp, #192
1aa24                 | LR__2377
1aa24     24 4E 05 F1 | 	add	fp, #36
1aa28     A7 1E 0A FB | 	rdlong	local01, fp wz
1aa2c     24 4E 85 F1 | 	sub	fp, #36
1aa30     B4 00 90 AD |  if_e	jmp	#LR__2380
1aa34     C0 4E 05 F1 | 	add	fp, #192
1aa38     A7 20 02 FB | 	rdlong	local02, fp
1aa3c     10 23 02 F6 | 	mov	local03, local02
1aa40     01 22 06 F1 | 	add	local03, #1
1aa44     A7 22 62 FC | 	wrlong	local03, fp
1aa48     90 4E 85 F1 | 	sub	fp, #144
1aa4c     A7 24 02 FB | 	rdlong	local04, fp
1aa50     10 25 42 FC | 	wrbyte	local04, local02
1aa54     90 4E 05 F1 | 	add	fp, #144
1aa58     A7 20 02 FB | 	rdlong	local02, fp
1aa5c     10 23 02 F6 | 	mov	local03, local02
1aa60     01 22 06 F1 | 	add	local03, #1
1aa64     A7 22 62 FC | 	wrlong	local03, fp
1aa68     60 4E 85 F1 | 	sub	fp, #96
1aa6c     A7 24 02 FB | 	rdlong	local04, fp
1aa70     10 25 42 FC | 	wrbyte	local04, local02
1aa74     48 4E 85 F1 | 	sub	fp, #72
1aa78     A7 00 68 FC | 	wrlong	#0, fp
1aa7c     18 4E 85 F1 | 	sub	fp, #24
1aa80                 | LR__2378
1aa80     18 4E 05 F1 | 	add	fp, #24
1aa84     A7 20 02 FB | 	rdlong	local02, fp
1aa88     44 4E 05 F1 | 	add	fp, #68
1aa8c     A7 26 02 FB | 	rdlong	local05, fp
1aa90     5C 4E 85 F1 | 	sub	fp, #92
1aa94     13 21 52 F2 | 	cmps	local02, local05 wc
1aa98     4C 00 90 3D |  if_ae	jmp	#LR__2379
1aa9c     C0 4E 05 F1 | 	add	fp, #192
1aaa0     A7 2C 02 FB | 	rdlong	local08, fp
1aaa4     16 35 02 F6 | 	mov	local12, local08
1aaa8     01 34 06 F1 | 	add	local12, #1
1aaac     A7 34 62 FC | 	wrlong	local12, fp
1aab0     A8 4E 85 F1 | 	sub	fp, #168
1aab4     A7 2A 02 FB | 	rdlong	local07, fp
1aab8     15 2F 02 F6 | 	mov	local09, local07
1aabc     98 4E 05 F1 | 	add	fp, #152
1aac0     A7 30 02 F6 | 	mov	local10, fp
1aac4     A7 2E 02 F1 | 	add	local09, fp
1aac8     17 33 C2 FA | 	rdbyte	local11, local09
1aacc     16 33 42 FC | 	wrbyte	local11, local08
1aad0     98 4E 85 F1 | 	sub	fp, #152
1aad4     A7 34 02 FB | 	rdlong	local12, fp
1aad8     01 34 06 F1 | 	add	local12, #1
1aadc     A7 34 62 FC | 	wrlong	local12, fp
1aae0     18 4E 85 F1 | 	sub	fp, #24
1aae4     98 FF 9F FD | 	jmp	#LR__2378
1aae8                 | LR__2379
1aae8                 | LR__2380
1aae8     C0 4E 05 F1 | 	add	fp, #192
1aaec     A7 1E 02 FB | 	rdlong	local01, fp
1aaf0     C0 4E 85 F1 | 	sub	fp, #192
1aaf4     0F 01 48 FC | 	wrbyte	#0, local01
1aaf8                 | LR__2381
1aaf8     6C 4E 05 F1 | 	add	fp, #108
1aafc     A7 1E 0A FB | 	rdlong	local01, fp wz
1ab00     6C 4E 85 F1 | 	sub	fp, #108
1ab04     90 01 90 AD |  if_e	jmp	#LR__2392
1ab08     48 4E 05 F1 | 	add	fp, #72
1ab0c     A7 22 0A FB | 	rdlong	local03, fp wz
1ab10     48 4E 85 F1 | 	sub	fp, #72
1ab14     80 01 90 AD |  if_e	jmp	#LR__2392
1ab18     C4 4E 05 F1 | 	add	fp, #196
1ab1c     A7 12 02 FB | 	rdlong	arg01, fp
1ab20     C4 4E 85 F1 | 	sub	fp, #196
1ab24     09 3D 02 F6 | 	mov	local16, arg01
1ab28     97 06 48 FB | 	callpa	#(@LR__2383-@LR__2382)>>2,fcache_load_ptr_
1ab2c                 | LR__2382
1ab2c     1E FB C9 FA | 	rdbyte	result1, local16 wz
1ab30     01 3C 06 51 |  if_ne	add	local16, #1
1ab34     F4 FF 9F 5D |  if_ne	jmp	#LR__2382
1ab38                 | LR__2383
1ab38     09 3D 82 F1 | 	sub	local16, arg01
1ab3c     1E 25 02 F6 | 	mov	local04, local16
1ab40     6C 4E 05 F1 | 	add	fp, #108
1ab44     A7 28 02 FB | 	rdlong	local06, fp
1ab48     6C 4E 85 F1 | 	sub	fp, #108
1ab4c     14 25 5A F2 | 	cmps	local04, local06 wcz
1ab50     44 01 90 ED |  if_be	jmp	#LR__2392
1ab54     C4 4E 05 F1 | 	add	fp, #196
1ab58     A7 1E 02 FB | 	rdlong	local01, fp
1ab5c     5C 4E 05 F1 | 	add	fp, #92
1ab60     A7 1E 62 FC | 	wrlong	local01, fp
1ab64     FC 4E 85 F1 | 	sub	fp, #252
1ab68     A7 1E 0A FB | 	rdlong	local01, fp wz
1ab6c     24 4E 85 F1 | 	sub	fp, #36
1ab70     20 00 90 AD |  if_e	jmp	#LR__2384
1ab74     B8 4E 05 F1 | 	add	fp, #184
1ab78     A7 00 68 FC | 	wrlong	#0, fp
1ab7c     4C 4E 85 F1 | 	sub	fp, #76
1ab80     A7 1E 02 FB | 	rdlong	local01, fp
1ab84     B0 4E 05 F1 | 	add	fp, #176
1ab88     A7 1E 62 FC | 	wrlong	local01, fp
1ab8c     1C 4F 85 F1 | 	sub	fp, #284
1ab90     24 00 90 FD | 	jmp	#LR__2385
1ab94                 | LR__2384
1ab94     6C 4E 05 F1 | 	add	fp, #108
1ab98     A7 1E 02 FB | 	rdlong	local01, fp
1ab9c     01 1E 86 F1 | 	sub	local01, #1
1aba0     4C 4E 05 F1 | 	add	fp, #76
1aba4     A7 22 02 FB | 	rdlong	local03, fp
1aba8     11 1F 82 F1 | 	sub	local01, local03
1abac     64 4E 05 F1 | 	add	fp, #100
1abb0     A7 1E 62 FC | 	wrlong	local01, fp
1abb4     1C 4F 85 F1 | 	sub	fp, #284
1abb8                 | LR__2385
1abb8     97 20 48 FB | 	callpa	#(@LR__2387-@LR__2386)>>2,fcache_load_ptr_
1abbc                 | LR__2386
1abbc     1C 4F 05 F1 | 	add	fp, #284
1abc0     A7 1E 0A FB | 	rdlong	local01, fp wz
1abc4     1C 4F 85 F1 | 	sub	fp, #284
1abc8     30 00 90 AD |  if_e	jmp	#LR__2388
1abcc     20 4F 05 F1 | 	add	fp, #288
1abd0     A7 20 02 FB | 	rdlong	local02, fp
1abd4     10 23 02 F6 | 	mov	local03, local02
1abd8     01 22 06 F1 | 	add	local03, #1
1abdc     A7 22 62 FC | 	wrlong	local03, fp
1abe0     10 55 48 FC | 	wrbyte	#42, local02
1abe4     04 4E 85 F1 | 	sub	fp, #4
1abe8     A7 1E 02 FB | 	rdlong	local01, fp
1abec     01 1E 86 F1 | 	sub	local01, #1
1abf0     A7 1E 62 FC | 	wrlong	local01, fp
1abf4     1C 4F 85 F1 | 	sub	fp, #284
1abf8     C0 FF 9F FD | 	jmp	#LR__2386
1abfc                 | LR__2387
1abfc                 | LR__2388
1abfc     B8 4E 05 F1 | 	add	fp, #184
1ac00     A7 1E 0A FB | 	rdlong	local01, fp wz
1ac04     B8 4E 85 F1 | 	sub	fp, #184
1ac08     70 00 90 AD |  if_e	jmp	#LR__2391
1ac0c     20 4F 05 F1 | 	add	fp, #288
1ac10     A7 20 02 FB | 	rdlong	local02, fp
1ac14     10 23 02 F6 | 	mov	local03, local02
1ac18     01 22 06 F1 | 	add	local03, #1
1ac1c     A7 22 62 FC | 	wrlong	local03, fp
1ac20     10 5D 48 FC | 	wrbyte	#46, local02
1ac24     04 4E 85 F1 | 	sub	fp, #4
1ac28     A7 00 68 FC | 	wrlong	#0, fp
1ac2c     1C 4F 85 F1 | 	sub	fp, #284
1ac30                 | LR__2389
1ac30     1C 4F 05 F1 | 	add	fp, #284
1ac34     A7 20 02 FB | 	rdlong	local02, fp
1ac38     64 4E 85 F1 | 	sub	fp, #100
1ac3c     A7 26 02 FB | 	rdlong	local05, fp
1ac40     B8 4E 85 F1 | 	sub	fp, #184
1ac44     13 21 52 F2 | 	cmps	local02, local05 wc
1ac48     30 00 90 3D |  if_ae	jmp	#LR__2390
1ac4c     20 4F 05 F1 | 	add	fp, #288
1ac50     A7 2C 02 FB | 	rdlong	local08, fp
1ac54     16 35 02 F6 | 	mov	local12, local08
1ac58     01 34 06 F1 | 	add	local12, #1
1ac5c     A7 34 62 FC | 	wrlong	local12, fp
1ac60     16 55 48 FC | 	wrbyte	#42, local08
1ac64     04 4E 85 F1 | 	sub	fp, #4
1ac68     A7 34 02 FB | 	rdlong	local12, fp
1ac6c     01 34 06 F1 | 	add	local12, #1
1ac70     A7 34 62 FC | 	wrlong	local12, fp
1ac74     1C 4F 85 F1 | 	sub	fp, #284
1ac78     B4 FF 9F FD | 	jmp	#LR__2389
1ac7c                 | LR__2390
1ac7c                 | LR__2391
1ac7c     20 4F 05 F1 | 	add	fp, #288
1ac80     A7 20 02 FB | 	rdlong	local02, fp
1ac84     10 23 02 F6 | 	mov	local03, local02
1ac88     01 22 06 F1 | 	add	local03, #1
1ac8c     A7 22 62 FC | 	wrlong	local03, fp
1ac90     20 4F 85 F1 | 	sub	fp, #288
1ac94     10 01 48 FC | 	wrbyte	#0, local02
1ac98                 | LR__2392
1ac98     04 4E 05 F1 | 	add	fp, #4
1ac9c     A7 12 02 FB | 	rdlong	arg01, fp
1aca0     04 4E 05 F1 | 	add	fp, #4
1aca4     A7 14 02 FB | 	rdlong	arg02, fp
1aca8     BC 4E 05 F1 | 	add	fp, #188
1acac     A7 16 02 FB | 	rdlong	arg03, fp
1acb0     C4 4E 85 F1 | 	sub	fp, #196
1acb4     C4 EE BF FD | 	call	#__system___fmtstr
1acb8                 | LR__2393
1acb8     A7 F0 03 F6 | 	mov	ptra, fp
1acbc     B2 00 A0 FD | 	call	#popregs_
1acc0                 | __system___fmtfloat_ret
1acc0     2D 00 64 FD | 	ret
1acc4                 | 
1acc4                 | __system__Left_S
1acc4     04 4A 05 F6 | 	mov	COUNT_, #4
1acc8     A8 00 A0 FD | 	call	#pushregs_
1accc     09 1F 02 F6 | 	mov	local01, arg01
1acd0     0A 21 02 F6 | 	mov	local02, arg02
1acd4     01 20 56 F2 | 	cmps	local02, #1 wc
1acd8     40 01 00 CF 
1acdc     CA FB 05 C6 |  if_b	mov	result1, ##@LR__4273
1ace0     5C 00 90 CD |  if_b	jmp	#LR__2403
1ace4     0F 13 02 F6 | 	mov	arg01, local01
1ace8     09 23 02 F6 | 	mov	local03, arg01
1acec     97 06 48 FB | 	callpa	#(@LR__2401-@LR__2400)>>2,fcache_load_ptr_
1acf0                 | LR__2400
1acf0     11 FB C9 FA | 	rdbyte	result1, local03 wz
1acf4     01 22 06 51 |  if_ne	add	local03, #1
1acf8     F4 FF 9F 5D |  if_ne	jmp	#LR__2400
1acfc                 | LR__2401
1acfc     09 23 82 F1 | 	sub	local03, arg01
1ad00     11 FB 01 F6 | 	mov	result1, local03
1ad04     10 FB 59 F2 | 	cmps	result1, local02 wcz
1ad08     0F FB 01 E6 |  if_be	mov	result1, local01
1ad0c     30 00 90 ED |  if_be	jmp	#LR__2403
1ad10     10 13 02 F6 | 	mov	arg01, local02
1ad14     02 12 06 F1 | 	add	arg01, #2
1ad18     50 1D B0 FD | 	call	#__system___gc_alloc_managed
1ad1c     FD 24 0A F6 | 	mov	local04, result1 wz
1ad20     18 00 90 AD |  if_e	jmp	#LR__2402
1ad24     12 13 02 F6 | 	mov	arg01, local04
1ad28     0F 15 02 F6 | 	mov	arg02, local01
1ad2c     10 17 02 F6 | 	mov	arg03, local02
1ad30     A0 DE BF FD | 	call	#__system____builtin_memmove
1ad34     12 21 02 F1 | 	add	local02, local04
1ad38     10 01 48 FC | 	wrbyte	#0, local02
1ad3c                 | LR__2402
1ad3c     12 FB 01 F6 | 	mov	result1, local04
1ad40                 | LR__2403
1ad40     A7 F0 03 F6 | 	mov	ptra, fp
1ad44     B2 00 A0 FD | 	call	#popregs_
1ad48                 | __system__Left_S_ret
1ad48     2D 00 64 FD | 	ret
1ad4c                 | 
1ad4c                 | __system__Right_S
1ad4c     05 4A 05 F6 | 	mov	COUNT_, #5
1ad50     A8 00 A0 FD | 	call	#pushregs_
1ad54     09 1F 02 F6 | 	mov	local01, arg01
1ad58     0A 21 02 F6 | 	mov	local02, arg02
1ad5c     01 20 56 F2 | 	cmps	local02, #1 wc
1ad60     40 01 00 CF 
1ad64     CB FB 05 C6 |  if_b	mov	result1, ##@LR__4274
1ad68     64 00 90 CD |  if_b	jmp	#LR__2413
1ad6c     0F 13 02 F6 | 	mov	arg01, local01
1ad70     09 23 02 F6 | 	mov	local03, arg01
1ad74     97 06 48 FB | 	callpa	#(@LR__2411-@LR__2410)>>2,fcache_load_ptr_
1ad78                 | LR__2410
1ad78     11 FB C9 FA | 	rdbyte	result1, local03 wz
1ad7c     01 22 06 51 |  if_ne	add	local03, #1
1ad80     F4 FF 9F 5D |  if_ne	jmp	#LR__2410
1ad84                 | LR__2411
1ad84     09 23 82 F1 | 	sub	local03, arg01
1ad88     11 FB 01 F6 | 	mov	result1, local03
1ad8c     FD 24 02 F6 | 	mov	local04, result1
1ad90     10 25 5A F2 | 	cmps	local04, local02 wcz
1ad94     0F FB 01 E6 |  if_be	mov	result1, local01
1ad98     34 00 90 ED |  if_be	jmp	#LR__2413
1ad9c     10 13 02 F6 | 	mov	arg01, local02
1ada0     02 12 06 F1 | 	add	arg01, #2
1ada4     C4 1C B0 FD | 	call	#__system___gc_alloc_managed
1ada8     FD 26 0A F6 | 	mov	local05, result1 wz
1adac     1C 00 90 AD |  if_e	jmp	#LR__2412
1adb0     10 25 82 F1 | 	sub	local04, local02
1adb4     0F 25 02 F1 | 	add	local04, local01
1adb8     01 20 06 F1 | 	add	local02, #1
1adbc     13 13 02 F6 | 	mov	arg01, local05
1adc0     12 15 02 F6 | 	mov	arg02, local04
1adc4     10 17 02 F6 | 	mov	arg03, local02
1adc8     08 DE BF FD | 	call	#__system____builtin_memmove
1adcc                 | LR__2412
1adcc     13 FB 01 F6 | 	mov	result1, local05
1add0                 | LR__2413
1add0     A7 F0 03 F6 | 	mov	ptra, fp
1add4     B2 00 A0 FD | 	call	#popregs_
1add8                 | __system__Right_S_ret
1add8     2D 00 64 FD | 	ret
1addc                 | 
1addc                 | __system__Mid_S
1addc     05 4A 05 F6 | 	mov	COUNT_, #5
1ade0     A8 00 A0 FD | 	call	#pushregs_
1ade4     09 1F 02 F6 | 	mov	local01, arg01
1ade8     0A 21 02 F6 | 	mov	local02, arg02
1adec     01 16 56 F2 | 	cmps	arg03, #1 wc
1adf0     40 01 00 CF 
1adf4     CC FB 05 C6 |  if_b	mov	result1, ##@LR__4275
1adf8     80 00 90 CD |  if_b	jmp	#LR__2423
1adfc     01 20 86 F1 | 	sub	local02, #1
1ae00     00 20 56 F3 | 	fges	local02, #0 wc
1ae04     0F 13 02 F6 | 	mov	arg01, local01
1ae08     09 23 02 F6 | 	mov	local03, arg01
1ae0c     97 06 48 FB | 	callpa	#(@LR__2421-@LR__2420)>>2,fcache_load_ptr_
1ae10                 | LR__2420
1ae10     11 FB C9 FA | 	rdbyte	result1, local03 wz
1ae14     01 22 06 51 |  if_ne	add	local03, #1
1ae18     F4 FF 9F 5D |  if_ne	jmp	#LR__2420
1ae1c                 | LR__2421
1ae1c     09 23 82 F1 | 	sub	local03, arg01
1ae20     11 FB 01 F6 | 	mov	result1, local03
1ae24     FD 14 02 F6 | 	mov	arg02, result1
1ae28     10 15 52 F2 | 	cmps	arg02, local02 wc
1ae2c     40 01 00 CF 
1ae30     CD FB 05 C6 |  if_b	mov	result1, ##@LR__4276
1ae34     44 00 90 CD |  if_b	jmp	#LR__2423
1ae38     0A 25 02 F6 | 	mov	local04, arg02
1ae3c     10 25 82 F1 | 	sub	local04, local02
1ae40     0B 25 5A F2 | 	cmps	local04, arg03 wcz
1ae44     0B 25 02 16 |  if_a	mov	local04, arg03
1ae48     12 13 02 F6 | 	mov	arg01, local04
1ae4c     02 12 06 F1 | 	add	arg01, #2
1ae50     18 1C B0 FD | 	call	#__system___gc_alloc_managed
1ae54     FD 26 0A F6 | 	mov	local05, result1 wz
1ae58     1C 00 90 AD |  if_e	jmp	#LR__2422
1ae5c     0F 21 02 F1 | 	add	local02, local01
1ae60     13 13 02 F6 | 	mov	arg01, local05
1ae64     10 15 02 F6 | 	mov	arg02, local02
1ae68     12 17 02 F6 | 	mov	arg03, local04
1ae6c     64 DD BF FD | 	call	#__system____builtin_memmove
1ae70     13 25 02 F1 | 	add	local04, local05
1ae74     12 01 48 FC | 	wrbyte	#0, local04
1ae78                 | LR__2422
1ae78     13 FB 01 F6 | 	mov	result1, local05
1ae7c                 | LR__2423
1ae7c     A7 F0 03 F6 | 	mov	ptra, fp
1ae80     B2 00 A0 FD | 	call	#popregs_
1ae84                 | __system__Mid_S_ret
1ae84     2D 00 64 FD | 	ret
1ae88                 | 
1ae88                 | __system__Chr_S
1ae88     01 4A 05 F6 | 	mov	COUNT_, #1
1ae8c     A8 00 A0 FD | 	call	#pushregs_
1ae90     09 1F 02 F6 | 	mov	local01, arg01
1ae94     03 12 06 F6 | 	mov	arg01, #3
1ae98     D0 1B B0 FD | 	call	#__system___gc_alloc_managed
1ae9c     00 FA 4D F2 | 	cmps	result1, #0 wz
1aea0     FD 1E 42 5C |  if_ne	wrbyte	local01, result1
1aea4     01 FA 05 51 |  if_ne	add	result1, #1
1aea8     FD 00 48 5C |  if_ne	wrbyte	#0, result1
1aeac     01 FA 85 51 |  if_ne	sub	result1, #1
1aeb0     A7 F0 03 F6 | 	mov	ptra, fp
1aeb4     B2 00 A0 FD | 	call	#popregs_
1aeb8                 | __system__Chr_S_ret
1aeb8     2D 00 64 FD | 	ret
1aebc                 | 
1aebc                 | __system__Number_S
1aebc     08 4A 05 F6 | 	mov	COUNT_, #8
1aec0     A8 00 A0 FD | 	call	#pushregs_
1aec4     09 1F 02 F6 | 	mov	local01, arg01
1aec8     0A 21 0A F6 | 	mov	local02, arg02 wz
1aecc     0B 23 02 F6 | 	mov	local03, arg03
1aed0     3C 00 90 5D |  if_ne	jmp	#LR__2432
1aed4     01 20 06 F6 | 	mov	local02, #1
1aed8     11 25 02 F6 | 	mov	local04, local03
1aedc     01 26 06 F6 | 	mov	local05, #1
1aee0     97 16 48 FB | 	callpa	#(@LR__2431-@LR__2430)>>2,fcache_load_ptr_
1aee4                 | LR__2430
1aee4     00 28 06 F6 | 	mov	local06, #0
1aee8     0F 25 1A F2 | 	cmp	local04, local01 wcz
1aeec     01 28 66 E6 |  if_be	neg	local06, #1
1aef0     12 27 12 F2 | 	cmp	local05, local04 wc
1aef4     15 2B A2 F1 | 	subx	local07, local07
1aef8     15 29 CA F7 | 	test	local06, local07 wz
1aefc     11 25 02 5D |  if_ne	qmul	local04, local03
1af00     12 27 02 56 |  if_ne	mov	local05, local04
1af04     01 20 06 51 |  if_ne	add	local02, #1
1af08     18 24 62 5D |  if_ne	getqx	local04
1af0c     D4 FF 9F 5D |  if_ne	jmp	#LR__2430
1af10                 | LR__2431
1af10                 | LR__2432
1af10     20 20 36 F3 | 	fle	local02, #32 wc
1af14     10 13 02 F6 | 	mov	arg01, local02
1af18     02 12 06 F1 | 	add	arg01, #2
1af1c     4C 1B B0 FD | 	call	#__system___gc_alloc_managed
1af20     FD 28 02 F6 | 	mov	local06, result1
1af24     10 2B 02 F6 | 	mov	local07, local02
1af28     14 2B 02 F1 | 	add	local07, local06
1af2c     15 01 48 FC | 	wrbyte	#0, local07
1af30     97 1A 48 FB | 	callpa	#(@LR__2434-@LR__2433)>>2,fcache_load_ptr_
1af34                 | LR__2433
1af34     01 20 16 F2 | 	cmp	local02, #1 wc
1af38     2C 00 90 CD |  if_b	jmp	#LR__2435
1af3c     11 1F 12 FD | 	qdiv	local01, local03
1af40     01 20 86 F1 | 	sub	local02, #1
1af44     10 2B 02 F6 | 	mov	local07, local02
1af48     14 2B 02 F1 | 	add	local07, local06
1af4c     19 2C 62 FD | 	getqy	local08
1af50     0A 2C 16 F2 | 	cmp	local08, #10 wc
1af54     30 2C 06 C1 |  if_b	add	local08, #48
1af58     37 2C 06 31 |  if_ae	add	local08, #55
1af5c     15 2D 42 FC | 	wrbyte	local08, local07
1af60     18 1E 62 FD | 	getqx	local01
1af64     CC FF 9F FD | 	jmp	#LR__2433
1af68                 | LR__2434
1af68                 | LR__2435
1af68     14 FB 01 F6 | 	mov	result1, local06
1af6c     A7 F0 03 F6 | 	mov	ptra, fp
1af70     B2 00 A0 FD | 	call	#popregs_
1af74                 | __system__Number_S_ret
1af74     2D 00 64 FD | 	ret
1af78                 | 
1af78                 | __system__LCase_S
1af78     07 4A 05 F6 | 	mov	COUNT_, #7
1af7c     A8 00 A0 FD | 	call	#pushregs_
1af80     09 1F 02 F6 | 	mov	local01, arg01
1af84     09 21 02 F6 | 	mov	local02, arg01
1af88     97 06 48 FB | 	callpa	#(@LR__2441-@LR__2440)>>2,fcache_load_ptr_
1af8c                 | LR__2440
1af8c     10 FB C9 FA | 	rdbyte	result1, local02 wz
1af90     01 20 06 51 |  if_ne	add	local02, #1
1af94     F4 FF 9F 5D |  if_ne	jmp	#LR__2440
1af98                 | LR__2441
1af98     09 21 82 F1 | 	sub	local02, arg01
1af9c     10 FB 01 F6 | 	mov	result1, local02
1afa0     FD 20 0A F6 | 	mov	local02, result1 wz
1afa4     40 01 00 AF 
1afa8     CE FB 05 A6 |  if_e	mov	result1, ##@LR__4277
1afac     7C 00 90 AD |  if_e	jmp	#LR__2447
1afb0     10 13 02 F6 | 	mov	arg01, local02
1afb4     02 12 06 F1 | 	add	arg01, #2
1afb8     B0 1A B0 FD | 	call	#__system___gc_alloc_managed
1afbc     FD 22 0A F6 | 	mov	local03, result1 wz
1afc0     64 00 90 AD |  if_e	jmp	#LR__2446
1afc4     01 24 66 F6 | 	neg	local04, #1
1afc8     97 26 48 FB | 	callpa	#(@LR__2445-@LR__2442)>>2,fcache_load_ptr_
1afcc                 | LR__2442
1afcc     01 24 06 F1 | 	add	local04, #1
1afd0     12 27 02 F6 | 	mov	local05, local04
1afd4     0F 27 02 F1 | 	add	local05, local01
1afd8     13 29 C2 FA | 	rdbyte	local06, local05
1afdc     41 28 56 F2 | 	cmps	local06, #65 wc
1afe0     18 00 90 CD |  if_b	jmp	#LR__2443
1afe4     5B 28 56 F2 | 	cmps	local06, #91 wc
1afe8     12 2B 02 C6 |  if_b	mov	local07, local04
1afec     11 2B 02 C1 |  if_b	add	local07, local03
1aff0     20 28 06 C1 |  if_b	add	local06, #32
1aff4     15 29 42 CC |  if_b	wrbyte	local06, local07
1aff8     0C 00 90 CD |  if_b	jmp	#LR__2444
1affc                 | LR__2443
1affc     12 2B 02 F6 | 	mov	local07, local04
1b000     11 2B 02 F1 | 	add	local07, local03
1b004     15 29 42 FC | 	wrbyte	local06, local07
1b008                 | LR__2444
1b008     10 29 02 F6 | 	mov	local06, local02
1b00c     01 28 86 F1 | 	sub	local06, #1
1b010     14 25 0A F2 | 	cmp	local04, local06 wz
1b014     B4 FF 9F 5D |  if_ne	jmp	#LR__2442
1b018                 | LR__2445
1b018     11 21 02 F1 | 	add	local02, local03
1b01c     10 01 48 FC | 	wrbyte	#0, local02
1b020     11 FB 01 F6 | 	mov	result1, local03
1b024     04 00 90 FD | 	jmp	#LR__2447
1b028                 | LR__2446
1b028     11 FB 01 F6 | 	mov	result1, local03
1b02c                 | LR__2447
1b02c     A7 F0 03 F6 | 	mov	ptra, fp
1b030     B2 00 A0 FD | 	call	#popregs_
1b034                 | __system__LCase_S_ret
1b034     2D 00 64 FD | 	ret
1b038                 | 
1b038                 | __system__LTrim_S
1b038     05 4A 05 F6 | 	mov	COUNT_, #5
1b03c     A8 00 A0 FD | 	call	#pushregs_
1b040     09 1F 02 F6 | 	mov	local01, arg01
1b044     09 21 02 F6 | 	mov	local02, arg01
1b048     97 06 48 FB | 	callpa	#(@LR__2451-@LR__2450)>>2,fcache_load_ptr_
1b04c                 | LR__2450
1b04c     10 FB C9 FA | 	rdbyte	result1, local02 wz
1b050     01 20 06 51 |  if_ne	add	local02, #1
1b054     F4 FF 9F 5D |  if_ne	jmp	#LR__2450
1b058                 | LR__2451
1b058     09 21 82 F1 | 	sub	local02, arg01
1b05c     10 FB 01 F6 | 	mov	result1, local02
1b060     FD 20 0A F6 | 	mov	local02, result1 wz
1b064     40 01 00 AF 
1b068     CF FB 05 A6 |  if_e	mov	result1, ##@LR__4278
1b06c     7C 00 90 AD |  if_e	jmp	#LR__2456
1b070     00 22 06 F6 | 	mov	local03, #0
1b074     10 25 02 F6 | 	mov	local04, local02
1b078                 | LR__2452
1b078     12 23 52 F2 | 	cmps	local03, local04 wc
1b07c     68 00 90 3D |  if_ae	jmp	#LR__2455
1b080     11 17 02 F6 | 	mov	arg03, local03
1b084     0F 17 02 F1 | 	add	arg03, local01
1b088     0B 17 C2 FA | 	rdbyte	arg03, arg03
1b08c     20 16 0E F2 | 	cmp	arg03, #32 wz
1b090     4C 00 90 AD |  if_e	jmp	#LR__2454
1b094     10 13 02 F6 | 	mov	arg01, local02
1b098     11 13 82 F1 | 	sub	arg01, local03
1b09c     02 12 06 F1 | 	add	arg01, #2
1b0a0     C8 19 B0 FD | 	call	#__system___gc_alloc_managed
1b0a4     FD 26 0A F6 | 	mov	local05, result1 wz
1b0a8     2C 00 90 AD |  if_e	jmp	#LR__2453
1b0ac     11 15 02 F6 | 	mov	arg02, local03
1b0b0     0F 15 02 F1 | 	add	arg02, local01
1b0b4     10 17 02 F6 | 	mov	arg03, local02
1b0b8     11 17 82 F1 | 	sub	arg03, local03
1b0bc     13 13 02 F6 | 	mov	arg01, local05
1b0c0     10 DB BF FD | 	call	#__system____builtin_memmove
1b0c4     11 21 82 F1 | 	sub	local02, local03
1b0c8     13 21 02 F1 | 	add	local02, local05
1b0cc     10 01 48 FC | 	wrbyte	#0, local02
1b0d0     13 FB 01 F6 | 	mov	result1, local05
1b0d4     14 00 90 FD | 	jmp	#LR__2456
1b0d8                 | LR__2453
1b0d8     13 FB 01 F6 | 	mov	result1, local05
1b0dc     0C 00 90 FD | 	jmp	#LR__2456
1b0e0                 | LR__2454
1b0e0     01 22 06 F1 | 	add	local03, #1
1b0e4     90 FF 9F FD | 	jmp	#LR__2452
1b0e8                 | LR__2455
1b0e8     0F FB 01 F6 | 	mov	result1, local01
1b0ec                 | LR__2456
1b0ec     A7 F0 03 F6 | 	mov	ptra, fp
1b0f0     B2 00 A0 FD | 	call	#popregs_
1b0f4                 | __system__LTrim_S_ret
1b0f4     2D 00 64 FD | 	ret
1b0f8                 | 
1b0f8                 | __system__RTrim_S
1b0f8     04 4A 05 F6 | 	mov	COUNT_, #4
1b0fc     A8 00 A0 FD | 	call	#pushregs_
1b100     09 1F 02 F6 | 	mov	local01, arg01
1b104     09 21 02 F6 | 	mov	local02, arg01
1b108     97 06 48 FB | 	callpa	#(@LR__2461-@LR__2460)>>2,fcache_load_ptr_
1b10c                 | LR__2460
1b10c     10 FB C9 FA | 	rdbyte	result1, local02 wz
1b110     01 20 06 51 |  if_ne	add	local02, #1
1b114     F4 FF 9F 5D |  if_ne	jmp	#LR__2460
1b118                 | LR__2461
1b118     09 21 82 F1 | 	sub	local02, arg01
1b11c     10 FB 01 F6 | 	mov	result1, local02
1b120     FD 20 0A F6 | 	mov	local02, result1 wz
1b124     40 01 00 AF 
1b128     D0 FB 05 A6 |  if_e	mov	result1, ##@LR__4279
1b12c     74 00 90 AD |  if_e	jmp	#LR__2465
1b130     10 23 02 F6 | 	mov	local03, local02
1b134     01 22 86 F1 | 	sub	local03, #1
1b138                 | LR__2462
1b138     11 15 02 F6 | 	mov	arg02, local03
1b13c     0F 15 02 F1 | 	add	arg02, local01
1b140     0A 21 C2 FA | 	rdbyte	local02, arg02
1b144     20 20 0E F2 | 	cmp	local02, #32 wz
1b148     44 00 90 AD |  if_e	jmp	#LR__2464
1b14c     11 13 02 F6 | 	mov	arg01, local03
1b150     02 12 06 F1 | 	add	arg01, #2
1b154     14 19 B0 FD | 	call	#__system___gc_alloc_managed
1b158     FD 24 0A F6 | 	mov	local04, result1 wz
1b15c     28 00 90 AD |  if_e	jmp	#LR__2463
1b160     11 17 02 F6 | 	mov	arg03, local03
1b164     01 16 06 F1 | 	add	arg03, #1
1b168     12 13 02 F6 | 	mov	arg01, local04
1b16c     0F 15 02 F6 | 	mov	arg02, local01
1b170     60 DA BF FD | 	call	#__system____builtin_memmove
1b174     01 22 06 F1 | 	add	local03, #1
1b178     12 23 02 F1 | 	add	local03, local04
1b17c     11 01 48 FC | 	wrbyte	#0, local03
1b180     12 FB 01 F6 | 	mov	result1, local04
1b184     1C 00 90 FD | 	jmp	#LR__2465
1b188                 | LR__2463
1b188     12 FB 01 F6 | 	mov	result1, local04
1b18c     14 00 90 FD | 	jmp	#LR__2465
1b190                 | LR__2464
1b190     01 22 86 F1 | 	sub	local03, #1
1b194     00 22 56 F2 | 	cmps	local03, #0 wc
1b198     9C FF 9F 3D |  if_ae	jmp	#LR__2462
1b19c     40 01 00 FF 
1b1a0     D1 FB 05 F6 | 	mov	result1, ##@LR__4280
1b1a4                 | LR__2465
1b1a4     A7 F0 03 F6 | 	mov	ptra, fp
1b1a8     B2 00 A0 FD | 	call	#popregs_
1b1ac                 | __system__RTrim_S_ret
1b1ac     2D 00 64 FD | 	ret
1b1b0                 | 
1b1b0                 | __system__Instr
1b1b0     07 4A 05 F6 | 	mov	COUNT_, #7
1b1b4     A8 00 A0 FD | 	call	#pushregs_
1b1b8     09 1F 02 F6 | 	mov	local01, arg01
1b1bc     0A 21 02 F6 | 	mov	local02, arg02
1b1c0     0B 23 02 F6 | 	mov	local03, arg03
1b1c4     11 13 02 F6 | 	mov	arg01, local03
1b1c8     09 25 02 F6 | 	mov	local04, arg01
1b1cc     97 06 48 FB | 	callpa	#(@LR__2471-@LR__2470)>>2,fcache_load_ptr_
1b1d0                 | LR__2470
1b1d0     12 FB C9 FA | 	rdbyte	result1, local04 wz
1b1d4     01 24 06 51 |  if_ne	add	local04, #1
1b1d8     F4 FF 9F 5D |  if_ne	jmp	#LR__2470
1b1dc                 | LR__2471
1b1dc     09 25 82 F1 | 	sub	local04, arg01
1b1e0     12 27 02 F6 | 	mov	local05, local04
1b1e4     10 13 02 F6 | 	mov	arg01, local02
1b1e8     09 25 02 F6 | 	mov	local04, arg01
1b1ec     97 06 48 FB | 	callpa	#(@LR__2473-@LR__2472)>>2,fcache_load_ptr_
1b1f0                 | LR__2472
1b1f0     12 FB C9 FA | 	rdbyte	result1, local04 wz
1b1f4     01 24 06 51 |  if_ne	add	local04, #1
1b1f8     F4 FF 9F 5D |  if_ne	jmp	#LR__2472
1b1fc                 | LR__2473
1b1fc     09 25 82 F1 | 	sub	local04, arg01
1b200     12 FB 01 F6 | 	mov	result1, local04
1b204     FD 18 0A F6 | 	mov	arg04, result1 wz
1b208     00 FA 05 A6 |  if_e	mov	result1, #0
1b20c     98 00 90 AD |  if_e	jmp	#LR__2477
1b210     00 26 0E F2 | 	cmp	local05, #0 wz
1b214     00 FA 05 A6 |  if_e	mov	result1, #0
1b218     8C 00 90 AD |  if_e	jmp	#LR__2477
1b21c     0C 1F 5A F2 | 	cmps	local01, arg04 wcz
1b220     00 FA 05 16 |  if_a	mov	result1, #0
1b224     80 00 90 1D |  if_a	jmp	#LR__2477
1b228     01 1E 56 F2 | 	cmps	local01, #1 wc
1b22c     01 1E 06 C6 |  if_b	mov	local01, #1
1b230     11 29 C2 FA | 	rdbyte	local06, local03
1b234     01 26 0E F2 | 	cmp	local05, #1 wz
1b238     18 00 90 5D |  if_ne	jmp	#LR__2474
1b23c     10 13 02 F6 | 	mov	arg01, local02
1b240     14 15 02 F6 | 	mov	arg02, local06
1b244     0F 17 02 F6 | 	mov	arg03, local01
1b248     00 18 06 F6 | 	mov	arg04, #0
1b24c     B8 33 B0 FD | 	call	#__system____ScanForChar
1b250     54 00 90 FD | 	jmp	#LR__2477
1b254                 | LR__2474
1b254     0F 2B 02 F6 | 	mov	local07, local01
1b258                 | LR__2475
1b258     10 13 02 F6 | 	mov	arg01, local02
1b25c     14 15 02 F6 | 	mov	arg02, local06
1b260     15 17 02 F6 | 	mov	arg03, local07
1b264     00 18 06 F6 | 	mov	arg04, #0
1b268     9C 33 B0 FD | 	call	#__system____ScanForChar
1b26c     FD 2A 0A F6 | 	mov	local07, result1 wz
1b270     30 00 90 AD |  if_e	jmp	#LR__2476
1b274     13 17 02 F6 | 	mov	arg03, local05
1b278     10 13 02 F6 | 	mov	arg01, local02
1b27c     15 15 02 F6 | 	mov	arg02, local07
1b280     58 FB BF FD | 	call	#__system__Mid_S
1b284     FD 12 02 F6 | 	mov	arg01, result1
1b288     11 15 02 F6 | 	mov	arg02, local03
1b28c     4C DA BF FD | 	call	#__system___string_cmp
1b290     00 FA 0D F2 | 	cmp	result1, #0 wz
1b294     15 FB 01 A6 |  if_e	mov	result1, local07
1b298     0C 00 90 AD |  if_e	jmp	#LR__2477
1b29c     13 2B 02 F1 | 	add	local07, local05
1b2a0     B4 FF 9F FD | 	jmp	#LR__2475
1b2a4                 | LR__2476
1b2a4     00 FA 05 F6 | 	mov	result1, #0
1b2a8                 | LR__2477
1b2a8     A7 F0 03 F6 | 	mov	ptra, fp
1b2ac     B2 00 A0 FD | 	call	#popregs_
1b2b0                 | __system__Instr_ret
1b2b0     2D 00 64 FD | 	ret
1b2b4                 | 
1b2b4                 | __system___strerror
1b2b4     00 12 56 F2 | 	cmps	arg01, #0 wc
1b2b8     08 00 90 CD |  if_b	jmp	#LR__2480
1b2bc     1A 12 56 F2 | 	cmps	arg01, #26 wc
1b2c0     04 00 90 CD |  if_b	jmp	#LR__2481
1b2c4                 | LR__2480
1b2c4     19 12 06 F6 | 	mov	arg01, #25
1b2c8                 | LR__2481
1b2c8     02 12 66 F0 | 	shl	arg01, #2
1b2cc     01 00 00 FF 
1b2d0     D8 E8 05 F1 | 	add	ptr___system__dat__, ##728
1b2d4     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
1b2d8     09 FB 01 FB | 	rdlong	result1, arg01
1b2dc     01 00 00 FF 
1b2e0     D8 E8 85 F1 | 	sub	ptr___system__dat__, ##728
1b2e4                 | __system___strerror_ret
1b2e4     2D 00 64 FD | 	ret
1b2e8                 | 
1b2e8                 | __system___int64_shl
1b2e8     20 16 CE F7 | 	test	arg03, #32 wz
1b2ec     09 15 02 56 |  if_ne	mov	arg02, arg01
1b2f0     00 12 06 56 |  if_ne	mov	arg01, #0
1b2f4     1F 16 CE F7 | 	test	arg03, #31 wz
1b2f8     18 00 90 AD |  if_e	jmp	#LR__2490
1b2fc     0B 15 62 F0 | 	shl	arg02, arg03
1b300     09 FB 01 F6 | 	mov	result1, arg01
1b304     0B FD 61 F6 | 	neg	result2, arg03
1b308     FE FA 41 F0 | 	shr	result1, result2
1b30c     FD 14 42 F5 | 	or	arg02, result1
1b310     0B 13 62 F0 | 	shl	arg01, arg03
1b314                 | LR__2490
1b314     0A FD 01 F6 | 	mov	result2, arg02
1b318     09 FB 01 F6 | 	mov	result1, arg01
1b31c                 | __system___int64_shl_ret
1b31c     2D 00 64 FD | 	ret
1b320                 | 
1b320                 | __system___usepins
1b320     14 E8 05 F1 | 	add	ptr___system__dat__, #20
1b324     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1b328     14 E8 85 F1 | 	sub	ptr___system__dat__, #20
1b32c     00 13 CA F7 | 	test	arg01, _var01 wz
1b330     18 E8 05 A1 |  if_e	add	ptr___system__dat__, #24
1b334     F4 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
1b338     18 E8 85 A1 |  if_e	sub	ptr___system__dat__, #24
1b33c     01 15 CA A7 |  if_e	test	arg02, _var02 wz
1b340     00 FA 05 56 |  if_ne	mov	result1, #0
1b344     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
1b348     14 E8 05 F1 | 	add	ptr___system__dat__, #20
1b34c     F4 02 02 FB | 	rdlong	_var02, ptr___system__dat__
1b350     09 03 42 F5 | 	or	_var02, arg01
1b354     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
1b358     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1b35c     F4 02 02 FB | 	rdlong	_var02, ptr___system__dat__
1b360     0A 03 42 F5 | 	or	_var02, arg02
1b364     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
1b368     18 E8 85 F1 | 	sub	ptr___system__dat__, #24
1b36c     01 FA 65 F6 | 	neg	result1, #1
1b370                 | __system___usepins_ret
1b370     2D 00 64 FD | 	ret
1b374                 | 
1b374                 | __system___freepins
1b374     14 E8 05 F1 | 	add	ptr___system__dat__, #20
1b378     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1b37c     09 01 22 F5 | 	andn	_var01, arg01
1b380     F4 00 62 FC | 	wrlong	_var01, ptr___system__dat__
1b384     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1b388     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1b38c     0A 01 22 F5 | 	andn	_var01, arg02
1b390     F4 00 62 FC | 	wrlong	_var01, ptr___system__dat__
1b394     18 E8 85 F1 | 	sub	ptr___system__dat__, #24
1b398                 | __system___freepins_ret
1b398     2D 00 64 FD | 	ret
1b39c                 | 
1b39c                 | __system___float_fromuns
1b39c     09 17 0A F6 | 	mov	arg03, arg01 wz
1b3a0     0B FB 01 A6 |  if_e	mov	result1, arg03
1b3a4     24 00 90 AD |  if_e	jmp	#LR__2500
1b3a8     0B 15 92 F7 | 	encod	arg02, arg03 wc
1b3ac     01 14 06 C1 |  if_b	add	arg02, #1
1b3b0     01 14 86 F1 | 	sub	arg02, #1
1b3b4     1F 12 06 F6 | 	mov	arg01, #31
1b3b8     0A 13 82 F1 | 	sub	arg01, arg02
1b3bc     09 17 62 F0 | 	shl	arg03, arg01
1b3c0     02 16 46 F0 | 	shr	arg03, #2
1b3c4     00 12 06 F6 | 	mov	arg01, #0
1b3c8     4C 09 B0 FD | 	call	#__system___float_Pack
1b3cc                 | LR__2500
1b3cc                 | __system___float_fromuns_ret
1b3cc     2D 00 64 FD | 	ret
1b3d0                 | 
1b3d0                 | __system___float_add
1b3d0     0F 4A 05 F6 | 	mov	COUNT_, #15
1b3d4     A8 00 A0 FD | 	call	#pushregs_
1b3d8     09 1F 02 F6 | 	mov	local01, arg01
1b3dc     0A 21 02 F6 | 	mov	local02, arg02
1b3e0     00 22 06 F6 | 	mov	local03, #0
1b3e4     0F 25 02 F6 | 	mov	local04, local01
1b3e8     12 27 02 F6 | 	mov	local05, local04
1b3ec     16 26 46 F7 | 	zerox	local05, #22
1b3f0     12 29 02 F6 | 	mov	local06, local04
1b3f4     01 28 66 F0 | 	shl	local06, #1
1b3f8     18 28 46 F0 | 	shr	local06, #24
1b3fc     1F 24 46 F0 | 	shr	local04, #31
1b400     10 13 02 F6 | 	mov	arg01, local02
1b404     09 FB 01 F6 | 	mov	result1, arg01
1b408     FD 2A 02 F6 | 	mov	local07, result1
1b40c     15 2D 02 F6 | 	mov	local08, local07
1b410     16 2C 46 F7 | 	zerox	local08, #22
1b414     15 2F 02 F6 | 	mov	local09, local07
1b418     01 2E 66 F0 | 	shl	local09, #1
1b41c     18 2E 46 F0 | 	shr	local09, #24
1b420     17 31 02 F6 | 	mov	local10, local09
1b424     1F 2A 46 F0 | 	shr	local07, #31
1b428     00 32 06 F6 | 	mov	local11, #0
1b42c     00 34 06 F6 | 	mov	local12, #0
1b430     18 29 12 F2 | 	cmp	local06, local10 wc
1b434     18 29 0A 32 |  if_ae	cmp	local06, local10 wz
1b438     2C 00 90 1D |  if_a	jmp	#LR__2510
1b43c     16 27 12 32 |  if_ae	cmp	local05, local08 wc
1b440     24 00 90 3D |  if_ae	jmp	#LR__2510
1b444     13 37 02 F6 | 	mov	local13, local05
1b448     16 27 02 F6 | 	mov	local05, local08
1b44c     1B 2D 02 F6 | 	mov	local08, local13
1b450     14 37 02 F6 | 	mov	local13, local06
1b454     18 29 02 F6 | 	mov	local06, local10
1b458     1B 31 02 F6 | 	mov	local10, local13
1b45c     12 37 02 F6 | 	mov	local13, local04
1b460     15 25 02 F6 | 	mov	local04, local07
1b464     1B 2B 02 F6 | 	mov	local07, local13
1b468                 | LR__2510
1b468     FF 28 0E F2 | 	cmp	local06, #255 wz
1b46c     70 01 90 AD |  if_e	jmp	#LR__2525
1b470     00 28 0E F2 | 	cmp	local06, #0 wz
1b474     AC 01 90 AD |  if_e	jmp	#LR__2527
1b478     17 26 26 F4 | 	bith	local05, #23
1b47c                 | LR__2511
1b47c     00 30 0E F2 | 	cmp	local10, #0 wz
1b480     F0 01 90 AD |  if_e	jmp	#LR__2531
1b484     17 2C 26 F4 | 	bith	local08, #23
1b488                 | LR__2512
1b488     7F 28 86 F1 | 	sub	local06, #127
1b48c     7F 30 86 F1 | 	sub	local10, #127
1b490     14 39 02 F6 | 	mov	local14, local06
1b494     18 39 82 F1 | 	sub	local14, local10
1b498     97 14 48 FB | 	callpa	#(@LR__2514-@LR__2513)>>2,fcache_load_ptr_
1b49c                 | LR__2513
1b49c     20 38 56 F2 | 	cmps	local14, #32 wc
1b4a0     20 00 90 CD |  if_b	jmp	#LR__2515
1b4a4     16 2F 02 F6 | 	mov	local09, local08
1b4a8     00 32 0E F2 | 	cmp	local11, #0 wz
1b4ac     6F 32 62 FD | 	wrnz	local11
1b4b0     19 2F 42 F5 | 	or	local09, local11
1b4b4     17 33 02 F6 | 	mov	local11, local09
1b4b8     00 2C 06 F6 | 	mov	local08, #0
1b4bc     20 38 86 F1 | 	sub	local14, #32
1b4c0     D8 FF 9F FD | 	jmp	#LR__2513
1b4c4                 | LR__2514
1b4c4                 | LR__2515
1b4c4     00 38 0E F2 | 	cmp	local14, #0 wz
1b4c8     38 00 90 AD |  if_e	jmp	#LR__2516
1b4cc     16 37 02 F6 | 	mov	local13, local08
1b4d0     20 30 06 F6 | 	mov	local10, #32
1b4d4     1C 31 82 F1 | 	sub	local10, local14
1b4d8     18 37 62 F0 | 	shl	local13, local10
1b4dc     19 31 02 F6 | 	mov	local10, local11
1b4e0     20 2E 06 F6 | 	mov	local09, #32
1b4e4     1C 2F 82 F1 | 	sub	local09, local14
1b4e8     17 31 6A F0 | 	shl	local10, local09 wz
1b4ec     1C 33 42 F0 | 	shr	local11, local14
1b4f0     1C 2D 42 F0 | 	shr	local08, local14
1b4f4     1B 33 42 F5 | 	or	local11, local13
1b4f8     00 3A 06 F6 | 	mov	local15, #0
1b4fc     01 3A 06 56 |  if_ne	mov	local15, #1
1b500     1D 33 42 F5 | 	or	local11, local15
1b504                 | LR__2516
1b504     12 3B 02 F6 | 	mov	local15, local04
1b508     15 3B 62 F5 | 	xor	local15, local07
1b50c     01 3A CE F7 | 	test	local15, #1 wz
1b510     18 00 90 AD |  if_e	jmp	#LR__2517
1b514     16 2D 22 F6 | 	not	local08, local08
1b518     19 33 22 F6 | 	not	local11, local11
1b51c     01 32 0E F1 | 	add	local11, #1 wz
1b520     00 3A 06 F6 | 	mov	local15, #0
1b524     01 3A 06 A6 |  if_e	mov	local15, #1
1b528     1D 2D 02 F1 | 	add	local08, local15
1b52c                 | LR__2517
1b52c     19 35 12 F1 | 	add	local12, local11 wc
1b530     16 27 22 F1 | 	addx	local05, local08
1b534     00 26 56 F2 | 	cmps	local05, #0 wc
1b538     1C 00 90 3D |  if_ae	jmp	#LR__2518
1b53c     01 24 66 F5 | 	xor	local04, #1
1b540     13 27 22 F6 | 	not	local05, local05
1b544     1A 35 22 F6 | 	not	local12, local12
1b548     01 34 0E F1 | 	add	local12, #1 wz
1b54c     00 3A 06 F6 | 	mov	local15, #0
1b550     01 3A 06 A6 |  if_e	mov	local15, #1
1b554     1D 27 02 F1 | 	add	local05, local15
1b558                 | LR__2518
1b558     00 80 00 FF 
1b55c     00 26 16 F2 | 	cmp	local05, ##16777216 wc
1b560     28 00 90 CD |  if_b	jmp	#LR__2519
1b564     01 28 06 F1 | 	add	local06, #1
1b568     1A 39 02 F6 | 	mov	local14, local12
1b56c     01 38 06 F5 | 	and	local14, #1
1b570     01 34 46 F0 | 	shr	local12, #1
1b574     13 3B 02 F6 | 	mov	local15, local05
1b578     1F 3A 66 F0 | 	shl	local15, #31
1b57c     1D 35 42 F5 | 	or	local12, local15
1b580     1C 35 42 F5 | 	or	local12, local14
1b584     01 26 46 F0 | 	shr	local05, #1
1b588     3C 00 90 FD | 	jmp	#LR__2524
1b58c                 | LR__2519
1b58c     00 40 00 FF 
1b590     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1b594     30 00 90 3D |  if_ae	jmp	#LR__2523
1b598     00 26 0E F2 | 	cmp	local05, #0 wz
1b59c     00 34 0E A2 |  if_e	cmp	local12, #0 wz
1b5a0     08 24 46 A5 |  if_e	or	local04, #8
1b5a4     01 24 26 A5 |  if_e	andn	local04, #1
1b5a8     1C 00 90 AD |  if_e	jmp	#LR__2522
1b5ac                 | LR__2520
1b5ac     00 40 00 FF 
1b5b0     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1b5b4     10 00 90 3D |  if_ae	jmp	#LR__2521
1b5b8     1A 35 12 F1 | 	add	local12, local12 wc
1b5bc     13 27 22 F1 | 	addx	local05, local05
1b5c0     01 28 86 F1 | 	sub	local06, #1
1b5c4     E4 FF 9F FD | 	jmp	#LR__2520
1b5c8                 | LR__2521
1b5c8                 | LR__2522
1b5c8                 | LR__2523
1b5c8                 | LR__2524
1b5c8     13 13 02 F6 | 	mov	arg01, local05
1b5cc     1A 15 02 F6 | 	mov	arg02, local12
1b5d0     14 17 02 F6 | 	mov	arg03, local06
1b5d4     12 19 02 F6 | 	mov	arg04, local04
1b5d8     70 34 B0 FD | 	call	#__system__pack_0489
1b5dc     DC 00 90 FD | 	jmp	#LR__2535
1b5e0                 | LR__2525
1b5e0     FF 30 0E F2 | 	cmp	local10, #255 wz
1b5e4     10 00 90 5D |  if_ne	jmp	#LR__2526
1b5e8     12 2B 0A F2 | 	cmp	local07, local04 wz
1b5ec     00 F8 3F 5F 
1b5f0     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1b5f4     C4 00 90 5D |  if_ne	jmp	#LR__2535
1b5f8                 | LR__2526
1b5f8     00 26 0E F2 | 	cmp	local05, #0 wz
1b5fc     00 F8 3F 5F 
1b600     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1b604     B4 00 90 5D |  if_ne	jmp	#LR__2535
1b608     1A 15 02 F6 | 	mov	arg02, local12
1b60c     14 17 02 F6 | 	mov	arg03, local06
1b610     12 19 02 F6 | 	mov	arg04, local04
1b614     02 18 46 F5 | 	or	arg04, #2
1b618     13 13 02 F6 | 	mov	arg01, local05
1b61c     2C 34 B0 FD | 	call	#__system__pack_0489
1b620     98 00 90 FD | 	jmp	#LR__2535
1b624                 | LR__2527
1b624     00 26 0E F2 | 	cmp	local05, #0 wz
1b628     28 00 90 AD |  if_e	jmp	#LR__2530
1b62c     01 26 66 F0 | 	shl	local05, #1
1b630     97 0E 48 FB | 	callpa	#(@LR__2529-@LR__2528)>>2,fcache_load_ptr_
1b634                 | LR__2528
1b634     00 40 00 FF 
1b638     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1b63c     14 3B 02 C6 |  if_b	mov	local15, local06
1b640     01 3A 86 C1 |  if_b	sub	local15, #1
1b644     1D 29 02 C6 |  if_b	mov	local06, local15
1b648     01 26 66 C0 |  if_b	shl	local05, #1
1b64c     E4 FF 9F CD |  if_b	jmp	#LR__2528
1b650                 | LR__2529
1b650     28 FE 9F FD | 	jmp	#LR__2511
1b654                 | LR__2530
1b654     15 25 02 F5 | 	and	local04, local07
1b658     12 19 02 F6 | 	mov	arg04, local04
1b65c     08 18 46 F5 | 	or	arg04, #8
1b660     00 12 06 F6 | 	mov	arg01, #0
1b664     00 14 06 F6 | 	mov	arg02, #0
1b668     00 16 06 F6 | 	mov	arg03, #0
1b66c     DC 33 B0 FD | 	call	#__system__pack_0489
1b670     48 00 90 FD | 	jmp	#LR__2535
1b674                 | LR__2531
1b674     00 2C 0E F2 | 	cmp	local08, #0 wz
1b678     28 00 90 AD |  if_e	jmp	#LR__2534
1b67c     01 2C 66 F0 | 	shl	local08, #1
1b680     97 0E 48 FB | 	callpa	#(@LR__2533-@LR__2532)>>2,fcache_load_ptr_
1b684                 | LR__2532
1b684     00 40 00 FF 
1b688     00 2C 16 F2 | 	cmp	local08, ##8388608 wc
1b68c     18 3B 02 C6 |  if_b	mov	local15, local10
1b690     01 3A 86 C1 |  if_b	sub	local15, #1
1b694     1D 31 02 C6 |  if_b	mov	local10, local15
1b698     01 2C 66 C0 |  if_b	shl	local08, #1
1b69c     E4 FF 9F CD |  if_b	jmp	#LR__2532
1b6a0                 | LR__2533
1b6a0     E4 FD 9F FD | 	jmp	#LR__2512
1b6a4                 | LR__2534
1b6a4     7F 28 86 F1 | 	sub	local06, #127
1b6a8     13 13 02 F6 | 	mov	arg01, local05
1b6ac     1A 15 02 F6 | 	mov	arg02, local12
1b6b0     14 17 02 F6 | 	mov	arg03, local06
1b6b4     12 19 02 F6 | 	mov	arg04, local04
1b6b8     90 33 B0 FD | 	call	#__system__pack_0489
1b6bc                 | LR__2535
1b6bc     A7 F0 03 F6 | 	mov	ptra, fp
1b6c0     B2 00 A0 FD | 	call	#popregs_
1b6c4                 | __system___float_add_ret
1b6c4     2D 00 64 FD | 	ret
1b6c8                 | 
1b6c8                 | __system___float_sqrt
1b6c8     04 4A 05 F6 | 	mov	COUNT_, #4
1b6cc     A8 00 A0 FD | 	call	#pushregs_
1b6d0     09 1F 02 F6 | 	mov	local01, arg01
1b6d4     09 FB 01 F6 | 	mov	result1, arg01
1b6d8     FD 20 02 F6 | 	mov	local02, result1
1b6dc     10 23 02 F6 | 	mov	local03, local02
1b6e0     16 22 46 F7 | 	zerox	local03, #22
1b6e4     10 25 02 F6 | 	mov	local04, local02
1b6e8     01 24 66 F0 | 	shl	local04, #1
1b6ec     18 24 4E F0 | 	shr	local04, #24 wz
1b6f0     1F 20 46 F0 | 	shr	local02, #31
1b6f4     70 00 90 AD |  if_e	jmp	#LR__2541
1b6f8     17 22 26 F4 | 	bith	local03, #23
1b6fc                 | LR__2540
1b6fc     00 20 0E F2 | 	cmp	local02, #0 wz
1b700     00 F8 3F 5F 
1b704     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1b708     88 00 90 5D |  if_ne	jmp	#LR__2544
1b70c     FF 24 0E F2 | 	cmp	local04, #255 wz
1b710     0F FB 01 A6 |  if_e	mov	result1, local01
1b714     7C 00 90 AD |  if_e	jmp	#LR__2544
1b718     7F 24 86 F1 | 	sub	local04, #127
1b71c     01 24 CE F7 | 	test	local04, #1 wz
1b720     01 22 66 50 |  if_ne	shl	local03, #1
1b724     05 22 66 F0 | 	shl	local03, #5
1b728     11 01 38 FD | 	qsqrt	#0, local03
1b72c     01 24 86 51 |  if_ne	sub	local04, #1
1b730     12 25 52 F6 | 	abs	local04, local04 wc
1b734     01 24 46 F0 | 	shr	local04, #1
1b738     12 17 82 F6 | 	negc	arg03, local04
1b73c     10 19 02 F6 | 	mov	arg04, local02
1b740     18 12 62 FD | 	getqx	arg01
1b744     09 15 02 F6 | 	mov	arg02, arg01
1b748     19 14 66 F0 | 	shl	arg02, #25
1b74c     07 12 46 F0 | 	shr	arg01, #7
1b750     00 80 00 FF 
1b754     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
1b758     01 16 06 31 |  if_ae	add	arg03, #1
1b75c     01 12 46 30 |  if_ae	shr	arg01, #1
1b760     E8 32 B0 FD | 	call	#__system__pack_0489
1b764     2C 00 90 FD | 	jmp	#LR__2544
1b768                 | LR__2541
1b768     00 22 0E F2 | 	cmp	local03, #0 wz
1b76c     0F FB 01 A6 |  if_e	mov	result1, local01
1b770     20 00 90 AD |  if_e	jmp	#LR__2544
1b774     01 22 66 F0 | 	shl	local03, #1
1b778     97 0A 48 FB | 	callpa	#(@LR__2543-@LR__2542)>>2,fcache_load_ptr_
1b77c                 | LR__2542
1b77c     00 40 00 FF 
1b780     00 22 16 F2 | 	cmp	local03, ##8388608 wc
1b784     01 24 86 C1 |  if_b	sub	local04, #1
1b788     01 22 66 C0 |  if_b	shl	local03, #1
1b78c     EC FF 9F CD |  if_b	jmp	#LR__2542
1b790                 | LR__2543
1b790     68 FF 9F FD | 	jmp	#LR__2540
1b794                 | LR__2544
1b794     A7 F0 03 F6 | 	mov	ptra, fp
1b798     B2 00 A0 FD | 	call	#popregs_
1b79c                 | __system___float_sqrt_ret
1b79c     2D 00 64 FD | 	ret
1b7a0                 | 
1b7a0                 | __system___float_mul
1b7a0     0B 4A 05 F6 | 	mov	COUNT_, #11
1b7a4     A8 00 A0 FD | 	call	#pushregs_
1b7a8     09 1F 02 F6 | 	mov	local01, arg01
1b7ac     0A 21 02 F6 | 	mov	local02, arg02
1b7b0     0F 23 02 F6 | 	mov	local03, local01
1b7b4     11 25 02 F6 | 	mov	local04, local03
1b7b8     16 24 46 F7 | 	zerox	local04, #22
1b7bc     11 27 02 F6 | 	mov	local05, local03
1b7c0     01 26 66 F0 | 	shl	local05, #1
1b7c4     18 26 46 F0 | 	shr	local05, #24
1b7c8     1F 22 46 F0 | 	shr	local03, #31
1b7cc     10 FB 01 F6 | 	mov	result1, local02
1b7d0     FD 28 02 F6 | 	mov	local06, result1
1b7d4     14 2B 02 F6 | 	mov	local07, local06
1b7d8     16 2A 46 F7 | 	zerox	local07, #22
1b7dc     14 2D 02 F6 | 	mov	local08, local06
1b7e0     01 2C 66 F0 | 	shl	local08, #1
1b7e4     18 2C 46 F0 | 	shr	local08, #24
1b7e8     1F 28 46 F0 | 	shr	local06, #31
1b7ec     14 23 62 F5 | 	xor	local03, local06
1b7f0     FF 26 0E F2 | 	cmp	local05, #255 wz
1b7f4     90 00 90 AD |  if_e	jmp	#LR__2553
1b7f8     FF 2C 0E F2 | 	cmp	local08, #255 wz
1b7fc     D8 00 90 AD |  if_e	jmp	#LR__2555
1b800     00 26 0E F2 | 	cmp	local05, #0 wz
1b804     0C 01 90 AD |  if_e	jmp	#LR__2556
1b808     17 24 26 F4 | 	bith	local04, #23
1b80c                 | LR__2550
1b80c     00 2C 0E F2 | 	cmp	local08, #0 wz
1b810     44 01 90 AD |  if_e	jmp	#LR__2560
1b814     17 2A 26 F4 | 	bith	local07, #23
1b818                 | LR__2551
1b818     12 21 02 F6 | 	mov	local02, local04
1b81c     04 20 66 F0 | 	shl	local02, #4
1b820     15 29 02 F6 | 	mov	local06, local07
1b824     05 28 66 F0 | 	shl	local06, #5
1b828     14 21 02 FD | 	qmul	local02, local06
1b82c     16 27 02 F1 | 	add	local05, local08
1b830     FE 26 86 F1 | 	sub	local05, #254
1b834     13 2F 02 F6 | 	mov	local09, local05
1b838     04 24 66 F0 | 	shl	local04, #4
1b83c     05 2A 66 F0 | 	shl	local07, #5
1b840     18 30 62 FD | 	getqx	local10
1b844     15 25 02 FD | 	qmul	local04, local07
1b848     19 32 62 FD | 	getqy	local11
1b84c     00 80 00 FF 
1b850     00 32 16 F2 | 	cmp	local11, ##16777216 wc
1b854     18 00 90 CD |  if_b	jmp	#LR__2552
1b858     01 2E 06 F1 | 	add	local09, #1
1b85c     01 30 46 F0 | 	shr	local10, #1
1b860     19 2D 02 F6 | 	mov	local08, local11
1b864     1F 2C 66 F0 | 	shl	local08, #31
1b868     16 31 42 F5 | 	or	local10, local08
1b86c     01 32 46 F0 | 	shr	local11, #1
1b870                 | LR__2552
1b870     19 13 02 F6 | 	mov	arg01, local11
1b874     18 15 02 F6 | 	mov	arg02, local10
1b878     17 17 02 F6 | 	mov	arg03, local09
1b87c     11 19 02 F6 | 	mov	arg04, local03
1b880     C8 31 B0 FD | 	call	#__system__pack_0489
1b884     10 01 90 FD | 	jmp	#LR__2564
1b888                 | LR__2553
1b888     00 24 0E F2 | 	cmp	local04, #0 wz
1b88c     0F FB 01 56 |  if_ne	mov	result1, local01
1b890     04 01 90 5D |  if_ne	jmp	#LR__2564
1b894     FF 2C 56 F2 | 	cmps	local08, #255 wc
1b898     00 2C 0E C2 |  if_b	cmp	local08, #0 wz
1b89c     00 2A 0E 82 |  if_c_and_z	cmp	local07, #0 wz
1b8a0     18 00 90 4D |  if_c_and_nz	jmp	#LR__2554
1b8a4     00 F8 3F CF 
1b8a8     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
1b8ac     E8 00 90 CD |  if_b	jmp	#LR__2564
1b8b0     00 2A 0E F2 | 	cmp	local07, #0 wz
1b8b4     10 FB 01 56 |  if_ne	mov	result1, local02
1b8b8     DC 00 90 5D |  if_ne	jmp	#LR__2564
1b8bc                 | LR__2554
1b8bc     02 22 46 F5 | 	or	local03, #2
1b8c0     00 12 06 F6 | 	mov	arg01, #0
1b8c4     00 14 06 F6 | 	mov	arg02, #0
1b8c8     13 17 02 F6 | 	mov	arg03, local05
1b8cc     11 19 02 F6 | 	mov	arg04, local03
1b8d0     78 31 B0 FD | 	call	#__system__pack_0489
1b8d4     C0 00 90 FD | 	jmp	#LR__2564
1b8d8                 | LR__2555
1b8d8     00 26 0E F2 | 	cmp	local05, #0 wz
1b8dc     00 24 0E A2 |  if_e	cmp	local04, #0 wz
1b8e0     00 F8 3F AF 
1b8e4     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1b8e8     AC 00 90 AD |  if_e	jmp	#LR__2564
1b8ec     00 2A 0E F2 | 	cmp	local07, #0 wz
1b8f0     10 FB 01 56 |  if_ne	mov	result1, local02
1b8f4     A0 00 90 5D |  if_ne	jmp	#LR__2564
1b8f8     16 17 02 F6 | 	mov	arg03, local08
1b8fc     11 19 02 F6 | 	mov	arg04, local03
1b900     02 18 46 F5 | 	or	arg04, #2
1b904     00 12 06 F6 | 	mov	arg01, #0
1b908     00 14 06 F6 | 	mov	arg02, #0
1b90c     3C 31 B0 FD | 	call	#__system__pack_0489
1b910     84 00 90 FD | 	jmp	#LR__2564
1b914                 | LR__2556
1b914     00 24 0E F2 | 	cmp	local04, #0 wz
1b918     20 00 90 AD |  if_e	jmp	#LR__2559
1b91c     01 24 66 F0 | 	shl	local04, #1
1b920     97 0A 48 FB | 	callpa	#(@LR__2558-@LR__2557)>>2,fcache_load_ptr_
1b924                 | LR__2557
1b924     00 40 00 FF 
1b928     00 24 16 F2 | 	cmp	local04, ##8388608 wc
1b92c     01 26 86 C1 |  if_b	sub	local05, #1
1b930     01 24 66 C0 |  if_b	shl	local04, #1
1b934     EC FF 9F CD |  if_b	jmp	#LR__2557
1b938                 | LR__2558
1b938     D0 FE 9F FD | 	jmp	#LR__2550
1b93c                 | LR__2559
1b93c     08 22 46 F5 | 	or	local03, #8
1b940     00 12 06 F6 | 	mov	arg01, #0
1b944     00 14 06 F6 | 	mov	arg02, #0
1b948     00 16 06 F6 | 	mov	arg03, #0
1b94c     11 19 02 F6 | 	mov	arg04, local03
1b950     F8 30 B0 FD | 	call	#__system__pack_0489
1b954     40 00 90 FD | 	jmp	#LR__2564
1b958                 | LR__2560
1b958     00 2A 0E F2 | 	cmp	local07, #0 wz
1b95c     20 00 90 AD |  if_e	jmp	#LR__2563
1b960     01 2A 66 F0 | 	shl	local07, #1
1b964     97 0A 48 FB | 	callpa	#(@LR__2562-@LR__2561)>>2,fcache_load_ptr_
1b968                 | LR__2561
1b968     00 40 00 FF 
1b96c     00 2A 16 F2 | 	cmp	local07, ##8388608 wc
1b970     01 2C 86 C1 |  if_b	sub	local08, #1
1b974     01 2A 66 C0 |  if_b	shl	local07, #1
1b978     EC FF 9F CD |  if_b	jmp	#LR__2561
1b97c                 | LR__2562
1b97c     98 FE 9F FD | 	jmp	#LR__2551
1b980                 | LR__2563
1b980     08 22 46 F5 | 	or	local03, #8
1b984     00 12 06 F6 | 	mov	arg01, #0
1b988     00 14 06 F6 | 	mov	arg02, #0
1b98c     00 16 06 F6 | 	mov	arg03, #0
1b990     11 19 02 F6 | 	mov	arg04, local03
1b994     B4 30 B0 FD | 	call	#__system__pack_0489
1b998                 | LR__2564
1b998     A7 F0 03 F6 | 	mov	ptra, fp
1b99c     B2 00 A0 FD | 	call	#popregs_
1b9a0                 | __system___float_mul_ret
1b9a0     2D 00 64 FD | 	ret
1b9a4                 | 
1b9a4                 | __system___float_div
1b9a4     0E 4A 05 F6 | 	mov	COUNT_, #14
1b9a8     A8 00 A0 FD | 	call	#pushregs_
1b9ac     09 23 02 F6 | 	mov	local03, arg01
1b9b0     0A 25 02 F6 | 	mov	local04, arg02
1b9b4     11 27 02 F6 | 	mov	local05, local03
1b9b8     13 29 02 F6 | 	mov	local06, local05
1b9bc     16 28 46 F7 | 	zerox	local06, #22
1b9c0     13 2B 02 F6 | 	mov	local07, local05
1b9c4     01 2A 66 F0 | 	shl	local07, #1
1b9c8     18 2A 46 F0 | 	shr	local07, #24
1b9cc     1F 26 46 F0 | 	shr	local05, #31
1b9d0     12 FB 01 F6 | 	mov	result1, local04
1b9d4     FD 2C 02 F6 | 	mov	local08, result1
1b9d8     16 2F 02 F6 | 	mov	local09, local08
1b9dc     16 2E 46 F7 | 	zerox	local09, #22
1b9e0     16 31 02 F6 | 	mov	local10, local08
1b9e4     01 30 66 F0 | 	shl	local10, #1
1b9e8     18 30 46 F0 | 	shr	local10, #24
1b9ec     1F 2C 46 F0 | 	shr	local08, #31
1b9f0     16 27 62 F5 | 	xor	local05, local08
1b9f4     FF 2A 0E F2 | 	cmp	local07, #255 wz
1b9f8     D4 00 90 AD |  if_e	jmp	#LR__2575
1b9fc     FF 30 0E F2 | 	cmp	local10, #255 wz
1ba00     04 01 90 AD |  if_e	jmp	#LR__2576
1ba04     00 2A 0E F2 | 	cmp	local07, #0 wz
1ba08     24 01 90 AD |  if_e	jmp	#LR__2577
1ba0c     17 28 26 F4 | 	bith	local06, #23
1ba10                 | LR__2570
1ba10     00 30 0E F2 | 	cmp	local10, #0 wz
1ba14     70 01 90 AD |  if_e	jmp	#LR__2581
1ba18     17 2E 26 F4 | 	bith	local09, #23
1ba1c                 | LR__2571
1ba1c     18 2B 82 F1 | 	sub	local07, local10
1ba20     15 33 02 F6 | 	mov	local11, local07
1ba24     14 13 02 F6 | 	mov	arg01, local06
1ba28     02 12 46 F0 | 	shr	arg01, #2
1ba2c     1E 28 66 F0 | 	shl	local06, #30
1ba30     14 15 02 F6 | 	mov	arg02, local06
1ba34     17 17 02 F6 | 	mov	arg03, local09
1ba38     28 12 62 FD | 	setq	arg01
1ba3c     0B 15 12 FD | 	qdiv	arg02, arg03
1ba40     00 34 06 F6 | 	mov	local12, #0
1ba44     18 1E 62 FD | 	getqx	local01
1ba48     19 FC 61 FD | 	getqy	result2
1ba4c     FE 20 02 F6 | 	mov	local02, result2
1ba50     0F 37 02 F6 | 	mov	local13, local01
1ba54     00 20 4E F2 | 	cmps	local02, #0 wz
1ba58     1B 39 02 F6 | 	mov	local14, local13
1ba5c     19 38 66 F0 | 	shl	local14, #25
1ba60     01 34 06 56 |  if_ne	mov	local12, #1
1ba64     1A 39 42 F5 | 	or	local14, local12
1ba68     07 36 46 F0 | 	shr	local13, #7
1ba6c     00 80 00 FF 
1ba70     00 36 16 F2 | 	cmp	local13, ##16777216 wc
1ba74     1C 00 90 CD |  if_b	jmp	#LR__2572
1ba78     01 32 06 F1 | 	add	local11, #1
1ba7c     01 38 46 F0 | 	shr	local14, #1
1ba80     1B 35 02 F6 | 	mov	local12, local13
1ba84     1F 34 66 F0 | 	shl	local12, #31
1ba88     1A 39 42 F5 | 	or	local14, local12
1ba8c     01 36 46 F0 | 	shr	local13, #1
1ba90     24 00 90 FD | 	jmp	#LR__2574
1ba94                 | LR__2572
1ba94     00 40 00 FF 
1ba98     00 36 16 F2 | 	cmp	local13, ##8388608 wc
1ba9c     18 00 90 3D |  if_ae	jmp	#LR__2573
1baa0     01 32 86 F1 | 	sub	local11, #1
1baa4     01 36 66 F0 | 	shl	local13, #1
1baa8     1C 35 02 F6 | 	mov	local12, local14
1baac     1F 34 46 F0 | 	shr	local12, #31
1bab0     1A 37 42 F5 | 	or	local13, local12
1bab4     01 38 66 F0 | 	shl	local14, #1
1bab8                 | LR__2573
1bab8                 | LR__2574
1bab8     1B 13 02 F6 | 	mov	arg01, local13
1babc     1C 15 02 F6 | 	mov	arg02, local14
1bac0     19 17 02 F6 | 	mov	arg03, local11
1bac4     13 19 02 F6 | 	mov	arg04, local05
1bac8     80 2F B0 FD | 	call	#__system__pack_0489
1bacc     F8 00 90 FD | 	jmp	#LR__2585
1bad0                 | LR__2575
1bad0     00 28 0E F2 | 	cmp	local06, #0 wz
1bad4     11 FB 01 56 |  if_ne	mov	result1, local03
1bad8     EC 00 90 5D |  if_ne	jmp	#LR__2585
1badc     FF 30 0E F2 | 	cmp	local10, #255 wz
1bae0     00 F8 3F AF 
1bae4     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1bae8     DC 00 90 AD |  if_e	jmp	#LR__2585
1baec     02 26 46 F5 | 	or	local05, #2
1baf0     00 12 06 F6 | 	mov	arg01, #0
1baf4     00 14 06 F6 | 	mov	arg02, #0
1baf8     15 17 02 F6 | 	mov	arg03, local07
1bafc     13 19 02 F6 | 	mov	arg04, local05
1bb00     48 2F B0 FD | 	call	#__system__pack_0489
1bb04     C0 00 90 FD | 	jmp	#LR__2585
1bb08                 | LR__2576
1bb08     00 2E 0E F2 | 	cmp	local09, #0 wz
1bb0c     12 FB 01 56 |  if_ne	mov	result1, local04
1bb10     B4 00 90 5D |  if_ne	jmp	#LR__2585
1bb14     13 19 02 F6 | 	mov	arg04, local05
1bb18     08 18 46 F5 | 	or	arg04, #8
1bb1c     00 12 06 F6 | 	mov	arg01, #0
1bb20     00 14 06 F6 | 	mov	arg02, #0
1bb24     00 16 06 F6 | 	mov	arg03, #0
1bb28     20 2F B0 FD | 	call	#__system__pack_0489
1bb2c     98 00 90 FD | 	jmp	#LR__2585
1bb30                 | LR__2577
1bb30     00 28 0E F2 | 	cmp	local06, #0 wz
1bb34     20 00 90 AD |  if_e	jmp	#LR__2580
1bb38     01 28 66 F0 | 	shl	local06, #1
1bb3c     97 0A 48 FB | 	callpa	#(@LR__2579-@LR__2578)>>2,fcache_load_ptr_
1bb40                 | LR__2578
1bb40     00 40 00 FF 
1bb44     00 28 16 F2 | 	cmp	local06, ##8388608 wc
1bb48     01 2A 86 C1 |  if_b	sub	local07, #1
1bb4c     01 28 66 C0 |  if_b	shl	local06, #1
1bb50     EC FF 9F CD |  if_b	jmp	#LR__2578
1bb54                 | LR__2579
1bb54     B8 FE 9F FD | 	jmp	#LR__2570
1bb58                 | LR__2580
1bb58     00 30 0E F2 | 	cmp	local10, #0 wz
1bb5c     00 2E 0E A2 |  if_e	cmp	local09, #0 wz
1bb60     00 F8 3F AF 
1bb64     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1bb68     5C 00 90 AD |  if_e	jmp	#LR__2585
1bb6c     13 19 02 F6 | 	mov	arg04, local05
1bb70     08 18 46 F5 | 	or	arg04, #8
1bb74     00 12 06 F6 | 	mov	arg01, #0
1bb78     00 14 06 F6 | 	mov	arg02, #0
1bb7c     00 16 06 F6 | 	mov	arg03, #0
1bb80     C8 2E B0 FD | 	call	#__system__pack_0489
1bb84     40 00 90 FD | 	jmp	#LR__2585
1bb88                 | LR__2581
1bb88     00 2E 0E F2 | 	cmp	local09, #0 wz
1bb8c     20 00 90 AD |  if_e	jmp	#LR__2584
1bb90     01 2E 66 F0 | 	shl	local09, #1
1bb94     97 0A 48 FB | 	callpa	#(@LR__2583-@LR__2582)>>2,fcache_load_ptr_
1bb98                 | LR__2582
1bb98     00 40 00 FF 
1bb9c     00 2E 16 F2 | 	cmp	local09, ##8388608 wc
1bba0     01 30 86 C1 |  if_b	sub	local10, #1
1bba4     01 2E 66 C0 |  if_b	shl	local09, #1
1bba8     EC FF 9F CD |  if_b	jmp	#LR__2582
1bbac                 | LR__2583
1bbac     6C FE 9F FD | 	jmp	#LR__2571
1bbb0                 | LR__2584
1bbb0     02 26 46 F5 | 	or	local05, #2
1bbb4     00 12 06 F6 | 	mov	arg01, #0
1bbb8     00 14 06 F6 | 	mov	arg02, #0
1bbbc     00 16 06 F6 | 	mov	arg03, #0
1bbc0     13 19 02 F6 | 	mov	arg04, local05
1bbc4     84 2E B0 FD | 	call	#__system__pack_0489
1bbc8                 | LR__2585
1bbc8     A7 F0 03 F6 | 	mov	ptra, fp
1bbcc     B2 00 A0 FD | 	call	#popregs_
1bbd0                 | __system___float_div_ret
1bbd0     2D 00 64 FD | 	ret
1bbd4                 | 
1bbd4                 | __system___float_cmp
1bbd4     00 C0 3F FF 
1bbd8     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
1bbdc     00 C0 3F CF 
1bbe0     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
1bbe4     0B FB 01 36 |  if_ae	mov	result1, arg03
1bbe8     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
1bbec     00 C0 7F FF 
1bbf0     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
1bbf4     00 C0 7F CF 
1bbf8     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
1bbfc     0B FB 01 36 |  if_ae	mov	result1, arg03
1bc00     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
1bc04     00 12 56 F2 | 	cmps	arg01, #0 wc
1bc08     2C 00 90 3D |  if_ae	jmp	#LR__2590
1bc0c     00 14 56 F2 | 	cmps	arg02, #0 wc
1bc10     0A FB 01 C6 |  if_b	mov	result1, arg02
1bc14     09 FB 81 C1 |  if_b	sub	result1, arg01
1bc18     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
1bc1c     00 14 0E F2 | 	cmp	arg02, #0 wz
1bc20     00 00 40 AF 
1bc24     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
1bc28     00 FA 05 A6 |  if_e	mov	result1, #0
1bc2c     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
1bc30     01 FA 65 F6 | 	neg	result1, #1
1bc34     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
1bc38                 | LR__2590
1bc38     00 14 56 F2 | 	cmps	arg02, #0 wc
1bc3c     1C 00 90 3D |  if_ae	jmp	#LR__2591
1bc40     00 12 0E F2 | 	cmp	arg01, #0 wz
1bc44     00 00 40 AF 
1bc48     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
1bc4c     00 FA 05 A6 |  if_e	mov	result1, #0
1bc50     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
1bc54     01 FA 05 F6 | 	mov	result1, #1
1bc58     08 00 90 FD | 	jmp	#__system___float_cmp_ret
1bc5c                 | LR__2591
1bc5c     0A 13 82 F1 | 	sub	arg01, arg02
1bc60     09 FB 01 F6 | 	mov	result1, arg01
1bc64                 | __system___float_cmp_ret
1bc64     2D 00 64 FD | 	ret
1bc68                 | 
1bc68                 | __system___float_tointeger
1bc68     02 4A 05 F6 | 	mov	COUNT_, #2
1bc6c     A8 00 A0 FD | 	call	#pushregs_
1bc70     50 00 B0 FD | 	call	#__system___float_Unpack
1bc74     FF FF 7F FF 
1bc78     FF FD 55 F2 | 	cmps	result2, ##-1 wc
1bc7c     34 00 90 CD |  if_b	jmp	#LR__2600
1bc80     1F FC 55 F2 | 	cmps	result2, #31 wc
1bc84     2C 00 90 3D |  if_ae	jmp	#LR__2600
1bc88     02 FE 65 F0 | 	shl	result3, #2
1bc8c     1E 1E 06 F6 | 	mov	local01, #30
1bc90     FE 1E 82 F1 | 	sub	local01, result2
1bc94     0F FF 41 F0 | 	shr	result3, local01
1bc98     FF 20 02 F6 | 	mov	local02, result3
1bc9c     0A 21 02 F1 | 	add	local02, arg02
1bca0     01 20 46 F0 | 	shr	local02, #1
1bca4     00 FA 0D F2 | 	cmp	result1, #0 wz
1bca8     10 21 62 56 |  if_ne	neg	local02, local02
1bcac     10 FB 01 F6 | 	mov	result1, local02
1bcb0     04 00 90 FD | 	jmp	#LR__2601
1bcb4                 | LR__2600
1bcb4     00 FA 05 F6 | 	mov	result1, #0
1bcb8                 | LR__2601
1bcb8     A7 F0 03 F6 | 	mov	ptra, fp
1bcbc     B2 00 A0 FD | 	call	#popregs_
1bcc0                 | __system___float_tointeger_ret
1bcc0     2D 00 64 FD | 	ret
1bcc4                 | 
1bcc4                 | __system___float_Unpack
1bcc4     09 01 02 F6 | 	mov	_var01, arg01
1bcc8     1F 00 46 F0 | 	shr	_var01, #31
1bccc     09 03 02 F6 | 	mov	_var02, arg01
1bcd0     01 02 66 F0 | 	shl	_var02, #1
1bcd4     18 02 4E F0 | 	shr	_var02, #24 wz
1bcd8     17 13 06 F4 | 	bitl	arg01, #279
1bcdc     06 12 66 50 |  if_ne	shl	arg01, #6
1bce0     1D 12 26 54 |  if_ne	bith	arg01, #29
1bce4     1C 00 90 5D |  if_ne	jmp	#LR__2610
1bce8     09 05 92 F7 | 	encod	_var03, arg01 wc
1bcec     01 04 06 C1 |  if_b	add	_var03, #1
1bcf0     17 04 86 F1 | 	sub	_var03, #23
1bcf4     02 03 02 F6 | 	mov	_var02, _var03
1bcf8     07 FC 05 F6 | 	mov	result2, #7
1bcfc     02 FD 81 F1 | 	sub	result2, _var03
1bd00     FE 12 62 F0 | 	shl	arg01, result2
1bd04                 | LR__2610
1bd04     7F 02 86 F1 | 	sub	_var02, #127
1bd08     09 FF 01 F6 | 	mov	result3, arg01
1bd0c     00 FB 01 F6 | 	mov	result1, _var01
1bd10     01 FD 01 F6 | 	mov	result2, _var02
1bd14                 | __system___float_Unpack_ret
1bd14     2D 00 64 FD | 	ret
1bd18                 | 
1bd18                 | __system___float_Pack
1bd18     00 00 06 F6 | 	mov	_var01, #0
1bd1c     00 16 0E F2 | 	cmp	arg03, #0 wz
1bd20     8C 00 90 AD |  if_e	jmp	#LR__2621
1bd24     0B 03 92 F7 | 	encod	_var02, arg03 wc
1bd28     01 02 06 C1 |  if_b	add	_var02, #1
1bd2c     21 00 06 F6 | 	mov	_var01, #33
1bd30     01 01 82 F1 | 	sub	_var01, _var02
1bd34     00 17 62 F0 | 	shl	arg03, _var01
1bd38     03 02 06 F6 | 	mov	_var02, #3
1bd3c     00 03 82 F1 | 	sub	_var02, _var01
1bd40     01 15 02 F1 | 	add	arg02, _var02
1bd44     0A 05 02 F6 | 	mov	_var03, arg02
1bd48     00 17 06 F1 | 	add	arg03, #256
1bd4c     0B 03 02 F6 | 	mov	_var02, arg03
1bd50     FF 02 2E F5 | 	andn	_var02, #255 wz
1bd54     01 04 06 A1 |  if_e	add	_var03, #1
1bd58     7F 04 06 F1 | 	add	_var03, #127
1bd5c     FF FF 7F FF 
1bd60     E9 05 46 F3 | 	fges	_var03, ##-23
1bd64     FF 04 66 F3 | 	fles	_var03, #255
1bd68     01 04 56 F2 | 	cmps	_var03, #1 wc
1bd6c     1C 00 90 3D |  if_ae	jmp	#LR__2620
1bd70     01 16 46 F0 | 	shr	arg03, #1
1bd74     1F 02 C6 F9 | 	decod	_var02, #31
1bd78     0B 03 02 F1 | 	add	_var02, arg03
1bd7c     02 05 62 F6 | 	neg	_var03, _var03
1bd80     02 03 42 F0 | 	shr	_var02, _var03
1bd84     01 17 02 F6 | 	mov	arg03, _var02
1bd88     00 04 06 F6 | 	mov	_var03, #0
1bd8c                 | LR__2620
1bd8c     09 FB 01 F6 | 	mov	result1, arg01
1bd90     1F FA 65 F0 | 	shl	result1, #31
1bd94     02 03 02 F6 | 	mov	_var02, _var03
1bd98     17 02 66 F0 | 	shl	_var02, #23
1bd9c     01 FB 41 F5 | 	or	result1, _var02
1bda0     0B 07 02 F6 | 	mov	_var04, arg03
1bda4     09 06 46 F0 | 	shr	_var04, #9
1bda8     03 FB 41 F5 | 	or	result1, _var04
1bdac     04 00 90 FD | 	jmp	#__system___float_Pack_ret
1bdb0                 | LR__2621
1bdb0     00 FB 01 F6 | 	mov	result1, _var01
1bdb4                 | __system___float_Pack_ret
1bdb4     2D 00 64 FD | 	ret
1bdb8                 | 
1bdb8                 | __system___basic_print_float
1bdb8     05 4A 05 F6 | 	mov	COUNT_, #5
1bdbc     A8 00 A0 FD | 	call	#pushregs_
1bdc0     09 1F 02 F6 | 	mov	local01, arg01
1bdc4     0A 21 02 F6 | 	mov	local02, arg02
1bdc8     0B 23 0A F6 | 	mov	local03, arg03 wz
1bdcc     0C 25 02 F6 | 	mov	local04, arg04
1bdd0     14 00 90 5D |  if_ne	jmp	#LR__2630
1bdd4     23 24 0E F2 | 	cmp	local04, #35 wz
1bdd8     80 02 10 AF 
1bddc     00 26 06 A6 |  if_e	mov	local05, ##537198592
1bde0     1D 26 C6 59 |  if_ne	decod	local05, #29
1bde4     13 23 02 F6 | 	mov	local03, local05
1bde8                 | LR__2630
1bde8     0F 13 02 F6 | 	mov	arg01, local01
1bdec     40 27 B0 FD | 	call	#__system___gettxfunc
1bdf0     FD 26 0A F6 | 	mov	local05, result1 wz
1bdf4     00 FA 05 A6 |  if_e	mov	result1, #0
1bdf8     13 13 02 56 |  if_ne	mov	arg01, local05
1bdfc     11 15 02 56 |  if_ne	mov	arg02, local03
1be00     10 17 02 56 |  if_ne	mov	arg03, local02
1be04     12 19 02 56 |  if_ne	mov	arg04, local04
1be08     8C DF BF 5D |  if_ne	call	#__system___fmtfloat
1be0c     A7 F0 03 F6 | 	mov	ptra, fp
1be10     B2 00 A0 FD | 	call	#popregs_
1be14                 | __system___basic_print_float_ret
1be14     2D 00 64 FD | 	ret
1be18                 | 
1be18                 | __system____builtin_atoi
1be18     07 4A 05 F6 | 	mov	COUNT_, #7
1be1c     A8 00 A0 FD | 	call	#pushregs_
1be20                 | __system____builtin_atoi_enter
1be20     09 1F 02 F6 | 	mov	local01, arg01
1be24     0A 21 02 F6 | 	mov	local02, arg02
1be28     00 22 06 F6 | 	mov	local03, #0
1be2c     00 24 06 F6 | 	mov	local04, #0
1be30     00 26 06 F6 | 	mov	local05, #0
1be34     97 08 48 FB | 	callpa	#(@LR__2641-@LR__2640)>>2,fcache_load_ptr_
1be38                 | LR__2640
1be38     0F 29 C2 FA | 	rdbyte	local06, local01
1be3c     20 28 0E F2 | 	cmp	local06, #32 wz
1be40     01 1E 06 A1 |  if_e	add	local01, #1
1be44     F0 FF 9F AD |  if_e	jmp	#LR__2640
1be48                 | LR__2641
1be48     0F 2B C2 FA | 	rdbyte	local07, local01
1be4c                 | LR__2642
1be4c     2D 2A 0E F2 | 	cmp	local07, #45 wz
1be50     2B 2A 0E 52 |  if_ne	cmp	local07, #43 wz
1be54     18 00 90 5D |  if_ne	jmp	#LR__2643
1be58     01 1E 06 F1 | 	add	local01, #1
1be5c     2D 2A 0E F2 | 	cmp	local07, #45 wz
1be60     01 28 06 A6 |  if_e	mov	local06, #1
1be64     14 27 C2 A2 |  if_e	subr	local05, local06
1be68     0F 2B C2 FA | 	rdbyte	local07, local01
1be6c     DC FF 9F FD | 	jmp	#LR__2642
1be70                 | LR__2643
1be70     97 48 48 FB | 	callpa	#(@LR__2651-@LR__2644)>>2,fcache_load_ptr_
1be74                 | LR__2644
1be74                 | LR__2645
1be74     0F 2B C2 FA | 	rdbyte	local07, local01
1be78     5F 2A 0E F2 | 	cmp	local07, #95 wz
1be7c     01 1E 06 F1 | 	add	local01, #1
1be80     F0 FF 9F AD |  if_e	jmp	#LR__2645
1be84     30 2A 0E F2 | 	cmp	local07, #48 wz
1be88     26 2A 0E 52 |  if_ne	cmp	local07, #38 wz
1be8c     00 24 06 A6 |  if_e	mov	local04, #0
1be90     60 00 90 AD |  if_e	jmp	#LR__2650
1be94     31 2A 56 F2 | 	cmps	local07, #49 wc
1be98     18 00 90 CD |  if_b	jmp	#LR__2646
1be9c     3A 2A 56 F2 | 	cmps	local07, #58 wc
1bea0     15 25 02 C6 |  if_b	mov	local04, local07
1bea4     30 24 86 C1 |  if_b	sub	local04, #48
1bea8     00 20 0E C2 |  if_b	cmp	local02, #0 wz
1beac     0A 20 06 86 |  if_c_and_z	mov	local02, #10
1beb0     40 00 90 CD |  if_b	jmp	#LR__2649
1beb4                 | LR__2646
1beb4     0B 20 56 F2 | 	cmps	local02, #11 wc
1beb8     61 2A 56 32 |  if_ae	cmps	local07, #97 wc
1bebc     14 00 90 CD |  if_b	jmp	#LR__2647
1bec0     67 2A 56 F2 | 	cmps	local07, #103 wc
1bec4     61 2A 86 C1 |  if_b	sub	local07, #97
1bec8     0A 24 06 C6 |  if_b	mov	local04, #10
1becc     15 25 02 C1 |  if_b	add	local04, local07
1bed0     20 00 90 CD |  if_b	jmp	#LR__2648
1bed4                 | LR__2647
1bed4     0B 20 56 F2 | 	cmps	local02, #11 wc
1bed8     41 2A 56 32 |  if_ae	cmps	local07, #65 wc
1bedc     24 00 90 CD |  if_b	jmp	#LR__2652
1bee0     47 2A 56 F2 | 	cmps	local07, #71 wc
1bee4     41 2A 86 C1 |  if_b	sub	local07, #65
1bee8     0A 24 06 C6 |  if_b	mov	local04, #10
1beec     15 25 02 C1 |  if_b	add	local04, local07
1bef0     10 00 90 3D |  if_ae	jmp	#LR__2652
1bef4                 | LR__2648
1bef4                 | LR__2649
1bef4                 | LR__2650
1bef4     11 21 02 FD | 	qmul	local02, local03
1bef8     18 22 62 FD | 	getqx	local03
1befc     12 23 02 F1 | 	add	local03, local04
1bf00     70 FF 9F FD | 	jmp	#LR__2644
1bf04                 | LR__2651
1bf04                 | LR__2652
1bf04     00 20 0E F2 | 	cmp	local02, #0 wz
1bf08     64 00 90 5D |  if_ne	jmp	#LR__2658
1bf0c     78 2A 0E F2 | 	cmp	local07, #120 wz
1bf10     68 2A 0E 52 |  if_ne	cmp	local07, #104 wz
1bf14     58 2A 0E 52 |  if_ne	cmp	local07, #88 wz
1bf18     48 2A 0E 52 |  if_ne	cmp	local07, #72 wz
1bf1c     14 00 90 5D |  if_ne	jmp	#LR__2653
1bf20     0F 13 02 F6 | 	mov	arg01, local01
1bf24     10 14 06 F6 | 	mov	arg02, #16
1bf28     EC FE BF FD | 	call	#__system____builtin_atoi
1bf2c     FD 22 02 F6 | 	mov	local03, result1
1bf30     3C 00 90 FD | 	jmp	#LR__2657
1bf34                 | LR__2653
1bf34     62 2A 0E F2 | 	cmp	local07, #98 wz
1bf38     42 2A 0E 52 |  if_ne	cmp	local07, #66 wz
1bf3c     14 00 90 5D |  if_ne	jmp	#LR__2654
1bf40     0F 13 02 F6 | 	mov	arg01, local01
1bf44     02 14 06 F6 | 	mov	arg02, #2
1bf48     CC FE BF FD | 	call	#__system____builtin_atoi
1bf4c     FD 22 02 F6 | 	mov	local03, result1
1bf50     1C 00 90 FD | 	jmp	#LR__2656
1bf54                 | LR__2654
1bf54     6F 2A 0E F2 | 	cmp	local07, #111 wz
1bf58     4F 2A 0E 52 |  if_ne	cmp	local07, #79 wz
1bf5c     10 00 90 5D |  if_ne	jmp	#LR__2655
1bf60     0F 13 02 F6 | 	mov	arg01, local01
1bf64     08 14 06 F6 | 	mov	arg02, #8
1bf68     AC FE BF FD | 	call	#__system____builtin_atoi
1bf6c     FD 22 02 F6 | 	mov	local03, result1
1bf70                 | LR__2655
1bf70                 | LR__2656
1bf70                 | LR__2657
1bf70                 | LR__2658
1bf70     00 26 0E F2 | 	cmp	local05, #0 wz
1bf74     11 23 62 56 |  if_ne	neg	local03, local03
1bf78     11 FB 01 F6 | 	mov	result1, local03
1bf7c     A7 F0 03 F6 | 	mov	ptra, fp
1bf80     B2 00 A0 FD | 	call	#popregs_
1bf84                 | __system____builtin_atoi_ret
1bf84     2D 00 64 FD | 	ret
1bf88                 | 
1bf88                 | __system____builtin_atof
1bf88     07 4A 05 F6 | 	mov	COUNT_, #7
1bf8c     A8 00 A0 FD | 	call	#pushregs_
1bf90     09 1F 02 F6 | 	mov	local01, arg01
1bf94     00 20 06 F6 | 	mov	local02, #0
1bf98     00 22 06 F6 | 	mov	local03, #0
1bf9c     00 24 06 F6 | 	mov	local04, #0
1bfa0     00 26 06 F6 | 	mov	local05, #0
1bfa4     97 08 48 FB | 	callpa	#(@LR__2661-@LR__2660)>>2,fcache_load_ptr_
1bfa8                 | LR__2660
1bfa8     0F 17 C2 FA | 	rdbyte	arg03, local01
1bfac     20 16 0E F2 | 	cmp	arg03, #32 wz
1bfb0     01 1E 06 A1 |  if_e	add	local01, #1
1bfb4     F0 FF 9F AD |  if_e	jmp	#LR__2660
1bfb8                 | LR__2661
1bfb8     0F 29 C2 FA | 	rdbyte	local06, local01
1bfbc                 | LR__2662
1bfbc     2B 28 0E F2 | 	cmp	local06, #43 wz
1bfc0     2D 28 0E 52 |  if_ne	cmp	local06, #45 wz
1bfc4     14 00 90 5D |  if_ne	jmp	#LR__2663
1bfc8     2D 28 0E F2 | 	cmp	local06, #45 wz
1bfcc     1F 24 E6 A4 |  if_e	bitnot	local04, #31
1bfd0     01 1E 06 F1 | 	add	local01, #1
1bfd4     0F 29 C2 FA | 	rdbyte	local06, local01
1bfd8     E0 FF 9F FD | 	jmp	#LR__2662
1bfdc                 | LR__2663
1bfdc                 | LR__2664
1bfdc     97 08 48 FB | 	callpa	#(@LR__2666-@LR__2665)>>2,fcache_load_ptr_
1bfe0                 | LR__2665
1bfe0     0F 29 C2 FA | 	rdbyte	local06, local01
1bfe4     5F 28 0E F2 | 	cmp	local06, #95 wz
1bfe8     01 1E 06 F1 | 	add	local01, #1
1bfec     F0 FF 9F AD |  if_e	jmp	#LR__2665
1bff0                 | LR__2666
1bff0     00 28 0E F2 | 	cmp	local06, #0 wz
1bff4     5C 00 90 AD |  if_e	jmp	#LR__2668
1bff8     30 28 56 F2 | 	cmps	local06, #48 wc
1bffc     44 00 90 CD |  if_b	jmp	#LR__2667
1c000     3A 28 56 F2 | 	cmps	local06, #58 wc
1c004     3C 00 90 3D |  if_ae	jmp	#LR__2667
1c008     10 13 02 F6 | 	mov	arg01, local02
1c00c     00 90 20 FF 
1c010     00 14 06 F6 | 	mov	arg02, ##1092616192
1c014     88 F7 BF FD | 	call	#__system___float_mul
1c018     FD 20 02 F6 | 	mov	local02, result1
1c01c     30 28 86 F1 | 	sub	local06, #48
1c020     14 13 02 F6 | 	mov	arg01, local06
1c024     74 F3 BF FD | 	call	#__system___float_fromuns
1c028     FD 14 02 F6 | 	mov	arg02, result1
1c02c     10 13 02 F6 | 	mov	arg01, local02
1c030     9C F3 BF FD | 	call	#__system___float_add
1c034     FD 20 02 F6 | 	mov	local02, result1
1c038     00 26 0E F2 | 	cmp	local05, #0 wz
1c03c     01 22 86 51 |  if_ne	sub	local03, #1
1c040     98 FF 9F FD | 	jmp	#LR__2664
1c044                 | LR__2667
1c044     2E 28 0E F2 | 	cmp	local06, #46 wz
1c048     00 26 0E A2 |  if_e	cmp	local05, #0 wz
1c04c     01 26 06 A6 |  if_e	mov	local05, #1
1c050     88 FF 9F AD |  if_e	jmp	#LR__2664
1c054                 | LR__2668
1c054     45 28 0E F2 | 	cmp	local06, #69 wz
1c058     65 28 0E 52 |  if_ne	cmp	local06, #101 wz
1c05c     18 00 90 5D |  if_ne	jmp	#LR__2669
1c060     0F 13 02 F6 | 	mov	arg01, local01
1c064     00 14 06 F6 | 	mov	arg02, #0
1c068     AC FD BF FD | 	call	#__system____builtin_atoi
1c06c     11 FB 01 F1 | 	add	result1, local03
1c070     FD 2A 02 F6 | 	mov	local07, result1
1c074     04 00 90 FD | 	jmp	#LR__2670
1c078                 | LR__2669
1c078     11 2B 02 F6 | 	mov	local07, local03
1c07c                 | LR__2670
1c07c     15 17 02 F6 | 	mov	arg03, local07
1c080     10 13 02 F6 | 	mov	arg01, local02
1c084     00 90 20 FF 
1c088     00 14 06 F6 | 	mov	arg02, ##1092616192
1c08c     BC 06 B0 FD | 	call	#__system___float_pow_n
1c090     12 FB 61 F5 | 	xor	result1, local04
1c094     A7 F0 03 F6 | 	mov	ptra, fp
1c098     B2 00 A0 FD | 	call	#popregs_
1c09c                 | __system____builtin_atof_ret
1c09c     2D 00 64 FD | 	ret
1c0a0                 | 
1c0a0                 | __system____builtin_ilogb
1c0a0     20 FC BF FD | 	call	#__system___float_Unpack
1c0a4     00 FE 0D F2 | 	cmp	result3, #0 wz
1c0a8     00 00 40 AF 
1c0ac     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
1c0b0     24 00 90 AD |  if_e	jmp	#LR__2681
1c0b4     80 FC 0D F2 | 	cmp	result2, #128 wz
1c0b8     18 00 90 5D |  if_ne	jmp	#LR__2680
1c0bc     00 00 10 FF 
1c0c0     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
1c0c4     1E FA CD A9 |  if_e	bmask	result1, #30
1c0c8     0C 00 90 AD |  if_e	jmp	#LR__2681
1c0cc     1F FA C5 F9 | 	decod	result1, #31
1c0d0     04 00 90 FD | 	jmp	#LR__2681
1c0d4                 | LR__2680
1c0d4     FE FA 01 F6 | 	mov	result1, result2
1c0d8                 | LR__2681
1c0d8                 | __system____builtin_ilogb_ret
1c0d8     2D 00 64 FD | 	ret
1c0dc                 | 
1c0dc                 | __system____builtin_sinf
1c0dc     03 4A 05 F6 | 	mov	COUNT_, #3
1c0e0     A8 00 A0 FD | 	call	#pushregs_
1c0e4     09 1F 02 F6 | 	mov	local01, arg01
1c0e8     87 64 20 FF 
1c0ec     DB 15 06 F6 | 	mov	arg02, ##1086918619
1c0f0     B0 F8 BF FD | 	call	#__system___float_div
1c0f4     FD 12 02 F6 | 	mov	arg01, result1
1c0f8     00 14 06 F6 | 	mov	arg02, #0
1c0fc     68 FB BF FD | 	call	#__system___float_tointeger
1c100     FD 16 0A F6 | 	mov	arg03, result1 wz
1c104     44 00 90 AD |  if_e	jmp	#LR__2690
1c108     0B 13 52 F6 | 	abs	arg01, arg03 wc
1c10c     1F 20 C6 C9 |  if_b	decod	local02, #31
1c110     00 20 06 36 |  if_ae	mov	local02, #0
1c114     84 F2 BF FD | 	call	#__system___float_fromuns
1c118     10 FB 61 F5 | 	xor	result1, local02
1c11c     FD 12 02 F6 | 	mov	arg01, result1
1c120     1E 14 C6 F9 | 	decod	arg02, #30
1c124     78 F6 BF FD | 	call	#__system___float_mul
1c128     FD 12 02 F6 | 	mov	arg01, result1
1c12c     87 24 20 FF 
1c130     DB 15 06 F6 | 	mov	arg02, ##1078530011
1c134     68 F6 BF FD | 	call	#__system___float_mul
1c138     FD 14 02 F6 | 	mov	arg02, result1
1c13c     0F 13 02 F6 | 	mov	arg01, local01
1c140     1F 14 E6 F4 | 	bitnot	arg02, #31
1c144     88 F2 BF FD | 	call	#__system___float_add
1c148     FD 1E 02 F6 | 	mov	local01, result1
1c14c                 | LR__2690
1c14c     0F 13 02 F6 | 	mov	arg01, local01
1c150     66 E6 1E FF 
1c154     CD 14 06 F6 | 	mov	arg02, ##1036831949
1c158     01 16 06 F6 | 	mov	arg03, #1
1c15c     74 FA BF FD | 	call	#__system___float_cmp
1c160     00 FA 55 F2 | 	cmps	result1, #0 wc
1c164     5C 00 90 3D |  if_ae	jmp	#LR__2691
1c168     0F 13 02 F6 | 	mov	arg01, local01
1c16c     66 E6 5E FF 
1c170     CD 14 06 F6 | 	mov	arg02, ##-1110651699
1c174     01 16 66 F6 | 	neg	arg03, #1
1c178     58 FA BF FD | 	call	#__system___float_cmp
1c17c     01 FA 55 F2 | 	cmps	result1, #1 wc
1c180     40 00 90 CD |  if_b	jmp	#LR__2691
1c184     0F 13 02 F6 | 	mov	arg01, local01
1c188     0F 15 02 F6 | 	mov	arg02, local01
1c18c     10 F6 BF FD | 	call	#__system___float_mul
1c190     FD 12 02 F6 | 	mov	arg01, result1
1c194     0F 15 02 F6 | 	mov	arg02, local01
1c198     04 F6 BF FD | 	call	#__system___float_mul
1c19c     FD 12 02 F6 | 	mov	arg01, result1
1c1a0     00 60 20 FF 
1c1a4     00 14 06 F6 | 	mov	arg02, ##1086324736
1c1a8     F8 F7 BF FD | 	call	#__system___float_div
1c1ac     FD 14 02 F6 | 	mov	arg02, result1
1c1b0     0F 13 02 F6 | 	mov	arg01, local01
1c1b4     1F 14 E6 F4 | 	bitnot	arg02, #31
1c1b8     14 F2 BF FD | 	call	#__system___float_add
1c1bc     FD 22 02 F6 | 	mov	local03, result1
1c1c0     54 00 90 FD | 	jmp	#LR__2692
1c1c4                 | LR__2691
1c1c4     0F 13 02 F6 | 	mov	arg01, local01
1c1c8     7C 91 26 FF 
1c1cc     83 15 06 F6 | 	mov	arg02, ##1294137731
1c1d0     CC F5 BF FD | 	call	#__system___float_mul
1c1d4     FD 12 02 F6 | 	mov	arg01, result1
1c1d8     00 14 06 F6 | 	mov	arg02, #0
1c1dc     88 FA BF FD | 	call	#__system___float_tointeger
1c1e0     02 FA 65 F0 | 	shl	result1, #2
1c1e4     00 00 A0 FF 
1c1e8     FD 00 48 FD | 	qrotate	##1073741824, result1
1c1ec     19 12 62 FD | 	getqy	arg01
1c1f0     09 13 52 F6 | 	abs	arg01, arg01 wc
1c1f4     1F 20 C6 C9 |  if_b	decod	local02, #31
1c1f8     00 20 06 36 |  if_ae	mov	local02, #0
1c1fc     9C F1 BF FD | 	call	#__system___float_fromuns
1c200     10 FB 61 F5 | 	xor	result1, local02
1c204     FD 12 02 F6 | 	mov	arg01, result1
1c208     00 40 27 FF 
1c20c     00 14 06 F6 | 	mov	arg02, ##1317011456
1c210     90 F7 BF FD | 	call	#__system___float_div
1c214     FD 22 02 F6 | 	mov	local03, result1
1c218                 | LR__2692
1c218     11 FB 01 F6 | 	mov	result1, local03
1c21c     A7 F0 03 F6 | 	mov	ptra, fp
1c220     B2 00 A0 FD | 	call	#popregs_
1c224                 | __system____builtin_sinf_ret
1c224     2D 00 64 FD | 	ret
1c228                 | 
1c228                 | __system____builtin_tanf
1c228     02 4A 05 F6 | 	mov	COUNT_, #2
1c22c     A8 00 A0 FD | 	call	#pushregs_
1c230     09 1F 02 F6 | 	mov	local01, arg01
1c234     A4 FE BF FD | 	call	#__system____builtin_sinf
1c238     FD 20 02 F6 | 	mov	local02, result1
1c23c     0F 15 02 F6 | 	mov	arg02, local01
1c240     87 E4 1F FF 
1c244     DB 13 06 F6 | 	mov	arg01, ##1070141403
1c248     1F 14 E6 F4 | 	bitnot	arg02, #31
1c24c     80 F1 BF FD | 	call	#__system___float_add
1c250     FD 12 02 F6 | 	mov	arg01, result1
1c254     84 FE BF FD | 	call	#__system____builtin_sinf
1c258     FD 14 02 F6 | 	mov	arg02, result1
1c25c     10 13 02 F6 | 	mov	arg01, local02
1c260     40 F7 BF FD | 	call	#__system___float_div
1c264     A7 F0 03 F6 | 	mov	ptra, fp
1c268     B2 00 A0 FD | 	call	#popregs_
1c26c                 | __system____builtin_tanf_ret
1c26c     2D 00 64 FD | 	ret
1c270                 | 
1c270                 | __system____builtin_asinf
1c270     01 4A 05 F6 | 	mov	COUNT_, #1
1c274     A8 00 A0 FD | 	call	#pushregs_
1c278     09 1F 02 F6 | 	mov	local01, arg01
1c27c     0F 15 02 F6 | 	mov	arg02, local01
1c280     0F 13 02 F6 | 	mov	arg01, local01
1c284     18 F5 BF FD | 	call	#__system___float_mul
1c288     FD 14 02 F6 | 	mov	arg02, result1
1c28c     00 C0 1F FF 
1c290     00 12 06 F6 | 	mov	arg01, ##1065353216
1c294     1F 14 E6 F4 | 	bitnot	arg02, #31
1c298     34 F1 BF FD | 	call	#__system___float_add
1c29c     FD 12 02 F6 | 	mov	arg01, result1
1c2a0     24 F4 BF FD | 	call	#__system___float_sqrt
1c2a4     FD 14 02 F6 | 	mov	arg02, result1
1c2a8     0F 13 02 F6 | 	mov	arg01, local01
1c2ac     58 00 B0 FD | 	call	#__system____builtin_atan2f
1c2b0     A7 F0 03 F6 | 	mov	ptra, fp
1c2b4     B2 00 A0 FD | 	call	#popregs_
1c2b8                 | __system____builtin_asinf_ret
1c2b8     2D 00 64 FD | 	ret
1c2bc                 | 
1c2bc                 | __system____builtin_acosf
1c2bc     01 4A 05 F6 | 	mov	COUNT_, #1
1c2c0     A8 00 A0 FD | 	call	#pushregs_
1c2c4     09 1F 02 F6 | 	mov	local01, arg01
1c2c8     0F 15 02 F6 | 	mov	arg02, local01
1c2cc     0F 13 02 F6 | 	mov	arg01, local01
1c2d0     CC F4 BF FD | 	call	#__system___float_mul
1c2d4     FD 14 02 F6 | 	mov	arg02, result1
1c2d8     00 C0 1F FF 
1c2dc     00 12 06 F6 | 	mov	arg01, ##1065353216
1c2e0     1F 14 E6 F4 | 	bitnot	arg02, #31
1c2e4     E8 F0 BF FD | 	call	#__system___float_add
1c2e8     FD 12 02 F6 | 	mov	arg01, result1
1c2ec     D8 F3 BF FD | 	call	#__system___float_sqrt
1c2f0     FD 12 02 F6 | 	mov	arg01, result1
1c2f4     0F 15 02 F6 | 	mov	arg02, local01
1c2f8     0C 00 B0 FD | 	call	#__system____builtin_atan2f
1c2fc     A7 F0 03 F6 | 	mov	ptra, fp
1c300     B2 00 A0 FD | 	call	#popregs_
1c304                 | __system____builtin_acosf_ret
1c304     2D 00 64 FD | 	ret
1c308                 | 
1c308                 | __system____builtin_atan2f
1c308     04 4A 05 F6 | 	mov	COUNT_, #4
1c30c     A8 00 A0 FD | 	call	#pushregs_
1c310     09 1F 02 F6 | 	mov	local01, arg01
1c314     0A 21 02 F6 | 	mov	local02, arg02
1c318     0F 13 02 F6 | 	mov	arg01, local01
1c31c     00 14 06 F6 | 	mov	arg02, #0
1c320     01 16 06 F6 | 	mov	arg03, #1
1c324     AC F8 BF FD | 	call	#__system___float_cmp
1c328     00 FA 0D F2 | 	cmp	result1, #0 wz
1c32c     28 00 90 5D |  if_ne	jmp	#LR__2700
1c330     10 13 02 F6 | 	mov	arg01, local02
1c334     00 14 06 F6 | 	mov	arg02, #0
1c338     01 16 06 F6 | 	mov	arg03, #1
1c33c     94 F8 BF FD | 	call	#__system___float_cmp
1c340     00 FA 55 F2 | 	cmps	result1, #0 wc
1c344     87 24 60 CF 
1c348     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
1c34c     DC 00 90 CD |  if_b	jmp	#LR__2701
1c350     00 FA 05 F6 | 	mov	result1, #0
1c354     D4 00 90 FD | 	jmp	#LR__2701
1c358                 | LR__2700
1c358     10 13 02 F6 | 	mov	arg01, local02
1c35c     10 15 02 F6 | 	mov	arg02, local02
1c360     3C F4 BF FD | 	call	#__system___float_mul
1c364     FD 22 02 F6 | 	mov	local03, result1
1c368     0F 13 02 F6 | 	mov	arg01, local01
1c36c     0F 15 02 F6 | 	mov	arg02, local01
1c370     2C F4 BF FD | 	call	#__system___float_mul
1c374     FD 14 02 F6 | 	mov	arg02, result1
1c378     11 13 02 F6 | 	mov	arg01, local03
1c37c     50 F0 BF FD | 	call	#__system___float_add
1c380     FD 12 02 F6 | 	mov	arg01, result1
1c384     40 F3 BF FD | 	call	#__system___float_sqrt
1c388     FD 22 02 F6 | 	mov	local03, result1
1c38c     10 13 02 F6 | 	mov	arg01, local02
1c390     11 15 02 F6 | 	mov	arg02, local03
1c394     0C F6 BF FD | 	call	#__system___float_div
1c398     FD 20 02 F6 | 	mov	local02, result1
1c39c     0F 13 02 F6 | 	mov	arg01, local01
1c3a0     11 15 02 F6 | 	mov	arg02, local03
1c3a4     FC F5 BF FD | 	call	#__system___float_div
1c3a8     FD 1E 02 F6 | 	mov	local01, result1
1c3ac     00 40 27 FF 
1c3b0     00 12 06 F6 | 	mov	arg01, ##1317011456
1c3b4     10 15 02 F6 | 	mov	arg02, local02
1c3b8     E4 F3 BF FD | 	call	#__system___float_mul
1c3bc     FD 12 02 F6 | 	mov	arg01, result1
1c3c0     00 14 06 F6 | 	mov	arg02, #0
1c3c4     A0 F8 BF FD | 	call	#__system___float_tointeger
1c3c8     FD 22 02 F6 | 	mov	local03, result1
1c3cc     00 40 27 FF 
1c3d0     00 12 06 F6 | 	mov	arg01, ##1317011456
1c3d4     0F 15 02 F6 | 	mov	arg02, local01
1c3d8     C4 F3 BF FD | 	call	#__system___float_mul
1c3dc     FD 12 02 F6 | 	mov	arg01, result1
1c3e0     00 14 06 F6 | 	mov	arg02, #0
1c3e4     80 F8 BF FD | 	call	#__system___float_tointeger
1c3e8     FD 22 52 FD | 	qvector	local03, result1
1c3ec     87 24 20 FF 
1c3f0     DB 23 06 F6 | 	mov	local03, ##1078530011
1c3f4     19 12 62 FD | 	getqy	arg01
1c3f8     01 12 C6 F0 | 	sar	arg01, #1
1c3fc     09 13 52 F6 | 	abs	arg01, arg01 wc
1c400     1F 24 C6 C9 |  if_b	decod	local04, #31
1c404     00 24 06 36 |  if_ae	mov	local04, #0
1c408     90 EF BF FD | 	call	#__system___float_fromuns
1c40c     12 FB 61 F5 | 	xor	result1, local04
1c410     FD 12 02 F6 | 	mov	arg01, result1
1c414     00 40 27 FF 
1c418     00 14 06 F6 | 	mov	arg02, ##1317011456
1c41c     84 F5 BF FD | 	call	#__system___float_div
1c420     FD 14 02 F6 | 	mov	arg02, result1
1c424     11 13 02 F6 | 	mov	arg01, local03
1c428     74 F3 BF FD | 	call	#__system___float_mul
1c42c                 | LR__2701
1c42c     A7 F0 03 F6 | 	mov	ptra, fp
1c430     B2 00 A0 FD | 	call	#popregs_
1c434                 | __system____builtin_atan2f_ret
1c434     2D 00 64 FD | 	ret
1c438                 | 
1c438                 | __system____builtin_exp2f
1c438     04 4A 05 F6 | 	mov	COUNT_, #4
1c43c     A8 00 A0 FD | 	call	#pushregs_
1c440     09 1F 02 F6 | 	mov	local01, arg01
1c444     00 7F 21 FF 
1c448     00 14 06 F6 | 	mov	arg02, ##1123942400
1c44c     01 16 66 F6 | 	neg	arg03, #1
1c450     80 F7 BF FD | 	call	#__system___float_cmp
1c454     00 FA 55 F2 | 	cmps	result1, #0 wc
1c458     00 C0 3F 3F 
1c45c     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
1c460     DC 00 90 3D |  if_ae	jmp	#LR__2711
1c464     0F 13 02 F6 | 	mov	arg01, local01
1c468     00 7F 61 FF 
1c46c     00 14 06 F6 | 	mov	arg02, ##-1023541248
1c470     01 16 06 F6 | 	mov	arg03, #1
1c474     5C F7 BF FD | 	call	#__system___float_cmp
1c478     00 FA 55 F2 | 	cmps	result1, #0 wc
1c47c     00 FA 05 C6 |  if_b	mov	result1, #0
1c480     BC 00 90 CD |  if_b	jmp	#LR__2711
1c484     0F 13 02 F6 | 	mov	arg01, local01
1c488     00 14 06 F6 | 	mov	arg02, #0
1c48c     D8 F7 BF FD | 	call	#__system___float_tointeger
1c490     FD 20 02 F6 | 	mov	local02, result1
1c494     10 13 52 F6 | 	abs	arg01, local02 wc
1c498     1F 22 C6 C9 |  if_b	decod	local03, #31
1c49c     00 22 06 36 |  if_ae	mov	local03, #0
1c4a0     F8 EE BF FD | 	call	#__system___float_fromuns
1c4a4     11 FB 61 F5 | 	xor	result1, local03
1c4a8     FD 14 02 F6 | 	mov	arg02, result1
1c4ac     0F 13 02 F6 | 	mov	arg01, local01
1c4b0     1F 14 E6 F4 | 	bitnot	arg02, #31
1c4b4     18 EF BF FD | 	call	#__system___float_add
1c4b8     FD 24 02 F6 | 	mov	local04, result1
1c4bc     12 13 02 F6 | 	mov	arg01, local04
1c4c0     00 14 06 F6 | 	mov	arg02, #0
1c4c4     01 16 06 F6 | 	mov	arg03, #1
1c4c8     08 F7 BF FD | 	call	#__system___float_cmp
1c4cc     00 FA 55 F2 | 	cmps	result1, #0 wc
1c4d0     18 00 90 3D |  if_ae	jmp	#LR__2710
1c4d4     12 13 02 F6 | 	mov	arg01, local04
1c4d8     00 C0 1F FF 
1c4dc     00 14 06 F6 | 	mov	arg02, ##1065353216
1c4e0     EC EE BF FD | 	call	#__system___float_add
1c4e4     FD 24 02 F6 | 	mov	local04, result1
1c4e8     01 20 86 F1 | 	sub	local02, #1
1c4ec                 | LR__2710
1c4ec     7F 20 06 F1 | 	add	local02, #127
1c4f0     17 20 66 F0 | 	shl	local02, #23
1c4f4     12 13 02 F6 | 	mov	arg01, local04
1c4f8     00 80 26 FF 
1c4fc     00 14 06 F6 | 	mov	arg02, ##1291845632
1c500     9C F2 BF FD | 	call	#__system___float_mul
1c504     FD 12 02 F6 | 	mov	arg01, result1
1c508     00 14 06 F6 | 	mov	arg02, #0
1c50c     58 F7 BF FD | 	call	#__system___float_tointeger
1c510     FD 24 0A F6 | 	mov	local04, result1 wz
1c514     10 FB 01 A6 |  if_e	mov	result1, local02
1c518     24 00 90 AD |  if_e	jmp	#LR__2711
1c51c     3E 24 26 F4 | 	bith	local04, #62
1c520     0F 24 62 FD | 	qexp	local04
1c524     10 13 02 F6 | 	mov	arg01, local02
1c528     18 14 62 FD | 	getqx	arg02
1c52c     01 14 06 F1 | 	add	arg02, #1
1c530     01 14 46 F0 | 	shr	arg02, #1
1c534     00 80 1F FF 
1c538     00 14 06 F1 | 	add	arg02, ##1056964608
1c53c     60 F2 BF FD | 	call	#__system___float_mul
1c540                 | LR__2711
1c540     A7 F0 03 F6 | 	mov	ptra, fp
1c544     B2 00 A0 FD | 	call	#popregs_
1c548                 | __system____builtin_exp2f_ret
1c548     2D 00 64 FD | 	ret
1c54c                 | 
1c54c                 | __system____builtin_log2f
1c54c     06 4A 05 F6 | 	mov	COUNT_, #6
1c550     A8 00 A0 FD | 	call	#pushregs_
1c554     09 1F 02 F6 | 	mov	local01, arg01
1c558     09 21 0A F6 | 	mov	local02, arg01 wz
1c55c     00 00 40 5F 
1c560     00 20 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
1c564     00 40 00 AF 
1c568     00 FA 65 A6 |  if_e	neg	result1, ##8388608
1c56c     08 01 90 AD |  if_e	jmp	#LR__2724
1c570     00 20 56 F2 | 	cmps	local02, #0 wc
1c574     00 E0 3F CF 
1c578     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
1c57c     F8 00 90 CD |  if_b	jmp	#LR__2724
1c580     0F 13 02 F6 | 	mov	arg01, local01
1c584     00 90 20 FF 
1c588     00 14 06 F6 | 	mov	arg02, ##1092616192
1c58c     01 16 06 F6 | 	mov	arg03, #1
1c590     40 F6 BF FD | 	call	#__system___float_cmp
1c594     00 FA 0D F2 | 	cmp	result1, #0 wz
1c598     4D 2A 20 AF 
1c59c     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
1c5a0     D4 00 90 AD |  if_e	jmp	#LR__2724
1c5a4     0F 13 02 F6 | 	mov	arg01, local01
1c5a8     FC 16 20 FF 
1c5ac     54 14 06 F6 | 	mov	arg02, ##1076754516
1c5b0     01 16 06 F6 | 	mov	arg03, #1
1c5b4     1C F6 BF FD | 	call	#__system___float_cmp
1c5b8     00 FA 0D F2 | 	cmp	result1, #0 wz
1c5bc     55 DC 1F AF 
1c5c0     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
1c5c4     B0 00 90 AD |  if_e	jmp	#LR__2724
1c5c8     10 23 02 F6 | 	mov	local03, local02
1c5cc     17 22 46 F0 | 	shr	local03, #23
1c5d0     11 23 E2 F8 | 	getbyte	local03, local03, #0
1c5d4     17 21 06 F4 | 	bitl	local02, #279
1c5d8     10 25 02 F6 | 	mov	local04, local02
1c5dc     FF 22 0E F2 | 	cmp	local03, #255 wz
1c5e0     1C 00 90 5D |  if_ne	jmp	#LR__2720
1c5e4     00 24 0E F2 | 	cmp	local04, #0 wz
1c5e8     00 C0 3F 5F 
1c5ec     00 26 06 56 |  if_ne	mov	local05, ##2139095040
1c5f0     00 E0 3F AF 
1c5f4     00 26 06 A6 |  if_e	mov	local05, ##2143289344
1c5f8     13 FB 01 F6 | 	mov	result1, local05
1c5fc     78 00 90 FD | 	jmp	#LR__2724
1c600                 | LR__2720
1c600     00 22 0E F2 | 	cmp	local03, #0 wz
1c604     17 24 26 54 |  if_ne	bith	local04, #23
1c608     7F 22 86 51 |  if_ne	sub	local03, #127
1c60c     28 00 90 5D |  if_ne	jmp	#LR__2723
1c610     00 24 0E F2 | 	cmp	local04, #0 wz
1c614     00 40 00 AF 
1c618     00 FA 65 A6 |  if_e	neg	result1, ##8388608
1c61c     58 00 90 AD |  if_e	jmp	#LR__2724
1c620     7E 22 66 F6 | 	neg	local03, #126
1c624     97 08 48 FB | 	callpa	#(@LR__2722-@LR__2721)>>2,fcache_load_ptr_
1c628                 | LR__2721
1c628     17 24 2E F4 | 	testbn	local04, #23 wz
1c62c     01 24 66 A0 |  if_e	shl	local04, #1
1c630     01 22 06 A1 |  if_e	add	local03, #1
1c634     F0 FF 9F AD |  if_e	jmp	#LR__2721
1c638                 | LR__2722
1c638                 | LR__2723
1c638     0E 24 62 FD | 	qlog	local04
1c63c     01 22 86 F1 | 	sub	local03, #1
1c640     11 13 52 F6 | 	abs	arg01, local03 wc
1c644     1F 28 C6 C9 |  if_b	decod	local06, #31
1c648     00 28 06 36 |  if_ae	mov	local06, #0
1c64c     18 26 62 FD | 	getqx	local05
1c650     9B 26 06 F4 | 	bitl	local05, #155
1c654     08 26 06 F1 | 	add	local05, #8
1c658     04 26 46 F0 | 	shr	local05, #4
1c65c     00 C0 1F FF 
1c660     00 26 06 F1 | 	add	local05, ##1065353216
1c664     34 ED BF FD | 	call	#__system___float_fromuns
1c668     14 FB 61 F5 | 	xor	result1, local06
1c66c     FD 14 02 F6 | 	mov	arg02, result1
1c670     13 13 02 F6 | 	mov	arg01, local05
1c674     58 ED BF FD | 	call	#__system___float_add
1c678                 | LR__2724
1c678     A7 F0 03 F6 | 	mov	ptra, fp
1c67c     B2 00 A0 FD | 	call	#popregs_
1c680                 | __system____builtin_log2f_ret
1c680     2D 00 64 FD | 	ret
1c684                 | 
1c684                 | __system____builtin_powf
1c684     04 4A 05 F6 | 	mov	COUNT_, #4
1c688     A8 00 A0 FD | 	call	#pushregs_
1c68c     09 1F 02 F6 | 	mov	local01, arg01
1c690     0A 21 02 F6 | 	mov	local02, arg02
1c694     10 13 02 F6 | 	mov	arg01, local02
1c698     00 14 06 F6 | 	mov	arg02, #0
1c69c     C8 F5 BF FD | 	call	#__system___float_tointeger
1c6a0     FD 22 02 F6 | 	mov	local03, result1
1c6a4     11 13 52 F6 | 	abs	arg01, local03 wc
1c6a8     1F 24 C6 C9 |  if_b	decod	local04, #31
1c6ac     00 24 06 36 |  if_ae	mov	local04, #0
1c6b0     E8 EC BF FD | 	call	#__system___float_fromuns
1c6b4     12 FB 61 F5 | 	xor	result1, local04
1c6b8     FD 12 02 F6 | 	mov	arg01, result1
1c6bc     10 15 02 F6 | 	mov	arg02, local02
1c6c0     01 16 06 F6 | 	mov	arg03, #1
1c6c4     0C F5 BF FD | 	call	#__system___float_cmp
1c6c8     00 FA 0D F2 | 	cmp	result1, #0 wz
1c6cc     18 00 90 5D |  if_ne	jmp	#LR__2730
1c6d0     00 C0 1F FF 
1c6d4     00 12 06 F6 | 	mov	arg01, ##1065353216
1c6d8     0F 15 02 F6 | 	mov	arg02, local01
1c6dc     11 17 02 F6 | 	mov	arg03, local03
1c6e0     68 00 B0 FD | 	call	#__system___float_pow_n
1c6e4     58 00 90 FD | 	jmp	#LR__2731
1c6e8                 | LR__2730
1c6e8     0F 13 02 F6 | 	mov	arg01, local01
1c6ec     00 14 06 F6 | 	mov	arg02, #0
1c6f0     01 16 06 F6 | 	mov	arg03, #1
1c6f4     DC F4 BF FD | 	call	#__system___float_cmp
1c6f8     00 FA 55 F2 | 	cmps	result1, #0 wc
1c6fc     00 E0 3F CF 
1c700     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
1c704     38 00 90 CD |  if_b	jmp	#LR__2731
1c708     0F 13 02 F6 | 	mov	arg01, local01
1c70c     00 14 06 F6 | 	mov	arg02, #0
1c710     01 16 06 F6 | 	mov	arg03, #1
1c714     BC F4 BF FD | 	call	#__system___float_cmp
1c718     00 FA 0D F2 | 	cmp	result1, #0 wz
1c71c     00 FA 05 A6 |  if_e	mov	result1, #0
1c720     1C 00 90 AD |  if_e	jmp	#LR__2731
1c724     0F 13 02 F6 | 	mov	arg01, local01
1c728     20 FE BF FD | 	call	#__system____builtin_log2f
1c72c     FD 12 02 F6 | 	mov	arg01, result1
1c730     10 15 02 F6 | 	mov	arg02, local02
1c734     68 F0 BF FD | 	call	#__system___float_mul
1c738     FD 12 02 F6 | 	mov	arg01, result1
1c73c     F8 FC BF FD | 	call	#__system____builtin_exp2f
1c740                 | LR__2731
1c740     A7 F0 03 F6 | 	mov	ptra, fp
1c744     B2 00 A0 FD | 	call	#popregs_
1c748                 | __system____builtin_powf_ret
1c748     2D 00 64 FD | 	ret
1c74c                 | 
1c74c                 | __system___float_pow_n
1c74c     05 4A 05 F6 | 	mov	COUNT_, #5
1c750     A8 00 A0 FD | 	call	#pushregs_
1c754     09 1F 02 F6 | 	mov	local01, arg01
1c758     0A 21 02 F6 | 	mov	local02, arg02
1c75c     0B 23 02 F6 | 	mov	local03, arg03
1c760     00 22 56 F2 | 	cmps	local03, #0 wc
1c764     18 00 90 3D |  if_ae	jmp	#LR__2740
1c768     01 24 06 F6 | 	mov	local04, #1
1c76c     11 23 62 F6 | 	neg	local03, local03
1c770     00 22 56 F2 | 	cmps	local03, #0 wc
1c774     00 FA 05 C6 |  if_b	mov	result1, #0
1c778     94 00 90 CD |  if_b	jmp	#LR__2748
1c77c     04 00 90 FD | 	jmp	#LR__2741
1c780                 | LR__2740
1c780     00 24 06 F6 | 	mov	local04, #0
1c784                 | LR__2741
1c784     00 C0 1F FF 
1c788     00 26 06 F6 | 	mov	local05, ##1065353216
1c78c                 | LR__2742
1c78c     01 22 56 F2 | 	cmps	local03, #1 wc
1c790     30 00 90 CD |  if_b	jmp	#LR__2744
1c794     01 22 CE F7 | 	test	local03, #1 wz
1c798     10 00 90 AD |  if_e	jmp	#LR__2743
1c79c     13 13 02 F6 | 	mov	arg01, local05
1c7a0     10 15 02 F6 | 	mov	arg02, local02
1c7a4     F8 EF BF FD | 	call	#__system___float_mul
1c7a8     FD 26 02 F6 | 	mov	local05, result1
1c7ac                 | LR__2743
1c7ac     01 22 C6 F0 | 	sar	local03, #1
1c7b0     10 13 02 F6 | 	mov	arg01, local02
1c7b4     10 15 02 F6 | 	mov	arg02, local02
1c7b8     E4 EF BF FD | 	call	#__system___float_mul
1c7bc     FD 20 02 F6 | 	mov	local02, result1
1c7c0     C8 FF 9F FD | 	jmp	#LR__2742
1c7c4                 | LR__2744
1c7c4     00 24 0E F2 | 	cmp	local04, #0 wz
1c7c8     14 00 90 AD |  if_e	jmp	#LR__2745
1c7cc     0F 13 02 F6 | 	mov	arg01, local01
1c7d0     13 15 02 F6 | 	mov	arg02, local05
1c7d4     CC F1 BF FD | 	call	#__system___float_div
1c7d8     FD 26 02 F6 | 	mov	local05, result1
1c7dc     2C 00 90 FD | 	jmp	#LR__2747
1c7e0                 | LR__2745
1c7e0     0F 13 02 F6 | 	mov	arg01, local01
1c7e4     00 C0 1F FF 
1c7e8     00 14 06 F6 | 	mov	arg02, ##1065353216
1c7ec     01 16 06 F6 | 	mov	arg03, #1
1c7f0     E0 F3 BF FD | 	call	#__system___float_cmp
1c7f4     00 FA 0D F2 | 	cmp	result1, #0 wz
1c7f8     10 00 90 AD |  if_e	jmp	#LR__2746
1c7fc     0F 13 02 F6 | 	mov	arg01, local01
1c800     13 15 02 F6 | 	mov	arg02, local05
1c804     98 EF BF FD | 	call	#__system___float_mul
1c808     FD 26 02 F6 | 	mov	local05, result1
1c80c                 | LR__2746
1c80c                 | LR__2747
1c80c     13 FB 01 F6 | 	mov	result1, local05
1c810                 | LR__2748
1c810     A7 F0 03 F6 | 	mov	ptra, fp
1c814     B2 00 A0 FD | 	call	#popregs_
1c818                 | __system___float_pow_n_ret
1c818     2D 00 64 FD | 	ret
1c81c                 | 
1c81c                 | __system___gc_ptrs
1c81c     EC 00 02 F6 | 	mov	_var01, __heap_ptr
1c820     00 03 02 F6 | 	mov	_var02, _var01
1c824     76 01 00 FF 
1c828     F8 03 06 F1 | 	add	_var02, ##191992
1c82c     00 FD 09 FB | 	rdlong	result2, _var01 wz
1c830     74 00 90 5D |  if_ne	jmp	#LR__2750
1c834     01 FD 01 F6 | 	mov	result2, _var02
1c838     00 FD 81 F1 | 	sub	result2, _var01
1c83c     00 03 58 FC | 	wrword	#1, _var01
1c840     00 FB 01 F6 | 	mov	result1, _var01
1c844     02 FA 05 F1 | 	add	result1, #2
1c848     36 00 80 FF 
1c84c     FD 20 59 FC | 	wrword	##27792, result1
1c850     00 FB 01 F6 | 	mov	result1, _var01
1c854     04 FA 05 F1 | 	add	result1, #4
1c858     FD 00 58 FC | 	wrword	#0, result1
1c85c     00 FB 01 F6 | 	mov	result1, _var01
1c860     06 FA 05 F1 | 	add	result1, #6
1c864     FD 02 58 FC | 	wrword	#1, result1
1c868     10 00 06 F1 | 	add	_var01, #16
1c86c     FE FC 51 F6 | 	abs	result2, result2 wc
1c870     04 FC 45 F0 | 	shr	result2, #4
1c874     FE FC 81 F6 | 	negc	result2, result2
1c878     00 FD 51 FC | 	wrword	result2, _var01
1c87c     00 FD 01 F6 | 	mov	result2, _var01
1c880     02 FC 05 F1 | 	add	result2, #2
1c884     36 00 80 FF 
1c888     FE 1E 59 FC | 	wrword	##27791, result2
1c88c     00 FD 01 F6 | 	mov	result2, _var01
1c890     04 FC 05 F1 | 	add	result2, #4
1c894     FE 00 58 FC | 	wrword	#0, result2
1c898     00 FD 01 F6 | 	mov	result2, _var01
1c89c     06 FC 05 F1 | 	add	result2, #6
1c8a0     FE 00 58 FC | 	wrword	#0, result2
1c8a4     10 00 86 F1 | 	sub	_var01, #16
1c8a8                 | LR__2750
1c8a8     00 FB 01 F6 | 	mov	result1, _var01
1c8ac     01 FD 01 F6 | 	mov	result2, _var02
1c8b0                 | __system___gc_ptrs_ret
1c8b0     2D 00 64 FD | 	ret
1c8b4                 | 
1c8b4                 | __system___gc_tryalloc
1c8b4     0B 4A 05 F6 | 	mov	COUNT_, #11
1c8b8     A8 00 A0 FD | 	call	#pushregs_
1c8bc     09 1F 02 F6 | 	mov	local01, arg01
1c8c0     0A 21 02 F6 | 	mov	local02, arg02
1c8c4     54 FF BF FD | 	call	#__system___gc_ptrs
1c8c8     FD 22 02 F6 | 	mov	local03, result1
1c8cc     FE 24 02 F6 | 	mov	local04, result2
1c8d0     11 27 02 F6 | 	mov	local05, local03
1c8d4     00 28 06 F6 | 	mov	local06, #0
1c8d8     97 1E 48 FB | 	callpa	#(@LR__2761-@LR__2760)>>2,fcache_load_ptr_
1c8dc                 | LR__2760
1c8dc     13 2B 02 F6 | 	mov	local07, local05
1c8e0     06 26 06 F1 | 	add	local05, #6
1c8e4     13 15 EA FA | 	rdword	arg02, local05 wz
1c8e8     11 13 02 F6 | 	mov	arg01, local03
1c8ec     00 FA 05 A6 |  if_e	mov	result1, #0
1c8f0     04 14 66 50 |  if_ne	shl	arg02, #4
1c8f4     0A 13 02 51 |  if_ne	add	arg01, arg02
1c8f8     09 FB 01 56 |  if_ne	mov	result1, arg01
1c8fc     FD 26 0A F6 | 	mov	local05, result1 wz
1c900     13 29 E2 5A |  if_ne	rdword	local06, local05
1c904     00 26 0E F2 | 	cmp	local05, #0 wz
1c908     12 27 52 52 |  if_ne	cmps	local05, local04 wc
1c90c     08 00 90 1D |  if_a	jmp	#LR__2762
1c910     14 1F 5A 52 |  if_ne	cmps	local01, local06 wcz
1c914     C4 FF 9F 1D |  if_a	jmp	#LR__2760
1c918                 | LR__2761
1c918                 | LR__2762
1c918     00 26 0E F2 | 	cmp	local05, #0 wz
1c91c     13 FB 01 A6 |  if_e	mov	result1, local05
1c920     3C 01 90 AD |  if_e	jmp	#LR__2765
1c924     13 FD 01 F6 | 	mov	result2, local05
1c928     06 FC 05 F1 | 	add	result2, #6
1c92c     FE 2C E2 FA | 	rdword	local08, result2
1c930     14 1F 52 F2 | 	cmps	local01, local06 wc
1c934     C0 00 90 3D |  if_ae	jmp	#LR__2764
1c938     13 1F 52 FC | 	wrword	local01, local05
1c93c     13 13 02 F6 | 	mov	arg01, local05
1c940     0F 2D 02 F6 | 	mov	local08, local01
1c944     04 2C 66 F0 | 	shl	local08, #4
1c948     16 13 02 F1 | 	add	arg01, local08
1c94c     0F 29 82 F1 | 	sub	local06, local01
1c950     09 29 52 FC | 	wrword	local06, arg01
1c954     09 2D 02 F6 | 	mov	local08, arg01
1c958     02 2C 06 F1 | 	add	local08, #2
1c95c     36 00 80 FF 
1c960     16 1F 59 FC | 	wrword	##27791, local08
1c964     13 15 0A F6 | 	mov	arg02, local05 wz
1c968     00 FA 05 A6 |  if_e	mov	result1, #0
1c96c     11 15 82 51 |  if_ne	sub	arg02, local03
1c970     04 14 46 50 |  if_ne	shr	arg02, #4
1c974     0A FB 01 56 |  if_ne	mov	result1, arg02
1c978     09 2D 02 F6 | 	mov	local08, arg01
1c97c     04 2C 06 F1 | 	add	local08, #4
1c980     16 FB 51 FC | 	wrword	result1, local08
1c984     13 2D 02 F6 | 	mov	local08, local05
1c988     06 2C 06 F1 | 	add	local08, #6
1c98c     09 15 02 F6 | 	mov	arg02, arg01
1c990     16 2D E2 FA | 	rdword	local08, local08
1c994     06 14 06 F1 | 	add	arg02, #6
1c998     0A 2D 52 FC | 	wrword	local08, arg02
1c99c     09 2F 02 F6 | 	mov	local09, arg01
1c9a0     17 15 0A F6 | 	mov	arg02, local09 wz
1c9a4     00 FA 05 A6 |  if_e	mov	result1, #0
1c9a8     11 15 82 51 |  if_ne	sub	arg02, local03
1c9ac     04 14 46 50 |  if_ne	shr	arg02, #4
1c9b0     0A FB 01 56 |  if_ne	mov	result1, arg02
1c9b4     FD 2C 02 F6 | 	mov	local08, result1
1c9b8     09 31 EA FA | 	rdword	local10, arg01 wz
1c9bc     00 FA 05 A6 |  if_e	mov	result1, #0
1c9c0     04 30 66 50 |  if_ne	shl	local10, #4
1c9c4     18 13 02 51 |  if_ne	add	arg01, local10
1c9c8     09 FB 01 56 |  if_ne	mov	result1, arg01
1c9cc     FD 32 0A F6 | 	mov	local11, result1 wz
1c9d0     24 00 90 AD |  if_e	jmp	#LR__2763
1c9d4     12 33 52 F2 | 	cmps	local11, local04 wc
1c9d8     1C 00 90 3D |  if_ae	jmp	#LR__2763
1c9dc     17 15 0A F6 | 	mov	arg02, local09 wz
1c9e0     00 FA 05 A6 |  if_e	mov	result1, #0
1c9e4     11 15 82 51 |  if_ne	sub	arg02, local03
1c9e8     04 14 46 50 |  if_ne	shr	arg02, #4
1c9ec     0A FB 01 56 |  if_ne	mov	result1, arg02
1c9f0     04 32 06 F1 | 	add	local11, #4
1c9f4     19 FB 51 FC | 	wrword	result1, local11
1c9f8                 | LR__2763
1c9f8                 | LR__2764
1c9f8     06 2A 06 F1 | 	add	local07, #6
1c9fc     15 2D 52 FC | 	wrword	local08, local07
1ca00     36 00 00 FF 
1ca04     80 2E 06 F6 | 	mov	local09, ##27776
1ca08     10 2F 42 F5 | 	or	local09, local02
1ca0c     00 FA 05 F6 | 	mov	result1, #0
1ca10     01 FA 61 FD | 	cogid	result1
1ca14     FD 2E 42 F5 | 	or	local09, result1
1ca18     13 33 02 F6 | 	mov	local11, local05
1ca1c     02 32 06 F1 | 	add	local11, #2
1ca20     19 2F 52 FC | 	wrword	local09, local11
1ca24     11 2F 02 F6 | 	mov	local09, local03
1ca28     08 2E 06 F1 | 	add	local09, #8
1ca2c     13 33 02 F6 | 	mov	local11, local05
1ca30     17 2F E2 FA | 	rdword	local09, local09
1ca34     06 32 06 F1 | 	add	local11, #6
1ca38     19 2F 52 FC | 	wrword	local09, local11
1ca3c     13 15 0A F6 | 	mov	arg02, local05 wz
1ca40     00 FA 05 A6 |  if_e	mov	result1, #0
1ca44     11 15 82 51 |  if_ne	sub	arg02, local03
1ca48     04 14 46 50 |  if_ne	shr	arg02, #4
1ca4c     0A FB 01 56 |  if_ne	mov	result1, arg02
1ca50     08 22 06 F1 | 	add	local03, #8
1ca54     11 FB 51 FC | 	wrword	result1, local03
1ca58     08 26 06 F1 | 	add	local05, #8
1ca5c     13 FB 01 F6 | 	mov	result1, local05
1ca60                 | LR__2765
1ca60     A7 F0 03 F6 | 	mov	ptra, fp
1ca64     B2 00 A0 FD | 	call	#popregs_
1ca68                 | __system___gc_tryalloc_ret
1ca68     2D 00 64 FD | 	ret
1ca6c                 | 
1ca6c                 | __system___gc_alloc_managed
1ca6c     01 4A 05 F6 | 	mov	COUNT_, #1
1ca70     A8 00 A0 FD | 	call	#pushregs_
1ca74     09 1F 02 F6 | 	mov	local01, arg01
1ca78     00 14 06 F6 | 	mov	arg02, #0
1ca7c     1C 00 B0 FD | 	call	#__system___gc_doalloc
1ca80     FD 14 0A F6 | 	mov	arg02, result1 wz
1ca84     01 1E 56 A2 |  if_e	cmps	local01, #1 wc
1ca88     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
1ca8c     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
1ca90     A7 F0 03 F6 | 	mov	ptra, fp
1ca94     B2 00 A0 FD | 	call	#popregs_
1ca98                 | __system___gc_alloc_managed_ret
1ca98     2D 00 64 FD | 	ret
1ca9c                 | 
1ca9c                 | __system___gc_doalloc
1ca9c     06 4A 05 F6 | 	mov	COUNT_, #6
1caa0     A8 00 A0 FD | 	call	#pushregs_
1caa4     09 1F 0A F6 | 	mov	local01, arg01 wz
1caa8     0A 21 02 F6 | 	mov	local02, arg02
1caac     00 FA 05 A6 |  if_e	mov	result1, #0
1cab0     8C 00 90 AD |  if_e	jmp	#LR__2777
1cab4     17 1E 06 F1 | 	add	local01, #23
1cab8     0F 1E 26 F5 | 	andn	local01, #15
1cabc     04 1E 46 F0 | 	shr	local01, #4
1cac0     1C E8 05 F1 | 	add	ptr___system__dat__, #28
1cac4     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
1cac8     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
1cacc     E4 C1 BF FD | 	call	#__system___lockmem
1cad0     0F 13 02 F6 | 	mov	arg01, local01
1cad4     10 15 02 F6 | 	mov	arg02, local02
1cad8     D8 FD BF FD | 	call	#__system___gc_tryalloc
1cadc     FD 22 0A F6 | 	mov	local03, result1 wz
1cae0     14 00 90 5D |  if_ne	jmp	#LR__2770
1cae4     70 03 B0 FD | 	call	#__system___gc_docollect
1cae8     0F 13 02 F6 | 	mov	arg01, local01
1caec     10 15 02 F6 | 	mov	arg02, local02
1caf0     C0 FD BF FD | 	call	#__system___gc_tryalloc
1caf4     FD 22 02 F6 | 	mov	local03, result1
1caf8                 | LR__2770
1caf8     1C E8 05 F1 | 	add	ptr___system__dat__, #28
1cafc     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
1cb00     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
1cb04     09 01 68 FC | 	wrlong	#0, arg01
1cb08     00 22 0E F2 | 	cmp	local03, #0 wz
1cb0c     2C 00 90 AD |  if_e	jmp	#LR__2776
1cb10     04 1E 66 F0 | 	shl	local01, #4
1cb14     08 1E 86 F1 | 	sub	local01, #8
1cb18     0F 25 52 F6 | 	abs	local04, local01 wc
1cb1c     02 24 46 F0 | 	shr	local04, #2
1cb20     12 27 8A F6 | 	negc	local05, local04 wz
1cb24     11 29 02 F6 | 	mov	local06, local03
1cb28     10 00 90 AD |  if_e	jmp	#LR__2775
1cb2c     97 06 48 FB | 	callpa	#(@LR__2773-@LR__2771)>>2,fcache_load_ptr_
1cb30                 | LR__2771
1cb30     13 05 D8 FC | 	rep	@LR__2774, local05
1cb34                 | LR__2772
1cb34     14 01 68 FC | 	wrlong	#0, local06
1cb38     04 28 06 F1 | 	add	local06, #4
1cb3c                 | LR__2773
1cb3c                 | LR__2774
1cb3c                 | LR__2775
1cb3c                 | LR__2776
1cb3c     11 FB 01 F6 | 	mov	result1, local03
1cb40                 | LR__2777
1cb40     A7 F0 03 F6 | 	mov	ptra, fp
1cb44     B2 00 A0 FD | 	call	#popregs_
1cb48                 | __system___gc_doalloc_ret
1cb48     2D 00 64 FD | 	ret
1cb4c                 | 
1cb4c                 | __system___gc_isvalidptr
1cb4c     F8 16 06 F4 | 	bitl	arg03, #248
1cb50     08 16 86 F1 | 	sub	arg03, #8
1cb54     09 17 52 F2 | 	cmps	arg03, arg01 wc
1cb58     08 00 90 CD |  if_b	jmp	#LR__2780
1cb5c     0A 17 52 F2 | 	cmps	arg03, arg02 wc
1cb60     08 00 90 CD |  if_b	jmp	#LR__2781
1cb64                 | LR__2780
1cb64     00 FA 05 F6 | 	mov	result1, #0
1cb68     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
1cb6c                 | LR__2781
1cb6c     0B 01 02 F6 | 	mov	_var01, arg03
1cb70     09 01 62 F5 | 	xor	_var01, arg01
1cb74     0F 00 CE F7 | 	test	_var01, #15 wz
1cb78     00 FA 05 56 |  if_ne	mov	result1, #0
1cb7c     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
1cb80     0B 01 02 F6 | 	mov	_var01, arg03
1cb84     02 00 06 F1 | 	add	_var01, #2
1cb88     00 01 E2 FA | 	rdword	_var01, _var01
1cb8c     7F 00 00 FF 
1cb90     C0 01 06 F5 | 	and	_var01, ##65472
1cb94     36 00 00 FF 
1cb98     80 00 0E F2 | 	cmp	_var01, ##27776 wz
1cb9c     00 FA 05 56 |  if_ne	mov	result1, #0
1cba0     0B FB 01 A6 |  if_e	mov	result1, arg03
1cba4                 | __system___gc_isvalidptr_ret
1cba4     2D 00 64 FD | 	ret
1cba8                 | 
1cba8                 | __system___gc_free
1cba8     09 17 02 F6 | 	mov	arg03, arg01
1cbac     6C FC BF FD | 	call	#__system___gc_ptrs
1cbb0     FD 12 02 F6 | 	mov	arg01, result1
1cbb4     FE 14 02 F6 | 	mov	arg02, result2
1cbb8     90 FF BF FD | 	call	#__system___gc_isvalidptr
1cbbc     FD 14 0A F6 | 	mov	arg02, result1 wz
1cbc0     28 00 90 AD |  if_e	jmp	#LR__2790
1cbc4     1C E8 05 F1 | 	add	ptr___system__dat__, #28
1cbc8     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
1cbcc     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
1cbd0     E0 C0 BF FD | 	call	#__system___lockmem
1cbd4     0A 13 02 F6 | 	mov	arg01, arg02
1cbd8     14 00 B0 FD | 	call	#__system___gc_dofree
1cbdc     1C E8 05 F1 | 	add	ptr___system__dat__, #28
1cbe0     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
1cbe4     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
1cbe8     09 01 68 FC | 	wrlong	#0, arg01
1cbec                 | LR__2790
1cbec                 | __system___gc_free_ret
1cbec     2D 00 64 FD | 	ret
1cbf0                 | 
1cbf0                 | __system___gc_dofree
1cbf0     06 4A 05 F6 | 	mov	COUNT_, #6
1cbf4     A8 00 A0 FD | 	call	#pushregs_
1cbf8     09 1F 02 F6 | 	mov	local01, arg01
1cbfc     1C FC BF FD | 	call	#__system___gc_ptrs
1cc00     FD 20 02 F6 | 	mov	local02, result1
1cc04     FE 22 02 F6 | 	mov	local03, result2
1cc08     0F 15 02 F6 | 	mov	arg02, local01
1cc0c     02 14 06 F1 | 	add	arg02, #2
1cc10     36 00 80 FF 
1cc14     0A 1F 59 FC | 	wrword	##27791, arg02
1cc18     0F 25 02 F6 | 	mov	local04, local01
1cc1c     0F 13 02 F6 | 	mov	arg01, local01
1cc20     09 27 EA FA | 	rdword	local05, arg01 wz
1cc24     00 FA 05 A6 |  if_e	mov	result1, #0
1cc28     04 26 66 50 |  if_ne	shl	local05, #4
1cc2c     13 13 02 51 |  if_ne	add	arg01, local05
1cc30     09 FB 01 56 |  if_ne	mov	result1, arg01
1cc34     FD 28 02 F6 | 	mov	local06, result1
1cc38     97 24 48 FB | 	callpa	#(@LR__2801-@LR__2800)>>2,fcache_load_ptr_
1cc3c                 | LR__2800
1cc3c     04 24 06 F1 | 	add	local04, #4
1cc40     12 15 EA FA | 	rdword	arg02, local04 wz
1cc44     10 13 02 F6 | 	mov	arg01, local02
1cc48     00 FA 05 A6 |  if_e	mov	result1, #0
1cc4c     04 14 66 50 |  if_ne	shl	arg02, #4
1cc50     0A 13 02 51 |  if_ne	add	arg01, arg02
1cc54     09 FB 01 56 |  if_ne	mov	result1, arg01
1cc58     FD 24 0A F6 | 	mov	local04, result1 wz
1cc5c     24 00 90 AD |  if_e	jmp	#LR__2802
1cc60     12 13 02 F6 | 	mov	arg01, local04
1cc64     00 FA 05 F6 | 	mov	result1, #0
1cc68     02 12 06 F1 | 	add	arg01, #2
1cc6c     09 13 E2 FA | 	rdword	arg01, arg01
1cc70     36 00 00 FF 
1cc74     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
1cc78     01 FA 65 A6 |  if_e	neg	result1, #1
1cc7c     00 FA 0D F2 | 	cmp	result1, #0 wz
1cc80     B8 FF 9F AD |  if_e	jmp	#LR__2800
1cc84                 | LR__2801
1cc84                 | LR__2802
1cc84     00 24 0E F2 | 	cmp	local04, #0 wz
1cc88     10 25 02 A6 |  if_e	mov	local04, local02
1cc8c     12 15 02 F6 | 	mov	arg02, local04
1cc90     06 14 06 F1 | 	add	arg02, #6
1cc94     0F 13 02 F6 | 	mov	arg01, local01
1cc98     0A 15 E2 FA | 	rdword	arg02, arg02
1cc9c     06 12 06 F1 | 	add	arg01, #6
1cca0     09 15 52 FC | 	wrword	arg02, arg01
1cca4     0F 15 0A F6 | 	mov	arg02, local01 wz
1cca8     00 FA 05 A6 |  if_e	mov	result1, #0
1ccac     10 15 82 51 |  if_ne	sub	arg02, local02
1ccb0     04 14 46 50 |  if_ne	shr	arg02, #4
1ccb4     0A FB 01 56 |  if_ne	mov	result1, arg02
1ccb8     12 15 02 F6 | 	mov	arg02, local04
1ccbc     06 14 06 F1 | 	add	arg02, #6
1ccc0     0A FB 51 FC | 	wrword	result1, arg02
1ccc4     10 25 0A F2 | 	cmp	local04, local02 wz
1ccc8     A4 00 90 AD |  if_e	jmp	#LR__2805
1cccc     12 13 02 F6 | 	mov	arg01, local04
1ccd0     09 27 EA FA | 	rdword	local05, arg01 wz
1ccd4     00 FA 05 A6 |  if_e	mov	result1, #0
1ccd8     04 26 66 50 |  if_ne	shl	local05, #4
1ccdc     13 13 02 51 |  if_ne	add	arg01, local05
1cce0     09 FB 01 56 |  if_ne	mov	result1, arg01
1cce4     0F FB 09 F2 | 	cmp	result1, local01 wz
1cce8     84 00 90 5D |  if_ne	jmp	#LR__2804
1ccec     12 29 E2 FA | 	rdword	local06, local04
1ccf0     0F 15 E2 FA | 	rdword	arg02, local01
1ccf4     0A 29 02 F1 | 	add	local06, arg02
1ccf8     12 29 52 FC | 	wrword	local06, local04
1ccfc     0F 29 02 F6 | 	mov	local06, local01
1cd00     02 28 06 F1 | 	add	local06, #2
1cd04     14 01 58 FC | 	wrword	#0, local06
1cd08     0F 13 02 F6 | 	mov	arg01, local01
1cd0c     09 27 EA FA | 	rdword	local05, arg01 wz
1cd10     00 FA 05 A6 |  if_e	mov	result1, #0
1cd14     04 26 66 50 |  if_ne	shl	local05, #4
1cd18     13 13 02 51 |  if_ne	add	arg01, local05
1cd1c     09 FB 01 56 |  if_ne	mov	result1, arg01
1cd20     FD 28 02 F6 | 	mov	local06, result1
1cd24     11 29 52 F2 | 	cmps	local06, local03 wc
1cd28     20 00 90 3D |  if_ae	jmp	#LR__2803
1cd2c     12 15 0A F6 | 	mov	arg02, local04 wz
1cd30     00 FA 05 A6 |  if_e	mov	result1, #0
1cd34     10 15 82 51 |  if_ne	sub	arg02, local02
1cd38     04 14 46 50 |  if_ne	shr	arg02, #4
1cd3c     0A FB 01 56 |  if_ne	mov	result1, arg02
1cd40     14 15 02 F6 | 	mov	arg02, local06
1cd44     04 14 06 F1 | 	add	arg02, #4
1cd48     0A FB 51 FC | 	wrword	result1, arg02
1cd4c                 | LR__2803
1cd4c     0F 15 02 F6 | 	mov	arg02, local01
1cd50     06 14 06 F1 | 	add	arg02, #6
1cd54     12 FD 01 F6 | 	mov	result2, local04
1cd58     0A 15 E2 FA | 	rdword	arg02, arg02
1cd5c     06 FC 05 F1 | 	add	result2, #6
1cd60     FE 14 52 FC | 	wrword	arg02, result2
1cd64     06 1E 06 F1 | 	add	local01, #6
1cd68     0F 01 58 FC | 	wrword	#0, local01
1cd6c     12 1F 02 F6 | 	mov	local01, local04
1cd70                 | LR__2804
1cd70                 | LR__2805
1cd70     0F 13 02 F6 | 	mov	arg01, local01
1cd74     09 27 EA FA | 	rdword	local05, arg01 wz
1cd78     00 FA 05 A6 |  if_e	mov	result1, #0
1cd7c     04 26 66 50 |  if_ne	shl	local05, #4
1cd80     13 13 02 51 |  if_ne	add	arg01, local05
1cd84     09 FB 01 56 |  if_ne	mov	result1, arg01
1cd88     FD 14 0A F6 | 	mov	arg02, result1 wz
1cd8c     B8 00 90 AD |  if_e	jmp	#LR__2807
1cd90     11 15 52 F2 | 	cmps	arg02, local03 wc
1cd94     B0 00 90 3D |  if_ae	jmp	#LR__2807
1cd98     0A 13 02 F6 | 	mov	arg01, arg02
1cd9c     00 FA 05 F6 | 	mov	result1, #0
1cda0     02 12 06 F1 | 	add	arg01, #2
1cda4     09 13 E2 FA | 	rdword	arg01, arg01
1cda8     36 00 00 FF 
1cdac     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
1cdb0     01 FA 65 A6 |  if_e	neg	result1, #1
1cdb4     00 FA 0D F2 | 	cmp	result1, #0 wz
1cdb8     8C 00 90 AD |  if_e	jmp	#LR__2807
1cdbc     0F 25 02 F6 | 	mov	local04, local01
1cdc0     12 29 E2 FA | 	rdword	local06, local04
1cdc4     0A 13 02 F6 | 	mov	arg01, arg02
1cdc8     09 1F E2 FA | 	rdword	local01, arg01
1cdcc     0F 29 02 F1 | 	add	local06, local01
1cdd0     12 29 52 FC | 	wrword	local06, local04
1cdd4     09 29 02 F6 | 	mov	local06, arg01
1cdd8     06 28 06 F1 | 	add	local06, #6
1cddc     12 1F 02 F6 | 	mov	local01, local04
1cde0     14 29 E2 FA | 	rdword	local06, local06
1cde4     06 1E 06 F1 | 	add	local01, #6
1cde8     0F 29 52 FC | 	wrword	local06, local01
1cdec     09 29 02 F6 | 	mov	local06, arg01
1cdf0     02 28 06 F1 | 	add	local06, #2
1cdf4     14 55 59 FC | 	wrword	#170, local06
1cdf8     09 29 02 F6 | 	mov	local06, arg01
1cdfc     06 28 06 F1 | 	add	local06, #6
1ce00     14 01 58 FC | 	wrword	#0, local06
1ce04     09 27 EA FA | 	rdword	local05, arg01 wz
1ce08     00 FA 05 A6 |  if_e	mov	result1, #0
1ce0c     04 26 66 50 |  if_ne	shl	local05, #4
1ce10     13 13 02 51 |  if_ne	add	arg01, local05
1ce14     09 FB 01 56 |  if_ne	mov	result1, arg01
1ce18     FD 28 0A F6 | 	mov	local06, result1 wz
1ce1c     28 00 90 AD |  if_e	jmp	#LR__2806
1ce20     11 29 52 F2 | 	cmps	local06, local03 wc
1ce24     20 00 90 3D |  if_ae	jmp	#LR__2806
1ce28     12 15 0A F6 | 	mov	arg02, local04 wz
1ce2c     00 FA 05 A6 |  if_e	mov	result1, #0
1ce30     10 15 82 51 |  if_ne	sub	arg02, local02
1ce34     04 14 46 50 |  if_ne	shr	arg02, #4
1ce38     0A FB 01 56 |  if_ne	mov	result1, arg02
1ce3c     14 25 02 F6 | 	mov	local04, local06
1ce40     04 24 06 F1 | 	add	local04, #4
1ce44     12 FB 51 FC | 	wrword	result1, local04
1ce48                 | LR__2806
1ce48                 | LR__2807
1ce48     14 FB 01 F6 | 	mov	result1, local06
1ce4c     A7 F0 03 F6 | 	mov	ptra, fp
1ce50     B2 00 A0 FD | 	call	#popregs_
1ce54                 | __system___gc_dofree_ret
1ce54     2D 00 64 FD | 	ret
1ce58                 | 
1ce58                 | __system___gc_docollect
1ce58     05 4A 05 F6 | 	mov	COUNT_, #5
1ce5c     A8 00 A0 FD | 	call	#pushregs_
1ce60     B8 F9 BF FD | 	call	#__system___gc_ptrs
1ce64     FE 1E 02 F6 | 	mov	local01, result2
1ce68     FD 20 02 F6 | 	mov	local02, result1
1ce6c     10 13 02 F6 | 	mov	arg01, local02
1ce70     09 23 EA FA | 	rdword	local03, arg01 wz
1ce74     00 FA 05 A6 |  if_e	mov	result1, #0
1ce78     04 22 66 50 |  if_ne	shl	local03, #4
1ce7c     11 13 02 51 |  if_ne	add	arg01, local03
1ce80     09 FB 01 56 |  if_ne	mov	result1, arg01
1ce84     FD 24 0A F6 | 	mov	local04, result1 wz
1ce88     00 FA 05 F6 | 	mov	result1, #0
1ce8c     01 FA 61 FD | 	cogid	result1
1ce90     FD 26 02 F6 | 	mov	local05, result1
1ce94     48 00 90 AD |  if_e	jmp	#LR__2812
1ce98     97 22 48 FB | 	callpa	#(@LR__2811-@LR__2810)>>2,fcache_load_ptr_
1ce9c                 | LR__2810
1ce9c     0F 25 52 F2 | 	cmps	local04, local01 wc
1cea0     3C 00 90 3D |  if_ae	jmp	#LR__2812
1cea4     12 15 02 F6 | 	mov	arg02, local04
1cea8     02 14 06 F1 | 	add	arg02, #2
1ceac     0A 15 E2 FA | 	rdword	arg02, arg02
1ceb0     20 14 26 F5 | 	andn	arg02, #32
1ceb4     12 13 02 F6 | 	mov	arg01, local04
1ceb8     02 12 06 F1 | 	add	arg01, #2
1cebc     09 15 52 FC | 	wrword	arg02, arg01
1cec0     12 13 02 F6 | 	mov	arg01, local04
1cec4     09 23 EA FA | 	rdword	local03, arg01 wz
1cec8     00 FA 05 A6 |  if_e	mov	result1, #0
1cecc     04 22 66 50 |  if_ne	shl	local03, #4
1ced0     11 13 02 51 |  if_ne	add	arg01, local03
1ced4     09 FB 01 56 |  if_ne	mov	result1, arg01
1ced8     FD 24 0A F6 | 	mov	local04, result1 wz
1cedc     BC FF 9F 5D |  if_ne	jmp	#LR__2810
1cee0                 | LR__2811
1cee0                 | LR__2812
1cee0     00 22 06 F6 | 	mov	local03, #0
1cee4     00 12 06 F6 | 	mov	arg01, #0
1cee8     A0 BD BF FD | 	call	#__system____topofstack
1ceec     FD 14 02 F6 | 	mov	arg02, result1
1cef0     11 13 02 F6 | 	mov	arg01, local03
1cef4     90 00 B0 FD | 	call	#__system___gc_markhub
1cef8     1C 01 B0 FD | 	call	#__system___gc_markcog
1cefc     10 13 02 F6 | 	mov	arg01, local02
1cf00     09 23 EA FA | 	rdword	local03, arg01 wz
1cf04     00 FA 05 A6 |  if_e	mov	result1, #0
1cf08     04 22 66 50 |  if_ne	shl	local03, #4
1cf0c     11 13 02 51 |  if_ne	add	arg01, local03
1cf10     09 FB 01 56 |  if_ne	mov	result1, arg01
1cf14     FD 20 0A F6 | 	mov	local02, result1 wz
1cf18     60 00 90 AD |  if_e	jmp	#LR__2816
1cf1c                 | LR__2813
1cf1c     10 25 02 F6 | 	mov	local04, local02
1cf20     12 13 02 F6 | 	mov	arg01, local04
1cf24     09 23 EA FA | 	rdword	local03, arg01 wz
1cf28     00 FA 05 A6 |  if_e	mov	result1, #0
1cf2c     04 22 66 50 |  if_ne	shl	local03, #4
1cf30     11 13 02 51 |  if_ne	add	arg01, local03
1cf34     09 FB 01 56 |  if_ne	mov	result1, arg01
1cf38     FD 20 02 F6 | 	mov	local02, result1
1cf3c     12 15 02 F6 | 	mov	arg02, local04
1cf40     02 14 06 F1 | 	add	arg02, #2
1cf44     0A 15 E2 FA | 	rdword	arg02, arg02
1cf48     20 14 CE F7 | 	test	arg02, #32 wz
1cf4c     10 14 CE A7 |  if_e	test	arg02, #16 wz
1cf50     1C 00 90 5D |  if_ne	jmp	#LR__2815
1cf54     0A 15 42 F8 | 	getnib	arg02, arg02, #0
1cf58     13 15 0A F2 | 	cmp	arg02, local05 wz
1cf5c     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
1cf60     0C 00 90 5D |  if_ne	jmp	#LR__2814
1cf64     12 13 02 F6 | 	mov	arg01, local04
1cf68     84 FC BF FD | 	call	#__system___gc_dofree
1cf6c     FD 20 02 F6 | 	mov	local02, result1
1cf70                 | LR__2814
1cf70                 | LR__2815
1cf70     00 20 0E F2 | 	cmp	local02, #0 wz
1cf74     0F 21 52 52 |  if_ne	cmps	local02, local01 wc
1cf78     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__2813
1cf7c                 | LR__2816
1cf7c     A7 F0 03 F6 | 	mov	ptra, fp
1cf80     B2 00 A0 FD | 	call	#popregs_
1cf84                 | __system___gc_docollect_ret
1cf84     2D 00 64 FD | 	ret
1cf88                 | 
1cf88                 | __system___gc_markhub
1cf88     04 4A 05 F6 | 	mov	COUNT_, #4
1cf8c     A8 00 A0 FD | 	call	#pushregs_
1cf90     09 1F 02 F6 | 	mov	local01, arg01
1cf94     0A 21 02 F6 | 	mov	local02, arg02
1cf98     80 F8 BF FD | 	call	#__system___gc_ptrs
1cf9c     FD 22 02 F6 | 	mov	local03, result1
1cfa0     FE 24 02 F6 | 	mov	local04, result2
1cfa4                 | LR__2820
1cfa4     10 1F 52 F2 | 	cmps	local01, local02 wc
1cfa8     60 00 90 3D |  if_ae	jmp	#LR__2821
1cfac     0F 17 02 FB | 	rdlong	arg03, local01
1cfb0     04 1E 06 F1 | 	add	local01, #4
1cfb4     12 15 02 F6 | 	mov	arg02, local04
1cfb8     11 13 02 F6 | 	mov	arg01, local03
1cfbc     8C FB BF FD | 	call	#__system___gc_isvalidptr
1cfc0     FD 16 0A F6 | 	mov	arg03, result1 wz
1cfc4     DC FF 9F AD |  if_e	jmp	#LR__2820
1cfc8     0B 13 02 F6 | 	mov	arg01, arg03
1cfcc     00 FA 05 F6 | 	mov	result1, #0
1cfd0     02 12 06 F1 | 	add	arg01, #2
1cfd4     09 13 E2 FA | 	rdword	arg01, arg01
1cfd8     36 00 00 FF 
1cfdc     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
1cfe0     01 FA 65 A6 |  if_e	neg	result1, #1
1cfe4     00 FA 0D F2 | 	cmp	result1, #0 wz
1cfe8     B8 FF 9F 5D |  if_ne	jmp	#LR__2820
1cfec     0B FD 01 F6 | 	mov	result2, arg03
1cff0     02 FC 05 F1 | 	add	result2, #2
1cff4     FE FC E1 FA | 	rdword	result2, result2
1cff8     0F FC 25 F5 | 	andn	result2, #15
1cffc     2E FC 45 F5 | 	or	result2, #46
1d000     02 16 06 F1 | 	add	arg03, #2
1d004     0B FD 51 FC | 	wrword	result2, arg03
1d008     98 FF 9F FD | 	jmp	#LR__2820
1d00c                 | LR__2821
1d00c     A7 F0 03 F6 | 	mov	ptra, fp
1d010     B2 00 A0 FD | 	call	#popregs_
1d014                 | __system___gc_markhub_ret
1d014     2D 00 64 FD | 	ret
1d018                 | 
1d018                 | __system___gc_markcog
1d018     04 4A 05 F6 | 	mov	COUNT_, #4
1d01c     A8 00 A0 FD | 	call	#pushregs_
1d020     F8 F7 BF FD | 	call	#__system___gc_ptrs
1d024     FD 1E 02 F6 | 	mov	local01, result1
1d028     FE 20 02 F6 | 	mov	local02, result2
1d02c     EF 23 06 F6 | 	mov	local03, #495
1d030                 | LR__2830
1d030                 | 	'.live	local03
1d030     00 22 96 F9 | 	alts	local03, #0
1d034     11 25 02 F6 | 	mov	local04, local03
1d038     0F 13 02 F6 | 	mov	arg01, local01
1d03c     10 15 02 F6 | 	mov	arg02, local02
1d040     12 17 02 F6 | 	mov	arg03, local04
1d044     04 FB BF FD | 	call	#__system___gc_isvalidptr
1d048     00 FA 0D F2 | 	cmp	result1, #0 wz
1d04c     18 00 90 AD |  if_e	jmp	#LR__2831
1d050     FD 24 02 F6 | 	mov	local04, result1
1d054     02 24 06 F1 | 	add	local04, #2
1d058     12 25 E2 FA | 	rdword	local04, local04
1d05c     20 24 46 F5 | 	or	local04, #32
1d060     02 FA 05 F1 | 	add	result1, #2
1d064     FD 24 52 FC | 	wrword	local04, result1
1d068                 | LR__2831
1d068     01 22 86 F1 | 	sub	local03, #1
1d06c     00 22 56 F2 | 	cmps	local03, #0 wc
1d070     BC FF 9F 3D |  if_ae	jmp	#LR__2830
1d074     A7 F0 03 F6 | 	mov	ptra, fp
1d078     B2 00 A0 FD | 	call	#popregs_
1d07c                 | __system___gc_markcog_ret
1d07c     2D 00 64 FD | 	ret
1d080                 | 
1d080                 | __system__opendir
1d080     06 4A 05 F6 | 	mov	COUNT_, #6
1d084     A8 00 A0 FD | 	call	#pushregs_
1d088     84 E9 05 F1 | 	add	ptr___system__dat__, #388
1d08c     F4 1E 02 F6 | 	mov	local01, ptr___system__dat__
1d090     09 15 02 F6 | 	mov	arg02, arg01
1d094     0F 13 02 F6 | 	mov	arg01, local01
1d098     00 16 06 F6 | 	mov	arg03, #0
1d09c     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
1d0a0     A8 C3 BF FD | 	call	#__system____getvfsforfile
1d0a4     FD 20 0A F6 | 	mov	local02, result1 wz
1d0a8     10 00 90 AD |  if_e	jmp	#LR__2840
1d0ac     28 20 06 F1 | 	add	local02, #40
1d0b0     10 17 0A FB | 	rdlong	arg03, local02 wz
1d0b4     28 20 86 F1 | 	sub	local02, #40
1d0b8     14 00 90 5D |  if_ne	jmp	#LR__2841
1d0bc                 | LR__2840
1d0bc     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1d0c0     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
1d0c4     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1d0c8     00 FA 05 F6 | 	mov	result1, #0
1d0cc     90 00 90 FD | 	jmp	#LR__2843
1d0d0                 | LR__2841
1d0d0     5C 12 06 F6 | 	mov	arg01, #92
1d0d4     10 14 06 F6 | 	mov	arg02, #16
1d0d8     C0 F9 BF FD | 	call	#__system___gc_doalloc
1d0dc     FD 22 0A F6 | 	mov	local03, result1 wz
1d0e0     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1d0e4     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
1d0e8     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1d0ec     00 FA 05 A6 |  if_e	mov	result1, #0
1d0f0     6C 00 90 AD |  if_e	jmp	#LR__2843
1d0f4     28 20 06 F1 | 	add	local02, #40
1d0f8     10 25 02 FB | 	rdlong	local04, local02
1d0fc     12 27 02 F6 | 	mov	local05, local04
1d100     28 20 86 F1 | 	sub	local02, #40
1d104     13 26 46 F7 | 	zerox	local05, #19
1d108     14 24 46 F0 | 	shr	local04, #20
1d10c     02 24 66 F0 | 	shl	local04, #2
1d110     ED 24 02 F1 | 	add	local04, __methods__
1d114     12 25 02 FB | 	rdlong	local04, local04
1d118     11 13 02 F6 | 	mov	arg01, local03
1d11c     0F 15 02 F6 | 	mov	arg02, local01
1d120     F2 28 02 F6 | 	mov	local06, objptr
1d124     13 E5 01 F6 | 	mov	objptr, local05
1d128     2D 24 62 FD | 	call	local04
1d12c     14 E5 01 F6 | 	mov	objptr, local06
1d130     FD 16 0A F6 | 	mov	arg03, result1 wz
1d134     20 00 90 AD |  if_e	jmp	#LR__2842
1d138     00 16 4E F2 | 	cmps	arg03, #0 wz
1d13c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1d140     F4 16 62 FC | 	wrlong	arg03, ptr___system__dat__
1d144     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1d148     11 13 02 F6 | 	mov	arg01, local03
1d14c     58 FA BF FD | 	call	#__system___gc_free
1d150     00 FA 05 F6 | 	mov	result1, #0
1d154     08 00 90 FD | 	jmp	#LR__2843
1d158                 | LR__2842
1d158     11 21 62 FC | 	wrlong	local02, local03
1d15c     11 FB 01 F6 | 	mov	result1, local03
1d160                 | LR__2843
1d160     A7 F0 03 F6 | 	mov	ptra, fp
1d164     B2 00 A0 FD | 	call	#popregs_
1d168                 | __system__opendir_ret
1d168     2D 00 64 FD | 	ret
1d16c                 | 
1d16c                 | __system__closedir
1d16c     04 4A 05 F6 | 	mov	COUNT_, #4
1d170     A8 00 A0 FD | 	call	#pushregs_
1d174     09 1F 02 F6 | 	mov	local01, arg01
1d178     0F 13 02 FB | 	rdlong	arg01, local01
1d17c     2C 12 06 F1 | 	add	arg01, #44
1d180     09 21 02 FB | 	rdlong	local02, arg01
1d184     10 23 02 F6 | 	mov	local03, local02
1d188     13 22 46 F7 | 	zerox	local03, #19
1d18c     14 20 46 F0 | 	shr	local02, #20
1d190     02 20 66 F0 | 	shl	local02, #2
1d194     ED 20 02 F1 | 	add	local02, __methods__
1d198     10 21 02 FB | 	rdlong	local02, local02
1d19c     0F 13 02 F6 | 	mov	arg01, local01
1d1a0     F2 24 02 F6 | 	mov	local04, objptr
1d1a4     11 E5 01 F6 | 	mov	objptr, local03
1d1a8     2D 20 62 FD | 	call	local02
1d1ac     12 E5 01 F6 | 	mov	objptr, local04
1d1b0     FD 24 02 F6 | 	mov	local04, result1
1d1b4     0F 13 02 F6 | 	mov	arg01, local01
1d1b8     EC F9 BF FD | 	call	#__system___gc_free
1d1bc     00 24 4E F2 | 	cmps	local04, #0 wz
1d1c0     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1d1c4     F4 24 62 FC | 	wrlong	local04, ptr___system__dat__
1d1c8     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1d1cc     01 FA 65 56 |  if_ne	neg	result1, #1
1d1d0     00 FA 05 A6 |  if_e	mov	result1, #0
1d1d4     A7 F0 03 F6 | 	mov	ptra, fp
1d1d8     B2 00 A0 FD | 	call	#popregs_
1d1dc                 | __system__closedir_ret
1d1dc     2D 00 64 FD | 	ret
1d1e0                 | 
1d1e0                 | __system__readdir
1d1e0     04 4A 05 F6 | 	mov	COUNT_, #4
1d1e4     A8 00 A0 FD | 	call	#pushregs_
1d1e8     09 15 0A FB | 	rdlong	arg02, arg01 wz
1d1ec     08 12 06 F1 | 	add	arg01, #8
1d1f0     09 1F 02 F6 | 	mov	local01, arg01
1d1f4     08 12 86 F1 | 	sub	arg01, #8
1d1f8     00 FA 05 A6 |  if_e	mov	result1, #0
1d1fc     5C 00 90 AD |  if_e	jmp	#LR__2851
1d200     30 14 06 F1 | 	add	arg02, #48
1d204     0A 21 02 FB | 	rdlong	local02, arg02
1d208     10 23 02 F6 | 	mov	local03, local02
1d20c     13 22 46 F7 | 	zerox	local03, #19
1d210     14 20 46 F0 | 	shr	local02, #20
1d214     02 20 66 F0 | 	shl	local02, #2
1d218     ED 20 02 F1 | 	add	local02, __methods__
1d21c     10 21 02 FB | 	rdlong	local02, local02
1d220     0F 15 02 F6 | 	mov	arg02, local01
1d224     F2 24 02 F6 | 	mov	local04, objptr
1d228     11 E5 01 F6 | 	mov	objptr, local03
1d22c     2D 20 62 FD | 	call	local02
1d230     12 E5 01 F6 | 	mov	objptr, local04
1d234     00 FA 4D F2 | 	cmps	result1, #0 wz
1d238     1C 00 90 AD |  if_e	jmp	#LR__2850
1d23c     01 FA 55 F2 | 	cmps	result1, #1 wc
1d240     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
1d244     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1d248     F4 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
1d24c     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1d250     00 FA 05 F6 | 	mov	result1, #0
1d254     04 00 90 FD | 	jmp	#LR__2851
1d258                 | LR__2850
1d258     0F FB 01 F6 | 	mov	result1, local01
1d25c                 | LR__2851
1d25c     A7 F0 03 F6 | 	mov	ptra, fp
1d260     B2 00 A0 FD | 	call	#popregs_
1d264                 | __system__readdir_ret
1d264     2D 00 64 FD | 	ret
1d268                 | 
1d268                 | __system___openraw
1d268     15 4A 05 F6 | 	mov	COUNT_, #21
1d26c     A8 00 A0 FD | 	call	#pushregs_
1d270     09 1F 02 F6 | 	mov	local01, arg01
1d274     0A 21 02 F6 | 	mov	local02, arg02
1d278     0B 23 02 F6 | 	mov	local03, arg03
1d27c     0C 25 02 F6 | 	mov	local04, arg04
1d280     04 26 06 F6 | 	mov	local05, #4
1d284     0F 29 02 F6 | 	mov	local06, local01
1d288     00 2A 06 F6 | 	mov	local07, #0
1d28c     84 E9 05 F1 | 	add	ptr___system__dat__, #388
1d290     F4 2C 02 F6 | 	mov	local08, ptr___system__dat__
1d294     16 13 02 F6 | 	mov	arg01, local08
1d298     10 15 02 F6 | 	mov	arg02, local02
1d29c     00 16 06 F6 | 	mov	arg03, #0
1d2a0     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
1d2a4     A4 C1 BF FD | 	call	#__system____getvfsforfile
1d2a8     FD 2E 0A F6 | 	mov	local09, result1 wz
1d2ac     10 00 90 AD |  if_e	jmp	#LR__2860
1d2b0     20 2E 06 F1 | 	add	local09, #32
1d2b4     17 FB 09 FB | 	rdlong	result1, local09 wz
1d2b8     20 2E 86 F1 | 	sub	local09, #32
1d2bc     14 00 90 5D |  if_ne	jmp	#LR__2861
1d2c0                 | LR__2860
1d2c0     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1d2c4     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
1d2c8     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1d2cc     01 FA 65 F6 | 	neg	result1, #1
1d2d0     8C 02 90 FD | 	jmp	#LR__2874
1d2d4                 | LR__2861
1d2d4     14 13 02 F6 | 	mov	arg01, local06
1d2d8     00 14 06 F6 | 	mov	arg02, #0
1d2dc     34 16 06 F6 | 	mov	arg03, #52
1d2e0     09 31 02 F6 | 	mov	local10, arg01
1d2e4     98 00 A0 FD | 	call	#\builtin_bytefill_
1d2e8     20 2E 06 F1 | 	add	local09, #32
1d2ec     17 33 02 FB | 	rdlong	local11, local09
1d2f0     19 35 02 F6 | 	mov	local12, local11
1d2f4     19 37 02 F6 | 	mov	local13, local11
1d2f8     20 2E 86 F1 | 	sub	local09, #32
1d2fc     1B 39 02 F6 | 	mov	local14, local13
1d300     13 34 46 F7 | 	zerox	local12, #19
1d304     14 38 46 F0 | 	shr	local14, #20
1d308     02 38 66 F0 | 	shl	local14, #2
1d30c     ED 38 02 F1 | 	add	local14, __methods__
1d310     1C 39 02 FB | 	rdlong	local14, local14
1d314     14 3B 02 F6 | 	mov	local15, local06
1d318     16 3D 02 F6 | 	mov	local16, local08
1d31c     11 3F 02 F6 | 	mov	local17, local03
1d320     1D 13 02 F6 | 	mov	arg01, local15
1d324     1E 15 02 F6 | 	mov	arg02, local16
1d328     1F 17 02 F6 | 	mov	arg03, local17
1d32c     F2 40 02 F6 | 	mov	local18, objptr
1d330     1A E5 01 F6 | 	mov	objptr, local12
1d334     2D 38 62 FD | 	call	local14
1d338     20 E5 01 F6 | 	mov	objptr, local18
1d33c     FD 42 0A F6 | 	mov	local19, result1 wz
1d340     04 22 CE 57 |  if_ne	test	local03, #4 wz
1d344     58 00 90 AD |  if_e	jmp	#LR__2862
1d348     24 2E 06 F1 | 	add	local09, #36
1d34c     17 33 02 FB | 	rdlong	local11, local09
1d350     19 35 02 F6 | 	mov	local12, local11
1d354     19 37 02 F6 | 	mov	local13, local11
1d358     24 2E 86 F1 | 	sub	local09, #36
1d35c     1B 39 02 F6 | 	mov	local14, local13
1d360     13 34 46 F7 | 	zerox	local12, #19
1d364     14 38 46 F0 | 	shr	local14, #20
1d368     02 38 66 F0 | 	shl	local14, #2
1d36c     ED 38 02 F1 | 	add	local14, __methods__
1d370     1C 39 02 FB | 	rdlong	local14, local14
1d374     14 3B 02 F6 | 	mov	local15, local06
1d378     16 3D 02 F6 | 	mov	local16, local08
1d37c     12 3F 02 F6 | 	mov	local17, local04
1d380     1D 13 02 F6 | 	mov	arg01, local15
1d384     1E 15 02 F6 | 	mov	arg02, local16
1d388     1F 17 02 F6 | 	mov	arg03, local17
1d38c     F2 40 02 F6 | 	mov	local18, objptr
1d390     1A E5 01 F6 | 	mov	objptr, local12
1d394     2D 38 62 FD | 	call	local14
1d398     20 E5 01 F6 | 	mov	objptr, local18
1d39c     FD 42 02 F6 | 	mov	local19, result1
1d3a0                 | LR__2862
1d3a0     00 42 0E F2 | 	cmp	local19, #0 wz
1d3a4     8C 01 90 5D |  if_ne	jmp	#LR__2872
1d3a8     11 45 02 F6 | 	mov	local20, local03
1d3ac     03 44 0E F5 | 	and	local20, #3 wz
1d3b0     02 26 46 55 |  if_ne	or	local05, #2
1d3b4     01 44 0E F2 | 	cmp	local20, #1 wz
1d3b8     01 26 46 55 |  if_ne	or	local05, #1
1d3bc     20 22 CE F7 | 	test	local03, #32 wz
1d3c0     C0 26 46 55 |  if_ne	or	local05, #192
1d3c4     08 28 06 F1 | 	add	local06, #8
1d3c8     14 27 62 FC | 	wrlong	local05, local06
1d3cc     0C 28 06 F1 | 	add	local06, #12
1d3d0     14 47 0A FB | 	rdlong	local21, local06 wz
1d3d4     14 28 86 F1 | 	sub	local06, #20
1d3d8     18 00 90 5D |  if_ne	jmp	#LR__2863
1d3dc     04 2E 06 F1 | 	add	local09, #4
1d3e0     17 47 02 FB | 	rdlong	local21, local09
1d3e4     04 2E 86 F1 | 	sub	local09, #4
1d3e8     14 28 06 F1 | 	add	local06, #20
1d3ec     14 47 62 FC | 	wrlong	local21, local06
1d3f0     14 28 86 F1 | 	sub	local06, #20
1d3f4                 | LR__2863
1d3f4     18 28 06 F1 | 	add	local06, #24
1d3f8     14 47 0A FB | 	rdlong	local21, local06 wz
1d3fc     18 28 86 F1 | 	sub	local06, #24
1d400     18 00 90 5D |  if_ne	jmp	#LR__2864
1d404     08 2E 06 F1 | 	add	local09, #8
1d408     17 47 02 FB | 	rdlong	local21, local09
1d40c     08 2E 86 F1 | 	sub	local09, #8
1d410     18 28 06 F1 | 	add	local06, #24
1d414     14 47 62 FC | 	wrlong	local21, local06
1d418     18 28 86 F1 | 	sub	local06, #24
1d41c                 | LR__2864
1d41c     24 28 06 F1 | 	add	local06, #36
1d420     14 47 0A FB | 	rdlong	local21, local06 wz
1d424     24 28 86 F1 | 	sub	local06, #36
1d428     17 47 02 AB |  if_e	rdlong	local21, local09
1d42c     24 28 06 A1 |  if_e	add	local06, #36
1d430     14 47 62 AC |  if_e	wrlong	local21, local06
1d434     24 28 86 A1 |  if_e	sub	local06, #36
1d438     28 28 06 F1 | 	add	local06, #40
1d43c     14 47 0A FB | 	rdlong	local21, local06 wz
1d440     28 28 86 F1 | 	sub	local06, #40
1d444     18 00 90 5D |  if_ne	jmp	#LR__2865
1d448     10 2E 06 F1 | 	add	local09, #16
1d44c     17 47 02 FB | 	rdlong	local21, local09
1d450     10 2E 86 F1 | 	sub	local09, #16
1d454     28 28 06 F1 | 	add	local06, #40
1d458     14 47 62 FC | 	wrlong	local21, local06
1d45c     28 28 86 F1 | 	sub	local06, #40
1d460                 | LR__2865
1d460     30 28 06 F1 | 	add	local06, #48
1d464     14 47 0A FB | 	rdlong	local21, local06 wz
1d468     30 28 86 F1 | 	sub	local06, #48
1d46c     18 00 90 5D |  if_ne	jmp	#LR__2866
1d470     0C 2E 06 F1 | 	add	local09, #12
1d474     17 47 02 FB | 	rdlong	local21, local09
1d478     0C 2E 86 F1 | 	sub	local09, #12
1d47c     30 28 06 F1 | 	add	local06, #48
1d480     14 47 62 FC | 	wrlong	local21, local06
1d484     30 28 86 F1 | 	sub	local06, #48
1d488                 | LR__2866
1d488     1C 28 06 F1 | 	add	local06, #28
1d48c     14 47 0A FB | 	rdlong	local21, local06 wz
1d490     1C 28 86 F1 | 	sub	local06, #28
1d494     1C 00 90 5D |  if_ne	jmp	#LR__2867
1d498     01 2A 06 F6 | 	mov	local07, #1
1d49c     F2 12 02 F6 | 	mov	arg01, objptr
1d4a0     00 60 03 FF 
1d4a4     00 12 46 F5 | 	or	arg01, ##113246208
1d4a8     1C 28 06 F1 | 	add	local06, #28
1d4ac     14 13 62 FC | 	wrlong	arg01, local06
1d4b0     1C 28 86 F1 | 	sub	local06, #28
1d4b4                 | LR__2867
1d4b4     20 28 06 F1 | 	add	local06, #32
1d4b8     14 47 0A FB | 	rdlong	local21, local06 wz
1d4bc     20 28 86 F1 | 	sub	local06, #32
1d4c0     1C 00 90 5D |  if_ne	jmp	#LR__2868
1d4c4     01 2A 06 F6 | 	mov	local07, #1
1d4c8     F2 12 02 F6 | 	mov	arg01, objptr
1d4cc     00 68 03 FF 
1d4d0     00 12 46 F5 | 	or	arg01, ##114294784
1d4d4     20 28 06 F1 | 	add	local06, #32
1d4d8     14 13 62 FC | 	wrlong	arg01, local06
1d4dc     20 28 86 F1 | 	sub	local06, #32
1d4e0                 | LR__2868
1d4e0     2C 28 06 F1 | 	add	local06, #44
1d4e4     14 47 0A FB | 	rdlong	local21, local06 wz
1d4e8     2C 28 86 F1 | 	sub	local06, #44
1d4ec     44 00 90 5D |  if_ne	jmp	#LR__2871
1d4f0     14 2E 06 F1 | 	add	local09, #20
1d4f4     17 47 0A FB | 	rdlong	local21, local09 wz
1d4f8     14 2E 86 F1 | 	sub	local09, #20
1d4fc     18 00 90 AD |  if_e	jmp	#LR__2869
1d500     14 2E 06 F1 | 	add	local09, #20
1d504     17 47 02 FB | 	rdlong	local21, local09
1d508     2C 28 06 F1 | 	add	local06, #44
1d50c     14 47 62 FC | 	wrlong	local21, local06
1d510     2C 28 86 F1 | 	sub	local06, #44
1d514     1C 00 90 FD | 	jmp	#LR__2870
1d518                 | LR__2869
1d518     01 2A 06 F6 | 	mov	local07, #1
1d51c     F2 12 02 F6 | 	mov	arg01, objptr
1d520     00 70 03 FF 
1d524     00 12 46 F5 | 	or	arg01, ##115343360
1d528     2C 28 06 F1 | 	add	local06, #44
1d52c     14 13 62 FC | 	wrlong	arg01, local06
1d530     2C 28 86 F1 | 	sub	local06, #44
1d534                 | LR__2870
1d534                 | LR__2871
1d534                 | LR__2872
1d534     00 2A 0E F2 | 	cmp	local07, #0 wz
1d538     14 13 02 56 |  if_ne	mov	arg01, local06
1d53c     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
1d540     00 42 0E F2 | 	cmp	local19, #0 wz
1d544     00 12 06 A6 |  if_e	mov	arg01, #0
1d548     10 00 90 5D |  if_ne	jmp	#LR__2873
1d54c     00 12 4E F2 | 	cmps	arg01, #0 wz
1d550     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1d554     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1d558     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1d55c                 | LR__2873
1d55c     21 FB 01 F6 | 	mov	result1, local19
1d560                 | LR__2874
1d560     A7 F0 03 F6 | 	mov	ptra, fp
1d564     B2 00 A0 FD | 	call	#popregs_
1d568                 | __system___openraw_ret
1d568     2D 00 64 FD | 	ret
1d56c                 | 
1d56c                 | __system___closeraw
1d56c     05 4A 05 F6 | 	mov	COUNT_, #5
1d570     A8 00 A0 FD | 	call	#pushregs_
1d574     09 1F 02 F6 | 	mov	local01, arg01
1d578     00 20 06 F6 | 	mov	local02, #0
1d57c     08 1E 06 F1 | 	add	local01, #8
1d580     0F FB 09 FB | 	rdlong	result1, local01 wz
1d584     08 1E 86 F1 | 	sub	local01, #8
1d588     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1d58c     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
1d590     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1d594     01 FA 65 A6 |  if_e	neg	result1, #1
1d598     A8 00 90 AD |  if_e	jmp	#LR__2882
1d59c     2C 1E 06 F1 | 	add	local01, #44
1d5a0     0F FB 09 FB | 	rdlong	result1, local01 wz
1d5a4     2C 1E 86 F1 | 	sub	local01, #44
1d5a8     38 00 90 AD |  if_e	jmp	#LR__2880
1d5ac     2C 1E 06 F1 | 	add	local01, #44
1d5b0     0F 23 02 FB | 	rdlong	local03, local01
1d5b4     11 25 02 F6 | 	mov	local04, local03
1d5b8     2C 1E 86 F1 | 	sub	local01, #44
1d5bc     13 24 46 F7 | 	zerox	local04, #19
1d5c0     14 22 46 F0 | 	shr	local03, #20
1d5c4     02 22 66 F0 | 	shl	local03, #2
1d5c8     ED 22 02 F1 | 	add	local03, __methods__
1d5cc     11 23 02 FB | 	rdlong	local03, local03
1d5d0     0F 13 02 F6 | 	mov	arg01, local01
1d5d4     F2 26 02 F6 | 	mov	local05, objptr
1d5d8     12 E5 01 F6 | 	mov	objptr, local04
1d5dc     2D 22 62 FD | 	call	local03
1d5e0     13 E5 01 F6 | 	mov	objptr, local05
1d5e4                 | LR__2880
1d5e4     24 1E 06 F1 | 	add	local01, #36
1d5e8     0F 27 0A FB | 	rdlong	local05, local01 wz
1d5ec     24 1E 86 F1 | 	sub	local01, #36
1d5f0     3C 00 90 AD |  if_e	jmp	#LR__2881
1d5f4     24 1E 06 F1 | 	add	local01, #36
1d5f8     0F 23 02 FB | 	rdlong	local03, local01
1d5fc     11 25 02 F6 | 	mov	local04, local03
1d600     24 1E 86 F1 | 	sub	local01, #36
1d604     13 24 46 F7 | 	zerox	local04, #19
1d608     14 22 46 F0 | 	shr	local03, #20
1d60c     02 22 66 F0 | 	shl	local03, #2
1d610     ED 22 02 F1 | 	add	local03, __methods__
1d614     11 23 02 FB | 	rdlong	local03, local03
1d618     0F 13 02 F6 | 	mov	arg01, local01
1d61c     F2 26 02 F6 | 	mov	local05, objptr
1d620     12 E5 01 F6 | 	mov	objptr, local04
1d624     2D 22 62 FD | 	call	local03
1d628     13 E5 01 F6 | 	mov	objptr, local05
1d62c     FD 20 02 F6 | 	mov	local02, result1
1d630                 | LR__2881
1d630     0F 13 02 F6 | 	mov	arg01, local01
1d634     00 14 06 F6 | 	mov	arg02, #0
1d638     34 16 06 F6 | 	mov	arg03, #52
1d63c     98 00 A0 FD | 	call	#\builtin_bytefill_
1d640     10 FB 01 F6 | 	mov	result1, local02
1d644                 | LR__2882
1d644     A7 F0 03 F6 | 	mov	ptra, fp
1d648     B2 00 A0 FD | 	call	#popregs_
1d64c                 | __system___closeraw_ret
1d64c     2D 00 64 FD | 	ret
1d650                 | 
1d650                 | __system___vfs_open_sdcardx
1d650     0B 4A 05 F6 | 	mov	COUNT_, #11
1d654     A8 00 A0 FD | 	call	#pushregs_
1d658     09 23 02 F6 | 	mov	local03, arg01
1d65c     0A 25 02 F6 | 	mov	local04, arg02
1d660     0B 27 02 F6 | 	mov	local05, arg03
1d664     0C 29 02 F6 | 	mov	local06, arg04
1d668     01 00 00 FF 
1d66c     24 12 06 F6 | 	mov	arg01, ##548
1d670     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
1d674     FD 2A 02 F6 | 	mov	local07, result1
1d678     01 00 00 FF 
1d67c     34 12 06 F6 | 	mov	arg01, ##564
1d680     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
1d684     FD 2C 02 F6 | 	mov	local08, result1
1d688     11 19 02 F6 | 	mov	arg04, local03
1d68c     1F 18 C6 F0 | 	sar	arg04, #31
1d690     11 17 02 F6 | 	mov	arg03, local03
1d694     01 12 06 F6 | 	mov	arg01, #1
1d698     00 14 06 F6 | 	mov	arg02, #0
1d69c     48 DC BF FD | 	call	#__system___int64_shl
1d6a0     FD 1E 02 F6 | 	mov	local01, result1
1d6a4     FE 2E 02 F6 | 	mov	local09, result2
1d6a8     12 19 02 F6 | 	mov	arg04, local04
1d6ac     1F 18 C6 F0 | 	sar	arg04, #31
1d6b0     12 17 02 F6 | 	mov	arg03, local04
1d6b4     01 12 06 F6 | 	mov	arg01, #1
1d6b8     00 14 06 F6 | 	mov	arg02, #0
1d6bc     28 DC BF FD | 	call	#__system___int64_shl
1d6c0     FD 1E 42 F5 | 	or	local01, result1
1d6c4     FE 2E 42 F5 | 	or	local09, result2
1d6c8     13 19 02 F6 | 	mov	arg04, local05
1d6cc     1F 18 C6 F0 | 	sar	arg04, #31
1d6d0     13 17 02 F6 | 	mov	arg03, local05
1d6d4     01 12 06 F6 | 	mov	arg01, #1
1d6d8     00 14 06 F6 | 	mov	arg02, #0
1d6dc     08 DC BF FD | 	call	#__system___int64_shl
1d6e0     FD 1E 42 F5 | 	or	local01, result1
1d6e4     FE 2E 42 F5 | 	or	local09, result2
1d6e8     14 19 02 F6 | 	mov	arg04, local06
1d6ec     1F 18 C6 F0 | 	sar	arg04, #31
1d6f0     14 17 02 F6 | 	mov	arg03, local06
1d6f4     01 12 06 F6 | 	mov	arg01, #1
1d6f8     00 14 06 F6 | 	mov	arg02, #0
1d6fc     E8 DB BF FD | 	call	#__system___int64_shl
1d700     17 15 02 F6 | 	mov	arg02, local09
1d704     FD 1E 42 F5 | 	or	local01, result1
1d708     0A FD 41 F5 | 	or	result2, arg02
1d70c     FE 20 02 F6 | 	mov	local02, result2
1d710     0F 13 02 F6 | 	mov	arg01, local01
1d714     10 15 02 F6 | 	mov	arg02, local02
1d718     04 DC BF FD | 	call	#__system___usepins
1d71c     00 FA 0D F2 | 	cmp	result1, #0 wz
1d720     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1d724     F4 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
1d728     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1d72c     00 FA 05 A6 |  if_e	mov	result1, #0
1d730     B4 00 90 AD |  if_e	jmp	#LR__2892
1d734     0F 31 02 F6 | 	mov	local10, local01
1d738     10 2F 02 F6 | 	mov	local09, local02
1d73c     01 00 00 FF 
1d740     08 2A 06 F1 | 	add	local07, ##520
1d744     15 31 62 FC | 	wrlong	local10, local07
1d748     04 2A 06 F1 | 	add	local07, #4
1d74c     15 2F 62 FC | 	wrlong	local09, local07
1d750     01 00 00 FF 
1d754     0C 2A 86 F1 | 	sub	local07, ##524
1d758     14 1B 02 F6 | 	mov	arg05, local06
1d75c     00 12 06 F6 | 	mov	arg01, #0
1d760     11 15 02 F6 | 	mov	arg02, local03
1d764     12 17 02 F6 | 	mov	arg03, local04
1d768     13 19 02 F6 | 	mov	arg04, local05
1d76c     F2 30 02 F6 | 	mov	local10, objptr
1d770     15 E5 01 F6 | 	mov	objptr, local07
1d774     7C 27 B0 FD | 	call	#_fatfs_cc_disk_setpins
1d778     18 E5 01 F6 | 	mov	objptr, local10
1d77c     FD 32 0A F6 | 	mov	local11, result1 wz
1d780     24 00 90 5D |  if_ne	jmp	#LR__2890
1d784     41 01 00 FF 
1d788     2A 14 06 F6 | 	mov	arg02, ##@LR__4287
1d78c     16 13 02 F6 | 	mov	arg01, local08
1d790     00 16 06 F6 | 	mov	arg03, #0
1d794     F2 32 02 F6 | 	mov	local11, objptr
1d798     15 E5 01 F6 | 	mov	objptr, local07
1d79c     AC 5E B0 FD | 	call	#_fatfs_cc_f_mount
1d7a0     19 E5 01 F6 | 	mov	objptr, local11
1d7a4     FD 32 02 F6 | 	mov	local11, result1
1d7a8                 | LR__2890
1d7a8     00 32 0E F2 | 	cmp	local11, #0 wz
1d7ac     24 00 90 AD |  if_e	jmp	#LR__2891
1d7b0     0F 13 02 F6 | 	mov	arg01, local01
1d7b4     10 15 02 F6 | 	mov	arg02, local02
1d7b8     B8 DB BF FD | 	call	#__system___freepins
1d7bc     19 13 6A F6 | 	neg	arg01, local11 wz
1d7c0     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1d7c4     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1d7c8     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1d7cc     00 FA 05 F6 | 	mov	result1, #0
1d7d0     14 00 90 FD | 	jmp	#LR__2892
1d7d4                 | LR__2891
1d7d4     15 13 02 F6 | 	mov	arg01, local07
1d7d8     F2 32 02 F6 | 	mov	local11, objptr
1d7dc     15 E5 01 F6 | 	mov	objptr, local07
1d7e0     48 9B B0 FD | 	call	#_fatfs_cc_get_vfs
1d7e4     19 E5 01 F6 | 	mov	objptr, local11
1d7e8                 | LR__2892
1d7e8     A7 F0 03 F6 | 	mov	ptra, fp
1d7ec     B2 00 A0 FD | 	call	#popregs_
1d7f0                 | __system___vfs_open_sdcardx_ret
1d7f0     2D 00 64 FD | 	ret
1d7f4                 | 
1d7f4                 | __system____default_getc
1d7f4     03 4A 05 F6 | 	mov	COUNT_, #3
1d7f8     A8 00 A0 FD | 	call	#pushregs_
1d7fc     09 1F 02 F6 | 	mov	local01, arg01
1d800     0F 21 02 FB | 	rdlong	local02, local01
1d804     08 20 06 F1 | 	add	local02, #8
1d808     10 23 02 FB | 	rdlong	local03, local02
1d80c     02 22 CE F7 | 	test	local03, #2 wz
1d810     0F 13 02 56 |  if_ne	mov	arg01, local01
1d814     00 01 B0 5D |  if_ne	call	#__system____default_flush
1d818     10 23 02 FB | 	rdlong	local03, local02
1d81c     01 22 46 F5 | 	or	local03, #1
1d820     10 23 62 FC | 	wrlong	local03, local02
1d824     08 20 86 F1 | 	sub	local02, #8
1d828     10 23 0A FB | 	rdlong	local03, local02 wz
1d82c     0C 00 90 5D |  if_ne	jmp	#LR__2900
1d830     0F 13 02 F6 | 	mov	arg01, local01
1d834     64 16 B0 FD | 	call	#__system____default_filbuf
1d838     FD 22 02 F6 | 	mov	local03, result1
1d83c                 | LR__2900
1d83c     01 22 56 F2 | 	cmps	local03, #1 wc
1d840     01 FA 65 C6 |  if_b	neg	result1, #1
1d844     1C 00 90 CD |  if_b	jmp	#LR__2901
1d848     01 22 86 F1 | 	sub	local03, #1
1d84c     10 23 62 FC | 	wrlong	local03, local02
1d850     04 20 06 F1 | 	add	local02, #4
1d854     10 23 02 FB | 	rdlong	local03, local02
1d858     11 FB C1 FA | 	rdbyte	result1, local03
1d85c     01 22 06 F1 | 	add	local03, #1
1d860     10 23 62 FC | 	wrlong	local03, local02
1d864                 | LR__2901
1d864     A7 F0 03 F6 | 	mov	ptra, fp
1d868     B2 00 A0 FD | 	call	#popregs_
1d86c                 | __system____default_getc_ret
1d86c     2D 00 64 FD | 	ret
1d870                 | 
1d870                 | __system____default_putc
1d870     06 4A 05 F6 | 	mov	COUNT_, #6
1d874     A8 00 A0 FD | 	call	#pushregs_
1d878     09 1F 02 F6 | 	mov	local01, arg01
1d87c     0A 21 02 F6 | 	mov	local02, arg02
1d880     10 23 02 FB | 	rdlong	local03, local02
1d884     08 22 06 F1 | 	add	local03, #8
1d888     11 FB 01 FB | 	rdlong	result1, local03
1d88c     01 FA CD F7 | 	test	result1, #1 wz
1d890     10 13 02 56 |  if_ne	mov	arg01, local02
1d894     80 00 B0 5D |  if_ne	call	#__system____default_flush
1d898     11 25 02 FB | 	rdlong	local04, local03
1d89c     02 24 46 F5 | 	or	local04, #2
1d8a0     11 25 62 FC | 	wrlong	local04, local03
1d8a4     08 22 86 F1 | 	sub	local03, #8
1d8a8     11 27 02 FB | 	rdlong	local05, local03
1d8ac     10 22 06 F1 | 	add	local03, #16
1d8b0     11 15 02 FB | 	rdlong	arg02, local03
1d8b4     10 22 86 F1 | 	sub	local03, #16
1d8b8     13 FB 01 F6 | 	mov	result1, local05
1d8bc     0A FB 01 F1 | 	add	result1, arg02
1d8c0     FD 1E 42 FC | 	wrbyte	local01, result1
1d8c4     0F 1F E2 F8 | 	getbyte	local01, local01, #0
1d8c8     01 26 06 F1 | 	add	local05, #1
1d8cc     11 27 62 FC | 	wrlong	local05, local03
1d8d0     06 20 06 F1 | 	add	local02, #6
1d8d4     10 29 EA FA | 	rdword	local06, local02 wz
1d8d8     06 20 86 F1 | 	sub	local02, #6
1d8dc     0C 22 06 51 |  if_ne	add	local03, #12
1d8e0     11 25 02 5B |  if_ne	rdlong	local04, local03
1d8e4     12 27 0A 52 |  if_ne	cmp	local05, local04 wz
1d8e8     0C 00 90 AD |  if_e	jmp	#LR__2910
1d8ec     0A 1E 0E F2 | 	cmp	local01, #10 wz
1d8f0     01 28 0E A2 |  if_e	cmp	local06, #1 wz
1d8f4     10 00 90 5D |  if_ne	jmp	#LR__2911
1d8f8                 | LR__2910
1d8f8     10 13 02 F6 | 	mov	arg01, local02
1d8fc     18 00 B0 FD | 	call	#__system____default_flush
1d900     00 FA 0D F2 | 	cmp	result1, #0 wz
1d904     01 1E 66 56 |  if_ne	neg	local01, #1
1d908                 | LR__2911
1d908     0F FB 01 F6 | 	mov	result1, local01
1d90c     A7 F0 03 F6 | 	mov	ptra, fp
1d910     B2 00 A0 FD | 	call	#popregs_
1d914                 | __system____default_putc_ret
1d914     2D 00 64 FD | 	ret
1d918                 | 
1d918                 | __system____default_flush
1d918     06 4A 05 F6 | 	mov	COUNT_, #6
1d91c     A8 00 A0 FD | 	call	#pushregs_
1d920     09 1F 02 F6 | 	mov	local01, arg01
1d924     0F 21 02 FB | 	rdlong	local02, local01
1d928     10 23 02 FB | 	rdlong	local03, local02
1d92c     08 20 06 F1 | 	add	local02, #8
1d930     10 FB 01 FB | 	rdlong	result1, local02
1d934     08 20 86 F1 | 	sub	local02, #8
1d938     02 FA CD F7 | 	test	result1, #2 wz
1d93c     D0 00 90 AD |  if_e	jmp	#LR__2922
1d940     01 22 56 F2 | 	cmps	local03, #1 wc
1d944     20 01 90 CD |  if_b	jmp	#LR__2924
1d948     08 1E 06 F1 | 	add	local01, #8
1d94c     0F FB 01 FB | 	rdlong	result1, local01
1d950     08 1E 86 F1 | 	sub	local01, #8
1d954     40 FA CD F7 | 	test	result1, #64 wz
1d958     68 00 90 AD |  if_e	jmp	#LR__2921
1d95c     08 1E 06 F1 | 	add	local01, #8
1d960     0F 17 02 FB | 	rdlong	arg03, local01
1d964     08 1E 86 F1 | 	sub	local01, #8
1d968     80 16 CE F7 | 	test	arg03, #128 wz
1d96c     54 00 90 AD |  if_e	jmp	#LR__2920
1d970     30 1E 06 F1 | 	add	local01, #48
1d974     0F 25 02 FB | 	rdlong	local04, local01
1d978     12 27 02 F6 | 	mov	local05, local04
1d97c     30 1E 86 F1 | 	sub	local01, #48
1d980     13 26 46 F7 | 	zerox	local05, #19
1d984     14 24 46 F0 | 	shr	local04, #20
1d988     02 24 66 F0 | 	shl	local04, #2
1d98c     ED 24 02 F1 | 	add	local04, __methods__
1d990     12 25 02 FB | 	rdlong	local04, local04
1d994     0F 13 02 F6 | 	mov	arg01, local01
1d998     00 14 06 F6 | 	mov	arg02, #0
1d99c     02 16 06 F6 | 	mov	arg03, #2
1d9a0     F2 28 02 F6 | 	mov	local06, objptr
1d9a4     13 E5 01 F6 | 	mov	objptr, local05
1d9a8     2D 24 62 FD | 	call	local04
1d9ac     14 E5 01 F6 | 	mov	objptr, local06
1d9b0     08 1E 06 F1 | 	add	local01, #8
1d9b4     0F 29 02 FB | 	rdlong	local06, local01
1d9b8     80 28 26 F5 | 	andn	local06, #128
1d9bc     0F 29 62 FC | 	wrlong	local06, local01
1d9c0     08 1E 86 F1 | 	sub	local01, #8
1d9c4                 | LR__2920
1d9c4                 | LR__2921
1d9c4     18 1E 06 F1 | 	add	local01, #24
1d9c8     0F 25 02 FB | 	rdlong	local04, local01
1d9cc     12 27 02 F6 | 	mov	local05, local04
1d9d0     18 1E 86 F1 | 	sub	local01, #24
1d9d4     13 26 46 F7 | 	zerox	local05, #19
1d9d8     14 24 46 F0 | 	shr	local04, #20
1d9dc     02 24 66 F0 | 	shl	local04, #2
1d9e0     ED 24 02 F1 | 	add	local04, __methods__
1d9e4     12 25 02 FB | 	rdlong	local04, local04
1d9e8     10 20 06 F1 | 	add	local02, #16
1d9ec     10 15 02 FB | 	rdlong	arg02, local02
1d9f0     10 20 86 F1 | 	sub	local02, #16
1d9f4     0F 13 02 F6 | 	mov	arg01, local01
1d9f8     11 17 02 F6 | 	mov	arg03, local03
1d9fc     F2 28 02 F6 | 	mov	local06, objptr
1da00     13 E5 01 F6 | 	mov	objptr, local05
1da04     2D 24 62 FD | 	call	local04
1da08     14 E5 01 F6 | 	mov	objptr, local06
1da0c     58 00 90 FD | 	jmp	#LR__2924
1da10                 | LR__2922
1da10     08 20 06 F1 | 	add	local02, #8
1da14     10 29 02 FB | 	rdlong	local06, local02
1da18     08 20 86 F1 | 	sub	local02, #8
1da1c     01 28 CE F7 | 	test	local06, #1 wz
1da20     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
1da24     40 00 90 AD |  if_e	jmp	#LR__2923
1da28     30 1E 06 F1 | 	add	local01, #48
1da2c     0F 25 02 FB | 	rdlong	local04, local01
1da30     12 27 02 F6 | 	mov	local05, local04
1da34     30 1E 86 F1 | 	sub	local01, #48
1da38     13 26 46 F7 | 	zerox	local05, #19
1da3c     14 24 46 F0 | 	shr	local04, #20
1da40     02 24 66 F0 | 	shl	local04, #2
1da44     ED 24 02 F1 | 	add	local04, __methods__
1da48     12 25 02 FB | 	rdlong	local04, local04
1da4c     0F 13 02 F6 | 	mov	arg01, local01
1da50     11 15 62 F6 | 	neg	arg02, local03
1da54     01 16 06 F6 | 	mov	arg03, #1
1da58     F2 28 02 F6 | 	mov	local06, objptr
1da5c     13 E5 01 F6 | 	mov	objptr, local05
1da60     2D 24 62 FD | 	call	local04
1da64     14 E5 01 F6 | 	mov	objptr, local06
1da68                 | LR__2923
1da68                 | LR__2924
1da68     10 01 68 FC | 	wrlong	#0, local02
1da6c     04 20 06 F1 | 	add	local02, #4
1da70     10 01 68 FC | 	wrlong	#0, local02
1da74     04 20 06 F1 | 	add	local02, #4
1da78     10 01 68 FC | 	wrlong	#0, local02
1da7c     00 FA 05 F6 | 	mov	result1, #0
1da80     A7 F0 03 F6 | 	mov	ptra, fp
1da84     B2 00 A0 FD | 	call	#popregs_
1da88                 | __system____default_flush_ret
1da88     2D 00 64 FD | 	ret
1da8c                 | 
1da8c                 | __system____default_buffer_init
1da8c     02 4A 05 F6 | 	mov	COUNT_, #2
1da90     A8 00 A0 FD | 	call	#pushregs_
1da94     09 1F 02 F6 | 	mov	local01, arg01
1da98     0F 21 02 FB | 	rdlong	local02, local01
1da9c     0F 13 02 F6 | 	mov	arg01, local01
1daa0     F8 02 B0 FD | 	call	#__system___isatty
1daa4     00 FA 0D F2 | 	cmp	result1, #0 wz
1daa8     06 1E 06 51 |  if_ne	add	local01, #6
1daac     0F 0B 58 5C |  if_ne	wrword	#5, local01
1dab0     06 1E 06 A1 |  if_e	add	local01, #6
1dab4     0F 0D 58 AC |  if_e	wrword	#6, local01
1dab8     14 20 06 F1 | 	add	local02, #20
1dabc     10 1F 02 F6 | 	mov	local01, local02
1dac0     04 20 86 F1 | 	sub	local02, #4
1dac4     10 1F 62 FC | 	wrlong	local01, local02
1dac8     04 20 86 F1 | 	sub	local02, #4
1dacc     02 00 80 FF 
1dad0     10 01 68 FC | 	wrlong	##1024, local02
1dad4     00 FA 05 F6 | 	mov	result1, #0
1dad8     A7 F0 03 F6 | 	mov	ptra, fp
1dadc     B2 00 A0 FD | 	call	#popregs_
1dae0                 | __system____default_buffer_init_ret
1dae0     2D 00 64 FD | 	ret
1dae4                 | 
1dae4                 | __system__stat
1dae4     04 4A 05 F6 | 	mov	COUNT_, #4
1dae8     A8 00 A0 FD | 	call	#pushregs_
1daec     0A 1F 02 F6 | 	mov	local01, arg02
1daf0     84 E9 05 F1 | 	add	ptr___system__dat__, #388
1daf4     F4 20 02 F6 | 	mov	local02, ptr___system__dat__
1daf8     09 15 02 F6 | 	mov	arg02, arg01
1dafc     10 13 02 F6 | 	mov	arg01, local02
1db00     00 16 06 F6 | 	mov	arg03, #0
1db04     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
1db08     40 B9 BF FD | 	call	#__system____getvfsforfile
1db0c     FD 22 0A F6 | 	mov	local03, result1 wz
1db10     10 00 90 AD |  if_e	jmp	#LR__2930
1db14     34 22 06 F1 | 	add	local03, #52
1db18     11 17 0A FB | 	rdlong	arg03, local03 wz
1db1c     34 22 86 F1 | 	sub	local03, #52
1db20     14 00 90 5D |  if_ne	jmp	#LR__2931
1db24                 | LR__2930
1db24     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1db28     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
1db2c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1db30     01 FA 65 F6 | 	neg	result1, #1
1db34     68 00 90 FD | 	jmp	#LR__2932
1db38                 | LR__2931
1db38     0F 13 02 F6 | 	mov	arg01, local01
1db3c     00 14 06 F6 | 	mov	arg02, #0
1db40     30 16 06 F6 | 	mov	arg03, #48
1db44     09 25 02 F6 | 	mov	local04, arg01
1db48     98 00 A0 FD | 	call	#\builtin_bytefill_
1db4c     12 FB 01 F6 | 	mov	result1, local04
1db50     10 13 CA FA | 	rdbyte	arg01, local02 wz
1db54     08 1E 06 A1 |  if_e	add	local01, #8
1db58     08 00 80 AF 
1db5c     0F FF 6B AC |  if_e	wrlong	##4607, local01
1db60     00 FA 05 A6 |  if_e	mov	result1, #0
1db64     38 00 90 AD |  if_e	jmp	#LR__2932
1db68     34 22 06 F1 | 	add	local03, #52
1db6c     11 23 02 FB | 	rdlong	local03, local03
1db70     11 25 02 F6 | 	mov	local04, local03
1db74     13 22 46 F7 | 	zerox	local03, #19
1db78     14 24 46 F0 | 	shr	local04, #20
1db7c     02 24 66 F0 | 	shl	local04, #2
1db80     ED 24 02 F1 | 	add	local04, __methods__
1db84     12 25 02 FB | 	rdlong	local04, local04
1db88     10 13 02 F6 | 	mov	arg01, local02
1db8c     0F 15 02 F6 | 	mov	arg02, local01
1db90     F2 20 02 F6 | 	mov	local02, objptr
1db94     11 E5 01 F6 | 	mov	objptr, local03
1db98     2D 24 62 FD | 	call	local04
1db9c     10 E5 01 F6 | 	mov	objptr, local02
1dba0                 | LR__2932
1dba0     A7 F0 03 F6 | 	mov	ptra, fp
1dba4     B2 00 A0 FD | 	call	#popregs_
1dba8                 | __system__stat_ret
1dba8     2D 00 64 FD | 	ret
1dbac                 | 
1dbac                 | __system__read
1dbac     0A 12 16 F2 | 	cmp	arg01, #10 wc
1dbb0     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1dbb4     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1dbb8     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1dbbc     01 FA 65 36 |  if_ae	neg	result1, #1
1dbc0     20 00 90 3D |  if_ae	jmp	#LR__2940
1dbc4     34 12 06 FD | 	qmul	arg01, #52
1dbc8     02 00 00 FF 
1dbcc     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
1dbd0     18 12 62 FD | 	getqx	arg01
1dbd4     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
1dbd8     02 00 00 FF 
1dbdc     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
1dbe0     D0 0F B0 FD | 	call	#__system___vfsread
1dbe4                 | LR__2940
1dbe4                 | __system__read_ret
1dbe4     2D 00 64 FD | 	ret
1dbe8                 | 
1dbe8                 | __system__close
1dbe8     0A 12 16 F2 | 	cmp	arg01, #10 wc
1dbec     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1dbf0     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1dbf4     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1dbf8     01 FA 65 36 |  if_ae	neg	result1, #1
1dbfc     20 00 90 3D |  if_ae	jmp	#LR__2950
1dc00     34 12 06 FD | 	qmul	arg01, #52
1dc04     02 00 00 FF 
1dc08     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
1dc0c     18 12 62 FD | 	getqx	arg01
1dc10     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
1dc14     02 00 00 FF 
1dc18     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
1dc1c     4C F9 BF FD | 	call	#__system___closeraw
1dc20                 | LR__2950
1dc20                 | __system__close_ret
1dc20     2D 00 64 FD | 	ret
1dc24                 | 
1dc24                 | __system__lseek
1dc24     06 4A 05 F6 | 	mov	COUNT_, #6
1dc28     A8 00 A0 FD | 	call	#pushregs_
1dc2c     0A 12 16 F2 | 	cmp	arg01, #10 wc
1dc30     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1dc34     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1dc38     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1dc3c     01 FA 65 36 |  if_ae	neg	result1, #1
1dc40     C4 00 90 3D |  if_ae	jmp	#LR__2961
1dc44     34 12 06 FD | 	qmul	arg01, #52
1dc48     02 00 00 FF 
1dc4c     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
1dc50     18 1E 62 FD | 	getqx	local01
1dc54     F4 1E 02 F1 | 	add	local01, ptr___system__dat__
1dc58     30 1E 06 F1 | 	add	local01, #48
1dc5c     0F 13 0A FB | 	rdlong	arg01, local01 wz
1dc60     30 1E 86 F1 | 	sub	local01, #48
1dc64     02 00 00 FF 
1dc68     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
1dc6c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1dc70     F4 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
1dc74     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1dc78     01 FA 65 A6 |  if_e	neg	result1, #1
1dc7c     88 00 90 AD |  if_e	jmp	#LR__2961
1dc80     08 1E 06 F1 | 	add	local01, #8
1dc84     0F 21 02 FB | 	rdlong	local02, local01
1dc88     08 1E 86 F1 | 	sub	local01, #8
1dc8c     40 20 CE F7 | 	test	local02, #64 wz
1dc90     08 1E 06 51 |  if_ne	add	local01, #8
1dc94     0F 21 02 5B |  if_ne	rdlong	local02, local01
1dc98     80 20 46 55 |  if_ne	or	local02, #128
1dc9c     0F 21 62 5C |  if_ne	wrlong	local02, local01
1dca0     08 1E 86 51 |  if_ne	sub	local01, #8
1dca4     30 1E 06 F1 | 	add	local01, #48
1dca8     0F 23 02 FB | 	rdlong	local03, local01
1dcac     11 25 02 F6 | 	mov	local04, local03
1dcb0     30 1E 86 F1 | 	sub	local01, #48
1dcb4     13 24 46 F7 | 	zerox	local04, #19
1dcb8     14 22 46 F0 | 	shr	local03, #20
1dcbc     02 22 66 F0 | 	shl	local03, #2
1dcc0     ED 22 02 F1 | 	add	local03, __methods__
1dcc4     11 23 02 FB | 	rdlong	local03, local03
1dcc8     0F 13 02 F6 | 	mov	arg01, local01
1dccc     F2 26 02 F6 | 	mov	local05, objptr
1dcd0     12 E5 01 F6 | 	mov	objptr, local04
1dcd4     2D 22 62 FD | 	call	local03
1dcd8     13 E5 01 F6 | 	mov	objptr, local05
1dcdc     FD 28 02 F6 | 	mov	local06, result1
1dce0     00 28 56 F2 | 	cmps	local06, #0 wc
1dce4     1C 00 90 3D |  if_ae	jmp	#LR__2960
1dce8     14 13 6A F6 | 	neg	arg01, local06 wz
1dcec     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1dcf0     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1dcf4     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1dcf8     01 FA 65 56 |  if_ne	neg	result1, #1
1dcfc     00 FA 05 A6 |  if_e	mov	result1, #0
1dd00     04 00 90 FD | 	jmp	#LR__2961
1dd04                 | LR__2960
1dd04     14 FB 01 F6 | 	mov	result1, local06
1dd08                 | LR__2961
1dd08     A7 F0 03 F6 | 	mov	ptra, fp
1dd0c     B2 00 A0 FD | 	call	#popregs_
1dd10                 | __system__lseek_ret
1dd10     2D 00 64 FD | 	ret
1dd14                 | 
1dd14                 | __system___ioctl
1dd14     03 4A 05 F6 | 	mov	COUNT_, #3
1dd18     A8 00 A0 FD | 	call	#pushregs_
1dd1c     00 12 4E F2 | 	cmps	arg01, #0 wz
1dd20     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1dd24     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
1dd28     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1dd2c     01 FA 65 A6 |  if_e	neg	result1, #1
1dd30     5C 00 90 AD |  if_e	jmp	#LR__2971
1dd34     28 12 06 F1 | 	add	arg01, #40
1dd38     09 1F 02 FB | 	rdlong	local01, arg01
1dd3c     0F 21 02 F6 | 	mov	local02, local01
1dd40     28 12 86 F1 | 	sub	arg01, #40
1dd44     13 20 46 F7 | 	zerox	local02, #19
1dd48     14 1E 46 F0 | 	shr	local01, #20
1dd4c     02 1E 66 F0 | 	shl	local01, #2
1dd50     ED 1E 02 F1 | 	add	local01, __methods__
1dd54     0F 1F 02 FB | 	rdlong	local01, local01
1dd58     F2 22 02 F6 | 	mov	local03, objptr
1dd5c     10 E5 01 F6 | 	mov	objptr, local02
1dd60     2D 1E 62 FD | 	call	local01
1dd64     11 E5 01 F6 | 	mov	objptr, local03
1dd68     FD 12 0A F6 | 	mov	arg01, result1 wz
1dd6c     1C 00 90 AD |  if_e	jmp	#LR__2970
1dd70     00 12 4E F2 | 	cmps	arg01, #0 wz
1dd74     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1dd78     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1dd7c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1dd80     01 FA 65 56 |  if_ne	neg	result1, #1
1dd84     00 FA 05 A6 |  if_e	mov	result1, #0
1dd88     04 00 90 FD | 	jmp	#LR__2971
1dd8c                 | LR__2970
1dd8c     00 FA 05 F6 | 	mov	result1, #0
1dd90                 | LR__2971
1dd90     A7 F0 03 F6 | 	mov	ptra, fp
1dd94     B2 00 A0 FD | 	call	#popregs_
1dd98                 | __system___ioctl_ret
1dd98     2D 00 64 FD | 	ret
1dd9c                 | 
1dd9c                 | __system___isatty
1dd9c     00 4A 05 F6 | 	mov	COUNT_, #0
1dda0     A8 00 A0 FD | 	call	#pushregs_
1dda4     0C F0 07 F1 | 	add	ptra, #12
1dda8     04 4E 05 F1 | 	add	fp, #4
1ddac     A7 12 62 FC | 	wrlong	arg01, fp
1ddb0     04 4E 05 F1 | 	add	fp, #4
1ddb4     A7 16 02 F6 | 	mov	arg03, fp
1ddb8     08 4E 85 F1 | 	sub	fp, #8
1ddbc     00 15 06 F6 | 	mov	arg02, #256
1ddc0     50 FF BF FD | 	call	#__system___ioctl
1ddc4     00 FA 0D F2 | 	cmp	result1, #0 wz
1ddc8     01 FA 05 A6 |  if_e	mov	result1, #1
1ddcc     00 FA 05 56 |  if_ne	mov	result1, #0
1ddd0     A7 F0 03 F6 | 	mov	ptra, fp
1ddd4     B2 00 A0 FD | 	call	#popregs_
1ddd8                 | __system___isatty_ret
1ddd8     2D 00 64 FD | 	ret
1dddc                 | 
1dddc                 | __system____getftab
1dddc     0A 12 16 F2 | 	cmp	arg01, #10 wc
1dde0     34 12 06 CD |  if_b	qmul	arg01, #52
1dde4     00 FA 05 36 |  if_ae	mov	result1, #0
1dde8     02 00 00 CF 
1ddec     20 E9 05 C1 |  if_b	add	ptr___system__dat__, ##1312
1ddf0     18 FA 61 CD |  if_b	getqx	result1
1ddf4     F4 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
1ddf8     02 00 00 CF 
1ddfc     20 E9 85 C1 |  if_b	sub	ptr___system__dat__, ##1312
1de00                 | __system____getftab_ret
1de00     2D 00 64 FD | 	ret
1de04                 | 
1de04                 | __system__strncpy
1de04     09 01 02 F6 | 	mov	_var01, arg01
1de08                 | LR__2980
1de08     01 16 86 F1 | 	sub	arg03, #1
1de0c     00 16 56 F2 | 	cmps	arg03, #0 wc
1de10     18 00 90 CD |  if_b	jmp	#LR__2981
1de14     0A FB C1 FA | 	rdbyte	result1, arg02
1de18     00 FB 41 FC | 	wrbyte	result1, _var01
1de1c     01 14 06 F1 | 	add	arg02, #1
1de20     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1de24     01 00 06 F1 | 	add	_var01, #1
1de28     DC FF 9F 5D |  if_ne	jmp	#LR__2980
1de2c                 | LR__2981
1de2c     97 0C 48 FB | 	callpa	#(@LR__2983-@LR__2982)>>2,fcache_load_ptr_
1de30                 | LR__2982
1de30     01 16 86 F1 | 	sub	arg03, #1
1de34     00 16 56 F2 | 	cmps	arg03, #0 wc
1de38     00 03 02 36 |  if_ae	mov	_var02, _var01
1de3c     01 00 06 31 |  if_ae	add	_var01, #1
1de40     01 01 48 3C |  if_ae	wrbyte	#0, _var02
1de44     E8 FF 9F 3D |  if_ae	jmp	#LR__2982
1de48                 | LR__2983
1de48     09 FB 01 F6 | 	mov	result1, arg01
1de4c                 | __system__strncpy_ret
1de4c     2D 00 64 FD | 	ret
1de50                 | 
1de50                 | __system__strncat
1de50     00 14 4E F2 | 	cmps	arg02, #0 wz
1de54     50 00 90 AD |  if_e	jmp	#LR__2994
1de58     01 16 16 F2 | 	cmp	arg03, #1 wc
1de5c     48 00 90 CD |  if_b	jmp	#LR__2994
1de60     09 01 02 F6 | 	mov	_var01, arg01
1de64     97 1E 48 FB | 	callpa	#(@LR__2992-@LR__2990)>>2,fcache_load_ptr_
1de68                 | LR__2990
1de68     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1de6c     01 00 06 51 |  if_ne	add	_var01, #1
1de70     F4 FF 9F 5D |  if_ne	jmp	#LR__2990
1de74     0B 03 02 F6 | 	mov	_var02, arg03
1de78                 | LR__2991
1de78     0A 05 C2 FA | 	rdbyte	_var03, arg02
1de7c     02 07 02 F6 | 	mov	_var04, _var03
1de80     07 06 4E F7 | 	zerox	_var04, #7 wz
1de84     01 14 06 F1 | 	add	arg02, #1
1de88     18 00 90 AD |  if_e	jmp	#LR__2993
1de8c     01 02 86 F1 | 	sub	_var02, #1
1de90     00 02 56 F2 | 	cmps	_var02, #0 wc
1de94     00 07 02 36 |  if_ae	mov	_var04, _var01
1de98     01 00 06 31 |  if_ae	add	_var01, #1
1de9c     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
1dea0     D4 FF 9F 3D |  if_ae	jmp	#LR__2991
1dea4                 | LR__2992
1dea4                 | LR__2993
1dea4     00 01 48 FC | 	wrbyte	#0, _var01
1dea8                 | LR__2994
1dea8     09 FB 01 F6 | 	mov	result1, arg01
1deac                 | __system__strncat_ret
1deac     2D 00 64 FD | 	ret
1deb0                 | 
1deb0                 | __system__strncmp
1deb0     09 01 0A F6 | 	mov	_var01, arg01 wz
1deb4     14 00 90 5D |  if_ne	jmp	#LR__3000
1deb8     00 14 0E F2 | 	cmp	arg02, #0 wz
1debc     01 02 66 56 |  if_ne	neg	_var02, #1
1dec0     00 02 06 A6 |  if_e	mov	_var02, #0
1dec4     01 FB 01 F6 | 	mov	result1, _var02
1dec8     74 00 90 FD | 	jmp	#__system__strncmp_ret
1decc                 | LR__3000
1decc     00 14 0E F2 | 	cmp	arg02, #0 wz
1ded0     01 FA 05 A6 |  if_e	mov	result1, #1
1ded4     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1ded8     0B 05 02 F6 | 	mov	_var03, arg03
1dedc     97 16 48 FB | 	callpa	#(@LR__3002-@LR__3001)>>2,fcache_load_ptr_
1dee0                 | LR__3001
1dee0     00 07 C2 FA | 	rdbyte	_var04, _var01
1dee4     0A 09 02 F6 | 	mov	_var05, arg02
1dee8     04 0B C2 FA | 	rdbyte	_var06, _var05
1deec     01 04 86 F1 | 	sub	_var03, #1
1def0     00 04 56 F2 | 	cmps	_var03, #0 wc
1def4     01 00 06 F1 | 	add	_var01, #1
1def8     01 14 06 F1 | 	add	arg02, #1
1defc     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
1df00     08 00 90 2D |  if_nc_and_z	jmp	#LR__3003
1df04     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
1df08     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3001
1df0c                 | LR__3002
1df0c                 | LR__3003
1df0c     00 04 56 F2 | 	cmps	_var03, #0 wc
1df10     00 FA 05 C6 |  if_b	mov	result1, #0
1df14     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
1df18     05 07 0A F2 | 	cmp	_var04, _var06 wz
1df1c     00 FA 05 A6 |  if_e	mov	result1, #0
1df20     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1df24     00 06 0E F2 | 	cmp	_var04, #0 wz
1df28     01 FA 65 A6 |  if_e	neg	result1, #1
1df2c     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1df30     00 0A 0E F2 | 	cmp	_var06, #0 wz
1df34     01 FA 05 A6 |  if_e	mov	result1, #1
1df38     03 FB 01 56 |  if_ne	mov	result1, _var04
1df3c     05 FB 81 51 |  if_ne	sub	result1, _var06
1df40                 | __system__strncmp_ret
1df40     2D 00 64 FD | 	ret
1df44                 | 
1df44                 | __system____root_opendir
1df44     64 E8 05 F1 | 	add	ptr___system__dat__, #100
1df48     04 12 06 F1 | 	add	arg01, #4
1df4c     09 E9 61 FC | 	wrlong	ptr___system__dat__, arg01
1df50     00 FA 05 F6 | 	mov	result1, #0
1df54     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
1df58                 | __system____root_opendir_ret
1df58     2D 00 64 FD | 	ret
1df5c                 | 
1df5c                 | __system____root_readdir
1df5c     03 4A 05 F6 | 	mov	COUNT_, #3
1df60     A8 00 A0 FD | 	call	#pushregs_
1df64     09 1F 02 F6 | 	mov	local01, arg01
1df68     0A 21 02 F6 | 	mov	local02, arg02
1df6c     04 1E 06 F1 | 	add	local01, #4
1df70     0F 23 02 FB | 	rdlong	local03, local01
1df74     04 1E 86 F1 | 	sub	local01, #4
1df78                 | LR__3010
1df78     74 E8 05 F1 | 	add	ptr___system__dat__, #116
1df7c     F4 22 0A F2 | 	cmp	local03, ptr___system__dat__ wz
1df80     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
1df84     01 FA 65 A6 |  if_e	neg	result1, #1
1df88     48 00 90 AD |  if_e	jmp	#LR__3011
1df8c     11 17 0A FB | 	rdlong	arg03, local03 wz
1df90     04 22 06 A1 |  if_e	add	local03, #4
1df94     E0 FF 9F AD |  if_e	jmp	#LR__3010
1df98     11 15 02 FB | 	rdlong	arg02, local03
1df9c     01 14 06 F1 | 	add	arg02, #1
1dfa0     10 13 02 F6 | 	mov	arg01, local02
1dfa4     40 16 06 F6 | 	mov	arg03, #64
1dfa8     58 FE BF FD | 	call	#__system__strncpy
1dfac     50 20 06 F1 | 	add	local02, #80
1dfb0     10 03 48 FC | 	wrbyte	#1, local02
1dfb4     08 20 86 F1 | 	sub	local02, #8
1dfb8     10 01 68 FC | 	wrlong	#0, local02
1dfbc     04 20 06 F1 | 	add	local02, #4
1dfc0     10 01 68 FC | 	wrlong	#0, local02
1dfc4     04 22 06 F1 | 	add	local03, #4
1dfc8     04 1E 06 F1 | 	add	local01, #4
1dfcc     0F 23 62 FC | 	wrlong	local03, local01
1dfd0     00 FA 05 F6 | 	mov	result1, #0
1dfd4                 | LR__3011
1dfd4     A7 F0 03 F6 | 	mov	ptra, fp
1dfd8     B2 00 A0 FD | 	call	#popregs_
1dfdc                 | __system____root_readdir_ret
1dfdc     2D 00 64 FD | 	ret
1dfe0                 | 
1dfe0                 | __system____root_closedir
1dfe0     00 FA 05 F6 | 	mov	result1, #0
1dfe4                 | __system____root_closedir_ret
1dfe4     2D 00 64 FD | 	ret
1dfe8                 | 
1dfe8                 | __system____root_stat
1dfe8     0A 01 02 F6 | 	mov	_var01, arg02
1dfec     00 13 02 F6 | 	mov	arg01, _var01
1dff0     00 14 06 F6 | 	mov	arg02, #0
1dff4     30 16 06 F6 | 	mov	arg03, #48
1dff8     98 00 A0 FD | 	call	#\builtin_bytefill_
1dffc     08 00 06 F1 | 	add	_var01, #8
1e000     08 00 80 FF 
1e004     00 FF 6B FC | 	wrlong	##4607, _var01
1e008     00 FA 05 F6 | 	mov	result1, #0
1e00c                 | __system____root_stat_ret
1e00c     2D 00 64 FD | 	ret
1e010                 | 
1e010                 | __system___normalizeName
1e010     00 00 06 F6 | 	mov	_var01, #0
1e014     09 03 02 F6 | 	mov	_var02, arg01
1e018     01 05 02 F6 | 	mov	_var03, _var02
1e01c                 | LR__3020
1e01c     01 07 CA FA | 	rdbyte	_var04, _var02 wz
1e020     5C 01 90 AD |  if_e	jmp	#LR__3039
1e024     00 00 0E F2 | 	cmp	_var01, #0 wz
1e028     02 07 02 56 |  if_ne	mov	_var04, _var03
1e02c     01 04 06 51 |  if_ne	add	_var03, #1
1e030     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
1e034     00 00 06 56 |  if_ne	mov	_var01, #0
1e038     01 07 C2 FA | 	rdbyte	_var04, _var02
1e03c     2E 06 0E F2 | 	cmp	_var04, #46 wz
1e040     D8 00 90 5D |  if_ne	jmp	#LR__3032
1e044     01 02 06 F1 | 	add	_var02, #1
1e048     01 07 C2 FA | 	rdbyte	_var04, _var02
1e04c     01 02 86 F1 | 	sub	_var02, #1
1e050     2F 06 0E F2 | 	cmp	_var04, #47 wz
1e054     18 00 90 AD |  if_e	jmp	#LR__3021
1e058     01 02 06 F1 | 	add	_var02, #1
1e05c     01 09 C2 FA | 	rdbyte	_var05, _var02
1e060     01 02 86 F1 | 	sub	_var02, #1
1e064     04 0B 02 F6 | 	mov	_var06, _var05
1e068     07 0A 4E F7 | 	zerox	_var06, #7 wz
1e06c     10 00 90 5D |  if_ne	jmp	#LR__3022
1e070                 | LR__3021
1e070     01 0D 02 F6 | 	mov	_var07, _var02
1e074     01 0C 06 F1 | 	add	_var07, #1
1e078     06 03 02 F6 | 	mov	_var02, _var07
1e07c     E0 00 90 FD | 	jmp	#LR__3036
1e080                 | LR__3022
1e080     01 02 06 F1 | 	add	_var02, #1
1e084     01 0D C2 FA | 	rdbyte	_var07, _var02
1e088     01 02 86 F1 | 	sub	_var02, #1
1e08c     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
1e090     2E 06 0E F2 | 	cmp	_var04, #46 wz
1e094     84 00 90 5D |  if_ne	jmp	#LR__3031
1e098     02 02 06 F1 | 	add	_var02, #2
1e09c     01 0D C2 FA | 	rdbyte	_var07, _var02
1e0a0     02 02 86 F1 | 	sub	_var02, #2
1e0a4     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
1e0a8     2F 06 0E F2 | 	cmp	_var04, #47 wz
1e0ac     18 00 90 AD |  if_e	jmp	#LR__3023
1e0b0     02 02 06 F1 | 	add	_var02, #2
1e0b4     01 09 C2 FA | 	rdbyte	_var05, _var02
1e0b8     02 02 86 F1 | 	sub	_var02, #2
1e0bc     04 0B 02 F6 | 	mov	_var06, _var05
1e0c0     07 0A 4E F7 | 	zerox	_var06, #7 wz
1e0c4     54 00 90 5D |  if_ne	jmp	#LR__3030
1e0c8                 | LR__3023
1e0c8     02 02 06 F1 | 	add	_var02, #2
1e0cc     09 05 5A F2 | 	cmps	_var03, arg01 wcz
1e0d0     40 00 90 ED |  if_be	jmp	#LR__3029
1e0d4     02 0F 02 F6 | 	mov	_var08, _var03
1e0d8     01 0E 86 F1 | 	sub	_var08, #1
1e0dc                 | LR__3024
1e0dc     07 07 C2 FA | 	rdbyte	_var04, _var08
1e0e0     2F 06 0E F2 | 	cmp	_var04, #47 wz
1e0e4     0C 00 90 5D |  if_ne	jmp	#LR__3025
1e0e8     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
1e0ec     01 0E 86 11 |  if_a	sub	_var08, #1
1e0f0     E8 FF 9F 1D |  if_a	jmp	#LR__3024
1e0f4                 | LR__3025
1e0f4     97 0C 48 FB | 	callpa	#(@LR__3027-@LR__3026)>>2,fcache_load_ptr_
1e0f8                 | LR__3026
1e0f8     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
1e0fc     10 00 90 ED |  if_be	jmp	#LR__3028
1e100     07 07 C2 FA | 	rdbyte	_var04, _var08
1e104     2F 06 0E F2 | 	cmp	_var04, #47 wz
1e108     01 0E 86 51 |  if_ne	sub	_var08, #1
1e10c     E8 FF 9F 5D |  if_ne	jmp	#LR__3026
1e110                 | LR__3027
1e110                 | LR__3028
1e110     07 05 02 F6 | 	mov	_var03, _var08
1e114                 | LR__3029
1e114     01 00 06 F6 | 	mov	_var01, #1
1e118     44 00 90 FD | 	jmp	#LR__3036
1e11c                 | LR__3030
1e11c                 | LR__3031
1e11c                 | LR__3032
1e11c     97 18 48 FB | 	callpa	#(@LR__3034-@LR__3033)>>2,fcache_load_ptr_
1e120                 | LR__3033
1e120     01 07 CA FA | 	rdbyte	_var04, _var02 wz
1e124     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
1e128     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
1e12c     20 00 90 AD |  if_e	jmp	#LR__3035
1e130     01 0B 02 F6 | 	mov	_var06, _var02
1e134     01 09 02 F6 | 	mov	_var05, _var02
1e138     01 08 06 F1 | 	add	_var05, #1
1e13c     05 11 C2 FA | 	rdbyte	_var09, _var06
1e140     04 03 02 F6 | 	mov	_var02, _var05
1e144     02 11 42 FC | 	wrbyte	_var09, _var03
1e148     01 04 06 F1 | 	add	_var03, #1
1e14c     D0 FF 9F FD | 	jmp	#LR__3033
1e150                 | LR__3034
1e150                 | LR__3035
1e150     01 07 C2 FA | 	rdbyte	_var04, _var02
1e154     2F 06 0E F2 | 	cmp	_var04, #47 wz
1e158     C0 FE 9F 5D |  if_ne	jmp	#LR__3020
1e15c     01 00 06 F6 | 	mov	_var01, #1
1e160                 | LR__3036
1e160     97 0C 48 FB | 	callpa	#(@LR__3038-@LR__3037)>>2,fcache_load_ptr_
1e164                 | LR__3037
1e164     01 07 C2 FA | 	rdbyte	_var04, _var02
1e168     2F 06 0E F2 | 	cmp	_var04, #47 wz
1e16c     01 0D 02 A6 |  if_e	mov	_var07, _var02
1e170     01 0C 06 A1 |  if_e	add	_var07, #1
1e174     06 03 02 A6 |  if_e	mov	_var02, _var07
1e178     E8 FF 9F AD |  if_e	jmp	#LR__3037
1e17c                 | LR__3038
1e17c     9C FE 9F FD | 	jmp	#LR__3020
1e180                 | LR__3039
1e180     02 01 48 FC | 	wrbyte	#0, _var03
1e184                 | __system___normalizeName_ret
1e184     2D 00 64 FD | 	ret
1e188                 | 
1e188                 | __system___strrev
1e188     09 01 CA FA | 	rdbyte	_var01, arg01 wz
1e18c     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
1e190     09 03 02 F6 | 	mov	_var02, arg01
1e194     97 1A 48 FB | 	callpa	#(@LR__3042-@LR__3040)>>2,fcache_load_ptr_
1e198                 | LR__3040
1e198     01 01 CA FA | 	rdbyte	_var01, _var02 wz
1e19c     01 02 06 51 |  if_ne	add	_var02, #1
1e1a0     F4 FF 9F 5D |  if_ne	jmp	#LR__3040
1e1a4     01 02 86 F1 | 	sub	_var02, #1
1e1a8                 | LR__3041
1e1a8     09 03 5A F2 | 	cmps	_var02, arg01 wcz
1e1ac     1C 00 90 ED |  if_be	jmp	#LR__3043
1e1b0     09 01 C2 FA | 	rdbyte	_var01, arg01
1e1b4     01 05 C2 FA | 	rdbyte	_var03, _var02
1e1b8     09 05 42 FC | 	wrbyte	_var03, arg01
1e1bc     01 01 42 FC | 	wrbyte	_var01, _var02
1e1c0     01 12 06 F1 | 	add	arg01, #1
1e1c4     01 02 86 F1 | 	sub	_var02, #1
1e1c8     DC FF 9F FD | 	jmp	#LR__3041
1e1cc                 | LR__3042
1e1cc                 | LR__3043
1e1cc                 | __system___strrev_ret
1e1cc     2D 00 64 FD | 	ret
1e1d0                 | 
1e1d0                 | __system___fmtpad
1e1d0     06 4A 05 F6 | 	mov	COUNT_, #6
1e1d4     A8 00 A0 FD | 	call	#pushregs_
1e1d8     09 1F 02 F6 | 	mov	local01, arg01
1e1dc     0A 21 02 F6 | 	mov	local02, arg02
1e1e0     0B 23 02 F6 | 	mov	local03, arg03
1e1e4     10 13 EA F8 | 	getbyte	arg01, local02, #1
1e1e8     16 20 46 F0 | 	shr	local02, #22
1e1ec     03 20 0E F5 | 	and	local02, #3 wz
1e1f0     00 24 06 F6 | 	mov	local04, #0
1e1f4     01 20 06 A6 |  if_e	mov	local02, #1
1e1f8     0C 21 CA F7 | 	test	local02, arg04 wz
1e1fc     00 FA 05 A6 |  if_e	mov	result1, #0
1e200     88 00 90 AD |  if_e	jmp	#LR__3053
1e204     09 23 C2 F2 | 	subr	local03, arg01
1e208     01 22 56 F2 | 	cmps	local03, #1 wc
1e20c     00 FA 05 C6 |  if_b	mov	result1, #0
1e210     78 00 90 CD |  if_b	jmp	#LR__3053
1e214     03 20 0E F2 | 	cmp	local02, #3 wz
1e218     18 00 90 5D |  if_ne	jmp	#LR__3050
1e21c     01 18 0E F2 | 	cmp	arg04, #1 wz
1e220     6E 20 62 FD | 	wrz	local02
1e224     10 23 02 F1 | 	add	local03, local02
1e228     11 23 52 F6 | 	abs	local03, local03 wc
1e22c     01 22 46 F0 | 	shr	local03, #1
1e230     11 23 82 F6 | 	negc	local03, local03
1e234                 | LR__3050
1e234     01 22 56 F2 | 	cmps	local03, #1 wc
1e238     4C 00 90 CD |  if_b	jmp	#LR__3052
1e23c     11 27 02 F6 | 	mov	local05, local03
1e240                 | LR__3051
1e240     0F 21 02 F6 | 	mov	local02, local01
1e244     0F 29 02 F6 | 	mov	local06, local01
1e248     13 20 46 F7 | 	zerox	local02, #19
1e24c     14 28 46 F0 | 	shr	local06, #20
1e250     02 28 66 F0 | 	shl	local06, #2
1e254     ED 28 02 F1 | 	add	local06, __methods__
1e258     14 29 02 FB | 	rdlong	local06, local06
1e25c     20 12 06 F6 | 	mov	arg01, #32
1e260     F2 22 02 F6 | 	mov	local03, objptr
1e264     10 E5 01 F6 | 	mov	objptr, local02
1e268     2D 28 62 FD | 	call	local06
1e26c     11 E5 01 F6 | 	mov	objptr, local03
1e270     FD 28 02 F6 | 	mov	local06, result1
1e274     00 28 56 F2 | 	cmps	local06, #0 wc
1e278     14 FB 01 C6 |  if_b	mov	result1, local06
1e27c     0C 00 90 CD |  if_b	jmp	#LR__3053
1e280     14 25 02 F1 | 	add	local04, local06
1e284     EE 27 6E FB | 	djnz	local05, #LR__3051
1e288                 | LR__3052
1e288     12 FB 01 F6 | 	mov	result1, local04
1e28c                 | LR__3053
1e28c     A7 F0 03 F6 | 	mov	ptra, fp
1e290     B2 00 A0 FD | 	call	#popregs_
1e294                 | __system___fmtpad_ret
1e294     2D 00 64 FD | 	ret
1e298                 | 
1e298                 | __system___uitoa
1e298     04 4A 05 F6 | 	mov	COUNT_, #4
1e29c     A8 00 A0 FD | 	call	#pushregs_
1e2a0     09 1F 02 F6 | 	mov	local01, arg01
1e2a4     00 1A 4E F2 | 	cmps	arg05, #0 wz
1e2a8     0F 1B 02 F6 | 	mov	arg05, local01
1e2ac     00 20 06 F6 | 	mov	local02, #0
1e2b0     37 22 06 56 |  if_ne	mov	local03, #55
1e2b4     57 22 06 A6 |  if_e	mov	local03, #87
1e2b8                 | LR__3060
1e2b8     0B 15 12 FD | 	qdiv	arg02, arg03
1e2bc     19 24 62 FD | 	getqy	local04
1e2c0     0B 15 12 FD | 	qdiv	arg02, arg03
1e2c4     0A 24 16 F2 | 	cmp	local04, #10 wc
1e2c8     30 24 06 C1 |  if_b	add	local04, #48
1e2cc     11 25 02 31 |  if_ae	add	local04, local03
1e2d0     0D 25 42 FC | 	wrbyte	local04, arg05
1e2d4     01 1A 06 F1 | 	add	arg05, #1
1e2d8     01 20 06 F1 | 	add	local02, #1
1e2dc     18 14 62 FD | 	getqx	arg02
1e2e0     00 14 0E F2 | 	cmp	arg02, #0 wz
1e2e4     D0 FF 9F 5D |  if_ne	jmp	#LR__3060
1e2e8     0C 21 12 F2 | 	cmp	local02, arg04 wc
1e2ec     C8 FF 9F CD |  if_b	jmp	#LR__3060
1e2f0     0D 01 48 FC | 	wrbyte	#0, arg05
1e2f4     0F 13 02 F6 | 	mov	arg01, local01
1e2f8     8C FE BF FD | 	call	#__system___strrev
1e2fc     10 FB 01 F6 | 	mov	result1, local02
1e300     A7 F0 03 F6 | 	mov	ptra, fp
1e304     B2 00 A0 FD | 	call	#popregs_
1e308                 | __system___uitoa_ret
1e308     2D 00 64 FD | 	ret
1e30c                 | 
1e30c                 | __system__disassemble_0381
1e30c     10 4A 05 F6 | 	mov	COUNT_, #16
1e310     A8 00 A0 FD | 	call	#pushregs_
1e314     09 1F 02 F6 | 	mov	local01, arg01
1e318     0A 21 02 F6 | 	mov	local02, arg02
1e31c     0B 23 02 F6 | 	mov	local03, arg03
1e320     0C 25 02 F6 | 	mov	local04, arg04
1e324     0D 27 02 F6 | 	mov	local05, arg05
1e328     13 13 52 F6 | 	abs	arg01, local05 wc
1e32c     1F 28 C6 C9 |  if_b	decod	local06, #31
1e330     00 28 06 36 |  if_ae	mov	local06, #0
1e334     64 D0 BF FD | 	call	#__system___float_fromuns
1e338     14 FB 61 F5 | 	xor	result1, local06
1e33c     FD 2A 02 F6 | 	mov	local07, result1
1e340     00 2C 06 F6 | 	mov	local08, #0
1e344     0F 13 02 F6 | 	mov	arg01, local01
1e348     00 14 06 F6 | 	mov	arg02, #0
1e34c     01 16 06 F6 | 	mov	arg03, #1
1e350     80 D8 BF FD | 	call	#__system___float_cmp
1e354     00 FA 0D F2 | 	cmp	result1, #0 wz
1e358     00 2E 06 A6 |  if_e	mov	local09, #0
1e35c     10 01 68 AC |  if_e	wrlong	#0, local02
1e360     11 2F 62 AC |  if_e	wrlong	local09, local03
1e364     8C 01 90 AD |  if_e	jmp	#LR__3082
1e368     0F 13 02 F6 | 	mov	arg01, local01
1e36c     30 DD BF FD | 	call	#__system____builtin_ilogb
1e370     FD 30 02 F6 | 	mov	local10, result1
1e374     0A 26 0E F2 | 	cmp	local05, #10 wz
1e378     24 00 90 5D |  if_ne	jmp	#LR__3070
1e37c     18 2F 02 F6 | 	mov	local09, local10
1e380     01 2E 66 F0 | 	shl	local09, #1
1e384     18 2F 02 F1 | 	add	local09, local10
1e388     17 31 52 F6 | 	abs	local10, local09 wc
1e38c     0A 30 16 FD | 	qdiv	local10, #10
1e390     09 32 06 F6 | 	mov	local11, #9
1e394     18 30 62 FD | 	getqx	local10
1e398     18 31 82 F6 | 	negc	local10, local10
1e39c     04 00 90 FD | 	jmp	#LR__3071
1e3a0                 | LR__3070
1e3a0     18 32 06 F6 | 	mov	local11, #24
1e3a4                 | LR__3071
1e3a4                 | LR__3072
1e3a4     08 2C 56 F2 | 	cmps	local08, #8 wc
1e3a8     01 2C 06 F1 | 	add	local08, #1
1e3ac     60 00 90 3D |  if_ae	jmp	#LR__3073
1e3b0     00 C0 1F FF 
1e3b4     00 12 06 F6 | 	mov	arg01, ##1065353216
1e3b8     15 15 02 F6 | 	mov	arg02, local07
1e3bc     18 17 02 F6 | 	mov	arg03, local10
1e3c0     88 E3 BF FD | 	call	#__system___float_pow_n
1e3c4     FD 14 02 F6 | 	mov	arg02, result1
1e3c8     0F 13 02 F6 | 	mov	arg01, local01
1e3cc     D4 D5 BF FD | 	call	#__system___float_div
1e3d0     FD 34 02 F6 | 	mov	local12, result1
1e3d4     1A 13 02 F6 | 	mov	arg01, local12
1e3d8     00 C0 1F FF 
1e3dc     00 14 06 F6 | 	mov	arg02, ##1065353216
1e3e0     01 16 06 F6 | 	mov	arg03, #1
1e3e4     EC D7 BF FD | 	call	#__system___float_cmp
1e3e8     00 FA 55 F2 | 	cmps	result1, #0 wc
1e3ec     01 30 86 C1 |  if_b	sub	local10, #1
1e3f0     B0 FF 9F CD |  if_b	jmp	#LR__3072
1e3f4     15 15 02 F6 | 	mov	arg02, local07
1e3f8     1A 13 02 F6 | 	mov	arg01, local12
1e3fc     01 16 66 F6 | 	neg	arg03, #1
1e400     D0 D7 BF FD | 	call	#__system___float_cmp
1e404     00 FA 55 F2 | 	cmps	result1, #0 wc
1e408     01 30 06 31 |  if_ae	add	local10, #1
1e40c     94 FF 9F 3D |  if_ae	jmp	#LR__3072
1e410                 | LR__3073
1e410     1A 13 02 F6 | 	mov	arg01, local12
1e414     88 DC BF FD | 	call	#__system____builtin_ilogb
1e418     FD 36 02 F6 | 	mov	local13, result1
1e41c     1A 39 02 F6 | 	mov	local14, local12
1e420     17 39 06 F4 | 	bitl	local14, #279
1e424     17 38 26 F4 | 	bith	local14, #23
1e428     1B 39 62 F0 | 	shl	local14, local13
1e42c     02 26 0E F2 | 	cmp	local05, #2 wz
1e430     02 24 66 A0 |  if_e	shl	local04, #2
1e434     00 3A 06 F6 | 	mov	local15, #0
1e438     00 24 56 F2 | 	cmps	local04, #0 wc
1e43c     10 00 90 3D |  if_ae	jmp	#LR__3074
1e440     18 25 C2 F2 | 	subr	local04, local10
1e444     00 24 56 F2 | 	cmps	local04, #0 wc
1e448     A0 00 90 CD |  if_b	jmp	#LR__3081
1e44c     04 00 90 FD | 	jmp	#LR__3075
1e450                 | LR__3074
1e450     01 24 06 F1 | 	add	local04, #1
1e454                 | LR__3075
1e454     19 25 7A F3 | 	fles	local04, local11 wcz
1e458     01 3C 06 F6 | 	mov	local16, #1
1e45c     97 22 48 FB | 	callpa	#(@LR__3077-@LR__3076)>>2,fcache_load_ptr_
1e460                 | LR__3076
1e460     00 40 00 FF 
1e464     00 3A 16 F2 | 	cmp	local15, ##8388608 wc
1e468     38 00 90 3D |  if_ae	jmp	#LR__3078
1e46c     01 24 56 F2 | 	cmps	local04, #1 wc
1e470     01 24 86 F1 | 	sub	local04, #1
1e474     2C 00 90 CD |  if_b	jmp	#LR__3078
1e478     13 3B 02 FD | 	qmul	local15, local05
1e47c     1C 37 02 F6 | 	mov	local13, local14
1e480     17 36 46 F0 | 	shr	local13, #23
1e484     17 39 06 F4 | 	bitl	local14, #279
1e488     18 3A 62 FD | 	getqx	local15
1e48c     13 3D 02 FD | 	qmul	local16, local05
1e490     18 3C 62 FD | 	getqx	local16
1e494     13 39 02 FD | 	qmul	local14, local05
1e498     1B 3B 02 F1 | 	add	local15, local13
1e49c     18 38 62 FD | 	getqx	local14
1e4a0     BC FF 9F FD | 	jmp	#LR__3076
1e4a4                 | LR__3077
1e4a4                 | LR__3078
1e4a4     13 2F 02 F6 | 	mov	local09, local05
1e4a8     17 2E 66 F0 | 	shl	local09, #23
1e4ac     17 37 52 F6 | 	abs	local13, local09 wc
1e4b0     01 36 46 F0 | 	shr	local13, #1
1e4b4     1B 37 82 F6 | 	negc	local13, local13
1e4b8     1B 39 1A F2 | 	cmp	local14, local13 wcz
1e4bc     20 00 90 1D |  if_a	jmp	#LR__3079
1e4c0     17 26 66 F0 | 	shl	local05, #23
1e4c4     13 37 52 F6 | 	abs	local13, local05 wc
1e4c8     01 36 46 F0 | 	shr	local13, #1
1e4cc     1B 37 82 F6 | 	negc	local13, local13
1e4d0     1B 39 0A F2 | 	cmp	local14, local13 wz
1e4d4     14 00 90 5D |  if_ne	jmp	#LR__3080
1e4d8     01 3A CE F7 | 	test	local15, #1 wz
1e4dc     0C 00 90 AD |  if_e	jmp	#LR__3080
1e4e0                 | LR__3079
1e4e0     01 3A 06 F1 | 	add	local15, #1
1e4e4     1E 3B 0A F2 | 	cmp	local15, local16 wz
1e4e8     01 30 06 A1 |  if_e	add	local10, #1
1e4ec                 | LR__3080
1e4ec                 | LR__3081
1e4ec     10 3B 62 FC | 	wrlong	local15, local02
1e4f0     11 31 62 FC | 	wrlong	local10, local03
1e4f4                 | LR__3082
1e4f4     A7 F0 03 F6 | 	mov	ptra, fp
1e4f8     B2 00 A0 FD | 	call	#popregs_
1e4fc                 | __system__disassemble_0381_ret
1e4fc     2D 00 64 FD | 	ret
1e500                 | 
1e500                 | __system__emitsign_0383
1e500     00 FA 05 F6 | 	mov	result1, #0
1e504     00 14 0E F2 | 	cmp	arg02, #0 wz
1e508     09 01 02 56 |  if_ne	mov	_var01, arg01
1e50c     01 12 06 51 |  if_ne	add	arg01, #1
1e510     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
1e514     01 FA 05 56 |  if_ne	mov	result1, #1
1e518     00 16 0E F2 | 	cmp	arg03, #0 wz
1e51c     09 61 48 5C |  if_ne	wrbyte	#48, arg01
1e520     01 12 06 51 |  if_ne	add	arg01, #1
1e524     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
1e528     02 FA 05 51 |  if_ne	add	result1, #2
1e52c                 | __system__emitsign_0383_ret
1e52c     2D 00 64 FD | 	ret
1e530                 | 
1e530                 | __system___gettxfunc
1e530     01 4A 05 F6 | 	mov	COUNT_, #1
1e534     A8 00 A0 FD | 	call	#pushregs_
1e538     A0 F8 BF FD | 	call	#__system____getftab
1e53c     FD 1E 0A F6 | 	mov	local01, result1 wz
1e540     10 00 90 AD |  if_e	jmp	#LR__3090
1e544     08 1E 06 F1 | 	add	local01, #8
1e548     0F 15 0A FB | 	rdlong	arg02, local01 wz
1e54c     08 1E 86 F1 | 	sub	local01, #8
1e550     08 00 90 5D |  if_ne	jmp	#LR__3091
1e554                 | LR__3090
1e554     00 FA 05 F6 | 	mov	result1, #0
1e558     0C 00 90 FD | 	jmp	#LR__3092
1e55c                 | LR__3091
1e55c     00 28 03 FF 
1e560     00 1E 46 F5 | 	or	local01, ##105906176
1e564     0F FB 01 F6 | 	mov	result1, local01
1e568                 | LR__3092
1e568     A7 F0 03 F6 | 	mov	ptra, fp
1e56c     B2 00 A0 FD | 	call	#popregs_
1e570                 | __system___gettxfunc_ret
1e570     2D 00 64 FD | 	ret
1e574                 | 
1e574                 | __system___getrxfunc
1e574     01 4A 05 F6 | 	mov	COUNT_, #1
1e578     A8 00 A0 FD | 	call	#pushregs_
1e57c     5C F8 BF FD | 	call	#__system____getftab
1e580     FD 1E 0A F6 | 	mov	local01, result1 wz
1e584     10 00 90 AD |  if_e	jmp	#LR__3100
1e588     08 1E 06 F1 | 	add	local01, #8
1e58c     0F 15 0A FB | 	rdlong	arg02, local01 wz
1e590     08 1E 86 F1 | 	sub	local01, #8
1e594     08 00 90 5D |  if_ne	jmp	#LR__3101
1e598                 | LR__3100
1e598     00 FA 05 F6 | 	mov	result1, #0
1e59c     0C 00 90 FD | 	jmp	#LR__3102
1e5a0                 | LR__3101
1e5a0     00 30 03 FF 
1e5a4     00 1E 46 F5 | 	or	local01, ##106954752
1e5a8     0F FB 01 F6 | 	mov	result1, local01
1e5ac                 | LR__3102
1e5ac     A7 F0 03 F6 | 	mov	ptra, fp
1e5b0     B2 00 A0 FD | 	call	#popregs_
1e5b4                 | __system___getrxfunc_ret
1e5b4     2D 00 64 FD | 	ret
1e5b8                 | 
1e5b8                 | __system___getiolock_0423
1e5b8     01 4A 05 F6 | 	mov	COUNT_, #1
1e5bc     A8 00 A0 FD | 	call	#pushregs_
1e5c0     18 F8 BF FD | 	call	#__system____getftab
1e5c4     FD 1E 0A F6 | 	mov	local01, result1 wz
1e5c8     10 00 90 AD |  if_e	jmp	#LR__3110
1e5cc     08 1E 06 F1 | 	add	local01, #8
1e5d0     0F FB 09 FB | 	rdlong	result1, local01 wz
1e5d4     08 1E 86 F1 | 	sub	local01, #8
1e5d8     18 00 90 5D |  if_ne	jmp	#LR__3111
1e5dc                 | LR__3110
1e5dc     01 00 00 FF 
1e5e0     D4 E8 05 F1 | 	add	ptr___system__dat__, ##724
1e5e4     F4 FA 01 F6 | 	mov	result1, ptr___system__dat__
1e5e8     01 00 00 FF 
1e5ec     D4 E8 85 F1 | 	sub	ptr___system__dat__, ##724
1e5f0     08 00 90 FD | 	jmp	#LR__3112
1e5f4                 | LR__3111
1e5f4     0C 1E 06 F1 | 	add	local01, #12
1e5f8     0F FB 01 F6 | 	mov	result1, local01
1e5fc                 | LR__3112
1e5fc     A7 F0 03 F6 | 	mov	ptra, fp
1e600     B2 00 A0 FD | 	call	#popregs_
1e604                 | __system___getiolock_0423_ret
1e604     2D 00 64 FD | 	ret
1e608                 | 
1e608                 | __system____ScanForChar
1e608     09 01 02 F6 | 	mov	_var01, arg01
1e60c     09 03 02 F6 | 	mov	_var02, arg01
1e610     97 06 48 FB | 	callpa	#(@LR__3121-@LR__3120)>>2,fcache_load_ptr_
1e614                 | LR__3120
1e614     01 FB C9 FA | 	rdbyte	result1, _var02 wz
1e618     01 02 06 51 |  if_ne	add	_var02, #1
1e61c     F4 FF 9F 5D |  if_ne	jmp	#LR__3120
1e620                 | LR__3121
1e620     09 03 82 F1 | 	sub	_var02, arg01
1e624     01 FB 01 F6 | 	mov	result1, _var02
1e628     FD 12 0A F6 | 	mov	arg01, result1 wz
1e62c     00 FA 05 A6 |  if_e	mov	result1, #0
1e630     B8 00 90 AD |  if_e	jmp	#LR__3128
1e634     0A 05 02 F6 | 	mov	_var03, arg02
1e638     07 04 4E F7 | 	zerox	_var03, #7 wz
1e63c     00 FA 05 A6 |  if_e	mov	result1, #0
1e640     A8 00 90 AD |  if_e	jmp	#LR__3128
1e644     01 16 16 F2 | 	cmp	arg03, #1 wc
1e648     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
1e64c     01 16 06 86 |  if_c_and_z	mov	arg03, #1
1e650     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
1e654     94 00 90 4D |  if_c_and_nz	jmp	#LR__3128
1e658     09 17 1A F2 | 	cmp	arg03, arg01 wcz
1e65c     10 00 90 ED |  if_be	jmp	#LR__3122
1e660     00 18 0E F2 | 	cmp	arg04, #0 wz
1e664     00 FA 05 A6 |  if_e	mov	result1, #0
1e668     80 00 90 AD |  if_e	jmp	#LR__3128
1e66c     09 17 02 F6 | 	mov	arg03, arg01
1e670                 | LR__3122
1e670     01 16 86 F1 | 	sub	arg03, #1
1e674     00 18 0E F2 | 	cmp	arg04, #0 wz
1e678     38 00 90 5D |  if_ne	jmp	#LR__3124
1e67c     0B 07 02 F6 | 	mov	_var04, arg03
1e680     09 09 02 F6 | 	mov	_var05, arg01
1e684                 | LR__3123
1e684     04 07 12 F2 | 	cmp	_var04, _var05 wc
1e688     5C 00 90 3D |  if_ae	jmp	#LR__3127
1e68c     03 05 02 F6 | 	mov	_var03, _var04
1e690     00 05 02 F1 | 	add	_var03, _var01
1e694     02 05 C2 FA | 	rdbyte	_var03, _var03
1e698     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
1e69c     0C 05 0A F2 | 	cmp	_var03, arg04 wz
1e6a0     01 06 06 A1 |  if_e	add	_var04, #1
1e6a4     03 FB 01 A6 |  if_e	mov	result1, _var04
1e6a8     40 00 90 AD |  if_e	jmp	#LR__3128
1e6ac     01 06 06 F1 | 	add	_var04, #1
1e6b0     D0 FF 9F FD | 	jmp	#LR__3123
1e6b4                 | LR__3124
1e6b4     0B 07 02 F6 | 	mov	_var04, arg03
1e6b8                 | LR__3125
1e6b8     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
1e6bc     28 00 90 1D |  if_a	jmp	#LR__3126
1e6c0     03 09 02 F6 | 	mov	_var05, _var04
1e6c4     00 09 02 F1 | 	add	_var05, _var01
1e6c8     04 05 C2 FA | 	rdbyte	_var03, _var05
1e6cc     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
1e6d0     04 05 0A F2 | 	cmp	_var03, _var05 wz
1e6d4     01 06 06 A1 |  if_e	add	_var04, #1
1e6d8     03 FB 01 A6 |  if_e	mov	result1, _var04
1e6dc     0C 00 90 AD |  if_e	jmp	#LR__3128
1e6e0     01 06 86 F1 | 	sub	_var04, #1
1e6e4     D0 FF 9F FD | 	jmp	#LR__3125
1e6e8                 | LR__3126
1e6e8                 | LR__3127
1e6e8     00 FA 05 F6 | 	mov	result1, #0
1e6ec                 | LR__3128
1e6ec                 | __system____ScanForChar_ret
1e6ec     2D 00 64 FD | 	ret
1e6f0                 | 
1e6f0                 | __system___basic_dir
1e6f0     05 4A 05 F6 | 	mov	COUNT_, #5
1e6f4     A8 00 A0 FD | 	call	#pushregs_
1e6f8     4C F0 07 F1 | 	add	ptra, #76
1e6fc     04 4E 05 F1 | 	add	fp, #4
1e700     A7 12 62 FC | 	wrlong	arg01, fp
1e704     04 4E 05 F1 | 	add	fp, #4
1e708     A7 14 62 FC | 	wrlong	arg02, fp
1e70c     04 4E 85 F1 | 	sub	fp, #4
1e710     A7 14 0A FB | 	rdlong	arg02, fp wz
1e714     04 4E 85 F1 | 	sub	fp, #4
1e718     04 4E 05 51 |  if_ne	add	fp, #4
1e71c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1e720     04 4E 85 51 |  if_ne	sub	fp, #4
1e724     0F 21 CA 5A |  if_ne	rdbyte	local02, local01 wz
1e728     70 00 90 AD |  if_e	jmp	#LR__3130
1e72c     03 00 00 FF 
1e730     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1e734     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1e738     03 00 00 FF 
1e73c     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1e740     03 00 00 5F 
1e744     28 E9 05 51 |  if_ne	add	ptr___system__dat__, ##1832
1e748     F4 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
1e74c     03 00 00 5F 
1e750     28 E9 85 51 |  if_ne	sub	ptr___system__dat__, ##1832
1e754     14 EA BF 5D |  if_ne	call	#__system__closedir
1e758     41 01 00 FF 
1e75c     2C 12 06 F6 | 	mov	arg01, ##@LR__4288
1e760     1C E9 BF FD | 	call	#__system__opendir
1e764     03 00 00 FF 
1e768     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1e76c     F4 FA 61 FC | 	wrlong	result1, ptr___system__dat__
1e770     08 4E 05 F1 | 	add	fp, #8
1e774     A7 20 02 FB | 	rdlong	local02, fp
1e778     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1e77c     F4 20 62 FC | 	wrlong	local02, ptr___system__dat__
1e780     04 4E 85 F1 | 	sub	fp, #4
1e784     A7 20 02 FB | 	rdlong	local02, fp
1e788     04 4E 85 F1 | 	sub	fp, #4
1e78c     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1e790     F4 20 62 FC | 	wrlong	local02, ptr___system__dat__
1e794     03 00 00 FF 
1e798     30 E9 85 F1 | 	sub	ptr___system__dat__, ##1840
1e79c                 | LR__3130
1e79c     03 00 00 FF 
1e7a0     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1e7a4     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1e7a8     03 00 00 FF 
1e7ac     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1e7b0     41 01 00 AF 
1e7b4     2E FA 05 A6 |  if_e	mov	result1, ##@LR__4289
1e7b8     84 02 90 AD |  if_e	jmp	#LR__3143
1e7bc                 | LR__3131
1e7bc     03 00 00 FF 
1e7c0     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1e7c4     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1e7c8     03 00 00 FF 
1e7cc     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1e7d0     0C EA BF FD | 	call	#__system__readdir
1e7d4     0C 4E 05 F1 | 	add	fp, #12
1e7d8     A7 FA 61 FC | 	wrlong	result1, fp
1e7dc     0C 4E 85 F1 | 	sub	fp, #12
1e7e0     00 FA 0D F2 | 	cmp	result1, #0 wz
1e7e4     38 00 90 5D |  if_ne	jmp	#LR__3132
1e7e8     03 00 00 FF 
1e7ec     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1e7f0     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1e7f4     03 00 00 FF 
1e7f8     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1e7fc     6C E9 BF FD | 	call	#__system__closedir
1e800     03 00 00 FF 
1e804     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1e808     F4 00 68 FC | 	wrlong	#0, ptr___system__dat__
1e80c     03 00 00 FF 
1e810     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1e814     41 01 00 FF 
1e818     30 FA 05 F6 | 	mov	result1, ##@LR__4290
1e81c     20 02 90 FD | 	jmp	#LR__3143
1e820                 | LR__3132
1e820     0C 4E 05 F1 | 	add	fp, #12
1e824     A7 12 02 FB | 	rdlong	arg01, fp
1e828     0C 4E 85 F1 | 	sub	fp, #12
1e82c     03 00 00 FF 
1e830     30 E9 05 F1 | 	add	ptr___system__dat__, ##1840
1e834     F4 14 02 FB | 	rdlong	arg02, ptr___system__dat__
1e838     03 00 00 FF 
1e83c     30 E9 85 F1 | 	sub	ptr___system__dat__, ##1840
1e840     48 07 B0 FD | 	call	#__system___pat_match
1e844     00 FA 0D F2 | 	cmp	result1, #0 wz
1e848     70 FF 9F AD |  if_e	jmp	#LR__3131
1e84c     03 00 00 FF 
1e850     2C E9 05 F1 | 	add	ptr___system__dat__, ##1836
1e854     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1e858     03 00 00 FF 
1e85c     2C E9 85 F1 | 	sub	ptr___system__dat__, ##1836
1e860     78 01 90 AD |  if_e	jmp	#LR__3139
1e864     0C 4E 05 F1 | 	add	fp, #12
1e868     A7 12 02 FB | 	rdlong	arg01, fp
1e86c     04 4E 05 F1 | 	add	fp, #4
1e870     A7 14 02 F6 | 	mov	arg02, fp
1e874     10 4E 85 F1 | 	sub	fp, #16
1e878     68 F2 BF FD | 	call	#__system__stat
1e87c     40 4E 05 F1 | 	add	fp, #64
1e880     A7 FA 61 FC | 	wrlong	result1, fp
1e884     40 4E 85 F1 | 	sub	fp, #64
1e888     00 FA 0D F2 | 	cmp	result1, #0 wz
1e88c     41 01 00 5F 
1e890     32 FA 05 56 |  if_ne	mov	result1, ##@LR__4291
1e894     A8 01 90 5D |  if_ne	jmp	#LR__3143
1e898     18 4E 05 F1 | 	add	fp, #24
1e89c     A7 20 02 FB | 	rdlong	local02, fp
1e8a0     78 00 00 FF 
1e8a4     00 20 06 F5 | 	and	local02, ##61440
1e8a8     2C 4E 05 F1 | 	add	fp, #44
1e8ac     A7 20 62 FC | 	wrlong	local02, fp
1e8b0     38 4E 85 F1 | 	sub	fp, #56
1e8b4     A7 20 02 FB | 	rdlong	local02, fp
1e8b8     0C 4E 85 F1 | 	sub	fp, #12
1e8bc     10 21 C2 FA | 	rdbyte	local02, local02
1e8c0     2E 20 0E F2 | 	cmp	local02, #46 wz
1e8c4     08 4E 05 A1 |  if_e	add	fp, #8
1e8c8     A7 04 68 AC |  if_e	wrlong	#2, fp
1e8cc     08 4E C5 F3 | 	sumz	fp, #8
1e8d0     A7 00 68 5C |  if_ne	wrlong	#0, fp
1e8d4     08 4E 85 51 |  if_ne	sub	fp, #8
1e8d8     44 4E 05 F1 | 	add	fp, #68
1e8dc     A7 20 02 FB | 	rdlong	local02, fp
1e8e0     44 4E 85 F1 | 	sub	fp, #68
1e8e4     08 00 00 FF 
1e8e8     00 20 0E F2 | 	cmp	local02, ##4096 wz
1e8ec     18 00 90 5D |  if_ne	jmp	#LR__3133
1e8f0     08 4E 05 F1 | 	add	fp, #8
1e8f4     A7 20 02 FB | 	rdlong	local02, fp
1e8f8     10 20 46 F5 | 	or	local02, #16
1e8fc     A7 20 62 FC | 	wrlong	local02, fp
1e900     08 4E 85 F1 | 	sub	fp, #8
1e904     AC 00 90 FD | 	jmp	#LR__3138
1e908                 | LR__3133
1e908     44 4E 05 F1 | 	add	fp, #68
1e90c     A7 20 02 FB | 	rdlong	local02, fp
1e910     44 4E 85 F1 | 	sub	fp, #68
1e914     10 00 00 FF 
1e918     00 20 0E F2 | 	cmp	local02, ##8192 wz
1e91c     44 4E 05 51 |  if_ne	add	fp, #68
1e920     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1e924     44 4E 85 51 |  if_ne	sub	fp, #68
1e928     18 00 00 5F 
1e92c     00 1E 0E 52 |  if_ne	cmp	local01, ##12288 wz
1e930     44 4E 05 51 |  if_ne	add	fp, #68
1e934     0F 23 02 56 |  if_ne	mov	local03, local01
1e938     44 4E 85 51 |  if_ne	sub	fp, #68
1e93c     20 00 00 5F 
1e940     00 22 0E 52 |  if_ne	cmp	local03, ##16384 wz
1e944     18 00 90 5D |  if_ne	jmp	#LR__3134
1e948     08 4E 05 F1 | 	add	fp, #8
1e94c     A7 20 02 FB | 	rdlong	local02, fp
1e950     04 20 46 F5 | 	or	local02, #4
1e954     A7 20 62 FC | 	wrlong	local02, fp
1e958     08 4E 85 F1 | 	sub	fp, #8
1e95c     54 00 90 FD | 	jmp	#LR__3137
1e960                 | LR__3134
1e960     18 4E 05 F1 | 	add	fp, #24
1e964     A7 20 02 FB | 	rdlong	local02, fp
1e968     18 4E 85 F1 | 	sub	fp, #24
1e96c     92 20 CE F7 | 	test	local02, #146 wz
1e970     18 00 90 5D |  if_ne	jmp	#LR__3135
1e974     08 4E 05 F1 | 	add	fp, #8
1e978     A7 20 02 FB | 	rdlong	local02, fp
1e97c     01 20 46 F5 | 	or	local02, #1
1e980     A7 20 62 FC | 	wrlong	local02, fp
1e984     08 4E 85 F1 | 	sub	fp, #8
1e988     28 00 90 FD | 	jmp	#LR__3136
1e98c                 | LR__3135
1e98c     44 4E 05 F1 | 	add	fp, #68
1e990     A7 24 02 FB | 	rdlong	local04, fp
1e994     44 4E 85 F1 | 	sub	fp, #68
1e998     08 00 00 FF 
1e99c     00 24 0E F2 | 	cmp	local04, ##4096 wz
1e9a0     08 4E 05 51 |  if_ne	add	fp, #8
1e9a4     A7 24 02 5B |  if_ne	rdlong	local04, fp
1e9a8     20 24 46 55 |  if_ne	or	local04, #32
1e9ac     A7 24 62 5C |  if_ne	wrlong	local04, fp
1e9b0     08 4E 85 51 |  if_ne	sub	fp, #8
1e9b4                 | LR__3136
1e9b4                 | LR__3137
1e9b4                 | LR__3138
1e9b4     08 4E 05 F1 | 	add	fp, #8
1e9b8     A7 24 02 FB | 	rdlong	local04, fp
1e9bc     08 4E 85 F1 | 	sub	fp, #8
1e9c0     03 00 00 FF 
1e9c4     2C E9 05 F1 | 	add	ptr___system__dat__, ##1836
1e9c8     F4 1E 02 FB | 	rdlong	local01, ptr___system__dat__
1e9cc     03 00 00 FF 
1e9d0     2C E9 85 F1 | 	sub	ptr___system__dat__, ##1836
1e9d4     0F 25 CA F7 | 	test	local04, local01 wz
1e9d8     E0 FD 9F AD |  if_e	jmp	#LR__3131
1e9dc                 | LR__3139
1e9dc     0C 4E 05 F1 | 	add	fp, #12
1e9e0     A7 12 02 FB | 	rdlong	arg01, fp
1e9e4     0C 4E 85 F1 | 	sub	fp, #12
1e9e8     09 27 02 F6 | 	mov	local05, arg01
1e9ec     97 06 48 FB | 	callpa	#(@LR__3141-@LR__3140)>>2,fcache_load_ptr_
1e9f0                 | LR__3140
1e9f0     13 FB C9 FA | 	rdbyte	result1, local05 wz
1e9f4     01 26 06 51 |  if_ne	add	local05, #1
1e9f8     F4 FF 9F 5D |  if_ne	jmp	#LR__3140
1e9fc                 | LR__3141
1e9fc     13 13 C2 F2 | 	subr	arg01, local05
1ea00     01 12 06 F1 | 	add	arg01, #1
1ea04     64 E0 BF FD | 	call	#__system___gc_alloc_managed
1ea08     48 4E 05 F1 | 	add	fp, #72
1ea0c     A7 FA 61 FC | 	wrlong	result1, fp
1ea10     48 4E 85 F1 | 	sub	fp, #72
1ea14     00 FA 0D F2 | 	cmp	result1, #0 wz
1ea18     18 00 90 AD |  if_e	jmp	#LR__3142
1ea1c     48 4E 05 F1 | 	add	fp, #72
1ea20     A7 12 02 FB | 	rdlong	arg01, fp
1ea24     3C 4E 85 F1 | 	sub	fp, #60
1ea28     A7 14 02 FB | 	rdlong	arg02, fp
1ea2c     0C 4E 85 F1 | 	sub	fp, #12
1ea30     34 A2 BF FD | 	call	#__system____builtin_strcpy
1ea34                 | LR__3142
1ea34     48 4E 05 F1 | 	add	fp, #72
1ea38     A7 FA 01 FB | 	rdlong	result1, fp
1ea3c     48 4E 85 F1 | 	sub	fp, #72
1ea40                 | LR__3143
1ea40     A7 F0 03 F6 | 	mov	ptra, fp
1ea44     B2 00 A0 FD | 	call	#popregs_
1ea48                 | __system___basic_dir_ret
1ea48     2D 00 64 FD | 	ret
1ea4c                 | 
1ea4c                 | __system__pack_0489
1ea4c     09 01 02 F6 | 	mov	_var01, arg01
1ea50     7F 16 06 F1 | 	add	arg03, #127
1ea54     04 18 CE F7 | 	test	arg04, #4 wz
1ea58     10 00 90 AD |  if_e	jmp	#LR__3150
1ea5c     00 00 0E F2 | 	cmp	_var01, #0 wz
1ea60     16 00 C6 A9 |  if_e	decod	_var01, #22
1ea64     F7 00 26 F4 | 	bith	_var01, #247
1ea68     B4 00 90 FD | 	jmp	#LR__3159
1ea6c                 | LR__3150
1ea6c     02 18 CE F7 | 	test	arg04, #2 wz
1ea70     00 C0 3F 5F 
1ea74     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
1ea78     00 14 06 56 |  if_ne	mov	arg02, #0
1ea7c     A0 00 90 5D |  if_ne	jmp	#LR__3158
1ea80     08 18 CE F7 | 	test	arg04, #8 wz
1ea84     00 00 06 56 |  if_ne	mov	_var01, #0
1ea88     94 00 90 5D |  if_ne	jmp	#LR__3157
1ea8c     FF 16 56 F2 | 	cmps	arg03, #255 wc
1ea90     00 C0 3F 3F 
1ea94     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
1ea98     00 14 06 36 |  if_ae	mov	arg02, #0
1ea9c     80 00 90 3D |  if_ae	jmp	#LR__3156
1eaa0     01 16 56 F2 | 	cmps	arg03, #1 wc
1eaa4     6C 00 90 3D |  if_ae	jmp	#LR__3154
1eaa8     01 14 46 F0 | 	shr	arg02, #1
1eaac     00 03 02 F6 | 	mov	_var02, _var01
1eab0     01 02 06 F5 | 	and	_var02, #1
1eab4     1F 02 66 F0 | 	shl	_var02, #31
1eab8     01 15 42 F5 | 	or	arg02, _var02
1eabc     01 00 46 F0 | 	shr	_var01, #1
1eac0     97 1E 48 FB | 	callpa	#(@LR__3152-@LR__3151)>>2,fcache_load_ptr_
1eac4                 | LR__3151
1eac4     00 16 56 F2 | 	cmps	arg03, #0 wc
1eac8     34 00 90 3D |  if_ae	jmp	#LR__3153
1eacc     00 00 0E F2 | 	cmp	_var01, #0 wz
1ead0     2C 00 90 AD |  if_e	jmp	#LR__3153
1ead4     0A 13 02 F6 | 	mov	arg01, arg02
1ead8     01 12 06 F5 | 	and	arg01, #1
1eadc     01 16 06 F1 | 	add	arg03, #1
1eae0     01 14 46 F0 | 	shr	arg02, #1
1eae4     00 03 02 F6 | 	mov	_var02, _var01
1eae8     01 02 06 F5 | 	and	_var02, #1
1eaec     1F 02 66 F0 | 	shl	_var02, #31
1eaf0     01 15 42 F5 | 	or	arg02, _var02
1eaf4     09 15 42 F5 | 	or	arg02, arg01
1eaf8     01 00 46 F0 | 	shr	_var01, #1
1eafc     C4 FF 9F FD | 	jmp	#LR__3151
1eb00                 | LR__3152
1eb00                 | LR__3153
1eb00     00 16 56 F2 | 	cmps	arg03, #0 wc
1eb04     18 00 90 3D |  if_ae	jmp	#LR__3155
1eb08     00 14 0E F2 | 	cmp	arg02, #0 wz
1eb0c     6F 14 62 FD | 	wrnz	arg02
1eb10     0C 00 90 FD | 	jmp	#LR__3155
1eb14                 | LR__3154
1eb14     17 01 06 F4 | 	bitl	_var01, #279
1eb18     17 16 66 F0 | 	shl	arg03, #23
1eb1c     0B 01 42 F5 | 	or	_var01, arg03
1eb20                 | LR__3155
1eb20                 | LR__3156
1eb20                 | LR__3157
1eb20                 | LR__3158
1eb20                 | LR__3159
1eb20     01 00 CE F7 | 	test	_var01, #1 wz
1eb24     01 14 46 55 |  if_ne	or	arg02, #1
1eb28     0A 17 02 F6 | 	mov	arg03, arg02
1eb2c     00 02 06 F6 | 	mov	_var02, #0
1eb30     FF FF 3F FF 
1eb34     FF 15 06 F1 | 	add	arg02, ##2147483647
1eb38     0B 15 12 F2 | 	cmp	arg02, arg03 wc
1eb3c     01 02 06 C6 |  if_b	mov	_var02, #1
1eb40     01 01 02 F1 | 	add	_var01, _var02
1eb44     01 18 CE F7 | 	test	arg04, #1 wz
1eb48     1F 00 26 54 |  if_ne	bith	_var01, #31
1eb4c     00 FB 01 F6 | 	mov	result1, _var01
1eb50                 | __system__pack_0489_ret
1eb50     2D 00 64 FD | 	ret
1eb54                 | 
1eb54                 | __system___rxtxioctl_0579
1eb54     00 15 0E F2 | 	cmp	arg02, #256 wz
1eb58     0C 00 90 AD |  if_e	jmp	#LR__3160
1eb5c     01 15 0E F2 | 	cmp	arg02, #257 wz
1eb60     1C 00 90 AD |  if_e	jmp	#LR__3161
1eb64     30 00 90 FD | 	jmp	#LR__3162
1eb68                 | LR__3160
1eb68     08 E8 05 F1 | 	add	ptr___system__dat__, #8
1eb6c     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1eb70     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
1eb74     0B FB 61 FC | 	wrlong	result1, arg03
1eb78     00 FA 05 F6 | 	mov	result1, #0
1eb7c     28 00 90 FD | 	jmp	#LR__3163
1eb80                 | LR__3161
1eb80     0B 13 02 FB | 	rdlong	arg01, arg03
1eb84     08 E8 05 F1 | 	add	ptr___system__dat__, #8
1eb88     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1eb8c     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
1eb90     00 FA 05 F6 | 	mov	result1, #0
1eb94     10 00 90 FD | 	jmp	#LR__3163
1eb98                 | LR__3162
1eb98     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1eb9c     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
1eba0     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1eba4     01 FA 65 F6 | 	neg	result1, #1
1eba8                 | LR__3163
1eba8                 | __system___rxtxioctl_0579_ret
1eba8     2D 00 64 FD | 	ret
1ebac                 | 
1ebac                 | __system____dummy_flush_0580
1ebac     00 FA 05 F6 | 	mov	result1, #0
1ebb0                 | __system____dummy_flush_0580_ret
1ebb0     2D 00 64 FD | 	ret
1ebb4                 | 
1ebb4                 | __system___vfsread
1ebb4     03 4A 05 F6 | 	mov	COUNT_, #3
1ebb8     A8 00 A0 FD | 	call	#pushregs_
1ebbc     28 F0 07 F1 | 	add	ptra, #40
1ebc0     04 4E 05 F1 | 	add	fp, #4
1ebc4     A7 12 62 FC | 	wrlong	arg01, fp
1ebc8     04 4E 05 F1 | 	add	fp, #4
1ebcc     A7 14 62 FC | 	wrlong	arg02, fp
1ebd0     04 4E 05 F1 | 	add	fp, #4
1ebd4     A7 16 62 FC | 	wrlong	arg03, fp
1ebd8     04 4E 85 F1 | 	sub	fp, #4
1ebdc     A7 FA 01 FB | 	rdlong	result1, fp
1ebe0     14 4E 05 F1 | 	add	fp, #20
1ebe4     A7 FA 61 FC | 	wrlong	result1, fp
1ebe8     04 4E 05 F1 | 	add	fp, #4
1ebec     A7 00 68 FC | 	wrlong	#0, fp
1ebf0     1C 4E 85 F1 | 	sub	fp, #28
1ebf4     A7 12 02 FB | 	rdlong	arg01, fp
1ebf8     04 4E 85 F1 | 	sub	fp, #4
1ebfc     08 12 06 F1 | 	add	arg01, #8
1ec00     09 FB 01 FB | 	rdlong	result1, arg01
1ec04     01 FA CD F7 | 	test	result1, #1 wz
1ec08     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1ec0c     F4 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
1ec10     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1ec14     01 FA 65 A6 |  if_e	neg	result1, #1
1ec18     74 02 90 AD |  if_e	jmp	#LR__3176
1ec1c     04 4E 05 F1 | 	add	fp, #4
1ec20     A7 12 02 FB | 	rdlong	arg01, fp
1ec24     04 4E 85 F1 | 	sub	fp, #4
1ec28     14 12 06 F1 | 	add	arg01, #20
1ec2c     09 FB 09 FB | 	rdlong	result1, arg01 wz
1ec30     B8 00 90 AD |  if_e	jmp	#LR__3171
1ec34     04 4E 05 F1 | 	add	fp, #4
1ec38     A7 12 02 FB | 	rdlong	arg01, fp
1ec3c     09 17 02 F6 | 	mov	arg03, arg01
1ec40     14 16 06 F1 | 	add	arg03, #20
1ec44     0B 1F 02 FB | 	rdlong	local01, arg03
1ec48     0F 21 02 F6 | 	mov	local02, local01
1ec4c     13 1E 46 F7 | 	zerox	local01, #19
1ec50     14 20 46 F0 | 	shr	local02, #20
1ec54     02 20 66 F0 | 	shl	local02, #2
1ec58     ED 20 02 F1 | 	add	local02, __methods__
1ec5c     10 21 02 FB | 	rdlong	local02, local02
1ec60     04 4E 05 F1 | 	add	fp, #4
1ec64     A7 14 02 FB | 	rdlong	arg02, fp
1ec68     04 4E 05 F1 | 	add	fp, #4
1ec6c     A7 16 02 FB | 	rdlong	arg03, fp
1ec70     0C 4E 85 F1 | 	sub	fp, #12
1ec74     F2 22 02 F6 | 	mov	local03, objptr
1ec78     0F E5 01 F6 | 	mov	objptr, local01
1ec7c     2D 20 62 FD | 	call	local02
1ec80     11 E5 01 F6 | 	mov	objptr, local03
1ec84     10 4E 05 F1 | 	add	fp, #16
1ec88     A7 FA 61 FC | 	wrlong	result1, fp
1ec8c     10 4E 85 F1 | 	sub	fp, #16
1ec90     00 FA 55 F2 | 	cmps	result1, #0 wc
1ec94     44 00 90 3D |  if_ae	jmp	#LR__3170
1ec98     04 4E 05 F1 | 	add	fp, #4
1ec9c     A7 22 02 FB | 	rdlong	local03, fp
1eca0     11 1F 02 F6 | 	mov	local01, local03
1eca4     08 22 06 F1 | 	add	local03, #8
1eca8     11 21 02 FB | 	rdlong	local02, local03
1ecac     20 20 46 F5 | 	or	local02, #32
1ecb0     08 1E 06 F1 | 	add	local01, #8
1ecb4     0F 21 62 FC | 	wrlong	local02, local01
1ecb8     0C 4E 05 F1 | 	add	fp, #12
1ecbc     A7 12 0A FB | 	rdlong	arg01, fp wz
1ecc0     10 4E 85 F1 | 	sub	fp, #16
1ecc4     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1ecc8     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1eccc     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1ecd0     01 FA 65 56 |  if_ne	neg	result1, #1
1ecd4     00 FA 05 A6 |  if_e	mov	result1, #0
1ecd8     B4 01 90 FD | 	jmp	#LR__3176
1ecdc                 | LR__3170
1ecdc     10 4E 05 F1 | 	add	fp, #16
1ece0     A7 FA 01 FB | 	rdlong	result1, fp
1ece4     10 4E 85 F1 | 	sub	fp, #16
1ece8     A4 01 90 FD | 	jmp	#LR__3176
1ecec                 | LR__3171
1ecec     04 4E 05 F1 | 	add	fp, #4
1ecf0     A7 12 02 FB | 	rdlong	arg01, fp
1ecf4     20 12 06 F1 | 	add	arg01, #32
1ecf8     09 13 0A FB | 	rdlong	arg01, arg01 wz
1ecfc     14 4E 05 F1 | 	add	fp, #20
1ed00     A7 12 62 FC | 	wrlong	arg01, fp
1ed04     18 4E 85 F1 | 	sub	fp, #24
1ed08     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1ed0c     F4 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
1ed10     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1ed14     01 FA 65 A6 |  if_e	neg	result1, #1
1ed18     74 01 90 AD |  if_e	jmp	#LR__3176
1ed1c     04 4E 05 F1 | 	add	fp, #4
1ed20     A7 22 02 FB | 	rdlong	local03, fp
1ed24     04 4E 85 F1 | 	sub	fp, #4
1ed28     28 22 06 F1 | 	add	local03, #40
1ed2c     11 21 0A FB | 	rdlong	local02, local03 wz
1ed30     7C 00 90 AD |  if_e	jmp	#LR__3173
1ed34     04 4E 05 F1 | 	add	fp, #4
1ed38     A7 12 02 FB | 	rdlong	arg01, fp
1ed3c     09 23 02 F6 | 	mov	local03, arg01
1ed40     28 22 06 F1 | 	add	local03, #40
1ed44     11 1F 02 FB | 	rdlong	local01, local03
1ed48     0F 21 02 F6 | 	mov	local02, local01
1ed4c     13 1E 46 F7 | 	zerox	local01, #19
1ed50     14 20 46 F0 | 	shr	local02, #20
1ed54     02 20 66 F0 | 	shl	local02, #2
1ed58     ED 20 02 F1 | 	add	local02, __methods__
1ed5c     10 21 02 FB | 	rdlong	local02, local02
1ed60     20 4E 05 F1 | 	add	fp, #32
1ed64     A7 16 02 F6 | 	mov	arg03, fp
1ed68     24 4E 85 F1 | 	sub	fp, #36
1ed6c     00 15 06 F6 | 	mov	arg02, #256
1ed70     F2 22 02 F6 | 	mov	local03, objptr
1ed74     0F E5 01 F6 | 	mov	objptr, local01
1ed78     2D 20 62 FD | 	call	local02
1ed7c     11 E5 01 F6 | 	mov	objptr, local03
1ed80     10 4E 05 F1 | 	add	fp, #16
1ed84     A7 FA 61 FC | 	wrlong	result1, fp
1ed88     00 FA 4D F2 | 	cmps	result1, #0 wz
1ed8c     10 4E 85 F1 | 	sub	fp, #16
1ed90     1C 00 90 5D |  if_ne	jmp	#LR__3172
1ed94     24 4E 05 F1 | 	add	fp, #36
1ed98     A7 20 02 FB | 	rdlong	local02, fp
1ed9c     24 4E 85 F1 | 	sub	fp, #36
1eda0     02 20 CE F7 | 	test	local02, #2 wz
1eda4     20 4E 05 51 |  if_ne	add	fp, #32
1eda8     A7 02 68 5C |  if_ne	wrlong	#1, fp
1edac     20 4E 85 51 |  if_ne	sub	fp, #32
1edb0                 | LR__3172
1edb0                 | LR__3173
1edb0     10 4E 05 F1 | 	add	fp, #16
1edb4     A7 00 68 FC | 	wrlong	#0, fp
1edb8     10 4E 85 F1 | 	sub	fp, #16
1edbc                 | LR__3174
1edbc     0C 4E 05 F1 | 	add	fp, #12
1edc0     A7 22 02 FB | 	rdlong	local03, fp
1edc4     0C 4E 85 F1 | 	sub	fp, #12
1edc8     01 22 16 F2 | 	cmp	local03, #1 wc
1edcc     B4 00 90 CD |  if_b	jmp	#LR__3175
1edd0     18 4E 05 F1 | 	add	fp, #24
1edd4     A7 20 02 FB | 	rdlong	local02, fp
1edd8     10 23 02 F6 | 	mov	local03, local02
1eddc     13 22 46 F7 | 	zerox	local03, #19
1ede0     14 20 46 F0 | 	shr	local02, #20
1ede4     02 20 66 F0 | 	shl	local02, #2
1ede8     ED 20 02 F1 | 	add	local02, __methods__
1edec     10 21 02 FB | 	rdlong	local02, local02
1edf0     14 4E 85 F1 | 	sub	fp, #20
1edf4     A7 12 02 FB | 	rdlong	arg01, fp
1edf8     04 4E 85 F1 | 	sub	fp, #4
1edfc     F2 1E 02 F6 | 	mov	local01, objptr
1ee00     11 E5 01 F6 | 	mov	objptr, local03
1ee04     2D 20 62 FD | 	call	local02
1ee08     0F E5 01 F6 | 	mov	objptr, local01
1ee0c     14 4E 05 F1 | 	add	fp, #20
1ee10     A7 FA 61 FC | 	wrlong	result1, fp
1ee14     14 4E 85 F1 | 	sub	fp, #20
1ee18     00 FA 55 F2 | 	cmps	result1, #0 wc
1ee1c     64 00 90 CD |  if_b	jmp	#LR__3175
1ee20     1C 4E 05 F1 | 	add	fp, #28
1ee24     A7 22 02 FB | 	rdlong	local03, fp
1ee28     11 21 02 F6 | 	mov	local02, local03
1ee2c     01 20 06 F1 | 	add	local02, #1
1ee30     A7 20 62 FC | 	wrlong	local02, fp
1ee34     08 4E 85 F1 | 	sub	fp, #8
1ee38     A7 20 02 FB | 	rdlong	local02, fp
1ee3c     11 21 42 FC | 	wrbyte	local02, local03
1ee40     04 4E 85 F1 | 	sub	fp, #4
1ee44     A7 22 02 FB | 	rdlong	local03, fp
1ee48     01 22 06 F1 | 	add	local03, #1
1ee4c     A7 22 62 FC | 	wrlong	local03, fp
1ee50     04 4E 85 F1 | 	sub	fp, #4
1ee54     A7 22 02 FB | 	rdlong	local03, fp
1ee58     01 22 86 F1 | 	sub	local03, #1
1ee5c     A7 22 62 FC | 	wrlong	local03, fp
1ee60     14 4E 05 F1 | 	add	fp, #20
1ee64     A7 22 0A FB | 	rdlong	local03, fp wz
1ee68     20 4E 85 F1 | 	sub	fp, #32
1ee6c     4C FF 9F AD |  if_e	jmp	#LR__3174
1ee70     14 4E 05 F1 | 	add	fp, #20
1ee74     A7 20 02 FB | 	rdlong	local02, fp
1ee78     14 4E 85 F1 | 	sub	fp, #20
1ee7c     0A 20 0E F2 | 	cmp	local02, #10 wz
1ee80     38 FF 9F 5D |  if_ne	jmp	#LR__3174
1ee84                 | LR__3175
1ee84     10 4E 05 F1 | 	add	fp, #16
1ee88     A7 FA 01 FB | 	rdlong	result1, fp
1ee8c     10 4E 85 F1 | 	sub	fp, #16
1ee90                 | LR__3176
1ee90     A7 F0 03 F6 | 	mov	ptra, fp
1ee94     B2 00 A0 FD | 	call	#popregs_
1ee98                 | __system___vfsread_ret
1ee98     2D 00 64 FD | 	ret
1ee9c                 | 
1ee9c                 | __system____default_filbuf
1ee9c     04 4A 05 F6 | 	mov	COUNT_, #4
1eea0     A8 00 A0 FD | 	call	#pushregs_
1eea4     09 1F 02 F6 | 	mov	local01, arg01
1eea8     0F 21 02 FB | 	rdlong	local02, local01
1eeac     0C 20 06 F1 | 	add	local02, #12
1eeb0     10 FB 09 FB | 	rdlong	result1, local02 wz
1eeb4     0C 20 86 F1 | 	sub	local02, #12
1eeb8     20 00 90 5D |  if_ne	jmp	#LR__3180
1eebc     14 20 06 F1 | 	add	local02, #20
1eec0     10 FB 01 F6 | 	mov	result1, local02
1eec4     04 20 86 F1 | 	sub	local02, #4
1eec8     10 FB 61 FC | 	wrlong	result1, local02
1eecc     04 20 86 F1 | 	sub	local02, #4
1eed0     02 00 80 FF 
1eed4     10 01 68 FC | 	wrlong	##1024, local02
1eed8     0C 20 86 F1 | 	sub	local02, #12
1eedc                 | LR__3180
1eedc     14 1E 06 F1 | 	add	local01, #20
1eee0     0F 23 02 FB | 	rdlong	local03, local01
1eee4     11 25 02 F6 | 	mov	local04, local03
1eee8     14 1E 86 F1 | 	sub	local01, #20
1eeec     13 24 46 F7 | 	zerox	local04, #19
1eef0     14 22 46 F0 | 	shr	local03, #20
1eef4     02 22 66 F0 | 	shl	local03, #2
1eef8     ED 22 02 F1 | 	add	local03, __methods__
1eefc     11 23 02 FB | 	rdlong	local03, local03
1ef00     10 20 06 F1 | 	add	local02, #16
1ef04     10 15 02 FB | 	rdlong	arg02, local02
1ef08     04 20 86 F1 | 	sub	local02, #4
1ef0c     10 17 02 FB | 	rdlong	arg03, local02
1ef10     0C 20 86 F1 | 	sub	local02, #12
1ef14     0F 13 02 F6 | 	mov	arg01, local01
1ef18     F2 1E 02 F6 | 	mov	local01, objptr
1ef1c     12 E5 01 F6 | 	mov	objptr, local04
1ef20     2D 22 62 FD | 	call	local03
1ef24     0F E5 01 F6 | 	mov	objptr, local01
1ef28     FD 24 02 F6 | 	mov	local04, result1
1ef2c     00 24 56 F2 | 	cmps	local04, #0 wc
1ef30     01 FA 65 C6 |  if_b	neg	result1, #1
1ef34     28 00 90 CD |  if_b	jmp	#LR__3181
1ef38     10 25 62 FC | 	wrlong	local04, local02
1ef3c     10 20 06 F1 | 	add	local02, #16
1ef40     10 23 02 FB | 	rdlong	local03, local02
1ef44     0C 20 86 F1 | 	sub	local02, #12
1ef48     10 23 62 FC | 	wrlong	local03, local02
1ef4c     04 20 06 F1 | 	add	local02, #4
1ef50     10 23 02 FB | 	rdlong	local03, local02
1ef54     01 22 46 F5 | 	or	local03, #1
1ef58     10 23 62 FC | 	wrlong	local03, local02
1ef5c     12 FB 01 F6 | 	mov	result1, local04
1ef60                 | LR__3181
1ef60     A7 F0 03 F6 | 	mov	ptra, fp
1ef64     B2 00 A0 FD | 	call	#popregs_
1ef68                 | __system____default_filbuf_ret
1ef68     2D 00 64 FD | 	ret
1ef6c                 | 
1ef6c                 | __system__getlower_0965
1ef6c     41 12 56 F2 | 	cmps	arg01, #65 wc
1ef70     10 00 90 CD |  if_b	jmp	#LR__3190
1ef74     5B 12 56 F2 | 	cmps	arg01, #91 wc
1ef78     09 FB 01 C6 |  if_b	mov	result1, arg01
1ef7c     20 FA 05 C1 |  if_b	add	result1, #32
1ef80     04 00 90 CD |  if_b	jmp	#__system__getlower_0965_ret
1ef84                 | LR__3190
1ef84     09 FB 01 F6 | 	mov	result1, arg01
1ef88                 | __system__getlower_0965_ret
1ef88     2D 00 64 FD | 	ret
1ef8c                 | 
1ef8c                 | __system___pat_match
1ef8c     08 4A 05 F6 | 	mov	COUNT_, #8
1ef90     A8 00 A0 FD | 	call	#pushregs_
1ef94     09 1F 02 F6 | 	mov	local01, arg01
1ef98                 | LR__3200
1ef98     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
1ef9c     0F 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
1efa0     0A 21 C2 5A |  if_ne	rdbyte	local02, arg02
1efa4     2A 20 0E 52 |  if_ne	cmp	local02, #42 wz
1efa8     2C 00 90 AD |  if_e	jmp	#LR__3201
1efac     0A 13 C2 FA | 	rdbyte	arg01, arg02
1efb0     B8 FF BF FD | 	call	#__system__getlower_0965
1efb4     FD 22 02 F6 | 	mov	local03, result1
1efb8     0F 13 C2 FA | 	rdbyte	arg01, local01
1efbc     AC FF BF FD | 	call	#__system__getlower_0965
1efc0     11 FB 09 F2 | 	cmp	result1, local03 wz
1efc4     00 FA 05 56 |  if_ne	mov	result1, #0
1efc8     FC 00 90 5D |  if_ne	jmp	#LR__3209
1efcc     01 1E 06 F1 | 	add	local01, #1
1efd0     01 14 06 F1 | 	add	arg02, #1
1efd4     C0 FF 9F FD | 	jmp	#LR__3200
1efd8                 | LR__3201
1efd8     0A 23 C2 FA | 	rdbyte	local03, arg02
1efdc     2A 22 0E F2 | 	cmp	local03, #42 wz
1efe0     D4 00 90 5D |  if_ne	jmp	#LR__3208
1efe4     01 14 06 F1 | 	add	arg02, #1
1efe8     0A 21 C2 FA | 	rdbyte	local02, arg02
1efec     01 14 86 F1 | 	sub	arg02, #1
1eff0     2E 20 0E F2 | 	cmp	local02, #46 wz
1eff4     28 00 90 5D |  if_ne	jmp	#LR__3202
1eff8     02 14 06 F1 | 	add	arg02, #2
1effc     0A 21 C2 FA | 	rdbyte	local02, arg02
1f000     02 14 86 F1 | 	sub	arg02, #2
1f004     2A 20 0E F2 | 	cmp	local02, #42 wz
1f008     03 14 06 A1 |  if_e	add	arg02, #3
1f00c     0A 25 C2 AA |  if_e	rdbyte	local04, arg02
1f010     03 14 86 A1 |  if_e	sub	arg02, #3
1f014     12 27 0A A6 |  if_e	mov	local05, local04 wz
1f018     01 FA 05 A6 |  if_e	mov	result1, #1
1f01c     A8 00 90 AD |  if_e	jmp	#LR__3209
1f020                 | LR__3202
1f020     01 14 06 F1 | 	add	arg02, #1
1f024     00 28 06 F6 | 	mov	local06, #0
1f028     97 1E 48 FB | 	callpa	#(@LR__3205-@LR__3203)>>2,fcache_load_ptr_
1f02c                 | LR__3203
1f02c     14 2B 02 F6 | 	mov	local07, local06
1f030     0A 2B 02 F1 | 	add	local07, arg02
1f034     15 2B CA FA | 	rdbyte	local07, local07 wz
1f038     14 27 02 56 |  if_ne	mov	local05, local06
1f03c     01 26 06 51 |  if_ne	add	local05, #1
1f040     13 29 02 56 |  if_ne	mov	local06, local05
1f044     E4 FF 9F 5D |  if_ne	jmp	#LR__3203
1f048     00 2C 06 F6 | 	mov	local08, #0
1f04c                 | LR__3204
1f04c     16 2B 02 F6 | 	mov	local07, local08
1f050     0F 2B 02 F1 | 	add	local07, local01
1f054     15 2B CA FA | 	rdbyte	local07, local07 wz
1f058     16 27 02 56 |  if_ne	mov	local05, local08
1f05c     01 26 06 51 |  if_ne	add	local05, #1
1f060     13 2D 02 56 |  if_ne	mov	local08, local05
1f064     E4 FF 9F 5D |  if_ne	jmp	#LR__3204
1f068                 | LR__3205
1f068     14 2D 52 F2 | 	cmps	local08, local06 wc
1f06c     00 FA 05 C6 |  if_b	mov	result1, #0
1f070     54 00 90 CD |  if_b	jmp	#LR__3209
1f074     16 21 02 F6 | 	mov	local02, local08
1f078     14 21 82 F1 | 	sub	local02, local06
1f07c     10 1F 02 F1 | 	add	local01, local02
1f080                 | LR__3206
1f080     01 28 56 F2 | 	cmps	local06, #1 wc
1f084     30 00 90 CD |  if_b	jmp	#LR__3207
1f088     0F 13 C2 FA | 	rdbyte	arg01, local01
1f08c     DC FE BF FD | 	call	#__system__getlower_0965
1f090     FD 2C 02 F6 | 	mov	local08, result1
1f094     0A 13 C2 FA | 	rdbyte	arg01, arg02
1f098     D0 FE BF FD | 	call	#__system__getlower_0965
1f09c     FD 2C 0A F2 | 	cmp	local08, result1 wz
1f0a0     00 FA 05 56 |  if_ne	mov	result1, #0
1f0a4     20 00 90 5D |  if_ne	jmp	#LR__3209
1f0a8     01 1E 06 F1 | 	add	local01, #1
1f0ac     01 14 06 F1 | 	add	arg02, #1
1f0b0     01 28 86 F1 | 	sub	local06, #1
1f0b4     C8 FF 9F FD | 	jmp	#LR__3206
1f0b8                 | LR__3207
1f0b8                 | LR__3208
1f0b8     0A 2D CA FA | 	rdbyte	local08, arg02 wz
1f0bc     0F 2B CA AA |  if_e	rdbyte	local07, local01 wz
1f0c0     01 FA 05 A6 |  if_e	mov	result1, #1
1f0c4     00 FA 05 56 |  if_ne	mov	result1, #0
1f0c8                 | LR__3209
1f0c8     A7 F0 03 F6 | 	mov	ptra, fp
1f0cc     B2 00 A0 FD | 	call	#popregs_
1f0d0                 | __system___pat_match_ret
1f0d0     2D 00 64 FD | 	ret
1f0d4                 | 
1f0d4                 | _fatfs_cc_ff_uni2oem
1f0d4     00 00 06 F6 | 	mov	_var01, #0
1f0d8     80 12 16 F2 | 	cmp	arg01, #128 wc
1f0dc     09 01 02 C6 |  if_b	mov	_var01, arg01
1f0e0     58 00 90 CD |  if_b	jmp	#LR__3214
1f0e4     80 00 00 FF 
1f0e8     00 12 16 F2 | 	cmp	arg01, ##65536 wc
1f0ec     4C 00 90 3D |  if_ae	jmp	#LR__3213
1f0f0     0A FB 31 F9 | 	getword	result1, arg02, #0
1f0f4     01 00 00 FF 
1f0f8     52 FB 0D F2 | 	cmp	result1, ##850 wz
1f0fc     3C 00 90 5D |  if_ne	jmp	#LR__3213
1f100                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
1f100     00 00 06 F6 | 	mov	_var01, #0
1f104     97 14 48 FB | 	callpa	#(@LR__3211-@LR__3210)>>2,fcache_load_ptr_
1f108                 | LR__3210
1f108     00 FB 31 F9 | 	getword	result1, _var01, #0
1f10c     80 FA 15 F2 | 	cmp	result1, #128 wc
1f110     1C 00 90 3D |  if_ae	jmp	#LR__3212
1f114     00 FB 31 F9 | 	getword	result1, _var01, #0
1f118     01 FA 65 F0 | 	shl	result1, #1
1f11c     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
1f120     FD FA E1 FA | 	rdword	result1, result1
1f124     FD 12 0A F2 | 	cmp	arg01, result1 wz
1f128     01 00 06 51 |  if_ne	add	_var01, #1
1f12c     D8 FF 9F 5D |  if_ne	jmp	#LR__3210
1f130                 | LR__3211
1f130                 | LR__3212
1f130     00 01 32 F9 | 	getword	_var01, _var01, #0
1f134     80 00 06 F1 | 	add	_var01, #128
1f138     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
1f13c                 | LR__3213
1f13c                 | LR__3214
1f13c                 | ' 			c = (c + 0x80) & 0xFF;
1f13c                 | ' 		}
1f13c                 | ' 	}
1f13c                 | ' 
1f13c                 | ' 	return c;
1f13c     00 FB 01 F6 | 	mov	result1, _var01
1f140                 | _fatfs_cc_ff_uni2oem_ret
1f140     2D 00 64 FD | 	ret
1f144                 | 
1f144                 | _fatfs_cc_ff_oem2uni
1f144     00 00 06 F6 | 	mov	_var01, #0
1f148     09 FB 31 F9 | 	getword	result1, arg01, #0
1f14c     80 FA 15 F2 | 	cmp	result1, #128 wc
1f150     09 01 02 C6 |  if_b	mov	_var01, arg01
1f154     2C 00 90 CD |  if_b	jmp	#LR__3221
1f158     0A 15 32 F9 | 	getword	arg02, arg02, #0
1f15c     01 00 00 FF 
1f160     52 15 0E F2 | 	cmp	arg02, ##850 wz
1f164     1C 00 90 5D |  if_ne	jmp	#LR__3220
1f168     09 FB 31 F9 | 	getword	result1, arg01, #0
1f16c     00 FB 15 F2 | 	cmp	result1, #256 wc
1f170     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
1f174     80 12 86 C1 |  if_b	sub	arg01, #128
1f178     01 12 66 C0 |  if_b	shl	arg01, #1
1f17c     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
1f180     09 01 E2 CA |  if_b	rdword	_var01, arg01
1f184                 | LR__3220
1f184                 | LR__3221
1f184                 | ' 		}
1f184                 | ' 	}
1f184                 | ' 
1f184                 | ' 	return c;
1f184     00 FB 01 F6 | 	mov	result1, _var01
1f188                 | _fatfs_cc_ff_oem2uni_ret
1f188     2D 00 64 FD | 	ret
1f18c                 | 
1f18c                 | _fatfs_cc_ff_wtoupper
1f18c     09 01 02 F6 | 	mov	_var01, arg01
1f190     80 00 00 FF 
1f194     00 00 16 F2 | 	cmp	_var01, ##65536 wc
1f198     60 01 90 3D |  if_ae	jmp	#LR__3243
1f19c     00 03 02 F6 | 	mov	_var02, _var01
1f1a0     01 01 32 F9 | 	getword	_var01, _var02, #0
1f1a4     08 00 00 FF 
1f1a8     00 00 16 F2 | 	cmp	_var01, ##4096 wc
1f1ac     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
1f1b0     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
1f1b4     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
1f1b8     01 00 00 3F 
1f1bc     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
1f1c0     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
1f1c4     01 00 00 3F 
1f1c8     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
1f1cc     02 07 02 F6 | 	mov	_var04, _var03
1f1d0                 | ' 		uc = (WORD)uni;
1f1d0                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
1f1d0                 | ' 		for (;;) {
1f1d0                 | LR__3230
1f1d0     03 09 E2 FA | 	rdword	_var05, _var04
1f1d4     04 05 02 F6 | 	mov	_var03, _var05
1f1d8     0F 04 4E F7 | 	zerox	_var03, #15 wz
1f1dc     02 06 06 F1 | 	add	_var04, #2
1f1e0     14 01 90 AD |  if_e	jmp	#LR__3242
1f1e4     01 05 32 F9 | 	getword	_var03, _var02, #0
1f1e8     04 01 32 F9 | 	getword	_var01, _var05, #0
1f1ec     00 05 12 F2 | 	cmp	_var03, _var01 wc
1f1f0     04 01 90 CD |  if_b	jmp	#LR__3242
1f1f4     03 0B E2 FA | 	rdword	_var06, _var04
1f1f8     05 0D 32 F9 | 	getword	_var07, _var06, #0
1f1fc     08 0C 46 F0 | 	shr	_var07, #8
1f200     05 0B 32 F9 | 	getword	_var06, _var06, #0
1f204     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
1f208     01 05 32 F9 | 	getword	_var03, _var02, #0
1f20c     04 0F 32 F9 | 	getword	_var08, _var05, #0
1f210     05 01 32 F9 | 	getword	_var01, _var06, #0
1f214     00 0F 02 F1 | 	add	_var08, _var01
1f218     07 05 52 F2 | 	cmps	_var03, _var08 wc
1f21c     02 06 06 F1 | 	add	_var04, #2
1f220     C4 00 90 3D |  if_ae	jmp	#LR__3241
1f224                 | ' 				switch (cmd) {
1f224     06 11 32 F9 | 	getword	_var09, _var07, #0
1f228     09 10 26 F3 | 	fle	_var09, #9
1f22c     30 10 62 FD | 	jmprel	_var09
1f230                 | LR__3231
1f230     24 00 90 FD | 	jmp	#LR__3232
1f234     3C 00 90 FD | 	jmp	#LR__3233
1f238     54 00 90 FD | 	jmp	#LR__3234
1f23c     5C 00 90 FD | 	jmp	#LR__3235
1f240     64 00 90 FD | 	jmp	#LR__3236
1f244     6C 00 90 FD | 	jmp	#LR__3237
1f248     74 00 90 FD | 	jmp	#LR__3238
1f24c     7C 00 90 FD | 	jmp	#LR__3239
1f250     84 00 90 FD | 	jmp	#LR__3240
1f254     A0 00 90 FD | 	jmp	#LR__3242
1f258                 | LR__3232
1f258     01 03 32 F9 | 	getword	_var02, _var02, #0
1f25c     04 09 32 F9 | 	getword	_var05, _var05, #0
1f260     04 03 82 F1 | 	sub	_var02, _var05
1f264     01 02 66 F0 | 	shl	_var02, #1
1f268     03 03 02 F1 | 	add	_var02, _var04
1f26c     01 03 E2 FA | 	rdword	_var02, _var02
1f270     84 00 90 FD | 	jmp	#LR__3242
1f274                 | LR__3233
1f274     01 05 32 F9 | 	getword	_var03, _var02, #0
1f278     01 03 32 F9 | 	getword	_var02, _var02, #0
1f27c     04 09 32 F9 | 	getword	_var05, _var05, #0
1f280     04 03 82 F1 | 	sub	_var02, _var05
1f284     01 02 06 F5 | 	and	_var02, #1
1f288     02 03 C2 F2 | 	subr	_var02, _var03
1f28c     68 00 90 FD | 	jmp	#LR__3242
1f290                 | LR__3234
1f290     01 03 32 F9 | 	getword	_var02, _var02, #0
1f294     10 02 86 F1 | 	sub	_var02, #16
1f298     5C 00 90 FD | 	jmp	#LR__3242
1f29c                 | LR__3235
1f29c     01 03 32 F9 | 	getword	_var02, _var02, #0
1f2a0     20 02 86 F1 | 	sub	_var02, #32
1f2a4     50 00 90 FD | 	jmp	#LR__3242
1f2a8                 | LR__3236
1f2a8     01 03 32 F9 | 	getword	_var02, _var02, #0
1f2ac     30 02 86 F1 | 	sub	_var02, #48
1f2b0     44 00 90 FD | 	jmp	#LR__3242
1f2b4                 | LR__3237
1f2b4     01 03 32 F9 | 	getword	_var02, _var02, #0
1f2b8     1A 02 86 F1 | 	sub	_var02, #26
1f2bc     38 00 90 FD | 	jmp	#LR__3242
1f2c0                 | LR__3238
1f2c0     01 03 32 F9 | 	getword	_var02, _var02, #0
1f2c4     08 02 06 F1 | 	add	_var02, #8
1f2c8     2C 00 90 FD | 	jmp	#LR__3242
1f2cc                 | LR__3239
1f2cc     01 03 32 F9 | 	getword	_var02, _var02, #0
1f2d0     50 02 86 F1 | 	sub	_var02, #80
1f2d4     20 00 90 FD | 	jmp	#LR__3242
1f2d8                 | LR__3240
1f2d8     01 03 32 F9 | 	getword	_var02, _var02, #0
1f2dc     0E 00 00 FF 
1f2e0     60 02 86 F1 | 	sub	_var02, ##7264
1f2e4                 | ' 				}
1f2e4                 | ' 				break;
1f2e4     10 00 90 FD | 	jmp	#LR__3242
1f2e8                 | LR__3241
1f2e8     0F 0C 4E F7 | 	zerox	_var07, #15 wz
1f2ec     02 0A 06 AA |  if_e	mul	_var06, #2
1f2f0     05 07 02 A1 |  if_e	add	_var04, _var06
1f2f4     D8 FE 9F FD | 	jmp	#LR__3230
1f2f8                 | LR__3242
1f2f8     01 01 32 F9 | 	getword	_var01, _var02, #0
1f2fc                 | LR__3243
1f2fc                 | ' 		}
1f2fc                 | ' 		uni = uc;
1f2fc                 | ' 	}
1f2fc                 | ' 
1f2fc                 | ' 	return uni;
1f2fc     00 FB 01 F6 | 	mov	result1, _var01
1f300                 | _fatfs_cc_ff_wtoupper_ret
1f300     2D 00 64 FD | 	ret
1f304                 | 
1f304                 | _fatfs_cc_strncpy
1f304     09 01 02 F6 | 	mov	_var01, arg01
1f308     97 12 48 FB | 	callpa	#(@LR__3251-@LR__3250)>>2,fcache_load_ptr_
1f30c                 | ' 
1f30c                 | ' 	dscan = dst;
1f30c                 | ' 	sscan = src;
1f30c                 | ' 	count = n;
1f30c                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
1f30c                 | LR__3250
1f30c     01 16 86 F1 | 	sub	arg03, #1
1f310     00 16 56 F2 | 	cmps	arg03, #0 wc
1f314     18 00 90 CD |  if_b	jmp	#LR__3252
1f318     0A FB C1 FA | 	rdbyte	result1, arg02
1f31c     00 FB 41 FC | 	wrbyte	result1, _var01
1f320     01 14 06 F1 | 	add	arg02, #1
1f324     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1f328                 | ' 		continue;
1f328     01 00 06 F1 | 	add	_var01, #1
1f32c     DC FF 9F 5D |  if_ne	jmp	#LR__3250
1f330                 | LR__3251
1f330                 | LR__3252
1f330     97 0C 48 FB | 	callpa	#(@LR__3254-@LR__3253)>>2,fcache_load_ptr_
1f334                 | ' 	while (--count >= 0)
1f334                 | LR__3253
1f334     01 16 86 F1 | 	sub	arg03, #1
1f338     00 16 56 F2 | 	cmps	arg03, #0 wc
1f33c     00 03 02 36 |  if_ae	mov	_var02, _var01
1f340     01 00 06 31 |  if_ae	add	_var01, #1
1f344     01 01 48 3C |  if_ae	wrbyte	#0, _var02
1f348     E8 FF 9F 3D |  if_ae	jmp	#LR__3253
1f34c                 | LR__3254
1f34c                 | ' 		*dscan++ = '\0';
1f34c                 | ' 	return(dst);
1f34c     09 FB 01 F6 | 	mov	result1, arg01
1f350                 | _fatfs_cc_strncpy_ret
1f350     2D 00 64 FD | 	ret
1f354                 | 
1f354                 | _fatfs_cc_memcmp
1f354                 | ' 	for (n = size; n > 0; n--)
1f354     00 16 0E F2 | 	cmp	arg03, #0 wz
1f358     28 00 90 AD |  if_e	jmp	#LR__3261
1f35c                 | LR__3260
1f35c     09 01 C2 FA | 	rdbyte	_var01, arg01
1f360     0A 03 C2 FA | 	rdbyte	_var02, arg02
1f364     01 01 0A F2 | 	cmp	_var01, _var02 wz
1f368     01 12 06 A1 |  if_e	add	arg01, #1
1f36c     01 14 06 A1 |  if_e	add	arg02, #1
1f370                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
1f370     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
1f374     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
1f378     01 FB 81 51 |  if_ne	sub	result1, _var02
1f37c     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
1f380     F6 17 6E FB | 	djnz	arg03, #LR__3260
1f384                 | LR__3261
1f384                 | ' 
1f384                 | ' 	return(0);
1f384     00 FA 05 F6 | 	mov	result1, #0
1f388                 | _fatfs_cc_memcmp_ret
1f388     2D 00 64 FD | 	ret
1f38c                 | 
1f38c                 | _fatfs_cc_strncmp
1f38c     09 01 0A F6 | 	mov	_var01, arg01 wz
1f390     14 00 90 5D |  if_ne	jmp	#LR__3270
1f394                 | ' 		return scan2 ? -1 : 0;
1f394     00 14 0E F2 | 	cmp	arg02, #0 wz
1f398     01 02 66 56 |  if_ne	neg	_var02, #1
1f39c     00 02 06 A6 |  if_e	mov	_var02, #0
1f3a0     01 FB 01 F6 | 	mov	result1, _var02
1f3a4     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
1f3a8                 | LR__3270
1f3a8     00 14 0E F2 | 	cmp	arg02, #0 wz
1f3ac     01 FA 05 A6 |  if_e	mov	result1, #1
1f3b0     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1f3b4     0B 05 02 F6 | 	mov	_var03, arg03
1f3b8     97 16 48 FB | 	callpa	#(@LR__3272-@LR__3271)>>2,fcache_load_ptr_
1f3bc                 | ' 	count = n;
1f3bc                 | ' 	do {
1f3bc                 | LR__3271
1f3bc     00 07 C2 FA | 	rdbyte	_var04, _var01
1f3c0     0A 09 02 F6 | 	mov	_var05, arg02
1f3c4     04 0B C2 FA | 	rdbyte	_var06, _var05
1f3c8     01 04 86 F1 | 	sub	_var03, #1
1f3cc     00 04 56 F2 | 	cmps	_var03, #0 wc
1f3d0     01 00 06 F1 | 	add	_var01, #1
1f3d4     01 14 06 F1 | 	add	arg02, #1
1f3d8     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
1f3dc     08 00 90 2D |  if_nc_and_z	jmp	#LR__3273
1f3e0     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
1f3e4     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3271
1f3e8                 | LR__3272
1f3e8                 | LR__3273
1f3e8     00 04 56 F2 | 	cmps	_var03, #0 wc
1f3ec                 | ' 		return(0);
1f3ec     00 FA 05 C6 |  if_b	mov	result1, #0
1f3f0     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
1f3f4     05 07 0A F2 | 	cmp	_var04, _var06 wz
1f3f8                 | ' 		return(0);
1f3f8     00 FA 05 A6 |  if_e	mov	result1, #0
1f3fc     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1f400     00 06 0E F2 | 	cmp	_var04, #0 wz
1f404                 | ' 		return(-1);
1f404     01 FA 65 A6 |  if_e	neg	result1, #1
1f408     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1f40c     00 0A 0E F2 | 	cmp	_var06, #0 wz
1f410                 | ' 		return(1);
1f410     01 FA 05 A6 |  if_e	mov	result1, #1
1f414                 | ' 		return(c1 - c2);
1f414     03 FB 01 56 |  if_ne	mov	result1, _var04
1f418     05 FB 81 51 |  if_ne	sub	result1, _var06
1f41c                 | _fatfs_cc_strncmp_ret
1f41c     2D 00 64 FD | 	ret
1f420                 | 
1f420                 | _fatfs_cc_strchr
1f420                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/libc/string/strchr.c"
1f420                 | ' 	while ((c = *s++) != (char) charwanted)
1f420                 | LR__3280
1f420     09 01 02 F6 | 	mov	_var01, arg01
1f424     00 03 C2 FA | 	rdbyte	_var02, _var01
1f428     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
1f42c     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
1f430     03 05 0A F2 | 	cmp	_var03, _var04 wz
1f434     01 12 06 F1 | 	add	arg01, #1
1f438     14 00 90 AD |  if_e	jmp	#LR__3281
1f43c     01 05 02 F6 | 	mov	_var03, _var02
1f440     07 04 4E F7 | 	zerox	_var03, #7 wz
1f444     00 FA 05 A6 |  if_e	mov	result1, #0
1f448     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
1f44c     D0 FF 9F FD | 	jmp	#LR__3280
1f450                 | LR__3281
1f450                 | ' 	return((char *)--s);
1f450     01 12 86 F1 | 	sub	arg01, #1
1f454     09 FB 01 F6 | 	mov	result1, arg01
1f458                 | _fatfs_cc_strchr_ret
1f458     2D 00 64 FD | 	ret
1f45c                 | 
1f45c                 | _fatfs_cc_disk_initialize
1f45c     04 4A 05 F6 | 	mov	COUNT_, #4
1f460     A8 00 A0 FD | 	call	#pushregs_
1f464     40 F0 07 F1 | 	add	ptra, #64
1f468     04 4E 05 F1 | 	add	fp, #4
1f46c     A7 12 42 FC | 	wrbyte	arg01, fp
1f470     01 00 00 FF 
1f474     14 E4 05 F1 | 	add	objptr, ##532
1f478     F2 18 02 FB | 	rdlong	arg04, objptr
1f47c     2C 4E 05 F1 | 	add	fp, #44
1f480     A7 18 62 FC | 	wrlong	arg04, fp
1f484     04 E4 85 F1 | 	sub	objptr, #4
1f488     F2 18 02 FB | 	rdlong	arg04, objptr
1f48c     04 4E 05 F1 | 	add	fp, #4
1f490     A7 18 62 FC | 	wrlong	arg04, fp
1f494     08 E4 05 F1 | 	add	objptr, #8
1f498     F2 18 02 FB | 	rdlong	arg04, objptr
1f49c     04 4E 05 F1 | 	add	fp, #4
1f4a0     A7 18 62 FC | 	wrlong	arg04, fp
1f4a4     04 E4 05 F1 | 	add	objptr, #4
1f4a8     F2 18 02 FB | 	rdlong	arg04, objptr
1f4ac     04 4E 05 F1 | 	add	fp, #4
1f4b0     A7 18 62 FC | 	wrlong	arg04, fp
1f4b4     04 E4 05 F1 | 	add	objptr, #4
1f4b8     F2 02 48 FC | 	wrbyte	#1, objptr
1f4bc     01 00 00 FF 
1f4c0     20 E4 85 F1 | 	sub	objptr, ##544
1f4c4     38 4E 85 F1 | 	sub	fp, #56
1f4c8     A7 18 CA FA | 	rdbyte	arg04, fp wz
1f4cc     04 4E 85 F1 | 	sub	fp, #4
1f4d0                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
1f4d0                 | '             return RES_NOTRDY;
1f4d0     03 FA 05 56 |  if_ne	mov	result1, #3
1f4d4     D8 05 90 5D |  if_ne	jmp	#LR__3308
1f4d8     13 00 00 FF 
1f4dc     10 13 06 F6 | 	mov	arg01, ##10000
1f4e0     30 9B BF FD | 	call	#__system___waitus
1f4e4     30 4E 05 F1 | 	add	fp, #48
1f4e8     A7 12 02 FB | 	rdlong	arg01, fp
1f4ec     09 01 08 FC | 	wrpin	#0, arg01
1f4f0     04 4E 05 F1 | 	add	fp, #4
1f4f4     A7 12 02 FB | 	rdlong	arg01, fp
1f4f8     09 01 08 FC | 	wrpin	#0, arg01
1f4fc     04 4E 05 F1 | 	add	fp, #4
1f500     A7 12 02 FB | 	rdlong	arg01, fp
1f504     09 01 08 FC | 	wrpin	#0, arg01
1f508     04 4E 05 F1 | 	add	fp, #4
1f50c     A7 12 02 FB | 	rdlong	arg01, fp
1f510     09 00 80 FF 
1f514     09 01 08 FC | 	wrpin	##4608, arg01
1f518     0C 4E 85 F1 | 	sub	fp, #12
1f51c     A7 12 02 FB | 	rdlong	arg01, fp
1f520     59 12 62 FD | 	drvh	arg01
1f524     04 4E 05 F1 | 	add	fp, #4
1f528     A7 12 02 FB | 	rdlong	arg01, fp
1f52c     59 12 62 FD | 	drvh	arg01
1f530     04 4E 05 F1 | 	add	fp, #4
1f534     A7 12 02 FB | 	rdlong	arg01, fp
1f538     59 12 62 FD | 	drvh	arg01
1f53c     04 4E 05 F1 | 	add	fp, #4
1f540     A7 12 02 FB | 	rdlong	arg01, fp
1f544     59 12 62 FD | 	drvh	arg01
1f548     20 4E 85 F1 | 	sub	fp, #32
1f54c     00 04 80 FF 
1f550     A7 20 68 FC | 	wrlong	##524304, fp
1f554     04 4E 05 F1 | 	add	fp, #4
1f558     20 03 80 FF 
1f55c     A7 90 68 FC | 	wrlong	##409672, fp
1f560     14 4E 05 F1 | 	add	fp, #20
1f564     A7 1E 02 FB | 	rdlong	local01, fp
1f568     18 4E 85 F1 | 	sub	fp, #24
1f56c     A7 16 02 FB | 	rdlong	arg03, fp
1f570     40 1E 62 FD | 	dirl	local01
1f574     A0 03 80 FF 
1f578     0F 91 08 FC | 	wrpin	##475208, local01
1f57c     0F 17 12 FC | 	wxpin	arg03, local01
1f580     0F 01 28 FC | 	wypin	#0, local01
1f584     41 1E 62 FD | 	dirh	local01
1f588     1C 4E 05 F1 | 	add	fp, #28
1f58c     A7 20 02 FB | 	rdlong	local02, fp
1f590     10 1F 82 F1 | 	sub	local01, local02
1f594     07 1E 06 F5 | 	and	local01, #7
1f598     18 1E 66 F0 | 	shl	local01, #24
1f59c     78 14 06 F6 | 	mov	arg02, #120
1f5a0     0F 15 42 F5 | 	or	arg02, local01
1f5a4     14 4E 85 F1 | 	sub	fp, #20
1f5a8     A7 14 62 FC | 	wrlong	arg02, fp
1f5ac     14 4E 05 F1 | 	add	fp, #20
1f5b0     A7 12 02 FB | 	rdlong	arg01, fp
1f5b4     10 14 26 F4 | 	bith	arg02, #16
1f5b8     40 12 62 FD | 	dirl	arg01
1f5bc     09 15 02 FC | 	wrpin	arg02, arg01
1f5c0     09 3F 18 FC | 	wxpin	#31, arg01
1f5c4     FF FF FF FF 
1f5c8     09 FF 2B FC | 	wypin	##-1, arg01
1f5cc     41 12 62 FD | 	dirh	arg01
1f5d0     04 4E 85 F1 | 	sub	fp, #4
1f5d4     A7 14 02 FB | 	rdlong	arg02, fp
1f5d8     08 4E 05 F1 | 	add	fp, #8
1f5dc     A7 22 02 FB | 	rdlong	local03, fp
1f5e0     11 15 82 F1 | 	sub	arg02, local03
1f5e4     07 14 06 F5 | 	and	arg02, #7
1f5e8     18 14 66 F0 | 	shl	arg02, #24
1f5ec     14 4E 85 F1 | 	sub	fp, #20
1f5f0     A7 14 62 FC | 	wrlong	arg02, fp
1f5f4     29 00 00 FF 
1f5f8     7A 14 46 F5 | 	or	arg02, ##21114
1f5fc     A7 14 62 FC | 	wrlong	arg02, fp
1f600     14 4E 05 F1 | 	add	fp, #20
1f604     A7 12 02 FB | 	rdlong	arg01, fp
1f608     40 12 62 FD | 	dirl	arg01
1f60c     09 15 02 FC | 	wrpin	arg02, arg01
1f610     09 4F 18 FC | 	wxpin	#39, arg01
1f614     09 01 28 FC | 	wypin	#0, arg01
1f618     41 12 62 FD | 	dirh	arg01
1f61c     28 4E 85 F1 | 	sub	fp, #40
1f620     A7 12 02 F6 | 	mov	arg01, fp
1f624     14 4E 85 F1 | 	sub	fp, #20
1f628     0A 14 06 F6 | 	mov	arg02, #10
1f62c     0C 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0999
1f630     00 12 06 F6 | 	mov	arg01, #0
1f634     00 14 06 F6 | 	mov	arg02, #0
1f638     D8 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1f63c     14 80 B0 FD | 	call	#_fatfs_cc_deselect_1009
1f640     64 12 06 F6 | 	mov	arg01, #100
1f644     CC 99 BF FD | 	call	#__system___waitus
1f648     14 4E 05 F1 | 	add	fp, #20
1f64c     A7 12 02 F6 | 	mov	arg01, fp
1f650     14 4E 85 F1 | 	sub	fp, #20
1f654     0A 14 06 F6 | 	mov	arg02, #10
1f658     E0 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0999
1f65c     0C 4E 05 F1 | 	add	fp, #12
1f660     A7 00 48 FC | 	wrbyte	#0, fp
1f664     0C 4E 85 F1 | 	sub	fp, #12
1f668     00 12 06 F6 | 	mov	arg01, #0
1f66c     00 14 06 F6 | 	mov	arg02, #0
1f670     A0 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1f674     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
1f678     01 18 0E F2 | 	cmp	arg04, #1 wz
1f67c     B8 03 90 5D |  if_ne	jmp	#LR__3307
1f680     08 12 06 F6 | 	mov	arg01, #8
1f684     AA 15 06 F6 | 	mov	arg02, #426
1f688     88 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1f68c     FD FA E1 F8 | 	getbyte	result1, result1, #0
1f690     01 FA 0D F2 | 	cmp	result1, #1 wz
1f694     98 01 90 5D |  if_ne	jmp	#LR__3293
1f698     14 4E 05 F1 | 	add	fp, #20
1f69c     A7 12 02 F6 | 	mov	arg01, fp
1f6a0     14 4E 85 F1 | 	sub	fp, #20
1f6a4     04 14 06 F6 | 	mov	arg02, #4
1f6a8     90 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0999
1f6ac     16 4E 05 F1 | 	add	fp, #22
1f6b0     A7 24 C2 FA | 	rdbyte	local04, fp
1f6b4     16 4E 85 F1 | 	sub	fp, #22
1f6b8     01 24 0E F2 | 	cmp	local04, #1 wz
1f6bc     17 4E 05 A1 |  if_e	add	fp, #23
1f6c0     A7 22 C2 AA |  if_e	rdbyte	local03, fp
1f6c4     17 4E 85 A1 |  if_e	sub	fp, #23
1f6c8     AA 22 0E A2 |  if_e	cmp	local03, #170 wz
1f6cc     68 03 90 5D |  if_ne	jmp	#LR__3306
1f6d0                 | ' 				for (tmr = 1000; tmr; tmr--) {
1f6d0     18 4E 05 F1 | 	add	fp, #24
1f6d4     01 00 80 FF 
1f6d8     A7 D0 6B FC | 	wrlong	##1000, fp
1f6dc     18 4E 85 F1 | 	sub	fp, #24
1f6e0                 | LR__3290
1f6e0     18 4E 05 F1 | 	add	fp, #24
1f6e4     A7 1E 0A FB | 	rdlong	local01, fp wz
1f6e8     18 4E 85 F1 | 	sub	fp, #24
1f6ec     3C 00 90 AD |  if_e	jmp	#LR__3291
1f6f0     A9 12 06 F6 | 	mov	arg01, #169
1f6f4     1E 14 C6 F9 | 	decod	arg02, #30
1f6f8     18 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1f6fc     FD 24 02 F6 | 	mov	local04, result1
1f700     07 24 4E F7 | 	zerox	local04, #7 wz
1f704     24 00 90 AD |  if_e	jmp	#LR__3291
1f708     01 00 00 FF 
1f70c     E8 13 06 F6 | 	mov	arg01, ##1000
1f710     00 99 BF FD | 	call	#__system___waitus
1f714     18 4E 05 F1 | 	add	fp, #24
1f718     A7 24 02 FB | 	rdlong	local04, fp
1f71c     01 24 86 F1 | 	sub	local04, #1
1f720     A7 24 62 FC | 	wrlong	local04, fp
1f724     18 4E 85 F1 | 	sub	fp, #24
1f728     B4 FF 9F FD | 	jmp	#LR__3290
1f72c                 | LR__3291
1f72c     18 4E 05 F1 | 	add	fp, #24
1f730     A7 24 0A FB | 	rdlong	local04, fp wz
1f734     18 4E 85 F1 | 	sub	fp, #24
1f738     4C 00 90 AD |  if_e	jmp	#LR__3292
1f73c     3A 12 06 F6 | 	mov	arg01, #58
1f740     00 14 06 F6 | 	mov	arg02, #0
1f744     CC 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1f748     FD 22 02 F6 | 	mov	local03, result1
1f74c     07 22 4E F7 | 	zerox	local03, #7 wz
1f750     34 00 90 5D |  if_ne	jmp	#LR__3292
1f754     14 4E 05 F1 | 	add	fp, #20
1f758     A7 12 02 F6 | 	mov	arg01, fp
1f75c     14 4E 85 F1 | 	sub	fp, #20
1f760     04 14 06 F6 | 	mov	arg02, #4
1f764     D4 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0999
1f768     14 4E 05 F1 | 	add	fp, #20
1f76c     A7 1E C2 FA | 	rdbyte	local01, fp
1f770     40 1E CE F7 | 	test	local01, #64 wz
1f774     0C 24 06 56 |  if_ne	mov	local04, #12
1f778     04 24 06 A6 |  if_e	mov	local04, #4
1f77c     08 4E 85 F1 | 	sub	fp, #8
1f780     A7 24 42 FC | 	wrbyte	local04, fp
1f784     0C 4E 85 F1 | 	sub	fp, #12
1f788                 | LR__3292
1f788     14 24 06 FB | 	rdlong	local04, #20
1f78c     18 4E 05 F1 | 	add	fp, #24
1f790     A7 24 62 FC | 	wrlong	local04, fp
1f794     0C 4E 05 F1 | 	add	fp, #12
1f798     A7 24 02 FB | 	rdlong	local04, fp
1f79c     1B 24 26 F4 | 	bith	local04, #27
1f7a0     A7 24 62 FC | 	wrlong	local04, fp
1f7a4     0C 4E 85 F1 | 	sub	fp, #12
1f7a8     A7 24 02 FB | 	rdlong	local04, fp
1f7ac     18 4E 85 F1 | 	sub	fp, #24
1f7b0     68 78 04 FF 
1f7b4     81 25 16 F2 | 	cmp	local04, ##150000001 wc
1f7b8     1C 4E 05 C1 |  if_b	add	fp, #28
1f7bc     00 01 80 CF 
1f7c0     A7 08 68 CC |  if_b	wrlong	##131076, fp
1f7c4     1C 4E 85 C1 |  if_b	sub	fp, #28
1f7c8     6C 02 90 CD |  if_b	jmp	#LR__3306
1f7cc     18 4E 05 F1 | 	add	fp, #24
1f7d0     A7 24 02 FB | 	rdlong	local04, fp
1f7d4     18 4E 85 F1 | 	sub	fp, #24
1f7d8     E1 F5 05 FF 
1f7dc     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1f7e0     1C 4E 05 C1 |  if_b	add	fp, #28
1f7e4     00 01 80 CF 
1f7e8     A7 0A 68 CC |  if_b	wrlong	##131077, fp
1f7ec     1C 4E 85 C1 |  if_b	sub	fp, #28
1f7f0     44 02 90 CD |  if_b	jmp	#LR__3306
1f7f4     18 4E 05 F1 | 	add	fp, #24
1f7f8     A7 24 02 FB | 	rdlong	local04, fp
1f7fc     18 4E 85 F1 | 	sub	fp, #24
1f800     3B 58 08 FF 
1f804     01 24 16 F2 | 	cmp	local04, ##280000001 wc
1f808     1C 4E 05 C1 |  if_b	add	fp, #28
1f80c     00 01 80 CF 
1f810     A7 0C 68 CC |  if_b	wrlong	##131078, fp
1f814     1C 4E 85 C1 |  if_b	sub	fp, #28
1f818     1C 02 90 CD |  if_b	jmp	#LR__3306
1f81c     1C 4E 05 F1 | 	add	fp, #28
1f820     80 01 80 FF 
1f824     A7 10 68 FC | 	wrlong	##196616, fp
1f828     1C 4E 85 F1 | 	sub	fp, #28
1f82c     08 02 90 FD | 	jmp	#LR__3306
1f830                 | LR__3293
1f830     A9 12 06 F6 | 	mov	arg01, #169
1f834     00 14 06 F6 | 	mov	arg02, #0
1f838     D8 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1f83c     FD 24 E2 F8 | 	getbyte	local04, result1, #0
1f840     02 24 16 F2 | 	cmp	local04, #2 wc
1f844     18 00 90 3D |  if_ae	jmp	#LR__3294
1f848     0C 4E 05 F1 | 	add	fp, #12
1f84c     A7 04 48 FC | 	wrbyte	#2, fp
1f850     04 4E 05 F1 | 	add	fp, #4
1f854     A7 52 49 FC | 	wrbyte	#169, fp
1f858     10 4E 85 F1 | 	sub	fp, #16
1f85c     14 00 90 FD | 	jmp	#LR__3295
1f860                 | LR__3294
1f860     0C 4E 05 F1 | 	add	fp, #12
1f864     A7 02 48 FC | 	wrbyte	#1, fp
1f868     04 4E 05 F1 | 	add	fp, #4
1f86c     A7 02 48 FC | 	wrbyte	#1, fp
1f870     10 4E 85 F1 | 	sub	fp, #16
1f874                 | LR__3295
1f874                 | ' 				ty =  0x01 ; cmd =  (1) ;
1f874                 | ' 			}
1f874                 | ' 			for (tmr = 1000; tmr; tmr--) {
1f874     18 4E 05 F1 | 	add	fp, #24
1f878     01 00 80 FF 
1f87c     A7 D0 6B FC | 	wrlong	##1000, fp
1f880     18 4E 85 F1 | 	sub	fp, #24
1f884                 | LR__3296
1f884     18 4E 05 F1 | 	add	fp, #24
1f888     A7 22 0A FB | 	rdlong	local03, fp wz
1f88c     18 4E 85 F1 | 	sub	fp, #24
1f890     44 00 90 AD |  if_e	jmp	#LR__3297
1f894     10 4E 05 F1 | 	add	fp, #16
1f898     A7 12 C2 FA | 	rdbyte	arg01, fp
1f89c     10 4E 85 F1 | 	sub	fp, #16
1f8a0     00 14 06 F6 | 	mov	arg02, #0
1f8a4     6C 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1f8a8     FD 24 02 F6 | 	mov	local04, result1
1f8ac     07 24 4E F7 | 	zerox	local04, #7 wz
1f8b0     24 00 90 AD |  if_e	jmp	#LR__3297
1f8b4     01 00 00 FF 
1f8b8     E8 13 06 F6 | 	mov	arg01, ##1000
1f8bc     54 97 BF FD | 	call	#__system___waitus
1f8c0     18 4E 05 F1 | 	add	fp, #24
1f8c4     A7 24 02 FB | 	rdlong	local04, fp
1f8c8     01 24 86 F1 | 	sub	local04, #1
1f8cc     A7 24 62 FC | 	wrlong	local04, fp
1f8d0     18 4E 85 F1 | 	sub	fp, #24
1f8d4     AC FF 9F FD | 	jmp	#LR__3296
1f8d8                 | LR__3297
1f8d8     18 4E 05 F1 | 	add	fp, #24
1f8dc     A7 24 0A FB | 	rdlong	local04, fp wz
1f8e0     18 4E 85 F1 | 	sub	fp, #24
1f8e4     14 00 90 AD |  if_e	jmp	#LR__3298
1f8e8     10 12 06 F6 | 	mov	arg01, #16
1f8ec     09 14 C6 F9 | 	decod	arg02, #9
1f8f0     20 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1f8f4     07 FA 4D F7 | 	zerox	result1, #7 wz
1f8f8     0C 00 90 AD |  if_e	jmp	#LR__3299
1f8fc                 | LR__3298
1f8fc     0C 4E 05 F1 | 	add	fp, #12
1f900     A7 00 48 FC | 	wrbyte	#0, fp
1f904     0C 4E 85 F1 | 	sub	fp, #12
1f908                 | LR__3299
1f908     14 24 06 FB | 	rdlong	local04, #20
1f90c     18 4E 05 F1 | 	add	fp, #24
1f910     A7 24 62 FC | 	wrlong	local04, fp
1f914     18 4E 85 F1 | 	sub	fp, #24
1f918     F0 FA 02 FF 
1f91c     01 25 16 F2 | 	cmp	local04, ##100000001 wc
1f920     18 00 90 3D |  if_ae	jmp	#LR__3300
1f924     24 4E 05 F1 | 	add	fp, #36
1f928     A7 24 02 FB | 	rdlong	local04, fp
1f92c     1B 24 26 F4 | 	bith	local04, #27
1f930     A7 24 62 FC | 	wrlong	local04, fp
1f934     24 4E 85 F1 | 	sub	fp, #36
1f938     2C 00 90 FD | 	jmp	#LR__3301
1f93c                 | LR__3300
1f93c     18 4E 05 F1 | 	add	fp, #24
1f940     A7 24 02 FB | 	rdlong	local04, fp
1f944     18 4E 85 F1 | 	sub	fp, #24
1f948     E1 F5 05 FF 
1f94c     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1f950     24 4E 05 C1 |  if_b	add	fp, #36
1f954     A7 24 02 CB |  if_b	rdlong	local04, fp
1f958     80 00 04 CF 
1f95c     00 24 46 C5 |  if_b	or	local04, ##134283264
1f960     A7 24 62 CC |  if_b	wrlong	local04, fp
1f964     24 4E 85 C1 |  if_b	sub	fp, #36
1f968                 | LR__3301
1f968     18 4E 05 F1 | 	add	fp, #24
1f96c     A7 24 02 FB | 	rdlong	local04, fp
1f970     18 4E 85 F1 | 	sub	fp, #24
1f974     F0 FA 02 FF 
1f978     01 25 16 F2 | 	cmp	local04, ##100000001 wc
1f97c     1C 4E 05 C1 |  if_b	add	fp, #28
1f980     00 01 80 CF 
1f984     A7 08 68 CC |  if_b	wrlong	##131076, fp
1f988     1C 4E 85 C1 |  if_b	sub	fp, #28
1f98c     A8 00 90 CD |  if_b	jmp	#LR__3305
1f990     18 4E 05 F1 | 	add	fp, #24
1f994     A7 24 02 FB | 	rdlong	local04, fp
1f998     18 4E 85 F1 | 	sub	fp, #24
1f99c     68 78 04 FF 
1f9a0     81 25 16 F2 | 	cmp	local04, ##150000001 wc
1f9a4     1C 4E 05 C1 |  if_b	add	fp, #28
1f9a8     80 01 80 CF 
1f9ac     A7 0C 68 CC |  if_b	wrlong	##196614, fp
1f9b0     1C 4E 85 C1 |  if_b	sub	fp, #28
1f9b4     80 00 90 CD |  if_b	jmp	#LR__3304
1f9b8     18 4E 05 F1 | 	add	fp, #24
1f9bc     A7 24 02 FB | 	rdlong	local04, fp
1f9c0     18 4E 85 F1 | 	sub	fp, #24
1f9c4     E1 F5 05 FF 
1f9c8     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1f9cc     1C 4E 05 C1 |  if_b	add	fp, #28
1f9d0     00 02 80 CF 
1f9d4     A7 10 68 CC |  if_b	wrlong	##262152, fp
1f9d8     1C 4E 85 C1 |  if_b	sub	fp, #28
1f9dc     58 00 90 CD |  if_b	jmp	#LR__3303
1f9e0     18 4E 05 F1 | 	add	fp, #24
1f9e4     A7 24 02 FB | 	rdlong	local04, fp
1f9e8     18 4E 85 F1 | 	sub	fp, #24
1f9ec     59 73 07 FF 
1f9f0     81 24 16 F2 | 	cmp	local04, ##250000001 wc
1f9f4     1C 4E 05 C1 |  if_b	add	fp, #28
1f9f8     80 02 80 CF 
1f9fc     A7 14 68 CC |  if_b	wrlong	##327690, fp
1fa00     1C 4E 85 C1 |  if_b	sub	fp, #28
1fa04     30 00 90 CD |  if_b	jmp	#LR__3302
1fa08     18 4E 05 F1 | 	add	fp, #24
1fa0c     A7 24 02 FB | 	rdlong	local04, fp
1fa10     18 4E 85 F1 | 	sub	fp, #24
1fa14     D1 F0 08 FF 
1fa18     01 25 16 F2 | 	cmp	local04, ##300000001 wc
1fa1c     1C 4E 05 C1 |  if_b	add	fp, #28
1fa20     00 03 80 CF 
1fa24     A7 18 68 CC |  if_b	wrlong	##393228, fp
1fa28     1C 4E 85 F3 | 	sumc	fp, #28
1fa2c     80 03 80 3F 
1fa30     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
1fa34     1C 4E 85 31 |  if_ae	sub	fp, #28
1fa38                 | LR__3302
1fa38                 | LR__3303
1fa38                 | LR__3304
1fa38                 | LR__3305
1fa38                 | LR__3306
1fa38                 | LR__3307
1fa38     0C 4E 05 F1 | 	add	fp, #12
1fa3c     A7 24 C2 FA | 	rdbyte	local04, fp
1fa40     01 00 00 FF 
1fa44     21 E4 05 F1 | 	add	objptr, ##545
1fa48     F2 24 42 FC | 	wrbyte	local04, objptr
1fa4c     A7 1E CA FA | 	rdbyte	local01, fp wz
1fa50     00 24 06 56 |  if_ne	mov	local04, #0
1fa54     01 24 06 A6 |  if_e	mov	local04, #1
1fa58     20 4E 05 F1 | 	add	fp, #32
1fa5c     A7 24 42 FC | 	wrbyte	local04, fp
1fa60     A7 24 C2 FA | 	rdbyte	local04, fp
1fa64     2C 4E 85 F1 | 	sub	fp, #44
1fa68     01 E4 85 F1 | 	sub	objptr, #1
1fa6c     F2 24 42 FC | 	wrbyte	local04, objptr
1fa70     01 00 00 FF 
1fa74     20 E4 85 F1 | 	sub	objptr, ##544
1fa78     D8 7B B0 FD | 	call	#_fatfs_cc_deselect_1009
1fa7c     34 4E 05 F1 | 	add	fp, #52
1fa80     A7 12 02 FB | 	rdlong	arg01, fp
1fa84     18 4E 85 F1 | 	sub	fp, #24
1fa88     A7 14 02 FB | 	rdlong	arg02, fp
1fa8c     09 15 12 FC | 	wxpin	arg02, arg01
1fa90     1C 4E 05 F1 | 	add	fp, #28
1fa94     A7 12 02 FB | 	rdlong	arg01, fp
1fa98     14 4E 85 F1 | 	sub	fp, #20
1fa9c     A7 14 02 FB | 	rdlong	arg02, fp
1faa0     09 15 02 FC | 	wrpin	arg02, arg01
1faa4                 | ' 
1faa4                 | ' 		}
1faa4                 | ' 	}
1faa4                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
1faa4                 | ' 	CardType = ty;
1faa4                 | ' 	s = ty ? 0 :  0x01 ;
1faa4                 | ' 	Stat = s;
1faa4                 | ' 
1faa4                 | ' 	deselect();
1faa4                 | ' 
1faa4                 | ' 
1faa4                 | ' 	_wxpin( PIN_CLK, ck_div );
1faa4                 | ' 	_wrpin( PIN_DI, spm_tx );
1faa4                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
1faa4                 | ' 	return s;
1faa4     08 4E 05 F1 | 	add	fp, #8
1faa8     A7 FA C1 FA | 	rdbyte	result1, fp
1faac     2C 4E 85 F1 | 	sub	fp, #44
1fab0                 | LR__3308
1fab0     A7 F0 03 F6 | 	mov	ptra, fp
1fab4     B2 00 A0 FD | 	call	#popregs_
1fab8                 | _fatfs_cc_disk_initialize_ret
1fab8     2D 00 64 FD | 	ret
1fabc                 | 
1fabc                 | _fatfs_cc_disk_read
1fabc     05 4A 05 F6 | 	mov	COUNT_, #5
1fac0     A8 00 A0 FD | 	call	#pushregs_
1fac4     0A 1F 02 F6 | 	mov	local01, arg02
1fac8     0B 21 02 F6 | 	mov	local02, arg03
1facc     0C 23 02 F6 | 	mov	local03, arg04
1fad0     00 12 0E F2 | 	cmp	arg01, #0 wz
1fad4     01 FA 05 56 |  if_ne	mov	result1, #1
1fad8                 | ' 
1fad8                 | ' 	return Stat;
1fad8     01 00 00 AF 
1fadc     20 E4 05 A1 |  if_e	add	objptr, ##544
1fae0     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1fae4     01 00 00 AF 
1fae8     20 E4 85 A1 |  if_e	sub	objptr, ##544
1faec     FD FA E1 F8 | 	getbyte	result1, result1, #0
1faf0     01 FA CD F7 | 	test	result1, #1 wz
1faf4     03 FA 05 56 |  if_ne	mov	result1, #3
1faf8     84 00 90 5D |  if_ne	jmp	#LR__3312
1fafc     01 00 00 FF 
1fb00     21 E4 05 F1 | 	add	objptr, ##545
1fb04     F2 24 C2 FA | 	rdbyte	local04, objptr
1fb08     01 00 00 FF 
1fb0c     21 E4 85 F1 | 	sub	objptr, ##545
1fb10     08 24 CE F7 | 	test	local04, #8 wz
1fb14     09 20 66 A0 |  if_e	shl	local02, #9
1fb18     02 22 16 F2 | 	cmp	local03, #2 wc
1fb1c     12 24 06 36 |  if_ae	mov	local04, #18
1fb20     11 24 06 C6 |  if_b	mov	local04, #17
1fb24     10 15 02 F6 | 	mov	arg02, local02
1fb28     12 13 02 F6 | 	mov	arg01, local04
1fb2c     E4 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1fb30     FD 26 02 F6 | 	mov	local05, result1
1fb34     07 26 4E F7 | 	zerox	local05, #7 wz
1fb38     30 00 90 5D |  if_ne	jmp	#LR__3311
1fb3c                 | ' 		do {
1fb3c                 | LR__3310
1fb3c     0F 13 02 F6 | 	mov	arg01, local01
1fb40     09 14 C6 F9 | 	decod	arg02, #9
1fb44     20 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1017
1fb48     00 FA 0D F2 | 	cmp	result1, #0 wz
1fb4c     01 00 00 5F 
1fb50     00 1E 06 51 |  if_ne	add	local01, ##512
1fb54     F9 23 6E 5B |  if_ne	djnz	local03, #LR__3310
1fb58     12 25 E2 F8 | 	getbyte	local04, local04, #0
1fb5c     12 24 0E F2 | 	cmp	local04, #18 wz
1fb60     0C 12 06 A6 |  if_e	mov	arg01, #12
1fb64     00 14 06 A6 |  if_e	mov	arg02, #0
1fb68     A8 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1023
1fb6c                 | LR__3311
1fb6c     E4 7A B0 FD | 	call	#_fatfs_cc_deselect_1009
1fb70                 | ' 	}
1fb70                 | ' 	deselect();
1fb70                 | ' 
1fb70                 | ' 	return count ? RES_ERROR : RES_OK;
1fb70     00 22 0E F2 | 	cmp	local03, #0 wz
1fb74     01 26 06 56 |  if_ne	mov	local05, #1
1fb78     00 26 06 A6 |  if_e	mov	local05, #0
1fb7c     13 FB 01 F6 | 	mov	result1, local05
1fb80                 | LR__3312
1fb80     A7 F0 03 F6 | 	mov	ptra, fp
1fb84     B2 00 A0 FD | 	call	#popregs_
1fb88                 | _fatfs_cc_disk_read_ret
1fb88     2D 00 64 FD | 	ret
1fb8c                 | 
1fb8c                 | _fatfs_cc_disk_write
1fb8c     04 4A 05 F6 | 	mov	COUNT_, #4
1fb90     A8 00 A0 FD | 	call	#pushregs_
1fb94     0A 1F 02 F6 | 	mov	local01, arg02
1fb98     0C 21 02 F6 | 	mov	local02, arg04
1fb9c     0B 23 02 F6 | 	mov	local03, arg03
1fba0     00 12 0E F2 | 	cmp	arg01, #0 wz
1fba4     01 FA 05 56 |  if_ne	mov	result1, #1
1fba8                 | ' 
1fba8                 | ' 	return Stat;
1fba8     01 00 00 AF 
1fbac     20 E4 05 A1 |  if_e	add	objptr, ##544
1fbb0     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1fbb4     01 00 00 AF 
1fbb8     20 E4 85 A1 |  if_e	sub	objptr, ##544
1fbbc     FD FA E1 F8 | 	getbyte	result1, result1, #0
1fbc0     01 FA CD F7 | 	test	result1, #1 wz
1fbc4     03 FA 05 56 |  if_ne	mov	result1, #3
1fbc8     D4 00 90 5D |  if_ne	jmp	#LR__3324
1fbcc     01 00 00 FF 
1fbd0     21 E4 05 F1 | 	add	objptr, ##545
1fbd4     F2 16 C2 FA | 	rdbyte	arg03, objptr
1fbd8     01 00 00 FF 
1fbdc     21 E4 85 F1 | 	sub	objptr, ##545
1fbe0     08 16 CE F7 | 	test	arg03, #8 wz
1fbe4     09 22 66 A0 |  if_e	shl	local03, #9
1fbe8     01 20 0E F2 | 	cmp	local02, #1 wz
1fbec     30 00 90 5D |  if_ne	jmp	#LR__3320
1fbf0     18 12 06 F6 | 	mov	arg01, #24
1fbf4     11 15 02 F6 | 	mov	arg02, local03
1fbf8     18 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1fbfc     FD 24 02 F6 | 	mov	local04, result1
1fc00     07 24 4E F7 | 	zerox	local04, #7 wz
1fc04     84 00 90 5D |  if_ne	jmp	#LR__3323
1fc08     0F 13 02 F6 | 	mov	arg01, local01
1fc0c     FE 14 06 F6 | 	mov	arg02, #254
1fc10     34 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1019
1fc14     00 FA 0D F2 | 	cmp	result1, #0 wz
1fc18     00 20 06 56 |  if_ne	mov	local02, #0
1fc1c     6C 00 90 FD | 	jmp	#LR__3323
1fc20                 | LR__3320
1fc20     01 00 00 FF 
1fc24     21 E4 05 F1 | 	add	objptr, ##545
1fc28     F2 24 C2 FA | 	rdbyte	local04, objptr
1fc2c     01 00 00 FF 
1fc30     21 E4 85 F1 | 	sub	objptr, ##545
1fc34     06 24 CE F7 | 	test	local04, #6 wz
1fc38     97 12 06 56 |  if_ne	mov	arg01, #151
1fc3c     10 15 02 56 |  if_ne	mov	arg02, local02
1fc40     D0 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1023
1fc44     11 15 02 F6 | 	mov	arg02, local03
1fc48     19 12 06 F6 | 	mov	arg01, #25
1fc4c     C4 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1fc50     FD 24 02 F6 | 	mov	local04, result1
1fc54     07 24 4E F7 | 	zerox	local04, #7 wz
1fc58     30 00 90 5D |  if_ne	jmp	#LR__3322
1fc5c                 | ' 			do {
1fc5c                 | LR__3321
1fc5c     0F 13 02 F6 | 	mov	arg01, local01
1fc60     FC 14 06 F6 | 	mov	arg02, #252
1fc64     E0 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1019
1fc68     00 FA 0D F2 | 	cmp	result1, #0 wz
1fc6c     01 00 00 5F 
1fc70     00 1E 06 51 |  if_ne	add	local01, ##512
1fc74     F9 21 6E 5B |  if_ne	djnz	local02, #LR__3321
1fc78     00 12 06 F6 | 	mov	arg01, #0
1fc7c     FD 14 06 F6 | 	mov	arg02, #253
1fc80     C4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1019
1fc84     00 FA 0D F2 | 	cmp	result1, #0 wz
1fc88     01 20 06 A6 |  if_e	mov	local02, #1
1fc8c                 | LR__3322
1fc8c                 | LR__3323
1fc8c     C4 79 B0 FD | 	call	#_fatfs_cc_deselect_1009
1fc90                 | ' 				count = 1;
1fc90                 | ' 		}
1fc90                 | ' 	}
1fc90                 | ' 	deselect();
1fc90                 | ' 
1fc90                 | ' 	return count ? RES_ERROR : RES_OK;
1fc90     00 20 0E F2 | 	cmp	local02, #0 wz
1fc94     01 24 06 56 |  if_ne	mov	local04, #1
1fc98     00 24 06 A6 |  if_e	mov	local04, #0
1fc9c     12 FB 01 F6 | 	mov	result1, local04
1fca0                 | LR__3324
1fca0     A7 F0 03 F6 | 	mov	ptra, fp
1fca4     B2 00 A0 FD | 	call	#popregs_
1fca8                 | _fatfs_cc_disk_write_ret
1fca8     2D 00 64 FD | 	ret
1fcac                 | 
1fcac                 | _fatfs_cc_disk_ioctl
1fcac     01 4A 05 F6 | 	mov	COUNT_, #1
1fcb0     A8 00 A0 FD | 	call	#pushregs_
1fcb4     30 F0 07 F1 | 	add	ptra, #48
1fcb8     04 4E 05 F1 | 	add	fp, #4
1fcbc     A7 12 42 FC | 	wrbyte	arg01, fp
1fcc0     04 4E 05 F1 | 	add	fp, #4
1fcc4     A7 14 42 FC | 	wrbyte	arg02, fp
1fcc8     04 4E 05 F1 | 	add	fp, #4
1fccc     A7 16 62 FC | 	wrlong	arg03, fp
1fcd0     08 4E 85 F1 | 	sub	fp, #8
1fcd4     A7 12 CA FA | 	rdbyte	arg01, fp wz
1fcd8     04 4E 85 F1 | 	sub	fp, #4
1fcdc     01 FA 05 56 |  if_ne	mov	result1, #1
1fce0                 | ' 
1fce0                 | ' 	return Stat;
1fce0     01 00 00 AF 
1fce4     20 E4 05 A1 |  if_e	add	objptr, ##544
1fce8     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1fcec     01 00 00 AF 
1fcf0     20 E4 85 A1 |  if_e	sub	objptr, ##544
1fcf4     FD FA E1 F8 | 	getbyte	result1, result1, #0
1fcf8     01 FA CD F7 | 	test	result1, #1 wz
1fcfc     03 FA 05 56 |  if_ne	mov	result1, #3
1fd00     E4 01 90 5D |  if_ne	jmp	#LR__3338
1fd04     10 4E 05 F1 | 	add	fp, #16
1fd08     A7 02 68 FC | 	wrlong	#1, fp
1fd0c                 | ' 
1fd0c                 | ' 	res = RES_ERROR;
1fd0c                 | ' 	switch (ctrl) {
1fd0c     08 4E 85 F1 | 	sub	fp, #8
1fd10     A7 1E C2 FA | 	rdbyte	local01, fp
1fd14     08 4E 85 F1 | 	sub	fp, #8
1fd18     04 1E 26 F3 | 	fle	local01, #4
1fd1c     30 1E 62 FD | 	jmprel	local01
1fd20                 | LR__3330
1fd20     10 00 90 FD | 	jmp	#LR__3331
1fd24     24 00 90 FD | 	jmp	#LR__3332
1fd28     A0 01 90 FD | 	jmp	#LR__3336
1fd2c     80 01 90 FD | 	jmp	#LR__3335
1fd30     98 01 90 FD | 	jmp	#LR__3336
1fd34                 | LR__3331
1fd34     A0 79 B0 FD | 	call	#_fatfs_cc_select_1013
1fd38     00 FA 0D F2 | 	cmp	result1, #0 wz
1fd3c     10 4E 05 51 |  if_ne	add	fp, #16
1fd40     A7 00 68 5C |  if_ne	wrlong	#0, fp
1fd44     10 4E 85 51 |  if_ne	sub	fp, #16
1fd48                 | ' 			break;
1fd48     8C 01 90 FD | 	jmp	#LR__3337
1fd4c                 | LR__3332
1fd4c     09 12 06 F6 | 	mov	arg01, #9
1fd50     00 14 06 F6 | 	mov	arg02, #0
1fd54     BC 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1fd58     FD 1E 02 F6 | 	mov	local01, result1
1fd5c     07 1E 4E F7 | 	zerox	local01, #7 wz
1fd60     74 01 90 5D |  if_ne	jmp	#LR__3337
1fd64     18 4E 05 F1 | 	add	fp, #24
1fd68     A7 12 02 F6 | 	mov	arg01, fp
1fd6c     18 4E 85 F1 | 	sub	fp, #24
1fd70     10 14 06 F6 | 	mov	arg02, #16
1fd74     F0 79 B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1017
1fd78     00 FA 0D F2 | 	cmp	result1, #0 wz
1fd7c     58 01 90 AD |  if_e	jmp	#LR__3337
1fd80     18 4E 05 F1 | 	add	fp, #24
1fd84     A7 1E C2 FA | 	rdbyte	local01, fp
1fd88     18 4E 85 F1 | 	sub	fp, #24
1fd8c     06 1E 46 F0 | 	shr	local01, #6
1fd90     01 1E 0E F2 | 	cmp	local01, #1 wz
1fd94     5C 00 90 5D |  if_ne	jmp	#LR__3333
1fd98     21 4E 05 F1 | 	add	fp, #33
1fd9c     A7 1E C2 FA | 	rdbyte	local01, fp
1fda0     01 4E 85 F1 | 	sub	fp, #1
1fda4     A7 FA C1 FA | 	rdbyte	result1, fp
1fda8     FD FA 31 F9 | 	getword	result1, result1, #0
1fdac     08 FA 65 F0 | 	shl	result1, #8
1fdb0     FD 1E 02 F1 | 	add	local01, result1
1fdb4     01 4E 85 F1 | 	sub	fp, #1
1fdb8     A7 FA C1 FA | 	rdbyte	result1, fp
1fdbc     3F FA 05 F5 | 	and	result1, #63
1fdc0     10 FA 65 F0 | 	shl	result1, #16
1fdc4     FD 1E 02 F1 | 	add	local01, result1
1fdc8     01 1E 06 F1 | 	add	local01, #1
1fdcc     09 4E 05 F1 | 	add	fp, #9
1fdd0     A7 1E 62 FC | 	wrlong	local01, fp
1fdd4     1C 4E 85 F1 | 	sub	fp, #28
1fdd8     A7 1E 02 FB | 	rdlong	local01, fp
1fddc     1C 4E 05 F1 | 	add	fp, #28
1fde0     A7 FA 01 FB | 	rdlong	result1, fp
1fde4     28 4E 85 F1 | 	sub	fp, #40
1fde8     0A FA 65 F0 | 	shl	result1, #10
1fdec     0F FB 61 FC | 	wrlong	result1, local01
1fdf0     AC 00 90 FD | 	jmp	#LR__3334
1fdf4                 | LR__3333
1fdf4     1D 4E 05 F1 | 	add	fp, #29
1fdf8     A7 1E C2 FA | 	rdbyte	local01, fp
1fdfc     0F 1F 42 F8 | 	getnib	local01, local01, #0
1fe00     05 4E 05 F1 | 	add	fp, #5
1fe04     A7 FA C1 FA | 	rdbyte	result1, fp
1fe08     80 FA 05 F5 | 	and	result1, #128
1fe0c     07 FA C5 F0 | 	sar	result1, #7
1fe10     FD 1E 02 F1 | 	add	local01, result1
1fe14     01 4E 85 F1 | 	sub	fp, #1
1fe18     A7 FA C1 FA | 	rdbyte	result1, fp
1fe1c     03 FA 05 F5 | 	and	result1, #3
1fe20     01 FA 65 F0 | 	shl	result1, #1
1fe24     FD 1E 02 F1 | 	add	local01, result1
1fe28     02 1E 06 F1 | 	add	local01, #2
1fe2c     0D 4E 85 F1 | 	sub	fp, #13
1fe30     A7 1E 42 FC | 	wrbyte	local01, fp
1fe34     0C 4E 05 F1 | 	add	fp, #12
1fe38     A7 1E C2 FA | 	rdbyte	local01, fp
1fe3c     06 1E 46 F0 | 	shr	local01, #6
1fe40     01 4E 85 F1 | 	sub	fp, #1
1fe44     A7 FA C1 FA | 	rdbyte	result1, fp
1fe48     FD FA 31 F9 | 	getword	result1, result1, #0
1fe4c     02 FA 65 F0 | 	shl	result1, #2
1fe50     FD 1E 02 F1 | 	add	local01, result1
1fe54     01 4E 85 F1 | 	sub	fp, #1
1fe58     A7 FA C1 FA | 	rdbyte	result1, fp
1fe5c     03 FA 05 F5 | 	and	result1, #3
1fe60     FD FA 31 F9 | 	getword	result1, result1, #0
1fe64     0A FA 65 F0 | 	shl	result1, #10
1fe68     FD 1E 02 F1 | 	add	local01, result1
1fe6c     01 1E 06 F1 | 	add	local01, #1
1fe70     0A 4E 05 F1 | 	add	fp, #10
1fe74     A7 1E 62 FC | 	wrlong	local01, fp
1fe78     1C 4E 85 F1 | 	sub	fp, #28
1fe7c     A7 1E 02 FB | 	rdlong	local01, fp
1fe80     1C 4E 05 F1 | 	add	fp, #28
1fe84     A7 FA 01 FB | 	rdlong	result1, fp
1fe88     14 4E 85 F1 | 	sub	fp, #20
1fe8c     A7 16 C2 FA | 	rdbyte	arg03, fp
1fe90     14 4E 85 F1 | 	sub	fp, #20
1fe94     09 16 86 F1 | 	sub	arg03, #9
1fe98     0B FB 61 F0 | 	shl	result1, arg03
1fe9c     0F FB 61 FC | 	wrlong	result1, local01
1fea0                 | LR__3334
1fea0     10 4E 05 F1 | 	add	fp, #16
1fea4     A7 00 68 FC | 	wrlong	#0, fp
1fea8     10 4E 85 F1 | 	sub	fp, #16
1feac                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
1feac                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
1feac                 | ' 					*(LBA_t*)buff = cs << (n - 9);
1feac                 | ' 				}
1feac                 | ' 				res = RES_OK;
1feac                 | ' 			}
1feac                 | ' 			break;
1feac     28 00 90 FD | 	jmp	#LR__3337
1feb0                 | LR__3335
1feb0     0C 4E 05 F1 | 	add	fp, #12
1feb4     A7 1E 02 FB | 	rdlong	local01, fp
1feb8     0F 01 69 FC | 	wrlong	#128, local01
1febc     04 4E 05 F1 | 	add	fp, #4
1fec0     A7 00 68 FC | 	wrlong	#0, fp
1fec4     10 4E 85 F1 | 	sub	fp, #16
1fec8                 | ' 			*(DWORD*)buff = 128;
1fec8                 | ' 			res = RES_OK;
1fec8                 | ' 			break;
1fec8     0C 00 90 FD | 	jmp	#LR__3337
1fecc                 | LR__3336
1fecc     10 4E 05 F1 | 	add	fp, #16
1fed0     A7 08 68 FC | 	wrlong	#4, fp
1fed4     10 4E 85 F1 | 	sub	fp, #16
1fed8                 | LR__3337
1fed8     78 77 B0 FD | 	call	#_fatfs_cc_deselect_1009
1fedc                 | ' 			res = RES_PARERR;
1fedc                 | ' 	}
1fedc                 | ' 
1fedc                 | ' 	deselect();
1fedc                 | ' 
1fedc                 | ' 	return res;
1fedc     10 4E 05 F1 | 	add	fp, #16
1fee0     A7 FA 01 FB | 	rdlong	result1, fp
1fee4     10 4E 85 F1 | 	sub	fp, #16
1fee8                 | LR__3338
1fee8     A7 F0 03 F6 | 	mov	ptra, fp
1feec     B2 00 A0 FD | 	call	#popregs_
1fef0                 | _fatfs_cc_disk_ioctl_ret
1fef0     2D 00 64 FD | 	ret
1fef4                 | 
1fef4                 | _fatfs_cc_disk_setpins
1fef4     00 12 0E F2 | 	cmp	arg01, #0 wz
1fef8     01 FA 65 56 |  if_ne	neg	result1, #1
1fefc     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
1ff00     01 00 00 FF 
1ff04     10 E4 05 F1 | 	add	objptr, ##528
1ff08     F2 14 62 FC | 	wrlong	arg02, objptr
1ff0c     04 E4 05 F1 | 	add	objptr, #4
1ff10     F2 16 62 FC | 	wrlong	arg03, objptr
1ff14     04 E4 05 F1 | 	add	objptr, #4
1ff18     F2 18 62 FC | 	wrlong	arg04, objptr
1ff1c     04 E4 05 F1 | 	add	objptr, #4
1ff20     F2 1A 62 FC | 	wrlong	arg05, objptr
1ff24     01 00 00 FF 
1ff28     1C E4 85 F1 | 	sub	objptr, ##540
1ff2c     00 FA 05 F6 | 	mov	result1, #0
1ff30                 | _fatfs_cc_disk_setpins_ret
1ff30     2D 00 64 FD | 	ret
1ff34                 | 
1ff34                 | _fatfs_cc_tchar2uni
1ff34     09 01 02 FB | 	rdlong	_var01, arg01
1ff38     00 03 02 F6 | 	mov	_var02, _var01
1ff3c     01 00 06 F1 | 	add	_var01, #1
1ff40     00 05 02 F6 | 	mov	_var03, _var01
1ff44     01 07 C2 FA | 	rdbyte	_var04, _var02
1ff48     80 06 CE F7 | 	test	_var04, #128 wz
1ff4c     E8 00 90 AD |  if_e	jmp	#LR__3347
1ff50     03 09 02 F6 | 	mov	_var05, _var04
1ff54     E0 08 06 F5 | 	and	_var05, #224
1ff58     C0 08 0E F2 | 	cmp	_var05, #192 wz
1ff5c     1F 06 06 A5 |  if_e	and	_var04, #31
1ff60     01 0A 06 A6 |  if_e	mov	_var06, #1
1ff64     34 00 90 AD |  if_e	jmp	#LR__3341
1ff68     03 09 02 F6 | 	mov	_var05, _var04
1ff6c     F0 08 06 F5 | 	and	_var05, #240
1ff70     E0 08 0E F2 | 	cmp	_var05, #224 wz
1ff74     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
1ff78     02 0A 06 A6 |  if_e	mov	_var06, #2
1ff7c     1C 00 90 AD |  if_e	jmp	#LR__3340
1ff80     03 09 02 F6 | 	mov	_var05, _var04
1ff84     F8 08 06 F5 | 	and	_var05, #248
1ff88     F0 08 0E F2 | 	cmp	_var05, #240 wz
1ff8c     07 06 06 A5 |  if_e	and	_var04, #7
1ff90     03 0A 06 A6 |  if_e	mov	_var06, #3
1ff94                 | ' 			return 0xFFFFFFFF;
1ff94     01 FA 65 56 |  if_ne	neg	result1, #1
1ff98     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
1ff9c                 | LR__3340
1ff9c                 | LR__3341
1ff9c                 | ' 		}
1ff9c                 | ' 		do {
1ff9c                 | LR__3342
1ff9c     02 0D C2 FA | 	rdbyte	_var07, _var03
1ffa0     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
1ffa4     C0 08 06 F5 | 	and	_var05, #192
1ffa8     80 08 0E F2 | 	cmp	_var05, #128 wz
1ffac     01 04 06 F1 | 	add	_var03, #1
1ffb0     01 FA 65 56 |  if_ne	neg	result1, #1
1ffb4     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
1ffb8     06 06 66 F0 | 	shl	_var04, #6
1ffbc     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
1ffc0     3F 02 06 F5 | 	and	_var02, #63
1ffc4     01 07 42 F5 | 	or	_var04, _var02
1ffc8     F4 0B 6E FB | 	djnz	_var06, #LR__3342
1ffcc     80 06 16 F2 | 	cmp	_var04, #128 wc
1ffd0     24 00 90 CD |  if_b	jmp	#LR__3344
1ffd4     6C 00 00 FF 
1ffd8     00 06 16 F2 | 	cmp	_var04, ##55296 wc
1ffdc     0C 00 90 CD |  if_b	jmp	#LR__3343
1ffe0     70 00 00 FF 
1ffe4     00 06 16 F2 | 	cmp	_var04, ##57344 wc
1ffe8     0C 00 90 CD |  if_b	jmp	#LR__3344
1ffec                 | LR__3343
1ffec     80 08 00 FF 
1fff0     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
1fff4     08 00 90 CD |  if_b	jmp	#LR__3345
1fff8                 | LR__3344
1fff8     01 FA 65 F6 | 	neg	result1, #1
1fffc     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
20000                 | LR__3345
20000     80 00 00 FF 
20004     00 06 16 F2 | 	cmp	_var04, ##65536 wc
20008     2C 00 90 CD |  if_b	jmp	#LR__3346
2000c     03 03 02 F6 | 	mov	_var02, _var04
20010     80 00 00 FF 
20014     00 02 86 F1 | 	sub	_var02, ##65536
20018     06 02 66 F0 | 	shl	_var02, #6
2001c     80 FF 01 FF 
20020     00 02 06 F5 | 	and	_var02, ##67043328
20024     6E 00 6C FF 
20028     00 08 06 F6 | 	mov	_var05, ##-671032320
2002c     01 09 42 F5 | 	or	_var05, _var02
20030     09 06 46 F7 | 	zerox	_var04, #9
20034     04 07 42 F5 | 	or	_var04, _var05
20038                 | LR__3346
20038                 | LR__3347
20038     09 05 62 FC | 	wrlong	_var03, arg01
2003c                 | ' 	}
2003c                 | ' #line 811 "ff.c"
2003c                 | ' 	*str = p;
2003c                 | ' 	return uc;
2003c     03 FB 01 F6 | 	mov	result1, _var04
20040                 | _fatfs_cc_tchar2uni_ret
20040     2D 00 64 FD | 	ret
20044                 | 
20044                 | _fatfs_cc_put_utf
20044     80 12 16 F2 | 	cmp	arg01, #128 wc
20048     18 00 90 3D |  if_ae	jmp	#LR__3350
2004c     01 16 16 F2 | 	cmp	arg03, #1 wc
20050     00 FA 05 C6 |  if_b	mov	result1, #0
20054     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
20058     0A 13 42 FC | 	wrbyte	arg01, arg02
2005c                 | ' 		*buf = (TCHAR)chr;
2005c                 | ' 		return 1;
2005c     01 FA 05 F6 | 	mov	result1, #1
20060     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
20064                 | LR__3350
20064     04 00 00 FF 
20068     00 12 16 F2 | 	cmp	arg01, ##2048 wc
2006c     40 00 90 3D |  if_ae	jmp	#LR__3351
20070     02 16 16 F2 | 	cmp	arg03, #2 wc
20074     00 FA 05 C6 |  if_b	mov	result1, #0
20078     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2007c     09 FB 01 F6 | 	mov	result1, arg01
20080     06 FA 45 F0 | 	shr	result1, #6
20084     1F FA 05 F5 | 	and	result1, #31
20088     C0 16 06 F6 | 	mov	arg03, #192
2008c     FD 16 42 F5 | 	or	arg03, result1
20090     0A 17 42 FC | 	wrbyte	arg03, arg02
20094     01 14 06 F1 | 	add	arg02, #1
20098     3F 12 06 F5 | 	and	arg01, #63
2009c     80 FA 05 F6 | 	mov	result1, #128
200a0     09 FB 41 F5 | 	or	result1, arg01
200a4     0A FB 41 FC | 	wrbyte	result1, arg02
200a8                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
200a8                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
200a8                 | ' 		return 2;
200a8     02 FA 05 F6 | 	mov	result1, #2
200ac     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
200b0                 | LR__3351
200b0     80 00 00 FF 
200b4     00 12 16 F2 | 	cmp	arg01, ##65536 wc
200b8     70 00 90 3D |  if_ae	jmp	#LR__3354
200bc     03 16 16 F2 | 	cmp	arg03, #3 wc
200c0     18 00 90 CD |  if_b	jmp	#LR__3352
200c4     6C 00 00 FF 
200c8     00 12 16 F2 | 	cmp	arg01, ##55296 wc
200cc     14 00 90 CD |  if_b	jmp	#LR__3353
200d0     70 00 00 FF 
200d4     00 12 16 F2 | 	cmp	arg01, ##57344 wc
200d8     08 00 90 3D |  if_ae	jmp	#LR__3353
200dc                 | LR__3352
200dc     00 FA 05 F6 | 	mov	result1, #0
200e0     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
200e4                 | LR__3353
200e4     09 FB 59 F8 | 	getnib	result1, arg01, #3
200e8     E0 16 06 F6 | 	mov	arg03, #224
200ec     FD 16 42 F5 | 	or	arg03, result1
200f0     0A 17 42 FC | 	wrbyte	arg03, arg02
200f4     01 14 06 F1 | 	add	arg02, #1
200f8     09 FB 01 F6 | 	mov	result1, arg01
200fc     06 FA 45 F0 | 	shr	result1, #6
20100     3F FA 05 F5 | 	and	result1, #63
20104     80 16 06 F6 | 	mov	arg03, #128
20108     FD 16 42 F5 | 	or	arg03, result1
2010c     0A 17 42 FC | 	wrbyte	arg03, arg02
20110     01 14 06 F1 | 	add	arg02, #1
20114     3F 12 06 F5 | 	and	arg01, #63
20118     80 FA 05 F6 | 	mov	result1, #128
2011c     09 FB 41 F5 | 	or	result1, arg01
20120     0A FB 41 FC | 	wrbyte	result1, arg02
20124                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
20124                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
20124                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
20124                 | ' 		return 3;
20124     03 FA 05 F6 | 	mov	result1, #3
20128     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2012c                 | LR__3354
2012c     04 16 16 F2 | 	cmp	arg03, #4 wc
20130     00 FA 05 C6 |  if_b	mov	result1, #0
20134     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
20138     09 01 02 F6 | 	mov	_var01, arg01
2013c     E0 01 06 F4 | 	bitl	_var01, #480
20140     00 00 6C FF 
20144     00 00 86 F1 | 	sub	_var01, ##-671088640
20148     06 00 46 F0 | 	shr	_var01, #6
2014c     09 13 32 F9 | 	getword	arg01, arg01, #0
20150     6E 00 00 FF 
20154     00 12 86 F1 | 	sub	arg01, ##56320
20158     00 08 00 FF 
2015c     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
20160     02 00 00 CF 
20164     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
20168     00 FA 05 36 |  if_ae	mov	result1, #0
2016c     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
20170     09 01 42 F5 | 	or	_var01, arg01
20174     80 00 00 FF 
20178     00 00 06 F1 | 	add	_var01, ##65536
2017c     00 FB 01 F6 | 	mov	result1, _var01
20180     12 FA 45 F0 | 	shr	result1, #18
20184     07 FA 05 F5 | 	and	result1, #7
20188     F0 16 06 F6 | 	mov	arg03, #240
2018c     FD 16 42 F5 | 	or	arg03, result1
20190     0A 17 42 FC | 	wrbyte	arg03, arg02
20194     01 14 06 F1 | 	add	arg02, #1
20198     00 FB 01 F6 | 	mov	result1, _var01
2019c     0C FA 45 F0 | 	shr	result1, #12
201a0     3F FA 05 F5 | 	and	result1, #63
201a4     80 16 06 F6 | 	mov	arg03, #128
201a8     FD 16 42 F5 | 	or	arg03, result1
201ac     0A 17 42 FC | 	wrbyte	arg03, arg02
201b0     01 14 06 F1 | 	add	arg02, #1
201b4     00 FB 01 F6 | 	mov	result1, _var01
201b8     06 FA 45 F0 | 	shr	result1, #6
201bc     3F FA 05 F5 | 	and	result1, #63
201c0     80 16 06 F6 | 	mov	arg03, #128
201c4     FD 16 42 F5 | 	or	arg03, result1
201c8     0A 17 42 FC | 	wrbyte	arg03, arg02
201cc     01 14 06 F1 | 	add	arg02, #1
201d0     3F 00 06 F5 | 	and	_var01, #63
201d4     80 FA 05 F6 | 	mov	result1, #128
201d8     00 FB 41 F5 | 	or	result1, _var01
201dc     0A FB 41 FC | 	wrbyte	result1, arg02
201e0                 | ' 	chr = (hc | chr) + 0x10000;
201e0                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
201e0                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
201e0                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
201e0                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
201e0                 | ' 	return 4;
201e0     04 FA 05 F6 | 	mov	result1, #4
201e4                 | _fatfs_cc_put_utf_ret
201e4     2D 00 64 FD | 	ret
201e8                 | 
201e8                 | _fatfs_cc_sync_window
201e8     02 4A 05 F6 | 	mov	COUNT_, #2
201ec     A8 00 A0 FD | 	call	#pushregs_
201f0     09 1F 02 F6 | 	mov	local01, arg01
201f4     00 20 06 F6 | 	mov	local02, #0
201f8     03 1E 06 F1 | 	add	local01, #3
201fc     0F FB C9 FA | 	rdbyte	result1, local01 wz
20200     03 1E 86 F1 | 	sub	local01, #3
20204     A4 00 90 AD |  if_e	jmp	#LR__3362
20208     01 1E 06 F1 | 	add	local01, #1
2020c     0F 13 C2 FA | 	rdbyte	arg01, local01
20210     33 1E 06 F1 | 	add	local01, #51
20214     0F 15 02 F6 | 	mov	arg02, local01
20218     04 1E 86 F1 | 	sub	local01, #4
2021c     0F 17 02 FB | 	rdlong	arg03, local01
20220     30 1E 86 F1 | 	sub	local01, #48
20224     01 18 06 F6 | 	mov	arg04, #1
20228     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
2022c     00 FA 0D F2 | 	cmp	result1, #0 wz
20230     74 00 90 5D |  if_ne	jmp	#LR__3360
20234     03 1E 06 F1 | 	add	local01, #3
20238     0F 01 48 FC | 	wrbyte	#0, local01
2023c     2D 1E 06 F1 | 	add	local01, #45
20240     0F FB 01 FB | 	rdlong	result1, local01
20244     0C 1E 86 F1 | 	sub	local01, #12
20248     0F 19 02 FB | 	rdlong	arg04, local01
2024c     0C FB 81 F1 | 	sub	result1, arg04
20250     08 1E 86 F1 | 	sub	local01, #8
20254     0F 19 02 FB | 	rdlong	arg04, local01
20258     1C 1E 86 F1 | 	sub	local01, #28
2025c     0C FB 11 F2 | 	cmp	result1, arg04 wc
20260     48 00 90 3D |  if_ae	jmp	#LR__3361
20264     02 1E 06 F1 | 	add	local01, #2
20268     0F 19 C2 FA | 	rdbyte	arg04, local01
2026c     02 1E 86 F1 | 	sub	local01, #2
20270     02 18 0E F2 | 	cmp	arg04, #2 wz
20274     34 00 90 5D |  if_ne	jmp	#LR__3361
20278     01 1E 06 F1 | 	add	local01, #1
2027c     0F 13 C2 FA | 	rdbyte	arg01, local01
20280     33 1E 06 F1 | 	add	local01, #51
20284     0F 15 02 F6 | 	mov	arg02, local01
20288     04 1E 86 F1 | 	sub	local01, #4
2028c     0F 17 02 FB | 	rdlong	arg03, local01
20290     14 1E 86 F1 | 	sub	local01, #20
20294     0F 1F 02 FB | 	rdlong	local01, local01
20298     0F 17 02 F1 | 	add	arg03, local01
2029c     01 18 06 F6 | 	mov	arg04, #1
202a0     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
202a4     04 00 90 FD | 	jmp	#LR__3361
202a8                 | LR__3360
202a8     01 20 06 F6 | 	mov	local02, #1
202ac                 | LR__3361
202ac                 | LR__3362
202ac                 | ' 			res = FR_DISK_ERR;
202ac                 | ' 		}
202ac                 | ' 	}
202ac                 | ' 	return res;
202ac     10 FB 01 F6 | 	mov	result1, local02
202b0     A7 F0 03 F6 | 	mov	ptra, fp
202b4     B2 00 A0 FD | 	call	#popregs_
202b8                 | _fatfs_cc_sync_window_ret
202b8     2D 00 64 FD | 	ret
202bc                 | 
202bc                 | _fatfs_cc_move_window
202bc     03 4A 05 F6 | 	mov	COUNT_, #3
202c0     A8 00 A0 FD | 	call	#pushregs_
202c4     09 1F 02 F6 | 	mov	local01, arg01
202c8     0A 21 02 F6 | 	mov	local02, arg02
202cc     00 22 06 F6 | 	mov	local03, #0
202d0     30 1E 06 F1 | 	add	local01, #48
202d4     0F 19 02 FB | 	rdlong	arg04, local01
202d8     30 1E 86 F1 | 	sub	local01, #48
202dc     0C 21 0A F2 | 	cmp	local02, arg04 wz
202e0     40 00 90 AD |  if_e	jmp	#LR__3371
202e4     0F 13 02 F6 | 	mov	arg01, local01
202e8     FC FE BF FD | 	call	#_fatfs_cc_sync_window
202ec     FD 22 0A F6 | 	mov	local03, result1 wz
202f0     30 00 90 5D |  if_ne	jmp	#LR__3370
202f4     01 1E 06 F1 | 	add	local01, #1
202f8     0F 13 C2 FA | 	rdbyte	arg01, local01
202fc     33 1E 06 F1 | 	add	local01, #51
20300     0F 15 02 F6 | 	mov	arg02, local01
20304     10 17 02 F6 | 	mov	arg03, local02
20308     01 18 06 F6 | 	mov	arg04, #1
2030c     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
20310     00 FA 0D F2 | 	cmp	result1, #0 wz
20314     01 20 66 56 |  if_ne	neg	local02, #1
20318     01 22 06 56 |  if_ne	mov	local03, #1
2031c     04 1E 86 F1 | 	sub	local01, #4
20320     0F 21 62 FC | 	wrlong	local02, local01
20324                 | LR__3370
20324                 | LR__3371
20324                 | ' 				sect = (LBA_t)0 - 1;
20324                 | ' 				res = FR_DISK_ERR;
20324                 | ' 			}
20324                 | ' 			fs->winsect = sect;
20324                 | ' 		}
20324                 | ' 	}
20324                 | ' 	return res;
20324     11 FB 01 F6 | 	mov	result1, local03
20328     A7 F0 03 F6 | 	mov	ptra, fp
2032c     B2 00 A0 FD | 	call	#popregs_
20330                 | _fatfs_cc_move_window_ret
20330     2D 00 64 FD | 	ret
20334                 | 
20334                 | _fatfs_cc_sync_fs
20334     02 4A 05 F6 | 	mov	COUNT_, #2
20338     A8 00 A0 FD | 	call	#pushregs_
2033c     09 1F 02 F6 | 	mov	local01, arg01
20340     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
20344     FD 20 0A F6 | 	mov	local02, result1 wz
20348     D8 00 90 5D |  if_ne	jmp	#LR__3381
2034c     0F 19 C2 FA | 	rdbyte	arg04, local01
20350     03 18 0E F2 | 	cmp	arg04, #3 wz
20354     04 1E 06 A1 |  if_e	add	local01, #4
20358     0F 19 C2 AA |  if_e	rdbyte	arg04, local01
2035c     04 1E 86 A1 |  if_e	sub	local01, #4
20360     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
20364     A0 00 90 5D |  if_ne	jmp	#LR__3380
20368     34 1E 06 F1 | 	add	local01, #52
2036c     0F 13 02 F6 | 	mov	arg01, local01
20370     00 14 06 F6 | 	mov	arg02, #0
20374     09 16 C6 F9 | 	decod	arg03, #9
20378     98 00 A0 FD | 	call	#\builtin_bytefill_
2037c     0F 13 02 F6 | 	mov	arg01, local01
20380     FE 13 06 F1 | 	add	arg01, #510
20384     55 00 80 FF 
20388     09 AB 58 FC | 	wrword	##43605, arg01
2038c     A9 B0 A0 FF 
20390     0F A5 68 FC | 	wrlong	##1096897106, local01
20394     0F 13 02 F6 | 	mov	arg01, local01
20398     E4 13 06 F1 | 	add	arg01, #484
2039c     B9 A0 B0 FF 
203a0     09 E5 68 FC | 	wrlong	##1631679090, arg01
203a4     0F 13 02 F6 | 	mov	arg01, local01
203a8     E8 13 06 F1 | 	add	arg01, #488
203ac     20 1E 86 F1 | 	sub	local01, #32
203b0     0F 15 02 FB | 	rdlong	arg02, local01
203b4     09 15 62 FC | 	wrlong	arg02, arg01
203b8     20 1E 06 F1 | 	add	local01, #32
203bc     0F 13 02 F6 | 	mov	arg01, local01
203c0     EC 13 06 F1 | 	add	arg01, #492
203c4     24 1E 86 F1 | 	sub	local01, #36
203c8     0F 15 02 FB | 	rdlong	arg02, local01
203cc     09 15 62 FC | 	wrlong	arg02, arg01
203d0     10 1E 06 F1 | 	add	local01, #16
203d4     0F 17 02 FB | 	rdlong	arg03, local01
203d8     01 16 06 F1 | 	add	arg03, #1
203dc     10 1E 06 F1 | 	add	local01, #16
203e0     0F 17 62 FC | 	wrlong	arg03, local01
203e4     2F 1E 86 F1 | 	sub	local01, #47
203e8     0F 13 C2 FA | 	rdbyte	arg01, local01
203ec     33 1E 06 F1 | 	add	local01, #51
203f0     0F 15 02 F6 | 	mov	arg02, local01
203f4     01 18 06 F6 | 	mov	arg04, #1
203f8     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
203fc     30 1E 86 F1 | 	sub	local01, #48
20400     0F 01 48 FC | 	wrbyte	#0, local01
20404     04 1E 86 F1 | 	sub	local01, #4
20408                 | LR__3380
20408     01 1E 06 F1 | 	add	local01, #1
2040c     0F 13 C2 FA | 	rdbyte	arg01, local01
20410     00 14 06 F6 | 	mov	arg02, #0
20414     00 16 06 F6 | 	mov	arg03, #0
20418     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
2041c     00 FA 0D F2 | 	cmp	result1, #0 wz
20420     01 20 06 56 |  if_ne	mov	local02, #1
20424                 | LR__3381
20424                 | ' 	}
20424                 | ' 
20424                 | ' 	return res;
20424     10 FB 01 F6 | 	mov	result1, local02
20428     A7 F0 03 F6 | 	mov	ptra, fp
2042c     B2 00 A0 FD | 	call	#popregs_
20430                 | _fatfs_cc_sync_fs_ret
20430     2D 00 64 FD | 	ret
20434                 | 
20434                 | _fatfs_cc_clst2sect
20434     02 14 86 F1 | 	sub	arg02, #2
20438     18 12 06 F1 | 	add	arg01, #24
2043c     09 01 02 FB | 	rdlong	_var01, arg01
20440     18 12 86 F1 | 	sub	arg01, #24
20444     02 00 86 F1 | 	sub	_var01, #2
20448     00 15 12 F2 | 	cmp	arg02, _var01 wc
2044c     00 FA 05 36 |  if_ae	mov	result1, #0
20450     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
20454     0A 12 06 F1 | 	add	arg01, #10
20458     09 01 E2 FA | 	rdword	_var01, arg01
2045c     0A 01 02 FD | 	qmul	_var01, arg02
20460                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
20460     22 12 06 F1 | 	add	arg01, #34
20464     09 FB 01 FB | 	rdlong	result1, arg01
20468     18 00 62 FD | 	getqx	_var01
2046c     00 FB 01 F1 | 	add	result1, _var01
20470                 | _fatfs_cc_clst2sect_ret
20470     2D 00 64 FD | 	ret
20474                 | 
20474                 | _fatfs_cc_get_fat
20474     07 4A 05 F6 | 	mov	COUNT_, #7
20478     A8 00 A0 FD | 	call	#pushregs_
2047c     0A 1F 02 F6 | 	mov	local01, arg02
20480     09 21 02 FB | 	rdlong	local02, arg01
20484     02 1E 16 F2 | 	cmp	local01, #2 wc
20488     14 00 90 CD |  if_b	jmp	#LR__3390
2048c     18 20 06 F1 | 	add	local02, #24
20490     10 23 02 FB | 	rdlong	local03, local02
20494     18 20 86 F1 | 	sub	local02, #24
20498     11 1F 12 F2 | 	cmp	local01, local03 wc
2049c     08 00 90 CD |  if_b	jmp	#LR__3391
204a0                 | LR__3390
204a0     01 24 06 F6 | 	mov	local04, #1
204a4     60 01 90 FD | 	jmp	#LR__3398
204a8                 | LR__3391
204a8     01 24 66 F6 | 	neg	local04, #1
204ac                 | ' 		val = 0xFFFFFFFF;
204ac                 | ' 
204ac                 | ' 		switch (fs->fs_type) {
204ac     10 27 C2 FA | 	rdbyte	local05, local02
204b0     01 26 86 F1 | 	sub	local05, #1
204b4     03 26 26 F3 | 	fle	local05, #3
204b8     30 26 62 FD | 	jmprel	local05
204bc                 | LR__3392
204bc     0C 00 90 FD | 	jmp	#LR__3393
204c0     B8 00 90 FD | 	jmp	#LR__3394
204c4     F8 00 90 FD | 	jmp	#LR__3395
204c8     38 01 90 FD | 	jmp	#LR__3396
204cc                 | LR__3393
204cc     0F 27 02 F6 | 	mov	local05, local01
204d0     0F 13 02 F6 | 	mov	arg01, local01
204d4     01 12 46 F0 | 	shr	arg01, #1
204d8     09 27 02 F1 | 	add	local05, arg01
204dc     10 13 02 F6 | 	mov	arg01, local02
204e0     13 29 02 F6 | 	mov	local06, local05
204e4     09 28 46 F0 | 	shr	local06, #9
204e8     24 20 06 F1 | 	add	local02, #36
204ec     10 15 02 FB | 	rdlong	arg02, local02
204f0     24 20 86 F1 | 	sub	local02, #36
204f4     14 15 02 F1 | 	add	arg02, local06
204f8     C0 FD BF FD | 	call	#_fatfs_cc_move_window
204fc     00 FA 0D F2 | 	cmp	result1, #0 wz
20500     04 01 90 5D |  if_ne	jmp	#LR__3397
20504     13 29 02 F6 | 	mov	local06, local05
20508     FF 29 06 F5 | 	and	local06, #511
2050c     34 20 06 F1 | 	add	local02, #52
20510     10 29 02 F1 | 	add	local06, local02
20514     14 2B C2 FA | 	rdbyte	local07, local06
20518     34 20 86 F1 | 	sub	local02, #52
2051c     10 13 02 F6 | 	mov	arg01, local02
20520     01 26 06 F1 | 	add	local05, #1
20524     13 29 02 F6 | 	mov	local06, local05
20528     09 28 46 F0 | 	shr	local06, #9
2052c     24 20 06 F1 | 	add	local02, #36
20530     10 15 02 FB | 	rdlong	arg02, local02
20534     24 20 86 F1 | 	sub	local02, #36
20538     14 15 02 F1 | 	add	arg02, local06
2053c     7C FD BF FD | 	call	#_fatfs_cc_move_window
20540     00 FA 0D F2 | 	cmp	result1, #0 wz
20544     C0 00 90 5D |  if_ne	jmp	#LR__3397
20548     FF 27 06 F5 | 	and	local05, #511
2054c     34 20 06 F1 | 	add	local02, #52
20550     10 27 02 F1 | 	add	local05, local02
20554     13 29 C2 FA | 	rdbyte	local06, local05
20558     08 28 66 F0 | 	shl	local06, #8
2055c     14 2B 42 F5 | 	or	local07, local06
20560     01 1E CE F7 | 	test	local01, #1 wz
20564     04 2A 46 50 |  if_ne	shr	local07, #4
20568     15 23 02 56 |  if_ne	mov	local03, local07
2056c     0B 2A 46 A7 |  if_e	zerox	local07, #11
20570     15 23 02 A6 |  if_e	mov	local03, local07
20574     11 25 02 F6 | 	mov	local04, local03
20578                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
20578                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
20578                 | ' 			break;
20578     8C 00 90 FD | 	jmp	#LR__3397
2057c                 | LR__3394
2057c     10 13 02 F6 | 	mov	arg01, local02
20580     0F 29 02 F6 | 	mov	local06, local01
20584     08 28 46 F0 | 	shr	local06, #8
20588     24 20 06 F1 | 	add	local02, #36
2058c     10 15 02 FB | 	rdlong	arg02, local02
20590     24 20 86 F1 | 	sub	local02, #36
20594     14 15 02 F1 | 	add	arg02, local06
20598     20 FD BF FD | 	call	#_fatfs_cc_move_window
2059c     00 FA 0D F2 | 	cmp	result1, #0 wz
205a0     64 00 90 5D |  if_ne	jmp	#LR__3397
205a4     34 20 06 F1 | 	add	local02, #52
205a8     01 1E 66 F0 | 	shl	local01, #1
205ac     FF 1F 06 F5 | 	and	local01, #511
205b0     0F 21 02 F1 | 	add	local02, local01
205b4                 | ' {
205b4                 | ' 
205b4                 | ' 	return *((WORD*)ptr);
205b4     10 FB E1 FA | 	rdword	result1, local02
205b8     FD 24 32 F9 | 	getword	local04, result1, #0
205bc                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
205bc                 | ' 			break;
205bc     48 00 90 FD | 	jmp	#LR__3397
205c0                 | LR__3395
205c0     10 13 02 F6 | 	mov	arg01, local02
205c4     0F 29 02 F6 | 	mov	local06, local01
205c8     07 28 46 F0 | 	shr	local06, #7
205cc     24 20 06 F1 | 	add	local02, #36
205d0     10 15 02 FB | 	rdlong	arg02, local02
205d4     24 20 86 F1 | 	sub	local02, #36
205d8     14 15 02 F1 | 	add	arg02, local06
205dc     DC FC BF FD | 	call	#_fatfs_cc_move_window
205e0     00 FA 0D F2 | 	cmp	result1, #0 wz
205e4     20 00 90 5D |  if_ne	jmp	#LR__3397
205e8     34 20 06 F1 | 	add	local02, #52
205ec     02 1E 66 F0 | 	shl	local01, #2
205f0     FF 1F 06 F5 | 	and	local01, #511
205f4     0F 21 02 F1 | 	add	local02, local01
205f8                 | ' {
205f8                 | ' 
205f8                 | ' 	return *((DWORD*)ptr);
205f8     10 25 02 FB | 	rdlong	local04, local02
205fc     7C 24 06 F4 | 	bitl	local04, #124
20600                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
20600                 | ' 			break;
20600     04 00 90 FD | 	jmp	#LR__3397
20604                 | LR__3396
20604     01 24 06 F6 | 	mov	local04, #1
20608                 | LR__3397
20608                 | LR__3398
20608                 | ' 			val = 1;
20608                 | ' 		}
20608                 | ' 	}
20608                 | ' 
20608                 | ' 	return val;
20608     12 FB 01 F6 | 	mov	result1, local04
2060c     A7 F0 03 F6 | 	mov	ptra, fp
20610     B2 00 A0 FD | 	call	#popregs_
20614                 | _fatfs_cc_get_fat_ret
20614     2D 00 64 FD | 	ret
20618                 | 
20618                 | _fatfs_cc_put_fat
20618     08 4A 05 F6 | 	mov	COUNT_, #8
2061c     A8 00 A0 FD | 	call	#pushregs_
20620     09 1F 02 F6 | 	mov	local01, arg01
20624     0A 21 02 F6 | 	mov	local02, arg02
20628     0B 23 02 F6 | 	mov	local03, arg03
2062c     02 24 06 F6 | 	mov	local04, #2
20630     02 20 16 F2 | 	cmp	local02, #2 wc
20634     E0 01 90 CD |  if_b	jmp	#LR__3407
20638     18 1E 06 F1 | 	add	local01, #24
2063c     0F 27 02 FB | 	rdlong	local05, local01
20640     18 1E 86 F1 | 	sub	local01, #24
20644     13 21 12 F2 | 	cmp	local02, local05 wc
20648     CC 01 90 3D |  if_ae	jmp	#LR__3407
2064c                 | ' 		switch (fs->fs_type) {
2064c     0F 29 C2 FA | 	rdbyte	local06, local01
20650     01 28 86 F1 | 	sub	local06, #1
20654     03 28 26 F3 | 	fle	local06, #3
20658     30 28 62 FD | 	jmprel	local06
2065c                 | LR__3400
2065c     0C 00 90 FD | 	jmp	#LR__3401
20660     F8 00 90 FD | 	jmp	#LR__3404
20664     40 01 90 FD | 	jmp	#LR__3405
20668     AC 01 90 FD | 	jmp	#LR__3406
2066c                 | LR__3401
2066c     10 2B 02 F6 | 	mov	local07, local02
20670     10 27 02 F6 | 	mov	local05, local02
20674     01 26 46 F0 | 	shr	local05, #1
20678     13 2B 02 F1 | 	add	local07, local05
2067c     0F 13 02 F6 | 	mov	arg01, local01
20680     15 29 02 F6 | 	mov	local06, local07
20684     09 28 46 F0 | 	shr	local06, #9
20688     24 1E 06 F1 | 	add	local01, #36
2068c     0F 15 02 FB | 	rdlong	arg02, local01
20690     24 1E 86 F1 | 	sub	local01, #36
20694     14 15 02 F1 | 	add	arg02, local06
20698     20 FC BF FD | 	call	#_fatfs_cc_move_window
2069c     FD 24 0A F6 | 	mov	local04, result1 wz
206a0     74 01 90 5D |  if_ne	jmp	#LR__3406
206a4     34 1E 06 F1 | 	add	local01, #52
206a8     0F 2D 02 F6 | 	mov	local08, local01
206ac     15 27 02 F6 | 	mov	local05, local07
206b0     FF 27 06 F5 | 	and	local05, #511
206b4     13 2D 02 F1 | 	add	local08, local05
206b8     01 20 CE F7 | 	test	local02, #1 wz
206bc     34 1E 86 F1 | 	sub	local01, #52
206c0     01 2A 06 F1 | 	add	local07, #1
206c4     18 00 90 AD |  if_e	jmp	#LR__3402
206c8     16 27 C2 FA | 	rdbyte	local05, local08
206cc     13 27 42 F8 | 	getnib	local05, local05, #0
206d0     11 29 E2 F8 | 	getbyte	local06, local03, #0
206d4     04 28 66 F0 | 	shl	local06, #4
206d8     14 27 42 F5 | 	or	local05, local06
206dc     04 00 90 FD | 	jmp	#LR__3403
206e0                 | LR__3402
206e0     11 27 02 F6 | 	mov	local05, local03
206e4                 | LR__3403
206e4     16 27 42 FC | 	wrbyte	local05, local08
206e8     03 1E 06 F1 | 	add	local01, #3
206ec     0F 03 48 FC | 	wrbyte	#1, local01
206f0     03 1E 86 F1 | 	sub	local01, #3
206f4     0F 13 02 F6 | 	mov	arg01, local01
206f8     15 2D 02 F6 | 	mov	local08, local07
206fc     09 2C 46 F0 | 	shr	local08, #9
20700     24 1E 06 F1 | 	add	local01, #36
20704     0F 15 02 FB | 	rdlong	arg02, local01
20708     24 1E 86 F1 | 	sub	local01, #36
2070c     16 15 02 F1 | 	add	arg02, local08
20710     A8 FB BF FD | 	call	#_fatfs_cc_move_window
20714     FD 24 0A F6 | 	mov	local04, result1 wz
20718     FC 00 90 5D |  if_ne	jmp	#LR__3406
2071c     34 1E 06 F1 | 	add	local01, #52
20720     0F 2D 02 F6 | 	mov	local08, local01
20724     FF 2B 06 F5 | 	and	local07, #511
20728     15 2D 02 F1 | 	add	local08, local07
2072c     01 20 CE F7 | 	test	local02, #1 wz
20730     04 22 46 50 |  if_ne	shr	local03, #4
20734     11 27 02 56 |  if_ne	mov	local05, local03
20738     16 27 C2 AA |  if_e	rdbyte	local05, local08
2073c     F0 26 06 A5 |  if_e	and	local05, #240
20740     11 23 EA A8 |  if_e	getbyte	local03, local03, #1
20744     11 23 42 A8 |  if_e	getnib	local03, local03, #0
20748     11 27 42 A5 |  if_e	or	local05, local03
2074c     16 27 42 FC | 	wrbyte	local05, local08
20750     31 1E 86 F1 | 	sub	local01, #49
20754     0F 03 48 FC | 	wrbyte	#1, local01
20758                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
20758                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
20758                 | ' 			fs->wflag = 1;
20758                 | ' 			break;
20758     BC 00 90 FD | 	jmp	#LR__3406
2075c                 | LR__3404
2075c     0F 13 02 F6 | 	mov	arg01, local01
20760     10 2D 02 F6 | 	mov	local08, local02
20764     08 2C 46 F0 | 	shr	local08, #8
20768     24 1E 06 F1 | 	add	local01, #36
2076c     0F 15 02 FB | 	rdlong	arg02, local01
20770     24 1E 86 F1 | 	sub	local01, #36
20774     16 15 02 F1 | 	add	arg02, local08
20778     40 FB BF FD | 	call	#_fatfs_cc_move_window
2077c     FD 24 0A F6 | 	mov	local04, result1 wz
20780     94 00 90 5D |  if_ne	jmp	#LR__3406
20784     34 1E 06 F1 | 	add	local01, #52
20788     0F 13 02 F6 | 	mov	arg01, local01
2078c     01 20 66 F0 | 	shl	local02, #1
20790     FF 21 06 F5 | 	and	local02, #511
20794     10 13 02 F1 | 	add	arg01, local02
20798     09 23 52 FC | 	wrword	local03, arg01
2079c     31 1E 86 F1 | 	sub	local01, #49
207a0     0F 03 48 FC | 	wrbyte	#1, local01
207a4                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
207a4                 | ' 			fs->wflag = 1;
207a4                 | ' 			break;
207a4     70 00 90 FD | 	jmp	#LR__3406
207a8                 | LR__3405
207a8     0F 13 02 F6 | 	mov	arg01, local01
207ac     10 2D 02 F6 | 	mov	local08, local02
207b0     07 2C 46 F0 | 	shr	local08, #7
207b4     24 1E 06 F1 | 	add	local01, #36
207b8     0F 15 02 FB | 	rdlong	arg02, local01
207bc     24 1E 86 F1 | 	sub	local01, #36
207c0     16 15 02 F1 | 	add	arg02, local08
207c4     F4 FA BF FD | 	call	#_fatfs_cc_move_window
207c8     FD 24 0A F6 | 	mov	local04, result1 wz
207cc     48 00 90 5D |  if_ne	jmp	#LR__3406
207d0     7C 22 06 F4 | 	bitl	local03, #124
207d4     34 1E 06 F1 | 	add	local01, #52
207d8     10 2D 02 F6 | 	mov	local08, local02
207dc     02 2C 66 F0 | 	shl	local08, #2
207e0     FF 2D 06 F5 | 	and	local08, #511
207e4     0F 13 02 F6 | 	mov	arg01, local01
207e8     16 13 02 F1 | 	add	arg01, local08
207ec                 | ' {
207ec                 | ' 
207ec                 | ' 	return *((DWORD*)ptr);
207ec     09 2D 02 FB | 	rdlong	local08, arg01
207f0     00 00 78 FF 
207f4     00 2C 06 F5 | 	and	local08, ##-268435456
207f8     16 23 42 F5 | 	or	local03, local08
207fc     0F 13 02 F6 | 	mov	arg01, local01
20800     02 20 66 F0 | 	shl	local02, #2
20804     FF 21 06 F5 | 	and	local02, #511
20808     10 13 02 F1 | 	add	arg01, local02
2080c     09 23 62 FC | 	wrlong	local03, arg01
20810     31 1E 86 F1 | 	sub	local01, #49
20814     0F 03 48 FC | 	wrbyte	#1, local01
20818                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
20818                 | ' 			}
20818                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
20818                 | ' 			fs->wflag = 1;
20818                 | ' 			break;
20818                 | LR__3406
20818                 | LR__3407
20818                 | ' 		}
20818                 | ' 	}
20818                 | ' 	return res;
20818     12 FB 01 F6 | 	mov	result1, local04
2081c     A7 F0 03 F6 | 	mov	ptra, fp
20820     B2 00 A0 FD | 	call	#popregs_
20824                 | _fatfs_cc_put_fat_ret
20824     2D 00 64 FD | 	ret
20828                 | 
20828                 | _fatfs_cc_remove_chain
20828     05 4A 05 F6 | 	mov	COUNT_, #5
2082c     A8 00 A0 FD | 	call	#pushregs_
20830     09 1F 02 F6 | 	mov	local01, arg01
20834     0A 21 02 F6 | 	mov	local02, arg02
20838     0B 23 02 F6 | 	mov	local03, arg03
2083c     0F 25 02 FB | 	rdlong	local04, local01
20840     02 20 16 F2 | 	cmp	local02, #2 wc
20844     14 00 90 CD |  if_b	jmp	#LR__3410
20848     18 24 06 F1 | 	add	local04, #24
2084c     12 FB 01 FB | 	rdlong	result1, local04
20850     18 24 86 F1 | 	sub	local04, #24
20854     FD 20 12 F2 | 	cmp	local02, result1 wc
20858     08 00 90 CD |  if_b	jmp	#LR__3411
2085c                 | LR__3410
2085c     02 FA 05 F6 | 	mov	result1, #2
20860     CC 00 90 FD | 	jmp	#LR__3416
20864                 | LR__3411
20864     00 22 0E F2 | 	cmp	local03, #0 wz
20868     18 00 90 AD |  if_e	jmp	#LR__3412
2086c     11 15 02 F6 | 	mov	arg02, local03
20870     12 13 02 F6 | 	mov	arg01, local04
20874     01 16 66 F6 | 	neg	arg03, #1
20878     9C FD BF FD | 	call	#_fatfs_cc_put_fat
2087c     00 FA 0D F2 | 	cmp	result1, #0 wz
20880     AC 00 90 5D |  if_ne	jmp	#LR__3416
20884                 | LR__3412
20884                 | ' 	}
20884                 | ' 
20884                 | ' 
20884                 | ' 	do {
20884                 | LR__3413
20884     10 15 02 F6 | 	mov	arg02, local02
20888     0F 13 02 F6 | 	mov	arg01, local01
2088c     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
20890     FD 26 0A F6 | 	mov	local05, result1 wz
20894     94 00 90 AD |  if_e	jmp	#LR__3415
20898     01 26 0E F2 | 	cmp	local05, #1 wz
2089c     02 FA 05 A6 |  if_e	mov	result1, #2
208a0     8C 00 90 AD |  if_e	jmp	#LR__3416
208a4     FF FF 7F FF 
208a8     FF 27 0E F2 | 	cmp	local05, ##-1 wz
208ac     01 FA 05 A6 |  if_e	mov	result1, #1
208b0     7C 00 90 AD |  if_e	jmp	#LR__3416
208b4     10 15 02 F6 | 	mov	arg02, local02
208b8     12 13 02 F6 | 	mov	arg01, local04
208bc     00 16 06 F6 | 	mov	arg03, #0
208c0     54 FD BF FD | 	call	#_fatfs_cc_put_fat
208c4     FD 22 0A F6 | 	mov	local03, result1 wz
208c8     11 FB 01 56 |  if_ne	mov	result1, local03
208cc     60 00 90 5D |  if_ne	jmp	#LR__3416
208d0     18 24 06 F1 | 	add	local04, #24
208d4     12 23 02 FB | 	rdlong	local03, local04
208d8     02 22 86 F1 | 	sub	local03, #2
208dc     04 24 86 F1 | 	sub	local04, #4
208e0     12 21 02 FB | 	rdlong	local02, local04
208e4     14 24 86 F1 | 	sub	local04, #20
208e8     11 21 12 F2 | 	cmp	local02, local03 wc
208ec     24 00 90 3D |  if_ae	jmp	#LR__3414
208f0     14 24 06 F1 | 	add	local04, #20
208f4     12 23 02 FB | 	rdlong	local03, local04
208f8     01 22 06 F1 | 	add	local03, #1
208fc     12 23 62 FC | 	wrlong	local03, local04
20900     10 24 86 F1 | 	sub	local04, #16
20904     12 23 C2 FA | 	rdbyte	local03, local04
20908     01 22 46 F5 | 	or	local03, #1
2090c     12 23 42 FC | 	wrbyte	local03, local04
20910     04 24 86 F1 | 	sub	local04, #4
20914                 | LR__3414
20914     13 21 02 F6 | 	mov	local02, local05
20918     18 24 06 F1 | 	add	local04, #24
2091c     12 27 02 FB | 	rdlong	local05, local04
20920     18 24 86 F1 | 	sub	local04, #24
20924     13 21 12 F2 | 	cmp	local02, local05 wc
20928     58 FF 9F CD |  if_b	jmp	#LR__3413
2092c                 | LR__3415
2092c                 | ' #line 1500 "ff.c"
2092c                 | ' 	return FR_OK;
2092c     00 FA 05 F6 | 	mov	result1, #0
20930                 | LR__3416
20930     A7 F0 03 F6 | 	mov	ptra, fp
20934     B2 00 A0 FD | 	call	#popregs_
20938                 | _fatfs_cc_remove_chain_ret
20938     2D 00 64 FD | 	ret
2093c                 | 
2093c                 | _fatfs_cc_create_chain
2093c     09 4A 05 F6 | 	mov	COUNT_, #9
20940     A8 00 A0 FD | 	call	#pushregs_
20944     09 1F 02 F6 | 	mov	local01, arg01
20948     0A 21 0A F6 | 	mov	local02, arg02 wz
2094c     0F 23 02 FB | 	rdlong	local03, local01
20950     28 00 90 5D |  if_ne	jmp	#LR__3420
20954     10 22 06 F1 | 	add	local03, #16
20958     11 25 0A FB | 	rdlong	local04, local03 wz
2095c     10 22 86 F1 | 	sub	local03, #16
20960     18 22 06 51 |  if_ne	add	local03, #24
20964     11 27 02 5B |  if_ne	rdlong	local05, local03
20968     18 22 86 51 |  if_ne	sub	local03, #24
2096c     13 25 12 52 |  if_ne	cmp	local04, local05 wc
20970     50 00 90 4D |  if_c_and_nz	jmp	#LR__3421
20974     01 24 06 F6 | 	mov	local04, #1
20978     48 00 90 FD | 	jmp	#LR__3421
2097c                 | LR__3420
2097c     10 15 02 F6 | 	mov	arg02, local02
20980     0F 13 02 F6 | 	mov	arg01, local01
20984     EC FA BF FD | 	call	#_fatfs_cc_get_fat
20988     FD 24 02 F6 | 	mov	local04, result1
2098c     02 24 16 F2 | 	cmp	local04, #2 wc
20990     01 FA 05 C6 |  if_b	mov	result1, #1
20994     BC 01 90 CD |  if_b	jmp	#LR__3431
20998     FF FF 7F FF 
2099c     FF 25 0E F2 | 	cmp	local04, ##-1 wz
209a0     12 FB 01 A6 |  if_e	mov	result1, local04
209a4     AC 01 90 AD |  if_e	jmp	#LR__3431
209a8     18 22 06 F1 | 	add	local03, #24
209ac     11 27 02 FB | 	rdlong	local05, local03
209b0     18 22 86 F1 | 	sub	local03, #24
209b4     13 25 12 F2 | 	cmp	local04, local05 wc
209b8     12 FB 01 C6 |  if_b	mov	result1, local04
209bc     94 01 90 CD |  if_b	jmp	#LR__3431
209c0     10 25 02 F6 | 	mov	local04, local02
209c4                 | LR__3421
209c4     14 22 06 F1 | 	add	local03, #20
209c8     11 27 0A FB | 	rdlong	local05, local03 wz
209cc     14 22 86 F1 | 	sub	local03, #20
209d0     00 FA 05 A6 |  if_e	mov	result1, #0
209d4     7C 01 90 AD |  if_e	jmp	#LR__3431
209d8     00 28 06 F6 | 	mov	local06, #0
209dc     10 25 0A F2 | 	cmp	local04, local02 wz
209e0     74 00 90 5D |  if_ne	jmp	#LR__3424
209e4     12 29 02 F6 | 	mov	local06, local04
209e8     01 28 06 F1 | 	add	local06, #1
209ec     18 22 06 F1 | 	add	local03, #24
209f0     11 27 02 FB | 	rdlong	local05, local03
209f4     18 22 86 F1 | 	sub	local03, #24
209f8     13 29 12 F2 | 	cmp	local06, local05 wc
209fc     02 28 06 36 |  if_ae	mov	local06, #2
20a00     14 15 02 F6 | 	mov	arg02, local06
20a04     0F 13 02 F6 | 	mov	arg01, local01
20a08     68 FA BF FD | 	call	#_fatfs_cc_get_fat
20a0c     FD 26 02 F6 | 	mov	local05, result1
20a10     01 26 0E F2 | 	cmp	local05, #1 wz
20a14     FF FF 7F 5F 
20a18     FF 27 0E 52 |  if_ne	cmp	local05, ##-1 wz
20a1c     13 FB 01 A6 |  if_e	mov	result1, local05
20a20     30 01 90 AD |  if_e	jmp	#LR__3431
20a24     00 26 0E F2 | 	cmp	local05, #0 wz
20a28     2C 00 90 AD |  if_e	jmp	#LR__3423
20a2c     10 22 06 F1 | 	add	local03, #16
20a30     11 2B 02 FB | 	rdlong	local07, local03
20a34     10 22 86 F1 | 	sub	local03, #16
20a38     02 2A 16 F2 | 	cmp	local07, #2 wc
20a3c     14 00 90 CD |  if_b	jmp	#LR__3422
20a40     18 22 06 F1 | 	add	local03, #24
20a44     11 27 02 FB | 	rdlong	local05, local03
20a48     18 22 86 F1 | 	sub	local03, #24
20a4c     13 2B 12 F2 | 	cmp	local07, local05 wc
20a50     15 25 02 C6 |  if_b	mov	local04, local07
20a54                 | LR__3422
20a54     00 28 06 F6 | 	mov	local06, #0
20a58                 | LR__3423
20a58                 | LR__3424
20a58     00 28 0E F2 | 	cmp	local06, #0 wz
20a5c     60 00 90 5D |  if_ne	jmp	#LR__3427
20a60     12 29 02 F6 | 	mov	local06, local04
20a64                 | ' 			ncl = scl;
20a64                 | ' 			for (;;) {
20a64                 | LR__3425
20a64     01 28 06 F1 | 	add	local06, #1
20a68     18 22 06 F1 | 	add	local03, #24
20a6c     11 27 02 FB | 	rdlong	local05, local03
20a70     18 22 86 F1 | 	sub	local03, #24
20a74     13 29 12 F2 | 	cmp	local06, local05 wc
20a78     02 28 06 36 |  if_ae	mov	local06, #2
20a7c     12 29 1A 32 |  if_ae	cmp	local06, local04 wcz
20a80     00 FA 05 16 |  if_a	mov	result1, #0
20a84     CC 00 90 1D |  if_a	jmp	#LR__3431
20a88     14 15 02 F6 | 	mov	arg02, local06
20a8c     0F 13 02 F6 | 	mov	arg01, local01
20a90     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
20a94     FD 2A 0A F6 | 	mov	local07, result1 wz
20a98     24 00 90 AD |  if_e	jmp	#LR__3426
20a9c     01 2A 0E F2 | 	cmp	local07, #1 wz
20aa0     FF FF 7F 5F 
20aa4     FF 2B 0E 52 |  if_ne	cmp	local07, ##-1 wz
20aa8     15 FB 01 A6 |  if_e	mov	result1, local07
20aac     A4 00 90 AD |  if_e	jmp	#LR__3431
20ab0     12 29 0A F2 | 	cmp	local06, local04 wz
20ab4     00 FA 05 A6 |  if_e	mov	result1, #0
20ab8     98 00 90 AD |  if_e	jmp	#LR__3431
20abc     A4 FF 9F FD | 	jmp	#LR__3425
20ac0                 | LR__3426
20ac0                 | LR__3427
20ac0     11 13 02 F6 | 	mov	arg01, local03
20ac4     14 15 02 F6 | 	mov	arg02, local06
20ac8     01 16 66 F6 | 	neg	arg03, #1
20acc     48 FB BF FD | 	call	#_fatfs_cc_put_fat
20ad0     FD 2C 0A F6 | 	mov	local08, result1 wz
20ad4     1C 00 90 5D |  if_ne	jmp	#LR__3428
20ad8     00 20 0E F2 | 	cmp	local02, #0 wz
20adc     14 00 90 AD |  if_e	jmp	#LR__3428
20ae0     11 13 02 F6 | 	mov	arg01, local03
20ae4     10 15 02 F6 | 	mov	arg02, local02
20ae8     14 17 02 F6 | 	mov	arg03, local06
20aec     28 FB BF FD | 	call	#_fatfs_cc_put_fat
20af0     FD 2C 02 F6 | 	mov	local08, result1
20af4                 | LR__3428
20af4     00 2C 0E F2 | 	cmp	local08, #0 wz
20af8     4C 00 90 5D |  if_ne	jmp	#LR__3429
20afc     10 22 06 F1 | 	add	local03, #16
20b00     11 29 62 FC | 	wrlong	local06, local03
20b04     08 22 06 F1 | 	add	local03, #8
20b08     11 27 02 FB | 	rdlong	local05, local03
20b0c     02 26 86 F1 | 	sub	local05, #2
20b10     04 22 86 F1 | 	sub	local03, #4
20b14     11 2F 02 FB | 	rdlong	local09, local03
20b18     14 22 86 F1 | 	sub	local03, #20
20b1c     13 2F 1A F2 | 	cmp	local09, local05 wcz
20b20     14 22 06 E1 |  if_be	add	local03, #20
20b24     11 2F 02 EB |  if_be	rdlong	local09, local03
20b28     01 2E 86 E1 |  if_be	sub	local09, #1
20b2c     11 2F 62 EC |  if_be	wrlong	local09, local03
20b30     14 22 86 E1 |  if_be	sub	local03, #20
20b34     04 22 06 F1 | 	add	local03, #4
20b38     11 27 C2 FA | 	rdbyte	local05, local03
20b3c     01 26 46 F5 | 	or	local05, #1
20b40     11 27 42 FC | 	wrbyte	local05, local03
20b44     08 00 90 FD | 	jmp	#LR__3430
20b48                 | LR__3429
20b48     01 2C 0E F2 | 	cmp	local08, #1 wz
20b4c     01 28 C6 F6 | 	negz	local06, #1
20b50                 | LR__3430
20b50                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
20b50                 | ' 	}
20b50                 | ' 
20b50                 | ' 	return ncl;
20b50     14 FB 01 F6 | 	mov	result1, local06
20b54                 | LR__3431
20b54     A7 F0 03 F6 | 	mov	ptra, fp
20b58     B2 00 A0 FD | 	call	#popregs_
20b5c                 | _fatfs_cc_create_chain_ret
20b5c     2D 00 64 FD | 	ret
20b60                 | 
20b60                 | _fatfs_cc_dir_clear
20b60     06 4A 05 F6 | 	mov	COUNT_, #6
20b64     A8 00 A0 FD | 	call	#pushregs_
20b68     09 1F 02 F6 | 	mov	local01, arg01
20b6c     0A 21 02 F6 | 	mov	local02, arg02
20b70     0F 13 02 F6 | 	mov	arg01, local01
20b74     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
20b78     00 FA 0D F2 | 	cmp	result1, #0 wz
20b7c     01 FA 05 56 |  if_ne	mov	result1, #1
20b80     90 00 90 5D |  if_ne	jmp	#LR__3442
20b84     0F 13 02 F6 | 	mov	arg01, local01
20b88     10 15 02 F6 | 	mov	arg02, local02
20b8c     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
20b90     FD 22 02 F6 | 	mov	local03, result1
20b94     30 1E 06 F1 | 	add	local01, #48
20b98     0F 23 62 FC | 	wrlong	local03, local01
20b9c     04 1E 06 F1 | 	add	local01, #4
20ba0     0F 13 02 F6 | 	mov	arg01, local01
20ba4     00 14 06 F6 | 	mov	arg02, #0
20ba8     09 16 C6 F9 | 	decod	arg03, #9
20bac     98 00 A0 FD | 	call	#\builtin_bytefill_
20bb0     0F 25 02 F6 | 	mov	local04, local01
20bb4                 | ' #line 1667 "ff.c"
20bb4                 | ' 	{
20bb4                 | ' 		ibuf = fs->win; szb = 1;
20bb4                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
20bb4     00 26 06 F6 | 	mov	local05, #0
20bb8     34 1E 86 F1 | 	sub	local01, #52
20bbc                 | LR__3440
20bbc     0A 1E 06 F1 | 	add	local01, #10
20bc0     0F 29 E2 FA | 	rdword	local06, local01
20bc4     0A 1E 86 F1 | 	sub	local01, #10
20bc8     14 27 12 F2 | 	cmp	local05, local06 wc
20bcc     2C 00 90 3D |  if_ae	jmp	#LR__3441
20bd0     01 1E 06 F1 | 	add	local01, #1
20bd4     0F 13 C2 FA | 	rdbyte	arg01, local01
20bd8     01 1E 86 F1 | 	sub	local01, #1
20bdc     12 15 02 F6 | 	mov	arg02, local04
20be0     11 17 02 F6 | 	mov	arg03, local03
20be4     13 17 02 F1 | 	add	arg03, local05
20be8     01 18 06 F6 | 	mov	arg04, #1
20bec     9C EF BF FD | 	call	#_fatfs_cc_disk_write
20bf0     00 FA 0D F2 | 	cmp	result1, #0 wz
20bf4     01 26 06 A1 |  if_e	add	local05, #1
20bf8     C0 FF 9F AD |  if_e	jmp	#LR__3440
20bfc                 | LR__3441
20bfc                 | ' 	}
20bfc                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
20bfc     0A 1E 06 F1 | 	add	local01, #10
20c00     0F 25 E2 FA | 	rdword	local04, local01
20c04     12 27 0A F2 | 	cmp	local05, local04 wz
20c08     00 28 06 A6 |  if_e	mov	local06, #0
20c0c     01 28 06 56 |  if_ne	mov	local06, #1
20c10     14 FB 01 F6 | 	mov	result1, local06
20c14                 | LR__3442
20c14     A7 F0 03 F6 | 	mov	ptra, fp
20c18     B2 00 A0 FD | 	call	#popregs_
20c1c                 | _fatfs_cc_dir_clear_ret
20c1c     2D 00 64 FD | 	ret
20c20                 | 
20c20                 | _fatfs_cc_dir_sdi
20c20     06 4A 05 F6 | 	mov	COUNT_, #6
20c24     A8 00 A0 FD | 	call	#pushregs_
20c28     09 1F 02 F6 | 	mov	local01, arg01
20c2c     0A 21 02 F6 | 	mov	local02, arg02
20c30     0F 23 02 FB | 	rdlong	local03, local01
20c34     00 10 00 FF 
20c38     00 20 16 F2 | 	cmp	local02, ##2097152 wc
20c3c     1F 20 CE C7 |  if_b	test	local02, #31 wz
20c40                 | ' 		return FR_INT_ERR;
20c40     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
20c44     34 01 90 7D |  if_nc_or_nz	jmp	#LR__3456
20c48     10 1E 06 F1 | 	add	local01, #16
20c4c     0F 21 62 FC | 	wrlong	local02, local01
20c50     08 1E 86 F1 | 	sub	local01, #8
20c54     0F 25 0A FB | 	rdlong	local04, local01 wz
20c58     08 1E 86 F1 | 	sub	local01, #8
20c5c     11 27 C2 AA |  if_e	rdbyte	local05, local03
20c60     03 26 16 A2 |  if_e	cmp	local05, #3 wc
20c64     28 22 06 21 |  if_nc_and_z	add	local03, #40
20c68     11 25 02 2B |  if_nc_and_z	rdlong	local04, local03
20c6c     28 22 86 21 |  if_nc_and_z	sub	local03, #40
20c70     00 24 0E F2 | 	cmp	local04, #0 wz
20c74     3C 00 90 5D |  if_ne	jmp	#LR__3450
20c78     10 27 02 F6 | 	mov	local05, local02
20c7c     05 26 46 F0 | 	shr	local05, #5
20c80     08 22 06 F1 | 	add	local03, #8
20c84     11 15 E2 FA | 	rdword	arg02, local03
20c88     08 22 86 F1 | 	sub	local03, #8
20c8c     0A 27 12 F2 | 	cmp	local05, arg02 wc
20c90     02 FA 05 36 |  if_ae	mov	result1, #2
20c94     E4 00 90 3D |  if_ae	jmp	#LR__3456
20c98     28 22 06 F1 | 	add	local03, #40
20c9c     11 27 02 FB | 	rdlong	local05, local03
20ca0     28 22 86 F1 | 	sub	local03, #40
20ca4     18 1E 06 F1 | 	add	local01, #24
20ca8     0F 27 62 FC | 	wrlong	local05, local01
20cac     18 1E 86 F1 | 	sub	local01, #24
20cb0     7C 00 90 FD | 	jmp	#LR__3455
20cb4                 | LR__3450
20cb4     0A 22 06 F1 | 	add	local03, #10
20cb8     11 29 E2 FA | 	rdword	local06, local03
20cbc     0A 22 86 F1 | 	sub	local03, #10
20cc0     09 28 66 F0 | 	shl	local06, #9
20cc4                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
20cc4                 | ' 		while (ofs >= csz) {
20cc4                 | LR__3451
20cc4     14 21 12 F2 | 	cmp	local02, local06 wc
20cc8     4C 00 90 CD |  if_b	jmp	#LR__3454
20ccc     0F 13 02 F6 | 	mov	arg01, local01
20cd0     12 15 02 F6 | 	mov	arg02, local04
20cd4     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
20cd8     FD 24 02 F6 | 	mov	local04, result1
20cdc     FF FF 7F FF 
20ce0     FF 25 0E F2 | 	cmp	local04, ##-1 wz
20ce4     01 FA 05 A6 |  if_e	mov	result1, #1
20ce8     90 00 90 AD |  if_e	jmp	#LR__3456
20cec     02 24 16 F2 | 	cmp	local04, #2 wc
20cf0     14 00 90 CD |  if_b	jmp	#LR__3452
20cf4     18 22 06 F1 | 	add	local03, #24
20cf8     11 27 02 FB | 	rdlong	local05, local03
20cfc     18 22 86 F1 | 	sub	local03, #24
20d00     13 25 12 F2 | 	cmp	local04, local05 wc
20d04     08 00 90 CD |  if_b	jmp	#LR__3453
20d08                 | LR__3452
20d08     02 FA 05 F6 | 	mov	result1, #2
20d0c     6C 00 90 FD | 	jmp	#LR__3456
20d10                 | LR__3453
20d10     14 21 82 F1 | 	sub	local02, local06
20d14     AC FF 9F FD | 	jmp	#LR__3451
20d18                 | LR__3454
20d18     11 13 02 F6 | 	mov	arg01, local03
20d1c     12 15 02 F6 | 	mov	arg02, local04
20d20     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
20d24     18 1E 06 F1 | 	add	local01, #24
20d28     0F FB 61 FC | 	wrlong	result1, local01
20d2c     18 1E 86 F1 | 	sub	local01, #24
20d30                 | LR__3455
20d30     14 1E 06 F1 | 	add	local01, #20
20d34     0F 25 62 FC | 	wrlong	local04, local01
20d38     04 1E 06 F1 | 	add	local01, #4
20d3c     0F 27 0A FB | 	rdlong	local05, local01 wz
20d40     18 1E 86 F1 | 	sub	local01, #24
20d44     02 FA 05 A6 |  if_e	mov	result1, #2
20d48     30 00 90 AD |  if_e	jmp	#LR__3456
20d4c     10 29 02 F6 | 	mov	local06, local02
20d50     09 28 46 F0 | 	shr	local06, #9
20d54     18 1E 06 F1 | 	add	local01, #24
20d58     0F 27 02 FB | 	rdlong	local05, local01
20d5c     14 27 02 F1 | 	add	local05, local06
20d60     0F 27 62 FC | 	wrlong	local05, local01
20d64     34 22 06 F1 | 	add	local03, #52
20d68     FF 21 06 F5 | 	and	local02, #511
20d6c     10 23 02 F1 | 	add	local03, local02
20d70     04 1E 06 F1 | 	add	local01, #4
20d74     0F 23 62 FC | 	wrlong	local03, local01
20d78                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
20d78                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
20d78                 | ' 
20d78                 | ' 	return FR_OK;
20d78     00 FA 05 F6 | 	mov	result1, #0
20d7c                 | LR__3456
20d7c     A7 F0 03 F6 | 	mov	ptra, fp
20d80     B2 00 A0 FD | 	call	#popregs_
20d84                 | _fatfs_cc_dir_sdi_ret
20d84     2D 00 64 FD | 	ret
20d88                 | 
20d88                 | _fatfs_cc_dir_next
20d88     05 4A 05 F6 | 	mov	COUNT_, #5
20d8c     A8 00 A0 FD | 	call	#pushregs_
20d90     09 1F 02 F6 | 	mov	local01, arg01
20d94     0A 21 02 F6 | 	mov	local02, arg02
20d98     0F 23 02 FB | 	rdlong	local03, local01
20d9c     10 1E 06 F1 | 	add	local01, #16
20da0     0F 25 02 FB | 	rdlong	local04, local01
20da4     10 1E 86 F1 | 	sub	local01, #16
20da8     20 24 06 F1 | 	add	local04, #32
20dac     00 10 00 FF 
20db0     00 24 16 F2 | 	cmp	local04, ##2097152 wc
20db4     18 1E 06 31 |  if_ae	add	local01, #24
20db8     0F 01 68 3C |  if_ae	wrlong	#0, local01
20dbc     18 1E 86 31 |  if_ae	sub	local01, #24
20dc0     18 1E 06 F1 | 	add	local01, #24
20dc4     0F 15 0A FB | 	rdlong	arg02, local01 wz
20dc8     18 1E 86 F1 | 	sub	local01, #24
20dcc     04 FA 05 A6 |  if_e	mov	result1, #4
20dd0     64 01 90 AD |  if_e	jmp	#LR__3465
20dd4     FF 25 CE F7 | 	test	local04, #511 wz
20dd8     3C 01 90 5D |  if_ne	jmp	#LR__3464
20ddc     18 1E 06 F1 | 	add	local01, #24
20de0     0F 15 02 FB | 	rdlong	arg02, local01
20de4     01 14 06 F1 | 	add	arg02, #1
20de8     0F 15 62 FC | 	wrlong	arg02, local01
20dec     04 1E 86 F1 | 	sub	local01, #4
20df0     0F 15 0A FB | 	rdlong	arg02, local01 wz
20df4     14 1E 86 F1 | 	sub	local01, #20
20df8     2C 00 90 5D |  if_ne	jmp	#LR__3460
20dfc     12 15 02 F6 | 	mov	arg02, local04
20e00     05 14 46 F0 | 	shr	arg02, #5
20e04     08 22 06 F1 | 	add	local03, #8
20e08     11 21 E2 FA | 	rdword	local02, local03
20e0c     08 22 86 F1 | 	sub	local03, #8
20e10     10 15 12 F2 | 	cmp	arg02, local02 wc
20e14     18 1E 06 31 |  if_ae	add	local01, #24
20e18     0F 01 68 3C |  if_ae	wrlong	#0, local01
20e1c                 | ' 				dp->sect = 0; return FR_NO_FILE;
20e1c     04 FA 05 36 |  if_ae	mov	result1, #4
20e20     14 01 90 3D |  if_ae	jmp	#LR__3465
20e24     F0 00 90 FD | 	jmp	#LR__3463
20e28                 | LR__3460
20e28     12 13 02 F6 | 	mov	arg01, local04
20e2c     09 12 46 F0 | 	shr	arg01, #9
20e30     0A 22 06 F1 | 	add	local03, #10
20e34     11 15 E2 FA | 	rdword	arg02, local03
20e38     0A 22 86 F1 | 	sub	local03, #10
20e3c     01 14 86 F1 | 	sub	arg02, #1
20e40     0A 13 CA F7 | 	test	arg01, arg02 wz
20e44     D0 00 90 5D |  if_ne	jmp	#LR__3462
20e48     0F 13 02 F6 | 	mov	arg01, local01
20e4c     14 1E 06 F1 | 	add	local01, #20
20e50     0F 15 02 FB | 	rdlong	arg02, local01
20e54     14 1E 86 F1 | 	sub	local01, #20
20e58     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
20e5c     FD 26 02 F6 | 	mov	local05, result1
20e60     02 26 16 F2 | 	cmp	local05, #2 wc
20e64     02 FA 05 C6 |  if_b	mov	result1, #2
20e68     CC 00 90 CD |  if_b	jmp	#LR__3465
20e6c     FF FF 7F FF 
20e70     FF 27 0E F2 | 	cmp	local05, ##-1 wz
20e74     01 FA 05 A6 |  if_e	mov	result1, #1
20e78     BC 00 90 AD |  if_e	jmp	#LR__3465
20e7c     18 22 06 F1 | 	add	local03, #24
20e80     11 15 02 FB | 	rdlong	arg02, local03
20e84     18 22 86 F1 | 	sub	local03, #24
20e88     0A 27 12 F2 | 	cmp	local05, arg02 wc
20e8c     68 00 90 CD |  if_b	jmp	#LR__3461
20e90     00 20 0E F2 | 	cmp	local02, #0 wz
20e94     18 1E 06 A1 |  if_e	add	local01, #24
20e98     0F 01 68 AC |  if_e	wrlong	#0, local01
20e9c                 | ' 						dp->sect = 0; return FR_NO_FILE;
20e9c     04 FA 05 A6 |  if_e	mov	result1, #4
20ea0     94 00 90 AD |  if_e	jmp	#LR__3465
20ea4     0F 13 02 F6 | 	mov	arg01, local01
20ea8     14 1E 06 F1 | 	add	local01, #20
20eac     0F 15 02 FB | 	rdlong	arg02, local01
20eb0     14 1E 86 F1 | 	sub	local01, #20
20eb4     84 FA BF FD | 	call	#_fatfs_cc_create_chain
20eb8     FD 26 0A F6 | 	mov	local05, result1 wz
20ebc     07 FA 05 A6 |  if_e	mov	result1, #7
20ec0     74 00 90 AD |  if_e	jmp	#LR__3465
20ec4     01 26 0E F2 | 	cmp	local05, #1 wz
20ec8     02 FA 05 A6 |  if_e	mov	result1, #2
20ecc     68 00 90 AD |  if_e	jmp	#LR__3465
20ed0     FF FF 7F FF 
20ed4     FF 27 0E F2 | 	cmp	local05, ##-1 wz
20ed8     01 FA 05 A6 |  if_e	mov	result1, #1
20edc     58 00 90 AD |  if_e	jmp	#LR__3465
20ee0     13 15 02 F6 | 	mov	arg02, local05
20ee4     11 13 02 F6 | 	mov	arg01, local03
20ee8     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
20eec     00 FA 0D F2 | 	cmp	result1, #0 wz
20ef0     01 FA 05 56 |  if_ne	mov	result1, #1
20ef4     40 00 90 5D |  if_ne	jmp	#LR__3465
20ef8                 | LR__3461
20ef8     14 1E 06 F1 | 	add	local01, #20
20efc     0F 27 62 FC | 	wrlong	local05, local01
20f00     11 13 02 F6 | 	mov	arg01, local03
20f04     13 15 02 F6 | 	mov	arg02, local05
20f08     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
20f0c     04 1E 06 F1 | 	add	local01, #4
20f10     0F FB 61 FC | 	wrlong	result1, local01
20f14     18 1E 86 F1 | 	sub	local01, #24
20f18                 | LR__3462
20f18                 | LR__3463
20f18                 | LR__3464
20f18     10 1E 06 F1 | 	add	local01, #16
20f1c     0F 25 62 FC | 	wrlong	local04, local01
20f20     34 22 06 F1 | 	add	local03, #52
20f24     FF 25 06 F5 | 	and	local04, #511
20f28     12 23 02 F1 | 	add	local03, local04
20f2c     0C 1E 06 F1 | 	add	local01, #12
20f30     0F 23 62 FC | 	wrlong	local03, local01
20f34                 | ' #line 1771 "ff.c"
20f34                 | ' 				}
20f34                 | ' 				dp->clust = clst;
20f34                 | ' 				dp->sect = clst2sect(fs, clst);
20f34                 | ' 			}
20f34                 | ' 		}
20f34                 | ' 	}
20f34                 | ' 	dp->dptr = ofs;
20f34                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
20f34                 | ' 
20f34                 | ' 	return FR_OK;
20f34     00 FA 05 F6 | 	mov	result1, #0
20f38                 | LR__3465
20f38     A7 F0 03 F6 | 	mov	ptra, fp
20f3c     B2 00 A0 FD | 	call	#popregs_
20f40                 | _fatfs_cc_dir_next_ret
20f40     2D 00 64 FD | 	ret
20f44                 | 
20f44                 | _fatfs_cc_dir_alloc
20f44     08 4A 05 F6 | 	mov	COUNT_, #8
20f48     A8 00 A0 FD | 	call	#pushregs_
20f4c     09 1F 02 F6 | 	mov	local01, arg01
20f50     0A 21 02 F6 | 	mov	local02, arg02
20f54     0F 23 02 FB | 	rdlong	local03, local01
20f58     0F 13 02 F6 | 	mov	arg01, local01
20f5c     00 14 06 F6 | 	mov	arg02, #0
20f60     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
20f64     FD 24 0A F6 | 	mov	local04, result1 wz
20f68     70 00 90 5D |  if_ne	jmp	#LR__3474
20f6c     00 26 06 F6 | 	mov	local05, #0
20f70                 | ' 		n = 0;
20f70                 | ' 		do {
20f70                 | LR__3470
20f70     18 1E 06 F1 | 	add	local01, #24
20f74     0F 15 02 FB | 	rdlong	arg02, local01
20f78     18 1E 86 F1 | 	sub	local01, #24
20f7c     11 13 02 F6 | 	mov	arg01, local03
20f80     38 F3 BF FD | 	call	#_fatfs_cc_move_window
20f84     FD 24 0A F6 | 	mov	local04, result1 wz
20f88     50 00 90 5D |  if_ne	jmp	#LR__3473
20f8c     1C 1E 06 F1 | 	add	local01, #28
20f90     0F 29 02 FB | 	rdlong	local06, local01
20f94     1C 1E 86 F1 | 	sub	local01, #28
20f98     14 29 C2 FA | 	rdbyte	local06, local06
20f9c     E5 28 0E F2 | 	cmp	local06, #229 wz
20fa0     1C 1E 06 51 |  if_ne	add	local01, #28
20fa4     0F 2B 02 5B |  if_ne	rdlong	local07, local01
20fa8     1C 1E 86 51 |  if_ne	sub	local01, #28
20fac     15 2D CA 5A |  if_ne	rdbyte	local08, local07 wz
20fb0     10 00 90 5D |  if_ne	jmp	#LR__3471
20fb4     01 26 06 F1 | 	add	local05, #1
20fb8     10 27 0A F2 | 	cmp	local05, local02 wz
20fbc     1C 00 90 AD |  if_e	jmp	#LR__3473
20fc0     04 00 90 FD | 	jmp	#LR__3472
20fc4                 | LR__3471
20fc4     00 26 06 F6 | 	mov	local05, #0
20fc8                 | LR__3472
20fc8     0F 13 02 F6 | 	mov	arg01, local01
20fcc     01 14 06 F6 | 	mov	arg02, #1
20fd0     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
20fd4     FD 24 0A F6 | 	mov	local04, result1 wz
20fd8     94 FF 9F AD |  if_e	jmp	#LR__3470
20fdc                 | LR__3473
20fdc                 | LR__3474
20fdc     04 24 0E F2 | 	cmp	local04, #4 wz
20fe0     07 24 06 A6 |  if_e	mov	local04, #7
20fe4                 | ' 	return res;
20fe4     12 FB 01 F6 | 	mov	result1, local04
20fe8     A7 F0 03 F6 | 	mov	ptra, fp
20fec     B2 00 A0 FD | 	call	#popregs_
20ff0                 | _fatfs_cc_dir_alloc_ret
20ff0     2D 00 64 FD | 	ret
20ff4                 | 
20ff4                 | _fatfs_cc_ld_clust
20ff4     09 01 02 F6 | 	mov	_var01, arg01
20ff8     0A 13 02 F6 | 	mov	arg01, arg02
20ffc     1A 12 06 F1 | 	add	arg01, #26
21000                 | ' {
21000                 | ' 
21000                 | ' 	return *((WORD*)ptr);
21000     09 FB E1 FA | 	rdword	result1, arg01
21004     FD 12 32 F9 | 	getword	arg01, result1, #0
21008     00 01 C2 FA | 	rdbyte	_var01, _var01
2100c     03 00 0E F2 | 	cmp	_var01, #3 wz
21010     14 14 06 A1 |  if_e	add	arg02, #20
21014                 | ' {
21014                 | ' 
21014                 | ' 	return *((WORD*)ptr);
21014     0A FB E1 AA |  if_e	rdword	result1, arg02
21018     10 FA 65 A0 |  if_e	shl	result1, #16
2101c     FD 12 42 A5 |  if_e	or	arg01, result1
21020                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
21020                 | ' 	}
21020                 | ' 
21020                 | ' 	return cl;
21020     09 FB 01 F6 | 	mov	result1, arg01
21024                 | _fatfs_cc_ld_clust_ret
21024     2D 00 64 FD | 	ret
21028                 | 
21028                 | _fatfs_cc_st_clust
21028     09 01 02 F6 | 	mov	_var01, arg01
2102c     0A 13 02 F6 | 	mov	arg01, arg02
21030     1A 12 06 F1 | 	add	arg01, #26
21034     09 17 52 FC | 	wrword	arg03, arg01
21038     00 01 C2 FA | 	rdbyte	_var01, _var01
2103c     03 00 0E F2 | 	cmp	_var01, #3 wz
21040     14 14 06 A1 |  if_e	add	arg02, #20
21044     10 16 46 A0 |  if_e	shr	arg03, #16
21048     0A 17 52 AC |  if_e	wrword	arg03, arg02
2104c                 | _fatfs_cc_st_clust_ret
2104c     2D 00 64 FD | 	ret
21050                 | 
21050                 | _fatfs_cc_cmp_lfn
21050     07 4A 05 F6 | 	mov	COUNT_, #7
21054     A8 00 A0 FD | 	call	#pushregs_
21058     09 1F 02 F6 | 	mov	local01, arg01
2105c     0A 13 02 F6 | 	mov	arg01, arg02
21060     1A 12 06 F1 | 	add	arg01, #26
21064                 | ' {
21064                 | ' 
21064                 | ' 	return *((WORD*)ptr);
21064     09 FB E9 FA | 	rdword	result1, arg01 wz
21068     00 FA 05 56 |  if_ne	mov	result1, #0
2106c     E0 00 90 5D |  if_ne	jmp	#LR__3486
21070     0A 21 C2 FA | 	rdbyte	local02, arg02
21074     3F 20 06 F5 | 	and	local02, #63
21078     01 20 86 F1 | 	sub	local02, #1
2107c     0D 20 06 FD | 	qmul	local02, #13
21080                 | ' 
21080                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
21080                 | ' 
21080                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
21080     01 22 06 F6 | 	mov	local03, #1
21084     00 24 06 F6 | 	mov	local04, #0
21088     18 26 62 FD | 	getqx	local05
2108c                 | LR__3480
2108c     0D 24 16 F2 | 	cmp	local04, #13 wc
21090     9C 00 90 3D |  if_ae	jmp	#LR__3485
21094     0A 13 02 F6 | 	mov	arg01, arg02
21098     12 21 02 F6 | 	mov	local02, local04
2109c     01 00 00 FF 
210a0     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
210a4     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
210a8     10 21 C2 FA | 	rdbyte	local02, local02
210ac     01 20 06 FA | 	mul	local02, #1
210b0     10 13 02 F1 | 	add	arg01, local02
210b4     01 00 00 FF 
210b8     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
210bc                 | ' {
210bc                 | ' 
210bc                 | ' 	return *((WORD*)ptr);
210bc     09 FB E1 FA | 	rdword	result1, arg01
210c0     FD 28 02 F6 | 	mov	local06, result1
210c4     11 21 02 F6 | 	mov	local02, local03
210c8     0F 20 4E F7 | 	zerox	local02, #15 wz
210cc     44 00 90 AD |  if_e	jmp	#LR__3483
210d0     00 27 16 F2 | 	cmp	local05, #256 wc
210d4     2C 00 90 3D |  if_ae	jmp	#LR__3481
210d8     14 13 32 F9 | 	getword	arg01, local06, #0
210dc     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
210e0     FD 20 02 F6 | 	mov	local02, result1
210e4     13 23 02 F6 | 	mov	local03, local05
210e8     01 22 66 F0 | 	shl	local03, #1
210ec     0F 23 02 F1 | 	add	local03, local01
210f0     11 13 E2 FA | 	rdword	arg01, local03
210f4     01 26 06 F1 | 	add	local05, #1
210f8     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
210fc     FD 20 0A F2 | 	cmp	local02, result1 wz
21100     08 00 90 AD |  if_e	jmp	#LR__3482
21104                 | LR__3481
21104                 | ' 				return 0;
21104     00 FA 05 F6 | 	mov	result1, #0
21108     44 00 90 FD | 	jmp	#LR__3486
2110c                 | LR__3482
2110c     14 23 02 F6 | 	mov	local03, local06
21110     14 00 90 FD | 	jmp	#LR__3484
21114                 | LR__3483
21114     14 29 32 F9 | 	getword	local06, local06, #0
21118     7F 00 00 FF 
2111c     FF 29 0E F2 | 	cmp	local06, ##65535 wz
21120     00 FA 05 56 |  if_ne	mov	result1, #0
21124     28 00 90 5D |  if_ne	jmp	#LR__3486
21128                 | LR__3484
21128     01 24 06 F1 | 	add	local04, #1
2112c     5C FF 9F FD | 	jmp	#LR__3480
21130                 | LR__3485
21130     0A 21 C2 FA | 	rdbyte	local02, arg02
21134     40 20 CE F7 | 	test	local02, #64 wz
21138     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
2113c     01 26 66 50 |  if_ne	shl	local05, #1
21140     0F 27 02 51 |  if_ne	add	local05, local01
21144     13 2B EA 5A |  if_ne	rdword	local07, local05 wz
21148     00 FA 05 56 |  if_ne	mov	result1, #0
2114c                 | ' 
2114c                 | ' 	return 1;
2114c     01 FA 05 A6 |  if_e	mov	result1, #1
21150                 | LR__3486
21150     A7 F0 03 F6 | 	mov	ptra, fp
21154     B2 00 A0 FD | 	call	#popregs_
21158                 | _fatfs_cc_cmp_lfn_ret
21158     2D 00 64 FD | 	ret
2115c                 | 
2115c                 | _fatfs_cc_pick_lfn
2115c     09 01 02 F6 | 	mov	_var01, arg01
21160     0A 13 02 F6 | 	mov	arg01, arg02
21164     1A 12 06 F1 | 	add	arg01, #26
21168                 | ' {
21168                 | ' 
21168                 | ' 	return *((WORD*)ptr);
21168     09 FB E9 FA | 	rdword	result1, arg01 wz
2116c     00 FA 05 56 |  if_ne	mov	result1, #0
21170     D4 00 90 5D |  if_ne	jmp	#LR__3495
21174     0A 03 C2 FA | 	rdbyte	_var02, arg02
21178     40 02 26 F5 | 	andn	_var02, #64
2117c     01 02 86 F1 | 	sub	_var02, #1
21180     0D 02 06 FD | 	qmul	_var02, #13
21184                 | ' 
21184                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
21184                 | ' 
21184                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
21184     01 04 06 F6 | 	mov	_var03, #1
21188     00 06 06 F6 | 	mov	_var04, #0
2118c     18 08 62 FD | 	getqx	_var05
21190                 | LR__3490
21190     0D 06 16 F2 | 	cmp	_var04, #13 wc
21194     80 00 90 3D |  if_ae	jmp	#LR__3493
21198     0A 13 02 F6 | 	mov	arg01, arg02
2119c     03 03 02 F6 | 	mov	_var02, _var04
211a0     01 00 00 FF 
211a4     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
211a8     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
211ac     01 03 C2 FA | 	rdbyte	_var02, _var02
211b0     01 02 06 FA | 	mul	_var02, #1
211b4     01 13 02 F1 | 	add	arg01, _var02
211b8     01 00 00 FF 
211bc     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
211c0                 | ' {
211c0                 | ' 
211c0                 | ' 	return *((WORD*)ptr);
211c0     09 FB E1 FA | 	rdword	result1, arg01
211c4     FD 0A 02 F6 | 	mov	_var06, result1
211c8     02 03 02 F6 | 	mov	_var02, _var03
211cc     0F 02 4E F7 | 	zerox	_var02, #15 wz
211d0     28 00 90 AD |  if_e	jmp	#LR__3491
211d4     00 09 16 F2 | 	cmp	_var05, #256 wc
211d8     00 FA 05 36 |  if_ae	mov	result1, #0
211dc     68 00 90 3D |  if_ae	jmp	#LR__3495
211e0     04 03 02 F6 | 	mov	_var02, _var05
211e4     01 02 66 F0 | 	shl	_var02, #1
211e8     00 03 02 F1 | 	add	_var02, _var01
211ec     05 05 02 F6 | 	mov	_var03, _var06
211f0     01 05 52 FC | 	wrword	_var03, _var02
211f4     01 08 06 F1 | 	add	_var05, #1
211f8     14 00 90 FD | 	jmp	#LR__3492
211fc                 | LR__3491
211fc     05 0B 32 F9 | 	getword	_var06, _var06, #0
21200     7F 00 00 FF 
21204     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
21208     00 FA 05 56 |  if_ne	mov	result1, #0
2120c     38 00 90 5D |  if_ne	jmp	#LR__3495
21210                 | LR__3492
21210     01 06 06 F1 | 	add	_var04, #1
21214     78 FF 9F FD | 	jmp	#LR__3490
21218                 | LR__3493
21218     0A 03 C2 FA | 	rdbyte	_var02, arg02
2121c     40 02 CE F7 | 	test	_var02, #64 wz
21220     02 0D 02 56 |  if_ne	mov	_var07, _var03
21224     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
21228     18 00 90 AD |  if_e	jmp	#LR__3494
2122c     00 09 16 F2 | 	cmp	_var05, #256 wc
21230     00 FA 05 36 |  if_ae	mov	result1, #0
21234     10 00 90 3D |  if_ae	jmp	#LR__3495
21238     01 08 66 F0 | 	shl	_var05, #1
2123c     00 09 02 F1 | 	add	_var05, _var01
21240     04 01 58 FC | 	wrword	#0, _var05
21244                 | LR__3494
21244                 | ' 		lfnbuf[i] = 0;
21244                 | ' 	}
21244                 | ' 
21244                 | ' 	return 1;
21244     01 FA 05 F6 | 	mov	result1, #1
21248                 | LR__3495
21248                 | _fatfs_cc_pick_lfn_ret
21248     2D 00 64 FD | 	ret
2124c                 | 
2124c                 | _fatfs_cc_put_lfn
2124c     0D 14 06 F1 | 	add	arg02, #13
21250     0A 19 42 FC | 	wrbyte	arg04, arg02
21254     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
21258     01 18 86 F1 | 	sub	arg04, #1
2125c     0D 18 06 FD | 	qmul	arg04, #13
21260     09 01 02 F6 | 	mov	_var01, arg01
21264     02 14 86 F1 | 	sub	arg02, #2
21268     0A 1F 48 FC | 	wrbyte	#15, arg02
2126c     01 14 06 F1 | 	add	arg02, #1
21270     0A 01 48 FC | 	wrbyte	#0, arg02
21274     0C 14 86 F1 | 	sub	arg02, #12
21278     0A 13 02 F6 | 	mov	arg01, arg02
2127c     1A 12 06 F1 | 	add	arg01, #26
21280     09 01 58 FC | 	wrword	#0, arg01
21284     00 02 06 F6 | 	mov	_var02, #0
21288     00 04 06 F6 | 	mov	_var03, #0
2128c                 | ' 	BYTE* dir,
2128c                 | ' 	BYTE ord,
2128c                 | ' 	BYTE sum
2128c                 | ' )
2128c                 | ' {
2128c                 | ' 	UINT i, s;
2128c                 | ' 	WCHAR wc;
2128c                 | ' 
2128c                 | ' 
2128c                 | ' 	dir[ 13 ] = sum;
2128c                 | ' 	dir[ 11 ] =  0x0F ;
2128c                 | ' 	dir[ 12 ] = 0;
2128c                 | ' 	st_word(dir +  26 , 0);
2128c                 | ' 
2128c                 | ' 	i = (ord - 1) * 13;
2128c                 | ' 	s = wc = 0;
2128c                 | ' 	do {
2128c     01 00 00 FF 
21290     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
21294     18 06 62 FD | 	getqx	_var04
21298     97 2A 48 FB | 	callpa	#(@LR__3501-@LR__3500)>>2,fcache_load_ptr_
2129c                 | LR__3500
2129c     01 19 32 F9 | 	getword	arg04, _var02, #0
212a0     7F 00 00 FF 
212a4     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
212a8     03 13 02 56 |  if_ne	mov	arg01, _var04
212ac     01 06 06 51 |  if_ne	add	_var04, #1
212b0     01 12 66 50 |  if_ne	shl	arg01, #1
212b4     00 13 02 51 |  if_ne	add	arg01, _var01
212b8     09 03 E2 5A |  if_ne	rdword	_var02, arg01
212bc     0A 13 02 F6 | 	mov	arg01, arg02
212c0     02 19 02 F6 | 	mov	arg04, _var03
212c4     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
212c8     0C 19 C2 FA | 	rdbyte	arg04, arg04
212cc     01 18 06 FA | 	mul	arg04, #1
212d0     0C 13 02 F1 | 	add	arg01, arg04
212d4     09 03 52 FC | 	wrword	_var02, arg01
212d8     01 19 02 F6 | 	mov	arg04, _var02
212dc     0F 18 4E F7 | 	zerox	arg04, #15 wz
212e0     0F 02 CE A9 |  if_e	bmask	_var02, #15
212e4     01 04 06 F1 | 	add	_var03, #1
212e8     0D 04 16 F2 | 	cmp	_var03, #13 wc
212ec     AC FF 9F CD |  if_b	jmp	#LR__3500
212f0                 | LR__3501
212f0     01 00 00 FF 
212f4     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
212f8     01 03 32 F9 | 	getword	_var02, _var02, #0
212fc     7F 00 00 FF 
21300     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
21304     01 06 66 50 |  if_ne	shl	_var04, #1
21308     00 07 02 51 |  if_ne	add	_var04, _var01
2130c     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
21310     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
21314     40 16 46 A5 |  if_e	or	arg03, #64
21318     0A 17 42 FC | 	wrbyte	arg03, arg02
2131c                 | _fatfs_cc_put_lfn_ret
2131c     2D 00 64 FD | 	ret
21320                 | 
21320                 | _fatfs_cc_gen_numname
21320     08 4A 05 F6 | 	mov	COUNT_, #8
21324     A8 00 A0 FD | 	call	#pushregs_
21328     2C F0 07 F1 | 	add	ptra, #44
2132c     09 1F 02 F6 | 	mov	local01, arg01
21330     0A 21 02 F6 | 	mov	local02, arg02
21334     0B 23 02 F6 | 	mov	local03, arg03
21338     0C 25 02 F6 | 	mov	local04, arg04
2133c     0F 13 02 F6 | 	mov	arg01, local01
21340     10 15 02 F6 | 	mov	arg02, local02
21344     0B 16 06 F6 | 	mov	arg03, #11
21348     88 78 BF FD | 	call	#__system____builtin_memmove
2134c     06 24 16 F2 | 	cmp	local04, #6 wc
21350     48 00 90 CD |  if_b	jmp	#LR__3515
21354     12 27 02 F6 | 	mov	local05, local04
21358     97 1E 48 FB | 	callpa	#(@LR__3513-@LR__3510)>>2,fcache_load_ptr_
2135c                 | ' 		sreg = seq;
2135c                 | ' 		while (*lfn) {
2135c                 | LR__3510
2135c     11 29 EA FA | 	rdword	local06, local03 wz
21360     34 00 90 AD |  if_e	jmp	#LR__3514
21364     11 2B E2 FA | 	rdword	local07, local03
21368                 | ' 			wc = *lfn++;
21368                 | ' 			for (i = 0; i < 16; i++) {
21368     02 22 06 F1 | 	add	local03, #2
2136c     10 12 DC FC | 	rep	@LR__3512, #16
21370                 | LR__3511
21370     01 26 66 F0 | 	shl	local05, #1
21374     15 29 32 F9 | 	getword	local06, local07, #0
21378     01 28 06 F5 | 	and	local06, #1
2137c     14 27 02 F1 | 	add	local05, local06
21380     15 2B 32 F9 | 	getword	local07, local07, #0
21384     01 2A 46 F0 | 	shr	local07, #1
21388     10 26 2E F4 | 	testbn	local05, #16 wz
2138c     88 00 00 5F 
21390     21 26 66 55 |  if_ne	xor	local05, ##69665
21394                 | LR__3512
21394     C4 FF 9F FD | 	jmp	#LR__3510
21398                 | LR__3513
21398                 | LR__3514
21398     13 25 02 F6 | 	mov	local04, local05
2139c                 | LR__3515
2139c     07 2A 06 F6 | 	mov	local07, #7
213a0                 | ' 			}
213a0                 | ' 		}
213a0                 | ' 		seq = (UINT)sreg;
213a0                 | ' 	}
213a0                 | ' 
213a0                 | ' 
213a0                 | ' 	i = 7;
213a0                 | ' 	do {
213a0     10 4E 05 F1 | 	add	fp, #16
213a4     97 1A 48 FB | 	callpa	#(@LR__3517-@LR__3516)>>2,fcache_load_ptr_
213a8                 | LR__3516
213a8     12 27 42 F8 | 	getnib	local05, local04, #0
213ac     30 26 06 F1 | 	add	local05, #48
213b0     04 24 46 F0 | 	shr	local04, #4
213b4     13 29 E2 F8 | 	getbyte	local06, local05, #0
213b8     3A 28 16 F2 | 	cmp	local06, #58 wc
213bc     13 27 E2 38 |  if_ae	getbyte	local05, local05, #0
213c0     07 26 06 31 |  if_ae	add	local05, #7
213c4     15 29 02 F6 | 	mov	local06, local07
213c8     01 2A 8E F1 | 	sub	local07, #1 wz
213cc     A7 28 02 F1 | 	add	local06, fp
213d0     14 27 42 FC | 	wrbyte	local05, local06
213d4     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
213d8     CC FF 9F 5D |  if_ne	jmp	#LR__3516
213dc                 | LR__3517
213dc     15 29 02 F6 | 	mov	local06, local07
213e0     A7 28 02 F1 | 	add	local06, fp
213e4     14 FD 48 FC | 	wrbyte	#126, local06
213e8                 | ' 	ns[i] = '~';
213e8                 | ' 
213e8                 | ' 
213e8                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
213e8     00 26 06 F6 | 	mov	local05, #0
213ec     10 4E 85 F1 | 	sub	fp, #16
213f0     97 2A 48 FB | 	callpa	#(@LR__3520-@LR__3518)>>2,fcache_load_ptr_
213f4                 | LR__3518
213f4     15 27 12 F2 | 	cmp	local05, local07 wc
213f8     4C 00 90 3D |  if_ae	jmp	#LR__3521
213fc     13 29 02 F6 | 	mov	local06, local05
21400     0F 29 02 F1 | 	add	local06, local01
21404     14 29 C2 FA | 	rdbyte	local06, local06
21408     20 28 0E F2 | 	cmp	local06, #32 wz
2140c     38 00 90 AD |  if_e	jmp	#LR__3521
21410     13 13 02 F6 | 	mov	arg01, local05
21414     0F 13 02 F1 | 	add	arg01, local01
21418     09 13 CA FA | 	rdbyte	arg01, arg01 wz
2141c     00 FA 05 56 |  if_ne	mov	result1, #0
21420                 | ' 
21420                 | ' 	return 0;
21420     00 FA 05 A6 |  if_e	mov	result1, #0
21424     00 FA 0D F2 | 	cmp	result1, #0 wz
21428     14 00 90 AD |  if_e	jmp	#LR__3519
2142c     15 29 02 F6 | 	mov	local06, local07
21430     01 28 86 F1 | 	sub	local06, #1
21434     14 27 0A F2 | 	cmp	local05, local06 wz
21438     0C 00 90 AD |  if_e	jmp	#LR__3521
2143c     01 26 06 F1 | 	add	local05, #1
21440                 | LR__3519
21440     01 26 06 F1 | 	add	local05, #1
21444     AC FF 9F FD | 	jmp	#LR__3518
21448                 | LR__3520
21448                 | LR__3521
21448     97 20 48 FB | 	callpa	#(@LR__3525-@LR__3522)>>2,fcache_load_ptr_
2144c                 | ' 			j++;
2144c                 | ' 		}
2144c                 | ' 	}
2144c                 | ' 	do {
2144c                 | LR__3522
2144c     13 29 02 F6 | 	mov	local06, local05
21450     0F 29 02 F1 | 	add	local06, local01
21454     08 2A 16 F2 | 	cmp	local07, #8 wc
21458     01 26 06 F1 | 	add	local05, #1
2145c     1C 00 90 3D |  if_ae	jmp	#LR__3523
21460     15 25 02 F6 | 	mov	local04, local07
21464     10 4E 05 F1 | 	add	fp, #16
21468     A7 24 02 F1 | 	add	local04, fp
2146c     12 2D C2 FA | 	rdbyte	local08, local04
21470     01 2A 06 F1 | 	add	local07, #1
21474     10 4E 85 F1 | 	sub	fp, #16
21478     04 00 90 FD | 	jmp	#LR__3524
2147c                 | LR__3523
2147c     20 2C 06 F6 | 	mov	local08, #32
21480                 | LR__3524
21480     14 2D 42 FC | 	wrbyte	local08, local06
21484     08 26 16 F2 | 	cmp	local05, #8 wc
21488     C0 FF 9F CD |  if_b	jmp	#LR__3522
2148c                 | LR__3525
2148c     A7 F0 03 F6 | 	mov	ptra, fp
21490     B2 00 A0 FD | 	call	#popregs_
21494                 | _fatfs_cc_gen_numname_ret
21494     2D 00 64 FD | 	ret
21498                 | 
21498                 | _fatfs_cc_sum_sfn
21498     00 00 06 F6 | 	mov	_var01, #0
2149c                 | ' )
2149c                 | ' {
2149c                 | ' 	BYTE sum = 0;
2149c                 | ' 	UINT n = 11;
2149c                 | ' 
2149c                 | ' 	do {
2149c     97 12 48 FB | 	callpa	#(@LR__3532-@LR__3530)>>2,fcache_load_ptr_
214a0                 | LR__3530
214a0     0B 10 DC FC | 	rep	@LR__3533, #11
214a4                 | LR__3531
214a4     00 FB E1 F8 | 	getbyte	result1, _var01, #0
214a8     01 FA 45 F0 | 	shr	result1, #1
214ac     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
214b0     07 00 66 F0 | 	shl	_var01, #7
214b4     00 FB 01 F1 | 	add	result1, _var01
214b8     09 01 C2 FA | 	rdbyte	_var01, arg01
214bc     FD 00 02 F1 | 	add	_var01, result1
214c0     01 12 06 F1 | 	add	arg01, #1
214c4                 | LR__3532
214c4                 | LR__3533
214c4                 | ' 	return sum;
214c4     00 FB 01 F6 | 	mov	result1, _var01
214c8                 | _fatfs_cc_sum_sfn_ret
214c8     2D 00 64 FD | 	ret
214cc                 | 
214cc                 | _fatfs_cc_dir_read
214cc     0C 4A 05 F6 | 	mov	COUNT_, #12
214d0     A8 00 A0 FD | 	call	#pushregs_
214d4     09 1F 02 F6 | 	mov	local01, arg01
214d8     0A 21 02 F6 | 	mov	local02, arg02
214dc     04 22 06 F6 | 	mov	local03, #4
214e0     0F 25 02 FB | 	rdlong	local04, local01
214e4     FF 26 06 F6 | 	mov	local05, #255
214e8     FF 28 06 F6 | 	mov	local06, #255
214ec                 | ' )
214ec                 | ' {
214ec                 | ' 	FRESULT res = FR_NO_FILE;
214ec                 | ' 	FATFS *fs = dp->obj.fs;
214ec                 | ' 	BYTE attr, b;
214ec                 | ' 
214ec                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
214ec                 | ' 
214ec                 | ' 
214ec                 | ' 	while (dp->sect) {
214ec                 | LR__3540
214ec     18 1E 06 F1 | 	add	local01, #24
214f0     0F FB 09 FB | 	rdlong	result1, local01 wz
214f4     18 1E 86 F1 | 	sub	local01, #24
214f8     AC 01 90 AD |  if_e	jmp	#LR__3550
214fc     18 1E 06 F1 | 	add	local01, #24
21500     0F 15 02 FB | 	rdlong	arg02, local01
21504     18 1E 86 F1 | 	sub	local01, #24
21508     12 13 02 F6 | 	mov	arg01, local04
2150c     AC ED BF FD | 	call	#_fatfs_cc_move_window
21510     FD 22 0A F6 | 	mov	local03, result1 wz
21514     90 01 90 5D |  if_ne	jmp	#LR__3550
21518     1C 1E 06 F1 | 	add	local01, #28
2151c     0F FB 01 FB | 	rdlong	result1, local01
21520     1C 1E 86 F1 | 	sub	local01, #28
21524     FD 2A C2 FA | 	rdbyte	local07, result1
21528     15 FB 01 F6 | 	mov	result1, local07
2152c     07 FA 4D F7 | 	zerox	result1, #7 wz
21530     04 22 06 A6 |  if_e	mov	local03, #4
21534                 | ' 			res = FR_NO_FILE; break;
21534     70 01 90 AD |  if_e	jmp	#LR__3550
21538     1C 1E 06 F1 | 	add	local01, #28
2153c     0F 2D 02 FB | 	rdlong	local08, local01
21540     0B 2C 06 F1 | 	add	local08, #11
21544     16 2F C2 FA | 	rdbyte	local09, local08
21548     3F 2E 06 F5 | 	and	local09, #63
2154c     16 1E 86 F1 | 	sub	local01, #22
21550     0F 2F 42 FC | 	wrbyte	local09, local01
21554     06 1E 86 F1 | 	sub	local01, #6
21558     15 FB E1 F8 | 	getbyte	result1, local07, #0
2155c     E5 FA 0D F2 | 	cmp	result1, #229 wz
21560     15 2D 02 56 |  if_ne	mov	local08, local07
21564     16 2D E2 58 |  if_ne	getbyte	local08, local08, #0
21568     2E 2C 0E 52 |  if_ne	cmp	local08, #46 wz
2156c     1C 00 90 AD |  if_e	jmp	#LR__3541
21570     00 30 06 F6 | 	mov	local10, #0
21574     17 2D E2 F8 | 	getbyte	local08, local09, #0
21578     20 2C 26 F5 | 	andn	local08, #32
2157c     08 2C 0E F2 | 	cmp	local08, #8 wz
21580     01 30 06 A6 |  if_e	mov	local10, #1
21584     10 31 0A F2 | 	cmp	local10, local02 wz
21588     08 00 90 AD |  if_e	jmp	#LR__3542
2158c                 | LR__3541
2158c     FF 26 06 F6 | 	mov	local05, #255
21590     00 01 90 FD | 	jmp	#LR__3549
21594                 | LR__3542
21594     17 2F E2 F8 | 	getbyte	local09, local09, #0
21598     0F 2E 0E F2 | 	cmp	local09, #15 wz
2159c     B4 00 90 5D |  if_ne	jmp	#LR__3546
215a0     15 33 E2 F8 | 	getbyte	local11, local07, #0
215a4     40 32 CE F7 | 	test	local11, #64 wz
215a8     30 00 90 AD |  if_e	jmp	#LR__3543
215ac     1C 1E 06 F1 | 	add	local01, #28
215b0     0F 33 02 FB | 	rdlong	local11, local01
215b4     0D 32 06 F1 | 	add	local11, #13
215b8     19 29 C2 FA | 	rdbyte	local06, local11
215bc     15 2B E2 F8 | 	getbyte	local07, local07, #0
215c0     BF 2A 06 F5 | 	and	local07, #191
215c4     15 27 02 F6 | 	mov	local05, local07
215c8     0C 1E 86 F1 | 	sub	local01, #12
215cc     0F 33 02 FB | 	rdlong	local11, local01
215d0     1C 1E 06 F1 | 	add	local01, #28
215d4     0F 33 62 FC | 	wrlong	local11, local01
215d8     2C 1E 86 F1 | 	sub	local01, #44
215dc                 | LR__3543
215dc     15 2D E2 F8 | 	getbyte	local08, local07, #0
215e0     13 31 E2 F8 | 	getbyte	local10, local05, #0
215e4     18 2D 0A F2 | 	cmp	local08, local10 wz
215e8     5C 00 90 5D |  if_ne	jmp	#LR__3544
215ec     14 31 E2 F8 | 	getbyte	local10, local06, #0
215f0     1C 1E 06 F1 | 	add	local01, #28
215f4     0F 2F 02 FB | 	rdlong	local09, local01
215f8     1C 1E 86 F1 | 	sub	local01, #28
215fc     0D 2E 06 F1 | 	add	local09, #13
21600     17 2D C2 FA | 	rdbyte	local08, local09
21604     16 2F E2 F8 | 	getbyte	local09, local08, #0
21608     17 31 0A F2 | 	cmp	local10, local09 wz
2160c     38 00 90 5D |  if_ne	jmp	#LR__3544
21610     0C 24 06 F1 | 	add	local04, #12
21614     12 13 02 FB | 	rdlong	arg01, local04
21618     0C 24 86 F1 | 	sub	local04, #12
2161c     1C 1E 06 F1 | 	add	local01, #28
21620     0F 35 02 FB | 	rdlong	local12, local01
21624     1C 1E 86 F1 | 	sub	local01, #28
21628     1A 15 02 F6 | 	mov	arg02, local12
2162c     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
21630     00 FA 4D F2 | 	cmps	result1, #0 wz
21634     13 35 02 56 |  if_ne	mov	local12, local05
21638     1A 35 E2 58 |  if_ne	getbyte	local12, local12, #0
2163c     01 34 86 51 |  if_ne	sub	local12, #1
21640     1A 33 02 56 |  if_ne	mov	local11, local12
21644     04 00 90 5D |  if_ne	jmp	#LR__3545
21648                 | LR__3544
21648     FF 32 06 F6 | 	mov	local11, #255
2164c                 | LR__3545
2164c     19 27 02 F6 | 	mov	local05, local11
21650     40 00 90 FD | 	jmp	#LR__3548
21654                 | LR__3546
21654     13 33 02 F6 | 	mov	local11, local05
21658     07 32 4E F7 | 	zerox	local11, #7 wz
2165c     20 00 90 5D |  if_ne	jmp	#LR__3547
21660     14 29 E2 F8 | 	getbyte	local06, local06, #0
21664     1C 1E 06 F1 | 	add	local01, #28
21668     0F 13 02 FB | 	rdlong	arg01, local01
2166c     1C 1E 86 F1 | 	sub	local01, #28
21670     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
21674     FD FA E1 F8 | 	getbyte	result1, result1, #0
21678     FD 28 0A F2 | 	cmp	local06, result1 wz
2167c     28 00 90 AD |  if_e	jmp	#LR__3550
21680                 | LR__3547
21680     2C 1E 06 F1 | 	add	local01, #44
21684     FF FF FF FF 
21688     0F FF 6B FC | 	wrlong	##-1, local01
2168c     2C 1E 86 F1 | 	sub	local01, #44
21690                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
21690                 | ' 					}
21690                 | ' 					break;
21690     14 00 90 FD | 	jmp	#LR__3550
21694                 | LR__3548
21694                 | LR__3549
21694     0F 13 02 F6 | 	mov	arg01, local01
21698     00 14 06 F6 | 	mov	arg02, #0
2169c     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
216a0     FD 22 0A F6 | 	mov	local03, result1 wz
216a4     44 FE 9F AD |  if_e	jmp	#LR__3540
216a8                 | LR__3550
216a8     00 22 0E F2 | 	cmp	local03, #0 wz
216ac     18 1E 06 51 |  if_ne	add	local01, #24
216b0     0F 01 68 5C |  if_ne	wrlong	#0, local01
216b4                 | ' 	return res;
216b4     11 FB 01 F6 | 	mov	result1, local03
216b8     A7 F0 03 F6 | 	mov	ptra, fp
216bc     B2 00 A0 FD | 	call	#popregs_
216c0                 | _fatfs_cc_dir_read_ret
216c0     2D 00 64 FD | 	ret
216c4                 | 
216c4                 | _fatfs_cc_dir_find
216c4     0B 4A 05 F6 | 	mov	COUNT_, #11
216c8     A8 00 A0 FD | 	call	#pushregs_
216cc     09 1F 02 F6 | 	mov	local01, arg01
216d0     0F 21 02 FB | 	rdlong	local02, local01
216d4     0F 13 02 F6 | 	mov	arg01, local01
216d8     00 14 06 F6 | 	mov	arg02, #0
216dc     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
216e0     00 FA 0D F2 | 	cmp	result1, #0 wz
216e4     18 02 90 5D |  if_ne	jmp	#LR__3572
216e8     FF 22 06 F6 | 	mov	local03, #255
216ec     FF 24 06 F6 | 	mov	local04, #255
216f0     2C 1E 06 F1 | 	add	local01, #44
216f4     FF FF FF FF 
216f8     0F FF 6B FC | 	wrlong	##-1, local01
216fc     2C 1E 86 F1 | 	sub	local01, #44
21700                 | ' #line 2404 "ff.c"
21700                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
21700                 | ' 
21700                 | ' 	do {
21700                 | LR__3560
21700     18 1E 06 F1 | 	add	local01, #24
21704     0F 15 02 FB | 	rdlong	arg02, local01
21708     18 1E 86 F1 | 	sub	local01, #24
2170c     10 13 02 F6 | 	mov	arg01, local02
21710     A8 EB BF FD | 	call	#_fatfs_cc_move_window
21714     FD 26 0A F6 | 	mov	local05, result1 wz
21718     E0 01 90 5D |  if_ne	jmp	#LR__3571
2171c     1C 1E 06 F1 | 	add	local01, #28
21720     0F 17 02 FB | 	rdlong	arg03, local01
21724     1C 1E 86 F1 | 	sub	local01, #28
21728     0B 29 C2 FA | 	rdbyte	local06, arg03
2172c     14 17 02 F6 | 	mov	arg03, local06
21730     07 16 4E F7 | 	zerox	arg03, #7 wz
21734     04 26 06 A6 |  if_e	mov	local05, #4
21738     C0 01 90 AD |  if_e	jmp	#LR__3571
2173c     1C 1E 06 F1 | 	add	local01, #28
21740     0F 2B 02 FB | 	rdlong	local07, local01
21744     15 17 02 F6 | 	mov	arg03, local07
21748     0B 16 06 F1 | 	add	arg03, #11
2174c     0B 2D C2 FA | 	rdbyte	local08, arg03
21750     3F 2C 06 F5 | 	and	local08, #63
21754     16 1E 86 F1 | 	sub	local01, #22
21758     0F 2D 42 FC | 	wrbyte	local08, local01
2175c     06 1E 86 F1 | 	sub	local01, #6
21760     14 17 E2 F8 | 	getbyte	arg03, local06, #0
21764     E5 16 0E F2 | 	cmp	arg03, #229 wz
21768     18 00 90 AD |  if_e	jmp	#LR__3561
2176c     16 17 E2 F8 | 	getbyte	arg03, local08, #0
21770     08 16 CE F7 | 	test	arg03, #8 wz
21774     16 2B 02 56 |  if_ne	mov	local07, local08
21778     15 2B E2 58 |  if_ne	getbyte	local07, local07, #0
2177c     0F 2A 0E 52 |  if_ne	cmp	local07, #15 wz
21780     18 00 90 AD |  if_e	jmp	#LR__3562
21784                 | LR__3561
21784     FF 24 06 F6 | 	mov	local04, #255
21788     2C 1E 06 F1 | 	add	local01, #44
2178c     FF FF FF FF 
21790     0F FF 6B FC | 	wrlong	##-1, local01
21794     2C 1E 86 F1 | 	sub	local01, #44
21798     4C 01 90 FD | 	jmp	#LR__3570
2179c                 | LR__3562
2179c     16 2D E2 F8 | 	getbyte	local08, local08, #0
217a0     0F 2C 0E F2 | 	cmp	local08, #15 wz
217a4     C8 00 90 5D |  if_ne	jmp	#LR__3566
217a8     2B 1E 06 F1 | 	add	local01, #43
217ac     0F 2D C2 FA | 	rdbyte	local08, local01
217b0     2B 1E 86 F1 | 	sub	local01, #43
217b4     40 2C CE F7 | 	test	local08, #64 wz
217b8     2C 01 90 5D |  if_ne	jmp	#LR__3569
217bc     14 2F E2 F8 | 	getbyte	local09, local06, #0
217c0     40 2E CE F7 | 	test	local09, #64 wz
217c4     30 00 90 AD |  if_e	jmp	#LR__3563
217c8     1C 1E 06 F1 | 	add	local01, #28
217cc     0F 2F 02 FB | 	rdlong	local09, local01
217d0     0D 2E 06 F1 | 	add	local09, #13
217d4     17 23 C2 FA | 	rdbyte	local03, local09
217d8     14 29 E2 F8 | 	getbyte	local06, local06, #0
217dc     BF 28 06 F5 | 	and	local06, #191
217e0     14 25 02 F6 | 	mov	local04, local06
217e4     0C 1E 86 F1 | 	sub	local01, #12
217e8     0F 2F 02 FB | 	rdlong	local09, local01
217ec     1C 1E 06 F1 | 	add	local01, #28
217f0     0F 2F 62 FC | 	wrlong	local09, local01
217f4     2C 1E 86 F1 | 	sub	local01, #44
217f8                 | LR__3563
217f8     14 31 E2 F8 | 	getbyte	local10, local06, #0
217fc     12 2B E2 F8 | 	getbyte	local07, local04, #0
21800     15 31 0A F2 | 	cmp	local10, local07 wz
21804     5C 00 90 5D |  if_ne	jmp	#LR__3564
21808     11 2D E2 F8 | 	getbyte	local08, local03, #0
2180c     1C 1E 06 F1 | 	add	local01, #28
21810     0F 2B 02 FB | 	rdlong	local07, local01
21814     1C 1E 86 F1 | 	sub	local01, #28
21818     0D 2A 06 F1 | 	add	local07, #13
2181c     15 29 C2 FA | 	rdbyte	local06, local07
21820     14 2B E2 F8 | 	getbyte	local07, local06, #0
21824     15 2D 0A F2 | 	cmp	local08, local07 wz
21828     38 00 90 5D |  if_ne	jmp	#LR__3564
2182c     0C 20 06 F1 | 	add	local02, #12
21830     10 13 02 FB | 	rdlong	arg01, local02
21834     0C 20 86 F1 | 	sub	local02, #12
21838     1C 1E 06 F1 | 	add	local01, #28
2183c     0F 33 02 FB | 	rdlong	local11, local01
21840     1C 1E 86 F1 | 	sub	local01, #28
21844     19 15 02 F6 | 	mov	arg02, local11
21848     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
2184c     00 FA 4D F2 | 	cmps	result1, #0 wz
21850     12 33 02 56 |  if_ne	mov	local11, local04
21854     19 33 E2 58 |  if_ne	getbyte	local11, local11, #0
21858     01 32 86 51 |  if_ne	sub	local11, #1
2185c     19 2F 02 56 |  if_ne	mov	local09, local11
21860     04 00 90 5D |  if_ne	jmp	#LR__3565
21864                 | LR__3564
21864     FF 2E 06 F6 | 	mov	local09, #255
21868                 | LR__3565
21868     17 25 02 F6 | 	mov	local04, local09
2186c     78 00 90 FD | 	jmp	#LR__3569
21870                 | LR__3566
21870     12 2F 02 F6 | 	mov	local09, local04
21874     07 2E 4E F7 | 	zerox	local09, #7 wz
21878     20 00 90 5D |  if_ne	jmp	#LR__3567
2187c     11 31 E2 F8 | 	getbyte	local10, local03, #0
21880     1C 1E 06 F1 | 	add	local01, #28
21884     0F 13 02 FB | 	rdlong	arg01, local01
21888     1C 1E 86 F1 | 	sub	local01, #28
2188c     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
21890     FD FA E1 F8 | 	getbyte	result1, result1, #0
21894     FD 30 0A F2 | 	cmp	local10, result1 wz
21898     60 00 90 AD |  if_e	jmp	#LR__3571
2189c                 | LR__3567
2189c     2B 1E 06 F1 | 	add	local01, #43
218a0     0F 2F C2 FA | 	rdbyte	local09, local01
218a4     2B 1E 86 F1 | 	sub	local01, #43
218a8     01 2E CE F7 | 	test	local09, #1 wz
218ac     24 00 90 5D |  if_ne	jmp	#LR__3568
218b0     1C 1E 06 F1 | 	add	local01, #28
218b4     0F 13 02 FB | 	rdlong	arg01, local01
218b8     04 1E 06 F1 | 	add	local01, #4
218bc     0F 15 02 F6 | 	mov	arg02, local01
218c0     20 1E 86 F1 | 	sub	local01, #32
218c4     0B 16 06 F6 | 	mov	arg03, #11
218c8     88 DA BF FD | 	call	#_fatfs_cc_memcmp
218cc     00 FA 0D F2 | 	cmp	result1, #0 wz
218d0     28 00 90 AD |  if_e	jmp	#LR__3571
218d4                 | LR__3568
218d4     FF 24 06 F6 | 	mov	local04, #255
218d8     2C 1E 06 F1 | 	add	local01, #44
218dc     FF FF FF FF 
218e0     0F FF 6B FC | 	wrlong	##-1, local01
218e4     2C 1E 86 F1 | 	sub	local01, #44
218e8                 | LR__3569
218e8                 | LR__3570
218e8     0F 13 02 F6 | 	mov	arg01, local01
218ec     00 14 06 F6 | 	mov	arg02, #0
218f0     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
218f4     FD 26 0A F6 | 	mov	local05, result1 wz
218f8     04 FE 9F AD |  if_e	jmp	#LR__3560
218fc                 | LR__3571
218fc                 | ' 
218fc                 | ' 	return res;
218fc     13 FB 01 F6 | 	mov	result1, local05
21900                 | LR__3572
21900     A7 F0 03 F6 | 	mov	ptra, fp
21904     B2 00 A0 FD | 	call	#popregs_
21908                 | _fatfs_cc_dir_find_ret
21908     2D 00 64 FD | 	ret
2190c                 | 
2190c                 | _fatfs_cc_dir_register
2190c     0A 4A 05 F6 | 	mov	COUNT_, #10
21910     A8 00 A0 FD | 	call	#pushregs_
21914     2C F0 07 F1 | 	add	ptra, #44
21918     04 4E 05 F1 | 	add	fp, #4
2191c     A7 12 62 FC | 	wrlong	arg01, fp
21920     09 1F 02 FB | 	rdlong	local01, arg01
21924     08 4E 05 F1 | 	add	fp, #8
21928     A7 1E 62 FC | 	wrlong	local01, fp
2192c     08 4E 85 F1 | 	sub	fp, #8
21930     A7 20 02 FB | 	rdlong	local02, fp
21934     04 4E 85 F1 | 	sub	fp, #4
21938     2B 20 06 F1 | 	add	local02, #43
2193c     10 21 C2 FA | 	rdbyte	local02, local02
21940     A0 20 CE F7 | 	test	local02, #160 wz
21944     06 FA 05 56 |  if_ne	mov	result1, #6
21948     F8 03 90 5D |  if_ne	jmp	#LR__3595
2194c                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
2194c     14 4E 05 F1 | 	add	fp, #20
21950     A7 00 68 FC | 	wrlong	#0, fp
21954     14 4E 85 F1 | 	sub	fp, #20
21958     97 28 48 FB | 	callpa	#(@LR__3581-@LR__3580)>>2,fcache_load_ptr_
2195c                 | LR__3580
2195c     0C 4E 05 F1 | 	add	fp, #12
21960     A7 20 02 FB | 	rdlong	local02, fp
21964     0C 20 06 F1 | 	add	local02, #12
21968     10 23 02 FB | 	rdlong	local03, local02
2196c     08 4E 05 F1 | 	add	fp, #8
21970     A7 24 02 FB | 	rdlong	local04, fp
21974     14 4E 85 F1 | 	sub	fp, #20
21978     01 24 66 F0 | 	shl	local04, #1
2197c     11 25 02 F1 | 	add	local04, local03
21980     12 21 EA FA | 	rdword	local02, local04 wz
21984     24 00 90 AD |  if_e	jmp	#LR__3582
21988     14 4E 05 F1 | 	add	fp, #20
2198c     A7 26 02 FB | 	rdlong	local05, fp
21990     13 29 02 F6 | 	mov	local06, local05
21994     13 2B 02 F6 | 	mov	local07, local05
21998     15 2D 02 F6 | 	mov	local08, local07
2199c     01 2C 06 F1 | 	add	local08, #1
219a0     A7 2C 62 FC | 	wrlong	local08, fp
219a4     14 4E 85 F1 | 	sub	fp, #20
219a8     B0 FF 9F FD | 	jmp	#LR__3580
219ac                 | LR__3581
219ac                 | LR__3582
219ac     1C 4E 05 F1 | 	add	fp, #28
219b0     A7 12 02 F6 | 	mov	arg01, fp
219b4     18 4E 85 F1 | 	sub	fp, #24
219b8     A7 14 02 FB | 	rdlong	arg02, fp
219bc     04 4E 85 F1 | 	sub	fp, #4
219c0     20 14 06 F1 | 	add	arg02, #32
219c4     0C 16 06 F6 | 	mov	arg03, #12
219c8     08 72 BF FD | 	call	#__system____builtin_memmove
219cc     27 4E 05 F1 | 	add	fp, #39
219d0     A7 2E C2 FA | 	rdbyte	local09, fp
219d4     27 4E 85 F1 | 	sub	fp, #39
219d8     01 2E CE F7 | 	test	local09, #1 wz
219dc     F4 00 90 AD |  if_e	jmp	#LR__3585
219e0     04 4E 05 F1 | 	add	fp, #4
219e4     A7 30 02 FB | 	rdlong	local10, fp
219e8     2B 30 06 F1 | 	add	local10, #43
219ec     18 81 48 FC | 	wrbyte	#64, local10
219f0                 | ' 		dp->fn[ 11 ] =  0x40 ;
219f0                 | ' 		for (n = 1; n < 100; n++) {
219f0     0C 4E 05 F1 | 	add	fp, #12
219f4     A7 02 68 FC | 	wrlong	#1, fp
219f8     10 4E 85 F1 | 	sub	fp, #16
219fc                 | LR__3583
219fc     10 4E 05 F1 | 	add	fp, #16
21a00     A7 20 02 FB | 	rdlong	local02, fp
21a04     10 4E 85 F1 | 	sub	fp, #16
21a08     64 20 16 F2 | 	cmp	local02, #100 wc
21a0c     70 00 90 3D |  if_ae	jmp	#LR__3584
21a10     04 4E 05 F1 | 	add	fp, #4
21a14     A7 12 02 FB | 	rdlong	arg01, fp
21a18     20 12 06 F1 | 	add	arg01, #32
21a1c     18 4E 05 F1 | 	add	fp, #24
21a20     A7 14 02 F6 | 	mov	arg02, fp
21a24     10 4E 85 F1 | 	sub	fp, #16
21a28     A7 30 02 FB | 	rdlong	local10, fp
21a2c     0C 30 06 F1 | 	add	local10, #12
21a30     18 17 02 FB | 	rdlong	arg03, local10
21a34     04 4E 05 F1 | 	add	fp, #4
21a38     A7 18 02 FB | 	rdlong	arg04, fp
21a3c     10 4E 85 F1 | 	sub	fp, #16
21a40     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
21a44     04 4E 05 F1 | 	add	fp, #4
21a48     A7 12 02 FB | 	rdlong	arg01, fp
21a4c     04 4E 85 F1 | 	sub	fp, #4
21a50     70 FC BF FD | 	call	#_fatfs_cc_dir_find
21a54     08 4E 05 F1 | 	add	fp, #8
21a58     A7 FA 61 FC | 	wrlong	result1, fp
21a5c     00 FA 4D F2 | 	cmps	result1, #0 wz
21a60     08 4E 85 F1 | 	sub	fp, #8
21a64     18 00 90 5D |  if_ne	jmp	#LR__3584
21a68     10 4E 05 F1 | 	add	fp, #16
21a6c     A7 30 02 FB | 	rdlong	local10, fp
21a70     01 30 06 F1 | 	add	local10, #1
21a74     A7 30 62 FC | 	wrlong	local10, fp
21a78     10 4E 85 F1 | 	sub	fp, #16
21a7c     7C FF 9F FD | 	jmp	#LR__3583
21a80                 | LR__3584
21a80     10 4E 05 F1 | 	add	fp, #16
21a84     A7 30 02 FB | 	rdlong	local10, fp
21a88     10 4E 85 F1 | 	sub	fp, #16
21a8c     64 30 0E F2 | 	cmp	local10, #100 wz
21a90     07 FA 05 A6 |  if_e	mov	result1, #7
21a94     AC 02 90 AD |  if_e	jmp	#LR__3595
21a98     08 4E 05 F1 | 	add	fp, #8
21a9c     A7 30 02 FB | 	rdlong	local10, fp
21aa0     08 4E 85 F1 | 	sub	fp, #8
21aa4     04 30 0E F2 | 	cmp	local10, #4 wz
21aa8     08 4E 05 51 |  if_ne	add	fp, #8
21aac     A7 FA 01 5B |  if_ne	rdlong	result1, fp
21ab0     08 4E 85 51 |  if_ne	sub	fp, #8
21ab4     8C 02 90 5D |  if_ne	jmp	#LR__3595
21ab8     04 4E 05 F1 | 	add	fp, #4
21abc     A7 30 02 FB | 	rdlong	local10, fp
21ac0     23 4E 05 F1 | 	add	fp, #35
21ac4     A7 1E C2 FA | 	rdbyte	local01, fp
21ac8     27 4E 85 F1 | 	sub	fp, #39
21acc     2B 30 06 F1 | 	add	local10, #43
21ad0     18 1F 42 FC | 	wrbyte	local01, local10
21ad4                 | LR__3585
21ad4     27 4E 05 F1 | 	add	fp, #39
21ad8     A7 20 C2 FA | 	rdbyte	local02, fp
21adc     27 4E 85 F1 | 	sub	fp, #39
21ae0     02 20 CE F7 | 	test	local02, #2 wz
21ae4     20 00 90 AD |  if_e	jmp	#LR__3586
21ae8     14 4E 05 F1 | 	add	fp, #20
21aec     A7 30 02 FB | 	rdlong	local10, fp
21af0     0C 30 06 F1 | 	add	local10, #12
21af4     0D 30 16 FD | 	qdiv	local10, #13
21af8     14 4E 85 F1 | 	sub	fp, #20
21afc     18 30 62 FD | 	getqx	local10
21b00     01 30 06 F1 | 	add	local10, #1
21b04     04 00 90 FD | 	jmp	#LR__3587
21b08                 | LR__3586
21b08     01 30 06 F6 | 	mov	local10, #1
21b0c                 | LR__3587
21b0c     18 4E 05 F1 | 	add	fp, #24
21b10     A7 30 62 FC | 	wrlong	local10, fp
21b14     14 4E 85 F1 | 	sub	fp, #20
21b18     A7 12 02 FB | 	rdlong	arg01, fp
21b1c     18 15 02 F6 | 	mov	arg02, local10
21b20     04 4E 85 F1 | 	sub	fp, #4
21b24     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
21b28     08 4E 05 F1 | 	add	fp, #8
21b2c     A7 FA 61 FC | 	wrlong	result1, fp
21b30     08 4E 85 F1 | 	sub	fp, #8
21b34     00 FA 0D F2 | 	cmp	result1, #0 wz
21b38     38 01 90 5D |  if_ne	jmp	#LR__3592
21b3c     18 4E 05 F1 | 	add	fp, #24
21b40     A7 30 02 FB | 	rdlong	local10, fp
21b44     01 30 8E F1 | 	sub	local10, #1 wz
21b48     A7 30 62 FC | 	wrlong	local10, fp
21b4c     18 4E 85 F1 | 	sub	fp, #24
21b50     20 01 90 AD |  if_e	jmp	#LR__3592
21b54     04 4E 05 F1 | 	add	fp, #4
21b58     A7 30 02 FB | 	rdlong	local10, fp
21b5c     18 13 02 F6 | 	mov	arg01, local10
21b60     14 4E 05 F1 | 	add	fp, #20
21b64     A7 18 02 FB | 	rdlong	arg04, fp
21b68     18 4E 85 F1 | 	sub	fp, #24
21b6c     05 18 66 F0 | 	shl	arg04, #5
21b70     10 30 06 F1 | 	add	local10, #16
21b74     18 15 02 FB | 	rdlong	arg02, local10
21b78     0C 15 82 F1 | 	sub	arg02, arg04
21b7c     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
21b80     08 4E 05 F1 | 	add	fp, #8
21b84     A7 FA 61 FC | 	wrlong	result1, fp
21b88     08 4E 85 F1 | 	sub	fp, #8
21b8c     00 FA 0D F2 | 	cmp	result1, #0 wz
21b90     E0 00 90 5D |  if_ne	jmp	#LR__3591
21b94     04 4E 05 F1 | 	add	fp, #4
21b98     A7 12 02 FB | 	rdlong	arg01, fp
21b9c     04 4E 85 F1 | 	sub	fp, #4
21ba0     20 12 06 F1 | 	add	arg01, #32
21ba4     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
21ba8     FD 30 02 F6 | 	mov	local10, result1
21bac     28 4E 05 F1 | 	add	fp, #40
21bb0     A7 30 42 FC | 	wrbyte	local10, fp
21bb4     28 4E 85 F1 | 	sub	fp, #40
21bb8                 | ' 			sum = sum_sfn(dp->fn);
21bb8                 | ' 			do {
21bb8                 | LR__3588
21bb8     0C 4E 05 F1 | 	add	fp, #12
21bbc     A7 12 02 FB | 	rdlong	arg01, fp
21bc0     08 4E 85 F1 | 	sub	fp, #8
21bc4     A7 1E 02 FB | 	rdlong	local01, fp
21bc8     04 4E 85 F1 | 	sub	fp, #4
21bcc     18 1E 06 F1 | 	add	local01, #24
21bd0     0F 15 02 FB | 	rdlong	arg02, local01
21bd4     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
21bd8     08 4E 05 F1 | 	add	fp, #8
21bdc     A7 FA 61 FC | 	wrlong	result1, fp
21be0     00 FA 4D F2 | 	cmps	result1, #0 wz
21be4     08 4E 85 F1 | 	sub	fp, #8
21be8     88 00 90 5D |  if_ne	jmp	#LR__3590
21bec     0C 4E 05 F1 | 	add	fp, #12
21bf0     A7 20 02 FB | 	rdlong	local02, fp
21bf4     0C 20 06 F1 | 	add	local02, #12
21bf8     10 13 02 FB | 	rdlong	arg01, local02
21bfc     08 4E 85 F1 | 	sub	fp, #8
21c00     A7 1E 02 FB | 	rdlong	local01, fp
21c04     1C 1E 06 F1 | 	add	local01, #28
21c08     0F 15 02 FB | 	rdlong	arg02, local01
21c0c     14 4E 05 F1 | 	add	fp, #20
21c10     A7 16 02 FB | 	rdlong	arg03, fp
21c14     10 4E 05 F1 | 	add	fp, #16
21c18     A7 18 C2 FA | 	rdbyte	arg04, fp
21c1c     28 4E 85 F1 | 	sub	fp, #40
21c20     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
21c24     0C 4E 05 F1 | 	add	fp, #12
21c28     A7 30 02 FB | 	rdlong	local10, fp
21c2c     03 30 06 F1 | 	add	local10, #3
21c30     18 03 48 FC | 	wrbyte	#1, local10
21c34     08 4E 85 F1 | 	sub	fp, #8
21c38     A7 12 02 FB | 	rdlong	arg01, fp
21c3c     04 4E 85 F1 | 	sub	fp, #4
21c40     00 14 06 F6 | 	mov	arg02, #0
21c44     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
21c48     08 4E 05 F1 | 	add	fp, #8
21c4c     A7 FA 61 FC | 	wrlong	result1, fp
21c50     00 FA 4D F2 | 	cmps	result1, #0 wz
21c54     08 4E 85 F1 | 	sub	fp, #8
21c58     18 00 90 5D |  if_ne	jmp	#LR__3589
21c5c     18 4E 05 F1 | 	add	fp, #24
21c60     A7 30 02 FB | 	rdlong	local10, fp
21c64     01 30 8E F1 | 	sub	local10, #1 wz
21c68     A7 30 62 FC | 	wrlong	local10, fp
21c6c     18 4E 85 F1 | 	sub	fp, #24
21c70     44 FF 9F 5D |  if_ne	jmp	#LR__3588
21c74                 | LR__3589
21c74                 | LR__3590
21c74                 | LR__3591
21c74                 | LR__3592
21c74     08 4E 05 F1 | 	add	fp, #8
21c78     A7 30 0A FB | 	rdlong	local10, fp wz
21c7c     08 4E 85 F1 | 	sub	fp, #8
21c80     B4 00 90 5D |  if_ne	jmp	#LR__3594
21c84     0C 4E 05 F1 | 	add	fp, #12
21c88     A7 12 02 FB | 	rdlong	arg01, fp
21c8c     08 4E 85 F1 | 	sub	fp, #8
21c90     A7 1E 02 FB | 	rdlong	local01, fp
21c94     04 4E 85 F1 | 	sub	fp, #4
21c98     18 1E 06 F1 | 	add	local01, #24
21c9c     0F 15 02 FB | 	rdlong	arg02, local01
21ca0     18 E6 BF FD | 	call	#_fatfs_cc_move_window
21ca4     08 4E 05 F1 | 	add	fp, #8
21ca8     A7 FA 61 FC | 	wrlong	result1, fp
21cac     08 4E 85 F1 | 	sub	fp, #8
21cb0     00 FA 0D F2 | 	cmp	result1, #0 wz
21cb4     80 00 90 5D |  if_ne	jmp	#LR__3593
21cb8     04 4E 05 F1 | 	add	fp, #4
21cbc     A7 20 02 FB | 	rdlong	local02, fp
21cc0     04 4E 85 F1 | 	sub	fp, #4
21cc4     1C 20 06 F1 | 	add	local02, #28
21cc8     10 13 02 FB | 	rdlong	arg01, local02
21ccc     00 14 06 F6 | 	mov	arg02, #0
21cd0     20 16 06 F6 | 	mov	arg03, #32
21cd4     98 00 A0 FD | 	call	#\builtin_bytefill_
21cd8     04 4E 05 F1 | 	add	fp, #4
21cdc     A7 14 02 FB | 	rdlong	arg02, fp
21ce0     0A 1F 02 F6 | 	mov	local01, arg02
21ce4     1C 1E 06 F1 | 	add	local01, #28
21ce8     0F 13 02 FB | 	rdlong	arg01, local01
21cec     04 4E 85 F1 | 	sub	fp, #4
21cf0     20 14 06 F1 | 	add	arg02, #32
21cf4     0B 16 06 F6 | 	mov	arg03, #11
21cf8     D8 6E BF FD | 	call	#__system____builtin_memmove
21cfc     04 4E 05 F1 | 	add	fp, #4
21d00     A7 2E 02 FB | 	rdlong	local09, fp
21d04     17 31 02 F6 | 	mov	local10, local09
21d08     1C 30 06 F1 | 	add	local10, #28
21d0c     18 1F 02 FB | 	rdlong	local01, local10
21d10     2B 2E 06 F1 | 	add	local09, #43
21d14     17 31 C2 FA | 	rdbyte	local10, local09
21d18     18 30 06 F5 | 	and	local10, #24
21d1c     0C 1E 06 F1 | 	add	local01, #12
21d20     0F 31 42 FC | 	wrbyte	local10, local01
21d24     08 4E 05 F1 | 	add	fp, #8
21d28     A7 30 02 FB | 	rdlong	local10, fp
21d2c     0C 4E 85 F1 | 	sub	fp, #12
21d30     03 30 06 F1 | 	add	local10, #3
21d34     18 03 48 FC | 	wrbyte	#1, local10
21d38                 | LR__3593
21d38                 | LR__3594
21d38                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
21d38                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
21d38                 | ' 
21d38                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
21d38                 | ' 
21d38                 | ' 			fs->wflag = 1;
21d38                 | ' 		}
21d38                 | ' 	}
21d38                 | ' 
21d38                 | ' 	return res;
21d38     08 4E 05 F1 | 	add	fp, #8
21d3c     A7 FA 01 FB | 	rdlong	result1, fp
21d40     08 4E 85 F1 | 	sub	fp, #8
21d44                 | LR__3595
21d44     A7 F0 03 F6 | 	mov	ptra, fp
21d48     B2 00 A0 FD | 	call	#popregs_
21d4c                 | _fatfs_cc_dir_register_ret
21d4c     2D 00 64 FD | 	ret
21d50                 | 
21d50                 | _fatfs_cc_dir_remove
21d50     05 4A 05 F6 | 	mov	COUNT_, #5
21d54     A8 00 A0 FD | 	call	#pushregs_
21d58     09 1F 02 F6 | 	mov	local01, arg01
21d5c     0F 21 02 FB | 	rdlong	local02, local01
21d60     10 1E 06 F1 | 	add	local01, #16
21d64     0F 23 02 FB | 	rdlong	local03, local01
21d68     1C 1E 06 F1 | 	add	local01, #28
21d6c     0F 15 02 FB | 	rdlong	arg02, local01
21d70     2C 1E 86 F1 | 	sub	local01, #44
21d74     FF FF 7F FF 
21d78     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
21d7c     00 24 06 A6 |  if_e	mov	local04, #0
21d80     18 00 90 AD |  if_e	jmp	#LR__3600
21d84     0F 13 02 F6 | 	mov	arg01, local01
21d88     2C 1E 06 F1 | 	add	local01, #44
21d8c     0F 15 02 FB | 	rdlong	arg02, local01
21d90     2C 1E 86 F1 | 	sub	local01, #44
21d94     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
21d98     FD 24 02 F6 | 	mov	local04, result1
21d9c                 | LR__3600
21d9c     12 27 0A F6 | 	mov	local05, local04 wz
21da0     64 00 90 5D |  if_ne	jmp	#LR__3603
21da4                 | ' 		do {
21da4                 | LR__3601
21da4     18 1E 06 F1 | 	add	local01, #24
21da8     0F 15 02 FB | 	rdlong	arg02, local01
21dac     18 1E 86 F1 | 	sub	local01, #24
21db0     10 13 02 F6 | 	mov	arg01, local02
21db4     04 E5 BF FD | 	call	#_fatfs_cc_move_window
21db8     FD 26 0A F6 | 	mov	local05, result1 wz
21dbc     40 00 90 5D |  if_ne	jmp	#LR__3602
21dc0     1C 1E 06 F1 | 	add	local01, #28
21dc4     0F 25 02 FB | 	rdlong	local04, local01
21dc8     12 CB 49 FC | 	wrbyte	#229, local04
21dcc     03 20 06 F1 | 	add	local02, #3
21dd0     10 03 48 FC | 	wrbyte	#1, local02
21dd4     03 20 86 F1 | 	sub	local02, #3
21dd8     0C 1E 86 F1 | 	sub	local01, #12
21ddc     0F 25 02 FB | 	rdlong	local04, local01
21de0     10 1E 86 F1 | 	sub	local01, #16
21de4     11 25 12 F2 | 	cmp	local04, local03 wc
21de8     14 00 90 3D |  if_ae	jmp	#LR__3602
21dec     0F 13 02 F6 | 	mov	arg01, local01
21df0     00 14 06 F6 | 	mov	arg02, #0
21df4     90 EF BF FD | 	call	#_fatfs_cc_dir_next
21df8     FD 26 0A F6 | 	mov	local05, result1 wz
21dfc     A4 FF 9F AD |  if_e	jmp	#LR__3601
21e00                 | LR__3602
21e00     04 26 0E F2 | 	cmp	local05, #4 wz
21e04     02 26 06 A6 |  if_e	mov	local05, #2
21e08                 | LR__3603
21e08                 | ' 	}
21e08                 | ' #line 2590 "ff.c"
21e08                 | ' 	return res;
21e08     13 FB 01 F6 | 	mov	result1, local05
21e0c     A7 F0 03 F6 | 	mov	ptra, fp
21e10     B2 00 A0 FD | 	call	#popregs_
21e14                 | _fatfs_cc_dir_remove_ret
21e14     2D 00 64 FD | 	ret
21e18                 | 
21e18                 | _fatfs_cc_get_fileinfo
21e18     0F 4A 05 F6 | 	mov	COUNT_, #15
21e1c     A8 00 A0 FD | 	call	#pushregs_
21e20     09 1F 02 F6 | 	mov	local01, arg01
21e24     0A 21 02 F6 | 	mov	local02, arg02
21e28     0F 23 02 FB | 	rdlong	local03, local01
21e2c     1C 20 06 F1 | 	add	local02, #28
21e30     10 01 48 FC | 	wrbyte	#0, local02
21e34     1C 20 86 F1 | 	sub	local02, #28
21e38     18 1E 06 F1 | 	add	local01, #24
21e3c     0F 25 0A FB | 	rdlong	local04, local01 wz
21e40     18 1E 86 F1 | 	sub	local01, #24
21e44     90 03 90 AD |  if_e	jmp	#LR__3624
21e48     2C 1E 06 F1 | 	add	local01, #44
21e4c     0F 25 02 FB | 	rdlong	local04, local01
21e50     2C 1E 86 F1 | 	sub	local01, #44
21e54     FF FF 7F FF 
21e58     FF 25 0E F2 | 	cmp	local04, ##-1 wz
21e5c     D8 00 90 AD |  if_e	jmp	#LR__3613
21e60     00 26 06 F6 | 	mov	local05, #0
21e64     00 28 06 F6 | 	mov	local06, #0
21e68     00 2A 06 F6 | 	mov	local07, #0
21e6c                 | ' 			si = di = 0;
21e6c                 | ' 			hs = 0;
21e6c                 | ' 			while (fs->lfnbuf[si] != 0) {
21e6c                 | LR__3610
21e6c     0C 22 06 F1 | 	add	local03, #12
21e70     11 25 02 FB | 	rdlong	local04, local03
21e74     0C 22 86 F1 | 	sub	local03, #12
21e78     14 2D 02 F6 | 	mov	local08, local06
21e7c     01 2C 66 F0 | 	shl	local08, #1
21e80     12 2D 02 F1 | 	add	local08, local04
21e84     16 25 EA FA | 	rdword	local04, local08 wz
21e88     90 00 90 AD |  if_e	jmp	#LR__3612
21e8c     0C 22 06 F1 | 	add	local03, #12
21e90     11 2F 02 FB | 	rdlong	local09, local03
21e94     0C 22 86 F1 | 	sub	local03, #12
21e98     14 31 02 F6 | 	mov	local10, local06
21e9c     01 30 66 F0 | 	shl	local10, #1
21ea0     17 31 02 F1 | 	add	local10, local09
21ea4     18 33 E2 FA | 	rdword	local11, local10
21ea8     15 25 02 F6 | 	mov	local04, local07
21eac     0F 24 4E F7 | 	zerox	local04, #15 wz
21eb0     01 28 06 F1 | 	add	local06, #1
21eb4     24 00 90 5D |  if_ne	jmp	#LR__3611
21eb8     19 35 32 F9 | 	getword	local12, local11, #0
21ebc     6C 00 00 FF 
21ec0     00 34 16 F2 | 	cmp	local12, ##55296 wc
21ec4     14 00 90 CD |  if_b	jmp	#LR__3611
21ec8     19 37 32 F9 | 	getword	local13, local11, #0
21ecc     70 00 00 FF 
21ed0     00 36 16 F2 | 	cmp	local13, ##57344 wc
21ed4     19 2B 02 C6 |  if_b	mov	local07, local11
21ed8                 | ' 					hs = wc; continue;
21ed8     90 FF 9F CD |  if_b	jmp	#LR__3610
21edc                 | LR__3611
21edc     15 13 32 F9 | 	getword	arg01, local07, #0
21ee0     10 12 66 F0 | 	shl	arg01, #16
21ee4     19 33 32 F9 | 	getword	local11, local11, #0
21ee8     19 13 42 F5 | 	or	arg01, local11
21eec     13 15 02 F6 | 	mov	arg02, local05
21ef0     1C 20 06 F1 | 	add	local02, #28
21ef4     10 15 02 F1 | 	add	arg02, local02
21ef8     FF 16 06 F6 | 	mov	arg03, #255
21efc     13 17 82 F1 | 	sub	arg03, local05
21f00     1C 20 86 F1 | 	sub	local02, #28
21f04     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
21f08     FD 38 0A F6 | 	mov	local14, result1 wz
21f0c     00 26 06 A6 |  if_e	mov	local05, #0
21f10     1C 27 02 51 |  if_ne	add	local05, local14
21f14     00 2A 06 56 |  if_ne	mov	local07, #0
21f18     50 FF 9F 5D |  if_ne	jmp	#LR__3610
21f1c                 | LR__3612
21f1c     15 25 02 F6 | 	mov	local04, local07
21f20     0F 24 4E F7 | 	zerox	local04, #15 wz
21f24     00 26 06 56 |  if_ne	mov	local05, #0
21f28     1C 20 06 F1 | 	add	local02, #28
21f2c     10 27 02 F1 | 	add	local05, local02
21f30     13 01 48 FC | 	wrbyte	#0, local05
21f34     1C 20 86 F1 | 	sub	local02, #28
21f38                 | LR__3613
21f38     00 26 06 F6 | 	mov	local05, #0
21f3c     00 28 06 F6 | 	mov	local06, #0
21f40                 | ' 			fno->fname[di] = 0;
21f40                 | ' 		}
21f40                 | ' 	}
21f40                 | ' 
21f40                 | ' 	si = di = 0;
21f40                 | ' 	while (si < 11) {
21f40                 | LR__3614
21f40     0B 28 16 F2 | 	cmp	local06, #11 wc
21f44     20 01 90 3D |  if_ae	jmp	#LR__3617
21f48     1C 1E 06 F1 | 	add	local01, #28
21f4c     0F 2F 02 FB | 	rdlong	local09, local01
21f50     1C 1E 86 F1 | 	sub	local01, #28
21f54     14 31 02 F6 | 	mov	local10, local06
21f58     17 31 02 F1 | 	add	local10, local09
21f5c     18 33 C2 FA | 	rdbyte	local11, local10
21f60     19 25 32 F9 | 	getword	local04, local11, #0
21f64     20 24 0E F2 | 	cmp	local04, #32 wz
21f68     01 28 06 F1 | 	add	local06, #1
21f6c     D0 FF 9F AD |  if_e	jmp	#LR__3614
21f70     19 25 32 F9 | 	getword	local04, local11, #0
21f74     05 24 0E F2 | 	cmp	local04, #5 wz
21f78     E5 32 06 A6 |  if_e	mov	local11, #229
21f7c     09 28 0E F2 | 	cmp	local06, #9 wz
21f80     20 00 90 5D |  if_ne	jmp	#LR__3615
21f84     0C 26 16 F2 | 	cmp	local05, #12 wc
21f88     18 00 90 3D |  if_ae	jmp	#LR__3615
21f8c     13 37 02 F6 | 	mov	local13, local05
21f90     0C 20 06 F1 | 	add	local02, #12
21f94     10 37 02 F1 | 	add	local13, local02
21f98     1B 5D 48 FC | 	wrbyte	#46, local13
21f9c     01 26 06 F1 | 	add	local05, #1
21fa0     0C 20 86 F1 | 	sub	local02, #12
21fa4                 | LR__3615
21fa4     19 13 32 F9 | 	getword	arg01, local11, #0
21fa8     07 12 4E F7 | 	zerox	arg01, #7 wz
21fac     00 FA 05 56 |  if_ne	mov	result1, #0
21fb0                 | ' 
21fb0                 | ' 	return 0;
21fb0     00 FA 05 A6 |  if_e	mov	result1, #0
21fb4     00 FA 0D F2 | 	cmp	result1, #0 wz
21fb8     08 28 0E 52 |  if_ne	cmp	local06, #8 wz
21fbc     0B 28 0E 52 |  if_ne	cmp	local06, #11 wz
21fc0     50 00 90 AD |  if_e	jmp	#LR__3616
21fc4     1C 1E 06 F1 | 	add	local01, #28
21fc8     0F 31 02 FB | 	rdlong	local10, local01
21fcc     1C 1E 86 F1 | 	sub	local01, #28
21fd0     14 2D 02 F6 | 	mov	local08, local06
21fd4     18 2D 02 F1 | 	add	local08, local10
21fd8     16 13 CA FA | 	rdbyte	arg01, local08 wz
21fdc     00 FA 05 56 |  if_ne	mov	result1, #0
21fe0                 | ' 
21fe0                 | ' 	return 0;
21fe0     00 FA 05 A6 |  if_e	mov	result1, #0
21fe4     00 FA 0D F2 | 	cmp	result1, #0 wz
21fe8     28 00 90 AD |  if_e	jmp	#LR__3616
21fec     19 33 32 F9 | 	getword	local11, local11, #0
21ff0     08 32 66 F0 | 	shl	local11, #8
21ff4     1C 1E 06 F1 | 	add	local01, #28
21ff8     0F 39 02 FB | 	rdlong	local14, local01
21ffc     1C 1E 86 F1 | 	sub	local01, #28
22000     14 2F 02 F6 | 	mov	local09, local06
22004     1C 2F 02 F1 | 	add	local09, local14
22008     17 35 C2 FA | 	rdbyte	local12, local09
2200c     1A 33 42 F5 | 	or	local11, local12
22010     01 28 06 F1 | 	add	local06, #1
22014                 | LR__3616
22014     19 13 02 F6 | 	mov	arg01, local11
22018     01 00 00 FF 
2201c     52 15 06 F6 | 	mov	arg02, ##850
22020     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
22024     FD 32 02 F6 | 	mov	local11, result1
22028     19 25 02 F6 | 	mov	local04, local11
2202c     0F 24 4E F7 | 	zerox	local04, #15 wz
22030     00 26 06 A6 |  if_e	mov	local05, #0
22034     30 00 90 AD |  if_e	jmp	#LR__3617
22038     19 13 32 F9 | 	getword	arg01, local11, #0
2203c     13 15 02 F6 | 	mov	arg02, local05
22040     0C 20 06 F1 | 	add	local02, #12
22044     10 15 02 F1 | 	add	arg02, local02
22048     0C 16 06 F6 | 	mov	arg03, #12
2204c     13 17 82 F1 | 	sub	arg03, local05
22050     0C 20 86 F1 | 	sub	local02, #12
22054     EC DF BF FD | 	call	#_fatfs_cc_put_utf
22058     FD 38 0A F6 | 	mov	local14, result1 wz
2205c     00 26 06 A6 |  if_e	mov	local05, #0
22060     1C 27 02 51 |  if_ne	add	local05, local14
22064     D8 FE 9F 5D |  if_ne	jmp	#LR__3614
22068                 | LR__3617
22068     13 25 02 F6 | 	mov	local04, local05
2206c     0C 20 06 F1 | 	add	local02, #12
22070     10 25 02 F1 | 	add	local04, local02
22074     12 01 48 FC | 	wrbyte	#0, local04
22078     10 20 06 F1 | 	add	local02, #16
2207c     10 25 CA FA | 	rdbyte	local04, local02 wz
22080     1C 20 86 F1 | 	sub	local02, #28
22084     F8 00 90 5D |  if_ne	jmp	#LR__3623
22088     00 26 0E F2 | 	cmp	local05, #0 wz
2208c     1C 00 90 5D |  if_ne	jmp	#LR__3618
22090     13 37 02 F6 | 	mov	local13, local05
22094     1C 20 06 F1 | 	add	local02, #28
22098     10 37 02 F1 | 	add	local13, local02
2209c     1B 7F 48 FC | 	wrbyte	#63, local13
220a0     01 26 06 F1 | 	add	local05, #1
220a4     1C 20 86 F1 | 	sub	local02, #28
220a8     A4 00 90 FD | 	jmp	#LR__3622
220ac                 | LR__3618
220ac                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
220ac     00 26 06 F6 | 	mov	local05, #0
220b0     00 28 06 F6 | 	mov	local06, #0
220b4     08 3A 06 F6 | 	mov	local15, #8
220b8                 | LR__3619
220b8     14 25 02 F6 | 	mov	local04, local06
220bc     0C 20 06 F1 | 	add	local02, #12
220c0     10 25 02 F1 | 	add	local04, local02
220c4     12 37 CA FA | 	rdbyte	local13, local04 wz
220c8     0C 20 86 F1 | 	sub	local02, #12
220cc     80 00 90 AD |  if_e	jmp	#LR__3621
220d0     14 2D 02 F6 | 	mov	local08, local06
220d4     0C 20 06 F1 | 	add	local02, #12
220d8     10 2D 02 F1 | 	add	local08, local02
220dc     16 33 C2 FA | 	rdbyte	local11, local08
220e0     19 39 32 F9 | 	getword	local14, local11, #0
220e4     2E 38 0E F2 | 	cmp	local14, #46 wz
220e8     0C 20 86 F1 | 	sub	local02, #12
220ec     10 3A 06 A6 |  if_e	mov	local15, #16
220f0     19 39 32 F9 | 	getword	local14, local11, #0
220f4     41 38 16 F2 | 	cmp	local14, #65 wc
220f8     30 00 90 CD |  if_b	jmp	#LR__3620
220fc     19 2D 32 F9 | 	getword	local08, local11, #0
22100     5B 2C 16 F2 | 	cmp	local08, #91 wc
22104     24 00 90 3D |  if_ae	jmp	#LR__3620
22108     1C 1E 06 F1 | 	add	local01, #28
2210c     0F 2F 02 FB | 	rdlong	local09, local01
22110     1C 1E 86 F1 | 	sub	local01, #28
22114     0C 2E 06 F1 | 	add	local09, #12
22118     17 31 C2 FA | 	rdbyte	local10, local09
2211c     1D 39 E2 F8 | 	getbyte	local14, local15, #0
22120     1C 31 CA F7 | 	test	local10, local14 wz
22124     19 33 32 59 |  if_ne	getword	local11, local11, #0
22128     20 32 06 51 |  if_ne	add	local11, #32
2212c                 | LR__3620
2212c     13 39 02 F6 | 	mov	local14, local05
22130     1C 20 06 F1 | 	add	local02, #28
22134     10 39 02 F1 | 	add	local14, local02
22138     19 33 32 F9 | 	getword	local11, local11, #0
2213c     1C 33 42 FC | 	wrbyte	local11, local14
22140     01 28 06 F1 | 	add	local06, #1
22144     01 26 06 F1 | 	add	local05, #1
22148     1C 20 86 F1 | 	sub	local02, #28
2214c     68 FF 9F FD | 	jmp	#LR__3619
22150                 | LR__3621
22150                 | LR__3622
22150     1C 20 06 F1 | 	add	local02, #28
22154     10 27 02 F1 | 	add	local05, local02
22158     13 01 48 FC | 	wrbyte	#0, local05
2215c     1C 1E 06 F1 | 	add	local01, #28
22160     0F 25 02 FB | 	rdlong	local04, local01
22164     1C 1E 86 F1 | 	sub	local01, #28
22168     0C 24 06 F1 | 	add	local04, #12
2216c     12 37 CA FA | 	rdbyte	local13, local04 wz
22170     1C 20 86 F1 | 	sub	local02, #28
22174     0C 20 06 A1 |  if_e	add	local02, #12
22178     10 01 48 AC |  if_e	wrbyte	#0, local02
2217c     0C 20 86 A1 |  if_e	sub	local02, #12
22180                 | LR__3623
22180     1C 1E 06 F1 | 	add	local01, #28
22184     0F 35 02 FB | 	rdlong	local12, local01
22188     0B 34 06 F1 | 	add	local12, #11
2218c     1A 25 C2 FA | 	rdbyte	local04, local12
22190     3F 24 06 F5 | 	and	local04, #63
22194     08 20 06 F1 | 	add	local02, #8
22198     10 25 42 FC | 	wrbyte	local04, local02
2219c     08 20 86 F1 | 	sub	local02, #8
221a0     0F 13 02 FB | 	rdlong	arg01, local01
221a4     1C 12 06 F1 | 	add	arg01, #28
221a8                 | ' {
221a8                 | ' 
221a8                 | ' 	return *((DWORD*)ptr);
221a8     09 FB 01 FB | 	rdlong	result1, arg01
221ac     10 FB 61 FC | 	wrlong	result1, local02
221b0     0F 13 02 FB | 	rdlong	arg01, local01
221b4     16 12 06 F1 | 	add	arg01, #22
221b8                 | ' {
221b8                 | ' 
221b8                 | ' 	return *((WORD*)ptr);
221b8     09 FB E1 FA | 	rdword	result1, arg01
221bc     06 20 06 F1 | 	add	local02, #6
221c0     10 FB 51 FC | 	wrword	result1, local02
221c4     0F 13 02 FB | 	rdlong	arg01, local01
221c8     18 12 06 F1 | 	add	arg01, #24
221cc                 | ' {
221cc                 | ' 
221cc                 | ' 	return *((WORD*)ptr);
221cc     09 FB E1 FA | 	rdword	result1, arg01
221d0     02 20 86 F1 | 	sub	local02, #2
221d4     10 FB 51 FC | 	wrword	result1, local02
221d8                 | LR__3624
221d8     A7 F0 03 F6 | 	mov	ptra, fp
221dc     B2 00 A0 FD | 	call	#popregs_
221e0                 | _fatfs_cc_get_fileinfo_ret
221e0     2D 00 64 FD | 	ret
221e4                 | 
221e4                 | _fatfs_cc_create_name
221e4     0D 4A 05 F6 | 	mov	COUNT_, #13
221e8     A8 00 A0 FD | 	call	#pushregs_
221ec     34 F0 07 F1 | 	add	ptra, #52
221f0     04 4E 05 F1 | 	add	fp, #4
221f4     A7 12 62 FC | 	wrlong	arg01, fp
221f8     04 4E 05 F1 | 	add	fp, #4
221fc     A7 14 62 FC | 	wrlong	arg02, fp
22200     0A FB 01 FB | 	rdlong	result1, arg02
22204     28 4E 05 F1 | 	add	fp, #40
22208     A7 FA 61 FC | 	wrlong	result1, fp
2220c     2C 4E 85 F1 | 	sub	fp, #44
22210     A7 FA 01 FB | 	rdlong	result1, fp
22214     FD 1E 02 FB | 	rdlong	local01, result1
22218     0C 1E 06 F1 | 	add	local01, #12
2221c     0F 21 02 FB | 	rdlong	local02, local01
22220     14 4E 05 F1 | 	add	fp, #20
22224     A7 20 62 FC | 	wrlong	local02, fp
22228     14 4E 05 F1 | 	add	fp, #20
2222c     A7 00 68 FC | 	wrlong	#0, fp
22230     2C 4E 85 F1 | 	sub	fp, #44
22234                 | ' 
22234                 | ' 
22234                 | ' 
22234                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
22234                 | ' 	for (;;) {
22234                 | LR__3630
22234     30 4E 05 F1 | 	add	fp, #48
22238     A7 12 02 F6 | 	mov	arg01, fp
2223c     30 4E 85 F1 | 	sub	fp, #48
22240     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
22244     1C 4E 05 F1 | 	add	fp, #28
22248     A7 FA 61 FC | 	wrlong	result1, fp
2224c     1C 4E 85 F1 | 	sub	fp, #28
22250     FF FF 7F FF 
22254     FF FB 0D F2 | 	cmp	result1, ##-1 wz
22258     06 FA 05 A6 |  if_e	mov	result1, #6
2225c     74 08 90 AD |  if_e	jmp	#LR__3670
22260     1C 4E 05 F1 | 	add	fp, #28
22264     A7 1E 02 FB | 	rdlong	local01, fp
22268     1C 4E 85 F1 | 	sub	fp, #28
2226c     80 00 00 FF 
22270     00 1E 16 F2 | 	cmp	local01, ##65536 wc
22274     3C 00 90 CD |  if_b	jmp	#LR__3631
22278     18 4E 05 F1 | 	add	fp, #24
2227c     A7 22 02 FB | 	rdlong	local03, fp
22280     14 4E 05 F1 | 	add	fp, #20
22284     A7 1E 02 FB | 	rdlong	local01, fp
22288     0F 25 02 F6 | 	mov	local04, local01
2228c     01 24 06 F1 | 	add	local04, #1
22290     A7 24 62 FC | 	wrlong	local04, fp
22294     01 1E 66 F0 | 	shl	local01, #1
22298     11 1F 02 F1 | 	add	local01, local03
2229c     10 4E 85 F1 | 	sub	fp, #16
222a0     A7 26 02 FB | 	rdlong	local05, fp
222a4     1C 4E 85 F1 | 	sub	fp, #28
222a8     13 29 02 F6 | 	mov	local06, local05
222ac     10 28 46 F0 | 	shr	local06, #16
222b0     0F 29 52 FC | 	wrword	local06, local01
222b4                 | LR__3631
222b4     1C 4E 05 F1 | 	add	fp, #28
222b8     A7 1E 02 FB | 	rdlong	local01, fp
222bc     08 4E 85 F1 | 	sub	fp, #8
222c0     A7 1E 52 FC | 	wrword	local01, fp
222c4     A7 1E E2 FA | 	rdword	local01, fp
222c8     14 4E 85 F1 | 	sub	fp, #20
222cc     20 1E 16 F2 | 	cmp	local01, #32 wc
222d0     B0 00 90 CD |  if_b	jmp	#LR__3633
222d4     14 4E 05 F1 | 	add	fp, #20
222d8     A7 1E E2 FA | 	rdword	local01, fp
222dc     14 4E 85 F1 | 	sub	fp, #20
222e0     2F 1E 0E F2 | 	cmp	local01, #47 wz
222e4     14 4E 05 51 |  if_ne	add	fp, #20
222e8     A7 24 E2 5A |  if_ne	rdword	local04, fp
222ec     14 4E 85 51 |  if_ne	sub	fp, #20
222f0     5C 24 0E 52 |  if_ne	cmp	local04, #92 wz
222f4     8C 00 90 AD |  if_e	jmp	#LR__3633
222f8     14 4E 05 F1 | 	add	fp, #20
222fc     A7 12 E2 FA | 	rdword	arg01, fp
22300     14 4E 85 F1 | 	sub	fp, #20
22304     80 12 16 F2 | 	cmp	arg01, #128 wc
22308     24 00 90 3D |  if_ae	jmp	#LR__3632
2230c     41 01 00 FF 
22310     34 12 06 F6 | 	mov	arg01, ##@LR__4292
22314     14 4E 05 F1 | 	add	fp, #20
22318     A7 14 E2 FA | 	rdword	arg02, fp
2231c     14 4E 85 F1 | 	sub	fp, #20
22320     FC D0 BF FD | 	call	#_fatfs_cc_strchr
22324     00 FA 0D F2 | 	cmp	result1, #0 wz
22328     06 FA 05 56 |  if_ne	mov	result1, #6
2232c     A4 07 90 5D |  if_ne	jmp	#LR__3670
22330                 | LR__3632
22330     2C 4E 05 F1 | 	add	fp, #44
22334     A7 28 02 FB | 	rdlong	local06, fp
22338     2C 4E 85 F1 | 	sub	fp, #44
2233c     FF 28 16 F2 | 	cmp	local06, #255 wc
22340     06 FA 05 36 |  if_ae	mov	result1, #6
22344     8C 07 90 3D |  if_ae	jmp	#LR__3670
22348     18 4E 05 F1 | 	add	fp, #24
2234c     A7 22 02 FB | 	rdlong	local03, fp
22350     14 4E 05 F1 | 	add	fp, #20
22354     A7 20 02 FB | 	rdlong	local02, fp
22358     10 25 02 F6 | 	mov	local04, local02
2235c     01 24 06 F1 | 	add	local04, #1
22360     A7 24 62 FC | 	wrlong	local04, fp
22364     10 1F 02 F6 | 	mov	local01, local02
22368     01 1E 66 F0 | 	shl	local01, #1
2236c     11 1F 02 F1 | 	add	local01, local03
22370     18 4E 85 F1 | 	sub	fp, #24
22374     A7 28 E2 FA | 	rdword	local06, fp
22378     14 4E 85 F1 | 	sub	fp, #20
2237c     0F 29 52 FC | 	wrword	local06, local01
22380     B0 FE 9F FD | 	jmp	#LR__3630
22384                 | LR__3633
22384     14 4E 05 F1 | 	add	fp, #20
22388     A7 2A E2 FA | 	rdword	local07, fp
2238c     14 4E 85 F1 | 	sub	fp, #20
22390     20 2A 16 F2 | 	cmp	local07, #32 wc
22394     10 4E 05 C1 |  if_b	add	fp, #16
22398     A7 08 48 CC |  if_b	wrbyte	#4, fp
2239c     10 4E 85 C1 |  if_b	sub	fp, #16
223a0     74 00 90 CD |  if_b	jmp	#LR__3638
223a4     97 24 48 FB | 	callpa	#(@LR__3636-@LR__3634)>>2,fcache_load_ptr_
223a8                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
223a8                 | LR__3634
223a8     30 4E 05 F1 | 	add	fp, #48
223ac     A7 24 02 FB | 	rdlong	local04, fp
223b0     30 4E 85 F1 | 	sub	fp, #48
223b4     12 2B C2 FA | 	rdbyte	local07, local04
223b8     2F 2A 0E F2 | 	cmp	local07, #47 wz
223bc     18 00 90 AD |  if_e	jmp	#LR__3635
223c0     30 4E 05 F1 | 	add	fp, #48
223c4     A7 24 02 FB | 	rdlong	local04, fp
223c8     30 4E 85 F1 | 	sub	fp, #48
223cc     12 21 C2 FA | 	rdbyte	local02, local04
223d0     5C 20 0E F2 | 	cmp	local02, #92 wz
223d4     18 00 90 5D |  if_ne	jmp	#LR__3637
223d8                 | LR__3635
223d8     30 4E 05 F1 | 	add	fp, #48
223dc     A7 1E 02 FB | 	rdlong	local01, fp
223e0     01 1E 06 F1 | 	add	local01, #1
223e4     A7 1E 62 FC | 	wrlong	local01, fp
223e8     30 4E 85 F1 | 	sub	fp, #48
223ec     B8 FF 9F FD | 	jmp	#LR__3634
223f0                 | LR__3636
223f0                 | LR__3637
223f0     10 4E 05 F1 | 	add	fp, #16
223f4     A7 00 48 FC | 	wrbyte	#0, fp
223f8     20 4E 05 F1 | 	add	fp, #32
223fc     A7 28 02 FB | 	rdlong	local06, fp
22400     30 4E 85 F1 | 	sub	fp, #48
22404     14 2B C2 FA | 	rdbyte	local07, local06
22408     20 2A 16 F2 | 	cmp	local07, #32 wc
2240c     10 4E 05 C1 |  if_b	add	fp, #16
22410     A7 08 48 CC |  if_b	wrbyte	#4, fp
22414     10 4E 85 C1 |  if_b	sub	fp, #16
22418                 | LR__3638
22418     08 4E 05 F1 | 	add	fp, #8
2241c     A7 2A 02 FB | 	rdlong	local07, fp
22420     28 4E 05 F1 | 	add	fp, #40
22424     A7 1E 02 FB | 	rdlong	local01, fp
22428     30 4E 85 F1 | 	sub	fp, #48
2242c     15 1F 62 FC | 	wrlong	local01, local07
22430     97 38 48 FB | 	callpa	#(@LR__3640-@LR__3639)>>2,fcache_load_ptr_
22434                 | ' 	}
22434                 | ' 	*path = p;
22434                 | ' #line 2862 "ff.c"
22434                 | ' 	while (di) {
22434                 | LR__3639
22434     2C 4E 05 F1 | 	add	fp, #44
22438     A7 2A 0A FB | 	rdlong	local07, fp wz
2243c     2C 4E 85 F1 | 	sub	fp, #44
22440     60 00 90 AD |  if_e	jmp	#LR__3641
22444     18 4E 05 F1 | 	add	fp, #24
22448     A7 28 02 FB | 	rdlong	local06, fp
2244c     14 4E 05 F1 | 	add	fp, #20
22450     A7 24 02 FB | 	rdlong	local04, fp
22454     01 24 86 F1 | 	sub	local04, #1
22458     01 24 66 F0 | 	shl	local04, #1
2245c     14 25 02 F1 | 	add	local04, local06
22460     12 29 E2 FA | 	rdword	local06, local04
22464     18 4E 85 F1 | 	sub	fp, #24
22468     A7 28 52 FC | 	wrword	local06, fp
2246c     A7 2A E2 FA | 	rdword	local07, fp
22470     14 4E 85 F1 | 	sub	fp, #20
22474     20 2A 0E F2 | 	cmp	local07, #32 wz
22478     14 4E 05 51 |  if_ne	add	fp, #20
2247c     A7 1E E2 5A |  if_ne	rdword	local01, fp
22480     14 4E 85 51 |  if_ne	sub	fp, #20
22484     2E 1E 0E 52 |  if_ne	cmp	local01, #46 wz
22488     18 00 90 5D |  if_ne	jmp	#LR__3641
2248c     2C 4E 05 F1 | 	add	fp, #44
22490     A7 1E 02 FB | 	rdlong	local01, fp
22494     01 1E 86 F1 | 	sub	local01, #1
22498     A7 1E 62 FC | 	wrlong	local01, fp
2249c     2C 4E 85 F1 | 	sub	fp, #44
224a0     90 FF 9F FD | 	jmp	#LR__3639
224a4                 | LR__3640
224a4                 | LR__3641
224a4     18 4E 05 F1 | 	add	fp, #24
224a8     A7 2C 02 FB | 	rdlong	local08, fp
224ac     14 4E 05 F1 | 	add	fp, #20
224b0     A7 24 02 FB | 	rdlong	local04, fp
224b4     01 24 66 F0 | 	shl	local04, #1
224b8     16 25 02 F1 | 	add	local04, local08
224bc     12 01 58 FC | 	wrword	#0, local04
224c0     A7 2A 0A FB | 	rdlong	local07, fp wz
224c4     2C 4E 85 F1 | 	sub	fp, #44
224c8     06 FA 05 A6 |  if_e	mov	result1, #6
224cc     04 06 90 AD |  if_e	jmp	#LR__3670
224d0                 | ' 
224d0                 | ' 
224d0                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
224d0     28 4E 05 F1 | 	add	fp, #40
224d4     A7 00 68 FC | 	wrlong	#0, fp
224d8     28 4E 85 F1 | 	sub	fp, #40
224dc     97 22 48 FB | 	callpa	#(@LR__3643-@LR__3642)>>2,fcache_load_ptr_
224e0                 | LR__3642
224e0     18 4E 05 F1 | 	add	fp, #24
224e4     A7 2E 02 FB | 	rdlong	local09, fp
224e8     10 4E 05 F1 | 	add	fp, #16
224ec     A7 30 02 FB | 	rdlong	local10, fp
224f0     28 4E 85 F1 | 	sub	fp, #40
224f4     01 30 66 F0 | 	shl	local10, #1
224f8     17 31 02 F1 | 	add	local10, local09
224fc     18 33 E2 FA | 	rdword	local11, local10
22500     20 32 0E F2 | 	cmp	local11, #32 wz
22504     1C 00 90 5D |  if_ne	jmp	#LR__3644
22508     28 4E 05 F1 | 	add	fp, #40
2250c     A7 34 02 FB | 	rdlong	local12, fp
22510     1A 27 02 F6 | 	mov	local05, local12
22514     01 26 06 F1 | 	add	local05, #1
22518     A7 26 62 FC | 	wrlong	local05, fp
2251c     28 4E 85 F1 | 	sub	fp, #40
22520     BC FF 9F FD | 	jmp	#LR__3642
22524                 | LR__3643
22524                 | LR__3644
22524     28 4E 05 F1 | 	add	fp, #40
22528     A7 2A 02 FB | 	rdlong	local07, fp
2252c     28 4E 85 F1 | 	sub	fp, #40
22530     01 2A 16 F2 | 	cmp	local07, #1 wc
22534     28 00 90 3D |  if_ae	jmp	#LR__3645
22538     18 4E 05 F1 | 	add	fp, #24
2253c     A7 22 02 FB | 	rdlong	local03, fp
22540     10 4E 05 F1 | 	add	fp, #16
22544     A7 2E 02 FB | 	rdlong	local09, fp
22548     28 4E 85 F1 | 	sub	fp, #40
2254c     01 2E 66 F0 | 	shl	local09, #1
22550     11 2F 02 F1 | 	add	local09, local03
22554     17 1F E2 FA | 	rdword	local01, local09
22558     2E 1E 0E F2 | 	cmp	local01, #46 wz
2255c     14 00 90 5D |  if_ne	jmp	#LR__3646
22560                 | LR__3645
22560     10 4E 05 F1 | 	add	fp, #16
22564     A7 2A C2 FA | 	rdbyte	local07, fp
22568     03 2A 46 F5 | 	or	local07, #3
2256c     A7 2A 42 FC | 	wrbyte	local07, fp
22570     10 4E 85 F1 | 	sub	fp, #16
22574                 | LR__3646
22574     97 2C 48 FB | 	callpa	#(@LR__3648-@LR__3647)>>2,fcache_load_ptr_
22578                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
22578                 | LR__3647
22578     2C 4E 05 F1 | 	add	fp, #44
2257c     A7 2A 02 FB | 	rdlong	local07, fp
22580     2C 4E 85 F1 | 	sub	fp, #44
22584     01 2A 16 F2 | 	cmp	local07, #1 wc
22588     44 00 90 CD |  if_b	jmp	#LR__3649
2258c     18 4E 05 F1 | 	add	fp, #24
22590     A7 28 02 FB | 	rdlong	local06, fp
22594     14 4E 05 F1 | 	add	fp, #20
22598     A7 22 02 FB | 	rdlong	local03, fp
2259c     2C 4E 85 F1 | 	sub	fp, #44
225a0     01 22 86 F1 | 	sub	local03, #1
225a4     01 22 66 F0 | 	shl	local03, #1
225a8     14 23 02 F1 | 	add	local03, local06
225ac     11 1F E2 FA | 	rdword	local01, local03
225b0     2E 1E 0E F2 | 	cmp	local01, #46 wz
225b4     18 00 90 AD |  if_e	jmp	#LR__3649
225b8     2C 4E 05 F1 | 	add	fp, #44
225bc     A7 1E 02 FB | 	rdlong	local01, fp
225c0     01 1E 86 F1 | 	sub	local01, #1
225c4     A7 1E 62 FC | 	wrlong	local01, fp
225c8     2C 4E 85 F1 | 	sub	fp, #44
225cc     A8 FF 9F FD | 	jmp	#LR__3647
225d0                 | LR__3648
225d0                 | LR__3649
225d0     04 4E 05 F1 | 	add	fp, #4
225d4     A7 12 02 FB | 	rdlong	arg01, fp
225d8     04 4E 85 F1 | 	sub	fp, #4
225dc     20 12 06 F1 | 	add	arg01, #32
225e0     20 14 06 F6 | 	mov	arg02, #32
225e4     0B 16 06 F6 | 	mov	arg03, #11
225e8     09 37 02 F6 | 	mov	local13, arg01
225ec     98 00 A0 FD | 	call	#\builtin_bytefill_
225f0     1B FB 01 F6 | 	mov	result1, local13
225f4     0C 4E 05 F1 | 	add	fp, #12
225f8     A7 00 48 FC | 	wrbyte	#0, fp
225fc     A7 2A C2 FA | 	rdbyte	local07, fp
22600     14 4E 05 F1 | 	add	fp, #20
22604     A7 2A 62 FC | 	wrlong	local07, fp
22608     04 4E 05 F1 | 	add	fp, #4
2260c     A7 10 68 FC | 	wrlong	#8, fp
22610     24 4E 85 F1 | 	sub	fp, #36
22614                 | ' 
22614                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
22614                 | ' 	i = b = 0; ni = 8;
22614                 | ' 	for (;;) {
22614                 | LR__3650
22614     18 4E 05 F1 | 	add	fp, #24
22618     A7 22 02 FB | 	rdlong	local03, fp
2261c     10 4E 05 F1 | 	add	fp, #16
22620     A7 2E 02 FB | 	rdlong	local09, fp
22624     17 25 02 F6 | 	mov	local04, local09
22628     01 24 06 F1 | 	add	local04, #1
2262c     A7 24 62 FC | 	wrlong	local04, fp
22630     01 2E 66 F0 | 	shl	local09, #1
22634     11 2F 02 F1 | 	add	local09, local03
22638     17 29 E2 FA | 	rdword	local06, local09
2263c     14 4E 85 F1 | 	sub	fp, #20
22640     A7 28 52 FC | 	wrword	local06, fp
22644     A7 2A EA FA | 	rdword	local07, fp wz
22648     14 4E 85 F1 | 	sub	fp, #20
2264c     74 03 90 AD |  if_e	jmp	#LR__3666
22650     14 4E 05 F1 | 	add	fp, #20
22654     A7 2A E2 FA | 	rdword	local07, fp
22658     14 4E 85 F1 | 	sub	fp, #20
2265c     20 2A 0E F2 | 	cmp	local07, #32 wz
22660     30 00 90 AD |  if_e	jmp	#LR__3651
22664     14 4E 05 F1 | 	add	fp, #20
22668     A7 1E E2 FA | 	rdword	local01, fp
2266c     14 4E 85 F1 | 	sub	fp, #20
22670     2E 1E 0E F2 | 	cmp	local01, #46 wz
22674     34 00 90 5D |  if_ne	jmp	#LR__3652
22678     28 4E 05 F1 | 	add	fp, #40
2267c     A7 24 02 FB | 	rdlong	local04, fp
22680     04 4E 05 F1 | 	add	fp, #4
22684     A7 30 02 FB | 	rdlong	local10, fp
22688     2C 4E 85 F1 | 	sub	fp, #44
2268c     18 25 0A F2 | 	cmp	local04, local10 wz
22690     18 00 90 AD |  if_e	jmp	#LR__3652
22694                 | LR__3651
22694     10 4E 05 F1 | 	add	fp, #16
22698     A7 2A C2 FA | 	rdbyte	local07, fp
2269c     03 2A 46 F5 | 	or	local07, #3
226a0     A7 2A 42 FC | 	wrbyte	local07, fp
226a4     10 4E 85 F1 | 	sub	fp, #16
226a8                 | ' 			cf |=  0x01  |  0x02 ;
226a8                 | ' 			continue;
226a8     68 FF 9F FD | 	jmp	#LR__3650
226ac                 | LR__3652
226ac     20 4E 05 F1 | 	add	fp, #32
226b0     A7 2A 02 FB | 	rdlong	local07, fp
226b4     04 4E 05 F1 | 	add	fp, #4
226b8     A7 1E 02 FB | 	rdlong	local01, fp
226bc     24 4E 85 F1 | 	sub	fp, #36
226c0     0F 2B 12 F2 | 	cmp	local07, local01 wc
226c4     1C 00 90 3D |  if_ae	jmp	#LR__3653
226c8     28 4E 05 F1 | 	add	fp, #40
226cc     A7 2C 02 FB | 	rdlong	local08, fp
226d0     04 4E 05 F1 | 	add	fp, #4
226d4     A7 30 02 FB | 	rdlong	local10, fp
226d8     2C 4E 85 F1 | 	sub	fp, #44
226dc     18 2D 0A F2 | 	cmp	local08, local10 wz
226e0     B0 00 90 5D |  if_ne	jmp	#LR__3655
226e4                 | LR__3653
226e4     24 4E 05 F1 | 	add	fp, #36
226e8     A7 2A 02 FB | 	rdlong	local07, fp
226ec     24 4E 85 F1 | 	sub	fp, #36
226f0     0B 2A 0E F2 | 	cmp	local07, #11 wz
226f4     18 00 90 5D |  if_ne	jmp	#LR__3654
226f8     10 4E 05 F1 | 	add	fp, #16
226fc     A7 2A C2 FA | 	rdbyte	local07, fp
22700     03 2A 46 F5 | 	or	local07, #3
22704     A7 2A 42 FC | 	wrbyte	local07, fp
22708     10 4E 85 F1 | 	sub	fp, #16
2270c                 | ' 				cf |=  0x01  |  0x02 ;
2270c                 | ' 				break;
2270c     B4 02 90 FD | 	jmp	#LR__3666
22710                 | LR__3654
22710     28 4E 05 F1 | 	add	fp, #40
22714     A7 2A 02 FB | 	rdlong	local07, fp
22718     04 4E 05 F1 | 	add	fp, #4
2271c     A7 1E 02 FB | 	rdlong	local01, fp
22720     2C 4E 85 F1 | 	sub	fp, #44
22724     0F 2B 0A F2 | 	cmp	local07, local01 wz
22728     10 4E 05 51 |  if_ne	add	fp, #16
2272c     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
22730     03 2A 46 55 |  if_ne	or	local07, #3
22734     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
22738     10 4E 85 51 |  if_ne	sub	fp, #16
2273c     28 4E 05 F1 | 	add	fp, #40
22740     A7 2A 02 FB | 	rdlong	local07, fp
22744     04 4E 05 F1 | 	add	fp, #4
22748     A7 20 02 FB | 	rdlong	local02, fp
2274c     2C 4E 85 F1 | 	sub	fp, #44
22750     10 2B 1A F2 | 	cmp	local07, local02 wcz
22754     6C 02 90 1D |  if_a	jmp	#LR__3666
22758     2C 4E 05 F1 | 	add	fp, #44
2275c     A7 2A 02 FB | 	rdlong	local07, fp
22760     04 4E 85 F1 | 	sub	fp, #4
22764     A7 2A 62 FC | 	wrlong	local07, fp
22768     08 4E 85 F1 | 	sub	fp, #8
2276c     A7 10 68 FC | 	wrlong	#8, fp
22770     04 4E 05 F1 | 	add	fp, #4
22774     A7 16 68 FC | 	wrlong	#11, fp
22778     18 4E 85 F1 | 	sub	fp, #24
2277c     A7 32 C2 FA | 	rdbyte	local11, fp
22780     19 2B E2 F8 | 	getbyte	local07, local11, #0
22784     02 2A 66 F0 | 	shl	local07, #2
22788     A7 2A 42 FC | 	wrbyte	local07, fp
2278c     0C 4E 85 F1 | 	sub	fp, #12
22790                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
22790                 | ' 			continue;
22790     80 FE 9F FD | 	jmp	#LR__3650
22794                 | LR__3655
22794     14 4E 05 F1 | 	add	fp, #20
22798     A7 2A E2 FA | 	rdword	local07, fp
2279c     14 4E 85 F1 | 	sub	fp, #20
227a0     80 2A 16 F2 | 	cmp	local07, #128 wc
227a4     6C 00 90 CD |  if_b	jmp	#LR__3657
227a8     10 4E 05 F1 | 	add	fp, #16
227ac     A7 2A C2 FA | 	rdbyte	local07, fp
227b0     02 2A 46 F5 | 	or	local07, #2
227b4     A7 2A 42 FC | 	wrbyte	local07, fp
227b8     04 4E 05 F1 | 	add	fp, #4
227bc     A7 12 E2 FA | 	rdword	arg01, fp
227c0     14 4E 85 F1 | 	sub	fp, #20
227c4     01 00 00 FF 
227c8     52 15 06 F6 | 	mov	arg02, ##850
227cc     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
227d0     14 4E 05 F1 | 	add	fp, #20
227d4     A7 FA 51 FC | 	wrword	result1, fp
227d8     A7 2A E2 FA | 	rdword	local07, fp
227dc     14 4E 85 F1 | 	sub	fp, #20
227e0     80 2A CE F7 | 	test	local07, #128 wz
227e4     2C 00 90 AD |  if_e	jmp	#LR__3656
227e8     14 4E 05 F1 | 	add	fp, #20
227ec     A7 20 E2 FA | 	rdword	local02, fp
227f0     7F 20 06 F5 | 	and	local02, #127
227f4     01 00 00 FF 
227f8     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
227fc     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
22800     10 2B C2 FA | 	rdbyte	local07, local02
22804     A7 2A 52 FC | 	wrword	local07, fp
22808     14 4E 85 F1 | 	sub	fp, #20
2280c     01 00 00 FF 
22810     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
22814                 | LR__3656
22814                 | LR__3657
22814     14 4E 05 F1 | 	add	fp, #20
22818     A7 2A E2 FA | 	rdword	local07, fp
2281c     14 4E 85 F1 | 	sub	fp, #20
22820     00 2B 16 F2 | 	cmp	local07, #256 wc
22824     88 00 90 CD |  if_b	jmp	#LR__3659
22828     24 4E 05 F1 | 	add	fp, #36
2282c     A7 2A 02 FB | 	rdlong	local07, fp
22830     01 2A 86 F1 | 	sub	local07, #1
22834     04 4E 85 F1 | 	sub	fp, #4
22838     A7 20 02 FB | 	rdlong	local02, fp
2283c     20 4E 85 F1 | 	sub	fp, #32
22840     15 21 12 F2 | 	cmp	local02, local07 wc
22844     2C 00 90 CD |  if_b	jmp	#LR__3658
22848     10 4E 05 F1 | 	add	fp, #16
2284c     A7 32 C2 FA | 	rdbyte	local11, fp
22850     19 2B E2 F8 | 	getbyte	local07, local11, #0
22854     03 2A 46 F5 | 	or	local07, #3
22858     A7 2A 42 FC | 	wrbyte	local07, fp
2285c     14 4E 05 F1 | 	add	fp, #20
22860     A7 2A 02 FB | 	rdlong	local07, fp
22864     04 4E 85 F1 | 	sub	fp, #4
22868     A7 2A 62 FC | 	wrlong	local07, fp
2286c     20 4E 85 F1 | 	sub	fp, #32
22870                 | ' 				cf |=  0x01  |  0x02 ;
22870                 | ' 				i = ni; continue;
22870     A0 FD 9F FD | 	jmp	#LR__3650
22874                 | LR__3658
22874     04 4E 05 F1 | 	add	fp, #4
22878     A7 2E 02 FB | 	rdlong	local09, fp
2287c     1C 4E 05 F1 | 	add	fp, #28
22880     A7 30 02 FB | 	rdlong	local10, fp
22884     18 25 02 F6 | 	mov	local04, local10
22888     01 24 06 F1 | 	add	local04, #1
2288c     A7 24 62 FC | 	wrlong	local04, fp
22890     20 2E 06 F1 | 	add	local09, #32
22894     17 31 02 F1 | 	add	local10, local09
22898     0C 4E 85 F1 | 	sub	fp, #12
2289c     A7 22 E2 FA | 	rdword	local03, fp
228a0     14 4E 85 F1 | 	sub	fp, #20
228a4     08 22 46 F0 | 	shr	local03, #8
228a8     18 23 42 FC | 	wrbyte	local03, local10
228ac     D4 00 90 FD | 	jmp	#LR__3665
228b0                 | LR__3659
228b0     14 4E 05 F1 | 	add	fp, #20
228b4     A7 2A EA FA | 	rdword	local07, fp wz
228b8     14 4E 85 F1 | 	sub	fp, #20
228bc     20 00 90 AD |  if_e	jmp	#LR__3660
228c0     41 01 00 FF 
228c4     3D 12 06 F6 | 	mov	arg01, ##@LR__4293
228c8     14 4E 05 F1 | 	add	fp, #20
228cc     A7 14 E2 FA | 	rdword	arg02, fp
228d0     14 4E 85 F1 | 	sub	fp, #20
228d4     48 CB BF FD | 	call	#_fatfs_cc_strchr
228d8     00 FA 0D F2 | 	cmp	result1, #0 wz
228dc     20 00 90 AD |  if_e	jmp	#LR__3661
228e0                 | LR__3660
228e0     14 4E 05 F1 | 	add	fp, #20
228e4     A7 BE 58 FC | 	wrword	#95, fp
228e8     04 4E 85 F1 | 	sub	fp, #4
228ec     A7 2A C2 FA | 	rdbyte	local07, fp
228f0     03 2A 46 F5 | 	or	local07, #3
228f4     A7 2A 42 FC | 	wrbyte	local07, fp
228f8     10 4E 85 F1 | 	sub	fp, #16
228fc     84 00 90 FD | 	jmp	#LR__3664
22900                 | LR__3661
22900     14 4E 05 F1 | 	add	fp, #20
22904     A7 2A E2 FA | 	rdword	local07, fp
22908     14 4E 85 F1 | 	sub	fp, #20
2290c     41 2A 16 F2 | 	cmp	local07, #65 wc
22910     24 00 90 CD |  if_b	jmp	#LR__3662
22914     14 4E 05 F1 | 	add	fp, #20
22918     A7 1E E2 FA | 	rdword	local01, fp
2291c     14 4E 85 F1 | 	sub	fp, #20
22920     5B 1E 16 F2 | 	cmp	local01, #91 wc
22924     0C 4E 05 C1 |  if_b	add	fp, #12
22928     A7 2A C2 CA |  if_b	rdbyte	local07, fp
2292c     02 2A 46 C5 |  if_b	or	local07, #2
22930     A7 2A 42 CC |  if_b	wrbyte	local07, fp
22934     0C 4E 85 C1 |  if_b	sub	fp, #12
22938                 | LR__3662
22938     14 4E 05 F1 | 	add	fp, #20
2293c     A7 2A E2 FA | 	rdword	local07, fp
22940     14 4E 85 F1 | 	sub	fp, #20
22944     61 2A 16 F2 | 	cmp	local07, #97 wc
22948     38 00 90 CD |  if_b	jmp	#LR__3663
2294c     14 4E 05 F1 | 	add	fp, #20
22950     A7 1E E2 FA | 	rdword	local01, fp
22954     14 4E 85 F1 | 	sub	fp, #20
22958     7B 1E 16 F2 | 	cmp	local01, #123 wc
2295c     24 00 90 3D |  if_ae	jmp	#LR__3663
22960     0C 4E 05 F1 | 	add	fp, #12
22964     A7 2A C2 FA | 	rdbyte	local07, fp
22968     01 2A 46 F5 | 	or	local07, #1
2296c     A7 2A 42 FC | 	wrbyte	local07, fp
22970     08 4E 05 F1 | 	add	fp, #8
22974     A7 2A E2 FA | 	rdword	local07, fp
22978     20 2A 86 F1 | 	sub	local07, #32
2297c     A7 2A 52 FC | 	wrword	local07, fp
22980     14 4E 85 F1 | 	sub	fp, #20
22984                 | LR__3663
22984                 | LR__3664
22984                 | LR__3665
22984     04 4E 05 F1 | 	add	fp, #4
22988     A7 32 02 FB | 	rdlong	local11, fp
2298c     19 2F 02 F6 | 	mov	local09, local11
22990     1C 4E 05 F1 | 	add	fp, #28
22994     A7 20 02 FB | 	rdlong	local02, fp
22998     10 25 02 F6 | 	mov	local04, local02
2299c     01 24 06 F1 | 	add	local04, #1
229a0     A7 24 62 FC | 	wrlong	local04, fp
229a4     10 31 02 F6 | 	mov	local10, local02
229a8     20 2E 06 F1 | 	add	local09, #32
229ac     17 31 02 F1 | 	add	local10, local09
229b0     0C 4E 85 F1 | 	sub	fp, #12
229b4     A7 22 E2 FA | 	rdword	local03, fp
229b8     14 4E 85 F1 | 	sub	fp, #20
229bc     18 23 42 FC | 	wrbyte	local03, local10
229c0     50 FC 9F FD | 	jmp	#LR__3650
229c4                 | LR__3666
229c4     04 4E 05 F1 | 	add	fp, #4
229c8     A7 32 02 FB | 	rdlong	local11, fp
229cc     04 4E 85 F1 | 	sub	fp, #4
229d0     20 32 06 F1 | 	add	local11, #32
229d4     19 2B C2 FA | 	rdbyte	local07, local11
229d8     E5 2A 0E F2 | 	cmp	local07, #229 wz
229dc     04 4E 05 A1 |  if_e	add	fp, #4
229e0     A7 2A 02 AB |  if_e	rdlong	local07, fp
229e4     04 4E 85 A1 |  if_e	sub	fp, #4
229e8     20 2A 06 A1 |  if_e	add	local07, #32
229ec     15 0B 48 AC |  if_e	wrbyte	#5, local07
229f0     24 4E 05 F1 | 	add	fp, #36
229f4     A7 2A 02 FB | 	rdlong	local07, fp
229f8     24 4E 85 F1 | 	sub	fp, #36
229fc     08 2A 0E F2 | 	cmp	local07, #8 wz
22a00     0C 4E 05 A1 |  if_e	add	fp, #12
22a04     A7 2A C2 AA |  if_e	rdbyte	local07, fp
22a08     02 2A 66 A0 |  if_e	shl	local07, #2
22a0c     A7 2A 42 AC |  if_e	wrbyte	local07, fp
22a10     0C 4E 85 A1 |  if_e	sub	fp, #12
22a14     0C 4E 05 F1 | 	add	fp, #12
22a18     A7 2A C2 FA | 	rdbyte	local07, fp
22a1c     0C 4E 85 F1 | 	sub	fp, #12
22a20     0C 2A 06 F5 | 	and	local07, #12
22a24     0C 2A 0E F2 | 	cmp	local07, #12 wz
22a28     18 00 90 AD |  if_e	jmp	#LR__3667
22a2c     0C 4E 05 F1 | 	add	fp, #12
22a30     A7 1E C2 FA | 	rdbyte	local01, fp
22a34     0C 4E 85 F1 | 	sub	fp, #12
22a38     03 1E 06 F5 | 	and	local01, #3
22a3c     03 1E 0E F2 | 	cmp	local01, #3 wz
22a40     14 00 90 5D |  if_ne	jmp	#LR__3668
22a44                 | LR__3667
22a44     10 4E 05 F1 | 	add	fp, #16
22a48     A7 2A C2 FA | 	rdbyte	local07, fp
22a4c     02 2A 46 F5 | 	or	local07, #2
22a50     A7 2A 42 FC | 	wrbyte	local07, fp
22a54     10 4E 85 F1 | 	sub	fp, #16
22a58                 | LR__3668
22a58     10 4E 05 F1 | 	add	fp, #16
22a5c     A7 2A C2 FA | 	rdbyte	local07, fp
22a60     10 4E 85 F1 | 	sub	fp, #16
22a64     02 2A CE F7 | 	test	local07, #2 wz
22a68     48 00 90 5D |  if_ne	jmp	#LR__3669
22a6c     0C 4E 05 F1 | 	add	fp, #12
22a70     A7 2A C2 FA | 	rdbyte	local07, fp
22a74     0C 4E 85 F1 | 	sub	fp, #12
22a78     01 2A CE F7 | 	test	local07, #1 wz
22a7c     10 4E 05 51 |  if_ne	add	fp, #16
22a80     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
22a84     10 2A 46 55 |  if_ne	or	local07, #16
22a88     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
22a8c     10 4E 85 51 |  if_ne	sub	fp, #16
22a90     0C 4E 05 F1 | 	add	fp, #12
22a94     A7 2A C2 FA | 	rdbyte	local07, fp
22a98     0C 4E 85 F1 | 	sub	fp, #12
22a9c     04 2A CE F7 | 	test	local07, #4 wz
22aa0     10 4E 05 51 |  if_ne	add	fp, #16
22aa4     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
22aa8     08 2A 46 55 |  if_ne	or	local07, #8
22aac     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
22ab0     10 4E 85 51 |  if_ne	sub	fp, #16
22ab4                 | LR__3669
22ab4     04 4E 05 F1 | 	add	fp, #4
22ab8     A7 2A 02 FB | 	rdlong	local07, fp
22abc     0C 4E 05 F1 | 	add	fp, #12
22ac0     A7 1E C2 FA | 	rdbyte	local01, fp
22ac4     10 4E 85 F1 | 	sub	fp, #16
22ac8     2B 2A 06 F1 | 	add	local07, #43
22acc     15 1F 42 FC | 	wrbyte	local01, local07
22ad0                 | ' 	}
22ad0                 | ' 
22ad0                 | ' 	dp->fn[ 11 ] = cf;
22ad0                 | ' 
22ad0                 | ' 	return FR_OK;
22ad0     00 FA 05 F6 | 	mov	result1, #0
22ad4                 | LR__3670
22ad4     A7 F0 03 F6 | 	mov	ptra, fp
22ad8     B2 00 A0 FD | 	call	#popregs_
22adc                 | _fatfs_cc_create_name_ret
22adc     2D 00 64 FD | 	ret
22ae0                 | 
22ae0                 | _fatfs_cc_follow_path
22ae0     02 4A 05 F6 | 	mov	COUNT_, #2
22ae4     A8 00 A0 FD | 	call	#pushregs_
22ae8     18 F0 07 F1 | 	add	ptra, #24
22aec     04 4E 05 F1 | 	add	fp, #4
22af0     A7 12 62 FC | 	wrlong	arg01, fp
22af4     04 4E 05 F1 | 	add	fp, #4
22af8     A7 14 62 FC | 	wrlong	arg02, fp
22afc     04 4E 85 F1 | 	sub	fp, #4
22b00     A7 FA 01 FB | 	rdlong	result1, fp
22b04     FD 1E 02 FB | 	rdlong	local01, result1
22b08     10 4E 05 F1 | 	add	fp, #16
22b0c     A7 1E 62 FC | 	wrlong	local01, fp
22b10     14 4E 85 F1 | 	sub	fp, #20
22b14     97 24 48 FB | 	callpa	#(@LR__3682-@LR__3680)>>2,fcache_load_ptr_
22b18                 | ' )
22b18                 | ' {
22b18                 | ' 	FRESULT res;
22b18                 | ' 	BYTE ns;
22b18                 | ' 	FATFS *fs = dp->obj.fs;
22b18                 | ' #line 3034 "ff.c"
22b18                 | ' 	{
22b18                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
22b18                 | LR__3680
22b18     08 4E 05 F1 | 	add	fp, #8
22b1c     A7 1E 02 FB | 	rdlong	local01, fp
22b20     08 4E 85 F1 | 	sub	fp, #8
22b24     0F 1F C2 FA | 	rdbyte	local01, local01
22b28     2F 1E 0E F2 | 	cmp	local01, #47 wz
22b2c     18 00 90 AD |  if_e	jmp	#LR__3681
22b30     08 4E 05 F1 | 	add	fp, #8
22b34     A7 1E 02 FB | 	rdlong	local01, fp
22b38     08 4E 85 F1 | 	sub	fp, #8
22b3c     0F 1F C2 FA | 	rdbyte	local01, local01
22b40     5C 1E 0E F2 | 	cmp	local01, #92 wz
22b44     18 00 90 5D |  if_ne	jmp	#LR__3683
22b48                 | LR__3681
22b48     08 4E 05 F1 | 	add	fp, #8
22b4c     A7 1E 02 FB | 	rdlong	local01, fp
22b50     01 1E 06 F1 | 	add	local01, #1
22b54     A7 1E 62 FC | 	wrlong	local01, fp
22b58     08 4E 85 F1 | 	sub	fp, #8
22b5c     B8 FF 9F FD | 	jmp	#LR__3680
22b60                 | LR__3682
22b60                 | LR__3683
22b60     04 4E 05 F1 | 	add	fp, #4
22b64     A7 1E 02 FB | 	rdlong	local01, fp
22b68     08 1E 06 F1 | 	add	local01, #8
22b6c     0F 01 68 FC | 	wrlong	#0, local01
22b70     04 4E 05 F1 | 	add	fp, #4
22b74     A7 1E 02 FB | 	rdlong	local01, fp
22b78     08 4E 85 F1 | 	sub	fp, #8
22b7c     0F 1F C2 FA | 	rdbyte	local01, local01
22b80     20 1E 16 F2 | 	cmp	local01, #32 wc
22b84     30 00 90 3D |  if_ae	jmp	#LR__3684
22b88     04 4E 05 F1 | 	add	fp, #4
22b8c     A7 1E 02 FB | 	rdlong	local01, fp
22b90     2B 1E 06 F1 | 	add	local01, #43
22b94     0F 01 49 FC | 	wrbyte	#128, local01
22b98     A7 12 02 FB | 	rdlong	arg01, fp
22b9c     04 4E 85 F1 | 	sub	fp, #4
22ba0     00 14 06 F6 | 	mov	arg02, #0
22ba4     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
22ba8     0C 4E 05 F1 | 	add	fp, #12
22bac     A7 FA 61 FC | 	wrlong	result1, fp
22bb0     0C 4E 85 F1 | 	sub	fp, #12
22bb4     1C 01 90 FD | 	jmp	#LR__3688
22bb8                 | LR__3684
22bb8                 | ' 		for (;;) {
22bb8                 | LR__3685
22bb8     04 4E 05 F1 | 	add	fp, #4
22bbc     A7 12 02 FB | 	rdlong	arg01, fp
22bc0     04 4E 05 F1 | 	add	fp, #4
22bc4     A7 14 02 F6 | 	mov	arg02, fp
22bc8     08 4E 85 F1 | 	sub	fp, #8
22bcc     14 F6 BF FD | 	call	#_fatfs_cc_create_name
22bd0     0C 4E 05 F1 | 	add	fp, #12
22bd4     A7 FA 61 FC | 	wrlong	result1, fp
22bd8     00 FA 4D F2 | 	cmps	result1, #0 wz
22bdc     0C 4E 85 F1 | 	sub	fp, #12
22be0     F0 00 90 5D |  if_ne	jmp	#LR__3687
22be4     04 4E 05 F1 | 	add	fp, #4
22be8     A7 12 02 FB | 	rdlong	arg01, fp
22bec     04 4E 85 F1 | 	sub	fp, #4
22bf0     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
22bf4     0C 4E 05 F1 | 	add	fp, #12
22bf8     A7 FA 61 FC | 	wrlong	result1, fp
22bfc     08 4E 85 F1 | 	sub	fp, #8
22c00     A7 1E 02 FB | 	rdlong	local01, fp
22c04     2B 1E 06 F1 | 	add	local01, #43
22c08     0F 1F C2 FA | 	rdbyte	local01, local01
22c0c     0C 4E 05 F1 | 	add	fp, #12
22c10     A7 1E 42 FC | 	wrbyte	local01, fp
22c14     04 4E 85 F1 | 	sub	fp, #4
22c18     A7 1E 0A FB | 	rdlong	local01, fp wz
22c1c     0C 4E 85 F1 | 	sub	fp, #12
22c20     34 00 90 AD |  if_e	jmp	#LR__3686
22c24     0C 4E 05 F1 | 	add	fp, #12
22c28     A7 1E 02 FB | 	rdlong	local01, fp
22c2c     0C 4E 85 F1 | 	sub	fp, #12
22c30     04 1E 0E F2 | 	cmp	local01, #4 wz
22c34     9C 00 90 5D |  if_ne	jmp	#LR__3687
22c38     10 4E 05 F1 | 	add	fp, #16
22c3c     A7 1E C2 FA | 	rdbyte	local01, fp
22c40     10 4E 85 F1 | 	sub	fp, #16
22c44     04 1E CE F7 | 	test	local01, #4 wz
22c48     0C 4E 05 A1 |  if_e	add	fp, #12
22c4c     A7 0A 68 AC |  if_e	wrlong	#5, fp
22c50     0C 4E 85 A1 |  if_e	sub	fp, #12
22c54                 | ' 					}
22c54                 | ' 				}
22c54                 | ' 				break;
22c54     7C 00 90 FD | 	jmp	#LR__3687
22c58                 | LR__3686
22c58     10 4E 05 F1 | 	add	fp, #16
22c5c     A7 1E C2 FA | 	rdbyte	local01, fp
22c60     10 4E 85 F1 | 	sub	fp, #16
22c64     04 1E CE F7 | 	test	local01, #4 wz
22c68     68 00 90 5D |  if_ne	jmp	#LR__3687
22c6c     04 4E 05 F1 | 	add	fp, #4
22c70     A7 1E 02 FB | 	rdlong	local01, fp
22c74     04 4E 85 F1 | 	sub	fp, #4
22c78     06 1E 06 F1 | 	add	local01, #6
22c7c     0F 1F C2 FA | 	rdbyte	local01, local01
22c80     10 1E CE F7 | 	test	local01, #16 wz
22c84     0C 4E 05 A1 |  if_e	add	fp, #12
22c88     A7 0A 68 AC |  if_e	wrlong	#5, fp
22c8c     0C 4E 85 A1 |  if_e	sub	fp, #12
22c90                 | ' 				res = FR_NO_PATH; break;
22c90     40 00 90 AD |  if_e	jmp	#LR__3687
22c94     04 4E 05 F1 | 	add	fp, #4
22c98     A7 20 02 FB | 	rdlong	local02, fp
22c9c     10 1F 02 F6 | 	mov	local01, local02
22ca0     10 4E 05 F1 | 	add	fp, #16
22ca4     A7 14 02 FB | 	rdlong	arg02, fp
22ca8     0A 13 02 F6 | 	mov	arg01, arg02
22cac     34 14 06 F1 | 	add	arg02, #52
22cb0     14 4E 85 F1 | 	sub	fp, #20
22cb4     10 20 06 F1 | 	add	local02, #16
22cb8     10 21 02 FB | 	rdlong	local02, local02
22cbc     FF 21 06 F5 | 	and	local02, #511
22cc0     10 15 02 F1 | 	add	arg02, local02
22cc4     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
22cc8     08 1E 06 F1 | 	add	local01, #8
22ccc     0F FB 61 FC | 	wrlong	result1, local01
22cd0     E4 FE 9F FD | 	jmp	#LR__3685
22cd4                 | LR__3687
22cd4                 | LR__3688
22cd4                 | ' 			}
22cd4                 | ' #line 3090 "ff.c"
22cd4                 | ' 			{
22cd4                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
22cd4                 | ' 			}
22cd4                 | ' 		}
22cd4                 | ' 	}
22cd4                 | ' 
22cd4                 | ' 	return res;
22cd4     0C 4E 05 F1 | 	add	fp, #12
22cd8     A7 FA 01 FB | 	rdlong	result1, fp
22cdc     0C 4E 85 F1 | 	sub	fp, #12
22ce0     A7 F0 03 F6 | 	mov	ptra, fp
22ce4     B2 00 A0 FD | 	call	#popregs_
22ce8                 | _fatfs_cc_follow_path_ret
22ce8     2D 00 64 FD | 	ret
22cec                 | 
22cec                 | _fatfs_cc_get_ldnumber
22cec     01 00 66 F6 | 	neg	_var01, #1
22cf0     09 03 0A FB | 	rdlong	_var02, arg01 wz
22cf4     01 05 02 F6 | 	mov	_var03, _var02
22cf8     01 FA 65 A6 |  if_e	neg	result1, #1
22cfc     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
22d00     97 10 48 FB | 	callpa	#(@LR__3691-@LR__3690)>>2,fcache_load_ptr_
22d04                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
22d04                 | LR__3690
22d04     02 07 C2 FA | 	rdbyte	_var04, _var03
22d08     03 FB E1 F8 | 	getbyte	result1, _var04, #0
22d0c     20 FA 15 F2 | 	cmp	result1, #32 wc
22d10     01 04 06 F1 | 	add	_var03, #1
22d14     03 09 02 36 |  if_ae	mov	_var05, _var04
22d18     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
22d1c     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
22d20     E0 FF 9F 1D |  if_a	jmp	#LR__3690
22d24                 | LR__3691
22d24     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
22d28     3A 06 0E F2 | 	cmp	_var04, #58 wz
22d2c     40 00 90 5D |  if_ne	jmp	#LR__3693
22d30     01 0A 06 F6 | 	mov	_var06, #1
22d34     01 09 C2 FA | 	rdbyte	_var05, _var02
22d38     30 08 16 F2 | 	cmp	_var05, #48 wc
22d3c     1C 00 90 CD |  if_b	jmp	#LR__3692
22d40     01 09 C2 FA | 	rdbyte	_var05, _var02
22d44     3A 08 16 F2 | 	cmp	_var05, #58 wc
22d48     01 0D 02 C6 |  if_b	mov	_var07, _var02
22d4c     02 0C 06 C1 |  if_b	add	_var07, #2
22d50     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
22d54     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
22d58     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
22d5c                 | LR__3692
22d5c     01 0A 56 F2 | 	cmps	_var06, #1 wc
22d60     05 01 02 C6 |  if_b	mov	_var01, _var06
22d64     09 05 62 CC |  if_b	wrlong	_var03, arg01
22d68                 | ' 			vol = i;
22d68                 | ' 			*path = tt;
22d68                 | ' 		}
22d68                 | ' 		return vol;
22d68     00 FB 01 F6 | 	mov	result1, _var01
22d6c     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
22d70                 | LR__3693
22d70                 | ' 	}
22d70                 | ' #line 3170 "ff.c"
22d70                 | ' 	vol = 0;
22d70                 | ' 
22d70                 | ' 	return vol;
22d70     00 FA 05 F6 | 	mov	result1, #0
22d74                 | _fatfs_cc_get_ldnumber_ret
22d74     2D 00 64 FD | 	ret
22d78                 | 
22d78                 | _fatfs_cc_check_fs
22d78     04 4A 05 F6 | 	mov	COUNT_, #4
22d7c     A8 00 A0 FD | 	call	#pushregs_
22d80     09 1F 02 F6 | 	mov	local01, arg01
22d84     03 1E 06 F1 | 	add	local01, #3
22d88     0F 01 48 FC | 	wrbyte	#0, local01
22d8c     2D 1E 06 F1 | 	add	local01, #45
22d90     FF FF FF FF 
22d94     0F FF 6B FC | 	wrlong	##-1, local01
22d98     30 1E 86 F1 | 	sub	local01, #48
22d9c     0F 13 02 F6 | 	mov	arg01, local01
22da0     18 D5 BF FD | 	call	#_fatfs_cc_move_window
22da4     00 FA 0D F2 | 	cmp	result1, #0 wz
22da8     04 FA 05 56 |  if_ne	mov	result1, #4
22dac     94 01 90 5D |  if_ne	jmp	#LR__3704
22db0     34 1E 06 F1 | 	add	local01, #52
22db4     0F 13 02 F6 | 	mov	arg01, local01
22db8     FE 13 06 F1 | 	add	arg01, #510
22dbc                 | ' {
22dbc                 | ' 
22dbc                 | ' 	return *((WORD*)ptr);
22dbc     09 21 E2 FA | 	rdword	local02, arg01
22dc0     0F 23 C2 FA | 	rdbyte	local03, local01
22dc4     34 1E 86 F1 | 	sub	local01, #52
22dc8     11 25 E2 F8 | 	getbyte	local04, local03, #0
22dcc     EB 24 0E F2 | 	cmp	local04, #235 wz
22dd0     11 17 02 56 |  if_ne	mov	arg03, local03
22dd4     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
22dd8     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
22ddc     11 23 E2 58 |  if_ne	getbyte	local03, local03, #0
22de0     E8 22 0E 52 |  if_ne	cmp	local03, #232 wz
22de4     44 01 90 5D |  if_ne	jmp	#LR__3703
22de8     10 25 32 F9 | 	getword	local04, local02, #0
22dec     55 00 00 FF 
22df0     55 24 0E F2 | 	cmp	local04, ##43605 wz
22df4     2C 00 90 5D |  if_ne	jmp	#LR__3700
22df8     34 1E 06 F1 | 	add	local01, #52
22dfc     0F 13 02 F6 | 	mov	arg01, local01
22e00     34 1E 86 F1 | 	sub	local01, #52
22e04     52 12 06 F1 | 	add	arg01, #82
22e08     41 01 00 FF 
22e0c     44 14 06 F6 | 	mov	arg02, ##@LR__4294
22e10     08 16 06 F6 | 	mov	arg03, #8
22e14     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
22e18     00 FA 0D F2 | 	cmp	result1, #0 wz
22e1c                 | ' 			return 0;
22e1c     00 FA 05 A6 |  if_e	mov	result1, #0
22e20     20 01 90 AD |  if_e	jmp	#LR__3704
22e24                 | LR__3700
22e24     34 1E 06 F1 | 	add	local01, #52
22e28     0F 13 02 F6 | 	mov	arg01, local01
22e2c     0B 12 06 F1 | 	add	arg01, #11
22e30                 | ' {
22e30                 | ' 
22e30                 | ' 	return *((WORD*)ptr);
22e30     09 FB E1 FA | 	rdword	result1, arg01
22e34     0D 1E 06 F1 | 	add	local01, #13
22e38     0F 23 C2 FA | 	rdbyte	local03, local01
22e3c     41 1E 86 F1 | 	sub	local01, #65
22e40     FD 24 32 F9 | 	getword	local04, result1, #0
22e44     FD 14 32 F9 | 	getword	arg02, result1, #0
22e48     01 14 86 F1 | 	sub	arg02, #1
22e4c     0A 25 CA F7 | 	test	local04, arg02 wz
22e50     D8 00 90 5D |  if_ne	jmp	#LR__3702
22e54     FD 14 32 F9 | 	getword	arg02, result1, #0
22e58     01 00 00 FF 
22e5c     00 14 16 F2 | 	cmp	arg02, ##512 wc
22e60     C8 00 90 CD |  if_b	jmp	#LR__3702
22e64     FD 14 32 F9 | 	getword	arg02, result1, #0
22e68     01 00 00 FF 
22e6c     01 14 16 F2 | 	cmp	arg02, ##513 wc
22e70     B8 00 90 3D |  if_ae	jmp	#LR__3702
22e74     11 13 02 F6 | 	mov	arg01, local03
22e78     07 12 4E F7 | 	zerox	arg01, #7 wz
22e7c     AC 00 90 AD |  if_e	jmp	#LR__3702
22e80     11 13 E2 F8 | 	getbyte	arg01, local03, #0
22e84     11 23 E2 F8 | 	getbyte	local03, local03, #0
22e88     01 22 86 F1 | 	sub	local03, #1
22e8c     11 13 CA F7 | 	test	arg01, local03 wz
22e90     98 00 90 5D |  if_ne	jmp	#LR__3702
22e94     34 1E 06 F1 | 	add	local01, #52
22e98     0F 13 02 F6 | 	mov	arg01, local01
22e9c     34 1E 86 F1 | 	sub	local01, #52
22ea0     0E 12 06 F1 | 	add	arg01, #14
22ea4                 | ' {
22ea4                 | ' 
22ea4                 | ' 	return *((WORD*)ptr);
22ea4     09 FB E9 FA | 	rdword	result1, arg01 wz
22ea8     80 00 90 AD |  if_e	jmp	#LR__3702
22eac     44 1E 06 F1 | 	add	local01, #68
22eb0     0F 13 C2 FA | 	rdbyte	arg01, local01
22eb4     44 1E 86 F1 | 	sub	local01, #68
22eb8     01 12 86 F1 | 	sub	arg01, #1
22ebc     02 12 16 F2 | 	cmp	arg01, #2 wc
22ec0     68 00 90 3D |  if_ae	jmp	#LR__3702
22ec4     34 1E 06 F1 | 	add	local01, #52
22ec8     0F 13 02 F6 | 	mov	arg01, local01
22ecc     34 1E 86 F1 | 	sub	local01, #52
22ed0     11 12 06 F1 | 	add	arg01, #17
22ed4                 | ' {
22ed4                 | ' 
22ed4                 | ' 	return *((WORD*)ptr);
22ed4     09 FB E9 FA | 	rdword	result1, arg01 wz
22ed8     50 00 90 AD |  if_e	jmp	#LR__3702
22edc     34 1E 06 F1 | 	add	local01, #52
22ee0     0F 13 02 F6 | 	mov	arg01, local01
22ee4     34 1E 86 F1 | 	sub	local01, #52
22ee8     13 12 06 F1 | 	add	arg01, #19
22eec                 | ' {
22eec                 | ' 
22eec                 | ' 	return *((WORD*)ptr);
22eec     09 FB E1 FA | 	rdword	result1, arg01
22ef0     FD 22 32 F9 | 	getword	local03, result1, #0
22ef4     80 22 16 F2 | 	cmp	local03, #128 wc
22ef8     20 00 90 3D |  if_ae	jmp	#LR__3701
22efc     34 1E 06 F1 | 	add	local01, #52
22f00     0F 13 02 F6 | 	mov	arg01, local01
22f04     34 1E 86 F1 | 	sub	local01, #52
22f08     20 12 06 F1 | 	add	arg01, #32
22f0c                 | ' {
22f0c                 | ' 
22f0c                 | ' 	return *((DWORD*)ptr);
22f0c     09 FB 01 FB | 	rdlong	result1, arg01
22f10     80 00 00 FF 
22f14     00 FA 15 F2 | 	cmp	result1, ##65536 wc
22f18     10 00 90 CD |  if_b	jmp	#LR__3702
22f1c                 | LR__3701
22f1c     4A 1E 06 F1 | 	add	local01, #74
22f20                 | ' {
22f20                 | ' 
22f20                 | ' 	return *((WORD*)ptr);
22f20     0F FB E9 FA | 	rdword	result1, local01 wz
22f24                 | ' 			&& b != 0 && (b & (b - 1)) == 0
22f24                 | ' 			&& ld_word(fs->win +  14 ) != 0
22f24                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
22f24                 | ' 			&& ld_word(fs->win +  17 ) != 0
22f24                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
22f24                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
22f24                 | ' 				return 0;
22f24     00 FA 05 56 |  if_ne	mov	result1, #0
22f28     18 00 90 5D |  if_ne	jmp	#LR__3704
22f2c                 | LR__3702
22f2c                 | LR__3703
22f2c                 | ' 		}
22f2c                 | ' 	}
22f2c                 | ' 	return sign == 0xAA55 ? 2 : 3;
22f2c     10 23 32 F9 | 	getword	local03, local02, #0
22f30     55 00 00 FF 
22f34     55 22 0E F2 | 	cmp	local03, ##43605 wz
22f38     02 24 06 A6 |  if_e	mov	local04, #2
22f3c     03 24 06 56 |  if_ne	mov	local04, #3
22f40     12 FB 01 F6 | 	mov	result1, local04
22f44                 | LR__3704
22f44     A7 F0 03 F6 | 	mov	ptra, fp
22f48     B2 00 A0 FD | 	call	#popregs_
22f4c                 | _fatfs_cc_check_fs_ret
22f4c     2D 00 64 FD | 	ret
22f50                 | 
22f50                 | _fatfs_cc_find_volume
22f50     05 4A 05 F6 | 	mov	COUNT_, #5
22f54     A8 00 A0 FD | 	call	#pushregs_
22f58     24 F0 07 F1 | 	add	ptra, #36
22f5c     09 1F 02 F6 | 	mov	local01, arg01
22f60     0A 21 02 F6 | 	mov	local02, arg02
22f64     0F 13 02 F6 | 	mov	arg01, local01
22f68     00 14 06 F6 | 	mov	arg02, #0
22f6c     08 FE BF FD | 	call	#_fatfs_cc_check_fs
22f70     02 FA 0D F2 | 	cmp	result1, #2 wz
22f74     0C 00 90 AD |  if_e	jmp	#LR__3710
22f78     03 FA 15 F2 | 	cmp	result1, #3 wc
22f7c     00 20 0E C2 |  if_b	cmp	local02, #0 wz
22f80     D0 00 90 BD |  if_nc_or_z	jmp	#LR__3718
22f84                 | LR__3710
22f84                 | ' 	for (i = 0; i < 4; i++) {
22f84     00 22 06 F6 | 	mov	local03, #0
22f88     97 26 48 FB | 	callpa	#(@LR__3712-@LR__3711)>>2,fcache_load_ptr_
22f8c                 | LR__3711
22f8c     04 22 16 F2 | 	cmp	local03, #4 wc
22f90     44 00 90 3D |  if_ae	jmp	#LR__3713
22f94     11 25 02 F6 | 	mov	local04, local03
22f98     02 24 66 F0 | 	shl	local04, #2
22f9c     14 4E 05 F1 | 	add	fp, #20
22fa0     A7 24 02 F1 | 	add	local04, fp
22fa4     34 1E 06 F1 | 	add	local01, #52
22fa8     0F 13 02 F6 | 	mov	arg01, local01
22fac     34 1E 86 F1 | 	sub	local01, #52
22fb0     BE 13 06 F1 | 	add	arg01, #446
22fb4     11 15 02 F6 | 	mov	arg02, local03
22fb8     04 14 66 F0 | 	shl	arg02, #4
22fbc     0A 13 02 F1 | 	add	arg01, arg02
22fc0     08 12 06 F1 | 	add	arg01, #8
22fc4                 | ' {
22fc4                 | ' 
22fc4                 | ' 	return *((DWORD*)ptr);
22fc4     09 FB 01 FB | 	rdlong	result1, arg01
22fc8     14 4E 85 F1 | 	sub	fp, #20
22fcc     12 FB 61 FC | 	wrlong	result1, local04
22fd0     01 22 06 F1 | 	add	local03, #1
22fd4     B4 FF 9F FD | 	jmp	#LR__3711
22fd8                 | LR__3712
22fd8                 | LR__3713
22fd8     00 20 0E F2 | 	cmp	local02, #0 wz
22fdc     10 25 02 56 |  if_ne	mov	local04, local02
22fe0     01 24 86 51 |  if_ne	sub	local04, #1
22fe4     00 24 06 A6 |  if_e	mov	local04, #0
22fe8     12 23 02 F6 | 	mov	local03, local04
22fec                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
22fec                 | ' 	}
22fec                 | ' 	i = part ? part - 1 : 0;
22fec                 | ' 	do {
22fec                 | LR__3714
22fec     11 25 02 F6 | 	mov	local04, local03
22ff0     02 24 66 F0 | 	shl	local04, #2
22ff4     14 4E 05 F1 | 	add	fp, #20
22ff8     A7 24 02 F1 | 	add	local04, fp
22ffc     12 25 0A FB | 	rdlong	local04, local04 wz
23000     14 4E 85 F1 | 	sub	fp, #20
23004     28 00 90 AD |  if_e	jmp	#LR__3715
23008     11 25 02 F6 | 	mov	local04, local03
2300c     02 24 66 F0 | 	shl	local04, #2
23010     14 4E 05 F1 | 	add	fp, #20
23014     A7 24 02 F1 | 	add	local04, fp
23018     12 15 02 FB | 	rdlong	arg02, local04
2301c     0F 13 02 F6 | 	mov	arg01, local01
23020     14 4E 85 F1 | 	sub	fp, #20
23024     50 FD BF FD | 	call	#_fatfs_cc_check_fs
23028     FD 24 02 F6 | 	mov	local04, result1
2302c     04 00 90 FD | 	jmp	#LR__3716
23030                 | LR__3715
23030     03 24 06 F6 | 	mov	local04, #3
23034                 | LR__3716
23034     12 27 02 F6 | 	mov	local05, local04
23038     00 20 0E F2 | 	cmp	local02, #0 wz
2303c     02 26 16 A2 |  if_e	cmp	local05, #2 wc
23040     0C 00 90 8D |  if_c_and_z	jmp	#LR__3717
23044     01 22 06 A1 |  if_e	add	local03, #1
23048     04 22 16 A2 |  if_e	cmp	local03, #4 wc
2304c     9C FF 9F 8D |  if_c_and_z	jmp	#LR__3714
23050                 | LR__3717
23050                 | ' 	return fmt;
23050     13 FB 01 F6 | 	mov	result1, local05
23054                 | LR__3718
23054     A7 F0 03 F6 | 	mov	ptra, fp
23058     B2 00 A0 FD | 	call	#popregs_
2305c                 | _fatfs_cc_find_volume_ret
2305c     2D 00 64 FD | 	ret
23060                 | 
23060                 | _fatfs_cc_mount_volume
23060     0B 4A 05 F6 | 	mov	COUNT_, #11
23064     A8 00 A0 FD | 	call	#pushregs_
23068     0A 1F 02 F6 | 	mov	local01, arg02
2306c     0B 21 02 F6 | 	mov	local02, arg03
23070     0F 01 68 FC | 	wrlong	#0, local01
23074     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
23078     FD 22 02 F6 | 	mov	local03, result1
2307c     00 22 56 F2 | 	cmps	local03, #0 wc
23080     0B FA 05 C6 |  if_b	mov	result1, #11
23084     3C 05 90 CD |  if_b	jmp	#LR__3730
23088     11 17 02 F6 | 	mov	arg03, local03
2308c     02 16 66 F0 | 	shl	arg03, #2
23090     F2 16 02 F1 | 	add	arg03, objptr
23094     0B 25 0A FB | 	rdlong	local04, arg03 wz
23098     0C FA 05 A6 |  if_e	mov	result1, #12
2309c     24 05 90 AD |  if_e	jmp	#LR__3730
230a0     0F 25 62 FC | 	wrlong	local04, local01
230a4     10 21 E2 F8 | 	getbyte	local02, local02, #0
230a8     FE 20 06 F5 | 	and	local02, #254
230ac     12 17 CA FA | 	rdbyte	arg03, local04 wz
230b0     4C 00 90 AD |  if_e	jmp	#LR__3721
230b4     01 24 06 F1 | 	add	local04, #1
230b8     12 13 CA FA | 	rdbyte	arg01, local04 wz
230bc     01 24 86 F1 | 	sub	local04, #1
230c0     01 FA 05 56 |  if_ne	mov	result1, #1
230c4                 | ' 
230c4                 | ' 	return Stat;
230c4     01 00 00 AF 
230c8     20 E4 05 A1 |  if_e	add	objptr, ##544
230cc     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
230d0     01 00 00 AF 
230d4     20 E4 85 A1 |  if_e	sub	objptr, ##544
230d8     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
230dc     01 16 CE F7 | 	test	arg03, #1 wz
230e0     1C 00 90 5D |  if_ne	jmp	#LR__3720
230e4     00 20 0E F2 | 	cmp	local02, #0 wz
230e8     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
230ec     04 FA CD 57 |  if_ne	test	result1, #4 wz
230f0                 | ' 				return FR_WRITE_PROTECTED;
230f0     0A FA 05 56 |  if_ne	mov	result1, #10
230f4     CC 04 90 5D |  if_ne	jmp	#LR__3730
230f8                 | ' 			}
230f8                 | ' 			return FR_OK;
230f8     00 FA 05 F6 | 	mov	result1, #0
230fc     C4 04 90 FD | 	jmp	#LR__3730
23100                 | LR__3720
23100                 | LR__3721
23100     12 01 48 FC | 	wrbyte	#0, local04
23104     01 24 06 F1 | 	add	local04, #1
23108     12 23 42 FC | 	wrbyte	local03, local04
2310c     12 13 C2 FA | 	rdbyte	arg01, local04
23110     01 24 86 F1 | 	sub	local04, #1
23114     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
23118     FD 16 02 F6 | 	mov	arg03, result1
2311c     0B 27 E2 F8 | 	getbyte	local05, arg03, #0
23120     01 26 CE F7 | 	test	local05, #1 wz
23124                 | ' 		return FR_NOT_READY;
23124     03 FA 05 56 |  if_ne	mov	result1, #3
23128     98 04 90 5D |  if_ne	jmp	#LR__3730
2312c     00 20 0E F2 | 	cmp	local02, #0 wz
23130     0B 27 02 56 |  if_ne	mov	local05, arg03
23134     13 27 E2 58 |  if_ne	getbyte	local05, local05, #0
23138     04 26 CE 57 |  if_ne	test	local05, #4 wz
2313c                 | ' 		return FR_WRITE_PROTECTED;
2313c     0A FA 05 56 |  if_ne	mov	result1, #10
23140     80 04 90 5D |  if_ne	jmp	#LR__3730
23144     12 13 02 F6 | 	mov	arg01, local04
23148     00 14 06 F6 | 	mov	arg02, #0
2314c     00 FE BF FD | 	call	#_fatfs_cc_find_volume
23150     FD 12 02 F6 | 	mov	arg01, result1
23154     04 12 0E F2 | 	cmp	arg01, #4 wz
23158     01 FA 05 A6 |  if_e	mov	result1, #1
2315c     64 04 90 AD |  if_e	jmp	#LR__3730
23160     02 12 16 F2 | 	cmp	arg01, #2 wc
23164     0D FA 05 36 |  if_ae	mov	result1, #13
23168     58 04 90 3D |  if_ae	jmp	#LR__3730
2316c     30 24 06 F1 | 	add	local04, #48
23170     12 29 02 FB | 	rdlong	local06, local04
23174     04 24 06 F1 | 	add	local04, #4
23178     12 13 02 F6 | 	mov	arg01, local04
2317c     34 24 86 F1 | 	sub	local04, #52
23180     0B 12 06 F1 | 	add	arg01, #11
23184                 | ' {
23184                 | ' 
23184                 | ' 	return *((WORD*)ptr);
23184     09 FB E1 FA | 	rdword	result1, arg01
23188     01 00 00 FF 
2318c     00 FA 0D F2 | 	cmp	result1, ##512 wz
23190     0D FA 05 56 |  if_ne	mov	result1, #13
23194     2C 04 90 5D |  if_ne	jmp	#LR__3730
23198     34 24 06 F1 | 	add	local04, #52
2319c     12 13 02 F6 | 	mov	arg01, local04
231a0     34 24 86 F1 | 	sub	local04, #52
231a4     16 12 06 F1 | 	add	arg01, #22
231a8                 | ' {
231a8                 | ' 
231a8                 | ' 	return *((WORD*)ptr);
231a8     09 FB E1 FA | 	rdword	result1, arg01
231ac     FD 2A 0A F6 | 	mov	local07, result1 wz
231b0     18 00 90 5D |  if_ne	jmp	#LR__3722
231b4     34 24 06 F1 | 	add	local04, #52
231b8     12 13 02 F6 | 	mov	arg01, local04
231bc     34 24 86 F1 | 	sub	local04, #52
231c0     24 12 06 F1 | 	add	arg01, #36
231c4                 | ' {
231c4                 | ' 
231c4                 | ' 	return *((DWORD*)ptr);
231c4     09 FB 01 FB | 	rdlong	result1, arg01
231c8     FD 2A 02 F6 | 	mov	local07, result1
231cc                 | LR__3722
231cc     1C 24 06 F1 | 	add	local04, #28
231d0     12 2B 62 FC | 	wrlong	local07, local04
231d4     28 24 06 F1 | 	add	local04, #40
231d8     12 27 C2 FA | 	rdbyte	local05, local04
231dc     42 24 86 F1 | 	sub	local04, #66
231e0     12 27 42 FC | 	wrbyte	local05, local04
231e4     12 27 C2 FA | 	rdbyte	local05, local04
231e8     02 24 86 F1 | 	sub	local04, #2
231ec     01 26 0E F2 | 	cmp	local05, #1 wz
231f0     02 24 06 51 |  if_ne	add	local04, #2
231f4     12 27 C2 5A |  if_ne	rdbyte	local05, local04
231f8     02 24 86 51 |  if_ne	sub	local04, #2
231fc     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
23200     0D FA 05 56 |  if_ne	mov	result1, #13
23204     BC 03 90 5D |  if_ne	jmp	#LR__3730
23208     02 24 06 F1 | 	add	local04, #2
2320c     12 27 C2 FA | 	rdbyte	local05, local04
23210     13 2B 02 FD | 	qmul	local07, local05
23214     3F 24 06 F1 | 	add	local04, #63
23218     12 27 C2 FA | 	rdbyte	local05, local04
2321c     37 24 86 F1 | 	sub	local04, #55
23220     12 27 52 FC | 	wrword	local05, local04
23224     12 27 EA FA | 	rdword	local05, local04 wz
23228     0A 24 86 F1 | 	sub	local04, #10
2322c     18 2A 62 FD | 	getqx	local07
23230     20 00 90 AD |  if_e	jmp	#LR__3723
23234     0A 24 06 F1 | 	add	local04, #10
23238     12 27 E2 FA | 	rdword	local05, local04
2323c     13 23 32 F9 | 	getword	local03, local05, #0
23240     0A 24 86 F1 | 	sub	local04, #10
23244     13 27 32 F9 | 	getword	local05, local05, #0
23248     01 26 86 F1 | 	sub	local05, #1
2324c     13 23 CA F7 | 	test	local03, local05 wz
23250     08 00 90 AD |  if_e	jmp	#LR__3724
23254                 | LR__3723
23254     0D FA 05 F6 | 	mov	result1, #13
23258     68 03 90 FD | 	jmp	#LR__3730
2325c                 | LR__3724
2325c     34 24 06 F1 | 	add	local04, #52
23260     12 13 02 F6 | 	mov	arg01, local04
23264     11 12 06 F1 | 	add	arg01, #17
23268                 | ' {
23268                 | ' 
23268                 | ' 	return *((WORD*)ptr);
23268     09 FB E1 FA | 	rdword	result1, arg01
2326c     2C 24 86 F1 | 	sub	local04, #44
23270     12 FB 51 FC | 	wrword	result1, local04
23274     12 27 E2 FA | 	rdword	local05, local04
23278     08 24 86 F1 | 	sub	local04, #8
2327c     13 13 52 F6 | 	abs	arg01, local05 wc
23280     09 13 42 F8 | 	getnib	arg01, arg01, #0
23284     09 13 8A F6 | 	negc	arg01, arg01 wz
23288     0D FA 05 56 |  if_ne	mov	result1, #13
2328c     34 03 90 5D |  if_ne	jmp	#LR__3730
23290     34 24 06 F1 | 	add	local04, #52
23294     12 13 02 F6 | 	mov	arg01, local04
23298     34 24 86 F1 | 	sub	local04, #52
2329c     13 12 06 F1 | 	add	arg01, #19
232a0                 | ' {
232a0                 | ' 
232a0                 | ' 	return *((WORD*)ptr);
232a0     09 FB E1 FA | 	rdword	result1, arg01
232a4     FD 2C 0A F6 | 	mov	local08, result1 wz
232a8     34 24 06 A1 |  if_e	add	local04, #52
232ac     12 13 02 A6 |  if_e	mov	arg01, local04
232b0     34 24 86 A1 |  if_e	sub	local04, #52
232b4     20 12 06 A1 |  if_e	add	arg01, #32
232b8                 | ' {
232b8                 | ' 
232b8                 | ' 	return *((DWORD*)ptr);
232b8     09 2D 02 AB |  if_e	rdlong	local08, arg01
232bc     34 24 06 F1 | 	add	local04, #52
232c0     12 13 02 F6 | 	mov	arg01, local04
232c4     34 24 86 F1 | 	sub	local04, #52
232c8     0E 12 06 F1 | 	add	arg01, #14
232cc                 | ' {
232cc                 | ' 
232cc                 | ' 	return *((WORD*)ptr);
232cc     09 FB E1 FA | 	rdword	result1, arg01
232d0     FD 12 02 F6 | 	mov	arg01, result1
232d4     09 27 02 F6 | 	mov	local05, arg01
232d8     0F 26 4E F7 | 	zerox	local05, #15 wz
232dc     0D FA 05 A6 |  if_e	mov	result1, #13
232e0     E0 02 90 AD |  if_e	jmp	#LR__3730
232e4     09 2F 32 F9 | 	getword	local09, arg01, #0
232e8     15 2F 02 F1 | 	add	local09, local07
232ec     08 24 06 F1 | 	add	local04, #8
232f0     12 27 E2 FA | 	rdword	local05, local04
232f4     08 24 86 F1 | 	sub	local04, #8
232f8     13 27 52 F6 | 	abs	local05, local05 wc
232fc     04 26 46 F0 | 	shr	local05, #4
23300     13 2F 82 F3 | 	sumc	local09, local05
23304     17 2D 12 F2 | 	cmp	local08, local09 wc
23308     0D FA 05 C6 |  if_b	mov	result1, #13
2330c     B4 02 90 CD |  if_b	jmp	#LR__3730
23310     17 2D 82 F1 | 	sub	local08, local09
23314     0A 24 06 F1 | 	add	local04, #10
23318     12 27 E2 FA | 	rdword	local05, local04
2331c     13 2D 12 FD | 	qdiv	local08, local05
23320     0A 24 86 F1 | 	sub	local04, #10
23324     18 26 62 FD | 	getqx	local05
23328     00 26 0E F2 | 	cmp	local05, #0 wz
2332c     0D FA 05 A6 |  if_e	mov	result1, #13
23330     90 02 90 AD |  if_e	jmp	#LR__3730
23334     00 30 06 F6 | 	mov	local10, #0
23338     FF FF 07 FF 
2333c     F6 27 16 F2 | 	cmp	local05, ##268435446 wc
23340     03 30 06 C6 |  if_b	mov	local10, #3
23344     7F 00 00 FF 
23348     F6 27 16 F2 | 	cmp	local05, ##65526 wc
2334c     02 30 06 C6 |  if_b	mov	local10, #2
23350     07 00 00 FF 
23354     F6 27 16 F2 | 	cmp	local05, ##4086 wc
23358     01 30 06 C6 |  if_b	mov	local10, #1
2335c     00 30 0E F2 | 	cmp	local10, #0 wz
23360     0D FA 05 A6 |  if_e	mov	result1, #13
23364     5C 02 90 AD |  if_e	jmp	#LR__3730
23368     02 26 06 F1 | 	add	local05, #2
2336c     18 24 06 F1 | 	add	local04, #24
23370     12 27 62 FC | 	wrlong	local05, local04
23374     08 24 06 F1 | 	add	local04, #8
23378     12 29 62 FC | 	wrlong	local06, local04
2337c     14 27 02 F6 | 	mov	local05, local06
23380     09 13 32 F9 | 	getword	arg01, arg01, #0
23384     09 27 02 F1 | 	add	local05, arg01
23388     04 24 06 F1 | 	add	local04, #4
2338c     12 27 62 FC | 	wrlong	local05, local04
23390     14 27 02 F6 | 	mov	local05, local06
23394     17 27 02 F1 | 	add	local05, local09
23398     08 24 06 F1 | 	add	local04, #8
2339c     12 27 62 FC | 	wrlong	local05, local04
233a0     2C 24 86 F1 | 	sub	local04, #44
233a4     03 30 0E F2 | 	cmp	local10, #3 wz
233a8     5C 00 90 5D |  if_ne	jmp	#LR__3725
233ac     34 24 06 F1 | 	add	local04, #52
233b0     12 13 02 F6 | 	mov	arg01, local04
233b4     34 24 86 F1 | 	sub	local04, #52
233b8     2A 12 06 F1 | 	add	arg01, #42
233bc                 | ' {
233bc                 | ' 
233bc                 | ' 	return *((WORD*)ptr);
233bc     09 FB E9 FA | 	rdword	result1, arg01 wz
233c0     0D FA 05 56 |  if_ne	mov	result1, #13
233c4     FC 01 90 5D |  if_ne	jmp	#LR__3730
233c8     08 24 06 F1 | 	add	local04, #8
233cc     12 27 EA FA | 	rdword	local05, local04 wz
233d0     08 24 86 F1 | 	sub	local04, #8
233d4     0D FA 05 56 |  if_ne	mov	result1, #13
233d8     E8 01 90 5D |  if_ne	jmp	#LR__3730
233dc     34 24 06 F1 | 	add	local04, #52
233e0     12 13 02 F6 | 	mov	arg01, local04
233e4     2C 12 06 F1 | 	add	arg01, #44
233e8                 | ' {
233e8                 | ' 
233e8                 | ' 	return *((DWORD*)ptr);
233e8     09 FB 01 FB | 	rdlong	result1, arg01
233ec     0C 24 86 F1 | 	sub	local04, #12
233f0     12 FB 61 FC | 	wrlong	result1, local04
233f4     10 24 86 F1 | 	sub	local04, #16
233f8     12 33 02 FB | 	rdlong	local11, local04
233fc     18 24 86 F1 | 	sub	local04, #24
23400     02 32 66 F0 | 	shl	local11, #2
23404     6C 00 90 FD | 	jmp	#LR__3727
23408                 | LR__3725
23408     08 24 06 F1 | 	add	local04, #8
2340c     12 27 EA FA | 	rdword	local05, local04 wz
23410     08 24 86 F1 | 	sub	local04, #8
23414     0D FA 05 A6 |  if_e	mov	result1, #13
23418     A8 01 90 AD |  if_e	jmp	#LR__3730
2341c     24 24 06 F1 | 	add	local04, #36
23420     12 27 02 FB | 	rdlong	local05, local04
23424     15 27 02 F1 | 	add	local05, local07
23428     04 24 06 F1 | 	add	local04, #4
2342c     12 27 62 FC | 	wrlong	local05, local04
23430     28 24 86 F1 | 	sub	local04, #40
23434     02 30 0E F2 | 	cmp	local10, #2 wz
23438     18 24 06 A1 |  if_e	add	local04, #24
2343c     12 27 02 AB |  if_e	rdlong	local05, local04
23440     18 24 86 A1 |  if_e	sub	local04, #24
23444     01 26 66 A0 |  if_e	shl	local05, #1
23448     24 00 90 AD |  if_e	jmp	#LR__3726
2344c     18 24 06 F1 | 	add	local04, #24
23450     12 33 02 FB | 	rdlong	local11, local04
23454     19 27 02 F6 | 	mov	local05, local11
23458     01 26 66 F0 | 	shl	local05, #1
2345c     19 27 02 F1 | 	add	local05, local11
23460     01 26 46 F0 | 	shr	local05, #1
23464     18 24 86 F1 | 	sub	local04, #24
23468     01 32 06 F5 | 	and	local11, #1
2346c     19 27 02 F1 | 	add	local05, local11
23470                 | LR__3726
23470     13 33 02 F6 | 	mov	local11, local05
23474                 | LR__3727
23474     FF 33 06 F1 | 	add	local11, #511
23478     09 32 46 F0 | 	shr	local11, #9
2347c     1C 24 06 F1 | 	add	local04, #28
23480     12 17 02 FB | 	rdlong	arg03, local04
23484     1C 24 86 F1 | 	sub	local04, #28
23488     19 17 12 F2 | 	cmp	arg03, local11 wc
2348c     0D FA 05 C6 |  if_b	mov	result1, #13
23490     30 01 90 CD |  if_b	jmp	#LR__3730
23494     14 24 06 F1 | 	add	local04, #20
23498     FF FF FF FF 
2349c     12 FF 6B FC | 	wrlong	##-1, local04
234a0     04 24 86 F1 | 	sub	local04, #4
234a4     FF FF FF FF 
234a8     12 FF 6B FC | 	wrlong	##-1, local04
234ac     0C 24 86 F1 | 	sub	local04, #12
234b0     12 01 49 FC | 	wrbyte	#128, local04
234b4     04 24 86 F1 | 	sub	local04, #4
234b8     03 30 0E F2 | 	cmp	local10, #3 wz
234bc     D0 00 90 5D |  if_ne	jmp	#LR__3729
234c0     34 24 06 F1 | 	add	local04, #52
234c4     12 13 02 F6 | 	mov	arg01, local04
234c8     34 24 86 F1 | 	sub	local04, #52
234cc     30 12 06 F1 | 	add	arg01, #48
234d0                 | ' {
234d0                 | ' 
234d0                 | ' 	return *((WORD*)ptr);
234d0     09 FB E1 FA | 	rdword	result1, arg01
234d4     FD 26 32 F9 | 	getword	local05, result1, #0
234d8     01 26 0E F2 | 	cmp	local05, #1 wz
234dc     B0 00 90 5D |  if_ne	jmp	#LR__3729
234e0     01 28 06 F1 | 	add	local06, #1
234e4     12 13 02 F6 | 	mov	arg01, local04
234e8     14 15 02 F6 | 	mov	arg02, local06
234ec     CC CD BF FD | 	call	#_fatfs_cc_move_window
234f0     00 FA 0D F2 | 	cmp	result1, #0 wz
234f4     98 00 90 5D |  if_ne	jmp	#LR__3729
234f8     04 24 06 F1 | 	add	local04, #4
234fc     12 01 48 FC | 	wrbyte	#0, local04
23500     30 24 06 F1 | 	add	local04, #48
23504     12 13 02 F6 | 	mov	arg01, local04
23508     34 24 86 F1 | 	sub	local04, #52
2350c     FE 13 06 F1 | 	add	arg01, #510
23510                 | ' {
23510                 | ' 
23510                 | ' 	return *((WORD*)ptr);
23510     09 FB E1 FA | 	rdword	result1, arg01
23514     FD 26 32 F9 | 	getword	local05, result1, #0
23518     55 00 00 FF 
2351c     55 26 0E F2 | 	cmp	local05, ##43605 wz
23520     34 24 06 A1 |  if_e	add	local04, #52
23524     12 13 02 A6 |  if_e	mov	arg01, local04
23528     34 24 86 A1 |  if_e	sub	local04, #52
2352c                 | ' {
2352c                 | ' 
2352c                 | ' 	return *((DWORD*)ptr);
2352c     09 FB 01 AB |  if_e	rdlong	result1, arg01
23530     A9 B0 20 AF 
23534     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
23538     54 00 90 5D |  if_ne	jmp	#LR__3728
2353c     34 24 06 F1 | 	add	local04, #52
23540     12 13 02 F6 | 	mov	arg01, local04
23544     34 24 86 F1 | 	sub	local04, #52
23548     E4 13 06 F1 | 	add	arg01, #484
2354c                 | ' {
2354c                 | ' 
2354c                 | ' 	return *((DWORD*)ptr);
2354c     09 FB 01 FB | 	rdlong	result1, arg01
23550     B9 A0 30 FF 
23554     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
23558     34 00 90 5D |  if_ne	jmp	#LR__3728
2355c     34 24 06 F1 | 	add	local04, #52
23560     12 13 02 F6 | 	mov	arg01, local04
23564     E8 13 06 F1 | 	add	arg01, #488
23568                 | ' {
23568                 | ' 
23568                 | ' 	return *((DWORD*)ptr);
23568     09 FB 01 FB | 	rdlong	result1, arg01
2356c     20 24 86 F1 | 	sub	local04, #32
23570     12 FB 61 FC | 	wrlong	result1, local04
23574     20 24 06 F1 | 	add	local04, #32
23578     12 13 02 F6 | 	mov	arg01, local04
2357c     EC 13 06 F1 | 	add	arg01, #492
23580                 | ' {
23580                 | ' 
23580                 | ' 	return *((DWORD*)ptr);
23580     09 FB 01 FB | 	rdlong	result1, arg01
23584     24 24 86 F1 | 	sub	local04, #36
23588     12 FB 61 FC | 	wrlong	result1, local04
2358c     10 24 86 F1 | 	sub	local04, #16
23590                 | LR__3728
23590                 | LR__3729
23590     12 31 42 FC | 	wrbyte	local10, local04
23594     04 E4 05 F1 | 	add	objptr, #4
23598     F2 26 E2 FA | 	rdword	local05, objptr
2359c     01 26 06 F1 | 	add	local05, #1
235a0     F2 26 52 FC | 	wrword	local05, objptr
235a4     F2 32 E2 FA | 	rdword	local11, objptr
235a8     06 24 06 F1 | 	add	local04, #6
235ac     12 33 52 FC | 	wrword	local11, local04
235b0     04 E4 05 F1 | 	add	objptr, #4
235b4     06 24 06 F1 | 	add	local04, #6
235b8     12 E5 61 FC | 	wrlong	objptr, local04
235bc                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
235bc                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
235bc                 | ' 			{
235bc                 | ' 
235bc                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
235bc                 | ' 
235bc                 | ' 
235bc                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
235bc                 | ' 
235bc                 | ' 			}
235bc                 | ' 		}
235bc                 | ' 
235bc                 | ' 
235bc                 | ' 	}
235bc                 | ' 
235bc                 | ' 	fs->fs_type = (BYTE)fmt;
235bc                 | ' 	fs->id = ++Fsid;
235bc                 | ' 
235bc                 | ' 	fs->lfnbuf = LfnBuf;
235bc                 | ' #line 3567 "ff.c"
235bc                 | ' 	return FR_OK;
235bc     00 FA 05 F6 | 	mov	result1, #0
235c0     08 E4 85 F1 | 	sub	objptr, #8
235c4                 | LR__3730
235c4     A7 F0 03 F6 | 	mov	ptra, fp
235c8     B2 00 A0 FD | 	call	#popregs_
235cc                 | _fatfs_cc_mount_volume_ret
235cc     2D 00 64 FD | 	ret
235d0                 | 
235d0                 | _fatfs_cc_validate
235d0     09 01 0A F6 | 	mov	_var01, arg01 wz
235d4     09 02 06 F6 | 	mov	_var02, #9
235d8     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
235dc     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
235e0     50 00 90 AD |  if_e	jmp	#LR__3740
235e4     04 00 06 F1 | 	add	_var01, #4
235e8     00 07 E2 FA | 	rdword	_var04, _var01
235ec     04 00 86 F1 | 	sub	_var01, #4
235f0     00 13 02 FB | 	rdlong	arg01, _var01
235f4     06 12 06 F1 | 	add	arg01, #6
235f8     09 FB E1 FA | 	rdword	result1, arg01
235fc     FD 06 0A F2 | 	cmp	_var04, result1 wz
23600     30 00 90 5D |  if_ne	jmp	#LR__3740
23604     00 07 02 FB | 	rdlong	_var04, _var01
23608     01 06 06 F1 | 	add	_var04, #1
2360c     03 13 CA FA | 	rdbyte	arg01, _var04 wz
23610     01 FA 05 56 |  if_ne	mov	result1, #1
23614                 | ' 
23614                 | ' 	return Stat;
23614     01 00 00 AF 
23618     20 E4 05 A1 |  if_e	add	objptr, ##544
2361c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
23620     01 00 00 AF 
23624     20 E4 85 A1 |  if_e	sub	objptr, ##544
23628     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
2362c     01 04 CE F7 | 	test	_var03, #1 wz
23630     00 02 06 A6 |  if_e	mov	_var02, #0
23634                 | LR__3740
23634     00 02 0E F2 | 	cmp	_var02, #0 wz
23638     00 05 02 AB |  if_e	rdlong	_var03, _var01
2363c     00 04 06 56 |  if_ne	mov	_var03, #0
23640     0A 05 62 FC | 	wrlong	_var03, arg02
23644                 | ' 			res = FR_OK;
23644                 | ' 		}
23644                 | ' 
23644                 | ' 	}
23644                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
23644                 | ' 	return res;
23644     01 FB 01 F6 | 	mov	result1, _var02
23648                 | _fatfs_cc_validate_ret
23648     2D 00 64 FD | 	ret
2364c                 | 
2364c                 | _fatfs_cc_f_mount
2364c     01 4A 05 F6 | 	mov	COUNT_, #1
23650     A8 00 A0 FD | 	call	#pushregs_
23654     20 F0 07 F1 | 	add	ptra, #32
23658     04 4E 05 F1 | 	add	fp, #4
2365c     A7 12 62 FC | 	wrlong	arg01, fp
23660     04 4E 05 F1 | 	add	fp, #4
23664     A7 14 62 FC | 	wrlong	arg02, fp
23668     04 4E 05 F1 | 	add	fp, #4
2366c     A7 16 42 FC | 	wrbyte	arg03, fp
23670     04 4E 85 F1 | 	sub	fp, #4
23674     A7 16 02 FB | 	rdlong	arg03, fp
23678     14 4E 05 F1 | 	add	fp, #20
2367c     A7 16 62 FC | 	wrlong	arg03, fp
23680     A7 12 02 F6 | 	mov	arg01, fp
23684     1C 4E 85 F1 | 	sub	fp, #28
23688     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
2368c     14 4E 05 F1 | 	add	fp, #20
23690     A7 FA 61 FC | 	wrlong	result1, fp
23694     14 4E 85 F1 | 	sub	fp, #20
23698     00 FA 55 F2 | 	cmps	result1, #0 wc
2369c     0B FA 05 C6 |  if_b	mov	result1, #11
236a0     C0 00 90 CD |  if_b	jmp	#LR__3751
236a4     14 4E 05 F1 | 	add	fp, #20
236a8     A7 16 02 FB | 	rdlong	arg03, fp
236ac     02 16 66 F0 | 	shl	arg03, #2
236b0     F2 16 02 F1 | 	add	arg03, objptr
236b4     0B 17 0A FB | 	rdlong	arg03, arg03 wz
236b8     04 4E 85 F1 | 	sub	fp, #4
236bc     A7 16 62 FC | 	wrlong	arg03, fp
236c0     10 4E 85 F1 | 	sub	fp, #16
236c4     28 00 90 AD |  if_e	jmp	#LR__3750
236c8     10 4E 05 F1 | 	add	fp, #16
236cc     A7 16 02 FB | 	rdlong	arg03, fp
236d0     10 4E 85 F1 | 	sub	fp, #16
236d4     01 16 06 F1 | 	add	arg03, #1
236d8     0B 13 C2 FA | 	rdbyte	arg01, arg03
236dc     20 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
236e0     10 4E 05 F1 | 	add	fp, #16
236e4     A7 16 02 FB | 	rdlong	arg03, fp
236e8     10 4E 85 F1 | 	sub	fp, #16
236ec     0B 01 48 FC | 	wrbyte	#0, arg03
236f0                 | LR__3750
236f0     04 4E 05 F1 | 	add	fp, #4
236f4     A7 1E 0A FB | 	rdlong	local01, fp wz
236f8     04 4E 85 F1 | 	sub	fp, #4
236fc     04 4E 05 51 |  if_ne	add	fp, #4
23700     A7 1E 02 5B |  if_ne	rdlong	local01, fp
23704     04 4E 85 51 |  if_ne	sub	fp, #4
23708     0F 01 48 5C |  if_ne	wrbyte	#0, local01
2370c     14 4E 05 F1 | 	add	fp, #20
23710     A7 1E 02 FB | 	rdlong	local01, fp
23714     02 1E 66 F0 | 	shl	local01, #2
23718     F2 1E 02 F1 | 	add	local01, objptr
2371c     10 4E 85 F1 | 	sub	fp, #16
23720     A7 16 02 FB | 	rdlong	arg03, fp
23724     0F 17 62 FC | 	wrlong	arg03, local01
23728     08 4E 05 F1 | 	add	fp, #8
2372c     A7 1E CA FA | 	rdbyte	local01, fp wz
23730     0C 4E 85 F1 | 	sub	fp, #12
23734     00 FA 05 A6 |  if_e	mov	result1, #0
23738     28 00 90 AD |  if_e	jmp	#LR__3751
2373c     08 4E 05 F1 | 	add	fp, #8
23740     A7 12 02 F6 | 	mov	arg01, fp
23744     04 4E 85 F1 | 	sub	fp, #4
23748     A7 14 02 F6 | 	mov	arg02, fp
2374c     04 4E 85 F1 | 	sub	fp, #4
23750     00 16 06 F6 | 	mov	arg03, #0
23754     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
23758     18 4E 05 F1 | 	add	fp, #24
2375c     A7 FA 61 FC | 	wrlong	result1, fp
23760                 | ' 
23760                 | ' 	res = mount_volume(&path, &fs, 0);
23760                 | ' 	return res ;
23760     18 4E 85 F1 | 	sub	fp, #24
23764                 | LR__3751
23764     A7 F0 03 F6 | 	mov	ptra, fp
23768     B2 00 A0 FD | 	call	#popregs_
2376c                 | _fatfs_cc_f_mount_ret
2376c     2D 00 64 FD | 	ret
23770                 | 
23770                 | _fatfs_cc_f_open
23770     02 4A 05 F6 | 	mov	COUNT_, #2
23774     A8 00 A0 FD | 	call	#pushregs_
23778     60 F0 07 F1 | 	add	ptra, #96
2377c     04 4E 05 F1 | 	add	fp, #4
23780     A7 12 62 FC | 	wrlong	arg01, fp
23784     04 4E 05 F1 | 	add	fp, #4
23788     A7 14 62 FC | 	wrlong	arg02, fp
2378c     04 4E 05 F1 | 	add	fp, #4
23790     A7 16 42 FC | 	wrbyte	arg03, fp
23794     08 4E 85 F1 | 	sub	fp, #8
23798     A7 18 0A FB | 	rdlong	arg04, fp wz
2379c     04 4E 85 F1 | 	sub	fp, #4
237a0     09 FA 05 A6 |  if_e	mov	result1, #9
237a4     98 06 90 AD |  if_e	jmp	#LR__3777
237a8     0C 4E 05 F1 | 	add	fp, #12
237ac     A7 18 C2 FA | 	rdbyte	arg04, fp
237b0     3F 18 06 F5 | 	and	arg04, #63
237b4     A7 18 42 FC | 	wrbyte	arg04, fp
237b8     04 4E 85 F1 | 	sub	fp, #4
237bc     A7 12 02 F6 | 	mov	arg01, fp
237c0     3C 4E 05 F1 | 	add	fp, #60
237c4     A7 14 02 F6 | 	mov	arg02, fp
237c8     38 4E 85 F1 | 	sub	fp, #56
237cc     A7 16 C2 FA | 	rdbyte	arg03, fp
237d0     0C 4E 85 F1 | 	sub	fp, #12
237d4     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
237d8     10 4E 05 F1 | 	add	fp, #16
237dc     A7 FA 61 FC | 	wrlong	result1, fp
237e0     10 4E 85 F1 | 	sub	fp, #16
237e4     00 FA 0D F2 | 	cmp	result1, #0 wz
237e8     2C 06 90 5D |  if_ne	jmp	#LR__3776
237ec     44 4E 05 F1 | 	add	fp, #68
237f0     A7 18 02 FB | 	rdlong	arg04, fp
237f4     30 4E 85 F1 | 	sub	fp, #48
237f8     A7 18 62 FC | 	wrlong	arg04, fp
237fc     A7 12 02 F6 | 	mov	arg01, fp
23800     0C 4E 85 F1 | 	sub	fp, #12
23804     A7 1E 02 FB | 	rdlong	local01, fp
23808     08 4E 85 F1 | 	sub	fp, #8
2380c     0F 15 02 F6 | 	mov	arg02, local01
23810     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
23814     10 4E 05 F1 | 	add	fp, #16
23818     A7 FA 61 FC | 	wrlong	result1, fp
2381c     10 4E 85 F1 | 	sub	fp, #16
23820     00 FA 0D F2 | 	cmp	result1, #0 wz
23824     1C 00 90 5D |  if_ne	jmp	#LR__3760
23828     3F 4E 05 F1 | 	add	fp, #63
2382c     A7 18 C2 FA | 	rdbyte	arg04, fp
23830     3F 4E 85 F1 | 	sub	fp, #63
23834     80 18 CE F7 | 	test	arg04, #128 wz
23838     10 4E 05 51 |  if_ne	add	fp, #16
2383c     A7 0C 68 5C |  if_ne	wrlong	#6, fp
23840     10 4E 85 51 |  if_ne	sub	fp, #16
23844                 | LR__3760
23844     0C 4E 05 F1 | 	add	fp, #12
23848     A7 18 C2 FA | 	rdbyte	arg04, fp
2384c     0C 4E 85 F1 | 	sub	fp, #12
23850     1C 18 CE F7 | 	test	arg04, #28 wz
23854     F0 01 90 AD |  if_e	jmp	#LR__3765
23858     10 4E 05 F1 | 	add	fp, #16
2385c     A7 1E 0A FB | 	rdlong	local01, fp wz
23860     10 4E 85 F1 | 	sub	fp, #16
23864     48 00 90 AD |  if_e	jmp	#LR__3762
23868     10 4E 05 F1 | 	add	fp, #16
2386c     A7 18 02 FB | 	rdlong	arg04, fp
23870     10 4E 85 F1 | 	sub	fp, #16
23874     04 18 0E F2 | 	cmp	arg04, #4 wz
23878     1C 00 90 5D |  if_ne	jmp	#LR__3761
2387c     14 4E 05 F1 | 	add	fp, #20
23880     A7 12 02 F6 | 	mov	arg01, fp
23884     14 4E 85 F1 | 	sub	fp, #20
23888     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
2388c     10 4E 05 F1 | 	add	fp, #16
23890     A7 FA 61 FC | 	wrlong	result1, fp
23894     10 4E 85 F1 | 	sub	fp, #16
23898                 | LR__3761
23898     0C 4E 05 F1 | 	add	fp, #12
2389c     A7 1E C2 FA | 	rdbyte	local01, fp
238a0     08 1E 46 F5 | 	or	local01, #8
238a4     A7 1E 42 FC | 	wrbyte	local01, fp
238a8     0C 4E 85 F1 | 	sub	fp, #12
238ac     3C 00 90 FD | 	jmp	#LR__3764
238b0                 | LR__3762
238b0     1A 4E 05 F1 | 	add	fp, #26
238b4     A7 1E C2 FA | 	rdbyte	local01, fp
238b8     1A 4E 85 F1 | 	sub	fp, #26
238bc     11 1E CE F7 | 	test	local01, #17 wz
238c0     10 4E 05 51 |  if_ne	add	fp, #16
238c4     A7 0E 68 5C |  if_ne	wrlong	#7, fp
238c8     10 4E 85 51 |  if_ne	sub	fp, #16
238cc     1C 00 90 5D |  if_ne	jmp	#LR__3763
238d0     0C 4E 05 F1 | 	add	fp, #12
238d4     A7 1E C2 FA | 	rdbyte	local01, fp
238d8     0C 4E 85 F1 | 	sub	fp, #12
238dc     04 1E CE F7 | 	test	local01, #4 wz
238e0     10 4E 05 51 |  if_ne	add	fp, #16
238e4     A7 10 68 5C |  if_ne	wrlong	#8, fp
238e8     10 4E 85 51 |  if_ne	sub	fp, #16
238ec                 | LR__3763
238ec                 | LR__3764
238ec     10 4E 05 F1 | 	add	fp, #16
238f0     A7 1E 0A FB | 	rdlong	local01, fp wz
238f4     10 4E 85 F1 | 	sub	fp, #16
238f8     A8 01 90 5D |  if_ne	jmp	#LR__3768
238fc     0C 4E 05 F1 | 	add	fp, #12
23900     A7 1E C2 FA | 	rdbyte	local01, fp
23904     0C 4E 85 F1 | 	sub	fp, #12
23908     08 1E CE F7 | 	test	local01, #8 wz
2390c     94 01 90 AD |  if_e	jmp	#LR__3768
23910     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
23914     54 4E 05 F1 | 	add	fp, #84
23918     A7 FA 61 FC | 	wrlong	result1, fp
2391c     24 4E 85 F1 | 	sub	fp, #36
23920     A7 12 02 FB | 	rdlong	arg01, fp
23924     0E 12 06 F1 | 	add	arg01, #14
23928     09 FB 61 FC | 	wrlong	result1, arg01
2392c     A7 12 02 FB | 	rdlong	arg01, fp
23930     16 12 06 F1 | 	add	arg01, #22
23934     24 4E 05 F1 | 	add	fp, #36
23938     A7 14 02 FB | 	rdlong	arg02, fp
2393c     09 15 62 FC | 	wrlong	arg02, arg01
23940     10 4E 85 F1 | 	sub	fp, #16
23944     A7 12 02 FB | 	rdlong	arg01, fp
23948     14 4E 85 F1 | 	sub	fp, #20
2394c     A7 14 02 FB | 	rdlong	arg02, fp
23950     30 4E 85 F1 | 	sub	fp, #48
23954     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
23958     48 4E 05 F1 | 	add	fp, #72
2395c     A7 FA 61 FC | 	wrlong	result1, fp
23960     18 4E 85 F1 | 	sub	fp, #24
23964     A7 1E 02 FB | 	rdlong	local01, fp
23968     0B 1E 06 F1 | 	add	local01, #11
2396c     0F 41 48 FC | 	wrbyte	#32, local01
23970     14 4E 05 F1 | 	add	fp, #20
23974     A7 12 02 FB | 	rdlong	arg01, fp
23978     14 4E 85 F1 | 	sub	fp, #20
2397c     A7 14 02 FB | 	rdlong	arg02, fp
23980     30 4E 85 F1 | 	sub	fp, #48
23984     00 16 06 F6 | 	mov	arg03, #0
23988     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
2398c     30 4E 05 F1 | 	add	fp, #48
23990     A7 12 02 FB | 	rdlong	arg01, fp
23994     1C 12 06 F1 | 	add	arg01, #28
23998     09 01 68 FC | 	wrlong	#0, arg01
2399c     14 4E 05 F1 | 	add	fp, #20
239a0     A7 1E 02 FB | 	rdlong	local01, fp
239a4     03 1E 06 F1 | 	add	local01, #3
239a8     0F 03 48 FC | 	wrbyte	#1, local01
239ac     04 4E 05 F1 | 	add	fp, #4
239b0     A7 1E 0A FB | 	rdlong	local01, fp wz
239b4     48 4E 85 F1 | 	sub	fp, #72
239b8     E8 00 90 AD |  if_e	jmp	#LR__3768
239bc     44 4E 05 F1 | 	add	fp, #68
239c0     A7 1E 02 FB | 	rdlong	local01, fp
239c4     30 1E 06 F1 | 	add	local01, #48
239c8     0F 1F 02 FB | 	rdlong	local01, local01
239cc     14 4E 05 F1 | 	add	fp, #20
239d0     A7 1E 62 FC | 	wrlong	local01, fp
239d4     44 4E 85 F1 | 	sub	fp, #68
239d8     A7 12 02 F6 | 	mov	arg01, fp
239dc     34 4E 05 F1 | 	add	fp, #52
239e0     A7 14 02 FB | 	rdlong	arg02, fp
239e4     48 4E 85 F1 | 	sub	fp, #72
239e8     00 16 06 F6 | 	mov	arg03, #0
239ec     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
239f0     10 4E 05 F1 | 	add	fp, #16
239f4     A7 FA 61 FC | 	wrlong	result1, fp
239f8     10 4E 85 F1 | 	sub	fp, #16
239fc     00 FA 0D F2 | 	cmp	result1, #0 wz
23a00     A0 00 90 5D |  if_ne	jmp	#LR__3768
23a04     44 4E 05 F1 | 	add	fp, #68
23a08     A7 12 02 FB | 	rdlong	arg01, fp
23a0c     14 4E 05 F1 | 	add	fp, #20
23a10     A7 14 02 FB | 	rdlong	arg02, fp
23a14     58 4E 85 F1 | 	sub	fp, #88
23a18     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
23a1c     10 4E 05 F1 | 	add	fp, #16
23a20     A7 FA 61 FC | 	wrlong	result1, fp
23a24     34 4E 05 F1 | 	add	fp, #52
23a28     A7 18 02 FB | 	rdlong	arg04, fp
23a2c     04 4E 05 F1 | 	add	fp, #4
23a30     A7 1E 02 FB | 	rdlong	local01, fp
23a34     48 4E 85 F1 | 	sub	fp, #72
23a38     01 1E 86 F1 | 	sub	local01, #1
23a3c     10 18 06 F1 | 	add	arg04, #16
23a40     0C 1F 62 FC | 	wrlong	local01, arg04
23a44     5C 00 90 FD | 	jmp	#LR__3768
23a48                 | LR__3765
23a48     10 4E 05 F1 | 	add	fp, #16
23a4c     A7 18 0A FB | 	rdlong	arg04, fp wz
23a50     10 4E 85 F1 | 	sub	fp, #16
23a54     4C 00 90 5D |  if_ne	jmp	#LR__3767
23a58     1A 4E 05 F1 | 	add	fp, #26
23a5c     A7 18 C2 FA | 	rdbyte	arg04, fp
23a60     1A 4E 85 F1 | 	sub	fp, #26
23a64     10 18 CE F7 | 	test	arg04, #16 wz
23a68     10 4E 05 51 |  if_ne	add	fp, #16
23a6c     A7 08 68 5C |  if_ne	wrlong	#4, fp
23a70     10 4E 85 51 |  if_ne	sub	fp, #16
23a74     2C 00 90 5D |  if_ne	jmp	#LR__3766
23a78     0C 4E 05 F1 | 	add	fp, #12
23a7c     A7 18 C2 FA | 	rdbyte	arg04, fp
23a80     0C 4E 85 F1 | 	sub	fp, #12
23a84     02 18 CE F7 | 	test	arg04, #2 wz
23a88     1A 4E 05 51 |  if_ne	add	fp, #26
23a8c     A7 1E C2 5A |  if_ne	rdbyte	local01, fp
23a90     1A 4E 85 51 |  if_ne	sub	fp, #26
23a94     01 1E CE 57 |  if_ne	test	local01, #1 wz
23a98     10 4E 05 51 |  if_ne	add	fp, #16
23a9c     A7 0E 68 5C |  if_ne	wrlong	#7, fp
23aa0     10 4E 85 51 |  if_ne	sub	fp, #16
23aa4                 | LR__3766
23aa4                 | LR__3767
23aa4                 | LR__3768
23aa4     10 4E 05 F1 | 	add	fp, #16
23aa8     A7 1E 0A FB | 	rdlong	local01, fp wz
23aac     10 4E 85 F1 | 	sub	fp, #16
23ab0     60 00 90 5D |  if_ne	jmp	#LR__3769
23ab4     0C 4E 05 F1 | 	add	fp, #12
23ab8     A7 20 C2 FA | 	rdbyte	local02, fp
23abc     0C 4E 85 F1 | 	sub	fp, #12
23ac0     08 20 CE F7 | 	test	local02, #8 wz
23ac4     0C 4E 05 51 |  if_ne	add	fp, #12
23ac8     A7 20 C2 5A |  if_ne	rdbyte	local02, fp
23acc     40 20 46 55 |  if_ne	or	local02, #64
23ad0     A7 20 42 5C |  if_ne	wrbyte	local02, fp
23ad4     0C 4E 85 51 |  if_ne	sub	fp, #12
23ad8     04 4E 05 F1 | 	add	fp, #4
23adc     A7 20 02 FB | 	rdlong	local02, fp
23ae0     40 4E 05 F1 | 	add	fp, #64
23ae4     A7 1E 02 FB | 	rdlong	local01, fp
23ae8     30 1E 06 F1 | 	add	local01, #48
23aec     0F 1F 02 FB | 	rdlong	local01, local01
23af0     20 20 06 F1 | 	add	local02, #32
23af4     10 1F 62 FC | 	wrlong	local01, local02
23af8     40 4E 85 F1 | 	sub	fp, #64
23afc     A7 20 02 FB | 	rdlong	local02, fp
23b00     2C 4E 05 F1 | 	add	fp, #44
23b04     A7 1E 02 FB | 	rdlong	local01, fp
23b08     30 4E 85 F1 | 	sub	fp, #48
23b0c     24 20 06 F1 | 	add	local02, #36
23b10     10 1F 62 FC | 	wrlong	local01, local02
23b14                 | LR__3769
23b14     10 4E 05 F1 | 	add	fp, #16
23b18     A7 20 0A FB | 	rdlong	local02, fp wz
23b1c     10 4E 85 F1 | 	sub	fp, #16
23b20     F4 02 90 5D |  if_ne	jmp	#LR__3775
23b24     04 4E 05 F1 | 	add	fp, #4
23b28     A7 20 02 FB | 	rdlong	local02, fp
23b2c     40 4E 05 F1 | 	add	fp, #64
23b30     A7 12 02 FB | 	rdlong	arg01, fp
23b34     14 4E 85 F1 | 	sub	fp, #20
23b38     A7 14 02 FB | 	rdlong	arg02, fp
23b3c     30 4E 85 F1 | 	sub	fp, #48
23b40     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
23b44     08 20 06 F1 | 	add	local02, #8
23b48     10 FB 61 FC | 	wrlong	result1, local02
23b4c     04 4E 05 F1 | 	add	fp, #4
23b50     A7 20 02 FB | 	rdlong	local02, fp
23b54     2C 4E 05 F1 | 	add	fp, #44
23b58     A7 12 02 FB | 	rdlong	arg01, fp
23b5c     1C 12 06 F1 | 	add	arg01, #28
23b60                 | ' {
23b60                 | ' 
23b60                 | ' 	return *((DWORD*)ptr);
23b60     09 FB 01 FB | 	rdlong	result1, arg01
23b64     0C 20 06 F1 | 	add	local02, #12
23b68     10 FB 61 FC | 	wrlong	result1, local02
23b6c     2C 4E 85 F1 | 	sub	fp, #44
23b70     A7 20 02 FB | 	rdlong	local02, fp
23b74     40 4E 05 F1 | 	add	fp, #64
23b78     A7 1E 02 FB | 	rdlong	local01, fp
23b7c     10 1F 62 FC | 	wrlong	local01, local02
23b80     40 4E 85 F1 | 	sub	fp, #64
23b84     A7 20 02 FB | 	rdlong	local02, fp
23b88     40 4E 05 F1 | 	add	fp, #64
23b8c     A7 1E 02 FB | 	rdlong	local01, fp
23b90     06 1E 06 F1 | 	add	local01, #6
23b94     0F 1F E2 FA | 	rdword	local01, local01
23b98     04 20 06 F1 | 	add	local02, #4
23b9c     10 1F 52 FC | 	wrword	local01, local02
23ba0     40 4E 85 F1 | 	sub	fp, #64
23ba4     A7 20 02 FB | 	rdlong	local02, fp
23ba8     08 4E 05 F1 | 	add	fp, #8
23bac     A7 1E C2 FA | 	rdbyte	local01, fp
23bb0     10 20 06 F1 | 	add	local02, #16
23bb4     10 1F 42 FC | 	wrbyte	local01, local02
23bb8     08 4E 85 F1 | 	sub	fp, #8
23bbc     A7 20 02 FB | 	rdlong	local02, fp
23bc0     11 20 06 F1 | 	add	local02, #17
23bc4     10 01 48 FC | 	wrbyte	#0, local02
23bc8     A7 20 02 FB | 	rdlong	local02, fp
23bcc     1C 20 06 F1 | 	add	local02, #28
23bd0     10 01 68 FC | 	wrlong	#0, local02
23bd4     A7 20 02 FB | 	rdlong	local02, fp
23bd8     14 20 06 F1 | 	add	local02, #20
23bdc     10 01 68 FC | 	wrlong	#0, local02
23be0     A7 12 02 FB | 	rdlong	arg01, fp
23be4     04 4E 85 F1 | 	sub	fp, #4
23be8     28 12 06 F1 | 	add	arg01, #40
23bec     00 14 06 F6 | 	mov	arg02, #0
23bf0     09 16 C6 F9 | 	decod	arg03, #9
23bf4     98 00 A0 FD | 	call	#\builtin_bytefill_
23bf8     0C 4E 05 F1 | 	add	fp, #12
23bfc     A7 20 C2 FA | 	rdbyte	local02, fp
23c00     0C 4E 85 F1 | 	sub	fp, #12
23c04     20 20 CE F7 | 	test	local02, #32 wz
23c08     0C 02 90 AD |  if_e	jmp	#LR__3774
23c0c     04 4E 05 F1 | 	add	fp, #4
23c10     A7 1E 02 FB | 	rdlong	local01, fp
23c14     04 4E 85 F1 | 	sub	fp, #4
23c18     0C 1E 06 F1 | 	add	local01, #12
23c1c     0F 21 02 FB | 	rdlong	local02, local01
23c20     01 20 16 F2 | 	cmp	local02, #1 wc
23c24     F0 01 90 CD |  if_b	jmp	#LR__3774
23c28     04 4E 05 F1 | 	add	fp, #4
23c2c     A7 1E 02 FB | 	rdlong	local01, fp
23c30     0F 21 02 F6 | 	mov	local02, local01
23c34     0C 1E 06 F1 | 	add	local01, #12
23c38     0F 1F 02 FB | 	rdlong	local01, local01
23c3c     14 20 06 F1 | 	add	local02, #20
23c40     10 1F 62 FC | 	wrlong	local01, local02
23c44     40 4E 05 F1 | 	add	fp, #64
23c48     A7 20 02 FB | 	rdlong	local02, fp
23c4c     0A 20 06 F1 | 	add	local02, #10
23c50     10 21 E2 FA | 	rdword	local02, local02
23c54     09 20 66 F0 | 	shl	local02, #9
23c58     08 4E 05 F1 | 	add	fp, #8
23c5c     A7 20 62 FC | 	wrlong	local02, fp
23c60     48 4E 85 F1 | 	sub	fp, #72
23c64     A7 20 02 FB | 	rdlong	local02, fp
23c68     08 20 06 F1 | 	add	local02, #8
23c6c     10 1F 02 FB | 	rdlong	local01, local02
23c70     4C 4E 05 F1 | 	add	fp, #76
23c74     A7 1E 62 FC | 	wrlong	local01, fp
23c78                 | ' 				fp->fptr = fp->obj.objsize;
23c78                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
23c78                 | ' 				clst = fp->obj.sclust;
23c78                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
23c78     4C 4E 85 F1 | 	sub	fp, #76
23c7c     A7 20 02 FB | 	rdlong	local02, fp
23c80     0C 20 06 F1 | 	add	local02, #12
23c84     10 1F 02 FB | 	rdlong	local01, local02
23c88     58 4E 05 F1 | 	add	fp, #88
23c8c     A7 1E 62 FC | 	wrlong	local01, fp
23c90     5C 4E 85 F1 | 	sub	fp, #92
23c94                 | LR__3770
23c94     10 4E 05 F1 | 	add	fp, #16
23c98     A7 20 0A FB | 	rdlong	local02, fp wz
23c9c     10 4E 85 F1 | 	sub	fp, #16
23ca0     94 00 90 5D |  if_ne	jmp	#LR__3771
23ca4     5C 4E 05 F1 | 	add	fp, #92
23ca8     A7 20 02 FB | 	rdlong	local02, fp
23cac     10 4E 85 F1 | 	sub	fp, #16
23cb0     A7 1E 02 FB | 	rdlong	local01, fp
23cb4     4C 4E 85 F1 | 	sub	fp, #76
23cb8     0F 21 1A F2 | 	cmp	local02, local01 wcz
23cbc     78 00 90 ED |  if_be	jmp	#LR__3771
23cc0     04 4E 05 F1 | 	add	fp, #4
23cc4     A7 12 02 FB | 	rdlong	arg01, fp
23cc8     4C 4E 05 F1 | 	add	fp, #76
23ccc     A7 14 02 FB | 	rdlong	arg02, fp
23cd0     50 4E 85 F1 | 	sub	fp, #80
23cd4     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
23cd8     50 4E 05 F1 | 	add	fp, #80
23cdc     A7 FA 61 FC | 	wrlong	result1, fp
23ce0     50 4E 85 F1 | 	sub	fp, #80
23ce4     02 FA 15 F2 | 	cmp	result1, #2 wc
23ce8     10 4E 05 C1 |  if_b	add	fp, #16
23cec     A7 04 68 CC |  if_b	wrlong	#2, fp
23cf0     10 4E 85 C1 |  if_b	sub	fp, #16
23cf4     50 4E 05 F1 | 	add	fp, #80
23cf8     A7 20 02 FB | 	rdlong	local02, fp
23cfc     50 4E 85 F1 | 	sub	fp, #80
23d00     FF FF 7F FF 
23d04     FF 21 0E F2 | 	cmp	local02, ##-1 wz
23d08     10 4E 05 A1 |  if_e	add	fp, #16
23d0c     A7 02 68 AC |  if_e	wrlong	#1, fp
23d10     10 4E 85 A1 |  if_e	sub	fp, #16
23d14     5C 4E 05 F1 | 	add	fp, #92
23d18     A7 20 02 FB | 	rdlong	local02, fp
23d1c     10 4E 85 F1 | 	sub	fp, #16
23d20     A7 1E 02 FB | 	rdlong	local01, fp
23d24     0F 21 82 F1 | 	sub	local02, local01
23d28     10 4E 05 F1 | 	add	fp, #16
23d2c     A7 20 62 FC | 	wrlong	local02, fp
23d30     5C 4E 85 F1 | 	sub	fp, #92
23d34     5C FF 9F FD | 	jmp	#LR__3770
23d38                 | LR__3771
23d38     04 4E 05 F1 | 	add	fp, #4
23d3c     A7 20 02 FB | 	rdlong	local02, fp
23d40     4C 4E 05 F1 | 	add	fp, #76
23d44     A7 1E 02 FB | 	rdlong	local01, fp
23d48     18 20 06 F1 | 	add	local02, #24
23d4c     10 1F 62 FC | 	wrlong	local01, local02
23d50     40 4E 85 F1 | 	sub	fp, #64
23d54     A7 20 0A FB | 	rdlong	local02, fp wz
23d58     10 4E 85 F1 | 	sub	fp, #16
23d5c     B8 00 90 5D |  if_ne	jmp	#LR__3773
23d60     5C 4E 05 F1 | 	add	fp, #92
23d64     A7 1E 02 FB | 	rdlong	local01, fp
23d68     5C 4E 85 F1 | 	sub	fp, #92
23d6c     FF 1F CE F7 | 	test	local01, #511 wz
23d70     A4 00 90 AD |  if_e	jmp	#LR__3773
23d74     44 4E 05 F1 | 	add	fp, #68
23d78     A7 12 02 FB | 	rdlong	arg01, fp
23d7c     0C 4E 05 F1 | 	add	fp, #12
23d80     A7 14 02 FB | 	rdlong	arg02, fp
23d84     50 4E 85 F1 | 	sub	fp, #80
23d88     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
23d8c     58 4E 05 F1 | 	add	fp, #88
23d90     A7 FA 61 FC | 	wrlong	result1, fp
23d94     00 FA 4D F2 | 	cmps	result1, #0 wz
23d98     58 4E 85 F1 | 	sub	fp, #88
23d9c     10 4E 05 A1 |  if_e	add	fp, #16
23da0     A7 04 68 AC |  if_e	wrlong	#2, fp
23da4     10 4E 85 A1 |  if_e	sub	fp, #16
23da8     6C 00 90 AD |  if_e	jmp	#LR__3772
23dac     04 4E 05 F1 | 	add	fp, #4
23db0     A7 20 02 FB | 	rdlong	local02, fp
23db4     54 4E 05 F1 | 	add	fp, #84
23db8     A7 1E 02 FB | 	rdlong	local01, fp
23dbc     04 4E 05 F1 | 	add	fp, #4
23dc0     A7 18 02 FB | 	rdlong	arg04, fp
23dc4     09 18 46 F0 | 	shr	arg04, #9
23dc8     0C 1F 02 F1 | 	add	local01, arg04
23dcc     1C 20 06 F1 | 	add	local02, #28
23dd0     10 1F 62 FC | 	wrlong	local01, local02
23dd4     18 4E 85 F1 | 	sub	fp, #24
23dd8     A7 20 02 FB | 	rdlong	local02, fp
23ddc     01 20 06 F1 | 	add	local02, #1
23de0     10 13 C2 FA | 	rdbyte	arg01, local02
23de4     40 4E 85 F1 | 	sub	fp, #64
23de8     A7 20 02 FB | 	rdlong	local02, fp
23dec     10 15 02 F6 | 	mov	arg02, local02
23df0     28 14 06 F1 | 	add	arg02, #40
23df4     04 4E 85 F1 | 	sub	fp, #4
23df8     1C 20 06 F1 | 	add	local02, #28
23dfc     10 17 02 FB | 	rdlong	arg03, local02
23e00     01 18 06 F6 | 	mov	arg04, #1
23e04     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
23e08     00 FA 0D F2 | 	cmp	result1, #0 wz
23e0c     10 4E 05 51 |  if_ne	add	fp, #16
23e10     A7 02 68 5C |  if_ne	wrlong	#1, fp
23e14     10 4E 85 51 |  if_ne	sub	fp, #16
23e18                 | LR__3772
23e18                 | LR__3773
23e18                 | LR__3774
23e18                 | LR__3775
23e18                 | LR__3776
23e18     10 4E 05 F1 | 	add	fp, #16
23e1c     A7 20 0A FB | 	rdlong	local02, fp wz
23e20     10 4E 85 F1 | 	sub	fp, #16
23e24     04 4E 05 51 |  if_ne	add	fp, #4
23e28     A7 20 02 5B |  if_ne	rdlong	local02, fp
23e2c     04 4E 85 51 |  if_ne	sub	fp, #4
23e30     10 01 68 5C |  if_ne	wrlong	#0, local02
23e34                 | ' 
23e34                 | ' 	return res ;
23e34     10 4E 05 F1 | 	add	fp, #16
23e38     A7 FA 01 FB | 	rdlong	result1, fp
23e3c     10 4E 85 F1 | 	sub	fp, #16
23e40                 | LR__3777
23e40     A7 F0 03 F6 | 	mov	ptra, fp
23e44     B2 00 A0 FD | 	call	#popregs_
23e48                 | _fatfs_cc_f_open_ret
23e48     2D 00 64 FD | 	ret
23e4c                 | 
23e4c                 | _fatfs_cc_f_read
23e4c     0E 4A 05 F6 | 	mov	COUNT_, #14
23e50     A8 00 A0 FD | 	call	#pushregs_
23e54     38 F0 07 F1 | 	add	ptra, #56
23e58     04 4E 05 F1 | 	add	fp, #4
23e5c     A7 12 62 FC | 	wrlong	arg01, fp
23e60     04 4E 05 F1 | 	add	fp, #4
23e64     A7 14 62 FC | 	wrlong	arg02, fp
23e68     04 4E 05 F1 | 	add	fp, #4
23e6c     A7 16 62 FC | 	wrlong	arg03, fp
23e70     04 4E 05 F1 | 	add	fp, #4
23e74     A7 18 62 FC | 	wrlong	arg04, fp
23e78     08 4E 85 F1 | 	sub	fp, #8
23e7c     A7 FA 01 FB | 	rdlong	result1, fp
23e80     2C 4E 05 F1 | 	add	fp, #44
23e84     A7 FA 61 FC | 	wrlong	result1, fp
23e88     24 4E 85 F1 | 	sub	fp, #36
23e8c     A7 FA 01 FB | 	rdlong	result1, fp
23e90     FD 00 68 FC | 	wrlong	#0, result1
23e94     0C 4E 85 F1 | 	sub	fp, #12
23e98     A7 12 02 FB | 	rdlong	arg01, fp
23e9c     14 4E 05 F1 | 	add	fp, #20
23ea0     A7 14 02 F6 | 	mov	arg02, fp
23ea4     18 4E 85 F1 | 	sub	fp, #24
23ea8     24 F7 BF FD | 	call	#_fatfs_cc_validate
23eac     14 4E 05 F1 | 	add	fp, #20
23eb0     A7 FA 61 FC | 	wrlong	result1, fp
23eb4     00 FA 4D F2 | 	cmps	result1, #0 wz
23eb8     14 4E 85 F1 | 	sub	fp, #20
23ebc     20 00 90 5D |  if_ne	jmp	#LR__3780
23ec0     04 4E 05 F1 | 	add	fp, #4
23ec4     A7 14 02 FB | 	rdlong	arg02, fp
23ec8     11 14 06 F1 | 	add	arg02, #17
23ecc     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
23ed0     10 4E 05 F1 | 	add	fp, #16
23ed4     A7 14 62 FC | 	wrlong	arg02, fp
23ed8     14 4E 85 F1 | 	sub	fp, #20
23edc     10 00 90 AD |  if_e	jmp	#LR__3781
23ee0                 | LR__3780
23ee0     14 4E 05 F1 | 	add	fp, #20
23ee4     A7 FA 01 FB | 	rdlong	result1, fp
23ee8     14 4E 85 F1 | 	sub	fp, #20
23eec     EC 05 90 FD | 	jmp	#LR__3800
23ef0                 | LR__3781
23ef0     04 4E 05 F1 | 	add	fp, #4
23ef4     A7 18 02 FB | 	rdlong	arg04, fp
23ef8     04 4E 85 F1 | 	sub	fp, #4
23efc     10 18 06 F1 | 	add	arg04, #16
23f00     0C 19 C2 FA | 	rdbyte	arg04, arg04
23f04     01 18 CE F7 | 	test	arg04, #1 wz
23f08     07 FA 05 A6 |  if_e	mov	result1, #7
23f0c     CC 05 90 AD |  if_e	jmp	#LR__3800
23f10     04 4E 05 F1 | 	add	fp, #4
23f14     A7 1E 02 FB | 	rdlong	local01, fp
23f18     0F 21 02 F6 | 	mov	local02, local01
23f1c     0C 20 06 F1 | 	add	local02, #12
23f20     10 23 02 FB | 	rdlong	local03, local02
23f24     14 1E 06 F1 | 	add	local01, #20
23f28     0F 1F 02 FB | 	rdlong	local01, local01
23f2c     0F 23 82 F1 | 	sub	local03, local01
23f30     20 4E 05 F1 | 	add	fp, #32
23f34     A7 22 62 FC | 	wrlong	local03, fp
23f38     18 4E 85 F1 | 	sub	fp, #24
23f3c     A7 24 02 FB | 	rdlong	local04, fp
23f40     0C 4E 85 F1 | 	sub	fp, #12
23f44     11 25 1A F2 | 	cmp	local04, local03 wcz
23f48     24 4E 05 11 |  if_a	add	fp, #36
23f4c     A7 24 02 1B |  if_a	rdlong	local04, fp
23f50     18 4E 85 11 |  if_a	sub	fp, #24
23f54     A7 24 62 1C |  if_a	wrlong	local04, fp
23f58     0C 4E 85 11 |  if_a	sub	fp, #12
23f5c                 | ' 
23f5c                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
23f5c                 | LR__3782
23f5c     0C 4E 05 F1 | 	add	fp, #12
23f60     A7 20 02 FB | 	rdlong	local02, fp
23f64     0C 4E 85 F1 | 	sub	fp, #12
23f68     10 25 02 F6 | 	mov	local04, local02
23f6c     01 24 16 F2 | 	cmp	local04, #1 wc
23f70     64 05 90 CD |  if_b	jmp	#LR__3799
23f74     04 4E 05 F1 | 	add	fp, #4
23f78     A7 22 02 FB | 	rdlong	local03, fp
23f7c     04 4E 85 F1 | 	sub	fp, #4
23f80     14 22 06 F1 | 	add	local03, #20
23f84     11 23 02 FB | 	rdlong	local03, local03
23f88     FF 23 CE F7 | 	test	local03, #511 wz
23f8c     3C 04 90 5D |  if_ne	jmp	#LR__3797
23f90     04 4E 05 F1 | 	add	fp, #4
23f94     A7 1E 02 FB | 	rdlong	local01, fp
23f98     14 1E 06 F1 | 	add	local01, #20
23f9c     0F 23 02 FB | 	rdlong	local03, local01
23fa0     09 22 46 F0 | 	shr	local03, #9
23fa4     14 4E 05 F1 | 	add	fp, #20
23fa8     A7 26 02 FB | 	rdlong	local05, fp
23fac     13 29 02 F6 | 	mov	local06, local05
23fb0     0A 28 06 F1 | 	add	local06, #10
23fb4     14 2B E2 FA | 	rdword	local07, local06
23fb8     0A 28 86 F1 | 	sub	local06, #10
23fbc     15 2D 32 F9 | 	getword	local08, local07, #0
23fc0     01 2C 86 F1 | 	sub	local08, #1
23fc4     16 23 0A F5 | 	and	local03, local08 wz
23fc8     18 4E 05 F1 | 	add	fp, #24
23fcc     A7 22 62 FC | 	wrlong	local03, fp
23fd0     30 4E 85 F1 | 	sub	fp, #48
23fd4     E0 00 90 5D |  if_ne	jmp	#LR__3787
23fd8     04 4E 05 F1 | 	add	fp, #4
23fdc     A7 22 02 FB | 	rdlong	local03, fp
23fe0     04 4E 85 F1 | 	sub	fp, #4
23fe4     14 22 06 F1 | 	add	local03, #20
23fe8     11 23 0A FB | 	rdlong	local03, local03 wz
23fec     20 00 90 5D |  if_ne	jmp	#LR__3783
23ff0     04 4E 05 F1 | 	add	fp, #4
23ff4     A7 22 02 FB | 	rdlong	local03, fp
23ff8     08 22 06 F1 | 	add	local03, #8
23ffc     11 23 02 FB | 	rdlong	local03, local03
24000     18 4E 05 F1 | 	add	fp, #24
24004     A7 22 62 FC | 	wrlong	local03, fp
24008     1C 4E 85 F1 | 	sub	fp, #28
2400c     28 00 90 FD | 	jmp	#LR__3784
24010                 | LR__3783
24010     04 4E 05 F1 | 	add	fp, #4
24014     A7 2C 02 FB | 	rdlong	local08, fp
24018     16 13 02 F6 | 	mov	arg01, local08
2401c     04 4E 85 F1 | 	sub	fp, #4
24020     18 2C 06 F1 | 	add	local08, #24
24024     16 15 02 FB | 	rdlong	arg02, local08
24028     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
2402c     1C 4E 05 F1 | 	add	fp, #28
24030     A7 FA 61 FC | 	wrlong	result1, fp
24034     1C 4E 85 F1 | 	sub	fp, #28
24038                 | LR__3784
24038     1C 4E 05 F1 | 	add	fp, #28
2403c     A7 22 02 FB | 	rdlong	local03, fp
24040     1C 4E 85 F1 | 	sub	fp, #28
24044     02 22 16 F2 | 	cmp	local03, #2 wc
24048     1C 00 90 3D |  if_ae	jmp	#LR__3785
2404c     04 4E 05 F1 | 	add	fp, #4
24050     A7 22 02 FB | 	rdlong	local03, fp
24054     04 4E 85 F1 | 	sub	fp, #4
24058     11 22 06 F1 | 	add	local03, #17
2405c     11 05 48 FC | 	wrbyte	#2, local03
24060     02 FA 05 F6 | 	mov	result1, #2
24064     74 04 90 FD | 	jmp	#LR__3800
24068                 | LR__3785
24068     1C 4E 05 F1 | 	add	fp, #28
2406c     A7 22 02 FB | 	rdlong	local03, fp
24070     1C 4E 85 F1 | 	sub	fp, #28
24074     FF FF 7F FF 
24078     FF 23 0E F2 | 	cmp	local03, ##-1 wz
2407c     1C 00 90 5D |  if_ne	jmp	#LR__3786
24080     04 4E 05 F1 | 	add	fp, #4
24084     A7 22 02 FB | 	rdlong	local03, fp
24088     04 4E 85 F1 | 	sub	fp, #4
2408c     11 22 06 F1 | 	add	local03, #17
24090     11 03 48 FC | 	wrbyte	#1, local03
24094     01 FA 05 F6 | 	mov	result1, #1
24098     40 04 90 FD | 	jmp	#LR__3800
2409c                 | LR__3786
2409c     04 4E 05 F1 | 	add	fp, #4
240a0     A7 22 02 FB | 	rdlong	local03, fp
240a4     18 4E 05 F1 | 	add	fp, #24
240a8     A7 2C 02 FB | 	rdlong	local08, fp
240ac     1C 4E 85 F1 | 	sub	fp, #28
240b0     18 22 06 F1 | 	add	local03, #24
240b4     11 2D 62 FC | 	wrlong	local08, local03
240b8                 | LR__3787
240b8     18 4E 05 F1 | 	add	fp, #24
240bc     A7 12 02 FB | 	rdlong	arg01, fp
240c0     14 4E 85 F1 | 	sub	fp, #20
240c4     A7 22 02 FB | 	rdlong	local03, fp
240c8     04 4E 85 F1 | 	sub	fp, #4
240cc     18 22 06 F1 | 	add	local03, #24
240d0     11 15 02 FB | 	rdlong	arg02, local03
240d4     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
240d8     20 4E 05 F1 | 	add	fp, #32
240dc     A7 FA 61 FC | 	wrlong	result1, fp
240e0     20 4E 85 F1 | 	sub	fp, #32
240e4     00 FA 0D F2 | 	cmp	result1, #0 wz
240e8     1C 00 90 5D |  if_ne	jmp	#LR__3788
240ec     04 4E 05 F1 | 	add	fp, #4
240f0     A7 22 02 FB | 	rdlong	local03, fp
240f4     04 4E 85 F1 | 	sub	fp, #4
240f8     11 22 06 F1 | 	add	local03, #17
240fc     11 05 48 FC | 	wrbyte	#2, local03
24100     02 FA 05 F6 | 	mov	result1, #2
24104     D4 03 90 FD | 	jmp	#LR__3800
24108                 | LR__3788
24108     20 4E 05 F1 | 	add	fp, #32
2410c     A7 22 02 FB | 	rdlong	local03, fp
24110     10 4E 05 F1 | 	add	fp, #16
24114     A7 2C 02 FB | 	rdlong	local08, fp
24118     16 23 02 F1 | 	add	local03, local08
2411c     10 4E 85 F1 | 	sub	fp, #16
24120     A7 22 62 FC | 	wrlong	local03, fp
24124     14 4E 85 F1 | 	sub	fp, #20
24128     A7 22 02 FB | 	rdlong	local03, fp
2412c     09 22 46 F0 | 	shr	local03, #9
24130     20 4E 05 F1 | 	add	fp, #32
24134     A7 22 62 FC | 	wrlong	local03, fp
24138     2C 4E 85 F1 | 	sub	fp, #44
2413c     01 22 16 F2 | 	cmp	local03, #1 wc
24140     5C 01 90 CD |  if_b	jmp	#LR__3792
24144     30 4E 05 F1 | 	add	fp, #48
24148     A7 22 02 FB | 	rdlong	local03, fp
2414c     04 4E 85 F1 | 	sub	fp, #4
24150     A7 2C 02 FB | 	rdlong	local08, fp
24154     16 23 02 F1 | 	add	local03, local08
24158     14 4E 85 F1 | 	sub	fp, #20
2415c     A7 2C 02 FB | 	rdlong	local08, fp
24160     18 4E 85 F1 | 	sub	fp, #24
24164     0A 2C 06 F1 | 	add	local08, #10
24168     16 2D E2 FA | 	rdword	local08, local08
2416c     16 23 1A F2 | 	cmp	local03, local08 wcz
24170     28 00 90 ED |  if_be	jmp	#LR__3789
24174     18 4E 05 F1 | 	add	fp, #24
24178     A7 1E 02 FB | 	rdlong	local01, fp
2417c     0A 1E 06 F1 | 	add	local01, #10
24180     0F 23 E2 FA | 	rdword	local03, local01
24184     18 4E 05 F1 | 	add	fp, #24
24188     A7 2C 02 FB | 	rdlong	local08, fp
2418c     16 23 82 F1 | 	sub	local03, local08
24190     04 4E 85 F1 | 	sub	fp, #4
24194     A7 22 62 FC | 	wrlong	local03, fp
24198     2C 4E 85 F1 | 	sub	fp, #44
2419c                 | LR__3789
2419c     18 4E 05 F1 | 	add	fp, #24
241a0     A7 1E 02 FB | 	rdlong	local01, fp
241a4     01 1E 06 F1 | 	add	local01, #1
241a8     0F 13 C2 FA | 	rdbyte	arg01, local01
241ac     1C 4E 05 F1 | 	add	fp, #28
241b0     A7 14 02 FB | 	rdlong	arg02, fp
241b4     14 4E 85 F1 | 	sub	fp, #20
241b8     A7 16 02 FB | 	rdlong	arg03, fp
241bc     0C 4E 05 F1 | 	add	fp, #12
241c0     A7 18 02 FB | 	rdlong	arg04, fp
241c4     2C 4E 85 F1 | 	sub	fp, #44
241c8     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
241cc     00 FA 0D F2 | 	cmp	result1, #0 wz
241d0     1C 00 90 AD |  if_e	jmp	#LR__3790
241d4     04 4E 05 F1 | 	add	fp, #4
241d8     A7 22 02 FB | 	rdlong	local03, fp
241dc     04 4E 85 F1 | 	sub	fp, #4
241e0     11 22 06 F1 | 	add	local03, #17
241e4     11 03 48 FC | 	wrbyte	#1, local03
241e8     01 FA 05 F6 | 	mov	result1, #1
241ec     EC 02 90 FD | 	jmp	#LR__3800
241f0                 | LR__3790
241f0     04 4E 05 F1 | 	add	fp, #4
241f4     A7 1E 02 FB | 	rdlong	local01, fp
241f8     04 4E 85 F1 | 	sub	fp, #4
241fc     10 1E 06 F1 | 	add	local01, #16
24200     0F 23 C2 FA | 	rdbyte	local03, local01
24204     80 22 CE F7 | 	test	local03, #128 wz
24208     78 00 90 AD |  if_e	jmp	#LR__3791
2420c     04 4E 05 F1 | 	add	fp, #4
24210     A7 2C 02 FB | 	rdlong	local08, fp
24214     1C 2C 06 F1 | 	add	local08, #28
24218     16 2D 02 FB | 	rdlong	local08, local08
2421c     1C 4E 05 F1 | 	add	fp, #28
24220     A7 2E 02 FB | 	rdlong	local09, fp
24224     17 2D 82 F1 | 	sub	local08, local09
24228     0C 4E 05 F1 | 	add	fp, #12
2422c     A7 30 02 FB | 	rdlong	local10, fp
24230     2C 4E 85 F1 | 	sub	fp, #44
24234     18 33 02 F6 | 	mov	local11, local10
24238     19 2D 12 F2 | 	cmp	local08, local11 wc
2423c     44 00 90 3D |  if_ae	jmp	#LR__3791
24240     34 4E 05 F1 | 	add	fp, #52
24244     A7 12 02 FB | 	rdlong	arg01, fp
24248     30 4E 85 F1 | 	sub	fp, #48
2424c     A7 14 02 FB | 	rdlong	arg02, fp
24250     0A 33 02 F6 | 	mov	local11, arg02
24254     1C 32 06 F1 | 	add	local11, #28
24258     19 2F 02 FB | 	rdlong	local09, local11
2425c     1C 4E 05 F1 | 	add	fp, #28
24260     A7 26 02 FB | 	rdlong	local05, fp
24264     13 2F 82 F1 | 	sub	local09, local05
24268     09 2E 66 F0 | 	shl	local09, #9
2426c     17 33 02 F6 | 	mov	local11, local09
24270     17 13 02 F1 | 	add	arg01, local09
24274     20 4E 85 F1 | 	sub	fp, #32
24278     28 14 06 F1 | 	add	arg02, #40
2427c     09 16 C6 F9 | 	decod	arg03, #9
24280     50 49 BF FD | 	call	#__system____builtin_memmove
24284                 | LR__3791
24284     2C 4E 05 F1 | 	add	fp, #44
24288     A7 22 02 FB | 	rdlong	local03, fp
2428c     09 22 66 F0 | 	shl	local03, #9
24290     04 4E 85 F1 | 	sub	fp, #4
24294     A7 22 62 FC | 	wrlong	local03, fp
24298     28 4E 85 F1 | 	sub	fp, #40
2429c                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
2429c                 | ' 				}
2429c                 | ' 
2429c                 | ' 
2429c                 | ' 				rcnt =  ((UINT) 512 )  * cc;
2429c                 | ' 				continue;
2429c     B4 01 90 FD | 	jmp	#LR__3798
242a0                 | LR__3792
242a0     04 4E 05 F1 | 	add	fp, #4
242a4     A7 22 02 FB | 	rdlong	local03, fp
242a8     1C 22 06 F1 | 	add	local03, #28
242ac     11 23 02 FB | 	rdlong	local03, local03
242b0     1C 4E 05 F1 | 	add	fp, #28
242b4     A7 1E 02 FB | 	rdlong	local01, fp
242b8     20 4E 85 F1 | 	sub	fp, #32
242bc     0F 23 0A F2 | 	cmp	local03, local01 wz
242c0     EC 00 90 AD |  if_e	jmp	#LR__3796
242c4     04 4E 05 F1 | 	add	fp, #4
242c8     A7 1E 02 FB | 	rdlong	local01, fp
242cc     04 4E 85 F1 | 	sub	fp, #4
242d0     10 1E 06 F1 | 	add	local01, #16
242d4     0F 23 C2 FA | 	rdbyte	local03, local01
242d8     80 22 CE F7 | 	test	local03, #128 wz
242dc     7C 00 90 AD |  if_e	jmp	#LR__3794
242e0     18 4E 05 F1 | 	add	fp, #24
242e4     A7 1E 02 FB | 	rdlong	local01, fp
242e8     01 1E 06 F1 | 	add	local01, #1
242ec     0F 13 C2 FA | 	rdbyte	arg01, local01
242f0     14 4E 85 F1 | 	sub	fp, #20
242f4     A7 22 02 FB | 	rdlong	local03, fp
242f8     11 15 02 F6 | 	mov	arg02, local03
242fc     28 14 06 F1 | 	add	arg02, #40
24300     04 4E 85 F1 | 	sub	fp, #4
24304     1C 22 06 F1 | 	add	local03, #28
24308     11 17 02 FB | 	rdlong	arg03, local03
2430c     01 18 06 F6 | 	mov	arg04, #1
24310     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
24314     00 FA 0D F2 | 	cmp	result1, #0 wz
24318     1C 00 90 AD |  if_e	jmp	#LR__3793
2431c     04 4E 05 F1 | 	add	fp, #4
24320     A7 22 02 FB | 	rdlong	local03, fp
24324     04 4E 85 F1 | 	sub	fp, #4
24328     11 22 06 F1 | 	add	local03, #17
2432c     11 03 48 FC | 	wrbyte	#1, local03
24330     01 FA 05 F6 | 	mov	result1, #1
24334     A4 01 90 FD | 	jmp	#LR__3800
24338                 | LR__3793
24338     04 4E 05 F1 | 	add	fp, #4
2433c     A7 32 02 FB | 	rdlong	local11, fp
24340     19 23 02 F6 | 	mov	local03, local11
24344     04 4E 85 F1 | 	sub	fp, #4
24348     10 32 06 F1 | 	add	local11, #16
2434c     19 33 C2 FA | 	rdbyte	local11, local11
24350     7F 32 06 F5 | 	and	local11, #127
24354     10 22 06 F1 | 	add	local03, #16
24358     11 33 42 FC | 	wrbyte	local11, local03
2435c                 | LR__3794
2435c     18 4E 05 F1 | 	add	fp, #24
24360     A7 1E 02 FB | 	rdlong	local01, fp
24364     01 1E 06 F1 | 	add	local01, #1
24368     0F 13 C2 FA | 	rdbyte	arg01, local01
2436c     14 4E 85 F1 | 	sub	fp, #20
24370     A7 14 02 FB | 	rdlong	arg02, fp
24374     28 14 06 F1 | 	add	arg02, #40
24378     1C 4E 05 F1 | 	add	fp, #28
2437c     A7 16 02 FB | 	rdlong	arg03, fp
24380     20 4E 85 F1 | 	sub	fp, #32
24384     01 18 06 F6 | 	mov	arg04, #1
24388     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
2438c     00 FA 0D F2 | 	cmp	result1, #0 wz
24390     1C 00 90 AD |  if_e	jmp	#LR__3795
24394     04 4E 05 F1 | 	add	fp, #4
24398     A7 22 02 FB | 	rdlong	local03, fp
2439c     04 4E 85 F1 | 	sub	fp, #4
243a0     11 22 06 F1 | 	add	local03, #17
243a4     11 03 48 FC | 	wrbyte	#1, local03
243a8     01 FA 05 F6 | 	mov	result1, #1
243ac     2C 01 90 FD | 	jmp	#LR__3800
243b0                 | LR__3795
243b0                 | LR__3796
243b0     04 4E 05 F1 | 	add	fp, #4
243b4     A7 22 02 FB | 	rdlong	local03, fp
243b8     1C 4E 05 F1 | 	add	fp, #28
243bc     A7 32 02 FB | 	rdlong	local11, fp
243c0     20 4E 85 F1 | 	sub	fp, #32
243c4     1C 22 06 F1 | 	add	local03, #28
243c8     11 33 62 FC | 	wrlong	local11, local03
243cc                 | LR__3797
243cc     04 4E 05 F1 | 	add	fp, #4
243d0     A7 1E 02 FB | 	rdlong	local01, fp
243d4     14 1E 06 F1 | 	add	local01, #20
243d8     0F 33 02 FB | 	rdlong	local11, local01
243dc     FF 33 06 F5 | 	and	local11, #511
243e0     09 22 C6 F9 | 	decod	local03, #9
243e4     19 23 82 F1 | 	sub	local03, local11
243e8     24 4E 05 F1 | 	add	fp, #36
243ec     A7 22 62 FC | 	wrlong	local03, fp
243f0     1C 4E 85 F1 | 	sub	fp, #28
243f4     A7 32 02 FB | 	rdlong	local11, fp
243f8     0C 4E 85 F1 | 	sub	fp, #12
243fc     19 23 1A F2 | 	cmp	local03, local11 wcz
24400     0C 4E 05 11 |  if_a	add	fp, #12
24404     A7 22 02 1B |  if_a	rdlong	local03, fp
24408     1C 4E 05 11 |  if_a	add	fp, #28
2440c     A7 22 62 1C |  if_a	wrlong	local03, fp
24410     28 4E 85 11 |  if_a	sub	fp, #40
24414     34 4E 05 F1 | 	add	fp, #52
24418     A7 12 02 FB | 	rdlong	arg01, fp
2441c     30 4E 85 F1 | 	sub	fp, #48
24420     A7 28 02 FB | 	rdlong	local06, fp
24424     14 15 02 F6 | 	mov	arg02, local06
24428     28 14 06 F1 | 	add	arg02, #40
2442c     14 28 06 F1 | 	add	local06, #20
24430     14 33 02 FB | 	rdlong	local11, local06
24434     19 2F 02 F6 | 	mov	local09, local11
24438     17 31 02 F6 | 	mov	local10, local09
2443c     FF 31 06 F5 | 	and	local10, #511
24440     18 15 02 F1 | 	add	arg02, local10
24444     24 4E 05 F1 | 	add	fp, #36
24448     A7 16 02 FB | 	rdlong	arg03, fp
2444c     28 4E 85 F1 | 	sub	fp, #40
24450     80 47 BF FD | 	call	#__system____builtin_memmove
24454                 | LR__3798
24454     0C 4E 05 F1 | 	add	fp, #12
24458     A7 22 02 FB | 	rdlong	local03, fp
2445c     1C 4E 05 F1 | 	add	fp, #28
24460     A7 2C 02 FB | 	rdlong	local08, fp
24464     16 23 82 F1 | 	sub	local03, local08
24468     1C 4E 85 F1 | 	sub	fp, #28
2446c     A7 22 62 FC | 	wrlong	local03, fp
24470     04 4E 05 F1 | 	add	fp, #4
24474     A7 1E 02 FB | 	rdlong	local01, fp
24478     0F 2B 02 FB | 	rdlong	local07, local01
2447c     18 4E 05 F1 | 	add	fp, #24
24480     A7 2C 02 FB | 	rdlong	local08, fp
24484     16 2B 02 F1 | 	add	local07, local08
24488     0F 2B 62 FC | 	wrlong	local07, local01
2448c     0C 4E 05 F1 | 	add	fp, #12
24490     A7 22 02 FB | 	rdlong	local03, fp
24494     0C 4E 85 F1 | 	sub	fp, #12
24498     A7 34 02 FB | 	rdlong	local12, fp
2449c     1A 23 02 F1 | 	add	local03, local12
244a0     0C 4E 05 F1 | 	add	fp, #12
244a4     A7 22 62 FC | 	wrlong	local03, fp
244a8     30 4E 85 F1 | 	sub	fp, #48
244ac     A7 36 02 FB | 	rdlong	local13, fp
244b0     1B 23 02 F6 | 	mov	local03, local13
244b4     14 36 06 F1 | 	add	local13, #20
244b8     1B 39 02 FB | 	rdlong	local14, local13
244bc     24 4E 05 F1 | 	add	fp, #36
244c0     A7 28 02 FB | 	rdlong	local06, fp
244c4     28 4E 85 F1 | 	sub	fp, #40
244c8     14 39 02 F1 | 	add	local14, local06
244cc     14 22 06 F1 | 	add	local03, #20
244d0     11 39 62 FC | 	wrlong	local14, local03
244d4     84 FA 9F FD | 	jmp	#LR__3782
244d8                 | LR__3799
244d8                 | ' 
244d8                 | ' 
244d8                 | ' 
244d8                 | ' 
244d8                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
244d8                 | ' 
244d8                 | ' 	}
244d8                 | ' 
244d8                 | ' 	return FR_OK ;
244d8     00 FA 05 F6 | 	mov	result1, #0
244dc                 | LR__3800
244dc     A7 F0 03 F6 | 	mov	ptra, fp
244e0     B2 00 A0 FD | 	call	#popregs_
244e4                 | _fatfs_cc_f_read_ret
244e4     2D 00 64 FD | 	ret
244e8                 | 
244e8                 | _fatfs_cc_f_write
244e8     15 4A 05 F6 | 	mov	COUNT_, #21
244ec     A8 00 A0 FD | 	call	#pushregs_
244f0     34 F0 07 F1 | 	add	ptra, #52
244f4     04 4E 05 F1 | 	add	fp, #4
244f8     A7 12 62 FC | 	wrlong	arg01, fp
244fc     04 4E 05 F1 | 	add	fp, #4
24500     A7 14 62 FC | 	wrlong	arg02, fp
24504     04 4E 05 F1 | 	add	fp, #4
24508     A7 16 62 FC | 	wrlong	arg03, fp
2450c     04 4E 05 F1 | 	add	fp, #4
24510     A7 18 62 FC | 	wrlong	arg04, fp
24514     08 4E 85 F1 | 	sub	fp, #8
24518     A7 FA 01 FB | 	rdlong	result1, fp
2451c     28 4E 05 F1 | 	add	fp, #40
24520     A7 FA 61 FC | 	wrlong	result1, fp
24524     20 4E 85 F1 | 	sub	fp, #32
24528     A7 FA 01 FB | 	rdlong	result1, fp
2452c     FD 00 68 FC | 	wrlong	#0, result1
24530     0C 4E 85 F1 | 	sub	fp, #12
24534     A7 12 02 FB | 	rdlong	arg01, fp
24538     14 4E 05 F1 | 	add	fp, #20
2453c     A7 14 02 F6 | 	mov	arg02, fp
24540     18 4E 85 F1 | 	sub	fp, #24
24544     88 F0 BF FD | 	call	#_fatfs_cc_validate
24548     14 4E 05 F1 | 	add	fp, #20
2454c     A7 FA 61 FC | 	wrlong	result1, fp
24550     00 FA 4D F2 | 	cmps	result1, #0 wz
24554     14 4E 85 F1 | 	sub	fp, #20
24558     20 00 90 5D |  if_ne	jmp	#LR__3810
2455c     04 4E 05 F1 | 	add	fp, #4
24560     A7 14 02 FB | 	rdlong	arg02, fp
24564     11 14 06 F1 | 	add	arg02, #17
24568     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
2456c     10 4E 05 F1 | 	add	fp, #16
24570     A7 14 62 FC | 	wrlong	arg02, fp
24574     14 4E 85 F1 | 	sub	fp, #20
24578     10 00 90 AD |  if_e	jmp	#LR__3811
2457c                 | LR__3810
2457c     14 4E 05 F1 | 	add	fp, #20
24580     A7 FA 01 FB | 	rdlong	result1, fp
24584     14 4E 85 F1 | 	sub	fp, #20
24588     44 07 90 FD | 	jmp	#LR__3833
2458c                 | LR__3811
2458c     04 4E 05 F1 | 	add	fp, #4
24590     A7 14 02 FB | 	rdlong	arg02, fp
24594     04 4E 85 F1 | 	sub	fp, #4
24598     10 14 06 F1 | 	add	arg02, #16
2459c     0A 15 C2 FA | 	rdbyte	arg02, arg02
245a0     02 14 CE F7 | 	test	arg02, #2 wz
245a4     07 FA 05 A6 |  if_e	mov	result1, #7
245a8     24 07 90 AD |  if_e	jmp	#LR__3833
245ac     04 4E 05 F1 | 	add	fp, #4
245b0     A7 14 02 FB | 	rdlong	arg02, fp
245b4     0A 13 02 F6 | 	mov	arg01, arg02
245b8     14 12 06 F1 | 	add	arg01, #20
245bc     09 13 02 FB | 	rdlong	arg01, arg01
245c0     08 4E 05 F1 | 	add	fp, #8
245c4     A7 FA 01 FB | 	rdlong	result1, fp
245c8     FD 12 02 F1 | 	add	arg01, result1
245cc     0C 4E 85 F1 | 	sub	fp, #12
245d0     14 14 06 F1 | 	add	arg02, #20
245d4     0A FB 01 FB | 	rdlong	result1, arg02
245d8     FD 12 12 F2 | 	cmp	arg01, result1 wc
245dc     24 00 90 3D |  if_ae	jmp	#LR__3812
245e0     04 4E 05 F1 | 	add	fp, #4
245e4     A7 14 02 FB | 	rdlong	arg02, fp
245e8     01 FA 65 F6 | 	neg	result1, #1
245ec     14 14 06 F1 | 	add	arg02, #20
245f0     0A 15 02 FB | 	rdlong	arg02, arg02
245f4     0A FB 81 F1 | 	sub	result1, arg02
245f8     08 4E 05 F1 | 	add	fp, #8
245fc     A7 FA 61 FC | 	wrlong	result1, fp
24600     0C 4E 85 F1 | 	sub	fp, #12
24604                 | LR__3812
24604                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
24604                 | ' 	}
24604                 | ' 
24604                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
24604                 | LR__3813
24604     0C 4E 05 F1 | 	add	fp, #12
24608     A7 FA 01 FB | 	rdlong	result1, fp
2460c     0C 4E 85 F1 | 	sub	fp, #12
24610     01 FA 15 F2 | 	cmp	result1, #1 wc
24614     90 06 90 CD |  if_b	jmp	#LR__3832
24618     04 4E 05 F1 | 	add	fp, #4
2461c     A7 FA 01 FB | 	rdlong	result1, fp
24620     04 4E 85 F1 | 	sub	fp, #4
24624     14 FA 05 F1 | 	add	result1, #20
24628     FD FA 01 FB | 	rdlong	result1, result1
2462c     FF FB CD F7 | 	test	result1, #511 wz
24630     D8 04 90 5D |  if_ne	jmp	#LR__3828
24634     04 4E 05 F1 | 	add	fp, #4
24638     A7 FA 01 FB | 	rdlong	result1, fp
2463c     14 FA 05 F1 | 	add	result1, #20
24640     FD FA 01 FB | 	rdlong	result1, result1
24644     09 FA 45 F0 | 	shr	result1, #9
24648     14 4E 05 F1 | 	add	fp, #20
2464c     A7 14 02 FB | 	rdlong	arg02, fp
24650     0A 14 06 F1 | 	add	arg02, #10
24654     0A 19 E2 FA | 	rdword	arg04, arg02
24658     0C 15 32 F9 | 	getword	arg02, arg04, #0
2465c     01 14 86 F1 | 	sub	arg02, #1
24660     0A FB 09 F5 | 	and	result1, arg02 wz
24664     14 4E 05 F1 | 	add	fp, #20
24668     A7 FA 61 FC | 	wrlong	result1, fp
2466c     2C 4E 85 F1 | 	sub	fp, #44
24670     44 01 90 5D |  if_ne	jmp	#LR__3819
24674     04 4E 05 F1 | 	add	fp, #4
24678     A7 FA 01 FB | 	rdlong	result1, fp
2467c     04 4E 85 F1 | 	sub	fp, #4
24680     14 FA 05 F1 | 	add	result1, #20
24684     FD 14 0A FB | 	rdlong	arg02, result1 wz
24688     44 00 90 5D |  if_ne	jmp	#LR__3814
2468c     04 4E 05 F1 | 	add	fp, #4
24690     A7 14 02 FB | 	rdlong	arg02, fp
24694     08 14 06 F1 | 	add	arg02, #8
24698     0A 15 0A FB | 	rdlong	arg02, arg02 wz
2469c     18 4E 05 F1 | 	add	fp, #24
246a0     A7 14 62 FC | 	wrlong	arg02, fp
246a4     1C 4E 85 F1 | 	sub	fp, #28
246a8     4C 00 90 5D |  if_ne	jmp	#LR__3815
246ac     04 4E 05 F1 | 	add	fp, #4
246b0     A7 12 02 FB | 	rdlong	arg01, fp
246b4     04 4E 85 F1 | 	sub	fp, #4
246b8     00 14 06 F6 | 	mov	arg02, #0
246bc     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
246c0     1C 4E 05 F1 | 	add	fp, #28
246c4     A7 FA 61 FC | 	wrlong	result1, fp
246c8     1C 4E 85 F1 | 	sub	fp, #28
246cc     28 00 90 FD | 	jmp	#LR__3815
246d0                 | LR__3814
246d0     04 4E 05 F1 | 	add	fp, #4
246d4     A7 18 02 FB | 	rdlong	arg04, fp
246d8     0C 13 02 F6 | 	mov	arg01, arg04
246dc     04 4E 85 F1 | 	sub	fp, #4
246e0     18 18 06 F1 | 	add	arg04, #24
246e4     0C 15 02 FB | 	rdlong	arg02, arg04
246e8     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
246ec     1C 4E 05 F1 | 	add	fp, #28
246f0     A7 FA 61 FC | 	wrlong	result1, fp
246f4     1C 4E 85 F1 | 	sub	fp, #28
246f8                 | LR__3815
246f8     1C 4E 05 F1 | 	add	fp, #28
246fc     A7 FA 09 FB | 	rdlong	result1, fp wz
24700     1C 4E 85 F1 | 	sub	fp, #28
24704     A0 05 90 AD |  if_e	jmp	#LR__3832
24708     1C 4E 05 F1 | 	add	fp, #28
2470c     A7 FA 01 FB | 	rdlong	result1, fp
24710     1C 4E 85 F1 | 	sub	fp, #28
24714     01 FA 0D F2 | 	cmp	result1, #1 wz
24718     1C 00 90 5D |  if_ne	jmp	#LR__3816
2471c     04 4E 05 F1 | 	add	fp, #4
24720     A7 FA 01 FB | 	rdlong	result1, fp
24724     04 4E 85 F1 | 	sub	fp, #4
24728     11 FA 05 F1 | 	add	result1, #17
2472c     FD 04 48 FC | 	wrbyte	#2, result1
24730     02 FA 05 F6 | 	mov	result1, #2
24734     98 05 90 FD | 	jmp	#LR__3833
24738                 | LR__3816
24738     1C 4E 05 F1 | 	add	fp, #28
2473c     A7 FA 01 FB | 	rdlong	result1, fp
24740     1C 4E 85 F1 | 	sub	fp, #28
24744     FF FF 7F FF 
24748     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2474c     1C 00 90 5D |  if_ne	jmp	#LR__3817
24750     04 4E 05 F1 | 	add	fp, #4
24754     A7 FA 01 FB | 	rdlong	result1, fp
24758     04 4E 85 F1 | 	sub	fp, #4
2475c     11 FA 05 F1 | 	add	result1, #17
24760     FD 02 48 FC | 	wrbyte	#1, result1
24764     01 FA 05 F6 | 	mov	result1, #1
24768     64 05 90 FD | 	jmp	#LR__3833
2476c                 | LR__3817
2476c     04 4E 05 F1 | 	add	fp, #4
24770     A7 FA 01 FB | 	rdlong	result1, fp
24774     18 4E 05 F1 | 	add	fp, #24
24778     A7 18 02 FB | 	rdlong	arg04, fp
2477c     18 FA 05 F1 | 	add	result1, #24
24780     FD 18 62 FC | 	wrlong	arg04, result1
24784     18 4E 85 F1 | 	sub	fp, #24
24788     A7 FA 01 FB | 	rdlong	result1, fp
2478c     04 4E 85 F1 | 	sub	fp, #4
24790     08 FA 05 F1 | 	add	result1, #8
24794     FD FA 09 FB | 	rdlong	result1, result1 wz
24798     1C 00 90 5D |  if_ne	jmp	#LR__3818
2479c     04 4E 05 F1 | 	add	fp, #4
247a0     A7 18 02 FB | 	rdlong	arg04, fp
247a4     18 4E 05 F1 | 	add	fp, #24
247a8     A7 FA 01 FB | 	rdlong	result1, fp
247ac     1C 4E 85 F1 | 	sub	fp, #28
247b0     08 18 06 F1 | 	add	arg04, #8
247b4     0C FB 61 FC | 	wrlong	result1, arg04
247b8                 | LR__3818
247b8                 | LR__3819
247b8     04 4E 05 F1 | 	add	fp, #4
247bc     A7 18 02 FB | 	rdlong	arg04, fp
247c0     04 4E 85 F1 | 	sub	fp, #4
247c4     10 18 06 F1 | 	add	arg04, #16
247c8     0C 19 C2 FA | 	rdbyte	arg04, arg04
247cc     80 18 CE F7 | 	test	arg04, #128 wz
247d0     7C 00 90 AD |  if_e	jmp	#LR__3821
247d4     18 4E 05 F1 | 	add	fp, #24
247d8     A7 18 02 FB | 	rdlong	arg04, fp
247dc     01 18 06 F1 | 	add	arg04, #1
247e0     0C 13 C2 FA | 	rdbyte	arg01, arg04
247e4     14 4E 85 F1 | 	sub	fp, #20
247e8     A7 18 02 FB | 	rdlong	arg04, fp
247ec     0C 15 02 F6 | 	mov	arg02, arg04
247f0     28 14 06 F1 | 	add	arg02, #40
247f4     04 4E 85 F1 | 	sub	fp, #4
247f8     1C 18 06 F1 | 	add	arg04, #28
247fc     0C 17 02 FB | 	rdlong	arg03, arg04
24800     01 18 06 F6 | 	mov	arg04, #1
24804     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
24808     00 FA 0D F2 | 	cmp	result1, #0 wz
2480c     1C 00 90 AD |  if_e	jmp	#LR__3820
24810     04 4E 05 F1 | 	add	fp, #4
24814     A7 FA 01 FB | 	rdlong	result1, fp
24818     04 4E 85 F1 | 	sub	fp, #4
2481c     11 FA 05 F1 | 	add	result1, #17
24820     FD 02 48 FC | 	wrbyte	#1, result1
24824     01 FA 05 F6 | 	mov	result1, #1
24828     A4 04 90 FD | 	jmp	#LR__3833
2482c                 | LR__3820
2482c     04 4E 05 F1 | 	add	fp, #4
24830     A7 18 02 FB | 	rdlong	arg04, fp
24834     0C FB 01 F6 | 	mov	result1, arg04
24838     04 4E 85 F1 | 	sub	fp, #4
2483c     10 18 06 F1 | 	add	arg04, #16
24840     0C 19 C2 FA | 	rdbyte	arg04, arg04
24844     7F 18 06 F5 | 	and	arg04, #127
24848     10 FA 05 F1 | 	add	result1, #16
2484c     FD 18 42 FC | 	wrbyte	arg04, result1
24850                 | LR__3821
24850     18 4E 05 F1 | 	add	fp, #24
24854     A7 12 02 FB | 	rdlong	arg01, fp
24858     14 4E 85 F1 | 	sub	fp, #20
2485c     A7 14 02 FB | 	rdlong	arg02, fp
24860     04 4E 85 F1 | 	sub	fp, #4
24864     18 14 06 F1 | 	add	arg02, #24
24868     0A 15 02 FB | 	rdlong	arg02, arg02
2486c     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
24870     20 4E 05 F1 | 	add	fp, #32
24874     A7 FA 61 FC | 	wrlong	result1, fp
24878     20 4E 85 F1 | 	sub	fp, #32
2487c     00 FA 0D F2 | 	cmp	result1, #0 wz
24880     1C 00 90 5D |  if_ne	jmp	#LR__3822
24884     04 4E 05 F1 | 	add	fp, #4
24888     A7 FA 01 FB | 	rdlong	result1, fp
2488c     04 4E 85 F1 | 	sub	fp, #4
24890     11 FA 05 F1 | 	add	result1, #17
24894     FD 04 48 FC | 	wrbyte	#2, result1
24898     02 FA 05 F6 | 	mov	result1, #2
2489c     30 04 90 FD | 	jmp	#LR__3833
248a0                 | LR__3822
248a0     20 4E 05 F1 | 	add	fp, #32
248a4     A7 FA 01 FB | 	rdlong	result1, fp
248a8     0C 4E 05 F1 | 	add	fp, #12
248ac     A7 1E 02 FB | 	rdlong	local01, fp
248b0     0F FB 01 F1 | 	add	result1, local01
248b4     0C 4E 85 F1 | 	sub	fp, #12
248b8     A7 FA 61 FC | 	wrlong	result1, fp
248bc     14 4E 85 F1 | 	sub	fp, #20
248c0     A7 FA 01 FB | 	rdlong	result1, fp
248c4     09 FA 45 F0 | 	shr	result1, #9
248c8     1C 4E 05 F1 | 	add	fp, #28
248cc     A7 FA 61 FC | 	wrlong	result1, fp
248d0     28 4E 85 F1 | 	sub	fp, #40
248d4     01 FA 15 F2 | 	cmp	result1, #1 wc
248d8     60 01 90 CD |  if_b	jmp	#LR__3826
248dc     2C 4E 05 F1 | 	add	fp, #44
248e0     A7 FA 01 FB | 	rdlong	result1, fp
248e4     04 4E 85 F1 | 	sub	fp, #4
248e8     A7 18 02 FB | 	rdlong	arg04, fp
248ec     0C FB 01 F1 | 	add	result1, arg04
248f0     10 4E 85 F1 | 	sub	fp, #16
248f4     A7 18 02 FB | 	rdlong	arg04, fp
248f8     18 4E 85 F1 | 	sub	fp, #24
248fc     0A 18 06 F1 | 	add	arg04, #10
24900     0C 19 E2 FA | 	rdword	arg04, arg04
24904     0C FB 19 F2 | 	cmp	result1, arg04 wcz
24908     28 00 90 ED |  if_be	jmp	#LR__3823
2490c     18 4E 05 F1 | 	add	fp, #24
24910     A7 FA 01 FB | 	rdlong	result1, fp
24914     0A FA 05 F1 | 	add	result1, #10
24918     FD FA E1 FA | 	rdword	result1, result1
2491c     14 4E 05 F1 | 	add	fp, #20
24920     A7 18 02 FB | 	rdlong	arg04, fp
24924     0C FB 81 F1 | 	sub	result1, arg04
24928     04 4E 85 F1 | 	sub	fp, #4
2492c     A7 FA 61 FC | 	wrlong	result1, fp
24930     28 4E 85 F1 | 	sub	fp, #40
24934                 | LR__3823
24934     18 4E 05 F1 | 	add	fp, #24
24938     A7 18 02 FB | 	rdlong	arg04, fp
2493c     01 18 06 F1 | 	add	arg04, #1
24940     0C 13 C2 FA | 	rdbyte	arg01, arg04
24944     18 4E 05 F1 | 	add	fp, #24
24948     A7 14 02 FB | 	rdlong	arg02, fp
2494c     10 4E 85 F1 | 	sub	fp, #16
24950     A7 16 02 FB | 	rdlong	arg03, fp
24954     08 4E 05 F1 | 	add	fp, #8
24958     A7 18 02 FB | 	rdlong	arg04, fp
2495c     28 4E 85 F1 | 	sub	fp, #40
24960     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
24964     00 FA 0D F2 | 	cmp	result1, #0 wz
24968     1C 00 90 AD |  if_e	jmp	#LR__3824
2496c     04 4E 05 F1 | 	add	fp, #4
24970     A7 1E 02 FB | 	rdlong	local01, fp
24974     04 4E 85 F1 | 	sub	fp, #4
24978     11 1E 06 F1 | 	add	local01, #17
2497c     0F 03 48 FC | 	wrbyte	#1, local01
24980     01 FA 05 F6 | 	mov	result1, #1
24984     48 03 90 FD | 	jmp	#LR__3833
24988                 | LR__3824
24988     04 4E 05 F1 | 	add	fp, #4
2498c     A7 FA 01 FB | 	rdlong	result1, fp
24990     1C FA 05 F1 | 	add	result1, #28
24994     FD FA 01 FB | 	rdlong	result1, result1
24998     1C 4E 05 F1 | 	add	fp, #28
2499c     A7 20 02 FB | 	rdlong	local02, fp
249a0     10 FB 81 F1 | 	sub	result1, local02
249a4     08 4E 05 F1 | 	add	fp, #8
249a8     A7 18 02 FB | 	rdlong	arg04, fp
249ac     28 4E 85 F1 | 	sub	fp, #40
249b0     0C FB 11 F2 | 	cmp	result1, arg04 wc
249b4     68 00 90 3D |  if_ae	jmp	#LR__3825
249b8     04 4E 05 F1 | 	add	fp, #4
249bc     A7 12 02 FB | 	rdlong	arg01, fp
249c0     28 12 06 F1 | 	add	arg01, #40
249c4     2C 4E 05 F1 | 	add	fp, #44
249c8     A7 14 02 FB | 	rdlong	arg02, fp
249cc     2C 4E 85 F1 | 	sub	fp, #44
249d0     A7 FA 01 FB | 	rdlong	result1, fp
249d4     1C FA 05 F1 | 	add	result1, #28
249d8     FD 22 02 FB | 	rdlong	local03, result1
249dc     1C 4E 05 F1 | 	add	fp, #28
249e0     A7 18 02 FB | 	rdlong	arg04, fp
249e4     20 4E 85 F1 | 	sub	fp, #32
249e8     0C 23 82 F1 | 	sub	local03, arg04
249ec     09 22 66 F0 | 	shl	local03, #9
249f0     11 15 02 F1 | 	add	arg02, local03
249f4     09 16 C6 F9 | 	decod	arg03, #9
249f8     D8 41 BF FD | 	call	#__system____builtin_memmove
249fc     04 4E 05 F1 | 	add	fp, #4
24a00     A7 18 02 FB | 	rdlong	arg04, fp
24a04     0C FB 01 F6 | 	mov	result1, arg04
24a08     04 4E 85 F1 | 	sub	fp, #4
24a0c     10 18 06 F1 | 	add	arg04, #16
24a10     0C 19 C2 FA | 	rdbyte	arg04, arg04
24a14     7F 18 06 F5 | 	and	arg04, #127
24a18     10 FA 05 F1 | 	add	result1, #16
24a1c     FD 18 42 FC | 	wrbyte	arg04, result1
24a20                 | LR__3825
24a20     28 4E 05 F1 | 	add	fp, #40
24a24     A7 FA 01 FB | 	rdlong	result1, fp
24a28     09 FA 65 F0 | 	shl	result1, #9
24a2c     04 4E 85 F1 | 	sub	fp, #4
24a30     A7 FA 61 FC | 	wrlong	result1, fp
24a34     24 4E 85 F1 | 	sub	fp, #36
24a38                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
24a38                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
24a38                 | ' 				}
24a38                 | ' 
24a38                 | ' 
24a38                 | ' 				wcnt =  ((UINT) 512 )  * cc;
24a38                 | ' 				continue;
24a38     74 01 90 FD | 	jmp	#LR__3829
24a3c                 | LR__3826
24a3c     04 4E 05 F1 | 	add	fp, #4
24a40     A7 20 02 FB | 	rdlong	local02, fp
24a44     1C 20 06 F1 | 	add	local02, #28
24a48     10 FB 01 FB | 	rdlong	result1, local02
24a4c     1C 4E 05 F1 | 	add	fp, #28
24a50     A7 20 02 FB | 	rdlong	local02, fp
24a54     20 4E 85 F1 | 	sub	fp, #32
24a58     10 FB 09 F2 | 	cmp	result1, local02 wz
24a5c     90 00 90 AD |  if_e	jmp	#LR__3827
24a60     04 4E 05 F1 | 	add	fp, #4
24a64     A7 FA 01 FB | 	rdlong	result1, fp
24a68     FD 22 02 F6 | 	mov	local03, result1
24a6c     04 4E 85 F1 | 	sub	fp, #4
24a70     14 22 06 F1 | 	add	local03, #20
24a74     11 23 02 FB | 	rdlong	local03, local03
24a78     0C FA 05 F1 | 	add	result1, #12
24a7c     FD 24 02 FB | 	rdlong	local04, result1
24a80     12 27 02 F6 | 	mov	local05, local04
24a84     13 23 12 F2 | 	cmp	local03, local05 wc
24a88     64 00 90 3D |  if_ae	jmp	#LR__3827
24a8c     18 4E 05 F1 | 	add	fp, #24
24a90     A7 18 02 FB | 	rdlong	arg04, fp
24a94     01 18 06 F1 | 	add	arg04, #1
24a98     0C 13 C2 FA | 	rdbyte	arg01, arg04
24a9c     14 4E 85 F1 | 	sub	fp, #20
24aa0     A7 28 02 FB | 	rdlong	local06, fp
24aa4     28 28 06 F1 | 	add	local06, #40
24aa8     14 2B 02 F6 | 	mov	local07, local06
24aac     1C 4E 05 F1 | 	add	fp, #28
24ab0     A7 2C 02 FB | 	rdlong	local08, fp
24ab4     20 4E 85 F1 | 	sub	fp, #32
24ab8     01 2E 06 F6 | 	mov	local09, #1
24abc     15 15 02 F6 | 	mov	arg02, local07
24ac0     16 17 02 F6 | 	mov	arg03, local08
24ac4     01 18 06 F6 | 	mov	arg04, #1
24ac8     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
24acc     FD 30 0A F6 | 	mov	local10, result1 wz
24ad0     1C 00 90 AD |  if_e	jmp	#LR__3827
24ad4     04 4E 05 F1 | 	add	fp, #4
24ad8     A7 30 02 FB | 	rdlong	local10, fp
24adc     04 4E 85 F1 | 	sub	fp, #4
24ae0     11 30 06 F1 | 	add	local10, #17
24ae4     18 03 48 FC | 	wrbyte	#1, local10
24ae8                 | ' 				fp->fptr < fp->obj.objsize &&
24ae8                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
24ae8                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
24ae8     01 FA 05 F6 | 	mov	result1, #1
24aec     E0 01 90 FD | 	jmp	#LR__3833
24af0                 | LR__3827
24af0     04 4E 05 F1 | 	add	fp, #4
24af4     A7 18 02 FB | 	rdlong	arg04, fp
24af8     1C 4E 05 F1 | 	add	fp, #28
24afc     A7 FA 01 FB | 	rdlong	result1, fp
24b00     20 4E 85 F1 | 	sub	fp, #32
24b04     1C 18 06 F1 | 	add	arg04, #28
24b08     0C FB 61 FC | 	wrlong	result1, arg04
24b0c                 | LR__3828
24b0c     04 4E 05 F1 | 	add	fp, #4
24b10     A7 FA 01 FB | 	rdlong	result1, fp
24b14     14 FA 05 F1 | 	add	result1, #20
24b18     FD FA 01 FB | 	rdlong	result1, result1
24b1c     FF FB 05 F5 | 	and	result1, #511
24b20     09 32 C6 F9 | 	decod	local11, #9
24b24     FD 32 82 F1 | 	sub	local11, result1
24b28     20 4E 05 F1 | 	add	fp, #32
24b2c     A7 32 62 FC | 	wrlong	local11, fp
24b30     18 4E 85 F1 | 	sub	fp, #24
24b34     A7 FA 01 FB | 	rdlong	result1, fp
24b38     0C 4E 85 F1 | 	sub	fp, #12
24b3c     FD 32 1A F2 | 	cmp	local11, result1 wcz
24b40     0C 4E 05 11 |  if_a	add	fp, #12
24b44     A7 32 02 1B |  if_a	rdlong	local11, fp
24b48     18 4E 05 11 |  if_a	add	fp, #24
24b4c     A7 32 62 1C |  if_a	wrlong	local11, fp
24b50     24 4E 85 11 |  if_a	sub	fp, #36
24b54     04 4E 05 F1 | 	add	fp, #4
24b58     A7 32 02 FB | 	rdlong	local11, fp
24b5c     19 13 02 F6 | 	mov	arg01, local11
24b60     28 12 06 F1 | 	add	arg01, #40
24b64     14 32 06 F1 | 	add	local11, #20
24b68     19 33 02 FB | 	rdlong	local11, local11
24b6c     FF 33 06 F5 | 	and	local11, #511
24b70     19 13 02 F1 | 	add	arg01, local11
24b74     2C 4E 05 F1 | 	add	fp, #44
24b78     A7 14 02 FB | 	rdlong	arg02, fp
24b7c     0C 4E 85 F1 | 	sub	fp, #12
24b80     A7 16 02 FB | 	rdlong	arg03, fp
24b84     24 4E 85 F1 | 	sub	fp, #36
24b88     48 40 BF FD | 	call	#__system____builtin_memmove
24b8c     04 4E 05 F1 | 	add	fp, #4
24b90     A7 FA 01 FB | 	rdlong	result1, fp
24b94     FD 32 02 F6 | 	mov	local11, result1
24b98     04 4E 85 F1 | 	sub	fp, #4
24b9c     10 FA 05 F1 | 	add	result1, #16
24ba0     FD FA C1 FA | 	rdbyte	result1, result1
24ba4     80 FA 45 F5 | 	or	result1, #128
24ba8     10 32 06 F1 | 	add	local11, #16
24bac     19 FB 41 FC | 	wrbyte	result1, local11
24bb0                 | LR__3829
24bb0     0C 4E 05 F1 | 	add	fp, #12
24bb4     A7 32 02 FB | 	rdlong	local11, fp
24bb8     18 4E 05 F1 | 	add	fp, #24
24bbc     A7 FA 01 FB | 	rdlong	result1, fp
24bc0     FD 32 82 F1 | 	sub	local11, result1
24bc4     18 4E 85 F1 | 	sub	fp, #24
24bc8     A7 32 62 FC | 	wrlong	local11, fp
24bcc     04 4E 05 F1 | 	add	fp, #4
24bd0     A7 34 02 FB | 	rdlong	local12, fp
24bd4     1A 33 02 FB | 	rdlong	local11, local12
24bd8     14 4E 05 F1 | 	add	fp, #20
24bdc     A7 36 02 FB | 	rdlong	local13, fp
24be0     1B 33 02 F1 | 	add	local11, local13
24be4     1A 33 62 FC | 	wrlong	local11, local12
24be8     0C 4E 05 F1 | 	add	fp, #12
24bec     A7 32 02 FB | 	rdlong	local11, fp
24bf0     0C 4E 85 F1 | 	sub	fp, #12
24bf4     A7 38 02 FB | 	rdlong	local14, fp
24bf8     1C 33 02 F1 | 	add	local11, local14
24bfc     0C 4E 05 F1 | 	add	fp, #12
24c00     A7 32 62 FC | 	wrlong	local11, fp
24c04     2C 4E 85 F1 | 	sub	fp, #44
24c08     A7 3A 02 FB | 	rdlong	local15, fp
24c0c     1D 33 02 F6 | 	mov	local11, local15
24c10     14 3A 06 F1 | 	add	local15, #20
24c14     1D 3B 02 FB | 	rdlong	local15, local15
24c18     20 4E 05 F1 | 	add	fp, #32
24c1c     A7 3C 02 FB | 	rdlong	local16, fp
24c20     1E 3B 02 F1 | 	add	local15, local16
24c24     14 32 06 F1 | 	add	local11, #20
24c28     19 3B 62 FC | 	wrlong	local15, local11
24c2c     20 4E 85 F1 | 	sub	fp, #32
24c30     A7 3E 02 FB | 	rdlong	local17, fp
24c34     1F 33 02 F6 | 	mov	local11, local17
24c38     1F 41 02 F6 | 	mov	local18, local17
24c3c     04 4E 85 F1 | 	sub	fp, #4
24c40     14 3E 06 F1 | 	add	local17, #20
24c44     1F 43 02 FB | 	rdlong	local19, local17
24c48     0C 40 06 F1 | 	add	local18, #12
24c4c     20 45 02 FB | 	rdlong	local20, local18
24c50     22 43 1A F2 | 	cmp	local19, local20 wcz
24c54     24 00 90 ED |  if_be	jmp	#LR__3830
24c58     04 4E 05 F1 | 	add	fp, #4
24c5c     A7 26 02 FB | 	rdlong	local05, fp
24c60     04 4E 85 F1 | 	sub	fp, #4
24c64     13 23 02 F6 | 	mov	local03, local05
24c68     14 22 06 F1 | 	add	local03, #20
24c6c     11 25 02 FB | 	rdlong	local04, local03
24c70     14 22 86 F1 | 	sub	local03, #20
24c74     12 47 02 F6 | 	mov	local21, local04
24c78     20 00 90 FD | 	jmp	#LR__3831
24c7c                 | LR__3830
24c7c     04 4E 05 F1 | 	add	fp, #4
24c80     A7 2A 02 FB | 	rdlong	local07, fp
24c84     04 4E 85 F1 | 	sub	fp, #4
24c88     15 31 02 F6 | 	mov	local10, local07
24c8c     0C 30 06 F1 | 	add	local10, #12
24c90     18 2D 02 FB | 	rdlong	local08, local10
24c94     0C 30 86 F1 | 	sub	local10, #12
24c98     16 47 02 F6 | 	mov	local21, local08
24c9c                 | LR__3831
24c9c     0C 32 06 F1 | 	add	local11, #12
24ca0     19 47 62 FC | 	wrlong	local21, local11
24ca4     5C F9 9F FD | 	jmp	#LR__3813
24ca8                 | LR__3832
24ca8     04 4E 05 F1 | 	add	fp, #4
24cac     A7 34 02 FB | 	rdlong	local12, fp
24cb0     1A 1F 02 F6 | 	mov	local01, local12
24cb4     04 4E 85 F1 | 	sub	fp, #4
24cb8     10 34 06 F1 | 	add	local12, #16
24cbc     1A 33 C2 FA | 	rdbyte	local11, local12
24cc0     40 32 46 F5 | 	or	local11, #64
24cc4     10 1E 06 F1 | 	add	local01, #16
24cc8     0F 33 42 FC | 	wrbyte	local11, local01
24ccc                 | ' 
24ccc                 | ' 
24ccc                 | ' 
24ccc                 | ' 
24ccc                 | ' 
24ccc                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
24ccc                 | ' 		fp->flag |=  0x80 ;
24ccc                 | ' 
24ccc                 | ' 	}
24ccc                 | ' 
24ccc                 | ' 	fp->flag |=  0x40 ;
24ccc                 | ' 
24ccc                 | ' 	return FR_OK ;
24ccc     00 FA 05 F6 | 	mov	result1, #0
24cd0                 | LR__3833
24cd0     A7 F0 03 F6 | 	mov	ptra, fp
24cd4     B2 00 A0 FD | 	call	#popregs_
24cd8                 | _fatfs_cc_f_write_ret
24cd8     2D 00 64 FD | 	ret
24cdc                 | 
24cdc                 | _fatfs_cc_f_sync
24cdc     00 4A 05 F6 | 	mov	COUNT_, #0
24ce0     A8 00 A0 FD | 	call	#pushregs_
24ce4     18 F0 07 F1 | 	add	ptra, #24
24ce8     04 4E 05 F1 | 	add	fp, #4
24cec     A7 12 62 FC | 	wrlong	arg01, fp
24cf0     08 4E 05 F1 | 	add	fp, #8
24cf4     A7 14 02 F6 | 	mov	arg02, fp
24cf8     0C 4E 85 F1 | 	sub	fp, #12
24cfc     D0 E8 BF FD | 	call	#_fatfs_cc_validate
24d00     08 4E 05 F1 | 	add	fp, #8
24d04     A7 FA 61 FC | 	wrlong	result1, fp
24d08     08 4E 85 F1 | 	sub	fp, #8
24d0c     00 FA 0D F2 | 	cmp	result1, #0 wz
24d10     C0 01 90 5D |  if_ne	jmp	#LR__3843
24d14     04 4E 05 F1 | 	add	fp, #4
24d18     A7 18 02 FB | 	rdlong	arg04, fp
24d1c     04 4E 85 F1 | 	sub	fp, #4
24d20     10 18 06 F1 | 	add	arg04, #16
24d24     0C 19 C2 FA | 	rdbyte	arg04, arg04
24d28     40 18 CE F7 | 	test	arg04, #64 wz
24d2c     A4 01 90 AD |  if_e	jmp	#LR__3842
24d30     04 4E 05 F1 | 	add	fp, #4
24d34     A7 18 02 FB | 	rdlong	arg04, fp
24d38     04 4E 85 F1 | 	sub	fp, #4
24d3c     10 18 06 F1 | 	add	arg04, #16
24d40     0C 19 C2 FA | 	rdbyte	arg04, arg04
24d44     80 18 CE F7 | 	test	arg04, #128 wz
24d48     64 00 90 AD |  if_e	jmp	#LR__3840
24d4c     0C 4E 05 F1 | 	add	fp, #12
24d50     A7 18 02 FB | 	rdlong	arg04, fp
24d54     01 18 06 F1 | 	add	arg04, #1
24d58     0C 13 C2 FA | 	rdbyte	arg01, arg04
24d5c     08 4E 85 F1 | 	sub	fp, #8
24d60     A7 18 02 FB | 	rdlong	arg04, fp
24d64     0C 15 02 F6 | 	mov	arg02, arg04
24d68     28 14 06 F1 | 	add	arg02, #40
24d6c     04 4E 85 F1 | 	sub	fp, #4
24d70     1C 18 06 F1 | 	add	arg04, #28
24d74     0C 17 02 FB | 	rdlong	arg03, arg04
24d78     01 18 06 F6 | 	mov	arg04, #1
24d7c     0C AE BF FD | 	call	#_fatfs_cc_disk_write
24d80     00 FA 0D F2 | 	cmp	result1, #0 wz
24d84     01 FA 05 56 |  if_ne	mov	result1, #1
24d88     54 01 90 5D |  if_ne	jmp	#LR__3844
24d8c     04 4E 05 F1 | 	add	fp, #4
24d90     A7 18 02 FB | 	rdlong	arg04, fp
24d94     0C 17 02 F6 | 	mov	arg03, arg04
24d98     04 4E 85 F1 | 	sub	fp, #4
24d9c     10 18 06 F1 | 	add	arg04, #16
24da0     0C 19 C2 FA | 	rdbyte	arg04, arg04
24da4     7F 18 06 F5 | 	and	arg04, #127
24da8     10 16 06 F1 | 	add	arg03, #16
24dac     0B 19 42 FC | 	wrbyte	arg04, arg03
24db0                 | LR__3840
24db0     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
24db4     10 4E 05 F1 | 	add	fp, #16
24db8     A7 FA 61 FC | 	wrlong	result1, fp
24dbc     04 4E 85 F1 | 	sub	fp, #4
24dc0     A7 12 02 FB | 	rdlong	arg01, fp
24dc4     08 4E 85 F1 | 	sub	fp, #8
24dc8     A7 18 02 FB | 	rdlong	arg04, fp
24dcc     04 4E 85 F1 | 	sub	fp, #4
24dd0     20 18 06 F1 | 	add	arg04, #32
24dd4     0C 15 02 FB | 	rdlong	arg02, arg04
24dd8     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
24ddc     08 4E 05 F1 | 	add	fp, #8
24de0     A7 FA 61 FC | 	wrlong	result1, fp
24de4     08 4E 85 F1 | 	sub	fp, #8
24de8     00 FA 0D F2 | 	cmp	result1, #0 wz
24dec     E4 00 90 5D |  if_ne	jmp	#LR__3841
24df0     04 4E 05 F1 | 	add	fp, #4
24df4     A7 18 02 FB | 	rdlong	arg04, fp
24df8     24 18 06 F1 | 	add	arg04, #36
24dfc     0C 19 02 FB | 	rdlong	arg04, arg04
24e00     10 4E 05 F1 | 	add	fp, #16
24e04     A7 18 62 FC | 	wrlong	arg04, fp
24e08     0C 17 02 F6 | 	mov	arg03, arg04
24e0c     0B 16 06 F1 | 	add	arg03, #11
24e10     0B 17 C2 FA | 	rdbyte	arg03, arg03
24e14     20 16 46 F5 | 	or	arg03, #32
24e18     0B 18 06 F1 | 	add	arg04, #11
24e1c     0C 17 42 FC | 	wrbyte	arg03, arg04
24e20     10 4E 85 F1 | 	sub	fp, #16
24e24     A7 18 02 FB | 	rdlong	arg04, fp
24e28     0C 13 02 FB | 	rdlong	arg01, arg04
24e2c     10 4E 05 F1 | 	add	fp, #16
24e30     A7 14 02 FB | 	rdlong	arg02, fp
24e34     14 4E 85 F1 | 	sub	fp, #20
24e38     08 18 06 F1 | 	add	arg04, #8
24e3c     0C 17 02 FB | 	rdlong	arg03, arg04
24e40     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
24e44     14 4E 05 F1 | 	add	fp, #20
24e48     A7 12 02 FB | 	rdlong	arg01, fp
24e4c     1C 12 06 F1 | 	add	arg01, #28
24e50     10 4E 85 F1 | 	sub	fp, #16
24e54     A7 18 02 FB | 	rdlong	arg04, fp
24e58     0C 18 06 F1 | 	add	arg04, #12
24e5c     0C 15 02 FB | 	rdlong	arg02, arg04
24e60     09 15 62 FC | 	wrlong	arg02, arg01
24e64     10 4E 05 F1 | 	add	fp, #16
24e68     A7 12 02 FB | 	rdlong	arg01, fp
24e6c     16 12 06 F1 | 	add	arg01, #22
24e70     04 4E 85 F1 | 	sub	fp, #4
24e74     A7 14 02 FB | 	rdlong	arg02, fp
24e78     09 15 62 FC | 	wrlong	arg02, arg01
24e7c     04 4E 05 F1 | 	add	fp, #4
24e80     A7 12 02 FB | 	rdlong	arg01, fp
24e84     12 12 06 F1 | 	add	arg01, #18
24e88     09 01 58 FC | 	wrword	#0, arg01
24e8c     08 4E 85 F1 | 	sub	fp, #8
24e90     A7 18 02 FB | 	rdlong	arg04, fp
24e94     03 18 06 F1 | 	add	arg04, #3
24e98     0C 03 48 FC | 	wrbyte	#1, arg04
24e9c     A7 12 02 FB | 	rdlong	arg01, fp
24ea0     0C 4E 85 F1 | 	sub	fp, #12
24ea4     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
24ea8     08 4E 05 F1 | 	add	fp, #8
24eac     A7 FA 61 FC | 	wrlong	result1, fp
24eb0     04 4E 85 F1 | 	sub	fp, #4
24eb4     A7 18 02 FB | 	rdlong	arg04, fp
24eb8     0C 17 02 F6 | 	mov	arg03, arg04
24ebc     04 4E 85 F1 | 	sub	fp, #4
24ec0     10 18 06 F1 | 	add	arg04, #16
24ec4     0C 19 C2 FA | 	rdbyte	arg04, arg04
24ec8     BF 18 06 F5 | 	and	arg04, #191
24ecc     10 16 06 F1 | 	add	arg03, #16
24ed0     0B 19 42 FC | 	wrbyte	arg04, arg03
24ed4                 | LR__3841
24ed4                 | LR__3842
24ed4                 | LR__3843
24ed4                 | ' 					dir = fp->dir_ptr;
24ed4                 | ' 					dir[ 11 ] |=  0x20 ;
24ed4                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
24ed4                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
24ed4                 | ' 					st_dword(dir +  22 , tm);
24ed4                 | ' 					st_word(dir +  18 , 0);
24ed4                 | ' 					fs->wflag = 1;
24ed4                 | ' 					res = sync_fs(fs);
24ed4                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
24ed4                 | ' 				}
24ed4                 | ' 			}
24ed4                 | ' 		}
24ed4                 | ' 	}
24ed4                 | ' 
24ed4                 | ' 	return res ;
24ed4     08 4E 05 F1 | 	add	fp, #8
24ed8     A7 FA 01 FB | 	rdlong	result1, fp
24edc     08 4E 85 F1 | 	sub	fp, #8
24ee0                 | LR__3844
24ee0     A7 F0 03 F6 | 	mov	ptra, fp
24ee4     B2 00 A0 FD | 	call	#popregs_
24ee8                 | _fatfs_cc_f_sync_ret
24ee8     2D 00 64 FD | 	ret
24eec                 | 
24eec                 | _fatfs_cc_f_close
24eec     01 4A 05 F6 | 	mov	COUNT_, #1
24ef0     A8 00 A0 FD | 	call	#pushregs_
24ef4     10 F0 07 F1 | 	add	ptra, #16
24ef8     04 4E 05 F1 | 	add	fp, #4
24efc     A7 12 62 FC | 	wrlong	arg01, fp
24f00     04 4E 85 F1 | 	sub	fp, #4
24f04     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
24f08     08 4E 05 F1 | 	add	fp, #8
24f0c     A7 FA 61 FC | 	wrlong	result1, fp
24f10     08 4E 85 F1 | 	sub	fp, #8
24f14     00 FA 0D F2 | 	cmp	result1, #0 wz
24f18     38 00 90 5D |  if_ne	jmp	#LR__3850
24f1c     04 4E 05 F1 | 	add	fp, #4
24f20     A7 12 02 FB | 	rdlong	arg01, fp
24f24     08 4E 05 F1 | 	add	fp, #8
24f28     A7 14 02 F6 | 	mov	arg02, fp
24f2c     0C 4E 85 F1 | 	sub	fp, #12
24f30     9C E6 BF FD | 	call	#_fatfs_cc_validate
24f34     08 4E 05 F1 | 	add	fp, #8
24f38     A7 FA 61 FC | 	wrlong	result1, fp
24f3c     08 4E 85 F1 | 	sub	fp, #8
24f40     00 FA 0D F2 | 	cmp	result1, #0 wz
24f44     04 4E 05 A1 |  if_e	add	fp, #4
24f48     A7 1E 02 AB |  if_e	rdlong	local01, fp
24f4c     04 4E 85 A1 |  if_e	sub	fp, #4
24f50     0F 01 68 AC |  if_e	wrlong	#0, local01
24f54                 | LR__3850
24f54                 | ' 
24f54                 | ' 
24f54                 | ' 
24f54                 | ' 
24f54                 | ' 			fp->obj.fs = 0;
24f54                 | ' #line 4192 "ff.c"
24f54                 | ' 		}
24f54                 | ' 	}
24f54                 | ' 	return res;
24f54     08 4E 05 F1 | 	add	fp, #8
24f58     A7 FA 01 FB | 	rdlong	result1, fp
24f5c     08 4E 85 F1 | 	sub	fp, #8
24f60     A7 F0 03 F6 | 	mov	ptra, fp
24f64     B2 00 A0 FD | 	call	#popregs_
24f68                 | _fatfs_cc_f_close_ret
24f68     2D 00 64 FD | 	ret
24f6c                 | 
24f6c                 | _fatfs_cc_f_lseek
24f6c     00 4A 05 F6 | 	mov	COUNT_, #0
24f70     A8 00 A0 FD | 	call	#pushregs_
24f74     24 F0 07 F1 | 	add	ptra, #36
24f78     04 4E 05 F1 | 	add	fp, #4
24f7c     A7 12 62 FC | 	wrlong	arg01, fp
24f80     04 4E 05 F1 | 	add	fp, #4
24f84     A7 14 62 FC | 	wrlong	arg02, fp
24f88     04 4E 85 F1 | 	sub	fp, #4
24f8c     A7 12 02 FB | 	rdlong	arg01, fp
24f90     0C 4E 05 F1 | 	add	fp, #12
24f94     A7 14 02 F6 | 	mov	arg02, fp
24f98     10 4E 85 F1 | 	sub	fp, #16
24f9c     30 E6 BF FD | 	call	#_fatfs_cc_validate
24fa0     0C 4E 05 F1 | 	add	fp, #12
24fa4     A7 FA 61 FC | 	wrlong	result1, fp
24fa8     0C 4E 85 F1 | 	sub	fp, #12
24fac     00 FA 0D F2 | 	cmp	result1, #0 wz
24fb0     1C 00 90 5D |  if_ne	jmp	#LR__3860
24fb4     04 4E 05 F1 | 	add	fp, #4
24fb8     A7 18 02 FB | 	rdlong	arg04, fp
24fbc     11 18 06 F1 | 	add	arg04, #17
24fc0     0C 19 C2 FA | 	rdbyte	arg04, arg04
24fc4     08 4E 05 F1 | 	add	fp, #8
24fc8     A7 18 62 FC | 	wrlong	arg04, fp
24fcc     0C 4E 85 F1 | 	sub	fp, #12
24fd0                 | LR__3860
24fd0     0C 4E 05 F1 | 	add	fp, #12
24fd4     A7 18 0A FB | 	rdlong	arg04, fp wz
24fd8     0C 4E 85 F1 | 	sub	fp, #12
24fdc     0C 4E 05 51 |  if_ne	add	fp, #12
24fe0     A7 FA 01 5B |  if_ne	rdlong	result1, fp
24fe4     0C 4E 85 51 |  if_ne	sub	fp, #12
24fe8     40 06 90 5D |  if_ne	jmp	#LR__3883
24fec     04 4E 05 F1 | 	add	fp, #4
24ff0     A7 18 02 FB | 	rdlong	arg04, fp
24ff4     04 4E 05 F1 | 	add	fp, #4
24ff8     A7 16 02 FB | 	rdlong	arg03, fp
24ffc     08 4E 85 F1 | 	sub	fp, #8
25000     0C 18 06 F1 | 	add	arg04, #12
25004     0C 19 02 FB | 	rdlong	arg04, arg04
25008     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2500c     3C 00 90 ED |  if_be	jmp	#LR__3861
25010     04 4E 05 F1 | 	add	fp, #4
25014     A7 16 02 FB | 	rdlong	arg03, fp
25018     04 4E 85 F1 | 	sub	fp, #4
2501c     10 16 06 F1 | 	add	arg03, #16
25020     0B 17 C2 FA | 	rdbyte	arg03, arg03
25024     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
25028     02 16 CE F7 | 	test	arg03, #2 wz
2502c     1C 00 90 5D |  if_ne	jmp	#LR__3861
25030     04 4E 05 F1 | 	add	fp, #4
25034     A7 16 02 FB | 	rdlong	arg03, fp
25038     0C 16 06 F1 | 	add	arg03, #12
2503c     0B 17 02 FB | 	rdlong	arg03, arg03
25040     04 4E 05 F1 | 	add	fp, #4
25044     A7 16 62 FC | 	wrlong	arg03, fp
25048     08 4E 85 F1 | 	sub	fp, #8
2504c                 | LR__3861
2504c     04 4E 05 F1 | 	add	fp, #4
25050     A7 16 02 FB | 	rdlong	arg03, fp
25054     14 16 06 F1 | 	add	arg03, #20
25058     0B 17 02 FB | 	rdlong	arg03, arg03
2505c     1C 4E 05 F1 | 	add	fp, #28
25060     A7 16 62 FC | 	wrlong	arg03, fp
25064     1C 4E 85 F1 | 	sub	fp, #28
25068     A7 16 02 FB | 	rdlong	arg03, fp
2506c     18 4E 05 F1 | 	add	fp, #24
25070     A7 00 68 FC | 	wrlong	#0, fp
25074     14 16 06 F1 | 	add	arg03, #20
25078     0B 01 68 FC | 	wrlong	#0, arg03
2507c     14 4E 85 F1 | 	sub	fp, #20
25080     A7 16 02 FB | 	rdlong	arg03, fp
25084     08 4E 85 F1 | 	sub	fp, #8
25088     01 16 16 F2 | 	cmp	arg03, #1 wc
2508c     E4 03 90 CD |  if_b	jmp	#LR__3877
25090     10 4E 05 F1 | 	add	fp, #16
25094     A7 16 02 FB | 	rdlong	arg03, fp
25098     0A 16 06 F1 | 	add	arg03, #10
2509c     0B 19 E2 FA | 	rdword	arg04, arg03
250a0     09 18 66 F0 | 	shl	arg04, #9
250a4     08 4E 05 F1 | 	add	fp, #8
250a8     A7 18 62 FC | 	wrlong	arg04, fp
250ac     08 4E 05 F1 | 	add	fp, #8
250b0     A7 18 02 FB | 	rdlong	arg04, fp
250b4     20 4E 85 F1 | 	sub	fp, #32
250b8     01 18 16 F2 | 	cmp	arg04, #1 wc
250bc     AC 00 90 CD |  if_b	jmp	#LR__3862
250c0     08 4E 05 F1 | 	add	fp, #8
250c4     A7 18 02 FB | 	rdlong	arg04, fp
250c8     01 18 86 F1 | 	sub	arg04, #1
250cc     10 4E 05 F1 | 	add	fp, #16
250d0     A7 16 02 FB | 	rdlong	arg03, fp
250d4     0B 19 12 FD | 	qdiv	arg04, arg03
250d8     08 4E 05 F1 | 	add	fp, #8
250dc     A7 FA 01 FB | 	rdlong	result1, fp
250e0     01 FA 85 F1 | 	sub	result1, #1
250e4     18 18 62 FD | 	getqx	arg04
250e8     0B FB 11 FD | 	qdiv	result1, arg03
250ec     20 4E 85 F1 | 	sub	fp, #32
250f0     18 16 62 FD | 	getqx	arg03
250f4     0B 19 12 F2 | 	cmp	arg04, arg03 wc
250f8     70 00 90 CD |  if_b	jmp	#LR__3862
250fc     04 4E 05 F1 | 	add	fp, #4
25100     A7 16 02 FB | 	rdlong	arg03, fp
25104     1C 4E 05 F1 | 	add	fp, #28
25108     A7 FA 01 FB | 	rdlong	result1, fp
2510c     01 FA 85 F1 | 	sub	result1, #1
25110     08 4E 85 F1 | 	sub	fp, #8
25114     A7 18 02 FB | 	rdlong	arg04, fp
25118     01 18 86 F1 | 	sub	arg04, #1
2511c     0C FB 21 F5 | 	andn	result1, arg04
25120     14 16 06 F1 | 	add	arg03, #20
25124     0B FB 61 FC | 	wrlong	result1, arg03
25128     10 4E 85 F1 | 	sub	fp, #16
2512c     A7 16 02 FB | 	rdlong	arg03, fp
25130     04 4E 85 F1 | 	sub	fp, #4
25134     A7 18 02 FB | 	rdlong	arg04, fp
25138     14 18 06 F1 | 	add	arg04, #20
2513c     0C 19 02 FB | 	rdlong	arg04, arg04
25140     0C 17 82 F1 | 	sub	arg03, arg04
25144     04 4E 05 F1 | 	add	fp, #4
25148     A7 16 62 FC | 	wrlong	arg03, fp
2514c     04 4E 85 F1 | 	sub	fp, #4
25150     A7 16 02 FB | 	rdlong	arg03, fp
25154     18 16 06 F1 | 	add	arg03, #24
25158     0B 17 02 FB | 	rdlong	arg03, arg03
2515c     10 4E 05 F1 | 	add	fp, #16
25160     A7 16 62 FC | 	wrlong	arg03, fp
25164     14 4E 85 F1 | 	sub	fp, #20
25168     D0 00 90 FD | 	jmp	#LR__3866
2516c                 | LR__3862
2516c     04 4E 05 F1 | 	add	fp, #4
25170     A7 16 02 FB | 	rdlong	arg03, fp
25174     08 16 06 F1 | 	add	arg03, #8
25178     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2517c     10 4E 05 F1 | 	add	fp, #16
25180     A7 16 62 FC | 	wrlong	arg03, fp
25184     14 4E 85 F1 | 	sub	fp, #20
25188     94 00 90 5D |  if_ne	jmp	#LR__3865
2518c     04 4E 05 F1 | 	add	fp, #4
25190     A7 12 02 FB | 	rdlong	arg01, fp
25194     04 4E 85 F1 | 	sub	fp, #4
25198     00 14 06 F6 | 	mov	arg02, #0
2519c     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
251a0     14 4E 05 F1 | 	add	fp, #20
251a4     A7 FA 61 FC | 	wrlong	result1, fp
251a8     14 4E 85 F1 | 	sub	fp, #20
251ac     01 FA 0D F2 | 	cmp	result1, #1 wz
251b0     1C 00 90 5D |  if_ne	jmp	#LR__3863
251b4     04 4E 05 F1 | 	add	fp, #4
251b8     A7 16 02 FB | 	rdlong	arg03, fp
251bc     04 4E 85 F1 | 	sub	fp, #4
251c0     11 16 06 F1 | 	add	arg03, #17
251c4     0B 05 48 FC | 	wrbyte	#2, arg03
251c8     02 FA 05 F6 | 	mov	result1, #2
251cc     5C 04 90 FD | 	jmp	#LR__3883
251d0                 | LR__3863
251d0     14 4E 05 F1 | 	add	fp, #20
251d4     A7 FA 01 FB | 	rdlong	result1, fp
251d8     14 4E 85 F1 | 	sub	fp, #20
251dc     FF FF 7F FF 
251e0     FF FB 0D F2 | 	cmp	result1, ##-1 wz
251e4     1C 00 90 5D |  if_ne	jmp	#LR__3864
251e8     04 4E 05 F1 | 	add	fp, #4
251ec     A7 16 02 FB | 	rdlong	arg03, fp
251f0     04 4E 85 F1 | 	sub	fp, #4
251f4     11 16 06 F1 | 	add	arg03, #17
251f8     0B 03 48 FC | 	wrbyte	#1, arg03
251fc     01 FA 05 F6 | 	mov	result1, #1
25200     28 04 90 FD | 	jmp	#LR__3883
25204                 | LR__3864
25204     04 4E 05 F1 | 	add	fp, #4
25208     A7 16 02 FB | 	rdlong	arg03, fp
2520c     10 4E 05 F1 | 	add	fp, #16
25210     A7 18 02 FB | 	rdlong	arg04, fp
25214     14 4E 85 F1 | 	sub	fp, #20
25218     08 16 06 F1 | 	add	arg03, #8
2521c     0B 19 62 FC | 	wrlong	arg04, arg03
25220                 | LR__3865
25220     04 4E 05 F1 | 	add	fp, #4
25224     A7 16 02 FB | 	rdlong	arg03, fp
25228     10 4E 05 F1 | 	add	fp, #16
2522c     A7 18 02 FB | 	rdlong	arg04, fp
25230     14 4E 85 F1 | 	sub	fp, #20
25234     18 16 06 F1 | 	add	arg03, #24
25238     0B 19 62 FC | 	wrlong	arg04, arg03
2523c                 | LR__3866
2523c     14 4E 05 F1 | 	add	fp, #20
25240     A7 16 0A FB | 	rdlong	arg03, fp wz
25244     14 4E 85 F1 | 	sub	fp, #20
25248     28 02 90 AD |  if_e	jmp	#LR__3876
2524c                 | ' 				while (ofs > bcs) {
2524c                 | LR__3867
2524c     08 4E 05 F1 | 	add	fp, #8
25250     A7 18 02 FB | 	rdlong	arg04, fp
25254     10 4E 05 F1 | 	add	fp, #16
25258     A7 16 02 FB | 	rdlong	arg03, fp
2525c     18 4E 85 F1 | 	sub	fp, #24
25260     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
25264     68 01 90 ED |  if_be	jmp	#LR__3873
25268     08 4E 05 F1 | 	add	fp, #8
2526c     A7 18 02 FB | 	rdlong	arg04, fp
25270     10 4E 05 F1 | 	add	fp, #16
25274     A7 16 02 FB | 	rdlong	arg03, fp
25278     0B 19 82 F1 | 	sub	arg04, arg03
2527c     10 4E 85 F1 | 	sub	fp, #16
25280     A7 18 62 FC | 	wrlong	arg04, fp
25284     04 4E 85 F1 | 	sub	fp, #4
25288     A7 18 02 FB | 	rdlong	arg04, fp
2528c     0C FB 01 F6 | 	mov	result1, arg04
25290     14 18 06 F1 | 	add	arg04, #20
25294     0C 19 02 FB | 	rdlong	arg04, arg04
25298     14 4E 05 F1 | 	add	fp, #20
2529c     A7 16 02 FB | 	rdlong	arg03, fp
252a0     0B 19 02 F1 | 	add	arg04, arg03
252a4     14 FA 05 F1 | 	add	result1, #20
252a8     FD 18 62 FC | 	wrlong	arg04, result1
252ac     14 4E 85 F1 | 	sub	fp, #20
252b0     A7 16 02 FB | 	rdlong	arg03, fp
252b4     04 4E 85 F1 | 	sub	fp, #4
252b8     10 16 06 F1 | 	add	arg03, #16
252bc     0B 17 C2 FA | 	rdbyte	arg03, arg03
252c0     02 16 CE F7 | 	test	arg03, #2 wz
252c4     3C 00 90 AD |  if_e	jmp	#LR__3868
252c8     04 4E 05 F1 | 	add	fp, #4
252cc     A7 12 02 FB | 	rdlong	arg01, fp
252d0     10 4E 05 F1 | 	add	fp, #16
252d4     A7 14 02 FB | 	rdlong	arg02, fp
252d8     14 4E 85 F1 | 	sub	fp, #20
252dc     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
252e0     14 4E 05 F1 | 	add	fp, #20
252e4     A7 FA 61 FC | 	wrlong	result1, fp
252e8     00 FA 4D F2 | 	cmps	result1, #0 wz
252ec     14 4E 85 F1 | 	sub	fp, #20
252f0     08 4E 05 A1 |  if_e	add	fp, #8
252f4     A7 00 68 AC |  if_e	wrlong	#0, fp
252f8     08 4E 85 A1 |  if_e	sub	fp, #8
252fc                 | ' 							ofs = 0; break;
252fc     D0 00 90 AD |  if_e	jmp	#LR__3873
25300     24 00 90 FD | 	jmp	#LR__3869
25304                 | LR__3868
25304     04 4E 05 F1 | 	add	fp, #4
25308     A7 12 02 FB | 	rdlong	arg01, fp
2530c     10 4E 05 F1 | 	add	fp, #16
25310     A7 14 02 FB | 	rdlong	arg02, fp
25314     14 4E 85 F1 | 	sub	fp, #20
25318     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
2531c     14 4E 05 F1 | 	add	fp, #20
25320     A7 FA 61 FC | 	wrlong	result1, fp
25324     14 4E 85 F1 | 	sub	fp, #20
25328                 | LR__3869
25328     14 4E 05 F1 | 	add	fp, #20
2532c     A7 16 02 FB | 	rdlong	arg03, fp
25330     14 4E 85 F1 | 	sub	fp, #20
25334     FF FF 7F FF 
25338     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2533c     1C 00 90 5D |  if_ne	jmp	#LR__3870
25340     04 4E 05 F1 | 	add	fp, #4
25344     A7 16 02 FB | 	rdlong	arg03, fp
25348     04 4E 85 F1 | 	sub	fp, #4
2534c     11 16 06 F1 | 	add	arg03, #17
25350     0B 03 48 FC | 	wrbyte	#1, arg03
25354     01 FA 05 F6 | 	mov	result1, #1
25358     D0 02 90 FD | 	jmp	#LR__3883
2535c                 | LR__3870
2535c     14 4E 05 F1 | 	add	fp, #20
25360     A7 16 02 FB | 	rdlong	arg03, fp
25364     14 4E 85 F1 | 	sub	fp, #20
25368     02 16 16 F2 | 	cmp	arg03, #2 wc
2536c     24 00 90 CD |  if_b	jmp	#LR__3871
25370     10 4E 05 F1 | 	add	fp, #16
25374     A7 18 02 FB | 	rdlong	arg04, fp
25378     04 4E 05 F1 | 	add	fp, #4
2537c     A7 16 02 FB | 	rdlong	arg03, fp
25380     14 4E 85 F1 | 	sub	fp, #20
25384     18 18 06 F1 | 	add	arg04, #24
25388     0C 19 02 FB | 	rdlong	arg04, arg04
2538c     0C 17 12 F2 | 	cmp	arg03, arg04 wc
25390     1C 00 90 CD |  if_b	jmp	#LR__3872
25394                 | LR__3871
25394     04 4E 05 F1 | 	add	fp, #4
25398     A7 16 02 FB | 	rdlong	arg03, fp
2539c     04 4E 85 F1 | 	sub	fp, #4
253a0     11 16 06 F1 | 	add	arg03, #17
253a4     0B 05 48 FC | 	wrbyte	#2, arg03
253a8     02 FA 05 F6 | 	mov	result1, #2
253ac     7C 02 90 FD | 	jmp	#LR__3883
253b0                 | LR__3872
253b0     04 4E 05 F1 | 	add	fp, #4
253b4     A7 18 02 FB | 	rdlong	arg04, fp
253b8     10 4E 05 F1 | 	add	fp, #16
253bc     A7 16 02 FB | 	rdlong	arg03, fp
253c0     14 4E 85 F1 | 	sub	fp, #20
253c4     18 18 06 F1 | 	add	arg04, #24
253c8     0C 17 62 FC | 	wrlong	arg03, arg04
253cc     7C FE 9F FD | 	jmp	#LR__3867
253d0                 | LR__3873
253d0     04 4E 05 F1 | 	add	fp, #4
253d4     A7 16 02 FB | 	rdlong	arg03, fp
253d8     0B 13 02 F6 | 	mov	arg01, arg03
253dc     14 16 06 F1 | 	add	arg03, #20
253e0     0B 15 02 FB | 	rdlong	arg02, arg03
253e4     04 4E 05 F1 | 	add	fp, #4
253e8     A7 16 02 FB | 	rdlong	arg03, fp
253ec     0B 15 02 F1 | 	add	arg02, arg03
253f0     14 12 06 F1 | 	add	arg01, #20
253f4     09 15 62 FC | 	wrlong	arg02, arg01
253f8     A7 16 02 FB | 	rdlong	arg03, fp
253fc     08 4E 85 F1 | 	sub	fp, #8
25400     FF 17 CE F7 | 	test	arg03, #511 wz
25404     6C 00 90 AD |  if_e	jmp	#LR__3875
25408     10 4E 05 F1 | 	add	fp, #16
2540c     A7 12 02 FB | 	rdlong	arg01, fp
25410     04 4E 05 F1 | 	add	fp, #4
25414     A7 14 02 FB | 	rdlong	arg02, fp
25418     14 4E 85 F1 | 	sub	fp, #20
2541c     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
25420     1C 4E 05 F1 | 	add	fp, #28
25424     A7 FA 61 FC | 	wrlong	result1, fp
25428     1C 4E 85 F1 | 	sub	fp, #28
2542c     00 FA 0D F2 | 	cmp	result1, #0 wz
25430     1C 00 90 5D |  if_ne	jmp	#LR__3874
25434     04 4E 05 F1 | 	add	fp, #4
25438     A7 16 02 FB | 	rdlong	arg03, fp
2543c     04 4E 85 F1 | 	sub	fp, #4
25440     11 16 06 F1 | 	add	arg03, #17
25444     0B 05 48 FC | 	wrbyte	#2, arg03
25448     02 FA 05 F6 | 	mov	result1, #2
2544c     DC 01 90 FD | 	jmp	#LR__3883
25450                 | LR__3874
25450     1C 4E 05 F1 | 	add	fp, #28
25454     A7 18 02 FB | 	rdlong	arg04, fp
25458     14 4E 85 F1 | 	sub	fp, #20
2545c     A7 16 02 FB | 	rdlong	arg03, fp
25460     09 16 46 F0 | 	shr	arg03, #9
25464     0B 19 02 F1 | 	add	arg04, arg03
25468     14 4E 05 F1 | 	add	fp, #20
2546c     A7 18 62 FC | 	wrlong	arg04, fp
25470     1C 4E 85 F1 | 	sub	fp, #28
25474                 | LR__3875
25474                 | LR__3876
25474                 | LR__3877
25474     04 4E 05 F1 | 	add	fp, #4
25478     A7 18 02 FB | 	rdlong	arg04, fp
2547c     0C 17 02 F6 | 	mov	arg03, arg04
25480     04 4E 85 F1 | 	sub	fp, #4
25484     14 16 06 F1 | 	add	arg03, #20
25488     0B 17 02 FB | 	rdlong	arg03, arg03
2548c     0C 18 06 F1 | 	add	arg04, #12
25490     0C 19 02 FB | 	rdlong	arg04, arg04
25494     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
25498     3C 00 90 ED |  if_be	jmp	#LR__3878
2549c     04 4E 05 F1 | 	add	fp, #4
254a0     A7 18 02 FB | 	rdlong	arg04, fp
254a4     0C 17 02 F6 | 	mov	arg03, arg04
254a8     14 18 06 F1 | 	add	arg04, #20
254ac     0C 19 02 FB | 	rdlong	arg04, arg04
254b0     0C 16 06 F1 | 	add	arg03, #12
254b4     0B 19 62 FC | 	wrlong	arg04, arg03
254b8     A7 18 02 FB | 	rdlong	arg04, fp
254bc     0C 17 02 F6 | 	mov	arg03, arg04
254c0     04 4E 85 F1 | 	sub	fp, #4
254c4     10 18 06 F1 | 	add	arg04, #16
254c8     0C 19 C2 FA | 	rdbyte	arg04, arg04
254cc     40 18 46 F5 | 	or	arg04, #64
254d0     10 16 06 F1 | 	add	arg03, #16
254d4     0B 19 42 FC | 	wrbyte	arg04, arg03
254d8                 | LR__3878
254d8     04 4E 05 F1 | 	add	fp, #4
254dc     A7 16 02 FB | 	rdlong	arg03, fp
254e0     04 4E 85 F1 | 	sub	fp, #4
254e4     14 16 06 F1 | 	add	arg03, #20
254e8     0B 17 02 FB | 	rdlong	arg03, arg03
254ec     FF 17 CE F7 | 	test	arg03, #511 wz
254f0     2C 01 90 AD |  if_e	jmp	#LR__3882
254f4     04 4E 05 F1 | 	add	fp, #4
254f8     A7 18 02 FB | 	rdlong	arg04, fp
254fc     18 4E 05 F1 | 	add	fp, #24
25500     A7 16 02 FB | 	rdlong	arg03, fp
25504     1C 4E 85 F1 | 	sub	fp, #28
25508     1C 18 06 F1 | 	add	arg04, #28
2550c     0C 19 02 FB | 	rdlong	arg04, arg04
25510     0C 17 0A F2 | 	cmp	arg03, arg04 wz
25514     08 01 90 AD |  if_e	jmp	#LR__3882
25518     04 4E 05 F1 | 	add	fp, #4
2551c     A7 16 02 FB | 	rdlong	arg03, fp
25520     04 4E 85 F1 | 	sub	fp, #4
25524     10 16 06 F1 | 	add	arg03, #16
25528     0B 17 C2 FA | 	rdbyte	arg03, arg03
2552c     80 16 CE F7 | 	test	arg03, #128 wz
25530     7C 00 90 AD |  if_e	jmp	#LR__3880
25534     10 4E 05 F1 | 	add	fp, #16
25538     A7 16 02 FB | 	rdlong	arg03, fp
2553c     01 16 06 F1 | 	add	arg03, #1
25540     0B 13 C2 FA | 	rdbyte	arg01, arg03
25544     0C 4E 85 F1 | 	sub	fp, #12
25548     A7 16 02 FB | 	rdlong	arg03, fp
2554c     0B 15 02 F6 | 	mov	arg02, arg03
25550     28 14 06 F1 | 	add	arg02, #40
25554     04 4E 85 F1 | 	sub	fp, #4
25558     1C 16 06 F1 | 	add	arg03, #28
2555c     0B 17 02 FB | 	rdlong	arg03, arg03
25560     01 18 06 F6 | 	mov	arg04, #1
25564     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
25568     00 FA 0D F2 | 	cmp	result1, #0 wz
2556c     1C 00 90 AD |  if_e	jmp	#LR__3879
25570     04 4E 05 F1 | 	add	fp, #4
25574     A7 16 02 FB | 	rdlong	arg03, fp
25578     04 4E 85 F1 | 	sub	fp, #4
2557c     11 16 06 F1 | 	add	arg03, #17
25580     0B 03 48 FC | 	wrbyte	#1, arg03
25584     01 FA 05 F6 | 	mov	result1, #1
25588     A0 00 90 FD | 	jmp	#LR__3883
2558c                 | LR__3879
2558c     04 4E 05 F1 | 	add	fp, #4
25590     A7 18 02 FB | 	rdlong	arg04, fp
25594     0C 17 02 F6 | 	mov	arg03, arg04
25598     04 4E 85 F1 | 	sub	fp, #4
2559c     10 18 06 F1 | 	add	arg04, #16
255a0     0C 19 C2 FA | 	rdbyte	arg04, arg04
255a4     7F 18 06 F5 | 	and	arg04, #127
255a8     10 16 06 F1 | 	add	arg03, #16
255ac     0B 19 42 FC | 	wrbyte	arg04, arg03
255b0                 | LR__3880
255b0     10 4E 05 F1 | 	add	fp, #16
255b4     A7 16 02 FB | 	rdlong	arg03, fp
255b8     01 16 06 F1 | 	add	arg03, #1
255bc     0B 13 C2 FA | 	rdbyte	arg01, arg03
255c0     0C 4E 85 F1 | 	sub	fp, #12
255c4     A7 14 02 FB | 	rdlong	arg02, fp
255c8     28 14 06 F1 | 	add	arg02, #40
255cc     18 4E 05 F1 | 	add	fp, #24
255d0     A7 16 02 FB | 	rdlong	arg03, fp
255d4     1C 4E 85 F1 | 	sub	fp, #28
255d8     01 18 06 F6 | 	mov	arg04, #1
255dc     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
255e0     00 FA 0D F2 | 	cmp	result1, #0 wz
255e4     1C 00 90 AD |  if_e	jmp	#LR__3881
255e8     04 4E 05 F1 | 	add	fp, #4
255ec     A7 16 02 FB | 	rdlong	arg03, fp
255f0     04 4E 85 F1 | 	sub	fp, #4
255f4     11 16 06 F1 | 	add	arg03, #17
255f8     0B 03 48 FC | 	wrbyte	#1, arg03
255fc     01 FA 05 F6 | 	mov	result1, #1
25600     28 00 90 FD | 	jmp	#LR__3883
25604                 | LR__3881
25604     04 4E 05 F1 | 	add	fp, #4
25608     A7 18 02 FB | 	rdlong	arg04, fp
2560c     18 4E 05 F1 | 	add	fp, #24
25610     A7 16 02 FB | 	rdlong	arg03, fp
25614     1C 4E 85 F1 | 	sub	fp, #28
25618     1C 18 06 F1 | 	add	arg04, #28
2561c     0C 17 62 FC | 	wrlong	arg03, arg04
25620                 | LR__3882
25620                 | ' 
25620                 | ' 			fp->sect = nsect;
25620                 | ' 		}
25620                 | ' 	}
25620                 | ' 
25620                 | ' 	return res ;
25620     0C 4E 05 F1 | 	add	fp, #12
25624     A7 FA 01 FB | 	rdlong	result1, fp
25628     0C 4E 85 F1 | 	sub	fp, #12
2562c                 | LR__3883
2562c     A7 F0 03 F6 | 	mov	ptra, fp
25630     B2 00 A0 FD | 	call	#popregs_
25634                 | _fatfs_cc_f_lseek_ret
25634     2D 00 64 FD | 	ret
25638                 | 
25638                 | _fatfs_cc_f_opendir
25638     01 4A 05 F6 | 	mov	COUNT_, #1
2563c     A8 00 A0 FD | 	call	#pushregs_
25640     14 F0 07 F1 | 	add	ptra, #20
25644     04 4E 05 F1 | 	add	fp, #4
25648     A7 12 62 FC | 	wrlong	arg01, fp
2564c     04 4E 05 F1 | 	add	fp, #4
25650     A7 14 62 FC | 	wrlong	arg02, fp
25654     04 4E 85 F1 | 	sub	fp, #4
25658     A7 16 0A FB | 	rdlong	arg03, fp wz
2565c     04 4E 85 F1 | 	sub	fp, #4
25660     09 FA 05 A6 |  if_e	mov	result1, #9
25664     78 01 90 AD |  if_e	jmp	#LR__3896
25668     08 4E 05 F1 | 	add	fp, #8
2566c     A7 12 02 F6 | 	mov	arg01, fp
25670     08 4E 05 F1 | 	add	fp, #8
25674     A7 14 02 F6 | 	mov	arg02, fp
25678     10 4E 85 F1 | 	sub	fp, #16
2567c     00 16 06 F6 | 	mov	arg03, #0
25680     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
25684     0C 4E 05 F1 | 	add	fp, #12
25688     A7 FA 61 FC | 	wrlong	result1, fp
2568c     0C 4E 85 F1 | 	sub	fp, #12
25690     00 FA 0D F2 | 	cmp	result1, #0 wz
25694     20 01 90 5D |  if_ne	jmp	#LR__3895
25698     04 4E 05 F1 | 	add	fp, #4
2569c     A7 16 02 FB | 	rdlong	arg03, fp
256a0     0C 4E 05 F1 | 	add	fp, #12
256a4     A7 FA 01 FB | 	rdlong	result1, fp
256a8     0B FB 61 FC | 	wrlong	result1, arg03
256ac     0C 4E 85 F1 | 	sub	fp, #12
256b0     A7 12 02 FB | 	rdlong	arg01, fp
256b4     04 4E 05 F1 | 	add	fp, #4
256b8     A7 14 02 FB | 	rdlong	arg02, fp
256bc     08 4E 85 F1 | 	sub	fp, #8
256c0     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
256c4     0C 4E 05 F1 | 	add	fp, #12
256c8     A7 FA 61 FC | 	wrlong	result1, fp
256cc     0C 4E 85 F1 | 	sub	fp, #12
256d0     00 FA 0D F2 | 	cmp	result1, #0 wz
256d4     C4 00 90 5D |  if_ne	jmp	#LR__3894
256d8     04 4E 05 F1 | 	add	fp, #4
256dc     A7 16 02 FB | 	rdlong	arg03, fp
256e0     04 4E 85 F1 | 	sub	fp, #4
256e4     2B 16 06 F1 | 	add	arg03, #43
256e8     0B 17 C2 FA | 	rdbyte	arg03, arg03
256ec     80 16 CE F7 | 	test	arg03, #128 wz
256f0     58 00 90 5D |  if_ne	jmp	#LR__3892
256f4     04 4E 05 F1 | 	add	fp, #4
256f8     A7 16 02 FB | 	rdlong	arg03, fp
256fc     04 4E 85 F1 | 	sub	fp, #4
25700     06 16 06 F1 | 	add	arg03, #6
25704     0B 17 C2 FA | 	rdbyte	arg03, arg03
25708     10 16 CE F7 | 	test	arg03, #16 wz
2570c     30 00 90 AD |  if_e	jmp	#LR__3890
25710     04 4E 05 F1 | 	add	fp, #4
25714     A7 16 02 FB | 	rdlong	arg03, fp
25718     0B 1F 02 F6 | 	mov	local01, arg03
2571c     0C 4E 05 F1 | 	add	fp, #12
25720     A7 12 02 FB | 	rdlong	arg01, fp
25724     10 4E 85 F1 | 	sub	fp, #16
25728     1C 16 06 F1 | 	add	arg03, #28
2572c     0B 15 02 FB | 	rdlong	arg02, arg03
25730     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
25734     08 1E 06 F1 | 	add	local01, #8
25738     0F FB 61 FC | 	wrlong	result1, local01
2573c     0C 00 90 FD | 	jmp	#LR__3891
25740                 | LR__3890
25740     0C 4E 05 F1 | 	add	fp, #12
25744     A7 0A 68 FC | 	wrlong	#5, fp
25748     0C 4E 85 F1 | 	sub	fp, #12
2574c                 | LR__3891
2574c                 | LR__3892
2574c     0C 4E 05 F1 | 	add	fp, #12
25750     A7 1E 0A FB | 	rdlong	local01, fp wz
25754     0C 4E 85 F1 | 	sub	fp, #12
25758     40 00 90 5D |  if_ne	jmp	#LR__3893
2575c     04 4E 05 F1 | 	add	fp, #4
25760     A7 1E 02 FB | 	rdlong	local01, fp
25764     0C 4E 05 F1 | 	add	fp, #12
25768     A7 16 02 FB | 	rdlong	arg03, fp
2576c     06 16 06 F1 | 	add	arg03, #6
25770     0B 17 E2 FA | 	rdword	arg03, arg03
25774     04 1E 06 F1 | 	add	local01, #4
25778     0F 17 52 FC | 	wrword	arg03, local01
2577c     0C 4E 85 F1 | 	sub	fp, #12
25780     A7 12 02 FB | 	rdlong	arg01, fp
25784     04 4E 85 F1 | 	sub	fp, #4
25788     00 14 06 F6 | 	mov	arg02, #0
2578c     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
25790     0C 4E 05 F1 | 	add	fp, #12
25794     A7 FA 61 FC | 	wrlong	result1, fp
25798     0C 4E 85 F1 | 	sub	fp, #12
2579c                 | LR__3893
2579c                 | LR__3894
2579c     0C 4E 05 F1 | 	add	fp, #12
257a0     A7 1E 02 FB | 	rdlong	local01, fp
257a4     0C 4E 85 F1 | 	sub	fp, #12
257a8     04 1E 0E F2 | 	cmp	local01, #4 wz
257ac     0C 4E 05 A1 |  if_e	add	fp, #12
257b0     A7 0A 68 AC |  if_e	wrlong	#5, fp
257b4     0C 4E 85 A1 |  if_e	sub	fp, #12
257b8                 | LR__3895
257b8     0C 4E 05 F1 | 	add	fp, #12
257bc     A7 1E 0A FB | 	rdlong	local01, fp wz
257c0     0C 4E 85 F1 | 	sub	fp, #12
257c4     04 4E 05 51 |  if_ne	add	fp, #4
257c8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
257cc     04 4E 85 51 |  if_ne	sub	fp, #4
257d0     0F 01 68 5C |  if_ne	wrlong	#0, local01
257d4                 | ' 
257d4                 | ' 	return res ;
257d4     0C 4E 05 F1 | 	add	fp, #12
257d8     A7 FA 01 FB | 	rdlong	result1, fp
257dc     0C 4E 85 F1 | 	sub	fp, #12
257e0                 | LR__3896
257e0     A7 F0 03 F6 | 	mov	ptra, fp
257e4     B2 00 A0 FD | 	call	#popregs_
257e8                 | _fatfs_cc_f_opendir_ret
257e8     2D 00 64 FD | 	ret
257ec                 | 
257ec                 | _fatfs_cc_f_closedir
257ec     00 4A 05 F6 | 	mov	COUNT_, #0
257f0     A8 00 A0 FD | 	call	#pushregs_
257f4     10 F0 07 F1 | 	add	ptra, #16
257f8     04 4E 05 F1 | 	add	fp, #4
257fc     A7 12 62 FC | 	wrlong	arg01, fp
25800     08 4E 05 F1 | 	add	fp, #8
25804     A7 14 02 F6 | 	mov	arg02, fp
25808     0C 4E 85 F1 | 	sub	fp, #12
2580c     C0 DD BF FD | 	call	#_fatfs_cc_validate
25810     08 4E 05 F1 | 	add	fp, #8
25814     A7 FA 61 FC | 	wrlong	result1, fp
25818     08 4E 85 F1 | 	sub	fp, #8
2581c     00 FA 0D F2 | 	cmp	result1, #0 wz
25820     04 4E 05 A1 |  if_e	add	fp, #4
25824     A7 FA 01 AB |  if_e	rdlong	result1, fp
25828     04 4E 85 A1 |  if_e	sub	fp, #4
2582c     FD 00 68 AC |  if_e	wrlong	#0, result1
25830                 | ' 
25830                 | ' 
25830                 | ' 
25830                 | ' 
25830                 | ' 		dp->obj.fs = 0;
25830                 | ' #line 4633 "ff.c"
25830                 | ' 	}
25830                 | ' 	return res;
25830     08 4E 05 F1 | 	add	fp, #8
25834     A7 FA 01 FB | 	rdlong	result1, fp
25838     08 4E 85 F1 | 	sub	fp, #8
2583c     A7 F0 03 F6 | 	mov	ptra, fp
25840     B2 00 A0 FD | 	call	#popregs_
25844                 | _fatfs_cc_f_closedir_ret
25844     2D 00 64 FD | 	ret
25848                 | 
25848                 | _fatfs_cc_f_readdir
25848     00 4A 05 F6 | 	mov	COUNT_, #0
2584c     A8 00 A0 FD | 	call	#pushregs_
25850     14 F0 07 F1 | 	add	ptra, #20
25854     04 4E 05 F1 | 	add	fp, #4
25858     A7 12 62 FC | 	wrlong	arg01, fp
2585c     04 4E 05 F1 | 	add	fp, #4
25860     A7 14 62 FC | 	wrlong	arg02, fp
25864     04 4E 85 F1 | 	sub	fp, #4
25868     A7 12 02 FB | 	rdlong	arg01, fp
2586c     0C 4E 05 F1 | 	add	fp, #12
25870     A7 14 02 F6 | 	mov	arg02, fp
25874     10 4E 85 F1 | 	sub	fp, #16
25878     54 DD BF FD | 	call	#_fatfs_cc_validate
2587c     0C 4E 05 F1 | 	add	fp, #12
25880     A7 FA 61 FC | 	wrlong	result1, fp
25884     0C 4E 85 F1 | 	sub	fp, #12
25888     00 FA 0D F2 | 	cmp	result1, #0 wz
2588c     BC 00 90 5D |  if_ne	jmp	#LR__3903
25890     08 4E 05 F1 | 	add	fp, #8
25894     A7 FA 09 FB | 	rdlong	result1, fp wz
25898     08 4E 85 F1 | 	sub	fp, #8
2589c     24 00 90 5D |  if_ne	jmp	#LR__3900
258a0     04 4E 05 F1 | 	add	fp, #4
258a4     A7 12 02 FB | 	rdlong	arg01, fp
258a8     04 4E 85 F1 | 	sub	fp, #4
258ac     00 14 06 F6 | 	mov	arg02, #0
258b0     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
258b4     0C 4E 05 F1 | 	add	fp, #12
258b8     A7 FA 61 FC | 	wrlong	result1, fp
258bc     0C 4E 85 F1 | 	sub	fp, #12
258c0     88 00 90 FD | 	jmp	#LR__3902
258c4                 | LR__3900
258c4     04 4E 05 F1 | 	add	fp, #4
258c8     A7 12 02 FB | 	rdlong	arg01, fp
258cc     04 4E 85 F1 | 	sub	fp, #4
258d0     00 14 06 F6 | 	mov	arg02, #0
258d4     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
258d8     0C 4E 05 F1 | 	add	fp, #12
258dc     A7 FA 61 FC | 	wrlong	result1, fp
258e0     0C 4E 85 F1 | 	sub	fp, #12
258e4     04 FA 0D F2 | 	cmp	result1, #4 wz
258e8     0C 4E 05 A1 |  if_e	add	fp, #12
258ec     A7 00 68 AC |  if_e	wrlong	#0, fp
258f0     0C 4E 85 A1 |  if_e	sub	fp, #12
258f4     0C 4E 05 F1 | 	add	fp, #12
258f8     A7 FA 09 FB | 	rdlong	result1, fp wz
258fc     0C 4E 85 F1 | 	sub	fp, #12
25900     48 00 90 5D |  if_ne	jmp	#LR__3901
25904     04 4E 05 F1 | 	add	fp, #4
25908     A7 12 02 FB | 	rdlong	arg01, fp
2590c     04 4E 05 F1 | 	add	fp, #4
25910     A7 14 02 FB | 	rdlong	arg02, fp
25914     08 4E 85 F1 | 	sub	fp, #8
25918     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
2591c     04 4E 05 F1 | 	add	fp, #4
25920     A7 12 02 FB | 	rdlong	arg01, fp
25924     04 4E 85 F1 | 	sub	fp, #4
25928     00 14 06 F6 | 	mov	arg02, #0
2592c     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
25930     0C 4E 05 F1 | 	add	fp, #12
25934     A7 FA 61 FC | 	wrlong	result1, fp
25938     0C 4E 85 F1 | 	sub	fp, #12
2593c     04 FA 0D F2 | 	cmp	result1, #4 wz
25940     0C 4E 05 A1 |  if_e	add	fp, #12
25944     A7 00 68 AC |  if_e	wrlong	#0, fp
25948     0C 4E 85 A1 |  if_e	sub	fp, #12
2594c                 | LR__3901
2594c                 | LR__3902
2594c                 | LR__3903
2594c                 | ' 			}
2594c                 | ' 			;
2594c                 | ' 		}
2594c                 | ' 	}
2594c                 | ' 	return res ;
2594c     0C 4E 05 F1 | 	add	fp, #12
25950     A7 FA 01 FB | 	rdlong	result1, fp
25954     0C 4E 85 F1 | 	sub	fp, #12
25958     A7 F0 03 F6 | 	mov	ptra, fp
2595c     B2 00 A0 FD | 	call	#popregs_
25960                 | _fatfs_cc_f_readdir_ret
25960     2D 00 64 FD | 	ret
25964                 | 
25964                 | _fatfs_cc_f_stat
25964     00 4A 05 F6 | 	mov	COUNT_, #0
25968     A8 00 A0 FD | 	call	#pushregs_
2596c     40 F0 07 F1 | 	add	ptra, #64
25970     04 4E 05 F1 | 	add	fp, #4
25974     A7 12 62 FC | 	wrlong	arg01, fp
25978     04 4E 05 F1 | 	add	fp, #4
2597c     A7 14 62 FC | 	wrlong	arg02, fp
25980     04 4E 85 F1 | 	sub	fp, #4
25984     A7 12 02 F6 | 	mov	arg01, fp
25988     0C 4E 05 F1 | 	add	fp, #12
2598c     A7 14 02 F6 | 	mov	arg02, fp
25990     10 4E 85 F1 | 	sub	fp, #16
25994     00 16 06 F6 | 	mov	arg03, #0
25998     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
2599c     0C 4E 05 F1 | 	add	fp, #12
259a0     A7 FA 61 FC | 	wrlong	result1, fp
259a4     0C 4E 85 F1 | 	sub	fp, #12
259a8     00 FA 0D F2 | 	cmp	result1, #0 wz
259ac     74 00 90 5D |  if_ne	jmp	#LR__3913
259b0     10 4E 05 F1 | 	add	fp, #16
259b4     A7 12 02 F6 | 	mov	arg01, fp
259b8     0C 4E 85 F1 | 	sub	fp, #12
259bc     A7 14 02 FB | 	rdlong	arg02, fp
259c0     04 4E 85 F1 | 	sub	fp, #4
259c4     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
259c8     0C 4E 05 F1 | 	add	fp, #12
259cc     A7 FA 61 FC | 	wrlong	result1, fp
259d0     0C 4E 85 F1 | 	sub	fp, #12
259d4     00 FA 0D F2 | 	cmp	result1, #0 wz
259d8     48 00 90 5D |  if_ne	jmp	#LR__3912
259dc     3B 4E 05 F1 | 	add	fp, #59
259e0     A7 FA C1 FA | 	rdbyte	result1, fp
259e4     3B 4E 85 F1 | 	sub	fp, #59
259e8     80 FA CD F7 | 	test	result1, #128 wz
259ec     0C 4E 05 51 |  if_ne	add	fp, #12
259f0     A7 0C 68 5C |  if_ne	wrlong	#6, fp
259f4     0C 4E 85 51 |  if_ne	sub	fp, #12
259f8     28 00 90 5D |  if_ne	jmp	#LR__3911
259fc     08 4E 05 F1 | 	add	fp, #8
25a00     A7 FA 09 FB | 	rdlong	result1, fp wz
25a04     08 4E 85 F1 | 	sub	fp, #8
25a08     18 00 90 AD |  if_e	jmp	#LR__3910
25a0c     10 4E 05 F1 | 	add	fp, #16
25a10     A7 12 02 F6 | 	mov	arg01, fp
25a14     08 4E 85 F1 | 	sub	fp, #8
25a18     A7 14 02 FB | 	rdlong	arg02, fp
25a1c     08 4E 85 F1 | 	sub	fp, #8
25a20     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
25a24                 | LR__3910
25a24                 | LR__3911
25a24                 | LR__3912
25a24                 | LR__3913
25a24                 | ' 			}
25a24                 | ' 		}
25a24                 | ' 		;
25a24                 | ' 	}
25a24                 | ' 
25a24                 | ' 	return res ;
25a24     0C 4E 05 F1 | 	add	fp, #12
25a28     A7 FA 01 FB | 	rdlong	result1, fp
25a2c     0C 4E 85 F1 | 	sub	fp, #12
25a30     A7 F0 03 F6 | 	mov	ptra, fp
25a34     B2 00 A0 FD | 	call	#popregs_
25a38                 | _fatfs_cc_f_stat_ret
25a38     2D 00 64 FD | 	ret
25a3c                 | 
25a3c                 | _fatfs_cc_f_unlink
25a3c     00 4A 05 F6 | 	mov	COUNT_, #0
25a40     A8 00 A0 FD | 	call	#pushregs_
25a44     74 F0 07 F1 | 	add	ptra, #116
25a48     04 4E 05 F1 | 	add	fp, #4
25a4c     A7 12 62 FC | 	wrlong	arg01, fp
25a50     68 4E 05 F1 | 	add	fp, #104
25a54     A7 00 68 FC | 	wrlong	#0, fp
25a58     68 4E 85 F1 | 	sub	fp, #104
25a5c     A7 12 02 F6 | 	mov	arg01, fp
25a60     6C 4E 05 F1 | 	add	fp, #108
25a64     A7 14 02 F6 | 	mov	arg02, fp
25a68     70 4E 85 F1 | 	sub	fp, #112
25a6c     02 16 06 F6 | 	mov	arg03, #2
25a70     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
25a74     08 4E 05 F1 | 	add	fp, #8
25a78     A7 FA 61 FC | 	wrlong	result1, fp
25a7c     08 4E 85 F1 | 	sub	fp, #8
25a80     00 FA 0D F2 | 	cmp	result1, #0 wz
25a84     E4 01 90 5D |  if_ne	jmp	#LR__3928
25a88     70 4E 05 F1 | 	add	fp, #112
25a8c     A7 16 02 FB | 	rdlong	arg03, fp
25a90     64 4E 85 F1 | 	sub	fp, #100
25a94     A7 16 62 FC | 	wrlong	arg03, fp
25a98     A7 12 02 F6 | 	mov	arg01, fp
25a9c     08 4E 85 F1 | 	sub	fp, #8
25aa0     A7 14 02 FB | 	rdlong	arg02, fp
25aa4     04 4E 85 F1 | 	sub	fp, #4
25aa8     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
25aac     08 4E 05 F1 | 	add	fp, #8
25ab0     A7 FA 61 FC | 	wrlong	result1, fp
25ab4     00 FA 4D F2 | 	cmps	result1, #0 wz
25ab8     08 4E 85 F1 | 	sub	fp, #8
25abc     AC 01 90 5D |  if_ne	jmp	#LR__3927
25ac0     37 4E 05 F1 | 	add	fp, #55
25ac4     A7 FA C1 FA | 	rdbyte	result1, fp
25ac8     37 4E 85 F1 | 	sub	fp, #55
25acc     80 FA CD F7 | 	test	result1, #128 wz
25ad0     08 4E 05 51 |  if_ne	add	fp, #8
25ad4     A7 0C 68 5C |  if_ne	wrlong	#6, fp
25ad8     08 4E 85 51 |  if_ne	sub	fp, #8
25adc     1C 00 90 5D |  if_ne	jmp	#LR__3920
25ae0     12 4E 05 F1 | 	add	fp, #18
25ae4     A7 FA C1 FA | 	rdbyte	result1, fp
25ae8     12 4E 85 F1 | 	sub	fp, #18
25aec     01 FA CD F7 | 	test	result1, #1 wz
25af0     08 4E 05 51 |  if_ne	add	fp, #8
25af4     A7 0E 68 5C |  if_ne	wrlong	#7, fp
25af8     08 4E 85 51 |  if_ne	sub	fp, #8
25afc                 | LR__3920
25afc     08 4E 05 F1 | 	add	fp, #8
25b00     A7 FA 09 FB | 	rdlong	result1, fp wz
25b04     08 4E 85 F1 | 	sub	fp, #8
25b08     C8 00 90 5D |  if_ne	jmp	#LR__3923
25b0c     70 4E 05 F1 | 	add	fp, #112
25b10     A7 12 02 FB | 	rdlong	arg01, fp
25b14     48 4E 85 F1 | 	sub	fp, #72
25b18     A7 14 02 FB | 	rdlong	arg02, fp
25b1c     28 4E 85 F1 | 	sub	fp, #40
25b20     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
25b24     6C 4E 05 F1 | 	add	fp, #108
25b28     A7 FA 61 FC | 	wrlong	result1, fp
25b2c     5A 4E 85 F1 | 	sub	fp, #90
25b30     A7 FA C1 FA | 	rdbyte	result1, fp
25b34     12 4E 85 F1 | 	sub	fp, #18
25b38     10 FA CD F7 | 	test	result1, #16 wz
25b3c     94 00 90 AD |  if_e	jmp	#LR__3922
25b40     70 4E 05 F1 | 	add	fp, #112
25b44     A7 FA 01 FB | 	rdlong	result1, fp
25b48     34 4E 85 F1 | 	sub	fp, #52
25b4c     A7 FA 61 FC | 	wrlong	result1, fp
25b50     30 4E 05 F1 | 	add	fp, #48
25b54     A7 16 02 FB | 	rdlong	arg03, fp
25b58     28 4E 85 F1 | 	sub	fp, #40
25b5c     A7 16 62 FC | 	wrlong	arg03, fp
25b60     08 4E 85 F1 | 	sub	fp, #8
25b64     A7 12 02 F6 | 	mov	arg01, fp
25b68     3C 4E 85 F1 | 	sub	fp, #60
25b6c     00 14 06 F6 | 	mov	arg02, #0
25b70     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
25b74     08 4E 05 F1 | 	add	fp, #8
25b78     A7 FA 61 FC | 	wrlong	result1, fp
25b7c     08 4E 85 F1 | 	sub	fp, #8
25b80     00 FA 0D F2 | 	cmp	result1, #0 wz
25b84     4C 00 90 5D |  if_ne	jmp	#LR__3921
25b88     3C 4E 05 F1 | 	add	fp, #60
25b8c     A7 12 02 F6 | 	mov	arg01, fp
25b90     3C 4E 85 F1 | 	sub	fp, #60
25b94     00 14 06 F6 | 	mov	arg02, #0
25b98     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
25b9c     08 4E 05 F1 | 	add	fp, #8
25ba0     A7 FA 61 FC | 	wrlong	result1, fp
25ba4     00 FA 4D F2 | 	cmps	result1, #0 wz
25ba8     08 4E 85 F1 | 	sub	fp, #8
25bac     08 4E 05 A1 |  if_e	add	fp, #8
25bb0     A7 0E 68 AC |  if_e	wrlong	#7, fp
25bb4     08 4E 85 A1 |  if_e	sub	fp, #8
25bb8     08 4E 05 F1 | 	add	fp, #8
25bbc     A7 FA 01 FB | 	rdlong	result1, fp
25bc0     08 4E 85 F1 | 	sub	fp, #8
25bc4     04 FA 0D F2 | 	cmp	result1, #4 wz
25bc8     08 4E 05 A1 |  if_e	add	fp, #8
25bcc     A7 00 68 AC |  if_e	wrlong	#0, fp
25bd0     08 4E 85 A1 |  if_e	sub	fp, #8
25bd4                 | LR__3921
25bd4                 | LR__3922
25bd4                 | LR__3923
25bd4     08 4E 05 F1 | 	add	fp, #8
25bd8     A7 FA 09 FB | 	rdlong	result1, fp wz
25bdc     08 4E 85 F1 | 	sub	fp, #8
25be0     88 00 90 5D |  if_ne	jmp	#LR__3926
25be4     0C 4E 05 F1 | 	add	fp, #12
25be8     A7 12 02 F6 | 	mov	arg01, fp
25bec     0C 4E 85 F1 | 	sub	fp, #12
25bf0     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
25bf4     08 4E 05 F1 | 	add	fp, #8
25bf8     A7 FA 61 FC | 	wrlong	result1, fp
25bfc     08 4E 85 F1 | 	sub	fp, #8
25c00     00 FA 0D F2 | 	cmp	result1, #0 wz
25c04     38 00 90 5D |  if_ne	jmp	#LR__3924
25c08     6C 4E 05 F1 | 	add	fp, #108
25c0c     A7 FA 09 FB | 	rdlong	result1, fp wz
25c10     6C 4E 85 F1 | 	sub	fp, #108
25c14     28 00 90 AD |  if_e	jmp	#LR__3924
25c18     0C 4E 05 F1 | 	add	fp, #12
25c1c     A7 12 02 F6 | 	mov	arg01, fp
25c20     60 4E 05 F1 | 	add	fp, #96
25c24     A7 14 02 FB | 	rdlong	arg02, fp
25c28     6C 4E 85 F1 | 	sub	fp, #108
25c2c     00 16 06 F6 | 	mov	arg03, #0
25c30     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
25c34     08 4E 05 F1 | 	add	fp, #8
25c38     A7 FA 61 FC | 	wrlong	result1, fp
25c3c     08 4E 85 F1 | 	sub	fp, #8
25c40                 | LR__3924
25c40     08 4E 05 F1 | 	add	fp, #8
25c44     A7 FA 09 FB | 	rdlong	result1, fp wz
25c48     08 4E 85 F1 | 	sub	fp, #8
25c4c     1C 00 90 5D |  if_ne	jmp	#LR__3925
25c50     70 4E 05 F1 | 	add	fp, #112
25c54     A7 12 02 FB | 	rdlong	arg01, fp
25c58     70 4E 85 F1 | 	sub	fp, #112
25c5c     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
25c60     08 4E 05 F1 | 	add	fp, #8
25c64     A7 FA 61 FC | 	wrlong	result1, fp
25c68     08 4E 85 F1 | 	sub	fp, #8
25c6c                 | LR__3925
25c6c                 | LR__3926
25c6c                 | LR__3927
25c6c                 | LR__3928
25c6c                 | ' 			}
25c6c                 | ' 		}
25c6c                 | ' 		;
25c6c                 | ' 	}
25c6c                 | ' 
25c6c                 | ' 	return res ;
25c6c     08 4E 05 F1 | 	add	fp, #8
25c70     A7 FA 01 FB | 	rdlong	result1, fp
25c74     08 4E 85 F1 | 	sub	fp, #8
25c78     A7 F0 03 F6 | 	mov	ptra, fp
25c7c     B2 00 A0 FD | 	call	#popregs_
25c80                 | _fatfs_cc_f_unlink_ret
25c80     2D 00 64 FD | 	ret
25c84                 | 
25c84                 | _fatfs_cc_f_mkdir
25c84     00 4A 05 F6 | 	mov	COUNT_, #0
25c88     A8 00 A0 FD | 	call	#pushregs_
25c8c     5C F0 07 F1 | 	add	ptra, #92
25c90     04 4E 05 F1 | 	add	fp, #4
25c94     A7 12 62 FC | 	wrlong	arg01, fp
25c98     A7 12 02 F6 | 	mov	arg01, fp
25c9c     48 4E 05 F1 | 	add	fp, #72
25ca0     A7 14 02 F6 | 	mov	arg02, fp
25ca4     4C 4E 85 F1 | 	sub	fp, #76
25ca8     02 16 06 F6 | 	mov	arg03, #2
25cac     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
25cb0     08 4E 05 F1 | 	add	fp, #8
25cb4     A7 FA 61 FC | 	wrlong	result1, fp
25cb8     08 4E 85 F1 | 	sub	fp, #8
25cbc     00 FA 0D F2 | 	cmp	result1, #0 wz
25cc0     C4 02 90 5D |  if_ne	jmp	#LR__3935
25cc4     4C 4E 05 F1 | 	add	fp, #76
25cc8     A7 16 02 FB | 	rdlong	arg03, fp
25ccc     40 4E 85 F1 | 	sub	fp, #64
25cd0     A7 16 62 FC | 	wrlong	arg03, fp
25cd4     A7 12 02 F6 | 	mov	arg01, fp
25cd8     08 4E 85 F1 | 	sub	fp, #8
25cdc     A7 14 02 FB | 	rdlong	arg02, fp
25ce0     04 4E 85 F1 | 	sub	fp, #4
25ce4     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
25ce8     08 4E 05 F1 | 	add	fp, #8
25cec     A7 FA 61 FC | 	wrlong	result1, fp
25cf0     00 FA 4D F2 | 	cmps	result1, #0 wz
25cf4     08 4E 85 F1 | 	sub	fp, #8
25cf8     08 4E 05 A1 |  if_e	add	fp, #8
25cfc     A7 10 68 AC |  if_e	wrlong	#8, fp
25d00     08 4E 85 A1 |  if_e	sub	fp, #8
25d04     08 4E 05 F1 | 	add	fp, #8
25d08     A7 FA 01 FB | 	rdlong	result1, fp
25d0c     08 4E 85 F1 | 	sub	fp, #8
25d10     04 FA 0D F2 | 	cmp	result1, #4 wz
25d14     70 02 90 5D |  if_ne	jmp	#LR__3934
25d18     4C 4E 05 F1 | 	add	fp, #76
25d1c     A7 16 02 FB | 	rdlong	arg03, fp
25d20     10 4E 85 F1 | 	sub	fp, #16
25d24     A7 16 62 FC | 	wrlong	arg03, fp
25d28     A7 12 02 F6 | 	mov	arg01, fp
25d2c     3C 4E 85 F1 | 	sub	fp, #60
25d30     00 14 06 F6 | 	mov	arg02, #0
25d34     04 AC BF FD | 	call	#_fatfs_cc_create_chain
25d38     50 4E 05 F1 | 	add	fp, #80
25d3c     A7 FA 61 FC | 	wrlong	result1, fp
25d40     48 4E 85 F1 | 	sub	fp, #72
25d44     A7 00 68 FC | 	wrlong	#0, fp
25d48     48 4E 05 F1 | 	add	fp, #72
25d4c     A7 FA 09 FB | 	rdlong	result1, fp wz
25d50     50 4E 85 F1 | 	sub	fp, #80
25d54     08 4E 05 A1 |  if_e	add	fp, #8
25d58     A7 0E 68 AC |  if_e	wrlong	#7, fp
25d5c     08 4E 85 A1 |  if_e	sub	fp, #8
25d60     50 4E 05 F1 | 	add	fp, #80
25d64     A7 FA 01 FB | 	rdlong	result1, fp
25d68     50 4E 85 F1 | 	sub	fp, #80
25d6c     01 FA 0D F2 | 	cmp	result1, #1 wz
25d70     08 4E 05 A1 |  if_e	add	fp, #8
25d74     A7 04 68 AC |  if_e	wrlong	#2, fp
25d78     08 4E 85 A1 |  if_e	sub	fp, #8
25d7c     50 4E 05 F1 | 	add	fp, #80
25d80     A7 16 02 FB | 	rdlong	arg03, fp
25d84     50 4E 85 F1 | 	sub	fp, #80
25d88     FF FF 7F FF 
25d8c     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
25d90     08 4E 05 A1 |  if_e	add	fp, #8
25d94     A7 02 68 AC |  if_e	wrlong	#1, fp
25d98     08 4E 85 A1 |  if_e	sub	fp, #8
25d9c     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
25da0     58 4E 05 F1 | 	add	fp, #88
25da4     A7 FA 61 FC | 	wrlong	result1, fp
25da8     50 4E 85 F1 | 	sub	fp, #80
25dac     A7 FA 09 FB | 	rdlong	result1, fp wz
25db0     08 4E 85 F1 | 	sub	fp, #8
25db4     1C 01 90 5D |  if_ne	jmp	#LR__3931
25db8     4C 4E 05 F1 | 	add	fp, #76
25dbc     A7 12 02 FB | 	rdlong	arg01, fp
25dc0     04 4E 05 F1 | 	add	fp, #4
25dc4     A7 14 02 FB | 	rdlong	arg02, fp
25dc8     50 4E 85 F1 | 	sub	fp, #80
25dcc     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
25dd0     08 4E 05 F1 | 	add	fp, #8
25dd4     A7 FA 61 FC | 	wrlong	result1, fp
25dd8     00 FA 4D F2 | 	cmps	result1, #0 wz
25ddc     08 4E 85 F1 | 	sub	fp, #8
25de0     F0 00 90 5D |  if_ne	jmp	#LR__3930
25de4     4C 4E 05 F1 | 	add	fp, #76
25de8     A7 12 02 FB | 	rdlong	arg01, fp
25dec     4C 4E 85 F1 | 	sub	fp, #76
25df0     34 12 06 F1 | 	add	arg01, #52
25df4     20 14 06 F6 | 	mov	arg02, #32
25df8     0B 16 06 F6 | 	mov	arg03, #11
25dfc     98 00 A0 FD | 	call	#\builtin_bytefill_
25e00     4C 4E 05 F1 | 	add	fp, #76
25e04     A7 FA 01 FB | 	rdlong	result1, fp
25e08     34 FA 05 F1 | 	add	result1, #52
25e0c     FD 5C 48 FC | 	wrbyte	#46, result1
25e10     A7 16 02 FB | 	rdlong	arg03, fp
25e14     3F 16 06 F1 | 	add	arg03, #63
25e18     0B 21 48 FC | 	wrbyte	#16, arg03
25e1c     A7 12 02 FB | 	rdlong	arg01, fp
25e20     4A 12 06 F1 | 	add	arg01, #74
25e24     0C 4E 05 F1 | 	add	fp, #12
25e28     A7 14 02 FB | 	rdlong	arg02, fp
25e2c     09 15 62 FC | 	wrlong	arg02, arg01
25e30     0C 4E 85 F1 | 	sub	fp, #12
25e34     A7 14 02 FB | 	rdlong	arg02, fp
25e38     0A 13 02 F6 | 	mov	arg01, arg02
25e3c     34 14 06 F1 | 	add	arg02, #52
25e40     04 4E 05 F1 | 	add	fp, #4
25e44     A7 16 02 FB | 	rdlong	arg03, fp
25e48     50 4E 85 F1 | 	sub	fp, #80
25e4c     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
25e50     4C 4E 05 F1 | 	add	fp, #76
25e54     A7 14 02 FB | 	rdlong	arg02, fp
25e58     0A 13 02 F6 | 	mov	arg01, arg02
25e5c     54 12 06 F1 | 	add	arg01, #84
25e60     4C 4E 85 F1 | 	sub	fp, #76
25e64     34 14 06 F1 | 	add	arg02, #52
25e68     20 16 06 F6 | 	mov	arg03, #32
25e6c     64 2D BF FD | 	call	#__system____builtin_memmove
25e70     4C 4E 05 F1 | 	add	fp, #76
25e74     A7 16 02 FB | 	rdlong	arg03, fp
25e78     55 16 06 F1 | 	add	arg03, #85
25e7c     0B 5D 48 FC | 	wrbyte	#46, arg03
25e80     38 4E 85 F1 | 	sub	fp, #56
25e84     A7 16 02 FB | 	rdlong	arg03, fp
25e88     40 4E 05 F1 | 	add	fp, #64
25e8c     A7 16 62 FC | 	wrlong	arg03, fp
25e90     08 4E 85 F1 | 	sub	fp, #8
25e94     A7 14 02 FB | 	rdlong	arg02, fp
25e98     0A 13 02 F6 | 	mov	arg01, arg02
25e9c     54 14 06 F1 | 	add	arg02, #84
25ea0     4C 4E 85 F1 | 	sub	fp, #76
25ea4     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
25ea8     4C 4E 05 F1 | 	add	fp, #76
25eac     A7 16 02 FB | 	rdlong	arg03, fp
25eb0     03 16 06 F1 | 	add	arg03, #3
25eb4     0B 03 48 FC | 	wrbyte	#1, arg03
25eb8     40 4E 85 F1 | 	sub	fp, #64
25ebc     A7 12 02 F6 | 	mov	arg01, fp
25ec0     0C 4E 85 F1 | 	sub	fp, #12
25ec4     44 BA BF FD | 	call	#_fatfs_cc_dir_register
25ec8     08 4E 05 F1 | 	add	fp, #8
25ecc     A7 FA 61 FC | 	wrlong	result1, fp
25ed0     08 4E 85 F1 | 	sub	fp, #8
25ed4                 | LR__3930
25ed4                 | LR__3931
25ed4     08 4E 05 F1 | 	add	fp, #8
25ed8     A7 FA 09 FB | 	rdlong	result1, fp wz
25edc     08 4E 85 F1 | 	sub	fp, #8
25ee0     88 00 90 5D |  if_ne	jmp	#LR__3932
25ee4     28 4E 05 F1 | 	add	fp, #40
25ee8     A7 12 02 FB | 	rdlong	arg01, fp
25eec     16 12 06 F1 | 	add	arg01, #22
25ef0     30 4E 05 F1 | 	add	fp, #48
25ef4     A7 14 02 FB | 	rdlong	arg02, fp
25ef8     09 15 62 FC | 	wrlong	arg02, arg01
25efc     0C 4E 85 F1 | 	sub	fp, #12
25f00     A7 12 02 FB | 	rdlong	arg01, fp
25f04     24 4E 85 F1 | 	sub	fp, #36
25f08     A7 14 02 FB | 	rdlong	arg02, fp
25f0c     28 4E 05 F1 | 	add	fp, #40
25f10     A7 16 02 FB | 	rdlong	arg03, fp
25f14     50 4E 85 F1 | 	sub	fp, #80
25f18     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
25f1c     28 4E 05 F1 | 	add	fp, #40
25f20     A7 FA 01 FB | 	rdlong	result1, fp
25f24     0B FA 05 F1 | 	add	result1, #11
25f28     FD 20 48 FC | 	wrbyte	#16, result1
25f2c     24 4E 05 F1 | 	add	fp, #36
25f30     A7 FA 01 FB | 	rdlong	result1, fp
25f34     03 FA 05 F1 | 	add	result1, #3
25f38     FD 02 48 FC | 	wrbyte	#1, result1
25f3c     44 4E 85 F1 | 	sub	fp, #68
25f40     A7 FA 09 FB | 	rdlong	result1, fp wz
25f44     08 4E 85 F1 | 	sub	fp, #8
25f48     3C 00 90 5D |  if_ne	jmp	#LR__3933
25f4c     4C 4E 05 F1 | 	add	fp, #76
25f50     A7 12 02 FB | 	rdlong	arg01, fp
25f54     4C 4E 85 F1 | 	sub	fp, #76
25f58     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
25f5c     08 4E 05 F1 | 	add	fp, #8
25f60     A7 FA 61 FC | 	wrlong	result1, fp
25f64     08 4E 85 F1 | 	sub	fp, #8
25f68     1C 00 90 FD | 	jmp	#LR__3933
25f6c                 | LR__3932
25f6c     3C 4E 05 F1 | 	add	fp, #60
25f70     A7 12 02 F6 | 	mov	arg01, fp
25f74     14 4E 05 F1 | 	add	fp, #20
25f78     A7 14 02 FB | 	rdlong	arg02, fp
25f7c     50 4E 85 F1 | 	sub	fp, #80
25f80     00 16 06 F6 | 	mov	arg03, #0
25f84     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
25f88                 | LR__3933
25f88                 | LR__3934
25f88                 | LR__3935
25f88                 | ' 				remove_chain(&sobj, dcl, 0);
25f88                 | ' 			}
25f88                 | ' 		}
25f88                 | ' 		;
25f88                 | ' 	}
25f88                 | ' 
25f88                 | ' 	return res ;
25f88     08 4E 05 F1 | 	add	fp, #8
25f8c     A7 FA 01 FB | 	rdlong	result1, fp
25f90     08 4E 85 F1 | 	sub	fp, #8
25f94     A7 F0 03 F6 | 	mov	ptra, fp
25f98     B2 00 A0 FD | 	call	#popregs_
25f9c                 | _fatfs_cc_f_mkdir_ret
25f9c     2D 00 64 FD | 	ret
25fa0                 | 
25fa0                 | _fatfs_cc_f_rename
25fa0     01 4A 05 F6 | 	mov	COUNT_, #1
25fa4     A8 00 A0 FD | 	call	#pushregs_
25fa8     9C F0 07 F1 | 	add	ptra, #156
25fac     04 4E 05 F1 | 	add	fp, #4
25fb0     A7 12 62 FC | 	wrlong	arg01, fp
25fb4     04 4E 05 F1 | 	add	fp, #4
25fb8     A7 14 62 FC | 	wrlong	arg02, fp
25fbc     A7 12 02 F6 | 	mov	arg01, fp
25fc0     08 4E 85 F1 | 	sub	fp, #8
25fc4     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
25fc8     04 4E 05 F1 | 	add	fp, #4
25fcc     A7 12 02 F6 | 	mov	arg01, fp
25fd0     6C 4E 05 F1 | 	add	fp, #108
25fd4     A7 14 02 F6 | 	mov	arg02, fp
25fd8     70 4E 85 F1 | 	sub	fp, #112
25fdc     02 16 06 F6 | 	mov	arg03, #2
25fe0     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
25fe4     0C 4E 05 F1 | 	add	fp, #12
25fe8     A7 FA 61 FC | 	wrlong	result1, fp
25fec     0C 4E 85 F1 | 	sub	fp, #12
25ff0     00 FA 0D F2 | 	cmp	result1, #0 wz
25ff4     44 03 90 5D |  if_ne	jmp	#LR__3953
25ff8     70 4E 05 F1 | 	add	fp, #112
25ffc     A7 16 02 FB | 	rdlong	arg03, fp
26000     60 4E 85 F1 | 	sub	fp, #96
26004     A7 16 62 FC | 	wrlong	arg03, fp
26008     A7 12 02 F6 | 	mov	arg01, fp
2600c     0C 4E 85 F1 | 	sub	fp, #12
26010     A7 14 02 FB | 	rdlong	arg02, fp
26014     04 4E 85 F1 | 	sub	fp, #4
26018     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
2601c     0C 4E 05 F1 | 	add	fp, #12
26020     A7 FA 61 FC | 	wrlong	result1, fp
26024     00 FA 4D F2 | 	cmps	result1, #0 wz
26028     0C 4E 85 F1 | 	sub	fp, #12
2602c     1C 00 90 5D |  if_ne	jmp	#LR__3940
26030     3B 4E 05 F1 | 	add	fp, #59
26034     A7 FA C1 FA | 	rdbyte	result1, fp
26038     3B 4E 85 F1 | 	sub	fp, #59
2603c     A0 FA CD F7 | 	test	result1, #160 wz
26040     0C 4E 05 51 |  if_ne	add	fp, #12
26044     A7 0C 68 5C |  if_ne	wrlong	#6, fp
26048     0C 4E 85 51 |  if_ne	sub	fp, #12
2604c                 | LR__3940
2604c     0C 4E 05 F1 | 	add	fp, #12
26050     A7 1E 0A FB | 	rdlong	local01, fp wz
26054     0C 4E 85 F1 | 	sub	fp, #12
26058     E0 02 90 5D |  if_ne	jmp	#LR__3952
2605c     74 4E 05 F1 | 	add	fp, #116
26060     A7 12 02 F6 | 	mov	arg01, fp
26064     48 4E 85 F1 | 	sub	fp, #72
26068     A7 14 02 FB | 	rdlong	arg02, fp
2606c     2C 4E 85 F1 | 	sub	fp, #44
26070     20 16 06 F6 | 	mov	arg03, #32
26074     5C 2B BF FD | 	call	#__system____builtin_memmove
26078     40 4E 05 F1 | 	add	fp, #64
2607c     A7 12 02 F6 | 	mov	arg01, fp
26080     30 4E 85 F1 | 	sub	fp, #48
26084     A7 14 02 F6 | 	mov	arg02, fp
26088     10 4E 85 F1 | 	sub	fp, #16
2608c     30 16 06 F6 | 	mov	arg03, #48
26090     40 2B BF FD | 	call	#__system____builtin_memmove
26094     40 4E 05 F1 | 	add	fp, #64
26098     A7 12 02 F6 | 	mov	arg01, fp
2609c     38 4E 85 F1 | 	sub	fp, #56
260a0     A7 14 02 FB | 	rdlong	arg02, fp
260a4     08 4E 85 F1 | 	sub	fp, #8
260a8     34 CA BF FD | 	call	#_fatfs_cc_follow_path
260ac     0C 4E 05 F1 | 	add	fp, #12
260b0     A7 FA 61 FC | 	wrlong	result1, fp
260b4     0C 4E 85 F1 | 	sub	fp, #12
260b8     00 FA 0D F2 | 	cmp	result1, #0 wz
260bc     4C 00 90 5D |  if_ne	jmp	#LR__3943
260c0     48 4E 05 F1 | 	add	fp, #72
260c4     A7 FA 01 FB | 	rdlong	result1, fp
260c8     30 4E 85 F1 | 	sub	fp, #48
260cc     A7 16 02 FB | 	rdlong	arg03, fp
260d0     18 4E 85 F1 | 	sub	fp, #24
260d4     0B FB 09 F2 | 	cmp	result1, arg03 wz
260d8     20 00 90 5D |  if_ne	jmp	#LR__3941
260dc     50 4E 05 F1 | 	add	fp, #80
260e0     A7 FA 01 FB | 	rdlong	result1, fp
260e4     30 4E 85 F1 | 	sub	fp, #48
260e8     A7 16 02 FB | 	rdlong	arg03, fp
260ec     20 4E 85 F1 | 	sub	fp, #32
260f0     0B FB 09 F2 | 	cmp	result1, arg03 wz
260f4     04 1E 06 A6 |  if_e	mov	local01, #4
260f8     04 00 90 AD |  if_e	jmp	#LR__3942
260fc                 | LR__3941
260fc     08 1E 06 F6 | 	mov	local01, #8
26100                 | LR__3942
26100     0C 4E 05 F1 | 	add	fp, #12
26104     A7 1E 62 FC | 	wrlong	local01, fp
26108     0C 4E 85 F1 | 	sub	fp, #12
2610c                 | LR__3943
2610c     0C 4E 05 F1 | 	add	fp, #12
26110     A7 1E 02 FB | 	rdlong	local01, fp
26114     0C 4E 85 F1 | 	sub	fp, #12
26118     04 1E 0E F2 | 	cmp	local01, #4 wz
2611c     CC 01 90 5D |  if_ne	jmp	#LR__3949
26120     40 4E 05 F1 | 	add	fp, #64
26124     A7 12 02 F6 | 	mov	arg01, fp
26128     40 4E 85 F1 | 	sub	fp, #64
2612c     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
26130     0C 4E 05 F1 | 	add	fp, #12
26134     A7 FA 61 FC | 	wrlong	result1, fp
26138     0C 4E 85 F1 | 	sub	fp, #12
2613c     00 FA 0D F2 | 	cmp	result1, #0 wz
26140     A8 01 90 5D |  if_ne	jmp	#LR__3948
26144     5C 4E 05 F1 | 	add	fp, #92
26148     A7 12 02 FB | 	rdlong	arg01, fp
2614c     38 4E 05 F1 | 	add	fp, #56
26150     A7 12 62 FC | 	wrlong	arg01, fp
26154     0D 12 06 F1 | 	add	arg01, #13
26158     20 4E 85 F1 | 	sub	fp, #32
2615c     A7 14 02 F6 | 	mov	arg02, fp
26160     74 4E 85 F1 | 	sub	fp, #116
26164     0D 14 06 F1 | 	add	arg02, #13
26168     13 16 06 F6 | 	mov	arg03, #19
2616c     64 2A BF FD | 	call	#__system____builtin_memmove
26170     94 4E 05 F1 | 	add	fp, #148
26174     A7 1E 02 FB | 	rdlong	local01, fp
26178     15 4E 85 F1 | 	sub	fp, #21
2617c     A7 FA C1 FA | 	rdbyte	result1, fp
26180     0B 1E 06 F1 | 	add	local01, #11
26184     0F FB 41 FC | 	wrbyte	result1, local01
26188     15 4E 05 F1 | 	add	fp, #21
2618c     A7 1E 02 FB | 	rdlong	local01, fp
26190     94 4E 85 F1 | 	sub	fp, #148
26194     0B 1E 06 F1 | 	add	local01, #11
26198     0F 1F C2 FA | 	rdbyte	local01, local01
2619c     10 1E CE F7 | 	test	local01, #16 wz
261a0     24 00 90 5D |  if_ne	jmp	#LR__3944
261a4     94 4E 05 F1 | 	add	fp, #148
261a8     A7 FA 01 FB | 	rdlong	result1, fp
261ac     FD 1E 02 F6 | 	mov	local01, result1
261b0     94 4E 85 F1 | 	sub	fp, #148
261b4     0B FA 05 F1 | 	add	result1, #11
261b8     FD FA C1 FA | 	rdbyte	result1, result1
261bc     20 FA 45 F5 | 	or	result1, #32
261c0     0B 1E 06 F1 | 	add	local01, #11
261c4     0F FB 41 FC | 	wrbyte	result1, local01
261c8                 | LR__3944
261c8     70 4E 05 F1 | 	add	fp, #112
261cc     A7 1E 02 FB | 	rdlong	local01, fp
261d0     03 1E 06 F1 | 	add	local01, #3
261d4     0F 03 48 FC | 	wrbyte	#1, local01
261d8     24 4E 05 F1 | 	add	fp, #36
261dc     A7 1E 02 FB | 	rdlong	local01, fp
261e0     94 4E 85 F1 | 	sub	fp, #148
261e4     0B 1E 06 F1 | 	add	local01, #11
261e8     0F 1F C2 FA | 	rdbyte	local01, local01
261ec     10 1E CE F7 | 	test	local01, #16 wz
261f0     F8 00 90 AD |  if_e	jmp	#LR__3947
261f4     18 4E 05 F1 | 	add	fp, #24
261f8     A7 16 02 FB | 	rdlong	arg03, fp
261fc     30 4E 05 F1 | 	add	fp, #48
26200     A7 1E 02 FB | 	rdlong	local01, fp
26204     48 4E 85 F1 | 	sub	fp, #72
26208     0F 17 0A F2 | 	cmp	arg03, local01 wz
2620c     DC 00 90 AD |  if_e	jmp	#LR__3947
26210     70 4E 05 F1 | 	add	fp, #112
26214     A7 12 02 FB | 	rdlong	arg01, fp
26218     09 1F 02 F6 | 	mov	local01, arg01
2621c     24 4E 05 F1 | 	add	fp, #36
26220     A7 14 02 FB | 	rdlong	arg02, fp
26224     94 4E 85 F1 | 	sub	fp, #148
26228     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
2622c     FD 14 02 F6 | 	mov	arg02, result1
26230     0F 13 02 F6 | 	mov	arg01, local01
26234     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
26238     98 4E 05 F1 | 	add	fp, #152
2623c     A7 FA 61 FC | 	wrlong	result1, fp
26240     00 FA 4D F2 | 	cmps	result1, #0 wz
26244     98 4E 85 F1 | 	sub	fp, #152
26248     0C 4E 05 A1 |  if_e	add	fp, #12
2624c     A7 04 68 AC |  if_e	wrlong	#2, fp
26250     0C 4E 85 A1 |  if_e	sub	fp, #12
26254     94 00 90 AD |  if_e	jmp	#LR__3946
26258     70 4E 05 F1 | 	add	fp, #112
2625c     A7 12 02 FB | 	rdlong	arg01, fp
26260     28 4E 05 F1 | 	add	fp, #40
26264     A7 14 02 FB | 	rdlong	arg02, fp
26268     98 4E 85 F1 | 	sub	fp, #152
2626c     4C A0 BF FD | 	call	#_fatfs_cc_move_window
26270     0C 4E 05 F1 | 	add	fp, #12
26274     A7 FA 61 FC | 	wrlong	result1, fp
26278     64 4E 05 F1 | 	add	fp, #100
2627c     A7 1E 02 FB | 	rdlong	local01, fp
26280     54 1E 06 F1 | 	add	local01, #84
26284     24 4E 05 F1 | 	add	fp, #36
26288     A7 1E 62 FC | 	wrlong	local01, fp
2628c     88 4E 85 F1 | 	sub	fp, #136
26290     A7 1E 0A FB | 	rdlong	local01, fp wz
26294     0C 4E 85 F1 | 	sub	fp, #12
26298     50 00 90 5D |  if_ne	jmp	#LR__3945
2629c     94 4E 05 F1 | 	add	fp, #148
262a0     A7 1E 02 FB | 	rdlong	local01, fp
262a4     94 4E 85 F1 | 	sub	fp, #148
262a8     01 1E 06 F1 | 	add	local01, #1
262ac     0F 1F C2 FA | 	rdbyte	local01, local01
262b0     2E 1E 0E F2 | 	cmp	local01, #46 wz
262b4     34 00 90 5D |  if_ne	jmp	#LR__3945
262b8     70 4E 05 F1 | 	add	fp, #112
262bc     A7 12 02 FB | 	rdlong	arg01, fp
262c0     24 4E 05 F1 | 	add	fp, #36
262c4     A7 14 02 FB | 	rdlong	arg02, fp
262c8     4C 4E 85 F1 | 	sub	fp, #76
262cc     A7 16 02 FB | 	rdlong	arg03, fp
262d0     48 4E 85 F1 | 	sub	fp, #72
262d4     50 AD BF FD | 	call	#_fatfs_cc_st_clust
262d8     70 4E 05 F1 | 	add	fp, #112
262dc     A7 1E 02 FB | 	rdlong	local01, fp
262e0     70 4E 85 F1 | 	sub	fp, #112
262e4     03 1E 06 F1 | 	add	local01, #3
262e8     0F 03 48 FC | 	wrbyte	#1, local01
262ec                 | LR__3945
262ec                 | LR__3946
262ec                 | LR__3947
262ec                 | LR__3948
262ec                 | LR__3949
262ec     0C 4E 05 F1 | 	add	fp, #12
262f0     A7 1E 0A FB | 	rdlong	local01, fp wz
262f4     0C 4E 85 F1 | 	sub	fp, #12
262f8     40 00 90 5D |  if_ne	jmp	#LR__3951
262fc     10 4E 05 F1 | 	add	fp, #16
26300     A7 12 02 F6 | 	mov	arg01, fp
26304     10 4E 85 F1 | 	sub	fp, #16
26308     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
2630c     0C 4E 05 F1 | 	add	fp, #12
26310     A7 FA 61 FC | 	wrlong	result1, fp
26314     0C 4E 85 F1 | 	sub	fp, #12
26318     00 FA 0D F2 | 	cmp	result1, #0 wz
2631c     1C 00 90 5D |  if_ne	jmp	#LR__3950
26320     70 4E 05 F1 | 	add	fp, #112
26324     A7 12 02 FB | 	rdlong	arg01, fp
26328     70 4E 85 F1 | 	sub	fp, #112
2632c     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
26330     0C 4E 05 F1 | 	add	fp, #12
26334     A7 FA 61 FC | 	wrlong	result1, fp
26338     0C 4E 85 F1 | 	sub	fp, #12
2633c                 | LR__3950
2633c                 | LR__3951
2633c                 | LR__3952
2633c                 | LR__3953
2633c                 | ' 					res = sync_fs(fs);
2633c                 | ' 				}
2633c                 | ' 			}
2633c                 | ' 
2633c                 | ' 		}
2633c                 | ' 		;
2633c                 | ' 	}
2633c                 | ' 
2633c                 | ' 	return res ;
2633c     0C 4E 05 F1 | 	add	fp, #12
26340     A7 FA 01 FB | 	rdlong	result1, fp
26344     0C 4E 85 F1 | 	sub	fp, #12
26348     A7 F0 03 F6 | 	mov	ptra, fp
2634c     B2 00 A0 FD | 	call	#popregs_
26350                 | _fatfs_cc_f_rename_ret
26350     2D 00 64 FD | 	ret
26354                 | 
26354                 | _fatfs_cc_time
26354     00 4A 05 F6 | 	mov	COUNT_, #0
26358     A8 00 A0 FD | 	call	#pushregs_
2635c     14 F0 07 F1 | 	add	ptra, #20
26360     04 4E 05 F1 | 	add	fp, #4
26364     A7 12 62 FC | 	wrlong	arg01, fp
26368     04 4E 05 F1 | 	add	fp, #4
2636c     A7 12 02 F6 | 	mov	arg01, fp
26370     08 4E 85 F1 | 	sub	fp, #8
26374     00 14 06 F6 | 	mov	arg02, #0
26378     FC 17 B0 FD | 	call	#_fatfs_cc_gettimeofday
2637c     08 4E 05 F1 | 	add	fp, #8
26380     A7 FA 01 FB | 	rdlong	result1, fp
26384     08 4E 05 F1 | 	add	fp, #8
26388     A7 FA 61 FC | 	wrlong	result1, fp
2638c     0C 4E 85 F1 | 	sub	fp, #12
26390     A7 FA 09 FB | 	rdlong	result1, fp wz
26394     04 4E 85 F1 | 	sub	fp, #4
26398     18 00 90 AD |  if_e	jmp	#LR__3960
2639c     04 4E 05 F1 | 	add	fp, #4
263a0     A7 FA 01 FB | 	rdlong	result1, fp
263a4     0C 4E 05 F1 | 	add	fp, #12
263a8     A7 14 02 FB | 	rdlong	arg02, fp
263ac     10 4E 85 F1 | 	sub	fp, #16
263b0     FD 14 62 FC | 	wrlong	arg02, result1
263b4                 | LR__3960
263b4                 | '         *tp = now;
263b4                 | '     return now;
263b4     10 4E 05 F1 | 	add	fp, #16
263b8     A7 FA 01 FB | 	rdlong	result1, fp
263bc     10 4E 85 F1 | 	sub	fp, #16
263c0     A7 F0 03 F6 | 	mov	ptra, fp
263c4     B2 00 A0 FD | 	call	#popregs_
263c8                 | _fatfs_cc_time_ret
263c8     2D 00 64 FD | 	ret
263cc                 | 
263cc                 | _fatfs_cc_mktime
263cc     06 4A 05 F6 | 	mov	COUNT_, #6
263d0     A8 00 A0 FD | 	call	#pushregs_
263d4     09 1F 02 F6 | 	mov	local01, arg01
263d8     14 1E 06 F1 | 	add	local01, #20
263dc     0F 13 02 FB | 	rdlong	arg01, local01
263e0     14 1E 86 F1 | 	sub	local01, #20
263e4     46 12 56 F2 | 	cmps	arg01, #70 wc
263e8                 | '                 return (time_t) -1;
263e8     01 FA 65 C6 |  if_b	neg	result1, #1
263ec     7C 01 90 CD |  if_b	jmp	#LR__3974
263f0     03 00 00 FF 
263f4     6C 21 06 F6 | 	mov	local02, ##1900
263f8     14 1E 06 F1 | 	add	local01, #20
263fc     0F FB 01 FB | 	rdlong	result1, local01
26400     FD 20 02 F1 | 	add	local02, result1
26404     08 1E 86 F1 | 	sub	local01, #8
26408     0F 23 02 FB | 	rdlong	local03, local01
2640c     01 22 86 F1 | 	sub	local03, #1
26410     04 1E 06 F1 | 	add	local01, #4
26414     0F 13 02 FB | 	rdlong	arg01, local01
26418     10 1E 86 F1 | 	sub	local01, #16
2641c     02 12 66 F0 | 	shl	arg01, #2
26420     02 00 00 FF 
26424     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
26428     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2642c     09 FB 01 FB | 	rdlong	result1, arg01
26430     FD 22 02 F1 | 	add	local03, result1
26434     10 13 02 F6 | 	mov	arg01, local02
26438     02 00 00 FF 
2643c     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
26440     DC 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
26444     00 FA 0D F2 | 	cmp	result1, #0 wz
26448     1C 00 90 AD |  if_e	jmp	#LR__3970
2644c     00 24 06 F6 | 	mov	local04, #0
26450     10 1E 06 F1 | 	add	local01, #16
26454     0F FB 01 FB | 	rdlong	result1, local01
26458     10 1E 86 F1 | 	sub	local01, #16
2645c     02 FA 55 F2 | 	cmps	result1, #2 wc
26460     01 24 06 36 |  if_ae	mov	local04, #1
26464     04 00 90 FD | 	jmp	#LR__3971
26468                 | LR__3970
26468     00 24 06 F6 | 	mov	local04, #0
2646c                 | LR__3971
2646c     04 1E 06 F1 | 	add	local01, #4
26470     0F FB 01 FB | 	rdlong	result1, local01
26474     04 1E 86 F1 | 	sub	local01, #4
26478     0F 27 02 FB | 	rdlong	local05, local01
2647c     08 1E 06 F1 | 	add	local01, #8
26480     0F 13 02 FB | 	rdlong	arg01, local01
26484     07 00 00 FF 
26488     10 12 06 FD | 	qmul	arg01, ##3600
2648c     12 23 02 F1 | 	add	local03, local04
26490     FD 24 02 F6 | 	mov	local04, result1
26494     04 24 66 F0 | 	shl	local04, #4
26498     FD 24 82 F1 | 	sub	local04, result1
2649c     02 24 66 F0 | 	shl	local04, #2
264a0     12 27 02 F1 | 	add	local05, local04
264a4     08 1E 86 F1 | 	sub	local01, #8
264a8     18 24 62 FD | 	getqx	local04
264ac     A8 00 00 FF 
264b0     80 23 06 FD | 	qmul	local03, ##86400
264b4     12 27 02 F1 | 	add	local05, local04
264b8     10 23 02 F6 | 	mov	local03, local02
264bc     03 00 00 FF 
264c0     B2 23 86 F1 | 	sub	local03, ##1970
264c4     18 24 62 FD | 	getqx	local04
264c8     99 F0 00 FF 
264cc     80 23 06 FD | 	qmul	local03, ##31536000
264d0     12 27 02 F1 | 	add	local05, local04
264d4     10 23 02 F6 | 	mov	local03, local02
264d8     03 00 00 FF 
264dc     B1 23 86 F1 | 	sub	local03, ##1969
264e0     11 29 52 F6 | 	abs	local06, local03 wc
264e4     02 28 46 F0 | 	shr	local06, #2
264e8     14 29 82 F6 | 	negc	local06, local06
264ec     03 00 00 FF 
264f0     D1 21 56 F2 | 	cmps	local02, ##2001 wc
264f4     18 24 62 FD | 	getqx	local04
264f8     12 27 02 F1 | 	add	local05, local04
264fc     18 00 90 CD |  if_b	jmp	#LR__3972
26500     03 00 00 FF 
26504     D0 21 86 F1 | 	sub	local02, ##2000
26508     10 25 52 F6 | 	abs	local04, local02 wc
2650c     64 24 16 FD | 	qdiv	local04, #100
26510     18 24 62 FD | 	getqx	local04
26514     12 29 A2 F3 | 	sumnc	local06, local04
26518                 | LR__3972
26518     A8 00 00 FF 
2651c     80 29 06 FD | 	qmul	local06, ##86400
26520     18 28 62 FD | 	getqx	local06
26524     14 27 02 F1 | 	add	local05, local06
26528     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
2652c     02 00 00 FF 
26530     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
26534     F6 28 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
26538     14 27 02 F1 | 	add	local05, local06
2653c     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
26540     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
26544     02 00 00 FF 
26548     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2654c     01 22 0E F2 | 	cmp	local03, #1 wz
26550     14 00 90 5D |  if_ne	jmp	#LR__3973
26554     0F 13 02 F6 | 	mov	arg01, local01
26558     C8 19 B0 FD | 	call	#_fatfs_cc___indst
2655c     00 FA 0D F2 | 	cmp	result1, #0 wz
26560     07 00 00 5F 
26564     10 26 86 51 |  if_ne	sub	local05, ##3600
26568                 | LR__3973
26568                 | '                 s -=  (3600L) ;
26568                 | ' 
26568                 | '         return s;
26568     13 FB 01 F6 | 	mov	result1, local05
2656c                 | LR__3974
2656c     A7 F0 03 F6 | 	mov	ptra, fp
26570     B2 00 A0 FD | 	call	#popregs_
26574                 | _fatfs_cc_mktime_ret
26574     2D 00 64 FD | 	ret
26578                 | 
26578                 | _fatfs_cc__gmtime_r
26578     03 4A 05 F6 | 	mov	COUNT_, #3
2657c     A8 00 A0 FD | 	call	#pushregs_
26580     09 1F 02 FB | 	rdlong	local01, arg01
26584     A8 00 00 FF 
26588     80 1F 16 FD | 	qdiv	local01, ##86400
2658c     18 FA 61 FD | 	getqx	result1
26590     04 FA 05 F1 | 	add	result1, #4
26594     07 FA 15 FD | 	qdiv	result1, #7
26598     18 14 06 F1 | 	add	arg02, #24
2659c     D1 7F 27 FF 
265a0     00 1E 16 F2 | 	cmp	local01, ##1325376000 wc
265a4     D1 7F 27 3F 
265a8     00 1E 86 31 |  if_ae	sub	local01, ##1325376000
265ac     03 00 00 3F 
265b0     DC 21 06 36 |  if_ae	mov	local02, ##2012
265b4     03 00 00 CF 
265b8     B2 21 06 C6 |  if_b	mov	local02, ##1970
265bc                 | ' 	  year = 1970;
265bc                 | ' 	}
265bc                 | ' 
265bc                 | ' 	for(;;) {
265bc     19 FA 61 FD | 	getqy	result1
265c0     0A FB 61 FC | 	wrlong	result1, arg02
265c4     18 14 86 F1 | 	sub	arg02, #24
265c8                 | LR__3980
265c8     10 13 02 F6 | 	mov	arg01, local02
265cc     50 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
265d0     00 FA 0D F2 | 	cmp	result1, #0 wz
265d4     42 F1 00 5F 
265d8     00 23 06 56 |  if_ne	mov	local03, ##31622400
265dc     99 F0 00 AF 
265e0     80 23 06 A6 |  if_e	mov	local03, ##31536000
265e4     11 1F 12 F2 | 	cmp	local01, local03 wc
265e8                 | ' 	    break;
265e8     01 20 06 31 |  if_ae	add	local02, #1
265ec     11 1F 82 31 |  if_ae	sub	local01, local03
265f0     D4 FF 9F 3D |  if_ae	jmp	#LR__3980
265f4     A8 00 00 FF 
265f8     80 1F 16 FD | 	qdiv	local01, ##86400
265fc     10 23 02 F6 | 	mov	local03, local02
26600     03 00 00 FF 
26604     6C 23 86 F1 | 	sub	local03, ##1900
26608     14 14 06 F1 | 	add	arg02, #20
2660c     0A 23 62 FC | 	wrlong	local03, arg02
26610     08 14 06 F1 | 	add	arg02, #8
26614     10 13 02 F6 | 	mov	arg01, local02
26618     18 20 62 FD | 	getqx	local02
2661c     0A 21 62 FC | 	wrlong	local02, arg02
26620     1C 14 86 F1 | 	sub	arg02, #28
26624     F8 15 B0 FD | 	call	#_fatfs_cc__is_leap_year
26628     00 FA 0D F2 | 	cmp	result1, #0 wz
2662c     1D 22 06 56 |  if_ne	mov	local03, #29
26630     1C 22 06 A6 |  if_e	mov	local03, #28
26634     02 00 00 FF 
26638     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
2663c     F6 22 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
26640     02 00 00 FF 
26644     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
26648                 | ' 
26648                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
26648                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
26648     00 12 06 F6 | 	mov	arg01, #0
2664c     97 2A 48 FB | 	callpa	#(@LR__3982-@LR__3981)>>2,fcache_load_ptr_
26650                 | LR__3981
26650     09 23 02 F6 | 	mov	local03, arg01
26654     02 22 66 F0 | 	shl	local03, #2
26658     02 00 00 FF 
2665c     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
26660     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
26664     11 23 02 FB | 	rdlong	local03, local03
26668     11 21 52 F2 | 	cmps	local02, local03 wc
2666c     02 00 00 FF 
26670     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
26674     2C 00 90 CD |  if_b	jmp	#LR__3983
26678     09 23 02 F6 | 	mov	local03, arg01
2667c     02 22 66 F0 | 	shl	local03, #2
26680     02 00 00 FF 
26684     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
26688     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2668c     11 23 02 FB | 	rdlong	local03, local03
26690     11 21 82 F1 | 	sub	local02, local03
26694     01 12 06 F1 | 	add	arg01, #1
26698     02 00 00 FF 
2669c     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
266a0     AC FF 9F FD | 	jmp	#LR__3981
266a4                 | LR__3982
266a4                 | LR__3983
266a4     A8 00 00 FF 
266a8     80 1F 16 FD | 	qdiv	local01, ##86400
266ac     10 14 06 F1 | 	add	arg02, #16
266b0     0A 13 62 FC | 	wrlong	arg01, arg02
266b4     01 20 06 F1 | 	add	local02, #1
266b8     04 14 86 F1 | 	sub	arg02, #4
266bc     0A 21 62 FC | 	wrlong	local02, arg02
266c0     19 1E 62 FD | 	getqy	local01
266c4     07 00 00 FF 
266c8     10 1E 16 FD | 	qdiv	local01, ##3600
266cc     18 22 62 FD | 	getqx	local03
266d0     07 00 00 FF 
266d4     10 1E 16 FD | 	qdiv	local01, ##3600
266d8     04 14 86 F1 | 	sub	arg02, #4
266dc     0A 23 62 FC | 	wrlong	local03, arg02
266e0     19 1E 62 FD | 	getqy	local01
266e4     3C 1E 16 FD | 	qdiv	local01, #60
266e8     18 22 62 FD | 	getqx	local03
266ec     3C 1E 16 FD | 	qdiv	local01, #60
266f0     04 14 86 F1 | 	sub	arg02, #4
266f4     0A 23 62 FC | 	wrlong	local03, arg02
266f8     04 14 86 F1 | 	sub	arg02, #4
266fc                 | '         stm->tm_isdst = 0;
266fc                 | ' 
266fc                 | ' ;
266fc                 | '         return stm;
266fc     0A FB 01 F6 | 	mov	result1, arg02
26700     19 22 62 FD | 	getqy	local03
26704     0A 23 62 FC | 	wrlong	local03, arg02
26708     20 14 06 F1 | 	add	arg02, #32
2670c     0A 01 68 FC | 	wrlong	#0, arg02
26710     A7 F0 03 F6 | 	mov	ptra, fp
26714     B2 00 A0 FD | 	call	#popregs_
26718                 | _fatfs_cc__gmtime_r_ret
26718     2D 00 64 FD | 	ret
2671c                 | 
2671c                 | _fatfs_cc__tzset
2671c     41 01 00 FF 
26720     4D 12 06 F6 | 	mov	arg01, ##@LR__4295
26724     34 00 B0 FD | 	call	#_fatfs_cc_getenv
26728     FD 12 02 F6 | 	mov	arg01, result1
2672c     02 00 00 FF 
26730     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
26734     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
26738     02 00 00 FF 
2673c     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
26740     2C 15 B0 FD | 	call	#_fatfs_cc___tzoffset
26744     02 00 00 FF 
26748     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2674c     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
26750     02 00 00 FF 
26754     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
26758                 | _fatfs_cc__tzset_ret
26758     2D 00 64 FD | 	ret
2675c                 | 
2675c                 | _fatfs_cc_getenv
2675c     06 4A 05 F6 | 	mov	COUNT_, #6
26760     A8 00 A0 FD | 	call	#pushregs_
26764     09 1F 02 F6 | 	mov	local01, arg01
26768     09 21 02 F6 | 	mov	local02, arg01
2676c     97 06 48 FB | 	callpa	#(@LR__3991-@LR__3990)>>2,fcache_load_ptr_
26770                 | LR__3990
26770     10 FB C9 FA | 	rdbyte	result1, local02 wz
26774     01 20 06 51 |  if_ne	add	local02, #1
26778     F4 FF 9F 5D |  if_ne	jmp	#LR__3990
2677c                 | LR__3991
2677c     09 21 82 F1 | 	sub	local02, arg01
26780     10 FB 01 F6 | 	mov	result1, local02
26784     02 00 00 FF 
26788     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2678c     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
26790     02 00 00 FF 
26794     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
26798                 | '             return 0;
26798     00 FA 05 A6 |  if_e	mov	result1, #0
2679c     5C 00 90 AD |  if_e	jmp	#LR__3994
267a0                 | ' 
267a0                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
267a0     02 00 00 FF 
267a4     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
267a8     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
267ac     02 00 00 FF 
267b0     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
267b4                 | LR__3992
267b4     11 25 0A FB | 	rdlong	local04, local03 wz
267b8     3C 00 90 AD |  if_e	jmp	#LR__3993
267bc     12 13 02 F6 | 	mov	arg01, local04
267c0     0F 15 02 F6 | 	mov	arg02, local01
267c4     10 17 02 F6 | 	mov	arg03, local02
267c8     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
267cc     00 FA 0D F2 | 	cmp	result1, #0 wz
267d0     10 27 02 A6 |  if_e	mov	local05, local02
267d4     12 27 02 A1 |  if_e	add	local05, local04
267d8     13 29 C2 AA |  if_e	rdbyte	local06, local05
267dc     3D 28 0E A2 |  if_e	cmp	local06, #61 wz
267e0                 | ' 			return name+len+1;
267e0     10 25 02 A1 |  if_e	add	local04, local02
267e4     01 24 06 A1 |  if_e	add	local04, #1
267e8     12 FB 01 A6 |  if_e	mov	result1, local04
267ec     0C 00 90 AD |  if_e	jmp	#LR__3994
267f0     04 22 06 F1 | 	add	local03, #4
267f4     BC FF 9F FD | 	jmp	#LR__3992
267f8                 | LR__3993
267f8                 | ' 	}
267f8                 | ' 	return 0;
267f8     00 FA 05 F6 | 	mov	result1, #0
267fc                 | LR__3994
267fc     A7 F0 03 F6 | 	mov	ptra, fp
26800     B2 00 A0 FD | 	call	#popregs_
26804                 | _fatfs_cc_getenv_ret
26804     2D 00 64 FD | 	ret
26808                 | 
26808                 | _fatfs_cc__get_fattime
26808     00 4A 05 F6 | 	mov	COUNT_, #0
2680c     A8 00 A0 FD | 	call	#pushregs_
26810     34 F0 07 F1 | 	add	ptra, #52
26814     00 12 06 F6 | 	mov	arg01, #0
26818     38 FB BF FD | 	call	#_fatfs_cc_time
2681c     04 4E 05 F1 | 	add	fp, #4
26820     A7 FA 61 FC | 	wrlong	result1, fp
26824     A7 12 02 F6 | 	mov	arg01, fp
26828     0C 4E 05 F1 | 	add	fp, #12
2682c     A7 14 02 F6 | 	mov	arg02, fp
26830     10 4E 85 F1 | 	sub	fp, #16
26834     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
26838     24 4E 05 F1 | 	add	fp, #36
2683c     A7 14 02 FB | 	rdlong	arg02, fp
26840     50 14 86 F1 | 	sub	arg02, #80
26844     09 14 66 F0 | 	shl	arg02, #9
26848     04 4E 85 F1 | 	sub	fp, #4
2684c     A7 FA 01 FB | 	rdlong	result1, fp
26850     01 FA 05 F1 | 	add	result1, #1
26854     05 FA 65 F0 | 	shl	result1, #5
26858     FD 14 42 F5 | 	or	arg02, result1
2685c     04 4E 85 F1 | 	sub	fp, #4
26860     A7 FA 01 FB | 	rdlong	result1, fp
26864     FD 14 42 F5 | 	or	arg02, result1
26868     14 4E 85 F1 | 	sub	fp, #20
2686c     A7 14 62 FC | 	wrlong	arg02, fp
26870     10 4E 05 F1 | 	add	fp, #16
26874     A7 14 02 FB | 	rdlong	arg02, fp
26878     0B 14 66 F0 | 	shl	arg02, #11
2687c     04 4E 85 F1 | 	sub	fp, #4
26880     A7 FA 01 FB | 	rdlong	result1, fp
26884     05 FA 65 F0 | 	shl	result1, #5
26888     FD 14 42 F5 | 	or	arg02, result1
2688c     04 4E 85 F1 | 	sub	fp, #4
26890     A7 FA 01 FB | 	rdlong	result1, fp
26894     FD 14 42 F5 | 	or	arg02, result1
26898     04 4E 85 F1 | 	sub	fp, #4
2689c     A7 14 62 FC | 	wrlong	arg02, fp
268a0                 | ' 
268a0                 | '     now = time(0);
268a0                 | '     _gmtime_r (&now, &date);
268a0                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
268a0                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
268a0                 | '     return (ffdate << 16) | fftime;
268a0     04 4E 85 F1 | 	sub	fp, #4
268a4     A7 FA 01 FB | 	rdlong	result1, fp
268a8     10 FA 65 F0 | 	shl	result1, #16
268ac     08 4E 85 F1 | 	sub	fp, #8
268b0     0A FB 41 F5 | 	or	result1, arg02
268b4     A7 F0 03 F6 | 	mov	ptra, fp
268b8     B2 00 A0 FD | 	call	#popregs_
268bc                 | _fatfs_cc__get_fattime_ret
268bc     2D 00 64 FD | 	ret
268c0                 | 
268c0                 | _fatfs_cc_unixtime_0843
268c0     00 4A 05 F6 | 	mov	COUNT_, #0
268c4     A8 00 A0 FD | 	call	#pushregs_
268c8     34 F0 07 F1 | 	add	ptra, #52
268cc     04 4E 05 F1 | 	add	fp, #4
268d0     A7 12 62 FC | 	wrlong	arg01, fp
268d4     04 4E 05 F1 | 	add	fp, #4
268d8     A7 14 62 FC | 	wrlong	arg02, fp
268dc     04 4E 85 F1 | 	sub	fp, #4
268e0     A7 14 02 FB | 	rdlong	arg02, fp
268e4     09 14 46 F0 | 	shr	arg02, #9
268e8     7F 14 06 F5 | 	and	arg02, #127
268ec     50 FA 05 F6 | 	mov	result1, #80
268f0     0A FB 01 F1 | 	add	result1, arg02
268f4     20 4E 05 F1 | 	add	fp, #32
268f8     A7 FA 61 FC | 	wrlong	result1, fp
268fc     20 4E 85 F1 | 	sub	fp, #32
26900     A7 FA 01 FB | 	rdlong	result1, fp
26904     05 FA 45 F0 | 	shr	result1, #5
26908     FD FA 41 F8 | 	getnib	result1, result1, #0
2690c     01 FA 85 F1 | 	sub	result1, #1
26910     1C 4E 05 F1 | 	add	fp, #28
26914     A7 FA 61 FC | 	wrlong	result1, fp
26918     1C 4E 85 F1 | 	sub	fp, #28
2691c     A7 FA 01 FB | 	rdlong	result1, fp
26920     1F FA 05 F5 | 	and	result1, #31
26924     18 4E 05 F1 | 	add	fp, #24
26928     A7 FA 61 FC | 	wrlong	result1, fp
2692c     14 4E 85 F1 | 	sub	fp, #20
26930     A7 FA 01 FB | 	rdlong	result1, fp
26934     0B FA 45 F0 | 	shr	result1, #11
26938     1F FA 05 F5 | 	and	result1, #31
2693c     10 4E 05 F1 | 	add	fp, #16
26940     A7 FA 61 FC | 	wrlong	result1, fp
26944     10 4E 85 F1 | 	sub	fp, #16
26948     A7 FA 01 FB | 	rdlong	result1, fp
2694c     05 FA 45 F0 | 	shr	result1, #5
26950     3F FA 05 F5 | 	and	result1, #63
26954     0C 4E 05 F1 | 	add	fp, #12
26958     A7 FA 61 FC | 	wrlong	result1, fp
2695c     0C 4E 85 F1 | 	sub	fp, #12
26960     A7 14 02 FB | 	rdlong	arg02, fp
26964     1F 14 06 F5 | 	and	arg02, #31
26968     01 14 66 F0 | 	shl	arg02, #1
2696c     08 4E 05 F1 | 	add	fp, #8
26970     A7 14 62 FC | 	wrlong	arg02, fp
26974     A7 12 02 F6 | 	mov	arg01, fp
26978     10 4E 85 F1 | 	sub	fp, #16
2697c     4C FA BF FD | 	call	#_fatfs_cc_mktime
26980     0C 4E 05 F1 | 	add	fp, #12
26984     A7 FA 61 FC | 	wrlong	result1, fp
26988                 | ' 
26988                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
26988                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
26988                 | '     date.tm_mday = (dosdate & 0x1f);
26988                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
26988                 | '     date.tm_min = (dostime >> 5) & 0x3f;
26988                 | '     date.tm_sec = (dostime & 0x1f) << 1;
26988                 | ' 
26988                 | '     t = mktime(&date);
26988                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
26988                 | '     return t;
26988     0C 4E 85 F1 | 	sub	fp, #12
2698c     A7 F0 03 F6 | 	mov	ptra, fp
26990     B2 00 A0 FD | 	call	#popregs_
26994                 | _fatfs_cc_unixtime_0843_ret
26994     2D 00 64 FD | 	ret
26998                 | 
26998                 | _fatfs_cc__set_dos_error_0845
26998     09 01 02 F6 | 	mov	_var01, arg01
2699c                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2699c                 | '     switch (derr) {
2699c     14 00 26 F3 | 	fle	_var01, #20
269a0     30 00 62 FD | 	jmprel	_var01
269a4                 | LR__4000
269a4     50 00 90 FD | 	jmp	#LR__4001
269a8     84 00 90 FD | 	jmp	#LR__4015
269ac     80 00 90 FD | 	jmp	#LR__4016
269b0     7C 00 90 FD | 	jmp	#LR__4017
269b4     48 00 90 FD | 	jmp	#LR__4002
269b8     44 00 90 FD | 	jmp	#LR__4003
269bc     40 00 90 FD | 	jmp	#LR__4004
269c0     44 00 90 FD | 	jmp	#LR__4005
269c4     48 00 90 FD | 	jmp	#LR__4007
269c8     54 00 90 FD | 	jmp	#LR__4010
269cc     38 00 90 FD | 	jmp	#LR__4006
269d0     4C 00 90 FD | 	jmp	#LR__4011
269d4     48 00 90 FD | 	jmp	#LR__4012
269d8     44 00 90 FD | 	jmp	#LR__4013
269dc     50 00 90 FD | 	jmp	#LR__4018
269e0     4C 00 90 FD | 	jmp	#LR__4018
269e4     48 00 90 FD | 	jmp	#LR__4018
269e8     2C 00 90 FD | 	jmp	#LR__4008
269ec     38 00 90 FD | 	jmp	#LR__4014
269f0     2C 00 90 FD | 	jmp	#LR__4009
269f4     38 00 90 FD | 	jmp	#LR__4018
269f8                 | LR__4001
269f8     00 02 06 F6 | 	mov	_var02, #0
269fc                 | '         r = 0;
269fc                 | '         break;
269fc     34 00 90 FD | 	jmp	#LR__4019
26a00                 | LR__4002
26a00                 | LR__4003
26a00                 | LR__4004
26a00     04 02 06 F6 | 	mov	_var02, #4
26a04                 | '         r =  4 ;
26a04                 | '         break;
26a04     2C 00 90 FD | 	jmp	#LR__4019
26a08                 | LR__4005
26a08                 | LR__4006
26a08     06 02 06 F6 | 	mov	_var02, #6
26a0c                 | '         r =  6 ;
26a0c                 | '         break;
26a0c     24 00 90 FD | 	jmp	#LR__4019
26a10                 | LR__4007
26a10     09 02 06 F6 | 	mov	_var02, #9
26a14                 | '         r =  9 ;
26a14                 | '         break;
26a14     1C 00 90 FD | 	jmp	#LR__4019
26a18                 | LR__4008
26a18     07 02 06 F6 | 	mov	_var02, #7
26a1c                 | '         r =  7 ;
26a1c                 | '         break;
26a1c     14 00 90 FD | 	jmp	#LR__4019
26a20                 | LR__4009
26a20                 | LR__4010
26a20                 | LR__4011
26a20                 | LR__4012
26a20                 | LR__4013
26a20     0A 02 06 F6 | 	mov	_var02, #10
26a24                 | '         r =  10 ;
26a24                 | '         break;
26a24     0C 00 90 FD | 	jmp	#LR__4019
26a28                 | LR__4014
26a28     0B 02 06 F6 | 	mov	_var02, #11
26a2c                 | '         r =  11 ;
26a2c                 | '         break;
26a2c     04 00 90 FD | 	jmp	#LR__4019
26a30                 | LR__4015
26a30                 | LR__4016
26a30                 | LR__4017
26a30                 | LR__4018
26a30     0C 02 06 F6 | 	mov	_var02, #12
26a34                 | '         r =  12 ;
26a34                 | '         break;
26a34                 | LR__4019
26a34                 | '     }
26a34                 | '     return _seterror(r);
26a34     00 02 4E F2 | 	cmps	_var02, #0 wz
26a38     20 E8 05 F1 | 	add	ptr___system__dat__, #32
26a3c     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
26a40     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
26a44     01 FA 65 56 |  if_ne	neg	result1, #1
26a48     00 FA 05 A6 |  if_e	mov	result1, #0
26a4c                 | _fatfs_cc__set_dos_error_0845_ret
26a4c     2D 00 64 FD | 	ret
26a50                 | 
26a50                 | _fatfs_cc_v_creat
26a50     04 4A 05 F6 | 	mov	COUNT_, #4
26a54     A8 00 A0 FD | 	call	#pushregs_
26a58     09 1F 02 F6 | 	mov	local01, arg01
26a5c     0A 21 02 F6 | 	mov	local02, arg02
26a60     03 00 00 FF 
26a64     3C 12 06 F6 | 	mov	arg01, ##1596
26a68                 | '     return _gc_alloc(size);
26a68     10 14 06 F6 | 	mov	arg02, #16
26a6c     2C 60 BF FD | 	call	#__system___gc_doalloc
26a70     FD 22 0A F6 | 	mov	local03, result1 wz
26a74                 | '       return _seterror( 7 );
26a74     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
26a78     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
26a7c     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
26a80     01 FA 65 A6 |  if_e	neg	result1, #1
26a84     58 00 90 AD |  if_e	jmp	#LR__4021
26a88     11 13 02 F6 | 	mov	arg01, local03
26a8c     00 14 06 F6 | 	mov	arg02, #0
26a90     03 00 00 FF 
26a94     3C 16 06 F6 | 	mov	arg03, ##1596
26a98     98 00 A0 FD | 	call	#\builtin_bytefill_
26a9c     02 00 00 FF 
26aa0     14 22 06 F1 | 	add	local03, ##1044
26aa4     11 13 02 F6 | 	mov	arg01, local03
26aa8     02 00 00 FF 
26aac     14 22 86 F1 | 	sub	local03, ##1044
26ab0     10 15 02 F6 | 	mov	arg02, local02
26ab4     07 16 06 F6 | 	mov	arg03, #7
26ab8     B4 CC BF FD | 	call	#_fatfs_cc_f_open
26abc     FD 24 0A F6 | 	mov	local04, result1 wz
26ac0     14 00 90 AD |  if_e	jmp	#LR__4020
26ac4     11 13 02 F6 | 	mov	arg01, local03
26ac8                 | '     return _gc_free(ptr);
26ac8     DC 60 BF FD | 	call	#__system___gc_free
26acc                 | '     free(f);
26acc                 | '     return _set_dos_error(r);
26acc     12 13 02 F6 | 	mov	arg01, local04
26ad0     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0845
26ad4     08 00 90 FD | 	jmp	#LR__4021
26ad8                 | LR__4020
26ad8     0F 23 62 FC | 	wrlong	local03, local01
26adc                 | '   }
26adc                 | '   fil->vfsdata = f;
26adc                 | '   return 0;
26adc     00 FA 05 F6 | 	mov	result1, #0
26ae0                 | LR__4021
26ae0     A7 F0 03 F6 | 	mov	ptra, fp
26ae4     B2 00 A0 FD | 	call	#popregs_
26ae8                 | _fatfs_cc_v_creat_ret
26ae8     2D 00 64 FD | 	ret
26aec                 | 
26aec                 | _fatfs_cc_v_close
26aec     02 4A 05 F6 | 	mov	COUNT_, #2
26af0     A8 00 A0 FD | 	call	#pushregs_
26af4     09 1F 02 FB | 	rdlong	local01, arg01
26af8     02 00 00 FF 
26afc     14 1E 06 F1 | 	add	local01, ##1044
26b00     0F 13 02 F6 | 	mov	arg01, local01
26b04     02 00 00 FF 
26b08     14 1E 86 F1 | 	sub	local01, ##1044
26b0c     DC E3 BF FD | 	call	#_fatfs_cc_f_close
26b10     FD 20 02 F6 | 	mov	local02, result1
26b14     0F 13 02 F6 | 	mov	arg01, local01
26b18                 | '     return _gc_free(ptr);
26b18     8C 60 BF FD | 	call	#__system___gc_free
26b1c                 | '     FAT_FIL *f = fil->vfsdata;
26b1c                 | '     r=f_close(&f->fil);
26b1c                 | '     free(f);
26b1c                 | '     return _set_dos_error(r);
26b1c     10 13 02 F6 | 	mov	arg01, local02
26b20     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0845
26b24     A7 F0 03 F6 | 	mov	ptra, fp
26b28     B2 00 A0 FD | 	call	#popregs_
26b2c                 | _fatfs_cc_v_close_ret
26b2c     2D 00 64 FD | 	ret
26b30                 | 
26b30                 | _fatfs_cc_v_opendir
26b30     04 4A 05 F6 | 	mov	COUNT_, #4
26b34     A8 00 A0 FD | 	call	#pushregs_
26b38     09 1F 02 F6 | 	mov	local01, arg01
26b3c     0A 21 02 F6 | 	mov	local02, arg02
26b40     30 12 06 F6 | 	mov	arg01, #48
26b44                 | '     return _gc_alloc(size);
26b44     10 14 06 F6 | 	mov	arg02, #16
26b48     50 5F BF FD | 	call	#__system___gc_doalloc
26b4c     FD 22 0A F6 | 	mov	local03, result1 wz
26b50                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
26b50                 | '       return _seterror( 7 );
26b50     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
26b54     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
26b58     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
26b5c     01 FA 65 A6 |  if_e	neg	result1, #1
26b60     34 00 90 AD |  if_e	jmp	#LR__4031
26b64     10 15 02 F6 | 	mov	arg02, local02
26b68     11 13 02 F6 | 	mov	arg01, local03
26b6c     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
26b70     FD 24 0A F6 | 	mov	local04, result1 wz
26b74     14 00 90 AD |  if_e	jmp	#LR__4030
26b78     11 13 02 F6 | 	mov	arg01, local03
26b7c                 | '     return _gc_free(ptr);
26b7c     28 60 BF FD | 	call	#__system___gc_free
26b80                 | '         free(f);
26b80                 | '         return _set_dos_error(r);
26b80     12 13 02 F6 | 	mov	arg01, local04
26b84     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0845
26b88     0C 00 90 FD | 	jmp	#LR__4031
26b8c                 | LR__4030
26b8c     04 1E 06 F1 | 	add	local01, #4
26b90     0F 23 62 FC | 	wrlong	local03, local01
26b94                 | '     }
26b94                 | '     dir->vfsdata = f;
26b94                 | '     return 0;
26b94     00 FA 05 F6 | 	mov	result1, #0
26b98                 | LR__4031
26b98     A7 F0 03 F6 | 	mov	ptra, fp
26b9c     B2 00 A0 FD | 	call	#popregs_
26ba0                 | _fatfs_cc_v_opendir_ret
26ba0     2D 00 64 FD | 	ret
26ba4                 | 
26ba4                 | _fatfs_cc_v_closedir
26ba4     02 4A 05 F6 | 	mov	COUNT_, #2
26ba8     A8 00 A0 FD | 	call	#pushregs_
26bac     04 12 06 F1 | 	add	arg01, #4
26bb0     09 1F 02 FB | 	rdlong	local01, arg01
26bb4     0F 13 02 F6 | 	mov	arg01, local01
26bb8     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
26bbc     FD 20 02 F6 | 	mov	local02, result1
26bc0     0F 13 02 F6 | 	mov	arg01, local01
26bc4                 | '     return _gc_free(ptr);
26bc4     E0 5F BF FD | 	call	#__system___gc_free
26bc8     00 20 0E F2 | 	cmp	local02, #0 wz
26bcc     10 13 02 56 |  if_ne	mov	arg01, local02
26bd0     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0845
26bd4                 | '     return r;
26bd4     10 FB 01 F6 | 	mov	result1, local02
26bd8     A7 F0 03 F6 | 	mov	ptra, fp
26bdc     B2 00 A0 FD | 	call	#popregs_
26be0                 | _fatfs_cc_v_closedir_ret
26be0     2D 00 64 FD | 	ret
26be4                 | 
26be4                 | _fatfs_cc_v_readdir
26be4     01 4A 05 F6 | 	mov	COUNT_, #1
26be8     A8 00 A0 FD | 	call	#pushregs_
26bec     2C F1 07 F1 | 	add	ptra, #300
26bf0     04 4E 05 F1 | 	add	fp, #4
26bf4     A7 12 62 FC | 	wrlong	arg01, fp
26bf8     04 4E 05 F1 | 	add	fp, #4
26bfc     A7 14 62 FC | 	wrlong	arg02, fp
26c00     04 4E 85 F1 | 	sub	fp, #4
26c04     A7 16 02 FB | 	rdlong	arg03, fp
26c08     04 16 06 F1 | 	add	arg03, #4
26c0c     0B 13 02 FB | 	rdlong	arg01, arg03
26c10     08 4E 05 F1 | 	add	fp, #8
26c14     A7 14 02 F6 | 	mov	arg02, fp
26c18     0C 4E 85 F1 | 	sub	fp, #12
26c1c     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
26c20     28 4F 05 F1 | 	add	fp, #296
26c24     A7 FA 61 FC | 	wrlong	result1, fp
26c28     28 4F 85 F1 | 	sub	fp, #296
26c2c     00 FA 0D F2 | 	cmp	result1, #0 wz
26c30     14 00 90 AD |  if_e	jmp	#LR__4040
26c34                 | '         return _set_dos_error(r);
26c34     28 4F 05 F1 | 	add	fp, #296
26c38     A7 12 02 FB | 	rdlong	arg01, fp
26c3c     28 4F 85 F1 | 	sub	fp, #296
26c40     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0845
26c44     C4 00 90 FD | 	jmp	#LR__4043
26c48                 | LR__4040
26c48     28 4E 05 F1 | 	add	fp, #40
26c4c     A7 16 CA FA | 	rdbyte	arg03, fp wz
26c50     28 4E 85 F1 | 	sub	fp, #40
26c54                 | '         return -1;
26c54     01 FA 65 A6 |  if_e	neg	result1, #1
26c58     B0 00 90 AD |  if_e	jmp	#LR__4043
26c5c     08 4E 05 F1 | 	add	fp, #8
26c60     A7 12 02 FB | 	rdlong	arg01, fp
26c64     20 4E 05 F1 | 	add	fp, #32
26c68     A7 14 02 F6 | 	mov	arg02, fp
26c6c     28 4E 85 F1 | 	sub	fp, #40
26c70     3F 16 06 F6 | 	mov	arg03, #63
26c74     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
26c78     08 4E 05 F1 | 	add	fp, #8
26c7c     A7 16 02 FB | 	rdlong	arg03, fp
26c80     3F 16 06 F1 | 	add	arg03, #63
26c84     0B 01 48 FC | 	wrbyte	#0, arg03
26c88     0C 4E 05 F1 | 	add	fp, #12
26c8c     A7 16 C2 FA | 	rdbyte	arg03, fp
26c90     14 4E 85 F1 | 	sub	fp, #20
26c94     10 16 CE F7 | 	test	arg03, #16 wz
26c98     18 00 90 AD |  if_e	jmp	#LR__4041
26c9c     08 4E 05 F1 | 	add	fp, #8
26ca0     A7 16 02 FB | 	rdlong	arg03, fp
26ca4     08 4E 85 F1 | 	sub	fp, #8
26ca8     50 16 06 F1 | 	add	arg03, #80
26cac     0B 03 48 FC | 	wrbyte	#1, arg03
26cb0     14 00 90 FD | 	jmp	#LR__4042
26cb4                 | LR__4041
26cb4     08 4E 05 F1 | 	add	fp, #8
26cb8     A7 16 02 FB | 	rdlong	arg03, fp
26cbc     08 4E 85 F1 | 	sub	fp, #8
26cc0     50 16 06 F1 | 	add	arg03, #80
26cc4     0B 01 48 FC | 	wrbyte	#0, arg03
26cc8                 | LR__4042
26cc8     08 4E 05 F1 | 	add	fp, #8
26ccc     A7 16 02 FB | 	rdlong	arg03, fp
26cd0     04 4E 05 F1 | 	add	fp, #4
26cd4     A7 14 02 FB | 	rdlong	arg02, fp
26cd8     48 16 06 F1 | 	add	arg03, #72
26cdc     0B 15 62 FC | 	wrlong	arg02, arg03
26ce0     04 4E 85 F1 | 	sub	fp, #4
26ce4     A7 1E 02 FB | 	rdlong	local01, fp
26ce8     08 4E 05 F1 | 	add	fp, #8
26cec     A7 12 E2 FA | 	rdword	arg01, fp
26cf0     02 4E 05 F1 | 	add	fp, #2
26cf4     A7 14 E2 FA | 	rdword	arg02, fp
26cf8     12 4E 85 F1 | 	sub	fp, #18
26cfc     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0843
26d00     4C 1E 06 F1 | 	add	local01, #76
26d04     0F FB 61 FC | 	wrlong	result1, local01
26d08                 | '         ent->d_type =  (0) ;
26d08                 | '     }
26d08                 | '     ent->d_size = finfo.fsize;
26d08                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
26d08                 | '     return 0;
26d08     00 FA 05 F6 | 	mov	result1, #0
26d0c                 | LR__4043
26d0c     A7 F0 03 F6 | 	mov	ptra, fp
26d10     B2 00 A0 FD | 	call	#popregs_
26d14                 | _fatfs_cc_v_readdir_ret
26d14     2D 00 64 FD | 	ret
26d18                 | 
26d18                 | _fatfs_cc_v_stat
26d18     03 4A 05 F6 | 	mov	COUNT_, #3
26d1c     A8 00 A0 FD | 	call	#pushregs_
26d20     30 F1 07 F1 | 	add	ptra, #304
26d24     04 4E 05 F1 | 	add	fp, #4
26d28     A7 12 62 FC | 	wrlong	arg01, fp
26d2c     04 4E 05 F1 | 	add	fp, #4
26d30     A7 14 62 FC | 	wrlong	arg02, fp
26d34     08 4E 85 F1 | 	sub	fp, #8
26d38     0A 13 02 F6 | 	mov	arg01, arg02
26d3c     00 14 06 F6 | 	mov	arg02, #0
26d40     30 16 06 F6 | 	mov	arg03, #48
26d44     98 00 A0 FD | 	call	#\builtin_bytefill_
26d48     04 4E 05 F1 | 	add	fp, #4
26d4c     A7 FA 01 FB | 	rdlong	result1, fp
26d50     04 4E 85 F1 | 	sub	fp, #4
26d54     FD FA C9 FA | 	rdbyte	result1, result1 wz
26d58     2C 00 90 AD |  if_e	jmp	#LR__4050
26d5c     04 4E 05 F1 | 	add	fp, #4
26d60     A7 FA 01 FB | 	rdlong	result1, fp
26d64     04 4E 85 F1 | 	sub	fp, #4
26d68     FD FA C1 FA | 	rdbyte	result1, result1
26d6c     2E FA 0D F2 | 	cmp	result1, #46 wz
26d70     04 4E 05 A1 |  if_e	add	fp, #4
26d74     A7 1E 02 AB |  if_e	rdlong	local01, fp
26d78     04 4E 85 A1 |  if_e	sub	fp, #4
26d7c     01 1E 06 A1 |  if_e	add	local01, #1
26d80     0F 21 CA AA |  if_e	rdbyte	local02, local01 wz
26d84     18 00 90 5D |  if_ne	jmp	#LR__4051
26d88                 | LR__4050
26d88     18 4E 05 F1 | 	add	fp, #24
26d8c     A7 20 48 FC | 	wrbyte	#16, fp
26d90     0C 4E 85 F1 | 	sub	fp, #12
26d94     A7 00 68 FC | 	wrlong	#0, fp
26d98     0C 4E 85 F1 | 	sub	fp, #12
26d9c     24 00 90 FD | 	jmp	#LR__4052
26da0                 | LR__4051
26da0     04 4E 05 F1 | 	add	fp, #4
26da4     A7 12 02 FB | 	rdlong	arg01, fp
26da8     0C 4E 05 F1 | 	add	fp, #12
26dac     A7 14 02 F6 | 	mov	arg02, fp
26db0     10 4E 85 F1 | 	sub	fp, #16
26db4     AC EB BF FD | 	call	#_fatfs_cc_f_stat
26db8     0C 4E 05 F1 | 	add	fp, #12
26dbc     A7 FA 61 FC | 	wrlong	result1, fp
26dc0     0C 4E 85 F1 | 	sub	fp, #12
26dc4                 | LR__4052
26dc4     0C 4E 05 F1 | 	add	fp, #12
26dc8     A7 20 0A FB | 	rdlong	local02, fp wz
26dcc     0C 4E 85 F1 | 	sub	fp, #12
26dd0     14 00 90 AD |  if_e	jmp	#LR__4053
26dd4                 | '         return _set_dos_error(r);
26dd4     0C 4E 05 F1 | 	add	fp, #12
26dd8     A7 12 02 FB | 	rdlong	arg01, fp
26ddc     0C 4E 85 F1 | 	sub	fp, #12
26de0     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0845
26de4     14 01 90 FD | 	jmp	#LR__4054
26de8                 | LR__4053
26de8     2C 4F 05 F1 | 	add	fp, #300
26dec     A7 48 6A FC | 	wrlong	#292, fp
26df0     14 4F 85 F1 | 	sub	fp, #276
26df4     A7 22 C2 FA | 	rdbyte	local03, fp
26df8     18 4E 85 F1 | 	sub	fp, #24
26dfc     01 22 CE F7 | 	test	local03, #1 wz
26e00     2C 4F 05 A1 |  if_e	add	fp, #300
26e04     A7 22 02 AB |  if_e	rdlong	local03, fp
26e08     92 22 46 A5 |  if_e	or	local03, #146
26e0c     A7 22 62 AC |  if_e	wrlong	local03, fp
26e10     2C 4F 85 A1 |  if_e	sub	fp, #300
26e14     18 4E 05 F1 | 	add	fp, #24
26e18     A7 22 C2 FA | 	rdbyte	local03, fp
26e1c     18 4E 85 F1 | 	sub	fp, #24
26e20     10 22 CE F7 | 	test	local03, #16 wz
26e24     2C 4F 05 51 |  if_ne	add	fp, #300
26e28     A7 22 02 5B |  if_ne	rdlong	local03, fp
26e2c     08 00 00 5F 
26e30     49 22 46 55 |  if_ne	or	local03, ##4169
26e34     A7 22 62 5C |  if_ne	wrlong	local03, fp
26e38     2C 4F 85 51 |  if_ne	sub	fp, #300
26e3c     08 4E 05 F1 | 	add	fp, #8
26e40     A7 22 02 FB | 	rdlong	local03, fp
26e44     24 4F 05 F1 | 	add	fp, #292
26e48     A7 20 02 FB | 	rdlong	local02, fp
26e4c     08 22 06 F1 | 	add	local03, #8
26e50     11 21 62 FC | 	wrlong	local02, local03
26e54     24 4F 85 F1 | 	sub	fp, #292
26e58     A7 22 02 FB | 	rdlong	local03, fp
26e5c     0C 22 06 F1 | 	add	local03, #12
26e60     11 03 68 FC | 	wrlong	#1, local03
26e64     A7 22 02 FB | 	rdlong	local03, fp
26e68     08 4E 05 F1 | 	add	fp, #8
26e6c     A7 20 02 FB | 	rdlong	local02, fp
26e70     18 22 06 F1 | 	add	local03, #24
26e74     11 21 62 FC | 	wrlong	local02, local03
26e78     08 4E 85 F1 | 	sub	fp, #8
26e7c     A7 22 02 FB | 	rdlong	local03, fp
26e80     1C 22 06 F1 | 	add	local03, #28
26e84     01 00 80 FF 
26e88     11 01 68 FC | 	wrlong	##512, local03
26e8c     A7 20 02 FB | 	rdlong	local02, fp
26e90     10 23 02 F6 | 	mov	local03, local02
26e94     18 20 06 F1 | 	add	local02, #24
26e98     10 21 02 FB | 	rdlong	local02, local02
26e9c     FF 21 06 F1 | 	add	local02, #511
26ea0     10 21 52 F6 | 	abs	local02, local02 wc
26ea4     09 20 46 F0 | 	shr	local02, #9
26ea8     10 21 82 F6 | 	negc	local02, local02
26eac     20 22 06 F1 | 	add	local03, #32
26eb0     11 21 62 FC | 	wrlong	local02, local03
26eb4     A7 20 02 FB | 	rdlong	local02, fp
26eb8     10 23 02 F6 | 	mov	local03, local02
26ebc     10 1F 02 F6 | 	mov	local01, local02
26ec0     0C 4E 05 F1 | 	add	fp, #12
26ec4     A7 12 E2 FA | 	rdword	arg01, fp
26ec8     02 4E 05 F1 | 	add	fp, #2
26ecc     A7 14 E2 FA | 	rdword	arg02, fp
26ed0     16 4E 85 F1 | 	sub	fp, #22
26ed4     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0843
26ed8     2C 1E 06 F1 | 	add	local01, #44
26edc     0F FB 61 FC | 	wrlong	result1, local01
26ee0     28 20 06 F1 | 	add	local02, #40
26ee4     10 FB 61 FC | 	wrlong	result1, local02
26ee8     24 22 06 F1 | 	add	local03, #36
26eec     11 FB 61 FC | 	wrlong	result1, local03
26ef0                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
26ef0                 | '     }
26ef0                 | '     buf->st_mode = mode;
26ef0                 | '     buf->st_nlink = 1;
26ef0                 | '     buf->st_size = finfo.fsize;
26ef0                 | '     buf->st_blksize = 512;
26ef0                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
26ef0                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
26ef0                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
26ef0                 | '     return r;
26ef0     0C 4E 05 F1 | 	add	fp, #12
26ef4     A7 FA 01 FB | 	rdlong	result1, fp
26ef8     0C 4E 85 F1 | 	sub	fp, #12
26efc                 | LR__4054
26efc     A7 F0 03 F6 | 	mov	ptra, fp
26f00     B2 00 A0 FD | 	call	#popregs_
26f04                 | _fatfs_cc_v_stat_ret
26f04     2D 00 64 FD | 	ret
26f08                 | 
26f08                 | _fatfs_cc_v_read
26f08     00 4A 05 F6 | 	mov	COUNT_, #0
26f0c     A8 00 A0 FD | 	call	#pushregs_
26f10     1C F0 07 F1 | 	add	ptra, #28
26f14     04 4E 05 F1 | 	add	fp, #4
26f18     A7 12 62 FC | 	wrlong	arg01, fp
26f1c     04 4E 05 F1 | 	add	fp, #4
26f20     A7 14 62 FC | 	wrlong	arg02, fp
26f24     04 4E 05 F1 | 	add	fp, #4
26f28     A7 16 62 FC | 	wrlong	arg03, fp
26f2c     08 4E 85 F1 | 	sub	fp, #8
26f30     A7 12 02 FB | 	rdlong	arg01, fp
26f34     09 13 0A FB | 	rdlong	arg01, arg01 wz
26f38     0C 4E 05 F1 | 	add	fp, #12
26f3c     A7 12 62 FC | 	wrlong	arg01, fp
26f40     10 4E 85 F1 | 	sub	fp, #16
26f44                 | '         return _seterror( 5 );
26f44     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
26f48     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
26f4c     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
26f50     01 FA 65 A6 |  if_e	neg	result1, #1
26f54     B8 00 90 AD |  if_e	jmp	#LR__4062
26f58     10 4E 05 F1 | 	add	fp, #16
26f5c     A7 12 02 FB | 	rdlong	arg01, fp
26f60     02 00 00 FF 
26f64     14 12 06 F1 | 	add	arg01, ##1044
26f68     08 4E 85 F1 | 	sub	fp, #8
26f6c     A7 14 02 FB | 	rdlong	arg02, fp
26f70     04 4E 05 F1 | 	add	fp, #4
26f74     A7 16 02 FB | 	rdlong	arg03, fp
26f78     0C 4E 05 F1 | 	add	fp, #12
26f7c     A7 18 02 F6 | 	mov	arg04, fp
26f80     18 4E 85 F1 | 	sub	fp, #24
26f84     C4 CE BF FD | 	call	#_fatfs_cc_f_read
26f88     14 4E 05 F1 | 	add	fp, #20
26f8c     A7 FA 61 FC | 	wrlong	result1, fp
26f90     14 4E 85 F1 | 	sub	fp, #20
26f94     00 FA 0D F2 | 	cmp	result1, #0 wz
26f98     34 00 90 AD |  if_e	jmp	#LR__4060
26f9c     04 4E 05 F1 | 	add	fp, #4
26fa0     A7 18 02 FB | 	rdlong	arg04, fp
26fa4     0C 17 02 F6 | 	mov	arg03, arg04
26fa8     08 18 06 F1 | 	add	arg04, #8
26fac     0C 19 02 FB | 	rdlong	arg04, arg04
26fb0     20 18 46 F5 | 	or	arg04, #32
26fb4     08 16 06 F1 | 	add	arg03, #8
26fb8     0B 19 62 FC | 	wrlong	arg04, arg03
26fbc                 | '         fil->state |=  (0x20) ;
26fbc                 | '         return _set_dos_error(r);
26fbc     10 4E 05 F1 | 	add	fp, #16
26fc0     A7 12 02 FB | 	rdlong	arg01, fp
26fc4     14 4E 85 F1 | 	sub	fp, #20
26fc8     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0845
26fcc     40 00 90 FD | 	jmp	#LR__4062
26fd0                 | LR__4060
26fd0     18 4E 05 F1 | 	add	fp, #24
26fd4     A7 FA 09 FB | 	rdlong	result1, fp wz
26fd8     18 4E 85 F1 | 	sub	fp, #24
26fdc     24 00 90 5D |  if_ne	jmp	#LR__4061
26fe0     04 4E 05 F1 | 	add	fp, #4
26fe4     A7 FA 01 FB | 	rdlong	result1, fp
26fe8     FD 18 02 F6 | 	mov	arg04, result1
26fec     04 4E 85 F1 | 	sub	fp, #4
26ff0     08 FA 05 F1 | 	add	result1, #8
26ff4     FD FA 01 FB | 	rdlong	result1, result1
26ff8     10 FA 45 F5 | 	or	result1, #16
26ffc     08 18 06 F1 | 	add	arg04, #8
27000     0C FB 61 FC | 	wrlong	result1, arg04
27004                 | LR__4061
27004                 | '         fil->state |=  (0x10) ;
27004                 | '     }
27004                 | '     return x;
27004     18 4E 05 F1 | 	add	fp, #24
27008     A7 FA 01 FB | 	rdlong	result1, fp
2700c     18 4E 85 F1 | 	sub	fp, #24
27010                 | LR__4062
27010     A7 F0 03 F6 | 	mov	ptra, fp
27014     B2 00 A0 FD | 	call	#popregs_
27018                 | _fatfs_cc_v_read_ret
27018     2D 00 64 FD | 	ret
2701c                 | 
2701c                 | _fatfs_cc_v_write
2701c     00 4A 05 F6 | 	mov	COUNT_, #0
27020     A8 00 A0 FD | 	call	#pushregs_
27024     1C F0 07 F1 | 	add	ptra, #28
27028     04 4E 05 F1 | 	add	fp, #4
2702c     A7 12 62 FC | 	wrlong	arg01, fp
27030     04 4E 05 F1 | 	add	fp, #4
27034     A7 14 62 FC | 	wrlong	arg02, fp
27038     04 4E 05 F1 | 	add	fp, #4
2703c     A7 16 62 FC | 	wrlong	arg03, fp
27040     08 4E 85 F1 | 	sub	fp, #8
27044     A7 12 02 FB | 	rdlong	arg01, fp
27048     09 13 0A FB | 	rdlong	arg01, arg01 wz
2704c     0C 4E 05 F1 | 	add	fp, #12
27050     A7 12 62 FC | 	wrlong	arg01, fp
27054     10 4E 85 F1 | 	sub	fp, #16
27058                 | '         return _seterror( 5 );
27058     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
2705c     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
27060     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
27064     01 FA 65 A6 |  if_e	neg	result1, #1
27068     84 00 90 AD |  if_e	jmp	#LR__4071
2706c     10 4E 05 F1 | 	add	fp, #16
27070     A7 12 02 FB | 	rdlong	arg01, fp
27074     02 00 00 FF 
27078     14 12 06 F1 | 	add	arg01, ##1044
2707c     08 4E 85 F1 | 	sub	fp, #8
27080     A7 14 02 FB | 	rdlong	arg02, fp
27084     04 4E 05 F1 | 	add	fp, #4
27088     A7 16 02 FB | 	rdlong	arg03, fp
2708c     0C 4E 05 F1 | 	add	fp, #12
27090     A7 18 02 F6 | 	mov	arg04, fp
27094     18 4E 85 F1 | 	sub	fp, #24
27098     4C D4 BF FD | 	call	#_fatfs_cc_f_write
2709c     14 4E 05 F1 | 	add	fp, #20
270a0     A7 FA 61 FC | 	wrlong	result1, fp
270a4     14 4E 85 F1 | 	sub	fp, #20
270a8     00 FA 0D F2 | 	cmp	result1, #0 wz
270ac     34 00 90 AD |  if_e	jmp	#LR__4070
270b0     04 4E 05 F1 | 	add	fp, #4
270b4     A7 18 02 FB | 	rdlong	arg04, fp
270b8     0C 17 02 F6 | 	mov	arg03, arg04
270bc     08 18 06 F1 | 	add	arg04, #8
270c0     0C 19 02 FB | 	rdlong	arg04, arg04
270c4     20 18 46 F5 | 	or	arg04, #32
270c8     08 16 06 F1 | 	add	arg03, #8
270cc     0B 19 62 FC | 	wrlong	arg04, arg03
270d0                 | '         fil->state |=  (0x20) ;
270d0                 | '         return _set_dos_error(r);
270d0     10 4E 05 F1 | 	add	fp, #16
270d4     A7 12 02 FB | 	rdlong	arg01, fp
270d8     14 4E 85 F1 | 	sub	fp, #20
270dc     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0845
270e0     0C 00 90 FD | 	jmp	#LR__4071
270e4                 | LR__4070
270e4                 | '     }
270e4                 | '     return x;
270e4     18 4E 05 F1 | 	add	fp, #24
270e8     A7 FA 01 FB | 	rdlong	result1, fp
270ec     18 4E 85 F1 | 	sub	fp, #24
270f0                 | LR__4071
270f0     A7 F0 03 F6 | 	mov	ptra, fp
270f4     B2 00 A0 FD | 	call	#popregs_
270f8                 | _fatfs_cc_v_write_ret
270f8     2D 00 64 FD | 	ret
270fc                 | 
270fc                 | _fatfs_cc_v_lseek
270fc     04 4A 05 F6 | 	mov	COUNT_, #4
27100     A8 00 A0 FD | 	call	#pushregs_
27104     0A 1F 02 F6 | 	mov	local01, arg02
27108     0B 21 02 F6 | 	mov	local02, arg03
2710c     09 23 02 FB | 	rdlong	local03, arg01
27110     02 00 00 FF 
27114     14 22 0E F1 | 	add	local03, ##1044 wz
27118                 | '         return _seterror( 5 );
27118     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
2711c     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
27120     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
27124     01 FA 65 A6 |  if_e	neg	result1, #1
27128     4C 00 90 AD |  if_e	jmp	#LR__4082
2712c     00 20 0E F2 | 	cmp	local02, #0 wz
27130     24 00 90 AD |  if_e	jmp	#LR__4080
27134     01 20 0E F2 | 	cmp	local02, #1 wz
27138     14 22 06 A1 |  if_e	add	local03, #20
2713c     11 25 02 AB |  if_e	rdlong	local04, local03
27140     14 22 86 A1 |  if_e	sub	local03, #20
27144     12 1F 02 A1 |  if_e	add	local01, local04
27148     0C 22 06 51 |  if_ne	add	local03, #12
2714c     11 25 02 5B |  if_ne	rdlong	local04, local03
27150     0C 22 86 51 |  if_ne	sub	local03, #12
27154     12 1F 02 51 |  if_ne	add	local01, local04
27158                 | LR__4080
27158     0F 15 02 F6 | 	mov	arg02, local01
2715c     11 13 02 F6 | 	mov	arg01, local03
27160     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
27164     FD 12 0A F6 | 	mov	arg01, result1 wz
27168     08 00 90 AD |  if_e	jmp	#LR__4081
2716c                 | '         return _set_dos_error(result);
2716c     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0845
27170     04 00 90 FD | 	jmp	#LR__4082
27174                 | LR__4081
27174                 | '     }
27174                 | '     return offset;
27174     0F FB 01 F6 | 	mov	result1, local01
27178                 | LR__4082
27178     A7 F0 03 F6 | 	mov	ptra, fp
2717c     B2 00 A0 FD | 	call	#popregs_
27180                 | _fatfs_cc_v_lseek_ret
27180     2D 00 64 FD | 	ret
27184                 | 
27184                 | _fatfs_cc_v_ioctl
27184                 | ' {
27184                 | '     return _seterror( 10 );
27184     20 E8 05 F1 | 	add	ptr___system__dat__, #32
27188     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
2718c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
27190     01 FA 65 F6 | 	neg	result1, #1
27194                 | _fatfs_cc_v_ioctl_ret
27194     2D 00 64 FD | 	ret
27198                 | 
27198                 | _fatfs_cc_v_mkdir
27198     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
2719c     FD 12 02 F6 | 	mov	arg01, result1
271a0                 | ' 
271a0                 | '     r = f_mkdir(name);
271a0                 | '     return _set_dos_error(r);
271a0     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0845
271a4                 | _fatfs_cc_v_mkdir_ret
271a4     2D 00 64 FD | 	ret
271a8                 | 
271a8                 | _fatfs_cc_v_remove
271a8     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
271ac     FD 12 02 F6 | 	mov	arg01, result1
271b0                 | ' 
271b0                 | '     r = f_unlink(name);
271b0                 | '     return _set_dos_error(r);
271b0     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0845
271b4                 | _fatfs_cc_v_remove_ret
271b4     2D 00 64 FD | 	ret
271b8                 | 
271b8                 | _fatfs_cc_v_rmdir
271b8     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
271bc     FD 12 02 F6 | 	mov	arg01, result1
271c0                 | ' 
271c0                 | '     r = f_unlink(name);
271c0                 | '     return _set_dos_error(r);
271c0     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0845
271c4                 | _fatfs_cc_v_rmdir_ret
271c4     2D 00 64 FD | 	ret
271c8                 | 
271c8                 | _fatfs_cc_v_rename
271c8     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
271cc     FD 12 02 F6 | 	mov	arg01, result1
271d0                 | '     return _set_dos_error(r);
271d0     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0845
271d4                 | _fatfs_cc_v_rename_ret
271d4     2D 00 64 FD | 	ret
271d8                 | 
271d8                 | _fatfs_cc_v_open
271d8     07 4A 05 F6 | 	mov	COUNT_, #7
271dc     A8 00 A0 FD | 	call	#pushregs_
271e0     09 1F 02 F6 | 	mov	local01, arg01
271e4     0A 21 02 F6 | 	mov	local02, arg02
271e8     0B 23 02 F6 | 	mov	local03, arg03
271ec     03 00 00 FF 
271f0     3C 12 06 F6 | 	mov	arg01, ##1596
271f4                 | '     return _gc_alloc(size);
271f4     10 14 06 F6 | 	mov	arg02, #16
271f8     A0 58 BF FD | 	call	#__system___gc_doalloc
271fc     FD 24 0A F6 | 	mov	local04, result1 wz
27200                 | '       return _seterror( 7 );
27200     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
27204     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
27208     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
2720c     01 FA 65 A6 |  if_e	neg	result1, #1
27210     98 00 90 AD |  if_e	jmp	#LR__4096
27214     12 13 02 F6 | 	mov	arg01, local04
27218     00 14 06 F6 | 	mov	arg02, #0
2721c     03 00 00 FF 
27220     3C 16 06 F6 | 	mov	arg03, ##1596
27224     98 00 A0 FD | 	call	#\builtin_bytefill_
27228                 | '   switch (flags & 3) {
27228     11 27 02 F6 | 	mov	local05, local03
2722c     03 26 0E F5 | 	and	local05, #3 wz
27230     0C 00 90 AD |  if_e	jmp	#LR__4090
27234     01 26 0E F2 | 	cmp	local05, #1 wz
27238     0C 00 90 AD |  if_e	jmp	#LR__4091
2723c     10 00 90 FD | 	jmp	#LR__4092
27240                 | LR__4090
27240     01 28 06 F6 | 	mov	local06, #1
27244                 | '       fs_flags =  0x01 ;
27244                 | '       break;
27244     0C 00 90 FD | 	jmp	#LR__4093
27248                 | LR__4091
27248     02 28 06 F6 | 	mov	local06, #2
2724c                 | '       fs_flags =  0x02 ;
2724c                 | '       break;
2724c     04 00 90 FD | 	jmp	#LR__4093
27250                 | LR__4092
27250     03 28 06 F6 | 	mov	local06, #3
27254                 | '       fs_flags =  0x01  |  0x02 ;
27254                 | '       break;
27254                 | LR__4093
27254     08 22 CE F7 | 	test	local03, #8 wz
27258     18 28 46 55 |  if_ne	or	local06, #24
2725c     08 00 90 5D |  if_ne	jmp	#LR__4094
27260     20 22 CE F7 | 	test	local03, #32 wz
27264     30 28 46 55 |  if_ne	or	local06, #48
27268                 | LR__4094
27268     02 00 00 FF 
2726c     14 24 06 F1 | 	add	local04, ##1044
27270     12 13 02 F6 | 	mov	arg01, local04
27274     02 00 00 FF 
27278     14 24 86 F1 | 	sub	local04, ##1044
2727c     10 15 02 F6 | 	mov	arg02, local02
27280     14 17 02 F6 | 	mov	arg03, local06
27284     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
27288     FD 2A 0A F6 | 	mov	local07, result1 wz
2728c     14 00 90 AD |  if_e	jmp	#LR__4095
27290     12 13 02 F6 | 	mov	arg01, local04
27294                 | '     return _gc_free(ptr);
27294     10 59 BF FD | 	call	#__system___gc_free
27298                 | '     free(f);
27298                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
27298                 | '     return _set_dos_error(r);
27298     15 13 02 F6 | 	mov	arg01, local07
2729c     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0845
272a0     08 00 90 FD | 	jmp	#LR__4096
272a4                 | LR__4095
272a4     0F 25 62 FC | 	wrlong	local04, local01
272a8                 | '   }
272a8                 | '   fil->vfsdata = f;
272a8                 | '   return 0;
272a8     00 FA 05 F6 | 	mov	result1, #0
272ac                 | LR__4096
272ac     A7 F0 03 F6 | 	mov	ptra, fp
272b0     B2 00 A0 FD | 	call	#popregs_
272b4                 | _fatfs_cc_v_open_ret
272b4     2D 00 64 FD | 	ret
272b8                 | 
272b8                 | _fatfs_cc_v_flush
272b8     09 13 02 FB | 	rdlong	arg01, arg01
272bc     02 00 00 FF 
272c0     14 12 0E F1 | 	add	arg01, ##1044 wz
272c4                 | '         return _seterror( 5 );
272c4     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
272c8     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
272cc     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
272d0     01 FA 65 A6 |  if_e	neg	result1, #1
272d4     0C 00 90 AD |  if_e	jmp	#LR__4100
272d8     00 DA BF FD | 	call	#_fatfs_cc_f_sync
272dc     FD 12 02 F6 | 	mov	arg01, result1
272e0                 | '     }
272e0                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
272e0                 | '     result = f_sync(f);
272e0                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
272e0                 | '     return _set_dos_error(result);
272e0     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0845
272e4                 | LR__4100
272e4                 | _fatfs_cc_v_flush_ret
272e4     2D 00 64 FD | 	ret
272e8                 | 
272e8                 | _fatfs_cc_v_init
272e8                 | ' {
272e8                 | '     return 0;
272e8     00 FA 05 F6 | 	mov	result1, #0
272ec                 | _fatfs_cc_v_init_ret
272ec     2D 00 64 FD | 	ret
272f0                 | 
272f0                 | _fatfs_cc_v_deinit
272f0     41 01 00 FF 
272f4     50 14 06 F6 | 	mov	arg02, ##@LR__4296
272f8     00 12 06 F6 | 	mov	arg01, #0
272fc     00 16 06 F6 | 	mov	arg03, #0
27300     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
27304     01 00 00 FF 
27308     08 E4 05 F1 | 	add	objptr, ##520
2730c     F2 12 02 FB | 	rdlong	arg01, objptr
27310     04 E4 05 F1 | 	add	objptr, #4
27314     F2 14 02 FB | 	rdlong	arg02, objptr
27318     01 00 00 FF 
2731c     0C E4 85 F1 | 	sub	objptr, ##524
27320     50 40 BF FD | 	call	#__system___freepins
27324                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
27324                 | '     _freepins(f_pinmask);
27324                 | '     return 0;
27324     00 FA 05 F6 | 	mov	result1, #0
27328                 | _fatfs_cc_v_deinit_ret
27328     2D 00 64 FD | 	ret
2732c                 | 
2732c                 | _fatfs_cc_get_vfs
2732c     01 4A 05 F6 | 	mov	COUNT_, #1
27330     A8 00 A0 FD | 	call	#pushregs_
27334     09 1F 02 F6 | 	mov	local01, arg01
27338     50 12 06 F6 | 	mov	arg01, #80
2733c     2C 57 BF FD | 	call	#__system___gc_alloc_managed
27340     FD 12 02 F6 | 	mov	arg01, result1
27344     F2 FA 01 F6 | 	mov	result1, objptr
27348     00 78 03 FF 
2734c     00 FA 45 F5 | 	or	result1, ##116391936
27350     09 FB 61 FC | 	wrlong	result1, arg01
27354     F2 FA 01 F6 | 	mov	result1, objptr
27358     58 FA 25 F4 | 	bith	result1, #88
2735c     04 12 06 F1 | 	add	arg01, #4
27360     09 FB 61 FC | 	wrlong	result1, arg01
27364     F2 FA 01 F6 | 	mov	result1, objptr
27368     00 88 03 FF 
2736c     00 FA 45 F5 | 	or	result1, ##118489088
27370     04 12 06 F1 | 	add	arg01, #4
27374     09 FB 61 FC | 	wrlong	result1, arg01
27378     F2 FA 01 F6 | 	mov	result1, objptr
2737c     00 90 03 FF 
27380     00 FA 45 F5 | 	or	result1, ##119537664
27384     04 12 06 F1 | 	add	arg01, #4
27388     09 FB 61 FC | 	wrlong	result1, arg01
2738c     F2 FA 01 F6 | 	mov	result1, objptr
27390     00 98 03 FF 
27394     00 FA 45 F5 | 	or	result1, ##120586240
27398     04 12 06 F1 | 	add	arg01, #4
2739c     09 FB 61 FC | 	wrlong	result1, arg01
273a0     04 12 06 F1 | 	add	arg01, #4
273a4     09 01 68 FC | 	wrlong	#0, arg01
273a8     04 12 06 F1 | 	add	arg01, #4
273ac     09 1F 62 FC | 	wrlong	local01, arg01
273b0     04 12 06 F1 | 	add	arg01, #4
273b4     09 01 68 FC | 	wrlong	#0, arg01
273b8     F2 FA 01 F6 | 	mov	result1, objptr
273bc     00 A0 03 FF 
273c0     00 FA 45 F5 | 	or	result1, ##121634816
273c4     04 12 06 F1 | 	add	arg01, #4
273c8     09 FB 61 FC | 	wrlong	result1, arg01
273cc     F2 FA 01 F6 | 	mov	result1, objptr
273d0     00 A8 03 FF 
273d4     00 FA 45 F5 | 	or	result1, ##122683392
273d8     04 12 06 F1 | 	add	arg01, #4
273dc     09 FB 61 FC | 	wrlong	result1, arg01
273e0     F2 FA 01 F6 | 	mov	result1, objptr
273e4     00 B0 03 FF 
273e8     00 FA 45 F5 | 	or	result1, ##123731968
273ec     04 12 06 F1 | 	add	arg01, #4
273f0     09 FB 61 FC | 	wrlong	result1, arg01
273f4     F2 FA 01 F6 | 	mov	result1, objptr
273f8     00 B8 03 FF 
273fc     00 FA 45 F5 | 	or	result1, ##124780544
27400     04 12 06 F1 | 	add	arg01, #4
27404     09 FB 61 FC | 	wrlong	result1, arg01
27408     F2 FA 01 F6 | 	mov	result1, objptr
2740c     77 FA 25 F4 | 	bith	result1, #119
27410     04 12 06 F1 | 	add	arg01, #4
27414     09 FB 61 FC | 	wrlong	result1, arg01
27418     F2 FA 01 F6 | 	mov	result1, objptr
2741c     00 C8 03 FF 
27420     00 FA 45 F5 | 	or	result1, ##126877696
27424     04 12 06 F1 | 	add	arg01, #4
27428     09 FB 61 FC | 	wrlong	result1, arg01
2742c     F2 FA 01 F6 | 	mov	result1, objptr
27430     00 D0 03 FF 
27434     00 FA 45 F5 | 	or	result1, ##127926272
27438     04 12 06 F1 | 	add	arg01, #4
2743c     09 FB 61 FC | 	wrlong	result1, arg01
27440     F2 FA 01 F6 | 	mov	result1, objptr
27444     00 D8 03 FF 
27448     00 FA 45 F5 | 	or	result1, ##128974848
2744c     04 12 06 F1 | 	add	arg01, #4
27450     09 FB 61 FC | 	wrlong	result1, arg01
27454     F2 FA 01 F6 | 	mov	result1, objptr
27458     96 FA 25 F4 | 	bith	result1, #150
2745c     04 12 06 F1 | 	add	arg01, #4
27460     09 FB 61 FC | 	wrlong	result1, arg01
27464     F2 FA 01 F6 | 	mov	result1, objptr
27468     00 E8 03 FF 
2746c     00 FA 45 F5 | 	or	result1, ##131072000
27470     04 12 06 F1 | 	add	arg01, #4
27474     09 FB 61 FC | 	wrlong	result1, arg01
27478     F2 FA 01 F6 | 	mov	result1, objptr
2747c     B5 FA 25 F4 | 	bith	result1, #181
27480     04 12 06 F1 | 	add	arg01, #4
27484     09 FB 61 FC | 	wrlong	result1, arg01
27488     F2 FA 01 F6 | 	mov	result1, objptr
2748c     D4 FA 25 F4 | 	bith	result1, #212
27490     04 12 06 F1 | 	add	arg01, #4
27494     09 FB 61 FC | 	wrlong	result1, arg01
27498     4C 12 86 F1 | 	sub	arg01, #76
2749c                 | ' 
2749c                 | '     v->close = &v_close;
2749c                 | '     v->read = &v_read;
2749c                 | '     v->write = &v_write;
2749c                 | '     v->lseek = &v_lseek;
2749c                 | '     v->ioctl = &v_ioctl;
2749c                 | '     v->flush = 0;
2749c                 | '     v->vfs_data = ptr;
2749c                 | '     v->reserved = 0;
2749c                 | ' 
2749c                 | '     v->open = &v_open;
2749c                 | '     v->creat = &v_creat;
2749c                 | '     v->opendir = &v_opendir;
2749c                 | '     v->closedir = &v_closedir;
2749c                 | '     v->readdir = &v_readdir;
2749c                 | '     v->stat = &v_stat;
2749c                 | ' 
2749c                 | '     v->mkdir = &v_mkdir;
2749c                 | '     v->rmdir = &v_rmdir;
2749c                 | ' 
2749c                 | '     v->remove = &v_remove;
2749c                 | '     v->rename = &v_rename;
2749c                 | ' 
2749c                 | '     v->init = &v_init;
2749c                 | '     v->deinit = &v_deinit;
2749c                 | ' 
2749c                 | '     return v;
2749c     09 FB 01 F6 | 	mov	result1, arg01
274a0     A7 F0 03 F6 | 	mov	ptra, fp
274a4     B2 00 A0 FD | 	call	#popregs_
274a8                 | _fatfs_cc_get_vfs_ret
274a8     2D 00 64 FD | 	ret
274ac                 | 
274ac                 | _fatfs_cc_xmit_mmc_0992
274ac     01 00 00 FF 
274b0     10 E4 05 F1 | 	add	objptr, ##528
274b4     F2 00 02 FB | 	rdlong	_var01, objptr
274b8     08 E4 05 F1 | 	add	objptr, #8
274bc     F2 02 02 FB | 	rdlong	_var02, objptr
274c0     01 00 00 FF 
274c4     18 E4 85 F1 | 	sub	objptr, ##536
274c8     40 02 62 FD | 	dirl	_var02
274cc     28 02 64 FD | 	setq	#1
274d0     09 05 02 FB | 	rdlong	_var03, arg01
274d4     69 04 62 FD | 	rev	_var03
274d8     1B 04 FE F9 | 	movbyts	_var03, #27
274dc     01 05 22 FC | 	wypin	_var03, _var02
274e0     0A 05 02 F6 | 	mov	_var03, arg02
274e4     02 14 4E F0 | 	shr	arg02, #2 wz
274e8     03 04 66 F0 | 	shl	_var03, #3
274ec     00 05 22 FC | 	wypin	_var03, _var01
274f0     41 02 62 FD | 	dirh	_var02
274f4     08 12 06 F1 | 	add	arg01, #8
274f8     69 06 62 FD | 	rev	_var04
274fc     1B 06 FE F9 | 	movbyts	_var04, #27
27500                 | LR__4110
27500     01 07 22 5C |  if_ne	wypin	_var04, _var02
27504     09 07 02 5B |  if_ne	rdlong	_var04, arg01
27508     04 12 06 51 |  if_ne	add	arg01, #4
2750c     69 06 62 5D |  if_ne	rev	_var04
27510     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
27514                 | LR__4111
27514     40 02 72 5D |  if_ne	testp	_var02 wc
27518     F8 FF 9F 1D |  if_a	jmp	#LR__4111
2751c     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__4110
27520                 | LR__4112
27520     40 00 72 FD | 	testp	_var01 wc
27524     F8 FF 9F 3D |  if_ae	jmp	#LR__4112
27528     40 02 62 FD | 	dirl	_var02
2752c     FF FF FF FF 
27530     01 FF 2B FC | 	wypin	##-1, _var02
27534     41 02 62 FD | 	dirh	_var02
27538                 | _fatfs_cc_xmit_mmc_0992_ret
27538     2D 00 64 FD | 	ret
2753c                 | 
2753c                 | _fatfs_cc_rcvr_mmc_0999
2753c     01 00 00 FF 
27540     10 E4 05 F1 | 	add	objptr, ##528
27544     F2 00 02 FB | 	rdlong	_var01, objptr
27548     0C E4 05 F1 | 	add	objptr, #12
2754c     F2 02 02 FB | 	rdlong	_var02, objptr
27550     01 00 00 FF 
27554     1C E4 85 F1 | 	sub	objptr, ##540
27558     01 03 08 FC | 	akpin	_var02
2755c     0A 05 0A F6 | 	mov	_var03, arg02 wz
27560     02 04 4E F0 | 	shr	_var03, #2 wz
27564     30 00 90 AD |  if_e	jmp	#LR__4122
27568     02 07 02 F6 | 	mov	_var04, _var03
2756c     05 06 66 F0 | 	shl	_var04, #5
27570     00 07 22 FC | 	wypin	_var04, _var01
27574     01 7F 18 FC | 	wxpin	#63, _var02
27578                 | LR__4120
27578                 | LR__4121
27578     40 02 72 FD | 	testp	_var02 wc
2757c     F8 FF 9F 3D |  if_ae	jmp	#LR__4121
27580     01 07 8A FA | 	rdpin	_var04, _var02
27584     69 06 62 FD | 	rev	_var04
27588     1B 06 FE F9 | 	movbyts	_var04, #27
2758c     09 07 62 FC | 	wrlong	_var04, arg01
27590     04 12 06 F1 | 	add	arg01, #4
27594     F8 05 6E FB | 	djnz	_var03, #LR__4120
27598                 | LR__4122
27598     03 14 0E F5 | 	and	arg02, #3 wz
2759c     24 00 90 AD |  if_e	jmp	#LR__4125
275a0     01 4F 18 FC | 	wxpin	#39, _var02
275a4                 | LR__4123
275a4     00 11 28 FC | 	wypin	#8, _var01
275a8                 | LR__4124
275a8     40 02 72 FD | 	testp	_var02 wc
275ac     F8 FF 9F 3D |  if_ae	jmp	#LR__4124
275b0     01 07 8A FA | 	rdpin	_var04, _var02
275b4     69 06 62 FD | 	rev	_var04
275b8     09 07 42 FC | 	wrbyte	_var04, arg01
275bc     01 12 06 F1 | 	add	arg01, #1
275c0     F8 15 6E FB | 	djnz	arg02, #LR__4123
275c4                 | LR__4125
275c4                 | _fatfs_cc_rcvr_mmc_0999_ret
275c4     2D 00 64 FD | 	ret
275c8                 | 
275c8                 | _fatfs_cc_wait_ready_1003
275c8     01 4A 05 F6 | 	mov	COUNT_, #1
275cc     A8 00 A0 FD | 	call	#pushregs_
275d0     10 F0 07 F1 | 	add	ptra, #16
275d4     1A FA 61 FD | 	getct	result1
275d8     08 4E 05 F1 | 	add	fp, #8
275dc     A7 FA 61 FC | 	wrlong	result1, fp
275e0     14 1E 06 FB | 	rdlong	local01, #20
275e4     01 1E 46 F0 | 	shr	local01, #1
275e8     04 4E 05 F1 | 	add	fp, #4
275ec     A7 1E 62 FC | 	wrlong	local01, fp
275f0     0C 4E 85 F1 | 	sub	fp, #12
275f4                 | ' {
275f4                 | ' 	BYTE d;
275f4                 | ' 	UINT tmr, tmout;
275f4                 | ' 
275f4                 | ' 	tmr = _cnt();
275f4                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
275f4                 | ' 	for(;;) {
275f4                 | LR__4130
275f4     04 4E 05 F1 | 	add	fp, #4
275f8     A7 12 02 F6 | 	mov	arg01, fp
275fc     04 4E 85 F1 | 	sub	fp, #4
27600     01 14 06 F6 | 	mov	arg02, #1
27604     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_0999
27608     04 4E 05 F1 | 	add	fp, #4
2760c     A7 1E C2 FA | 	rdbyte	local01, fp
27610     04 4E 85 F1 | 	sub	fp, #4
27614     FF 1E 0E F2 | 	cmp	local01, #255 wz
27618     01 FA 05 A6 |  if_e	mov	result1, #1
2761c     28 00 90 AD |  if_e	jmp	#LR__4131
27620     1A FA 61 FD | 	getct	result1
27624     08 4E 05 F1 | 	add	fp, #8
27628     A7 1E 02 FB | 	rdlong	local01, fp
2762c     0F FB 81 F1 | 	sub	result1, local01
27630     04 4E 05 F1 | 	add	fp, #4
27634     A7 1E 02 FB | 	rdlong	local01, fp
27638     0C 4E 85 F1 | 	sub	fp, #12
2763c     0F FB 11 F2 | 	cmp	result1, local01 wc
27640     00 FA 05 36 |  if_ae	mov	result1, #0
27644     AC FF 9F CD |  if_b	jmp	#LR__4130
27648                 | LR__4131
27648     A7 F0 03 F6 | 	mov	ptra, fp
2764c     B2 00 A0 FD | 	call	#popregs_
27650                 | _fatfs_cc_wait_ready_1003_ret
27650     2D 00 64 FD | 	ret
27654                 | 
27654                 | _fatfs_cc_deselect_1009
27654     00 4A 05 F6 | 	mov	COUNT_, #0
27658     A8 00 A0 FD | 	call	#pushregs_
2765c     14 F0 07 F1 | 	add	ptra, #20
27660     01 00 00 FF 
27664     14 E4 05 F1 | 	add	objptr, ##532
27668     F2 14 02 FB | 	rdlong	arg02, objptr
2766c     04 4E 05 F1 | 	add	fp, #4
27670     A7 14 62 FC | 	wrlong	arg02, fp
27674     04 E4 85 F1 | 	sub	objptr, #4
27678     F2 14 02 FB | 	rdlong	arg02, objptr
2767c     04 4E 05 F1 | 	add	fp, #4
27680     A7 14 62 FC | 	wrlong	arg02, fp
27684     08 E4 05 F1 | 	add	objptr, #8
27688     F2 14 02 FB | 	rdlong	arg02, objptr
2768c     04 4E 05 F1 | 	add	fp, #4
27690     A7 14 62 FC | 	wrlong	arg02, fp
27694     04 E4 05 F1 | 	add	objptr, #4
27698     F2 14 02 FB | 	rdlong	arg02, objptr
2769c     01 00 00 FF 
276a0     1C E4 85 F1 | 	sub	objptr, ##540
276a4     04 4E 05 F1 | 	add	fp, #4
276a8     A7 14 62 FC | 	wrlong	arg02, fp
276ac     0C 4E 85 F1 | 	sub	fp, #12
276b0     A7 12 02 FB | 	rdlong	arg01, fp
276b4     04 4E 85 F1 | 	sub	fp, #4
276b8     59 12 62 FD | 	drvh	arg01
276bc     1F 20 64 FD | 	waitx	#16
276c0     A7 12 02 F6 | 	mov	arg01, fp
276c4     01 14 06 F6 | 	mov	arg02, #1
276c8     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_0999
276cc     A7 F0 03 F6 | 	mov	ptra, fp
276d0     B2 00 A0 FD | 	call	#popregs_
276d4                 | _fatfs_cc_deselect_1009_ret
276d4     2D 00 64 FD | 	ret
276d8                 | 
276d8                 | _fatfs_cc_select_1013
276d8     00 4A 05 F6 | 	mov	COUNT_, #0
276dc     A8 00 A0 FD | 	call	#pushregs_
276e0     10 F0 07 F1 | 	add	ptra, #16
276e4     01 00 00 FF 
276e8     14 E4 05 F1 | 	add	objptr, ##532
276ec     F2 14 02 FB | 	rdlong	arg02, objptr
276f0     08 4E 05 F1 | 	add	fp, #8
276f4     A7 14 62 FC | 	wrlong	arg02, fp
276f8     08 E4 05 F1 | 	add	objptr, #8
276fc     F2 12 02 FB | 	rdlong	arg01, objptr
27700     01 00 00 FF 
27704     1C E4 85 F1 | 	sub	objptr, ##540
27708     04 4E 05 F1 | 	add	fp, #4
2770c     A7 12 62 FC | 	wrlong	arg01, fp
27710     50 12 62 FD | 	fltl	arg01
27714     04 4E 85 F1 | 	sub	fp, #4
27718     A7 12 02 FB | 	rdlong	arg01, fp
2771c     58 12 62 FD | 	drvl	arg01
27720     1F 20 64 FD | 	waitx	#16
27724     04 4E 05 F1 | 	add	fp, #4
27728     A7 12 02 FB | 	rdlong	arg01, fp
2772c     41 12 62 FD | 	dirh	arg01
27730     08 4E 85 F1 | 	sub	fp, #8
27734     A7 12 02 F6 | 	mov	arg01, fp
27738     04 4E 85 F1 | 	sub	fp, #4
2773c     01 14 06 F6 | 	mov	arg02, #1
27740     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0999
27744     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1003
27748     00 FA 0D F2 | 	cmp	result1, #0 wz
2774c     01 FA 05 56 |  if_ne	mov	result1, #1
27750     08 00 90 5D |  if_ne	jmp	#LR__4140
27754     FC FE BF FD | 	call	#_fatfs_cc_deselect_1009
27758                 | ' 
27758                 | ' 	deselect();
27758                 | ' 	return 0;
27758     00 FA 05 F6 | 	mov	result1, #0
2775c                 | LR__4140
2775c     A7 F0 03 F6 | 	mov	ptra, fp
27760     B2 00 A0 FD | 	call	#popregs_
27764                 | _fatfs_cc_select_1013_ret
27764     2D 00 64 FD | 	ret
27768                 | 
27768                 | _fatfs_cc_rcvr_datablock_1017
27768     01 4A 05 F6 | 	mov	COUNT_, #1
2776c     A8 00 A0 FD | 	call	#pushregs_
27770     18 F0 07 F1 | 	add	ptra, #24
27774     04 4E 05 F1 | 	add	fp, #4
27778     A7 12 62 FC | 	wrlong	arg01, fp
2777c     04 4E 05 F1 | 	add	fp, #4
27780     A7 14 62 FC | 	wrlong	arg02, fp
27784     1A FA 61 FD | 	getct	result1
27788     08 4E 05 F1 | 	add	fp, #8
2778c     A7 FA 61 FC | 	wrlong	result1, fp
27790     14 1E 06 FB | 	rdlong	local01, #20
27794     03 1E 46 F0 | 	shr	local01, #3
27798     04 4E 05 F1 | 	add	fp, #4
2779c     A7 1E 62 FC | 	wrlong	local01, fp
277a0     14 4E 85 F1 | 	sub	fp, #20
277a4                 | ' 	BYTE *buff,
277a4                 | ' 	UINT btr
277a4                 | ' )
277a4                 | ' {
277a4                 | ' 	BYTE d[2];
277a4                 | ' 	UINT tmr, tmout;
277a4                 | ' 
277a4                 | ' 	tmr = _cnt();
277a4                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
277a4                 | ' 	for(;;) {
277a4                 | LR__4150
277a4     0C 4E 05 F1 | 	add	fp, #12
277a8     A7 12 02 F6 | 	mov	arg01, fp
277ac     0C 4E 85 F1 | 	sub	fp, #12
277b0     01 14 06 F6 | 	mov	arg02, #1
277b4     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0999
277b8     0C 4E 05 F1 | 	add	fp, #12
277bc     A7 1E C2 FA | 	rdbyte	local01, fp
277c0     0C 4E 85 F1 | 	sub	fp, #12
277c4     FF 1E 0E F2 | 	cmp	local01, #255 wz
277c8     28 00 90 5D |  if_ne	jmp	#LR__4151
277cc     1A FA 61 FD | 	getct	result1
277d0     FD 1E 02 F6 | 	mov	local01, result1
277d4     10 4E 05 F1 | 	add	fp, #16
277d8     A7 14 02 FB | 	rdlong	arg02, fp
277dc     0A 1F 82 F1 | 	sub	local01, arg02
277e0     04 4E 05 F1 | 	add	fp, #4
277e4     A7 14 02 FB | 	rdlong	arg02, fp
277e8     14 4E 85 F1 | 	sub	fp, #20
277ec     0A 1F 12 F2 | 	cmp	local01, arg02 wc
277f0     B0 FF 9F CD |  if_b	jmp	#LR__4150
277f4                 | LR__4151
277f4     0C 4E 05 F1 | 	add	fp, #12
277f8     A7 1E C2 FA | 	rdbyte	local01, fp
277fc     0C 4E 85 F1 | 	sub	fp, #12
27800     FE 1E 0E F2 | 	cmp	local01, #254 wz
27804     00 FA 05 56 |  if_ne	mov	result1, #0
27808     30 00 90 5D |  if_ne	jmp	#LR__4152
2780c     04 4E 05 F1 | 	add	fp, #4
27810     A7 12 02 FB | 	rdlong	arg01, fp
27814     04 4E 05 F1 | 	add	fp, #4
27818     A7 14 02 FB | 	rdlong	arg02, fp
2781c     08 4E 85 F1 | 	sub	fp, #8
27820     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0999
27824     0C 4E 05 F1 | 	add	fp, #12
27828     A7 12 02 F6 | 	mov	arg01, fp
2782c     0C 4E 85 F1 | 	sub	fp, #12
27830     02 14 06 F6 | 	mov	arg02, #2
27834     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0999
27838                 | ' 
27838                 | ' 	rcvr_mmc(buff, btr);
27838                 | ' 	rcvr_mmc(d, 2);
27838                 | ' 
27838                 | ' 	return 1;
27838     01 FA 05 F6 | 	mov	result1, #1
2783c                 | LR__4152
2783c     A7 F0 03 F6 | 	mov	ptra, fp
27840     B2 00 A0 FD | 	call	#popregs_
27844                 | _fatfs_cc_rcvr_datablock_1017_ret
27844     2D 00 64 FD | 	ret
27848                 | 
27848                 | _fatfs_cc_xmit_datablock_1019
27848     00 4A 05 F6 | 	mov	COUNT_, #0
2784c     A8 00 A0 FD | 	call	#pushregs_
27850     10 F0 07 F1 | 	add	ptra, #16
27854     04 4E 05 F1 | 	add	fp, #4
27858     A7 12 62 FC | 	wrlong	arg01, fp
2785c     04 4E 05 F1 | 	add	fp, #4
27860     A7 14 42 FC | 	wrbyte	arg02, fp
27864     08 4E 85 F1 | 	sub	fp, #8
27868     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1003
2786c     00 FA 0D F2 | 	cmp	result1, #0 wz
27870     00 FA 05 A6 |  if_e	mov	result1, #0
27874     90 00 90 AD |  if_e	jmp	#LR__4161
27878     08 4E 05 F1 | 	add	fp, #8
2787c     A7 14 C2 FA | 	rdbyte	arg02, fp
27880     04 4E 05 F1 | 	add	fp, #4
27884     A7 14 42 FC | 	wrbyte	arg02, fp
27888     A7 12 02 F6 | 	mov	arg01, fp
2788c     0C 4E 85 F1 | 	sub	fp, #12
27890     01 14 06 F6 | 	mov	arg02, #1
27894     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_0992
27898     08 4E 05 F1 | 	add	fp, #8
2789c     A7 14 C2 FA | 	rdbyte	arg02, fp
278a0     08 4E 85 F1 | 	sub	fp, #8
278a4     FD 14 0E F2 | 	cmp	arg02, #253 wz
278a8     58 00 90 AD |  if_e	jmp	#LR__4160
278ac     04 4E 05 F1 | 	add	fp, #4
278b0     A7 12 02 FB | 	rdlong	arg01, fp
278b4     04 4E 85 F1 | 	sub	fp, #4
278b8     09 14 C6 F9 | 	decod	arg02, #9
278bc     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_0992
278c0     0C 4E 05 F1 | 	add	fp, #12
278c4     A7 12 02 F6 | 	mov	arg01, fp
278c8     0C 4E 85 F1 | 	sub	fp, #12
278cc     02 14 06 F6 | 	mov	arg02, #2
278d0     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_0999
278d4     0C 4E 05 F1 | 	add	fp, #12
278d8     A7 12 02 F6 | 	mov	arg01, fp
278dc     0C 4E 85 F1 | 	sub	fp, #12
278e0     01 14 06 F6 | 	mov	arg02, #1
278e4     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_0999
278e8     0C 4E 05 F1 | 	add	fp, #12
278ec     A7 14 C2 FA | 	rdbyte	arg02, fp
278f0     0C 4E 85 F1 | 	sub	fp, #12
278f4     1F 14 06 F5 | 	and	arg02, #31
278f8     05 14 0E F2 | 	cmp	arg02, #5 wz
278fc                 | ' 			return 0;
278fc     00 FA 05 56 |  if_ne	mov	result1, #0
27900     04 00 90 5D |  if_ne	jmp	#LR__4161
27904                 | LR__4160
27904                 | ' 	}
27904                 | ' 
27904                 | ' 	return 1;
27904     01 FA 05 F6 | 	mov	result1, #1
27908                 | LR__4161
27908     A7 F0 03 F6 | 	mov	ptra, fp
2790c     B2 00 A0 FD | 	call	#popregs_
27910                 | _fatfs_cc_xmit_datablock_1019_ret
27910     2D 00 64 FD | 	ret
27914                 | 
27914                 | _fatfs_cc_send_cmd_1023
27914     01 4A 05 F6 | 	mov	COUNT_, #1
27918     A8 00 A0 FD | 	call	#pushregs_
2791c     1C F0 07 F1 | 	add	ptra, #28
27920                 | _fatfs_cc_send_cmd_1023_enter
27920     04 4E 05 F1 | 	add	fp, #4
27924     A7 12 42 FC | 	wrbyte	arg01, fp
27928     04 4E 05 F1 | 	add	fp, #4
2792c     A7 14 62 FC | 	wrlong	arg02, fp
27930     04 4E 85 F1 | 	sub	fp, #4
27934     A7 FA C1 FA | 	rdbyte	result1, fp
27938     04 4E 85 F1 | 	sub	fp, #4
2793c     80 FA CD F7 | 	test	result1, #128 wz
27940     44 00 90 AD |  if_e	jmp	#LR__4170
27944     04 4E 05 F1 | 	add	fp, #4
27948     A7 14 C2 FA | 	rdbyte	arg02, fp
2794c     7F 14 06 F5 | 	and	arg02, #127
27950     A7 14 42 FC | 	wrbyte	arg02, fp
27954     04 4E 85 F1 | 	sub	fp, #4
27958     37 12 06 F6 | 	mov	arg01, #55
2795c     00 14 06 F6 | 	mov	arg02, #0
27960     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1023
27964     0C 4E 05 F1 | 	add	fp, #12
27968     A7 FA 41 FC | 	wrbyte	result1, fp
2796c     A7 14 C2 FA | 	rdbyte	arg02, fp
27970     0C 4E 85 F1 | 	sub	fp, #12
27974     02 14 16 F2 | 	cmp	arg02, #2 wc
27978     0C 4E 05 31 |  if_ae	add	fp, #12
2797c     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
27980     0C 4E 85 31 |  if_ae	sub	fp, #12
27984     6C 01 90 3D |  if_ae	jmp	#LR__4174
27988                 | LR__4170
27988     04 4E 05 F1 | 	add	fp, #4
2798c     A7 14 C2 FA | 	rdbyte	arg02, fp
27990     04 4E 85 F1 | 	sub	fp, #4
27994     0C 14 0E F2 | 	cmp	arg02, #12 wz
27998     14 00 90 AD |  if_e	jmp	#LR__4171
2799c     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1009
279a0     34 FD BF FD | 	call	#_fatfs_cc_select_1013
279a4     00 FA 0D F2 | 	cmp	result1, #0 wz
279a8     FF FA 05 A6 |  if_e	mov	result1, #255
279ac     44 01 90 AD |  if_e	jmp	#LR__4174
279b0                 | LR__4171
279b0     04 4E 05 F1 | 	add	fp, #4
279b4     A7 14 C2 FA | 	rdbyte	arg02, fp
279b8     40 FA 05 F6 | 	mov	result1, #64
279bc     0A FB 41 F5 | 	or	result1, arg02
279c0     10 4E 05 F1 | 	add	fp, #16
279c4     A7 FA 41 FC | 	wrbyte	result1, fp
279c8     0C 4E 85 F1 | 	sub	fp, #12
279cc     A7 FA 01 FB | 	rdlong	result1, fp
279d0     18 FA 45 F0 | 	shr	result1, #24
279d4     0D 4E 05 F1 | 	add	fp, #13
279d8     A7 FA 41 FC | 	wrbyte	result1, fp
279dc     0D 4E 85 F1 | 	sub	fp, #13
279e0     A7 FA 01 FB | 	rdlong	result1, fp
279e4     10 FA 45 F0 | 	shr	result1, #16
279e8     0E 4E 05 F1 | 	add	fp, #14
279ec     A7 FA 41 FC | 	wrbyte	result1, fp
279f0     0E 4E 85 F1 | 	sub	fp, #14
279f4     A7 FA 01 FB | 	rdlong	result1, fp
279f8     08 FA 45 F0 | 	shr	result1, #8
279fc     0F 4E 05 F1 | 	add	fp, #15
27a00     A7 FA 41 FC | 	wrbyte	result1, fp
27a04     0F 4E 85 F1 | 	sub	fp, #15
27a08     A7 FA 01 FB | 	rdlong	result1, fp
27a0c     10 4E 05 F1 | 	add	fp, #16
27a10     A7 FA 41 FC | 	wrbyte	result1, fp
27a14     0C 4E 85 F1 | 	sub	fp, #12
27a18     A7 02 48 FC | 	wrbyte	#1, fp
27a1c     08 4E 85 F1 | 	sub	fp, #8
27a20     A7 FA C9 FA | 	rdbyte	result1, fp wz
27a24     04 4E 85 F1 | 	sub	fp, #4
27a28     0C 4E 05 A1 |  if_e	add	fp, #12
27a2c     A7 2A 49 AC |  if_e	wrbyte	#149, fp
27a30     0C 4E 85 A1 |  if_e	sub	fp, #12
27a34     04 4E 05 F1 | 	add	fp, #4
27a38     A7 FA C1 FA | 	rdbyte	result1, fp
27a3c     04 4E 85 F1 | 	sub	fp, #4
27a40     08 FA 0D F2 | 	cmp	result1, #8 wz
27a44     0C 4E 05 A1 |  if_e	add	fp, #12
27a48     A7 0E 49 AC |  if_e	wrbyte	#135, fp
27a4c     0C 4E 85 A1 |  if_e	sub	fp, #12
27a50     0C 4E 05 F1 | 	add	fp, #12
27a54     A7 14 C2 FA | 	rdbyte	arg02, fp
27a58     0D 4E 05 F1 | 	add	fp, #13
27a5c     A7 14 42 FC | 	wrbyte	arg02, fp
27a60     05 4E 85 F1 | 	sub	fp, #5
27a64     A7 12 02 F6 | 	mov	arg01, fp
27a68     14 4E 85 F1 | 	sub	fp, #20
27a6c     06 14 06 F6 | 	mov	arg02, #6
27a70     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_0992
27a74     04 4E 05 F1 | 	add	fp, #4
27a78     A7 1E C2 FA | 	rdbyte	local01, fp
27a7c     04 4E 85 F1 | 	sub	fp, #4
27a80     0C 1E 0E F2 | 	cmp	local01, #12 wz
27a84     10 4E 05 A1 |  if_e	add	fp, #16
27a88     A7 12 02 A6 |  if_e	mov	arg01, fp
27a8c     10 4E 85 A1 |  if_e	sub	fp, #16
27a90     01 14 06 A6 |  if_e	mov	arg02, #1
27a94     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_0999
27a98     0C 4E 05 F1 | 	add	fp, #12
27a9c     A7 14 48 FC | 	wrbyte	#10, fp
27aa0     0C 4E 85 F1 | 	sub	fp, #12
27aa4                 | ' 	n = 10;
27aa4                 | ' 	do
27aa4                 | LR__4172
27aa4     10 4E 05 F1 | 	add	fp, #16
27aa8     A7 12 02 F6 | 	mov	arg01, fp
27aac     10 4E 85 F1 | 	sub	fp, #16
27ab0     01 14 06 F6 | 	mov	arg02, #1
27ab4     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_0999
27ab8     10 4E 05 F1 | 	add	fp, #16
27abc     A7 1E C2 FA | 	rdbyte	local01, fp
27ac0     10 4E 85 F1 | 	sub	fp, #16
27ac4     80 1E CE F7 | 	test	local01, #128 wz
27ac8     1C 00 90 AD |  if_e	jmp	#LR__4173
27acc     0C 4E 05 F1 | 	add	fp, #12
27ad0     A7 1E C2 FA | 	rdbyte	local01, fp
27ad4     01 1E 86 F1 | 	sub	local01, #1
27ad8     A7 1E 42 FC | 	wrbyte	local01, fp
27adc     A7 1E CA FA | 	rdbyte	local01, fp wz
27ae0     0C 4E 85 F1 | 	sub	fp, #12
27ae4     BC FF 9F 5D |  if_ne	jmp	#LR__4172
27ae8                 | LR__4173
27ae8                 | ' 
27ae8                 | ' 	return d;
27ae8     10 4E 05 F1 | 	add	fp, #16
27aec     A7 FA C1 FA | 	rdbyte	result1, fp
27af0     10 4E 85 F1 | 	sub	fp, #16
27af4                 | LR__4174
27af4     A7 F0 03 F6 | 	mov	ptra, fp
27af8     B2 00 A0 FD | 	call	#popregs_
27afc                 | _fatfs_cc_send_cmd_1023_ret
27afc     2D 00 64 FD | 	ret
27b00                 | 
27b00                 | _fatfs_cc_disk_deinitialize
27b00     03 4A 05 F6 | 	mov	COUNT_, #3
27b04     A8 00 A0 FD | 	call	#pushregs_
27b08     00 12 4E F2 | 	cmps	arg01, #0 wz
27b0c     01 00 00 FF 
27b10     14 E4 05 F1 | 	add	objptr, ##532
27b14     F2 12 02 FB | 	rdlong	arg01, objptr
27b18     04 E4 85 F1 | 	sub	objptr, #4
27b1c     F2 1E 02 FB | 	rdlong	local01, objptr
27b20     08 E4 05 F1 | 	add	objptr, #8
27b24     F2 20 02 FB | 	rdlong	local02, objptr
27b28     04 E4 05 F1 | 	add	objptr, #4
27b2c     F2 22 02 FB | 	rdlong	local03, objptr
27b30     01 00 00 FF 
27b34     1C E4 85 F1 | 	sub	objptr, ##540
27b38                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
27b38                 | '         return RES_NOTRDY;
27b38     03 FA 05 56 |  if_ne	mov	result1, #3
27b3c     2C 00 90 5D |  if_ne	jmp	#LR__4180
27b40     50 12 62 FD | 	fltl	arg01
27b44     09 01 08 FC | 	wrpin	#0, arg01
27b48     50 1E 62 FD | 	fltl	local01
27b4c     0F 01 08 FC | 	wrpin	#0, local01
27b50     50 20 62 FD | 	fltl	local02
27b54     10 01 08 FC | 	wrpin	#0, local02
27b58     50 22 62 FD | 	fltl	local03
27b5c     11 01 08 FC | 	wrpin	#0, local03
27b60     0A 12 06 F6 | 	mov	arg01, #10
27b64     40 14 BF FD | 	call	#__system___waitms
27b68                 | '     }
27b68                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
27b68                 | '     _pinclear(PIN_SS);
27b68                 | '     _pinclear(PIN_CLK);
27b68                 | '     _pinclear(PIN_DI);
27b68                 | '     _pinclear(PIN_DO);
27b68                 | ' 
27b68                 | '     _waitms(10);
27b68                 | ' 
27b68                 | '     return 0;
27b68     00 FA 05 F6 | 	mov	result1, #0
27b6c                 | LR__4180
27b6c     A7 F0 03 F6 | 	mov	ptra, fp
27b70     B2 00 A0 FD | 	call	#popregs_
27b74                 | _fatfs_cc_disk_deinitialize_ret
27b74     2D 00 64 FD | 	ret
27b78                 | 
27b78                 | _fatfs_cc_gettimeofday
27b78     04 4A 05 F6 | 	mov	COUNT_, #4
27b7c     A8 00 A0 FD | 	call	#pushregs_
27b80     09 1F 02 F6 | 	mov	local01, arg01
27b84     FC 0F BF FD | 	call	#__system___getus
27b88     FD 12 02 F6 | 	mov	arg01, result1
27b8c     02 00 00 FF 
27b90     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
27b94     F6 20 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
27b98     09 FB 01 F6 | 	mov	result1, arg01
27b9c     10 FB 81 F1 | 	sub	result1, local02
27ba0     A1 07 00 FF 
27ba4     40 FA 15 FD | 	qdiv	result1, ##1000000
27ba8     02 00 00 FF 
27bac     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
27bb0     18 20 62 FD | 	getqx	local02
27bb4     A1 07 00 FF 
27bb8     40 FA 15 FD | 	qdiv	result1, ##1000000
27bbc     00 20 0E F2 | 	cmp	local02, #0 wz
27bc0     19 22 62 FD | 	getqy	local03
27bc4     28 00 90 AD |  if_e	jmp	#LR__4190
27bc8     02 00 00 FF 
27bcc     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
27bd0     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
27bd4     10 25 02 F1 | 	add	local04, local02
27bd8     F6 24 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
27bdc     11 13 82 F1 | 	sub	arg01, local03
27be0     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
27be4     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
27be8     02 00 00 FF 
27bec     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
27bf0                 | LR__4190
27bf0     02 00 00 FF 
27bf4     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
27bf8     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
27bfc     02 00 00 FF 
27c00     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
27c04     0F 25 62 FC | 	wrlong	local04, local01
27c08     04 1E 06 F1 | 	add	local01, #4
27c0c     0F 23 62 FC | 	wrlong	local03, local01
27c10                 | '         lastsec += secs;
27c10                 | '         lastus = now - leftover;
27c10                 | '     }
27c10                 | '     tv->tv_sec = lastsec;
27c10                 | '     tv->tv_usec = leftover;
27c10                 | '     return 0;
27c10     00 FA 05 F6 | 	mov	result1, #0
27c14     A7 F0 03 F6 | 	mov	ptra, fp
27c18     B2 00 A0 FD | 	call	#popregs_
27c1c                 | _fatfs_cc_gettimeofday_ret
27c1c     2D 00 64 FD | 	ret
27c20                 | 
27c20                 | _fatfs_cc__is_leap_year
27c20     09 FB 51 F6 | 	abs	result1, arg01 wc
27c24     03 FA 05 F5 | 	and	result1, #3
27c28     FD FA 89 F6 | 	negc	result1, result1 wz
27c2c     38 00 90 5D |  if_ne	jmp	#LR__4201
27c30     09 FB 51 F6 | 	abs	result1, arg01 wc
27c34     64 FA 15 FD | 	qdiv	result1, #100
27c38     19 FA 61 FD | 	getqy	result1
27c3c     FD FA 89 F6 | 	negc	result1, result1 wz
27c40     1C 00 90 5D |  if_ne	jmp	#LR__4200
27c44     09 FB 51 F6 | 	abs	result1, arg01 wc
27c48     90 FB 15 FD | 	qdiv	result1, #400
27c4c                 | '       return (0 == y % 400);
27c4c     00 FA 05 F6 | 	mov	result1, #0
27c50     19 00 62 FD | 	getqy	_var01
27c54     00 01 8A F6 | 	negc	_var01, _var01 wz
27c58     01 FA 05 A6 |  if_e	mov	result1, #1
27c5c     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
27c60                 | LR__4200
27c60                 | '     return 1;
27c60     01 FA 05 F6 | 	mov	result1, #1
27c64     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
27c68                 | LR__4201
27c68                 | '   }
27c68                 | '   return 0;
27c68     00 FA 05 F6 | 	mov	result1, #0
27c6c                 | _fatfs_cc__is_leap_year_ret
27c6c     2D 00 64 FD | 	ret
27c70                 | 
27c70                 | _fatfs_cc___tzoffset
27c70     09 01 0A F6 | 	mov	_var01, arg01 wz
27c74     FF FF FF FF 
27c78     0A FF 6B FC | 	wrlong	##-1, arg02
27c7c     01 02 06 F6 | 	mov	_var02, #1
27c80     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
27c84                 | '                 return 0;
27c84     00 FA 05 A6 |  if_e	mov	result1, #0
27c88     94 02 90 AD |  if_e	jmp	#LR__4227
27c8c     0A 01 68 FC | 	wrlong	#0, arg02
27c90     02 00 00 FF 
27c94     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
27c98     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
27c9c                 | ' 
27c9c                 | '        *hasdst = 0;
27c9c                 | ' 
27c9c                 | ' 	n = stdname;
27c9c                 | '         while (*s && isalpha(*s)) {
27c9c     02 00 00 FF 
27ca0     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
27ca4     97 28 48 FB | 	callpa	#(@LR__4211-@LR__4210)>>2,fcache_load_ptr_
27ca8                 | LR__4210
27ca8     00 05 CA FA | 	rdbyte	_var03, _var01 wz
27cac     48 00 90 AD |  if_e	jmp	#LR__4212
27cb0     00 13 C2 FA | 	rdbyte	arg01, _var01
27cb4                 | ' {
27cb4                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
27cb4     80 12 36 F3 | 	fle	arg01, #128 wc
27cb8                 | '     return __ctype[c];
27cb8     02 00 00 FF 
27cbc     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
27cc0     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
27cc4     09 FB C1 FA | 	rdbyte	result1, arg01
27cc8     02 00 00 FF 
27ccc     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
27cd0     0C FA CD F7 | 	test	result1, #12 wz
27cd4     20 00 90 AD |  if_e	jmp	#LR__4212
27cd8     00 09 02 F6 | 	mov	_var05, _var01
27cdc     00 0B 02 F6 | 	mov	_var06, _var01
27ce0     01 0A 06 F1 | 	add	_var06, #1
27ce4     04 0D C2 FA | 	rdbyte	_var07, _var05
27ce8     05 01 02 F6 | 	mov	_var01, _var06
27cec     03 0D 42 FC | 	wrbyte	_var07, _var04
27cf0     01 06 06 F1 | 	add	_var04, #1
27cf4     B0 FF 9F FD | 	jmp	#LR__4210
27cf8                 | LR__4211
27cf8                 | LR__4212
27cf8     03 01 48 FC | 	wrbyte	#0, _var04
27cfc     00 0E 06 F6 | 	mov	_var08, #0
27d00     00 05 C2 FA | 	rdbyte	_var03, _var01
27d04     2D 04 0E F2 | 	cmp	_var03, #45 wz
27d08     01 02 66 A6 |  if_e	neg	_var02, #1
27d0c     01 00 06 A1 |  if_e	add	_var01, #1
27d10     97 28 48 FB | 	callpa	#(@LR__4214-@LR__4213)>>2,fcache_load_ptr_
27d14                 | '                 sgn = -1;
27d14                 | '                 s++;
27d14                 | '         }
27d14                 | '         while (isdigit(*s)) {
27d14                 | LR__4213
27d14     00 13 C2 FA | 	rdbyte	arg01, _var01
27d18                 | ' {
27d18                 | '   return  (__ctype_get(c) & 0x02 ) ;
27d18     80 12 36 F3 | 	fle	arg01, #128 wc
27d1c                 | '     return __ctype[c];
27d1c     02 00 00 FF 
27d20     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
27d24     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
27d28     09 FB C1 FA | 	rdbyte	result1, arg01
27d2c     02 00 00 FF 
27d30     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
27d34     02 FA CD F7 | 	test	result1, #2 wz
27d38     28 00 90 AD |  if_e	jmp	#LR__4215
27d3c     07 05 02 F6 | 	mov	_var03, _var08
27d40     02 04 66 F0 | 	shl	_var03, #2
27d44     07 05 02 F1 | 	add	_var03, _var08
27d48     01 04 66 F0 | 	shl	_var03, #1
27d4c     00 09 C2 FA | 	rdbyte	_var05, _var01
27d50     30 08 86 F1 | 	sub	_var05, #48
27d54     04 05 02 F1 | 	add	_var03, _var05
27d58     02 0F 02 F6 | 	mov	_var08, _var03
27d5c     01 00 06 F1 | 	add	_var01, #1
27d60     B0 FF 9F FD | 	jmp	#LR__4213
27d64                 | LR__4214
27d64                 | LR__4215
27d64     07 00 00 FF 
27d68     10 0E 06 FD | 	qmul	_var08, ##3600
27d6c     00 05 C2 FA | 	rdbyte	_var03, _var01
27d70     3A 04 0E F2 | 	cmp	_var03, #58 wz
27d74     18 10 62 FD | 	getqx	_var09
27d78     70 00 90 5D |  if_ne	jmp	#LR__4219
27d7c     00 0E 06 F6 | 	mov	_var08, #0
27d80     01 00 06 F1 | 	add	_var01, #1
27d84     97 28 48 FB | 	callpa	#(@LR__4217-@LR__4216)>>2,fcache_load_ptr_
27d88                 | '                 x = 0;
27d88                 | '                 s++;
27d88                 | '                 while (isdigit(*s)) {
27d88                 | LR__4216
27d88     00 13 C2 FA | 	rdbyte	arg01, _var01
27d8c                 | ' {
27d8c                 | '   return  (__ctype_get(c) & 0x02 ) ;
27d8c     80 12 36 F3 | 	fle	arg01, #128 wc
27d90                 | '     return __ctype[c];
27d90     02 00 00 FF 
27d94     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
27d98     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
27d9c     09 FB C1 FA | 	rdbyte	result1, arg01
27da0     02 00 00 FF 
27da4     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
27da8     02 FA CD F7 | 	test	result1, #2 wz
27dac     28 00 90 AD |  if_e	jmp	#LR__4218
27db0     07 05 02 F6 | 	mov	_var03, _var08
27db4     02 04 66 F0 | 	shl	_var03, #2
27db8     07 05 02 F1 | 	add	_var03, _var08
27dbc     01 04 66 F0 | 	shl	_var03, #1
27dc0     00 09 C2 FA | 	rdbyte	_var05, _var01
27dc4     30 08 86 F1 | 	sub	_var05, #48
27dc8     04 05 02 F1 | 	add	_var03, _var05
27dcc     02 0F 02 F6 | 	mov	_var08, _var03
27dd0     01 00 06 F1 | 	add	_var01, #1
27dd4     B0 FF 9F FD | 	jmp	#LR__4216
27dd8                 | LR__4217
27dd8                 | LR__4218
27dd8     07 0D 02 F6 | 	mov	_var07, _var08
27ddc     04 0C 66 F0 | 	shl	_var07, #4
27de0     07 0D 82 F1 | 	sub	_var07, _var08
27de4     02 0C 66 F0 | 	shl	_var07, #2
27de8     06 11 02 F1 | 	add	_var09, _var07
27dec                 | LR__4219
27dec     02 00 00 FF 
27df0     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
27df4     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
27df8     00 13 C2 FA | 	rdbyte	arg01, _var01
27dfc                 | ' {
27dfc                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
27dfc     80 12 36 F3 | 	fle	arg01, #128 wc
27e00                 | '     return __ctype[c];
27e00     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
27e04     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
27e08     09 FB C1 FA | 	rdbyte	result1, arg01
27e0c     02 00 00 FF 
27e10     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
27e14     0C FA CD F7 | 	test	result1, #12 wz
27e18     50 00 90 AD |  if_e	jmp	#LR__4222
27e1c     0A 03 68 FC | 	wrlong	#1, arg02
27e20                 | '                 *hasdst = 1;
27e20                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
27e20                 | LR__4220
27e20     00 05 CA FA | 	rdbyte	_var03, _var01 wz
27e24     44 00 90 AD |  if_e	jmp	#LR__4221
27e28     00 13 C2 FA | 	rdbyte	arg01, _var01
27e2c                 | ' {
27e2c                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
27e2c     80 12 36 F3 | 	fle	arg01, #128 wc
27e30                 | '     return __ctype[c];
27e30     02 00 00 FF 
27e34     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
27e38     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
27e3c     09 FB C1 FA | 	rdbyte	result1, arg01
27e40     02 00 00 FF 
27e44     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
27e48     0C FA CD F7 | 	test	result1, #12 wz
27e4c     1C 00 90 AD |  if_e	jmp	#LR__4221
27e50     00 0B 02 F6 | 	mov	_var06, _var01
27e54     01 0A 06 F1 | 	add	_var06, #1
27e58     00 0D C2 FA | 	rdbyte	_var07, _var01
27e5c     05 01 02 F6 | 	mov	_var01, _var06
27e60     03 0D 42 FC | 	wrbyte	_var07, _var04
27e64     01 06 06 F1 | 	add	_var04, #1
27e68     B4 FF 9F FD | 	jmp	#LR__4220
27e6c                 | LR__4221
27e6c                 | LR__4222
27e6c     03 01 48 FC | 	wrbyte	#0, _var04
27e70     02 00 00 FF 
27e74     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
27e78     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
27e7c     02 00 00 FF 
27e80     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
27e84     20 00 90 AD |  if_e	jmp	#LR__4223
27e88     02 00 00 FF 
27e8c     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
27e90     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
27e94     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
27e98     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
27e9c     02 00 00 FF 
27ea0     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
27ea4     1C 00 90 FD | 	jmp	#LR__4224
27ea8                 | LR__4223
27ea8     02 00 00 FF 
27eac     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
27eb0     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
27eb4     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
27eb8     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
27ebc     02 00 00 FF 
27ec0     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
27ec4                 | LR__4224
27ec4     02 00 00 FF 
27ec8     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
27ecc     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
27ed0     02 00 00 FF 
27ed4     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
27ed8     20 00 90 AD |  if_e	jmp	#LR__4225
27edc     02 00 00 FF 
27ee0     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
27ee4     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
27ee8     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
27eec     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
27ef0     02 00 00 FF 
27ef4     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
27ef8     1C 00 90 FD | 	jmp	#LR__4226
27efc                 | LR__4225
27efc     02 00 00 FF 
27f00     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
27f04     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
27f08     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
27f0c     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
27f10     02 00 00 FF 
27f14     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
27f18                 | LR__4226
27f18     08 03 02 FD | 	qmul	_var02, _var09
27f1c                 | ' 		_tzname[1] = stdname;
27f1c                 | ' 
27f1c                 | '         return sgn * off;
27f1c     18 FA 61 FD | 	getqx	result1
27f20                 | LR__4227
27f20                 | _fatfs_cc___tzoffset_ret
27f20     2D 00 64 FD | 	ret
27f24                 | 
27f24                 | _fatfs_cc___indst
27f24     10 12 06 F1 | 	add	arg01, #16
27f28     09 01 02 FB | 	rdlong	_var01, arg01
27f2c     10 12 86 F1 | 	sub	arg01, #16
27f30     02 00 0E F2 | 	cmp	_var01, #2 wz
27f34     30 00 90 5D |  if_ne	jmp	#LR__4230
27f38     07 00 06 F6 | 	mov	_var01, #7
27f3c     18 12 06 F1 | 	add	arg01, #24
27f40     09 03 02 FB | 	rdlong	_var02, arg01
27f44     01 01 02 F1 | 	add	_var01, _var02
27f48     0C 12 86 F1 | 	sub	arg01, #12
27f4c     09 05 02 FB | 	rdlong	_var03, arg01
27f50     02 01 82 F1 | 	sub	_var01, _var03
27f54     00 00 56 F2 | 	cmps	_var01, #0 wc
27f58                 | '                         return 1;
27f58     01 FA 05 C6 |  if_b	mov	result1, #1
27f5c     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
27f60                 | '                 return 0;
27f60     00 FA 05 F6 | 	mov	result1, #0
27f64     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
27f68                 | LR__4230
27f68     10 12 06 F1 | 	add	arg01, #16
27f6c     09 01 02 FB | 	rdlong	_var01, arg01
27f70     10 12 86 F1 | 	sub	arg01, #16
27f74     0A 00 0E F2 | 	cmp	_var01, #10 wz
27f78     28 00 90 5D |  if_ne	jmp	#LR__4231
27f7c     18 12 06 F1 | 	add	arg01, #24
27f80     09 01 02 FB | 	rdlong	_var01, arg01
27f84     0C 12 86 F1 | 	sub	arg01, #12
27f88     09 07 02 FB | 	rdlong	_var04, arg01
27f8c     03 01 82 F1 | 	sub	_var01, _var04
27f90     00 00 56 F2 | 	cmps	_var01, #0 wc
27f94                 | '                         return 0;
27f94     00 FA 05 C6 |  if_b	mov	result1, #0
27f98     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
27f9c                 | '                 return 1;
27f9c     01 FA 05 F6 | 	mov	result1, #1
27fa0     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
27fa4                 | LR__4231
27fa4                 | '         }
27fa4                 | ' 
27fa4                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
27fa4     00 00 06 F6 | 	mov	_var01, #0
27fa8     10 12 06 F1 | 	add	arg01, #16
27fac     09 03 02 FB | 	rdlong	_var02, arg01
27fb0     10 12 86 F1 | 	sub	arg01, #16
27fb4     03 02 56 F2 | 	cmps	_var02, #3 wc
27fb8     10 00 90 CD |  if_b	jmp	#LR__4232
27fbc     10 12 06 F1 | 	add	arg01, #16
27fc0     09 05 02 FB | 	rdlong	_var03, arg01
27fc4     0A 04 56 F2 | 	cmps	_var03, #10 wc
27fc8     01 00 06 C6 |  if_b	mov	_var01, #1
27fcc                 | LR__4232
27fcc     00 FB 01 F6 | 	mov	result1, _var01
27fd0                 | _fatfs_cc___indst_ret
27fd0     2D 00 64 FD | 	ret
27fd4                 | 
27fd4                 | ' 	
27fd4                 | ' 	FUNCTION pfunc(c as integer) as integer
27fd4                 | ___strs_cl_pfunc
27fd4                 | ' 		if (i < 16) then
27fd4     04 E4 05 F1 | 	add	objptr, #4
27fd8     F2 FA 01 FB | 	rdlong	result1, objptr
27fdc     04 E4 85 F1 | 	sub	objptr, #4
27fe0     10 FA 55 F2 | 	cmps	result1, #16 wc
27fe4     2C 00 90 3D |  if_ae	jmp	#LR__4240
27fe8     F2 FA 01 FB | 	rdlong	result1, objptr
27fec     04 E4 05 F1 | 	add	objptr, #4
27ff0     F2 00 02 FB | 	rdlong	_var01, objptr
27ff4     FD 00 02 F1 | 	add	_var01, result1
27ff8     00 13 42 FC | 	wrbyte	arg01, _var01
27ffc     F2 FA 01 FB | 	rdlong	result1, objptr
28000     01 FA 05 F1 | 	add	result1, #1
28004     F2 FA 61 FC | 	wrlong	result1, objptr
28008     04 E4 85 F1 | 	sub	objptr, #4
2800c                 | ' 			p(i) = c
2800c                 | ' 			i = i+1
2800c                 | ' 			return 1
2800c     01 FA 05 F6 | 	mov	result1, #1
28010     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
28014                 | LR__4240
28014                 | ' 			return -1
28014     01 FA 65 F6 | 	neg	result1, #1
28018                 | ___strs_cl_pfunc_ret
28018     2D 00 64 FD | 	ret
2801c                 | 
2801c                 | __struct__s_vfs_file_t_putchar
2801c     04 4A 05 F6 | 	mov	COUNT_, #4
28020     A8 00 A0 FD | 	call	#pushregs_
28024     1C E4 05 F1 | 	add	objptr, #28
28028     F2 1E 0A FB | 	rdlong	local01, objptr wz
2802c     1C E4 85 F1 | 	sub	objptr, #28
28030     00 FA 05 A6 |  if_e	mov	result1, #0
28034     48 00 90 AD |  if_e	jmp	#LR__4250
28038     1C E4 05 F1 | 	add	objptr, #28
2803c     F2 20 02 FB | 	rdlong	local02, objptr
28040     10 23 02 F6 | 	mov	local03, local02
28044     1C E4 85 F1 | 	sub	objptr, #28
28048     13 22 46 F7 | 	zerox	local03, #19
2804c     14 20 46 F0 | 	shr	local02, #20
28050     02 20 66 F0 | 	shl	local02, #2
28054     ED 20 02 F1 | 	add	local02, __methods__
28058     10 21 02 FB | 	rdlong	local02, local02
2805c     F2 14 02 F6 | 	mov	arg02, objptr
28060     F2 24 02 F6 | 	mov	local04, objptr
28064     11 E5 01 F6 | 	mov	objptr, local03
28068     2D 20 62 FD | 	call	local02
2806c     12 E5 01 F6 | 	mov	objptr, local04
28070                 | '     return (i < 0) ? 0 : 1;
28070     00 FA 55 F2 | 	cmps	result1, #0 wc
28074     00 1E 06 C6 |  if_b	mov	local01, #0
28078     01 1E 06 36 |  if_ae	mov	local01, #1
2807c     0F FB 01 F6 | 	mov	result1, local01
28080                 | LR__4250
28080     A7 F0 03 F6 | 	mov	ptra, fp
28084     B2 00 A0 FD | 	call	#popregs_
28088                 | __struct__s_vfs_file_t_putchar_ret
28088     2D 00 64 FD | 	ret
2808c                 | 
2808c                 | __struct__s_vfs_file_t_getchar
2808c     03 4A 05 F6 | 	mov	COUNT_, #3
28090     A8 00 A0 FD | 	call	#pushregs_
28094     20 E4 05 F1 | 	add	objptr, #32
28098     F2 12 0A FB | 	rdlong	arg01, objptr wz
2809c     20 E4 85 F1 | 	sub	objptr, #32
280a0     01 FA 65 A6 |  if_e	neg	result1, #1
280a4     38 00 90 AD |  if_e	jmp	#LR__4260
280a8                 | '     return getcf(__this);
280a8     20 E4 05 F1 | 	add	objptr, #32
280ac     F2 1E 02 FB | 	rdlong	local01, objptr
280b0     0F 21 02 F6 | 	mov	local02, local01
280b4     20 E4 85 F1 | 	sub	objptr, #32
280b8     13 20 46 F7 | 	zerox	local02, #19
280bc     14 1E 46 F0 | 	shr	local01, #20
280c0     02 1E 66 F0 | 	shl	local01, #2
280c4     ED 1E 02 F1 | 	add	local01, __methods__
280c8     0F 1F 02 FB | 	rdlong	local01, local01
280cc     F2 12 02 F6 | 	mov	arg01, objptr
280d0     F2 22 02 F6 | 	mov	local03, objptr
280d4     10 E5 01 F6 | 	mov	objptr, local02
280d8     2D 1E 62 FD | 	call	local01
280dc     11 E5 01 F6 | 	mov	objptr, local03
280e0                 | LR__4260
280e0     A7 F0 03 F6 | 	mov	ptra, fp
280e4     B2 00 A0 FD | 	call	#popregs_
280e8                 | __struct__s_vfs_file_t_getchar_ret
280e8     2D 00 64 FD | 	ret
280ec                 | 
280ec                 | __struct___bas_wrap_sender_tx
280ec     03 4A 05 F6 | 	mov	COUNT_, #3
280f0     A8 00 A0 FD | 	call	#pushregs_
280f4     F2 1E 02 FB | 	rdlong	local01, objptr
280f8     0F 21 02 F6 | 	mov	local02, local01
280fc     13 1E 46 F7 | 	zerox	local01, #19
28100     14 20 46 F0 | 	shr	local02, #20
28104     02 20 66 F0 | 	shl	local02, #2
28108     ED 20 02 F1 | 	add	local02, __methods__
2810c     10 21 02 FB | 	rdlong	local02, local02
28110     F2 22 02 F6 | 	mov	local03, objptr
28114     0F E5 01 F6 | 	mov	objptr, local01
28118     2D 20 62 FD | 	call	local02
2811c     11 E5 01 F6 | 	mov	objptr, local03
28120     01 FA 05 F6 | 	mov	result1, #1
28124     A7 F0 03 F6 | 	mov	ptra, fp
28128     B2 00 A0 FD | 	call	#popregs_
2812c                 | __struct___bas_wrap_sender_tx_ret
2812c     2D 00 64 FD | 	ret
28130                 | 
28130                 | __struct___bas_wrap_sender_rx
28130     03 4A 05 F6 | 	mov	COUNT_, #3
28134     A8 00 A0 FD | 	call	#pushregs_
28138     04 E4 05 F1 | 	add	objptr, #4
2813c     F2 1E 02 FB | 	rdlong	local01, objptr
28140     0F 21 02 F6 | 	mov	local02, local01
28144     04 E4 85 F1 | 	sub	objptr, #4
28148     13 20 46 F7 | 	zerox	local02, #19
2814c     14 1E 46 F0 | 	shr	local01, #20
28150     02 1E 66 F0 | 	shl	local01, #2
28154     ED 1E 02 F1 | 	add	local01, __methods__
28158     0F 1F 02 FB | 	rdlong	local01, local01
2815c     F2 22 02 F6 | 	mov	local03, objptr
28160     10 E5 01 F6 | 	mov	objptr, local02
28164     2D 1E 62 FD | 	call	local01
28168     11 E5 01 F6 | 	mov	objptr, local03
2816c     A7 F0 03 F6 | 	mov	ptra, fp
28170     B2 00 A0 FD | 	call	#popregs_
28174                 | __struct___bas_wrap_sender_rx_ret
28174     2D 00 64 FD | 	ret
28178                 | 
28178                 | __struct___bas_wrap_sender_close
28178     03 4A 05 F6 | 	mov	COUNT_, #3
2817c     A8 00 A0 FD | 	call	#pushregs_
28180     08 E4 05 F1 | 	add	objptr, #8
28184     F2 1E 02 FB | 	rdlong	local01, objptr
28188     0F 21 02 F6 | 	mov	local02, local01
2818c     08 E4 85 F1 | 	sub	objptr, #8
28190     13 20 46 F7 | 	zerox	local02, #19
28194     14 1E 46 F0 | 	shr	local01, #20
28198     02 1E 66 F0 | 	shl	local01, #2
2819c     ED 1E 02 F1 | 	add	local01, __methods__
281a0     0F 1F 02 FB | 	rdlong	local01, local01
281a4     F2 22 02 F6 | 	mov	local03, objptr
281a8     10 E5 01 F6 | 	mov	objptr, local02
281ac     2D 1E 62 FD | 	call	local01
281b0     11 E5 01 F6 | 	mov	objptr, local03
281b4     A7 F0 03 F6 | 	mov	ptra, fp
281b8     B2 00 A0 FD | 	call	#popregs_
281bc                 | __struct___bas_wrap_sender_close_ret
281bc     2D 00 64 FD | 	ret
281c0                 | 
281c0                 | LR__4270
281c0     2F          | 	byte	"/"
281c1     00          | 	byte	0
281c2                 | LR__4271
281c2     69 6E 66    | 	byte	"inf"
281c5     00          | 	byte	0
281c6                 | LR__4272
281c6     6E 61 6E    | 	byte	"nan"
281c9     00          | 	byte	0
281ca                 | LR__4273
281ca                 | 	byte	
281ca     00          | 	byte	0
281cb                 | LR__4274
281cb                 | 	byte	
281cb     00          | 	byte	0
281cc                 | LR__4275
281cc                 | 	byte	
281cc     00          | 	byte	0
281cd                 | LR__4276
281cd                 | 	byte	
281cd     00          | 	byte	0
281ce                 | LR__4277
281ce                 | 	byte	
281ce     00          | 	byte	0
281cf                 | LR__4278
281cf                 | 	byte	
281cf     00          | 	byte	0
281d0                 | LR__4279
281d0                 | 	byte	
281d0     00          | 	byte	0
281d1                 | LR__4280
281d1                 | 	byte	
281d1     00          | 	byte	0
281d2                 | LR__4281
281d2     00          | 	byte	0
281d3     00          | 	byte	0
281d4                 | LR__4282
281d4     00          | 	byte	0
281d5     00          | 	byte	0
281d6                 | LR__4283
281d6     00          | 	byte	0
281d7     00          | 	byte	0
281d8                 | LR__4284
281d8     20 21 21 21 
281dc     20 63 6F 72 
281e0     72 75 70 74 
281e4     65 64 20 68 
281e8     65 61 70 3F 
281ec     3F 3F 20 21 
281f0     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
281f3     00          | 	byte	0
281f4                 | LR__4285
281f4     20 21 21 21 
281f8     20 6F 75 74 
281fc     20 6F 66 20 
28200     68 65 61 70 
28204     20 6D 65 6D 
28208     6F 72 79 20 
2820c     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
28210     00          | 	byte	0
28211                 | LR__4286
28211     20 21 21 21 
28215     20 63 6F 72 
28219     72 75 70 74 
2821d     65 64 20 68 
28221     65 61 70 20 
28225     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
28229     00          | 	byte	0
2822a                 | LR__4287
2822a     00          | 	byte	0
2822b     00          | 	byte	0
2822c                 | LR__4288
2822c     2E          | 	byte	"."
2822d     00          | 	byte	0
2822e                 | LR__4289
2822e     00          | 	byte	0
2822f     00          | 	byte	0
28230                 | LR__4290
28230     00          | 	byte	0
28231     00          | 	byte	0
28232                 | LR__4291
28232     00          | 	byte	0
28233     00          | 	byte	0
28234                 | LR__4292
28234     2A 3A 3C 3E 
28238     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
2823c     00          | 	byte	0
2823d                 | LR__4293
2823d     2B 2C 3B 3D 
28241     5B 5D       | 	byte	"+,;=[]"
28243     00          | 	byte	0
28244                 | LR__4294
28244     46 41 54 33 
28248     32 20 20 20 | 	byte	"FAT32   "
2824c     00          | 	byte	0
2824d                 | LR__4295
2824d     54 5A       | 	byte	"TZ"
2824f     00          | 	byte	0
28250                 | LR__4296
28250     00          | 	byte	0
28251     00          | 	byte	0
28252                 | LR__4297
28252                 | 	byte	
28252     00          | 	byte	0
28253                 | LR__4298
28253                 | 	byte	
28253     00          | 	byte	0
28254                 | LR__4299
28254     22          | 	byte	34
28255     00          | 	byte	0
28256                 | LR__4300
28256     22          | 	byte	34
28257     00          | 	byte	0
28258                 | LR__4301
28258     3A          | 	byte	":"
28259     00          | 	byte	0
2825a                 | LR__4302
2825a                 | 	byte	
2825a     00          | 	byte	0
2825b                 | LR__4303
2825b                 | 	byte	
2825b     00          | 	byte	0
2825c                 | LR__4304
2825c                 | 	byte	
2825c     00          | 	byte	0
2825d                 | LR__4305
2825d                 | 	byte	
2825d     00          | 	byte	0
2825e                 | LR__4306
2825e                 | 	byte	
2825e     00          | 	byte	0
2825f                 | LR__4307
2825f                 | 	byte	
2825f     00          | 	byte	0
28260                 | LR__4308
28260                 | 	byte	
28260     00          | 	byte	0
28261                 | LR__4309
28261     22          | 	byte	34
28262     00          | 	byte	0
28263                 | LR__4310
28263     22          | 	byte	34
28264     00          | 	byte	0
28265                 | LR__4311
28265     22          | 	byte	34
28266     00          | 	byte	0
28267                 | LR__4312
28267     22          | 	byte	34
28268     00          | 	byte	0
28269                 | LR__4313
28269     22          | 	byte	34
2826a     00          | 	byte	0
2826b                 | LR__4314
2826b     3E          | 	byte	">"
2826c     00          | 	byte	0
2826d                 | LR__4315
2826d     3E          | 	byte	">"
2826e     00          | 	byte	0
2826f                 | LR__4316
2826f     2B          | 	byte	"+"
28270     00          | 	byte	0
28271                 | LR__4317
28271     2D          | 	byte	"-"
28272     00          | 	byte	0
28273                 | LR__4318
28273     2A          | 	byte	"*"
28274     00          | 	byte	0
28275                 | LR__4319
28275     2F          | 	byte	"/"
28276     00          | 	byte	0
28277                 | LR__4320
28277     5E          | 	byte	"^"
28278     00          | 	byte	0
28279                 | LR__4321
28279     3D          | 	byte	"="
2827a     00          | 	byte	0
2827b                 | LR__4322
2827b     2B          | 	byte	"+"
2827c     00          | 	byte	0
2827d                 | LR__4323
2827d     2B          | 	byte	"+"
2827e     00          | 	byte	0
2827f                 | LR__4324
2827f     2D          | 	byte	"-"
28280     00          | 	byte	0
28281                 | LR__4325
28281     2D          | 	byte	"-"
28282     00          | 	byte	0
28283                 | LR__4326
28283     3C          | 	byte	"<"
28284     00          | 	byte	0
28285                 | LR__4327
28285     3E          | 	byte	">"
28286     00          | 	byte	0
28287                 | LR__4328
28287     22          | 	byte	34
28288     00          | 	byte	0
28289                 | LR__4329
28289     22          | 	byte	34
2828a     00          | 	byte	0
2828b                 | LR__4330
2828b     2E          | 	byte	"."
2828c     00          | 	byte	0
2828d                 | LR__4331
2828d     3F          | 	byte	"?"
2828e     00          | 	byte	0
2828f                 | LR__4332
2828f     3F          | 	byte	"?"
28290     00          | 	byte	0
28291                 | LR__4333
28291     6D 6F 75 73 
28295     65          | 	byte	"mouse"
28296     00          | 	byte	0
28297                 | LR__4334
28297     63 75 72 73 
2829b     6F 72       | 	byte	"cursor"
2829d     00          | 	byte	0
2829e                 | LR__4335
2829e     63 6C 69 63 
282a2     6B          | 	byte	"click"
282a3     00          | 	byte	0
282a4                 | LR__4336
282a4     6F 6E       | 	byte	"on"
282a6     00          | 	byte	0
282a7                 | LR__4337
282a7     31          | 	byte	"1"
282a8     00          | 	byte	0
282a9                 | LR__4338
282a9     6F 66 66    | 	byte	"off"
282ac     00          | 	byte	0
282ad                 | LR__4339
282ad     30          | 	byte	"0"
282ae     00          | 	byte	0
282af                 | LR__4340
282af     6D 6F 64 65 | 	byte	"mode"
282b3     00          | 	byte	0
282b4                 | LR__4341
282b4     6D 2E       | 	byte	"m."
282b6     00          | 	byte	0
282b7                 | LR__4342
282b7     61 74 61 72 
282bb     69          | 	byte	"atari"
282bc     00          | 	byte	0
282bd                 | LR__4343
282bd     30          | 	byte	"0"
282be     00          | 	byte	0
282bf                 | LR__4344
282bf     70 63 5F 61 
282c3     6D 62 65 72 | 	byte	"pc_amber"
282c7     00          | 	byte	0
282c8                 | LR__4345
282c8     31          | 	byte	"1"
282c9     00          | 	byte	0
282ca                 | LR__4346
282ca     70 63 5F 67 
282ce     72 65 65 6E | 	byte	"pc_green"
282d2     00          | 	byte	0
282d3                 | LR__4347
282d3     32          | 	byte	"2"
282d4     00          | 	byte	0
282d5                 | LR__4348
282d5     70 63 5F 77 
282d9     68 69 74 65 | 	byte	"pc_white"
282dd     00          | 	byte	0
282de                 | LR__4349
282de     33          | 	byte	"3"
282df     00          | 	byte	0
282e0                 | LR__4350
282e0     73 74       | 	byte	"st"
282e2     00          | 	byte	0
282e3                 | LR__4351
282e3     34          | 	byte	"4"
282e4     00          | 	byte	0
282e5                 | LR__4352
282e5                 | 	byte	
282e5     00          | 	byte	0
282e6                 | LR__4353
282e6     6C 6F 61 64 | 	byte	"load"
282ea     00          | 	byte	0
282eb                 | LR__4354
282eb     73 61 76 65 | 	byte	"save"
282ef     00          | 	byte	0
282f0                 | LR__4355
282f0     62 72 75 6E | 	byte	"brun"
282f4     00          | 	byte	0
282f5                 | LR__4356
282f5     6C 6F 2E    | 	byte	"lo."
282f8     00          | 	byte	0
282f9                 | LR__4357
282f9     73 2E       | 	byte	"s."
282fb     00          | 	byte	0
282fc                 | LR__4358
282fc     62 72 2E    | 	byte	"br."
282ff     00          | 	byte	0
28300                 | LR__4359
28300                 | 	byte	
28300     00          | 	byte	0
28301                 | LR__4360
28301                 | 	byte	
28301     00          | 	byte	0
28302                 | LR__4361
28302                 | 	byte	
28302     00          | 	byte	0
28303                 | LR__4362
28303                 | 	byte	
28303     00          | 	byte	0
28304                 | LR__4363
28304     20 55 73 65 
28308     72 20 66 75 
2830c     6E 63 74 69 
28310     6F 6E 73 20 
28314     61 6E 64 20 
28318     61 72 72 61 
2831c     79 73 20 6E 
28320     6F 74 20 79 
28324     65 74 20 69 
28328     6D 70 6C 65 
2832c     6D 65 6E 74 
28330     65 64       | 	byte	" User functions and arrays not yet implemented"
28332     00          | 	byte	0
28333                 | LR__4364
28333                 | 	byte	
28333     00          | 	byte	0
28334                 | LR__4365
28334                 | 	byte	
28334     00          | 	byte	0
28335                 | LR__4366
28335     52 65 61 64 
28339     79          | 	byte	"Ready"
2833a     00          | 	byte	0
2833b                 | LR__4367
2833b     2B          | 	byte	"+"
2833c     00          | 	byte	0
2833d                 | LR__4368
2833d     2D          | 	byte	"-"
2833e     00          | 	byte	0
2833f                 | LR__4369
2833f     6F 72       | 	byte	"or"
28341     00          | 	byte	0
28342                 | LR__4370
28342     78 6F 72    | 	byte	"xor"
28345     00          | 	byte	0
28346                 | LR__4371
28346     2A          | 	byte	"*"
28347     00          | 	byte	0
28348                 | LR__4372
28348     2F          | 	byte	"/"
28349     00          | 	byte	0
2834a                 | LR__4373
2834a     61 6E 64    | 	byte	"and"
2834d     00          | 	byte	0
2834e                 | LR__4374
2834e     64 69 76    | 	byte	"div"
28351     00          | 	byte	0
28352                 | LR__4375
28352     6D 6F 64    | 	byte	"mod"
28355     00          | 	byte	0
28356                 | LR__4376
28356     73 68 6C    | 	byte	"shl"
28359     00          | 	byte	0
2835a                 | LR__4377
2835a     73 68 72    | 	byte	"shr"
2835d     00          | 	byte	0
2835e                 | LR__4378
2835e     5E          | 	byte	"^"
2835f     00          | 	byte	0
28360                 | LR__4379
28360     6E 6F 74    | 	byte	"not"
28363     00          | 	byte	0
28364                 | LR__4380
28364     40          | 	byte	"@"
28365     00          | 	byte	0
28366                 | LR__4381
28366     3D          | 	byte	"="
28367     00          | 	byte	0
28368                 | LR__4382
28368     3E 3D       | 	byte	">="
2836a     00          | 	byte	0
2836b                 | LR__4383
2836b     3C 3D       | 	byte	"<="
2836d     00          | 	byte	0
2836e                 | LR__4384
2836e     3C          | 	byte	"<"
2836f     00          | 	byte	0
28370                 | LR__4385
28370     3E          | 	byte	">"
28371     00          | 	byte	0
28372                 | LR__4386
28372     3C 3E       | 	byte	"<>"
28374     00          | 	byte	0
28375                 | LR__4387
28375     2B 2B       | 	byte	"++"
28377     00          | 	byte	0
28378                 | LR__4388
28378     2D 2D       | 	byte	"--"
2837a     00          | 	byte	0
2837b                 | LR__4389
2837b     2B          | 	byte	"+"
2837c     00          | 	byte	0
2837d                 | LR__4390
2837d     2D          | 	byte	"-"
2837e     00          | 	byte	0
2837f                 | LR__4391
2837f     3D          | 	byte	"="
28380     00          | 	byte	0
28381                 | LR__4392
28381     2C          | 	byte	","
28382     00          | 	byte	0
28383                 | LR__4393
28383     2A          | 	byte	"*"
28384     00          | 	byte	0
28385                 | LR__4394
28385     2F          | 	byte	"/"
28386     00          | 	byte	0
28387                 | LR__4395
28387     3B          | 	byte	";"
28388     00          | 	byte	0
28389                 | LR__4396
28389     22          | 	byte	34
2838a     00          | 	byte	0
2838b                 | LR__4397
2838b     5E          | 	byte	"^"
2838c     00          | 	byte	0
2838d                 | LR__4398
2838d     29          | 	byte	")"
2838e     00          | 	byte	0
2838f                 | LR__4399
2838f     28          | 	byte	"("
28390     00          | 	byte	0
28391                 | LR__4400
28391     3A          | 	byte	":"
28392     00          | 	byte	0
28393                 | LR__4401
28393     20          | 	byte	" "
28394     00          | 	byte	0
28395                 | LR__4402
28395     3E          | 	byte	">"
28396     00          | 	byte	0
28397                 | LR__4403
28397     3C          | 	byte	"<"
28398     00          | 	byte	0
28399                 | LR__4404
28399     3D          | 	byte	"="
2839a     00          | 	byte	0
2839b                 | LR__4405
2839b     62 65 65 70 | 	byte	"beep"
2839f     00          | 	byte	0
283a0                 | LR__4406
283a0     62 2E       | 	byte	"b."
283a2     00          | 	byte	0
283a3                 | LR__4407
283a3     62 6F 78    | 	byte	"box"
283a6     00          | 	byte	0
283a7                 | LR__4408
283a7     62 72 75 6E | 	byte	"brun"
283ab     00          | 	byte	0
283ac                 | LR__4409
283ac     62 72 2E    | 	byte	"br."
283af     00          | 	byte	0
283b0                 | LR__4410
283b0     63 69 72 63 
283b4     6C 65       | 	byte	"circle"
283b6     00          | 	byte	0
283b7                 | LR__4411
283b7     63 69 2E    | 	byte	"ci."
283ba     00          | 	byte	0
283bb                 | LR__4412
283bb     63 6C 69 63 
283bf     6B          | 	byte	"click"
283c0     00          | 	byte	0
283c1                 | LR__4413
283c1     63 6C 73    | 	byte	"cls"
283c4     00          | 	byte	0
283c5                 | LR__4414
283c5     63 6F 6C 6F 
283c9     72          | 	byte	"color"
283ca     00          | 	byte	0
283cb                 | LR__4415
283cb     63 2E       | 	byte	"c."
283cd     00          | 	byte	0
283ce                 | LR__4416
283ce     63 73 61 76 
283d2     65          | 	byte	"csave"
283d3     00          | 	byte	0
283d4                 | LR__4417
283d4     63 73 2E    | 	byte	"cs."
283d7     00          | 	byte	0
283d8                 | LR__4418
283d8     63 75 72 73 
283dc     6F 72       | 	byte	"cursor"
283de     00          | 	byte	0
283df                 | LR__4419
283df     64 65 66 73 
283e3     6E 64       | 	byte	"defsnd"
283e5     00          | 	byte	0
283e6                 | LR__4420
283e6     64 65 66 65 
283ea     6E 76       | 	byte	"defenv"
283ec     00          | 	byte	0
283ed                 | LR__4421
283ed     64 65 66 73 
283f1     70 72 69 74 
283f5     65          | 	byte	"defsprite"
283f6     00          | 	byte	0
283f7                 | LR__4422
283f7     64 73 2E    | 	byte	"ds."
283fa     00          | 	byte	0
283fb                 | LR__4423
283fb     64 65 67    | 	byte	"deg"
283fe     00          | 	byte	0
283ff                 | LR__4424
283ff     64 69 6D    | 	byte	"dim"
28402     00          | 	byte	0
28403                 | LR__4425
28403     64 69 72    | 	byte	"dir"
28406     00          | 	byte	0
28407                 | LR__4426
28407     64 72 61 77 | 	byte	"draw"
2840b     00          | 	byte	0
2840c                 | LR__4427
2840c     64 72 2E    | 	byte	"dr."
2840f     00          | 	byte	0
28410                 | LR__4428
28410     65 6C 73 65 | 	byte	"else"
28414     00          | 	byte	0
28415                 | LR__4429
28415     66 63 69 72 
28419     63 6C 65    | 	byte	"fcircle"
2841c     00          | 	byte	0
2841d                 | LR__4430
2841d     66 63 2E    | 	byte	"fc."
28420     00          | 	byte	0
28421                 | LR__4431
28421     66 69 6C 6C | 	byte	"fill"
28425     00          | 	byte	0
28426                 | LR__4432
28426     66 69 2E    | 	byte	"fi."
28429     00          | 	byte	0
2842a                 | LR__4433
2842a     66 6F 6E 74 | 	byte	"font"
2842e     00          | 	byte	0
2842f                 | LR__4434
2842f     66 6F 72    | 	byte	"for"
28432     00          | 	byte	0
28433                 | LR__4435
28433     66 2E       | 	byte	"f."
28435     00          | 	byte	0
28436                 | LR__4436
28436     66 72 61 6D 
2843a     65          | 	byte	"frame"
2843b     00          | 	byte	0
2843c                 | LR__4437
2843c     66 72 2E    | 	byte	"fr."
2843f     00          | 	byte	0
28440                 | LR__4438
28440     67 6F 74 6F | 	byte	"goto"
28444     00          | 	byte	0
28445                 | LR__4439
28445     67 2E       | 	byte	"g."
28447     00          | 	byte	0
28448                 | LR__4440
28448     69 66       | 	byte	"if"
2844a     00          | 	byte	0
2844b                 | LR__4441
2844b     69 6E 6B    | 	byte	"ink"
2844e     00          | 	byte	0
2844f                 | LR__4442
2844f     69 2E       | 	byte	"i."
28451     00          | 	byte	0
28452                 | LR__4443
28452     69 6E 74    | 	byte	"int"
28455     00          | 	byte	0
28456                 | LR__4444
28456     6C 69 73 74 | 	byte	"list"
2845a     00          | 	byte	0
2845b                 | LR__4445
2845b     6C 2E       | 	byte	"l."
2845d     00          | 	byte	0
2845e                 | LR__4446
2845e     6C 6F 61 64 | 	byte	"load"
28462     00          | 	byte	0
28463                 | LR__4447
28463     6C 6F 2E    | 	byte	"lo."
28466     00          | 	byte	0
28467                 | LR__4448
28467     6D 6F 64 65 | 	byte	"mode"
2846b     00          | 	byte	0
2846c                 | LR__4449
2846c     6D 2E       | 	byte	"m."
2846e     00          | 	byte	0
2846f                 | LR__4450
2846f     6D 6F 75 73 
28473     65          | 	byte	"mouse"
28474     00          | 	byte	0
28475                 | LR__4451
28475     6E 65 77    | 	byte	"new"
28478     00          | 	byte	0
28479                 | LR__4452
28479     6E 65 78 74 | 	byte	"next"
2847d     00          | 	byte	0
2847e                 | LR__4453
2847e     6E 2E       | 	byte	"n."
28480     00          | 	byte	0
28481                 | LR__4454
28481     70 61 70 65 
28485     72          | 	byte	"paper"
28486     00          | 	byte	0
28487                 | LR__4455
28487     70 2E       | 	byte	"p."
28489     00          | 	byte	0
2848a                 | LR__4456
2848a     70 69 6E 66 
2848e     6C 6F 61 74 | 	byte	"pinfloat"
28492     00          | 	byte	0
28493                 | LR__4457
28493     70 69 6E 68 
28497     69          | 	byte	"pinhi"
28498     00          | 	byte	0
28499                 | LR__4458
28499     70 69 6E 6C 
2849d     6F          | 	byte	"pinlo"
2849e     00          | 	byte	0
2849f                 | LR__4459
2849f     70 69 6E 73 
284a3     74 61 72 74 | 	byte	"pinstart"
284a7     00          | 	byte	0
284a8                 | LR__4460
284a8     70 69 6E 74 
284ac     6F 67 67 6C 
284b0     65          | 	byte	"pintoggle"
284b1     00          | 	byte	0
284b2                 | LR__4461
284b2     70 69 6E 77 
284b6     72 69 74 65 | 	byte	"pinwrite"
284ba     00          | 	byte	0
284bb                 | LR__4462
284bb     70 6C 61 79 | 	byte	"play"
284bf     00          | 	byte	0
284c0                 | LR__4463
284c0     70 6C 6F 74 | 	byte	"plot"
284c4     00          | 	byte	0
284c5                 | LR__4464
284c5     70 6C 2E    | 	byte	"pl."
284c8     00          | 	byte	0
284c9                 | LR__4465
284c9     70 6F 73 69 
284cd     74 69 6F 6E | 	byte	"position"
284d1     00          | 	byte	0
284d2                 | LR__4466
284d2     70 6F 73 2E | 	byte	"pos."
284d6     00          | 	byte	0
284d7                 | LR__4467
284d7     70 72 69 6E 
284db     74          | 	byte	"print"
284dc     00          | 	byte	0
284dd                 | LR__4468
284dd     3F          | 	byte	"?"
284de     00          | 	byte	0
284df                 | LR__4469
284df     72 61 64    | 	byte	"rad"
284e2     00          | 	byte	0
284e3                 | LR__4470
284e3     72 75 6E    | 	byte	"run"
284e6     00          | 	byte	0
284e7                 | LR__4471
284e7     73 61 76 65 | 	byte	"save"
284eb     00          | 	byte	0
284ec                 | LR__4472
284ec     73 2E       | 	byte	"s."
284ee     00          | 	byte	0
284ef                 | LR__4473
284ef     73 70 72 69 
284f3     74 65       | 	byte	"sprite"
284f5     00          | 	byte	0
284f6                 | LR__4474
284f6     73 70 2E    | 	byte	"sp."
284f9     00          | 	byte	0
284fa                 | LR__4475
284fa     74 68 65 6E | 	byte	"then"
284fe     00          | 	byte	0
284ff                 | LR__4476
284ff     77 61 69 74 
28503     6D 73       | 	byte	"waitms"
28505     00          | 	byte	0
28506                 | LR__4477
28506     77 61 69 74 
2850a     63 6C 6F 63 
2850e     6B          | 	byte	"waitclock"
2850f     00          | 	byte	0
28510                 | LR__4478
28510     77 63 2E    | 	byte	"wc."
28513     00          | 	byte	0
28514                 | LR__4479
28514     77 61 69 74 
28518     76 62 6C    | 	byte	"waitvbl"
2851b     00          | 	byte	0
2851c                 | LR__4480
2851c     77 76 2E    | 	byte	"wv."
2851f     00          | 	byte	0
28520                 | LR__4481
28520     77 78 70 69 
28524     6E          | 	byte	"wxpin"
28525     00          | 	byte	0
28526                 | LR__4482
28526     77 79 70 69 
2852a     6E          | 	byte	"wypin"
2852b     00          | 	byte	0
2852c                 | LR__4483
2852c     61 63 6F 73 | 	byte	"acos"
28530     00          | 	byte	0
28531                 | LR__4484
28531     61 73 69 6E | 	byte	"asin"
28535     00          | 	byte	0
28536                 | LR__4485
28536     61 74 6E    | 	byte	"atn"
28539     00          | 	byte	0
2853a                 | LR__4486
2853a     63 6F 73    | 	byte	"cos"
2853d     00          | 	byte	0
2853e                 | LR__4487
2853e     67 65 74 70 
28542     69 78 65 6C | 	byte	"getpixel"
28546     00          | 	byte	0
28547                 | LR__4488
28547     67 65 2E    | 	byte	"ge."
2854a     00          | 	byte	0
2854b                 | LR__4489
2854b     67 65 74 74 
2854f     69 6D 65    | 	byte	"gettime"
28552     00          | 	byte	0
28553                 | LR__4490
28553     6D 6F 75 73 
28557     65 6B       | 	byte	"mousek"
28559     00          | 	byte	0
2855a                 | LR__4491
2855a     6D 6F 75 73 
2855e     65 77       | 	byte	"mousew"
28560     00          | 	byte	0
28561                 | LR__4492
28561     6D 6F 75 73 
28565     65 78       | 	byte	"mousex"
28567     00          | 	byte	0
28568                 | LR__4493
28568     6D 6F 75 73 
2856c     65 79       | 	byte	"mousey"
2856e     00          | 	byte	0
2856f                 | LR__4494
2856f     70 69 6E 72 
28573     65 61 64    | 	byte	"pinread"
28576     00          | 	byte	0
28577                 | LR__4495
28577     72 64 70 69 
2857b     6E          | 	byte	"rdpin"
2857c     00          | 	byte	0
2857d                 | LR__4496
2857d     72 71 70 69 
28581     6E          | 	byte	"rqpin"
28582     00          | 	byte	0
28583                 | LR__4497
28583     72 6E 64    | 	byte	"rnd"
28586     00          | 	byte	0
28587                 | LR__4498
28587     73 69 6E    | 	byte	"sin"
2858a     00          | 	byte	0
2858b                 | LR__4499
2858b     73 71 72    | 	byte	"sqr"
2858e     00          | 	byte	0
2858f                 | LR__4500
2858f     73 74 69 63 
28593     6B          | 	byte	"stick"
28594     00          | 	byte	0
28595                 | LR__4501
28595     73 74 72 69 
28599     67          | 	byte	"strig"
2859a     00          | 	byte	0
2859b                 | LR__4502
2859b     74 61 6E    | 	byte	"tan"
2859e     00          | 	byte	0
2859f                 | LR__4503
2859f     61          | 	byte	"a"
285a0     00          | 	byte	0
285a1                 | LR__4504
285a1     7A          | 	byte	"z"
285a2     00          | 	byte	0
285a3                 | LR__4505
285a3     5F          | 	byte	"_"
285a4     00          | 	byte	0
285a5                 | LR__4506
285a5     61          | 	byte	"a"
285a6     00          | 	byte	0
285a7                 | LR__4507
285a7     7A          | 	byte	"z"
285a8     00          | 	byte	0
285a9                 | LR__4508
285a9     30          | 	byte	"0"
285aa     00          | 	byte	0
285ab                 | LR__4509
285ab     39          | 	byte	"9"
285ac     00          | 	byte	0
285ad                 | LR__4510
285ad     5F          | 	byte	"_"
285ae     00          | 	byte	0
285af                 | LR__4511
285af     2E          | 	byte	"."
285b0     00          | 	byte	0
285b1                 | LR__4512
285b1     61          | 	byte	"a"
285b2     00          | 	byte	0
285b3                 | LR__4513
285b3     7A          | 	byte	"z"
285b4     00          | 	byte	0
285b5                 | LR__4514
285b5     30          | 	byte	"0"
285b6     00          | 	byte	0
285b7                 | LR__4515
285b7     39          | 	byte	"9"
285b8     00          | 	byte	0
285b9                 | LR__4516
285b9     5F          | 	byte	"_"
285ba     00          | 	byte	0
285bb                 | LR__4517
285bb     24          | 	byte	"$"
285bc     00          | 	byte	0
285bd                 | LR__4518
285bd     25          | 	byte	"%"
285be     00          | 	byte	0
285bf                 | LR__4519
285bf     21          | 	byte	"!"
285c0     00          | 	byte	0
285c1                 | LR__4520
285c1     30          | 	byte	"0"
285c2     00          | 	byte	0
285c3                 | LR__4521
285c3     39          | 	byte	"9"
285c4     00          | 	byte	0
285c5                 | LR__4522
285c5     2E          | 	byte	"."
285c6     00          | 	byte	0
285c7                 | LR__4523
285c7     24          | 	byte	"$"
285c8     00          | 	byte	0
285c9                 | LR__4524
285c9     25          | 	byte	"%"
285ca     00          | 	byte	0
285cb                 | LR__4525
285cb     2D          | 	byte	"-"
285cc     00          | 	byte	0
285cd                 | LR__4526
285cd     2E          | 	byte	"."
285ce     00          | 	byte	0
285cf                 | LR__4527
285cf     30          | 	byte	"0"
285d0     00          | 	byte	0
285d1                 | LR__4528
285d1     39          | 	byte	"9"
285d2     00          | 	byte	0
285d3                 | LR__4529
285d3     5F          | 	byte	"_"
285d4     00          | 	byte	0
285d5                 | LR__4530
285d5     2E          | 	byte	"."
285d6     00          | 	byte	0
285d7                 | LR__4531
285d7     45          | 	byte	"E"
285d8     00          | 	byte	0
285d9                 | LR__4532
285d9     65          | 	byte	"e"
285da     00          | 	byte	0
285db                 | LR__4533
285db     2D          | 	byte	"-"
285dc     00          | 	byte	0
285dd                 | LR__4534
285dd     2D          | 	byte	"-"
285de     00          | 	byte	0
285df                 | LR__4535
285df     65          | 	byte	"e"
285e0     00          | 	byte	0
285e1                 | LR__4536
285e1     2E          | 	byte	"."
285e2     00          | 	byte	0
285e3                 | LR__4537
285e3     45          | 	byte	"E"
285e4     00          | 	byte	0
285e5                 | LR__4538
285e5     65          | 	byte	"e"
285e6     00          | 	byte	0
285e7                 | LR__4539
285e7     30          | 	byte	"0"
285e8     00          | 	byte	0
285e9                 | LR__4540
285e9     39          | 	byte	"9"
285ea     00          | 	byte	0
285eb                 | LR__4541
285eb     24          | 	byte	"$"
285ec     00          | 	byte	0
285ed                 | LR__4542
285ed     25          | 	byte	"%"
285ee     00          | 	byte	0
285ef                 | LR__4543
285ef     2D          | 	byte	"-"
285f0     00          | 	byte	0
285f1                 | LR__4544
285f1     30          | 	byte	"0"
285f2     00          | 	byte	0
285f3                 | LR__4545
285f3     39          | 	byte	"9"
285f4     00          | 	byte	0
285f5                 | LR__4546
285f5     5F          | 	byte	"_"
285f6     00          | 	byte	0
285f7                 | LR__4547
285f7     30          | 	byte	"0"
285f8     00          | 	byte	0
285f9                 | LR__4548
285f9     39          | 	byte	"9"
285fa     00          | 	byte	0
285fb                 | LR__4549
285fb     5F          | 	byte	"_"
285fc     00          | 	byte	0
285fd                 | LR__4550
285fd     22          | 	byte	34
285fe     00          | 	byte	0
285ff                 | LR__4551
285ff     22          | 	byte	34
28600     00          | 	byte	0
28601                 | LR__4552
28601     28          | 	byte	"("
28602     00          | 	byte	0
28603                 | LR__4553
28603     61 73       | 	byte	"as"
28605     00          | 	byte	0
28606                 | LR__4554
28606     61 73       | 	byte	"as"
28608     00          | 	byte	0
28609                 | LR__4555
28609     2C          | 	byte	","
2860a     00          | 	byte	0
2860b                 | LR__4556
2860b     29          | 	byte	")"
2860c     00          | 	byte	0
2860d                 | LR__4557
2860d     29          | 	byte	")"
2860e     00          | 	byte	0
2860f                 | LR__4558
2860f     61 73       | 	byte	"as"
28611     00          | 	byte	0
28612                 | LR__4559
28612     62 79 74 65 | 	byte	"byte"
28616     00          | 	byte	0
28617                 | LR__4560
28617     75 62 79 74 
2861b     65          | 	byte	"ubyte"
2861c     00          | 	byte	0
2861d                 | LR__4561
2861d     73 68 6F 72 
28621     74          | 	byte	"short"
28622     00          | 	byte	0
28623                 | LR__4562
28623     75 73 68 6F 
28627     72 74       | 	byte	"ushort"
28629     00          | 	byte	0
2862a                 | LR__4563
2862a     6C 6F 6E 67 | 	byte	"long"
2862e     00          | 	byte	0
2862f                 | LR__4564
2862f     69 6E 74 65 
28633     67 65 72    | 	byte	"integer"
28636     00          | 	byte	0
28637                 | LR__4565
28637     75 6C 6F 6E 
2863b     67          | 	byte	"ulong"
2863c     00          | 	byte	0
2863d                 | LR__4566
2863d     69 6E 74 36 
28641     34          | 	byte	"int64"
28642     00          | 	byte	0
28643                 | LR__4567
28643     75 69 6E 74 
28647     36 34       | 	byte	"uint64"
28649     00          | 	byte	0
2864a                 | LR__4568
2864a     73 69 6E 67 
2864e     6C 65       | 	byte	"single"
28650     00          | 	byte	0
28651                 | LR__4569
28651     64 6F 75 62 
28655     6C 65       | 	byte	"double"
28657     00          | 	byte	0
28658                 | LR__4570
28658     73 74 72 69 
2865c     6E 67       | 	byte	"string"
2865e     00          | 	byte	0
2865f                 | LR__4571
2865f     74 6F       | 	byte	"to"
28661     00          | 	byte	0
28662                 | LR__4572
28662     73 74 65 70 | 	byte	"step"
28666     00          | 	byte	0
28667                 | LR__4573
28667     73 74 2E    | 	byte	"st."
2866a     00          | 	byte	0
2866b                 | LR__4574
2866b     57 65 20 68 
2866f     61 76 65 20 
28673     61 20 73 6C 
28677     6F 77 20 67 
2867b     6F 74 6F 2C 
2867f     20 74 6F 64 
28683     6F 20 20    | 	byte	"We have a slow goto, todo  "
28686     00          | 	byte	0
28687                 | LR__4575
28687     6E 6F 6E 61 
2868b     6D 65 2E 62 
2868f     61 73       | 	byte	"noname.bas"
28691     00          | 	byte	0
28692                 | LR__4576
28692                 | 	byte	
28692     00          | 	byte	0
28693                 | LR__4577
28693     6E 6F 6E 61 
28697     6D 65 2E 62 
2869b     61 73       | 	byte	"noname.bas"
2869d     00          | 	byte	0
2869e                 | LR__4578
2869e     2F          | 	byte	"/"
2869f     00          | 	byte	0
286a0                 | LR__4579
286a0                 | 	byte	
286a0     00          | 	byte	0
286a1                 | LR__4580
286a1                 | 	byte	
286a1     00          | 	byte	0
286a2                 | LR__4581
286a2     6E 6F 6E 61 
286a6     6D 65 2E 62 
286aa     61 73       | 	byte	"noname.bas"
286ac     00          | 	byte	0
286ad                 | LR__4582
286ad     2F          | 	byte	"/"
286ae     00          | 	byte	0
286af                 | LR__4583
286af     53 79 73 74 
286b3     65 6D 20 65 
286b7     72 72 6F 72 
286bb     20          | 	byte	"System error "
286bc     00          | 	byte	0
286bd                 | LR__4584
286bd     3A 20       | 	byte	": "
286bf     00          | 	byte	0
286c0                 | LR__4585
286c0     2F          | 	byte	"/"
286c1     00          | 	byte	0
286c2                 | LR__4586
286c2     30          | 	byte	"0"
286c3     00          | 	byte	0
286c4                 | LR__4587
286c4     39          | 	byte	"9"
286c5     00          | 	byte	0
286c6                 | LR__4588
286c6                 | 	byte	
286c6     00          | 	byte	0
286c7                 | LR__4589
286c7     53 74 6F 70 
286cb     70 65 64 20 
286cf     61 74 20 6C 
286d3     69 6E 65 20 | 	byte	"Stopped at line "
286d7     00          | 	byte	0
286d8                 | LR__4590
286d8                 | 	byte	
286d8     00          | 	byte	0
286d9                 | LR__4591
286d9                 | 	byte	
286d9     00          | 	byte	0
286da                 | LR__4592
286da     2F 73 64 2F 
286de     6D 65 64 69 
286e2     61 2F 68 2F | 	byte	"/sd/media/h/"
286e6     00          | 	byte	0
286e7                 | LR__4593
286e7     53 79 73 74 
286eb     65 6D 20 65 
286ef     72 72 6F 72 
286f3     20          | 	byte	"System error "
286f4     00          | 	byte	0
286f5                 | LR__4594
286f5     3A 20       | 	byte	": "
286f7     00          | 	byte	0
286f8                 | LR__4595
286f8                 | 	byte	
286f8     00          | 	byte	0
286f9                 | LR__4596
286f9                 | 	byte	
286f9     00          | 	byte	0
286fa                 | LR__4597
286fa     2F 73 64 2F 
286fe     6D 65 64 69 
28702     61 2F 73 2F | 	byte	"/sd/media/s/"
28706     00          | 	byte	0
28707                 | LR__4598
28707     53 79 73 74 
2870b     65 6D 20 65 
2870f     72 72 6F 72 
28713     20          | 	byte	"System error "
28714     00          | 	byte	0
28715                 | LR__4599
28715     3A 20       | 	byte	": "
28717     00          | 	byte	0
28718                 | LR__4600
28718     45 72 72 6F 
2871c     72 20       | 	byte	"Error "
2871e     00          | 	byte	0
2871f                 | LR__4601
2871f     3A 20       | 	byte	": "
28721     00          | 	byte	0
28722                 | LR__4602
28722                 | 	byte	
28722     00          | 	byte	0
28723                 | LR__4603
28723     72 6E 64 3A 
28727     20          | 	byte	"rnd: "
28728     00          | 	byte	0
28729                 | LR__4604
28729     72 6E 64 3A 
2872d     20          | 	byte	"rnd: "
2872e     00          | 	byte	0
2872f                 | LR__4605
2872f     73 69 6E 3A 
28733     20          | 	byte	"sin: "
28734     00          | 	byte	0
28735                 | LR__4606
28735     63 6F 73 3A 
28739     20          | 	byte	"cos: "
2873a     00          | 	byte	0
2873b                 | LR__4607
2873b     74 61 6E 3A 
2873f     20          | 	byte	"tan: "
28740     00          | 	byte	0
28741                 | LR__4608
28741     61 73 69 6E 
28745     3A 20       | 	byte	"asin: "
28747     00          | 	byte	0
28748                 | LR__4609
28748     61 63 6F 73 
2874c     3A 20       | 	byte	"acos: "
2874e     00          | 	byte	0
2874f                 | LR__4610
2874f     61 74 6E 3A 
28753     20          | 	byte	"atn: "
28754     00          | 	byte	0
28755                 | LR__4611
28755     73 71 72 3A 
28759     20          | 	byte	"sqr: "
2875a     00          | 	byte	0
2875b                 | LR__4612
2875b     73 74 69 63 
2875f     6B 3A 20    | 	byte	"stick: "
28762     00          | 	byte	0
28763                 | LR__4613
28763     73 74 72 69 
28767     67 3A 20    | 	byte	"strig: "
2876a     00          | 	byte	0
2876b                 | LR__4614
2876b     67 65 74 70 
2876f     69 78 65 6C 
28773     3A 20       | 	byte	"getpixel: "
28775     00          | 	byte	0
28776                 | LR__4615
28776                 | 	byte	
28776     00          | 	byte	0
28777                 | LR__4616
28777     2F 73 64 2F 
2877b     62 61 73    | 	byte	"/sd/bas"
2877e     00          | 	byte	0
2877f                 | LR__4617
2877f     57 6F 72 6B 
28783     69 6E 67 20 
28787     64 69 72 65 
2878b     63 74 6F 72 
2878f     79 3A 20    | 	byte	"Working directory: "
28792     00          | 	byte	0
28793                 | LR__4618
28793     2A          | 	byte	"*"
28794     00          | 	byte	0
28795                 | LR__4619
28795                 | 	byte	
28795     00          | 	byte	0
28796                 | LR__4620
28796     5B 64 69 72 
2879a     5D 20       | 	byte	"[dir] "
2879c     00          | 	byte	0
2879d                 | LR__4621
2879d     2A          | 	byte	"*"
2879e     00          | 	byte	0
2879f                 | LR__4622
2879f                 | 	byte	
2879f     00          | 	byte	0
287a0                 | LR__4623
287a0     2D 2D 2D 2D 
287a4     2D 6D 6F 72 
287a8     65 2C 20 70 
287ac     72 65 73 73 
287b0     20 61 6E 79 
287b4     20 6B 65 79 | 	byte	"-----more, press any key"
287b8     00          | 	byte	0
287b9                 | LR__4624
287b9     20 20 20 20 
      ...             
287d1     20 20 20 20 
287d5     20          | 	byte	"                             "
287d6     00          | 	byte	0
287d7                 | LR__4625
287d7     2F          | 	byte	"/"
287d8     00          | 	byte	0
287d9                 | LR__4626
287d9     2F 73 64 2F 
287dd     62 69 6E 2F | 	byte	"/sd/bin/"
287e1     00          | 	byte	0
287e2                 | LR__4627
287e2     53 79 73 74 
287e6     65 6D 20 65 
287ea     72 72 6F 72 
287ee     20          | 	byte	"System error "
287ef     00          | 	byte	0
287f0                 | LR__4628
287f0     3A 20       | 	byte	": "
287f2     00          | 	byte	0
287f3                 | LR__4629
287f3                 | 	byte	
287f3     00          | 	byte	0
287f4                 | LR__4630
287f4     45 78 70 65 
287f8     63 74 65 64 
287fc     20 6E 75 6D 
28800     62 65 72 2C 
28804     20 67 6F 74 
28808     20 73 6F 6D 
2880c     65 74 68 69 
28810     6E 67 20 65 
28814     6C 73 65 2E | 	byte	"Expected number, got something else."
28818     00          | 	byte	0
28819                 | LR__4631
28819     43 61 6E 6E 
2881d     6F 74 20 61 
28821     64 64 20 61 
28825     20 6E 75 6D 
28829     62 65 72 20 
2882d     74 6F 20 61 
28831     20 73 74 72 
28835     69 6E 67 2E | 	byte	"Cannot add a number to a string."
28839     00          | 	byte	0
2883a                 | LR__4632
2883a     43 61 6E 6E 
2883e     6F 74 20 73 
28842     75 62 73 74 
28846     72 61 63 74 
2884a     20 73 74 72 
2884e     69 6E 67 73 
28852     2E          | 	byte	"Cannot substract strings."
28853     00          | 	byte	0
28854                 | LR__4633
28854     55 6E 6B 6E 
28858     6F 77 6E 20 
2885c     65 72 72 6F 
28860     72 20 77 68 
28864     69 6C 65 20 
28868     61 64 64 69 
2886c     6E 67 2E    | 	byte	"Unknown error while adding."
2886f     00          | 	byte	0
28870                 | LR__4634
28870     55 6E 6B 6E 
28874     6F 77 6E 20 
28878     65 72 72 6F 
2887c     72 20 77 68 
28880     69 6C 65 20 
28884     73 75 62 73 
28888     74 72 61 63 
2888c     74 69 6E 67 
28890     2E          | 	byte	"Unknown error while substracting."
28891     00          | 	byte	0
28892                 | LR__4635
28892     43 61 6E 6E 
28896     6F 74 20 64 
2889a     6F 20 6C 6F 
2889e     67 69 63 20 
288a2     6F 70 65 72 
288a6     61 74 69 6F 
288aa     6E 20 6F 6E 
288ae     20 73 74 72 
288b2     69 6E 67 20 
288b6     6F 72 20 66 
288ba     6C 6F 61 74 
288be     2E          | 	byte	"Cannot do logic operation on string or float."
288bf     00          | 	byte	0
288c0                 | LR__4636
288c0     55 6E 6B 6E 
288c4     6F 77 6E 20 
288c8     65 72 72 6F 
288cc     72 20 77 68 
288d0     69 6C 65 20 
288d4     64 6F 69 6E 
288d8     67 20 6C 6F 
288dc     67 69 63 20 
288e0     6F 70 65 72 
288e4     61 74 69 6F 
288e8     6E 2E       | 	byte	"Unknown error while doing logic operation."
288ea     00          | 	byte	0
288eb                 | LR__4637
288eb     43 61 6E 6E 
288ef     6F 74 20 6D 
288f3     75 6C 74 69 
288f7     70 6C 79 20 
288fb     73 74 72 69 
288ff     6E 67 73 2E | 	byte	"Cannot multiply strings."
28903     00          | 	byte	0
28904                 | LR__4638
28904     55 6E 6B 6E 
28908     6F 77 6E 20 
2890c     65 72 72 6F 
28910     72 20 77 68 
28914     69 6C 65 20 
28918     6D 75 6C 74 
2891c     69 70 6C 79 
28920     69 6E 67 2E | 	byte	"Unknown error while multiplying."
28924     00          | 	byte	0
28925                 | LR__4639
28925     43 61 6E 6E 
28929     6F 74 20 64 
2892d     69 76 69 64 
28931     65 20 73 74 
28935     72 69 6E 67 
28939     73 2E       | 	byte	"Cannot divide strings."
2893b     00          | 	byte	0
2893c                 | LR__4640
2893c     55 6E 6B 6E 
28940     6F 77 6E 20 
28944     65 72 72 6F 
28948     72 20 77 68 
2894c     69 6C 65 20 
28950     64 69 76 69 
28954     64 69 6E 67 
28958     2E          | 	byte	"Unknown error while dividing."
28959     00          | 	byte	0
2895a                 | LR__4641
2895a     43 61 6E 6E 
2895e     6F 74 20 63 
28962     6F 6D 70 75 
28966     74 65 20 61 
2896a     20 70 6F 77 
2896e     65 72 20 6F 
28972     66 20 61 20 
28976     73 74 72 69 
2897a     6E 67 2E    | 	byte	"Cannot compute a power of a string."
2897d     00          | 	byte	0
2897e                 | LR__4642
2897e     55 6E 6B 6E 
28982     6F 77 6E 20 
28986     65 72 72 6F 
2898a     72 20 77 68 
2898e     69 6C 65 20 
28992     63 6F 6D 70 
28996     75 74 69 6E 
2899a     67 20 61 20 
2899e     70 6F 77 65 
289a2     72 2E       | 	byte	"Unknown error while computing a power."
289a4     00          | 	byte	0
289a5                 | LR__4643
289a5     52 69 67 68 
289a9     74 20 70 61 
289ad     72 65 6E 74 
289b1     68 65 73 69 
289b5     73 20 65 78 
289b9     70 65 63 74 
289bd     65 64 2E    | 	byte	"Right parenthesis expected."
289c0     00          | 	byte	0
289c1                 | LR__4644
289c1     45 78 70 65 
289c5     63 74 65 64 
289c9     20 73 74 72 
289cd     69 6E 67 2E | 	byte	"Expected string."
289d1     00          | 	byte	0
289d2                 | LR__4645
289d2     45 78 70 65 
289d6     63 74 65 64 
289da     20 66 6C 6F 
289de     61 74 2E    | 	byte	"Expected float."
289e1     00          | 	byte	0
289e2                 | LR__4646
289e2     45 78 70 65 
289e6     63 74 65 64 
289ea     20 75 6E 73 
289ee     69 67 6E 65 
289f2     64 20 69 6E 
289f6     74 65 67 65 
289fa     72 2E       | 	byte	"Expected unsigned integer."
289fc     00          | 	byte	0
289fd                 | LR__4647
289fd     45 78 70 65 
28a01     63 74 65 64 
28a05     20 69 6E 74 
28a09     65 67 65 72 
28a0d     2E          | 	byte	"Expected integer."
28a0e     00          | 	byte	0
28a0f                 | LR__4648
28a0f     4E 6F 20 6D 
28a13     6F 72 65 20 
28a17     76 61 72 69 
28a1b     61 62 6C 65 
28a1f     20 73 6C 6F 
28a23     74 73 2E    | 	byte	"No more variable slots."
28a26     00          | 	byte	0
28a27                 | LR__4649
28a27     56 61 72 69 
28a2b     61 62 6C 65 
28a2f     20 6E 6F 74 
28a33     20 66 6F 75 
28a37     6E 64 2E    | 	byte	"Variable not found."
28a3a     00          | 	byte	0
28a3b                 | LR__4650
28a3b     43 6F 6D 6D 
28a3f     61 20 65 78 
28a43     70 65 63 74 
28a47     65 64 2E    | 	byte	"Comma expected."
28a4a     00          | 	byte	0
28a4b                 | LR__4651
28a4b     43 6F 6D 6D 
28a4f     61 20 6F 72 
28a53     20 73 65 6D 
28a57     69 63 6F 6C 
28a5b     6F 6E 20 65 
28a5f     78 70 65 63 
28a63     74 65 64 2E | 	byte	"Comma or semicolon expected."
28a67     00          | 	byte	0
28a68                 | LR__4652
28a68     55 6E 6B 6E 
28a6c     6F 77 6E 20 
28a70     63 6F 6D 6D 
28a74     61 6E 64 2E | 	byte	"Unknown command."
28a78     00          | 	byte	0
28a79                 | LR__4653
28a79     53 74 61 63 
28a7d     6B 20 75 6E 
28a81     64 65 72 66 
28a85     6C 6F 77 2E | 	byte	"Stack underflow."
28a89     00          | 	byte	0
28a8a                 | LR__4654
28a8a     43 61 6E 6E 
28a8e     6F 74 20 65 
28a92     78 65 63 75 
28a96     74 65 20 67 
28a9a     6F 74 6F 20 
28a9e     69 6E 20 74 
28aa2     68 65 20 69 
28aa6     6D 6D 65 64 
28aaa     69 61 74 65 
28aae     20 6D 6F 64 
28ab2     65 2E       | 	byte	"Cannot execute goto in the immediate mode."
28ab4     00          | 	byte	0
28ab5                 | LR__4655
28ab5     43 61 6E 6E 
28ab9     6F 74 20 6C 
28abd     6F 61 64 20 
28ac1     66 72 6F 6D 
28ac5     20 74 68 69 
28ac9     73 20 66 69 
28acd     6C 65 2E    | 	byte	"Cannot load from this file."
28ad0     00          | 	byte	0
28ad1                 | LR__4656
28ad1     54 68 65 20 
28ad5     70 72 6F 67 
28ad9     72 61 6D 20 
28add     69 73 20 65 
28ae1     6D 70 74 79 
28ae5     2E          | 	byte	"The program is empty."
28ae6     00          | 	byte	0
28ae7                 | LR__4657
28ae7     49 66 20 61 
28aeb     66 74 65 72 
28aef     20 69 66 2E | 	byte	"If after if."
28af3     00          | 	byte	0
28af4                 | LR__4658
28af4     45 6D 70 74 
28af8     79 20 65 78 
28afc     70 72 65 73 
28b00     73 69 6F 6E 
28b04     2E          | 	byte	"Empty expression."
28b05     00          | 	byte	0
28b06                 | LR__4659
28b06     53 74 72 69 
28b0a     6E 67 20 65 
28b0e     78 70 65 63 
28b12     74 65 64 2E | 	byte	"String expected."
28b16     00          | 	byte	0
28b17                 | LR__4660
28b17     49 6E 74 65 
28b1b     72 70 72 65 
28b1f     74 65 72 20 
28b23     69 6E 74 65 
28b27     72 6E 61 6C 
28b2b     20 65 72 72 
28b2f     6F 72 2E    | 	byte	"Interpreter internal error."
28b32     00          | 	byte	0
28b33                 | LR__4661
28b33     45 78 70 65 
28b37     63 74 65 64 
28b3b     20 61 73 73 
28b3f     69 67 6E 2E | 	byte	"Expected assign."
28b43     00          | 	byte	0
28b44                 | LR__4662
28b44     45 78 70 65 
28b48     63 74 65 64 
28b4c     20 27 74 6F 
28b50     27 2E       | 	byte	"Expected 'to'."
28b52     00          | 	byte	0
28b53                 | LR__4663
28b53     45 78 70 65 
28b57     63 74 65 64 
28b5b     20 69 6E 74 
28b5f     65 67 65 72 
28b63     20 76 61 72 
28b67     69 61 62 6C 
28b6b     65 2E       | 	byte	"Expected integer variable."
28b6d     00          | 	byte	0
28b6e                 | LR__4664
28b6e     55 6E 69 6E 
28b72     69 74 69 61 
28b76     6C 69 7A 65 
28b7a     64 20 76 61 
28b7e     72 69 61 62 
28b82     6C 65 20 69 
28b86     6E 20 27 6E 
28b8a     65 78 74 27 
28b8e     2C 20 75 73 
28b92     65 20 27 66 
28b96     6F 72 27 20 
28b9a     62 65 66 6F 
28b9e     72 65 2E    | 	byte	"Uninitialized variable in 'next', use 'for' before."
28ba1     00          | 	byte	0
28ba2                 | LR__4665
28ba2     4E 6F 20 6D 
28ba6     6F 72 65 20 
28baa     73 6C 6F 74 
28bae     73 20 66 6F 
28bb2     72 20 27 66 
28bb6     6F 72 27 2E | 	byte	"No more slots for 'for'."
28bba     00          | 	byte	0
28bbb                 | LR__4666
28bbb     27 4E 65 78 
28bbf     74 27 20 64 
28bc3     6F 65 73 6E 
28bc7     27 74 20 6D 
28bcb     61 74 63 68 
28bcf     20 27 66 6F 
28bd3     72 27 2E    | 	byte	"'Next' doesn't match 'for'."
28bd6     00          | 	byte	0
28bd7                 | LR__4667
28bd7     27 47 6F 74 
28bdb     6F 27 20 74 
28bdf     61 72 67 65 
28be3     74 20 6C 69 
28be7     6E 65 20 6E 
28beb     6F 74 20 66 
28bef     6F 75 6E 64 
28bf3     2E          | 	byte	"'Goto' target line not found."
28bf4     00          | 	byte	0
28bf5                 | LR__4668
28bf5     42 61 64 20 
28bf9     6E 75 6D 62 
28bfd     65 72 20 6F 
28c01     66 20 70 61 
28c05     72 61 6D 65 
28c09     74 65 72 73 | 	byte	"Bad number of parameters"
28c0d     00          | 	byte	0
28c0e                 | LR__4669
28c0e     46 75 6E 63 
28c12     74 69 6F 6E 
28c16     20 75 6E 64 
28c1a     65 66 69 6E 
28c1e     65 64 20 66 
28c22     6F 72 20 73 
28c26     74 72 69 6E 
28c2a     67 73       | 	byte	"Function undefined for strings"
28c2c     00          | 	byte	0
28c2d                 | LR__4670
28c2d     42 61 64 20 
28c31     70 61 72 61 
28c35     6D 65 74 65 
28c39     72 2E       | 	byte	"Bad parameter."
28c3b     00          | 	byte	0
28c3c                 | LR__4671
28c3c     43 61 6E 6E 
28c40     6F 74 20 64 
28c44     65 63 6C 61 
28c48     72 65 20 61 
28c4c     6E 20 61 72 
28c50     72 61 79 3A 
28c54     20 74 68 65 
28c58     20 76 61 72 
28c5c     69 61 62 6C 
28c60     65 20 65 78 
28c64     69 73 74 73 
28c68     2E          | 	byte	"Cannot declare an array: the variable exists."
28c69     00          | 	byte	0
28c6a                 | LR__4672
28c6a     45 78 70 65 
28c6e     63 74 65 64 
28c72     20 27 28 27 
28c76     2E          | 	byte	"Expected '('."
28c77     00          | 	byte	0
28c78                 | LR__4673
28c78     45 78 70 65 
28c7c     63 74 65 64 
28c80     20 27 29 27 
28c84     20 6F 72 20 
28c88     27 2C 27 2E | 	byte	"Expected ')' or ','."
28c8c     00          | 	byte	0
28c8d                 | LR__4674
28c8d     4E 6F 20 6D 
28c91     6F 72 65 20 
28c95     74 68 61 6E 
28c99     20 33 20 64 
28c9d     69 6D 65 6E 
28ca1     73 69 6F 6E 
28ca5     73 20 73 75 
28ca9     70 70 6F 72 
28cad     74 65 64    | 	byte	"No more than 3 dimensions supported"
28cb0     00          | 	byte	0
28cb1                 | LR__4675
28cb1     56 61 72 69 
28cb5     61 62 6C 65 
28cb9     20 6E 61 6D 
28cbd     65 20 65 78 
28cc1     70 65 63 74 
28cc5     65 64       | 	byte	"Variable name expected"
28cc7     00          | 	byte	0
28cc8                 | LR__4676
28cc8     54 79 70 65 
28ccc     20 6E 61 6D 
28cd0     65 20 65 78 
28cd4     70 65 63 74 
28cd8     65 64       | 	byte	"Type name expected"
28cda     00          | 	byte	0
28cdb                 | LR__4677
28cdb     54 79 70 65 
28cdf     20 6E 6F 74 
28ce3     20 73 75 70 
28ce7     70 6F 72 74 
28ceb     65 64 20 79 
28cef     65 74       | 	byte	"Type not supported yet"
28cf1     00          | 	byte	0
28cf2                 | LR__4678
28cf2     45 72 72 6F 
28cf6     72 20       | 	byte	"Error "
28cf8     00          | 	byte	0
28cf9                 | LR__4679
28cf9     3A 20       | 	byte	": "
28cfb     00          | 	byte	0
28cfc                 | LR__4680
28cfc     2F 73 64    | 	byte	"/sd"
28cff     00          | 	byte	0
28d00                 | LR__4681
28d00     2F 73 64 2F 
28d04     62 61 73    | 	byte	"/sd/bas"
28d07     00          | 	byte	0
28d08                 | LR__4682
28d08     2F 73 64 2F 
28d0c     62 61 73    | 	byte	"/sd/bas"
28d0f     00          | 	byte	0
28d10                 | LR__4683
28d10     20 42 41 53 
28d14     49 43 20 62 
28d18     79 74 65 73 
28d1c     20 66 72 65 
28d20     65          | 	byte	" BASIC bytes free"
28d21     00          | 	byte	0
28d22                 | LR__4684
28d22     52 65 61 64 
28d26     79          | 	byte	"Ready"
28d27     00          | 	byte	0
28d28                 | LR__4685
28d28     20          | 	byte	" "
28d29     00          | 	byte	0
28d2a                 | LR__4686
28d2a     20          | 	byte	" "
28d2b     00          | 	byte	0
28d2c                 | LR__4687
28d2c                 | 	byte	
28d2c     00          | 	byte	0
28d2d                 | LR__4688
28d2d                 | 	byte	
28d2d     00          | 	byte	0
28d2e     00 00       | 	alignl
28d30                 | _dat_
28d30     00 00 00 00 
28d34     00 00 00 00 
28d38     00 00 00 00 
28d3c     00 00 00 00 | 	byte	$00[16]
28d40     61 41 17 0E 
28d44     62 42 00 00 
28d48     63 43 19 10 
28d4c     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
28d50     65 45 18 0F 
28d54     66 46 00 00 
28d58     67 47 00 00 
28d5c     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
28d60     69 49 00 00 
28d64     6A 4A 00 00 
28d68     6B 4B 00 00 
28d6c     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
28d70     6D 4D 00 00 
28d74     6E 4E 1A 11 
28d78     6F 4F 1E 15 
28d7c     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
28d80     71 51 00 00 
28d84     72 52 00 00 
28d88     73 53 1B 12 
28d8c     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
28d90     75 55 00 00 
28d94     76 56 00 00 
28d98     77 57 00 00 
28d9c     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
28da0     79 59 00 00 
28da4     7A 5A 1D 14 
28da8     31 21 04 00 
28dac     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
28db0     33 23 06 00 
28db4     34 24 07 00 
28db8     35 25 08 00 
28dbc     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
28dc0     37 26 0A 00 
28dc4     38 2A 0B 00 
28dc8     39 28 0C 00 
28dcc     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
28dd0     8D 8D 00 00 
28dd4     9B 9B 00 00 
28dd8     88 88 00 00 
28ddc     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
28de0     20 20 00 00 
28de4     2D 5F 00 00 
28de8     3D 2B 00 00 
28dec     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
28df0     5D 7D 00 00 
28df4     5C 7C 00 00 
28df8     23 7E 00 00 
28dfc     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
28e00     27 22 00 00 
28e04     60 7E 03 00 
28e08     2C 3C 00 00 
28e0c     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
28e10     2F 3F 00 00 
28e14     B9 B9 00 00 
28e18     BA 00 00 00 
28e1c     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
28e20     BC 00 00 00 
28e24     BD 00 00 00 
28e28     BE 00 00 00 
28e2c     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
28e30     C0 00 00 00 
28e34     C1 00 00 00 
28e38     C2 00 00 00 
28e3c     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
28e40     C4 00 00 00 
28e44     C5 00 00 00 
28e48     C6 00 00 00 
28e4c     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
28e50     C8 00 00 00 
28e54     C9 00 00 00 
28e58     CA 00 00 00 
28e5c     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
28e60     7F 7F 00 00 
28e64     CC 00 00 00 
28e68     CD 00 00 00 
28e6c     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
28e70     CF 00 00 00 
28e74     D0 00 00 00 
28e78     D1 00 00 00 
28e7c     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
28e80     2F 2F 00 00 
28e84     2A 2A 00 00 
28e88     2D 2D 00 00 
28e8c     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
28e90     8D 8D 00 00 
28e94     31 31 00 00 
28e98     32 32 00 00 
28e9c     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
28ea0     34 34 00 00 
28ea4     35 35 00 00 
28ea8     36 36 00 00 
28eac     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
28eb0     38 38 00 00 
28eb4     39 39 00 00 
28eb8     30 30 00 00 
28ebc     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
28ec0     5C 7C 00 00 
28ec4     00 00 00 00 
28ec8     00 00 00 00 
28ecc     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
28ed0     00 00 00 00 
      ...             
28f28     00 00 00 00 
28f2c     00 00 00 00 | 	byte	$00[96]
28f30     2B 00 A6 F2 
28f34     24 A7 09 80 
28f38     5B 88 4D 89 
28f3c     80 88 A5 88 | atari_spl file "atari.spl"
28f40     6D 88 B8 88 
28f44     80 88 CB 88 
28f48     92 88 A5 88 
28f4c     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
28f50     A5 88 CA 88 
28f54     A6 88 DD 88 
28f58     B8 88 AB 89 
28f5c     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
28f60     C8 AD C6 F1 
28f64     91 06 B6 FF 
28f68     13 00 4A 00 
28f6c     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
28f70     5D 00 5E 00 
28f74     5D 00 5E 00 
28f78     5E 00 5D 00 
28f7c     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
28f80     38 00 83 00 
28f84     25 00 83 00 
28f88     C3 FE D1 04 
28f8c     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
28f90     48 88 38 85 
28f94     41 8A CB 88 
28f98     28 89 B8 88 
28f9c     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
28fa0     15 89 03 89 
28fa4     02 89 15 89 
28fa8     16 89 15 89 
28fac     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
28fb0     15 89 3A 89 
28fb4     72 89 E3 89 
28fb8     52 83 AD 97 
28fbc     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
28fc0     0C 02 B6 FF 
28fc4     E1 00 A8 00 
28fc8     F3 00 A8 00 
28fcc     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
28fd0     CE 00 CD 00 
28fd4     CD 00 BA 00 
28fd8     E1 00 BB 00 
28fdc     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
28fe0     DF 00 C9 FF 
28fe4     E6 01 B6 06 
28fe8     EE DD 8D 98 
28fec     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
28ff0     97 89 73 89 
28ff4     3B 89 60 89 
28ff8     60 89 60 89 
28ffc     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
29000     73 89 72 89 
29004     85 89 73 89 
29008     AA 89 60 89 
2900c     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
29010     E8 8A 18 86 
29014     92 88 A5 C2 
29018     E0 00 C3 05 
2901c     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
29020     F2 00 64 01 
29024     06 01 3E 01 
29028     2B 01 2B 01 
2902c     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
29030     2B 01 2A 01 
29034     2B 01 2B 01 
29038     2B 01 18 01 
2903c     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
29040     39 07 61 F3 
29044     C0 AF 37 85 
29048     0F 88 8B 8A 
2904c     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
29050     AB 89 D0 89 
29054     AB 89 D0 89 
29058     D0 89 CF 89 
2905c     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
29060     D0 89 F5 89 
29064     BD 89 08 8A 
29068     CF 89 E8 8A 
2906c     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
29070     53 B3 0D F8 
29074     F4 07 38 00 
29078     63 01 63 01 
2907c     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
29080     88 01 88 01 
29084     76 01 88 01 
29088     88 01 89 01 
2908c     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
29090     75 01 AE 01 
29094     76 01 88 01 
29098     4A 00 46 06 
2909c     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
290a0     08 8A 9A 86 
290a4     33 8B 08 8A 
290a8     2D 8A F5 89 
290ac     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
290b0     2D 8A 2D 8A 
290b4     2E 8A 1B 8A 
290b8     40 8A 2D 8A 
290bc     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
290c0     2E 8A 79 8A 
290c4     66 8A C8 8B 
290c8     72 82 2B 97 
290cc     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
290d0     1D 02 05 01 
290d4     F8 01 C0 01 
290d8     0B 02 C0 01 
290dc     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
290e0     F9 01 D3 01 
290e4     F8 01 D3 01 
290e8     F8 01 D2 01 
290ec     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
290f0     E6 01 2B 01 
290f4     8E 02 5F 07 
290f8     F7 E2 ED 9C 
290fc     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
29100     E8 8A 78 8A 
29104     78 8A 65 8A 
29108     8B 8A 78 8A 
2910c     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
29110     8B 8A 9D 8A 
29114     9D 8A 8B 8A 
29118     C2 8A 78 8A 
2911c     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
29120     70 8C 18 86 
29124     8B 8A 23 C9 
29128     CB 03 C4 05 
2912c     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
29130     0B 02 7B 02 
29134     1E 02 55 02 
29138     30 02 43 02 
2913c     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
29140     43 02 44 02 
29144     43 02 30 02 
29148     68 02 31 02 
2914c     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
29150     07 08 3F F7 
29154     73 B2 13 85 
29158     15 89 ED 8B 
2915c     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
29160     B0 8A FB 8A 
29164     D5 8A FA 8A 
29168     E8 8A FB 8A 
2916c     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
29170     E8 8A 21 8B 
29174     E7 8A 33 8B 
29178     E8 8A 26 8C 
2917c     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
29180     8D B0 27 F6 
29184     9C 08 AD 01 
29188     7B 02 8D 02 
2918c     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
29190     A1 02 A0 02 
29194     A1 02 A0 02 
29198     A0 02 A0 02 
2919c     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
291a0     7B 02 D8 02 
291a4     7B 02 C6 02 
291a8     3E 01 C3 05 
291ac     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
291b0     00 8C 2A 86 
291b4     E0 8C FA 8A 
291b8     6A 8B FB 8A 
291bc     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
291c0     45 8B 45 8B 
291c4     45 8B 6B 8B 
291c8     46 8B 59 8B 
291cc     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
291d0     6B 8B 6B 8B 
291d4     6B 8B 6B 8B 
291d8     7D 8B 7D 8B 
291dc     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
291e0     90 8B 91 8B 
291e4     90 8B 90 8B 
291e8     A3 8B A3 8B 
291ec     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
291f0     B5 8B B6 8B 
291f4     B5 8B B5 8B 
291f8     B6 8B C8 8B 
291fc     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
29200     C8 8B DA 8B 
29204     DB 8B DB 8B 
29208     DB 8B DC 8B 
2920c     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
29210     EE 8B EE 8B 
29214     00 8C 01 8C 
29218     00 8C 01 8C 
2921c     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
29220     12 8C 13 8C 
29224     13 8C 26 8C 
29228     26 8C 26 8C 
2922c     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
29230     38 8C 38 8C 
29234     38 8C 38 8C 
29238     4B 8C 4B 8C 
2923c     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
29240     5E 8C 5E 8C 
29244     5E 8C 5E 8C 
29248     70 8C 70 8C 
2924c     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
29250     70 8C 83 8C 
29254     83 8C 83 8C 
29258     83 8C 96 8C 
2925c     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
29260     95 8C A9 8C 
29264     A9 8C A8 8C 
29268     A8 8C A8 8C 
2926c     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
29270     BB 8C BB 8C 
29274     BB 8C CE 8C 
29278     CE 8C CE 8C 
2927c     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
29280     E0 8C E1 8C 
29284     E1 8C E0 8C 
29288     F4 8C F2 8C 
2928c     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
29290     05 8D 05 8D 
29294     06 8D 06 8D 
29298     19 8D 19 8D 
2929c     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
292a0     18 8D 2B 8D 
292a4     2B 8D 2B 8D 
292a8     2A 8D 3E 8D 
292ac     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
292b0     3E 8D 51 8D 
292b4     50 8D 50 8D 
292b8     50 8D 51 8D 
292bc     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
292c0     63 8D 64 8D 
292c4     76 8D 75 8D 
292c8     75 8D 76 8D 
292cc     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
292d0     88 8D 88 8D 
292d4     89 8D 9B 8D 
292d8     9A 8D 9B 8D 
292dc     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
292e0     AD 8D AE 8D 
292e4     AD 8D AE 8D 
292e8     C1 8D C1 8D 
292ec     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
292f0     D3 8D D3 8D 
292f4     D3 8D D3 8D 
292f8     D3 8D E6 8D 
292fc     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
29300     E6 8D E6 8D 
29304     F9 8D F9 8D 
29308     F9 8D F8 8D 
2930c     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
29310     0B 8E 0B 8E 
29314     1D 8E 1D 8E 
29318     1E 8E 1E 8E 
2931c     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
29320     31 8E 31 8E 
29324     31 8E 42 8E 
29328     43 8E 43 8E 
2932c     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
29330     56 8E 56 8E 
29334     55 8E 56 8E 
29338     68 8E 69 8E 
2933c     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
29340     69 8E 7B 8E 
29344     7C 8E 7B 8E 
29348     7B 8E 8D 8E 
2934c     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
29350     8D 8E A1 8E 
29354     A0 8E A1 8E 
29358     A1 8E A0 8E 
2935c     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
29360     B3 8E B3 8E 
29364     C6 8E C5 8E 
29368     C6 8E C6 8E 
2936c     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
29370     D8 8E D9 8E 
29374     D8 8E EC 8E 
29378     EB 8E EC 8E 
2937c     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
29380     FE 8E FE 8E 
29384     FE 8E FE 8E 
29388     10 8F 10 8F 
2938c     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
29390     11 8F 23 8F 
29394     24 8F 23 8F 
29398     24 8F 37 8F 
2939c     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
293a0     36 8F 36 8F 
293a4     48 8F 49 8F 
293a8     49 8F 49 8F 
293ac     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
293b0     5B 8F 5C 8F 
293b4     5B 8F 6E 8F 
293b8     6E 8F 6E 8F 
293bc     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
293c0     81 8F 81 8F 
293c4     81 8F 81 8F 
293c8     93 8F 93 8F 
293cc     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
293d0     93 8F A6 8F 
293d4     A6 8F A6 8F 
293d8     A6 8F B9 8F 
293dc     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
293e0     B9 8F B9 8F 
293e4     CC 8F CB 8F 
293e8     CB 8F CC 8F 
293ec     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
293f0     DF 8F DE 8F 
293f4     DE 8F F1 8F 
293f8     F1 8F F1 8F 
293fc     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
29400     03 90 04 90 
29404     04 90 04 90 
29408     16 90 17 90 
2940c     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
29410     29 90 28 90 
29414     29 90 28 90 
29418     29 90 3C 90 
2941c     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
29420     3C 90 4F 90 
29424     4E 90 4E 90 
29428     4E 90 4E 90 
2942c     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
29430     61 90 61 90 
29434     73 90 74 90 
29438     74 90 74 90 
2943c     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
29440     87 90 86 90 
29444     87 90 86 90 
29448     99 90 99 90 
2944c     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
29450     AB 90 AB 90 
29454     AC 90 AB 90 
29458     AB 90 BF 90 
2945c     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
29460     BE 90 D1 90 
29464     D0 90 D1 90 
29468     D1 90 D1 90 
2946c     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
29470     E3 90 E4 90 
29474     F6 90 F6 90 
29478     F6 90 F6 90 
2947c     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
29480     09 91 0A 91 
29484     0A 91 1C 91 
29488     1C 91 1C 91 
2948c     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
29490     2F 91 2E 91 
29494     2F 91 2F 91 
29498     2E 91 41 91 
2949c     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
294a0     41 91 53 91 
294a4     54 91 54 91 
294a8     53 91 54 91 
294ac     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
294b0     67 91 67 91 
294b4     79 91 7A 91 
294b8     79 91 78 91 
294bc     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
294c0     8C 91 8B 91 
294c4     8C 91 8C 91 
294c8     9E 91 9E 91 
294cc     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
294d0     B1 91 B1 91 
294d4     B2 91 B1 91 
294d8     B1 91 C4 91 
294dc     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
294e0     C4 91 D6 91 
294e4     D7 91 D7 91 
294e8     D7 91 D6 91 
294ec     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
294f0     EA 91 EA 91 
294f4     EA 91 FC 91 
294f8     FC 91 FB 91 
294fc     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
29500     0E 92 0F 92 
29504     0F 92 0E 92 
29508     21 92 21 92 
2950c     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
29510     21 92 34 92 
29514     33 92 34 92 
29518     34 92 47 92 
2951c     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
29520     46 92 47 92 
29524     59 92 59 92 
29528     59 92 59 92 
2952c     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
29530     6C 92 6C 92 
29534     6B 92 7E 92 
29538     7E 92 7E 92 
2953c     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
29540     92 92 91 92 
29544     91 92 90 92 
29548     91 92 A4 92 
2954c     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
29550     A3 92 B6 92 
29554     B6 92 B7 92 
29558     B7 92 B6 92 
2955c     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
29560     CA 92 C9 92 
29564     CA 92 DC 92 
29568     DC 92 DC 92 
2956c     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
29570     EF 92 EF 92 
29574     EF 92 EF 92 
29578     01 93 01 93 
2957c     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
29580     15 93 14 93 
29584     14 93 14 93 
29588     14 93 27 93 
2958c     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
29590     27 93 39 93 
29594     3A 93 39 93 
29598     39 93 39 93 
2959c     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
295a0     4B 93 4C 93 
295a4     5F 93 5F 93 
295a8     5F 93 5E 93 
295ac     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
295b0     5F 93 84 93 
295b4     4C 93 96 93 
295b8     5F 93 AE 94 
295bc     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
295c0     7B C1 00 00 | 	byte	$7b, $c1, $00, $00
295c4     7A D7 00 80 
295c8     87 8A 48 8F 
295cc     EC 8C 76 8D 
295d0     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
295d4     3C 8D 82 8D 
295d8     42 8D 88 8D 
295dc     8C 8D 8E 8D 
295e0     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
295e4     97 8D DE 8D 
295e8     E1 8D F1 8E 
295ec     D8 8C A3 83 
295f0     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
295f4     65 71 C9 65 
295f8     FC 64 C4 65 
295fc     C1 65 BF 65 
29600     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
29604     B6 65 B4 65 
29608     B2 65 AE 65 
2960c     AC 65 ED 65 
29610     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
29614     5E 65 25 66 
29618     FA 62 23 6B 
2961c     B5 6C 61 0A 
29620     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
29624     5D 90 BE 8D 
29628     47 8E C3 8D 
2962c     09 8E C9 8D 
29630     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
29634     15 8E 19 8E 
29638     1B 8E 62 8E 
2963c     64 8E 68 8E 
29640     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
29644     B5 8E 4C 90 
29648     FA 84 3C 9D 
2964c     98 13 79 6D 
29650     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
29654     D9 66 50 66 
29658     D4 66 4B 66 
2965c     8C 66 46 66 
29660     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
29664     81 66 3A 66 
29668     7C 66 36 66 
2966c     76 66 30 66 
29670     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
29674     6B 66 88 72 
29678     BF 37 E7 B7 
2967c     75 83 8B 8E 
29680     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
29684     94 8E 96 8E 
29688     DD 8E 9C 8E 
2968c     E2 8E A2 8E 
29690     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
29694     EE 8E AE 8E 
29698     38 8F B5 8E 
2969c     3F 8F FD 8E 
296a0     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
296a4     A5 87 1E E3 
296a8     6D 5D FA 71 
296ac     41 64 25 67 
296b0     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
296b4     D9 66 1A 67 
296b8     18 67 15 67 
296bc     12 67 0F 67 
296c0     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
296c4     07 67 C0 66 
296c8     01 67 BC 66 
296cc     B8 66 DE 64 
296d0     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
296d4     43 E5 1F 8B 
296d8     14 8A F1 90 
296dc     1C 8F 63 8F 
296e0     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
296e4     29 8F 6E 8F 
296e8     72 8F 75 8F 
296ec     34 8F BE 8F 
296f0     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
296f4     84 8F 87 8F 
296f8     CC 8F 56 90 
296fc     67 91 49 80 
29700     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
29704     46 77 A6 66 
29708     E8 66 B0 67 
2970c     AD 67 ED 67 
29710     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
29714     A2 67 E3 67 
29718     9D 67 9A 67 
2971c     98 67 94 67 
29720     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
29724     49 67 CD 67 
29728     28 65 5F 6E 
2972c     82 67 3A 01 
29730     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
29734     C2 91 A9 8F 
29738     EF 8F AE 8F 
2973c     F4 8F B5 8F 
29740     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
29744     01 90 03 90 
29748     07 90 09 90 
2974c     0C 90 53 90 
29750     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
29754     18 90 44 93 
29758     85 84 D6 9D 
2975c     87 1F 2F 75 
29760     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
29764     C4 68 F6 67 
29768     BE 68 F1 67 
2976c     76 68 2E 68 
29770     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
29774     27 68 24 68 
29778     64 68 1E 68 
2977c     5F 68 19 68 
29780     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
29784     DC 68 56 72 
29788     7E 36 C2 B8 
2978c     D7 84 73 90 
29790     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
29794     7B 90 7F 90 
29798     82 90 84 90 
2979c     CB 90 8B 90 
297a0     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
297a4     D7 90 96 90 
297a8     20 91 59 90 
297ac     25 91 A2 90 
297b0     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
297b4     D0 89 40 EE 
297b8     12 64 C4 71 
297bc     29 66 0C 69 
297c0     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
297c4     C0 68 02 69 
297c8     FE 68 FB 68 
297cc     F9 68 F6 68 
297d0     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
297d4     EE 68 A8 68 
297d8     2C 69 5F 68 
297dc     E2 68 81 66 
297e0     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
297e4     1E EB A6 8A 
297e8     73 8B 5E 93 
297ec     7B 90 48 91 
297f0     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
297f4     0D 91 11 91 
297f8     14 91 16 91 
297fc     5C 91 1C 91 
29800     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
29804     68 91 AF 91 
29808     2A 91 B5 91 
2980c     75 91 1A 94 
29810     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
29814     70 0E CB 6C 
29818     5D 6E C4 67 
2981c     99 69 54 69 
29820     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
29824     D2 69 49 69 
29828     89 69 86 69 
2982c     40 69 C4 69 
29830     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
29834     35 69 76 69 
29838     58 67 EB 6D 
2983c     E9 6D 89 0F 
29840     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
29844     33 94 94 91 
29848     D9 91 56 91 
2984c     E0 91 9F 91 
29850     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
29854     EC 91 EE 91 
29858     F1 91 F4 91 
2985c     F7 91 3D 92 
29860     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
29864     46 92 21 94 
29868     11 89 A4 9D 
2986c     FD 0E 8F 6C 
29870     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
29874     28 6A E1 69 
29878     65 6A 1F 6A 
2987c     5F 6A 1A 6A 
29880     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
29884     54 6A 0F 6A 
29888     4F 6A 09 6A 
2988c     06 6A 03 6A 
29890     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
29894     23 68 69 77 
29898     3A 4D 38 CA 
2989c     38 86 4E 91 
298a0     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
298a4     64 92 24 92 
298a8     6A 92 2A 92 
298ac     70 92 30 92 
298b0     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
298b4     7B 92 7E 92 
298b8     C5 92 84 92 
298bc     CB 92 8A 92 
298c0     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
298c4     4D 8D F9 E2 
298c8     97 59 FE 74 
298cc     DB 68 6D 6A 
298d0     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
298d4     A8 6A A5 6A 
298d8     A3 6A 9F 6A 
298dc     9D 6A 9B 6A 
298e0     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
298e4     D6 6A 8F 6A 
298e8     CF 6A 46 6A 
298ec     CA 6A E1 67 
298f0     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
298f4     D3 F7 15 92 
298f8     90 8C BF 94 
298fc     A6 92 EB 92 
29900     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
29904     B1 92 F7 92 
29908     FA 92 FD 92 
2990c     00 93 02 93 
29910     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
29914     4F 93 52 93 
29918     54 93 22 94 
2991c     5A 93 8F 88 
29920     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
29924     1C 77 07 6C 
29928     E8 69 7A 6B 
2992c     34 6B 75 6B 
29930     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
29934     29 6B 26 6B 
29938     24 6B 21 6B 
2993c     1D 6B 5E 6B 
29940     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
29944     12 6B 52 6B 
29948     34 69 34 6E 
2994c     BA 73 A4 24 
29950     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
29954     7A 94 B3 93 
29958     72 93 31 93 
2995c     78 93 7A 93 
29960     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
29964     83 93 86 93 
29968     89 93 D0 93 
2996c     D2 93 D5 93 
29970     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
29974     DD 93 40 96 
29978     30 8B 99 9C 
2997c     52 10 94 71 
29980     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
29984     46 6C 79 6B 
29988     40 6C B7 6B 
2998c     F7 6B B1 6B 
29990     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
29994     EC 6B A5 6B 
29998     A2 6B 9F 6B 
2999c     9D 6B 9A 6B 
299a0     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
299a4     C8 6A E4 76 
299a8     20 4B F9 CE 
299ac     2E 8A 1A 92 
299b0     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
299b4     FB 93 BA 93 
299b8     01 94 03 94 
299bc     4A 94 09 94 
299c0     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
299c4     55 94 14 94 
299c8     9E 94 1A 94 
299cc     61 94 20 94 
299d0     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
299d4     3E 87 E5 CD 
299d8     5F 50 6C 78 
299dc     B5 6A 04 6C 
299e0     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
299e4     83 6C 7F 6C 
299e8     7C 6C 36 6C 
299ec     76 6C 74 6C 
299f0     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
299f4     6B 6C 25 6C 
299f8     66 6C 1F 6C 
299fc     1D 6C 41 6A 
29a00     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
29a04     BA FA FC 94 
29a08     5B 8D 97 96 
29a0c     3B 94 C5 94 
29a10     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
29a14     89 94 8C 94 
29a18     8F 94 92 94 
29a1c     94 94 DB 94 
29a20     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
29a24     E4 94 E7 94 
29a28     2D 95 74 95 
29a2c     C8 96 15 89 
29a30     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
29a34     CB 75 31 6F 
29a38     7E 6B 10 6D 
29a3c     C9 6C 0A 6D 
29a40     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
29a44     BD 6C FF 6C 
29a48     FB 6C F9 6C 
29a4c     B2 6C F3 6C 
29a50     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
29a54     A7 6C E8 6C 
29a58     0D 6B 85 6F 
29a5c     C7 74 10 28 
29a60     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
29a64     96 96 47 95 
29a68     06 95 0A 95 
29a6c     0C 95 0F 95 
29a70     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
29a74     17 95 5E 95 
29a78     61 95 63 95 
29a7c     22 95 AC 95 
29a80     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
29a84     72 95 17 98 
29a88     59 8E 01 96 
29a8c     CF FC 5A 68 
29a90     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
29a94     96 6D 50 6D 
29a98     D5 6D 4A 6D 
29a9c     8C 6D 89 6D 
29aa0     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
29aa4     80 6D 3A 6D 
29aa8     7A 6D 77 6D 
29aac     75 6D 71 6D 
29ab0     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
29ab4     18 6C BC 78 
29ab8     9A 4F 7E CF 
29abc     1F 89 F1 93 
29ac0     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
29ac4     D2 95 4E 95 
29ac8     D7 95 53 95 
29acc     DD 95 E0 95 
29ad0     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
29ad4     A5 95 EB 95 
29ad8     EE 95 F0 95 
29adc     37 96 B3 95 
29ae0     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
29ae4     1A 98 D5 8D 
29ae8     C5 9F CD 0F 
29aec     0F 71 F3 73 
29af0     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
29af4     D9 6D 5E 6E 
29af8     D3 6D 58 6E 
29afc     12 6E 0F 6E 
29b00     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
29b04     49 6E BF 6D 
29b08     87 6E 76 6D 
29b0c     81 6E 11 6B 
29b10     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
29b14     3F 09 44 95 
29b18     E5 8D 3F 99 
29b1c     D4 95 A2 96 
29b20     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
29b24     23 96 69 96 
29b28     6B 96 6E 96 
29b2c     71 96 74 96 
29b30     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
29b34     BF 96 3C 96 
29b38     C6 96 C8 96 
29b3c     A3 98 51 8D 
29b40     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
29b44     CF 75 29 73 
29b48     90 6C EC 6E 
29b4c     62 6E E7 6E 
29b50     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
29b54     9A 6E 98 6E 
29b58     95 6E 91 6E 
29b5c     8E 6E CF 6E 
29b60     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
29b64     40 6E C3 6E 
29b68     E8 6C 45 6F 
29b6c     A5 7B C9 35 
29b70     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
29b74     2D 98 23 97 
29b78     E1 96 A0 96 
29b7c     A4 96 EA 96 
29b80     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
29b84     AF 96 F4 96 
29b88     F8 96 3E 97 
29b8c     FD 96 43 97 
29b90     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
29b94     08 97 6B 99 
29b98     D6 92 88 91 
29b9c     D8 EE 84 66 
29ba0     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
29ba4     2E 6F E7 6E 
29ba8     6C 6F 24 6F 
29bac     21 6F 1F 6F 
29bb0     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
29bb4     17 6F 13 6F 
29bb8     54 6F 0E 6F 
29bbc     0B 6F 4B 6F 
29bc0     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
29bc4     27 6D 1C 7B 
29bc8     19 59 9F DB 
29bcc     66 8E BC 94 
29bd0     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
29bd4     67 97 26 97 
29bd8     6D 97 2B 97 
29bdc     72 97 32 97 
29be0     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
29be4     C1 97 7F 97 
29be8     C6 97 85 97 
29bec     CB 97 CE 97 
29bf0     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
29bf4     EC 8A C4 C6 
29bf8     68 4C F4 7D 
29bfc     63 6E E8 6E 
29c00     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
29c04     ED 6F A7 6F 
29c08     E7 6F A0 6F 
29c0c     E1 6F 9B 6F 
29c10     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
29c14     D5 6F 8F 6F 
29c18     CE 6F 45 6F 
29c1c     86 6F 68 6D 
29c20     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
29c24     C0 13 AD A2 
29c28     A7 8E 79 99 
29c2c     E6 97 E8 97 
29c30     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
29c34     F1 97 F3 97 
29c38     F6 97 F9 97 
29c3c     FB 97 FE 97 
29c40     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
29c44     4A 98 0A 98 
29c48     93 98 0F 98 
29c4c     7F 9B BF 8C 
29c50     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
29c54     91 7B 62 73 
29c58     1A 6E B9 70 
29c5c     EB 6F B3 70 
29c60     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
29c64     25 70 20 70 
29c68     1E 70 1B 70 
29c6c     18 70 15 70 
29c70     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
29c74     0D 70 09 70 
29c78     07 70 03 70 
29c7c     01 70 FD 6F 
29c80     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
29c84     F6 6F F2 6F 
29c88     EF 6F EC 6F 
29c8c     2C 70 E6 6F 
29c90     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
29c94     DD 6F 97 6F 
29c98     D7 6F 84 6E 
29c9c     8F 6F 3F 7D 
29ca0     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
29ca2     FF FF FF FF 
29ca6     FF FF       | atarist_spl file "atarist.spl" '512
29ca8     00 00 00 00 
29cac     00 00 00 00 
29cb0     00 00       | 	byte	$00[10]
29cb2     17 7F F2 7F 
29cb6     B2 7F 72 7F 
29cba     33 7F F4 7E 
29cbe     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
29cc2     36 7E F5 7D 
29cc6     E9 51 F2 0D 
29cca     8E 00 F3 FD 
29cce     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
29cd2     57 FD 58 FD 
29cd6     5B FD 5C FD 
29cda     5C FD 60 7D 
29cde     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
29ce2     D6 7C 98 7C 
29ce6     59 7C 1A 7C 
29cea     DC 7B 9E 7B 
29cee     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
29cf2     F3 05 00 FD 
29cf6     41 FB EA FA 
29cfa     D9 FA DB FA 
29cfe     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
29d02     E4 FA 9B 36 
29d06     F8 7A C0 7A 
29d0a     84 7A 45 7A 
29d0e     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
29d12     8E 79 51 79 
29d16     15 79 D7 78 
29d1a     3C 1F EB FF 
29d1e     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
29d22     6D F8 65 F8 
29d26     68 F8 6D F8 
29d2a     70 F8 74 F8 
29d2e     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
29d32     AB 60 79 60 
29d36     4B 60 1A 60 
29d3a     E9 5F B9 5F 
29d3e     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
29d42     FB 59 B2 0B 
29d46     92 FA 3A F7 
29d4a     96 F6 79 F6 
29d4e     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
29d52     82 F6 86 F6 
29d56     8C F6 DB 5D 
29d5a     F1 5E C1 5E 
29d5e     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
29d62     34 5E 04 5E 
29d66     D6 5D A6 5D 
29d6a     78 5D D4 3E 
29d6e     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
29d72     27 F5 BA F4 
29d76     AB F4 AD F4 
29d7a     B2 F4 B8 F4 
29d7e     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
29d82     26 5D 2B 5D 
29d86     FC 5C CD 5C 
29d8a     9F 5C 70 5C 
29d8e     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
29d92     E5 5B B8 5B 
29d96     DB 24 A7 FC 
29d9a     D1 F4 4D F3 
29d9e     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
29da2     04 F3 0B F3 
29da6     11 F3 16 F3 
29daa     DE 18 98 5B 
29dae     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
29db2     4E 4A 29 48 
29db6     A0 47 6A 47 
29dba     43 47 20 47 
29dbe     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
29dc2     E2 F6 98 F2 
29dc6     C5 F1 A3 F1 
29dca     A3 F1 A8 F1 
29dce     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
29dd2     BF F1 00 3D 
29dd6     EF 46 CD 46 
29dda     AA 46 86 46 
29dde     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
29de2     1C 46 F9 45 
29de6     D7 45 EE 43 
29dea     DE 02 E8 F3 
29dee     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
29df2     61 F0 65 F0 
29df6     6D F0 74 F0 
29dfa     7C F0 84 F0 
29dfe     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
29e02     8E 45 6D 45 
29e06     49 45 27 45 
29e0a     05 45 E1 44 
29e0e     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
29e12     F1 2F A9 FB 
29e16     8B F1 9B EF 
29e1a     40 EF 36 EF 
29e1e     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
29e22     4D EF 56 EF 
29e26     5E EF 7B 44 
29e2a     8C 44 69 44 
29e2e     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
29e32     03 44 E1 43 
29e36     C0 43 F5 37 
29e3a     69 33 0F 11 
29e3e     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
29e42     66 EE 37 EE 
29e46     38 EE 40 EE 
29e4a     48 EE 51 EE 
29e4e     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
29e52     7D 32 6A 32 
29e56     51 32 37 32 
29e5a     1F 32 05 32 
29e5e     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
29e62     B9 31 A1 31 
29e66     F1 04 F4 F1 
29e6a     50 EE A0 ED 
29e6e     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
29e72     93 ED 9A ED 
29e76     A4 ED AD ED 
29e7a     F4 27 C1 31 
29e7e     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
29e82     78 31 5F 31 
29e86     46 31 2E 31 
29e8a     15 31 FC 30 
29e8e     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
29e92     C4 EF 4A ED 
29e96     DC EC CB EC 
29e9a     D2 EC DA EC 
29e9e     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
29ea2     F9 EC 64 2F 
29ea6     0A 31 F1 30 
29eaa     D9 30 C0 30 
29eae     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
29eb2     78 30 5F 30 
29eb6     46 30 38 23 
29eba     A6 F6 19 EE 
29ebe     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
29ec2     20 EC 28 EC 
29ec6     32 EC 3C EC 
29eca     47 EC 51 EC 
29ece     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
29ed2     A3 22 93 22 
29ed6     7F 22 6E 22 
29eda     5D 22 4C 22 
29ede     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
29ee2     77 09 76 F1 
29ee6     CC EC F0 EB 
29eea     CD EB CE EB 
29eee     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
29ef2     ED EB F5 EB 
29ef6     3E F6 6B 22 
29efa     5F 22 4E 22 
29efe     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
29f02     1B 22 0B 22 
29f06     FA 21 E9 21 
29f0a     D8 21 4D FF 
29f0e     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
29f12     92 EB 7B EB 
29f16     82 EB 8C EB 
29f1a     97 EB A1 EB 
29f1e     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
29f22     15 22 04 22 
29f26     F3 21 E3 21 
29f2a     D2 21 C0 21 
29f2e     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
29f32     8E 21 7D 21 
29f36     9A F8 A4 ED 
29f3a     8E EB 2F EB 
29f3e     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
29f42     37 EB 42 EB 
29f46     4C EB 57 EB 
29f4a     B2 17 22 19 
29f4e     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
29f52     FD 18 EF 18 
29f56     E3 18 D6 18 
29f5a     CA 18 BD 18 
29f5e     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
29f62     60 EC 35 EB 
29f66     01 EB 01 EB 
29f6a     0C EB 16 EB 
29f6e     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
29f72     34 EB D0 18 
29f76     00 19 F4 18 
29f7a     E8 18 DA 18 
29f7e     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
29f82     B6 18 A9 18 
29f86     9D 18 91 05 
29f8a     F0 EF CA EB 
29f8e     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
29f92     E8 EA F2 EA 
29f96     FE EA 07 EB 
29f9a     12 EB C2 EF 
29f9e     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
29fa2     D9 18 CD 18 
29fa6     C0 18 B3 18 
29faa     A7 18 9B 18 
29fae     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
29fb2     B8 FC 30 EE 
29fb6     61 EB DC EA 
29fba     CD EA D2 EA 
29fbe     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
29fc2     F3 EA FE EA 
29fc6     D2 09 D1 18 
29fca     C3 18 17 18 
29fce     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
29fd2     66 11 52 11 
29fd6     49 11 41 11 
29fda     38 11 E0 F4 
29fde     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
29fe2     C9 EA C5 EA 
29fe6     CF EA DB EA 
29fea     E6 EA EF EA 
29fee     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
29ff2     89 11 80 11 
29ff6     78 11 6E 11 
29ffa     67 11 5D 11 
29ffe     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
2a002     43 11 32 0D 
2a006     9C F1 07 EC 
2a00a     F8 EA CD EA 
2a00e     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
2a012     E4 EA ED EA 
2a016     F8 EA 02 EB 
2a01a     55 11 91 11 
2a01e     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
2a022     75 11 6E 11 
2a026     64 11 5E 11 
2a02a     54 11 4A 11 
2a02e     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
2a032     A8 EB F1 EA 
2a036     D9 EA DC EA 
2a03a     E8 EA F1 EA 
2a03e     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
2a042     A6 EB 9E 11 
2a046     A0 11 96 11 
2a04a     8D 11 85 11 
2a04e     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
2a052     6A 11 CA 0D 
2a056     36 0B 57 F8 
2a05a     6C ED 57 EB 
2a05e     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
2a062     F4 EA FF EA 
2a066     09 EB 15 EB 
2a06a     1E EB 1A FD 
2a06e     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
2a072     ED 0A E8 0A 
2a076     E2 0A DC 0A 
2a07a     D6 0A D1 0A 
2a07e     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
2a082     F8 F3 BC EC 
2a086     57 EB 1E EB 
2a08a     18 EB 24 EB 
2a08e     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
2a092     42 EB 4D EB 
2a096     08 09 20 0B 
2a09a     1A 0B 14 0B 
2a09e     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
2a0a2     04 0B FE 0A 
2a0a6     F9 0A F2 0A 
2a0aa     84 08 3A F1 
2a0ae     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
2a0b2     42 EB 42 EB 
2a0b6     4E EB 57 EB 
2a0ba     62 EB 6B EB 
2a0be     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
2a0c2     48 0B 43 0B 
2a0c6     3C 0B 36 0B 
2a0ca     31 0B 2C 0B 
2a0ce     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
2a0d2     1B 0B 5C 00 
2a0d6     6A EF 1B EC 
2a0da     81 EB 6A EB 
2a0de     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
2a0e2     85 EB 8E EB 
2a0e6     99 EB A3 EB 
2a0ea     DD 05 E5 05 
2a0ee     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
2a0f2     DB 05 D8 05 
2a0f6     D5 05 D1 05 
2a0fa     D0 05 CB 05 
2a0fe     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
2a102     0C EC BB EB 
2a106     B3 EB BB EB 
2a10a     C5 EB D0 EB 
2a10e     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
2a112     E4 F7 2C 06 
2a116     28 06 24 06 
2a11a     22 06 1F 06 
2a11e     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
2a122     16 06 14 06 
2a126     0F 06 D0 F3 
2a12a     65 ED 2D EC 
2a12e     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
2a132     01 EC 0A EC 
2a136     14 EC 1E EC 
2a13a     29 EC FB 03 
2a13e     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
2a142     63 06 60 06 
2a146     5E 06 59 06 
2a14a     58 06 54 06 
2a14e     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
2a152     69 F1 21 ED 
2a156     55 EC 33 EC 
2a15a     36 EC 40 EC 
2a15e     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
2a162     5C EC 68 EC 
2a166     92 02 D9 02 
2a16a     D7 02 D7 02 
2a16e     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
2a172     D1 02 D1 02 
2a176     CE 02 CD 02 
2a17a     5D FC 80 EF 
2a17e     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
2a182     83 EC 8A EC 
2a186     93 EC 9C EC 
2a18a     A5 EC B1 EC 
2a18e     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
2a192     2B 03 2A 03 
2a196     29 03 26 03 
2a19a     25 03 24 03 
2a19e     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
2a1a2     1F 03 70 F7 
2a1a6     D0 EE 27 ED 
2a1aa     DB EC D4 EC 
2a1ae     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
2a1b2     F0 EC FA EC 
2a1b6     02 ED F9 F4 
2a1ba     7B 03 7C 03 
2a1be     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
2a1c2     75 03 73 03 
2a1c6     72 03 70 03 
2a1ca     6D 03 6C 03 
2a1ce     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
2a1d2     54 ED 22 ED 
2a1d6     22 ED 2C ED 
2a1da     35 ED 3F ED 
2a1de     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
2a1e2     14 01 C3 03 
2a1e6     C1 03 C0 03 
2a1ea     5F 01 A5 00 
2a1ee     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
2a1f2     7B 00 7C 00 
2a1f6     20 00 85 F1 
2a1fa     2A EE 89 ED 
2a1fe     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
2a202     80 ED 87 ED 
2a206     90 ED 9A ED 
2a20a     A3 ED 73 00 
2a20e     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
2a212     D0 00 D0 00 
2a216     D0 00 D0 00 
2a21a     D0 00 CF 00 
2a21e     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
2a222     80 F0 3D EE 
2a226     D5 ED C7 ED 
2a22a     CD ED D6 ED 
2a22e     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
2a232     F2 ED FA ED 
2a236     1D 01 29 01 
2a23a     27 01 27 01 
2a23e     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
2a242     25 01 26 01 
2a246     26 01 23 01 
2a24a     D0 F7 EC EF 
2a24e     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
2a252     1C EE 24 EE 
2a256     2D EE 37 EE 
2a25a     40 EE 47 EE 
2a25e     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
2a262     7D 01 7B 01 
2a266     7A 01 7A 01 
2a26a     79 01 78 01 
2a26e     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
2a272     84 FE DE F3 
2a276     6C EF 93 EE 
2a27a     72 EE 72 EE 
2a27e     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
2a282     8B EE 95 EE 
2a286     9E EE 15 FC 
2a28a     67 FE 67 FE 
2a28e     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
2a292     6B FE 6B FE 
2a296     6D FE 6D FE 
2a29a     6D FE 6F FE 
2a29e     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
2a2a2     DF EE CC EE 
2a2a6     CF EE D9 EE 
2a2aa     E1 EE EA EE 
2a2ae     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
2a2b2     5A FE C4 FE 
2a2b6     C3 FE C5 FE 
2a2ba     C6 FE C6 FE 
2a2be     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
2a2c2     C8 FE C7 FE 
2a2c6     DA FB 85 F1 
2a2ca     8D EF 31 EF 
2a2ce     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
2a2d2     34 EF 3E EF 
2a2d6     46 EF 4F EF 
2a2da     57 EF 0D FF 
2a2de     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
2a2e2     1F FF 1F FF 
2a2e6     21 FF 21 FF 
2a2ea     21 FF 21 FF 
2a2ee     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
2a2f2     15 F1 BE EF 
2a2f6     84 EF 7E EF 
2a2fa     88 EF 8F EF 
2a2fe     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
2a302     A9 EF 06 F2 
2a306     A6 FC AB FC 
2a30a     AD FC AE FC 
2a30e     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
2a312     B2 FC B4 FC 
2a316     B6 FC B7 FC 
2a31a     8B F4 BD F0 
2a31e     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
2a322     E4 EF EE EF 
2a326     F6 EF FD EF 
2a32a     04 F0 0E F0 
2a32e     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
2a332     0B FD 0D FD 
2a336     0F FD 11 FD 
2a33a     11 FD 13 FD 
2a33e     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
2a342     17 FD 64 F3 
2a346     CD F0 52 F0 
2a34a     41 F0 45 F0 
2a34e     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
2a352     5B F0 64 F0 
2a356     6D F0 FB FC 
2a35a     65 FD 68 FD 
2a35e     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
2a362     6C FD 6D FD 
2a366     6F FD 70 FD 
2a36a     72 FD B3 FB 
2a36e     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
2a372     A4 F0 99 F0 
2a376     A0 F0 A8 F0 
2a37a     AE F0 B9 F0 
2a37e     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
2a382     CB FB DD FB 
2a386     DE FB E0 FB 
2a38a     E3 FB E3 FB 
2a38e     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
2a392     E9 FB EC FB 
2a396     62 F7 27 F2 
2a39a     2A F1 FF F0 
2a39e     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
2a3a2     0C F1 13 F1 
2a3a6     1B F1 23 F1 
2a3aa     33 F2 3C FC 
2a3ae     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
2a3b2     42 FC 45 FC 
2a3b6     47 FC 48 FC 
2a3ba     4A FC 4C FC 
2a3be     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
2a3c2     20 F2 77 F1 
2a3c6     5C F1 5F F1 
2a3ca     64 F1 6C F1 
2a3ce     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
2a3d2     83 F1 DC F8 
2a3d6     9A FC 9A FC 
2a3da     9B FC 9E FC 
2a3de     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
2a3e2     A3 FC A4 FC 
2a3e6     A6 FC A9 FC 
2a3ea     90 F4 33 F2 
2a3ee     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
2a3f2     BA F1 BF F1 
2a3f6     C7 F1 CE F1 
2a3fa     D6 F1 DC F1 
2a3fe     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
2a402     F3 FC F5 FC 
2a406     FE FB 79 FB 
2a40a     62 FB 5F FB 
2a40e     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
2a412     6F FA AF F3 
2a416     53 F2 12 F2 
2a41a     0F F2 15 F2 
2a41e     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
2a422     2A F2 32 F2 
2a426     38 F2 9A FB 
2a42a     AF FB B1 FB 
2a42e     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
2a432     B7 FB B8 FB 
2a436     BA FB BC FB 
2a43a     C1 FB 3B F8 
2a43e     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
2a442     6E F2 6C F2 
2a446     74 F2 7A F2 
2a44a     81 F2 87 F2 
2a44e     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
2a452     06 FC 09 FC 
2a456     0C FC 0E FC 
2a45a     0F FC 12 FC 
2a45e     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
2a462     17 FC 1A FC 
2a466     B2 F6 7B F3 
2a46a     DD F2 C5 F2 
2a46e     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
2a472     D4 F2 DB F2 
2a476     E0 F2 E8 F2 
2a47a     28 F8 60 FC 
2a47e     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
2a482     64 FC 66 FC 
2a486     68 FC 6A FC 
2a48a     6D FC 52 FC 
2a48e     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
2a492     78 F3 24 F3 
2a496     1A F3 1E F3 
2a49a     24 F3 2A F3 
2a49e     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
2a4a2     3D F3 80 FA 
2a4a6     0C FB 0F FB 
2a4aa     10 FB 14 FB 
2a4ae     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
2a4b2     1B FB 1D FB 
2a4b6     1F FB 92 FA 
2a4ba     DE F4 AE F3 
2a4be     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
2a4c2     79 F3 7E F3 
2a4c6     84 F3 8C F3 
2a4ca     92 F3 97 F3 
2a4ce     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
2a4d2     67 FB 69 FB 
2a4d6     6B FB 6F FB 
2a4da     71 FB 72 FB 
2a4de     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
2a4e2     E3 F8 BA F4 
2a4e6     EE F3 CC F3 
2a4ea     CA F3 CF F3 
2a4ee     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
2a4f2     E2 F3 E8 F3 
2a4f6     ED F3 B7 FB 
2a4fa     BC FB BE FB 
2a4fe     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
2a502     C4 FB C6 FB 
2a506     C8 FB C9 FB 
2a50a     CC FB 8F F7 
2a50e     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
2a512     1E F4 1E F4 
2a516     24 F4 2A F4 
2a51a     30 F4 38 F4 
2a51e     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
2a522     AD FA B1 FA 
2a526     B4 FA B6 FA 
2a52a     BA FA BB FA 
2a52e     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
2a532     C2 FA C6 FA 
2a536     55 F6 C6 F4 
2a53a     7D F4 72 F4 
2a53e     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
2a542     83 F4 89 F4 
2a546     8F F4 94 F4 
2a54a     66 FA 03 FB 
2a54e     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
2a552     0A FB 0E FB 
2a556     10 FB 11 FB 
2a55a     16 FB 18 FB 
2a55e     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
2a562     F9 F4 CA F4 
2a566     C5 F4 CB F4 
2a56a     D1 F4 D7 F4 
2a56e     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
2a572     E8 F4 3F FB 
2a576     56 FB 58 FB 
2a57a     5A FB 5E FB 
2a57e     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
2a582     64 FB 64 FB 
2a586     69 FB 99 F9 
2a58a     E9 F5 33 F5 
2a58e     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
2a592     1D F5 22 F5 
2a596     27 F5 2E F5 
2a59a     32 F5 37 F5 
2a59e     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
2a5a2     BC FA BC FA 
2a5a6     C1 FA C2 FA 
2a5aa     C4 FA C8 FA 
2a5ae     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
2a5b2     F9 F7 DB F5 
2a5b6     78 F5 69 F5 
2a5ba     6A F5 70 F5 
2a5be     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
2a5c2     7F F5 85 F5 
2a5c6     6E F7 06 FB 
2a5ca     0A FB 0B FB 
2a5ce     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
2a5d2     14 FB 15 FB 
2a5d6     18 FB 1B FB 
2a5da     1D FB 70 F7 
2a5de     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
2a5e2     B6 F5 BB F5 
2a5e6     C0 F5 C6 F5 
2a5ea     CA F5 CF F5 
2a5ee     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
2a5f2     54 FB 56 FB 
2a5f6     5A FB 5B FB 
2a5fa     5E FB 5F FB 
2a5fe     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
2a602     67 FB 52 FB 
2a606     29 F7 33 F6 
2a60a     06 F6 02 F6 
2a60e     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
2a612     10 F6 16 F6 
2a616     1A F6 1F F6 
2a61a     81 FB 9F FB 
2a61e     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
2a622     51 FB F2 FA 
2a626     E3 FA E3 FA 
2a62a     E5 FA E9 FA 
2a62e     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
2a632     64 F6 4D F6 
2a636     4D F6 53 F6 
2a63a     57 F6 5C F6 
2a63e     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
2a642     6A F6 19 FB 
2a646     1E FB 22 FB 
2a64a     23 FB 24 FB 
2a64e     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
2a652     2C FB 2E FB 
2a656     32 FB F0 F8 
2a65a     01 F7 A5 F6 
2a65e     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
2a662     9F F6 A3 F6 
2a666     A6 F6 AC F6 
2a66a     B0 F6 EB F7 
2a66e     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
2a672     68 FB 6C FB 
2a676     6E FB 71 FB 
2a67a     72 FB 74 FB 
2a67e     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
2a682     71 F8 21 F7 
2a686     E5 F6 DD F6 
2a68a     E1 F6 E6 F6 
2a68e     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
2a692     F5 F6 F7 F6 
2a696     F7 FA AB FB 
2a69a     AD FB AF FB 
2a69e     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
2a6a2     B6 FB B9 FB 
2a6a6     BB FB BC FB 
2a6aa     21 FB 07 F8 
2a6ae     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
2a6b2     22 F7 26 F7 
2a6b6     2B F7 2E F7 
2a6ba     34 F7 38 F7 
2a6be     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
2a6c2     13 FB 16 FB 
2a6c6     17 FB 1B FB 
2a6ca     1E FB 20 FB 
2a6ce     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
2a6d2     26 FB 77 FA 
2a6d6     F3 F7 7C F7 
2a6da     67 F7 6A F7 
2a6de     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
2a6e2     74 F7 7A F7 
2a6e6     7E F7 82 F7 
2a6ea     53 FB 5A FB 
2a6ee     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
2a6f2     5F FB 63 FB 
2a6f6     65 FB 67 FB 
2a6fa     69 FB 6A FB 
2a6fe     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
2a702     B5 F7 A9 F7 
2a706     AD F7 B0 F7 
2a70a     B5 F7 B8 F7 
2a70e     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
2a712     6E F8 99 FB 
2a716     9C FB 9D FB 
2a71a     9F FB A4 FB 
2a71e     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
2a722     A9 FB AB FB 
2a726     AD FB 46 F9 
2a72a     26 F8 F0 F7 
2a72e     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
2a732     F4 F7 F8 F7 
2a736     FB F7 FF F7 
2a73a     03 F8 65 FA 
2a73e     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
2a742     2B FB 2F FB 
2a746     30 FB 32 FB 
2a74a     34 FB 38 FB 
2a74e     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
2a752     E9 F8 4A F8 
2a756     2E F8 2C F8 
2a75a     2F F8 36 F8 
2a75e     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
2a762     41 F8 44 F8 
2a766     4A FB 67 FB 
2a76a     68 FB 6B FB 
2a76e     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
2a772     73 FB 74 FB 
2a776     78 FB 7A FB 
2a77a     14 FB E7 F8 
2a77e     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
2a782     6D F8 70 F8 
2a786     73 F8 78 F8 
2a78a     7C F8 80 F8 
2a78e     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
2a792     A6 FB A7 FB 
2a796     A9 FB AC FB 
2a79a     AF FB B1 FB 
2a79e     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
2a7a2     B7 FB 73 FA 
2a7a6     F8 F8 B4 F8 
2a7aa     A9 F8 AB F8 
2a7ae     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
2a7b2     B4 F8 B8 F8 
2a7b6     BB F8 FA F8 
2a7ba     64 FB 65 FB 
2a7be     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
2a7c2     6D FB 6F FB 
2a7c6     70 FB 74 FB 
2a7ca     77 FB 77 FB 
2a7ce     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
2a7d2     E9 F8 E4 F8 
2a7d6     E8 F8 EB F8 
2a7da     EE F8 F2 F8 
2a7de     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
2a7e2     B5 FA 9F FB 
2a7e6     A1 FB A4 FB 
2a7ea     A5 FB A9 FB 
2a7ee     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
2a7f2     AE FB B1 FB 
2a7f6     B2 FB C7 F9 
2a7fa     39 F9 22 F9 
2a7fe     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
2a802     26 F9 2A F9 
2a806     2E F9 32 F9 
2a80a     33 F9 BA FB 
2a80e     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
2a812     DE FB E1 FB 
2a816     E2 FB E4 FB 
2a81a     E5 FB E7 FB 
2a81e     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
2a822     C5 F9 67 F9 
2a826     57 F9 56 F9 
2a82a     5B F9 5F F9 
2a82e     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
2a832     68 F9 6C F9 
2a836     0B FC 11 FC 
2a83a     14 FC 15 FC 
2a83e     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
2a842     B5 FB B5 FB 
2a846     B6 FB B8 FB 
2a84a     E9 FA C8 F9 
2a84e     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
2a852     90 F9 94 F9 
2a856     95 F9 99 F9 
2a85a     9D F9 9F F9 
2a85e     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
2a862     DE FB DF FB 
2a866     E2 FB E4 FB 
2a86a     E6 FB E8 FB 
2a86e     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
2a872     EF FB AC FA 
2a876     E9 F9 C7 F9 
2a87a     C3 F9 C8 F9 
2a87e     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
2a882     D0 F9 D4 F9 
2a886     D6 F9 0E FB 
2a88a     11 FC 13 FC 
2a88e     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
2a892     19 FC 1B FC 
2a896     1D FC 1E FC 
2a89a     21 FC 22 FC 
2a89e     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
2a8a2     F7 F9 F7 F9 
2a8a6     FB F9 FE F9 
2a8aa     00 FA 03 FA 
2a8ae     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
2a8b2     1B FC 45 FC 
2a8b6     46 FC 48 FC 
2a8ba     4A FC 4B FC 
2a8be     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
2a8c2     52 FC 54 FC 
2a8c6     F3 FB 82 FA 
2a8ca     35 FA 28 FA 
2a8ce     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
2a8d2     31 FA 32 FA 
2a8d6     37 FA 37 FA 
2a8da     3C FA 00 FC 
2a8de     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
2a8e2     09 FC 0B FC 
2a8e6     0F FC 12 FC 
2a8ea     12 FC 15 FC 
2a8ee     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
2a8f2     8D FA 60 FA 
2a8f6     5B FA 5C FA 
2a8fa     60 FA 61 FA 
2a8fe     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
2a902     6C FA 6D FA 
2a906     37 FC 3A FC 
2a90a     3B FC 3D FC 
2a90e     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
2a912     43 FC 44 FC 
2a916     45 FC 47 FC 
2a91a     51 FB AB FA 
2a91e     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
2a922     8E FA 91 FA 
2a926     93 FA 95 FA 
2a92a     98 FA 9B FA 
2a92e     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
2a932     68 FC 6A FC 
2a936     6C FC 6E FC 
2a93a     70 FC 72 FC 
2a93e     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
2a942     76 FC 3B FB 
2a946     D0 FA BB FA 
2a94a     B9 FA BD FA 
2a94e     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
2a952     C4 FA C6 FA 
2a956     CA FA 13 FC 
2a95a     3A FC 3A FC 
2a95e     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
2a962     41 FC 43 FC 
2a966     44 FC 47 FC 
2a96a     48 FC 3C FC 
2a96e     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
2a972     E6 FA E8 FA 
2a976     EB FA EE FA 
2a97a     F0 FA F2 FA 
2a97e     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
2a982     61 FC 66 FC 
2a986     68 FC 6B FC 
2a98a     6C FC 6E FC 
2a98e     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
2a992     73 FC 75 FC 
2a996     13 FC 3F FB 
2a99a     17 FB 12 FB 
2a99e     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
2a9a2     1A FB 1D FB 
2a9a6     1F FB 20 FB 
2a9aa     23 FB 92 FC 
2a9ae     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
2a9b2     96 FC 97 FC 
2a9b6     9A FC 9C FC 
2a9ba     9E FC 9F FC 
2a9be     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
2a9c2     5A FB 41 FB 
2a9c6     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
2a9ca     01 00 00 00 
2a9ce     00 00 00 00 
2a9d2     00 00 00 00 
2a9d6     00 00 00 00 | mouse  file "mouse2.def"
2a9da     00 00 00 00 
2a9de     00 00 00 00 
2a9e2     00 00 00 00 
2a9e6     00 00 00 00 | 	byte	$00[16]
2a9ea     01 01 00 00 
2a9ee     00 00 00 00 
2a9f2     00 00 00 00 
2a9f6     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2a9fa     00 00 00 00 
2a9fe     00 00 00 00 
2aa02     00 00 00 00 
2aa06     00 00 00 00 | 	byte	$00[16]
2aa0a     01 0D 01 00 
2aa0e     00 00 00 00 
2aa12     00 00 00 00 
2aa16     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2aa1a     00 00 00 00 
2aa1e     00 00 00 00 
2aa22     00 00 00 00 
2aa26     00 00 00 00 | 	byte	$00[16]
2aa2a     01 0D 0D 01 
2aa2e     00 00 00 00 
2aa32     00 00 00 00 
2aa36     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2aa3a     00 00 00 00 
2aa3e     00 00 00 00 
2aa42     00 00 00 00 
2aa46     00 00 00 00 | 	byte	$00[16]
2aa4a     01 0D 0D 0D 
2aa4e     01 00 00 00 
2aa52     00 00 00 00 
2aa56     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2aa5a     00 00 00 00 
2aa5e     00 00 00 00 
2aa62     00 00 00 00 
2aa66     00 00 00 00 | 	byte	$00[16]
2aa6a     01 0D 0D 0D 
2aa6e     0D 01 00 00 
2aa72     00 00 00 00 
2aa76     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2aa7a     00 00 00 00 
2aa7e     00 00 00 00 
2aa82     00 00 00 00 
2aa86     00 00 00 00 | 	byte	$00[16]
2aa8a     01 0D 0D 0D 
2aa8e     0D 0D 01 00 
2aa92     00 00 00 00 
2aa96     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
2aa9a     00 00 00 00 
2aa9e     00 00 00 00 
2aaa2     00 00 00 00 
2aaa6     00 00 00 00 | 	byte	$00[16]
2aaaa     01 0D 0D 0D 
2aaae     0D 0D 0D 01 
2aab2     00 00 00 00 
2aab6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
2aaba     00 00 00 00 
2aabe     00 00 00 00 
2aac2     00 00 00 00 
2aac6     00 00 00 00 | 	byte	$00[16]
2aaca     01 0D 0D 0D 
2aace     0D 0D 0D 0C 
2aad2     01 00 00 00 
2aad6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
2aada     00 00 00 00 
2aade     00 00 00 00 
2aae2     00 00 00 00 
2aae6     00 00 00 00 | 	byte	$00[16]
2aaea     01 0D 0D 0D 
2aaee     0D 0D 0D 0D 
2aaf2     0C 01 00 00 
2aaf6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
2aafa     00 00 00 00 
2aafe     00 00 00 00 
2ab02     00 00 00 00 
2ab06     00 00 00 00 | 	byte	$00[16]
2ab0a     01 0D 0D 0D 
2ab0e     0D 0D 0D 0D 
2ab12     0D 0C 01 00 
2ab16     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
2ab1a     00 00 00 00 
2ab1e     00 00 00 00 
2ab22     00 00 00 00 
2ab26     00 00 00 00 | 	byte	$00[16]
2ab2a     01 0D 0D 0D 
2ab2e     0D 0D 0D 0D 
2ab32     0D 0D 0B 01 
2ab36     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
2ab3a     00 00 00 00 
2ab3e     00 00 00 00 
2ab42     00 00 00 00 
2ab46     00 00 00 00 | 	byte	$00[16]
2ab4a     01 0D 0D 0D 
2ab4e     0C 0D 0D 03 
2ab52     01 01 01 01 
2ab56     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
2ab5a     00 00 00 00 
2ab5e     00 00 00 00 
2ab62     00 00 00 00 
2ab66     00 00 00 00 | 	byte	$00[16]
2ab6a     01 0D 0D 0C 
2ab6e     01 09 0D 03 
2ab72     00 00 00 00 
2ab76     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
2ab7a     00 00 00 00 
2ab7e     00 00 00 00 
2ab82     00 00 00 00 
2ab86     00 00 00 00 | 	byte	$00[16]
2ab8a     01 0D 0C 01 
2ab8e     00 01 0D 0B 
2ab92     01 00 00 00 
2ab96     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
2ab9a     00 00 00 00 
2ab9e     00 00 00 00 
2aba2     00 00 00 00 
2aba6     00 00 00 00 | 	byte	$00[16]
2abaa     01 0C 01 00 
2abae     00 01 0A 0D 
2abb2     01 00 00 00 
2abb6     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
2abba     00 00 00 00 
2abbe     00 00 00 00 
2abc2     00 00 00 00 
2abc6     00 00 00 00 | 	byte	$00[16]
2abca     01 01 00 00 
2abce     00 00 01 0D 
2abd2     0B 01 00 00 
2abd6     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
2abda     00 00 00 00 
2abde     00 00 00 00 
2abe2     00 00 00 00 
2abe6     00 00 00 00 
2abea     00 00 00 00 
2abee     00 00       | 	byte	$00[22]
2abf0     01 0B 0D 01 
2abf4     00 00 00 00 
2abf8     00 00 00 00 
2abfc     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ac00     00 00 00 00 
2ac04     00 00 00 00 
2ac08     00 00 00 00 
2ac0c     00 00 00 00 
2ac10     00          | 	byte	$00[17]
2ac11     01 01 00 00 
2ac15     00 00 00 00 
2ac19     00 00 00 00 
2ac1d     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ac21     00 00 00 00 
      ...             
2adc5     00 00 00 00 
2adc9     00          | 	byte	$00[425]
2adca                 | 
2adca     00 00       |              	org
2adcc 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
2add0 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
2add4 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
2add8 003             | 
2add8 003 00 30 04 F6 |                 mov     psramaddr,#0
2addc 004             | 
2addc 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
2ade0 005 20 00 00 FF 
2ade4 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
2ade8 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
2adec 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
2adf0 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
2adf4 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
2adf8 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
2adfc 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
2ae00 00d             | 
2ae00 00d 20 00 00 FF 
2ae04 00e 00 30 04 F1 |                 add 	psramaddr,##16384
2ae08 00f E0 03 00 FF 
2ae0c 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
2ae10 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
2ae14 012             | 
2ae14 012             |                 
2ae14 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
2ae18 013             |     
2ae18 013 01 2C 60 FD |                 cogid 	t11				' get id
2ae1c 014 00 00 EC FC |                 coginit #0,#0				' start the new program
2ae20 015 03 2C 60 FD |                 cogstop t11				' stop the loader
2ae24 016             | 
2ae24 016 00 00 00 00 | t11 		long 	0
2ae28 017 00 FF 07 00 | mailbox 	long 	$7FF00
2ae2c 018 00 00 00 00 | psramaddr 	long 	0
2ae30 019 00 00 00 00 | pslockval	long 	0
2ae34 01a 00 00 00 00 | cmd             long    0
2ae38 01b 00 00 00 00 | buf1            long    0
2ae3c 01c 00 40 00 00 | buf2            long    16384
2ae40 01d 44 AE 02 00 | 	long	@@@_dat_ + 8468
2ae44 01e 50 32 20 52 
2ae48 01f 65 74 72 6F 
2ae4c 020 6D 61 63 68 
2ae50 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
2ae54 022 42 41 53 49 
2ae58 023 43 20 76 65 
2ae5c 024 72 73 69 6F 
2ae60 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
2ae64 026 32 34 00 00 | 	byte	$32, $34, $00, $00
2ae68 027             | 	alignl
2ae68 027             | _hg010b_spin2_dat_
2ae68 027             | 
2ae68 027 00 00 00 00 
2ae6c 028 00 00 00 00 
2ae70 029 00 00 00 00 
2ae74 02a 00 00 00 00 
2ae78 02b 00 00 00    | vga_font       file "vgafont.def"
2ae7b 02b 7E 81 A5 81 
2ae7f 02c 81 BD 99 81 
2ae83 02d 81 7E 00 00 
2ae87 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
2ae8b 02f 7E FF DB FF 
2ae8f 030 FF C3 E7 FF 
2ae93 031 FF 7E 00 00 
2ae97 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
2ae9b 033 00 36 7F 7F 
2ae9f 034 7F 7F 3E 1C 
2aea3 035 08 00 00 00 
2aea7 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
2aeab 037 00 08 1C 3E 
2aeaf 038 7F 3E 1C 08 
2aeb3 039 00 00 00 00 
2aeb7 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
2aebb 03b 18 3C 3C E7 
2aebf 03c E7 E7 18 18 
2aec3 03d 3C 00 00 00 
2aec7 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
2aecb 03f 18 3C 7E FF 
2aecf 040 FF 7E 18 18 
2aed3 041 3C 00 00 00 
2aed7 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
2aedb 043 00 00 00 18 
2aedf 044 3C 3C 18 00 
2aee3 045 00 00 00 00 
2aee7 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
2aeeb 047 FF FF FF E7 
2aeef 048 C3 C3 E7 FF 
2aef3 049 FF FF FF FF 
2aef7 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
2aefb 04b 00 00 3C 66 
2aeff 04c 42 42 66 3C 
2af03 04d 00 00 00 00 
2af07 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
2af0b 04f FF FF C3 99 
2af0f 050 BD BD 99 C3 
2af13 051 FF FF FF FF 
2af17 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
2af1b 053 78 70 58 4C 
2af1f 054 1E 33 33 33 
2af23 055 33 1E 00 00 
2af27 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
2af2b 057 3C 66 66 66 
2af2f 058 66 3C 18 7E 
2af33 059 18 18 00 00 
2af37 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
2af3b 05b FC CC FC 0C 
2af3f 05c 0C 0C 0C 0E 
2af43 05d 0F 07 00 00 
2af47 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
2af4b 05f FE C6 FE C6 
2af4f 060 C6 C6 C6 E6 
2af53 061 E7 67 03 00 
2af57 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
2af5b 063 18 18 DB 3C 
2af5f 064 E7 3C DB 18 
2af63 065 18 00 00 00 
2af67 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
2af6b 067 03 07 0F 1F 
2af6f 068 7F 1F 0F 07 
2af73 069 03 01 00 00 
2af77 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
2af7b 06b 60 70 78 7C 
2af7f 06c 7F 7C 78 70 
2af83 06d 60 40 00 00 
2af87 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
2af8b 06f 18 3C 7E 18 
2af8f 070 18 18 7E 3C 
2af93 071 18 00 00 00 
2af97 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
2af9b 073 66 66 66 66 
2af9f 074 66 66 66    | 	byte	$66[7]
2afa2 075 00 66 66 00 
2afa6 076 00 00 00 00 
2afaa 077 00 FE DB DB 
2afae 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
2afb2 079 D8 D8 D8 00 
2afb6 07a 00 00 00 3E 
2afba 07b 63 06 1C 36 
2afbe 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
2afc2 07d 30 63 3E 00 
2afc6 07e 00 00 00 00 
2afca 07f 00 00 00 00 
2afce 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
2afd2 081 7F 7F 7F 00 
2afd6 082 00 00 00 00 
2afda 083 00 18 3C 7E 
2afde 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
2afe2 085 3C 18 7E 00 
2afe6 086 00 00 00 00 
2afea 087 00 18 3C 7E 
2afee 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
2aff2 089 18 18 18 00 
2aff6 08a 00 00 00 00 
2affa 08b 00 18 18 18 
2affe 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2b002 08d 7E 3C 18 00 
2b006 08e 00 00 00 00 
2b00a 08f 00 00 00 18 
2b00e 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
2b012 091 00 00 00 00 
2b016 092 00 00 00 00 
2b01a 093 00 00 00    | 	byte	$00[11]
2b01d 094 0C 06 7F 06 
2b021 095 0C 00 00 00 
2b025 096 00 00 00 00 
2b029 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b02d 098 00 03 03 03 
2b031 099 7F 00 00 00 
2b035 09a 00 00 00 00 
2b039 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b03d 09c 14 36 7F 36 
2b041 09d 14 00 00 00 
2b045 09e 00 00 00 00 
2b049 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
2b04d 0a0 1C 1C 3E 3E 
2b051 0a1 7F 7F 00 00 
2b055 0a2 00 00 00 00 
2b059 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
2b05d 0a4 7F 3E 3E 1C 
2b061 0a5 1C 08 00 00 
2b065 0a6 00 00 00 00 
2b069 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b06d 0a8 00 00 00 00 
2b071 0a9 00 00 00 00 
2b075 0aa 00 00 00 00 
2b079 0ab 00 00       | 	byte	$00[14]
2b07b 0ab 18 3C 3C 3C 
2b07f 0ac 18 18 18 00 
2b083 0ad 18 18 00 00 
2b087 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
2b08b 0af 66 24 00 00 
2b08f 0b0 00 00 00 00 
2b093 0b1 00 00 00 00 
2b097 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b09b 0b3 00 36 36 7F 
2b09f 0b4 36 36 36 7F 
2b0a3 0b5 36 36 00 00 
2b0a7 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
2b0ab 0b7 3E 63 43 03 
2b0af 0b8 3E 60 60 61 
2b0b3 0b9 63 3E 18 18 
2b0b7 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
2b0bb 0bb 00 00 43 63 
2b0bf 0bc 30 18 0C 06 
2b0c3 0bd 63 61 00 00 
2b0c7 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
2b0cb 0bf 1C 36 36 1C 
2b0cf 0c0 6E 3B 33 33 
2b0d3 0c1 33 6E 00 00 
2b0d7 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
2b0db 0c3 0C 0C 0C 06 
2b0df 0c4 00 00 00 00 
2b0e3 0c5 00 00 00 00 
2b0e7 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b0eb 0c7 30 18 0C 0C 
2b0ef 0c8 0C 0C 0C 0C 
2b0f3 0c9 18 30 00 00 
2b0f7 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
2b0fb 0cb 0C 18 30 30 
2b0ff 0cc 30 30 30 30 
2b103 0cd 18 0C 00 00 
2b107 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
2b10b 0cf 00 00 00 66 
2b10f 0d0 3C FF 3C 66 
2b113 0d1 00 00 00 00 
2b117 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
2b11b 0d3 00 00 00 18 
2b11f 0d4 18 7E 18 18 
2b123 0d5 00 00 00 00 
2b127 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
2b12b 0d7 00 00 00 00 
2b12f 0d8 00 00 00 00 | 	byte	$00[8]
2b133 0d9 18 18 18 0C 
2b137 0da 00 00 00 00 
2b13b 0db 00 00 00 00 
2b13f 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
2b143 0dd 00 00 00 00 
2b147 0de 00 00 00 00 
2b14b 0df 00 00 00 00 
2b14f 0e0 00 00 00 00 | 	byte	$00[16]
2b153 0e1 18 18 00 00 
2b157 0e2 00 00 00 00 
2b15b 0e3 00 00 40 60 
2b15f 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
2b163 0e5 03 01 00 00 
2b167 0e6 00 00 00 00 
2b16b 0e7 1C 36 63 63 
2b16f 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
2b173 0e9 36 1C 00 00 
2b177 0ea 00 00 00 00 
2b17b 0eb 18 1C 1E 18 
2b17f 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
2b183 0ed 18 7E 00 00 
2b187 0ee 00 00 00 00 
2b18b 0ef 3E 63 60 30 
2b18f 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
2b193 0f1 63 7F 00 00 
2b197 0f2 00 00 00 00 
2b19b 0f3 3E 63 60 60 
2b19f 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
2b1a3 0f5 63 3E 00 00 
2b1a7 0f6 00 00 00 00 
2b1ab 0f7 30 38 3C 36 
2b1af 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
2b1b3 0f9 30 78 00 00 
2b1b7 0fa 00 00 00 00 
2b1bb 0fb 7F 03 03 03 
2b1bf 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
2b1c3 0fd 63 3E 00 00 
2b1c7 0fe 00 00 00 00 
2b1cb 0ff 1C 06 03 03 
2b1cf 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
2b1d3 101 63 3E 00 00 
2b1d7 102 00 00 00 00 
2b1db 103 7F 63 60 60 
2b1df 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
2b1e3 105 0C 0C 00 00 
2b1e7 106 00 00 00 00 
2b1eb 107 3E 63 63 63 
2b1ef 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
2b1f3 109 63 3E 00 00 
2b1f7 10a 00 00 00 00 
2b1fb 10b 3E 63 63 63 
2b1ff 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
2b203 10d 30 1E 00 00 
2b207 10e 00 00 00 00 
2b20b 10f 00 00 00 18 
2b20f 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
2b213 111 18 18 00 00 
2b217 112 00 00 00 00 
2b21b 113 00 00 00 18 
2b21f 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
2b223 115 18 18 0C 00 
2b227 116 00 00 00 00 
2b22b 117 00 60 30 18 
2b22f 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
2b233 119 30 60 00 00 
2b237 11a 00 00 00 00 
2b23b 11b 00 00 00 7E 
2b23f 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
2b243 11d 00 00 00 00 
2b247 11e 00 00 00 00 
2b24b 11f 00          | 	byte	$00[9]
2b24c 120 06 0C 18 30 
2b250 121 60 30 18 0C 
2b254 122 06 00 00 00 
2b258 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
2b25c 124 63 63 30 18 
2b260 125 18 18 00 18 
2b264 126 18 00 00 00 
2b268 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
2b26c 128 3E 63 63 7B 
2b270 129 7B 7B 3B 03 
2b274 12a 3E 00 00 00 
2b278 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
2b27c 12c 1C 36 63 63 
2b280 12d 7F 63 63 63 
2b284 12e 63 00 00 00 
2b288 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
2b28c 130 66 66 66 3E 
2b290 131 66 66 66 66 
2b294 132 3F 00 00 00 
2b298 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
2b29c 134 66 43 03 03 
2b2a0 135 03 03 43 66 
2b2a4 136 3C 00 00 00 
2b2a8 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
2b2ac 138 36 66 66 66 
2b2b0 139 66 66 66 36 
2b2b4 13a 1F 00 00 00 
2b2b8 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
2b2bc 13c 66 46 16 1E 
2b2c0 13d 16 06 46 66 
2b2c4 13e 7F 00 00 00 
2b2c8 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
2b2cc 140 66 46 16 1E 
2b2d0 141 16 06 06 06 
2b2d4 142 0F 00 00 00 
2b2d8 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
2b2dc 144 66 43 03 03 
2b2e0 145 7B 63 63 66 
2b2e4 146 5C 00 00 00 
2b2e8 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
2b2ec 148 63 63 63 7F 
2b2f0 149 63 63 63 63 
2b2f4 14a 63 00 00 00 
2b2f8 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
2b2fc 14c 18 18 18 18 
2b300 14d 18 18 18 18 | 	byte	$18[8]
2b304 14e 3C 00 00 00 
2b308 14f 00 00 00 78 
2b30c 150 30 30 30 30 
2b310 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
2b314 152 1E 00 00 00 
2b318 153 00 00 00 67 
2b31c 154 66 66 36 1E 
2b320 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
2b324 156 67 00 00 00 
2b328 157 00 00 00 0F 
2b32c 158 06 06 06 06 
2b330 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
2b334 15a 7F 00 00 00 
2b338 15b 00 00 00 63 
2b33c 15c 77 7F 7F 6B 
2b340 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
2b344 15e 63 00 00 00 
2b348 15f 00 00 00 63 
2b34c 160 67 6F 7F 7B 
2b350 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
2b354 162 63 00 00 00 
2b358 163 00 00 00 3E 
2b35c 164 63 63 63 63 
2b360 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
2b364 166 3E 00 00 00 
2b368 167 00 00 00 3F 
2b36c 168 66 66 66 3E 
2b370 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
2b374 16a 0F 00 00 00 
2b378 16b 00 00 00 3E 
2b37c 16c 63 63 63 63 
2b380 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
2b384 16e 3E 30 70 00 
2b388 16f 00 00 00 3F 
2b38c 170 66 66 66 3E 
2b390 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
2b394 172 67 00 00 00 
2b398 173 00 00 00 3E 
2b39c 174 63 63 06 1C 
2b3a0 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
2b3a4 176 3E 00 00 00 
2b3a8 177 00 00 00 7E 
2b3ac 178 7E 5A 18 18 
2b3b0 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
2b3b4 17a 3C 00 00 00 
2b3b8 17b 00 00 00 63 
2b3bc 17c 63 63 63 63 
2b3c0 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
2b3c4 17e 3E 00 00 00 
2b3c8 17f 00 00 00 63 
2b3cc 180 63 63 63 63 
2b3d0 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
2b3d4 182 08 00 00 00 
2b3d8 183 00 00 00 63 
2b3dc 184 63 63 63 6B 
2b3e0 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
2b3e4 186 36 00 00 00 
2b3e8 187 00 00 00 63 
2b3ec 188 63 36 3E 1C 
2b3f0 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
2b3f4 18a 63 00 00 00 
2b3f8 18b 00 00 00 66 
2b3fc 18c 66 66 66 3C 
2b400 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
2b404 18e 3C 00 00 00 
2b408 18f 00 00 00 7F 
2b40c 190 63 61 30 18 
2b410 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
2b414 192 7F 00 00 00 
2b418 193 00 00 00 3C 
2b41c 194 0C 0C 0C 0C 
2b420 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
2b424 196 3C 00 00 00 
2b428 197 00 00 00 00 
2b42c 198 01 03 07 0E 
2b430 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
2b434 19a 40 00 00 00 
2b438 19b 00 00 00 3C 
2b43c 19c 30 30 30 30 
2b440 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
2b444 19e 3C 00 00 00 
2b448 19f 1C 36 00 00 
2b44c 1a0 00 00 00 00 
2b450 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b454 1a2 00 00 00 00 
2b458 1a3 00 00 00 00 
2b45c 1a4 00 00 00 00 
2b460 1a5 00 00 00 00 
2b464 1a6 00          | 	byte	$00[17]
2b465 1a6 FF 00 00 0C 
2b469 1a7 18 00 00 00 
2b46d 1a8 00 00 00 00 
2b471 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b475 1aa 00 00 00 00 
2b479 1ab 00 00 00 00 
2b47d 1ac 00          | 	byte	$00[9]
2b47e 1ac 1E 30 3E 33 
2b482 1ad 33 33 6E 00 
2b486 1ae 00 00 00 00 
2b48a 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
2b48e 1b0 1E 36 66 66 
2b492 1b1 66 66 3E 00 
2b496 1b2 00 00 00 00 
2b49a 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b49e 1b4 3E 63 03 03 
2b4a2 1b5 03 63 3E 00 
2b4a6 1b6 00 00 00 00 
2b4aa 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
2b4ae 1b8 3C 36 33 33 
2b4b2 1b9 33 33 6E 00 
2b4b6 1ba 00 00 00 00 
2b4ba 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b4be 1bc 3E 63 7F 03 
2b4c2 1bd 03 63 3E 00 
2b4c6 1be 00 00 00 00 
2b4ca 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
2b4ce 1c0 0C 1E 0C 0C 
2b4d2 1c1 0C 0C 1E 00 
2b4d6 1c2 00 00 00 00 
2b4da 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b4de 1c4 6E 33 33 33 
2b4e2 1c5 33 33 3E 30 
2b4e6 1c6 33 1E 00 00 
2b4ea 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
2b4ee 1c8 36 6E 66 66 
2b4f2 1c9 66 66 67 00 
2b4f6 1ca 00 00 00 00 
2b4fa 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
2b4fe 1cc 1C 18 18 18 
2b502 1cd 18 18 3C 00 
2b506 1ce 00 00 00 00 
2b50a 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
2b50e 1d0 70 60 60 60 
2b512 1d1 60 60 60 66 
2b516 1d2 66 3C 00 00 
2b51a 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
2b51e 1d4 66 36 1E 1E 
2b522 1d5 36 66 67 00 
2b526 1d6 00 00 00 00 
2b52a 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
2b52e 1d8 18 18 18 18 
2b532 1d9 18 18       | 	byte	$18[6]
2b534 1da 3C 00 00 00 
2b538 1db 00 00 00 00 
2b53c 1dc 00 00 37 7F 
2b540 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
2b544 1de 63 00 00 00 
2b548 1df 00 00 00 00 
2b54c 1e0 00 00 3B 66 
2b550 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
2b554 1e2 66 00 00 00 
2b558 1e3 00 00 00 00 
2b55c 1e4 00 00 3E 63 
2b560 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
2b564 1e6 3E 00 00 00 
2b568 1e7 00 00 00 00 
2b56c 1e8 00 00 3B 66 
2b570 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
2b574 1ea 3E 06 06 0F 
2b578 1eb 00 00 00 00 
2b57c 1ec 00 00 6E 33 
2b580 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
2b584 1ee 3E 30 30 78 
2b588 1ef 00 00 00 00 
2b58c 1f0 00 00 3B 6E 
2b590 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
2b594 1f2 0F 00 00 00 
2b598 1f3 00 00 00 00 
2b59c 1f4 00 00 3E 63 
2b5a0 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
2b5a4 1f6 3E 00 00 00 
2b5a8 1f7 00 00 00 08 
2b5ac 1f8 0C 0C 3F 0C 
2b5b0 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
2b5b4 1fa 38 00 00 00 
2b5b8 1fb 00 00 00 00 
2b5bc 1fc 00 00 33 33 
2b5c0 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
2b5c4 1fe 6E 00 00 00 
2b5c8 1ff 00 00 00 00 
2b5cc 200 00 00 63 63 
2b5d0 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
2b5d4 202 1C 00 00 00 
2b5d8 203 00 00 00 00 
2b5dc 204 00 00 63 63 
2b5e0 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
2b5e4 206 36 00 00 00 
2b5e8 207 00 00 00 00 
2b5ec 208 00 00 63 36 
2b5f0 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
2b5f4 20a 63 00 00 00 
2b5f8 20b 00 00 00 00 
2b5fc 20c 00 00 63 63 
2b600 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
2b604 20e 7E 60 30 1F 
2b608 20f 00 00 00 00 
2b60c 210 00 00 7F 33 
2b610 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
2b614 212 7F 00 00 00 
2b618 213 00 00 00 70 
2b61c 214 18 18 18 0E 
2b620 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
2b624 216 70 00 00 00 
2b628 217 00 00 00 18 
2b62c 218 18 18 18 18 
2b630 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
2b634 21a 18 00 00 00 
2b638 21b 00 00 00 0E 
2b63c 21c 18 18 18 70 
2b640 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
2b644 21e 0E 00 00 00 
2b648 21f 6E 3B 00 00 
2b64c 220 00 00 00 00 
2b650 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b654 222 00 00 00 00 
2b658 223 00 00 00 00 
2b65c 224 00 00       | 	byte	$00[10]
2b65e 224 08 1C 36 63 
2b662 225 63 63 7F 00 
2b666 226 00 00 00 00 
2b66a 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
2b66e 228 03 03 03 03 
2b672 229 43 66 3C 18 
2b676 22a 30 1E 00 00 
2b67a 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
2b67e 22c 33 33 33 33 
2b682 22d 33 33       | 	byte	$33[6]
2b684 22e 6E 00 00 00 
2b688 22f 00 00 60 30 
2b68c 230 18 00 3E 63 
2b690 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
2b694 232 3E 00 00 00 
2b698 233 00 00 08 1C 
2b69c 234 36 00 1E 30 
2b6a0 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
2b6a4 236 6E 00 00 00 
2b6a8 237 00 00 00 00 
2b6ac 238 33 00 1E 30 
2b6b0 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
2b6b4 23a 6E 00 00 00 
2b6b8 23b 00 00 1C 36 
2b6bc 23c 1C 00 33 33 
2b6c0 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
2b6c4 23e 6E 00 00 00 
2b6c8 23f 00 00 60 30 
2b6cc 240 18 00 3E 63 
2b6d0 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
2b6d4 242 3E 00 00 00 
2b6d8 243 00 00 00 00 
2b6dc 244 00 00 3E 63 
2b6e0 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
2b6e4 246 3E 18 30 1E 
2b6e8 247 00 00 00 1C 
2b6ec 248 58 78 38 18 
2b6f0 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
2b6f4 24a 3C 00 00 00 
2b6f8 24b 00 00 00 00 
2b6fc 24c 63 00 3E 63 
2b700 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
2b704 24e 3E 00 00 00 
2b708 24f 66 33 00 3E 
2b70c 250 63 63 63 63 
2b710 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
2b714 252 3E 00 00 00 
2b718 253 00 00 CC 66 
2b71c 254 33 00 3E 63 
2b720 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
2b724 256 3E 00 00 00 
2b728 257 00 00 18 3C 
2b72c 258 66 00 1C 18 
2b730 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
2b734 25a 3C 00 00 00 
2b738 25b 30 18 00 7F 
2b73c 25c 63 61 30 18 
2b740 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
2b744 25e 7F 00 00 00 
2b748 25f 00 63 00 08 
2b74c 260 1C 36 63 63 
2b750 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
2b754 262 63 00 00 00 
2b758 263 30 18 00 3C 
2b75c 264 66 43 03 03 
2b760 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
2b764 266 3C 00 00 00 
2b768 267 30 18 00 7F 
2b76c 268 66 46 16 1E 
2b770 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
2b774 26a 7F 00 00 00 
2b778 26b 0C 06 00 0F 
2b77c 26c 06 06 06 06 
2b780 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
2b784 26e 7F 00 00 00 
2b788 26f 30 18 00 1C 
2b78c 270 18 18 18 18 
2b790 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
2b794 272 3C 00 00 00 
2b798 273 00 00 08 1C 
2b79c 274 36 00 3E 63 
2b7a0 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
2b7a4 276 3E 00 00 00 
2b7a8 277 00 00 00 00 
2b7ac 278 63 00 3E 63 
2b7b0 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
2b7b4 27a 3E 00 00 00 
2b7b8 27b 00 00 00 6F 
2b7bc 27c 46 26 06 06 
2b7c0 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
2b7c4 27e 7F 00 00 00 
2b7c8 27f 00 00 00 6E 
2b7cc 280 4C 2C 0C 0C 
2b7d0 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
2b7d4 282 1E 00 00 00 
2b7d8 283 30 18 00 3E 
2b7dc 284 63 63 06 1C 
2b7e0 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
2b7e4 286 3E 00 00 00 
2b7e8 287 00 00 60 30 
2b7ec 288 18 00 3E 63 
2b7f0 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
2b7f4 28a 3E 00 00 00 
2b7f8 28b 00 63 00 3E 
2b7fc 28c 63 63 63 63 
2b800 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
2b804 28e 3E 00 00 00 
2b808 28f 00 63 00 63 
2b80c 290 63 63 63 63 
2b810 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
2b814 292 3E 00 00 00 
2b818 293 6C 38 00 7E 
2b81c 294 7E 5A 18 18 
2b820 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
2b824 296 3C 00 00 00 
2b828 297 00 00 60 48 
2b82c 298 2C 0C 3F 0C 
2b830 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
2b834 29a 38 00 00 00 
2b838 29b 00 00 00 0F 
2b83c 29c 26 36 1E 0E 
2b840 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
2b844 29e 7F 00 00 00 
2b848 29f 00 00 00 00 
2b84c 2a0 00 63 36 1C 
2b850 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
2b854 2a2 00 00 00 00 
2b858 2a3 00 00       | 	byte	$00[6]
2b85a 2a3 36 1C 08 00 
2b85e 2a4 3E 63 03 03 
2b862 2a5 03 63 3E 00 
2b866 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
2b86a 2a7 30 18 0C 00 
2b86e 2a8 1E 30 3E 33 
2b872 2a9 33 33 6E 00 
2b876 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
2b87a 2ab 60 30 18 00 
2b87e 2ac 1C 18 18 18 
2b882 2ad 18 18 3C 00 
2b886 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
2b88a 2af 60 30 18 00 
2b88e 2b0 3E 63 63 63 
2b892 2b1 63 63 3E 00 
2b896 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
2b89a 2b3 30 18 0C 00 
2b89e 2b4 33 33 33 33 
2b8a2 2b5 33 33 6E 00 
2b8a6 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
2b8aa 2b7 00 08 1C 36 
2b8ae 2b8 63 63 7F 63 
2b8b2 2b9 63 63 63 18 
2b8b6 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
2b8ba 2bb 00 00 00 00 
2b8be 2bc 1E 30 3E 33 
2b8c2 2bd 33 33 6E 18 
2b8c6 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
2b8ca 2bf 00 7F 63 61 
2b8ce 2c0 30 18 0C 06 
2b8d2 2c1 43 63 7F 00 
2b8d6 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
2b8da 2c3 36 1C 08 00 
2b8de 2c4 7F 33 18 0C 
2b8e2 2c5 06 63 7F 00 
2b8e6 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
2b8ea 2c7 00 7F 66 46 
2b8ee 2c8 16 1E 16 06 
2b8f2 2c9 46 66 7F 18 
2b8f6 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
2b8fa 2cb 00 00 00 00 
2b8fe 2cc 3E 63 7F 03 
2b902 2cd 03 63 3E 18 
2b906 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
2b90a 2cf 00 3C 66 03 
2b90e 2d0 1F 03 0F 03 
2b912 2d1 03 66 3C 00 
2b916 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
2b91a 2d3 60 30 18 00 
2b91e 2d4 7F 33 18 0C 
2b922 2d5 06 63 7F 00 
2b926 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
2b92a 2d7 00 3C 66 43 
2b92e 2d8 03 03 03 03 
2b932 2d9 43 66 3C 00 
2b936 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
2b93a 2db 00 00 00 00 
2b93e 2dc 3E 63 06 1C 
2b942 2dd 30 63 3E 18 
2b946 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
2b94a 2df 00 00 00 00 
2b94e 2e0 00 00       | 	byte	$00[6]
2b950 2e1 6C 36 1B 36 
2b954 2e2 6C 00 00 00 
2b958 2e3 00 00 00 00 
2b95c 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b960 2e5 1B 36 6C 36 
2b964 2e6 1B 00 00 00 
2b968 2e7 88 22 88 22 
2b96c 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
2b970 2e9 88 22 88 22 
2b974 2ea 88 22 88 22 
2b978 2eb AA 55 AA 55 
2b97c 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
2b980 2ed AA 55 AA 55 
2b984 2ee AA 55 AA 55 
2b988 2ef BB EE BB EE 
2b98c 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
2b990 2f1 BB EE BB EE 
2b994 2f2 BB EE BB EE 
2b998 2f3 18 18 18 18 
2b99c 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
2b9a0 2f5 18 18 18 18 
2b9a4 2f6 18 18 18 18 
2b9a8 2f7 18 18 18 18 
2b9ac 2f8 18 18 18    | 	byte	$18[15]
2b9af 2f8 1F 18 18 18 
2b9b3 2f9 18 18 18 18 
2b9b7 2fa 18 30 18 00 
2b9bb 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
2b9bf 2fc 63 7F 63 63 
2b9c3 2fd 63 63 00 00 
2b9c7 2fe 00 1C 36 00 
2b9cb 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
2b9cf 300 63 7F 63 63 
2b9d3 301 63 63 00 00 
2b9d7 302 00 36 1C 00 
2b9db 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
2b9df 304 1E 16 06 46 
2b9e3 305 66 7F 00 00 
2b9e7 306 00 00 00 00 
2b9eb 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
2b9ef 308 1C 30 60 63 
2b9f3 309 63 3E 18 30 
2b9f7 30a 1E 6C 6C 6C 
2b9fb 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
2b9ff 30c 6F 6C 6C 6C 
2ba03 30d 6C 6C 6C 6C 
2ba07 30e 6C 6C 6C 6C 
2ba0b 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2ba0f 310 6C 6C 6C 6C 
2ba13 311 6C 6C 6C 6C 
2ba17 312 6C          | 	byte	$6c[9]
2ba18 313 00 00 00 00 
2ba1c 314 00          | 	byte	$00[5]
2ba1d 314 7F 60 6F 6C 
2ba21 315 6C 6C 6C 6C 
2ba25 316 6C 6C 6C 6C 
2ba29 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2ba2d 318 6F 60 7F 00 
2ba31 319 00 00 00 00 
2ba35 31a 00 00 00 18 
2ba39 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
2ba3d 31c 61 30 18 0C 
2ba41 31d 06 43 63 7F 
2ba45 31e 00 00 00 00 
2ba49 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
2ba4d 320 00 7F 33 18 
2ba51 321 0C 06 63 7F 
2ba55 322 00 00 00 00 
2ba59 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
2ba5d 324 00 00 1F 18 
2ba61 325 18 18 18 18 
2ba65 326 18 18 18 18 
2ba69 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2ba6d 328 18 18 F8 00 
2ba71 329 00 00 00 00 
2ba75 32a 00 00 00 18 
2ba79 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
2ba7d 32c 18 18 FF 00 
2ba81 32d 00 00 00 00 
2ba85 32e 00 00 00 00 
2ba89 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ba8d 330 00 00 FF 18 
2ba91 331 18 18 18 18 
2ba95 332 18 18 18 18 
2ba99 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2ba9d 334 18 18 F8 18 
2baa1 335 18 18 18 18 
2baa5 336 18 18 18 00 
2baa9 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
2baad 338 00 00 FF 00 
2bab1 339 00 00 00 00 
2bab5 33a 00 00 00 18 
2bab9 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
2babd 33c 18 18 FF 18 
2bac1 33d 18 18 18 18 
2bac5 33e 18 18 18 63 
2bac9 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
2bacd 340 36 63 63 7F 
2bad1 341 63 63 63 63 
2bad5 342 00 00 00 00 
2bad9 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
2badd 344 00 1E 30 3E 
2bae1 345 33 33 33 6E 
2bae5 346 00 00 00 6C 
2bae9 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
2baed 348 EC 0C FC 00 
2baf1 349 00 00 00 00 
2baf5 34a 00 00 00 00 
2baf9 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bafd 34c FC 0C EC 6C 
2bb01 34d 6C 6C 6C 6C 
2bb05 34e 6C 6C 6C 6C 
2bb09 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2bb0d 350 EF 00 FF 00 
2bb11 351 00 00 00 00 
2bb15 352 00 00 00 00 
2bb19 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bb1d 354 FF 00 EF 6C 
2bb21 355 6C 6C 6C 6C 
2bb25 356 6C 6C 6C 6C 
2bb29 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2bb2d 358 EC 0C EC 6C 
2bb31 359 6C 6C 6C 6C 
2bb35 35a 6C 6C 6C 00 
2bb39 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
2bb3d 35c FF 00 FF 00 
2bb41 35d 00 00 00 00 
2bb45 35e 00 00 00 6C 
2bb49 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
2bb4d 360 EF 00 EF 6C 
2bb51 361 6C 6C 6C 6C 
2bb55 362 6C 6C 6C 00 
2bb59 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
2bb5d 364 63 3E 63 63 
2bb61 365 63 63 3E 63 
2bb65 366 00 00 00 00 
2bb69 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
2bb6d 368 30 3C 36 33 
2bb71 369 33 33 33 6E 
2bb75 36a 00 00 00 00 
2bb79 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
2bb7d 36c 66 66 6F 66 
2bb81 36d 66 66 36 1F 
2bb85 36e 00 00 00 36 
2bb89 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
2bb8d 370 66 66 66 66 
2bb91 371 66 66       | 	byte	$66[6]
2bb93 371 36 1F 00 00 
2bb97 372 00 00 63 00 
2bb9b 373 7F 66 46 16 
2bb9f 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
2bba3 375 66 7F 00 00 
2bba7 376 00 6C 38 00 
2bbab 377 38 30 30 3C 
2bbaf 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
2bbb3 379 33 6E 00 00 
2bbb7 37a 00 36 1C 00 
2bbbb 37b 63 67 6F 7F 
2bbbf 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
2bbc3 37d 63 63 00 00 
2bbc7 37e 00 30 18 00 
2bbcb 37f 3C 18 18 18 
2bbcf 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
2bbd3 381 18 3C 00 00 
2bbd7 382 00 3C 66 00 
2bbdb 383 3C 18 18 18 
2bbdf 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
2bbe3 385 18 3C 00 00 
2bbe7 386 00 00 00 36 
2bbeb 387 1C 08 00 3E 
2bbef 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
2bbf3 389 63 3E 00 00 
2bbf7 38a 00 18 18 18 
2bbfb 38b 18 18 18 18 
2bbff 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
2bc03 38d 00 00 00 00 
2bc07 38e 00 00 00 00 
2bc0b 38f 00 00 00 00 | 	byte	$00[12]
2bc0f 390 F8 18 18 18 
2bc13 391 18 18 18 18 
2bc17 392 18 FF FF FF 
2bc1b 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
2bc1f 394 FF FF FF FF 
2bc23 395 FF FF FF FF 
2bc27 396 FF          | 	byte	$ff[9]
2bc28 397 00 00 00 00 
2bc2c 398 00 00 00    | 	byte	$00[7]
2bc2f 398 FF FF FF FF 
2bc33 399 FF FF FF FF 
2bc37 39a FF          | 	byte	$ff[9]
2bc38 39b 00 00 00 7E 
2bc3c 39c 7E 5A 18 18 
2bc40 39d 18 18 18 18 
2bc44 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
2bc48 39f 1C 36 1C 63 
2bc4c 3a0 63 63 63 63 
2bc50 3a1 63 63 63 63 
2bc54 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2bc58 3a3 FF FF FF FF 
2bc5c 3a4 FF FF FF    | 	byte	$ff[7]
2bc5f 3a4 00 00 00 00 
2bc63 3a5 00 00 00 00 
2bc67 3a6 00          | 	byte	$00[9]
2bc68 3a7 30 18 00 3E 
2bc6c 3a8 63 63 63 63 
2bc70 3a9 63 63 63 63 
2bc74 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2bc78 3ab 00 00 00 1E 
2bc7c 3ac 33 33 33 1B 
2bc80 3ad 33 63 63 63 
2bc84 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
2bc88 3af 1C 36 00 3E 
2bc8c 3b0 63 63 63 63 
2bc90 3b1 63 63 63 63 
2bc94 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2bc98 3b3 30 18 00 63 
2bc9c 3b4 67 6F 7F 7B 
2bca0 3b5 73 63 63 63 
2bca4 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
2bca8 3b7 00 00 60 30 
2bcac 3b8 18 00 3B 66 
2bcb0 3b9 66 66 66 66 
2bcb4 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
2bcb8 3bb 00 00 36 1C 
2bcbc 3bc 08 00 3B 66 
2bcc0 3bd 66 66 66 66 
2bcc4 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
2bcc8 3bf 36 1C 00 3E 
2bccc 3c0 63 63 06 1C 
2bcd0 3c1 30 60 63 63 
2bcd4 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
2bcd8 3c3 00 00 36 1C 
2bcdc 3c4 08 00 3E 63 
2bce0 3c5 06 1C 30 63 
2bce4 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
2bce8 3c7 30 18 00 3F 
2bcec 3c8 66 66 66 3E 
2bcf0 3c9 36 66 66 66 
2bcf4 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
2bcf8 3cb 30 18 00 63 
2bcfc 3cc 63 63 63 63 
2bd00 3cd 63 63 63 63 
2bd04 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2bd08 3cf 00 00 60 30 
2bd0c 3d0 18 00 3B 6E 
2bd10 3d1 66 06 06 06 
2bd14 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
2bd18 3d3 66 33 00 63 
2bd1c 3d4 63 63 63 63 
2bd20 3d5 63 63 63 63 
2bd24 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2bd28 3d7 00 00 60 30 
2bd2c 3d8 18 00 63 63 
2bd30 3d9 63 63 63 63 
2bd34 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
2bd38 3db 30 18 00 66 
2bd3c 3dc 66 66 66 3C 
2bd40 3dd 18 18 18 18 
2bd44 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
2bd48 3df 00 00 00 08 
2bd4c 3e0 0C 0C 3F 0C 
2bd50 3e1 0C 0C 0C 6C 
2bd54 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
2bd58 3e3 30 18 00 00 
2bd5c 3e4 00 00 00 00 
2bd60 3e5 00 00 00 00 
2bd64 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bd68 3e7 00 00 00 00 
2bd6c 3e8 00 00 00 00 | 	byte	$00[8]
2bd70 3e9 7F 00 00 00 
2bd74 3ea 00 00 00 00 
2bd78 3eb 66 33 00 00 
2bd7c 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
2bd80 3ed 00 00 00 00 
2bd84 3ee 00 00 00 00 
2bd88 3ef 00 00 00 00 
2bd8c 3f0 00 00 00 00 
2bd90 3f1 00 00 00 00 
2bd94 3f2 00          | 	byte	$00[21]
2bd95 3f2 0C 06 3C 36 
2bd99 3f3 1C 00 00 00 
2bd9d 3f4 00 00 00 00 
2bda1 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bda5 3f6 00 00 00 63 
2bda9 3f7 3E 00 00 00 
2bdad 3f8 00 00 00 00 
2bdb1 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bdb5 3fa 00 00 00 00 
2bdb9 3fb 3E 63 06 1C 
2bdbd 3fc 36 63 63 36 
2bdc1 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
2bdc5 3fe 00 00 00 00 
2bdc9 3ff 00 00 00 00 | 	byte	$00[8]
2bdcd 400 18 00 7E 00 
2bdd1 401 18 00 00 00 
2bdd5 402 00 00 00 00 
2bdd9 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bddd 404 00 00 00 00 
2bde1 405 00 00 00 00 | 	byte	$00[8]
2bde5 406 18 30 1E 00 
2bde9 407 00 00 1C 36 
2bded 408 36 1C 00 00 
2bdf1 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
2bdf5 40a 00 00 00 00 
2bdf9 40b 63 00 00 00 
2bdfd 40c 00 00 00 00 
2be01 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2be05 40e 00 00 00 18 
2be09 40f 18 00 00 00 
2be0d 410 00 00 00 00 
2be11 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2be15 412 00 00 00 00 
2be19 413 00          | 	byte	$00[5]
2be1a 413 CC 66 33 00 
2be1e 414 33 33 33 33 
2be22 415 33 33 6E 00 
2be26 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
2be2a 417 00 3F 66 66 
2be2e 418 66 3E 36 66 
2be32 419 66 66 6F 00 
2be36 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
2be3a 41b 36 1C 08 00 
2be3e 41c 3B 6E 66 06 
2be42 41d 06 06 0F 00 
2be46 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
2be4a 41f 00 00 00 7E 
2be4e 420 7E 7E 7E 7E 
2be52 421 7E 7E 00 00 
2be56 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
2be5a 423 00 00 00 00 
2be5e 424 00 00 00 00 
2be62 425 00 00 00 00 
2be66 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2be68 427             | 'vga_font       file "vgafont.def"
2be68 427 00 00 00 00 
      ...             
2be98 433 00 00 00 00 
2be9c 434 00 00 00    | st_font        file "st4font.def"
2be9f 434 FF FF 00 00 
2bea3 435 00 00 00 00 
2bea7 436 00 18 18 18 
2beab 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2beaf 438 18 18 18 18 
2beb3 439 18 18 18 18 
2beb7 43a 18          | 	byte	$18[9]
2beb8 43b 00 00 00 00 
2bebc 43c 00 00 00    | 	byte	$00[7]
2bebf 43c FF FF 18 18 
2bec3 43d 18 18 18 18 
2bec7 43e 18 18 18 18 
2becb 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2becf 440 FF FF 00 00 
2bed3 441 00 00 00 00 
2bed7 442 00 18 18 18 
2bedb 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2bedf 444 1F 1F 18 18 
2bee3 445 18 18 18 18 
2bee7 446 18 18 18 18 
2beeb 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2beef 448 F8 F8 18 18 
2bef3 449 18 18 18 18 
2bef7 44a 18 00 00 00 
2befb 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2beff 44c 1F 1F 18 18 
2bf03 44d 18 18 18 18 
2bf07 44e 18 00 00 00 
2bf0b 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2bf0f 450 F8 F8 18 18 
2bf13 451 18 18 18 18 
2bf17 452 18 18 18 18 
2bf1b 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2bf1f 454 1F 1F 00 00 
2bf23 455 00 00 00 00 
2bf27 456 00 18 18 18 
2bf2b 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2bf2f 458 F8 F8 00 00 
2bf33 459 00 00 00 00 
2bf37 45a 00 18 18 18 
2bf3b 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2bf3f 45c FF FF 18 18 
2bf43 45d 18 18 18 18 
2bf47 45e 18 00 00 18 
2bf4b 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
2bf4f 460 66 7E 7E 66 
2bf53 461 66 66 66 30 
2bf57 462 18 00 00 7E 
2bf5b 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
2bf5f 464 3E 06 06 06 
2bf63 465 06 7E 7E 18 
2bf67 466 0C 30 18 3C 
2bf6b 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
2bf6f 468 06 06 06 66 
2bf73 469 66 7E 3C 00 
2bf77 46a 00 30 18 66 
2bf7b 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
2bf7f 46c 7E 7E 76 76 
2bf83 46d 66 66 66 00 
2bf87 46e 00 30 18 7C 
2bf8b 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
2bf8f 470 1C 38 70 60 
2bf93 471 60 7E 3E 00 
2bf97 472 00 30 18 7E 
2bf9b 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
2bf9f 474 18 0C 0C 06 
2bfa3 475 06 7E 7E 00 
2bfa7 476 00 18 18 00 
2bfab 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
2bfaf 478 18 18 0C 0C 
2bfb3 479 06 7E 7E 00 
2bfb7 47a 00 30 18 3C 
2bfbb 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
2bfbf 47c 66 66 66 66 
2bfc3 47d 66          | 	byte	$66[5]
2bfc4 47e 7E 3C 00 00 
2bfc8 47f 00 00 06 06 
2bfcc 480 06 06 16 1E 
2bfd0 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
2bfd4 482 7E 7E 00 00 
2bfd8 483 00 00 00 00 
2bfdc 484 00 3C 7C 60 
2bfe0 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
2bfe4 486 7E 7C 30 18 
2bfe8 487 00 00 00 00 
2bfec 488 00 3C 7E 66 
2bff0 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
2bff4 48a 7E 7C 18 0C 
2bff8 48b 00 00 30 18 
2bffc 48c 00 3C 3E 06 
2c000 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
2c004 48e 7E 7C 00 00 
2c008 48f 00 00 30 18 
2c00c 490 00 3E 7E 66 
2c010 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
2c014 492 66 66 00 00 
2c018 493 00 00 30 18 
2c01c 494 00 7C 7E 06 
2c020 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
2c024 496 7E 3E 00 00 
2c028 497 00 00 30 18 
2c02c 498 00 7E 7E 30 
2c030 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
2c034 49a 7E 7E 00 00 
2c038 49b 00 00 18 18 
2c03c 49c 00 7E 7E 30 
2c040 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
2c044 49e 7E 7E 00 00 
2c048 49f 00 00 30 18 
2c04c 4a0 00 3C 7E 66 
2c050 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
2c054 4a2 7E 3C 00 00 
2c058 4a3 00 00 1C 1C 
2c05c 4a4 18 18 38 3C 
2c060 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
2c064 4a6 3C 3C 00 00 
2c068 4a7 00 00 00 00 
2c06c 4a8 00 00 00 00 
2c070 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2c074 4aa 00 00 00 00 
2c078 4ab 00 00       | 	byte	$00[6]
2c07a 4ab 18 18 18 18 
2c07e 4ac 18 18 18 18 | 	byte	$18[8]
2c082 4ad 00 00 18 18 
2c086 4ae 00 00 00 00 
2c08a 4af 66 66 66 66 
2c08e 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
2c092 4b1 00 00 00 00 
2c096 4b2 00 00 00 00 
2c09a 4b3 00          | 	byte	$00[9]
2c09b 4b3 66 66 FF FF 
2c09f 4b4 66 66 FF FF 
2c0a3 4b5 66 66 00 00 
2c0a7 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
2c0ab 4b7 7C 7E 06 06 
2c0af 4b8 3E 7C 60 60 
2c0b3 4b9 7E 3E 18 18 
2c0b7 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
2c0bb 4bb 66 30 30 18 
2c0bf 4bc 18 0C 0C 66 
2c0c3 4bd 66 00 00 00 
2c0c7 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
2c0cb 4bf 66 66 3C 1C 
2c0cf 4c0 1C FC FE 66 
2c0d3 4c1 66 FE FC 00 
2c0d7 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
2c0db 4c3 18 18 18 18 
2c0df 4c4 00 00 00 00 
2c0e3 4c5 00 00 00 00 
2c0e7 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
2c0eb 4c7 18 1C 0C 0C 
2c0ef 4c8 0C 0C 0C 0C 
2c0f3 4c9 1C 18 30 00 
2c0f7 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
2c0fb 4cb 18 38 30 30 
2c0ff 4cc 30 30 30 30 
2c103 4cd 38 18 0C 00 
2c107 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
2c10b 4cf 66 66 3C 3C 
2c10f 4d0 FF FF 3C 3C 
2c113 4d1 66 66 00 00 
2c117 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
2c11b 4d3 00 18 18 18 
2c11f 4d4 7E 7E 18 18 
2c123 4d5 18 00 00 00 
2c127 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2c12b 4d7 00 00 00 00 
2c12f 4d8 00 00       | 	byte	$00[6]
2c131 4d9 18 18 18 18 
2c135 4da 18          | 	byte	$18[5]
2c136 4da 0C 04 00 00 
2c13a 4db 00 00 00 00 
2c13e 4dc 7E 7E 00 00 
2c142 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
2c146 4de 00 00 00 00 
2c14a 4df 00 00 00 00 
2c14e 4e0 00 00 00 00 
2c152 4e1 00          | 	byte	$00[13]
2c153 4e1 18 18 18 00 
2c157 4e2 00 00 00 60 
2c15b 4e3 60 60 30 30 
2c15f 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
2c163 4e5 06 06 06 00 
2c167 4e6 00 00 00 3C 
2c16b 4e7 7E 66 66 66 
2c16f 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
2c173 4e9 66 7E 3C 00 
2c177 4ea 00 00 00 18 
2c17b 4eb 18 1C 1C 18 
2c17f 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
2c183 4ed 18 7E 7E 00 
2c187 4ee 00 00 00 3C 
2c18b 4ef 7E 66 66 30 
2c18f 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
2c193 4f1 0C 7E 7E 00 
2c197 4f2 00 00 00 7E 
2c19b 4f3 7E 30 30 18 
2c19f 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
2c1a3 4f5 66 7E 3C 00 
2c1a7 4f6 00 00 00 30 
2c1ab 4f7 30 38 38 3C 
2c1af 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
2c1b3 4f9 7E 30 30 00 
2c1b7 4fa 00 00 00 7E 
2c1bb 4fb 7E 06 06 3E 
2c1bf 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
2c1c3 4fd 66 7E 3C 00 
2c1c7 4fe 00 00 00 38 
2c1cb 4ff 3C 0E 06 06 
2c1cf 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
2c1d3 501 66 7E 3C 00 
2c1d7 502 00 00 00 7E 
2c1db 503 7E 60 60 30 
2c1df 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
2c1e3 505 0C 0C 0C 00 
2c1e7 506 00 00 00 3C 
2c1eb 507 7E 66 66 3C 
2c1ef 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
2c1f3 509 66 7E 3C 00 
2c1f7 50a 00 00 00 3C 
2c1fb 50b 7E 66 66 7E 
2c1ff 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
2c203 50d 70 3C 1C 00 
2c207 50e 00 00 00 00 
2c20b 50f 00 00 18 18 
2c20f 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
2c213 511 18 18 18 00 
2c217 512 00 00 00 00 
2c21b 513 00 00 18 18 
2c21f 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
2c223 515 18 18 18 0C 
2c227 516 04 00 00 00 
2c22b 517 70 38 1C 0E 
2c22f 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
2c233 519 70 00 00 00 
2c237 51a 00 00 00 00 
2c23b 51b 00 00 7E 7E 
2c23f 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
2c243 51d 00 00 00 00 
2c247 51e 00 00 00 00 | 	byte	$00[8]
2c24b 51f 0E 1C 38 70 
2c24f 520 E0 70 38 1C 
2c253 521 0E 00 00 00 
2c257 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
2c25b 523 7E 66 66 30 
2c25f 524 30 18 18 18 
2c263 525 00 18 18 00 
2c267 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
2c26b 527 7E 66 66 66 
2c26f 528 66 36 06 66 
2c273 529 66 7E 3C 00 
2c277 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
2c27b 52b 3C 7E 66 66 
2c27f 52c 66 7E 7E 66 
2c283 52d 66 66 66 00 
2c287 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
2c28b 52f 7E 66 66 7E 
2c28f 530 3E 66 66 66 
2c293 531 66 7E 3E 00 
2c297 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
2c29b 533 7E 66 66 06 
2c29f 534 06 06 06 66 
2c2a3 535 66 7E 3C 00 
2c2a7 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
2c2ab 537 7E 66 66 66 
2c2af 538 66 66 66 66 
2c2b3 539 66 7E 3E 00 
2c2b7 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
2c2bb 53b 7E 06 06 3E 
2c2bf 53c 3E 06 06 06 
2c2c3 53d 06 7E 7E 00 
2c2c7 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
2c2cb 53f 7E 06 06 3E 
2c2cf 540 3E 06 06 06 
2c2d3 541 06 06 06 00 
2c2d7 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
2c2db 543 7E 06 06 76 
2c2df 544 76 66 66 66 
2c2e3 545 66 7E 3C 00 
2c2e7 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
2c2eb 547 66 66 66 7E 
2c2ef 548 7E 66 66 66 
2c2f3 549 66 66 66 00 
2c2f7 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
2c2fb 54b 7E 18 18 18 
2c2ff 54c 18 18 18 18 
2c303 54d 18 7E 7E 00 
2c307 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
2c30b 54f 60 60 60 60 
2c30f 550 60 60 60    | 	byte	$60[7]
2c312 551 66 66 7E 3C 
2c316 552 00 00 00 00 
2c31a 553 66 66 36 36 
2c31e 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
2c322 555 66 66 C6 C6 
2c326 556 00 00 00 00 
2c32a 557 06 06 06 06 
2c32e 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
2c332 559 06 06 7E 7E 
2c336 55a 00 00 00 00 
2c33a 55b C6 C6 EE EE 
2c33e 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
2c342 55d C6 C6 C6 C6 
2c346 55e 00 00 00 00 
2c34a 55f 66 66 66 6E 
2c34e 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
2c352 561 76 66 66 66 
2c356 562 00 00 00 00 
2c35a 563 3C 7E 66 66 
2c35e 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
2c362 565 66 66 7E 3C 
2c366 566 00 00 00 00 
2c36a 567 3E 7E 66 66 
2c36e 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
2c372 569 06 06 06 06 
2c376 56a 00 00 00 00 
2c37a 56b 3C 7E 66 66 
2c37e 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
2c382 56d 66 56 3E 6C 
2c386 56e 00 00 00 00 
2c38a 56f 3E 7E 66 66 
2c38e 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
2c392 571 66 66 C6 C6 
2c396 572 00 00 00 00 
2c39a 573 7C 7E 06 06 
2c39e 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
2c3a2 575 60 60 7E 3E 
2c3a6 576 00 00 00 00 
2c3aa 577 7E 7E 18 18 
2c3ae 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
2c3b2 579 18 18 18 18 
2c3b6 57a 00 00 00 00 
2c3ba 57b 66 66 66 66 
2c3be 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
2c3c2 57d 66 66 7E 3C 
2c3c6 57e 00 00 00 00 
2c3ca 57f 66 66 66 66 
2c3ce 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
2c3d2 581 3C 3C 18 18 
2c3d6 582 00 00 00 00 
2c3da 583 C6 C6 C6 C6 
2c3de 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
2c3e2 585 FE EE C6 82 
2c3e6 586 00 00 00 00 
2c3ea 587 66 66 66 3C 
2c3ee 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
2c3f2 589 3C 66 66 66 
2c3f6 58a 00 00 00 00 
2c3fa 58b 66 66 66 66 
2c3fe 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
2c402 58d 18 18 18 18 
2c406 58e 00 00 00 00 
2c40a 58f 7E 7E 30 30 
2c40e 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
2c412 591 06 06 7E 7E 
2c416 592 00 00 00 00 
2c41a 593 3C 3C 0C 0C 
2c41e 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
2c422 595 0C 0C 3C 3C 
2c426 596 00 00 00 00 
2c42a 597 06 06 0C 0C 
2c42e 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
2c432 599 60 60 C0 C0 
2c436 59a 00 00 00 00 
2c43a 59b 3C 3C 30 30 
2c43e 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
2c442 59d 30 30 3C 3C 
2c446 59e 00 00 00 00 
2c44a 59f 18 18 3C 3C 
2c44e 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
2c452 5a1 00 00 00 00 
2c456 5a2 00 00 00 00 
2c45a 5a3 00 00 00 00 
2c45e 5a4 00 00 00 00 
2c462 5a5 00 00       | 	byte	$00[18]
2c464 5a6 FE FE 00 00 
2c468 5a7 00 00 0C 0C 
2c46c 5a8 18 18 00 00 
2c470 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
2c474 5aa 00 00 00 00 
2c478 5ab 00 00 00 00 
2c47c 5ac 00          | 	byte	$00[9]
2c47d 5ac 3C 7C 60 7C 
2c481 5ad 7E 66 66 7E 
2c485 5ae 7C 00 00 00 
2c489 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
2c48d 5b0 3E 7E 66 66 
2c491 5b1 66 66 66 7E 
2c495 5b2 3E 00 00 00 
2c499 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
2c49d 5b4 3C 3E 06 06 
2c4a1 5b5 06 06 06 7E 
2c4a5 5b6 7C 00 00 00 
2c4a9 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
2c4ad 5b8 7C 7E 66 66 
2c4b1 5b9 66 66 66 7E 
2c4b5 5ba 7C 00 00 00 
2c4b9 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
2c4bd 5bc 3C 7E 66 66 
2c4c1 5bd 7E 06 06 7E 
2c4c5 5be 7C 00 00 00 
2c4c9 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
2c4cd 5c0 18 7E 7E 18 
2c4d1 5c1 18 18 18 18 
2c4d5 5c2 18 00 00 00 
2c4d9 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2c4dd 5c4 7C 7E 66 66 
2c4e1 5c5 66 66 7E 7C 
2c4e5 5c6 60 7E 3E 00 
2c4e9 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
2c4ed 5c8 3E 7E 66 66 
2c4f1 5c9 66 66 66 66 
2c4f5 5ca 66 00 00 00 
2c4f9 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
2c4fd 5cc 1C 1C 18 18 
2c501 5cd 18 18 18 3C 
2c505 5ce 3C 00 00 00 
2c509 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
2c50d 5d0 30 30 30 30 
2c511 5d1 30 30 30 30 
2c515 5d2 30          | 	byte	$30[9]
2c516 5d2 3E 1E 00 00 
2c51a 5d3 06 06 06 36 
2c51e 5d4 36 1E 1E 1E 
2c522 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
2c526 5d6 00 00 00 00 
2c52a 5d7 1C 1C 18 18 
2c52e 5d8 18 18 18 18 
2c532 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
2c536 5da 00 00 00 00 
2c53a 5db 00 00 00    | 	byte	$00[7]
2c53d 5dc 6C FE FE D6 
2c541 5dd D6 C6 C6 C6 
2c545 5de C6 00 00 00 
2c549 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
2c54d 5e0 3E 7E 66 66 
2c551 5e1 66 66 66 66 
2c555 5e2 66 00 00 00 
2c559 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
2c55d 5e4 3C 7E 66 66 
2c561 5e5 66 66 66 7E 
2c565 5e6 3C 00 00 00 
2c569 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
2c56d 5e8 3E 7E 66 66 
2c571 5e9 66 66 66 7E 
2c575 5ea 3E 06 06 00 
2c579 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
2c57d 5ec 7C 7E 66 66 
2c581 5ed 66 66 66 7E 
2c585 5ee 7C 60 60 00 
2c589 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
2c58d 5f0 3E 7E 66 06 
2c591 5f1 06 06 06 06 
2c595 5f2 06 00 00 00 
2c599 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
2c59d 5f4 7C 7E 06 0E 
2c5a1 5f5 3C 70 60 7E 
2c5a5 5f6 3E 00 00 00 
2c5a9 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
2c5ad 5f8 7E 7E 18 18 
2c5b1 5f9 18 18 18 78 
2c5b5 5fa 70 00 00 00 
2c5b9 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
2c5bd 5fc 66 66 66 66 
2c5c1 5fd 66 66 66    | 	byte	$66[7]
2c5c4 5fe 7E 7C 00 00 
2c5c8 5ff 00 00 00 00 
2c5cc 600 00 66 66 66 
2c5d0 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
2c5d4 602 18 18 00 00 
2c5d8 603 00 00 00 00 
2c5dc 604 00 C6 C6 D6 
2c5e0 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
2c5e4 606 C6 82 00 00 
2c5e8 607 00 00 00 00 
2c5ec 608 00 66 66 3C 
2c5f0 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
2c5f4 60a 66 66 00 00 
2c5f8 60b 00 00 00 00 
2c5fc 60c 00 66 66 66 
2c600 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
2c604 60e 7C 60 7E 3E 
2c608 60f 00 00 00 00 
2c60c 610 00 7E 7E 30 
2c610 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
2c614 612 7E 7E 00 00 
2c618 613 00 00 30 18 
2c61c 614 18 18 18 0C 
2c620 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
2c624 616 18 30 00 00 
2c628 617 00 00 18 18 
2c62c 618 18 18 18 18 
2c630 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2c634 61a 18 18 00 00 
2c638 61b 00 00 0C 18 
2c63c 61c 18 18 18 30 
2c640 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
2c644 61e 18 0C 00 00 
2c648 61f 00 00 6C 7E 
2c64c 620 36 00 00 00 
2c650 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
2c654 622 00 00 00 00 
2c658 623 00 00 00 00 
2c65c 624 00          | 	byte	$00[9]
2c65d 624 18 18 18 18 
2c661 625 18 18 00 00 
2c665 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
2c668 627             | 'amiga_font     file "amigafont.def"
2c668 627 00 6C FE FE 
2c66c 628 7C 38 10 00 
2c670 629 18 18 18 F8 
2c674 62a F8 18 18 18 | a8_font        file "atari8.fnt"
2c678 62b C0 C0 C0 C0 
2c67c 62c C0 C0 C0 C0 | 	byte	$c0[8]
2c680 62d 18 18 18 1F 
2c684 62e 1F 00 00 00 
2c688 62f 18 18 18 1F 
2c68c 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
2c690 631 00 00 00 1F 
2c694 632 1F 18 18 18 
2c698 633 C0 E0 70 38 
2c69c 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
2c6a0 635 03 07 0E 1C 
2c6a4 636 38 70 E0 C0 
2c6a8 637 80 C0 E0 F0 
2c6ac 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
2c6b0 639 00 00 00 00 
2c6b4 63a F0 F0 F0 F0 
2c6b8 63b 01 03 07 0F 
2c6bc 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
2c6c0 63d F0 F0 F0 F0 
2c6c4 63e 00 00 00 00 
2c6c8 63f 0F 0F 0F 0F 
2c6cc 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
2c6d0 641 FF FF 00 00 
2c6d4 642 00 00 00 00 
2c6d8 643 00 00 00 00 
2c6dc 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
2c6e0 645 00 00 00 00 
2c6e4 646 0F 0F 0F 0F 
2c6e8 647 00 38 38 EE 
2c6ec 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
2c6f0 649 00 00 00 F8 
2c6f4 64a F8 18 18 18 
2c6f8 64b 00 00 00 FF 
2c6fc 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
2c700 64d 18 18 18 FF 
2c704 64e FF 18 18 18 
2c708 64f 00 00 3C 7E 
2c70c 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
2c710 651 00 00 00 00 
2c714 652 FF FF FF FF 
2c718 653 03 03 03 03 
2c71c 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
2c720 655 00 00 00 FF 
2c724 656 FF 18 18 18 
2c728 657 18 18 18 FF 
2c72c 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
2c730 659 0F 0F 0F 0F 
2c734 65a 0F 0F 0F 0F | 	byte	$0f[8]
2c738 65b 18 18 18 F8 
2c73c 65c F8 00 00 00 
2c740 65d 1E 06 1E 06 
2c744 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
2c748 65f 00 18 3C 7E 
2c74c 660 18 18 18 00 
2c750 661 00 18 18 18 
2c754 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
2c758 663 00 18 0C 7E 
2c75c 664 0C 18 00 00 
2c760 665 00 18 30 7E 
2c764 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
2c768 667 00 00 00 00 
2c76c 668 00 00 00 00 
2c770 669 00          | 	byte	$00[9]
2c771 669 18 18 18 18 
2c775 66a 00 18 00 00 
2c779 66b 66 66 66 00 
2c77d 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
2c781 66d 66 FF 66 66 
2c785 66e FF 66 00 18 
2c789 66f 7C 06 3C 60 
2c78d 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
2c791 671 66 36 18 0C 
2c795 672 66 62 00 38 
2c799 673 6C 38 1C F6 
2c79d 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
2c7a1 675 18 18 18 00 
2c7a5 676 00 00 00 00 
2c7a9 677 70 38 18 18 
2c7ad 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
2c7b1 679 0E 1C 18 18 
2c7b5 67a 1C 0E 00 00 
2c7b9 67b 66 3C FF 3C 
2c7bd 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
2c7c1 67d 18 18 7E 18 
2c7c5 67e 18 00 00 00 
2c7c9 67f 00 00 00 00 
2c7cd 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
2c7d1 681 00 00 7E 00 
2c7d5 682 00 00 00 00 
2c7d9 683 00 00 00 00 
2c7dd 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
2c7e1 685 60 30 18 0C 
2c7e5 686 06 02 00 00 
2c7e9 687 3C 66 76 6E 
2c7ed 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
2c7f1 689 18 1C 18 18 
2c7f5 68a 18 7E 00 00 
2c7f9 68b 3C 66 30 18 
2c7fd 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
2c801 68d 7E 30 18 30 
2c805 68e 66 3C 00 00 
2c809 68f 30 38 3C 36 
2c80d 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
2c811 691 7E 06 3E 60 
2c815 692 66 3C 00 00 
2c819 693 3C 06 3E 66 
2c81d 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
2c821 695 7E 60 30 18 
2c825 696 0C 0C 00 00 
2c829 697 3C 66 3C 66 
2c82d 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
2c831 699 3C 66 7C 60 
2c835 69a 30 1C 00 00 
2c839 69b 00 18 18 00 
2c83d 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
2c841 69d 00 18 18 00 
2c845 69e 18 18 0C 60 
2c849 69f 30 18 0C 18 
2c84d 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
2c851 6a1 00 7E 00 00 
2c855 6a2 7E 00 00 06 
2c859 6a3 0C 18 30 18 
2c85d 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
2c861 6a5 3C 66 30 18 
2c865 6a6 00 18 00 00 
2c869 6a7 3C 66 76 76 
2c86d 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
2c871 6a9 18 3C 66 66 
2c875 6aa 7E 66 00 00 
2c879 6ab 3E 66 3E 66 
2c87d 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
2c881 6ad 3C 66 06 06 
2c885 6ae 66 3C 00 00 
2c889 6af 1E 36 66 66 
2c88d 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
2c891 6b1 7E 06 3E 06 
2c895 6b2 06 7E 00 00 
2c899 6b3 7E 06 3E 06 
2c89d 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
2c8a1 6b5 7C 06 06 76 
2c8a5 6b6 66 7C 00 00 
2c8a9 6b7 66 66 7E 66 
2c8ad 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
2c8b1 6b9 7E 18 18 18 
2c8b5 6ba 18 7E 00 00 
2c8b9 6bb 60 60 60 60 
2c8bd 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
2c8c1 6bd 66 36 1E 1E 
2c8c5 6be 36 66 00 00 
2c8c9 6bf 06 06 06 06 
2c8cd 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
2c8d1 6c1 C6 EE FE D6 
2c8d5 6c2 C6 C6 00 00 
2c8d9 6c3 66 6E 7E 7E 
2c8dd 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
2c8e1 6c5 3C 66 66 66 
2c8e5 6c6 66 3C 00 00 
2c8e9 6c7 3E 66 66 3E 
2c8ed 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
2c8f1 6c9 3C 66 66 66 
2c8f5 6ca 36 6C 00 00 
2c8f9 6cb 3E 66 66 3E 
2c8fd 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
2c901 6cd 3C 06 3C 60 
2c905 6ce 60 3C 00 00 
2c909 6cf 7E 18 18 18 
2c90d 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
2c911 6d1 66 66 66 66 
2c915 6d2 66          | 	byte	$66[5]
2c916 6d2 7E 00 00 66 
2c91a 6d3 66 66 66 3C 
2c91e 6d4 18 00 00 C6 
2c922 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
2c926 6d6 C6 00 00 66 
2c92a 6d7 66 3C 3C 66 
2c92e 6d8 66 00 00 66 
2c932 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
2c936 6da 18 00 00 7E 
2c93a 6db 30 18 0C 06 
2c93e 6dc 7E 00 00 78 
2c942 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
2c946 6de 78 00 00 02 
2c94a 6df 06 0C 18 30 
2c94e 6e0 60 00 00 1E 
2c952 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
2c956 6e2 1E 00 00 10 
2c95a 6e3 38 6C C6 00 
2c95e 6e4 00 00 00 00 
2c962 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
2c966 6e6 FF 00 00 18 
2c96a 6e7 3C 7E 7E 3C 
2c96e 6e8 18 00 00 00 
2c972 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
2c976 6ea 7C 00 00 06 
2c97a 6eb 06 3E 66 66 
2c97e 6ec 3E 00 00 00 
2c982 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
2c986 6ee 3C 00 00 60 
2c98a 6ef 60 7C 66 66 
2c98e 6f0 7C 00 00 00 
2c992 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
2c996 6f2 3C 00 00 70 
2c99a 6f3 18 7C 18 18 
2c99e 6f4 18 00 00 00 
2c9a2 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
2c9a6 6f6 60 3E 00 06 
2c9aa 6f7 06 3E 66 66 
2c9ae 6f8 66 00 00 18 
2c9b2 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
2c9b6 6fa 3C 00 00 60 
2c9ba 6fb 00 60 60 60 
2c9be 6fc 60 3C 00 06 
2c9c2 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
2c9c6 6fe 66 00 00 1C 
2c9ca 6ff 18 18 18 18 
2c9ce 700 3C 00 00 00 
2c9d2 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
2c9d6 702 C6 00 00 00 
2c9da 703 3E 66 66 66 
2c9de 704 66 00 00 00 
2c9e2 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
2c9e6 706 3C 00 00 00 
2c9ea 707 3E 66 66 3E 
2c9ee 708 06 06 00 00 
2c9f2 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
2c9f6 70a 60 60 00 00 
2c9fa 70b 3E 66 06 06 
2c9fe 70c 06 00 00 00 
2ca02 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
2ca06 70e 3E 00 00 18 
2ca0a 70f 7E 18 18 18 
2ca0e 710 70 00 00 00 
2ca12 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
2ca16 712 7C 00 00 00 
2ca1a 713 66 66 66 3C 
2ca1e 714 18 00 00 00 
2ca22 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
2ca26 716 6C 00 00 00 
2ca2a 717 66 3C 18 3C 
2ca2e 718 66 00 00 00 
2ca32 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
2ca36 71a 30 1E 00 00 
2ca3a 71b 7E 30 18 0C 
2ca3e 71c 7E 00 00 18 
2ca42 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
2ca46 71e 3C 00 18 18 
2ca4a 71f 18 18 18 18 
2ca4e 720 18 18 00 7E 
2ca52 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
2ca56 722 60 00 10 18 
2ca5a 723 1C 1E 1C 18 
2ca5e 724 10 00 08 18 
2ca62 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
2ca66 726 08 00       | 	byte	$08, $00
2ca68 727 00 00 00 00 
2ca6c 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
2ca6d 728 80 00 00 00 
2ca71 729 00 80 00 00 
2ca75 72a 80 80 00 00 
2ca79 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
2ca7d 72c 80 00 80 00 
2ca81 72d 00 40 80 00 
2ca85 72e AA AA AA 00 
2ca89 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
2ca8d 730 FF 00 00 00 
2ca91 731 00 FF 00 00 
2ca95 732 FF FF 00 00 
2ca99 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
2ca9d 734 FF 00 FF 00 
2caa1 735 00 FF FF 00 
2caa5 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
2caa8 737 00 00 00 00 
2caac 738 00          | ataripalette   file "ataripalettep2.def"
2caad 738 11 11 11 00 
2cab1 739 22 22 22 00 
2cab5 73a 33 33 33 00 
2cab9 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
2cabd 73c 55 55 55 00 
2cac1 73d 66 66 66 00 
2cac5 73e 77 77 77 00 
2cac9 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
2cacd 740 99 99 99 00 
2cad1 741 AA AA AA 00 
2cad5 742 BB BB BB 00 
2cad9 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
2cadd 744 DD DD DD 00 
2cae1 745 EE EE EE 00 
2cae5 746 FF FF FF 00 
2cae9 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
2caed 748 00 14 40 00 
2caf1 749 00 1E 60 00 
2caf5 74a 00 28 80 00 
2caf9 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
2cafd 74c 00 3C BF 00 
2cb01 74d 00 46 DF 00 
2cb05 74e 00 50 FF 00 
2cb09 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
2cb0d 750 39 77 FF 00 
2cb11 751 55 8A FF 00 
2cb15 752 71 9E FF 00 
2cb19 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
2cb1d 754 AA C5 FF 00 
2cb21 755 C6 D8 FF 00 
2cb25 756 E3 EC FF 00 
2cb29 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
2cb2d 758 00 00 40 00 
2cb31 759 00 00 60 00 
2cb35 75a 00 00 80 00 
2cb39 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
2cb3d 75c 00 00 BF 00 
2cb41 75d 00 00 DF 00 
2cb45 75e 00 00 FF 00 
2cb49 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
2cb4d 760 39 39 FF 00 
2cb51 761 55 55 FF 00 
2cb55 762 71 71 FF 00 
2cb59 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
2cb5d 764 AA AA FF 00 
2cb61 765 C6 C6 FF 00 
2cb65 766 E3 E3 FF 00 
2cb69 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
2cb6d 768 20 00 40 00 
2cb71 769 30 00 60 00 
2cb75 76a 40 00 80 00 
2cb79 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
2cb7d 76c 60 00 BF 00 
2cb81 76d 70 00 DF 00 
2cb85 76e 80 00 FF 00 
2cb89 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
2cb8d 770 9C 39 FF 00 
2cb91 771 AA 55 FF 00 
2cb95 772 B8 71 FF 00 
2cb99 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
2cb9d 774 D5 AA FF 00 
2cba1 775 E3 C6 FF 00 
2cba5 776 F1 E3 FF 00 
2cba9 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
2cbad 778 40 00 40 00 
2cbb1 779 60 00 60 00 
2cbb5 77a 80 00 80 00 
2cbb9 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
2cbbd 77c BF 00 BF 00 
2cbc1 77d DF 00 DF 00 
2cbc5 77e FF 00 FF 00 
2cbc9 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
2cbcd 780 FF 39 FF 00 
2cbd1 781 FF 55 FF 00 
2cbd5 782 FF 71 FF 00 
2cbd9 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
2cbdd 784 FF AA FF 00 
2cbe1 785 FF C6 FF 00 
2cbe5 786 FF E3 FF 00 
2cbe9 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
2cbed 788 40 00 20 00 
2cbf1 789 60 00 30 00 
2cbf5 78a 80 00 40 00 
2cbf9 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
2cbfd 78c BF 00 60 00 
2cc01 78d DF 00 70 00 
2cc05 78e FF 00 80 00 
2cc09 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
2cc0d 790 FF 39 9C 00 
2cc11 791 FF 55 AA 00 
2cc15 792 FF 71 B8 00 
2cc19 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
2cc1d 794 FF AA D5 00 
2cc21 795 FF C6 E3 00 
2cc25 796 FF E3 F1 00 
2cc29 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
2cc2d 798 40 00 00 00 
2cc31 799 60 00 00 00 
2cc35 79a 80 00 00 00 
2cc39 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
2cc3d 79c BF 00 00 00 
2cc41 79d DF 00 00 00 
2cc45 79e FF 00 00 00 
2cc49 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
2cc4d 7a0 FF 39 39 00 
2cc51 7a1 FF 55 55 00 
2cc55 7a2 FF 71 71 00 
2cc59 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
2cc5d 7a4 FF AA AA 00 
2cc61 7a5 FF C6 C6 00 
2cc65 7a6 FF E3 E3 00 
2cc69 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
2cc6d 7a8 40 10 00 00 
2cc71 7a9 60 18 00 00 
2cc75 7aa 80 20 00 00 
2cc79 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
2cc7d 7ac BF 30 00 00 
2cc81 7ad DF 38 00 00 
2cc85 7ae FF 40 00 00 
2cc89 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
2cc8d 7b0 FF 6A 39 00 
2cc91 7b1 FF 80 55 00 
2cc95 7b2 FF 95 71 00 
2cc99 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
2cc9d 7b4 FF BF AA 00 
2cca1 7b5 FF D5 C6 00 
2cca5 7b6 FF EA E3 00 
2cca9 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
2ccad 7b8 40 20 00 00 
2ccb1 7b9 60 30 00 00 
2ccb5 7ba 80 40 00 00 
2ccb9 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
2ccbd 7bc BF 60 00 00 
2ccc1 7bd DF 70 00 00 
2ccc5 7be FF 80 00 00 
2ccc9 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
2cccd 7c0 FF 9C 39 00 
2ccd1 7c1 FF AA 55 00 
2ccd5 7c2 FF B8 71 00 
2ccd9 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
2ccdd 7c4 FF D5 AA 00 
2cce1 7c5 FF E3 C6 00 
2cce5 7c6 FF F1 E3 00 
2cce9 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
2cced 7c8 40 30 00 00 
2ccf1 7c9 60 48 00 00 
2ccf5 7ca 80 60 00 00 
2ccf9 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
2ccfd 7cc BF 90 00 00 
2cd01 7cd DF A8 00 00 
2cd05 7ce FF C0 00 00 
2cd09 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
2cd0d 7d0 FF CE 39 00 
2cd11 7d1 FF D5 55 00 
2cd15 7d2 FF DC 71 00 
2cd19 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
2cd1d 7d4 FF EA AA 00 
2cd21 7d5 FF F1 C6 00 
2cd25 7d6 FF F8 E3 00 
2cd29 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
2cd2d 7d8 30 40 00 00 
2cd31 7d9 48 60 00 00 
2cd35 7da 60 80 00 00 
2cd39 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
2cd3d 7dc 90 BF 00 00 
2cd41 7dd A8 DF 00 00 
2cd45 7de C0 FF 00 00 
2cd49 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
2cd4d 7e0 CE FF 39 00 
2cd51 7e1 D5 FF 55 00 
2cd55 7e2 DC FF 71 00 
2cd59 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
2cd5d 7e4 EA FF AA 00 
2cd61 7e5 F1 FF C6 00 
2cd65 7e6 F8 FF E3 00 
2cd69 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
2cd6d 7e8 00 40 00 00 
2cd71 7e9 00 60 00 00 
2cd75 7ea 00 80 00 00 
2cd79 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
2cd7d 7ec 00 BF 00 00 
2cd81 7ed 00 DF 00 00 
2cd85 7ee 00 FF 00 00 
2cd89 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
2cd8d 7f0 39 FF 39 00 
2cd91 7f1 55 FF 55 00 
2cd95 7f2 71 FF 71 00 
2cd99 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
2cd9d 7f4 AA FF AA 00 
2cda1 7f5 C6 FF C6 00 
2cda5 7f6 E3 FF E3 00 
2cda9 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
2cdad 7f8 00 40 14 00 
2cdb1 7f9 00 60 1E 00 
2cdb5 7fa 00 80 28 00 
2cdb9 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
2cdbd 7fc 00 BF 3C 00 
2cdc1 7fd 00 DF 46 00 
2cdc5 7fe 00 FF 50 00 
2cdc9 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
2cdcd 800 39 FF 77 00 
2cdd1 801 55 FF 8A 00 
2cdd5 802 71 FF 9E 00 
2cdd9 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
2cddd 804 AA FF C5 00 
2cde1 805 C6 FF D8 00 
2cde5 806 E3 FF EC 00 
2cde9 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
2cded 808 00 40 28 00 
2cdf1 809 00 60 3C 00 
2cdf5 80a 00 80 50 00 
2cdf9 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
2cdfd 80c 00 BF 78 00 
2ce01 80d 00 DF 8C 00 
2ce05 80e 00 FF A0 00 
2ce09 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
2ce0d 810 39 FF B5 00 
2ce11 811 55 FF C0 00 
2ce15 812 71 FF CA 00 
2ce19 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
2ce1d 814 AA FF DF 00 
2ce21 815 C6 FF EA 00 
2ce25 816 E3 FF F4 00 
2ce29 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
2ce2d 818 00 40 40 00 
2ce31 819 00 60 60 00 
2ce35 81a 00 80 80 00 
2ce39 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
2ce3d 81c 00 BF BF 00 
2ce41 81d 00 DF DF 00 
2ce45 81e 00 FF FF 00 
2ce49 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
2ce4d 820 39 FF FF 00 
2ce51 821 55 FF FF 00 
2ce55 822 71 FF FF 00 
2ce59 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
2ce5d 824 AA FF FF 00 
2ce61 825 C6 FF FF 00 
2ce65 826 E3 FF FF 00 
2ce69 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
2ce6d 828 00 28 40 00 
2ce71 829 00 3C 60 00 
2ce75 82a 00 50 80 00 
2ce79 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
2ce7d 82c 00 78 BF 00 
2ce81 82d 00 8C DF 00 
2ce85 82e 00 A0 FF 00 
2ce89 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
2ce8d 830 39 B5 FF 00 
2ce91 831 55 C0 FF 00 
2ce95 832 71 CA FF 00 
2ce99 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
2ce9d 834 AA DF FF 00 
2cea1 835 C6 EA FF 00 
2cea5 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
2cea8 837             | 
2cea8 837             | '**********************************************************************************
2cea8 837             | '
2cea8 837             | '        Timings and colors definitions
2cea8 837             | '
2cea8 837             | '**********************************************************************************
2cea8 837             | 
2cea8 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
2cea8 837 10 00 00 00 
2ceac 838 50 00 00 00 
2ceb0 839 0C 00 00 00 
2ceb4 83a 00 04 00 00 | timings         long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
2ceb8 83b 08 00 00 00 
2cebc 83c 04 00 00 00 
2cec0 83d 08 00 00 00 
2cec4 83e 80 00 00 00 | 	byte	$08, $00, $00, $00, $04, $00, $00, $00, $08, $00, $00, $00, $80, $00, $00, $00
2cec8 83f 40 02 00 00 
2cecc 840 6A 8C 15 14 
2ced0 841 FB 06 B7 01 
2ced4 842 40 02 00 00 | 	byte	$40, $02, $00, $00, $6a, $8c, $15, $14, $fb, $06, $b7, $01, $40, $02, $00, $00
2ced8 843 00 00 00 00 
2cedc 844 C0 00 00 00 
2cee0 845 00 00 00 00 
2cee4 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2cee8 847 00 75 C7 97 
2ceec 848 27 47 F6 0A 
2cef0 849 05 79 CB 9B 
2cef4 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
2cef8 84b             | 
2cef8 84b             | ''--------  Initialization  ----------------------------------------------------------------
2cef8 84b             | 
2cef8 84b 28 0C 64 FD | hdmi            setq    #6
2cefc 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
2cf00 84d 28 10 64 FD |                 setq    #8
2cf04 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
2cf08 84f             | 
2cf08 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
2cf0c 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
2cf10 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
2cf14 852 D6 C6 01 F1 |                 add     t1,hbase
2cf18 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
2cf1c 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
2cf20 855 7B 0B 80 5F 
2cf24 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
2cf28 857 66 66 86 FF 
2cf2c 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
2cf30 859             | '
2cf30 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
2cf34 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
2cf38 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
2cf3c 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
2cf40 85d             | 
2cf40 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
2cf44 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
2cf48 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
2cf4c 860             | 
2cf4c 860             | ''--------  frame rendering main loop  ---------------------------------------------------
2cf4c 860             | 
2cf4c 860 28 06 64 FD | p101            setq 	#3
2cf50 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
2cf54 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
2cf58 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
2cf5c 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
2cf60 865 00 A0 05 F6 |                 mov     dlinum, #0
2cf64 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
2cf68 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
2cf6c 868             | 
2cf6c 868             | 
2cf6c 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
2cf70 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
2cf74 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
2cf78 86b             |                 
2cf78 86b             | 
2cf78 86b             | 
2cf78 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
2cf78 86b             |   
2cf78 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
2cf7c 86c 29 FE 65 3D |          if_nc  setq2   #255
2cf80 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
2cf84 86e             | 
2cf84 86e             | '' -----   up porch (before the picture)
2cf84 86e             | 
2cf84 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
2cf88 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
2cf8c 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
2cf90 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
2cf94 872             |  
2cf94 872             |    
2cf94 872             |  
2cf94 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
2cf98 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
2cf9c 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
2cfa0 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
2cfa4 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
2cfa8 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
2cfac 878             | 
2cfac 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
2cfb0 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
2cfb4 87a 48 00 B0 FD | 		call    #dli
2cfb8 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
2cfbc 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
2cfc0 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
2cfc4 87e             |                 	
2cfc4 87e             |                 
2cfc4 87e             | 
2cfc4 87e             |  
2cfc4 87e             | '' ------- the main screen drawing starts here
2cfc4 87e             | 
2cfc4 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
2cfc8 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
2cfcc 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
2cfd0 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
2cfd4 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
2cfd8 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
2cfdc 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
2cfe0 885             |               
2cfe0 885             | 
2cfe0 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
2cfe4 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
2cfe8 887             | 
2cfe8 887             | ' ---------------- All visible lines displayed now, start vblank  
2cfe8 887             | 
2cfe8 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
2cfec 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
2cff0 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
2cff4 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
2cff8 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
2cffc 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
2d000 88d             | 
2d000 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
2d000 88d             | 
2d000 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
2d000 88d             | 
2d000 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
2d004 88e             | 
2d004 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
2d008 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
2d00c 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
2d010 891             | 
2d010 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
2d014 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
2d018 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
2d01c 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
2d020 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
2d024 896             | 
2d024 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
2d028 897 DD C6 41 F8 |                 getnib  t1,dl,#0
2d02c 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
2d030 899 70 00 90 AD |     if_z        jmp     #preload
2d034 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
2d038 89b 94 00 90 AD |     if_z        jmp     #preload2
2d03c 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
2d040 89d 0C 00 90 AD |     if_z        jmp     #p390
2d044 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
2d048 89f 28 00 90 AD |     if_z        jmp     #p391  
2d04c 8a0             | 
2d04c 8a0 2D 00 64 FD | p308            ret
2d050 8a1             |    
2d050 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
2d054 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
2d058 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
2d05c 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
2d060 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
2d064 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
2d068 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
2d06c 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
2d070 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
2d074 8aa             |  
2d074 8aa             | '' --------  Reload palette. To do 
2d074 8aa             | 
2d074 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
2d078 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
2d07c 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
2d080 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
2d084 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
2d088 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
2d08c 8b0 70 FF 9F FD |         	jmp     #dli                
2d090 8b1             |       
2d090 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
2d090 8b1             | 
2d090 8b1             | 
2d090 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
2d090 8b1             | 
2d090 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
2d094 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
2d098 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
2d09c 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
2d0a0 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
2d0a4 8b6             |         
2d0a4 8b6             | '' -------------- Preload a line from PSRAM        
2d0a4 8b6             |         
2d0a4 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
2d0a8 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
2d0ac 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
2d0b0 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
2d0b4 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
2d0b8 8bb             | 
2d0b8 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
2d0bc 8bc 32 B7 01 F6 |                 mov     buf2,a1024
2d0c0 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
2d0c4 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
2d0c8 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
2d0cc 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
2d0d0 8c1             |  
2d0d0 8c1             |  
2d0d0 8c1             | preload2      '  incmod  dlinum,#3
2d0d0 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
2d0d4 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
2d0d8 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
2d0dc 8c4 28 02 64 FD |                 setq	#1
2d0e0 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
2d0e4 8c6             |                 
2d0e4 8c6             | 
2d0e4 8c6             | '' -------------- Draw sprites
2d0e4 8c6             | 
2d0e4 8c6 CF 5C 02 F6 | sprite          mov t8,frames
2d0e8 8c7 10 5C 0E F5 | 		and t8,#16 wz
2d0ec 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
2d0f0 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
2d0f4 8ca             | 		
2d0f4 8ca             | 
2d0f4 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
2d0f8 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
2d0fc 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
2d100 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
2d104 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
2d108 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
2d10c 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
2d110 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
2d114 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
2d118 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
2d11c 8d4 01 52 86 F1 |                 sub     sprite_h,#1
2d120 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
2d124 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
2d128 8d7             | 
2d128 8d7             | 
2d128 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
2d12c 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
2d130 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
2d134 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
2d138 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
2d13c 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
2d140 8dd 00 5E 06 F6 |                 mov 	t9,#0
2d144 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
2d148 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
2d14c 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
2d150 8e1             |      
2d150 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
2d154 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
2d158 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
2d15c 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
2d160 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
2d164 8e6             |                 
2d164 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
2d168 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
2d16c 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
2d170 8e9             |   		
2d170 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
2d174 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
2d178 8eb             | 
2d178 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
2d17c 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
2d180 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
2d184 8ee             |  
2d184 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
2d188 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
2d18c 8f0 10 00 90 CD |      if_c 	jmp     #p899		
2d190 8f1             | 	
2d190 8f1             | 	
2d190 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
2d194 8f2 28 CD 01 F1 | 		add	t4,sprite_w
2d198 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
2d19c 8f4             | 
2d19c 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
2d1a0 8f5             | 
2d1a0 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
2d1a4 8f6 01 58 86 F1 | 	 	sub     t6,#1
2d1a8 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
2d1ac 8f8             | 
2d1ac 8f8 28 58 62 FD |                 setq   	t6
2d1b0 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
2d1b4 8fa 28 5D 02 F6 |                 mov t8,sprite_w
2d1b8 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
2d1bc 8fc 24 00 90 AD |         if_z    jmp #p898
2d1c0 8fd             |          
2d1c0 8fd             |         
2d1c0 8fd 70 5F 06 F6 |                 mov  t9,#368
2d1c4 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
2d1c8 8ff             | 
2d1c8 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
2d1cc 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
2d1d0 901 FF FF 7F FF 
2d1d4 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
2d1d8 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
2d1dc 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
2d1e0 905 2D 01 00 F5 |                 and 0-0, t7
2d1e4 906             |                
2d1e4 906             | 
2d1e4 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
2d1e8 907 E5 E0 7A FA |                 wmlong 368,t3				
2d1ec 908             |                 
2d1ec 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
2d1f0 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
2d1f4 90a 2D 00 64 FD |                 ret
2d1f8 90b             | 	
2d1f8 90b             | 	
2d1f8 90b             |                
2d1f8 90b             |  
2d1f8 90b             | '' -------------- Graphics line ------------------------------------------------------------
2d1f8 90b             |  
2d1f8 90b             | 
2d1f8 90b             | '' consts and vars
2d1f8 90b             | 
2d1f8 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
2d1fc 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
2d200 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
2d204 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
2d208 90f             | 
2d208 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
2d20c 910             | 
2d20c 910             | '------ these longs will be set by setmode function
2d20c 910             | 
2d20c 910 00 00 00 00 | m_bs            long    0        'blanks before sync
2d210 911 00 00 00 00 | m_sn            long    0        'sync
2d214 912 00 00 00 00 | m_bv            long    0        'blanks before visible
2d218 913 00 00 00 00 | m_vi            long    0        'visible pixels #
2d21c 914             | 'm_border        long    0        'left/right borders
2d21c 914 00 00 00 00 | i_upporch       long    0        'up porch lines
2d220 915 00 00 00 00 | i_vsync         long    0        'vsync lines
2d224 916 00 00 00 00 | i_downporch     long    0        'down porch lines
2d228 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
2d22c 918 00 00 00 00 | i_totalvis      long    0
2d230 919             | 
2d230 919             | '-------------------------------------
2d230 919             |  
2d230 919 00 00 00 00 | linenum         long    0
2d234 91a 00 00 00 00 | frames          long    0
2d238 91b 00 00 00 00 | dlinum long 0
2d23c 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
2d240 91d             | 
2d240 91d 00 00 00 00 | vblankptr       long    0
2d244 91e 00 00 00 00 | modeptr         long    0
2d248 91f 00 00 00 00 | paletteptr      long    0
2d24c 920 00 00 00 00 | dlptr           long    0
2d250 921 01 00 00 00 | hbase           long    1
2d254 922 00 00 00 00 | mailbox         long    0
2d258 923 00 00 00 00 | spriteptr          long 0
2d25c 924             | 
2d25c 924 00 00 00 00 | cmd             long    0
2d260 925 00 B0 07 00 | buf1            long    $80000-16384-4096
2d264 926 00 04 00 00 | buf2            long    1024
2d268 927 01 00 00 00 | dlptr2          long    1
2d26c 928 01 00 00 00 | dl              long    1
2d270 929             | 
2d270 929 00 00 00 00 | buf1c long 0
2d274 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
2d278 92b 01 00 00 00 | framebuf2       long    1
2d27c 92c 01 00 00 00 | hsync0          long    1
2d280 92d 01 00 00 00 | hsync1          long    1
2d284 92e             | 
2d284 92e 01 00 00 00 | t1              long    1
2d288 92f 00 00 00 00 | t2 long 0
2d28c 930 00 00 00 00 | t3 long 0
2d290 931 00 00 00 00 | t4 long 0
2d294 932             | 
2d294 932 00 00 00 00 | rcnt            long    0  'dl repeat count
2d298 933 00 00 00 00 | rcnt2           long    0
2d29c 934 00 00 00 00 | rcnt2a          long    0
2d2a0 935 00 00 00 00 | roffset         long    0
2d2a4 936 00 00 00 00 | rdl             long    0  'dl repeat line
2d2a8 937 00 00 00 00 | dlc             long    0  'dl command
2d2ac 938             | 
2d2ac 938 FF FF FF FF | affffffff       long    $ffffffff
2d2b0 939 00 00 00 00 | sprite1pointer long 0
2d2b4 93a 00 00 00 00 | sprite1xy      long 0
2d2b8 93b 00 00 00 00 | sprite1wh      long 0
2d2bc 93c 00 00 00 00 | sprite2pointer long 0
2d2c0 93d 00 00 00 00 | sprite2xy      long 0
2d2c4 93e 00 00 00 00 | sprite2wh      long 0
2d2c8 93f 00 00 00 00 | sprite3pointer long 0
2d2cc 940 00 00 00 00 | sprite3xy      long 0
2d2d0 941 00 00 00 00 | sprite3wh      long 0
2d2d4 942 00 00 00 00 | sprite4pointer long 0
2d2d8 943 00 00 00 00 | sprite4xy      long 0
2d2dc 944 00 00 00 00 | sprite4wh      long 0
2d2e0 945 00 00 00 00 | sprite5pointer long 0
2d2e4 946 00 00 00 00 | sprite5xy      long 0
2d2e8 947 00 00 00 00 | sprite5wh      long 0
2d2ec 948 00 00 00 00 | sprite6pointer long 0
2d2f0 949 00 00 00 00 | sprite6xy      long 0
2d2f4 94a 00 00 00 00 | sprite6wh      long 0
2d2f8 94b 00 00 00 00 | sprite7pointer long 0
2d2fc 94c 00 00 00 00 | sprite7xy      long 0
2d300 94d 00 00 00 00 | sprite7wh      long 0
2d304 94e 00 00 00 00 | sprite8pointer long 0
2d308 94f 00 00 00 00 | sprite8xy      long 0
2d30c 950 00 00 00 00 | sprite8wh      long 0
2d310 951 00 00 00 00 | sprite9pointer long 0
2d314 952 00 00 00 00 | sprite9xy      long 0
2d318 953 00 00 00 00 | sprite9wh      long 0
2d31c 954 00 00 00 00 | sprite10pointer long 0
2d320 955 00 00 00 00 | sprite10xy      long 0
2d324 956 00 00 00 00 | sprite10wh      long 0
2d328 957 00 00 00 00 | sprite11pointer long 0
2d32c 958 00 00 00 00 | sprite11xy      long 0
2d330 959 00 00 00 00 | sprite11wh      long 0
2d334 95a 00 00 00 00 | sprite12pointer long 0
2d338 95b 00 00 00 00 | sprite12xy      long 0
2d33c 95c 00 00 00 00 | sprite12wh      long 0
2d340 95d 00 00 00 00 | sprite13pointer long 0
2d344 95e 00 00 00 00 | sprite13xy      long 0
2d348 95f 00 00 00 00 | sprite13wh      long 0
2d34c 960 00 00 00 00 | sprite14pointer long 0
2d350 961 00 00 00 00 | sprite14xy      long 0
2d354 962 00 00 00 00 | sprite14wh      long 0
2d358 963 00 00 00 00 | sprite15pointer long 0
2d35c 964 00 00 00 00 | sprite15xy      long 0
2d360 965 00 00 00 00 | sprite15wh      long 0
2d364 966 00 00 00 00 | sprite16pointer long 0
2d368 967 00 00 00 00 | sprite16xy      long 0
2d36c 968 00 00 00 00 | sprite16wh      long 0
2d370 969 00 00 00 00 | sprite17pointer long 0
2d374 96a 00 00 00 00 | sprite17xy      long 0
2d378 96b 00 00 00 00 | sprite17wh      long 0
2d37c 96c 00 00 00 00 | sprite18pointer long 0
2d380 96d 00 00 00 00 | sprite18xy      long 0
2d384 96e 00 00 00 00 | sprite18wh      long 0
2d388 96f 00 00 00 00 | spritenum long 0
2d38c 970             | 
2d38c 970 00 00 00 00 | spriteline long 0
2d390 971 84 03 00 00 | sprite_x long 900
2d394 972 00 00 00 00 | sprite_y long 0
2d398 973 10 00 00 00 | sprite_w long 16
2d39c 974 40 00 00 00 | sprite_h long 64
2d3a0 975 00 00 00 00 | l2 long 0
2d3a4 976 00 00 00 00 | t5 long 0
2d3a8 977 00 00 00 00 | t6 long 0
2d3ac 978 00 00 00 00 | t7 long 0
2d3b0 979 00 00 00 00 | t8 long 0
2d3b4 97a 00 00 00 00 | t9 long 0
2d3b8 97b 00 00 00 00 | preloadaddr long 0
2d3bc 97c 00 00 00 00 | preloadlineaddr long 0
2d3c0 97d 00 04 00 00 | a1024 long 1024
2d3c4 97e             | 
2d3c4 97e E0 03 00 00 | aa long 992
2d3c8 97f FF 03 00 00 | a1023 long 1023
2d3cc 980 00 10 00 00 | a4096 long 4096
2d3d0 981             |  fit 368
2d3d0 981             | _psram_spin2_dat_
2d3d0 981 00 00 00 00 
      ...             
2d4c8 9bf 00 00 00 00 
2d4cc 9c0 00 00 00 00 |     listdata long 0[8*8]
2d4d0 9c1             |             orgh
2d4d0                 | 
2d4d0                 | ' driver state
2d4d0     FF FF FF FF | drivercog   long    -1  ' COG id of driver
2d4d4     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
2d4d8                 | 
2d4d8                 | ' delay profile
2d4d8     07 00 00 00 
2d4dc     00 CF 7B 05 
2d4e0     80 D1 F0 08 
2d4e4     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
2d4e8     80 C4 60 0F 
2d4ec     80 39 7A 12 
2d4f0     40 2D D9 13 
2d4f4     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
2d4f8                 | 
2d4f8                 | ' data to be passed to driver when starting it
2d4f8                 | startupData
2d4f8     00 00 00 00 |     long    0           ' current frequency
2d4fc     00 00 00 00 |     long    FLAGS       ' optional flags for driver
2d500     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
2d504     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
2d508     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
2d50c     18 D5 02 00 |     long    deviceData  ' address of devices data structure in HUBRAM
2d510     98 D5 02 00 |     long    qosData     ' address of QoS data structure in HUBRAM
2d514     B8 D5 02 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
2d518                 | 
2d518                 | ' data for memory
2d518                 | deviceData
2d518                 |     ' 16 bank parameters follow (16MB per bank)
2d518     00 00 00 00 
      ...             
2d550     00 00 00 00 
2d554     00 00 00 00 |     long    0[16]                               ' banks 0-15
2d558                 |     ' 16 banks of pin parameters follow
2d558     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
2d55c     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
2d560     FF FF FF FF 
      ...             
2d590     FF FF FF FF 
2d594     FF FF FF FF |     long    -1[14]                              ' banks 2-15
2d598                 | 
2d598                 | ' data for COG polling
2d598                 | qosData 
2d598     00 00 FF FF 
2d59c     00 00 FF FF 
2d5a0     00 00 FF FF 
2d5a4     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
2d5a8     00 00 FF FF 
2d5ac     00 00 FF FF 
2d5b0     00 00 FF FF 
2d5b4     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
2d5b8                 |     
2d5b8                 | ' mailbox storage
2d5b8                 | 
2d5b8                 | mailboxes
2d5b8     00 00 00 00 
      ...             
2d610     00 00 00 00 
2d614     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
2d618                 | 	alignl
2d618                 | _psram16drv_spin2_dat_
2d618                 |                             orgh
2d618     00 00 00 00 
      ...             
2d630     00 00 00 00 
2d634     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
2d638                 | 
2d638                 | driver_start
2d638                 |                             org
2d638 000             | '..................................................................................................
2d638 000             | ' Memory layout for COG RAM once operational:
2d638 000             | '
2d638 000             | '  COG RAM address      Usage
2d638 000             | '  ---------------      ----
2d638 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
2d638 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
2d638 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
2d638 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
2d638 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
2d638 000             | '  ~$198-$1F3           State and register variables
2d638 000             | '
2d638 000             | ' Also during driver COG startup:
2d638 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
2d638 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
2d638 000             | '..................................................................................................
2d638 000             |                             
2d638 000             | ' Mailbox storage after vector initialization
2d638 000             | 
2d638 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
2d63c 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
2d640 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
2d644 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
2d648 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
2d64c 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
2d650 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
2d654 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
2d658 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
2d65c 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
2d660 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
2d664 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
2d668 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
2d66c 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
2d670 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
2d674 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
2d678 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
2d67c 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
2d680 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
2d684 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
2d688 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
2d68c 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
2d690 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
2d694 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
2d698 018             | 
2d698 018             | ' Mailbox parameter addresses per COG once patched
2d698 018             |                             
2d698 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
2d69c 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
2d6a0 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
2d6a4 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
2d6a8 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
2d6ac 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
2d6b0 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
2d6b4 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
2d6b8 020             | 
2d6b8 020             | '..................................................................................................
2d6b8 020             | ' Per COG request and state setup and service branching
2d6b8 020             |         
2d6b8 020             | cog0                 
2d6b8 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
2d6bc 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
2d6c0 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
2d6c4 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
2d6c8 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2d6cc 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2d6d0 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
2d6d4 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
2d6d8 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
2d6dc 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2d6e0 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2d6e4 02b 33 CA 63 FD |                             execf   request-0               'jump to service
2d6e8 02c             | cog1                        
2d6e8 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
2d6ec 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
2d6f0 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
2d6f4 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
2d6f8 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2d6fc 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2d700 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
2d704 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
2d708 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
2d70c 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2d710 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2d714 037 33 CA 63 FD |                             execf   request-0               'jump to service
2d718 038             | cog2                         
2d718 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
2d71c 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
2d720 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
2d724 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
2d728 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2d72c 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2d730 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
2d734 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
2d738 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
2d73c 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2d740 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2d744 043 33 CA 63 FD |                             execf   request-0               'jump to service
2d748 044             | cog3                        
2d748 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
2d74c 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
2d750 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
2d754 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
2d758 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2d75c 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2d760 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
2d764 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
2d768 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
2d76c 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2d770 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2d774 04f 33 CA 63 FD |                             execf   request-0               'jump to service
2d778 050             | cog4                        
2d778 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
2d77c 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
2d780 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
2d784 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
2d788 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2d78c 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2d790 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
2d794 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
2d798 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
2d79c 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2d7a0 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2d7a4 05b 33 CA 63 FD |                             execf   request-0               'jump to service
2d7a8 05c             | cog5                        
2d7a8 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
2d7ac 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
2d7b0 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
2d7b4 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
2d7b8 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2d7bc 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2d7c0 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
2d7c4 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
2d7c8 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
2d7cc 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2d7d0 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2d7d4 067 33 CA 63 FD |                             execf   request-0               'jump to service
2d7d8 068             | cog6                        
2d7d8 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
2d7dc 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
2d7e0 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
2d7e4 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
2d7e8 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2d7ec 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2d7f0 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
2d7f4 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
2d7f8 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
2d7fc 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2d800 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2d804 073 33 CA 63 FD |                             execf   request-0               'jump to service
2d808 074             | cog7                        
2d808 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
2d80c 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
2d810 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
2d814 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
2d818 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2d81c 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2d820 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
2d824 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
2d828 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
2d82c 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2d830 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2d834 07f 33 CA 63 FD |                             execf   request-0               'jump to service
2d838 080             |                             fit     128
2d838 080             | 
2d838 080             |                             fit     128
2d838 080             | pad                         long    0[128-$]                'align init code to $80
2d838 080             | 
2d838 080             | '..................................................................................................
2d838 080             | 
2d838 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
2d838 080             | 
2d838 080             | init                        
2d838 080             |                             ' get driver scratch long address in hub
2d838 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
2d83c 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
2d840 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
2d844 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
2d848 084             |                     
2d848 084             |                             ' read in the additional LUT RAM code
2d848 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
2d84c 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
2d850 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
2d854 087             | 
2d854 087             |                             ' read the startup parameters
2d854 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
2d858 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
2d85c 089             | 
2d85c 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
2d85c 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
2d860 08a             | 
2d860 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
2d864 08b 01 00 00 5F 
2d868 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
2d86c 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
2d870 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
2d874 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
2d878 090             | 
2d878 090             |                             ' setup data pin modes and data bus pin group in streamer commands
2d878 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
2d87c 091 01 00 00 FF 
2d880 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
2d884 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
2d888 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
2d88c 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
2d890 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
2d894 097 08 DE 47 F5 |                             or      a, #8
2d898 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
2d89c 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
2d8a0 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
2d8a4 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
2d8a8 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
2d8ac 09d 01 DE 07 F1 |                             add     a, #1
2d8b0 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
2d8b4 09f             |  
2d8b4 09f             |                             ' setup device control pin states
2d8b4 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
2d8b8 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
2d8bc 0a1 01 00 00 FF 
2d8c0 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
2d8c4 0a3             | 
2d8c4 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
2d8c8 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
2d8cc 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
2d8d0 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
2d8d4 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
2d8d8 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
2d8dc 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
2d8e0 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
2d8e4 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
2d8e8 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
2d8ec 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
2d8f0 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
2d8f4 0af             | pinloop
2d8f4 0af             |                             ' generate minimum CE high time before access
2d8f4 0af A1 07 00 FF 
2d8f8 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
2d8fc 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
2d900 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
2d904 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
2d908 0b4 1F DE 63 FD |                             waitx   a                       'delay
2d90c 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
2d910 0b6             | 
2d910 0b6             |                             ' setup the COG mailboxes and addresses 
2d910 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
2d914 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
2d918 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
2d91c 0b9             | 
2d91c 0b9 28 2E 64 FD |                             setq    #24-1
2d920 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
2d924 0bb             | 
2d924 0bb             |                             ' setup the polling loop for active COGs 
2d924 0bb 01 C2 63 FD |                             cogid   id
2d928 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
2d92c 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
2d930 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
2d934 0bf 0A F0 07 F6 |                             mov     ptra, #10
2d938 0c0 E1 F1 03 FA |                             mul     ptra, id
2d93c 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
2d940 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
2d944 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
2d948 0c4 03 C2 07 FA |                             mul     id, #3
2d94c 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
2d950 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
2d954 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
2d958 0c8 D8 01 B0 FD |                             call    #reloadcogs
2d95c 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
2d960 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
2d964 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
2d964 0cb D8 E5 B7 F9 |                             setd    d, #addr1
2d968 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
2d96c 0cd 08 04 DC FC |                             rep     #2, #8
2d970 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
2d974 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
2d978 0d0             | 
2d978 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
2d978 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
2d978 0d0 01 C2 63 FD |                             cogid   id
2d97c 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
2d980 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
2d984 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
2d988 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
2d98c 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
2d990 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
2d994 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
2d998 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
2d99c 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
2d9a0 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
2d9a4 0db 3F E4 A7 F9 |                             alti    d, #%111_111
2d9a8 0dc 00 00 00 F6 |                             mov     0-0, 0-0
2d9ac 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
2d9b0 0de A5 E5 03 F1 |                             add     d, const512
2d9b4 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
2d9b8 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
2d9bc 0e1 00 00 00 F6 |                             mov     0-0, 0-0
2d9c0 0e2             |                             
2d9c0 0e2             |                             ' setup register values for control vector loop setup after we return
2d9c0 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
2d9c4 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
2d9c8 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
2d9cc 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
2d9d0 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
2d9d4 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
2d9d8 0e8 D0 C3 8F F9 |                             altd    id, #id0
2d9dc 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
2d9e0 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
2d9e4 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
2d9e8 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
2d9ec 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
2d9f0 0ee             |  
2d9f0 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
2d9f4 0ef 07 CA 07 F5 |                             and     request, #7
2d9f8 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
2d9fc 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
2da00 0f2             |                             fit     $100                    'ensure all init code fits this space
2da00 0f2             | 
2da00 0f2             |                             fit     $100                    'ensure all init code fits this space
2da00 0f2             | 
2da00 0f2 00 00 00 00 
      ...             
2da30 0fe 00 00 00 00 
2da34 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
2da38 100             | 
2da38 100             | '..................................................................................................
2da38 100             | ' Error result handling and COG notification of request completion
2da38 100             | 
2da38 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
2da3c 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
2da40 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
2da44 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
2da48 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
2da4c 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
2da50 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
2da54 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
2da58 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
2da5c 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
2da60 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
2da64 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
2da68 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
2da6c 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
2da70 10e             | ' Poller re-starts here after a COG is serviced
2da70 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
2da74 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
2da78 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
2da7c 111             | ' Main dynamic polling loop repeats until a request arrives
2da7c 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
2da80 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
2da84 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
2da88 114             | 
2da88 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
2da8c 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
2da90 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
2da94 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
2da98 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
2da9c 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
2daa0 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
2daa4 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
2daa8 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
2daac 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
2dab0 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
2dab4 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
2dab8 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
2dabc 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
2dac0 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
2dac4 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
2dac8 124             | 
2dac8 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
2dacc 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
2dad0 126             |  
2dad0 126             | '..................................................................................................
2dad0 126             | ' List handler                               
2dad0 126             | 
2dad0 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
2dad4 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
2dad8 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
2dadc 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
2dae0 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
2dae4 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
2dae8 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
2daec 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
2daf0 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
2daf4 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
2daf8 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
2dafc 131 33 00 60 FD |                             execf   0-0                     'process the request 
2db00 132             | 
2db00 132             | '..................................................................................................
2db00 132             | ' Restoring per COG state and resuming where we left off
2db00 132             | 
2db00 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
2db04 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
2db08 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
2db0c 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
2db10 136 D8 CB FB F8 |                             getbyte request, addr1, #3
2db14 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
2db18 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
2db1c 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
2db20 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
2db24 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
2db28 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
2db2c 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
2db30 13e             |                    
2db30 13e             | '..................................................................................................
2db30 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
2db30 13e             | 
2db30 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
2db34 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
2db38 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
2db3c 141 D0 DF B7 F9 |                             setd    a, #id0
2db40 142 D8 DF BF F9 |                             sets    a, #addr1
2db44 143 FE FF FF FF 
2db48 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
2db4c 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
2db50 146 3F DE A7 F9 |                             alti    a, #%111_111 
2db54 147 00 00 F0 F9 |                             muxq    0-0, 0-0
2db58 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
2db5c 149 01 E2 63 FD |                             cogid   c
2db60 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
2db64 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
2db68 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
2db6c 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
2db70 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
2db74 14f 00 E0 03 F6 |                             mov     b, 0-0
2db78 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
2db7c 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
2db80 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
2db84 153 0C 00 90 AD |             if_z            jmp     #excluded               
2db88 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
2db8c 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
2db90 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
2db94 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
2db98 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
2db9c 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
2dba0 15a             | 
2dba0 15a             | 'determine priority cogs and build instructions for the polling sequence
2dba0 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
2dba4 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
2dba8 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
2dbac 15d             | 
2dbac 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
2dbb0 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
2dbb4 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
2dbb8 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
2dbbc 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
2dbc0 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
2dbc4 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
2dbc8 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
2dbcc 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
2dbd0 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
2dbd4 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
2dbd8 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
2dbdc 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
2dbe0 16a             | endprioloop
2dbe0 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
2dbe4 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
2dbe8 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
2dbec 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
2dbf0 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
2dbf4 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
2dbf8 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
2dbfc 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
2dc00 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
2dc04 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
2dc08 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
2dc0c 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
2dc10 176             | 
2dc10 176             | ' populate the round robin COG polling instructions
2dc10 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
2dc14 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
2dc18 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
2dc1c 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
2dc20 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
2dc24 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
2dc28 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
2dc2c 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
2dc30 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
2dc34 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
2dc38 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
2dc3c 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
2dc40 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
2dc44 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
2dc48 184             | '..................................................................................................
2dc48 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
2dc48 184             | 
2dc48 184             | set_latency                                                 '            (a) set latency
2dc48 184             | get_latency                                                 '            (b) get latency
2dc48 184             | set_burst                                                   '            (c) set burst size of bank
2dc48 184             | get_burst                                                   '            (d) get burst size of bank
2dc48 184             |                                                             '            (e) dump state
2dc48 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
2dc4c 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
2dc50 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
2dc54 187             |                                                             ' | | | | e  account for following AUGS
2dc54 187 04 00 00 FF 
2dc58 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
2dc5c 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
2dc60 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
2dc64 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
2dc68 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
2dc6c 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
2dc70 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
2dc74 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
2dc78 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
2dc7c 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
2dc80 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
2dc84 193             | 
2dc84 193             | '..................................................................................................
2dc84 193             | ' Misc EXECF code
2dc84 193             | 
2dc84 193 33 72 63 FD | start_read_exec             execf   newburstr
2dc88 194 33 7C 63 FD | start_write_exec            execf   resumewrites
2dc8c 195 33 78 63 FD | continue_read_exec          execf   lockedreads
2dc90 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
2dc94 197             | 
2dc94 197             | '..................................................................................................
2dc94 197             | ' Variables
2dc94 197             | 
2dc94 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
2dc98 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
2dc9c 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
2dca0 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
2dca4 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
2dca8 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
2dcac 19d             | 
2dcac 19d 00 00 00 80 | xfreq1          long    $80000000
2dcb0 19e 00 00 00 40 | xfreq2          long    $40000000
2dcb4 19f 03 00 00 00 | delay           long    3
2dcb8 1a0             | 
2dcb8 1a0             | lutcodeaddr                 
2dcb8 1a0             | startupparams
2dcb8 1a0             | excludedcogs                                    'careful: shared register use!
2dcb8 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
2dcbc 1a1 00 00 00 00 | flags           long    0
2dcc0 1a2             | mask                                            'careful: shared register use!
2dcc0 1a2 00 00 00 00 | resetmaskA      long    0
2dcc4 1a3             | limit                                           'careful: shared register use!
2dcc4 1a3 00 00 00 00 | resetmaskB      long    0
2dcc8 1a4 00 00 00 00 | datapins        long    0
2dccc 1a5             | const512                                        'careful: shared register use!
2dccc 1a5 00 00 00 00 | devicelist      long    0
2dcd0 1a6 00 00 00 00 | coglist         long    0
2dcd4 1a7 00 00 00 00 | mbox            long    0 
2dcd8 1a8             | 
2dcd8 1a8             | clkpin                                          'shared with code patched during init
2dcd8 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
2dcdc 1a9             | cspin                                           'shared with code patched during init
2dcdc 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
2dce0 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
2dce4 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
2dce8 1ac 01 00 00 00 | clkdelay        long    1
2dcec 1ad 00 00 00 00 | regdatabus      long    0
2dcf0 1ae             | 
2dcf0 1ae 10 00 00 00 | deviceaddr      long    $10
2dcf4 1af             | rrcounter
2dcf4 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
2dcf8 1b0             | 
2dcf8 1b0             | ' jump addresses for the per COG handlers
2dcf8 1b0 20 00 00 00 | cog0_handler    long    cog0
2dcfc 1b1 2C 00 00 00 | cog1_handler    long    cog1
2dd00 1b2 38 00 00 00 | cog2_handler    long    cog2
2dd04 1b3 44 00 00 00 | cog3_handler    long    cog3
2dd08 1b4 50 00 00 00 | cog4_handler    long    cog4
2dd0c 1b5 5C 00 00 00 | cog5_handler    long    cog5
2dd10 1b6 68 00 00 00 | cog6_handler    long    cog6
2dd14 1b7 74 00 00 00 | cog7_handler    long    cog7
2dd18 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
2dd1c 1b9             | 
2dd1c 1b9             | ' EXECF sequences
2dd1c 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
2dd20 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
2dd24 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
2dd28 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
2dd2c 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
2dd30 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
2dd34 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
2dd38 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
2dd38 1c0             | 
2dd38 1c0             | 
2dd38 1c0             | ' SKIPF sequences
2dd38 1c0             | skiptable
2dd38 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
2dd3c 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
2dd40 1c2 00 00 00 00 |                 long    0                      ' read modify write long
2dd44 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
2dd48 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
2dd4c 1c5 00 00 00 00 | pattern2        long    0
2dd50 1c6 00 00 00 00 | pattern3        long    0
2dd54 1c7 77 02 00 00 | singlelong      long    %1001110111  
2dd58 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
2dd5c 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
2dd60 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
2dd64 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
2dd68 1cc             | 
2dd68 1cc             | ' LUT RAM address values
2dd68 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
2dd6c 1cd DD 02 00 00 | continue_read   long    continue_read_lut
2dd70 1ce DB 02 00 00 | continue_write  long    continue_write_lut
2dd74 1cf F6 02 00 00 | noread          long    noread_lut
2dd78 1d0             | 
2dd78 1d0 00 00 00 00 | id0             long    0
2dd7c 1d1 01 00 00 00 | id1             long    1
2dd80 1d2 02 00 00 00 | id2             long    2
2dd84 1d3 03 00 00 00 | id3             long    3
2dd88 1d4 04 00 00 00 | id4             long    4
2dd8c 1d5 05 00 00 00 | id5             long    5
2dd90 1d6 06 00 00 00 | id6             long    6
2dd94 1d7 07 00 00 00 | id7             long    7
2dd98 1d8             | 
2dd98 1d8             | 'These next 10 request registers below are also temporarily reused during init 
2dd98 1d8             | 'and COG updates and need to follow immediately after id0-id7
2dd98 1d8 00 00 00 00 | addr1           long    0
2dd9c 1d9 00 00 00 00 | hubdata         long    0
2dda0 1da 00 00 00 00 | count           long    0
2dda4 1db 00 00 00 00 | addr2           long    0
2dda8 1dc 00 00 00 00 | total           long    0
2ddac 1dd 00 00 00 00 | offset1         long    0
2ddb0 1de 00 00 00 00 | offset2         long    0
2ddb4 1df 00 00 00 00 | link            long    0
2ddb8 1e0             | 
2ddb8 1e0             | burstwrite                                      'note shared register use during init
2ddb8 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
2ddbc 1e1 00 00 00 00 | id              long    0
2ddc0 1e2             | 
2ddc0 1e2 00 00 00 00 | header          long    0
2ddc4 1e3 00 00 00 00 | trailer         long    0
2ddc8 1e4 00 00 00 00 | cmdaddr         long    0
2ddcc 1e5 00 00 00 00 | request         long    0
2ddd0 1e6 00 00 00 00 | rrlimit         long    0
2ddd4 1e7 00 00 00 00 | pinconfig       long    0
2ddd8 1e8 00 00 00 00 | clks            long    0
2dddc 1e9 00 00 00 00 | resume          long    0
2dde0 1ea 00 00 00 00 | orighubsize     long    0
2dde4 1eb 00 00 00 00 | wrclks          long    0
2dde8 1ec             | 
2dde8 1ec 00 00 00 00 | pattern         long    0
2ddec 1ed 00 00 00 00 | hubscratch      long    0
2ddf0 1ee 00 10 00 00 | val4k           long    4096
2ddf4 1ef             | 
2ddf4 1ef             | ' temporary general purpose regs
2ddf4 1ef 00 00 00 00 | a               long    0
2ddf8 1f0 00 00 00 00 | b               long    0
2ddfc 1f1 00 00 00 00 | c               long    0
2de00 1f2 00 00 00 00 | d               long    0
2de04 1f3             |                 fit     502
2de04 1f3             | 
2de04 1f3             |                 fit     502
2de04 1f3             | 
2de04 1f3             | '..................................................................................................
2de04 1f3             | 
2de04 1f3             |             orgh
2de04                 | 
2de04                 | lut_code
2de04                 | 'HW init code up to 80 longs
2de04                 | 
2de04                 | '..................................................................................................
2de04                 | ' Memory layout for LUT RAM once operational:
2de04                 | '
2de04                 | '  LUT RAM address      Usage
2de04                 | '  ---------------      ----
2de04                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
2de04                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
2de04                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
2de04                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
2de04                 | '
2de04                 | ' Also during driver COG startup:
2de04                 | ' $230-$24F is used for HW init setup
2de04                 | ' $250-$26F is used as temporary vector storage 
2de04                 | '..................................................................................................
2de04                 | 
2de04                 |                 org $230    
2de04 230             | 
2de04 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
2de04 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
2de08 231 24 16 60 FD |                             pollxfi
2de0c 232 FF AA 2A FF 
2de10 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
2de14 234 28 00 B0 FD |                             call    #sendqspi
2de18 235 07 F8 07 FF 
2de1c 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
2de20 237 28 00 B0 FD |                             call    #sendspi
2de24 238 F8 07 78 FF 
2de28 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
2de2c 23a 1C 00 B0 FD |                             call    #sendspi
2de30 23b 7F 78 78 FF 
2de34 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
2de38 23d 10 00 B0 FD |                             call    #sendspi 
2de3c 23e 2D 00 64 FD |                             ret
2de40 23f             | 
2de40 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
2de44 240 32 0C 64 FD |                             skipf   #%110
2de48 241 9C EF 03 F6 |                             mov     pb, xsendimm
2de4c 242             | 
2de4c 242 10 D0 07 F6 | sendspi                     mov     clks, #16
2de50 243 97 EF 03 F6 |                             mov     pb, ximm8lut
2de54 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
2de58 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
2de5c 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
2de60 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
2de64 248 24 36 60 FD |                             waitxfi                         'wait for the completion
2de68 249 50 48 63 FD |                             fltl    datapins                'float data bus
2de6c 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
2de70 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
2de74 24c             | 
2de74 24c 00 00 00 00 
2de78 24d 00 00 00 00 
2de7c 24e 00 00 00 00 
2de80 24f 00 00 00 00 |                 long    0[$270-32-$]
2de84 250             |                 fit     $270-32  ' keep room for 32 vector longs
2de84 250             |     
2de84 250             |                 fit     $270-32  ' keep room for 32 vector longs
2de84 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
2de84 250             | rw_vect ' PSRAM jump vectors
2de84 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
2de88 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
2de8c 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
2de90 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
2de94 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
2de98 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
2de9c 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
2dea0 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
2dea4 258             | ro_vect ' R/O PSRAM jump vectors
2dea4 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
2dea8 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
2deac 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
2deb0 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
2deb4 25c 00 01 00 00 |                 long    unsupported
2deb8 25d 00 01 00 00 |                 long    unsupported
2debc 25e 00 01 00 00 |                 long    unsupported
2dec0 25f 00 01 00 00 |                 long    unsupported
2dec4 260             | ctrl_vect ' Control jump vectors
2dec4 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
2dec8 261 00 01 00 00 |                 long    unsupported
2decc 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
2ded0 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
2ded4 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
2ded8 265 00 01 00 00 |                 long    unsupported
2dedc 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
2dee0 267 3E 01 00 00 |                 long    reconfig 
2dee4 268             | no_vect ' Invalid bank jump vectors
2dee4 268 01 01 00 00 |                 long    invalidbank
2dee8 269 01 01 00 00 |                 long    invalidbank
2deec 26a 01 01 00 00 |                 long    invalidbank
2def0 26b 01 01 00 00 |                 long    invalidbank
2def4 26c 01 01 00 00 |                 long    invalidbank
2def8 26d 01 01 00 00 |                 long    invalidbank
2defc 26e 01 01 00 00 |                 long    invalidbank
2df00 26f 01 01 00 00 |                 long    invalidbank
2df04 270             |                 fit     $270
2df04 270             | 
2df04 270             |                 fit     $270
2df04 270             | '..................................................................................................
2df04 270             | ' PSRAM READS
2df04 270             |                                                             ' a b c d e f
2df04 270             |                                                             ' B W L B R L  (a) byte read
2df04 270             |                                                             ' Y O O U E O  (b) word read
2df04 270             |                                                             ' T R N R S C  (c) long read
2df04 270             |                                                             ' E D G S U K  (d) new burst read
2df04 270             |                                                             '       T M E  (e) resumed sub-burst
2df04 270             |                                                             '         E D  (f) locked sub-burst
2df04 270             | 
2df04 270             | 
2df04 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
2df08 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
2df0c 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
2df10 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
2df14 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
2df18 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
2df1c 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
2df20 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
2df24 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
2df28 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
2df2c 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
2df30 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
2df34 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
2df38 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
2df3c 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
2df40 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
2df44 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
2df48 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
2df4c 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
2df50 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
2df54 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
2df58 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
2df5c 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
2df60 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
2df64 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
2df68 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
2df6c 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
2df70 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
2df74 28c             | 
2df74 28c             |                             ' fall through to read bursts
2df74 28c             |                         
2df74 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
2df74 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
2df78 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
2df7c 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
2df80 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
2df84 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
2df88 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
2df8c 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
2df90 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
2df94 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
2df98 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
2df9c 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
2dfa0 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
2dfa4 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
2dfa8 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
2dfac 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
2dfb0 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
2dfb4 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
2dfb8 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
2dfbc 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
2dfc0 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
2dfc4 2a0 E8 D1 03 F1 |                             add     clks, clks
2dfc8 2a1             | readcommon
2dfc8 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
2dfcc 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
2dfd0 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
2dfd4 2a4             | 
2dfd4 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
2dfd8 2a5 69 C8 63 FD |                             rev     cmdaddr
2dfdc 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
2dfe0 2a7 61 C8 63 FD |                             mergeb  cmdaddr
2dfe4 2a8             | 
2dfe4 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
2dfe8 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
2dfec 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
2dfec 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
2dff0 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
2dff4 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
2dff8 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
2dffc 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
2dffc 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
2e000 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
2e004 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
2e008 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
2e00c 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
2e010 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
2e014 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
2e014 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
2e018 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
2e01c 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
2e020 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
2e024 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
2e028 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
2e02c 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
2e030 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
2e034 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
2e038 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
2e03c 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
2e040 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
2e044 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
2e048 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
2e04c 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
2e04c 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
2e050 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
2e054 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
2e058 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
2e05c 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
2e060 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
2e064 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
2e068 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
2e06c 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
2e070 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
2e074 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
2e078 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
2e07c 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
2e080 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
2e084 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
2e088 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
2e08c 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
2e090 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
2e094 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
2e098 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
2e09c 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
2e0a0 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
2e0a4 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
2e0a8 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
2e0ac 2da 10 03 90 FD |                             jmp     #writecommon
2e0b0 2db             | 
2e0b0 2db             | '..................................................................................................
2e0b0 2db             | ' Burst continuation testing
2e0b0 2db             | 
2e0b0 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
2e0b4 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
2e0b8 2dd             | continue_read_lut          
2e0b8 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
2e0bc 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
2e0c0 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
2e0c4 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
2e0c8 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
2e0cc 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
2e0d0 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
2e0d4 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
2e0d8 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
2e0dc 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
2e0e0 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
2e0e4 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
2e0e8 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
2e0ec 2ea             | 
2e0ec 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
2e0f0 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
2e0f4 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
2e0f8 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
2e0fc 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
2e100 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
2e104 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
2e108 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
2e10c 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
2e110 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
2e114 2f4 2A 1C 66 0D |             _ret_           push    #poller
2e118 2f5             | 
2e118 2f5             | 
2e118 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
2e11c 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
2e11c 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
2e120 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
2e124 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
2e128 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
2e12c 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
2e130 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
2e134 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
2e138 2fd 2D 00 64 FD |                             ret                             ' | continue processing
2e13c 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
2e140 2ff             | '..................................................................................................
2e140 2ff             | ' Completion of requests
2e140 2ff             | 
2e140 2ff             | complete_rw_lut             
2e140 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
2e144 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
2e148 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
2e14c 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
2e150 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
2e154 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
2e158 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
2e15c 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
2e160 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
2e164 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
2e168 309 32 62 64 AD |             if_z            skipf   #%110001
2e16c 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
2e170 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
2e174 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
2e178 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
2e17c 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
2e180 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
2e184 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
2e188 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
2e18c 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
2e190 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
2e194 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
2e198 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
2e19c 316             |                                                             ' skipcase (a) gfx copy to/from hub
2e19c 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
2e19c 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
2e19c 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
2e1a0 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
2e1a4 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
2e1a8 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
2e1ac 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
2e1b0 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
2e1b4 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
2e1b8 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
2e1bc 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
2e1c0 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
2e1c4 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
2e1c8 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
2e1cc 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
2e1d0 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
2e1d4 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
2e1d8 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
2e1dc 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
2e1e0 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
2e1e4 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
2e1e8 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
2e1ec 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
2e1f0 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
2e1f4 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
2e1f8 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
2e1fc 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
2e200 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
2e204 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
2e208 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
2e20c 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
2e210 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
2e214 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
2e218 335 DF B7 03 A6 |             if_z            mov     addr2, link
2e21c 336 34 FF 9F AD |             if_z            jmp     #checknext
2e220 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
2e224 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
2e228 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
2e22c 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
2e230 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
2e234 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
2e238 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
2e23c 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
2e240 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
2e244 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
2e248 341             | 
2e248 341             | '..................................................................................................
2e248 341             | ' PSRAM WRITES
2e248 341             |                                                             '  a b c d e f g h
2e248 341             | 
2e248 341             |                                                             '  B W L F B R L L (a) byte write(s)
2e248 341             |                                                             '  Y O O I U E O O (b) word write(s)
2e248 341             |                                                             '  T R N L R S C C (c) long write(s)
2e248 341             |                                                             '  E D G L S U K K (d) resumed fill
2e248 341             |                                                             '          T M E E (e) new burst write
2e248 341             |                                                             '            E D D (f) resumed burst
2e248 341             |                                                             '              F B (g) locked fill
2e248 341             |                                                             '              I U (h) locked burst write
2e248 341             |                                                             '              L R 
2e248 341             |                                                             '              L S 
2e248 341             |                                                             '                T 
2e248 341             | 
2e248 341             | w_single                   
2e248 341             | w_fill_cont           
2e248 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
2e24c 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
2e250 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
2e254 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
2e258 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
2e25c 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
2e260 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
2e264 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
2e268 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
2e26c 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
2e270 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
2e274 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
2e278 34d             |                ' disable call to r_resume_burst for single longs when z=0
2e278 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
2e27c 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
2e280 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
2e284 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
2e288 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
2e28c 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
2e290 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
2e294 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
2e298 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
2e29c 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
2e2a0 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
2e2a4 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
2e2a8 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
2e2ac 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
2e2b0 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
2e2b4 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
2e2b8 35d             |         
2e2b8 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
2e2b8 35d             |             '
2e2b8 35d             |             '  At least one of these 3 optional components will be sent
2e2b8 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
2e2b8 35d             |             '     body - N x full longs of data
2e2b8 35d             |             '     trailer - last partial long of data
2e2b8 35d             |             '
2e2b8 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
2e2b8 35d             |             '
2e2b8 35d             |             'Case    Type                           Sends
2e2b8 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
2e2b8 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
2e2b8 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
2e2b8 35d             |             ' 4)     Multiple long fill             body only
2e2b8 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
2e2b8 35d             | 
2e2b8 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
2e2b8 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
2e2bc 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
2e2c0 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
2e2c4 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
2e2c8 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
2e2cc 362 13 8C 07 F6 |                             mov     pattern3, #%10011
2e2d0 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
2e2d4 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
2e2d8 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
2e2dc 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
2e2e0 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
2e2e4 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
2e2e8 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
2e2ec 36a             |                             
2e2ec 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
2e2f0 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
2e2f4 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
2e2f8 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
2e2fc 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
2e300 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
2e304 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
2e308 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
2e30c 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
2e310 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
2e314 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
2e318 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
2e31c 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
2e320 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
2e324 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
2e328 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
2e32c 37a             | 
2e32c 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
2e330 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
2e334 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
2e338 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
2e33c 37e             |                  
2e33c 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
2e340 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
2e344 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
2e348 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
2e34c 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
2e350 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
2e354 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
2e358 385             | 
2e358 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
2e35c 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
2e360 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
2e364 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
2e368 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
2e36c 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
2e370 38b             | 
2e370 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
2e370 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
2e374 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
2e378 38d 2A B0 63 FD |                             push    addr1                   'save address
2e37c 38e             | 
2e37c 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
2e37c 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
2e380 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
2e384 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
2e388 391             |             
2e388 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
2e38c 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
2e390 393 2B B0 63 FD |                             pop     addr1                   'restore address
2e394 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
2e398 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
2e39c 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
2e3a0 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
2e3a4 398             | 
2e3a4 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
2e3a8 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
2e3ac 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
2e3b0 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
2e3b4 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
2e3b8 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
2e3bc 39e             | 
2e3bc 39e             |                             'trailer is done
2e3bc 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
2e3c0 39f             | 
2e3c0 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
2e3c4 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
2e3c8 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
2e3cc 3a2             | 
2e3cc 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
2e3d0 3a3 69 C8 63 FD |                             rev     cmdaddr                 
2e3d4 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
2e3d8 3a5 61 C8 63 FD |                             mergeb  cmdaddr
2e3dc 3a6             |                             
2e3dc 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
2e3e0 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
2e3e4 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
2e3e8 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
2e3ec 3aa             |                                                          
2e3ec 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
2e3f0 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
2e3f4 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
2e3f8 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
2e3fc 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
2e400 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
2e404 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
2e408 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
2e40c 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
2e410 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
2e414 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
2e418 3b5             |  
2e418 3b5 59 52 63 FD |                             drvh    cspin
2e41c 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
2e420 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
2e424 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
2e428 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
2e42c 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
2e430 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
2e434 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
2e438 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
2e43c 3be EA E5 03 F6 |                             mov     d, orighubsize
2e440 3bf EF E5 63 F0 |                             shl     d, a
2e444 3c0 F2 E3 83 F1 |                             sub     c, d
2e448 3c1 DD E3 03 F1 |                             add     c, offset1
2e44c 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
2e450 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
2e454 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
2e458 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
2e45c 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
2e460 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
2e464 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
2e468 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
2e46c 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
2e470 3cb BB D3 03 F6 |                             mov     resume, restorefill
2e474 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
2e478 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
2e47c 3ce 6C FC BF CD |             if_c            call    #yield
2e480 3cf 2D 00 64 FD |                             ret
2e484 3d0             |                            
2e484 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
2e484 3d0             |                       '     rczl    pa                      'rotate left into address offset
2e484 3d0             |                       '     rczl    c wcz                   'restore count and flags
2e484 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
2e488 3d1 02 EC 67 F0 |                             shl     pa, #2
2e48c 3d2 28 06 64 AD |             if_z            setq    #3
2e490 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
2e494 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
2e498 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
2e49c 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
2e4a0 3d7             | 
2e4a0 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
2e4a4 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
2e4a8 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
2e4ac 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
2e4b0 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
2e4b4 3dc             |                 fit 1024-32
2e4b4 3dc             |         
2e4b4 3dc             | 
2e4b4 3dc             | '..................................................................................................
2e4b4 3dc             | 
2e4b4 3dc             |                 fit 1024-32
2e4b4 3dc 00 00 00 00 
2e4b8 3dd 00 00 00 00 
2e4bc 3de 00 00 00 00 
2e4c0 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
2e4c4 3e0             |                 org 1024-32
2e4c4 000             | 
2e4c4 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
2e4c4 000 00 00 00 00 |                 long $0000
2e4c8 001 11 11 00 00 |                 long $1111
2e4cc 002 22 22 00 00 |                 long $2222
2e4d0 003 33 33 00 00 |                 long $3333
2e4d4 004 44 44 00 00 |                 long $4444
2e4d8 005 55 55 00 00 |                 long $5555
2e4dc 006 66 66 00 00 |                 long $6666
2e4e0 007 77 77 00 00 |                 long $7777
2e4e4 008 88 88 00 00 |                 long $8888
2e4e8 009 99 99 00 00 |                 long $9999
2e4ec 00a AA AA 00 00 |                 long $aaaa
2e4f0 00b BB BB 00 00 |                 long $bbbb
2e4f4 00c CC CC 00 00 |                 long $cccc
2e4f8 00d DD DD 00 00 |                 long $dddd
2e4fc 00e EE EE 00 00 |                 long $eeee
2e500 00f FF FF 00 00 |                 long $ffff
2e504 010             | 
2e504 010             | 'masks
2e504 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
2e508 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
2e50c 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
2e510 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
2e514 014             | 
2e514 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
2e518 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
2e51c 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
2e520 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
2e524 018             | 
2e524 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
2e528 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
2e52c 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
2e530 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
2e534 01c             | 
2e534 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
2e538 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
2e53c 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
2e540 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
2e544 020             |         fit 1024
2e544 020             | 
2e544 020             |         fit 1024
2e544 020             | 
2e544 020             | '--------------------------------------------------------------------------------------------------
2e544 020             |         orgh
2e544                 | 
2e544                 | gfxexpansion
2e544                 |                             'simple line drawing graphics expansion of memory driver
2e544                 |                             'jmp     #donerepeats                'just return for now
2e544                 | 
2e544     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
2e548     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
2e54c     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
2e550     DD E1 03 F6 |                             mov     b, offset1              'get error term
2e554     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
2e558     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
2e55c     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
2e560     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
2e564     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
2e568     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
2e56c     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
2e570     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
2e574     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
2e578     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
2e57c     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
2e580     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
2e584     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
2e588     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
2e58c     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
2e590     DC E5 33 F9 |                             getword d, total, #0            'get line width
2e594     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
2e598     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
2e59c     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
2e5a0     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
2e5a4     C3 03 80 FD |                             jmp     #readmask               'continue filling
2e5a8                 | 	alignl
2e5a8                 | _usbnew_spin2_dat_
2e5a8                 |                 org     $000
2e5a8 000             | 
2e5a8 000             | usb_host_start
2e5a8 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
2e5ac 001             | 
2e5ac 001 03 00 00 FF 
2e5b0 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
2e5b4 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
2e5b8 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
2e5bc 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
2e5c0 006 29 70 63 FD |                 setq2   htmp
2e5c4 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
2e5c8 008             | 
2e5c8 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
2e5cc 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
2e5d0 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
2e5d4 00b             | 
2e5d4 00b             | '------------------------------------------------------------------------------
2e5d4 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
2e5d4 00b             | ' special because the receiving function must not respond with either STALL or
2e5d4 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
2e5d4 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
2e5d4 00b             | ' corrupt packet, it must ignore the transaction
2e5d4 00b             | '------------------------------------------------------------------------------
2e5d4 00b             | ' On entry:
2e5d4 00b             | '   PTRA - start address of the SETUP data struct.
2e5d4 00b             | ' On exit:
2e5d4 00b             | '   retval - PID_ACK on success, otherwise error code.
2e5d4 00b             | '------------------------------------------------------------------------------
2e5d4 00b             | txn_setup
2e5d4 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
2e5d8 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
2e5dc 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
2e5e0 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
2e5e4 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
2e5e8 010             | .setup
2e5e8 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
2e5ec 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2e5f0 012 2D 00 64 AD |         if_z    ret
2e5f4 013 7C 0B B0 FD |                 call    #retry_wait
2e5f8 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2e5fc 015 2D 00 64 AD |         if_z    ret
2e600 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
2e604 017 E0 FF 9F FD |                 jmp     #.setup
2e608 018             | 
2e608 018             | '------------------------------------------------------------------------------
2e608 018             | ' IN/INTERRUPT transaction.
2e608 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
2e608 018             | '------------------------------------------------------------------------------
2e608 018             | ' On entry:
2e608 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
2e608 018             | '     CRC(b19..23).
2e608 018             | ' On exit:
2e608 018             | '------------------------------------------------------------------------------
2e608 018             | txn_in
2e608 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
2e60c 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
2e610 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
2e614 01b             | 
2e614 01b             |                 ' Fall through to urx_packet
2e614 01b             | 
2e614 01b             | '------------------------------------------------------------------------------
2e614 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
2e614 01b             | ' received are handshakes and IN DATAx.
2e614 01b             | '------------------------------------------------------------------------------
2e614 01b             | ' On entry:
2e614 01b             | ' On exit:
2e614 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
2e614 01b             | '     returned.
2e614 01b             | '------------------------------------------------------------------------------
2e614 01b             | urx_packet
2e614 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
2e618 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2e61c 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
2e620 01e 1A 92 63 FD |                 getct   hct2
2e624 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
2e628 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
2e62c 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
2e630 022             | .wait_sop
2e630 022 22 A7 8A FA |                 rdpin   urx, dm
2e634 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2e638 024 08 00 90 CD |         if_c    jmp     #.get_pid
2e63c 025 FC 25 CC FB |                 jnct2   #.wait_sop
2e640 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
2e644 027             | .get_pid
2e644 027 28 02 B0 FD |                 call    #urx_next
2e648 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
2e64c 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
2e650 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
2e654 02b             | .chk_pid
2e654 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2e658 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
2e65c 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
2e660 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
2e664 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
2e668 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
2e66c 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
2e670 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
2e674 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
2e678 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
2e67c 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
2e680 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
2e684 037             | .ack_resend
2e684 037 22 A7 82 FA |                 rqpin   urx, dm
2e688 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
2e68c 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
2e690 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
2e694 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
2e698 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
2e69c 03d             | .chk_eop
2e69c 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2e6a0 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
2e6a4 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
2e6a8 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
2e6ac 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
2e6b0 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
2e6b4 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
2e6b8 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
2e6bc 045 2D 00 64 FD |                 ret
2e6c0 046             | .idle
2e6c0 046 22 A7 82 FA |                 rqpin   urx, dm
2e6c4 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
2e6c8 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
2e6cc 049 2D 00 64 FD |                 ret
2e6d0 04a             | 
2e6d0 04a             | '------------------------------------------------------------------------------
2e6d0 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
2e6d0 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
2e6d0 04a             | ' if one is required.
2e6d0 04a             | '------------------------------------------------------------------------------
2e6d0 04a             | ' On entry:
2e6d0 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
2e6d0 04a             | ' On exit:
2e6d0 04a             | '------------------------------------------------------------------------------
2e6d0 04a             | utx_token
2e6d0 04a 22 A7 82 FA |                 rqpin   urx, dm
2e6d4 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
2e6d8 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
2e6dc 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
2e6e0 04e 34 0D B0 CD |         if_c    call    #utx_pre
2e6e4 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
2e6e8 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
2e6ec 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
2e6f0 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
2e6f4 053             | .next_byte
2e6f4 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
2e6f8 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
2e6fc 055             | .wait
2e6fc 055 40 46 72 FD |                 testp   dp                      wc
2e700 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
2e704 057 23 03 08 FC |                 akpin   dp
2e708 058 22 A5 22 FC |                 wypin   utx, dm
2e70c 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
2e710 05a             | 
2e710 05a             | '------------------------------------------------------------------------------
2e710 05a             | ' SETUP/OUT/INTERRUPT transaction.
2e710 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
2e710 05a             | '------------------------------------------------------------------------------
2e710 05a             | ' On entry:
2e710 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
2e710 05a             | '     CRC(b19..23).
2e710 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
2e710 05a             | '   pkt_data - count of DATAx payload bytes to send.
2e710 05a             | ' On exit:
2e710 05a             | '------------------------------------------------------------------------------
2e710 05a             | txn_out
2e710 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
2e714 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
2e718 05c 00 00 C0 FF 
2e71c 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
2e720 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
2e724 05f             | 
2e724 05f             |                 ' Fall through to utx_data
2e724 05f             | 
2e724 05f             | '------------------------------------------------------------------------------
2e724 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
2e724 05f             | ' calculated while the data byte is being shifted out. Since data stage
2e724 05f             | ' success/fail is not determined until the status stage of the transaction,
2e724 05f             | ' this routine is only concerned about the current DATAx packet.
2e724 05f             | '------------------------------------------------------------------------------
2e724 05f             | ' On entry:
2e724 05f             | '   PTRA - hub start address of the data to read.
2e724 05f             | '   pkt_cnt - data payload size.
2e724 05f             | ' On exit:
2e724 05f             | '------------------------------------------------------------------------------
2e724 05f             | utx_data
2e724 05f 22 A7 82 FA |                 rqpin   urx, dm
2e728 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2e72c 061 F4 FF 9F CD |         if_c    jmp     #utx_data
2e730 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
2e734 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
2e738 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
2e73c 065 D8 0C B0 CD |         if_c    call    #utx_pre
2e740 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
2e744 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
2e748 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
2e74c 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
2e750 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
2e754 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
2e758 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
2e75c 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
2e760 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
2e764 06f             | .read_byte
2e764 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
2e768 070 F0 00 B0 FD |                 call    #utx_byte
2e76c 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
2e770 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
2e774 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
2e778 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
2e77c 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
2e780 076             | .send_crc
2e780 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
2e784 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
2e788 078 D0 00 B0 FD |                 call    #utx_byte
2e78c 079 5D A5 EA F8 |                 getbyte utx, crc, #1
2e790 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
2e794 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
2e798 07c             | 
2e798 07c             | '------------------------------------------------------------------------------
2e798 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
2e798 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
2e798 07c             | ' expects that the packet includes at least the CRC word.
2e798 07c             | '
2e798 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
2e798 07c             | ' was requested, which makes it difficult to determine where the data stops
2e798 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
2e798 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
2e798 07c             | ' USB-16 expected residual value of 0xB001.
2e798 07c             | '
2e798 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
2e798 07c             | ' so the caller can verify IN success before writing the data to its final
2e798 07c             | ' destination.
2e798 07c             | '------------------------------------------------------------------------------
2e798 07c             | ' On entry:
2e798 07c             | '   pkt_data - max byte count expected to be in the packet.
2e798 07c             | '   newb_flg - signals new byte ready when toggled.
2e798 07c             | ' On exit:
2e798 07c             | '   pkt_cnt - actual number of bytes read.
2e798 07c             | '------------------------------------------------------------------------------
2e798 07c             | urx_data
2e798 07c F7 75 03 F6 |                 mov     htmp2, pb
2e79c 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
2e7a0 07e 00 00 C0 FF 
2e7a4 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
2e7a8 080 BA EF 03 F6 |                 mov     pb, htmp2
2e7ac 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
2e7b0 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
2e7b4 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
2e7b8 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
2e7bc 085             | .wait_byte
2e7bc 085             | ' In-line rx for max speed
2e7bc 085 22 A7 82 FA |                 rqpin   urx, dm
2e7c0 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
2e7c4 087 53 A5 02 F5 |                 and     utx, urx
2e7c8 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
2e7cc 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
2e7d0 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
2e7d4 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
2e7d8 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
2e7dc 08d DC FF 9F FD |                 jmp     #.wait_byte
2e7e0 08e             | .get_byte
2e7e0 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
2e7e4 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
2e7e8 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
2e7ec 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
2e7f0 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
2e7f4 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
2e7f8 094             | .end_crc
2e7f8 094 01 B8 06 F1 |                 add     pkt_cnt, #1
2e7fc 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
2e800 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
2e804 097 2D 00 64 1D |         if_a    ret
2e808 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
2e808 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
2e808 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
2e808 098             | ' to miss it, so cheat a bit and look for SOP clear here.
2e808 098 22 A7 82 FA |                 rqpin   urx, dm
2e80c 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
2e810 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
2e814 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
2e814 09b             | .chk_crc
2e814 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
2e818 09c 58 00 00 FF 
2e81c 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
2e820 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
2e824 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
2e828 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
2e82c 0a1 34 09 B0 FD |                 call    #poll_waitx
2e830 0a2             | 
2e830 0a2             |                 ' Fall through to utx_handshake
2e830 0a2             | 
2e830 0a2             | '------------------------------------------------------------------------------
2e830 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
2e830 0a2             | ' the appropriate IP delay has been inserted.
2e830 0a2             | '------------------------------------------------------------------------------
2e830 0a2             | ' On entry:
2e830 0a2             | '   retval - handshake PID to send.
2e830 0a2             | ' On exit:
2e830 0a2             | '   retval unchanged.
2e830 0a2             | '------------------------------------------------------------------------------
2e830 0a2             | utx_handshake
2e830 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
2e834 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
2e838 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
2e83c 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
2e840 0a6 5F A5 02 F6 |                 mov     utx, retval
2e844 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
2e848 0a8             | .idle
2e848 0a8 22 A7 82 FA |                 rqpin   urx, dm
2e84c 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
2e850 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
2e854 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
2e858 0ac 08 09 90 FD |                 jmp     #poll_waitx
2e85c 0ad             | 
2e85c 0ad             | '------------------------------------------------------------------------------
2e85c 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
2e85c 0ad             | '------------------------------------------------------------------------------
2e85c 0ad             | ' On entry:
2e85c 0ad             | '   utx - byte to transmit.
2e85c 0ad             | ' On exit:
2e85c 0ad             | '------------------------------------------------------------------------------
2e85c 0ad             | utx_byte
2e85c 0ad 40 46 72 FD |                 testp   dp                      wc
2e860 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
2e864 0af 23 03 08 FC |                 akpin   dp
2e868 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
2e86c 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
2e870 0b2             | 
2e870 0b2             | '------------------------------------------------------------------------------
2e870 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
2e870 0b2             | '------------------------------------------------------------------------------
2e870 0b2             | ' On entry:
2e870 0b2             | ' On exit:
2e870 0b2             | '   retval - the byte read.
2e870 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
2e870 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
2e870 0b2             | '     received.
2e870 0b2             | '------------------------------------------------------------------------------
2e870 0b2             | urx_next
2e870 0b2 22 A7 8A FA |                 rdpin   urx, dm
2e874 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
2e878 0b4 53 A5 02 F5 |                 and     utx, urx
2e87c 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
2e880 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
2e884 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
2e888 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
2e88c 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2e890 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
2e894 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
2e898 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
2e89c 0bd 2D 00 64 FD |                 ret
2e8a0 0be             | 
2e8a0 0be             | '------------------------------------------------------------------------------
2e8a0 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
2e8a0 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
2e8a0 0be             | ' length, and the PID is not included in the CRC calculation:
2e8a0 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
2e8a0 0be             | '  CRC5  ENDP ADDRESS PID
2e8a0 0be             | ' %00000_1111_1111111_xxxxxxxx
2e8a0 0be             | '------------------------------------------------------------------------------
2e8a0 0be             | ' On entry:
2e8a0 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
2e8a0 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
2e8a0 0be             | ' On exit:
2e8a0 0be             | '   ep_addr_pid - CRC value appended to the packet.
2e8a0 0be             | '------------------------------------------------------------------------------
2e8a0 0be             | calc_crc5
2e8a0 0be FF 03 00 FF 
2e8a4 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
2e8a8 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
2e8ac 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
2e8b0 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
2e8b4 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
2e8b8 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
2e8bc 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
2e8c0 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
2e8c4 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
2e8c8 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
2e8cc 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
2e8d0 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
2e8d4 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
2e8d8 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
2e8dc 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
2e8e0 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
2e8e4 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
2e8e8 0d0             | 
2e8e8 0d0             | '------------------------------------------------------------------------------
2e8e8 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
2e8e8 0d0             | '------------------------------------------------------------------------------
2e8e8 0d0             | isr1_fsframe
2e8e8 0d0 1A 92 62 FD |                 getct   iframe_ct_base
2e8ec 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2e8f0 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2e8f4 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
2e8f8 0d4             | .wait
2e8f8 0d4 40 46 72 FD |                 testp   dp                      wc
2e8fc 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
2e900 0d6 23 03 08 FC |                 akpin   dp
2e904 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
2e908 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
2e90c 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
2e910 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
2e914 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
2e918 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
2e91c 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
2e920 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
2e924 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
2e928 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
2e92c 0e1 2C FF BF FD |                 call    #utx_byte
2e930 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
2e934 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
2e938 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
2e93c 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
2e940 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
2e944 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
2e948 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
2e94c 0e9 5B A5 42 F5 |                 or      utx, icrc
2e950 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
2e954 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
2e958 0ec 20 00 90 FD |                 jmp     #isr1_wait
2e95c 0ed             | isr1_lsframe
2e95c 0ed 1A 92 62 FD |                 getct   iframe_ct_base
2e960 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2e964 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2e968 0f0             | .wait
2e968 0f0 40 46 72 FD |                 testp   dp                      wc
2e96c 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
2e970 0f2 23 03 08 FC |                 akpin   dp
2e974 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
2e978 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
2e97c 0f5             | isr1_wait
2e97c 0f5 22 A5 82 FA |                 rqpin   utx, dm
2e980 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
2e984 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
2e988 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
2e98c 0f9 03 00 00 FF 
2e990 0fa FF B3 06 F5 |                 and     frame, ##$7ff
2e994 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
2e998 0fc F5 FF 3B FB |                 reti1
2e99c 0fd             | 
2e99c 0fd             | '------------------------------------------------------------------------------
2e99c 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
2e99c 0fd             | ' transaction will complete before the next frame is triggered.
2e99c 0fd             | '------------------------------------------------------------------------------
2e99c 0fd             | ' On entry:
2e99c 0fd             | ' On exit:
2e99c 0fd             | '------------------------------------------------------------------------------
2e99c 0fd             | wait_txn_ok
2e99c 0fd 1A 74 63 FD |                 getct   htmp2
2e9a0 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
2e9a4 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2e9a8 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
2e9ac 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
2e9b0 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
2e9b4 103 2D 00 64 FD |                 ret
2e9b8 104             | 
2e9b8 104             | '------------------------------------------------------------------------------
2e9b8 104             | ' A device connection was detected, or a bus reset was requested by the USB
2e9b8 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
2e9b8 104             | ' and perform a reset sequence prior to device enumeration.
2e9b8 104             | '------------------------------------------------------------------------------
2e9b8 104             | dev_reset
2e9b8 104 22 A7 82 FA |                 rqpin   urx, dm
2e9bc 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
2e9c0 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
2e9c4 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
2e9c8 108             | reset
2e9c8 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
2e9cc 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
2e9d0 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
2e9d4 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2e9d8 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
2e9dc 10d 1A 92 62 FD |                 getct   iframe_ct_base
2e9e0 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2e9e4 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2e9e8 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
2e9ec 111 24 70 07 F1 |                 add     htmp, #36
2e9f0 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
2e9f4 113             | .framewait
2e9f4 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
2e9f8 114 F8 FF 9F CD |         if_b    jmp     #.framewait
2e9fc 115 2D 00 64 FD |                 ret
2ea00 116             | 
2ea00 116             | '------------------------------------------------------------------------------
2ea00 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
2ea00 116             | '------------------------------------------------------------------------------
2ea00 116             | ' On entry:
2ea00 116             | '   PTRA - source address.
2ea00 116             | '   PB - destination address.
2ea00 116             | '   hr0 - length of copy, in bytes.
2ea00 116             | ' On exit:
2ea00 116             | '------------------------------------------------------------------------------
2ea00 116             | hmemcpy
2ea00 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
2ea04 117 F7 71 43 FC |                 wrbyte  htmp, pb
2ea08 118 01 EE 07 F1 |                 add     pb, #1
2ea0c 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
2ea10 11a             | 
2ea10 11a             | '------------------------------------------------------------------------------
2ea10 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
2ea10 11a             | ' loop until the errant device is disconnected.
2ea10 11a             | '------------------------------------------------------------------------------
2ea10 11a             | ' On entry:
2ea10 11a             | ' On exit:
2ea10 11a             | '------------------------------------------------------------------------------
2ea10 11a             | host_error
2ea10 11a             |           if ERROR_LED >= 0
2ea10 11a             |           end
2ea10 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
2ea14 11b             | 
2ea14 11b             | '------------------------------------------------------------------------------
2ea14 11b             | ' Get HID descriptor buffer for current port
2ea14 11b             | '------------------------------------------------------------------------------
2ea14 11b             | ' On entry:
2ea14 11b             | ' On exit:
2ea14 11b             | '   PB - HID descriptor buffer pointer
2ea14 11b             | '------------------------------------------------------------------------------
2ea14 11b             | get_hid_descr_buffer
2ea14 11b 2D EF 03 F6 |                 mov     pb, hdev_port
2ea18 11c 01 EE E7 F2 |                 cmpsub  pb, #1
2ea1c 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
2ea20 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
2ea24 11f             | 
2ea24 11f             | 
2ea24 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
2ea28 120             | 
2ea28 120             | ' USB commands and error codes
2ea28 120 00 00 00 00 | cmd_data        long    0
2ea2c 121 00 00 00 00 | usb_err_code    long    ERR_NONE
2ea30 122             | 
2ea30 122             | ' Parameters block assigned at cog startup
2ea30 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
2ea34 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
2ea38 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
2ea3c 125             | if ACTIVITY_LED >= 0
2ea3c 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
2ea3c 125             | end
2ea3c 125             | if ERROR_LED >= 0
2ea3c 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
2ea3c 125             | end
2ea3c 125 00 00 00 00 | hid_descr_p     long    0
2ea40 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
2ea40 126             | 'hkbd_report_p   long    0
2ea40 126 00 00 00 00 | hub_descr_p     long    0
2ea44 127 00 00 00 00 | urx_buff_p      long    0
2ea48 128 00 00 00 00 | dev_desc_buff_p long    0
2ea4c 129 00 00 00 00 | con_desc_buff_p long    0
2ea50 12a 00 00 00 00 | cache_start_p   long    0
2ea54 12b 00 00 00 00 | cache_end_p     long    0
2ea58 12c             | if EMUPAD_MAX_PLAYER > 0
2ea58 12c             | emupad_out_ptr  long    0
2ea58 12c             | end
2ea58 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
2ea5c 12d             | 
2ea5c 12d             | hdev_init_start
2ea5c 12d             | hdev_port       res     1
2ea5c 12d             | hdev_port       res     1
2ea5c 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
2ea5c 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
2ea5c 12d             | kbm_next_datax  res     1
2ea5c 12d             | kbm_next_datax  res     1
2ea5c 12d             | hub_intf_num    res     1
2ea5c 12d             | hub_intf_num    res     1
2ea5c 12d             | hub_next_datax  res     1
2ea5c 12d             | hub_next_datax  res     1
2ea5c 12d             | hub_status_chg  res     1
2ea5c 12d             | hub_status_chg  res     1
2ea5c 12d             | hub_port_status res     1
2ea5c 12d             | hub_port_status res     1
2ea5c 12d             | if HAVE_MOUSE
2ea5c 12d             | ms_intf_num     res     1
2ea5c 12d             | ms_intf_num     res     1
2ea5c 12d             | ms_in_max_pkt   res     1
2ea5c 12d             | ms_in_max_pkt   res     1
2ea5c 12d             | end
2ea5c 12d             | kb_intf_num     res     1
2ea5c 12d             | kb_intf_num     res     1
2ea5c 12d             | kb_interval     res     1
2ea5c 12d             | kb_interval     res     1
2ea5c 12d             | kb_in_max_pkt   res     1
2ea5c 12d             | kb_in_max_pkt   res     1
2ea5c 12d             | kb_max_index    res     1
2ea5c 12d             | kb_max_index    res     1
2ea5c 12d             | kb_led_states   res     1
2ea5c 12d             | kb_led_states   res     1
2ea5c 12d             | gp_intf_num     res     1
2ea5c 12d             | gp_intf_num     res     1
2ea5c 12d             | gp_interval     res     1
2ea5c 12d             | gp_interval     res     1
2ea5c 12d             | gp_max_index    res     1
2ea5c 12d             | gp_max_index    res     1
2ea5c 12d             | gp_descr_len    res     1+MAX_DEVICES
2ea5c 12d             | gp_descr_len    res     1+MAX_DEVICES
2ea5c 12d             | hdev_init_end
2ea5c 12d             | 
2ea5c 12d             | ' Initialized at cog startup:
2ea5c 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
2ea5c 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
2ea5c 12d             | iframe_ct_new   res     1
2ea5c 12d             | iframe_ct_new   res     1
2ea5c 12d             | iframe_ct_base  res     1
2ea5c 12d             | iframe_ct_base  res     1
2ea5c 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
2ea5c 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
2ea5c 12d             | 
2ea5c 12d             | ' This register block is reset to zero when a USB device connects
2ea5c 12d             | hreg_init_start
2ea5c 12d             | hstatus         res     1         ' Host status flags
2ea5c 12d             | hstatus         res     1         ' Host status flags
2ea5c 12d             | hctwait         res     1         ' Poll-based wait clocks
2ea5c 12d             | hctwait         res     1         ' Poll-based wait clocks
2ea5c 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
2ea5c 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
2ea5c 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
2ea5c 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
2ea5c 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
2ea5c 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
2ea5c 12d             | xfer_retry      res     1         ' Control transfer retry count
2ea5c 12d             | xfer_retry      res     1         ' Control transfer retry count
2ea5c 12d             | retry           res     1         ' Transaction retry count
2ea5c 12d             | retry           res     1         ' Transaction retry count
2ea5c 12d             | utx             res     1         ' Byte to transmit on USB
2ea5c 12d             | utx             res     1         ' Byte to transmit on USB
2ea5c 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
2ea5c 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
2ea5c 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
2ea5c 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
2ea5c 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
2ea5c 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
2ea5c 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
2ea5c 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
2ea5c 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
2ea5c 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
2ea5c 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
2ea5c 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
2ea5c 12d             | frame           res     1         ' USB 1ms frame counter value
2ea5c 12d             | frame           res     1         ' USB 1ms frame counter value
2ea5c 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
2ea5c 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
2ea5c 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
2ea5c 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
2ea5c 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
2ea5c 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
2ea5c 12d             | crc             res     1         ' Used for CRC16 calculation
2ea5c 12d             | crc             res     1         ' Used for CRC16 calculation
2ea5c 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
2ea5c 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
2ea5c 12d             | retval          res     1         ' Global success/fail return parameter
2ea5c 12d             | retval          res     1         ' Global success/fail return parameter
2ea5c 12d             | context_retval  res     1         ' Operation contextual return parameter
2ea5c 12d             | context_retval  res     1         ' Operation contextual return parameter
2ea5c 12d             | ' Device stuff
2ea5c 12d             | hdev_id         res     1+MAX_DEVICES
2ea5c 12d             | hdev_id         res     1+MAX_DEVICES
2ea5c 12d             | hdev_bcd        res     1
2ea5c 12d             | hdev_bcd        res     1
2ea5c 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
2ea5c 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
2ea5c 12d             | ' Keyboard/mouse stuff
2ea5c 12d             | hctrl_ep_addr   res     1
2ea5c 12d             | hctrl_ep_addr   res     1
2ea5c 12d             | hctrl_max_pkt   res     1
2ea5c 12d             | hctrl_max_pkt   res     1
2ea5c 12d             | hconfig_base    res     1
2ea5c 12d             | hconfig_base    res     1
2ea5c 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
2ea5c 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
2ea5c 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
2ea5c 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
2ea5c 12d             | hdev_class      res     1
2ea5c 12d             | hdev_class      res     1
2ea5c 12d             | hdev_subclass   res     1
2ea5c 12d             | hdev_subclass   res     1
2ea5c 12d             | hdev_protocol   res     1
2ea5c 12d             | hdev_protocol   res     1
2ea5c 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
2ea5c 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
2ea5c 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
2ea5c 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
2ea5c 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
2ea5c 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
2ea5c 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
2ea5c 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
2ea5c 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
2ea5c 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
2ea5c 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
2ea5c 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
2ea5c 12d             | if HAVE_MOUSE
2ea5c 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
2ea5c 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
2ea5c 12d             | end
2ea5c 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
2ea5c 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
2ea5c 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
2ea5c 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
2ea5c 12d             | hdev_ep_addr    res     1+MAX_DEVICES
2ea5c 12d             | hdev_ep_addr    res     1+MAX_DEVICES
2ea5c 12d             | hdev_out_addr   res     1
2ea5c 12d             | hdev_out_addr   res     1
2ea5c 12d             | 
2ea5c 12d             | if EMUPAD_MAX_PLAYER > 0
2ea5c 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
2ea5c 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
2ea5c 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
2ea5c 12d             | end
2ea5c 12d             | 
2ea5c 12d             | hreg_init_end
2ea5c 12d             | 
2ea5c 12d             | hidr_start
2ea5c 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
2ea5c 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
2ea5c 12d             | hidr_flags      res     1
2ea5c 12d             | hidr_flags      res     1
2ea5c 12d             | hidr_axis       res     3
2ea5c 12d             | hidr_axis       res     3
2ea5c 12d             | hidr_buttons    res     1
2ea5c 12d             | hidr_buttons    res     1
2ea5c 12d             | hidr_hats       res     1
2ea5c 12d             | hidr_hats       res     1
2ea5c 12d             | '' Above are actually useful values, 6 longs
2ea5c 12d             | hidr_id         res     1
2ea5c 12d             | hidr_id         res     1
2ea5c 12d             | hidr_state      res     1
2ea5c 12d             | hidr_state      res     1
2ea5c 12d             | hidr_size       res     1
2ea5c 12d             | hidr_size       res     1
2ea5c 12d             | hidr_count      res     1
2ea5c 12d             | hidr_count      res     1
2ea5c 12d             | hidr_offset     res     1
2ea5c 12d             | hidr_offset     res     1
2ea5c 12d             | hidr_usage_idx  res     1
2ea5c 12d             | hidr_usage_idx  res     1
2ea5c 12d             | hidr_lminmax    res     1
2ea5c 12d             | hidr_lminmax    res     1
2ea5c 12d             | hidr_pminmax    res     1
2ea5c 12d             | hidr_pminmax    res     1
2ea5c 12d             | hidr_type       res     1
2ea5c 12d             | hidr_type       res     1
2ea5c 12d             | hidr_end
2ea5c 12d             | 
2ea5c 12d             | ' Variables dependent on the system freqency
2ea5c 12d             | _var_64_lower_  res     1
2ea5c 12d             | _var_64_lower_  res     1
2ea5c 12d             | _var_64_upper_  res     1
2ea5c 12d             | _var_64_upper_  res     1
2ea5c 12d             | _12Mbps_        res     1
2ea5c 12d             | _12Mbps_        res     1
2ea5c 12d             | _1_5Mbps_       res     1
2ea5c 12d             | _1_5Mbps_       res     1
2ea5c 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
2ea5c 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
2ea5c 12d             | _1us_           res     1         ' 1us
2ea5c 12d             | _1us_           res     1         ' 1us
2ea5c 12d             | _10us_          res     1         ' 10us
2ea5c 12d             | _10us_          res     1         ' 10us
2ea5c 12d             | _33us_          res     1         ' 33us
2ea5c 12d             | _33us_          res     1         ' 33us
2ea5c 12d             | _txn_err_       res     1         ' 250us
2ea5c 12d             | _txn_err_       res     1         ' 250us
2ea5c 12d             | _500us_         res     1         ' 500us
2ea5c 12d             | _500us_         res     1         ' 500us
2ea5c 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
2ea5c 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
2ea5c 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
2ea5c 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
2ea5c 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
2ea5c 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
2ea5c 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
2ea5c 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
2ea5c 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
2ea5c 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
2ea5c 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
2ea5c 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
2ea5c 12d             | _preamble_wait_ res     1
2ea5c 12d             | _preamble_wait_ res     1
2ea5c 12d             | _1ms_           res     1         ' 1ms
2ea5c 12d             | _1ms_           res     1         ' 1ms
2ea5c 12d             | _2ms_           res     1         ' 2ms
2ea5c 12d             | _2ms_           res     1         ' 2ms
2ea5c 12d             | _suspend_wait_  res     1         ' 3ms
2ea5c 12d             | _suspend_wait_  res     1         ' 3ms
2ea5c 12d             | _4ms_           res     1         ' 4ms
2ea5c 12d             | _4ms_           res     1         ' 4ms
2ea5c 12d             | _xfer_wait_     res     1         ' 5ms
2ea5c 12d             | _xfer_wait_     res     1         ' 5ms
2ea5c 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
2ea5c 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
2ea5c 12d             | _reset_hold_    res     1         ' 15ms
2ea5c 12d             | _reset_hold_    res     1         ' 15ms
2ea5c 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
2ea5c 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
2ea5c 12d             | _21ms_          res     1         ' 21ms
2ea5c 12d             | _21ms_          res     1         ' 21ms
2ea5c 12d             | _100ms_         res     1         ' 100ms
2ea5c 12d             | _100ms_         res     1         ' 100ms
2ea5c 12d             | _500ms_         res     1         ' 500ms
2ea5c 12d             | _500ms_         res     1         ' 500ms
2ea5c 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
2ea5c 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
2ea5c 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
2ea5c 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
2ea5c 12d             | '------------------------------------------------------------------------------
2ea5c 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
2ea5c 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
2ea5c 12d             | _usb_d_ls_nco_  res     1
2ea5c 12d             | _usb_d_ls_nco_  res     1
2ea5c 12d             | _usb_h_fs_nco_  res     1
2ea5c 12d             | _usb_h_fs_nco_  res     1
2ea5c 12d             | _usb_d_fs_nco_  res     1
2ea5c 12d             | _usb_d_fs_nco_  res     1
2ea5c 12d             | '------------------------------------------------------------------------------
2ea5c 12d             | ' Scratch registers
2ea5c 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
2ea5c 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
2ea5c 12d             | htmp1           res     1
2ea5c 12d             | htmp1           res     1
2ea5c 12d             | htmp2           res     1
2ea5c 12d             | htmp2           res     1
2ea5c 12d             | htmp3           res     1
2ea5c 12d             | htmp3           res     1
2ea5c 12d             | hrep            res     1         ' Repeat count
2ea5c 12d             | hrep            res     1         ' Repeat count
2ea5c 12d             | hsave0          res     1         ' Subroutine parameter saves
2ea5c 12d             | hsave0          res     1         ' Subroutine parameter saves
2ea5c 12d             | hsave1          res     1
2ea5c 12d             | hsave1          res     1
2ea5c 12d             | hsave2          res     1
2ea5c 12d             | hsave2          res     1
2ea5c 12d             | isrtmp1         res     1
2ea5c 12d             | isrtmp1         res     1
2ea5c 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
2ea5c 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
2ea5c 12d             | hr0             res     1         ' Multi-purpose registers
2ea5c 12d             | hr0             res     1         ' Multi-purpose registers
2ea5c 12d             | hr1             res     1
2ea5c 12d             | hr1             res     1
2ea5c 12d             | hr2             res     1
2ea5c 12d             | hr2             res     1
2ea5c 12d             | hr3             res     1
2ea5c 12d             | hr3             res     1
2ea5c 12d             | hpar1           res     1         ' Routine entry/exit parameters
2ea5c 12d             | hpar1           res     1         ' Routine entry/exit parameters
2ea5c 12d             | hpar2           res     1
2ea5c 12d             | hpar2           res     1
2ea5c 12d             | hpar3           res     1
2ea5c 12d             | hpar3           res     1
2ea5c 12d             | hct2            res     1         ' Function response bus turn-around timer
2ea5c 12d             | hct2            res     1         ' Function response bus turn-around timer
2ea5c 12d             | hct3            res     1         ' Keyboard/mouse poll timer
2ea5c 12d             | hct3            res     1         ' Keyboard/mouse poll timer
2ea5c 12d             | mod_cnt         res     1         ' Used in idle loops
2ea5c 12d             | mod_cnt         res     1         ' Used in idle loops
2ea5c 12d             |                 fit     $1F0
2ea5c 12d             |                 org     $200
2ea5c 200             | hlut_start
2ea5c 200             | 
2ea5c 200             | '------------------------------------------------------------------------------
2ea5c 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
2ea5c 200             | ' settings to startup defaults.
2ea5c 200             | '------------------------------------------------------------------------------
2ea5c 200             | ' On entry:
2ea5c 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
2ea5c 200             | '------------------------------------------------------------------------------
2ea5c 200             | set_speed_full
2ea5c 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
2ea60 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
2ea64 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
2ea68 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
2ea6c 204             | '                ret                             wcz     ' Restore caller flags on exit
2ea6c 204             | 
2ea6c 204             | '------------------------------------------------------------------------------
2ea6c 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
2ea6c 204             | ' is a downstream hub connected (not yet implemented), the baud generator
2ea6c 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
2ea6c 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
2ea6c 204             | ' putting the smart pins into reset.
2ea6c 204             | '------------------------------------------------------------------------------
2ea6c 204             | ' On entry:
2ea6c 204             | ' On exit: CZ flags restored to caller states
2ea6c 204             | '------------------------------------------------------------------------------
2ea6c 204             | set_speed_low
2ea6c 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
2ea70 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
2ea74 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
2ea78 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
2ea7c 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
2ea80 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
2ea84 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
2ea88 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
2ea8c 20c             | 
2ea8c 20c             | '------------------------------------------------------------------------------
2ea8c 20c             | ' Perform configuration stuff required when a device intitially connects.
2ea8c 20c             | '------------------------------------------------------------------------------
2ea8c 20c             | ' On entry:
2ea8c 20c             | ' On exit:
2ea8c 20c             | '------------------------------------------------------------------------------
2ea8c 20c             | on_connect
2ea8c 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
2ea90 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
2ea94 20e             | .retry
2ea94 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2ea98 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
2ea9c 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
2eaa0 211 00 08 00 FF 
2eaa4 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
2eaa8 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
2eaac 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2eab0 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
2eab4 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
2eab8 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
2eabc 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2eac0 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
2eac4 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
2eac8 21b 4C 03 B0 FD |                 call    #poll_waitx
2eacc 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
2ead0 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
2ead4 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
2ead8 21f B8 FF 9F FD |                 jmp     #.retry
2eadc 220             | .get_dev_desc
2eadc 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
2eae0 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
2eae4 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
2eae8 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
2eaec 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
2eaf0 225 88 FB BF FD |                 call    #reset
2eaf4 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
2eaf8 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2eafc 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
2eb00 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
2eb04 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2eb08 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
2eb0c 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
2eb10 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
2eb14 22e 04 00 00 FF 
2eb18 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
2eb1c 230 34 FA BF FD |                 call    #calc_crc5
2eb20 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
2eb24 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2eb28 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
2eb2c 234 F7 AD C2 FA |                 rdbyte  total_data, pb
2eb30 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
2eb34 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
2eb38 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2eb3c 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
2eb40 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
2eb44 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
2eb48 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
2eb4c 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
2eb50 23d C4 02 B0 FD |                 call    #poll_waitx
2eb54 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
2eb58 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2eb5c 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
2eb60 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
2eb64 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
2eb68 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2eb6c 244 2D 00 64 5D |         if_nz   ret
2eb70 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
2eb74 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
2eb78 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
2eb7c 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
2eb80 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
2eb84 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
2eb88 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
2eb8c 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
2eb90 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
2eb94 24e 2C FB 9F CD |         if_b    jmp     #host_error
2eb98 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
2eb9c 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
2eba0 251 2D EC 63 FD |                 call    pa
2eba4 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
2eba8 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
2ebac 254 2C EC 63 FD |                 jmp     pa
2ebb0 255             | 
2ebb0 255             | '------------------------------------------------------------------------------
2ebb0 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
2ebb0 255             | ' Status reporting is always in the function-to-host direction.
2ebb0 255             | '------------------------------------------------------------------------------
2ebb0 255             | ' On entry:
2ebb0 255             | '   PTRA - start address of the SETUP data in hub.
2ebb0 255             | '   PB - start address of the buffer/struct to be written to during the IN data
2ebb0 255             | '     stage.
2ebb0 255             | '   ep_addr_pid - device address, endpoint and CRC5.
2ebb0 255             | ' On exit:
2ebb0 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
2ebb0 255             | '     contains the count of data stage bytes actually received, which must
2ebb0 255             | '     always be <= the count requested.
2ebb0 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
2ebb0 255             | '     more specific USB operation error code.
2ebb0 255             | '------------------------------------------------------------------------------
2ebb0 255             | control_read
2ebb0 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
2ebb4 256 F8 8F 03 F6 |                 mov     hpar2, ptra
2ebb8 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
2ebbc 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
2ebc0 259             | .xfer_start
2ebc0 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
2ebc4 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
2ebc8 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2ebcc 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
2ebd0 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
2ebd4 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
2ebd8 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
2ebdc 260 61 00 00 FF 
2ebe0 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
2ebe4 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
2ebe8 263             | .data
2ebe8 263 56 B1 02 F6 |                 mov     pkt_data, total_data
2ebec 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
2ebf0 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
2ebf4 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
2ebf8 267             | .nak_retry
2ebf8 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
2ebfc 268             | .in_retry
2ebfc 268 BC F6 BF FD |                 call    #txn_in
2ec00 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
2ec04 26a 28 00 90 AD |         if_z    jmp     #.commit
2ec08 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
2ec0c 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
2ec10 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
2ec14 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
2ec18 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
2ec1c 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
2ec20 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
2ec24 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2ec28 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
2ec2c 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
2ec30 275             | .commit
2ec30 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
2ec34 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
2ec38 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
2ec3c 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
2ec40 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
2ec44 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
2ec48 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
2ec4c 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
2ec50 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
2ec54 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
2ec58 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
2ec5c 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
2ec60 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
2ec64 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
2ec68 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
2ec6c 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
2ec70 285             | .pre_status
2ec70 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
2ec74 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
2ec78 287 00 B0 06 F6 |                 mov     pkt_data, #0
2ec7c 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
2ec80 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
2ec84 28a 61 00 00 FF 
2ec88 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
2ec8c 28c             | .out_retry
2ec8c 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
2ec90 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2ec94 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
2ec98 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
2ec9c 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
2eca0 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
2eca4 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
2eca8 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
2ecac 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2ecb0 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
2ecb4 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
2ecb8 297             | ' I've encountered transfer STALL, even though the data looks correct, and
2ecb8 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
2ecb8 297             | ' ControlRead() transfer gets things unstuck most of the time...
2ecb8 297             | .xfer_retry
2ecb8 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
2ecbc 298 58 01 B0 FD |                 call    #poll_waitx
2ecc0 299 8C F9 BF FD |                 call    #wait_txn_ok
2ecc4 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
2ecc8 29b C7 F1 03 F6 |                 mov     ptra, hpar2
2eccc 29c C8 EF 03 F6 |                 mov     pb, hpar3
2ecd0 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
2ecd4 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
2ecd8 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
2ecdc 2a0             | 
2ecdc 2a0             | '------------------------------------------------------------------------------
2ecdc 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
2ecdc 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
2ecdc 2a0             | ' the SETUP data struct is filled with the required values.
2ecdc 2a0             | '------------------------------------------------------------------------------
2ecdc 2a0             | ' On entry:
2ecdc 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
2ecdc 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
2ecdc 2a0             | '     stage.
2ecdc 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
2ecdc 2a0             | ' On exit:
2ecdc 2a0             | '   retval - used to convey the success/failure of each stage.
2ecdc 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
2ecdc 2a0             | '     more specific USB operation error code.
2ecdc 2a0             | '------------------------------------------------------------------------------
2ecdc 2a0             | control_write
2ecdc 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
2ece0 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
2ece4 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
2ece8 2a3             | 
2ece8 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
2ecec 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
2ecf0 2a5 F7 91 03 F6 |                 mov     hpar3, pb
2ecf4 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
2ecf8 2a7             | .xfer_start
2ecf8 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
2ecfc 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
2ed00 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
2ed04 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2ed08 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
2ed0c 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
2ed10 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
2ed14 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
2ed18 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
2ed1c 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
2ed20 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
2ed24 2b2             | .data
2ed24 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
2ed28 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
2ed2c 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
2ed30 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
2ed34 2b6             | .out_retry
2ed34 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
2ed38 2b7 88 F6 BF FD |                 call    #txn_out
2ed3c 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2ed40 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
2ed44 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
2ed48 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
2ed4c 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
2ed50 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
2ed54 2be             | .commit
2ed54 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
2ed58 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
2ed5c 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
2ed60 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
2ed64 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
2ed68 2c3             | pre_status_in
2ed68 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
2ed6c 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
2ed70 2c5             | .status_retry
2ed70 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
2ed74 2c6 44 F5 BF FD |                 call    #txn_in
2ed78 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
2ed7c 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
2ed80 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
2ed84 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
2ed88 2cb 2D 00 64 AD |         if_z    ret
2ed8c 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
2ed90 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2ed94 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
2ed98 2cf             | '               ret                                     ' Caller must handle transfer retirement
2ed98 2cf             | 
2ed98 2cf             | '------------------------------------------------------------------------------
2ed98 2cf             | ' Execute an IN interrupt transaction.
2ed98 2cf             | '------------------------------------------------------------------------------
2ed98 2cf             | ' On entry:
2ed98 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
2ed98 2cf             | '   hpar2 - Address of the IN data buffer
2ed98 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
2ed98 2cf             | ' On exit:
2ed98 2cf             | '   retval - the result of the operation.
2ed98 2cf             | '   hpar3 - the count of IN data bytes actually received.
2ed98 2cf             | '------------------------------------------------------------------------------
2ed98 2cf             | do_int_in
2ed98 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
2ed9c 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
2eda0 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
2eda4 2d2             | 
2eda4 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
2eda8 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
2edac 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
2edb0 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
2edb4 2d6             | .retry
2edb4 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
2edb8 2d7 00 F5 BF FD |                 call    #txn_in
2edbc 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
2edc0 2d9 1C 00 90 AD |         if_z    jmp     #.commit
2edc4 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
2edc8 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
2edcc 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
2edd0 2dd 54 00 B0 FD |                 call    #retry_wait
2edd4 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2edd8 2df 18 00 90 AD |         if_z    jmp     #.post_ret
2eddc 2e0 D4 FF 9F FD |                 jmp     #.retry
2ede0 2e1             | .commit
2ede0 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
2ede4 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
2ede8 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
2edec 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
2edf0 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
2edf4 2e6             | .post_ret
2edf4 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
2edf8 2e7             | 
2edf8 2e7             | 
2edf8 2e7             | '------------------------------------------------------------------------------
2edf8 2e7             | ' Resets the downstream hub port to FS
2edf8 2e7             | '------------------------------------------------------------------------------
2edf8 2e7             | dwnstream_reset
2edf8 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
2edfc 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
2ee00 2e9             | 
2ee00 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
2ee04 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
2ee08 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
2ee0c 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
2ee10 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
2ee14 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
2ee18 2ef             | 
2ee18 2ef             | '------------------------------------------------------------------------------
2ee18 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
2ee18 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
2ee18 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
2ee18 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
2ee18 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
2ee18 2ef             | '------------------------------------------------------------------------------
2ee18 2ef             | ' On entry:
2ee18 2ef             | '   hctwait - wait interval in sysclocks.
2ee18 2ef             | ' On exit:
2ee18 2ef             | '------------------------------------------------------------------------------
2ee18 2ef             | poll_waitx
2ee18 2ef 1A 92 63 FD |                 getct   hct2
2ee1c 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
2ee20 2f1             | .wait
2ee20 2f1 FF 25 CC FB |                 jnct2   #.wait
2ee24 2f2 2D 00 64 FD |                 ret
2ee28 2f3             | 
2ee28 2f3             | '------------------------------------------------------------------------------
2ee28 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
2ee28 2f3             | '------------------------------------------------------------------------------
2ee28 2f3             | ' On entry:
2ee28 2f3             | '   retval - transaction response PID or error code.
2ee28 2f3             | ' On exit:
2ee28 2f3             | '------------------------------------------------------------------------------
2ee28 2f3             | retry_wait
2ee28 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
2ee2c 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
2ee30 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
2ee34 2f6 14 00 90 AD |         if_z    jmp     #.nak
2ee38 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
2ee3c 2f8 D8 FF BF FD |                 call    #poll_waitx
2ee40 2f9             | .dec
2ee40 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
2ee44 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
2ee48 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
2ee4c 2fc             | .nak
2ee4c 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
2ee50 2fd C4 FF BF FD |                 call    #poll_waitx
2ee54 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
2ee58 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
2ee5c 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
2ee60 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
2ee64 302 2D 00 64 FD |                 ret
2ee68 303             | 
2ee68 303             | host_reset
2ee68 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
2ee6c 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
2ee70 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
2ee70 305 BD 01 05 FF 
2ee74 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
2ee78 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
2ee7c 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
2ee80 309             | ' Check to see if the system clock has been changed.
2ee80 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
2ee84 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
2ee88 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
2ee8c 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
2ee90 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
2ee94 30e 40 46 62 FD |                 dirl    dp
2ee98 30f             | 
2ee98 30f 28 02 64 FD |                 setq    #1
2ee9c 310 80 00 80 FF 
2eea0 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
2eea4 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
2eea8 313             | .enable
2eea8 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
2eeac 314 41 46 62 FD |                 dirh    dp
2eeb0 315 1F 36 63 FD |                 waitx   _1us_
2eeb4 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2eeb8 317             | 
2eeb8 317             |                 ' Handle Port protection enable and startup delay
2eeb8 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
2eebc 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
2eec0 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
2eec4 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
2eec8 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
2eecc 31c             | 
2eecc 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
2eed0 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
2eed4 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
2eed8 31f 00 00 04 F6 |                 mov     0-0, #0
2eedc 320             | .regloop
2eedc 320             | 
2eedc 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
2eedc 320             | 
2eedc 320             | discon_entry
2eedc 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
2eee0 321             | 
2eee0 321             |               
2eee0 321             |         if HAVE_HIDPAD
2eee0 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
2eee4 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
2eee8 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
2eeec 324 F7 01 68 FC |                 wrlong  #0,pb
2eef0 325             |         end
2eef0 325             |         if EMUPAD_MAX_PLAYER > 0
2eef0 325             |         end
2eef0 325             | 
2eef0 325             |                 ' Fall through to disconnected loop
2eef0 325             | 
2eef0 325             | '-----------------------------------------------------------------------------------------------------------------
2eef0 325             | ' Device connect handling (Section 7.1.7.3).
2eef0 325             | '-----------------------------------------------------------------------------------------------------------------
2eef0 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
2eef0 325             | ' device to connect (Section 7.1.7.3).
2eef0 325             | '-----------------------------------------------------------------------------------------------------------------
2eef0 325             | disconnected
2eef0 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
2eef4 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
2eef8 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
2eefc 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
2ef00 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
2ef04 32a             |         if ACTIVITY_LED >= 0
2ef04 32a             |         end
2ef04 32a 22 A7 82 FA |                 rqpin   urx, dm
2ef08 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
2ef0c 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
2ef10 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
2ef14 32e             | .se1_test
2ef14 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
2ef18 32f FC FE BF FD |                 call    #poll_waitx
2ef1c 330 22 A7 82 FA |                 rqpin   urx, dm
2ef20 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
2ef24 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
2ef28 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
2ef2c 334             | .se1            'SE1 is a fatal error condition
2ef2c 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
2ef30 335 E4 FE BF FD |                 call    #poll_waitx
2ef34 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
2ef38 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
2ef3c 338             | .connect_test                                           ' Test lines until stable J/K state seen
2ef3c 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
2ef40 339 22 A7 82 FA |                 rqpin   urx, dm
2ef44 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
2ef48 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
2ef4c 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
2ef50 33d             | connected
2ef50 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
2ef54 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
2ef58 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
2ef5c 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
2ef60 341             | .set_pulse
2ef60 341 1A 64 63 FD |                 getct   _pulse_time_
2ef64 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
2ef68 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
2ef68 343             | ' of 1ms and make a correction, if necessary.
2ef68 343             | '                mov     htmp, _1ms_
2ef68 343             | '                subs    htmp, iframe_delta
2ef68 343             | '                adds    _frame1ms_clks_, htmp
2ef68 343             | '                debug(udec(_frame1ms_clks_))
2ef68 343             | 
2ef68 343             |                 ' Fall through to idle/processing loop
2ef68 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
2ef6c 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
2ef70 345             | 
2ef70 345             | hidle
2ef70 345 22 A7 82 FA |                 rqpin   urx, dm
2ef74 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
2ef78 347 98 00 90 CD |         if_c    jmp     #.se0_test
2ef7c 348 24 06 70 FD |                 pollct3                         wc
2ef80 349 68 00 90 3D |         if_nc   jmp     #.nopoll
2ef84 34a 1A 94 63 FD |                 getct   hct3
2ef88 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
2ef8c 34c             | 
2ef8c 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
2ef90 34d 00 70 E3 F8 |                 getbyte htmp
2ef94 34e             | 
2ef94 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
2ef98 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
2ef9c 350 40 00 90 AD |         if_z    jmp     #.poll
2efa0 351             | 
2efa0 351             |         if _HAVE_GAMEPAD
2efa0 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
2efa4 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
2efa8 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
2efac 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
2efb0 355 2C 00 90 AD |         if_z    jmp     #.poll
2efb4 356             |         end
2efb4 356             | 
2efb4 356             |         if HAVE_MOUSE
2efb4 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
2efb8 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
2efbc 358 20 00 90 AD |         if_z    jmp     #.poll
2efc0 359             |         end
2efc0 359             | 
2efc0 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
2efc4 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
2efc8 35b 14 00 90 AD |         if_z    jmp     #.poll
2efcc 35c             | 
2efcc 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
2efd0 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
2efd4 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
2efd8 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
2efdc 360             |         if HAVE_MOUSE
2efdc 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
2efe0 361             |         else
2efe0 361             |         end
2efe0 361             | 
2efe0 361             | .poll
2efe0 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
2efe4 362 2D EC 63 FD |                 call    pa
2efe8 363             | .skip_poll
2efe8 363             | 
2efe8 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
2efec 364             | 
2efec 364             | .nopoll
2efec 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
2eff0 365 44 00 90 AD |         if_z    jmp     #hsuspend
2eff4 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
2eff8 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
2effc 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
2f000 369 1A 84 63 FD |                 getct   hr0
2f004 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
2f008 36b             |         if ACTIVITY_LED >= 0
2f008 36b             |         end
2f008 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
2f00c 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
2f010 36d 5C FF 9F FD |                 jmp     #hidle
2f014 36e             | ' Check for extended SE0 state on the bus
2f014 36e             | .se0_test
2f014 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
2f018 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
2f01c 370 22 A7 82 FA |                 rqpin   urx, dm
2f020 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
2f024 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
2f028 373 24 F6 BF FD |                 call    #wait_txn_ok
2f02c 374 00 00 80 FF 
2f030 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
2f034 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
2f034 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
2f038 377             | 
2f038 377             | hsuspend
2f038 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
2f03c 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
2f040 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
2f044 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
2f048 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
2f04c 37c 00 96 07 F6 |                 mov     mod_cnt, #0
2f050 37d             | 
2f050 37d             |                 ' Fall through to resume wait loop
2f050 37d             | 
2f050 37d             | hwait_resume
2f050 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
2f054 37e 02 86 47 F0 |                 shr     hr1, #2
2f058 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
2f05c 380             |         if ACTIVITY_LED >= 0
2f05c 380             |         end
2f05c 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
2f060 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
2f064 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
2f068 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
2f06c 384 18 00 90 AD |         if_z    jmp     #.resume
2f070 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
2f074 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
2f078 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
2f07c 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2f080 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
2f084 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
2f088 38b             | .resume
2f088 38b 22 05 28 FC |                 wypin   #OUT_K, dm
2f08c 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
2f090 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
2f094 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
2f098 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
2f09c 390 1F 70 63 FD |                 waitx   htmp
2f0a0 391 22 07 28 FC |                 wypin   #OUT_J, dm
2f0a4 392 01 70 47 F0 |                 shr     htmp, #1
2f0a8 393 1F 70 63 FD |                 waitx   htmp
2f0ac 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2f0b0 395 1A 92 62 FD |                 getct   iframe_ct_base
2f0b4 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2f0b8 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2f0bc 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
2f0c0 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
2f0c4 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
2f0c8 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
2f0cc 39c             | 
2f0cc 39c             | '------------------------------------------------------------------------------
2f0cc 39c             | ' Send preamble to enable low-speed HUB ports
2f0cc 39c             | '------------------------------------------------------------------------------
2f0cc 39c             | ' On entry:
2f0cc 39c             | ' On exit:
2f0cc 39c             | '   USB baud rate set to low-speed
2f0cc 39c             | '------------------------------------------------------------------------------
2f0cc 39c             | utx_pre
2f0cc 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
2f0d0 39d 40 46 62 FD |                 dirl    dp
2f0d4 39e 28 02 64 FD |                 setq    #1
2f0d8 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
2f0dc 3a0 58 44 62 FD |                 drvl    dm
2f0e0 3a1 59 46 62 FD |                 drvh    dp
2f0e4 3a2             | 
2f0e4 3a2 1E 00 00 FF 
2f0e8 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
2f0ec 3a4             | 
2f0ec 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
2f0f0 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
2f0f4 3a6 28 02 64 3D |         if_nc   setq    #1
2f0f8 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
2f0fc 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
2f100 3a9             | .l1
2f100 3a9             | 
2f100 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
2f104 3aa 40 46 62 FD |                 dirl    dp
2f108 3ab 28 02 64 FD |                 setq    #1
2f10c 3ac 80 00 80 FF 
2f110 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
2f114 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
2f118 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
2f11c 3b0 41 46 62 FD |                 dirh    dp
2f120 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2f124 3b2             | 
2f124 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
2f128 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
2f12c 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
2f130 3b5             | 
2f130 3b5             | hlut_end
2f130 3b5             |                 fit     $400
2f130 3b5             |                 orgh
2f130                 | if OVERLAP_MEMORY
2f130                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
2f130                 | end
2f130                 | '------------------------------------------------------------------------------
2f130                 | ' Routines called from cog space.
2f130                 | '------------------------------------------------------------------------------
2f130                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
2f130                 | '------------------------------------------------------------------------------
2f130                 | 
2f130                 | '------------------------------------------------------------------------------
2f130                 | ' USB host cog initialization.
2f130                 | '------------------------------------------------------------------------------
2f130                 | usb_host_init
2f130                 |                 ' Initialize buffer pointers
2f130                 |         if OVERLAP_MEMORY
2f130                 |         else
2f130     40 15 B0 FE |                 loc     pb, #hid_descr
2f134                 |         end
2f134     F7 4B 02 F6 |                 mov     hid_descr_p, pb
2f138                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
2f138                 |                 {
2f138                 |                 }
2f138                 |         
2f138                 |                 {
2f138                 |                 }
2f138                 |                 'loc     pb,#hkbd_report
2f138                 |                 'mov     hkbd_report_p,pb
2f138                 | 
2f138     08 1D B0 FE |                 loc     pb, #hub_descr
2f13c     F7 4D 02 F6 |                 mov     hub_descr_p, pb
2f140     1D 1D B0 FE |                 loc     pb, #urx_buff
2f144     F7 4F 02 F6 |                 mov     urx_buff_p, pb
2f148     95 1D B0 FE |                 loc     pb, #dev_desc_buff
2f14c     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
2f150     9F 1D B0 FE |                 loc     pb, #con_desc_buff
2f154     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
2f158     18 15 B0 FE |                 loc     pb, #usb_cache_start
2f15c     F7 55 02 F6 |                 mov     cache_start_p, pb
2f160     E9 1C B0 FE |                 loc     pb, #usb_cache_end
2f164     F7 57 02 F6 |                 mov     cache_end_p, pb
2f168                 | 
2f168                 |         if ERROR_LED >= 0
2f168                 |         end
2f168                 | 
2f168                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
2f168                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
2f168                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
2f168                 | ' Configure and enable the Serial Host USB port.
2f168     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
2f16c                 | 
2f16c                 | '------------------------------------------------------------------------------
2f16c                 | ' Timing calculations happen before any interrupt(s) are enabled.
2f16c                 | '------------------------------------------------------------------------------
2f16c                 | ' On entry:
2f16c                 | '   htmp - current CLKFREQ value.
2f16c                 | '------------------------------------------------------------------------------
2f16c                 | hinit_usb_timings
2f16c                 | '                getct   htmp2
2f16c     B8 59 02 F6 |                 mov     save_sysclk, htmp
2f170     8D 5B 80 FF 
2f174     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
2f178     18 30 63 FD |                 getqx   _12Mbps_
2f17c     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
2f180     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
2f184     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
2f188     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
2f18c     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
2f190     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
2f194     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
2f198     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
2f19c     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
2f1a0     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
2f1a4     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
2f1a8     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
2f1ac     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
2f1b0     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
2f1b4     80 00 00 FF 
2f1b8     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
2f1bc     18 2C 63 FD |                 getqx   _var_64_lower_
2f1c0     19 2E 63 FD |                 getqy   _var_64_upper_
2f1c4     28 2C 63 FD |                 setq    _var_64_lower_
2f1c8     65 CD 1D FF 
2f1cc     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
2f1d0     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
2f1d4     01 00 00 FF 
2f1d8     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
2f1dc     18 2C 63 FD |                 getqx   _var_64_lower_
2f1e0     19 2E 63 FD |                 getqy   _var_64_upper_
2f1e4     28 2C 63 FD |                 setq    _var_64_lower_
2f1e8     A1 07 00 FF 
2f1ec     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
2f1f0     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
2f1f4     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
2f1f8     09 36 57 F0 |                 shr     _1us_, #9               wc
2f1fc     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
2f200     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
2f204     18 38 63 FD |                 getqx   _10us_
2f208     09 38 57 F0 |                 shr     _10us_, #9              wc
2f20c     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
2f210     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
2f214     18 3A 63 FD |                 getqx   _33us_
2f218     09 3A 57 F0 |                 shr     _33us_, #9              wc
2f21c     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
2f220     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
2f224     18 3C 63 FD |                 getqx   _txn_err_
2f228     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
2f22c     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
2f230     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
2f234     18 3E 63 FD |                 getqx   _500us_
2f238     09 3E 57 F0 |                 shr     _500us_, #9             wc
2f23c     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
2f240     01 00 00 FF 
2f244     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
2f248     18 40 63 FD |                 getqx   _txn_ok_ls_
2f24c     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
2f250     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
2f254     01 00 00 FF 
2f258     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
2f25c     18 42 63 FD |                 getqx   _txn_ok_fs_
2f260     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
2f264     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
2f268     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
2f26c     05 00 00 FF 
2f270     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
2f274     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
2f278     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
2f27c     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
2f280     1C 00 00 FF 
2f284     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
2f288     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
2f28c     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
2f290     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
2f294     00 00 00 FF 
2f298     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
2f29c     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
2f2a0     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
2f2a4     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
2f2a8     04 00 00 FF 
2f2ac     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
2f2b0     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
2f2b4     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
2f2b8     8D 5B 00 FF 
2f2bc     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
2f2c0     18 4C 63 FD |                 getqx   _preamble_wait_
2f2c4     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
2f2c8     01 00 00 FF 
2f2cc     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
2f2d0     18 2C 63 FD |                 getqx   _var_64_lower_
2f2d4     19 2E 63 FD |                 getqy   _var_64_upper_
2f2d8     28 2C 63 FD |                 setq    _var_64_lower_
2f2dc     01 00 00 FF 
2f2e0     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
2f2e4     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
2f2e8     09 4E 57 F0 |                 shr     _1ms_, #9               wc
2f2ec     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
2f2f0     FF FF 7F FF 
2f2f4     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
2f2f8     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
2f2fc     A7 51 03 F6 |                 mov     _2ms_, _1ms_
2f300     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
2f304     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
2f308     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
2f30c     A7 55 03 F6 |                 mov     _4ms_, _1ms_
2f310     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
2f314     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
2f318     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
2f31c     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
2f320     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
2f324     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
2f328     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
2f32c     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
2f330     A7 59 03 F6 |                 mov     _8ms_, _1ms_
2f334     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
2f338     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
2f33c     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
2f340     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
2f344     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
2f348     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
2f34c     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
2f350     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
2f354     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
2f358     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
2f35c     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
2f360                 | '        _ret_   mov     _1sec_, save_sysclk
2f360                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
2f360                 | '                ret
2f360                 | {
2f360                 | }
2f360                 | 
2f360                 | '------------------------------------------------------------------------------
2f360                 | ' Parse a configuration descriptor chain to see if the device is a recognized
2f360                 | ' one. If it is, start the task progression that will configure the device for
2f360                 | ' use.
2f360                 | '------------------------------------------------------------------------------
2f360                 | ' On entry:
2f360                 | '   hconfig_base - start address of the cached config descriptor chain.
2f360                 | ' On exit:
2f360                 | '------------------------------------------------------------------------------
2f360                 | hparse_con_desc
2f360     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
2f364     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
2f368     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
2f36c     4E 70 FF F9 |                 movbyts htmp,#%%1032
2f370     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
2f374                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
2f374                 | 
2f374     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
2f378     6E ED 03 F1 |                 add     pa, hconfig_base
2f37c     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
2f380                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
2f380                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
2f380                 | ' that defines a keyboard and/or mouse.
2f380     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
2f384                 | .next_intf
2f384     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
2f388     BC 01 90 3D |         if_ae   jmp     #hset_config
2f38c     6E F3 03 F6 |                 mov     ptrb, hconfig_base
2f390     75 F3 03 F1 |                 add     ptrb, hnext_desc
2f394     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
2f398     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
2f39c     0C 00 90 AD |         if_z    jmp     #.intf
2f3a0     80 71 C7 FA |                 rdbyte  htmp, ptrb
2f3a4     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
2f3a8     D8 FF 9F FD |                 jmp     #.next_intf
2f3ac                 | .intf
2f3ac     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
2f3b0     00 90 07 F6 |                 mov     hpar3, #0
2f3b4     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
2f3b8     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
2f3bc     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
2f3c0     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
2f3c4                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
2f3c4                 | 
2f3c4                 | .endp
2f3c4     80 71 C7 FA |                 rdbyte  htmp, ptrb
2f3c8     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
2f3cc     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
2f3d0     78 00 90 3D |         if_ae   jmp     #.get_device
2f3d4     6E F3 03 F6 |                 mov     ptrb, hconfig_base
2f3d8     75 F3 03 F1 |                 add     ptrb, hnext_desc
2f3dc     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
2f3e0     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
2f3e4     64 00 90 AD |         if_z    jmp     #.get_device
2f3e8     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
2f3ec     04 00 90 AD |         if_z    jmp     #.get_ep
2f3f0     D0 FF 9F FD |                 jmp     #.endp
2f3f4                 | .get_ep
2f3f4     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
2f3f8     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
2f3fc     0F 86 67 F0 |                 shl     hr1, #8 + 7
2f400     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
2f404     3F 00 00 FF 
2f408     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
2f40c     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
2f410     00 8E 0F F2 |                 cmp     hpar2, #0               wz
2f414     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
2f418     00 90 0F F2 |                 cmp     hpar3, #0               wz
2f41c     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
2f420     A0 FF 9F FD |                 jmp     #.endp
2f424                 | .in_ep
2f424     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
2f428     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
2f42c                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
2f42c     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
2f430     C2 89 DB F8 |                 setbyte hr2, hr0, #3
2f434     8C FF 9F FD |                 jmp     #.endp
2f438                 | .out_ep
2f438     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
2f43c     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
2f440                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
2f440     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
2f444     C2 8B DB F8 |                 setbyte hr3, hr0, #3
2f448     78 FF 9F FD |                 jmp     #.endp
2f44c                 | 
2f44c                 | .get_device
2f44c     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
2f450     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
2f454     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
2f458     68 00 90 AD |         if_z    jmp     #.gamepad
2f45c     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
2f460     AC 00 90 AD |         if_z    jmp     #.hub
2f464     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
2f468     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
2f46c     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
2f470     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
2f474     4C 00 90 AD |         if_z    jmp     #.gamepad
2f478     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
2f47c     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
2f480                 | .keyboard
2f480     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
2f484                 |         if HAVE_MOUSE
2f484     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
2f488                 |         else
2f488                 |         end
2f488     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
2f48c     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
2f490     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2f494     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
2f498     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
2f49c     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
2f4a0                 |                 'debug(udec(kb_intf_num))
2f4a0                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
2f4a0     E0 FE 9F FD |                 jmp     #.next_intf
2f4a4                 | if HAVE_MOUSE
2f4a4                 | .mouse
2f4a4     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
2f4a8     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
2f4ac     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
2f4b0     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
2f4b4     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2f4b8                 |                 'getbyte ms_interval, hr2, #3
2f4b8     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
2f4bc     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
2f4c0                 |                 'debug(udec(kb_intf_num))
2f4c0                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
2f4c0     C0 FE 9F FD |                 jmp     #.next_intf
2f4c4                 | end
2f4c4                 | .gamepad
2f4c4     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
2f4c8     C7 71 63 F5 |                 xor     htmp, hpar2
2f4cc     3F 00 00 FF 
2f4d0     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2f4d4     AC FE 9F AD |         if_z    jmp     #.next_intf
2f4d8                 |         if HAVE_MOUSE
2f4d8     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
2f4dc     C7 71 63 F5 |                 xor     htmp, hpar2
2f4e0     3F 00 00 FF 
2f4e4     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2f4e8     98 FE 9F AD |         if_z    jmp     #.next_intf
2f4ec                 |         end
2f4ec     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
2f4f0     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
2f4f4     8C FE 9F 5D |         if_nz   jmp     #.next_intf
2f4f8                 | 
2f4f8     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2f4fc     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
2f500     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2f504     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
2f508     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
2f50c                 |                 'debug(udec(gp_intf_num))
2f50c                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
2f50c     74 FE 9F FD |                 jmp     #.next_intf
2f510                 | .hub
2f510     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
2f514     6C FE 9F 5D |         if_nz   jmp     #.next_intf
2f518     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
2f51c     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
2f520     60 FE 9F 5D |         if_nz   jmp     #.next_intf
2f524     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
2f528     58 FE 9F 5D |         if_nz   jmp     #.next_intf
2f52c     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
2f530     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
2f534     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
2f538     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2f53c     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
2f540     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
2f544                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
2f544     3C FE 9F FD |                 jmp     #.next_intf
2f548                 | 
2f548                 | '------------------------------------------------------------------------------
2f548                 | ' If a newly-connected device is recognized, do whatever is needed to configure
2f548                 | ' it according to its function, or functions. In the case of this boot protocol
2f548                 | ' keyboard/mouse class driver:
2f548                 | ' - SetConfiguration(config_num)
2f548                 | ' - SetProtocol(boot)
2f548                 | ' - SetIdle(indefinite)
2f548                 | ' - Enter the device interrupt IN polling task stage.
2f548                 | '------------------------------------------------------------------------------
2f548                 | ' On entry:
2f548                 | ' On exit:
2f548                 | '------------------------------------------------------------------------------
2f548                 | hset_config
2f548                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
2f548                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
2f548     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
2f54c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2f550     00 00 0C F2 |                 cmp     0-0, #0                 wz
2f554     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
2f558                 |         if HAVE_MOUSE
2f558     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
2f55c                 |         end
2f55c     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
2f560     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
2f564                 | .set_config
2f564     6C 0E D0 FE |                 loc     ptra, #set_config
2f568     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
2f56c     6E ED 03 F1 |                 add     pa, hconfig_base
2f570     F6 8D C3 FA |                 rdbyte  hpar1, pa
2f574     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
2f578     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
2f57c     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
2f580     A0 02 A0 FD |                 call    #control_write
2f584     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f588     2D 00 64 5D |         if_nz   ret
2f58c                 | .kbd_config
2f58c     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
2f590     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
2f594                 | 
2f594     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
2f598     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2f59c     3F 00 00 FF 
2f5a0     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2f5a4     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
2f5a8                 | 
2f5a8     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
2f5ac     34 0E D0 FE |                 loc     ptra, #set_protocol
2f5b0     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
2f5b4     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2f5b8     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
2f5bc     A0 02 A0 FD |                 call    #control_write
2f5c0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f5c4     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
2f5c8     E4 02 90 5D |         if_nz   jmp     #.notify_client
2f5cc     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
2f5d0     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
2f5d4     30 03 B0 FD |                 call    #hset_idle
2f5d8                 |                 'cmp     retval, #PID_ACK        wz
2f5d8                 |         'if_nz   mov     hkbd_ep_addr, #0
2f5d8                 |         'if_nz   jmp     #.notify_client
2f5d8     A8 99 02 F6 |                 mov     hctwait, _2ms_
2f5dc     EF 02 A0 FD |                 call    #poll_waitx
2f5e0     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
2f5e4     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
2f5e8     90 17 90 FE |                 loc     pa, #hkbd_led_rep
2f5ec     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
2f5f0     2C 03 B0 FD |                 call    #hset_kbdled_report
2f5f4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f5f8     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
2f5fc     B0 02 90 5D |         if_nz   jmp     #.notify_client
2f600     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
2f604     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2f608     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2f60c     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2f610     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
2f614     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
2f618     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
2f61c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2f620     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
2f624     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
2f628     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
2f62c                 |         if !!HAVE_MOUSE
2f62c                 |         end
2f62c                 | 
2f62c                 | .mouse_config
2f62c                 | if HAVE_MOUSE
2f62c     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
2f630     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
2f634     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
2f638     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2f63c     3F 00 00 FF 
2f640     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2f644     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
2f648                 | 
2f648                 |                 debug("mouse passed addr check")
2f648                 | 
2f648     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
2f64c     00 00 80 FF 
2f650     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
2f654     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
2f658     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2f65c     55 02 A0 FD |                 call    #control_read
2f660     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f664     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
2f668     44 02 90 5D |         if_nz   jmp     #.notify_client
2f66c     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
2f670     56 01 00 F6 |                 mov     0-0, total_data
2f674     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2f678                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
2f678                 | 
2f678     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
2f67c     64 0D D0 FE |                 loc     ptra, #set_protocol
2f680     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
2f684     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2f688     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
2f68c     A0 02 A0 FD |                 call    #control_write
2f690     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f694     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
2f698     14 02 90 5D |         if_nz   jmp     #.notify_client
2f69c                 |                 debug("mouse passed SetProtocol")
2f69c     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
2f6a0     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
2f6a4     60 02 B0 FD |                 call    #hset_idle
2f6a8                 |                 'cmp     retval, #PID_ACK        wz
2f6a8                 |         'if_nz   mov     hmouse_ep_addr, #0
2f6a8                 |         'if_nz   jmp     #.notify_client
2f6a8                 |                 debug("mouse passed SetIdle")
2f6a8     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
2f6ac     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2f6b0     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2f6b4     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2f6b8     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
2f6bc     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2f6c0     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
2f6c4     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
2f6c8     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
2f6cc     3F 00 00 FF 
2f6d0     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
2f6d4     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
2f6d8     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
2f6dc     D0 01 90 FD |                 jmp     #.notify_client
2f6e0                 | end
2f6e0                 | .gamepad_config
2f6e0                 | if _HAVE_GAMEPAD
2f6e0     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2f6e4     00 00 0C F2 |                 cmp     0-0, #0                 wz
2f6e8     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
2f6ec     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2f6f0     00 70 03 F6 |                 mov     htmp, 0-0
2f6f4     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2f6f8     3F 00 00 FF 
2f6fc     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2f700     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
2f704                 | 
2f704     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2f708     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
2f70c     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2f710     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2f714     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2f718     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2f71c     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
2f720     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
2f724     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
2f728     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2f72c     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2f730     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
2f734     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
2f738     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2f73c                 | 
2f73c                 |                 if EMUPAD_MAX_PLAYER > 0
2f73c                 |                 
2f73c                 | .rule_loop           
2f73c                 |                 end
2f73c                 | 
2f73c     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
2f740     5C 00 90 AD |         if_e    jmp     #.xinput
2f744     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
2f748     00 70 03 F6 |                 mov     htmp,0-0
2f74c     01 A6 02 FF 
2f750     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
2f754     7C 00 90 AD |         if_e    jmp     #.ps3
2f758                 | 
2f758     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
2f75c     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
2f760     00 00 80 5F 
2f764     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
2f768     03 00 80 AF 
2f76c     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
2f770     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
2f774     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2f778     55 02 A0 FD |                 call    #control_read
2f77c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f780     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
2f784     00 00 04 56 |         if_nz   mov     0-0, #0
2f788     24 01 90 5D |         if_nz   jmp     #.notify_client
2f78c     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
2f790     56 01 00 F6 |                 mov     0-0, total_data
2f794     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2f798                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
2f798                 | 
2f798     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
2f79c     10 01 90 FD |                 jmp     #.notify_client
2f7a0                 | .xinput
2f7a0     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
2f7a4     2D EF 03 F6 |                 mov     pb,hdev_port
2f7a8     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
2f7ac     03 EE 27 F3 |                 fle     pb,#3
2f7b0     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
2f7b4     02 EF 47 FC |                 wrbyte  pb, ptra[2]
2f7b8                 | 
2f7b8     03 B0 06 F6 |                 mov     pkt_data, #3
2f7bc     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
2f7c0     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
2f7c4     5A 00 A0 FD |                 call    #txn_out
2f7c8     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
2f7cc                 | 
2f7cc     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
2f7d0     DC 00 90 FD |                 jmp     #.notify_client
2f7d4                 | .ps3
2f7d4     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
2f7d8     2D EF 03 F6 |                 mov     pb,hdev_port
2f7dc     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
2f7e0     04 EE 27 F3 |                 fle     pb,#4
2f7e4     F7 EF C3 F9 |                 decod   pb
2f7e8     09 EF 47 FC |                 wrbyte  pb, ptra[9]
2f7ec                 | 
2f7ec     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
2f7f0     00 0C D0 FE |                 loc     ptra, #set_report
2f7f4     01 00 80 FF 
2f7f8     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
2f7fc     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2f800     03 61 5C FC |                 wrword  #48, ptra[wLength]
2f804     20 0C B0 FE |                 loc     pb, #ps3_command_buff
2f808     A0 02 A0 FD |                 call    #control_write
2f80c                 | 
2f80c     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
2f810     E0 0B D0 FE |                 loc     ptra, #set_report
2f814     01 00 80 FF 
2f818     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
2f81c     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2f820     03 09 5C FC |                 wrword  #4, ptra[wLength]
2f824     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
2f828     A0 02 A0 FD |                 call    #control_write
2f82c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
2f830     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
2f834     00 00 04 56 |         if_nz   mov     0-0, #0
2f838     74 00 90 5D |         if_nz   jmp     #.notify_client
2f83c                 | 
2f83c     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
2f840     6C 00 90 FD |                 jmp     #.notify_client
2f844                 | end
2f844                 | 
2f844                 | .hub_config
2f844     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
2f848     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
2f84c     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
2f850     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2f854     3F 00 00 FF 
2f858     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2f85c     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
2f860                 | 
2f860     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
2f864     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
2f868     26 EF 03 F6 |                 mov     pb, hub_descr_p
2f86c     55 02 A0 FD |                 call    #control_read
2f870     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f874     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
2f878     34 00 90 5D |         if_nz   jmp     #.notify_client
2f87c                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
2f87c                 | 
2f87c     26 F1 03 F6 |                 mov     ptra, hub_descr_p
2f880     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
2f884     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
2f888                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
2f888                 | .pwr_loop
2f888     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
2f88c     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
2f890     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
2f894     A0 02 A0 FD |                 call    #control_write
2f898     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
2f89c                 | 
2f89c     B1 99 02 F6 |                 mov     hctwait, _500ms_
2f8a0     B0 99 02 F1 |                 add     hctwait, _100ms_
2f8a4     EF 02 A0 FD |                 call    #poll_waitx
2f8a8                 | 
2f8a8     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
2f8ac     00 00 90 FD |                 jmp     #.notify_client
2f8b0                 | 
2f8b0                 | .notify_client
2f8b0     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
2f8b4     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
2f8b8                 |                 debug(uhex_long(hdev_type,hdev_type+1))
2f8b8                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
2f8b8     2D 00 64 FD |                 ret
2f8bc                 | 
2f8bc                 | '------------------------------------------------------------------------------
2f8bc                 | ' Initialize the keyboard/mouse data area to start-up values.
2f8bc                 | '------------------------------------------------------------------------------
2f8bc                 | ' On entry:
2f8bc                 | ' On exit:
2f8bc                 | '------------------------------------------------------------------------------
2f8bc                 | init_kbdm_data
2f8bc     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
2f8c0     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
2f8c4                 | 
2f8c4     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
2f8c8     2B ED 03 F6 |                 mov     pa, cache_end_p
2f8cc                 | .loop
2f8cc     61 01 4C FC |                 wrbyte  #0, ptra++
2f8d0     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
2f8d4     F4 FF 9F CD |         if_b    jmp     #.loop
2f8d8                 |         
2f8d8                 |         if EMUPAD_MAX_PLAYER > 0
2f8d8                 |         end
2f8d8                 | 
2f8d8                 | 
2f8d8     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
2f8dc                 | .regloop
2f8dc     00 EC 8F F9 |                 altd    pa
2f8e0     00 00 04 F6 |                 mov     0-0, #0
2f8e4     01 EC 07 F1 |                 add     pa, #1
2f8e8     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
2f8ec     EC FF 9F 5D |         if_nz   jmp     #.regloop
2f8f0                 | 
2f8f0     E1 E1 61 FF 
2f8f4     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
2f8f8     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
2f8fc     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
2f900     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
2f904                 | 
2f904     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
2f908                 | 
2f908                 | '------------------------------------------------------------------------------
2f908                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
2f908                 | ' function.
2f908                 | '------------------------------------------------------------------------------
2f908                 | ' On entry:
2f908                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
2f908                 | '   hpar2 - index number of the target interface.
2f908                 | ' On exit:
2f908                 | '------------------------------------------------------------------------------
2f908                 | hset_idle
2f908     A8 99 02 F6 |                 mov     hctwait, _2ms_
2f90c     EF 02 A0 FD |                 call    #poll_waitx
2f910     D8 0A D0 FE |                 loc     ptra, #set_idle
2f914     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
2f918     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
2f91c     A0 02 80 FD |                 jmp     #control_write
2f920                 | 
2f920                 | '------------------------------------------------------------------------------
2f920                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
2f920                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
2f920                 | '------------------------------------------------------------------------------
2f920                 | ' On entry:
2f920                 | '   ep_addr_pid - device address and enpoint for the request.
2f920                 | ' On exit:
2f920                 | '   retval - transaction result.
2f920                 | '------------------------------------------------------------------------------
2f920                 | hset_kbdled_report
2f920     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
2f924     CC 0A D0 FE |                 loc     ptra, #set_report
2f928     01 00 80 FF 
2f92c     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
2f930     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2f934     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
2f938     27 EF 03 F6 |                 mov     pb, urx_buff_p
2f93c     F7 77 42 FC |                 wrbyte  kb_led_states, pb
2f940     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
2f944                 | 
2f944                 | '------------------------------------------------------------------------------
2f944                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
2f944                 | '------------------------------------------------------------------------------
2f944                 | ' On entry:
2f944                 | ' On exit:
2f944                 | '------------------------------------------------------------------------------
2f944                 | hget_kbd_in_report
2f944     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
2f948     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2f94c     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
2f950     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
2f954     CF 02 A0 FD |                 call    #do_int_in
2f958     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f95c     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2f960                 | 
2f960     00 90 0F F2 |                 cmp     hpar3, #0               wz
2f964     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2f968                 | 
2f968     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
2f96c     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2f970     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
2f974     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
2f978                 | 
2f978     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
2f97c     18 00 B0 FD |                 call    #hkbd_compare
2f980                 |         if EMUPAD_MAX_PLAYER > 0
2f980                 |         end
2f980                 | 
2f980                 | .led_check
2f980     3B 71 03 F6 |                 mov     htmp, kb_led_states
2f984     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
2f988     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
2f98c     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
2f990     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
2f994     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
2f998                 | 
2f998                 | '------------------------------------------------------------------------------
2f998                 | ' Compare current and previous keyboard data buffers for keypress changes.
2f998                 | '------------------------------------------------------------------------------
2f998                 | hkbd_compare
2f998     27 F1 03 F6 |                 mov     ptra, urx_buff_p
2f99c     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
2f9a0     61 73 07 FB |                 rdlong  htmp1, ptra++
2f9a4     E1 75 07 FB |                 rdlong  htmp2, ptrb++
2f9a8     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
2f9ac     61 73 07 FB |                 rdlong  htmp1, ptra++
2f9b0     E1 75 07 FB |                 rdlong  htmp2, ptrb++
2f9b4     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
2f9b8     2D 00 64 AD |         if_z    ret
2f9bc                 | 
2f9bc     B4 13 D0 FE |                 loc     ptra, #hkbd_report
2f9c0                 | 
2f9c0                 |                 ' Handle modifiers
2f9c0     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
2f9c4     00 87 C7 FA |                 rdbyte  hr1, ptra
2f9c8     C7 87 43 F9 |                 rolword hr1,hpar2,#0
2f9cc     63 86 63 FD |                 mergew  hr1
2f9d0     08 EC 07 F6 |                 mov     pa,#8
2f9d4                 | .modloop
2f9d4     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
2f9d8     E8 8C 07 F6 |                 mov     hpar1,#$E8
2f9dc     F6 8D 83 F1 |                 sub     hpar1,pa
2f9e0     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
2f9e4     FB ED 6F FB |                 djnz    pa,#.modloop
2f9e8                 | 
2f9e8     6F E0 75 FD | .release        modc    _set    wc
2f9ec                 |                 'alts    hdev_port, #hid_report_p
2f9ec                 |                 'mov     ptra, hid_report_p
2f9ec     02 F0 07 F1 |                 add     ptra, #2
2f9f0     06 EC 07 F6 |                 mov     pa, #6
2f9f4     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
2f9f8     20 00 90 AD |         if_z    jmp     #.rl3
2f9fc     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
2fa00     02 F2 07 F1 |                 add     ptrb, #2
2fa04     06 EE 07 F6 |                 mov     pb, #6
2fa08     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
2fa0c     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
2fa10     08 00 90 AD |         if_z    jmp     #.rl3
2fa14     FC EF 6F FB |                 djnz    pb, #.rl2
2fa18     68 00 B0 FD |                 call    #hkbd_translate
2fa1c     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
2fa20                 | 
2fa20     00 90 07 F6 |                 mov     hpar3, #0
2fa24     1F 90 27 F4 |                 bith    hpar3, #31
2fa28                 | 
2fa28     6F 00 74 FD | .press          modc    _clr    wc
2fa2c     27 F1 03 F6 |                 mov     ptra, urx_buff_p
2fa30     02 F0 07 F1 |                 add     ptra, #2
2fa34     06 EC 07 F6 |                 mov     pa, #6
2fa38     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
2fa3c     20 00 90 AD |         if_z    jmp     #.pl3
2fa40     30 13 F0 FE |                 loc     ptrb, #hkbd_report
2fa44     02 F2 07 F1 |                 add     ptrb, #2
2fa48     06 EE 07 F6 |                 mov     pb, #6
2fa4c     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
2fa50     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
2fa54     08 00 90 AD |         if_z    jmp     #.pl3
2fa58     FC EF 6F FB |                 djnz    pb, #.pl2
2fa5c     24 00 B0 FD |                 call    #hkbd_translate
2fa60     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
2fa64                 | 
2fa64     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
2fa68     08 13 F0 FE |                 loc     ptrb, #hkbd_report
2fa6c     28 02 64 FD |                 setq #1
2fa70     61 73 07 FB |                 rdlong  htmp1, ptra++
2fa74     28 02 64 FD |                 setq #1
2fa78     E1 73 67 FC |                 wrlong  htmp1, ptrb++
2fa7c     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
2fa80                 | 
2fa80     2D 00 64 FD |                 ret
2fa84                 | 
2fa84                 | '------------------------------------------------------------------------------
2fa84                 | ' Translate keyboard scancode to ASCII
2fa84                 | '------------------------------------------------------------------------------
2fa84                 | ' On entry:
2fa84                 | '   hpar1 - scancode
2fa84                 | '   hpar2 - key modifiers state
2fa84                 | '       c - pressed (0) or released (1) flag
2fa84                 | ' On exit:
2fa84                 | '   hpar1 - bit     31 = 0 pressed, 1 released
2fa84                 | '               30..17 = unused
2fa84                 | '                   18 = scroll-lock state 
2fa84                 | '                   17 = caps-lock state
2fa84                 | '                   16 = num-lock state 
2fa84                 | '                15..8 = key modifiers state
2fa84                 | '                 7..0 = scancode
2fa84                 | '------------------------------------------------------------------------------
2fa84                 | hkbd_translate
2fa84     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
2fa88     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
2fa8c     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
2fa90     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
2fa94     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
2fa98     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
2fa9c                 | 
2fa9c                 |         if EMUPAD_MAX_PLAYER > 0
2fa9c                 | 
2fa9c                 |         if EMUPAD_BT0_BIT >= 0
2fa9c                 |         end
2fa9c                 |         if EMUPAD_BT1_BIT >= 0
2fa9c                 |         end
2fa9c                 |         if EMUPAD_BT2_BIT >= 0
2fa9c                 |         end
2fa9c                 |         if EMUPAD_BT3_BIT >= 0
2fa9c                 |         end
2fa9c                 |         if EMUPAD_BT4_BIT >= 0
2fa9c                 |         end
2fa9c                 |         if EMUPAD_BT5_BIT >= 0
2fa9c                 |         end
2fa9c                 |         if EMUPAD_BT6_BIT >= 0
2fa9c                 |         end
2fa9c                 |         if EMUPAD_BT7_BIT >= 0
2fa9c                 |         end
2fa9c                 |         if EMUPAD_BT8_BIT >= 0
2fa9c                 |         end
2fa9c                 |         if EMUPAD_BT9_BIT >= 0
2fa9c                 |         end
2fa9c                 | 
2fa9c                 |         end
2fa9c     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
2faa0     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
2faa4     1F 8C 47 F4 |                 bitc    hpar1, #31
2faa8                 |         if KEYQUEUE_SIZE > 0
2faa8     C4 09 B0 FE |                 loc pb,#keyq_head
2faac     F7 71 E3 FA |                 rdword htmp,pb
2fab0     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
2fab4     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
2fab8     B8 75 03 F6 |                 mov htmp2,htmp
2fabc     04 74 07 FA |                 mul htmp2,#4
2fac0     F7 75 03 F1 |                 add htmp2,pb
2fac4     02 74 07 F1 |                 add htmp2,#2
2fac8     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
2facc     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
2fad0     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
2fad4     F7 71 43 5C |         if_nz   wrbyte htmp,pb
2fad8                 |         end
2fad8     2D 00 7C FD |                 ret wcz
2fadc                 | 
2fadc                 | if HAVE_MOUSE
2fadc                 | '------------------------------------------------------------------------------
2fadc                 | ' Execute an IN interrupt transaction to poll for mouse activity.
2fadc                 | '------------------------------------------------------------------------------
2fadc                 | ' On entry:
2fadc                 | ' On exit:
2fadc                 | '------------------------------------------------------------------------------
2fadc                 | hget_mouse_in_report
2fadc     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
2fae0     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2fae4     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
2fae8     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
2faec     CF 02 A0 FD |                 call    #do_int_in
2faf0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2faf4     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2faf8                 | 
2faf8     00 90 0F F2 |                 cmp     hpar3, #0               wz
2fafc     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2fb00                 | 
2fb00     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
2fb04     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2fb08     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
2fb0c     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
2fb10                 | 
2fb10     27 F1 03 F6 |                 mov     ptra, urx_buff_p
2fb14     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
2fb18     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
2fb1c     01 90 87 31 |         if_ae   sub     hpar3, #1
2fb20                 | 
2fb20     40 09 90 FE |                 loc     pa, #mouse_limits
2fb24     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
2fb28                 | 
2fb28                 |                 ' load xacc,yacc,zacc
2fb28     28 04 64 FD |                 setq    #3-1
2fb2c     80 87 07 FB |                 rdlong  hr1,ptrb
2fb30                 |                 ' load limits and outptr
2fb30     28 04 64 FD |                 setq    #3-1
2fb34     F6 73 03 FB |                 rdlong  htmp1,pa
2fb38                 | 
2fb38     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
2fb3c     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
2fb40     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
2fb44     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
2fb48     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
2fb4c     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
2fb50     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
2fb54     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
2fb58                 |               
2fb58                 | 
2fb58     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
2fb5c     07 70 67 F7 |                 signx   htmp, #7
2fb60     B8 87 03 F1 |                 add     hr1,htmp
2fb64     00 72 0F F2 |                 cmp     htmp1,#0 wz
2fb68     B9 87 63 53 |         if_ne   fles    hr1,htmp1
2fb6c     00 86 47 53 |         if_ne   fges    hr1,#0
2fb70                 | 
2fb70     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
2fb74     07 70 67 F7 |                 signx   htmp, #7
2fb78     B8 89 03 F1 |                 add     hr2,htmp
2fb7c     00 74 0F F2 |                 cmp     htmp2,#0 wz
2fb80     BA 89 63 53 |         if_ne   fles    hr2,htmp2
2fb84     00 88 47 53 |         if_ne   fges    hr2,#0
2fb88                 |                 
2fb88                 | 
2fb88     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
2fb8c     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
2fb90     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
2fb94     B8 8B 03 A1 |         if_z    add     hr3,htmp
2fb98                 | 
2fb98     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
2fb9c     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
2fba0                 | 
2fba0                 |                 ' write back accumulators
2fba0     28 04 64 FD |                 setq    #3-1
2fba4     80 87 67 FC |                 wrlong  hr1,ptrb
2fba8                 |                 ' if outptr set, write X/Y words
2fba8     00 76 0F F2 |                 cmp htmp3,#0                    wz
2fbac     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
2fbb0     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
2fbb4     2D 00 64 FD |                 ret
2fbb8                 | end
2fbb8                 | 
2fbb8                 | '------------------------------------------------------------------------------
2fbb8                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
2fbb8                 | '------------------------------------------------------------------------------
2fbb8                 | ' On entry:
2fbb8                 | ' On exit:
2fbb8                 | '------------------------------------------------------------------------------
2fbb8                 | if _HAVE_GAMEPAD
2fbb8                 | hget_gp_in_report
2fbb8     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2fbbc     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
2fbc0                 | 
2fbc0     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2fbc4     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
2fbc8     00 90 E3 F8 |                 getbyte hpar3
2fbcc     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
2fbd0     CF 02 A0 FD |                 call    #do_int_in
2fbd4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2fbd8     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2fbdc                 | 
2fbdc     00 90 0F F2 |                 cmp     hpar3, #0               wz
2fbe0     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2fbe4                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
2fbe4                 | 
2fbe4     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
2fbe8     00 70 E3 F8 |                 getbyte htmp                            ' |
2fbec     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2fbf0     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
2fbf4     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
2fbf8     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
2fbfc     B8 01 C0 F8 |                 setbyte htmp                            ' |
2fc00                 | 
2fc00                 | ' Note: the following code compares the current and previous reports
2fc00                 | ' and process the data if there are changes to ease the debug output.
2fc00                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
2fc00                 | ' gpPreReport buffer.
2fc00                 | 
2fc00                 |                 ' ----- start of block to remove
2fc00                 |                 {
2fc00                 |                 }
2fc00                 |                 ' ----- end of block to remove
2fc00     F4 04 90 FE |                 loc pa,#hpad_translate
2fc04     2A EC 63 FD |                 push pa
2fc08                 | 
2fc08                 |                 ' FALL THROUGH !!!!
2fc08                 | 
2fc08                 | '------------------------------------------------------------------------------
2fc08                 | ' Decode controller report
2fc08                 | '------------------------------------------------------------------------------
2fc08                 | hid_decode
2fc08                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
2fc08     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
2fc0c     00 04 00 FF 
2fc10     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
2fc14                 | 
2fc14     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
2fc18                 | 
2fc18     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
2fc1c     00 2A E3 F8 |                 getbyte hidr_type
2fc20     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
2fc24     34 02 90 AD |         if_z    jmp     #hpad_xinput
2fc28     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
2fc2c     1C 03 90 AD |         if_z    jmp     #hpad_ps3
2fc30     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
2fc34     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
2fc38     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
2fc3c                 |                 
2fc3c                 | 
2fc3c                 | '------------------------------------------------------------------------------
2fc3c                 | ' Handle HID controller (or mouse now
2fc3c                 | ' On entry:
2fc3c                 | '   ptrb - controller report
2fc3c                 | '------------------------------------------------------------------------------
2fc3c                 | hpad_hid
2fc3c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2fc40     F7 F1 03 F6 |                 mov     ptra, pb
2fc44     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
2fc48     00 EC 03 F6 |                 mov     pa, 0-0
2fc4c                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
2fc4c     19 2A 3B FF 
2fc50     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
2fc54                 | 
2fc54                 | .next
2fc54     00 EC 5F F2 |                 cmps    pa, #0      wcz
2fc58     2D 00 7C ED |         if_be   ret     wcz
2fc5c                 | 
2fc5c     61 8D C7 FA |                 rdbyte  hpar1, ptra++
2fc60     01 EC 87 F1 |                 sub     pa, #1
2fc64     00 8E 07 F6 |                 mov     hpar2, #0
2fc68                 | 
2fc68     C6 71 03 F6 |                 mov     htmp, hpar1
2fc6c     03 70 07 F5 |                 and     htmp, #$03
2fc70     01 70 0F F2 |                 cmp     htmp, #1    wz
2fc74     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
2fc78     07 8E 67 A7 |         if_z    signx   hpar2,#7
2fc7c     01 EC 87 A1 |         if_z    sub     pa, #1
2fc80     02 70 0F F2 |                 cmp     htmp, #2    wz
2fc84     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
2fc88     0F 8E 67 A7 |         if_z    signx   hpar2,#15
2fc8c     02 EC 87 A1 |         if_z    sub     pa, #2
2fc90     03 70 0F F2 |                 cmp     htmp, #3    wz
2fc94     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
2fc98     04 EC 87 A1 |         if_z    sub     pa, #4
2fc9c                 | 
2fc9c     FC 8C 07 F5 |                 and     hpar1, #$FC
2fca0                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
2fca0                 | 
2fca0     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
2fca4     0C 01 90 AD |         if_z    jmp     #.report_id
2fca8     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
2fcac     24 01 90 AD |         if_z    jmp     #.usage_page
2fcb0     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
2fcb4     2C 01 90 AD |         if_z    jmp     #.usage
2fcb8     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
2fcbc     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
2fcc0     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
2fcc4     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
2fcc8     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
2fccc     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
2fcd0     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
2fcd4     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
2fcd8     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
2fcdc     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
2fce0     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
2fce4     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
2fce8     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
2fcec     64 FF 9F 5D |         if_nz   jmp     #.next
2fcf0                 | 
2fcf0     D8 1D A7 FB |                 tjf     hidr_state,#.next
2fcf4                 | 
2fcf4     03 8E 07 F5 |                 and     hpar2, #$03
2fcf8     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
2fcfc     18 00 90 5D |         if_nz   jmp     #.skip
2fd00                 | 
2fd00     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
2fd04     20 00 90 AD |         if_z    jmp     #.axes
2fd08     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
2fd0c     5C 00 90 AD |         if_z    jmp     #.hats
2fd10     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
2fd14     70 00 90 AD |         if_z    jmp     #.buttons
2fd18                 | .skip
2fd18     8F 71 03 F6 |                 mov     htmp, hidr_size
2fd1c     90 71 03 FA |                 mul     htmp, hidr_count
2fd20     B8 23 03 F1 |                 add     hidr_offset, htmp
2fd24     2C FF 9F FD |                 jmp     #.next
2fd28                 | .axes
2fd28                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
2fd28     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
2fd2c     90 87 03 F6 |                 mov     hr1, hidr_count
2fd30                 | .l1
2fd30     91 8D 03 F6 |                 mov     hpar1, hidr_offset
2fd34     8F 8F 03 F6 |                 mov     hpar2, hidr_size
2fd38     04 03 B0 FD |                 call    #hpad_getbits
2fd3c     64 03 B0 FD |                 call    #hpad_normalize
2fd40     06 84 1F F2 |                 cmp     hr0, #6         wcz
2fd44     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
2fd48     00 88 43 C8 |         if_b    getnib  hr2
2fd4c     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
2fd50     5F 01 20 C9 |         if_b    setword retval
2fd54     01 84 07 C1 |         if_b    add     hr0, #1
2fd58     8F 23 03 F1 |                 add     hidr_offset, hidr_size
2fd5c     F4 87 6F FB |                 djnz    hr1, #.l1
2fd60                 | 
2fd60     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
2fd64     01 1C 07 F6 |                 mov     hidr_state, #1
2fd68     E8 FE 9F FD |                 jmp     #.next
2fd6c                 | .hats
2fd6c                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
2fd6c     91 8D 03 F6 |                 mov     hpar1, hidr_offset
2fd70     8F 8F 03 F6 |                 mov     hpar2, hidr_size
2fd74     C8 02 B0 FD |                 call    #hpad_getbits
2fd78     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
2fd7c     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
2fd80     01 1C 07 F6 |                 mov     hidr_state, #1
2fd84     90 FF 9F FD |                 jmp     #.skip
2fd88                 | .buttons
2fd88                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
2fd88     91 8D 03 F6 |                 mov     hpar1, hidr_offset
2fd8c     8F 8F 03 F6 |                 mov     hpar2, hidr_size
2fd90     90 8F 03 FA |                 mul     hpar2, hidr_count
2fd94     A8 02 B0 FD |                 call    #hpad_getbits
2fd98     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
2fd9c     B8 BF 62 F0 |                 shl     retval, htmp
2fda0     5F 17 43 F5 |                 or      hidr_buttons, retval
2fda4     90 71 03 F1 |                 add     htmp, hidr_count
2fda8     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
2fdac     01 1C 07 F6 |                 mov     hidr_state, #1
2fdb0     64 FF 9F FD |                 jmp     #.skip
2fdb4                 | .report_id
2fdb4     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
2fdb8     2D 00 7C 5D |         if_nz   ret     wcz
2fdbc     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
2fdc0     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
2fdc4     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
2fdc8     01 1C 67 56 |         if_nz   neg     hidr_state,#1
2fdcc     01 F2 87 51 |         if_nz   sub     ptrb,#1
2fdd0     80 FE 9F FD |                 jmp     #.next
2fdd4                 | .usage_page
2fdd4     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
2fdd8     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
2fddc     04 1C 07 A6 |         if_z    mov     hidr_state, #4
2fde0     70 FE 9F FD |                 jmp     #.next
2fde4                 | .usage
2fde4     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
2fde8     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
2fdec     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
2fdf0     01 1C 07 A6 |         if_z    mov     hidr_state, #1
2fdf4     5C FE 9F AD |         if_z    jmp     #.next
2fdf8     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
2fdfc     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
2fe00     01 1C 07 A6 |         if_z    mov     hidr_state, #1
2fe04     4C FE 9F AD |         if_z    jmp     #.next
2fe08     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
2fe0c     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
2fe10     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
2fe14     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
2fe18     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
2fe1c     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
2fe20     10 00 90 AD |         if_z    jmp     #.usage_axis
2fe24     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
2fe28     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
2fe2c     03 1C 07 A6 |         if_z    mov     hidr_state, #3
2fe30     20 FE 9F FD |                 jmp     #.next
2fe34                 | .usage_axis
2fe34     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
2fe38     18 FE 9F CD |         if_b    jmp     #.next
2fe3c     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
2fe40     C7 01 00 F8 |                 setnib  hpar2
2fe44                 | 
2fe44     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
2fe48     C7 8F C3 F9 |                 decod   hpar2
2fe4c     C7 0F 43 F5 |                 or      hidr_flags, hpar2
2fe50                 | 
2fe50     01 24 07 F1 |                 add     hidr_usage_idx, #1
2fe54     02 1C 07 F6 |                 mov     hidr_state, #2
2fe58     F8 FD 9F FD |                 jmp     #.next
2fe5c                 | 
2fe5c                 | '------------------------------------------------------------------------------
2fe5c                 | ' Handle XInput controller
2fe5c                 | ' On entry:
2fe5c                 | '   ptrb - controller report
2fe5c                 | '------------------------------------------------------------------------------
2fe5c                 | '   Default implementation translates the report to a pseudo-defacto hid
2fe5c                 | '   standard and jumps to hpad_translate for actions.
2fe5c                 | '   Implementors may take specific actions for this kind of controller.
2fe5c                 | '------------------------------------------------------------------------------
2fe5c                 | hpad_xinput
2fe5c     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
2fe60     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
2fe64     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
2fe68     14 70 0F F2 |                 cmp     htmp, #$14      wz
2fe6c     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
2fe70                 | 
2fe70                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
2fe70                 | 
2fe70     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
2fe74     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
2fe78                 | 
2fe78     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
2fe7c     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
2fe80     5F BF 22 F6 |                 not     retval
2fe84     5F 11 2B F9 |                 setword hidr_axis, retval, #1
2fe88     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
2fe8c     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
2fe90     5F BF 22 F6 |                 not     retval
2fe94     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
2fe98                 | 
2fe98     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
2fe9c     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
2fea0     C0 BE 1E F2 |                 cmp     retval, #192    wcz
2fea4     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
2fea8     F8 01 B0 FD |                 call    #hpad_normalize
2feac     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
2feb0     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
2feb4     C0 BE 1E F2 |                 cmp     retval, #192    wcz
2feb8     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
2febc     E4 01 B0 FD |                 call    #hpad_normalize
2fec0     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
2fec4                 | 
2fec4     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
2fec8     81 BF E6 FA |                 rdword  retval, ptrb[1]
2fecc     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
2fed0     00 16 47 F4 |                 bitc    hidr_buttons, #0
2fed4     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
2fed8     01 16 47 F4 |                 bitc    hidr_buttons, #1
2fedc     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
2fee0     02 16 47 F4 |                 bitc    hidr_buttons, #2
2fee4     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
2fee8     03 16 47 F4 |                 bitc    hidr_buttons, #3
2feec     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
2fef0     04 16 47 F4 |                 bitc    hidr_buttons, #4
2fef4     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
2fef8     05 16 47 F4 |                 bitc    hidr_buttons, #5
2fefc     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
2ff00     08 16 47 F4 |                 bitc    hidr_buttons, #8
2ff04     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
2ff08     09 16 47 F4 |                 bitc    hidr_buttons, #9
2ff0c     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
2ff10     0A 16 47 F4 |                 bitc    hidr_buttons, #10
2ff14     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
2ff18     0B 16 47 F4 |                 bitc    hidr_buttons, #11
2ff1c     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
2ff20     0C 16 47 F4 |                 bitc    hidr_buttons, #12
2ff24                 | 
2ff24     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
2ff28     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
2ff2c     7A BB 7A FF 
2ff30     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
2ff34     F9 FF 7F FF 
2ff38     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
2ff3c     B9 71 5F F9 |                 altgn   htmp, #htmp1
2ff40     00 70 43 F8 |                 getnib  htmp
2ff44     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
2ff48                 | 
2ff48     AC 01 90 FD |                 jmp     #hpad_translate
2ff4c                 | 
2ff4c                 | '------------------------------------------------------------------------------
2ff4c                 | ' Handle PS3 controller
2ff4c                 | ' On entry:
2ff4c                 | '   ptrb - controller report
2ff4c                 | '------------------------------------------------------------------------------
2ff4c                 | '   Default implementation translates the report to a pseudo-defacto hid
2ff4c                 | '   standard and jumps to hpad_translate for actions.
2ff4c                 | '   Implementors may take specific actions for this kind of controller.
2ff4c                 | '------------------------------------------------------------------------------
2ff4c                 | hpad_ps3
2ff4c     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
2ff50     01 70 0F F2 |                 cmp     htmp, #$01      wz
2ff54     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
2ff58                 | 
2ff58                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
2ff58                 | 
2ff58     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
2ff5c     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
2ff60     40 01 B0 FD |                 call    #hpad_normalize
2ff64     5F 11 23 F9 |                 setword hidr_axis, retval, #0
2ff68     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
2ff6c     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
2ff70     30 01 B0 FD |                 call    #hpad_normalize
2ff74     5F 11 2B F9 |                 setword hidr_axis, retval, #1
2ff78     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
2ff7c     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
2ff80     20 01 B0 FD |                 call    #hpad_normalize
2ff84     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
2ff88     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
2ff8c     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
2ff90     10 01 B0 FD |                 call    #hpad_normalize
2ff94     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
2ff98     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
2ff9c     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
2ffa0                 | 
2ffa0     08 8C 07 F6 |                 mov     hpar1, #8
2ffa4     13 8E 07 F6 |                 mov     hpar2, #19
2ffa8     94 00 B0 FD |                 call    #hpad_getbits
2ffac                 | 
2ffac     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
2ffb0     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
2ffb4     00 16 47 F4 |                 bitc    hidr_buttons, #0
2ffb8     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
2ffbc     01 16 47 F4 |                 bitc    hidr_buttons, #1
2ffc0     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
2ffc4     02 16 47 F4 |                 bitc    hidr_buttons, #2
2ffc8     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
2ffcc     03 16 47 F4 |                 bitc    hidr_buttons, #3
2ffd0     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
2ffd4     04 16 47 F4 |                 bitc    hidr_buttons, #4
2ffd8     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
2ffdc     05 16 47 F4 |                 bitc    hidr_buttons, #5
2ffe0     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
2ffe4     06 16 47 F4 |                 bitc    hidr_buttons, #6
2ffe8     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
2ffec     07 16 47 F4 |                 bitc    hidr_buttons, #7
2fff0     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
2fff4     08 16 47 F4 |                 bitc    hidr_buttons, #8
2fff8     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
2fffc     09 16 47 F4 |                 bitc    hidr_buttons, #9
30000     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
30004     0A 16 47 F4 |                 bitc    hidr_buttons, #10
30008     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
3000c     0B 16 47 F4 |                 bitc    hidr_buttons, #11
30010     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
30014     0C 16 47 F4 |                 bitc    hidr_buttons, #12
30018                 | 
30018     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3001c     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
30020     09 FA 79 FF 
30024     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
30028     FF FA 7F FF 
3002c     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
30030     B9 71 5F F9 |                 altgn   htmp, #htmp1
30034     00 70 43 F8 |                 getnib  htmp
30038     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
3003c                 | 
3003c     B8 00 90 FD |                 jmp     #hpad_translate
30040                 | 
30040                 | '------------------------------------------------------------------------------
30040                 | ' Read bits from report data buffer
30040                 | '------------------------------------------------------------------------------
30040                 | ' On entry:
30040                 | '   PTRB - report buffer
30040                 | '   hpar1 - start bit
30040                 | '   hpar2 - number of bits
30040                 | ' On exit:
30040                 | '   retval - bits
30040                 | '------------------------------------------------------------------------------
30040                 | hpad_getbits
30040     C6 71 03 F6 |                 mov     htmp, hpar1
30044     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
30048     F9 71 03 F1 |                 add     htmp, ptrb
3004c     B8 BF 02 FB |                 rdlong  retval, htmp
30050                 | 
30050     C6 73 03 F6 |                 mov     htmp1, hpar1
30054     07 72 07 F5 |                 and     htmp1, #$07     ' shift
30058     B9 BF 42 F0 |                 shr     retval, htmp1
3005c                 | 
3005c     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
30060     10 00 90 1D |         if_a    jmp     #.l1
30064                 | 
30064     C7 8F C3 F9 |                 decod   hpar2
30068     01 8E 87 F1 |                 sub     hpar2, #1
3006c     C7 BF 02 F5 |                 and     retval, hpar2
30070     2D 00 64 FD |                 ret
30074                 | .l1
30074     FF 7F 00 FF 
30078     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
3007c     03 70 07 F1 |                 add     htmp, #3
30080     B8 75 03 FB |                 rdlong  htmp2, htmp
30084     18 8E 87 F1 |                 sub     hpar2, #24
30088     C7 8F C3 F9 |                 decod   hpar2
3008c     01 8E 87 F1 |                 sub     hpar2, #1
30090     B9 75 43 F0 |                 shr     htmp2, htmp1
30094     C7 75 03 F5 |                 and     htmp2, hpar2
30098     18 74 67 F0 |                 shl     htmp2, #24
3009c     BA BF 42 F5 |                 or      retval, htmp2
300a0     2D 00 64 FD |                 ret
300a4                 | 
300a4                 | '------------------------------------------------------------------------------
300a4                 | ' Normalize value to signed word (-32768 / 32767)
300a4                 | '------------------------------------------------------------------------------
300a4                 | ' On entry:
300a4                 | '   retval - value to normalize
300a4                 | '   hidr_lminmax - min (word 1) max (word 0) value range
300a4                 | '   - or -
300a4                 | '   hidr_pminmax - min (word 1) max (word 0) value range
300a4                 | '   hidr_size - value bits length
300a4                 | ' On exit:
300a4                 | '   retval - normalized value
300a4                 | '------------------------------------------------------------------------------
300a4                 | hpad_normalize
300a4     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
300a8     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
300ac     2D 00 64 AD |         if_z    ret
300b0     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
300b4     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
300b8     0F 72 77 F7 |                 signx   htmp1, #15      wc
300bc     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
300c0     00 BE 66 C7 |         if_c    signx   retval, #0-0
300c4     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
300c8     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
300cc     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
300d0     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
300d4     B8 71 53 F6 |                 abs     htmp            wc
300d8     1F BE 0E F4 |                 testb   retval, #31     wz
300dc     5F BF 42 F6 |                 abs     retval
300e0     B8 BF 12 FD |                 qdiv    retval, htmp
300e4     18 BE 62 FD |                 getqx   retval
300e8     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
300ec     C0 FF 7F FF 
300f0     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
300f4     2D 00 64 FD |                 ret
300f8                 | 
300f8                 | '------------------------------------------------------------------------------
300f8                 | ' Perform controller actions
300f8                 | ' On entry:
300f8                 | '    hidr_id        report id
300f8                 | '    hidr_axis      axis value (signed word, 2 axes per long)
300f8                 | '                      X = hidr_axis+0, #0
300f8                 | '                      Y = hidr_axis+0, #1
300f8                 | '                      Z = hidr_axis+1, #0
300f8                 | '                     RX = hidr_axis+1, #1
300f8                 | '                     RY = hidr_axis+2, #0
300f8                 | '                     RZ = hidr_axis+2, #1
300f8                 | '    hidr_buttons   buttons state (bits 0 to 31)
300f8                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
300f8                 | '
300f8                 | '                     -------3 -------2 -------1 -------0 byte
300f8                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
300f8                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
300f8                 | '                                zyx||| |||||||| ++++++++ n. buttons
300f8                 | '                                |||||| ||||++++--------- n. axes
300f8                 | '                                |||||| ++++------------- n. hats
300f8                 | '                                ++++++------------------ valid axes
300f8                 | '------------------------------------------------------------------------------
300f8                 | hpad_translate
300f8                 | 
300f8                 | 
300f8                 |         if HAVE_HIDPAD
300f8     84 0C F0 FE |                 loc     ptrb,#hidpad_report
300fc     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
30100     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
30104     01 70 E7 F2 |                 cmpsub  htmp,#1
30108     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
3010c     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
30110     2D 00 7C 3D |         if_ae   ret     wcz
30114     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
30118     B8 F3 03 F1 |                 add     ptrb,htmp
3011c     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
30120     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
30124     28 0C 64 FD |                 setq    #7-1
30128     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
3012c                 |         end
3012c                 | 
3012c                 | 
3012c                 |         if EMUPAD_MAX_PLAYER > 0
3012c                 | .emupad_no_hat
3012c                 |         if EMUPAD_BT0_BIT >= 0
3012c                 |         end
3012c                 |         if EMUPAD_BT1_BIT >= 0
3012c                 |         end
3012c                 |         if EMUPAD_BT2_BIT >= 0
3012c                 |         end
3012c                 |         if EMUPAD_BT3_BIT >= 0
3012c                 |         end
3012c                 |         if EMUPAD_BT4_BIT >= 0
3012c                 |         end
3012c                 |         if EMUPAD_BT5_BIT >= 0
3012c                 |         end
3012c                 |         if EMUPAD_BT6_BIT >= 0
3012c                 |         end
3012c                 |         if EMUPAD_BT7_BIT >= 0
3012c                 |         end
3012c                 |         if EMUPAD_BT8_BIT >= 0
3012c                 |         end
3012c                 |         if EMUPAD_BT9_BIT >= 0
3012c                 |         end
3012c                 | .emupad_slot_over
3012c                 |         end
3012c                 | 
3012c                 |         if 0
3012c                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
3012c                 | 
3012c                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
3012c                 | 
3012c                 |         end
3012c     2D 00 64 FD |                 ret
30130                 | end
30130                 | 
30130                 | if EMUPAD_MAX_PLAYER > 0
30130                 | '------------------------------------------------------------------------------
30130                 | ' Clear EmuPad state
30130                 | '------------------------------------------------------------------------------
30130                 | emupad_reset
30130                 | 
30130                 | '------------------------------------------------------------------------------
30130                 | ' Get EmuPad Player number for current device (into retval)
30130                 | ' Z flag is also set if current device is valid
30130                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
30130                 | '------------------------------------------------------------------------------
30130                 | emupad_getnum
30130                 | .loop
30130                 | '------------------------------------------------------------------------------
30130                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
30130                 | '------------------------------------------------------------------------------
30130                 | emupad_discon
30130                 | .loop         
30130                 |         
30130                 |         ' FALL THROUGH!!!
30130                 | 
30130                 | '------------------------------------------------------------------------------
30130                 | ' Update EmuPad reports (all of them...)
30130                 | '------------------------------------------------------------------------------
30130                 | emupad_write_reports
30130                 | .devloop
30130                 | 
30130                 | end
30130                 | 
30130                 | 
30130                 | '------------------------------------------------------------------------------
30130                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
30130                 | '------------------------------------------------------------------------------
30130                 | ' On entry:
30130                 | ' On exit:
30130                 | '------------------------------------------------------------------------------
30130                 | hget_hub_status
30130     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
30134     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
30138     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
3013c     01 90 2F F9 |                 setword hpar3, #1, #1
30140     CF 02 A0 FD |                 call    #do_int_in
30144     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
30148     0C 00 90 AD |         if_z    jmp     #.data
3014c     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
30150     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
30154     2D 00 64 FD |                 ret
30158                 | .data
30158     00 90 0F F2 |                 cmp     hpar3, #0               wz
3015c     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
30160                 | 
30160     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
30164     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
30168     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
3016c     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
30170                 |                 debug(ubin_long(hub_status_chg))
30170                 | 
30170     01 5A 06 F6 |                 mov     hdev_port, #1
30174                 | .loop
30174     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
30178     0C 00 B0 AD |         if_x1   call    #hub_port_handler
3017c     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
30180     F0 FF 9F 3D |         if_nc   jmp     #.loop
30184     2D 00 64 FD |                 ret
30188                 | 
30188                 | hub_port_handler
30188     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
3018c     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
30190     27 EF 03 F6 |                 mov     pb, urx_buff_p
30194     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
30198     55 02 A0 FD |                 call    #control_read
3019c     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
301a0                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
301a0                 | 
301a0     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
301a4     50 01 90 5D |         if_x0   jmp     #.other
301a8     68 02 D0 FE |                 loc     ptra, #clr_port_feat
301ac     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
301b0     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
301b4     A0 02 A0 FD |                 call    #control_write
301b8     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
301bc     7C 01 90 5D |         if_x0   jmp     #.disconnect
301c0     B0 99 02 F6 |                 mov     hctwait, _100ms_
301c4     EF 02 A0 FD |                 call    #poll_waitx
301c8                 | 
301c8     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
301cc     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
301d0     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
301d4     A0 02 A0 FD |                 call    #control_write
301d8                 | 
301d8     02 76 07 F6 |                 mov     htmp3, #2
301dc                 | .wait_reset
301dc     AC 99 02 F6 |                 mov     hctwait, _8ms_
301e0     EF 02 A0 FD |                 call    #poll_waitx
301e4     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
301e8     27 EF 03 F6 |                 mov     pb, urx_buff_p
301ec     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
301f0     55 02 A0 FD |                 call    #control_read
301f4     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
301f8     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
301fc     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
30200                 | 
30200     10 02 D0 FE |                 loc     ptra, #clr_port_feat
30204     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
30208     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3020c     A0 02 A0 FD |                 call    #control_write
30210                 | 
30210     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
30214                 | .wait_recover
30214     A7 99 02 F6 |                 mov     hctwait, _1ms_
30218     EF 02 A0 FD |                 call    #poll_waitx
3021c     FD 71 6F FB |                 djnz    htmp,#.wait_recover
30220                 | 
30220     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
30224     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
30228     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3022c                 | 
3022c     00 08 00 FF 
30230     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
30234     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
30238     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
3023c     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
30240     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
30244     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
30248     48 01 90 5D |         if_nz   jmp     #.done
3024c                 | .get_dev_desc
3024c     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
30250     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
30254     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
30258     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
3025c     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
30260     01 71 57 FC |                 wrword  htmp, ptra[wValue]
30264     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
30268     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3026c     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
30270     AC 99 02 F6 |                 mov     hctwait, _8ms_
30274     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
30278     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
3027c     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
30280     BE 00 A0 FD |                 call    #calc_crc5
30284     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
30288     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3028c     F7 AD C2 FA |                 rdbyte  total_data, pb
30290     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
30294     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
30298     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3029c     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
302a0     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
302a4     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
302a8                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
302a8     9F 99 02 F6 |                 mov     hctwait, _500us_
302ac     EF 02 A0 FD |                 call    #poll_waitx
302b0     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
302b4     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
302b8     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
302bc     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
302c0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
302c4     CC 00 90 5D |         if_nz   jmp     #.done
302c8     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
302cc     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
302d0     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
302d4     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
302d8     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
302dc     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
302e0     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
302e4     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
302e8     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
302ec     A4 00 90 CD |         if_b    jmp     #.done
302f0     6C F0 BF FD |                 call    #hparse_con_desc
302f4     9C 00 90 FD |                 jmp     #.done
302f8                 | 
302f8                 | .other
302f8     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
302fc     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
30300     28 00 90 AD |         if_x1   jmp     #.reset_feature
30304     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
30308     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
3030c     1C 00 90 AD |         if_x1   jmp     #.reset_feature
30310     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
30314     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
30318     10 00 90 AD |         if_x1   jmp     #.reset_feature
3031c     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
30320     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
30324     04 00 90 AD |         if_x1   jmp     #.reset_feature
30328     68 00 90 FD |                 jmp     #.done
3032c                 | .reset_feature
3032c     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
30330     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
30334     A0 02 A0 FD |                 call    #control_write
30338     58 00 90 FD |                 jmp     #.done
3033c                 | .disconnect
3033c                 | 
3033c     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
30340     00 70 E3 F8 |                 getbyte htmp
30344     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
30348     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
3034c     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
30350     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
30354     00 76 06 A6 |         if_z    mov     kb_led_states, #0
30358     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
3035c                 |         if EMUPAD_MAX_PLAYER > 0
3035c                 |         end
3035c                 |         if HAVE_MOUSE
3035c     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
30360     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
30364     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
30368                 |         end
30368                 |         if HAVE_HIDPAD
30368     14 0A F0 FE |                 loc ptrb,#hidpad_report
3036c     2D 71 03 F6 |                 mov htmp,hdev_port
30370     01 70 E7 F2 |                 cmpsub htmp,#1
30374     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
30378     B8 F3 03 F1 |                 add ptrb,htmp
3037c     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
30380     80 01 6C FC |                 wrlong #0,ptrb
30384                 |         end
30384                 | 
30384     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
30388     00 00 C4 F8 |                 setbyte #0
3038c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
30390     00 00 04 F6 |                 mov     0-0, #0
30394                 | 
30394                 | .done
30394     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
30398     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3039c     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
303a0     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
303a4     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
303a8     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
303ac                 | 
303ac     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
303b0     27 EF 03 F6 |                 mov     pb, urx_buff_p
303b4     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
303b8     55 02 A0 FD |                 call    #control_read
303bc     00 69 06 FB |                 rdlong  hub_port_status, ptra
303c0                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
303c0     2D 00 64 FD |                 ret
303c4                 | 
303c4                 | '------------------------------------------------------------------------------
303c4                 | ' Partially populated SETUP packets
303c4                 | '------------------------------------------------------------------------------
303c4     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
303c5     06          |                 byte    REQ_GET_DESC
303c6     00 01       |                 word    TYPE_DEVICE << 8
303c8     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
303ca     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
303cc     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
303cd     06          |                 byte    REQ_GET_DESC
303ce     00 02       |                 word    TYPE_CONFIG << 8
303d0     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
303d2     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
303d4     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
303d5     09          |                 byte    REQ_SET_CONFIG
303d6     00 00       |                 word    0       ' Configuration value
303d8     00 00       |                 word    0       ' Zero
303da     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
303dc     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
303dd     05          |                 byte    REQ_SET_ADDR
303de     00 00       |                 word    0       ' Zero
303e0     00 00       |                 word    0       ' Zero
303e2     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
303e4                 | '------------------------------------------------------------------------------
303e4                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
303e4                 | ' wValue field dictates which protocol should be used.
303e4                 | '
303e4                 | ' When initialized, all devices default to report protocol. However the host
303e4                 | ' should not make any assumptions about the device state and should set the
303e4                 | ' desired protocol whenever initializing a device.
303e4                 | '------------------------------------------------------------------------------
303e4     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
303e5     0B          |                 byte    HID_SET_PROTO
303e6     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
303e8                 |                                                 ' (HID 1.11 Section 7.2.6).
303e8     00 00       |                 word    0               ' Interface index number.
303ea     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
303ec                 | '------------------------------------------------------------------------------
303ec     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
303ed     0A          |                 byte    HID_SET_IDLE
303ee     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
303f0                 |                                         ' reporting until a change is detected in the report data
303f0                 | 
303f0                 |                                         ' (HID 1.11 Section 7.2.4).
303f0     00 00       |                 word    0       ' Interface index number.
303f2     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
303f4     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
303f5     09          |                 byte    HID_SET_REPORT
303f6     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
303f8                 |                                         ' (HID 1.11 Section 7.2.2).
303f8     00 00       |                 word    0       ' Interface index number.
303fa     00 00       |                 word    0       ' Size of the report, in bytes.
303fc     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
303fd     06          |                 byte    REQ_GET_DESC
303fe     00 22       |                 word    TYPE_REPORT << 8
30400     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
30402     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
30404                 | '------------------------------------------------------------------------------
30404     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
30405     06          |                 byte    REQ_GET_DESC
30406     00 29       |                 word    TYPE_HUB << 8
30408     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3040a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3040c     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3040d     03          |                 byte    REQ_SET_FEATURE
3040e     00 00       |                 word    0       ' port power
30410     01 00       |                 word    1       ' Port index number (1+)
30412     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
30414     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
30415     01          |                 byte    REQ_CLEAR_FEATURE
30416     00 00       |                 word    0       ' port power
30418     01 00       |                 word    1       ' Port index number (1+)
3041a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3041c     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
3041d     00          |                 byte    REQ_GET_STATUS
3041e     00 00       |                 word    0
30420     01 00       |                 word    1       ' Port index number (1+)
30422     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
30424                 | '------------------------------------------------------------------------------
30424                 | if _HAVE_GAMEPAD
30424     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
30428                 | ps3_command_buff
30428     00 00 00 00 
3042c     00          |                 byte    $00, $00, $00, $00, $00
3042d     00 00 00 00 
30431     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
30432     FF 27 10 00 
30436     32          |                 byte    $FF, $27, $10, $00, $32
30437     FF 27 10 00 
3043b     32          |                 byte    $FF, $27, $10, $00, $32
3043c     FF 27 10 00 
30440     32          |                 byte    $FF, $27, $10, $00, $32
30441     FF 27 10 00 
30445     32          |                 byte    $FF, $27, $10, $00, $32
30446     00 00 00 00 
3044a     00          |                 byte    $00, $00, $00, $00, $00
3044b     00 00 00 00 
3044f     00          |                 byte    $00, $00, $00, $00, $00
30450     00 00 00 00 
30454     00          |                 byte    $00, $00, $00, $00, $00
30455     00 00 00    |                 byte    $00, $00, $00
30458                 | '------------------------------------------------------------------------------
30458     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
3045b                 |                                         ' 0x01 All blinking
3045b                 |                                         ' 0x02 1 flashes, then on
3045b                 |                                         ' 0x03 2 flashes, then on
3045b                 |                                         ' 0x04 3 flashes, then on
3045b                 |                                         ' 0x05 4 flashes, then on
3045b                 |                                         ' 0x06 1 on
3045b                 |                                         ' 0x07 2 on
3045b                 |                                         ' 0x08 3 on
3045b                 |                                         ' 0x09 4 on
3045b                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
3045b                 |                                         ' 0x0B Blinking*
3045b                 |                                         ' 0x0C Slow blinking*
3045b                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
3045b     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
3045e     00          |                 byte    $00             ' Left rumble
3045f     00          |                 byte    $00             ' Right rumble
30460     00 00 00    |                 byte    $00, $00, $00
30463     00          | end
30464                 | alignl
30464                 | 
30464                 | if HAVE_MOUSE
30464     00 00 00 00 
30468     00 00 00 00 | mouse_limits long 0[2]
3046c     00 00 00 00 | mouse_outptr long 0
30470                 | end
30470                 | 
30470                 | if KEYQUEUE_SIZE > 0
30470     00          | keyq_head byte 0
30471     00          | keyq_tail byte 0
30472     00 00 00 00 
      ...             
3066e     00 00 00 00 
30672     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
30674                 | alignl
30674                 | end
30674                 | 
30674                 | if EMUPAD_MAX_PLAYER > 0
30674                 | emupad_rule_buffer
30674                 | if EMUPAD_BUILTIN_RULES
30674                 | file "padmap_builtin.dat"
30674                 | end
30674                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
30674                 | '' Default rule directly follows!
30674                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
30674                 | end
30674                 | 
30674                 | '------------------------------------------------------------------------------
30674                 | ' The USB data cache area gets zero-filled at every device disconnect
30674                 | '------------------------------------------------------------------------------
30674                 | usb_cache_start
30674                 | 
30674                 | ' HID descriptor and report buffers
30674                 | if !!OVERLAP_MEMORY
30674     00 00 00 00 
      ...             
30d6c     00 00 00 00 
30d70     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
30d74                 | end
30d74     00 00 00 00 
30d78     00 00 00 00 | hkbd_report     byte    0[8]
30d7c     00 00 00 00 | hkbd_led_rep    byte    0
30d80                 | alignl
30d80                 | 
30d80                 | if HAVE_HIDPAD
30d80     00 00 00 00 
      ...             
30e3c     00 00 00 00 
30e40     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
30e44                 | end
30e44                 | 
30e44                 | ' HUB descriptor
30e44     00          | hub_descr       byte    0   ' bDescLength
30e45     00          |                 byte    0   ' bDescriptorType
30e46     00          |                 byte    0   ' bNbrPorts
30e47     00 00       |                 word    0   ' wHubCharacteristics
30e49     00          |                 byte    0   ' bPwrOn2PwrGood
30e4a     00          |                 byte    0   ' bHubContrCurrent
30e4b     00          |                 byte    0   ' DeviceRemoveable
30e4c     00          |                 byte    0   ' PortPwrCtrlMask
30e4d                 | 
30e4d                 | usb_cache_end
30e4d                 | 
30e4d                 | if HAVE_MOUSE
30e4d     00 00 00 00 | mouse_xacc      long 0
30e51     00 00 00 00 | mouse_yacc      long 0
30e55     00 00 00 00 | mouse_zacc      long 0
30e59     00          | mouse_bstate    byte 0
30e5a     00          | mouse_lpending  byte 0
30e5b     00          | mouse_rpending  byte 0
30e5c     00          | mouse_mpending  byte 0
30e5d     00          | mouse_lock      byte 0
30e5e     00 00 00    |                 byte 0[3] ' padding
30e61                 | end
30e61                 | 
30e61     00 00 00 00 
      ...             
30ed9     00 00 00 00 
30edd     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
30ee1     00 00 00 00 
30ee5     00 00 00 00 
30ee9     00 00 00 00 
30eed     00 00 00 00 
30ef1     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
30ef3     00 00 00 00 
      ...             
30feb     00 00 00 00 
30fef     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
30ff3                 | 
30ff3     00          | driver_cog      byte    0                       ' Current driver cog + 1
30ff4                 | 	alignl
30ff4                 | _Audio093b_8_sc_spin2_dat_
30ff4                 | 
30ff4                 | audio       org     0
30ff4                 | 
30ff4     61 85 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
30ff8     61 C3 05 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
30ffc     61 CF 05 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
31000                 | 
31000     01 EC 63 FD |             cogid   pa                   ' compute cogid
31004     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
31008     F6 85 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
3100c     C2 82 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
31010                 | 
31010     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
31014     0E CA 05 FC |             wrpin   dac,#left            ' Noise dither DACs at clk/100
31018     0E BE 1C FC |             wxpin   #95,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
3101c     0F CA 05 FC |             wrpin   dac,#right
31020     0F BE 1C FC |             wxpin   #95,#right    
31024     41 9C 64 FD |             dirh    #left addpins 1
31028     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
3102c     A9 E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
31030     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
31034                 |             
31034                 | '---------------------------------------------------------------------------------        
31034                 | '----------------- The main loop -------------------------------------------------
31034                 | '---------------------------------------------------------------------------------
31034                 | 
31034     B2 66 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
31038     10 00 90 CD |       if_c  jmp     #loop1
3103c                 |   
3103c     09 A8 05 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
31040     B2 A8 8D F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
31044     B1 00 80 F1 |             sub     0-0,a40000000
31048     FD A9 6D FB |             djnz    cn,#p402
3104c                 |     
3104c     00 A8 05 F6 | loop1       mov     cn,#0               ' Find the channel to compute
31050     B4 AA 01 F6 |             mov     ct,time1            ' with the lowest next sample time
31054     B5 AA 39 F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
31058     01 A8 05 C6 |     if_c    mov     cn,#1
3105c     B6 AA 39 F3 |             fle     ct,time3 wcz
31060     02 A8 05 C6 |     if_c    mov     cn,#2     
31064     B7 AA 39 F3 |             fle     ct,time4 wcz
31068     03 A8 05 C6 |     if_c    mov     cn,#3
3106c     B8 AA 39 F3 |             fle     ct,time5 wcz
31070     04 A8 05 C6 |     if_c    mov     cn,#4
31074     B9 AA 39 F3 |             fle     ct,time6 wcz
31078     05 A8 05 C6 |     if_c    mov     cn,#5
3107c     BA AA 39 F3 |             fle     ct,time7 wcz
31080     06 A8 05 C6 |     if_c    mov     cn,#6
31084     BB AA 39 F3 |             fle     ct,time8 wcz
31088     07 A8 05 C6 |     if_c    mov     cn,#7
3108c                 | 
3108c                 | 
3108c                 | '----------------------------------------------------------------------------------
3108c                 | '------------- Compute channel samples --------------------------------------------
3108c                 | '----------------------------------------------------------------------------------
3108c                 | 
3108c                 | 
3108c     D4 78 01 F6 | p401        mov     channeladd,cn             ' compute the pointer to channel parameters block
31090     05 78 65 F0 |             shl     channeladd,#5
31094     BC F0 03 F1 |             add     ptra,channeladd
31098                 | 
31098     28 0E 64 FD |             setq    #7                        ' read parameters
3109c     00 8F 05 FB |             rdlong  pointer0,ptra
310a0                 | '            testb   command0,#29 wz
310a0                 | '    if_nz   jmp     #p408
310a0                 | '    	    getword envptr,command0,#0
310a0                 | '    	    getbyte envspeed,command0,#2
310a0                 | '    	    jmp     #p404                     'if envelope then no sample rate
310a0                 |     	    
310a0     1F 9C 0D F4 | p408        testb   command0,#31 wz	      ' bit #31 command - set the DAC sample rate
310a4     18 00 90 5D |     if_nz   jmp     #p404                     ' if not set, proceed
310a8     CE 7C 31 F9 |             getword qq,command0,#0            ' get the new rate
310ac     4E 7C 15 FC |             wxpin   qq,#left addpins 1        ' and program the pins
310b0     BE 7C E1 F8 |             getbyte qq,qq,#0 		      ' check if the rate is n*256
310b4     00 7C 0D F2 |             cmp     qq,#0 wz                         
310b8     4E CC 05 AC |     if_z    wrpin   dac2,#left addpins 1      ' if yes, set PWM DAC mode
310bc     4E CA 05 5C |     if_nz   wrpin   dac,#left addpins 1       ' else set noise DAC mode
310c0                 |             
310c0     1E 9C 1D F4 | p404        bitl    command0,#30 wcz             ' bit #30: select PSRAM/HUB
310c4     C2 82 01 56 |     if_nz   mov     mailbox,mailbox2             ' if not set, use PSRAM
310c8     00 82 05 A6 |     if_z    mov     mailbox,#0                   ' if set, use HUB : TODO: this can be done at a channel level!
310cc                 | 
310cc                 | 
310cc     C8 AE 31 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
310d0     C8 B0 39 F9 |             getword oldrs,sample0,#1
310d4     CC A4 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
310d8     CC A2 31 F9 |     	    getword avol0,volpan0,#0
310dc     CD A0 39 F9 |             getword askip0,freqskip0,#1    	    
310e0     CD 9E 31 F9 |             getword afreq0,freqskip0,#0
310e4                 | 
310e4     B4 A8 95 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
310e8     00 AC 01 F6 |             mov     dt0,0-0    
310ec     B3 AC 81 F1 |             sub     dt0,time0
310f0                 |             
310f0     B4 A8 8D F9 |             altd    cn, #time1                ' add channel period to channel time
310f4     CF 00 00 F1 |             add     0-0,afreq0  	
310f8                 | 
310f8     D0 8E 01 F1 |             add     pointer0,askip0           ' compute the pointer to the next sample       
310fc     C7 EA C1 F8 |             setbyte pointer00,pointer0,#0
31100     08 8E 45 F0 |             shr     pointer0,#8
31104                 |          
31104     1F 92 0D F4 |             testb   sstart0,#31 wz            
31108     01 8E 65 A0 |     if_z    shl     pointer0,#1        
3110c     1C 92 0D F4 |             testb   sstart0,#28 wz            
31110     01 8E 65 A0 |     if_z    shl     pointer0,#1        
31114                 |             
31114     CB 8E 19 F2 |             cmp     pointer0,lend0 wcz
31118     CB 8E 81 31 |     if_ge   sub     pointer0,lend0	      ' and loop if needed     
3111c     CA 8E 01 31 |     if_ge   add     pointer0,lstart0       
31120                 |             
31120     C7 7C 01 F6 |             mov     qq,pointer0               ' compute place in the memory from where the sample will be loaded
31124     C9 7C 01 F1 |             add     qq,sstart0            
31128                 | 
31128                 | 
31128                 | 
31128     FF 83 5D F2 |             cmps    mailbox,#$1FF wcz            ' the mailbox has to point somewhere not at the start of HUB RAM
3112c     BE 7E E1 EA |     if_le   rdword  spl,qq                     ' if not, use HUB RAM for samples
31130     04 01 B0 1D |     if_gt   call    #cache_read
31134                 |          
31134                 |          
31134                 |  
31134                 |          
31134     1F 92 0D F4 |             testb   sstart0,#31 wz 
31138     08 7E 65 50 |     if_nz   shl     spl,#8
3113c     08 8E 65 50 |     if_nz   shl     pointer0,#8
31140     07 8E 65 A0 |     if_z    shl     pointer0,#7
31144     1C 92 0D F4 |             testb   sstart0,#28 wz            
31148     01 8E 45 A0 |     if_z    shr     pointer0,#1    
3114c     F5 8E C1 F8 | 	    setbyte pointer0,pointer00,#0       
31150                 |     
31150                 | 
31150     D1 7E 31 FA | p406        scas    spl,avol0                 ' apply volume
31154     00 7E 01 F6 |             mov     spl,0-0
31158                 |  
31158     D2 7E 31 FA |             scas    spl,apan0                 ' apply pan
3115c     00 B2 01 F6 |             mov     ls0,0-0
31160     20 00 00 FF 
31164     00 7C 05 F6 |             mov     qq,##16384
31168     D2 7C 81 F1 |             sub     qq,apan0
3116c     BE 7E 31 FA |             scas    spl,qq
31170     00 B4 01 F6 |             mov     rs0, 0-0
31174                 | 
31174     D8 B8 81 F1 |             sub     rs,oldrs 		      ' replace the old sample with the new one in the mix
31178     DA B8 01 F1 |             add     rs,rs0
3117c     D7 B6 81 F1 |             sub     ls,oldls
31180     D9 B6 01 F1 |             add     ls,ls0
31184                 |    
31184     DA 90 29 F9 |             setword sample0,rs0,#1           ' pack samples into long
31188     D9 90 21 F9 |             setword sample0,ls0,#0
3118c                 |             
3118c     1E 92 1D F4 |             bitl    sstart0, #30 wcz          ' if bit #30 of start pointer is set, the current pointer needs resetting  
31190     00 8E 05 A6 |     if_z    mov     pointer0, #0  
31194     02 93 65 AC |     if_z    wrlong  sstart0, ptra[2]          ' reset bit #30 in hub
31198     1D 92 1D F4 |             bitl    sstart0, #29 wcz	      ' if bit #29 is set, synchronize stereo at channels 1 and 2
3119c     04 00 00 AF 
311a0     00 68 05 A1 |     if_z    add     time1,##2048
311a4     B4 6A 01 A6 |     if_z    mov     time2,time1
311a8     02 93 65 AC |     if_z    wrlong  sstart0,ptra[2]
311ac                 |             
311ac     28 02 64 FD | p403        setq #1                          ' write new pointer and sample value to the hub
311b0     00 8F 65 FC |             wrlong  pointer0,ptra
311b4     BC F0 83 F1 |             sub     ptra, channeladd         ' reset the pointer to channel parameters
311b8                 |                       
311b8     B3 A6 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
311bc     FF 7B 25 A7 |     if_z    decmod  front, #511          
311c0                 |          
311c0     DB AE 31 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
311c4     DC B0 31 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
311c8     0F AE E5 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
311cc     0F B0 E5 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
311d0                 | 	    
311d0                 | 		    
311d0     D7 B0 29 F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
311d4     DE BA 01 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
311d8     D8 BC 01 F6 |             mov     newsample, oldrs       
311dc                 | 
311dc     B3 A6 01 F6 |             mov     oldt0,time0              ' update global time
311e0     D6 66 01 F1 |             add     time0,dt0    
311e4                 |                                      
311e4     00 AC 0D F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
311e8     60 FE 9F AD |     if_z    jmp     #loop1
311ec     D6 7C 01 F6 |             mov     qq,dt0
311f0                 |   
311f0     FF F3 97 F9 | p301        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
311f4     00 7A 9D F2 |             cmpr    front, #0-0 wcz
311f8     F4 FF 9F AD |     if_e    jmp     #p301    
311fc                 | 		
311fc     00 C2 0D F2 | 	    cmp     scbase,#0 wz
31200     20 00 90 AD |     if_z    jmp #p302	   
31204                 |  
31204                 |  
31204     3F C8 15 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
31208     E2 C6 01 C6 |     if_c    mov scptr2,scptr
3120c     02 C6 65 C0 |     if_c    shl scptr2,#2
31210     E1 C6 01 C1 |     if_c    add scptr2,scbase     
31214     60 C6 65 FC |             wrlong scptr2,#$60
31218     E3 BA 61 CC |     if_c    wrlong oldsample,scptr2
3121c     01 00 00 CF 
31220     7F C4 05 C7 |     if_c    incmod scptr,##639
31224                 | 			    
31224     BD BA 31 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
31228     00 00 00 FF 
3122c     FF 7B 05 F7 |             incmod  front, ##511
31230     EF 7D 6D FB |             djnz    qq,#p301
31234                 |             
31234     FC FD 9F FD |             jmp     #loop            'loop
31238                 | 
31238                 | '----------------------------------------------------------------------------------
31238                 | '------------- This is the end of the main loop -----------------------------------
31238                 | '----------------------------------------------------------------------------------
31238                 | 
31238                 | '----------------------------------------------------------------------------------
31238                 | '------------- PSRAM cache ----------- --------------------------------------------
31238                 | '----------------------------------------------------------------------------------
31238                 | 
31238                 | ' There are 8 cache pointers for 8 channels
31238                 | ' if 24 higher bits of address=cache, then ger a word from the cache
31238                 | ' else load the cache from PSRAM, update the pointer, then read a sample
31238                 | 
31238                 | 
31238     BE E6 E1 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
3123c                 |             
3123c     BE E8 01 F6 | 	    mov     addrhi,qq		
31240     08 E8 45 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
31244     E8 A8 95 F9 | 	    alts    cn,#cache1            
31248     00 E8 09 F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
3124c     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
31250                 | 	
31250     E8 A8 8D F9 | p702	    altd    cn,#cache1			' cache miss. 
31254     F4 00 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
31258     F4 E0 01 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
3125c     08 E0 65 F0 | 	    shl     cmd,#8
31260     0B E0 3D F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
31264     D4 E2 01 F6 |             mov     hubaddr,cn                  ' to the channel cache
31268     08 E2 65 F0 |             shl     hubaddr,#8                  '
3126c     E7 E2 01 F1 |             add     hubaddr,hubptr 
31270     00 E5 05 F6 |             mov     count,#256                  ' 256 bytes
31274     28 04 64 FD |             setq    #2                          ' write 3 longs
31278     C1 E0 61 FC |             wrlong  cmd, mailbox                ' run it
3127c     C1 E0 01 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
31280     FE E1 B5 FB |             tjs     cmd, #poll1                 ' retry until valid 
31284                 |             
31284                 | 	
31284     D4 7C 01 F6 | p701	    mov     qq,cn			' cache hit
31288     08 7C 65 F0 | 	    shl     qq,#8			' compute the cache start
3128c     E7 7C 01 F1 | 	    add     qq,hubptr
31290     F3 7C 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
31294     BE 7E E1 0A |     _ret_   rdword  spl,qq                      ' read a word
31298                 |           
31298                 | 
31298                 | '--------------------------------------------------------------------------
31298                 | '------ Interrupt service -------------------------------------------------
31298                 | '------ Output the sample, get the next one if exists ---------------------
31298                 | '--------------------------------------------------------------------------
31298                 | 
31298     0E 86 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 100 cycles     
3129c     0F 88 25 FC |             wypin   rsample,#right       '4
312a0     BD F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
312a4     80 8B A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
312a8     FF F3 07 57 |     if_ne   incmod  ptrb,#511
312ac     C5 88 39 59 |     if_ne   getword rsample,lsnext,#1    '13
312b0     C5 86 31 59 |     if_ne   getword lsample,lsnext,#0    '15
312b4                 |     
312b4     F5 FF 3B FB |             reti1                        '17/19 
312b8                 |           
312b8                 | '---------------------------------------------------------------------------
312b8                 | '-------- End of interrupt -------------------------------------------------
312b8                 | '---------------------------------------------------------------------------    
312b8                 | 
312b8                 | 
312b8                 | '---------------------------------------------------------------------------
312b8                 | '------- Variables ---------------------------------------------------------
312b8                 | '---------------------------------------------------------------------------
312b8                 | 
312b8                 | ' constants
312b8                 | 
312b8     00 00 00 40 | a40000000   long $40000000
312bc     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
312c0                 | 
312c0                 | ' Time variables
312c0                 | 
312c0     00 00 00 00 | time0       long 0    ' Global sample computing time
312c4     01 00 00 00 | time1       long 1    ' Local channels time
312c8     02 00 00 00 | time2       long 2
312cc     03 00 00 00 | time3       long 3
312d0     04 00 00 00 | time4       long 4
312d4     05 00 00 00 | time5       long 5
312d8     06 00 00 00 | time6       long 6
312dc     07 00 00 00 | time7       long 7
312e0     08 00 00 00 | time8       long 8
312e4                 | 
312e4     00 00 00 00 | channeladd long 0
312e8                 | 
312e8     00 00 00 00 | front       long 0
312ec                 | 
312ec                 | ' temporary variables 
312ec     00 00 00 00 | qq          long 0
312f0     00 00 00 00 | spl         long 0
312f4     00 00 00 00 | zero        long 0
312f8     00 00 00 00 | mailbox     long 0
312fc     00 00 00 00 | mailbox2 long 0
31300                 | 
31300                 | ' Interrupt ISR variables
31300                 | 
31300     00 00 00 00 | lsample     long 0
31304     00 00 00 00 | rsample     long 0
31308     00 00 00 00 | lsnext      long 0
3130c     00 00 00 00 | rsnext      long 0 
31310                 | 
31310                 | ' channel parameter block
31310                 | 
31310     00 00 00 00 | pointer0    long 0     
31314     00 00 00 00 | sample0     long 0
31318     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
3131c     00 00 00 00 | lstart0     long 0
31320     00 00 00 00 | lend0       long 0
31324     00 00 00 00 | volpan0     long 0
31328     00 00 00 00 | freqskip0   long 0
3132c     00 00 00 00 | command0    long 0
31330                 | 
31330     00 00 00 00 | afreq0      long 0
31334     00 00 00 00 | askip0      long 0
31338     00 00 00 00 | avol0       long 0
3133c     00 00 00 00 | apan0       long 0
31340                 | 
31340     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
31344     00 00 00 00 | cn          long 0
31348     00 00 00 00 | ct          long 0
3134c     00 00 00 00 | dt0         long 0
31350                 | 
31350                 | ' Samples
31350     00 00 00 00 | oldls       long 0
31354     00 00 00 00 | oldrs       long 0
31358                 | 
31358     00 00 00 00 | ls0         long 0
3135c     00 00 00 00 | rs0         long 0
31360                 | 
31360     00 00 00 00 | ls          long 0    
31364     00 00 00 00 | rs          long 0
31368                 | 
31368     00 00 00 00 | oldsample   long 0
3136c     00 00 00 00 | newsample   long 0
31370                 | 
31370     00 00 00 00 | nrsample    long 0
31374     00 00 00 00 | nlsample    long 0
31378                 | 
31378     00 00 00 00 | scbase long 0
3137c     00 00 00 00 | scptr long 0
31380     00 00 00 00 | scptr2 long 0
31384     00 00 00 00 | scope long 0
31388                 | 
31388     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
3138c     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
31390                 | 
31390     00 18 07 00 | hubptr      long $71800
31394     00 00 00 00 | cache1      long 0
31398     00 00 00 00 | cache2      long 0
3139c     00 00 00 00 | cache3      long 0
313a0     00 00 00 00 | cache4      long 0
313a4     00 00 00 00 | cache5      long 0
313a8     00 00 00 00 | cache6      long 0
313ac     00 00 00 00 | cache7      long 0
313b0     00 00 00 00 | cache8      long 0
313b4                 | 
313b4                 | 
313b4     00 00 00 00 | cmd         long 0
313b8     00 00 00 00 | hubaddr     long 0
313bc     00 01 00 00 | count       long 256
313c0     00 00 00 00 | addrlo long 0
313c4     00 00 00 00 | addrhi long 0
313c8     00 00 00 00 | pointer00 long 0
313cc     00 00 00 00 
313d0     00 00 00 00 | null  			long 	0,0           ' for channel reset
313d4                 | 	alignl
313d4                 | __system__dat_
313d4     00 00 00 00 
313d8     00 00 00 00 | 	byte	$00[8]
313dc     03 00 00 00 
313e0     00 00 00 00 
313e4     00 00 00 00 
313e8     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
313ec     00 00 00 00 
      ...             
31678     00 00 00 00 
3167c     00 00 00 00 | 	byte	$00[660]
31680     00 00 80 06 | 	long	(104 {__system____root_opendir})<<20
31684     00 00 90 06 | 	long	(105 {__system____root_closedir})<<20
31688     00 00 A0 06 | 	long	(106 {__system____root_readdir})<<20
3168c     00 00 B0 06 | 	long	(107 {__system____root_stat})<<20
31690     00 00 00 00 
31694     00 00 00 00 
31698     00 00 00 00 
3169c     00 00 00 00 
316a0     00 00 00 00 
316a4     00 00 00 00 
316a8     00 00 00 00 | 	byte	$00[28]
316ac     14 17 03 00 | 	long	@@@__system__dat_ + 832
316b0     17 17 03 00 | 	long	@@@__system__dat_ + 835
316b4     38 17 03 00 | 	long	@@@__system__dat_ + 868
316b8     51 17 03 00 | 	long	@@@__system__dat_ + 893
316bc     6C 17 03 00 | 	long	@@@__system__dat_ + 920
316c0     86 17 03 00 | 	long	@@@__system__dat_ + 946
316c4     96 17 03 00 | 	long	@@@__system__dat_ + 962
316c8     A8 17 03 00 | 	long	@@@__system__dat_ + 980
316cc     BA 17 03 00 | 	long	@@@__system__dat_ + 998
316d0     CC 17 03 00 | 	long	@@@__system__dat_ + 1016
316d4     D8 17 03 00 | 	long	@@@__system__dat_ + 1028
316d8     E9 17 03 00 | 	long	@@@__system__dat_ + 1045
316dc     FD 17 03 00 | 	long	@@@__system__dat_ + 1065
316e0     07 18 03 00 | 	long	@@@__system__dat_ + 1075
316e4     17 18 03 00 | 	long	@@@__system__dat_ + 1091
316e8     26 18 03 00 | 	long	@@@__system__dat_ + 1106
316ec     3C 18 03 00 | 	long	@@@__system__dat_ + 1128
316f0     55 18 03 00 | 	long	@@@__system__dat_ + 1153
316f4     69 18 03 00 | 	long	@@@__system__dat_ + 1173
316f8     77 18 03 00 | 	long	@@@__system__dat_ + 1187
316fc     8B 18 03 00 | 	long	@@@__system__dat_ + 1207
31700     97 18 03 00 | 	long	@@@__system__dat_ + 1219
31704     A9 18 03 00 | 	long	@@@__system__dat_ + 1237
31708     C1 18 03 00 | 	long	@@@__system__dat_ + 1261
3170c     D3 18 03 00 | 	long	@@@__system__dat_ + 1279
31710     E6 18 03 00 | 	long	@@@__system__dat_ + 1298
31714     4F 4B 00 4E 
31718     75 6D 65 72 
3171c     69 63 61 6C 
31720     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
31724     75 6D 65 6E 
31728     74 20 6F 75 
3172c     74 20 6F 66 
31730     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
31734     61 69 6E 00 
31738     52 65 73 75 
3173c     6C 74 20 6E 
31740     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
31744     65 70 72 65 
31748     73 65 6E 74 
3174c     61 62 6C 65 
31750     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
31754     65 67 61 6C 
31758     20 6D 75 6C 
3175c     74 69 62 79 
31760     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
31764     65 71 75 65 
31768     6E 63 65 00 
3176c     4E 6F 20 73 
31770     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
31774     66 69 6C 65 
31778     20 6F 72 20 
3177c     64 69 72 65 
31780     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
31784     79 00 42 61 
31788     64 20 66 69 
3178c     6C 65 20 6E 
31790     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
31794     72 00 50 65 
31798     72 6D 69 73 
3179c     73 69 6F 6E 
317a0     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
317a4     69 65 64 00 
317a8     4E 6F 74 20 
317ac     65 6E 6F 75 
317b0     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
317b4     65 6D 6F 72 
317b8     79 00 54 65 
317bc     6D 70 6F 72 
317c0     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
317c4     66 61 69 6C 
317c8     75 72 65 00 
317cc     46 69 6C 65 
317d0     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
317d4     73 74 73 00 
317d8     49 6E 76 61 
317dc     6C 69 64 20 
317e0     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
317e4     6D 65 6E 74 
317e8     00 54 6F 6F 
317ec     20 6D 61 6E 
317f0     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
317f4     65 6E 20 66 
317f8     69 6C 65 73 
317fc     00 49 2F 4F 
31800     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
31804     6F 72 00 4E 
31808     6F 74 20 61 
3180c     20 64 69 72 
31810     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
31814     72 79 00 49 
31818     73 20 61 20 
3181c     64 69 72 65 
31820     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
31824     79 00 52 65 
31828     61 64 20 6F 
3182c     6E 6C 79 20 
31830     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
31834     20 73 79 73 
31838     74 65 6D 00 
3183c     46 75 6E 63 
31840     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
31844     20 6E 6F 74 
31848     20 69 6D 70 
3184c     6C 65 6D 65 
31850     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
31854     00 44 69 72 
31858     65 63 74 6F 
3185c     72 79 20 6E 
31860     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
31864     6D 70 74 79 
31868     00 4E 61 6D 
3186c     65 20 74 6F 
31870     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
31874     6E 67 00 44 
31878     65 76 69 63 
3187c     65 20 6E 6F 
31880     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
31884     65 6B 61 62 
31888     6C 65 00 42 
3188c     61 64 20 61 
31890     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
31894     73 73 00 42 
31898     72 6F 6B 65 
3189c     6E 20 63 6F 
318a0     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
318a4     74 69 6F 6E 
318a8     00 44 65 76 
318ac     69 63 65 20 
318b0     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
318b4     65 73 6F 75 
318b8     72 63 65 20 
318bc     62 75 73 79 
318c0     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
318c4     73 73 20 64 
318c8     65 76 69 63 
318cc     65 20 6C 69 
318d0     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
318d4     6F 20 73 70 
318d8     61 63 65 20 
318dc     6F 6E 20 64 
318e0     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
318e4     65 00 55 6E 
318e8     6B 6E 6F 77 
318ec     6E 20 65 72 
318f0     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
318f4     00 00 00 00 
318f8     00 00 00 00 | 	byte	$00[8]
318fc     05 00 00 00 
31900     00 00 00 00 
31904     00 00 00 00 
31908     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3190c     00 00 00 00 | 	byte	$00, $00, $00, $00
31910     00 00 00 08 | 	long	(128 {__system___tx})<<20
31914     00 00 10 08 | 	long	(129 {__system___rx})<<20
31918     00 00 00 00 | 	byte	$00, $00, $00, $00
3191c     00 00 20 08 | 	long	(130 {__system___rxtxioctl_0579})<<20
31920     00 00 30 08 | 	long	(131 {__system____dummy_flush_0580})<<20
31924     00 00 00 00 
31928     00 00 00 00 | 	byte	$00[8]
3192c     01 00 00 00 
31930     06 00 00 00 
31934     00 00 00 00 
31938     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3193c     00 00 00 00 
31940     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
31944     00 00 00 08 | 	long	(128 {__system___tx})<<20
31948     00 00 10 08 | 	long	(129 {__system___rx})<<20
3194c     00 00 00 00 | 	byte	$00, $00, $00, $00
31950     00 00 20 08 | 	long	(130 {__system___rxtxioctl_0579})<<20
31954     00 00 30 08 | 	long	(131 {__system____dummy_flush_0580})<<20
31958     00 00 00 00 
3195c     00 00 00 00 | 	byte	$00[8]
31960     01 00 00 00 
31964     06 00 00 00 
31968     00 00 00 00 
3196c     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31970     00 00 00 00 
31974     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
31978     00 00 00 08 | 	long	(128 {__system___tx})<<20
3197c     00 00 10 08 | 	long	(129 {__system___rx})<<20
31980     00 00 00 00 | 	byte	$00, $00, $00, $00
31984     00 00 20 08 | 	long	(130 {__system___rxtxioctl_0579})<<20
31988     00 00 30 08 | 	long	(131 {__system____dummy_flush_0580})<<20
3198c     00 00 00 00 
      ...             
31afc     00 00 00 00 
31b00     00 00 00 00 | 	byte	$00[376]
31b04     08 1B 03 00 | 	long	@@@__system__dat_ + 1844
31b08     00 00 00 00 
31b0c     00 00 00 00 
31b10     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31b14                 | 	alignl
31b14                 | _fatfs_cc_dat_
31b14     C7 00 FC 00 
31b18     E9 00 E2 00 
31b1c     E4 00 E0 00 
31b20     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
31b24     EA 00 EB 00 
31b28     E8 00 EF 00 
31b2c     EE 00 EC 00 
31b30     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
31b34     C9 00 E6 00 
31b38     C6 00 F4 00 
31b3c     F6 00 F2 00 
31b40     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
31b44     FF 00 D6 00 
31b48     DC 00 F8 00 
31b4c     A3 00 D8 00 
31b50     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
31b54     E1 00 ED 00 
31b58     F3 00 FA 00 
31b5c     F1 00 D1 00 
31b60     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
31b64     BF 00 AE 00 
31b68     AC 00 BD 00 
31b6c     BC 00 A1 00 
31b70     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
31b74     91 25 92 25 
31b78     93 25 02 25 
31b7c     24 25 C1 00 
31b80     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
31b84     A9 00 63 25 
31b88     51 25 57 25 
31b8c     5D 25 A2 00 
31b90     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
31b94     14 25 34 25 
31b98     2C 25 1C 25 
31b9c     00 25 3C 25 
31ba0     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
31ba4     5A 25 54 25 
31ba8     69 25 66 25 
31bac     60 25 50 25 
31bb0     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
31bb4     F0 00 D0 00 
31bb8     CA 00 CB 00 
31bbc     C8 00 31 01 
31bc0     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
31bc4     CF 00 18 25 
31bc8     0C 25 88 25 
31bcc     84 25 A6 00 
31bd0     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
31bd4     D3 00 DF 00 
31bd8     D4 00 D2 00 
31bdc     F5 00 D5 00 
31be0     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
31be4     DE 00 DA 00 
31be8     DB 00 D9 00 
31bec     FD 00 DD 00 
31bf0     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
31bf4     AD 00 B1 00 
31bf8     17 20 BE 00 
31bfc     B6 00 A7 00 
31c00     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
31c04     B0 00 A8 00 
31c08     B7 00 B9 00 
31c0c     B3 00 B2 00 
31c10     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
31c14     61 00 1A 03 
31c18     E0 00 17 03 
31c1c     F8 00 07 03 
31c20     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
31c24     78 01 00 01 
31c28     30 01 32 01 
31c2c     06 01 39 01 
31c30     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
31c34     2E 01 79 01 
31c38     06 01 80 01 
31c3c     4D 00 43 02 
31c40     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
31c44     82 01 84 01 
31c48     84 01 86 01 
31c4c     87 01 87 01 
31c50     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
31c54     8B 01 8B 01 
31c58     8D 01 8E 01 
31c5c     8F 01 90 01 
31c60     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
31c64     93 01 94 01 
31c68     F6 01 96 01 
31c6c     97 01 98 01 
31c70     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
31c74     9B 01 9C 01 
31c78     9D 01 20 02 
31c7c     9F 01 A0 01 
31c80     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
31c84     A2 01 A4 01 
31c88     A4 01 A6 01 
31c8c     A7 01 A7 01 
31c90     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
31c94     AB 01 AC 01 
31c98     AC 01 AE 01 
31c9c     AF 01 AF 01 
31ca0     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
31ca4     B3 01 B3 01 
31ca8     B5 01 B5 01 
31cac     B7 01 B8 01 
31cb0     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
31cb4     BB 01 BC 01 
31cb8     BC 01 BE 01 
31cbc     F7 01 C0 01 
31cc0     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
31cc4     C3 01 C4 01 
31cc8     C5 01 C4 01 
31ccc     C7 01 C8 01 
31cd0     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
31cd4     CB 01 CA 01 
31cd8     CD 01 10 01 
31cdc     DD 01 01 00 
31ce0     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
31ce4     12 01 F3 01 
31ce8     03 00 F1 01 
31cec     F4 01 F4 01 
31cf0     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
31cf4     22 02 12 01 
31cf8     3A 02 09 00 
31cfc     65 2C 3B 02 
31d00     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
31d04     66 2C 3F 02 
31d08     40 02 41 02 
31d0c     41 02 46 02 
31d10     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
31d14     40 00 81 01 
31d18     86 01 55 02 
31d1c     89 01 8A 01 
31d20     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
31d24     5A 02 90 01 
31d28     5C 02 5D 02 
31d2c     5E 02 5F 02 
31d30     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
31d34     62 02 94 01 
31d38     64 02 65 02 
31d3c     66 02 67 02 
31d40     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
31d44     6A 02 62 2C 
31d48     6C 02 6D 02 
31d4c     6E 02 9C 01 
31d50     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
31d54     9D 01 73 02 
31d58     74 02 9F 01 
31d5c     76 02 77 02 
31d60     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
31d64     7A 02 7B 02 
31d68     7C 02 64 2C 
31d6c     7E 02 7F 02 
31d70     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
31d74     82 02 A9 01 
31d78     84 02 85 02 
31d7c     86 02 87 02 
31d80     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
31d84     B1 01 B2 01 
31d88     45 02 8D 02 
31d8c     8E 02 8F 02 
31d90     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
31d94     B7 01 7B 03 
31d98     03 00 FD 03 
31d9c     FE 03 FF 03 
31da0     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
31da4     86 03 88 03 
31da8     89 03 8A 03 
31dac     B1 03 11 03 
31db0     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
31db4     A3 03 A3 03 
31db8     C4 03 08 03 
31dbc     CC 03 03 00 
31dc0     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
31dc4     8F 03 D8 03 
31dc8     18 01 F2 03 
31dcc     0A 00 F9 03 
31dd0     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
31dd4     F5 03 F6 03 
31dd8     F7 03 F7 03 
31ddc     F9 03 FA 03 
31de0     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
31de4     20 03 50 04 
31de8     10 07 60 04 
31dec     22 01 8A 04 
31df0     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
31df4     0E 01 CF 04 
31df8     01 00 C0 04 
31dfc     D0 04 44 01 
31e00     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
31e04     00 00 7D 1D 
31e08     01 00 63 2C 
31e0c     00 1E 96 01 
31e10     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
31e14     00 1F 08 06 
31e18     10 1F 06 06 
31e1c     20 1F 08 06 
31e20     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
31e24     40 1F 06 06 
31e28     51 1F 07 00 
31e2c     59 1F 52 1F 
31e30     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
31e34     5D 1F 56 1F 
31e38     5F 1F 60 1F 
31e3c     08 06 70 1F 
31e40     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
31e44     BB 1F C8 1F 
31e48     C9 1F CA 1F 
31e4c     CB 1F DA 1F 
31e50     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
31e54     F9 1F EA 1F 
31e58     EB 1F FA 1F 
31e5c     FB 1F 80 1F 
31e60     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
31e64     08 06 A0 1F 
31e68     08 06 B0 1F 
31e6c     04 00 B8 1F 
31e70     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
31e74     BC 1F CC 1F 
31e78     01 00 C3 1F 
31e7c     D0 1F 02 06 
31e80     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
31e84     E5 1F 01 00 
31e88     EC 1F F3 1F 
31e8c     01 00 FC 1F 
31e90     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
31e94     32 21 70 21 
31e98     10 02 84 21 
31e9c     01 00 83 21 
31ea0     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
31ea4     30 2C 2F 04 
31ea8     60 2C 02 01 
31eac     67 2C 06 01 
31eb0     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
31eb4     80 2C 64 01 
31eb8     00 2D 26 08 
31ebc     41 FF 1A 03 
31ec0     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
31ec4     05 07 09 0E 
31ec8     10 12 14 16 
31ecc     18 1C 1E 43 
31ed0     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
31ed4     41 41 43 45 
31ed8     45 45 49 49 
31edc     49 41 41 45 
31ee0     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
31ee4     4F 55 55 59 
31ee8     4F 55 4F 9C 
31eec     4F 9E 9F 41 
31ef0     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
31ef4     A5 A6 A7 A8 
31ef8     A9 AA AB AC 
31efc     AD AE AF B0 
31f00     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
31f04     41 41 41 B8 
31f08     B9 BA BB BC 
31f0c     BD BE BF C0 
31f10     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
31f14     C5 41 41 C8 
31f18     C9 CA CB CC 
31f1c     CD CE CF D1 
31f20     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
31f24     49 49 49 49 
31f28     D9 DA DB DC 
31f2c     DD 49 DF 4F 
31f30     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
31f34     4F E6 E8 E8 
31f38     55 55 55 59 
31f3c     59 EE EF F0 
31f40     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
31f44     F5 F6 F7 F8 
31f48     F9 FA FB FC 
31f4c     FD FE FF 00 
31f50     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
31f54     00 00 00 00 | 	byte	$00, $00, $00, $00
31f58     00 00 F0 06 | 	long	(111 {_fatfs_cc_v_close})<<20
31f5c     00 00 00 07 | 	long	(112 {_fatfs_cc_v_read})<<20
31f60     00 00 10 07 | 	long	(113 {_fatfs_cc_v_write})<<20
31f64     00 00 20 07 | 	long	(114 {_fatfs_cc_v_lseek})<<20
31f68     00 00 30 07 | 	long	(115 {_fatfs_cc_v_ioctl})<<20
31f6c     00 00 40 08 | 	long	(132 {_fatfs_cc_v_flush})<<20
31f70     00 00 00 00 
31f74     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
31f78     00 00 40 07 | 	long	(116 {_fatfs_cc_v_open})<<20
31f7c     00 00 50 07 | 	long	(117 {_fatfs_cc_v_creat})<<20
31f80     00 00 60 07 | 	long	(118 {_fatfs_cc_v_opendir})<<20
31f84     00 00 70 07 | 	long	(119 {_fatfs_cc_v_closedir})<<20
31f88     00 00 80 07 | 	long	(120 {_fatfs_cc_v_readdir})<<20
31f8c     00 00 90 07 | 	long	(121 {_fatfs_cc_v_stat})<<20
31f90     00 00 A0 07 | 	long	(122 {_fatfs_cc_v_mkdir})<<20
31f94     00 00 B0 07 | 	long	(123 {_fatfs_cc_v_rmdir})<<20
31f98     00 00 C0 07 | 	long	(124 {_fatfs_cc_v_remove})<<20
31f9c     00 00 D0 07 | 	long	(125 {_fatfs_cc_v_rename})<<20
31fa0     00 00 E0 07 | 	long	(126 {_fatfs_cc_v_init})<<20
31fa4     00 00 F0 07 | 	long	(127 {_fatfs_cc_v_deinit})<<20
31fa8     FF FF FF FF 
31fac     1F 00 00 00 
31fb0     1C 00 00 00 
31fb4     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
31fb8     1E 00 00 00 
31fbc     1F 00 00 00 
31fc0     1E 00 00 00 
31fc4     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
31fc8     1F 00 00 00 
31fcc     1E 00 00 00 
31fd0     1F 00 00 00 
31fd4     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
31fd8     1F 00 00 00 
31fdc     00 00 00 00 
31fe0     1F 00 00 00 
31fe4     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
31fe8     5A 00 00 00 
31fec     78 00 00 00 
31ff0     97 00 00 00 
31ff4     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
31ff8     D4 00 00 00 
31ffc     F3 00 00 00 
32000     11 01 00 00 
32004     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
32008     4E 01 00 00 
3200c     6D 01 00 00 
32010     FF FF FF FF 
32014     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
32018     00 00 00 00 
      ...             
32030     00 00 00 00 
32034     00 00 00 00 | 	byte	$00[32]
32038     56 20 03 00 | 	long	@@@_fatfs_cc_dat_ + 1346
3203c     5A 20 03 00 | 	long	@@@_fatfs_cc_dat_ + 1350
32040     00 00 00 00 
32044     00 00 00 00 
32048     00 00 00 00 
3204c     00 00 00 00 
32050     00 00       | 	byte	$00[18]
32052     3F 3F 3F 00 
32056     55 43 54 00 
3205a     55 43 54 00 
3205e     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
32062     00 00 00 00 
32066     00 00 00    | 	byte	$00[7]
32069     CA 9A 3B 00 
3206d     00 00 00 01 
32071     01 01 01 01 
32075     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
32079     91 11 11 11 
3207d     11 01 01 01 
32081     01 01 01 01 
32085     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
32089     01 01 01 01 
3208d     01 01 01    | 	byte	$01[7]
32090     90 20 20 20 
32094     20 20 20 20 
32098     20 20 20 20 
3209c     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
320a0     42 42 42 42 
320a4     42 42 42 42 
320a8     42 42       | 	byte	$42[10]
320aa     20 20 20 20 
320ae     20 20 20    | 	byte	$20[7]
320b1     44 44 44 44 
320b5     44 44       | 	byte	$44[6]
320b7     04 04 04 04 
320bb     04 04 04 04 
320bf     04 04 04 04 
320c3     04 04 04 04 
320c7     04 04 04 04 | 	byte	$04[20]
320cb     20 20 20 20 
320cf     20 20       | 	byte	$20[6]
320d1     48 48 48 48 
320d5     48 48       | 	byte	$48[6]
320d7     08 08 08 08 
320db     08 08 08 08 
320df     08 08 08 08 
320e3     08 08 08 08 
320e7     08 08 08 08 | 	byte	$08[20]
320eb     20 20 20 20 
320ef     01 00 00 00 
320f3     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
320f4                 | __methodtable__
320f4     DC 46 01 00 | 	long	@_do_no_command
320f8     DC D6 00 00 | 	long	@_do_plus
320fc     C8 DB 00 00 | 	long	@_do_minus
32100     90 E0 00 00 | 	long	@_do_or
32104     A8 E1 00 00 | 	long	@_do_mul
32108     34 E7 00 00 | 	long	@_do_fdiv
3210c     78 DF 00 00 | 	long	@_do_and
32110     14 E5 00 00 | 	long	@_do_div
32114     FC E8 00 00 | 	long	@_do_mod
32118     1C EB 00 00 | 	long	@_do_shl
3211c     34 EC 00 00 | 	long	@_do_shr
32120     4C ED 00 00 | 	long	@_do_power
32124     24 D1 00 00 | 	long	@_do_getvar
32128     34 9A 00 00 | 	long	@_do_push
3212c     64 CA 00 00 | 	long	@_do_assign
32130     BC 23 01 00 | 	long	@_do_cls
32134     60 C4 00 00 | 	long	@_do_new
32138     60 24 01 00 | 	long	@_do_plot
3213c     30 25 01 00 | 	long	@_do_draw
32140     A4 2E 01 00 | 	long	@_do_print
32144     9C 27 01 00 | 	long	@_do_circle
32148     24 26 01 00 | 	long	@_do_fcircle
3214c     14 29 01 00 | 	long	@_do_box
32150     BC 2C 01 00 | 	long	@_do_frame
32154     28 24 01 00 | 	long	@_do_color
32158     38 7A 00 00 | 	long	@_do_for
3215c     64 7C 00 00 | 	long	@_do_next
32160     C4 C1 00 00 | 	long	@_do_list
32164     84 AA 00 00 | 	long	@_do_run
32168     20 C9 00 00 | 	long	@_do_error
3216c     1C C6 00 00 | 	long	@_do_fast_goto
32170     0C C7 00 00 | 	long	@_do_find_goto
32174     1C C9 00 00 | 	long	@_do_slow_goto
32178     14 0C 01 00 | 	long	@_do_converttoint
3217c     78 A0 00 00 | 	long	@_test_csave
32180     CC A3 00 00 | 	long	@_do_save
32184     B8 A6 00 00 | 	long	@_do_load
32188     70 38 01 00 | 	long	@_do_pinwrite
3218c     10 3D 01 00 | 	long	@_do_waitms
32190     4C 3E 01 00 | 	long	@_do_waitvbl
32194     4C 41 01 00 | 	long	@_do_if
32198     30 42 01 00 | 	long	@_do_else
3219c     F8 42 01 00 | 	long	@_do_nothing
321a0     14 EF 00 00 | 	long	@_do_eq
321a4     8C FD 00 00 | 	long	@_do_ge
321a8     64 02 01 00 | 	long	@_do_le
321ac     EC F3 00 00 | 	long	@_do_gt
321b0     C4 F8 00 00 | 	long	@_do_lt
321b4     3C 07 01 00 | 	long	@_do_ne
321b8     F0 0E 01 00 | 	long	@_do_rnd
321bc     FC 42 01 00 | 	long	@_do_brun
321c0     C8 45 01 00 | 	long	@_do_beep
321c4     7C 3E 01 00 | 	long	@_do_dir
321c8     6C 33 01 00 | 	long	@_do_paper
321cc     F4 33 01 00 | 	long	@_do_ink
321d0     90 34 01 00 | 	long	@_do_font
321d4     0C 35 01 00 | 	long	@_do_mode
321d8     34 45 01 00 | 	long	@_do_mouse
321dc     54 23 01 00 | 	long	@_do_gettime
321e0     68 45 01 00 | 	long	@_do_cursor
321e4     9C 45 01 00 | 	long	@_do_click
321e8     E0 20 01 00 | 	long	@_do_mousex
321ec     24 21 01 00 | 	long	@_do_mousey
321f0     AC 21 01 00 | 	long	@_do_mousek
321f4     68 21 01 00 | 	long	@_do_mousew
321f8     B8 10 01 00 | 	long	@_do_sin
321fc     0C 18 01 00 | 	long	@_do_stick
32200     90 19 01 00 | 	long	@_do_strig
32204     F4 1F 01 00 | 	long	@_do_sprite
32208     64 1C 01 00 | 	long	@_do_defsprite
3220c     14 1B 01 00 | 	long	@_do_getpixel
32210     58 3E 01 00 | 	long	@_do_waitclock
32214     E8 46 01 00 | 	long	@_do_negative
32218     F0 21 01 00 | 	long	@_do_rdpin
3221c     5C 22 01 00 | 	long	@_do_rqpin
32220     D0 22 01 00 | 	long	@_do_pinread
32224     08 3B 01 00 | 	long	@_do_wrpin
32228     88 3B 01 00 | 	long	@_do_wxpin
3222c     08 3C 01 00 | 	long	@_do_wypin
32230     F8 38 01 00 | 	long	@_do_pinfloat
32234     38 39 01 00 | 	long	@_do_pinlo
32238     78 39 01 00 | 	long	@_do_pinhi
3223c     F8 39 01 00 | 	long	@_do_pinstart
32240     B8 39 01 00 | 	long	@_do_pintoggle
32244     88 3C 01 00 | 	long	@_do_position
32248     C4 11 01 00 | 	long	@_do_cos
3224c     E4 12 01 00 | 	long	@_do_tan
32250     08 16 01 00 | 	long	@_do_atn
32254     F0 13 01 00 | 	long	@_do_asin
32258     FC 14 01 00 | 	long	@_do_acos
3225c     1C 17 01 00 | 	long	@_do_sqr
32260     FC 2A 01 00 | 	long	@_do_fill
32264     40 B8 00 00 | 	long	@_do_defsnd
32268     A8 AD 00 00 | 	long	@_do_defenv
3226c     54 42 01 00 | 	long	@_do_rad
32270     7C 42 01 00 | 	long	@_do_deg
32274     A4 42 01 00 | 	long	@_do_int
32278     70 7A 01 00 | 	long	@_hg010b_spin2_putchar
3227c     EC 80 02 00 | 	long	@__struct___bas_wrap_sender_tx
32280     30 81 02 00 | 	long	@__struct___bas_wrap_sender_rx
32284     78 81 02 00 | 	long	@__struct___bas_wrap_sender_close
32288     1C 80 02 00 | 	long	@__struct__s_vfs_file_t_putchar
3228c     8C 80 02 00 | 	long	@__struct__s_vfs_file_t_getchar
32290     D4 7F 02 00 | 	long	@___strs_cl_pfunc
32294     44 DF 01 00 | 	long	@__system____root_opendir
32298     E0 DF 01 00 | 	long	@__system____root_closedir
3229c     5C DF 01 00 | 	long	@__system____root_readdir
322a0     E8 DF 01 00 | 	long	@__system____root_stat
322a4     70 D8 01 00 | 	long	@__system____default_putc
322a8     F4 D7 01 00 | 	long	@__system____default_getc
322ac     18 D9 01 00 | 	long	@__system____default_flush
322b0     EC 6A 02 00 | 	long	@_fatfs_cc_v_close
322b4     08 6F 02 00 | 	long	@_fatfs_cc_v_read
322b8     1C 70 02 00 | 	long	@_fatfs_cc_v_write
322bc     FC 70 02 00 | 	long	@_fatfs_cc_v_lseek
322c0     84 71 02 00 | 	long	@_fatfs_cc_v_ioctl
322c4     D8 71 02 00 | 	long	@_fatfs_cc_v_open
322c8     50 6A 02 00 | 	long	@_fatfs_cc_v_creat
322cc     30 6B 02 00 | 	long	@_fatfs_cc_v_opendir
322d0     A4 6B 02 00 | 	long	@_fatfs_cc_v_closedir
322d4     E4 6B 02 00 | 	long	@_fatfs_cc_v_readdir
322d8     18 6D 02 00 | 	long	@_fatfs_cc_v_stat
322dc     98 71 02 00 | 	long	@_fatfs_cc_v_mkdir
322e0     B8 71 02 00 | 	long	@_fatfs_cc_v_rmdir
322e4     A8 71 02 00 | 	long	@_fatfs_cc_v_remove
322e8     C8 71 02 00 | 	long	@_fatfs_cc_v_rename
322ec     E8 72 02 00 | 	long	@_fatfs_cc_v_init
322f0     F0 72 02 00 | 	long	@_fatfs_cc_v_deinit
322f4     AC 8D 01 00 | 	long	@__system___tx
322f8     EC 8D 01 00 | 	long	@__system___rx
322fc     54 EB 01 00 | 	long	@__system___rxtxioctl_0579
32300     AC EB 01 00 | 	long	@__system____dummy_flush_0580
32304     B8 72 02 00 | 	long	@_fatfs_cc_v_flush
32308                 | __heap_base
32308     00 00 00 00 
      ...             
61108     00 00 00 00 
6110c     00 00 00 00 | 	long	0[48002]
61110                 | objmem
61110     00 00 00 00 
      ...             
705e8     00 00 00 00 
705ec     00 00 00 00 | 	long	0[15672]
705f0                 | stackspace
705f0     00 00 00 00 | 	long	0[1]
705f4 100             | 	org	COG_BSS_START
705f4 100             | _var01
705f4 100             | 	res	1
705f4 101             | _var02
705f4 101             | 	res	1
705f4 102             | _var03
705f4 102             | 	res	1
705f4 103             | _var04
705f4 103             | 	res	1
705f4 104             | _var05
705f4 104             | 	res	1
705f4 105             | _var06
705f4 105             | 	res	1
705f4 106             | _var07
705f4 106             | 	res	1
705f4 107             | _var08
705f4 107             | 	res	1
705f4 108             | _var09
705f4 108             | 	res	1
705f4 109             | arg01
705f4 109             | 	res	1
705f4 10a             | arg02
705f4 10a             | 	res	1
705f4 10b             | arg03
705f4 10b             | 	res	1
705f4 10c             | arg04
705f4 10c             | 	res	1
705f4 10d             | arg05
705f4 10d             | 	res	1
705f4 10e             | arg06
705f4 10e             | 	res	1
705f4 10f             | local01
705f4 10f             | 	res	1
705f4 110             | local02
705f4 110             | 	res	1
705f4 111             | local03
705f4 111             | 	res	1
705f4 112             | local04
705f4 112             | 	res	1
705f4 113             | local05
705f4 113             | 	res	1
705f4 114             | local06
705f4 114             | 	res	1
705f4 115             | local07
705f4 115             | 	res	1
705f4 116             | local08
705f4 116             | 	res	1
705f4 117             | local09
705f4 117             | 	res	1
705f4 118             | local10
705f4 118             | 	res	1
705f4 119             | local11
705f4 119             | 	res	1
705f4 11a             | local12
705f4 11a             | 	res	1
705f4 11b             | local13
705f4 11b             | 	res	1
705f4 11c             | local14
705f4 11c             | 	res	1
705f4 11d             | local15
705f4 11d             | 	res	1
705f4 11e             | local16
705f4 11e             | 	res	1
705f4 11f             | local17
705f4 11f             | 	res	1
705f4 120             | local18
705f4 120             | 	res	1
705f4 121             | local19
705f4 121             | 	res	1
705f4 122             | local20
705f4 122             | 	res	1
705f4 123             | local21
705f4 123             | 	res	1
705f4 124             | local22
705f4 124             | 	res	1
705f4 125             | local23
705f4 125             | 	res	1
705f4 126             | local24
705f4 126             | 	res	1
705f4 127             | local25
705f4 127             | 	res	1
705f4 128             | local26
705f4 128             | 	res	1
705f4 129             | local27
705f4 129             | 	res	1
705f4 12a             | local28
705f4 12a             | 	res	1
705f4 12b             | local29
705f4 12b             | 	res	1
705f4 12c             | local30
705f4 12c             | 	res	1
705f4 12d             | local31
705f4 12d             | 	res	1
705f4 12e             | local32
705f4 12e             | 	res	1
705f4 12f             | local33
705f4 12f             | 	res	1
705f4 130             | local34
705f4 130             | 	res	1
705f4 131             | local35
705f4 131             | 	res	1
705f4 132             | muldiva_
705f4 132             | 	res	1
705f4 133             | muldivb_
705f4 133             | 	res	1
705f4 134             | 	fit	480
705f4 134             | 
